{"name":"mul_eq_mul_prime_prod","module":"Mathlib.RingTheory.Prime","initialProofState":"R : Type u_1\ninst✝¹ : CancelCommMonoidWithZero R\nα : Type u_2\ninst✝ : DecidableEq α\nx y a : R\ns : Finset α\np : α → R\nhp : ∀ (i : α), Membership.mem s i → Prime (p i)\nhx : Eq (HMul.hMul x y) (HMul.hMul a (s.prod fun i => p i))\n⊢ Exists fun t => Exists fun u => Exists fun b => Exists fun c => And (Eq (Union.union t u) s) (And (Disjoint t u) (And (Eq a (HMul.hMul b c)) (And (Eq x (HMul.hMul b (t.prod fun i => p i))) (Eq y (HMul.hMul c (u.prod fun i => p i))))))","decl":"/-- If `x * y = a * ∏ i ∈ s, p i` where `p i` is always prime, then\n  `x` and `y` can both be written as a divisor of `a` multiplied by\n  a product over a subset of `s`  -/\ntheorem mul_eq_mul_prime_prod {α : Type*} [DecidableEq α] {x y a : R} {s : Finset α} {p : α → R}\n    (hp : ∀ i ∈ s, Prime (p i)) (hx : x * y = a * ∏ i ∈ s, p i) :\n    ∃ (t u : Finset α) (b c : R),\n      t ∪ u = s ∧ Disjoint t u ∧ a = b * c ∧ (x = b * ∏ i ∈ t, p i) ∧ y = c * ∏ i ∈ u, p i := by\n  induction' s using Finset.induction with i s his ih generalizing x y a\n  · exact ⟨∅, ∅, x, y, by simp [hx]⟩\n  · rw [prod_insert his, ← mul_assoc] at hx\n    have hpi : Prime (p i) := hp i (mem_insert_self _ _)\n    rcases ih (fun i hi ↦ hp i (mem_insert_of_mem hi)) hx with\n      ⟨t, u, b, c, htus, htu, hbc, rfl, rfl⟩\n    have hit : i ∉ t := fun hit ↦ his (htus ▸ mem_union_left _ hit)\n    have hiu : i ∉ u := fun hiu ↦ his (htus ▸ mem_union_right _ hiu)\n    obtain ⟨d, rfl⟩ | ⟨d, rfl⟩ : p i ∣ b ∨ p i ∣ c := hpi.dvd_or_dvd ⟨a, by rw [← hbc, mul_comm]⟩\n    · rw [mul_assoc, mul_comm a, mul_right_inj' hpi.ne_zero] at hbc\n      exact ⟨insert i t, u, d, c, by rw [insert_union, htus], disjoint_insert_left.2 ⟨hiu, htu⟩, by\n          simp [hbc, prod_insert hit, mul_assoc, mul_comm, mul_left_comm]⟩\n    · rw [← mul_assoc, mul_right_comm b, mul_left_inj' hpi.ne_zero] at hbc\n      exact ⟨t, insert i u, b, d, by rw [union_insert, htus], disjoint_insert_right.2 ⟨hit, htu⟩, by\n          simp [← hbc, prod_insert hiu, mul_assoc, mul_comm, mul_left_comm]⟩\n\n"}
{"name":"mul_eq_mul_prime_pow","module":"Mathlib.RingTheory.Prime","initialProofState":"R : Type u_1\ninst✝ : CancelCommMonoidWithZero R\nx y a p : R\nn : Nat\nhp : Prime p\nhx : Eq (HMul.hMul x y) (HMul.hMul a (HPow.hPow p n))\n⊢ Exists fun i => Exists fun j => Exists fun b => Exists fun c => And (Eq (HAdd.hAdd i j) n) (And (Eq a (HMul.hMul b c)) (And (Eq x (HMul.hMul b (HPow.hPow p i))) (Eq y (HMul.hMul c (HPow.hPow p j)))))","decl":"/-- If `x * y = a * p ^ n` where `p` is prime, then `x` and `y` can both be written\n  as the product of a power of `p` and a divisor of `a`. -/\ntheorem mul_eq_mul_prime_pow {x y a p : R} {n : ℕ} (hp : Prime p) (hx : x * y = a * p ^ n) :\n    ∃ (i j : ℕ) (b c : R), i + j = n ∧ a = b * c ∧ x = b * p ^ i ∧ y = c * p ^ j := by\n  rcases mul_eq_mul_prime_prod (fun _ _ ↦ hp)\n    (show x * y = a * (range n).prod fun _ ↦ p by simpa) with\n      ⟨t, u, b, c, htus, htu, rfl, rfl, rfl⟩\n  exact ⟨#t, #u, b, c, by rw [← card_union_of_disjoint htu, htus, card_range], by simp⟩\n\n"}
{"name":"Prime.neg","module":"Mathlib.RingTheory.Prime","initialProofState":"α : Type u_1\ninst✝ : CommRing α\np : α\nhp : Prime p\n⊢ Prime (Neg.neg p)","decl":"theorem Prime.neg {p : α} (hp : Prime p) : Prime (-p) := by\n  obtain ⟨h1, h2, h3⟩ := hp\n  exact ⟨neg_ne_zero.mpr h1, by rwa [IsUnit.neg_iff], by simpa [neg_dvd] using h3⟩\n\n"}
{"name":"Prime.abs","module":"Mathlib.RingTheory.Prime","initialProofState":"α : Type u_1\ninst✝¹ : CommRing α\ninst✝ : LinearOrder α\np : α\nhp : Prime p\n⊢ Prime (abs p)","decl":"theorem Prime.abs [LinearOrder α] {p : α} (hp : Prime p) : Prime (abs p) := by\n  obtain h | h := abs_choice p <;> rw [h]\n  · exact hp\n  · exact hp.neg\n\n"}
