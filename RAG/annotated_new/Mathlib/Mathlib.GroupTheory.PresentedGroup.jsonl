{"name":"PresentedGroup.mk_surjective","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nrels : Set (FreeGroup α)\n⊢ Function.Surjective ⇑(PresentedGroup.mk rels)","decl":"theorem mk_surjective (rels : Set (FreeGroup α)) : Function.Surjective <| mk rels :=\n  QuotientGroup.mk_surjective\n\n"}
{"name":"PresentedGroup.closure_range_of","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nrels : Set (FreeGroup α)\n⊢ Eq (Subgroup.closure (Set.range PresentedGroup.of)) Top.top","decl":"/-- The generators of a presented group generate the presented group. That is, the subgroup closure\nof the set of generators equals `⊤`. -/\n@[simp]\ntheorem closure_range_of (rels : Set (FreeGroup α)) :\n    Subgroup.closure (Set.range (PresentedGroup.of : α → PresentedGroup rels)) = ⊤ := by\n  have : (PresentedGroup.of : α → PresentedGroup rels) = QuotientGroup.mk' _ ∘ FreeGroup.of := rfl\n  rw [this, Set.range_comp, ← MonoidHom.map_closure (QuotientGroup.mk' _),\n    FreeGroup.closure_range_of, ← MonoidHom.range_eq_map]\n  exact MonoidHom.range_eq_top.2 (QuotientGroup.mk'_surjective _)\n\n"}
{"name":"PresentedGroup.induction_on","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nrels : Set (FreeGroup α)\nC : PresentedGroup rels → Prop\nx : PresentedGroup rels\nH : ∀ (z : FreeGroup α), C ((PresentedGroup.mk rels) z)\n⊢ C x","decl":"@[induction_eliminator]\ntheorem induction_on {rels : Set (FreeGroup α)} {C : PresentedGroup rels → Prop}\n    (x : PresentedGroup rels) (H : ∀ z, C (mk rels z)) : C x :=\n  Quotient.inductionOn' x H\n\n"}
{"name":"PresentedGroup.generated_by","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nrels : Set (FreeGroup α)\nH : Subgroup (PresentedGroup rels)\nh : ∀ (j : α), Membership.mem H (PresentedGroup.of j)\nx : PresentedGroup rels\n⊢ Membership.mem H x","decl":"theorem generated_by (rels : Set (FreeGroup α)) (H : Subgroup (PresentedGroup rels))\n    (h : ∀ j : α, PresentedGroup.of j ∈ H) (x : PresentedGroup rels) : x ∈ H := by\n  induction' x with z\n  induction z\n  · exact one_mem H\n  · exact h _\n  · exact (Subgroup.inv_mem_iff H).mpr (by assumption)\n  rename_i h1 h2\n  change QuotientGroup.mk _ ∈ H.carrier\n  rw [QuotientGroup.mk_mul]\n  exact Subgroup.mul_mem _ h1 h2\n\n"}
{"name":"PresentedGroup.closure_rels_subset_ker","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nG : Type u_2\ninst✝ : Group G\nf : α → G\nrels : Set (FreeGroup α)\nh : ∀ (r : FreeGroup α), Membership.mem rels r → Eq ((FreeGroup.lift f) r) 1\n⊢ LE.le (Subgroup.normalClosure rels) (FreeGroup.lift f).ker","decl":"theorem closure_rels_subset_ker (h : ∀ r ∈ rels, FreeGroup.lift f r = 1) :\n    Subgroup.normalClosure rels ≤ MonoidHom.ker F :=\n  Subgroup.normalClosure_le_normal fun x w ↦ MonoidHom.mem_ker.2 (h x w)\n\n"}
{"name":"PresentedGroup.to_group_eq_one_of_mem_closure","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nG : Type u_2\ninst✝ : Group G\nf : α → G\nrels : Set (FreeGroup α)\nh : ∀ (r : FreeGroup α), Membership.mem rels r → Eq ((FreeGroup.lift f) r) 1\nx : FreeGroup α\na✝ : Membership.mem (Subgroup.normalClosure rels) x\n⊢ Eq ((FreeGroup.lift f) x) 1","decl":"theorem to_group_eq_one_of_mem_closure (h : ∀ r ∈ rels, FreeGroup.lift f r = 1) :\n    ∀ x ∈ Subgroup.normalClosure rels, F x = 1 :=\n  fun _ w ↦ MonoidHom.mem_ker.1 <| closure_rels_subset_ker h w\n\n"}
{"name":"PresentedGroup.toGroup.of","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nG : Type u_2\ninst✝ : Group G\nf : α → G\nrels : Set (FreeGroup α)\nh : ∀ (r : FreeGroup α), Membership.mem rels r → Eq ((FreeGroup.lift f) r) 1\nx : α\n⊢ Eq ((PresentedGroup.toGroup h) (PresentedGroup.of x)) (f x)","decl":"@[simp]\ntheorem toGroup.of (h : ∀ r ∈ rels, FreeGroup.lift f r = 1) {x : α} : toGroup h (of x) = f x :=\n  FreeGroup.lift.of\n\n"}
{"name":"PresentedGroup.toGroup.unique","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nG : Type u_2\ninst✝ : Group G\nf : α → G\nrels : Set (FreeGroup α)\nh : ∀ (r : FreeGroup α), Membership.mem rels r → Eq ((FreeGroup.lift f) r) 1\ng : MonoidHom (PresentedGroup rels) G\nhg : ∀ (x : α), Eq (g (PresentedGroup.of x)) (f x)\nx : PresentedGroup rels\n⊢ Eq (g x) ((PresentedGroup.toGroup h) x)","decl":"theorem toGroup.unique (h : ∀ r ∈ rels, FreeGroup.lift f r = 1) (g : PresentedGroup rels →* G)\n    (hg : ∀ x : α, g (PresentedGroup.of x) = f x) : ∀ {x}, g x = toGroup h x := by\n  intro x\n  refine QuotientGroup.induction_on x ?_\n  exact fun _ ↦ FreeGroup.lift.unique (g.comp (QuotientGroup.mk' _)) hg\n\n"}
{"name":"PresentedGroup.ext_iff","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nG : Type u_2\ninst✝ : Group G\nrels : Set (FreeGroup α)\nφ ψ : MonoidHom (PresentedGroup rels) G\n⊢ Iff (Eq φ ψ) (∀ (x : α), Eq (φ (PresentedGroup.of x)) (ψ (PresentedGroup.of x)))","decl":"@[ext]\ntheorem ext {φ ψ : PresentedGroup rels →* G} (hx : ∀ (x : α), φ (.of x) = ψ (.of x)) : φ = ψ := by\n  unfold PresentedGroup\n  ext\n  apply hx\n\n"}
{"name":"PresentedGroup.ext","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nG : Type u_2\ninst✝ : Group G\nrels : Set (FreeGroup α)\nφ ψ : MonoidHom (PresentedGroup rels) G\nhx : ∀ (x : α), Eq (φ (PresentedGroup.of x)) (ψ (PresentedGroup.of x))\n⊢ Eq φ ψ","decl":"@[ext]\ntheorem ext {φ ψ : PresentedGroup rels →* G} (hx : ∀ (x : α), φ (.of x) = ψ (.of x)) : φ = ψ := by\n  unfold PresentedGroup\n  ext\n  apply hx\n\n"}
{"name":"PresentedGroup.equivPresentedGroup_apply_of","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nβ : Type u_3\nx : α\nrels : Set (FreeGroup α)\ne : Equiv α β\n⊢ Eq ((PresentedGroup.equivPresentedGroup rels e) (PresentedGroup.of x)) (PresentedGroup.of (e x))","decl":"theorem equivPresentedGroup_apply_of (x : α) (rels : Set (FreeGroup α)) (e : α ≃ β) :\n    equivPresentedGroup rels e (PresentedGroup.of x) =\n      PresentedGroup.of (rels := FreeGroup.freeGroupCongr e '' rels) (e x) := rfl\n\n"}
{"name":"PresentedGroup.equivPresentedGroup_symm_apply_of","module":"Mathlib.GroupTheory.PresentedGroup","initialProofState":"α : Type u_1\nβ : Type u_3\nx : β\nrels : Set (FreeGroup α)\ne : Equiv α β\n⊢ Eq ((PresentedGroup.equivPresentedGroup rels e).symm (PresentedGroup.of x)) (PresentedGroup.of (e.symm x))","decl":"theorem equivPresentedGroup_symm_apply_of (x : β) (rels : Set (FreeGroup α)) (e : α ≃ β) :\n    (equivPresentedGroup rels e).symm (PresentedGroup.of x) =\n      PresentedGroup.of (rels := rels) (e.symm x) := rfl\n\n"}
