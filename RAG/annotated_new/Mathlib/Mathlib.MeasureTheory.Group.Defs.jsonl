{"name":"MeasureTheory.VAddInvariantMeasure.measure_preimage_vadd","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"M : Type u_1\nα : Type u_2\ninst✝ : VAdd M α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nself : MeasureTheory.VAddInvariantMeasure M α μ\nc : M\ns : Set α\na✝ : MeasurableSet s\n⊢ Eq (μ (Set.preimage (fun x => HVAdd.hVAdd c x) s)) (μ s)","decl":"/-- A measure `μ : Measure α` is invariant under an additive action of `M` on `α` if for any\nmeasurable set `s : Set α` and `c : M`, the measure of its preimage under `fun x => c +ᵥ x` is equal\nto the measure of `s`. -/\nclass VAddInvariantMeasure (M α : Type*) [VAdd M α] {_ : MeasurableSpace α} (μ : Measure α) :\n  Prop where\n  measure_preimage_vadd : ∀ (c : M) ⦃s : Set α⦄, MeasurableSet s → μ ((fun x => c +ᵥ x) ⁻¹' s) = μ s\n\n"}
{"name":"MeasureTheory.smulInvariantMeasure_iff","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"M : Type u_1\nα : Type u_2\ninst✝ : SMul M α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.SMulInvariantMeasure M α μ) (∀ (c : M) ⦃s : Set α⦄, MeasurableSet s → Eq (μ (Set.preimage (fun x => HSMul.hSMul c x) s)) (μ s))","decl":"/-- A measure `μ : Measure α` is invariant under a multiplicative action of `M` on `α` if for any\nmeasurable set `s : Set α` and `c : M`, the measure of its preimage under `fun x => c • x` is equal\nto the measure of `s`. -/\n@[to_additive, mk_iff smulInvariantMeasure_iff]\nclass SMulInvariantMeasure (M α : Type*) [SMul M α] {_ : MeasurableSpace α} (μ : Measure α) :\n  Prop where\n  measure_preimage_smul : ∀ (c : M) ⦃s : Set α⦄, MeasurableSet s → μ ((fun x => c • x) ⁻¹' s) = μ s\n\n"}
{"name":"MeasureTheory.SMulInvariantMeasure.measure_preimage_smul","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"M : Type u_1\nα : Type u_2\ninst✝ : SMul M α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nself : MeasureTheory.SMulInvariantMeasure M α μ\nc : M\ns : Set α\na✝ : MeasurableSet s\n⊢ Eq (μ (Set.preimage (fun x => HSMul.hSMul c x) s)) (μ s)","decl":"/-- A measure `μ : Measure α` is invariant under a multiplicative action of `M` on `α` if for any\nmeasurable set `s : Set α` and `c : M`, the measure of its preimage under `fun x => c • x` is equal\nto the measure of `s`. -/\n@[to_additive, mk_iff smulInvariantMeasure_iff]\nclass SMulInvariantMeasure (M α : Type*) [SMul M α] {_ : MeasurableSpace α} (μ : Measure α) :\n  Prop where\n  measure_preimage_smul : ∀ (c : M) ⦃s : Set α⦄, MeasurableSet s → μ ((fun x => c • x) ⁻¹' s) = μ s\n\n"}
{"name":"MeasureTheory.vaddInvariantMeasure_iff","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"M : Type u_1\nα : Type u_2\ninst✝ : VAdd M α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.VAddInvariantMeasure M α μ) (∀ (c : M) ⦃s : Set α⦄, MeasurableSet s → Eq (μ (Set.preimage (fun x => HVAdd.hVAdd c x) s)) (μ s))","decl":"attribute [to_additive] smulInvariantMeasure_iff\n\n"}
{"name":"MeasureTheory.Measure.IsAddLeftInvariant.map_add_left_eq_self","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝¹ : MeasurableSpace G\ninst✝ : Add G\nμ : MeasureTheory.Measure G\nself : μ.IsAddLeftInvariant\ng : G\n⊢ Eq (MeasureTheory.Measure.map (fun x => HAdd.hAdd g x) μ) μ","decl":"/-- A measure `μ` on a measurable additive group is left invariant\n  if the measure of left translations of a set are equal to the measure of the set itself. -/\nclass IsAddLeftInvariant [Add G] (μ : Measure G) : Prop where\n  map_add_left_eq_self : ∀ g : G, map (g + ·) μ = μ\n\n"}
{"name":"MeasureTheory.Measure.IsMulLeftInvariant.map_mul_left_eq_self","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝¹ : MeasurableSpace G\ninst✝ : Mul G\nμ : MeasureTheory.Measure G\nself : μ.IsMulLeftInvariant\ng : G\n⊢ Eq (MeasureTheory.Measure.map (fun x => HMul.hMul g x) μ) μ","decl":"/-- A measure `μ` on a measurable group is left invariant\n  if the measure of left translations of a set are equal to the measure of the set itself. -/\n@[to_additive existing]\nclass IsMulLeftInvariant [Mul G] (μ : Measure G) : Prop where\n  map_mul_left_eq_self : ∀ g : G, map (g * ·) μ = μ\n\n"}
{"name":"MeasureTheory.Measure.IsAddRightInvariant.map_add_right_eq_self","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝¹ : MeasurableSpace G\ninst✝ : Add G\nμ : MeasureTheory.Measure G\nself : μ.IsAddRightInvariant\ng : G\n⊢ Eq (MeasureTheory.Measure.map (fun x => HAdd.hAdd x g) μ) μ","decl":"/-- A measure `μ` on a measurable additive group is right invariant\n  if the measure of right translations of a set are equal to the measure of the set itself. -/\nclass IsAddRightInvariant [Add G] (μ : Measure G) : Prop where\n  map_add_right_eq_self : ∀ g : G, map (· + g) μ = μ\n\n"}
{"name":"MeasureTheory.Measure.IsMulRightInvariant.map_mul_right_eq_self","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝¹ : MeasurableSpace G\ninst✝ : Mul G\nμ : MeasureTheory.Measure G\nself : μ.IsMulRightInvariant\ng : G\n⊢ Eq (MeasureTheory.Measure.map (fun x => HMul.hMul x g) μ) μ","decl":"/-- A measure `μ` on a measurable group is right invariant\n  if the measure of right translations of a set are equal to the measure of the set itself. -/\n@[to_additive existing]\nclass IsMulRightInvariant [Mul G] (μ : Measure G) : Prop where\n  map_mul_right_eq_self : ∀ g : G, map (· * g) μ = μ\n\n"}
{"name":"MeasureTheory.Measure.IsMulLeftInvariant.smulInvariantMeasure","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝² : MeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝¹ : Mul G\ninst✝ : μ.IsMulLeftInvariant\n⊢ MeasureTheory.SMulInvariantMeasure G G μ","decl":"@[to_additive]\ninstance IsMulLeftInvariant.smulInvariantMeasure  [Mul G] [IsMulLeftInvariant μ] :\n    SMulInvariantMeasure G G μ :=\n  ⟨fun _x _s hs => measure_preimage_of_map_eq_self (map_mul_left_eq_self _) hs.nullMeasurableSet⟩\n\n"}
{"name":"MeasureTheory.Measure.IsAddLeftInvariant.vaddInvariantMeasure","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝² : MeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝¹ : Add G\ninst✝ : μ.IsAddLeftInvariant\n⊢ MeasureTheory.VAddInvariantMeasure G G μ","decl":"@[to_additive]\ninstance IsMulLeftInvariant.smulInvariantMeasure  [Mul G] [IsMulLeftInvariant μ] :\n    SMulInvariantMeasure G G μ :=\n  ⟨fun _x _s hs => measure_preimage_of_map_eq_self (map_mul_left_eq_self _) hs.nullMeasurableSet⟩\n\n"}
{"name":"MeasureTheory.Measure.instSMulInvariantMeasureSubtypeMemSubmonoidOfIsMulLeftInvariant","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝² : MeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝¹ : Monoid G\ns : Submonoid G\ninst✝ : μ.IsMulLeftInvariant\n⊢ MeasureTheory.SMulInvariantMeasure (Subtype fun x => Membership.mem s x) G μ","decl":"@[to_additive]\ninstance [Monoid G] (s : Submonoid G) [IsMulLeftInvariant μ] :\n    SMulInvariantMeasure {x // x ∈ s} G μ :=\n  ⟨fun ⟨x, _⟩ _ h ↦ IsMulLeftInvariant.smulInvariantMeasure.1 x h⟩\n\n"}
{"name":"MeasureTheory.Measure.instVAddInvariantMeasureSubtypeMemAddSubmonoidOfIsAddLeftInvariant","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝² : MeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝¹ : AddMonoid G\ns : AddSubmonoid G\ninst✝ : μ.IsAddLeftInvariant\n⊢ MeasureTheory.VAddInvariantMeasure (Subtype fun x => Membership.mem s x) G μ","decl":"@[to_additive]\ninstance [Monoid G] (s : Submonoid G) [IsMulLeftInvariant μ] :\n    SMulInvariantMeasure {x // x ∈ s} G μ :=\n  ⟨fun ⟨x, _⟩ _ h ↦ IsMulLeftInvariant.smulInvariantMeasure.1 x h⟩\n\n"}
{"name":"MeasureTheory.Measure.IsAddRightInvariant.toVAddInvariantMeasure_op","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝² : MeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝¹ : Add G\ninst✝ : μ.IsAddRightInvariant\n⊢ MeasureTheory.VAddInvariantMeasure (AddOpposite G) G μ","decl":"@[to_additive]\ninstance IsMulRightInvariant.toSMulInvariantMeasure_op  [Mul G] [μ.IsMulRightInvariant] :\n    SMulInvariantMeasure Gᵐᵒᵖ G μ :=\n  ⟨fun _x _s hs => measure_preimage_of_map_eq_self (map_mul_right_eq_self _) hs.nullMeasurableSet⟩\n\n"}
{"name":"MeasureTheory.Measure.IsMulRightInvariant.toSMulInvariantMeasure_op","module":"Mathlib.MeasureTheory.Group.Defs","initialProofState":"G : Type u_1\ninst✝² : MeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝¹ : Mul G\ninst✝ : μ.IsMulRightInvariant\n⊢ MeasureTheory.SMulInvariantMeasure (MulOpposite G) G μ","decl":"@[to_additive]\ninstance IsMulRightInvariant.toSMulInvariantMeasure_op  [Mul G] [μ.IsMulRightInvariant] :\n    SMulInvariantMeasure Gᵐᵒᵖ G μ :=\n  ⟨fun _x _s hs => measure_preimage_of_map_eq_self (map_mul_right_eq_self _) hs.nullMeasurableSet⟩\n\n"}
