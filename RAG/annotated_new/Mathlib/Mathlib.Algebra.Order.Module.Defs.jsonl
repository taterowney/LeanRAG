{"name":"PosSMulMono.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero α\nself : PosSMulMono α β\na : α\nha : LE.le 0 a\nb₁ b₂ : β\nhb : LE.le b₁ b₂\n⊢ LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)","decl":"/-- Typeclass for monotonicity of scalar multiplication by nonnegative elements on the left,\nnamely `b₁ ≤ b₂ → a • b₁ ≤ a • b₂` if `0 ≤ a`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass PosSMulMono : Prop where\n  /-- Do not use this. Use `smul_le_smul_of_nonneg_left` instead. -/\n  protected elim ⦃a : α⦄ (ha : 0 ≤ a) ⦃b₁ b₂ : β⦄ (hb : b₁ ≤ b₂) : a • b₁ ≤ a • b₂\n\n"}
{"name":"PosSMulStrictMono.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero α\nself : PosSMulStrictMono α β\na : α\nha : LT.lt 0 a\nb₁ b₂ : β\nhb : LT.lt b₁ b₂\n⊢ LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)","decl":"/-- Typeclass for strict monotonicity of scalar multiplication by positive elements on the left,\nnamely `b₁ < b₂ → a • b₁ < a • b₂` if `0 < a`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass PosSMulStrictMono : Prop where\n  /-- Do not use this. Use `smul_lt_smul_of_pos_left` instead. -/\n  protected elim ⦃a : α⦄ (ha : 0 < a) ⦃b₁ b₂ : β⦄ (hb : b₁ < b₂) : a • b₁ < a • b₂\n\n"}
{"name":"PosSMulReflectLT.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero α\nself : PosSMulReflectLT α β\na : α\nha : LE.le 0 a\nb₁ b₂ : β\nhb : LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\n⊢ LT.lt b₁ b₂","decl":"/-- Typeclass for strict reverse monotonicity of scalar multiplication by nonnegative elements on\nthe left, namely `a • b₁ < a • b₂ → b₁ < b₂` if `0 ≤ a`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass PosSMulReflectLT : Prop where\n  /-- Do not use this. Use `lt_of_smul_lt_smul_left` instead. -/\n  protected elim ⦃a : α⦄ (ha : 0 ≤ a) ⦃b₁ b₂ : β⦄ (hb : a • b₁ < a • b₂) : b₁ < b₂\n\n"}
{"name":"PosSMulReflectLE.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero α\nself : PosSMulReflectLE α β\na : α\nha : LT.lt 0 a\nb₁ b₂ : β\nhb : LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\n⊢ LE.le b₁ b₂","decl":"/-- Typeclass for reverse monotonicity of scalar multiplication by positive elements on the left,\nnamely `a • b₁ ≤ a • b₂ → b₁ ≤ b₂` if `0 < a`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass PosSMulReflectLE : Prop where\n  /-- Do not use this. Use `le_of_smul_lt_smul_left` instead. -/\n  protected elim ⦃a : α⦄ (ha : 0 < a) ⦃b₁ b₂ : β⦄ (hb : a • b₁ ≤ a • b₂) : b₁ ≤ b₂\n\n"}
{"name":"SMulPosMono.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero β\nself : SMulPosMono α β\nb : β\nhb : LE.le 0 b\na₁ a₂ : α\nha : LE.le a₁ a₂\n⊢ LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)","decl":"/-- Typeclass for monotonicity of scalar multiplication by nonnegative elements on the left,\nnamely `a₁ ≤ a₂ → a₁ • b ≤ a₂ • b` if `0 ≤ b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass SMulPosMono : Prop where\n  /-- Do not use this. Use `smul_le_smul_of_nonneg_right` instead. -/\n  protected elim ⦃b : β⦄ (hb : 0 ≤ b) ⦃a₁ a₂ : α⦄ (ha : a₁ ≤ a₂) : a₁ • b ≤ a₂ • b\n\n"}
{"name":"SMulPosStrictMono.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero β\nself : SMulPosStrictMono α β\nb : β\nhb : LT.lt 0 b\na₁ a₂ : α\nha : LT.lt a₁ a₂\n⊢ LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)","decl":"/-- Typeclass for strict monotonicity of scalar multiplication by positive elements on the left,\nnamely `a₁ < a₂ → a₁ • b < a₂ • b` if `0 < b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass SMulPosStrictMono : Prop where\n  /-- Do not use this. Use `smul_lt_smul_of_pos_right` instead. -/\n  protected elim ⦃b : β⦄ (hb : 0 < b) ⦃a₁ a₂ : α⦄ (ha : a₁ < a₂) : a₁ • b < a₂ • b\n\n"}
{"name":"SMulPosReflectLT.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero β\nself : SMulPosReflectLT α β\nb : β\nhb✝ : LE.le 0 b\na₁ a₂ : α\nhb : LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\n⊢ LT.lt a₁ a₂","decl":"/-- Typeclass for strict reverse monotonicity of scalar multiplication by nonnegative elements on\nthe left, namely `a₁ • b < a₂ • b → a₁ < a₂` if `0 ≤ b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass SMulPosReflectLT : Prop where\n  /-- Do not use this. Use `lt_of_smul_lt_smul_right` instead. -/\n  protected elim ⦃b : β⦄ (hb : 0 ≤ b) ⦃a₁ a₂ : α⦄ (hb : a₁ • b < a₂ • b) : a₁ < a₂\n\n"}
{"name":"SMulPosReflectLE.elim","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : Zero β\nself : SMulPosReflectLE α β\nb : β\nhb✝ : LT.lt 0 b\na₁ a₂ : α\nhb : LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\n⊢ LE.le a₁ a₂","decl":"/-- Typeclass for reverse monotonicity of scalar multiplication by positive elements on the left,\nnamely `a₁ • b ≤ a₂ • b → a₁ ≤ a₂` if `0 < b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedSMul`. -/\nclass SMulPosReflectLE : Prop where\n  /-- Do not use this. Use `le_of_smul_lt_smul_right` instead. -/\n  protected elim ⦃b : β⦄ (hb : 0 < b) ⦃a₁ a₂ : α⦄ (hb : a₁ • b ≤ a₂ • b) : a₁ ≤ a₂\n\n"}
{"name":"PosMulMono.toPosSMulMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : PosMulMono α\n⊢ PosSMulMono α α","decl":"instance (priority := 100) PosMulMono.toPosSMulMono [PosMulMono α] : PosSMulMono α α where\n  elim _a ha _b₁ _b₂ hb := mul_le_mul_of_nonneg_left hb ha\n\n-- See note [lower instance priority]\n"}
{"name":"PosMulStrictMono.toPosSMulStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : PosMulStrictMono α\n⊢ PosSMulStrictMono α α","decl":"instance (priority := 100) PosMulStrictMono.toPosSMulStrictMono [PosMulStrictMono α] :\n    PosSMulStrictMono α α where\n  elim _a ha _b₁ _b₂ hb := mul_lt_mul_of_pos_left hb ha\n\n-- See note [lower instance priority]\n"}
{"name":"PosMulReflectLT.toPosSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : PosMulReflectLT α\n⊢ PosSMulReflectLT α α","decl":"instance (priority := 100) PosMulReflectLT.toPosSMulReflectLT [PosMulReflectLT α] :\n    PosSMulReflectLT α α where\n  elim _a ha _b₁ _b₂ h := lt_of_mul_lt_mul_left h ha\n\n-- See note [lower instance priority]\n"}
{"name":"PosMulReflectLE.toPosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : PosMulReflectLE α\n⊢ PosSMulReflectLE α α","decl":"instance (priority := 100) PosMulReflectLE.toPosSMulReflectLE [PosMulReflectLE α] :\n    PosSMulReflectLE α α where\n  elim _a ha _b₁ _b₂ h := le_of_mul_le_mul_left h ha\n\n-- See note [lower instance priority]\n"}
{"name":"MulPosMono.toSMulPosMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulPosMono α\n⊢ SMulPosMono α α","decl":"instance (priority := 100) MulPosMono.toSMulPosMono [MulPosMono α] : SMulPosMono α α where\n  elim _b hb _a₁ _a₂ ha := mul_le_mul_of_nonneg_right ha hb\n\n-- See note [lower instance priority]\n"}
{"name":"MulPosStrictMono.toSMulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulPosStrictMono α\n⊢ SMulPosStrictMono α α","decl":"instance (priority := 100) MulPosStrictMono.toSMulPosStrictMono [MulPosStrictMono α] :\n    SMulPosStrictMono α α where\n  elim _b hb _a₁ _a₂ ha := mul_lt_mul_of_pos_right ha hb\n\n-- See note [lower instance priority]\n"}
{"name":"MulPosReflectLT.toSMulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulPosReflectLT α\n⊢ SMulPosReflectLT α α","decl":"instance (priority := 100) MulPosReflectLT.toSMulPosReflectLT [MulPosReflectLT α] :\n    SMulPosReflectLT α α where\n  elim _b hb _a₁ _a₂ h := lt_of_mul_lt_mul_right h hb\n\n-- See note [lower instance priority]\n"}
{"name":"MulPosReflectLE.toSMulPosReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝³ : Zero α\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulPosReflectLE α\n⊢ SMulPosReflectLE α α","decl":"instance (priority := 100) MulPosReflectLE.toSMulPosReflectLE [MulPosReflectLE α] :\n    SMulPosReflectLE α α where\n  elim _b hb _a₁ _a₂ h := le_of_mul_le_mul_right h hb\n\n"}
{"name":"monotone_smul_left_of_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\nha : LE.le 0 a\n⊢ Monotone fun x => HSMul.hSMul a x","decl":"lemma monotone_smul_left_of_nonneg [PosSMulMono α β] (ha : 0 ≤ a) : Monotone ((a • ·) : β → β) :=\n  PosSMulMono.elim ha\n\n"}
{"name":"strictMono_smul_left_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulStrictMono α β\nha : LT.lt 0 a\n⊢ StrictMono fun x => HSMul.hSMul a x","decl":"lemma strictMono_smul_left_of_pos [PosSMulStrictMono α β] (ha : 0 < a) :\n    StrictMono ((a • ·) : β → β) := PosSMulStrictMono.elim ha\n\n"}
{"name":"smul_le_smul_of_nonneg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\nhb : LE.le b₁ b₂\nha : LE.le 0 a\n⊢ LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)","decl":"@[gcongr] lemma smul_le_smul_of_nonneg_left [PosSMulMono α β] (hb : b₁ ≤ b₂) (ha : 0 ≤ a) :\n    a • b₁ ≤ a • b₂ := monotone_smul_left_of_nonneg ha hb\n\n"}
{"name":"smul_lt_smul_of_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulStrictMono α β\nhb : LT.lt b₁ b₂\nha : LT.lt 0 a\n⊢ LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)","decl":"@[gcongr] lemma smul_lt_smul_of_pos_left [PosSMulStrictMono α β] (hb : b₁ < b₂) (ha : 0 < a) :\n    a • b₁ < a • b₂ := strictMono_smul_left_of_pos ha hb\n\n"}
{"name":"lt_of_smul_lt_smul_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLT α β\nh : LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\nha : LE.le 0 a\n⊢ LT.lt b₁ b₂","decl":"lemma lt_of_smul_lt_smul_left [PosSMulReflectLT α β] (h : a • b₁ < a • b₂) (ha : 0 ≤ a) : b₁ < b₂ :=\n  PosSMulReflectLT.elim ha h\n\n"}
{"name":"le_of_smul_le_smul_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLE α β\nh : LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\nha : LT.lt 0 a\n⊢ LE.le b₁ b₂","decl":"lemma le_of_smul_le_smul_left [PosSMulReflectLE α β] (h : a • b₁ ≤ a • b₂) (ha : 0 < a) : b₁ ≤ b₂ :=\n  PosSMulReflectLE.elim ha h\n\n"}
{"name":"lt_of_smul_lt_smul_of_nonneg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLT α β\nh : LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\nha : LE.le 0 a\n⊢ LT.lt b₁ b₂","decl":"alias lt_of_smul_lt_smul_of_nonneg_left := lt_of_smul_lt_smul_left\n"}
{"name":"le_of_smul_le_smul_of_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLE α β\nh : LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\nha : LT.lt 0 a\n⊢ LE.le b₁ b₂","decl":"alias le_of_smul_le_smul_of_pos_left := le_of_smul_le_smul_left\n\n"}
{"name":"smul_le_smul_iff_of_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁵ : SMul α β\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : Zero α\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\nha : LT.lt 0 a\n⊢ Iff (LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)) (LE.le b₁ b₂)","decl":"@[simp]\nlemma smul_le_smul_iff_of_pos_left [PosSMulMono α β] [PosSMulReflectLE α β] (ha : 0 < a) :\n    a • b₁ ≤ a • b₂ ↔ b₁ ≤ b₂ :=\n  ⟨fun h ↦ le_of_smul_le_smul_left h ha, fun h ↦ smul_le_smul_of_nonneg_left h ha.le⟩\n\n"}
{"name":"smul_lt_smul_iff_of_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁵ : SMul α β\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : Zero α\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt 0 a\n⊢ Iff (LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)) (LT.lt b₁ b₂)","decl":"@[simp]\nlemma smul_lt_smul_iff_of_pos_left [PosSMulStrictMono α β] [PosSMulReflectLT α β] (ha : 0 < a) :\n    a • b₁ < a • b₂ ↔ b₁ < b₂ :=\n  ⟨fun h ↦ lt_of_smul_lt_smul_left h ha.le, fun hb ↦ smul_lt_smul_of_pos_left hb ha⟩\n\n"}
{"name":"monotone_smul_right_of_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosMono α β\nhb : LE.le 0 b\n⊢ Monotone fun x => HSMul.hSMul x b","decl":"lemma monotone_smul_right_of_nonneg [SMulPosMono α β] (hb : 0 ≤ b) : Monotone ((· • b) : α → β) :=\n  SMulPosMono.elim hb\n\n"}
{"name":"strictMono_smul_right_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosStrictMono α β\nhb : LT.lt 0 b\n⊢ StrictMono fun x => HSMul.hSMul x b","decl":"lemma strictMono_smul_right_of_pos [SMulPosStrictMono α β] (hb : 0 < b) :\n    StrictMono ((· • b) : α → β) := SMulPosStrictMono.elim hb\n\n"}
{"name":"smul_le_smul_of_nonneg_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosMono α β\nha : LE.le a₁ a₂\nhb : LE.le 0 b\n⊢ LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)","decl":"@[gcongr] lemma smul_le_smul_of_nonneg_right [SMulPosMono α β] (ha : a₁ ≤ a₂) (hb : 0 ≤ b) :\n    a₁ • b ≤ a₂ • b := monotone_smul_right_of_nonneg hb ha\n\n"}
{"name":"smul_lt_smul_of_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt a₁ a₂\nhb : LT.lt 0 b\n⊢ LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)","decl":"@[gcongr] lemma smul_lt_smul_of_pos_right [SMulPosStrictMono α β] (ha : a₁ < a₂) (hb : 0 < b) :\n    a₁ • b < a₂ • b := strictMono_smul_right_of_pos hb ha\n\n"}
{"name":"lt_of_smul_lt_smul_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosReflectLT α β\nh : LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\nhb : LE.le 0 b\n⊢ LT.lt a₁ a₂","decl":"lemma lt_of_smul_lt_smul_right [SMulPosReflectLT α β] (h : a₁ • b < a₂ • b) (hb : 0 ≤ b) :\n    a₁ < a₂ := SMulPosReflectLT.elim hb h\n\n"}
{"name":"le_of_smul_le_smul_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosReflectLE α β\nh : LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\nhb : LT.lt 0 b\n⊢ LE.le a₁ a₂","decl":"lemma le_of_smul_le_smul_right [SMulPosReflectLE α β] (h : a₁ • b ≤ a₂ • b) (hb : 0 < b) :\n    a₁ ≤ a₂ := SMulPosReflectLE.elim hb h\n\n"}
{"name":"lt_of_smul_lt_smul_of_nonneg_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosReflectLT α β\nh : LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\nhb : LE.le 0 b\n⊢ LT.lt a₁ a₂","decl":"alias lt_of_smul_lt_smul_of_nonneg_right := lt_of_smul_lt_smul_right\n"}
{"name":"le_of_smul_le_smul_of_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosReflectLE α β\nh : LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\nhb : LT.lt 0 b\n⊢ LE.le a₁ a₂","decl":"alias le_of_smul_le_smul_of_pos_right := le_of_smul_le_smul_right\n\n"}
{"name":"smul_le_smul_iff_of_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁵ : SMul α β\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : Zero β\ninst✝¹ : SMulPosMono α β\ninst✝ : SMulPosReflectLE α β\nhb : LT.lt 0 b\n⊢ Iff (LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)) (LE.le a₁ a₂)","decl":"@[simp]\nlemma smul_le_smul_iff_of_pos_right [SMulPosMono α β] [SMulPosReflectLE α β] (hb : 0 < b) :\n    a₁ • b ≤ a₂ • b ↔ a₁ ≤ a₂ :=\n  ⟨fun h ↦ le_of_smul_le_smul_right h hb, fun ha ↦ smul_le_smul_of_nonneg_right ha hb.le⟩\n\n"}
{"name":"smul_lt_smul_iff_of_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb : β\ninst✝⁵ : SMul α β\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : Zero β\ninst✝¹ : SMulPosStrictMono α β\ninst✝ : SMulPosReflectLT α β\nhb : LT.lt 0 b\n⊢ Iff (LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)) (LT.lt a₁ a₂)","decl":"@[simp]\nlemma smul_lt_smul_iff_of_pos_right [SMulPosStrictMono α β] [SMulPosReflectLT α β] (hb : 0 < b) :\n    a₁ • b < a₂ • b ↔ a₁ < a₂ :=\n  ⟨fun h ↦ lt_of_smul_lt_smul_right h hb.le, fun ha ↦ smul_lt_smul_of_pos_right ha hb⟩\n\n"}
{"name":"smul_lt_smul_of_le_of_lt","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : SMulPosMono α β\nha : LE.le a₁ a₂\nhb : LT.lt b₁ b₂\nh₁ : LT.lt 0 a₁\nh₂ : LE.le 0 b₂\n⊢ LT.lt (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_lt_smul_of_le_of_lt [PosSMulStrictMono α β] [SMulPosMono α β] (ha : a₁ ≤ a₂)\n    (hb : b₁ < b₂) (h₁ : 0 < a₁) (h₂ : 0 ≤ b₂) : a₁ • b₁ < a₂ • b₂ :=\n  (smul_lt_smul_of_pos_left hb h₁).trans_le (smul_le_smul_of_nonneg_right ha h₂)\n\n"}
{"name":"smul_lt_smul_of_le_of_lt'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : SMulPosMono α β\nha : LE.le a₁ a₂\nhb : LT.lt b₁ b₂\nh₂ : LT.lt 0 a₂\nh₁ : LE.le 0 b₁\n⊢ LT.lt (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_lt_smul_of_le_of_lt' [PosSMulStrictMono α β] [SMulPosMono α β] (ha : a₁ ≤ a₂)\n    (hb : b₁ < b₂) (h₂ : 0 < a₂) (h₁ : 0 ≤ b₁) : a₁ • b₁ < a₂ • b₂ :=\n  (smul_le_smul_of_nonneg_right ha h₁).trans_lt (smul_lt_smul_of_pos_left hb h₂)\n\n"}
{"name":"smul_lt_smul_of_lt_of_le","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt a₁ a₂\nhb : LE.le b₁ b₂\nh₁ : LE.le 0 a₁\nh₂ : LT.lt 0 b₂\n⊢ LT.lt (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_lt_smul_of_lt_of_le [PosSMulMono α β] [SMulPosStrictMono α β] (ha : a₁ < a₂)\n    (hb : b₁ ≤ b₂) (h₁ : 0 ≤ a₁) (h₂ : 0 < b₂) : a₁ • b₁ < a₂ • b₂ :=\n  (smul_le_smul_of_nonneg_left hb h₁).trans_lt (smul_lt_smul_of_pos_right ha h₂)\n\n"}
{"name":"smul_lt_smul_of_lt_of_le'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt a₁ a₂\nhb : LE.le b₁ b₂\nh₂ : LE.le 0 a₂\nh₁ : LT.lt 0 b₁\n⊢ LT.lt (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_lt_smul_of_lt_of_le' [PosSMulMono α β] [SMulPosStrictMono α β] (ha : a₁ < a₂)\n    (hb : b₁ ≤ b₂) (h₂ : 0 ≤ a₂) (h₁ : 0 < b₁) : a₁ • b₁ < a₂ • b₂ :=\n  (smul_lt_smul_of_pos_right ha h₁).trans_le (smul_le_smul_of_nonneg_left hb h₂)\n\n"}
{"name":"smul_lt_smul","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt a₁ a₂\nhb : LT.lt b₁ b₂\nh₁ : LT.lt 0 a₁\nh₂ : LT.lt 0 b₂\n⊢ LT.lt (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_lt_smul [PosSMulStrictMono α β] [SMulPosStrictMono α β] (ha : a₁ < a₂) (hb : b₁ < b₂)\n    (h₁ : 0 < a₁) (h₂ : 0 < b₂) : a₁ • b₁ < a₂ • b₂ :=\n  (smul_lt_smul_of_pos_left hb h₁).trans (smul_lt_smul_of_pos_right ha h₂)\n\n"}
{"name":"smul_lt_smul'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt a₁ a₂\nhb : LT.lt b₁ b₂\nh₂ : LT.lt 0 a₂\nh₁ : LT.lt 0 b₁\n⊢ LT.lt (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_lt_smul' [PosSMulStrictMono α β] [SMulPosStrictMono α β] (ha : a₁ < a₂) (hb : b₁ < b₂)\n    (h₂ : 0 < a₂) (h₁ : 0 < b₁) : a₁ • b₁ < a₂ • b₂ :=\n  (smul_lt_smul_of_pos_right ha h₁).trans (smul_lt_smul_of_pos_left hb h₂)\n\n"}
{"name":"smul_le_smul","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosMono α β\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\nh₁ : LE.le 0 a₁\nh₂ : LE.le 0 b₂\n⊢ LE.le (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_le_smul [PosSMulMono α β] [SMulPosMono α β] (ha : a₁ ≤ a₂) (hb : b₁ ≤ b₂)\n    (h₁ : 0 ≤ a₁) (h₂ : 0 ≤ b₂) : a₁ • b₁ ≤ a₂ • b₂ :=\n  (smul_le_smul_of_nonneg_left hb h₁).trans (smul_le_smul_of_nonneg_right ha h₂)\n\n"}
{"name":"smul_le_smul'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : SMul α β\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosMono α β\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\nh₂ : LE.le 0 a₂\nh₁ : LE.le 0 b₁\n⊢ LE.le (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)","decl":"lemma smul_le_smul' [PosSMulMono α β] [SMulPosMono α β] (ha : a₁ ≤ a₂) (hb : b₁ ≤ b₂) (h₂ : 0 ≤ a₂)\n    (h₁ : 0 ≤ b₁) : a₁ • b₁ ≤ a₂ • b₂ :=\n  (smul_le_smul_of_nonneg_right ha h₁).trans (smul_le_smul_of_nonneg_left hb h₂)\n\n"}
{"name":"PosSMulStrictMono.toPosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero α\ninst✝ : PosSMulStrictMono α β\n⊢ PosSMulReflectLE α β","decl":"instance (priority := 100) PosSMulStrictMono.toPosSMulReflectLE [PosSMulStrictMono α β] :\n    PosSMulReflectLE α β where\n  elim _a ha _b₁ _b₂ := (strictMono_smul_left_of_pos ha).le_iff_le.1\n\n"}
{"name":"PosSMulReflectLE.toPosSMulStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLE α β\n⊢ PosSMulStrictMono α β","decl":"lemma PosSMulReflectLE.toPosSMulStrictMono [PosSMulReflectLE α β] : PosSMulStrictMono α β where\n  elim _a ha _b₁ _b₂ hb := not_le.1 fun h ↦ hb.not_le <| le_of_smul_le_smul_left h ha\n\n"}
{"name":"posSMulStrictMono_iff_PosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : LinearOrder β\ninst✝ : Zero α\n⊢ Iff (PosSMulStrictMono α β) (PosSMulReflectLE α β)","decl":"lemma posSMulStrictMono_iff_PosSMulReflectLE : PosSMulStrictMono α β ↔ PosSMulReflectLE α β :=\n  ⟨fun _ ↦ inferInstance, fun _ ↦ PosSMulReflectLE.toPosSMulStrictMono⟩\n\n"}
{"name":"PosSMulMono.toPosSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\n⊢ PosSMulReflectLT α β","decl":"instance PosSMulMono.toPosSMulReflectLT [PosSMulMono α β] : PosSMulReflectLT α β where\n  elim _a ha _b₁ _b₂ := (monotone_smul_left_of_nonneg ha).reflect_lt\n\n"}
{"name":"PosSMulReflectLT.toPosSMulMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLT α β\n⊢ PosSMulMono α β","decl":"lemma PosSMulReflectLT.toPosSMulMono [PosSMulReflectLT α β] : PosSMulMono α β where\n  elim _a ha _b₁ _b₂ hb := not_lt.1 fun h ↦ hb.not_lt <| lt_of_smul_lt_smul_left h ha\n\n"}
{"name":"posSMulMono_iff_posSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : Preorder α\ninst✝¹ : LinearOrder β\ninst✝ : Zero α\n⊢ Iff (PosSMulMono α β) (PosSMulReflectLT α β)","decl":"lemma posSMulMono_iff_posSMulReflectLT : PosSMulMono α β ↔ PosSMulReflectLT α β :=\n  ⟨fun _ ↦ PosSMulMono.toPosSMulReflectLT, fun _ ↦ PosSMulReflectLT.toPosSMulMono⟩\n\n"}
{"name":"smul_max_of_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\nha : LE.le 0 a\nb₁ b₂ : β\n⊢ Eq (HSMul.hSMul a (Max.max b₁ b₂)) (Max.max (HSMul.hSMul a b₁) (HSMul.hSMul a b₂))","decl":"lemma smul_max_of_nonneg [PosSMulMono α β] (ha : 0 ≤ a) (b₁ b₂ : β) :\n    a • max b₁ b₂ = max (a • b₁) (a • b₂) := (monotone_smul_left_of_nonneg ha).map_max\n\n"}
{"name":"smul_min_of_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\nha : LE.le 0 a\nb₁ b₂ : β\n⊢ Eq (HSMul.hSMul a (Min.min b₁ b₂)) (Min.min (HSMul.hSMul a b₁) (HSMul.hSMul a b₂))","decl":"lemma smul_min_of_nonneg [PosSMulMono α β] (ha : 0 ≤ a) (b₁ b₂ : β) :\n    a • min b₁ b₂ = min (a • b₁) (a • b₂) := (monotone_smul_left_of_nonneg ha).map_min\n\n"}
{"name":"SMulPosReflectLE.toSMulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero β\ninst✝ : SMulPosReflectLE α β\n⊢ SMulPosStrictMono α β","decl":"lemma SMulPosReflectLE.toSMulPosStrictMono [SMulPosReflectLE α β] : SMulPosStrictMono α β where\n  elim _b hb _a₁ _a₂ ha := not_le.1 fun h ↦ ha.not_le <| le_of_smul_le_smul_of_pos_right h hb\n\n"}
{"name":"SMulPosReflectLT.toSMulPosMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : Preorder α\ninst✝² : LinearOrder β\ninst✝¹ : Zero β\ninst✝ : SMulPosReflectLT α β\n⊢ SMulPosMono α β","decl":"lemma SMulPosReflectLT.toSMulPosMono [SMulPosReflectLT α β] : SMulPosMono α β where\n  elim _b hb _a₁ _a₂ ha := not_lt.1 fun h ↦ ha.not_lt <| lt_of_smul_lt_smul_right h hb\n\n"}
{"name":"SMulPosStrictMono.toSMulPosReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : LinearOrder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosStrictMono α β\n⊢ SMulPosReflectLE α β","decl":"instance (priority := 100) SMulPosStrictMono.toSMulPosReflectLE [SMulPosStrictMono α β] :\n    SMulPosReflectLE α β where\n  elim _b hb _a₁ _a₂ h := not_lt.1 fun ha ↦ h.not_lt <| smul_lt_smul_of_pos_right ha hb\n\n"}
{"name":"SMulPosMono.toSMulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : SMul α β\ninst✝³ : LinearOrder α\ninst✝² : Preorder β\ninst✝¹ : Zero β\ninst✝ : SMulPosMono α β\n⊢ SMulPosReflectLT α β","decl":"lemma SMulPosMono.toSMulPosReflectLT [SMulPosMono α β] : SMulPosReflectLT α β where\n  elim _b hb _a₁ _a₂ h := not_le.1 fun ha ↦ h.not_le <| smul_le_smul_of_nonneg_right ha hb\n\n"}
{"name":"smulPosStrictMono_iff_SMulPosReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : LinearOrder α\ninst✝¹ : LinearOrder β\ninst✝ : Zero β\n⊢ Iff (SMulPosStrictMono α β) (SMulPosReflectLE α β)","decl":"lemma smulPosStrictMono_iff_SMulPosReflectLE : SMulPosStrictMono α β ↔ SMulPosReflectLE α β :=\n  ⟨fun _ ↦ SMulPosStrictMono.toSMulPosReflectLE, fun _ ↦ SMulPosReflectLE.toSMulPosStrictMono⟩\n\n"}
{"name":"smulPosMono_iff_smulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : LinearOrder α\ninst✝¹ : LinearOrder β\ninst✝ : Zero β\n⊢ Iff (SMulPosMono α β) (SMulPosReflectLT α β)","decl":"lemma smulPosMono_iff_smulPosReflectLT : SMulPosMono α β ↔ SMulPosReflectLT α β :=\n  ⟨fun _ ↦ SMulPosMono.toSMulPosReflectLT, fun _ ↦ SMulPosReflectLT.toSMulPosMono⟩\n\n"}
{"name":"smul_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulZeroClass α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : PosSMulStrictMono α β\nha : LT.lt 0 a\nhb : LT.lt 0 b\n⊢ LT.lt 0 (HSMul.hSMul a b)","decl":"lemma smul_pos [PosSMulStrictMono α β] (ha : 0 < a) (hb : 0 < b) : 0 < a • b := by\n  simpa only [smul_zero] using smul_lt_smul_of_pos_left hb ha\n\n"}
{"name":"smul_neg_of_pos_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulZeroClass α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : PosSMulStrictMono α β\nha : LT.lt 0 a\nhb : LT.lt b 0\n⊢ LT.lt (HSMul.hSMul a b) 0","decl":"lemma smul_neg_of_pos_of_neg [PosSMulStrictMono α β] (ha : 0 < a) (hb : b < 0) : a • b < 0 := by\n  simpa only [smul_zero] using smul_lt_smul_of_pos_left hb ha\n\n"}
{"name":"smul_pos_iff_of_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulZeroClass α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt 0 a\n⊢ Iff (LT.lt 0 (HSMul.hSMul a b)) (LT.lt 0 b)","decl":"@[simp]\nlemma smul_pos_iff_of_pos_left [PosSMulStrictMono α β] [PosSMulReflectLT α β] (ha : 0 < a) :\n    0 < a • b ↔ 0 < b := by\n  simpa only [smul_zero] using smul_lt_smul_iff_of_pos_left ha (b₁ := 0) (b₂ := b)\n\n"}
{"name":"smul_neg_iff_of_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulZeroClass α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt 0 a\n⊢ Iff (LT.lt (HSMul.hSMul a b) 0) (LT.lt b 0)","decl":"lemma smul_neg_iff_of_pos_left [PosSMulStrictMono α β] [PosSMulReflectLT α β] (ha : 0 < a) :\n    a • b < 0 ↔ b < 0 := by\n  simpa only [smul_zero]  using smul_lt_smul_iff_of_pos_left ha (b₂ := (0 : β))\n\n"}
{"name":"smul_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulZeroClass α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : PosSMulMono α β\nha : LE.le 0 a\nhb : LE.le 0 b₁\n⊢ LE.le 0 (HSMul.hSMul a b₁)","decl":"lemma smul_nonneg [PosSMulMono α β] (ha : 0 ≤ a) (hb : 0 ≤ b₁) : 0 ≤ a • b₁ := by\n  simpa only [smul_zero] using smul_le_smul_of_nonneg_left hb ha\n\n"}
{"name":"smul_nonpos_of_nonneg_of_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulZeroClass α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : PosSMulMono α β\nha : LE.le 0 a\nhb : LE.le b 0\n⊢ LE.le (HSMul.hSMul a b) 0","decl":"lemma smul_nonpos_of_nonneg_of_nonpos [PosSMulMono α β] (ha : 0 ≤ a) (hb : b ≤ 0) : a • b ≤ 0 := by\n  simpa only [smul_zero] using smul_le_smul_of_nonneg_left hb ha\n\n"}
{"name":"pos_of_smul_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulZeroClass α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : PosSMulReflectLT α β\nh : LT.lt 0 (HSMul.hSMul a b)\nha : LE.le 0 a\n⊢ LT.lt 0 b","decl":"lemma pos_of_smul_pos_left [PosSMulReflectLT α β] (h : 0 < a • b) (ha : 0 ≤ a) : 0 < b :=\n  lt_of_smul_lt_smul_left (by rwa [smul_zero]) ha\n\n"}
{"name":"neg_of_smul_neg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulZeroClass α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : PosSMulReflectLT α β\nh : LT.lt (HSMul.hSMul a b) 0\nha : LE.le 0 a\n⊢ LT.lt b 0","decl":"lemma neg_of_smul_neg_left [PosSMulReflectLT α β] (h : a • b < 0) (ha : 0 ≤ a) : b < 0 :=\n  lt_of_smul_lt_smul_left (by rwa [smul_zero]) ha\n\n"}
{"name":"smul_pos'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt 0 a\nhb : LT.lt 0 b\n⊢ LT.lt 0 (HSMul.hSMul a b)","decl":"lemma smul_pos' [SMulPosStrictMono α β] (ha : 0 < a) (hb : 0 < b) : 0 < a • b := by\n  simpa only [zero_smul] using smul_lt_smul_of_pos_right ha hb\n\n"}
{"name":"smul_neg_of_neg_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosStrictMono α β\nha : LT.lt a 0\nhb : LT.lt 0 b\n⊢ LT.lt (HSMul.hSMul a b) 0","decl":"lemma smul_neg_of_neg_of_pos [SMulPosStrictMono α β] (ha : a < 0) (hb : 0 < b) : a • b < 0 := by\n  simpa only [zero_smul] using smul_lt_smul_of_pos_right ha hb\n\n"}
{"name":"smul_pos_iff_of_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : SMulPosStrictMono α β\ninst✝ : SMulPosReflectLT α β\nhb : LT.lt 0 b\n⊢ Iff (LT.lt 0 (HSMul.hSMul a b)) (LT.lt 0 a)","decl":"@[simp]\nlemma smul_pos_iff_of_pos_right [SMulPosStrictMono α β] [SMulPosReflectLT α β] (hb : 0 < b) :\n    0 < a • b ↔ 0 < a := by\n  simpa only [zero_smul] using smul_lt_smul_iff_of_pos_right hb (a₁ := 0) (a₂ := a)\n\n"}
{"name":"smul_nonneg'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosMono α β\nha : LE.le 0 a\nhb : LE.le 0 b₁\n⊢ LE.le 0 (HSMul.hSMul a b₁)","decl":"lemma smul_nonneg' [SMulPosMono α β] (ha : 0 ≤ a) (hb : 0 ≤ b₁) : 0 ≤ a • b₁ := by\n  simpa only [zero_smul] using smul_le_smul_of_nonneg_right ha hb\n\n"}
{"name":"smul_nonpos_of_nonpos_of_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosMono α β\nha : LE.le a 0\nhb : LE.le 0 b\n⊢ LE.le (HSMul.hSMul a b) 0","decl":"lemma smul_nonpos_of_nonpos_of_nonneg [SMulPosMono α β] (ha : a ≤ 0) (hb : 0 ≤ b) : a • b ≤ 0 := by\n  simpa only [zero_smul] using smul_le_smul_of_nonneg_right ha hb\n\n"}
{"name":"pos_of_smul_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosReflectLT α β\nh : LT.lt 0 (HSMul.hSMul a b)\nhb : LE.le 0 b\n⊢ LT.lt 0 a","decl":"lemma pos_of_smul_pos_right [SMulPosReflectLT α β] (h : 0 < a • b) (hb : 0 ≤ b) : 0 < a :=\n  lt_of_smul_lt_smul_right (by rwa [zero_smul]) hb\n\n"}
{"name":"neg_of_smul_neg_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosReflectLT α β\nh : LT.lt (HSMul.hSMul a b) 0\nhb : LE.le 0 b\n⊢ LT.lt a 0","decl":"lemma neg_of_smul_neg_right [SMulPosReflectLT α β] (h : a • b < 0) (hb : 0 ≤ b) : a < 0 :=\n  lt_of_smul_lt_smul_right (by rwa [zero_smul]) hb\n\n"}
{"name":"pos_iff_pos_of_smul_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : PosSMulReflectLT α β\ninst✝ : SMulPosReflectLT α β\nhab : LT.lt 0 (HSMul.hSMul a b)\n⊢ Iff (LT.lt 0 a) (LT.lt 0 b)","decl":"lemma pos_iff_pos_of_smul_pos [PosSMulReflectLT α β] [SMulPosReflectLT α β] (hab : 0 < a • b) :\n    0 < a ↔ 0 < b :=\n  ⟨pos_of_smul_pos_left hab ∘ le_of_lt, pos_of_smul_pos_right hab ∘ le_of_lt⟩\n\n"}
{"name":"PosSMulMono.of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Zero α\ninst✝³ : Zero β\ninst✝² : SMulWithZero α β\ninst✝¹ : PartialOrder α\ninst✝ : Preorder β\nh₀ : ∀ (a : α), LT.lt 0 a → ∀ (b₁ b₂ : β), LE.le b₁ b₂ → LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\n⊢ PosSMulMono α β","decl":"/-- A constructor for `PosSMulMono` requiring you to prove `b₁ ≤ b₂ → a • b₁ ≤ a • b₂` only when\n`0 < a`-/\nlemma PosSMulMono.of_pos (h₀ : ∀ a : α, 0 < a → ∀ b₁ b₂ : β, b₁ ≤ b₂ → a • b₁ ≤ a • b₂) :\n    PosSMulMono α β where\n  elim a ha b₁ b₂ h := by\n    obtain ha | ha := ha.eq_or_lt\n    · simp [← ha]\n    · exact h₀ _ ha _ _ h\n\n"}
{"name":"PosSMulReflectLT.of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Zero α\ninst✝³ : Zero β\ninst✝² : SMulWithZero α β\ninst✝¹ : PartialOrder α\ninst✝ : Preorder β\nh₀ : ∀ (a : α), LT.lt 0 a → ∀ (b₁ b₂ : β), LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂) → LT.lt b₁ b₂\n⊢ PosSMulReflectLT α β","decl":"/-- A constructor for `PosSMulReflectLT` requiring you to prove `a • b₁ < a • b₂ → b₁ < b₂` only\nwhen `0 < a`-/\nlemma PosSMulReflectLT.of_pos (h₀ : ∀ a : α, 0 < a → ∀ b₁ b₂ : β, a • b₁ < a • b₂ → b₁ < b₂) :\n    PosSMulReflectLT α β where\n  elim a ha b₁ b₂ h := by\n    obtain ha | ha := ha.eq_or_lt\n    · simp [← ha] at h\n    · exact h₀ _ ha _ _ h\n\n"}
{"name":"SMulPosMono.of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Zero α\ninst✝³ : Zero β\ninst✝² : SMulWithZero α β\ninst✝¹ : Preorder α\ninst✝ : PartialOrder β\nh₀ : ∀ (b : β), LT.lt 0 b → ∀ (a₁ a₂ : α), LE.le a₁ a₂ → LE.le (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b)\n⊢ SMulPosMono α β","decl":"/-- A constructor for `SMulPosMono` requiring you to prove `a₁ ≤ a₂ → a₁ • b ≤ a₂ • b` only when\n`0 < b`-/\nlemma SMulPosMono.of_pos (h₀ : ∀ b : β, 0 < b → ∀ a₁ a₂ : α, a₁ ≤ a₂ → a₁ • b ≤ a₂ • b) :\n    SMulPosMono α β where\n  elim b hb a₁ a₂ h := by\n    obtain hb | hb := hb.eq_or_lt\n    · simp [← hb]\n    · exact h₀ _ hb _ _ h\n\n"}
{"name":"SMulPosReflectLT.of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Zero α\ninst✝³ : Zero β\ninst✝² : SMulWithZero α β\ninst✝¹ : Preorder α\ninst✝ : PartialOrder β\nh₀ : ∀ (b : β), LT.lt 0 b → ∀ (a₁ a₂ : α), LT.lt (HSMul.hSMul a₁ b) (HSMul.hSMul a₂ b) → LT.lt a₁ a₂\n⊢ SMulPosReflectLT α β","decl":"/-- A constructor for `SMulPosReflectLT` requiring you to prove `a₁ • b < a₂ • b → a₁ < a₂` only\nwhen `0 < b`-/\nlemma SMulPosReflectLT.of_pos (h₀ : ∀ b : β, 0 < b → ∀ a₁ a₂ : α, a₁ • b < a₂ • b → a₁ < a₂) :\n    SMulPosReflectLT α β where\n  elim b hb a₁ a₂ h := by\n    obtain hb | hb := hb.eq_or_lt\n    · simp [← hb] at h\n    · exact h₀ _ hb _ _ h\n\n"}
{"name":"PosSMulStrictMono.toPosSMulMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : PartialOrder α\ninst✝¹ : PartialOrder β\ninst✝ : PosSMulStrictMono α β\n⊢ PosSMulMono α β","decl":"instance (priority := 100) PosSMulStrictMono.toPosSMulMono [PosSMulStrictMono α β] :\n    PosSMulMono α β :=\n  PosSMulMono.of_pos fun _a ha ↦ (strictMono_smul_left_of_pos ha).monotone\n\n-- See note [lower instance priority]\n"}
{"name":"SMulPosStrictMono.toSMulPosMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : PartialOrder α\ninst✝¹ : PartialOrder β\ninst✝ : SMulPosStrictMono α β\n⊢ SMulPosMono α β","decl":"instance (priority := 100) SMulPosStrictMono.toSMulPosMono [SMulPosStrictMono α β] :\n    SMulPosMono α β :=\n  SMulPosMono.of_pos fun _b hb ↦ (strictMono_smul_right_of_pos hb).monotone\n\n-- See note [lower instance priority]\n"}
{"name":"PosSMulReflectLE.toPosSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : PartialOrder α\ninst✝¹ : PartialOrder β\ninst✝ : PosSMulReflectLE α β\n⊢ PosSMulReflectLT α β","decl":"instance (priority := 100) PosSMulReflectLE.toPosSMulReflectLT [PosSMulReflectLE α β] :\n    PosSMulReflectLT α β :=\n  PosSMulReflectLT.of_pos fun a ha b₁ b₂ h ↦\n    (le_of_smul_le_smul_of_pos_left h.le ha).lt_of_ne <| by rintro rfl; simp at h\n\n-- See note [lower instance priority]\n"}
{"name":"SMulPosReflectLE.toSMulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : PartialOrder α\ninst✝¹ : PartialOrder β\ninst✝ : SMulPosReflectLE α β\n⊢ SMulPosReflectLT α β","decl":"instance (priority := 100) SMulPosReflectLE.toSMulPosReflectLT [SMulPosReflectLE α β] :\n    SMulPosReflectLT α β :=\n  SMulPosReflectLT.of_pos fun b hb a₁ a₂ h ↦\n    (le_of_smul_le_smul_of_pos_right h.le hb).lt_of_ne <| by rintro rfl; simp at h\n\n"}
{"name":"smul_eq_smul_iff_eq_and_eq_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : PartialOrder α\ninst✝² : PartialOrder β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : SMulPosStrictMono α β\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\nh₁ : LT.lt 0 a₁\nh₂ : LT.lt 0 b₂\n⊢ Iff (Eq (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)) (And (Eq a₁ a₂) (Eq b₁ b₂))","decl":"lemma smul_eq_smul_iff_eq_and_eq_of_pos [PosSMulStrictMono α β] [SMulPosStrictMono α β]\n    (ha : a₁ ≤ a₂) (hb : b₁ ≤ b₂) (h₁ : 0 < a₁) (h₂ : 0 < b₂) :\n    a₁ • b₁ = a₂ • b₂ ↔ a₁ = a₂ ∧ b₁ = b₂ := by\n  refine ⟨fun h ↦ ?_, by rintro ⟨rfl, rfl⟩; rfl⟩\n  simp only [eq_iff_le_not_lt, ha, hb, true_and]\n  refine ⟨fun ha ↦ h.not_lt ?_, fun hb ↦ h.not_lt ?_⟩\n  · exact (smul_le_smul_of_nonneg_left hb h₁.le).trans_lt (smul_lt_smul_of_pos_right ha h₂)\n  · exact (smul_lt_smul_of_pos_left hb h₁).trans_le (smul_le_smul_of_nonneg_right ha h₂.le)\n\n"}
{"name":"smul_eq_smul_iff_eq_and_eq_of_pos'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na₁ a₂ : α\nb₁ b₂ : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : PartialOrder α\ninst✝² : PartialOrder β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : SMulPosStrictMono α β\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\nh₂ : LT.lt 0 a₂\nh₁ : LT.lt 0 b₁\n⊢ Iff (Eq (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂)) (And (Eq a₁ a₂) (Eq b₁ b₂))","decl":"lemma smul_eq_smul_iff_eq_and_eq_of_pos' [PosSMulStrictMono α β] [SMulPosStrictMono α β]\n    (ha : a₁ ≤ a₂) (hb : b₁ ≤ b₂) (h₂ : 0 < a₂) (h₁ : 0 < b₁) :\n    a₁ • b₁ = a₂ • b₂ ↔ a₁ = a₂ ∧ b₁ = b₂ := by\n  refine ⟨fun h ↦ ?_, by rintro ⟨rfl, rfl⟩; rfl⟩\n  simp only [eq_iff_le_not_lt, ha, hb, true_and]\n  refine ⟨fun ha ↦ h.not_lt ?_, fun hb ↦ h.not_lt ?_⟩\n  · exact (smul_lt_smul_of_pos_right ha h₁).trans_le (smul_le_smul_of_nonneg_left hb h₂.le)\n  · exact (smul_le_smul_of_nonneg_right ha h₁.le).trans_lt (smul_lt_smul_of_pos_left hb h₂)\n\n"}
{"name":"pos_and_pos_or_neg_and_neg_of_smul_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : LinearOrder α\ninst✝² : LinearOrder β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosMono α β\nhab : LT.lt 0 (HSMul.hSMul a b)\n⊢ Or (And (LT.lt 0 a) (LT.lt 0 b)) (And (LT.lt a 0) (LT.lt b 0))","decl":"lemma pos_and_pos_or_neg_and_neg_of_smul_pos [PosSMulMono α β] [SMulPosMono α β] (hab : 0 < a • b) :\n    0 < a ∧ 0 < b ∨ a < 0 ∧ b < 0 := by\n  obtain ha | rfl | ha := lt_trichotomy a 0\n  · refine Or.inr ⟨ha, lt_imp_lt_of_le_imp_le (fun hb ↦ ?_) hab⟩\n    exact smul_nonpos_of_nonpos_of_nonneg ha.le hb\n  · rw [zero_smul] at hab\n    exact hab.false.elim\n  · refine Or.inl ⟨ha, lt_imp_lt_of_le_imp_le (fun hb ↦ ?_) hab⟩\n    exact smul_nonpos_of_nonneg_of_nonpos ha.le hb\n\n"}
{"name":"neg_of_smul_pos_right","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : LinearOrder α\ninst✝² : LinearOrder β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosMono α β\nh : LT.lt 0 (HSMul.hSMul a b)\nha : LE.le a 0\n⊢ LT.lt b 0","decl":"lemma neg_of_smul_pos_right [PosSMulMono α β] [SMulPosMono α β] (h : 0 < a • b) (ha : a ≤ 0) :\n    b < 0 := ((pos_and_pos_or_neg_and_neg_of_smul_pos h).resolve_left fun h ↦ h.1.not_le ha).2\n\n"}
{"name":"neg_of_smul_pos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : LinearOrder α\ninst✝² : LinearOrder β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosMono α β\nh : LT.lt 0 (HSMul.hSMul a b)\nha : LE.le b 0\n⊢ LT.lt a 0","decl":"lemma neg_of_smul_pos_left [PosSMulMono α β] [SMulPosMono α β] (h : 0 < a • b) (ha : b ≤ 0) :\n    a < 0 := ((pos_and_pos_or_neg_and_neg_of_smul_pos h).resolve_left fun h ↦ h.2.not_le ha).1\n\n"}
{"name":"neg_iff_neg_of_smul_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Zero α\ninst✝⁵ : Zero β\ninst✝⁴ : SMulWithZero α β\ninst✝³ : LinearOrder α\ninst✝² : LinearOrder β\ninst✝¹ : PosSMulMono α β\ninst✝ : SMulPosMono α β\nhab : LT.lt 0 (HSMul.hSMul a b)\n⊢ Iff (LT.lt a 0) (LT.lt b 0)","decl":"lemma neg_iff_neg_of_smul_pos [PosSMulMono α β] [SMulPosMono α β] (hab : 0 < a • b) :\n    a < 0 ↔ b < 0 :=\n  ⟨neg_of_smul_pos_right hab ∘ le_of_lt, neg_of_smul_pos_left hab ∘ le_of_lt⟩\n\n"}
{"name":"neg_of_smul_neg_left'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : LinearOrder α\ninst✝¹ : LinearOrder β\ninst✝ : SMulPosMono α β\nh : LT.lt (HSMul.hSMul a b) 0\nha : LE.le 0 a\n⊢ LT.lt b 0","decl":"lemma neg_of_smul_neg_left' [SMulPosMono α β] (h : a • b < 0) (ha : 0 ≤ a) : b < 0 :=\n  lt_of_not_ge fun hb ↦ (smul_nonneg' ha hb).not_lt h\n\n"}
{"name":"neg_of_smul_neg_right'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Zero α\ninst✝⁴ : Zero β\ninst✝³ : SMulWithZero α β\ninst✝² : LinearOrder α\ninst✝¹ : LinearOrder β\ninst✝ : PosSMulMono α β\nh : LT.lt (HSMul.hSMul a b) 0\nhb : LE.le 0 b\n⊢ LT.lt a 0","decl":"lemma neg_of_smul_neg_right' [PosSMulMono α β] (h : a • b < 0) (hb : 0 ≤ b) : a < 0 :=\n  lt_of_not_ge fun ha ↦ (smul_nonneg ha hb).not_lt h\n\n"}
{"name":"le_smul_iff_one_le_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Monoid α\ninst✝⁵ : Zero β\ninst✝⁴ : MulAction α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : SMulPosMono α β\ninst✝ : SMulPosReflectLE α β\nhb : LT.lt 0 b\n⊢ Iff (LE.le b (HSMul.hSMul a b)) (LE.le 1 a)","decl":"@[simp]\nlemma le_smul_iff_one_le_left [SMulPosMono α β] [SMulPosReflectLE α β] (hb : 0 < b) :\n    b ≤ a • b ↔ 1 ≤ a := Iff.trans (by rw [one_smul]) (smul_le_smul_iff_of_pos_right hb)\n\n"}
{"name":"lt_smul_iff_one_lt_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Monoid α\ninst✝⁵ : Zero β\ninst✝⁴ : MulAction α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : SMulPosStrictMono α β\ninst✝ : SMulPosReflectLT α β\nhb : LT.lt 0 b\n⊢ Iff (LT.lt b (HSMul.hSMul a b)) (LT.lt 1 a)","decl":"@[simp]\nlemma lt_smul_iff_one_lt_left [SMulPosStrictMono α β] [SMulPosReflectLT α β] (hb : 0 < b) :\n    b < a • b ↔ 1 < a := Iff.trans (by rw [one_smul]) (smul_lt_smul_iff_of_pos_right hb)\n\n"}
{"name":"smul_le_iff_le_one_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Monoid α\ninst✝⁵ : Zero β\ninst✝⁴ : MulAction α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : SMulPosMono α β\ninst✝ : SMulPosReflectLE α β\nhb : LT.lt 0 b\n⊢ Iff (LE.le (HSMul.hSMul a b) b) (LE.le a 1)","decl":"@[simp]\nlemma smul_le_iff_le_one_left [SMulPosMono α β] [SMulPosReflectLE α β] (hb : 0 < b) :\n    a • b ≤ b ↔ a ≤ 1 := Iff.trans (by rw [one_smul]) (smul_le_smul_iff_of_pos_right hb)\n\n"}
{"name":"smul_lt_iff_lt_one_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁶ : Monoid α\ninst✝⁵ : Zero β\ninst✝⁴ : MulAction α β\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : SMulPosStrictMono α β\ninst✝ : SMulPosReflectLT α β\nhb : LT.lt 0 b\n⊢ Iff (LT.lt (HSMul.hSMul a b) b) (LT.lt a 1)","decl":"@[simp]\nlemma smul_lt_iff_lt_one_left [SMulPosStrictMono α β] [SMulPosReflectLT α β] (hb : 0 < b) :\n    a • b < b ↔ a < 1 := Iff.trans (by rw [one_smul]) (smul_lt_smul_iff_of_pos_right hb)\n\n"}
{"name":"smul_le_of_le_one_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Monoid α\ninst✝⁴ : Zero β\ninst✝³ : MulAction α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosMono α β\nhb : LE.le 0 b\nh : LE.le a 1\n⊢ LE.le (HSMul.hSMul a b) b","decl":"lemma smul_le_of_le_one_left [SMulPosMono α β] (hb : 0 ≤ b) (h : a ≤ 1) : a • b ≤ b := by\n  simpa only [one_smul] using smul_le_smul_of_nonneg_right h hb\n\n"}
{"name":"le_smul_of_one_le_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Monoid α\ninst✝⁴ : Zero β\ninst✝³ : MulAction α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosMono α β\nhb : LE.le 0 b\nh : LE.le 1 a\n⊢ LE.le b (HSMul.hSMul a b)","decl":"lemma le_smul_of_one_le_left [SMulPosMono α β] (hb : 0 ≤ b) (h : 1 ≤ a) : b ≤ a • b := by\n  simpa only [one_smul] using smul_le_smul_of_nonneg_right h hb\n\n"}
{"name":"smul_lt_of_lt_one_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Monoid α\ninst✝⁴ : Zero β\ninst✝³ : MulAction α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosStrictMono α β\nhb : LT.lt 0 b\nh : LT.lt a 1\n⊢ LT.lt (HSMul.hSMul a b) b","decl":"lemma smul_lt_of_lt_one_left [SMulPosStrictMono α β] (hb : 0 < b) (h : a < 1) : a • b < b := by\n  simpa only [one_smul] using smul_lt_smul_of_pos_right h hb\n\n"}
{"name":"lt_smul_of_one_lt_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁵ : Monoid α\ninst✝⁴ : Zero β\ninst✝³ : MulAction α β\ninst✝² : Preorder α\ninst✝¹ : Preorder β\ninst✝ : SMulPosStrictMono α β\nhb : LT.lt 0 b\nh : LT.lt 1 a\n⊢ LT.lt b (HSMul.hSMul a b)","decl":"lemma lt_smul_of_one_lt_left [SMulPosStrictMono α β] (hb : 0 < b) (h : 1 < a) : b < a • b := by\n  simpa only [one_smul] using smul_lt_smul_of_pos_right h hb\n\n"}
{"name":"PosSMulMono.toPosSMulStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Semiring α\ninst✝⁵ : AddCommGroup β\ninst✝⁴ : Module α β\ninst✝³ : NoZeroSMulDivisors α β\ninst✝² : Preorder α\ninst✝¹ : PartialOrder β\ninst✝ : PosSMulMono α β\n⊢ PosSMulStrictMono α β","decl":"lemma PosSMulMono.toPosSMulStrictMono [PosSMulMono α β] : PosSMulStrictMono α β :=\n  ⟨fun _a ha _b₁ _b₂ hb ↦ (smul_le_smul_of_nonneg_left hb.le ha.le).lt_of_ne <|\n    (smul_right_injective _ ha.ne').ne hb.ne⟩\n\n"}
{"name":"PosSMulReflectLT.toPosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Semiring α\ninst✝⁵ : AddCommGroup β\ninst✝⁴ : Module α β\ninst✝³ : NoZeroSMulDivisors α β\ninst✝² : Preorder α\ninst✝¹ : PartialOrder β\ninst✝ : PosSMulReflectLT α β\n⊢ PosSMulReflectLE α β","decl":"instance PosSMulReflectLT.toPosSMulReflectLE [PosSMulReflectLT α β] : PosSMulReflectLE α β :=\n  ⟨fun _a ha _b₁ _b₂ h ↦ h.eq_or_lt.elim (fun h ↦ (smul_right_injective _ ha.ne' h).le) fun h' ↦\n    (lt_of_smul_lt_smul_left h' ha.le).le⟩\n\n"}
{"name":"posSMulMono_iff_posSMulStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Semiring α\ninst✝⁴ : AddCommGroup β\ninst✝³ : Module α β\ninst✝² : NoZeroSMulDivisors α β\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ Iff (PosSMulMono α β) (PosSMulStrictMono α β)","decl":"lemma posSMulMono_iff_posSMulStrictMono : PosSMulMono α β ↔ PosSMulStrictMono α β :=\n  ⟨fun _ ↦ PosSMulMono.toPosSMulStrictMono, fun _ ↦ inferInstance⟩\n\n"}
{"name":"PosSMulReflectLE_iff_posSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Semiring α\ninst✝⁴ : AddCommGroup β\ninst✝³ : Module α β\ninst✝² : NoZeroSMulDivisors α β\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ Iff (PosSMulReflectLE α β) (PosSMulReflectLT α β)","decl":"lemma PosSMulReflectLE_iff_posSMulReflectLT : PosSMulReflectLE α β ↔ PosSMulReflectLT α β :=\n  ⟨fun _ ↦ inferInstance, fun _ ↦ PosSMulReflectLT.toPosSMulReflectLE⟩\n\n"}
{"name":"SMulPosMono.toSMulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Ring α\ninst✝⁵ : AddCommGroup β\ninst✝⁴ : Module α β\ninst✝³ : NoZeroSMulDivisors α β\ninst✝² : PartialOrder α\ninst✝¹ : PartialOrder β\ninst✝ : SMulPosMono α β\n⊢ SMulPosStrictMono α β","decl":"lemma SMulPosMono.toSMulPosStrictMono [SMulPosMono α β] : SMulPosStrictMono α β :=\n  ⟨fun _b hb _a₁ _a₂ ha ↦ (smul_le_smul_of_nonneg_right ha.le hb.le).lt_of_ne <|\n    (smul_left_injective _ hb.ne').ne ha.ne⟩\n\n"}
{"name":"smulPosMono_iff_smulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Ring α\ninst✝⁴ : AddCommGroup β\ninst✝³ : Module α β\ninst✝² : NoZeroSMulDivisors α β\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ Iff (SMulPosMono α β) (SMulPosStrictMono α β)","decl":"lemma smulPosMono_iff_smulPosStrictMono : SMulPosMono α β ↔ SMulPosStrictMono α β :=\n  ⟨fun _ ↦ SMulPosMono.toSMulPosStrictMono, fun _ ↦ inferInstance⟩\n\n"}
{"name":"SMulPosReflectLT.toSMulPosReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : Ring α\ninst✝⁵ : AddCommGroup β\ninst✝⁴ : Module α β\ninst✝³ : NoZeroSMulDivisors α β\ninst✝² : PartialOrder α\ninst✝¹ : PartialOrder β\ninst✝ : SMulPosReflectLT α β\n⊢ SMulPosReflectLE α β","decl":"lemma SMulPosReflectLT.toSMulPosReflectLE [SMulPosReflectLT α β] : SMulPosReflectLE α β :=\n  ⟨fun _b hb _a₁ _a₂ h ↦ h.eq_or_lt.elim (fun h ↦ (smul_left_injective _ hb.ne' h).le) fun h' ↦\n    (lt_of_smul_lt_smul_right h' hb.le).le⟩\n\n"}
{"name":"SMulPosReflectLE_iff_smulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Ring α\ninst✝⁴ : AddCommGroup β\ninst✝³ : Module α β\ninst✝² : NoZeroSMulDivisors α β\ninst✝¹ : PartialOrder α\ninst✝ : PartialOrder β\n⊢ Iff (SMulPosReflectLE α β) (SMulPosReflectLT α β)","decl":"lemma SMulPosReflectLE_iff_smulPosReflectLT : SMulPosReflectLE α β ↔ SMulPosReflectLT α β :=\n  ⟨fun _ ↦ inferInstance, fun _ ↦ SMulPosReflectLT.toSMulPosReflectLE⟩\n\n"}
{"name":"inv_smul_le_iff_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁵ : GroupWithZero α\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : MulAction α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\nha : LT.lt 0 a\n⊢ Iff (LE.le (HSMul.hSMul (Inv.inv a) b₁) b₂) (LE.le b₁ (HSMul.hSMul a b₂))","decl":"lemma inv_smul_le_iff_of_pos [PosSMulMono α β] [PosSMulReflectLE α β] (ha : 0 < a) :\n    a⁻¹ • b₁ ≤ b₂ ↔ b₁ ≤ a • b₂ := by rw [← smul_le_smul_iff_of_pos_left ha, smul_inv_smul₀ ha.ne']\n\n"}
{"name":"le_inv_smul_iff_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁵ : GroupWithZero α\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : MulAction α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\nha : LT.lt 0 a\n⊢ Iff (LE.le b₁ (HSMul.hSMul (Inv.inv a) b₂)) (LE.le (HSMul.hSMul a b₁) b₂)","decl":"lemma le_inv_smul_iff_of_pos [PosSMulMono α β] [PosSMulReflectLE α β] (ha : 0 < a) :\n    b₁ ≤ a⁻¹ • b₂ ↔ a • b₁ ≤ b₂ := by rw [← smul_le_smul_iff_of_pos_left ha, smul_inv_smul₀ ha.ne']\n\n"}
{"name":"inv_smul_lt_iff_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁵ : GroupWithZero α\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : MulAction α β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt 0 a\n⊢ Iff (LT.lt (HSMul.hSMul (Inv.inv a) b₁) b₂) (LT.lt b₁ (HSMul.hSMul a b₂))","decl":"lemma inv_smul_lt_iff_of_pos [PosSMulStrictMono α β] [PosSMulReflectLT α β] (ha : 0 < a) :\n    a⁻¹ • b₁ < b₂ ↔ b₁ < a • b₂ := by rw [← smul_lt_smul_iff_of_pos_left ha, smul_inv_smul₀ ha.ne']\n\n"}
{"name":"lt_inv_smul_iff_of_pos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁵ : GroupWithZero α\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : MulAction α β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt 0 a\n⊢ Iff (LT.lt b₁ (HSMul.hSMul (Inv.inv a) b₂)) (LT.lt (HSMul.hSMul a b₁) b₂)","decl":"lemma lt_inv_smul_iff_of_pos [PosSMulStrictMono α β] [PosSMulReflectLT α β] (ha : 0 < a) :\n    b₁ < a⁻¹ • b₂ ↔ a • b₁ < b₂ := by rw [← smul_lt_smul_iff_of_pos_left ha, smul_inv_smul₀ ha.ne']\n\n"}
{"name":"OrderIso.smulRight_apply","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : GroupWithZero α\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : MulAction α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\na : α\nha : LT.lt 0 a\nb : β\n⊢ Eq ((OrderIso.smulRight ha) b) (HSMul.hSMul a b)","decl":"/-- Right scalar multiplication as an order isomorphism. -/\n@[simps!]\ndef OrderIso.smulRight [PosSMulMono α β] [PosSMulReflectLE α β] {a : α} (ha : 0 < a) : β ≃o β where\n  toEquiv := Equiv.smulRight ha.ne'\n  map_rel_iff' := smul_le_smul_iff_of_pos_left ha\n\n"}
{"name":"OrderIso.smulRight_symm_apply","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : GroupWithZero α\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : MulAction α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\na : α\nha : LT.lt 0 a\nb : β\n⊢ Eq ((RelIso.symm (OrderIso.smulRight ha)) b) (HSMul.hSMul (Inv.inv a) b)","decl":"/-- Right scalar multiplication as an order isomorphism. -/\n@[simps!]\ndef OrderIso.smulRight [PosSMulMono α β] [PosSMulReflectLE α β] {a : α} (ha : 0 < a) : β ≃o β where\n  toEquiv := Equiv.smulRight ha.ne'\n  map_rel_iff' := smul_le_smul_iff_of_pos_left ha\n\n"}
{"name":"OrderDual.instPosSMulMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : SMul α β\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α β\n⊢ PosSMulMono α (OrderDual β)","decl":"instance instPosSMulMono [PosSMulMono α β] : PosSMulMono α βᵒᵈ where\n  elim _a ha _b₁ _b₂ hb := smul_le_smul_of_nonneg_left (β := β) hb ha\n"}
{"name":"OrderDual.instPosSMulStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : SMul α β\ninst✝¹ : Zero α\ninst✝ : PosSMulStrictMono α β\n⊢ PosSMulStrictMono α (OrderDual β)","decl":"instance instPosSMulStrictMono [PosSMulStrictMono α β] : PosSMulStrictMono α βᵒᵈ where\n  elim _a ha _b₁ _b₂ hb := smul_lt_smul_of_pos_left (β := β) hb ha\n"}
{"name":"OrderDual.instPosSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : SMul α β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLT α β\n⊢ PosSMulReflectLT α (OrderDual β)","decl":"instance instPosSMulReflectLT [PosSMulReflectLT α β] : PosSMulReflectLT α βᵒᵈ where\n  elim _a ha _b₁ _b₂ h := lt_of_smul_lt_smul_of_nonneg_left (β := β) h ha\n"}
{"name":"OrderDual.instPosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : SMul α β\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLE α β\n⊢ PosSMulReflectLE α (OrderDual β)","decl":"instance instPosSMulReflectLE [PosSMulReflectLE α β] : PosSMulReflectLE α βᵒᵈ where\n  elim _a ha _b₁ _b₂ h := le_of_smul_le_smul_of_pos_left (β := β) h ha\n\n"}
{"name":"OrderDual.instSMulPosMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Monoid α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : DistribMulAction α β\ninst✝ : SMulPosMono α β\n⊢ SMulPosMono α (OrderDual β)","decl":"instance instSMulPosMono [SMulPosMono α β] : SMulPosMono α βᵒᵈ where\n  elim _b hb a₁ a₂ ha := by\n    rw [← neg_le_neg_iff, ← smul_neg, ← smul_neg]\n    exact smul_le_smul_of_nonneg_right (β := β) ha <| neg_nonneg.2 hb\n\n"}
{"name":"OrderDual.instSMulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Monoid α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : DistribMulAction α β\ninst✝ : SMulPosStrictMono α β\n⊢ SMulPosStrictMono α (OrderDual β)","decl":"instance instSMulPosStrictMono [SMulPosStrictMono α β] : SMulPosStrictMono α βᵒᵈ where\n  elim _b hb a₁ a₂ ha := by\n    rw [← neg_lt_neg_iff, ← smul_neg, ← smul_neg]\n    exact smul_lt_smul_of_pos_right (β := β) ha <| neg_pos.2 hb\n\n"}
{"name":"OrderDual.instSMulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Monoid α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : DistribMulAction α β\ninst✝ : SMulPosReflectLT α β\n⊢ SMulPosReflectLT α (OrderDual β)","decl":"instance instSMulPosReflectLT [SMulPosReflectLT α β] : SMulPosReflectLT α βᵒᵈ where\n  elim _b hb a₁ a₂ h := by\n    rw [← neg_lt_neg_iff, ← smul_neg, ← smul_neg] at h\n    exact lt_of_smul_lt_smul_right (β := β) h <| neg_nonneg.2 hb\n\n"}
{"name":"OrderDual.instSMulPosReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : Preorder α\ninst✝³ : Monoid α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : DistribMulAction α β\ninst✝ : SMulPosReflectLE α β\n⊢ SMulPosReflectLE α (OrderDual β)","decl":"instance instSMulPosReflectLE [SMulPosReflectLE α β] : SMulPosReflectLE α βᵒᵈ where\n  elim _b hb a₁ a₂ h := by\n    rw [← neg_le_neg_iff, ← smul_neg, ← smul_neg] at h\n    exact le_of_smul_le_smul_right (β := β) h <| neg_pos.2 hb\n\n"}
{"name":"smul_add_smul_le_smul_add_smul","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : StrictOrderedSemiring α\ninst✝³ : ExistsAddOfLE α\ninst✝² : OrderedCancelAddCommMonoid β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\na₁ a₂ : α\nb₁ b₂ : β\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\n⊢ LE.le (HAdd.hAdd (HSMul.hSMul a₁ b₂) (HSMul.hSMul a₂ b₁)) (HAdd.hAdd (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂))","decl":"/-- Binary **rearrangement inequality**. -/\nlemma smul_add_smul_le_smul_add_smul (ha : a₁ ≤ a₂) (hb : b₁ ≤ b₂) :\n    a₁ • b₂ + a₂ • b₁ ≤ a₁ • b₁ + a₂ • b₂ := by\n  obtain ⟨a, ha₀, rfl⟩ := exists_nonneg_add_of_le ha\n  rw [add_smul, add_smul, add_left_comm]\n  gcongr\n\n"}
{"name":"smul_add_smul_le_smul_add_smul'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : StrictOrderedSemiring α\ninst✝³ : ExistsAddOfLE α\ninst✝² : OrderedCancelAddCommMonoid β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\na₁ a₂ : α\nb₁ b₂ : β\nha : LE.le a₂ a₁\nhb : LE.le b₂ b₁\n⊢ LE.le (HAdd.hAdd (HSMul.hSMul a₁ b₂) (HSMul.hSMul a₂ b₁)) (HAdd.hAdd (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂))","decl":"/-- Binary **rearrangement inequality**. -/\nlemma smul_add_smul_le_smul_add_smul' (ha : a₂ ≤ a₁) (hb : b₂ ≤ b₁) :\n    a₁ • b₂ + a₂ • b₁ ≤ a₁ • b₁ + a₂ • b₂ := by\n  simp_rw [add_comm (a₁ • _)]; exact smul_add_smul_le_smul_add_smul ha hb\n\n"}
{"name":"smul_add_smul_lt_smul_add_smul","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : StrictOrderedSemiring α\ninst✝³ : ExistsAddOfLE α\ninst✝² : OrderedCancelAddCommMonoid β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na₁ a₂ : α\nb₁ b₂ : β\nha : LT.lt a₁ a₂\nhb : LT.lt b₁ b₂\n⊢ LT.lt (HAdd.hAdd (HSMul.hSMul a₁ b₂) (HSMul.hSMul a₂ b₁)) (HAdd.hAdd (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂))","decl":"/-- Binary strict **rearrangement inequality**. -/\nlemma smul_add_smul_lt_smul_add_smul (ha : a₁ < a₂) (hb : b₁ < b₂) :\n    a₁ • b₂ + a₂ • b₁ < a₁ • b₁ + a₂ • b₂ := by\n  obtain ⟨a, ha₀, rfl⟩ := lt_iff_exists_pos_add.1 ha\n  rw [add_smul, add_smul, add_left_comm]\n  gcongr\n\n"}
{"name":"smul_add_smul_lt_smul_add_smul'","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : StrictOrderedSemiring α\ninst✝³ : ExistsAddOfLE α\ninst✝² : OrderedCancelAddCommMonoid β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na₁ a₂ : α\nb₁ b₂ : β\nha : LT.lt a₂ a₁\nhb : LT.lt b₂ b₁\n⊢ LT.lt (HAdd.hAdd (HSMul.hSMul a₁ b₂) (HSMul.hSMul a₂ b₁)) (HAdd.hAdd (HSMul.hSMul a₁ b₁) (HSMul.hSMul a₂ b₂))","decl":"/-- Binary strict **rearrangement inequality**. -/\nlemma smul_add_smul_lt_smul_add_smul' (ha : a₂ < a₁) (hb : b₂ < b₁) :\n    a₁ • b₂ + a₂ • b₁ < a₁ • b₁ + a₂ • b₂ := by\n  simp_rw [add_comm (a₁ • _)]; exact smul_add_smul_lt_smul_add_smul ha hb\n\n"}
{"name":"smul_le_smul_of_nonpos_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\nh : LE.le b₁ b₂\nha : LE.le a 0\n⊢ LE.le (HSMul.hSMul a b₂) (HSMul.hSMul a b₁)","decl":"lemma smul_le_smul_of_nonpos_left (h : b₁ ≤ b₂) (ha : a ≤ 0) : a • b₂ ≤ a • b₁ := by\n  rw [← neg_neg a, neg_smul, neg_smul (-a), neg_le_neg_iff]\n  exact smul_le_smul_of_nonneg_left h (neg_nonneg_of_nonpos ha)\n\n"}
{"name":"antitone_smul_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\nha : LE.le a 0\n⊢ Antitone fun x => HSMul.hSMul a x","decl":"lemma antitone_smul_left (ha : a ≤ 0) : Antitone ((a • ·) : β → β) :=\n  fun _ _ h ↦ smul_le_smul_of_nonpos_left h ha\n\n"}
{"name":"PosSMulMono.toSMulPosMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : OrderedRing α\ninst✝¹ : OrderedAddCommGroup β\ninst✝ : Module α β\n⊢ SMulPosMono α β","decl":"instance PosSMulMono.toSMulPosMono : SMulPosMono α β where\n  elim _b hb a₁ a₂ ha := by rw [← sub_nonneg, ← sub_smul]; exact smul_nonneg (sub_nonneg.2 ha) hb\n\n"}
{"name":"smul_lt_smul_of_neg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\nhb : LT.lt b₁ b₂\nha : LT.lt a 0\n⊢ LT.lt (HSMul.hSMul a b₂) (HSMul.hSMul a b₁)","decl":"lemma smul_lt_smul_of_neg_left (hb : b₁ < b₂) (ha : a < 0) : a • b₂ < a • b₁ := by\n  rw [← neg_neg a, neg_smul, neg_smul (-a), neg_lt_neg_iff]\n  exact smul_lt_smul_of_pos_left hb (neg_pos_of_neg ha)\n\n"}
{"name":"strictAnti_smul_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\nha : LT.lt a 0\n⊢ StrictAnti fun x => HSMul.hSMul a x","decl":"lemma strictAnti_smul_left (ha : a < 0) : StrictAnti ((a • ·) : β → β) :=\n  fun _ _ h ↦ smul_lt_smul_of_neg_left h ha\n\n"}
{"name":"PosSMulStrictMono.toSMulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : OrderedRing α\ninst✝¹ : OrderedAddCommGroup β\ninst✝ : Module α β\n⊢ SMulPosStrictMono α β","decl":"instance PosSMulStrictMono.toSMulPosStrictMono : SMulPosStrictMono α β where\n  elim _b hb a₁ a₂ ha := by rw [← sub_pos, ← sub_smul]; exact smul_pos (sub_pos.2 ha) hb\n\n"}
{"name":"le_of_smul_le_smul_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulReflectLE α β\nh : LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\nha : LT.lt a 0\n⊢ LE.le b₂ b₁","decl":"lemma le_of_smul_le_smul_of_neg [PosSMulReflectLE α β] (h : a • b₁ ≤ a • b₂) (ha : a < 0) :\n    b₂ ≤ b₁ := by\n  rw [← neg_neg a, neg_smul, neg_smul (-a), neg_le_neg_iff] at h\n  exact le_of_smul_le_smul_of_pos_left h <| neg_pos.2 ha\n\n"}
{"name":"lt_of_smul_lt_smul_of_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulReflectLT α β\nh : LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)\nha : LE.le a 0\n⊢ LT.lt b₂ b₁","decl":"lemma lt_of_smul_lt_smul_of_nonpos [PosSMulReflectLT α β] (h : a • b₁ < a • b₂) (ha : a ≤ 0) :\n    b₂ < b₁ := by\n  rw [← neg_neg a, neg_smul, neg_smul (-a), neg_lt_neg_iff] at h\n  exact lt_of_smul_lt_smul_of_nonneg_left h (neg_nonneg_of_nonpos ha)\n\n"}
{"name":"smul_nonneg_of_nonpos_of_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝³ : OrderedRing α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : SMulPosMono α β\nha : LE.le a 0\nhb : LE.le b 0\n⊢ LE.le 0 (HSMul.hSMul a b)","decl":"lemma smul_nonneg_of_nonpos_of_nonpos [SMulPosMono α β] (ha : a ≤ 0) (hb : b ≤ 0) : 0 ≤ a • b :=\n  smul_nonpos_of_nonpos_of_nonneg (β := βᵒᵈ) ha hb\n\n"}
{"name":"smul_le_smul_iff_of_neg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : OrderedRing α\ninst✝³ : OrderedAddCommGroup β\ninst✝² : Module α β\ninst✝¹ : PosSMulMono α β\ninst✝ : PosSMulReflectLE α β\nha : LT.lt a 0\n⊢ Iff (LE.le (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)) (LE.le b₂ b₁)","decl":"lemma smul_le_smul_iff_of_neg_left [PosSMulMono α β] [PosSMulReflectLE α β] (ha : a < 0) :\n    a • b₁ ≤ a • b₂ ↔ b₂ ≤ b₁ := by\n  rw [← neg_neg a, neg_smul, neg_smul (-a), neg_le_neg_iff]\n  exact smul_le_smul_iff_of_pos_left (neg_pos_of_neg ha)\n\n"}
{"name":"smul_lt_smul_iff_of_neg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb₁ b₂ : β\ninst✝⁴ : OrderedRing α\ninst✝³ : OrderedAddCommGroup β\ninst✝² : Module α β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt a 0\n⊢ Iff (LT.lt (HSMul.hSMul a b₁) (HSMul.hSMul a b₂)) (LT.lt b₂ b₁)","decl":"lemma smul_lt_smul_iff_of_neg_left (ha : a < 0) : a • b₁ < a • b₂ ↔ b₂ < b₁ := by\n  rw [← neg_neg a, neg_smul, neg_smul (-a), neg_lt_neg_iff]\n  exact smul_lt_smul_iff_of_pos_left (neg_pos_of_neg ha)\n\n"}
{"name":"smul_pos_iff_of_neg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁴ : OrderedRing α\ninst✝³ : OrderedAddCommGroup β\ninst✝² : Module α β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt a 0\n⊢ Iff (LT.lt 0 (HSMul.hSMul a b)) (LT.lt b 0)","decl":"lemma smul_pos_iff_of_neg_left (ha : a < 0) : 0 < a • b ↔ b < 0 := by\n  simpa only [smul_zero] using smul_lt_smul_iff_of_neg_left ha (b₁ := (0 : β))\n\n"}
{"name":"smul_pos_of_neg_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁴ : OrderedRing α\ninst✝³ : OrderedAddCommGroup β\ninst✝² : Module α β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt a 0\na✝ : LT.lt b 0\n⊢ LT.lt 0 (HSMul.hSMul a b)","decl":"alias ⟨_, smul_pos_of_neg_of_neg⟩ := smul_pos_iff_of_neg_left\n\n"}
{"name":"smul_neg_iff_of_neg_left","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\na : α\nb : β\ninst✝⁴ : OrderedRing α\ninst✝³ : OrderedAddCommGroup β\ninst✝² : Module α β\ninst✝¹ : PosSMulStrictMono α β\ninst✝ : PosSMulReflectLT α β\nha : LT.lt a 0\n⊢ Iff (LT.lt (HSMul.hSMul a b) 0) (LT.lt 0 b)","decl":"lemma smul_neg_iff_of_neg_left (ha : a < 0) : a • b < 0 ↔ 0 < b := by\n  simpa only [smul_zero] using smul_lt_smul_iff_of_neg_left ha (b₂ := (0 : β))\n\n"}
{"name":"smul_max_of_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : OrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\na : α\nha : LE.le a 0\nb₁ b₂ : β\n⊢ Eq (HSMul.hSMul a (Max.max b₁ b₂)) (Min.min (HSMul.hSMul a b₁) (HSMul.hSMul a b₂))","decl":"lemma smul_max_of_nonpos (ha : a ≤ 0) (b₁ b₂ : β) : a • max b₁ b₂ = min (a • b₁) (a • b₂) :=\n  (antitone_smul_left ha : Antitone (_ : β → β)).map_max\n\n"}
{"name":"smul_min_of_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : OrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulMono α β\na : α\nha : LE.le a 0\nb₁ b₂ : β\n⊢ Eq (HSMul.hSMul a (Min.min b₁ b₂)) (Max.max (HSMul.hSMul a b₁) (HSMul.hSMul a b₂))","decl":"lemma smul_min_of_nonpos (ha : a ≤ 0) (b₁ b₂ : β) : a • min b₁ b₂ = max (a • b₁) (a • b₂) :=\n  (antitone_smul_left ha : Antitone (_ : β → β)).map_min\n\n"}
{"name":"nonneg_and_nonneg_or_nonpos_and_nonpos_of_smul_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\nhab : LE.le 0 (HSMul.hSMul a b)\n⊢ Or (And (LE.le 0 a) (LE.le 0 b)) (And (LE.le a 0) (LE.le b 0))","decl":"lemma nonneg_and_nonneg_or_nonpos_and_nonpos_of_smul_nonneg (hab : 0 ≤ a • b) :\n    0 ≤ a ∧ 0 ≤ b ∨ a ≤ 0 ∧ b ≤ 0 := by\n  simp only [Decidable.or_iff_not_and_not, not_and, not_le]\n  refine fun ab nab ↦ hab.not_lt ?_\n  obtain ha | rfl | ha := lt_trichotomy 0 a\n  exacts [smul_neg_of_pos_of_neg ha (ab ha.le), ((ab le_rfl).asymm (nab le_rfl)).elim,\n    smul_neg_of_neg_of_pos ha (nab ha.le)]\n\n"}
{"name":"smul_nonneg_iff","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\n⊢ Iff (LE.le 0 (HSMul.hSMul a b)) (Or (And (LE.le 0 a) (LE.le 0 b)) (And (LE.le a 0) (LE.le b 0)))","decl":"lemma smul_nonneg_iff : 0 ≤ a • b ↔ 0 ≤ a ∧ 0 ≤ b ∨ a ≤ 0 ∧ b ≤ 0 :=\n  ⟨nonneg_and_nonneg_or_nonpos_and_nonpos_of_smul_nonneg,\n    fun h ↦ h.elim (and_imp.2 smul_nonneg) (and_imp.2 smul_nonneg_of_nonpos_of_nonpos)⟩\n\n"}
{"name":"smul_nonpos_iff","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\n⊢ Iff (LE.le (HSMul.hSMul a b) 0) (Or (And (LE.le 0 a) (LE.le b 0)) (And (LE.le a 0) (LE.le 0 b)))","decl":"lemma smul_nonpos_iff : a • b ≤ 0 ↔ 0 ≤ a ∧ b ≤ 0 ∨ a ≤ 0 ∧ 0 ≤ b := by\n  rw [← neg_nonneg, ← smul_neg, smul_nonneg_iff, neg_nonneg, neg_nonpos]\n\n"}
{"name":"smul_nonneg_iff_pos_imp_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\n⊢ Iff (LE.le 0 (HSMul.hSMul a b)) (And (LT.lt 0 a → LE.le 0 b) (LT.lt 0 b → LE.le 0 a))","decl":"lemma smul_nonneg_iff_pos_imp_nonneg : 0 ≤ a • b ↔ (0 < a → 0 ≤ b) ∧ (0 < b → 0 ≤ a) :=\n  smul_nonneg_iff.trans <| by\n    simp_rw [← not_le, ← or_iff_not_imp_left]; have := le_total a 0; have := le_total b 0; tauto\n\n"}
{"name":"smul_nonneg_iff_neg_imp_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\n⊢ Iff (LE.le 0 (HSMul.hSMul a b)) (And (LT.lt a 0 → LE.le b 0) (LT.lt b 0 → LE.le a 0))","decl":"lemma smul_nonneg_iff_neg_imp_nonpos : 0 ≤ a • b ↔ (a < 0 → b ≤ 0) ∧ (b < 0 → a ≤ 0) := by\n  rw [← neg_smul_neg, smul_nonneg_iff_pos_imp_nonneg]; simp only [neg_pos, neg_nonneg]\n\n"}
{"name":"smul_nonpos_iff_pos_imp_nonpos","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\n⊢ Iff (LE.le (HSMul.hSMul a b) 0) (And (LT.lt 0 a → LE.le b 0) (LT.lt b 0 → LE.le 0 a))","decl":"lemma smul_nonpos_iff_pos_imp_nonpos : a • b ≤ 0 ↔ (0 < a → b ≤ 0) ∧ (b < 0 → 0 ≤ a) := by\n  rw [← neg_nonneg, ← smul_neg, smul_nonneg_iff_pos_imp_nonneg]; simp only [neg_pos, neg_nonneg]\n\n"}
{"name":"smul_nonpos_iff_neg_imp_nonneg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedRing α\ninst✝² : LinearOrderedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : PosSMulStrictMono α β\na : α\nb : β\n⊢ Iff (LE.le (HSMul.hSMul a b) 0) (And (LT.lt a 0 → LE.le 0 b) (LT.lt 0 b → LE.le a 0))","decl":"lemma smul_nonpos_iff_neg_imp_nonneg : a • b ≤ 0 ↔ (a < 0 → 0 ≤ b) ∧ (0 < b → a ≤ 0) := by\n  rw [← neg_nonneg, ← neg_smul, smul_nonneg_iff_pos_imp_nonneg]; simp only [neg_pos, neg_nonneg]\n\n"}
{"name":"PosSMulMono.toPosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedSemifield α\ninst✝² : PartialOrder β\ninst✝¹ : MulAction α β\ninst✝ : PosSMulMono α β\n⊢ PosSMulReflectLE α β","decl":"instance (priority := 100) PosSMulMono.toPosSMulReflectLE [MulAction α β] [PosSMulMono α β] :\n    PosSMulReflectLE α β where\n  elim _a ha b₁ b₂ h := by\n    simpa [ha.ne'] using smul_le_smul_of_nonneg_left h <| inv_nonneg.2 ha.le\n\n-- See note [lower instance priority]\n"}
{"name":"PosSMulStrictMono.toPosSMulReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : LinearOrderedSemifield α\ninst✝³ : AddCommGroup β\ninst✝² : PartialOrder β\ninst✝¹ : MulActionWithZero α β\ninst✝ : PosSMulStrictMono α β\n⊢ PosSMulReflectLT α β","decl":"instance (priority := 100) PosSMulStrictMono.toPosSMulReflectLT [MulActionWithZero α β]\n    [PosSMulStrictMono α β] : PosSMulReflectLT α β :=\n  PosSMulReflectLT.of_pos fun a ha b₁ b₂ h ↦ by\n    simpa [ha.ne'] using smul_lt_smul_of_pos_left h <| inv_pos.2 ha\n\n"}
{"name":"inv_smul_le_iff_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\na : α\nb₁ b₂ : β\ninst✝ : PosSMulMono α β\nh : LT.lt a 0\n⊢ Iff (LE.le (HSMul.hSMul (Inv.inv a) b₁) b₂) (LE.le (HSMul.hSMul a b₂) b₁)","decl":"lemma inv_smul_le_iff_of_neg (h : a < 0) : a⁻¹ • b₁ ≤ b₂ ↔ a • b₂ ≤ b₁ := by\n  rw [← smul_le_smul_iff_of_neg_left h, smul_inv_smul₀ h.ne]\n\n"}
{"name":"smul_inv_le_iff_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\na : α\nb₁ b₂ : β\ninst✝ : PosSMulMono α β\nh : LT.lt a 0\n⊢ Iff (LE.le b₁ (HSMul.hSMul (Inv.inv a) b₂)) (LE.le b₂ (HSMul.hSMul a b₁))","decl":"lemma smul_inv_le_iff_of_neg (h : a < 0) : b₁ ≤ a⁻¹ • b₂ ↔ b₂ ≤ a • b₁ := by\n  rw [← smul_le_smul_iff_of_neg_left h, smul_inv_smul₀ h.ne]\n\n"}
{"name":"OrderIso.smulRightDual_apply","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\na : α\ninst✝ : PosSMulMono α β\nha : LT.lt a 0\na✝ : β\n⊢ Eq ((OrderIso.smulRightDual β ha) a✝) (HSMul.hSMul a (OrderDual.toDual a✝))","decl":"/-- Left scalar multiplication as an order isomorphism. -/\n@[simps!]\ndef OrderIso.smulRightDual (ha : a < 0) : β ≃o βᵒᵈ where\n  toEquiv := (Equiv.smulRight ha.ne).trans toDual\n  map_rel_iff' := (@OrderDual.toDual_le_toDual β).trans <| smul_le_smul_iff_of_neg_left ha\n\n"}
{"name":"OrderIso.smulRightDual_symm_apply","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\na : α\ninst✝ : PosSMulMono α β\nha : LT.lt a 0\na✝ : OrderDual β\n⊢ Eq ((RelIso.symm (OrderIso.smulRightDual β ha)) a✝) (HSMul.hSMul (Inv.inv a) (OrderDual.ofDual a✝))","decl":"/-- Left scalar multiplication as an order isomorphism. -/\n@[simps!]\ndef OrderIso.smulRightDual (ha : a < 0) : β ≃o βᵒᵈ where\n  toEquiv := (Equiv.smulRight ha.ne).trans toDual\n  map_rel_iff' := (@OrderDual.toDual_le_toDual β).trans <| smul_le_smul_iff_of_neg_left ha\n\n"}
{"name":"inv_smul_lt_iff_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\na : α\nb₁ b₂ : β\ninst✝ : PosSMulStrictMono α β\nh : LT.lt a 0\n⊢ Iff (LT.lt (HSMul.hSMul (Inv.inv a) b₁) b₂) (LT.lt (HSMul.hSMul a b₂) b₁)","decl":"lemma inv_smul_lt_iff_of_neg (h : a < 0) : a⁻¹ • b₁ < b₂ ↔ a • b₂ < b₁ := by\n  rw [← smul_lt_smul_iff_of_neg_left h, smul_inv_smul₀ h.ne]\n\n"}
{"name":"smul_inv_lt_iff_of_neg","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrderedField α\ninst✝² : OrderedAddCommGroup β\ninst✝¹ : Module α β\na : α\nb₁ b₂ : β\ninst✝ : PosSMulStrictMono α β\nh : LT.lt a 0\n⊢ Iff (LT.lt b₁ (HSMul.hSMul (Inv.inv a) b₂)) (LT.lt b₂ (HSMul.hSMul a b₁))","decl":"lemma smul_inv_lt_iff_of_neg (h : a < 0) : b₁ < a⁻¹ • b₂ ↔ b₂ < a • b₁ := by\n  rw [← smul_lt_smul_iff_of_neg_left h, smul_inv_smul₀ h.ne]\n\n"}
{"name":"Pi.instPosSMulMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁵ : Zero α\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : Preorder α\ninst✝² : (i : ι) → Preorder (β i)\ninst✝¹ : (i : ι) → SMulZeroClass α (β i)\ninst✝ : ∀ (i : ι), PosSMulMono α (β i)\n⊢ PosSMulMono α ((i : ι) → β i)","decl":"instance instPosSMulMono [∀ i, PosSMulMono α (β i)] : PosSMulMono α (∀ i, β i) where\n  elim _a ha _b₁ _b₂ hb i := smul_le_smul_of_nonneg_left (hb i) ha\n\n"}
{"name":"Pi.instSMulPosMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : Preorder α\ninst✝² : (i : ι) → Preorder (β i)\ninst✝¹ : (i : ι) → SMulZeroClass α (β i)\ninst✝ : ∀ (i : ι), SMulPosMono α (β i)\n⊢ SMulPosMono α ((i : ι) → β i)","decl":"instance instSMulPosMono [∀ i, SMulPosMono α (β i)] : SMulPosMono α (∀ i, β i) where\n  elim _b hb _a₁ _a₂ ha i := smul_le_smul_of_nonneg_right ha (hb i)\n\n"}
{"name":"Pi.instPosSMulReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁵ : Zero α\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : Preorder α\ninst✝² : (i : ι) → Preorder (β i)\ninst✝¹ : (i : ι) → SMulZeroClass α (β i)\ninst✝ : ∀ (i : ι), PosSMulReflectLE α (β i)\n⊢ PosSMulReflectLE α ((i : ι) → β i)","decl":"instance instPosSMulReflectLE [∀ i, PosSMulReflectLE α (β i)] : PosSMulReflectLE α (∀ i, β i) where\n  elim _a ha _b₁ _b₂ h i := le_of_smul_le_smul_left (h i) ha\n\n"}
{"name":"Pi.instSMulPosReflectLE","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : Preorder α\ninst✝² : (i : ι) → Preorder (β i)\ninst✝¹ : (i : ι) → SMulZeroClass α (β i)\ninst✝ : ∀ (i : ι), SMulPosReflectLE α (β i)\n⊢ SMulPosReflectLE α ((i : ι) → β i)","decl":"instance instSMulPosReflectLE [∀ i, SMulPosReflectLE α (β i)] : SMulPosReflectLE α (∀ i, β i) where\n  elim _b hb _a₁ _a₂ h := by\n    obtain ⟨-, i, hi⟩ := lt_def.1 hb; exact le_of_smul_le_smul_right (h _) hi\n\n"}
{"name":"Pi.instPosSMulStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁵ : Zero α\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : PartialOrder α\ninst✝² : (i : ι) → PartialOrder (β i)\ninst✝¹ : (i : ι) → SMulWithZero α (β i)\ninst✝ : ∀ (i : ι), PosSMulStrictMono α (β i)\n⊢ PosSMulStrictMono α ((i : ι) → β i)","decl":"instance instPosSMulStrictMono [∀ i, PosSMulStrictMono α (β i)] :\n    PosSMulStrictMono α (∀ i, β i) where\n  elim := by\n    simp_rw [lt_def]\n    rintro _a ha _b₁ _b₂ ⟨hb, i, hi⟩\n    exact ⟨smul_le_smul_of_nonneg_left hb ha.le, i, smul_lt_smul_of_pos_left hi ha⟩\n\n"}
{"name":"Pi.instSMulPosStrictMono","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁵ : Zero α\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : PartialOrder α\ninst✝² : (i : ι) → PartialOrder (β i)\ninst✝¹ : (i : ι) → SMulWithZero α (β i)\ninst✝ : ∀ (i : ι), SMulPosStrictMono α (β i)\n⊢ SMulPosStrictMono α ((i : ι) → β i)","decl":"instance instSMulPosStrictMono [∀ i, SMulPosStrictMono α (β i)] :\n    SMulPosStrictMono α (∀ i, β i) where\n  elim := by\n    simp_rw [lt_def]\n    rintro a ⟨ha, i, hi⟩ _b₁ _b₂ hb\n    exact ⟨smul_le_smul_of_nonneg_right hb.le ha, i, smul_lt_smul_of_pos_right hb hi⟩\n\n-- Note: There is no interesting instance for `PosSMulReflectLT α (∀ i, β i)` that's not already\n-- implied by the other instances\n\n"}
{"name":"Pi.instSMulPosReflectLT","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nι : Type u_3\nβ : ι → Type u_4\ninst✝⁵ : Zero α\ninst✝⁴ : (i : ι) → Zero (β i)\ninst✝³ : PartialOrder α\ninst✝² : (i : ι) → PartialOrder (β i)\ninst✝¹ : (i : ι) → SMulWithZero α (β i)\ninst✝ : ∀ (i : ι), SMulPosReflectLT α (β i)\n⊢ SMulPosReflectLT α ((i : ι) → β i)","decl":"instance instSMulPosReflectLT [∀ i, SMulPosReflectLT α (β i)] : SMulPosReflectLT α (∀ i, β i) where\n  elim := by\n    simp_rw [lt_def]\n    rintro b hb _a₁ _a₂ ⟨-, i, hi⟩\n    exact lt_of_smul_lt_smul_right hi <| hb _\n\n"}
{"name":"PosSMulMono.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : Preorder γ\ninst✝³ : SMul α β\ninst✝² : SMul α γ\nf : β → γ\ninst✝¹ : Zero α\ninst✝ : PosSMulMono α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\n⊢ PosSMulMono α β","decl":"lemma PosSMulMono.lift [PosSMulMono α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b) : PosSMulMono α β where\n  elim a ha b₁ b₂ hb := by simp only [← hf, smul] at *; exact smul_le_smul_of_nonneg_left hb ha\n\n"}
{"name":"PosSMulStrictMono.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : Preorder γ\ninst✝³ : SMul α β\ninst✝² : SMul α γ\nf : β → γ\ninst✝¹ : Zero α\ninst✝ : PosSMulStrictMono α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\n⊢ PosSMulStrictMono α β","decl":"lemma PosSMulStrictMono.lift [PosSMulStrictMono α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b) : PosSMulStrictMono α β where\n  elim a ha b₁ b₂ hb := by\n    simp only [← lt_iff_lt_of_le_iff_le' hf hf, smul] at *; exact smul_lt_smul_of_pos_left hb ha\n\n"}
{"name":"PosSMulReflectLE.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : Preorder γ\ninst✝³ : SMul α β\ninst✝² : SMul α γ\nf : β → γ\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLE α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\n⊢ PosSMulReflectLE α β","decl":"lemma PosSMulReflectLE.lift [PosSMulReflectLE α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b) : PosSMulReflectLE α β where\n  elim a ha b₁ b₂ h := hf.1 <| le_of_smul_le_smul_left (by simpa only [smul] using hf.2 h) ha\n\n"}
{"name":"PosSMulReflectLT.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁶ : Preorder α\ninst✝⁵ : Preorder β\ninst✝⁴ : Preorder γ\ninst✝³ : SMul α β\ninst✝² : SMul α γ\nf : β → γ\ninst✝¹ : Zero α\ninst✝ : PosSMulReflectLT α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\n⊢ PosSMulReflectLT α β","decl":"lemma PosSMulReflectLT.lift [PosSMulReflectLT α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b) : PosSMulReflectLT α β where\n  elim a ha b₁ b₂ h := by\n    simp only [← lt_iff_lt_of_le_iff_le' hf hf, smul] at *; exact lt_of_smul_lt_smul_left h ha\n\n"}
{"name":"SMulPosMono.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁷ : Preorder α\ninst✝⁶ : Preorder β\ninst✝⁵ : Preorder γ\ninst✝⁴ : SMul α β\ninst✝³ : SMul α γ\nf : β → γ\ninst✝² : Zero β\ninst✝¹ : Zero γ\ninst✝ : SMulPosMono α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\nzero : Eq (f 0) 0\n⊢ SMulPosMono α β","decl":"lemma SMulPosMono.lift [SMulPosMono α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b)\n    (zero : f 0 = 0) : SMulPosMono α β where\n  elim b hb a₁ a₂ ha := by\n    simp only [← hf, zero, smul] at *; exact smul_le_smul_of_nonneg_right ha hb\n\n"}
{"name":"SMulPosStrictMono.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁷ : Preorder α\ninst✝⁶ : Preorder β\ninst✝⁵ : Preorder γ\ninst✝⁴ : SMul α β\ninst✝³ : SMul α γ\nf : β → γ\ninst✝² : Zero β\ninst✝¹ : Zero γ\ninst✝ : SMulPosStrictMono α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\nzero : Eq (f 0) 0\n⊢ SMulPosStrictMono α β","decl":"lemma SMulPosStrictMono.lift [SMulPosStrictMono α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b)\n    (zero : f 0 = 0) : SMulPosStrictMono α β where\n  elim b hb a₁ a₂ ha := by\n    simp only [← lt_iff_lt_of_le_iff_le' hf hf, zero, smul] at *\n    exact smul_lt_smul_of_pos_right ha hb\n\n"}
{"name":"SMulPosReflectLE.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁷ : Preorder α\ninst✝⁶ : Preorder β\ninst✝⁵ : Preorder γ\ninst✝⁴ : SMul α β\ninst✝³ : SMul α γ\nf : β → γ\ninst✝² : Zero β\ninst✝¹ : Zero γ\ninst✝ : SMulPosReflectLE α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\nzero : Eq (f 0) 0\n⊢ SMulPosReflectLE α β","decl":"lemma SMulPosReflectLE.lift [SMulPosReflectLE α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b)\n    (zero : f 0 = 0) : SMulPosReflectLE α β where\n  elim b hb a₁ a₂ h := by\n    simp only [← hf, ← lt_iff_lt_of_le_iff_le' hf hf, zero, smul] at *\n    exact le_of_smul_le_smul_right h hb\n\n"}
{"name":"SMulPosReflectLT.lift","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁷ : Preorder α\ninst✝⁶ : Preorder β\ninst✝⁵ : Preorder γ\ninst✝⁴ : SMul α β\ninst✝³ : SMul α γ\nf : β → γ\ninst✝² : Zero β\ninst✝¹ : Zero γ\ninst✝ : SMulPosReflectLT α γ\nhf : ∀ {b₁ b₂ : β}, Iff (LE.le (f b₁) (f b₂)) (LE.le b₁ b₂)\nsmul : ∀ (a : α) (b : β), Eq (f (HSMul.hSMul a b)) (HSMul.hSMul a (f b))\nzero : Eq (f 0) 0\n⊢ SMulPosReflectLT α β","decl":"lemma SMulPosReflectLT.lift [SMulPosReflectLT α γ]\n    (hf : ∀ {b₁ b₂}, f b₁ ≤ f b₂ ↔ b₁ ≤ b₂)\n    (smul : ∀ (a : α) b, f (a • b) = a • f b)\n    (zero : f 0 = 0) : SMulPosReflectLT α β where\n  elim b hb a₁ a₂ h := by\n    simp only [← hf, ← lt_iff_lt_of_le_iff_le' hf hf, zero, smul] at *\n    exact lt_of_smul_lt_smul_right h hb\n\n"}
{"name":"OrderedSemiring.toPosSMulMonoNat","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝ : OrderedSemiring α\n⊢ PosSMulMono Nat α","decl":"instance OrderedSemiring.toPosSMulMonoNat [OrderedSemiring α] : PosSMulMono ℕ α where\n  elim _n _ _a _b hab := nsmul_le_nsmul_right hab _\n\n"}
{"name":"OrderedSemiring.toSMulPosMonoNat","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝ : OrderedSemiring α\n⊢ SMulPosMono Nat α","decl":"instance OrderedSemiring.toSMulPosMonoNat [OrderedSemiring α] : SMulPosMono ℕ α where\n  elim _a ha _m _n hmn := nsmul_le_nsmul_left ha hmn\n\n"}
{"name":"StrictOrderedSemiring.toPosSMulStrictMonoNat","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝ : StrictOrderedSemiring α\n⊢ PosSMulStrictMono Nat α","decl":"instance StrictOrderedSemiring.toPosSMulStrictMonoNat [StrictOrderedSemiring α] :\n    PosSMulStrictMono ℕ α where\n  elim _n hn _a _b hab := nsmul_right_strictMono hn.ne' hab\n\n"}
{"name":"StrictOrderedSemiring.toSMulPosStrictMonoNat","module":"Mathlib.Algebra.Order.Module.Defs","initialProofState":"α : Type u_1\ninst✝ : StrictOrderedSemiring α\n⊢ SMulPosStrictMono Nat α","decl":"instance StrictOrderedSemiring.toSMulPosStrictMonoNat [StrictOrderedSemiring α] :\n    SMulPosStrictMono ℕ α where\n  elim _a ha _m _n hmn := nsmul_lt_nsmul_left ha hmn\n\n"}
