{"name":"TopologicalSpace.exists_isInducing_l_infty","module":"Mathlib.Topology.Metrizable.Urysohn","initialProofState":"X : Type u_1\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : RegularSpace X\ninst‚úù : SecondCountableTopology X\n‚ä¢ Exists fun f => Topology.IsInducing f","decl":"/-- For a regular topological space with second countable topology,\nthere exists an inducing map to `l^‚àû = ‚Ñï ‚Üí·µá ‚Ñù`. -/\ntheorem exists_isInducing_l_infty : ‚àÉ f : X ‚Üí ‚Ñï ‚Üí·µá ‚Ñù, IsInducing f := by\n  -- Choose a countable basis, and consider the set `s` of pairs of set `(U, V)` such that `U ‚àà B`,\n  -- `V ‚àà B`, and `closure U ‚äÜ V`.\n  rcases exists_countable_basis X with ‚ü®B, hBc, -, hB‚ü©\n  let s : Set (Set X √ó Set X) := { UV ‚àà B √óÀ¢ B | closure UV.1 ‚äÜ UV.2 }\n  -- `s` is a countable set.\n  haveI : Encodable s := ((hBc.prod hBc).mono inter_subset_left).toEncodable\n  -- We don't have the space of bounded (possibly discontinuous) functions, so we equip `s`\n  -- with the discrete topology and deal with `s ‚Üí·µá ‚Ñù` instead.\n  letI : TopologicalSpace s := ‚ä•\n  haveI : DiscreteTopology s := ‚ü®rfl‚ü©\n  rsuffices ‚ü®f, hf‚ü© : ‚àÉ f : X ‚Üí s ‚Üí·µá ‚Ñù, IsInducing f\n  ¬∑ exact ‚ü®fun x => (f x).extend (Encodable.encode' s) 0,\n      (BoundedContinuousFunction.isometry_extend (Encodable.encode' s)\n        (0 : ‚Ñï ‚Üí·µá ‚Ñù)).isEmbedding.isInducing.comp hf‚ü©\n  have hd : ‚àÄ UV : s, Disjoint (closure UV.1.1) UV.1.2·∂ú :=\n    fun UV => disjoint_compl_right.mono_right (compl_subset_compl.2 UV.2.2)\n  -- Choose a sequence of `Œµ‚Çô > 0`, `n : s`, that is bounded above by `1` and tends to zero\n  -- along the `cofinite` filter.\n  obtain ‚ü®Œµ, Œµ01, hŒµ‚ü© : ‚àÉ Œµ : s ‚Üí ‚Ñù, (‚àÄ UV, Œµ UV ‚àà Ioc (0 : ‚Ñù) 1) ‚àß Tendsto Œµ cofinite (ùìù 0) := by\n    rcases posSumOfEncodable zero_lt_one s with ‚ü®Œµ, Œµ0, c, hŒµc, hc1‚ü©\n    refine ‚ü®Œµ, fun UV => ‚ü®Œµ0 UV, ?_‚ü©, hŒµc.summable.tendsto_cofinite_zero‚ü©\n    exact (le_hasSum hŒµc UV fun _ _ => (Œµ0 _).le).trans hc1\n  /- For each `UV = (U, V) ‚àà s` we use Urysohn's lemma to choose a function `f UV` that is equal to\n    zero on `U` and is equal to `Œµ UV` on the complement to `V`. -/\n  have : ‚àÄ UV : s, ‚àÉ f : C(X, ‚Ñù),\n      EqOn f 0 UV.1.1 ‚àß EqOn f (fun _ => Œµ UV) UV.1.2·∂ú ‚àß ‚àÄ x, f x ‚àà Icc 0 (Œµ UV) := by\n    intro UV\n    rcases exists_continuous_zero_one_of_isClosed isClosed_closure\n        (hB.isOpen UV.2.1.2).isClosed_compl (hd UV) with\n      ‚ü®f, hf‚ÇÄ, hf‚ÇÅ, hf01‚ü©\n    exact ‚ü®Œµ UV ‚Ä¢ f, fun x hx => by simp [hf‚ÇÄ (subset_closure hx)], fun x hx => by simp [hf‚ÇÅ hx],\n      fun x => ‚ü®mul_nonneg (Œµ01 _).1.le (hf01 _).1, mul_le_of_le_one_right (Œµ01 _).1.le (hf01 _).2‚ü©‚ü©\n  choose f hf0 hfŒµ hf0Œµ using this\n  have hf01 : ‚àÄ UV x, f UV x ‚àà Icc (0 : ‚Ñù) 1 :=\n    fun UV x => Icc_subset_Icc_right (Œµ01 _).2 (hf0Œµ _ _)\n  -- The embedding is given by `F x UV = f UV x`.\n  set F : X ‚Üí s ‚Üí·µá ‚Ñù := fun x =>\n    ‚ü®‚ü®fun UV => f UV x, continuous_of_discreteTopology‚ü©, 1,\n      fun UV‚ÇÅ UV‚ÇÇ => Real.dist_le_of_mem_Icc_01 (hf01 _ _) (hf01 _ _)‚ü©\n  have hF : ‚àÄ x UV, F x UV = f UV x := fun _ _ => rfl\n  refine ‚ü®F, isInducing_iff_nhds.2 fun x => le_antisymm ?_ ?_‚ü©\n  ¬∑ /- First we prove that `F` is continuous. Given `Œ¥ > 0`, consider the set `T` of `(U, V) ‚àà s`\n    such that `Œµ (U, V) ‚â• Œ¥`. Since `Œµ` tends to zero, `T` is finite. Since each `f` is continuous,\n    we can choose a neighborhood such that `dist (F y (U, V)) (F x (U, V)) ‚â§ Œ¥` for any\n    `(U, V) ‚àà T`. For `(U, V) ‚àâ T`, the same inequality is true because both `F y (U, V)` and\n    `F x (U, V)` belong to the interval `[0, Œµ (U, V)]`. -/\n    refine (nhds_basis_closedBall.comap _).ge_iff.2 fun Œ¥ Œ¥0 => ?_\n    have h_fin : { UV : s | Œ¥ ‚â§ Œµ UV }.Finite := by simpa only [‚Üê not_lt] using hŒµ (gt_mem_nhds Œ¥0)\n    have : ‚àÄ·∂† y in ùìù x, ‚àÄ UV, Œ¥ ‚â§ Œµ UV ‚Üí dist (F y UV) (F x UV) ‚â§ Œ¥ := by\n      refine (eventually_all_finite h_fin).2 fun UV _ => ?_\n      exact (f UV).continuous.tendsto x (closedBall_mem_nhds _ Œ¥0)\n    refine this.mono fun y hy => (BoundedContinuousFunction.dist_le Œ¥0.le).2 fun UV => ?_\n    rcases le_total Œ¥ (Œµ UV) with hle | hle\n    exacts [hy _ hle, (Real.dist_le_of_mem_Icc (hf0Œµ _ _) (hf0Œµ _ _)).trans (by rwa [sub_zero])]\n  ¬∑ /- Finally, we prove that each neighborhood `V` of `x : X`\n    includes a preimage of a neighborhood of `F x` under `F`.\n    Without loss of generality, `V` belongs to `B`.\n    Choose `U ‚àà B` such that `x ‚àà V` and `closure V ‚äÜ U`.\n    Then the preimage of the `(Œµ (U, V))`-neighborhood of `F x` is included by `V`. -/\n    refine ((nhds_basis_ball.comap _).le_basis_iff hB.nhds_hasBasis).2 ?_\n    rintro V ‚ü®hVB, hxV‚ü©\n    rcases hB.exists_closure_subset (hB.mem_nhds hVB hxV) with ‚ü®U, hUB, hxU, hUV‚ü©\n    set UV : ‚Ü•s := ‚ü®(U, V), ‚ü®hUB, hVB‚ü©, hUV‚ü©\n    refine ‚ü®Œµ UV, (Œµ01 UV).1, fun y (hy : dist (F y) (F x) < Œµ UV) => ?_‚ü©\n    replace hy : dist (F y UV) (F x UV) < Œµ UV :=\n      (BoundedContinuousFunction.dist_coe_le_dist _).trans_lt hy\n    contrapose! hy\n    rw [hF, hF, hfŒµ UV hy, hf0 UV hxU, Pi.zero_apply, dist_zero_right]\n    exact le_abs_self _\n\n"}
{"name":"TopologicalSpace.exists_inducing_l_infty","module":"Mathlib.Topology.Metrizable.Urysohn","initialProofState":"X : Type u_1\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : RegularSpace X\ninst‚úù : SecondCountableTopology X\n‚ä¢ Exists fun f => Topology.IsInducing f","decl":"@[deprecated (since := \"2024-10-28\")] alias exists_inducing_l_infty := exists_isInducing_l_infty\n\n"}
{"name":"TopologicalSpace.PseudoMetrizableSpace.of_regularSpace_secondCountableTopology","module":"Mathlib.Topology.Metrizable.Urysohn","initialProofState":"X : Type u_1\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : RegularSpace X\ninst‚úù : SecondCountableTopology X\n‚ä¢ TopologicalSpace.PseudoMetrizableSpace X","decl":"/-- *Urysohn's metrization theorem* (Tychonoff's version):\na regular topological space with second countable topology `X` is metrizable,\ni.e., there exists a pseudometric space structure that generates the same topology. -/\ninstance (priority := 90) PseudoMetrizableSpace.of_regularSpace_secondCountableTopology :\n    PseudoMetrizableSpace X :=\n  let ‚ü®_, hf‚ü© := exists_isInducing_l_infty X\n  hf.pseudoMetrizableSpace\n\n"}
{"name":"TopologicalSpace.exists_embedding_l_infty","module":"Mathlib.Topology.Metrizable.Urysohn","initialProofState":"X : Type u_1\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : T3Space X\ninst‚úù : SecondCountableTopology X\n‚ä¢ Exists fun f => Topology.IsEmbedding f","decl":"/-- A T‚ÇÉ topological space with second countable topology can be embedded into `l^‚àû = ‚Ñï ‚Üí·µá ‚Ñù`. -/\ntheorem exists_embedding_l_infty : ‚àÉ f : X ‚Üí ‚Ñï ‚Üí·µá ‚Ñù, IsEmbedding f :=\n  let ‚ü®f, hf‚ü© := exists_isInducing_l_infty X; ‚ü®f, hf.isEmbedding‚ü©\n\n"}
{"name":"TopologicalSpace.metrizableSpace_of_t3_secondCountable","module":"Mathlib.Topology.Metrizable.Urysohn","initialProofState":"X : Type u_1\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : T3Space X\ninst‚úù : SecondCountableTopology X\n‚ä¢ TopologicalSpace.MetrizableSpace X","decl":"/-- *Urysohn's metrization theorem* (Tychonoff's version): a T‚ÇÉ topological space with second\ncountable topology `X` is metrizable, i.e., there exists a metric space structure that generates the\nsame topology. -/\ninstance (priority := 90) metrizableSpace_of_t3_secondCountable : MetrizableSpace X :=\n  let ‚ü®_, hf‚ü© := exists_embedding_l_infty X\n  hf.metrizableSpace\n\n-- The `alias` command creates a definition, triggering the defLemma linter.\n"}
{"name":"TopologicalSpace.metrizableSpace_of_t3_second_countable","module":"Mathlib.Topology.Metrizable.Urysohn","initialProofState":"X : Type u_1\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : T3Space X\ninst‚úù : SecondCountableTopology X\n‚ä¢ TopologicalSpace.MetrizableSpace X","decl":"@[nolint defLemma, deprecated (since := \"2024-11-13\")] alias\nmetrizableSpace_of_t3_second_countable := metrizableSpace_of_t3_secondCountable\n\n"}
