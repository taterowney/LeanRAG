{"name":"Int.isLeast_coe_leastOfBdd","module":"Mathlib.Data.Int.LeastGreatest","initialProofState":"P : Int → Prop\ninst✝ : DecidablePred P\nb : Int\nHb : ∀ (z : Int), P z → LE.le b z\nHinh : Exists fun z => P z\n⊢ IsLeast (setOf fun z => P z) ↑(b.leastOfBdd Hb Hinh)","decl":"/-- `Int.leastOfBdd` is the least integer satisfying a predicate which is false for all `z : ℤ` with\n`z < b` for some fixed `b : ℤ`. -/\nlemma isLeast_coe_leastOfBdd {P : ℤ → Prop} [DecidablePred P] (b : ℤ) (Hb : ∀ z : ℤ, P z → b ≤ z)\n    (Hinh : ∃ z : ℤ, P z) : IsLeast {z | P z} (leastOfBdd b Hb Hinh : ℤ) :=\n  (leastOfBdd b Hb Hinh).2\n\n"}
{"name":"Int.exists_least_of_bdd","module":"Mathlib.Data.Int.LeastGreatest","initialProofState":"P : Int → Prop\nHbdd : Exists fun b => ∀ (z : Int), P z → LE.le b z\nHinh : Exists fun z => P z\n⊢ Exists fun lb => And (P lb) (∀ (z : Int), P z → LE.le lb z)","decl":"/--\n    If `P : ℤ → Prop` is a predicate such that the set `{m : P m}` is bounded below and nonempty,\n    then this set has the least element. This lemma uses classical logic to avoid assumption\n    `[DecidablePred P]`. See `Int.leastOfBdd` for a constructive counterpart. -/\ntheorem exists_least_of_bdd\n    {P : ℤ → Prop}\n    (Hbdd : ∃ b : ℤ , ∀ z : ℤ , P z → b ≤ z)\n    (Hinh : ∃ z : ℤ , P z) : ∃ lb : ℤ , P lb ∧ ∀ z : ℤ , P z → lb ≤ z := by\n  classical\n  let ⟨b , Hb⟩ := Hbdd\n  let ⟨lb , H⟩ := leastOfBdd b Hb Hinh\n  exact ⟨lb , H⟩\n\n"}
{"name":"Int.coe_leastOfBdd_eq","module":"Mathlib.Data.Int.LeastGreatest","initialProofState":"P : Int → Prop\ninst✝ : DecidablePred P\nb b' : Int\nHb : ∀ (z : Int), P z → LE.le b z\nHb' : ∀ (z : Int), P z → LE.le b' z\nHinh : Exists fun z => P z\n⊢ Eq ↑(b.leastOfBdd Hb Hinh) ↑(b'.leastOfBdd Hb' Hinh)","decl":"theorem coe_leastOfBdd_eq {P : ℤ → Prop} [DecidablePred P] {b b' : ℤ} (Hb : ∀ z : ℤ, P z → b ≤ z)\n    (Hb' : ∀ z : ℤ, P z → b' ≤ z) (Hinh : ∃ z : ℤ, P z) :\n    (leastOfBdd b Hb Hinh : ℤ) = leastOfBdd b' Hb' Hinh := by\n  rcases leastOfBdd b Hb Hinh with ⟨n, hn, h2n⟩\n  rcases leastOfBdd b' Hb' Hinh with ⟨n', hn', h2n'⟩\n  exact le_antisymm (h2n _ hn') (h2n' _ hn)\n\n"}
{"name":"Int.isGreatest_coe_greatestOfBdd","module":"Mathlib.Data.Int.LeastGreatest","initialProofState":"P : Int → Prop\ninst✝ : DecidablePred P\nb : Int\nHb : ∀ (z : Int), P z → LE.le z b\nHinh : Exists fun z => P z\n⊢ IsGreatest (setOf fun z => P z) ↑(b.greatestOfBdd Hb Hinh)","decl":"/-- `Int.greatestOfBdd` is the greatest integer satisfying a predicate which is false for all\n`z : ℤ` with `b < z` for some fixed `b : ℤ`. -/\nlemma isGreatest_coe_greatestOfBdd {P : ℤ → Prop} [DecidablePred P] (b : ℤ)\n    (Hb : ∀ z : ℤ, P z → z ≤ b) (Hinh : ∃ z : ℤ, P z) :\n    IsGreatest {z | P z} (greatestOfBdd b Hb Hinh : ℤ) :=\n  (greatestOfBdd b Hb Hinh).2\n\n"}
{"name":"Int.exists_greatest_of_bdd","module":"Mathlib.Data.Int.LeastGreatest","initialProofState":"P : Int → Prop\nHbdd : Exists fun b => ∀ (z : Int), P z → LE.le z b\nHinh : Exists fun z => P z\n⊢ Exists fun ub => And (P ub) (∀ (z : Int), P z → LE.le z ub)","decl":"/--\n    If `P : ℤ → Prop` is a predicate such that the set `{m : P m}` is bounded above and nonempty,\n    then this set has the greatest element. This lemma uses classical logic to avoid assumption\n    `[DecidablePred P]`. See `Int.greatestOfBdd` for a constructive counterpart. -/\ntheorem exists_greatest_of_bdd\n    {P : ℤ → Prop}\n    (Hbdd : ∃ b : ℤ , ∀ z : ℤ , P z → z ≤ b)\n    (Hinh : ∃ z : ℤ , P z) : ∃ ub : ℤ , P ub ∧ ∀ z : ℤ , P z → z ≤ ub := by\n  classical\n  let ⟨b, Hb⟩ := Hbdd\n  let ⟨lb, H⟩ := greatestOfBdd b Hb Hinh\n  exact ⟨lb, H⟩\n\n"}
{"name":"Int.coe_greatestOfBdd_eq","module":"Mathlib.Data.Int.LeastGreatest","initialProofState":"P : Int → Prop\ninst✝ : DecidablePred P\nb b' : Int\nHb : ∀ (z : Int), P z → LE.le z b\nHb' : ∀ (z : Int), P z → LE.le z b'\nHinh : Exists fun z => P z\n⊢ Eq ↑(b.greatestOfBdd Hb Hinh) ↑(b'.greatestOfBdd Hb' Hinh)","decl":"theorem coe_greatestOfBdd_eq {P : ℤ → Prop} [DecidablePred P] {b b' : ℤ}\n    (Hb : ∀ z : ℤ, P z → z ≤ b) (Hb' : ∀ z : ℤ, P z → z ≤ b') (Hinh : ∃ z : ℤ, P z) :\n    (greatestOfBdd b Hb Hinh : ℤ) = greatestOfBdd b' Hb' Hinh := by\n  rcases greatestOfBdd b Hb Hinh with ⟨n, hn, h2n⟩\n  rcases greatestOfBdd b' Hb' Hinh with ⟨n', hn', h2n'⟩\n  exact le_antisymm (h2n' _ hn) (h2n _ hn')\n\n"}
