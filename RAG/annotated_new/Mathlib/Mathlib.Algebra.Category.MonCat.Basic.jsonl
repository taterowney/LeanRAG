{"name":"AddMonCat.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier : Type u\nstr : AddMonoid carrier\n‚ä¢ Eq (SizeOf.sizeOf (AddMonCat.mk carrier)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf carrier)) (SizeOf.sizeOf str))","decl":"/-- The category of additive groups and group morphisms. -/\nstructure AddMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : AddMonoid carrier]\n\n"}
{"name":"AddMonCat.mk.injEq","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : AddMonoid carrier‚úù\ncarrier : Type u\nstr : AddMonoid carrier\n‚ä¢ Eq (Eq (AddMonCat.mk carrier‚úù) (AddMonCat.mk carrier)) (And (Eq carrier‚úù carrier) (HEq str‚úù str))","decl":"/-- The category of additive groups and group morphisms. -/\nstructure AddMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : AddMonoid carrier]\n\n"}
{"name":"AddMonCat.mk.inj","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : AddMonoid carrier‚úù\ncarrier : Type u\nstr : AddMonoid carrier\nx‚úù : Eq (AddMonCat.mk carrier‚úù) (AddMonCat.mk carrier)\n‚ä¢ And (Eq carrier‚úù carrier) (HEq str‚úù str)","decl":"/-- The category of additive groups and group morphisms. -/\nstructure AddMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : AddMonoid carrier]\n\n"}
{"name":"MonCat.mk.inj","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : Monoid carrier‚úù\ncarrier : Type u\nstr : Monoid carrier\nx‚úù : Eq (MonCat.mk carrier‚úù) (MonCat.mk carrier)\n‚ä¢ And (Eq carrier‚úù carrier) (HEq str‚úù str)","decl":"/-- The category of groups and group morphisms. -/\n@[to_additive AddMonCat]\nstructure MonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : Monoid carrier]\n\n"}
{"name":"MonCat.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier : Type u\nstr : Monoid carrier\n‚ä¢ Eq (SizeOf.sizeOf (MonCat.mk carrier)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf carrier)) (SizeOf.sizeOf str))","decl":"/-- The category of groups and group morphisms. -/\n@[to_additive AddMonCat]\nstructure MonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : Monoid carrier]\n\n"}
{"name":"MonCat.mk.injEq","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : Monoid carrier‚úù\ncarrier : Type u\nstr : Monoid carrier\n‚ä¢ Eq (Eq (MonCat.mk carrier‚úù) (MonCat.mk carrier)) (And (Eq carrier‚úù carrier) (HEq str‚úù str))","decl":"/-- The category of groups and group morphisms. -/\n@[to_additive AddMonCat]\nstructure MonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : Monoid carrier]\n\n"}
{"name":"AddMonCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : AddMonCat\nx y : A.Hom B\n‚ä¢ Iff (Eq x y) (Eq x.hom' y.hom')","decl":"/-- The type of morphisms in `AddMonCat R`. -/\n@[ext]\nstructure AddMonCat.Hom (A B : AddMonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí+ B\n\n"}
{"name":"AddMonCat.Hom.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : AddMonCat\nx y : A.Hom B\nhom' : Eq x.hom' y.hom'\n‚ä¢ Eq x y","decl":"/-- The type of morphisms in `AddMonCat R`. -/\n@[ext]\nstructure AddMonCat.Hom (A B : AddMonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí+ B\n\n"}
{"name":"MonCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : MonCat\nx y : A.Hom B\n‚ä¢ Iff (Eq x y) (Eq x.hom' y.hom')","decl":"/-- The type of morphisms in `MonCat R`. -/\n@[to_additive, ext]\nstructure MonCat.Hom (A B : MonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí* B\n\n"}
{"name":"MonCat.Hom.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : MonCat\nx y : A.Hom B\nhom' : Eq x.hom' y.hom'\n‚ä¢ Eq x y","decl":"/-- The type of morphisms in `MonCat R`. -/\n@[to_additive, ext]\nstructure MonCat.Hom (A B : MonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí* B\n\n"}
{"name":"AddMonCat.coe_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : AddMonCat\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id X))) id","decl":"@[to_additive (attr := simp)]\nlemma coe_id {X : MonCat} : (ùüô X : X ‚Üí X) = id := rfl\n\n"}
{"name":"MonCat.coe_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : MonCat\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id X))) id","decl":"@[to_additive (attr := simp)]\nlemma coe_id {X : MonCat} : (ùüô X : X ‚Üí X) = id := rfl\n\n"}
{"name":"MonCat.coe_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y Z : MonCat\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g))) (Function.comp ‚áë(CategoryTheory.ConcreteCategory.hom g) ‚áë(CategoryTheory.ConcreteCategory.hom f))","decl":"@[to_additive (attr := simp)]\nlemma coe_comp {X Y Z : MonCat} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl\n\n"}
{"name":"AddMonCat.coe_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y Z : AddMonCat\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g))) (Function.comp ‚áë(CategoryTheory.ConcreteCategory.hom g) ‚áë(CategoryTheory.ConcreteCategory.hom f))","decl":"@[to_additive (attr := simp)]\nlemma coe_comp {X Y Z : MonCat} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl\n\n"}
{"name":"MonCat.forget_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : MonCat\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget MonCat).map f) ‚áë(CategoryTheory.ConcreteCategory.hom f)","decl":"@[to_additive (attr := simp)]\nlemma forget_map {X Y : MonCat} (f : X ‚ü∂ Y) :\n    (forget MonCat).map f = f := rfl\n\n"}
{"name":"AddMonCat.forget_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddMonCat\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget AddMonCat).map f) ‚áë(CategoryTheory.ConcreteCategory.hom f)","decl":"@[to_additive (attr := simp)]\nlemma forget_map {X Y : MonCat} (f : X ‚ü∂ Y) :\n    (forget MonCat).map f = f := rfl\n\n"}
{"name":"MonCat.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : MonCat\nf g : Quiver.Hom X Y\nw : ‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : MonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"AddMonCat.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddMonCat\nf g : Quiver.Hom X Y\n‚ä¢ Iff (Eq f g) (‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x))","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : MonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"MonCat.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : MonCat\nf g : Quiver.Hom X Y\n‚ä¢ Iff (Eq f g) (‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x))","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : MonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"AddMonCat.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddMonCat\nf g : Quiver.Hom X Y\nw : ‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : MonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"MonCat.coe_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : Type u\ninst‚úù : Monoid M\n‚ä¢ Eq (‚Üë(MonCat.of M)) M","decl":"@[to_additive]\n-- This is not `simp` to avoid rewriting in types of terms.\ntheorem coe_of (M : Type u) [Monoid M] : (MonCat.of M : Type u) = M := rfl\n\n"}
{"name":"AddMonCat.coe_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\n‚ä¢ Eq (‚Üë(AddMonCat.of M)) M","decl":"@[to_additive]\n-- This is not `simp` to avoid rewriting in types of terms.\ntheorem coe_of (M : Type u) [Monoid M] : (MonCat.of M : Type u) = M := rfl\n\n"}
{"name":"MonCat.hom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : MonCat\n‚ä¢ Eq (MonCat.Hom.hom (CategoryTheory.CategoryStruct.id M)) (MonoidHom.id ‚ÜëM)","decl":"@[to_additive (attr := simp)]\nlemma hom_id {M : MonCat} : (ùüô M : M ‚ü∂ M).hom = MonoidHom.id M := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AddMonCat.hom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : AddMonCat\n‚ä¢ Eq (AddMonCat.Hom.hom (CategoryTheory.CategoryStruct.id M)) (AddMonoidHom.id ‚ÜëM)","decl":"@[to_additive (attr := simp)]\nlemma hom_id {M : MonCat} : (ùüô M : M ‚ü∂ M).hom = MonoidHom.id M := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"MonCat.id_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : MonCat\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id M)) x) x","decl":"@[to_additive]\nlemma id_apply (M : MonCat) (x : M) :\n    (ùüô M : M ‚ü∂ M) x = x := by simp\n\n"}
{"name":"AddMonCat.id_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : AddMonCat\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id M)) x) x","decl":"@[to_additive]\nlemma id_apply (M : MonCat) (x : M) :\n    (ùüô M : M ‚ü∂ M) x = x := by simp\n\n"}
{"name":"AddMonCat.hom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : AddMonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\n‚ä¢ Eq (AddMonCat.Hom.hom (CategoryTheory.CategoryStruct.comp f g)) ((AddMonCat.Hom.hom g).comp (AddMonCat.Hom.hom f))","decl":"@[to_additive (attr := simp)]\nlemma hom_comp {M N T : MonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) :\n    (f ‚â´ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"MonCat.hom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : MonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\n‚ä¢ Eq (MonCat.Hom.hom (CategoryTheory.CategoryStruct.comp f g)) ((MonCat.Hom.hom g).comp (MonCat.Hom.hom f))","decl":"@[to_additive (attr := simp)]\nlemma hom_comp {M N T : MonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) :\n    (f ‚â´ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AddMonCat.comp_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : AddMonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g)) x) ((CategoryTheory.ConcreteCategory.hom g) ((CategoryTheory.ConcreteCategory.hom f) x))","decl":"@[to_additive]\nlemma comp_apply {M N T : MonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) (x : M) :\n    (f ‚â´ g) x = g (f x) := by simp\n\n"}
{"name":"MonCat.comp_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : MonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g)) x) ((CategoryTheory.ConcreteCategory.hom g) ((CategoryTheory.ConcreteCategory.hom f) x))","decl":"@[to_additive]\nlemma comp_apply {M N T : MonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) (x : M) :\n    (f ‚â´ g) x = g (f x) := by simp\n\n"}
{"name":"AddMonCat.hom_ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddMonCat\nf g : Quiver.Hom M N\n‚ä¢ Iff (Eq f g) (Eq (AddMonCat.Hom.hom f) (AddMonCat.Hom.hom g))","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : MonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"AddMonCat.hom_ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddMonCat\nf g : Quiver.Hom M N\nhf : Eq (AddMonCat.Hom.hom f) (AddMonCat.Hom.hom g)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : MonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"MonCat.hom_ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : MonCat\nf g : Quiver.Hom M N\nhf : Eq (MonCat.Hom.hom f) (MonCat.Hom.hom g)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : MonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"MonCat.hom_ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : MonCat\nf g : Quiver.Hom M N\n‚ä¢ Iff (Eq f g) (Eq (MonCat.Hom.hom f) (MonCat.Hom.hom g))","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : MonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"AddMonCat.hom_ofHom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : Type u\ninst‚úù¬π : AddMonoid M\ninst‚úù : AddMonoid N\nf : AddMonoidHom M N\n‚ä¢ Eq (AddMonCat.Hom.hom (AddMonCat.ofHom f)) f","decl":"@[to_additive (attr := simp)]\nlemma hom_ofHom {M N : Type u} [Monoid M] [Monoid N] (f : M ‚Üí* N) :\n  (ofHom f).hom = f := rfl\n\n"}
{"name":"MonCat.hom_ofHom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : Type u\ninst‚úù¬π : Monoid M\ninst‚úù : Monoid N\nf : MonoidHom M N\n‚ä¢ Eq (MonCat.Hom.hom (MonCat.ofHom f)) f","decl":"@[to_additive (attr := simp)]\nlemma hom_ofHom {M N : Type u} [Monoid M] [Monoid N] (f : M ‚Üí* N) :\n  (ofHom f).hom = f := rfl\n\n"}
{"name":"AddMonCat.ofHom_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddMonCat\nf : Quiver.Hom M N\n‚ä¢ Eq (AddMonCat.ofHom (AddMonCat.Hom.hom f)) f","decl":"@[to_additive (attr := simp)]\nlemma ofHom_hom {M N : MonCat} (f : M ‚ü∂ N) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"MonCat.ofHom_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : MonCat\nf : Quiver.Hom M N\n‚ä¢ Eq (MonCat.ofHom (MonCat.Hom.hom f)) f","decl":"@[to_additive (attr := simp)]\nlemma ofHom_hom {M N : MonCat} (f : M ‚ü∂ N) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"AddMonCat.ofHom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : Type u\ninst‚úù : AddMonoid M\n‚ä¢ Eq (AddMonCat.ofHom (AddMonoidHom.id M)) (CategoryTheory.CategoryStruct.id (AddMonCat.of M))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_id {M : Type u} [Monoid M] : ofHom (MonoidHom.id M) = ùüô (of M) := rfl\n\n"}
{"name":"MonCat.ofHom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : Type u\ninst‚úù : Monoid M\n‚ä¢ Eq (MonCat.ofHom (MonoidHom.id M)) (CategoryTheory.CategoryStruct.id (MonCat.of M))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_id {M : Type u} [Monoid M] : ofHom (MonoidHom.id M) = ùüô (of M) := rfl\n\n"}
{"name":"AddMonCat.ofHom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N P : Type u\ninst‚úù¬≤ : AddMonoid M\ninst‚úù¬π : AddMonoid N\ninst‚úù : AddMonoid P\nf : AddMonoidHom M N\ng : AddMonoidHom N P\n‚ä¢ Eq (AddMonCat.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (AddMonCat.ofHom f) (AddMonCat.ofHom g))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_comp {M N P : Type u} [Monoid M] [Monoid N] [Monoid P]\n    (f : M ‚Üí* N) (g : N ‚Üí* P) :\n    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=\n  rfl\n\n"}
{"name":"MonCat.ofHom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N P : Type u\ninst‚úù¬≤ : Monoid M\ninst‚úù¬π : Monoid N\ninst‚úù : Monoid P\nf : MonoidHom M N\ng : MonoidHom N P\n‚ä¢ Eq (MonCat.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (MonCat.ofHom f) (MonCat.ofHom g))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_comp {M N P : Type u} [Monoid M] [Monoid N] [Monoid P]\n    (f : M ‚Üí* N) (g : N ‚Üí* P) :\n    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=\n  rfl\n\n"}
{"name":"AddMonCat.ofHom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddMonoid X\ninst‚úù : AddMonoid Y\nf : AddMonoidHom X Y\nx : X\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (AddMonCat.ofHom f)) x) (f x)","decl":"@[to_additive]\nlemma ofHom_apply {X Y : Type u} [Monoid X] [Monoid Y] (f : X ‚Üí* Y) (x : X) :\n    (ofHom f) x = f x := rfl\n\n"}
{"name":"MonCat.ofHom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : Monoid X\ninst‚úù : Monoid Y\nf : MonoidHom X Y\nx : X\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (MonCat.ofHom f)) x) (f x)","decl":"@[to_additive]\nlemma ofHom_apply {X Y : Type u} [Monoid X] [Monoid Y] (f : X ‚Üí* Y) (x : X) :\n    (ofHom f) x = f x := rfl\n\n"}
{"name":"MonCat.inv_hom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : MonCat\ne : CategoryTheory.Iso M N\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.inv) ((CategoryTheory.ConcreteCategory.hom e.hom) x)) x","decl":"@[to_additive (attr := simp)]\nlemma inv_hom_apply {M N : MonCat} (e : M ‚âÖ N) (x : M) : e.inv (e.hom x) = x := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"AddMonCat.neg_hom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddMonCat\ne : CategoryTheory.Iso M N\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.inv) ((CategoryTheory.ConcreteCategory.hom e.hom) x)) x","decl":"@[to_additive (attr := simp)]\nlemma inv_hom_apply {M N : MonCat} (e : M ‚âÖ N) (x : M) : e.inv (e.hom x) = x := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"AddMonCat.hom_neg_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddMonCat\ne : CategoryTheory.Iso M N\ns : ‚ÜëN\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.hom) ((CategoryTheory.ConcreteCategory.hom e.inv) s)) s","decl":"@[to_additive (attr := simp)]\nlemma hom_inv_apply {M N : MonCat} (e : M ‚âÖ N) (s : N) : e.hom (e.inv s) = s := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"MonCat.hom_inv_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : MonCat\ne : CategoryTheory.Iso M N\ns : ‚ÜëN\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.hom) ((CategoryTheory.ConcreteCategory.hom e.inv) s)) s","decl":"@[to_additive (attr := simp)]\nlemma hom_inv_apply {M N : MonCat} (e : M ‚âÖ N) (s : N) : e.hom (e.inv s) = s := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"MonCat.hom_one","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : MonCat\n‚ä¢ Eq (MonCat.Hom.hom 1) 1","decl":"@[to_additive (attr := simp)]\nlemma hom_one (X Y : MonCat.{u}) : (1 : X ‚ü∂ Y).hom = 1 := rfl\n\n"}
{"name":"AddMonCat.hom_zero","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddMonCat\n‚ä¢ Eq (AddMonCat.Hom.hom 0) 0","decl":"@[to_additive (attr := simp)]\nlemma hom_one (X Y : MonCat.{u}) : (1 : X ‚ü∂ Y).hom = 1 := rfl\n\n"}
{"name":"AddMonCat.zeroHom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddMonCat\nx : ‚ÜëX\n‚ä¢ Eq ((AddMonCat.Hom.hom 0) x) 0","decl":"@[to_additive]\nlemma oneHom_apply (X Y : MonCat.{u}) (x : X) : (1 : X ‚ü∂ Y).hom x = 1 := rfl\n\n"}
{"name":"MonCat.oneHom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : MonCat\nx : ‚ÜëX\n‚ä¢ Eq ((MonCat.Hom.hom 1) x) 1","decl":"@[to_additive]\nlemma oneHom_apply (X Y : MonCat.{u}) (x : X) : (1 : X ‚ü∂ Y).hom x = 1 := rfl\n\n"}
{"name":"MonCat.one_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A : Type u_1\ninst‚úù : Monoid A\n‚ä¢ Eq 1 1","decl":"@[to_additive (attr := simp)]\nlemma one_of {A : Type*} [Monoid A] : (1 : MonCat.of A) = (1 : A) := rfl\n\n"}
{"name":"AddMonCat.zero_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A : Type u_1\ninst‚úù : AddMonoid A\n‚ä¢ Eq 0 0","decl":"@[to_additive (attr := simp)]\nlemma one_of {A : Type*} [Monoid A] : (1 : MonCat.of A) = (1 : A) := rfl\n\n"}
{"name":"MonCat.mul_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A : Type u_1\ninst‚úù : Monoid A\na b : A\n‚ä¢ Eq (HMul.hMul a b) (HMul.hMul a b)","decl":"@[to_additive (attr := simp)]\nlemma mul_of {A : Type*} [Monoid A] (a b : A) :\n    @HMul.hMul (MonCat.of A) (MonCat.of A) (MonCat.of A) _ a b = a * b := rfl\n\n"}
{"name":"AddMonCat.add_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A : Type u_1\ninst‚úù : AddMonoid A\na b : A\n‚ä¢ Eq (HAdd.hAdd a b) (HAdd.hAdd a b)","decl":"@[to_additive (attr := simp)]\nlemma mul_of {A : Type*} [Monoid A] (a b : A) :\n    @HMul.hMul (MonCat.of A) (MonCat.of A) (MonCat.of A) _ a b = a * b := rfl\n\n"}
{"name":"AddMonCat.uliftFunctor_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"x‚úù¬π x‚úù : AddMonCat\nf : Quiver.Hom x‚úù¬π x‚úù\n‚ä¢ Eq (AddMonCat.uliftFunctor.map f) (AddMonCat.ofHom (AddEquiv.ulift.symm.toAddMonoidHom.comp ((AddMonCat.Hom.hom f).comp AddEquiv.ulift.toAddMonoidHom)))","decl":"/-- Universe lift functor for monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive monoids.\"]\ndef uliftFunctor : MonCat.{v} ‚•§ MonCat.{max v u} where\n  obj X := MonCat.of (ULift.{u, v} X)\n  map {_ _} f := MonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"AddMonCat.uliftFunctor_obj_coe","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : AddMonCat\n‚ä¢ Eq (‚Üë(AddMonCat.uliftFunctor.obj X)) (ULift.{u, v} ‚ÜëX)","decl":"/-- Universe lift functor for monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive monoids.\"]\ndef uliftFunctor : MonCat.{v} ‚•§ MonCat.{max v u} where\n  obj X := MonCat.of (ULift.{u, v} X)\n  map {_ _} f := MonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"MonCat.uliftFunctor_obj_coe","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : MonCat\n‚ä¢ Eq (‚Üë(MonCat.uliftFunctor.obj X)) (ULift.{u, v} ‚ÜëX)","decl":"/-- Universe lift functor for monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive monoids.\"]\ndef uliftFunctor : MonCat.{v} ‚•§ MonCat.{max v u} where\n  obj X := MonCat.of (ULift.{u, v} X)\n  map {_ _} f := MonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"MonCat.uliftFunctor_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"x‚úù¬π x‚úù : MonCat\nf : Quiver.Hom x‚úù¬π x‚úù\n‚ä¢ Eq (MonCat.uliftFunctor.map f) (MonCat.ofHom (MulEquiv.ulift.symm.toMonoidHom.comp ((MonCat.Hom.hom f).comp MulEquiv.ulift.toMonoidHom)))","decl":"/-- Universe lift functor for monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive monoids.\"]\ndef uliftFunctor : MonCat.{v} ‚•§ MonCat.{max v u} where\n  obj X := MonCat.of (ULift.{u, v} X)\n  map {_ _} f := MonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"AddCommMonCat.mk.injEq","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : AddCommMonoid carrier‚úù\ncarrier : Type u\nstr : AddCommMonoid carrier\n‚ä¢ Eq (Eq (AddCommMonCat.mk carrier‚úù) (AddCommMonCat.mk carrier)) (And (Eq carrier‚úù carrier) (HEq str‚úù str))","decl":"/-- The category of additive groups and group morphisms. -/\nstructure AddCommMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : AddCommMonoid carrier]\n\n"}
{"name":"AddCommMonCat.mk.inj","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : AddCommMonoid carrier‚úù\ncarrier : Type u\nstr : AddCommMonoid carrier\nx‚úù : Eq (AddCommMonCat.mk carrier‚úù) (AddCommMonCat.mk carrier)\n‚ä¢ And (Eq carrier‚úù carrier) (HEq str‚úù str)","decl":"/-- The category of additive groups and group morphisms. -/\nstructure AddCommMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : AddCommMonoid carrier]\n\n"}
{"name":"AddCommMonCat.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier : Type u\nstr : AddCommMonoid carrier\n‚ä¢ Eq (SizeOf.sizeOf (AddCommMonCat.mk carrier)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf carrier)) (SizeOf.sizeOf str))","decl":"/-- The category of additive groups and group morphisms. -/\nstructure AddCommMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : AddCommMonoid carrier]\n\n"}
{"name":"CommMonCat.mk.injEq","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : CommMonoid carrier‚úù\ncarrier : Type u\nstr : CommMonoid carrier\n‚ä¢ Eq (Eq (CommMonCat.mk carrier‚úù) (CommMonCat.mk carrier)) (And (Eq carrier‚úù carrier) (HEq str‚úù str))","decl":"/-- The category of groups and group morphisms. -/\n@[to_additive AddCommMonCat]\nstructure CommMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : CommMonoid carrier]\n\n"}
{"name":"CommMonCat.mk.inj","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier‚úù : Type u\nstr‚úù : CommMonoid carrier‚úù\ncarrier : Type u\nstr : CommMonoid carrier\nx‚úù : Eq (CommMonCat.mk carrier‚úù) (CommMonCat.mk carrier)\n‚ä¢ And (Eq carrier‚úù carrier) (HEq str‚úù str)","decl":"/-- The category of groups and group morphisms. -/\n@[to_additive AddCommMonCat]\nstructure CommMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : CommMonoid carrier]\n\n"}
{"name":"CommMonCat.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"carrier : Type u\nstr : CommMonoid carrier\n‚ä¢ Eq (SizeOf.sizeOf (CommMonCat.mk carrier)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf carrier)) (SizeOf.sizeOf str))","decl":"/-- The category of groups and group morphisms. -/\n@[to_additive AddCommMonCat]\nstructure CommMonCat : Type (u + 1) where\n  /-- The underlying type. -/\n  (carrier : Type u)\n  [str : CommMonoid carrier]\n\n"}
{"name":"AddCommMonCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : AddCommMonCat\nx y : A.Hom B\n‚ä¢ Iff (Eq x y) (Eq x.hom' y.hom')","decl":"/-- The type of morphisms in `AddCommMonCat R`. -/\n@[ext]\nstructure AddCommMonCat.Hom (A B : AddCommMonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí+ B\n\n"}
{"name":"AddCommMonCat.Hom.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : AddCommMonCat\nx y : A.Hom B\nhom' : Eq x.hom' y.hom'\n‚ä¢ Eq x y","decl":"/-- The type of morphisms in `AddCommMonCat R`. -/\n@[ext]\nstructure AddCommMonCat.Hom (A B : AddCommMonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí+ B\n\n"}
{"name":"CommMonCat.Hom.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : CommMonCat\nx y : A.Hom B\nhom' : Eq x.hom' y.hom'\n‚ä¢ Eq x y","decl":"/-- The type of morphisms in `CommMonCat R`. -/\n@[to_additive, ext]\nstructure CommMonCat.Hom (A B : CommMonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí* B\n\n"}
{"name":"CommMonCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"A B : CommMonCat\nx y : A.Hom B\n‚ä¢ Iff (Eq x y) (Eq x.hom' y.hom')","decl":"/-- The type of morphisms in `CommMonCat R`. -/\n@[to_additive, ext]\nstructure CommMonCat.Hom (A B : CommMonCat.{u}) where\n  private mk ::\n  /-- The underlying monoid homomorphism. -/\n  hom' : A ‚Üí* B\n\n"}
{"name":"AddCommMonCat.coe_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : AddCommMonCat\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id X))) id","decl":"@[to_additive (attr := simp)]\nlemma coe_id {X : CommMonCat} : (ùüô X : X ‚Üí X) = id := rfl\n\n"}
{"name":"CommMonCat.coe_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : CommMonCat\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id X))) id","decl":"@[to_additive (attr := simp)]\nlemma coe_id {X : CommMonCat} : (ùüô X : X ‚Üí X) = id := rfl\n\n"}
{"name":"CommMonCat.coe_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y Z : CommMonCat\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g))) (Function.comp ‚áë(CategoryTheory.ConcreteCategory.hom g) ‚áë(CategoryTheory.ConcreteCategory.hom f))","decl":"@[to_additive (attr := simp)]\nlemma coe_comp {X Y Z : CommMonCat} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl\n\n"}
{"name":"AddCommMonCat.coe_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y Z : AddCommMonCat\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (‚áë(CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g))) (Function.comp ‚áë(CategoryTheory.ConcreteCategory.hom g) ‚áë(CategoryTheory.ConcreteCategory.hom f))","decl":"@[to_additive (attr := simp)]\nlemma coe_comp {X Y Z : CommMonCat} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} : (f ‚â´ g : X ‚Üí Z) = g ‚àò f := rfl\n\n"}
{"name":"AddCommMonCat.forget_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddCommMonCat\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget AddCommMonCat).map f) ‚áë(CategoryTheory.ConcreteCategory.hom f)","decl":"@[to_additive (attr := simp)]\nlemma forget_map {X Y : CommMonCat} (f : X ‚ü∂ Y) :\n    (forget CommMonCat).map f = (f : X ‚Üí Y) :=\n  rfl\n\n"}
{"name":"CommMonCat.forget_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : CommMonCat\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget CommMonCat).map f) ‚áë(CategoryTheory.ConcreteCategory.hom f)","decl":"@[to_additive (attr := simp)]\nlemma forget_map {X Y : CommMonCat} (f : X ‚ü∂ Y) :\n    (forget CommMonCat).map f = (f : X ‚Üí Y) :=\n  rfl\n\n"}
{"name":"CommMonCat.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : CommMonCat\nf g : Quiver.Hom X Y\nw : ‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : CommMonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"AddCommMonCat.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddCommMonCat\nf g : Quiver.Hom X Y\n‚ä¢ Iff (Eq f g) (‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x))","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : CommMonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"CommMonCat.ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : CommMonCat\nf g : Quiver.Hom X Y\n‚ä¢ Iff (Eq f g) (‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x))","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : CommMonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"AddCommMonCat.ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddCommMonCat\nf g : Quiver.Hom X Y\nw : ‚àÄ (x : ‚ÜëX), Eq ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma ext {X Y : CommMonCat} {f g : X ‚ü∂ Y} (w : ‚àÄ x : X, f x = g x) : f = g :=\n  ConcreteCategory.hom_ext _ _ w\n\n"}
{"name":"CommMonCat.hom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : CommMonCat\n‚ä¢ Eq (CommMonCat.Hom.hom (CategoryTheory.CategoryStruct.id M)) (MonoidHom.id ‚ÜëM)","decl":"@[to_additive (attr := simp)]\nlemma hom_id {M : CommMonCat} : (ùüô M : M ‚ü∂ M).hom = MonoidHom.id M := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AddCommMonCat.hom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : AddCommMonCat\n‚ä¢ Eq (AddCommMonCat.Hom.hom (CategoryTheory.CategoryStruct.id M)) (AddMonoidHom.id ‚ÜëM)","decl":"@[to_additive (attr := simp)]\nlemma hom_id {M : CommMonCat} : (ùüô M : M ‚ü∂ M).hom = MonoidHom.id M := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AddCommMonCat.id_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : AddCommMonCat\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id M)) x) x","decl":"@[to_additive]\nlemma id_apply (M : CommMonCat) (x : M) :\n    (ùüô M : M ‚ü∂ M) x = x := by simp\n\n"}
{"name":"CommMonCat.id_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : CommMonCat\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id M)) x) x","decl":"@[to_additive]\nlemma id_apply (M : CommMonCat) (x : M) :\n    (ùüô M : M ‚ü∂ M) x = x := by simp\n\n"}
{"name":"AddCommMonCat.hom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : AddCommMonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\n‚ä¢ Eq (AddCommMonCat.Hom.hom (CategoryTheory.CategoryStruct.comp f g)) ((AddCommMonCat.Hom.hom g).comp (AddCommMonCat.Hom.hom f))","decl":"@[to_additive (attr := simp)]\nlemma hom_comp {M N T : CommMonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) :\n    (f ‚â´ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"CommMonCat.hom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : CommMonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\n‚ä¢ Eq (CommMonCat.Hom.hom (CategoryTheory.CategoryStruct.comp f g)) ((CommMonCat.Hom.hom g).comp (CommMonCat.Hom.hom f))","decl":"@[to_additive (attr := simp)]\nlemma hom_comp {M N T : CommMonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) :\n    (f ‚â´ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AddCommMonCat.comp_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : AddCommMonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g)) x) ((CategoryTheory.ConcreteCategory.hom g) ((CategoryTheory.ConcreteCategory.hom f) x))","decl":"@[to_additive]\nlemma comp_apply {M N T : CommMonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) (x : M) :\n    (f ‚â´ g) x = g (f x) := by simp\n\n"}
{"name":"CommMonCat.comp_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N T : CommMonCat\nf : Quiver.Hom M N\ng : Quiver.Hom N T\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g)) x) ((CategoryTheory.ConcreteCategory.hom g) ((CategoryTheory.ConcreteCategory.hom f) x))","decl":"@[to_additive]\nlemma comp_apply {M N T : CommMonCat} (f : M ‚ü∂ N) (g : N ‚ü∂ T) (x : M) :\n    (f ‚â´ g) x = g (f x) := by simp\n\n"}
{"name":"AddCommMonCat.hom_ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddCommMonCat\nf g : Quiver.Hom M N\n‚ä¢ Iff (Eq f g) (Eq (AddCommMonCat.Hom.hom f) (AddCommMonCat.Hom.hom g))","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : CommMonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"CommMonCat.hom_ext_iff","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : CommMonCat\nf g : Quiver.Hom M N\n‚ä¢ Iff (Eq f g) (Eq (CommMonCat.Hom.hom f) (CommMonCat.Hom.hom g))","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : CommMonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"AddCommMonCat.hom_ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddCommMonCat\nf g : Quiver.Hom M N\nhf : Eq (AddCommMonCat.Hom.hom f) (AddCommMonCat.Hom.hom g)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : CommMonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"CommMonCat.hom_ext","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : CommMonCat\nf g : Quiver.Hom M N\nhf : Eq (CommMonCat.Hom.hom f) (CommMonCat.Hom.hom g)\n‚ä¢ Eq f g","decl":"@[to_additive (attr := ext)]\nlemma hom_ext {M N : CommMonCat} {f g : M ‚ü∂ N} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"CommMonCat.hom_ofHom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : Type u\ninst‚úù¬π : CommMonoid M\ninst‚úù : CommMonoid N\nf : MonoidHom M N\n‚ä¢ Eq (CommMonCat.Hom.hom (CommMonCat.ofHom f)) f","decl":"@[to_additive (attr := simp)]\nlemma hom_ofHom {M N : Type u} [CommMonoid M] [CommMonoid N] (f : M ‚Üí* N) :\n  (ofHom f).hom = f := rfl\n\n"}
{"name":"AddCommMonCat.hom_ofHom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : Type u\ninst‚úù¬π : AddCommMonoid M\ninst‚úù : AddCommMonoid N\nf : AddMonoidHom M N\n‚ä¢ Eq (AddCommMonCat.Hom.hom (AddCommMonCat.ofHom f)) f","decl":"@[to_additive (attr := simp)]\nlemma hom_ofHom {M N : Type u} [CommMonoid M] [CommMonoid N] (f : M ‚Üí* N) :\n  (ofHom f).hom = f := rfl\n\n"}
{"name":"AddCommMonCat.ofHom_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddCommMonCat\nf : Quiver.Hom M N\n‚ä¢ Eq (AddCommMonCat.ofHom (AddCommMonCat.Hom.hom f)) f","decl":"@[to_additive (attr := simp)]\nlemma ofHom_hom {M N : CommMonCat} (f : M ‚ü∂ N) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"CommMonCat.ofHom_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : CommMonCat\nf : Quiver.Hom M N\n‚ä¢ Eq (CommMonCat.ofHom (CommMonCat.Hom.hom f)) f","decl":"@[to_additive (attr := simp)]\nlemma ofHom_hom {M N : CommMonCat} (f : M ‚ü∂ N) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"AddCommMonCat.ofHom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : Type u\ninst‚úù : AddCommMonoid M\n‚ä¢ Eq (AddCommMonCat.ofHom (AddMonoidHom.id M)) (CategoryTheory.CategoryStruct.id (AddCommMonCat.of M))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_id {M : Type u} [CommMonoid M] : ofHom (MonoidHom.id M) = ùüô (of M) := rfl\n\n"}
{"name":"CommMonCat.ofHom_id","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M : Type u\ninst‚úù : CommMonoid M\n‚ä¢ Eq (CommMonCat.ofHom (MonoidHom.id M)) (CategoryTheory.CategoryStruct.id (CommMonCat.of M))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_id {M : Type u} [CommMonoid M] : ofHom (MonoidHom.id M) = ùüô (of M) := rfl\n\n"}
{"name":"AddCommMonCat.ofHom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N P : Type u\ninst‚úù¬≤ : AddCommMonoid M\ninst‚úù¬π : AddCommMonoid N\ninst‚úù : AddCommMonoid P\nf : AddMonoidHom M N\ng : AddMonoidHom N P\n‚ä¢ Eq (AddCommMonCat.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (AddCommMonCat.ofHom f) (AddCommMonCat.ofHom g))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_comp {M N P : Type u} [CommMonoid M] [CommMonoid N] [CommMonoid P]\n    (f : M ‚Üí* N) (g : N ‚Üí* P) :\n    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=\n  rfl\n\n"}
{"name":"CommMonCat.ofHom_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N P : Type u\ninst‚úù¬≤ : CommMonoid M\ninst‚úù¬π : CommMonoid N\ninst‚úù : CommMonoid P\nf : MonoidHom M N\ng : MonoidHom N P\n‚ä¢ Eq (CommMonCat.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (CommMonCat.ofHom f) (CommMonCat.ofHom g))","decl":"@[to_additive (attr := simp)]\nlemma ofHom_comp {M N P : Type u} [CommMonoid M] [CommMonoid N] [CommMonoid P]\n    (f : M ‚Üí* N) (g : N ‚Üí* P) :\n    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=\n  rfl\n\n"}
{"name":"CommMonCat.ofHom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : CommMonoid X\ninst‚úù : CommMonoid Y\nf : MonoidHom X Y\nx : X\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CommMonCat.ofHom f)) x) (f x)","decl":"@[to_additive]\nlemma ofHom_apply {X Y : Type u} [CommMonoid X] [CommMonoid Y] (f : X ‚Üí* Y) (x : X) :\n    (ofHom f) x = f x := rfl\n\n"}
{"name":"AddCommMonCat.ofHom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddCommMonoid X\ninst‚úù : AddCommMonoid Y\nf : AddMonoidHom X Y\nx : X\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (AddCommMonCat.ofHom f)) x) (f x)","decl":"@[to_additive]\nlemma ofHom_apply {X Y : Type u} [CommMonoid X] [CommMonoid Y] (f : X ‚Üí* Y) (x : X) :\n    (ofHom f) x = f x := rfl\n\n"}
{"name":"CommMonCat.inv_hom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : CommMonCat\ne : CategoryTheory.Iso M N\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.inv) ((CategoryTheory.ConcreteCategory.hom e.hom) x)) x","decl":"@[to_additive (attr := simp)]\nlemma inv_hom_apply {M N : CommMonCat} (e : M ‚âÖ N) (x : M) : e.inv (e.hom x) = x := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"AddCommMonCat.neg_hom_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddCommMonCat\ne : CategoryTheory.Iso M N\nx : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.inv) ((CategoryTheory.ConcreteCategory.hom e.hom) x)) x","decl":"@[to_additive (attr := simp)]\nlemma inv_hom_apply {M N : CommMonCat} (e : M ‚âÖ N) (x : M) : e.inv (e.hom x) = x := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"AddCommMonCat.hom_neg_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : AddCommMonCat\ne : CategoryTheory.Iso M N\ns : ‚ÜëN\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.hom) ((CategoryTheory.ConcreteCategory.hom e.inv) s)) s","decl":"@[to_additive (attr := simp)]\nlemma hom_inv_apply {M N : CommMonCat} (e : M ‚âÖ N) (s : N) : e.hom (e.inv s) = s := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"CommMonCat.hom_inv_apply","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"M N : CommMonCat\ne : CategoryTheory.Iso M N\ns : ‚ÜëN\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.hom) ((CategoryTheory.ConcreteCategory.hom e.inv) s)) s","decl":"@[to_additive (attr := simp)]\nlemma hom_inv_apply {M N : CommMonCat} (e : M ‚âÖ N) (s : N) : e.hom (e.inv s) = s := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"CommMonCat.coe_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommMonoid R\n‚ä¢ Eq (‚Üë(CommMonCat.of R)) R","decl":"@[to_additive]\ntheorem coe_of (R : Type u) [CommMonoid R] : (CommMonCat.of R : Type u) = R :=\n  rfl\n\n"}
{"name":"AddCommMonCat.coe_of","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"R : Type u\ninst‚úù : AddCommMonoid R\n‚ä¢ Eq (‚Üë(AddCommMonCat.of R)) R","decl":"@[to_additive]\ntheorem coe_of (R : Type u) [CommMonoid R] : (CommMonCat.of R : Type u) = R :=\n  rfl\n\n"}
{"name":"AddCommMonCat.coe_forget‚ÇÇ_obj","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : AddCommMonCat\n‚ä¢ Eq ‚Üë((CategoryTheory.forget‚ÇÇ AddCommMonCat AddMonCat).obj X) ‚ÜëX","decl":"@[to_additive (attr := simp)] lemma coe_forget‚ÇÇ_obj (X : CommMonCat) :\n    ((forget‚ÇÇ CommMonCat MonCat).obj X : Type _) = X := rfl\n\n"}
{"name":"CommMonCat.coe_forget‚ÇÇ_obj","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : CommMonCat\n‚ä¢ Eq ‚Üë((CategoryTheory.forget‚ÇÇ CommMonCat MonCat).obj X) ‚ÜëX","decl":"@[to_additive (attr := simp)] lemma coe_forget‚ÇÇ_obj (X : CommMonCat) :\n    ((forget‚ÇÇ CommMonCat MonCat).obj X : Type _) = X := rfl\n\n"}
{"name":"AddCommMonCat.hom_forget‚ÇÇ_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : AddCommMonCat\nf : Quiver.Hom X Y\n‚ä¢ Eq (AddMonCat.Hom.hom ((CategoryTheory.forget‚ÇÇ AddCommMonCat AddMonCat).map f)) (AddCommMonCat.Hom.hom f)","decl":"@[to_additive (attr := simp)] lemma hom_forget‚ÇÇ_map {X Y : CommMonCat}\n    (f : X ‚ü∂ Y) :\n    ((forget‚ÇÇ CommMonCat MonCat).map f).hom = f.hom := rfl\n\n"}
{"name":"CommMonCat.hom_forget‚ÇÇ_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : CommMonCat\nf : Quiver.Hom X Y\n‚ä¢ Eq (MonCat.Hom.hom ((CategoryTheory.forget‚ÇÇ CommMonCat MonCat).map f)) (CommMonCat.Hom.hom f)","decl":"@[to_additive (attr := simp)] lemma hom_forget‚ÇÇ_map {X Y : CommMonCat}\n    (f : X ‚ü∂ Y) :\n    ((forget‚ÇÇ CommMonCat MonCat).map f).hom = f.hom := rfl\n\n"}
{"name":"AddCommMonCat.forget‚ÇÇ_map_ofHom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddCommMonoid X\ninst‚úù : AddCommMonoid Y\nf : AddMonoidHom X Y\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ AddCommMonCat AddMonCat).map (AddCommMonCat.ofHom f)) (AddMonCat.ofHom f)","decl":"@[to_additive (attr := simp)] lemma forget‚ÇÇ_map_ofHom {X Y : Type u} [CommMonoid X] [CommMonoid Y]\n    (f : X ‚Üí* Y) :\n    (forget‚ÇÇ CommMonCat MonCat).map (ofHom f) = MonCat.ofHom f := rfl\n\n"}
{"name":"CommMonCat.forget‚ÇÇ_map_ofHom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : CommMonoid X\ninst‚úù : CommMonoid Y\nf : MonoidHom X Y\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ CommMonCat MonCat).map (CommMonCat.ofHom f)) (MonCat.ofHom f)","decl":"@[to_additive (attr := simp)] lemma forget‚ÇÇ_map_ofHom {X Y : Type u} [CommMonoid X] [CommMonoid Y]\n    (f : X ‚Üí* Y) :\n    (forget‚ÇÇ CommMonCat MonCat).map (ofHom f) = MonCat.ofHom f := rfl\n\n"}
{"name":"AddCommMonCat.uliftFunctor_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"x‚úù¬π x‚úù : AddCommMonCat\nf : Quiver.Hom x‚úù¬π x‚úù\n‚ä¢ Eq (AddCommMonCat.uliftFunctor.map f) (AddCommMonCat.ofHom (AddEquiv.ulift.symm.toAddMonoidHom.comp ((AddCommMonCat.Hom.hom f).comp AddEquiv.ulift.toAddMonoidHom)))","decl":"/-- Universe lift functor for commutative monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive commutative monoids.\"]\ndef uliftFunctor : CommMonCat.{v} ‚•§ CommMonCat.{max v u} where\n  obj X := CommMonCat.of (ULift.{u, v} X)\n  map {_ _} f := CommMonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"AddCommMonCat.uliftFunctor_obj_coe","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : AddCommMonCat\n‚ä¢ Eq (‚Üë(AddCommMonCat.uliftFunctor.obj X)) (ULift.{u, v} ‚ÜëX)","decl":"/-- Universe lift functor for commutative monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive commutative monoids.\"]\ndef uliftFunctor : CommMonCat.{v} ‚•§ CommMonCat.{max v u} where\n  obj X := CommMonCat.of (ULift.{u, v} X)\n  map {_ _} f := CommMonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"CommMonCat.uliftFunctor_map","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"x‚úù¬π x‚úù : CommMonCat\nf : Quiver.Hom x‚úù¬π x‚úù\n‚ä¢ Eq (CommMonCat.uliftFunctor.map f) (CommMonCat.ofHom (MulEquiv.ulift.symm.toMonoidHom.comp ((CommMonCat.Hom.hom f).comp MulEquiv.ulift.toMonoidHom)))","decl":"/-- Universe lift functor for commutative monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive commutative monoids.\"]\ndef uliftFunctor : CommMonCat.{v} ‚•§ CommMonCat.{max v u} where\n  obj X := CommMonCat.of (ULift.{u, v} X)\n  map {_ _} f := CommMonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"CommMonCat.uliftFunctor_obj_coe","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X : CommMonCat\n‚ä¢ Eq (‚Üë(CommMonCat.uliftFunctor.obj X)) (ULift.{u, v} ‚ÜëX)","decl":"/-- Universe lift functor for commutative monoids. -/\n@[to_additive (attr := simps)\n  \"Universe lift functor for additive commutative monoids.\"]\ndef uliftFunctor : CommMonCat.{v} ‚•§ CommMonCat.{max v u} where\n  obj X := CommMonCat.of (ULift.{u, v} X)\n  map {_ _} f := CommMonCat.ofHom <|\n    MulEquiv.ulift.symm.toMonoidHom.comp <| f.hom.comp MulEquiv.ulift.toMonoidHom\n  map_id X := by rfl\n  map_comp {X Y Z} f g := by rfl\n\n"}
{"name":"AddEquiv.toAddMonCatIso_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddMonoid X\ninst‚úù : AddMonoid Y\ne : AddEquiv X Y\n‚ä¢ Eq e.toAddMonCatIso.hom (AddMonCat.ofHom e.toAddMonoidHom)","decl":"/-- Build an isomorphism in the category `MonCat` from a `MulEquiv` between `Monoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddMonCatIso\n      \"Build an isomorphism in the category `AddMonCat` from\\nan `AddEquiv` between `AddMonoid`s.\"]\ndef MulEquiv.toMonCatIso (e : X ‚âÉ* Y) : MonCat.of X ‚âÖ MonCat.of Y where\n  hom := MonCat.ofHom e.toMonoidHom\n  inv := MonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"MulEquiv.toMonCatIso_inv","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : Monoid X\ninst‚úù : Monoid Y\ne : MulEquiv X Y\n‚ä¢ Eq e.toMonCatIso.inv (MonCat.ofHom e.symm.toMonoidHom)","decl":"/-- Build an isomorphism in the category `MonCat` from a `MulEquiv` between `Monoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddMonCatIso\n      \"Build an isomorphism in the category `AddMonCat` from\\nan `AddEquiv` between `AddMonoid`s.\"]\ndef MulEquiv.toMonCatIso (e : X ‚âÉ* Y) : MonCat.of X ‚âÖ MonCat.of Y where\n  hom := MonCat.ofHom e.toMonoidHom\n  inv := MonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"AddEquiv.toAddMonCatIso_inv","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddMonoid X\ninst‚úù : AddMonoid Y\ne : AddEquiv X Y\n‚ä¢ Eq e.toAddMonCatIso.inv (AddMonCat.ofHom e.symm.toAddMonoidHom)","decl":"/-- Build an isomorphism in the category `MonCat` from a `MulEquiv` between `Monoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddMonCatIso\n      \"Build an isomorphism in the category `AddMonCat` from\\nan `AddEquiv` between `AddMonoid`s.\"]\ndef MulEquiv.toMonCatIso (e : X ‚âÉ* Y) : MonCat.of X ‚âÖ MonCat.of Y where\n  hom := MonCat.ofHom e.toMonoidHom\n  inv := MonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"MulEquiv.toMonCatIso_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : Monoid X\ninst‚úù : Monoid Y\ne : MulEquiv X Y\n‚ä¢ Eq e.toMonCatIso.hom (MonCat.ofHom e.toMonoidHom)","decl":"/-- Build an isomorphism in the category `MonCat` from a `MulEquiv` between `Monoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddMonCatIso\n      \"Build an isomorphism in the category `AddMonCat` from\\nan `AddEquiv` between `AddMonoid`s.\"]\ndef MulEquiv.toMonCatIso (e : X ‚âÉ* Y) : MonCat.of X ‚âÖ MonCat.of Y where\n  hom := MonCat.ofHom e.toMonoidHom\n  inv := MonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"MulEquiv.toCommMonCatIso_inv","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : CommMonoid X\ninst‚úù : CommMonoid Y\ne : MulEquiv X Y\n‚ä¢ Eq e.toCommMonCatIso.inv (CommMonCat.ofHom e.symm.toMonoidHom)","decl":"/-- Build an isomorphism in the category `CommMonCat` from a `MulEquiv` between `CommMonoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddCommMonCatIso]\ndef MulEquiv.toCommMonCatIso (e : X ‚âÉ* Y) : CommMonCat.of X ‚âÖ CommMonCat.of Y where\n  hom := CommMonCat.ofHom e.toMonoidHom\n  inv := CommMonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"AddEquiv.toAddCommMonCatIso_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddCommMonoid X\ninst‚úù : AddCommMonoid Y\ne : AddEquiv X Y\n‚ä¢ Eq e.toAddCommMonCatIso.hom (AddCommMonCat.ofHom e.toAddMonoidHom)","decl":"/-- Build an isomorphism in the category `CommMonCat` from a `MulEquiv` between `CommMonoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddCommMonCatIso]\ndef MulEquiv.toCommMonCatIso (e : X ‚âÉ* Y) : CommMonCat.of X ‚âÖ CommMonCat.of Y where\n  hom := CommMonCat.ofHom e.toMonoidHom\n  inv := CommMonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"AddEquiv.toAddCommMonCatIso_inv","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : AddCommMonoid X\ninst‚úù : AddCommMonoid Y\ne : AddEquiv X Y\n‚ä¢ Eq e.toAddCommMonCatIso.inv (AddCommMonCat.ofHom e.symm.toAddMonoidHom)","decl":"/-- Build an isomorphism in the category `CommMonCat` from a `MulEquiv` between `CommMonoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddCommMonCatIso]\ndef MulEquiv.toCommMonCatIso (e : X ‚âÉ* Y) : CommMonCat.of X ‚âÖ CommMonCat.of Y where\n  hom := CommMonCat.ofHom e.toMonoidHom\n  inv := CommMonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"MulEquiv.toCommMonCatIso_hom","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"X Y : Type u\ninst‚úù¬π : CommMonoid X\ninst‚úù : CommMonoid Y\ne : MulEquiv X Y\n‚ä¢ Eq e.toCommMonCatIso.hom (CommMonCat.ofHom e.toMonoidHom)","decl":"/-- Build an isomorphism in the category `CommMonCat` from a `MulEquiv` between `CommMonoid`s. -/\n@[to_additive (attr := simps) AddEquiv.toAddCommMonCatIso]\ndef MulEquiv.toCommMonCatIso (e : X ‚âÉ* Y) : CommMonCat.of X ‚âÖ CommMonCat.of Y where\n  hom := CommMonCat.ofHom e.toMonoidHom\n  inv := CommMonCat.ofHom e.symm.toMonoidHom\n\n"}
{"name":"AddMonCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"‚ä¢ (CategoryTheory.forget AddMonCat).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance MonCat.forget_reflects_isos : (forget MonCat.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget MonCat).map f)\n    let e : X ‚âÉ* Y := { f.hom, i.toEquiv with }\n    exact e.toMonCatIso.isIso_hom\n\n"}
{"name":"MonCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"‚ä¢ (CategoryTheory.forget MonCat).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance MonCat.forget_reflects_isos : (forget MonCat.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget MonCat).map f)\n    let e : X ‚âÉ* Y := { f.hom, i.toEquiv with }\n    exact e.toMonCatIso.isIso_hom\n\n"}
{"name":"CommMonCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"‚ä¢ (CategoryTheory.forget CommMonCat).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance CommMonCat.forget_reflects_isos : (forget CommMonCat.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget CommMonCat).map f)\n    let e : X ‚âÉ* Y := { f.hom, i.toEquiv with }\n    exact e.toCommMonCatIso.isIso_hom\n\n-- Porting note: this was added in order to ensure that `forget‚ÇÇ CommMonCat MonCat`\n-- automatically reflects isomorphisms\n-- we could have used `CategoryTheory.HasForget.ReflectsIso` alternatively\n"}
{"name":"AddCommMonCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"‚ä¢ (CategoryTheory.forget AddCommMonCat).ReflectsIsomorphisms","decl":"@[to_additive]\ninstance CommMonCat.forget_reflects_isos : (forget CommMonCat.{u}).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget CommMonCat).map f)\n    let e : X ‚âÉ* Y := { f.hom, i.toEquiv with }\n    exact e.toCommMonCatIso.isIso_hom\n\n-- Porting note: this was added in order to ensure that `forget‚ÇÇ CommMonCat MonCat`\n-- automatically reflects isomorphisms\n-- we could have used `CategoryTheory.HasForget.ReflectsIso` alternatively\n"}
{"name":"CommMonCat.forget‚ÇÇ_full","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"‚ä¢ (CategoryTheory.forget‚ÇÇ CommMonCat MonCat).Full","decl":"@[to_additive]\ninstance CommMonCat.forget‚ÇÇ_full : (forget‚ÇÇ CommMonCat MonCat).Full where\n  map_surjective f := ‚ü®ofHom f.hom, rfl‚ü©\n\n"}
{"name":"AddCommMonCat.forget‚ÇÇ_full","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"‚ä¢ (CategoryTheory.forget‚ÇÇ AddCommMonCat AddMonCat).Full","decl":"@[to_additive]\ninstance CommMonCat.forget‚ÇÇ_full : (forget‚ÇÇ CommMonCat MonCat).Full where\n  map_surjective f := ‚ü®ofHom f.hom, rfl‚ü©\n\n"}
{"name":"MonoidHom.comp_id_monCat","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : MonCat\nH : Type u\ninst‚úù : Monoid H\nf : MonoidHom (‚ÜëG) H\n‚ä¢ Eq (f.comp (MonCat.Hom.hom (CategoryTheory.CategoryStruct.id G))) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [MonCat.hom_id, comp_id]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.comp_id_monCat {G : MonCat.{u}} {H : Type u} [Monoid H] (f : G ‚Üí* H) :\n    f.comp (MonCat.Hom.hom (ùüô G)) = f := by simp\n"}
{"name":"AddMonoidHom.comp_id_monCat","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : AddMonCat\nH : Type u\ninst‚úù : AddMonoid H\nf : AddMonoidHom (‚ÜëG) H\n‚ä¢ Eq (f.comp (AddMonCat.Hom.hom (CategoryTheory.CategoryStruct.id G))) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [MonCat.hom_id, comp_id]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.comp_id_monCat {G : MonCat.{u}} {H : Type u} [Monoid H] (f : G ‚Üí* H) :\n    f.comp (MonCat.Hom.hom (ùüô G)) = f := by simp\n"}
{"name":"AddMonoidHom.id_monCat_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : Type u\ninst‚úù : AddMonoid G\nH : AddMonCat\nf : AddMonoidHom G ‚ÜëH\n‚ä¢ Eq ((AddMonCat.Hom.hom (CategoryTheory.CategoryStruct.id H)).comp f) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [MonCat.hom_id, id_comp]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.id_monCat_comp {G : Type u} [Monoid G] {H : MonCat.{u}} (f : G ‚Üí* H) :\n    MonoidHom.comp (MonCat.Hom.hom (ùüô H)) f = f := by simp\n\n"}
{"name":"MonoidHom.id_monCat_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : Type u\ninst‚úù : Monoid G\nH : MonCat\nf : MonoidHom G ‚ÜëH\n‚ä¢ Eq ((MonCat.Hom.hom (CategoryTheory.CategoryStruct.id H)).comp f) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [MonCat.hom_id, id_comp]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.id_monCat_comp {G : Type u} [Monoid G] {H : MonCat.{u}} (f : G ‚Üí* H) :\n    MonoidHom.comp (MonCat.Hom.hom (ùüô H)) f = f := by simp\n\n"}
{"name":"MonoidHom.comp_id_commMonCat","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : CommMonCat\nH : Type u\ninst‚úù : CommMonoid H\nf : MonoidHom (‚ÜëG) H\n‚ä¢ Eq (f.comp (CommMonCat.Hom.hom (CategoryTheory.CategoryStruct.id G))) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [CommMonCat.hom_id, comp_id]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.comp_id_commMonCat {G : CommMonCat.{u}} {H : Type u} [CommMonoid H] (f : G ‚Üí* H) :\n    f.comp (CommMonCat.Hom.hom (ùüô G)) = f := by\n  simp\n"}
{"name":"AddMonoidHom.comp_id_commMonCat","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : AddCommMonCat\nH : Type u\ninst‚úù : AddCommMonoid H\nf : AddMonoidHom (‚ÜëG) H\n‚ä¢ Eq (f.comp (AddCommMonCat.Hom.hom (CategoryTheory.CategoryStruct.id G))) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [CommMonCat.hom_id, comp_id]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.comp_id_commMonCat {G : CommMonCat.{u}} {H : Type u} [CommMonoid H] (f : G ‚Üí* H) :\n    f.comp (CommMonCat.Hom.hom (ùüô G)) = f := by\n  simp\n"}
{"name":"MonoidHom.id_commMonCat_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : Type u\ninst‚úù : CommMonoid G\nH : CommMonCat\nf : MonoidHom G ‚ÜëH\n‚ä¢ Eq ((CommMonCat.Hom.hom (CategoryTheory.CategoryStruct.id H)).comp f) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [CommMonCat.hom_id, id_comp]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.id_commMonCat_comp {G : Type u} [CommMonoid G] {H : CommMonCat.{u}} (f : G ‚Üí* H) :\n    MonoidHom.comp (CommMonCat.Hom.hom (ùüô H)) f = f := by\n  simp\n"}
{"name":"AddMonoidHom.id_commMonCat_comp","module":"Mathlib.Algebra.Category.MonCat.Basic","initialProofState":"G : Type u\ninst‚úù : AddCommMonoid G\nH : AddCommMonCat\nf : AddMonoidHom G ‚ÜëH\n‚ä¢ Eq ((AddCommMonCat.Hom.hom (CategoryTheory.CategoryStruct.id H)).comp f) f","decl":"@[to_additive (attr := deprecated\n  \"Proven by `simp only [CommMonCat.hom_id, id_comp]`\"\n  (since := \"2025-01-28\"))]\ntheorem MonoidHom.id_commMonCat_comp {G : Type u} [CommMonoid G] {H : CommMonCat.{u}} (f : G ‚Üí* H) :\n    MonoidHom.comp (CommMonCat.Hom.hom (ùüô H)) f = f := by\n  simp\n"}
