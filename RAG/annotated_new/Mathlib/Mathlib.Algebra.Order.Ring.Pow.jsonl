{"name":"one_add_mul_le_pow'","module":"Mathlib.Algebra.Order.Ring.Pow","initialProofState":"R : Type u_1\ninst✝ : OrderedSemiring R\na : R\nHsq : LE.le 0 (HMul.hMul a a)\nHsq' : LE.le 0 (HMul.hMul (HAdd.hAdd 1 a) (HAdd.hAdd 1 a))\nH : LE.le 0 (HAdd.hAdd 2 a)\nn : Nat\n⊢ LE.le (HAdd.hAdd 1 (HMul.hMul (↑n) a)) (HPow.hPow (HAdd.hAdd 1 a) n)","decl":"/-- **Bernoulli's inequality**. This version works for semirings but requires\nadditional hypotheses `0 ≤ a * a` and `0 ≤ (1 + a) * (1 + a)`. -/\nlemma one_add_mul_le_pow' (Hsq : 0 ≤ a * a) (Hsq' : 0 ≤ (1 + a) * (1 + a)) (H : 0 ≤ 2 + a) :\n    ∀ n : ℕ, 1 + n * a ≤ (1 + a) ^ n\n  | 0 => by simp\n  | 1 => by simp\n  | n + 2 =>\n    have : 0 ≤ n * (a * a * (2 + a)) + a * a :=\n      add_nonneg (mul_nonneg n.cast_nonneg (mul_nonneg Hsq H)) Hsq\n    calc\n      _ ≤ 1 + ↑(n + 2) * a + (n * (a * a * (2 + a)) + a * a) := le_add_of_nonneg_right this\n      _ = (1 + a) * (1 + a) * (1 + n * a) := by\n          simp only [Nat.cast_add, add_mul, mul_add, one_mul, mul_one, ← one_add_one_eq_two,\n            Nat.cast_one, add_assoc, add_right_inj]\n          simp only [← add_assoc, add_comm _ (↑n * a)]\n          simp only [add_assoc, (n.cast_commute (_ : R)).left_comm]\n          simp only [add_comm, add_left_comm]\n      _ ≤ (1 + a) * (1 + a) * (1 + a) ^ n :=\n        mul_le_mul_of_nonneg_left (one_add_mul_le_pow' Hsq Hsq' H _) Hsq'\n      _ = (1 + a) ^ (n + 2) := by simp only [pow_succ', mul_assoc]\n\n"}
{"name":"one_add_mul_le_pow","module":"Mathlib.Algebra.Order.Ring.Pow","initialProofState":"R : Type u_1\ninst✝ : LinearOrderedRing R\na : R\nH : LE.le (-2) a\nn : Nat\n⊢ LE.le (HAdd.hAdd 1 (HMul.hMul (↑n) a)) (HPow.hPow (HAdd.hAdd 1 a) n)","decl":"/-- **Bernoulli's inequality** for `n : ℕ`, `-2 ≤ a`. -/\nlemma one_add_mul_le_pow (H : -2 ≤ a) (n : ℕ) : 1 + n * a ≤ (1 + a) ^ n :=\n  one_add_mul_le_pow' (mul_self_nonneg _) (mul_self_nonneg _) (neg_le_iff_add_nonneg'.1 H) _\n\n"}
{"name":"one_add_mul_sub_le_pow","module":"Mathlib.Algebra.Order.Ring.Pow","initialProofState":"R : Type u_1\ninst✝ : LinearOrderedRing R\na : R\nH : LE.le (-1) a\nn : Nat\n⊢ LE.le (HAdd.hAdd 1 (HMul.hMul (↑n) (HSub.hSub a 1))) (HPow.hPow a n)","decl":"/-- **Bernoulli's inequality** reformulated to estimate `a^n`. -/\nlemma one_add_mul_sub_le_pow (H : -1 ≤ a) (n : ℕ) : 1 + n * (a - 1) ≤ a ^ n := by\n  have : -2 ≤ a - 1 := by\n    rwa [← one_add_one_eq_two, neg_add, ← sub_eq_add_neg, sub_le_sub_iff_right]\n  simpa only [add_sub_cancel] using one_add_mul_le_pow this n\n\n"}
