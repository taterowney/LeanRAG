{"name":"MeasureTheory.trim_eq_self","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Eq (μ.trim ⋯) μ","decl":"@[simp]\ntheorem trim_eq_self [MeasurableSpace α] {μ : Measure α} : μ.trim le_rfl = μ := by\n  simp [Measure.trim]\n\n"}
{"name":"MeasureTheory.toOuterMeasure_trim_eq_trim_toOuterMeasure","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\n⊢ Eq (μ.trim hm).toOuterMeasure μ.trim","decl":"theorem toOuterMeasure_trim_eq_trim_toOuterMeasure (μ : Measure α) (hm : m ≤ m0) :\n    @Measure.toOuterMeasure _ m (μ.trim hm) = @OuterMeasure.trim _ m μ.toOuterMeasure := by\n  rw [Measure.trim, toMeasure_toOuterMeasure (ms := m)]\n\n"}
{"name":"MeasureTheory.zero_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nhm : LE.le m m0\n⊢ Eq (MeasureTheory.Measure.trim 0 hm) 0","decl":"@[simp]\ntheorem zero_trim (hm : m ≤ m0) : (0 : Measure α).trim hm = (0 : @Measure α m) := by\n  simp [Measure.trim, @OuterMeasure.toMeasure_zero _ m]\n\n"}
{"name":"MeasureTheory.trim_measurableSet_eq","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\n⊢ Eq ((μ.trim hm) s) (μ s)","decl":"theorem trim_measurableSet_eq (hm : m ≤ m0) (hs : @MeasurableSet α m s) : μ.trim hm s = μ s := by\n  rw [Measure.trim, toMeasure_apply (ms := m) _ _ hs, Measure.coe_toOuterMeasure]\n\n"}
{"name":"MeasureTheory.le_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\n⊢ LE.le (μ s) ((μ.trim hm) s)","decl":"theorem le_trim (hm : m ≤ m0) : μ s ≤ μ.trim hm s := by\n  simp_rw [Measure.trim]\n  exact @le_toMeasure_apply _ m _ _ _\n\n"}
{"name":"MeasureTheory.trim_add","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nhm : LE.le m m0\n⊢ Eq ((HAdd.hAdd μ ν).trim hm) (HAdd.hAdd (μ.trim hm) (ν.trim hm))","decl":"lemma trim_add {ν : Measure α} (hm : m ≤ m0) : (μ + ν).trim hm = μ.trim hm + ν.trim hm :=\n  @Measure.ext _ m _ _ (fun s hs ↦ by simp [trim_measurableSet_eq hm hs])\n\n"}
{"name":"MeasureTheory.measure_eq_zero_of_trim_eq_zero","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nh : Eq ((μ.trim hm) s) 0\n⊢ Eq (μ s) 0","decl":"theorem measure_eq_zero_of_trim_eq_zero (hm : m ≤ m0) (h : μ.trim hm s = 0) : μ s = 0 :=\n  le_antisymm ((le_trim hm).trans (le_of_eq h)) (zero_le _)\n\n"}
{"name":"MeasureTheory.measure_trim_toMeasurable_eq_zero","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : Eq ((μ.trim hm) s) 0\n⊢ Eq (μ (MeasureTheory.toMeasurable (μ.trim hm) s)) 0","decl":"theorem measure_trim_toMeasurable_eq_zero {hm : m ≤ m0} (hs : μ.trim hm s = 0) :\n    μ (@toMeasurable α m (μ.trim hm) s) = 0 :=\n  measure_eq_zero_of_trim_eq_zero hm (by rwa [@measure_toMeasurable _ m])\n\n"}
{"name":"MeasureTheory.ae_of_ae_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nhm : LE.le m m0\nμ : MeasureTheory.Measure α\nP : α → Prop\nh : Filter.Eventually (fun x => P x) (MeasureTheory.ae (μ.trim hm))\n⊢ Filter.Eventually (fun x => P x) (MeasureTheory.ae μ)","decl":"theorem ae_of_ae_trim (hm : m ≤ m0) {μ : Measure α} {P : α → Prop} (h : ∀ᵐ x ∂μ.trim hm, P x) :\n    ∀ᵐ x ∂μ, P x :=\n  measure_eq_zero_of_trim_eq_zero hm h\n\n"}
{"name":"MeasureTheory.ae_eq_of_ae_eq_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_2\nhm : LE.le m m0\nf₁ f₂ : α → E\nh12 : (MeasureTheory.ae (μ.trim hm)).EventuallyEq f₁ f₂\n⊢ (MeasureTheory.ae μ).EventuallyEq f₁ f₂","decl":"theorem ae_eq_of_ae_eq_trim {E} {hm : m ≤ m0} {f₁ f₂ : α → E}\n    (h12 : f₁ =ᵐ[μ.trim hm] f₂) : f₁ =ᵐ[μ] f₂ :=\n  measure_eq_zero_of_trim_eq_zero hm h12\n\n"}
{"name":"MeasureTheory.ae_le_of_ae_le_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_2\ninst✝ : LE E\nhm : LE.le m m0\nf₁ f₂ : α → E\nh12 : (MeasureTheory.ae (μ.trim hm)).EventuallyLE f₁ f₂\n⊢ (MeasureTheory.ae μ).EventuallyLE f₁ f₂","decl":"theorem ae_le_of_ae_le_trim {E} [LE E] {hm : m ≤ m0} {f₁ f₂ : α → E}\n    (h12 : f₁ ≤ᵐ[μ.trim hm] f₂) : f₁ ≤ᵐ[μ] f₂ :=\n  measure_eq_zero_of_trim_eq_zero hm h12\n\n"}
{"name":"MeasureTheory.trim_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nm₁ m₂ : MeasurableSpace α\nhm₁₂ : LE.le m₁ m₂\nhm₂ : LE.le m₂ m0\n⊢ Eq ((μ.trim hm₂).trim hm₁₂) (μ.trim ⋯)","decl":"theorem trim_trim {m₁ m₂ : MeasurableSpace α} {hm₁₂ : m₁ ≤ m₂} {hm₂ : m₂ ≤ m0} :\n    (μ.trim hm₂).trim hm₁₂ = μ.trim (hm₁₂.trans hm₂) := by\n  refine @Measure.ext _ m₁ _ _ (fun t ht => ?_)\n  rw [trim_measurableSet_eq hm₁₂ ht, trim_measurableSet_eq (hm₁₂.trans hm₂) ht,\n    trim_measurableSet_eq hm₂ (hm₁₂ t ht)]\n\n"}
{"name":"MeasureTheory.restrict_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\ns : Set α\nhm : LE.le m m0\nμ : MeasureTheory.Measure α\nhs : MeasurableSet s\n⊢ Eq ((μ.trim hm).restrict s) ((μ.restrict s).trim hm)","decl":"theorem restrict_trim (hm : m ≤ m0) (μ : Measure α) (hs : @MeasurableSet α m s) :\n    @Measure.restrict α m (μ.trim hm) s = (μ.restrict s).trim hm := by\n  refine @Measure.ext _ m _ _ (fun t ht => ?_)\n  rw [@Measure.restrict_apply α m _ _ _ ht, trim_measurableSet_eq hm ht,\n    Measure.restrict_apply (hm t ht),\n    trim_measurableSet_eq hm (@MeasurableSet.inter α m t s ht hs)]\n\n"}
{"name":"MeasureTheory.isFiniteMeasure_trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ MeasureTheory.IsFiniteMeasure (μ.trim hm)","decl":"instance isFiniteMeasure_trim (hm : m ≤ m0) [IsFiniteMeasure μ] : IsFiniteMeasure (μ.trim hm) where\n  measure_univ_lt_top := by\n    rw [trim_measurableSet_eq hm (@MeasurableSet.univ _ m)]\n    exact measure_lt_top _ _\n\n"}
{"name":"MeasureTheory.sigmaFiniteTrim_mono","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m₂ m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nhm₂ : LE.le m₂ m\ninst✝ : MeasureTheory.SigmaFinite (μ.trim ⋯)\n⊢ MeasureTheory.SigmaFinite (μ.trim hm)","decl":"theorem sigmaFiniteTrim_mono {m m₂ m0 : MeasurableSpace α} {μ : Measure α} (hm : m ≤ m0)\n    (hm₂ : m₂ ≤ m) [SigmaFinite (μ.trim (hm₂.trans hm))] : SigmaFinite (μ.trim hm) := by\n  refine ⟨⟨?_⟩⟩\n  refine\n    { set := spanningSets (μ.trim (hm₂.trans hm))\n      set_mem := fun _ => Set.mem_univ _\n      finite := fun i => ?_\n      spanning := iUnion_spanningSets _ }\n  calc\n    (μ.trim hm) (spanningSets (μ.trim (hm₂.trans hm)) i) =\n        ((μ.trim hm).trim hm₂) (spanningSets (μ.trim (hm₂.trans hm)) i) := by\n      rw [@trim_measurableSet_eq α m₂ m (μ.trim hm) _ hm₂ (measurableSet_spanningSets _ _)]\n    _ = (μ.trim (hm₂.trans hm)) (spanningSets (μ.trim (hm₂.trans hm)) i) := by\n      rw [@trim_trim _ _ μ _ _ hm₂ hm]\n    _ < ∞ := measure_spanningSets_lt_top _ _\n\n"}
{"name":"MeasureTheory.sigmaFinite_trim_bot_iff","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.SigmaFinite (μ.trim ⋯)) (MeasureTheory.IsFiniteMeasure μ)","decl":"theorem sigmaFinite_trim_bot_iff : SigmaFinite (μ.trim bot_le) ↔ IsFiniteMeasure μ := by\n  rw [sigmaFinite_bot_iff]\n  refine ⟨fun h => ⟨?_⟩, fun h => ⟨?_⟩⟩ <;> have h_univ := h.measure_univ_lt_top\n  · rwa [trim_measurableSet_eq bot_le MeasurableSet.univ] at h_univ\n  · rwa [trim_measurableSet_eq bot_le MeasurableSet.univ]\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.trim","module":"Mathlib.MeasureTheory.Measure.Trim","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nhμν : μ.AbsolutelyContinuous ν\nhm : LE.le m m0\n⊢ (μ.trim hm).AbsolutelyContinuous (ν.trim hm)","decl":"lemma Measure.AbsolutelyContinuous.trim {ν : Measure α} (hμν : μ ≪ ν) (hm : m ≤ m0) :\n    μ.trim hm ≪ ν.trim hm := by\n  refine Measure.AbsolutelyContinuous.mk (fun s hs hsν ↦ ?_)\n  rw [trim_measurableSet_eq hm hs] at hsν ⊢\n  exact hμν hsν\n\n"}
