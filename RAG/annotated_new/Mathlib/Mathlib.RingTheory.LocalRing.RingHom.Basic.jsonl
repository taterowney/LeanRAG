{"name":"isLocalHom_id","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_4\ninst✝ : Semiring R\n⊢ IsLocalHom (RingHom.id R)","decl":"@[instance]\ntheorem isLocalHom_id (R : Type*) [Semiring R] : IsLocalHom (RingHom.id R) where\n  map_nonunit _ := id\n\n"}
{"name":"isLocalRingHom_id","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_4\ninst✝ : Semiring R\n⊢ IsLocalHom (RingHom.id R)","decl":"@[deprecated (since := \"2024-10-10\")]\nalias isLocalRingHom_id := isLocalHom_id\n\n-- see note [lower instance priority]\n"}
{"name":"isLocalHom_toRingHom","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : Semiring R\ninst✝³ : Semiring S\nF : Type u_4\ninst✝² : FunLike F R S\ninst✝¹ : RingHomClass F R S\nf : F\ninst✝ : IsLocalHom f\n⊢ IsLocalHom ↑f","decl":"@[instance 100]\ntheorem isLocalHom_toRingHom {F : Type*} [FunLike F R S]\n    [RingHomClass F R S] (f : F) [IsLocalHom f] : IsLocalHom (f : R →+* S) :=\n  ⟨IsLocalHom.map_nonunit (f := f)⟩\n\n"}
{"name":"isLocalRingHom_toRingHom","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : Semiring R\ninst✝³ : Semiring S\nF : Type u_4\ninst✝² : FunLike F R S\ninst✝¹ : RingHomClass F R S\nf : F\ninst✝ : IsLocalHom f\n⊢ IsLocalHom ↑f","decl":"@[deprecated (since := \"2024-10-10\")]\nalias isLocalRingHom_toRingHom := isLocalHom_toRingHom\n\n"}
{"name":"RingHom.isLocalHom_comp","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\nT : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : Semiring S\ninst✝² : Semiring T\ng : RingHom S T\nf : RingHom R S\ninst✝¹ : IsLocalHom g\ninst✝ : IsLocalHom f\n⊢ IsLocalHom (g.comp f)","decl":"@[instance]\ntheorem RingHom.isLocalHom_comp (g : S →+* T) (f : R →+* S) [IsLocalHom g]\n    [IsLocalHom f] : IsLocalHom (g.comp f) where\n  map_nonunit a := IsLocalHom.map_nonunit a ∘ IsLocalHom.map_nonunit (f := g) (f a)\n\n"}
{"name":"RingHom.isLocalRingHom_comp","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\nT : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : Semiring S\ninst✝² : Semiring T\ng : RingHom S T\nf : RingHom R S\ninst✝¹ : IsLocalHom g\ninst✝ : IsLocalHom f\n⊢ IsLocalHom (g.comp f)","decl":"@[deprecated (since := \"2024-10-10\")]\nalias RingHom.isLocalRingHom_comp := RingHom.isLocalHom_comp\n\n"}
{"name":"isLocalHom_of_comp","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\nT : Type u_3\ninst✝³ : Semiring R\ninst✝² : Semiring S\ninst✝¹ : Semiring T\nf : RingHom R S\ng : RingHom S T\ninst✝ : IsLocalHom (g.comp f)\n⊢ IsLocalHom f","decl":"theorem isLocalHom_of_comp (f : R →+* S) (g : S →+* T) [IsLocalHom (g.comp f)] :\n    IsLocalHom f :=\n  ⟨fun _ ha => (isUnit_map_iff (g.comp f) _).mp (g.isUnit_map ha)⟩\n\n"}
{"name":"isLocalRingHom_of_comp","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\nT : Type u_3\ninst✝³ : Semiring R\ninst✝² : Semiring S\ninst✝¹ : Semiring T\nf : RingHom R S\ng : RingHom S T\ninst✝ : IsLocalHom (g.comp f)\n⊢ IsLocalHom f","decl":"@[deprecated (since := \"2024-10-10\")]\nalias isLocalRingHom_of_comp := isLocalHom_of_comp\n\n"}
{"name":"RingHom.domain_isLocalRing","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_4\nS : Type u_5\ninst✝³ : CommSemiring R\ninst✝² : CommSemiring S\ninst✝¹ : IsLocalRing S\nf : RingHom R S\ninst✝ : IsLocalHom f\n⊢ IsLocalRing R","decl":"/-- If `f : R →+* S` is a local ring hom, then `R` is a local ring if `S` is. -/\ntheorem RingHom.domain_isLocalRing {R S : Type*} [CommSemiring R] [CommSemiring S] [IsLocalRing S]\n    (f : R →+* S) [IsLocalHom f] : IsLocalRing R := by\n  haveI : Nontrivial R := f.domain_nontrivial\n  apply IsLocalRing.of_nonunits_add\n  intro a b\n  simp_rw [← map_mem_nonunits_iff f, f.map_add]\n  exact IsLocalRing.nonunits_add\n\n"}
{"name":"RingHom.domain_localRing","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_4\nS : Type u_5\ninst✝³ : CommSemiring R\ninst✝² : CommSemiring S\ninst✝¹ : IsLocalRing S\nf : RingHom R S\ninst✝ : IsLocalHom f\n⊢ IsLocalRing R","decl":"@[deprecated (since := \"2024-11-12\")] alias RingHom.domain_localRing := RingHom.domain_isLocalRing\n\n"}
{"name":"map_nonunit","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : IsLocalRing R\ninst✝² : CommSemiring S\ninst✝¹ : IsLocalRing S\nf : RingHom R S\ninst✝ : IsLocalHom f\na : R\nh : Membership.mem (IsLocalRing.maximalIdeal R) a\n⊢ Membership.mem (IsLocalRing.maximalIdeal S) (f a)","decl":"/--\nThe image of the maximal ideal of the source is contained within the maximal ideal of the target.\n-/\ntheorem map_nonunit (f : R →+* S) [IsLocalHom f] (a : R) (h : a ∈ maximalIdeal R) :\n    f a ∈ maximalIdeal S := fun H => h <| isUnit_of_map_unit f a H\n\n"}
{"name":"IsLocalRing.local_hom_TFAE","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : IsLocalRing R\ninst✝¹ : CommSemiring S\ninst✝ : IsLocalRing S\nf : RingHom R S\n⊢ (List.cons (IsLocalHom f) (List.cons (HasSubset.Subset (Set.image ⇑f ↑(IsLocalRing.maximalIdeal R).toAddSubmonoid) ↑(IsLocalRing.maximalIdeal S)) (List.cons (LE.le (Ideal.map f (IsLocalRing.maximalIdeal R)) (IsLocalRing.maximalIdeal S)) (List.cons (LE.le (IsLocalRing.maximalIdeal R) (Ideal.comap f (IsLocalRing.maximalIdeal S))) (List.cons (Eq (Ideal.comap f (IsLocalRing.maximalIdeal S)) (IsLocalRing.maximalIdeal R)) List.nil))))).TFAE","decl":"/-- A ring homomorphism between local rings is a local ring hom iff it reflects units,\ni.e. any preimage of a unit is still a unit. -/\n@[stacks 07BJ]\ntheorem local_hom_TFAE (f : R →+* S) :\n    List.TFAE\n      [IsLocalHom f, f '' (maximalIdeal R).1 ⊆ maximalIdeal S,\n        (maximalIdeal R).map f ≤ maximalIdeal S, maximalIdeal R ≤ (maximalIdeal S).comap f,\n        (maximalIdeal S).comap f = maximalIdeal R] := by\n  tfae_have 1 → 2\n  | _, _, ⟨a, ha, rfl⟩ => map_nonunit f a ha\n  tfae_have 2 → 4 := Set.image_subset_iff.1\n  tfae_have 3 ↔ 4 := Ideal.map_le_iff_le_comap\n  tfae_have 4 → 1 := fun h ↦ ⟨fun x => not_imp_not.1 (@h x)⟩\n  tfae_have 1 → 5\n  | _ => by ext; exact not_iff_not.2 (isUnit_map_iff f _)\n  tfae_have 5 → 4 := fun h ↦ le_of_eq h.symm\n  tfae_finish\n\n"}
{"name":"IsLocalRing.of_surjective","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : IsLocalRing R\ninst✝² : CommSemiring S\ninst✝¹ : Nontrivial S\nf : RingHom R S\ninst✝ : IsLocalHom f\nhf : Function.Surjective ⇑f\n⊢ IsLocalRing S","decl":"theorem of_surjective [CommSemiring R] [IsLocalRing R] [CommSemiring S] [Nontrivial S] (f : R →+* S)\n    [IsLocalHom f] (hf : Function.Surjective f) : IsLocalRing S :=\n  of_isUnit_or_isUnit_of_isUnit_add (by\n    intro a b hab\n    obtain ⟨a, rfl⟩ := hf a\n    obtain ⟨b, rfl⟩ := hf b\n    rw [← map_add] at hab\n    exact\n      (isUnit_or_isUnit_of_isUnit_add <| IsLocalHom.map_nonunit _ hab).imp f.isUnit_map\n        f.isUnit_map)\n\n"}
{"name":"IsLocalHom.of_surjective","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing S\ninst✝¹ : Nontrivial S\ninst✝ : IsLocalRing R\nf : RingHom R S\nhf : Function.Surjective ⇑f\n⊢ IsLocalHom f","decl":"lemma _root_.IsLocalHom.of_surjective [CommRing R] [CommRing S] [Nontrivial S] [IsLocalRing R]\n    (f : R →+* S) (hf : Function.Surjective f) :\n    IsLocalHom f := by\n  have := IsLocalRing.of_surjective' f ‹_›\n  refine ((local_hom_TFAE f).out 3 0).mp ?_\n  have := Ideal.comap_isMaximal_of_surjective f hf (K := maximalIdeal S)\n  exact ((maximal_ideal_unique R).unique (inferInstanceAs (maximalIdeal R).IsMaximal) this).le\n\n"}
{"name":"Function.Surjective.isLocalHom","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing S\ninst✝¹ : Nontrivial S\ninst✝ : IsLocalRing R\nf : RingHom R S\nhf : Function.Surjective ⇑f\n⊢ IsLocalHom f","decl":"alias _root_.Function.Surjective.isLocalHom := _root_.IsLocalHom.of_surjective\n\n"}
{"name":"IsLocalRing.surjective_units_map_of_local_ringHom","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nf : RingHom R S\nhf : Function.Surjective ⇑f\nh : IsLocalHom f\n⊢ Function.Surjective ⇑(Units.map ↑f)","decl":"/-- If `f : R →+* S` is a surjective local ring hom, then the induced units map is surjective. -/\ntheorem surjective_units_map_of_local_ringHom [CommRing R] [CommRing S] (f : R →+* S)\n    (hf : Function.Surjective f) (h : IsLocalHom f) :\n    Function.Surjective (Units.map <| f.toMonoidHom) := by\n  intro a\n  obtain ⟨b, hb⟩ := hf (a : S)\n  use (isUnit_of_map_unit f b (by rw [hb]; exact Units.isUnit _)).unit\n  ext\n  exact hb\n\n-- see Note [lower instance priority]\n"}
{"name":"IsLocalRing.instIsLocalHomRingHomOfNontrivial","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"K : Type u_4\nR : Type u_5\ninst✝² : DivisionRing K\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\nf : RingHom K R\n⊢ IsLocalHom f","decl":"/-- Every ring hom `f : K →+* R` from a division ring `K` to a nontrivial ring `R` is a\nlocal ring hom. -/\ninstance (priority := 100) {K R} [DivisionRing K] [CommRing R] [Nontrivial R]\n    (f : K →+* R) : IsLocalHom f where\n  map_nonunit r hr := by simpa only [isUnit_iff_ne_zero, ne_eq, map_eq_zero] using hr.ne_zero\n\n"}
{"name":"LocalRing.local_hom_TFAE","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : IsLocalRing R\ninst✝¹ : CommSemiring S\ninst✝ : IsLocalRing S\nf : RingHom R S\n⊢ (List.cons (IsLocalHom f) (List.cons (HasSubset.Subset (Set.image ⇑f ↑(IsLocalRing.maximalIdeal R).toAddSubmonoid) ↑(IsLocalRing.maximalIdeal S)) (List.cons (LE.le (Ideal.map f (IsLocalRing.maximalIdeal R)) (IsLocalRing.maximalIdeal S)) (List.cons (LE.le (IsLocalRing.maximalIdeal R) (Ideal.comap f (IsLocalRing.maximalIdeal S))) (List.cons (Eq (Ideal.comap f (IsLocalRing.maximalIdeal S)) (IsLocalRing.maximalIdeal R)) List.nil))))).TFAE","decl":"@[deprecated (since := \"2024-11-11\")] alias LocalRing.local_hom_TFAE := IsLocalRing.local_hom_TFAE\n"}
{"name":"LocalRing.of_surjective","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : IsLocalRing R\ninst✝² : CommSemiring S\ninst✝¹ : Nontrivial S\nf : RingHom R S\ninst✝ : IsLocalHom f\nhf : Function.Surjective ⇑f\n⊢ IsLocalRing S","decl":"@[deprecated (since := \"2024-11-11\")] alias LocalRing.of_surjective := IsLocalRing.of_surjective\n"}
{"name":"LocalRing.surjective_units_map_of_local_ringHom","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nf : RingHom R S\nhf : Function.Surjective ⇑f\nh : IsLocalHom f\n⊢ Function.Surjective ⇑(Units.map ↑f)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.surjective_units_map_of_local_ringHom :=\n  IsLocalRing.surjective_units_map_of_local_ringHom\n\n"}
{"name":"RingEquiv.isLocalRing","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"A : Type u_4\nB : Type u_5\ninst✝² : CommSemiring A\ninst✝¹ : IsLocalRing A\ninst✝ : CommSemiring B\ne : RingEquiv A B\n⊢ IsLocalRing B","decl":"protected theorem isLocalRing {A B : Type*} [CommSemiring A] [IsLocalRing A] [CommSemiring B]\n    (e : A ≃+* B) : IsLocalRing B :=\n  haveI := e.symm.toEquiv.nontrivial\n  IsLocalRing.of_surjective (e : A →+* B) e.surjective\n\n"}
{"name":"RingEquiv.localRing","module":"Mathlib.RingTheory.LocalRing.RingHom.Basic","initialProofState":"A : Type u_4\nB : Type u_5\ninst✝² : CommSemiring A\ninst✝¹ : IsLocalRing A\ninst✝ : CommSemiring B\ne : RingEquiv A B\n⊢ IsLocalRing B","decl":"@[deprecated (since := \"2024-11-09\")] alias localRing := RingEquiv.isLocalRing\n\n"}
