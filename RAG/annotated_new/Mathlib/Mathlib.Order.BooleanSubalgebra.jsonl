{"name":"BooleanSubalgebra.bot_mem'","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nself : BooleanSubalgebra α\n⊢ Membership.mem self.carrier Bot.bot","decl":"variable (α) in\n/-- A boolean subalgebra of a boolean algebra is a set containing the bottom and top elements, and\nclosed under suprema, infima and complements. -/\nstructure BooleanSubalgebra [BooleanAlgebra α] extends Sublattice α where\n  compl_mem' {a} : a ∈ carrier → aᶜ ∈ carrier\n  bot_mem' : ⊥ ∈ carrier\n\n"}
{"name":"BooleanSubalgebra.mk.injEq","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ntoSublattice✝ : Sublattice α\ncompl_mem'✝ : ∀ {a : α}, Membership.mem toSublattice✝.carrier a → Membership.mem toSublattice✝.carrier (HasCompl.compl a)\nbot_mem'✝ : Membership.mem toSublattice✝.carrier Bot.bot\ntoSublattice : Sublattice α\ncompl_mem' : ∀ {a : α}, Membership.mem toSublattice.carrier a → Membership.mem toSublattice.carrier (HasCompl.compl a)\nbot_mem' : Membership.mem toSublattice.carrier Bot.bot\n⊢ Eq (Eq { toSublattice := toSublattice✝, compl_mem' := compl_mem'✝, bot_mem' := bot_mem'✝ } { toSublattice := toSublattice, compl_mem' := compl_mem', bot_mem' := bot_mem' }) (Eq toSublattice✝ toSublattice)","decl":"variable (α) in\n/-- A boolean subalgebra of a boolean algebra is a set containing the bottom and top elements, and\nclosed under suprema, infima and complements. -/\nstructure BooleanSubalgebra [BooleanAlgebra α] extends Sublattice α where\n  compl_mem' {a} : a ∈ carrier → aᶜ ∈ carrier\n  bot_mem' : ⊥ ∈ carrier\n\n"}
{"name":"BooleanSubalgebra.compl_mem'","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nself : BooleanSubalgebra α\na : α\na✝ : Membership.mem self.carrier a\n⊢ Membership.mem self.carrier (HasCompl.compl a)","decl":"variable (α) in\n/-- A boolean subalgebra of a boolean algebra is a set containing the bottom and top elements, and\nclosed under suprema, infima and complements. -/\nstructure BooleanSubalgebra [BooleanAlgebra α] extends Sublattice α where\n  compl_mem' {a} : a ∈ carrier → aᶜ ∈ carrier\n  bot_mem' : ⊥ ∈ carrier\n\n"}
{"name":"BooleanSubalgebra.mk.inj","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ntoSublattice✝ : Sublattice α\ncompl_mem'✝ : ∀ {a : α}, Membership.mem toSublattice✝.carrier a → Membership.mem toSublattice✝.carrier (HasCompl.compl a)\nbot_mem'✝ : Membership.mem toSublattice✝.carrier Bot.bot\ntoSublattice : Sublattice α\ncompl_mem' : ∀ {a : α}, Membership.mem toSublattice.carrier a → Membership.mem toSublattice.carrier (HasCompl.compl a)\nbot_mem' : Membership.mem toSublattice.carrier Bot.bot\nx✝ : Eq { toSublattice := toSublattice✝, compl_mem' := compl_mem'✝, bot_mem' := bot_mem'✝ } { toSublattice := toSublattice, compl_mem' := compl_mem', bot_mem' := bot_mem' }\n⊢ Eq toSublattice✝ toSublattice","decl":"variable (α) in\n/-- A boolean subalgebra of a boolean algebra is a set containing the bottom and top elements, and\nclosed under suprema, infima and complements. -/\nstructure BooleanSubalgebra [BooleanAlgebra α] extends Sublattice α where\n  compl_mem' {a} : a ∈ carrier → aᶜ ∈ carrier\n  bot_mem' : ⊥ ∈ carrier\n\n"}
{"name":"BooleanSubalgebra.mk.sizeOf_spec","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝¹ : BooleanAlgebra α\ninst✝ : SizeOf α\ntoSublattice : Sublattice α\ncompl_mem' : ∀ {a : α}, Membership.mem toSublattice.carrier a → Membership.mem toSublattice.carrier (HasCompl.compl a)\nbot_mem' : Membership.mem toSublattice.carrier Bot.bot\n⊢ Eq (SizeOf.sizeOf { toSublattice := toSublattice, compl_mem' := compl_mem', bot_mem' := bot_mem' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toSublattice)) (SizeOf.sizeOf bot_mem'))","decl":"variable (α) in\n/-- A boolean subalgebra of a boolean algebra is a set containing the bottom and top elements, and\nclosed under suprema, infima and complements. -/\nstructure BooleanSubalgebra [BooleanAlgebra α] extends Sublattice α where\n  compl_mem' {a} : a ∈ carrier → aᶜ ∈ carrier\n  bot_mem' : ⊥ ∈ carrier\n\n"}
{"name":"BooleanSubalgebra.coe_inj","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\n⊢ Iff (Eq ↑L ↑M) (Eq L M)","decl":"lemma coe_inj : (L : Set α) = M ↔ L = M := SetLike.coe_set_eq\n\n"}
{"name":"BooleanSubalgebra.supClosed","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ SupClosed ↑L","decl":"@[simp] lemma supClosed (L : BooleanSubalgebra α) : SupClosed (L : Set α) := L.supClosed'\n"}
{"name":"BooleanSubalgebra.infClosed","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ InfClosed ↑L","decl":"@[simp] lemma infClosed (L : BooleanSubalgebra α) : InfClosed (L : Set α) := L.infClosed'\n\n"}
{"name":"BooleanSubalgebra.compl_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : α\nha : Membership.mem L a\n⊢ Membership.mem L (HasCompl.compl a)","decl":"lemma compl_mem (ha : a ∈ L) : aᶜ ∈ L := L.compl_mem' ha\n"}
{"name":"BooleanSubalgebra.compl_mem_iff","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : α\n⊢ Iff (Membership.mem L (HasCompl.compl a)) (Membership.mem L a)","decl":"@[simp] lemma compl_mem_iff : aᶜ ∈ L ↔ a ∈ L := ⟨fun ha ↦ by simpa using compl_mem ha, compl_mem⟩\n"}
{"name":"BooleanSubalgebra.bot_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Membership.mem L Bot.bot","decl":"@[simp] lemma bot_mem : ⊥ ∈ L := L.bot_mem'\n"}
{"name":"BooleanSubalgebra.top_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Membership.mem L Top.top","decl":"@[simp] lemma top_mem : ⊤ ∈ L := by simpa using compl_mem L.bot_mem\n"}
{"name":"BooleanSubalgebra.sup_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Membership.mem L (Max.max a b)","decl":"lemma sup_mem (ha : a ∈ L) (hb : b ∈ L) : a ⊔ b ∈ L := L.supClosed ha hb\n"}
{"name":"BooleanSubalgebra.inf_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Membership.mem L (Min.min a b)","decl":"lemma inf_mem (ha : a ∈ L) (hb : b ∈ L) : a ⊓ b ∈ L := L.infClosed ha hb\n"}
{"name":"BooleanSubalgebra.sdiff_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Membership.mem L (SDiff.sdiff a b)","decl":"lemma sdiff_mem (ha : a ∈ L) (hb : b ∈ L) : a \\ b ∈ L := by\n  simpa [sdiff_eq] using L.infClosed ha (compl_mem hb)\n"}
{"name":"BooleanSubalgebra.himp_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Membership.mem L (HImp.himp a b)","decl":"lemma himp_mem (ha : a ∈ L) (hb : b ∈ L) : a ⇨ b ∈ L := by\n  simpa [himp_eq] using L.supClosed hb (compl_mem ha)\n\n"}
{"name":"BooleanSubalgebra.mem_carrier","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : α\n⊢ Iff (Membership.mem L.carrier a) (Membership.mem L a)","decl":"lemma mem_carrier : a ∈ L.carrier ↔ a ∈ L := .rfl\n"}
{"name":"BooleanSubalgebra.mem_toSublattice","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : α\n⊢ Iff (Membership.mem L.toSublattice a) (Membership.mem L a)","decl":"@[simp] lemma mem_toSublattice : a ∈ L.toSublattice ↔ a ∈ L := .rfl\n"}
{"name":"BooleanSubalgebra.mem_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\na : α\nL : Sublattice α\nh_compl : ∀ {a : α}, Membership.mem L.carrier a → Membership.mem L.carrier (HasCompl.compl a)\nh_bot : Membership.mem L.carrier Bot.bot\n⊢ Iff (Membership.mem { toSublattice := L, compl_mem' := h_compl, bot_mem' := h_bot } a) (Membership.mem L a)","decl":"@[simp] lemma mem_mk {L : Sublattice α} (h_compl h_bot) : a ∈ mk L h_compl h_bot ↔ a ∈ L := .rfl\n"}
{"name":"BooleanSubalgebra.coe_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : Sublattice α\nh_compl : ∀ {a : α}, Membership.mem L.carrier a → Membership.mem L.carrier (HasCompl.compl a)\nh_bot : Membership.mem L.carrier Bot.bot\n⊢ Eq ↑{ toSublattice := L, compl_mem' := h_compl, bot_mem' := h_bot } ↑L","decl":"@[simp] lemma coe_mk (L : Sublattice α) (h_compl h_bot) : (mk L h_compl h_bot : Set α) = L := rfl\n"}
{"name":"BooleanSubalgebra.mk_le_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : Sublattice α\nhL_compl : ∀ {a : α}, Membership.mem L.carrier a → Membership.mem L.carrier (HasCompl.compl a)\nhL_bot : Membership.mem L.carrier Bot.bot\nhM_compl : ∀ {a : α}, Membership.mem M.carrier a → Membership.mem M.carrier (HasCompl.compl a)\nhM_bot : Membership.mem M.carrier Bot.bot\n⊢ Iff (LE.le { toSublattice := L, compl_mem' := hL_compl, bot_mem' := hL_bot } { toSublattice := M, compl_mem' := hM_compl, bot_mem' := hM_bot }) (LE.le L M)","decl":"@[simp] lemma mk_le_mk {L M : Sublattice α} (hL_compl hL_bot hM_compl hM_bot) :\n    mk L hL_compl hL_bot ≤ mk M hM_compl hM_bot ↔ L ≤ M := .rfl\n"}
{"name":"BooleanSubalgebra.mk_lt_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : Sublattice α\nhL_compl : ∀ {a : α}, Membership.mem L.carrier a → Membership.mem L.carrier (HasCompl.compl a)\nhL_bot : Membership.mem L.carrier Bot.bot\nhM_compl : ∀ {a : α}, Membership.mem M.carrier a → Membership.mem M.carrier (HasCompl.compl a)\nhM_bot : Membership.mem M.carrier Bot.bot\n⊢ Iff (LT.lt { toSublattice := L, compl_mem' := hL_compl, bot_mem' := hL_bot } { toSublattice := M, compl_mem' := hM_compl, bot_mem' := hM_bot }) (LT.lt L M)","decl":"@[simp] lemma mk_lt_mk{L M : Sublattice α} (hL_compl hL_bot hM_compl hM_bot) :\n    mk L hL_compl hL_bot < mk M hM_compl hM_bot ↔ L < M := .rfl\n\n"}
{"name":"BooleanSubalgebra.coe_copy","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\ns : Set α\nhs : Eq s ↑L\n⊢ Eq (↑(L.copy s hs)) s","decl":"@[simp, norm_cast]\nlemma coe_copy (L : BooleanSubalgebra α) (s : Set α) (hs) : L.copy s hs = s := rfl\n\n"}
{"name":"BooleanSubalgebra.copy_eq","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\ns : Set α\nhs : Eq s ↑L\n⊢ Eq (L.copy s hs) L","decl":"lemma copy_eq (L : BooleanSubalgebra α) (s : Set α) (hs) : L.copy s hs = L :=\n  SetLike.coe_injective hs\n\n"}
{"name":"BooleanSubalgebra.ext","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\na✝ : ∀ (a : α), Iff (Membership.mem L a) (Membership.mem M a)\n⊢ Eq L M","decl":"/-- Two boolean subalgebras are equal if they have the same elements. -/\nlemma ext : (∀ a, a ∈ L ↔ a ∈ M) → L = M := SetLike.ext\n\n"}
{"name":"BooleanSubalgebra.val_bot","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq (↑Bot.bot) Bot.bot","decl":"@[simp, norm_cast] lemma val_bot : (⊥ : L) = (⊥ : α) := rfl\n"}
{"name":"BooleanSubalgebra.val_top","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq (↑Top.top) Top.top","decl":"@[simp, norm_cast] lemma val_top : (⊤ : L) = (⊤ : α) := rfl\n"}
{"name":"BooleanSubalgebra.val_sup","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : Subtype fun x => Membership.mem L x\n⊢ Eq (↑(Max.max a b)) (Max.max ↑a ↑b)","decl":"@[simp, norm_cast] lemma val_sup (a b : L) : a ⊔ b = (a : α) ⊔ b := rfl\n"}
{"name":"BooleanSubalgebra.val_inf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : Subtype fun x => Membership.mem L x\n⊢ Eq (↑(Min.min a b)) (Min.min ↑a ↑b)","decl":"@[simp, norm_cast] lemma val_inf (a b : L) : a ⊓ b = (a : α) ⊓ b := rfl\n"}
{"name":"BooleanSubalgebra.val_compl","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : Subtype fun x => Membership.mem L x\n⊢ Eq (↑(HasCompl.compl a)) (HasCompl.compl ↑a)","decl":"@[simp, norm_cast] lemma val_compl (a : L) : aᶜ = (a : α)ᶜ := rfl\n"}
{"name":"BooleanSubalgebra.val_sdiff","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : Subtype fun x => Membership.mem L x\n⊢ Eq (↑(SDiff.sdiff a b)) (SDiff.sdiff ↑a ↑b)","decl":"@[simp, norm_cast] lemma val_sdiff (a b : L) : a \\ b = (a : α) \\ b := rfl\n"}
{"name":"BooleanSubalgebra.val_himp","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : Subtype fun x => Membership.mem L x\n⊢ Eq (↑(HImp.himp a b)) (HImp.himp ↑a ↑b)","decl":"@[simp, norm_cast] lemma val_himp (a b : L) : a ⇨ b = (a : α) ⇨ b := rfl\n\n"}
{"name":"BooleanSubalgebra.mk_bot","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq ⟨Bot.bot, ⋯⟩ Bot.bot","decl":"@[simp] lemma mk_bot : (⟨⊥, bot_mem⟩ : L) = ⊥ := rfl\n"}
{"name":"BooleanSubalgebra.mk_top","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq ⟨Top.top, ⋯⟩ Top.top","decl":"@[simp] lemma mk_top : (⟨⊤, top_mem⟩ : L) = ⊤ := rfl\n"}
{"name":"BooleanSubalgebra.mk_sup_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Eq (Max.max ⟨a, ha⟩ ⟨b, hb⟩) ⟨Max.max a b, ⋯⟩","decl":"@[simp] lemma mk_sup_mk (a b : α) (ha hb) : (⟨a, ha⟩ ⊔ ⟨b, hb⟩ : L) = ⟨a ⊔ b, L.supClosed ha hb⟩ :=\n  rfl\n"}
{"name":"BooleanSubalgebra.mk_inf_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Eq (Min.min ⟨a, ha⟩ ⟨b, hb⟩) ⟨Min.min a b, ⋯⟩","decl":"@[simp] lemma mk_inf_mk (a b : α) (ha hb) : (⟨a, ha⟩ ⊓ ⟨b, hb⟩ : L) = ⟨a ⊓ b, L.infClosed ha hb⟩ :=\n  rfl\n"}
{"name":"BooleanSubalgebra.compl_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : α\nha : Membership.mem L a\n⊢ Eq (HasCompl.compl ⟨a, ha⟩) ⟨HasCompl.compl a, ⋯⟩","decl":"@[simp] lemma compl_mk (a : α) (ha) : (⟨a, ha⟩ : L)ᶜ = ⟨aᶜ, compl_mem ha⟩ := rfl\n"}
{"name":"BooleanSubalgebra.mk_sdiff_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Eq (SDiff.sdiff ⟨a, ha⟩ ⟨b, hb⟩) ⟨SDiff.sdiff a b, ⋯⟩","decl":"@[simp] lemma mk_sdiff_mk (a b : α) (ha hb) : (⟨a, ha⟩ \\ ⟨b, hb⟩ : L) = ⟨a \\ b, sdiff_mem ha hb⟩ :=\n  rfl\n"}
{"name":"BooleanSubalgebra.mk_himp_mk","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na b : α\nha : Membership.mem L a\nhb : Membership.mem L b\n⊢ Eq (HImp.himp ⟨a, ha⟩ ⟨b, hb⟩) ⟨HImp.himp a b, ⋯⟩","decl":"@[simp] lemma mk_himp_mk (a b : α) (ha hb) : (⟨a, ha⟩ ⇨ ⟨b, hb⟩ : L) = ⟨a ⇨ b, himp_mem ha hb⟩ :=\n  rfl\n\n"}
{"name":"BooleanSubalgebra.coe_subtype","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq (⇑L.subtype) Subtype.val","decl":"@[simp, norm_cast] lemma coe_subtype (L : BooleanSubalgebra α) : L.subtype = ((↑) : L → α) := rfl\n"}
{"name":"BooleanSubalgebra.subtype_apply","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\na : Subtype fun x => Membership.mem L x\n⊢ Eq (L.subtype a) ↑a","decl":"lemma subtype_apply (L : BooleanSubalgebra α) (a : L) : L.subtype a = a := rfl\n\n"}
{"name":"BooleanSubalgebra.subtype_injective","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Function.Injective ⇑L.subtype","decl":"lemma subtype_injective (L : BooleanSubalgebra α) : Injective <| subtype L := Subtype.coe_injective\n\n"}
{"name":"BooleanSubalgebra.coe_inclusion","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\nh : LE.le L M\n⊢ Eq (⇑(BooleanSubalgebra.inclusion h)) (Set.inclusion h)","decl":"@[simp] lemma coe_inclusion (h : L ≤ M) : inclusion h = Set.inclusion h := rfl\n"}
{"name":"BooleanSubalgebra.inclusion_apply","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\nh : LE.le L M\na : Subtype fun x => Membership.mem L x\n⊢ Eq ((BooleanSubalgebra.inclusion h) a) (Set.inclusion h a)","decl":"lemma inclusion_apply (h : L ≤ M) (a : L) : inclusion h a = Set.inclusion h a := rfl\n\n"}
{"name":"BooleanSubalgebra.inclusion_injective","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\nh : LE.le L M\n⊢ Function.Injective ⇑(BooleanSubalgebra.inclusion h)","decl":"lemma inclusion_injective (h : L ≤ M) : Injective <| inclusion h := Set.inclusion_injective h\n\n"}
{"name":"BooleanSubalgebra.inclusion_rfl","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq (BooleanSubalgebra.inclusion ⋯) (BoundedLatticeHom.id (Subtype fun x => Membership.mem L x))","decl":"@[simp] lemma inclusion_rfl (L : BooleanSubalgebra α) : inclusion le_rfl = .id L := rfl\n"}
{"name":"BooleanSubalgebra.subtype_comp_inclusion","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\nh : LE.le L M\n⊢ Eq (M.subtype.comp (BooleanSubalgebra.inclusion h)) L.subtype","decl":"@[simp] lemma subtype_comp_inclusion (h : L ≤ M) : M.subtype.comp (inclusion h) = L.subtype := rfl\n\n"}
{"name":"BooleanSubalgebra.coe_top","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp, norm_cast] lemma coe_top : (⊤ : BooleanSubalgebra α) = (univ : Set α) := rfl\n"}
{"name":"BooleanSubalgebra.coe_bot","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\n⊢ Eq (↑Bot.bot) (Insert.insert Bot.bot (Singleton.singleton Top.top))","decl":"@[simp, norm_cast] lemma coe_bot : (⊥ : BooleanSubalgebra α) = ({⊥, ⊤} : Set α) := rfl\n"}
{"name":"BooleanSubalgebra.coe_inf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\n⊢ Eq (↑(Min.min L M)) (Inter.inter ↑L ↑M)","decl":"@[simp, norm_cast] lemma coe_inf (L M : BooleanSubalgebra α) : L ⊓ M = (L : Set α) ∩ M := rfl\n\n"}
{"name":"BooleanSubalgebra.coe_sInf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nS : Set (BooleanSubalgebra α)\n⊢ Eq (↑(InfSet.sInf S)) (Set.iInter fun L => Set.iInter fun h => ↑L)","decl":"@[simp, norm_cast]\nlemma coe_sInf (S : Set (BooleanSubalgebra α)) : sInf S = ⋂ L ∈ S, (L : Set α) := rfl\n\n"}
{"name":"BooleanSubalgebra.coe_iInf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\ninst✝ : BooleanAlgebra α\nf : ι → BooleanSubalgebra α\n⊢ Eq (↑(iInf fun i => f i)) (Set.iInter fun i => ↑(f i))","decl":"@[simp, norm_cast]\nlemma coe_iInf (f : ι → BooleanSubalgebra α) : ⨅ i, f i = ⋂ i, (f i : Set α) := by simp [iInf]\n\n"}
{"name":"BooleanSubalgebra.coe_eq_univ","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Iff (Eq (↑L) Set.univ) (Eq L Top.top)","decl":"@[simp, norm_cast] lemma coe_eq_univ : L = (univ : Set α) ↔ L = ⊤ := by rw [← coe_top, coe_inj]\n\n"}
{"name":"BooleanSubalgebra.mem_bot","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\na : α\n⊢ Iff (Membership.mem Bot.bot a) (Or (Eq a Bot.bot) (Eq a Top.top))","decl":"@[simp] lemma mem_bot : a ∈ (⊥ : BooleanSubalgebra α) ↔ a = ⊥ ∨ a = ⊤ := .rfl\n"}
{"name":"BooleanSubalgebra.mem_top","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\na : α\n⊢ Membership.mem Top.top a","decl":"@[simp] lemma mem_top : a ∈ (⊤ : BooleanSubalgebra α) := mem_univ _\n"}
{"name":"BooleanSubalgebra.mem_inf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL M : BooleanSubalgebra α\na : α\n⊢ Iff (Membership.mem (Min.min L M) a) (And (Membership.mem L a) (Membership.mem M a))","decl":"@[simp] lemma mem_inf : a ∈ L ⊓ M ↔ a ∈ L ∧ a ∈ M := .rfl\n"}
{"name":"BooleanSubalgebra.mem_sInf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\na : α\nS : Set (BooleanSubalgebra α)\n⊢ Iff (Membership.mem (InfSet.sInf S) a) (∀ (L : BooleanSubalgebra α), Membership.mem S L → Membership.mem L a)","decl":"@[simp] lemma mem_sInf {S : Set (BooleanSubalgebra α)} : a ∈ sInf S ↔ ∀ L ∈ S, a ∈ L := by\n  rw [← SetLike.mem_coe]; simp\n"}
{"name":"BooleanSubalgebra.mem_iInf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\ninst✝ : BooleanAlgebra α\na : α\nf : ι → BooleanSubalgebra α\n⊢ Iff (Membership.mem (iInf fun i => f i) a) (∀ (i : ι), Membership.mem (f i) a)","decl":"@[simp] lemma mem_iInf {f : ι → BooleanSubalgebra α} : a ∈ ⨅ i, f i ↔ ∀ i, a ∈ f i := by\n  rw [← SetLike.mem_coe]; simp\n\n"}
{"name":"BooleanSubalgebra.instSubsingletonOfIsEmpty","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝¹ : BooleanAlgebra α\ninst✝ : IsEmpty α\n⊢ Subsingleton (BooleanSubalgebra α)","decl":"instance [IsEmpty α] : Subsingleton (BooleanSubalgebra α) := SetLike.coe_injective.subsingleton\n"}
{"name":"BooleanSubalgebra.coe_comap","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra β\nf : BoundedLatticeHom α β\n⊢ Eq (↑(BooleanSubalgebra.comap f L)) (Set.preimage ⇑f ↑L)","decl":"@[simp, norm_cast]\nlemma coe_comap (L : BooleanSubalgebra β) (f : BoundedLatticeHom α β) : L.comap f = f ⁻¹' L := rfl\n\n"}
{"name":"BooleanSubalgebra.mem_comap","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\na : α\nL : BooleanSubalgebra β\n⊢ Iff (Membership.mem (BooleanSubalgebra.comap f L) a) (Membership.mem L (f a))","decl":"@[simp] lemma mem_comap {L : BooleanSubalgebra β} : a ∈ L.comap f ↔ f a ∈ L := .rfl\n\n"}
{"name":"BooleanSubalgebra.comap_mono","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\n⊢ Monotone (BooleanSubalgebra.comap f)","decl":"lemma comap_mono : Monotone (comap f) := fun _ _ ↦ preimage_mono\n\n"}
{"name":"BooleanSubalgebra.comap_id","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq (BooleanSubalgebra.comap (BoundedLatticeHom.id α) L) L","decl":"@[simp] lemma comap_id (L : BooleanSubalgebra α) : L.comap (BoundedLatticeHom.id _) = L := rfl\n\n"}
{"name":"BooleanSubalgebra.comap_comap","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : BooleanAlgebra α\ninst✝¹ : BooleanAlgebra β\ninst✝ : BooleanAlgebra γ\nL : BooleanSubalgebra γ\ng : BoundedLatticeHom β γ\nf : BoundedLatticeHom α β\n⊢ Eq (BooleanSubalgebra.comap f (BooleanSubalgebra.comap g L)) (BooleanSubalgebra.comap (g.comp f) L)","decl":"@[simp] lemma comap_comap (L : BooleanSubalgebra γ) (g : BoundedLatticeHom β γ)\n    (f : BoundedLatticeHom α β) : (L.comap g).comap f = L.comap (g.comp f) := rfl\n\n"}
{"name":"BooleanSubalgebra.coe_map","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\nL : BooleanSubalgebra α\n⊢ Eq (↑(BooleanSubalgebra.map f L)) (Set.image ⇑f ↑L)","decl":"@[simp] lemma coe_map (f : BoundedLatticeHom α β) (L : BooleanSubalgebra α) :\n    (L.map f : Set β) = f '' L := rfl\n\n"}
{"name":"BooleanSubalgebra.mem_map","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nf : BoundedLatticeHom α β\nb : β\n⊢ Iff (Membership.mem (BooleanSubalgebra.map f L) b) (Exists fun a => And (Membership.mem L a) (Eq (f a) b))","decl":"@[simp] lemma mem_map {b : β} : b ∈ L.map f ↔ ∃ a ∈ L, f a = b := .rfl\n\n"}
{"name":"BooleanSubalgebra.mem_map_of_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nf : BoundedLatticeHom α β\na : α\na✝ : Membership.mem L a\n⊢ Membership.mem (BooleanSubalgebra.map f L) (f a)","decl":"lemma mem_map_of_mem (f : BoundedLatticeHom α β) {a : α} : a ∈ L → f a ∈ L.map f :=\n  mem_image_of_mem f\n\n"}
{"name":"BooleanSubalgebra.apply_coe_mem_map","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nf : BoundedLatticeHom α β\na : Subtype fun x => Membership.mem L x\n⊢ Membership.mem (BooleanSubalgebra.map f L) (f ↑a)","decl":"lemma apply_coe_mem_map (f : BoundedLatticeHom α β) (a : L) : f a ∈ L.map f :=\n  mem_map_of_mem f a.prop\n\n"}
{"name":"BooleanSubalgebra.map_mono","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\n⊢ Monotone (BooleanSubalgebra.map f)","decl":"lemma map_mono : Monotone (map f) := fun _ _ ↦ image_subset _\n\n"}
{"name":"BooleanSubalgebra.map_id","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\n⊢ Eq (BooleanSubalgebra.map (BoundedLatticeHom.id α) L) L","decl":"@[simp] lemma map_id : L.map (.id α) = L := SetLike.coe_injective <| image_id _\n\n"}
{"name":"BooleanSubalgebra.map_map","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : BooleanAlgebra α\ninst✝¹ : BooleanAlgebra β\ninst✝ : BooleanAlgebra γ\nL : BooleanSubalgebra α\ng : BoundedLatticeHom β γ\nf : BoundedLatticeHom α β\n⊢ Eq (BooleanSubalgebra.map g (BooleanSubalgebra.map f L)) (BooleanSubalgebra.map (g.comp f) L)","decl":"@[simp] lemma map_map (g : BoundedLatticeHom β γ) (f : BoundedLatticeHom α β) :\n    (L.map f).map g = L.map (g.comp f) := SetLike.coe_injective <| image_image _ _ _\n\n"}
{"name":"BooleanSubalgebra.mem_map_equiv","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nf : OrderIso α β\na : β\n⊢ Iff\n    (Membership.mem\n      (BooleanSubalgebra.map\n        (let __src := { toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯ };\n        { toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n        L)\n      a)\n    (Membership.mem L (f.symm a))","decl":"lemma mem_map_equiv {f : α ≃o β} {a : β} : a ∈ L.map f ↔ f.symm a ∈ L := Set.mem_image_equiv\n\n"}
{"name":"BooleanSubalgebra.apply_mem_map_iff","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nf : BoundedLatticeHom α β\na : α\nhf : Function.Injective ⇑f\n⊢ Iff (Membership.mem (BooleanSubalgebra.map f L) (f a)) (Membership.mem L a)","decl":"lemma apply_mem_map_iff (hf : Injective f) : f a ∈ L.map f ↔ a ∈ L := hf.mem_set_image\n\n"}
{"name":"BooleanSubalgebra.map_equiv_eq_comap_symm","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : OrderIso α β\nL : BooleanSubalgebra α\n⊢ Eq\n    (BooleanSubalgebra.map\n      (let __src := { toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯ };\n      { toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n      L)\n    (BooleanSubalgebra.comap\n      (let __src := { toFun := ⇑f.symm, map_sup' := ⋯, map_inf' := ⋯ };\n      { toFun := ⇑f.symm, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n      L)","decl":"lemma map_equiv_eq_comap_symm (f : α ≃o β) (L : BooleanSubalgebra α) :\n    L.map f = L.comap (f.symm : BoundedLatticeHom β α) :=\n  SetLike.coe_injective <| f.toEquiv.image_eq_preimage L\n\n"}
{"name":"BooleanSubalgebra.comap_equiv_eq_map_symm","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : OrderIso β α\nL : BooleanSubalgebra α\n⊢ Eq\n    (BooleanSubalgebra.comap\n      (let __src := { toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯ };\n      { toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n      L)\n    (BooleanSubalgebra.map\n      (let __src := { toFun := ⇑f.symm, map_sup' := ⋯, map_inf' := ⋯ };\n      { toFun := ⇑f.symm, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n      L)","decl":"lemma comap_equiv_eq_map_symm (f : β ≃o α) (L : BooleanSubalgebra α) :\n    L.comap f = L.map (f.symm : BoundedLatticeHom α β) := (map_equiv_eq_comap_symm f.symm L).symm\n\n"}
{"name":"BooleanSubalgebra.map_symm_eq_iff_eq_map","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nM : BooleanSubalgebra β\ne : OrderIso β α\n⊢ Iff\n    (Eq\n      (BooleanSubalgebra.map\n        (let __src := { toFun := ⇑e.symm, map_sup' := ⋯, map_inf' := ⋯ };\n        { toFun := ⇑e.symm, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n        L)\n      M)\n    (Eq L\n      (BooleanSubalgebra.map\n        (let __src := { toFun := ⇑e, map_sup' := ⋯, map_inf' := ⋯ };\n        { toFun := ⇑e, map_sup' := ⋯, map_inf' := ⋯, map_top' := ⋯, map_bot' := ⋯ })\n        M))","decl":"lemma map_symm_eq_iff_eq_map {M : BooleanSubalgebra β} {e : β ≃o α} :\n    L.map ↑e.symm = M ↔ L = M.map ↑e := by\n  simp_rw [← coe_inj]; exact (Equiv.eq_image_iff_symm_image_eq _ _ _).symm\n\n"}
{"name":"BooleanSubalgebra.map_le_iff_le_comap","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL : BooleanSubalgebra α\nf : BoundedLatticeHom α β\nM : BooleanSubalgebra β\n⊢ Iff (LE.le (BooleanSubalgebra.map f L) M) (LE.le L (BooleanSubalgebra.comap f M))","decl":"lemma map_le_iff_le_comap {f : BoundedLatticeHom α β} {M : BooleanSubalgebra β} :\n    L.map f ≤ M ↔ L ≤ M.comap f := image_subset_iff\n\n"}
{"name":"BooleanSubalgebra.gc_map_comap","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\n⊢ GaloisConnection (BooleanSubalgebra.map f) (BooleanSubalgebra.comap f)","decl":"lemma gc_map_comap (f : BoundedLatticeHom α β) : GaloisConnection (map f) (comap f) :=\n  fun _ _ ↦ map_le_iff_le_comap\n\n"}
{"name":"BooleanSubalgebra.map_bot","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\n⊢ Eq (BooleanSubalgebra.map f Bot.bot) Bot.bot","decl":"@[simp] lemma map_bot (f : BoundedLatticeHom α β) : (⊥ : BooleanSubalgebra α).map f = ⊥ :=\n  (gc_map_comap f).l_bot\n\n"}
{"name":"BooleanSubalgebra.map_sup","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\nL M : BooleanSubalgebra α\n⊢ Eq (BooleanSubalgebra.map f (Max.max L M)) (Max.max (BooleanSubalgebra.map f L) (BooleanSubalgebra.map f M))","decl":"lemma map_sup (f : BoundedLatticeHom α β) (L M : BooleanSubalgebra α) :\n    (L ⊔ M).map f = L.map f ⊔ M.map f := (gc_map_comap f).l_sup\n\n"}
{"name":"BooleanSubalgebra.map_iSup","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\nL : ι → BooleanSubalgebra α\n⊢ Eq (BooleanSubalgebra.map f (iSup fun i => L i)) (iSup fun i => BooleanSubalgebra.map f (L i))","decl":"lemma map_iSup (f : BoundedLatticeHom α β) (L : ι → BooleanSubalgebra α) :\n    (⨆ i, L i).map f = ⨆ i, (L i).map f := (gc_map_comap f).l_iSup\n\n"}
{"name":"BooleanSubalgebra.comap_top","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\n⊢ Eq (BooleanSubalgebra.comap f Top.top) Top.top","decl":"@[simp] lemma comap_top (f : BoundedLatticeHom α β) : (⊤ : BooleanSubalgebra β).comap f = ⊤ :=\n  (gc_map_comap f).u_top\n\n"}
{"name":"BooleanSubalgebra.comap_inf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL M : BooleanSubalgebra β\nf : BoundedLatticeHom α β\n⊢ Eq (BooleanSubalgebra.comap f (Min.min L M)) (Min.min (BooleanSubalgebra.comap f L) (BooleanSubalgebra.comap f M))","decl":"lemma comap_inf (L M : BooleanSubalgebra β) (f : BoundedLatticeHom α β) :\n    (L ⊓ M).comap f = L.comap f ⊓ M.comap f := (gc_map_comap f).u_inf\n\n"}
{"name":"BooleanSubalgebra.comap_iInf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\nL : ι → BooleanSubalgebra β\n⊢ Eq (BooleanSubalgebra.comap f (iInf fun i => L i)) (iInf fun i => BooleanSubalgebra.comap f (L i))","decl":"lemma comap_iInf (f : BoundedLatticeHom α β) (L : ι → BooleanSubalgebra β) :\n    (⨅ i, L i).comap f = ⨅ i, (L i).comap f := (gc_map_comap f).u_iInf\n\n"}
{"name":"BooleanSubalgebra.map_inf_le","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL M : BooleanSubalgebra α\nf : BoundedLatticeHom α β\n⊢ LE.le (BooleanSubalgebra.map f (Min.min L M)) (Min.min (BooleanSubalgebra.map f L) (BooleanSubalgebra.map f M))","decl":"lemma map_inf_le (L M : BooleanSubalgebra α) (f : BoundedLatticeHom α β) :\n    map f (L ⊓ M) ≤ map f L ⊓ map f M := map_mono.map_inf_le _ _\n\n"}
{"name":"BooleanSubalgebra.le_comap_sup","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL M : BooleanSubalgebra β\nf : BoundedLatticeHom α β\n⊢ LE.le (Max.max (BooleanSubalgebra.comap f L) (BooleanSubalgebra.comap f M)) (BooleanSubalgebra.comap f (Max.max L M))","decl":"lemma le_comap_sup (L M : BooleanSubalgebra β) (f : BoundedLatticeHom α β) :\n    comap f L ⊔ comap f M ≤ comap f (L ⊔ M) := comap_mono.le_map_sup _ _\n\n"}
{"name":"BooleanSubalgebra.le_comap_iSup","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\nL : ι → BooleanSubalgebra β\n⊢ LE.le (iSup fun i => BooleanSubalgebra.comap f (L i)) (BooleanSubalgebra.comap f (iSup fun i => L i))","decl":"lemma le_comap_iSup (f : BoundedLatticeHom α β) (L : ι → BooleanSubalgebra β) :\n    ⨆ i, (L i).comap f ≤ (⨆ i, L i).comap f := comap_mono.le_map_iSup\n\n"}
{"name":"BooleanSubalgebra.map_inf","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nL M : BooleanSubalgebra α\nf : BoundedLatticeHom α β\nhf : Function.Injective ⇑f\n⊢ Eq (BooleanSubalgebra.map f (Min.min L M)) (Min.min (BooleanSubalgebra.map f L) (BooleanSubalgebra.map f M))","decl":"lemma map_inf (L M : BooleanSubalgebra α) (f : BoundedLatticeHom α β) (hf : Injective f) :\n    map f (L ⊓ M) = map f L ⊓ map f M := by\n  rw [← SetLike.coe_set_eq]\n  simp [Set.image_inter hf]\n\n"}
{"name":"BooleanSubalgebra.map_top","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BooleanAlgebra α\ninst✝ : BooleanAlgebra β\nf : BoundedLatticeHom α β\nh : Function.Surjective ⇑f\n⊢ Eq (BooleanSubalgebra.map f Top.top) Top.top","decl":"lemma map_top (f : BoundedLatticeHom α β) (h : Surjective f) : BooleanSubalgebra.map f ⊤ = ⊤ :=\n  SetLike.coe_injective <| by simp [h.range_eq]\n\n"}
{"name":"BooleanSubalgebra.mem_closure","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\nx : α\n⊢ Iff (Membership.mem (BooleanSubalgebra.closure s) x) (∀ ⦃L : BooleanSubalgebra α⦄, HasSubset.Subset s ↑L → Membership.mem L x)","decl":"lemma mem_closure {x : α} : x ∈ closure s ↔ ∀ ⦃L : BooleanSubalgebra α⦄, s ⊆ L → x ∈ L := mem_sInf\n\n"}
{"name":"BooleanSubalgebra.subset_closure","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\n⊢ HasSubset.Subset s ↑(BooleanSubalgebra.closure s)","decl":"@[aesop safe 20 apply (rule_sets := [SetLike])]\nlemma subset_closure : s ⊆ closure s := fun _ hx ↦ mem_closure.2 fun _ hK ↦ hK hx\n\n"}
{"name":"BooleanSubalgebra.closure_le","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nL : BooleanSubalgebra α\ns : Set α\n⊢ Iff (LE.le (BooleanSubalgebra.closure s) L) (HasSubset.Subset s ↑L)","decl":"@[simp] lemma closure_le : closure s ≤ L ↔ s ⊆ L := ⟨subset_closure.trans, fun h ↦ sInf_le h⟩\n\n"}
{"name":"BooleanSubalgebra.closure_mono","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\nt s : Set α\nhst : HasSubset.Subset s t\n⊢ LE.le (BooleanSubalgebra.closure s) (BooleanSubalgebra.closure t)","decl":"lemma closure_mono (hst : s ⊆ t) : closure s ≤ closure t := sInf_le_sInf fun _L ↦ hst.trans\n\n"}
{"name":"BooleanSubalgebra.latticeClosure_subset_closure","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\n⊢ HasSubset.Subset (latticeClosure s) ↑(BooleanSubalgebra.closure s)","decl":"lemma latticeClosure_subset_closure : latticeClosure s ⊆ closure s :=\n  latticeClosure_min subset_closure (closure s).isSublattice\n\n"}
{"name":"BooleanSubalgebra.closure_latticeClosure","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\n⊢ Eq (BooleanSubalgebra.closure (latticeClosure s)) (BooleanSubalgebra.closure s)","decl":"@[simp] lemma closure_latticeClosure (s : Set α) : closure (latticeClosure s) = closure s :=\n  le_antisymm (closure_le.2 latticeClosure_subset_closure) (closure_mono subset_latticeClosure)\n\n"}
{"name":"BooleanSubalgebra.closure_bot_sup_induction","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\np : (g : α) → Membership.mem (BooleanSubalgebra.closure s) g → Prop\nmem : ∀ (x : α) (hx : Membership.mem s x), p x ⋯\nbot : p Bot.bot ⋯\nsup : ∀ (x : α) (hx : Membership.mem (BooleanSubalgebra.closure s) x) (y : α) (hy : Membership.mem (BooleanSubalgebra.closure s) y), p x hx → p y hy → p (Max.max x y) ⋯\ncompl : ∀ (x : α) (hx : Membership.mem (BooleanSubalgebra.closure s) x), p x hx → p (HasCompl.compl x) ⋯\nx : α\nhx : Membership.mem (BooleanSubalgebra.closure s) x\n⊢ p x hx","decl":"/-- An induction principle for closure membership. If `p` holds for `⊥` and all elements of `s`, and\nis preserved under suprema and complement, then `p` holds for all elements of the closure of `s`. -/\n@[elab_as_elim]\nlemma closure_bot_sup_induction {p : ∀ g ∈ closure s, Prop} (mem : ∀ x hx, p x (subset_closure hx))\n    (bot : p ⊥ bot_mem)\n    (sup : ∀ x hx y hy, p x hx → p y hy → p (x ⊔ y) (supClosed _ hx hy))\n    (compl : ∀ x hx, p x hx → p xᶜ (compl_mem hx)) {x} (hx : x ∈ closure s) : p x hx :=\n  have inf ⦃x hx y hy⦄ (hx' : p x hx) (hy' : p y hy) : p (x ⊓ y) (infClosed _ hx hy) := by\n    simpa using compl _ _ <| sup _ _ _ _ (compl _ _ hx') (compl _ _ hy')\n  let L : BooleanSubalgebra α :=\n    { carrier := { x | ∃ hx, p x hx }\n      supClosed' := fun _a ⟨_, ha⟩ _b ⟨_, hb⟩ ↦ ⟨_, sup _ _ _ _ ha hb⟩\n      infClosed' := fun _a ⟨_, ha⟩ _b ⟨_, hb⟩ ↦ ⟨_, inf ha hb⟩\n      bot_mem' := ⟨_, bot⟩\n      compl_mem' := fun ⟨_, hb⟩ ↦ ⟨_, compl _ _ hb⟩ }\n  closure_le (L := L).mpr (fun y hy ↦ ⟨subset_closure hy, mem y hy⟩) hx |>.elim fun _ ↦ id\n\n"}
{"name":"BooleanSubalgebra.mem_closure_iff_sup_sdiff","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\nisSublattice : IsSublattice s\nbot_mem : Membership.mem s Bot.bot\ntop_mem : Membership.mem s Top.top\na : α\n⊢ Iff (Membership.mem (BooleanSubalgebra.closure s) a) (Exists fun t => Eq a (t.sup fun x => SDiff.sdiff ↑x.1 ↑x.2))","decl":"theorem mem_closure_iff_sup_sdiff {a : α} :\n    a ∈ closure s ↔ ∃ t : Finset (s × s), a = t.sup fun x ↦ x.1.1 \\ x.2.1 := by\n  classical\n  refine ⟨closure_bot_sup_induction\n    (fun x h ↦ ⟨{(⟨x, h⟩, ⟨⊥, bot_mem⟩)}, by simp⟩) ⟨∅, by simp⟩ ?_ ?_, ?_⟩\n  · rintro ⟨t, rfl⟩\n    exact t.sup_mem _ (subset_closure bot_mem) (fun _ h _ ↦ sup_mem h) _\n      fun x hx ↦ sdiff_mem (subset_closure x.1.2) (subset_closure x.2.2)\n  · rintro _ - _ - ⟨t₁, rfl⟩ ⟨t₂, rfl⟩\n    exact ⟨t₁ ∪ t₂, by rw [Finset.sup_union]⟩\n  rintro x - ⟨t, rfl⟩\n  refine t.induction ⟨{(⟨⊤, top_mem⟩, ⟨⊥, bot_mem⟩)}, by simp⟩ fun ⟨x, y⟩ t _ ⟨tc, eq⟩ ↦ ?_\n  simp_rw [Finset.sup_insert, compl_sup, eq]\n  refine tc.induction ⟨∅, by simp⟩ fun ⟨z, w⟩ tc _ ⟨t, eq⟩ ↦ ?_\n  simp_rw [Finset.sup_insert, inf_sup_left, eq]\n  use {(z, ⟨_, isSublattice.supClosed x.2 w.2⟩), (⟨_, isSublattice.infClosed y.2 z.2⟩, w)} ∪ t\n  simp_rw [Finset.sup_union, Finset.sup_insert, Finset.sup_singleton, sdiff_eq,\n    compl_sup, inf_left_comm z.1, compl_inf, compl_compl, inf_sup_right, inf_assoc]\n\n"}
{"name":"BooleanSubalgebra.closure_sdiff_sup_induction","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : BooleanAlgebra α\ns : Set α\nisSublattice : IsSublattice s\nbot_mem : Membership.mem s Bot.bot\ntop_mem : Membership.mem s Top.top\np : (g : α) → Membership.mem (BooleanSubalgebra.closure s) g → Prop\nsdiff : ∀ (x : α) (hx : Membership.mem s x) (y : α) (hy : Membership.mem s y), p (SDiff.sdiff x y) ⋯\nsup : ∀ (x : α) (hx : Membership.mem (BooleanSubalgebra.closure s) x) (y : α) (hy : Membership.mem (BooleanSubalgebra.closure s) y), p x hx → p y hy → p (Max.max x y) ⋯\nx : α\nhx : Membership.mem (BooleanSubalgebra.closure s) x\n⊢ p x hx","decl":"@[elab_as_elim] theorem closure_sdiff_sup_induction {p : ∀ g ∈ closure s, Prop}\n    (sdiff : ∀ x hx y hy, p (x \\ y) (sdiff_mem (subset_closure hx) (subset_closure hy)))\n    (sup : ∀ x hx y hy, p x hx → p y hy → p (x ⊔ y) (sup_mem hx hy))\n    (x) (hx : x ∈ closure s) : p x hx := by\n  obtain ⟨t, rfl⟩ := (mem_closure_iff_sup_sdiff isSublattice bot_mem top_mem).mp hx\n  revert hx\n  classical\n  refine t.induction (by simpa using sdiff _ bot_mem _ bot_mem) fun x t _ ih hxt ↦ ?_\n  simp only [Finset.sup_insert] at hxt ⊢\n  exact sup _ _ _ ((mem_closure_iff_sup_sdiff isSublattice bot_mem top_mem).mpr ⟨_, rfl⟩)\n    (sdiff _ x.1.2 _ x.2.2) (ih _)\n\n"}
{"name":"BooleanSubalgebra.iSup_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\ninst✝¹ : CompleteBooleanAlgebra α\nL : BooleanSubalgebra α\nf : ι → α\ninst✝ : Finite ι\nhf : ∀ (i : ι), Membership.mem L (f i)\n⊢ Membership.mem L (iSup fun i => f i)","decl":"lemma iSup_mem [Finite ι] (hf : ∀ i, f i ∈ L) : ⨆ i, f i ∈ L := L.supClosed.iSup_mem bot_mem hf\n"}
{"name":"BooleanSubalgebra.iInf_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"ι : Sort u_1\nα : Type u_2\ninst✝¹ : CompleteBooleanAlgebra α\nL : BooleanSubalgebra α\nf : ι → α\ninst✝ : Finite ι\nhf : ∀ (i : ι), Membership.mem L (f i)\n⊢ Membership.mem L (iInf fun i => f i)","decl":"lemma iInf_mem [Finite ι] (hf : ∀ i, f i ∈ L) : ⨅ i, f i ∈ L := L.infClosed.iInf_mem top_mem hf\n"}
{"name":"BooleanSubalgebra.sSup_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : CompleteBooleanAlgebra α\nL : BooleanSubalgebra α\ns : Set α\nhs : s.Finite\nhsL : HasSubset.Subset s ↑L\n⊢ Membership.mem L (SupSet.sSup s)","decl":"lemma sSup_mem (hs : s.Finite) (hsL : s ⊆ L) : sSup s ∈ L := L.supClosed.sSup_mem hs bot_mem hsL\n"}
{"name":"BooleanSubalgebra.sInf_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : CompleteBooleanAlgebra α\nL : BooleanSubalgebra α\ns : Set α\nhs : s.Finite\nhsL : HasSubset.Subset s ↑L\n⊢ Membership.mem L (InfSet.sInf s)","decl":"lemma sInf_mem (hs : s.Finite) (hsL : s ⊆ L) : sInf s ∈ L := L.infClosed.sInf_mem hs top_mem hsL\n\n"}
{"name":"BooleanSubalgebra.biSup_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : CompleteBooleanAlgebra α\nL : BooleanSubalgebra α\nι : Type u_5\nt : Set ι\nf : ι → α\nht : t.Finite\nhf : ∀ (i : ι), Membership.mem t i → Membership.mem L (f i)\n⊢ Membership.mem L (iSup fun i => iSup fun h => f i)","decl":"lemma biSup_mem {ι : Type*} {t : Set ι} {f : ι → α} (ht : t.Finite) (hf : ∀ i ∈ t, f i ∈ L) :\n    ⨆ i ∈ t, f i ∈ L := L.supClosed.biSup_mem ht bot_mem hf\n\n"}
{"name":"BooleanSubalgebra.biInf_mem","module":"Mathlib.Order.BooleanSubalgebra","initialProofState":"α : Type u_2\ninst✝ : CompleteBooleanAlgebra α\nL : BooleanSubalgebra α\nι : Type u_5\nt : Set ι\nf : ι → α\nht : t.Finite\nhf : ∀ (i : ι), Membership.mem t i → Membership.mem L (f i)\n⊢ Membership.mem L (iInf fun i => iInf fun h => f i)","decl":"lemma biInf_mem {ι : Type*} {t : Set ι} {f : ι → α} (ht : t.Finite) (hf : ∀ i ∈ t, f i ∈ L) :\n    ⨅ i ∈ t, f i ∈ L := L.infClosed.biInf_mem ht top_mem hf\n\n"}
