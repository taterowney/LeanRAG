{"name":"Polynomial.HasSeparableContraction.isSeparableContraction","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : CommSemiring F\nq : Nat\nf : Polynomial F\nhf : Polynomial.HasSeparableContraction q f\n⊢ Polynomial.IsSeparableContraction q f hf.contraction","decl":"/-- The `HasSeparableContraction.contraction` is indeed a separable contraction. -/\ntheorem HasSeparableContraction.isSeparableContraction :\n    IsSeparableContraction q f hf.contraction := Classical.choose_spec hf\n\n"}
{"name":"Polynomial.IsSeparableContraction.dvd_degree'","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : CommSemiring F\nq : Nat\nf g : Polynomial F\nhf : Polynomial.IsSeparableContraction q f g\n⊢ Exists fun m => Eq (HMul.hMul g.natDegree (HPow.hPow q m)) f.natDegree","decl":"/-- The separable degree divides the degree, in function of the exponential characteristic of F. -/\ntheorem IsSeparableContraction.dvd_degree' {g} (hf : IsSeparableContraction q f g) :\n    ∃ m : ℕ, g.natDegree * q ^ m = f.natDegree := by\n  obtain ⟨m, rfl⟩ := hf.2\n  use m\n  rw [natDegree_expand]\n\n"}
{"name":"Polynomial.HasSeparableContraction.dvd_degree'","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : CommSemiring F\nq : Nat\nf : Polynomial F\nhf : Polynomial.HasSeparableContraction q f\n⊢ Exists fun m => Eq (HMul.hMul hf.degree (HPow.hPow q m)) f.natDegree","decl":"theorem HasSeparableContraction.dvd_degree' : ∃ m : ℕ, hf.degree * q ^ m = f.natDegree :=\n  (Classical.choose_spec hf).dvd_degree'\n\n"}
{"name":"Polynomial.HasSeparableContraction.dvd_degree","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : CommSemiring F\nq : Nat\nf : Polynomial F\nhf : Polynomial.HasSeparableContraction q f\n⊢ Dvd.dvd hf.degree f.natDegree","decl":"/-- The separable degree divides the degree. -/\ntheorem HasSeparableContraction.dvd_degree : hf.degree ∣ f.natDegree :=\n  let ⟨a, ha⟩ := hf.dvd_degree'\n  Dvd.intro (q ^ a) ha\n\n"}
{"name":"Polynomial.HasSeparableContraction.eq_degree","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : CommSemiring F\nf : Polynomial F\nhf : Polynomial.HasSeparableContraction 1 f\n⊢ Eq hf.degree f.natDegree","decl":"/-- In exponential characteristic one, the separable degree equals the degree. -/\ntheorem HasSeparableContraction.eq_degree {f : F[X]} (hf : HasSeparableContraction 1 f) :\n    hf.degree = f.natDegree := by\n  let ⟨a, ha⟩ := hf.dvd_degree'\n  rw [← ha, one_pow a, mul_one]\n\n"}
{"name":"Irreducible.hasSeparableContraction","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : Field F\nq : Nat\nhF : ExpChar F q\nf : Polynomial F\nirred : Irreducible f\n⊢ Polynomial.HasSeparableContraction q f","decl":"/-- Every irreducible polynomial can be contracted to a separable polynomial. -/\n@[stacks 09H0]\ntheorem _root_.Irreducible.hasSeparableContraction (q : ℕ) [hF : ExpChar F q] {f : F[X]}\n    (irred : Irreducible f) : HasSeparableContraction q f := by\n  cases hF\n  · exact ⟨f, irred.separable, ⟨0, by rw [pow_zero, expand_one]⟩⟩\n  · rcases exists_separable_of_irreducible q irred ‹q.Prime›.ne_zero with ⟨n, g, hgs, hge⟩\n    exact ⟨g, hgs, n, hge⟩\n\n"}
{"name":"Polynomial.contraction_degree_eq_or_insep","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝¹ : Field F\nq : Nat\nhq : NeZero q\ninst✝ : CharP F q\ng g' : Polynomial F\nm m' : Nat\nh_expand : Eq ((Polynomial.expand F (HPow.hPow q m)) g) ((Polynomial.expand F (HPow.hPow q m')) g')\nhg : g.Separable\nhg' : g'.Separable\n⊢ Eq g.natDegree g'.natDegree","decl":"/-- If two expansions (along the positive characteristic) of two separable polynomials `g` and `g'`\nagree, then they have the same degree. -/\ntheorem contraction_degree_eq_or_insep [hq : NeZero q] [CharP F q] (g g' : F[X]) (m m' : ℕ)\n    (h_expand : expand F (q ^ m) g = expand F (q ^ m') g') (hg : g.Separable) (hg' : g'.Separable) :\n    g.natDegree = g'.natDegree := by\n  wlog hm : m ≤ m'\n  · exact (this q g' g m' m h_expand.symm hg' hg (le_of_not_le hm)).symm\n  obtain ⟨s, rfl⟩ := exists_add_of_le hm\n  rw [pow_add, expand_mul, expand_inj (pow_pos (NeZero.pos q) m)] at h_expand\n  subst h_expand\n  rcases isUnit_or_eq_zero_of_separable_expand q s (NeZero.pos q) hg with (h | rfl)\n  · rw [natDegree_expand, natDegree_eq_zero_of_isUnit h, zero_mul]\n  · rw [natDegree_expand, pow_zero, mul_one]\n\n"}
{"name":"Polynomial.IsSeparableContraction.degree_eq","module":"Mathlib.RingTheory.Polynomial.SeparableDegree","initialProofState":"F : Type u_1\ninst✝ : Field F\nq : Nat\nf : Polynomial F\nhf : Polynomial.HasSeparableContraction q f\nhF : ExpChar F q\ng : Polynomial F\nhg : Polynomial.IsSeparableContraction q f g\n⊢ Eq g.natDegree hf.degree","decl":"/-- The separable degree equals the degree of any separable contraction, i.e., it is unique. -/\ntheorem IsSeparableContraction.degree_eq [hF : ExpChar F q] (g : F[X])\n    (hg : IsSeparableContraction q f g) : g.natDegree = hf.degree := by\n  cases hF\n  · rcases hg with ⟨_, m, hm⟩\n    rw [one_pow, expand_one] at hm\n    rw [hf.eq_degree, hm]\n  · rcases hg with ⟨hg, m, hm⟩\n    let g' := Classical.choose hf\n    obtain ⟨hg', m', hm'⟩ := Classical.choose_spec hf\n    haveI : Fact q.Prime := ⟨by assumption⟩\n    refine contraction_degree_eq_or_insep q g g' m m' ?_ hg hg'\n    rw [hm, hm']\n\n"}
