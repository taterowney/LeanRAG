{"name":"WithTop.coe_sub","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Bot α\na b : α\n⊢ Eq (↑(HSub.hSub a b)) (HSub.hSub ↑a ↑b)","decl":"@[simp, norm_cast]\ntheorem coe_sub {a b : α} : (↑(a - b) : WithTop α) = ↑a - ↑b :=\n  rfl\n\n"}
{"name":"WithTop.top_sub_coe","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Bot α\na : α\n⊢ Eq (HSub.hSub Top.top ↑a) Top.top","decl":"@[simp]\ntheorem top_sub_coe {a : α} : (⊤ : WithTop α) - a = ⊤ :=\n  rfl\n\n"}
{"name":"WithTop.sub_top","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Bot α\na : WithTop α\n⊢ Eq (HSub.hSub a Top.top) ↑Bot.bot","decl":"@[simp]\ntheorem sub_top {a : WithTop α} : a - ⊤ = (⊥ : α) := by cases a <;> rfl\n\n"}
{"name":"WithTop.sub_eq_top_iff","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Bot α\na b : WithTop α\n⊢ Iff (Eq (HSub.hSub a b) Top.top) (And (Eq a Top.top) (Ne b Top.top))","decl":"@[simp] theorem sub_eq_top_iff {a b : WithTop α} : a - b = ⊤ ↔ a = ⊤ ∧ b ≠ ⊤ := by\n  induction a <;> induction b <;>\n    simp only [← coe_sub, coe_ne_top, sub_top, zero_ne_top, top_sub_coe, false_and, Ne,\n      not_true_eq_false, not_false_eq_true, and_false, and_self]\n\n"}
{"name":"WithTop.sub_ne_top_iff","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\ninst✝¹ : Sub α\ninst✝ : Bot α\na b : WithTop α\n⊢ Iff (Ne (HSub.hSub a b) Top.top) (Or (Ne a Top.top) (Eq b Top.top))","decl":"lemma sub_ne_top_iff {a b : WithTop α} : a - b ≠ ⊤ ↔ a ≠ ⊤ ∨ b = ⊤ := by simp [or_iff_not_imp_left]\n\n"}
{"name":"WithTop.map_sub","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : Sub α\ninst✝² : Bot α\ninst✝¹ : Sub β\ninst✝ : Bot β\nf : α → β\nh : ∀ (x y : α), Eq (f (HSub.hSub x y)) (HSub.hSub (f x) (f y))\nh₀ : Eq (f Bot.bot) Bot.bot\nx y : WithTop α\n⊢ Eq (WithTop.map f (HSub.hSub x y)) (HSub.hSub (WithTop.map f x) (WithTop.map f y))","decl":"theorem map_sub [Sub β] [Bot β] {f : α → β} (h : ∀ x y, f (x - y) = f x - f y) (h₀ : f ⊥ = ⊥) :\n    ∀ x y : WithTop α, (x - y).map f = x.map f - y.map f\n  | _, ⊤ => by simp only [sub_top, map_coe, h₀, map_top]\n  | ⊤, (x : α) => rfl\n  | (x : α), (y : α) => by simp only [← coe_sub, map_coe, h]\n\n"}
{"name":"WithTop.instOrderedSub","module":"Mathlib.Algebra.Order.Sub.WithTop","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : LE α\ninst✝¹ : OrderBot α\ninst✝ : Sub α\n⊢ OrderedSub (WithTop α)","decl":"instance : OrderedSub (WithTop α) := by\n  constructor\n  rintro x y z\n  cases y\n  · cases z <;> simp\n  cases x\n  · simp\n  cases z\n  · simp\n  norm_cast\n  exact tsub_le_iff_right\n\n"}
