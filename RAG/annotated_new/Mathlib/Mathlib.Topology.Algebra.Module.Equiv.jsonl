{"name":"ContinuousLinearEquiv.mk.injEq","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝⁷ : RingHomInvPair σ σ'\ninst✝⁶ : RingHomInvPair σ' σ\nM : Type u_5\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\ntoLinearEquiv✝ : LinearEquiv σ M M₂\ncontinuous_toFun✝ : autoParam (Continuous (↑toLinearEquiv✝).toFun) _auto✝\ncontinuous_invFun✝ : autoParam (Continuous toLinearEquiv✝.invFun) _auto✝\ntoLinearEquiv : LinearEquiv σ M M₂\ncontinuous_toFun : autoParam (Continuous (↑toLinearEquiv).toFun) _auto✝\ncontinuous_invFun : autoParam (Continuous toLinearEquiv.invFun) _auto✝\n⊢ Eq (Eq { toLinearEquiv := toLinearEquiv✝, continuous_toFun := continuous_toFun✝, continuous_invFun := continuous_invFun✝ } { toLinearEquiv := toLinearEquiv, continuous_toFun := continuous_toFun, continuous_invFun := continuous_invFun }) (Eq toLinearEquiv✝ toLinearEquiv)","decl":"/-- Continuous linear equivalences between modules. We only put the type classes that are necessary\nfor the definition, although in applications `M` and `M₂` will be topological modules over the\ntopological semiring `R`. -/\nstructure ContinuousLinearEquiv {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    {σ' : S →+* R} [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] extends M ≃ₛₗ[σ] M₂ where\n  continuous_toFun : Continuous toFun := by continuity\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"ContinuousLinearEquiv.continuous_invFun","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝⁷ : RingHomInvPair σ σ'\ninst✝⁶ : RingHomInvPair σ' σ\nM : Type u_5\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\nself : ContinuousLinearEquiv σ M M₂\n⊢ Continuous self.invFun","decl":"/-- Continuous linear equivalences between modules. We only put the type classes that are necessary\nfor the definition, although in applications `M` and `M₂` will be topological modules over the\ntopological semiring `R`. -/\nstructure ContinuousLinearEquiv {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    {σ' : S →+* R} [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] extends M ≃ₛₗ[σ] M₂ where\n  continuous_toFun : Continuous toFun := by continuity\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"ContinuousLinearEquiv.continuous_toFun","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝⁷ : RingHomInvPair σ σ'\ninst✝⁶ : RingHomInvPair σ' σ\nM : Type u_5\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\nself : ContinuousLinearEquiv σ M M₂\n⊢ Continuous (↑self.toLinearEquiv).toFun","decl":"/-- Continuous linear equivalences between modules. We only put the type classes that are necessary\nfor the definition, although in applications `M` and `M₂` will be topological modules over the\ntopological semiring `R`. -/\nstructure ContinuousLinearEquiv {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    {σ' : S →+* R} [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] extends M ≃ₛₗ[σ] M₂ where\n  continuous_toFun : Continuous toFun := by continuity\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"ContinuousLinearEquiv.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝¹³ : Semiring R\ninst✝¹² : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝¹¹ : RingHomInvPair σ σ'\ninst✝¹⁰ : RingHomInvPair σ' σ\nM : Type u_5\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : AddCommMonoid M\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : Module R M\ninst✝⁴ : Module S M₂\ninst✝³ : SizeOf R\ninst✝² : SizeOf S\ninst✝¹ : SizeOf M\ninst✝ : SizeOf M₂\ntoLinearEquiv : LinearEquiv σ M M₂\ncontinuous_toFun : autoParam (Continuous (↑toLinearEquiv).toFun) _auto✝\ncontinuous_invFun : autoParam (Continuous toLinearEquiv.invFun) _auto✝\n⊢ Eq (SizeOf.sizeOf { toLinearEquiv := toLinearEquiv, continuous_toFun := continuous_toFun, continuous_invFun := continuous_invFun }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLinearEquiv)) (SizeOf.sizeOf continuous_toFun)) (SizeOf.sizeOf continuous_invFun))","decl":"/-- Continuous linear equivalences between modules. We only put the type classes that are necessary\nfor the definition, although in applications `M` and `M₂` will be topological modules over the\ntopological semiring `R`. -/\nstructure ContinuousLinearEquiv {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    {σ' : S →+* R} [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] extends M ≃ₛₗ[σ] M₂ where\n  continuous_toFun : Continuous toFun := by continuity\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"ContinuousLinearEquiv.mk.inj","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝⁹ : Semiring R\ninst✝⁸ : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝⁷ : RingHomInvPair σ σ'\ninst✝⁶ : RingHomInvPair σ' σ\nM : Type u_5\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\ntoLinearEquiv✝ : LinearEquiv σ M M₂\ncontinuous_toFun✝ : autoParam (Continuous (↑toLinearEquiv✝).toFun) _auto✝\ncontinuous_invFun✝ : autoParam (Continuous toLinearEquiv✝.invFun) _auto✝\ntoLinearEquiv : LinearEquiv σ M M₂\ncontinuous_toFun : autoParam (Continuous (↑toLinearEquiv).toFun) _auto✝\ncontinuous_invFun : autoParam (Continuous toLinearEquiv.invFun) _auto✝\nx✝ : Eq { toLinearEquiv := toLinearEquiv✝, continuous_toFun := continuous_toFun✝, continuous_invFun := continuous_invFun✝ } { toLinearEquiv := toLinearEquiv, continuous_toFun := continuous_toFun, continuous_invFun := continuous_invFun }\n⊢ Eq toLinearEquiv✝ toLinearEquiv","decl":"/-- Continuous linear equivalences between modules. We only put the type classes that are necessary\nfor the definition, although in applications `M` and `M₂` will be topological modules over the\ntopological semiring `R`. -/\nstructure ContinuousLinearEquiv {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    {σ' : S →+* R} [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] extends M ≃ₛₗ[σ] M₂ where\n  continuous_toFun : Continuous toFun := by continuity\n  continuous_invFun : Continuous invFun := by continuity\n\n"}
{"name":"ContinuousSemilinearEquivClass.inv_continuous","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"F : Type u_3\nR : outParam (Type u_4)\nS : outParam (Type u_5)\ninst✝¹⁰ : Semiring R\ninst✝⁹ : Semiring S\nσ : outParam (RingHom R S)\nσ' : outParam (RingHom S R)\ninst✝⁸ : RingHomInvPair σ σ'\ninst✝⁷ : RingHomInvPair σ' σ\nM : outParam (Type u_6)\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : outParam (Type u_7)\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : EquivLike F M M₂\nself : ContinuousSemilinearEquivClass F σ M M₂\nf : F\n⊢ Continuous (EquivLike.inv f)","decl":"/-- `ContinuousSemilinearEquivClass F σ M M₂` asserts `F` is a type of bundled continuous\n`σ`-semilinear equivs `M → M₂`.  See also `ContinuousLinearEquivClass F R M M₂` for the case\nwhere `σ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring\nhomomorphism `σ : R →+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`\nand `f (c • x) = (σ c) • f x`. -/\nclass ContinuousSemilinearEquivClass (F : Type*) {R : outParam Type*} {S : outParam Type*}\n    [Semiring R] [Semiring S] (σ : outParam <| R →+* S) {σ' : outParam <| S →+* R}\n    [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : outParam Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : outParam Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] [EquivLike F M M₂] extends SemilinearEquivClass F σ M M₂ : Prop where\n  map_continuous : ∀ f : F, Continuous f := by continuity\n  inv_continuous : ∀ f : F, Continuous (EquivLike.inv f) := by continuity\n\n"}
{"name":"ContinuousSemilinearEquivClass.map_continuous","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"F : Type u_3\nR : outParam (Type u_4)\nS : outParam (Type u_5)\ninst✝¹⁰ : Semiring R\ninst✝⁹ : Semiring S\nσ : outParam (RingHom R S)\nσ' : outParam (RingHom S R)\ninst✝⁸ : RingHomInvPair σ σ'\ninst✝⁷ : RingHomInvPair σ' σ\nM : outParam (Type u_6)\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : outParam (Type u_7)\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : EquivLike F M M₂\nself : ContinuousSemilinearEquivClass F σ M M₂\nf : F\n⊢ Continuous ⇑f","decl":"/-- `ContinuousSemilinearEquivClass F σ M M₂` asserts `F` is a type of bundled continuous\n`σ`-semilinear equivs `M → M₂`.  See also `ContinuousLinearEquivClass F R M M₂` for the case\nwhere `σ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring\nhomomorphism `σ : R →+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`\nand `f (c • x) = (σ c) • f x`. -/\nclass ContinuousSemilinearEquivClass (F : Type*) {R : outParam Type*} {S : outParam Type*}\n    [Semiring R] [Semiring S] (σ : outParam <| R →+* S) {σ' : outParam <| S →+* R}\n    [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : outParam Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : outParam Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] [EquivLike F M M₂] extends SemilinearEquivClass F σ M M₂ : Prop where\n  map_continuous : ∀ f : F, Continuous f := by continuity\n  inv_continuous : ∀ f : F, Continuous (EquivLike.inv f) := by continuity\n\n"}
{"name":"ContinuousSemilinearEquivClass.toSemilinearEquivClass","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"F : Type u_3\nR : outParam (Type u_4)\nS : outParam (Type u_5)\ninst✝¹⁰ : Semiring R\ninst✝⁹ : Semiring S\nσ : outParam (RingHom R S)\nσ' : outParam (RingHom S R)\ninst✝⁸ : RingHomInvPair σ σ'\ninst✝⁷ : RingHomInvPair σ' σ\nM : outParam (Type u_6)\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : outParam (Type u_7)\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : EquivLike F M M₂\nself : ContinuousSemilinearEquivClass F σ M M₂\n⊢ SemilinearEquivClass F σ M M₂","decl":"/-- `ContinuousSemilinearEquivClass F σ M M₂` asserts `F` is a type of bundled continuous\n`σ`-semilinear equivs `M → M₂`.  See also `ContinuousLinearEquivClass F R M M₂` for the case\nwhere `σ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring\nhomomorphism `σ : R →+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`\nand `f (c • x) = (σ c) • f x`. -/\nclass ContinuousSemilinearEquivClass (F : Type*) {R : outParam Type*} {S : outParam Type*}\n    [Semiring R] [Semiring S] (σ : outParam <| R →+* S) {σ' : outParam <| S →+* R}\n    [RingHomInvPair σ σ'] [RingHomInvPair σ' σ] (M : outParam Type*) [TopologicalSpace M]\n    [AddCommMonoid M] (M₂ : outParam Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] [EquivLike F M M₂] extends SemilinearEquivClass F σ M M₂ : Prop where\n  map_continuous : ∀ f : F, Continuous f := by continuity\n  inv_continuous : ∀ f : F, Continuous (EquivLike.inv f) := by continuity\n\n"}
{"name":"ContinuousSemilinearEquivClass.continuousSemilinearMapClass","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"F : Type u_3\nR : Type u_4\nS : Type u_5\ninst✝¹⁰ : Semiring R\ninst✝⁹ : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝⁸ : RingHomInvPair σ σ'\ninst✝⁷ : RingHomInvPair σ' σ\nM : Type u_6\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : Type u_7\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : EquivLike F M M₂\ns : ContinuousSemilinearEquivClass F σ M M₂\n⊢ ContinuousSemilinearMapClass F σ M M₂","decl":"instance (priority := 100) continuousSemilinearMapClass [EquivLike F M M₂]\n    [s : ContinuousSemilinearEquivClass F σ M M₂] : ContinuousSemilinearMapClass F σ M M₂ :=\n  { s with }\n\n"}
{"name":"ContinuousSemilinearEquivClass.instHomeomorphClass","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"F : Type u_3\nR : Type u_4\nS : Type u_5\ninst✝¹⁰ : Semiring R\ninst✝⁹ : Semiring S\nσ : RingHom R S\nσ' : RingHom S R\ninst✝⁸ : RingHomInvPair σ σ'\ninst✝⁷ : RingHomInvPair σ' σ\nM : Type u_6\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : Type u_7\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : EquivLike F M M₂\ns : ContinuousSemilinearEquivClass F σ M M₂\n⊢ HomeomorphClass F M M₂","decl":"instance (priority := 100) [EquivLike F M M₂]\n    [s : ContinuousSemilinearEquivClass F σ M M₂] : HomeomorphClass F M M₂ :=\n  { s with }\n\n"}
{"name":"ContinuousLinearEquiv.continuousSemilinearEquivClass","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ ContinuousSemilinearEquivClass (ContinuousLinearEquiv σ₁₂ M₁ M₂) σ₁₂ M₁ M₂","decl":"instance continuousSemilinearEquivClass :\n    ContinuousSemilinearEquivClass (M₁ ≃SL[σ₁₂] M₂) σ₁₂ M₁ M₂ where\n  map_add f := f.map_add'\n  map_smulₛₗ f := f.map_smul'\n  map_continuous := continuous_toFun\n  inv_continuous := continuous_invFun\n\n"}
{"name":"ContinuousLinearEquiv.coe_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nb : M₁\n⊢ Eq (↑e b) (e b)","decl":"theorem coe_apply (e : M₁ ≃SL[σ₁₂] M₂) (b : M₁) : (e : M₁ →SL[σ₁₂] M₂) b = e b :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_toLinearEquiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq ⇑f.toLinearEquiv ⇑f","decl":"@[simp]\ntheorem coe_toLinearEquiv (f : M₁ ≃SL[σ₁₂] M₂) : ⇑f.toLinearEquiv = f :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_coe","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp, norm_cast]\ntheorem coe_coe (e : M₁ ≃SL[σ₁₂] M₂) : ⇑(e : M₁ →SL[σ₁₂] M₂) = e :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.toLinearEquiv_injective","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Function.Injective ContinuousLinearEquiv.toLinearEquiv","decl":"theorem toLinearEquiv_injective :\n    Function.Injective (toLinearEquiv : (M₁ ≃SL[σ₁₂] M₂) → M₁ ≃ₛₗ[σ₁₂] M₂) := by\n  rintro ⟨e, _, _⟩ ⟨e', _, _⟩ rfl\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.ext_iff","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf g : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Iff (Eq f g) (Eq ⇑f ⇑g)","decl":"@[ext]\ntheorem ext {f g : M₁ ≃SL[σ₁₂] M₂} (h : (f : M₁ → M₂) = g) : f = g :=\n  toLinearEquiv_injective <| LinearEquiv.ext <| congr_fun h\n\n"}
{"name":"ContinuousLinearEquiv.ext","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf g : ContinuousLinearEquiv σ₁₂ M₁ M₂\nh : Eq ⇑f ⇑g\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : M₁ ≃SL[σ₁₂] M₂} (h : (f : M₁ → M₂) = g) : f = g :=\n  toLinearEquiv_injective <| LinearEquiv.ext <| congr_fun h\n\n"}
{"name":"ContinuousLinearEquiv.coe_injective","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Function.Injective ContinuousLinearEquiv.toContinuousLinearMap","decl":"theorem coe_injective : Function.Injective ((↑) : (M₁ ≃SL[σ₁₂] M₂) → M₁ →SL[σ₁₂] M₂) :=\n  fun _e _e' h => ext <| funext <| ContinuousLinearMap.ext_iff.1 h\n\n"}
{"name":"ContinuousLinearEquiv.coe_inj","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne e' : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Iff (Eq ↑e ↑e') (Eq e e')","decl":"@[simp, norm_cast]\ntheorem coe_inj {e e' : M₁ ≃SL[σ₁₂] M₂} : (e : M₁ →SL[σ₁₂] M₂) = e' ↔ e = e' :=\n  coe_injective.eq_iff\n\n"}
{"name":"ContinuousLinearEquiv.coe_toHomeomorph","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq ⇑e.toHomeomorph ⇑e","decl":"@[simp]\ntheorem coe_toHomeomorph (e : M₁ ≃SL[σ₁₂] M₂) : ⇑e.toHomeomorph = e :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.isOpenMap","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ IsOpenMap ⇑e","decl":"theorem isOpenMap (e : M₁ ≃SL[σ₁₂] M₂) : IsOpenMap e :=\n  (ContinuousLinearEquiv.toHomeomorph e).isOpenMap\n\n"}
{"name":"ContinuousLinearEquiv.image_closure","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\n⊢ Eq (Set.image (⇑e) (closure s)) (closure (Set.image (⇑e) s))","decl":"theorem image_closure (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₁) : e '' closure s = closure (e '' s) :=\n  e.toHomeomorph.image_closure s\n\n"}
{"name":"ContinuousLinearEquiv.preimage_closure","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₂\n⊢ Eq (Set.preimage (⇑e) (closure s)) (closure (Set.preimage (⇑e) s))","decl":"theorem preimage_closure (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₂) : e ⁻¹' closure s = closure (e ⁻¹' s) :=\n  e.toHomeomorph.preimage_closure s\n\n"}
{"name":"ContinuousLinearEquiv.isClosed_image","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\n⊢ Iff (IsClosed (Set.image (⇑e) s)) (IsClosed s)","decl":"@[simp]\ntheorem isClosed_image (e : M₁ ≃SL[σ₁₂] M₂) {s : Set M₁} : IsClosed (e '' s) ↔ IsClosed s :=\n  e.toHomeomorph.isClosed_image\n\n"}
{"name":"ContinuousLinearEquiv.map_nhds_eq","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₁\n⊢ Eq (Filter.map (⇑e) (nhds x)) (nhds (e x))","decl":"theorem map_nhds_eq (e : M₁ ≃SL[σ₁₂] M₂) (x : M₁) : map e (𝓝 x) = 𝓝 (e x) :=\n  e.toHomeomorph.map_nhds_eq x\n\n-- Make some straightforward lemmas available to `simp`.\n"}
{"name":"ContinuousLinearEquiv.map_zero","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq (e 0) 0","decl":"theorem map_zero (e : M₁ ≃SL[σ₁₂] M₂) : e (0 : M₁) = 0 :=\n  (e : M₁ →SL[σ₁₂] M₂).map_zero\n\n"}
{"name":"ContinuousLinearEquiv.map_add","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx y : M₁\n⊢ Eq (e (HAdd.hAdd x y)) (HAdd.hAdd (e x) (e y))","decl":"theorem map_add (e : M₁ ≃SL[σ₁₂] M₂) (x y : M₁) : e (x + y) = e x + e y :=\n  (e : M₁ →SL[σ₁₂] M₂).map_add x y\n\n"}
{"name":"ContinuousLinearEquiv.map_smulₛₗ","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nc : R₁\nx : M₁\n⊢ Eq (e (HSMul.hSMul c x)) (HSMul.hSMul (σ₁₂ c) (e x))","decl":"@[simp]\ntheorem map_smulₛₗ (e : M₁ ≃SL[σ₁₂] M₂) (c : R₁) (x : M₁) : e (c • x) = σ₁₂ c • e x :=\n  (e : M₁ →SL[σ₁₂] M₂).map_smulₛₗ c x\n\n"}
{"name":"ContinuousLinearEquiv.map_smul","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁶ : Semiring R₁\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₁ M₂\ne : ContinuousLinearEquiv (RingHom.id R₁) M₁ M₂\nc : R₁\nx : M₁\n⊢ Eq (e (HSMul.hSMul c x)) (HSMul.hSMul c (e x))","decl":"theorem map_smul [Module R₁ M₂] (e : M₁ ≃L[R₁] M₂) (c : R₁) (x : M₁) : e (c • x) = c • e x :=\n  (e : M₁ →L[R₁] M₂).map_smul c x\n\n"}
{"name":"ContinuousLinearEquiv.map_eq_zero_iff","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₁\n⊢ Iff (Eq (e x) 0) (Eq x 0)","decl":"theorem map_eq_zero_iff (e : M₁ ≃SL[σ₁₂] M₂) {x : M₁} : e x = 0 ↔ x = 0 :=\n  e.toLinearEquiv.map_eq_zero_iff\n\n"}
{"name":"ContinuousLinearEquiv.continuous","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Continuous ⇑e","decl":"@[continuity]\nprotected theorem continuous (e : M₁ ≃SL[σ₁₂] M₂) : Continuous (e : M₁ → M₂) :=\n  e.continuous_toFun\n\n"}
{"name":"ContinuousLinearEquiv.continuousOn","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\n⊢ ContinuousOn (⇑e) s","decl":"protected theorem continuousOn (e : M₁ ≃SL[σ₁₂] M₂) {s : Set M₁} : ContinuousOn (e : M₁ → M₂) s :=\n  e.continuous.continuousOn\n\n"}
{"name":"ContinuousLinearEquiv.continuousAt","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₁\n⊢ ContinuousAt (⇑e) x","decl":"protected theorem continuousAt (e : M₁ ≃SL[σ₁₂] M₂) {x : M₁} : ContinuousAt (e : M₁ → M₂) x :=\n  e.continuous.continuousAt\n\n"}
{"name":"ContinuousLinearEquiv.continuousWithinAt","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\nx : M₁\n⊢ ContinuousWithinAt (⇑e) s x","decl":"protected theorem continuousWithinAt (e : M₁ ≃SL[σ₁₂] M₂) {s : Set M₁} {x : M₁} :\n    ContinuousWithinAt (e : M₁ → M₂) s x :=\n  e.continuous.continuousWithinAt\n\n"}
{"name":"ContinuousLinearEquiv.comp_continuousOn_iff","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝¹⁰ : Semiring R₁\ninst✝⁹ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁸ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁷ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\nα : Type u_10\ninst✝ : TopologicalSpace α\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nf : α → M₁\ns : Set α\n⊢ Iff (ContinuousOn (Function.comp (⇑e) f) s) (ContinuousOn f s)","decl":"theorem comp_continuousOn_iff {α : Type*} [TopologicalSpace α] (e : M₁ ≃SL[σ₁₂] M₂) {f : α → M₁}\n    {s : Set α} : ContinuousOn (e ∘ f) s ↔ ContinuousOn f s :=\n  e.toHomeomorph.comp_continuousOn_iff _ _\n\n"}
{"name":"ContinuousLinearEquiv.comp_continuous_iff","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝¹⁰ : Semiring R₁\ninst✝⁹ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁸ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁷ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\nα : Type u_10\ninst✝ : TopologicalSpace α\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nf : α → M₁\n⊢ Iff (Continuous (Function.comp (⇑e) f)) (Continuous f)","decl":"theorem comp_continuous_iff {α : Type*} [TopologicalSpace α] (e : M₁ ≃SL[σ₁₂] M₂) {f : α → M₁} :\n    Continuous (e ∘ f) ↔ Continuous f :=\n  e.toHomeomorph.comp_continuous_iff\n\n"}
{"name":"ContinuousLinearEquiv.ext₁","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁴ : Semiring R₁\nM₁ : Type u_6\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : TopologicalSpace R₁\nf g : ContinuousLinearEquiv (RingHom.id R₁) R₁ M₁\nh : Eq (f 1) (g 1)\n⊢ Eq f g","decl":"/-- An extensionality lemma for `R ≃L[R] M`. -/\ntheorem ext₁ [TopologicalSpace R₁] {f g : R₁ ≃L[R₁] M₁} (h : f 1 = g 1) : f = g :=\n  ext <| funext fun x => mul_one x ▸ by rw [← smul_eq_mul, map_smul, h, map_smul]\n\n"}
{"name":"ContinuousLinearEquiv.refl_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝³ : Semiring R₁\nM₁ : Type u_6\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nx : M₁\n⊢ Eq ((ContinuousLinearEquiv.refl R₁ M₁) x) x","decl":"@[simp]\ntheorem refl_apply (x : M₁) :\n    ContinuousLinearEquiv.refl R₁ M₁ x = x := rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_refl","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝³ : Semiring R₁\nM₁ : Type u_6\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\n⊢ Eq (↑(ContinuousLinearEquiv.refl R₁ M₁)) (ContinuousLinearMap.id R₁ M₁)","decl":"@[simp, norm_cast]\ntheorem coe_refl : ↑(ContinuousLinearEquiv.refl R₁ M₁) = ContinuousLinearMap.id R₁ M₁ :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_refl'","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝³ : Semiring R₁\nM₁ : Type u_6\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\n⊢ Eq (⇑(ContinuousLinearEquiv.refl R₁ M₁)) id","decl":"@[simp, norm_cast]\ntheorem coe_refl' : ⇑(ContinuousLinearEquiv.refl R₁ M₁) = id :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_toLinearEquiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq e.symm.toLinearEquiv e.symm","decl":"@[simp]\ntheorem symm_toLinearEquiv (e : M₁ ≃SL[σ₁₂] M₂) : e.symm.toLinearEquiv = e.toLinearEquiv.symm := by\n  ext\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_toHomeomorph","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq e.toHomeomorph.symm e.symm.toHomeomorph","decl":"@[simp]\ntheorem symm_toHomeomorph (e : M₁ ≃SL[σ₁₂] M₂) : e.toHomeomorph.symm = e.symm.toHomeomorph :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_map_nhds_eq","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₁\n⊢ Eq (Filter.map (⇑e.symm) (nhds (e x))) (nhds x)","decl":"theorem symm_map_nhds_eq (e : M₁ ≃SL[σ₁₂] M₂) (x : M₁) : map e.symm (𝓝 (e x)) = 𝓝 x :=\n  e.toHomeomorph.symm_map_nhds_eq x\n\n"}
{"name":"ContinuousLinearEquiv.trans_toLinearEquiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\nR₃ : Type u_5\ninst✝¹⁹ : Semiring R₁\ninst✝¹⁸ : Semiring R₂\ninst✝¹⁷ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝¹⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁵ : RingHomInvPair σ₂₁ σ₁₂\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹⁴ : RingHomInvPair σ₂₃ σ₃₂\ninst✝¹³ : RingHomInvPair σ₃₂ σ₂₃\nσ₁₃ : RingHom R₁ R₃\nσ₃₁ : RingHom R₃ R₁\ninst✝¹² : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹¹ : RingHomInvPair σ₃₁ σ₁₃\ninst✝¹⁰ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁹ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\nM₁ : Type u_6\ninst✝⁸ : TopologicalSpace M₁\ninst✝⁷ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁶ : TopologicalSpace M₂\ninst✝⁵ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁴ : TopologicalSpace M₃\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : Module R₃ M₃\ne₁ : ContinuousLinearEquiv σ₁₂ M₁ M₂\ne₂ : ContinuousLinearEquiv σ₂₃ M₂ M₃\n⊢ Eq (e₁.trans e₂).toLinearEquiv (e₁.trans e₂.toLinearEquiv)","decl":"@[simp]\ntheorem trans_toLinearEquiv (e₁ : M₁ ≃SL[σ₁₂] M₂) (e₂ : M₂ ≃SL[σ₂₃] M₃) :\n    (e₁.trans e₂).toLinearEquiv = e₁.toLinearEquiv.trans e₂.toLinearEquiv := by\n  ext\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.prod_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝¹² : Semiring R₁\nM₁ : Type u_6\ninst✝¹¹ : TopologicalSpace M₁\ninst✝¹⁰ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\nM₄ : Type u_9\ninst✝⁵ : TopologicalSpace M₄\ninst✝⁴ : AddCommMonoid M₄\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₁ M₂\ninst✝¹ : Module R₁ M₃\ninst✝ : Module R₁ M₄\ne : ContinuousLinearEquiv (RingHom.id R₁) M₁ M₂\ne' : ContinuousLinearEquiv (RingHom.id R₁) M₃ M₄\nx : Prod M₁ M₃\n⊢ Eq ((e.prod e') x) { fst := e x.1, snd := e' x.2 }","decl":"@[simp, norm_cast]\ntheorem prod_apply [Module R₁ M₂] [Module R₁ M₃] [Module R₁ M₄] (e : M₁ ≃L[R₁] M₂)\n    (e' : M₃ ≃L[R₁] M₄) (x) : e.prod e' x = (e x.1, e' x.2) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_prod","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝¹² : Semiring R₁\nM₁ : Type u_6\ninst✝¹¹ : TopologicalSpace M₁\ninst✝¹⁰ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\nM₄ : Type u_9\ninst✝⁵ : TopologicalSpace M₄\ninst✝⁴ : AddCommMonoid M₄\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₁ M₂\ninst✝¹ : Module R₁ M₃\ninst✝ : Module R₁ M₄\ne : ContinuousLinearEquiv (RingHom.id R₁) M₁ M₂\ne' : ContinuousLinearEquiv (RingHom.id R₁) M₃ M₄\n⊢ Eq (↑(e.prod e')) ((↑e).prodMap ↑e')","decl":"@[simp, norm_cast]\ntheorem coe_prod [Module R₁ M₂] [Module R₁ M₃] [Module R₁ M₄] (e : M₁ ≃L[R₁] M₂)\n    (e' : M₃ ≃L[R₁] M₄) :\n    (e.prod e' : M₁ × M₃ →L[R₁] M₂ × M₄) = (e : M₁ →L[R₁] M₂).prodMap (e' : M₃ →L[R₁] M₄) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.prod_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝¹² : Semiring R₁\nM₁ : Type u_6\ninst✝¹¹ : TopologicalSpace M₁\ninst✝¹⁰ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\nM₄ : Type u_9\ninst✝⁵ : TopologicalSpace M₄\ninst✝⁴ : AddCommMonoid M₄\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₁ M₂\ninst✝¹ : Module R₁ M₃\ninst✝ : Module R₁ M₄\ne : ContinuousLinearEquiv (RingHom.id R₁) M₁ M₂\ne' : ContinuousLinearEquiv (RingHom.id R₁) M₃ M₄\n⊢ Eq (e.prod e').symm (e.symm.prod e'.symm)","decl":"theorem prod_symm [Module R₁ M₂] [Module R₁ M₃] [Module R₁ M₄] (e : M₁ ≃L[R₁] M₂)\n    (e' : M₃ ≃L[R₁] M₄) : (e.prod e').symm = e.symm.prod e'.symm :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.prodComm_toLinearEquiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁶ : Semiring R₁\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₁ M₂\n⊢ Eq (ContinuousLinearEquiv.prodComm R₁ M₁ M₂).toLinearEquiv (LinearEquiv.prodComm R₁ M₁ M₂)","decl":"/-- Product of modules is commutative up to continuous linear isomorphism. -/\n@[simps! apply toLinearEquiv]\ndef prodComm [Module R₁ M₂] : (M₁ × M₂) ≃L[R₁] M₂ × M₁ :=\n  { LinearEquiv.prodComm R₁ M₁ M₂ with\n    continuous_toFun := continuous_swap\n    continuous_invFun := continuous_swap }\n\n"}
{"name":"ContinuousLinearEquiv.prodComm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁶ : Semiring R₁\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₁ M₂\na✝ : Prod M₁ M₂\n⊢ Eq ((ContinuousLinearEquiv.prodComm R₁ M₁ M₂) a✝) a✝.swap","decl":"/-- Product of modules is commutative up to continuous linear isomorphism. -/\n@[simps! apply toLinearEquiv]\ndef prodComm [Module R₁ M₂] : (M₁ × M₂) ≃L[R₁] M₂ × M₁ :=\n  { LinearEquiv.prodComm R₁ M₁ M₂ with\n    continuous_toFun := continuous_swap\n    continuous_invFun := continuous_swap }\n\n"}
{"name":"ContinuousLinearEquiv.prodComm_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁶ : Semiring R₁\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₁ M₂\n⊢ Eq (ContinuousLinearEquiv.prodComm R₁ M₁ M₂).symm (ContinuousLinearEquiv.prodComm R₁ M₂ M₁)","decl":"@[simp] lemma prodComm_symm [Module R₁ M₂] : (prodComm R₁ M₁ M₂).symm = prodComm R₁ M₂ M₁ := rfl\n\n"}
{"name":"ContinuousLinearEquiv.bijective","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Function.Bijective ⇑e","decl":"protected theorem bijective (e : M₁ ≃SL[σ₁₂] M₂) : Function.Bijective e :=\n  e.toLinearEquiv.toEquiv.bijective\n\n"}
{"name":"ContinuousLinearEquiv.injective","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Function.Injective ⇑e","decl":"protected theorem injective (e : M₁ ≃SL[σ₁₂] M₂) : Function.Injective e :=\n  e.toLinearEquiv.toEquiv.injective\n\n"}
{"name":"ContinuousLinearEquiv.surjective","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Function.Surjective ⇑e","decl":"protected theorem surjective (e : M₁ ≃SL[σ₁₂] M₂) : Function.Surjective e :=\n  e.toLinearEquiv.toEquiv.surjective\n\n"}
{"name":"ContinuousLinearEquiv.trans_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\nR₃ : Type u_5\ninst✝¹⁹ : Semiring R₁\ninst✝¹⁸ : Semiring R₂\ninst✝¹⁷ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝¹⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁵ : RingHomInvPair σ₂₁ σ₁₂\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹⁴ : RingHomInvPair σ₂₃ σ₃₂\ninst✝¹³ : RingHomInvPair σ₃₂ σ₂₃\nσ₁₃ : RingHom R₁ R₃\nσ₃₁ : RingHom R₃ R₁\ninst✝¹² : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹¹ : RingHomInvPair σ₃₁ σ₁₃\ninst✝¹⁰ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁹ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\nM₁ : Type u_6\ninst✝⁸ : TopologicalSpace M₁\ninst✝⁷ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁶ : TopologicalSpace M₂\ninst✝⁵ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁴ : TopologicalSpace M₃\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : Module R₃ M₃\ne₁ : ContinuousLinearEquiv σ₁₂ M₁ M₂\ne₂ : ContinuousLinearEquiv σ₂₃ M₂ M₃\nc : M₁\n⊢ Eq ((e₁.trans e₂) c) (e₂ (e₁ c))","decl":"@[simp]\ntheorem trans_apply (e₁ : M₁ ≃SL[σ₁₂] M₂) (e₂ : M₂ ≃SL[σ₂₃] M₃) (c : M₁) :\n    (e₁.trans e₂) c = e₂ (e₁ c) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.apply_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nc : M₂\n⊢ Eq (e (e.symm c)) c","decl":"@[simp]\ntheorem apply_symm_apply (e : M₁ ≃SL[σ₁₂] M₂) (c : M₂) : e (e.symm c) = c :=\n  e.1.right_inv c\n\n"}
{"name":"ContinuousLinearEquiv.symm_apply_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nb : M₁\n⊢ Eq (e.symm (e b)) b","decl":"@[simp]\ntheorem symm_apply_apply (e : M₁ ≃SL[σ₁₂] M₂) (b : M₁) : e.symm (e b) = b :=\n  e.1.left_inv b\n\n"}
{"name":"ContinuousLinearEquiv.symm_trans_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\nR₃ : Type u_5\ninst✝¹⁹ : Semiring R₁\ninst✝¹⁸ : Semiring R₂\ninst✝¹⁷ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝¹⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁵ : RingHomInvPair σ₂₁ σ₁₂\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹⁴ : RingHomInvPair σ₂₃ σ₃₂\ninst✝¹³ : RingHomInvPair σ₃₂ σ₂₃\nσ₁₃ : RingHom R₁ R₃\nσ₃₁ : RingHom R₃ R₁\ninst✝¹² : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹¹ : RingHomInvPair σ₃₁ σ₁₃\ninst✝¹⁰ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁹ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\nM₁ : Type u_6\ninst✝⁸ : TopologicalSpace M₁\ninst✝⁷ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁶ : TopologicalSpace M₂\ninst✝⁵ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁴ : TopologicalSpace M₃\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : Module R₃ M₃\ne₁ : ContinuousLinearEquiv σ₂₁ M₂ M₁\ne₂ : ContinuousLinearEquiv σ₃₂ M₃ M₂\nc : M₁\n⊢ Eq ((e₂.trans e₁).symm c) (e₂.symm (e₁.symm c))","decl":"@[simp]\ntheorem symm_trans_apply (e₁ : M₂ ≃SL[σ₂₁] M₁) (e₂ : M₃ ≃SL[σ₃₂] M₂) (c : M₁) :\n    (e₂.trans e₁).symm c = e₂.symm (e₁.symm c) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_image_image","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\n⊢ Eq (Set.image (⇑e.symm) (Set.image (⇑e) s)) s","decl":"@[simp]\ntheorem symm_image_image (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₁) : e.symm '' (e '' s) = s :=\n  e.toLinearEquiv.toEquiv.symm_image_image s\n\n"}
{"name":"ContinuousLinearEquiv.image_symm_image","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₂\n⊢ Eq (Set.image (⇑e) (Set.image (⇑e.symm) s)) s","decl":"@[simp]\ntheorem image_symm_image (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₂) : e '' (e.symm '' s) = s :=\n  e.symm.symm_image_image s\n\n"}
{"name":"ContinuousLinearEquiv.comp_coe","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\nR₃ : Type u_5\ninst✝¹⁹ : Semiring R₁\ninst✝¹⁸ : Semiring R₂\ninst✝¹⁷ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝¹⁶ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁵ : RingHomInvPair σ₂₁ σ₁₂\nσ₂₃ : RingHom R₂ R₃\nσ₃₂ : RingHom R₃ R₂\ninst✝¹⁴ : RingHomInvPair σ₂₃ σ₃₂\ninst✝¹³ : RingHomInvPair σ₃₂ σ₂₃\nσ₁₃ : RingHom R₁ R₃\nσ₃₁ : RingHom R₃ R₁\ninst✝¹² : RingHomInvPair σ₁₃ σ₃₁\ninst✝¹¹ : RingHomInvPair σ₃₁ σ₁₃\ninst✝¹⁰ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁹ : RingHomCompTriple σ₃₂ σ₂₁ σ₃₁\nM₁ : Type u_6\ninst✝⁸ : TopologicalSpace M₁\ninst✝⁷ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝⁶ : TopologicalSpace M₂\ninst✝⁵ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝⁴ : TopologicalSpace M₃\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : Module R₃ M₃\nf : ContinuousLinearEquiv σ₁₂ M₁ M₂\nf' : ContinuousLinearEquiv σ₂₃ M₂ M₃\n⊢ Eq ((↑f').comp ↑f) ↑(f.trans f')","decl":"@[simp, norm_cast]\ntheorem comp_coe (f : M₁ ≃SL[σ₁₂] M₂) (f' : M₂ ≃SL[σ₂₃] M₃) :\n    (f' : M₂ →SL[σ₂₃] M₃).comp (f : M₁ →SL[σ₁₂] M₂) = (f.trans f' : M₁ →SL[σ₁₃] M₃) :=\n  rfl\n\n-- Porting note: The priority should be higher than `comp_coe`.\n"}
{"name":"ContinuousLinearEquiv.coe_comp_coe_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq ((↑e).comp ↑e.symm) (ContinuousLinearMap.id R₂ M₂)","decl":"@[simp high]\ntheorem coe_comp_coe_symm (e : M₁ ≃SL[σ₁₂] M₂) :\n    (e : M₁ →SL[σ₁₂] M₂).comp (e.symm : M₂ →SL[σ₂₁] M₁) = ContinuousLinearMap.id R₂ M₂ :=\n  ContinuousLinearMap.ext e.apply_symm_apply\n\n-- Porting note: The priority should be higher than `comp_coe`.\n"}
{"name":"ContinuousLinearEquiv.coe_symm_comp_coe","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq ((↑e.symm).comp ↑e) (ContinuousLinearMap.id R₁ M₁)","decl":"@[simp high]\ntheorem coe_symm_comp_coe (e : M₁ ≃SL[σ₁₂] M₂) :\n    (e.symm : M₂ →SL[σ₂₁] M₁).comp (e : M₁ →SL[σ₁₂] M₂) = ContinuousLinearMap.id R₁ M₁ :=\n  ContinuousLinearMap.ext e.symm_apply_apply\n\n"}
{"name":"ContinuousLinearEquiv.symm_comp_self","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq (Function.comp ⇑e.symm ⇑e) id","decl":"@[simp]\ntheorem symm_comp_self (e : M₁ ≃SL[σ₁₂] M₂) : (e.symm : M₂ → M₁) ∘ (e : M₁ → M₂) = id := by\n  ext x\n  exact symm_apply_apply e x\n\n"}
{"name":"ContinuousLinearEquiv.self_comp_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq (Function.comp ⇑e ⇑e.symm) id","decl":"@[simp]\ntheorem self_comp_symm (e : M₁ ≃SL[σ₁₂] M₂) : (e : M₁ → M₂) ∘ (e.symm : M₂ → M₁) = id := by\n  ext x\n  exact apply_symm_apply e x\n\n"}
{"name":"ContinuousLinearEquiv.symm_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\n⊢ Eq e.symm.symm e","decl":"@[simp]\ntheorem symm_symm (e : M₁ ≃SL[σ₁₂] M₂) : e.symm.symm = e := rfl\n\n"}
{"name":"ContinuousLinearEquiv.refl_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝³ : Semiring R₁\nM₁ : Type u_6\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\n⊢ Eq (ContinuousLinearEquiv.refl R₁ M₁).symm (ContinuousLinearEquiv.refl R₁ M₁)","decl":"@[simp]\ntheorem refl_symm : (ContinuousLinearEquiv.refl R₁ M₁).symm = ContinuousLinearEquiv.refl R₁ M₁ :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₁\n⊢ Eq (e.symm.symm x) (e x)","decl":"theorem symm_symm_apply (e : M₁ ≃SL[σ₁₂] M₂) (x : M₁) : e.symm.symm x = e x :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_apply_eq","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₂\ny : M₁\n⊢ Iff (Eq (e.symm x) y) (Eq x (e y))","decl":"theorem symm_apply_eq (e : M₁ ≃SL[σ₁₂] M₂) {x y} : e.symm x = y ↔ x = e y :=\n  e.toLinearEquiv.symm_apply_eq\n\n"}
{"name":"ContinuousLinearEquiv.eq_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\nx : M₂\ny : M₁\n⊢ Iff (Eq y (e.symm x)) (Eq (e y) x)","decl":"theorem eq_symm_apply (e : M₁ ≃SL[σ₁₂] M₂) {x y} : y = e.symm x ↔ e y = x :=\n  e.toLinearEquiv.eq_symm_apply\n\n"}
{"name":"ContinuousLinearEquiv.image_eq_preimage","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\n⊢ Eq (Set.image (⇑e) s) (Set.preimage (⇑e.symm) s)","decl":"protected theorem image_eq_preimage (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₁) : e '' s = e.symm ⁻¹' s :=\n  e.toLinearEquiv.toEquiv.image_eq_preimage s\n\n"}
{"name":"ContinuousLinearEquiv.image_symm_eq_preimage","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₂\n⊢ Eq (Set.image (⇑e.symm) s) (Set.preimage (⇑e) s)","decl":"protected theorem image_symm_eq_preimage (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₂) :\n    e.symm '' s = e ⁻¹' s := by rw [e.symm.image_eq_preimage, e.symm_symm]\n\n"}
{"name":"ContinuousLinearEquiv.symm_preimage_preimage","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₂\n⊢ Eq (Set.preimage (⇑e.symm) (Set.preimage (⇑e) s)) s","decl":"@[simp]\nprotected theorem symm_preimage_preimage (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₂) :\n    e.symm ⁻¹' (e ⁻¹' s) = s :=\n  e.toLinearEquiv.toEquiv.symm_preimage_preimage s\n\n"}
{"name":"ContinuousLinearEquiv.preimage_symm_preimage","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\ne : ContinuousLinearEquiv σ₁₂ M₁ M₂\ns : Set M₁\n⊢ Eq (Set.preimage (⇑e) (Set.preimage (⇑e.symm) s)) s","decl":"@[simp]\nprotected theorem preimage_symm_preimage (e : M₁ ≃SL[σ₁₂] M₂) (s : Set M₁) :\n    e ⁻¹' (e.symm ⁻¹' s) = s :=\n  e.symm.symm_preimage_preimage s\n\n"}
{"name":"ContinuousLinearEquiv.isUniformEmbedding","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁸ : RingHomInvPair σ₂₁ σ₁₂\nE₁ : Type u_10\nE₂ : Type u_11\ninst✝⁷ : UniformSpace E₁\ninst✝⁶ : UniformSpace E₂\ninst✝⁵ : AddCommGroup E₁\ninst✝⁴ : AddCommGroup E₂\ninst✝³ : Module R₁ E₁\ninst✝² : Module R₂ E₂\ninst✝¹ : UniformAddGroup E₁\ninst✝ : UniformAddGroup E₂\ne : ContinuousLinearEquiv σ₁₂ E₁ E₂\n⊢ IsUniformEmbedding ⇑e","decl":"lemma isUniformEmbedding {E₁ E₂ : Type*} [UniformSpace E₁] [UniformSpace E₂]\n    [AddCommGroup E₁] [AddCommGroup E₂] [Module R₁ E₁] [Module R₂ E₂] [UniformAddGroup E₁]\n    [UniformAddGroup E₂] (e : E₁ ≃SL[σ₁₂] E₂) : IsUniformEmbedding e :=\n  e.toLinearEquiv.toEquiv.isUniformEmbedding e.toContinuousLinearMap.uniformContinuous\n    e.symm.toContinuousLinearMap.uniformContinuous\n\n"}
{"name":"ContinuousLinearEquiv.uniformEmbedding","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁸ : RingHomInvPair σ₂₁ σ₁₂\nE₁ : Type u_10\nE₂ : Type u_11\ninst✝⁷ : UniformSpace E₁\ninst✝⁶ : UniformSpace E₂\ninst✝⁵ : AddCommGroup E₁\ninst✝⁴ : AddCommGroup E₂\ninst✝³ : Module R₁ E₁\ninst✝² : Module R₂ E₂\ninst✝¹ : UniformAddGroup E₁\ninst✝ : UniformAddGroup E₂\ne : ContinuousLinearEquiv σ₁₂ E₁ E₂\n⊢ IsUniformEmbedding ⇑e","decl":"@[deprecated (since := \"2024-10-01\")] alias uniformEmbedding := isUniformEmbedding\n\n"}
{"name":"LinearEquiv.isUniformEmbedding","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁸ : RingHomInvPair σ₂₁ σ₁₂\nE₁ : Type u_10\nE₂ : Type u_11\ninst✝⁷ : UniformSpace E₁\ninst✝⁶ : UniformSpace E₂\ninst✝⁵ : AddCommGroup E₁\ninst✝⁴ : AddCommGroup E₂\ninst✝³ : Module R₁ E₁\ninst✝² : Module R₂ E₂\ninst✝¹ : UniformAddGroup E₁\ninst✝ : UniformAddGroup E₂\ne : LinearEquiv σ₁₂ E₁ E₂\nh₁ : Continuous ⇑e\nh₂ : Continuous ⇑e.symm\n⊢ IsUniformEmbedding ⇑e","decl":"protected theorem _root_.LinearEquiv.isUniformEmbedding {E₁ E₂ : Type*} [UniformSpace E₁]\n    [UniformSpace E₂] [AddCommGroup E₁] [AddCommGroup E₂] [Module R₁ E₁] [Module R₂ E₂]\n    [UniformAddGroup E₁] [UniformAddGroup E₂] (e : E₁ ≃ₛₗ[σ₁₂] E₂)\n    (h₁ : Continuous e) (h₂ : Continuous e.symm) : IsUniformEmbedding e :=\n  ContinuousLinearEquiv.isUniformEmbedding\n    ({ e with\n        continuous_toFun := h₁\n        continuous_invFun := h₂ } :\n      E₁ ≃SL[σ₁₂] E₂)\n\n"}
{"name":"LinearEquiv.uniformEmbedding","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁸ : RingHomInvPair σ₂₁ σ₁₂\nE₁ : Type u_10\nE₂ : Type u_11\ninst✝⁷ : UniformSpace E₁\ninst✝⁶ : UniformSpace E₂\ninst✝⁵ : AddCommGroup E₁\ninst✝⁴ : AddCommGroup E₂\ninst✝³ : Module R₁ E₁\ninst✝² : Module R₂ E₂\ninst✝¹ : UniformAddGroup E₁\ninst✝ : UniformAddGroup E₂\ne : LinearEquiv σ₁₂ E₁ E₂\nh₁ : Continuous ⇑e\nh₂ : Continuous ⇑e.symm\n⊢ IsUniformEmbedding ⇑e","decl":"@[deprecated (since := \"2024-10-01\")]\nalias _root_.LinearEquiv.uniformEmbedding := _root_.LinearEquiv.isUniformEmbedding\n\n"}
{"name":"ContinuousLinearEquiv.equivOfInverse_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf₁ : ContinuousLinearMap σ₁₂ M₁ M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M₁\nh₁ : Function.LeftInverse ⇑f₂ ⇑f₁\nh₂ : Function.RightInverse ⇑f₂ ⇑f₁\nx : M₁\n⊢ Eq ((ContinuousLinearEquiv.equivOfInverse f₁ f₂ h₁ h₂) x) (f₁ x)","decl":"@[simp]\ntheorem equivOfInverse_apply (f₁ : M₁ →SL[σ₁₂] M₂) (f₂ h₁ h₂ x) :\n    equivOfInverse f₁ f₂ h₁ h₂ x = f₁ x :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_equivOfInverse","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf₁ : ContinuousLinearMap σ₁₂ M₁ M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M₁\nh₁ : Function.LeftInverse ⇑f₂ ⇑f₁\nh₂ : Function.RightInverse ⇑f₂ ⇑f₁\n⊢ Eq (ContinuousLinearEquiv.equivOfInverse f₁ f₂ h₁ h₂).symm (ContinuousLinearEquiv.equivOfInverse f₂ f₁ h₂ h₁)","decl":"@[simp]\ntheorem symm_equivOfInverse (f₁ : M₁ →SL[σ₁₂] M₂) (f₂ h₁ h₂) :\n    (equivOfInverse f₁ f₂ h₁ h₂).symm = equivOfInverse f₂ f₁ h₂ h₁ :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.equivOfInverse'_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf₁ : ContinuousLinearMap σ₁₂ M₁ M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M₁\nh₁ : Eq (f₁.comp f₂) (ContinuousLinearMap.id R₂ M₂)\nh₂ : Eq (f₂.comp f₁) (ContinuousLinearMap.id R₁ M₁)\nx : M₁\n⊢ Eq ((ContinuousLinearEquiv.equivOfInverse' f₁ f₂ h₁ h₂) x) (f₁ x)","decl":"@[simp]\ntheorem equivOfInverse'_apply (f₁ : M₁ →SL[σ₁₂] M₂) (f₂ h₁ h₂ x) :\n    equivOfInverse' f₁ f₂ h₁ h₂ x = f₁ x :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.symm_equivOfInverse'","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝⁷ : RingHomInvPair σ₁₂ σ₂₁\ninst✝⁶ : RingHomInvPair σ₂₁ σ₁₂\nM₁ : Type u_6\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf₁ : ContinuousLinearMap σ₁₂ M₁ M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M₁\nh₁ : Eq (f₁.comp f₂) (ContinuousLinearMap.id R₂ M₂)\nh₂ : Eq (f₂.comp f₁) (ContinuousLinearMap.id R₁ M₁)\n⊢ Eq (ContinuousLinearEquiv.equivOfInverse' f₁ f₂ h₁ h₂).symm (ContinuousLinearEquiv.equivOfInverse' f₂ f₁ h₂ h₁)","decl":"/-- The inverse of `equivOfInverse'` is obtained by swapping the order of its parameters. -/\n@[simp]\ntheorem symm_equivOfInverse' (f₁ : M₁ →SL[σ₁₂] M₂) (f₂ h₁ h₂) :\n    (equivOfInverse' f₁ f₂ h₁ h₂).symm = equivOfInverse' f₂ f₁ h₂ h₁ :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongrEquiv_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\nR₃ : Type u_5\ninst✝²³ : Semiring R₁\ninst✝²² : Semiring R₂\ninst✝²¹ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝²⁰ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁹ : RingHomInvPair σ₂₁ σ₁₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\ninst✝¹⁸ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nM₁ : Type u_6\ninst✝¹⁷ : TopologicalSpace M₁\ninst✝¹⁶ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝¹⁵ : TopologicalSpace M₂\ninst✝¹⁴ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝¹³ : TopologicalSpace M₃\ninst✝¹² : AddCommMonoid M₃\nM₄ : Type u_9\ninst✝¹¹ : TopologicalSpace M₄\ninst✝¹⁰ : AddCommMonoid M₄\ninst✝⁹ : Module R₁ M₁\ninst✝⁸ : Module R₂ M₂\ninst✝⁷ : Module R₃ M₃\nR₄ : Type u_10\ninst✝⁶ : Semiring R₄\ninst✝⁵ : Module R₄ M₄\nσ₃₄ : RingHom R₃ R₄\nσ₄₃ : RingHom R₄ R₃\ninst✝⁴ : RingHomInvPair σ₃₄ σ₄₃\ninst✝³ : RingHomInvPair σ₄₃ σ₃₄\nσ₂₄ : RingHom R₂ R₄\nσ₁₄ : RingHom R₁ R₄\ninst✝² : RingHomCompTriple σ₂₁ σ₁₄ σ₂₄\ninst✝¹ : RingHomCompTriple σ₂₄ σ₄₃ σ₂₃\ninst✝ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ne₁₂ : ContinuousLinearEquiv σ₁₂ M₁ M₂\ne₄₃ : ContinuousLinearEquiv σ₄₃ M₄ M₃\nf : ContinuousLinearMap σ₁₄ M₁ M₄\n⊢ Eq ((e₁₂.arrowCongrEquiv e₄₃) f) ((↑e₄₃).comp (f.comp ↑e₁₂.symm))","decl":"/-- A pair of continuous (semi)linear equivalences generates an equivalence between the spaces of\ncontinuous linear maps. See also `ContinuousLinearEquiv.arrowCongr`. -/\n@[simps]\ndef arrowCongrEquiv (e₁₂ : M₁ ≃SL[σ₁₂] M₂) (e₄₃ : M₄ ≃SL[σ₄₃] M₃) :\n    (M₁ →SL[σ₁₄] M₄) ≃ (M₂ →SL[σ₂₃] M₃) where\n  toFun f := (e₄₃ : M₄ →SL[σ₄₃] M₃).comp (f.comp (e₁₂.symm : M₂ →SL[σ₂₁] M₁))\n  invFun f := (e₄₃.symm : M₃ →SL[σ₃₄] M₄).comp (f.comp (e₁₂ : M₁ →SL[σ₁₂] M₂))\n  left_inv f :=\n    ContinuousLinearMap.ext fun x => by\n      simp only [ContinuousLinearMap.comp_apply, symm_apply_apply, coe_coe]\n  right_inv f :=\n    ContinuousLinearMap.ext fun x => by\n      simp only [ContinuousLinearMap.comp_apply, apply_symm_apply, coe_coe]\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongrEquiv_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\nR₂ : Type u_4\nR₃ : Type u_5\ninst✝²³ : Semiring R₁\ninst✝²² : Semiring R₂\ninst✝²¹ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝²⁰ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁹ : RingHomInvPair σ₂₁ σ₁₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\ninst✝¹⁸ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nM₁ : Type u_6\ninst✝¹⁷ : TopologicalSpace M₁\ninst✝¹⁶ : AddCommMonoid M₁\nM₂ : Type u_7\ninst✝¹⁵ : TopologicalSpace M₂\ninst✝¹⁴ : AddCommMonoid M₂\nM₃ : Type u_8\ninst✝¹³ : TopologicalSpace M₃\ninst✝¹² : AddCommMonoid M₃\nM₄ : Type u_9\ninst✝¹¹ : TopologicalSpace M₄\ninst✝¹⁰ : AddCommMonoid M₄\ninst✝⁹ : Module R₁ M₁\ninst✝⁸ : Module R₂ M₂\ninst✝⁷ : Module R₃ M₃\nR₄ : Type u_10\ninst✝⁶ : Semiring R₄\ninst✝⁵ : Module R₄ M₄\nσ₃₄ : RingHom R₃ R₄\nσ₄₃ : RingHom R₄ R₃\ninst✝⁴ : RingHomInvPair σ₃₄ σ₄₃\ninst✝³ : RingHomInvPair σ₄₃ σ₃₄\nσ₂₄ : RingHom R₂ R₄\nσ₁₄ : RingHom R₁ R₄\ninst✝² : RingHomCompTriple σ₂₁ σ₁₄ σ₂₄\ninst✝¹ : RingHomCompTriple σ₂₄ σ₄₃ σ₂₃\ninst✝ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ne₁₂ : ContinuousLinearEquiv σ₁₂ M₁ M₂\ne₄₃ : ContinuousLinearEquiv σ₄₃ M₄ M₃\nf : ContinuousLinearMap σ₂₃ M₂ M₃\n⊢ Eq ((e₁₂.arrowCongrEquiv e₄₃).symm f) ((↑e₄₃.symm).comp (f.comp ↑e₁₂))","decl":"/-- A pair of continuous (semi)linear equivalences generates an equivalence between the spaces of\ncontinuous linear maps. See also `ContinuousLinearEquiv.arrowCongr`. -/\n@[simps]\ndef arrowCongrEquiv (e₁₂ : M₁ ≃SL[σ₁₂] M₂) (e₄₃ : M₄ ≃SL[σ₄₃] M₃) :\n    (M₁ →SL[σ₁₄] M₄) ≃ (M₂ →SL[σ₂₃] M₃) where\n  toFun f := (e₄₃ : M₄ →SL[σ₄₃] M₃).comp (f.comp (e₁₂.symm : M₂ →SL[σ₂₁] M₁))\n  invFun f := (e₄₃.symm : M₃ →SL[σ₃₄] M₄).comp (f.comp (e₁₂ : M₁ →SL[σ₁₂] M₂))\n  left_inv f :=\n    ContinuousLinearMap.ext fun x => by\n      simp only [ContinuousLinearMap.comp_apply, symm_apply_apply, coe_coe]\n  right_inv f :=\n    ContinuousLinearMap.ext fun x => by\n      simp only [ContinuousLinearMap.comp_apply, apply_symm_apply, coe_coe]\n\n"}
{"name":"ContinuousLinearEquiv.piUnique_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"α : Type u_11\ninst✝⁴ : Unique α\nR : Type u_12\ninst✝³ : Semiring R\nf : α → Type u_13\ninst✝² : (x : α) → AddCommMonoid (f x)\ninst✝¹ : (x : α) → Module R (f x)\ninst✝ : (x : α) → TopologicalSpace (f x)\n⊢ Eq ⇑(ContinuousLinearEquiv.piUnique R f) fun f => f Inhabited.default","decl":"/-- The product `Π t : α, f t` of a family of topological modules is isomorphic\n(both topologically and algebraically) to the space `f ⬝` when `α` only contains `⬝`.\n\nThis is `Equiv.piUnique` as a `ContinuousLinearEquiv`.\n-/\n@[simps! (config := .asFn)]\ndef piUnique {α : Type*} [Unique α] (R : Type*) [Semiring R] (f : α → Type*)\n    [∀ x, AddCommMonoid (f x)] [∀ x, Module R (f x)] [∀ x, TopologicalSpace (f x)] :\n    (Π t, f t) ≃L[R] f default where\n  __ := LinearEquiv.piUnique R f\n  __ := Homeomorph.piUnique f\n\n"}
{"name":"ContinuousLinearEquiv.piUnique_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"α : Type u_11\ninst✝⁴ : Unique α\nR : Type u_12\ninst✝³ : Semiring R\nf : α → Type u_13\ninst✝² : (x : α) → AddCommMonoid (f x)\ninst✝¹ : (x : α) → Module R (f x)\ninst✝ : (x : α) → TopologicalSpace (f x)\n⊢ Eq (⇑(ContinuousLinearEquiv.piUnique R f).symm) uniqueElim","decl":"/-- The product `Π t : α, f t` of a family of topological modules is isomorphic\n(both topologically and algebraically) to the space `f ⬝` when `α` only contains `⬝`.\n\nThis is `Equiv.piUnique` as a `ContinuousLinearEquiv`.\n-/\n@[simps! (config := .asFn)]\ndef piUnique {α : Type*} [Unique α] (R : Type*) [Semiring R] (f : α → Type*)\n    [∀ x, AddCommMonoid (f x)] [∀ x, Module R (f x)] [∀ x, TopologicalSpace (f x)] :\n    (Π t, f t) ≃L[R] f default where\n  __ := LinearEquiv.piUnique R f\n  __ := Homeomorph.piUnique f\n\n"}
{"name":"ContinuousLinearEquiv.piCongrRight_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁶ : Semiring R₁\nι : Type u_11\nM : ι → Type u_12\ninst✝⁵ : (i : ι) → TopologicalSpace (M i)\ninst✝⁴ : (i : ι) → AddCommMonoid (M i)\ninst✝³ : (i : ι) → Module R₁ (M i)\nN : ι → Type u_13\ninst✝² : (i : ι) → TopologicalSpace (N i)\ninst✝¹ : (i : ι) → AddCommMonoid (N i)\ninst✝ : (i : ι) → Module R₁ (N i)\nf : (i : ι) → ContinuousLinearEquiv (RingHom.id R₁) (M i) (N i)\nm : (i : ι) → M i\ni : ι\n⊢ Eq ((ContinuousLinearEquiv.piCongrRight f) m i) ((f i) (m i))","decl":"@[simp]\ntheorem piCongrRight_apply (m : (i : ι) → M i) (i : ι) :\n    piCongrRight f m i = (f i) (m i) := rfl\n\n"}
{"name":"ContinuousLinearEquiv.piCongrRight_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R₁ : Type u_3\ninst✝⁶ : Semiring R₁\nι : Type u_11\nM : ι → Type u_12\ninst✝⁵ : (i : ι) → TopologicalSpace (M i)\ninst✝⁴ : (i : ι) → AddCommMonoid (M i)\ninst✝³ : (i : ι) → Module R₁ (M i)\nN : ι → Type u_13\ninst✝² : (i : ι) → TopologicalSpace (N i)\ninst✝¹ : (i : ι) → AddCommMonoid (N i)\ninst✝ : (i : ι) → Module R₁ (N i)\nf : (i : ι) → ContinuousLinearEquiv (RingHom.id R₁) (M i) (N i)\nn : (i : ι) → N i\ni : ι\n⊢ Eq ((ContinuousLinearEquiv.piCongrRight f).symm n i) ((f i).symm (n i))","decl":"@[simp]\ntheorem piCongrRight_symm_apply (n : (i : ι) → N i) (i : ι) :\n    (piCongrRight f).symm n i = (f i).symm (n i) := rfl\n\n"}
{"name":"ContinuousLinearEquiv.skewProd_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝¹³ : Semiring R\nM : Type u_4\ninst✝¹² : TopologicalSpace M\ninst✝¹¹ : AddCommGroup M\nM₂ : Type u_5\ninst✝¹⁰ : TopologicalSpace M₂\ninst✝⁹ : AddCommGroup M₂\nM₃ : Type u_6\ninst✝⁸ : TopologicalSpace M₃\ninst✝⁷ : AddCommGroup M₃\nM₄ : Type u_7\ninst✝⁶ : TopologicalSpace M₄\ninst✝⁵ : AddCommGroup M₄\ninst✝⁴ : Module R M\ninst✝³ : Module R M₂\ninst✝² : Module R M₃\ninst✝¹ : Module R M₄\ninst✝ : TopologicalAddGroup M₄\ne : ContinuousLinearEquiv (RingHom.id R) M M₂\ne' : ContinuousLinearEquiv (RingHom.id R) M₃ M₄\nf : ContinuousLinearMap (RingHom.id R) M M₄\nx : Prod M M₃\n⊢ Eq ((e.skewProd e' f) x) { fst := e x.1, snd := HAdd.hAdd (e' x.2) (f x.1) }","decl":"@[simp]\ntheorem skewProd_apply (e : M ≃L[R] M₂) (e' : M₃ ≃L[R] M₄) (f : M →L[R] M₄) (x) :\n    e.skewProd e' f x = (e x.1, e' x.2 + f x.1) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.skewProd_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝¹³ : Semiring R\nM : Type u_4\ninst✝¹² : TopologicalSpace M\ninst✝¹¹ : AddCommGroup M\nM₂ : Type u_5\ninst✝¹⁰ : TopologicalSpace M₂\ninst✝⁹ : AddCommGroup M₂\nM₃ : Type u_6\ninst✝⁸ : TopologicalSpace M₃\ninst✝⁷ : AddCommGroup M₃\nM₄ : Type u_7\ninst✝⁶ : TopologicalSpace M₄\ninst✝⁵ : AddCommGroup M₄\ninst✝⁴ : Module R M\ninst✝³ : Module R M₂\ninst✝² : Module R M₃\ninst✝¹ : Module R M₄\ninst✝ : TopologicalAddGroup M₄\ne : ContinuousLinearEquiv (RingHom.id R) M M₂\ne' : ContinuousLinearEquiv (RingHom.id R) M₃ M₄\nf : ContinuousLinearMap (RingHom.id R) M M₄\nx : Prod M₂ M₄\n⊢ Eq ((e.skewProd e' f).symm x) { fst := e.symm x.1, snd := e'.symm (HSub.hSub x.2 (f (e.symm x.1))) }","decl":"@[simp]\ntheorem skewProd_symm_apply (e : M ≃L[R] M₂) (e' : M₃ ≃L[R] M₄) (f : M →L[R] M₄) (x) :\n    (e.skewProd e' f).symm x = (e.symm x.1, e'.symm (x.2 - f (e.symm x.1))) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_neg","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁴ : Semiring R\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : ContinuousNeg M\n⊢ Eq (⇑(ContinuousLinearEquiv.neg R)) (Neg.neg id)","decl":"@[simp]\ntheorem coe_neg [ContinuousNeg M] :\n    (neg R : M → M) = -id := rfl\n\n"}
{"name":"ContinuousLinearEquiv.neg_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁴ : Semiring R\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : ContinuousNeg M\nx : M\n⊢ Eq ((ContinuousLinearEquiv.neg R) x) (Neg.neg x)","decl":"@[simp]\ntheorem neg_apply [ContinuousNeg M] (x : M) :\n    neg R x = -x := by simp\n\n"}
{"name":"ContinuousLinearEquiv.symm_neg","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁴ : Semiring R\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : ContinuousNeg M\n⊢ Eq (ContinuousLinearEquiv.neg R).symm (ContinuousLinearEquiv.neg R)","decl":"@[simp]\ntheorem symm_neg [ContinuousNeg M] :\n    (neg R : M ≃L[R] M).symm = neg R := rfl\n\n"}
{"name":"ContinuousLinearEquiv.map_sub","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁹ : Ring R\nR₂ : Type u_4\ninst✝⁸ : Ring R₂\nM : Type u_5\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : AddCommGroup M\ninst✝⁵ : Module R M\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝ : RingHomInvPair σ₂₁ σ₁₂\ne : ContinuousLinearEquiv σ₁₂ M M₂\nx y : M\n⊢ Eq (e (HSub.hSub x y)) (HSub.hSub (e x) (e y))","decl":"theorem map_sub (e : M ≃SL[σ₁₂] M₂) (x y : M) : e (x - y) = e x - e y :=\n  (e : M →SL[σ₁₂] M₂).map_sub x y\n\n"}
{"name":"ContinuousLinearEquiv.map_neg","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁹ : Ring R\nR₂ : Type u_4\ninst✝⁸ : Ring R₂\nM : Type u_5\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : AddCommGroup M\ninst✝⁵ : Module R M\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝ : RingHomInvPair σ₂₁ σ₁₂\ne : ContinuousLinearEquiv σ₁₂ M M₂\nx : M\n⊢ Eq (e (Neg.neg x)) (Neg.neg (e x))","decl":"theorem map_neg (e : M ≃SL[σ₁₂] M₂) (x : M) : e (-x) = -e x :=\n  (e : M →SL[σ₁₂] M₂).map_neg x\n\n"}
{"name":"ContinuousLinearEquiv.unitsEquiv_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝³ : Ring R\nM : Type u_5\ninst✝² : TopologicalSpace M\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nf : Units (ContinuousLinearMap (RingHom.id R) M M)\nx : M\n⊢ Eq (((ContinuousLinearEquiv.unitsEquiv R M) f) x) (↑f x)","decl":"@[simp]\ntheorem unitsEquiv_apply (f : (M →L[R] M)ˣ) (x : M) : unitsEquiv R M f x = (f : M →L[R] M) x :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.unitsEquivAut_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝² : Ring R\ninst✝¹ : TopologicalSpace R\ninst✝ : ContinuousMul R\nu : Units R\nx : R\n⊢ Eq (((ContinuousLinearEquiv.unitsEquivAut R) u) x) (HMul.hMul x ↑u)","decl":"@[simp]\ntheorem unitsEquivAut_apply (u : Rˣ) (x : R) : unitsEquivAut R u x = x * u :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.unitsEquivAut_apply_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝² : Ring R\ninst✝¹ : TopologicalSpace R\ninst✝ : ContinuousMul R\nu : Units R\nx : R\n⊢ Eq (((ContinuousLinearEquiv.unitsEquivAut R) u).symm x) (HMul.hMul x ↑(Inv.inv u))","decl":"@[simp]\ntheorem unitsEquivAut_apply_symm (u : Rˣ) (x : R) : (unitsEquivAut R u).symm x = x * ↑u⁻¹ :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.unitsEquivAut_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝² : Ring R\ninst✝¹ : TopologicalSpace R\ninst✝ : ContinuousMul R\ne : ContinuousLinearEquiv (RingHom.id R) R R\n⊢ Eq (↑((ContinuousLinearEquiv.unitsEquivAut R).symm e)) (e 1)","decl":"@[simp]\ntheorem unitsEquivAut_symm_apply (e : R ≃L[R] R) : ↑((unitsEquivAut R).symm e) = e 1 :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.fst_equivOfRightInverse","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁷ : Ring R\nM : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : Module R M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap (RingHom.id R) M M₂\nf₂ : ContinuousLinearMap (RingHom.id R) M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\nx : M\n⊢ Eq ((ContinuousLinearEquiv.equivOfRightInverse f₁ f₂ h) x).1 (f₁ x)","decl":"@[simp]\ntheorem fst_equivOfRightInverse (f₁ : M →L[R] M₂) (f₂ : M₂ →L[R] M)\n    (h : Function.RightInverse f₂ f₁) (x : M) : (equivOfRightInverse f₁ f₂ h x).1 = f₁ x :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.snd_equivOfRightInverse","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁷ : Ring R\nM : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : Module R M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap (RingHom.id R) M M₂\nf₂ : ContinuousLinearMap (RingHom.id R) M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\nx : M\n⊢ Eq (↑((ContinuousLinearEquiv.equivOfRightInverse f₁ f₂ h) x).2) (HSub.hSub x (f₂ (f₁ x)))","decl":"@[simp]\ntheorem snd_equivOfRightInverse (f₁ : M →L[R] M₂) (f₂ : M₂ →L[R] M)\n    (h : Function.RightInverse f₂ f₁) (x : M) :\n    ((equivOfRightInverse f₁ f₂ h x).2 : M) = x - f₂ (f₁ x) :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.equivOfRightInverse_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁷ : Ring R\nM : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : Module R M\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap (RingHom.id R) M M₂\nf₂ : ContinuousLinearMap (RingHom.id R) M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\ny : Prod M₂ (Subtype fun x => Membership.mem (LinearMap.ker f₁) x)\n⊢ Eq ((ContinuousLinearEquiv.equivOfRightInverse f₁ f₂ h).symm y) (HAdd.hAdd (f₂ y.1) ↑y.2)","decl":"@[simp]\ntheorem equivOfRightInverse_symm_apply (f₁ : M →L[R] M₂) (f₂ : M₂ →L[R] M)\n    (h : Function.RightInverse f₂ f₁) (y : M₂ × ker f₁) :\n    (equivOfRightInverse f₁ f₂ h).symm y = f₂ y.1 + y.2 :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_funUnique","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"ι : Type u_3\nR : Type u_4\nM : Type u_5\ninst✝⁴ : Unique ι\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : TopologicalSpace M\n⊢ Eq (⇑(ContinuousLinearEquiv.funUnique ι R M)) (Function.eval Inhabited.default)","decl":"@[simp]\ntheorem coe_funUnique : ⇑(funUnique ι R M) = Function.eval default :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.coe_funUnique_symm","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"ι : Type u_3\nR : Type u_4\nM : Type u_5\ninst✝⁴ : Unique ι\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : TopologicalSpace M\n⊢ Eq (⇑(ContinuousLinearEquiv.funUnique ι R M).symm) (Function.const ι)","decl":"@[simp]\ntheorem coe_funUnique_symm : ⇑(funUnique ι R M).symm = Function.const ι :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.piFinTwo_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_4\ninst✝³ : Semiring R\nM : Fin 2 → Type u_6\ninst✝² : (i : Fin 2) → AddCommMonoid (M i)\ninst✝¹ : (i : Fin 2) → Module R (M i)\ninst✝ : (i : Fin 2) → TopologicalSpace (M i)\n⊢ Eq ⇑(ContinuousLinearEquiv.piFinTwo R M) fun f => { fst := f 0, snd := f 1 }","decl":"/-- Continuous linear equivalence between dependent functions `(i : Fin 2) → M i` and `M 0 × M 1`.\n-/\n@[simps! (config := .asFn) apply symm_apply]\ndef piFinTwo (M : Fin 2 → Type*) [∀ i, AddCommMonoid (M i)] [∀ i, Module R (M i)]\n    [∀ i, TopologicalSpace (M i)] : ((i : _) → M i) ≃L[R] M 0 × M 1 :=\n  { Homeomorph.piFinTwo M with toLinearEquiv := LinearEquiv.piFinTwo R M }\n\n"}
{"name":"ContinuousLinearEquiv.piFinTwo_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_4\ninst✝³ : Semiring R\nM : Fin 2 → Type u_6\ninst✝² : (i : Fin 2) → AddCommMonoid (M i)\ninst✝¹ : (i : Fin 2) → Module R (M i)\ninst✝ : (i : Fin 2) → TopologicalSpace (M i)\n⊢ Eq ⇑(ContinuousLinearEquiv.piFinTwo R M).symm fun p => Fin.cons p.1 (Fin.cons p.2 finZeroElim)","decl":"/-- Continuous linear equivalence between dependent functions `(i : Fin 2) → M i` and `M 0 × M 1`.\n-/\n@[simps! (config := .asFn) apply symm_apply]\ndef piFinTwo (M : Fin 2 → Type*) [∀ i, AddCommMonoid (M i)] [∀ i, Module R (M i)]\n    [∀ i, TopologicalSpace (M i)] : ((i : _) → M i) ≃L[R] M 0 × M 1 :=\n  { Homeomorph.piFinTwo M with toLinearEquiv := LinearEquiv.piFinTwo R M }\n\n"}
{"name":"ContinuousLinearEquiv.finTwoArrow_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_4\nM : Type u_5\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : TopologicalSpace M\n⊢ Eq ⇑(ContinuousLinearEquiv.finTwoArrow R M).symm fun x => Matrix.vecCons x.1 (Matrix.vecCons x.2 Matrix.vecEmpty)","decl":"/-- Continuous linear equivalence between vectors in `M² = Fin 2 → M` and `M × M`. -/\n@[simps! (config := .asFn) apply symm_apply]\ndef finTwoArrow : (Fin 2 → M) ≃L[R] M × M :=\n  { piFinTwo R fun _ => M with toLinearEquiv := LinearEquiv.finTwoArrow R M }\n\n"}
{"name":"ContinuousLinearEquiv.finTwoArrow_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_4\nM : Type u_5\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : TopologicalSpace M\n⊢ Eq ⇑(ContinuousLinearEquiv.finTwoArrow R M) fun f => { fst := f 0, snd := f 1 }","decl":"/-- Continuous linear equivalence between vectors in `M² = Fin 2 → M` and `M × M`. -/\n@[simps! (config := .asFn) apply symm_apply]\ndef finTwoArrow : (Fin 2 → M) ≃L[R] M × M :=\n  { piFinTwo R fun _ => M with toLinearEquiv := LinearEquiv.finTwoArrow R M }\n\n"}
{"name":"Fin.consEquivL_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"n : Nat\nR : Type u_6\nM : Fin n.succ → Type u_7\ninst✝³ : Semiring R\ninst✝² : (i : Fin n.succ) → AddCommMonoid (M i)\ninst✝¹ : (i : Fin n.succ) → Module R (M i)\ninst✝ : (i : Fin n.succ) → TopologicalSpace (M i)\na✝ : Prod (M 0) ((i : Fin n) → M i.succ)\ni : Fin (HAdd.hAdd n 1)\n⊢ Eq ((Fin.consEquivL R M) a✝ i) (Fin.cons a✝.1 a✝.2 i)","decl":"variable (R M) in\n/-- `Fin.consEquiv` as a continuous linear equivalence.  -/\n@[simps!]\ndef _root_.Fin.consEquivL : (M 0 × Π i, M (Fin.succ i)) ≃L[R] (Π i, M i) where\n  __ := Fin.consLinearEquiv R M\n  continuous_toFun := continuous_id.fst.finCons continuous_id.snd\n  continuous_invFun := .prod_mk (continuous_apply 0) (by continuity)\n\n"}
{"name":"Fin.consEquivL_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"n : Nat\nR : Type u_6\nM : Fin n.succ → Type u_7\ninst✝³ : Semiring R\ninst✝² : (i : Fin n.succ) → AddCommMonoid (M i)\ninst✝¹ : (i : Fin n.succ) → Module R (M i)\ninst✝ : (i : Fin n.succ) → TopologicalSpace (M i)\na✝ : (i : Fin (HAdd.hAdd n 1)) → M i\n⊢ Eq ((Fin.consEquivL R M).symm a✝) { fst := a✝ 0, snd := Fin.tail a✝ }","decl":"variable (R M) in\n/-- `Fin.consEquiv` as a continuous linear equivalence.  -/\n@[simps!]\ndef _root_.Fin.consEquivL : (M 0 × Π i, M (Fin.succ i)) ≃L[R] (Π i, M i) where\n  __ := Fin.consLinearEquiv R M\n  continuous_toFun := continuous_id.fst.finCons continuous_id.snd\n  continuous_invFun := .prod_mk (continuous_apply 0) (by continuity)\n\n"}
{"name":"ContinuousLinearMap.isInvertible_equiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\nf : ContinuousLinearEquiv (RingHom.id R) M M₂\n⊢ (↑f).IsInvertible","decl":"@[simp] lemma isInvertible_equiv {f : M ≃L[R] M₂} : IsInvertible (f : M →L[R] M₂) := ⟨f, rfl⟩\n\n"}
{"name":"ContinuousLinearMap.inverse_equiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\ne : ContinuousLinearEquiv (RingHom.id R) M M₂\n⊢ Eq (↑e).inverse ↑e.symm","decl":"/-- By definition, if `f` is invertible then `inverse f = f.symm`. -/\n@[simp]\ntheorem inverse_equiv (e : M ≃L[R] M₂) : inverse (e : M →L[R] M₂) = e.symm := by\n  simp [inverse]\n\n"}
{"name":"ContinuousLinearMap.inverse_of_not_isInvertible","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\nf : ContinuousLinearMap (RingHom.id R) M M₂\nhf : Not f.IsInvertible\n⊢ Eq f.inverse 0","decl":"/-- By definition, if `f` is not invertible then `inverse f = 0`. -/\n@[simp] lemma inverse_of_not_isInvertible\n    {f : M →L[R] M₂} (hf : ¬ f.IsInvertible) : f.inverse = 0 :=\n  dif_neg hf\n\n"}
{"name":"ContinuousLinearMap.inverse_non_equiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\nf : ContinuousLinearMap (RingHom.id R) M M₂\nhf : Not f.IsInvertible\n⊢ Eq f.inverse 0","decl":"@[deprecated (since := \"2024-10-29\")] alias inverse_non_equiv := inverse_of_not_isInvertible\n\n"}
{"name":"ContinuousLinearMap.inverse_zero","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\n⊢ Eq (ContinuousLinearMap.inverse 0) 0","decl":"@[simp] theorem inverse_zero : inverse (0 : M →L[R] M₂) = 0 := by\n  by_cases h : IsInvertible (0 : M →L[R] M₂)\n  · rcases h with ⟨e', he'⟩\n    simp only [← he', inverse_equiv]\n    ext v\n    apply e'.injective\n    rw [← ContinuousLinearEquiv.coe_coe, he']\n    rfl\n  · exact inverse_of_not_isInvertible h\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.comp","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ng : ContinuousLinearMap (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\nhg : g.IsInvertible\nhf : f.IsInvertible\n⊢ (g.comp f).IsInvertible","decl":"lemma IsInvertible.comp {g : M₂ →L[R] M₃} {f : M →L[R] M₂}\n    (hg : g.IsInvertible) (hf : f.IsInvertible) : (g ∘L f).IsInvertible := by\n  rcases hg with ⟨N, rfl⟩\n  rcases hf with ⟨M, rfl⟩\n  exact ⟨M.trans N, rfl⟩\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.of_inverse","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\nf : ContinuousLinearMap (RingHom.id R) M M₂\ng : ContinuousLinearMap (RingHom.id R) M₂ M\nhf : Eq (f.comp g) (ContinuousLinearMap.id R M₂)\nhg : Eq (g.comp f) (ContinuousLinearMap.id R M)\n⊢ f.IsInvertible","decl":"lemma IsInvertible.of_inverse {f : M →L[R] M₂} {g : M₂ →L[R] M}\n    (hf : f ∘L g = id R M₂) (hg : g ∘L f = id R M) :\n    f.IsInvertible :=\n  ⟨ContinuousLinearEquiv.equivOfInverse' _ _ hf hg, rfl⟩\n\n"}
{"name":"ContinuousLinearMap.inverse_eq","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\nf : ContinuousLinearMap (RingHom.id R) M M₂\ng : ContinuousLinearMap (RingHom.id R) M₂ M\nhf : Eq (f.comp g) (ContinuousLinearMap.id R M₂)\nhg : Eq (g.comp f) (ContinuousLinearMap.id R M)\n⊢ Eq f.inverse g","decl":"lemma inverse_eq {f : M →L[R] M₂} {g : M₂ →L[R] M} (hf : f ∘L g = id R M₂) (hg : g ∘L f = id R M) :\n    f.inverse = g := by\n  have : f = ContinuousLinearEquiv.equivOfInverse' f g hf hg := rfl\n  rw [this, inverse_equiv]\n  rfl\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.inverse_apply_eq","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid M₂\ninst✝ : Module R M₂\nf : ContinuousLinearMap (RingHom.id R) M M₂\nx : M\ny : M₂\nhf : f.IsInvertible\n⊢ Iff (Eq (f.inverse y) x) (Eq y (f x))","decl":"lemma IsInvertible.inverse_apply_eq {f : M →L[R] M₂} {x : M} {y : M₂} (hf : f.IsInvertible) :\n    f.inverse y = x ↔ y = f x := by\n  rcases hf with ⟨M, rfl⟩\n  simp only [inverse_equiv, ContinuousLinearEquiv.coe_coe]\n  exact ContinuousLinearEquiv.symm_apply_eq M\n\n"}
{"name":"ContinuousLinearMap.isInvertible_equiv_comp","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ne : ContinuousLinearEquiv (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\n⊢ Iff ((↑e).comp f).IsInvertible f.IsInvertible","decl":"@[simp] lemma isInvertible_equiv_comp {e : M₂ ≃L[R] M₃} {f : M →L[R] M₂} :\n    ((e : M₂ →L[R] M₃) ∘L f).IsInvertible ↔ f.IsInvertible := by\n  constructor\n  · rintro ⟨A, hA⟩\n    have : f = e.symm ∘L ((e : M₂ →L[R] M₃) ∘L f) := by ext; simp\n    rw [this, ← hA]\n    simp\n  · rintro ⟨M, rfl⟩\n    simp\n\n"}
{"name":"ContinuousLinearMap.isInvertible_comp_equiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ne : ContinuousLinearEquiv (RingHom.id R) M₃ M\nf : ContinuousLinearMap (RingHom.id R) M M₂\n⊢ Iff (f.comp ↑e).IsInvertible f.IsInvertible","decl":"@[simp] lemma isInvertible_comp_equiv {e : M₃ ≃L[R] M} {f : M →L[R] M₂} :\n    (f ∘L (e : M₃ →L[R] M)).IsInvertible ↔ f.IsInvertible := by\n  constructor\n  · rintro ⟨A, hA⟩\n    have : f = (f ∘L (e : M₃ →L[R] M)) ∘L e.symm := by ext; simp\n    rw [this, ← hA]\n    simp\n  · rintro ⟨M, rfl⟩\n    simp\n\n"}
{"name":"ContinuousLinearMap.inverse_equiv_comp","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ne : ContinuousLinearEquiv (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\n⊢ Eq ((↑e).comp f).inverse (f.inverse.comp ↑e.symm)","decl":"@[simp] lemma inverse_equiv_comp {e : M₂ ≃L[R] M₃} {f : M →L[R] M₂} :\n    (e ∘L f).inverse = f.inverse ∘L (e.symm : M₃ →L[R] M₂) := by\n  by_cases hf : f.IsInvertible\n  · rcases hf with ⟨A, rfl⟩\n    simp only [ContinuousLinearEquiv.comp_coe, inverse_equiv, ContinuousLinearEquiv.coe_inj]\n    rfl\n  · rw [inverse_of_not_isInvertible (by simp [hf]), inverse_of_not_isInvertible hf]\n    rfl\n\n"}
{"name":"ContinuousLinearMap.inverse_comp_equiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ne : ContinuousLinearEquiv (RingHom.id R) M₃ M\nf : ContinuousLinearMap (RingHom.id R) M M₂\n⊢ Eq (f.comp ↑e).inverse ((↑e.symm).comp f.inverse)","decl":"@[simp] lemma inverse_comp_equiv {e : M₃ ≃L[R] M} {f : M →L[R] M₂} :\n    (f ∘L e).inverse = (e.symm : M →L[R] M₃) ∘L f.inverse := by\n  by_cases hf : f.IsInvertible\n  · rcases hf with ⟨A, rfl⟩\n    simp only [ContinuousLinearEquiv.comp_coe, inverse_equiv, ContinuousLinearEquiv.coe_inj]\n    rfl\n  · rw [inverse_of_not_isInvertible (by simp [hf]), inverse_of_not_isInvertible hf]\n    simp\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.inverse_comp_of_left","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ng : ContinuousLinearMap (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\nhg : g.IsInvertible\n⊢ Eq (g.comp f).inverse (f.inverse.comp g.inverse)","decl":"lemma IsInvertible.inverse_comp_of_left {g : M₂ →L[R] M₃} {f : M →L[R] M₂}\n    (hg : g.IsInvertible) : (g ∘L f).inverse = f.inverse ∘L g.inverse := by\n  rcases hg with ⟨N, rfl⟩\n  simp\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.inverse_comp_apply_of_left","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ng : ContinuousLinearMap (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\nv : M₃\nhg : g.IsInvertible\n⊢ Eq ((g.comp f).inverse v) (f.inverse (g.inverse v))","decl":"lemma IsInvertible.inverse_comp_apply_of_left {g : M₂ →L[R] M₃} {f : M →L[R] M₂} {v : M₃}\n    (hg : g.IsInvertible) : (g ∘L f).inverse v = f.inverse (g.inverse v) := by\n  simp only [hg.inverse_comp_of_left, coe_comp', Function.comp_apply]\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.inverse_comp_of_right","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ng : ContinuousLinearMap (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\nhf : f.IsInvertible\n⊢ Eq (g.comp f).inverse (f.inverse.comp g.inverse)","decl":"lemma IsInvertible.inverse_comp_of_right {g : M₂ →L[R] M₃} {f : M →L[R] M₂}\n    (hf : f.IsInvertible) : (g ∘L f).inverse = f.inverse ∘L g.inverse := by\n  rcases hf with ⟨M, rfl⟩\n  simp\n\n"}
{"name":"ContinuousLinearMap.IsInvertible.inverse_comp_apply_of_right","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\nM₃ : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : Semiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M₂\ninst✝¹ : AddCommMonoid M₃\ninst✝ : Module R M₃\ng : ContinuousLinearMap (RingHom.id R) M₂ M₃\nf : ContinuousLinearMap (RingHom.id R) M M₂\nv : M₃\nhf : f.IsInvertible\n⊢ Eq ((g.comp f).inverse v) (f.inverse (g.inverse v))","decl":"lemma IsInvertible.inverse_comp_apply_of_right {g : M₂ →L[R] M₃} {f : M →L[R] M₂} {v : M₃}\n    (hf : f.IsInvertible) : (g ∘L f).inverse v = f.inverse (g.inverse v) := by\n  simp only [hf.inverse_comp_of_right, coe_comp', Function.comp_apply]\n\n"}
{"name":"ContinuousLinearMap.ring_inverse_equiv","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : Ring R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\ne : ContinuousLinearEquiv (RingHom.id R) M M\n⊢ Eq (Ring.inverse ↑e) (↑e).inverse","decl":"@[simp]\ntheorem ring_inverse_equiv (e : M ≃L[R] M) : Ring.inverse ↑e = inverse (e : M →L[R] M) := by\n  suffices Ring.inverse ((ContinuousLinearEquiv.unitsEquiv _ _).symm e : M →L[R] M) = inverse ↑e by\n    convert this\n  simp\n  rfl\n\n"}
{"name":"ContinuousLinearMap.to_ring_inverse","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : Ring R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M₂\ninst✝ : Module R M₂\ne : ContinuousLinearEquiv (RingHom.id R) M M₂\nf : ContinuousLinearMap (RingHom.id R) M M₂\n⊢ Eq f.inverse ((Ring.inverse ((↑e.symm).comp f)).comp ↑e.symm)","decl":"/-- The function `ContinuousLinearEquiv.inverse` can be written in terms of `Ring.inverse` for the\nring of self-maps of the domain. -/\ntheorem to_ring_inverse (e : M ≃L[R] M₂) (f : M →L[R] M₂) :\n    inverse f = Ring.inverse ((e.symm : M₂ →L[R] M).comp f) ∘L e.symm := by\n  by_cases h₁ : f.IsInvertible\n  · obtain ⟨e', he'⟩ := h₁\n    rw [← he']\n    change _ = Ring.inverse (e'.trans e.symm : M →L[R] M) ∘L (e.symm : M₂ →L[R] M)\n    ext\n    simp\n  · suffices ¬IsUnit ((e.symm : M₂ →L[R] M).comp f) by simp [this, h₁]\n    contrapose! h₁\n    rcases h₁ with ⟨F, hF⟩\n    use (ContinuousLinearEquiv.unitsEquiv _ _ F).trans e\n    ext\n    dsimp\n    rw [hF]\n    simp\n\n"}
{"name":"ContinuousLinearMap.ring_inverse_eq_map_inverse","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : Ring R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\n⊢ Eq Ring.inverse ContinuousLinearMap.inverse","decl":"theorem ring_inverse_eq_map_inverse : Ring.inverse = @inverse R M M _ _ _ _ _ _ _ := by\n  ext\n  simp [to_ring_inverse (ContinuousLinearEquiv.refl R M)]\n\n"}
{"name":"ContinuousLinearMap.inverse_id","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : Ring R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\n⊢ Eq (ContinuousLinearMap.id R M).inverse (ContinuousLinearMap.id R M)","decl":"@[simp] theorem inverse_id : (id R M).inverse = id R M := by\n  rw [← ring_inverse_eq_map_inverse]\n  exact Ring.inverse_one _\n\n"}
{"name":"Submodule.ClosedComplemented.exists_submodule_equiv_prod","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝⁴ : Ring R\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : TopologicalAddGroup M\np : Submodule R M\nhp : p.ClosedComplemented\n⊢ Exists fun q => Exists fun e => And (∀ (x : Subtype fun x => Membership.mem p x), Eq (e ↑x) { fst := x, snd := 0 }) (And (∀ (y : Subtype fun x => Membership.mem q x), Eq (e ↑y) { fst := 0, snd := y }) (∀ (x : Prod (Subtype fun x => Membership.mem p x) (Subtype fun x => Membership.mem q x)), Eq (e.symm x) (HAdd.hAdd ↑x.1 ↑x.2)))","decl":"/-- If `p` is a closed complemented submodule,\nthen there exists a submodule `q` and a continuous linear equivalence `M ≃L[R] (p × q)` such that\n`e (x : p) = (x, 0)`, `e (y : q) = (0, y)`, and `e.symm x = x.1 + x.2`.\n\nIn fact, the properties of `e` imply the properties of `e.symm` and vice versa,\nbut we provide both for convenience. -/\nlemma ClosedComplemented.exists_submodule_equiv_prod [TopologicalAddGroup M]\n    {p : Submodule R M} (hp : p.ClosedComplemented) :\n    ∃ (q : Submodule R M) (e : M ≃L[R] (p × q)),\n      (∀ x : p, e x = (x, 0)) ∧ (∀ y : q, e y = (0, y)) ∧ (∀ x, e.symm x = x.1 + x.2) :=\n  let ⟨f, hf⟩ := hp\n  ⟨LinearMap.ker f, .equivOfRightInverse _ p.subtypeL hf,\n    fun _ ↦ by ext <;> simp [hf], fun _ ↦ by ext <;> simp [hf], fun _ ↦ rfl⟩\n\n"}
{"name":"MulOpposite.opContinuousLinearEquiv_symm_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝³ : Semiring R\nM : Type u_4\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : TopologicalSpace M\na✝ : MulOpposite M\n⊢ Eq ((MulOpposite.opContinuousLinearEquiv R).symm a✝) (MulOpposite.unop a✝)","decl":"/-- The function `op` is a continuous linear equivalence. -/\n@[simps!]\ndef opContinuousLinearEquiv : M ≃L[R] Mᵐᵒᵖ where\n  __ := MulOpposite.opLinearEquiv R\n\n"}
{"name":"MulOpposite.opContinuousLinearEquiv_apply","module":"Mathlib.Topology.Algebra.Module.Equiv","initialProofState":"R : Type u_3\ninst✝³ : Semiring R\nM : Type u_4\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : TopologicalSpace M\na✝ : M\n⊢ Eq ((MulOpposite.opContinuousLinearEquiv R) a✝) (MulOpposite.op a✝)","decl":"/-- The function `op` is a continuous linear equivalence. -/\n@[simps!]\ndef opContinuousLinearEquiv : M ≃L[R] Mᵐᵒᵖ where\n  __ := MulOpposite.opLinearEquiv R\n\n"}
