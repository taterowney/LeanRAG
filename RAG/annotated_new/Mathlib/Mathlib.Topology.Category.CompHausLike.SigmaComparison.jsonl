{"name":"CompHausLike.instHasPropSigma","module":"Mathlib.Topology.Category.CompHausLike.SigmaComparison","initialProofState":"P : TopCat → Prop\ninst✝⁵ : CompHausLike.HasExplicitFiniteCoproducts P\nα : Type u\ninst✝⁴ : Finite α\nσ : α → Type u\ninst✝³ : (a : α) → TopologicalSpace (σ a)\ninst✝² : ∀ (a : α), CompactSpace (σ a)\ninst✝¹ : ∀ (a : α), T2Space (σ a)\ninst✝ : ∀ (a : α), CompHausLike.HasProp P (σ a)\n⊢ CompHausLike.HasProp P (Sigma fun a => σ a)","decl":"instance : HasProp P (Σ (a : α), (σ a)) := HasExplicitFiniteCoproducts.hasProp (fun a ↦ of P (σ a))\n\n"}
{"name":"CompHausLike.sigmaComparison_eq_comp_isos","module":"Mathlib.Topology.Category.CompHausLike.SigmaComparison","initialProofState":"P : TopCat → Prop\ninst✝⁶ : CompHausLike.HasExplicitFiniteCoproducts P\nX : CategoryTheory.Functor (Opposite (CompHausLike P)) (Type (max u w))\ninst✝⁵ : CategoryTheory.Limits.PreservesFiniteProducts X\nα : Type u\ninst✝⁴ : Finite α\nσ : α → Type u\ninst✝³ : (a : α) → TopologicalSpace (σ a)\ninst✝² : ∀ (a : α), CompactSpace (σ a)\ninst✝¹ : ∀ (a : α), T2Space (σ a)\ninst✝ : ∀ (a : α), CompHausLike.HasProp P (σ a)\n⊢ Eq (CompHausLike.sigmaComparison X σ) (CategoryTheory.CategoryStruct.comp (X.mapIso (CategoryTheory.Limits.opCoproductIsoProduct' (CompHausLike.finiteCoproduct.isColimit fun a => CompHausLike.of P (σ a)) (CategoryTheory.Limits.productIsProduct fun x => { unop := CompHausLike.of P (σ x) }))).hom (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.PreservesProduct.iso X fun a => { unop := CompHausLike.of P (σ a) }).hom (CategoryTheory.Limits.Types.productIso fun a => X.obj { unop := CompHausLike.of P (σ a) }).hom))","decl":"theorem sigmaComparison_eq_comp_isos : sigmaComparison X σ =\n    (X.mapIso (opCoproductIsoProduct'\n      (finiteCoproduct.isColimit.{u, u} (fun a ↦ of P (σ a)))\n      (productIsProduct fun x ↦ Opposite.op (of P (σ x))))).hom ≫\n    (PreservesProduct.iso X fun a ↦ ⟨of P (σ a)⟩).hom ≫\n    (Types.productIso.{u, max u w} fun a ↦ X.obj ⟨of P (σ a)⟩).hom := by\n  ext x a\n  simp only [Cofan.mk_pt, Fan.mk_pt, Functor.mapIso_hom,\n    PreservesProduct.iso_hom, types_comp_apply, Types.productIso_hom_comp_eval_apply]\n  have := congrFun (piComparison_comp_π X (fun a ↦ ⟨of P (σ a)⟩) a)\n  simp only [types_comp_apply] at this\n  rw [this, ← FunctorToTypes.map_comp_apply]\n  simp only [sigmaComparison]\n  apply congrFun\n  congr 2\n  rw [← opCoproductIsoProduct_inv_comp_ι]\n  simp only [coe_of, Opposite.unop_op, unop_comp, Quiver.Hom.unop_op, Category.assoc]\n  simp only [opCoproductIsoProduct, ← unop_comp, opCoproductIsoProduct'_comp_self]\n  erw [IsColimit.fac]\n  rfl\n\n"}
{"name":"CompHausLike.isIsoSigmaComparison","module":"Mathlib.Topology.Category.CompHausLike.SigmaComparison","initialProofState":"P : TopCat → Prop\ninst✝⁵ : CompHausLike.HasExplicitFiniteCoproducts P\nX : CategoryTheory.Functor (Opposite (CompHausLike P)) (Type (max u w))\nα : Type u\ninst✝⁴ : Finite α\nσ : α → Type u\ninst✝³ : (a : α) → TopologicalSpace (σ a)\ninst✝² : ∀ (a : α), CompactSpace (σ a)\ninst✝¹ : ∀ (a : α), T2Space (σ a)\ninst✝ : ∀ (a : α), CompHausLike.HasProp P (σ a)\n⊢ CategoryTheory.IsIso (CompHausLike.sigmaComparison X σ)","decl":"instance isIsoSigmaComparison : IsIso <| sigmaComparison X σ := by\n  rw [sigmaComparison_eq_comp_isos]\n  infer_instance\n\n"}
