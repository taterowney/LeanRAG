{"name":"Algebra.FiniteType.baseChangeAux_surj","module":"Mathlib.RingTheory.FiniteStability","initialProofState":"R : Type w₁\ninst✝⁴ : CommRing R\nA : Type w₂\ninst✝³ : CommRing A\ninst✝² : Algebra R A\nB : Type w₃\ninst✝¹ : CommRing B\ninst✝ : Algebra R B\nσ : Type u_1\nf : AlgHom R (MvPolynomial σ R) A\nhf : Function.Surjective ⇑f\n⊢ Function.Surjective ⇑(Algebra.TensorProduct.map (AlgHom.id B B) f)","decl":"theorem baseChangeAux_surj {σ : Type*} {f : MvPolynomial σ R →ₐ[R] A} (hf : Function.Surjective f) :\n    Function.Surjective (Algebra.TensorProduct.map (AlgHom.id B B) f) := by\n  show Function.Surjective (TensorProduct.map (AlgHom.id R B) f)\n  apply TensorProduct.map_surjective\n  · exact Function.RightInverse.surjective (congrFun rfl)\n  · exact hf\n\n"}
{"name":"Algebra.FiniteType.baseChange","module":"Mathlib.RingTheory.FiniteStability","initialProofState":"R : Type w₁\ninst✝⁴ : CommRing R\nA : Type w₂\ninst✝³ : CommRing A\ninst✝² : Algebra R A\nB : Type w₃\ninst✝¹ : CommRing B\ninst✝ : Algebra R B\nhfa : Algebra.FiniteType R A\n⊢ Algebra.FiniteType B (TensorProduct R B A)","decl":"instance baseChange [hfa : FiniteType R A] : Algebra.FiniteType B (B ⊗[R] A) := by\n  rw [iff_quotient_mvPolynomial''] at *\n  obtain ⟨n, f, hf⟩ := hfa\n  let g : B ⊗[R] MvPolynomial (Fin n) R →ₐ[B] B ⊗[R] A :=\n    Algebra.TensorProduct.map (AlgHom.id B B) f\n  have : Function.Surjective g := baseChangeAux_surj B hf\n  use n, AlgHom.comp g (MvPolynomial.algebraTensorAlgEquiv R B).symm.toAlgHom\n  simpa\n\n"}
{"name":"Algebra.FinitePresentation.baseChange","module":"Mathlib.RingTheory.FiniteStability","initialProofState":"R : Type w₁\ninst✝⁵ : CommRing R\nA : Type w₂\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\nB : Type w₃\ninst✝² : CommRing B\ninst✝¹ : Algebra R B\ninst✝ : Algebra.FinitePresentation R A\n⊢ Algebra.FinitePresentation B (TensorProduct R B A)","decl":"instance baseChange [FinitePresentation R A] : FinitePresentation B (B ⊗[R] A) := by\n  obtain ⟨n, f, hsurj, hfg⟩ := ‹FinitePresentation R A›\n  let g : B ⊗[R] MvPolynomial (Fin n) R →ₐ[B] B ⊗[R] A :=\n    Algebra.TensorProduct.map (AlgHom.id B B) f\n  have hgsurj : Function.Surjective g := Algebra.FiniteType.baseChangeAux_surj B hsurj\n  have hker_eq : RingHom.ker g = Ideal.map Algebra.TensorProduct.includeRight (RingHom.ker f) :=\n    Algebra.TensorProduct.lTensor_ker f hsurj\n  have hfgg : Ideal.FG (RingHom.ker g) := by\n    rw [hker_eq]\n    exact Ideal.FG.map hfg _\n  let g' : MvPolynomial (Fin n) B →ₐ[B] B ⊗[R] A :=\n    AlgHom.comp g (MvPolynomial.algebraTensorAlgEquiv R B).symm.toAlgHom\n  refine ⟨n, g', ?_, Ideal.fg_ker_comp _ _ ?_ hfgg ?_⟩\n  · simp_all [g, g']\n  · show Ideal.FG (RingHom.ker (AlgEquiv.symm (MvPolynomial.algebraTensorAlgEquiv R B)))\n    simp only [RingHom.ker_equiv]\n    exact Submodule.fg_bot\n  · simpa using EquivLike.surjective _\n\n"}
