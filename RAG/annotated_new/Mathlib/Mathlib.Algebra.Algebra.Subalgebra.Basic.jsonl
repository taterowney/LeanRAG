{"name":"Subalgebra.mk.sizeOf_spec","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : SizeOf R\ninst✝ : SizeOf A\ntoSubsemiring : Subsemiring A\nalgebraMap_mem' : ∀ (r : R), Membership.mem toSubsemiring.carrier ((algebraMap R A) r)\n⊢ Eq (SizeOf.sizeOf { toSubsemiring := toSubsemiring, algebraMap_mem' := algebraMap_mem' }) (HAdd.hAdd 1 (SizeOf.sizeOf toSubsemiring))","decl":"/-- A subalgebra is a sub(semi)ring that includes the range of `algebraMap`. -/\nstructure Subalgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] [Algebra R A] extends\n  Subsemiring A : Type v where\n  /-- The image of `algebraMap` is contained in the underlying set of the subalgebra -/\n  algebraMap_mem' : ∀ r, algebraMap R A r ∈ carrier\n  zero_mem' := (algebraMap R A).map_zero ▸ algebraMap_mem' 0\n  one_mem' := (algebraMap R A).map_one ▸ algebraMap_mem' 1\n\n"}
{"name":"Subalgebra.mk.inj","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ntoSubsemiring✝ : Subsemiring A\nalgebraMap_mem'✝ : ∀ (r : R), Membership.mem toSubsemiring✝.carrier ((algebraMap R A) r)\ntoSubsemiring : Subsemiring A\nalgebraMap_mem' : ∀ (r : R), Membership.mem toSubsemiring.carrier ((algebraMap R A) r)\nx✝ : Eq { toSubsemiring := toSubsemiring✝, algebraMap_mem' := algebraMap_mem'✝ } { toSubsemiring := toSubsemiring, algebraMap_mem' := algebraMap_mem' }\n⊢ Eq toSubsemiring✝ toSubsemiring","decl":"/-- A subalgebra is a sub(semi)ring that includes the range of `algebraMap`. -/\nstructure Subalgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] [Algebra R A] extends\n  Subsemiring A : Type v where\n  /-- The image of `algebraMap` is contained in the underlying set of the subalgebra -/\n  algebraMap_mem' : ∀ r, algebraMap R A r ∈ carrier\n  zero_mem' := (algebraMap R A).map_zero ▸ algebraMap_mem' 0\n  one_mem' := (algebraMap R A).map_one ▸ algebraMap_mem' 1\n\n"}
{"name":"Subalgebra.mk.injEq","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ntoSubsemiring✝ : Subsemiring A\nalgebraMap_mem'✝ : ∀ (r : R), Membership.mem toSubsemiring✝.carrier ((algebraMap R A) r)\ntoSubsemiring : Subsemiring A\nalgebraMap_mem' : ∀ (r : R), Membership.mem toSubsemiring.carrier ((algebraMap R A) r)\n⊢ Eq (Eq { toSubsemiring := toSubsemiring✝, algebraMap_mem' := algebraMap_mem'✝ } { toSubsemiring := toSubsemiring, algebraMap_mem' := algebraMap_mem' }) (Eq toSubsemiring✝ toSubsemiring)","decl":"/-- A subalgebra is a sub(semi)ring that includes the range of `algebraMap`. -/\nstructure Subalgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] [Algebra R A] extends\n  Subsemiring A : Type v where\n  /-- The image of `algebraMap` is contained in the underlying set of the subalgebra -/\n  algebraMap_mem' : ∀ r, algebraMap R A r ∈ carrier\n  zero_mem' := (algebraMap R A).map_zero ▸ algebraMap_mem' 0\n  one_mem' := (algebraMap R A).map_one ▸ algebraMap_mem' 1\n\n"}
{"name":"Subalgebra.algebraMap_mem'","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nself : Subalgebra R A\nr : R\n⊢ Membership.mem self.carrier ((algebraMap R A) r)","decl":"/-- A subalgebra is a sub(semi)ring that includes the range of `algebraMap`. -/\nstructure Subalgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] [Algebra R A] extends\n  Subsemiring A : Type v where\n  /-- The image of `algebraMap` is contained in the underlying set of the subalgebra -/\n  algebraMap_mem' : ∀ r, algebraMap R A r ∈ carrier\n  zero_mem' := (algebraMap R A).map_zero ▸ algebraMap_mem' 0\n  one_mem' := (algebraMap R A).map_one ▸ algebraMap_mem' 1\n\n"}
{"name":"Subalgebra.SubsemiringClass","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ SubsemiringClass (Subalgebra R A) A","decl":"instance SubsemiringClass : SubsemiringClass (Subalgebra R A) A where\n  add_mem {s} := add_mem (s := s.toSubsemiring)\n  mul_mem {s} := mul_mem (s := s.toSubsemiring)\n  one_mem {s} := one_mem s.toSubsemiring\n  zero_mem {s} := zero_mem s.toSubsemiring\n\n"}
{"name":"Subalgebra.mem_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\n⊢ Iff (Membership.mem S.toSubsemiring x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_toSubsemiring {S : Subalgebra R A} {x} : x ∈ S.toSubsemiring ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"Subalgebra.mem_carrier","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Subalgebra R A\nx : A\n⊢ Iff (Membership.mem s.carrier x) (Membership.mem s x)","decl":"theorem mem_carrier {s : Subalgebra R A} {x : A} : x ∈ s.carrier ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Subalgebra.ext","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : ∀ (x : A), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"@[ext]\ntheorem ext {S T : Subalgebra R A} (h : ∀ x : A, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"Subalgebra.ext_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Iff (Eq S T) (∀ (x : A), Iff (Membership.mem S x) (Membership.mem T x))","decl":"@[ext]\ntheorem ext {S T : Subalgebra R A} (h : ∀ x : A, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"Subalgebra.coe_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq ↑S.toSubsemiring ↑S","decl":"@[simp]\ntheorem coe_toSubsemiring (S : Subalgebra R A) : (↑S.toSubsemiring : Set A) = S :=\n  rfl\n\n"}
{"name":"Subalgebra.toSubsemiring_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Function.Injective Subalgebra.toSubsemiring","decl":"theorem toSubsemiring_injective :\n    Function.Injective (toSubsemiring : Subalgebra R A → Subsemiring A) := fun S T h =>\n  ext fun x => by rw [← mem_toSubsemiring, ← mem_toSubsemiring, h]\n\n"}
{"name":"Subalgebra.toSubsemiring_inj","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS U : Subalgebra R A\n⊢ Iff (Eq S.toSubsemiring U.toSubsemiring) (Eq S U)","decl":"theorem toSubsemiring_inj {S U : Subalgebra R A} : S.toSubsemiring = U.toSubsemiring ↔ S = U :=\n  toSubsemiring_injective.eq_iff\n\n"}
{"name":"Subalgebra.coe_copy","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\ns : Set A\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"/-- Copy of a subalgebra with a new `carrier` equal to the old one. Useful to fix definitional\nequalities. -/\n@[simps coe toSubsemiring]\nprotected def copy (S : Subalgebra R A) (s : Set A) (hs : s = ↑S) : Subalgebra R A :=\n  { S.toSubsemiring.copy s hs with\n    carrier := s\n    algebraMap_mem' := hs.symm ▸ S.algebraMap_mem' }\n\n"}
{"name":"Subalgebra.copy_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\ns : Set A\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs).toSubsemiring { carrier := s, mul_mem' := ⋯, one_mem' := ⋯, add_mem' := ⋯, zero_mem' := ⋯ }","decl":"/-- Copy of a subalgebra with a new `carrier` equal to the old one. Useful to fix definitional\nequalities. -/\n@[simps coe toSubsemiring]\nprotected def copy (S : Subalgebra R A) (s : Set A) (hs : s = ↑S) : Subalgebra R A :=\n  { S.toSubsemiring.copy s hs with\n    carrier := s\n    algebraMap_mem' := hs.symm ▸ S.algebraMap_mem' }\n\n"}
{"name":"Subalgebra.copy_eq","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\ns : Set A\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"theorem copy_eq (S : Subalgebra R A) (s : Set A) (hs : s = ↑S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
{"name":"Subalgebra.instSMulMemClass","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ SMulMemClass (Subalgebra R A) R A","decl":"instance instSMulMemClass : SMulMemClass (Subalgebra R A) R A where\n  smul_mem {S} r x hx := (Algebra.smul_def r x).symm ▸ mul_mem (S.algebraMap_mem' r) hx\n\n"}
{"name":"algebraMap_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"S : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : SetLike S A\ninst✝¹ : OneMemClass S A\ninst✝ : SMulMemClass S R A\ns : S\nr : R\n⊢ Membership.mem s ((algebraMap R A) r)","decl":"@[aesop safe apply (rule_sets := [SetLike])]\ntheorem _root_.algebraMap_mem {S R A : Type*} [CommSemiring R] [Semiring A] [Algebra R A]\n    [SetLike S A] [OneMemClass S A] [SMulMemClass S R A] (s : S) (r : R) :\n    algebraMap R A r ∈ s :=\n  Algebra.algebraMap_eq_smul_one (A := A) r ▸ SMulMemClass.smul_mem r (one_mem s)\n\n"}
{"name":"Subalgebra.algebraMap_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nr : R\n⊢ Membership.mem S ((algebraMap R A) r)","decl":"protected theorem algebraMap_mem (r : R) : algebraMap R A r ∈ S :=\n  algebraMap_mem S r\n\n"}
{"name":"Subalgebra.rangeS_le","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ LE.le (algebraMap R A).rangeS S.toSubsemiring","decl":"theorem rangeS_le : (algebraMap R A).rangeS ≤ S.toSubsemiring := fun _x ⟨r, hr⟩ =>\n  hr ▸ S.algebraMap_mem r\n\n"}
{"name":"Subalgebra.range_subset","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ HasSubset.Subset (Set.range ⇑(algebraMap R A)) ↑S","decl":"theorem range_subset : Set.range (algebraMap R A) ⊆ S := fun _x ⟨r, hr⟩ => hr ▸ S.algebraMap_mem r\n\n"}
{"name":"Subalgebra.range_le","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ LE.le (Set.range ⇑(algebraMap R A)) ↑S","decl":"theorem range_le : Set.range (algebraMap R A) ≤ S :=\n  S.range_subset\n\n"}
{"name":"Subalgebra.smul_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\nhx : Membership.mem S x\nr : R\n⊢ Membership.mem S (HSMul.hSMul r x)","decl":"theorem smul_mem {x : A} (hx : x ∈ S) (r : R) : r • x ∈ S :=\n  SMulMemClass.smul_mem r hx\n\n"}
{"name":"Subalgebra.one_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Membership.mem S 1","decl":"protected theorem one_mem : (1 : A) ∈ S :=\n  one_mem S\n\n"}
{"name":"Subalgebra.mul_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx y : A\nhx : Membership.mem S x\nhy : Membership.mem S y\n⊢ Membership.mem S (HMul.hMul x y)","decl":"protected theorem mul_mem {x y : A} (hx : x ∈ S) (hy : y ∈ S) : x * y ∈ S :=\n  mul_mem hx hy\n\n"}
{"name":"Subalgebra.pow_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\nhx : Membership.mem S x\nn : Nat\n⊢ Membership.mem S (HPow.hPow x n)","decl":"protected theorem pow_mem {x : A} (hx : x ∈ S) (n : ℕ) : x ^ n ∈ S :=\n  pow_mem hx n\n\n"}
{"name":"Subalgebra.zero_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Membership.mem S 0","decl":"protected theorem zero_mem : (0 : A) ∈ S :=\n  zero_mem S\n\n"}
{"name":"Subalgebra.add_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx y : A\nhx : Membership.mem S x\nhy : Membership.mem S y\n⊢ Membership.mem S (HAdd.hAdd x y)","decl":"protected theorem add_mem {x y : A} (hx : x ∈ S) (hy : y ∈ S) : x + y ∈ S :=\n  add_mem hx hy\n\n"}
{"name":"Subalgebra.nsmul_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\nhx : Membership.mem S x\nn : Nat\n⊢ Membership.mem S (HSMul.hSMul n x)","decl":"protected theorem nsmul_mem {x : A} (hx : x ∈ S) (n : ℕ) : n • x ∈ S :=\n  nsmul_mem hx n\n\n"}
{"name":"Subalgebra.natCast_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nn : Nat\n⊢ Membership.mem S ↑n","decl":"protected theorem natCast_mem (n : ℕ) : (n : A) ∈ S :=\n  natCast_mem S n\n\n"}
{"name":"Subalgebra.list_prod_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nL : List A\nh : ∀ (x : A), Membership.mem L x → Membership.mem S x\n⊢ Membership.mem S L.prod","decl":"protected theorem list_prod_mem {L : List A} (h : ∀ x ∈ L, x ∈ S) : L.prod ∈ S :=\n  list_prod_mem h\n\n"}
{"name":"Subalgebra.list_sum_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nL : List A\nh : ∀ (x : A), Membership.mem L x → Membership.mem S x\n⊢ Membership.mem S L.sum","decl":"protected theorem list_sum_mem {L : List A} (h : ∀ x ∈ L, x ∈ S) : L.sum ∈ S :=\n  list_sum_mem h\n\n"}
{"name":"Subalgebra.multiset_sum_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nm : Multiset A\nh : ∀ (x : A), Membership.mem m x → Membership.mem S x\n⊢ Membership.mem S m.sum","decl":"protected theorem multiset_sum_mem {m : Multiset A} (h : ∀ x ∈ m, x ∈ S) : m.sum ∈ S :=\n  multiset_sum_mem m h\n\n"}
{"name":"Subalgebra.sum_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nι : Type w\nt : Finset ι\nf : ι → A\nh : ∀ (x : ι), Membership.mem t x → Membership.mem S (f x)\n⊢ Membership.mem S (t.sum fun x => f x)","decl":"protected theorem sum_mem {ι : Type w} {t : Finset ι} {f : ι → A} (h : ∀ x ∈ t, f x ∈ S) :\n    (∑ x ∈ t, f x) ∈ S :=\n  sum_mem h\n\n"}
{"name":"Subalgebra.multiset_prod_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nm : Multiset A\nh : ∀ (x : A), Membership.mem m x → Membership.mem S x\n⊢ Membership.mem S m.prod","decl":"protected theorem multiset_prod_mem {R : Type u} {A : Type v} [CommSemiring R] [CommSemiring A]\n    [Algebra R A] (S : Subalgebra R A) {m : Multiset A} (h : ∀ x ∈ m, x ∈ S) : m.prod ∈ S :=\n  multiset_prod_mem m h\n\n"}
{"name":"Subalgebra.prod_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nι : Type w\nt : Finset ι\nf : ι → A\nh : ∀ (x : ι), Membership.mem t x → Membership.mem S (f x)\n⊢ Membership.mem S (t.prod fun x => f x)","decl":"protected theorem prod_mem {R : Type u} {A : Type v} [CommSemiring R] [CommSemiring A] [Algebra R A]\n    (S : Subalgebra R A) {ι : Type w} {t : Finset ι} {f : ι → A} (h : ∀ x ∈ t, f x ∈ S) :\n    (∏ x ∈ t, f x) ∈ S :=\n  prod_mem h\n\n"}
{"name":"Subalgebra.one_mem_toNonUnitalSubalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Membership.mem S.toNonUnitalSubalgebra 1","decl":"lemma one_mem_toNonUnitalSubalgebra (S : Subalgebra R A) : (1 : A) ∈ S.toNonUnitalSubalgebra :=\n  S.one_mem\n\n"}
{"name":"Subalgebra.instSubringClass","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ SubringClass (Subalgebra R A) A","decl":"instance {R A : Type*} [CommRing R] [Ring A] [Algebra R A] : SubringClass (Subalgebra R A) A :=\n  { Subalgebra.SubsemiringClass with\n    neg_mem := fun {S x} hx => neg_one_smul R x ▸ S.smul_mem hx _ }\n\n"}
{"name":"Subalgebra.neg_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\nhx : Membership.mem S x\n⊢ Membership.mem S (Neg.neg x)","decl":"protected theorem neg_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    (S : Subalgebra R A) {x : A} (hx : x ∈ S) : -x ∈ S :=\n  neg_mem hx\n\n"}
{"name":"Subalgebra.sub_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx y : A\nhx : Membership.mem S x\nhy : Membership.mem S y\n⊢ Membership.mem S (HSub.hSub x y)","decl":"protected theorem sub_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    (S : Subalgebra R A) {x y : A} (hx : x ∈ S) (hy : y ∈ S) : x - y ∈ S :=\n  sub_mem hx hy\n\n"}
{"name":"Subalgebra.zsmul_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\nhx : Membership.mem S x\nn : Int\n⊢ Membership.mem S (HSMul.hSMul n x)","decl":"protected theorem zsmul_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    (S : Subalgebra R A) {x : A} (hx : x ∈ S) (n : ℤ) : n • x ∈ S :=\n  zsmul_mem hx n\n\n"}
{"name":"Subalgebra.intCast_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nn : Int\n⊢ Membership.mem S ↑n","decl":"protected theorem intCast_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    (S : Subalgebra R A) (n : ℤ) : (n : A) ∈ S :=\n  intCast_mem S n\n\n"}
{"name":"Subalgebra.coe_toAddSubmonoid","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (↑S.toAddSubmonoid) S.carrier","decl":"/-- The projection from a subalgebra of `A` to an additive submonoid of `A`. -/\n@[simps coe]\ndef toAddSubmonoid {R : Type u} {A : Type v} [CommSemiring R] [Semiring A] [Algebra R A]\n    (S : Subalgebra R A) : AddSubmonoid A :=\n  S.toSubsemiring.toAddSubmonoid\n\n-- Porting note: this field already exists in Lean 4.\n-- /-- The projection from a subalgebra of `A` to a submonoid of `A`. -/\n-- def toSubmonoid {R : Type u} {A : Type v} [CommSemiring R] [Semiring A] [Algebra R A]\n--     (S : Subalgebra R A) : Submonoid A :=\n--   S.toSubsemiring.toSubmonoid\n\n"}
{"name":"Subalgebra.toSubring_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq S.toSubring.toSubsemiring S.toSubsemiring","decl":"/-- A subalgebra over a ring is also a `Subring`. -/\n@[simps toSubsemiring]\ndef toSubring {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A] (S : Subalgebra R A) :\n    Subring A :=\n  { S.toSubsemiring with neg_mem' := S.neg_mem }\n\n"}
{"name":"Subalgebra.mem_toSubring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\n⊢ Iff (Membership.mem S.toSubring x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_toSubring {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    {S : Subalgebra R A} {x} : x ∈ S.toSubring ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"Subalgebra.coe_toSubring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq ↑S.toSubring ↑S","decl":"@[simp]\ntheorem coe_toSubring {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    (S : Subalgebra R A) : (↑S.toSubring : Set A) = S :=\n  rfl\n\n"}
{"name":"Subalgebra.toSubring_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Function.Injective Subalgebra.toSubring","decl":"theorem toSubring_injective {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A] :\n    Function.Injective (toSubring : Subalgebra R A → Subring A) := fun S T h =>\n  ext fun x => by rw [← mem_toSubring, ← mem_toSubring, h]\n\n"}
{"name":"Subalgebra.toSubring_inj","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS U : Subalgebra R A\n⊢ Iff (Eq S.toSubring U.toSubring) (Eq S U)","decl":"theorem toSubring_inj {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    {S U : Subalgebra R A} : S.toSubring = U.toSubring ↔ S = U :=\n  toSubring_injective.eq_iff\n\n"}
{"name":"Subalgebra.mem_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : A\n⊢ Iff (Membership.mem (Subalgebra.toSubmodule S) x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_toSubmodule {x} : x ∈ (toSubmodule S) ↔ x ∈ S := Iff.rfl\n\n"}
{"name":"Subalgebra.coe_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq ↑(Subalgebra.toSubmodule S) ↑S","decl":"@[simp]\ntheorem coe_toSubmodule (S : Subalgebra R A) : (toSubmodule S : Set A) = S := rfl\n\n"}
{"name":"Subalgebra.toSubmodule_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Function.Injective ⇑Subalgebra.toSubmodule","decl":"theorem toSubmodule_injective : Function.Injective (toSubmodule : Subalgebra R A → Submodule R A) :=\n  fun _S₁ _S₂ h => SetLike.ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"Subalgebra.instIsScalarTowerSubtypeMem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R' : Type u'\nR : Type u\nA : Type v\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\nS : Subalgebra R A\ninst✝³ : Semiring R'\ninst✝² : SMul R' R\ninst✝¹ : Module R' A\ninst✝ : IsScalarTower R' R A\n⊢ IsScalarTower R' R (Subtype fun x => Membership.mem S x)","decl":"instance [Semiring R'] [SMul R' R] [Module R' A] [IsScalarTower R' R A] : IsScalarTower R' R S :=\n  inferInstanceAs (IsScalarTower R' R (toSubmodule S))\n\n/- More general form of `Subalgebra.algebra`.\n\nThis instance should have low priority since it is slow to fail:\nbefore failing, it will cause a search through all `SMul R' R` instances,\nwhich can quickly get expensive.\n-/\n"}
{"name":"Subalgebra.noZeroSMulDivisors_bot","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\nS : Subalgebra R A\ninst✝ : NoZeroSMulDivisors R A\n⊢ NoZeroSMulDivisors R (Subtype fun x => Membership.mem S x)","decl":"instance noZeroSMulDivisors_bot [NoZeroSMulDivisors R A] : NoZeroSMulDivisors R S :=\n  ⟨fun {c} {x : S} h =>\n    have : c = 0 ∨ (x : A) = 0 := eq_zero_or_eq_zero_of_smul_eq_zero (congr_arg Subtype.val h)\n    this.imp_right (@Subtype.ext_iff _ _ x 0).mpr⟩\n\n"}
{"name":"Subalgebra.coe_add","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx y : Subtype fun x => Membership.mem S x\n⊢ Eq (↑(HAdd.hAdd x y)) (HAdd.hAdd ↑x ↑y)","decl":"protected theorem coe_add (x y : S) : (↑(x + y) : A) = ↑x + ↑y := rfl\n\n"}
{"name":"Subalgebra.coe_mul","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx y : Subtype fun x => Membership.mem S x\n⊢ Eq (↑(HMul.hMul x y)) (HMul.hMul ↑x ↑y)","decl":"protected theorem coe_mul (x y : S) : (↑(x * y) : A) = ↑x * ↑y := rfl\n\n"}
{"name":"Subalgebra.coe_zero","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (↑0) 0","decl":"protected theorem coe_zero : ((0 : S) : A) = 0 := rfl\n\n"}
{"name":"Subalgebra.coe_one","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (↑1) 1","decl":"protected theorem coe_one : ((1 : S) : A) = 1 := rfl\n\n"}
{"name":"Subalgebra.coe_neg","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : Subtype fun x => Membership.mem S x\n⊢ Eq (↑(Neg.neg x)) (Neg.neg ↑x)","decl":"protected theorem coe_neg {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    {S : Subalgebra R A} (x : S) : (↑(-x) : A) = -↑x := rfl\n\n"}
{"name":"Subalgebra.coe_sub","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx y : Subtype fun x => Membership.mem S x\n⊢ Eq (↑(HSub.hSub x y)) (HSub.hSub ↑x ↑y)","decl":"protected theorem coe_sub {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]\n    {S : Subalgebra R A} (x y : S) : (↑(x - y) : A) = ↑x - ↑y := rfl\n\n"}
{"name":"Subalgebra.coe_smul","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R' : Type u'\nR : Type u\nA : Type v\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\nS : Subalgebra R A\ninst✝³ : Semiring R'\ninst✝² : SMul R' R\ninst✝¹ : Module R' A\ninst✝ : IsScalarTower R' R A\nr : R'\nx : Subtype fun x => Membership.mem S x\n⊢ Eq (↑(HSMul.hSMul r x)) (HSMul.hSMul r ↑x)","decl":"@[simp, norm_cast]\ntheorem coe_smul [Semiring R'] [SMul R' R] [Module R' A] [IsScalarTower R' R A] (r : R') (x : S) :\n    (↑(r • x) : A) = r • (x : A) := rfl\n\n"}
{"name":"Subalgebra.coe_algebraMap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R' : Type u'\nR : Type u\nA : Type v\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\nS : Subalgebra R A\ninst✝³ : CommSemiring R'\ninst✝² : SMul R' R\ninst✝¹ : Algebra R' A\ninst✝ : IsScalarTower R' R A\nr : R'\n⊢ Eq (↑((algebraMap R' (Subtype fun x => Membership.mem S x)) r)) ((algebraMap R' A) r)","decl":"@[simp, norm_cast]\ntheorem coe_algebraMap [CommSemiring R'] [SMul R' R] [Algebra R' A] [IsScalarTower R' R A]\n    (r : R') : ↑(algebraMap R' S r) = algebraMap R' A r := rfl\n\n"}
{"name":"Subalgebra.coe_pow","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : Subtype fun x => Membership.mem S x\nn : Nat\n⊢ Eq (↑(HPow.hPow x n)) (HPow.hPow (↑x) n)","decl":"protected theorem coe_pow (x : S) (n : ℕ) : (↑(x ^ n) : A) = (x : A) ^ n :=\n  SubmonoidClass.coe_pow x n\n\n"}
{"name":"Subalgebra.coe_eq_zero","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : Subtype fun x => Membership.mem S x\n⊢ Iff (Eq (↑x) 0) (Eq x 0)","decl":"protected theorem coe_eq_zero {x : S} : (x : A) = 0 ↔ x = 0 :=\n  ZeroMemClass.coe_eq_zero\n\n"}
{"name":"Subalgebra.coe_eq_one","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : Subtype fun x => Membership.mem S x\n⊢ Iff (Eq (↑x) 1) (Eq x 1)","decl":"protected theorem coe_eq_one {x : S} : (x : A) = 1 ↔ x = 1 :=\n  OneMemClass.coe_eq_one\n\n-- todo: standardize on the names these morphisms\n-- compare with submodule.subtype\n"}
{"name":"Subalgebra.coe_val","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (⇑S.val) Subtype.val","decl":"@[simp]\ntheorem coe_val : (S.val : S → A) = ((↑) : S → A) := rfl\n\n"}
{"name":"Subalgebra.val_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\nx : Subtype fun x => Membership.mem S x\n⊢ Eq (S.val x) ↑x","decl":"theorem val_apply (x : S) : S.val x = (x : A) := rfl\n\n"}
{"name":"Subalgebra.toSubsemiring_subtype","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq S.subtype ↑S.val","decl":"@[simp]\ntheorem toSubsemiring_subtype : S.toSubsemiring.subtype = (S.val : S →+* A) := rfl\n\n"}
{"name":"Subalgebra.toSubring_subtype","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq S.toSubring.subtype ↑S.val","decl":"@[simp]\ntheorem toSubring_subtype {R A : Type*} [CommRing R] [Ring A] [Algebra R A] (S : Subalgebra R A) :\n    S.toSubring.subtype = (S.val : S →+* A) := rfl\n\n"}
{"name":"Subalgebra.map_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R A\n⊢ Eq (Subalgebra.map f S).toSubsemiring (Subsemiring.map (↑f) S.toSubsemiring)","decl":"/-- Transport a subalgebra via an algebra homomorphism. -/\n@[simps! coe toSubsemiring]\ndef map (f : A →ₐ[R] B) (S : Subalgebra R A) : Subalgebra R B :=\n  { S.toSubsemiring.map (f : A →+* B) with\n    algebraMap_mem' := fun r => f.commutes r ▸ Set.mem_image_of_mem _ (S.algebraMap_mem r) }\n\n"}
{"name":"Subalgebra.coe_map","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R A\n⊢ Eq (↑(Subalgebra.map f S)) (Set.image ⇑f ↑S)","decl":"/-- Transport a subalgebra via an algebra homomorphism. -/\n@[simps! coe toSubsemiring]\ndef map (f : A →ₐ[R] B) (S : Subalgebra R A) : Subalgebra R B :=\n  { S.toSubsemiring.map (f : A →+* B) with\n    algebraMap_mem' := fun r => f.commutes r ▸ Set.mem_image_of_mem _ (S.algebraMap_mem r) }\n\n"}
{"name":"Subalgebra.map_mono","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS₁ S₂ : Subalgebra R A\nf : AlgHom R A B\na✝ : LE.le S₁ S₂\n⊢ LE.le (Subalgebra.map f S₁) (Subalgebra.map f S₂)","decl":"theorem map_mono {S₁ S₂ : Subalgebra R A} {f : A →ₐ[R] B} : S₁ ≤ S₂ → S₁.map f ≤ S₂.map f :=\n  Set.image_subset f\n\n"}
{"name":"Subalgebra.map_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : Function.Injective ⇑f\n⊢ Function.Injective (Subalgebra.map f)","decl":"theorem map_injective {f : A →ₐ[R] B} (hf : Function.Injective f) : Function.Injective (map f) :=\n  fun _S₁ _S₂ ih =>\n  ext <| Set.ext_iff.1 <| Set.image_injective.2 hf <| Set.ext <| SetLike.ext_iff.mp ih\n\n"}
{"name":"Subalgebra.map_id","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (Subalgebra.map (AlgHom.id R A) S) S","decl":"@[simp]\ntheorem map_id (S : Subalgebra R A) : S.map (AlgHom.id R A) = S :=\n  SetLike.coe_injective <| Set.image_id _\n\n"}
{"name":"Subalgebra.map_map","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type w'\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\ninst✝¹ : Semiring C\ninst✝ : Algebra R C\nS : Subalgebra R A\ng : AlgHom R B C\nf : AlgHom R A B\n⊢ Eq (Subalgebra.map g (Subalgebra.map f S)) (Subalgebra.map (g.comp f) S)","decl":"theorem map_map (S : Subalgebra R A) (g : B →ₐ[R] C) (f : A →ₐ[R] B) :\n    (S.map f).map g = S.map (g.comp f) :=\n  SetLike.coe_injective <| Set.image_image _ _ _\n\n"}
{"name":"Subalgebra.mem_map","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\ny : B\n⊢ Iff (Membership.mem (Subalgebra.map f S) y) (Exists fun x => And (Membership.mem S x) (Eq (f x) y))","decl":"@[simp]\ntheorem mem_map {S : Subalgebra R A} {f : A →ₐ[R] B} {y : B} : y ∈ map f S ↔ ∃ x ∈ S, f x = y :=\n  Subsemiring.mem_map\n\n"}
{"name":"Subalgebra.map_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\n⊢ Eq (Subalgebra.toSubmodule (Subalgebra.map f S)) (Submodule.map f.toLinearMap (Subalgebra.toSubmodule S))","decl":"theorem map_toSubmodule {S : Subalgebra R A} {f : A →ₐ[R] B} :\n    (toSubmodule <| S.map f) = S.toSubmodule.map f.toLinearMap :=\n  SetLike.coe_injective rfl\n\n"}
{"name":"Subalgebra.coe_comap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\n⊢ Eq (↑(Subalgebra.comap f S)) (Set.preimage ⇑f ↑S)","decl":"/-- Preimage of a subalgebra under an algebra homomorphism. -/\n@[simps! coe toSubsemiring]\ndef comap (f : A →ₐ[R] B) (S : Subalgebra R B) : Subalgebra R A :=\n  { S.toSubsemiring.comap (f : A →+* B) with\n    algebraMap_mem' := fun r =>\n      show f (algebraMap R A r) ∈ S from (f.commutes r).symm ▸ S.algebraMap_mem r }\n\n"}
{"name":"Subalgebra.comap_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\n⊢ Eq (Subalgebra.comap f S).toSubsemiring (Subsemiring.comap (↑f) S.toSubsemiring)","decl":"/-- Preimage of a subalgebra under an algebra homomorphism. -/\n@[simps! coe toSubsemiring]\ndef comap (f : A →ₐ[R] B) (S : Subalgebra R B) : Subalgebra R A :=\n  { S.toSubsemiring.comap (f : A →+* B) with\n    algebraMap_mem' := fun r =>\n      show f (algebraMap R A r) ∈ S from (f.commutes r).symm ▸ S.algebraMap_mem r }\n\n"}
{"name":"Subalgebra.map_le","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\nU : Subalgebra R B\n⊢ Iff (LE.le (Subalgebra.map f S) U) (LE.le S (Subalgebra.comap f U))","decl":"theorem map_le {S : Subalgebra R A} {f : A →ₐ[R] B} {U : Subalgebra R B} :\n    map f S ≤ U ↔ S ≤ comap f U :=\n  Set.image_subset_iff\n\n"}
{"name":"Subalgebra.gc_map_comap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ GaloisConnection (Subalgebra.map f) (Subalgebra.comap f)","decl":"theorem gc_map_comap (f : A →ₐ[R] B) : GaloisConnection (map f) (comap f) := fun _S _U => map_le\n\n"}
{"name":"Subalgebra.mem_comap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R B\nf : AlgHom R A B\nx : A\n⊢ Iff (Membership.mem (Subalgebra.comap f S) x) (Membership.mem S (f x))","decl":"@[simp]\ntheorem mem_comap (S : Subalgebra R B) (f : A →ₐ[R] B) (x : A) : x ∈ S.comap f ↔ f x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"Subalgebra.noZeroDivisors","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : NoZeroDivisors A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ NoZeroDivisors (Subtype fun x => Membership.mem S x)","decl":"instance noZeroDivisors {R A : Type*} [CommSemiring R] [Semiring A] [NoZeroDivisors A]\n    [Algebra R A] (S : Subalgebra R A) : NoZeroDivisors S :=\n  inferInstanceAs (NoZeroDivisors S.toSubsemiring)\n\n"}
{"name":"Subalgebra.isDomain","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : Ring A\ninst✝¹ : IsDomain A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ IsDomain (Subtype fun x => Membership.mem S x)","decl":"instance isDomain {R A : Type*} [CommRing R] [Ring A] [IsDomain A] [Algebra R A]\n    (S : Subalgebra R A) : IsDomain S :=\n  inferInstanceAs (IsDomain S.toSubring)\n\n"}
{"name":"SubalgebraClass.coe_algebraMap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"S : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : SetLike S A\ninst✝ : SubsemiringClass S A\nhSR : SMulMemClass S R A\ns : S\nr : R\n⊢ Eq (↑((algebraMap R (Subtype fun x => Membership.mem s x)) r)) ((algebraMap R A) r)","decl":"@[simp, norm_cast]\nlemma coe_algebraMap (r : R) : (algebraMap R s r : A) = algebraMap R A r := rfl\n\n"}
{"name":"SubalgebraClass.coe_val","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"S : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : SetLike S A\ninst✝ : SubsemiringClass S A\nhSR : SMulMemClass S R A\ns : S\n⊢ Eq (⇑(SubalgebraClass.val s)) Subtype.val","decl":"@[simp]\ntheorem coe_val : (val s : s → A) = ((↑) : s → A) :=\n  rfl\n\n"}
{"name":"Submodule.toSubalgebra_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\np : Submodule R A\nh_one : Membership.mem p 1\nh_mul : ∀ (x y : A), Membership.mem p x → Membership.mem p y → Membership.mem p (HMul.hMul x y)\n⊢ Eq (p.toSubalgebra h_one h_mul).toSubsemiring { carrier := p.carrier, mul_mem' := ⋯, one_mem' := h_one, add_mem' := ⋯, zero_mem' := ⋯ }","decl":"/-- A submodule containing `1` and closed under multiplication is a subalgebra. -/\n@[simps coe toSubsemiring]\ndef toSubalgebra (p : Submodule R A) (h_one : (1 : A) ∈ p)\n    (h_mul : ∀ x y, x ∈ p → y ∈ p → x * y ∈ p) : Subalgebra R A :=\n  { p with\n    mul_mem' := fun hx hy ↦ h_mul _ _ hx hy\n    one_mem' := h_one\n    algebraMap_mem' := fun r => by\n      rw [Algebra.algebraMap_eq_smul_one]\n      exact p.smul_mem _ h_one }\n\n"}
{"name":"Submodule.coe_toSubalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\np : Submodule R A\nh_one : Membership.mem p 1\nh_mul : ∀ (x y : A), Membership.mem p x → Membership.mem p y → Membership.mem p (HMul.hMul x y)\n⊢ Eq (↑(p.toSubalgebra h_one h_mul)) p.carrier","decl":"/-- A submodule containing `1` and closed under multiplication is a subalgebra. -/\n@[simps coe toSubsemiring]\ndef toSubalgebra (p : Submodule R A) (h_one : (1 : A) ∈ p)\n    (h_mul : ∀ x y, x ∈ p → y ∈ p → x * y ∈ p) : Subalgebra R A :=\n  { p with\n    mul_mem' := fun hx hy ↦ h_mul _ _ hx hy\n    one_mem' := h_one\n    algebraMap_mem' := fun r => by\n      rw [Algebra.algebraMap_eq_smul_one]\n      exact p.smul_mem _ h_one }\n\n"}
{"name":"Submodule.mem_toSubalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\np : Submodule R A\nh_one : Membership.mem p 1\nh_mul : ∀ (x y : A), Membership.mem p x → Membership.mem p y → Membership.mem p (HMul.hMul x y)\nx : A\n⊢ Iff (Membership.mem (p.toSubalgebra h_one h_mul) x) (Membership.mem p x)","decl":"@[simp]\ntheorem mem_toSubalgebra {p : Submodule R A} {h_one h_mul} {x} :\n    x ∈ p.toSubalgebra h_one h_mul ↔ x ∈ p := Iff.rfl\n\n"}
{"name":"Submodule.toSubalgebra_mk","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Submodule R A\nh1 : Membership.mem s 1\nhmul : ∀ (x y : A), Membership.mem s x → Membership.mem s y → Membership.mem s (HMul.hMul x y)\n⊢ Eq (s.toSubalgebra h1 hmul) { carrier := ↑s, mul_mem' := hmul, one_mem' := h1, add_mem' := ⋯, zero_mem' := ⋯, algebraMap_mem' := ⋯ }","decl":"theorem toSubalgebra_mk (s : Submodule R A) (h1 hmul) :\n    s.toSubalgebra h1 hmul =\n      Subalgebra.mk ⟨⟨⟨s, @hmul⟩, h1⟩, s.add_mem, s.zero_mem⟩\n        (by intro r; rw [Algebra.algebraMap_eq_smul_one]; apply s.smul_mem _ h1) :=\n  rfl\n\n"}
{"name":"Submodule.toSubalgebra_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\np : Submodule R A\nh_one : Membership.mem p 1\nh_mul : ∀ (x y : A), Membership.mem p x → Membership.mem p y → Membership.mem p (HMul.hMul x y)\n⊢ Eq (Subalgebra.toSubmodule (p.toSubalgebra h_one h_mul)) p","decl":"@[simp]\ntheorem toSubalgebra_toSubmodule (p : Submodule R A) (h_one h_mul) :\n    Subalgebra.toSubmodule (p.toSubalgebra h_one h_mul) = p :=\n  SetLike.coe_injective rfl\n\n"}
{"name":"Subalgebra.toSubmodule_toSubalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq ((Subalgebra.toSubmodule S).toSubalgebra ⋯ ⋯) S","decl":"@[simp]\ntheorem _root_.Subalgebra.toSubmodule_toSubalgebra (S : Subalgebra R A) :\n    (S.toSubmodule.toSubalgebra S.one_mem fun _ _ => S.mul_mem) = S :=\n  SetLike.coe_injective rfl\n\n"}
{"name":"AlgHom.range_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nφ : AlgHom R A B\n⊢ Eq φ.range.toSubsemiring (↑φ).rangeS","decl":"/-- Range of an `AlgHom` as a subalgebra. -/\n@[simps! coe toSubsemiring]\nprotected def range (φ : A →ₐ[R] B) : Subalgebra R B :=\n  { φ.toRingHom.rangeS with algebraMap_mem' := fun r => ⟨algebraMap R A r, φ.commutes r⟩ }\n\n"}
{"name":"AlgHom.coe_range","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nφ : AlgHom R A B\n⊢ Eq (↑φ.range) (Set.range ⇑φ)","decl":"/-- Range of an `AlgHom` as a subalgebra. -/\n@[simps! coe toSubsemiring]\nprotected def range (φ : A →ₐ[R] B) : Subalgebra R B :=\n  { φ.toRingHom.rangeS with algebraMap_mem' := fun r => ⟨algebraMap R A r, φ.commutes r⟩ }\n\n"}
{"name":"AlgHom.mem_range","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nφ : AlgHom R A B\ny : B\n⊢ Iff (Membership.mem φ.range y) (Exists fun x => Eq (φ x) y)","decl":"@[simp]\ntheorem mem_range (φ : A →ₐ[R] B) {y : B} : y ∈ φ.range ↔ ∃ x, φ x = y :=\n  RingHom.mem_rangeS\n\n"}
{"name":"AlgHom.mem_range_self","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nφ : AlgHom R A B\nx : A\n⊢ Membership.mem φ.range (φ x)","decl":"theorem mem_range_self (φ : A →ₐ[R] B) (x : A) : φ x ∈ φ.range :=\n  φ.mem_range.2 ⟨x, rfl⟩\n\n"}
{"name":"AlgHom.range_comp","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type w'\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\ninst✝¹ : Semiring C\ninst✝ : Algebra R C\nf : AlgHom R A B\ng : AlgHom R B C\n⊢ Eq (g.comp f).range (Subalgebra.map g f.range)","decl":"theorem range_comp (f : A →ₐ[R] B) (g : B →ₐ[R] C) : (g.comp f).range = f.range.map g :=\n  SetLike.coe_injective (Set.range_comp g f)\n\n"}
{"name":"AlgHom.range_comp_le_range","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type w'\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\ninst✝¹ : Semiring C\ninst✝ : Algebra R C\nf : AlgHom R A B\ng : AlgHom R B C\n⊢ LE.le (g.comp f).range g.range","decl":"theorem range_comp_le_range (f : A →ₐ[R] B) (g : B →ₐ[R] C) : (g.comp f).range ≤ g.range :=\n  SetLike.coe_mono (Set.range_comp_subset_range f g)\n\n"}
{"name":"AlgHom.val_comp_codRestrict","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\nhf : ∀ (x : A), Membership.mem S (f x)\n⊢ Eq (S.val.comp (f.codRestrict S hf)) f","decl":"@[simp]\ntheorem val_comp_codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) :\n    S.val.comp (f.codRestrict S hf) = f :=\n  AlgHom.ext fun _ => rfl\n\n"}
{"name":"AlgHom.coe_codRestrict","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\nhf : ∀ (x : A), Membership.mem S (f x)\nx : A\n⊢ Eq (↑((f.codRestrict S hf) x)) (f x)","decl":"@[simp]\ntheorem coe_codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) (x : A) :\n    ↑(f.codRestrict S hf x) = f x :=\n  rfl\n\n"}
{"name":"AlgHom.injective_codRestrict","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\nhf : ∀ (x : A), Membership.mem S (f x)\n⊢ Iff (Function.Injective ⇑(f.codRestrict S hf)) (Function.Injective ⇑f)","decl":"theorem injective_codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) :\n    Function.Injective (f.codRestrict S hf) ↔ Function.Injective f :=\n  ⟨fun H _x _y hxy => H <| Subtype.eq hxy, fun H _x _y hxy => H (congr_arg Subtype.val hxy :)⟩\n\n"}
{"name":"AlgHom.rangeRestrict_surjective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Function.Surjective ⇑f.rangeRestrict","decl":"theorem rangeRestrict_surjective (f : A →ₐ[R] B) : Function.Surjective (f.rangeRestrict) :=\n  fun ⟨_y, hy⟩ =>\n    let ⟨x, hx⟩ := hy\n    ⟨x, SetCoe.ext hx⟩\n\n"}
{"name":"AlgEquiv.ofLeftInverse_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ng : B → A\nf : AlgHom R A B\nh : Function.LeftInverse g ⇑f\nx : A\n⊢ Eq (↑((AlgEquiv.ofLeftInverse h) x)) (f x)","decl":"@[simp]\ntheorem ofLeftInverse_apply {g : B → A} {f : A →ₐ[R] B} (h : Function.LeftInverse g f) (x : A) :\n    ↑(ofLeftInverse h x) = f x :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofLeftInverse_symm_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ng : B → A\nf : AlgHom R A B\nh : Function.LeftInverse g ⇑f\nx : Subtype fun x => Membership.mem f.range x\n⊢ Eq ((AlgEquiv.ofLeftInverse h).symm x) (g ↑x)","decl":"@[simp]\ntheorem ofLeftInverse_symm_apply {g : B → A} {f : A →ₐ[R] B} (h : Function.LeftInverse g f)\n    (x : f.range) : (ofLeftInverse h).symm x = g x :=\n  rfl\n\n"}
{"name":"AlgEquiv.ofInjective_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : Function.Injective ⇑f\nx : A\n⊢ Eq (↑((AlgEquiv.ofInjective f hf) x)) (f x)","decl":"@[simp]\ntheorem ofInjective_apply (f : A →ₐ[R] B) (hf : Function.Injective f) (x : A) :\n    ↑(ofInjective f hf x) = f x :=\n  rfl\n\n"}
{"name":"AlgEquiv.subalgebraMap_apply_coe","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ne : AlgEquiv R A B\nS : Subalgebra R A\nx : ↑↑S.toAddSubmonoid\n⊢ Eq (↑((e.subalgebraMap S) x)) (e ↑x)","decl":"/-- Given an equivalence `e : A ≃ₐ[R] B` of `R`-algebras and a subalgebra `S` of `A`,\n`subalgebraMap` is the induced equivalence between `S` and `S.map e` -/\n@[simps!]\ndef subalgebraMap (e : A ≃ₐ[R] B) (S : Subalgebra R A) : S ≃ₐ[R] S.map (e : A →ₐ[R] B) :=\n  { e.toRingEquiv.subsemiringMap S.toSubsemiring with\n    commutes' := fun r => by\n      ext; dsimp only; erw [RingEquiv.subsemiringMap_apply_coe]\n      exact e.commutes _ }\n\n"}
{"name":"AlgEquiv.subalgebraMap_symm_apply_coe","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ne : AlgEquiv R A B\nS : Subalgebra R A\ny : ↑(Set.image ⇑↑e.toRingEquiv.toAddEquiv ↑S.toAddSubmonoid)\n⊢ Eq (↑((e.subalgebraMap S).symm y)) ((↑↑e).symm ↑y)","decl":"/-- Given an equivalence `e : A ≃ₐ[R] B` of `R`-algebras and a subalgebra `S` of `A`,\n`subalgebraMap` is the induced equivalence between `S` and `S.map e` -/\n@[simps!]\ndef subalgebraMap (e : A ≃ₐ[R] B) (S : Subalgebra R A) : S ≃ₐ[R] S.map (e : A →ₐ[R] B) :=\n  { e.toRingEquiv.subsemiringMap S.toSubsemiring with\n    commutes' := fun r => by\n      ext; dsimp only; erw [RingEquiv.subsemiringMap_apply_coe]\n      exact e.commutes _ }\n\n"}
{"name":"Algebra.adjoin_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ Eq (Algebra.adjoin R s).toSubsemiring (Subsemiring.closure (Union.union (Set.range ⇑(algebraMap R A)) s))","decl":"/-- The minimal subalgebra that includes `s`. -/\n@[simps toSubsemiring]\ndef adjoin (s : Set A) : Subalgebra R A :=\n  { Subsemiring.closure (Set.range (algebraMap R A) ∪ s) with\n    algebraMap_mem' := fun r => Subsemiring.subset_closure <| Or.inl ⟨r, rfl⟩ }\n\n"}
{"name":"Algebra.gc","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ GaloisConnection (Algebra.adjoin R) SetLike.coe","decl":"protected theorem gc : GaloisConnection (adjoin R : Set A → Subalgebra R A) (↑) := fun s S =>\n  ⟨fun H => le_trans (le_trans Set.subset_union_right Subsemiring.subset_closure) H,\n   fun H => show Subsemiring.closure (Set.range (algebraMap R A) ∪ s) ≤ S.toSubsemiring from\n      Subsemiring.closure_le.2 <| Set.union_subset S.range_subset H⟩\n\n"}
{"name":"Algebra.sup_def","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (Max.max S T) (Algebra.adjoin R (Union.union ↑S ↑T))","decl":"theorem sup_def (S T : Subalgebra R A) : S ⊔ T = adjoin R (S ∪ T : Set A) := rfl\n\n"}
{"name":"Algebra.sSup_def","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Set (Subalgebra R A)\n⊢ Eq (SupSet.sSup S) (Algebra.adjoin R (Set.image SetLike.coe S).sUnion)","decl":"theorem sSup_def (S : Set (Subalgebra R A)) : sSup S = adjoin R (⋃₀ (SetLike.coe '' S)) := rfl\n\n"}
{"name":"Algebra.coe_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top : (↑(⊤ : Subalgebra R A) : Set A) = Set.univ := rfl\n\n"}
{"name":"Algebra.mem_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nx : A\n⊢ Membership.mem Top.top x","decl":"@[simp]\ntheorem mem_top {x : A} : x ∈ (⊤ : Subalgebra R A) := Set.mem_univ x\n\n"}
{"name":"Algebra.top_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (Subalgebra.toSubmodule Top.top) Top.top","decl":"@[simp]\ntheorem top_toSubmodule : Subalgebra.toSubmodule (⊤ : Subalgebra R A) = ⊤ := rfl\n\n"}
{"name":"Algebra.top_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq Top.top.toSubsemiring Top.top","decl":"@[simp]\ntheorem top_toSubsemiring : (⊤ : Subalgebra R A).toSubsemiring = ⊤ := rfl\n\n"}
{"name":"Algebra.top_toSubring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Eq Top.top.toSubring Top.top","decl":"@[simp]\ntheorem top_toSubring {R A : Type*} [CommRing R] [Ring A] [Algebra R A] :\n    (⊤ : Subalgebra R A).toSubring = ⊤ := rfl\n\n"}
{"name":"Algebra.toSubmodule_eq_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Iff (Eq (Subalgebra.toSubmodule S) Top.top) (Eq S Top.top)","decl":"@[simp]\ntheorem toSubmodule_eq_top {S : Subalgebra R A} : Subalgebra.toSubmodule S = ⊤ ↔ S = ⊤ :=\n  Subalgebra.toSubmodule.injective.eq_iff' top_toSubmodule\n\n"}
{"name":"Algebra.toSubsemiring_eq_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Iff (Eq S.toSubsemiring Top.top) (Eq S Top.top)","decl":"@[simp]\ntheorem toSubsemiring_eq_top {S : Subalgebra R A} : S.toSubsemiring = ⊤ ↔ S = ⊤ :=\n  Subalgebra.toSubsemiring_injective.eq_iff' top_toSubsemiring\n\n"}
{"name":"Algebra.toSubring_eq_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Iff (Eq S.toSubring Top.top) (Eq S Top.top)","decl":"@[simp]\ntheorem toSubring_eq_top {R A : Type*} [CommRing R] [Ring A] [Algebra R A] {S : Subalgebra R A} :\n    S.toSubring = ⊤ ↔ S = ⊤ :=\n  Subalgebra.toSubring_injective.eq_iff' top_toSubring\n\n"}
{"name":"Algebra.mem_sup_left","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nx : A\na✝ : Membership.mem S x\n⊢ Membership.mem (Max.max S T) x","decl":"theorem mem_sup_left {S T : Subalgebra R A} : ∀ {x : A}, x ∈ S → x ∈ S ⊔ T :=\n  have : S ≤ S ⊔ T := le_sup_left; (this ·) -- Porting note: need `have` instead of `show`\n\n"}
{"name":"Algebra.mem_sup_right","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nx : A\na✝ : Membership.mem T x\n⊢ Membership.mem (Max.max S T) x","decl":"theorem mem_sup_right {S T : Subalgebra R A} : ∀ {x : A}, x ∈ T → x ∈ S ⊔ T :=\n  have : T ≤ S ⊔ T := le_sup_right; (this ·) -- Porting note: need `have` instead of `show`\n\n"}
{"name":"Algebra.mul_mem_sup","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nx y : A\nhx : Membership.mem S x\nhy : Membership.mem T y\n⊢ Membership.mem (Max.max S T) (HMul.hMul x y)","decl":"theorem mul_mem_sup {S T : Subalgebra R A} {x y : A} (hx : x ∈ S) (hy : y ∈ T) : x * y ∈ S ⊔ T :=\n  (S ⊔ T).mul_mem (mem_sup_left hx) (mem_sup_right hy)\n\n"}
{"name":"Algebra.map_sup","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS T : Subalgebra R A\n⊢ Eq (Subalgebra.map f (Max.max S T)) (Max.max (Subalgebra.map f S) (Subalgebra.map f T))","decl":"theorem map_sup (f : A →ₐ[R] B) (S T : Subalgebra R A) : (S ⊔ T).map f = S.map f ⊔ T.map f :=\n  (Subalgebra.gc_map_comap f).l_sup\n\n"}
{"name":"Algebra.map_inf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : Function.Injective ⇑f\nS T : Subalgebra R A\n⊢ Eq (Subalgebra.map f (Min.min S T)) (Min.min (Subalgebra.map f S) (Subalgebra.map f T))","decl":"theorem map_inf (f : A →ₐ[R] B) (hf : Function.Injective f) (S T : Subalgebra R A) :\n    (S ⊓ T).map f = S.map f ⊓ T.map f := SetLike.coe_injective (Set.image_inter hf)\n\n"}
{"name":"Algebra.coe_inf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (↑(Min.min S T)) (Inter.inter ↑S ↑T)","decl":"@[simp, norm_cast]\ntheorem coe_inf (S T : Subalgebra R A) : (↑(S ⊓ T) : Set A) = (S ∩ T : Set A) := rfl\n\n"}
{"name":"Algebra.mem_inf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nx : A\n⊢ Iff (Membership.mem (Min.min S T) x) (And (Membership.mem S x) (Membership.mem T x))","decl":"@[simp]\ntheorem mem_inf {S T : Subalgebra R A} {x : A} : x ∈ S ⊓ T ↔ x ∈ S ∧ x ∈ T := Iff.rfl\n\n"}
{"name":"Algebra.inf_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (Subalgebra.toSubmodule (Min.min S T)) (Min.min (Subalgebra.toSubmodule S) (Subalgebra.toSubmodule T))","decl":"open Subalgebra in\n@[simp]\ntheorem inf_toSubmodule (S T : Subalgebra R A) :\n    toSubmodule (S ⊓ T) = toSubmodule S ⊓ toSubmodule T := rfl\n\n"}
{"name":"Algebra.inf_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (Min.min S T).toSubsemiring (Min.min S.toSubsemiring T.toSubsemiring)","decl":"@[simp]\ntheorem inf_toSubsemiring (S T : Subalgebra R A) :\n    (S ⊓ T).toSubsemiring = S.toSubsemiring ⊓ T.toSubsemiring :=\n  rfl\n\n"}
{"name":"Algebra.sup_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (Max.max S T).toSubsemiring (Max.max S.toSubsemiring T.toSubsemiring)","decl":"@[simp]\ntheorem sup_toSubsemiring (S T : Subalgebra R A) :\n    (S ⊔ T).toSubsemiring = S.toSubsemiring ⊔ T.toSubsemiring := by\n  rw [← S.toSubsemiring.closure_eq, ← T.toSubsemiring.closure_eq, ← Subsemiring.closure_union]\n  simp_rw [sup_def, adjoin_toSubsemiring, Subalgebra.coe_toSubsemiring]\n  congr 1\n  rw [Set.union_eq_right]\n  rintro _ ⟨x, rfl⟩\n  exact Set.mem_union_left _ (algebraMap_mem S x)\n\n"}
{"name":"Algebra.coe_sInf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Set (Subalgebra R A)\n⊢ Eq (↑(InfSet.sInf S)) (Set.iInter fun s => Set.iInter fun h => ↑s)","decl":"@[simp, norm_cast]\ntheorem coe_sInf (S : Set (Subalgebra R A)) : (↑(sInf S) : Set A) = ⋂ s ∈ S, ↑s :=\n  sInf_image\n\n"}
{"name":"Algebra.mem_sInf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Set (Subalgebra R A)\nx : A\n⊢ Iff (Membership.mem (InfSet.sInf S) x) (∀ (p : Subalgebra R A), Membership.mem S p → Membership.mem p x)","decl":"theorem mem_sInf {S : Set (Subalgebra R A)} {x : A} : x ∈ sInf S ↔ ∀ p ∈ S, x ∈ p := by\n  simp only [← SetLike.mem_coe, coe_sInf, Set.mem_iInter₂]\n\n"}
{"name":"Algebra.sInf_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Set (Subalgebra R A)\n⊢ Eq (Subalgebra.toSubmodule (InfSet.sInf S)) (InfSet.sInf (Set.image (⇑Subalgebra.toSubmodule) S))","decl":"@[simp]\ntheorem sInf_toSubmodule (S : Set (Subalgebra R A)) :\n    Subalgebra.toSubmodule (sInf S) = sInf (Subalgebra.toSubmodule '' S) :=\n  SetLike.coe_injective <| by simp\n\n"}
{"name":"Algebra.sInf_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Set (Subalgebra R A)\n⊢ Eq (InfSet.sInf S).toSubsemiring (InfSet.sInf (Set.image Subalgebra.toSubsemiring S))","decl":"@[simp]\ntheorem sInf_toSubsemiring (S : Set (Subalgebra R A)) :\n    (sInf S).toSubsemiring = sInf (Subalgebra.toSubsemiring '' S) :=\n  SetLike.coe_injective <| by simp\n\n"}
{"name":"Algebra.sSup_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Set (Subalgebra R A)\nhS : S.Nonempty\n⊢ Eq (SupSet.sSup S).toSubsemiring (SupSet.sSup (Set.image Subalgebra.toSubsemiring S))","decl":"open Subalgebra in\n@[simp]\ntheorem sSup_toSubsemiring (S : Set (Subalgebra R A)) (hS : S.Nonempty) :\n    (sSup S).toSubsemiring = sSup (toSubsemiring '' S) := by\n  have h : toSubsemiring '' S = Subsemiring.closure '' (SetLike.coe '' S) := by\n    rw [Set.image_image]\n    congr! with x\n    exact x.toSubsemiring.closure_eq.symm\n  rw [h, sSup_image, ← Subsemiring.closure_sUnion, sSup_def, adjoin_toSubsemiring]\n  congr 1\n  rw [Set.union_eq_right]\n  rintro _ ⟨x, rfl⟩\n  obtain ⟨y, hy⟩ := hS\n  simp only [Set.mem_sUnion, Set.mem_image, exists_exists_and_eq_and, SetLike.mem_coe]\n  exact ⟨y, hy, algebraMap_mem y x⟩\n\n"}
{"name":"Algebra.coe_iInf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\n⊢ Eq (↑(iInf fun i => S i)) (Set.iInter fun i => ↑(S i))","decl":"@[simp, norm_cast]\ntheorem coe_iInf {ι : Sort*} {S : ι → Subalgebra R A} : (↑(⨅ i, S i) : Set A) = ⋂ i, S i := by\n  simp [iInf]\n\n"}
{"name":"Algebra.mem_iInf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\nx : A\n⊢ Iff (Membership.mem (iInf fun i => S i) x) (∀ (i : ι), Membership.mem (S i) x)","decl":"theorem mem_iInf {ι : Sort*} {S : ι → Subalgebra R A} {x : A} : (x ∈ ⨅ i, S i) ↔ ∀ i, x ∈ S i := by\n  simp only [iInf, mem_sInf, Set.forall_mem_range]\n\n"}
{"name":"Algebra.map_iInf","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\nι : Sort u_1\ninst✝ : Nonempty ι\nf : AlgHom R A B\nhf : Function.Injective ⇑f\ns : ι → Subalgebra R A\n⊢ Eq (Subalgebra.map f (iInf s)) (iInf fun i => Subalgebra.map f (s i))","decl":"theorem map_iInf {ι : Sort*} [Nonempty ι] (f : A →ₐ[R] B) (hf : Function.Injective f)\n    (s : ι → Subalgebra R A) : (iInf s).map f = ⨅ (i : ι), (s i).map f := by\n  apply SetLike.coe_injective\n  simpa using (Set.injOn_of_injective hf).image_iInter_eq (s := SetLike.coe ∘ s)\n\n"}
{"name":"Algebra.iInf_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\n⊢ Eq (Subalgebra.toSubmodule (iInf fun i => S i)) (iInf fun i => Subalgebra.toSubmodule (S i))","decl":"open Subalgebra in\n@[simp]\ntheorem iInf_toSubmodule {ι : Sort*} (S : ι → Subalgebra R A) :\n    toSubmodule (⨅ i, S i) = ⨅ i, toSubmodule (S i) :=\n  SetLike.coe_injective <| by simp\n\n"}
{"name":"Algebra.iInf_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\n⊢ Eq (iInf S).toSubsemiring (iInf fun i => (S i).toSubsemiring)","decl":"@[simp]\ntheorem iInf_toSubsemiring {ι : Sort*} (S : ι → Subalgebra R A) :\n    (iInf S).toSubsemiring = ⨅ i, (S i).toSubsemiring := by\n  simp only [iInf, sInf_toSubsemiring, ← Set.range_comp, Function.comp_def]\n\n"}
{"name":"Algebra.iSup_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\nι : Sort u_1\ninst✝ : Nonempty ι\nS : ι → Subalgebra R A\n⊢ Eq (iSup S).toSubsemiring (iSup fun i => (S i).toSubsemiring)","decl":"@[simp]\ntheorem iSup_toSubsemiring {ι : Sort*} [Nonempty ι] (S : ι → Subalgebra R A) :\n    (iSup S).toSubsemiring = ⨆ i, (S i).toSubsemiring := by\n  simp only [iSup, Set.range_nonempty, sSup_toSubsemiring, ← Set.range_comp, Function.comp_def]\n\n"}
{"name":"Algebra.mem_iSup_of_mem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\ni : ι\nx : A\nhx : Membership.mem (S i) x\n⊢ Membership.mem (iSup S) x","decl":"lemma mem_iSup_of_mem {ι : Sort*} {S : ι → Subalgebra R A} (i : ι) {x : A} (hx : x ∈ S i) :\n    x ∈ iSup S :=\n  le_iSup S i hx\n\n"}
{"name":"Algebra.iSup_induction","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\nmotive : A → Prop\nx : A\nmem : Membership.mem (iSup fun i => S i) x\nbasic : ∀ (i : ι) (a : A), Membership.mem (S i) a → motive a\nzero : motive 0\none : motive 1\nadd : ∀ (a b : A), motive a → motive b → motive (HAdd.hAdd a b)\nmul : ∀ (a b : A), motive a → motive b → motive (HMul.hMul a b)\nalgebraMap : ∀ (r : R), motive ((_root_.algebraMap R A) r)\n⊢ motive x","decl":"@[elab_as_elim]\nlemma iSup_induction {ι : Sort*} (S : ι → Subalgebra R A) {motive : A → Prop}\n    {x : A} (mem : x ∈ ⨆ i, S i)\n    (basic : ∀ i, ∀ a ∈ S i, motive a)\n    (zero : motive 0) (one : motive 1)\n    (add : ∀ a b, motive a → motive b → motive (a + b))\n    (mul : ∀ a b, motive a → motive b → motive (a * b))\n    (algebraMap : ∀ r, motive (algebraMap R A r)) : motive x := by\n  let T : Subalgebra R A :=\n  { carrier := {x | motive x}\n    mul_mem' {a b} := mul a b\n    one_mem' := one\n    add_mem' {a b} := add a b\n    zero_mem' := zero\n    algebraMap_mem' := algebraMap }\n  suffices iSup S ≤ T from this mem\n  rwa [iSup_le_iff]\n\n"}
{"name":"Algebra.iSup_induction'","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_1\nS : ι → Subalgebra R A\nmotive : (x : A) → Membership.mem (iSup fun i => S i) x → Prop\nx : A\nmem : Membership.mem (iSup fun i => S i) x\nbasic : ∀ (i : ι) (x : A) (hx : Membership.mem (S i) x), motive x ⋯\nzero : motive 0 ⋯\none : motive 1 ⋯\nadd : ∀ (x y : A) (hx : Membership.mem (iSup fun i => S i) x) (hy : Membership.mem (iSup fun i => S i) y), motive x hx → motive y hy → motive (HAdd.hAdd x y) ⋯\nmul : ∀ (x y : A) (hx : Membership.mem (iSup fun i => S i) x) (hy : Membership.mem (iSup fun i => S i) y), motive x hx → motive y hy → motive (HMul.hMul x y) ⋯\nalgebraMap : ∀ (r : R), motive ((_root_.algebraMap R A) r) ⋯\n⊢ motive x mem","decl":"/-- A dependent version of `Subalgebra.iSup_induction`. -/\n@[elab_as_elim]\ntheorem iSup_induction' {ι : Sort*} (S : ι → Subalgebra R A) {motive : ∀ x, (x ∈ ⨆ i, S i) → Prop}\n    {x : A} (mem : x ∈ ⨆ i, S i)\n    (basic : ∀ (i) (x) (hx : x ∈ S i), motive x (mem_iSup_of_mem i hx))\n    (zero : motive 0 (zero_mem _)) (one : motive 1 (one_mem _))\n    (add : ∀ x y hx hy, motive x hx → motive y hy → motive (x + y) (add_mem ‹_› ‹_›))\n    (mul : ∀ x y hx hy, motive x hx → motive y hy → motive (x * y) (mul_mem ‹_› ‹_›))\n    (algebraMap : ∀ r, motive (algebraMap R A r) (Subalgebra.algebraMap_mem _ ‹_›)) :\n    motive x mem := by\n  refine Exists.elim ?_ fun (hx : x ∈ ⨆ i, S i) (hc : motive x hx) ↦ hc\n  exact iSup_induction S (motive := fun x' ↦ ∃ h, motive x' h) mem\n    (fun _ _ h ↦ ⟨_, basic _ _ h⟩) ⟨_, zero⟩ ⟨_, one⟩ (fun _ _ h h' ↦ ⟨_, add _ _ _ _ h.2 h'.2⟩)\n    (fun _ _ h h' ↦ ⟨_, mul _ _ _ _ h.2 h'.2⟩) fun _ ↦ ⟨_, algebraMap _⟩\n\n"}
{"name":"Algebra.mem_bot","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nx : A\n⊢ Iff (Membership.mem Bot.bot x) (Membership.mem (Set.range ⇑(algebraMap R A)) x)","decl":"theorem mem_bot {x : A} : x ∈ (⊥ : Subalgebra R A) ↔ x ∈ Set.range (algebraMap R A) := Iff.rfl\n\n"}
{"name":"Algebra.toSubmodule_bot","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (Subalgebra.toSubmodule Bot.bot) 1","decl":"/-- TODO: change proof to `rfl` when fixing https://github.com/leanprover-community/mathlib4/issues/18110. -/\ntheorem toSubmodule_bot : Subalgebra.toSubmodule (⊥ : Subalgebra R A) = 1 :=\n  Submodule.one_eq_range.symm\n\n"}
{"name":"Algebra.coe_bot","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑Bot.bot) (Set.range ⇑(algebraMap R A))","decl":"@[simp]\ntheorem coe_bot : ((⊥ : Subalgebra R A) : Set A) = Set.range (algebraMap R A) := rfl\n\n"}
{"name":"Algebra.eq_top_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Iff (Eq S Top.top) (∀ (x : A), Membership.mem S x)","decl":"theorem eq_top_iff {S : Subalgebra R A} : S = ⊤ ↔ ∀ x : A, x ∈ S :=\n  ⟨fun h x => by rw [h]; exact mem_top, fun h => by\n    ext x; exact ⟨fun _ => mem_top, fun _ => h x⟩⟩\n\n"}
{"name":"AlgHom.range_eq_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Iff (Eq f.range Top.top) (Function.Surjective ⇑f)","decl":"theorem _root_.AlgHom.range_eq_top (f : A →ₐ[R] B) :\n    f.range = (⊤ : Subalgebra R B) ↔ Function.Surjective f :=\n  Algebra.eq_top_iff\n\n"}
{"name":"Algebra.range_top_iff_surjective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Iff (Eq f.range Top.top) (Function.Surjective ⇑f)","decl":"@[deprecated (since := \"2024-11-11\")] alias range_top_iff_surjective := AlgHom.range_eq_top\n\n"}
{"name":"Algebra.range_ofId","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (Algebra.ofId R A).range Bot.bot","decl":"@[simp]\ntheorem range_ofId : (Algebra.ofId R A).range = ⊥ := rfl\n\n"}
{"name":"Algebra.range_id","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (AlgHom.id R A).range Top.top","decl":"@[simp]\ntheorem range_id : (AlgHom.id R A).range = ⊤ :=\n  SetLike.coe_injective Set.range_id\n\n"}
{"name":"Algebra.map_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq (Subalgebra.map f Top.top) f.range","decl":"@[simp]\ntheorem map_top (f : A →ₐ[R] B) : (⊤ : Subalgebra R A).map f = f.range :=\n  SetLike.coe_injective Set.image_univ\n\n"}
{"name":"Algebra.map_bot","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq (Subalgebra.map f Bot.bot) Bot.bot","decl":"@[simp]\ntheorem map_bot (f : A →ₐ[R] B) : (⊥ : Subalgebra R A).map f = ⊥ :=\n  Subalgebra.toSubmodule_injective <| by\n    simpa only [Subalgebra.map_toSubmodule, toSubmodule_bot] using Submodule.map_one _\n\n"}
{"name":"Algebra.comap_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq (Subalgebra.comap f Top.top) Top.top","decl":"@[simp]\ntheorem comap_top (f : A →ₐ[R] B) : (⊤ : Subalgebra R B).comap f = ⊤ :=\n  eq_top_iff.2 fun _x => mem_top\n\n"}
{"name":"Algebra.surjective_algebraMap_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Iff (Function.Surjective ⇑(algebraMap R A)) (Eq Top.top Bot.bot)","decl":"theorem surjective_algebraMap_iff :\n    Function.Surjective (algebraMap R A) ↔ (⊤ : Subalgebra R A) = ⊥ :=\n  ⟨fun h =>\n    eq_bot_iff.2 fun y _ =>\n      let ⟨_x, hx⟩ := h y\n      hx ▸ Subalgebra.algebraMap_mem _ _,\n    fun h y => Algebra.mem_bot.1 <| eq_bot_iff.1 h (Algebra.mem_top : y ∈ _)⟩\n\n"}
{"name":"Algebra.bijective_algebraMap_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : Field R\ninst✝² : Semiring A\ninst✝¹ : Nontrivial A\ninst✝ : Algebra R A\n⊢ Iff (Function.Bijective ⇑(algebraMap R A)) (Eq Top.top Bot.bot)","decl":"theorem bijective_algebraMap_iff {R A : Type*} [Field R] [Semiring A] [Nontrivial A]\n    [Algebra R A] : Function.Bijective (algebraMap R A) ↔ (⊤ : Subalgebra R A) = ⊥ :=\n  ⟨fun h => surjective_algebraMap_iff.1 h.2, fun h =>\n    ⟨(algebraMap R A).injective, surjective_algebraMap_iff.2 h⟩⟩\n\n"}
{"name":"Algebra.botEquiv_symm_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"F : Type u_1\nR : Type u_2\ninst✝³ : Field F\ninst✝² : Semiring R\ninst✝¹ : Nontrivial R\ninst✝ : Algebra F R\na✝ : F\n⊢ Eq ((Algebra.botEquiv F R).symm a✝) ((Algebra.ofId F (Subtype fun x => Membership.mem Bot.bot x)) a✝)","decl":"/-- The bottom subalgebra is isomorphic to the field. -/\n@[simps! symm_apply]\nnoncomputable def botEquiv (F R : Type*) [Field F] [Semiring R] [Nontrivial R] [Algebra F R] :\n    (⊥ : Subalgebra F R) ≃ₐ[F] F :=\n  botEquivOfInjective (RingHom.injective _)\n\n"}
{"name":"Subalgebra.topEquiv_symm_apply_coe","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na : A\n⊢ Eq (↑(Subalgebra.topEquiv.symm a)) a","decl":"/-- The top subalgebra is isomorphic to the algebra.\n\nThis is the algebra version of `Submodule.topEquiv`. -/\n@[simps!]\ndef topEquiv : (⊤ : Subalgebra R A) ≃ₐ[R] A :=\n  AlgEquiv.ofAlgHom (Subalgebra.val ⊤) toTop rfl rfl\n\n"}
{"name":"Subalgebra.topEquiv_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na : Subtype fun x => Membership.mem Top.top x\n⊢ Eq (Subalgebra.topEquiv a) ↑a","decl":"/-- The top subalgebra is isomorphic to the algebra.\n\nThis is the algebra version of `Submodule.topEquiv`. -/\n@[simps!]\ndef topEquiv : (⊤ : Subalgebra R A) ≃ₐ[R] A :=\n  AlgEquiv.ofAlgHom (Subalgebra.val ⊤) toTop rfl rfl\n\n"}
{"name":"Subalgebra.subsingleton_of_subsingleton","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : Subsingleton A\n⊢ Subsingleton (Subalgebra R A)","decl":"instance subsingleton_of_subsingleton [Subsingleton A] : Subsingleton (Subalgebra R A) :=\n  ⟨fun B C => ext fun x => by simp only [Subsingleton.elim x 0, zero_mem B, zero_mem C]⟩\n\n"}
{"name":"AlgHom.subsingleton","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Subsingleton (Subalgebra R A)\n⊢ Subsingleton (AlgHom R A B)","decl":"instance _root_.AlgHom.subsingleton [Subsingleton (Subalgebra R A)] : Subsingleton (A →ₐ[R] B) :=\n  ⟨fun f g =>\n    AlgHom.ext fun a =>\n      have : a ∈ (⊥ : Subalgebra R A) := Subsingleton.elim (⊤ : Subalgebra R A) ⊥ ▸ mem_top\n      let ⟨_x, hx⟩ := Set.mem_range.mp (mem_bot.mp this)\n      hx ▸ (f.commutes _).trans (g.commutes _).symm⟩\n\n"}
{"name":"AlgEquiv.subsingleton_left","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Subsingleton (Subalgebra R A)\n⊢ Subsingleton (AlgEquiv R A B)","decl":"instance _root_.AlgEquiv.subsingleton_left [Subsingleton (Subalgebra R A)] :\n    Subsingleton (A ≃ₐ[R] B) :=\n  ⟨fun f g => AlgEquiv.ext fun x => AlgHom.ext_iff.mp (Subsingleton.elim f.toAlgHom g.toAlgHom) x⟩\n\n"}
{"name":"AlgEquiv.subsingleton_right","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Subsingleton (Subalgebra R B)\n⊢ Subsingleton (AlgEquiv R A B)","decl":"instance _root_.AlgEquiv.subsingleton_right [Subsingleton (Subalgebra R B)] :\n    Subsingleton (A ≃ₐ[R] B) :=\n  ⟨fun f g => by rw [← f.symm_symm, Subsingleton.elim f.symm g.symm, g.symm_symm]⟩\n\n"}
{"name":"Subalgebra.range_val","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq S.val.range S","decl":"theorem range_val : S.val.range = S :=\n  ext <| Set.ext_iff.1 <| S.val.coe_range.trans Subtype.range_val\n\n"}
{"name":"Subalgebra.inclusion_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : LE.le S T\n⊢ Function.Injective ⇑(Subalgebra.inclusion h)","decl":"theorem inclusion_injective {S T : Subalgebra R A} (h : S ≤ T) : Function.Injective (inclusion h) :=\n  fun _ _ => Subtype.ext ∘ Subtype.mk.inj\n\n"}
{"name":"Subalgebra.inclusion_self","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (Subalgebra.inclusion ⋯) (AlgHom.id R (Subtype fun x => Membership.mem S x))","decl":"@[simp]\ntheorem inclusion_self {S : Subalgebra R A} : inclusion (le_refl S) = AlgHom.id R S :=\n  AlgHom.ext fun _x => Subtype.ext rfl\n\n"}
{"name":"Subalgebra.inclusion_mk","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : LE.le S T\nx : A\nhx : Membership.mem S x\n⊢ Eq ((Subalgebra.inclusion h) ⟨x, hx⟩) ⟨x, ⋯⟩","decl":"@[simp]\ntheorem inclusion_mk {S T : Subalgebra R A} (h : S ≤ T) (x : A) (hx : x ∈ S) :\n    inclusion h ⟨x, hx⟩ = ⟨x, h hx⟩ :=\n  rfl\n\n"}
{"name":"Subalgebra.inclusion_right","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : LE.le S T\nx : Subtype fun x => Membership.mem T x\nm : Membership.mem S ↑x\n⊢ Eq ((Subalgebra.inclusion h) ⟨↑x, m⟩) x","decl":"theorem inclusion_right {S T : Subalgebra R A} (h : S ≤ T) (x : T) (m : (x : A) ∈ S) :\n    inclusion h ⟨x, m⟩ = x :=\n  Subtype.ext rfl\n\n"}
{"name":"Subalgebra.inclusion_inclusion","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T U : Subalgebra R A\nhst : LE.le S T\nhtu : LE.le T U\nx : Subtype fun x => Membership.mem S x\n⊢ Eq ((Subalgebra.inclusion htu) ((Subalgebra.inclusion hst) x)) ((Subalgebra.inclusion ⋯) x)","decl":"@[simp]\ntheorem inclusion_inclusion {S T U : Subalgebra R A} (hst : S ≤ T) (htu : T ≤ U) (x : S) :\n    inclusion htu (inclusion hst x) = inclusion (le_trans hst htu) x :=\n  Subtype.ext rfl\n\n"}
{"name":"Subalgebra.coe_inclusion","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : LE.le S T\ns : Subtype fun x => Membership.mem S x\n⊢ Eq ↑((Subalgebra.inclusion h) s) ↑s","decl":"@[simp]\ntheorem coe_inclusion {S T : Subalgebra R A} (h : S ≤ T) (s : S) : (inclusion h s : A) = s :=\n  rfl\n\n"}
{"name":"Subalgebra.equivOfEq_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : Eq S T\nx : Subtype fun x => Membership.mem S x\n⊢ Eq ((S.equivOfEq T h) x) ⟨↑x, ⋯⟩","decl":"/-- Two subalgebras that are equal are also equivalent as algebras.\n\nThis is the `Subalgebra` version of `LinearEquiv.ofEq` and `Equiv.Set.ofEq`. -/\n@[simps apply]\ndef equivOfEq (S T : Subalgebra R A) (h : S = T) : S ≃ₐ[R] T where\n  __ := LinearEquiv.ofEq _ _ (congr_arg toSubmodule h)\n  toFun x := ⟨x, h ▸ x.2⟩\n  invFun x := ⟨x, h.symm ▸ x.2⟩\n  map_mul' _ _ := rfl\n  commutes' _ := rfl\n\n"}
{"name":"Subalgebra.equivOfEq_symm","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\nh : Eq S T\n⊢ Eq (S.equivOfEq T h).symm (T.equivOfEq S ⋯)","decl":"@[simp]\ntheorem equivOfEq_symm (S T : Subalgebra R A) (h : S = T) :\n    (equivOfEq S T h).symm = equivOfEq T S h.symm := rfl\n\n"}
{"name":"Subalgebra.equivOfEq_rfl","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (S.equivOfEq S ⋯) AlgEquiv.refl","decl":"@[simp]\ntheorem equivOfEq_rfl (S : Subalgebra R A) : equivOfEq S S rfl = AlgEquiv.refl := by ext; rfl\n\n"}
{"name":"Subalgebra.equivOfEq_trans","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T U : Subalgebra R A\nhST : Eq S T\nhTU : Eq T U\n⊢ Eq ((S.equivOfEq T hST).trans (T.equivOfEq U hTU)) (S.equivOfEq U ⋯)","decl":"@[simp]\ntheorem equivOfEq_trans (S T U : Subalgebra R A) (hST : S = T) (hTU : T = U) :\n    (equivOfEq S T hST).trans (equivOfEq T U hTU) = equivOfEq S U (hST.trans hTU) := rfl\n\n"}
{"name":"Subalgebra.range_comp_val","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\n⊢ Eq (f.comp S.val).range (Subalgebra.map f S)","decl":"theorem range_comp_val : (f.comp S.val).range = S.map f := by\n  rw [AlgHom.range_comp, range_val]\n\n"}
{"name":"AlgHom.subalgebraMap_coe_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\nx : Subtype fun x => Membership.mem S x\n⊢ Eq (↑((AlgHom.subalgebraMap S f) x)) (f ↑x)","decl":"variable {S} in\n@[simp]\ntheorem _root_.AlgHom.subalgebraMap_coe_apply (x : S) : f.subalgebraMap S x = f x := rfl\n\n"}
{"name":"AlgHom.subalgebraMap_surjective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\n⊢ Function.Surjective ⇑(AlgHom.subalgebraMap S f)","decl":"theorem _root_.AlgHom.subalgebraMap_surjective : Function.Surjective (f.subalgebraMap S) :=\n  f.toAddMonoidHom.addSubmonoidMap_surjective S.toAddSubmonoid\n\n"}
{"name":"Subalgebra.coe_equivMapOfInjective_apply","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nS : Subalgebra R A\nf : AlgHom R A B\nhf : Function.Injective ⇑f\nx : Subtype fun x => Membership.mem S x\n⊢ Eq (↑((S.equivMapOfInjective f hf) x)) (f ↑x)","decl":"@[simp]\ntheorem coe_equivMapOfInjective_apply (x : S) : ↑(equivMapOfInjective S f hf x) = f x := rfl\n\n"}
{"name":"Subalgebra.smul_def","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\nα : Type u_1\ninst✝ : SMul A α\nS : Subalgebra R A\ng : Subtype fun x => Membership.mem S x\nm : α\n⊢ Eq (HSMul.hSMul g m) (HSMul.hSMul (↑g) m)","decl":"theorem smul_def [SMul A α] {S : Subalgebra R A} (g : S) (m : α) : g • m = (g : A) • m := rfl\n\n"}
{"name":"Subalgebra.smulCommClass_left","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nα : Type u_1\nβ : Type u_2\ninst✝² : SMul A β\ninst✝¹ : SMul α β\ninst✝ : SMulCommClass A α β\nS : Subalgebra R A\n⊢ SMulCommClass (Subtype fun x => Membership.mem S x) α β","decl":"instance smulCommClass_left [SMul A β] [SMul α β] [SMulCommClass A α β] (S : Subalgebra R A) :\n    SMulCommClass S α β :=\n  S.toSubsemiring.smulCommClass_left\n\n"}
{"name":"Subalgebra.smulCommClass_right","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nα : Type u_1\nβ : Type u_2\ninst✝² : SMul α β\ninst✝¹ : SMul A β\ninst✝ : SMulCommClass α A β\nS : Subalgebra R A\n⊢ SMulCommClass α (Subtype fun x => Membership.mem S x) β","decl":"instance smulCommClass_right [SMul α β] [SMul A β] [SMulCommClass α A β] (S : Subalgebra R A) :\n    SMulCommClass α S β :=\n  S.toSubsemiring.smulCommClass_right\n\n"}
{"name":"Subalgebra.isScalarTower_left","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\nα : Type u_1\nβ : Type u_2\ninst✝³ : SMul α β\ninst✝² : SMul A α\ninst✝¹ : SMul A β\ninst✝ : IsScalarTower A α β\nS : Subalgebra R A\n⊢ IsScalarTower (Subtype fun x => Membership.mem S x) α β","decl":"/-- Note that this provides `IsScalarTower S R R` which is needed by `smul_mul_assoc`. -/\ninstance isScalarTower_left [SMul α β] [SMul A α] [SMul A β] [IsScalarTower A α β]\n    (S : Subalgebra R A) : IsScalarTower S α β :=\n  inferInstanceAs (IsScalarTower S.toSubsemiring α β)\n\n"}
{"name":"Subalgebra.isScalarTower_mid","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_3\nS : Type u_4\nT : Type u_5\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring S\ninst✝⁴ : AddCommMonoid T\ninst✝³ : Algebra R S\ninst✝² : Module R T\ninst✝¹ : Module S T\ninst✝ : IsScalarTower R S T\nS' : Subalgebra R S\n⊢ IsScalarTower R (Subtype fun x => Membership.mem S' x) T","decl":"instance isScalarTower_mid {R S T : Type*} [CommSemiring R] [Semiring S] [AddCommMonoid T]\n    [Algebra R S] [Module R T] [Module S T] [IsScalarTower R S T] (S' : Subalgebra R S) :\n    IsScalarTower R S' T :=\n  ⟨fun _x y _z => smul_assoc _ (y : S) _⟩\n\n"}
{"name":"Subalgebra.instFaithfulSMulSubtypeMem","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\nα : Type u_1\ninst✝¹ : SMul A α\ninst✝ : FaithfulSMul A α\nS : Subalgebra R A\n⊢ FaithfulSMul (Subtype fun x => Membership.mem S x) α","decl":"instance [SMul A α] [FaithfulSMul A α] (S : Subalgebra R A) : FaithfulSMul S α :=\n  inferInstanceAs (FaithfulSMul S.toSubsemiring α)\n\n"}
{"name":"Subalgebra.algebraMap_eq","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"α : Type u_1\nR : Type u_3\nA : Type u_4\ninst✝⁴ : CommSemiring R\ninst✝³ : CommSemiring A\ninst✝² : Semiring α\ninst✝¹ : Algebra R A\ninst✝ : Algebra A α\nS : Subalgebra R A\n⊢ Eq (algebraMap (Subtype fun x => Membership.mem S x) α) ((algebraMap A α).comp ↑S.val)","decl":"theorem algebraMap_eq {R A : Type*} [CommSemiring R] [CommSemiring A] [Semiring α] [Algebra R A]\n    [Algebra A α] (S : Subalgebra R A) : algebraMap S α = (algebraMap A α).comp S.val :=\n  rfl\n\n"}
{"name":"Subalgebra.rangeS_algebraMap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_3\nA : Type u_4\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (algebraMap (Subtype fun x => Membership.mem S x) A).rangeS S.toSubsemiring","decl":"@[simp]\ntheorem rangeS_algebraMap {R A : Type*} [CommSemiring R] [CommSemiring A] [Algebra R A]\n    (S : Subalgebra R A) : (algebraMap S A).rangeS = S.toSubsemiring := by\n  rw [algebraMap_eq, Algebra.id.map_eq_id, RingHom.id_comp, ← toSubsemiring_subtype,\n    Subsemiring.rangeS_subtype]\n\n"}
{"name":"Subalgebra.range_algebraMap","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_3\nA : Type u_4\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (algebraMap (Subtype fun x => Membership.mem S x) A).range S.toSubring","decl":"@[simp]\ntheorem range_algebraMap {R A : Type*} [CommRing R] [CommRing A] [Algebra R A]\n    (S : Subalgebra R A) : (algebraMap S A).range = S.toSubring := by\n  rw [algebraMap_eq, Algebra.id.map_eq_id, RingHom.id_comp, ← toSubring_subtype,\n    Subring.range_subtype]\n\n"}
{"name":"Subalgebra.noZeroSMulDivisors_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : NoZeroDivisors A\nS : Subalgebra R A\n⊢ NoZeroSMulDivisors (Subtype fun x => Membership.mem S x) A","decl":"instance noZeroSMulDivisors_top [NoZeroDivisors A] (S : Subalgebra R A) : NoZeroSMulDivisors S A :=\n  ⟨fun {c} x h =>\n    have : (c : A) = 0 ∨ x = 0 := eq_zero_or_eq_zero_of_mul_eq_zero h\n    this.imp_left (@Subtype.ext_iff _ _ c 0).mpr⟩\n\n"}
{"name":"Set.algebraMap_mem_center","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\n⊢ Membership.mem (Set.center A) ((algebraMap R A) r)","decl":"theorem _root_.Set.algebraMap_mem_center (r : R) : algebraMap R A r ∈ Set.center A := by\n  simp only [Semigroup.mem_center_iff, commutes, forall_const]\n\n"}
{"name":"Subalgebra.coe_center","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑(Subalgebra.center R A)) (NonUnitalSubsemiring.center A).carrier","decl":"/-- The center of an algebra is the set of elements which commute with every element. They form a\nsubalgebra. -/\n@[simps! coe toSubsemiring]\ndef center : Subalgebra R A :=\n  { Subsemiring.center A with algebraMap_mem' := Set.algebraMap_mem_center }\n\n"}
{"name":"Subalgebra.center_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (Subalgebra.center R A).toSubsemiring (Subsemiring.center A)","decl":"/-- The center of an algebra is the set of elements which commute with every element. They form a\nsubalgebra. -/\n@[simps! coe toSubsemiring]\ndef center : Subalgebra R A :=\n  { Subsemiring.center A with algebraMap_mem' := Set.algebraMap_mem_center }\n\n"}
{"name":"Subalgebra.center_toSubring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Eq (Subalgebra.center R A).toSubring (Subring.center A)","decl":"@[simp]\ntheorem center_toSubring (R A : Type*) [CommRing R] [Ring A] [Algebra R A] :\n    (center R A).toSubring = Subring.center A :=\n  rfl\n\n"}
{"name":"Subalgebra.center_eq_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nA : Type u_1\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\n⊢ Eq (Subalgebra.center R A) Top.top","decl":"@[simp]\ntheorem center_eq_top (A : Type*) [CommSemiring A] [Algebra R A] : center R A = ⊤ :=\n  SetLike.coe_injective (Set.center_eq_univ A)\n\n"}
{"name":"Subalgebra.mem_center_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na : A\n⊢ Iff (Membership.mem (Subalgebra.center R A) a) (∀ (b : A), Eq (HMul.hMul b a) (HMul.hMul a b))","decl":"theorem mem_center_iff {a : A} : a ∈ center R A ↔ ∀ b : A, b * a = a * b :=\n  Subsemigroup.mem_center_iff\n\n"}
{"name":"Set.algebraMap_mem_centralizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\nr : R\n⊢ Membership.mem s.centralizer ((algebraMap R A) r)","decl":"@[simp]\ntheorem _root_.Set.algebraMap_mem_centralizer {s : Set A} (r : R) :\n    algebraMap R A r ∈ s.centralizer :=\n  fun _a _h => (Algebra.commutes _ _).symm\n\n"}
{"name":"Subalgebra.coe_centralizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ Eq (↑(Subalgebra.centralizer R s)) s.centralizer","decl":"@[simp, norm_cast]\ntheorem coe_centralizer (s : Set A) : (centralizer R s : Set A) = s.centralizer :=\n  rfl\n\n"}
{"name":"Subalgebra.mem_centralizer_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\nz : A\n⊢ Iff (Membership.mem (Subalgebra.centralizer R s) z) (∀ (g : A), Membership.mem s g → Eq (HMul.hMul g z) (HMul.hMul z g))","decl":"theorem mem_centralizer_iff {s : Set A} {z : A} : z ∈ centralizer R s ↔ ∀ g ∈ s, g * z = z * g :=\n  Iff.rfl\n\n"}
{"name":"Subalgebra.center_le_centralizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ LE.le (Subalgebra.center R A) (Subalgebra.centralizer R s)","decl":"theorem center_le_centralizer (s) : center R A ≤ centralizer R s :=\n  s.center_subset_centralizer\n\n"}
{"name":"Subalgebra.centralizer_le","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns t : Set A\nh : HasSubset.Subset s t\n⊢ LE.le (Subalgebra.centralizer R t) (Subalgebra.centralizer R s)","decl":"theorem centralizer_le (s t : Set A) (h : s ⊆ t) : centralizer R t ≤ centralizer R s :=\n  Set.centralizer_subset h\n\n"}
{"name":"Subalgebra.centralizer_eq_top_iff_subset","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ Iff (Eq (Subalgebra.centralizer R s) Top.top) (HasSubset.Subset s ↑(Subalgebra.center R A))","decl":"@[simp]\ntheorem centralizer_eq_top_iff_subset {s : Set A} : centralizer R s = ⊤ ↔ s ⊆ center R A :=\n  SetLike.ext'_iff.trans Set.centralizer_eq_top_iff_subset\n\n"}
{"name":"Subalgebra.centralizer_univ","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (Subalgebra.centralizer R Set.univ) (Subalgebra.center R A)","decl":"@[simp]\ntheorem centralizer_univ : centralizer R Set.univ = center R A :=\n  SetLike.ext' (Set.centralizer_univ A)\n\n"}
{"name":"Subalgebra.le_centralizer_centralizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Subalgebra R A\n⊢ LE.le s (Subalgebra.centralizer R ↑(Subalgebra.centralizer R ↑s))","decl":"lemma le_centralizer_centralizer {s : Subalgebra R A} :\n    s ≤ centralizer R (centralizer R (s : Set A)) :=\n  Set.subset_centralizer_centralizer\n\n"}
{"name":"Subalgebra.centralizer_centralizer_centralizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ Eq (Subalgebra.centralizer R s.centralizer.centralizer) (Subalgebra.centralizer R s)","decl":"@[simp]\nlemma centralizer_centralizer_centralizer {s : Set A} :\n    centralizer R s.centralizer.centralizer = centralizer R s := by\n  apply SetLike.coe_injective\n  simp only [coe_centralizer, Set.centralizer_centralizer_centralizer]\n\n"}
{"name":"subalgebraOfSubsemiring_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nS : Subsemiring R\n⊢ Eq (subalgebraOfSubsemiring S).toSubsemiring S","decl":"/-- A subsemiring is an `ℕ`-subalgebra. -/\n@[simps toSubsemiring]\ndef subalgebraOfSubsemiring (S : Subsemiring R) : Subalgebra ℕ R :=\n  { S with algebraMap_mem' := fun i => natCast_mem S i }\n\n"}
{"name":"mem_subalgebraOfSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nx : R\nS : Subsemiring R\n⊢ Iff (Membership.mem (subalgebraOfSubsemiring S) x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_subalgebraOfSubsemiring {x : R} {S : Subsemiring R} :\n    x ∈ subalgebraOfSubsemiring S ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"subalgebraOfSubring_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\ninst✝ : Ring R\nS : Subring R\n⊢ Eq (subalgebraOfSubring S).toSubsemiring S.toSubsemiring","decl":"/-- A subring is a `ℤ`-subalgebra. -/\n@[simps toSubsemiring]\ndef subalgebraOfSubring (S : Subring R) : Subalgebra ℤ R :=\n  { S with\n    algebraMap_mem' := fun i =>\n      Int.induction_on i (by simpa using S.zero_mem)\n        (fun i ih => by simpa using S.add_mem ih S.one_mem) fun i ih =>\n        show ((-i - 1 : ℤ) : R) ∈ S by\n          rw [Int.cast_sub, Int.cast_one]\n          exact S.sub_mem ih S.one_mem }\n\n"}
{"name":"mem_subalgebraOfSubring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\ninst✝ : Ring R\nx : R\nS : Subring R\n⊢ Iff (Membership.mem (subalgebraOfSubring S) x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_subalgebraOfSubring {x : R} {S : Subring R} : x ∈ subalgebraOfSubring S ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"AlgHom.equalizer_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\nϕ ψ : F\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\n⊢ Eq (AlgHom.equalizer ϕ ψ).toSubsemiring { carrier := setOf fun a => Eq (ϕ a) (ψ a), mul_mem' := ⋯, one_mem' := ⋯, add_mem' := ⋯, zero_mem' := ⋯ }","decl":"/-- The equalizer of two R-algebra homomorphisms -/\n@[simps coe toSubsemiring]\ndef equalizer (ϕ ψ : F) [FunLike F A B] [AlgHomClass F R A B] : Subalgebra R A where\n  carrier := { a | ϕ a = ψ a }\n  zero_mem' := by simp only [Set.mem_setOf_eq, map_zero]\n  one_mem' := by simp only [Set.mem_setOf_eq, map_one]\n  add_mem' {x y} (hx : ϕ x = ψ x) (hy : ϕ y = ψ y) := by\n    rw [Set.mem_setOf_eq, map_add, map_add, hx, hy]\n  mul_mem' {x y} (hx : ϕ x = ψ x) (hy : ϕ y = ψ y) := by\n    rw [Set.mem_setOf_eq, map_mul, map_mul, hx, hy]\n  algebraMap_mem' x := by\n    simp only [Set.mem_setOf_eq, AlgHomClass.commutes]\n\n"}
{"name":"AlgHom.coe_equalizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\nϕ ψ : F\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\n⊢ Eq (↑(AlgHom.equalizer ϕ ψ)) (setOf fun a => Eq (ϕ a) (ψ a))","decl":"/-- The equalizer of two R-algebra homomorphisms -/\n@[simps coe toSubsemiring]\ndef equalizer (ϕ ψ : F) [FunLike F A B] [AlgHomClass F R A B] : Subalgebra R A where\n  carrier := { a | ϕ a = ψ a }\n  zero_mem' := by simp only [Set.mem_setOf_eq, map_zero]\n  one_mem' := by simp only [Set.mem_setOf_eq, map_one]\n  add_mem' {x y} (hx : ϕ x = ψ x) (hy : ϕ y = ψ y) := by\n    rw [Set.mem_setOf_eq, map_add, map_add, hx, hy]\n  mul_mem' {x y} (hx : ϕ x = ψ x) (hy : ϕ y = ψ y) := by\n    rw [Set.mem_setOf_eq, map_mul, map_mul, hx, hy]\n  algebraMap_mem' x := by\n    simp only [Set.mem_setOf_eq, AlgHomClass.commutes]\n\n"}
{"name":"AlgHom.mem_equalizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ ψ : F\nx : A\n⊢ Iff (Membership.mem (AlgHom.equalizer φ ψ) x) (Eq (φ x) (ψ x))","decl":"@[simp]\ntheorem mem_equalizer (φ ψ : F) (x : A) : x ∈ equalizer φ ψ ↔ φ x = ψ x :=\n  Iff.rfl\n\n"}
{"name":"AlgHom.equalizer_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ ψ : F\n⊢ Eq (Subalgebra.toSubmodule (AlgHom.equalizer φ ψ)) (LinearMap.eqLocus φ ψ)","decl":"theorem equalizer_toSubmodule {φ ψ : F} :\n    Subalgebra.toSubmodule (equalizer φ ψ) = LinearMap.eqLocus φ ψ := rfl\n\n"}
{"name":"AlgHom.equalizer_eq_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ ψ : F\n⊢ Iff (Eq (AlgHom.equalizer φ ψ) Top.top) (Eq φ ψ)","decl":"@[simp]\ntheorem equalizer_eq_top {φ ψ : F} : equalizer φ ψ = ⊤ ↔ φ = ψ := by\n  simp [SetLike.ext_iff, DFunLike.ext_iff]\n\n"}
{"name":"AlgHom.equalizer_same","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ : F\n⊢ Eq (AlgHom.equalizer φ φ) Top.top","decl":"@[simp]\ntheorem equalizer_same (φ : F) : equalizer φ φ = ⊤ := equalizer_eq_top.2 rfl\n\n"}
{"name":"AlgHom.le_equalizer","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ ψ : F\nS : Subalgebra R A\n⊢ Iff (LE.le S (AlgHom.equalizer φ ψ)) (Set.EqOn ⇑φ ⇑ψ ↑S)","decl":"theorem le_equalizer {φ ψ : F} {S : Subalgebra R A} : S ≤ equalizer φ ψ ↔ Set.EqOn φ ψ S := Iff.rfl\n\n"}
{"name":"AlgHom.eqOn_sup","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ ψ : F\nS T : Subalgebra R A\nhS : Set.EqOn ⇑φ ⇑ψ ↑S\nhT : Set.EqOn ⇑φ ⇑ψ ↑T\n⊢ Set.EqOn ⇑φ ⇑ψ ↑(Max.max S T)","decl":"theorem eqOn_sup {φ ψ : F} {S T : Subalgebra R A} (hS : Set.EqOn φ ψ S) (hT : Set.EqOn φ ψ T) :\n    Set.EqOn φ ψ ↑(S ⊔ T) := by\n  rw [← le_equalizer] at hS hT ⊢\n  exact sup_le hS hT\n\n"}
{"name":"AlgHom.ext_on_codisjoint","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Semiring B\ninst✝² : Algebra R B\nF : Type u_4\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nφ ψ : F\nS T : Subalgebra R A\nhST : Codisjoint S T\nhS : Set.EqOn ⇑φ ⇑ψ ↑S\nhT : Set.EqOn ⇑φ ⇑ψ ↑T\n⊢ Eq φ ψ","decl":"theorem ext_on_codisjoint {φ ψ : F} {S T : Subalgebra R A} (hST : Codisjoint S T)\n    (hS : Set.EqOn φ ψ S) (hT : Set.EqOn φ ψ T) : φ = ψ :=\n  DFunLike.ext _ _ fun _ ↦ eqOn_sup hS hT <| hST.eq_top.symm ▸ trivial\n\n"}
{"name":"Subalgebra.map_comap_eq","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\n⊢ Eq (Subalgebra.map f (Subalgebra.comap f S)) (Min.min S f.range)","decl":"theorem map_comap_eq (f : A →ₐ[R] B) (S : Subalgebra R B) : (S.comap f).map f = S ⊓ f.range :=\n  SetLike.coe_injective Set.image_preimage_eq_inter_range\n\n"}
{"name":"Subalgebra.map_comap_eq_self","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nS : Subalgebra R B\nh : LE.le S f.range\n⊢ Eq (Subalgebra.map f (Subalgebra.comap f S)) S","decl":"theorem map_comap_eq_self\n    {f : A →ₐ[R] B} {S : Subalgebra R B} (h : S ≤ f.range) : (S.comap f).map f = S := by\n  simpa only [inf_of_le_left h] using map_comap_eq f S\n\n"}
{"name":"Subalgebra.map_comap_eq_self_of_surjective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : Function.Surjective ⇑f\nS : Subalgebra R B\n⊢ Eq (Subalgebra.map f (Subalgebra.comap f S)) S","decl":"theorem map_comap_eq_self_of_surjective\n    {f : A →ₐ[R] B} (hf : Function.Surjective f) (S : Subalgebra R B) : (S.comap f).map f = S :=\n  map_comap_eq_self <| by simp [(AlgHom.range_eq_top f).2 hf]\n\n"}
{"name":"Subalgebra.comap_map_eq_self_of_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nf : AlgHom R A B\nhf : Function.Injective ⇑f\nS : Subalgebra R A\n⊢ Eq (Subalgebra.comap f (Subalgebra.map f S)) S","decl":"theorem comap_map_eq_self_of_injective\n    {f : A →ₐ[R] B} (hf : Function.Injective f) (S : Subalgebra R A) : (S.map f).comap f = S :=\n  SetLike.coe_injective (Set.preimage_image_eq _ hf)\n\n"}
{"name":"Subalgebra.toNonUnitalSubalgebra_toSubalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (S.toNonUnitalSubalgebra.toSubalgebra ⋯) S","decl":"lemma Subalgebra.toNonUnitalSubalgebra_toSubalgebra (S : Subalgebra R A) :\n    S.toNonUnitalSubalgebra.toSubalgebra S.one_mem = S := by cases S; rfl\n\n"}
{"name":"NonUnitalSubalgebra.toSubalgebra_toNonUnitalSubalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : NonUnitalSubalgebra R A\nh1 : Membership.mem S 1\n⊢ Eq (S.toSubalgebra h1).toNonUnitalSubalgebra S","decl":"lemma NonUnitalSubalgebra.toSubalgebra_toNonUnitalSubalgebra (S : NonUnitalSubalgebra R A)\n    (h1 : (1 : A) ∈ S) : (NonUnitalSubalgebra.toSubalgebra S h1).toNonUnitalSubalgebra = S := by\n  cases S; rfl\n"}
