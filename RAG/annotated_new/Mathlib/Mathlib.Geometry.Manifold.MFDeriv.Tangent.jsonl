{"name":"tangentMap_chart","module":"Mathlib.Geometry.Manifold.MFDeriv.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np q : TangentBundle I M\nh : Membership.mem (chartAt H p.proj).source q.proj\n⊢ Eq (tangentMap I I (↑(chartAt H p.proj)) q) ((Bundle.TotalSpace.toProd H E).symm (↑(chartAt (ModelProd H E) p) q))","decl":"/-- The derivative of the chart at a base point is the chart of the tangent bundle, composed with\nthe identification between the tangent bundle of the model space and the product space. -/\ntheorem tangentMap_chart {p q : TangentBundle I M} (h : q.1 ∈ (chartAt H p.1).source) :\n    tangentMap I I (chartAt H p.1) q =\n      (TotalSpace.toProd _ _).symm\n        ((chartAt (ModelProd H E) p : TangentBundle I M → ModelProd H E) q) := by\n  dsimp [tangentMap]\n  rw [MDifferentiableAt.mfderiv]\n  · rfl\n  · exact mdifferentiableAt_atlas (chart_mem_atlas _ _) h\n\n"}
{"name":"tangentMap_chart_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np : TangentBundle I M\nq : TangentBundle I H\nh : Membership.mem (chartAt H p.proj).target q.proj\n⊢ Eq (tangentMap I I (↑(chartAt H p.proj).symm) q) (↑(chartAt (ModelProd H E) p).symm ((Bundle.TotalSpace.toProd H E) q))","decl":"/-- The derivative of the inverse of the chart at a base point is the inverse of the chart of the\ntangent bundle, composed with the identification between the tangent bundle of the model space and\nthe product space. -/\ntheorem tangentMap_chart_symm {p : TangentBundle I M} {q : TangentBundle I H}\n    (h : q.1 ∈ (chartAt H p.1).target) :\n    tangentMap I I (chartAt H p.1).symm q =\n      (chartAt (ModelProd H E) p).symm (TotalSpace.toProd H E q) := by\n  dsimp only [tangentMap]\n  rw [MDifferentiableAt.mfderiv (mdifferentiableAt_atlas_symm (chart_mem_atlas _ _) h)]\n  simp only [ContinuousLinearMap.coe_coe, TangentBundle.chartAt, h, tangentBundleCore,\n    mfld_simps, (· ∘ ·)]\n  -- `simp` fails to apply `PartialEquiv.prod_symm` with `ModelProd`\n  congr\n  exact ((chartAt H (TotalSpace.proj p)).right_inv h).symm\n\n"}
{"name":"mfderiv_chartAt_eq_tangentCoordChange","module":"Mathlib.Geometry.Manifold.MFDeriv.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\nhsrc : Membership.mem (chartAt H y).source x\n⊢ Eq (mfderiv I I (↑(chartAt H y)) x) (tangentCoordChange I x y x)","decl":"lemma mfderiv_chartAt_eq_tangentCoordChange {x y : M} (hsrc : x ∈ (chartAt H y).source) :\n    mfderiv I I (chartAt H y) x = tangentCoordChange I x y x := by\n  have := mdifferentiableAt_atlas (I := I) (ChartedSpace.chart_mem_atlas _) hsrc\n  simp [mfderiv, if_pos this, Function.comp_assoc]\n\n"}
{"name":"UniqueMDiffOn.tangentBundle_proj_preimage","module":"Mathlib.Geometry.Manifold.MFDeriv.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ns : Set M\nhs : UniqueMDiffOn I s\n⊢ UniqueMDiffOn I.tangent (Set.preimage Bundle.TotalSpace.proj s)","decl":"/-- The preimage under the projection from the tangent bundle of a set with unique differential in\nthe basis also has unique differential. -/\ntheorem UniqueMDiffOn.tangentBundle_proj_preimage {s : Set M} (hs : UniqueMDiffOn I s) :\n    UniqueMDiffOn I.tangent (π E (TangentSpace I) ⁻¹' s) :=\n  hs.bundle_preimage _\n\n"}
{"name":"inTangentCoordinates_eq_mfderiv_comp","module":"Mathlib.Geometry.Manifold.MFDeriv.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝¹² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁹ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁸ : TopologicalSpace M\ninst✝⁷ : ChartedSpace H M\ninst✝⁶ : IsManifold I 1 M\nE' : Type u_5\ninst✝⁵ : NormedAddCommGroup E'\ninst✝⁴ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝³ : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝² : TopologicalSpace M'\ninst✝¹ : ChartedSpace H' M'\ninst✝ : IsManifold I' 1 M'\nN : Type u_8\nf : N → M\ng : N → M'\nϕ : (x : N) → ContinuousLinearMap (RingHom.id 𝕜) (TangentSpace I (f x)) (TangentSpace I' (g x))\nx₀ x : N\nhx : Membership.mem (chartAt H (f x₀)).source (f x)\nhy : Membership.mem (chartAt H' (g x₀)).source (g x)\n⊢ Eq (inTangentCoordinates I I' f g ϕ x₀ x) ((mfderiv I' (modelWithCornersSelf 𝕜 E') (↑(extChartAt I' (g x₀))) (g x)).comp ((ϕ x).comp (mfderivWithin (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I (f x₀)).symm) (Set.range ↑I) (↑(extChartAt I (f x₀)) (f x)))))","decl":"/-- To write a linear map between tangent spaces in coordinates amounts to precomposing and\npostcomposing it with derivatives of extended charts.\nConcrete version of `inTangentCoordinates_eq`. -/\nlemma inTangentCoordinates_eq_mfderiv_comp\n    {N : Type*} {f : N → M} {g : N → M'}\n    {ϕ : Π x : N, TangentSpace I (f x) →L[𝕜] TangentSpace I' (g x)} {x₀ : N} {x : N}\n    (hx : f x ∈ (chartAt H (f x₀)).source) (hy : g x ∈ (chartAt H' (g x₀)).source) :\n    inTangentCoordinates I I' f g ϕ x₀ x =\n    (mfderiv I' 𝓘(𝕜, E') (extChartAt I' (g x₀)) (g x)) ∘L (ϕ x) ∘L\n      (mfderivWithin 𝓘(𝕜, E) I (extChartAt I (f x₀)).symm (range I)\n        (extChartAt I (f x₀) (f x))) := by\n  rw [inTangentCoordinates_eq _ _ _ hx hy, tangentBundleCore_coordChange]\n  congr\n  · have : MDifferentiableAt I' 𝓘(𝕜, E') (extChartAt I' (g x₀)) (g x) :=\n      mdifferentiableAt_extChartAt hy\n    simp at this\n    simp [mfderiv, this]\n  · simp only [mfderivWithin, writtenInExtChartAt, modelWithCornersSelf_coe, range_id, inter_univ]\n    rw [if_pos]\n    · simp [Function.comp_def, PartialHomeomorph.left_inv (chartAt H (f x₀)) hx]\n    · apply mdifferentiableWithinAt_extChartAt_symm\n      apply (extChartAt I (f x₀)).map_source\n      simpa using hx\n\n"}
