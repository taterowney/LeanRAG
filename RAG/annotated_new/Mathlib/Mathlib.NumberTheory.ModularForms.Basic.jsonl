{"name":"ModularForm.mk.inj","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ntoSlashInvariantForm✝ : SlashInvariantForm Γ k\nholo'✝ : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm✝\nbdd_at_infty'✝ : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm✝)\ntoSlashInvariantForm : SlashInvariantForm Γ k\nholo' : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm\nbdd_at_infty' : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm)\nx✝ : Eq { toSlashInvariantForm := toSlashInvariantForm✝, holo' := holo'✝, bdd_at_infty' := bdd_at_infty'✝ } { toSlashInvariantForm := toSlashInvariantForm, holo' := holo', bdd_at_infty' := bdd_at_infty' }\n⊢ Eq toSlashInvariantForm✝ toSlashInvariantForm","decl":"/-- These are `SlashInvariantForm`'s that are holomorphic and bounded at infinity. -/\nstructure ModularForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  bdd_at_infty' : ∀ A : SL(2, ℤ), IsBoundedAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"ModularForm.mk.sizeOf_spec","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ntoSlashInvariantForm : SlashInvariantForm Γ k\nholo' : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm\nbdd_at_infty' : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm)\n⊢ Eq (SizeOf.sizeOf { toSlashInvariantForm := toSlashInvariantForm, holo' := holo', bdd_at_infty' := bdd_at_infty' }) (HAdd.hAdd 1 (SizeOf.sizeOf toSlashInvariantForm))","decl":"/-- These are `SlashInvariantForm`'s that are holomorphic and bounded at infinity. -/\nstructure ModularForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  bdd_at_infty' : ∀ A : SL(2, ℤ), IsBoundedAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"ModularForm.mk.injEq","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ntoSlashInvariantForm✝ : SlashInvariantForm Γ k\nholo'✝ : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm✝\nbdd_at_infty'✝ : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm✝)\ntoSlashInvariantForm : SlashInvariantForm Γ k\nholo' : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm\nbdd_at_infty' : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm)\n⊢ Eq (Eq { toSlashInvariantForm := toSlashInvariantForm✝, holo' := holo'✝, bdd_at_infty' := bdd_at_infty'✝ } { toSlashInvariantForm := toSlashInvariantForm, holo' := holo', bdd_at_infty' := bdd_at_infty' }) (Eq toSlashInvariantForm✝ toSlashInvariantForm)","decl":"/-- These are `SlashInvariantForm`'s that are holomorphic and bounded at infinity. -/\nstructure ModularForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  bdd_at_infty' : ∀ A : SL(2, ℤ), IsBoundedAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"ModularForm.bdd_at_infty'","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nself : ModularForm Γ k\nA : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑self.toSlashInvariantForm)","decl":"/-- These are `SlashInvariantForm`'s that are holomorphic and bounded at infinity. -/\nstructure ModularForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  bdd_at_infty' : ∀ A : SL(2, ℤ), IsBoundedAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"ModularForm.holo'","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nself : ModularForm Γ k\n⊢ MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑self.toSlashInvariantForm","decl":"/-- These are `SlashInvariantForm`'s that are holomorphic and bounded at infinity. -/\nstructure ModularForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  bdd_at_infty' : ∀ A : SL(2, ℤ), IsBoundedAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"CuspForm.holo'","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nself : CuspForm Γ k\n⊢ MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑self.toSlashInvariantForm","decl":"/-- These are `SlashInvariantForm`s that are holomorphic and zero at infinity. -/\nstructure CuspForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  zero_at_infty' : ∀ A : SL(2, ℤ), IsZeroAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"CuspForm.mk.injEq","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ntoSlashInvariantForm✝ : SlashInvariantForm Γ k\nholo'✝ : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm✝\nzero_at_infty'✝ : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm✝)\ntoSlashInvariantForm : SlashInvariantForm Γ k\nholo' : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm\nzero_at_infty' : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm)\n⊢ Eq (Eq { toSlashInvariantForm := toSlashInvariantForm✝, holo' := holo'✝, zero_at_infty' := zero_at_infty'✝ } { toSlashInvariantForm := toSlashInvariantForm, holo' := holo', zero_at_infty' := zero_at_infty' }) (Eq toSlashInvariantForm✝ toSlashInvariantForm)","decl":"/-- These are `SlashInvariantForm`s that are holomorphic and zero at infinity. -/\nstructure CuspForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  zero_at_infty' : ∀ A : SL(2, ℤ), IsZeroAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"CuspForm.mk.sizeOf_spec","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ntoSlashInvariantForm : SlashInvariantForm Γ k\nholo' : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm\nzero_at_infty' : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm)\n⊢ Eq (SizeOf.sizeOf { toSlashInvariantForm := toSlashInvariantForm, holo' := holo', zero_at_infty' := zero_at_infty' }) (HAdd.hAdd 1 (SizeOf.sizeOf toSlashInvariantForm))","decl":"/-- These are `SlashInvariantForm`s that are holomorphic and zero at infinity. -/\nstructure CuspForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  zero_at_infty' : ∀ A : SL(2, ℤ), IsZeroAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"CuspForm.mk.inj","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ntoSlashInvariantForm✝ : SlashInvariantForm Γ k\nholo'✝ : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm✝\nzero_at_infty'✝ : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm✝)\ntoSlashInvariantForm : SlashInvariantForm Γ k\nholo' : MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑toSlashInvariantForm\nzero_at_infty' : ∀ (A : Matrix.SpecialLinearGroup (Fin 2) Int), UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑toSlashInvariantForm)\nx✝ : Eq { toSlashInvariantForm := toSlashInvariantForm✝, holo' := holo'✝, zero_at_infty' := zero_at_infty'✝ } { toSlashInvariantForm := toSlashInvariantForm, holo' := holo', zero_at_infty' := zero_at_infty' }\n⊢ Eq toSlashInvariantForm✝ toSlashInvariantForm","decl":"/-- These are `SlashInvariantForm`s that are holomorphic and zero at infinity. -/\nstructure CuspForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  zero_at_infty' : ∀ A : SL(2, ℤ), IsZeroAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"CuspForm.zero_at_infty'","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nself : CuspForm Γ k\nA : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑self.toSlashInvariantForm)","decl":"/-- These are `SlashInvariantForm`s that are holomorphic and zero at infinity. -/\nstructure CuspForm extends SlashInvariantForm Γ k where\n  holo' : MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (toSlashInvariantForm : ℍ → ℂ)\n  zero_at_infty' : ∀ A : SL(2, ℤ), IsZeroAtImInfty (toSlashInvariantForm ∣[k] A)\n\n"}
{"name":"ModularFormClass.holo","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_2\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : ModularFormClass F Γ k\nf : F\n⊢ MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑f","decl":"/-- `ModularFormClass F Γ k` says that `F` is a type of bundled functions that extend\n`SlashInvariantFormClass` by requiring that the functions be holomorphic and bounded\nat infinity. -/\nclass ModularFormClass (F : Type*) (Γ : outParam <| Subgroup (SL(2, ℤ))) (k : outParam ℤ)\n    [FunLike F ℍ ℂ] extends SlashInvariantFormClass F Γ k : Prop where\n  holo : ∀ f : F, MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (f : ℍ → ℂ)\n  bdd_at_infty : ∀ (f : F) (A : SL(2, ℤ)), IsBoundedAtImInfty (f ∣[k] A)\n\n"}
{"name":"ModularFormClass.bdd_at_infty","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_2\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : ModularFormClass F Γ k\nf : F\nA : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ UpperHalfPlane.IsBoundedAtImInfty (SlashAction.map Complex k A ⇑f)","decl":"/-- `ModularFormClass F Γ k` says that `F` is a type of bundled functions that extend\n`SlashInvariantFormClass` by requiring that the functions be holomorphic and bounded\nat infinity. -/\nclass ModularFormClass (F : Type*) (Γ : outParam <| Subgroup (SL(2, ℤ))) (k : outParam ℤ)\n    [FunLike F ℍ ℂ] extends SlashInvariantFormClass F Γ k : Prop where\n  holo : ∀ f : F, MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (f : ℍ → ℂ)\n  bdd_at_infty : ∀ (f : F) (A : SL(2, ℤ)), IsBoundedAtImInfty (f ∣[k] A)\n\n"}
{"name":"ModularFormClass.toSlashInvariantFormClass","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_2\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : ModularFormClass F Γ k\n⊢ SlashInvariantFormClass F Γ k","decl":"/-- `ModularFormClass F Γ k` says that `F` is a type of bundled functions that extend\n`SlashInvariantFormClass` by requiring that the functions be holomorphic and bounded\nat infinity. -/\nclass ModularFormClass (F : Type*) (Γ : outParam <| Subgroup (SL(2, ℤ))) (k : outParam ℤ)\n    [FunLike F ℍ ℂ] extends SlashInvariantFormClass F Γ k : Prop where\n  holo : ∀ f : F, MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (f : ℍ → ℂ)\n  bdd_at_infty : ∀ (f : F) (A : SL(2, ℤ)), IsBoundedAtImInfty (f ∣[k] A)\n\n"}
{"name":"CuspFormClass.toSlashInvariantFormClass","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_2\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : CuspFormClass F Γ k\n⊢ SlashInvariantFormClass F Γ k","decl":"/-- `CuspFormClass F Γ k` says that `F` is a type of bundled functions that extend\n`SlashInvariantFormClass` by requiring that the functions be holomorphic and zero\nat infinity. -/\nclass CuspFormClass (F : Type*) (Γ : outParam <| Subgroup (SL(2, ℤ))) (k : outParam ℤ)\n    [FunLike F ℍ ℂ] extends SlashInvariantFormClass F Γ k : Prop where\n  holo : ∀ f : F, MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (f : ℍ → ℂ)\n  zero_at_infty : ∀ (f : F) (A : SL(2, ℤ)), IsZeroAtImInfty (f ∣[k] A)\n\n"}
{"name":"CuspFormClass.holo","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_2\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : CuspFormClass F Γ k\nf : F\n⊢ MDifferentiable (modelWithCornersSelf Complex Complex) (modelWithCornersSelf Complex Complex) ⇑f","decl":"/-- `CuspFormClass F Γ k` says that `F` is a type of bundled functions that extend\n`SlashInvariantFormClass` by requiring that the functions be holomorphic and zero\nat infinity. -/\nclass CuspFormClass (F : Type*) (Γ : outParam <| Subgroup (SL(2, ℤ))) (k : outParam ℤ)\n    [FunLike F ℍ ℂ] extends SlashInvariantFormClass F Γ k : Prop where\n  holo : ∀ f : F, MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (f : ℍ → ℂ)\n  zero_at_infty : ∀ (f : F) (A : SL(2, ℤ)), IsZeroAtImInfty (f ∣[k] A)\n\n"}
{"name":"CuspFormClass.zero_at_infty","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_2\nΓ : outParam (Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int))\nk : outParam Int\ninst✝ : FunLike F UpperHalfPlane Complex\nself : CuspFormClass F Γ k\nf : F\nA : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ UpperHalfPlane.IsZeroAtImInfty (SlashAction.map Complex k A ⇑f)","decl":"/-- `CuspFormClass F Γ k` says that `F` is a type of bundled functions that extend\n`SlashInvariantFormClass` by requiring that the functions be holomorphic and zero\nat infinity. -/\nclass CuspFormClass (F : Type*) (Γ : outParam <| Subgroup (SL(2, ℤ))) (k : outParam ℤ)\n    [FunLike F ℍ ℂ] extends SlashInvariantFormClass F Γ k : Prop where\n  holo : ∀ f : F, MDifferentiable 𝓘(ℂ) 𝓘(ℂ) (f : ℍ → ℂ)\n  zero_at_infty : ∀ (f : F) (A : SL(2, ℤ)), IsZeroAtImInfty (f ∣[k] A)\n\n"}
{"name":"ModularFormClass.modularForm","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\n⊢ ModularFormClass (ModularForm Γ k) Γ k","decl":"instance (priority := 100) ModularFormClass.modularForm :\n    ModularFormClass (ModularForm Γ k) Γ k where\n  slash_action_eq f := f.slash_action_eq'\n  holo := ModularForm.holo'\n  bdd_at_infty := ModularForm.bdd_at_infty'\n\n"}
{"name":"CuspFormClass.cuspForm","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\n⊢ CuspFormClass (CuspForm Γ k) Γ k","decl":"instance (priority := 100) CuspFormClass.cuspForm : CuspFormClass (CuspForm Γ k) Γ k where\n  slash_action_eq f := f.slash_action_eq'\n  holo := CuspForm.holo'\n  zero_at_infty := CuspForm.zero_at_infty'\n\n"}
{"name":"ModularForm.toFun_eq_coe","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : ModularForm Γ k\n⊢ Eq f.toFun ⇑f","decl":"theorem ModularForm.toFun_eq_coe (f : ModularForm Γ k) : f.toFun = (f : ℍ → ℂ) :=\n  rfl\n\n"}
{"name":"ModularForm.toSlashInvariantForm_coe","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : ModularForm Γ k\n⊢ Eq ⇑f.toSlashInvariantForm ⇑f","decl":"@[simp]\ntheorem ModularForm.toSlashInvariantForm_coe (f : ModularForm Γ k) : ⇑f.1 = f :=\n  rfl\n\n"}
{"name":"CuspForm.toFun_eq_coe","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : CuspForm Γ k\n⊢ Eq f.toFun ⇑f","decl":"theorem CuspForm.toFun_eq_coe {f : CuspForm Γ k} : f.toFun = (f : ℍ → ℂ) :=\n  rfl\n\n"}
{"name":"CuspForm.toSlashInvariantForm_coe","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : CuspForm Γ k\n⊢ Eq ⇑f.toSlashInvariantForm ⇑f","decl":"@[simp]\ntheorem CuspForm.toSlashInvariantForm_coe (f : CuspForm Γ k) : ⇑f.1 = f := rfl\n\n"}
{"name":"ModularForm.ext","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : ModularForm Γ k\nh : ∀ (x : UpperHalfPlane), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ModularForm.ext {f g : ModularForm Γ k} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"ModularForm.ext_iff","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : ModularForm Γ k\n⊢ Iff (Eq f g) (∀ (x : UpperHalfPlane), Eq (f x) (g x))","decl":"@[ext]\ntheorem ModularForm.ext {f g : ModularForm Γ k} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CuspForm.ext","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : CuspForm Γ k\nh : ∀ (x : UpperHalfPlane), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem CuspForm.ext {f g : CuspForm Γ k} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CuspForm.ext_iff","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : CuspForm Γ k\n⊢ Iff (Eq f g) (∀ (x : UpperHalfPlane), Eq (f x) (g x))","decl":"@[ext]\ntheorem CuspForm.ext {f g : CuspForm Γ k} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"ModularForm.coe_add","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : ModularForm Γ k\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_add (f g : ModularForm Γ k) : ⇑(f + g) = f + g :=\n  rfl\n\n"}
{"name":"ModularForm.add_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : ModularForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((HAdd.hAdd f g) z) (HAdd.hAdd (f z) (g z))","decl":"@[simp]\ntheorem add_apply (f g : ModularForm Γ k) (z : ℍ) : (f + g) z = f z + g z :=\n  rfl\n\n"}
{"name":"ModularForm.coe_zero","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\n⊢ Eq (⇑0) 0","decl":"@[simp]\ntheorem coe_zero : ⇑(0 : ModularForm Γ k) = (0 : ℍ → ℂ) :=\n  rfl\n\n"}
{"name":"ModularForm.zero_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nz : UpperHalfPlane\n⊢ Eq (0 z) 0","decl":"@[simp]\ntheorem zero_apply (z : ℍ) : (0 : ModularForm Γ k) z = 0 :=\n  rfl\n\n"}
{"name":"ModularForm.coe_smul","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nα : Type u_1\ninst✝¹ : SMul α Complex\ninst✝ : IsScalarTower α Complex Complex\nf : ModularForm Γ k\nn : α\n⊢ Eq (⇑(HSMul.hSMul n f)) (HSMul.hSMul n ⇑f)","decl":"@[simp]\ntheorem coe_smul (f : ModularForm Γ k) (n : α) : ⇑(n • f) = n • ⇑f :=\n  rfl\n\n"}
{"name":"ModularForm.smul_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nα : Type u_1\ninst✝¹ : SMul α Complex\ninst✝ : IsScalarTower α Complex Complex\nf : ModularForm Γ k\nn : α\nz : UpperHalfPlane\n⊢ Eq ((HSMul.hSMul n f) z) (HSMul.hSMul n (f z))","decl":"@[simp]\ntheorem smul_apply (f : ModularForm Γ k) (n : α) (z : ℍ) : (n • f) z = n • f z :=\n  rfl\n\n"}
{"name":"ModularForm.coe_neg","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : ModularForm Γ k\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[simp]\ntheorem coe_neg (f : ModularForm Γ k) : ⇑(-f) = -f :=\n  rfl\n\n"}
{"name":"ModularForm.neg_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : ModularForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((Neg.neg f) z) (Neg.neg (f z))","decl":"@[simp]\ntheorem neg_apply (f : ModularForm Γ k) (z : ℍ) : (-f) z = -f z :=\n  rfl\n\n"}
{"name":"ModularForm.coe_sub","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : ModularForm Γ k\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_sub (f g : ModularForm Γ k) : ⇑(f - g) = f - g :=\n  rfl\n\n"}
{"name":"ModularForm.sub_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : ModularForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((HSub.hSub f g) z) (HSub.hSub (f z) (g z))","decl":"@[simp]\ntheorem sub_apply (f g : ModularForm Γ k) (z : ℍ) : (f - g) z = f z - g z :=\n  rfl\n\n"}
{"name":"ModularForm.coeHom_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : ModularForm Γ k\na : UpperHalfPlane\n⊢ Eq (ModularForm.coeHom f a) (f a)","decl":"/-- Additive coercion from `ModularForm` to `ℍ → ℂ`. -/\n@[simps]\ndef coeHom : ModularForm Γ k →+ ℍ → ℂ where\n  toFun f := f\n  map_zero' := coe_zero\n  map_add' _ _ := rfl\n\n"}
{"name":"ModularForm.mul_coe","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"k_1 k_2 : Int\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nf : ModularForm Γ k_1\ng : ModularForm Γ k_2\n⊢ Eq (⇑(f.mul g)) (HMul.hMul ⇑f ⇑g)","decl":"@[simp]\ntheorem mul_coe {k_1 k_2 : ℤ} {Γ : Subgroup SL(2, ℤ)} (f : ModularForm Γ k_1)\n    (g : ModularForm Γ k_2) : (f.mul g : ℍ → ℂ) = f * g :=\n  rfl\n\n"}
{"name":"ModularForm.const_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nx : Complex\nτ : UpperHalfPlane\n⊢ Eq ((ModularForm.const x) τ) x","decl":"@[simp]\nlemma const_apply (x : ℂ) (τ : ℍ) : (const x : ModularForm Γ 0) τ = x := rfl\n\n"}
{"name":"ModularForm.one_coe_eq_one","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\n⊢ Eq (⇑1) 1","decl":"@[simp]\ntheorem one_coe_eq_one : ⇑(1 : ModularForm Γ 0) = 1 :=\n  rfl\n\n"}
{"name":"ModularForm.coe_natCast","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nn : Nat\n⊢ Eq ⇑↑n ↑n","decl":"@[simp, norm_cast]\nlemma coe_natCast (Γ : Subgroup SL(2, ℤ)) (n : ℕ) :\n    ⇑(n : ModularForm Γ 0) = n := rfl\n\n"}
{"name":"ModularForm.toSlashInvariantForm_natCast","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nn : Nat\n⊢ Eq (↑n).toSlashInvariantForm ↑n","decl":"lemma toSlashInvariantForm_natCast (Γ : Subgroup SL(2, ℤ)) (n : ℕ) :\n    (n : ModularForm Γ 0).toSlashInvariantForm = n := rfl\n\n"}
{"name":"ModularForm.coe_intCast","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nz : Int\n⊢ Eq ⇑↑z ↑z","decl":"@[simp, norm_cast]\nlemma coe_intCast (Γ : Subgroup SL(2, ℤ)) (z : ℤ) :\n    ⇑(z : ModularForm Γ 0) = z := rfl\n\n"}
{"name":"ModularForm.toSlashInvariantForm_intCast","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nz : Int\n⊢ Eq (↑z).toSlashInvariantForm ↑z","decl":"lemma toSlashInvariantForm_intCast (Γ : Subgroup SL(2, ℤ)) (z : ℤ) :\n    (z : ModularForm Γ 0).toSlashInvariantForm = z := rfl\n\n"}
{"name":"CuspForm.coe_add","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : CuspForm Γ k\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_add (f g : CuspForm Γ k) : ⇑(f + g) = f + g :=\n  rfl\n\n"}
{"name":"CuspForm.add_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : CuspForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((HAdd.hAdd f g) z) (HAdd.hAdd (f z) (g z))","decl":"@[simp]\ntheorem add_apply (f g : CuspForm Γ k) (z : ℍ) : (f + g) z = f z + g z :=\n  rfl\n\n"}
{"name":"CuspForm.coe_zero","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\n⊢ Eq (⇑0) 0","decl":"@[simp]\ntheorem coe_zero : ⇑(0 : CuspForm Γ k) = (0 : ℍ → ℂ) :=\n  rfl\n\n"}
{"name":"CuspForm.zero_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nz : UpperHalfPlane\n⊢ Eq (0 z) 0","decl":"@[simp]\ntheorem zero_apply (z : ℍ) : (0 : CuspForm Γ k) z = 0 :=\n  rfl\n\n"}
{"name":"CuspForm.coe_smul","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nα : Type u_2\ninst✝¹ : SMul α Complex\ninst✝ : IsScalarTower α Complex Complex\nf : CuspForm Γ k\nn : α\n⊢ Eq (⇑(HSMul.hSMul n f)) (HSMul.hSMul n ⇑f)","decl":"@[simp]\ntheorem coe_smul (f : CuspForm Γ k) (n : α) : ⇑(n • f) = n • ⇑f :=\n  rfl\n\n"}
{"name":"CuspForm.smul_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nα : Type u_2\ninst✝¹ : SMul α Complex\ninst✝ : IsScalarTower α Complex Complex\nf : CuspForm Γ k\nn : α\nz : UpperHalfPlane\n⊢ Eq ((HSMul.hSMul n f) z) (HSMul.hSMul n (f z))","decl":"@[simp]\ntheorem smul_apply (f : CuspForm Γ k) (n : α) {z : ℍ} : (n • f) z = n • f z :=\n  rfl\n\n"}
{"name":"CuspForm.coe_neg","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : CuspForm Γ k\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[simp]\ntheorem coe_neg (f : CuspForm Γ k) : ⇑(-f) = -f :=\n  rfl\n\n"}
{"name":"CuspForm.neg_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : CuspForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((Neg.neg f) z) (Neg.neg (f z))","decl":"@[simp]\ntheorem neg_apply (f : CuspForm Γ k) (z : ℍ) : (-f) z = -f z :=\n  rfl\n\n"}
{"name":"CuspForm.coe_sub","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : CuspForm Γ k\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_sub (f g : CuspForm Γ k) : ⇑(f - g) = f - g :=\n  rfl\n\n"}
{"name":"CuspForm.sub_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf g : CuspForm Γ k\nz : UpperHalfPlane\n⊢ Eq ((HSub.hSub f g) z) (HSub.hSub (f z) (g z))","decl":"@[simp]\ntheorem sub_apply (f g : CuspForm Γ k) (z : ℍ) : (f - g) z = f z - g z :=\n  rfl\n\n"}
{"name":"CuspForm.coeHom_apply","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\nf : CuspForm Γ k\na : UpperHalfPlane\n⊢ Eq (CuspForm.coeHom f a) (f a)","decl":"/-- Additive coercion from `CuspForm` to `ℍ → ℂ`. -/\n@[simps]\ndef coeHom : CuspForm Γ k →+ ℍ → ℂ where\n  toFun f := f\n  map_zero' := CuspForm.coe_zero\n  map_add' _ _ := rfl\n\n"}
{"name":"CuspForm.instModularFormClassOfCuspFormClass","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"F : Type u_1\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nk : Int\ninst✝¹ : FunLike F UpperHalfPlane Complex\ninst✝ : CuspFormClass F Γ k\n⊢ ModularFormClass F Γ k","decl":"instance (priority := 99) [FunLike F ℍ ℂ] [CuspFormClass F Γ k] : ModularFormClass F Γ k where\n  slash_action_eq := SlashInvariantFormClass.slash_action_eq\n  holo := CuspFormClass.holo\n  bdd_at_infty _ _ := (CuspFormClass.zero_at_infty _ _).boundedAtFilter\n\n"}
{"name":"ModularForm.gradedMonoid_eq_of_cast","module":"Mathlib.NumberTheory.ModularForms.Basic","initialProofState":"Γ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\na b : GradedMonoid (ModularForm Γ)\nh : Eq a.fst b.fst\nh2 : Eq (ModularForm.mcast h a.snd) b.snd\n⊢ Eq a b","decl":"@[ext (iff := false)]\ntheorem gradedMonoid_eq_of_cast {Γ : Subgroup SL(2, ℤ)} {a b : GradedMonoid (ModularForm Γ)}\n    (h : a.fst = b.fst) (h2 : mcast h a.snd = b.snd) : a = b := by\n  obtain ⟨i, a⟩ := a\n  obtain ⟨j, b⟩ := b\n  cases h\n  exact congr_arg _ h2\n\n"}
