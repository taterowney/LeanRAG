{"name":"LinearMap.BilinForm.sum_left","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nα : Type u_7\nt : Finset α\ng : α → M\nw : M\n⊢ Eq ((B (t.sum fun i => g i)) w) (t.sum fun i => (B (g i)) w)","decl":"theorem sum_left {α} (t : Finset α) (g : α → M) (w : M) :\n    B (∑ i ∈ t, g i) w = ∑ i ∈ t, B (g i) w :=\n  B.map_sum₂ t g w\n\n"}
{"name":"LinearMap.BilinForm.sum_right","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nα : Type u_7\nt : Finset α\nw : M\ng : α → M\n⊢ Eq ((B w) (t.sum fun i => g i)) (t.sum fun i => (B w) (g i))","decl":"theorem sum_right {α} (t : Finset α) (w : M) (g : α → M) :\n    B w (∑ i ∈ t, g i) = ∑ i ∈ t, B w (g i) := map_sum _ _ _\n\n"}
{"name":"LinearMap.BilinForm.sum_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nα : Type u_7\nt : Finset α\nB : α → LinearMap.BilinForm R M\nv w : M\n⊢ Eq (((t.sum fun i => B i) v) w) (t.sum fun i => ((B i) v) w)","decl":"theorem sum_apply {α} (t : Finset α) (B : α → BilinForm R M) (v w : M) :\n    (∑ i ∈ t, B i) v w = ∑ i ∈ t, B i v w := by\n  simp only [coeFn_sum, Finset.sum_apply]\n\n"}
{"name":"LinearMap.BilinForm.toLin'Flip_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nA : LinearMap.BilinForm R M\nx : M\n⊢ Eq ⇑((LinearMap.BilinForm.toLinHomFlip A) x) fun y => (A y) x","decl":"theorem toLin'Flip_apply (A : BilinForm R M) (x : M) : toLinHomFlip (M := M) A x = fun y => A y x :=\n  rfl\n\n"}
{"name":"LinearMap.compBilinForm_apply_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nR' : Type u_7\ninst✝³ : CommSemiring R'\ninst✝² : Algebra R' R\ninst✝¹ : Module R' M\ninst✝ : IsScalarTower R' R M\nf : LinearMap (RingHom.id R') R R'\nB : LinearMap.BilinForm R M\na✝ m : M\n⊢ Eq (((f.compBilinForm B) a✝) m) (f ((B a✝) m))","decl":"/-- Apply a linear map on the output of a bilinear form. -/\n@[simps!]\ndef compBilinForm (f : R →ₗ[R'] R') (B : BilinForm R M) : BilinForm R' M :=\n  compr₂ (restrictScalars₁₂ R' R' B) f\n\n"}
{"name":"LinearMap.BilinForm.comp_comp","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nM' : Type w\ninst✝³ : AddCommMonoid M'\ninst✝² : Module R M'\nM'' : Type u_7\ninst✝¹ : AddCommMonoid M''\ninst✝ : Module R M''\nB : LinearMap.BilinForm R M''\nl r : LinearMap (RingHom.id R) M M'\nl' r' : LinearMap (RingHom.id R) M' M''\n⊢ Eq ((B.comp l' r').comp l r) (B.comp (l'.comp l) (r'.comp r))","decl":"theorem comp_comp {M'' : Type*} [AddCommMonoid M''] [Module R M''] (B : BilinForm R M'')\n    (l r : M →ₗ[R] M') (l' r' : M' →ₗ[R] M'') :\n    (B.comp l' r').comp l r = B.comp (l'.comp l) (r'.comp r) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.compLeft_compRight","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nl r : LinearMap (RingHom.id R) M M\n⊢ Eq ((B.compLeft l).compRight r) (B.comp l r)","decl":"@[simp]\ntheorem compLeft_compRight (B : BilinForm R M) (l r : M →ₗ[R] M) :\n    (B.compLeft l).compRight r = B.comp l r :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.compRight_compLeft","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nl r : LinearMap (RingHom.id R) M M\n⊢ Eq ((B.compRight r).compLeft l) (B.comp l r)","decl":"@[simp]\ntheorem compRight_compLeft (B : BilinForm R M) (l r : M →ₗ[R] M) :\n    (B.compRight r).compLeft l = B.comp l r :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.comp_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nM' : Type w\ninst✝¹ : AddCommMonoid M'\ninst✝ : Module R M'\nB : LinearMap.BilinForm R M'\nl r : LinearMap (RingHom.id R) M M'\nv w : M\n⊢ Eq (((B.comp l r) v) w) ((B (l v)) (r w))","decl":"@[simp]\ntheorem comp_apply (B : BilinForm R M') (l r : M →ₗ[R] M') (v w) : B.comp l r v w = B (l v) (r w) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.compLeft_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nf : LinearMap (RingHom.id R) M M\nv w : M\n⊢ Eq (((B.compLeft f) v) w) ((B (f v)) w)","decl":"@[simp]\ntheorem compLeft_apply (B : BilinForm R M) (f : M →ₗ[R] M) (v w) : B.compLeft f v w = B (f v) w :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.compRight_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nf : LinearMap (RingHom.id R) M M\nv w : M\n⊢ Eq (((B.compRight f) v) w) ((B v) (f w))","decl":"@[simp]\ntheorem compRight_apply (B : BilinForm R M) (f : M →ₗ[R] M) (v w) : B.compRight f v w = B v (f w) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.comp_id_left","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nr : LinearMap (RingHom.id R) M M\n⊢ Eq (B.comp LinearMap.id r) (B.compRight r)","decl":"@[simp]\ntheorem comp_id_left (B : BilinForm R M) (r : M →ₗ[R] M) :\n    B.comp LinearMap.id r = B.compRight r := by\n  ext\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.comp_id_right","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nl : LinearMap (RingHom.id R) M M\n⊢ Eq (B.comp l LinearMap.id) (B.compLeft l)","decl":"@[simp]\ntheorem comp_id_right (B : BilinForm R M) (l : M →ₗ[R] M) :\n    B.comp l LinearMap.id = B.compLeft l := by\n  ext\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.compLeft_id","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\n⊢ Eq (B.compLeft LinearMap.id) B","decl":"@[simp]\ntheorem compLeft_id (B : BilinForm R M) : B.compLeft LinearMap.id = B := by\n  ext\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.compRight_id","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\n⊢ Eq (B.compRight LinearMap.id) B","decl":"@[simp]\ntheorem compRight_id (B : BilinForm R M) : B.compRight LinearMap.id = B := by\n  ext\n  rfl\n\n-- Shortcut for `comp_id_{left,right}` followed by `comp{Right,Left}_id`,\n-- Needs higher priority to be applied\n"}
{"name":"LinearMap.BilinForm.comp_id_id","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\n⊢ Eq (B.comp LinearMap.id LinearMap.id) B","decl":"@[simp high]\ntheorem comp_id_id (B : BilinForm R M) : B.comp LinearMap.id LinearMap.id = B := by\n  ext\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.comp_inj","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nM' : Type w\ninst✝¹ : AddCommMonoid M'\ninst✝ : Module R M'\nB₁ B₂ : LinearMap.BilinForm R M'\nl r : LinearMap (RingHom.id R) M M'\nhₗ : Function.Surjective ⇑l\nhᵣ : Function.Surjective ⇑r\n⊢ Iff (Eq (B₁.comp l r) (B₂.comp l r)) (Eq B₁ B₂)","decl":"theorem comp_inj (B₁ B₂ : BilinForm R M') {l r : M →ₗ[R] M'} (hₗ : Function.Surjective l)\n    (hᵣ : Function.Surjective r) : B₁.comp l r = B₂.comp l r ↔ B₁ = B₂ := by\n  constructor <;> intro h\n  · -- B₁.comp l r = B₂.comp l r → B₁ = B₂\n    ext x y\n    cases' hₗ x with x' hx\n    subst hx\n    cases' hᵣ y with y' hy\n    subst hy\n    rw [← comp_apply, ← comp_apply, h]\n  · -- B₁ = B₂ → B₁.comp l r = B₂.comp l r\n    rw [h]\n\n"}
{"name":"LinearMap.BilinForm.congr_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nM' : Type u_7\ninst✝¹ : AddCommMonoid M'\ninst✝ : Module R M'\ne : LinearEquiv (RingHom.id R) M M'\nB : LinearMap.BilinForm R M\nx y : M'\n⊢ Eq ((((LinearMap.BilinForm.congr e) B) x) y) ((B (e.symm x)) (e.symm y))","decl":"@[simp]\ntheorem congr_apply (e : M ≃ₗ[R] M') (B : BilinForm R M) (x y : M') :\n    congr e B x y = B (e.symm x) (e.symm y) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.congr_symm","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nM' : Type u_7\ninst✝¹ : AddCommMonoid M'\ninst✝ : Module R M'\ne : LinearEquiv (RingHom.id R) M M'\n⊢ Eq (LinearMap.BilinForm.congr e).symm (LinearMap.BilinForm.congr e.symm)","decl":"@[simp]\ntheorem congr_symm (e : M ≃ₗ[R] M') : (congr e).symm = congr e.symm := by\n  ext\n  simp only [congr_apply, LinearEquiv.symm_symm]\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.congr_refl","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (LinearMap.BilinForm.congr (LinearEquiv.refl R M)) (LinearEquiv.refl R (LinearMap.BilinForm R M))","decl":"@[simp]\ntheorem congr_refl : congr (LinearEquiv.refl R M) = LinearEquiv.refl R _ :=\n  LinearEquiv.ext fun _ => ext₂ fun _ _ => rfl\n\n"}
{"name":"LinearMap.BilinForm.congr_trans","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nM' : Type u_7\nM'' : Type u_8\ninst✝³ : AddCommMonoid M'\ninst✝² : AddCommMonoid M''\ninst✝¹ : Module R M'\ninst✝ : Module R M''\ne : LinearEquiv (RingHom.id R) M M'\nf : LinearEquiv (RingHom.id R) M' M''\n⊢ Eq ((LinearMap.BilinForm.congr e).trans (LinearMap.BilinForm.congr f)) (LinearMap.BilinForm.congr (e.trans f))","decl":"theorem congr_trans (e : M ≃ₗ[R] M') (f : M' ≃ₗ[R] M'') :\n    (congr e).trans (congr f) = congr (e.trans f) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.congr_congr","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nM' : Type u_7\nM'' : Type u_8\ninst✝³ : AddCommMonoid M'\ninst✝² : AddCommMonoid M''\ninst✝¹ : Module R M'\ninst✝ : Module R M''\ne : LinearEquiv (RingHom.id R) M' M''\nf : LinearEquiv (RingHom.id R) M M'\nB : LinearMap.BilinForm R M\n⊢ Eq ((LinearMap.BilinForm.congr e) ((LinearMap.BilinForm.congr f) B)) ((LinearMap.BilinForm.congr (f.trans e)) B)","decl":"theorem congr_congr (e : M' ≃ₗ[R] M'') (f : M ≃ₗ[R] M') (B : BilinForm R M) :\n    congr e (congr f B) = congr (f.trans e) B :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.congr_comp","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nM' : Type u_7\nM'' : Type u_8\ninst✝³ : AddCommMonoid M'\ninst✝² : AddCommMonoid M''\ninst✝¹ : Module R M'\ninst✝ : Module R M''\ne : LinearEquiv (RingHom.id R) M M'\nB : LinearMap.BilinForm R M\nl r : LinearMap (RingHom.id R) M'' M'\n⊢ Eq (((LinearMap.BilinForm.congr e) B).comp l r) (B.comp ((↑e.symm).comp l) ((↑e.symm).comp r))","decl":"theorem congr_comp (e : M ≃ₗ[R] M') (B : BilinForm R M) (l r : M'' →ₗ[R] M') :\n    (congr e B).comp l r =\n      B.comp (LinearMap.comp (e.symm : M' →ₗ[R] M) l)\n        (LinearMap.comp (e.symm : M' →ₗ[R] M) r) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.comp_congr","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nM' : Type u_7\nM'' : Type u_8\ninst✝³ : AddCommMonoid M'\ninst✝² : AddCommMonoid M''\ninst✝¹ : Module R M'\ninst✝ : Module R M''\ne : LinearEquiv (RingHom.id R) M' M''\nB : LinearMap.BilinForm R M\nl r : LinearMap (RingHom.id R) M' M\n⊢ Eq ((LinearMap.BilinForm.congr e) (B.comp l r)) (B.comp (l.comp ↑e.symm) (r.comp ↑e.symm))","decl":"theorem comp_congr (e : M' ≃ₗ[R] M'') (B : BilinForm R M) (l r : M' →ₗ[R] M) :\n    congr e (B.comp l r) =\n      B.comp (l.comp (e.symm : M'' →ₗ[R] M')) (r.comp (e.symm : M'' →ₗ[R] M')) :=\n  rfl\n\n"}
{"name":"LinearEquiv.congrRight₂_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nN₁ : Type u_9\nN₂ : Type u_10\ninst✝³ : AddCommMonoid N₁\ninst✝² : AddCommMonoid N₂\ninst✝¹ : Module R N₁\ninst✝ : Module R N₂\ne : LinearEquiv (RingHom.id R) N₁ N₂\nB : LinearMap.BilinMap R M N₁\n⊢ Eq (e.congrRight₂ B) (LinearMap.compr₂ B ↑e)","decl":"@[simp]\ntheorem _root_.LinearEquiv.congrRight₂_apply (e : N₁ ≃ₗ[R] N₂) (B : BilinMap R M N₁) :\n    LinearEquiv.congrRight₂ e B = compr₂ B e := rfl\n\n"}
{"name":"LinearEquiv.congrRight₂_refl","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nN₁ : Type u_9\ninst✝¹ : AddCommMonoid N₁\ninst✝ : Module R N₁\n⊢ Eq (LinearEquiv.refl R N₁).congrRight₂ (LinearEquiv.refl R (LinearMap.BilinMap R M N₁))","decl":"@[simp]\ntheorem _root_.LinearEquiv.congrRight₂_refl :\n    LinearEquiv.congrRight₂ (.refl R N₁) = .refl R (BilinMap R M N₁) := rfl\n\n"}
{"name":"LinearEquiv.congrRight_symm","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nN₁ : Type u_9\nN₂ : Type u_10\ninst✝³ : AddCommMonoid N₁\ninst✝² : AddCommMonoid N₂\ninst✝¹ : Module R N₁\ninst✝ : Module R N₂\ne : LinearEquiv (RingHom.id R) N₁ N₂\n⊢ Eq e.congrRight₂.symm e.symm.congrRight₂","decl":"@[simp]\ntheorem _root_.LinearEquiv.congrRight_symm (e : N₁ ≃ₗ[R] N₂) :\n    (LinearEquiv.congrRight₂ e (M := M)).symm = LinearEquiv.congrRight₂ e.symm :=\n  rfl\n\n"}
{"name":"LinearEquiv.congrRight₂_trans","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : Module R M\nN₁ : Type u_9\nN₂ : Type u_10\nN₃ : Type u_11\ninst✝⁵ : AddCommMonoid N₁\ninst✝⁴ : AddCommMonoid N₂\ninst✝³ : AddCommMonoid N₃\ninst✝² : Module R N₁\ninst✝¹ : Module R N₂\ninst✝ : Module R N₃\ne₁₂ : LinearEquiv (RingHom.id R) N₁ N₂\ne₂₃ : LinearEquiv (RingHom.id R) N₂ N₃\n⊢ Eq (e₁₂.trans e₂₃).congrRight₂ (e₁₂.congrRight₂.trans e₂₃.congrRight₂)","decl":"theorem _root_.LinearEquiv.congrRight₂_trans (e₁₂ : N₁ ≃ₗ[R] N₂) (e₂₃ : N₂ ≃ₗ[R] N₃) :\n    LinearEquiv.congrRight₂ (M := M) (e₁₂ ≪≫ₗ e₂₃) =\n    LinearEquiv.congrRight₂ e₁₂ ≪≫ₗ LinearEquiv.congrRight₂ e₂₃ :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.linMulLin_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nf g : LinearMap (RingHom.id R) M R\nx y : M\n⊢ Eq (((LinearMap.BilinForm.linMulLin f g) x) y) (HMul.hMul (f x) (g y))","decl":"@[simp]\ntheorem linMulLin_apply (x y) : linMulLin f g x y = f x * g y :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.linMulLin_comp","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nM' : Type u_7\ninst✝¹ : AddCommMonoid M'\ninst✝ : Module R M'\nf g : LinearMap (RingHom.id R) M R\nl r : LinearMap (RingHom.id R) M' M\n⊢ Eq ((LinearMap.BilinForm.linMulLin f g).comp l r) (LinearMap.BilinForm.linMulLin (f.comp l) (g.comp r))","decl":"@[simp]\ntheorem linMulLin_comp (l r : M' →ₗ[R] M) :\n    (linMulLin f g).comp l r = linMulLin (f.comp l) (g.comp r) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.linMulLin_compLeft","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nf g : LinearMap (RingHom.id R) M R\nl : LinearMap (RingHom.id R) M M\n⊢ Eq ((LinearMap.BilinForm.linMulLin f g).compLeft l) (LinearMap.BilinForm.linMulLin (f.comp l) g)","decl":"@[simp]\ntheorem linMulLin_compLeft (l : M →ₗ[R] M) :\n    (linMulLin f g).compLeft l = linMulLin (f.comp l) g :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.linMulLin_compRight","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nf g : LinearMap (RingHom.id R) M R\nr : LinearMap (RingHom.id R) M M\n⊢ Eq ((LinearMap.BilinForm.linMulLin f g).compRight r) (LinearMap.BilinForm.linMulLin f (g.comp r))","decl":"@[simp]\ntheorem linMulLin_compRight (r : M →ₗ[R] M) :\n    (linMulLin f g).compRight r = linMulLin f (g.comp r) :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.ext_basis","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB F₂ : LinearMap.BilinForm R M\nι : Type u_9\nb : Basis ι R M\nh : ∀ (i j : ι), Eq ((B (b i)) (b j)) ((F₂ (b i)) (b j))\n⊢ Eq B F₂","decl":"/-- Two bilinear forms are equal when they are equal on all basis vectors. -/\ntheorem ext_basis (h : ∀ i j, B (b i) (b j) = F₂ (b i) (b j)) : B = F₂ :=\n  b.ext fun i => b.ext fun j => h i j\n\n"}
{"name":"LinearMap.BilinForm.sum_repr_mul_repr_mul","module":"Mathlib.LinearAlgebra.BilinearForm.Hom","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nι : Type u_9\nb : Basis ι R M\nx y : M\n⊢ Eq ((b.repr x).sum fun i xi => (b.repr y).sum fun j yj => HSMul.hSMul xi (HSMul.hSMul yj ((B (b i)) (b j)))) ((B x) y)","decl":"/-- Write out `B x y` as a sum over `B (b i) (b j)` if `b` is a basis. -/\ntheorem sum_repr_mul_repr_mul (x y : M) :\n    ((b.repr x).sum fun i xi => (b.repr y).sum fun j yj => xi • yj • B (b i) (b j)) = B x y := by\n  conv_rhs => rw [← b.linearCombination_repr x, ← b.linearCombination_repr y]\n  simp_rw [Finsupp.linearCombination_apply, Finsupp.sum, sum_left, sum_right, smul_left, smul_right,\n    smul_eq_mul]\n\n"}
