{"name":"AddChar.directSum_toFun","module":"Mathlib.Algebra.DirectSum.AddChar","initialProofState":"ι : Type u_1\nR : Type u_2\nG : ι → Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → AddCommGroup (G i)\ninst✝ : CommMonoid R\nψ : (i : ι) → AddChar (G i) R\na✝ : DirectSum ι fun i => G i\n⊢ Eq ((AddChar.directSum ψ) a✝) ((DirectSum.toAddMonoid fun i => AddChar.toAddMonoidHomEquiv (ψ i)) a✝)","decl":"/-- Direct sum of additive characters. -/\n@[simps!]\ndef directSum (ψ : ∀ i, AddChar (G i) R) : AddChar (⨁ i, G i) R :=\n  toAddMonoidHomEquiv.symm <| DirectSum.toAddMonoid fun i ↦ toAddMonoidHomEquiv (ψ i)\n\n"}
{"name":"AddChar.directSum_injective","module":"Mathlib.Algebra.DirectSum.AddChar","initialProofState":"ι : Type u_1\nR : Type u_2\nG : ι → Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → AddCommGroup (G i)\ninst✝ : CommMonoid R\n⊢ Function.Injective AddChar.directSum","decl":"lemma directSum_injective :\n    Injective (directSum : (∀ i, AddChar (G i) R) → AddChar (⨁ i, G i) R) := by\n  refine toAddMonoidHomEquiv.symm.injective.comp <| DirectSum.toAddMonoid_injective.comp ?_\n  rintro ψ χ h\n  simpa [funext_iff] using h\n\n"}
