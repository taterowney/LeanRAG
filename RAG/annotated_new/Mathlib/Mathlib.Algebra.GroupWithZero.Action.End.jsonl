{"name":"AddMonoid.End.smul_def","module":"Mathlib.Algebra.GroupWithZero.Action.End","initialProofState":"α : Type u_4\ninst✝ : AddMonoid α\nf : AddMonoid.End α\na : α\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp]\ntheorem AddMonoid.End.smul_def [AddMonoid α] (f : AddMonoid.End α) (a : α) : f • a = f a :=\n  rfl\n\n"}
{"name":"AddMonoid.End.applyFaithfulSMul","module":"Mathlib.Algebra.GroupWithZero.Action.End","initialProofState":"α : Type u_4\ninst✝ : AddMonoid α\n⊢ FaithfulSMul (AddMonoid.End α) α","decl":"/-- `AddMonoid.End.applyDistribMulAction` is faithful. -/\ninstance AddMonoid.End.applyFaithfulSMul [AddMonoid α] :\n    FaithfulSMul (AddMonoid.End α) α :=\n  ⟨fun {_ _ h} => AddMonoidHom.ext h⟩\n\n"}
{"name":"MulDistribMulAction.toMonoidEnd_apply","module":"Mathlib.Algebra.GroupWithZero.Action.End","initialProofState":"M : Type u_1\nA : Type u_3\ninst✝² : Monoid M\ninst✝¹ : Monoid A\ninst✝ : MulDistribMulAction M A\nr : M\n⊢ Eq ((MulDistribMulAction.toMonoidEnd M A) r) (MulDistribMulAction.toMonoidHom A r)","decl":"variable (M A) in\n/-- Each element of the monoid defines a monoid homomorphism. -/\n@[simps]\ndef MulDistribMulAction.toMonoidEnd [Monoid M] [Monoid A] [MulDistribMulAction M A] :\n    M →* Monoid.End A where\n  toFun := MulDistribMulAction.toMonoidHom A\n  map_one' := MonoidHom.ext <| one_smul M\n  map_mul' x y := MonoidHom.ext <| mul_smul x y\n"}
