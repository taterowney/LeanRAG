{"name":"finGaloisGroupMap.map_id","module":"Mathlib.FieldTheory.Galois.Profinite","initialProofState":"k : Type u_1\nK : Type u_2\ninst‚úù¬≤ : Field k\ninst‚úù¬π : Field K\ninst‚úù : Algebra k K\nL : Opposite (FiniteGaloisIntermediateField k K)\n‚ä¢ Eq (finGaloisGroupMap (CategoryTheory.CategoryStruct.id L)) (CategoryTheory.CategoryStruct.id (Opposite.unop L).finGaloisGroup)","decl":"@[simp]\nlemma map_id (L : (FiniteGaloisIntermediateField k K)·µí·µñ) :\n    (finGaloisGroupMap (ùüô L)) = ùüô L.unop.finGaloisGroup :=\n  ConcreteCategory.ext (AlgEquiv.restrictNormalHom_id _ _)\n\n"}
{"name":"finGaloisGroupMap.map_comp","module":"Mathlib.FieldTheory.Galois.Profinite","initialProofState":"k : Type u_1\nK : Type u_2\ninst‚úù¬≤ : Field k\ninst‚úù¬π : Field K\ninst‚úù : Algebra k K\nL‚ÇÅ L‚ÇÇ L‚ÇÉ : Opposite (FiniteGaloisIntermediateField k K)\nf : Quiver.Hom L‚ÇÅ L‚ÇÇ\ng : Quiver.Hom L‚ÇÇ L‚ÇÉ\n‚ä¢ Eq (finGaloisGroupMap (CategoryTheory.CategoryStruct.comp f g)) (CategoryTheory.CategoryStruct.comp (finGaloisGroupMap f) (finGaloisGroupMap g))","decl":"@[simp]\nlemma map_comp {L‚ÇÅ L‚ÇÇ L‚ÇÉ : (FiniteGaloisIntermediateField k K)·µí·µñ} (f : L‚ÇÅ ‚ü∂ L‚ÇÇ) (g : L‚ÇÇ ‚ü∂ L‚ÇÉ) :\n    finGaloisGroupMap (f ‚â´ g) = finGaloisGroupMap f ‚â´ finGaloisGroupMap g := by\n  iterate 2\n    induction L‚ÇÅ with | _ L‚ÇÅ => ?_\n    induction L‚ÇÇ with | _ L‚ÇÇ => ?_\n    induction L‚ÇÉ with | _ L‚ÇÉ => ?_\n  letI : Algebra L‚ÇÉ L‚ÇÇ := RingHom.toAlgebra (Subsemiring.inclusion g.unop.le)\n  letI : Algebra L‚ÇÇ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion f.unop.le)\n  letI : Algebra L‚ÇÉ L‚ÇÅ := RingHom.toAlgebra (Subsemiring.inclusion (g.unop.le.trans f.unop.le))\n  haveI : IsScalarTower k L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl\n  haveI : IsScalarTower k L‚ÇÉ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl\n  haveI : IsScalarTower k L‚ÇÉ L‚ÇÇ := IsScalarTower.of_algebraMap_eq' rfl\n  haveI : IsScalarTower L‚ÇÉ L‚ÇÇ L‚ÇÅ := IsScalarTower.of_algebraMap_eq' rfl\n  ext : 1\n  apply IsScalarTower.AlgEquiv.restrictNormalHom_comp k L‚ÇÉ L‚ÇÇ L‚ÇÅ\n\n"}
