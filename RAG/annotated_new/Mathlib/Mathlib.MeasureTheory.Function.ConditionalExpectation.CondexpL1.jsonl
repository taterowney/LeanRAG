{"name":"MeasureTheory.condExpIndL1Fin_ae_eq_condExpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑(MeasureTheory.condExpIndL1Fin hm hs hμs x) ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)","decl":"theorem condExpIndL1Fin_ae_eq_condExpIndSMul (hm : m ≤ m0) [SigmaFinite (μ.trim hm)]\n    (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : G) :\n    condExpIndL1Fin hm hs hμs x =ᵐ[μ] condExpIndSMul hm hs hμs x :=\n  (integrable_condExpIndSMul hm hs hμs x).coeFn_toL1\n\n"}
{"name":"MeasureTheory.condexpIndL1Fin_ae_eq_condexpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑(MeasureTheory.condExpIndL1Fin hm hs hμs x) ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpIndL1Fin_ae_eq_condexpIndSMul := condExpIndL1Fin_ae_eq_condExpIndSMul\n\n"}
{"name":"MeasureTheory.condExpIndL1Fin_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx y : G\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm hs hμs (HAdd.hAdd x y)) (HAdd.hAdd (MeasureTheory.condExpIndL1Fin hm hs hμs x) (MeasureTheory.condExpIndL1Fin hm hs hμs y))","decl":"theorem condExpIndL1Fin_add (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x y : G) :\n    condExpIndL1Fin hm hs hμs (x + y) =\n    condExpIndL1Fin hm hs hμs x + condExpIndL1Fin hm hs hμs y := by\n  ext1\n  refine (Memℒp.coeFn_toLp q).trans ?_\n  refine EventuallyEq.trans ?_ (Lp.coeFn_add _ _).symm\n  refine EventuallyEq.trans ?_\n    (EventuallyEq.add (Memℒp.coeFn_toLp q).symm (Memℒp.coeFn_toLp q).symm)\n  rw [condExpIndSMul_add]\n  refine (Lp.coeFn_add _ _).trans (Eventually.of_forall fun a => ?_)\n  rfl\n\n"}
{"name":"MeasureTheory.condexpIndL1Fin_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx y : G\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm hs hμs (HAdd.hAdd x y)) (HAdd.hAdd (MeasureTheory.condExpIndL1Fin hm hs hμs x) (MeasureTheory.condExpIndL1Fin hm hs hμs y))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndL1Fin_add := condExpIndL1Fin_add\n\n"}
{"name":"MeasureTheory.condExpIndL1Fin_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : Real\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1Fin hm hs hμs x))","decl":"theorem condExpIndL1Fin_smul (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (c : ℝ) (x : G) :\n    condExpIndL1Fin hm hs hμs (c • x) = c • condExpIndL1Fin hm hs hμs x := by\n  ext1\n  refine (Memℒp.coeFn_toLp q).trans ?_\n  refine EventuallyEq.trans ?_ (Lp.coeFn_smul _ _).symm\n  rw [condExpIndSMul_smul hs hμs c x]\n  refine (Lp.coeFn_smul _ _).trans ?_\n  refine (condExpIndL1Fin_ae_eq_condExpIndSMul hm hs hμs x).mono fun y hy => ?_\n  simp only [Pi.smul_apply, hy]\n\n"}
{"name":"MeasureTheory.condexpIndL1Fin_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : Real\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1Fin hm hs hμs x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndL1Fin_smul := condExpIndL1Fin_smul\n\n"}
{"name":"MeasureTheory.condExpIndL1Fin_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF : Type u_2\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝² : MeasureTheory.SigmaFinite (μ.trim hm)\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : 𝕜\nx : F\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1Fin hm hs hμs x))","decl":"theorem condExpIndL1Fin_smul' [NormedSpace ℝ F] [SMulCommClass ℝ 𝕜 F] (hs : MeasurableSet s)\n    (hμs : μ s ≠ ∞) (c : 𝕜) (x : F) :\n    condExpIndL1Fin hm hs hμs (c • x) = c • condExpIndL1Fin hm hs hμs x := by\n  ext1\n  refine (Memℒp.coeFn_toLp q).trans ?_\n  refine EventuallyEq.trans ?_ (Lp.coeFn_smul _ _).symm\n  rw [condExpIndSMul_smul' hs hμs c x]\n  refine (Lp.coeFn_smul _ _).trans ?_\n  refine (condExpIndL1Fin_ae_eq_condExpIndSMul hm hs hμs x).mono fun y hy => ?_\n  simp only [Pi.smul_apply, hy]\n\n"}
{"name":"MeasureTheory.condexpIndL1Fin_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF : Type u_2\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝² : MeasureTheory.SigmaFinite (μ.trim hm)\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : 𝕜\nx : F\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1Fin hm hs hμs x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndL1Fin_smul' := condExpIndL1Fin_smul'\n\n"}
{"name":"MeasureTheory.norm_condExpIndL1Fin_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ LE.le (Norm.norm (MeasureTheory.condExpIndL1Fin hm hs hμs x)) (HMul.hMul (μ s).toReal (Norm.norm x))","decl":"theorem norm_condExpIndL1Fin_le (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : G) :\n    ‖condExpIndL1Fin hm hs hμs x‖ ≤ (μ s).toReal * ‖x‖ := by\n  rw [L1.norm_eq_integral_norm, ← ENNReal.toReal_ofReal (norm_nonneg x), ← ENNReal.toReal_mul,\n    ← ENNReal.ofReal_le_iff_le_toReal (ENNReal.mul_ne_top hμs ENNReal.ofReal_ne_top),\n    ofReal_integral_norm_eq_lintegral_enorm]\n  swap; · rw [← memℒp_one_iff_integrable]; exact Lp.memℒp _\n  have h_eq :\n    ∫⁻ a, ‖condExpIndL1Fin hm hs hμs x a‖ₑ ∂μ = ∫⁻ a, ‖condExpIndSMul hm hs hμs x a‖ₑ ∂μ := by\n    refine lintegral_congr_ae ?_\n    refine (condExpIndL1Fin_ae_eq_condExpIndSMul hm hs hμs x).mono fun z hz => ?_\n    dsimp only\n    rw [hz]\n  rw [h_eq, ofReal_norm_eq_enorm]\n  exact lintegral_nnnorm_condExpIndSMul_le hm hs hμs x\n\n"}
{"name":"MeasureTheory.norm_condexpIndL1Fin_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ LE.le (Norm.norm (MeasureTheory.condExpIndL1Fin hm hs hμs x)) (HMul.hMul (μ s).toReal (Norm.norm x))","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpIndL1Fin_le := norm_condExpIndL1Fin_le\n\n"}
{"name":"MeasureTheory.condExpIndL1Fin_disjoint_union","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm ⋯ ⋯ x) (HAdd.hAdd (MeasureTheory.condExpIndL1Fin hm hs hμs x) (MeasureTheory.condExpIndL1Fin hm ht hμt x))","decl":"theorem condExpIndL1Fin_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : μ s ≠ ∞)\n    (hμt : μ t ≠ ∞) (hst : Disjoint s t) (x : G) :\n    condExpIndL1Fin hm (hs.union ht) ((measure_union_le s t).trans_lt\n      (lt_top_iff_ne_top.mpr (ENNReal.add_ne_top.mpr ⟨hμs, hμt⟩))).ne x =\n    condExpIndL1Fin hm hs hμs x + condExpIndL1Fin hm ht hμt x := by\n  ext1\n  have hμst := measure_union_ne_top hμs hμt\n  refine (condExpIndL1Fin_ae_eq_condExpIndSMul hm (hs.union ht) hμst x).trans ?_\n  refine EventuallyEq.trans ?_ (Lp.coeFn_add _ _).symm\n  have hs_eq := condExpIndL1Fin_ae_eq_condExpIndSMul hm hs hμs x\n  have ht_eq := condExpIndL1Fin_ae_eq_condExpIndSMul hm ht hμt x\n  refine EventuallyEq.trans ?_ (EventuallyEq.add hs_eq.symm ht_eq.symm)\n  rw [condExpIndSMul]\n  rw [indicatorConstLp_disjoint_union hs ht hμs hμt hst (1 : ℝ)]\n  rw [(condExpL2 ℝ ℝ hm).map_add]\n  push_cast\n  rw [((toSpanSingleton ℝ x).compLpL 2 μ).map_add]\n  refine (Lp.coeFn_add _ _).trans ?_\n  filter_upwards with y using rfl\n\n"}
{"name":"MeasureTheory.condexpIndL1Fin_disjoint_union","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1Fin hm ⋯ ⋯ x) (HAdd.hAdd (MeasureTheory.condExpIndL1Fin hm hs hμs x) (MeasureTheory.condExpIndL1Fin hm ht hμt x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpIndL1Fin_disjoint_union := condExpIndL1Fin_disjoint_union\n\n"}
{"name":"MeasureTheory.condExpIndL1_of_measurableSet_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s x) (MeasureTheory.condExpIndL1Fin hm hs hμs x)","decl":"theorem condExpIndL1_of_measurableSet_of_measure_ne_top (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (x : G) : condExpIndL1 hm μ s x = condExpIndL1Fin hm hs hμs x := by\n  simp only [condExpIndL1, And.intro hs hμs, dif_pos, Ne, not_false_iff, and_self_iff]\n\n"}
{"name":"MeasureTheory.condexpIndL1_of_measurableSet_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s x) (MeasureTheory.condExpIndL1Fin hm hs hμs x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpIndL1_of_measurableSet_of_measure_ne_top :=\n  condExpIndL1_of_measurableSet_of_measure_ne_top\n\n"}
{"name":"MeasureTheory.condExpIndL1_of_measure_eq_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhμs : Eq (μ s) Top.top\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s x) 0","decl":"theorem condExpIndL1_of_measure_eq_top (hμs : μ s = ∞) (x : G) : condExpIndL1 hm μ s x = 0 := by\n  simp only [condExpIndL1, hμs, eq_self_iff_true, not_true, Ne, dif_neg, not_false_iff,\n    and_false]\n\n"}
{"name":"MeasureTheory.condexpIndL1_of_measure_eq_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhμs : Eq (μ s) Top.top\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s x) 0","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpIndL1_of_measure_eq_top := condExpIndL1_of_measure_eq_top\n\n"}
{"name":"MeasureTheory.condExpIndL1_of_not_measurableSet","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : Not (MeasurableSet s)\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s x) 0","decl":"theorem condExpIndL1_of_not_measurableSet (hs : ¬MeasurableSet s) (x : G) :\n    condExpIndL1 hm μ s x = 0 := by\n  simp only [condExpIndL1, hs, dif_neg, not_false_iff, false_and]\n\n"}
{"name":"MeasureTheory.condexpIndL1_of_not_measurableSet","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : Not (MeasurableSet s)\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s x) 0","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpIndL1_of_not_measurableSet := condExpIndL1_of_not_measurableSet\n\n"}
{"name":"MeasureTheory.condExpIndL1_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nx y : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s (HAdd.hAdd x y)) (HAdd.hAdd (MeasureTheory.condExpIndL1 hm μ s x) (MeasureTheory.condExpIndL1 hm μ s y))","decl":"theorem condExpIndL1_add (x y : G) :\n    condExpIndL1 hm μ s (x + y) = condExpIndL1 hm μ s x + condExpIndL1 hm μ s y := by\n  by_cases hs : MeasurableSet s\n  swap; · simp_rw [condExpIndL1_of_not_measurableSet hs]; rw [zero_add]\n  by_cases hμs : μ s = ∞\n  · simp_rw [condExpIndL1_of_measure_eq_top hμs]; rw [zero_add]\n  · simp_rw [condExpIndL1_of_measurableSet_of_measure_ne_top hs hμs]\n    exact condExpIndL1Fin_add hs hμs x y\n\n"}
{"name":"MeasureTheory.condexpIndL1_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nx y : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s (HAdd.hAdd x y)) (HAdd.hAdd (MeasureTheory.condExpIndL1 hm μ s x) (MeasureTheory.condExpIndL1 hm μ s y))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndL1_add := condExpIndL1_add\n\n"}
{"name":"MeasureTheory.condExpIndL1_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nc : Real\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1 hm μ s x))","decl":"theorem condExpIndL1_smul (c : ℝ) (x : G) :\n    condExpIndL1 hm μ s (c • x) = c • condExpIndL1 hm μ s x := by\n  by_cases hs : MeasurableSet s\n  swap; · simp_rw [condExpIndL1_of_not_measurableSet hs]; rw [smul_zero]\n  by_cases hμs : μ s = ∞\n  · simp_rw [condExpIndL1_of_measure_eq_top hμs]; rw [smul_zero]\n  · simp_rw [condExpIndL1_of_measurableSet_of_measure_ne_top hs hμs]\n    exact condExpIndL1Fin_smul hs hμs c x\n\n"}
{"name":"MeasureTheory.condexpIndL1_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nc : Real\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1 hm μ s x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndL1_smul := condExpIndL1_smul\n\n"}
{"name":"MeasureTheory.condExpIndL1_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF : Type u_2\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝² : MeasureTheory.SigmaFinite (μ.trim hm)\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nc : 𝕜\nx : F\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1 hm μ s x))","decl":"theorem condExpIndL1_smul' [NormedSpace ℝ F] [SMulCommClass ℝ 𝕜 F] (c : 𝕜) (x : F) :\n    condExpIndL1 hm μ s (c • x) = c • condExpIndL1 hm μ s x := by\n  by_cases hs : MeasurableSet s\n  swap; · simp_rw [condExpIndL1_of_not_measurableSet hs]; rw [smul_zero]\n  by_cases hμs : μ s = ∞\n  · simp_rw [condExpIndL1_of_measure_eq_top hμs]; rw [smul_zero]\n  · simp_rw [condExpIndL1_of_measurableSet_of_measure_ne_top hs hμs]\n    exact condExpIndL1Fin_smul' hs hμs c x\n\n"}
{"name":"MeasureTheory.condexpIndL1_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF : Type u_2\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝² : MeasureTheory.SigmaFinite (μ.trim hm)\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nc : 𝕜\nx : F\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ s (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndL1 hm μ s x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndL1_smul' := condExpIndL1_smul'\n\n"}
{"name":"MeasureTheory.norm_condExpIndL1_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nx : G\n⊢ LE.le (Norm.norm (MeasureTheory.condExpIndL1 hm μ s x)) (HMul.hMul (μ s).toReal (Norm.norm x))","decl":"theorem norm_condExpIndL1_le (x : G) : ‖condExpIndL1 hm μ s x‖ ≤ (μ s).toReal * ‖x‖ := by\n  by_cases hs : MeasurableSet s\n  swap\n  · simp_rw [condExpIndL1_of_not_measurableSet hs]; rw [Lp.norm_zero]\n    exact mul_nonneg ENNReal.toReal_nonneg (norm_nonneg _)\n  by_cases hμs : μ s = ∞\n  · rw [condExpIndL1_of_measure_eq_top hμs x, Lp.norm_zero]\n    exact mul_nonneg ENNReal.toReal_nonneg (norm_nonneg _)\n  · rw [condExpIndL1_of_measurableSet_of_measure_ne_top hs hμs x]\n    exact norm_condExpIndL1Fin_le hs hμs x\n\n"}
{"name":"MeasureTheory.norm_condexpIndL1_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nx : G\n⊢ LE.le (Norm.norm (MeasureTheory.condExpIndL1 hm μ s x)) (HMul.hMul (μ s).toReal (Norm.norm x))","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpIndL1_le := norm_condExpIndL1_le\n\n"}
{"name":"MeasureTheory.continuous_condExpIndL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Continuous fun x => MeasureTheory.condExpIndL1 hm μ s x","decl":"theorem continuous_condExpIndL1 : Continuous fun x : G => condExpIndL1 hm μ s x :=\n  continuous_of_linear_of_bound condExpIndL1_add condExpIndL1_smul norm_condExpIndL1_le\n\n"}
{"name":"MeasureTheory.continuous_condexpIndL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Continuous fun x => MeasureTheory.condExpIndL1 hm μ s x","decl":"@[deprecated (since := \"2025-01-21\")] alias continuous_condexpIndL1 := continuous_condExpIndL1\n\n"}
{"name":"MeasureTheory.condExpIndL1_disjoint_union","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ (Union.union s t) x) (HAdd.hAdd (MeasureTheory.condExpIndL1 hm μ s x) (MeasureTheory.condExpIndL1 hm μ t x))","decl":"theorem condExpIndL1_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : μ s ≠ ∞)\n    (hμt : μ t ≠ ∞) (hst : Disjoint s t) (x : G) :\n    condExpIndL1 hm μ (s ∪ t) x = condExpIndL1 hm μ s x + condExpIndL1 hm μ t x := by\n  have hμst : μ (s ∪ t) ≠ ∞ :=\n    ((measure_union_le s t).trans_lt (lt_top_iff_ne_top.mpr (ENNReal.add_ne_top.mpr ⟨hμs, hμt⟩))).ne\n  rw [condExpIndL1_of_measurableSet_of_measure_ne_top hs hμs x,\n    condExpIndL1_of_measurableSet_of_measure_ne_top ht hμt x,\n    condExpIndL1_of_measurableSet_of_measure_ne_top (hs.union ht) hμst x]\n  exact condExpIndL1Fin_disjoint_union hs ht hμs hμt hst x\n\n"}
{"name":"MeasureTheory.condexpIndL1_disjoint_union","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\nx : G\n⊢ Eq (MeasureTheory.condExpIndL1 hm μ (Union.union s t) x) (HAdd.hAdd (MeasureTheory.condExpIndL1 hm μ s x) (MeasureTheory.condExpIndL1 hm μ t x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpIndL1_disjoint_union := condExpIndL1_disjoint_union\n\n"}
{"name":"MeasureTheory.condExpInd_ae_eq_condExpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑((MeasureTheory.condExpInd G hm μ s) x) ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)","decl":"theorem condExpInd_ae_eq_condExpIndSMul (hm : m ≤ m0) [SigmaFinite (μ.trim hm)]\n    (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : G) :\n    condExpInd G hm μ s x =ᵐ[μ] condExpIndSMul hm hs hμs x := by\n  refine EventuallyEq.trans ?_ (condExpIndL1Fin_ae_eq_condExpIndSMul hm hs hμs x)\n  simp [condExpInd, condExpIndL1, hs, hμs]\n\n"}
{"name":"MeasureTheory.condexpInd_ae_eq_condexpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑((MeasureTheory.condExpInd G hm μ s) x) ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpInd_ae_eq_condexpIndSMul := condExpInd_ae_eq_condExpIndSMul\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_condExpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpInd G hm μ s) x)) μ","decl":"theorem aestronglyMeasurable_condExpInd (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : G) :\n    AEStronglyMeasurable[m] (condExpInd G hm μ s x) μ :=\n  (aestronglyMeasurable_condExpIndSMul hm hs hμs x).congr\n    (condExpInd_ae_eq_condExpIndSMul hm hs hμs x).symm\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condExpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpInd G hm μ s) x)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aestronglyMeasurable'_condExpInd := aestronglyMeasurable_condExpInd\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condexpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpInd G hm μ s) x)) μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias aestronglyMeasurable'_condexpInd := aestronglyMeasurable_condExpInd\n\n"}
{"name":"MeasureTheory.condExpInd_empty","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.condExpInd G hm μ EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem condExpInd_empty : condExpInd G hm μ ∅ = (0 : G →L[ℝ] α →₁[μ] G) := by\n  ext1 x\n  ext1\n  refine (condExpInd_ae_eq_condExpIndSMul hm MeasurableSet.empty (by simp) x).trans ?_\n  rw [condExpIndSMul_empty]\n  refine (Lp.coeFn_zero G 2 μ).trans ?_\n  refine EventuallyEq.trans ?_ (Lp.coeFn_zero G 1 μ).symm\n  rfl\n\n"}
{"name":"MeasureTheory.condexpInd_empty","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.condExpInd G hm μ EmptyCollection.emptyCollection) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpInd_empty := condExpInd_empty\n\n"}
{"name":"MeasureTheory.condExpInd_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF : Type u_2\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝² : MeasureTheory.SigmaFinite (μ.trim hm)\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nc : 𝕜\nx : F\n⊢ Eq ((MeasureTheory.condExpInd F hm μ s) (HSMul.hSMul c x)) (HSMul.hSMul c ((MeasureTheory.condExpInd F hm μ s) x))","decl":"theorem condExpInd_smul' [NormedSpace ℝ F] [SMulCommClass ℝ 𝕜 F] (c : 𝕜) (x : F) :\n    condExpInd F hm μ s (c • x) = c • condExpInd F hm μ s x :=\n  condExpIndL1_smul' c x\n\n"}
{"name":"MeasureTheory.condexpInd_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF : Type u_2\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝² : MeasureTheory.SigmaFinite (μ.trim hm)\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nc : 𝕜\nx : F\n⊢ Eq ((MeasureTheory.condExpInd F hm μ s) (HSMul.hSMul c x)) (HSMul.hSMul c ((MeasureTheory.condExpInd F hm μ s) x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpInd_smul' := condExpInd_smul'\n\n"}
{"name":"MeasureTheory.norm_condExpInd_apply_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nx : G\n⊢ LE.le (Norm.norm ((MeasureTheory.condExpInd G hm μ s) x)) (HMul.hMul (μ s).toReal (Norm.norm x))","decl":"theorem norm_condExpInd_apply_le (x : G) : ‖condExpInd G hm μ s x‖ ≤ (μ s).toReal * ‖x‖ :=\n  norm_condExpIndL1_le x\n\n"}
{"name":"MeasureTheory.norm_condexpInd_apply_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nx : G\n⊢ LE.le (Norm.norm ((MeasureTheory.condExpInd G hm μ s) x)) (HMul.hMul (μ s).toReal (Norm.norm x))","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpInd_apply_le := norm_condExpInd_apply_le\n\n"}
{"name":"MeasureTheory.norm_condExpInd_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ LE.le (Norm.norm (MeasureTheory.condExpInd G hm μ s)) (μ s).toReal","decl":"theorem norm_condExpInd_le : ‖(condExpInd G hm μ s : G →L[ℝ] α →₁[μ] G)‖ ≤ (μ s).toReal :=\n  ContinuousLinearMap.opNorm_le_bound _ ENNReal.toReal_nonneg norm_condExpInd_apply_le\n\n"}
{"name":"MeasureTheory.norm_condexpInd_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ LE.le (Norm.norm (MeasureTheory.condExpInd G hm μ s)) (μ s).toReal","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpInd_le := norm_condExpInd_le\n\n"}
{"name":"MeasureTheory.condExpInd_disjoint_union_apply","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\nx : G\n⊢ Eq ((MeasureTheory.condExpInd G hm μ (Union.union s t)) x) (HAdd.hAdd ((MeasureTheory.condExpInd G hm μ s) x) ((MeasureTheory.condExpInd G hm μ t) x))","decl":"theorem condExpInd_disjoint_union_apply (hs : MeasurableSet s) (ht : MeasurableSet t)\n    (hμs : μ s ≠ ∞) (hμt : μ t ≠ ∞) (hst : Disjoint s t) (x : G) :\n    condExpInd G hm μ (s ∪ t) x = condExpInd G hm μ s x + condExpInd G hm μ t x :=\n  condExpIndL1_disjoint_union hs ht hμs hμt hst x\n\n"}
{"name":"MeasureTheory.condexpInd_disjoint_union_apply","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\nx : G\n⊢ Eq ((MeasureTheory.condExpInd G hm μ (Union.union s t)) x) (HAdd.hAdd ((MeasureTheory.condExpInd G hm μ s) x) ((MeasureTheory.condExpInd G hm μ t) x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpInd_disjoint_union_apply := condExpInd_disjoint_union_apply\n\n"}
{"name":"MeasureTheory.condExpInd_disjoint_union","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\n⊢ Eq (MeasureTheory.condExpInd G hm μ (Union.union s t)) (HAdd.hAdd (MeasureTheory.condExpInd G hm μ s) (MeasureTheory.condExpInd G hm μ t))","decl":"theorem condExpInd_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hμs : μ s ≠ ∞)\n    (hμt : μ t ≠ ∞) (hst : Disjoint s t) : (condExpInd G hm μ (s ∪ t) : G →L[ℝ] α →₁[μ] G) =\n    condExpInd G hm μ s + condExpInd G hm μ t := by\n  ext1 x; push_cast; exact condExpInd_disjoint_union_apply hs ht hμs hμt hst x\n\n"}
{"name":"MeasureTheory.condexpInd_disjoint_union","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nhst : Disjoint s t\n⊢ Eq (MeasureTheory.condExpInd G hm μ (Union.union s t)) (HAdd.hAdd (MeasureTheory.condExpInd G hm μ s) (MeasureTheory.condExpInd G hm μ t))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpInd_disjoint_union := condExpInd_disjoint_union\n\n"}
{"name":"MeasureTheory.dominatedFinMeasAdditive_condExpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ MeasureTheory.DominatedFinMeasAdditive μ (MeasureTheory.condExpInd G hm μ) 1","decl":"theorem dominatedFinMeasAdditive_condExpInd (hm : m ≤ m0) (μ : Measure α)\n    [SigmaFinite (μ.trim hm)] :\n    DominatedFinMeasAdditive μ (condExpInd G hm μ : Set α → G →L[ℝ] α →₁[μ] G) 1 :=\n  ⟨fun _ _ => condExpInd_disjoint_union, fun _ _ _ => norm_condExpInd_le.trans (one_mul _).symm.le⟩\n\n"}
{"name":"MeasureTheory.dominatedFinMeasAdditive_condexpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ MeasureTheory.DominatedFinMeasAdditive μ (MeasureTheory.condExpInd G hm μ) 1","decl":"@[deprecated (since := \"2025-01-21\")]\nalias dominatedFinMeasAdditive_condexpInd := dominatedFinMeasAdditive_condExpInd\n\n"}
{"name":"MeasureTheory.setIntegral_condExpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG' : Type u_5\ninst✝³ : NormedAddCommGroup G'\ninst✝² : NormedSpace Real G'\ninst✝¹ : CompleteSpace G'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nx : G'\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun a => ↑↑((MeasureTheory.condExpInd G' hm μ t) x) a) (HSMul.hSMul (μ (Inter.inter t s)).toReal x)","decl":"theorem setIntegral_condExpInd (hs : MeasurableSet[m] s) (ht : MeasurableSet t) (hμs : μ s ≠ ∞)\n    (hμt : μ t ≠ ∞) (x : G') : ∫ a in s, condExpInd G' hm μ t x a ∂μ = (μ (t ∩ s)).toReal • x :=\n  calc\n    ∫ a in s, condExpInd G' hm μ t x a ∂μ = ∫ a in s, condExpIndSMul hm ht hμt x a ∂μ :=\n      setIntegral_congr_ae (hm s hs)\n        ((condExpInd_ae_eq_condExpIndSMul hm ht hμt x).mono fun _ hx _ => hx)\n    _ = (μ (t ∩ s)).toReal • x := setIntegral_condExpIndSMul hs ht hμs hμt x\n\n"}
{"name":"MeasureTheory.setIntegral_condexpInd","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG' : Type u_5\ninst✝³ : NormedAddCommGroup G'\ninst✝² : NormedSpace Real G'\ninst✝¹ : CompleteSpace G'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nx : G'\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun a => ↑↑((MeasureTheory.condExpInd G' hm μ t) x) a) (HSMul.hSMul (μ (Inter.inter t s)).toReal x)","decl":"@[deprecated (since := \"2025-01-21\")] alias setIntegral_condexpInd := setIntegral_condExpInd\n\n"}
{"name":"MeasureTheory.condExpInd_of_measurable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : G\n⊢ Eq ((MeasureTheory.condExpInd G hm μ s) c) (MeasureTheory.indicatorConstLp 1 ⋯ hμs c)","decl":"theorem condExpInd_of_measurable (hs : MeasurableSet[m] s) (hμs : μ s ≠ ∞) (c : G) :\n    condExpInd G hm μ s c = indicatorConstLp 1 (hm s hs) hμs c := by\n  ext1\n  refine EventuallyEq.trans ?_ indicatorConstLp_coeFn.symm\n  refine (condExpInd_ae_eq_condExpIndSMul hm (hm s hs) hμs c).trans ?_\n  refine (condExpIndSMul_ae_eq_smul hm (hm s hs) hμs c).trans ?_\n  rw [lpMeas_coe, condExpL2_indicator_of_measurable hm hs hμs (1 : ℝ)]\n  refine (@indicatorConstLp_coeFn α _ _ 2 μ _ s (hm s hs) hμs (1 : ℝ)).mono fun x hx => ?_\n  dsimp only\n  rw [hx]\n  by_cases hx_mem : x ∈ s <;> simp [hx_mem]\n\n"}
{"name":"MeasureTheory.condexpInd_of_measurable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nG : Type u_4\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : G\n⊢ Eq ((MeasureTheory.condExpInd G hm μ s) c) (MeasureTheory.indicatorConstLp 1 ⋯ hμs c)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpInd_of_measurable := condExpInd_of_measurable\n\n"}
{"name":"MeasureTheory.condExpInd_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝³ : MeasureTheory.SigmaFinite (μ.trim hm)\nE : Type u_7\ninst✝² : NormedLatticeAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E\nhx : LE.le 0 x\n⊢ LE.le 0 ((MeasureTheory.condExpInd E hm μ s) x)","decl":"theorem condExpInd_nonneg {E} [NormedLatticeAddCommGroup E] [NormedSpace ℝ E] [OrderedSMul ℝ E]\n    (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : E) (hx : 0 ≤ x) : 0 ≤ condExpInd E hm μ s x := by\n  rw [← coeFn_le]\n  refine EventuallyLE.trans_eq ?_ (condExpInd_ae_eq_condExpIndSMul hm hs hμs x).symm\n  exact (coeFn_zero E 1 μ).trans_le (condExpIndSMul_nonneg hs hμs x hx)\n\n"}
{"name":"MeasureTheory.condexpInd_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝³ : MeasureTheory.SigmaFinite (μ.trim hm)\nE : Type u_7\ninst✝² : NormedLatticeAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E\nhx : LE.le 0 x\n⊢ LE.le 0 ((MeasureTheory.condExpInd E hm μ s) x)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpInd_nonneg := condExpInd_nonneg\n\n"}
{"name":"MeasureTheory.condExpL1CLM_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F'\ninst✝³ : NormedSpace 𝕜 F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nc : 𝕜\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) (HSMul.hSMul c f)) (HSMul.hSMul c ((MeasureTheory.condExpL1CLM F' hm μ) f))","decl":"theorem condExpL1CLM_smul (c : 𝕜) (f : α →₁[μ] F') :\n    condExpL1CLM F' hm μ (c • f) = c • condExpL1CLM F' hm μ f := by\n  refine L1.setToL1_smul (dominatedFinMeasAdditive_condExpInd F' hm μ) ?_ c f\n  exact fun c s x => condExpInd_smul' c x\n\n"}
{"name":"MeasureTheory.condexpL1CLM_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F'\ninst✝³ : NormedSpace 𝕜 F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nc : 𝕜\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) (HSMul.hSMul c f)) (HSMul.hSMul c ((MeasureTheory.condExpL1CLM F' hm μ) f))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1CLM_smul := condExpL1CLM_smul\n\n"}
{"name":"MeasureTheory.condExpL1CLM_indicatorConstLp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : F'\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) (MeasureTheory.indicatorConstLp 1 hs hμs x)) ((MeasureTheory.condExpInd F' hm μ s) x)","decl":"theorem condExpL1CLM_indicatorConstLp (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : F') :\n    (condExpL1CLM F' hm μ) (indicatorConstLp 1 hs hμs x) = condExpInd F' hm μ s x :=\n  L1.setToL1_indicatorConstLp (dominatedFinMeasAdditive_condExpInd F' hm μ) hs hμs x\n\n"}
{"name":"MeasureTheory.condexpL1CLM_indicatorConstLp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : F'\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) (MeasureTheory.indicatorConstLp 1 hs hμs x)) ((MeasureTheory.condExpInd F' hm μ s) x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL1CLM_indicatorConstLp := condExpL1CLM_indicatorConstLp\n\n"}
{"name":"MeasureTheory.condExpL1CLM_indicatorConst","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : F'\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) ↑(MeasureTheory.Lp.simpleFunc.indicatorConst 1 hs hμs x)) ((MeasureTheory.condExpInd F' hm μ s) x)","decl":"theorem condExpL1CLM_indicatorConst (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : F') :\n    (condExpL1CLM F' hm μ) ↑(simpleFunc.indicatorConst 1 hs hμs x) = condExpInd F' hm μ s x := by\n  rw [Lp.simpleFunc.coe_indicatorConst]; exact condExpL1CLM_indicatorConstLp hs hμs x\n\n"}
{"name":"MeasureTheory.condexpL1CLM_indicatorConst","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : F'\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) ↑(MeasureTheory.Lp.simpleFunc.indicatorConst 1 hs hμs x)) ((MeasureTheory.condExpInd F' hm μ s) x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL1CLM_indicatorConst := condExpL1CLM_indicatorConst\n\n"}
{"name":"MeasureTheory.setIntegral_condExpL1CLM_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑((MeasureTheory.condExpL1CLM F' hm μ) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"/-- Auxiliary lemma used in the proof of `setIntegral_condExpL1CLM`. -/\ntheorem setIntegral_condExpL1CLM_of_measure_ne_top (f : α →₁[μ] F') (hs : MeasurableSet[m] s)\n    (hμs : μ s ≠ ∞) : ∫ x in s, condExpL1CLM F' hm μ f x ∂μ = ∫ x in s, f x ∂μ := by\n  refine @Lp.induction _ _ _ _ _ _ _ ENNReal.one_ne_top\n    (fun f : α →₁[μ] F' => ∫ x in s, condExpL1CLM F' hm μ f x ∂μ = ∫ x in s, f x ∂μ) ?_ ?_\n    (isClosed_eq ?_ ?_) f\n  · intro x t ht hμt\n    simp_rw [condExpL1CLM_indicatorConst ht hμt.ne x]\n    rw [Lp.simpleFunc.coe_indicatorConst, setIntegral_indicatorConstLp (hm _ hs)]\n    exact setIntegral_condExpInd hs ht hμs hμt.ne x\n  · intro f g hf_Lp hg_Lp _ hf hg\n    simp_rw [(condExpL1CLM F' hm μ).map_add]\n    rw [setIntegral_congr_ae (hm s hs) ((Lp.coeFn_add (condExpL1CLM F' hm μ (hf_Lp.toLp f))\n      (condExpL1CLM F' hm μ (hg_Lp.toLp g))).mono fun x hx _ => hx)]\n    rw [setIntegral_congr_ae (hm s hs)\n      ((Lp.coeFn_add (hf_Lp.toLp f) (hg_Lp.toLp g)).mono fun x hx _ => hx)]\n    simp_rw [Pi.add_apply]\n    rw [integral_add (L1.integrable_coeFn _).integrableOn (L1.integrable_coeFn _).integrableOn,\n      integral_add (L1.integrable_coeFn _).integrableOn (L1.integrable_coeFn _).integrableOn, hf,\n      hg]\n  · exact (continuous_setIntegral s).comp (condExpL1CLM F' hm μ).continuous\n  · exact continuous_setIntegral s\n\n"}
{"name":"MeasureTheory.setIntegral_condexpL1CLM_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑((MeasureTheory.condExpL1CLM F' hm μ) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias setIntegral_condexpL1CLM_of_measure_ne_top := setIntegral_condExpL1CLM_of_measure_ne_top\n\n"}
{"name":"MeasureTheory.setIntegral_condExpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\ns : Set α\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑((MeasureTheory.condExpL1CLM F' hm μ) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"/-- The integral of the conditional expectation `condExpL1CLM` over an `m`-measurable set is equal\nto the integral of `f` on that set. See also `setIntegral_condExp`, the similar statement for\n`condExp`. -/\ntheorem setIntegral_condExpL1CLM (f : α →₁[μ] F') (hs : MeasurableSet[m] s) :\n    ∫ x in s, condExpL1CLM F' hm μ f x ∂μ = ∫ x in s, f x ∂μ := by\n  let S := spanningSets (μ.trim hm)\n  have hS_meas : ∀ i, MeasurableSet[m] (S i) := measurableSet_spanningSets (μ.trim hm)\n  have hS_meas0 : ∀ i, MeasurableSet (S i) := fun i => hm _ (hS_meas i)\n  have hs_eq : s = ⋃ i, S i ∩ s := by\n    simp_rw [Set.inter_comm]\n    rw [← Set.inter_iUnion, iUnion_spanningSets (μ.trim hm), Set.inter_univ]\n  have hS_finite : ∀ i, μ (S i ∩ s) < ∞ := by\n    refine fun i => (measure_mono Set.inter_subset_left).trans_lt ?_\n    have hS_finite_trim := measure_spanningSets_lt_top (μ.trim hm) i\n    rwa [trim_measurableSet_eq hm (hS_meas i)] at hS_finite_trim\n  have h_mono : Monotone fun i => S i ∩ s := by\n    intro i j hij x\n    simp_rw [Set.mem_inter_iff]\n    exact fun h => ⟨monotone_spanningSets (μ.trim hm) hij h.1, h.2⟩\n  have h_eq_forall :\n    (fun i => ∫ x in S i ∩ s, condExpL1CLM F' hm μ f x ∂μ) = fun i => ∫ x in S i ∩ s, f x ∂μ :=\n    funext fun i =>\n      setIntegral_condExpL1CLM_of_measure_ne_top f (@MeasurableSet.inter α m _ _ (hS_meas i) hs)\n        (hS_finite i).ne\n  have h_right : Tendsto (fun i => ∫ x in S i ∩ s, f x ∂μ) atTop (𝓝 (∫ x in s, f x ∂μ)) := by\n    have h :=\n      tendsto_setIntegral_of_monotone (fun i => (hS_meas0 i).inter (hm s hs)) h_mono\n        (L1.integrable_coeFn f).integrableOn\n    rwa [← hs_eq] at h\n  have h_left : Tendsto (fun i => ∫ x in S i ∩ s, condExpL1CLM F' hm μ f x ∂μ) atTop\n      (𝓝 (∫ x in s, condExpL1CLM F' hm μ f x ∂μ)) := by\n    have h := tendsto_setIntegral_of_monotone (fun i => (hS_meas0 i).inter (hm s hs)) h_mono\n      (L1.integrable_coeFn (condExpL1CLM F' hm μ f)).integrableOn\n    rwa [← hs_eq] at h\n  rw [h_eq_forall] at h_left\n  exact tendsto_nhds_unique h_left h_right\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_condExpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpL1CLM F' hm μ) f)) μ","decl":"theorem aestronglyMeasurable_condExpL1CLM (f : α →₁[μ] F') :\n    AEStronglyMeasurable[m] (condExpL1CLM F' hm μ f) μ := by\n  refine @Lp.induction _ _ _ _ _ _ _ ENNReal.one_ne_top\n    (fun f : α →₁[μ] F' => AEStronglyMeasurable[m] (condExpL1CLM F' hm μ f) μ) ?_ ?_ ?_ f\n  · intro c s hs hμs\n    rw [condExpL1CLM_indicatorConst hs hμs.ne c]\n    exact aestronglyMeasurable_condExpInd hs hμs.ne c\n  · intro f g hf hg _ hfm hgm\n    rw [(condExpL1CLM F' hm μ).map_add]\n    exact (hfm.add hgm).congr (coeFn_add ..).symm\n  · have : {f : Lp F' 1 μ | AEStronglyMeasurable[m] (condExpL1CLM F' hm μ f) μ} =\n        condExpL1CLM F' hm μ ⁻¹' {f | AEStronglyMeasurable[m] f μ} := rfl\n    rw [this]\n    refine IsClosed.preimage (condExpL1CLM F' hm μ).continuous ?_\n    exact isClosed_aeStronglyMeasurable' hm\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condExpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpL1CLM F' hm μ) f)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aestronglyMeasurable'_condExpL1CLM := aestronglyMeasurable_condExpL1CLM\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_condexpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpL1CLM F' hm μ) f)) μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias aestronglyMeasurable_condexpL1CLM := aestronglyMeasurable_condExpL1CLM\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condexpL1CLM","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑((MeasureTheory.condExpL1CLM F' hm μ) f)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aestronglyMeasurable'_condexpL1CLM := aestronglyMeasurable_condexpL1CLM\n\n"}
{"name":"MeasureTheory.condExpL1CLM_lpMeas","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.lpMeas F' Real m 1 μ) x\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) ↑f) ↑f","decl":"theorem condExpL1CLM_lpMeas (f : lpMeas F' ℝ m 1 μ) :\n    condExpL1CLM F' hm μ (f : α →₁[μ] F') = ↑f := by\n  let g := lpMeasToLpTrimLie F' ℝ 1 μ hm f\n  have hfg : f = (lpMeasToLpTrimLie F' ℝ 1 μ hm).symm g := by\n    simp only [g, LinearIsometryEquiv.symm_apply_apply]\n  rw [hfg]\n  refine @Lp.induction α F' m _ 1 (μ.trim hm) _ ENNReal.coe_ne_top (fun g : α →₁[μ.trim hm] F' =>\n    condExpL1CLM F' hm μ ((lpMeasToLpTrimLie F' ℝ 1 μ hm).symm g : α →₁[μ] F') =\n    ↑((lpMeasToLpTrimLie F' ℝ 1 μ hm).symm g)) ?_ ?_ ?_ g\n  · intro c s hs hμs\n    rw [@Lp.simpleFunc.coe_indicatorConst _ _ m, lpMeasToLpTrimLie_symm_indicator hs hμs.ne c,\n      condExpL1CLM_indicatorConstLp]\n    exact condExpInd_of_measurable hs ((le_trim hm).trans_lt hμs).ne c\n  · intro f g hf hg _ hf_eq hg_eq\n    rw [LinearIsometryEquiv.map_add]\n    push_cast\n    rw [map_add, hf_eq, hg_eq]\n  · refine isClosed_eq ?_ ?_\n    · refine (condExpL1CLM F' hm μ).continuous.comp (continuous_induced_dom.comp ?_)\n      exact LinearIsometryEquiv.continuous _\n    · refine continuous_induced_dom.comp ?_\n      exact LinearIsometryEquiv.continuous _\n\n"}
{"name":"MeasureTheory.condexpL1CLM_lpMeas","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.lpMeas F' Real m 1 μ) x\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) ↑f) ↑f","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1CLM_lpMeas := condExpL1CLM_lpMeas\n\n"}
{"name":"MeasureTheory.condExpL1CLM_of_aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\nhfm : MeasureTheory.AEStronglyMeasurable (↑↑f) μ\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) f) f","decl":"theorem condExpL1CLM_of_aestronglyMeasurable' (f : α →₁[μ] F') (hfm : AEStronglyMeasurable[m] f μ) :\n    condExpL1CLM F' hm μ f = f :=\n  condExpL1CLM_lpMeas (⟨f, hfm⟩ : lpMeas F' ℝ m 1 μ)\n\n"}
{"name":"MeasureTheory.condexpL1CLM_of_aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp F' 1 μ) x\nhfm : MeasureTheory.AEStronglyMeasurable (↑↑f) μ\n⊢ Eq ((MeasureTheory.condExpL1CLM F' hm μ) f) f","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL1CLM_of_aestronglyMeasurable' := condExpL1CLM_of_aestronglyMeasurable'\n\n"}
{"name":"MeasureTheory.condExpL1_undef","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\nhf : Not (MeasureTheory.Integrable f μ)\n⊢ Eq (MeasureTheory.condExpL1 hm μ f) 0","decl":"theorem condExpL1_undef (hf : ¬Integrable f μ) : condExpL1 hm μ f = 0 :=\n  setToFun_undef (dominatedFinMeasAdditive_condExpInd F' hm μ) hf\n\n"}
{"name":"MeasureTheory.condexpL1_undef","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\nhf : Not (MeasureTheory.Integrable f μ)\n⊢ Eq (MeasureTheory.condExpL1 hm μ f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_undef := condExpL1_undef\n\n"}
{"name":"MeasureTheory.condExpL1_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (MeasureTheory.condExpL1 hm μ f) ((MeasureTheory.condExpL1CLM F' hm μ) (MeasureTheory.Integrable.toL1 f hf))","decl":"theorem condExpL1_eq (hf : Integrable f μ) : condExpL1 hm μ f = condExpL1CLM F' hm μ (hf.toL1 f) :=\n  setToFun_eq (dominatedFinMeasAdditive_condExpInd F' hm μ) hf\n\n"}
{"name":"MeasureTheory.condexpL1_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (MeasureTheory.condExpL1 hm μ f) ((MeasureTheory.condExpL1CLM F' hm μ) (MeasureTheory.Integrable.toL1 f hf))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_eq := condExpL1_eq\n\n"}
{"name":"MeasureTheory.condExpL1_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.condExpL1 hm μ 0) 0","decl":"@[simp]\ntheorem condExpL1_zero : condExpL1 hm μ (0 : α → F') = 0 :=\n  setToFun_zero _\n\n"}
{"name":"MeasureTheory.condexpL1_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ Eq (MeasureTheory.condExpL1 hm μ 0) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_zero := condExpL1_zero\n\n"}
{"name":"MeasureTheory.condExpL1_measure_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝² : NormedAddCommGroup F'\ninst✝¹ : NormedSpace Real F'\ninst✝ : CompleteSpace F'\nm m0 : MeasurableSpace α\nf : α → F'\nhm : LE.le m m0\n⊢ Eq (MeasureTheory.condExpL1 hm 0 f) 0","decl":"@[simp]\ntheorem condExpL1_measure_zero (hm : m ≤ m0) : condExpL1 hm (0 : Measure α) f = 0 :=\n  setToFun_measure_zero _ rfl\n\n"}
{"name":"MeasureTheory.condexpL1_measure_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝² : NormedAddCommGroup F'\ninst✝¹ : NormedSpace Real F'\ninst✝ : CompleteSpace F'\nm m0 : MeasurableSpace α\nf : α → F'\nhm : LE.le m m0\n⊢ Eq (MeasureTheory.condExpL1 hm 0 f) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_measure_zero := condExpL1_measure_zero\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_condExpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpL1 hm μ f)) μ","decl":"theorem aestronglyMeasurable_condExpL1 {f : α → F'} :\n    AEStronglyMeasurable[m] (condExpL1 hm μ f) μ := by\n  by_cases hf : Integrable f μ\n  · rw [condExpL1_eq hf]\n    exact aestronglyMeasurable_condExpL1CLM _\n  · rw [condExpL1_undef hf]\n    exact stronglyMeasurable_zero.aestronglyMeasurable.congr (coeFn_zero ..).symm\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condExpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpL1 hm μ f)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aestronglyMeasurable'_condExpL1 := aestronglyMeasurable_condExpL1\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_condexpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpL1 hm μ f)) μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias aestronglyMeasurable_condexpL1 := aestronglyMeasurable_condExpL1\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condexpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpL1 hm μ f)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aestronglyMeasurable'_condexpL1 := aestronglyMeasurable_condexpL1\n\n"}
{"name":"MeasureTheory.condExpL1_congr_ae","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → F'\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ Eq (MeasureTheory.condExpL1 hm μ f) (MeasureTheory.condExpL1 hm μ g)","decl":"theorem condExpL1_congr_ae (hm : m ≤ m0) [SigmaFinite (μ.trim hm)] (h : f =ᵐ[μ] g) :\n    condExpL1 hm μ f = condExpL1 hm μ g :=\n  setToFun_congr_ae _ h\n\n"}
{"name":"MeasureTheory.condexpL1_congr_ae","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → F'\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ Eq (MeasureTheory.condExpL1 hm μ f) (MeasureTheory.condExpL1 hm μ g)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_congr_ae := condExpL1_congr_ae\n\n"}
{"name":"MeasureTheory.integrable_condExpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ MeasureTheory.Integrable (↑↑(MeasureTheory.condExpL1 hm μ f)) μ","decl":"theorem integrable_condExpL1 (f : α → F') : Integrable (condExpL1 hm μ f) μ :=\n  L1.integrable_coeFn _\n\n"}
{"name":"MeasureTheory.integrable_condexpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ MeasureTheory.Integrable (↑↑(MeasureTheory.condExpL1 hm μ f)) μ","decl":"@[deprecated (since := \"2025-01-21\")] alias integrable_condexpL1 := integrable_condExpL1\n\n"}
{"name":"MeasureTheory.setIntegral_condExpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\ns : Set α\nhf : MeasureTheory.Integrable f μ\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑(MeasureTheory.condExpL1 hm μ f) x) (MeasureTheory.integral (μ.restrict s) fun x => f x)","decl":"/-- The integral of the conditional expectation `condExpL1` over an `m`-measurable set is equal to\nthe integral of `f` on that set. See also `setIntegral_condExp`, the similar statement for\n`condExp`. -/\ntheorem setIntegral_condExpL1 (hf : Integrable f μ) (hs : MeasurableSet[m] s) :\n    ∫ x in s, condExpL1 hm μ f x ∂μ = ∫ x in s, f x ∂μ := by\n  simp_rw [condExpL1_eq hf]\n  rw [setIntegral_condExpL1CLM (hf.toL1 f) hs]\n  exact setIntegral_congr_ae (hm s hs) (hf.coeFn_toL1.mono fun x hx _ => hx)\n\n"}
{"name":"MeasureTheory.setIntegral_condexpL1","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\ns : Set α\nhf : MeasureTheory.Integrable f μ\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑(MeasureTheory.condExpL1 hm μ f) x) (MeasureTheory.integral (μ.restrict s) fun x => f x)","decl":"@[deprecated (since := \"2025-01-21\")] alias setIntegral_condexpL1 := setIntegral_condExpL1\n\n"}
{"name":"MeasureTheory.condExpL1_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf g : α → F'\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (MeasureTheory.condExpL1 hm μ (HAdd.hAdd f g)) (HAdd.hAdd (MeasureTheory.condExpL1 hm μ f) (MeasureTheory.condExpL1 hm μ g))","decl":"theorem condExpL1_add (hf : Integrable f μ) (hg : Integrable g μ) :\n    condExpL1 hm μ (f + g) = condExpL1 hm μ f + condExpL1 hm μ g :=\n  setToFun_add _ hf hg\n\n"}
{"name":"MeasureTheory.condexpL1_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf g : α → F'\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (MeasureTheory.condExpL1 hm μ (HAdd.hAdd f g)) (HAdd.hAdd (MeasureTheory.condExpL1 hm μ f) (MeasureTheory.condExpL1 hm μ g))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_add := condExpL1_add\n\n"}
{"name":"MeasureTheory.condExpL1_neg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ Eq (MeasureTheory.condExpL1 hm μ (Neg.neg f)) (Neg.neg (MeasureTheory.condExpL1 hm μ f))","decl":"theorem condExpL1_neg (f : α → F') : condExpL1 hm μ (-f) = -condExpL1 hm μ f :=\n  setToFun_neg _ f\n\n"}
{"name":"MeasureTheory.condexpL1_neg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\n⊢ Eq (MeasureTheory.condExpL1 hm μ (Neg.neg f)) (Neg.neg (MeasureTheory.condExpL1 hm μ f))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_neg := condExpL1_neg\n\n"}
{"name":"MeasureTheory.condExpL1_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F'\ninst✝³ : NormedSpace 𝕜 F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nc : 𝕜\nf : α → F'\n⊢ Eq (MeasureTheory.condExpL1 hm μ (HSMul.hSMul c f)) (HSMul.hSMul c (MeasureTheory.condExpL1 hm μ f))","decl":"theorem condExpL1_smul (c : 𝕜) (f : α → F') : condExpL1 hm μ (c • f) = c • condExpL1 hm μ f := by\n  refine setToFun_smul _ ?_ c f\n  exact fun c _ x => condExpInd_smul' c x\n\n"}
{"name":"MeasureTheory.condexpL1_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\n𝕜 : Type u_6\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup F'\ninst✝³ : NormedSpace 𝕜 F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nc : 𝕜\nf : α → F'\n⊢ Eq (MeasureTheory.condExpL1 hm μ (HSMul.hSMul c f)) (HSMul.hSMul c (MeasureTheory.condExpL1 hm μ f))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_smul := condExpL1_smul\n\n"}
{"name":"MeasureTheory.condExpL1_sub","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf g : α → F'\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (MeasureTheory.condExpL1 hm μ (HSub.hSub f g)) (HSub.hSub (MeasureTheory.condExpL1 hm μ f) (MeasureTheory.condExpL1 hm μ g))","decl":"theorem condExpL1_sub (hf : Integrable f μ) (hg : Integrable g μ) :\n    condExpL1 hm μ (f - g) = condExpL1 hm μ f - condExpL1 hm μ g :=\n  setToFun_sub _ hf hg\n\n"}
{"name":"MeasureTheory.condexpL1_sub","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf g : α → F'\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (MeasureTheory.condExpL1 hm μ (HSub.hSub f g)) (HSub.hSub (MeasureTheory.condExpL1 hm μ f) (MeasureTheory.condExpL1 hm μ g))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_sub := condExpL1_sub\n\n"}
{"name":"MeasureTheory.condExpL1_of_aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\nhfm : MeasureTheory.AEStronglyMeasurable f μ\nhfi : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑↑(MeasureTheory.condExpL1 hm μ f)) f","decl":"theorem condExpL1_of_aestronglyMeasurable' (hfm : AEStronglyMeasurable[m] f μ)\n    (hfi : Integrable f μ) : condExpL1 hm μ f =ᵐ[μ] f := by\n  rw [condExpL1_eq hfi]\n  refine EventuallyEq.trans ?_ (Integrable.coeFn_toL1 hfi)\n  rw [condExpL1CLM_of_aestronglyMeasurable']\n  exact hfm.congr hfi.coeFn_toL1.symm\n\n"}
{"name":"MeasureTheory.condexpL1_of_aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nF' : Type u_3\ninst✝³ : NormedAddCommGroup F'\ninst✝² : NormedSpace Real F'\ninst✝¹ : CompleteSpace F'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nf : α → F'\nhfm : MeasureTheory.AEStronglyMeasurable f μ\nhfi : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑↑(MeasureTheory.condExpL1 hm μ f)) f","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL1_of_aestronglyMeasurable' := condExpL1_of_aestronglyMeasurable'\n\n"}
{"name":"MeasureTheory.condExpL1_mono","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝⁴ : MeasureTheory.SigmaFinite (μ.trim hm)\nE : Type u_7\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nf g : α → E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nhfg : (MeasureTheory.ae μ).EventuallyLE f g\n⊢ (MeasureTheory.ae μ).EventuallyLE ↑↑(MeasureTheory.condExpL1 hm μ f) ↑↑(MeasureTheory.condExpL1 hm μ g)","decl":"theorem condExpL1_mono {E} [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ℝ E]\n    [OrderedSMul ℝ E] {f g : α → E} (hf : Integrable f μ) (hg : Integrable g μ) (hfg : f ≤ᵐ[μ] g) :\n    condExpL1 hm μ f ≤ᵐ[μ] condExpL1 hm μ g := by\n  rw [coeFn_le]\n  have h_nonneg : ∀ s, MeasurableSet s → μ s < ∞ → ∀ x : E, 0 ≤ x → 0 ≤ condExpInd E hm μ s x :=\n    fun s hs hμs x hx => condExpInd_nonneg hs hμs.ne x hx\n  exact setToFun_mono (dominatedFinMeasAdditive_condExpInd E hm μ) h_nonneg hf hg hfg\n\n"}
{"name":"MeasureTheory.condexpL1_mono","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL1","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝⁴ : MeasureTheory.SigmaFinite (μ.trim hm)\nE : Type u_7\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : CompleteSpace E\ninst✝¹ : NormedSpace Real E\ninst✝ : OrderedSMul Real E\nf g : α → E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nhfg : (MeasureTheory.ae μ).EventuallyLE f g\n⊢ (MeasureTheory.ae μ).EventuallyLE ↑↑(MeasureTheory.condExpL1 hm μ f) ↑↑(MeasureTheory.condExpL1 hm μ g)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL1_mono := condExpL1_mono\n\n"}
