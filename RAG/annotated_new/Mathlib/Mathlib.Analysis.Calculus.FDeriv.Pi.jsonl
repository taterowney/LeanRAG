{"name":"hasFDerivAt_update","module":"Mathlib.Analysis.Calculus.FDeriv.Pi","initialProofState":"𝕜 : Type u_1\nι : Type u_2\ninst✝⁴ : DecidableEq ι\ninst✝³ : Fintype ι\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type u_3\ninst✝¹ : (i : ι) → NormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nx : (i : ι) → E i\ni : ι\ny : E i\n⊢ HasFDerivAt (Function.update x i) (ContinuousLinearMap.pi (Pi.single i (ContinuousLinearMap.id 𝕜 (E i)))) y","decl":"@[fun_prop]\ntheorem hasFDerivAt_update (x : ∀ i, E i) {i : ι} (y : E i) :\n    HasFDerivAt (Function.update x i) (.pi (Pi.single i (.id 𝕜 (E i)))) y := by\n  set l := (ContinuousLinearMap.pi (Pi.single i (.id 𝕜 (E i))))\n  have update_eq : Function.update x i = (fun _ ↦ x) + l ∘ (· - x i) := by\n    ext t j\n    dsimp [l, Pi.single, Function.update]\n    split_ifs with hji\n    · subst hji\n      simp\n    · simp\n  rw [update_eq]\n  convert (hasFDerivAt_const _ _).add (l.hasFDerivAt.comp y (hasFDerivAt_sub_const (x i)))\n  rw [zero_add, ContinuousLinearMap.comp_id]\n\n"}
{"name":"hasFDerivAt_single","module":"Mathlib.Analysis.Calculus.FDeriv.Pi","initialProofState":"𝕜 : Type u_1\nι : Type u_2\ninst✝⁴ : DecidableEq ι\ninst✝³ : Fintype ι\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type u_3\ninst✝¹ : (i : ι) → NormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\ni : ι\ny : E i\n⊢ HasFDerivAt (Pi.single i) (ContinuousLinearMap.pi (Pi.single i (ContinuousLinearMap.id 𝕜 (E i)))) y","decl":"@[fun_prop]\ntheorem hasFDerivAt_single {i : ι} (y : E i) :\n    HasFDerivAt (Pi.single i) (.pi (Pi.single i (.id 𝕜 (E i)))) y :=\n  hasFDerivAt_update 0 y\n\n"}
{"name":"fderiv_update","module":"Mathlib.Analysis.Calculus.FDeriv.Pi","initialProofState":"𝕜 : Type u_1\nι : Type u_2\ninst✝⁴ : DecidableEq ι\ninst✝³ : Fintype ι\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type u_3\ninst✝¹ : (i : ι) → NormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nx : (i : ι) → E i\ni : ι\ny : E i\n⊢ Eq (fderiv 𝕜 (Function.update x i) y) (ContinuousLinearMap.pi (Pi.single i (ContinuousLinearMap.id 𝕜 (E i))))","decl":"theorem fderiv_update (x : ∀ i, E i) {i : ι} (y : E i) :\n    fderiv 𝕜 (Function.update x i) y = .pi (Pi.single i (.id 𝕜 (E i))) :=\n  (hasFDerivAt_update x y).fderiv\n\n"}
{"name":"fderiv_single","module":"Mathlib.Analysis.Calculus.FDeriv.Pi","initialProofState":"𝕜 : Type u_1\nι : Type u_2\ninst✝⁴ : DecidableEq ι\ninst✝³ : Fintype ι\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type u_3\ninst✝¹ : (i : ι) → NormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\ni : ι\ny : E i\n⊢ Eq (fderiv 𝕜 (Pi.single i) y) (ContinuousLinearMap.pi (Pi.single i (ContinuousLinearMap.id 𝕜 (E i))))","decl":"theorem fderiv_single {i : ι} (y : E i) :\n    fderiv 𝕜 (Pi.single i) y = .pi (Pi.single i (.id 𝕜 (E i))) :=\n  fderiv_update 0 y\n"}
