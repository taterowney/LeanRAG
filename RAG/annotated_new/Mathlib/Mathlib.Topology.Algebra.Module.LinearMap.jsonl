{"name":"ContinuousLinearMap.mk.injEq","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring S\nσ : RingHom R S\nM : Type u_3\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_4\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\ntoLinearMap✝ : LinearMap σ M M₂\ncont✝ : autoParam (Continuous toLinearMap✝.toFun) _auto✝\ntoLinearMap : LinearMap σ M M₂\ncont : autoParam (Continuous toLinearMap.toFun) _auto✝\n⊢ Eq (Eq { toLinearMap := toLinearMap✝, cont := cont✝ } { toLinearMap := toLinearMap, cont := cont }) (Eq toLinearMap✝ toLinearMap)","decl":"/-- Continuous linear maps between modules. We only put the type classes that are necessary for the\ndefinition, although in applications `M` and `M₂` will be topological modules over the topological\nring `R`. -/\nstructure ContinuousLinearMap {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    (M : Type*) [TopologicalSpace M] [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂]\n    [AddCommMonoid M₂] [Module R M] [Module S M₂] extends M →ₛₗ[σ] M₂ where\n  cont : Continuous toFun := by continuity\n\n"}
{"name":"ContinuousLinearMap.cont","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring S\nσ : RingHom R S\nM : Type u_3\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_4\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\nself : ContinuousLinearMap σ M M₂\n⊢ Continuous self.toFun","decl":"/-- Continuous linear maps between modules. We only put the type classes that are necessary for the\ndefinition, although in applications `M` and `M₂` will be topological modules over the topological\nring `R`. -/\nstructure ContinuousLinearMap {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    (M : Type*) [TopologicalSpace M] [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂]\n    [AddCommMonoid M₂] [Module R M] [Module S M₂] extends M →ₛₗ[σ] M₂ where\n  cont : Continuous toFun := by continuity\n\n"}
{"name":"ContinuousLinearMap.mk.inj","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝⁷ : Semiring R\ninst✝⁶ : Semiring S\nσ : RingHom R S\nM : Type u_3\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommMonoid M\nM₂ : Type u_4\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module S M₂\ntoLinearMap✝ : LinearMap σ M M₂\ncont✝ : autoParam (Continuous toLinearMap✝.toFun) _auto✝\ntoLinearMap : LinearMap σ M M₂\ncont : autoParam (Continuous toLinearMap.toFun) _auto✝\nx✝ : Eq { toLinearMap := toLinearMap✝, cont := cont✝ } { toLinearMap := toLinearMap, cont := cont }\n⊢ Eq toLinearMap✝ toLinearMap","decl":"/-- Continuous linear maps between modules. We only put the type classes that are necessary for the\ndefinition, although in applications `M` and `M₂` will be topological modules over the topological\nring `R`. -/\nstructure ContinuousLinearMap {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    (M : Type*) [TopologicalSpace M] [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂]\n    [AddCommMonoid M₂] [Module R M] [Module S M₂] extends M →ₛₗ[σ] M₂ where\n  cont : Continuous toFun := by continuity\n\n"}
{"name":"ContinuousLinearMap.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹¹ : Semiring R\ninst✝¹⁰ : Semiring S\nσ : RingHom R S\nM : Type u_3\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : AddCommMonoid M\nM₂ : Type u_4\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : Module R M\ninst✝⁴ : Module S M₂\ninst✝³ : SizeOf R\ninst✝² : SizeOf S\ninst✝¹ : SizeOf M\ninst✝ : SizeOf M₂\ntoLinearMap : LinearMap σ M M₂\ncont : autoParam (Continuous toLinearMap.toFun) _auto✝\n⊢ Eq (SizeOf.sizeOf { toLinearMap := toLinearMap, cont := cont }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLinearMap)) (SizeOf.sizeOf cont))","decl":"/-- Continuous linear maps between modules. We only put the type classes that are necessary for the\ndefinition, although in applications `M` and `M₂` will be topological modules over the topological\nring `R`. -/\nstructure ContinuousLinearMap {R : Type*} {S : Type*} [Semiring R] [Semiring S] (σ : R →+* S)\n    (M : Type*) [TopologicalSpace M] [AddCommMonoid M] (M₂ : Type*) [TopologicalSpace M₂]\n    [AddCommMonoid M₂] [Module R M] [Module S M₂] extends M →ₛₗ[σ] M₂ where\n  cont : Continuous toFun := by continuity\n\n"}
{"name":"ContinuousSemilinearMapClass.toContinuousMapClass","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nS : outParam (Type u_3)\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring S\nσ : outParam (RingHom R S)\nM : outParam (Type u_4)\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : outParam (Type u_5)\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : FunLike F M M₂\nself : ContinuousSemilinearMapClass F σ M M₂\n⊢ ContinuousMapClass F M M₂","decl":"/-- `ContinuousSemilinearMapClass F σ M M₂` asserts `F` is a type of bundled continuous\n`σ`-semilinear maps `M → M₂`.  See also `ContinuousLinearMapClass F R M M₂` for the case where\n`σ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring\nhomomorphism `σ : R →+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`\nand `f (c • x) = (σ c) • f x`. -/\nclass ContinuousSemilinearMapClass (F : Type*) {R S : outParam Type*} [Semiring R] [Semiring S]\n    (σ : outParam <| R →+* S) (M : outParam Type*) [TopologicalSpace M] [AddCommMonoid M]\n    (M₂ : outParam Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] [FunLike F M M₂]\n    extends SemilinearMapClass F σ M M₂, ContinuousMapClass F M M₂ : Prop\n\n"}
{"name":"ContinuousSemilinearMapClass.toSemilinearMapClass","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nS : outParam (Type u_3)\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring S\nσ : outParam (RingHom R S)\nM : outParam (Type u_4)\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommMonoid M\nM₂ : outParam (Type u_5)\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R M\ninst✝¹ : Module S M₂\ninst✝ : FunLike F M M₂\nself : ContinuousSemilinearMapClass F σ M M₂\n⊢ SemilinearMapClass F σ M M₂","decl":"/-- `ContinuousSemilinearMapClass F σ M M₂` asserts `F` is a type of bundled continuous\n`σ`-semilinear maps `M → M₂`.  See also `ContinuousLinearMapClass F R M M₂` for the case where\n`σ` is the identity map on `R`.  A map `f` between an `R`-module and an `S`-module over a ring\nhomomorphism `σ : R →+* S` is semilinear if it satisfies the two properties `f (x + y) = f x + f y`\nand `f (c • x) = (σ c) • f x`. -/\nclass ContinuousSemilinearMapClass (F : Type*) {R S : outParam Type*} [Semiring R] [Semiring S]\n    (σ : outParam <| R →+* S) (M : outParam Type*) [TopologicalSpace M] [AddCommMonoid M]\n    (M₂ : outParam Type*) [TopologicalSpace M₂] [AddCommMonoid M₂] [Module R M]\n    [Module S M₂] [FunLike F M M₂]\n    extends SemilinearMapClass F σ M M₂, ContinuousMapClass F M M₂ : Prop\n\n"}
{"name":"ContinuousLinearMap.coe_injective","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Function.Injective ContinuousLinearMap.toLinearMap","decl":"theorem coe_injective : Function.Injective ((↑) : (M₁ →SL[σ₁₂] M₂) → M₁ →ₛₗ[σ₁₂] M₂) := by\n  intro f g H\n  cases f\n  cases g\n  congr\n\n"}
{"name":"ContinuousLinearMap.continuousSemilinearMapClass","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ ContinuousSemilinearMapClass (ContinuousLinearMap σ₁₂ M₁ M₂) σ₁₂ M₁ M₂","decl":"instance continuousSemilinearMapClass :\n    ContinuousSemilinearMapClass (M₁ →SL[σ₁₂] M₂) σ₁₂ M₁ M₂ where\n  map_add f := map_add f.toLinearMap\n  map_continuous f := f.2\n  map_smulₛₗ f := f.toLinearMap.map_smul'\n\n"}
{"name":"ContinuousLinearMap.coe_mk","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : LinearMap σ₁₂ M₁ M₂\nh : Continuous f.toFun\n⊢ Eq (↑{ toLinearMap := f, cont := h }) f","decl":"theorem coe_mk (f : M₁ →ₛₗ[σ₁₂] M₂) (h) : (mk f h : M₁ →ₛₗ[σ₁₂] M₂) = f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_mk'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : LinearMap σ₁₂ M₁ M₂\nh : Continuous f.toFun\n⊢ Eq ⇑{ toLinearMap := f, cont := h } ⇑f","decl":"@[simp]\ntheorem coe_mk' (f : M₁ →ₛₗ[σ₁₂] M₂) (h) : (mk f h : M₁ → M₂) = f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.continuous","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Continuous ⇑f","decl":"@[continuity, fun_prop]\nprotected theorem continuous (f : M₁ →SL[σ₁₂] M₂) : Continuous f :=\n  f.2\n\n"}
{"name":"ContinuousLinearMap.uniformContinuous","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁹ : Semiring R₁\ninst✝⁸ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nE₁ : Type u_9\nE₂ : Type u_10\ninst✝⁷ : UniformSpace E₁\ninst✝⁶ : UniformSpace E₂\ninst✝⁵ : AddCommGroup E₁\ninst✝⁴ : AddCommGroup E₂\ninst✝³ : Module R₁ E₁\ninst✝² : Module R₂ E₂\ninst✝¹ : UniformAddGroup E₁\ninst✝ : UniformAddGroup E₂\nf : ContinuousLinearMap σ₁₂ E₁ E₂\n⊢ UniformContinuous ⇑f","decl":"protected theorem uniformContinuous {E₁ E₂ : Type*} [UniformSpace E₁] [UniformSpace E₂]\n    [AddCommGroup E₁] [AddCommGroup E₂] [Module R₁ E₁] [Module R₂ E₂] [UniformAddGroup E₁]\n    [UniformAddGroup E₂] (f : E₁ →SL[σ₁₂] E₂) : UniformContinuous f :=\n  uniformContinuous_addMonoidHom_of_continuous f.continuous\n\n"}
{"name":"ContinuousLinearMap.coe_inj","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Iff (Eq ↑f ↑g) (Eq f g)","decl":"@[simp, norm_cast]\ntheorem coe_inj {f g : M₁ →SL[σ₁₂] M₂} : (f : M₁ →ₛₗ[σ₁₂] M₂) = g ↔ f = g :=\n  coe_injective.eq_iff\n\n"}
{"name":"ContinuousLinearMap.coeFn_injective","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Function.Injective DFunLike.coe","decl":"theorem coeFn_injective : @Function.Injective (M₁ →SL[σ₁₂] M₂) (M₁ → M₂) (↑) :=\n  DFunLike.coe_injective\n\n"}
{"name":"ContinuousLinearMap.ext_iff","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Iff (Eq f g) (∀ (x : M₁), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext {f g : M₁ →SL[σ₁₂] M₂} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"ContinuousLinearMap.ext","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\nh : ∀ (x : M₁), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : M₁ →SL[σ₁₂] M₂} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"ContinuousLinearMap.coe_copy","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nf' : M₁ → M₂\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : M₁ →SL[σ₁₂] M₂) (f' : M₁ → M₂) (h : f' = ⇑f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.copy_eq","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nf' : M₁ → M₂\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : M₁ →SL[σ₁₂] M₂) (f' : M₁ → M₂) (h : f' = ⇑f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"ContinuousLinearMap.range_coeFn_eq","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Eq (Set.range DFunLike.coe) (Inter.inter (setOf fun f => Continuous f) (Set.range DFunLike.coe))","decl":"theorem range_coeFn_eq :\n    Set.range ((⇑) : (M₁ →SL[σ₁₂] M₂) → (M₁ → M₂)) =\n      {f | Continuous f} ∩ Set.range ((⇑) : (M₁ →ₛₗ[σ₁₂] M₂) → (M₁ → M₂)) := by\n  ext f\n  constructor\n  · rintro ⟨f, rfl⟩\n    exact ⟨f.continuous, f, rfl⟩\n  · rintro ⟨hfc, f, rfl⟩\n    exact ⟨⟨f, hfc⟩, rfl⟩\n\n-- make some straightforward lemmas available to `simp`.\n"}
{"name":"ContinuousLinearMap.map_zero","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (f 0) 0","decl":"protected theorem map_zero (f : M₁ →SL[σ₁₂] M₂) : f (0 : M₁) = 0 :=\n  map_zero f\n\n"}
{"name":"ContinuousLinearMap.map_add","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nx y : M₁\n⊢ Eq (f (HAdd.hAdd x y)) (HAdd.hAdd (f x) (f y))","decl":"protected theorem map_add (f : M₁ →SL[σ₁₂] M₂) (x y : M₁) : f (x + y) = f x + f y :=\n  map_add f x y\n\n"}
{"name":"ContinuousLinearMap.map_smulₛₗ","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nc : R₁\nx : M₁\n⊢ Eq (f (HSMul.hSMul c x)) (HSMul.hSMul (σ₁₂ c) (f x))","decl":"@[simp]\nprotected theorem map_smulₛₗ (f : M₁ →SL[σ₁₂] M₂) (c : R₁) (x : M₁) : f (c • x) = σ₁₂ c • f x :=\n  (toLinearMap _).map_smulₛₗ _ _\n\n"}
{"name":"ContinuousLinearMap.map_smul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁶ : Semiring R₁\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₁ M₂\nf : ContinuousLinearMap (RingHom.id R₁) M₁ M₂\nc : R₁\nx : M₁\n⊢ Eq (f (HSMul.hSMul c x)) (HSMul.hSMul c (f x))","decl":"protected theorem map_smul [Module R₁ M₂] (f : M₁ →L[R₁] M₂) (c : R₁) (x : M₁) :\n    f (c • x) = c • f x := by simp only [RingHom.id_apply, ContinuousLinearMap.map_smulₛₗ]\n\n"}
{"name":"ContinuousLinearMap.map_smul_of_tower","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"M₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\nR : Type u_9\nS : Type u_10\ninst✝⁵ : Semiring S\ninst✝⁴ : SMul R M₁\ninst✝³ : Module S M₁\ninst✝² : SMul R M₂\ninst✝¹ : Module S M₂\ninst✝ : LinearMap.CompatibleSMul M₁ M₂ R S\nf : ContinuousLinearMap (RingHom.id S) M₁ M₂\nc : R\nx : M₁\n⊢ Eq (f (HSMul.hSMul c x)) (HSMul.hSMul c (f x))","decl":"@[simp]\ntheorem map_smul_of_tower {R S : Type*} [Semiring S] [SMul R M₁] [Module S M₁] [SMul R M₂]\n    [Module S M₂] [LinearMap.CompatibleSMul M₁ M₂ R S] (f : M₁ →L[S] M₂) (c : R) (x : M₁) :\n    f (c • x) = c • f x :=\n  LinearMap.CompatibleSMul.map_smul (f : M₁ →ₗ[S] M₂) c x\n\n"}
{"name":"ContinuousLinearMap.coe_coe","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp, norm_cast]\ntheorem coe_coe (f : M₁ →SL[σ₁₂] M₂) : ⇑(f : M₁ →ₛₗ[σ₁₂] M₂) = f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.ext_ring_iff","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : TopologicalSpace R₁\nf g : ContinuousLinearMap (RingHom.id R₁) R₁ M₁\n⊢ Iff (Eq f g) (Eq (f 1) (g 1))","decl":"@[ext]\ntheorem ext_ring [TopologicalSpace R₁] {f g : R₁ →L[R₁] M₁} (h : f 1 = g 1) : f = g :=\n  coe_inj.1 <| LinearMap.ext_ring h\n\n"}
{"name":"ContinuousLinearMap.ext_ring","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : TopologicalSpace R₁\nf g : ContinuousLinearMap (RingHom.id R₁) R₁ M₁\nh : Eq (f 1) (g 1)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext_ring [TopologicalSpace R₁] {f g : R₁ →L[R₁] M₁} (h : f 1 = g 1) : f = g :=\n  coe_inj.1 <| LinearMap.ext_ring h\n\n"}
{"name":"ContinuousLinearMap.eqOn_closure_span","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : T2Space M₂\ns : Set M₁\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\nh : Set.EqOn (⇑f) (⇑g) s\n⊢ Set.EqOn (⇑f) (⇑g) (closure ↑(Submodule.span R₁ s))","decl":"/-- If two continuous linear maps are equal on a set `s`, then they are equal on the closure\nof the `Submodule.span` of this set. -/\ntheorem eqOn_closure_span [T2Space M₂] {s : Set M₁} {f g : M₁ →SL[σ₁₂] M₂} (h : Set.EqOn f g s) :\n    Set.EqOn f g (closure (Submodule.span R₁ s : Set M₁)) :=\n  (LinearMap.eqOn_span' h).closure f.continuous g.continuous\n\n"}
{"name":"ContinuousLinearMap.ext_on","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : T2Space M₂\ns : Set M₁\nhs : Dense ↑(Submodule.span R₁ s)\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\nh : Set.EqOn (⇑f) (⇑g) s\n⊢ Eq f g","decl":"/-- If the submodule generated by a set `s` is dense in the ambient module, then two continuous\nlinear maps equal on `s` are equal. -/\ntheorem ext_on [T2Space M₂] {s : Set M₁} (hs : Dense (Submodule.span R₁ s : Set M₁))\n    {f g : M₁ →SL[σ₁₂] M₂} (h : Set.EqOn f g s) : f = g :=\n  ext fun x => eqOn_closure_span h (hs x)\n\n"}
{"name":"Submodule.topologicalClosure_map","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹⁴ : Semiring R₁\ninst✝¹³ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝¹² : TopologicalSpace M₁\ninst✝¹¹ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝¹⁰ : TopologicalSpace M₂\ninst✝⁹ : AddCommMonoid M₂\ninst✝⁸ : Module R₁ M₁\ninst✝⁷ : Module R₂ M₂\ninst✝⁶ : RingHomSurjective σ₁₂\ninst✝⁵ : TopologicalSpace R₁\ninst✝⁴ : TopologicalSpace R₂\ninst✝³ : ContinuousSMul R₁ M₁\ninst✝² : ContinuousAdd M₁\ninst✝¹ : ContinuousSMul R₂ M₂\ninst✝ : ContinuousAdd M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\ns : Submodule R₁ M₁\n⊢ LE.le (Submodule.map (↑f) s.topologicalClosure) (Submodule.map (↑f) s).topologicalClosure","decl":"/-- Under a continuous linear map, the image of the `TopologicalClosure` of a submodule is\ncontained in the `TopologicalClosure` of its image. -/\ntheorem _root_.Submodule.topologicalClosure_map [RingHomSurjective σ₁₂] [TopologicalSpace R₁]\n    [TopologicalSpace R₂] [ContinuousSMul R₁ M₁] [ContinuousAdd M₁] [ContinuousSMul R₂ M₂]\n    [ContinuousAdd M₂] (f : M₁ →SL[σ₁₂] M₂) (s : Submodule R₁ M₁) :\n    s.topologicalClosure.map (f : M₁ →ₛₗ[σ₁₂] M₂) ≤\n      (s.map (f : M₁ →ₛₗ[σ₁₂] M₂)).topologicalClosure :=\n  image_closure_subset_closure_image f.continuous\n\n"}
{"name":"DenseRange.topologicalClosure_map_submodule","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹⁴ : Semiring R₁\ninst✝¹³ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝¹² : TopologicalSpace M₁\ninst✝¹¹ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝¹⁰ : TopologicalSpace M₂\ninst✝⁹ : AddCommMonoid M₂\ninst✝⁸ : Module R₁ M₁\ninst✝⁷ : Module R₂ M₂\ninst✝⁶ : RingHomSurjective σ₁₂\ninst✝⁵ : TopologicalSpace R₁\ninst✝⁴ : TopologicalSpace R₂\ninst✝³ : ContinuousSMul R₁ M₁\ninst✝² : ContinuousAdd M₁\ninst✝¹ : ContinuousSMul R₂ M₂\ninst✝ : ContinuousAdd M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nhf' : DenseRange ⇑f\ns : Submodule R₁ M₁\nhs : Eq s.topologicalClosure Top.top\n⊢ Eq (Submodule.map (↑f) s).topologicalClosure Top.top","decl":"/-- Under a dense continuous linear map, a submodule whose `TopologicalClosure` is `⊤` is sent to\nanother such submodule.  That is, the image of a dense set under a map with dense range is dense.\n-/\ntheorem _root_.DenseRange.topologicalClosure_map_submodule [RingHomSurjective σ₁₂]\n    [TopologicalSpace R₁] [TopologicalSpace R₂] [ContinuousSMul R₁ M₁] [ContinuousAdd M₁]\n    [ContinuousSMul R₂ M₂] [ContinuousAdd M₂] {f : M₁ →SL[σ₁₂] M₂} (hf' : DenseRange f)\n    {s : Submodule R₁ M₁} (hs : s.topologicalClosure = ⊤) :\n    (s.map (f : M₁ →ₛₗ[σ₁₂] M₂)).topologicalClosure = ⊤ := by\n  rw [SetLike.ext'_iff] at hs ⊢\n  simp only [Submodule.topologicalClosure_coe, Submodule.top_coe, ← dense_iff_closure_eq] at hs ⊢\n  exact hf'.dense_image f.continuous hs\n\n"}
{"name":"ContinuousLinearMap.smul_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : Module R₁ M₁\ninst✝⁴ : Module R₂ M₂\nS₂ : Type u_9\ninst✝³ : Monoid S₂\ninst✝² : DistribMulAction S₂ M₂\ninst✝¹ : SMulCommClass R₂ S₂ M₂\ninst✝ : ContinuousConstSMul S₂ M₂\nc : S₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nx : M₁\n⊢ Eq ((HSMul.hSMul c f) x) (HSMul.hSMul c (f x))","decl":"theorem smul_apply (c : S₂) (f : M₁ →SL[σ₁₂] M₂) (x : M₁) : (c • f) x = c • f x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_smul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : Module R₁ M₁\ninst✝⁴ : Module R₂ M₂\nS₂ : Type u_9\ninst✝³ : Monoid S₂\ninst✝² : DistribMulAction S₂ M₂\ninst✝¹ : SMulCommClass R₂ S₂ M₂\ninst✝ : ContinuousConstSMul S₂ M₂\nc : S₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (↑(HSMul.hSMul c f)) (HSMul.hSMul c ↑f)","decl":"@[simp, norm_cast]\ntheorem coe_smul (c : S₂) (f : M₁ →SL[σ₁₂] M₂) :\n    ↑(c • f) = c • (f : M₁ →ₛₗ[σ₁₂] M₂) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_smul'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : Module R₁ M₁\ninst✝⁴ : Module R₂ M₂\nS₂ : Type u_9\ninst✝³ : Monoid S₂\ninst✝² : DistribMulAction S₂ M₂\ninst✝¹ : SMulCommClass R₂ S₂ M₂\ninst✝ : ContinuousConstSMul S₂ M₂\nc : S₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (⇑(HSMul.hSMul c f)) (HSMul.hSMul c ⇑f)","decl":"@[simp, norm_cast]\ntheorem coe_smul' (c : S₂) (f : M₁ →SL[σ₁₂] M₂) :\n    ↑(c • f) = c • (f : M₁ → M₂) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.isScalarTower","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹⁷ : Semiring R₁\ninst✝¹⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝¹⁵ : TopologicalSpace M₁\ninst✝¹⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝¹³ : TopologicalSpace M₂\ninst✝¹² : AddCommMonoid M₂\ninst✝¹¹ : Module R₁ M₁\ninst✝¹⁰ : Module R₂ M₂\nS₂ : Type u_9\nT₂ : Type u_10\ninst✝⁹ : Monoid S₂\ninst✝⁸ : Monoid T₂\ninst✝⁷ : DistribMulAction S₂ M₂\ninst✝⁶ : SMulCommClass R₂ S₂ M₂\ninst✝⁵ : ContinuousConstSMul S₂ M₂\ninst✝⁴ : DistribMulAction T₂ M₂\ninst✝³ : SMulCommClass R₂ T₂ M₂\ninst✝² : ContinuousConstSMul T₂ M₂\ninst✝¹ : SMul S₂ T₂\ninst✝ : IsScalarTower S₂ T₂ M₂\n⊢ IsScalarTower S₂ T₂ (ContinuousLinearMap σ₁₂ M₁ M₂)","decl":"instance isScalarTower [SMul S₂ T₂] [IsScalarTower S₂ T₂ M₂] :\n    IsScalarTower S₂ T₂ (M₁ →SL[σ₁₂] M₂) :=\n  ⟨fun a b f => ext fun x => smul_assoc a b (f x)⟩\n\n"}
{"name":"ContinuousLinearMap.smulCommClass","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹⁶ : Semiring R₁\ninst✝¹⁵ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝¹⁴ : TopologicalSpace M₁\ninst✝¹³ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝¹² : TopologicalSpace M₂\ninst✝¹¹ : AddCommMonoid M₂\ninst✝¹⁰ : Module R₁ M₁\ninst✝⁹ : Module R₂ M₂\nS₂ : Type u_9\nT₂ : Type u_10\ninst✝⁸ : Monoid S₂\ninst✝⁷ : Monoid T₂\ninst✝⁶ : DistribMulAction S₂ M₂\ninst✝⁵ : SMulCommClass R₂ S₂ M₂\ninst✝⁴ : ContinuousConstSMul S₂ M₂\ninst✝³ : DistribMulAction T₂ M₂\ninst✝² : SMulCommClass R₂ T₂ M₂\ninst✝¹ : ContinuousConstSMul T₂ M₂\ninst✝ : SMulCommClass S₂ T₂ M₂\n⊢ SMulCommClass S₂ T₂ (ContinuousLinearMap σ₁₂ M₁ M₂)","decl":"instance smulCommClass [SMulCommClass S₂ T₂ M₂] : SMulCommClass S₂ T₂ (M₁ →SL[σ₁₂] M₂) :=\n  ⟨fun a b f => ext fun x => smul_comm a b (f x)⟩\n\n"}
{"name":"ContinuousLinearMap.default_def","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Eq Inhabited.default 0","decl":"@[simp]\ntheorem default_def : (default : M₁ →SL[σ₁₂] M₂) = 0 :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.zero_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nx : M₁\n⊢ Eq (0 x) 0","decl":"@[simp]\ntheorem zero_apply (x : M₁) : (0 : M₁ →SL[σ₁₂] M₂) x = 0 :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_zero","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Eq (↑0) 0","decl":"@[simp, norm_cast]\ntheorem coe_zero : ((0 : M₁ →SL[σ₁₂] M₂) : M₁ →ₛₗ[σ₁₂] M₂) = 0 :=\n  rfl\n\n/- no simp attribute on the next line as simp does not always simplify `0 x` to `0`\nwhen `0` is the zero function, while it does for the zero continuous linear map,\nand this is the most important property we care about. -/\n"}
{"name":"ContinuousLinearMap.coe_zero'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\n⊢ Eq (⇑0) 0","decl":"@[norm_cast]\ntheorem coe_zero' : ⇑(0 : M₁ →SL[σ₁₂] M₂) = 0 :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.exists_ne_zero","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nhf : Ne f 0\n⊢ Exists fun x => Ne (f x) 0","decl":"theorem exists_ne_zero {f : M₁ →SL[σ₁₂] M₂} (hf : f ≠ 0) : ∃ x, f x ≠ 0 := by\n  by_contra! h\n  exact hf (ContinuousLinearMap.ext h)\n\n"}
{"name":"ContinuousLinearMap.one_def","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\n⊢ Eq 1 (ContinuousLinearMap.id R₁ M₁)","decl":"theorem one_def : (1 : M₁ →L[R₁] M₁) = id R₁ M₁ :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.id_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nx : M₁\n⊢ Eq ((ContinuousLinearMap.id R₁ M₁) x) x","decl":"theorem id_apply (x : M₁) : id R₁ M₁ x = x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_id","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\n⊢ Eq (↑(ContinuousLinearMap.id R₁ M₁)) LinearMap.id","decl":"@[simp, norm_cast]\ntheorem coe_id : (id R₁ M₁ : M₁ →ₗ[R₁] M₁) = LinearMap.id :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_id'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\n⊢ Eq (⇑(ContinuousLinearMap.id R₁ M₁)) id","decl":"@[simp, norm_cast]\ntheorem coe_id' : ⇑(id R₁ M₁) = _root_.id :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_eq_id","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nf : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\n⊢ Iff (Eq (↑f) LinearMap.id) (Eq f (ContinuousLinearMap.id R₁ M₁))","decl":"@[simp, norm_cast]\ntheorem coe_eq_id {f : M₁ →L[R₁] M₁} : (f : M₁ →ₗ[R₁] M₁) = LinearMap.id ↔ f = id _ _ := by\n  rw [← coe_id, coe_inj]\n\n"}
{"name":"ContinuousLinearMap.one_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nx : M₁\n⊢ Eq (1 x) x","decl":"@[simp]\ntheorem one_apply (x : M₁) : (1 : M₁ →L[R₁] M₁) x = x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.instNontrivialId","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : Nontrivial M₁\n⊢ Nontrivial (ContinuousLinearMap (RingHom.id R₁) M₁ M₁)","decl":"instance [Nontrivial M₁] : Nontrivial (M₁ →L[R₁] M₁) :=\n  ⟨0, 1, fun e ↦\n    have ⟨x, hx⟩ := exists_ne (0 : M₁); hx (by simpa using DFunLike.congr_fun e.symm x)⟩\n\n"}
{"name":"ContinuousLinearMap.add_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : ContinuousAdd M₂\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\nx : M₁\n⊢ Eq ((HAdd.hAdd f g) x) (HAdd.hAdd (f x) (g x))","decl":"@[simp]\ntheorem add_apply (f g : M₁ →SL[σ₁₂] M₂) (x : M₁) : (f + g) x = f x + g x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_add","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : ContinuousAdd M₂\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (↑(HAdd.hAdd f g)) (HAdd.hAdd ↑f ↑g)","decl":"@[simp, norm_cast]\ntheorem coe_add (f g : M₁ →SL[σ₁₂] M₂) : (↑(f + g) : M₁ →ₛₗ[σ₁₂] M₂) = f + g :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_add'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : ContinuousAdd M₂\nf g : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[norm_cast]\ntheorem coe_add' (f g : M₁ →SL[σ₁₂] M₂) : ⇑(f + g) = f + g :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_sum","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : ContinuousAdd M₂\nι : Type u_9\nt : Finset ι\nf : ι → ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (↑(t.sum fun d => f d)) (t.sum fun d => ↑(f d))","decl":"@[simp, norm_cast]\ntheorem coe_sum {ι : Type*} (t : Finset ι) (f : ι → M₁ →SL[σ₁₂] M₂) :\n    ↑(∑ d ∈ t, f d) = (∑ d ∈ t, f d : M₁ →ₛₗ[σ₁₂] M₂) :=\n  map_sum (AddMonoidHom.mk ⟨((↑) : (M₁ →SL[σ₁₂] M₂) → M₁ →ₛₗ[σ₁₂] M₂), rfl⟩ fun _ _ => rfl) _ _\n\n"}
{"name":"ContinuousLinearMap.coe_sum'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : ContinuousAdd M₂\nι : Type u_9\nt : Finset ι\nf : ι → ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (⇑(t.sum fun d => f d)) (t.sum fun d => ⇑(f d))","decl":"@[simp, norm_cast]\ntheorem coe_sum' {ι : Type*} (t : Finset ι) (f : ι → M₁ →SL[σ₁₂] M₂) :\n    ⇑(∑ d ∈ t, f d) = ∑ d ∈ t, ⇑(f d) := by simp only [← coe_coe, coe_sum, LinearMap.coeFn_sum]\n\n"}
{"name":"ContinuousLinearMap.sum_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : ContinuousAdd M₂\nι : Type u_9\nt : Finset ι\nf : ι → ContinuousLinearMap σ₁₂ M₁ M₂\nb : M₁\n⊢ Eq ((t.sum fun d => f d) b) (t.sum fun d => (f d) b)","decl":"theorem sum_apply {ι : Type*} (t : Finset ι) (f : ι → M₁ →SL[σ₁₂] M₂) (b : M₁) :\n    (∑ d ∈ t, f d) b = ∑ d ∈ t, f d b := by simp only [coe_sum', Finset.sum_apply]\n\n"}
{"name":"ContinuousLinearMap.coe_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹² : Semiring R₁\ninst✝¹¹ : Semiring R₂\ninst✝¹⁰ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁵ : TopologicalSpace M₃\ninst✝⁴ : AddCommMonoid M₃\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₂ M₂\ninst✝¹ : Module R₃ M₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nh : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (↑(h.comp f)) ((↑h).comp ↑f)","decl":"@[simp, norm_cast]\ntheorem coe_comp (h : M₂ →SL[σ₂₃] M₃) (f : M₁ →SL[σ₁₂] M₂) :\n    (h.comp f : M₁ →ₛₗ[σ₁₃] M₃) = (h : M₂ →ₛₗ[σ₂₃] M₃).comp (f : M₁ →ₛₗ[σ₁₂] M₂) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_comp'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹² : Semiring R₁\ninst✝¹¹ : Semiring R₂\ninst✝¹⁰ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁵ : TopologicalSpace M₃\ninst✝⁴ : AddCommMonoid M₃\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₂ M₂\ninst✝¹ : Module R₃ M₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nh : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (⇑(h.comp f)) (Function.comp ⇑h ⇑f)","decl":"@[simp, norm_cast]\ntheorem coe_comp' (h : M₂ →SL[σ₂₃] M₃) (f : M₁ →SL[σ₁₂] M₂) : ⇑(h.comp f) = h ∘ f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.comp_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹² : Semiring R₁\ninst✝¹¹ : Semiring R₂\ninst✝¹⁰ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁵ : TopologicalSpace M₃\ninst✝⁴ : AddCommMonoid M₃\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₂ M₂\ninst✝¹ : Module R₃ M₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\nx : M₁\n⊢ Eq ((g.comp f) x) (g (f x))","decl":"theorem comp_apply (g : M₂ →SL[σ₂₃] M₃) (f : M₁ →SL[σ₁₂] M₂) (x : M₁) : (g.comp f) x = g (f x) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.comp_id","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (f.comp (ContinuousLinearMap.id R₁ M₁)) f","decl":"@[simp]\ntheorem comp_id (f : M₁ →SL[σ₁₂] M₂) : f.comp (id R₁ M₁) = f :=\n  ext fun _x => rfl\n\n"}
{"name":"ContinuousLinearMap.id_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq ((ContinuousLinearMap.id R₂ M₂).comp f) f","decl":"@[simp]\ntheorem id_comp (f : M₁ →SL[σ₁₂] M₂) : (id R₂ M₂).comp f = f :=\n  ext fun _x => rfl\n\n"}
{"name":"ContinuousLinearMap.comp_zero","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹² : Semiring R₁\ninst✝¹¹ : Semiring R₂\ninst✝¹⁰ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁵ : TopologicalSpace M₃\ninst✝⁴ : AddCommMonoid M₃\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₂ M₂\ninst✝¹ : Module R₃ M₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\n⊢ Eq (g.comp 0) 0","decl":"@[simp]\ntheorem comp_zero (g : M₂ →SL[σ₂₃] M₃) : g.comp (0 : M₁ →SL[σ₁₂] M₂) = 0 := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.zero_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹² : Semiring R₁\ninst✝¹¹ : Semiring R₂\ninst✝¹⁰ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝⁹ : TopologicalSpace M₁\ninst✝⁸ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁷ : TopologicalSpace M₂\ninst✝⁶ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁵ : TopologicalSpace M₃\ninst✝⁴ : AddCommMonoid M₃\ninst✝³ : Module R₁ M₁\ninst✝² : Module R₂ M₂\ninst✝¹ : Module R₃ M₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (ContinuousLinearMap.comp 0 f) 0","decl":"@[simp]\ntheorem zero_comp (f : M₁ →SL[σ₁₂] M₂) : (0 : M₂ →SL[σ₂₃] M₃).comp f = 0 := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.comp_add","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹⁴ : Semiring R₁\ninst✝¹³ : Semiring R₂\ninst✝¹² : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝¹¹ : TopologicalSpace M₁\ninst✝¹⁰ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\ninst✝⁵ : Module R₁ M₁\ninst✝⁴ : Module R₂ M₂\ninst✝³ : Module R₃ M₃\ninst✝² : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝¹ : ContinuousAdd M₂\ninst✝ : ContinuousAdd M₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf₁ f₂ : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (g.comp (HAdd.hAdd f₁ f₂)) (HAdd.hAdd (g.comp f₁) (g.comp f₂))","decl":"@[simp]\ntheorem comp_add [ContinuousAdd M₂] [ContinuousAdd M₃] (g : M₂ →SL[σ₂₃] M₃)\n    (f₁ f₂ : M₁ →SL[σ₁₂] M₂) : g.comp (f₁ + f₂) = g.comp f₁ + g.comp f₂ := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.add_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹³ : Semiring R₁\ninst✝¹² : Semiring R₂\ninst✝¹¹ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝¹⁰ : TopologicalSpace M₁\ninst✝⁹ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁶ : TopologicalSpace M₃\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : Module R₁ M₁\ninst✝³ : Module R₂ M₂\ninst✝² : Module R₃ M₃\ninst✝¹ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝ : ContinuousAdd M₃\ng₁ g₂ : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq ((HAdd.hAdd g₁ g₂).comp f) (HAdd.hAdd (g₁.comp f) (g₂.comp f))","decl":"@[simp]\ntheorem add_comp [ContinuousAdd M₃] (g₁ g₂ : M₂ →SL[σ₂₃] M₃) (f : M₁ →SL[σ₁₂] M₂) :\n    (g₁ + g₂).comp f = g₁.comp f + g₂.comp f := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.comp_finset_sum","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹⁴ : Semiring R₁\ninst✝¹³ : Semiring R₂\ninst✝¹² : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝¹¹ : TopologicalSpace M₁\ninst✝¹⁰ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\ninst✝⁵ : Module R₁ M₁\ninst✝⁴ : Module R₂ M₂\ninst✝³ : Module R₃ M₃\ninst✝² : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nι : Type u_9\ns : Finset ι\ninst✝¹ : ContinuousAdd M₂\ninst✝ : ContinuousAdd M₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ι → ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (g.comp (s.sum fun i => f i)) (s.sum fun i => g.comp (f i))","decl":"theorem comp_finset_sum {ι : Type*} {s : Finset ι}\n    [ContinuousAdd M₂] [ContinuousAdd M₃] (g : M₂ →SL[σ₂₃] M₃)\n    (f : ι → M₁ →SL[σ₁₂] M₂) : g.comp (∑ i ∈ s, f i) = ∑ i ∈ s, g.comp (f i) := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.finset_sum_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹³ : Semiring R₁\ninst✝¹² : Semiring R₂\ninst✝¹¹ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝¹⁰ : TopologicalSpace M₁\ninst✝⁹ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝⁶ : TopologicalSpace M₃\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : Module R₁ M₁\ninst✝³ : Module R₂ M₂\ninst✝² : Module R₃ M₃\ninst✝¹ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nι : Type u_9\ns : Finset ι\ninst✝ : ContinuousAdd M₃\ng : ι → ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq ((s.sum fun i => g i).comp f) (s.sum fun i => (g i).comp f)","decl":"theorem finset_sum_comp {ι : Type*} {s : Finset ι}\n    [ContinuousAdd M₃] (g : ι → M₂ →SL[σ₂₃] M₃)\n    (f : M₁ →SL[σ₁₂] M₂) : (∑ i ∈ s, g i).comp f = ∑ i ∈ s, (g i).comp f := by\n  ext\n  simp only [coe_comp', coe_sum', Function.comp_apply, Finset.sum_apply]\n\n"}
{"name":"ContinuousLinearMap.comp_assoc","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹⁹ : Semiring R₁\ninst✝¹⁸ : Semiring R₂\ninst✝¹⁷ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\nM₁ : Type u_4\ninst✝¹⁶ : TopologicalSpace M₁\ninst✝¹⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝¹⁴ : TopologicalSpace M₂\ninst✝¹³ : AddCommMonoid M₂\nM₃ : Type u_7\ninst✝¹² : TopologicalSpace M₃\ninst✝¹¹ : AddCommMonoid M₃\nM₄ : Type u_8\ninst✝¹⁰ : TopologicalSpace M₄\ninst✝⁹ : AddCommMonoid M₄\ninst✝⁸ : Module R₁ M₁\ninst✝⁷ : Module R₂ M₂\ninst✝⁶ : Module R₃ M₃\ninst✝⁵ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nR₄ : Type u_9\ninst✝⁴ : Semiring R₄\ninst✝³ : Module R₄ M₄\nσ₁₄ : RingHom R₁ R₄\nσ₂₄ : RingHom R₂ R₄\nσ₃₄ : RingHom R₃ R₄\ninst✝² : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝¹ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝ : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\nh : ContinuousLinearMap σ₃₄ M₃ M₄\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq ((h.comp g).comp f) (h.comp (g.comp f))","decl":"theorem comp_assoc {R₄ : Type*} [Semiring R₄] [Module R₄ M₄] {σ₁₄ : R₁ →+* R₄} {σ₂₄ : R₂ →+* R₄}\n    {σ₃₄ : R₃ →+* R₄} [RingHomCompTriple σ₁₃ σ₃₄ σ₁₄] [RingHomCompTriple σ₂₃ σ₃₄ σ₂₄]\n    [RingHomCompTriple σ₁₂ σ₂₄ σ₁₄] (h : M₃ →SL[σ₃₄] M₄) (g : M₂ →SL[σ₂₃] M₃) (f : M₁ →SL[σ₁₂] M₂) :\n    (h.comp g).comp f = h.comp (g.comp f) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.mul_def","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nf g : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\n⊢ Eq (HMul.hMul f g) (f.comp g)","decl":"theorem mul_def (f g : M₁ →L[R₁] M₁) : f * g = f.comp g :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_mul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nf g : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\n⊢ Eq (⇑(HMul.hMul f g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_mul (f g : M₁ →L[R₁] M₁) : ⇑(f * g) = f ∘ g :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.mul_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nf g : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\nx : M₁\n⊢ Eq ((HMul.hMul f g) x) (f (g x))","decl":"theorem mul_apply (f g : M₁ →L[R₁] M₁) (x : M₁) : (f * g) x = f (g x) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_pow","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\nf : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\nn : Nat\n⊢ Eq (⇑(HPow.hPow f n)) (Nat.iterate (⇑f) n)","decl":"theorem coe_pow (f : M₁ →L[R₁] M₁) (n : ℕ) : ⇑(f ^ n) = f^[n] :=\n  hom_coe_pow _ rfl (fun _ _ ↦ rfl) _ _\n\n"}
{"name":"ContinuousLinearMap.toLinearMapRingHom_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\nself : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\n⊢ Eq (ContinuousLinearMap.toLinearMapRingHom self) ↑self","decl":"/-- `ContinuousLinearMap.toLinearMap` as a `RingHom`. -/\n@[simps]\ndef toLinearMapRingHom [ContinuousAdd M₁] : (M₁ →L[R₁] M₁) →+* M₁ →ₗ[R₁] M₁ where\n  toFun := toLinearMap\n  map_zero' := rfl\n  map_one' := rfl\n  map_add' _ _ := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"ContinuousLinearMap.natCast_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\nn : Nat\nm : M₁\n⊢ Eq (↑n m) (HSMul.hSMul n m)","decl":"@[simp]\ntheorem natCast_apply [ContinuousAdd M₁] (n : ℕ) (m : M₁) : (↑n : M₁ →L[R₁] M₁) m = n • m :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.ofNat_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁵ : Semiring R₁\nM₁ : Type u_4\ninst✝⁴ : TopologicalSpace M₁\ninst✝³ : AddCommMonoid M₁\ninst✝² : Module R₁ M₁\ninst✝¹ : ContinuousAdd M₁\nn : Nat\ninst✝ : n.AtLeastTwo\nm : M₁\n⊢ Eq ((OfNat.ofNat n) m) (HSMul.hSMul (OfNat.ofNat n) m)","decl":"@[simp]\ntheorem ofNat_apply [ContinuousAdd M₁] (n : ℕ) [n.AtLeastTwo] (m : M₁) :\n    (ofNat(n) : M₁ →L[R₁] M₁) m = OfNat.ofNat n • m :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.smul_def","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\nf : ContinuousLinearMap (RingHom.id R₁) M₁ M₁\na : M₁\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp]\nprotected theorem smul_def (f : M₁ →L[R₁] M₁) (a : M₁) : f • a = f a :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.applyFaithfulSMul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\n⊢ FaithfulSMul (ContinuousLinearMap (RingHom.id R₁) M₁ M₁) M₁","decl":"/-- `ContinuousLinearMap.applyModule` is faithful. -/\ninstance applyFaithfulSMul : FaithfulSMul (M₁ →L[R₁] M₁) M₁ :=\n  ⟨fun {_ _} => ContinuousLinearMap.ext⟩\n\n"}
{"name":"ContinuousLinearMap.applySMulCommClass","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\n⊢ SMulCommClass R₁ (ContinuousLinearMap (RingHom.id R₁) M₁ M₁) M₁","decl":"instance applySMulCommClass : SMulCommClass R₁ (M₁ →L[R₁] M₁) M₁ where\n  smul_comm r e m := (e.map_smul r m).symm\n\n"}
{"name":"ContinuousLinearMap.applySMulCommClass'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\n⊢ SMulCommClass (ContinuousLinearMap (RingHom.id R₁) M₁ M₁) R₁ M₁","decl":"instance applySMulCommClass' : SMulCommClass (M₁ →L[R₁] M₁) R₁ M₁ where\n  smul_comm := ContinuousLinearMap.map_smul\n\n"}
{"name":"ContinuousLinearMap.continuousConstSMul_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁴ : Semiring R₁\nM₁ : Type u_4\ninst✝³ : TopologicalSpace M₁\ninst✝² : AddCommMonoid M₁\ninst✝¹ : Module R₁ M₁\ninst✝ : ContinuousAdd M₁\n⊢ ContinuousConstSMul (ContinuousLinearMap (RingHom.id R₁) M₁ M₁) M₁","decl":"instance continuousConstSMul_apply : ContinuousConstSMul (M₁ →L[R₁] M₁) M₁ :=\n  ⟨ContinuousLinearMap.continuous⟩\n\n"}
{"name":"ContinuousLinearMap.isClosed_ker","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹⁰ : Semiring R₁\ninst✝⁹ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁸ : TopologicalSpace M₁\ninst✝⁷ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁶ : TopologicalSpace M₂\ninst✝⁵ : AddCommMonoid M₂\ninst✝⁴ : Module R₁ M₁\ninst✝³ : Module R₂ M₂\nF : Type u_9\ninst✝² : T1Space M₂\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : ContinuousSemilinearMapClass F σ₁₂ M₁ M₂\nf : F\n⊢ IsClosed ↑(LinearMap.ker f)","decl":"theorem isClosed_ker [T1Space M₂] [FunLike F M₁ M₂] [ContinuousSemilinearMapClass F σ₁₂ M₁ M₂]\n    (f : F) :\n    IsClosed (ker f : Set M₁) :=\n  continuous_iff_isClosed.1 (map_continuous f) _ isClosed_singleton\n\n"}
{"name":"ContinuousLinearMap.isComplete_ker","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₂ : Type u_6\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : Module R₂ M₂\nF : Type u_9\nM' : Type u_10\ninst✝⁶ : UniformSpace M'\ninst✝⁵ : CompleteSpace M'\ninst✝⁴ : AddCommMonoid M'\ninst✝³ : Module R₁ M'\ninst✝² : T1Space M₂\ninst✝¹ : FunLike F M' M₂\ninst✝ : ContinuousSemilinearMapClass F σ₁₂ M' M₂\nf : F\n⊢ IsComplete ↑(LinearMap.ker f)","decl":"theorem isComplete_ker {M' : Type*} [UniformSpace M'] [CompleteSpace M'] [AddCommMonoid M']\n    [Module R₁ M'] [T1Space M₂] [FunLike F M' M₂] [ContinuousSemilinearMapClass F σ₁₂ M' M₂]\n    (f : F) :\n    IsComplete (ker f : Set M') :=\n  (isClosed_ker f).isComplete\n\n"}
{"name":"ContinuousLinearMap.completeSpace_ker","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₂ : Type u_6\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : Module R₂ M₂\nF : Type u_9\nM' : Type u_10\ninst✝⁶ : UniformSpace M'\ninst✝⁵ : CompleteSpace M'\ninst✝⁴ : AddCommMonoid M'\ninst✝³ : Module R₁ M'\ninst✝² : T1Space M₂\ninst✝¹ : FunLike F M' M₂\ninst✝ : ContinuousSemilinearMapClass F σ₁₂ M' M₂\nf : F\n⊢ CompleteSpace (Subtype fun x => Membership.mem (LinearMap.ker f) x)","decl":"instance completeSpace_ker {M' : Type*} [UniformSpace M'] [CompleteSpace M']\n    [AddCommMonoid M'] [Module R₁ M'] [T1Space M₂]\n    [FunLike F M' M₂] [ContinuousSemilinearMapClass F σ₁₂ M' M₂]\n    (f : F) : CompleteSpace (ker f) :=\n  (isComplete_ker f).completeSpace_coe\n\n"}
{"name":"ContinuousLinearMap.completeSpace_eqLocus","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹¹ : Semiring R₁\ninst✝¹⁰ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₂ : Type u_6\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : Module R₂ M₂\nF : Type u_9\nM' : Type u_10\ninst✝⁶ : UniformSpace M'\ninst✝⁵ : CompleteSpace M'\ninst✝⁴ : AddCommMonoid M'\ninst✝³ : Module R₁ M'\ninst✝² : T2Space M₂\ninst✝¹ : FunLike F M' M₂\ninst✝ : ContinuousSemilinearMapClass F σ₁₂ M' M₂\nf g : F\n⊢ CompleteSpace (Subtype fun x => Membership.mem (LinearMap.eqLocus f g) x)","decl":"instance completeSpace_eqLocus {M' : Type*} [UniformSpace M'] [CompleteSpace M']\n    [AddCommMonoid M'] [Module R₁ M'] [T2Space M₂]\n    [FunLike F M' M₂] [ContinuousSemilinearMapClass F σ₁₂ M' M₂]\n    (f g : F) : CompleteSpace (LinearMap.eqLocus f g) :=\n  IsClosed.completeSpace_coe <| isClosed_eq (map_continuous f) (map_continuous g)\n\n"}
{"name":"ContinuousLinearMap.coe_codRestrict","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\np : Submodule R₂ M₂\nh : ∀ (x : M₁), Membership.mem p (f x)\n⊢ Eq (↑(f.codRestrict p h)) (LinearMap.codRestrict p (↑f) h)","decl":"@[norm_cast]\ntheorem coe_codRestrict (f : M₁ →SL[σ₁₂] M₂) (p : Submodule R₂ M₂) (h : ∀ x, f x ∈ p) :\n    (f.codRestrict p h : M₁ →ₛₗ[σ₁₂] p) = (f : M₁ →ₛₗ[σ₁₂] M₂).codRestrict p h :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_codRestrict_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\np : Submodule R₂ M₂\nh : ∀ (x : M₁), Membership.mem p (f x)\nx : M₁\n⊢ Eq (↑((f.codRestrict p h) x)) (f x)","decl":"@[simp]\ntheorem coe_codRestrict_apply (f : M₁ →SL[σ₁₂] M₂) (p : Submodule R₂ M₂) (h : ∀ x, f x ∈ p) (x) :\n    (f.codRestrict p h x : M₂) = f x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.ker_codRestrict","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁷ : Semiring R₁\ninst✝⁶ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R₁ M₁\ninst✝ : Module R₂ M₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\np : Submodule R₂ M₂\nh : ∀ (x : M₁), Membership.mem p (f x)\n⊢ Eq (LinearMap.ker (f.codRestrict p h)) (LinearMap.ker f)","decl":"@[simp]\ntheorem ker_codRestrict (f : M₁ →SL[σ₁₂] M₂) (p : Submodule R₂ M₂) (h : ∀ x, f x ∈ p) :\n    ker (f.codRestrict p h) = ker f :=\n  (f : M₁ →ₛₗ[σ₁₂] M₂).ker_codRestrict p h\n\n"}
{"name":"ContinuousLinearMap.coe_rangeRestrict","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝⁸ : Semiring R₁\ninst✝⁷ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nM₁ : Type u_4\ninst✝⁶ : TopologicalSpace M₁\ninst✝⁵ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₁\ninst✝¹ : Module R₂ M₂\ninst✝ : RingHomSurjective σ₁₂\nf : ContinuousLinearMap σ₁₂ M₁ M₂\n⊢ Eq (↑f.rangeRestrict) (↑f).rangeRestrict","decl":"@[simp]\ntheorem coe_rangeRestrict [RingHomSurjective σ₁₂] (f : M₁ →SL[σ₁₂] M₂) :\n    (f.rangeRestrict : M₁ →ₛₗ[σ₁₂] LinearMap.range f) = (f : M₁ →ₛₗ[σ₁₂] M₂).rangeRestrict :=\n  rfl\n\n"}
{"name":"Submodule.coe_subtypeL","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\np : Submodule R₁ M₁\n⊢ Eq (↑p.subtypeL) p.subtype","decl":"@[simp, norm_cast]\ntheorem _root_.Submodule.coe_subtypeL (p : Submodule R₁ M₁) :\n    (p.subtypeL : p →ₗ[R₁] M₁) = p.subtype :=\n  rfl\n\n"}
{"name":"Submodule.coe_subtypeL'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\np : Submodule R₁ M₁\n⊢ Eq ⇑p.subtypeL ⇑p.subtype","decl":"@[simp]\ntheorem _root_.Submodule.coe_subtypeL' (p : Submodule R₁ M₁) : ⇑p.subtypeL = p.subtype :=\n  rfl\n\n"}
{"name":"Submodule.subtypeL_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\np : Submodule R₁ M₁\nx : Subtype fun x => Membership.mem p x\n⊢ Eq (p.subtypeL x) ↑x","decl":"@[simp] -- @[norm_cast] -- Porting note: A theorem with this can't have a rhs starting with `↑`.\ntheorem _root_.Submodule.subtypeL_apply (p : Submodule R₁ M₁) (x : p) : p.subtypeL x = x :=\n  rfl\n\n"}
{"name":"Submodule.range_subtypeL","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\np : Submodule R₁ M₁\n⊢ Eq (LinearMap.range p.subtypeL) p","decl":"@[simp]\ntheorem _root_.Submodule.range_subtypeL (p : Submodule R₁ M₁) : range p.subtypeL = p :=\n  Submodule.range_subtype _\n\n"}
{"name":"Submodule.ker_subtypeL","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝³ : Semiring R₁\nM₁ : Type u_4\ninst✝² : TopologicalSpace M₁\ninst✝¹ : AddCommMonoid M₁\ninst✝ : Module R₁ M₁\np : Submodule R₁ M₁\n⊢ Eq (LinearMap.ker p.subtypeL) Bot.bot","decl":"@[simp]\ntheorem _root_.Submodule.ker_subtypeL (p : Submodule R₁ M₁) : ker p.subtypeL = ⊥ :=\n  Submodule.ker_subtype _\n\n"}
{"name":"ContinuousLinearMap.smulRight_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"M₁ : Type u_4\ninst✝¹² : TopologicalSpace M₁\ninst✝¹¹ : AddCommMonoid M₁\nM₂ : Type u_6\ninst✝¹⁰ : TopologicalSpace M₂\ninst✝⁹ : AddCommMonoid M₂\nR : Type u_10\nS : Type u_11\ninst✝⁸ : Semiring R\ninst✝⁷ : Semiring S\ninst✝⁶ : Module R M₁\ninst✝⁵ : Module R M₂\ninst✝⁴ : Module R S\ninst✝³ : Module S M₂\ninst✝² : IsScalarTower R S M₂\ninst✝¹ : TopologicalSpace S\ninst✝ : ContinuousSMul S M₂\nc : ContinuousLinearMap (RingHom.id R) M₁ S\nf : M₂\nx : M₁\n⊢ Eq ((c.smulRight f) x) (HSMul.hSMul (c x) f)","decl":"@[simp]\ntheorem smulRight_apply {c : M₁ →L[R] S} {f : M₂} {x : M₁} :\n    (smulRight c f : M₁ → M₂) x = c x • f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.smulRight_one_one","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁵ : Semiring R₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₂\ninst✝¹ : TopologicalSpace R₁\ninst✝ : ContinuousSMul R₁ M₂\nc : ContinuousLinearMap (RingHom.id R₁) R₁ M₂\n⊢ Eq (ContinuousLinearMap.smulRight 1 (c 1)) c","decl":"@[simp]\ntheorem smulRight_one_one (c : R₁ →L[R₁] M₂) : smulRight (1 : R₁ →L[R₁] R₁) (c 1) = c := by\n  ext\n  simp [← ContinuousLinearMap.map_smul_of_tower]\n\n"}
{"name":"ContinuousLinearMap.smulRight_one_eq_iff","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁵ : Semiring R₁\nM₂ : Type u_6\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommMonoid M₂\ninst✝² : Module R₁ M₂\ninst✝¹ : TopologicalSpace R₁\ninst✝ : ContinuousSMul R₁ M₂\nf f' : M₂\n⊢ Iff (Eq (ContinuousLinearMap.smulRight 1 f) (ContinuousLinearMap.smulRight 1 f')) (Eq f f')","decl":"@[simp]\ntheorem smulRight_one_eq_iff {f f' : M₂} :\n    smulRight (1 : R₁ →L[R₁] R₁) f = smulRight (1 : R₁ →L[R₁] R₁) f' ↔ f = f' := by\n  simp only [ContinuousLinearMap.ext_ring_iff, smulRight_apply, one_apply, one_smul]\n\n"}
{"name":"ContinuousLinearMap.smulRight_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁶ : Semiring R₁\nM₂ : Type u_6\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : Module R₁ M₂\ninst✝² : TopologicalSpace R₁\ninst✝¹ : ContinuousSMul R₁ M₂\ninst✝ : ContinuousMul R₁\nx : M₂\nc : R₁\n⊢ Eq ((ContinuousLinearMap.smulRight 1 x).comp (ContinuousLinearMap.smulRight 1 c)) (ContinuousLinearMap.smulRight 1 (HSMul.hSMul c x))","decl":"theorem smulRight_comp [ContinuousMul R₁] {x : M₂} {c : R₁} :\n    (smulRight (1 : R₁ →L[R₁] R₁) x).comp (smulRight (1 : R₁ →L[R₁] R₁) c) =\n      smulRight (1 : R₁ →L[R₁] R₁) (c • x) := by\n  ext\n  simp [mul_smul]\n\n"}
{"name":"ContinuousLinearMap.toSpanSingleton_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁵ : Semiring R₁\nM₁ : Type u_4\ninst✝⁴ : TopologicalSpace M₁\ninst✝³ : AddCommMonoid M₁\ninst✝² : Module R₁ M₁\ninst✝¹ : TopologicalSpace R₁\ninst✝ : ContinuousSMul R₁ M₁\nx : M₁\nr : R₁\n⊢ Eq ((ContinuousLinearMap.toSpanSingleton R₁ x) r) (HSMul.hSMul r x)","decl":"theorem toSpanSingleton_apply (x : M₁) (r : R₁) : toSpanSingleton R₁ x r = r • x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.toSpanSingleton_add","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁶ : Semiring R₁\nM₁ : Type u_4\ninst✝⁵ : TopologicalSpace M₁\ninst✝⁴ : AddCommMonoid M₁\ninst✝³ : Module R₁ M₁\ninst✝² : TopologicalSpace R₁\ninst✝¹ : ContinuousSMul R₁ M₁\ninst✝ : ContinuousAdd M₁\nx y : M₁\n⊢ Eq (ContinuousLinearMap.toSpanSingleton R₁ (HAdd.hAdd x y)) (HAdd.hAdd (ContinuousLinearMap.toSpanSingleton R₁ x) (ContinuousLinearMap.toSpanSingleton R₁ y))","decl":"theorem toSpanSingleton_add [ContinuousAdd M₁] (x y : M₁) :\n    toSpanSingleton R₁ (x + y) = toSpanSingleton R₁ x + toSpanSingleton R₁ y := by\n  ext1; simp [toSpanSingleton_apply]\n\n"}
{"name":"ContinuousLinearMap.toSpanSingleton_smul'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R₁ : Type u_1\ninst✝⁹ : Semiring R₁\nM₁ : Type u_4\ninst✝⁸ : TopologicalSpace M₁\ninst✝⁷ : AddCommMonoid M₁\ninst✝⁶ : Module R₁ M₁\ninst✝⁵ : TopologicalSpace R₁\ninst✝⁴ : ContinuousSMul R₁ M₁\nα : Type u_10\ninst✝³ : Monoid α\ninst✝² : DistribMulAction α M₁\ninst✝¹ : ContinuousConstSMul α M₁\ninst✝ : SMulCommClass R₁ α M₁\nc : α\nx : M₁\n⊢ Eq (ContinuousLinearMap.toSpanSingleton R₁ (HSMul.hSMul c x)) (HSMul.hSMul c (ContinuousLinearMap.toSpanSingleton R₁ x))","decl":"theorem toSpanSingleton_smul' {α} [Monoid α] [DistribMulAction α M₁] [ContinuousConstSMul α M₁]\n    [SMulCommClass R₁ α M₁] (c : α) (x : M₁) :\n    toSpanSingleton R₁ (c • x) = c • toSpanSingleton R₁ x := by\n  ext1; rw [toSpanSingleton_apply, smul_apply, toSpanSingleton_apply, smul_comm]\n\n"}
{"name":"ContinuousLinearMap.toSpanSingleton_smul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_10\nM₁ : Type u_11\ninst✝⁵ : CommSemiring R\ninst✝⁴ : AddCommMonoid M₁\ninst✝³ : Module R M₁\ninst✝² : TopologicalSpace R\ninst✝¹ : TopologicalSpace M₁\ninst✝ : ContinuousSMul R M₁\nc : R\nx : M₁\n⊢ Eq (ContinuousLinearMap.toSpanSingleton R (HSMul.hSMul c x)) (HSMul.hSMul c (ContinuousLinearMap.toSpanSingleton R x))","decl":"/-- A special case of `to_span_singleton_smul'` for when `R` is commutative. -/\ntheorem toSpanSingleton_smul (R) {M₁} [CommSemiring R] [AddCommMonoid M₁] [Module R M₁]\n    [TopologicalSpace R] [TopologicalSpace M₁] [ContinuousSMul R M₁] (c : R) (x : M₁) :\n    toSpanSingleton R (c • x) = c • toSpanSingleton R x :=\n  toSpanSingleton_smul' R c x\n\n"}
{"name":"ContinuousLinearMap.map_neg","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁷ : Ring R\nR₂ : Type u_2\ninst✝⁶ : Ring R₂\nM : Type u_4\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommGroup M\nM₂ : Type u_5\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M\ninst✝ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nf : ContinuousLinearMap σ₁₂ M M₂\nx : M\n⊢ Eq (f (Neg.neg x)) (Neg.neg (f x))","decl":"protected theorem map_neg (f : M →SL[σ₁₂] M₂) (x : M) : f (-x) = -f x := by\n  exact map_neg f x\n\n"}
{"name":"ContinuousLinearMap.map_sub","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁷ : Ring R\nR₂ : Type u_2\ninst✝⁶ : Ring R₂\nM : Type u_4\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommGroup M\nM₂ : Type u_5\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M\ninst✝ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nf : ContinuousLinearMap σ₁₂ M M₂\nx y : M\n⊢ Eq (f (HSub.hSub x y)) (HSub.hSub (f x) (f y))","decl":"protected theorem map_sub (f : M →SL[σ₁₂] M₂) (x y : M) : f (x - y) = f x - f y := by\n  exact map_sub f x y\n\n"}
{"name":"ContinuousLinearMap.sub_apply'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁷ : Ring R\nR₂ : Type u_2\ninst✝⁶ : Ring R₂\nM : Type u_4\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddCommGroup M\nM₂ : Type u_5\ninst✝³ : TopologicalSpace M₂\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M\ninst✝ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nf g : ContinuousLinearMap σ₁₂ M M₂\nx : M\n⊢ Eq ((HSub.hSub ↑f ↑g) x) (HSub.hSub (f x) (g x))","decl":"@[simp]\ntheorem sub_apply' (f g : M →SL[σ₁₂] M₂) (x : M) : ((f : M →ₛₗ[σ₁₂] M₂) - g) x = f x - g x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.neg_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : Ring R\nR₂ : Type u_2\ninst✝⁷ : Ring R₂\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\ninst✝ : TopologicalAddGroup M₂\nf : ContinuousLinearMap σ₁₂ M M₂\nx : M\n⊢ Eq ((Neg.neg f) x) (Neg.neg (f x))","decl":"@[simp]\ntheorem neg_apply (f : M →SL[σ₁₂] M₂) (x : M) : (-f) x = -f x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_neg","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : Ring R\nR₂ : Type u_2\ninst✝⁷ : Ring R₂\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\ninst✝ : TopologicalAddGroup M₂\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (↑(Neg.neg f)) (Neg.neg ↑f)","decl":"@[simp, norm_cast]\ntheorem coe_neg (f : M →SL[σ₁₂] M₂) : (↑(-f) : M →ₛₗ[σ₁₂] M₂) = -f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_neg'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : Ring R\nR₂ : Type u_2\ninst✝⁷ : Ring R₂\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\ninst✝ : TopologicalAddGroup M₂\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[norm_cast]\ntheorem coe_neg' (f : M →SL[σ₁₂] M₂) : ⇑(-f) = -f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.sub_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : Ring R\nR₂ : Type u_2\ninst✝⁷ : Ring R₂\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\ninst✝ : TopologicalAddGroup M₂\nf g : ContinuousLinearMap σ₁₂ M M₂\nx : M\n⊢ Eq ((HSub.hSub f g) x) (HSub.hSub (f x) (g x))","decl":"theorem sub_apply (f g : M →SL[σ₁₂] M₂) (x : M) : (f - g) x = f x - g x :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_sub","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : Ring R\nR₂ : Type u_2\ninst✝⁷ : Ring R₂\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\ninst✝ : TopologicalAddGroup M₂\nf g : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (↑(HSub.hSub f g)) (HSub.hSub ↑f ↑g)","decl":"@[simp, norm_cast]\ntheorem coe_sub (f g : M →SL[σ₁₂] M₂) : (↑(f - g) : M →ₛₗ[σ₁₂] M₂) = f - g :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_sub'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : Ring R\nR₂ : Type u_2\ninst✝⁷ : Ring R₂\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R₂ M₂\nσ₁₂ : RingHom R R₂\ninst✝ : TopologicalAddGroup M₂\nf g : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[simp, norm_cast]\ntheorem coe_sub' (f g : M →SL[σ₁₂] M₂) : ⇑(f - g) = f - g :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.comp_neg","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝¹⁴ : Ring R\nR₂ : Type u_2\ninst✝¹³ : Ring R₂\nR₃ : Type u_3\ninst✝¹² : Ring R₃\nM : Type u_4\ninst✝¹¹ : TopologicalSpace M\ninst✝¹⁰ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommGroup M₂\nM₃ : Type u_6\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommGroup M₃\ninst✝⁵ : Module R M\ninst✝⁴ : Module R₂ M₂\ninst✝³ : Module R₃ M₃\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝² : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝¹ : TopologicalAddGroup M₂\ninst✝ : TopologicalAddGroup M₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (g.comp (Neg.neg f)) (Neg.neg (g.comp f))","decl":"@[simp]\ntheorem comp_neg [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] [TopologicalAddGroup M₂] [TopologicalAddGroup M₃]\n    (g : M₂ →SL[σ₂₃] M₃) (f : M →SL[σ₁₂] M₂) : g.comp (-f) = -g.comp f := by\n  ext x\n  simp\n\n"}
{"name":"ContinuousLinearMap.neg_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝¹³ : Ring R\nR₂ : Type u_2\ninst✝¹² : Ring R₂\nR₃ : Type u_3\ninst✝¹¹ : Ring R₃\nM : Type u_4\ninst✝¹⁰ : TopologicalSpace M\ninst✝⁹ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : AddCommGroup M₂\nM₃ : Type u_6\ninst✝⁶ : TopologicalSpace M₃\ninst✝⁵ : AddCommGroup M₃\ninst✝⁴ : Module R M\ninst✝³ : Module R₂ M₂\ninst✝² : Module R₃ M₃\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝¹ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝ : TopologicalAddGroup M₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq ((Neg.neg g).comp f) (Neg.neg (g.comp f))","decl":"@[simp]\ntheorem neg_comp [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] [TopologicalAddGroup M₃] (g : M₂ →SL[σ₂₃] M₃)\n    (f : M →SL[σ₁₂] M₂) : (-g).comp f = -g.comp f := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.comp_sub","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝¹⁴ : Ring R\nR₂ : Type u_2\ninst✝¹³ : Ring R₂\nR₃ : Type u_3\ninst✝¹² : Ring R₃\nM : Type u_4\ninst✝¹¹ : TopologicalSpace M\ninst✝¹⁰ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommGroup M₂\nM₃ : Type u_6\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommGroup M₃\ninst✝⁵ : Module R M\ninst✝⁴ : Module R₂ M₂\ninst✝³ : Module R₃ M₃\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝² : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝¹ : TopologicalAddGroup M₂\ninst✝ : TopologicalAddGroup M₃\ng : ContinuousLinearMap σ₂₃ M₂ M₃\nf₁ f₂ : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (g.comp (HSub.hSub f₁ f₂)) (HSub.hSub (g.comp f₁) (g.comp f₂))","decl":"@[simp]\ntheorem comp_sub [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] [TopologicalAddGroup M₂] [TopologicalAddGroup M₃]\n    (g : M₂ →SL[σ₂₃] M₃) (f₁ f₂ : M →SL[σ₁₂] M₂) : g.comp (f₁ - f₂) = g.comp f₁ - g.comp f₂ := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.sub_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝¹³ : Ring R\nR₂ : Type u_2\ninst✝¹² : Ring R₂\nR₃ : Type u_3\ninst✝¹¹ : Ring R₃\nM : Type u_4\ninst✝¹⁰ : TopologicalSpace M\ninst✝⁹ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁸ : TopologicalSpace M₂\ninst✝⁷ : AddCommGroup M₂\nM₃ : Type u_6\ninst✝⁶ : TopologicalSpace M₃\ninst✝⁵ : AddCommGroup M₃\ninst✝⁴ : Module R M\ninst✝³ : Module R₂ M₂\ninst✝² : Module R₃ M₃\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝¹ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝ : TopologicalAddGroup M₃\ng₁ g₂ : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq ((HSub.hSub g₁ g₂).comp f) (HSub.hSub (g₁.comp f) (g₂.comp f))","decl":"@[simp]\ntheorem sub_comp [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] [TopologicalAddGroup M₃] (g₁ g₂ : M₂ →SL[σ₂₃] M₃)\n    (f : M →SL[σ₁₂] M₂) : (g₁ - g₂).comp f = g₁.comp f - g₂.comp f := by\n  ext\n  simp\n\n"}
{"name":"ContinuousLinearMap.intCast_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁴ : Ring R\nM : Type u_4\ninst✝³ : TopologicalSpace M\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : TopologicalAddGroup M\nz : Int\nm : M\n⊢ Eq (↑z m) (HSMul.hSMul z m)","decl":"@[simp]\ntheorem intCast_apply [TopologicalAddGroup M] (z : ℤ) (m : M) : (↑z : M →L[R] M) m = z • m :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.smulRight_one_pow","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝² : Ring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalRing R\nc : R\nn : Nat\n⊢ Eq (HPow.hPow (ContinuousLinearMap.smulRight 1 c) n) (ContinuousLinearMap.smulRight 1 (HPow.hPow c n))","decl":"theorem smulRight_one_pow [TopologicalSpace R] [TopologicalRing R] (c : R) (n : ℕ) :\n    smulRight (1 : R →L[R] R) c ^ n = smulRight (1 : R →L[R] R) (c ^ n) := by\n  induction n with\n  | zero => ext; simp\n  | succ n ihn => rw [pow_succ, ihn, mul_def, smulRight_comp, smul_eq_mul, pow_succ']\n\n"}
{"name":"ContinuousLinearMap.coe_projKerOfRightInverse_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁹ : Ring R\nR₂ : Type u_2\ninst✝⁸ : Ring R₂\nM : Type u_4\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : AddCommGroup M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap σ₁₂ M M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\nx : M\n⊢ Eq (↑((f₁.projKerOfRightInverse f₂ h) x)) (HSub.hSub x (f₂ (f₁ x)))","decl":"@[simp]\ntheorem coe_projKerOfRightInverse_apply [TopologicalAddGroup M] (f₁ : M →SL[σ₁₂] M₂)\n    (f₂ : M₂ →SL[σ₂₁] M) (h : Function.RightInverse f₂ f₁) (x : M) :\n    (f₁.projKerOfRightInverse f₂ h x : M) = x - f₂ (f₁ x) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.projKerOfRightInverse_apply_idem","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁹ : Ring R\nR₂ : Type u_2\ninst✝⁸ : Ring R₂\nM : Type u_4\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : AddCommGroup M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap σ₁₂ M M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\nx : Subtype fun x => Membership.mem (LinearMap.ker f₁) x\n⊢ Eq ((f₁.projKerOfRightInverse f₂ h) ↑x) x","decl":"@[simp]\ntheorem projKerOfRightInverse_apply_idem [TopologicalAddGroup M] (f₁ : M →SL[σ₁₂] M₂)\n    (f₂ : M₂ →SL[σ₂₁] M) (h : Function.RightInverse f₂ f₁) (x : LinearMap.ker f₁) :\n    f₁.projKerOfRightInverse f₂ h x = x := by\n  ext1\n  simp\n\n"}
{"name":"ContinuousLinearMap.projKerOfRightInverse_comp_inv","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁹ : Ring R\nR₂ : Type u_2\ninst✝⁸ : Ring R₂\nM : Type u_4\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : AddCommGroup M\nM₂ : Type u_5\ninst✝⁵ : TopologicalSpace M₂\ninst✝⁴ : AddCommGroup M₂\ninst✝³ : Module R M\ninst✝² : Module R₂ M₂\nσ₁₂ : RingHom R R₂\nσ₂₁ : RingHom R₂ R\ninst✝¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap σ₁₂ M M₂\nf₂ : ContinuousLinearMap σ₂₁ M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\ny : M₂\n⊢ Eq ((f₁.projKerOfRightInverse f₂ h) (f₂ y)) 0","decl":"@[simp]\ntheorem projKerOfRightInverse_comp_inv [TopologicalAddGroup M] (f₁ : M →SL[σ₁₂] M₂)\n    (f₂ : M₂ →SL[σ₂₁] M) (h : Function.RightInverse f₂ f₁) (y : M₂) :\n    f₁.projKerOfRightInverse f₂ h (f₂ y) = 0 :=\n  Subtype.ext_iff_val.2 <| by simp [h y]\n\n"}
{"name":"ContinuousLinearMap.isOpenMap_of_ne_zero","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : DivisionRing R\ninst✝⁵ : ContinuousSub R\ninst✝⁴ : AddCommGroup M\ninst✝³ : TopologicalSpace M\ninst✝² : ContinuousAdd M\ninst✝¹ : Module R M\ninst✝ : ContinuousSMul R M\nf : ContinuousLinearMap (RingHom.id R) M R\nhf : Ne f 0\n⊢ IsOpenMap ⇑f","decl":"/-- A nonzero continuous linear functional is open. -/\nprotected theorem isOpenMap_of_ne_zero [TopologicalSpace R] [DivisionRing R] [ContinuousSub R]\n    [AddCommGroup M] [TopologicalSpace M] [ContinuousAdd M] [Module R M] [ContinuousSMul R M]\n    (f : M →L[R] R) (hf : f ≠ 0) : IsOpenMap f :=\n  let ⟨x, hx⟩ := exists_ne_zero hf\n  IsOpenMap.of_sections fun y =>\n    ⟨fun a => y + (a - f y) • (f x)⁻¹ • x, Continuous.continuousAt <| by continuity, by simp,\n      fun a => by simp [hx]⟩\n\n"}
{"name":"ContinuousLinearMap.smul_comp","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\nS₃ : Type u_5\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\ninst✝¹³ : Monoid S₃\nM : Type u_6\ninst✝¹² : TopologicalSpace M\ninst✝¹¹ : AddCommMonoid M\ninst✝¹⁰ : Module R M\nM₂ : Type u_7\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : Module R₂ M₂\nM₃ : Type u_8\ninst✝⁶ : TopologicalSpace M₃\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : Module R₃ M₃\ninst✝³ : DistribMulAction S₃ M₃\ninst✝² : SMulCommClass R₃ S₃ M₃\ninst✝¹ : ContinuousConstSMul S₃ M₃\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nc : S₃\nh : ContinuousLinearMap σ₂₃ M₂ M₃\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq ((HSMul.hSMul c h).comp f) (HSMul.hSMul c (h.comp f))","decl":"@[simp]\ntheorem smul_comp (c : S₃) (h : M₂ →SL[σ₂₃] M₃) (f : M →SL[σ₁₂] M₂) :\n    (c • h).comp f = c • h.comp f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.comp_smul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_4\ninst✝¹⁷ : Semiring R\ninst✝¹⁶ : Monoid S\nM : Type u_6\ninst✝¹⁵ : TopologicalSpace M\ninst✝¹⁴ : AddCommMonoid M\ninst✝¹³ : Module R M\nN₂ : Type u_9\ninst✝¹² : TopologicalSpace N₂\ninst✝¹¹ : AddCommMonoid N₂\ninst✝¹⁰ : Module R N₂\nN₃ : Type u_10\ninst✝⁹ : TopologicalSpace N₃\ninst✝⁸ : AddCommMonoid N₃\ninst✝⁷ : Module R N₃\ninst✝⁶ : DistribMulAction S N₃\ninst✝⁵ : SMulCommClass R S N₃\ninst✝⁴ : ContinuousConstSMul S N₃\ninst✝³ : DistribMulAction S N₂\ninst✝² : ContinuousConstSMul S N₂\ninst✝¹ : SMulCommClass R S N₂\ninst✝ : LinearMap.CompatibleSMul N₂ N₃ S R\nhₗ : ContinuousLinearMap (RingHom.id R) N₂ N₃\nc : S\nfₗ : ContinuousLinearMap (RingHom.id R) M N₂\n⊢ Eq (hₗ.comp (HSMul.hSMul c fₗ)) (HSMul.hSMul c (hₗ.comp fₗ))","decl":"@[simp]\ntheorem comp_smul [LinearMap.CompatibleSMul N₂ N₃ S R] (hₗ : N₂ →L[R] N₃) (c : S)\n    (fₗ : M →L[R] N₂) : hₗ.comp (c • fₗ) = c • hₗ.comp fₗ := by\n  ext x\n  exact hₗ.map_smul_of_tower c (fₗ x)\n\n"}
{"name":"ContinuousLinearMap.comp_smulₛₗ","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝¹⁶ : Semiring R\ninst✝¹⁵ : Semiring R₂\ninst✝¹⁴ : Semiring R₃\nM : Type u_6\ninst✝¹³ : TopologicalSpace M\ninst✝¹² : AddCommMonoid M\ninst✝¹¹ : Module R M\nM₂ : Type u_7\ninst✝¹⁰ : TopologicalSpace M₂\ninst✝⁹ : AddCommMonoid M₂\ninst✝⁸ : Module R₂ M₂\nM₃ : Type u_8\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\ninst✝⁵ : Module R₃ M₃\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝⁴ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝³ : SMulCommClass R₂ R₂ M₂\ninst✝² : SMulCommClass R₃ R₃ M₃\ninst✝¹ : ContinuousConstSMul R₂ M₂\ninst✝ : ContinuousConstSMul R₃ M₃\nh : ContinuousLinearMap σ₂₃ M₂ M₃\nc : R₂\nf : ContinuousLinearMap σ₁₂ M M₂\n⊢ Eq (h.comp (HSMul.hSMul c f)) (HSMul.hSMul (σ₂₃ c) (h.comp f))","decl":"@[simp]\ntheorem comp_smulₛₗ [SMulCommClass R₂ R₂ M₂] [SMulCommClass R₃ R₃ M₃] [ContinuousConstSMul R₂ M₂]\n    [ContinuousConstSMul R₃ M₃] (h : M₂ →SL[σ₂₃] M₃) (c : R₂) (f : M →SL[σ₁₂] M₂) :\n    h.comp (c • f) = σ₂₃ c • h.comp f := by\n  ext x\n  simp only [coe_smul', coe_comp', Function.comp_apply, Pi.smul_apply,\n    ContinuousLinearMap.map_smulₛₗ]\n\n"}
{"name":"ContinuousLinearMap.isCentralScalar","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nR₃ : Type u_3\nS₃ : Type u_5\ninst✝¹³ : Semiring R\ninst✝¹² : Semiring R₃\ninst✝¹¹ : Semiring S₃\nM : Type u_6\ninst✝¹⁰ : TopologicalSpace M\ninst✝⁹ : AddCommMonoid M\ninst✝⁸ : Module R M\nM₃ : Type u_8\ninst✝⁷ : TopologicalSpace M₃\ninst✝⁶ : AddCommMonoid M₃\ninst✝⁵ : Module R₃ M₃\ninst✝⁴ : Module S₃ M₃\ninst✝³ : SMulCommClass R₃ S₃ M₃\ninst✝² : ContinuousConstSMul S₃ M₃\nσ₁₃ : RingHom R R₃\ninst✝¹ : Module (MulOpposite S₃) M₃\ninst✝ : IsCentralScalar S₃ M₃\n⊢ IsCentralScalar S₃ (ContinuousLinearMap σ₁₃ M M₃)","decl":"instance isCentralScalar [Module S₃ᵐᵒᵖ M₃] [IsCentralScalar S₃ M₃] :\n    IsCentralScalar S₃ (M →SL[σ₁₃] M₃) where\n  op_smul_eq_smul _ _ := ext fun _ => op_smul_eq_smul _ _\n\n"}
{"name":"ContinuousLinearMap.coeLM_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_4\ninst✝¹¹ : Semiring R\ninst✝¹⁰ : Semiring S\nM : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : AddCommMonoid M\ninst✝⁷ : Module R M\nN₃ : Type u_10\ninst✝⁶ : TopologicalSpace N₃\ninst✝⁵ : AddCommMonoid N₃\ninst✝⁴ : Module R N₃\ninst✝³ : Module S N₃\ninst✝² : SMulCommClass R S N₃\ninst✝¹ : ContinuousConstSMul S N₃\ninst✝ : ContinuousAdd N₃\nself : ContinuousLinearMap (RingHom.id R) M N₃\n⊢ Eq ((ContinuousLinearMap.coeLM S) self) ↑self","decl":"/-- The coercion from `M →L[R] M₂` to `M →ₗ[R] M₂`, as a linear map. -/\n@[simps]\ndef coeLM : (M →L[R] N₃) →ₗ[S] M →ₗ[R] N₃ where\n  toFun := (↑)\n  map_add' f g := coe_add f g\n  map_smul' c f := coe_smul c f\n\n"}
{"name":"ContinuousLinearMap.coeLMₛₗ_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nR₃ : Type u_3\nS₃ : Type u_5\ninst✝¹² : Semiring R\ninst✝¹¹ : Semiring R₃\ninst✝¹⁰ : Semiring S₃\nM : Type u_6\ninst✝⁹ : TopologicalSpace M\ninst✝⁸ : AddCommMonoid M\ninst✝⁷ : Module R M\nM₃ : Type u_8\ninst✝⁶ : TopologicalSpace M₃\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : Module R₃ M₃\ninst✝³ : Module S₃ M₃\ninst✝² : SMulCommClass R₃ S₃ M₃\ninst✝¹ : ContinuousConstSMul S₃ M₃\nσ₁₃ : RingHom R R₃\ninst✝ : ContinuousAdd M₃\nself : ContinuousLinearMap σ₁₃ M M₃\n⊢ Eq ((ContinuousLinearMap.coeLMₛₗ σ₁₃) self) ↑self","decl":"/-- The coercion from `M →SL[σ] M₂` to `M →ₛₗ[σ] M₂`, as a linear map. -/\n@[simps]\ndef coeLMₛₗ : (M →SL[σ₁₃] M₃) →ₗ[S₃] M →ₛₗ[σ₁₃] M₃ where\n  toFun := (↑)\n  map_add' f g := coe_add f g\n  map_smul' c f := coe_smul c f\n\n"}
{"name":"ContinuousLinearMap.coe_smulRightₗ","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\nS : Type u_2\nT : Type u_3\nM : Type u_4\nM₂ : Type u_5\ninst✝¹⁸ : Semiring R\ninst✝¹⁷ : Semiring S\ninst✝¹⁶ : Semiring T\ninst✝¹⁵ : Module R S\ninst✝¹⁴ : AddCommMonoid M₂\ninst✝¹³ : Module R M₂\ninst✝¹² : Module S M₂\ninst✝¹¹ : IsScalarTower R S M₂\ninst✝¹⁰ : TopologicalSpace S\ninst✝⁹ : TopologicalSpace M₂\ninst✝⁸ : ContinuousSMul S M₂\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : AddCommMonoid M\ninst✝⁵ : Module R M\ninst✝⁴ : ContinuousAdd M₂\ninst✝³ : Module T M₂\ninst✝² : ContinuousConstSMul T M₂\ninst✝¹ : SMulCommClass R T M₂\ninst✝ : SMulCommClass S T M₂\nc : ContinuousLinearMap (RingHom.id R) M S\n⊢ Eq (⇑c.smulRightₗ) c.smulRight","decl":"@[simp]\ntheorem coe_smulRightₗ (c : M →L[R] S) : ⇑(smulRightₗ c : M₂ →ₗ[T] M →L[R] M₂) = c.smulRight :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.algebraMap_apply","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nM₂ : Type u_3\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M₂\ninst✝¹ : TopologicalAddGroup M₂\ninst✝ : ContinuousConstSMul R M₂\nr : R\nm : M₂\n⊢ Eq (((algebraMap R (ContinuousLinearMap (RingHom.id R) M₂ M₂)) r) m) (HSMul.hSMul r m)","decl":"@[simp] theorem algebraMap_apply (r : R) (m : M₂) : algebraMap R (M₂ →L[R] M₂) r m = r • m := rfl\n\n"}
{"name":"ContinuousLinearMap.coe_restrictScalars","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹⁰ : Ring A\ninst✝⁹ : AddCommGroup M\ninst✝⁸ : AddCommGroup M₂\ninst✝⁷ : Module A M\ninst✝⁶ : Module A M₂\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : TopologicalSpace M₂\nR : Type u_4\ninst✝³ : Ring R\ninst✝² : Module R M\ninst✝¹ : Module R M₂\ninst✝ : LinearMap.CompatibleSMul M M₂ R A\nf : ContinuousLinearMap (RingHom.id A) M M₂\n⊢ Eq (↑(ContinuousLinearMap.restrictScalars R f)) (↑R ↑f)","decl":"@[simp] -- @[norm_cast] -- Porting note: This theorem can't be a `norm_cast` theorem.\ntheorem coe_restrictScalars (f : M →L[A] M₂) :\n    (f.restrictScalars R : M →ₗ[R] M₂) = (f : M →ₗ[A] M₂).restrictScalars R :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_restrictScalars'","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹⁰ : Ring A\ninst✝⁹ : AddCommGroup M\ninst✝⁸ : AddCommGroup M₂\ninst✝⁷ : Module A M\ninst✝⁶ : Module A M₂\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : TopologicalSpace M₂\nR : Type u_4\ninst✝³ : Ring R\ninst✝² : Module R M\ninst✝¹ : Module R M₂\ninst✝ : LinearMap.CompatibleSMul M M₂ R A\nf : ContinuousLinearMap (RingHom.id A) M M₂\n⊢ Eq ⇑(ContinuousLinearMap.restrictScalars R f) ⇑f","decl":"@[simp]\ntheorem coe_restrictScalars' (f : M →L[A] M₂) : ⇑(f.restrictScalars R) = f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.restrictScalars_zero","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹⁰ : Ring A\ninst✝⁹ : AddCommGroup M\ninst✝⁸ : AddCommGroup M₂\ninst✝⁷ : Module A M\ninst✝⁶ : Module A M₂\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : TopologicalSpace M₂\nR : Type u_4\ninst✝³ : Ring R\ninst✝² : Module R M\ninst✝¹ : Module R M₂\ninst✝ : LinearMap.CompatibleSMul M M₂ R A\n⊢ Eq (ContinuousLinearMap.restrictScalars R 0) 0","decl":"@[simp]\ntheorem restrictScalars_zero : (0 : M →L[A] M₂).restrictScalars R = 0 :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.restrictScalars_add","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹¹ : Ring A\ninst✝¹⁰ : AddCommGroup M\ninst✝⁹ : AddCommGroup M₂\ninst✝⁸ : Module A M\ninst✝⁷ : Module A M₂\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\nR : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Module R M\ninst✝² : Module R M₂\ninst✝¹ : LinearMap.CompatibleSMul M M₂ R A\ninst✝ : TopologicalAddGroup M₂\nf g : ContinuousLinearMap (RingHom.id A) M M₂\n⊢ Eq (ContinuousLinearMap.restrictScalars R (HAdd.hAdd f g)) (HAdd.hAdd (ContinuousLinearMap.restrictScalars R f) (ContinuousLinearMap.restrictScalars R g))","decl":"@[simp]\ntheorem restrictScalars_add (f g : M →L[A] M₂) :\n    (f + g).restrictScalars R = f.restrictScalars R + g.restrictScalars R :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.restrictScalars_neg","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹¹ : Ring A\ninst✝¹⁰ : AddCommGroup M\ninst✝⁹ : AddCommGroup M₂\ninst✝⁸ : Module A M\ninst✝⁷ : Module A M₂\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalSpace M₂\nR : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Module R M\ninst✝² : Module R M₂\ninst✝¹ : LinearMap.CompatibleSMul M M₂ R A\ninst✝ : TopologicalAddGroup M₂\nf : ContinuousLinearMap (RingHom.id A) M M₂\n⊢ Eq (ContinuousLinearMap.restrictScalars R (Neg.neg f)) (Neg.neg (ContinuousLinearMap.restrictScalars R f))","decl":"@[simp]\ntheorem restrictScalars_neg (f : M →L[A] M₂) : (-f).restrictScalars R = -f.restrictScalars R :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.restrictScalars_smul","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹⁵ : Ring A\ninst✝¹⁴ : AddCommGroup M\ninst✝¹³ : AddCommGroup M₂\ninst✝¹² : Module A M\ninst✝¹¹ : Module A M₂\ninst✝¹⁰ : TopologicalSpace M\ninst✝⁹ : TopologicalSpace M₂\nR : Type u_4\ninst✝⁸ : Ring R\ninst✝⁷ : Module R M\ninst✝⁶ : Module R M₂\ninst✝⁵ : LinearMap.CompatibleSMul M M₂ R A\nS : Type u_5\ninst✝⁴ : Ring S\ninst✝³ : Module S M₂\ninst✝² : ContinuousConstSMul S M₂\ninst✝¹ : SMulCommClass A S M₂\ninst✝ : SMulCommClass R S M₂\nc : S\nf : ContinuousLinearMap (RingHom.id A) M M₂\n⊢ Eq (ContinuousLinearMap.restrictScalars R (HSMul.hSMul c f)) (HSMul.hSMul c (ContinuousLinearMap.restrictScalars R f))","decl":"@[simp]\ntheorem restrictScalars_smul (c : S) (f : M →L[A] M₂) :\n    (c • f).restrictScalars R = c • f.restrictScalars R :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_restrictScalarsₗ","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"A : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝¹⁶ : Ring A\ninst✝¹⁵ : AddCommGroup M\ninst✝¹⁴ : AddCommGroup M₂\ninst✝¹³ : Module A M\ninst✝¹² : Module A M₂\ninst✝¹¹ : TopologicalSpace M\ninst✝¹⁰ : TopologicalSpace M₂\nR : Type u_4\ninst✝⁹ : Ring R\ninst✝⁸ : Module R M\ninst✝⁷ : Module R M₂\ninst✝⁶ : LinearMap.CompatibleSMul M M₂ R A\nS : Type u_5\ninst✝⁵ : Ring S\ninst✝⁴ : Module S M₂\ninst✝³ : ContinuousConstSMul S M₂\ninst✝² : SMulCommClass A S M₂\ninst✝¹ : SMulCommClass R S M₂\ninst✝ : TopologicalAddGroup M₂\n⊢ Eq (⇑(ContinuousLinearMap.restrictScalarsₗ A M M₂ R S)) (ContinuousLinearMap.restrictScalars R)","decl":"@[simp]\ntheorem coe_restrictScalarsₗ : ⇑(restrictScalarsₗ A M M₂ R S) = restrictScalars R :=\n  rfl\n\n"}
{"name":"Submodule.ClosedComplemented.exists_isClosed_isCompl","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁴ : Ring R\nM : Type u_2\ninst✝³ : TopologicalSpace M\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\np : Submodule R M\ninst✝ : T1Space (Subtype fun x => Membership.mem p x)\nh : p.ClosedComplemented\n⊢ Exists fun q => And (IsClosed ↑q) (IsCompl p q)","decl":"theorem ClosedComplemented.exists_isClosed_isCompl {p : Submodule R M} [T1Space p]\n    (h : ClosedComplemented p) :\n    ∃ q : Submodule R M, IsClosed (q : Set M) ∧ IsCompl p q :=\n  Exists.elim h fun f hf => ⟨ker f, isClosed_ker f, LinearMap.isCompl_of_proj hf⟩\n\n"}
{"name":"Submodule.ClosedComplemented.isClosed","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁵ : Ring R\nM : Type u_2\ninst✝⁴ : TopologicalSpace M\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : TopologicalAddGroup M\ninst✝ : T1Space M\np : Submodule R M\nh : p.ClosedComplemented\n⊢ IsClosed ↑p","decl":"protected theorem ClosedComplemented.isClosed [TopologicalAddGroup M] [T1Space M]\n    {p : Submodule R M} (h : ClosedComplemented p) : IsClosed (p : Set M) := by\n  rcases h with ⟨f, hf⟩\n  have : ker (id R M - p.subtypeL.comp f) = p := LinearMap.ker_id_sub_eq_of_proj hf\n  exact this ▸ isClosed_ker _\n\n"}
{"name":"Submodule.closedComplemented_bot","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝³ : Ring R\nM : Type u_2\ninst✝² : TopologicalSpace M\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\n⊢ Bot.bot.ClosedComplemented","decl":"@[simp]\ntheorem closedComplemented_bot : ClosedComplemented (⊥ : Submodule R M) :=\n  ⟨0, fun x => by simp only [zero_apply, eq_zero_of_bot_submodule x]⟩\n\n"}
{"name":"Submodule.closedComplemented_top","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝³ : Ring R\nM : Type u_2\ninst✝² : TopologicalSpace M\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\n⊢ Top.top.ClosedComplemented","decl":"@[simp]\ntheorem closedComplemented_top : ClosedComplemented (⊤ : Submodule R M) :=\n  ⟨(id R M).codRestrict ⊤ fun _x => trivial, fun x => Subtype.ext_iff_val.2 <| by simp⟩\n\n"}
{"name":"ContinuousLinearMap.closedComplemented_ker_of_rightInverse","module":"Mathlib.Topology.Algebra.Module.LinearMap","initialProofState":"R : Type u_1\ninst✝⁷ : Ring R\nM : Type u_2\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : AddCommGroup M\nM₂ : Type u_3\ninst✝⁴ : TopologicalSpace M₂\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M\ninst✝¹ : Module R M₂\ninst✝ : TopologicalAddGroup M\nf₁ : ContinuousLinearMap (RingHom.id R) M M₂\nf₂ : ContinuousLinearMap (RingHom.id R) M₂ M\nh : Function.RightInverse ⇑f₂ ⇑f₁\n⊢ (LinearMap.ker f₁).ClosedComplemented","decl":"theorem ContinuousLinearMap.closedComplemented_ker_of_rightInverse {R : Type*} [Ring R]\n    {M : Type*} [TopologicalSpace M] [AddCommGroup M] {M₂ : Type*} [TopologicalSpace M₂]\n    [AddCommGroup M₂] [Module R M] [Module R M₂] [TopologicalAddGroup M] (f₁ : M →L[R] M₂)\n    (f₂ : M₂ →L[R] M) (h : Function.RightInverse f₂ f₁) : (ker f₁).ClosedComplemented :=\n  ⟨f₁.projKerOfRightInverse f₂ h, f₁.projKerOfRightInverse_apply_idem f₂ h⟩\n"}
