{"name":"coborder_mem_residual","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nhs : IsLocallyClosed s\n⊢ Membership.mem (residual α) (coborder s)","decl":"theorem coborder_mem_residual {s : Set α} (hs : IsLocallyClosed s) : coborder s ∈ residual α :=\n  residual_of_dense_open hs.isOpen_coborder dense_coborder\n\n"}
{"name":"closure_residualEq","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nhs : IsLocallyClosed s\n⊢ (residual α).EventuallyEq (closure s) s","decl":"theorem closure_residualEq {s : Set α} (hs : IsLocallyClosed s) : closure s =ᵇ s := by\n  rw [Filter.eventuallyEq_set]\n  filter_upwards [coborder_mem_residual hs] with x hx\n  nth_rewrite 2 [← closure_inter_coborder (s := s)]\n  simp [hx]\n\n"}
{"name":"BaireMeasurableSet.of_mem_residual","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : Membership.mem (residual α) s\n⊢ BaireMeasurableSet s","decl":"theorem of_mem_residual (h : s ∈ residual _) : BaireMeasurableSet s :=\n  eventuallyMeasurableSet_of_mem_filter (α := α) h\n\n"}
{"name":"MeasurableSet.baireMeasurableSet","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ns : Set α\ninst✝¹ : MeasurableSpace α\ninst✝ : BorelSpace α\nh : MeasurableSet s\n⊢ BaireMeasurableSet s","decl":"theorem _root_.MeasurableSet.baireMeasurableSet [MeasurableSpace α] [BorelSpace α]\n    (h : MeasurableSet s) : BaireMeasurableSet s := by\n  borelize α\n  exact h.eventuallyMeasurableSet\n\n"}
{"name":"IsOpen.baireMeasurableSet","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : IsOpen s\n⊢ BaireMeasurableSet s","decl":"theorem _root_.IsOpen.baireMeasurableSet (h : IsOpen s) : BaireMeasurableSet s := by\n  borelize α\n  exact h.measurableSet.baireMeasurableSet\n\n"}
{"name":"BaireMeasurableSet.compl","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : BaireMeasurableSet s\n⊢ BaireMeasurableSet (HasCompl.compl s)","decl":"theorem compl (h : BaireMeasurableSet s) : BaireMeasurableSet sᶜ := MeasurableSet.compl h\n\n"}
{"name":"BaireMeasurableSet.of_compl","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : BaireMeasurableSet (HasCompl.compl s)\n⊢ BaireMeasurableSet s","decl":"theorem of_compl (h : BaireMeasurableSet sᶜ) : BaireMeasurableSet s := MeasurableSet.of_compl h\n\n"}
{"name":"IsMeagre.baireMeasurableSet","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : IsMeagre s\n⊢ BaireMeasurableSet s","decl":"theorem _root_.IsMeagre.baireMeasurableSet (h : IsMeagre s) : BaireMeasurableSet s :=\n  (of_mem_residual h).of_compl\n\n"}
{"name":"BaireMeasurableSet.iUnion","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\nι : Sort u_3\ninst✝ : Countable ι\ns : ι → Set α\nh : ∀ (i : ι), BaireMeasurableSet (s i)\n⊢ BaireMeasurableSet (Set.iUnion fun i => s i)","decl":"theorem iUnion {ι : Sort*} [Countable ι] {s : ι → Set α}\n    (h : ∀ i, BaireMeasurableSet (s i)) : BaireMeasurableSet (⋃ i, s i) :=\n  MeasurableSet.iUnion h\n\n"}
{"name":"BaireMeasurableSet.biUnion","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nι : Type u_3\ns : ι → Set α\nt : Set ι\nht : t.Countable\nh : ∀ (i : ι), Membership.mem t i → BaireMeasurableSet (s i)\n⊢ BaireMeasurableSet (Set.iUnion fun i => Set.iUnion fun h => s i)","decl":"theorem biUnion {ι : Type*}  {s : ι → Set α} {t : Set ι} (ht : t.Countable)\n    (h : ∀ i ∈ t, BaireMeasurableSet (s i)) : BaireMeasurableSet (⋃ i ∈ t, s i) :=\n  MeasurableSet.biUnion ht h\n\n"}
{"name":"BaireMeasurableSet.sUnion","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set (Set α)\nhs : s.Countable\nh : ∀ (t : Set α), Membership.mem s t → BaireMeasurableSet t\n⊢ BaireMeasurableSet s.sUnion","decl":"theorem sUnion {s : Set (Set α)} (hs : s.Countable)\n    (h : ∀ t ∈ s, BaireMeasurableSet t) : BaireMeasurableSet (⋃₀ s) :=\n  MeasurableSet.sUnion hs h\n\n"}
{"name":"BaireMeasurableSet.iInter","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\nι : Sort u_3\ninst✝ : Countable ι\ns : ι → Set α\nh : ∀ (i : ι), BaireMeasurableSet (s i)\n⊢ BaireMeasurableSet (Set.iInter fun i => s i)","decl":"theorem iInter {ι : Sort*} [Countable ι] {s : ι → Set α}\n    (h : ∀ i, BaireMeasurableSet (s i)) : BaireMeasurableSet (⋂ i, s i) :=\n  MeasurableSet.iInter h\n\n"}
{"name":"BaireMeasurableSet.biInter","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nι : Type u_3\ns : ι → Set α\nt : Set ι\nht : t.Countable\nh : ∀ (i : ι), Membership.mem t i → BaireMeasurableSet (s i)\n⊢ BaireMeasurableSet (Set.iInter fun i => Set.iInter fun h => s i)","decl":"theorem biInter {ι : Type*}  {s : ι → Set α} {t : Set ι} (ht : t.Countable)\n    (h : ∀ i ∈ t, BaireMeasurableSet (s i)) : BaireMeasurableSet (⋂ i ∈ t, s i) :=\n  MeasurableSet.biInter ht h\n\n"}
{"name":"BaireMeasurableSet.sInter","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set (Set α)\nhs : s.Countable\nh : ∀ (t : Set α), Membership.mem s t → BaireMeasurableSet t\n⊢ BaireMeasurableSet s.sInter","decl":"theorem sInter {s : Set (Set α)} (hs : s.Countable)\n    (h : ∀ t ∈ s, BaireMeasurableSet t) : BaireMeasurableSet (⋂₀ s) :=\n  MeasurableSet.sInter hs h\n\n"}
{"name":"BaireMeasurableSet.union","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : Set α\nhs : BaireMeasurableSet s\nht : BaireMeasurableSet t\n⊢ BaireMeasurableSet (Union.union s t)","decl":"theorem union (hs : BaireMeasurableSet s) (ht : BaireMeasurableSet t) :\n    BaireMeasurableSet (s ∪ t) :=\n  MeasurableSet.union hs ht\n\n"}
{"name":"BaireMeasurableSet.inter","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : Set α\nhs : BaireMeasurableSet s\nht : BaireMeasurableSet t\n⊢ BaireMeasurableSet (Inter.inter s t)","decl":"theorem inter (hs : BaireMeasurableSet s) (ht : BaireMeasurableSet t) :\n    BaireMeasurableSet (s ∩ t) :=\n  MeasurableSet.inter hs ht\n\n"}
{"name":"BaireMeasurableSet.diff","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : Set α\nhs : BaireMeasurableSet s\nht : BaireMeasurableSet t\n⊢ BaireMeasurableSet (SDiff.sdiff s t)","decl":"theorem diff (hs : BaireMeasurableSet s) (ht : BaireMeasurableSet t) :\n    BaireMeasurableSet (s \\ t) :=\n  MeasurableSet.diff hs ht\n\n"}
{"name":"BaireMeasurableSet.congr","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns t : Set α\nhs : BaireMeasurableSet s\nh : (residual α).EventuallyEq s t\n⊢ BaireMeasurableSet t","decl":"theorem congr (hs : BaireMeasurableSet s) (h : s =ᵇ t) : BaireMeasurableSet t :=\n  EventuallyMeasurableSet.congr (α := α) hs h.symm\n\n"}
{"name":"MeasurableSet.residualEq_isOpen","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ns : Set α\ninst✝¹ : MeasurableSpace α\ninst✝ : BorelSpace α\nh : MeasurableSet s\n⊢ Exists fun u => And (IsOpen u) ((residual α).EventuallyEq s u)","decl":"/--Any Borel set differs from some open set by a meager set. -/\ntheorem MeasurableSet.residualEq_isOpen [MeasurableSpace α] [BorelSpace α] (h : MeasurableSet s) :\n    ∃ u : Set α, IsOpen u ∧ s =ᵇ u := by\n  induction s, h using MeasurableSet.induction_on_open with\n  | isOpen U hU => exact ⟨U, hU, .rfl⟩\n  | compl s _ ihs =>\n    obtain ⟨U, Uo, hsU⟩ := ihs\n    use (closure U)ᶜ, isClosed_closure.isOpen_compl\n    exact .compl <| hsU.trans <| .symm <| closure_residualEq Uo.isLocallyClosed\n  | iUnion f _ _ ihf =>\n    choose u uo su using ihf\n    exact ⟨⋃ i, u i, isOpen_iUnion uo, EventuallyEq.countable_iUnion su⟩\n\n"}
{"name":"BaireMeasurableSet.residualEq_isOpen","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\nh : BaireMeasurableSet s\n⊢ Exists fun u => And (IsOpen u) ((residual α).EventuallyEq s u)","decl":"/--Any `BaireMeasurableSet` differs from some open set by a meager set. -/\ntheorem BaireMeasurableSet.residualEq_isOpen (h : BaireMeasurableSet s) :\n    ∃ u : Set α, (IsOpen u) ∧ s =ᵇ u := by\n  borelize α\n  rcases h with ⟨t, ht, hst⟩\n  rcases ht.residualEq_isOpen with ⟨u, hu, htu⟩\n  exact ⟨u, hu, hst.trans htu⟩\n\n"}
{"name":"BaireMeasurableSet.iff_residualEq_isOpen","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\ns : Set α\n⊢ Iff (BaireMeasurableSet s) (Exists fun u => And (IsOpen u) ((residual α).EventuallyEq s u))","decl":"/--A set is Baire measurable if and only if it differs from some open set by a meager set. -/\ntheorem BaireMeasurableSet.iff_residualEq_isOpen :\n    BaireMeasurableSet s ↔ ∃ u : Set α, (IsOpen u) ∧ s =ᵇ u :=\n  ⟨fun h => h.residualEq_isOpen , fun ⟨_, uo, ueq⟩ => uo.baireMeasurableSet.congr ueq.symm⟩\n\n"}
{"name":"tendsto_residual_of_isOpenMap","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhc : Continuous f\nho : IsOpenMap f\n⊢ Filter.Tendsto f (residual α) (residual β)","decl":"theorem tendsto_residual_of_isOpenMap (hc : Continuous f) (ho : IsOpenMap f) :\n    Tendsto f (residual α) (residual β) := by\n  apply le_countableGenerate_iff_of_countableInterFilter.mpr\n  rintro t ⟨ht, htd⟩\n  exact residual_of_dense_open (ht.preimage hc) (htd.preimage ho)\n\n"}
{"name":"IsMeagre.preimage_of_isOpenMap","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhc : Continuous f\nho : IsOpenMap f\ns : Set β\nh : IsMeagre s\n⊢ IsMeagre (Set.preimage f s)","decl":"/-- The preimage of a meager set under a continuous open map is meager. -/\ntheorem IsMeagre.preimage_of_isOpenMap (hc : Continuous f) (ho : IsOpenMap f)\n    {s : Set β} (h : IsMeagre s) : IsMeagre (f ⁻¹' s) :=\n  tendsto_residual_of_isOpenMap hc ho h\n\n"}
{"name":"BaireMeasurableSet.preimage","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhc : Continuous f\nho : IsOpenMap f\ns : Set β\nh : BaireMeasurableSet s\n⊢ BaireMeasurableSet (Set.preimage f s)","decl":"/-- The preimage of a `BaireMeasurableSet` under a continuous open map is Baire measurable. -/\ntheorem BaireMeasurableSet.preimage (hc : Continuous f) (ho : IsOpenMap f)\n    {s : Set β} (h : BaireMeasurableSet s) : BaireMeasurableSet (f⁻¹' s) := by\n  rcases h with ⟨u, hu, hsu⟩\n  refine ⟨f ⁻¹' u, ?_, hsu.filter_mono <| tendsto_residual_of_isOpenMap hc ho⟩\n  borelize α β\n  exact hc.measurable hu\n\n"}
{"name":"Homeomorph.residual_map_eq","module":"Mathlib.Topology.Baire.BaireMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nh : Homeomorph α β\n⊢ Eq (Filter.map (⇑h) (residual α)) (residual β)","decl":"theorem Homeomorph.residual_map_eq (h : α ≃ₜ β) : (residual α).map h = residual β := by\n  refine le_antisymm (tendsto_residual_of_isOpenMap h.continuous h.isOpenMap) (le_map ?_)\n  simp_rw [← preimage_symm]\n  exact tendsto_residual_of_isOpenMap h.symm.continuous h.symm.isOpenMap\n\n"}
