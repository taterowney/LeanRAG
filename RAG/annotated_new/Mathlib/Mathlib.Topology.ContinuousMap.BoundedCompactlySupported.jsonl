{"name":"mem_compactlySupported","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNormedRing γ\nf : BoundedContinuousFunction α γ\n⊢ Iff (Membership.mem (compactlySupported α γ) f) (HasCompactSupport ⇑f)","decl":"lemma mem_compactlySupported {f : α →ᵇ γ} :\n    f ∈ C_cb(α, γ) ↔ HasCompactSupport f :=\n  TwoSidedIdeal.mem_mk' {z : α →ᵇ γ | HasCompactSupport z} .zero .add .neg' .mul_left .mul_right f\n\n"}
{"name":"exist_norm_eq","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNormedRing γ\nc : Nonempty α\nf : BoundedContinuousFunction α γ\nh : Membership.mem (compactlySupported α γ) f\n⊢ Exists fun x => Eq (Norm.norm (f x)) (Norm.norm f)","decl":"lemma exist_norm_eq [c : Nonempty α] {f : α →ᵇ γ} (h : f ∈ C_cb(α, γ)) : ∃ (x : α),\n    ‖f x‖ = ‖f‖ := by\n  by_cases hs : (tsupport f).Nonempty\n  · obtain ⟨x, _, hmax⟩ := mem_compactlySupported.mp h |>.exists_isMaxOn hs <|\n      (map_continuous f).norm.continuousOn\n    refine ⟨x, le_antisymm (norm_coe_le_norm f x) (norm_le (norm_nonneg _) |>.mpr fun y ↦ ?_)⟩\n    by_cases hy : y ∈ tsupport f\n    · exact hmax hy\n    · simp [image_eq_zero_of_nmem_tsupport hy]\n  · suffices f = 0 by simp [this]\n    rwa [not_nonempty_iff_eq_empty, tsupport_eq_empty_iff, ← coe_zero, ← DFunLike.ext'_iff] at hs\n\n"}
{"name":"norm_lt_iff_of_compactlySupported","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNormedRing γ\nf : BoundedContinuousFunction α γ\nh : Membership.mem (compactlySupported α γ) f\nM : Real\nM0 : LT.lt 0 M\n⊢ Iff (LT.lt (Norm.norm f) M) (∀ (x : α), LT.lt (Norm.norm (f x)) M)","decl":"theorem norm_lt_iff_of_compactlySupported {f : α →ᵇ γ} (h : f ∈ C_cb(α, γ)) {M : ℝ}\n    (M0 : 0 < M) : ‖f‖ < M ↔ ∀ (x : α), ‖f x‖ < M := by\n  refine ⟨fun hn x ↦ lt_of_le_of_lt (norm_coe_le_norm f x) hn, ?_⟩\n  · obtain (he | he) := isEmpty_or_nonempty α\n    · simpa\n    · obtain ⟨x, hx⟩ := exist_norm_eq h\n      exact fun h ↦ hx ▸ h x\n\n"}
{"name":"norm_lt_iff_of_nonempty_compactlySupported","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNormedRing γ\nc : Nonempty α\nf : BoundedContinuousFunction α γ\nh : Membership.mem (compactlySupported α γ) f\nM : Real\n⊢ Iff (LT.lt (Norm.norm f) M) (∀ (x : α), LT.lt (Norm.norm (f x)) M)","decl":"theorem norm_lt_iff_of_nonempty_compactlySupported [c : Nonempty α] {f : α →ᵇ γ}\n    (h : f ∈ C_cb(α, γ)) {M : ℝ} : ‖f‖ < M ↔ ∀ (x : α), ‖f x‖ < M := by\n  obtain (hM | hM) := lt_or_le 0 M\n  · exact norm_lt_iff_of_compactlySupported h hM\n  · exact ⟨fun h ↦ False.elim <| (h.trans_le hM).not_le (by positivity),\n      fun h ↦ False.elim <| (h (Classical.arbitrary α) |>.trans_le hM).not_le (by positivity)⟩\n\n"}
{"name":"compactlySupported_eq_top_of_isCompact","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNormedRing γ\nh : IsCompact Set.univ\n⊢ Eq (compactlySupported α γ) Top.top","decl":"theorem compactlySupported_eq_top_of_isCompact (h : IsCompact (Set.univ : Set α)) :\n    C_cb(α, γ) = ⊤ :=\n  eq_top_iff.mpr fun _ _ ↦ h.of_isClosed_subset (isClosed_tsupport _) (subset_univ _)\n\n/- This is intentionally not marked `@[simp]` to prevent Lean looking for a `CompactSpace α`\ninstance every time it sees `C_cb(α, γ)`. -/\n"}
{"name":"compactlySupported_eq_top","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNormedRing γ\ninst✝ : CompactSpace α\n⊢ Eq (compactlySupported α γ) Top.top","decl":"theorem compactlySupported_eq_top [CompactSpace α] : C_cb(α, γ) = ⊤ :=\n  compactlySupported_eq_top_of_isCompact CompactSpace.isCompact_univ\n\n"}
{"name":"compactlySupported_eq_top_iff","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNormedRing γ\ninst✝ : Nontrivial γ\n⊢ Iff (Eq (compactlySupported α γ) Top.top) (IsCompact Set.univ)","decl":"theorem compactlySupported_eq_top_iff [Nontrivial γ] :\n    C_cb(α, γ) = ⊤ ↔ IsCompact (Set.univ : Set α) := by\n  refine ⟨fun h ↦ ?_, compactlySupported_eq_top_of_isCompact⟩\n  obtain ⟨x, hx⟩ := exists_ne (0 : γ)\n  simpa [tsupport, Function.support_const hx]\n    using (mem_compactlySupported (f := const α x).mp (by simp [h])).isCompact\n\n"}
{"name":"ofCompactSupport_mem","module":"Mathlib.Topology.ContinuousMap.BoundedCompactlySupported","initialProofState":"α : Type u_1\nγ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNormedRing γ\ng : α → γ\nhg₁ : Continuous g\nhg₂ : HasCompactSupport g\n⊢ Membership.mem (compactlySupported α γ) (ofCompactSupport g hg₁ hg₂)","decl":"lemma ofCompactSupport_mem (g : α → γ) (hg₁ : Continuous g) (hg₂ : HasCompactSupport g) :\n    ofCompactSupport g hg₁ hg₂ ∈ C_cb(α, γ) := mem_compactlySupported.mpr hg₂\n\n"}
