{"name":"Matrix.instUniformAddGroup","module":"Mathlib.Topology.UniformSpace.Matrix","initialProofState":"m : Type u_1\nn : Type u_2\n𝕜 : Type u_3\ninst✝² : UniformSpace 𝕜\ninst✝¹ : AddGroup 𝕜\ninst✝ : UniformAddGroup 𝕜\n⊢ UniformAddGroup (Matrix m n 𝕜)","decl":"instance instUniformAddGroup [AddGroup 𝕜] [UniformAddGroup 𝕜] :\n    UniformAddGroup (Matrix m n 𝕜) :=\n  inferInstanceAs <| UniformAddGroup (m → n → 𝕜)\n\n"}
{"name":"Matrix.uniformity","module":"Mathlib.Topology.UniformSpace.Matrix","initialProofState":"m : Type u_1\nn : Type u_2\n𝕜 : Type u_3\ninst✝ : UniformSpace 𝕜\n⊢ Eq (uniformity (Matrix m n 𝕜)) (iInf fun i => iInf fun j => Filter.comap (fun a => { fst := a.1 i j, snd := a.2 i j }) (uniformity 𝕜))","decl":"theorem uniformity :\n    𝓤 (Matrix m n 𝕜) = ⨅ (i : m) (j : n), (𝓤 𝕜).comap fun a => (a.1 i j, a.2 i j) := by\n  erw [Pi.uniformity]\n  simp_rw [Pi.uniformity, Filter.comap_iInf, Filter.comap_comap]\n  rfl\n\n"}
{"name":"Matrix.uniformContinuous","module":"Mathlib.Topology.UniformSpace.Matrix","initialProofState":"m : Type u_1\nn : Type u_2\n𝕜 : Type u_3\ninst✝¹ : UniformSpace 𝕜\nβ : Type u_4\ninst✝ : UniformSpace β\nf : β → Matrix m n 𝕜\n⊢ Iff (UniformContinuous f) (∀ (i : m) (j : n), UniformContinuous fun x => f x i j)","decl":"theorem uniformContinuous {β : Type*} [UniformSpace β] {f : β → Matrix m n 𝕜} :\n    UniformContinuous f ↔ ∀ i j, UniformContinuous fun x => f x i j := by\n  simp only [UniformContinuous, Matrix.uniformity, Filter.tendsto_iInf, Filter.tendsto_comap_iff]\n  apply Iff.intro <;> intro a <;> apply a\n\n"}
{"name":"Matrix.instCompleteSpace","module":"Mathlib.Topology.UniformSpace.Matrix","initialProofState":"m : Type u_1\nn : Type u_2\n𝕜 : Type u_3\ninst✝¹ : UniformSpace 𝕜\ninst✝ : CompleteSpace 𝕜\n⊢ CompleteSpace (Matrix m n 𝕜)","decl":"instance [CompleteSpace 𝕜] : CompleteSpace (Matrix m n 𝕜) :=\n  (by infer_instance : CompleteSpace (m → n → 𝕜))\n\n"}
{"name":"Matrix.instT0Space","module":"Mathlib.Topology.UniformSpace.Matrix","initialProofState":"m : Type u_1\nn : Type u_2\n𝕜 : Type u_3\ninst✝¹ : UniformSpace 𝕜\ninst✝ : T0Space 𝕜\n⊢ T0Space (Matrix m n 𝕜)","decl":"instance [T0Space 𝕜] : T0Space (Matrix m n 𝕜) :=\n  inferInstanceAs (T0Space (m → n → 𝕜))\n\n"}
