{"name":"OrderIso.mulLeft₀_symm_apply","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝³ : GroupWithZero G₀\ninst✝² : PartialOrder G₀\ninst✝¹ : PosMulMono G₀\ninst✝ : PosMulReflectLE G₀\na : G₀\nha : LT.lt 0 a\nx : G₀\n⊢ Eq ((RelIso.symm (OrderIso.mulLeft₀ a ha)) x) (HMul.hMul (Inv.inv a) x)","decl":"/-- `Equiv.mulLeft₀` as an order isomorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef mulLeft₀ (a : G₀) (ha : 0 < a) : G₀ ≃o G₀ where\n  toEquiv := .mulLeft₀ a ha.ne'\n  map_rel_iff' := mul_le_mul_left ha\n\n"}
{"name":"OrderIso.mulLeft₀_apply","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝³ : GroupWithZero G₀\ninst✝² : PartialOrder G₀\ninst✝¹ : PosMulMono G₀\ninst✝ : PosMulReflectLE G₀\na : G₀\nha : LT.lt 0 a\nx : G₀\n⊢ Eq ((OrderIso.mulLeft₀ a ha) x) (HMul.hMul a x)","decl":"/-- `Equiv.mulLeft₀` as an order isomorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef mulLeft₀ (a : G₀) (ha : 0 < a) : G₀ ≃o G₀ where\n  toEquiv := .mulLeft₀ a ha.ne'\n  map_rel_iff' := mul_le_mul_left ha\n\n"}
{"name":"OrderIso.mulLeft₀_symm","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝⁴ : GroupWithZero G₀\ninst✝³ : PartialOrder G₀\ninst✝² : PosMulMono G₀\ninst✝¹ : PosMulReflectLE G₀\ninst✝ : ZeroLEOneClass G₀\na : G₀\nha : LT.lt 0 a\n⊢ Eq (OrderIso.mulLeft₀ a ha).symm (OrderIso.mulLeft₀ (Inv.inv a) ⋯)","decl":"lemma mulLeft₀_symm (a : G₀) (ha : 0 < a) : (mulLeft₀ a ha).symm = mulLeft₀ a⁻¹ (inv_pos.2 ha) := by\n  ext; rfl\n\n"}
{"name":"OrderIso.mulRight₀_apply","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝³ : GroupWithZero G₀\ninst✝² : PartialOrder G₀\ninst✝¹ : MulPosMono G₀\ninst✝ : MulPosReflectLE G₀\na : G₀\nha : LT.lt 0 a\nx : G₀\n⊢ Eq ((OrderIso.mulRight₀ a ha) x) (HMul.hMul x a)","decl":"/-- `Equiv.mulRight₀` as an order isomorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef mulRight₀ (a : G₀) (ha : 0 < a) : G₀ ≃o G₀ where\n  toEquiv := .mulRight₀ a ha.ne'\n  map_rel_iff' := mul_le_mul_right ha\n\n"}
{"name":"OrderIso.mulRight₀_symm_apply","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝³ : GroupWithZero G₀\ninst✝² : PartialOrder G₀\ninst✝¹ : MulPosMono G₀\ninst✝ : MulPosReflectLE G₀\na : G₀\nha : LT.lt 0 a\nx : G₀\n⊢ Eq ((RelIso.symm (OrderIso.mulRight₀ a ha)) x) (HMul.hMul x (Inv.inv a))","decl":"/-- `Equiv.mulRight₀` as an order isomorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef mulRight₀ (a : G₀) (ha : 0 < a) : G₀ ≃o G₀ where\n  toEquiv := .mulRight₀ a ha.ne'\n  map_rel_iff' := mul_le_mul_right ha\n\n"}
{"name":"OrderIso.mulRight₀_symm","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝⁵ : GroupWithZero G₀\ninst✝⁴ : PartialOrder G₀\ninst✝³ : MulPosMono G₀\ninst✝² : MulPosReflectLE G₀\ninst✝¹ : ZeroLEOneClass G₀\ninst✝ : PosMulReflectLT G₀\na : G₀\nha : LT.lt 0 a\n⊢ Eq (OrderIso.mulRight₀ a ha).symm (OrderIso.mulRight₀ (Inv.inv a) ⋯)","decl":"lemma mulRight₀_symm (a : G₀) (ha : 0 < a) :\n    (mulRight₀ a ha).symm = mulRight₀ a⁻¹ (inv_pos.2 ha) := by ext; rfl\n\n"}
{"name":"OrderIso.divRight₀_symm_apply","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝⁵ : GroupWithZero G₀\ninst✝⁴ : PartialOrder G₀\ninst✝³ : ZeroLEOneClass G₀\ninst✝² : MulPosStrictMono G₀\ninst✝¹ : MulPosReflectLE G₀\ninst✝ : PosMulReflectLT G₀\na : G₀\nha : LT.lt 0 a\nx✝ : G₀\n⊢ Eq ((RelIso.symm (OrderIso.divRight₀ a ha)) x✝) (HMul.hMul x✝ a)","decl":"/-- `Equiv.divRight₀` as an order isomorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef divRight₀ [ZeroLEOneClass G₀] [MulPosStrictMono G₀] [MulPosReflectLE G₀] [PosMulReflectLT G₀]\n    (a : G₀) (ha : 0 < a) : G₀ ≃o G₀ where\n  toEquiv := .divRight₀ a ha.ne'\n  map_rel_iff' {b c} := by\n    simp only [Equiv.divRight₀_apply, div_eq_mul_inv]\n    exact mul_le_mul_right (a := a⁻¹) (inv_pos.mpr ha)\n\n"}
{"name":"OrderIso.divRight₀_apply","module":"Mathlib.Algebra.Order.GroupWithZero.Unbundled.Lemmas","initialProofState":"G₀ : Type u_1\ninst✝⁵ : GroupWithZero G₀\ninst✝⁴ : PartialOrder G₀\ninst✝³ : ZeroLEOneClass G₀\ninst✝² : MulPosStrictMono G₀\ninst✝¹ : MulPosReflectLE G₀\ninst✝ : PosMulReflectLT G₀\na : G₀\nha : LT.lt 0 a\nx✝ : G₀\n⊢ Eq ((OrderIso.divRight₀ a ha) x✝) (HDiv.hDiv x✝ a)","decl":"/-- `Equiv.divRight₀` as an order isomorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef divRight₀ [ZeroLEOneClass G₀] [MulPosStrictMono G₀] [MulPosReflectLE G₀] [PosMulReflectLT G₀]\n    (a : G₀) (ha : 0 < a) : G₀ ≃o G₀ where\n  toEquiv := .divRight₀ a ha.ne'\n  map_rel_iff' {b c} := by\n    simp only [Equiv.divRight₀_apply, div_eq_mul_inv]\n    exact mul_le_mul_right (a := a⁻¹) (inv_pos.mpr ha)\n\n"}
