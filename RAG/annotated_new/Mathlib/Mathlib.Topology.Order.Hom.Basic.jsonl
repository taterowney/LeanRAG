{"name":"ContinuousOrderHom.mk.sizeOf_spec","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoOrderHom : OrderHom α β\ncontinuous_toFun : Continuous toOrderHom.toFun\n⊢ Eq (SizeOf.sizeOf { toOrderHom := toOrderHom, continuous_toFun := continuous_toFun }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toOrderHom)) (SizeOf.sizeOf continuous_toFun))","decl":"/-- The type of continuous monotone maps from `α` to `β`, aka Priestley homomorphisms. -/\nstructure ContinuousOrderHom (α β : Type*) [Preorder α] [Preorder β] [TopologicalSpace α]\n  [TopologicalSpace β] extends OrderHom α β where\n  continuous_toFun : Continuous toFun\n\n"}
{"name":"ContinuousOrderHom.mk.inj","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ntoOrderHom✝ : OrderHom α β\ncontinuous_toFun✝ : Continuous toOrderHom✝.toFun\ntoOrderHom : OrderHom α β\ncontinuous_toFun : Continuous toOrderHom.toFun\nx✝ : Eq { toOrderHom := toOrderHom✝, continuous_toFun := continuous_toFun✝ } { toOrderHom := toOrderHom, continuous_toFun := continuous_toFun }\n⊢ Eq toOrderHom✝ toOrderHom","decl":"/-- The type of continuous monotone maps from `α` to `β`, aka Priestley homomorphisms. -/\nstructure ContinuousOrderHom (α β : Type*) [Preorder α] [Preorder β] [TopologicalSpace α]\n  [TopologicalSpace β] extends OrderHom α β where\n  continuous_toFun : Continuous toFun\n\n"}
{"name":"ContinuousOrderHom.mk.injEq","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ntoOrderHom✝ : OrderHom α β\ncontinuous_toFun✝ : Continuous toOrderHom✝.toFun\ntoOrderHom : OrderHom α β\ncontinuous_toFun : Continuous toOrderHom.toFun\n⊢ Eq (Eq { toOrderHom := toOrderHom✝, continuous_toFun := continuous_toFun✝ } { toOrderHom := toOrderHom, continuous_toFun := continuous_toFun }) (Eq toOrderHom✝ toOrderHom)","decl":"/-- The type of continuous monotone maps from `α` to `β`, aka Priestley homomorphisms. -/\nstructure ContinuousOrderHom (α β : Type*) [Preorder α] [Preorder β] [TopologicalSpace α]\n  [TopologicalSpace β] extends OrderHom α β where\n  continuous_toFun : Continuous toFun\n\n"}
{"name":"ContinuousOrderHom.continuous_toFun","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nself : ContinuousOrderHom α β\n⊢ Continuous self.toFun","decl":"/-- The type of continuous monotone maps from `α` to `β`, aka Priestley homomorphisms. -/\nstructure ContinuousOrderHom (α β : Type*) [Preorder α] [Preorder β] [TopologicalSpace α]\n  [TopologicalSpace β] extends OrderHom α β where\n  continuous_toFun : Continuous toFun\n\n"}
{"name":"ContinuousOrderHomClass.map_monotone","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"F : Type u_6\nα : outParam (Type u_7)\nβ : outParam (Type u_8)\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : ContinuousOrderHomClass F α β\nf : F\n⊢ Monotone ⇑f","decl":"/-- `ContinuousOrderHomClass F α β` states that `F` is a type of continuous monotone maps.\n\nYou should extend this class when you extend `ContinuousOrderHom`. -/\nclass ContinuousOrderHomClass (F : Type*) (α β : outParam Type*) [Preorder α] [Preorder β]\n    [TopologicalSpace α] [TopologicalSpace β] [FunLike F α β] extends\n    ContinuousMapClass F α β : Prop where\n  map_monotone (f : F) : Monotone f\n\n-- Porting note: namespaced these results since there are more than 3 now\n"}
{"name":"ContinuousOrderHomClass.toContinuousMapClass","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"F : Type u_6\nα : outParam (Type u_7)\nβ : outParam (Type u_8)\ninst✝⁴ : Preorder α\ninst✝³ : Preorder β\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : ContinuousOrderHomClass F α β\n⊢ ContinuousMapClass F α β","decl":"/-- `ContinuousOrderHomClass F α β` states that `F` is a type of continuous monotone maps.\n\nYou should extend this class when you extend `ContinuousOrderHom`. -/\nclass ContinuousOrderHomClass (F : Type*) (α β : outParam Type*) [Preorder α] [Preorder β]\n    [TopologicalSpace α] [TopologicalSpace β] [FunLike F α β] extends\n    ContinuousMapClass F α β : Prop where\n  map_monotone (f : F) : Monotone f\n\n-- Porting note: namespaced these results since there are more than 3 now\n"}
{"name":"ContinuousOrderHomClass.toOrderHomClass","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁵ : Preorder α\ninst✝⁴ : Preorder β\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : FunLike F α β\ninst✝ : ContinuousOrderHomClass F α β\n⊢ OrderHomClass F α β","decl":"instance (priority := 100) toOrderHomClass  :\n    OrderHomClass F α β :=\n  { ‹ContinuousOrderHomClass F α β› with\n    map_rel := ContinuousOrderHomClass.map_monotone }\n\n-- Porting note: following `OrderHomClass.toOrderHom` design, introduced a wrapper\n-- for the original coercion. The original one directly exposed\n-- ContinuousOrderHom.mk which allowed simp to apply more eagerly than in all\n-- the other results in `Topology.Order.Hom.Esakia`.\n"}
{"name":"ContinuousOrderHom.instContinuousOrderHomClass","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\n⊢ ContinuousOrderHomClass (ContinuousOrderHom α β) α β","decl":"instance : ContinuousOrderHomClass (α →Co β) α β where\n  map_monotone f := f.monotone'\n  map_continuous f := f.continuous_toFun\n\n"}
{"name":"ContinuousOrderHom.coe_toOrderHom","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf : ContinuousOrderHom α β\n⊢ Eq ⇑f.toOrderHom ⇑f","decl":"@[simp] theorem coe_toOrderHom (f : α →Co β) : ⇑f.toOrderHom = f := rfl\n\n"}
{"name":"ContinuousOrderHom.toFun_eq_coe","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf : ContinuousOrderHom α β\n⊢ Eq f.toFun ⇑f","decl":"theorem toFun_eq_coe {f : α →Co β} : f.toFun = (f : α → β) := rfl\n\n"}
{"name":"ContinuousOrderHom.ext_iff","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf g : ContinuousOrderHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : α →Co β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"ContinuousOrderHom.ext","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf g : ContinuousOrderHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : α →Co β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"ContinuousOrderHom.coe_copy","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf : ContinuousOrderHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : α →Co β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"ContinuousOrderHom.copy_eq","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf : ContinuousOrderHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : α →Co β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"ContinuousOrderHom.coe_id","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : Preorder α\n⊢ Eq (⇑(ContinuousOrderHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(ContinuousOrderHom.id α) = id :=\n  rfl\n\n"}
{"name":"ContinuousOrderHom.id_apply","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : Preorder α\na : α\n⊢ Eq ((ContinuousOrderHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : ContinuousOrderHom.id α a = a :=\n  rfl\n\n"}
{"name":"ContinuousOrderHom.coe_comp","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : Preorder α\ninst✝³ : TopologicalSpace β\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace γ\ninst✝ : Preorder γ\nf : ContinuousOrderHom β γ\ng : ContinuousOrderHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : β →Co γ) (g : α →Co β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"ContinuousOrderHom.comp_apply","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : Preorder α\ninst✝³ : TopologicalSpace β\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace γ\ninst✝ : Preorder γ\nf : ContinuousOrderHom β γ\ng : ContinuousOrderHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : β →Co γ) (g : α →Co β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"ContinuousOrderHom.comp_assoc","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : Preorder α\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : Preorder β\ninst✝³ : TopologicalSpace γ\ninst✝² : Preorder γ\ninst✝¹ : TopologicalSpace δ\ninst✝ : Preorder δ\nf : ContinuousOrderHom γ δ\ng : ContinuousOrderHom β γ\nh : ContinuousOrderHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : γ →Co δ) (g : β →Co γ) (h : α →Co β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"ContinuousOrderHom.comp_id","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf : ContinuousOrderHom α β\n⊢ Eq (f.comp (ContinuousOrderHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : α →Co β) : f.comp (ContinuousOrderHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"ContinuousOrderHom.id_comp","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace β\ninst✝ : Preorder β\nf : ContinuousOrderHom α β\n⊢ Eq ((ContinuousOrderHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : α →Co β) : (ContinuousOrderHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"ContinuousOrderHom.cancel_right","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : Preorder α\ninst✝³ : TopologicalSpace β\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace γ\ninst✝ : Preorder γ\ng₁ g₂ : ContinuousOrderHom β γ\nf : ContinuousOrderHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : β →Co γ} {f : α →Co β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"ContinuousOrderHom.cancel_left","module":"Mathlib.Topology.Order.Hom.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : Preorder α\ninst✝³ : TopologicalSpace β\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace γ\ninst✝ : Preorder γ\ng : ContinuousOrderHom β γ\nf₁ f₂ : ContinuousOrderHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : β →Co γ} {f₁ f₂ : α →Co β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
