{"name":"Function.IsFixedPt.tendsto_birkhoffAverage","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\nR : Type u_3\ninst✝⁴ : DivisionSemiring R\ninst✝³ : CharZero R\ninst✝² : AddCommMonoid E\ninst✝¹ : TopologicalSpace E\ninst✝ : Module R E\nf : α → α\nx : α\nh : Function.IsFixedPt f x\ng : α → E\n⊢ Filter.Tendsto (fun x_1 => birkhoffAverage R f g x_1 x) Filter.atTop (nhds (g x))","decl":"/-- The Birkhoff averages of a function `g` over the orbit of a fixed point `x` of `f`\ntend to `g x` as `N → ∞`. In fact, they are equal to `g x` for all `N ≠ 0`,\nsee `Function.IsFixedPt.birkhoffAverage_eq`.\n\nTODO: add a version for a periodic orbit. -/\ntheorem Function.IsFixedPt.tendsto_birkhoffAverage\n    (R : Type*) [DivisionSemiring R] [CharZero R]\n    [AddCommMonoid E] [TopologicalSpace E] [Module R E]\n    {f : α → α} {x : α} (h : f.IsFixedPt x) (g : α → E) :\n    Tendsto (birkhoffAverage R f g · x) atTop (𝓝 (g x)) :=\n  tendsto_const_nhds.congr' <| (eventually_ne_atTop 0).mono fun _n hn ↦\n    (h.birkhoffAverage_eq R g hn).symm\n\n"}
{"name":"dist_birkhoffSum_apply_birkhoffSum","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝ : NormedAddCommGroup E\nf : α → α\ng : α → E\nn : Nat\nx : α\n⊢ Eq (Dist.dist (birkhoffSum f g n (f x)) (birkhoffSum f g n x)) (Dist.dist (g (Nat.iterate f n x)) (g x))","decl":"theorem dist_birkhoffSum_apply_birkhoffSum (f : α → α) (g : α → E) (n : ℕ) (x : α) :\n    dist (birkhoffSum f g n (f x)) (birkhoffSum f g n x) = dist (g (f^[n] x)) (g x) := by\n  simp only [dist_eq_norm, birkhoffSum_apply_sub_birkhoffSum]\n\n"}
{"name":"dist_birkhoffSum_birkhoffSum_le","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝ : NormedAddCommGroup E\nf : α → α\ng : α → E\nn : Nat\nx y : α\n⊢ LE.le (Dist.dist (birkhoffSum f g n x) (birkhoffSum f g n y)) ((Finset.range n).sum fun k => Dist.dist (g (Nat.iterate f k x)) (g (Nat.iterate f k y)))","decl":"theorem dist_birkhoffSum_birkhoffSum_le (f : α → α) (g : α → E) (n : ℕ) (x y : α) :\n    dist (birkhoffSum f g n x) (birkhoffSum f g n y) ≤\n      ∑ k ∈ Finset.range n, dist (g (f^[k] x)) (g (f^[k] y)) :=\n  dist_sum_sum_le _ _ _\n\n"}
{"name":"dist_birkhoffAverage_birkhoffAverage","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\n𝕜 : Type u_3\ninst✝² : RCLike 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nf : α → α\ng : α → E\nn : Nat\nx y : α\n⊢ Eq (Dist.dist (birkhoffAverage 𝕜 f g n x) (birkhoffAverage 𝕜 f g n y)) (HDiv.hDiv (Dist.dist (birkhoffSum f g n x) (birkhoffSum f g n y)) ↑n)","decl":"theorem dist_birkhoffAverage_birkhoffAverage (f : α → α) (g : α → E) (n : ℕ) (x y : α) :\n    dist (birkhoffAverage 𝕜 f g n x) (birkhoffAverage 𝕜 f g n y) =\n      dist (birkhoffSum f g n x) (birkhoffSum f g n y) / n := by\n  simp [birkhoffAverage, dist_smul₀, div_eq_inv_mul]\n\n"}
{"name":"dist_birkhoffAverage_birkhoffAverage_le","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\n𝕜 : Type u_3\ninst✝² : RCLike 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nf : α → α\ng : α → E\nn : Nat\nx y : α\n⊢ LE.le (Dist.dist (birkhoffAverage 𝕜 f g n x) (birkhoffAverage 𝕜 f g n y)) (HDiv.hDiv ((Finset.range n).sum fun k => Dist.dist (g (Nat.iterate f k x)) (g (Nat.iterate f k y))) ↑n)","decl":"theorem dist_birkhoffAverage_birkhoffAverage_le (f : α → α) (g : α → E) (n : ℕ) (x y : α) :\n    dist (birkhoffAverage 𝕜 f g n x) (birkhoffAverage 𝕜 f g n y) ≤\n      (∑ k ∈ Finset.range n, dist (g (f^[k] x)) (g (f^[k] y))) / n :=\n  (dist_birkhoffAverage_birkhoffAverage _ _ _ _ _ _).trans_le <| by\n    gcongr; apply dist_birkhoffSum_birkhoffSum_le\n\n"}
{"name":"dist_birkhoffAverage_apply_birkhoffAverage","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\n𝕜 : Type u_3\ninst✝² : RCLike 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nf : α → α\ng : α → E\nn : Nat\nx : α\n⊢ Eq (Dist.dist (birkhoffAverage 𝕜 f g n (f x)) (birkhoffAverage 𝕜 f g n x)) (HDiv.hDiv (Dist.dist (g (Nat.iterate f n x)) (g x)) ↑n)","decl":"theorem dist_birkhoffAverage_apply_birkhoffAverage (f : α → α) (g : α → E) (n : ℕ) (x : α) :\n    dist (birkhoffAverage 𝕜 f g n (f x)) (birkhoffAverage 𝕜 f g n x) =\n      dist (g (f^[n] x)) (g x) / n := by\n  simp [dist_birkhoffAverage_birkhoffAverage, dist_birkhoffSum_apply_birkhoffSum]\n\n"}
{"name":"tendsto_birkhoffAverage_apply_sub_birkhoffAverage","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\n𝕜 : Type u_3\ninst✝² : RCLike 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nf : α → α\ng : α → E\nx : α\nh : Bornology.IsBounded (Set.range fun x_1 => g (Nat.iterate f x_1 x))\n⊢ Filter.Tendsto (fun n => HSub.hSub (birkhoffAverage 𝕜 f g n (f x)) (birkhoffAverage 𝕜 f g n x)) Filter.atTop (nhds 0)","decl":"/-- If a function `g` is bounded along the positive orbit of `x` under `f`,\nthen the difference between Birkhoff averages of `g`\nalong the orbit of `f x` and along the orbit of `x`\ntends to zero.\n\nSee also `tendsto_birkhoffAverage_apply_sub_birkhoffAverage'`. -/\ntheorem tendsto_birkhoffAverage_apply_sub_birkhoffAverage {f : α → α} {g : α → E} {x : α}\n    (h : Bornology.IsBounded (range (g <| f^[·] x))) :\n    Tendsto (fun n ↦ birkhoffAverage 𝕜 f g n (f x) - birkhoffAverage 𝕜 f g n x) atTop (𝓝 0) := by\n  rcases Metric.isBounded_range_iff.1 h with ⟨C, hC⟩\n  have : Tendsto (fun n : ℕ ↦ C / n) atTop (𝓝 0) :=\n    tendsto_const_nhds.div_atTop tendsto_natCast_atTop_atTop\n  refine squeeze_zero_norm (fun n ↦ ?_) this\n  rw [← dist_eq_norm, dist_birkhoffAverage_apply_birkhoffAverage]\n  gcongr\n  exact hC n 0\n\n"}
{"name":"tendsto_birkhoffAverage_apply_sub_birkhoffAverage'","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"α : Type u_1\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\n𝕜 : Type u_3\ninst✝² : RCLike 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\ng : α → E\nh : Bornology.IsBounded (Set.range g)\nf : α → α\nx : α\n⊢ Filter.Tendsto (fun n => HSub.hSub (birkhoffAverage 𝕜 f g n (f x)) (birkhoffAverage 𝕜 f g n x)) Filter.atTop (nhds 0)","decl":"/-- If a function `g` is bounded,\nthen the difference between Birkhoff averages of `g`\nalong the orbit of `f x` and along the orbit of `x`\ntends to zero.\n\nSee also `tendsto_birkhoffAverage_apply_sub_birkhoffAverage`. -/\ntheorem tendsto_birkhoffAverage_apply_sub_birkhoffAverage' {g : α → E}\n    (h : Bornology.IsBounded (range g)) (f : α → α) (x : α) :\n    Tendsto (fun n ↦ birkhoffAverage 𝕜 f g n (f x) - birkhoffAverage 𝕜 f g n x) atTop (𝓝 0) :=\n  tendsto_birkhoffAverage_apply_sub_birkhoffAverage _ <| h.subset <| range_comp_subset_range _ _\n\n"}
{"name":"uniformEquicontinuous_birkhoffAverage","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"𝕜 : Type u_1\nX : Type u_2\nE : Type u_3\ninst✝³ : PseudoEMetricSpace X\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : X → X\ng : X → E\nhf : LipschitzWith 1 f\nhg : UniformContinuous g\n⊢ UniformEquicontinuous (birkhoffAverage 𝕜 f g)","decl":"/-- If `f` is a non-strictly contracting map (i.e., it is Lipschitz with constant `1`)\nand `g` is a uniformly continuous, then the Birkhoff averages of `g` along orbits of `f`\nis a uniformly equicontinuous family of functions. -/\ntheorem uniformEquicontinuous_birkhoffAverage (hf : LipschitzWith 1 f) (hg : UniformContinuous g) :\n    UniformEquicontinuous (birkhoffAverage 𝕜 f g) := by\n  refine Metric.uniformity_basis_dist_le.uniformEquicontinuous_iff_right.2 fun ε hε ↦ ?_\n  rcases (uniformity_basis_edist_le.uniformContinuous_iff Metric.uniformity_basis_dist_le).1 hg ε hε\n    with ⟨δ, hδ₀, hδε⟩\n  refine mem_uniformity_edist.2 ⟨δ, hδ₀, fun {x y} h n ↦ ?_⟩\n  calc\n    dist (birkhoffAverage 𝕜 f g n x) (birkhoffAverage 𝕜 f g n y)\n      ≤ (∑ k ∈ Finset.range n, dist (g (f^[k] x)) (g (f^[k] y))) / n :=\n      dist_birkhoffAverage_birkhoffAverage_le ..\n    _ ≤ (∑ _k ∈ Finset.range n, ε) / n := by\n      gcongr\n      refine hδε _ _ ?_\n      simpa using (hf.iterate _).edist_le_mul_of_le h.le\n    _ = n * ε / n := by simp\n    _ ≤ ε := by\n      rcases eq_or_ne n 0 with hn | hn <;> field_simp [hn, hε.le, mul_div_cancel_left₀]\n\n"}
{"name":"isClosed_setOf_tendsto_birkhoffAverage","module":"Mathlib.Dynamics.BirkhoffSum.NormedSpace","initialProofState":"𝕜 : Type u_1\nX : Type u_2\nE : Type u_3\ninst✝³ : PseudoEMetricSpace X\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : X → X\ng l : X → E\nhf : LipschitzWith 1 f\nhg : UniformContinuous g\nhl : Continuous l\n⊢ IsClosed (setOf fun x => Filter.Tendsto (fun x_1 => birkhoffAverage 𝕜 f g x_1 x) Filter.atTop (nhds (l x)))","decl":"/-- If `f : X → X` is a non-strictly contracting map (i.e., it is Lipschitz with constant `1`),\n`g : X → E` is a uniformly continuous, and `l : X → E` is a continuous function,\nthen the set of points `x`\nsuch that the Birkhoff average of `g` along the orbit of `x` tends to `l x`\nis a closed set. -/\ntheorem isClosed_setOf_tendsto_birkhoffAverage\n    (hf : LipschitzWith 1 f) (hg : UniformContinuous g) (hl : Continuous l) :\n    IsClosed {x | Tendsto (birkhoffAverage 𝕜 f g · x) atTop (𝓝 (l x))} :=\n  (uniformEquicontinuous_birkhoffAverage 𝕜 hf hg).equicontinuous.isClosed_setOf_tendsto hl\n"}
