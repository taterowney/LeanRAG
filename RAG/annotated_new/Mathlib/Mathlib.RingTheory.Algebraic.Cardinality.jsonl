{"name":"Algebra.IsAlgebraic.lift_cardinalMk_le_sigma_polynomial","module":"Mathlib.RingTheory.Algebraic.Cardinality","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nL : Type v\ninst✝⁴ : CommRing L\ninst✝³ : IsDomain L\ninst✝² : Algebra R L\ninst✝¹ : NoZeroSMulDivisors R L\ninst✝ : Algebra.IsAlgebraic R L\n⊢ LE.le (Cardinal.lift.{u, v} (Cardinal.mk L)) (Cardinal.mk (Sigma fun p => Subtype fun x => Membership.mem (p.aroots L) x))","decl":"theorem lift_cardinalMk_le_sigma_polynomial :\n    lift.{u} #L ≤ #(Σ p : R[X], { x : L // x ∈ p.aroots L }) := by\n  have := @lift_mk_le_lift_mk_of_injective L (Σ p : R[X], {x : L | x ∈ p.aroots L})\n    (fun x : L =>\n      let p := Classical.indefiniteDescription _ (Algebra.IsAlgebraic.isAlgebraic x)\n      ⟨p.1, x, by\n        dsimp\n        have := (Polynomial.map_ne_zero_iff (NoZeroSMulDivisors.algebraMap_injective R L)).2 p.2.1\n        rw [Polynomial.mem_roots this, Polynomial.IsRoot, Polynomial.eval_map,\n          ← Polynomial.aeval_def, p.2.2]⟩)\n    fun x y => by\n      intro h\n      simp only [Set.coe_setOf, ne_eq, Set.mem_setOf_eq, Sigma.mk.inj_iff] at h\n      refine (Subtype.heq_iff_coe_eq ?_).1 h.2\n      simp only [h.1, forall_true_iff]\n  rwa [lift_umax, lift_id'.{v}] at this\n\n"}
{"name":"Algebra.IsAlgebraic.lift_cardinalMk_le_max","module":"Mathlib.RingTheory.Algebraic.Cardinality","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nL : Type v\ninst✝⁴ : CommRing L\ninst✝³ : IsDomain L\ninst✝² : Algebra R L\ninst✝¹ : NoZeroSMulDivisors R L\ninst✝ : Algebra.IsAlgebraic R L\n⊢ LE.le (Cardinal.lift.{u, v} (Cardinal.mk L)) (Max.max (Cardinal.lift.{v, u} (Cardinal.mk R)) Cardinal.aleph0)","decl":"theorem lift_cardinalMk_le_max : lift.{u} #L ≤ lift.{v} #R ⊔ ℵ₀ :=\n  calc\n    lift.{u} #L ≤ #(Σ p : R[X], { x : L // x ∈ p.aroots L }) :=\n      lift_cardinalMk_le_sigma_polynomial R L\n    _ = Cardinal.sum fun p : R[X] => #{x : L | x ∈ p.aroots L} := by\n      rw [← mk_sigma]; rfl\n    _ ≤ Cardinal.sum.{u, v} fun _ : R[X] => ℵ₀ :=\n      (sum_le_sum _ _ fun _ => (Multiset.finite_toSet _).lt_aleph0.le)\n    _ = lift.{v} #(R[X]) * ℵ₀ := by rw [sum_const, lift_aleph0]\n    _ ≤ lift.{v} (#R ⊔ ℵ₀) ⊔ ℵ₀ ⊔ ℵ₀ := (mul_le_max _ _).trans <| by\n      gcongr; simp only [lift_le, Polynomial.cardinalMk_le_max]\n    _ = _ := by simp\n\n"}
{"name":"Algebra.IsAlgebraic.cardinalMk_le_sigma_polynomial","module":"Mathlib.RingTheory.Algebraic.Cardinality","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nL : Type u\ninst✝⁴ : CommRing L\ninst✝³ : IsDomain L\ninst✝² : Algebra R L\ninst✝¹ : NoZeroSMulDivisors R L\ninst✝ : Algebra.IsAlgebraic R L\n⊢ LE.le (Cardinal.mk L) (Cardinal.mk (Sigma fun p => Subtype fun x => Membership.mem (p.aroots L) x))","decl":"theorem cardinalMk_le_sigma_polynomial :\n    #L ≤ #(Σ p : R[X], { x : L // x ∈ p.aroots L }) := by\n  simpa only [lift_id] using lift_cardinalMk_le_sigma_polynomial R L\n\n"}
{"name":"Algebra.IsAlgebraic.cardinal_mk_le_sigma_polynomial","module":"Mathlib.RingTheory.Algebraic.Cardinality","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nL : Type u\ninst✝⁴ : CommRing L\ninst✝³ : IsDomain L\ninst✝² : Algebra R L\ninst✝¹ : NoZeroSMulDivisors R L\ninst✝ : Algebra.IsAlgebraic R L\n⊢ LE.le (Cardinal.mk L) (Cardinal.mk (Sigma fun p => Subtype fun x => Membership.mem (p.aroots L) x))","decl":"@[deprecated (since := \"2024-11-10\")]\nalias cardinal_mk_le_sigma_polynomial := cardinalMk_le_sigma_polynomial\n\n"}
{"name":"Algebra.IsAlgebraic.cardinalMk_le_max","module":"Mathlib.RingTheory.Algebraic.Cardinality","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nL : Type u\ninst✝⁴ : CommRing L\ninst✝³ : IsDomain L\ninst✝² : Algebra R L\ninst✝¹ : NoZeroSMulDivisors R L\ninst✝ : Algebra.IsAlgebraic R L\n⊢ LE.le (Cardinal.mk L) (Max.max (Cardinal.mk R) Cardinal.aleph0)","decl":"/-- The cardinality of an algebraic extension is at most the maximum of the cardinality\nof the base ring or `ℵ₀`. -/\n@[stacks 09GK]\ntheorem cardinalMk_le_max : #L ≤ max #R ℵ₀ := by\n  simpa only [lift_id] using lift_cardinalMk_le_max R L\n\n"}
{"name":"Algebra.IsAlgebraic.cardinal_mk_le_max","module":"Mathlib.RingTheory.Algebraic.Cardinality","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nL : Type u\ninst✝⁴ : CommRing L\ninst✝³ : IsDomain L\ninst✝² : Algebra R L\ninst✝¹ : NoZeroSMulDivisors R L\ninst✝ : Algebra.IsAlgebraic R L\n⊢ LE.le (Cardinal.mk L) (Max.max (Cardinal.mk R) Cardinal.aleph0)","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_le_max := cardinalMk_le_max\n\n"}
