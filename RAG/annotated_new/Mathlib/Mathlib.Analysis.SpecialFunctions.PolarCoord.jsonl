{"name":"polarCoord_symm_apply","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"p : Prod Real Real\n⊢ Eq (↑polarCoord.symm p) { fst := HMul.hMul p.1 (Real.cos p.2), snd := HMul.hMul p.1 (Real.sin p.2) }","decl":"/-- The polar coordinates partial homeomorphism in `ℝ^2`, mapping `(r cos θ, r sin θ)` to `(r, θ)`.\nIt is a homeomorphism between `ℝ^2 - (-∞, 0]` and `(0, +∞) × (-π, π)`. -/\n@[simps]\ndef polarCoord : PartialHomeomorph (ℝ × ℝ) (ℝ × ℝ) where\n  toFun q := (√(q.1 ^ 2 + q.2 ^ 2), Complex.arg (Complex.equivRealProd.symm q))\n  invFun p := (p.1 * cos p.2, p.1 * sin p.2)\n  source := {q | 0 < q.1} ∪ {q | q.2 ≠ 0}\n  target := Ioi (0 : ℝ) ×ˢ Ioo (-π) π\n  map_target' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    rcases eq_or_ne θ 0 with (rfl | h'θ)\n    · simpa using hr\n    · right\n      simp at hr\n      simpa only [ne_of_gt hr, Ne, mem_setOf_eq, mul_eq_zero, false_or,\n        sin_eq_zero_iff_of_lt_of_lt hθ.1 hθ.2] using h'θ\n  map_source' := by\n    rintro ⟨x, y⟩ hxy\n    simp only [prod_mk_mem_set_prod_eq, mem_Ioi, sqrt_pos, mem_Ioo, Complex.neg_pi_lt_arg,\n      true_and, Complex.arg_lt_pi_iff]\n    constructor\n    · cases' hxy with hxy hxy\n      · dsimp at hxy; linarith [sq_pos_of_ne_zero hxy.ne', sq_nonneg y]\n      · linarith [sq_nonneg x, sq_pos_of_ne_zero hxy]\n    · cases' hxy with hxy hxy\n      · exact Or.inl (le_of_lt hxy)\n      · exact Or.inr hxy\n  right_inv' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    simp only [Prod.mk.inj_iff]\n    constructor\n    · conv_rhs => rw [← sqrt_sq (le_of_lt hr), ← one_mul (r ^ 2), ← sin_sq_add_cos_sq θ]\n      congr 1\n      ring\n    · convert Complex.arg_mul_cos_add_sin_mul_I hr ⟨hθ.1, hθ.2.le⟩\n      simp only [Complex.equivRealProd_symm_apply, Complex.ofReal_mul, Complex.ofReal_cos,\n        Complex.ofReal_sin]\n      ring\n  left_inv' := by\n    rintro ⟨x, y⟩ _\n    have A : √(x ^ 2 + y ^ 2) = Complex.abs (x + y * Complex.I) := by\n      rw [Complex.abs_apply, Complex.normSq_add_mul_I]\n    have Z := Complex.abs_mul_cos_add_sin_mul_I (x + y * Complex.I)\n    simp only [← Complex.ofReal_cos, ← Complex.ofReal_sin, mul_add, ← Complex.ofReal_mul, ←\n      mul_assoc] at Z\n    simp [A]\n  open_target := isOpen_Ioi.prod isOpen_Ioo\n  open_source :=\n    (isOpen_lt continuous_const continuous_fst).union\n      (isOpen_ne_fun continuous_snd continuous_const)\n  continuousOn_invFun :=\n    ((continuous_fst.mul (continuous_cos.comp continuous_snd)).prod_mk\n        (continuous_fst.mul (continuous_sin.comp continuous_snd))).continuousOn\n  continuousOn_toFun := by\n    apply ((continuous_fst.pow 2).add (continuous_snd.pow 2)).sqrt.continuousOn.prod\n    have A : MapsTo Complex.equivRealProd.symm ({q : ℝ × ℝ | 0 < q.1} ∪ {q : ℝ × ℝ | q.2 ≠ 0})\n        Complex.slitPlane := by\n      rintro ⟨x, y⟩ hxy; simpa only using hxy\n    refine ContinuousOn.comp (f := Complex.equivRealProd.symm)\n      (g := Complex.arg) (fun z hz => ?_) ?_ A\n    · exact (Complex.continuousAt_arg hz).continuousWithinAt\n    · exact Complex.equivRealProdCLM.symm.continuous.continuousOn\n\n"}
{"name":"polarCoord_source","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"⊢ Eq polarCoord.source (Union.union (setOf fun q => LT.lt 0 q.1) (setOf fun q => Ne q.2 0))","decl":"/-- The polar coordinates partial homeomorphism in `ℝ^2`, mapping `(r cos θ, r sin θ)` to `(r, θ)`.\nIt is a homeomorphism between `ℝ^2 - (-∞, 0]` and `(0, +∞) × (-π, π)`. -/\n@[simps]\ndef polarCoord : PartialHomeomorph (ℝ × ℝ) (ℝ × ℝ) where\n  toFun q := (√(q.1 ^ 2 + q.2 ^ 2), Complex.arg (Complex.equivRealProd.symm q))\n  invFun p := (p.1 * cos p.2, p.1 * sin p.2)\n  source := {q | 0 < q.1} ∪ {q | q.2 ≠ 0}\n  target := Ioi (0 : ℝ) ×ˢ Ioo (-π) π\n  map_target' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    rcases eq_or_ne θ 0 with (rfl | h'θ)\n    · simpa using hr\n    · right\n      simp at hr\n      simpa only [ne_of_gt hr, Ne, mem_setOf_eq, mul_eq_zero, false_or,\n        sin_eq_zero_iff_of_lt_of_lt hθ.1 hθ.2] using h'θ\n  map_source' := by\n    rintro ⟨x, y⟩ hxy\n    simp only [prod_mk_mem_set_prod_eq, mem_Ioi, sqrt_pos, mem_Ioo, Complex.neg_pi_lt_arg,\n      true_and, Complex.arg_lt_pi_iff]\n    constructor\n    · cases' hxy with hxy hxy\n      · dsimp at hxy; linarith [sq_pos_of_ne_zero hxy.ne', sq_nonneg y]\n      · linarith [sq_nonneg x, sq_pos_of_ne_zero hxy]\n    · cases' hxy with hxy hxy\n      · exact Or.inl (le_of_lt hxy)\n      · exact Or.inr hxy\n  right_inv' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    simp only [Prod.mk.inj_iff]\n    constructor\n    · conv_rhs => rw [← sqrt_sq (le_of_lt hr), ← one_mul (r ^ 2), ← sin_sq_add_cos_sq θ]\n      congr 1\n      ring\n    · convert Complex.arg_mul_cos_add_sin_mul_I hr ⟨hθ.1, hθ.2.le⟩\n      simp only [Complex.equivRealProd_symm_apply, Complex.ofReal_mul, Complex.ofReal_cos,\n        Complex.ofReal_sin]\n      ring\n  left_inv' := by\n    rintro ⟨x, y⟩ _\n    have A : √(x ^ 2 + y ^ 2) = Complex.abs (x + y * Complex.I) := by\n      rw [Complex.abs_apply, Complex.normSq_add_mul_I]\n    have Z := Complex.abs_mul_cos_add_sin_mul_I (x + y * Complex.I)\n    simp only [← Complex.ofReal_cos, ← Complex.ofReal_sin, mul_add, ← Complex.ofReal_mul, ←\n      mul_assoc] at Z\n    simp [A]\n  open_target := isOpen_Ioi.prod isOpen_Ioo\n  open_source :=\n    (isOpen_lt continuous_const continuous_fst).union\n      (isOpen_ne_fun continuous_snd continuous_const)\n  continuousOn_invFun :=\n    ((continuous_fst.mul (continuous_cos.comp continuous_snd)).prod_mk\n        (continuous_fst.mul (continuous_sin.comp continuous_snd))).continuousOn\n  continuousOn_toFun := by\n    apply ((continuous_fst.pow 2).add (continuous_snd.pow 2)).sqrt.continuousOn.prod\n    have A : MapsTo Complex.equivRealProd.symm ({q : ℝ × ℝ | 0 < q.1} ∪ {q : ℝ × ℝ | q.2 ≠ 0})\n        Complex.slitPlane := by\n      rintro ⟨x, y⟩ hxy; simpa only using hxy\n    refine ContinuousOn.comp (f := Complex.equivRealProd.symm)\n      (g := Complex.arg) (fun z hz => ?_) ?_ A\n    · exact (Complex.continuousAt_arg hz).continuousWithinAt\n    · exact Complex.equivRealProdCLM.symm.continuous.continuousOn\n\n"}
{"name":"polarCoord_target","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"⊢ Eq polarCoord.target (SProd.sprod (Set.Ioi 0) (Set.Ioo (Neg.neg Real.pi) Real.pi))","decl":"/-- The polar coordinates partial homeomorphism in `ℝ^2`, mapping `(r cos θ, r sin θ)` to `(r, θ)`.\nIt is a homeomorphism between `ℝ^2 - (-∞, 0]` and `(0, +∞) × (-π, π)`. -/\n@[simps]\ndef polarCoord : PartialHomeomorph (ℝ × ℝ) (ℝ × ℝ) where\n  toFun q := (√(q.1 ^ 2 + q.2 ^ 2), Complex.arg (Complex.equivRealProd.symm q))\n  invFun p := (p.1 * cos p.2, p.1 * sin p.2)\n  source := {q | 0 < q.1} ∪ {q | q.2 ≠ 0}\n  target := Ioi (0 : ℝ) ×ˢ Ioo (-π) π\n  map_target' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    rcases eq_or_ne θ 0 with (rfl | h'θ)\n    · simpa using hr\n    · right\n      simp at hr\n      simpa only [ne_of_gt hr, Ne, mem_setOf_eq, mul_eq_zero, false_or,\n        sin_eq_zero_iff_of_lt_of_lt hθ.1 hθ.2] using h'θ\n  map_source' := by\n    rintro ⟨x, y⟩ hxy\n    simp only [prod_mk_mem_set_prod_eq, mem_Ioi, sqrt_pos, mem_Ioo, Complex.neg_pi_lt_arg,\n      true_and, Complex.arg_lt_pi_iff]\n    constructor\n    · cases' hxy with hxy hxy\n      · dsimp at hxy; linarith [sq_pos_of_ne_zero hxy.ne', sq_nonneg y]\n      · linarith [sq_nonneg x, sq_pos_of_ne_zero hxy]\n    · cases' hxy with hxy hxy\n      · exact Or.inl (le_of_lt hxy)\n      · exact Or.inr hxy\n  right_inv' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    simp only [Prod.mk.inj_iff]\n    constructor\n    · conv_rhs => rw [← sqrt_sq (le_of_lt hr), ← one_mul (r ^ 2), ← sin_sq_add_cos_sq θ]\n      congr 1\n      ring\n    · convert Complex.arg_mul_cos_add_sin_mul_I hr ⟨hθ.1, hθ.2.le⟩\n      simp only [Complex.equivRealProd_symm_apply, Complex.ofReal_mul, Complex.ofReal_cos,\n        Complex.ofReal_sin]\n      ring\n  left_inv' := by\n    rintro ⟨x, y⟩ _\n    have A : √(x ^ 2 + y ^ 2) = Complex.abs (x + y * Complex.I) := by\n      rw [Complex.abs_apply, Complex.normSq_add_mul_I]\n    have Z := Complex.abs_mul_cos_add_sin_mul_I (x + y * Complex.I)\n    simp only [← Complex.ofReal_cos, ← Complex.ofReal_sin, mul_add, ← Complex.ofReal_mul, ←\n      mul_assoc] at Z\n    simp [A]\n  open_target := isOpen_Ioi.prod isOpen_Ioo\n  open_source :=\n    (isOpen_lt continuous_const continuous_fst).union\n      (isOpen_ne_fun continuous_snd continuous_const)\n  continuousOn_invFun :=\n    ((continuous_fst.mul (continuous_cos.comp continuous_snd)).prod_mk\n        (continuous_fst.mul (continuous_sin.comp continuous_snd))).continuousOn\n  continuousOn_toFun := by\n    apply ((continuous_fst.pow 2).add (continuous_snd.pow 2)).sqrt.continuousOn.prod\n    have A : MapsTo Complex.equivRealProd.symm ({q : ℝ × ℝ | 0 < q.1} ∪ {q : ℝ × ℝ | q.2 ≠ 0})\n        Complex.slitPlane := by\n      rintro ⟨x, y⟩ hxy; simpa only using hxy\n    refine ContinuousOn.comp (f := Complex.equivRealProd.symm)\n      (g := Complex.arg) (fun z hz => ?_) ?_ A\n    · exact (Complex.continuousAt_arg hz).continuousWithinAt\n    · exact Complex.equivRealProdCLM.symm.continuous.continuousOn\n\n"}
{"name":"polarCoord_apply","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"q : Prod Real Real\n⊢ Eq (↑polarCoord q) { fst := (HAdd.hAdd (HPow.hPow q.1 2) (HPow.hPow q.2 2)).sqrt, snd := (Complex.equivRealProd.symm q).arg }","decl":"/-- The polar coordinates partial homeomorphism in `ℝ^2`, mapping `(r cos θ, r sin θ)` to `(r, θ)`.\nIt is a homeomorphism between `ℝ^2 - (-∞, 0]` and `(0, +∞) × (-π, π)`. -/\n@[simps]\ndef polarCoord : PartialHomeomorph (ℝ × ℝ) (ℝ × ℝ) where\n  toFun q := (√(q.1 ^ 2 + q.2 ^ 2), Complex.arg (Complex.equivRealProd.symm q))\n  invFun p := (p.1 * cos p.2, p.1 * sin p.2)\n  source := {q | 0 < q.1} ∪ {q | q.2 ≠ 0}\n  target := Ioi (0 : ℝ) ×ˢ Ioo (-π) π\n  map_target' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    rcases eq_or_ne θ 0 with (rfl | h'θ)\n    · simpa using hr\n    · right\n      simp at hr\n      simpa only [ne_of_gt hr, Ne, mem_setOf_eq, mul_eq_zero, false_or,\n        sin_eq_zero_iff_of_lt_of_lt hθ.1 hθ.2] using h'θ\n  map_source' := by\n    rintro ⟨x, y⟩ hxy\n    simp only [prod_mk_mem_set_prod_eq, mem_Ioi, sqrt_pos, mem_Ioo, Complex.neg_pi_lt_arg,\n      true_and, Complex.arg_lt_pi_iff]\n    constructor\n    · cases' hxy with hxy hxy\n      · dsimp at hxy; linarith [sq_pos_of_ne_zero hxy.ne', sq_nonneg y]\n      · linarith [sq_nonneg x, sq_pos_of_ne_zero hxy]\n    · cases' hxy with hxy hxy\n      · exact Or.inl (le_of_lt hxy)\n      · exact Or.inr hxy\n  right_inv' := by\n    rintro ⟨r, θ⟩ ⟨hr, hθ⟩\n    dsimp at hr hθ\n    simp only [Prod.mk.inj_iff]\n    constructor\n    · conv_rhs => rw [← sqrt_sq (le_of_lt hr), ← one_mul (r ^ 2), ← sin_sq_add_cos_sq θ]\n      congr 1\n      ring\n    · convert Complex.arg_mul_cos_add_sin_mul_I hr ⟨hθ.1, hθ.2.le⟩\n      simp only [Complex.equivRealProd_symm_apply, Complex.ofReal_mul, Complex.ofReal_cos,\n        Complex.ofReal_sin]\n      ring\n  left_inv' := by\n    rintro ⟨x, y⟩ _\n    have A : √(x ^ 2 + y ^ 2) = Complex.abs (x + y * Complex.I) := by\n      rw [Complex.abs_apply, Complex.normSq_add_mul_I]\n    have Z := Complex.abs_mul_cos_add_sin_mul_I (x + y * Complex.I)\n    simp only [← Complex.ofReal_cos, ← Complex.ofReal_sin, mul_add, ← Complex.ofReal_mul, ←\n      mul_assoc] at Z\n    simp [A]\n  open_target := isOpen_Ioi.prod isOpen_Ioo\n  open_source :=\n    (isOpen_lt continuous_const continuous_fst).union\n      (isOpen_ne_fun continuous_snd continuous_const)\n  continuousOn_invFun :=\n    ((continuous_fst.mul (continuous_cos.comp continuous_snd)).prod_mk\n        (continuous_fst.mul (continuous_sin.comp continuous_snd))).continuousOn\n  continuousOn_toFun := by\n    apply ((continuous_fst.pow 2).add (continuous_snd.pow 2)).sqrt.continuousOn.prod\n    have A : MapsTo Complex.equivRealProd.symm ({q : ℝ × ℝ | 0 < q.1} ∪ {q : ℝ × ℝ | q.2 ≠ 0})\n        Complex.slitPlane := by\n      rintro ⟨x, y⟩ hxy; simpa only using hxy\n    refine ContinuousOn.comp (f := Complex.equivRealProd.symm)\n      (g := Complex.arg) (fun z hz => ?_) ?_ A\n    · exact (Complex.continuousAt_arg hz).continuousWithinAt\n    · exact Complex.equivRealProdCLM.symm.continuous.continuousOn\n\n"}
{"name":"hasFDerivAt_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"p : Prod Real Real\n⊢ HasFDerivAt (↑polarCoord.symm) (fderivPolarCoordSymm p) p","decl":"theorem hasFDerivAt_polarCoord_symm (p : ℝ × ℝ) :\n    HasFDerivAt polarCoord.symm (fderivPolarCoordSymm p) p := by\n  unfold fderivPolarCoordSymm\n  rw [Matrix.toLin_finTwoProd_toContinuousLinearMap]\n  convert HasFDerivAt.prod (𝕜 := ℝ)\n    (hasFDerivAt_fst.mul ((hasDerivAt_cos p.2).comp_hasFDerivAt p hasFDerivAt_snd))\n    (hasFDerivAt_fst.mul ((hasDerivAt_sin p.2).comp_hasFDerivAt p hasFDerivAt_snd)) using 2 <;>\n  simp [smul_smul, add_comm, neg_mul, smul_neg, neg_smul _ (ContinuousLinearMap.snd ℝ ℝ ℝ)]\n\n"}
{"name":"det_fderivPolarCoordSymm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"p : Prod Real Real\n⊢ Eq (fderivPolarCoordSymm p).det p.1","decl":"theorem det_fderivPolarCoordSymm (p : ℝ × ℝ) :\n    (fderivPolarCoordSymm p).det = p.1 := by\n  conv_rhs => rw [← one_mul p.1, ← cos_sq_add_sin_sq p.2]\n  unfold fderivPolarCoordSymm\n  simp only [neg_mul, LinearMap.det_toContinuousLinearMap, LinearMap.det_toLin,\n    Matrix.det_fin_two_of, sub_neg_eq_add]\n  ring\n\n-- Porting note: this instance is needed but not automatically synthesised\n"}
{"name":"instIsAddHaarMeasureProdRealVolume","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"⊢ MeasureTheory.MeasureSpace.volume.IsAddHaarMeasure","decl":"instance : Measure.IsAddHaarMeasure volume (G := ℝ × ℝ) :=\n  Measure.prod.instIsAddHaarMeasure _ _\n\n"}
{"name":"polarCoord_source_ae_eq_univ","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"⊢ (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyEq polarCoord.source Set.univ","decl":"theorem polarCoord_source_ae_eq_univ : polarCoord.source =ᵐ[volume] univ := by\n  have A : polarCoord.sourceᶜ ⊆ LinearMap.ker (LinearMap.snd ℝ ℝ ℝ) := by\n    intro x hx\n    simp only [polarCoord_source, compl_union, mem_inter_iff, mem_compl_iff, mem_setOf_eq, not_lt,\n      Classical.not_not] at hx\n    exact hx.2\n  have B : volume (LinearMap.ker (LinearMap.snd ℝ ℝ ℝ) : Set (ℝ × ℝ)) = 0 := by\n    apply Measure.addHaar_submodule\n    rw [Ne, LinearMap.ker_eq_top]\n    intro h\n    have : (LinearMap.snd ℝ ℝ ℝ) (0, 1) = (0 : ℝ × ℝ →ₗ[ℝ] ℝ) (0, 1) := by rw [h]\n    simp at this\n  simp only [ae_eq_univ]\n  exact le_antisymm ((measure_mono A).trans (le_of_eq B)) bot_le\n\n"}
{"name":"integral_comp_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Prod Real Real → E\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict polarCoord.target) fun p => HSMul.hSMul p.1 (f (↑polarCoord.symm p))) (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"theorem integral_comp_polarCoord_symm {E : Type*} [NormedAddCommGroup E] [NormedSpace ℝ E]\n    (f : ℝ × ℝ → E) :\n    (∫ p in polarCoord.target, p.1 • f (polarCoord.symm p)) = ∫ p, f p := by\n  symm\n  calc\n    ∫ p, f p = ∫ p in polarCoord.source, f p := by\n      rw [← setIntegral_univ]\n      apply setIntegral_congr_set\n      exact polarCoord_source_ae_eq_univ.symm\n    _ = ∫ p in polarCoord.target, |p.1| • f (polarCoord.symm p) := by\n      rw [← PartialHomeomorph.symm_target, integral_target_eq_integral_abs_det_fderiv_smul volume\n      (fun p _ ↦ hasFDerivAt_polarCoord_symm p), PartialHomeomorph.symm_source]\n      simp_rw [det_fderivPolarCoordSymm]\n    _ = ∫ p in polarCoord.target, p.1 • f (polarCoord.symm p) := by\n      apply setIntegral_congr_fun polarCoord.open_target.measurableSet fun x hx => ?_\n      rw [abs_of_pos hx.1]\n\n"}
{"name":"lintegral_comp_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"f : Prod Real Real → ENNReal\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict polarCoord.target) fun p => HSMul.hSMul (ENNReal.ofReal p.1) (f (↑polarCoord.symm p))) (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"theorem lintegral_comp_polarCoord_symm (f : ℝ × ℝ → ℝ≥0∞) :\n    ∫⁻ (p : ℝ × ℝ) in polarCoord.target, ENNReal.ofReal p.1 • f (polarCoord.symm p) =\n      ∫⁻ (p : ℝ × ℝ), f p := by\n  symm\n  calc\n    _ = ∫⁻ p in polarCoord.symm '' polarCoord.target, f p := by\n      rw [← setLIntegral_univ, setLIntegral_congr polarCoord_source_ae_eq_univ.symm,\n        polarCoord.symm_image_target_eq_source ]\n    _ = ∫⁻ (p : ℝ × ℝ) in polarCoord.target, ENNReal.ofReal |p.1| • f (polarCoord.symm p) := by\n      rw [lintegral_image_eq_lintegral_abs_det_fderiv_mul volume _\n        (fun p _ ↦ (hasFDerivAt_polarCoord_symm p).hasFDerivWithinAt)]\n      · simp_rw [det_fderivPolarCoordSymm]; rfl\n      exacts [polarCoord.symm.injOn, measurableSet_Ioi.prod measurableSet_Ioo]\n    _ = ∫⁻ (p : ℝ × ℝ) in polarCoord.target, ENNReal.ofReal p.1 • f (polarCoord.symm p) := by\n      refine setLIntegral_congr_fun polarCoord.open_target.measurableSet ?_\n      filter_upwards with _ hx using by rw [abs_of_pos hx.1]\n\n"}
{"name":"Complex.polarCoord_apply","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"a : Complex\n⊢ Eq (↑Complex.polarCoord a) { fst := Complex.abs a, snd := a.arg }","decl":"protected theorem polarCoord_apply (a : ℂ) :\n    Complex.polarCoord a = (Complex.abs a, Complex.arg a) := by\n  simp_rw [Complex.abs_def, Complex.normSq_apply, ← pow_two]\n  rfl\n\n"}
{"name":"Complex.polarCoord_source","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"⊢ Eq Complex.polarCoord.source Complex.slitPlane","decl":"protected theorem polarCoord_source : Complex.polarCoord.source = slitPlane := rfl\n\n"}
{"name":"Complex.polarCoord_target","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"⊢ Eq Complex.polarCoord.target (SProd.sprod (Set.Ioi 0) (Set.Ioo (Neg.neg Real.pi) Real.pi))","decl":"protected theorem polarCoord_target :\n    Complex.polarCoord.target = Set.Ioi (0 : ℝ) ×ˢ Set.Ioo (-π) π := rfl\n\n"}
{"name":"Complex.polarCoord_symm_apply","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"p : Prod Real Real\n⊢ Eq (↑Complex.polarCoord.symm p) (HMul.hMul (↑p.1) (HAdd.hAdd (↑(Real.cos p.2)) (HMul.hMul (↑(Real.sin p.2)) Complex.I)))","decl":"@[simp]\nprotected theorem polarCoord_symm_apply (p : ℝ × ℝ) :\n    Complex.polarCoord.symm p = p.1 * (Real.cos p.2 + Real.sin p.2 * Complex.I) := by\n  simp [Complex.polarCoord, equivRealProdCLM_symm_apply, mul_add, mul_assoc]\n\n"}
{"name":"Complex.measurableEquivRealProd_symm_polarCoord_symm_apply","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"p : Prod Real Real\n⊢ Eq (Complex.measurableEquivRealProd.symm (↑polarCoord.symm p)) (↑Complex.polarCoord.symm p)","decl":"theorem measurableEquivRealProd_symm_polarCoord_symm_apply (p : ℝ × ℝ) :\n    (measurableEquivRealProd.symm (polarCoord.symm p)) = Complex.polarCoord.symm p := rfl\n\n"}
{"name":"Complex.polarCoord_symm_abs","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"p : Prod Real Real\n⊢ Eq (Complex.abs (↑Complex.polarCoord.symm p)) (abs p.1)","decl":"theorem polarCoord_symm_abs (p : ℝ × ℝ) :\n    Complex.abs (Complex.polarCoord.symm p) = |p.1| := by simp\n\n"}
{"name":"Complex.integral_comp_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : Complex → E\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict polarCoord.target) fun p => HSMul.hSMul p.1 (f (↑Complex.polarCoord.symm p))) (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"protected theorem integral_comp_polarCoord_symm {E : Type*} [NormedAddCommGroup E]\n    [NormedSpace ℝ E] (f : ℂ → E) :\n    (∫ p in polarCoord.target, p.1 • f (Complex.polarCoord.symm p)) = ∫ p, f p := by\n  rw [← (Complex.volume_preserving_equiv_real_prod.symm).integral_comp\n    measurableEquivRealProd.symm.measurableEmbedding, ← integral_comp_polarCoord_symm]\n  simp_rw [measurableEquivRealProd_symm_polarCoord_symm_apply]\n\n"}
{"name":"Complex.lintegral_comp_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"f : Complex → ENNReal\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict polarCoord.target) fun p => HSMul.hSMul (ENNReal.ofReal p.1) (f (↑Complex.polarCoord.symm p))) (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"protected theorem lintegral_comp_polarCoord_symm (f : ℂ → ℝ≥0∞) :\n    (∫⁻ p in polarCoord.target, ENNReal.ofReal p.1 • f (Complex.polarCoord.symm p)) =\n      ∫⁻ p, f p := by\n  rw [← (volume_preserving_equiv_real_prod.symm).lintegral_comp_emb\n    measurableEquivRealProd.symm.measurableEmbedding, ← lintegral_comp_polarCoord_symm]\n  simp_rw [measurableEquivRealProd_symm_polarCoord_symm_apply]\n\n"}
{"name":"injOn_pi_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\n⊢ Set.InjOn (fun p i => ↑polarCoord.symm (p i)) (Set.univ.pi fun x => polarCoord.target)","decl":"theorem injOn_pi_polarCoord_symm :\n    Set.InjOn (fun p (i : ι) ↦ polarCoord.symm (p i)) (Set.univ.pi fun _ ↦ polarCoord.target) :=\n  fun _ hx _ hy h ↦ funext fun i ↦ polarCoord.symm.injOn (hx i trivial) (hy i trivial)\n    ((funext_iff.mp h) i)\n\n"}
{"name":"abs_fst_of_mem_pi_polarCoord_target","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\np : ι → Prod Real Real\nhp : Membership.mem (Set.univ.pi fun x => polarCoord.target) p\ni : ι\n⊢ Eq (abs (p i).1) (p i).1","decl":"theorem abs_fst_of_mem_pi_polarCoord_target {p : ι → ℝ × ℝ}\n    (hp : p ∈ (Set.univ.pi fun _ : ι ↦ polarCoord.target)) (i : ι) :\n    |(p i).1| = (p i).1 :=\n  abs_of_pos ((Set.mem_univ_pi.mp hp) i).1\n\n"}
{"name":"hasFDerivAt_pi_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\np : ι → Prod Real Real\n⊢ HasFDerivAt (fun x i => ↑polarCoord.symm (x i)) (fderivPiPolarCoordSymm p) p","decl":"theorem hasFDerivAt_pi_polarCoord_symm (p : ι → ℝ × ℝ) :\n    HasFDerivAt (fun x i ↦ polarCoord.symm (x i)) (fderivPiPolarCoordSymm p) p := by\n  rw [fderivPiPolarCoordSymm, hasFDerivAt_pi]\n  exact fun i ↦ HasFDerivAt.comp _ (hasFDerivAt_polarCoord_symm _) (hasFDerivAt_apply i _)\n\n"}
{"name":"det_fderivPiPolarCoordSymm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\np : ι → Prod Real Real\n⊢ Eq (fderivPiPolarCoordSymm p).det (Finset.univ.prod fun i => (p i).1)","decl":"theorem det_fderivPiPolarCoordSymm (p : ι → ℝ × ℝ) :\n    (fderivPiPolarCoordSymm p).det = ∏ i, (p i).1 := by\n  simp_rw [fderivPiPolarCoordSymm, ContinuousLinearMap.det_pi, det_fderivPolarCoordSymm]\n\n"}
{"name":"pi_polarCoord_symm_target_ae_eq_univ","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\n⊢ (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyEq (Set.image (Pi.map fun x => ↑polarCoord.symm) (Set.univ.pi fun x => polarCoord.target)) Set.univ","decl":"theorem pi_polarCoord_symm_target_ae_eq_univ :\n    (Pi.map (fun _ : ι ↦ polarCoord.symm) '' Set.univ.pi fun _ ↦ polarCoord.target)\n        =ᵐ[volume] Set.univ := by\n  rw [Set.piMap_image_univ_pi, polarCoord.symm_image_target_eq_source, volume_pi, ← Set.pi_univ]\n  exact ae_eq_set_pi fun _ _ ↦ polarCoord_source_ae_eq_univ\n\n"}
{"name":"measurableSet_pi_polarCoord_target","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\n⊢ MeasurableSet (Set.univ.pi fun x => polarCoord.target)","decl":"theorem measurableSet_pi_polarCoord_target :\n    MeasurableSet (Set.univ.pi fun _ : ι ↦ polarCoord.target) :=\n  MeasurableSet.univ_pi fun _ ↦ polarCoord.open_target.measurableSet\n\n"}
{"name":"integral_comp_pi_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝² : Fintype ι\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : (ι → Prod Real Real) → E\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.univ.pi fun x => polarCoord.target)) fun p => HSMul.hSMul (Finset.univ.prod fun i => (p i).1) (f fun i => ↑polarCoord.symm (p i))) (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"theorem integral_comp_pi_polarCoord_symm {E : Type*} [NormedAddCommGroup E] [NormedSpace ℝ E]\n    (f : (ι → ℝ × ℝ) → E) :\n    (∫ p in (Set.univ.pi fun _ : ι ↦ polarCoord.target),\n      (∏ i, (p i).1) • f (fun i ↦ polarCoord.symm (p i))) = ∫ p, f p := by\n  rw [← setIntegral_univ (f := f), ← setIntegral_congr_set pi_polarCoord_symm_target_ae_eq_univ]\n  convert (integral_image_eq_integral_abs_det_fderiv_smul volume measurableSet_pi_polarCoord_target\n    (fun p _ ↦ (hasFDerivAt_pi_polarCoord_symm p).hasFDerivWithinAt)\n      injOn_pi_polarCoord_symm f).symm using 1\n  refine setIntegral_congr_fun measurableSet_pi_polarCoord_target fun x hx ↦ ?_\n  simp_rw [det_fderivPiPolarCoordSymm, Finset.abs_prod, abs_fst_of_mem_pi_polarCoord_target hx]\n\n"}
{"name":"Complex.integral_comp_pi_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝² : Fintype ι\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : (ι → Complex) → E\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.univ.pi fun x => Complex.polarCoord.target)) fun p => HSMul.hSMul (Finset.univ.prod fun i => (p i).1) (f fun i => ↑Complex.polarCoord.symm (p i))) (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"protected theorem Complex.integral_comp_pi_polarCoord_symm {E : Type*} [NormedAddCommGroup E]\n    [NormedSpace ℝ E] (f : (ι → ℂ) → E) :\n    (∫ p in (Set.univ.pi fun _ : ι ↦ Complex.polarCoord.target),\n      (∏ i, (p i).1) • f (fun i ↦ Complex.polarCoord.symm (p i))) = ∫ p, f p := by\n  let e := MeasurableEquiv.piCongrRight (fun _ : ι ↦ measurableEquivRealProd.symm)\n  have := volume_preserving_pi (fun _ : ι ↦ Complex.volume_preserving_equiv_real_prod.symm)\n  rw [← MeasurePreserving.integral_comp this e.measurableEmbedding f]\n  exact integral_comp_pi_polarCoord_symm (f ∘ e)\n\n"}
{"name":"lintegral_comp_pi_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\nf : (ι → Prod Real Real) → ENNReal\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.univ.pi fun x => polarCoord.target)) fun p => HMul.hMul (Finset.univ.prod fun i => ENNReal.ofReal (p i).1) (f fun i => ↑polarCoord.symm (p i))) (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"theorem lintegral_comp_pi_polarCoord_symm (f : (ι → ℝ × ℝ) → ℝ≥0∞) :\n    ∫⁻ p in (Set.univ.pi fun _ : ι ↦ polarCoord.target),\n      (∏ i, .ofReal (p i).1) * f (fun i ↦ polarCoord.symm (p i)) = ∫⁻ p, f p := by\n  rw [← setLIntegral_univ f, ← setLIntegral_congr pi_polarCoord_symm_target_ae_eq_univ]\n  convert (lintegral_image_eq_lintegral_abs_det_fderiv_mul volume measurableSet_pi_polarCoord_target\n    (fun p _ ↦ (hasFDerivAt_pi_polarCoord_symm p).hasFDerivWithinAt)\n      injOn_pi_polarCoord_symm f).symm using 1\n  refine setLIntegral_congr_fun measurableSet_pi_polarCoord_target ?_\n  filter_upwards with x hx\n  simp_rw [det_fderivPiPolarCoordSymm, Finset.abs_prod, ENNReal.ofReal_prod_of_nonneg (fun _ _ ↦\n    abs_nonneg _), abs_fst_of_mem_pi_polarCoord_target hx]\n\n"}
{"name":"Complex.lintegral_comp_pi_polarCoord_symm","module":"Mathlib.Analysis.SpecialFunctions.PolarCoord","initialProofState":"ι : Type u_1\ninst✝ : Fintype ι\nf : (ι → Complex) → ENNReal\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.univ.pi fun x => Complex.polarCoord.target)) fun p => HMul.hMul (Finset.univ.prod fun i => ENNReal.ofReal (p i).1) (f fun i => ↑Complex.polarCoord.symm (p i))) (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun p => f p)","decl":"protected theorem Complex.lintegral_comp_pi_polarCoord_symm (f : (ι → ℂ) → ℝ≥0∞) :\n    ∫⁻ p in (Set.univ.pi fun _ : ι ↦ Complex.polarCoord.target),\n      (∏ i, .ofReal (p i).1) * f (fun i ↦ Complex.polarCoord.symm (p i)) = ∫⁻ p, f p := by\n  let e := MeasurableEquiv.piCongrRight (fun _ : ι ↦ measurableEquivRealProd.symm)\n  have := volume_preserving_pi (fun _ : ι ↦ Complex.volume_preserving_equiv_real_prod.symm)\n  rw [← MeasurePreserving.lintegral_comp_emb this e.measurableEmbedding]\n  exact lintegral_comp_pi_polarCoord_symm (f ∘ e)\n\n"}
