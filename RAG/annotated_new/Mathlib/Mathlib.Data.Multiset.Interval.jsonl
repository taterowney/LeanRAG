{"name":"Multiset.Icc_eq","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.Icc s t) (Finset.map Multiset.equivDFinsupp.symm.toEmbedding (Finset.Icc (Multiset.toDFinsupp s) (Multiset.toDFinsupp t)))","decl":"theorem Icc_eq :\n    Finset.Icc s t = (Finset.Icc (toDFinsupp s) (toDFinsupp t)).map\n      Multiset.equivDFinsupp.toEquiv.symm.toEmbedding :=\n  rfl\n\n"}
{"name":"Multiset.uIcc_eq","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.uIcc s t) (Finset.map Multiset.equivDFinsupp.symm.toEmbedding (Finset.uIcc (Multiset.toDFinsupp s) (Multiset.toDFinsupp t)))","decl":"theorem uIcc_eq :\n    uIcc s t =\n      (uIcc (toDFinsupp s) (toDFinsupp t)).map Multiset.equivDFinsupp.toEquiv.symm.toEmbedding :=\n  (Icc_eq _ _).trans <| by simp [uIcc]\n\n"}
{"name":"Multiset.card_Icc","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.Icc s t).card ((Union.union s.toFinset t.toFinset).prod fun i => HSub.hSub (HAdd.hAdd (Multiset.count i t) 1) (Multiset.count i s))","decl":"theorem card_Icc :\n    #(Finset.Icc s t) = ∏ i ∈ s.toFinset ∪ t.toFinset, (t.count i + 1 - s.count i) := by\n  simp_rw [Icc_eq, Finset.card_map, DFinsupp.card_Icc, Nat.card_Icc, Multiset.toDFinsupp_apply,\n    toDFinsupp_support]\n\n"}
{"name":"Multiset.card_Ico","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.Ico s t).card (HSub.hSub ((Union.union s.toFinset t.toFinset).prod fun i => HSub.hSub (HAdd.hAdd (Multiset.count i t) 1) (Multiset.count i s)) 1)","decl":"theorem card_Ico :\n    #(Finset.Ico s t) = ∏ i ∈ s.toFinset ∪ t.toFinset, (t.count i + 1 - s.count i) - 1 := by\n  rw [Finset.card_Ico_eq_card_Icc_sub_one, card_Icc]\n\n"}
{"name":"Multiset.card_Ioc","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.Ioc s t).card (HSub.hSub ((Union.union s.toFinset t.toFinset).prod fun i => HSub.hSub (HAdd.hAdd (Multiset.count i t) 1) (Multiset.count i s)) 1)","decl":"theorem card_Ioc :\n    #(Finset.Ioc s t) = ∏ i ∈ s.toFinset ∪ t.toFinset, (t.count i + 1 - s.count i) - 1 := by\n  rw [Finset.card_Ioc_eq_card_Icc_sub_one, card_Icc]\n\n"}
{"name":"Multiset.card_Ioo","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.Ioo s t).card (HSub.hSub ((Union.union s.toFinset t.toFinset).prod fun i => HSub.hSub (HAdd.hAdd (Multiset.count i t) 1) (Multiset.count i s)) 2)","decl":"theorem card_Ioo :\n    #(Finset.Ioo s t) = ∏ i ∈ s.toFinset ∪ t.toFinset, (t.count i + 1 - s.count i) - 2 := by\n  rw [Finset.card_Ioo_eq_card_Icc_sub_two, card_Icc]\n\n"}
{"name":"Multiset.card_uIcc","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Finset.uIcc s t).card ((Union.union s.toFinset t.toFinset).prod fun i => HAdd.hAdd (HSub.hSub ↑(Multiset.count i t) ↑(Multiset.count i s)).natAbs 1)","decl":"theorem card_uIcc :\n    (uIcc s t).card = ∏ i ∈ s.toFinset ∪ t.toFinset, ((t.count i - s.count i : ℤ).natAbs + 1) := by\n  simp_rw [uIcc_eq, Finset.card_map, DFinsupp.card_uIcc, Nat.card_uIcc, Multiset.toDFinsupp_apply,\n    toDFinsupp_support]\n\n"}
{"name":"Multiset.card_Iic","module":"Mathlib.Data.Multiset.Interval","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns : Multiset α\n⊢ Eq (Finset.Iic s).card (s.toFinset.prod fun i => HAdd.hAdd (Multiset.count i s) 1)","decl":"theorem card_Iic : (Finset.Iic s).card = ∏ i ∈ s.toFinset, (s.count i + 1) := by\n  simp_rw [Iic_eq_Icc, card_Icc, bot_eq_zero, toFinset_zero, empty_union, count_zero, tsub_zero]\n\n"}
