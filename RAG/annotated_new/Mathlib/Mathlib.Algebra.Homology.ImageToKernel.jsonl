{"name":"image_le_kernel","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝ : CategoryTheory.Limits.HasKernel g\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ LE.le (CategoryTheory.Limits.imageSubobject f) (CategoryTheory.Limits.kernelSubobject g)","decl":"theorem image_le_kernel (w : f ≫ g = 0) : imageSubobject f ≤ kernelSubobject g :=\n  imageSubobject_le_mk _ _ (kernel.lift _ _ w) (by simp)\n\n"}
{"name":"instMonoImageToKernel","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝ : CategoryTheory.Limits.HasKernel g\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ CategoryTheory.Mono (imageToKernel f g w)","decl":"instance (w : f ≫ g = 0) : Mono (imageToKernel f g w) := by\n  dsimp only [imageToKernel]\n  infer_instance\n\n"}
{"name":"subobject_ofLE_as_imageToKernel","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝ : CategoryTheory.Limits.HasKernel g\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\nh : LE.le (CategoryTheory.Limits.imageSubobject f) (CategoryTheory.Limits.kernelSubobject g)\n⊢ Eq ((CategoryTheory.Limits.imageSubobject f).ofLE (CategoryTheory.Limits.kernelSubobject g) h) (imageToKernel f g w)","decl":"/-- Prefer `imageToKernel`. -/\n@[simp]\ntheorem subobject_ofLE_as_imageToKernel (w : f ≫ g = 0) (h) :\n    Subobject.ofLE (imageSubobject f) (kernelSubobject g) h = imageToKernel f g w :=\n  rfl\n\n"}
{"name":"imageToKernel_arrow_assoc","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝ : CategoryTheory.Limits.HasKernel g\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\nZ : V\nh : Quiver.Hom B Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (imageToKernel f g w) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.kernelSubobject g).arrow h)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.imageSubobject f).arrow h)","decl":"@[reassoc (attr := simp)]\ntheorem imageToKernel_arrow (w : f ≫ g = 0) :\n    imageToKernel f g w ≫ (kernelSubobject g).arrow = (imageSubobject f).arrow := by\n  simp [imageToKernel]\n\n"}
{"name":"imageToKernel_arrow","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝ : CategoryTheory.Limits.HasKernel g\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ Eq (CategoryTheory.CategoryStruct.comp (imageToKernel f g w) (CategoryTheory.Limits.kernelSubobject g).arrow) (CategoryTheory.Limits.imageSubobject f).arrow","decl":"@[reassoc (attr := simp)]\ntheorem imageToKernel_arrow (w : f ≫ g = 0) :\n    imageToKernel f g w ≫ (kernelSubobject g).arrow = (imageSubobject f).arrow := by\n  simp [imageToKernel]\n\n"}
{"name":"imageToKernel_arrow_apply","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝⁴ : CategoryTheory.Category.{v, u} V\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝² : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasKernel g\ninst✝ : CategoryTheory.HasForget V\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\nx : (CategoryTheory.forget V).obj (CategoryTheory.Subobject.underlying.obj (CategoryTheory.Limits.imageSubobject f))\n⊢ Eq ((CategoryTheory.Limits.kernelSubobject g).arrow ((imageToKernel f g w) x)) ((CategoryTheory.Limits.imageSubobject f).arrow x)","decl":"@[simp]\nlemma imageToKernel_arrow_apply [HasForget V] (w : f ≫ g = 0)\n    (x : (forget V).obj (Subobject.underlying.obj (imageSubobject f))) :\n    (kernelSubobject g).arrow (imageToKernel f g w x) =\n      (imageSubobject f).arrow x := by\n  rw [← CategoryTheory.comp_apply, imageToKernel_arrow]\n\n-- This is less useful as a `simp` lemma than it initially appears,\n-- as it \"loses\" the information the morphism factors through the image.\n"}
{"name":"factorThruImageSubobject_comp_imageToKernel","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImage f\ng : Quiver.Hom B C\ninst✝ : CategoryTheory.Limits.HasKernel g\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.factorThruImageSubobject f) (imageToKernel f g w)) (CategoryTheory.Limits.factorThruKernelSubobject g f w)","decl":"theorem factorThruImageSubobject_comp_imageToKernel (w : f ≫ g = 0) :\n    factorThruImageSubobject f ≫ imageToKernel f g w = factorThruKernelSubobject g f w := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_zero_left","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasKernels V\ninst✝ : CategoryTheory.Limits.HasZeroObject V\nw : Eq (CategoryTheory.CategoryStruct.comp 0 g) 0\n⊢ Eq (imageToKernel 0 g w) 0","decl":"@[simp]\ntheorem imageToKernel_zero_left [HasKernels V] [HasZeroObject V] {w} :\n    imageToKernel (0 : A ⟶ B) g w = 0 := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_zero_right","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝² : CategoryTheory.Category.{v, u} V\ninst✝¹ : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝ : CategoryTheory.Limits.HasImages V\nw : Eq (CategoryTheory.CategoryStruct.comp f 0) 0\n⊢ Eq (imageToKernel f 0 w) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.imageSubobject f).arrow (CategoryTheory.inv (CategoryTheory.Limits.kernelSubobject 0).arrow))","decl":"theorem imageToKernel_zero_right [HasImages V] {w} :\n    imageToKernel f (0 : B ⟶ C) w =\n      (imageSubobject f).arrow ≫ inv (kernelSubobject (0 : B ⟶ C)).arrow := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_comp_right","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasKernels V\ninst✝ : CategoryTheory.Limits.HasImages V\nD : V\nh : Quiver.Hom C D\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ Eq (imageToKernel f (CategoryTheory.CategoryStruct.comp g h) ⋯) (CategoryTheory.CategoryStruct.comp (imageToKernel f g w) ((CategoryTheory.Limits.kernelSubobject g).ofLE (CategoryTheory.Limits.kernelSubobject (CategoryTheory.CategoryStruct.comp g h)) ⋯))","decl":"theorem imageToKernel_comp_right {D : V} (h : C ⟶ D) (w : f ≫ g = 0) :\n    imageToKernel f (g ≫ h) (by simp [reassoc_of% w]) =\n      imageToKernel f g w ≫ Subobject.ofLE _ _ (kernelSubobject_comp_le g h) := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_comp_left","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasKernels V\ninst✝ : CategoryTheory.Limits.HasImages V\nZ : V\nh : Quiver.Hom Z A\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ Eq (imageToKernel (CategoryTheory.CategoryStruct.comp h f) g ⋯) (CategoryTheory.CategoryStruct.comp ((CategoryTheory.Limits.imageSubobject (CategoryTheory.CategoryStruct.comp h f)).ofLE (CategoryTheory.Limits.imageSubobject f) ⋯) (imageToKernel f g w))","decl":"theorem imageToKernel_comp_left {Z : V} (h : Z ⟶ A) (w : f ≫ g = 0) :\n    imageToKernel (h ≫ f) g (by simp [w]) =\n      Subobject.ofLE _ _ (imageSubobject_comp_le h f) ≫ imageToKernel f g w := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_comp_mono","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝⁴ : CategoryTheory.Category.{v, u} V\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝² : CategoryTheory.Limits.HasKernels V\ninst✝¹ : CategoryTheory.Limits.HasImages V\nD : V\nh : Quiver.Hom C D\ninst✝ : CategoryTheory.Mono h\nw : Eq (CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.comp g h)) 0\n⊢ Eq (imageToKernel f (CategoryTheory.CategoryStruct.comp g h) w) (CategoryTheory.CategoryStruct.comp (imageToKernel f g ⋯) ((CategoryTheory.Limits.kernelSubobject (CategoryTheory.CategoryStruct.comp g h)).isoOfEq (CategoryTheory.Limits.kernelSubobject g) ⋯).inv)","decl":"@[simp]\ntheorem imageToKernel_comp_mono {D : V} (h : C ⟶ D) [Mono h] (w) :\n    imageToKernel f (g ≫ h) w =\n      imageToKernel f g ((cancel_mono h).mp (by simpa using w : (f ≫ g) ≫ h = 0 ≫ h)) ≫\n        (Subobject.isoOfEq _ _ (kernelSubobject_comp_mono g h)).inv := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_epi_comp","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝⁴ : CategoryTheory.Category.{v, u} V\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝² : CategoryTheory.Limits.HasKernels V\ninst✝¹ : CategoryTheory.Limits.HasImages V\nZ : V\nh : Quiver.Hom Z A\ninst✝ : CategoryTheory.Epi h\nw : Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp h f) g) 0\n⊢ Eq (imageToKernel (CategoryTheory.CategoryStruct.comp h f) g w) (CategoryTheory.CategoryStruct.comp ((CategoryTheory.Limits.imageSubobject (CategoryTheory.CategoryStruct.comp h f)).ofLE (CategoryTheory.Limits.imageSubobject f) ⋯) (imageToKernel f g ⋯))","decl":"@[simp]\ntheorem imageToKernel_epi_comp {Z : V} (h : Z ⟶ A) [Epi h] (w) :\n    imageToKernel (h ≫ f) g w =\n      Subobject.ofLE _ _ (imageSubobject_comp_le h f) ≫\n        imageToKernel f g ((cancel_epi h).mp (by simpa using w : h ≫ f ≫ g = h ≫ 0)) := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_comp_hom_inv_comp","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasEqualizers V\ninst✝ : CategoryTheory.Limits.HasImages V\nZ : V\ni : CategoryTheory.Iso B Z\nw : Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp f i.hom) (CategoryTheory.CategoryStruct.comp i.inv g)) 0\n⊢ Eq (imageToKernel (CategoryTheory.CategoryStruct.comp f i.hom) (CategoryTheory.CategoryStruct.comp i.inv g) w) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.imageSubobjectCompIso f i.hom).hom (CategoryTheory.CategoryStruct.comp (imageToKernel f g ⋯) (CategoryTheory.Limits.kernelSubobjectIsoComp i.inv g).inv))","decl":"@[simp]\ntheorem imageToKernel_comp_hom_inv_comp [HasEqualizers V] [HasImages V] {Z : V} {i : B ≅ Z} (w) :\n    imageToKernel (f ≫ i.hom) (i.inv ≫ g) w =\n      (imageSubobjectCompIso _ _).hom ≫\n        imageToKernel f g (by simpa using w) ≫ (kernelSubobjectIsoComp i.inv g).inv := by\n  ext\n  simp\n\n"}
{"name":"imageToKernel_epi_of_zero_of_mono","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝⁴ : CategoryTheory.Category.{v, u} V\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\ng : Quiver.Hom B C\ninst✝² : CategoryTheory.Limits.HasKernels V\ninst✝¹ : CategoryTheory.Limits.HasZeroObject V\ninst✝ : CategoryTheory.Mono g\n⊢ CategoryTheory.Epi (imageToKernel 0 g ⋯)","decl":"/-- `imageToKernel` for `A --0--> B --g--> C`, where `g` is a mono is itself an epi\n(i.e. the sequence is exact at `B`).\n-/\ninstance imageToKernel_epi_of_zero_of_mono [HasKernels V] [HasZeroObject V] [Mono g] :\n    Epi (imageToKernel (0 : A ⟶ B) g (by simp)) :=\n  epi_of_target_iso_zero _ (kernelSubobjectIso g ≪≫ kernel.ofMono g)\n\n"}
{"name":"imageToKernel_epi_of_epi_of_zero","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ninst✝¹ : CategoryTheory.Limits.HasImages V\ninst✝ : CategoryTheory.Epi f\n⊢ CategoryTheory.Epi (imageToKernel f 0 ⋯)","decl":"/-- `imageToKernel` for `A --f--> B --0--> C`, where `g` is an epi is itself an epi\n(i.e. the sequence is exact at `B`).\n-/\ninstance imageToKernel_epi_of_epi_of_zero [HasImages V] [Epi f] :\n    Epi (imageToKernel f (0 : B ⟶ C) (by simp)) := by\n  simp only [imageToKernel_zero_right]\n  haveI := epi_image_of_epi f\n  rw [← imageSubobject_arrow]\n  infer_instance\n\n"}
{"name":"imageSubobjectIso_imageToKernel'","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasKernels V\ninst✝ : CategoryTheory.Limits.HasImages V\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.imageSubobjectIso f).hom (imageToKernel' f g w)) (CategoryTheory.CategoryStruct.comp (imageToKernel f g w) (CategoryTheory.Limits.kernelSubobjectIso g).hom)","decl":"@[simp]\ntheorem imageSubobjectIso_imageToKernel' (w : f ≫ g = 0) :\n    (imageSubobjectIso f).hom ≫ imageToKernel' f g w =\n      imageToKernel f g w ≫ (kernelSubobjectIso g).hom := by\n  ext\n  simp [imageToKernel']\n\n"}
{"name":"imageToKernel'_kernelSubobjectIso","module":"Mathlib.Algebra.Homology.ImageToKernel","initialProofState":"V : Type u\ninst✝³ : CategoryTheory.Category.{v, u} V\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms V\nA B C : V\nf : Quiver.Hom A B\ng : Quiver.Hom B C\ninst✝¹ : CategoryTheory.Limits.HasKernels V\ninst✝ : CategoryTheory.Limits.HasImages V\nw : Eq (CategoryTheory.CategoryStruct.comp f g) 0\n⊢ Eq (CategoryTheory.CategoryStruct.comp (imageToKernel' f g w) (CategoryTheory.Limits.kernelSubobjectIso g).inv) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.imageSubobjectIso f).inv (imageToKernel f g w))","decl":"@[simp]\ntheorem imageToKernel'_kernelSubobjectIso (w : f ≫ g = 0) :\n    imageToKernel' f g w ≫ (kernelSubobjectIso g).inv =\n      (imageSubobjectIso f).inv ≫ imageToKernel f g w := by\n  ext\n  simp [imageToKernel']\n\n"}
