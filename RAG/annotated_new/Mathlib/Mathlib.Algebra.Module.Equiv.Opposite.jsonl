{"name":"LinearMap.ext_ring_op","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝³ : Semiring R\ninst✝² : Semiring S\ninst✝¹ : AddCommMonoid M\ninst✝ : Module S M\nσ : RingHom (MulOpposite R) S\nf g : LinearMap σ R M\nh : Eq (f 1) (g 1)\n⊢ Eq f g","decl":"@[ext high]\ntheorem LinearMap.ext_ring_op\n    {σ : Rᵐᵒᵖ →+* S} {f g : R →ₛₗ[σ] M} (h : f (1 : R) = g (1 : R)) :\n    f = g :=\n  ext fun x ↦ by\n    -- Porting note: replaced the oneliner `rw` proof with a partially term-mode proof\n    -- because `rw` was giving \"motive is type incorrect\" errors\n    rw [← one_mul x, ← op_smul_eq_mul]\n    refine (f.map_smulₛₗ (MulOpposite.op x) 1).trans ?_\n    rw [h]\n    exact (g.map_smulₛₗ (MulOpposite.op x) 1).symm\n\n"}
{"name":"LinearMap.ext_ring_op_iff","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝³ : Semiring R\ninst✝² : Semiring S\ninst✝¹ : AddCommMonoid M\ninst✝ : Module S M\nσ : RingHom (MulOpposite R) S\nf g : LinearMap σ R M\n⊢ Iff (Eq f g) (Eq (f 1) (g 1))","decl":"@[ext high]\ntheorem LinearMap.ext_ring_op\n    {σ : Rᵐᵒᵖ →+* S} {f g : R →ₛₗ[σ] M} (h : f (1 : R) = g (1 : R)) :\n    f = g :=\n  ext fun x ↦ by\n    -- Porting note: replaced the oneliner `rw` proof with a partially term-mode proof\n    -- because `rw` was giving \"motive is type incorrect\" errors\n    rw [← one_mul x, ← op_smul_eq_mul]\n    refine (f.map_smulₛₗ (MulOpposite.op x) 1).trans ?_\n    rw [h]\n    exact (g.map_smulₛₗ (MulOpposite.op x) 1).symm\n\n"}
{"name":"MulOpposite.coe_opLinearEquiv","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (⇑(MulOpposite.opLinearEquiv R)) MulOpposite.op","decl":"@[simp]\ntheorem coe_opLinearEquiv : (opLinearEquiv R : M → Mᵐᵒᵖ) = op :=\n  rfl\n\n"}
{"name":"MulOpposite.coe_opLinearEquiv_symm","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (⇑(MulOpposite.opLinearEquiv R).symm) MulOpposite.unop","decl":"@[simp]\ntheorem coe_opLinearEquiv_symm : ((opLinearEquiv R).symm : Mᵐᵒᵖ → M) = unop :=\n  rfl\n\n"}
{"name":"MulOpposite.coe_opLinearEquiv_toLinearMap","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (⇑↑(MulOpposite.opLinearEquiv R)) MulOpposite.op","decl":"@[simp]\ntheorem coe_opLinearEquiv_toLinearMap : ((opLinearEquiv R).toLinearMap : M → Mᵐᵒᵖ) = op :=\n  rfl\n\n"}
{"name":"MulOpposite.coe_opLinearEquiv_symm_toLinearMap","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (⇑↑(MulOpposite.opLinearEquiv R).symm) MulOpposite.unop","decl":"@[simp]\ntheorem coe_opLinearEquiv_symm_toLinearMap :\n    ((opLinearEquiv R).symm.toLinearMap : Mᵐᵒᵖ → M) = unop :=\n  rfl\n\n-- Porting note: LHS simplifies; added new simp lemma below @[simp]\n"}
{"name":"MulOpposite.opLinearEquiv_toAddEquiv","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (MulOpposite.opLinearEquiv R).toAddEquiv MulOpposite.opAddEquiv","decl":"theorem opLinearEquiv_toAddEquiv : (opLinearEquiv R : M ≃ₗ[R] Mᵐᵒᵖ).toAddEquiv = opAddEquiv :=\n  rfl\n\n"}
{"name":"MulOpposite.coe_opLinearEquiv_addEquiv","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (↑(MulOpposite.opLinearEquiv R)) MulOpposite.opAddEquiv","decl":"@[simp]\ntheorem coe_opLinearEquiv_addEquiv : ((opLinearEquiv R : M ≃ₗ[R] Mᵐᵒᵖ) : M ≃+ Mᵐᵒᵖ) = opAddEquiv :=\n  rfl\n\n-- Porting note: LHS simplifies; added new simp lemma below @[simp]\n"}
{"name":"MulOpposite.opLinearEquiv_symm_toAddEquiv","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (MulOpposite.opLinearEquiv R).symm.toAddEquiv MulOpposite.opAddEquiv.symm","decl":"theorem opLinearEquiv_symm_toAddEquiv :\n    (opLinearEquiv R : M ≃ₗ[R] Mᵐᵒᵖ).symm.toAddEquiv = opAddEquiv.symm :=\n  rfl\n\n"}
{"name":"MulOpposite.coe_opLinearEquiv_symm_addEquiv","module":"Mathlib.Algebra.Module.Equiv.Opposite","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (↑(MulOpposite.opLinearEquiv R).symm) MulOpposite.opAddEquiv.symm","decl":"@[simp]\ntheorem coe_opLinearEquiv_symm_addEquiv :\n    ((opLinearEquiv R : M ≃ₗ[R] Mᵐᵒᵖ).symm : Mᵐᵒᵖ ≃+ M) = opAddEquiv.symm :=\n  rfl\n\n"}
