{"name":"Transcendental.linearIndependent_sub_inv","module":"Mathlib.RingTheory.Algebraic.LinearIndependent","initialProofState":"F : Type u_1\nE : Type u_2\ninst✝² : Field F\ninst✝¹ : Field E\ninst✝ : Algebra F E\nx : E\nH : Transcendental F x\n⊢ LinearIndependent F fun a => Inv.inv (HSub.hSub x ((algebraMap F E) a))","decl":"/-- If `E / F` is a field extension, `x` is an element of `E` transcendental over `F`,\nthen `{(x - a)⁻¹ | a : F}` is linearly independent over `F`. -/\ntheorem Transcendental.linearIndependent_sub_inv\n    {F E : Type*} [Field F] [Field E] [Algebra F E] {x : E} (H : Transcendental F x) :\n    LinearIndependent F fun a ↦ (x - algebraMap F E a)⁻¹ := by\n  classical\n  rw [transcendental_iff] at H\n  refine linearIndependent_iff'.2 fun s m hm i hi ↦ ?_\n  have hnz (a : F) : x - algebraMap F E a ≠ 0 := fun h ↦\n    X_sub_C_ne_zero a <| H (.X - .C a) (by simp [h])\n  let b := s.prod fun j ↦ x - algebraMap F E j\n  have h1 : ∀ i ∈ s, m i • (b * (x - algebraMap F E i)⁻¹) =\n      m i • (s.erase i).prod fun j ↦ x - algebraMap F E j := fun i hi ↦ by\n    simp_rw [b, ← s.prod_erase_mul _ hi, mul_inv_cancel_right₀ (hnz i)]\n  replace hm := congr(b * $(hm))\n  simp_rw [mul_zero, Finset.mul_sum, mul_smul_comm, Finset.sum_congr rfl h1] at hm\n  let p : Polynomial F := s.sum fun i ↦ .C (m i) * (s.erase i).prod fun j ↦ .X - .C j\n  replace hm := congr(Polynomial.aeval i $(H p (by simp_rw [← hm, p, map_sum, map_mul, map_prod,\n    map_sub, aeval_X, aeval_C, Algebra.smul_def])))\n  have h2 : ∀ j ∈ s.erase i, m j * ((s.erase j).prod fun x ↦ i - x) = 0 := fun j hj ↦ by\n    have := Finset.mem_erase_of_ne_of_mem (Finset.ne_of_mem_erase hj).symm hi\n    simp_rw [← (s.erase j).prod_erase_mul _ this, sub_self, mul_zero]\n  simp_rw [map_zero, p, map_sum, map_mul, map_prod, map_sub, aeval_X,\n    aeval_C, Algebra.id.map_eq_self, ← s.sum_erase_add _ hi,\n    Finset.sum_eq_zero h2, zero_add] at hm\n  exact eq_zero_of_ne_zero_of_mul_right_eq_zero (Finset.prod_ne_zero_iff.2 fun j hj ↦\n    sub_ne_zero.2 (Finset.ne_of_mem_erase hj).symm) hm\n\n"}
