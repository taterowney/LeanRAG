{"name":"aeconst_of_dense_setOf_preimage_smul_ae","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"M : Type u_1\ninst✝⁹ : TopologicalSpace M\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : SMul M X\ninst✝³ : ContinuousSMul M X\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicSMul M X μ\ns : Set X\nhsm : MeasureTheory.NullMeasurableSet s μ\nhd : Dense (setOf fun g => (MeasureTheory.ae μ).EventuallyEq (Set.preimage (fun x => HSMul.hSMul g x) s) s)\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"/-- Let `M` act continuously on an R₁ topological space `X`.\nLet `μ` be a finite inner regular measure on `X` which is ergodic with respect to this action.\nIf a null measurable set `s` is a.e. equal\nto its preimages under the action of a dense set of elements of `M`,\nthen it is either null or conull. -/\n@[to_additive \"Let `M` act continuously on an R₁ topological space `X`.\nLet `μ` be a finite inner regular measure on `X` which is ergodic with respect to this action.\nIf a null measurable set `s` is a.e. equal\nto its preimages under the action of a dense set of elements of `M`,\nthen it is either null or conull.\"]\ntheorem aeconst_of_dense_setOf_preimage_smul_ae (hsm : NullMeasurableSet s μ)\n    (hd : Dense {g : M | (g • ·) ⁻¹' s =ᵐ[μ] s}) : EventuallyConst s (ae μ) := by\n  borelize M\n  refine aeconst_of_forall_preimage_smul_ae_eq M hsm ?_\n  rwa [dense_iff_closure_eq, IsClosed.closure_eq, eq_univ_iff_forall] at hd\n  let f : C(M × X, X) := ⟨(· • ·).uncurry, continuous_smul⟩\n  exact isClosed_setOf_preimage_ae_eq f.curry.continuous (measurePreserving_smul · μ) _ hsm\n    (measure_ne_top _ _)\n\n"}
{"name":"aeconst_of_dense_setOf_preimage_vadd_ae","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"M : Type u_1\ninst✝⁹ : TopologicalSpace M\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : VAdd M X\ninst✝³ : ContinuousVAdd M X\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicVAdd M X μ\ns : Set X\nhsm : MeasureTheory.NullMeasurableSet s μ\nhd : Dense (setOf fun g => (MeasureTheory.ae μ).EventuallyEq (Set.preimage (fun x => HVAdd.hVAdd g x) s) s)\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"/-- Let `M` act continuously on an R₁ topological space `X`.\nLet `μ` be a finite inner regular measure on `X` which is ergodic with respect to this action.\nIf a null measurable set `s` is a.e. equal\nto its preimages under the action of a dense set of elements of `M`,\nthen it is either null or conull. -/\n@[to_additive \"Let `M` act continuously on an R₁ topological space `X`.\nLet `μ` be a finite inner regular measure on `X` which is ergodic with respect to this action.\nIf a null measurable set `s` is a.e. equal\nto its preimages under the action of a dense set of elements of `M`,\nthen it is either null or conull.\"]\ntheorem aeconst_of_dense_setOf_preimage_smul_ae (hsm : NullMeasurableSet s μ)\n    (hd : Dense {g : M | (g • ·) ⁻¹' s =ᵐ[μ] s}) : EventuallyConst s (ae μ) := by\n  borelize M\n  refine aeconst_of_forall_preimage_smul_ae_eq M hsm ?_\n  rwa [dense_iff_closure_eq, IsClosed.closure_eq, eq_univ_iff_forall] at hd\n  let f : C(M × X, X) := ⟨(· • ·).uncurry, continuous_smul⟩\n  exact isClosed_setOf_preimage_ae_eq f.curry.continuous (measurePreserving_smul · μ) _ hsm\n    (measure_ne_top _ _)\n\n"}
{"name":"aeconst_of_dense_setOf_preimage_vadd_eq","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"M : Type u_1\ninst✝⁹ : TopologicalSpace M\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : VAdd M X\ninst✝³ : ContinuousVAdd M X\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicVAdd M X μ\ns : Set X\nhsm : MeasureTheory.NullMeasurableSet s μ\nhd : Dense (setOf fun g => Eq (Set.preimage (fun x => HVAdd.hVAdd g x) s) s)\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"@[to_additive]\ntheorem aeconst_of_dense_setOf_preimage_smul_eq (hsm : NullMeasurableSet s μ)\n    (hd : Dense {g : M | (g • ·) ⁻¹' s = s}) : EventuallyConst s (ae μ) :=\n  aeconst_of_dense_setOf_preimage_smul_ae hsm <| hd.mono fun _ h ↦ mem_setOf.2 <| .of_eq h\n\n"}
{"name":"aeconst_of_dense_setOf_preimage_smul_eq","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"M : Type u_1\ninst✝⁹ : TopologicalSpace M\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : SMul M X\ninst✝³ : ContinuousSMul M X\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicSMul M X μ\ns : Set X\nhsm : MeasureTheory.NullMeasurableSet s μ\nhd : Dense (setOf fun g => Eq (Set.preimage (fun x => HSMul.hSMul g x) s) s)\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"@[to_additive]\ntheorem aeconst_of_dense_setOf_preimage_smul_eq (hsm : NullMeasurableSet s μ)\n    (hd : Dense {g : M | (g • ·) ⁻¹' s = s}) : EventuallyConst s (ae μ) :=\n  aeconst_of_dense_setOf_preimage_smul_ae hsm <| hd.mono fun _ h ↦ mem_setOf.2 <| .of_eq h\n\n"}
{"name":"ergodic_vadd_of_denseRange_nsmul","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"X : Type u_2\ninst✝¹⁰ : TopologicalSpace X\ninst✝⁹ : R1Space X\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : BorelSpace X\nM : Type u_3\ninst✝⁶ : AddMonoid M\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : AddAction M X\ninst✝³ : ContinuousVAdd M X\ng : M\nhg : DenseRange fun x => HSMul.hSMul x g\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicVAdd M X μ\n⊢ Ergodic (fun x => HVAdd.hVAdd g x) μ","decl":"/-- If a monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its natural powers are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the scalar multiplication by `g` is an ergodic map. -/\n@[to_additive \"If an additive monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its natural multiples are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the vector addition of `g` is an ergodic map.\"]\ntheorem ergodic_smul_of_denseRange_pow {M : Type*} [Monoid M] [TopologicalSpace M]\n    [MulAction M X] [ContinuousSMul M X] {g : M} (hg : DenseRange (g ^ · : ℕ → M))\n    (μ : Measure X) [IsFiniteMeasure μ] [μ.InnerRegular] [ErgodicSMul M X μ] :\n    Ergodic (g • ·) μ := by\n  borelize M\n  refine ⟨measurePreserving_smul _ _, ⟨fun s hsm hs ↦ ?_⟩⟩\n  refine aeconst_of_dense_setOf_preimage_smul_eq hsm.nullMeasurableSet (hg.mono ?_)\n  refine range_subset_iff.2 fun n ↦ ?_\n  rw [mem_setOf, ← smul_iterate, preimage_iterate_eq, iterate_fixed hs]\n\n"}
{"name":"ergodic_smul_of_denseRange_pow","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"X : Type u_2\ninst✝¹⁰ : TopologicalSpace X\ninst✝⁹ : R1Space X\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : BorelSpace X\nM : Type u_3\ninst✝⁶ : Monoid M\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : MulAction M X\ninst✝³ : ContinuousSMul M X\ng : M\nhg : DenseRange fun x => HPow.hPow g x\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicSMul M X μ\n⊢ Ergodic (fun x => HSMul.hSMul g x) μ","decl":"/-- If a monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its natural powers are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the scalar multiplication by `g` is an ergodic map. -/\n@[to_additive \"If an additive monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its natural multiples are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the vector addition of `g` is an ergodic map.\"]\ntheorem ergodic_smul_of_denseRange_pow {M : Type*} [Monoid M] [TopologicalSpace M]\n    [MulAction M X] [ContinuousSMul M X] {g : M} (hg : DenseRange (g ^ · : ℕ → M))\n    (μ : Measure X) [IsFiniteMeasure μ] [μ.InnerRegular] [ErgodicSMul M X μ] :\n    Ergodic (g • ·) μ := by\n  borelize M\n  refine ⟨measurePreserving_smul _ _, ⟨fun s hsm hs ↦ ?_⟩⟩\n  refine aeconst_of_dense_setOf_preimage_smul_eq hsm.nullMeasurableSet (hg.mono ?_)\n  refine range_subset_iff.2 fun n ↦ ?_\n  rw [mem_setOf, ← smul_iterate, preimage_iterate_eq, iterate_fixed hs]\n\n"}
{"name":"ErgodicVAdd.trans_isMinimal","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝¹⁵ : AddMonoid M\ninst✝¹⁴ : VAdd M X\ninst✝¹³ : TopologicalSpace X\ninst✝¹² : R1Space X\ninst✝¹¹ : MeasurableSpace X\ninst✝¹⁰ : BorelSpace X\nμ : MeasureTheory.Measure X\ninst✝⁹ : MeasureTheory.IsFiniteMeasure μ\ninst✝⁸ : μ.InnerRegular\nN : Type u_3\ninst✝⁷ : AddAction M N\ninst✝⁶ : AddMonoid N\ninst✝⁵ : TopologicalSpace N\ninst✝⁴ : AddAction.IsMinimal M N\ninst✝³ : AddAction N X\ninst✝² : VAddAssocClass M N X\ninst✝¹ : ContinuousVAdd N X\ninst✝ : ErgodicVAdd N X μ\n⊢ ErgodicVAdd M X μ","decl":"/-- If `N` acts continuously and ergodically on `X` and `M` acts minimally on `N`,\nthen the corresponding action of `M` on `X` is ergodic. -/\n@[to_additive\n  \"If `N` acts additively continuously and ergodically on `X` and `M` acts minimally on `N`,\nthen the corresponding action of `M` on `X` is ergodic.\"]\ntheorem ErgodicSMul.trans_isMinimal (N : Type*) [MulAction M N]\n    [Monoid N] [TopologicalSpace N] [MulAction.IsMinimal M N]\n    [MulAction N X] [IsScalarTower M N X] [ContinuousSMul N X] [ErgodicSMul N X μ] :\n    ErgodicSMul M X μ where\n  measure_preimage_smul c s hsm := by\n    simpa only [smul_one_smul] using SMulInvariantMeasure.measure_preimage_smul (c • 1 : N) hsm\n  aeconst_of_forall_preimage_smul_ae_eq {s} hsm hs := by\n    refine aeconst_of_dense_setOf_preimage_smul_ae (M := N) hsm.nullMeasurableSet ?_\n    refine (MulAction.dense_orbit M 1).mono ?_\n    rintro _ ⟨g, rfl⟩\n    simpa using hs g\n\n"}
{"name":"ErgodicSMul.trans_isMinimal","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝¹⁵ : Monoid M\ninst✝¹⁴ : SMul M X\ninst✝¹³ : TopologicalSpace X\ninst✝¹² : R1Space X\ninst✝¹¹ : MeasurableSpace X\ninst✝¹⁰ : BorelSpace X\nμ : MeasureTheory.Measure X\ninst✝⁹ : MeasureTheory.IsFiniteMeasure μ\ninst✝⁸ : μ.InnerRegular\nN : Type u_3\ninst✝⁷ : MulAction M N\ninst✝⁶ : Monoid N\ninst✝⁵ : TopologicalSpace N\ninst✝⁴ : MulAction.IsMinimal M N\ninst✝³ : MulAction N X\ninst✝² : IsScalarTower M N X\ninst✝¹ : ContinuousSMul N X\ninst✝ : ErgodicSMul N X μ\n⊢ ErgodicSMul M X μ","decl":"/-- If `N` acts continuously and ergodically on `X` and `M` acts minimally on `N`,\nthen the corresponding action of `M` on `X` is ergodic. -/\n@[to_additive\n  \"If `N` acts additively continuously and ergodically on `X` and `M` acts minimally on `N`,\nthen the corresponding action of `M` on `X` is ergodic.\"]\ntheorem ErgodicSMul.trans_isMinimal (N : Type*) [MulAction M N]\n    [Monoid N] [TopologicalSpace N] [MulAction.IsMinimal M N]\n    [MulAction N X] [IsScalarTower M N X] [ContinuousSMul N X] [ErgodicSMul N X μ] :\n    ErgodicSMul M X μ where\n  measure_preimage_smul c s hsm := by\n    simpa only [smul_one_smul] using SMulInvariantMeasure.measure_preimage_smul (c • 1 : N) hsm\n  aeconst_of_forall_preimage_smul_ae_eq {s} hsm hs := by\n    refine aeconst_of_dense_setOf_preimage_smul_ae (M := N) hsm.nullMeasurableSet ?_\n    refine (MulAction.dense_orbit M 1).mono ?_\n    rintro _ ⟨g, rfl⟩\n    simpa using hs g\n\n"}
{"name":"aeconst_of_dense_aestabilizer_smul","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝¹¹ : Group G\ninst✝¹⁰ : TopologicalSpace G\ninst✝⁹ : ContinuousInv G\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : MulAction G X\ninst✝³ : ContinuousSMul G X\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicSMul G X μ\ns : Set X\nhsm : MeasureTheory.NullMeasurableSet s μ\nhd : Dense ↑(MulAction.aestabilizer G μ s)\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"@[to_additive]\ntheorem aeconst_of_dense_aestabilizer_smul (hsm : NullMeasurableSet s μ)\n    (hd : Dense (MulAction.aestabilizer G μ s : Set G)) : EventuallyConst s (ae μ) :=\n  aeconst_of_dense_setOf_preimage_smul_ae hsm <| (hd.preimage (isOpenMap_inv _)).mono fun g hg ↦ by\n    simpa only [preimage_smul] using hg\n\n"}
{"name":"aeconst_of_dense_aestabilizer_vadd","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝¹¹ : AddGroup G\ninst✝¹⁰ : TopologicalSpace G\ninst✝⁹ : ContinuousNeg G\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : AddAction G X\ninst✝³ : ContinuousVAdd G X\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicVAdd G X μ\ns : Set X\nhsm : MeasureTheory.NullMeasurableSet s μ\nhd : Dense ↑(AddAction.aestabilizer G μ s)\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"@[to_additive]\ntheorem aeconst_of_dense_aestabilizer_smul (hsm : NullMeasurableSet s μ)\n    (hd : Dense (MulAction.aestabilizer G μ s : Set G)) : EventuallyConst s (ae μ) :=\n  aeconst_of_dense_setOf_preimage_smul_ae hsm <| (hd.preimage (isOpenMap_inv _)).mono fun g hg ↦ by\n    simpa only [preimage_smul] using hg\n\n"}
{"name":"ergodic_smul_of_denseRange_zpow","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝¹¹ : Group G\ninst✝¹⁰ : TopologicalSpace G\ninst✝⁹ : ContinuousInv G\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : MulAction G X\ninst✝³ : ContinuousSMul G X\ng : G\nhg : DenseRange fun x => HPow.hPow g x\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicSMul G X μ\n⊢ Ergodic (fun x => HSMul.hSMul g x) μ","decl":"/-- If a monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its integer powers are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the scalar multiplication by `g` is an ergodic map. -/\n@[to_additive \"If an additive monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its integer multiples are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the vector addition of `g` is an ergodic map.\"]\ntheorem ergodic_smul_of_denseRange_zpow {g : G} (hg : DenseRange (g ^ · : ℤ → G))\n    (μ : Measure X) [IsFiniteMeasure μ] [μ.InnerRegular] [ErgodicSMul G X μ] :\n    Ergodic (g • ·) μ := by\n  borelize G\n  refine ⟨measurePreserving_smul _ _, ⟨fun s hsm hs ↦ ?_⟩⟩\n  refine aeconst_of_dense_aestabilizer_smul hsm.nullMeasurableSet (hg.mono ?_)\n  rw [← Subgroup.coe_zpowers, SetLike.coe_subset_coe, ← Subgroup.zpowers_inv, Subgroup.zpowers_le,\n    MulAction.mem_aestabilizer, ← preimage_smul, hs]\n\n "}
{"name":"ergodic_vadd_of_denseRange_zsmul","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝¹¹ : AddGroup G\ninst✝¹⁰ : TopologicalSpace G\ninst✝⁹ : ContinuousNeg G\nX : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : R1Space X\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : AddAction G X\ninst✝³ : ContinuousVAdd G X\ng : G\nhg : DenseRange fun x => HSMul.hSMul x g\nμ : MeasureTheory.Measure X\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : ErgodicVAdd G X μ\n⊢ Ergodic (fun x => HVAdd.hVAdd g x) μ","decl":"/-- If a monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its integer powers are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the scalar multiplication by `g` is an ergodic map. -/\n@[to_additive \"If an additive monoid `M` continuously acts on an R₁ topological space `X`,\n`g` is an element of `M such that its integer multiples are dense in `M`,\nand `μ` is a finite inner regular measure on `X` which is ergodic with respect to the action of `M`,\nthen the vector addition of `g` is an ergodic map.\"]\ntheorem ergodic_smul_of_denseRange_zpow {g : G} (hg : DenseRange (g ^ · : ℤ → G))\n    (μ : Measure X) [IsFiniteMeasure μ] [μ.InnerRegular] [ErgodicSMul G X μ] :\n    Ergodic (g • ·) μ := by\n  borelize G\n  refine ⟨measurePreserving_smul _ _, ⟨fun s hsm hs ↦ ?_⟩⟩\n  refine aeconst_of_dense_aestabilizer_smul hsm.nullMeasurableSet (hg.mono ?_)\n  rw [← Subgroup.coe_zpowers, SetLike.coe_subset_coe, ← Subgroup.zpowers_inv, Subgroup.zpowers_le,\n    MulAction.mem_aestabilizer, ← preimage_smul, hs]\n\n "}
{"name":"DenseRange.zpow_of_ergodic_mul_left","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : TopologicalGroup G\ninst✝² : MeasurableSpace G\ninst✝¹ : OpensMeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝ : μ.IsOpenPosMeasure\ng : G\nhg : Ergodic (fun x => HMul.hMul g x) μ\n⊢ DenseRange fun x => HPow.hPow g x","decl":"/-- If the left multiplication by `g` is ergodic\nwith respect to a measure which is positive on nonempty open sets,\nthen the integer powers of `g` are dense in `G`. -/\n@[to_additive \"If the left addition of `g` is ergodic\nwith respect to a measure which is positive on nonempty open sets,\nthen the integer multiples of `g` are dense in `G`.\"]\ntheorem DenseRange.zpow_of_ergodic_mul_left [OpensMeasurableSpace G]\n    {μ : Measure G} [μ.IsOpenPosMeasure] {g : G} (hg : Ergodic (g * ·) μ) :\n    DenseRange (g ^ · : ℤ → G) := by\n  intro a\n  by_contra h\n  obtain ⟨V, hV₁, hVo, hV⟩ :\n      ∃ V : Set G, 1 ∈ V ∧ IsOpen V ∧ ∀ x ∈ V, ∀ y ∈ V, ∀ m : ℤ, g ^ m ≠ a * x / y := by\n    rw [← mem_compl_iff, ← interior_compl, mem_interior_iff_mem_nhds] at h\n    have : Tendsto (fun (x, y) ↦ a * x / y) (𝓝 1) (𝓝 a) :=\n      Continuous.tendsto' (by fun_prop) _ _ (by simp)\n    rw [nhds_prod_eq] at this\n    simpa [(nhds_basis_opens (1 : G)).prod_self.mem_iff, prod_subset_iff, and_assoc] using this h\n  set s := ⋃ m : ℤ, g ^ m • V\n  have hso : IsOpen s := isOpen_iUnion fun m ↦ hVo.smul _\n  have hsne : s.Nonempty := ⟨1, mem_iUnion.2 ⟨0, by simpa⟩⟩\n  have hd : Disjoint s (a • V) := by\n    simp_rw [s, disjoint_iUnion_left, disjoint_left]\n    rintro m _ ⟨x, hx, rfl⟩ ⟨y, hy, hxy⟩\n    apply hV y hy x hx m\n    simp_all\n  have hgs : (g * ·) ⁻¹' s = s := by\n    simp only [s, preimage_iUnion, ← smul_eq_mul, preimage_smul]\n    refine iUnion_congr_of_surjective _ (add_left_surjective (-1)) fun m ↦ ?_\n    simp [zpow_add, mul_smul]\n  cases hg.measure_self_or_compl_eq_zero hso.measurableSet hgs with\n  | inl h => exact hso.measure_ne_zero _ hsne h\n  | inr h =>\n    refine (hVo.smul a).measure_ne_zero μ (.image _ ⟨1, hV₁⟩) (measure_mono_null ?_ h)\n    rwa [disjoint_right] at hd\n\n"}
{"name":"DenseRange.zsmul_of_ergodic_add_left","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁵ : AddGroup G\ninst✝⁴ : TopologicalSpace G\ninst✝³ : TopologicalAddGroup G\ninst✝² : MeasurableSpace G\ninst✝¹ : OpensMeasurableSpace G\nμ : MeasureTheory.Measure G\ninst✝ : μ.IsOpenPosMeasure\ng : G\nhg : Ergodic (fun x => HAdd.hAdd g x) μ\n⊢ DenseRange fun x => HSMul.hSMul x g","decl":"/-- If the left multiplication by `g` is ergodic\nwith respect to a measure which is positive on nonempty open sets,\nthen the integer powers of `g` are dense in `G`. -/\n@[to_additive \"If the left addition of `g` is ergodic\nwith respect to a measure which is positive on nonempty open sets,\nthen the integer multiples of `g` are dense in `G`.\"]\ntheorem DenseRange.zpow_of_ergodic_mul_left [OpensMeasurableSpace G]\n    {μ : Measure G} [μ.IsOpenPosMeasure] {g : G} (hg : Ergodic (g * ·) μ) :\n    DenseRange (g ^ · : ℤ → G) := by\n  intro a\n  by_contra h\n  obtain ⟨V, hV₁, hVo, hV⟩ :\n      ∃ V : Set G, 1 ∈ V ∧ IsOpen V ∧ ∀ x ∈ V, ∀ y ∈ V, ∀ m : ℤ, g ^ m ≠ a * x / y := by\n    rw [← mem_compl_iff, ← interior_compl, mem_interior_iff_mem_nhds] at h\n    have : Tendsto (fun (x, y) ↦ a * x / y) (𝓝 1) (𝓝 a) :=\n      Continuous.tendsto' (by fun_prop) _ _ (by simp)\n    rw [nhds_prod_eq] at this\n    simpa [(nhds_basis_opens (1 : G)).prod_self.mem_iff, prod_subset_iff, and_assoc] using this h\n  set s := ⋃ m : ℤ, g ^ m • V\n  have hso : IsOpen s := isOpen_iUnion fun m ↦ hVo.smul _\n  have hsne : s.Nonempty := ⟨1, mem_iUnion.2 ⟨0, by simpa⟩⟩\n  have hd : Disjoint s (a • V) := by\n    simp_rw [s, disjoint_iUnion_left, disjoint_left]\n    rintro m _ ⟨x, hx, rfl⟩ ⟨y, hy, hxy⟩\n    apply hV y hy x hx m\n    simp_all\n  have hgs : (g * ·) ⁻¹' s = s := by\n    simp only [s, preimage_iUnion, ← smul_eq_mul, preimage_smul]\n    refine iUnion_congr_of_surjective _ (add_left_surjective (-1)) fun m ↦ ?_\n    simp [zpow_add, mul_smul]\n  cases hg.measure_self_or_compl_eq_zero hso.measurableSet hgs with\n  | inl h => exact hso.measure_ne_zero _ hsne h\n  | inr h =>\n    refine (hVo.smul a).measure_ne_zero μ (.image _ ⟨1, hV₁⟩) (measure_mono_null ?_ h)\n    rwa [disjoint_right] at hd\n\n"}
{"name":"ergodic_mul_left_of_denseRange_pow","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁸ : Group G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalGroup G\ninst✝⁵ : MeasurableSpace G\ninst✝⁴ : SecondCountableTopology G\ninst✝³ : BorelSpace G\ng : G\nhg : DenseRange fun x => HPow.hPow g x\nμ : MeasureTheory.Measure G\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : μ.IsMulLeftInvariant\n⊢ Ergodic (fun x => HMul.hMul g x) μ","decl":"@[to_additive]\ntheorem ergodic_mul_left_of_denseRange_pow (hg : DenseRange (g ^ · : ℕ → G))\n    (μ : Measure G) [IsFiniteMeasure μ] [μ.InnerRegular] [μ.IsMulLeftInvariant] :\n    Ergodic (g * ·) μ :=\n  ergodic_smul_of_denseRange_pow hg μ\n\n"}
{"name":"ergodic_add_left_of_denseRange_nsmul","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁸ : AddGroup G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalAddGroup G\ninst✝⁵ : MeasurableSpace G\ninst✝⁴ : SecondCountableTopology G\ninst✝³ : BorelSpace G\ng : G\nhg : DenseRange fun x => HSMul.hSMul x g\nμ : MeasureTheory.Measure G\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : μ.IsAddLeftInvariant\n⊢ Ergodic (fun x => HAdd.hAdd g x) μ","decl":"@[to_additive]\ntheorem ergodic_mul_left_of_denseRange_pow (hg : DenseRange (g ^ · : ℕ → G))\n    (μ : Measure G) [IsFiniteMeasure μ] [μ.InnerRegular] [μ.IsMulLeftInvariant] :\n    Ergodic (g * ·) μ :=\n  ergodic_smul_of_denseRange_pow hg μ\n\n"}
{"name":"ergodic_mul_left_of_denseRange_zpow","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁸ : Group G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalGroup G\ninst✝⁵ : MeasurableSpace G\ninst✝⁴ : SecondCountableTopology G\ninst✝³ : BorelSpace G\ng : G\nhg : DenseRange fun x => HPow.hPow g x\nμ : MeasureTheory.Measure G\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : μ.IsMulLeftInvariant\n⊢ Ergodic (fun x => HMul.hMul g x) μ","decl":"@[to_additive]\ntheorem ergodic_mul_left_of_denseRange_zpow (hg : DenseRange (g ^ · : ℤ → G))\n    (μ : Measure G) [IsFiniteMeasure μ] [μ.InnerRegular] [μ.IsMulLeftInvariant] :\n    Ergodic (g * ·) μ :=\n  ergodic_smul_of_denseRange_zpow hg μ\n\n"}
{"name":"ergodic_add_left_of_denseRange_zsmul","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁸ : AddGroup G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalAddGroup G\ninst✝⁵ : MeasurableSpace G\ninst✝⁴ : SecondCountableTopology G\ninst✝³ : BorelSpace G\ng : G\nhg : DenseRange fun x => HSMul.hSMul x g\nμ : MeasureTheory.Measure G\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : μ.IsAddLeftInvariant\n⊢ Ergodic (fun x => HAdd.hAdd g x) μ","decl":"@[to_additive]\ntheorem ergodic_mul_left_of_denseRange_zpow (hg : DenseRange (g ^ · : ℤ → G))\n    (μ : Measure G) [IsFiniteMeasure μ] [μ.InnerRegular] [μ.IsMulLeftInvariant] :\n    Ergodic (g * ·) μ :=\n  ergodic_smul_of_denseRange_zpow hg μ\n\n"}
{"name":"ergodic_add_left_iff_denseRange_zsmul","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁹ : AddGroup G\ninst✝⁸ : TopologicalSpace G\ninst✝⁷ : TopologicalAddGroup G\ninst✝⁶ : MeasurableSpace G\ninst✝⁵ : SecondCountableTopology G\ninst✝⁴ : BorelSpace G\ng : G\nμ : MeasureTheory.Measure G\ninst✝³ : MeasureTheory.IsFiniteMeasure μ\ninst✝² : μ.InnerRegular\ninst✝¹ : μ.IsAddLeftInvariant\ninst✝ : NeZero μ\n⊢ Iff (Ergodic (fun x => HAdd.hAdd g x) μ) (DenseRange fun x => HSMul.hSMul x g)","decl":"@[to_additive]\ntheorem ergodic_mul_left_iff_denseRange_zpow (μ : Measure G) [IsFiniteMeasure μ]\n    [μ.InnerRegular] [μ.IsMulLeftInvariant] [NeZero μ] :\n    Ergodic (g * ·) μ ↔ DenseRange (g ^ · : ℤ → G) :=\n  ⟨.zpow_of_ergodic_mul_left, (ergodic_mul_left_of_denseRange_zpow · μ)⟩\n\n"}
{"name":"ergodic_mul_left_iff_denseRange_zpow","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁹ : Group G\ninst✝⁸ : TopologicalSpace G\ninst✝⁷ : TopologicalGroup G\ninst✝⁶ : MeasurableSpace G\ninst✝⁵ : SecondCountableTopology G\ninst✝⁴ : BorelSpace G\ng : G\nμ : MeasureTheory.Measure G\ninst✝³ : MeasureTheory.IsFiniteMeasure μ\ninst✝² : μ.InnerRegular\ninst✝¹ : μ.IsMulLeftInvariant\ninst✝ : NeZero μ\n⊢ Iff (Ergodic (fun x => HMul.hMul g x) μ) (DenseRange fun x => HPow.hPow g x)","decl":"@[to_additive]\ntheorem ergodic_mul_left_iff_denseRange_zpow (μ : Measure G) [IsFiniteMeasure μ]\n    [μ.InnerRegular] [μ.IsMulLeftInvariant] [NeZero μ] :\n    Ergodic (g * ·) μ ↔ DenseRange (g ^ · : ℤ → G) :=\n  ⟨.zpow_of_ergodic_mul_left, (ergodic_mul_left_of_denseRange_zpow · μ)⟩\n\n"}
{"name":"MonoidHom.preErgodic_of_dense_iUnion_preimage_one","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁸ : Group G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalGroup G\ninst✝⁵ : SecondCountableTopology G\ninst✝⁴ : MeasurableSpace G\ninst✝³ : BorelSpace G\nμ : MeasureTheory.Measure G\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : μ.IsMulLeftInvariant\nf : MonoidHom G G\nhf : Dense (Set.iUnion fun n => Set.preimage (Nat.iterate (⇑f) n) 1)\n⊢ PreErgodic (⇑f) μ","decl":"/-- Let `f : G →* G` be a group endomorphism of a topological group with second countable topology.\nIf the preimages of `1` under the iterations of `f` are dense,\nthen it is preergodic with respect to any finite inner regular left invariant measure. -/\n@[to_additive \"Let `f : G →+ G` be an additive group endomorphism\nof a topological additive group with second countable topology.\nIf the preimages of `0` under the iterations of `f` are dense,\nthen it is preergodic with respect to any finite inner regular left invariant measure.\"]\ntheorem preErgodic_of_dense_iUnion_preimage_one\n    {μ : Measure G} [IsFiniteMeasure μ] [μ.InnerRegular] [μ.IsMulLeftInvariant]\n    (f : G →* G) (hf : Dense (⋃ n, f^[n] ⁻¹' 1)) : PreErgodic f μ := by\n  refine ⟨fun s hsm hs ↦ aeconst_of_dense_setOf_preimage_smul_eq (M := G) hsm.nullMeasurableSet ?_⟩\n  refine hf.mono <| iUnion_subset fun n x hx ↦ ?_\n  have hsn : f^[n] ⁻¹' s = s := by\n    rw [preimage_iterate_eq, iterate_fixed hs]\n  rw [mem_preimage, Set.mem_one] at hx\n  rw [mem_setOf, ← hsn]\n  ext y\n  simp [hx]\n\n"}
{"name":"AddMonoidHom.preErgodic_of_dense_iUnion_preimage_zero","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁸ : AddGroup G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalAddGroup G\ninst✝⁵ : SecondCountableTopology G\ninst✝⁴ : MeasurableSpace G\ninst✝³ : BorelSpace G\nμ : MeasureTheory.Measure G\ninst✝² : MeasureTheory.IsFiniteMeasure μ\ninst✝¹ : μ.InnerRegular\ninst✝ : μ.IsAddLeftInvariant\nf : AddMonoidHom G G\nhf : Dense (Set.iUnion fun n => Set.preimage (Nat.iterate (⇑f) n) 0)\n⊢ PreErgodic (⇑f) μ","decl":"/-- Let `f : G →* G` be a group endomorphism of a topological group with second countable topology.\nIf the preimages of `1` under the iterations of `f` are dense,\nthen it is preergodic with respect to any finite inner regular left invariant measure. -/\n@[to_additive \"Let `f : G →+ G` be an additive group endomorphism\nof a topological additive group with second countable topology.\nIf the preimages of `0` under the iterations of `f` are dense,\nthen it is preergodic with respect to any finite inner regular left invariant measure.\"]\ntheorem preErgodic_of_dense_iUnion_preimage_one\n    {μ : Measure G} [IsFiniteMeasure μ] [μ.InnerRegular] [μ.IsMulLeftInvariant]\n    (f : G →* G) (hf : Dense (⋃ n, f^[n] ⁻¹' 1)) : PreErgodic f μ := by\n  refine ⟨fun s hsm hs ↦ aeconst_of_dense_setOf_preimage_smul_eq (M := G) hsm.nullMeasurableSet ?_⟩\n  refine hf.mono <| iUnion_subset fun n x hx ↦ ?_\n  have hsn : f^[n] ⁻¹' s = s := by\n    rw [preimage_iterate_eq, iterate_fixed hs]\n  rw [mem_preimage, Set.mem_one] at hx\n  rw [mem_setOf, ← hsn]\n  ext y\n  simp [hx]\n\n"}
{"name":"AddMonoidHom.ergodic_of_dense_iUnion_preimage_zero","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁷ : AddGroup G\ninst✝⁶ : TopologicalSpace G\ninst✝⁵ : TopologicalAddGroup G\ninst✝⁴ : SecondCountableTopology G\ninst✝³ : MeasurableSpace G\ninst✝² : BorelSpace G\ninst✝¹ : CompactSpace G\nμ : MeasureTheory.Measure G\ninst✝ : μ.IsAddHaarMeasure\nf : AddMonoidHom G G\nhf : Dense (Set.iUnion fun n => Set.preimage (Nat.iterate (⇑f) n) 0)\nhcont : Continuous ⇑f\nhsurj : Function.Surjective ⇑f\n⊢ Ergodic (⇑f) μ","decl":"/-- Let `f : G →* G` be a continuous surjective group endomorphism\nof a compact topological group with second countable topology.\nIf the preimages of `1` under the iterations of `f` are dense,\nthen `f` is ergodic with respect to any finite inner regular left invariant measure. -/\n@[to_additive \"Let `f : G →+ G` be a continuous surjective additive group endomorphism\nof a compact topological additive group with second countable topology.\nIf the preimages of `0` under the iterations of `f` are dense,\nthen `f` is ergodic with respect to any finite inner regular left invariant measure.\"]\ntheorem ergodic_of_dense_iUnion_preimage_one [CompactSpace G] {μ : Measure G} [μ.IsHaarMeasure]\n    (f : G →* G) (hf : Dense (⋃ n, f^[n] ⁻¹' 1)) (hcont : Continuous f) (hsurj : Surjective f) :\n    Ergodic f μ :=\n  ⟨f.measurePreserving hcont hsurj rfl, f.preErgodic_of_dense_iUnion_preimage_one hf⟩\n\n"}
{"name":"MonoidHom.ergodic_of_dense_iUnion_preimage_one","module":"Mathlib.Dynamics.Ergodic.Action.OfMinimal","initialProofState":"G : Type u_1\ninst✝⁷ : Group G\ninst✝⁶ : TopologicalSpace G\ninst✝⁵ : TopologicalGroup G\ninst✝⁴ : SecondCountableTopology G\ninst✝³ : MeasurableSpace G\ninst✝² : BorelSpace G\ninst✝¹ : CompactSpace G\nμ : MeasureTheory.Measure G\ninst✝ : μ.IsHaarMeasure\nf : MonoidHom G G\nhf : Dense (Set.iUnion fun n => Set.preimage (Nat.iterate (⇑f) n) 1)\nhcont : Continuous ⇑f\nhsurj : Function.Surjective ⇑f\n⊢ Ergodic (⇑f) μ","decl":"/-- Let `f : G →* G` be a continuous surjective group endomorphism\nof a compact topological group with second countable topology.\nIf the preimages of `1` under the iterations of `f` are dense,\nthen `f` is ergodic with respect to any finite inner regular left invariant measure. -/\n@[to_additive \"Let `f : G →+ G` be a continuous surjective additive group endomorphism\nof a compact topological additive group with second countable topology.\nIf the preimages of `0` under the iterations of `f` are dense,\nthen `f` is ergodic with respect to any finite inner regular left invariant measure.\"]\ntheorem ergodic_of_dense_iUnion_preimage_one [CompactSpace G] {μ : Measure G} [μ.IsHaarMeasure]\n    (f : G →* G) (hf : Dense (⋃ n, f^[n] ⁻¹' 1)) (hcont : Continuous f) (hsurj : Surjective f) :\n    Ergodic f μ :=\n  ⟨f.measurePreserving hcont hsurj rfl, f.preErgodic_of_dense_iUnion_preimage_one hf⟩\n\n"}
