{"name":"MeasureTheory.Measure.InnerRegularWRT.measure_eq_iSup","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q : Set α → Prop\nU : Set α\nH : μ.InnerRegularWRT p q\nhU : q U\n⊢ Eq (μ U) (iSup fun K => iSup fun x => iSup fun x => μ K)","decl":"theorem measure_eq_iSup (H : InnerRegularWRT μ p q) (hU : q U) :\n    μ U = ⨆ (K) (_ : K ⊆ U) (_ : p K), μ K := by\n  refine\n    le_antisymm (le_of_forall_lt fun r hr => ?_) (iSup₂_le fun K hK => iSup_le fun _ => μ.mono hK)\n  simpa only [lt_iSup_iff, exists_prop] using H hU r hr\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.exists_subset_lt_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q : Set α → Prop\nU : Set α\nε : ENNReal\nH : μ.InnerRegularWRT p q\nh0 : p EmptyCollection.emptyCollection\nhU : q U\nhμU : Ne (μ U) Top.top\nhε : Ne ε 0\n⊢ Exists fun K => And (HasSubset.Subset K U) (And (p K) (LT.lt (μ U) (HAdd.hAdd (μ K) ε)))","decl":"theorem exists_subset_lt_add (H : InnerRegularWRT μ p q) (h0 : p ∅) (hU : q U) (hμU : μ U ≠ ∞)\n    (hε : ε ≠ 0) : ∃ K, K ⊆ U ∧ p K ∧ μ U < μ K + ε := by\n  rcases eq_or_ne (μ U) 0 with h₀ | h₀\n  · refine ⟨∅, empty_subset _, h0, ?_⟩\n    rwa [measure_empty, h₀, zero_add, pos_iff_ne_zero]\n  · rcases H hU _ (ENNReal.sub_lt_self hμU h₀ hε) with ⟨K, hKU, hKc, hrK⟩\n    exact ⟨K, hKU, hKc, ENNReal.lt_add_of_sub_lt_right (Or.inl hμU) hrK⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.map","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\npa qa : Set α → Prop\nH : μ.InnerRegularWRT pa qa\nf : α → β\nhf : AEMeasurable f μ\npb qb : Set β → Prop\nhAB : ∀ (U : Set β), qb U → qa (Set.preimage f U)\nhAB' : ∀ (K : Set α), pa K → pb (Set.image f K)\nhB₂ : ∀ (U : Set β), qb U → MeasurableSet U\n⊢ (MeasureTheory.Measure.map f μ).InnerRegularWRT pb qb","decl":"protected theorem map {α β} [MeasurableSpace α] [MeasurableSpace β]\n    {μ : Measure α} {pa qa : Set α → Prop}\n    (H : InnerRegularWRT μ pa qa) {f : α → β} (hf : AEMeasurable f μ) {pb qb : Set β → Prop}\n    (hAB : ∀ U, qb U → qa (f ⁻¹' U)) (hAB' : ∀ K, pa K → pb (f '' K))\n    (hB₂ : ∀ U, qb U → MeasurableSet U) :\n    InnerRegularWRT (map f μ) pb qb := by\n  intro U hU r hr\n  rw [map_apply_of_aemeasurable hf (hB₂ _ hU)] at hr\n  rcases H (hAB U hU) r hr with ⟨K, hKU, hKc, hK⟩\n  refine ⟨f '' K, image_subset_iff.2 hKU, hAB' _ hKc, ?_⟩\n  exact hK.trans_le (le_map_apply_image hf _)\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.map'","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\npa qa : Set α → Prop\nH : μ.InnerRegularWRT pa qa\nf : MeasurableEquiv α β\npb qb : Set β → Prop\nhAB : ∀ (U : Set β), qb U → qa (Set.preimage (⇑f) U)\nhAB' : ∀ (K : Set α), pa K → pb (Set.image (⇑f) K)\n⊢ (MeasureTheory.Measure.map (⇑f) μ).InnerRegularWRT pb qb","decl":"theorem map' {α β} [MeasurableSpace α] [MeasurableSpace β] {μ : Measure α} {pa qa : Set α → Prop}\n    (H : InnerRegularWRT μ pa qa) (f : α ≃ᵐ β) {pb qb : Set β → Prop}\n    (hAB : ∀ U, qb U → qa (f ⁻¹' U)) (hAB' : ∀ K, pa K → pb (f '' K)) :\n    InnerRegularWRT (map f μ) pb qb := by\n  intro U hU r hr\n  rw [f.map_apply U] at hr\n  rcases H (hAB U hU) r hr with ⟨K, hKU, hKc, hK⟩\n  refine ⟨f '' K, image_subset_iff.2 hKU, hAB' _ hKc, ?_⟩\n  rwa [f.map_apply, f.preimage_image]\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.smul","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q : Set α → Prop\nH : μ.InnerRegularWRT p q\nc : ENNReal\n⊢ (HSMul.hSMul c μ).InnerRegularWRT p q","decl":"theorem smul (H : InnerRegularWRT μ p q) (c : ℝ≥0∞) : InnerRegularWRT (c • μ) p q := by\n  intro U hU r hr\n  rw [smul_apply, H.measure_eq_iSup hU, smul_eq_mul] at hr\n  simpa only [ENNReal.mul_iSup, lt_iSup_iff, exists_prop] using hr\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.trans","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q q' : Set α → Prop\nH : μ.InnerRegularWRT p q\nH' : μ.InnerRegularWRT q q'\n⊢ μ.InnerRegularWRT p q'","decl":"theorem trans {q' : Set α → Prop} (H : InnerRegularWRT μ p q) (H' : InnerRegularWRT μ q q') :\n    InnerRegularWRT μ p q' := by\n  intro U hU r hr\n  rcases H' hU r hr with ⟨F, hFU, hqF, hF⟩; rcases H hqF _ hF with ⟨K, hKF, hpK, hrK⟩\n  exact ⟨K, hKF.trans hFU, hpK, hrK⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.rfl","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np : Set α → Prop\n⊢ μ.InnerRegularWRT p p","decl":"theorem rfl {p : Set α → Prop} : InnerRegularWRT μ p p :=\n  fun U hU _r hr ↦ ⟨U, Subset.rfl, hU, hr⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.of_imp","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q : Set α → Prop\nh : ∀ (s : Set α), q s → p s\n⊢ μ.InnerRegularWRT p q","decl":"theorem of_imp (h : ∀ s, q s → p s) : InnerRegularWRT μ p q :=\n  fun U hU _ hr ↦ ⟨U, Subset.rfl, h U hU, hr⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.mono","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\np q p' q' : Set α → Prop\nH : μ.InnerRegularWRT p q\nh : ∀ (s : Set α), q' s → q s\nh' : ∀ (s : Set α), p s → p' s\n⊢ μ.InnerRegularWRT p' q'","decl":"theorem mono {p' q' : Set α → Prop} (H : InnerRegularWRT μ p q)\n    (h : ∀ s, q' s → q s) (h' : ∀ s, p s → p' s) : InnerRegularWRT μ p' q' :=\n  of_imp h' |>.trans H |>.trans (of_imp h)\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.outerRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.OuterRegular\nA : Set α\na✝¹ : MeasurableSet A\nr : ENNReal\na✝ : GT.gt r (μ A)\n⊢ Exists fun U => And (Superset U A) (And (IsOpen U) (LT.lt (μ U) r))","decl":"/-- A measure `μ` is outer regular if `μ(A) = inf {μ(U) | A ⊆ U open}` for a measurable set `A`.\n\nThis definition implies the same equality for any (not necessarily measurable) set, see\n`Set.measure_eq_iInf_isOpen`. -/\nclass OuterRegular (μ : Measure α) : Prop where\n  protected outerRegular :\n    ∀ ⦃A : Set α⦄, MeasurableSet A → ∀ r > μ A, ∃ U, U ⊇ A ∧ IsOpen U ∧ μ U < r\n\n"}
{"name":"MeasureTheory.Measure.Regular.innerRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.Regular\n⊢ μ.InnerRegularWRT IsCompact IsOpen","decl":"/-- A measure `μ` is regular if\n  - it is finite on all compact sets;\n  - it is outer regular: `μ(A) = inf {μ(U) | A ⊆ U open}` for `A` measurable;\n  - it is inner regular for open sets, using compact sets:\n    `μ(U) = sup {μ(K) | K ⊆ U compact}` for `U` open. -/\nclass Regular (μ : Measure α) extends IsFiniteMeasureOnCompacts μ, OuterRegular μ : Prop where\n  innerRegular : InnerRegularWRT μ IsCompact IsOpen\n\n"}
{"name":"MeasureTheory.Measure.Regular.toOuterRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.Regular\n⊢ μ.OuterRegular","decl":"/-- A measure `μ` is regular if\n  - it is finite on all compact sets;\n  - it is outer regular: `μ(A) = inf {μ(U) | A ⊆ U open}` for `A` measurable;\n  - it is inner regular for open sets, using compact sets:\n    `μ(U) = sup {μ(K) | K ⊆ U compact}` for `U` open. -/\nclass Regular (μ : Measure α) extends IsFiniteMeasureOnCompacts μ, OuterRegular μ : Prop where\n  innerRegular : InnerRegularWRT μ IsCompact IsOpen\n\n"}
{"name":"MeasureTheory.Measure.Regular.toIsFiniteMeasureOnCompacts","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.Regular\n⊢ MeasureTheory.IsFiniteMeasureOnCompacts μ","decl":"/-- A measure `μ` is regular if\n  - it is finite on all compact sets;\n  - it is outer regular: `μ(A) = inf {μ(U) | A ⊆ U open}` for `A` measurable;\n  - it is inner regular for open sets, using compact sets:\n    `μ(U) = sup {μ(K) | K ⊆ U compact}` for `U` open. -/\nclass Regular (μ : Measure α) extends IsFiniteMeasureOnCompacts μ, OuterRegular μ : Prop where\n  innerRegular : InnerRegularWRT μ IsCompact IsOpen\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.innerRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.WeaklyRegular\n⊢ μ.InnerRegularWRT IsClosed IsOpen","decl":"/-- A measure `μ` is weakly regular if\n  - it is outer regular: `μ(A) = inf {μ(U) | A ⊆ U open}` for `A` measurable;\n  - it is inner regular for open sets, using closed sets:\n    `μ(U) = sup {μ(F) | F ⊆ U closed}` for `U` open. -/\nclass WeaklyRegular (μ : Measure α) extends OuterRegular μ : Prop where\n  protected innerRegular : InnerRegularWRT μ IsClosed IsOpen\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.toOuterRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.WeaklyRegular\n⊢ μ.OuterRegular","decl":"/-- A measure `μ` is weakly regular if\n  - it is outer regular: `μ(A) = inf {μ(U) | A ⊆ U open}` for `A` measurable;\n  - it is inner regular for open sets, using closed sets:\n    `μ(U) = sup {μ(F) | F ⊆ U closed}` for `U` open. -/\nclass WeaklyRegular (μ : Measure α) extends OuterRegular μ : Prop where\n  protected innerRegular : InnerRegularWRT μ IsClosed IsOpen\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.innerRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.InnerRegular\n⊢ μ.InnerRegularWRT IsCompact MeasurableSet","decl":"/-- A measure `μ` is inner regular if, for any measurable set `s`, then\n`μ(s) = sup {μ(K) | K ⊆ s compact}`. -/\nclass InnerRegular (μ : Measure α) : Prop where\n  protected innerRegular : InnerRegularWRT μ IsCompact MeasurableSet\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.innerRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\nμ : MeasureTheory.Measure α\nself : μ.InnerRegularCompactLTTop\n⊢ μ.InnerRegularWRT IsCompact fun s => And (MeasurableSet s) (Ne (μ s) Top.top)","decl":"/-- A measure `μ` is inner regular for finite measure sets with respect to compact sets:\nfor any measurable set `s` with finite measure, then `μ(s) = sup {μ(K) | K ⊆ s compact}`.\nThe main interest of this class is that it is satisfied for both natural Haar measures (the\nregular one and the inner regular one). -/\nclass InnerRegularCompactLTTop (μ : Measure α) : Prop where\n  protected innerRegular : InnerRegularWRT μ IsCompact (fun s ↦ MeasurableSet s ∧ μ s ≠ ∞)\n\n-- see Note [lower instance priority]\n"}
{"name":"MeasureTheory.Measure.Regular.weaklyRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace α\ninst✝¹ : R1Space α\ninst✝ : μ.Regular\n⊢ μ.WeaklyRegular","decl":"/-- A regular measure is weakly regular in an R₁ space. -/\ninstance (priority := 100) Regular.weaklyRegular [R1Space α] [Regular μ] :\n    WeaklyRegular μ where\n  innerRegular := fun _U hU r hr ↦\n    let ⟨K, KU, K_comp, hK⟩ := Regular.innerRegular hU r hr\n    ⟨closure K, K_comp.closure_subset_of_isOpen hU KU, isClosed_closure,\n      hK.trans_le (measure_mono subset_closure)⟩\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.zero","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\n⊢ MeasureTheory.Measure.OuterRegular 0","decl":"instance zero : OuterRegular (0 : Measure α) :=\n  ⟨fun A _ _r hr => ⟨univ, subset_univ A, isOpen_univ, hr⟩⟩\n\n"}
{"name":"Set.exists_isOpen_lt_of_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.OuterRegular\nA : Set α\nr : ENNReal\nhr : LT.lt (μ A) r\n⊢ Exists fun U => And (Superset U A) (And (IsOpen U) (LT.lt (μ U) r))","decl":"/-- Given `r` larger than the measure of a set `A`, there exists an open superset of `A` with\nmeasure less than `r`. -/\ntheorem _root_.Set.exists_isOpen_lt_of_lt [OuterRegular μ] (A : Set α) (r : ℝ≥0∞) (hr : μ A < r) :\n    ∃ U, U ⊇ A ∧ IsOpen U ∧ μ U < r := by\n  rcases OuterRegular.outerRegular (measurableSet_toMeasurable μ A) r\n      (by rwa [measure_toMeasurable]) with\n    ⟨U, hAU, hUo, hU⟩\n  exact ⟨U, (subset_toMeasurable _ _).trans hAU, hUo, hU⟩\n\n"}
{"name":"Set.measure_eq_iInf_isOpen","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nA : Set α\nμ : MeasureTheory.Measure α\ninst✝ : μ.OuterRegular\n⊢ Eq (μ A) (iInf fun U => iInf fun x => iInf fun x => μ U)","decl":"/-- For an outer regular measure, the measure of a set is the infimum of the measures of open sets\ncontaining it. -/\ntheorem _root_.Set.measure_eq_iInf_isOpen (A : Set α) (μ : Measure α) [OuterRegular μ] :\n    μ A = ⨅ (U : Set α) (_ : A ⊆ U) (_ : IsOpen U), μ U := by\n  refine le_antisymm (le_iInf₂ fun s hs => le_iInf fun _ => μ.mono hs) ?_\n  refine le_of_forall_lt' fun r hr => ?_\n  simpa only [iInf_lt_iff, exists_prop] using A.exists_isOpen_lt_of_lt r hr\n\n"}
{"name":"Set.exists_isOpen_lt_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.OuterRegular\nA : Set α\nhA : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun U => And (Superset U A) (And (IsOpen U) (LT.lt (μ U) (HAdd.hAdd (μ A) ε)))","decl":"theorem _root_.Set.exists_isOpen_lt_add [OuterRegular μ] (A : Set α) (hA : μ A ≠ ∞) {ε : ℝ≥0∞}\n    (hε : ε ≠ 0) : ∃ U, U ⊇ A ∧ IsOpen U ∧ μ U < μ A + ε :=\n  A.exists_isOpen_lt_of_lt _ (ENNReal.lt_add_right hA hε)\n\n"}
{"name":"Set.exists_isOpen_le_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nA : Set α\nμ : MeasureTheory.Measure α\ninst✝ : μ.OuterRegular\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun U => And (Superset U A) (And (IsOpen U) (LE.le (μ U) (HAdd.hAdd (μ A) ε)))","decl":"theorem _root_.Set.exists_isOpen_le_add (A : Set α) (μ : Measure α) [OuterRegular μ] {ε : ℝ≥0∞}\n    (hε : ε ≠ 0) : ∃ U, U ⊇ A ∧ IsOpen U ∧ μ U ≤ μ A + ε := by\n  rcases eq_or_ne (μ A) ∞ with (H | H)\n  · exact ⟨univ, subset_univ _, isOpen_univ, by simp only [H, _root_.top_add, le_top]⟩\n  · rcases A.exists_isOpen_lt_add H hε with ⟨U, AU, U_open, hU⟩\n    exact ⟨U, AU, U_open, hU.le⟩\n\n"}
{"name":"MeasurableSet.exists_isOpen_diff_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.OuterRegular\nA : Set α\nhA : MeasurableSet A\nhA' : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun U => And (Superset U A) (And (IsOpen U) (And (LT.lt (μ U) Top.top) (LT.lt (μ (SDiff.sdiff U A)) ε)))","decl":"theorem _root_.MeasurableSet.exists_isOpen_diff_lt [OuterRegular μ] {A : Set α}\n    (hA : MeasurableSet A) (hA' : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ U, U ⊇ A ∧ IsOpen U ∧ μ U < ∞ ∧ μ (U \\ A) < ε := by\n  rcases A.exists_isOpen_lt_add hA' hε with ⟨U, hAU, hUo, hU⟩\n  use U, hAU, hUo, hU.trans_le le_top\n  exact measure_diff_lt_of_lt_add hA.nullMeasurableSet hAU hA' hU\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.map","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : OpensMeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : BorelSpace β\nf : Homeomorph α β\nμ : MeasureTheory.Measure α\ninst✝ : μ.OuterRegular\n⊢ (MeasureTheory.Measure.map (⇑f) μ).OuterRegular","decl":"protected theorem map [OpensMeasurableSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] (f : α ≃ₜ β) (μ : Measure α) [OuterRegular μ] :\n    (Measure.map f μ).OuterRegular := by\n  refine ⟨fun A hA r hr => ?_⟩\n  rw [map_apply f.measurable hA, ← f.image_symm] at hr\n  rcases Set.exists_isOpen_lt_of_lt _ r hr with ⟨U, hAU, hUo, hU⟩\n  have : IsOpen (f.symm ⁻¹' U) := hUo.preimage f.symm.continuous\n  refine ⟨f.symm ⁻¹' U, image_subset_iff.1 hAU, this, ?_⟩\n  rwa [map_apply f.measurable this.measurableSet, f.preimage_symm, f.preimage_image]\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.smul","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nμ : MeasureTheory.Measure α\ninst✝ : μ.OuterRegular\nx : ENNReal\nhx : Ne x Top.top\n⊢ (HSMul.hSMul x μ).OuterRegular","decl":"protected theorem smul (μ : Measure α) [OuterRegular μ] {x : ℝ≥0∞} (hx : x ≠ ∞) :\n    (x • μ).OuterRegular := by\n  rcases eq_or_ne x 0 with (rfl | h0)\n  · rw [zero_smul]\n    exact OuterRegular.zero\n  · refine ⟨fun A _ r hr => ?_⟩\n    rw [smul_apply, A.measure_eq_iInf_isOpen, smul_eq_mul] at hr\n    simpa only [ENNReal.mul_iInf_of_ne h0 hx, gt_iff_lt, iInf_lt_iff, exists_prop] using hr\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.smul_nnreal","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nμ : MeasureTheory.Measure α\ninst✝ : μ.OuterRegular\nc : NNReal\n⊢ (HSMul.hSMul c μ).OuterRegular","decl":"instance smul_nnreal (μ : Measure α) [OuterRegular μ] (c : ℝ≥0) :\n    OuterRegular (c • μ) :=\n  OuterRegular.smul μ coe_ne_top\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.of_restrict","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\ninst✝ : OpensMeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Nat → Set α\nh : ∀ (n : Nat), (μ.restrict (s n)).OuterRegular\nh' : ∀ (n : Nat), IsOpen (s n)\nh'' : HasSubset.Subset Set.univ (Set.iUnion fun n => s n)\n⊢ μ.OuterRegular","decl":"open scoped Function in -- required for scoped `on` notation\n/-- If the restrictions of a measure to countably many open sets covering the space are\nouter regular, then the measure itself is outer regular. -/\nlemma of_restrict [OpensMeasurableSpace α] {μ : Measure α} {s : ℕ → Set α}\n    (h : ∀ n, OuterRegular (μ.restrict (s n))) (h' : ∀ n, IsOpen (s n)) (h'' : univ ⊆ ⋃ n, s n) :\n    OuterRegular μ := by\n  refine ⟨fun A hA r hr => ?_⟩\n  have HA : μ A < ∞ := lt_of_lt_of_le hr le_top\n  have hm : ∀ n, MeasurableSet (s n) := fun n => (h' n).measurableSet\n  -- Note that `A = ⋃ n, A ∩ disjointed s n`. We replace `A` with this sequence.\n  obtain ⟨A, hAm, hAs, hAd, rfl⟩ :\n    ∃ A' : ℕ → Set α,\n      (∀ n, MeasurableSet (A' n)) ∧\n        (∀ n, A' n ⊆ s n) ∧ Pairwise (Disjoint on A') ∧ A = ⋃ n, A' n := by\n    refine\n      ⟨fun n => A ∩ disjointed s n, fun n => hA.inter (MeasurableSet.disjointed hm _), fun n =>\n        inter_subset_right.trans (disjointed_subset _ _),\n        (disjoint_disjointed s).mono fun k l hkl => hkl.mono inf_le_right inf_le_right, ?_⟩\n    rw [← inter_iUnion, iUnion_disjointed, univ_subset_iff.mp h'', inter_univ]\n  rcases ENNReal.exists_pos_sum_of_countable' (tsub_pos_iff_lt.2 hr).ne' ℕ with ⟨δ, δ0, hδε⟩\n  rw [lt_tsub_iff_right, add_comm] at hδε\n  have : ∀ n, ∃ U ⊇ A n, IsOpen U ∧ μ U < μ (A n) + δ n := by\n    intro n\n    have H₁ : ∀ t, μ.restrict (s n) t = μ (t ∩ s n) := fun t => restrict_apply' (hm n)\n    have Ht : μ.restrict (s n) (A n) ≠ ∞ := by\n      rw [H₁]\n      exact ((measure_mono (inter_subset_left.trans (subset_iUnion A n))).trans_lt HA).ne\n    rcases (A n).exists_isOpen_lt_add Ht (δ0 n).ne' with ⟨U, hAU, hUo, hU⟩\n    rw [H₁, H₁, inter_eq_self_of_subset_left (hAs _)] at hU\n    exact ⟨U ∩ s n, subset_inter hAU (hAs _), hUo.inter (h' n), hU⟩\n  choose U hAU hUo hU using this\n  refine ⟨⋃ n, U n, iUnion_mono hAU, isOpen_iUnion hUo, ?_⟩\n  calc\n    μ (⋃ n, U n) ≤ ∑' n, μ (U n) := measure_iUnion_le _\n    _ ≤ ∑' n, (μ (A n) + δ n) := ENNReal.tsum_le_tsum fun n => (hU n).le\n    _ = ∑' n, μ (A n) + ∑' n, δ n := ENNReal.tsum_add\n    _ = μ (⋃ n, A n) + ∑' n, δ n := (congr_arg₂ (· + ·) (measure_iUnion hAd hAm).symm rfl)\n    _ < r := hδε\n\n"}
{"name":"MeasureTheory.Measure.OuterRegular.measure_closure_eq_of_isCompact","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace α\ninst✝¹ : R1Space α\ninst✝ : μ.OuterRegular\nk : Set α\nhk : IsCompact k\n⊢ Eq (μ (closure k)) (μ k)","decl":"/-- See also `IsCompact.measure_closure` for a version\nthat assumes the `σ`-algebra to be the Borel `σ`-algebra but makes no assumptions on `μ`. -/\nlemma measure_closure_eq_of_isCompact [R1Space α] [OuterRegular μ]\n    {k : Set α} (hk : IsCompact k) : μ (closure k) = μ k := by\n  apply le_antisymm ?_ (measure_mono subset_closure)\n  simp only [measure_eq_iInf_isOpen k, le_iInf_iff]\n  intro u ku u_open\n  exact measure_mono (hk.closure_subset_of_isOpen u_open ku)\n\n"}
{"name":"MeasureTheory.Measure.FiniteSpanningSetsIn.outerRegular","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\ninst✝ : OpensMeasurableSpace α\nμ : MeasureTheory.Measure α\ns : μ.FiniteSpanningSetsIn (setOf fun U => And (IsOpen U) (μ.restrict U).OuterRegular)\n⊢ μ.OuterRegular","decl":"/-- If a measure `μ` admits finite spanning open sets such that the restriction of `μ` to each set\nis outer regular, then the original measure is outer regular as well. -/\nprotected theorem FiniteSpanningSetsIn.outerRegular\n    [TopologicalSpace α] [OpensMeasurableSpace α] {μ : Measure α}\n    (s : μ.FiniteSpanningSetsIn { U | IsOpen U ∧ OuterRegular (μ.restrict U) }) :\n    OuterRegular μ :=\n  OuterRegular.of_restrict (s := fun n ↦ s.set n) (fun n ↦ (s.set_mem n).2)\n    (fun n ↦ (s.set_mem n).1) s.spanning.symm.subset\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.of_restrict","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : Set α → Prop\nμ : MeasureTheory.Measure α\ns : Nat → Set α\nh : ∀ (n : Nat), (μ.restrict (s n)).InnerRegularWRT p MeasurableSet\nhs : HasSubset.Subset Set.univ (Set.iUnion fun n => s n)\nhmono : Monotone s\n⊢ μ.InnerRegularWRT p MeasurableSet","decl":"/-- If the restrictions of a measure to a monotone sequence of sets covering the space are\ninner regular for some property `p` and all measurable sets, then the measure itself is\ninner regular. -/\nlemma of_restrict {μ : Measure α} {s : ℕ → Set α}\n    (h : ∀ n, InnerRegularWRT (μ.restrict (s n)) p MeasurableSet)\n    (hs : univ ⊆ ⋃ n, s n) (hmono : Monotone s) : InnerRegularWRT μ p MeasurableSet := by\n  intro F hF r hr\n  have hBU : ⋃ n, F ∩ s n = F := by rw [← inter_iUnion, univ_subset_iff.mp hs, inter_univ]\n  have : μ F = ⨆ n, μ (F ∩ s n) := by\n    rw [← (monotone_const.inter hmono).measure_iUnion, hBU]\n  rw [this] at hr\n  rcases lt_iSup_iff.1 hr with ⟨n, hn⟩\n  rw [← restrict_apply hF] at hn\n  rcases h n hF _ hn with ⟨K, KF, hKp, hK⟩\n  exact ⟨K, KF, hKp, hK.trans_le (restrict_apply_le _ _)⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.restrict","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\np : Set α → Prop\nh : μ.InnerRegularWRT p fun s => And (MeasurableSet s) (Ne (μ s) Top.top)\nA : Set α\n⊢ (μ.restrict A).InnerRegularWRT p fun s => And (MeasurableSet s) (Ne ((μ.restrict A) s) Top.top)","decl":"/-- If `μ` is inner regular for measurable finite measure sets with respect to some class of sets,\nthen its restriction to any set is also inner regular for measurable finite measure sets, with\nrespect to the same class of sets. -/\nlemma restrict (h : InnerRegularWRT μ p (fun s ↦ MeasurableSet s ∧ μ s ≠ ∞)) (A : Set α) :\n    InnerRegularWRT (μ.restrict A) p (fun s ↦ MeasurableSet s ∧ μ.restrict A s ≠ ∞) := by\n  rintro s ⟨s_meas, hs⟩ r hr\n  rw [restrict_apply s_meas] at hs\n  obtain ⟨K, K_subs, pK, rK⟩ : ∃ K, K ⊆ (toMeasurable μ (s ∩ A)) ∩ s ∧ p K ∧ r < μ K := by\n    have : r < μ ((toMeasurable μ (s ∩ A)) ∩ s) := by\n      apply hr.trans_le\n      rw [restrict_apply s_meas]\n      exact measure_mono <| subset_inter (subset_toMeasurable μ (s ∩ A)) inter_subset_left\n    refine h ⟨(measurableSet_toMeasurable _ _).inter s_meas, ?_⟩ _ this\n    apply (lt_of_le_of_lt _ hs.lt_top).ne\n    rw [← measure_toMeasurable (s ∩ A)]\n    exact measure_mono inter_subset_left\n  refine ⟨K, K_subs.trans inter_subset_right, pK, ?_⟩\n  calc\n  r < μ K := rK\n  _ = μ.restrict (toMeasurable μ (s ∩ A)) K := by\n    rw [restrict_apply' (measurableSet_toMeasurable μ (s ∩ A))]\n    congr\n    apply (inter_eq_left.2 ?_).symm\n    exact K_subs.trans inter_subset_left\n  _ = μ.restrict (s ∩ A) K := by rwa [restrict_toMeasurable]\n  _ ≤ μ.restrict A K := Measure.le_iff'.1 (restrict_mono inter_subset_right le_rfl) K\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.restrict_of_measure_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\np : Set α → Prop\nh : μ.InnerRegularWRT p fun s => And (MeasurableSet s) (Ne (μ s) Top.top)\nA : Set α\nhA : Ne (μ A) Top.top\n⊢ (μ.restrict A).InnerRegularWRT p fun s => MeasurableSet s","decl":"/-- If `μ` is inner regular for measurable finite measure sets with respect to some class of sets,\nthen its restriction to any finite measure set is also inner regular for measurable sets with\nrespect to the same class of sets. -/\nlemma restrict_of_measure_ne_top (h : InnerRegularWRT μ p (fun s ↦ MeasurableSet s ∧ μ s ≠ ∞))\n    {A : Set α} (hA : μ A ≠ ∞) :\n    InnerRegularWRT (μ.restrict A) p (fun s ↦ MeasurableSet s) := by\n  have : Fact (μ A < ∞) := ⟨hA.lt_top⟩\n  exact (restrict h A).trans (of_imp (fun s hs ↦ ⟨hs, measure_ne_top _ _⟩))\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.of_sigmaFinite","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite μ\n⊢ μ.InnerRegularWRT (fun s => And (MeasurableSet s) (Ne (μ s) Top.top)) fun s => MeasurableSet s","decl":"/-- Given a σ-finite measure, any measurable set can be approximated from inside by a measurable\nset of finite measure. -/\nlemma of_sigmaFinite [SigmaFinite μ] :\n    InnerRegularWRT μ (fun s ↦ MeasurableSet s ∧ μ s ≠ ∞) (fun s ↦ MeasurableSet s) := by\n  intro s hs r hr\n  set B : ℕ → Set α := spanningSets μ\n  have hBU : ⋃ n, s ∩ B n = s := by rw [← inter_iUnion, iUnion_spanningSets, inter_univ]\n  have : μ s = ⨆ n, μ (s ∩ B n) := by\n    rw [← (monotone_const.inter (monotone_spanningSets μ)).measure_iUnion, hBU]\n  rw [this] at hr\n  rcases lt_iSup_iff.1 hr with ⟨n, hn⟩\n  refine ⟨s ∩ B n, inter_subset_left, ⟨hs.inter (measurableSet_spanningSets μ n), ?_⟩, hn⟩\n  exact ((measure_mono inter_subset_right).trans_lt (measure_spanningSets_lt_top μ n)).ne\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.measurableSet_of_isOpen","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\np : Set α → Prop\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.OuterRegular\nH : μ.InnerRegularWRT p IsOpen\nhd : ∀ ⦃s U : Set α⦄, p s → IsOpen U → p (SDiff.sdiff s U)\n⊢ μ.InnerRegularWRT p fun s => And (MeasurableSet s) (Ne (μ s) Top.top)","decl":"/-- If a measure is inner regular (using closed or compact sets) for open sets, then every\nmeasurable set of finite measure can be approximated by a (closed or compact) subset. -/\ntheorem measurableSet_of_isOpen [OuterRegular μ] (H : InnerRegularWRT μ p IsOpen)\n    (hd : ∀ ⦃s U⦄, p s → IsOpen U → p (s \\ U)) :\n    InnerRegularWRT μ p fun s => MeasurableSet s ∧ μ s ≠ ∞ := by\n  rintro s ⟨hs, hμs⟩ r hr\n  have h0 : p ∅ := by\n    have : 0 < μ univ := (bot_le.trans_lt hr).trans_le (measure_mono (subset_univ _))\n    obtain ⟨K, -, hK, -⟩ : ∃ K, K ⊆ univ ∧ p K ∧ 0 < μ K := H isOpen_univ _ this\n    simpa using hd hK isOpen_univ\n  obtain ⟨ε, hε, hεs, rfl⟩ : ∃ ε ≠ 0, ε + ε ≤ μ s ∧ r = μ s - (ε + ε) := by\n    use (μ s - r) / 2\n    simp [*, hr.le, ENNReal.add_halves, ENNReal.sub_sub_cancel, le_add_right, tsub_eq_zero_iff_le]\n  rcases hs.exists_isOpen_diff_lt hμs hε with ⟨U, hsU, hUo, hUt, hμU⟩\n  rcases (U \\ s).exists_isOpen_lt_of_lt _ hμU with ⟨U', hsU', hU'o, hμU'⟩\n  replace hsU' := diff_subset_comm.1 hsU'\n  rcases H.exists_subset_lt_add h0 hUo hUt.ne hε with ⟨K, hKU, hKc, hKr⟩\n  refine ⟨K \\ U', fun x hx => hsU' ⟨hKU hx.1, hx.2⟩, hd hKc hU'o, ENNReal.sub_lt_of_lt_add hεs ?_⟩\n  calc\n    μ s ≤ μ U := μ.mono hsU\n    _ < μ K + ε := hKr\n    _ ≤ μ (K \\ U') + μ U' + ε := add_le_add_right (tsub_le_iff_right.1 le_measure_diff) _\n    _ ≤ μ (K \\ U') + ε + ε := by gcongr\n    _ = μ (K \\ U') + (ε + ε) := add_assoc _ _ _\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.weaklyRegular_of_finite","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\ninst✝² : TopologicalSpace α\ninst✝¹ : BorelSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nH : μ.InnerRegularWRT IsClosed IsOpen\n⊢ μ.WeaklyRegular","decl":"open Finset in\n/-- In a finite measure space, assume that any open set can be approximated from inside by closed\nsets. Then the measure is weakly regular. -/\ntheorem weaklyRegular_of_finite [BorelSpace α] (μ : Measure α) [IsFiniteMeasure μ]\n    (H : InnerRegularWRT μ IsClosed IsOpen) : WeaklyRegular μ := by\n  have hfin : ∀ {s}, μ s ≠ ∞ := @(measure_ne_top μ)\n  suffices ∀ s, MeasurableSet s → ∀ ε, ε ≠ 0 → ∃ F, F ⊆ s ∧ ∃ U, U ⊇ s ∧\n      IsClosed F ∧ IsOpen U ∧ μ s ≤ μ F + ε ∧ μ U ≤ μ s + ε by\n    refine\n      { outerRegular := fun s hs r hr => ?_\n        innerRegular := H }\n    rcases exists_between hr with ⟨r', hsr', hr'r⟩\n    rcases this s hs _ (tsub_pos_iff_lt.2 hsr').ne' with ⟨-, -, U, hsU, -, hUo, -, H⟩\n    refine ⟨U, hsU, hUo, ?_⟩\n    rw [add_tsub_cancel_of_le hsr'.le] at H\n    exact H.trans_lt hr'r\n  apply MeasurableSet.induction_on_open\n  /- The proof is by measurable induction: we should check that the property is true for the empty\n    set, for open sets, and is stable by taking the complement and by taking countable disjoint\n    unions. The point of the property we are proving is that it is stable by taking complements\n    (exchanging the roles of closed and open sets and thanks to the finiteness of the measure). -/\n  -- check for open set\n  · intro U hU ε hε\n    rcases H.exists_subset_lt_add isClosed_empty hU hfin hε with ⟨F, hsF, hFc, hF⟩\n    exact ⟨F, hsF, U, Subset.rfl, hFc, hU, hF.le, le_self_add⟩\n  -- check for complements\n  · rintro s hs H ε hε\n    rcases H ε hε with ⟨F, hFs, U, hsU, hFc, hUo, hF, hU⟩\n    refine\n      ⟨Uᶜ, compl_subset_compl.2 hsU, Fᶜ, compl_subset_compl.2 hFs, hUo.isClosed_compl,\n        hFc.isOpen_compl, ?_⟩\n    simp only [measure_compl_le_add_iff, *, hUo.measurableSet, hFc.measurableSet, true_and]\n  -- check for disjoint unions\n  · intro s hsd hsm H ε ε0\n    have ε0' : ε / 2 ≠ 0 := (ENNReal.half_pos ε0).ne'\n    rcases ENNReal.exists_pos_sum_of_countable' ε0' ℕ with ⟨δ, δ0, hδε⟩\n    choose F hFs U hsU hFc hUo hF hU using fun n => H n (δ n) (δ0 n).ne'\n    -- the approximating closed set is constructed by considering finitely many sets `s i`, which\n    -- cover all the measure up to `ε/2`, approximating each of these by a closed set `F i`, and\n    -- taking the union of these (finitely many) `F i`.\n    have : Tendsto (fun t => (∑ k ∈ t, μ (s k)) + ε / 2) atTop (𝓝 <| μ (⋃ n, s n) + ε / 2) := by\n      rw [measure_iUnion hsd hsm]\n      exact Tendsto.add ENNReal.summable.hasSum tendsto_const_nhds\n    rcases (this.eventually <| lt_mem_nhds <| ENNReal.lt_add_right hfin ε0').exists with ⟨t, ht⟩\n    -- the approximating open set is constructed by taking for each `s n` an approximating open set\n    -- `U n` with measure at most `μ (s n) + δ n` for a summable `δ`, and taking the union of these.\n    refine\n      ⟨⋃ k ∈ t, F k, iUnion_mono fun k => iUnion_subset fun _ => hFs _, ⋃ n, U n, iUnion_mono hsU,\n        isClosed_biUnion_finset fun k _ => hFc k, isOpen_iUnion hUo, ht.le.trans ?_, ?_⟩\n    · calc\n        (∑ k ∈ t, μ (s k)) + ε / 2 ≤ ((∑ k ∈ t, μ (F k)) + ∑ k ∈ t, δ k) + ε / 2 := by\n          rw [← sum_add_distrib]\n          gcongr\n          apply hF\n        _ ≤ (∑ k ∈ t, μ (F k)) + ε / 2 + ε / 2 := by\n          gcongr\n          exact (ENNReal.sum_le_tsum _).trans hδε.le\n        _ = μ (⋃ k ∈ t, F k) + ε := by\n          rw [measure_biUnion_finset, add_assoc, ENNReal.add_halves]\n          exacts [fun k _ n _ hkn => (hsd hkn).mono (hFs k) (hFs n),\n            fun k _ => (hFc k).measurableSet]\n    · calc\n        μ (⋃ n, U n) ≤ ∑' n, μ (U n) := measure_iUnion_le _\n        _ ≤ ∑' n, (μ (s n) + δ n) := ENNReal.tsum_le_tsum hU\n        _ = μ (⋃ n, s n) + ∑' n, δ n := by rw [measure_iUnion hsd hsm, ENNReal.tsum_add]\n        _ ≤ μ (⋃ n, s n) + ε := add_le_add_left (hδε.le.trans ENNReal.half_le_self) _\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.of_pseudoMetrizableSpace","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"X : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝ : MeasurableSpace X\nμ : MeasureTheory.Measure X\n⊢ μ.InnerRegularWRT IsClosed IsOpen","decl":"/-- In a metrizable space (or even a pseudo metrizable space), an open set can be approximated from\ninside by closed sets. -/\ntheorem of_pseudoMetrizableSpace {X : Type*} [TopologicalSpace X] [PseudoMetrizableSpace X]\n    [MeasurableSpace X] (μ : Measure X) : InnerRegularWRT μ IsClosed IsOpen := by\n  let A : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X\n  intro U hU r hr\n  rcases hU.exists_iUnion_isClosed with ⟨F, F_closed, -, rfl, F_mono⟩\n  rw [F_mono.measure_iUnion] at hr\n  rcases lt_iSup_iff.1 hr with ⟨n, hn⟩\n  exact ⟨F n, subset_iUnion _ _, F_closed n, hn⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularWRT.isCompact_isClosed","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"X : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : SigmaCompactSpace X\ninst✝ : MeasurableSpace X\nμ : MeasureTheory.Measure X\n⊢ μ.InnerRegularWRT IsCompact IsClosed","decl":"/-- In a `σ`-compact space, any closed set can be approximated by a compact subset. -/\ntheorem isCompact_isClosed {X : Type*} [TopologicalSpace X] [SigmaCompactSpace X]\n    [MeasurableSpace X] (μ : Measure X) : InnerRegularWRT μ IsCompact IsClosed := by\n  intro F hF r hr\n  set B : ℕ → Set X := compactCovering X\n  have hBc : ∀ n, IsCompact (F ∩ B n) := fun n => (isCompact_compactCovering X n).inter_left hF\n  have hBU : ⋃ n, F ∩ B n = F := by rw [← inter_iUnion, iUnion_compactCovering, Set.inter_univ]\n  have : μ F = ⨆ n, μ (F ∩ B n) := by\n    rw [← Monotone.measure_iUnion, hBU]\n    exact monotone_const.inter monotone_accumulate\n  rw [this] at hr\n  rcases lt_iSup_iff.1 hr with ⟨n, hn⟩\n  exact ⟨_, inter_subset_left, hBc n, hn⟩\n\n"}
{"name":"MeasurableSet.measure_eq_iSup_isCompact","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nU : Set α\nhU : MeasurableSet U\nμ : MeasureTheory.Measure α\ninst✝ : μ.InnerRegular\n⊢ Eq (μ U) (iSup fun K => iSup fun x => iSup fun x => μ K)","decl":"/-- The measure of a measurable set is the supremum of the measures of compact sets it contains. -/\ntheorem _root_.MeasurableSet.measure_eq_iSup_isCompact ⦃U : Set α⦄ (hU : MeasurableSet U)\n    (μ : Measure α) [InnerRegular μ] :\n    μ U = ⨆ (K : Set α) (_ : K ⊆ U) (_ : IsCompact K), μ K :=\n  InnerRegular.innerRegular.measure_eq_iSup hU\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.zero","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\n⊢ MeasureTheory.Measure.InnerRegular 0","decl":"instance zero : InnerRegular (0 : Measure α) :=\n  ⟨fun _ _ _r hr => ⟨∅, empty_subset _, isCompact_empty, hr⟩⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.smul","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace α\nh : μ.InnerRegular\nc : ENNReal\n⊢ (HSMul.hSMul c μ).InnerRegular","decl":"instance smul [h : InnerRegular μ] (c : ℝ≥0∞) : InnerRegular (c • μ) :=\n  ⟨InnerRegularWRT.smul h.innerRegular c⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.smul_nnreal","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegular\nc : NNReal\n⊢ (HSMul.hSMul c μ).InnerRegular","decl":"instance smul_nnreal [InnerRegular μ] (c : ℝ≥0) : InnerRegular (c • μ) := smul (c : ℝ≥0∞)\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.instInnerRegularCompactLTTop","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegular\n⊢ μ.InnerRegularCompactLTTop","decl":"instance (priority := 100) [InnerRegular μ] : InnerRegularCompactLTTop μ :=\n  ⟨fun _s hs r hr ↦ InnerRegular.innerRegular hs.1 r hr⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.innerRegularWRT_isClosed_isOpen","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace α\ninst✝¹ : R1Space α\ninst✝ : OpensMeasurableSpace α\nh : μ.InnerRegular\n⊢ μ.InnerRegularWRT IsClosed IsOpen","decl":"lemma innerRegularWRT_isClosed_isOpen [R1Space α] [OpensMeasurableSpace α] [h : InnerRegular μ] :\n    InnerRegularWRT μ IsClosed IsOpen := by\n  intro U hU r hr\n  rcases h.innerRegular hU.measurableSet r hr with ⟨K, KU, K_comp, hK⟩\n  exact ⟨closure K, K_comp.closure_subset_of_isOpen hU KU, isClosed_closure,\n    hK.trans_le (measure_mono subset_closure)⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.exists_isCompact_not_null","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegular\n⊢ Iff (Exists fun K => And (IsCompact K) (Ne (μ K) 0)) (Ne μ 0)","decl":"theorem exists_isCompact_not_null [InnerRegular μ] : (∃ K, IsCompact K ∧ μ K ≠ 0) ↔ μ ≠ 0 := by\n  simp_rw [Ne, ← measure_univ_eq_zero, MeasurableSet.univ.measure_eq_iSup_isCompact,\n    ENNReal.iSup_eq_zero, not_forall, exists_prop, subset_univ, true_and]\n"}
{"name":"MeasureTheory.Measure.InnerRegular.exists_compact_not_null","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegular\n⊢ Iff (Exists fun K => And (IsCompact K) (Ne (μ K) 0)) (Ne μ 0)","decl":"@[deprecated (since := \"2024-11-19\")] alias exists_compact_not_null := exists_isCompact_not_null\n\n"}
{"name":"MeasurableSet.exists_lt_isCompact","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegular\nA : Set α\nhA : MeasurableSet A\nr : ENNReal\nhr : LT.lt r (μ A)\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsCompact K) (LT.lt r (μ K)))","decl":"/-- If `μ` is inner regular, then any measurable set can be approximated by a compact subset.\nSee also `MeasurableSet.exists_isCompact_lt_add_of_ne_top`. -/\ntheorem _root_.MeasurableSet.exists_lt_isCompact [InnerRegular μ] ⦃A : Set α⦄\n    (hA : MeasurableSet A) {r : ℝ≥0∞} (hr : r < μ A) :\n    ∃ K, K ⊆ A ∧ IsCompact K ∧ r < μ K :=\n  InnerRegular.innerRegular hA _ hr\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.map_of_continuous","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : BorelSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : TopologicalSpace β\ninst✝ : BorelSpace β\nh : μ.InnerRegular\nf : α → β\nhf : Continuous f\n⊢ (MeasureTheory.Measure.map f μ).InnerRegular","decl":"protected theorem map_of_continuous [BorelSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] [h : InnerRegular μ] {f : α → β} (hf : Continuous f) :\n    InnerRegular (Measure.map f μ) :=\n  ⟨InnerRegularWRT.map h.innerRegular hf.aemeasurable (fun _s hs ↦ hf.measurable hs)\n    (fun _K hK ↦ hK.image hf) (fun _s hs ↦ hs)⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.map","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : BorelSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : BorelSpace β\ninst✝ : μ.InnerRegular\nf : Homeomorph α β\n⊢ (MeasureTheory.Measure.map (⇑f) μ).InnerRegular","decl":"protected theorem map [BorelSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] [InnerRegular μ] (f : α ≃ₜ β) : (Measure.map f μ).InnerRegular :=\n  InnerRegular.map_of_continuous f.continuous\n\n"}
{"name":"MeasureTheory.Measure.InnerRegular.map_iff","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : BorelSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : TopologicalSpace β\ninst✝ : BorelSpace β\nf : Homeomorph α β\n⊢ Iff (MeasureTheory.Measure.map (⇑f) μ).InnerRegular μ.InnerRegular","decl":"protected theorem map_iff [BorelSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] (f : α ≃ₜ β) :\n    InnerRegular (Measure.map f μ) ↔ InnerRegular μ := by\n  refine ⟨fun h ↦ ?_, fun h ↦ h.map f⟩\n  convert h.map f.symm\n  rw [map_map f.symm.continuous.measurable f.continuous.measurable]\n  simp\n\n"}
{"name":"MeasurableSet.exists_isCompact_lt_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegularCompactLTTop\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsCompact K) (LT.lt (μ A) (HAdd.hAdd (μ K) ε)))","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any measurable set of finite measure can be approximated by a\ncompact subset. See also `MeasurableSet.exists_lt_isCompact_of_ne_top`. -/\ntheorem _root_.MeasurableSet.exists_isCompact_lt_add [InnerRegularCompactLTTop μ]\n    ⦃A : Set α⦄ (hA : MeasurableSet A) (h'A : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ K, K ⊆ A ∧ IsCompact K ∧ μ A < μ K + ε :=\n  InnerRegularCompactLTTop.innerRegular.exists_subset_lt_add isCompact_empty ⟨hA, h'A⟩ h'A hε\n\n"}
{"name":"MeasurableSet.exists_isCompact_isClosed_lt_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace α\ninst✝² : μ.InnerRegularCompactLTTop\ninst✝¹ : R1Space α\ninst✝ : BorelSpace α\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsCompact K) (And (IsClosed K) (LT.lt (μ A) (HAdd.hAdd (μ K) ε))))","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any measurable set of finite measure can be approximated by a compact closed subset.\nCompared to `MeasurableSet.exists_isCompact_lt_add`,\nthis version additionally assumes that `α` is an R₁ space with Borel σ-algebra.\n-/\ntheorem _root_.MeasurableSet.exists_isCompact_isClosed_lt_add\n    [InnerRegularCompactLTTop μ] [R1Space α] [BorelSpace α]\n    ⦃A : Set α⦄ (hA : MeasurableSet A) (h'A : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ K, K ⊆ A ∧ IsCompact K ∧ IsClosed K ∧ μ A < μ K + ε :=\n  let ⟨K, hKA, hK, hμK⟩ := hA.exists_isCompact_lt_add h'A hε\n  ⟨closure K, hK.closure_subset_measurableSet hA hKA, hK.closure, isClosed_closure,\n    by rwa [hK.measure_closure]⟩\n\n"}
{"name":"MeasurableSet.exists_isCompact_diff_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace α\ninst✝² : OpensMeasurableSpace α\ninst✝¹ : T2Space α\ninst✝ : μ.InnerRegularCompactLTTop\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsCompact K) (LT.lt (μ (SDiff.sdiff A K)) ε))","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any measurable set of finite measure can be approximated by a\ncompact subset. See also `MeasurableSet.exists_isCompact_lt_add` and\n`MeasurableSet.exists_lt_isCompact_of_ne_top`. -/\ntheorem _root_.MeasurableSet.exists_isCompact_diff_lt [OpensMeasurableSpace α] [T2Space α]\n    [InnerRegularCompactLTTop μ]  ⦃A : Set α⦄ (hA : MeasurableSet A) (h'A : μ A ≠ ∞)\n    {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ K, K ⊆ A ∧ IsCompact K ∧ μ (A \\ K) < ε := by\n  rcases hA.exists_isCompact_lt_add h'A hε with ⟨K, hKA, hKc, hK⟩\n  exact ⟨K, hKA, hKc, measure_diff_lt_of_lt_add hKc.nullMeasurableSet hKA\n    (ne_top_of_le_ne_top h'A <| measure_mono hKA) hK⟩\n\n"}
{"name":"MeasurableSet.exists_isCompact_isClosed_diff_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace α\ninst✝² : BorelSpace α\ninst✝¹ : R1Space α\ninst✝ : μ.InnerRegularCompactLTTop\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsCompact K) (And (IsClosed K) (LT.lt (μ (SDiff.sdiff A K)) ε)))","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any measurable set of finite measure can be approximated by a compact closed subset.\nCompared to `MeasurableSet.exists_isCompact_diff_lt`,\nthis lemma additionally assumes that `α` is an R₁ space with Borel σ-algebra. -/\ntheorem _root_.MeasurableSet.exists_isCompact_isClosed_diff_lt [BorelSpace α] [R1Space α]\n    [InnerRegularCompactLTTop μ] ⦃A : Set α⦄ (hA : MeasurableSet A) (h'A : μ A ≠ ∞)\n    {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ K, K ⊆ A ∧ IsCompact K ∧ IsClosed K ∧ μ (A \\ K) < ε := by\n  rcases hA.exists_isCompact_isClosed_lt_add h'A hε with ⟨K, hKA, hKco, hKcl, hK⟩\n  exact ⟨K, hKA, hKco, hKcl, measure_diff_lt_of_lt_add hKcl.nullMeasurableSet hKA\n    (ne_top_of_le_ne_top h'A <| measure_mono hKA) hK⟩\n\n"}
{"name":"MeasurableSet.exists_lt_isCompact_of_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegularCompactLTTop\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nr : ENNReal\nhr : LT.lt r (μ A)\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsCompact K) (LT.lt r (μ K)))","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any measurable set of finite measure can be approximated by a\ncompact subset. See also `MeasurableSet.exists_isCompact_lt_add`. -/\ntheorem _root_.MeasurableSet.exists_lt_isCompact_of_ne_top [InnerRegularCompactLTTop μ] ⦃A : Set α⦄\n    (hA : MeasurableSet A) (h'A : μ A ≠ ∞) {r : ℝ≥0∞} (hr : r < μ A) :\n    ∃ K, K ⊆ A ∧ IsCompact K ∧ r < μ K :=\n  InnerRegularCompactLTTop.innerRegular ⟨hA, h'A⟩ _ hr\n\n"}
{"name":"MeasurableSet.measure_eq_iSup_isCompact_of_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegularCompactLTTop\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\n⊢ Eq (μ A) (iSup fun K => iSup fun x => iSup fun x => μ K)","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets,\nany measurable set of finite mass can be approximated from inside by compact sets. -/\ntheorem _root_.MeasurableSet.measure_eq_iSup_isCompact_of_ne_top [InnerRegularCompactLTTop μ]\n    ⦃A : Set α⦄ (hA : MeasurableSet A) (h'A : μ A ≠ ∞) :\n    μ A = ⨆ (K) (_ : K ⊆ A) (_ : IsCompact K), μ K :=\n  InnerRegularCompactLTTop.innerRegular.measure_eq_iSup ⟨hA, h'A⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.restrict","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace α\nh : μ.InnerRegularCompactLTTop\nA : Set α\n⊢ (μ.restrict A).InnerRegularCompactLTTop","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets, then its\nrestriction to any set also is. -/\ninstance restrict [h : InnerRegularCompactLTTop μ] (A : Set α) :\n    InnerRegularCompactLTTop (μ.restrict A) :=\n  ⟨InnerRegularWRT.restrict h.innerRegular A⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.instInnerRegularOfIsFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\nh : μ.InnerRegularCompactLTTop\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ μ.InnerRegular","decl":"instance (priority := 50) [h : InnerRegularCompactLTTop μ] [IsFiniteMeasure μ] :\n    InnerRegular μ := by\n  constructor\n  convert h.innerRegular with s\n  simp [measure_ne_top μ s]\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.instWeaklyRegularOfBorelSpaceOfR1SpaceOfIsFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : BorelSpace α\ninst✝² : R1Space α\ninst✝¹ : μ.InnerRegularCompactLTTop\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ μ.WeaklyRegular","decl":"instance (priority := 50) [BorelSpace α] [R1Space α] [InnerRegularCompactLTTop μ]\n    [IsFiniteMeasure μ] : WeaklyRegular μ :=\n  InnerRegular.innerRegularWRT_isClosed_isOpen.weaklyRegular_of_finite _\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.instRegularOfBorelSpaceOfR1SpaceOfIsFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace α\ninst✝² : BorelSpace α\ninst✝¹ : R1Space α\nh : μ.InnerRegularCompactLTTop\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ μ.Regular","decl":"instance (priority := 50) [BorelSpace α] [R1Space α] [h : InnerRegularCompactLTTop μ]\n    [IsFiniteMeasure μ] : Regular μ where\n  innerRegular := InnerRegularWRT.trans h.innerRegular <|\n    InnerRegularWRT.of_imp (fun U hU ↦ ⟨hU.measurableSet, measure_ne_top μ U⟩)\n\n"}
{"name":"IsCompact.exists_isOpen_lt_of_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : μ.InnerRegularCompactLTTop\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : R1Space α\ninst✝ : BorelSpace α\nK : Set α\nhK : IsCompact K\nr : ENNReal\nhr : LT.lt (μ K) r\n⊢ Exists fun U => And (HasSubset.Subset K U) (And (IsOpen U) (LT.lt (μ U) r))","decl":"protected lemma _root_.IsCompact.exists_isOpen_lt_of_lt [InnerRegularCompactLTTop μ]\n    [IsLocallyFiniteMeasure μ] [R1Space α] [BorelSpace α] {K : Set α}\n    (hK : IsCompact K) (r : ℝ≥0∞) (hr : μ K < r) :\n    ∃ U, K ⊆ U ∧ IsOpen U ∧ μ U < r := by\n  rcases hK.exists_open_superset_measure_lt_top μ with ⟨V, hKV, hVo, hμV⟩\n  have := Fact.mk hμV\n  obtain ⟨U, hKU, hUo, hμU⟩ : ∃ U, K ⊆ U ∧ IsOpen U ∧ μ.restrict V U < r :=\n    exists_isOpen_lt_of_lt K r <| (restrict_apply_le _ _).trans_lt hr\n  refine ⟨U ∩ V, subset_inter hKU hKV, hUo.inter hVo, ?_⟩\n  rwa [restrict_apply hUo.measurableSet] at hμU\n\n"}
{"name":"IsCompact.measure_eq_iInf_isOpen","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : μ.InnerRegularCompactLTTop\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : R1Space α\ninst✝ : BorelSpace α\nK : Set α\nhK : IsCompact K\n⊢ Eq (μ K) (iInf fun U => iInf fun x => iInf fun x => μ U)","decl":"/-- If `μ` is inner regular for finite measure sets with respect to compact sets\nand is locally finite in an R₁ space,\nthen any compact set can be approximated from outside by open sets. -/\nprotected lemma _root_.IsCompact.measure_eq_iInf_isOpen [InnerRegularCompactLTTop μ]\n    [IsLocallyFiniteMeasure μ] [R1Space α] [BorelSpace α] {K : Set α} (hK : IsCompact K) :\n    μ K = ⨅ (U : Set α) (_ : K ⊆ U) (_ : IsOpen U), μ U := by\n  apply le_antisymm\n  · simp only [le_iInf_iff]\n    exact fun U KU _ ↦ measure_mono KU\n  · apply le_of_forall_lt'\n    simpa only [iInf_lt_iff, exists_prop, exists_and_left] using hK.exists_isOpen_lt_of_lt\n\n"}
{"name":"IsCompact.exists_isOpen_lt_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : μ.InnerRegularCompactLTTop\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : R1Space α\ninst✝ : BorelSpace α\nK : Set α\nhK : IsCompact K\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun U => And (HasSubset.Subset K U) (And (IsOpen U) (LT.lt (μ U) (HAdd.hAdd (μ K) ε)))","decl":"protected theorem _root_.IsCompact.exists_isOpen_lt_add [InnerRegularCompactLTTop μ]\n    [IsLocallyFiniteMeasure μ] [R1Space α] [BorelSpace α]\n    {K : Set α} (hK : IsCompact K) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ U, K ⊆ U ∧ IsOpen U ∧ μ U < μ K + ε :=\n  hK.exists_isOpen_lt_of_lt _ (ENNReal.lt_add_right hK.measure_lt_top.ne hε)\n\n"}
{"name":"MeasurableSet.exists_isOpen_symmDiff_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : μ.InnerRegularCompactLTTop\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : R1Space α\ninst✝ : BorelSpace α\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun U => And (IsOpen U) (And (LT.lt (μ U) Top.top) (LT.lt (μ (symmDiff U s)) ε))","decl":"/-- Let `μ` be a locally finite measure on an R₁ topological space with Borel σ-algebra.\nIf `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any measurable set of finite measure can be approximated in measure by an open set.\nSee also `Set.exists_isOpen_lt_of_lt` and `MeasurableSet.exists_isOpen_diff_lt`\nfor the case of an outer regular measure. -/\nprotected theorem _root_.MeasurableSet.exists_isOpen_symmDiff_lt [InnerRegularCompactLTTop μ]\n    [IsLocallyFiniteMeasure μ] [R1Space α] [BorelSpace α]\n    {s : Set α} (hs : MeasurableSet s) (hμs : μ s ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ U, IsOpen U ∧ μ U < ∞ ∧ μ (U ∆ s) < ε := by\n  have : ε / 2 ≠ 0 := (ENNReal.half_pos hε).ne'\n  rcases hs.exists_isCompact_isClosed_diff_lt hμs this with ⟨K, hKs, hKco, hKcl, hμK⟩\n  rcases hKco.exists_isOpen_lt_add (μ := μ) this with ⟨U, hKU, hUo, hμU⟩\n  refine ⟨U, hUo, hμU.trans_le le_top, ?_⟩\n  rw [← ENNReal.add_halves ε, measure_symmDiff_eq hUo.nullMeasurableSet hs.nullMeasurableSet]\n  gcongr\n  · calc\n      μ (U \\ s) ≤ μ (U \\ K) := by gcongr\n      _ < ε / 2 := by\n        apply measure_diff_lt_of_lt_add hKcl.nullMeasurableSet hKU _ hμU\n        exact ne_top_of_le_ne_top hμs (by gcongr)\n  · exact lt_of_le_of_lt (by gcongr) hμK\n\n"}
{"name":"MeasureTheory.NullMeasurableSet.exists_isOpen_symmDiff_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : μ.InnerRegularCompactLTTop\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : R1Space α\ninst✝ : BorelSpace α\ns : Set α\nhs : MeasureTheory.NullMeasurableSet s μ\nhμs : Ne (μ s) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun U => And (IsOpen U) (And (LT.lt (μ U) Top.top) (LT.lt (μ (symmDiff U s)) ε))","decl":"/-- Let `μ` be a locally finite measure on an R₁ topological space with Borel σ-algebra.\nIf `μ` is inner regular for finite measure sets with respect to compact sets,\nthen any null measurable set of finite measure can be approximated in measure by an open set.\nSee also `Set.exists_isOpen_lt_of_lt` and `MeasurableSet.exists_isOpen_diff_lt`\nfor the case of an outer regular measure. -/\nprotected theorem _root_.MeasureTheory.NullMeasurableSet.exists_isOpen_symmDiff_lt\n    [InnerRegularCompactLTTop μ] [IsLocallyFiniteMeasure μ] [R1Space α] [BorelSpace α]\n    {s : Set α} (hs : NullMeasurableSet s μ) (hμs : μ s ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ U, IsOpen U ∧ μ U < ∞ ∧ μ (U ∆ s) < ε := by\n  rcases hs with ⟨t, htm, hst⟩\n  rcases htm.exists_isOpen_symmDiff_lt (by rwa [← measure_congr hst]) hε with ⟨U, hUo, hμU, hUs⟩\n  refine ⟨U, hUo, hμU, ?_⟩\n  rwa [measure_congr <| (ae_eq_refl _).symmDiff hst]\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.smul","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace α\nh : μ.InnerRegularCompactLTTop\nc : ENNReal\n⊢ (HSMul.hSMul c μ).InnerRegularCompactLTTop","decl":"instance smul [h : InnerRegularCompactLTTop μ] (c : ℝ≥0∞) : InnerRegularCompactLTTop (c • μ) := by\n  by_cases hc : c = 0\n  · simp only [hc, zero_smul]\n    infer_instance\n  by_cases h'c : c = ∞\n  · constructor\n    intro s hs r hr\n    simp only [h'c, smul_toOuterMeasure, OuterMeasure.coe_smul, Pi.smul_apply, smul_eq_mul] at hr\n    by_cases h's : μ s = 0\n    · simp [h's] at hr\n    · simp [h'c, ENNReal.mul_eq_top, h's] at hs\n  · constructor\n    convert InnerRegularWRT.smul h.innerRegular c using 2 with s\n    have : (c • μ) s ≠ ∞ ↔ μ s ≠ ∞ := by simp [not_iff_not, ENNReal.mul_eq_top, hc, h'c]\n    simp only [this]\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.smul_nnreal","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.InnerRegularCompactLTTop\nc : NNReal\n⊢ (HSMul.hSMul c μ).InnerRegularCompactLTTop","decl":"instance smul_nnreal [InnerRegularCompactLTTop μ] (c : ℝ≥0) :\n    InnerRegularCompactLTTop (c • μ) :=\n  inferInstanceAs (InnerRegularCompactLTTop ((c : ℝ≥0∞) • μ))\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.instInnerRegularOfSigmaFinite","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace α\ninst✝¹ : μ.InnerRegularCompactLTTop\ninst✝ : MeasureTheory.SigmaFinite μ\n⊢ μ.InnerRegular","decl":"instance (priority := 80) [InnerRegularCompactLTTop μ] [SigmaFinite μ] : InnerRegular μ :=\n  ⟨InnerRegularCompactLTTop.innerRegular.trans InnerRegularWRT.of_sigmaFinite⟩\n\n"}
{"name":"MeasureTheory.Measure.InnerRegularCompactLTTop.map_of_continuous","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : BorelSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : TopologicalSpace β\ninst✝ : BorelSpace β\nh : μ.InnerRegularCompactLTTop\nf : α → β\nhf : Continuous f\n⊢ (MeasureTheory.Measure.map f μ).InnerRegularCompactLTTop","decl":"protected theorem map_of_continuous [BorelSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] [h : InnerRegularCompactLTTop μ] {f : α → β} (hf : Continuous f) :\n    InnerRegularCompactLTTop (Measure.map f μ) := by\n  constructor\n  refine InnerRegularWRT.map h.innerRegular hf.aemeasurable ?_ (fun K hK ↦ hK.image hf) ?_\n  · rintro s ⟨hs, h's⟩\n    exact ⟨hf.measurable hs, by rwa [map_apply hf.measurable hs] at h's⟩\n  · rintro s ⟨hs, -⟩\n    exact hs\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.zero","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\n⊢ MeasureTheory.Measure.WeaklyRegular 0","decl":"instance zero : WeaklyRegular (0 : Measure α) :=\n  ⟨fun _ _ _r hr => ⟨∅, empty_subset _, isClosed_empty, hr⟩⟩\n\n"}
{"name":"IsOpen.exists_lt_isClosed","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\nU : Set α\nhU : IsOpen U\nr : ENNReal\nhr : LT.lt r (μ U)\n⊢ Exists fun F => And (HasSubset.Subset F U) (And (IsClosed F) (LT.lt r (μ F)))","decl":"/-- If `μ` is a weakly regular measure, then any open set can be approximated by a closed subset. -/\ntheorem _root_.IsOpen.exists_lt_isClosed [WeaklyRegular μ] ⦃U : Set α⦄ (hU : IsOpen U) {r : ℝ≥0∞}\n    (hr : r < μ U) : ∃ F, F ⊆ U ∧ IsClosed F ∧ r < μ F :=\n  WeaklyRegular.innerRegular hU r hr\n\n"}
{"name":"IsOpen.measure_eq_iSup_isClosed","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nU : Set α\nhU : IsOpen U\nμ : MeasureTheory.Measure α\ninst✝ : μ.WeaklyRegular\n⊢ Eq (μ U) (iSup fun F => iSup fun x => iSup fun x => μ F)","decl":"/-- If `μ` is a weakly regular measure, then any open set can be approximated by a closed subset. -/\ntheorem _root_.IsOpen.measure_eq_iSup_isClosed ⦃U : Set α⦄ (hU : IsOpen U) (μ : Measure α)\n    [WeaklyRegular μ] : μ U = ⨆ (F) (_ : F ⊆ U) (_ : IsClosed F), μ F :=\n  WeaklyRegular.innerRegular.measure_eq_iSup hU\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.innerRegular_measurable","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\n⊢ μ.InnerRegularWRT IsClosed fun s => And (MeasurableSet s) (Ne (μ s) Top.top)","decl":"theorem innerRegular_measurable [WeaklyRegular μ] :\n    InnerRegularWRT μ IsClosed fun s => MeasurableSet s ∧ μ s ≠ ∞ :=\n  WeaklyRegular.innerRegular.measurableSet_of_isOpen (fun _ _ h₁ h₂ ↦ h₁.inter h₂.isClosed_compl)\n\n"}
{"name":"MeasurableSet.exists_isClosed_lt_add","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun K => And (HasSubset.Subset K s) (And (IsClosed K) (LT.lt (μ s) (HAdd.hAdd (μ K) ε)))","decl":"/-- If `s` is a measurable set, a weakly regular measure `μ` is finite on `s`, and `ε` is a positive\nnumber, then there exist a closed set `K ⊆ s` such that `μ s < μ K + ε`. -/\ntheorem _root_.MeasurableSet.exists_isClosed_lt_add [WeaklyRegular μ] {s : Set α}\n    (hs : MeasurableSet s) (hμs : μ s ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ K, K ⊆ s ∧ IsClosed K ∧ μ s < μ K + ε :=\n  innerRegular_measurable.exists_subset_lt_add isClosed_empty ⟨hs, hμs⟩ hμs hε\n\n"}
{"name":"MeasurableSet.exists_isClosed_diff_lt","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : μ.WeaklyRegular\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nε : ENNReal\nhε : Ne ε 0\n⊢ Exists fun F => And (HasSubset.Subset F A) (And (IsClosed F) (LT.lt (μ (SDiff.sdiff A F)) ε))","decl":"theorem _root_.MeasurableSet.exists_isClosed_diff_lt [OpensMeasurableSpace α] [WeaklyRegular μ]\n    ⦃A : Set α⦄ (hA : MeasurableSet A) (h'A : μ A ≠ ∞) {ε : ℝ≥0∞} (hε : ε ≠ 0) :\n    ∃ F, F ⊆ A ∧ IsClosed F ∧ μ (A \\ F) < ε := by\n  rcases hA.exists_isClosed_lt_add h'A hε with ⟨F, hFA, hFc, hF⟩\n  exact ⟨F, hFA, hFc, measure_diff_lt_of_lt_add hFc.nullMeasurableSet hFA\n    (ne_top_of_le_ne_top h'A <| measure_mono hFA) hF⟩\n\n"}
{"name":"MeasurableSet.exists_lt_isClosed_of_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\nr : ENNReal\nhr : LT.lt r (μ A)\n⊢ Exists fun K => And (HasSubset.Subset K A) (And (IsClosed K) (LT.lt r (μ K)))","decl":"/-- Given a weakly regular measure, any measurable set of finite mass can be approximated from\ninside by closed sets. -/\ntheorem _root_.MeasurableSet.exists_lt_isClosed_of_ne_top [WeaklyRegular μ] ⦃A : Set α⦄\n    (hA : MeasurableSet A) (h'A : μ A ≠ ∞) {r : ℝ≥0∞} (hr : r < μ A) :\n    ∃ K, K ⊆ A ∧ IsClosed K ∧ r < μ K :=\n  innerRegular_measurable ⟨hA, h'A⟩ _ hr\n\n"}
{"name":"MeasurableSet.measure_eq_iSup_isClosed_of_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\nA : Set α\nhA : MeasurableSet A\nh'A : Ne (μ A) Top.top\n⊢ Eq (μ A) (iSup fun K => iSup fun x => iSup fun x => μ K)","decl":"/-- Given a weakly regular measure, any measurable set of finite mass can be approximated from\ninside by closed sets. -/\ntheorem _root_.MeasurableSet.measure_eq_iSup_isClosed_of_ne_top [WeaklyRegular μ] ⦃A : Set α⦄\n    (hA : MeasurableSet A) (h'A : μ A ≠ ∞) : μ A = ⨆ (K) (_ : K ⊆ A) (_ : IsClosed K), μ K :=\n  innerRegular_measurable.measure_eq_iSup ⟨hA, h'A⟩\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.restrict_of_measure_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace α\ninst✝¹ : BorelSpace α\ninst✝ : μ.WeaklyRegular\nA : Set α\nh'A : Ne (μ A) Top.top\n⊢ (μ.restrict A).WeaklyRegular","decl":"/-- The restriction of a weakly regular measure to a measurable set of finite measure is\nweakly regular. -/\ntheorem restrict_of_measure_ne_top [BorelSpace α] [WeaklyRegular μ] {A : Set α}\n    (h'A : μ A ≠ ∞) : WeaklyRegular (μ.restrict A) := by\n  haveI : Fact (μ A < ∞) := ⟨h'A.lt_top⟩\n  refine InnerRegularWRT.weaklyRegular_of_finite (μ.restrict A) (fun V V_open r hr ↦ ?_)\n  have : InnerRegularWRT (μ.restrict A) IsClosed (fun s ↦ MeasurableSet s) :=\n    InnerRegularWRT.restrict_of_measure_ne_top innerRegular_measurable h'A\n  exact this V_open.measurableSet r hr\n\n-- see Note [lower instance priority]\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.of_pseudoMetrizableSpace_of_isFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"X : Type u_3\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝² : MeasurableSpace X\ninst✝¹ : BorelSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsFiniteMeasure μ\n⊢ μ.WeaklyRegular","decl":"/-- Any finite measure on a metrizable space (or even a pseudo metrizable space)\nis weakly regular. -/\ninstance (priority := 100) of_pseudoMetrizableSpace_of_isFiniteMeasure {X : Type*}\n    [TopologicalSpace X] [PseudoMetrizableSpace X] [MeasurableSpace X] [BorelSpace X]\n    (μ : Measure X) [IsFiniteMeasure μ] :\n    WeaklyRegular μ :=\n  (InnerRegularWRT.of_pseudoMetrizableSpace μ).weaklyRegular_of_finite μ\n\n-- see Note [lower instance priority]\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.of_pseudoMetrizableSpace_secondCountable_of_locallyFinite","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"X : Type u_3\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝³ : SecondCountableTopology X\ninst✝² : MeasurableSpace X\ninst✝¹ : BorelSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ μ.WeaklyRegular","decl":"/-- Any locally finite measure on a second countable metrizable space\n(or even a pseudo metrizable space) is weakly regular. -/\ninstance (priority := 100) of_pseudoMetrizableSpace_secondCountable_of_locallyFinite {X : Type*}\n    [TopologicalSpace X] [PseudoMetrizableSpace X] [SecondCountableTopology X] [MeasurableSpace X]\n    [BorelSpace X] (μ : Measure X) [IsLocallyFiniteMeasure μ] : WeaklyRegular μ :=\n  have : OuterRegular μ := by\n    refine (μ.finiteSpanningSetsInOpen'.mono' fun U hU => ?_).outerRegular\n    have : Fact (μ U < ∞) := ⟨hU.2⟩\n    exact ⟨hU.1, inferInstance⟩\n  ⟨InnerRegularWRT.of_pseudoMetrizableSpace μ⟩\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.smul","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\nx : ENNReal\nhx : Ne x Top.top\n⊢ (HSMul.hSMul x μ).WeaklyRegular","decl":"protected theorem smul [WeaklyRegular μ] {x : ℝ≥0∞} (hx : x ≠ ∞) : (x • μ).WeaklyRegular := by\n  haveI := OuterRegular.smul μ hx\n  exact ⟨WeaklyRegular.innerRegular.smul x⟩\n\n"}
{"name":"MeasureTheory.Measure.WeaklyRegular.smul_nnreal","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.WeaklyRegular\nc : NNReal\n⊢ (HSMul.hSMul c μ).WeaklyRegular","decl":"instance smul_nnreal [WeaklyRegular μ] (c : ℝ≥0) : WeaklyRegular (c • μ) :=\n  WeaklyRegular.smul coe_ne_top\n\n"}
{"name":"MeasureTheory.Measure.Regular.zero","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : TopologicalSpace α\n⊢ MeasureTheory.Measure.Regular 0","decl":"instance zero : Regular (0 : Measure α) :=\n  ⟨fun _ _ _r hr => ⟨∅, empty_subset _, isCompact_empty, hr⟩⟩\n\n"}
{"name":"IsOpen.exists_lt_isCompact","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.Regular\nU : Set α\nhU : IsOpen U\nr : ENNReal\nhr : LT.lt r (μ U)\n⊢ Exists fun K => And (HasSubset.Subset K U) (And (IsCompact K) (LT.lt r (μ K)))","decl":"/-- If `μ` is a regular measure, then any open set can be approximated by a compact subset. -/\ntheorem _root_.IsOpen.exists_lt_isCompact [Regular μ] ⦃U : Set α⦄ (hU : IsOpen U) {r : ℝ≥0∞}\n    (hr : r < μ U) : ∃ K, K ⊆ U ∧ IsCompact K ∧ r < μ K :=\n  Regular.innerRegular hU r hr\n\n"}
{"name":"IsOpen.measure_eq_iSup_isCompact","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\ninst✝¹ : TopologicalSpace α\nU : Set α\nhU : IsOpen U\nμ : MeasureTheory.Measure α\ninst✝ : μ.Regular\n⊢ Eq (μ U) (iSup fun K => iSup fun x => iSup fun x => μ K)","decl":"/-- The measure of an open set is the supremum of the measures of compact sets it contains. -/\ntheorem _root_.IsOpen.measure_eq_iSup_isCompact ⦃U : Set α⦄ (hU : IsOpen U) (μ : Measure α)\n    [Regular μ] : μ U = ⨆ (K : Set α) (_ : K ⊆ U) (_ : IsCompact K), μ K :=\n  Regular.innerRegular.measure_eq_iSup hU\n\n"}
{"name":"MeasureTheory.Measure.Regular.exists_isCompact_not_null","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.Regular\n⊢ Iff (Exists fun K => And (IsCompact K) (Ne (μ K) 0)) (Ne μ 0)","decl":"theorem exists_isCompact_not_null [Regular μ] : (∃ K, IsCompact K ∧ μ K ≠ 0) ↔ μ ≠ 0 := by\n  simp_rw [Ne, ← measure_univ_eq_zero, isOpen_univ.measure_eq_iSup_isCompact,\n    ENNReal.iSup_eq_zero, not_forall, exists_prop, subset_univ, true_and]\n"}
{"name":"MeasureTheory.Measure.Regular.exists_compact_not_null","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.Regular\n⊢ Iff (Exists fun K => And (IsCompact K) (Ne (μ K) 0)) (Ne μ 0)","decl":"@[deprecated (since := \"2024-11-19\")] alias exists_compact_not_null := exists_isCompact_not_null\n\n"}
{"name":"MeasureTheory.Measure.Regular.instInnerRegularCompactLTTop","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.Regular\n⊢ μ.InnerRegularCompactLTTop","decl":"/-- If `μ` is a regular measure, then any measurable set of finite measure can be approximated by a\ncompact subset. See also `MeasurableSet.exists_isCompact_lt_add` and\n`MeasurableSet.exists_lt_isCompact_of_ne_top`. -/\ninstance (priority := 100) [Regular μ] : InnerRegularCompactLTTop μ :=\n  ⟨Regular.innerRegular.measurableSet_of_isOpen (fun _ _ hs hU ↦ hs.diff hU)⟩\n\n"}
{"name":"MeasureTheory.Measure.Regular.map","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : BorelSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : BorelSpace β\ninst✝ : μ.Regular\nf : Homeomorph α β\n⊢ (MeasureTheory.Measure.map (⇑f) μ).Regular","decl":"protected theorem map [BorelSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] [Regular μ] (f : α ≃ₜ β) : (Measure.map f μ).Regular := by\n  haveI := OuterRegular.map f μ\n  haveI := IsFiniteMeasureOnCompacts.map μ f\n  exact\n    ⟨Regular.innerRegular.map' f.toMeasurableEquiv\n        (fun U hU => hU.preimage f.continuous)\n        (fun K hK => hK.image f.continuous)⟩\n\n"}
{"name":"MeasureTheory.Measure.Regular.map_iff","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : BorelSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : TopologicalSpace β\ninst✝ : BorelSpace β\nf : Homeomorph α β\n⊢ Iff (MeasureTheory.Measure.map (⇑f) μ).Regular μ.Regular","decl":"protected theorem map_iff [BorelSpace α] [MeasurableSpace β] [TopologicalSpace β]\n    [BorelSpace β] (f : α ≃ₜ β) :\n    Regular (Measure.map f μ) ↔ Regular μ := by\n  refine ⟨fun h ↦ ?_, fun h ↦ h.map f⟩\n  convert h.map f.symm\n  rw [map_map f.symm.continuous.measurable f.continuous.measurable]\n  simp\n\n"}
{"name":"MeasureTheory.Measure.Regular.smul","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.Regular\nx : ENNReal\nhx : Ne x Top.top\n⊢ (HSMul.hSMul x μ).Regular","decl":"protected theorem smul [Regular μ] {x : ℝ≥0∞} (hx : x ≠ ∞) : (x • μ).Regular := by\n  haveI := OuterRegular.smul μ hx\n  haveI := IsFiniteMeasureOnCompacts.smul μ hx\n  exact ⟨Regular.innerRegular.smul x⟩\n\n"}
{"name":"MeasureTheory.Measure.Regular.smul_nnreal","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace α\ninst✝ : μ.Regular\nc : NNReal\n⊢ (HSMul.hSMul c μ).Regular","decl":"instance smul_nnreal [Regular μ] (c : ℝ≥0) : Regular (c • μ) := Regular.smul coe_ne_top\n\n"}
{"name":"MeasureTheory.Measure.Regular.restrict_of_measure_ne_top","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace α\ninst✝² : R1Space α\ninst✝¹ : BorelSpace α\ninst✝ : μ.Regular\nA : Set α\nh'A : Ne (μ A) Top.top\n⊢ (μ.restrict A).Regular","decl":"/-- The restriction of a regular measure to a set of finite measure is regular. -/\ntheorem restrict_of_measure_ne_top [R1Space α] [BorelSpace α] [Regular μ]\n    {A : Set α} (h'A : μ A ≠ ∞) : Regular (μ.restrict A) := by\n  have : WeaklyRegular (μ.restrict A) := WeaklyRegular.restrict_of_measure_ne_top h'A\n  constructor\n  intro V hV r hr\n  have R : restrict μ A V ≠ ∞ := by\n    rw [restrict_apply hV.measurableSet]\n    exact ((measure_mono inter_subset_right).trans_lt h'A.lt_top).ne\n  exact MeasurableSet.exists_lt_isCompact_of_ne_top hV.measurableSet R hr\n\n"}
{"name":"MeasureTheory.Measure.Regular.of_sigmaCompactSpace_of_isLocallyFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"X : Type u_3\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝³ : SigmaCompactSpace X\ninst✝² : MeasurableSpace X\ninst✝¹ : BorelSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ μ.Regular","decl":"/-- Any locally finite measure on a `σ`-compact pseudometrizable space is regular. -/\ninstance (priority := 100) Regular.of_sigmaCompactSpace_of_isLocallyFiniteMeasure {X : Type*}\n    [TopologicalSpace X] [PseudoMetrizableSpace X] [SigmaCompactSpace X] [MeasurableSpace X]\n    [BorelSpace X] (μ : Measure X) [IsLocallyFiniteMeasure μ] : Regular μ := by\n  let A : PseudoMetricSpace X := TopologicalSpace.pseudoMetrizableSpacePseudoMetric X\n  exact ⟨(InnerRegularWRT.isCompact_isClosed μ).trans (InnerRegularWRT.of_pseudoMetrizableSpace μ)⟩\n\n"}
{"name":"MeasureTheory.Measure.instInnerRegularOfPseudoMetrizableSpaceOfSigmaCompactSpaceOfBorelSpaceOfSigmaFinite","module":"Mathlib.MeasureTheory.Measure.Regular","initialProofState":"X : Type u_3\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace.PseudoMetrizableSpace X\ninst✝³ : SigmaCompactSpace X\ninst✝² : MeasurableSpace X\ninst✝¹ : BorelSpace X\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.SigmaFinite μ\n⊢ μ.InnerRegular","decl":"/-- Any sigma finite measure on a `σ`-compact pseudometrizable space is inner regular. -/\ninstance (priority := 100) {X : Type*}\n    [TopologicalSpace X] [PseudoMetrizableSpace X] [SigmaCompactSpace X] [MeasurableSpace X]\n    [BorelSpace X] (μ : Measure X) [SigmaFinite μ] : InnerRegular μ := by\n  refine ⟨(InnerRegularWRT.isCompact_isClosed μ).trans ?_⟩\n  refine InnerRegularWRT.of_restrict (fun n ↦ ?_) (iUnion_spanningSets μ).superset\n    (monotone_spanningSets μ)\n  have : Fact (μ (spanningSets μ n) < ∞) := ⟨measure_spanningSets_lt_top μ n⟩\n  exact WeaklyRegular.innerRegular_measurable.trans InnerRegularWRT.of_sigmaFinite\n\n"}
