{"name":"instIsLocalRingSubtypeMemSubringMapOfNontrivial","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing S\ninst✝¹ : Nontrivial S\nf : RingHom R S\ns : Subring R\ninst✝ : IsLocalRing (Subtype fun x => Membership.mem s x)\n⊢ IsLocalRing (Subtype fun x => Membership.mem (Subring.map f s) x)","decl":"instance [Nontrivial S] (f : R →+* S) (s : Subring R) [IsLocalRing s] : IsLocalRing (s.map f) :=\n  .of_surjective' (f.restrict s _ (fun _ ↦ Set.mem_image_of_mem f))\n    (fun ⟨_, a, ha, e⟩ ↦ ⟨⟨a, ha⟩, Subtype.ext e⟩)\n\n"}
{"name":"isLocalRing_top","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\n⊢ IsLocalRing (Subtype fun x => Membership.mem Top.top x)","decl":"instance isLocalRing_top [IsLocalRing R] : IsLocalRing (⊤ : Subring R) :=\n  Subring.topEquiv.symm.isLocalRing\n\n"}
{"name":"LocalSubring.mk.injEq","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\ntoSubring✝ : Subring R\nisLocalRing✝ : IsLocalRing (Subtype fun x => Membership.mem toSubring✝ x)\ntoSubring : Subring R\nisLocalRing : IsLocalRing (Subtype fun x => Membership.mem toSubring x)\n⊢ Eq (Eq (LocalSubring.mk toSubring✝) (LocalSubring.mk toSubring)) (Eq toSubring✝ toSubring)","decl":"variable (R) in\n/-- The class of local subrings of a commutative ring. -/\n@[ext]\nstructure LocalSubring where\n  /-- The underlying subring of a local subring. -/\n  toSubring : Subring R\n  [isLocalRing : IsLocalRing toSubring]\n\n"}
{"name":"LocalSubring.mk.inj","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\ntoSubring✝ : Subring R\nisLocalRing✝ : IsLocalRing (Subtype fun x => Membership.mem toSubring✝ x)\ntoSubring : Subring R\nisLocalRing : IsLocalRing (Subtype fun x => Membership.mem toSubring x)\nx✝ : Eq (LocalSubring.mk toSubring✝) (LocalSubring.mk toSubring)\n⊢ Eq toSubring✝ toSubring","decl":"variable (R) in\n/-- The class of local subrings of a commutative ring. -/\n@[ext]\nstructure LocalSubring where\n  /-- The underlying subring of a local subring. -/\n  toSubring : Subring R\n  [isLocalRing : IsLocalRing toSubring]\n\n"}
{"name":"LocalSubring.ext","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nx y : LocalSubring R\ntoSubring : Eq x.toSubring y.toSubring\n⊢ Eq x y","decl":"variable (R) in\n/-- The class of local subrings of a commutative ring. -/\n@[ext]\nstructure LocalSubring where\n  /-- The underlying subring of a local subring. -/\n  toSubring : Subring R\n  [isLocalRing : IsLocalRing toSubring]\n\n"}
{"name":"LocalSubring.isLocalRing","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nself : LocalSubring R\n⊢ IsLocalRing (Subtype fun x => Membership.mem self.toSubring x)","decl":"variable (R) in\n/-- The class of local subrings of a commutative ring. -/\n@[ext]\nstructure LocalSubring where\n  /-- The underlying subring of a local subring. -/\n  toSubring : Subring R\n  [isLocalRing : IsLocalRing toSubring]\n\n"}
{"name":"LocalSubring.ext_iff","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nx y : LocalSubring R\n⊢ Iff (Eq x y) (Eq x.toSubring y.toSubring)","decl":"variable (R) in\n/-- The class of local subrings of a commutative ring. -/\n@[ext]\nstructure LocalSubring where\n  /-- The underlying subring of a local subring. -/\n  toSubring : Subring R\n  [isLocalRing : IsLocalRing toSubring]\n\n"}
{"name":"LocalSubring.mk.sizeOf_spec","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : SizeOf R\ntoSubring : Subring R\nisLocalRing : IsLocalRing (Subtype fun x => Membership.mem toSubring x)\n⊢ Eq (SizeOf.sizeOf (LocalSubring.mk toSubring)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toSubring)) (SizeOf.sizeOf isLocalRing))","decl":"variable (R) in\n/-- The class of local subrings of a commutative ring. -/\n@[ext]\nstructure LocalSubring where\n  /-- The underlying subring of a local subring. -/\n  toSubring : Subring R\n  [isLocalRing : IsLocalRing toSubring]\n\n"}
{"name":"LocalSubring.toSubring_injective","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\n⊢ Function.Injective LocalSubring.toSubring","decl":"lemma toSubring_injective : Function.Injective (toSubring (R := R)) := by\n  rintro ⟨a, b⟩ ⟨c, d⟩ rfl; rfl\n\n"}
{"name":"LocalSubring.map_toSubring","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Nontrivial S\nf : RingHom R S\ns : LocalSubring R\n⊢ Eq (LocalSubring.map f s).toSubring (Subring.map f s.toSubring)","decl":"/-- The image of a `LocalSubring` as a `LocalSubring`. -/\n@[simps! toSubring]\ndef map [Nontrivial S] (f : R →+* S) (s : LocalSubring R) : LocalSubring S :=\n  mk (s.1.map f)\n\n"}
{"name":"LocalSubring.range_toSubring","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing S\ninst✝¹ : IsLocalRing R\ninst✝ : Nontrivial S\nf : RingHom R S\n⊢ Eq (LocalSubring.range f).toSubring ((Subring.map f Top.top).copy (Set.range ⇑f) ⋯)","decl":"/-- The range of a ringhom from a local ring as a `LocalSubring`. -/\n@[simps! toSubring]\ndef range [IsLocalRing R] [Nontrivial S] (f : R →+* S) : LocalSubring S :=\n  .copy (map f (mk ⊤)) f.range (by ext x; exact congr(x ∈ $(Set.image_univ.symm)))\n\n"}
{"name":"LocalSubring.le_def","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nA B : LocalSubring R\n⊢ Iff (LE.le A B) (Exists fun h => IsLocalHom (Subring.inclusion h))","decl":"/-- `A` dominates `B` if and only if `B ≤ A` (as subrings) and `m_A ∩ B = m_B`. -/\nlemma le_def {A B : LocalSubring R} :\n    A ≤ B ↔ ∃ h : A.toSubring ≤ B.toSubring, IsLocalHom (Subring.inclusion h) := Iff.rfl\n\n"}
{"name":"LocalSubring.toSubring_mono","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"R : Type u_1\ninst✝ : CommRing R\n⊢ Monotone LocalSubring.toSubring","decl":"lemma toSubring_mono : Monotone (toSubring (R := R)) :=\n  fun _ _ e ↦ e.1\n\n"}
{"name":"LocalSubring.le_ofPrime","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"K : Type u_3\ninst✝¹ : Field K\nA : Subring K\nP : Ideal (Subtype fun x => Membership.mem A x)\ninst✝ : P.IsPrime\n⊢ LE.le A (LocalSubring.ofPrime A P).toSubring","decl":"lemma le_ofPrime : A ≤ (ofPrime A P).toSubring := by\n  intro x hx\n  exact ⟨algebraMap A _ ⟨x, hx⟩, by simp⟩\n\n"}
{"name":"LocalSubring.instIsScalarTowerSubtypeMemSubringToSubringOfPrime","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"K : Type u_3\ninst✝¹ : Field K\nA : Subring K\nP : Ideal (Subtype fun x => Membership.mem A x)\ninst✝ : P.IsPrime\n⊢ IsScalarTower (Subtype fun x => Membership.mem A x) (Subtype fun x => Membership.mem (LocalSubring.ofPrime A P).toSubring x) K","decl":"instance : IsScalarTower A (ofPrime A P).toSubring K := .of_algebraMap_eq (fun _ ↦ rfl)\n\n"}
{"name":"LocalSubring.instAtPrimeSubtypeMemSubringToSubringOfPrime","module":"Mathlib.RingTheory.LocalRing.LocalSubring","initialProofState":"K : Type u_3\ninst✝¹ : Field K\nA : Subring K\nP : Ideal (Subtype fun x => Membership.mem A x)\ninst✝ : P.IsPrime\n⊢ IsLocalization.AtPrime (Subtype fun x => Membership.mem (LocalSubring.ofPrime A P).toSubring x) P","decl":"instance : IsLocalization.AtPrime (ofPrime A P).toSubring P :=\n  IsLocalization.isLocalization_of_algEquiv _ (ofPrimeEquiv A P)\n\n"}
