{"name":"exp_neg_mul_rpow_isLittleO_exp_neg","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"p b : Real\nhb : LT.lt 0 b\nhp : LT.lt 1 p\n⊢ Asymptotics.IsLittleO Filter.atTop (fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x p))) fun x => Real.exp (Neg.neg x)","decl":"theorem exp_neg_mul_rpow_isLittleO_exp_neg {p b : ℝ} (hb : 0 < b) (hp : 1 < p) :\n    (fun x : ℝ => exp (- b * x ^ p)) =o[atTop] fun x : ℝ => exp (-x) := by\n  rw [isLittleO_exp_comp_exp_comp]\n  suffices Tendsto (fun x => x * (b * x ^ (p - 1) + -1)) atTop atTop by\n    refine Tendsto.congr' ?_ this\n    refine eventuallyEq_of_mem (Ioi_mem_atTop (0 : ℝ)) (fun x hx => ?_)\n    rw [mem_Ioi] at hx\n    rw [rpow_sub_one hx.ne']\n    field_simp [hx.ne']\n    ring\n  apply Tendsto.atTop_mul_atTop tendsto_id\n  refine tendsto_atTop_add_const_right atTop (-1 : ℝ) ?_\n  exact Tendsto.const_mul_atTop hb (tendsto_rpow_atTop (by linarith))\n\n"}
{"name":"exp_neg_mul_sq_isLittleO_exp_neg","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\nhb : LT.lt 0 b\n⊢ Asymptotics.IsLittleO Filter.atTop (fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2))) fun x => Real.exp (Neg.neg x)","decl":"theorem exp_neg_mul_sq_isLittleO_exp_neg {b : ℝ} (hb : 0 < b) :\n    (fun x : ℝ => exp (-b * x ^ 2)) =o[atTop] fun x : ℝ => exp (-x) := by\n  simp_rw [← rpow_two]\n  exact exp_neg_mul_rpow_isLittleO_exp_neg hb one_lt_two\n\n"}
{"name":"rpow_mul_exp_neg_mul_rpow_isLittleO_exp_neg","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"s b p : Real\nhp : LT.lt 1 p\nhb : LT.lt 0 b\n⊢ Asymptotics.IsLittleO Filter.atTop (fun x => HMul.hMul (HPow.hPow x s) (Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x p)))) fun x => Real.exp (HMul.hMul (Neg.neg (1 / 2)) x)","decl":"theorem rpow_mul_exp_neg_mul_rpow_isLittleO_exp_neg (s : ℝ) {b p : ℝ} (hp : 1 < p) (hb : 0 < b) :\n    (fun x : ℝ => x ^ s * exp (- b * x ^ p)) =o[atTop] fun x : ℝ => exp (-(1 / 2) * x) := by\n  apply ((isBigO_refl (fun x : ℝ => x ^ s) atTop).mul_isLittleO\n      (exp_neg_mul_rpow_isLittleO_exp_neg hb hp)).trans\n  simpa only [mul_comm] using Real.Gamma_integrand_isLittleO s\n\n"}
{"name":"rpow_mul_exp_neg_mul_sq_isLittleO_exp_neg","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\nhb : LT.lt 0 b\ns : Real\n⊢ Asymptotics.IsLittleO Filter.atTop (fun x => HMul.hMul (HPow.hPow x s) (Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2)))) fun x => Real.exp (HMul.hMul (Neg.neg (1 / 2)) x)","decl":"theorem rpow_mul_exp_neg_mul_sq_isLittleO_exp_neg {b : ℝ} (hb : 0 < b) (s : ℝ) :\n    (fun x : ℝ => x ^ s * exp (-b * x ^ 2)) =o[atTop] fun x : ℝ => exp (-(1 / 2) * x) := by\n  simp_rw [← rpow_two]\n  exact rpow_mul_exp_neg_mul_rpow_isLittleO_exp_neg s one_lt_two hb\n\n"}
{"name":"integrableOn_rpow_mul_exp_neg_rpow","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"p s : Real\nhs : LT.lt (-1) s\nhp : LE.le 1 p\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (HPow.hPow x s) (Real.exp (Neg.neg (HPow.hPow x p)))) (Set.Ioi 0) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_rpow_mul_exp_neg_rpow {p s : ℝ} (hs : -1 < s) (hp : 1 ≤ p) :\n    IntegrableOn (fun x : ℝ => x ^ s * exp (- x ^ p)) (Ioi 0) := by\n  obtain hp | hp := le_iff_lt_or_eq.mp hp\n  · have h_exp : ∀ x, ContinuousAt (fun x => exp (- x)) x := fun x => continuousAt_neg.rexp\n    rw [← Ioc_union_Ioi_eq_Ioi zero_le_one, integrableOn_union]\n    constructor\n    · rw [← integrableOn_Icc_iff_integrableOn_Ioc]\n      refine IntegrableOn.mul_continuousOn ?_ ?_ isCompact_Icc\n      · refine (intervalIntegrable_iff_integrableOn_Icc_of_le zero_le_one).mp ?_\n        exact intervalIntegral.intervalIntegrable_rpow' hs\n      · intro x _\n        change ContinuousWithinAt ((fun x => exp (- x)) ∘ (fun x => x ^ p)) (Icc 0 1) x\n        refine ContinuousAt.comp_continuousWithinAt (h_exp _) ?_\n        exact continuousWithinAt_id.rpow_const (Or.inr (le_of_lt (lt_trans zero_lt_one hp)))\n    · have h_rpow : ∀ (x r : ℝ), x ∈ Ici 1 → ContinuousWithinAt (fun x => x ^ r) (Ici 1) x := by\n        intro _ _ hx\n        refine continuousWithinAt_id.rpow_const (Or.inl ?_)\n        exact ne_of_gt (lt_of_lt_of_le zero_lt_one hx)\n      refine integrable_of_isBigO_exp_neg (by norm_num : (0 : ℝ) < 1 / 2)\n        (ContinuousOn.mul (fun x hx => h_rpow x s hx) (fun x hx => ?_)) (IsLittleO.isBigO ?_)\n      · change ContinuousWithinAt ((fun x => exp (- x)) ∘ (fun x => x ^ p)) (Ici 1) x\n        exact ContinuousAt.comp_continuousWithinAt (h_exp _) (h_rpow x p hx)\n      · convert rpow_mul_exp_neg_mul_rpow_isLittleO_exp_neg s hp (by norm_num : (0 : ℝ) < 1) using 3\n        rw [neg_mul, one_mul]\n  · simp_rw [← hp, Real.rpow_one]\n    convert Real.GammaIntegral_convergent (by linarith : 0 < s + 1) using 2\n    rw [add_sub_cancel_right, mul_comm]\n\n"}
{"name":"integrableOn_rpow_mul_exp_neg_mul_rpow","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"p s b : Real\nhs : LT.lt (-1) s\nhp : LE.le 1 p\nhb : LT.lt 0 b\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (HPow.hPow x s) (Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x p)))) (Set.Ioi 0) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_rpow_mul_exp_neg_mul_rpow {p s b : ℝ} (hs : -1 < s) (hp : 1 ≤ p) (hb : 0 < b) :\n    IntegrableOn (fun x : ℝ => x ^ s * exp (- b * x ^ p)) (Ioi 0) := by\n  have hib : 0 < b ^ (-p⁻¹) := rpow_pos_of_pos hb _\n  suffices IntegrableOn (fun x ↦ (b ^ (-p⁻¹)) ^ s * (x ^ s * exp (-x ^ p))) (Ioi 0) by\n    rw [show 0 = b ^ (-p⁻¹) * 0 by rw [mul_zero], ← integrableOn_Ioi_comp_mul_left_iff _ _ hib]\n    refine this.congr_fun (fun _ hx => ?_) measurableSet_Ioi\n    rw [← mul_assoc, mul_rpow, mul_rpow, ← rpow_mul (z := p), neg_mul, neg_mul, inv_mul_cancel₀,\n      rpow_neg_one, mul_inv_cancel_left₀]\n    all_goals linarith [mem_Ioi.mp hx]\n  refine Integrable.const_mul ?_ _\n  rw [← IntegrableOn]\n  exact integrableOn_rpow_mul_exp_neg_rpow hs hp\n\n"}
{"name":"integrableOn_rpow_mul_exp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\nhb : LT.lt 0 b\ns : Real\nhs : LT.lt (-1) s\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (HPow.hPow x s) (Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2)))) (Set.Ioi 0) MeasureTheory.MeasureSpace.volume","decl":"theorem integrableOn_rpow_mul_exp_neg_mul_sq {b : ℝ} (hb : 0 < b) {s : ℝ} (hs : -1 < s) :\n    IntegrableOn (fun x : ℝ => x ^ s * exp (-b * x ^ 2)) (Ioi 0) := by\n  simp_rw [← rpow_two]\n  exact integrableOn_rpow_mul_exp_neg_mul_rpow hs one_le_two hb\n\n"}
{"name":"integrable_rpow_mul_exp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\nhb : LT.lt 0 b\ns : Real\nhs : LT.lt (-1) s\n⊢ MeasureTheory.Integrable (fun x => HMul.hMul (HPow.hPow x s) (Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2)))) MeasureTheory.MeasureSpace.volume","decl":"theorem integrable_rpow_mul_exp_neg_mul_sq {b : ℝ} (hb : 0 < b) {s : ℝ} (hs : -1 < s) :\n    Integrable fun x : ℝ => x ^ s * exp (-b * x ^ 2) := by\n  rw [← integrableOn_univ, ← @Iio_union_Ici _ _ (0 : ℝ), integrableOn_union,\n    integrableOn_Ici_iff_integrableOn_Ioi]\n  refine ⟨?_, integrableOn_rpow_mul_exp_neg_mul_sq hb hs⟩\n  rw [← (Measure.measurePreserving_neg (volume : Measure ℝ)).integrableOn_comp_preimage\n      (Homeomorph.neg ℝ).measurableEmbedding]\n  simp only [Function.comp_def, neg_sq, neg_preimage, neg_Iio, neg_neg, neg_zero]\n  apply Integrable.mono' (integrableOn_rpow_mul_exp_neg_mul_sq hb hs)\n  · apply Measurable.aestronglyMeasurable\n    exact (measurable_id'.neg.pow measurable_const).mul\n      ((measurable_id'.pow measurable_const).const_mul (-b)).exp\n  · have : MeasurableSet (Ioi (0 : ℝ)) := measurableSet_Ioi\n    filter_upwards [ae_restrict_mem this] with x hx\n    have h'x : 0 ≤ x := le_of_lt hx\n    rw [Real.norm_eq_abs, abs_mul, abs_of_nonneg (exp_pos _).le]\n    apply mul_le_mul_of_nonneg_right _ (exp_pos _).le\n    simpa [abs_of_nonneg h'x] using abs_rpow_le_abs_rpow (-x) s\n\n"}
{"name":"integrable_exp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\nhb : LT.lt 0 b\n⊢ MeasureTheory.Integrable (fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2))) MeasureTheory.MeasureSpace.volume","decl":"theorem integrable_exp_neg_mul_sq {b : ℝ} (hb : 0 < b) :\n    Integrable fun x : ℝ => exp (-b * x ^ 2) := by\n  simpa using integrable_rpow_mul_exp_neg_mul_sq hb (by norm_num : (-1 : ℝ) < 0)\n\n"}
{"name":"integrableOn_Ioi_exp_neg_mul_sq_iff","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\n⊢ Iff (MeasureTheory.IntegrableOn (fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2))) (Set.Ioi 0) MeasureTheory.MeasureSpace.volume) (LT.lt 0 b)","decl":"theorem integrableOn_Ioi_exp_neg_mul_sq_iff {b : ℝ} :\n    IntegrableOn (fun x : ℝ => exp (-b * x ^ 2)) (Ioi 0) ↔ 0 < b := by\n  refine ⟨fun h => ?_, fun h => (integrable_exp_neg_mul_sq h).integrableOn⟩\n  by_contra! hb\n  have : ∫⁻ _ : ℝ in Ioi 0, 1 ≤ ∫⁻ x : ℝ in Ioi 0, ‖exp (-b * x ^ 2)‖₊ := by\n    apply lintegral_mono (fun x ↦ _)\n    simp only [neg_mul, ENNReal.one_le_coe_iff, ← toNNReal_one, toNNReal_le_iff_le_coe,\n      Real.norm_of_nonneg (exp_pos _).le, coe_nnnorm, one_le_exp_iff, Right.nonneg_neg_iff]\n    exact fun x ↦ mul_nonpos_of_nonpos_of_nonneg hb (sq_nonneg x)\n  simpa using this.trans_lt h.2\n\n"}
{"name":"integrable_exp_neg_mul_sq_iff","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\n⊢ Iff (MeasureTheory.Integrable (fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2))) MeasureTheory.MeasureSpace.volume) (LT.lt 0 b)","decl":"theorem integrable_exp_neg_mul_sq_iff {b : ℝ} :\n    (Integrable fun x : ℝ => exp (-b * x ^ 2)) ↔ 0 < b :=\n  ⟨fun h => integrableOn_Ioi_exp_neg_mul_sq_iff.mp h.integrableOn, integrable_exp_neg_mul_sq⟩\n\n"}
{"name":"integrable_mul_exp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\nhb : LT.lt 0 b\n⊢ MeasureTheory.Integrable (fun x => HMul.hMul x (Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2)))) MeasureTheory.MeasureSpace.volume","decl":"theorem integrable_mul_exp_neg_mul_sq {b : ℝ} (hb : 0 < b) :\n    Integrable fun x : ℝ => x * exp (-b * x ^ 2) := by\n  simpa using integrable_rpow_mul_exp_neg_mul_sq hb (by norm_num : (-1 : ℝ) < 1)\n\n"}
{"name":"norm_cexp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nx : Real\n⊢ Eq (Norm.norm (Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑x) 2)))) (Real.exp (HMul.hMul (Neg.neg b.re) (HPow.hPow x 2)))","decl":"theorem norm_cexp_neg_mul_sq (b : ℂ) (x : ℝ) :\n    ‖Complex.exp (-b * (x : ℂ) ^ 2)‖ = exp (-b.re * x ^ 2) := by\n  rw [Complex.norm_eq_abs, Complex.abs_exp, ← ofReal_pow, mul_comm (-b) _, re_ofReal_mul, neg_re,\n    mul_comm]\n\n"}
{"name":"integrable_cexp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ MeasureTheory.Integrable (fun x => Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑x) 2))) MeasureTheory.MeasureSpace.volume","decl":"theorem integrable_cexp_neg_mul_sq {b : ℂ} (hb : 0 < b.re) :\n    Integrable fun x : ℝ => cexp (-b * (x : ℂ) ^ 2) := by\n  refine ⟨(Complex.continuous_exp.comp\n    (continuous_const.mul (continuous_ofReal.pow 2))).aestronglyMeasurable, ?_⟩\n  rw [← hasFiniteIntegral_norm_iff]\n  simp_rw [norm_cexp_neg_mul_sq]\n  exact (integrable_exp_neg_mul_sq hb).2\n\n"}
{"name":"integrable_mul_cexp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ MeasureTheory.Integrable (fun x => HMul.hMul (↑x) (Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑x) 2)))) MeasureTheory.MeasureSpace.volume","decl":"theorem integrable_mul_cexp_neg_mul_sq {b : ℂ} (hb : 0 < b.re) :\n    Integrable fun x : ℝ => ↑x * cexp (-b * (x : ℂ) ^ 2) := by\n  refine ⟨(continuous_ofReal.mul (Complex.continuous_exp.comp ?_)).aestronglyMeasurable, ?_⟩\n  · exact continuous_const.mul (continuous_ofReal.pow 2)\n  have := (integrable_mul_exp_neg_mul_sq hb).hasFiniteIntegral\n  rw [← hasFiniteIntegral_norm_iff] at this ⊢\n  convert this\n  rw [norm_mul, norm_mul, norm_cexp_neg_mul_sq b, Complex.norm_eq_abs, abs_ofReal, Real.norm_eq_abs,\n    norm_of_nonneg (exp_pos _).le]\n\n"}
{"name":"integral_mul_cexp_neg_mul_sq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 0)) fun r => HMul.hMul (↑r) (Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑r) 2)))) (Inv.inv (HMul.hMul 2 b))","decl":"theorem integral_mul_cexp_neg_mul_sq {b : ℂ} (hb : 0 < b.re) :\n    ∫ r : ℝ in Ioi 0, (r : ℂ) * cexp (-b * (r : ℂ) ^ 2) = (2 * b)⁻¹ := by\n  have hb' : b ≠ 0 := by contrapose! hb; rw [hb, zero_re]\n  have A : ∀ x : ℂ, HasDerivAt (fun x => -(2 * b)⁻¹ * cexp (-b * x ^ 2))\n    (x * cexp (-b * x ^ 2)) x := by\n    intro x\n    convert ((hasDerivAt_pow 2 x).const_mul (-b)).cexp.const_mul (-(2 * b)⁻¹) using 1\n    field_simp [hb']\n    ring\n  have B : Tendsto (fun y : ℝ ↦ -(2 * b)⁻¹ * cexp (-b * (y : ℂ) ^ 2))\n    atTop (𝓝 (-(2 * b)⁻¹ * 0)) := by\n    refine Tendsto.const_mul _ (tendsto_zero_iff_norm_tendsto_zero.mpr ?_)\n    simp_rw [norm_cexp_neg_mul_sq b]\n    exact tendsto_exp_atBot.comp\n      ((tendsto_pow_atTop two_ne_zero).const_mul_atTop_of_neg (neg_lt_zero.2 hb))\n  convert integral_Ioi_of_hasDerivAt_of_tendsto' (fun x _ => (A ↑x).comp_ofReal)\n    (integrable_mul_cexp_neg_mul_sq hb).integrableOn B using 1\n  simp only [mul_zero, ofReal_zero, zero_pow, Ne, Nat.one_ne_zero,\n    not_false_iff, Complex.exp_zero, mul_one, sub_neg_eq_add, zero_add, reduceCtorEq]\n\n"}
{"name":"integral_gaussian_sq_complex","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ Eq (HPow.hPow (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun x => Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑x) 2))) 2) (HDiv.hDiv (↑Real.pi) b)","decl":"/-- The *square* of the Gaussian integral `∫ x:ℝ, exp (-b * x^2)` is equal to `π / b`. -/\ntheorem integral_gaussian_sq_complex {b : ℂ} (hb : 0 < b.re) :\n    (∫ x : ℝ, cexp (-b * (x : ℂ) ^ 2)) ^ 2 = π / b := by\n  /- We compute `(∫ exp (-b x^2))^2` as an integral over `ℝ^2`, and then make a polar change\n  of coordinates. We are left with `∫ r * exp (-b r^2)`, which has been computed in\n  `integral_mul_cexp_neg_mul_sq` using the fact that this function has an obvious primitive. -/\n  calc\n    (∫ x : ℝ, cexp (-b * (x : ℂ) ^ 2)) ^ 2 =\n        ∫ p : ℝ × ℝ, cexp (-b * (p.1 : ℂ) ^ 2) * cexp (-b * (p.2 : ℂ) ^ 2) := by\n      rw [pow_two, ← integral_prod_mul]; rfl\n    _ = ∫ p : ℝ × ℝ, cexp (-b * ((p.1 : ℂ)^ 2 + (p.2 : ℂ) ^ 2)) := by\n      congr\n      ext1 p\n      rw [← Complex.exp_add, mul_add]\n    _ = ∫ p in polarCoord.target, p.1 •\n        cexp (-b * ((p.1 * Complex.cos p.2) ^ 2 + (p.1 * Complex.sin p.2) ^ 2)) := by\n      rw [← integral_comp_polarCoord_symm]\n      simp only [polarCoord_symm_apply, ofReal_mul, ofReal_cos, ofReal_sin]\n    _ = (∫ r in Ioi (0 : ℝ), r * cexp (-b * (r : ℂ) ^ 2)) * ∫ θ in Ioo (-π) π, 1 := by\n      rw [← setIntegral_prod_mul]\n      congr with p : 1\n      rw [mul_one]\n      congr\n      conv_rhs => rw [← one_mul ((p.1 : ℂ) ^ 2), ← sin_sq_add_cos_sq (p.2 : ℂ)]\n      ring\n    _ = ↑π / b := by\n      have : 0 ≤ π + π := by positivity\n      simp only [integral_const, Measure.restrict_apply', measurableSet_Ioo, univ_inter, volume_Ioo,\n        sub_neg_eq_add, ENNReal.toReal_ofReal, this]\n      rw [← two_mul, real_smul, mul_one, ofReal_mul, ofReal_ofNat, integral_mul_cexp_neg_mul_sq hb]\n      field_simp [(by contrapose! hb; rw [hb, zero_re] : b ≠ 0)]\n      ring\n\n"}
{"name":"integral_gaussian","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\n⊢ Eq (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2))) (HDiv.hDiv Real.pi b).sqrt","decl":"theorem integral_gaussian (b : ℝ) : ∫ x : ℝ, exp (-b * x ^ 2) = √(π / b) := by\n  -- First we deal with the crazy case where `b ≤ 0`: then both sides vanish.\n  rcases le_or_lt b 0 with (hb | hb)\n  · rw [integral_undef, sqrt_eq_zero_of_nonpos]\n    · exact div_nonpos_of_nonneg_of_nonpos pi_pos.le hb\n    · simpa only [not_lt, integrable_exp_neg_mul_sq_iff] using hb\n  -- Assume now `b > 0`. Then both sides are non-negative and their squares agree.\n  refine (sq_eq_sq₀ (by positivity) (by positivity)).1 ?_\n  rw [← ofReal_inj, ofReal_pow, ← coe_algebraMap, RCLike.algebraMap_eq_ofReal, ← integral_ofReal,\n    sq_sqrt (div_pos pi_pos hb).le, ← RCLike.algebraMap_eq_ofReal, coe_algebraMap, ofReal_div]\n  convert integral_gaussian_sq_complex (by rwa [ofReal_re] : 0 < (b : ℂ).re) with _ x\n  rw [ofReal_exp, ofReal_mul, ofReal_pow, ofReal_neg]\n\n"}
{"name":"continuousAt_gaussian_integral","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ ContinuousAt (fun c => MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun x => Complex.exp (HMul.hMul (Neg.neg c) (HPow.hPow (↑x) 2))) b","decl":"theorem continuousAt_gaussian_integral (b : ℂ) (hb : 0 < re b) :\n    ContinuousAt (fun c : ℂ => ∫ x : ℝ, cexp (-c * (x : ℂ) ^ 2)) b := by\n  let f : ℂ → ℝ → ℂ := fun (c : ℂ) (x : ℝ) => cexp (-c * (x : ℂ) ^ 2)\n  obtain ⟨d, hd, hd'⟩ := exists_between hb\n  have f_meas : ∀ c : ℂ, AEStronglyMeasurable (f c) volume := fun c => by\n    apply Continuous.aestronglyMeasurable\n    exact Complex.continuous_exp.comp (continuous_const.mul (continuous_ofReal.pow 2))\n  have f_cts : ∀ x : ℝ, ContinuousAt (fun c => f c x) b := fun x =>\n    (Complex.continuous_exp.comp (continuous_id'.neg.mul continuous_const)).continuousAt\n  have f_le_bd : ∀ᶠ c : ℂ in 𝓝 b, ∀ᵐ x : ℝ, ‖f c x‖ ≤ exp (-d * x ^ 2) := by\n    refine eventually_of_mem ((continuous_re.isOpen_preimage _ isOpen_Ioi).mem_nhds hd') ?_\n    intro c hc; filter_upwards with x\n    rw [norm_cexp_neg_mul_sq]\n    gcongr\n    exact le_of_lt hc\n  exact\n    continuousAt_of_dominated (Eventually.of_forall f_meas) f_le_bd (integrable_exp_neg_mul_sq hd)\n      (ae_of_all _ f_cts)\n\n"}
{"name":"integral_gaussian_complex","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ Eq (MeasureTheory.integral MeasureTheory.MeasureSpace.volume fun x => Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑x) 2))) (HPow.hPow (HDiv.hDiv (↑Real.pi) b) (1 / 2))","decl":"theorem integral_gaussian_complex {b : ℂ} (hb : 0 < re b) :\n    ∫ x : ℝ, cexp (-b * (x : ℂ) ^ 2) = (π / b) ^ (1 / 2 : ℂ) := by\n  have nv : ∀ {b : ℂ}, 0 < re b → b ≠ 0 := by intro b hb; contrapose! hb; rw [hb]; simp\n  apply\n    (convex_halfSpace_re_gt 0).isPreconnected.eq_of_sq_eq ?_ ?_ (fun c hc => ?_) (fun {c} hc => ?_)\n      (by simp : 0 < re (1 : ℂ)) ?_ hb\n  · -- integral is continuous\n    exact continuousOn_of_forall_continuousAt continuousAt_gaussian_integral\n  · -- `(π / b) ^ (1 / 2 : ℂ)` is continuous\n    refine\n      continuousOn_of_forall_continuousAt fun b hb =>\n        (continuousAt_cpow_const (Or.inl ?_)).comp (continuousAt_const.div continuousAt_id (nv hb))\n    rw [div_re, ofReal_im, ofReal_re, zero_mul, zero_div, add_zero]\n    exact div_pos (mul_pos pi_pos hb) (normSq_pos.mpr (nv hb))\n  · -- equality at 1\n    have : ∀ x : ℝ, cexp (-(1 : ℂ) * (x : ℂ) ^ 2) = exp (-(1 : ℝ) * x ^ 2) := by\n      intro x\n      simp only [ofReal_exp, neg_mul, one_mul, ofReal_neg, ofReal_pow]\n    simp_rw [this, ← coe_algebraMap, RCLike.algebraMap_eq_ofReal, integral_ofReal,\n      ← RCLike.algebraMap_eq_ofReal, coe_algebraMap]\n    conv_rhs =>\n      congr\n      · rw [← ofReal_one, ← ofReal_div]\n      · rw [← ofReal_one, ← ofReal_ofNat, ← ofReal_div]\n    rw [← ofReal_cpow, ofReal_inj]\n    · convert integral_gaussian (1 : ℝ) using 1\n      rw [sqrt_eq_rpow]\n    · rw [div_one]; exact pi_pos.le\n  · -- squares of both sides agree\n    dsimp only [Pi.pow_apply]\n    rw [integral_gaussian_sq_complex hc, sq]\n    conv_lhs => rw [← cpow_one (↑π / c)]\n    rw [← cpow_add _ _ (div_ne_zero (ofReal_ne_zero.mpr pi_ne_zero) (nv hc))]\n    norm_num\n  · -- RHS doesn't vanish\n    rw [Ne, cpow_eq_zero_iff, not_and_or]\n    exact Or.inl (div_ne_zero (ofReal_ne_zero.mpr pi_ne_zero) (nv hc))\n\n-- The Gaussian integral on the half-line, `∫ x in Ioi 0, exp (-b * x^2)`, for complex `b`.\n"}
{"name":"integral_gaussian_complex_Ioi","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Complex\nhb : LT.lt 0 b.re\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 0)) fun x => Complex.exp (HMul.hMul (Neg.neg b) (HPow.hPow (↑x) 2))) (HDiv.hDiv (HPow.hPow (HDiv.hDiv (↑Real.pi) b) (1 / 2)) 2)","decl":"theorem integral_gaussian_complex_Ioi {b : ℂ} (hb : 0 < re b) :\n    ∫ x : ℝ in Ioi 0, cexp (-b * (x : ℂ) ^ 2) = (π / b) ^ (1 / 2 : ℂ) / 2 := by\n  have full_integral := integral_gaussian_complex hb\n  have : MeasurableSet (Ioi (0 : ℝ)) := measurableSet_Ioi\n  rw [← integral_add_compl this (integrable_cexp_neg_mul_sq hb), compl_Ioi] at full_integral\n  suffices ∫ x : ℝ in Iic 0, cexp (-b * (x : ℂ) ^ 2) = ∫ x : ℝ in Ioi 0, cexp (-b * (x : ℂ) ^ 2) by\n    rw [this, ← mul_two] at full_integral\n    rwa [eq_div_iff]; exact two_ne_zero\n  have : ∀ c : ℝ, ∫ x in (0 : ℝ)..c, cexp (-b * (x : ℂ) ^ 2) =\n      ∫ x in -c..0, cexp (-b * (x : ℂ) ^ 2) := by\n    intro c\n    have := intervalIntegral.integral_comp_sub_left (a := 0) (b := c)\n      (fun x => cexp (-b * (x : ℂ) ^ 2)) 0\n    simpa [zero_sub, neg_sq, neg_zero] using this\n  have t1 :=\n    intervalIntegral_tendsto_integral_Ioi 0 (integrable_cexp_neg_mul_sq hb).integrableOn tendsto_id\n  have t2 :\n    Tendsto (fun c : ℝ => ∫ x : ℝ in (0 : ℝ)..c, cexp (-b * (x : ℂ) ^ 2)) atTop\n      (𝓝 (∫ x : ℝ in Iic 0, cexp (-b * (x : ℂ) ^ 2))) := by\n    simp_rw [this]\n    refine intervalIntegral_tendsto_integral_Iic _ ?_ tendsto_neg_atTop_atBot\n    apply (integrable_cexp_neg_mul_sq hb).integrableOn\n  exact tendsto_nhds_unique t2 t1\n\n-- The Gaussian integral on the half-line, `∫ x in Ioi 0, exp (-b * x^2)`, for real `b`.\n"}
{"name":"integral_gaussian_Ioi","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"b : Real\n⊢ Eq (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Ioi 0)) fun x => Real.exp (HMul.hMul (Neg.neg b) (HPow.hPow x 2))) (HDiv.hDiv (HDiv.hDiv Real.pi b).sqrt 2)","decl":"theorem integral_gaussian_Ioi (b : ℝ) :\n    ∫ x in Ioi (0 : ℝ), exp (-b * x ^ 2) = √(π / b) / 2 := by\n  rcases le_or_lt b 0 with (hb | hb)\n  · rw [integral_undef, sqrt_eq_zero_of_nonpos, zero_div]\n    · exact div_nonpos_of_nonneg_of_nonpos pi_pos.le hb\n    · rwa [← IntegrableOn, integrableOn_Ioi_exp_neg_mul_sq_iff, not_lt]\n  rw [← RCLike.ofReal_inj (K := ℂ), ← integral_ofReal, ← RCLike.algebraMap_eq_ofReal,\n    coe_algebraMap]\n  convert integral_gaussian_complex_Ioi (by rwa [ofReal_re] : 0 < (b : ℂ).re)\n  · simp\n  · rw [sqrt_eq_rpow, ← ofReal_div, ofReal_div, ofReal_cpow]\n    · norm_num\n    · exact (div_pos pi_pos hb).le\n\n"}
{"name":"Real.Gamma_one_half_eq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"⊢ Eq (Real.Gamma (1 / 2)) Real.pi.sqrt","decl":"/-- The special-value formula `Γ(1/2) = √π`, which is equivalent to the Gaussian integral. -/\ntheorem Real.Gamma_one_half_eq : Real.Gamma (1 / 2) = √π := by\n  rw [Gamma_eq_integral one_half_pos, ← integral_comp_rpow_Ioi_of_pos zero_lt_two]\n  convert congr_arg (fun x : ℝ => 2 * x) (integral_gaussian_Ioi 1) using 1\n  · rw [← integral_mul_left]\n    refine setIntegral_congr_fun measurableSet_Ioi fun x hx => ?_\n    dsimp only\n    have : (x ^ (2 : ℝ)) ^ (1 / (2 : ℝ) - 1) = x⁻¹ := by\n      rw [← rpow_mul (le_of_lt hx)]\n      norm_num\n      rw [rpow_neg (le_of_lt hx), rpow_one]\n    rw [smul_eq_mul, this]\n    field_simp [(ne_of_lt (show 0 < x from hx)).symm]\n    norm_num; ring\n  · rw [div_one, ← mul_div_assoc, mul_comm, mul_div_cancel_right₀ _ (two_ne_zero' ℝ)]\n\n"}
{"name":"Complex.Gamma_one_half_eq","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"⊢ Eq (Complex.Gamma (1 / 2)) (HPow.hPow (↑Real.pi) (1 / 2))","decl":"/-- The special-value formula `Γ(1/2) = √π`, which is equivalent to the Gaussian integral. -/\ntheorem Complex.Gamma_one_half_eq : Complex.Gamma (1 / 2) = (π : ℂ) ^ (1 / 2 : ℂ) := by\n  convert congr_arg ((↑) : ℝ → ℂ) Real.Gamma_one_half_eq\n  · simpa only [one_div, ofReal_inv, ofReal_ofNat] using Gamma_ofReal (1 / 2)\n  · rw [sqrt_eq_rpow, ofReal_cpow pi_pos.le, ofReal_div, ofReal_ofNat, ofReal_one]\n\n"}
{"name":"Real.Gamma_nat_add_one_add_half","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"k : Nat\n⊢ Eq (Real.Gamma (HAdd.hAdd (HAdd.hAdd (↑k) 1) (1 / 2))) (HDiv.hDiv (HMul.hMul (↑(HAdd.hAdd (HMul.hMul 2 k) 1).doubleFactorial) Real.pi.sqrt) (HPow.hPow 2 (HAdd.hAdd k 1)))","decl":"open scoped Nat in\n/-- The special-value formula `Γ(k + 1 + 1/2) = (2 * k + 1)‼ * √π / (2 ^ (k + 1))` for half-integer\nvalues of the gamma function in terms of `Nat.doubleFactorial`. -/\nlemma Real.Gamma_nat_add_one_add_half (k : ℕ) :\n    Gamma (k + 1 + 1 / 2) = (2 * k + 1 : ℕ)‼ * √π / (2 ^ (k + 1)) := by\n  induction k with\n  | zero => simp [-one_div, add_comm (1 : ℝ), Gamma_add_one, Gamma_one_half_eq]; ring\n  | succ k ih =>\n    rw [add_right_comm, Gamma_add_one (by positivity), Nat.cast_add, Nat.cast_one, ih, Nat.mul_add]\n    field_simp\n    ring\n\n"}
{"name":"Real.Gamma_nat_add_half","module":"Mathlib.Analysis.SpecialFunctions.Gaussian.GaussianIntegral","initialProofState":"k : Nat\n⊢ Eq (Real.Gamma (HAdd.hAdd (↑k) (1 / 2))) (HDiv.hDiv (HMul.hMul (↑(HSub.hSub (HMul.hMul 2 k) 1).doubleFactorial) Real.pi.sqrt) (HPow.hPow 2 k))","decl":"open scoped Nat in\n/-- The special-value formula `Γ(k + 1/2) = (2 * k - 1)‼ * √π / (2 ^ k))` for half-integer\nvalues of the gamma function in terms of `Nat.doubleFactorial`. -/\nlemma Real.Gamma_nat_add_half (k : ℕ) :\n    Gamma (k + 1 / 2) = (2 * k - 1 : ℕ)‼ * √π / (2 ^ k) := by\n  cases k with\n  | zero => simp [- one_div, Gamma_one_half_eq]\n  | succ k => simpa [-one_div, mul_add] using Gamma_nat_add_one_add_half k\n"}
