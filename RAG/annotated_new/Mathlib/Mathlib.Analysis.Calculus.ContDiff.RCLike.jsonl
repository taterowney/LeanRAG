{"name":"HasFTaylorSeriesUpToOn.hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nn : WithTop ENat\ns : Set E'\nf : E' → F'\nx : E'\np : E' → FormalMultilinearSeries 𝕂 E' F'\nhf : HasFTaylorSeriesUpToOn n f p s\nhn : LE.le 1 n\nhs : Membership.mem (nhds x) s\n⊢ HasStrictFDerivAt f ((continuousMultilinearCurryFin1 𝕂 E' F') (p x 1)) x","decl":"/-- If a function has a Taylor series at order at least 1, then at points in the interior of the\n    domain of definition, the term of order 1 of this series is a strict derivative of `f`. -/\ntheorem HasFTaylorSeriesUpToOn.hasStrictFDerivAt {n : WithTop ℕ∞}\n    {s : Set E'} {f : E' → F'} {x : E'}\n    {p : E' → FormalMultilinearSeries 𝕂 E' F'} (hf : HasFTaylorSeriesUpToOn n f p s) (hn : 1 ≤ n)\n    (hs : s ∈ 𝓝 x) : HasStrictFDerivAt f ((continuousMultilinearCurryFin1 𝕂 E' F') (p x 1)) x :=\n  hasStrictFDerivAt_of_hasFDerivAt_of_continuousAt (hf.eventually_hasFDerivAt hn hs) <|\n    (continuousMultilinearCurryFin1 𝕂 E' F').continuousAt.comp <| (hf.cont 1 hn).continuousAt hs\n\n"}
{"name":"ContDiffAt.hasStrictFDerivAt'","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nf' : ContinuousLinearMap (RingHom.id 𝕂) E' F'\nx : E'\nhf : ContDiffAt 𝕂 n f x\nhf' : HasFDerivAt f f' x\nhn : LE.le 1 n\n⊢ HasStrictFDerivAt f f' x","decl":"/-- If a function is `C^n` with `1 ≤ n` around a point, and its derivative at that point is given to\nus as `f'`, then `f'` is also a strict derivative. -/\ntheorem ContDiffAt.hasStrictFDerivAt' {f : E' → F'} {f' : E' →L[𝕂] F'} {x : E'}\n    (hf : ContDiffAt 𝕂 n f x) (hf' : HasFDerivAt f f' x) (hn : 1 ≤ n) :\n    HasStrictFDerivAt f f' x := by\n  rcases hf.of_le hn 1 le_rfl with ⟨u, H, p, hp⟩\n  simp only [nhdsWithin_univ, mem_univ, insert_eq_of_mem] at H\n  have := hp.hasStrictFDerivAt le_rfl H\n  rwa [hf'.unique this.hasFDerivAt]\n\n"}
{"name":"ContDiffAt.hasStrictDerivAt'","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝² : RCLike 𝕂\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : 𝕂 → F'\nf' : F'\nx : 𝕂\nhf : ContDiffAt 𝕂 n f x\nhf' : HasDerivAt f f' x\nhn : LE.le 1 n\n⊢ HasStrictDerivAt f f' x","decl":"/-- If a function is `C^n` with `1 ≤ n` around a point, and its derivative at that point is given to\nus as `f'`, then `f'` is also a strict derivative. -/\ntheorem ContDiffAt.hasStrictDerivAt' {f : 𝕂 → F'} {f' : F'} {x : 𝕂} (hf : ContDiffAt 𝕂 n f x)\n    (hf' : HasDerivAt f f' x) (hn : 1 ≤ n) : HasStrictDerivAt f f' x :=\n  hf.hasStrictFDerivAt' hf' hn\n\n"}
{"name":"ContDiffAt.hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nx : E'\nhf : ContDiffAt 𝕂 n f x\nhn : LE.le 1 n\n⊢ HasStrictFDerivAt f (fderiv 𝕂 f x) x","decl":"/-- If a function is `C^n` with `1 ≤ n` around a point, then the derivative of `f` at this point\nis also a strict derivative. -/\ntheorem ContDiffAt.hasStrictFDerivAt {f : E' → F'} {x : E'} (hf : ContDiffAt 𝕂 n f x) (hn : 1 ≤ n) :\n    HasStrictFDerivAt f (fderiv 𝕂 f x) x :=\n  hf.hasStrictFDerivAt' (hf.differentiableAt hn).hasFDerivAt hn\n\n"}
{"name":"ContDiffAt.hasStrictDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝² : RCLike 𝕂\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : 𝕂 → F'\nx : 𝕂\nhf : ContDiffAt 𝕂 n f x\nhn : LE.le 1 n\n⊢ HasStrictDerivAt f (deriv f x) x","decl":"/-- If a function is `C^n` with `1 ≤ n` around a point, then the derivative of `f` at this point\nis also a strict derivative. -/\ntheorem ContDiffAt.hasStrictDerivAt {f : 𝕂 → F'} {x : 𝕂} (hf : ContDiffAt 𝕂 n f x) (hn : 1 ≤ n) :\n    HasStrictDerivAt f (deriv f x) x :=\n  (hf.hasStrictFDerivAt hn).hasStrictDerivAt\n\n"}
{"name":"ContDiff.hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nx : E'\nhf : ContDiff 𝕂 n f\nhn : LE.le 1 n\n⊢ HasStrictFDerivAt f (fderiv 𝕂 f x) x","decl":"/-- If a function is `C^n` with `1 ≤ n`, then the derivative of `f` is also a strict derivative. -/\ntheorem ContDiff.hasStrictFDerivAt {f : E' → F'} {x : E'} (hf : ContDiff 𝕂 n f) (hn : 1 ≤ n) :\n    HasStrictFDerivAt f (fderiv 𝕂 f x) x :=\n  hf.contDiffAt.hasStrictFDerivAt hn\n\n"}
{"name":"ContDiff.hasStrictDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝² : RCLike 𝕂\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : 𝕂 → F'\nx : 𝕂\nhf : ContDiff 𝕂 n f\nhn : LE.le 1 n\n⊢ HasStrictDerivAt f (deriv f x) x","decl":"/-- If a function is `C^n` with `1 ≤ n`, then the derivative of `f` is also a strict derivative. -/\ntheorem ContDiff.hasStrictDerivAt {f : 𝕂 → F'} {x : 𝕂} (hf : ContDiff 𝕂 n f) (hn : 1 ≤ n) :\n    HasStrictDerivAt f (deriv f x) x :=\n  hf.contDiffAt.hasStrictDerivAt hn\n\n"}
{"name":"HasFTaylorSeriesUpToOn.exists_lipschitzOnWith_of_nnnorm_lt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nf : E → F\np : E → FormalMultilinearSeries Real E F\ns : Set E\nx : E\nhf : HasFTaylorSeriesUpToOn 1 f p (Insert.insert x s)\nhs : Convex Real s\nK : NNReal\nhK : LT.lt (NNNorm.nnnorm (p x 1)) K\n⊢ Exists fun t => And (Membership.mem (nhdsWithin x s) t) (LipschitzOnWith K f t)","decl":"/-- If `f` has a formal Taylor series `p` up to order `1` on `{x} ∪ s`, where `s` is a convex set,\nand `‖p x 1‖₊ < K`, then `f` is `K`-Lipschitz in a neighborhood of `x` within `s`. -/\ntheorem HasFTaylorSeriesUpToOn.exists_lipschitzOnWith_of_nnnorm_lt {E F : Type*}\n    [NormedAddCommGroup E] [NormedSpace ℝ E] [NormedAddCommGroup F] [NormedSpace ℝ F] {f : E → F}\n    {p : E → FormalMultilinearSeries ℝ E F} {s : Set E} {x : E}\n    (hf : HasFTaylorSeriesUpToOn 1 f p (insert x s)) (hs : Convex ℝ s) (K : ℝ≥0)\n    (hK : ‖p x 1‖₊ < K) : ∃ t ∈ 𝓝[s] x, LipschitzOnWith K f t := by\n  set f' := fun y => continuousMultilinearCurryFin1 ℝ E F (p y 1)\n  have hder : ∀ y ∈ s, HasFDerivWithinAt f (f' y) s y := fun y hy =>\n    (hf.hasFDerivWithinAt le_rfl (subset_insert x s hy)).mono (subset_insert x s)\n  have hcont : ContinuousWithinAt f' s x :=\n    (continuousMultilinearCurryFin1 ℝ E F).continuousAt.comp_continuousWithinAt\n      ((hf.cont _ le_rfl _ (mem_insert _ _)).mono (subset_insert x s))\n  replace hK : ‖f' x‖₊ < K := by simpa only [f', LinearIsometryEquiv.nnnorm_map]\n  exact\n    hs.exists_nhdsWithin_lipschitzOnWith_of_hasFDerivWithinAt_of_nnnorm_lt\n      (eventually_nhdsWithin_iff.2 <| Eventually.of_forall hder) hcont K hK\n\n"}
{"name":"HasFTaylorSeriesUpToOn.exists_lipschitzOnWith","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nf : E → F\np : E → FormalMultilinearSeries Real E F\ns : Set E\nx : E\nhf : HasFTaylorSeriesUpToOn 1 f p (Insert.insert x s)\nhs : Convex Real s\n⊢ Exists fun K => Exists fun t => And (Membership.mem (nhdsWithin x s) t) (LipschitzOnWith K f t)","decl":"/-- If `f` has a formal Taylor series `p` up to order `1` on `{x} ∪ s`, where `s` is a convex set,\nthen `f` is Lipschitz in a neighborhood of `x` within `s`. -/\ntheorem HasFTaylorSeriesUpToOn.exists_lipschitzOnWith {E F : Type*} [NormedAddCommGroup E]\n    [NormedSpace ℝ E] [NormedAddCommGroup F] [NormedSpace ℝ F] {f : E → F}\n    {p : E → FormalMultilinearSeries ℝ E F} {s : Set E} {x : E}\n    (hf : HasFTaylorSeriesUpToOn 1 f p (insert x s)) (hs : Convex ℝ s) :\n    ∃ K, ∃ t ∈ 𝓝[s] x, LipschitzOnWith K f t :=\n  (exists_gt _).imp <| hf.exists_lipschitzOnWith_of_nnnorm_lt hs\n\n"}
{"name":"ContDiffWithinAt.exists_lipschitzOnWith","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"E : Type u_4\nF : Type u_5\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nf : E → F\ns : Set E\nx : E\nhf : ContDiffWithinAt Real 1 f s x\nhs : Convex Real s\n⊢ Exists fun K => Exists fun t => And (Membership.mem (nhdsWithin x s) t) (LipschitzOnWith K f t)","decl":"/-- If `f` is `C^1` within a convex set `s` at `x`, then it is Lipschitz on a neighborhood of `x`\nwithin `s`. -/\ntheorem ContDiffWithinAt.exists_lipschitzOnWith {E F : Type*} [NormedAddCommGroup E]\n    [NormedSpace ℝ E] [NormedAddCommGroup F] [NormedSpace ℝ F] {f : E → F} {s : Set E} {x : E}\n    (hf : ContDiffWithinAt ℝ 1 f s x) (hs : Convex ℝ s) :\n    ∃ K : ℝ≥0, ∃ t ∈ 𝓝[s] x, LipschitzOnWith K f t := by\n  rcases hf 1 le_rfl with ⟨t, hst, p, hp⟩\n  rcases Metric.mem_nhdsWithin_iff.mp hst with ⟨ε, ε0, hε⟩\n  replace hp : HasFTaylorSeriesUpToOn 1 f p (Metric.ball x ε ∩ insert x s) := hp.mono hε\n  clear hst hε t\n  rw [← insert_eq_of_mem (Metric.mem_ball_self ε0), ← insert_inter_distrib] at hp\n  rcases hp.exists_lipschitzOnWith ((convex_ball _ _).inter hs) with ⟨K, t, hst, hft⟩\n  rw [inter_comm, ← nhdsWithin_restrict' _ (Metric.ball_mem_nhds _ ε0)] at hst\n  exact ⟨K, t, hst, hft⟩\n\n"}
{"name":"ContDiffAt.exists_lipschitzOnWith_of_nnnorm_lt","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nx : E'\nhf : ContDiffAt 𝕂 1 f x\nK : NNReal\nhK : LT.lt (NNNorm.nnnorm (fderiv 𝕂 f x)) K\n⊢ Exists fun t => And (Membership.mem (nhds x) t) (LipschitzOnWith K f t)","decl":"/-- If `f` is `C^1` at `x` and `K > ‖fderiv 𝕂 f x‖`, then `f` is `K`-Lipschitz in a neighborhood of\n`x`. -/\ntheorem ContDiffAt.exists_lipschitzOnWith_of_nnnorm_lt {f : E' → F'} {x : E'}\n    (hf : ContDiffAt 𝕂 1 f x) (K : ℝ≥0) (hK : ‖fderiv 𝕂 f x‖₊ < K) :\n    ∃ t ∈ 𝓝 x, LipschitzOnWith K f t :=\n  (hf.hasStrictFDerivAt le_rfl).exists_lipschitzOnWith_of_nnnorm_lt K hK\n\n"}
{"name":"ContDiffAt.exists_lipschitzOnWith","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nx : E'\nhf : ContDiffAt 𝕂 1 f x\n⊢ Exists fun K => Exists fun t => And (Membership.mem (nhds x) t) (LipschitzOnWith K f t)","decl":"/-- If `f` is `C^1` at `x`, then `f` is Lipschitz in a neighborhood of `x`. -/\ntheorem ContDiffAt.exists_lipschitzOnWith {f : E' → F'} {x : E'} (hf : ContDiffAt 𝕂 1 f x) :\n    ∃ K, ∃ t ∈ 𝓝 x, LipschitzOnWith K f t :=\n  (hf.hasStrictFDerivAt le_rfl).exists_lipschitzOnWith\n\n"}
{"name":"ContDiff.locallyLipschitz","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nhf : ContDiff 𝕂 1 f\n⊢ LocallyLipschitz f","decl":"/-- If `f` is `C^1`, it is locally Lipschitz. -/\nlemma ContDiff.locallyLipschitz {f : E' → F'} (hf : ContDiff 𝕂 1 f) : LocallyLipschitz f := by\n  intro x\n  rcases hf.contDiffAt.exists_lipschitzOnWith with ⟨K, t, ht, hf⟩\n  use K, t\n\n"}
{"name":"ContDiff.lipschitzWith_of_hasCompactSupport","module":"Mathlib.Analysis.Calculus.ContDiff.RCLike","initialProofState":"n : WithTop ENat\n𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nE' : Type u_2\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕂 E'\nF' : Type u_3\ninst✝¹ : NormedAddCommGroup F'\ninst✝ : NormedSpace 𝕂 F'\nf : E' → F'\nhf : HasCompactSupport f\nh'f : ContDiff 𝕂 n f\nhn : LE.le 1 n\n⊢ Exists fun C => LipschitzWith C f","decl":"/-- A `C^1` function with compact support is Lipschitz. -/\ntheorem ContDiff.lipschitzWith_of_hasCompactSupport {f : E' → F'}\n    (hf : HasCompactSupport f) (h'f : ContDiff 𝕂 n f) (hn : 1 ≤ n) :\n    ∃ C, LipschitzWith C f := by\n  obtain ⟨C, hC⟩ := (hf.fderiv 𝕂).exists_bound_of_continuous (h'f.continuous_fderiv hn)\n  refine ⟨⟨max C 0, le_max_right _ _⟩, ?_⟩\n  apply lipschitzWith_of_nnnorm_fderiv_le (h'f.differentiable hn) (fun x ↦ ?_)\n  simp [← NNReal.coe_le_coe, hC x]\n\n"}
