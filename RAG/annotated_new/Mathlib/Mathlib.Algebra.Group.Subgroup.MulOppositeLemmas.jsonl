{"name":"AddSubgroup.op_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ Eq Bot.bot.op Bot.bot","decl":"@[to_additive (attr := simp)]\ntheorem op_bot : (⊥ : Subgroup G).op = ⊥ := opEquiv.map_bot\n\n"}
{"name":"Subgroup.op_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Eq Bot.bot.op Bot.bot","decl":"@[to_additive (attr := simp)]\ntheorem op_bot : (⊥ : Subgroup G).op = ⊥ := opEquiv.map_bot\n\n"}
{"name":"AddSubgroup.op_eq_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : AddSubgroup G\n⊢ Iff (Eq S.op Bot.bot) (Eq S Bot.bot)","decl":"@[to_additive (attr := simp)]\ntheorem op_eq_bot {S : Subgroup G} : S.op = ⊥ ↔ S = ⊥ := op_injective.eq_iff' op_bot\n\n"}
{"name":"Subgroup.op_eq_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Subgroup G\n⊢ Iff (Eq S.op Bot.bot) (Eq S Bot.bot)","decl":"@[to_additive (attr := simp)]\ntheorem op_eq_bot {S : Subgroup G} : S.op = ⊥ ↔ S = ⊥ := op_injective.eq_iff' op_bot\n\n"}
{"name":"AddSubgroup.unop_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ Eq Bot.bot.unop Bot.bot","decl":"@[to_additive (attr := simp)]\ntheorem unop_bot : (⊥ : Subgroup Gᵐᵒᵖ).unop = ⊥ := opEquiv.symm.map_bot\n\n"}
{"name":"Subgroup.unop_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Eq Bot.bot.unop Bot.bot","decl":"@[to_additive (attr := simp)]\ntheorem unop_bot : (⊥ : Subgroup Gᵐᵒᵖ).unop = ⊥ := opEquiv.symm.map_bot\n\n"}
{"name":"Subgroup.unop_eq_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Subgroup (MulOpposite G)\n⊢ Iff (Eq S.unop Bot.bot) (Eq S Bot.bot)","decl":"@[to_additive (attr := simp)]\ntheorem unop_eq_bot {S : Subgroup Gᵐᵒᵖ} : S.unop = ⊥ ↔ S = ⊥ := unop_injective.eq_iff' unop_bot\n\n"}
{"name":"AddSubgroup.unop_eq_bot","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : AddSubgroup (AddOpposite G)\n⊢ Iff (Eq S.unop Bot.bot) (Eq S Bot.bot)","decl":"@[to_additive (attr := simp)]\ntheorem unop_eq_bot {S : Subgroup Gᵐᵒᵖ} : S.unop = ⊥ ↔ S = ⊥ := unop_injective.eq_iff' unop_bot\n\n"}
{"name":"Subgroup.op_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Eq Top.top.op Top.top","decl":"@[to_additive (attr := simp)]\ntheorem op_top : (⊤ : Subgroup G).op = ⊤ := rfl\n\n"}
{"name":"AddSubgroup.op_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ Eq Top.top.op Top.top","decl":"@[to_additive (attr := simp)]\ntheorem op_top : (⊤ : Subgroup G).op = ⊤ := rfl\n\n"}
{"name":"Subgroup.op_eq_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Subgroup G\n⊢ Iff (Eq S.op Top.top) (Eq S Top.top)","decl":"@[to_additive (attr := simp)]\ntheorem op_eq_top {S : Subgroup G} : S.op = ⊤ ↔ S = ⊤ := op_injective.eq_iff' op_top\n\n"}
{"name":"AddSubgroup.op_eq_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : AddSubgroup G\n⊢ Iff (Eq S.op Top.top) (Eq S Top.top)","decl":"@[to_additive (attr := simp)]\ntheorem op_eq_top {S : Subgroup G} : S.op = ⊤ ↔ S = ⊤ := op_injective.eq_iff' op_top\n\n"}
{"name":"Subgroup.unop_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Eq Top.top.unop Top.top","decl":"@[to_additive (attr := simp)]\ntheorem unop_top : (⊤ : Subgroup Gᵐᵒᵖ).unop = ⊤ := rfl\n\n"}
{"name":"AddSubgroup.unop_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\n⊢ Eq Top.top.unop Top.top","decl":"@[to_additive (attr := simp)]\ntheorem unop_top : (⊤ : Subgroup Gᵐᵒᵖ).unop = ⊤ := rfl\n\n"}
{"name":"AddSubgroup.unop_eq_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : AddSubgroup (AddOpposite G)\n⊢ Iff (Eq S.unop Top.top) (Eq S Top.top)","decl":"@[to_additive (attr := simp)]\ntheorem unop_eq_top {S : Subgroup Gᵐᵒᵖ} : S.unop = ⊤ ↔ S = ⊤ := unop_injective.eq_iff' unop_top\n\n"}
{"name":"Subgroup.unop_eq_top","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Subgroup (MulOpposite G)\n⊢ Iff (Eq S.unop Top.top) (Eq S Top.top)","decl":"@[to_additive (attr := simp)]\ntheorem unop_eq_top {S : Subgroup Gᵐᵒᵖ} : S.unop = ⊤ ↔ S = ⊤ := unop_injective.eq_iff' unop_top\n\n"}
{"name":"AddSubgroup.op_sup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ S₂ : AddSubgroup G\n⊢ Eq (Max.max S₁ S₂).op (Max.max S₁.op S₂.op)","decl":"@[to_additive]\ntheorem op_sup (S₁ S₂ : Subgroup G) : (S₁ ⊔ S₂).op = S₁.op ⊔ S₂.op :=\n  opEquiv.map_sup _ _\n\n"}
{"name":"Subgroup.op_sup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ S₂ : Subgroup G\n⊢ Eq (Max.max S₁ S₂).op (Max.max S₁.op S₂.op)","decl":"@[to_additive]\ntheorem op_sup (S₁ S₂ : Subgroup G) : (S₁ ⊔ S₂).op = S₁.op ⊔ S₂.op :=\n  opEquiv.map_sup _ _\n\n"}
{"name":"Subgroup.unop_sup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ S₂ : Subgroup (MulOpposite G)\n⊢ Eq (Max.max S₁ S₂).unop (Max.max S₁.unop S₂.unop)","decl":"@[to_additive]\ntheorem unop_sup (S₁ S₂ : Subgroup Gᵐᵒᵖ) : (S₁ ⊔ S₂).unop = S₁.unop ⊔ S₂.unop :=\n  opEquiv.symm.map_sup _ _\n\n"}
{"name":"AddSubgroup.unop_sup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ S₂ : AddSubgroup (AddOpposite G)\n⊢ Eq (Max.max S₁ S₂).unop (Max.max S₁.unop S₂.unop)","decl":"@[to_additive]\ntheorem unop_sup (S₁ S₂ : Subgroup Gᵐᵒᵖ) : (S₁ ⊔ S₂).unop = S₁.unop ⊔ S₂.unop :=\n  opEquiv.symm.map_sup _ _\n\n"}
{"name":"Subgroup.op_inf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ S₂ : Subgroup G\n⊢ Eq (Min.min S₁ S₂).op (Min.min S₁.op S₂.op)","decl":"@[to_additive]\ntheorem op_inf (S₁ S₂ : Subgroup G) : (S₁ ⊓ S₂).op = S₁.op ⊓ S₂.op := rfl\n\n"}
{"name":"AddSubgroup.op_inf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ S₂ : AddSubgroup G\n⊢ Eq (Min.min S₁ S₂).op (Min.min S₁.op S₂.op)","decl":"@[to_additive]\ntheorem op_inf (S₁ S₂ : Subgroup G) : (S₁ ⊓ S₂).op = S₁.op ⊓ S₂.op := rfl\n\n"}
{"name":"AddSubgroup.unop_inf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS₁ S₂ : AddSubgroup (AddOpposite G)\n⊢ Eq (Min.min S₁ S₂).unop (Min.min S₁.unop S₂.unop)","decl":"@[to_additive]\ntheorem unop_inf (S₁ S₂ : Subgroup Gᵐᵒᵖ) : (S₁ ⊓ S₂).unop = S₁.unop ⊓ S₂.unop := rfl\n\n"}
{"name":"Subgroup.unop_inf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS₁ S₂ : Subgroup (MulOpposite G)\n⊢ Eq (Min.min S₁ S₂).unop (Min.min S₁.unop S₂.unop)","decl":"@[to_additive]\ntheorem unop_inf (S₁ S₂ : Subgroup Gᵐᵒᵖ) : (S₁ ⊓ S₂).unop = S₁.unop ⊓ S₂.unop := rfl\n\n"}
{"name":"AddSubgroup.op_sSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : Set (AddSubgroup G)\n⊢ Eq (SupSet.sSup S).op (SupSet.sSup (Set.preimage AddSubgroup.unop S))","decl":"@[to_additive]\ntheorem op_sSup (S : Set (Subgroup G)) : (sSup S).op = sSup (.unop ⁻¹' S) :=\n  opEquiv.map_sSup_eq_sSup_symm_preimage _\n\n"}
{"name":"Subgroup.op_sSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Set (Subgroup G)\n⊢ Eq (SupSet.sSup S).op (SupSet.sSup (Set.preimage Subgroup.unop S))","decl":"@[to_additive]\ntheorem op_sSup (S : Set (Subgroup G)) : (sSup S).op = sSup (.unop ⁻¹' S) :=\n  opEquiv.map_sSup_eq_sSup_symm_preimage _\n\n"}
{"name":"AddSubgroup.unop_sSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : Set (AddSubgroup (AddOpposite G))\n⊢ Eq (SupSet.sSup S).unop (SupSet.sSup (Set.preimage AddSubgroup.op S))","decl":"@[to_additive]\ntheorem unop_sSup (S : Set (Subgroup Gᵐᵒᵖ)) : (sSup S).unop = sSup (.op ⁻¹' S) :=\n  opEquiv.symm.map_sSup_eq_sSup_symm_preimage _\n\n"}
{"name":"Subgroup.unop_sSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Set (Subgroup (MulOpposite G))\n⊢ Eq (SupSet.sSup S).unop (SupSet.sSup (Set.preimage Subgroup.op S))","decl":"@[to_additive]\ntheorem unop_sSup (S : Set (Subgroup Gᵐᵒᵖ)) : (sSup S).unop = sSup (.op ⁻¹' S) :=\n  opEquiv.symm.map_sSup_eq_sSup_symm_preimage _\n\n"}
{"name":"Subgroup.op_sInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Set (Subgroup G)\n⊢ Eq (InfSet.sInf S).op (InfSet.sInf (Set.preimage Subgroup.unop S))","decl":"@[to_additive]\ntheorem op_sInf (S : Set (Subgroup G)) : (sInf S).op = sInf (.unop ⁻¹' S) :=\n  opEquiv.map_sInf_eq_sInf_symm_preimage _\n\n"}
{"name":"AddSubgroup.op_sInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : Set (AddSubgroup G)\n⊢ Eq (InfSet.sInf S).op (InfSet.sInf (Set.preimage AddSubgroup.unop S))","decl":"@[to_additive]\ntheorem op_sInf (S : Set (Subgroup G)) : (sInf S).op = sInf (.unop ⁻¹' S) :=\n  opEquiv.map_sInf_eq_sInf_symm_preimage _\n\n"}
{"name":"Subgroup.unop_sInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nS : Set (Subgroup (MulOpposite G))\n⊢ Eq (InfSet.sInf S).unop (InfSet.sInf (Set.preimage Subgroup.op S))","decl":"@[to_additive]\ntheorem unop_sInf (S : Set (Subgroup Gᵐᵒᵖ)) : (sInf S).unop = sInf (.op ⁻¹' S) :=\n  opEquiv.symm.map_sInf_eq_sInf_symm_preimage _\n\n"}
{"name":"AddSubgroup.unop_sInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nS : Set (AddSubgroup (AddOpposite G))\n⊢ Eq (InfSet.sInf S).unop (InfSet.sInf (Set.preimage AddSubgroup.op S))","decl":"@[to_additive]\ntheorem unop_sInf (S : Set (Subgroup Gᵐᵒᵖ)) : (sInf S).unop = sInf (.op ⁻¹' S) :=\n  opEquiv.symm.map_sInf_eq_sInf_symm_preimage _\n\n"}
{"name":"Subgroup.op_iSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : Group G\nS : ι → Subgroup G\n⊢ Eq (iSup S).op (iSup fun i => (S i).op)","decl":"@[to_additive]\ntheorem op_iSup (S : ι → Subgroup G) : (iSup S).op = ⨆ i, (S i).op := opEquiv.map_iSup _\n\n"}
{"name":"AddSubgroup.op_iSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : AddGroup G\nS : ι → AddSubgroup G\n⊢ Eq (iSup S).op (iSup fun i => (S i).op)","decl":"@[to_additive]\ntheorem op_iSup (S : ι → Subgroup G) : (iSup S).op = ⨆ i, (S i).op := opEquiv.map_iSup _\n\n"}
{"name":"AddSubgroup.unop_iSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : AddGroup G\nS : ι → AddSubgroup (AddOpposite G)\n⊢ Eq (iSup S).unop (iSup fun i => (S i).unop)","decl":"@[to_additive]\ntheorem unop_iSup (S : ι → Subgroup Gᵐᵒᵖ) : (iSup S).unop = ⨆ i, (S i).unop :=\n  opEquiv.symm.map_iSup _\n\n"}
{"name":"Subgroup.unop_iSup","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : Group G\nS : ι → Subgroup (MulOpposite G)\n⊢ Eq (iSup S).unop (iSup fun i => (S i).unop)","decl":"@[to_additive]\ntheorem unop_iSup (S : ι → Subgroup Gᵐᵒᵖ) : (iSup S).unop = ⨆ i, (S i).unop :=\n  opEquiv.symm.map_iSup _\n\n"}
{"name":"Subgroup.op_iInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : Group G\nS : ι → Subgroup G\n⊢ Eq (iInf S).op (iInf fun i => (S i).op)","decl":"@[to_additive]\ntheorem op_iInf (S : ι → Subgroup G) : (iInf S).op = ⨅ i, (S i).op := opEquiv.map_iInf _\n\n"}
{"name":"AddSubgroup.op_iInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : AddGroup G\nS : ι → AddSubgroup G\n⊢ Eq (iInf S).op (iInf fun i => (S i).op)","decl":"@[to_additive]\ntheorem op_iInf (S : ι → Subgroup G) : (iInf S).op = ⨅ i, (S i).op := opEquiv.map_iInf _\n\n"}
{"name":"AddSubgroup.unop_iInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : AddGroup G\nS : ι → AddSubgroup (AddOpposite G)\n⊢ Eq (iInf S).unop (iInf fun i => (S i).unop)","decl":"@[to_additive]\ntheorem unop_iInf (S : ι → Subgroup Gᵐᵒᵖ) : (iInf S).unop = ⨅ i, (S i).unop :=\n  opEquiv.symm.map_iInf _\n\n"}
{"name":"Subgroup.unop_iInf","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"ι : Sort u_1\nG : Type u_2\ninst✝ : Group G\nS : ι → Subgroup (MulOpposite G)\n⊢ Eq (iInf S).unop (iInf fun i => (S i).unop)","decl":"@[to_additive]\ntheorem unop_iInf (S : ι → Subgroup Gᵐᵒᵖ) : (iInf S).unop = ⨅ i, (S i).unop :=\n  opEquiv.symm.map_iInf _\n\n"}
{"name":"AddSubgroup.op_closure","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\ns : Set G\n⊢ Eq (AddSubgroup.closure s).op (AddSubgroup.closure (Set.preimage AddOpposite.unop s))","decl":"@[to_additive]\ntheorem op_closure (s : Set G) : (closure s).op = closure (MulOpposite.unop ⁻¹' s) := by\n  simp_rw [closure, op_sInf, Set.preimage_setOf_eq, Subgroup.coe_unop]\n  congr with a\n  exact MulOpposite.unop_surjective.forall\n\n"}
{"name":"Subgroup.op_closure","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\ns : Set G\n⊢ Eq (Subgroup.closure s).op (Subgroup.closure (Set.preimage MulOpposite.unop s))","decl":"@[to_additive]\ntheorem op_closure (s : Set G) : (closure s).op = closure (MulOpposite.unop ⁻¹' s) := by\n  simp_rw [closure, op_sInf, Set.preimage_setOf_eq, Subgroup.coe_unop]\n  congr with a\n  exact MulOpposite.unop_surjective.forall\n\n"}
{"name":"Subgroup.unop_closure","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\ns : Set (MulOpposite G)\n⊢ Eq (Subgroup.closure s).unop (Subgroup.closure (Set.preimage MulOpposite.op s))","decl":"@[to_additive]\ntheorem unop_closure (s : Set Gᵐᵒᵖ) : (closure s).unop = closure (MulOpposite.op ⁻¹' s) := by\n  rw [← op_inj, op_unop, op_closure]\n  simp_rw [Set.preimage_preimage, MulOpposite.op_unop, Set.preimage_id']\n\n"}
{"name":"AddSubgroup.unop_closure","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\ns : Set (AddOpposite G)\n⊢ Eq (AddSubgroup.closure s).unop (AddSubgroup.closure (Set.preimage AddOpposite.op s))","decl":"@[to_additive]\ntheorem unop_closure (s : Set Gᵐᵒᵖ) : (closure s).unop = closure (MulOpposite.op ⁻¹' s) := by\n  rw [← op_inj, op_unop, op_closure]\n  simp_rw [Set.preimage_preimage, MulOpposite.op_unop, Set.preimage_id']\n\n"}
{"name":"Subgroup.instCountableSubtypeMulOppositeMemOp","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝¹ : Group G\nH : Subgroup G\ninst✝ : Countable (Subtype fun x => Membership.mem H x)\n⊢ Countable (Subtype fun x => Membership.mem H.op x)","decl":"@[to_additive]\ninstance (H : Subgroup G) [Countable H] : Countable H.op :=\n  Countable.of_equiv H H.equivOp\n\n"}
{"name":"AddSubgroup.instCountableSubtypeAddOppositeMemOp","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝¹ : AddGroup G\nH : AddSubgroup G\ninst✝ : Countable (Subtype fun x => Membership.mem H x)\n⊢ Countable (Subtype fun x => Membership.mem H.op x)","decl":"@[to_additive]\ninstance (H : Subgroup G) [Countable H] : Countable H.op :=\n  Countable.of_equiv H H.equivOp\n\n"}
{"name":"Subgroup.smul_opposite_mul","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\nx g : G\nh : Subtype fun x => Membership.mem H.op x\n⊢ Eq (HSMul.hSMul h (HMul.hMul g x)) (HMul.hMul g (HSMul.hSMul h x))","decl":"@[to_additive]\ntheorem smul_opposite_mul {H : Subgroup G} (x g : G) (h : H.op) :\n    h • (g * x) = g * h • x :=\n  mul_assoc _ _ _\n\n"}
{"name":"AddSubgroup.vadd_opposite_add","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\nx g : G\nh : Subtype fun x => Membership.mem H.op x\n⊢ Eq (HVAdd.hVAdd h (HAdd.hAdd g x)) (HAdd.hAdd g (HVAdd.hVAdd h x))","decl":"@[to_additive]\ntheorem smul_opposite_mul {H : Subgroup G} (x g : G) (h : H.op) :\n    h • (g * x) = g * h • x :=\n  mul_assoc _ _ _\n\n"}
{"name":"Subgroup.normal_op","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\n⊢ Iff H.op.Normal H.Normal","decl":"@[to_additive (attr := simp)]\ntheorem normal_op {H : Subgroup G} : H.op.Normal ↔ H.Normal := by\n  simp only [← normalizer_eq_top_iff, ← op_normalizer, op_eq_top]\n\n"}
{"name":"AddSubgroup.normal_op","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Iff H.op.Normal H.Normal","decl":"@[to_additive (attr := simp)]\ntheorem normal_op {H : Subgroup G} : H.op.Normal ↔ H.Normal := by\n  simp only [← normalizer_eq_top_iff, ← op_normalizer, op_eq_top]\n\n"}
{"name":"AddSubgroup.Normal.of_op","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\na✝ : H.op.Normal\n⊢ H.Normal","decl":"@[to_additive] alias ⟨Normal.of_op, Normal.op⟩ := normal_op\n\n"}
{"name":"Subgroup.Normal.of_op","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\na✝ : H.op.Normal\n⊢ H.Normal","decl":"@[to_additive] alias ⟨Normal.of_op, Normal.op⟩ := normal_op\n\n"}
{"name":"Subgroup.Normal.op","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup G\na✝ : H.Normal\n⊢ H.op.Normal","decl":"@[to_additive] alias ⟨Normal.of_op, Normal.op⟩ := normal_op\n\n"}
{"name":"AddSubgroup.Normal.op","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup G\na✝ : H.Normal\n⊢ H.op.Normal","decl":"@[to_additive] alias ⟨Normal.of_op, Normal.op⟩ := normal_op\n\n"}
{"name":"Subgroup.op.instNormal","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝¹ : Group G\nH : Subgroup G\ninst✝ : H.Normal\n⊢ H.op.Normal","decl":"@[to_additive]\ninstance op.instNormal {H : Subgroup G} [H.Normal] : H.op.Normal := .op ‹_›\n\n"}
{"name":"AddSubgroup.op.instNormal","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝¹ : AddGroup G\nH : AddSubgroup G\ninst✝ : H.Normal\n⊢ H.op.Normal","decl":"@[to_additive]\ninstance op.instNormal {H : Subgroup G} [H.Normal] : H.op.Normal := .op ‹_›\n\n"}
{"name":"Subgroup.normal_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\n⊢ Iff H.unop.Normal H.Normal","decl":"@[to_additive (attr := simp)]\ntheorem normal_unop {H : Subgroup Gᵐᵒᵖ} : H.unop.Normal ↔ H.Normal := by\n  rw [← normal_op, op_unop]\n\n"}
{"name":"AddSubgroup.normal_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\n⊢ Iff H.unop.Normal H.Normal","decl":"@[to_additive (attr := simp)]\ntheorem normal_unop {H : Subgroup Gᵐᵒᵖ} : H.unop.Normal ↔ H.Normal := by\n  rw [← normal_op, op_unop]\n\n"}
{"name":"AddSubgroup.Normal.unop","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\na✝ : H.Normal\n⊢ H.unop.Normal","decl":"@[to_additive] alias ⟨Normal.of_unop, Normal.unop⟩ := normal_unop\n\n"}
{"name":"Subgroup.Normal.of_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\na✝ : H.unop.Normal\n⊢ H.Normal","decl":"@[to_additive] alias ⟨Normal.of_unop, Normal.unop⟩ := normal_unop\n\n"}
{"name":"AddSubgroup.Normal.of_unop","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : AddGroup G\nH : AddSubgroup (AddOpposite G)\na✝ : H.unop.Normal\n⊢ H.Normal","decl":"@[to_additive] alias ⟨Normal.of_unop, Normal.unop⟩ := normal_unop\n\n"}
{"name":"Subgroup.Normal.unop","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝ : Group G\nH : Subgroup (MulOpposite G)\na✝ : H.Normal\n⊢ H.unop.Normal","decl":"@[to_additive] alias ⟨Normal.of_unop, Normal.unop⟩ := normal_unop\n\n"}
{"name":"AddSubgroup.unop.instNormal","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝¹ : AddGroup G\nH : AddSubgroup (AddOpposite G)\ninst✝ : H.Normal\n⊢ H.unop.Normal","decl":"@[to_additive]\ninstance unop.instNormal {H : Subgroup Gᵐᵒᵖ} [H.Normal] : H.unop.Normal := .unop ‹_›\n\n"}
{"name":"Subgroup.unop.instNormal","module":"Mathlib.Algebra.Group.Subgroup.MulOppositeLemmas","initialProofState":"G : Type u_2\ninst✝¹ : Group G\nH : Subgroup (MulOpposite G)\ninst✝ : H.Normal\n⊢ H.unop.Normal","decl":"@[to_additive]\ninstance unop.instNormal {H : Subgroup Gᵐᵒᵖ} [H.Normal] : H.unop.Normal := .unop ‹_›\n\n"}
