{"name":"AlgebraicGeometry.Polynomial.isOpen_imageOfDf","module":"Mathlib.RingTheory.Spectrum.Prime.IsOpenComapC","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nf : Polynomial R\n⊢ IsOpen (AlgebraicGeometry.Polynomial.imageOfDf f)","decl":"theorem isOpen_imageOfDf : IsOpen (imageOfDf f) := by\n  rw [imageOfDf, setOf_exists fun i (x : PrimeSpectrum R) => coeff f i ∉ x.asIdeal]\n  exact isOpen_iUnion fun i => isOpen_basicOpen\n\n"}
{"name":"AlgebraicGeometry.Polynomial.comap_C_mem_imageOfDf","module":"Mathlib.RingTheory.Spectrum.Prime.IsOpenComapC","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nf : Polynomial R\nI : PrimeSpectrum (Polynomial R)\nH : Membership.mem (HasCompl.compl (PrimeSpectrum.zeroLocus (Singleton.singleton f))) I\n⊢ Membership.mem (AlgebraicGeometry.Polynomial.imageOfDf f) ((PrimeSpectrum.comap Polynomial.C) I)","decl":"/-- If a point of `Spec R[x]` is not contained in the vanishing set of `f`, then its image in\n`Spec R` is contained in the open set where at least one of the coefficients of `f` is non-zero.\nThis lemma is a reformulation of `exists_C_coeff_not_mem`. -/\ntheorem comap_C_mem_imageOfDf {I : PrimeSpectrum R[X]}\n    (H : I ∈ (zeroLocus {f} : Set (PrimeSpectrum R[X]))ᶜ) :\n    PrimeSpectrum.comap (Polynomial.C : R →+* R[X]) I ∈ imageOfDf f :=\n  exists_C_coeff_not_mem (mem_compl_zeroLocus_iff_not_mem.mp H)\n\n"}
{"name":"AlgebraicGeometry.Polynomial.imageOfDf_eq_comap_C_compl_zeroLocus","module":"Mathlib.RingTheory.Spectrum.Prime.IsOpenComapC","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nf : Polynomial R\n⊢ Eq (AlgebraicGeometry.Polynomial.imageOfDf f) (Set.image (⇑(PrimeSpectrum.comap Polynomial.C)) (HasCompl.compl (PrimeSpectrum.zeroLocus (Singleton.singleton f))))","decl":"/-- The open set `imageOfDf f` coincides with the image of `basicOpen f` under the\nmorphism `C⁺ : Spec R[x] → Spec R`. -/\ntheorem imageOfDf_eq_comap_C_compl_zeroLocus :\n    imageOfDf f = PrimeSpectrum.comap (C : R →+* R[X]) '' (zeroLocus {f})ᶜ := by\n  ext x\n  refine ⟨fun hx => ⟨⟨map C x.asIdeal, isPrime_map_C_of_isPrime x.isPrime⟩, ⟨?_, ?_⟩⟩, ?_⟩\n  · rw [mem_compl_iff, mem_zeroLocus, singleton_subset_iff]\n    cases' hx with i hi\n    exact fun a => hi (mem_map_C_iff.mp a i)\n  · ext x\n    refine ⟨fun h => ?_, fun h => subset_span (mem_image_of_mem C.1 h)⟩\n    rw [← @coeff_C_zero R x _]\n    exact mem_map_C_iff.mp h 0\n  · rintro ⟨xli, complement, rfl⟩\n    exact comap_C_mem_imageOfDf complement\n\n"}
{"name":"AlgebraicGeometry.Polynomial.isOpenMap_comap_C","module":"Mathlib.RingTheory.Spectrum.Prime.IsOpenComapC","initialProofState":"R : Type u_1\ninst✝ : CommRing R\n⊢ IsOpenMap ⇑(PrimeSpectrum.comap Polynomial.C)","decl":"/-- The morphism `C⁺ : Spec R[x] → Spec R` is open. -/\n@[stacks 00FB \"First part\"]\ntheorem isOpenMap_comap_C : IsOpenMap (PrimeSpectrum.comap (C : R →+* R[X])) := by\n  rintro U ⟨s, z⟩\n  rw [← compl_compl U, ← z, ← iUnion_of_singleton_coe s, zeroLocus_iUnion, compl_iInter,\n    image_iUnion]\n  simp_rw [← imageOfDf_eq_comap_C_compl_zeroLocus]\n  exact isOpen_iUnion fun f => isOpen_imageOfDf\n\n"}
