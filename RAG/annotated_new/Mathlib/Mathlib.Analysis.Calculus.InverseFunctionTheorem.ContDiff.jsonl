{"name":"ContDiffAt.toPartialHomeomorph_coe","module":"Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff","initialProofState":"𝕂 : Type u_1\ninst✝⁵ : RCLike 𝕂\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕂 E\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕂 F\ninst✝ : CompleteSpace E\nf : E → F\nf' : ContinuousLinearEquiv (RingHom.id 𝕂) E F\na : E\nn : WithTop ENat\nhf : ContDiffAt 𝕂 n f a\nhf' : HasFDerivAt f (↑f') a\nhn : LE.le 1 n\n⊢ Eq (↑(ContDiffAt.toPartialHomeomorph f hf hf' hn)) f","decl":"@[simp]\ntheorem toPartialHomeomorph_coe (hf : ContDiffAt 𝕂 n f a)\n    (hf' : HasFDerivAt f (f' : E →L[𝕂] F) a) (hn : 1 ≤ n) :\n    (hf.toPartialHomeomorph f hf' hn : E → F) = f :=\n  rfl\n\n"}
{"name":"ContDiffAt.mem_toPartialHomeomorph_source","module":"Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff","initialProofState":"𝕂 : Type u_1\ninst✝⁵ : RCLike 𝕂\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕂 E\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕂 F\ninst✝ : CompleteSpace E\nf : E → F\nf' : ContinuousLinearEquiv (RingHom.id 𝕂) E F\na : E\nn : WithTop ENat\nhf : ContDiffAt 𝕂 n f a\nhf' : HasFDerivAt f (↑f') a\nhn : LE.le 1 n\n⊢ Membership.mem (ContDiffAt.toPartialHomeomorph f hf hf' hn).source a","decl":"theorem mem_toPartialHomeomorph_source (hf : ContDiffAt 𝕂 n f a)\n    (hf' : HasFDerivAt f (f' : E →L[𝕂] F) a) (hn : 1 ≤ n) :\n    a ∈ (hf.toPartialHomeomorph f hf' hn).source :=\n  (hf.hasStrictFDerivAt' hf' hn).mem_toPartialHomeomorph_source\n\n"}
{"name":"ContDiffAt.image_mem_toPartialHomeomorph_target","module":"Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff","initialProofState":"𝕂 : Type u_1\ninst✝⁵ : RCLike 𝕂\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕂 E\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕂 F\ninst✝ : CompleteSpace E\nf : E → F\nf' : ContinuousLinearEquiv (RingHom.id 𝕂) E F\na : E\nn : WithTop ENat\nhf : ContDiffAt 𝕂 n f a\nhf' : HasFDerivAt f (↑f') a\nhn : LE.le 1 n\n⊢ Membership.mem (ContDiffAt.toPartialHomeomorph f hf hf' hn).target (f a)","decl":"theorem image_mem_toPartialHomeomorph_target (hf : ContDiffAt 𝕂 n f a)\n    (hf' : HasFDerivAt f (f' : E →L[𝕂] F) a) (hn : 1 ≤ n) :\n    f a ∈ (hf.toPartialHomeomorph f hf' hn).target :=\n  (hf.hasStrictFDerivAt' hf' hn).image_mem_toPartialHomeomorph_target\n\n"}
{"name":"ContDiffAt.localInverse_apply_image","module":"Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff","initialProofState":"𝕂 : Type u_1\ninst✝⁵ : RCLike 𝕂\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕂 E\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕂 F\ninst✝ : CompleteSpace E\nf : E → F\nf' : ContinuousLinearEquiv (RingHom.id 𝕂) E F\na : E\nn : WithTop ENat\nhf : ContDiffAt 𝕂 n f a\nhf' : HasFDerivAt f (↑f') a\nhn : LE.le 1 n\n⊢ Eq (hf.localInverse hf' hn (f a)) a","decl":"theorem localInverse_apply_image (hf : ContDiffAt 𝕂 n f a)\n    (hf' : HasFDerivAt f (f' : E →L[𝕂] F) a) (hn : 1 ≤ n) : hf.localInverse hf' hn (f a) = a :=\n  (hf.hasStrictFDerivAt' hf' hn).localInverse_apply_image\n\n"}
{"name":"ContDiffAt.to_localInverse","module":"Mathlib.Analysis.Calculus.InverseFunctionTheorem.ContDiff","initialProofState":"𝕂 : Type u_1\ninst✝⁵ : RCLike 𝕂\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕂 E\nF : Type u_3\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕂 F\ninst✝ : CompleteSpace E\nf : E → F\nf' : ContinuousLinearEquiv (RingHom.id 𝕂) E F\na : E\nn : WithTop ENat\nhf : ContDiffAt 𝕂 n f a\nhf' : HasFDerivAt f (↑f') a\nhn : LE.le 1 n\n⊢ ContDiffAt 𝕂 n (hf.localInverse hf' hn) (f a)","decl":"/-- Given a `ContDiff` function over `𝕂` (which is `ℝ` or `ℂ`) with an invertible derivative\nat `a`, the inverse function (produced by `ContDiff.toPartialHomeomorph`) is\nalso `ContDiff`. -/\ntheorem to_localInverse (hf : ContDiffAt 𝕂 n f a)\n    (hf' : HasFDerivAt f (f' : E →L[𝕂] F) a) (hn : 1 ≤ n) :\n    ContDiffAt 𝕂 n (hf.localInverse hf' hn) (f a) := by\n  have := hf.localInverse_apply_image hf' hn\n  apply (hf.toPartialHomeomorph f hf' hn).contDiffAt_symm\n    (image_mem_toPartialHomeomorph_target hf hf' hn)\n  · convert hf'\n  · convert hf\n\n"}
