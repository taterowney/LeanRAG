{"name":"Algebra.smul_def'","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝¹ : CommSemiring R\ninst✝ : Semiring A\nself : Algebra R A\nr : R\nx : A\n⊢ Eq (HSMul.hSMul r x) (HMul.hMul (Algebra.algebraMap r) x)","decl":"/-- An associative unital `R`-algebra is a semiring `A` equipped with a map into its center `R → A`.\n\nSee the implementation notes in this file for discussion of the details of this definition.\n-/\nclass Algebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] extends SMul R A where\n  /-- Embedding `R →+* A` given by `Algebra` structure.\n  Use `algebraMap` from the root namespace instead.-/\n  protected algebraMap : R →+* A\n  commutes' : ∀ r x, algebraMap r * x = x * algebraMap r\n  smul_def' : ∀ r x, r • x = algebraMap r * x\n\n"}
{"name":"Algebra.commutes'","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝¹ : CommSemiring R\ninst✝ : Semiring A\nself : Algebra R A\nr : R\nx : A\n⊢ Eq (HMul.hMul (Algebra.algebraMap r) x) (HMul.hMul x (Algebra.algebraMap r))","decl":"/-- An associative unital `R`-algebra is a semiring `A` equipped with a map into its center `R → A`.\n\nSee the implementation notes in this file for discussion of the details of this definition.\n-/\nclass Algebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] extends SMul R A where\n  /-- Embedding `R →+* A` given by `Algebra` structure.\n  Use `algebraMap` from the root namespace instead.-/\n  protected algebraMap : R →+* A\n  commutes' : ∀ r x, algebraMap r * x = x * algebraMap r\n  smul_def' : ∀ r x, r • x = algebraMap r * x\n\n"}
{"name":"algebraMap.coe_zero","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑0) 0","decl":"@[norm_cast]\ntheorem coe_zero : (↑(0 : R) : A) = 0 :=\n  map_zero (algebraMap R A)\n\n"}
{"name":"algebraMap.coe_one","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑1) 1","decl":"@[norm_cast]\ntheorem coe_one : (↑(1 : R) : A) = 1 :=\n  map_one (algebraMap R A)\n\n"}
{"name":"algebraMap.coe_natCast","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na : Nat\n⊢ Eq ↑↑a ↑a","decl":"@[norm_cast]\ntheorem coe_natCast (a : ℕ) : (↑(a : R) : A) = a :=\n  map_natCast (algebraMap R A) a\n\n"}
{"name":"algebraMap.coe_add","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na b : R\n⊢ Eq (↑(HAdd.hAdd a b)) (HAdd.hAdd ↑a ↑b)","decl":"@[norm_cast]\ntheorem coe_add (a b : R) : (↑(a + b : R) : A) = ↑a + ↑b :=\n  map_add (algebraMap R A) a b\n\n"}
{"name":"algebraMap.coe_mul","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na b : R\n⊢ Eq (↑(HMul.hMul a b)) (HMul.hMul ↑a ↑b)","decl":"@[norm_cast]\ntheorem coe_mul (a b : R) : (↑(a * b : R) : A) = ↑a * ↑b :=\n  map_mul (algebraMap R A) a b\n\n"}
{"name":"algebraMap.coe_pow","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\na : R\nn : Nat\n⊢ Eq (↑(HPow.hPow a n)) (HPow.hPow (↑a) n)","decl":"@[norm_cast]\ntheorem coe_pow (a : R) (n : ℕ) : (↑(a ^ n : R) : A) = (a : A) ^ n :=\n  map_pow (algebraMap R A) _ _\n\n"}
{"name":"algebraMap.coe_neg","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nx : R\n⊢ Eq (↑(Neg.neg x)) (Neg.neg ↑x)","decl":"@[norm_cast]\ntheorem coe_neg (x : R) : (↑(-x : R) : A) = -↑x :=\n  map_neg (algebraMap R A) x\n\n"}
{"name":"algebraMap.coe_sub","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\na b : R\n⊢ Eq (↑(HSub.hSub a b)) (HSub.hSub ↑a ↑b)","decl":"@[norm_cast]\ntheorem coe_sub (a b : R) :\n    (↑(a - b : R) : A) = ↑a - ↑b :=\n  map_sub (algebraMap R A) a b\n\n"}
{"name":"RingHom.smul_toAlgebra'","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : CommSemiring R\ninst✝ : Semiring S\ni : RingHom R S\nh : ∀ (c : R) (x : S), Eq (HMul.hMul (i c) x) (HMul.hMul x (i c))\nr : R\ns : S\n⊢ let x := i.toAlgebra' h;\n  Eq (HSMul.hSMul r s) (HMul.hMul (i r) s)","decl":"set_option linter.docPrime false in\ntheorem RingHom.smul_toAlgebra' {R S} [CommSemiring R] [Semiring S] (i : R →+* S)\n    (h : ∀ c x, i c * x = x * i c) (r : R) (s : S) :\n    let _ := RingHom.toAlgebra' i h\n    r • s = i r * s := rfl\n\n"}
{"name":"RingHom.algebraMap_toAlgebra'","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : CommSemiring R\ninst✝ : Semiring S\ni : RingHom R S\nh : ∀ (c : R) (x : S), Eq (HMul.hMul (i c) x) (HMul.hMul x (i c))\n⊢ Eq (algebraMap R S) i","decl":"set_option linter.docPrime false in\ntheorem RingHom.algebraMap_toAlgebra' {R S} [CommSemiring R] [Semiring S] (i : R →+* S)\n    (h : ∀ c x, i c * x = x * i c) :\n    @algebraMap R S _ _ (i.toAlgebra' h) = i :=\n  rfl\n\n"}
{"name":"RingHom.algebraMap_toAlgebra","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : CommSemiring R\ninst✝ : CommSemiring S\ni : RingHom R S\n⊢ Eq (algebraMap R S) i","decl":"theorem RingHom.algebraMap_toAlgebra {R S} [CommSemiring R] [CommSemiring S] (i : R →+* S) :\n    @algebraMap R S _ _ i.toAlgebra = i :=\n  rfl\n\n"}
{"name":"Algebra.algebra_ext_iff","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_2\ninst✝¹ : CommSemiring R\nA : Type u_3\ninst✝ : Semiring A\nP Q : Algebra R A\n⊢ Iff (Eq P Q) (∀ (r : R), Eq ((algebraMap R A) r) ((algebraMap R A) r))","decl":"/-- To prove two algebra structures on a fixed `[CommSemiring R] [Semiring A]` agree,\nit suffices to check the `algebraMap`s agree.\n-/\n@[ext]\ntheorem algebra_ext {R : Type*} [CommSemiring R] {A : Type*} [Semiring A] (P Q : Algebra R A)\n    (h : ∀ r : R, (haveI := P; algebraMap R A r) = haveI := Q; algebraMap R A r) :\n    P = Q := by\n  replace h : P.algebraMap = Q.algebraMap := DFunLike.ext _ _ h\n  have h' : (haveI := P; (· • ·) : R → A → A) = (haveI := Q; (· • ·) : R → A → A) := by\n    funext r a\n    rw [P.smul_def', Q.smul_def', h]\n  rcases P with @⟨⟨P⟩⟩\n  rcases Q with @⟨⟨Q⟩⟩\n  congr\n\n-- see Note [lower instance priority]\n"}
{"name":"Algebra.algebra_ext","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u_2\ninst✝¹ : CommSemiring R\nA : Type u_3\ninst✝ : Semiring A\nP Q : Algebra R A\nh : ∀ (r : R), Eq ((algebraMap R A) r) ((algebraMap R A) r)\n⊢ Eq P Q","decl":"/-- To prove two algebra structures on a fixed `[CommSemiring R] [Semiring A]` agree,\nit suffices to check the `algebraMap`s agree.\n-/\n@[ext]\ntheorem algebra_ext {R : Type*} [CommSemiring R] {A : Type*} [Semiring A] (P Q : Algebra R A)\n    (h : ∀ r : R, (haveI := P; algebraMap R A r) = haveI := Q; algebraMap R A r) :\n    P = Q := by\n  replace h : P.algebraMap = Q.algebraMap := DFunLike.ext _ _ h\n  have h' : (haveI := P; (· • ·) : R → A → A) = (haveI := Q; (· • ·) : R → A → A) := by\n    funext r a\n    rw [P.smul_def', Q.smul_def', h]\n  rcases P with @⟨⟨P⟩⟩\n  rcases Q with @⟨⟨Q⟩⟩\n  congr\n\n-- see Note [lower instance priority]\n"}
{"name":"Algebra.smul_def","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\nx : A\n⊢ Eq (HSMul.hSMul r x) (HMul.hMul ((algebraMap R A) r) x)","decl":"theorem smul_def (r : R) (x : A) : r • x = algebraMap R A r * x :=\n  Algebra.smul_def' r x\n\n"}
{"name":"Algebra.algebraMap_eq_smul_one","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\n⊢ Eq ((algebraMap R A) r) (HSMul.hSMul r 1)","decl":"theorem algebraMap_eq_smul_one (r : R) : algebraMap R A r = r • (1 : A) :=\n  calc\n    algebraMap R A r = algebraMap R A r * 1 := (mul_one _).symm\n    _ = r • (1 : A) := (Algebra.smul_def r 1).symm\n\n"}
{"name":"Algebra.algebraMap_eq_smul_one'","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq ⇑(algebraMap R A) fun r => HSMul.hSMul r 1","decl":"theorem algebraMap_eq_smul_one' : ⇑(algebraMap R A) = fun r => r • (1 : A) :=\n  funext algebraMap_eq_smul_one\n\n"}
{"name":"Algebra.commutes","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\nx : A\n⊢ Eq (HMul.hMul ((algebraMap R A) r) x) (HMul.hMul x ((algebraMap R A) r))","decl":"/-- `mul_comm` for `Algebra`s when one element is from the base ring. -/\ntheorem commutes (r : R) (x : A) : algebraMap R A r * x = x * algebraMap R A r :=\n  Algebra.commutes' r x\n\n"}
{"name":"Algebra.commute_algebraMap_left","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\nx : A\n⊢ Commute ((algebraMap R A) r) x","decl":"lemma commute_algebraMap_left (r : R) (x : A) : Commute (algebraMap R A r) x :=\n  Algebra.commutes r x\n\n"}
{"name":"Algebra.commute_algebraMap_right","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\nx : A\n⊢ Commute x ((algebraMap R A) r)","decl":"lemma commute_algebraMap_right (r : R) (x : A) : Commute x (algebraMap R A r) :=\n  (Algebra.commutes r x).symm\n\n"}
{"name":"Algebra.left_comm","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nx : A\nr : R\ny : A\n⊢ Eq (HMul.hMul x (HMul.hMul ((algebraMap R A) r) y)) (HMul.hMul ((algebraMap R A) r) (HMul.hMul x y))","decl":"/-- `mul_left_comm` for `Algebra`s when one element is from the base ring. -/\ntheorem left_comm (x : A) (r : R) (y : A) :\n    x * (algebraMap R A r * y) = algebraMap R A r * (x * y) := by\n  rw [← mul_assoc, ← commutes, mul_assoc]\n\n"}
{"name":"Algebra.right_comm","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nx : A\nr : R\ny : A\n⊢ Eq (HMul.hMul (HMul.hMul x ((algebraMap R A) r)) y) (HMul.hMul (HMul.hMul x y) ((algebraMap R A) r))","decl":"/-- `mul_right_comm` for `Algebra`s when one element is from the base ring. -/\ntheorem right_comm (x : A) (r : R) (y : A) :\n    x * algebraMap R A r * y = x * y * algebraMap R A r := by\n  rw [mul_assoc, commutes, ← mul_assoc]\n\n"}
{"name":"IsScalarTower.right","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ IsScalarTower R A A","decl":"instance _root_.IsScalarTower.right : IsScalarTower R A A :=\n  ⟨fun x y z => by rw [smul_eq_mul, smul_eq_mul, smul_def, smul_def, mul_assoc]⟩\n\n"}
{"name":"RingHom.smulOneHom_eq_algebraMap","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq RingHom.smulOneHom (algebraMap R A)","decl":"@[simp]\ntheorem _root_.RingHom.smulOneHom_eq_algebraMap : RingHom.smulOneHom = algebraMap R A :=\n  RingHom.ext fun r => (algebraMap_eq_smul_one r).symm\n\n-- TODO: set up `IsScalarTower.smulCommClass` earlier so that we can actually prove this using\n-- `mul_smul_comm s x y`.\n\n"}
{"name":"Algebra.mul_smul_comm","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : R\nx y : A\n⊢ Eq (HMul.hMul x (HSMul.hSMul s y)) (HSMul.hSMul s (HMul.hMul x y))","decl":"/-- This is just a special case of the global `mul_smul_comm` lemma that requires less typeclass\nsearch (and was here first). -/\n@[simp]\nprotected theorem mul_smul_comm (s : R) (x y : A) : x * s • y = s • (x * y) := by\n  rw [smul_def, smul_def, left_comm]\n\n"}
{"name":"Algebra.smul_mul_assoc","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\nx y : A\n⊢ Eq (HMul.hMul (HSMul.hSMul r x) y) (HSMul.hSMul r (HMul.hMul x y))","decl":"/-- This is just a special case of the global `smul_mul_assoc` lemma that requires less typeclass\nsearch (and was here first). -/\n@[simp]\nprotected theorem smul_mul_assoc (r : R) (x y : A) : r • x * y = r • (x * y) :=\n  smul_mul_assoc r x y\n\n"}
{"name":"smul_algebraMap","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nα : Type u_2\ninst✝² : Monoid α\ninst✝¹ : MulDistribMulAction α A\ninst✝ : SMulCommClass α R A\na : α\nr : R\n⊢ Eq (HSMul.hSMul a ((algebraMap R A) r)) ((algebraMap R A) r)","decl":"@[simp]\ntheorem _root_.smul_algebraMap {α : Type*} [Monoid α] [MulDistribMulAction α A]\n    [SMulCommClass α R A] (a : α) (r : R) : a • algebraMap R A r = algebraMap R A r := by\n  rw [algebraMap_eq_smul_one, smul_comm a r (1 : A), smul_one]\n\n"}
{"name":"Algebra.compHom_smul_def","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : CommSemiring S\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nf : RingHom S R\ns : S\nx : A\n⊢ Eq (HSMul.hSMul s x) (HSMul.hSMul (f s) x)","decl":"theorem compHom_smul_def (s : S) (x : A) :\n    letI := compHom A f\n    s • x = f s • x := rfl\n\n"}
{"name":"Algebra.compHom_algebraMap_eq","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : CommSemiring S\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nf : RingHom S R\n⊢ Eq (algebraMap S A) ((algebraMap R A).comp f)","decl":"theorem compHom_algebraMap_eq :\n    letI := compHom A f\n    algebraMap S A = (algebraMap R A).comp f := rfl\n\n"}
{"name":"Algebra.compHom_algebraMap_apply","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : CommSemiring S\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nf : RingHom S R\ns : S\n⊢ Eq ((algebraMap S A) s) ((algebraMap R A) (f s))","decl":"theorem compHom_algebraMap_apply (s : S) :\n    letI := compHom A f\n    algebraMap S A s = (algebraMap R A) (f s) := rfl\n\n"}
{"name":"Algebra.linearMap_apply","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\n⊢ Eq ((Algebra.linearMap R A) r) ((algebraMap R A) r)","decl":"@[simp]\ntheorem linearMap_apply (r : R) : Algebra.linearMap R A r = algebraMap R A r :=\n  rfl\n\n"}
{"name":"Algebra.coe_linearMap","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq ⇑(Algebra.linearMap R A) ⇑(algebraMap R A)","decl":"theorem coe_linearMap : ⇑(Algebra.linearMap R A) = algebraMap R A :=\n  rfl\n\n"}
{"name":"Algebra.id.map_eq_id","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\ninst✝ : CommSemiring R\n⊢ Eq (algebraMap R R) (RingHom.id R)","decl":"@[simp]\ntheorem map_eq_id : algebraMap R R = RingHom.id _ :=\n  rfl\n\n"}
{"name":"Algebra.id.map_eq_self","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\ninst✝ : CommSemiring R\nx : R\n⊢ Eq ((algebraMap R R) x) x","decl":"theorem map_eq_self (x : R) : algebraMap R R x = x :=\n  rfl\n\n"}
{"name":"Algebra.id.smul_eq_mul","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"R : Type u\ninst✝ : CommSemiring R\nx y : R\n⊢ Eq (HSMul.hSMul x y) (HMul.hMul x y)","decl":"@[simp]\ntheorem smul_eq_mul (x y : R) : x • y = x * y :=\n  rfl\n\n"}
{"name":"algebraMap.coe_smul","module":"Mathlib.Algebra.Algebra.Defs","initialProofState":"A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝⁵ : SMul A B\ninst✝⁴ : CommSemiring B\ninst✝³ : Semiring C\ninst✝² : Algebra B C\ninst✝¹ : SMul A C\ninst✝ : IsScalarTower A B C\na : A\nb : B\n⊢ Eq (↑(HSMul.hSMul a b)) (HSMul.hSMul a ↑b)","decl":"@[norm_cast]\ntheorem algebraMap.coe_smul (A B C : Type*) [SMul A B] [CommSemiring B] [Semiring C] [Algebra B C]\n    [SMul A C] [IsScalarTower A B C] (a : A) (b : B) : (a • b : B) = a • (b : C) := calc\n  ((a • b : B) : C) = (a • b) • 1 := Algebra.algebraMap_eq_smul_one _\n  _ = a • (b • 1) := smul_assoc ..\n  _ = a • (b : C) := congrArg _ (Algebra.algebraMap_eq_smul_one b).symm\n"}
