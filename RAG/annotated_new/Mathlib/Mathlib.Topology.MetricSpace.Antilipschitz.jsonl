{"name":"AntilipschitzWith.edist_lt_top","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\nh : AntilipschitzWith K f\nx y : α\n⊢ LT.lt (EDist.edist x y) Top.top","decl":"protected lemma AntilipschitzWith.edist_lt_top [PseudoEMetricSpace α] [PseudoMetricSpace β]\n    {K : ℝ≥0} {f : α → β} (h : AntilipschitzWith K f) (x y : α) : edist x y < ⊤ :=\n  (h x y).trans_lt <| ENNReal.mul_lt_top ENNReal.coe_lt_top (edist_lt_top _ _)\n\n"}
{"name":"AntilipschitzWith.edist_ne_top","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\nh : AntilipschitzWith K f\nx y : α\n⊢ Ne (EDist.edist x y) Top.top","decl":"theorem AntilipschitzWith.edist_ne_top [PseudoEMetricSpace α] [PseudoMetricSpace β] {K : ℝ≥0}\n    {f : α → β} (h : AntilipschitzWith K f) (x y : α) : edist x y ≠ ⊤ :=\n  (h.edist_lt_top x y).ne\n\n"}
{"name":"antilipschitzWith_iff_le_mul_nndist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\n⊢ Iff (AntilipschitzWith K f) (∀ (x y : α), LE.le (NNDist.nndist x y) (HMul.hMul K (NNDist.nndist (f x) (f y))))","decl":"theorem antilipschitzWith_iff_le_mul_nndist :\n    AntilipschitzWith K f ↔ ∀ x y, nndist x y ≤ K * nndist (f x) (f y) := by\n  simp only [AntilipschitzWith, edist_nndist]\n  norm_cast\n\n"}
{"name":"AntilipschitzWith.le_mul_nndist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\na✝ : AntilipschitzWith K f\nx y : α\n⊢ LE.le (NNDist.nndist x y) (HMul.hMul K (NNDist.nndist (f x) (f y)))","decl":"alias ⟨AntilipschitzWith.le_mul_nndist, AntilipschitzWith.of_le_mul_nndist⟩ :=\n  antilipschitzWith_iff_le_mul_nndist\n\n"}
{"name":"AntilipschitzWith.of_le_mul_nndist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\na✝ : ∀ (x y : α), LE.le (NNDist.nndist x y) (HMul.hMul K (NNDist.nndist (f x) (f y)))\n⊢ AntilipschitzWith K f","decl":"alias ⟨AntilipschitzWith.le_mul_nndist, AntilipschitzWith.of_le_mul_nndist⟩ :=\n  antilipschitzWith_iff_le_mul_nndist\n\n"}
{"name":"antilipschitzWith_iff_le_mul_dist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\n⊢ Iff (AntilipschitzWith K f) (∀ (x y : α), LE.le (Dist.dist x y) (HMul.hMul (↑K) (Dist.dist (f x) (f y))))","decl":"theorem antilipschitzWith_iff_le_mul_dist :\n    AntilipschitzWith K f ↔ ∀ x y, dist x y ≤ K * dist (f x) (f y) := by\n  simp only [antilipschitzWith_iff_le_mul_nndist, dist_nndist]\n  norm_cast\n\n"}
{"name":"AntilipschitzWith.le_mul_dist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\na✝ : AntilipschitzWith K f\nx y : α\n⊢ LE.le (Dist.dist x y) (HMul.hMul (↑K) (Dist.dist (f x) (f y)))","decl":"alias ⟨AntilipschitzWith.le_mul_dist, AntilipschitzWith.of_le_mul_dist⟩ :=\n  antilipschitzWith_iff_le_mul_dist\n\n"}
{"name":"AntilipschitzWith.of_le_mul_dist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\na✝ : ∀ (x y : α), LE.le (Dist.dist x y) (HMul.hMul (↑K) (Dist.dist (f x) (f y)))\n⊢ AntilipschitzWith K f","decl":"alias ⟨AntilipschitzWith.le_mul_dist, AntilipschitzWith.of_le_mul_dist⟩ :=\n  antilipschitzWith_iff_le_mul_dist\n\n"}
{"name":"AntilipschitzWith.mul_le_nndist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nx y : α\n⊢ LE.le (HMul.hMul (Inv.inv K) (NNDist.nndist x y)) (NNDist.nndist (f x) (f y))","decl":"theorem mul_le_nndist (hf : AntilipschitzWith K f) (x y : α) :\n    K⁻¹ * nndist x y ≤ nndist (f x) (f y) := by\n  simpa only [div_eq_inv_mul] using NNReal.div_le_of_le_mul' (hf.le_mul_nndist x y)\n\n"}
{"name":"AntilipschitzWith.mul_le_dist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nx y : α\n⊢ LE.le (HMul.hMul (↑(Inv.inv K)) (Dist.dist x y)) (Dist.dist (f x) (f y))","decl":"theorem mul_le_dist (hf : AntilipschitzWith K f) (x y : α) :\n    (K⁻¹ * dist x y : ℝ) ≤ dist (f x) (f y) := mod_cast hf.mul_le_nndist x y\n\n"}
{"name":"AntilipschitzWith.injective","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\n⊢ Function.Injective f","decl":"protected theorem injective {α : Type*} {β : Type*} [EMetricSpace α] [PseudoEMetricSpace β]\n    {K : ℝ≥0} {f : α → β} (hf : AntilipschitzWith K f) : Function.Injective f := fun x y h => by\n  simpa only [h, edist_self, mul_zero, edist_le_zero] using hf x y\n\n"}
{"name":"AntilipschitzWith.mul_le_edist","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nx y : α\n⊢ LE.le (HMul.hMul (Inv.inv ↑K) (EDist.edist x y)) (EDist.edist (f x) (f y))","decl":"theorem mul_le_edist (hf : AntilipschitzWith K f) (x y : α) :\n    (K : ℝ≥0∞)⁻¹ * edist x y ≤ edist (f x) (f y) := by\n  rw [mul_comm, ← div_eq_mul_inv]\n  exact ENNReal.div_le_of_le_mul' (hf x y)\n\n"}
{"name":"AntilipschitzWith.ediam_preimage_le","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ns : Set β\n⊢ LE.le (EMetric.diam (Set.preimage f s)) (HMul.hMul (↑K) (EMetric.diam s))","decl":"theorem ediam_preimage_le (hf : AntilipschitzWith K f) (s : Set β) : diam (f ⁻¹' s) ≤ K * diam s :=\n  diam_le fun x hx y hy => (hf x y).trans <|\n    mul_le_mul_left' (edist_le_diam_of_mem (mem_preimage.1 hx) hy) K\n\n"}
{"name":"AntilipschitzWith.le_mul_ediam_image","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ns : Set α\n⊢ LE.le (EMetric.diam s) (HMul.hMul (↑K) (EMetric.diam (Set.image f s)))","decl":"theorem le_mul_ediam_image (hf : AntilipschitzWith K f) (s : Set α) : diam s ≤ K * diam (f '' s) :=\n  (diam_mono (subset_preimage_image _ _)).trans (hf.ediam_preimage_le (f '' s))\n\n"}
{"name":"AntilipschitzWith.id","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\ninst✝ : PseudoEMetricSpace α\n⊢ AntilipschitzWith 1 id","decl":"protected theorem id : AntilipschitzWith 1 (id : α → α) := fun x y => by\n  simp only [ENNReal.coe_one, one_mul, id, le_refl]\n\n"}
{"name":"AntilipschitzWith.comp","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nKg : NNReal\ng : β → γ\nhg : AntilipschitzWith Kg g\nKf : NNReal\nf : α → β\nhf : AntilipschitzWith Kf f\n⊢ AntilipschitzWith (HMul.hMul Kf Kg) (Function.comp g f)","decl":"theorem comp {Kg : ℝ≥0} {g : β → γ} (hg : AntilipschitzWith Kg g) {Kf : ℝ≥0} {f : α → β}\n    (hf : AntilipschitzWith Kf f) : AntilipschitzWith (Kf * Kg) (g ∘ f) := fun x y =>\n  calc\n    edist x y ≤ Kf * edist (f x) (f y) := hf x y\n    _ ≤ Kf * (Kg * edist (g (f x)) (g (f y))) := mul_left_mono (hg _ _)\n    _ = _ := by rw [ENNReal.coe_mul, mul_assoc]; rfl\n\n"}
{"name":"AntilipschitzWith.restrict","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ns : Set α\n⊢ AntilipschitzWith K (s.restrict f)","decl":"theorem restrict (hf : AntilipschitzWith K f) (s : Set α) : AntilipschitzWith K (s.restrict f) :=\n  fun x y => hf x y\n\n"}
{"name":"AntilipschitzWith.codRestrict","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ns : Set β\nhs : ∀ (x : α), Membership.mem s (f x)\n⊢ AntilipschitzWith K (Set.codRestrict f s hs)","decl":"theorem codRestrict (hf : AntilipschitzWith K f) {s : Set β} (hs : ∀ x, f x ∈ s) :\n    AntilipschitzWith K (s.codRestrict f hs) := fun x y => hf x y\n\n"}
{"name":"AntilipschitzWith.to_rightInvOn'","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\ns : Set α\nhf : AntilipschitzWith K (s.restrict f)\ng : β → α\nt : Set β\ng_maps : Set.MapsTo g t s\ng_inv : Set.RightInvOn g f t\n⊢ LipschitzWith K (t.restrict g)","decl":"theorem to_rightInvOn' {s : Set α} (hf : AntilipschitzWith K (s.restrict f)) {g : β → α}\n    {t : Set β} (g_maps : MapsTo g t s) (g_inv : RightInvOn g f t) :\n    LipschitzWith K (t.restrict g) := fun x y => by\n  simpa only [restrict_apply, g_inv x.mem, g_inv y.mem, Subtype.edist_mk_mk]\n    using hf ⟨g x, g_maps x.mem⟩ ⟨g y, g_maps y.mem⟩\n\n"}
{"name":"AntilipschitzWith.to_rightInvOn","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ng : β → α\nt : Set β\nh : Set.RightInvOn g f t\n⊢ LipschitzWith K (t.restrict g)","decl":"theorem to_rightInvOn (hf : AntilipschitzWith K f) {g : β → α} {t : Set β} (h : RightInvOn g f t) :\n    LipschitzWith K (t.restrict g) :=\n  (hf.restrict univ).to_rightInvOn' (mapsTo_univ g t) h\n\n"}
{"name":"AntilipschitzWith.to_rightInverse","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ng : β → α\nhg : Function.RightInverse g f\n⊢ LipschitzWith K g","decl":"theorem to_rightInverse (hf : AntilipschitzWith K f) {g : β → α} (hg : Function.RightInverse g f) :\n    LipschitzWith K g := by\n  intro x y\n  have := hf (g x) (g y)\n  rwa [hg x, hg y] at this\n\n"}
{"name":"AntilipschitzWith.comap_uniformity_le","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\n⊢ LE.le (Filter.comap (Prod.map f f) (uniformity β)) (uniformity α)","decl":"theorem comap_uniformity_le (hf : AntilipschitzWith K f) : (𝓤 β).comap (Prod.map f f) ≤ 𝓤 α := by\n  refine ((uniformity_basis_edist.comap _).le_basis_iff uniformity_basis_edist).2 fun ε h₀ => ?_\n  refine ⟨(↑K)⁻¹ * ε, ENNReal.mul_pos (ENNReal.inv_ne_zero.2 ENNReal.coe_ne_top) h₀.ne', ?_⟩\n  refine fun x hx => (hf x.1 x.2).trans_lt ?_\n  rw [mul_comm, ← div_eq_mul_inv] at hx\n  rw [mul_comm]\n  exact ENNReal.mul_lt_of_lt_div hx\n\n"}
{"name":"AntilipschitzWith.isUniformInducing","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ IsUniformInducing f","decl":"theorem isUniformInducing (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :\n    IsUniformInducing f :=\n  ⟨le_antisymm hf.comap_uniformity_le hfc.le_comap⟩\n\n"}
{"name":"AntilipschitzWith.uniformInducing","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ IsUniformInducing f","decl":"@[deprecated (since := \"2024-10-05\")]\nalias uniformInducing := isUniformInducing\n\n"}
{"name":"AntilipschitzWith.isUniformEmbedding","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ IsUniformEmbedding f","decl":"lemma isUniformEmbedding {α β : Type*} [EMetricSpace α] [PseudoEMetricSpace β] {K : ℝ≥0} {f : α → β}\n    (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) : IsUniformEmbedding f :=\n  ⟨hf.isUniformInducing hfc, hf.injective⟩\n\n"}
{"name":"AntilipschitzWith.uniformEmbedding","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ IsUniformEmbedding f","decl":"@[deprecated (since := \"2024-10-01\")] alias uniformEmbedding := isUniformEmbedding\n\n"}
{"name":"AntilipschitzWith.isComplete_range","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\ninst✝ : CompleteSpace α\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ IsComplete (Set.range f)","decl":"theorem isComplete_range [CompleteSpace α] (hf : AntilipschitzWith K f)\n    (hfc : UniformContinuous f) : IsComplete (range f) :=\n  (hf.isUniformInducing hfc).isComplete_range\n\n"}
{"name":"AntilipschitzWith.isClosed_range","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : EMetricSpace β\ninst✝ : CompleteSpace α\nf : α → β\nK : NNReal\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ IsClosed (Set.range f)","decl":"theorem isClosed_range {α β : Type*} [PseudoEMetricSpace α] [EMetricSpace β] [CompleteSpace α]\n    {f : α → β} {K : ℝ≥0} (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :\n    IsClosed (range f) :=\n  (hf.isComplete_range hfc).isClosed\n\n"}
{"name":"AntilipschitzWith.isClosedEmbedding","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝² : EMetricSpace α\ninst✝¹ : EMetricSpace β\nK : NNReal\nf : α → β\ninst✝ : CompleteSpace α\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ Topology.IsClosedEmbedding f","decl":"theorem isClosedEmbedding {α : Type*} {β : Type*} [EMetricSpace α] [EMetricSpace β] {K : ℝ≥0}\n    {f : α → β} [CompleteSpace α] (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :\n    IsClosedEmbedding f :=\n  { (hf.isUniformEmbedding hfc).isEmbedding with isClosed_range := hf.isClosed_range hfc }\n\n"}
{"name":"AntilipschitzWith.closedEmbedding","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝² : EMetricSpace α\ninst✝¹ : EMetricSpace β\nK : NNReal\nf : α → β\ninst✝ : CompleteSpace α\nhf : AntilipschitzWith K f\nhfc : UniformContinuous f\n⊢ Topology.IsClosedEmbedding f","decl":"@[deprecated (since := \"2024-10-20\")]\nalias closedEmbedding := isClosedEmbedding\n\n"}
{"name":"AntilipschitzWith.subtype_coe","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\ninst✝ : PseudoEMetricSpace α\ns : Set α\n⊢ AntilipschitzWith 1 Subtype.val","decl":"theorem subtype_coe (s : Set α) : AntilipschitzWith 1 ((↑) : s → α) :=\n  AntilipschitzWith.id.restrict s\n\n"}
{"name":"AntilipschitzWith.of_subsingleton","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\nf : α → β\ninst✝ : Subsingleton α\nK : NNReal\n⊢ AntilipschitzWith K f","decl":"@[nontriviality] -- Porting note: added `nontriviality`\ntheorem of_subsingleton [Subsingleton α] {K : ℝ≥0} : AntilipschitzWith K f := fun x y => by\n  simp only [Subsingleton.elim x y, edist_self, zero_le]\n\n"}
{"name":"AntilipschitzWith.subsingleton","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_4\nβ : Type u_5\ninst✝¹ : EMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : AntilipschitzWith 0 f\n⊢ Subsingleton α","decl":"/-- If `f : α → β` is `0`-antilipschitz, then `α` is a `subsingleton`. -/\nprotected theorem subsingleton {α β} [EMetricSpace α] [PseudoEMetricSpace β] {f : α → β}\n    (h : AntilipschitzWith 0 f) : Subsingleton α :=\n  ⟨fun x y => edist_le_zero.1 <| (h x y).trans_eq <| zero_mul _⟩\n\n"}
{"name":"AntilipschitzWith.isBounded_preimage","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\ns : Set β\nhs : Bornology.IsBounded s\n⊢ Bornology.IsBounded (Set.preimage f s)","decl":"theorem isBounded_preimage (hf : AntilipschitzWith K f) {s : Set β} (hs : IsBounded s) :\n    IsBounded (f ⁻¹' s) :=\n  isBounded_iff_ediam_ne_top.2 <| ne_top_of_le_ne_top\n    (ENNReal.mul_ne_top ENNReal.coe_ne_top hs.ediam_ne_top) (hf.ediam_preimage_le _)\n\n"}
{"name":"AntilipschitzWith.tendsto_cobounded","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nK : NNReal\nf : α → β\nhf : AntilipschitzWith K f\n⊢ Filter.Tendsto f (Bornology.cobounded α) (Bornology.cobounded β)","decl":"theorem tendsto_cobounded (hf : AntilipschitzWith K f) : Tendsto f (cobounded α) (cobounded β) :=\n  compl_surjective.forall.2 fun _ ↦ hf.isBounded_preimage\n\n"}
{"name":"AntilipschitzWith.properSpace","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"β : Type u_2\ninst✝² : PseudoMetricSpace β\nα : Type u_4\ninst✝¹ : MetricSpace α\nK : NNReal\nf : α → β\ninst✝ : ProperSpace α\nhK : AntilipschitzWith K f\nf_cont : Continuous f\nhf : Function.Surjective f\n⊢ ProperSpace β","decl":"/-- The image of a proper space under an expanding onto map is proper. -/\nprotected theorem properSpace {α : Type*} [MetricSpace α] {K : ℝ≥0} {f : α → β} [ProperSpace α]\n    (hK : AntilipschitzWith K f) (f_cont : Continuous f) (hf : Function.Surjective f) :\n    ProperSpace β := by\n  refine ⟨fun x₀ r => ?_⟩\n  let K := f ⁻¹' closedBall x₀ r\n  have A : IsClosed K := isClosed_ball.preimage f_cont\n  have B : IsBounded K := hK.isBounded_preimage isBounded_closedBall\n  have : IsCompact K := isCompact_iff_isClosed_bounded.2 ⟨A, B⟩\n  convert this.image f_cont\n  exact (hf.image_preimage _).symm\n\n"}
{"name":"AntilipschitzWith.isBounded_of_image2_left","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : PseudoMetricSpace α\ninst✝¹ : PseudoMetricSpace β\ninst✝ : PseudoMetricSpace γ\nf : α → β → γ\nK₁ : NNReal\nhf : ∀ (b : β), AntilipschitzWith K₁ fun a => f a b\ns : Set α\nt : Set β\nhst : Bornology.IsBounded (Set.image2 f s t)\n⊢ Or (Bornology.IsBounded s) (Bornology.IsBounded t)","decl":"theorem isBounded_of_image2_left (f : α → β → γ) {K₁ : ℝ≥0}\n    (hf : ∀ b, AntilipschitzWith K₁ fun a => f a b) {s : Set α} {t : Set β}\n    (hst : IsBounded (Set.image2 f s t)) : IsBounded s ∨ IsBounded t := by\n  contrapose! hst\n  obtain ⟨b, hb⟩ : t.Nonempty := nonempty_of_not_isBounded hst.2\n  have : ¬IsBounded (Set.image2 f s {b}) := by\n    intro h\n    apply hst.1\n    rw [Set.image2_singleton_right] at h\n    replace h := (hf b).isBounded_preimage h\n    exact h.subset (subset_preimage_image _ _)\n  exact mt (IsBounded.subset · (image2_subset subset_rfl (singleton_subset_iff.mpr hb))) this\n\n"}
{"name":"AntilipschitzWith.isBounded_of_image2_right","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : PseudoMetricSpace α\ninst✝¹ : PseudoMetricSpace β\ninst✝ : PseudoMetricSpace γ\nf : α → β → γ\nK₂ : NNReal\nhf : ∀ (a : α), AntilipschitzWith K₂ (f a)\ns : Set α\nt : Set β\nhst : Bornology.IsBounded (Set.image2 f s t)\n⊢ Or (Bornology.IsBounded s) (Bornology.IsBounded t)","decl":"theorem isBounded_of_image2_right {f : α → β → γ} {K₂ : ℝ≥0} (hf : ∀ a, AntilipschitzWith K₂ (f a))\n    {s : Set α} {t : Set β} (hst : IsBounded (Set.image2 f s t)) : IsBounded s ∨ IsBounded t :=\n  Or.symm <| isBounded_of_image2_left (flip f) hf <| image2_swap f s t ▸ hst\n\n"}
{"name":"LipschitzWith.to_rightInverse","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\ng : β → α\nhg : Function.RightInverse g f\n⊢ AntilipschitzWith K g","decl":"theorem LipschitzWith.to_rightInverse [PseudoEMetricSpace α] [PseudoEMetricSpace β] {K : ℝ≥0}\n    {f : α → β} (hf : LipschitzWith K f) {g : β → α} (hg : Function.RightInverse g f) :\n    AntilipschitzWith K g := fun x y => by simpa only [hg _] using hf (g x) (g y)\n\n"}
{"name":"LipschitzWith.properSpace","module":"Mathlib.Topology.MetricSpace.Antilipschitz","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : PseudoMetricSpace α\ninst✝¹ : MetricSpace β\ninst✝ : ProperSpace β\nK : NNReal\nf : Homeomorph α β\nhK : LipschitzWith K ⇑f\n⊢ ProperSpace α","decl":"/-- The preimage of a proper space under a Lipschitz homeomorphism is proper. -/\nprotected theorem LipschitzWith.properSpace [PseudoMetricSpace α] [MetricSpace β] [ProperSpace β]\n    {K : ℝ≥0} {f : α ≃ₜ β} (hK : LipschitzWith K f) : ProperSpace α :=\n  (hK.to_rightInverse f.right_inv).properSpace f.symm.continuous f.symm.surjective\n"}
