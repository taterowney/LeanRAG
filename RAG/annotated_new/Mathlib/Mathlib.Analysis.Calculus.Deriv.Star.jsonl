{"name":"HasDerivAtFilter.star","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\nf' : F\nx : 𝕜\nL : Filter 𝕜\nh : HasDerivAtFilter f f' x L\n⊢ HasDerivAtFilter (fun x => Star.star (f x)) (Star.star f') x L","decl":"protected nonrec theorem HasDerivAtFilter.star (h : HasDerivAtFilter f f' x L) :\n    HasDerivAtFilter (fun x => star (f x)) (star f') x L := by\n  simpa using h.star.hasDerivAtFilter\n\n"}
{"name":"HasDerivWithinAt.star","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\nf' : F\ns : Set 𝕜\nx : 𝕜\nh : HasDerivWithinAt f f' s x\n⊢ HasDerivWithinAt (fun x => Star.star (f x)) (Star.star f') s x","decl":"protected nonrec theorem HasDerivWithinAt.star (h : HasDerivWithinAt f f' s x) :\n    HasDerivWithinAt (fun x => star (f x)) (star f') s x :=\n  h.star\n\n"}
{"name":"HasDerivAt.star","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\nf' : F\nx : 𝕜\nh : HasDerivAt f f' x\n⊢ HasDerivAt (fun x => Star.star (f x)) (Star.star f') x","decl":"protected nonrec theorem HasDerivAt.star (h : HasDerivAt f f' x) :\n    HasDerivAt (fun x => star (f x)) (star f') x :=\n  h.star\n\n"}
{"name":"HasStrictDerivAt.star","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\nf' : F\nx : 𝕜\nh : HasStrictDerivAt f f' x\n⊢ HasStrictDerivAt (fun x => Star.star (f x)) (Star.star f') x","decl":"protected nonrec theorem HasStrictDerivAt.star (h : HasStrictDerivAt f f' x) :\n    HasStrictDerivAt (fun x => star (f x)) (star f') x := by simpa using h.star.hasStrictDerivAt\n\n"}
{"name":"derivWithin.star","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\ns : Set 𝕜\nx : 𝕜\n⊢ Eq (derivWithin (fun y => Star.star (f y)) s x) (Star.star (derivWithin f s x))","decl":"protected theorem derivWithin.star :\n    derivWithin (fun y => star (f y)) s x = star (derivWithin f s x) := by\n  rcases uniqueDiffWithinAt_or_nhdsWithin_eq_bot s x with hxs | hxs\n  · exact DFunLike.congr_fun (fderivWithin_star hxs) _\n  · simp [derivWithin_zero_of_isolated hxs]\n\n"}
{"name":"deriv.star","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\nx : 𝕜\n⊢ Eq (deriv (fun y => Star.star (f y)) x) (Star.star (deriv f x))","decl":"protected theorem deriv.star : deriv (fun y => star (f y)) x = star (deriv f x) :=\n  DFunLike.congr_fun fderiv_star _\n\n"}
{"name":"deriv.star'","module":"Mathlib.Analysis.Calculus.Deriv.Star","initialProofState":"𝕜 : Type u\ninst✝⁷ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁶ : NormedAddCommGroup F\ninst✝⁵ : NormedSpace 𝕜 F\nf : 𝕜 → F\ninst✝⁴ : StarRing 𝕜\ninst✝³ : TrivialStar 𝕜\ninst✝² : StarAddMonoid F\ninst✝¹ : ContinuousStar F\ninst✝ : StarModule 𝕜 F\n⊢ Eq (deriv fun y => Star.star (f y)) fun x => Star.star (deriv f x)","decl":"@[simp]\nprotected theorem deriv.star' : (deriv fun y => star (f y)) = fun x => star (deriv f x) :=\n  funext fun _ => deriv.star\n"}
