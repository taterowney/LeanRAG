{"name":"PartitionOfUnity.finsum_smul_mem_convex","module":"Mathlib.Analysis.Convex.PartitionOfUnity","initialProofState":"Œπ : Type u_1\nX : Type u_2\nE : Type u_3\ninst‚úù¬≤ : TopologicalSpace X\ninst‚úù¬π : AddCommGroup E\ninst‚úù : Module Real E\ns : Set X\nf : PartitionOfUnity Œπ X s\ng : Œπ ‚Üí X ‚Üí E\nt : Set E\nx : X\nhx : Membership.mem s x\nhg : ‚àÄ (i : Œπ), Ne ((f i) x) 0 ‚Üí Membership.mem t (g i x)\nht : Convex Real t\n‚ä¢ Membership.mem t (finsum fun i => HSMul.hSMul ((f i) x) (g i x))","decl":"theorem PartitionOfUnity.finsum_smul_mem_convex {s : Set X} (f : PartitionOfUnity Œπ X s)\n    {g : Œπ ‚Üí X ‚Üí E} {t : Set E} {x : X} (hx : x ‚àà s) (hg : ‚àÄ i, f i x ‚â† 0 ‚Üí g i x ‚àà t)\n    (ht : Convex ‚Ñù t) : (‚àë·∂† i, f i x ‚Ä¢ g i x) ‚àà t :=\n  ht.finsum_mem (fun _ => f.nonneg _ _) (f.sum_eq_one hx) hg\n\n"}
{"name":"exists_continuous_forall_mem_convex_of_local","module":"Mathlib.Analysis.Convex.PartitionOfUnity","initialProofState":"X : Type u_2\nE : Type u_3\ninst‚úù‚Å∑ : TopologicalSpace X\ninst‚úù‚Å∂ : AddCommGroup E\ninst‚úù‚Åµ : Module Real E\ninst‚úù‚Å¥ : NormalSpace X\ninst‚úù¬≥ : ParacompactSpace X\ninst‚úù¬≤ : TopologicalSpace E\ninst‚úù¬π : ContinuousAdd E\ninst‚úù : ContinuousSMul Real E\nt : X ‚Üí Set E\nht : ‚àÄ (x : X), Convex Real (t x)\nH : ‚àÄ (x : X), Exists fun U => And (Membership.mem (nhds x) U) (Exists fun g => And (ContinuousOn g U) (‚àÄ (y : X), Membership.mem U y ‚Üí Membership.mem (t y) (g y)))\n‚ä¢ Exists fun g => ‚àÄ (x : X), Membership.mem (t x) (g x)","decl":"/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X ‚Üí Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a neighborhood `U ‚àà ùìù X` and a function `g : X ‚Üí E` that is\ncontinuous on `U` and sends each `y ‚àà U` to a point of `t y`. Then there exists a continuous map\n`g : C(X, E)` such that `g x ‚àà t x` for all `x`. See also\n`exists_continuous_forall_mem_convex_of_local_const`. -/\ntheorem exists_continuous_forall_mem_convex_of_local (ht : ‚àÄ x, Convex ‚Ñù (t x))\n    (H : ‚àÄ x : X, ‚àÉ U ‚àà ùìù x, ‚àÉ g : X ‚Üí E, ContinuousOn g U ‚àß ‚àÄ y ‚àà U, g y ‚àà t y) :\n    ‚àÉ g : C(X, E), ‚àÄ x, g x ‚àà t x := by\n  choose U hU g hgc hgt using H\n  obtain ‚ü®f, hf‚ü© := PartitionOfUnity.exists_isSubordinate isClosed_univ (fun x => interior (U x))\n    (fun x => isOpen_interior) fun x _ => mem_iUnion.2 ‚ü®x, mem_interior_iff_mem_nhds.2 (hU x)‚ü©\n  refine ‚ü®‚ü®fun x => ‚àë·∂† i, f i x ‚Ä¢ g i x,\n    hf.continuous_finsum_smul (fun i => isOpen_interior) fun i => (hgc i).mono interior_subset‚ü©,\n    fun x => f.finsum_smul_mem_convex (mem_univ x) (fun i hi => hgt _ _ ?_) (ht _)‚ü©\n  exact interior_subset (hf _ <| subset_closure hi)\n\n"}
{"name":"exists_continuous_forall_mem_convex_of_local_const","module":"Mathlib.Analysis.Convex.PartitionOfUnity","initialProofState":"X : Type u_2\nE : Type u_3\ninst‚úù‚Å∑ : TopologicalSpace X\ninst‚úù‚Å∂ : AddCommGroup E\ninst‚úù‚Åµ : Module Real E\ninst‚úù‚Å¥ : NormalSpace X\ninst‚úù¬≥ : ParacompactSpace X\ninst‚úù¬≤ : TopologicalSpace E\ninst‚úù¬π : ContinuousAdd E\ninst‚úù : ContinuousSMul Real E\nt : X ‚Üí Set E\nht : ‚àÄ (x : X), Convex Real (t x)\nH : ‚àÄ (x : X), Exists fun c => Filter.Eventually (fun y => Membership.mem (t y) c) (nhds x)\n‚ä¢ Exists fun g => ‚àÄ (x : X), Membership.mem (t x) (g x)","decl":"/-- Let `X` be a normal paracompact topological space (e.g., any extended metric space). Let `E` be\na topological real vector space. Let `t : X ‚Üí Set E` be a family of convex sets. Suppose that for\neach point `x : X`, there exists a vector `c : E` that belongs to `t y` for all `y` in a\nneighborhood of `x`. Then there exists a continuous map `g : C(X, E)` such that `g x ‚àà t x` for all\n`x`. See also `exists_continuous_forall_mem_convex_of_local`. -/\ntheorem exists_continuous_forall_mem_convex_of_local_const (ht : ‚àÄ x, Convex ‚Ñù (t x))\n    (H : ‚àÄ x : X, ‚àÉ c : E, ‚àÄ·∂† y in ùìù x, c ‚àà t y) : ‚àÉ g : C(X, E), ‚àÄ x, g x ‚àà t x :=\n  exists_continuous_forall_mem_convex_of_local ht fun x =>\n    let ‚ü®c, hc‚ü© := H x\n    ‚ü®_, hc, fun _ => c, continuousOn_const, fun _ => id‚ü©\n"}
