{"name":"Polynomial.cardPowDegree_apply","module":"Mathlib.Algebra.Polynomial.Degree.CardPowDegree","initialProofState":"Fq : Type u_1\ninst✝² : Field Fq\ninst✝¹ : Fintype Fq\ninst✝ : DecidableEq Fq\np : Polynomial Fq\n⊢ Eq (Polynomial.cardPowDegree p) (ite (Eq p 0) 0 (HPow.hPow (↑(Fintype.card Fq)) p.natDegree))","decl":"theorem cardPowDegree_apply [DecidableEq Fq] (p : Fq[X]) :\n    cardPowDegree p = if p = 0 then 0 else (Fintype.card Fq : ℤ) ^ natDegree p := by\n  rw [cardPowDegree]\n  dsimp\n  convert rfl\n\n"}
{"name":"Polynomial.cardPowDegree_zero","module":"Mathlib.Algebra.Polynomial.Degree.CardPowDegree","initialProofState":"Fq : Type u_1\ninst✝¹ : Field Fq\ninst✝ : Fintype Fq\n⊢ Eq (Polynomial.cardPowDegree 0) 0","decl":"@[simp]\ntheorem cardPowDegree_zero : cardPowDegree (0 : Fq[X]) = 0 := rfl\n\n"}
{"name":"Polynomial.cardPowDegree_nonzero","module":"Mathlib.Algebra.Polynomial.Degree.CardPowDegree","initialProofState":"Fq : Type u_1\ninst✝¹ : Field Fq\ninst✝ : Fintype Fq\np : Polynomial Fq\nhp : Ne p 0\n⊢ Eq (Polynomial.cardPowDegree p) (HPow.hPow (↑(Fintype.card Fq)) p.natDegree)","decl":"@[simp]\ntheorem cardPowDegree_nonzero (p : Fq[X]) (hp : p ≠ 0) :\n    cardPowDegree p = (Fintype.card Fq : ℤ) ^ p.natDegree :=\n  if_neg hp\n\n"}
{"name":"Polynomial.cardPowDegree_isEuclidean","module":"Mathlib.Algebra.Polynomial.Degree.CardPowDegree","initialProofState":"Fq : Type u_1\ninst✝¹ : Field Fq\ninst✝ : Fintype Fq\n⊢ Polynomial.cardPowDegree.IsEuclidean","decl":"theorem cardPowDegree_isEuclidean : IsEuclidean (cardPowDegree : AbsoluteValue Fq[X] ℤ) :=\n  have card_pos : 0 < Fintype.card Fq := Fintype.card_pos_iff.mpr inferInstance\n  have pow_pos : ∀ n, 0 < (Fintype.card Fq : ℤ) ^ n := fun n =>\n    pow_pos (Int.natCast_pos.mpr card_pos) n\n  { map_lt_map_iff' := fun {p q} => by\n      classical\n      show cardPowDegree p < cardPowDegree q ↔ degree p < degree q\n      simp only [cardPowDegree_apply]\n      split_ifs with hp hq hq\n      · simp only [hp, hq, lt_self_iff_false]\n      · simp only [hp, hq, degree_zero, Ne, bot_lt_iff_ne_bot, degree_eq_bot, pow_pos,\n          not_false_iff]\n      · simp only [hp, hq, degree_zero, not_lt_bot, (pow_pos _).not_lt]\n      · rw [degree_eq_natDegree hp, degree_eq_natDegree hq, Nat.cast_lt, pow_lt_pow_iff_right₀]\n        exact mod_cast @Fintype.one_lt_card Fq _ _ }\n\n"}
