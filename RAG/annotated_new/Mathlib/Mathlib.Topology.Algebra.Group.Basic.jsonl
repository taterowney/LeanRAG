{"name":"Homeomorph.coe_mulLeft","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ Eq ⇑(Homeomorph.mulLeft a) fun x => HMul.hMul a x","decl":"@[to_additive (attr := simp)]\ntheorem Homeomorph.coe_mulLeft (a : G) : ⇑(Homeomorph.mulLeft a) = (a * ·) :=\n  rfl\n\n"}
{"name":"Homeomorph.coe_addLeft","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ Eq ⇑(Homeomorph.addLeft a) fun x => HAdd.hAdd a x","decl":"@[to_additive (attr := simp)]\ntheorem Homeomorph.coe_mulLeft (a : G) : ⇑(Homeomorph.mulLeft a) = (a * ·) :=\n  rfl\n\n"}
{"name":"Homeomorph.addLeft_symm","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ Eq (Homeomorph.addLeft a).symm (Homeomorph.addLeft (Neg.neg a))","decl":"@[to_additive]\ntheorem Homeomorph.mulLeft_symm (a : G) : (Homeomorph.mulLeft a).symm = Homeomorph.mulLeft a⁻¹ := by\n  ext\n  rfl\n\n"}
{"name":"Homeomorph.mulLeft_symm","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ Eq (Homeomorph.mulLeft a).symm (Homeomorph.mulLeft (Inv.inv a))","decl":"@[to_additive]\ntheorem Homeomorph.mulLeft_symm (a : G) : (Homeomorph.mulLeft a).symm = Homeomorph.mulLeft a⁻¹ := by\n  ext\n  rfl\n\n"}
{"name":"isOpenMap_mul_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ IsOpenMap fun x => HMul.hMul a x","decl":"@[to_additive]\nlemma isOpenMap_mul_left (a : G) : IsOpenMap (a * ·) := (Homeomorph.mulLeft a).isOpenMap\n\n"}
{"name":"isOpenMap_add_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ IsOpenMap fun x => HAdd.hAdd a x","decl":"@[to_additive]\nlemma isOpenMap_mul_left (a : G) : IsOpenMap (a * ·) := (Homeomorph.mulLeft a).isOpenMap\n\n"}
{"name":"IsOpen.leftCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\nU : Set G\nh : IsOpen U\nx : G\n⊢ IsOpen (HSMul.hSMul x U)","decl":"@[to_additive IsOpen.left_addCoset]\ntheorem IsOpen.leftCoset {U : Set G} (h : IsOpen U) (x : G) : IsOpen (x • U) :=\n  isOpenMap_mul_left x _ h\n\n"}
{"name":"IsOpen.left_addCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\nU : Set G\nh : IsOpen U\nx : G\n⊢ IsOpen (HVAdd.hVAdd x U)","decl":"@[to_additive IsOpen.left_addCoset]\ntheorem IsOpen.leftCoset {U : Set G} (h : IsOpen U) (x : G) : IsOpen (x • U) :=\n  isOpenMap_mul_left x _ h\n\n"}
{"name":"isClosedMap_add_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ IsClosedMap fun x => HAdd.hAdd a x","decl":"@[to_additive]\nlemma isClosedMap_mul_left (a : G) : IsClosedMap (a * ·) := (Homeomorph.mulLeft a).isClosedMap\n\n"}
{"name":"isClosedMap_mul_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ IsClosedMap fun x => HMul.hMul a x","decl":"@[to_additive]\nlemma isClosedMap_mul_left (a : G) : IsClosedMap (a * ·) := (Homeomorph.mulLeft a).isClosedMap\n\n"}
{"name":"IsClosed.leftCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\nU : Set G\nh : IsClosed U\nx : G\n⊢ IsClosed (HSMul.hSMul x U)","decl":"@[to_additive IsClosed.left_addCoset]\ntheorem IsClosed.leftCoset {U : Set G} (h : IsClosed U) (x : G) : IsClosed (x • U) :=\n  isClosedMap_mul_left x _ h\n\n"}
{"name":"IsClosed.left_addCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\nU : Set G\nh : IsClosed U\nx : G\n⊢ IsClosed (HVAdd.hVAdd x U)","decl":"@[to_additive IsClosed.left_addCoset]\ntheorem IsClosed.leftCoset {U : Set G} (h : IsClosed U) (x : G) : IsClosed (x • U) :=\n  isClosedMap_mul_left x _ h\n\n"}
{"name":"Homeomorph.coe_mulRight","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ Eq ⇑(Homeomorph.mulRight a) fun x => HMul.hMul x a","decl":"@[to_additive (attr := simp)]\nlemma Homeomorph.coe_mulRight (a : G) : ⇑(Homeomorph.mulRight a) = (· * a) := rfl\n\n"}
{"name":"Homeomorph.coe_addRight","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ Eq ⇑(Homeomorph.addRight a) fun x => HAdd.hAdd x a","decl":"@[to_additive (attr := simp)]\nlemma Homeomorph.coe_mulRight (a : G) : ⇑(Homeomorph.mulRight a) = (· * a) := rfl\n\n"}
{"name":"Homeomorph.addRight_symm","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ Eq (Homeomorph.addRight a).symm (Homeomorph.addRight (Neg.neg a))","decl":"@[to_additive]\ntheorem Homeomorph.mulRight_symm (a : G) :\n    (Homeomorph.mulRight a).symm = Homeomorph.mulRight a⁻¹ := by\n  ext\n  rfl\n\n"}
{"name":"Homeomorph.mulRight_symm","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ Eq (Homeomorph.mulRight a).symm (Homeomorph.mulRight (Inv.inv a))","decl":"@[to_additive]\ntheorem Homeomorph.mulRight_symm (a : G) :\n    (Homeomorph.mulRight a).symm = Homeomorph.mulRight a⁻¹ := by\n  ext\n  rfl\n\n"}
{"name":"isOpenMap_mul_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ IsOpenMap fun x => HMul.hMul x a","decl":"@[to_additive]\ntheorem isOpenMap_mul_right (a : G) : IsOpenMap (· * a) :=\n  (Homeomorph.mulRight a).isOpenMap\n\n"}
{"name":"isOpenMap_add_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ IsOpenMap fun x => HAdd.hAdd x a","decl":"@[to_additive]\ntheorem isOpenMap_mul_right (a : G) : IsOpenMap (· * a) :=\n  (Homeomorph.mulRight a).isOpenMap\n\n"}
{"name":"IsOpen.rightCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\nU : Set G\nh : IsOpen U\nx : G\n⊢ IsOpen (HSMul.hSMul (MulOpposite.op x) U)","decl":"@[to_additive IsOpen.right_addCoset]\ntheorem IsOpen.rightCoset {U : Set G} (h : IsOpen U) (x : G) : IsOpen (op x • U) :=\n  isOpenMap_mul_right x _ h\n\n"}
{"name":"IsOpen.right_addCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\nU : Set G\nh : IsOpen U\nx : G\n⊢ IsOpen (HVAdd.hVAdd (AddOpposite.op x) U)","decl":"@[to_additive IsOpen.right_addCoset]\ntheorem IsOpen.rightCoset {U : Set G} (h : IsOpen U) (x : G) : IsOpen (op x • U) :=\n  isOpenMap_mul_right x _ h\n\n"}
{"name":"isClosedMap_add_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\na : G\n⊢ IsClosedMap fun x => HAdd.hAdd x a","decl":"@[to_additive]\ntheorem isClosedMap_mul_right (a : G) : IsClosedMap (· * a) :=\n  (Homeomorph.mulRight a).isClosedMap\n\n"}
{"name":"isClosedMap_mul_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\na : G\n⊢ IsClosedMap fun x => HMul.hMul x a","decl":"@[to_additive]\ntheorem isClosedMap_mul_right (a : G) : IsClosedMap (· * a) :=\n  (Homeomorph.mulRight a).isClosedMap\n\n"}
{"name":"IsClosed.rightCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\nU : Set G\nh : IsClosed U\nx : G\n⊢ IsClosed (HSMul.hSMul (MulOpposite.op x) U)","decl":"@[to_additive IsClosed.right_addCoset]\ntheorem IsClosed.rightCoset {U : Set G} (h : IsClosed U) (x : G) : IsClosed (op x • U) :=\n  isClosedMap_mul_right x _ h\n\n"}
{"name":"IsClosed.right_addCoset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\nU : Set G\nh : IsClosed U\nx : G\n⊢ IsClosed (HVAdd.hVAdd (AddOpposite.op x) U)","decl":"@[to_additive IsClosed.right_addCoset]\ntheorem IsClosed.rightCoset {U : Set G} (h : IsClosed U) (x : G) : IsClosed (op x • U) :=\n  isClosedMap_mul_right x _ h\n\n"}
{"name":"discreteTopology_of_isOpen_singleton_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\nh : IsOpen (Singleton.singleton 0)\n⊢ DiscreteTopology G","decl":"@[to_additive]\ntheorem discreteTopology_of_isOpen_singleton_one (h : IsOpen ({1} : Set G)) :\n    DiscreteTopology G := by\n  rw [← singletons_open_iff_discrete]\n  intro g\n  suffices {g} = (g⁻¹ * ·) ⁻¹' {1} by\n    rw [this]\n    exact (continuous_mul_left g⁻¹).isOpen_preimage _ h\n  simp only [mul_one, Set.preimage_mul_left_singleton, eq_self_iff_true, inv_inv,\n    Set.singleton_eq_singleton_iff]\n\n"}
{"name":"discreteTopology_of_isOpen_singleton_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\nh : IsOpen (Singleton.singleton 1)\n⊢ DiscreteTopology G","decl":"@[to_additive]\ntheorem discreteTopology_of_isOpen_singleton_one (h : IsOpen ({1} : Set G)) :\n    DiscreteTopology G := by\n  rw [← singletons_open_iff_discrete]\n  intro g\n  suffices {g} = (g⁻¹ * ·) ⁻¹' {1} by\n    rw [this]\n    exact (continuous_mul_left g⁻¹).isOpen_preimage _ h\n  simp only [mul_one, Set.preimage_mul_left_singleton, eq_self_iff_true, inv_inv,\n    Set.singleton_eq_singleton_iff]\n\n"}
{"name":"discreteTopology_iff_isOpen_singleton_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\n⊢ Iff (DiscreteTopology G) (IsOpen (Singleton.singleton 0))","decl":"@[to_additive]\ntheorem discreteTopology_iff_isOpen_singleton_one : DiscreteTopology G ↔ IsOpen ({1} : Set G) :=\n  ⟨fun h => forall_open_iff_discrete.mpr h {1}, discreteTopology_of_isOpen_singleton_one⟩\n\n"}
{"name":"discreteTopology_iff_isOpen_singleton_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\n⊢ Iff (DiscreteTopology G) (IsOpen (Singleton.singleton 1))","decl":"@[to_additive]\ntheorem discreteTopology_iff_isOpen_singleton_one : DiscreteTopology G ↔ IsOpen ({1} : Set G) :=\n  ⟨fun h => forall_open_iff_discrete.mpr h {1}, discreteTopology_of_isOpen_singleton_one⟩\n\n"}
{"name":"ContinuousNeg.continuous_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : TopologicalSpace G\ninst✝ : Neg G\nself : ContinuousNeg G\n⊢ Continuous fun a => Neg.neg a","decl":"/-- Basic hypothesis to talk about a topological additive group. A topological additive group\nover `M`, for example, is obtained by requiring the instances `AddGroup M` and\n`ContinuousAdd M` and `ContinuousNeg M`. -/\nclass ContinuousNeg (G : Type u) [TopologicalSpace G] [Neg G] : Prop where\n  continuous_neg : Continuous fun a : G => -a\n\n"}
{"name":"ContinuousInv.continuous_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : TopologicalSpace G\ninst✝ : Inv G\nself : ContinuousInv G\n⊢ Continuous fun a => Inv.inv a","decl":"/-- Basic hypothesis to talk about a topological group. A topological group over `M`, for example,\nis obtained by requiring the instances `Group M` and `ContinuousMul M` and\n`ContinuousInv M`. -/\n@[to_additive (attr := continuity)]\nclass ContinuousInv (G : Type u) [TopologicalSpace G] [Inv G] : Prop where\n  continuous_inv : Continuous fun a : G => a⁻¹\n\n"}
{"name":"ContinuousNeg.induced","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝⁴ : FunLike F α β\ninst✝³ : AddGroup α\ninst✝² : AddGroup β\ninst✝¹ : AddMonoidHomClass F α β\ntβ : TopologicalSpace β\ninst✝ : ContinuousNeg β\nf : F\n⊢ ContinuousNeg α","decl":"@[to_additive]\ntheorem ContinuousInv.induced {α : Type*} {β : Type*} {F : Type*} [FunLike F α β] [Group α]\n    [Group β] [MonoidHomClass F α β] [tβ : TopologicalSpace β] [ContinuousInv β] (f : F) :\n    @ContinuousInv α (tβ.induced f) _ := by\n  let _tα := tβ.induced f\n  refine ⟨continuous_induced_rng.2 ?_⟩\n  simp only [Function.comp_def, map_inv]\n  fun_prop\n\n"}
{"name":"ContinuousInv.induced","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝⁴ : FunLike F α β\ninst✝³ : Group α\ninst✝² : Group β\ninst✝¹ : MonoidHomClass F α β\ntβ : TopologicalSpace β\ninst✝ : ContinuousInv β\nf : F\n⊢ ContinuousInv α","decl":"@[to_additive]\ntheorem ContinuousInv.induced {α : Type*} {β : Type*} {F : Type*} [FunLike F α β] [Group α]\n    [Group β] [MonoidHomClass F α β] [tβ : TopologicalSpace β] [ContinuousInv β] (f : F) :\n    @ContinuousInv α (tβ.induced f) _ := by\n  let _tα := tβ.induced f\n  refine ⟨continuous_induced_rng.2 ?_⟩\n  simp only [Function.comp_def, map_inv]\n  fun_prop\n\n"}
{"name":"Specializes.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\nx y : G\nh : Specializes x y\n⊢ Specializes (Inv.inv x) (Inv.inv y)","decl":"@[to_additive]\nprotected theorem Specializes.inv {x y : G} (h : x ⤳ y) : (x⁻¹) ⤳ (y⁻¹) :=\n  h.map continuous_inv\n\n"}
{"name":"Specializes.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\nx y : G\nh : Specializes x y\n⊢ Specializes (Neg.neg x) (Neg.neg y)","decl":"@[to_additive]\nprotected theorem Specializes.inv {x y : G} (h : x ⤳ y) : (x⁻¹) ⤳ (y⁻¹) :=\n  h.map continuous_inv\n\n"}
{"name":"Inseparable.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\nx y : G\nh : Inseparable x y\n⊢ Inseparable (Inv.inv x) (Inv.inv y)","decl":"@[to_additive]\nprotected theorem Inseparable.inv {x y : G} (h : Inseparable x y) : Inseparable (x⁻¹) (y⁻¹) :=\n  h.map continuous_inv\n\n"}
{"name":"Inseparable.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\nx y : G\nh : Inseparable x y\n⊢ Inseparable (Neg.neg x) (Neg.neg y)","decl":"@[to_additive]\nprotected theorem Inseparable.inv {x y : G} (h : Inseparable x y) : Inseparable (x⁻¹) (y⁻¹) :=\n  h.map continuous_inv\n\n"}
{"name":"Specializes.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝³ : SubNegMonoid G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousAdd G\ninst✝ : ContinuousNeg G\nx y : G\nh : Specializes x y\nm : Int\n⊢ Specializes (HSMul.hSMul m x) (HSMul.hSMul m y)","decl":"@[to_additive]\nprotected theorem Specializes.zpow {G : Type*} [DivInvMonoid G] [TopologicalSpace G]\n    [ContinuousMul G] [ContinuousInv G] {x y : G} (h : x ⤳ y) : ∀ m : ℤ, (x ^ m) ⤳ (y ^ m)\n  | .ofNat n => by simpa using h.pow n\n  | .negSucc n => by simpa using (h.pow (n + 1)).inv\n\n"}
{"name":"Specializes.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝³ : DivInvMonoid G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousMul G\ninst✝ : ContinuousInv G\nx y : G\nh : Specializes x y\nm : Int\n⊢ Specializes (HPow.hPow x m) (HPow.hPow y m)","decl":"@[to_additive]\nprotected theorem Specializes.zpow {G : Type*} [DivInvMonoid G] [TopologicalSpace G]\n    [ContinuousMul G] [ContinuousInv G] {x y : G} (h : x ⤳ y) : ∀ m : ℤ, (x ^ m) ⤳ (y ^ m)\n  | .ofNat n => by simpa using h.pow n\n  | .negSucc n => by simpa using (h.pow (n + 1)).inv\n\n"}
{"name":"Inseparable.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝³ : DivInvMonoid G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousMul G\ninst✝ : ContinuousInv G\nx y : G\nh : Inseparable x y\nm : Int\n⊢ Inseparable (HPow.hPow x m) (HPow.hPow y m)","decl":"@[to_additive]\nprotected theorem Inseparable.zpow {G : Type*} [DivInvMonoid G] [TopologicalSpace G]\n    [ContinuousMul G] [ContinuousInv G] {x y : G} (h : Inseparable x y) (m : ℤ) :\n    Inseparable (x ^ m) (y ^ m) :=\n  (h.specializes.zpow m).antisymm (h.specializes'.zpow m)\n\n"}
{"name":"Inseparable.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝³ : SubNegMonoid G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousAdd G\ninst✝ : ContinuousNeg G\nx y : G\nh : Inseparable x y\nm : Int\n⊢ Inseparable (HSMul.hSMul m x) (HSMul.hSMul m y)","decl":"@[to_additive]\nprotected theorem Inseparable.zpow {G : Type*} [DivInvMonoid G] [TopologicalSpace G]\n    [ContinuousMul G] [ContinuousInv G] {x y : G} (h : Inseparable x y) (m : ℤ) :\n    Inseparable (x ^ m) (y ^ m) :=\n  (h.specializes.zpow m).antisymm (h.specializes'.zpow m)\n\n"}
{"name":"instContinuousNegULift","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\n⊢ ContinuousNeg (ULift.{u_1, w} G)","decl":"@[to_additive]\ninstance : ContinuousInv (ULift G) :=\n  ⟨continuous_uLift_up.comp (continuous_inv.comp continuous_uLift_down)⟩\n\n"}
{"name":"instContinuousInvULift","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\n⊢ ContinuousInv (ULift.{u_1, w} G)","decl":"@[to_additive]\ninstance : ContinuousInv (ULift G) :=\n  ⟨continuous_uLift_up.comp (continuous_inv.comp continuous_uLift_down)⟩\n\n"}
{"name":"continuousOn_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\ns : Set G\n⊢ ContinuousOn Neg.neg s","decl":"@[to_additive]\ntheorem continuousOn_inv {s : Set G} : ContinuousOn Inv.inv s :=\n  continuous_inv.continuousOn\n\n"}
{"name":"continuousOn_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\ns : Set G\n⊢ ContinuousOn Inv.inv s","decl":"@[to_additive]\ntheorem continuousOn_inv {s : Set G} : ContinuousOn Inv.inv s :=\n  continuous_inv.continuousOn\n\n"}
{"name":"continuousWithinAt_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\ns : Set G\nx : G\n⊢ ContinuousWithinAt Inv.inv s x","decl":"@[to_additive]\ntheorem continuousWithinAt_inv {s : Set G} {x : G} : ContinuousWithinAt Inv.inv s x :=\n  continuous_inv.continuousWithinAt\n\n"}
{"name":"continuousWithinAt_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\ns : Set G\nx : G\n⊢ ContinuousWithinAt Neg.neg s x","decl":"@[to_additive]\ntheorem continuousWithinAt_inv {s : Set G} {x : G} : ContinuousWithinAt Inv.inv s x :=\n  continuous_inv.continuousWithinAt\n\n"}
{"name":"continuousAt_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\nx : G\n⊢ ContinuousAt Neg.neg x","decl":"@[to_additive]\ntheorem continuousAt_inv {x : G} : ContinuousAt Inv.inv x :=\n  continuous_inv.continuousAt\n\n"}
{"name":"continuousAt_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\nx : G\n⊢ ContinuousAt Inv.inv x","decl":"@[to_additive]\ntheorem continuousAt_inv {x : G} : ContinuousAt Inv.inv x :=\n  continuous_inv.continuousAt\n\n"}
{"name":"tendsto_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\na : G\n⊢ Filter.Tendsto Inv.inv (nhds a) (nhds (Inv.inv a))","decl":"@[to_additive]\ntheorem tendsto_inv (a : G) : Tendsto Inv.inv (𝓝 a) (𝓝 a⁻¹) :=\n  continuousAt_inv\n\n"}
{"name":"tendsto_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\na : G\n⊢ Filter.Tendsto Neg.neg (nhds a) (nhds (Neg.neg a))","decl":"@[to_additive]\ntheorem tendsto_inv (a : G) : Tendsto Inv.inv (𝓝 a) (𝓝 a⁻¹) :=\n  continuousAt_inv\n\n"}
{"name":"Filter.Tendsto.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\nf : α → G\nl : Filter α\ny : G\nh : Filter.Tendsto f l (nhds y)\n⊢ Filter.Tendsto (fun x => Neg.neg (f x)) l (nhds (Neg.neg y))","decl":"/-- If a function converges to a value in a multiplicative topological group, then its inverse\nconverges to the inverse of this value. For the version in normed fields assuming additionally\nthat the limit is nonzero, use `Tendsto.inv'`. -/\n@[to_additive\n  \"If a function converges to a value in an additive topological group, then its\n  negation converges to the negation of this value.\"]\ntheorem Filter.Tendsto.inv {f : α → G} {l : Filter α} {y : G} (h : Tendsto f l (𝓝 y)) :\n    Tendsto (fun x => (f x)⁻¹) l (𝓝 y⁻¹) :=\n  (continuous_inv.tendsto y).comp h\n\n"}
{"name":"Filter.Tendsto.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\nf : α → G\nl : Filter α\ny : G\nh : Filter.Tendsto f l (nhds y)\n⊢ Filter.Tendsto (fun x => Inv.inv (f x)) l (nhds (Inv.inv y))","decl":"/-- If a function converges to a value in a multiplicative topological group, then its inverse\nconverges to the inverse of this value. For the version in normed fields assuming additionally\nthat the limit is nonzero, use `Tendsto.inv'`. -/\n@[to_additive\n  \"If a function converges to a value in an additive topological group, then its\n  negation converges to the negation of this value.\"]\ntheorem Filter.Tendsto.inv {f : α → G} {l : Filter α} {y : G} (h : Tendsto f l (𝓝 y)) :\n    Tendsto (fun x => (f x)⁻¹) l (𝓝 y⁻¹) :=\n  (continuous_inv.tendsto y).comp h\n\n"}
{"name":"Continuous.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Inv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\nhf : Continuous f\n⊢ Continuous fun x => Inv.inv (f x)","decl":"@[to_additive (attr := continuity, fun_prop)]\ntheorem Continuous.inv (hf : Continuous f) : Continuous fun x => (f x)⁻¹ :=\n  continuous_inv.comp hf\n\n"}
{"name":"Continuous.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Neg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\nhf : Continuous f\n⊢ Continuous fun x => Neg.neg (f x)","decl":"@[to_additive (attr := continuity, fun_prop)]\ntheorem Continuous.inv (hf : Continuous f) : Continuous fun x => (f x)⁻¹ :=\n  continuous_inv.comp hf\n\n"}
{"name":"ContinuousAt.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Inv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\nhf : ContinuousAt f x\n⊢ ContinuousAt (fun x => Inv.inv (f x)) x","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousAt.inv (hf : ContinuousAt f x) : ContinuousAt (fun x => (f x)⁻¹) x :=\n  continuousAt_inv.comp hf\n\n"}
{"name":"ContinuousAt.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Neg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\nhf : ContinuousAt f x\n⊢ ContinuousAt (fun x => Neg.neg (f x)) x","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousAt.inv (hf : ContinuousAt f x) : ContinuousAt (fun x => (f x)⁻¹) x :=\n  continuousAt_inv.comp hf\n\n"}
{"name":"ContinuousOn.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Neg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\nhf : ContinuousOn f s\n⊢ ContinuousOn (fun x => Neg.neg (f x)) s","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousOn.inv (hf : ContinuousOn f s) : ContinuousOn (fun x => (f x)⁻¹) s :=\n  continuous_inv.comp_continuousOn hf\n\n"}
{"name":"ContinuousOn.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Inv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\nhf : ContinuousOn f s\n⊢ ContinuousOn (fun x => Inv.inv (f x)) s","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousOn.inv (hf : ContinuousOn f s) : ContinuousOn (fun x => (f x)⁻¹) s :=\n  continuous_inv.comp_continuousOn hf\n\n"}
{"name":"ContinuousWithinAt.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Inv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\nx : α\nhf : ContinuousWithinAt f s x\n⊢ ContinuousWithinAt (fun x => Inv.inv (f x)) s x","decl":"@[to_additive]\ntheorem ContinuousWithinAt.inv (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => (f x)⁻¹) s x :=\n  Filter.Tendsto.inv hf\n\n"}
{"name":"ContinuousWithinAt.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Neg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\nx : α\nhf : ContinuousWithinAt f s x\n⊢ ContinuousWithinAt (fun x => Neg.neg (f x)) s x","decl":"@[to_additive]\ntheorem ContinuousWithinAt.inv (hf : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => (f x)⁻¹) s x :=\n  Filter.Tendsto.inv hf\n\n"}
{"name":"OrderDual.instContinuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝¹ : TopologicalSpace G\ninst✝ : Inv G\n⊢ ContinuousInv (OrderDual G)","decl":"@[to_additive]\ninstance OrderDual.instContinuousInv : ContinuousInv Gᵒᵈ := ‹ContinuousInv G›\n\n"}
{"name":"OrderDual.instContinuousNeg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝¹ : TopologicalSpace G\ninst✝ : Neg G\n⊢ ContinuousNeg (OrderDual G)","decl":"@[to_additive]\ninstance OrderDual.instContinuousInv : ContinuousInv Gᵒᵈ := ‹ContinuousInv G›\n\n"}
{"name":"Prod.continuousNeg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Neg G\ninst✝³ : ContinuousNeg G\ninst✝² : TopologicalSpace H\ninst✝¹ : Neg H\ninst✝ : ContinuousNeg H\n⊢ ContinuousNeg (Prod G H)","decl":"@[to_additive]\ninstance Prod.continuousInv [TopologicalSpace H] [Inv H] [ContinuousInv H] :\n    ContinuousInv (G × H) :=\n  ⟨continuous_inv.fst'.prod_mk continuous_inv.snd'⟩\n\n"}
{"name":"Prod.continuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Inv G\ninst✝³ : ContinuousInv G\ninst✝² : TopologicalSpace H\ninst✝¹ : Inv H\ninst✝ : ContinuousInv H\n⊢ ContinuousInv (Prod G H)","decl":"@[to_additive]\ninstance Prod.continuousInv [TopologicalSpace H] [Inv H] [ContinuousInv H] :\n    ContinuousInv (G × H) :=\n  ⟨continuous_inv.fst'.prod_mk continuous_inv.snd'⟩\n\n"}
{"name":"Pi.continuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"ι : Type u_1\nC : ι → Type u_2\ninst✝² : (i : ι) → TopologicalSpace (C i)\ninst✝¹ : (i : ι) → Inv (C i)\ninst✝ : ∀ (i : ι), ContinuousInv (C i)\n⊢ ContinuousInv ((i : ι) → C i)","decl":"@[to_additive]\ninstance Pi.continuousInv {C : ι → Type*} [∀ i, TopologicalSpace (C i)] [∀ i, Inv (C i)]\n    [∀ i, ContinuousInv (C i)] : ContinuousInv (∀ i, C i) where\n  continuous_inv := continuous_pi fun i => (continuous_apply i).inv\n\n"}
{"name":"Pi.continuousNeg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"ι : Type u_1\nC : ι → Type u_2\ninst✝² : (i : ι) → TopologicalSpace (C i)\ninst✝¹ : (i : ι) → Neg (C i)\ninst✝ : ∀ (i : ι), ContinuousNeg (C i)\n⊢ ContinuousNeg ((i : ι) → C i)","decl":"@[to_additive]\ninstance Pi.continuousInv {C : ι → Type*} [∀ i, TopologicalSpace (C i)] [∀ i, Inv (C i)]\n    [∀ i, ContinuousInv (C i)] : ContinuousInv (∀ i, C i) where\n  continuous_inv := continuous_pi fun i => (continuous_apply i).inv\n\n"}
{"name":"Pi.has_continuous_neg'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Neg G\ninst✝ : ContinuousNeg G\nι : Type u_1\n⊢ ContinuousNeg (ι → G)","decl":"/-- A version of `Pi.continuousInv` for non-dependent functions. It is needed because sometimes\nLean fails to use `Pi.continuousInv` for non-dependent functions. -/\n@[to_additive\n  \"A version of `Pi.continuousNeg` for non-dependent functions. It is needed\n  because sometimes Lean fails to use `Pi.continuousNeg` for non-dependent functions.\"]\ninstance Pi.has_continuous_inv' : ContinuousInv (ι → G) :=\n  Pi.continuousInv\n\n"}
{"name":"Pi.has_continuous_inv'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Inv G\ninst✝ : ContinuousInv G\nι : Type u_1\n⊢ ContinuousInv (ι → G)","decl":"/-- A version of `Pi.continuousInv` for non-dependent functions. It is needed because sometimes\nLean fails to use `Pi.continuousInv` for non-dependent functions. -/\n@[to_additive\n  \"A version of `Pi.continuousNeg` for non-dependent functions. It is needed\n  because sometimes Lean fails to use `Pi.continuousNeg` for non-dependent functions.\"]\ninstance Pi.has_continuous_inv' : ContinuousInv (ι → G) :=\n  Pi.continuousInv\n\n"}
{"name":"continuousInv_of_discreteTopology","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : Inv H\ninst✝ : DiscreteTopology H\n⊢ ContinuousInv H","decl":"@[to_additive]\ninstance (priority := 100) continuousInv_of_discreteTopology [TopologicalSpace H] [Inv H]\n    [DiscreteTopology H] : ContinuousInv H :=\n  ⟨continuous_of_discreteTopology⟩\n\n"}
{"name":"continuousNeg_of_discreteTopology","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : Neg H\ninst✝ : DiscreteTopology H\n⊢ ContinuousNeg H","decl":"@[to_additive]\ninstance (priority := 100) continuousInv_of_discreteTopology [TopologicalSpace H] [Inv H]\n    [DiscreteTopology H] : ContinuousInv H :=\n  ⟨continuous_of_discreteTopology⟩\n\n"}
{"name":"isClosed_setOf_map_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝⁴ : TopologicalSpace G₂\ninst✝³ : T2Space G₂\ninst✝² : Neg G₁\ninst✝¹ : Neg G₂\ninst✝ : ContinuousNeg G₂\n⊢ IsClosed (setOf fun f => ∀ (x : G₁), Eq (f (Neg.neg x)) (Neg.neg (f x)))","decl":"@[to_additive]\ntheorem isClosed_setOf_map_inv [Inv G₁] [Inv G₂] [ContinuousInv G₂] :\n    IsClosed { f : G₁ → G₂ | ∀ x, f x⁻¹ = (f x)⁻¹ } := by\n  simp only [setOf_forall]\n  exact isClosed_iInter fun i => isClosed_eq (continuous_apply _) (continuous_apply _).inv\n\n"}
{"name":"isClosed_setOf_map_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝⁴ : TopologicalSpace G₂\ninst✝³ : T2Space G₂\ninst✝² : Inv G₁\ninst✝¹ : Inv G₂\ninst✝ : ContinuousInv G₂\n⊢ IsClosed (setOf fun f => ∀ (x : G₁), Eq (f (Inv.inv x)) (Inv.inv (f x)))","decl":"@[to_additive]\ntheorem isClosed_setOf_map_inv [Inv G₁] [Inv G₂] [ContinuousInv G₂] :\n    IsClosed { f : G₁ → G₂ | ∀ x, f x⁻¹ = (f x)⁻¹ } := by\n  simp only [setOf_forall]\n  exact isClosed_iInter fun i => isClosed_eq (continuous_apply _) (continuous_apply _).inv\n\n"}
{"name":"instContinuousNegAdditiveOfContinuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : Inv H\ninst✝ : ContinuousInv H\n⊢ ContinuousNeg (Additive H)","decl":"instance [TopologicalSpace H] [Inv H] [ContinuousInv H] : ContinuousNeg (Additive H) where\n  continuous_neg := @continuous_inv H _ _ _\n\n"}
{"name":"instContinuousInvMultiplicativeOfContinuousNeg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : Neg H\ninst✝ : ContinuousNeg H\n⊢ ContinuousInv (Multiplicative H)","decl":"instance [TopologicalSpace H] [Neg H] [ContinuousNeg H] : ContinuousInv (Multiplicative H) where\n  continuous_inv := @continuous_neg H _ _ _\n\n"}
{"name":"IsCompact.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\ns : Set G\nhs : IsCompact s\n⊢ IsCompact (Neg.neg s)","decl":"@[to_additive]\ntheorem IsCompact.inv (hs : IsCompact s) : IsCompact s⁻¹ := by\n  rw [← image_inv_eq_inv]\n  exact hs.image continuous_inv\n\n"}
{"name":"IsCompact.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\ns : Set G\nhs : IsCompact s\n⊢ IsCompact (Inv.inv s)","decl":"@[to_additive]\ntheorem IsCompact.inv (hs : IsCompact s) : IsCompact s⁻¹ := by\n  rw [← image_inv_eq_inv]\n  exact hs.image continuous_inv\n\n"}
{"name":"Homeomorph.coe_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\n⊢ Eq (⇑(Homeomorph.neg G)) Neg.neg","decl":"@[to_additive (attr := simp)]\nlemma Homeomorph.coe_inv {G : Type*} [TopologicalSpace G] [InvolutiveInv G] [ContinuousInv G] :\n    ⇑(Homeomorph.inv G) = Inv.inv := rfl\n\n"}
{"name":"Homeomorph.coe_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\n⊢ Eq (⇑(Homeomorph.inv G)) Inv.inv","decl":"@[to_additive (attr := simp)]\nlemma Homeomorph.coe_inv {G : Type*} [TopologicalSpace G] [InvolutiveInv G] [ContinuousInv G] :\n    ⇑(Homeomorph.inv G) = Inv.inv := rfl\n\n"}
{"name":"nhds_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\na : G\n⊢ Eq (nhds (Neg.neg a)) (Neg.neg (nhds a))","decl":"@[to_additive]\ntheorem nhds_inv (a : G) : 𝓝 a⁻¹ = (𝓝 a)⁻¹ :=\n  ((Homeomorph.inv G).map_nhds_eq a).symm\n\n"}
{"name":"nhds_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\na : G\n⊢ Eq (nhds (Inv.inv a)) (Inv.inv (nhds a))","decl":"@[to_additive]\ntheorem nhds_inv (a : G) : 𝓝 a⁻¹ = (𝓝 a)⁻¹ :=\n  ((Homeomorph.inv G).map_nhds_eq a).symm\n\n"}
{"name":"isOpenMap_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\n⊢ IsOpenMap Inv.inv","decl":"@[to_additive]\ntheorem isOpenMap_inv : IsOpenMap (Inv.inv : G → G) :=\n  (Homeomorph.inv _).isOpenMap\n\n"}
{"name":"isOpenMap_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\n⊢ IsOpenMap Neg.neg","decl":"@[to_additive]\ntheorem isOpenMap_inv : IsOpenMap (Inv.inv : G → G) :=\n  (Homeomorph.inv _).isOpenMap\n\n"}
{"name":"isClosedMap_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\n⊢ IsClosedMap Inv.inv","decl":"@[to_additive]\ntheorem isClosedMap_inv : IsClosedMap (Inv.inv : G → G) :=\n  (Homeomorph.inv _).isClosedMap\n\n"}
{"name":"isClosedMap_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\n⊢ IsClosedMap Neg.neg","decl":"@[to_additive]\ntheorem isClosedMap_inv : IsClosedMap (Inv.inv : G → G) :=\n  (Homeomorph.inv _).isClosedMap\n\n"}
{"name":"IsOpen.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\ns : Set G\nhs : IsOpen s\n⊢ IsOpen (Neg.neg s)","decl":"@[to_additive]\ntheorem IsOpen.inv (hs : IsOpen s) : IsOpen s⁻¹ :=\n  hs.preimage continuous_inv\n\n"}
{"name":"IsOpen.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\ns : Set G\nhs : IsOpen s\n⊢ IsOpen (Inv.inv s)","decl":"@[to_additive]\ntheorem IsOpen.inv (hs : IsOpen s) : IsOpen s⁻¹ :=\n  hs.preimage continuous_inv\n\n"}
{"name":"IsClosed.neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\ns : Set G\nhs : IsClosed s\n⊢ IsClosed (Neg.neg s)","decl":"@[to_additive]\ntheorem IsClosed.inv (hs : IsClosed s) : IsClosed s⁻¹ :=\n  hs.preimage continuous_inv\n\n"}
{"name":"IsClosed.inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\ns : Set G\nhs : IsClosed s\n⊢ IsClosed (Inv.inv s)","decl":"@[to_additive]\ntheorem IsClosed.inv (hs : IsClosed s) : IsClosed s⁻¹ :=\n  hs.preimage continuous_inv\n\n"}
{"name":"neg_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveNeg G\ninst✝ : ContinuousNeg G\ns : Set G\n⊢ Eq (Neg.neg (closure s)) (closure (Neg.neg s))","decl":"@[to_additive]\ntheorem inv_closure : ∀ s : Set G, (closure s)⁻¹ = closure s⁻¹ :=\n  (Homeomorph.inv G).preimage_closure\n\n"}
{"name":"inv_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : InvolutiveInv G\ninst✝ : ContinuousInv G\ns : Set G\n⊢ Eq (Inv.inv (closure s)) (closure (Inv.inv s))","decl":"@[to_additive]\ntheorem inv_closure : ∀ s : Set G, (closure s)⁻¹ = closure s⁻¹ :=\n  (Homeomorph.inv G).preimage_closure\n\n"}
{"name":"continuous_inv_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveInv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\n⊢ Iff (Continuous (Inv.inv f)) (Continuous f)","decl":"@[to_additive (attr := simp)]\nlemma continuous_inv_iff : Continuous f⁻¹ ↔ Continuous f := (Homeomorph.inv G).comp_continuous_iff\n\n"}
{"name":"continuous_neg_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveNeg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\n⊢ Iff (Continuous (Neg.neg f)) (Continuous f)","decl":"@[to_additive (attr := simp)]\nlemma continuous_inv_iff : Continuous f⁻¹ ↔ Continuous f := (Homeomorph.inv G).comp_continuous_iff\n\n"}
{"name":"continuousAt_inv_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveInv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\n⊢ Iff (ContinuousAt (Inv.inv f) x) (ContinuousAt f x)","decl":"@[to_additive (attr := simp)]\nlemma continuousAt_inv_iff : ContinuousAt f⁻¹ x ↔ ContinuousAt f x :=\n  (Homeomorph.inv G).comp_continuousAt_iff _ _\n\n"}
{"name":"continuousAt_neg_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveNeg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\n⊢ Iff (ContinuousAt (Neg.neg f) x) (ContinuousAt f x)","decl":"@[to_additive (attr := simp)]\nlemma continuousAt_inv_iff : ContinuousAt f⁻¹ x ↔ ContinuousAt f x :=\n  (Homeomorph.inv G).comp_continuousAt_iff _ _\n\n"}
{"name":"continuousOn_inv_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveInv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\n⊢ Iff (ContinuousOn (Inv.inv f) s) (ContinuousOn f s)","decl":"@[to_additive (attr := simp)]\nlemma continuousOn_inv_iff : ContinuousOn f⁻¹ s ↔ ContinuousOn f s :=\n  (Homeomorph.inv G).comp_continuousOn_iff _ _\n\n"}
{"name":"continuousOn_neg_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveNeg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\n⊢ Iff (ContinuousOn (Neg.neg f) s) (ContinuousOn f s)","decl":"@[to_additive (attr := simp)]\nlemma continuousOn_inv_iff : ContinuousOn f⁻¹ s ↔ ContinuousOn f s :=\n  (Homeomorph.inv G).comp_continuousOn_iff _ _\n\n"}
{"name":"Continuous.of_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveNeg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\na✝ : Continuous (Neg.neg f)\n⊢ Continuous f","decl":"@[to_additive] alias ⟨Continuous.of_inv, _⟩ := continuous_inv_iff\n"}
{"name":"Continuous.of_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveInv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\na✝ : Continuous (Inv.inv f)\n⊢ Continuous f","decl":"@[to_additive] alias ⟨Continuous.of_inv, _⟩ := continuous_inv_iff\n"}
{"name":"ContinuousAt.of_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveNeg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\na✝ : ContinuousAt (Neg.neg f) x\n⊢ ContinuousAt f x","decl":"@[to_additive] alias ⟨ContinuousAt.of_inv, _⟩ := continuousAt_inv_iff\n"}
{"name":"ContinuousAt.of_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveInv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\na✝ : ContinuousAt (Inv.inv f) x\n⊢ ContinuousAt f x","decl":"@[to_additive] alias ⟨ContinuousAt.of_inv, _⟩ := continuousAt_inv_iff\n"}
{"name":"ContinuousOn.of_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveNeg G\ninst✝¹ : ContinuousNeg G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\na✝ : ContinuousOn (Neg.neg f) s\n⊢ ContinuousOn f s","decl":"@[to_additive] alias ⟨ContinuousOn.of_inv, _⟩ := continuousOn_inv_iff\n\n"}
{"name":"ContinuousOn.of_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : InvolutiveInv G\ninst✝¹ : ContinuousInv G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\na✝ : ContinuousOn (Inv.inv f) s\n⊢ ContinuousOn f s","decl":"@[to_additive] alias ⟨ContinuousOn.of_inv, _⟩ := continuousOn_inv_iff\n\n"}
{"name":"continuousInv_sInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : Inv G\nts : Set (TopologicalSpace G)\nh : ∀ (t : TopologicalSpace G), Membership.mem ts t → ContinuousInv G\n⊢ ContinuousInv G","decl":"@[to_additive]\ntheorem continuousInv_sInf {ts : Set (TopologicalSpace G)}\n    (h : ∀ t ∈ ts, @ContinuousInv G t _) : @ContinuousInv G (sInf ts) _ :=\n  letI := sInf ts\n  { continuous_inv :=\n      continuous_sInf_rng.2 fun t ht =>\n        continuous_sInf_dom ht (@ContinuousInv.continuous_inv G t _ (h t ht)) }\n\n"}
{"name":"continuousNeg_sInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : Neg G\nts : Set (TopologicalSpace G)\nh : ∀ (t : TopologicalSpace G), Membership.mem ts t → ContinuousNeg G\n⊢ ContinuousNeg G","decl":"@[to_additive]\ntheorem continuousInv_sInf {ts : Set (TopologicalSpace G)}\n    (h : ∀ t ∈ ts, @ContinuousInv G t _) : @ContinuousInv G (sInf ts) _ :=\n  letI := sInf ts\n  { continuous_inv :=\n      continuous_sInf_rng.2 fun t ht =>\n        continuous_sInf_dom ht (@ContinuousInv.continuous_inv G t _ (h t ht)) }\n\n"}
{"name":"continuousNeg_iInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nι' : Sort u_1\ninst✝ : Neg G\nts' : ι' → TopologicalSpace G\nh' : ∀ (i : ι'), ContinuousNeg G\n⊢ ContinuousNeg G","decl":"@[to_additive]\ntheorem continuousInv_iInf {ts' : ι' → TopologicalSpace G}\n    (h' : ∀ i, @ContinuousInv G (ts' i) _) : @ContinuousInv G (⨅ i, ts' i) _ := by\n  rw [← sInf_range]\n  exact continuousInv_sInf (Set.forall_mem_range.mpr h')\n\n"}
{"name":"continuousInv_iInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nι' : Sort u_1\ninst✝ : Inv G\nts' : ι' → TopologicalSpace G\nh' : ∀ (i : ι'), ContinuousInv G\n⊢ ContinuousInv G","decl":"@[to_additive]\ntheorem continuousInv_iInf {ts' : ι' → TopologicalSpace G}\n    (h' : ∀ i, @ContinuousInv G (ts' i) _) : @ContinuousInv G (⨅ i, ts' i) _ := by\n  rw [← sInf_range]\n  exact continuousInv_sInf (Set.forall_mem_range.mpr h')\n\n"}
{"name":"continuousNeg_inf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : Neg G\nt₁ t₂ : TopologicalSpace G\nh₁ : ContinuousNeg G\nh₂ : ContinuousNeg G\n⊢ ContinuousNeg G","decl":"@[to_additive]\ntheorem continuousInv_inf {t₁ t₂ : TopologicalSpace G} (h₁ : @ContinuousInv G t₁ _)\n    (h₂ : @ContinuousInv G t₂ _) : @ContinuousInv G (t₁ ⊓ t₂) _ := by\n  rw [inf_eq_iInf]\n  refine continuousInv_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"continuousInv_inf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : Inv G\nt₁ t₂ : TopologicalSpace G\nh₁ : ContinuousInv G\nh₂ : ContinuousInv G\n⊢ ContinuousInv G","decl":"@[to_additive]\ntheorem continuousInv_inf {t₁ t₂ : TopologicalSpace G} (h₁ : @ContinuousInv G t₁ _)\n    (h₂ : @ContinuousInv G t₂ _) : @ContinuousInv G (t₁ ⊓ t₂) _ := by\n  rw [inf_eq_iInf]\n  refine continuousInv_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"Topology.IsInducing.continuousNeg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝⁴ : Neg G\ninst✝³ : Neg H\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalSpace H\ninst✝ : ContinuousNeg H\nf : G → H\nhf : Topology.IsInducing f\nhf_inv : ∀ (x : G), Eq (f (Neg.neg x)) (Neg.neg (f x))\n⊢ ContinuousNeg G","decl":"@[to_additive]\ntheorem Topology.IsInducing.continuousInv {G H : Type*} [Inv G] [Inv H] [TopologicalSpace G]\n    [TopologicalSpace H] [ContinuousInv H] {f : G → H} (hf : IsInducing f)\n    (hf_inv : ∀ x, f x⁻¹ = (f x)⁻¹) : ContinuousInv G :=\n  ⟨hf.continuous_iff.2 <| by simpa only [Function.comp_def, hf_inv] using hf.continuous.inv⟩\n\n"}
{"name":"Topology.IsInducing.continuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝⁴ : Inv G\ninst✝³ : Inv H\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalSpace H\ninst✝ : ContinuousInv H\nf : G → H\nhf : Topology.IsInducing f\nhf_inv : ∀ (x : G), Eq (f (Inv.inv x)) (Inv.inv (f x))\n⊢ ContinuousInv G","decl":"@[to_additive]\ntheorem Topology.IsInducing.continuousInv {G H : Type*} [Inv G] [Inv H] [TopologicalSpace G]\n    [TopologicalSpace H] [ContinuousInv H] {f : G → H} (hf : IsInducing f)\n    (hf_inv : ∀ x, f x⁻¹ = (f x)⁻¹) : ContinuousInv G :=\n  ⟨hf.continuous_iff.2 <| by simpa only [Function.comp_def, hf_inv] using hf.continuous.inv⟩\n\n"}
{"name":"Inducing.continuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝⁴ : Inv G\ninst✝³ : Inv H\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalSpace H\ninst✝ : ContinuousInv H\nf : G → H\nhf : Topology.IsInducing f\nhf_inv : ∀ (x : G), Eq (f (Inv.inv x)) (Inv.inv (f x))\n⊢ ContinuousInv G","decl":"@[deprecated (since := \"2024-10-28\")] alias Inducing.continuousInv := IsInducing.continuousInv\n\n"}
{"name":"TopologicalAddGroup.toContinuousAdd","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : TopologicalSpace G\ninst✝ : AddGroup G\nself : TopologicalAddGroup G\n⊢ ContinuousAdd G","decl":"/-- A topological (additive) group is a group in which the addition and negation operations are\ncontinuous. -/\nclass TopologicalAddGroup (G : Type u) [TopologicalSpace G] [AddGroup G] extends\n  ContinuousAdd G, ContinuousNeg G : Prop\n\n"}
{"name":"TopologicalAddGroup.toContinuousNeg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : TopologicalSpace G\ninst✝ : AddGroup G\nself : TopologicalAddGroup G\n⊢ ContinuousNeg G","decl":"/-- A topological (additive) group is a group in which the addition and negation operations are\ncontinuous. -/\nclass TopologicalAddGroup (G : Type u) [TopologicalSpace G] [AddGroup G] extends\n  ContinuousAdd G, ContinuousNeg G : Prop\n\n"}
{"name":"TopologicalGroup.toContinuousMul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\ninst✝ : Group G\nself : TopologicalGroup G\n⊢ ContinuousMul G","decl":"/-- A topological group is a group in which the multiplication and inversion operations are\ncontinuous.\n\nWhen you declare an instance that does not already have a `UniformSpace` instance,\nyou should also provide an instance of `UniformSpace` and `UniformGroup` using\n`TopologicalGroup.toUniformSpace` and `topologicalCommGroup_isUniform`. -/\n-- Porting note: check that these ↑ names exist once they've been ported in the future.\n@[to_additive]\nclass TopologicalGroup (G : Type*) [TopologicalSpace G] [Group G] extends ContinuousMul G,\n  ContinuousInv G : Prop\n\n"}
{"name":"TopologicalGroup.toContinuousInv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\ninst✝ : Group G\nself : TopologicalGroup G\n⊢ ContinuousInv G","decl":"/-- A topological group is a group in which the multiplication and inversion operations are\ncontinuous.\n\nWhen you declare an instance that does not already have a `UniformSpace` instance,\nyou should also provide an instance of `UniformSpace` and `UniformGroup` using\n`TopologicalGroup.toUniformSpace` and `topologicalCommGroup_isUniform`. -/\n-- Porting note: check that these ↑ names exist once they've been ported in the future.\n@[to_additive]\nclass TopologicalGroup (G : Type*) [TopologicalSpace G] [Group G] extends ContinuousMul G,\n  ContinuousInv G : Prop\n\n"}
{"name":"ConjAct.units_continuousConstSMul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"M : Type u_1\ninst✝² : Monoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\n⊢ ContinuousConstSMul (ConjAct (Units M)) M","decl":"instance ConjAct.units_continuousConstSMul {M} [Monoid M] [TopologicalSpace M]\n    [ContinuousMul M] : ContinuousConstSMul (ConjAct Mˣ) M :=\n  ⟨fun _ => (continuous_const.mul continuous_id).mul continuous_const⟩\n\n"}
{"name":"TopologicalGroup.continuous_conj_prod","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁴ : TopologicalSpace G\ninst✝³ : Inv G\ninst✝² : Mul G\ninst✝¹ : ContinuousMul G\ninst✝ : ContinuousInv G\n⊢ Continuous fun g => HMul.hMul (HMul.hMul g.1 g.2) (Inv.inv g.1)","decl":"/-- Conjugation is jointly continuous on `G × G` when both `mul` and `inv` are continuous. -/\n@[to_additive\n  \"Conjugation is jointly continuous on `G × G` when both `add` and `neg` are continuous.\"]\ntheorem TopologicalGroup.continuous_conj_prod [ContinuousInv G] :\n    Continuous fun g : G × G => g.fst * g.snd * g.fst⁻¹ :=\n  continuous_mul.mul (continuous_inv.comp continuous_fst)\n\n"}
{"name":"TopologicalAddGroup.continuous_conj_sum","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁴ : TopologicalSpace G\ninst✝³ : Neg G\ninst✝² : Add G\ninst✝¹ : ContinuousAdd G\ninst✝ : ContinuousNeg G\n⊢ Continuous fun g => HAdd.hAdd (HAdd.hAdd g.1 g.2) (Neg.neg g.1)","decl":"/-- Conjugation is jointly continuous on `G × G` when both `mul` and `inv` are continuous. -/\n@[to_additive\n  \"Conjugation is jointly continuous on `G × G` when both `add` and `neg` are continuous.\"]\ntheorem TopologicalGroup.continuous_conj_prod [ContinuousInv G] :\n    Continuous fun g : G × G => g.fst * g.snd * g.fst⁻¹ :=\n  continuous_mul.mul (continuous_inv.comp continuous_fst)\n\n"}
{"name":"TopologicalAddGroup.continuous_conj","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝³ : TopologicalSpace G\ninst✝² : Neg G\ninst✝¹ : Add G\ninst✝ : ContinuousAdd G\ng : G\n⊢ Continuous fun h => HAdd.hAdd (HAdd.hAdd g h) (Neg.neg g)","decl":"/-- Conjugation by a fixed element is continuous when `mul` is continuous. -/\n@[to_additive (attr := continuity)\n  \"Conjugation by a fixed element is continuous when `add` is continuous.\"]\ntheorem TopologicalGroup.continuous_conj (g : G) : Continuous fun h : G => g * h * g⁻¹ :=\n  (continuous_mul_right g⁻¹).comp (continuous_mul_left g)\n\n"}
{"name":"TopologicalGroup.continuous_conj","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝³ : TopologicalSpace G\ninst✝² : Inv G\ninst✝¹ : Mul G\ninst✝ : ContinuousMul G\ng : G\n⊢ Continuous fun h => HMul.hMul (HMul.hMul g h) (Inv.inv g)","decl":"/-- Conjugation by a fixed element is continuous when `mul` is continuous. -/\n@[to_additive (attr := continuity)\n  \"Conjugation by a fixed element is continuous when `add` is continuous.\"]\ntheorem TopologicalGroup.continuous_conj (g : G) : Continuous fun h : G => g * h * g⁻¹ :=\n  (continuous_mul_right g⁻¹).comp (continuous_mul_left g)\n\n"}
{"name":"TopologicalGroup.continuous_conj'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁴ : TopologicalSpace G\ninst✝³ : Inv G\ninst✝² : Mul G\ninst✝¹ : ContinuousMul G\ninst✝ : ContinuousInv G\nh : G\n⊢ Continuous fun g => HMul.hMul (HMul.hMul g h) (Inv.inv g)","decl":"/-- Conjugation acting on fixed element of the group is continuous when both `mul` and\n`inv` are continuous. -/\n@[to_additive (attr := continuity)\n  \"Conjugation acting on fixed element of the additive group is continuous when both\n    `add` and `neg` are continuous.\"]\ntheorem TopologicalGroup.continuous_conj' [ContinuousInv G] (h : G) :\n    Continuous fun g : G => g * h * g⁻¹ :=\n  (continuous_mul_right h).mul continuous_inv\n\n"}
{"name":"TopologicalAddGroup.continuous_conj'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁴ : TopologicalSpace G\ninst✝³ : Neg G\ninst✝² : Add G\ninst✝¹ : ContinuousAdd G\ninst✝ : ContinuousNeg G\nh : G\n⊢ Continuous fun g => HAdd.hAdd (HAdd.hAdd g h) (Neg.neg g)","decl":"/-- Conjugation acting on fixed element of the group is continuous when both `mul` and\n`inv` are continuous. -/\n@[to_additive (attr := continuity)\n  \"Conjugation acting on fixed element of the additive group is continuous when both\n    `add` and `neg` are continuous.\"]\ntheorem TopologicalGroup.continuous_conj' [ContinuousInv G] (h : G) :\n    Continuous fun g : G => g * h * g⁻¹ :=\n  (continuous_mul_right h).mul continuous_inv\n\n"}
{"name":"instTopologicalGroupULift","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ TopologicalGroup (ULift.{u_1, w} G)","decl":"instance : TopologicalGroup (ULift G) where\n\n"}
{"name":"continuous_zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nz : Int\n⊢ Continuous fun a => HPow.hPow a z","decl":"@[to_additive (attr := continuity)]\ntheorem continuous_zpow : ∀ z : ℤ, Continuous fun a : G => a ^ z\n  | Int.ofNat n => by simpa using continuous_pow n\n  | Int.negSucc n => by simpa using (continuous_pow (n + 1)).inv\n\n"}
{"name":"continuous_zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nz : Int\n⊢ Continuous fun a => HSMul.hSMul z a","decl":"@[to_additive (attr := continuity)]\ntheorem continuous_zpow : ∀ z : ℤ, Continuous fun a : G => a ^ z\n  | Int.ofNat n => by simpa using continuous_pow n\n  | Int.negSucc n => by simpa using (continuous_pow (n + 1)).inv\n\n"}
{"name":"AddGroup.continuousConstSMul_int","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"A : Type u_1\ninst✝² : AddGroup A\ninst✝¹ : TopologicalSpace A\ninst✝ : TopologicalAddGroup A\n⊢ ContinuousConstSMul Int A","decl":"instance AddGroup.continuousConstSMul_int {A} [AddGroup A] [TopologicalSpace A]\n    [TopologicalAddGroup A] : ContinuousConstSMul ℤ A :=\n  ⟨continuous_zsmul⟩\n\n"}
{"name":"AddGroup.continuousSMul_int","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"A : Type u_1\ninst✝² : AddGroup A\ninst✝¹ : TopologicalSpace A\ninst✝ : TopologicalAddGroup A\n⊢ ContinuousSMul Int A","decl":"instance AddGroup.continuousSMul_int {A} [AddGroup A] [TopologicalSpace A]\n    [TopologicalAddGroup A] : ContinuousSMul ℤ A :=\n  ⟨continuous_prod_of_discrete_left.mpr continuous_zsmul⟩\n\n"}
{"name":"Continuous.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : TopologicalSpace α\nf : α → G\nh : Continuous f\nz : Int\n⊢ Continuous fun b => HSMul.hSMul z (f b)","decl":"@[to_additive (attr := continuity, fun_prop)]\ntheorem Continuous.zpow {f : α → G} (h : Continuous f) (z : ℤ) : Continuous fun b => f b ^ z :=\n  (continuous_zpow z).comp h\n\n"}
{"name":"Continuous.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : TopologicalSpace α\nf : α → G\nh : Continuous f\nz : Int\n⊢ Continuous fun b => HPow.hPow (f b) z","decl":"@[to_additive (attr := continuity, fun_prop)]\ntheorem Continuous.zpow {f : α → G} (h : Continuous f) (z : ℤ) : Continuous fun b => f b ^ z :=\n  (continuous_zpow z).comp h\n\n"}
{"name":"continuousOn_zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Set G\nz : Int\n⊢ ContinuousOn (fun x => HPow.hPow x z) s","decl":"@[to_additive]\ntheorem continuousOn_zpow {s : Set G} (z : ℤ) : ContinuousOn (fun x => x ^ z) s :=\n  (continuous_zpow z).continuousOn\n\n"}
{"name":"continuousOn_zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : Set G\nz : Int\n⊢ ContinuousOn (fun x => HSMul.hSMul z x) s","decl":"@[to_additive]\ntheorem continuousOn_zpow {s : Set G} (z : ℤ) : ContinuousOn (fun x => x ^ z) s :=\n  (continuous_zpow z).continuousOn\n\n"}
{"name":"continuousAt_zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx : G\nz : Int\n⊢ ContinuousAt (fun x => HPow.hPow x z) x","decl":"@[to_additive]\ntheorem continuousAt_zpow (x : G) (z : ℤ) : ContinuousAt (fun x => x ^ z) x :=\n  (continuous_zpow z).continuousAt\n\n"}
{"name":"continuousAt_zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx : G\nz : Int\n⊢ ContinuousAt (fun x => HSMul.hSMul z x) x","decl":"@[to_additive]\ntheorem continuousAt_zpow (x : G) (z : ℤ) : ContinuousAt (fun x => x ^ z) x :=\n  (continuous_zpow z).continuousAt\n\n"}
{"name":"Filter.Tendsto.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nα : Type u_1\nl : Filter α\nf : α → G\nx : G\nhf : Filter.Tendsto f l (nhds x)\nz : Int\n⊢ Filter.Tendsto (fun x => HSMul.hSMul z (f x)) l (nhds (HSMul.hSMul z x))","decl":"@[to_additive]\ntheorem Filter.Tendsto.zpow {α} {l : Filter α} {f : α → G} {x : G} (hf : Tendsto f l (𝓝 x))\n    (z : ℤ) : Tendsto (fun x => f x ^ z) l (𝓝 (x ^ z)) :=\n  (continuousAt_zpow _ _).tendsto.comp hf\n\n"}
{"name":"Filter.Tendsto.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nα : Type u_1\nl : Filter α\nf : α → G\nx : G\nhf : Filter.Tendsto f l (nhds x)\nz : Int\n⊢ Filter.Tendsto (fun x => HPow.hPow (f x) z) l (nhds (HPow.hPow x z))","decl":"@[to_additive]\ntheorem Filter.Tendsto.zpow {α} {l : Filter α} {f : α → G} {x : G} (hf : Tendsto f l (𝓝 x))\n    (z : ℤ) : Tendsto (fun x => f x ^ z) l (𝓝 (x ^ z)) :=\n  (continuousAt_zpow _ _).tendsto.comp hf\n\n"}
{"name":"ContinuousWithinAt.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\ns : Set α\nhf : ContinuousWithinAt f s x\nz : Int\n⊢ ContinuousWithinAt (fun x => HSMul.hSMul z (f x)) s x","decl":"@[to_additive]\ntheorem ContinuousWithinAt.zpow {f : α → G} {x : α} {s : Set α} (hf : ContinuousWithinAt f s x)\n    (z : ℤ) : ContinuousWithinAt (fun x => f x ^ z) s x :=\n  Filter.Tendsto.zpow hf z\n\n"}
{"name":"ContinuousWithinAt.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\ns : Set α\nhf : ContinuousWithinAt f s x\nz : Int\n⊢ ContinuousWithinAt (fun x => HPow.hPow (f x) z) s x","decl":"@[to_additive]\ntheorem ContinuousWithinAt.zpow {f : α → G} {x : α} {s : Set α} (hf : ContinuousWithinAt f s x)\n    (z : ℤ) : ContinuousWithinAt (fun x => f x ^ z) s x :=\n  Filter.Tendsto.zpow hf z\n\n"}
{"name":"ContinuousAt.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\nhf : ContinuousAt f x\nz : Int\n⊢ ContinuousAt (fun x => HPow.hPow (f x) z) x","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousAt.zpow {f : α → G} {x : α} (hf : ContinuousAt f x) (z : ℤ) :\n    ContinuousAt (fun x => f x ^ z) x :=\n  Filter.Tendsto.zpow hf z\n\n"}
{"name":"ContinuousAt.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : TopologicalSpace α\nf : α → G\nx : α\nhf : ContinuousAt f x\nz : Int\n⊢ ContinuousAt (fun x => HSMul.hSMul z (f x)) x","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousAt.zpow {f : α → G} {x : α} (hf : ContinuousAt f x) (z : ℤ) :\n    ContinuousAt (fun x => f x ^ z) x :=\n  Filter.Tendsto.zpow hf z\n\n"}
{"name":"ContinuousOn.zsmul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\nhf : ContinuousOn f s\nz : Int\n⊢ ContinuousOn (fun x => HSMul.hSMul z (f x)) s","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousOn.zpow {f : α → G} {s : Set α} (hf : ContinuousOn f s) (z : ℤ) :\n    ContinuousOn (fun x => f x ^ z) s := fun x hx => (hf x hx).zpow z\n\n"}
{"name":"ContinuousOn.zpow","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : TopologicalSpace α\nf : α → G\ns : Set α\nhf : ContinuousOn f s\nz : Int\n⊢ ContinuousOn (fun x => HPow.hPow (f x) z) s","decl":"@[to_additive (attr := fun_prop)]\ntheorem ContinuousOn.zpow {f : α → G} {s : Set α} (hf : ContinuousOn f s) (z : ℤ) :\n    ContinuousOn (fun x => f x ^ z) s := fun x hx => (hf x hx).zpow z\n\n"}
{"name":"tendsto_neg_nhdsGT","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Ioi a)) (nhdsWithin (Neg.neg a) (Set.Iio (Neg.neg a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGT {a : H} : Tendsto Inv.inv (𝓝[>] a) (𝓝[<] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_inv_nhdsGT","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Ioi a)) (nhdsWithin (Inv.inv a) (Set.Iio (Inv.inv a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGT {a : H} : Tendsto Inv.inv (𝓝[>] a) (𝓝[<] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_neg_nhdsWithin_Ioi","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Ioi a)) (nhdsWithin (Neg.neg a) (Set.Iio (Neg.neg a)))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Ioi := tendsto_neg_nhdsGT\n"}
{"name":"tendsto_inv_nhdsWithin_Ioi","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Ioi a)) (nhdsWithin (Inv.inv a) (Set.Iio (Inv.inv a)))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Ioi := tendsto_inv_nhdsGT\n\n"}
{"name":"tendsto_neg_nhdsLT","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Iio a)) (nhdsWithin (Neg.neg a) (Set.Ioi (Neg.neg a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLT {a : H} : Tendsto Inv.inv (𝓝[<] a) (𝓝[>] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_inv_nhdsLT","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Iio a)) (nhdsWithin (Inv.inv a) (Set.Ioi (Inv.inv a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLT {a : H} : Tendsto Inv.inv (𝓝[<] a) (𝓝[>] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_neg_nhdsWithin_Iio","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Iio a)) (nhdsWithin (Neg.neg a) (Set.Ioi (Neg.neg a)))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Iio := tendsto_neg_nhdsLT\n"}
{"name":"tendsto_inv_nhdsWithin_Iio","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Iio a)) (nhdsWithin (Inv.inv a) (Set.Ioi (Inv.inv a)))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Iio := tendsto_inv_nhdsLT\n\n"}
{"name":"tendsto_neg_nhdsGT_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Ioi (Neg.neg a))) (nhdsWithin a (Set.Iio a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGT_inv {a : H} : Tendsto Inv.inv (𝓝[>] a⁻¹) (𝓝[<] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsGT _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_inv_nhdsGT_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Ioi (Inv.inv a))) (nhdsWithin a (Set.Iio a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGT_inv {a : H} : Tendsto Inv.inv (𝓝[>] a⁻¹) (𝓝[<] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsGT _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_neg_nhdsWithin_Ioi_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Ioi (Neg.neg a))) (nhdsWithin a (Set.Iio a))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Ioi_neg := tendsto_neg_nhdsGT_neg\n"}
{"name":"tendsto_inv_nhdsWithin_Ioi_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Ioi (Inv.inv a))) (nhdsWithin a (Set.Iio a))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Ioi_inv := tendsto_inv_nhdsGT_inv\n\n"}
{"name":"tendsto_neg_nhdsLT_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Iio (Neg.neg a))) (nhdsWithin a (Set.Ioi a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLT_inv {a : H} : Tendsto Inv.inv (𝓝[<] a⁻¹) (𝓝[>] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsLT _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_inv_nhdsLT_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Iio (Inv.inv a))) (nhdsWithin a (Set.Ioi a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLT_inv {a : H} : Tendsto Inv.inv (𝓝[<] a⁻¹) (𝓝[>] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsLT _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_neg_nhdsWithin_Iio_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Iio (Neg.neg a))) (nhdsWithin a (Set.Ioi a))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Iio_neg := tendsto_neg_nhdsLT_neg\n"}
{"name":"tendsto_inv_nhdsWithin_Iio_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Iio (Inv.inv a))) (nhdsWithin a (Set.Ioi a))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Iio_inv := tendsto_inv_nhdsLT_inv\n\n"}
{"name":"tendsto_inv_nhdsGE","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Ici a)) (nhdsWithin (Inv.inv a) (Set.Iic (Inv.inv a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGE {a : H} : Tendsto Inv.inv (𝓝[≥] a) (𝓝[≤] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_neg_nhdsGE","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Ici a)) (nhdsWithin (Neg.neg a) (Set.Iic (Neg.neg a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGE {a : H} : Tendsto Inv.inv (𝓝[≥] a) (𝓝[≤] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_neg_nhdsWithin_Ici","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Ici a)) (nhdsWithin (Neg.neg a) (Set.Iic (Neg.neg a)))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Ici := tendsto_neg_nhdsGE\n"}
{"name":"tendsto_inv_nhdsWithin_Ici","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Ici a)) (nhdsWithin (Inv.inv a) (Set.Iic (Inv.inv a)))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Ici := tendsto_inv_nhdsGE\n\n"}
{"name":"tendsto_neg_nhdsLE","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Iic a)) (nhdsWithin (Neg.neg a) (Set.Ici (Neg.neg a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLE {a : H} : Tendsto Inv.inv (𝓝[≤] a) (𝓝[≥] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_inv_nhdsLE","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Iic a)) (nhdsWithin (Inv.inv a) (Set.Ici (Inv.inv a)))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLE {a : H} : Tendsto Inv.inv (𝓝[≤] a) (𝓝[≥] a⁻¹) :=\n  (continuous_inv.tendsto a).inf <| by simp [tendsto_principal_principal]\n\n"}
{"name":"tendsto_neg_nhdsWithin_Iic","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin a (Set.Iic a)) (nhdsWithin (Neg.neg a) (Set.Ici (Neg.neg a)))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Iic := tendsto_neg_nhdsLE\n"}
{"name":"tendsto_inv_nhdsWithin_Iic","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin a (Set.Iic a)) (nhdsWithin (Inv.inv a) (Set.Ici (Inv.inv a)))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Iic := tendsto_inv_nhdsLE\n\n"}
{"name":"tendsto_neg_nhdsGE_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Ici (Neg.neg a))) (nhdsWithin a (Set.Iic a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGE_inv {a : H} : Tendsto Inv.inv (𝓝[≥] a⁻¹) (𝓝[≤] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsGE _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_inv_nhdsGE_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Ici (Inv.inv a))) (nhdsWithin a (Set.Iic a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsGE_inv {a : H} : Tendsto Inv.inv (𝓝[≥] a⁻¹) (𝓝[≤] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsGE _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_neg_nhdsWithin_Ici_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Ici (Neg.neg a))) (nhdsWithin a (Set.Iic a))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Ici_neg := tendsto_neg_nhdsGE_neg\n"}
{"name":"tendsto_inv_nhdsWithin_Ici_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Ici (Inv.inv a))) (nhdsWithin a (Set.Iic a))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Ici_inv := tendsto_inv_nhdsGE_inv\n\n"}
{"name":"tendsto_neg_nhdsLE_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Iic (Neg.neg a))) (nhdsWithin a (Set.Ici a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLE_inv {a : H} : Tendsto Inv.inv (𝓝[≤] a⁻¹) (𝓝[≥] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsLE _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_inv_nhdsLE_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Iic (Inv.inv a))) (nhdsWithin a (Set.Ici a))","decl":"@[to_additive]\ntheorem tendsto_inv_nhdsLE_inv {a : H} : Tendsto Inv.inv (𝓝[≤] a⁻¹) (𝓝[≥] a) := by\n  simpa only [inv_inv] using @tendsto_inv_nhdsLE _ _ _ _ a⁻¹\n\n"}
{"name":"tendsto_neg_nhdsWithin_Iic_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedAddCommGroup H\ninst✝ : ContinuousNeg H\na : H\n⊢ Filter.Tendsto Neg.neg (nhdsWithin (Neg.neg a) (Set.Iic (Neg.neg a))) (nhdsWithin a (Set.Ici a))","decl":"@[deprecated (since := \"2024-12-22\")]\nalias tendsto_neg_nhdsWithin_Iic_neg := tendsto_neg_nhdsLE_neg\n"}
{"name":"tendsto_inv_nhdsWithin_Iic_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"H : Type x\ninst✝² : TopologicalSpace H\ninst✝¹ : OrderedCommGroup H\ninst✝ : ContinuousInv H\na : H\n⊢ Filter.Tendsto Inv.inv (nhdsWithin (Inv.inv a) (Set.Iic (Inv.inv a))) (nhdsWithin a (Set.Ici a))","decl":"@[to_additive existing, deprecated (since := \"2024-12-22\")]\nalias tendsto_inv_nhdsWithin_Iic_inv := tendsto_inv_nhdsLE_inv\n\n"}
{"name":"instTopologicalGroupProd","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Group G\ninst✝³ : TopologicalGroup G\ninst✝² : TopologicalSpace H\ninst✝¹ : Group H\ninst✝ : TopologicalGroup H\n⊢ TopologicalGroup (Prod G H)","decl":"@[to_additive]\ninstance [TopologicalSpace H] [Group H] [TopologicalGroup H] : TopologicalGroup (G × H) where\n  continuous_inv := continuous_inv.prodMap continuous_inv\n\n"}
{"name":"instTopologicalAddGroupSum","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : AddGroup G\ninst✝³ : TopologicalAddGroup G\ninst✝² : TopologicalSpace H\ninst✝¹ : AddGroup H\ninst✝ : TopologicalAddGroup H\n⊢ TopologicalAddGroup (Prod G H)","decl":"@[to_additive]\ninstance [TopologicalSpace H] [Group H] [TopologicalGroup H] : TopologicalGroup (G × H) where\n  continuous_inv := continuous_inv.prodMap continuous_inv\n\n"}
{"name":"OrderDual.instTopologicalGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ TopologicalGroup (OrderDual G)","decl":"@[to_additive]\ninstance OrderDual.instTopologicalGroup : TopologicalGroup Gᵒᵈ where\n\n"}
{"name":"OrderDual.instTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ TopologicalAddGroup (OrderDual G)","decl":"@[to_additive]\ninstance OrderDual.instTopologicalGroup : TopologicalGroup Gᵒᵈ where\n\n"}
{"name":"Pi.topologicalAddGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"β : Type v\nC : β → Type u_1\ninst✝² : (b : β) → TopologicalSpace (C b)\ninst✝¹ : (b : β) → AddGroup (C b)\ninst✝ : ∀ (b : β), TopologicalAddGroup (C b)\n⊢ TopologicalAddGroup ((b : β) → C b)","decl":"@[to_additive]\ninstance Pi.topologicalGroup {C : β → Type*} [∀ b, TopologicalSpace (C b)] [∀ b, Group (C b)]\n    [∀ b, TopologicalGroup (C b)] : TopologicalGroup (∀ b, C b) where\n  continuous_inv := continuous_pi fun i => (continuous_apply i).inv\n\n"}
{"name":"Pi.topologicalGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"β : Type v\nC : β → Type u_1\ninst✝² : (b : β) → TopologicalSpace (C b)\ninst✝¹ : (b : β) → Group (C b)\ninst✝ : ∀ (b : β), TopologicalGroup (C b)\n⊢ TopologicalGroup ((b : β) → C b)","decl":"@[to_additive]\ninstance Pi.topologicalGroup {C : β → Type*} [∀ b, TopologicalSpace (C b)] [∀ b, Group (C b)]\n    [∀ b, TopologicalGroup (C b)] : TopologicalGroup (∀ b, C b) where\n  continuous_inv := continuous_pi fun i => (continuous_apply i).inv\n\n"}
{"name":"instContinuousInvMulOpposite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Inv α\ninst✝ : ContinuousInv α\n⊢ ContinuousInv (MulOpposite α)","decl":"@[to_additive]\ninstance [Inv α] [ContinuousInv α] : ContinuousInv αᵐᵒᵖ :=\n  opHomeomorph.symm.isInducing.continuousInv unop_inv\n\n"}
{"name":"instContinuousNegAddOpposite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Neg α\ninst✝ : ContinuousNeg α\n⊢ ContinuousNeg (AddOpposite α)","decl":"@[to_additive]\ninstance [Inv α] [ContinuousInv α] : ContinuousInv αᵐᵒᵖ :=\n  opHomeomorph.symm.isInducing.continuousInv unop_inv\n\n"}
{"name":"instTopologicalGroupMulOpposite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : TopologicalGroup α\n⊢ TopologicalGroup (MulOpposite α)","decl":"/-- If multiplication is continuous in `α`, then it also is in `αᵐᵒᵖ`. -/\n@[to_additive \"If addition is continuous in `α`, then it also is in `αᵃᵒᵖ`.\"]\ninstance [Group α] [TopologicalGroup α] : TopologicalGroup αᵐᵒᵖ where\n\n"}
{"name":"instTopologicalAddGroupAddOpposite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : TopologicalAddGroup α\n⊢ TopologicalAddGroup (AddOpposite α)","decl":"/-- If multiplication is continuous in `α`, then it also is in `αᵐᵒᵖ`. -/\n@[to_additive \"If addition is continuous in `α`, then it also is in `αᵃᵒᵖ`.\"]\ninstance [Group α] [TopologicalGroup α] : TopologicalGroup αᵐᵒᵖ where\n\n"}
{"name":"nhds_zero_symm","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ Eq (Filter.comap Neg.neg (nhds 0)) (nhds 0)","decl":"@[to_additive]\ntheorem nhds_one_symm : comap Inv.inv (𝓝 (1 : G)) = 𝓝 (1 : G) :=\n  ((Homeomorph.inv G).comap_nhds_eq _).trans (congr_arg nhds inv_one)\n\n"}
{"name":"nhds_one_symm","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ Eq (Filter.comap Inv.inv (nhds 1)) (nhds 1)","decl":"@[to_additive]\ntheorem nhds_one_symm : comap Inv.inv (𝓝 (1 : G)) = 𝓝 (1 : G) :=\n  ((Homeomorph.inv G).comap_nhds_eq _).trans (congr_arg nhds inv_one)\n\n"}
{"name":"nhds_zero_symm'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ Eq (Filter.map Neg.neg (nhds 0)) (nhds 0)","decl":"@[to_additive]\ntheorem nhds_one_symm' : map Inv.inv (𝓝 (1 : G)) = 𝓝 (1 : G) :=\n  ((Homeomorph.inv G).map_nhds_eq _).trans (congr_arg nhds inv_one)\n\n"}
{"name":"nhds_one_symm'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ Eq (Filter.map Inv.inv (nhds 1)) (nhds 1)","decl":"@[to_additive]\ntheorem nhds_one_symm' : map Inv.inv (𝓝 (1 : G)) = 𝓝 (1 : G) :=\n  ((Homeomorph.inv G).map_nhds_eq _).trans (congr_arg nhds inv_one)\n\n"}
{"name":"inv_mem_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nS : Set G\nhS : Membership.mem (nhds 1) S\n⊢ Membership.mem (nhds 1) (Inv.inv S)","decl":"@[to_additive]\ntheorem inv_mem_nhds_one {S : Set G} (hS : S ∈ (𝓝 1 : Filter G)) : S⁻¹ ∈ 𝓝 (1 : G) := by\n  rwa [← nhds_one_symm'] at hS\n\n"}
{"name":"neg_mem_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nS : Set G\nhS : Membership.mem (nhds 0) S\n⊢ Membership.mem (nhds 0) (Neg.neg S)","decl":"@[to_additive]\ntheorem inv_mem_nhds_one {S : Set G} (hS : S ∈ (𝓝 1 : Filter G)) : S⁻¹ ∈ 𝓝 (1 : G) := by\n  rwa [← nhds_one_symm'] at hS\n\n"}
{"name":"Homeomorph.shearAddRight_coe","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ Eq ⇑(Homeomorph.shearAddRight G) fun z => { fst := z.1, snd := HAdd.hAdd z.1 z.2 }","decl":"@[to_additive (attr := simp)]\ntheorem Homeomorph.shearMulRight_coe :\n    ⇑(Homeomorph.shearMulRight G) = fun z : G × G => (z.1, z.1 * z.2) :=\n  rfl\n\n"}
{"name":"Homeomorph.shearMulRight_coe","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ Eq ⇑(Homeomorph.shearMulRight G) fun z => { fst := z.1, snd := HMul.hMul z.1 z.2 }","decl":"@[to_additive (attr := simp)]\ntheorem Homeomorph.shearMulRight_coe :\n    ⇑(Homeomorph.shearMulRight G) = fun z : G × G => (z.1, z.1 * z.2) :=\n  rfl\n\n"}
{"name":"Homeomorph.shearAddRight_symm_coe","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ Eq ⇑(Homeomorph.shearAddRight G).symm fun z => { fst := z.1, snd := HAdd.hAdd (Neg.neg z.1) z.2 }","decl":"@[to_additive (attr := simp)]\ntheorem Homeomorph.shearMulRight_symm_coe :\n    ⇑(Homeomorph.shearMulRight G).symm = fun z : G × G => (z.1, z.1⁻¹ * z.2) :=\n  rfl\n\n"}
{"name":"Homeomorph.shearMulRight_symm_coe","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ Eq ⇑(Homeomorph.shearMulRight G).symm fun z => { fst := z.1, snd := HMul.hMul (Inv.inv z.1) z.2 }","decl":"@[to_additive (attr := simp)]\ntheorem Homeomorph.shearMulRight_symm_coe :\n    ⇑(Homeomorph.shearMulRight G).symm = fun z : G × G => (z.1, z.1⁻¹ * z.2) :=\n  rfl\n\n"}
{"name":"Topology.IsInducing.topologicalGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁶ : TopologicalSpace G\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalGroup G\nF : Type u_1\ninst✝³ : Group H\ninst✝² : TopologicalSpace H\ninst✝¹ : FunLike F H G\ninst✝ : MonoidHomClass F H G\nf : F\nhf : Topology.IsInducing ⇑f\n⊢ TopologicalGroup H","decl":"@[to_additive]\nprotected theorem Topology.IsInducing.topologicalGroup {F : Type*} [Group H] [TopologicalSpace H]\n    [FunLike F H G] [MonoidHomClass F H G] (f : F) (hf : IsInducing f) : TopologicalGroup H :=\n  { toContinuousMul := hf.continuousMul _\n    toContinuousInv := hf.continuousInv (map_inv f) }\n\n"}
{"name":"Topology.IsInducing.topologicalAddGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁶ : TopologicalSpace G\ninst✝⁵ : AddGroup G\ninst✝⁴ : TopologicalAddGroup G\nF : Type u_1\ninst✝³ : AddGroup H\ninst✝² : TopologicalSpace H\ninst✝¹ : FunLike F H G\ninst✝ : AddMonoidHomClass F H G\nf : F\nhf : Topology.IsInducing ⇑f\n⊢ TopologicalAddGroup H","decl":"@[to_additive]\nprotected theorem Topology.IsInducing.topologicalGroup {F : Type*} [Group H] [TopologicalSpace H]\n    [FunLike F H G] [MonoidHomClass F H G] (f : F) (hf : IsInducing f) : TopologicalGroup H :=\n  { toContinuousMul := hf.continuousMul _\n    toContinuousInv := hf.continuousInv (map_inv f) }\n\n"}
{"name":"Inducing.topologicalGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁶ : TopologicalSpace G\ninst✝⁵ : Group G\ninst✝⁴ : TopologicalGroup G\nF : Type u_1\ninst✝³ : Group H\ninst✝² : TopologicalSpace H\ninst✝¹ : FunLike F H G\ninst✝ : MonoidHomClass F H G\nf : F\nhf : Topology.IsInducing ⇑f\n⊢ TopologicalGroup H","decl":"@[deprecated (since := \"2024-10-28\")] alias Inducing.topologicalGroup := IsInducing.topologicalGroup\n\n"}
{"name":"topologicalGroup_induced","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Group G\ninst✝³ : TopologicalGroup G\nF : Type u_1\ninst✝² : Group H\ninst✝¹ : FunLike F H G\ninst✝ : MonoidHomClass F H G\nf : F\n⊢ TopologicalGroup H","decl":"@[to_additive]\ntheorem topologicalGroup_induced {F : Type*} [Group H] [FunLike F H G] [MonoidHomClass F H G]\n    (f : F) :\n    @TopologicalGroup H (induced f ‹_›) _ :=\n  letI := induced f ‹_›\n  IsInducing.topologicalGroup f ⟨rfl⟩\n\n"}
{"name":"topologicalAddGroup_induced","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : AddGroup G\ninst✝³ : TopologicalAddGroup G\nF : Type u_1\ninst✝² : AddGroup H\ninst✝¹ : FunLike F H G\ninst✝ : AddMonoidHomClass F H G\nf : F\n⊢ TopologicalAddGroup H","decl":"@[to_additive]\ntheorem topologicalGroup_induced {F : Type*} [Group H] [FunLike F H G] [MonoidHomClass F H G]\n    (f : F) :\n    @TopologicalGroup H (induced f ‹_›) _ :=\n  letI := induced f ‹_›\n  IsInducing.topologicalGroup f ⟨rfl⟩\n\n"}
{"name":"AddSubgroup.instTopologicalAddGroupSubtypeMem","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nS : AddSubgroup G\n⊢ TopologicalAddGroup (Subtype fun x => Membership.mem S x)","decl":"@[to_additive]\ninstance (S : Subgroup G) : TopologicalGroup S :=\n  IsInducing.subtypeVal.topologicalGroup S.subtype\n\n"}
{"name":"Subgroup.instTopologicalGroupSubtypeMem","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nS : Subgroup G\n⊢ TopologicalGroup (Subtype fun x => Membership.mem S x)","decl":"@[to_additive]\ninstance (S : Subgroup G) : TopologicalGroup S :=\n  IsInducing.subtypeVal.topologicalGroup S.subtype\n\n"}
{"name":"Subgroup.topologicalClosure_coe","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Subgroup G\n⊢ Eq (↑s.topologicalClosure) (closure ↑s)","decl":"@[to_additive (attr := simp)]\ntheorem Subgroup.topologicalClosure_coe {s : Subgroup G} :\n    (s.topologicalClosure : Set G) = _root_.closure s :=\n  rfl\n\n"}
{"name":"AddSubgroup.topologicalClosure_coe","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : AddSubgroup G\n⊢ Eq (↑s.topologicalClosure) (closure ↑s)","decl":"@[to_additive (attr := simp)]\ntheorem Subgroup.topologicalClosure_coe {s : Subgroup G} :\n    (s.topologicalClosure : Set G) = _root_.closure s :=\n  rfl\n\n"}
{"name":"Subgroup.le_topologicalClosure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Subgroup G\n⊢ LE.le s s.topologicalClosure","decl":"@[to_additive]\ntheorem Subgroup.le_topologicalClosure (s : Subgroup G) : s ≤ s.topologicalClosure :=\n  _root_.subset_closure\n\n"}
{"name":"AddSubgroup.le_topologicalClosure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : AddSubgroup G\n⊢ LE.le s s.topologicalClosure","decl":"@[to_additive]\ntheorem Subgroup.le_topologicalClosure (s : Subgroup G) : s ≤ s.topologicalClosure :=\n  _root_.subset_closure\n\n"}
{"name":"Subgroup.isClosed_topologicalClosure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Subgroup G\n⊢ IsClosed ↑s.topologicalClosure","decl":"@[to_additive]\ntheorem Subgroup.isClosed_topologicalClosure (s : Subgroup G) :\n    IsClosed (s.topologicalClosure : Set G) := isClosed_closure\n\n"}
{"name":"AddSubgroup.isClosed_topologicalClosure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : AddSubgroup G\n⊢ IsClosed ↑s.topologicalClosure","decl":"@[to_additive]\ntheorem Subgroup.isClosed_topologicalClosure (s : Subgroup G) :\n    IsClosed (s.topologicalClosure : Set G) := isClosed_closure\n\n"}
{"name":"Subgroup.topologicalClosure_minimal","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Subgroup G\nh : LE.le s t\nht : IsClosed ↑t\n⊢ LE.le s.topologicalClosure t","decl":"@[to_additive]\ntheorem Subgroup.topologicalClosure_minimal (s : Subgroup G) {t : Subgroup G} (h : s ≤ t)\n    (ht : IsClosed (t : Set G)) : s.topologicalClosure ≤ t :=\n  closure_minimal h ht\n\n"}
{"name":"AddSubgroup.topologicalClosure_minimal","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : AddSubgroup G\nh : LE.le s t\nht : IsClosed ↑t\n⊢ LE.le s.topologicalClosure t","decl":"@[to_additive]\ntheorem Subgroup.topologicalClosure_minimal (s : Subgroup G) {t : Subgroup G} (h : s ≤ t)\n    (ht : IsClosed (t : Set G)) : s.topologicalClosure ≤ t :=\n  closure_minimal h ht\n\n"}
{"name":"DenseRange.topologicalClosure_map_subgroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Group G\ninst✝³ : TopologicalGroup G\ninst✝² : Group H\ninst✝¹ : TopologicalSpace H\ninst✝ : TopologicalGroup H\nf : MonoidHom G H\nhf : Continuous ⇑f\nhf' : DenseRange ⇑f\ns : Subgroup G\nhs : Eq s.topologicalClosure Top.top\n⊢ Eq (Subgroup.map f s).topologicalClosure Top.top","decl":"@[to_additive]\ntheorem DenseRange.topologicalClosure_map_subgroup [Group H] [TopologicalSpace H]\n    [TopologicalGroup H] {f : G →* H} (hf : Continuous f) (hf' : DenseRange f) {s : Subgroup G}\n    (hs : s.topologicalClosure = ⊤) : (s.map f).topologicalClosure = ⊤ := by\n  rw [SetLike.ext'_iff] at hs ⊢\n  simp only [Subgroup.topologicalClosure_coe, Subgroup.coe_top, ← dense_iff_closure_eq] at hs ⊢\n  exact hf'.dense_image hf hs\n\n"}
{"name":"DenseRange.topologicalClosure_map_addSubgroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nH : Type x\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : AddGroup G\ninst✝³ : TopologicalAddGroup G\ninst✝² : AddGroup H\ninst✝¹ : TopologicalSpace H\ninst✝ : TopologicalAddGroup H\nf : AddMonoidHom G H\nhf : Continuous ⇑f\nhf' : DenseRange ⇑f\ns : AddSubgroup G\nhs : Eq s.topologicalClosure Top.top\n⊢ Eq (AddSubgroup.map f s).topologicalClosure Top.top","decl":"@[to_additive]\ntheorem DenseRange.topologicalClosure_map_subgroup [Group H] [TopologicalSpace H]\n    [TopologicalGroup H] {f : G →* H} (hf : Continuous f) (hf' : DenseRange f) {s : Subgroup G}\n    (hs : s.topologicalClosure = ⊤) : (s.map f).topologicalClosure = ⊤ := by\n  rw [SetLike.ext'_iff] at hs ⊢\n  simp only [Subgroup.topologicalClosure_coe, Subgroup.coe_top, ← dense_iff_closure_eq] at hs ⊢\n  exact hf'.dense_image hf hs\n\n"}
{"name":"Subgroup.is_normal_topologicalClosure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\nN : Subgroup G\ninst✝ : N.Normal\n⊢ N.topologicalClosure.Normal","decl":"/-- The topological closure of a normal subgroup is normal. -/\n@[to_additive \"The topological closure of a normal additive subgroup is normal.\"]\ntheorem Subgroup.is_normal_topologicalClosure {G : Type*} [TopologicalSpace G] [Group G]\n    [TopologicalGroup G] (N : Subgroup G) [N.Normal] : (Subgroup.topologicalClosure N).Normal where\n  conj_mem n hn g := by\n    apply map_mem_closure (TopologicalGroup.continuous_conj g) hn\n    exact fun m hm => Subgroup.Normal.conj_mem inferInstance m hm g\n\n"}
{"name":"AddSubgroup.is_normal_topologicalClosure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\nN : AddSubgroup G\ninst✝ : N.Normal\n⊢ N.topologicalClosure.Normal","decl":"/-- The topological closure of a normal subgroup is normal. -/\n@[to_additive \"The topological closure of a normal additive subgroup is normal.\"]\ntheorem Subgroup.is_normal_topologicalClosure {G : Type*} [TopologicalSpace G] [Group G]\n    [TopologicalGroup G] (N : Subgroup G) [N.Normal] : (Subgroup.topologicalClosure N).Normal where\n  conj_mem n hn g := by\n    apply map_mem_closure (TopologicalGroup.continuous_conj g) hn\n    exact fun m hm => Subgroup.Normal.conj_mem inferInstance m hm g\n\n"}
{"name":"add_mem_connectedComponent_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : AddZeroClass G\ninst✝ : ContinuousAdd G\ng h : G\nhg : Membership.mem (connectedComponent 0) g\nhh : Membership.mem (connectedComponent 0) h\n⊢ Membership.mem (connectedComponent 0) (HAdd.hAdd g h)","decl":"@[to_additive]\ntheorem mul_mem_connectedComponent_one {G : Type*} [TopologicalSpace G] [MulOneClass G]\n    [ContinuousMul G] {g h : G} (hg : g ∈ connectedComponent (1 : G))\n    (hh : h ∈ connectedComponent (1 : G)) : g * h ∈ connectedComponent (1 : G) := by\n  rw [connectedComponent_eq hg]\n  have hmul : g ∈ connectedComponent (g * h) := by\n    apply Continuous.image_connectedComponent_subset (continuous_mul_left g)\n    rw [← connectedComponent_eq hh]\n    exact ⟨(1 : G), mem_connectedComponent, by simp only [mul_one]⟩\n  simpa [← connectedComponent_eq hmul] using mem_connectedComponent\n\n"}
{"name":"mul_mem_connectedComponent_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : MulOneClass G\ninst✝ : ContinuousMul G\ng h : G\nhg : Membership.mem (connectedComponent 1) g\nhh : Membership.mem (connectedComponent 1) h\n⊢ Membership.mem (connectedComponent 1) (HMul.hMul g h)","decl":"@[to_additive]\ntheorem mul_mem_connectedComponent_one {G : Type*} [TopologicalSpace G] [MulOneClass G]\n    [ContinuousMul G] {g h : G} (hg : g ∈ connectedComponent (1 : G))\n    (hh : h ∈ connectedComponent (1 : G)) : g * h ∈ connectedComponent (1 : G) := by\n  rw [connectedComponent_eq hg]\n  have hmul : g ∈ connectedComponent (g * h) := by\n    apply Continuous.image_connectedComponent_subset (continuous_mul_left g)\n    rw [← connectedComponent_eq hh]\n    exact ⟨(1 : G), mem_connectedComponent, by simp only [mul_one]⟩\n  simpa [← connectedComponent_eq hmul] using mem_connectedComponent\n\n"}
{"name":"neg_mem_connectedComponent_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ng : G\nhg : Membership.mem (connectedComponent 0) g\n⊢ Membership.mem (connectedComponent 0) (Neg.neg g)","decl":"@[to_additive]\ntheorem inv_mem_connectedComponent_one {G : Type*} [TopologicalSpace G] [Group G]\n    [TopologicalGroup G] {g : G} (hg : g ∈ connectedComponent (1 : G)) :\n    g⁻¹ ∈ connectedComponent (1 : G) := by\n  rw [← inv_one]\n  exact\n    Continuous.image_connectedComponent_subset continuous_inv _\n      ((Set.mem_image _ _ _).mp ⟨g, hg, rfl⟩)\n\n"}
{"name":"inv_mem_connectedComponent_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ng : G\nhg : Membership.mem (connectedComponent 1) g\n⊢ Membership.mem (connectedComponent 1) (Inv.inv g)","decl":"@[to_additive]\ntheorem inv_mem_connectedComponent_one {G : Type*} [TopologicalSpace G] [Group G]\n    [TopologicalGroup G] {g : G} (hg : g ∈ connectedComponent (1 : G)) :\n    g⁻¹ ∈ connectedComponent (1 : G) := by\n  rw [← inv_one]\n  exact\n    Continuous.image_connectedComponent_subset continuous_inv _\n      ((Set.mem_image _ _ _).mp ⟨g, hg, rfl⟩)\n\n"}
{"name":"Subgroup.coe_topologicalClosure_bot","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ Eq (↑Bot.bot.topologicalClosure) (closure (Singleton.singleton 1))","decl":"variable (G) in\n@[to_additive]\nlemma Subgroup.coe_topologicalClosure_bot :\n    ((⊥ : Subgroup G).topologicalClosure : Set G) = _root_.closure ({1} : Set G) := by simp\n\n"}
{"name":"AddSubgroup.coe_topologicalClosure_bot","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ Eq (↑Bot.bot.topologicalClosure) (closure (Singleton.singleton 0))","decl":"variable (G) in\n@[to_additive]\nlemma Subgroup.coe_topologicalClosure_bot :\n    ((⊥ : Subgroup G).topologicalClosure : Set G) = _root_.closure ({1} : Set G) := by simp\n\n"}
{"name":"exists_nhds_split_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Set G\nhs : Membership.mem (nhds 1) s\n⊢ Exists fun V => And (Membership.mem (nhds 1) V) (∀ (v : G), Membership.mem V v → ∀ (w : G), Membership.mem V w → Membership.mem s (HDiv.hDiv v w))","decl":"@[to_additive exists_nhds_half_neg]\ntheorem exists_nhds_split_inv {s : Set G} (hs : s ∈ 𝓝 (1 : G)) :\n    ∃ V ∈ 𝓝 (1 : G), ∀ v ∈ V, ∀ w ∈ V, v / w ∈ s := by\n  have : (fun p : G × G => p.1 * p.2⁻¹) ⁻¹' s ∈ 𝓝 ((1, 1) : G × G) :=\n    continuousAt_fst.mul continuousAt_snd.inv (by simpa)\n  simpa only [div_eq_mul_inv, nhds_prod_eq, mem_prod_self_iff, prod_subset_iff, mem_preimage] using\n    this\n\n"}
{"name":"exists_nhds_half_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : Set G\nhs : Membership.mem (nhds 0) s\n⊢ Exists fun V => And (Membership.mem (nhds 0) V) (∀ (v : G), Membership.mem V v → ∀ (w : G), Membership.mem V w → Membership.mem s (HSub.hSub v w))","decl":"@[to_additive exists_nhds_half_neg]\ntheorem exists_nhds_split_inv {s : Set G} (hs : s ∈ 𝓝 (1 : G)) :\n    ∃ V ∈ 𝓝 (1 : G), ∀ v ∈ V, ∀ w ∈ V, v / w ∈ s := by\n  have : (fun p : G × G => p.1 * p.2⁻¹) ⁻¹' s ∈ 𝓝 ((1, 1) : G × G) :=\n    continuousAt_fst.mul continuousAt_snd.inv (by simpa)\n  simpa only [div_eq_mul_inv, nhds_prod_eq, mem_prod_self_iff, prod_subset_iff, mem_preimage] using\n    this\n\n"}
{"name":"nhds_translation_mul_inv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx : G\n⊢ Eq (Filter.comap (fun x_1 => HMul.hMul x_1 (Inv.inv x)) (nhds 1)) (nhds x)","decl":"@[to_additive]\ntheorem nhds_translation_mul_inv (x : G) : comap (· * x⁻¹) (𝓝 1) = 𝓝 x :=\n  ((Homeomorph.mulRight x⁻¹).comap_nhds_eq 1).trans <| show 𝓝 (1 * x⁻¹⁻¹) = 𝓝 x by simp\n\n"}
{"name":"nhds_translation_add_neg","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx : G\n⊢ Eq (Filter.comap (fun x_1 => HAdd.hAdd x_1 (Neg.neg x)) (nhds 0)) (nhds x)","decl":"@[to_additive]\ntheorem nhds_translation_mul_inv (x : G) : comap (· * x⁻¹) (𝓝 1) = 𝓝 x :=\n  ((Homeomorph.mulRight x⁻¹).comap_nhds_eq 1).trans <| show 𝓝 (1 * x⁻¹⁻¹) = 𝓝 x by simp\n\n"}
{"name":"map_mul_left_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx y : G\n⊢ Eq (Filter.map (fun x_1 => HMul.hMul x x_1) (nhds y)) (nhds (HMul.hMul x y))","decl":"@[to_additive (attr := simp)]\ntheorem map_mul_left_nhds (x y : G) : map (x * ·) (𝓝 y) = 𝓝 (x * y) :=\n  (Homeomorph.mulLeft x).map_nhds_eq y\n\n"}
{"name":"map_add_left_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx y : G\n⊢ Eq (Filter.map (fun x_1 => HAdd.hAdd x x_1) (nhds y)) (nhds (HAdd.hAdd x y))","decl":"@[to_additive (attr := simp)]\ntheorem map_mul_left_nhds (x y : G) : map (x * ·) (𝓝 y) = 𝓝 (x * y) :=\n  (Homeomorph.mulLeft x).map_nhds_eq y\n\n"}
{"name":"map_add_left_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx : G\n⊢ Eq (Filter.map (fun x_1 => HAdd.hAdd x x_1) (nhds 0)) (nhds x)","decl":"@[to_additive]\ntheorem map_mul_left_nhds_one (x : G) : map (x * ·) (𝓝 1) = 𝓝 x := by simp\n\n"}
{"name":"map_mul_left_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx : G\n⊢ Eq (Filter.map (fun x_1 => HMul.hMul x x_1) (nhds 1)) (nhds x)","decl":"@[to_additive]\ntheorem map_mul_left_nhds_one (x : G) : map (x * ·) (𝓝 1) = 𝓝 x := by simp\n\n"}
{"name":"map_add_right_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx y : G\n⊢ Eq (Filter.map (fun x_1 => HAdd.hAdd x_1 x) (nhds y)) (nhds (HAdd.hAdd y x))","decl":"@[to_additive (attr := simp)]\ntheorem map_mul_right_nhds (x y : G) : map (· * x) (𝓝 y) = 𝓝 (y * x) :=\n  (Homeomorph.mulRight x).map_nhds_eq y\n\n"}
{"name":"map_mul_right_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx y : G\n⊢ Eq (Filter.map (fun x_1 => HMul.hMul x_1 x) (nhds y)) (nhds (HMul.hMul y x))","decl":"@[to_additive (attr := simp)]\ntheorem map_mul_right_nhds (x y : G) : map (· * x) (𝓝 y) = 𝓝 (y * x) :=\n  (Homeomorph.mulRight x).map_nhds_eq y\n\n"}
{"name":"map_add_right_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx : G\n⊢ Eq (Filter.map (fun x_1 => HAdd.hAdd x_1 x) (nhds 0)) (nhds x)","decl":"@[to_additive]\ntheorem map_mul_right_nhds_one (x : G) : map (· * x) (𝓝 1) = 𝓝 x := by simp\n\n"}
{"name":"map_mul_right_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx : G\n⊢ Eq (Filter.map (fun x_1 => HMul.hMul x_1 x) (nhds 1)) (nhds x)","decl":"@[to_additive]\ntheorem map_mul_right_nhds_one (x : G) : map (· * x) (𝓝 1) = 𝓝 x := by simp\n\n"}
{"name":"Filter.HasBasis.nhds_of_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nι : Sort u_1\np : ι → Prop\ns : ι → Set G\nhb : (nhds 1).HasBasis p s\nx : G\n⊢ (nhds x).HasBasis p fun i => setOf fun y => Membership.mem (s i) (HDiv.hDiv y x)","decl":"@[to_additive]\ntheorem Filter.HasBasis.nhds_of_one {ι : Sort*} {p : ι → Prop} {s : ι → Set G}\n    (hb : HasBasis (𝓝 1 : Filter G) p s) (x : G) :\n    HasBasis (𝓝 x) p fun i => { y | y / x ∈ s i } := by\n  rw [← nhds_translation_mul_inv]\n  simp_rw [div_eq_mul_inv]\n  exact hb.comap _\n\n"}
{"name":"Filter.HasBasis.nhds_of_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nι : Sort u_1\np : ι → Prop\ns : ι → Set G\nhb : (nhds 0).HasBasis p s\nx : G\n⊢ (nhds x).HasBasis p fun i => setOf fun y => Membership.mem (s i) (HSub.hSub y x)","decl":"@[to_additive]\ntheorem Filter.HasBasis.nhds_of_one {ι : Sort*} {p : ι → Prop} {s : ι → Set G}\n    (hb : HasBasis (𝓝 1 : Filter G) p s) (x : G) :\n    HasBasis (𝓝 x) p fun i => { y | y / x ∈ s i } := by\n  rw [← nhds_translation_mul_inv]\n  simp_rw [div_eq_mul_inv]\n  exact hb.comap _\n\n"}
{"name":"mem_closure_iff_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx : G\ns : Set G\n⊢ Iff (Membership.mem (closure s) x) (∀ (U : Set G), Membership.mem (nhds 1) U → Exists fun y => And (Membership.mem s y) (Membership.mem U (HDiv.hDiv y x)))","decl":"@[to_additive]\ntheorem mem_closure_iff_nhds_one {x : G} {s : Set G} :\n    x ∈ closure s ↔ ∀ U ∈ (𝓝 1 : Filter G), ∃ y ∈ s, y / x ∈ U := by\n  rw [mem_closure_iff_nhds_basis ((𝓝 1 : Filter G).basis_sets.nhds_of_one x)]\n  simp_rw [Set.mem_setOf, id]\n\n"}
{"name":"mem_closure_iff_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx : G\ns : Set G\n⊢ Iff (Membership.mem (closure s) x) (∀ (U : Set G), Membership.mem (nhds 0) U → Exists fun y => And (Membership.mem s y) (Membership.mem U (HSub.hSub y x)))","decl":"@[to_additive]\ntheorem mem_closure_iff_nhds_one {x : G} {s : Set G} :\n    x ∈ closure s ↔ ∀ U ∈ (𝓝 1 : Filter G), ∃ y ∈ s, y / x ∈ U := by\n  rw [mem_closure_iff_nhds_basis ((𝓝 1 : Filter G).basis_sets.nhds_of_one x)]\n  simp_rw [Set.mem_setOf, id]\n\n"}
{"name":"continuous_of_continuousAt_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : Group G\ninst✝⁵ : TopologicalGroup G\nM : Type u_1\nhom : Type u_2\ninst✝⁴ : MulOneClass M\ninst✝³ : TopologicalSpace M\ninst✝² : ContinuousMul M\ninst✝¹ : FunLike hom G M\ninst✝ : MonoidHomClass hom G M\nf : hom\nhf : ContinuousAt (⇑f) 1\n⊢ Continuous ⇑f","decl":"/-- A monoid homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) from a\ntopological group to a topological monoid is continuous provided that it is continuous at one. See\nalso `uniformContinuous_of_continuousAt_one`. -/\n@[to_additive\n  \"An additive monoid homomorphism (a bundled morphism of a type that implements\n  `AddMonoidHomClass`) from an additive topological group to an additive topological monoid is\n  continuous provided that it is continuous at zero. See also\n  `uniformContinuous_of_continuousAt_zero`.\"]\ntheorem continuous_of_continuousAt_one {M hom : Type*} [MulOneClass M] [TopologicalSpace M]\n    [ContinuousMul M] [FunLike hom G M] [MonoidHomClass hom G M] (f : hom)\n    (hf : ContinuousAt f 1) :\n    Continuous f :=\n  continuous_iff_continuousAt.2 fun x => by\n    simpa only [ContinuousAt, ← map_mul_left_nhds_one x, tendsto_map'_iff, Function.comp_def,\n      map_mul, map_one, mul_one] using hf.tendsto.const_mul (f x)\n\n"}
{"name":"continuous_of_continuousAt_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : AddGroup G\ninst✝⁵ : TopologicalAddGroup G\nM : Type u_1\nhom : Type u_2\ninst✝⁴ : AddZeroClass M\ninst✝³ : TopologicalSpace M\ninst✝² : ContinuousAdd M\ninst✝¹ : FunLike hom G M\ninst✝ : AddMonoidHomClass hom G M\nf : hom\nhf : ContinuousAt (⇑f) 0\n⊢ Continuous ⇑f","decl":"/-- A monoid homomorphism (a bundled morphism of a type that implements `MonoidHomClass`) from a\ntopological group to a topological monoid is continuous provided that it is continuous at one. See\nalso `uniformContinuous_of_continuousAt_one`. -/\n@[to_additive\n  \"An additive monoid homomorphism (a bundled morphism of a type that implements\n  `AddMonoidHomClass`) from an additive topological group to an additive topological monoid is\n  continuous provided that it is continuous at zero. See also\n  `uniformContinuous_of_continuousAt_zero`.\"]\ntheorem continuous_of_continuousAt_one {M hom : Type*} [MulOneClass M] [TopologicalSpace M]\n    [ContinuousMul M] [FunLike hom G M] [MonoidHomClass hom G M] (f : hom)\n    (hf : ContinuousAt f 1) :\n    Continuous f :=\n  continuous_iff_continuousAt.2 fun x => by\n    simpa only [ContinuousAt, ← map_mul_left_nhds_one x, tendsto_map'_iff, Function.comp_def,\n      map_mul, map_one, mul_one] using hf.tendsto.const_mul (f x)\n\n"}
{"name":"continuous_of_continuousAt_zero₂","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁸ : TopologicalSpace G\ninst✝⁷ : AddGroup G\ninst✝⁶ : TopologicalAddGroup G\nH : Type u_1\nM : Type u_2\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ContinuousAdd M\ninst✝² : AddGroup H\ninst✝¹ : TopologicalSpace H\ninst✝ : TopologicalAddGroup H\nf : AddMonoidHom G (AddMonoidHom H M)\nhf : ContinuousAt (fun x => (f x.1) x.2) { fst := 0, snd := 0 }\nhl : ∀ (x : G), ContinuousAt (⇑(f x)) 0\nhr : ∀ (y : H), ContinuousAt (fun x => (f x) y) 0\n⊢ Continuous fun x => (f x.1) x.2","decl":"@[to_additive continuous_of_continuousAt_zero₂]\ntheorem continuous_of_continuousAt_one₂ {H M : Type*} [CommMonoid M] [TopologicalSpace M]\n    [ContinuousMul M] [Group H] [TopologicalSpace H] [TopologicalGroup H] (f : G →* H →* M)\n    (hf : ContinuousAt (fun x : G × H ↦ f x.1 x.2) (1, 1))\n    (hl : ∀ x, ContinuousAt (f x) 1) (hr : ∀ y, ContinuousAt (f · y) 1) :\n    Continuous (fun x : G × H ↦ f x.1 x.2) := continuous_iff_continuousAt.2 fun (x, y) => by\n  simp only [ContinuousAt, nhds_prod_eq, ← map_mul_left_nhds_one x, ← map_mul_left_nhds_one y,\n    prod_map_map_eq, tendsto_map'_iff, Function.comp_def, map_mul, MonoidHom.mul_apply] at *\n  refine ((tendsto_const_nhds.mul ((hr y).comp tendsto_fst)).mul\n    (((hl x).comp tendsto_snd).mul hf)).mono_right (le_of_eq ?_)\n  simp only [map_one, mul_one, MonoidHom.one_apply]\n\n"}
{"name":"continuous_of_continuousAt_one₂","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁸ : TopologicalSpace G\ninst✝⁷ : Group G\ninst✝⁶ : TopologicalGroup G\nH : Type u_1\nM : Type u_2\ninst✝⁵ : CommMonoid M\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ContinuousMul M\ninst✝² : Group H\ninst✝¹ : TopologicalSpace H\ninst✝ : TopologicalGroup H\nf : MonoidHom G (MonoidHom H M)\nhf : ContinuousAt (fun x => (f x.1) x.2) { fst := 1, snd := 1 }\nhl : ∀ (x : G), ContinuousAt (⇑(f x)) 1\nhr : ∀ (y : H), ContinuousAt (fun x => (f x) y) 1\n⊢ Continuous fun x => (f x.1) x.2","decl":"@[to_additive continuous_of_continuousAt_zero₂]\ntheorem continuous_of_continuousAt_one₂ {H M : Type*} [CommMonoid M] [TopologicalSpace M]\n    [ContinuousMul M] [Group H] [TopologicalSpace H] [TopologicalGroup H] (f : G →* H →* M)\n    (hf : ContinuousAt (fun x : G × H ↦ f x.1 x.2) (1, 1))\n    (hl : ∀ x, ContinuousAt (f x) 1) (hr : ∀ y, ContinuousAt (f · y) 1) :\n    Continuous (fun x : G × H ↦ f x.1 x.2) := continuous_iff_continuousAt.2 fun (x, y) => by\n  simp only [ContinuousAt, nhds_prod_eq, ← map_mul_left_nhds_one x, ← map_mul_left_nhds_one y,\n    prod_map_map_eq, tendsto_map'_iff, Function.comp_def, map_mul, MonoidHom.mul_apply] at *\n  refine ((tendsto_const_nhds.mul ((hr y).comp tendsto_fst)).mul\n    (((hl x).comp tendsto_snd).mul hf)).mono_right (le_of_eq ?_)\n  simp only [map_one, mul_one, MonoidHom.one_apply]\n\n"}
{"name":"TopologicalAddGroup.isInducing_iff_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : AddGroup G\ninst✝⁵ : TopologicalAddGroup G\nH : Type u_1\ninst✝⁴ : AddGroup H\ninst✝³ : TopologicalSpace H\ninst✝² : TopologicalAddGroup H\nF : Type u_2\ninst✝¹ : FunLike F G H\ninst✝ : AddMonoidHomClass F G H\nf : F\n⊢ Iff (Topology.IsInducing ⇑f) (Eq (nhds 0) (Filter.comap (⇑f) (nhds 0)))","decl":"@[to_additive]\nlemma TopologicalGroup.isInducing_iff_nhds_one\n    {H : Type*} [Group H] [TopologicalSpace H] [TopologicalGroup H] {F : Type*}\n    [FunLike F G H] [MonoidHomClass F G H] {f : F} :\n    Topology.IsInducing f ↔ 𝓝 (1 : G) = (𝓝 (1 : H)).comap f := by\n  rw [Topology.isInducing_iff_nhds]\n  refine ⟨(map_one f ▸ · 1), fun hf x ↦ ?_⟩\n  rw [← nhds_translation_mul_inv, ← nhds_translation_mul_inv (f x), Filter.comap_comap, hf,\n    Filter.comap_comap]\n  congr 1\n  ext; simp\n\n-- TODO: unify with `QuotientGroup.isOpenQuotientMap_mk`\n"}
{"name":"TopologicalGroup.isInducing_iff_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : Group G\ninst✝⁵ : TopologicalGroup G\nH : Type u_1\ninst✝⁴ : Group H\ninst✝³ : TopologicalSpace H\ninst✝² : TopologicalGroup H\nF : Type u_2\ninst✝¹ : FunLike F G H\ninst✝ : MonoidHomClass F G H\nf : F\n⊢ Iff (Topology.IsInducing ⇑f) (Eq (nhds 1) (Filter.comap (⇑f) (nhds 1)))","decl":"@[to_additive]\nlemma TopologicalGroup.isInducing_iff_nhds_one\n    {H : Type*} [Group H] [TopologicalSpace H] [TopologicalGroup H] {F : Type*}\n    [FunLike F G H] [MonoidHomClass F G H] {f : F} :\n    Topology.IsInducing f ↔ 𝓝 (1 : G) = (𝓝 (1 : H)).comap f := by\n  rw [Topology.isInducing_iff_nhds]\n  refine ⟨(map_one f ▸ · 1), fun hf x ↦ ?_⟩\n  rw [← nhds_translation_mul_inv, ← nhds_translation_mul_inv (f x), Filter.comap_comap, hf,\n    Filter.comap_comap]\n  congr 1\n  ext; simp\n\n-- TODO: unify with `QuotientGroup.isOpenQuotientMap_mk`\n"}
{"name":"AddMonoidHom.isOpenQuotientMap_of_isQuotientMap","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"A : Type u_1\ninst✝⁶ : AddGroup A\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : TopologicalAddGroup A\nB : Type u_2\ninst✝³ : AddGroup B\ninst✝² : TopologicalSpace B\nF : Type u_3\ninst✝¹ : FunLike F A B\ninst✝ : AddMonoidHomClass F A B\nφ : F\nhφ : Topology.IsQuotientMap ⇑φ\n⊢ IsOpenQuotientMap ⇑φ","decl":"/-- Let `A` and `B` be topological groups, and let `φ : A → B` be a continuous surjective group\nhomomorphism. Assume furthermore that `φ` is a quotient map (i.e., `V ⊆ B`\nis open iff `φ⁻¹ V` is open). Then `φ` is an open quotient map, and in particular an open map. -/\n@[to_additive \"Let `A` and `B` be topological additive groups, and let `φ : A → B` be a continuous\nsurjective additive group homomorphism. Assume furthermore that `φ` is a quotient map (i.e., `V ⊆ B`\nis open iff `φ⁻¹ V` is open). Then `φ` is an open quotient map, and in particular an open map.\"]\nlemma MonoidHom.isOpenQuotientMap_of_isQuotientMap {A : Type*} [Group A]\n    [TopologicalSpace A] [TopologicalGroup A] {B : Type*} [Group B] [TopologicalSpace B]\n    {F : Type*} [FunLike F A B] [MonoidHomClass F A B] {φ : F}\n    (hφ : IsQuotientMap φ) : IsOpenQuotientMap φ where\n    surjective := hφ.surjective\n    continuous := hφ.continuous\n    isOpenMap := by\n      -- We need to check that if `U ⊆ A` is open then `φ⁻¹ (φ U)` is open.\n      intro U hU\n      rw [← hφ.isOpen_preimage]\n      -- It suffices to show that `φ⁻¹ (φ U) = ⋃ (U * k⁻¹)` as `k` runs through the kernel of `φ`,\n      -- as `U * k⁻¹` is open because `x ↦ x * k` is continuous.\n      -- Remark: here is where we use that we have groups not monoids (you cannot avoid\n      -- using both `k` and `k⁻¹` at this point).\n      suffices ⇑φ ⁻¹' (⇑φ '' U) = ⋃ k ∈ ker (φ : A →* B), (fun x ↦ x * k) ⁻¹' U by\n        exact this ▸ isOpen_biUnion (fun k _ ↦ Continuous.isOpen_preimage (by fun_prop) _ hU)\n      ext x\n      -- But this is an elementary calculation.\n      constructor\n      · rintro ⟨y, hyU, hyx⟩\n        apply Set.mem_iUnion_of_mem (x⁻¹ * y)\n        simp_all\n      · rintro ⟨_, ⟨k, rfl⟩, _, ⟨(hk : φ k = 1), rfl⟩, hx⟩\n        use x * k, hx\n        rw [map_mul, hk, mul_one]\n\n"}
{"name":"MonoidHom.isOpenQuotientMap_of_isQuotientMap","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"A : Type u_1\ninst✝⁶ : Group A\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : TopologicalGroup A\nB : Type u_2\ninst✝³ : Group B\ninst✝² : TopologicalSpace B\nF : Type u_3\ninst✝¹ : FunLike F A B\ninst✝ : MonoidHomClass F A B\nφ : F\nhφ : Topology.IsQuotientMap ⇑φ\n⊢ IsOpenQuotientMap ⇑φ","decl":"/-- Let `A` and `B` be topological groups, and let `φ : A → B` be a continuous surjective group\nhomomorphism. Assume furthermore that `φ` is a quotient map (i.e., `V ⊆ B`\nis open iff `φ⁻¹ V` is open). Then `φ` is an open quotient map, and in particular an open map. -/\n@[to_additive \"Let `A` and `B` be topological additive groups, and let `φ : A → B` be a continuous\nsurjective additive group homomorphism. Assume furthermore that `φ` is a quotient map (i.e., `V ⊆ B`\nis open iff `φ⁻¹ V` is open). Then `φ` is an open quotient map, and in particular an open map.\"]\nlemma MonoidHom.isOpenQuotientMap_of_isQuotientMap {A : Type*} [Group A]\n    [TopologicalSpace A] [TopologicalGroup A] {B : Type*} [Group B] [TopologicalSpace B]\n    {F : Type*} [FunLike F A B] [MonoidHomClass F A B] {φ : F}\n    (hφ : IsQuotientMap φ) : IsOpenQuotientMap φ where\n    surjective := hφ.surjective\n    continuous := hφ.continuous\n    isOpenMap := by\n      -- We need to check that if `U ⊆ A` is open then `φ⁻¹ (φ U)` is open.\n      intro U hU\n      rw [← hφ.isOpen_preimage]\n      -- It suffices to show that `φ⁻¹ (φ U) = ⋃ (U * k⁻¹)` as `k` runs through the kernel of `φ`,\n      -- as `U * k⁻¹` is open because `x ↦ x * k` is continuous.\n      -- Remark: here is where we use that we have groups not monoids (you cannot avoid\n      -- using both `k` and `k⁻¹` at this point).\n      suffices ⇑φ ⁻¹' (⇑φ '' U) = ⋃ k ∈ ker (φ : A →* B), (fun x ↦ x * k) ⁻¹' U by\n        exact this ▸ isOpen_biUnion (fun k _ ↦ Continuous.isOpen_preimage (by fun_prop) _ hU)\n      ext x\n      -- But this is an elementary calculation.\n      constructor\n      · rintro ⟨y, hyU, hyx⟩\n        apply Set.mem_iUnion_of_mem (x⁻¹ * y)\n        simp_all\n      · rintro ⟨_, ⟨k, rfl⟩, _, ⟨(hk : φ k = 1), rfl⟩, hx⟩\n        use x * k, hx\n        rw [map_mul, hk, mul_one]\n\n"}
{"name":"TopologicalAddGroup.ext","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nt t' : TopologicalSpace G\ntg : TopologicalAddGroup G\ntg' : TopologicalAddGroup G\nh : Eq (nhds 0) (nhds 0)\n⊢ Eq t t'","decl":"@[to_additive]\ntheorem TopologicalGroup.ext {G : Type*} [Group G] {t t' : TopologicalSpace G}\n    (tg : @TopologicalGroup G t _) (tg' : @TopologicalGroup G t' _)\n    (h : @nhds G t 1 = @nhds G t' 1) : t = t' :=\n  TopologicalSpace.ext_nhds fun x ↦ by\n    rw [← @nhds_translation_mul_inv G t _ _ x, ← @nhds_translation_mul_inv G t' _ _ x, ← h]\n\n"}
{"name":"TopologicalGroup.ext","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\nt t' : TopologicalSpace G\ntg : TopologicalGroup G\ntg' : TopologicalGroup G\nh : Eq (nhds 1) (nhds 1)\n⊢ Eq t t'","decl":"@[to_additive]\ntheorem TopologicalGroup.ext {G : Type*} [Group G] {t t' : TopologicalSpace G}\n    (tg : @TopologicalGroup G t _) (tg' : @TopologicalGroup G t' _)\n    (h : @nhds G t 1 = @nhds G t' 1) : t = t' :=\n  TopologicalSpace.ext_nhds fun x ↦ by\n    rw [← @nhds_translation_mul_inv G t _ _ x, ← @nhds_translation_mul_inv G t' _ _ x, ← h]\n\n"}
{"name":"TopologicalGroup.ext_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\nt t' : TopologicalSpace G\ntg : TopologicalGroup G\ntg' : TopologicalGroup G\n⊢ Iff (Eq t t') (Eq (nhds 1) (nhds 1))","decl":"@[to_additive]\ntheorem TopologicalGroup.ext_iff {G : Type*} [Group G] {t t' : TopologicalSpace G}\n    (tg : @TopologicalGroup G t _) (tg' : @TopologicalGroup G t' _) :\n    t = t' ↔ @nhds G t 1 = @nhds G t' 1 :=\n  ⟨fun h => h ▸ rfl, tg.ext tg'⟩\n\n"}
{"name":"TopologicalAddGroup.ext_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nt t' : TopologicalSpace G\ntg : TopologicalAddGroup G\ntg' : TopologicalAddGroup G\n⊢ Iff (Eq t t') (Eq (nhds 0) (nhds 0))","decl":"@[to_additive]\ntheorem TopologicalGroup.ext_iff {G : Type*} [Group G] {t t' : TopologicalSpace G}\n    (tg : @TopologicalGroup G t _) (tg' : @TopologicalGroup G t' _) :\n    t = t' ↔ @nhds G t 1 = @nhds G t' 1 :=\n  ⟨fun h => h ▸ rfl, tg.ext tg'⟩\n\n"}
{"name":"ContinuousInv.of_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nhinv : Filter.Tendsto (fun x => Inv.inv x) (nhds 1) (nhds 1)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HMul.hMul x₀ x) (nhds 1))\nhconj : ∀ (x₀ : G), Filter.Tendsto (fun x => HMul.hMul (HMul.hMul x₀ x) (Inv.inv x₀)) (nhds 1) (nhds 1)\n⊢ ContinuousInv G","decl":"@[to_additive]\ntheorem ContinuousInv.of_nhds_one {G : Type*} [Group G] [TopologicalSpace G]\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (fun x : G => x₀ * x) (𝓝 1))\n    (hconj : ∀ x₀ : G, Tendsto (fun x : G => x₀ * x * x₀⁻¹) (𝓝 1) (𝓝 1)) : ContinuousInv G := by\n  refine ⟨continuous_iff_continuousAt.2 fun x₀ => ?_⟩\n  have : Tendsto (fun x => x₀⁻¹ * (x₀ * x⁻¹ * x₀⁻¹)) (𝓝 1) (map (x₀⁻¹ * ·) (𝓝 1)) :=\n    (tendsto_map.comp <| hconj x₀).comp hinv\n  simpa only [ContinuousAt, hleft x₀, hleft x₀⁻¹, tendsto_map'_iff, Function.comp_def, mul_assoc,\n    mul_inv_rev, inv_mul_cancel_left] using this\n\n"}
{"name":"ContinuousNeg.of_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nhinv : Filter.Tendsto (fun x => Neg.neg x) (nhds 0) (nhds 0)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HAdd.hAdd x₀ x) (nhds 0))\nhconj : ∀ (x₀ : G), Filter.Tendsto (fun x => HAdd.hAdd (HAdd.hAdd x₀ x) (Neg.neg x₀)) (nhds 0) (nhds 0)\n⊢ ContinuousNeg G","decl":"@[to_additive]\ntheorem ContinuousInv.of_nhds_one {G : Type*} [Group G] [TopologicalSpace G]\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (fun x : G => x₀ * x) (𝓝 1))\n    (hconj : ∀ x₀ : G, Tendsto (fun x : G => x₀ * x * x₀⁻¹) (𝓝 1) (𝓝 1)) : ContinuousInv G := by\n  refine ⟨continuous_iff_continuousAt.2 fun x₀ => ?_⟩\n  have : Tendsto (fun x => x₀⁻¹ * (x₀ * x⁻¹ * x₀⁻¹)) (𝓝 1) (map (x₀⁻¹ * ·) (𝓝 1)) :=\n    (tendsto_map.comp <| hconj x₀).comp hinv\n  simpa only [ContinuousAt, hleft x₀, hleft x₀⁻¹, tendsto_map'_iff, Function.comp_def, mul_assoc,\n    mul_inv_rev, inv_mul_cancel_left] using this\n\n"}
{"name":"TopologicalGroup.of_nhds_one'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HMul.hMul x1 x2) (SProd.sprod (nhds 1) (nhds 1)) (nhds 1)\nhinv : Filter.Tendsto (fun x => Inv.inv x) (nhds 1) (nhds 1)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HMul.hMul x₀ x) (nhds 1))\nhright : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HMul.hMul x x₀) (nhds 1))\n⊢ TopologicalGroup G","decl":"@[to_additive]\ntheorem TopologicalGroup.of_nhds_one' {G : Type u} [Group G] [TopologicalSpace G]\n    (hmul : Tendsto (uncurry ((· * ·) : G → G → G)) (𝓝 1 ×ˢ 𝓝 1) (𝓝 1))\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (fun x => x₀ * x) (𝓝 1))\n    (hright : ∀ x₀ : G, 𝓝 x₀ = map (fun x => x * x₀) (𝓝 1)) : TopologicalGroup G :=\n  { toContinuousMul := ContinuousMul.of_nhds_one hmul hleft hright\n    toContinuousInv :=\n      ContinuousInv.of_nhds_one hinv hleft fun x₀ =>\n        le_of_eq\n          (by\n            rw [show (fun x => x₀ * x * x₀⁻¹) = (fun x => x * x₀⁻¹) ∘ fun x => x₀ * x from rfl, ←\n              map_map, ← hleft, hright, map_map]\n            simp [(· ∘ ·)]) }\n\n"}
{"name":"TopologicalAddGroup.of_nhds_zero'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HAdd.hAdd x1 x2) (SProd.sprod (nhds 0) (nhds 0)) (nhds 0)\nhinv : Filter.Tendsto (fun x => Neg.neg x) (nhds 0) (nhds 0)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HAdd.hAdd x₀ x) (nhds 0))\nhright : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HAdd.hAdd x x₀) (nhds 0))\n⊢ TopologicalAddGroup G","decl":"@[to_additive]\ntheorem TopologicalGroup.of_nhds_one' {G : Type u} [Group G] [TopologicalSpace G]\n    (hmul : Tendsto (uncurry ((· * ·) : G → G → G)) (𝓝 1 ×ˢ 𝓝 1) (𝓝 1))\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (fun x => x₀ * x) (𝓝 1))\n    (hright : ∀ x₀ : G, 𝓝 x₀ = map (fun x => x * x₀) (𝓝 1)) : TopologicalGroup G :=\n  { toContinuousMul := ContinuousMul.of_nhds_one hmul hleft hright\n    toContinuousInv :=\n      ContinuousInv.of_nhds_one hinv hleft fun x₀ =>\n        le_of_eq\n          (by\n            rw [show (fun x => x₀ * x * x₀⁻¹) = (fun x => x * x₀⁻¹) ∘ fun x => x₀ * x from rfl, ←\n              map_map, ← hleft, hright, map_map]\n            simp [(· ∘ ·)]) }\n\n"}
{"name":"TopologicalAddGroup.of_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HAdd.hAdd x1 x2) (SProd.sprod (nhds 0) (nhds 0)) (nhds 0)\nhinv : Filter.Tendsto (fun x => Neg.neg x) (nhds 0) (nhds 0)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HAdd.hAdd x₀ x) (nhds 0))\nhconj : ∀ (x₀ : G), Filter.Tendsto (fun x => HAdd.hAdd (HAdd.hAdd x₀ x) (Neg.neg x₀)) (nhds 0) (nhds 0)\n⊢ TopologicalAddGroup G","decl":"@[to_additive]\ntheorem TopologicalGroup.of_nhds_one {G : Type u} [Group G] [TopologicalSpace G]\n    (hmul : Tendsto (uncurry ((· * ·) : G → G → G)) (𝓝 1 ×ˢ 𝓝 1) (𝓝 1))\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (x₀ * ·) (𝓝 1))\n    (hconj : ∀ x₀ : G, Tendsto (x₀ * · * x₀⁻¹) (𝓝 1) (𝓝 1)) : TopologicalGroup G := by\n  refine TopologicalGroup.of_nhds_one' hmul hinv hleft fun x₀ => ?_\n  replace hconj : ∀ x₀ : G, map (x₀ * · * x₀⁻¹) (𝓝 1) = 𝓝 1 :=\n    fun x₀ => map_eq_of_inverse (x₀⁻¹ * · * x₀⁻¹⁻¹) (by ext; simp [mul_assoc]) (hconj _) (hconj _)\n  rw [← hconj x₀]\n  simpa [Function.comp_def] using hleft _\n\n"}
{"name":"TopologicalGroup.of_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HMul.hMul x1 x2) (SProd.sprod (nhds 1) (nhds 1)) (nhds 1)\nhinv : Filter.Tendsto (fun x => Inv.inv x) (nhds 1) (nhds 1)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HMul.hMul x₀ x) (nhds 1))\nhconj : ∀ (x₀ : G), Filter.Tendsto (fun x => HMul.hMul (HMul.hMul x₀ x) (Inv.inv x₀)) (nhds 1) (nhds 1)\n⊢ TopologicalGroup G","decl":"@[to_additive]\ntheorem TopologicalGroup.of_nhds_one {G : Type u} [Group G] [TopologicalSpace G]\n    (hmul : Tendsto (uncurry ((· * ·) : G → G → G)) (𝓝 1 ×ˢ 𝓝 1) (𝓝 1))\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (x₀ * ·) (𝓝 1))\n    (hconj : ∀ x₀ : G, Tendsto (x₀ * · * x₀⁻¹) (𝓝 1) (𝓝 1)) : TopologicalGroup G := by\n  refine TopologicalGroup.of_nhds_one' hmul hinv hleft fun x₀ => ?_\n  replace hconj : ∀ x₀ : G, map (x₀ * · * x₀⁻¹) (𝓝 1) = 𝓝 1 :=\n    fun x₀ => map_eq_of_inverse (x₀⁻¹ * · * x₀⁻¹⁻¹) (by ext; simp [mul_assoc]) (hconj _) (hconj _)\n  rw [← hconj x₀]\n  simpa [Function.comp_def] using hleft _\n\n"}
{"name":"TopologicalAddGroup.of_comm_of_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : AddCommGroup G\ninst✝ : TopologicalSpace G\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HAdd.hAdd x1 x2) (SProd.sprod (nhds 0) (nhds 0)) (nhds 0)\nhinv : Filter.Tendsto (fun x => Neg.neg x) (nhds 0) (nhds 0)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HAdd.hAdd x₀ x) (nhds 0))\n⊢ TopologicalAddGroup G","decl":"@[to_additive]\ntheorem TopologicalGroup.of_comm_of_nhds_one {G : Type u} [CommGroup G] [TopologicalSpace G]\n    (hmul : Tendsto (uncurry ((· * ·) : G → G → G)) (𝓝 1 ×ˢ 𝓝 1) (𝓝 1))\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (x₀ * ·) (𝓝 1)) : TopologicalGroup G :=\n  TopologicalGroup.of_nhds_one hmul hinv hleft (by simpa using tendsto_id)\n\n"}
{"name":"TopologicalGroup.of_comm_of_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u\ninst✝¹ : CommGroup G\ninst✝ : TopologicalSpace G\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HMul.hMul x1 x2) (SProd.sprod (nhds 1) (nhds 1)) (nhds 1)\nhinv : Filter.Tendsto (fun x => Inv.inv x) (nhds 1) (nhds 1)\nhleft : ∀ (x₀ : G), Eq (nhds x₀) (Filter.map (fun x => HMul.hMul x₀ x) (nhds 1))\n⊢ TopologicalGroup G","decl":"@[to_additive]\ntheorem TopologicalGroup.of_comm_of_nhds_one {G : Type u} [CommGroup G] [TopologicalSpace G]\n    (hmul : Tendsto (uncurry ((· * ·) : G → G → G)) (𝓝 1 ×ˢ 𝓝 1) (𝓝 1))\n    (hinv : Tendsto (fun x : G => x⁻¹) (𝓝 1) (𝓝 1))\n    (hleft : ∀ x₀ : G, 𝓝 x₀ = map (x₀ * ·) (𝓝 1)) : TopologicalGroup G :=\n  TopologicalGroup.of_nhds_one hmul hinv hleft (by simpa using tendsto_id)\n\n"}
{"name":"TopologicalGroup.exists_antitone_basis_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : FirstCountableTopology G\n⊢ Exists fun u => And ((nhds 1).HasAntitoneBasis u) (∀ (n : Nat), HasSubset.Subset (HMul.hMul (u (HAdd.hAdd n 1)) (u (HAdd.hAdd n 1))) (u n))","decl":"variable (G) in\n/-- Any first countable topological group has an antitone neighborhood basis `u : ℕ → Set G` for\nwhich `(u (n + 1)) ^ 2 ⊆ u n`. The existence of such a neighborhood basis is a key tool for\n`QuotientGroup.completeSpace` -/\n@[to_additive\n  \"Any first countable topological additive group has an antitone neighborhood basis\n  `u : ℕ → set G` for which `u (n + 1) + u (n + 1) ⊆ u n`.\n  The existence of such a neighborhood basis is a key tool for `QuotientAddGroup.completeSpace`\"]\ntheorem TopologicalGroup.exists_antitone_basis_nhds_one [FirstCountableTopology G] :\n    ∃ u : ℕ → Set G, (𝓝 1).HasAntitoneBasis u ∧ ∀ n, u (n + 1) * u (n + 1) ⊆ u n := by\n  rcases (𝓝 (1 : G)).exists_antitone_basis with ⟨u, hu, u_anti⟩\n  have :=\n    ((hu.prod_nhds hu).tendsto_iff hu).mp\n      (by simpa only [mul_one] using continuous_mul.tendsto ((1, 1) : G × G))\n  simp only [and_self_iff, mem_prod, and_imp, Prod.forall, exists_true_left, Prod.exists,\n    forall_true_left] at this\n  have event_mul : ∀ n : ℕ, ∀ᶠ m in atTop, u m * u m ⊆ u n := by\n    intro n\n    rcases this n with ⟨j, k, -, h⟩\n    refine atTop_basis.eventually_iff.mpr ⟨max j k, True.intro, fun m hm => ?_⟩\n    rintro - ⟨a, ha, b, hb, rfl⟩\n    exact h a b (u_anti ((le_max_left _ _).trans hm) ha) (u_anti ((le_max_right _ _).trans hm) hb)\n  obtain ⟨φ, -, hφ, φ_anti_basis⟩ := HasAntitoneBasis.subbasis_with_rel ⟨hu, u_anti⟩ event_mul\n  exact ⟨u ∘ φ, φ_anti_basis, fun n => hφ n.lt_succ_self⟩\n\n"}
{"name":"TopologicalAddGroup.exists_antitone_basis_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : FirstCountableTopology G\n⊢ Exists fun u => And ((nhds 0).HasAntitoneBasis u) (∀ (n : Nat), HasSubset.Subset (HAdd.hAdd (u (HAdd.hAdd n 1)) (u (HAdd.hAdd n 1))) (u n))","decl":"variable (G) in\n/-- Any first countable topological group has an antitone neighborhood basis `u : ℕ → Set G` for\nwhich `(u (n + 1)) ^ 2 ⊆ u n`. The existence of such a neighborhood basis is a key tool for\n`QuotientGroup.completeSpace` -/\n@[to_additive\n  \"Any first countable topological additive group has an antitone neighborhood basis\n  `u : ℕ → set G` for which `u (n + 1) + u (n + 1) ⊆ u n`.\n  The existence of such a neighborhood basis is a key tool for `QuotientAddGroup.completeSpace`\"]\ntheorem TopologicalGroup.exists_antitone_basis_nhds_one [FirstCountableTopology G] :\n    ∃ u : ℕ → Set G, (𝓝 1).HasAntitoneBasis u ∧ ∀ n, u (n + 1) * u (n + 1) ⊆ u n := by\n  rcases (𝓝 (1 : G)).exists_antitone_basis with ⟨u, hu, u_anti⟩\n  have :=\n    ((hu.prod_nhds hu).tendsto_iff hu).mp\n      (by simpa only [mul_one] using continuous_mul.tendsto ((1, 1) : G × G))\n  simp only [and_self_iff, mem_prod, and_imp, Prod.forall, exists_true_left, Prod.exists,\n    forall_true_left] at this\n  have event_mul : ∀ n : ℕ, ∀ᶠ m in atTop, u m * u m ⊆ u n := by\n    intro n\n    rcases this n with ⟨j, k, -, h⟩\n    refine atTop_basis.eventually_iff.mpr ⟨max j k, True.intro, fun m hm => ?_⟩\n    rintro - ⟨a, ha, b, hb, rfl⟩\n    exact h a b (u_anti ((le_max_left _ _).trans hm) ha) (u_anti ((le_max_right _ _).trans hm) hb)\n  obtain ⟨φ, -, hφ, φ_anti_basis⟩ := HasAntitoneBasis.subbasis_with_rel ⟨hu, u_anti⟩ event_mul\n  exact ⟨u ∘ φ, φ_anti_basis, fun n => hφ n.lt_succ_self⟩\n\n"}
{"name":"ContinuousSub.continuous_sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\ninst✝ : Sub G\nself : ContinuousSub G\n⊢ Continuous fun p => HSub.hSub p.1 p.2","decl":"/-- A typeclass saying that `p : G × G ↦ p.1 - p.2` is a continuous function. This property\nautomatically holds for topological additive groups but it also holds, e.g., for `ℝ≥0`. -/\nclass ContinuousSub (G : Type*) [TopologicalSpace G] [Sub G] : Prop where\n  continuous_sub : Continuous fun p : G × G => p.1 - p.2\n\n"}
{"name":"ContinuousDiv.continuous_div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : TopologicalSpace G\ninst✝ : Div G\nself : ContinuousDiv G\n⊢ Continuous fun p => HDiv.hDiv p.1 p.2","decl":"/-- A typeclass saying that `p : G × G ↦ p.1 / p.2` is a continuous function. This property\nautomatically holds for topological groups. Lemmas using this class have primes.\nThe unprimed version is for `GroupWithZero`. -/\n@[to_additive existing]\nclass ContinuousDiv (G : Type*) [TopologicalSpace G] [Div G] : Prop where\n  continuous_div' : Continuous fun p : G × G => p.1 / p.2\n\n-- see Note [lower instance priority]\n"}
{"name":"TopologicalGroup.to_continuousDiv","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ ContinuousDiv G","decl":"@[to_additive]\ninstance (priority := 100) TopologicalGroup.to_continuousDiv [TopologicalSpace G] [Group G]\n    [TopologicalGroup G] : ContinuousDiv G :=\n  ⟨by\n    simp only [div_eq_mul_inv]\n    exact continuous_fst.mul continuous_snd.inv⟩\n\n"}
{"name":"TopologicalAddGroup.to_continuousSub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ ContinuousSub G","decl":"@[to_additive]\ninstance (priority := 100) TopologicalGroup.to_continuousDiv [TopologicalSpace G] [Group G]\n    [TopologicalGroup G] : ContinuousDiv G :=\n  ⟨by\n    simp only [div_eq_mul_inv]\n    exact continuous_fst.mul continuous_snd.inv⟩\n\n"}
{"name":"Filter.Tendsto.sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Sub G\ninst✝ : ContinuousSub G\nf g : α → G\nl : Filter α\na b : G\nhf : Filter.Tendsto f l (nhds a)\nhg : Filter.Tendsto g l (nhds b)\n⊢ Filter.Tendsto (fun x => HSub.hSub (f x) (g x)) l (nhds (HSub.hSub a b))","decl":"@[to_additive sub]\ntheorem Filter.Tendsto.div' {f g : α → G} {l : Filter α} {a b : G} (hf : Tendsto f l (𝓝 a))\n    (hg : Tendsto g l (𝓝 b)) : Tendsto (fun x => f x / g x) l (𝓝 (a / b)) :=\n  (continuous_div'.tendsto (a, b)).comp (hf.prod_mk_nhds hg)\n\n"}
{"name":"Filter.Tendsto.div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Div G\ninst✝ : ContinuousDiv G\nf g : α → G\nl : Filter α\na b : G\nhf : Filter.Tendsto f l (nhds a)\nhg : Filter.Tendsto g l (nhds b)\n⊢ Filter.Tendsto (fun x => HDiv.hDiv (f x) (g x)) l (nhds (HDiv.hDiv a b))","decl":"@[to_additive sub]\ntheorem Filter.Tendsto.div' {f g : α → G} {l : Filter α} {a b : G} (hf : Tendsto f l (𝓝 a))\n    (hg : Tendsto g l (𝓝 b)) : Tendsto (fun x => f x / g x) l (𝓝 (a / b)) :=\n  (continuous_div'.tendsto (a, b)).comp (hf.prod_mk_nhds hg)\n\n"}
{"name":"Filter.Tendsto.const_sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Sub G\ninst✝ : ContinuousSub G\nb c : G\nf : α → G\nl : Filter α\nh : Filter.Tendsto f l (nhds c)\n⊢ Filter.Tendsto (fun k => HSub.hSub b (f k)) l (nhds (HSub.hSub b c))","decl":"@[to_additive const_sub]\ntheorem Filter.Tendsto.const_div' (b : G) {c : G} {f : α → G} {l : Filter α}\n    (h : Tendsto f l (𝓝 c)) : Tendsto (fun k : α => b / f k) l (𝓝 (b / c)) :=\n  tendsto_const_nhds.div' h\n\n"}
{"name":"Filter.Tendsto.const_div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Div G\ninst✝ : ContinuousDiv G\nb c : G\nf : α → G\nl : Filter α\nh : Filter.Tendsto f l (nhds c)\n⊢ Filter.Tendsto (fun k => HDiv.hDiv b (f k)) l (nhds (HDiv.hDiv b c))","decl":"@[to_additive const_sub]\ntheorem Filter.Tendsto.const_div' (b : G) {c : G} {f : α → G} {l : Filter α}\n    (h : Tendsto f l (𝓝 c)) : Tendsto (fun k : α => b / f k) l (𝓝 (b / c)) :=\n  tendsto_const_nhds.div' h\n\n"}
{"name":"Filter.tendsto_const_div_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nG : Type u_1\ninst✝² : CommGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousDiv G\nb c : G\nf : α → G\nl : Filter α\n⊢ Iff (Filter.Tendsto (fun k => HDiv.hDiv b (f k)) l (nhds (HDiv.hDiv b c))) (Filter.Tendsto f l (nhds c))","decl":"@[to_additive]\nlemma Filter.tendsto_const_div_iff {G : Type*} [CommGroup G] [TopologicalSpace G] [ContinuousDiv G]\n    (b : G) {c : G} {f : α → G} {l : Filter α} :\n    Tendsto (fun k : α ↦ b / f k) l (𝓝 (b / c)) ↔ Tendsto f l (𝓝 c) := by\n  refine ⟨fun h ↦ ?_, Filter.Tendsto.const_div' b⟩\n  convert h.const_div' b with k <;> rw [div_div_cancel]\n\n"}
{"name":"Filter.tendsto_const_sub_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nG : Type u_1\ninst✝² : AddCommGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousSub G\nb c : G\nf : α → G\nl : Filter α\n⊢ Iff (Filter.Tendsto (fun k => HSub.hSub b (f k)) l (nhds (HSub.hSub b c))) (Filter.Tendsto f l (nhds c))","decl":"@[to_additive]\nlemma Filter.tendsto_const_div_iff {G : Type*} [CommGroup G] [TopologicalSpace G] [ContinuousDiv G]\n    (b : G) {c : G} {f : α → G} {l : Filter α} :\n    Tendsto (fun k : α ↦ b / f k) l (𝓝 (b / c)) ↔ Tendsto f l (𝓝 c) := by\n  refine ⟨fun h ↦ ?_, Filter.Tendsto.const_div' b⟩\n  convert h.const_div' b with k <;> rw [div_div_cancel]\n\n"}
{"name":"Filter.Tendsto.sub_const","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Sub G\ninst✝ : ContinuousSub G\nc : G\nf : α → G\nl : Filter α\nh : Filter.Tendsto f l (nhds c)\nb : G\n⊢ Filter.Tendsto (fun x => HSub.hSub (f x) b) l (nhds (HSub.hSub c b))","decl":"@[to_additive sub_const]\ntheorem Filter.Tendsto.div_const' {c : G} {f : α → G} {l : Filter α} (h : Tendsto f l (𝓝 c))\n    (b : G) : Tendsto (f · / b) l (𝓝 (c / b)) :=\n  h.div' tendsto_const_nhds\n\n"}
{"name":"Filter.Tendsto.div_const'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝² : TopologicalSpace G\ninst✝¹ : Div G\ninst✝ : ContinuousDiv G\nc : G\nf : α → G\nl : Filter α\nh : Filter.Tendsto f l (nhds c)\nb : G\n⊢ Filter.Tendsto (fun x => HDiv.hDiv (f x) b) l (nhds (HDiv.hDiv c b))","decl":"@[to_additive sub_const]\ntheorem Filter.Tendsto.div_const' {c : G} {f : α → G} {l : Filter α} (h : Tendsto f l (𝓝 c))\n    (b : G) : Tendsto (f · / b) l (𝓝 (c / b)) :=\n  h.div' tendsto_const_nhds\n\n"}
{"name":"Filter.tendsto_div_const_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nG : Type u_1\ninst✝² : CommGroupWithZero G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousDiv G\nb : G\nhb : Ne b 0\nc : G\nf : α → G\nl : Filter α\n⊢ Iff (Filter.Tendsto (fun x => HDiv.hDiv (f x) b) l (nhds (HDiv.hDiv c b))) (Filter.Tendsto f l (nhds c))","decl":"lemma Filter.tendsto_div_const_iff {G : Type*}\n    [CommGroupWithZero G] [TopologicalSpace G] [ContinuousDiv G]\n    {b : G} (hb : b ≠ 0) {c : G} {f : α → G} {l : Filter α} :\n    Tendsto (f · / b) l (𝓝 (c / b)) ↔ Tendsto f l (𝓝 c) := by\n  refine ⟨fun h ↦ ?_, fun h ↦ Filter.Tendsto.div_const' h b⟩\n  convert h.div_const' b⁻¹ with k <;> rw [div_div, mul_inv_cancel₀ hb, div_one]\n\n"}
{"name":"Filter.tendsto_sub_const_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nG : Type u_1\ninst✝² : AddCommGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousSub G\nb c : G\nf : α → G\nl : Filter α\n⊢ Iff (Filter.Tendsto (fun x => HSub.hSub (f x) b) l (nhds (HSub.hSub c b))) (Filter.Tendsto f l (nhds c))","decl":"lemma Filter.tendsto_sub_const_iff {G : Type*}\n    [AddCommGroup G] [TopologicalSpace G] [ContinuousSub G]\n    (b : G) {c : G} {f : α → G} {l : Filter α} :\n    Tendsto (f · - b) l (𝓝 (c - b)) ↔ Tendsto f l (𝓝 c) := by\n  refine ⟨fun h ↦ ?_, fun h ↦ Filter.Tendsto.sub_const h b⟩\n  convert h.sub_const (-b) with k <;> rw [sub_sub, ← sub_eq_add_neg, sub_self, sub_zero]\n\n"}
{"name":"Continuous.div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Div G\ninst✝¹ : ContinuousDiv G\ninst✝ : TopologicalSpace α\nf g : α → G\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun x => HDiv.hDiv (f x) (g x)","decl":"@[to_additive (attr := continuity, fun_prop) sub]\ntheorem Continuous.div' (hf : Continuous f) (hg : Continuous g) : Continuous fun x => f x / g x :=\n  continuous_div'.comp (hf.prod_mk hg :)\n\n"}
{"name":"Continuous.sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Sub G\ninst✝¹ : ContinuousSub G\ninst✝ : TopologicalSpace α\nf g : α → G\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun x => HSub.hSub (f x) (g x)","decl":"@[to_additive (attr := continuity, fun_prop) sub]\ntheorem Continuous.div' (hf : Continuous f) (hg : Continuous g) : Continuous fun x => f x / g x :=\n  continuous_div'.comp (hf.prod_mk hg :)\n\n"}
{"name":"continuous_div_left'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Div G\ninst✝ : ContinuousDiv G\na : G\n⊢ Continuous fun x => HDiv.hDiv a x","decl":"@[to_additive (attr := continuity) continuous_sub_left]\nlemma continuous_div_left' (a : G) : Continuous (a / ·) := continuous_const.div' continuous_id\n\n"}
{"name":"continuous_sub_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Sub G\ninst✝ : ContinuousSub G\na : G\n⊢ Continuous fun x => HSub.hSub a x","decl":"@[to_additive (attr := continuity) continuous_sub_left]\nlemma continuous_div_left' (a : G) : Continuous (a / ·) := continuous_const.div' continuous_id\n\n"}
{"name":"continuous_div_right'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Div G\ninst✝ : ContinuousDiv G\na : G\n⊢ Continuous fun x => HDiv.hDiv x a","decl":"@[to_additive (attr := continuity) continuous_sub_right]\nlemma continuous_div_right' (a : G) : Continuous (· / a) := continuous_id.div' continuous_const\n\n"}
{"name":"continuous_sub_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Sub G\ninst✝ : ContinuousSub G\na : G\n⊢ Continuous fun x => HSub.hSub x a","decl":"@[to_additive (attr := continuity) continuous_sub_right]\nlemma continuous_div_right' (a : G) : Continuous (· / a) := continuous_id.div' continuous_const\n\n"}
{"name":"ContinuousAt.sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Sub G\ninst✝¹ : ContinuousSub G\ninst✝ : TopologicalSpace α\nf g : α → G\nx : α\nhf : ContinuousAt f x\nhg : ContinuousAt g x\n⊢ ContinuousAt (fun x => HSub.hSub (f x) (g x)) x","decl":"@[to_additive (attr := fun_prop) sub]\ntheorem ContinuousAt.div' {f g : α → G} {x : α} (hf : ContinuousAt f x) (hg : ContinuousAt g x) :\n    ContinuousAt (fun x => f x / g x) x :=\n  Filter.Tendsto.div' hf hg\n\n"}
{"name":"ContinuousAt.div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Div G\ninst✝¹ : ContinuousDiv G\ninst✝ : TopologicalSpace α\nf g : α → G\nx : α\nhf : ContinuousAt f x\nhg : ContinuousAt g x\n⊢ ContinuousAt (fun x => HDiv.hDiv (f x) (g x)) x","decl":"@[to_additive (attr := fun_prop) sub]\ntheorem ContinuousAt.div' {f g : α → G} {x : α} (hf : ContinuousAt f x) (hg : ContinuousAt g x) :\n    ContinuousAt (fun x => f x / g x) x :=\n  Filter.Tendsto.div' hf hg\n\n"}
{"name":"ContinuousWithinAt.div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Div G\ninst✝¹ : ContinuousDiv G\ninst✝ : TopologicalSpace α\nf g : α → G\ns : Set α\nx : α\nhf : ContinuousWithinAt f s x\nhg : ContinuousWithinAt g s x\n⊢ ContinuousWithinAt (fun x => HDiv.hDiv (f x) (g x)) s x","decl":"@[to_additive sub]\ntheorem ContinuousWithinAt.div' (hf : ContinuousWithinAt f s x) (hg : ContinuousWithinAt g s x) :\n    ContinuousWithinAt (fun x => f x / g x) s x :=\n  Filter.Tendsto.div' hf hg\n\n"}
{"name":"ContinuousWithinAt.sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Sub G\ninst✝¹ : ContinuousSub G\ninst✝ : TopologicalSpace α\nf g : α → G\ns : Set α\nx : α\nhf : ContinuousWithinAt f s x\nhg : ContinuousWithinAt g s x\n⊢ ContinuousWithinAt (fun x => HSub.hSub (f x) (g x)) s x","decl":"@[to_additive sub]\ntheorem ContinuousWithinAt.div' (hf : ContinuousWithinAt f s x) (hg : ContinuousWithinAt g s x) :\n    ContinuousWithinAt (fun x => f x / g x) s x :=\n  Filter.Tendsto.div' hf hg\n\n"}
{"name":"ContinuousOn.div'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Div G\ninst✝¹ : ContinuousDiv G\ninst✝ : TopologicalSpace α\nf g : α → G\ns : Set α\nhf : ContinuousOn f s\nhg : ContinuousOn g s\n⊢ ContinuousOn (fun x => HDiv.hDiv (f x) (g x)) s","decl":"@[to_additive (attr := fun_prop) sub]\ntheorem ContinuousOn.div' (hf : ContinuousOn f s) (hg : ContinuousOn g s) :\n    ContinuousOn (fun x => f x / g x) s := fun x hx => (hf x hx).div' (hg x hx)\n\n"}
{"name":"ContinuousOn.sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝³ : TopologicalSpace G\ninst✝² : Sub G\ninst✝¹ : ContinuousSub G\ninst✝ : TopologicalSpace α\nf g : α → G\ns : Set α\nhf : ContinuousOn f s\nhg : ContinuousOn g s\n⊢ ContinuousOn (fun x => HSub.hSub (f x) (g x)) s","decl":"@[to_additive (attr := fun_prop) sub]\ntheorem ContinuousOn.div' (hf : ContinuousOn f s) (hg : ContinuousOn g s) :\n    ContinuousOn (fun x => f x / g x) s := fun x hx => (hf x hx).div' (hg x hx)\n\n"}
{"name":"Homeomorph.divLeft_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\nx b : G\n⊢ Eq ((Homeomorph.divLeft x) b) (HDiv.hDiv x b)","decl":"/-- A version of `Homeomorph.mulLeft a b⁻¹` that is defeq to `a / b`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \" A version of `Homeomorph.addLeft a (-b)` that is defeq to `a - b`. \"]\ndef Homeomorph.divLeft (x : G) : G ≃ₜ G :=\n  { Equiv.divLeft x with\n    continuous_toFun := continuous_const.div' continuous_id\n    continuous_invFun := continuous_inv.mul continuous_const }\n\n"}
{"name":"Homeomorph.subLeft_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\nx b : G\n⊢ Eq ((Homeomorph.subLeft x) b) (HSub.hSub x b)","decl":"/-- A version of `Homeomorph.mulLeft a b⁻¹` that is defeq to `a / b`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \" A version of `Homeomorph.addLeft a (-b)` that is defeq to `a - b`. \"]\ndef Homeomorph.divLeft (x : G) : G ≃ₜ G :=\n  { Equiv.divLeft x with\n    continuous_toFun := continuous_const.div' continuous_id\n    continuous_invFun := continuous_inv.mul continuous_const }\n\n"}
{"name":"Homeomorph.subLeft_symm_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\nx b : G\n⊢ Eq ((Homeomorph.subLeft x).symm b) (HAdd.hAdd (Neg.neg b) x)","decl":"/-- A version of `Homeomorph.mulLeft a b⁻¹` that is defeq to `a / b`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \" A version of `Homeomorph.addLeft a (-b)` that is defeq to `a - b`. \"]\ndef Homeomorph.divLeft (x : G) : G ≃ₜ G :=\n  { Equiv.divLeft x with\n    continuous_toFun := continuous_const.div' continuous_id\n    continuous_invFun := continuous_inv.mul continuous_const }\n\n"}
{"name":"Homeomorph.divLeft_symm_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\nx b : G\n⊢ Eq ((Homeomorph.divLeft x).symm b) (HMul.hMul (Inv.inv b) x)","decl":"/-- A version of `Homeomorph.mulLeft a b⁻¹` that is defeq to `a / b`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \" A version of `Homeomorph.addLeft a (-b)` that is defeq to `a - b`. \"]\ndef Homeomorph.divLeft (x : G) : G ≃ₜ G :=\n  { Equiv.divLeft x with\n    continuous_toFun := continuous_const.div' continuous_id\n    continuous_invFun := continuous_inv.mul continuous_const }\n\n"}
{"name":"isOpenMap_sub_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\na : G\n⊢ IsOpenMap fun x => HSub.hSub a x","decl":"@[to_additive]\ntheorem isOpenMap_div_left (a : G) : IsOpenMap (a / ·) :=\n  (Homeomorph.divLeft _).isOpenMap\n\n"}
{"name":"isOpenMap_div_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\na : G\n⊢ IsOpenMap fun x => HDiv.hDiv a x","decl":"@[to_additive]\ntheorem isOpenMap_div_left (a : G) : IsOpenMap (a / ·) :=\n  (Homeomorph.divLeft _).isOpenMap\n\n"}
{"name":"isClosedMap_sub_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\na : G\n⊢ IsClosedMap fun x => HSub.hSub a x","decl":"@[to_additive]\ntheorem isClosedMap_div_left (a : G) : IsClosedMap (a / ·) :=\n  (Homeomorph.divLeft _).isClosedMap\n\n"}
{"name":"isClosedMap_div_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\na : G\n⊢ IsClosedMap fun x => HDiv.hDiv a x","decl":"@[to_additive]\ntheorem isClosedMap_div_left (a : G) : IsClosedMap (a / ·) :=\n  (Homeomorph.divLeft _).isClosedMap\n\n"}
{"name":"Homeomorph.divRight_symm_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\nx b : G\n⊢ Eq ((Homeomorph.divRight x).symm b) (HMul.hMul b x)","decl":"/-- A version of `Homeomorph.mulRight a⁻¹ b` that is defeq to `b / a`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \"A version of `Homeomorph.addRight (-a) b` that is defeq to `b - a`. \"]\ndef Homeomorph.divRight (x : G) : G ≃ₜ G :=\n  { Equiv.divRight x with\n    continuous_toFun := continuous_id.div' continuous_const\n    continuous_invFun := continuous_id.mul continuous_const }\n\n"}
{"name":"Homeomorph.subRight_symm_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\nx b : G\n⊢ Eq ((Homeomorph.subRight x).symm b) (HAdd.hAdd b x)","decl":"/-- A version of `Homeomorph.mulRight a⁻¹ b` that is defeq to `b / a`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \"A version of `Homeomorph.addRight (-a) b` that is defeq to `b - a`. \"]\ndef Homeomorph.divRight (x : G) : G ≃ₜ G :=\n  { Equiv.divRight x with\n    continuous_toFun := continuous_id.div' continuous_const\n    continuous_invFun := continuous_id.mul continuous_const }\n\n"}
{"name":"Homeomorph.divRight_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\nx b : G\n⊢ Eq ((Homeomorph.divRight x) b) (HDiv.hDiv b x)","decl":"/-- A version of `Homeomorph.mulRight a⁻¹ b` that is defeq to `b / a`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \"A version of `Homeomorph.addRight (-a) b` that is defeq to `b - a`. \"]\ndef Homeomorph.divRight (x : G) : G ≃ₜ G :=\n  { Equiv.divRight x with\n    continuous_toFun := continuous_id.div' continuous_const\n    continuous_invFun := continuous_id.mul continuous_const }\n\n"}
{"name":"Homeomorph.subRight_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\nx b : G\n⊢ Eq ((Homeomorph.subRight x) b) (HSub.hSub b x)","decl":"/-- A version of `Homeomorph.mulRight a⁻¹ b` that is defeq to `b / a`. -/\n@[to_additive (attr := simps! (config := { simpRhs := true }))\n  \"A version of `Homeomorph.addRight (-a) b` that is defeq to `b - a`. \"]\ndef Homeomorph.divRight (x : G) : G ≃ₜ G :=\n  { Equiv.divRight x with\n    continuous_toFun := continuous_id.div' continuous_const\n    continuous_invFun := continuous_id.mul continuous_const }\n\n"}
{"name":"isOpenMap_div_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\na : G\n⊢ IsOpenMap fun x => HDiv.hDiv x a","decl":"@[to_additive]\nlemma isOpenMap_div_right (a : G) : IsOpenMap (· / a) := (Homeomorph.divRight a).isOpenMap\n\n"}
{"name":"isOpenMap_sub_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\na : G\n⊢ IsOpenMap fun x => HSub.hSub x a","decl":"@[to_additive]\nlemma isOpenMap_div_right (a : G) : IsOpenMap (· / a) := (Homeomorph.divRight a).isOpenMap\n\n"}
{"name":"isClosedMap_div_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\na : G\n⊢ IsClosedMap fun x => HDiv.hDiv x a","decl":"@[to_additive]\nlemma isClosedMap_div_right (a : G) : IsClosedMap (· / a) := (Homeomorph.divRight a).isClosedMap\n\n"}
{"name":"isClosedMap_sub_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\na : G\n⊢ IsClosedMap fun x => HSub.hSub x a","decl":"@[to_additive]\nlemma isClosedMap_div_right (a : G) : IsClosedMap (· / a) := (Homeomorph.divRight a).isClosedMap\n\n"}
{"name":"tendsto_sub_nhds_zero_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\nα : Type u_1\nl : Filter α\nx : G\nu : α → G\n⊢ Iff (Filter.Tendsto (fun x_1 => HSub.hSub (u x_1) x) l (nhds 0)) (Filter.Tendsto u l (nhds x))","decl":"@[to_additive]\ntheorem tendsto_div_nhds_one_iff {α : Type*} {l : Filter α} {x : G} {u : α → G} :\n    Tendsto (u · / x) l (𝓝 1) ↔ Tendsto u l (𝓝 x) :=\n  haveI A : Tendsto (fun _ : α => x) l (𝓝 x) := tendsto_const_nhds\n  ⟨fun h => by simpa using h.mul A, fun h => by simpa using h.div' A⟩\n\n"}
{"name":"tendsto_div_nhds_one_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\nα : Type u_1\nl : Filter α\nx : G\nu : α → G\n⊢ Iff (Filter.Tendsto (fun x_1 => HDiv.hDiv (u x_1) x) l (nhds 1)) (Filter.Tendsto u l (nhds x))","decl":"@[to_additive]\ntheorem tendsto_div_nhds_one_iff {α : Type*} {l : Filter α} {x : G} {u : α → G} :\n    Tendsto (u · / x) l (𝓝 1) ↔ Tendsto u l (𝓝 x) :=\n  haveI A : Tendsto (fun _ : α => x) l (𝓝 x) := tendsto_const_nhds\n  ⟨fun h => by simpa using h.mul A, fun h => by simpa using h.div' A⟩\n\n"}
{"name":"nhds_translation_div","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalGroup G\nx : G\n⊢ Eq (Filter.comap (fun x_1 => HDiv.hDiv x_1 x) (nhds 1)) (nhds x)","decl":"@[to_additive]\ntheorem nhds_translation_div (x : G) : comap (· / x) (𝓝 1) = 𝓝 x := by\n  simpa only [div_eq_mul_inv] using nhds_translation_mul_inv x\n\n"}
{"name":"nhds_translation_sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : TopologicalAddGroup G\nx : G\n⊢ Eq (Filter.comap (fun x_1 => HSub.hSub x_1 x) (nhds 0)) (nhds x)","decl":"@[to_additive]\ntheorem nhds_translation_div (x : G) : comap (· / x) (𝓝 1) = 𝓝 x := by\n  simpa only [div_eq_mul_inv] using nhds_translation_mul_inv x\n\n"}
{"name":"subset_interior_smul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nβ : Type v\ninst✝⁴ : TopologicalSpace β\ninst✝³ : Group α\ninst✝² : MulAction α β\ninst✝¹ : ContinuousConstSMul α β\ns : Set α\nt : Set β\ninst✝ : TopologicalSpace α\n⊢ HasSubset.Subset (HSMul.hSMul (interior s) (interior t)) (interior (HSMul.hSMul s t))","decl":"@[to_additive]\ntheorem subset_interior_smul : interior s • interior t ⊆ interior (s • t) :=\n  (Set.smul_subset_smul_right interior_subset).trans subset_interior_smul_right\n\n"}
{"name":"subset_interior_vadd","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nβ : Type v\ninst✝⁴ : TopologicalSpace β\ninst✝³ : AddGroup α\ninst✝² : AddAction α β\ninst✝¹ : ContinuousConstVAdd α β\ns : Set α\nt : Set β\ninst✝ : TopologicalSpace α\n⊢ HasSubset.Subset (HVAdd.hVAdd (interior s) (interior t)) (interior (HVAdd.hVAdd s t))","decl":"@[to_additive]\ntheorem subset_interior_smul : interior s • interior t ⊆ interior (s • t) :=\n  (Set.smul_subset_smul_right interior_subset).trans subset_interior_smul_right\n\n"}
{"name":"IsClosed.vadd_left_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nβ : Type v\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : AddGroup α\ninst✝² : AddAction α β\ninst✝¹ : ContinuousNeg α\ninst✝ : ContinuousVAdd α β\ns : Set α\nt : Set β\nht : IsClosed t\nhs : IsCompact s\n⊢ IsClosed (HVAdd.hVAdd s t)","decl":"@[to_additive]\ntheorem IsClosed.smul_left_of_isCompact (ht : IsClosed t) (hs : IsCompact s) :\n    IsClosed (s • t) := by\n  have : ∀ x ∈ s • t, ∃ g ∈ s, g⁻¹ • x ∈ t := by\n    rintro x ⟨g, hgs, y, hyt, rfl⟩\n    refine ⟨g, hgs, ?_⟩\n    rwa [inv_smul_smul]\n  choose! f hf using this\n  refine isClosed_of_closure_subset (fun x hx ↦ ?_)\n  rcases mem_closure_iff_ultrafilter.mp hx with ⟨u, hust, hux⟩\n  have : Ultrafilter.map f u ≤ 𝓟 s :=\n    calc Ultrafilter.map f u ≤ map f (𝓟 (s • t)) := map_mono (le_principal_iff.mpr hust)\n      _ = 𝓟 (f '' (s • t)) := map_principal\n      _ ≤ 𝓟 s := principal_mono.mpr (image_subset_iff.mpr (fun x hx ↦ (hf x hx).1))\n  rcases hs.ultrafilter_le_nhds (Ultrafilter.map f u) this with ⟨g, hg, hug⟩\n  suffices g⁻¹ • x ∈ t from\n    ⟨g, hg, g⁻¹ • x, this, smul_inv_smul _ _⟩\n  exact ht.mem_of_tendsto ((Tendsto.inv hug).smul hux)\n    (Eventually.mono hust (fun y hy ↦ (hf y hy).2))\n\n"}
{"name":"IsClosed.smul_left_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nβ : Type v\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : Group α\ninst✝² : MulAction α β\ninst✝¹ : ContinuousInv α\ninst✝ : ContinuousSMul α β\ns : Set α\nt : Set β\nht : IsClosed t\nhs : IsCompact s\n⊢ IsClosed (HSMul.hSMul s t)","decl":"@[to_additive]\ntheorem IsClosed.smul_left_of_isCompact (ht : IsClosed t) (hs : IsCompact s) :\n    IsClosed (s • t) := by\n  have : ∀ x ∈ s • t, ∃ g ∈ s, g⁻¹ • x ∈ t := by\n    rintro x ⟨g, hgs, y, hyt, rfl⟩\n    refine ⟨g, hgs, ?_⟩\n    rwa [inv_smul_smul]\n  choose! f hf using this\n  refine isClosed_of_closure_subset (fun x hx ↦ ?_)\n  rcases mem_closure_iff_ultrafilter.mp hx with ⟨u, hust, hux⟩\n  have : Ultrafilter.map f u ≤ 𝓟 s :=\n    calc Ultrafilter.map f u ≤ map f (𝓟 (s • t)) := map_mono (le_principal_iff.mpr hust)\n      _ = 𝓟 (f '' (s • t)) := map_principal\n      _ ≤ 𝓟 s := principal_mono.mpr (image_subset_iff.mpr (fun x hx ↦ (hf x hx).1))\n  rcases hs.ultrafilter_le_nhds (Ultrafilter.map f u) this with ⟨g, hg, hug⟩\n  suffices g⁻¹ • x ∈ t from\n    ⟨g, hg, g⁻¹ • x, this, smul_inv_smul _ _⟩\n  exact ht.mem_of_tendsto ((Tendsto.inv hug).smul hux)\n    (Eventually.mono hust (fun y hy ↦ (hf y hy).2))\n\n"}
{"name":"AddAction.isClosedMap_quotient","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nβ : Type v\ninst✝⁶ : TopologicalSpace α\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : AddGroup α\ninst✝³ : AddAction α β\ninst✝² : ContinuousNeg α\ninst✝¹ : ContinuousVAdd α β\ninst✝ : CompactSpace α\n⊢ IsClosedMap Quotient.mk'","decl":"@[to_additive]\ntheorem MulAction.isClosedMap_quotient [CompactSpace α] :\n    letI := orbitRel α β\n    IsClosedMap (Quotient.mk' : β → Quotient (orbitRel α β)) := by\n  intro t ht\n  rw [← isQuotientMap_quotient_mk'.isClosed_preimage,\n    MulAction.quotient_preimage_image_eq_union_mul]\n  convert ht.smul_left_of_isCompact (isCompact_univ (X := α))\n  rw [← biUnion_univ, ← iUnion_smul_left_image]\n  rfl\n\n"}
{"name":"MulAction.isClosedMap_quotient","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\nβ : Type v\ninst✝⁶ : TopologicalSpace α\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : Group α\ninst✝³ : MulAction α β\ninst✝² : ContinuousInv α\ninst✝¹ : ContinuousSMul α β\ninst✝ : CompactSpace α\n⊢ IsClosedMap Quotient.mk'","decl":"@[to_additive]\ntheorem MulAction.isClosedMap_quotient [CompactSpace α] :\n    letI := orbitRel α β\n    IsClosedMap (Quotient.mk' : β → Quotient (orbitRel α β)) := by\n  intro t ht\n  rw [← isQuotientMap_quotient_mk'.isClosed_preimage,\n    MulAction.quotient_preimage_image_eq_union_mul]\n  convert ht.smul_left_of_isCompact (isCompact_univ (X := α))\n  rw [← biUnion_univ, ← iUnion_smul_left_image]\n  rfl\n\n"}
{"name":"IsOpen.mul_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul α α\ns t : Set α\na✝ : IsOpen t\n⊢ IsOpen (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsOpen.mul_left : IsOpen t → IsOpen (s * t) :=\n  IsOpen.smul_left\n\n"}
{"name":"IsOpen.add_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd α α\ns t : Set α\na✝ : IsOpen t\n⊢ IsOpen (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsOpen.mul_left : IsOpen t → IsOpen (s * t) :=\n  IsOpen.smul_left\n\n"}
{"name":"subset_interior_add_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd α α\ns t : Set α\n⊢ HasSubset.Subset (HAdd.hAdd s (interior t)) (interior (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem subset_interior_mul_right : s * interior t ⊆ interior (s * t) :=\n  subset_interior_smul_right\n\n"}
{"name":"subset_interior_mul_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul α α\ns t : Set α\n⊢ HasSubset.Subset (HMul.hMul s (interior t)) (interior (HMul.hMul s t))","decl":"@[to_additive]\ntheorem subset_interior_mul_right : s * interior t ⊆ interior (s * t) :=\n  subset_interior_smul_right\n\n"}
{"name":"subset_interior_mul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul α α\ns t : Set α\n⊢ HasSubset.Subset (HMul.hMul (interior s) (interior t)) (interior (HMul.hMul s t))","decl":"@[to_additive]\ntheorem subset_interior_mul : interior s * interior t ⊆ interior (s * t) :=\n  subset_interior_smul\n\n"}
{"name":"subset_interior_add","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd α α\ns t : Set α\n⊢ HasSubset.Subset (HAdd.hAdd (interior s) (interior t)) (interior (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem subset_interior_mul : interior s * interior t ⊆ interior (s * t) :=\n  subset_interior_smul\n\n"}
{"name":"singleton_add_mem_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd α α\ns : Set α\na b : α\nh : Membership.mem (nhds b) s\n⊢ Membership.mem (nhds (HAdd.hAdd a b)) (HAdd.hAdd (Singleton.singleton a) s)","decl":"@[to_additive]\ntheorem singleton_mul_mem_nhds (a : α) {b : α} (h : s ∈ 𝓝 b) : {a} * s ∈ 𝓝 (a * b) := by\n  rwa [← smul_eq_mul, ← smul_eq_mul, singleton_smul, smul_mem_nhds_smul_iff]\n\n"}
{"name":"singleton_mul_mem_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul α α\ns : Set α\na b : α\nh : Membership.mem (nhds b) s\n⊢ Membership.mem (nhds (HMul.hMul a b)) (HMul.hMul (Singleton.singleton a) s)","decl":"@[to_additive]\ntheorem singleton_mul_mem_nhds (a : α) {b : α} (h : s ∈ 𝓝 b) : {a} * s ∈ 𝓝 (a * b) := by\n  rwa [← smul_eq_mul, ← smul_eq_mul, singleton_smul, smul_mem_nhds_smul_iff]\n\n"}
{"name":"singleton_mul_mem_nhds_of_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul α α\ns : Set α\na : α\nh : Membership.mem (nhds 1) s\n⊢ Membership.mem (nhds a) (HMul.hMul (Singleton.singleton a) s)","decl":"@[to_additive]\ntheorem singleton_mul_mem_nhds_of_nhds_one (a : α) (h : s ∈ 𝓝 (1 : α)) : {a} * s ∈ 𝓝 a := by\n  simpa only [mul_one] using singleton_mul_mem_nhds a h\n\n"}
{"name":"singleton_add_mem_nhds_of_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd α α\ns : Set α\na : α\nh : Membership.mem (nhds 0) s\n⊢ Membership.mem (nhds a) (HAdd.hAdd (Singleton.singleton a) s)","decl":"@[to_additive]\ntheorem singleton_mul_mem_nhds_of_nhds_one (a : α) (h : s ∈ 𝓝 (1 : α)) : {a} * s ∈ 𝓝 a := by\n  simpa only [mul_one] using singleton_mul_mem_nhds a h\n\n"}
{"name":"IsOpen.add_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd (AddOpposite α) α\ns t : Set α\nhs : IsOpen s\n⊢ IsOpen (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsOpen.mul_right (hs : IsOpen s) : IsOpen (s * t) := by\n  rw [← image_op_smul]\n  exact hs.smul_left\n\n"}
{"name":"IsOpen.mul_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul (MulOpposite α) α\ns t : Set α\nhs : IsOpen s\n⊢ IsOpen (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsOpen.mul_right (hs : IsOpen s) : IsOpen (s * t) := by\n  rw [← image_op_smul]\n  exact hs.smul_left\n\n"}
{"name":"subset_interior_mul_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul (MulOpposite α) α\ns t : Set α\n⊢ HasSubset.Subset (HMul.hMul (interior s) t) (interior (HMul.hMul s t))","decl":"@[to_additive]\ntheorem subset_interior_mul_left : interior s * t ⊆ interior (s * t) :=\n  interior_maximal (Set.mul_subset_mul_right interior_subset) isOpen_interior.mul_right\n\n"}
{"name":"subset_interior_add_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd (AddOpposite α) α\ns t : Set α\n⊢ HasSubset.Subset (HAdd.hAdd (interior s) t) (interior (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem subset_interior_mul_left : interior s * t ⊆ interior (s * t) :=\n  interior_maximal (Set.mul_subset_mul_right interior_subset) isOpen_interior.mul_right\n\n"}
{"name":"subset_interior_mul'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul (MulOpposite α) α\ns t : Set α\n⊢ HasSubset.Subset (HMul.hMul (interior s) (interior t)) (interior (HMul.hMul s t))","decl":"@[to_additive]\ntheorem subset_interior_mul' : interior s * interior t ⊆ interior (s * t) :=\n  (Set.mul_subset_mul_left interior_subset).trans subset_interior_mul_left\n\n"}
{"name":"subset_interior_add'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd (AddOpposite α) α\ns t : Set α\n⊢ HasSubset.Subset (HAdd.hAdd (interior s) (interior t)) (interior (HAdd.hAdd s t))","decl":"@[to_additive]\ntheorem subset_interior_mul' : interior s * interior t ⊆ interior (s * t) :=\n  (Set.mul_subset_mul_left interior_subset).trans subset_interior_mul_left\n\n"}
{"name":"mul_singleton_mem_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul (MulOpposite α) α\ns : Set α\na b : α\nh : Membership.mem (nhds b) s\n⊢ Membership.mem (nhds (HMul.hMul b a)) (HMul.hMul s (Singleton.singleton a))","decl":"@[to_additive]\ntheorem mul_singleton_mem_nhds (a : α) {b : α} (h : s ∈ 𝓝 b) : s * {a} ∈ 𝓝 (b * a) := by\n  rw [mul_singleton]\n  exact smul_mem_nhds_smul (op a) h\n\n"}
{"name":"add_singleton_mem_nhds","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd (AddOpposite α) α\ns : Set α\na b : α\nh : Membership.mem (nhds b) s\n⊢ Membership.mem (nhds (HAdd.hAdd b a)) (HAdd.hAdd s (Singleton.singleton a))","decl":"@[to_additive]\ntheorem mul_singleton_mem_nhds (a : α) {b : α} (h : s ∈ 𝓝 b) : s * {a} ∈ 𝓝 (b * a) := by\n  rw [mul_singleton]\n  exact smul_mem_nhds_smul (op a) h\n\n"}
{"name":"mul_singleton_mem_nhds_of_nhds_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : Group α\ninst✝ : ContinuousConstSMul (MulOpposite α) α\ns : Set α\na : α\nh : Membership.mem (nhds 1) s\n⊢ Membership.mem (nhds a) (HMul.hMul s (Singleton.singleton a))","decl":"@[to_additive]\ntheorem mul_singleton_mem_nhds_of_nhds_one (a : α) (h : s ∈ 𝓝 (1 : α)) : s * {a} ∈ 𝓝 a := by\n  simpa only [one_mul] using mul_singleton_mem_nhds a h\n\n"}
{"name":"add_singleton_mem_nhds_of_nhds_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : TopologicalSpace α\ninst✝¹ : AddGroup α\ninst✝ : ContinuousConstVAdd (AddOpposite α) α\ns : Set α\na : α\nh : Membership.mem (nhds 0) s\n⊢ Membership.mem (nhds a) (HAdd.hAdd s (Singleton.singleton a))","decl":"@[to_additive]\ntheorem mul_singleton_mem_nhds_of_nhds_one (a : α) (h : s ∈ 𝓝 (1 : α)) : s * {a} ∈ 𝓝 a := by\n  simpa only [one_mul] using mul_singleton_mem_nhds a h\n\n"}
{"name":"IsOpen.sub_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\nht : IsOpen t\n⊢ IsOpen (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsOpen.div_left (ht : IsOpen t) : IsOpen (s / t) := by\n  rw [← iUnion_div_left_image]\n  exact isOpen_biUnion fun a _ => isOpenMap_div_left a t ht\n\n"}
{"name":"IsOpen.div_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\nht : IsOpen t\n⊢ IsOpen (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsOpen.div_left (ht : IsOpen t) : IsOpen (s / t) := by\n  rw [← iUnion_div_left_image]\n  exact isOpen_biUnion fun a _ => isOpenMap_div_left a t ht\n\n"}
{"name":"IsOpen.div_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\nhs : IsOpen s\n⊢ IsOpen (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsOpen.div_right (hs : IsOpen s) : IsOpen (s / t) := by\n  rw [← iUnion_div_right_image]\n  exact isOpen_biUnion fun a _ => isOpenMap_div_right a s hs\n\n"}
{"name":"IsOpen.sub_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\nhs : IsOpen s\n⊢ IsOpen (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsOpen.div_right (hs : IsOpen s) : IsOpen (s / t) := by\n  rw [← iUnion_div_right_image]\n  exact isOpen_biUnion fun a _ => isOpenMap_div_right a s hs\n\n"}
{"name":"subset_interior_sub_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\n⊢ HasSubset.Subset (HSub.hSub (interior s) t) (interior (HSub.hSub s t))","decl":"@[to_additive]\ntheorem subset_interior_div_left : interior s / t ⊆ interior (s / t) :=\n  interior_maximal (div_subset_div_right interior_subset) isOpen_interior.div_right\n\n"}
{"name":"subset_interior_div_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\n⊢ HasSubset.Subset (HDiv.hDiv (interior s) t) (interior (HDiv.hDiv s t))","decl":"@[to_additive]\ntheorem subset_interior_div_left : interior s / t ⊆ interior (s / t) :=\n  interior_maximal (div_subset_div_right interior_subset) isOpen_interior.div_right\n\n"}
{"name":"subset_interior_sub_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\n⊢ HasSubset.Subset (HSub.hSub s (interior t)) (interior (HSub.hSub s t))","decl":"@[to_additive]\ntheorem subset_interior_div_right : s / interior t ⊆ interior (s / t) :=\n  interior_maximal (div_subset_div_left interior_subset) isOpen_interior.div_left\n\n"}
{"name":"subset_interior_div_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\n⊢ HasSubset.Subset (HDiv.hDiv s (interior t)) (interior (HDiv.hDiv s t))","decl":"@[to_additive]\ntheorem subset_interior_div_right : s / interior t ⊆ interior (s / t) :=\n  interior_maximal (div_subset_div_left interior_subset) isOpen_interior.div_left\n\n"}
{"name":"subset_interior_sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\n⊢ HasSubset.Subset (HSub.hSub (interior s) (interior t)) (interior (HSub.hSub s t))","decl":"@[to_additive]\ntheorem subset_interior_div : interior s / interior t ⊆ interior (s / t) :=\n  (div_subset_div_left interior_subset).trans subset_interior_div_left\n\n"}
{"name":"subset_interior_div","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\n⊢ HasSubset.Subset (HDiv.hDiv (interior s) (interior t)) (interior (HDiv.hDiv s t))","decl":"@[to_additive]\ntheorem subset_interior_div : interior s / interior t ⊆ interior (s / t) :=\n  (div_subset_div_left interior_subset).trans subset_interior_div_left\n\n"}
{"name":"IsOpen.mul_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Set G\nhs : IsOpen s\nt : Set G\n⊢ Eq (HMul.hMul s (closure t)) (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsOpen.mul_closure (hs : IsOpen s) (t : Set G) : s * closure t = s * t := by\n  refine (mul_subset_iff.2 fun a ha b hb => ?_).antisymm (mul_subset_mul_left subset_closure)\n  rw [mem_closure_iff] at hb\n  have hbU : b ∈ s⁻¹ * {a * b} := ⟨a⁻¹, Set.inv_mem_inv.2 ha, a * b, rfl, inv_mul_cancel_left _ _⟩\n  obtain ⟨_, ⟨c, hc, d, rfl : d = _, rfl⟩, hcs⟩ := hb _ hs.inv.mul_right hbU\n  exact ⟨c⁻¹, hc, _, hcs, inv_mul_cancel_left _ _⟩\n\n"}
{"name":"IsOpen.add_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : Set G\nhs : IsOpen s\nt : Set G\n⊢ Eq (HAdd.hAdd s (closure t)) (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsOpen.mul_closure (hs : IsOpen s) (t : Set G) : s * closure t = s * t := by\n  refine (mul_subset_iff.2 fun a ha b hb => ?_).antisymm (mul_subset_mul_left subset_closure)\n  rw [mem_closure_iff] at hb\n  have hbU : b ∈ s⁻¹ * {a * b} := ⟨a⁻¹, Set.inv_mem_inv.2 ha, a * b, rfl, inv_mul_cancel_left _ _⟩\n  obtain ⟨_, ⟨c, hc, d, rfl : d = _, rfl⟩, hcs⟩ := hb _ hs.inv.mul_right hbU\n  exact ⟨c⁻¹, hc, _, hcs, inv_mul_cancel_left _ _⟩\n\n"}
{"name":"IsOpen.closure_add","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nt : Set G\nht : IsOpen t\ns : Set G\n⊢ Eq (HAdd.hAdd (closure s) t) (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsOpen.closure_mul (ht : IsOpen t) (s : Set G) : closure s * t = s * t := by\n  rw [← inv_inv (closure s * t), mul_inv_rev, inv_closure, ht.inv.mul_closure, mul_inv_rev, inv_inv,\n    inv_inv]\n\n"}
{"name":"IsOpen.closure_mul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nt : Set G\nht : IsOpen t\ns : Set G\n⊢ Eq (HMul.hMul (closure s) t) (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsOpen.closure_mul (ht : IsOpen t) (s : Set G) : closure s * t = s * t := by\n  rw [← inv_inv (closure s * t), mul_inv_rev, inv_closure, ht.inv.mul_closure, mul_inv_rev, inv_inv,\n    inv_inv]\n\n"}
{"name":"IsOpen.div_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns : Set G\nhs : IsOpen s\nt : Set G\n⊢ Eq (HDiv.hDiv s (closure t)) (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsOpen.div_closure (hs : IsOpen s) (t : Set G) : s / closure t = s / t := by\n  simp_rw [div_eq_mul_inv, inv_closure, hs.mul_closure]\n\n"}
{"name":"IsOpen.sub_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns : Set G\nhs : IsOpen s\nt : Set G\n⊢ Eq (HSub.hSub s (closure t)) (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsOpen.div_closure (hs : IsOpen s) (t : Set G) : s / closure t = s / t := by\n  simp_rw [div_eq_mul_inv, inv_closure, hs.mul_closure]\n\n"}
{"name":"IsOpen.closure_sub","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nt : Set G\nht : IsOpen t\ns : Set G\n⊢ Eq (HSub.hSub (closure s) t) (HSub.hSub s t)","decl":"@[to_additive]\ntheorem IsOpen.closure_div (ht : IsOpen t) (s : Set G) : closure s / t = s / t := by\n  simp_rw [div_eq_mul_inv, ht.inv.closure_mul]\n\n"}
{"name":"IsOpen.closure_div","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nt : Set G\nht : IsOpen t\ns : Set G\n⊢ Eq (HDiv.hDiv (closure s) t) (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem IsOpen.closure_div (ht : IsOpen t) (s : Set G) : closure s / t = s / t := by\n  simp_rw [div_eq_mul_inv, ht.inv.closure_mul]\n\n"}
{"name":"IsClosed.mul_left_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\nht : IsClosed t\nhs : IsCompact s\n⊢ IsClosed (HMul.hMul s t)","decl":"@[to_additive]\ntheorem IsClosed.mul_left_of_isCompact (ht : IsClosed t) (hs : IsCompact s) : IsClosed (s * t) :=\n  ht.smul_left_of_isCompact hs\n\n"}
{"name":"IsClosed.add_left_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\nht : IsClosed t\nhs : IsCompact s\n⊢ IsClosed (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem IsClosed.mul_left_of_isCompact (ht : IsClosed t) (hs : IsCompact s) : IsClosed (s * t) :=\n  ht.smul_left_of_isCompact hs\n\n"}
{"name":"IsClosed.add_right_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\ns t : Set G\nht : IsClosed t\nhs : IsCompact s\n⊢ IsClosed (HAdd.hAdd t s)","decl":"@[to_additive]\ntheorem IsClosed.mul_right_of_isCompact (ht : IsClosed t) (hs : IsCompact s) :\n    IsClosed (t * s) := by\n  rw [← image_op_smul]\n  exact IsClosed.smul_left_of_isCompact ht (hs.image continuous_op)\n\n"}
{"name":"IsClosed.mul_right_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\ns t : Set G\nht : IsClosed t\nhs : IsCompact s\n⊢ IsClosed (HMul.hMul t s)","decl":"@[to_additive]\ntheorem IsClosed.mul_right_of_isCompact (ht : IsClosed t) (hs : IsCompact s) :\n    IsClosed (t * s) := by\n  rw [← image_op_smul]\n  exact IsClosed.smul_left_of_isCompact ht (hs.image continuous_op)\n\n"}
{"name":"subset_add_closure_zero","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : AddZeroClass G\ninst✝ : TopologicalSpace G\ns : Set G\n⊢ HasSubset.Subset s (HAdd.hAdd s (closure (Singleton.singleton 0)))","decl":"@[to_additive]\nlemma subset_mul_closure_one {G} [MulOneClass G] [TopologicalSpace G] (s : Set G) :\n    s ⊆ s * (closure {1} : Set G) := by\n  have : s ⊆ s * ({1} : Set G) := by simp\n  exact this.trans (smul_subset_smul_left subset_closure)\n\n"}
{"name":"subset_mul_closure_one","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝¹ : MulOneClass G\ninst✝ : TopologicalSpace G\ns : Set G\n⊢ HasSubset.Subset s (HMul.hMul s (closure (Singleton.singleton 1)))","decl":"@[to_additive]\nlemma subset_mul_closure_one {G} [MulOneClass G] [TopologicalSpace G] (s : Set G) :\n    s ⊆ s * (closure {1} : Set G) := by\n  have : s ⊆ s * ({1} : Set G) := by simp\n  exact this.trans (smul_subset_smul_left subset_closure)\n\n"}
{"name":"IsCompact.add_closure_zero_eq_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nK : Set G\nhK : IsCompact K\n⊢ Eq (HAdd.hAdd K (closure (Singleton.singleton 0))) (closure K)","decl":"@[to_additive]\nlemma IsCompact.mul_closure_one_eq_closure {K : Set G} (hK : IsCompact K) :\n    K * (closure {1} : Set G) = closure K := by\n  apply Subset.antisymm ?_ ?_\n  · calc\n    K * (closure {1} : Set G) ⊆ closure K * (closure {1} : Set G) :=\n      smul_subset_smul_right subset_closure\n    _ ⊆ closure (K * ({1} : Set G)) := smul_set_closure_subset _ _\n    _ = closure K := by simp\n  · have : IsClosed (K * (closure {1} : Set G)) :=\n      IsClosed.smul_left_of_isCompact isClosed_closure hK\n    rw [IsClosed.closure_subset_iff this]\n    exact subset_mul_closure_one K\n\n"}
{"name":"IsCompact.mul_closure_one_eq_closure","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nK : Set G\nhK : IsCompact K\n⊢ Eq (HMul.hMul K (closure (Singleton.singleton 1))) (closure K)","decl":"@[to_additive]\nlemma IsCompact.mul_closure_one_eq_closure {K : Set G} (hK : IsCompact K) :\n    K * (closure {1} : Set G) = closure K := by\n  apply Subset.antisymm ?_ ?_\n  · calc\n    K * (closure {1} : Set G) ⊆ closure K * (closure {1} : Set G) :=\n      smul_subset_smul_right subset_closure\n    _ ⊆ closure (K * ({1} : Set G)) := smul_set_closure_subset _ _\n    _ = closure K := by simp\n  · have : IsClosed (K * (closure {1} : Set G)) :=\n      IsClosed.smul_left_of_isCompact isClosed_closure hK\n    rw [IsClosed.closure_subset_iff this]\n    exact subset_mul_closure_one K\n\n"}
{"name":"IsClosed.add_closure_zero_eq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nF : Set G\nhF : IsClosed F\n⊢ Eq (HAdd.hAdd F (closure (Singleton.singleton 0))) F","decl":"@[to_additive]\nlemma IsClosed.mul_closure_one_eq {F : Set G} (hF : IsClosed F) :\n    F * (closure {1} : Set G) = F := by\n  refine Subset.antisymm ?_ (subset_mul_closure_one F)\n  calc\n  F * (closure {1} : Set G) = closure F * closure ({1} : Set G) := by rw [hF.closure_eq]\n  _ ⊆ closure (F * ({1} : Set G)) := smul_set_closure_subset _ _\n  _ = F := by simp [hF.closure_eq]\n\n"}
{"name":"IsClosed.mul_closure_one_eq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nF : Set G\nhF : IsClosed F\n⊢ Eq (HMul.hMul F (closure (Singleton.singleton 1))) F","decl":"@[to_additive]\nlemma IsClosed.mul_closure_one_eq {F : Set G} (hF : IsClosed F) :\n    F * (closure {1} : Set G) = F := by\n  refine Subset.antisymm ?_ (subset_mul_closure_one F)\n  calc\n  F * (closure {1} : Set G) = closure F * closure ({1} : Set G) := by rw [hF.closure_eq]\n  _ ⊆ closure (F * ({1} : Set G)) := smul_set_closure_subset _ _\n  _ = F := by simp [hF.closure_eq]\n\n"}
{"name":"compl_mul_closure_one_eq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nt : Set G\nht : Eq (HMul.hMul t (closure (Singleton.singleton 1))) t\n⊢ Eq (HMul.hMul (HasCompl.compl t) (closure (Singleton.singleton 1))) (HasCompl.compl t)","decl":"@[to_additive]\nlemma compl_mul_closure_one_eq {t : Set G} (ht : t * (closure {1} : Set G) = t) :\n    tᶜ * (closure {1} : Set G) = tᶜ := by\n  refine Subset.antisymm ?_ (subset_mul_closure_one tᶜ)\n  rintro - ⟨x, hx, g, hg, rfl⟩\n  by_contra H\n  have : x ∈ t * (closure {1} : Set G) := by\n    rw [← Subgroup.coe_topologicalClosure_bot G] at hg ⊢\n    simp only [smul_eq_mul, mem_compl_iff, not_not] at H\n    exact ⟨x * g, H, g⁻¹, Subgroup.inv_mem _ hg, by simp⟩\n  rw [ht] at this\n  exact hx this\n\n"}
{"name":"compl_add_closure_zero_eq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nt : Set G\nht : Eq (HAdd.hAdd t (closure (Singleton.singleton 0))) t\n⊢ Eq (HAdd.hAdd (HasCompl.compl t) (closure (Singleton.singleton 0))) (HasCompl.compl t)","decl":"@[to_additive]\nlemma compl_mul_closure_one_eq {t : Set G} (ht : t * (closure {1} : Set G) = t) :\n    tᶜ * (closure {1} : Set G) = tᶜ := by\n  refine Subset.antisymm ?_ (subset_mul_closure_one tᶜ)\n  rintro - ⟨x, hx, g, hg, rfl⟩\n  by_contra H\n  have : x ∈ t * (closure {1} : Set G) := by\n    rw [← Subgroup.coe_topologicalClosure_bot G] at hg ⊢\n    simp only [smul_eq_mul, mem_compl_iff, not_not] at H\n    exact ⟨x * g, H, g⁻¹, Subgroup.inv_mem _ hg, by simp⟩\n  rw [ht] at this\n  exact hx this\n\n"}
{"name":"compl_add_closure_zero_eq_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nt : Set G\n⊢ Iff (Eq (HAdd.hAdd (HasCompl.compl t) (closure (Singleton.singleton 0))) (HasCompl.compl t)) (Eq (HAdd.hAdd t (closure (Singleton.singleton 0))) t)","decl":"@[to_additive]\nlemma compl_mul_closure_one_eq_iff {t : Set G} :\n    tᶜ * (closure {1} : Set G) = tᶜ ↔ t * (closure {1} : Set G) = t :=\n  ⟨fun h ↦ by simpa using compl_mul_closure_one_eq h, fun h ↦ compl_mul_closure_one_eq h⟩\n\n"}
{"name":"compl_mul_closure_one_eq_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nt : Set G\n⊢ Iff (Eq (HMul.hMul (HasCompl.compl t) (closure (Singleton.singleton 1))) (HasCompl.compl t)) (Eq (HMul.hMul t (closure (Singleton.singleton 1))) t)","decl":"@[to_additive]\nlemma compl_mul_closure_one_eq_iff {t : Set G} :\n    tᶜ * (closure {1} : Set G) = tᶜ ↔ t * (closure {1} : Set G) = t :=\n  ⟨fun h ↦ by simpa using compl_mul_closure_one_eq h, fun h ↦ compl_mul_closure_one_eq h⟩\n\n"}
{"name":"IsOpen.mul_closure_one_eq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nU : Set G\nhU : IsOpen U\n⊢ Eq (HMul.hMul U (closure (Singleton.singleton 1))) U","decl":"@[to_additive]\nlemma IsOpen.mul_closure_one_eq {U : Set G} (hU : IsOpen U) :\n    U * (closure {1} : Set G) = U :=\n  compl_mul_closure_one_eq_iff.1 (hU.isClosed_compl.mul_closure_one_eq)\n\n"}
{"name":"IsOpen.add_closure_zero_eq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nU : Set G\nhU : IsOpen U\n⊢ Eq (HAdd.hAdd U (closure (Singleton.singleton 0))) U","decl":"@[to_additive]\nlemma IsOpen.mul_closure_one_eq {U : Set G} (hU : IsOpen U) :\n    U * (closure {1} : Set G) = U :=\n  compl_mul_closure_one_eq_iff.1 (hU.isClosed_compl.mul_closure_one_eq)\n\n"}
{"name":"TopologicalAddGroup.t1Space","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : ContinuousAdd G\nh : IsClosed (Singleton.singleton 0)\n⊢ T1Space G","decl":"@[to_additive]\ntheorem TopologicalGroup.t1Space (h : @IsClosed G _ {1}) : T1Space G :=\n  ⟨fun x => by simpa using isClosedMap_mul_right x _ h⟩\n\n"}
{"name":"TopologicalGroup.t1Space","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : ContinuousMul G\nh : IsClosed (Singleton.singleton 1)\n⊢ T1Space G","decl":"@[to_additive]\ntheorem TopologicalGroup.t1Space (h : @IsClosed G _ {1}) : T1Space G :=\n  ⟨fun x => by simpa using isClosedMap_mul_right x _ h⟩\n\n"}
{"name":"TopologicalGroup.regularSpace","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : TopologicalSpace G\n⊢ RegularSpace G","decl":"@[to_additive]\ninstance (priority := 100) TopologicalGroup.regularSpace : RegularSpace G := by\n  refine .of_exists_mem_nhds_isClosed_subset fun a s hs ↦ ?_\n  have : Tendsto (fun p : G × G => p.1 * p.2) (𝓝 (a, 1)) (𝓝 a) :=\n    continuous_mul.tendsto' _ _ (mul_one a)\n  rcases mem_nhds_prod_iff.mp (this hs) with ⟨U, hU, V, hV, hUV⟩\n  rw [← image_subset_iff, image_prod] at hUV\n  refine ⟨closure U, mem_of_superset hU subset_closure, isClosed_closure, ?_⟩\n  calc\n    closure U ⊆ closure U * interior V := subset_mul_left _ (mem_interior_iff_mem_nhds.2 hV)\n    _ = U * interior V := isOpen_interior.closure_mul U\n    _ ⊆ U * V := mul_subset_mul_left interior_subset\n    _ ⊆ s := hUV\n\n-- `inferInstance` can find these instances now\n\n"}
{"name":"TopologicalAddGroup.regularSpace","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : TopologicalSpace G\n⊢ RegularSpace G","decl":"@[to_additive]\ninstance (priority := 100) TopologicalGroup.regularSpace : RegularSpace G := by\n  refine .of_exists_mem_nhds_isClosed_subset fun a s hs ↦ ?_\n  have : Tendsto (fun p : G × G => p.1 * p.2) (𝓝 (a, 1)) (𝓝 a) :=\n    continuous_mul.tendsto' _ _ (mul_one a)\n  rcases mem_nhds_prod_iff.mp (this hs) with ⟨U, hU, V, hV, hUV⟩\n  rw [← image_subset_iff, image_prod] at hUV\n  refine ⟨closure U, mem_of_superset hU subset_closure, isClosed_closure, ?_⟩\n  calc\n    closure U ⊆ closure U * interior V := subset_mul_left _ (mem_interior_iff_mem_nhds.2 hV)\n    _ = U * interior V := isOpen_interior.closure_mul U\n    _ ⊆ U * V := mul_subset_mul_left interior_subset\n    _ ⊆ s := hUV\n\n-- `inferInstance` can find these instances now\n\n"}
{"name":"group_inseparable_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx y : G\n⊢ Iff (Inseparable x y) (Membership.mem (closure 1) (HDiv.hDiv x y))","decl":"@[to_additive]\ntheorem group_inseparable_iff {x y : G} : Inseparable x y ↔ x / y ∈ closure (1 : Set G) := by\n  rw [← singleton_one, ← specializes_iff_mem_closure, specializes_comm, specializes_iff_inseparable,\n    ← (Homeomorph.mulRight y⁻¹).isEmbedding.inseparable_iff]\n  simp [div_eq_mul_inv]\n\n"}
{"name":"addGroup_inseparable_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx y : G\n⊢ Iff (Inseparable x y) (Membership.mem (closure 0) (HSub.hSub x y))","decl":"@[to_additive]\ntheorem group_inseparable_iff {x y : G} : Inseparable x y ↔ x / y ∈ closure (1 : Set G) := by\n  rw [← singleton_one, ← specializes_iff_mem_closure, specializes_comm, specializes_iff_inseparable,\n    ← (Homeomorph.mulRight y⁻¹).isEmbedding.inseparable_iff]\n  simp [div_eq_mul_inv]\n\n"}
{"name":"TopologicalGroup.t2Space_iff_one_closed","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ Iff (T2Space G) (IsClosed (Singleton.singleton 1))","decl":"@[to_additive]\ntheorem TopologicalGroup.t2Space_iff_one_closed : T2Space G ↔ IsClosed ({1} : Set G) :=\n  ⟨fun _ ↦ isClosed_singleton, fun h ↦\n    have := TopologicalGroup.t1Space G h; inferInstance⟩\n\n"}
{"name":"TopologicalAddGroup.t2Space_iff_zero_closed","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ Iff (T2Space G) (IsClosed (Singleton.singleton 0))","decl":"@[to_additive]\ntheorem TopologicalGroup.t2Space_iff_one_closed : T2Space G ↔ IsClosed ({1} : Set G) :=\n  ⟨fun _ ↦ isClosed_singleton, fun h ↦\n    have := TopologicalGroup.t1Space G h; inferInstance⟩\n\n"}
{"name":"TopologicalAddGroup.t2Space_of_zero_sep","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nH : ∀ (x : G), Ne x 0 → Exists fun U => And (Membership.mem (nhds 0) U) (Not (Membership.mem U x))\n⊢ T2Space G","decl":"@[to_additive]\ntheorem TopologicalGroup.t2Space_of_one_sep (H : ∀ x : G, x ≠ 1 → ∃ U ∈ 𝓝 (1 : G), x ∉ U) :\n    T2Space G := by\n  suffices T1Space G from inferInstance\n  refine t1Space_iff_specializes_imp_eq.2 fun x y hspec ↦ by_contra fun hne ↦ ?_\n  rcases H (x * y⁻¹) (by rwa [Ne, mul_inv_eq_one]) with ⟨U, hU₁, hU⟩\n  exact hU <| mem_of_mem_nhds <| hspec.map (continuous_mul_right y⁻¹) (by rwa [mul_inv_cancel])\n\n"}
{"name":"TopologicalGroup.t2Space_of_one_sep","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nH : ∀ (x : G), Ne x 1 → Exists fun U => And (Membership.mem (nhds 1) U) (Not (Membership.mem U x))\n⊢ T2Space G","decl":"@[to_additive]\ntheorem TopologicalGroup.t2Space_of_one_sep (H : ∀ x : G, x ≠ 1 → ∃ U ∈ 𝓝 (1 : G), x ∉ U) :\n    T2Space G := by\n  suffices T1Space G from inferInstance\n  refine t1Space_iff_specializes_imp_eq.2 fun x y hspec ↦ by_contra fun hne ↦ ?_\n  rcases H (x * y⁻¹) (by rwa [Ne, mul_inv_eq_one]) with ⟨U, hU₁, hU⟩\n  exact hU <| mem_of_mem_nhds <| hspec.map (continuous_mul_right y⁻¹) (by rwa [mul_inv_cancel])\n\n"}
{"name":"exists_closed_nhds_zero_neg_eq_add_subset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nU : Set G\nhU : Membership.mem (nhds 0) U\n⊢ Exists fun V => And (Membership.mem (nhds 0) V) (And (IsClosed V) (And (Eq (Neg.neg V) V) (HasSubset.Subset (HAdd.hAdd V V) U)))","decl":"/-- Given a neighborhood `U` of the identity, one may find a neighborhood `V` of the identity which\nis closed, symmetric, and satisfies `V * V ⊆ U`. -/\n@[to_additive \"Given a neighborhood `U` of the identity, one may find a neighborhood `V` of the\nidentity which is closed, symmetric, and satisfies `V + V ⊆ U`.\"]\ntheorem exists_closed_nhds_one_inv_eq_mul_subset {U : Set G} (hU : U ∈ 𝓝 1) :\n    ∃ V ∈ 𝓝 1, IsClosed V ∧ V⁻¹ = V ∧ V * V ⊆ U := by\n  rcases exists_open_nhds_one_mul_subset hU with ⟨V, V_open, V_mem, hV⟩\n  rcases exists_mem_nhds_isClosed_subset (V_open.mem_nhds V_mem) with ⟨W, W_mem, W_closed, hW⟩\n  refine ⟨W ∩ W⁻¹, Filter.inter_mem W_mem (inv_mem_nhds_one G W_mem), W_closed.inter W_closed.inv,\n    by simp [inter_comm], ?_⟩\n  calc\n  W ∩ W⁻¹ * (W ∩ W⁻¹)\n    ⊆ W * W := mul_subset_mul inter_subset_left inter_subset_left\n  _ ⊆ V * V := mul_subset_mul hW hW\n  _ ⊆ U := hV\n\n"}
{"name":"exists_closed_nhds_one_inv_eq_mul_subset","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nU : Set G\nhU : Membership.mem (nhds 1) U\n⊢ Exists fun V => And (Membership.mem (nhds 1) V) (And (IsClosed V) (And (Eq (Inv.inv V) V) (HasSubset.Subset (HMul.hMul V V) U)))","decl":"/-- Given a neighborhood `U` of the identity, one may find a neighborhood `V` of the identity which\nis closed, symmetric, and satisfies `V * V ⊆ U`. -/\n@[to_additive \"Given a neighborhood `U` of the identity, one may find a neighborhood `V` of the\nidentity which is closed, symmetric, and satisfies `V + V ⊆ U`.\"]\ntheorem exists_closed_nhds_one_inv_eq_mul_subset {U : Set G} (hU : U ∈ 𝓝 1) :\n    ∃ V ∈ 𝓝 1, IsClosed V ∧ V⁻¹ = V ∧ V * V ⊆ U := by\n  rcases exists_open_nhds_one_mul_subset hU with ⟨V, V_open, V_mem, hV⟩\n  rcases exists_mem_nhds_isClosed_subset (V_open.mem_nhds V_mem) with ⟨W, W_mem, W_closed, hW⟩\n  refine ⟨W ∩ W⁻¹, Filter.inter_mem W_mem (inv_mem_nhds_one G W_mem), W_closed.inter W_closed.inv,\n    by simp [inter_comm], ?_⟩\n  calc\n  W ∩ W⁻¹ * (W ∩ W⁻¹)\n    ⊆ W * W := mul_subset_mul inter_subset_left inter_subset_left\n  _ ⊆ V * V := mul_subset_mul hW hW\n  _ ⊆ U := hV\n\n"}
{"name":"Subgroup.properlyDiscontinuousSMul_of_tendsto_cofinite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nS : Subgroup G\nhS : Filter.Tendsto (⇑S.subtype) Filter.cofinite (Filter.cocompact G)\n⊢ ProperlyDiscontinuousSMul (Subtype fun x => Membership.mem S x) G","decl":"/-- A subgroup `S` of a topological group `G` acts on `G` properly discontinuously on the left, if\nit is discrete in the sense that `S ∩ K` is finite for all compact `K`. (See also\n`DiscreteTopology`.) -/\n@[to_additive\n  \"A subgroup `S` of an additive topological group `G` acts on `G` properly\n  discontinuously on the left, if it is discrete in the sense that `S ∩ K` is finite for all compact\n  `K`. (See also `DiscreteTopology`.\"]\ntheorem Subgroup.properlyDiscontinuousSMul_of_tendsto_cofinite (S : Subgroup G)\n    (hS : Tendsto S.subtype cofinite (cocompact G)) : ProperlyDiscontinuousSMul S G :=\n  { finite_disjoint_inter_image := by\n      intro K L hK hL\n      have H : Set.Finite _ := hS ((hL.prod hK).image continuous_div').compl_mem_cocompact\n      rw [preimage_compl, compl_compl] at H\n      convert H\n      ext x\n      simp only [image_smul, mem_setOf_eq, coeSubtype, mem_preimage, mem_image, Prod.exists]\n      exact Set.smul_inter_ne_empty_iff' }\n\n-- attribute [local semireducible] MulOpposite -- Porting note: doesn't work in Lean 4\n\n"}
{"name":"AddSubgroup.properlyDiscontinuousVAdd_of_tendsto_cofinite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nS : AddSubgroup G\nhS : Filter.Tendsto (⇑S.subtype) Filter.cofinite (Filter.cocompact G)\n⊢ ProperlyDiscontinuousVAdd (Subtype fun x => Membership.mem S x) G","decl":"/-- A subgroup `S` of a topological group `G` acts on `G` properly discontinuously on the left, if\nit is discrete in the sense that `S ∩ K` is finite for all compact `K`. (See also\n`DiscreteTopology`.) -/\n@[to_additive\n  \"A subgroup `S` of an additive topological group `G` acts on `G` properly\n  discontinuously on the left, if it is discrete in the sense that `S ∩ K` is finite for all compact\n  `K`. (See also `DiscreteTopology`.\"]\ntheorem Subgroup.properlyDiscontinuousSMul_of_tendsto_cofinite (S : Subgroup G)\n    (hS : Tendsto S.subtype cofinite (cocompact G)) : ProperlyDiscontinuousSMul S G :=\n  { finite_disjoint_inter_image := by\n      intro K L hK hL\n      have H : Set.Finite _ := hS ((hL.prod hK).image continuous_div').compl_mem_cocompact\n      rw [preimage_compl, compl_compl] at H\n      convert H\n      ext x\n      simp only [image_smul, mem_setOf_eq, coeSubtype, mem_preimage, mem_image, Prod.exists]\n      exact Set.smul_inter_ne_empty_iff' }\n\n-- attribute [local semireducible] MulOpposite -- Porting note: doesn't work in Lean 4\n\n"}
{"name":"Subgroup.properlyDiscontinuousSMul_opposite_of_tendsto_cofinite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nS : Subgroup G\nhS : Filter.Tendsto (⇑S.subtype) Filter.cofinite (Filter.cocompact G)\n⊢ ProperlyDiscontinuousSMul (Subtype fun x => Membership.mem S.op x) G","decl":"/-- A subgroup `S` of a topological group `G` acts on `G` properly discontinuously on the right, if\nit is discrete in the sense that `S ∩ K` is finite for all compact `K`. (See also\n`DiscreteTopology`.)\n\nIf `G` is Hausdorff, this can be combined with `t2Space_of_properlyDiscontinuousSMul_of_t2Space`\nto show that the quotient group `G ⧸ S` is Hausdorff. -/\n@[to_additive\n  \"A subgroup `S` of an additive topological group `G` acts on `G` properly discontinuously\n  on the right, if it is discrete in the sense that `S ∩ K` is finite for all compact `K`.\n  (See also `DiscreteTopology`.)\n\n  If `G` is Hausdorff, this can be combined with `t2Space_of_properlyDiscontinuousVAdd_of_t2Space`\n  to show that the quotient group `G ⧸ S` is Hausdorff.\"]\ntheorem Subgroup.properlyDiscontinuousSMul_opposite_of_tendsto_cofinite (S : Subgroup G)\n    (hS : Tendsto S.subtype cofinite (cocompact G)) : ProperlyDiscontinuousSMul S.op G :=\n  { finite_disjoint_inter_image := by\n      intro K L hK hL\n      have : Continuous fun p : G × G => (p.1⁻¹, p.2) := continuous_inv.prodMap continuous_id\n      have H : Set.Finite _ :=\n        hS ((hK.prod hL).image (continuous_mul.comp this)).compl_mem_cocompact\n      simp only [preimage_compl, compl_compl, coeSubtype, comp_apply] at H\n      apply Finite.of_preimage _ (equivOp S).surjective\n      convert H using 1\n      ext x\n      simp only [image_smul, mem_setOf_eq, coeSubtype, mem_preimage, mem_image, Prod.exists]\n      exact Set.op_smul_inter_ne_empty_iff }\n\n"}
{"name":"AddSubgroup.properlyDiscontinuousVAdd_opposite_of_tendsto_cofinite","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nS : AddSubgroup G\nhS : Filter.Tendsto (⇑S.subtype) Filter.cofinite (Filter.cocompact G)\n⊢ ProperlyDiscontinuousVAdd (Subtype fun x => Membership.mem S.op x) G","decl":"/-- A subgroup `S` of a topological group `G` acts on `G` properly discontinuously on the right, if\nit is discrete in the sense that `S ∩ K` is finite for all compact `K`. (See also\n`DiscreteTopology`.)\n\nIf `G` is Hausdorff, this can be combined with `t2Space_of_properlyDiscontinuousSMul_of_t2Space`\nto show that the quotient group `G ⧸ S` is Hausdorff. -/\n@[to_additive\n  \"A subgroup `S` of an additive topological group `G` acts on `G` properly discontinuously\n  on the right, if it is discrete in the sense that `S ∩ K` is finite for all compact `K`.\n  (See also `DiscreteTopology`.)\n\n  If `G` is Hausdorff, this can be combined with `t2Space_of_properlyDiscontinuousVAdd_of_t2Space`\n  to show that the quotient group `G ⧸ S` is Hausdorff.\"]\ntheorem Subgroup.properlyDiscontinuousSMul_opposite_of_tendsto_cofinite (S : Subgroup G)\n    (hS : Tendsto S.subtype cofinite (cocompact G)) : ProperlyDiscontinuousSMul S.op G :=\n  { finite_disjoint_inter_image := by\n      intro K L hK hL\n      have : Continuous fun p : G × G => (p.1⁻¹, p.2) := continuous_inv.prodMap continuous_id\n      have H : Set.Finite _ :=\n        hS ((hK.prod hL).image (continuous_mul.comp this)).compl_mem_cocompact\n      simp only [preimage_compl, compl_compl, coeSubtype, comp_apply] at H\n      apply Finite.of_preimage _ (equivOp S).surjective\n      convert H using 1\n      ext x\n      simp only [image_smul, mem_setOf_eq, coeSubtype, mem_preimage, mem_image, Prod.exists]\n      exact Set.op_smul_inter_ne_empty_iff }\n\n"}
{"name":"compact_open_separated_add_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddZeroClass G\ninst✝ : ContinuousAdd G\nK U : Set G\nhK : IsCompact K\nhU : IsOpen U\nhKU : HasSubset.Subset K U\n⊢ Exists fun V => And (Membership.mem (nhds 0) V) (HasSubset.Subset (HAdd.hAdd K V) U)","decl":"/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\n  such that `K * V ⊆ U`. -/\n@[to_additive\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n  `0` such that `K + V ⊆ U`.\"]\ntheorem compact_open_separated_mul_right {K U : Set G} (hK : IsCompact K) (hU : IsOpen U)\n    (hKU : K ⊆ U) : ∃ V ∈ 𝓝 (1 : G), K * V ⊆ U := by\n  refine hK.induction_on ?_ ?_ ?_ ?_\n  · exact ⟨univ, by simp⟩\n  · rintro s t hst ⟨V, hV, hV'⟩\n    exact ⟨V, hV, (mul_subset_mul_right hst).trans hV'⟩\n  · rintro s t ⟨V, V_in, hV'⟩ ⟨W, W_in, hW'⟩\n    use V ∩ W, inter_mem V_in W_in\n    rw [union_mul]\n    exact\n      union_subset ((mul_subset_mul_left V.inter_subset_left).trans hV')\n        ((mul_subset_mul_left V.inter_subset_right).trans hW')\n  · intro x hx\n    have := tendsto_mul (show U ∈ 𝓝 (x * 1) by simpa using hU.mem_nhds (hKU hx))\n    rw [nhds_prod_eq, mem_map, mem_prod_iff] at this\n    rcases this with ⟨t, ht, s, hs, h⟩\n    rw [← image_subset_iff, image_mul_prod] at h\n    exact ⟨t, mem_nhdsWithin_of_mem_nhds ht, s, hs, h⟩\n\n"}
{"name":"compact_open_separated_mul_right","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : MulOneClass G\ninst✝ : ContinuousMul G\nK U : Set G\nhK : IsCompact K\nhU : IsOpen U\nhKU : HasSubset.Subset K U\n⊢ Exists fun V => And (Membership.mem (nhds 1) V) (HasSubset.Subset (HMul.hMul K V) U)","decl":"/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\n  such that `K * V ⊆ U`. -/\n@[to_additive\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n  `0` such that `K + V ⊆ U`.\"]\ntheorem compact_open_separated_mul_right {K U : Set G} (hK : IsCompact K) (hU : IsOpen U)\n    (hKU : K ⊆ U) : ∃ V ∈ 𝓝 (1 : G), K * V ⊆ U := by\n  refine hK.induction_on ?_ ?_ ?_ ?_\n  · exact ⟨univ, by simp⟩\n  · rintro s t hst ⟨V, hV, hV'⟩\n    exact ⟨V, hV, (mul_subset_mul_right hst).trans hV'⟩\n  · rintro s t ⟨V, V_in, hV'⟩ ⟨W, W_in, hW'⟩\n    use V ∩ W, inter_mem V_in W_in\n    rw [union_mul]\n    exact\n      union_subset ((mul_subset_mul_left V.inter_subset_left).trans hV')\n        ((mul_subset_mul_left V.inter_subset_right).trans hW')\n  · intro x hx\n    have := tendsto_mul (show U ∈ 𝓝 (x * 1) by simpa using hU.mem_nhds (hKU hx))\n    rw [nhds_prod_eq, mem_map, mem_prod_iff] at this\n    rcases this with ⟨t, ht, s, hs, h⟩\n    rw [← image_subset_iff, image_mul_prod] at h\n    exact ⟨t, mem_nhdsWithin_of_mem_nhds ht, s, hs, h⟩\n\n"}
{"name":"compact_open_separated_add_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddZeroClass G\ninst✝ : ContinuousAdd G\nK U : Set G\nhK : IsCompact K\nhU : IsOpen U\nhKU : HasSubset.Subset K U\n⊢ Exists fun V => And (Membership.mem (nhds 0) V) (HasSubset.Subset (HAdd.hAdd V K) U)","decl":"/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\n  such that `V * K ⊆ U`. -/\n@[to_additive\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n  `0` such that `V + K ⊆ U`.\"]\ntheorem compact_open_separated_mul_left {K U : Set G} (hK : IsCompact K) (hU : IsOpen U)\n    (hKU : K ⊆ U) : ∃ V ∈ 𝓝 (1 : G), V * K ⊆ U := by\n  rcases compact_open_separated_mul_right (hK.image continuous_op) (opHomeomorph.isOpenMap U hU)\n      (image_subset op hKU) with\n    ⟨V, hV : V ∈ 𝓝 (op (1 : G)), hV' : op '' K * V ⊆ op '' U⟩\n  refine ⟨op ⁻¹' V, continuous_op.continuousAt hV, ?_⟩\n  rwa [← image_preimage_eq V op_surjective, ← image_op_mul, image_subset_iff,\n    preimage_image_eq _ op_injective] at hV'\n\n"}
{"name":"compact_open_separated_mul_left","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : MulOneClass G\ninst✝ : ContinuousMul G\nK U : Set G\nhK : IsCompact K\nhU : IsOpen U\nhKU : HasSubset.Subset K U\n⊢ Exists fun V => And (Membership.mem (nhds 1) V) (HasSubset.Subset (HMul.hMul V K) U)","decl":"/-- Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of `1`\n  such that `V * K ⊆ U`. -/\n@[to_additive\n  \"Given a compact set `K` inside an open set `U`, there is an open neighborhood `V` of\n  `0` such that `V + K ⊆ U`.\"]\ntheorem compact_open_separated_mul_left {K U : Set G} (hK : IsCompact K) (hU : IsOpen U)\n    (hKU : K ⊆ U) : ∃ V ∈ 𝓝 (1 : G), V * K ⊆ U := by\n  rcases compact_open_separated_mul_right (hK.image continuous_op) (opHomeomorph.isOpenMap U hU)\n      (image_subset op hKU) with\n    ⟨V, hV : V ∈ 𝓝 (op (1 : G)), hV' : op '' K * V ⊆ op '' U⟩\n  refine ⟨op ⁻¹' V, continuous_op.continuousAt hV, ?_⟩\n  rwa [← image_preimage_eq V op_surjective, ← image_op_mul, image_subset_iff,\n    preimage_image_eq _ op_injective] at hV'\n\n"}
{"name":"compact_covered_by_mul_left_translates","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nK V : Set G\nhK : IsCompact K\nhV : (interior V).Nonempty\n⊢ Exists fun t => HasSubset.Subset K (Set.iUnion fun g => Set.iUnion fun h => Set.preimage (fun x => HMul.hMul g x) V)","decl":"/-- A compact set is covered by finitely many left multiplicative translates of a set\n  with non-empty interior. -/\n@[to_additive\n  \"A compact set is covered by finitely many left additive translates of a set\n    with non-empty interior.\"]\ntheorem compact_covered_by_mul_left_translates {K V : Set G} (hK : IsCompact K)\n    (hV : (interior V).Nonempty) : ∃ t : Finset G, K ⊆ ⋃ g ∈ t, (g * ·) ⁻¹' V := by\n  obtain ⟨t, ht⟩ : ∃ t : Finset G, K ⊆ ⋃ x ∈ t, interior ((x * ·) ⁻¹' V) := by\n    refine\n      hK.elim_finite_subcover (fun x => interior <| (x * ·) ⁻¹' V) (fun x => isOpen_interior) ?_\n    cases' hV with g₀ hg₀\n    refine fun g _ => mem_iUnion.2 ⟨g₀ * g⁻¹, ?_⟩\n    refine preimage_interior_subset_interior_preimage (continuous_const.mul continuous_id) ?_\n    rwa [mem_preimage, Function.id_def, inv_mul_cancel_right]\n  exact ⟨t, Subset.trans ht <| iUnion₂_mono fun g _ => interior_subset⟩\n\n"}
{"name":"compact_covered_by_add_left_translates","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nK V : Set G\nhK : IsCompact K\nhV : (interior V).Nonempty\n⊢ Exists fun t => HasSubset.Subset K (Set.iUnion fun g => Set.iUnion fun h => Set.preimage (fun x => HAdd.hAdd g x) V)","decl":"/-- A compact set is covered by finitely many left multiplicative translates of a set\n  with non-empty interior. -/\n@[to_additive\n  \"A compact set is covered by finitely many left additive translates of a set\n    with non-empty interior.\"]\ntheorem compact_covered_by_mul_left_translates {K V : Set G} (hK : IsCompact K)\n    (hV : (interior V).Nonempty) : ∃ t : Finset G, K ⊆ ⋃ g ∈ t, (g * ·) ⁻¹' V := by\n  obtain ⟨t, ht⟩ : ∃ t : Finset G, K ⊆ ⋃ x ∈ t, interior ((x * ·) ⁻¹' V) := by\n    refine\n      hK.elim_finite_subcover (fun x => interior <| (x * ·) ⁻¹' V) (fun x => isOpen_interior) ?_\n    cases' hV with g₀ hg₀\n    refine fun g _ => mem_iUnion.2 ⟨g₀ * g⁻¹, ?_⟩\n    refine preimage_interior_subset_interior_preimage (continuous_const.mul continuous_id) ?_\n    rwa [mem_preimage, Function.id_def, inv_mul_cancel_right]\n  exact ⟨t, Subset.trans ht <| iUnion₂_mono fun g _ => interior_subset⟩\n\n"}
{"name":"SeparableWeaklyLocallyCompactGroup.sigmaCompactSpace","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalSpace.SeparableSpace G\ninst✝ : WeaklyLocallyCompactSpace G\n⊢ SigmaCompactSpace G","decl":"/-- Every weakly locally compact separable topological group is σ-compact.\n  Note: this is not true if we drop the topological group hypothesis. -/\n@[to_additive SeparableWeaklyLocallyCompactAddGroup.sigmaCompactSpace\n  \"Every weakly locally compact separable topological additive group is σ-compact.\n  Note: this is not true if we drop the topological group hypothesis.\"]\ninstance (priority := 100) SeparableWeaklyLocallyCompactGroup.sigmaCompactSpace [SeparableSpace G]\n    [WeaklyLocallyCompactSpace G] : SigmaCompactSpace G := by\n  obtain ⟨L, hLc, hL1⟩ := exists_compact_mem_nhds (1 : G)\n  refine ⟨⟨fun n => (fun x => x * denseSeq G n) ⁻¹' L, ?_, ?_⟩⟩\n  · intro n\n    exact (Homeomorph.mulRight _).isCompact_preimage.mpr hLc\n  · refine iUnion_eq_univ_iff.2 fun x => ?_\n    obtain ⟨_, ⟨n, rfl⟩, hn⟩ : (range (denseSeq G) ∩ (fun y => x * y) ⁻¹' L).Nonempty := by\n      rw [← (Homeomorph.mulLeft x).apply_symm_apply 1] at hL1\n      exact (denseRange_denseSeq G).inter_nhds_nonempty\n          ((Homeomorph.mulLeft x).continuous.continuousAt <| hL1)\n    exact ⟨n, hn⟩\n\n"}
{"name":"SeparableWeaklyLocallyCompactAddGroup.sigmaCompactSpace","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalSpace.SeparableSpace G\ninst✝ : WeaklyLocallyCompactSpace G\n⊢ SigmaCompactSpace G","decl":"/-- Every weakly locally compact separable topological group is σ-compact.\n  Note: this is not true if we drop the topological group hypothesis. -/\n@[to_additive SeparableWeaklyLocallyCompactAddGroup.sigmaCompactSpace\n  \"Every weakly locally compact separable topological additive group is σ-compact.\n  Note: this is not true if we drop the topological group hypothesis.\"]\ninstance (priority := 100) SeparableWeaklyLocallyCompactGroup.sigmaCompactSpace [SeparableSpace G]\n    [WeaklyLocallyCompactSpace G] : SigmaCompactSpace G := by\n  obtain ⟨L, hLc, hL1⟩ := exists_compact_mem_nhds (1 : G)\n  refine ⟨⟨fun n => (fun x => x * denseSeq G n) ⁻¹' L, ?_, ?_⟩⟩\n  · intro n\n    exact (Homeomorph.mulRight _).isCompact_preimage.mpr hLc\n  · refine iUnion_eq_univ_iff.2 fun x => ?_\n    obtain ⟨_, ⟨n, rfl⟩, hn⟩ : (range (denseSeq G) ∩ (fun y => x * y) ⁻¹' L).Nonempty := by\n      rw [← (Homeomorph.mulLeft x).apply_symm_apply 1] at hL1\n      exact (denseRange_denseSeq G).inter_nhds_nonempty\n          ((Homeomorph.mulLeft x).continuous.continuousAt <| hL1)\n    exact ⟨n, hn⟩\n\n"}
{"name":"exists_disjoint_vadd_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝³ : TopologicalSpace G\ninst✝² : AddGroup G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : NoncompactSpace G\nK L : Set G\nhK : IsCompact K\nhL : IsCompact L\n⊢ Exists fun g => Disjoint K (HVAdd.hVAdd g L)","decl":"/-- Given two compact sets in a noncompact topological group, there is a translate of the second\none that is disjoint from the first one. -/\n@[to_additive\n  \"Given two compact sets in a noncompact additive topological group, there is a\n  translate of the second one that is disjoint from the first one.\"]\ntheorem exists_disjoint_smul_of_isCompact [NoncompactSpace G] {K L : Set G} (hK : IsCompact K)\n    (hL : IsCompact L) : ∃ g : G, Disjoint K (g • L) := by\n  have A : ¬K * L⁻¹ = univ := (hK.mul hL.inv).ne_univ\n  obtain ⟨g, hg⟩ : ∃ g, g ∉ K * L⁻¹ := by\n    contrapose! A\n    exact eq_univ_iff_forall.2 A\n  refine ⟨g, ?_⟩\n  refine disjoint_left.2 fun a ha h'a => hg ?_\n  rcases h'a with ⟨b, bL, rfl⟩\n  refine ⟨g * b, ha, b⁻¹, by simpa only [Set.mem_inv, inv_inv] using bL, ?_⟩\n  simp only [smul_eq_mul, mul_inv_cancel_right]\n\n"}
{"name":"exists_disjoint_smul_of_isCompact","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝³ : TopologicalSpace G\ninst✝² : Group G\ninst✝¹ : TopologicalGroup G\ninst✝ : NoncompactSpace G\nK L : Set G\nhK : IsCompact K\nhL : IsCompact L\n⊢ Exists fun g => Disjoint K (HSMul.hSMul g L)","decl":"/-- Given two compact sets in a noncompact topological group, there is a translate of the second\none that is disjoint from the first one. -/\n@[to_additive\n  \"Given two compact sets in a noncompact additive topological group, there is a\n  translate of the second one that is disjoint from the first one.\"]\ntheorem exists_disjoint_smul_of_isCompact [NoncompactSpace G] {K L : Set G} (hK : IsCompact K)\n    (hL : IsCompact L) : ∃ g : G, Disjoint K (g • L) := by\n  have A : ¬K * L⁻¹ = univ := (hK.mul hL.inv).ne_univ\n  obtain ⟨g, hg⟩ : ∃ g, g ∉ K * L⁻¹ := by\n    contrapose! A\n    exact eq_univ_iff_forall.2 A\n  refine ⟨g, ?_⟩\n  refine disjoint_left.2 fun a ha h'a => hg ?_\n  rcases h'a with ⟨b, bL, rfl⟩\n  refine ⟨g * b, ha, b⁻¹, by simpa only [Set.mem_inv, inv_inv] using bL, ?_⟩\n  simp only [smul_eq_mul, mul_inv_cancel_right]\n\n"}
{"name":"IsCompact.locallyCompactSpace_of_mem_nhds_of_group","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nK : Set G\nhK : IsCompact K\nx : G\nh : Membership.mem (nhds x) K\n⊢ LocallyCompactSpace G","decl":"/-- If a point in a topological group has a compact neighborhood, then the group is\nlocally compact. -/\n@[to_additive]\ntheorem IsCompact.locallyCompactSpace_of_mem_nhds_of_group {K : Set G} (hK : IsCompact K) {x : G}\n    (h : K ∈ 𝓝 x) : LocallyCompactSpace G := by\n  suffices WeaklyLocallyCompactSpace G from inferInstance\n  refine ⟨fun y ↦ ⟨(y * x⁻¹) • K, ?_, ?_⟩⟩\n  · exact hK.smul _\n  · rw [← preimage_smul_inv]\n    exact (continuous_const_smul _).continuousAt.preimage_mem_nhds (by simpa using h)\n\n"}
{"name":"IsCompact.locallyCompactSpace_of_mem_nhds_of_addGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nK : Set G\nhK : IsCompact K\nx : G\nh : Membership.mem (nhds x) K\n⊢ LocallyCompactSpace G","decl":"/-- If a point in a topological group has a compact neighborhood, then the group is\nlocally compact. -/\n@[to_additive]\ntheorem IsCompact.locallyCompactSpace_of_mem_nhds_of_group {K : Set G} (hK : IsCompact K) {x : G}\n    (h : K ∈ 𝓝 x) : LocallyCompactSpace G := by\n  suffices WeaklyLocallyCompactSpace G from inferInstance\n  refine ⟨fun y ↦ ⟨(y * x⁻¹) • K, ?_, ?_⟩⟩\n  · exact hK.smul _\n  · rw [← preimage_smul_inv]\n    exact (continuous_const_smul _).continuousAt.preimage_mem_nhds (by simpa using h)\n\n"}
{"name":"eq_zero_or_locallyCompactSpace_of_support_subset_isCompact_of_addGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : AddGroup G\ninst✝³ : TopologicalAddGroup G\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero α\ninst✝ : T1Space α\nf : G → α\nk : Set G\nhk : IsCompact k\nhf : HasSubset.Subset (Function.support f) k\nh'f : Continuous f\n⊢ Or (Eq f 0) (LocallyCompactSpace G)","decl":"/-- If a function defined on a topological group has a support contained in a\ncompact set, then either the function is trivial or the group is locally compact. -/\n@[to_additive\n      \"If a function defined on a topological additive group has a support contained in a compact\n      set, then either the function is trivial or the group is locally compact.\"]\ntheorem eq_zero_or_locallyCompactSpace_of_support_subset_isCompact_of_group\n    [TopologicalSpace α] [Zero α] [T1Space α]\n    {f : G → α} {k : Set G} (hk : IsCompact k) (hf : support f ⊆ k) (h'f : Continuous f) :\n    f = 0 ∨ LocallyCompactSpace G := by\n  refine or_iff_not_imp_left.mpr fun h => ?_\n  simp_rw [funext_iff, Pi.zero_apply] at h\n  push_neg at h\n  obtain ⟨x, hx⟩ : ∃ x, f x ≠ 0 := h\n  have : k ∈ 𝓝 x :=\n    mem_of_superset (h'f.isOpen_support.mem_nhds hx) hf\n  exact IsCompact.locallyCompactSpace_of_mem_nhds_of_group hk this\n\n"}
{"name":"eq_zero_or_locallyCompactSpace_of_support_subset_isCompact_of_group","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Group G\ninst✝³ : TopologicalGroup G\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero α\ninst✝ : T1Space α\nf : G → α\nk : Set G\nhk : IsCompact k\nhf : HasSubset.Subset (Function.support f) k\nh'f : Continuous f\n⊢ Or (Eq f 0) (LocallyCompactSpace G)","decl":"/-- If a function defined on a topological group has a support contained in a\ncompact set, then either the function is trivial or the group is locally compact. -/\n@[to_additive\n      \"If a function defined on a topological additive group has a support contained in a compact\n      set, then either the function is trivial or the group is locally compact.\"]\ntheorem eq_zero_or_locallyCompactSpace_of_support_subset_isCompact_of_group\n    [TopologicalSpace α] [Zero α] [T1Space α]\n    {f : G → α} {k : Set G} (hk : IsCompact k) (hf : support f ⊆ k) (h'f : Continuous f) :\n    f = 0 ∨ LocallyCompactSpace G := by\n  refine or_iff_not_imp_left.mpr fun h => ?_\n  simp_rw [funext_iff, Pi.zero_apply] at h\n  push_neg at h\n  obtain ⟨x, hx⟩ : ∃ x, f x ≠ 0 := h\n  have : k ∈ 𝓝 x :=\n    mem_of_superset (h'f.isOpen_support.mem_nhds hx) hf\n  exact IsCompact.locallyCompactSpace_of_mem_nhds_of_group hk this\n\n"}
{"name":"HasCompactSupport.eq_zero_or_locallyCompactSpace_of_addGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : AddGroup G\ninst✝³ : TopologicalAddGroup G\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero α\ninst✝ : T1Space α\nf : G → α\nhf : HasCompactSupport f\nh'f : Continuous f\n⊢ Or (Eq f 0) (LocallyCompactSpace G)","decl":"/-- If a function defined on a topological group has compact support, then either\nthe function is trivial or the group is locally compact. -/\n@[to_additive\n      \"If a function defined on a topological additive group has compact support,\n      then either the function is trivial or the group is locally compact.\"]\ntheorem HasCompactSupport.eq_zero_or_locallyCompactSpace_of_group\n    [TopologicalSpace α] [Zero α] [T1Space α]\n    {f : G → α} (hf : HasCompactSupport f) (h'f : Continuous f) :\n    f = 0 ∨ LocallyCompactSpace G :=\n  eq_zero_or_locallyCompactSpace_of_support_subset_isCompact_of_group hf (subset_tsupport f) h'f\n\n"}
{"name":"HasCompactSupport.eq_zero_or_locallyCompactSpace_of_group","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nα : Type u\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : Group G\ninst✝³ : TopologicalGroup G\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero α\ninst✝ : T1Space α\nf : G → α\nhf : HasCompactSupport f\nh'f : Continuous f\n⊢ Or (Eq f 0) (LocallyCompactSpace G)","decl":"/-- If a function defined on a topological group has compact support, then either\nthe function is trivial or the group is locally compact. -/\n@[to_additive\n      \"If a function defined on a topological additive group has compact support,\n      then either the function is trivial or the group is locally compact.\"]\ntheorem HasCompactSupport.eq_zero_or_locallyCompactSpace_of_group\n    [TopologicalSpace α] [Zero α] [T1Space α]\n    {f : G → α} (hf : HasCompactSupport f) (h'f : Continuous f) :\n    f = 0 ∨ LocallyCompactSpace G :=\n  eq_zero_or_locallyCompactSpace_of_support_subset_isCompact_of_group hf (subset_tsupport f) h'f\n\n"}
{"name":"nhds_add","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx y : G\n⊢ Eq (nhds (HAdd.hAdd x y)) (HAdd.hAdd (nhds x) (nhds y))","decl":"@[to_additive]\ntheorem nhds_mul (x y : G) : 𝓝 (x * y) = 𝓝 x * 𝓝 y :=\n  calc\n    𝓝 (x * y) = map (x * ·) (map (· * y) (𝓝 1 * 𝓝 1)) := by simp\n    _ = map₂ (fun a b => x * (a * b * y)) (𝓝 1) (𝓝 1) := by rw [← map₂_mul, map_map₂, map_map₂]\n    _ = map₂ (fun a b => x * a * (b * y)) (𝓝 1) (𝓝 1) := by simp only [mul_assoc]\n    _ = 𝓝 x * 𝓝 y := by\n      rw [← map_mul_left_nhds_one x, ← map_mul_right_nhds_one y, ← map₂_mul, map₂_map_left,\n        map₂_map_right]\n\n"}
{"name":"nhds_mul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx y : G\n⊢ Eq (nhds (HMul.hMul x y)) (HMul.hMul (nhds x) (nhds y))","decl":"@[to_additive]\ntheorem nhds_mul (x y : G) : 𝓝 (x * y) = 𝓝 x * 𝓝 y :=\n  calc\n    𝓝 (x * y) = map (x * ·) (map (· * y) (𝓝 1 * 𝓝 1)) := by simp\n    _ = map₂ (fun a b => x * (a * b * y)) (𝓝 1) (𝓝 1) := by rw [← map₂_mul, map_map₂, map_map₂]\n    _ = map₂ (fun a b => x * a * (b * y)) (𝓝 1) (𝓝 1) := by simp only [mul_assoc]\n    _ = 𝓝 x * 𝓝 y := by\n      rw [← map_mul_left_nhds_one x, ← map_mul_right_nhds_one y, ← map₂_mul, map₂_map_left,\n        map₂_map_right]\n\n"}
{"name":"nhdsAddHom_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\nx : G\n⊢ Eq (nhdsAddHom x) (nhds x)","decl":"/-- On a topological group, `𝓝 : G → Filter G` can be promoted to a `MulHom`. -/\n@[to_additive (attr := simps)\n  \"On an additive topological group, `𝓝 : G → Filter G` can be promoted to an `AddHom`.\"]\ndef nhdsMulHom : G →ₙ* Filter G where\n  toFun := 𝓝\n  map_mul' _ _ := nhds_mul _ _\n\n"}
{"name":"nhdsMulHom_apply","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\nx : G\n⊢ Eq (nhdsMulHom x) (nhds x)","decl":"/-- On a topological group, `𝓝 : G → Filter G` can be promoted to a `MulHom`. -/\n@[to_additive (attr := simps)\n  \"On an additive topological group, `𝓝 : G → Filter G` can be promoted to an `AddHom`.\"]\ndef nhdsMulHom : G →ₙ* Filter G where\n  toFun := 𝓝\n  map_mul' _ _ := nhds_mul _ _\n\n"}
{"name":"instTopologicalAddGroupAdditiveOfTopologicalGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : Group G\ninst✝ : TopologicalGroup G\n⊢ TopologicalAddGroup (Additive G)","decl":"instance {G} [TopologicalSpace G] [Group G] [TopologicalGroup G] :\n    TopologicalAddGroup (Additive G) where\n  continuous_neg := @continuous_inv G _ _ _\n\n"}
{"name":"instTopologicalGroupMultiplicativeOfTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type u_1\ninst✝² : TopologicalSpace G\ninst✝¹ : AddGroup G\ninst✝ : TopologicalAddGroup G\n⊢ TopologicalGroup (Multiplicative G)","decl":"instance {G} [TopologicalSpace G] [AddGroup G] [TopologicalAddGroup G] :\n    TopologicalGroup (Multiplicative G) where\n  continuous_inv := @continuous_neg G _ _ _\n\n"}
{"name":"AddUnits.isEmbedding_val","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousNeg G\n⊢ Topology.IsEmbedding AddUnits.val","decl":"@[to_additive] theorem Units.isEmbedding_val [Group G] [TopologicalSpace G] [ContinuousInv G] :\n    IsEmbedding (val : Gˣ → G) :=\n  toUnits_homeomorph.symm.isEmbedding\n\n"}
{"name":"Units.isEmbedding_val","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousInv G\n⊢ Topology.IsEmbedding Units.val","decl":"@[to_additive] theorem Units.isEmbedding_val [Group G] [TopologicalSpace G] [ContinuousInv G] :\n    IsEmbedding (val : Gˣ → G) :=\n  toUnits_homeomorph.symm.isEmbedding\n\n"}
{"name":"Units.embedding_val","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousInv G\n⊢ Topology.IsEmbedding Units.val","decl":"@[deprecated (since := \"2024-10-26\")]\nalias Units.embedding_val := Units.isEmbedding_val\n\n"}
{"name":"AddUnits.instTopologicalAddGroupOfContinuousAdd","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : AddMonoid α\ninst✝¹ : TopologicalSpace α\ninst✝ : ContinuousAdd α\n⊢ TopologicalAddGroup (AddUnits α)","decl":"@[to_additive]\ninstance [ContinuousMul α] : TopologicalGroup αˣ where\n  continuous_inv := Units.continuous_iff.2 <| ⟨continuous_coe_inv, continuous_val⟩\n\n"}
{"name":"Units.instTopologicalGroupOfContinuousMul","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝² : Monoid α\ninst✝¹ : TopologicalSpace α\ninst✝ : ContinuousMul α\n⊢ TopologicalGroup (Units α)","decl":"@[to_additive]\ninstance [ContinuousMul α] : TopologicalGroup αˣ where\n  continuous_inv := Units.continuous_iff.2 <| ⟨continuous_coe_inv, continuous_val⟩\n\n"}
{"name":"topologicalAddGroup_sInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : AddGroup G\nts : Set (TopologicalSpace G)\nh : ∀ (t : TopologicalSpace G), Membership.mem ts t → TopologicalAddGroup G\n⊢ TopologicalAddGroup G","decl":"@[to_additive]\ntheorem topologicalGroup_sInf {ts : Set (TopologicalSpace G)}\n    (h : ∀ t ∈ ts, @TopologicalGroup G t _) : @TopologicalGroup G (sInf ts) _ :=\n  letI := sInf ts\n  { toContinuousInv :=\n      @continuousInv_sInf _ _ _ fun t ht => @TopologicalGroup.toContinuousInv G t _ <| h t ht\n    toContinuousMul :=\n      @continuousMul_sInf _ _ _ fun t ht =>\n        @TopologicalGroup.toContinuousMul G t _ <| h t ht }\n\n"}
{"name":"topologicalGroup_sInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : Group G\nts : Set (TopologicalSpace G)\nh : ∀ (t : TopologicalSpace G), Membership.mem ts t → TopologicalGroup G\n⊢ TopologicalGroup G","decl":"@[to_additive]\ntheorem topologicalGroup_sInf {ts : Set (TopologicalSpace G)}\n    (h : ∀ t ∈ ts, @TopologicalGroup G t _) : @TopologicalGroup G (sInf ts) _ :=\n  letI := sInf ts\n  { toContinuousInv :=\n      @continuousInv_sInf _ _ _ fun t ht => @TopologicalGroup.toContinuousInv G t _ <| h t ht\n    toContinuousMul :=\n      @continuousMul_sInf _ _ _ fun t ht =>\n        @TopologicalGroup.toContinuousMul G t _ <| h t ht }\n\n"}
{"name":"topologicalGroup_iInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nι : Sort u_1\ninst✝ : Group G\nts' : ι → TopologicalSpace G\nh' : ∀ (i : ι), TopologicalGroup G\n⊢ TopologicalGroup G","decl":"@[to_additive]\ntheorem topologicalGroup_iInf {ts' : ι → TopologicalSpace G}\n    (h' : ∀ i, @TopologicalGroup G (ts' i) _) : @TopologicalGroup G (⨅ i, ts' i) _ := by\n  rw [← sInf_range]\n  exact topologicalGroup_sInf (Set.forall_mem_range.mpr h')\n\n"}
{"name":"topologicalAddGroup_iInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\nι : Sort u_1\ninst✝ : AddGroup G\nts' : ι → TopologicalSpace G\nh' : ∀ (i : ι), TopologicalAddGroup G\n⊢ TopologicalAddGroup G","decl":"@[to_additive]\ntheorem topologicalGroup_iInf {ts' : ι → TopologicalSpace G}\n    (h' : ∀ i, @TopologicalGroup G (ts' i) _) : @TopologicalGroup G (⨅ i, ts' i) _ := by\n  rw [← sInf_range]\n  exact topologicalGroup_sInf (Set.forall_mem_range.mpr h')\n\n"}
{"name":"topologicalAddGroup_inf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : AddGroup G\nt₁ t₂ : TopologicalSpace G\nh₁ : TopologicalAddGroup G\nh₂ : TopologicalAddGroup G\n⊢ TopologicalAddGroup G","decl":"@[to_additive]\ntheorem topologicalGroup_inf {t₁ t₂ : TopologicalSpace G} (h₁ : @TopologicalGroup G t₁ _)\n    (h₂ : @TopologicalGroup G t₂ _) : @TopologicalGroup G (t₁ ⊓ t₂) _ := by\n  rw [inf_eq_iInf]\n  refine topologicalGroup_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"topologicalGroup_inf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"G : Type w\ninst✝ : Group G\nt₁ t₂ : TopologicalSpace G\nh₁ : TopologicalGroup G\nh₂ : TopologicalGroup G\n⊢ TopologicalGroup G","decl":"@[to_additive]\ntheorem topologicalGroup_inf {t₁ t₂ : TopologicalSpace G} (h₁ : @TopologicalGroup G t₁ _)\n    (h₂ : @TopologicalGroup G t₂ _) : @TopologicalGroup G (t₁ ⊓ t₂) _ := by\n  rw [inf_eq_iInf]\n  refine topologicalGroup_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"GroupTopology.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝¹ : Group α\ninst✝ : SizeOf α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalGroup : TopologicalGroup α\n⊢ Eq (SizeOf.sizeOf { toTopologicalSpace := toTopologicalSpace, toTopologicalGroup := toTopologicalGroup }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toTopologicalSpace)) (SizeOf.sizeOf toTopologicalGroup))","decl":"/-- A group topology on a group `α` is a topology for which multiplication and inversion\nare continuous. -/\nstructure GroupTopology (α : Type u) [Group α] extends TopologicalSpace α, TopologicalGroup α :\n  Type u\n\n"}
{"name":"GroupTopology.toTopologicalGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\nself : GroupTopology α\n⊢ TopologicalGroup α","decl":"/-- A group topology on a group `α` is a topology for which multiplication and inversion\nare continuous. -/\nstructure GroupTopology (α : Type u) [Group α] extends TopologicalSpace α, TopologicalGroup α :\n  Type u\n\n"}
{"name":"GroupTopology.mk.injEq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\ntoTopologicalSpace✝ : TopologicalSpace α\ntoTopologicalGroup✝ : TopologicalGroup α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalGroup : TopologicalGroup α\n⊢ Eq (Eq { toTopologicalSpace := toTopologicalSpace✝, toTopologicalGroup := toTopologicalGroup✝ } { toTopologicalSpace := toTopologicalSpace, toTopologicalGroup := toTopologicalGroup }) (Eq toTopologicalSpace✝ toTopologicalSpace)","decl":"/-- A group topology on a group `α` is a topology for which multiplication and inversion\nare continuous. -/\nstructure GroupTopology (α : Type u) [Group α] extends TopologicalSpace α, TopologicalGroup α :\n  Type u\n\n"}
{"name":"GroupTopology.mk.inj","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\ntoTopologicalSpace✝ : TopologicalSpace α\ntoTopologicalGroup✝ : TopologicalGroup α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalGroup : TopologicalGroup α\nx✝ : Eq { toTopologicalSpace := toTopologicalSpace✝, toTopologicalGroup := toTopologicalGroup✝ } { toTopologicalSpace := toTopologicalSpace, toTopologicalGroup := toTopologicalGroup }\n⊢ Eq toTopologicalSpace✝ toTopologicalSpace","decl":"/-- A group topology on a group `α` is a topology for which multiplication and inversion\nare continuous. -/\nstructure GroupTopology (α : Type u) [Group α] extends TopologicalSpace α, TopologicalGroup α :\n  Type u\n\n"}
{"name":"AddGroupTopology.mk.inj","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\ntoTopologicalSpace✝ : TopologicalSpace α\ntoTopologicalAddGroup✝ : TopologicalAddGroup α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalAddGroup : TopologicalAddGroup α\nx✝ : Eq { toTopologicalSpace := toTopologicalSpace✝, toTopologicalAddGroup := toTopologicalAddGroup✝ } { toTopologicalSpace := toTopologicalSpace, toTopologicalAddGroup := toTopologicalAddGroup }\n⊢ Eq toTopologicalSpace✝ toTopologicalSpace","decl":"/-- An additive group topology on an additive group `α` is a topology for which addition and\n  negation are continuous. -/\nstructure AddGroupTopology (α : Type u) [AddGroup α] extends TopologicalSpace α,\n  TopologicalAddGroup α : Type u\n\n"}
{"name":"AddGroupTopology.mk.injEq","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\ntoTopologicalSpace✝ : TopologicalSpace α\ntoTopologicalAddGroup✝ : TopologicalAddGroup α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalAddGroup : TopologicalAddGroup α\n⊢ Eq (Eq { toTopologicalSpace := toTopologicalSpace✝, toTopologicalAddGroup := toTopologicalAddGroup✝ } { toTopologicalSpace := toTopologicalSpace, toTopologicalAddGroup := toTopologicalAddGroup }) (Eq toTopologicalSpace✝ toTopologicalSpace)","decl":"/-- An additive group topology on an additive group `α` is a topology for which addition and\n  negation are continuous. -/\nstructure AddGroupTopology (α : Type u) [AddGroup α] extends TopologicalSpace α,\n  TopologicalAddGroup α : Type u\n\n"}
{"name":"AddGroupTopology.toTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\nself : AddGroupTopology α\n⊢ TopologicalAddGroup α","decl":"/-- An additive group topology on an additive group `α` is a topology for which addition and\n  negation are continuous. -/\nstructure AddGroupTopology (α : Type u) [AddGroup α] extends TopologicalSpace α,\n  TopologicalAddGroup α : Type u\n\n"}
{"name":"AddGroupTopology.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝¹ : AddGroup α\ninst✝ : SizeOf α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalAddGroup : TopologicalAddGroup α\n⊢ Eq (SizeOf.sizeOf { toTopologicalSpace := toTopologicalSpace, toTopologicalAddGroup := toTopologicalAddGroup }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toTopologicalSpace)) (SizeOf.sizeOf toTopologicalAddGroup))","decl":"/-- An additive group topology on an additive group `α` is a topology for which addition and\n  negation are continuous. -/\nstructure AddGroupTopology (α : Type u) [AddGroup α] extends TopologicalSpace α,\n  TopologicalAddGroup α : Type u\n\n"}
{"name":"GroupTopology.continuous_mul'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\ng : GroupTopology α\n⊢ Continuous fun p => HMul.hMul p.1 p.2","decl":"/-- A version of the global `continuous_mul` suitable for dot notation. -/\n@[to_additive \"A version of the global `continuous_add` suitable for dot notation.\"]\ntheorem continuous_mul' (g : GroupTopology α) :\n    haveI := g.toTopologicalSpace\n    Continuous fun p : α × α => p.1 * p.2 := by\n  letI := g.toTopologicalSpace\n  haveI := g.toTopologicalGroup\n  exact continuous_mul\n\n"}
{"name":"AddGroupTopology.continuous_add'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\ng : AddGroupTopology α\n⊢ Continuous fun p => HAdd.hAdd p.1 p.2","decl":"/-- A version of the global `continuous_mul` suitable for dot notation. -/\n@[to_additive \"A version of the global `continuous_add` suitable for dot notation.\"]\ntheorem continuous_mul' (g : GroupTopology α) :\n    haveI := g.toTopologicalSpace\n    Continuous fun p : α × α => p.1 * p.2 := by\n  letI := g.toTopologicalSpace\n  haveI := g.toTopologicalGroup\n  exact continuous_mul\n\n"}
{"name":"GroupTopology.continuous_inv'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\ng : GroupTopology α\n⊢ Continuous Inv.inv","decl":"/-- A version of the global `continuous_inv` suitable for dot notation. -/\n@[to_additive \"A version of the global `continuous_neg` suitable for dot notation.\"]\ntheorem continuous_inv' (g : GroupTopology α) :\n    haveI := g.toTopologicalSpace\n    Continuous (Inv.inv : α → α) := by\n  letI := g.toTopologicalSpace\n  haveI := g.toTopologicalGroup\n  exact continuous_inv\n\n"}
{"name":"AddGroupTopology.continuous_neg'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\ng : AddGroupTopology α\n⊢ Continuous Neg.neg","decl":"/-- A version of the global `continuous_inv` suitable for dot notation. -/\n@[to_additive \"A version of the global `continuous_neg` suitable for dot notation.\"]\ntheorem continuous_inv' (g : GroupTopology α) :\n    haveI := g.toTopologicalSpace\n    Continuous (Inv.inv : α → α) := by\n  letI := g.toTopologicalSpace\n  haveI := g.toTopologicalGroup\n  exact continuous_inv\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_injective","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\n⊢ Function.Injective AddGroupTopology.toTopologicalSpace","decl":"@[to_additive]\ntheorem toTopologicalSpace_injective :\n    Function.Injective (toTopologicalSpace : GroupTopology α → TopologicalSpace α) :=\n  fun f g h => by\n    cases f\n    cases g\n    congr\n\n"}
{"name":"GroupTopology.toTopologicalSpace_injective","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\n⊢ Function.Injective GroupTopology.toTopologicalSpace","decl":"@[to_additive]\ntheorem toTopologicalSpace_injective :\n    Function.Injective (toTopologicalSpace : GroupTopology α → TopologicalSpace α) :=\n  fun f g h => by\n    cases f\n    cases g\n    congr\n\n"}
{"name":"GroupTopology.ext'_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\nf g : GroupTopology α\n⊢ Iff (Eq f g) (Eq TopologicalSpace.IsOpen TopologicalSpace.IsOpen)","decl":"@[to_additive (attr := ext)]\ntheorem ext' {f g : GroupTopology α} (h : f.IsOpen = g.IsOpen) : f = g :=\n  toTopologicalSpace_injective <| TopologicalSpace.ext h\n\n"}
{"name":"AddGroupTopology.ext'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\nf g : AddGroupTopology α\nh : Eq TopologicalSpace.IsOpen TopologicalSpace.IsOpen\n⊢ Eq f g","decl":"@[to_additive (attr := ext)]\ntheorem ext' {f g : GroupTopology α} (h : f.IsOpen = g.IsOpen) : f = g :=\n  toTopologicalSpace_injective <| TopologicalSpace.ext h\n\n"}
{"name":"AddGroupTopology.ext'_iff","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\nf g : AddGroupTopology α\n⊢ Iff (Eq f g) (Eq TopologicalSpace.IsOpen TopologicalSpace.IsOpen)","decl":"@[to_additive (attr := ext)]\ntheorem ext' {f g : GroupTopology α} (h : f.IsOpen = g.IsOpen) : f = g :=\n  toTopologicalSpace_injective <| TopologicalSpace.ext h\n\n"}
{"name":"GroupTopology.ext'","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\nf g : GroupTopology α\nh : Eq TopologicalSpace.IsOpen TopologicalSpace.IsOpen\n⊢ Eq f g","decl":"@[to_additive (attr := ext)]\ntheorem ext' {f g : GroupTopology α} (h : f.IsOpen = g.IsOpen) : f = g :=\n  toTopologicalSpace_injective <| TopologicalSpace.ext h\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_le","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\nx y : AddGroupTopology α\n⊢ Iff (LE.le x.toTopologicalSpace y.toTopologicalSpace) (LE.le x y)","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_le {x y : GroupTopology α} :\n    x.toTopologicalSpace ≤ y.toTopologicalSpace ↔ x ≤ y :=\n  Iff.rfl\n\n"}
{"name":"GroupTopology.toTopologicalSpace_le","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\nx y : GroupTopology α\n⊢ Iff (LE.le x.toTopologicalSpace y.toTopologicalSpace) (LE.le x y)","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_le {x y : GroupTopology α} :\n    x.toTopologicalSpace ≤ y.toTopologicalSpace ↔ x ≤ y :=\n  Iff.rfl\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_top","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\n⊢ Eq Top.top.toTopologicalSpace Top.top","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_top : (⊤ : GroupTopology α).toTopologicalSpace = ⊤ :=\n  rfl\n\n"}
{"name":"GroupTopology.toTopologicalSpace_top","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\n⊢ Eq Top.top.toTopologicalSpace Top.top","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_top : (⊤ : GroupTopology α).toTopologicalSpace = ⊤ :=\n  rfl\n\n"}
{"name":"GroupTopology.toTopologicalSpace_bot","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\n⊢ Eq Bot.bot.toTopologicalSpace Bot.bot","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_bot : (⊥ : GroupTopology α).toTopologicalSpace = ⊥ :=\n  rfl\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_bot","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\n⊢ Eq Bot.bot.toTopologicalSpace Bot.bot","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_bot : (⊥ : GroupTopology α).toTopologicalSpace = ⊥ :=\n  rfl\n\n"}
{"name":"GroupTopology.toTopologicalSpace_inf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\nx y : GroupTopology α\n⊢ Eq (Min.min x y).toTopologicalSpace (Min.min x.toTopologicalSpace y.toTopologicalSpace)","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_inf (x y : GroupTopology α) :\n    (x ⊓ y).toTopologicalSpace = x.toTopologicalSpace ⊓ y.toTopologicalSpace :=\n  rfl\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_inf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\nx y : AddGroupTopology α\n⊢ Eq (Min.min x y).toTopologicalSpace (Min.min x.toTopologicalSpace y.toTopologicalSpace)","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_inf (x y : GroupTopology α) :\n    (x ⊓ y).toTopologicalSpace = x.toTopologicalSpace ⊓ y.toTopologicalSpace :=\n  rfl\n\n"}
{"name":"GroupTopology.toTopologicalSpace_sInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\ns : Set (GroupTopology α)\n⊢ Eq (InfSet.sInf s).toTopologicalSpace (InfSet.sInf (Set.image GroupTopology.toTopologicalSpace s))","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_sInf (s : Set (GroupTopology α)) :\n    (sInf s).toTopologicalSpace = sInf (toTopologicalSpace '' s) := rfl\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_sInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\ns : Set (AddGroupTopology α)\n⊢ Eq (InfSet.sInf s).toTopologicalSpace (InfSet.sInf (Set.image AddGroupTopology.toTopologicalSpace s))","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_sInf (s : Set (GroupTopology α)) :\n    (sInf s).toTopologicalSpace = sInf (toTopologicalSpace '' s) := rfl\n\n"}
{"name":"GroupTopology.toTopologicalSpace_iInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : Group α\nι : Sort u_1\ns : ι → GroupTopology α\n⊢ Eq (iInf fun i => s i).toTopologicalSpace (iInf fun i => (s i).toTopologicalSpace)","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_iInf {ι} (s : ι → GroupTopology α) :\n    (⨅ i, s i).toTopologicalSpace = ⨅ i, (s i).toTopologicalSpace :=\n  congr_arg sInf (range_comp _ _).symm\n\n"}
{"name":"AddGroupTopology.toTopologicalSpace_iInf","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u\ninst✝ : AddGroup α\nι : Sort u_1\ns : ι → AddGroupTopology α\n⊢ Eq (iInf fun i => s i).toTopologicalSpace (iInf fun i => (s i).toTopologicalSpace)","decl":"@[to_additive (attr := simp)]\ntheorem toTopologicalSpace_iInf {ι} (s : ι → GroupTopology α) :\n    (⨅ i, s i).toTopologicalSpace = ⨅ i, (s i).toTopologicalSpace :=\n  congr_arg sInf (range_comp _ _).symm\n\n"}
{"name":"AddGroupTopology.coinduced_continuous","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nt : TopologicalSpace α\ninst✝ : AddGroup β\nf : α → β\n⊢ Continuous f","decl":"@[to_additive]\ntheorem coinduced_continuous {α β : Type*} [t : TopologicalSpace α] [Group β] (f : α → β) :\n    Continuous[t, (coinduced f).toTopologicalSpace] f := by\n  rw [continuous_sInf_rng]\n  rintro _ ⟨t', ht', rfl⟩\n  exact continuous_iff_coinduced_le.2 ht'\n\n"}
{"name":"GroupTopology.coinduced_continuous","module":"Mathlib.Topology.Algebra.Group.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\nt : TopologicalSpace α\ninst✝ : Group β\nf : α → β\n⊢ Continuous f","decl":"@[to_additive]\ntheorem coinduced_continuous {α β : Type*} [t : TopologicalSpace α] [Group β] (f : α → β) :\n    Continuous[t, (coinduced f).toTopologicalSpace] f := by\n  rw [continuous_sInf_rng]\n  rintro _ ⟨t', ht', rfl⟩\n  exact continuous_iff_coinduced_le.2 ht'\n\n"}
