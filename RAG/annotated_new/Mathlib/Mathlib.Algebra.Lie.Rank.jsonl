{"name":"LieModule.polyCharpoly_coeff_rank_ne_zero","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\nι : Type u_5\ninst✝¹³ : CommRing R\ninst✝¹² : LieRing L\ninst✝¹¹ : LieAlgebra R L\ninst✝¹⁰ : Module.Finite R L\ninst✝⁹ : Module.Free R L\ninst✝⁸ : AddCommGroup M\ninst✝⁷ : Module R M\ninst✝⁶ : LieRingModule L M\ninst✝⁵ : LieModule R L M\ninst✝⁴ : Module.Finite R M\ninst✝³ : Module.Free R M\ninst✝² : Fintype ι\nb : Basis ι R L\ninst✝¹ : Nontrivial R\ninst✝ : DecidableEq ι\n⊢ Ne (((↑(LieModule.toEnd R L M)).polyCharpoly b).coeff (LieModule.rank R L M)) 0","decl":"lemma polyCharpoly_coeff_rank_ne_zero [Nontrivial R] [DecidableEq ι] :\n    (polyCharpoly φ b).coeff (rank R L M) ≠ 0 :=\n  polyCharpoly_coeff_nilRank_ne_zero _ _\n\n"}
{"name":"LieModule.rank_eq_natTrailingDegree","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\nι : Type u_5\ninst✝¹³ : CommRing R\ninst✝¹² : LieRing L\ninst✝¹¹ : LieAlgebra R L\ninst✝¹⁰ : Module.Finite R L\ninst✝⁹ : Module.Free R L\ninst✝⁸ : AddCommGroup M\ninst✝⁷ : Module R M\ninst✝⁶ : LieRingModule L M\ninst✝⁵ : LieModule R L M\ninst✝⁴ : Module.Finite R M\ninst✝³ : Module.Free R M\ninst✝² : Fintype ι\nb : Basis ι R L\ninst✝¹ : Nontrivial R\ninst✝ : DecidableEq ι\n⊢ Eq (LieModule.rank R L M) ((↑(LieModule.toEnd R L M)).polyCharpoly b).natTrailingDegree","decl":"lemma rank_eq_natTrailingDegree [Nontrivial R] [DecidableEq ι] :\n    rank R L M = (polyCharpoly φ b).natTrailingDegree := by\n  apply nilRank_eq_polyCharpoly_natTrailingDegree\n\n"}
{"name":"LieModule.rank_le_card","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\nιₘ : Type u_6\ninst✝¹² : CommRing R\ninst✝¹¹ : LieRing L\ninst✝¹⁰ : LieAlgebra R L\ninst✝⁹ : Module.Finite R L\ninst✝⁸ : Module.Free R L\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : Module R M\ninst✝⁵ : LieRingModule L M\ninst✝⁴ : LieModule R L M\ninst✝³ : Module.Finite R M\ninst✝² : Module.Free R M\ninst✝¹ : Fintype ιₘ\nbₘ : Basis ιₘ R M\ninst✝ : Nontrivial R\n⊢ LE.le (LieModule.rank R L M) (Fintype.card ιₘ)","decl":"include bₘ in\nlemma rank_le_card [Nontrivial R] : rank R L M ≤ Fintype.card ιₘ :=\n  nilRank_le_card _ bₘ\n\n"}
{"name":"LieModule.rank_le_finrank","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝¹¹ : CommRing R\ninst✝¹⁰ : LieRing L\ninst✝⁹ : LieAlgebra R L\ninst✝⁸ : Module.Finite R L\ninst✝⁷ : Module.Free R L\ninst✝⁶ : AddCommGroup M\ninst✝⁵ : Module R M\ninst✝⁴ : LieRingModule L M\ninst✝³ : LieModule R L M\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Free R M\ninst✝ : Nontrivial R\n⊢ LE.le (LieModule.rank R L M) (Module.finrank R M)","decl":"lemma rank_le_finrank [Nontrivial R] : rank R L M ≤ finrank R M :=\n  nilRank_le_finrank _\n\n"}
{"name":"LieModule.rank_le_natTrailingDegree_charpoly_ad","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝¹¹ : CommRing R\ninst✝¹⁰ : LieRing L\ninst✝⁹ : LieAlgebra R L\ninst✝⁸ : Module.Finite R L\ninst✝⁷ : Module.Free R L\ninst✝⁶ : AddCommGroup M\ninst✝⁵ : Module R M\ninst✝⁴ : LieRingModule L M\ninst✝³ : LieModule R L M\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Free R M\nx : L\ninst✝ : Nontrivial R\n⊢ LE.le (LieModule.rank R L M) (LinearMap.charpoly ((LieModule.toEnd R L M) x)).natTrailingDegree","decl":"lemma rank_le_natTrailingDegree_charpoly_ad [Nontrivial R] :\n    rank R L M ≤ (toEnd R L M x).charpoly.natTrailingDegree :=\n  nilRank_le_natTrailingDegree_charpoly _ _\n\n"}
{"name":"LieModule.isRegular_def","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝¹⁰ : CommRing R\ninst✝⁹ : LieRing L\ninst✝⁸ : LieAlgebra R L\ninst✝⁷ : Module.Finite R L\ninst✝⁶ : Module.Free R L\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : Module R M\ninst✝³ : LieRingModule L M\ninst✝² : LieModule R L M\ninst✝¹ : Module.Finite R M\ninst✝ : Module.Free R M\nx : L\n⊢ Iff (LieModule.IsRegular R M x) (Ne ((LinearMap.charpoly ((LieModule.toEnd R L M) x)).coeff (LieModule.rank R L M)) 0)","decl":"lemma isRegular_def :\n    IsRegular R M x ↔ (toEnd R L M x).charpoly.coeff (rank R L M) ≠ 0 := Iff.rfl\n\n"}
{"name":"LieModule.isRegular_iff_coeff_polyCharpoly_rank_ne_zero","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\nι : Type u_5\ninst✝¹² : CommRing R\ninst✝¹¹ : LieRing L\ninst✝¹⁰ : LieAlgebra R L\ninst✝⁹ : Module.Finite R L\ninst✝⁸ : Module.Free R L\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : Module R M\ninst✝⁵ : LieRingModule L M\ninst✝⁴ : LieModule R L M\ninst✝³ : Module.Finite R M\ninst✝² : Module.Free R M\ninst✝¹ : Fintype ι\nb : Basis ι R L\nx : L\ninst✝ : DecidableEq ι\n⊢ Iff (LieModule.IsRegular R M x) (Ne ((MvPolynomial.eval ⇑(b.repr x)) (((↑(LieModule.toEnd R L M)).polyCharpoly b).coeff (LieModule.rank R L M))) 0)","decl":"lemma isRegular_iff_coeff_polyCharpoly_rank_ne_zero [DecidableEq ι] :\n    IsRegular R M x ↔\n    MvPolynomial.eval (b.repr x)\n      ((polyCharpoly φ b).coeff (rank R L M)) ≠ 0 :=\n  LinearMap.isNilRegular_iff_coeff_polyCharpoly_nilRank_ne_zero _ _ _\n\n"}
{"name":"LieModule.isRegular_iff_natTrailingDegree_charpoly_eq_rank","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝¹¹ : CommRing R\ninst✝¹⁰ : LieRing L\ninst✝⁹ : LieAlgebra R L\ninst✝⁸ : Module.Finite R L\ninst✝⁷ : Module.Free R L\ninst✝⁶ : AddCommGroup M\ninst✝⁵ : Module R M\ninst✝⁴ : LieRingModule L M\ninst✝³ : LieModule R L M\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Free R M\nx : L\ninst✝ : Nontrivial R\n⊢ Iff (LieModule.IsRegular R M x) (Eq (LinearMap.charpoly ((LieModule.toEnd R L M) x)).natTrailingDegree (LieModule.rank R L M))","decl":"lemma isRegular_iff_natTrailingDegree_charpoly_eq_rank [Nontrivial R] :\n    IsRegular R M x ↔ (toEnd R L M x).charpoly.natTrailingDegree = rank R L M :=\n  LinearMap.isNilRegular_iff_natTrailingDegree_charpoly_eq_nilRank _ _\n"}
{"name":"LieModule.exists_isRegular_of_finrank_le_card","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝¹¹ : CommRing R\ninst✝¹⁰ : LieRing L\ninst✝⁹ : LieAlgebra R L\ninst✝⁸ : Module.Finite R L\ninst✝⁷ : Module.Free R L\ninst✝⁶ : AddCommGroup M\ninst✝⁵ : Module R M\ninst✝⁴ : LieRingModule L M\ninst✝³ : LieModule R L M\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Free R M\ninst✝ : IsDomain R\nh : LE.le (↑(Module.finrank R M)) (Cardinal.mk R)\n⊢ Exists fun x => LieModule.IsRegular R M x","decl":"open Cardinal Module MvPolynomial in\nlemma exists_isRegular_of_finrank_le_card (h : finrank R M ≤ #R) :\n    ∃ x : L, IsRegular R M x :=\n  LinearMap.exists_isNilRegular_of_finrank_le_card _ h\n\n"}
{"name":"LieModule.exists_isRegular","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝¹² : CommRing R\ninst✝¹¹ : LieRing L\ninst✝¹⁰ : LieAlgebra R L\ninst✝⁹ : Module.Finite R L\ninst✝⁸ : Module.Free R L\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : Module R M\ninst✝⁵ : LieRingModule L M\ninst✝⁴ : LieModule R L M\ninst✝³ : Module.Finite R M\ninst✝² : Module.Free R M\ninst✝¹ : IsDomain R\ninst✝ : Infinite R\n⊢ Exists fun x => LieModule.IsRegular R M x","decl":"lemma exists_isRegular [Infinite R] : ∃ x : L, IsRegular R M x :=\n  LinearMap.exists_isNilRegular _\n\n"}
{"name":"LieAlgebra.polyCharpoly_coeff_rank_ne_zero","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nι : Type u_5\ninst✝⁷ : CommRing R\ninst✝⁶ : LieRing L\ninst✝⁵ : LieAlgebra R L\ninst✝⁴ : Module.Finite R L\ninst✝³ : Module.Free R L\ninst✝² : Fintype ι\nb : Basis ι R L\ninst✝¹ : Nontrivial R\ninst✝ : DecidableEq ι\n⊢ Ne (((↑(LieAlgebra.ad R L)).polyCharpoly b).coeff (LieAlgebra.rank R L)) 0","decl":"lemma polyCharpoly_coeff_rank_ne_zero [Nontrivial R] [DecidableEq ι] :\n    (polyCharpoly (ad R L).toLinearMap b).coeff (rank R L) ≠ 0 :=\n  polyCharpoly_coeff_nilRank_ne_zero _ _\n\n"}
{"name":"LieAlgebra.rank_eq_natTrailingDegree","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nι : Type u_5\ninst✝⁷ : CommRing R\ninst✝⁶ : LieRing L\ninst✝⁵ : LieAlgebra R L\ninst✝⁴ : Module.Finite R L\ninst✝³ : Module.Free R L\ninst✝² : Fintype ι\nb : Basis ι R L\ninst✝¹ : Nontrivial R\ninst✝ : DecidableEq ι\n⊢ Eq (LieAlgebra.rank R L) ((↑(LieAlgebra.ad R L)).polyCharpoly b).natTrailingDegree","decl":"lemma rank_eq_natTrailingDegree [Nontrivial R] [DecidableEq ι] :\n    rank R L = (polyCharpoly (ad R L).toLinearMap b).natTrailingDegree := by\n  apply nilRank_eq_polyCharpoly_natTrailingDegree\n\n"}
{"name":"LieAlgebra.rank_le_card","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nι : Type u_5\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : Module.Finite R L\ninst✝² : Module.Free R L\ninst✝¹ : Fintype ι\nb : Basis ι R L\ninst✝ : Nontrivial R\n⊢ LE.le (LieAlgebra.rank R L) (Fintype.card ι)","decl":"include b in\nlemma rank_le_card [Nontrivial R] : rank R L ≤ Fintype.card ι :=\n  nilRank_le_card _ b\n\n"}
{"name":"LieAlgebra.rank_le_finrank","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : LieRing L\ninst✝³ : LieAlgebra R L\ninst✝² : Module.Finite R L\ninst✝¹ : Module.Free R L\ninst✝ : Nontrivial R\n⊢ LE.le (LieAlgebra.rank R L) (Module.finrank R L)","decl":"lemma rank_le_finrank [Nontrivial R] : rank R L ≤ finrank R L :=\n  nilRank_le_finrank _\n\n"}
{"name":"LieAlgebra.rank_le_natTrailingDegree_charpoly_ad","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : LieRing L\ninst✝³ : LieAlgebra R L\ninst✝² : Module.Finite R L\ninst✝¹ : Module.Free R L\nx : L\ninst✝ : Nontrivial R\n⊢ LE.le (LieAlgebra.rank R L) (LinearMap.charpoly ((LieAlgebra.ad R L) x)).natTrailingDegree","decl":"lemma rank_le_natTrailingDegree_charpoly_ad [Nontrivial R] :\n    rank R L ≤ (ad R L x).charpoly.natTrailingDegree :=\n  nilRank_le_natTrailingDegree_charpoly _ _\n\n"}
{"name":"LieAlgebra.isRegular_def","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁴ : CommRing R\ninst✝³ : LieRing L\ninst✝² : LieAlgebra R L\ninst✝¹ : Module.Finite R L\ninst✝ : Module.Free R L\nx : L\n⊢ Iff (LieAlgebra.IsRegular R x) (Ne ((LinearMap.charpoly ((LieAlgebra.ad R L) x)).coeff (LieAlgebra.rank R L)) 0)","decl":"lemma isRegular_def :\n    IsRegular R x ↔ (Polynomial.coeff (ad R L x).charpoly (rank R L) ≠ 0) := Iff.rfl\n\n"}
{"name":"LieAlgebra.isRegular_iff_coeff_polyCharpoly_rank_ne_zero","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\nι : Type u_5\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : Module.Finite R L\ninst✝² : Module.Free R L\ninst✝¹ : Fintype ι\nb : Basis ι R L\nx : L\ninst✝ : DecidableEq ι\n⊢ Iff (LieAlgebra.IsRegular R x) (Ne ((MvPolynomial.eval ⇑(b.repr x)) (((↑(LieAlgebra.ad R L)).polyCharpoly b).coeff (LieAlgebra.rank R L))) 0)","decl":"lemma isRegular_iff_coeff_polyCharpoly_rank_ne_zero [DecidableEq ι] :\n    IsRegular R x ↔\n    MvPolynomial.eval (b.repr x)\n      ((polyCharpoly (ad R L).toLinearMap b).coeff (rank R L)) ≠ 0 :=\n  LinearMap.isNilRegular_iff_coeff_polyCharpoly_nilRank_ne_zero _ _ _\n\n"}
{"name":"LieAlgebra.isRegular_iff_natTrailingDegree_charpoly_eq_rank","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : LieRing L\ninst✝³ : LieAlgebra R L\ninst✝² : Module.Finite R L\ninst✝¹ : Module.Free R L\nx : L\ninst✝ : Nontrivial R\n⊢ Iff (LieAlgebra.IsRegular R x) (Eq (LinearMap.charpoly ((LieAlgebra.ad R L) x)).natTrailingDegree (LieAlgebra.rank R L))","decl":"lemma isRegular_iff_natTrailingDegree_charpoly_eq_rank [Nontrivial R] :\n    IsRegular R x ↔ (ad R L x).charpoly.natTrailingDegree = rank R L :=\n  LinearMap.isNilRegular_iff_natTrailingDegree_charpoly_eq_nilRank _ _\n"}
{"name":"LieAlgebra.exists_isRegular_of_finrank_le_card","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : LieRing L\ninst✝³ : LieAlgebra R L\ninst✝² : Module.Finite R L\ninst✝¹ : Module.Free R L\ninst✝ : IsDomain R\nh : LE.le (↑(Module.finrank R L)) (Cardinal.mk R)\n⊢ Exists fun x => LieAlgebra.IsRegular R x","decl":"open Cardinal Module MvPolynomial in\nlemma exists_isRegular_of_finrank_le_card (h : finrank R L ≤ #R) :\n    ∃ x : L, IsRegular R x :=\n  LinearMap.exists_isNilRegular_of_finrank_le_card _ h\n\n"}
{"name":"LieAlgebra.exists_isRegular","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"R : Type u_1\nL : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : Module.Finite R L\ninst✝² : Module.Free R L\ninst✝¹ : IsDomain R\ninst✝ : Infinite R\n⊢ Exists fun x => LieAlgebra.IsRegular R x","decl":"lemma exists_isRegular [Infinite R] : ∃ x : L, IsRegular R x :=\n  LinearMap.exists_isNilRegular _\n\n"}
{"name":"LieAlgebra.finrank_engel","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"K : Type u_7\nL : Type u_8\ninst✝³ : Field K\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra K L\ninst✝ : Module.Finite K L\nx : L\n⊢ Eq (Module.finrank K (Subtype fun x_1 => Membership.mem (LieSubalgebra.engel K x) x_1)) (LinearMap.charpoly ((LieAlgebra.ad K L) x)).natTrailingDegree","decl":"lemma finrank_engel (x : L) :\n    finrank K (engel K x) = (ad K L x).charpoly.natTrailingDegree :=\n  (ad K L x).finrank_maxGenEigenspace\n\n"}
{"name":"LieAlgebra.rank_le_finrank_engel","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"K : Type u_7\nL : Type u_8\ninst✝³ : Field K\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra K L\ninst✝ : Module.Finite K L\nx : L\n⊢ LE.le (LieAlgebra.rank K L) (Module.finrank K (Subtype fun x_1 => Membership.mem (LieSubalgebra.engel K x) x_1))","decl":"lemma rank_le_finrank_engel (x : L) :\n    rank K L ≤ finrank K (engel K x) :=\n  (rank_le_natTrailingDegree_charpoly_ad K x).trans\n    (finrank_engel K x).ge\n\n"}
{"name":"LieAlgebra.isRegular_iff_finrank_engel_eq_rank","module":"Mathlib.Algebra.Lie.Rank","initialProofState":"K : Type u_7\nL : Type u_8\ninst✝³ : Field K\ninst✝² : LieRing L\ninst✝¹ : LieAlgebra K L\ninst✝ : Module.Finite K L\nx : L\n⊢ Iff (LieAlgebra.IsRegular K x) (Eq (Module.finrank K (Subtype fun x_1 => Membership.mem (LieSubalgebra.engel K x) x_1)) (LieAlgebra.rank K L))","decl":"lemma isRegular_iff_finrank_engel_eq_rank (x : L) :\n    IsRegular K x ↔ finrank K (engel K x) = rank K L := by\n  rw [isRegular_iff_natTrailingDegree_charpoly_eq_rank, finrank_engel]\n\n"}
