{"name":"antitone_Ici","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Antitone Set.Ici","decl":"theorem antitone_Ici : Antitone (Ici : α → Set α) := fun _ _ => Ici_subset_Ici.2\n\n"}
{"name":"monotone_Iic","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Monotone Set.Iic","decl":"theorem monotone_Iic : Monotone (Iic : α → Set α) := fun _ _ => Iic_subset_Iic.2\n\n"}
{"name":"antitone_Ioi","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Antitone Set.Ioi","decl":"theorem antitone_Ioi : Antitone (Ioi : α → Set α) := fun _ _ => Ioi_subset_Ioi\n\n"}
{"name":"monotone_Iio","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Monotone Set.Iio","decl":"theorem monotone_Iio : Monotone (Iio : α → Set α) := fun _ _ => Iio_subset_Iio\n\n"}
{"name":"Monotone.Ici","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Monotone f\n⊢ Antitone fun x => Set.Ici (f x)","decl":"protected theorem Monotone.Ici (hf : Monotone f) : Antitone fun x => Ici (f x) :=\n  antitone_Ici.comp_monotone hf\n\n"}
{"name":"MonotoneOn.Ici","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : MonotoneOn f s\n⊢ AntitoneOn (fun x => Set.Ici (f x)) s","decl":"protected theorem MonotoneOn.Ici (hf : MonotoneOn f s) : AntitoneOn (fun x => Ici (f x)) s :=\n  antitone_Ici.comp_monotoneOn hf\n\n"}
{"name":"Antitone.Ici","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Antitone f\n⊢ Monotone fun x => Set.Ici (f x)","decl":"protected theorem Antitone.Ici (hf : Antitone f) : Monotone fun x => Ici (f x) :=\n  antitone_Ici.comp hf\n\n"}
{"name":"AntitoneOn.Ici","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : AntitoneOn f s\n⊢ MonotoneOn (fun x => Set.Ici (f x)) s","decl":"protected theorem AntitoneOn.Ici (hf : AntitoneOn f s) : MonotoneOn (fun x => Ici (f x)) s :=\n  antitone_Ici.comp_antitoneOn hf\n\n"}
{"name":"Monotone.Iic","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Monotone f\n⊢ Monotone fun x => Set.Iic (f x)","decl":"protected theorem Monotone.Iic (hf : Monotone f) : Monotone fun x => Iic (f x) :=\n  monotone_Iic.comp hf\n\n"}
{"name":"MonotoneOn.Iic","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : MonotoneOn f s\n⊢ MonotoneOn (fun x => Set.Iic (f x)) s","decl":"protected theorem MonotoneOn.Iic (hf : MonotoneOn f s) : MonotoneOn (fun x => Iic (f x)) s :=\n  monotone_Iic.comp_monotoneOn hf\n\n"}
{"name":"Antitone.Iic","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Antitone f\n⊢ Antitone fun x => Set.Iic (f x)","decl":"protected theorem Antitone.Iic (hf : Antitone f) : Antitone fun x => Iic (f x) :=\n  monotone_Iic.comp_antitone hf\n\n"}
{"name":"AntitoneOn.Iic","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : AntitoneOn f s\n⊢ AntitoneOn (fun x => Set.Iic (f x)) s","decl":"protected theorem AntitoneOn.Iic (hf : AntitoneOn f s) : AntitoneOn (fun x => Iic (f x)) s :=\n  monotone_Iic.comp_antitoneOn hf\n\n"}
{"name":"Monotone.Ioi","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Monotone f\n⊢ Antitone fun x => Set.Ioi (f x)","decl":"protected theorem Monotone.Ioi (hf : Monotone f) : Antitone fun x => Ioi (f x) :=\n  antitone_Ioi.comp_monotone hf\n\n"}
{"name":"MonotoneOn.Ioi","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : MonotoneOn f s\n⊢ AntitoneOn (fun x => Set.Ioi (f x)) s","decl":"protected theorem MonotoneOn.Ioi (hf : MonotoneOn f s) : AntitoneOn (fun x => Ioi (f x)) s :=\n  antitone_Ioi.comp_monotoneOn hf\n\n"}
{"name":"Antitone.Ioi","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Antitone f\n⊢ Monotone fun x => Set.Ioi (f x)","decl":"protected theorem Antitone.Ioi (hf : Antitone f) : Monotone fun x => Ioi (f x) :=\n  antitone_Ioi.comp hf\n\n"}
{"name":"AntitoneOn.Ioi","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : AntitoneOn f s\n⊢ MonotoneOn (fun x => Set.Ioi (f x)) s","decl":"protected theorem AntitoneOn.Ioi (hf : AntitoneOn f s) : MonotoneOn (fun x => Ioi (f x)) s :=\n  antitone_Ioi.comp_antitoneOn hf\n\n"}
{"name":"Monotone.Iio","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Monotone f\n⊢ Monotone fun x => Set.Iio (f x)","decl":"protected theorem Monotone.Iio (hf : Monotone f) : Monotone fun x => Iio (f x) :=\n  monotone_Iio.comp hf\n\n"}
{"name":"MonotoneOn.Iio","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : MonotoneOn f s\n⊢ MonotoneOn (fun x => Set.Iio (f x)) s","decl":"protected theorem MonotoneOn.Iio (hf : MonotoneOn f s) : MonotoneOn (fun x => Iio (f x)) s :=\n  monotone_Iio.comp_monotoneOn hf\n\n"}
{"name":"Antitone.Iio","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\nhf : Antitone f\n⊢ Antitone fun x => Set.Iio (f x)","decl":"protected theorem Antitone.Iio (hf : Antitone f) : Antitone fun x => Iio (f x) :=\n  monotone_Iio.comp_antitone hf\n\n"}
{"name":"AntitoneOn.Iio","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : α → β\ns : Set α\nhf : AntitoneOn f s\n⊢ AntitoneOn (fun x => Set.Iio (f x)) s","decl":"protected theorem AntitoneOn.Iio (hf : AntitoneOn f s) : AntitoneOn (fun x => Iio (f x)) s :=\n  monotone_Iio.comp_antitoneOn hf\n\n"}
{"name":"Monotone.Icc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Monotone f\nhg : Antitone g\n⊢ Antitone fun x => Set.Icc (f x) (g x)","decl":"protected theorem Monotone.Icc (hf : Monotone f) (hg : Antitone g) :\n    Antitone fun x => Icc (f x) (g x) :=\n  hf.Ici.inter hg.Iic\n\n"}
{"name":"MonotoneOn.Icc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : MonotoneOn f s\nhg : AntitoneOn g s\n⊢ AntitoneOn (fun x => Set.Icc (f x) (g x)) s","decl":"protected theorem MonotoneOn.Icc (hf : MonotoneOn f s) (hg : AntitoneOn g s) :\n    AntitoneOn (fun x => Icc (f x) (g x)) s :=\n  hf.Ici.inter hg.Iic\n\n"}
{"name":"Antitone.Icc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Antitone f\nhg : Monotone g\n⊢ Monotone fun x => Set.Icc (f x) (g x)","decl":"protected theorem Antitone.Icc (hf : Antitone f) (hg : Monotone g) :\n    Monotone fun x => Icc (f x) (g x) :=\n  hf.Ici.inter hg.Iic\n\n"}
{"name":"AntitoneOn.Icc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : AntitoneOn f s\nhg : MonotoneOn g s\n⊢ MonotoneOn (fun x => Set.Icc (f x) (g x)) s","decl":"protected theorem AntitoneOn.Icc (hf : AntitoneOn f s) (hg : MonotoneOn g s) :\n    MonotoneOn (fun x => Icc (f x) (g x)) s :=\n  hf.Ici.inter hg.Iic\n\n"}
{"name":"Monotone.Ico","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Monotone f\nhg : Antitone g\n⊢ Antitone fun x => Set.Ico (f x) (g x)","decl":"protected theorem Monotone.Ico (hf : Monotone f) (hg : Antitone g) :\n    Antitone fun x => Ico (f x) (g x) :=\n  hf.Ici.inter hg.Iio\n\n"}
{"name":"MonotoneOn.Ico","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : MonotoneOn f s\nhg : AntitoneOn g s\n⊢ AntitoneOn (fun x => Set.Ico (f x) (g x)) s","decl":"protected theorem MonotoneOn.Ico (hf : MonotoneOn f s) (hg : AntitoneOn g s) :\n    AntitoneOn (fun x => Ico (f x) (g x)) s :=\n  hf.Ici.inter hg.Iio\n\n"}
{"name":"Antitone.Ico","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Antitone f\nhg : Monotone g\n⊢ Monotone fun x => Set.Ico (f x) (g x)","decl":"protected theorem Antitone.Ico (hf : Antitone f) (hg : Monotone g) :\n    Monotone fun x => Ico (f x) (g x) :=\n  hf.Ici.inter hg.Iio\n\n"}
{"name":"AntitoneOn.Ico","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : AntitoneOn f s\nhg : MonotoneOn g s\n⊢ MonotoneOn (fun x => Set.Ico (f x) (g x)) s","decl":"protected theorem AntitoneOn.Ico (hf : AntitoneOn f s) (hg : MonotoneOn g s) :\n    MonotoneOn (fun x => Ico (f x) (g x)) s :=\n  hf.Ici.inter hg.Iio\n\n"}
{"name":"Monotone.Ioc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Monotone f\nhg : Antitone g\n⊢ Antitone fun x => Set.Ioc (f x) (g x)","decl":"protected theorem Monotone.Ioc (hf : Monotone f) (hg : Antitone g) :\n    Antitone fun x => Ioc (f x) (g x) :=\n  hf.Ioi.inter hg.Iic\n\n"}
{"name":"MonotoneOn.Ioc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : MonotoneOn f s\nhg : AntitoneOn g s\n⊢ AntitoneOn (fun x => Set.Ioc (f x) (g x)) s","decl":"protected theorem MonotoneOn.Ioc (hf : MonotoneOn f s) (hg : AntitoneOn g s) :\n    AntitoneOn (fun x => Ioc (f x) (g x)) s :=\n  hf.Ioi.inter hg.Iic\n\n"}
{"name":"Antitone.Ioc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Antitone f\nhg : Monotone g\n⊢ Monotone fun x => Set.Ioc (f x) (g x)","decl":"protected theorem Antitone.Ioc (hf : Antitone f) (hg : Monotone g) :\n    Monotone fun x => Ioc (f x) (g x) :=\n  hf.Ioi.inter hg.Iic\n\n"}
{"name":"AntitoneOn.Ioc","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : AntitoneOn f s\nhg : MonotoneOn g s\n⊢ MonotoneOn (fun x => Set.Ioc (f x) (g x)) s","decl":"protected theorem AntitoneOn.Ioc (hf : AntitoneOn f s) (hg : MonotoneOn g s) :\n    MonotoneOn (fun x => Ioc (f x) (g x)) s :=\n  hf.Ioi.inter hg.Iic\n\n"}
{"name":"Monotone.Ioo","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Monotone f\nhg : Antitone g\n⊢ Antitone fun x => Set.Ioo (f x) (g x)","decl":"protected theorem Monotone.Ioo (hf : Monotone f) (hg : Antitone g) :\n    Antitone fun x => Ioo (f x) (g x) :=\n  hf.Ioi.inter hg.Iio\n\n"}
{"name":"MonotoneOn.Ioo","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : MonotoneOn f s\nhg : AntitoneOn g s\n⊢ AntitoneOn (fun x => Set.Ioo (f x) (g x)) s","decl":"protected theorem MonotoneOn.Ioo (hf : MonotoneOn f s) (hg : AntitoneOn g s) :\n    AntitoneOn (fun x => Ioo (f x) (g x)) s :=\n  hf.Ioi.inter hg.Iio\n\n"}
{"name":"Antitone.Ioo","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\nhf : Antitone f\nhg : Monotone g\n⊢ Monotone fun x => Set.Ioo (f x) (g x)","decl":"protected theorem Antitone.Ioo (hf : Antitone f) (hg : Monotone g) :\n    Monotone fun x => Ioo (f x) (g x) :=\n  hf.Ioi.inter hg.Iio\n\n"}
{"name":"AntitoneOn.Ioo","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf g : α → β\ns : Set α\nhf : AntitoneOn f s\nhg : MonotoneOn g s\n⊢ MonotoneOn (fun x => Set.Ioo (f x) (g x)) s","decl":"protected theorem AntitoneOn.Ioo (hf : AntitoneOn f s) (hg : MonotoneOn g s) :\n    MonotoneOn (fun x => Ioo (f x) (g x)) s :=\n  hf.Ioi.inter hg.Iio\n\n"}
{"name":"iUnion_Ioo_of_mono_of_isGLB_of_isLUB","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : SemilatticeSup α\ninst✝ : LinearOrder β\nf g : α → β\na b : β\nhf : Antitone f\nhg : Monotone g\nha : IsGLB (Set.range f) a\nhb : IsLUB (Set.range g) b\n⊢ Eq (Set.iUnion fun x => Set.Ioo (f x) (g x)) (Set.Ioo a b)","decl":"theorem iUnion_Ioo_of_mono_of_isGLB_of_isLUB (hf : Antitone f) (hg : Monotone g)\n    (ha : IsGLB (range f) a) (hb : IsLUB (range g) b) : ⋃ x, Ioo (f x) (g x) = Ioo a b :=\n  calc\n    ⋃ x, Ioo (f x) (g x) = (⋃ x, Ioi (f x)) ∩ ⋃ x, Iio (g x) :=\n      iUnion_inter_of_monotone hf.Ioi hg.Iio\n    _ = Ioi a ∩ Iio b := congr_arg₂ (· ∩ ·) ha.iUnion_Ioi_eq hb.iUnion_Iio_eq\n\n"}
{"name":"strictMonoOn_Iic_of_lt_succ","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : PartialOrder α\ninst✝² : Preorder β\nψ : α → β\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\nn : α\nhψ : ∀ (m : α), LT.lt m n → LT.lt (ψ m) (ψ (Order.succ m))\n⊢ StrictMonoOn ψ (Set.Iic n)","decl":"/-- A function `ψ` on a `SuccOrder` is strictly monotone before some `n` if for all `m` such that\n`m < n`, we have `ψ m < ψ (succ m)`. -/\ntheorem strictMonoOn_Iic_of_lt_succ [SuccOrder α] [IsSuccArchimedean α] {n : α}\n    (hψ : ∀ m, m < n → ψ m < ψ (succ m)) : StrictMonoOn ψ (Set.Iic n) :=\n  strictMonoOn_of_lt_succ ordConnected_Iic fun _a ha' _ ha ↦\n    hψ _ <| (succ_le_iff_of_not_isMax ha').1 ha\n\n"}
{"name":"strictAntiOn_Iic_of_succ_lt","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : PartialOrder α\ninst✝² : Preorder β\nψ : α → β\ninst✝¹ : SuccOrder α\ninst✝ : IsSuccArchimedean α\nn : α\nhψ : ∀ (m : α), LT.lt m n → LT.lt (ψ (Order.succ m)) (ψ m)\n⊢ StrictAntiOn ψ (Set.Iic n)","decl":"theorem strictAntiOn_Iic_of_succ_lt [SuccOrder α] [IsSuccArchimedean α] {n : α}\n    (hψ : ∀ m, m < n → ψ (succ m) < ψ m) : StrictAntiOn ψ (Set.Iic n) := fun i hi j hj hij =>\n  @strictMonoOn_Iic_of_lt_succ α βᵒᵈ _ _ ψ _ _ n hψ i hi j hj hij\n\n"}
{"name":"strictMonoOn_Ici_of_pred_lt","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : PartialOrder α\ninst✝² : Preorder β\nψ : α → β\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\nn : α\nhψ : ∀ (m : α), LT.lt n m → LT.lt (ψ (Order.pred m)) (ψ m)\n⊢ StrictMonoOn ψ (Set.Ici n)","decl":"theorem strictMonoOn_Ici_of_pred_lt [PredOrder α] [IsPredArchimedean α] {n : α}\n    (hψ : ∀ m, n < m → ψ (pred m) < ψ m) : StrictMonoOn ψ (Set.Ici n) := fun i hi j hj hij =>\n  @strictMonoOn_Iic_of_lt_succ αᵒᵈ βᵒᵈ _ _ ψ _ _ n hψ j hj i hi hij\n\n"}
{"name":"strictAntiOn_Ici_of_lt_pred","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : PartialOrder α\ninst✝² : Preorder β\nψ : α → β\ninst✝¹ : PredOrder α\ninst✝ : IsPredArchimedean α\nn : α\nhψ : ∀ (m : α), LT.lt n m → LT.lt (ψ m) (ψ (Order.pred m))\n⊢ StrictAntiOn ψ (Set.Ici n)","decl":"theorem strictAntiOn_Ici_of_lt_pred [PredOrder α] [IsPredArchimedean α] {n : α}\n    (hψ : ∀ m, n < m → ψ m < ψ (pred m)) : StrictAntiOn ψ (Set.Ici n) := fun i hi j hj hij =>\n  @strictAntiOn_Iic_of_succ_lt αᵒᵈ βᵒᵈ _ _ ψ _ _ n hψ j hj i hi hij\n\n"}
{"name":"StrictMonoOn.Iic_id_le","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : SuccOrder α\ninst✝¹ : IsSuccArchimedean α\ninst✝ : OrderBot α\nn : α\nφ : α → α\nhφ : StrictMonoOn φ (Set.Iic n)\nm : α\na✝ : LE.le m n\n⊢ LE.le m (φ m)","decl":"theorem StrictMonoOn.Iic_id_le [SuccOrder α] [IsSuccArchimedean α] [OrderBot α] {n : α} {φ : α → α}\n    (hφ : StrictMonoOn φ (Set.Iic n)) : ∀ m ≤ n, m ≤ φ m := by\n  revert hφ\n  refine\n    Succ.rec_bot (fun n => StrictMonoOn φ (Set.Iic n) → ∀ m ≤ n, m ≤ φ m)\n      (fun _ _ hm => hm.trans bot_le) ?_ _\n  rintro k ih hφ m hm\n  by_cases hk : IsMax k\n  · rw [succ_eq_iff_isMax.2 hk] at hm\n    exact ih (hφ.mono <| Iic_subset_Iic.2 (le_succ _)) _ hm\n  obtain rfl | h := le_succ_iff_eq_or_le.1 hm\n  · specialize ih (StrictMonoOn.mono hφ fun x hx => le_trans hx (le_succ _)) k le_rfl\n    refine le_trans (succ_mono ih) (succ_le_of_lt (hφ (le_succ _) le_rfl ?_))\n    rw [lt_succ_iff_eq_or_lt_of_not_isMax hk]\n    exact Or.inl rfl\n  · exact ih (StrictMonoOn.mono hφ fun x hx => le_trans hx (le_succ _)) _ h\n\n"}
{"name":"StrictMonoOn.Ici_le_id","module":"Mathlib.Order.Interval.Set.Monotone","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : PredOrder α\ninst✝¹ : IsPredArchimedean α\ninst✝ : OrderTop α\nn : α\nφ : α → α\nhφ : StrictMonoOn φ (Set.Ici n)\nm : α\na✝ : LE.le n m\n⊢ LE.le (φ m) m","decl":"theorem StrictMonoOn.Ici_le_id [PredOrder α] [IsPredArchimedean α] [OrderTop α] {n : α} {φ : α → α}\n    (hφ : StrictMonoOn φ (Set.Ici n)) : ∀ m, n ≤ m → φ m ≤ m :=\n  StrictMonoOn.Iic_id_le (α := αᵒᵈ) fun _ hi _ hj hij => hφ hj hi hij\n\n"}
