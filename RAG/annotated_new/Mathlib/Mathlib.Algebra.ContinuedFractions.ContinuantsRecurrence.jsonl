{"name":"GenContFract.contsAux_recurrence","module":"Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\ngp ppred pred : GenContFract.Pair K\nnth_s_eq : Eq (g.s.get? n) (Option.some gp)\nnth_contsAux_eq : Eq (g.contsAux n) ppred\nsucc_nth_contsAux_eq : Eq (g.contsAux (HAdd.hAdd n 1)) pred\n⊢ Eq (g.contsAux (HAdd.hAdd n 2)) { a := HAdd.hAdd (HMul.hMul gp.b pred.a) (HMul.hMul gp.a ppred.a), b := HAdd.hAdd (HMul.hMul gp.b pred.b) (HMul.hMul gp.a ppred.b) }","decl":"theorem contsAux_recurrence {gp ppred pred : Pair K} (nth_s_eq : g.s.get? n = some gp)\n    (nth_contsAux_eq : g.contsAux n = ppred)\n    (succ_nth_contsAux_eq : g.contsAux (n + 1) = pred) :\n    g.contsAux (n + 2) = ⟨gp.b * pred.a + gp.a * ppred.a, gp.b * pred.b + gp.a * ppred.b⟩ := by\n  simp [*, contsAux, nextConts, nextDen, nextNum]\n\n"}
{"name":"GenContFract.conts_recurrenceAux","module":"Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\ngp ppred pred : GenContFract.Pair K\nnth_s_eq : Eq (g.s.get? n) (Option.some gp)\nnth_contsAux_eq : Eq (g.contsAux n) ppred\nsucc_nth_contsAux_eq : Eq (g.contsAux (HAdd.hAdd n 1)) pred\n⊢ Eq (g.conts (HAdd.hAdd n 1)) { a := HAdd.hAdd (HMul.hMul gp.b pred.a) (HMul.hMul gp.a ppred.a), b := HAdd.hAdd (HMul.hMul gp.b pred.b) (HMul.hMul gp.a ppred.b) }","decl":"theorem conts_recurrenceAux {gp ppred pred : Pair K} (nth_s_eq : g.s.get? n = some gp)\n    (nth_contsAux_eq : g.contsAux n = ppred)\n    (succ_nth_contsAux_eq : g.contsAux (n + 1) = pred) :\n    g.conts (n + 1) = ⟨gp.b * pred.a + gp.a * ppred.a, gp.b * pred.b + gp.a * ppred.b⟩ := by\n  simp [nth_cont_eq_succ_nth_contAux,\n    contsAux_recurrence nth_s_eq nth_contsAux_eq succ_nth_contsAux_eq]\n\n"}
{"name":"GenContFract.conts_recurrence","module":"Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\ngp ppred pred : GenContFract.Pair K\nsucc_nth_s_eq : Eq (g.s.get? (HAdd.hAdd n 1)) (Option.some gp)\nnth_conts_eq : Eq (g.conts n) ppred\nsucc_nth_conts_eq : Eq (g.conts (HAdd.hAdd n 1)) pred\n⊢ Eq (g.conts (HAdd.hAdd n 2)) { a := HAdd.hAdd (HMul.hMul gp.b pred.a) (HMul.hMul gp.a ppred.a), b := HAdd.hAdd (HMul.hMul gp.b pred.b) (HMul.hMul gp.a ppred.b) }","decl":"/-- Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂` and `Bₙ = bₙ * Bₙ₋₁ + aₙ * Bₙ₋₂`. -/\ntheorem conts_recurrence {gp ppred pred : Pair K} (succ_nth_s_eq : g.s.get? (n + 1) = some gp)\n    (nth_conts_eq : g.conts n = ppred) (succ_nth_conts_eq : g.conts (n + 1) = pred) :\n    g.conts (n + 2) = ⟨gp.b * pred.a + gp.a * ppred.a, gp.b * pred.b + gp.a * ppred.b⟩ := by\n  rw [nth_cont_eq_succ_nth_contAux] at nth_conts_eq succ_nth_conts_eq\n  exact conts_recurrenceAux succ_nth_s_eq nth_conts_eq succ_nth_conts_eq\n\n"}
{"name":"GenContFract.nums_recurrence","module":"Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\ngp : GenContFract.Pair K\nppredA predA : K\nsucc_nth_s_eq : Eq (g.s.get? (HAdd.hAdd n 1)) (Option.some gp)\nnth_num_eq : Eq (g.nums n) ppredA\nsucc_nth_num_eq : Eq (g.nums (HAdd.hAdd n 1)) predA\n⊢ Eq (g.nums (HAdd.hAdd n 2)) (HAdd.hAdd (HMul.hMul gp.b predA) (HMul.hMul gp.a ppredA))","decl":"/-- Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂`. -/\ntheorem nums_recurrence {gp : Pair K} {ppredA predA : K}\n    (succ_nth_s_eq : g.s.get? (n + 1) = some gp) (nth_num_eq : g.nums n = ppredA)\n    (succ_nth_num_eq : g.nums (n + 1) = predA) :\n    g.nums (n + 2) = gp.b * predA + gp.a * ppredA := by\n  obtain ⟨ppredConts, nth_conts_eq, ⟨rfl⟩⟩ : ∃ conts, g.conts n = conts ∧ conts.a = ppredA :=\n    exists_conts_a_of_num nth_num_eq\n  obtain ⟨predConts, succ_nth_conts_eq, ⟨rfl⟩⟩ :\n      ∃ conts, g.conts (n + 1) = conts ∧ conts.a = predA :=\n    exists_conts_a_of_num succ_nth_num_eq\n  rw [num_eq_conts_a, conts_recurrence succ_nth_s_eq nth_conts_eq succ_nth_conts_eq]\n\n"}
{"name":"GenContFract.dens_recurrence","module":"Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\ngp : GenContFract.Pair K\nppredB predB : K\nsucc_nth_s_eq : Eq (g.s.get? (HAdd.hAdd n 1)) (Option.some gp)\nnth_den_eq : Eq (g.dens n) ppredB\nsucc_nth_den_eq : Eq (g.dens (HAdd.hAdd n 1)) predB\n⊢ Eq (g.dens (HAdd.hAdd n 2)) (HAdd.hAdd (HMul.hMul gp.b predB) (HMul.hMul gp.a ppredB))","decl":"/-- Shows that `Bₙ = bₙ * Bₙ₋₁ + aₙ * Bₙ₋₂`. -/\ntheorem dens_recurrence {gp : Pair K} {ppredB predB : K}\n    (succ_nth_s_eq : g.s.get? (n + 1) = some gp) (nth_den_eq : g.dens n = ppredB)\n    (succ_nth_den_eq : g.dens (n + 1) = predB) :\n    g.dens (n + 2) = gp.b * predB + gp.a * ppredB := by\n  obtain ⟨ppredConts, nth_conts_eq, ⟨rfl⟩⟩ : ∃ conts, g.conts n = conts ∧ conts.b = ppredB :=\n    exists_conts_b_of_den nth_den_eq\n  obtain ⟨predConts, succ_nth_conts_eq, ⟨rfl⟩⟩ :\n      ∃ conts, g.conts (n + 1) = conts ∧ conts.b = predB :=\n    exists_conts_b_of_den succ_nth_den_eq\n  rw [den_eq_conts_b, conts_recurrence succ_nth_s_eq nth_conts_eq succ_nth_conts_eq]\n\n"}
