{"name":"CompactlyGenerated.mk.sizeOf_spec","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"toTop : TopCat\nis_compactly_generated : UCompactlyGeneratedSpace ↑toTop\n⊢ Eq (SizeOf.sizeOf (CompactlyGenerated.mk toTop)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toTop)) (SizeOf.sizeOf is_compactly_generated))","decl":"/-- `CompactlyGenerated.{u, w}` is the type of `u`-compactly generated `w`-small topological spaces.\nThis should always be used with explicit universe parameters. -/\nstructure CompactlyGenerated where\n  /-- The underlying topological space of an object of `CompactlyGenerated`. -/\n  toTop : TopCat.{w}\n  /-- The underlying topological space is compactly generated. -/\n  [is_compactly_generated : UCompactlyGeneratedSpace.{u} toTop]\n\n"}
{"name":"CompactlyGenerated.mk.inj","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"toTop✝ : TopCat\nis_compactly_generated✝ : UCompactlyGeneratedSpace ↑toTop✝\ntoTop : TopCat\nis_compactly_generated : UCompactlyGeneratedSpace ↑toTop\nx✝ : Eq (CompactlyGenerated.mk toTop✝) (CompactlyGenerated.mk toTop)\n⊢ Eq toTop✝ toTop","decl":"/-- `CompactlyGenerated.{u, w}` is the type of `u`-compactly generated `w`-small topological spaces.\nThis should always be used with explicit universe parameters. -/\nstructure CompactlyGenerated where\n  /-- The underlying topological space of an object of `CompactlyGenerated`. -/\n  toTop : TopCat.{w}\n  /-- The underlying topological space is compactly generated. -/\n  [is_compactly_generated : UCompactlyGeneratedSpace.{u} toTop]\n\n"}
{"name":"CompactlyGenerated.is_compactly_generated","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"self : CompactlyGenerated\n⊢ UCompactlyGeneratedSpace ↑self.toTop","decl":"/-- `CompactlyGenerated.{u, w}` is the type of `u`-compactly generated `w`-small topological spaces.\nThis should always be used with explicit universe parameters. -/\nstructure CompactlyGenerated where\n  /-- The underlying topological space of an object of `CompactlyGenerated`. -/\n  toTop : TopCat.{w}\n  /-- The underlying topological space is compactly generated. -/\n  [is_compactly_generated : UCompactlyGeneratedSpace.{u} toTop]\n\n"}
{"name":"CompactlyGenerated.mk.injEq","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"toTop✝ : TopCat\nis_compactly_generated✝ : UCompactlyGeneratedSpace ↑toTop✝\ntoTop : TopCat\nis_compactly_generated : UCompactlyGeneratedSpace ↑toTop\n⊢ Eq (Eq (CompactlyGenerated.mk toTop✝) (CompactlyGenerated.mk toTop)) (Eq toTop✝ toTop)","decl":"/-- `CompactlyGenerated.{u, w}` is the type of `u`-compactly generated `w`-small topological spaces.\nThis should always be used with explicit universe parameters. -/\nstructure CompactlyGenerated where\n  /-- The underlying topological space of an object of `CompactlyGenerated`. -/\n  toTop : TopCat.{w}\n  /-- The underlying topological space is compactly generated. -/\n  [is_compactly_generated : UCompactlyGeneratedSpace.{u} toTop]\n\n"}
{"name":"CompactlyGenerated.compactlyGeneratedToTop_obj","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"self : CompactlyGenerated\n⊢ Eq (CompactlyGenerated.compactlyGeneratedToTop.obj self) self.toTop","decl":"/-- The fully faithful embedding of `CompactlyGenerated` in `TopCat`. -/\n@[simps!]\ndef compactlyGeneratedToTop : CompactlyGenerated.{u, w} ⥤ TopCat.{w} :=\n  inducedFunctor _\n\n"}
{"name":"CompactlyGenerated.compactlyGeneratedToTop_map","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X✝ Y✝ : CategoryTheory.InducedCategory TopCat CompactlyGenerated.toTop\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (CompactlyGenerated.compactlyGeneratedToTop.map f) f","decl":"/-- The fully faithful embedding of `CompactlyGenerated` in `TopCat`. -/\n@[simps!]\ndef compactlyGeneratedToTop : CompactlyGenerated.{u, w} ⥤ TopCat.{w} :=\n  inducedFunctor _\n\n"}
{"name":"CompactlyGenerated.instFullTopCatCompactlyGeneratedToTop","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"⊢ CompactlyGenerated.compactlyGeneratedToTop.Full","decl":"instance : compactlyGeneratedToTop.{u, w}.Full := fullyFaithfulCompactlyGeneratedToTop.full\n\n"}
{"name":"CompactlyGenerated.instFaithfulTopCatCompactlyGeneratedToTop","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"⊢ CompactlyGenerated.compactlyGeneratedToTop.Faithful","decl":"instance : compactlyGeneratedToTop.{u, w}.Faithful := fullyFaithfulCompactlyGeneratedToTop.faithful\n\n"}
{"name":"CompactlyGenerated.isoOfHomeo_inv","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X Y : CompactlyGenerated\nf : Homeomorph ↑X.toTop ↑Y.toTop\n⊢ Eq (CompactlyGenerated.isoOfHomeo f).inv { toFun := ⇑f.symm, continuous_toFun := ⋯ }","decl":"/-- Construct an isomorphism from a homeomorphism. -/\n@[simps hom inv]\ndef isoOfHomeo {X Y : CompactlyGenerated.{u, w}} (f : X ≃ₜ Y) : X ≅ Y where\n  hom := ⟨f, f.continuous⟩\n  inv := ⟨f.symm, f.symm.continuous⟩\n  hom_inv_id := by\n    ext x\n    exact f.symm_apply_apply x\n  inv_hom_id := by\n    ext x\n    exact f.apply_symm_apply x\n\n"}
{"name":"CompactlyGenerated.isoOfHomeo_hom","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X Y : CompactlyGenerated\nf : Homeomorph ↑X.toTop ↑Y.toTop\n⊢ Eq (CompactlyGenerated.isoOfHomeo f).hom { toFun := ⇑f, continuous_toFun := ⋯ }","decl":"/-- Construct an isomorphism from a homeomorphism. -/\n@[simps hom inv]\ndef isoOfHomeo {X Y : CompactlyGenerated.{u, w}} (f : X ≃ₜ Y) : X ≅ Y where\n  hom := ⟨f, f.continuous⟩\n  inv := ⟨f.symm, f.symm.continuous⟩\n  hom_inv_id := by\n    ext x\n    exact f.symm_apply_apply x\n  inv_hom_id := by\n    ext x\n    exact f.apply_symm_apply x\n\n"}
{"name":"CompactlyGenerated.homeoOfIso_apply","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X Y : CompactlyGenerated\nf : CategoryTheory.Iso X Y\na : (CategoryTheory.forget CompactlyGenerated).obj X\n⊢ Eq ((CompactlyGenerated.homeoOfIso f) a) (f.hom a)","decl":"/-- Construct a homeomorphism from an isomorphism. -/\n@[simps]\ndef homeoOfIso {X Y : CompactlyGenerated.{u, w}} (f : X ≅ Y) : X ≃ₜ Y where\n  toFun := f.hom\n  invFun := f.inv\n  left_inv x := by simp\n  right_inv x := by simp\n  continuous_toFun := f.hom.continuous\n  continuous_invFun := f.inv.continuous\n\n"}
{"name":"CompactlyGenerated.homeoOfIso_symm_apply","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X Y : CompactlyGenerated\nf : CategoryTheory.Iso X Y\na : (CategoryTheory.forget CompactlyGenerated).obj Y\n⊢ Eq ((CompactlyGenerated.homeoOfIso f).symm a) (f.inv a)","decl":"/-- Construct a homeomorphism from an isomorphism. -/\n@[simps]\ndef homeoOfIso {X Y : CompactlyGenerated.{u, w}} (f : X ≅ Y) : X ≃ₜ Y where\n  toFun := f.hom\n  invFun := f.inv\n  left_inv x := by simp\n  right_inv x := by simp\n  continuous_toFun := f.hom.continuous\n  continuous_invFun := f.inv.continuous\n\n"}
{"name":"CompactlyGenerated.isoEquivHomeo_symm_apply","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X Y : CompactlyGenerated\nf : Homeomorph ↑X.toTop ↑Y.toTop\n⊢ Eq (CompactlyGenerated.isoEquivHomeo.symm f) (CompactlyGenerated.isoOfHomeo f)","decl":"/-- The equivalence between isomorphisms in `CompactlyGenerated` and homeomorphisms\nof topological spaces. -/\n@[simps]\ndef isoEquivHomeo {X Y : CompactlyGenerated.{u, w}} : (X ≅ Y) ≃ (X ≃ₜ Y) where\n  toFun := homeoOfIso\n  invFun := isoOfHomeo\n  left_inv f := by\n    ext\n    rfl\n  right_inv f := by\n    ext\n    rfl\n\n"}
{"name":"CompactlyGenerated.isoEquivHomeo_apply","module":"Mathlib.Topology.Category.CompactlyGenerated","initialProofState":"X Y : CompactlyGenerated\nf : CategoryTheory.Iso X Y\n⊢ Eq (CompactlyGenerated.isoEquivHomeo f) (CompactlyGenerated.homeoOfIso f)","decl":"/-- The equivalence between isomorphisms in `CompactlyGenerated` and homeomorphisms\nof topological spaces. -/\n@[simps]\ndef isoEquivHomeo {X Y : CompactlyGenerated.{u, w}} : (X ≅ Y) ≃ (X ≃ₜ Y) where\n  toFun := homeoOfIso\n  invFun := isoOfHomeo\n  left_inv f := by\n    ext\n    rfl\n  right_inv f := by\n    ext\n    rfl\n\n"}
