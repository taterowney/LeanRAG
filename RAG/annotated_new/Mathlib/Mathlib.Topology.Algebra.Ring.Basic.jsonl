{"name":"TopologicalSemiring.toContinuousAdd","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNonAssocSemiring α\nself : TopologicalSemiring α\n⊢ ContinuousAdd α","decl":"/-- a topological semiring is a semiring `R` where addition and multiplication are continuous.\nWe allow for non-unital and non-associative semirings as well.\n\nThe `TopologicalSemiring` class should *only* be instantiated in the presence of a\n`NonUnitalNonAssocSemiring` instance; if there is an instance of `NonUnitalNonAssocRing`,\nthen `TopologicalRing` should be used. Note: in the presence of `NonAssocRing`, these classes are\nmathematically equivalent (see `TopologicalSemiring.continuousNeg_of_mul` or\n`TopologicalSemiring.toTopologicalRing`). -/\nclass TopologicalSemiring [TopologicalSpace α] [NonUnitalNonAssocSemiring α] extends\n  ContinuousAdd α, ContinuousMul α : Prop\n\n"}
{"name":"TopologicalSemiring.toContinuousMul","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNonAssocSemiring α\nself : TopologicalSemiring α\n⊢ ContinuousMul α","decl":"/-- a topological semiring is a semiring `R` where addition and multiplication are continuous.\nWe allow for non-unital and non-associative semirings as well.\n\nThe `TopologicalSemiring` class should *only* be instantiated in the presence of a\n`NonUnitalNonAssocSemiring` instance; if there is an instance of `NonUnitalNonAssocRing`,\nthen `TopologicalRing` should be used. Note: in the presence of `NonAssocRing`, these classes are\nmathematically equivalent (see `TopologicalSemiring.continuousNeg_of_mul` or\n`TopologicalSemiring.toTopologicalRing`). -/\nclass TopologicalSemiring [TopologicalSpace α] [NonUnitalNonAssocSemiring α] extends\n  ContinuousAdd α, ContinuousMul α : Prop\n\n"}
{"name":"TopologicalRing.toTopologicalSemiring","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNonAssocRing α\nself : TopologicalRing α\n⊢ TopologicalSemiring α","decl":"/-- A topological ring is a ring `R` where addition, multiplication and negation are continuous.\n\nIf `R` is a (unital) ring, then continuity of negation can be derived from continuity of\nmultiplication as it is multiplication with `-1`. (See\n`TopologicalSemiring.continuousNeg_of_mul` and\n`topological_semiring.to_topological_add_group`) -/\nclass TopologicalRing [TopologicalSpace α] [NonUnitalNonAssocRing α] extends TopologicalSemiring α,\n  ContinuousNeg α : Prop\n\n"}
{"name":"TopologicalRing.toContinuousNeg","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : NonUnitalNonAssocRing α\nself : TopologicalRing α\n⊢ ContinuousNeg α","decl":"/-- A topological ring is a ring `R` where addition, multiplication and negation are continuous.\n\nIf `R` is a (unital) ring, then continuity of negation can be derived from continuity of\nmultiplication as it is multiplication with `-1`. (See\n`TopologicalSemiring.continuousNeg_of_mul` and\n`topological_semiring.to_topological_add_group`) -/\nclass TopologicalRing [TopologicalSpace α] [NonUnitalNonAssocRing α] extends TopologicalSemiring α,\n  ContinuousNeg α : Prop\n\n"}
{"name":"TopologicalSemiring.continuousNeg_of_mul","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonAssocRing α\ninst✝ : ContinuousMul α\n⊢ ContinuousNeg α","decl":"/-- If `R` is a ring with a continuous multiplication, then negation is continuous as well since it\nis just multiplication with `-1`. -/\ntheorem TopologicalSemiring.continuousNeg_of_mul [TopologicalSpace α] [NonAssocRing α]\n    [ContinuousMul α] : ContinuousNeg α where\n  continuous_neg := by\n    simpa using (continuous_const.mul continuous_id : Continuous fun x : α => -1 * x)\n\n"}
{"name":"TopologicalSemiring.toTopologicalRing","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : NonAssocRing α\nx✝ : TopologicalSemiring α\n⊢ TopologicalRing α","decl":"/-- If `R` is a ring which is a topological semiring, then it is automatically a topological\nring. This exists so that one can place a topological ring structure on `R` without explicitly\nproving `continuous_neg`. -/\ntheorem TopologicalSemiring.toTopologicalRing [TopologicalSpace α] [NonAssocRing α]\n    (_ : TopologicalSemiring α) : TopologicalRing α where\n  toContinuousNeg := TopologicalSemiring.continuousNeg_of_mul\n\n-- See note [lower instance priority]\n"}
{"name":"TopologicalRing.to_topologicalAddGroup","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocRing α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalRing α\n⊢ TopologicalAddGroup α","decl":"instance (priority := 100) TopologicalRing.to_topologicalAddGroup [NonUnitalNonAssocRing α]\n    [TopologicalSpace α] [TopologicalRing α] : TopologicalAddGroup α := ⟨⟩\n\n"}
{"name":"DiscreteTopology.topologicalSemiring","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : DiscreteTopology α\n⊢ TopologicalSemiring α","decl":"instance (priority := 50) DiscreteTopology.topologicalSemiring [TopologicalSpace α]\n    [NonUnitalNonAssocSemiring α] [DiscreteTopology α] : TopologicalSemiring α := ⟨⟩\n\n"}
{"name":"DiscreteTopology.topologicalRing","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNonAssocRing α\ninst✝ : DiscreteTopology α\n⊢ TopologicalRing α","decl":"instance (priority := 50) DiscreteTopology.topologicalRing [TopologicalSpace α]\n    [NonUnitalNonAssocRing α] [DiscreteTopology α] : TopologicalRing α := ⟨⟩\n\n"}
{"name":"NonUnitalSubsemiring.instTopologicalSemiring","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalSemiring α\ninst✝ : TopologicalSemiring α\nS : NonUnitalSubsemiring α\n⊢ TopologicalSemiring (Subtype fun x => Membership.mem S x)","decl":"instance instTopologicalSemiring (S : NonUnitalSubsemiring α) : TopologicalSemiring S :=\n  { S.toSubsemigroup.continuousMul, S.toAddSubmonoid.continuousAdd with }\n\n"}
{"name":"NonUnitalSubsemiring.topologicalClosure_coe","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalSemiring α\ninst✝ : TopologicalSemiring α\ns : NonUnitalSubsemiring α\n⊢ Eq (↑s.topologicalClosure) (closure ↑s)","decl":"@[simp]\ntheorem topologicalClosure_coe (s : NonUnitalSubsemiring α) :\n    (s.topologicalClosure : Set α) = _root_.closure (s : Set α) :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.le_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalSemiring α\ninst✝ : TopologicalSemiring α\ns : NonUnitalSubsemiring α\n⊢ LE.le s s.topologicalClosure","decl":"theorem le_topologicalClosure (s : NonUnitalSubsemiring α) : s ≤ s.topologicalClosure :=\n  _root_.subset_closure\n\n"}
{"name":"NonUnitalSubsemiring.isClosed_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalSemiring α\ninst✝ : TopologicalSemiring α\ns : NonUnitalSubsemiring α\n⊢ IsClosed ↑s.topologicalClosure","decl":"theorem isClosed_topologicalClosure (s : NonUnitalSubsemiring α) :\n    IsClosed (s.topologicalClosure : Set α) := isClosed_closure\n\n"}
{"name":"NonUnitalSubsemiring.topologicalClosure_minimal","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalSemiring α\ninst✝ : TopologicalSemiring α\ns t : NonUnitalSubsemiring α\nh : LE.le s t\nht : IsClosed ↑t\n⊢ LE.le s.topologicalClosure t","decl":"theorem topologicalClosure_minimal (s : NonUnitalSubsemiring α) {t : NonUnitalSubsemiring α}\n    (h : s ≤ t) (ht : IsClosed (t : Set α)) : s.topologicalClosure ≤ t :=\n  closure_minimal h ht\n\n"}
{"name":"instTopologicalSemiringULift","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Semiring α\ninst✝ : TopologicalSemiring α\n⊢ TopologicalSemiring (ULift.{u_2, u_1} α)","decl":"instance : TopologicalSemiring (ULift α) where\n\n"}
{"name":"Subsemiring.topologicalSemiring","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Semiring α\ninst✝ : TopologicalSemiring α\nS : Subsemiring α\n⊢ TopologicalSemiring (Subtype fun x => Membership.mem S x)","decl":"instance topologicalSemiring (S : Subsemiring α) : TopologicalSemiring S :=\n  { S.toSubmonoid.continuousMul, S.toAddSubmonoid.continuousAdd with }\n\n"}
{"name":"Subsemiring.continuousSMul","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : TopologicalSpace α\ninst✝³ : Semiring α\ns : Subsemiring α\nX : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : MulAction α X\ninst✝ : ContinuousSMul α X\n⊢ ContinuousSMul (Subtype fun x => Membership.mem s x) X","decl":"instance continuousSMul (s : Subsemiring α) (X) [TopologicalSpace X] [MulAction α X]\n    [ContinuousSMul α X] : ContinuousSMul s X :=\n  Submonoid.continuousSMul\n\n"}
{"name":"Subsemiring.topologicalClosure_coe","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Semiring α\ninst✝ : TopologicalSemiring α\ns : Subsemiring α\n⊢ Eq (↑s.topologicalClosure) (closure ↑s)","decl":"@[simp]\ntheorem Subsemiring.topologicalClosure_coe (s : Subsemiring α) :\n    (s.topologicalClosure : Set α) = _root_.closure (s : Set α) :=\n  rfl\n\n"}
{"name":"Subsemiring.le_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Semiring α\ninst✝ : TopologicalSemiring α\ns : Subsemiring α\n⊢ LE.le s s.topologicalClosure","decl":"theorem Subsemiring.le_topologicalClosure (s : Subsemiring α) : s ≤ s.topologicalClosure :=\n  _root_.subset_closure\n\n"}
{"name":"Subsemiring.isClosed_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Semiring α\ninst✝ : TopologicalSemiring α\ns : Subsemiring α\n⊢ IsClosed ↑s.topologicalClosure","decl":"theorem Subsemiring.isClosed_topologicalClosure (s : Subsemiring α) :\n    IsClosed (s.topologicalClosure : Set α) := isClosed_closure\n\n"}
{"name":"Subsemiring.topologicalClosure_minimal","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Semiring α\ninst✝ : TopologicalSemiring α\ns t : Subsemiring α\nh : LE.le s t\nht : IsClosed ↑t\n⊢ LE.le s.topologicalClosure t","decl":"theorem Subsemiring.topologicalClosure_minimal (s : Subsemiring α) {t : Subsemiring α} (h : s ≤ t)\n    (ht : IsClosed (t : Set α)) : s.topologicalClosure ≤ t :=\n  closure_minimal h ht\n\n"}
{"name":"instTopologicalSemiringProd","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : NonUnitalNonAssocSemiring α\ninst✝² : NonUnitalNonAssocSemiring β\ninst✝¹ : TopologicalSemiring α\ninst✝ : TopologicalSemiring β\n⊢ TopologicalSemiring (Prod α β)","decl":"/-- The product topology on the cartesian product of two topological semirings\n  makes the product into a topological semiring. -/\ninstance [NonUnitalNonAssocSemiring α] [NonUnitalNonAssocSemiring β] [TopologicalSemiring α]\n    [TopologicalSemiring β] : TopologicalSemiring (α × β) where\n\n"}
{"name":"instTopologicalRingProd","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : NonUnitalNonAssocRing α\ninst✝² : NonUnitalNonAssocRing β\ninst✝¹ : TopologicalRing α\ninst✝ : TopologicalRing β\n⊢ TopologicalRing (Prod α β)","decl":"/-- The product topology on the cartesian product of two topological rings\n  makes the product into a topological ring. -/\ninstance [NonUnitalNonAssocRing α] [NonUnitalNonAssocRing β] [TopologicalRing α]\n    [TopologicalRing β] : TopologicalRing (α × β) where\n\n"}
{"name":"instContinuousAddForallOfTopologicalSemiring","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"β : Type u_2\nC : β → Type u_3\ninst✝² : (b : β) → TopologicalSpace (C b)\ninst✝¹ : (b : β) → NonUnitalNonAssocSemiring (C b)\ninst✝ : ∀ (b : β), TopologicalSemiring (C b)\n⊢ ContinuousAdd ((b : β) → C b)","decl":"instance {β : Type*} {C : β → Type*} [∀ b, TopologicalSpace (C b)]\n    [∀ b, NonUnitalNonAssocSemiring (C b)] [∀ b, TopologicalSemiring (C b)] :\n    ContinuousAdd ((b : β) → C b) :=\n  inferInstance\n\n"}
{"name":"Pi.instTopologicalSemiring","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"β : Type u_2\nC : β → Type u_3\ninst✝² : (b : β) → TopologicalSpace (C b)\ninst✝¹ : (b : β) → NonUnitalNonAssocSemiring (C b)\ninst✝ : ∀ (b : β), TopologicalSemiring (C b)\n⊢ TopologicalSemiring ((b : β) → C b)","decl":"instance Pi.instTopologicalSemiring {β : Type*} {C : β → Type*} [∀ b, TopologicalSpace (C b)]\n    [∀ b, NonUnitalNonAssocSemiring (C b)] [∀ b, TopologicalSemiring (C b)] :\n    TopologicalSemiring (∀ b, C b) where\n\n"}
{"name":"Pi.instTopologicalRing","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"β : Type u_2\nC : β → Type u_3\ninst✝² : (b : β) → TopologicalSpace (C b)\ninst✝¹ : (b : β) → NonUnitalNonAssocRing (C b)\ninst✝ : ∀ (b : β), TopologicalRing (C b)\n⊢ TopologicalRing ((b : β) → C b)","decl":"instance Pi.instTopologicalRing {β : Type*} {C : β → Type*} [∀ b, TopologicalSpace (C b)]\n    [∀ b, NonUnitalNonAssocRing (C b)] [∀ b, TopologicalRing (C b)] :\n    TopologicalRing (∀ b, C b) := ⟨⟩\n\n"}
{"name":"instContinuousAddMulOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : ContinuousAdd α\n⊢ ContinuousAdd (MulOpposite α)","decl":"instance [NonUnitalNonAssocSemiring α] [TopologicalSpace α] [ContinuousAdd α] :\n    ContinuousAdd αᵐᵒᵖ :=\n  continuousAdd_induced opAddEquiv.symm\n\n"}
{"name":"instTopologicalSemiringMulOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\n⊢ TopologicalSemiring (MulOpposite α)","decl":"instance [NonUnitalNonAssocSemiring α] [TopologicalSpace α] [TopologicalSemiring α] :\n    TopologicalSemiring αᵐᵒᵖ := ⟨⟩\n\n"}
{"name":"instContinuousNegMulOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocRing α\ninst✝¹ : TopologicalSpace α\ninst✝ : ContinuousNeg α\n⊢ ContinuousNeg (MulOpposite α)","decl":"instance [NonUnitalNonAssocRing α] [TopologicalSpace α] [ContinuousNeg α] : ContinuousNeg αᵐᵒᵖ :=\n  opHomeomorph.symm.isInducing.continuousNeg fun _ => rfl\n\n"}
{"name":"instTopologicalRingMulOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocRing α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalRing α\n⊢ TopologicalRing (MulOpposite α)","decl":"instance [NonUnitalNonAssocRing α] [TopologicalSpace α] [TopologicalRing α] :\n    TopologicalRing αᵐᵒᵖ := ⟨⟩\n\n"}
{"name":"instContinuousMulAddOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : ContinuousMul α\n⊢ ContinuousMul (AddOpposite α)","decl":"instance [NonUnitalNonAssocSemiring α] [TopologicalSpace α] [ContinuousMul α] :\n    ContinuousMul αᵃᵒᵖ :=\n  continuousMul_induced opMulEquiv.symm\n\n"}
{"name":"instTopologicalSemiringAddOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSemiring α\n⊢ TopologicalSemiring (AddOpposite α)","decl":"instance [NonUnitalNonAssocSemiring α] [TopologicalSpace α] [TopologicalSemiring α] :\n    TopologicalSemiring αᵃᵒᵖ := ⟨⟩\n\n"}
{"name":"instTopologicalRingAddOpposite","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : NonUnitalNonAssocRing α\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalRing α\n⊢ TopologicalRing (AddOpposite α)","decl":"instance [NonUnitalNonAssocRing α] [TopologicalSpace α] [TopologicalRing α] :\n    TopologicalRing αᵃᵒᵖ := ⟨⟩\n\n"}
{"name":"TopologicalRing.of_addGroup_of_nhds_zero","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"R : Type u_2\ninst✝² : NonUnitalNonAssocRing R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalAddGroup R\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HMul.hMul x1 x2) (SProd.sprod (nhds 0) (nhds 0)) (nhds 0)\nhmul_left : ∀ (x₀ : R), Filter.Tendsto (fun x => HMul.hMul x₀ x) (nhds 0) (nhds 0)\nhmul_right : ∀ (x₀ : R), Filter.Tendsto (fun x => HMul.hMul x x₀) (nhds 0) (nhds 0)\n⊢ TopologicalRing R","decl":"theorem TopologicalRing.of_addGroup_of_nhds_zero [TopologicalAddGroup R]\n    (hmul : Tendsto (uncurry ((· * ·) : R → R → R)) (𝓝 0 ×ˢ 𝓝 0) <| 𝓝 0)\n    (hmul_left : ∀ x₀ : R, Tendsto (fun x : R => x₀ * x) (𝓝 0) <| 𝓝 0)\n    (hmul_right : ∀ x₀ : R, Tendsto (fun x : R => x * x₀) (𝓝 0) <| 𝓝 0) : TopologicalRing R where\n  continuous_mul := by\n    refine continuous_of_continuousAt_zero₂ (AddMonoidHom.mul (R := R)) ?_ ?_ ?_ <;>\n      simpa only [ContinuousAt, mul_zero, zero_mul, nhds_prod_eq, AddMonoidHom.mul_apply]\n\n"}
{"name":"TopologicalRing.of_nhds_zero","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"R : Type u_2\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : TopologicalSpace R\nhadd : Filter.Tendsto (Function.uncurry fun x1 x2 => HAdd.hAdd x1 x2) (SProd.sprod (nhds 0) (nhds 0)) (nhds 0)\nhneg : Filter.Tendsto (fun x => Neg.neg x) (nhds 0) (nhds 0)\nhmul : Filter.Tendsto (Function.uncurry fun x1 x2 => HMul.hMul x1 x2) (SProd.sprod (nhds 0) (nhds 0)) (nhds 0)\nhmul_left : ∀ (x₀ : R), Filter.Tendsto (fun x => HMul.hMul x₀ x) (nhds 0) (nhds 0)\nhmul_right : ∀ (x₀ : R), Filter.Tendsto (fun x => HMul.hMul x x₀) (nhds 0) (nhds 0)\nhleft : ∀ (x₀ : R), Eq (nhds x₀) (Filter.map (fun x => HAdd.hAdd x₀ x) (nhds 0))\n⊢ TopologicalRing R","decl":"theorem TopologicalRing.of_nhds_zero\n    (hadd : Tendsto (uncurry ((· + ·) : R → R → R)) (𝓝 0 ×ˢ 𝓝 0) <| 𝓝 0)\n    (hneg : Tendsto (fun x => -x : R → R) (𝓝 0) (𝓝 0))\n    (hmul : Tendsto (uncurry ((· * ·) : R → R → R)) (𝓝 0 ×ˢ 𝓝 0) <| 𝓝 0)\n    (hmul_left : ∀ x₀ : R, Tendsto (fun x : R => x₀ * x) (𝓝 0) <| 𝓝 0)\n    (hmul_right : ∀ x₀ : R, Tendsto (fun x : R => x * x₀) (𝓝 0) <| 𝓝 0)\n    (hleft : ∀ x₀ : R, 𝓝 x₀ = map (fun x => x₀ + x) (𝓝 0)) : TopologicalRing R :=\n  have := TopologicalAddGroup.of_comm_of_nhds_zero hadd hneg hleft\n  TopologicalRing.of_addGroup_of_nhds_zero hmul hmul_left hmul_right\n\n"}
{"name":"instTopologicalRingULift","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNonAssocRing α\ninst✝ : TopologicalRing α\n⊢ TopologicalRing (ULift.{u_2, u_1} α)","decl":"instance : TopologicalRing (ULift α) where\n\n"}
{"name":"mulLeft_continuous","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNonAssocRing α\ninst✝ : TopologicalRing α\nx : α\n⊢ Continuous ⇑(AddMonoidHom.mulLeft x)","decl":"/-- In a topological semiring, the left-multiplication `AddMonoidHom` is continuous. -/\ntheorem mulLeft_continuous (x : α) : Continuous (AddMonoidHom.mulLeft x) :=\n  continuous_const.mul continuous_id\n\n"}
{"name":"mulRight_continuous","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalNonAssocRing α\ninst✝ : TopologicalRing α\nx : α\n⊢ Continuous ⇑(AddMonoidHom.mulRight x)","decl":"/-- In a topological semiring, the right-multiplication `AddMonoidHom` is continuous. -/\ntheorem mulRight_continuous (x : α) : Continuous (AddMonoidHom.mulRight x) :=\n  continuous_id.mul continuous_const\n\n"}
{"name":"NonUnitalSubring.instTopologicalRing","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalRing α\ninst✝ : TopologicalRing α\nS : NonUnitalSubring α\n⊢ TopologicalRing (Subtype fun x => Membership.mem S x)","decl":"instance instTopologicalRing (S : NonUnitalSubring α) : TopologicalRing S :=\n  { S.toSubsemigroup.continuousMul, inferInstanceAs (TopologicalAddGroup S.toAddSubgroup) with }\n\n"}
{"name":"NonUnitalSubring.le_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalRing α\ninst✝ : TopologicalRing α\ns : NonUnitalSubring α\n⊢ LE.le s s.topologicalClosure","decl":"theorem le_topologicalClosure (s : NonUnitalSubring α) : s ≤ s.topologicalClosure :=\n  _root_.subset_closure\n\n"}
{"name":"NonUnitalSubring.isClosed_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalRing α\ninst✝ : TopologicalRing α\ns : NonUnitalSubring α\n⊢ IsClosed ↑s.topologicalClosure","decl":"theorem isClosed_topologicalClosure (s : NonUnitalSubring α) :\n    IsClosed (s.topologicalClosure : Set α) := isClosed_closure\n\n"}
{"name":"NonUnitalSubring.topologicalClosure_minimal","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : NonUnitalRing α\ninst✝ : TopologicalRing α\ns t : NonUnitalSubring α\nh : LE.le s t\nht : IsClosed ↑t\n⊢ LE.le s.topologicalClosure t","decl":"theorem topologicalClosure_minimal (s : NonUnitalSubring α) {t : NonUnitalSubring α} (h : s ≤ t)\n    (ht : IsClosed (t : Set α)) : s.topologicalClosure ≤ t :=\n  closure_minimal h ht\n\n"}
{"name":"Subring.instTopologicalRing","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Ring α\ninst✝ : TopologicalRing α\nS : Subring α\n⊢ TopologicalRing (Subtype fun x => Membership.mem S x)","decl":"instance Subring.instTopologicalRing (S : Subring α) : TopologicalRing S :=\n  { S.toSubmonoid.continuousMul, inferInstanceAs (TopologicalAddGroup S.toAddSubgroup) with }\n\n"}
{"name":"Subring.continuousSMul","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : TopologicalSpace α\ninst✝³ : Ring α\ns : Subring α\nX : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : MulAction α X\ninst✝ : ContinuousSMul α X\n⊢ ContinuousSMul (Subtype fun x => Membership.mem s x) X","decl":"instance Subring.continuousSMul (s : Subring α) (X) [TopologicalSpace X] [MulAction α X]\n    [ContinuousSMul α X] : ContinuousSMul s X :=\n  Subsemiring.continuousSMul s.toSubsemiring X\n\n"}
{"name":"Subring.le_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Ring α\ninst✝ : TopologicalRing α\ns : Subring α\n⊢ LE.le s s.topologicalClosure","decl":"theorem Subring.le_topologicalClosure (s : Subring α) : s ≤ s.topologicalClosure :=\n  _root_.subset_closure\n\n"}
{"name":"Subring.isClosed_topologicalClosure","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Ring α\ninst✝ : TopologicalRing α\ns : Subring α\n⊢ IsClosed ↑s.topologicalClosure","decl":"theorem Subring.isClosed_topologicalClosure (s : Subring α) :\n    IsClosed (s.topologicalClosure : Set α) := isClosed_closure\n\n"}
{"name":"Subring.topologicalClosure_minimal","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Ring α\ninst✝ : TopologicalRing α\ns t : Subring α\nh : LE.le s t\nht : IsClosed ↑t\n⊢ LE.le s.topologicalClosure t","decl":"theorem Subring.topologicalClosure_minimal (s : Subring α) {t : Subring α} (h : s ≤ t)\n    (ht : IsClosed (t : Set α)) : s.topologicalClosure ≤ t :=\n  closure_minimal h ht\n\n"}
{"name":"RingTopology.mk.injEq","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u\ninst✝ : Ring α\ntoTopologicalSpace✝ : TopologicalSpace α\ntoTopologicalRing✝ : TopologicalRing α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalRing : TopologicalRing α\n⊢ Eq (Eq { toTopologicalSpace := toTopologicalSpace✝, toTopologicalRing := toTopologicalRing✝ } { toTopologicalSpace := toTopologicalSpace, toTopologicalRing := toTopologicalRing }) (Eq toTopologicalSpace✝ toTopologicalSpace)","decl":"/-- A ring topology on a ring `α` is a topology for which addition, negation and multiplication\nare continuous. -/\nstructure RingTopology (α : Type u) [Ring α] extends TopologicalSpace α, TopologicalRing α : Type u\n\n"}
{"name":"RingTopology.mk.inj","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u\ninst✝ : Ring α\ntoTopologicalSpace✝ : TopologicalSpace α\ntoTopologicalRing✝ : TopologicalRing α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalRing : TopologicalRing α\nx✝ : Eq { toTopologicalSpace := toTopologicalSpace✝, toTopologicalRing := toTopologicalRing✝ } { toTopologicalSpace := toTopologicalSpace, toTopologicalRing := toTopologicalRing }\n⊢ Eq toTopologicalSpace✝ toTopologicalSpace","decl":"/-- A ring topology on a ring `α` is a topology for which addition, negation and multiplication\nare continuous. -/\nstructure RingTopology (α : Type u) [Ring α] extends TopologicalSpace α, TopologicalRing α : Type u\n\n"}
{"name":"RingTopology.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u\ninst✝¹ : Ring α\ninst✝ : SizeOf α\ntoTopologicalSpace : TopologicalSpace α\ntoTopologicalRing : TopologicalRing α\n⊢ Eq (SizeOf.sizeOf { toTopologicalSpace := toTopologicalSpace, toTopologicalRing := toTopologicalRing }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toTopologicalSpace)) (SizeOf.sizeOf toTopologicalRing))","decl":"/-- A ring topology on a ring `α` is a topology for which addition, negation and multiplication\nare continuous. -/\nstructure RingTopology (α : Type u) [Ring α] extends TopologicalSpace α, TopologicalRing α : Type u\n\n"}
{"name":"RingTopology.toTopologicalRing","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u\ninst✝ : Ring α\nself : RingTopology α\n⊢ TopologicalRing α","decl":"/-- A ring topology on a ring `α` is a topology for which addition, negation and multiplication\nare continuous. -/\nstructure RingTopology (α : Type u) [Ring α] extends TopologicalSpace α, TopologicalRing α : Type u\n\n"}
{"name":"RingTopology.toTopologicalSpace_injective","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝ : Ring α\n⊢ Function.Injective RingTopology.toTopologicalSpace","decl":"theorem toTopologicalSpace_injective :\n    Injective (toTopologicalSpace : RingTopology α → TopologicalSpace α) := by\n  intro f g _; cases f; cases g; congr\n\n"}
{"name":"RingTopology.ext","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝ : Ring α\nf g : RingTopology α\nh : Eq TopologicalSpace.IsOpen TopologicalSpace.IsOpen\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : RingTopology α} (h : f.IsOpen = g.IsOpen) : f = g :=\n  toTopologicalSpace_injective <| TopologicalSpace.ext h\n\n"}
{"name":"RingTopology.ext_iff","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_1\ninst✝ : Ring α\nf g : RingTopology α\n⊢ Iff (Eq f g) (Eq TopologicalSpace.IsOpen TopologicalSpace.IsOpen)","decl":"@[ext]\ntheorem ext {f g : RingTopology α} (h : f.IsOpen = g.IsOpen) : f = g :=\n  toTopologicalSpace_injective <| TopologicalSpace.ext h\n\n"}
{"name":"RingTopology.coinduced_continuous","module":"Mathlib.Topology.Algebra.Ring.Basic","initialProofState":"α : Type u_2\nβ : Type u_3\nt : TopologicalSpace α\ninst✝ : Ring β\nf : α → β\n⊢ Continuous f","decl":"theorem coinduced_continuous {α β : Type*} [t : TopologicalSpace α] [Ring β] (f : α → β) :\n    Continuous[t, (coinduced f).toTopologicalSpace] f :=\n  continuous_sInf_rng.2 <| forall_mem_image.2 fun _ => continuous_iff_coinduced_le.2\n\n"}
