{"name":"IntermediateField.coe_isIntegral_iff","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝⁶ : Field K\ninst✝⁵ : Field L\ninst✝⁴ : Algebra K L\nS : IntermediateField K L\nR : Type u_3\ninst✝³ : CommRing R\ninst✝² : Algebra R K\ninst✝¹ : Algebra R L\ninst✝ : IsScalarTower R K L\nx : Subtype fun x => Membership.mem S x\n⊢ Iff (IsIntegral R ↑x) (IsIntegral R x)","decl":"theorem IntermediateField.coe_isIntegral_iff {R : Type*} [CommRing R] [Algebra R K] [Algebra R L]\n    [IsScalarTower R K L] {x : S} : IsIntegral R (x : L) ↔ IsIntegral R x :=\n  isIntegral_algHom_iff (S.val.restrictScalars R) Subtype.val_injective\n\n"}
{"name":"IntermediateField.isAlgebraic_tower_bot","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nS : IntermediateField K L\ninst✝ : Algebra.IsAlgebraic K L\n⊢ Algebra.IsAlgebraic K (Subtype fun x => Membership.mem S x)","decl":"instance isAlgebraic_tower_bot [Algebra.IsAlgebraic K L] : Algebra.IsAlgebraic K S :=\n  Algebra.IsAlgebraic.of_injective S.val S.val.injective\n\n"}
{"name":"IntermediateField.isAlgebraic_tower_top","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nS : IntermediateField K L\ninst✝ : Algebra.IsAlgebraic K L\n⊢ Algebra.IsAlgebraic (Subtype fun x => Membership.mem S x) L","decl":"instance isAlgebraic_tower_top [Algebra.IsAlgebraic K L] : Algebra.IsAlgebraic S L :=\n  Algebra.IsAlgebraic.tower_top (K := K) S\n\n"}
{"name":"IntermediateField.finiteDimensional_left","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nF : IntermediateField K L\ninst✝ : FiniteDimensional K L\n⊢ FiniteDimensional K (Subtype fun x => Membership.mem F x)","decl":"instance finiteDimensional_left [FiniteDimensional K L] : FiniteDimensional K F := .left K F L\n"}
{"name":"IntermediateField.finiteDimensional_right","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nF : IntermediateField K L\ninst✝ : FiniteDimensional K L\n⊢ FiniteDimensional (Subtype fun x => Membership.mem F x) L","decl":"instance finiteDimensional_right [FiniteDimensional K L] : FiniteDimensional F L := .right K F L\n\n"}
{"name":"IntermediateField.rank_eq_rank_subalgebra","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF : IntermediateField K L\n⊢ Eq (Module.rank K (Subtype fun x => Membership.mem F.toSubalgebra x)) (Module.rank K (Subtype fun x => Membership.mem F x))","decl":"@[simp]\ntheorem rank_eq_rank_subalgebra : Module.rank K F.toSubalgebra = Module.rank K F :=\n  rfl\n\n"}
{"name":"IntermediateField.finrank_eq_finrank_subalgebra","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF : IntermediateField K L\n⊢ Eq (Module.finrank K (Subtype fun x => Membership.mem F.toSubalgebra x)) (Module.finrank K (Subtype fun x => Membership.mem F x))","decl":"@[simp]\ntheorem finrank_eq_finrank_subalgebra : finrank K F.toSubalgebra = finrank K F :=\n  rfl\n\n"}
{"name":"IntermediateField.eq_of_le_of_finrank_le","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nF E : IntermediateField K L\nhfin : FiniteDimensional K (Subtype fun x => Membership.mem E x)\nh_le : LE.le F E\nh_finrank : LE.le (Module.finrank K (Subtype fun x => Membership.mem E x)) (Module.finrank K (Subtype fun x => Membership.mem F x))\n⊢ Eq F E","decl":"/-- If `F ≤ E` are two intermediate fields of `L / K` such that `[E : K] ≤ [F : K]` are finite,\nthen `F = E`. -/\ntheorem eq_of_le_of_finrank_le [hfin : FiniteDimensional K E] (h_le : F ≤ E)\n    (h_finrank : finrank K E ≤ finrank K F) : F = E :=\n  haveI : Module.Finite K E.toSubalgebra := hfin\n  toSubalgebra_injective <| Subalgebra.eq_of_le_of_finrank_le h_le h_finrank\n\n"}
{"name":"IntermediateField.eq_of_le_of_finrank_eq","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nF E : IntermediateField K L\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem E x)\nh_le : LE.le F E\nh_finrank : Eq (Module.finrank K (Subtype fun x => Membership.mem F x)) (Module.finrank K (Subtype fun x => Membership.mem E x))\n⊢ Eq F E","decl":"/-- If `F ≤ E` are two intermediate fields of `L / K` such that `[F : K] = [E : K]` are finite,\nthen `F = E`. -/\ntheorem eq_of_le_of_finrank_eq [FiniteDimensional K E] (h_le : F ≤ E)\n    (h_finrank : finrank K F = finrank K E) : F = E :=\n  eq_of_le_of_finrank_le h_le h_finrank.ge\n\n-- If `F ≤ E` are two intermediate fields of a finite extension `L / K` such that\n-- `[L : F] ≤ [L : E]`, then `F = E`. Marked as private since it's a direct corollary of\n-- `eq_of_le_of_finrank_le'` (the `FiniteDimensional K L` implies `FiniteDimensional F L`\n-- automatically by typeclass resolution).\n"}
{"name":"IntermediateField.eq_of_le_of_finrank_le'","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nF E : IntermediateField K L\ninst✝ : FiniteDimensional (Subtype fun x => Membership.mem F x) L\nh_le : LE.le F E\nh_finrank : LE.le (Module.finrank (Subtype fun x => Membership.mem F x) L) (Module.finrank (Subtype fun x => Membership.mem E x) L)\n⊢ Eq F E","decl":"/-- If `F ≤ E` are two intermediate fields of `L / K` such that `[L : F] ≤ [L : E]` are finite,\nthen `F = E`. -/\ntheorem eq_of_le_of_finrank_le' [FiniteDimensional F L] (h_le : F ≤ E)\n    (h_finrank : finrank F L ≤ finrank E L) : F = E := by\n  refine le_antisymm h_le (fun l hl ↦ ?_)\n  rwa [← mem_extendScalars (le_refl F), eq_of_le_of_finrank_le''\n    ((extendScalars_le_extendScalars_iff (le_refl F) h_le).2 h_le) h_finrank, mem_extendScalars]\n\n"}
{"name":"IntermediateField.eq_of_le_of_finrank_eq'","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nF E : IntermediateField K L\ninst✝ : FiniteDimensional (Subtype fun x => Membership.mem F x) L\nh_le : LE.le F E\nh_finrank : Eq (Module.finrank (Subtype fun x => Membership.mem F x) L) (Module.finrank (Subtype fun x => Membership.mem E x) L)\n⊢ Eq F E","decl":"/-- If `F ≤ E` are two intermediate fields of `L / K` such that `[L : F] = [L : E]` are finite,\nthen `F = E`. -/\ntheorem eq_of_le_of_finrank_eq' [FiniteDimensional F L] (h_le : F ≤ E)\n    (h_finrank : finrank F L = finrank E L) : F = E :=\n  eq_of_le_of_finrank_le' h_le h_finrank.le\n\n"}
{"name":"IntermediateField.isAlgebraic_iff","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nS : IntermediateField K L\nx : Subtype fun x => Membership.mem S x\n⊢ Iff (IsAlgebraic K x) (IsAlgebraic K ↑x)","decl":"theorem isAlgebraic_iff {x : S} : IsAlgebraic K x ↔ IsAlgebraic K (x : L) :=\n  (isAlgebraic_algebraMap_iff (algebraMap S L).injective).symm\n\n"}
{"name":"IntermediateField.isIntegral_iff","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nS : IntermediateField K L\nx : Subtype fun x => Membership.mem S x\n⊢ Iff (IsIntegral K x) (IsIntegral K ↑x)","decl":"theorem isIntegral_iff {x : S} : IsIntegral K x ↔ IsIntegral K (x : L) :=\n  (isIntegral_algHom_iff S.val S.val.injective).symm\n\n"}
{"name":"IntermediateField.minpoly_eq","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nS : IntermediateField K L\nx : Subtype fun x => Membership.mem S x\n⊢ Eq (minpoly K x) (minpoly K ↑x)","decl":"theorem minpoly_eq (x : S) : minpoly K x = minpoly K (x : L) :=\n  (minpoly.algebraMap_eq (algebraMap S L).injective x).symm\n\n"}
{"name":"mem_subalgebraEquivIntermediateField","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Algebra.IsAlgebraic K L\nS : Subalgebra K L\nx : L\n⊢ Iff (Membership.mem (subalgebraEquivIntermediateField S) x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_subalgebraEquivIntermediateField [Algebra.IsAlgebraic K L] {S : Subalgebra K L}\n    {x : L} : x ∈ subalgebraEquivIntermediateField S ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"mem_subalgebraEquivIntermediateField_symm","module":"Mathlib.FieldTheory.IntermediateField.Algebraic","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Algebra.IsAlgebraic K L\nS : IntermediateField K L\nx : L\n⊢ Iff (Membership.mem (subalgebraEquivIntermediateField.symm S) x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_subalgebraEquivIntermediateField_symm [Algebra.IsAlgebraic K L]\n    {S : IntermediateField K L} {x : L} :\n    x ∈ subalgebraEquivIntermediateField.symm S ↔ x ∈ S :=\n  Iff.rfl\n"}
