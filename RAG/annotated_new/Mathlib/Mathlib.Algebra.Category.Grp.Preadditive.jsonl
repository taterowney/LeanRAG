{"name":"AddCommGrp.hom_add","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\nf g : Quiver.Hom M N\n⊢ Eq (AddCommGrp.Hom.hom (HAdd.hAdd f g)) (HAdd.hAdd (AddCommGrp.Hom.hom f) (AddCommGrp.Hom.hom g))","decl":"@[simp] lemma hom_add (f g : M ⟶ N) : (f + g).hom = f.hom + g.hom := rfl\n\n"}
{"name":"AddCommGrp.hom_add_apply","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"P Q : AddCommGrp\nf g : Quiver.Hom P Q\nx : ↑P\n⊢ Eq ((CategoryTheory.ConcreteCategory.hom (HAdd.hAdd f g)) x) (HAdd.hAdd ((CategoryTheory.ConcreteCategory.hom f) x) ((CategoryTheory.ConcreteCategory.hom g) x))","decl":"lemma hom_add_apply {P Q : AddCommGrp} (f g : P ⟶ Q) (x : P) : (f + g) x = f x + g x := rfl\n\n"}
{"name":"AddCommGrp.hom_zero","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\n⊢ Eq (AddCommGrp.Hom.hom 0) 0","decl":"@[simp] lemma hom_zero : (0 : M ⟶ N).hom = 0 := rfl\n\n"}
{"name":"AddCommGrp.hom_nsmul","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\nn : Nat\nf : Quiver.Hom M N\n⊢ Eq (AddCommGrp.Hom.hom (HSMul.hSMul n f)) (HSMul.hSMul n (AddCommGrp.Hom.hom f))","decl":"@[simp] lemma hom_nsmul (n : ℕ) (f : M ⟶ N) : (n • f).hom = n • f.hom := rfl\n\n"}
{"name":"AddCommGrp.hom_neg","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\nf : Quiver.Hom M N\n⊢ Eq (AddCommGrp.Hom.hom (Neg.neg f)) (Neg.neg (AddCommGrp.Hom.hom f))","decl":"@[simp] lemma hom_neg (f : M ⟶ N) : (-f).hom = -f.hom := rfl\n\n"}
{"name":"AddCommGrp.hom_sub","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\nf g : Quiver.Hom M N\n⊢ Eq (AddCommGrp.Hom.hom (HSub.hSub f g)) (HSub.hSub (AddCommGrp.Hom.hom f) (AddCommGrp.Hom.hom g))","decl":"@[simp] lemma hom_sub (f g : M ⟶ N) : (f - g).hom = f.hom - g.hom := rfl\n\n"}
{"name":"AddCommGrp.hom_zsmul","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\nn : Nat\nf : Quiver.Hom M N\n⊢ Eq (AddCommGrp.Hom.hom (HSMul.hSMul n f)) (HSMul.hSMul n (AddCommGrp.Hom.hom f))","decl":"@[simp] lemma hom_zsmul (n : ℕ) (f : M ⟶ N) : (n • f).hom = n • f.hom := rfl\n\n"}
{"name":"AddCommGrp.homAddEquiv_apply","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\na✝ : Quiver.Hom M N\n⊢ Eq (AddCommGrp.homAddEquiv a✝) (CategoryTheory.ConcreteCategory.hom a✝)","decl":"/-- `AddCommGrp.Hom.hom` bundled as an additive equivalence. -/\n@[simps!]\ndef homAddEquiv : (M ⟶ N) ≃+ (M →+ N) :=\n  { ConcreteCategory.homEquiv (C := AddCommGrp) with\n    map_add' _ _ := rfl }\n\n"}
{"name":"AddCommGrp.homAddEquiv_symm_apply_hom","module":"Mathlib.Algebra.Category.Grp.Preadditive","initialProofState":"M N : AddCommGrp\na✝ : CategoryTheory.ToHom M N\n⊢ Eq (AddCommGrp.Hom.hom (AddCommGrp.homAddEquiv.symm a✝)) a✝","decl":"/-- `AddCommGrp.Hom.hom` bundled as an additive equivalence. -/\n@[simps!]\ndef homAddEquiv : (M ⟶ N) ≃+ (M →+ N) :=\n  { ConcreteCategory.homEquiv (C := AddCommGrp) with\n    map_add' _ _ := rfl }\n\n"}
