{"name":"CompactSpace.uniformContinuous_of_continuous","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : UniformSpace α\ninst✝¹ : UniformSpace β\ninst✝ : CompactSpace α\nf : α → β\nh : Continuous f\n⊢ UniformContinuous f","decl":"/-- Heine-Cantor: a continuous function on a compact uniform space is uniformly\ncontinuous. -/\ntheorem CompactSpace.uniformContinuous_of_continuous [CompactSpace α] {f : α → β}\n    (h : Continuous f) : UniformContinuous f :=\n  calc map (Prod.map f f) (𝓤 α)\n    = map (Prod.map f f) (𝓝ˢ (diagonal α)) := by rw [nhdsSet_diagonal_eq_uniformity]\n  _ ≤ 𝓝ˢ (diagonal β) := (h.prodMap h).tendsto_nhdsSet mapsTo_prod_map_diagonal\n  _ ≤ 𝓤 β := nhdsSet_diagonal_le_uniformity\n\n"}
{"name":"IsCompact.uniformContinuousOn_of_continuous","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : UniformSpace α\ninst✝ : UniformSpace β\ns : Set α\nf : α → β\nhs : IsCompact s\nhf : ContinuousOn f s\n⊢ UniformContinuousOn f s","decl":"/-- Heine-Cantor: a continuous function on a compact set of a uniform space is uniformly\ncontinuous. -/\ntheorem IsCompact.uniformContinuousOn_of_continuous {s : Set α} {f : α → β} (hs : IsCompact s)\n    (hf : ContinuousOn f s) : UniformContinuousOn f s := by\n  rw [uniformContinuousOn_iff_restrict]\n  rw [isCompact_iff_compactSpace] at hs\n  rw [continuousOn_iff_continuous_restrict] at hf\n  exact CompactSpace.uniformContinuous_of_continuous hf\n\n"}
{"name":"IsCompact.uniformContinuousAt_of_continuousAt","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : UniformSpace α\ninst✝ : UniformSpace β\nr : Set (Prod β β)\ns : Set α\nhs : IsCompact s\nf : α → β\nhf : ∀ (a : α), Membership.mem s a → ContinuousAt f a\nhr : Membership.mem (uniformity β) r\n⊢ Membership.mem (uniformity α) (setOf fun x => Membership.mem s x.1 → Membership.mem r { fst := f x.1, snd := f x.2 })","decl":"/-- If `s` is compact and `f` is continuous at all points of `s`, then `f` is\n\"uniformly continuous at the set `s`\", i.e. `f x` is close to `f y` whenever `x ∈ s` and `y` is\nclose to `x` (even if `y` is not itself in `s`, so this is a stronger assertion than\n`UniformContinuousOn s`). -/\ntheorem IsCompact.uniformContinuousAt_of_continuousAt {r : Set (β × β)} {s : Set α}\n    (hs : IsCompact s) (f : α → β) (hf : ∀ a ∈ s, ContinuousAt f a) (hr : r ∈ 𝓤 β) :\n    { x : α × α | x.1 ∈ s → (f x.1, f x.2) ∈ r } ∈ 𝓤 α := by\n  obtain ⟨t, ht, htsymm, htr⟩ := comp_symm_mem_uniformity_sets hr\n  choose U hU T hT hb using fun a ha =>\n    exists_mem_nhds_ball_subset_of_mem_nhds ((hf a ha).preimage_mem_nhds <| mem_nhds_left _ ht)\n  obtain ⟨fs, hsU⟩ := hs.elim_nhds_subcover' U hU\n  apply mem_of_superset ((biInter_finset_mem fs).2 fun a _ => hT a a.2)\n  rintro ⟨a₁, a₂⟩ h h₁\n  obtain ⟨a, ha, haU⟩ := Set.mem_iUnion₂.1 (hsU h₁)\n  apply htr\n  refine ⟨f a, htsymm.mk_mem_comm.1 (hb _ _ _ haU ?_), hb _ _ _ haU ?_⟩\n  exacts [mem_ball_self _ (hT a a.2), mem_iInter₂.1 h a ha]\n\n"}
{"name":"Continuous.uniformContinuous_of_tendsto_cocompact","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : UniformSpace α\ninst✝ : UniformSpace β\nf : α → β\nx : β\nh_cont : Continuous f\nhx : Filter.Tendsto f (Filter.cocompact α) (nhds x)\n⊢ UniformContinuous f","decl":"theorem Continuous.uniformContinuous_of_tendsto_cocompact {f : α → β} {x : β}\n    (h_cont : Continuous f) (hx : Tendsto f (cocompact α) (𝓝 x)) : UniformContinuous f :=\n  uniformContinuous_def.2 fun r hr => by\n    obtain ⟨t, ht, htsymm, htr⟩ := comp_symm_mem_uniformity_sets hr\n    obtain ⟨s, hs, hst⟩ := mem_cocompact.1 (hx <| mem_nhds_left _ ht)\n    apply\n      mem_of_superset\n        (symmetrize_mem_uniformity <|\n          (hs.uniformContinuousAt_of_continuousAt f fun _ _ => h_cont.continuousAt) <|\n            symmetrize_mem_uniformity hr)\n    rintro ⟨b₁, b₂⟩ h\n    by_cases h₁ : b₁ ∈ s; · exact (h.1 h₁).1\n    by_cases h₂ : b₂ ∈ s; · exact (h.2 h₂).2\n    apply htr\n    exact ⟨x, htsymm.mk_mem_comm.1 (hst h₁), hst h₂⟩\n\n"}
{"name":"HasCompactSupport.uniformContinuous_of_continuous","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : UniformSpace α\ninst✝¹ : UniformSpace β\nf : α → β\ninst✝ : Zero β\nh1 : HasCompactSupport f\nh2 : Continuous f\n⊢ UniformContinuous f","decl":"@[to_additive]\ntheorem HasCompactMulSupport.uniformContinuous_of_continuous {f : α → β} [One β]\n    (h1 : HasCompactMulSupport f) (h2 : Continuous f) : UniformContinuous f :=\n  h2.uniformContinuous_of_tendsto_cocompact h1.is_one_at_infty\n\n"}
{"name":"HasCompactMulSupport.uniformContinuous_of_continuous","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : UniformSpace α\ninst✝¹ : UniformSpace β\nf : α → β\ninst✝ : One β\nh1 : HasCompactMulSupport f\nh2 : Continuous f\n⊢ UniformContinuous f","decl":"@[to_additive]\ntheorem HasCompactMulSupport.uniformContinuous_of_continuous {f : α → β} [One β]\n    (h1 : HasCompactMulSupport f) (h2 : Continuous f) : UniformContinuous f :=\n  h2.uniformContinuous_of_tendsto_cocompact h1.is_one_at_infty\n\n"}
{"name":"ContinuousOn.tendstoUniformly","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : UniformSpace α\ninst✝³ : UniformSpace β\ninst✝² : LocallyCompactSpace α\ninst✝¹ : CompactSpace β\ninst✝ : UniformSpace γ\nf : α → β → γ\nx : α\nU : Set α\nhxU : Membership.mem (nhds x) U\nh : ContinuousOn (Function.HasUncurry.uncurry f) (SProd.sprod U Set.univ)\n⊢ TendstoUniformly f (f x) (nhds x)","decl":"/-- A family of functions `α → β → γ` tends uniformly to its value at `x` if `α` is locally compact,\n`β` is compact and `f` is continuous on `U × (univ : Set β)` for some neighborhood `U` of `x`. -/\ntheorem ContinuousOn.tendstoUniformly [LocallyCompactSpace α] [CompactSpace β] [UniformSpace γ]\n    {f : α → β → γ} {x : α} {U : Set α} (hxU : U ∈ 𝓝 x) (h : ContinuousOn (↿f) (U ×ˢ univ)) :\n    TendstoUniformly f (f x) (𝓝 x) := by\n  rcases LocallyCompactSpace.local_compact_nhds _ _ hxU with ⟨K, hxK, hKU, hK⟩\n  have : UniformContinuousOn (↿f) (K ×ˢ univ) :=\n    IsCompact.uniformContinuousOn_of_continuous (hK.prod isCompact_univ)\n      (h.mono <| prod_mono hKU Subset.rfl)\n  exact this.tendstoUniformly hxK\n\n"}
{"name":"Continuous.tendstoUniformly","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : UniformSpace α\ninst✝³ : UniformSpace β\ninst✝² : WeaklyLocallyCompactSpace α\ninst✝¹ : CompactSpace β\ninst✝ : UniformSpace γ\nf : α → β → γ\nh : Continuous (Function.HasUncurry.uncurry f)\nx : α\n⊢ TendstoUniformly f (f x) (nhds x)","decl":"/-- A continuous family of functions `α → β → γ` tends uniformly to its value at `x`\nif `α` is weakly locally compact and `β` is compact. -/\ntheorem Continuous.tendstoUniformly [WeaklyLocallyCompactSpace α] [CompactSpace β] [UniformSpace γ]\n    (f : α → β → γ) (h : Continuous ↿f) (x : α) : TendstoUniformly f (f x) (𝓝 x) :=\n  let ⟨K, hK, hxK⟩ := exists_compact_mem_nhds x\n  have : UniformContinuousOn (↿f) (K ×ˢ univ) :=\n    IsCompact.uniformContinuousOn_of_continuous (hK.prod isCompact_univ) h.continuousOn\n  this.tendstoUniformly hxK\n\n"}
{"name":"IsCompact.mem_uniformity_of_prod","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_4\nβ : Type u_5\nE : Type u_6\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : UniformSpace E\nf : α → β → E\ns : Set α\nk : Set β\nq : α\nu : Set (Prod E E)\nhk : IsCompact k\nhf : ContinuousOn (Function.uncurry f) (SProd.sprod s k)\nhq : Membership.mem s q\nhu : Membership.mem (uniformity E) u\n⊢ Exists fun v => And (Membership.mem (nhdsWithin q s) v) (∀ (p : α), Membership.mem v p → ∀ (x : β), Membership.mem k x → Membership.mem u { fst := f p x, snd := f q x })","decl":"/-- In a product space `α × β`, assume that a function `f` is continuous on `s × k` where `k` is\ncompact. Then, along the fiber above any `q ∈ s`, `f` is transversely uniformly continuous, i.e.,\nif `p ∈ s` is close enough to `q`, then `f p x` is uniformly close to `f q x` for all `x ∈ k`. -/\nlemma IsCompact.mem_uniformity_of_prod\n    {α β E : Type*} [TopologicalSpace α] [TopologicalSpace β] [UniformSpace E]\n    {f : α → β → E} {s : Set α} {k : Set β} {q : α} {u : Set (E × E)}\n    (hk : IsCompact k) (hf : ContinuousOn f.uncurry (s ×ˢ k)) (hq : q ∈ s) (hu : u ∈ 𝓤 E) :\n    ∃ v ∈ 𝓝[s] q, ∀ p ∈ v, ∀ x ∈ k, (f p x, f q x) ∈ u := by\n  apply hk.induction_on (p := fun t ↦ ∃ v ∈ 𝓝[s] q, ∀ p ∈ v, ∀ x ∈ t, (f p x, f q x) ∈ u)\n  · exact ⟨univ, univ_mem, by simp⟩\n  · intro t' t ht't ⟨v, v_mem, hv⟩\n    exact ⟨v, v_mem, fun p hp x hx ↦ hv p hp x (ht't hx)⟩\n  · intro t t' ⟨v, v_mem, hv⟩ ⟨v', v'_mem, hv'⟩\n    refine ⟨v ∩ v', inter_mem v_mem v'_mem, fun p hp x hx ↦ ?_⟩\n    rcases hx with h'x|h'x\n    · exact hv p hp.1 x h'x\n    · exact hv' p hp.2 x h'x\n  · rcases comp_symm_of_uniformity hu with ⟨u', u'_mem, u'_symm, hu'⟩\n    intro x hx\n    obtain ⟨v, hv, w, hw, hvw⟩ :\n      ∃ v ∈ 𝓝[s] q, ∃ w ∈ 𝓝[k] x, v ×ˢ w ⊆ f.uncurry ⁻¹' {z | (f q x, z) ∈ u'} :=\n        mem_nhdsWithin_prod_iff.1 (hf (q, x) ⟨hq, hx⟩ (mem_nhds_left (f q x) u'_mem))\n    refine ⟨w, hw, v, hv, fun p hp y hy ↦ ?_⟩\n    have A : (f q x, f p y) ∈ u' := hvw (⟨hp, hy⟩ : (p, y) ∈ v ×ˢ w)\n    have B : (f q x, f q y) ∈ u' := hvw (⟨mem_of_mem_nhdsWithin hq hv, hy⟩ : (q, y) ∈ v ×ˢ w)\n    exact hu' (prod_mk_mem_compRel (u'_symm A) B)\n\n"}
{"name":"CompactSpace.uniformEquicontinuous_of_equicontinuous","module":"Mathlib.Topology.UniformSpace.HeineCantor","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : UniformSpace α\ninst✝¹ : UniformSpace β\nι : Type u_4\nF : ι → β → α\ninst✝ : CompactSpace β\nh : Equicontinuous F\n⊢ UniformEquicontinuous F","decl":"/-- An equicontinuous family of functions defined on a compact uniform space is automatically\nuniformly equicontinuous. -/\ntheorem CompactSpace.uniformEquicontinuous_of_equicontinuous {ι : Type*} {F : ι → β → α}\n    [CompactSpace β] (h : Equicontinuous F) : UniformEquicontinuous F := by\n  rw [equicontinuous_iff_continuous] at h\n  rw [uniformEquicontinuous_iff_uniformContinuous]\n  exact CompactSpace.uniformContinuous_of_continuous h\n\n"}
