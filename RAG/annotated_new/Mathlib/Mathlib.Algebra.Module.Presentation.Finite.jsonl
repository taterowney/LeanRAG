{"name":"Module.Presentation.finite","module":"Mathlib.Algebra.Module.Presentation.Finite","initialProofState":"A : Type u\ninst✝³ : Ring A\nM : Type v\ninst✝² : AddCommGroup M\ninst✝¹ : Module A M\npres : Module.Presentation A M\ninst✝ : Finite pres.G\n⊢ Module.Finite A M","decl":"lemma finite [Finite pres.G] :\n    Module.Finite A M :=\n  Finite.of_surjective _ pres.surjective_π\n\n"}
{"name":"Module.Presentation.finitePresentation","module":"Mathlib.Algebra.Module.Presentation.Finite","initialProofState":"A : Type u\ninst✝⁴ : Ring A\nM : Type v\ninst✝³ : AddCommGroup M\ninst✝² : Module A M\npres : Module.Presentation A M\ninst✝¹ : Finite pres.G\ninst✝ : Finite pres.R\n⊢ Module.FinitePresentation A M","decl":"lemma finitePresentation [Finite pres.G] [Finite pres.R] :\n    Module.FinitePresentation A M :=\n  Module.finitePresentation_of_surjective _ pres.surjective_π (by\n    rw [pres.ker_π]\n    exact Submodule.fg_span (Set.finite_range _))\n\n"}
{"name":"Module.finitePresentation_iff_exists_presentation","module":"Mathlib.Algebra.Module.Presentation.Finite","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\n⊢ Iff (Module.FinitePresentation A M) (Exists fun pres => And (Finite pres.G) (Finite pres.R))","decl":"lemma finitePresentation_iff_exists_presentation :\n    Module.FinitePresentation A M ↔\n      ∃ (pres : Presentation.{w₀, w₁} A M), Finite pres.G ∧ Finite pres.R := by\n  constructor\n  · intro\n    obtain ⟨G : Type w₀, _, var, hG⟩ :=\n      Submodule.fg_iff_exists_finite_generating_family.1\n        (finite_def.1 (inferInstanceAs (Module.Finite A M)))\n    obtain ⟨R : Type w₁, _, relation, hR⟩ :=\n      Submodule.fg_iff_exists_finite_generating_family.1\n        (Module.FinitePresentation.fg_ker (Finsupp.linearCombination A var) (by\n          rw [← LinearMap.range_eq_top, Finsupp.range_linearCombination, hG]))\n    exact\n     ⟨{ G := G\n        R := R\n        relation := relation\n        var := var\n        linearCombination_var_relation := fun r ↦ by\n          rw [Submodule.ext_iff] at hR\n          exact (hR _).1 (Submodule.subset_span ⟨_, rfl⟩)\n        toIsPresentation := by\n          rw [Relations.Solution.isPresentation_iff]\n          exact ⟨hG, hR.symm⟩ },\n        inferInstance, inferInstance⟩\n  · rintro ⟨pres, _, _⟩\n    exact pres.finitePresentation\n\n"}
