{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.idem_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp P.p.f P.p.f) P.p.f","decl":"@[reassoc (attr := simp)]\nlemma idem_f (P : Karoubi (Karoubi C)) : P.p.f ‚â´ P.p.f = P.p.f := by\n  simpa only [hom_ext_iff, comp_f] using P.idem\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.idem_f_assoc","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\nZ : C\nh : Quiver.Hom P.X.X Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp P.p.f (CategoryTheory.CategoryStruct.comp P.p.f h)) (CategoryTheory.CategoryStruct.comp P.p.f h)","decl":"@[reassoc (attr := simp)]\nlemma idem_f (P : Karoubi (Karoubi C)) : P.p.f ‚â´ P.p.f = P.p.f := by\n  simpa only [hom_ext_iff, comp_f] using P.idem\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.p_comm_f_assoc","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\nf : Quiver.Hom P Q\nZ : C\nh : Quiver.Hom Q.X.X Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp P.p.f (CategoryTheory.CategoryStruct.comp f.f.f h)) (CategoryTheory.CategoryStruct.comp f.f.f (CategoryTheory.CategoryStruct.comp Q.p.f h))","decl":"@[reassoc]\nlemma p_comm_f {P Q : Karoubi (Karoubi C)} (f : P ‚ü∂ Q) : P.p.f ‚â´ f.f.f = f.f.f ‚â´ Q.p.f := by\n  simpa only [hom_ext_iff, comp_f] using p_comm f\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.p_comm_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP Q : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\nf : Quiver.Hom P Q\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp P.p.f f.f.f) (CategoryTheory.CategoryStruct.comp f.f.f Q.p.f)","decl":"@[reassoc]\nlemma p_comm_f {P Q : Karoubi (Karoubi C)} (f : P ‚ü∂ Q) : P.p.f ‚â´ f.f.f = f.f.f ‚â´ Q.p.f := by\n  simpa only [hom_ext_iff, comp_f] using p_comm f\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.inverse_obj_p","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.inverse C).obj P).p P.p.f","decl":"/-- The canonical functor `Karoubi (Karoubi C) ‚•§ Karoubi C` -/\n@[simps]\ndef inverse : Karoubi (Karoubi C) ‚•§ Karoubi C where\n  obj P := ‚ü®P.X.X, P.p.f, by simpa only [hom_ext_iff] using P.idem‚ü©\n  map f := ‚ü®f.f.f, by simpa only [hom_ext_iff] using f.comm‚ü©\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.inverse_map_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX‚úù Y‚úù : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.inverse C).map f).f f.f.f","decl":"/-- The canonical functor `Karoubi (Karoubi C) ‚•§ Karoubi C` -/\n@[simps]\ndef inverse : Karoubi (Karoubi C) ‚•§ Karoubi C where\n  obj P := ‚ü®P.X.X, P.p.f, by simpa only [hom_ext_iff] using P.idem‚ü©\n  map f := ‚ü®f.f.f, by simpa only [hom_ext_iff] using f.comm‚ü©\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.inverse_obj_X","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.inverse C).obj P).X P.X.X","decl":"/-- The canonical functor `Karoubi (Karoubi C) ‚•§ Karoubi C` -/\n@[simps]\ndef inverse : Karoubi (Karoubi C) ‚•§ Karoubi C where\n  obj P := ‚ü®P.X.X, P.p.f, by simpa only [hom_ext_iff] using P.idem‚ü©\n  map f := ‚ü®f.f.f, by simpa only [hom_ext_iff] using f.comm‚ü©\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.instAdditiveKaroubiInverse","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_2, u_1} C\ninst‚úù : CategoryTheory.Preadditive C\n‚ä¢ (CategoryTheory.Idempotents.KaroubiKaroubi.inverse C).Additive","decl":"instance [Preadditive C] : Functor.Additive (inverse C) where\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.unitIso_inv_app_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX : CategoryTheory.Idempotents.Karoubi C\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.unitIso C).inv.app X).f X.p","decl":"/-- The unit isomorphism of the equivalence -/\n@[simps!]\ndef unitIso : ùü≠ (Karoubi C) ‚âÖ toKaroubi (Karoubi C) ‚ãô inverse C :=\n  eqToIso (Functor.ext (by aesop_cat) (by simp))\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.unitIso_hom_app_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX : CategoryTheory.Idempotents.Karoubi C\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.unitIso C).hom.app X).f X.p","decl":"/-- The unit isomorphism of the equivalence -/\n@[simps!]\ndef unitIso : ùü≠ (Karoubi C) ‚âÖ toKaroubi (Karoubi C) ‚ãô inverse C :=\n  eqToIso (Functor.ext (by aesop_cat) (by simp))\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.counitIso_hom_app_f_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.counitIso C).hom.app P).f.f P.p.f","decl":"attribute [local simp] p_comm_f in\n/-- The counit isomorphism of the equivalence -/\n@[simps]\ndef counitIso : inverse C ‚ãô toKaroubi (Karoubi C) ‚âÖ ùü≠ (Karoubi (Karoubi C)) where\n  hom := { app := fun P => { f := { f := P.p.1 } } }\n  inv := { app := fun P => { f := { f := P.p.1 }  } }\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.counitIso_inv_app_f_f","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nP : CategoryTheory.Idempotents.Karoubi (CategoryTheory.Idempotents.Karoubi C)\n‚ä¢ Eq ((CategoryTheory.Idempotents.KaroubiKaroubi.counitIso C).inv.app P).f.f P.p.f","decl":"attribute [local simp] p_comm_f in\n/-- The counit isomorphism of the equivalence -/\n@[simps]\ndef counitIso : inverse C ‚ãô toKaroubi (Karoubi C) ‚âÖ ùü≠ (Karoubi (Karoubi C)) where\n  hom := { app := fun P => { f := { f := P.p.1 } } }\n  inv := { app := fun P => { f := { f := P.p.1 }  } }\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.equivalence_counitIso","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\n‚ä¢ Eq (CategoryTheory.Idempotents.KaroubiKaroubi.equivalence C).counitIso (CategoryTheory.Idempotents.KaroubiKaroubi.counitIso C)","decl":"/-- The equivalence `Karoubi C ‚âå Karoubi (Karoubi C)` -/\n@[simps]\ndef equivalence : Karoubi C ‚âå Karoubi (Karoubi C) where\n  functor := toKaroubi (Karoubi C)\n  inverse := KaroubiKaroubi.inverse C\n  unitIso := KaroubiKaroubi.unitIso C\n  counitIso := KaroubiKaroubi.counitIso C\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.equivalence_unitIso","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\n‚ä¢ Eq (CategoryTheory.Idempotents.KaroubiKaroubi.equivalence C).unitIso (CategoryTheory.Idempotents.KaroubiKaroubi.unitIso C)","decl":"/-- The equivalence `Karoubi C ‚âå Karoubi (Karoubi C)` -/\n@[simps]\ndef equivalence : Karoubi C ‚âå Karoubi (Karoubi C) where\n  functor := toKaroubi (Karoubi C)\n  inverse := KaroubiKaroubi.inverse C\n  unitIso := KaroubiKaroubi.unitIso C\n  counitIso := KaroubiKaroubi.counitIso C\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.equivalence_functor","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\n‚ä¢ Eq (CategoryTheory.Idempotents.KaroubiKaroubi.equivalence C).functor (CategoryTheory.Idempotents.toKaroubi (CategoryTheory.Idempotents.Karoubi C))","decl":"/-- The equivalence `Karoubi C ‚âå Karoubi (Karoubi C)` -/\n@[simps]\ndef equivalence : Karoubi C ‚âå Karoubi (Karoubi C) where\n  functor := toKaroubi (Karoubi C)\n  inverse := KaroubiKaroubi.inverse C\n  unitIso := KaroubiKaroubi.unitIso C\n  counitIso := KaroubiKaroubi.counitIso C\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.equivalence_inverse","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\n‚ä¢ Eq (CategoryTheory.Idempotents.KaroubiKaroubi.equivalence C).inverse (CategoryTheory.Idempotents.KaroubiKaroubi.inverse C)","decl":"/-- The equivalence `Karoubi C ‚âå Karoubi (Karoubi C)` -/\n@[simps]\ndef equivalence : Karoubi C ‚âå Karoubi (Karoubi C) where\n  functor := toKaroubi (Karoubi C)\n  inverse := KaroubiKaroubi.inverse C\n  unitIso := KaroubiKaroubi.unitIso C\n  counitIso := KaroubiKaroubi.counitIso C\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.equivalence.additive_functor","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_2, u_1} C\ninst‚úù : CategoryTheory.Preadditive C\n‚ä¢ (CategoryTheory.Idempotents.KaroubiKaroubi.equivalence C).functor.Additive","decl":"instance equivalence.additive_functor [Preadditive C] :\n  Functor.Additive (equivalence C).functor where\n\n"}
{"name":"CategoryTheory.Idempotents.KaroubiKaroubi.equivalence.additive_inverse","module":"Mathlib.CategoryTheory.Idempotents.KaroubiKaroubi","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_2, u_1} C\ninst‚úù : CategoryTheory.Preadditive C\n‚ä¢ (CategoryTheory.Idempotents.KaroubiKaroubi.equivalence C).inverse.Additive","decl":"instance equivalence.additive_inverse [Preadditive C] :\n  Functor.Additive (equivalence C).inverse where\n\n"}
