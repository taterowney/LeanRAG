{"name":"MeasureTheory.Measure.everywherePosSubset_subset","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\n⊢ HasSubset.Subset (μ.everywherePosSubset s) s","decl":"lemma everywherePosSubset_subset (μ : Measure α) (s : Set α) : μ.everywherePosSubset s ⊆ s :=\n  fun _x hx ↦ hx.1\n\n"}
{"name":"MeasureTheory.Measure.exists_isOpen_everywherePosSubset_eq_diff","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\n⊢ Exists fun u => And (IsOpen u) (Eq (μ.everywherePosSubset s) (SDiff.sdiff s u))","decl":"/-- The everywhere positive subset of a set is obtained by removing an open set. -/\nlemma exists_isOpen_everywherePosSubset_eq_diff (μ : Measure α) (s : Set α) :\n    ∃ u, IsOpen u ∧ μ.everywherePosSubset s = s \\ u := by\n  refine ⟨{x | ∃ n ∈ 𝓝[s] x, μ n = 0}, ?_, by ext x; simp [everywherePosSubset, zero_lt_iff]⟩\n  rw [isOpen_iff_mem_nhds]\n  intro x ⟨n, ns, hx⟩\n  rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 ns with ⟨v, vx, hv⟩\n  rcases mem_nhds_iff.1 vx with ⟨w, wv, w_open, xw⟩\n  have A : w ⊆ {x | ∃ n ∈ 𝓝[s] x, μ n = 0} := by\n    intro y yw\n    refine ⟨s ∩ w, inter_mem_nhdsWithin _ (w_open.mem_nhds yw), measure_mono_null ?_ hx⟩\n    rw [inter_comm]\n    exact (inter_subset_inter_left _ wv).trans hv\n  have B : w ∈ 𝓝 x := w_open.mem_nhds xw\n  exact mem_of_superset B A\n\n"}
{"name":"MeasurableSet.everywherePosSubset","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : OpensMeasurableSpace α\nhs : MeasurableSet s\n⊢ MeasurableSet (μ.everywherePosSubset s)","decl":"protected lemma _root_.MeasurableSet.everywherePosSubset [OpensMeasurableSpace α]\n    (hs : MeasurableSet s) :\n    MeasurableSet (μ.everywherePosSubset s) := by\n  rcases exists_isOpen_everywherePosSubset_eq_diff μ s with ⟨u, u_open, hu⟩\n  rw [hu]\n  exact hs.diff u_open.measurableSet\n\n"}
{"name":"IsClosed.everywherePosSubset","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhs : IsClosed s\n⊢ IsClosed (μ.everywherePosSubset s)","decl":"protected lemma _root_.IsClosed.everywherePosSubset (hs : IsClosed s) :\n    IsClosed (μ.everywherePosSubset s) := by\n  rcases exists_isOpen_everywherePosSubset_eq_diff μ s with ⟨u, u_open, hu⟩\n  rw [hu]\n  exact hs.sdiff u_open\n\n"}
{"name":"IsCompact.everywherePosSubset","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhs : IsCompact s\n⊢ IsCompact (μ.everywherePosSubset s)","decl":"protected lemma _root_.IsCompact.everywherePosSubset (hs : IsCompact s) :\n    IsCompact (μ.everywherePosSubset s) := by\n  rcases exists_isOpen_everywherePosSubset_eq_diff μ s with ⟨u, u_open, hu⟩\n  rw [hu]\n  exact hs.diff u_open\n\n"}
{"name":"MeasureTheory.Measure.measure_eq_zero_of_subset_diff_everywherePosSubset","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns k : Set α\nhk : IsCompact k\nh'k : HasSubset.Subset k (SDiff.sdiff s (μ.everywherePosSubset s))\n⊢ Eq (μ k) 0","decl":"/-- Any compact set contained in `s \\ μ.everywherePosSubset s` has zero measure. -/\nlemma measure_eq_zero_of_subset_diff_everywherePosSubset\n    (hk : IsCompact k) (h'k : k ⊆ s \\ μ.everywherePosSubset s) : μ k = 0 := by\n  apply hk.induction_on (p := fun t ↦ μ t = 0)\n  · exact measure_empty\n  · exact fun s t hst ht ↦ measure_mono_null hst ht\n  · exact fun s t hs ht ↦ measure_union_null hs ht\n  · intro x hx\n    obtain ⟨u, ux, hu⟩ : ∃ u ∈ 𝓝[s] x, μ u = 0 := by\n      simpa [everywherePosSubset, (h'k hx).1] using (h'k hx).2\n    exact ⟨u, nhdsWithin_mono x (h'k.trans diff_subset) ux, hu⟩\n\n"}
{"name":"MeasureTheory.Measure.everywherePosSubset_ae_eq","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝³ : TopologicalSpace α\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : μ.InnerRegular\nhs : MeasurableSet s\n⊢ (MeasureTheory.ae μ).EventuallyEq (μ.everywherePosSubset s) s","decl":"/-- In a space with an inner regular measure, any measurable set coincides almost everywhere with\nits everywhere positive subset. -/\nlemma everywherePosSubset_ae_eq [OpensMeasurableSpace α] [InnerRegular μ] (hs : MeasurableSet s) :\n    μ.everywherePosSubset s =ᵐ[μ] s := by\n  simp only [ae_eq_set, diff_eq_empty.mpr (everywherePosSubset_subset μ s), measure_empty,\n    true_and, (hs.diff hs.everywherePosSubset).measure_eq_iSup_isCompact, ENNReal.iSup_eq_zero]\n  intro k hk h'k\n  exact measure_eq_zero_of_subset_diff_everywherePosSubset h'k hk\n\n"}
{"name":"MeasureTheory.Measure.everywherePosSubset_ae_eq_of_measure_ne_top","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝³ : TopologicalSpace α\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : μ.InnerRegularCompactLTTop\nhs : MeasurableSet s\nh's : Ne (μ s) Top.top\n⊢ (MeasureTheory.ae μ).EventuallyEq (μ.everywherePosSubset s) s","decl":"/-- In a space with an inner regular measure for finite measure sets, any measurable set of finite\nmeasure coincides almost everywhere with its everywhere positive subset. -/\nlemma everywherePosSubset_ae_eq_of_measure_ne_top\n    [OpensMeasurableSpace α] [InnerRegularCompactLTTop μ] (hs : MeasurableSet s) (h's : μ s ≠ ∞) :\n    μ.everywherePosSubset s =ᵐ[μ] s := by\n  have A : μ (s \\ μ.everywherePosSubset s) ≠ ∞ :=\n    ((measure_mono diff_subset).trans_lt h's.lt_top).ne\n  simp only [ae_eq_set, diff_eq_empty.mpr (everywherePosSubset_subset μ s), measure_empty,\n    true_and, (hs.diff hs.everywherePosSubset).measure_eq_iSup_isCompact_of_ne_top A,\n    ENNReal.iSup_eq_zero]\n  intro k hk h'k\n  exact measure_eq_zero_of_subset_diff_everywherePosSubset h'k hk\n\n"}
{"name":"MeasureTheory.Measure.isEverywherePos_everywherePosSubset","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝³ : TopologicalSpace α\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : μ.InnerRegular\nhs : MeasurableSet s\n⊢ μ.IsEverywherePos (μ.everywherePosSubset s)","decl":"/-- In a space with an inner regular measure, the everywhere positive subset of a measurable set\nis itself everywhere positive. This is not obvious as `μ.everywherePosSubset s` is defined as\nthe points whose neighborhoods intersect `s` along positive measure subsets, but this does not\nsay they also intersect `μ.everywherePosSubset s` along positive measure subsets. -/\nlemma isEverywherePos_everywherePosSubset\n    [OpensMeasurableSpace α] [InnerRegular μ] (hs : MeasurableSet s) :\n    μ.IsEverywherePos (μ.everywherePosSubset s) := by\n  intro x hx n hn\n  rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 hn with ⟨u, u_mem, hu⟩\n  have A : 0 < μ (u ∩ s) := by\n    have : u ∩ s ∈ 𝓝[s] x := by rw [inter_comm]; exact inter_mem_nhdsWithin s u_mem\n    exact hx.2 _ this\n  have B : (u ∩ μ.everywherePosSubset s : Set α) =ᵐ[μ] (u ∩ s : Set α) :=\n    ae_eq_set_inter (ae_eq_refl _) (everywherePosSubset_ae_eq hs)\n  rw [← B.measure_eq] at A\n  exact A.trans_le (measure_mono hu)\n\n"}
{"name":"MeasureTheory.Measure.isEverywherePos_everywherePosSubset_of_measure_ne_top","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝³ : TopologicalSpace α\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : μ.InnerRegularCompactLTTop\nhs : MeasurableSet s\nh's : Ne (μ s) Top.top\n⊢ μ.IsEverywherePos (μ.everywherePosSubset s)","decl":"/-- In a space with an inner regular measure for finite measure sets, the everywhere positive subset\nof a measurable set of finite measure is itself everywhere positive. This is not obvious as\n`μ.everywherePosSubset s` is defined as the points whose neighborhoods intersect `s` along positive\nmeasure subsets, but this does not say they also intersect `μ.everywherePosSubset s` along positive\nmeasure subsets. -/\nlemma isEverywherePos_everywherePosSubset_of_measure_ne_top\n    [OpensMeasurableSpace α] [InnerRegularCompactLTTop μ] (hs : MeasurableSet s) (h's : μ s ≠ ∞) :\n    μ.IsEverywherePos (μ.everywherePosSubset s) := by\n  intro x hx n hn\n  rcases mem_nhdsWithin_iff_exists_mem_nhds_inter.1 hn with ⟨u, u_mem, hu⟩\n  have A : 0 < μ (u ∩ s) := by\n    have : u ∩ s ∈ 𝓝[s] x := by rw [inter_comm]; exact inter_mem_nhdsWithin s u_mem\n    exact hx.2 _ this\n  have B : (u ∩ μ.everywherePosSubset s : Set α) =ᵐ[μ] (u ∩ s : Set α) :=\n    ae_eq_set_inter (ae_eq_refl _) (everywherePosSubset_ae_eq_of_measure_ne_top hs h's)\n  rw [← B.measure_eq] at A\n  exact A.trans_le (measure_mono hu)\n\n"}
{"name":"MeasureTheory.Measure.IsEverywherePos.smul_measure","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhs : μ.IsEverywherePos s\nc : ENNReal\nhc : Ne c 0\n⊢ (HSMul.hSMul c μ).IsEverywherePos s","decl":"lemma IsEverywherePos.smul_measure (hs : IsEverywherePos μ s) {c : ℝ≥0∞} (hc : c ≠ 0) :\n    IsEverywherePos (c • μ) s :=\n  fun x hx n hn ↦ by simpa [hc.bot_lt, hs x hx n hn] using hc.bot_lt\n\n"}
{"name":"MeasureTheory.Measure.IsEverywherePos.smul_measure_nnreal","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhs : μ.IsEverywherePos s\nc : NNReal\nhc : Ne c 0\n⊢ (HSMul.hSMul c μ).IsEverywherePos s","decl":"lemma IsEverywherePos.smul_measure_nnreal (hs : IsEverywherePos μ s) {c : ℝ≥0} (hc : c ≠ 0) :\n    IsEverywherePos (c • μ) s :=\n  hs.smul_measure (by simpa using hc)\n\n"}
{"name":"MeasureTheory.Measure.IsEverywherePos.of_forall_exists_nhds_eq","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ns : Set α\nhs : μ.IsEverywherePos s\nh : ∀ (x : α), Membership.mem s x → Exists fun t => And (Membership.mem (nhds x) t) (∀ (u : Set α), HasSubset.Subset u t → Eq (ν u) (μ u))\n⊢ ν.IsEverywherePos s","decl":"/-- If two measures coincide locally, then a set which is everywhere positive for the former is\nalso everywhere positive for the latter. -/\nlemma IsEverywherePos.of_forall_exists_nhds_eq (hs : IsEverywherePos μ s)\n    (h : ∀ x ∈ s, ∃ t ∈ 𝓝 x, ∀ u ⊆ t, ν u = μ u) : IsEverywherePos ν s := by\n  intro x hx n hn\n  rcases h x hx with ⟨t, t_mem, ht⟩\n  refine lt_of_lt_of_le ?_ (measure_mono (inter_subset_left (t := t)))\n  rw [ht (n ∩ t) inter_subset_right]\n  exact hs x hx _ (inter_mem hn (mem_nhdsWithin_of_mem_nhds t_mem))\n\n"}
{"name":"MeasureTheory.Measure.isEverywherePos_iff_of_forall_exists_nhds_eq","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ns : Set α\nh : ∀ (x : α), Membership.mem s x → Exists fun t => And (Membership.mem (nhds x) t) (∀ (u : Set α), HasSubset.Subset u t → Eq (ν u) (μ u))\n⊢ Iff (ν.IsEverywherePos s) (μ.IsEverywherePos s)","decl":"/-- If two measures coincide locally, then a set is everywhere positive for the former iff it is\neverywhere positive for the latter. -/\nlemma isEverywherePos_iff_of_forall_exists_nhds_eq (h : ∀ x ∈ s, ∃ t ∈ 𝓝 x, ∀ u ⊆ t, ν u = μ u) :\n    IsEverywherePos ν s ↔ IsEverywherePos μ s := by\n  refine ⟨fun H ↦ H.of_forall_exists_nhds_eq ?_, fun H ↦ H.of_forall_exists_nhds_eq h⟩\n  intro x hx\n  rcases h x hx with ⟨t, ht, h't⟩\n  exact ⟨t, ht, fun u hu ↦ (h't u hu).symm⟩\n\n"}
{"name":"IsOpen.isEverywherePos","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : μ.IsOpenPosMeasure\nhs : IsOpen s\n⊢ μ.IsEverywherePos s","decl":"/-- An open set is everywhere positive for a measure which is positive on open sets. -/\nlemma _root_.IsOpen.isEverywherePos [IsOpenPosMeasure μ] (hs : IsOpen s) : IsEverywherePos μ s := by\n  intro x xs n hn\n  rcases mem_nhdsWithin.1 hn with ⟨u, u_open, xu, hu⟩\n  apply lt_of_lt_of_le _ (measure_mono hu)\n  exact (u_open.inter hs).measure_pos μ ⟨x, ⟨xu, xs⟩⟩\n\n"}
{"name":"MeasureTheory.Measure.IsEverywherePos.IsGdelta_of_isMulLeftInvariant","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"G : Type u_2\ninst✝⁸ : Group G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalGroup G\ninst✝⁵ : LocallyCompactSpace G\ninst✝⁴ : MeasurableSpace G\ninst✝³ : BorelSpace G\nμ : MeasureTheory.Measure G\ninst✝² : μ.IsMulLeftInvariant\ninst✝¹ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝ : μ.InnerRegularCompactLTTop\nk : Set G\nh : μ.IsEverywherePos k\nhk : IsCompact k\nh'k : IsClosed k\n⊢ IsGδ k","decl":"/-- If a compact closed set is everywhere positive with respect to a left-invariant measure on a\ntopological group, then it is a Gδ set. This is nontrivial, as there is no second-countability or\nmetrizability assumption in the statement, so a general compact closed set has no reason to be\na countable intersection of open sets. -/\n@[to_additive]\nlemma IsEverywherePos.IsGdelta_of_isMulLeftInvariant\n    {k : Set G} (h : μ.IsEverywherePos k) (hk : IsCompact k) (h'k : IsClosed k) :\n    IsGδ k := by\n  /- Consider a decreasing sequence of open neighborhoods `Vₙ` of the identity, such that `g k \\ k`\n  has small measure for all `g ∈ Vₙ`. We claim that `k = ⋂ Vₙ k`, which proves\n  the lemma as the sets on the right are open. The inclusion `⊆` is trivial.\n  Let us show the converse. Take `x` in the intersection. For each `n`, write `x = vₙ yₙ` with\n  `vₙ ∈ Vₙ` and `yₙ ∈ k`. Let `z ∈ k` be a cluster value of `yₙ`, by compactness. As multiplication\n  by `vₙ = x yₙ⁻¹ ∈ Vₙ` changes the measure of `k` by very little, passing to the limit we get\n  `μ (x z⁻¹ k \\ k) = 0`. By invariance of the measure under `z x ⁻¹`, we get `μ (k \\ z x⁻¹ k) = 0`.\n  Assume `x ∉ k`. Then `z ∈ k \\ z x⁻¹ k`. Even more, this set is a neighborhood of `z` within `k`\n  (as `z x⁻¹ k` is closed), and it has zero measure. This contradicts the fact that `k` has\n  positive measure around the point `z`. -/\n  obtain ⟨u, -, u_mem, u_lim⟩ : ∃ u, StrictAnti u ∧ (∀ (n : ℕ), u n ∈ Ioo 0 1)\n    ∧ Tendsto u atTop (𝓝 0) := exists_seq_strictAnti_tendsto' (zero_lt_one : (0 : ℝ≥0∞) < 1)\n  have : ∀ n, ∃ (W : Set G), IsOpen W ∧ 1 ∈ W ∧ ∀ g ∈ W * W, μ ((g • k) \\ k) < u n :=\n    fun n ↦ exists_open_nhds_one_mul_subset\n      (eventually_nhds_one_measure_smul_diff_lt hk h'k (u_mem n).1.ne')\n  choose W W_open mem_W hW using this\n  let V n := ⋂ i ∈ Finset.range n, W i\n  suffices ⋂ n, V n * k ⊆ k by\n    replace : k = ⋂ n, V n * k := by\n      apply Subset.antisymm (subset_iInter_iff.2 (fun n ↦ ?_)) this\n      exact subset_mul_right k (by simp [V, mem_W])\n    rw [this]\n    refine .iInter_of_isOpen fun n ↦ ?_\n    exact .mul_right (isOpen_biInter_finset (fun i _hi ↦ W_open i))\n  intro x hx\n  choose v hv y hy hvy using mem_iInter.1 hx\n  obtain ⟨z, zk, hz⟩ : ∃ z ∈ k, MapClusterPt z atTop y := hk.exists_mapClusterPt (by simp [hy])\n  have A n : μ (((x * z ⁻¹) • k) \\ k) ≤ u n := by\n    apply le_of_lt (hW _ _ ?_)\n    have : W n * {z} ∈ 𝓝 z := (IsOpen.mul_right (W_open n)).mem_nhds (by simp [mem_W])\n    obtain ⟨i, hi, ni⟩ : ∃ i, y i ∈ W n * {z} ∧ n < i :=\n      ((mapClusterPt_iff.1 hz _ this).and_eventually (eventually_gt_atTop n)).exists\n    refine ⟨x * (y i) ⁻¹, ?_, y i * z⁻¹, by simpa using hi, by group⟩\n    have I : V i ⊆ W n := iInter₂_subset n (by simp [ni])\n    have J : x * (y i) ⁻¹ ∈ V i := by simpa [← hvy i] using hv i\n    exact I J\n  have B : μ (((x * z ⁻¹) • k) \\ k) = 0 :=\n    le_antisymm (ge_of_tendsto u_lim (Eventually.of_forall A)) bot_le\n  have C : μ (k \\ (z * x⁻¹) • k) = 0 := by\n    have : μ ((z * x⁻¹) • (((x * z ⁻¹) • k) \\ k)) = 0 := by rwa [measure_smul]\n    rw [← this, smul_set_sdiff, smul_smul]\n    group\n    simp\n  by_contra H\n  have : k ∩ ((z * x⁻¹) • k)ᶜ ∈ 𝓝[k] z := by\n    apply inter_mem_nhdsWithin k\n    apply IsOpen.mem_nhds (by simpa using h'k.smul _)\n    simp only [mem_compl_iff]\n    contrapose! H\n    simpa [mem_smul_set_iff_inv_smul_mem] using H\n  have : 0 < μ (k \\ ((z * x⁻¹) • k)) := h z zk _ this\n  exact lt_irrefl _ (C.le.trans_lt this)\n\n"}
{"name":"MeasureTheory.Measure.IsEverywherePos.IsGdelta_of_isAddLeftInvariant","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"G : Type u_2\ninst✝⁸ : AddGroup G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalAddGroup G\ninst✝⁵ : LocallyCompactSpace G\ninst✝⁴ : MeasurableSpace G\ninst✝³ : BorelSpace G\nμ : MeasureTheory.Measure G\ninst✝² : μ.IsAddLeftInvariant\ninst✝¹ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝ : μ.InnerRegularCompactLTTop\nk : Set G\nh : μ.IsEverywherePos k\nhk : IsCompact k\nh'k : IsClosed k\n⊢ IsGδ k","decl":"/-- If a compact closed set is everywhere positive with respect to a left-invariant measure on a\ntopological group, then it is a Gδ set. This is nontrivial, as there is no second-countability or\nmetrizability assumption in the statement, so a general compact closed set has no reason to be\na countable intersection of open sets. -/\n@[to_additive]\nlemma IsEverywherePos.IsGdelta_of_isMulLeftInvariant\n    {k : Set G} (h : μ.IsEverywherePos k) (hk : IsCompact k) (h'k : IsClosed k) :\n    IsGδ k := by\n  /- Consider a decreasing sequence of open neighborhoods `Vₙ` of the identity, such that `g k \\ k`\n  has small measure for all `g ∈ Vₙ`. We claim that `k = ⋂ Vₙ k`, which proves\n  the lemma as the sets on the right are open. The inclusion `⊆` is trivial.\n  Let us show the converse. Take `x` in the intersection. For each `n`, write `x = vₙ yₙ` with\n  `vₙ ∈ Vₙ` and `yₙ ∈ k`. Let `z ∈ k` be a cluster value of `yₙ`, by compactness. As multiplication\n  by `vₙ = x yₙ⁻¹ ∈ Vₙ` changes the measure of `k` by very little, passing to the limit we get\n  `μ (x z⁻¹ k \\ k) = 0`. By invariance of the measure under `z x ⁻¹`, we get `μ (k \\ z x⁻¹ k) = 0`.\n  Assume `x ∉ k`. Then `z ∈ k \\ z x⁻¹ k`. Even more, this set is a neighborhood of `z` within `k`\n  (as `z x⁻¹ k` is closed), and it has zero measure. This contradicts the fact that `k` has\n  positive measure around the point `z`. -/\n  obtain ⟨u, -, u_mem, u_lim⟩ : ∃ u, StrictAnti u ∧ (∀ (n : ℕ), u n ∈ Ioo 0 1)\n    ∧ Tendsto u atTop (𝓝 0) := exists_seq_strictAnti_tendsto' (zero_lt_one : (0 : ℝ≥0∞) < 1)\n  have : ∀ n, ∃ (W : Set G), IsOpen W ∧ 1 ∈ W ∧ ∀ g ∈ W * W, μ ((g • k) \\ k) < u n :=\n    fun n ↦ exists_open_nhds_one_mul_subset\n      (eventually_nhds_one_measure_smul_diff_lt hk h'k (u_mem n).1.ne')\n  choose W W_open mem_W hW using this\n  let V n := ⋂ i ∈ Finset.range n, W i\n  suffices ⋂ n, V n * k ⊆ k by\n    replace : k = ⋂ n, V n * k := by\n      apply Subset.antisymm (subset_iInter_iff.2 (fun n ↦ ?_)) this\n      exact subset_mul_right k (by simp [V, mem_W])\n    rw [this]\n    refine .iInter_of_isOpen fun n ↦ ?_\n    exact .mul_right (isOpen_biInter_finset (fun i _hi ↦ W_open i))\n  intro x hx\n  choose v hv y hy hvy using mem_iInter.1 hx\n  obtain ⟨z, zk, hz⟩ : ∃ z ∈ k, MapClusterPt z atTop y := hk.exists_mapClusterPt (by simp [hy])\n  have A n : μ (((x * z ⁻¹) • k) \\ k) ≤ u n := by\n    apply le_of_lt (hW _ _ ?_)\n    have : W n * {z} ∈ 𝓝 z := (IsOpen.mul_right (W_open n)).mem_nhds (by simp [mem_W])\n    obtain ⟨i, hi, ni⟩ : ∃ i, y i ∈ W n * {z} ∧ n < i :=\n      ((mapClusterPt_iff.1 hz _ this).and_eventually (eventually_gt_atTop n)).exists\n    refine ⟨x * (y i) ⁻¹, ?_, y i * z⁻¹, by simpa using hi, by group⟩\n    have I : V i ⊆ W n := iInter₂_subset n (by simp [ni])\n    have J : x * (y i) ⁻¹ ∈ V i := by simpa [← hvy i] using hv i\n    exact I J\n  have B : μ (((x * z ⁻¹) • k) \\ k) = 0 :=\n    le_antisymm (ge_of_tendsto u_lim (Eventually.of_forall A)) bot_le\n  have C : μ (k \\ (z * x⁻¹) • k) = 0 := by\n    have : μ ((z * x⁻¹) • (((x * z ⁻¹) • k) \\ k)) = 0 := by rwa [measure_smul]\n    rw [← this, smul_set_sdiff, smul_smul]\n    group\n    simp\n  by_contra H\n  have : k ∩ ((z * x⁻¹) • k)ᶜ ∈ 𝓝[k] z := by\n    apply inter_mem_nhdsWithin k\n    apply IsOpen.mem_nhds (by simpa using h'k.smul _)\n    simp only [mem_compl_iff]\n    contrapose! H\n    simpa [mem_smul_set_iff_inv_smul_mem] using H\n  have : 0 < μ (k \\ ((z * x⁻¹) • k)) := h z zk _ this\n  exact lt_irrefl _ (C.le.trans_lt this)\n\n"}
{"name":"MeasureTheory.Measure.innerRegularWRT_preimage_one_hasCompactSupport_measure_ne_top_of_group","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"G : Type u_2\ninst✝⁸ : Group G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalGroup G\ninst✝⁵ : LocallyCompactSpace G\ninst✝⁴ : MeasurableSpace G\ninst✝³ : BorelSpace G\nμ : MeasureTheory.Measure G\ninst✝² : μ.IsMulLeftInvariant\ninst✝¹ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝ : μ.InnerRegularCompactLTTop\n⊢ μ.InnerRegularWRT (fun s => Exists fun f => And (Continuous f) (And (HasCompactSupport f) (Eq s (Set.preimage f (Singleton.singleton 1))))) fun s => And (MeasurableSet s) (Ne (μ s) Top.top)","decl":"/-- **Halmos' theorem: Haar measure is completion regular.** More precisely, any finite measure\nset can be approximated from inside by a level set of a continuous function with compact support. -/\n@[to_additive innerRegularWRT_preimage_one_hasCompactSupport_measure_ne_top_of_addGroup]\ntheorem innerRegularWRT_preimage_one_hasCompactSupport_measure_ne_top_of_group :\n    InnerRegularWRT μ (fun s ↦ ∃ (f : G → ℝ), Continuous f ∧ HasCompactSupport f ∧ s = f ⁻¹' {1})\n    (fun s ↦ MeasurableSet s ∧ μ s ≠ ∞) := by\n  /- First, approximate a measurable set from inside by a compact closed set `K`. Then notice that\n  the everywhere positive subset of `K` is a Gδ,\n  by Lemma `IsEverywherePos.IsGdelta_of_isMulLeftInvariant`, and therefore the level set of a\n  continuous compactly supported function. Moreover, it has the same measure as `K`. -/\n  apply InnerRegularWRT.trans _ innerRegularWRT_isCompact_isClosed_measure_ne_top_of_group\n  intro K ⟨K_comp, K_closed⟩ r hr\n  let L := μ.everywherePosSubset K\n  have L_comp : IsCompact L := K_comp.everywherePosSubset\n  have L_closed : IsClosed L := K_closed.everywherePosSubset\n  refine ⟨L, everywherePosSubset_subset μ K, ?_, ?_⟩\n  · have : μ.IsEverywherePos L :=\n      isEverywherePos_everywherePosSubset_of_measure_ne_top K_closed.measurableSet\n      K_comp.measure_lt_top.ne\n    have L_Gδ : IsGδ L := this.IsGdelta_of_isMulLeftInvariant L_comp L_closed\n    obtain ⟨⟨f, f_cont⟩, Lf, -, f_comp, -⟩ : ∃ f : C(G, ℝ), L = f ⁻¹' {1} ∧ EqOn f 0 ∅\n        ∧ HasCompactSupport f ∧ ∀ x, f x ∈ Icc (0 : ℝ) 1 :=\n      exists_continuous_one_zero_of_isCompact_of_isGδ L_comp L_Gδ isClosed_empty\n        (disjoint_empty L)\n    exact ⟨f, f_cont, f_comp, Lf⟩\n  · convert hr using 1\n    apply measure_congr\n    exact everywherePosSubset_ae_eq_of_measure_ne_top K_closed.measurableSet\n      K_comp.measure_lt_top.ne\n\n"}
{"name":"MeasureTheory.Measure.innerRegularWRT_preimage_one_hasCompactSupport_measure_ne_top_of_addGroup","module":"Mathlib.MeasureTheory.Measure.EverywherePos","initialProofState":"G : Type u_2\ninst✝⁸ : AddGroup G\ninst✝⁷ : TopologicalSpace G\ninst✝⁶ : TopologicalAddGroup G\ninst✝⁵ : LocallyCompactSpace G\ninst✝⁴ : MeasurableSpace G\ninst✝³ : BorelSpace G\nμ : MeasureTheory.Measure G\ninst✝² : μ.IsAddLeftInvariant\ninst✝¹ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝ : μ.InnerRegularCompactLTTop\n⊢ μ.InnerRegularWRT (fun s => Exists fun f => And (Continuous f) (And (HasCompactSupport f) (Eq s (Set.preimage f (Singleton.singleton 1))))) fun s => And (MeasurableSet s) (Ne (μ s) Top.top)","decl":"/-- **Halmos' theorem: Haar measure is completion regular.** More precisely, any finite measure\nset can be approximated from inside by a level set of a continuous function with compact support. -/\n@[to_additive innerRegularWRT_preimage_one_hasCompactSupport_measure_ne_top_of_addGroup]\ntheorem innerRegularWRT_preimage_one_hasCompactSupport_measure_ne_top_of_group :\n    InnerRegularWRT μ (fun s ↦ ∃ (f : G → ℝ), Continuous f ∧ HasCompactSupport f ∧ s = f ⁻¹' {1})\n    (fun s ↦ MeasurableSet s ∧ μ s ≠ ∞) := by\n  /- First, approximate a measurable set from inside by a compact closed set `K`. Then notice that\n  the everywhere positive subset of `K` is a Gδ,\n  by Lemma `IsEverywherePos.IsGdelta_of_isMulLeftInvariant`, and therefore the level set of a\n  continuous compactly supported function. Moreover, it has the same measure as `K`. -/\n  apply InnerRegularWRT.trans _ innerRegularWRT_isCompact_isClosed_measure_ne_top_of_group\n  intro K ⟨K_comp, K_closed⟩ r hr\n  let L := μ.everywherePosSubset K\n  have L_comp : IsCompact L := K_comp.everywherePosSubset\n  have L_closed : IsClosed L := K_closed.everywherePosSubset\n  refine ⟨L, everywherePosSubset_subset μ K, ?_, ?_⟩\n  · have : μ.IsEverywherePos L :=\n      isEverywherePos_everywherePosSubset_of_measure_ne_top K_closed.measurableSet\n      K_comp.measure_lt_top.ne\n    have L_Gδ : IsGδ L := this.IsGdelta_of_isMulLeftInvariant L_comp L_closed\n    obtain ⟨⟨f, f_cont⟩, Lf, -, f_comp, -⟩ : ∃ f : C(G, ℝ), L = f ⁻¹' {1} ∧ EqOn f 0 ∅\n        ∧ HasCompactSupport f ∧ ∀ x, f x ∈ Icc (0 : ℝ) 1 :=\n      exists_continuous_one_zero_of_isCompact_of_isGδ L_comp L_Gδ isClosed_empty\n        (disjoint_empty L)\n    exact ⟨f, f_cont, f_comp, Lf⟩\n  · convert hr using 1\n    apply measure_congr\n    exact everywherePosSubset_ae_eq_of_measure_ne_top K_closed.measurableSet\n      K_comp.measure_lt_top.ne\n\n"}
