{"name":"FreeAddMonoid.symbols_zero","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\n⊢ Eq (FreeAddMonoid.symbols 0) EmptyCollection.emptyCollection","decl":"@[to_additive (attr := simp)]\ntheorem symbols_one : symbols (1 : FreeMonoid α) = ∅ := rfl\n\n"}
{"name":"FreeMonoid.symbols_one","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\n⊢ Eq (FreeMonoid.symbols 1) EmptyCollection.emptyCollection","decl":"@[to_additive (attr := simp)]\ntheorem symbols_one : symbols (1 : FreeMonoid α) = ∅ := rfl\n\n"}
{"name":"FreeMonoid.symbols_of","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nm : α\n⊢ Eq (FreeMonoid.of m).symbols (Singleton.singleton m)","decl":"@[to_additive (attr := simp)]\ntheorem symbols_of {m : α} : symbols (of m) = {m} := rfl\n\n"}
{"name":"FreeAddMonoid.symbols_of","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nm : α\n⊢ Eq (FreeAddMonoid.of m).symbols (Singleton.singleton m)","decl":"@[to_additive (attr := simp)]\ntheorem symbols_of {m : α} : symbols (of m) = {m} := rfl\n\n"}
{"name":"FreeAddMonoid.symbols_add","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na b : FreeAddMonoid α\n⊢ Eq (HAdd.hAdd a b).symbols (Union.union a.symbols b.symbols)","decl":"@[to_additive (attr := simp)]\ntheorem symbols_mul {a b : FreeMonoid α} : symbols (a * b) = symbols a ∪ symbols b := by\n  simp only [symbols, List.mem_toFinset, Finset.mem_union]\n  apply List.toFinset_append\n\n"}
{"name":"FreeMonoid.symbols_mul","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na b : FreeMonoid α\n⊢ Eq (HMul.hMul a b).symbols (Union.union a.symbols b.symbols)","decl":"@[to_additive (attr := simp)]\ntheorem symbols_mul {a b : FreeMonoid α} : symbols (a * b) = symbols a ∪ symbols b := by\n  simp only [symbols, List.mem_toFinset, Finset.mem_union]\n  apply List.toFinset_append\n\n"}
{"name":"FreeAddMonoid.mem_symbols","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nm : α\na : FreeAddMonoid α\n⊢ Iff (Membership.mem a.symbols m) (Membership.mem a m)","decl":"@[to_additive (attr := simp)]\ntheorem mem_symbols {m : α} {a : FreeMonoid α} : m ∈ symbols a ↔ m ∈ a :=\n  List.mem_toFinset\n\n"}
{"name":"FreeMonoid.mem_symbols","module":"Mathlib.Algebra.FreeMonoid.Symbols","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nm : α\na : FreeMonoid α\n⊢ Iff (Membership.mem a.symbols m) (Membership.mem a m)","decl":"@[to_additive (attr := simp)]\ntheorem mem_symbols {m : α} {a : FreeMonoid α} : m ∈ symbols a ↔ m ∈ a :=\n  List.mem_toFinset\n\n"}
