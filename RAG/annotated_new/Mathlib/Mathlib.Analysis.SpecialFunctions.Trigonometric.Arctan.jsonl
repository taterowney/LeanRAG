{"name":"Real.tan_add","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : Or (And (∀ (k : Int), Ne x (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑k) 1) Real.pi) 2)) (∀ (l : Int), Ne y (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑l) 1) Real.pi) 2))) (And (Exists fun k => Eq x (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑k) 1) Real.pi) 2)) (Exists fun l => Eq y (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑l) 1) Real.pi) 2)))\n⊢ Eq (Real.tan (HAdd.hAdd x y)) (HDiv.hDiv (HAdd.hAdd (Real.tan x) (Real.tan y)) (HSub.hSub 1 (HMul.hMul (Real.tan x) (Real.tan y))))","decl":"theorem tan_add {x y : ℝ}\n    (h : ((∀ k : ℤ, x ≠ (2 * k + 1) * π / 2) ∧ ∀ l : ℤ, y ≠ (2 * l + 1) * π / 2) ∨\n      (∃ k : ℤ, x = (2 * k + 1) * π / 2) ∧ ∃ l : ℤ, y = (2 * l + 1) * π / 2) :\n    tan (x + y) = (tan x + tan y) / (1 - tan x * tan y) := by\n  simpa only [← Complex.ofReal_inj, Complex.ofReal_sub, Complex.ofReal_add, Complex.ofReal_div,\n    Complex.ofReal_mul, Complex.ofReal_tan] using\n    @Complex.tan_add (x : ℂ) (y : ℂ) (by convert h <;> norm_cast)\n\n"}
{"name":"Real.tan_add'","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : And (∀ (k : Int), Ne x (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑k) 1) Real.pi) 2)) (∀ (l : Int), Ne y (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑l) 1) Real.pi) 2))\n⊢ Eq (Real.tan (HAdd.hAdd x y)) (HDiv.hDiv (HAdd.hAdd (Real.tan x) (Real.tan y)) (HSub.hSub 1 (HMul.hMul (Real.tan x) (Real.tan y))))","decl":"theorem tan_add' {x y : ℝ}\n    (h : (∀ k : ℤ, x ≠ (2 * k + 1) * π / 2) ∧ ∀ l : ℤ, y ≠ (2 * l + 1) * π / 2) :\n    tan (x + y) = (tan x + tan y) / (1 - tan x * tan y) :=\n  tan_add (Or.inl h)\n\n"}
{"name":"Real.tan_two_mul","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (Real.tan (HMul.hMul 2 x)) (HDiv.hDiv (HMul.hMul 2 (Real.tan x)) (HSub.hSub 1 (HPow.hPow (Real.tan x) 2)))","decl":"theorem tan_two_mul {x : ℝ} : tan (2 * x) = 2 * tan x / (1 - tan x ^ 2) := by\n  have := @Complex.tan_two_mul x\n  norm_cast at *\n\n"}
{"name":"Real.tan_int_mul_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"n : Int\n⊢ Eq (Real.tan (HDiv.hDiv (HMul.hMul (↑n) Real.pi) 2)) 0","decl":"theorem tan_int_mul_pi_div_two (n : ℤ) : tan (n * π / 2) = 0 :=\n  tan_eq_zero_iff.mpr (by use n)\n\n"}
{"name":"Real.continuousOn_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ ContinuousOn Real.tan (setOf fun x => Ne (Real.cos x) 0)","decl":"theorem continuousOn_tan : ContinuousOn tan {x | cos x ≠ 0} := by\n  suffices ContinuousOn (fun x => sin x / cos x) {x | cos x ≠ 0} by\n    have h_eq : (fun x => sin x / cos x) = tan := by ext1 x; rw [tan_eq_sin_div_cos]\n    rwa [h_eq] at this\n  exact continuousOn_sin.div continuousOn_cos fun x => id\n\n"}
{"name":"Real.continuous_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Continuous fun x => Real.tan ↑x","decl":"@[continuity]\ntheorem continuous_tan : Continuous fun x : {x | cos x ≠ 0} => tan x :=\n  continuousOn_iff_continuous_restrict.1 continuousOn_tan\n\n"}
{"name":"Real.continuousOn_tan_Ioo","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ ContinuousOn Real.tan (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2))","decl":"theorem continuousOn_tan_Ioo : ContinuousOn tan (Ioo (-(π / 2)) (π / 2)) := by\n  refine ContinuousOn.mono continuousOn_tan fun x => ?_\n  simp only [and_imp, mem_Ioo, mem_setOf_eq, Ne]\n  rw [cos_eq_zero_iff]\n  rintro hx_gt hx_lt ⟨r, hxr_eq⟩\n  rcases le_or_lt 0 r with h | h\n  · rw [lt_iff_not_ge] at hx_lt\n    refine hx_lt ?_\n    rw [hxr_eq, ← one_mul (π / 2), mul_div_assoc, ge_iff_le, mul_le_mul_right (half_pos pi_pos)]\n    simp [h]\n  · rw [lt_iff_not_ge] at hx_gt\n    refine hx_gt ?_\n    rw [hxr_eq, ← one_mul (π / 2), mul_div_assoc, ge_iff_le, neg_mul_eq_neg_mul,\n      mul_le_mul_right (half_pos pi_pos)]\n    have hr_le : r ≤ -1 := by rwa [Int.lt_iff_add_one_le, ← le_neg_iff_add_nonpos_right] at h\n    rw [← le_sub_iff_add_le, mul_comm, ← le_div_iff₀]\n    · norm_num\n      rw [← Int.cast_one, ← Int.cast_neg]; norm_cast\n    · exact zero_lt_two\n\n"}
{"name":"Real.surjOn_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Set.SurjOn Real.tan (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) Set.univ","decl":"theorem surjOn_tan : SurjOn tan (Ioo (-(π / 2)) (π / 2)) univ :=\n  have := neg_lt_self pi_div_two_pos\n  continuousOn_tan_Ioo.surjOn_of_tendsto (nonempty_Ioo.2 this)\n    (by rw [tendsto_comp_coe_Ioo_atBot this]; exact tendsto_tan_neg_pi_div_two)\n    (by rw [tendsto_comp_coe_Ioo_atTop this]; exact tendsto_tan_pi_div_two)\n\n"}
{"name":"Real.tan_surjective","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Function.Surjective Real.tan","decl":"theorem tan_surjective : Function.Surjective tan := fun _ => surjOn_tan.subset_range trivial\n\n"}
{"name":"Real.image_tan_Ioo","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (Set.image Real.tan (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2))) Set.univ","decl":"theorem image_tan_Ioo : tan '' Ioo (-(π / 2)) (π / 2) = univ :=\n  univ_subset_iff.1 surjOn_tan\n\n"}
{"name":"Real.tan_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (Real.tan (Real.arctan x)) x","decl":"@[simp]\ntheorem tan_arctan (x : ℝ) : tan (arctan x) = x :=\n  tanOrderIso.apply_symm_apply x\n\n"}
{"name":"Real.arctan_mem_Ioo","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Membership.mem (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) (Real.arctan x)","decl":"theorem arctan_mem_Ioo (x : ℝ) : arctan x ∈ Ioo (-(π / 2)) (π / 2) :=\n  Subtype.coe_prop _\n\n"}
{"name":"Real.range_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (Set.range Real.arctan) (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2))","decl":"@[simp]\ntheorem range_arctan : range arctan = Ioo (-(π / 2)) (π / 2) :=\n  ((EquivLike.surjective _).range_comp _).trans Subtype.range_coe\n\n"}
{"name":"Real.arctan_tan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nhx₁ : LT.lt (Neg.neg (HDiv.hDiv Real.pi 2)) x\nhx₂ : LT.lt x (HDiv.hDiv Real.pi 2)\n⊢ Eq (Real.arctan (Real.tan x)) x","decl":"theorem arctan_tan {x : ℝ} (hx₁ : -(π / 2) < x) (hx₂ : x < π / 2) : arctan (tan x) = x :=\n  Subtype.ext_iff.1 <| tanOrderIso.symm_apply_apply ⟨x, hx₁, hx₂⟩\n\n"}
{"name":"Real.cos_arctan_pos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ LT.lt 0 (Real.cos (Real.arctan x))","decl":"theorem cos_arctan_pos (x : ℝ) : 0 < cos (arctan x) :=\n  cos_pos_of_mem_Ioo <| arctan_mem_Ioo x\n\n"}
{"name":"Real.cos_sq_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (HPow.hPow (Real.cos (Real.arctan x)) 2) (HDiv.hDiv 1 (HAdd.hAdd 1 (HPow.hPow x 2)))","decl":"theorem cos_sq_arctan (x : ℝ) : cos (arctan x) ^ 2 = 1 / (1 + x ^ 2) := by\n  rw_mod_cast [one_div, ← inv_one_add_tan_sq (cos_arctan_pos x).ne', tan_arctan]\n\n"}
{"name":"Real.sin_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (Real.sin (Real.arctan x)) (HDiv.hDiv x (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt)","decl":"theorem sin_arctan (x : ℝ) : sin (arctan x) = x / √(1 + x ^ 2) := by\n  rw_mod_cast [← tan_div_sqrt_one_add_tan_sq (cos_arctan_pos x), tan_arctan]\n\n"}
{"name":"Real.cos_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (Real.cos (Real.arctan x)) (HDiv.hDiv 1 (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt)","decl":"theorem cos_arctan (x : ℝ) : cos (arctan x) = 1 / √(1 + x ^ 2) := by\n  rw_mod_cast [one_div, ← inv_sqrt_one_add_tan_sq (cos_arctan_pos x), tan_arctan]\n\n"}
{"name":"Real.arctan_lt_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ LT.lt (Real.arctan x) (HDiv.hDiv Real.pi 2)","decl":"theorem arctan_lt_pi_div_two (x : ℝ) : arctan x < π / 2 :=\n  (arctan_mem_Ioo x).2\n\n"}
{"name":"Real.neg_pi_div_two_lt_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ LT.lt (Neg.neg (HDiv.hDiv Real.pi 2)) (Real.arctan x)","decl":"theorem neg_pi_div_two_lt_arctan (x : ℝ) : -(π / 2) < arctan x :=\n  (arctan_mem_Ioo x).1\n\n"}
{"name":"Real.arctan_eq_arcsin","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (Real.arctan x) (Real.arcsin (HDiv.hDiv x (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt))","decl":"theorem arctan_eq_arcsin (x : ℝ) : arctan x = arcsin (x / √(1 + x ^ 2)) :=\n  Eq.symm <| arcsin_eq_of_sin_eq (sin_arctan x) (mem_Icc_of_Ioo <| arctan_mem_Ioo x)\n\n"}
{"name":"Real.arcsin_eq_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : Membership.mem (Set.Ioo (-1) 1) x\n⊢ Eq (Real.arcsin x) (Real.arctan (HDiv.hDiv x (HSub.hSub 1 (HPow.hPow x 2)).sqrt))","decl":"theorem arcsin_eq_arctan {x : ℝ} (h : x ∈ Ioo (-(1 : ℝ)) 1) :\n    arcsin x = arctan (x / √(1 - x ^ 2)) := by\n  rw_mod_cast [arctan_eq_arcsin, div_pow, sq_sqrt, one_add_div, div_div, ← sqrt_mul,\n    mul_div_cancel₀, sub_add_cancel, sqrt_one, div_one] <;> simp at h <;> nlinarith [h.1, h.2]\n\n"}
{"name":"Real.arctan_zero","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (Real.arctan 0) 0","decl":"@[simp]\ntheorem arctan_zero : arctan 0 = 0 := by simp [arctan_eq_arcsin]\n\n"}
{"name":"Real.arctan_strictMono","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ StrictMono Real.arctan","decl":"@[mono]\ntheorem arctan_strictMono : StrictMono arctan := tanOrderIso.symm.strictMono\n\n"}
{"name":"Real.arctan_lt_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nhxy : LT.lt x y\n⊢ LT.lt (Real.arctan x) (Real.arctan y)","decl":"@[gcongr]\nlemma arctan_lt_arctan {x y : ℝ} (hxy : x < y) : arctan x < arctan y := arctan_strictMono hxy\n\n"}
{"name":"Real.arctan_le_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nhxy : LE.le x y\n⊢ LE.le (Real.arctan x) (Real.arctan y)","decl":"@[gcongr]\nlemma arctan_le_arctan {x y : ℝ} (hxy : x ≤ y) : arctan x ≤ arctan y :=\n  arctan_strictMono.monotone hxy\n\n"}
{"name":"Real.arctan_injective","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Function.Injective Real.arctan","decl":"theorem arctan_injective : arctan.Injective := arctan_strictMono.injective\n\n"}
{"name":"Real.arctan_eq_zero_iff","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arctan x) 0) (Eq x 0)","decl":"@[simp]\ntheorem arctan_eq_zero_iff {x : ℝ} : arctan x = 0 ↔ x = 0 :=\n  .trans (by rw [arctan_zero]) arctan_injective.eq_iff\n\n"}
{"name":"Real.tendsto_arctan_atTop","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Filter.Tendsto Real.arctan Filter.atTop (nhdsWithin (HDiv.hDiv Real.pi 2) (Set.Iio (HDiv.hDiv Real.pi 2)))","decl":"theorem tendsto_arctan_atTop : Tendsto arctan atTop (𝓝[<] (π / 2)) :=\n  tendsto_Ioo_atTop.mp tanOrderIso.symm.tendsto_atTop\n\n"}
{"name":"Real.tendsto_arctan_atBot","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Filter.Tendsto Real.arctan Filter.atBot (nhdsWithin (Neg.neg (HDiv.hDiv Real.pi 2)) (Set.Ioi (Neg.neg (HDiv.hDiv Real.pi 2))))","decl":"theorem tendsto_arctan_atBot : Tendsto arctan atBot (𝓝[>] (-(π / 2))) :=\n  tendsto_Ioo_atBot.mp tanOrderIso.symm.tendsto_atBot\n\n"}
{"name":"Real.arctan_eq_of_tan_eq","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : Eq (Real.tan x) y\nhx : Membership.mem (Set.Ioo (Neg.neg (HDiv.hDiv Real.pi 2)) (HDiv.hDiv Real.pi 2)) x\n⊢ Eq (Real.arctan y) x","decl":"theorem arctan_eq_of_tan_eq {x y : ℝ} (h : tan x = y) (hx : x ∈ Ioo (-(π / 2)) (π / 2)) :\n    arctan y = x :=\n  injOn_tan (arctan_mem_Ioo _) hx (by rw [tan_arctan, h])\n\n"}
{"name":"Real.arctan_one","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (Real.arctan 1) (HDiv.hDiv Real.pi 4)","decl":"@[simp]\ntheorem arctan_one : arctan 1 = π / 4 :=\n  arctan_eq_of_tan_eq tan_pi_div_four <| by constructor <;> linarith [pi_pos]\n\n"}
{"name":"Real.arctan_neg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ Eq (Real.arctan (Neg.neg x)) (Neg.neg (Real.arctan x))","decl":"@[simp]\ntheorem arctan_neg (x : ℝ) : arctan (-x) = -arctan x := by simp [arctan_eq_arcsin, neg_div]\n\n"}
{"name":"Real.arctan_eq_arccos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (Real.arctan x) (Real.arccos (Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt))","decl":"theorem arctan_eq_arccos {x : ℝ} (h : 0 ≤ x) : arctan x = arccos (√(1 + x ^ 2))⁻¹ := by\n  rw [arctan_eq_arcsin, arccos_eq_arcsin]; swap; · exact inv_nonneg.2 (sqrt_nonneg _)\n  congr 1\n  rw_mod_cast [← sqrt_inv, sq_sqrt, ← one_div, one_sub_div, add_sub_cancel_left, sqrt_div,\n    sqrt_sq h]\n  all_goals positivity\n\n-- The junk values for `arccos` and `sqrt` make this true even for `1 < x`.\n"}
{"name":"Real.arccos_eq_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : LT.lt 0 x\n⊢ Eq (Real.arccos x) (Real.arctan (HDiv.hDiv (HSub.hSub 1 (HPow.hPow x 2)).sqrt x))","decl":"theorem arccos_eq_arctan {x : ℝ} (h : 0 < x) : arccos x = arctan (√(1 - x ^ 2) / x) := by\n  rw [arccos, eq_comm]\n  refine arctan_eq_of_tan_eq ?_ ⟨?_, ?_⟩\n  · rw_mod_cast [tan_pi_div_two_sub, tan_arcsin, inv_div]\n  · linarith only [arcsin_le_pi_div_two x, pi_pos]\n  · linarith only [arcsin_pos.2 h]\n\n"}
{"name":"Real.arctan_inv_of_pos","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : LT.lt 0 x\n⊢ Eq (Real.arctan (Inv.inv x)) (HSub.hSub (HDiv.hDiv Real.pi 2) (Real.arctan x))","decl":"theorem arctan_inv_of_pos {x : ℝ} (h : 0 < x) : arctan x⁻¹ = π / 2 - arctan x := by\n  rw [← arctan_tan (x := _ - _), tan_pi_div_two_sub, tan_arctan]\n  · norm_num\n    exact (arctan_lt_pi_div_two x).trans (half_lt_self_iff.mpr pi_pos)\n  · rw [sub_lt_self_iff, ← arctan_zero]\n    exact tanOrderIso.symm.strictMono h\n\n"}
{"name":"Real.arctan_inv_of_neg","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : LT.lt x 0\n⊢ Eq (Real.arctan (Inv.inv x)) (HSub.hSub (Neg.neg (HDiv.hDiv Real.pi 2)) (Real.arctan x))","decl":"theorem arctan_inv_of_neg {x : ℝ} (h : x < 0) : arctan x⁻¹ = -(π / 2) - arctan x := by\n  have := arctan_inv_of_pos (neg_pos.mpr h)\n  rwa [inv_neg, arctan_neg, neg_eq_iff_eq_neg, neg_sub', arctan_neg, neg_neg] at this\n\n"}
{"name":"Real.arctan_ne_mul_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nk : Int\n⊢ Ne (Real.arctan x) (HDiv.hDiv (HMul.hMul (HAdd.hAdd (HMul.hMul 2 ↑k) 1) Real.pi) 2)","decl":"lemma arctan_ne_mul_pi_div_two {x : ℝ} : ∀ (k : ℤ), arctan x ≠ (2 * k + 1) * π / 2 := by\n  by_contra!\n  obtain ⟨k, h⟩ := this\n  obtain ⟨lb, ub⟩ := arctan_mem_Ioo x\n  rw [h, neg_eq_neg_one_mul, mul_div_assoc, mul_lt_mul_right (by positivity)] at lb\n  rw [h, ← one_mul (π / 2), mul_div_assoc, mul_lt_mul_right (by positivity)] at ub\n  norm_cast at lb ub; change -1 < _ at lb; omega\n\n"}
{"name":"Real.arctan_add_arctan_lt_pi_div_two","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : LT.lt (HMul.hMul x y) 1\n⊢ LT.lt (HAdd.hAdd (Real.arctan x) (Real.arctan y)) (HDiv.hDiv Real.pi 2)","decl":"lemma arctan_add_arctan_lt_pi_div_two {x y : ℝ} (h : x * y < 1) : arctan x + arctan y < π / 2 := by\n  cases' le_or_lt y 0 with hy hy\n  · rw [← add_zero (π / 2), ← arctan_zero]\n    exact add_lt_add_of_lt_of_le (arctan_lt_pi_div_two _) (tanOrderIso.symm.monotone hy)\n  · rw [← lt_div_iff₀ hy, ← inv_eq_one_div] at h\n    replace h : arctan x < arctan y⁻¹ := tanOrderIso.symm.strictMono h\n    rwa [arctan_inv_of_pos hy, lt_tsub_iff_right] at h\n\n"}
{"name":"Real.arctan_add","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : LT.lt (HMul.hMul x y) 1\n⊢ Eq (HAdd.hAdd (Real.arctan x) (Real.arctan y)) (Real.arctan (HDiv.hDiv (HAdd.hAdd x y) (HSub.hSub 1 (HMul.hMul x y))))","decl":"theorem arctan_add {x y : ℝ} (h : x * y < 1) :\n    arctan x + arctan y = arctan ((x + y) / (1 - x * y)) := by\n  rw [← arctan_tan (x := _ + _)]\n  · congr\n    conv_rhs => rw [← tan_arctan x, ← tan_arctan y]\n    exact tan_add' ⟨arctan_ne_mul_pi_div_two, arctan_ne_mul_pi_div_two⟩\n  · rw [neg_lt, neg_add, ← arctan_neg, ← arctan_neg]\n    rw [← neg_mul_neg] at h\n    exact arctan_add_arctan_lt_pi_div_two h\n  · exact arctan_add_arctan_lt_pi_div_two h\n\n"}
{"name":"Real.arctan_add_eq_add_pi","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : LT.lt 1 (HMul.hMul x y)\nhx : LT.lt 0 x\n⊢ Eq (HAdd.hAdd (Real.arctan x) (Real.arctan y)) (HAdd.hAdd (Real.arctan (HDiv.hDiv (HAdd.hAdd x y) (HSub.hSub 1 (HMul.hMul x y)))) Real.pi)","decl":"theorem arctan_add_eq_add_pi {x y : ℝ} (h : 1 < x * y) (hx : 0 < x) :\n    arctan x + arctan y = arctan ((x + y) / (1 - x * y)) + π := by\n  have hy : 0 < y := by\n    have := mul_pos_iff.mp (zero_lt_one.trans h)\n    simpa [hx, hx.asymm]\n  have k := arctan_add (mul_inv x y ▸ inv_lt_one_of_one_lt₀ h)\n  rw [arctan_inv_of_pos hx, arctan_inv_of_pos hy, show _ + _ = π - (arctan x + arctan y) by ring,\n    sub_eq_iff_eq_add, ← sub_eq_iff_eq_add', sub_eq_add_neg, ← arctan_neg, add_comm] at k\n  convert k.symm using 3\n  field_simp\n  rw [show -x + -y = -(x + y) by ring, show x * y - 1 = -(1 - x * y) by ring, neg_div_neg_eq]\n\n"}
{"name":"Real.arctan_add_eq_sub_pi","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x y : Real\nh : LT.lt 1 (HMul.hMul x y)\nhx : LT.lt x 0\n⊢ Eq (HAdd.hAdd (Real.arctan x) (Real.arctan y)) (HSub.hSub (Real.arctan (HDiv.hDiv (HAdd.hAdd x y) (HSub.hSub 1 (HMul.hMul x y)))) Real.pi)","decl":"theorem arctan_add_eq_sub_pi {x y : ℝ} (h : 1 < x * y) (hx : x < 0) :\n    arctan x + arctan y = arctan ((x + y) / (1 - x * y)) - π := by\n  rw [← neg_mul_neg] at h\n  have k := arctan_add_eq_add_pi h (neg_pos.mpr hx)\n  rw [show _ / _ = -((x + y) / (1 - x * y)) by ring, ← neg_inj] at k\n  simp only [arctan_neg, neg_add, neg_neg, ← sub_eq_add_neg _ π] at k\n  exact k\n\n"}
{"name":"Real.two_mul_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh₁ : LT.lt (-1) x\nh₂ : LT.lt x 1\n⊢ Eq (HMul.hMul 2 (Real.arctan x)) (Real.arctan (HDiv.hDiv (HMul.hMul 2 x) (HSub.hSub 1 (HPow.hPow x 2))))","decl":"theorem two_mul_arctan {x : ℝ} (h₁ : -1 < x) (h₂ : x < 1) :\n    2 * arctan x = arctan (2 * x / (1 - x ^ 2)) := by\n  rw [two_mul, arctan_add (by nlinarith)]; congr 1; ring\n\n"}
{"name":"Real.two_mul_arctan_add_pi","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : LT.lt 1 x\n⊢ Eq (HMul.hMul 2 (Real.arctan x)) (HAdd.hAdd (Real.arctan (HDiv.hDiv (HMul.hMul 2 x) (HSub.hSub 1 (HPow.hPow x 2)))) Real.pi)","decl":"theorem two_mul_arctan_add_pi {x : ℝ} (h : 1 < x) :\n    2 * arctan x = arctan (2 * x / (1 - x ^ 2)) + π := by\n  rw [two_mul, arctan_add_eq_add_pi (by nlinarith) (by linarith)]; congr 2; ring\n\n"}
{"name":"Real.two_mul_arctan_sub_pi","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\nh : LT.lt x (-1)\n⊢ Eq (HMul.hMul 2 (Real.arctan x)) (HSub.hSub (Real.arctan (HDiv.hDiv (HMul.hMul 2 x) (HSub.hSub 1 (HPow.hPow x 2)))) Real.pi)","decl":"theorem two_mul_arctan_sub_pi {x : ℝ} (h : x < -1) :\n    2 * arctan x = arctan (2 * x / (1 - x ^ 2)) - π := by\n  rw [two_mul, arctan_add_eq_sub_pi (by nlinarith) (by linarith)]; congr 2; ring\n\n"}
{"name":"Real.arctan_inv_2_add_arctan_inv_3","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (HAdd.hAdd (Real.arctan (Inv.inv 2)) (Real.arctan (Inv.inv 3))) (HDiv.hDiv Real.pi 4)","decl":"theorem arctan_inv_2_add_arctan_inv_3 : arctan 2⁻¹ + arctan 3⁻¹ = π / 4 := by\n  rw [arctan_add] <;> norm_num\n\n"}
{"name":"Real.two_mul_arctan_inv_2_sub_arctan_inv_7","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (HSub.hSub (HMul.hMul 2 (Real.arctan (Inv.inv 2))) (Real.arctan (Inv.inv 7))) (HDiv.hDiv Real.pi 4)","decl":"theorem two_mul_arctan_inv_2_sub_arctan_inv_7 : 2 * arctan 2⁻¹ - arctan 7⁻¹ = π / 4 := by\n  rw [two_mul_arctan, ← arctan_one, sub_eq_iff_eq_add, arctan_add] <;> norm_num\n\n"}
{"name":"Real.two_mul_arctan_inv_3_add_arctan_inv_7","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (HAdd.hAdd (HMul.hMul 2 (Real.arctan (Inv.inv 3))) (Real.arctan (Inv.inv 7))) (HDiv.hDiv Real.pi 4)","decl":"theorem two_mul_arctan_inv_3_add_arctan_inv_7 : 2 * arctan 3⁻¹ + arctan 7⁻¹ = π / 4 := by\n  rw [two_mul_arctan, arctan_add] <;> norm_num\n\n"}
{"name":"Real.four_mul_arctan_inv_5_sub_arctan_inv_239","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (HSub.hSub (HMul.hMul 4 (Real.arctan (Inv.inv 5))) (Real.arctan (Inv.inv 239))) (HDiv.hDiv Real.pi 4)","decl":"/-- **John Machin's 1706 formula**, which he used to compute π to 100 decimal places. -/\ntheorem four_mul_arctan_inv_5_sub_arctan_inv_239 : 4 * arctan 5⁻¹ - arctan 239⁻¹ = π / 4 := by\n  rw [show 4 * arctan _ = 2 * (2 * _) by ring, two_mul_arctan, two_mul_arctan, ← arctan_one,\n    sub_eq_iff_eq_add, arctan_add] <;> norm_num\n\n"}
{"name":"Real.continuous_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Continuous Real.arctan","decl":"@[continuity]\ntheorem continuous_arctan : Continuous arctan :=\n  continuous_subtype_val.comp tanOrderIso.toHomeomorph.continuous_invFun\n\n"}
{"name":"Real.continuousAt_arctan","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"x : Real\n⊢ ContinuousAt Real.arctan x","decl":"theorem continuousAt_arctan {x : ℝ} : ContinuousAt arctan x :=\n  continuous_arctan.continuousAt\n\n"}
{"name":"Real.coe_tanPartialHomeomorph","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (↑Real.tanPartialHomeomorph) Real.tan","decl":"@[simp]\ntheorem coe_tanPartialHomeomorph : ⇑tanPartialHomeomorph = tan :=\n  rfl\n\n"}
{"name":"Real.coe_tanPartialHomeomorph_symm","module":"Mathlib.Analysis.SpecialFunctions.Trigonometric.Arctan","initialProofState":"⊢ Eq (↑Real.tanPartialHomeomorph.symm) Real.arctan","decl":"@[simp]\ntheorem coe_tanPartialHomeomorph_symm : ⇑tanPartialHomeomorph.symm = arctan :=\n  rfl\n\n"}
