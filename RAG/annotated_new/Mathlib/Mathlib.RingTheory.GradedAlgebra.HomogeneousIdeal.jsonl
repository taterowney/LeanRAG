{"name":"Ideal.IsHomogeneous.mem_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\nhI : Ideal.IsHomogeneous 𝒜 I\nx : A\n⊢ Iff (Membership.mem I x) (∀ (i : ι), Membership.mem I ↑(((DirectSum.decompose 𝒜) x) i))","decl":"theorem Ideal.IsHomogeneous.mem_iff {I} (hI : Ideal.IsHomogeneous 𝒜 I) {x} :\n    x ∈ I ↔ ∀ i, (decompose 𝒜 x i : A) ∈ I := by\n  classical\n  refine ⟨fun hx i ↦ hI i hx, fun hx ↦ ?_⟩\n  rw [← DirectSum.sum_support_decompose 𝒜 x]\n  exact Ideal.sum_mem _ (fun i _ ↦ hx i)\n\n"}
{"name":"HomogeneousIdeal.mk.inj","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\ntoSubmodule✝ : Submodule A A\nis_homogeneous'✝ : Ideal.IsHomogeneous 𝒜 toSubmodule✝\ntoSubmodule : Submodule A A\nis_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\nx✝ : Eq { toSubmodule := toSubmodule✝, is_homogeneous' := is_homogeneous'✝ } { toSubmodule := toSubmodule, is_homogeneous' := is_homogeneous' }\n⊢ Eq toSubmodule✝ toSubmodule","decl":"/-- For any `Semiring A`, we collect the homogeneous ideals of `A` into a type. -/\nstructure HomogeneousIdeal extends Submodule A A where\n  is_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\n\n"}
{"name":"HomogeneousIdeal.mk.injEq","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\ntoSubmodule✝ : Submodule A A\nis_homogeneous'✝ : Ideal.IsHomogeneous 𝒜 toSubmodule✝\ntoSubmodule : Submodule A A\nis_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\n⊢ Eq (Eq { toSubmodule := toSubmodule✝, is_homogeneous' := is_homogeneous'✝ } { toSubmodule := toSubmodule, is_homogeneous' := is_homogeneous' }) (Eq toSubmodule✝ toSubmodule)","decl":"/-- For any `Semiring A`, we collect the homogeneous ideals of `A` into a type. -/\nstructure HomogeneousIdeal extends Submodule A A where\n  is_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\n\n"}
{"name":"HomogeneousIdeal.is_homogeneous'","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nself : HomogeneousIdeal 𝒜\n⊢ Ideal.IsHomogeneous 𝒜 self.toSubmodule","decl":"/-- For any `Semiring A`, we collect the homogeneous ideals of `A` into a type. -/\nstructure HomogeneousIdeal extends Submodule A A where\n  is_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\n\n"}
{"name":"HomogeneousIdeal.mk.sizeOf_spec","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁸ : Semiring A\ninst✝⁷ : SetLike σ A\ninst✝⁶ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝⁵ : DecidableEq ι\ninst✝⁴ : AddMonoid ι\ninst✝³ : GradedRing 𝒜\ninst✝² : SizeOf ι\ninst✝¹ : SizeOf σ\ninst✝ : SizeOf A\ntoSubmodule : Submodule A A\nis_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\n⊢ Eq (SizeOf.sizeOf { toSubmodule := toSubmodule, is_homogeneous' := is_homogeneous' }) (HAdd.hAdd 1 (SizeOf.sizeOf toSubmodule))","decl":"/-- For any `Semiring A`, we collect the homogeneous ideals of `A` into a type. -/\nstructure HomogeneousIdeal extends Submodule A A where\n  is_homogeneous' : Ideal.IsHomogeneous 𝒜 toSubmodule\n\n"}
{"name":"HomogeneousIdeal.isHomogeneous","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : HomogeneousIdeal 𝒜\n⊢ Ideal.IsHomogeneous 𝒜 I.toIdeal","decl":"theorem HomogeneousIdeal.isHomogeneous (I : HomogeneousIdeal 𝒜) : I.toIdeal.IsHomogeneous 𝒜 :=\n  I.is_homogeneous'\n\n"}
{"name":"HomogeneousIdeal.toIdeal_injective","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\n⊢ Function.Injective HomogeneousIdeal.toIdeal","decl":"theorem HomogeneousIdeal.toIdeal_injective :\n    Function.Injective (HomogeneousIdeal.toIdeal : HomogeneousIdeal 𝒜 → Ideal A) :=\n  fun ⟨x, hx⟩ ⟨y, hy⟩ => fun (h : x = y) => by simp [h]\n\n"}
{"name":"HomogeneousIdeal.ext_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Iff (Eq I J) (Eq I.toIdeal J.toIdeal)","decl":"@[ext]\ntheorem HomogeneousIdeal.ext {I J : HomogeneousIdeal 𝒜} (h : I.toIdeal = J.toIdeal) : I = J :=\n  HomogeneousIdeal.toIdeal_injective h\n\n"}
{"name":"HomogeneousIdeal.ext","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\nh : Eq I.toIdeal J.toIdeal\n⊢ Eq I J","decl":"@[ext]\ntheorem HomogeneousIdeal.ext {I J : HomogeneousIdeal 𝒜} (h : I.toIdeal = J.toIdeal) : I = J :=\n  HomogeneousIdeal.toIdeal_injective h\n\n"}
{"name":"HomogeneousIdeal.ext'","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\nh : ∀ (i : ι) (x : A), Membership.mem (𝒜 i) x → Iff (Membership.mem I x) (Membership.mem J x)\n⊢ Eq I J","decl":"theorem HomogeneousIdeal.ext' {I J : HomogeneousIdeal 𝒜} (h : ∀ i, ∀ x ∈ 𝒜 i, x ∈ I ↔ x ∈ J) :\n    I = J := by\n  ext\n  rw [I.isHomogeneous.mem_iff, J.isHomogeneous.mem_iff]\n  apply forall_congr'\n  exact fun i ↦ h i _ (decompose 𝒜 _ i).2\n\n"}
{"name":"HomogeneousIdeal.mem_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : HomogeneousIdeal 𝒜\nx : A\n⊢ Iff (Membership.mem I.toIdeal x) (Membership.mem I x)","decl":"@[simp]\ntheorem HomogeneousIdeal.mem_iff {I : HomogeneousIdeal 𝒜} {x : A} : x ∈ I.toIdeal ↔ x ∈ I :=\n  Iff.rfl\n\n"}
{"name":"Ideal.homogeneousCore'_mono","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝¹ : Semiring A\ninst✝ : SetLike σ A\n𝒜 : ι → σ\n⊢ Monotone (Ideal.homogeneousCore' 𝒜)","decl":"theorem Ideal.homogeneousCore'_mono : Monotone (Ideal.homogeneousCore' 𝒜) :=\n  fun _ _ I_le_J => Ideal.span_mono <| Set.image_subset _ fun _ => @I_le_J _\n\n"}
{"name":"Ideal.homogeneousCore'_le","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝¹ : Semiring A\ninst✝ : SetLike σ A\n𝒜 : ι → σ\nI : Ideal A\n⊢ LE.le (Ideal.homogeneousCore' 𝒜 I) I","decl":"theorem Ideal.homogeneousCore'_le : I.homogeneousCore' 𝒜 ≤ I :=\n  Ideal.span_le.2 <| image_preimage_subset _ _\n\n"}
{"name":"Ideal.isHomogeneous_iff_forall_subset","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Iff (Ideal.IsHomogeneous 𝒜 I) (∀ (i : ι), HasSubset.Subset (↑I) (Set.preimage ⇑(GradedRing.proj 𝒜 i) ↑I))","decl":"theorem Ideal.isHomogeneous_iff_forall_subset :\n    I.IsHomogeneous 𝒜 ↔ ∀ i, (I : Set A) ⊆ GradedRing.proj 𝒜 i ⁻¹' I :=\n  Iff.rfl\n\n"}
{"name":"Ideal.isHomogeneous_iff_subset_iInter","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Iff (Ideal.IsHomogeneous 𝒜 I) (HasSubset.Subset (↑I) (Set.iInter fun i => Set.preimage ⇑(GradedRing.proj 𝒜 i) ↑I))","decl":"theorem Ideal.isHomogeneous_iff_subset_iInter :\n    I.IsHomogeneous 𝒜 ↔ (I : Set A) ⊆ ⋂ i, GradedRing.proj 𝒜 i ⁻¹' ↑I :=\n  subset_iInter_iff.symm\n\n"}
{"name":"Ideal.mul_homogeneous_element_mem_of_mem","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\nr x : A\nhx₁ : SetLike.Homogeneous 𝒜 x\nhx₂ : Membership.mem I x\nj : ι\n⊢ Membership.mem I ((GradedRing.proj 𝒜 j) (HMul.hMul r x))","decl":"theorem Ideal.mul_homogeneous_element_mem_of_mem {I : Ideal A} (r x : A) (hx₁ : Homogeneous 𝒜 x)\n    (hx₂ : x ∈ I) (j : ι) : GradedRing.proj 𝒜 j (r * x) ∈ I := by\n  classical\n  rw [← DirectSum.sum_support_decompose 𝒜 r, Finset.sum_mul, map_sum]\n  apply Ideal.sum_mem\n  intro k _\n  obtain ⟨i, hi⟩ := hx₁\n  have mem₁ : (DirectSum.decompose 𝒜 r k : A) * x ∈ 𝒜 (k + i) :=\n    GradedMul.mul_mem (SetLike.coe_mem _) hi\n  rw [GradedRing.proj_apply, DirectSum.decompose_of_mem 𝒜 mem₁, coe_of_apply]\n  split_ifs\n  · exact I.mul_mem_left _ hx₂\n  · exact I.zero_mem\n\n"}
{"name":"Ideal.homogeneous_span","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\ns : Set A\nh : ∀ (x : A), Membership.mem s x → SetLike.Homogeneous 𝒜 x\n⊢ Ideal.IsHomogeneous 𝒜 (Ideal.span s)","decl":"theorem Ideal.homogeneous_span (s : Set A) (h : ∀ x ∈ s, Homogeneous 𝒜 x) :\n    (Ideal.span s).IsHomogeneous 𝒜 := by\n  rintro i r hr\n  rw [Ideal.span, Finsupp.span_eq_range_linearCombination] at hr\n  rw [LinearMap.mem_range] at hr\n  obtain ⟨s, rfl⟩ := hr\n  rw [Finsupp.linearCombination_apply, Finsupp.sum, decompose_sum, DFinsupp.finset_sum_apply,\n    AddSubmonoidClass.coe_finset_sum]\n  refine Ideal.sum_mem _ ?_\n  rintro z hz1\n  rw [smul_eq_mul]\n  refine Ideal.mul_homogeneous_element_mem_of_mem 𝒜 (s z) z ?_ ?_ i\n  · rcases z with ⟨z, hz2⟩\n    apply h _ hz2\n  · exact Ideal.subset_span z.2\n\n"}
{"name":"Ideal.homogeneousCore_mono","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\n⊢ Monotone (Ideal.homogeneousCore 𝒜)","decl":"theorem Ideal.homogeneousCore_mono : Monotone (Ideal.homogeneousCore 𝒜) :=\n  Ideal.homogeneousCore'_mono 𝒜\n\n"}
{"name":"Ideal.toIdeal_homogeneousCore_le","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ LE.le (Ideal.homogeneousCore 𝒜 I).toIdeal I","decl":"theorem Ideal.toIdeal_homogeneousCore_le : (I.homogeneousCore 𝒜).toIdeal ≤ I :=\n  Ideal.homogeneousCore'_le 𝒜 I\n\n"}
{"name":"Ideal.mem_homogeneousCore_of_homogeneous_of_mem","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\nx : A\nh : SetLike.Homogeneous 𝒜 x\nhmem : Membership.mem I x\n⊢ Membership.mem (Ideal.homogeneousCore 𝒜 I) x","decl":"theorem Ideal.mem_homogeneousCore_of_homogeneous_of_mem {x : A} (h : SetLike.Homogeneous 𝒜 x)\n    (hmem : x ∈ I) : x ∈ I.homogeneousCore 𝒜 :=\n  Ideal.subset_span ⟨⟨x, h⟩, hmem, rfl⟩\n\n"}
{"name":"Ideal.IsHomogeneous.toIdeal_homogeneousCore_eq_self","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\nh : Ideal.IsHomogeneous 𝒜 I\n⊢ Eq (Ideal.homogeneousCore 𝒜 I).toIdeal I","decl":"theorem Ideal.IsHomogeneous.toIdeal_homogeneousCore_eq_self (h : I.IsHomogeneous 𝒜) :\n    (I.homogeneousCore 𝒜).toIdeal = I := by\n  apply le_antisymm (I.homogeneousCore'_le 𝒜) _\n  intro x hx\n  classical\n  rw [← DirectSum.sum_support_decompose 𝒜 x]\n  exact Ideal.sum_mem _ fun j _ => Ideal.subset_span ⟨⟨_, homogeneous_coe _⟩, h _ hx, rfl⟩\n\n"}
{"name":"HomogeneousIdeal.toIdeal_homogeneousCore_eq_self","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : HomogeneousIdeal 𝒜\n⊢ Eq (Ideal.homogeneousCore 𝒜 I.toIdeal) I","decl":"@[simp]\ntheorem HomogeneousIdeal.toIdeal_homogeneousCore_eq_self (I : HomogeneousIdeal 𝒜) :\n    I.toIdeal.homogeneousCore 𝒜 = I := by\n  ext1\n  convert Ideal.IsHomogeneous.toIdeal_homogeneousCore_eq_self I.isHomogeneous\n\n"}
{"name":"Ideal.IsHomogeneous.iff_eq","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Iff (Ideal.IsHomogeneous 𝒜 I) (Eq (Ideal.homogeneousCore 𝒜 I).toIdeal I)","decl":"theorem Ideal.IsHomogeneous.iff_eq : I.IsHomogeneous 𝒜 ↔ (I.homogeneousCore 𝒜).toIdeal = I :=\n  ⟨fun hI => hI.toIdeal_homogeneousCore_eq_self, fun hI => hI ▸ (Ideal.homogeneousCore 𝒜 I).2⟩\n\n"}
{"name":"Ideal.IsHomogeneous.iff_exists","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : SetLike σ A\ninst✝³ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝² : DecidableEq ι\ninst✝¹ : AddMonoid ι\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Iff (Ideal.IsHomogeneous 𝒜 I) (Exists fun S => Eq I (Ideal.span (Set.image Subtype.val S)))","decl":"theorem Ideal.IsHomogeneous.iff_exists :\n    I.IsHomogeneous 𝒜 ↔ ∃ S : Set (homogeneousSubmonoid 𝒜), I = Ideal.span ((↑) '' S) := by\n  rw [Ideal.IsHomogeneous.iff_eq, eq_comm]\n  exact ((Set.image_preimage.compose (Submodule.gi _ _).gc).exists_eq_l _).symm\n\n"}
{"name":"Ideal.IsHomogeneous.bot","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Ideal.IsHomogeneous 𝒜 Bot.bot","decl":"theorem bot : Ideal.IsHomogeneous 𝒜 ⊥ := fun i r hr => by\n  simp only [Ideal.mem_bot] at hr\n  rw [hr, decompose_zero, zero_apply]\n  apply Ideal.zero_mem\n\n"}
{"name":"Ideal.IsHomogeneous.top","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Ideal.IsHomogeneous 𝒜 Top.top","decl":"theorem top : Ideal.IsHomogeneous 𝒜 ⊤ := fun i r _ => by simp only [Submodule.mem_top]\n\n"}
{"name":"Ideal.IsHomogeneous.inf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : Ideal A\nHI : Ideal.IsHomogeneous 𝒜 I\nHJ : Ideal.IsHomogeneous 𝒜 J\n⊢ Ideal.IsHomogeneous 𝒜 (Min.min I J)","decl":"theorem inf {I J : Ideal A} (HI : I.IsHomogeneous 𝒜) (HJ : J.IsHomogeneous 𝒜) :\n    (I ⊓ J).IsHomogeneous 𝒜 :=\n  fun _ _ hr => ⟨HI _ hr.1, HJ _ hr.2⟩\n\n"}
{"name":"Ideal.IsHomogeneous.sup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : Ideal A\nHI : Ideal.IsHomogeneous 𝒜 I\nHJ : Ideal.IsHomogeneous 𝒜 J\n⊢ Ideal.IsHomogeneous 𝒜 (Max.max I J)","decl":"theorem sup {I J : Ideal A} (HI : I.IsHomogeneous 𝒜) (HJ : J.IsHomogeneous 𝒜) :\n    (I ⊔ J).IsHomogeneous 𝒜 := by\n  rw [iff_exists] at HI HJ ⊢\n  obtain ⟨⟨s₁, rfl⟩, ⟨s₂, rfl⟩⟩ := HI, HJ\n  refine ⟨s₁ ∪ s₂, ?_⟩\n  rw [Set.image_union]\n  exact (Submodule.span_union _ _).symm\n\n"}
{"name":"Ideal.IsHomogeneous.iSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\nf : κ → Ideal A\nh : ∀ (i : κ), Ideal.IsHomogeneous 𝒜 (f i)\n⊢ Ideal.IsHomogeneous 𝒜 (iSup fun i => f i)","decl":"protected theorem iSup {κ : Sort*} {f : κ → Ideal A} (h : ∀ i, (f i).IsHomogeneous 𝒜) :\n    (⨆ i, f i).IsHomogeneous 𝒜 := by\n  simp_rw [iff_exists] at h ⊢\n  choose s hs using h\n  refine ⟨⋃ i, s i, ?_⟩\n  simp_rw [Set.image_iUnion, Ideal.span_iUnion]\n  congr\n  exact funext hs\n\n"}
{"name":"Ideal.IsHomogeneous.iInf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\nf : κ → Ideal A\nh : ∀ (i : κ), Ideal.IsHomogeneous 𝒜 (f i)\n⊢ Ideal.IsHomogeneous 𝒜 (iInf fun i => f i)","decl":"protected theorem iInf {κ : Sort*} {f : κ → Ideal A} (h : ∀ i, (f i).IsHomogeneous 𝒜) :\n    (⨅ i, f i).IsHomogeneous 𝒜 := by\n  intro i x hx\n  simp only [Ideal.mem_iInf] at hx ⊢\n  exact fun j => h _ _ (hx j)\n\n"}
{"name":"Ideal.IsHomogeneous.iSup₂","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\nκ' : κ → Sort u_5\nf : (i : κ) → κ' i → Ideal A\nh : ∀ (i : κ) (j : κ' i), Ideal.IsHomogeneous 𝒜 (f i j)\n⊢ Ideal.IsHomogeneous 𝒜 (iSup fun i => iSup fun j => f i j)","decl":"theorem iSup₂ {κ : Sort*} {κ' : κ → Sort*} {f : ∀ i, κ' i → Ideal A}\n    (h : ∀ i j, (f i j).IsHomogeneous 𝒜) : (⨆ (i) (j), f i j).IsHomogeneous 𝒜 :=\n  IsHomogeneous.iSup fun i => IsHomogeneous.iSup <| h i\n\n"}
{"name":"Ideal.IsHomogeneous.iInf₂","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\nκ' : κ → Sort u_5\nf : (i : κ) → κ' i → Ideal A\nh : ∀ (i : κ) (j : κ' i), Ideal.IsHomogeneous 𝒜 (f i j)\n⊢ Ideal.IsHomogeneous 𝒜 (iInf fun i => iInf fun j => f i j)","decl":"theorem iInf₂ {κ : Sort*} {κ' : κ → Sort*} {f : ∀ i, κ' i → Ideal A}\n    (h : ∀ i j, (f i j).IsHomogeneous 𝒜) : (⨅ (i) (j), f i j).IsHomogeneous 𝒜 :=\n  IsHomogeneous.iInf fun i => IsHomogeneous.iInf <| h i\n\n"}
{"name":"Ideal.IsHomogeneous.sSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nℐ : Set (Ideal A)\nh : ∀ (I : Ideal A), Membership.mem ℐ I → Ideal.IsHomogeneous 𝒜 I\n⊢ Ideal.IsHomogeneous 𝒜 (SupSet.sSup ℐ)","decl":"theorem sSup {ℐ : Set (Ideal A)} (h : ∀ I ∈ ℐ, Ideal.IsHomogeneous 𝒜 I) :\n    (sSup ℐ).IsHomogeneous 𝒜 := by\n  rw [sSup_eq_iSup]\n  exact iSup₂ h\n\n"}
{"name":"Ideal.IsHomogeneous.sInf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nℐ : Set (Ideal A)\nh : ∀ (I : Ideal A), Membership.mem ℐ I → Ideal.IsHomogeneous 𝒜 I\n⊢ Ideal.IsHomogeneous 𝒜 (InfSet.sInf ℐ)","decl":"theorem sInf {ℐ : Set (Ideal A)} (h : ∀ I ∈ ℐ, Ideal.IsHomogeneous 𝒜 I) :\n    (sInf ℐ).IsHomogeneous 𝒜 := by\n  rw [sInf_eq_iInf]\n  exact iInf₂ h\n\n"}
{"name":"HomogeneousIdeal.coe_top","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top : ((⊤ : HomogeneousIdeal 𝒜) : Set A) = univ :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.coe_bot","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Eq (↑Bot.bot) 0","decl":"@[simp]\ntheorem coe_bot : ((⊥ : HomogeneousIdeal 𝒜) : Set A) = 0 :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.coe_sup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Eq (↑(Max.max I J)) (HAdd.hAdd ↑I ↑J)","decl":"@[simp]\ntheorem coe_sup (I J : HomogeneousIdeal 𝒜) : ↑(I ⊔ J) = (I + J : Set A) :=\n  Submodule.coe_sup _ _\n\n"}
{"name":"HomogeneousIdeal.coe_inf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Eq (↑(Min.min I J)) (Inter.inter ↑I ↑J)","decl":"@[simp]\ntheorem coe_inf (I J : HomogeneousIdeal 𝒜) : (↑(I ⊓ J) : Set A) = ↑I ∩ ↑J :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_top","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Eq Top.top.toIdeal Top.top","decl":"@[simp]\ntheorem toIdeal_top : (⊤ : HomogeneousIdeal 𝒜).toIdeal = (⊤ : Ideal A) :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_bot","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Eq Bot.bot.toIdeal Bot.bot","decl":"@[simp]\ntheorem toIdeal_bot : (⊥ : HomogeneousIdeal 𝒜).toIdeal = (⊥ : Ideal A) :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_sup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Eq (Max.max I J).toIdeal (Max.max I.toIdeal J.toIdeal)","decl":"@[simp]\ntheorem toIdeal_sup (I J : HomogeneousIdeal 𝒜) : (I ⊔ J).toIdeal = I.toIdeal ⊔ J.toIdeal :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_inf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Eq (Min.min I J).toIdeal (Min.min I.toIdeal J.toIdeal)","decl":"@[simp]\ntheorem toIdeal_inf (I J : HomogeneousIdeal 𝒜) : (I ⊓ J).toIdeal = I.toIdeal ⊓ J.toIdeal :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_sSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nℐ : Set (HomogeneousIdeal 𝒜)\n⊢ Eq (SupSet.sSup ℐ).toIdeal (iSup fun s => iSup fun h => s.toIdeal)","decl":"@[simp]\ntheorem toIdeal_sSup (ℐ : Set (HomogeneousIdeal 𝒜)) : (sSup ℐ).toIdeal = ⨆ s ∈ ℐ, toIdeal s :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_sInf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nℐ : Set (HomogeneousIdeal 𝒜)\n⊢ Eq (InfSet.sInf ℐ).toIdeal (iInf fun s => iInf fun h => s.toIdeal)","decl":"@[simp]\ntheorem toIdeal_sInf (ℐ : Set (HomogeneousIdeal 𝒜)) : (sInf ℐ).toIdeal = ⨅ s ∈ ℐ, toIdeal s :=\n  rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_iSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\ns : κ → HomogeneousIdeal 𝒜\n⊢ Eq (iSup fun i => s i).toIdeal (iSup fun i => (s i).toIdeal)","decl":"@[simp]\ntheorem toIdeal_iSup {κ : Sort*} (s : κ → HomogeneousIdeal 𝒜) :\n    (⨆ i, s i).toIdeal = ⨆ i, (s i).toIdeal := by\n  rw [iSup, toIdeal_sSup, iSup_range]\n\n"}
{"name":"HomogeneousIdeal.toIdeal_iInf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\ns : κ → HomogeneousIdeal 𝒜\n⊢ Eq (iInf fun i => s i).toIdeal (iInf fun i => (s i).toIdeal)","decl":"@[simp]\ntheorem toIdeal_iInf {κ : Sort*} (s : κ → HomogeneousIdeal 𝒜) :\n    (⨅ i, s i).toIdeal = ⨅ i, (s i).toIdeal := by\n  rw [iInf, toIdeal_sInf, iInf_range]\n\n"}
{"name":"HomogeneousIdeal.toIdeal_iSup₂","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\nκ' : κ → Sort u_5\ns : (i : κ) → κ' i → HomogeneousIdeal 𝒜\n⊢ Eq (iSup fun i => iSup fun j => s i j).toIdeal (iSup fun i => iSup fun j => (s i j).toIdeal)","decl":"theorem toIdeal_iSup₂ {κ : Sort*} {κ' : κ → Sort*} (s : ∀ i, κ' i → HomogeneousIdeal 𝒜) :\n    (⨆ (i) (j), s i j).toIdeal = ⨆ (i) (j), (s i j).toIdeal := by\n  simp_rw [toIdeal_iSup]\n\n"}
{"name":"HomogeneousIdeal.toIdeal_iInf₂","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nκ : Sort u_4\nκ' : κ → Sort u_5\ns : (i : κ) → κ' i → HomogeneousIdeal 𝒜\n⊢ Eq (iInf fun i => iInf fun j => s i j).toIdeal (iInf fun i => iInf fun j => (s i j).toIdeal)","decl":"theorem toIdeal_iInf₂ {κ : Sort*} {κ' : κ → Sort*} (s : ∀ i, κ' i → HomogeneousIdeal 𝒜) :\n    (⨅ (i) (j), s i j).toIdeal = ⨅ (i) (j), (s i j).toIdeal := by\n  simp_rw [toIdeal_iInf]\n\n"}
{"name":"HomogeneousIdeal.eq_top_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : HomogeneousIdeal 𝒜\n⊢ Iff (Eq I Top.top) (Eq I.toIdeal Top.top)","decl":"@[simp]\ntheorem eq_top_iff (I : HomogeneousIdeal 𝒜) : I = ⊤ ↔ I.toIdeal = ⊤ :=\n  toIdeal_injective.eq_iff.symm\n\n"}
{"name":"HomogeneousIdeal.eq_bot_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : HomogeneousIdeal 𝒜\n⊢ Iff (Eq I Bot.bot) (Eq I.toIdeal Bot.bot)","decl":"@[simp]\ntheorem eq_bot_iff (I : HomogeneousIdeal 𝒜) : I = ⊥ ↔ I.toIdeal = ⊥ :=\n  toIdeal_injective.eq_iff.symm\n\n"}
{"name":"HomogeneousIdeal.toIdeal_add","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Eq (HAdd.hAdd I J).toIdeal (HAdd.hAdd I.toIdeal J.toIdeal)","decl":"@[simp]\ntheorem toIdeal_add (I J : HomogeneousIdeal 𝒜) : (I + J).toIdeal = I.toIdeal + J.toIdeal :=\n  rfl\n\n"}
{"name":"Ideal.IsHomogeneous.mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : CommSemiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : Ideal A\nHI : Ideal.IsHomogeneous 𝒜 I\nHJ : Ideal.IsHomogeneous 𝒜 J\n⊢ Ideal.IsHomogeneous 𝒜 (HMul.hMul I J)","decl":"theorem Ideal.IsHomogeneous.mul {I J : Ideal A} (HI : I.IsHomogeneous 𝒜) (HJ : J.IsHomogeneous 𝒜) :\n    (I * J).IsHomogeneous 𝒜 := by\n  rw [Ideal.IsHomogeneous.iff_exists] at HI HJ ⊢\n  obtain ⟨⟨s₁, rfl⟩, ⟨s₂, rfl⟩⟩ := HI, HJ\n  rw [Ideal.span_mul_span']\n  exact ⟨s₁ * s₂, congr_arg _ <| (Set.image_mul (homogeneousSubmonoid 𝒜).subtype).symm⟩\n\n"}
{"name":"HomogeneousIdeal.toIdeal_mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : CommSemiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI J : HomogeneousIdeal 𝒜\n⊢ Eq (HMul.hMul I J).toIdeal (HMul.hMul I.toIdeal J.toIdeal)","decl":"@[simp]\ntheorem HomogeneousIdeal.toIdeal_mul (I J : HomogeneousIdeal 𝒜) :\n    (I * J).toIdeal = I.toIdeal * J.toIdeal :=\n  rfl\n\n"}
{"name":"Ideal.homogeneousCore.gc","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ GaloisConnection HomogeneousIdeal.toIdeal (Ideal.homogeneousCore 𝒜)","decl":"theorem Ideal.homogeneousCore.gc : GaloisConnection toIdeal (Ideal.homogeneousCore 𝒜) := fun I _ =>\n  ⟨fun H => I.toIdeal_homogeneousCore_eq_self ▸ Ideal.homogeneousCore_mono 𝒜 H,\n    fun H => le_trans H (Ideal.homogeneousCore'_le _ _)⟩\n\n"}
{"name":"Ideal.homogeneousCore_eq_sSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Eq (Ideal.homogeneousCore 𝒜 I) (SupSet.sSup (setOf fun J => LE.le J.toIdeal I))","decl":"theorem Ideal.homogeneousCore_eq_sSup :\n    I.homogeneousCore 𝒜 = sSup { J : HomogeneousIdeal 𝒜 | J.toIdeal ≤ I } :=\n  Eq.symm <| IsLUB.sSup_eq <| (Ideal.homogeneousCore.gc 𝒜).isGreatest_u.isLUB\n\n"}
{"name":"Ideal.homogeneousCore'_eq_sSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Eq (Ideal.homogeneousCore' 𝒜 I) (SupSet.sSup (setOf fun J => And (Ideal.IsHomogeneous 𝒜 J) (LE.le J I)))","decl":"theorem Ideal.homogeneousCore'_eq_sSup :\n    I.homogeneousCore' 𝒜 = sSup { J : Ideal A | J.IsHomogeneous 𝒜 ∧ J ≤ I } := by\n  refine (IsLUB.sSup_eq ?_).symm\n  apply IsGreatest.isLUB\n  have coe_mono : Monotone (toIdeal : HomogeneousIdeal 𝒜 → Ideal A) := fun x y => id\n  convert coe_mono.map_isGreatest (Ideal.homogeneousCore.gc 𝒜).isGreatest_u using 1\n  ext x\n  rw [mem_image, mem_setOf_eq]\n  refine ⟨fun hI => ⟨⟨x, hI.1⟩, ⟨hI.2, rfl⟩⟩, ?_⟩\n  rintro ⟨x, ⟨hx, rfl⟩⟩\n  exact ⟨x.isHomogeneous, hx⟩\n\n"}
{"name":"Ideal.le_toIdeal_homogeneousHull","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ LE.le I (Ideal.homogeneousHull 𝒜 I).toIdeal","decl":"theorem Ideal.le_toIdeal_homogeneousHull : I ≤ (Ideal.homogeneousHull 𝒜 I).toIdeal := by\n  intro r hr\n  classical\n  rw [← DirectSum.sum_support_decompose 𝒜 r]\n  refine Ideal.sum_mem _ ?_\n  intro j _\n  apply Ideal.subset_span\n  use j\n  use ⟨r, hr⟩\n\n"}
{"name":"Ideal.homogeneousHull_mono","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Monotone (Ideal.homogeneousHull 𝒜)","decl":"theorem Ideal.homogeneousHull_mono : Monotone (Ideal.homogeneousHull 𝒜) := fun I J I_le_J => by\n  apply Ideal.span_mono\n  rintro r ⟨hr1, ⟨x, hx⟩, rfl⟩\n  exact ⟨hr1, ⟨⟨x, I_le_J hx⟩, rfl⟩⟩\n\n"}
{"name":"Ideal.IsHomogeneous.toIdeal_homogeneousHull_eq_self","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\nh : Ideal.IsHomogeneous 𝒜 I\n⊢ Eq (Ideal.homogeneousHull 𝒜 I).toIdeal I","decl":"theorem Ideal.IsHomogeneous.toIdeal_homogeneousHull_eq_self (h : I.IsHomogeneous 𝒜) :\n    (Ideal.homogeneousHull 𝒜 I).toIdeal = I := by\n  apply le_antisymm _ (Ideal.le_toIdeal_homogeneousHull _ _)\n  apply Ideal.span_le.2\n  rintro _ ⟨i, x, rfl⟩\n  exact h _ x.prop\n\n"}
{"name":"HomogeneousIdeal.homogeneousHull_toIdeal_eq_self","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : HomogeneousIdeal 𝒜\n⊢ Eq (Ideal.homogeneousHull 𝒜 I.toIdeal) I","decl":"@[simp]\ntheorem HomogeneousIdeal.homogeneousHull_toIdeal_eq_self (I : HomogeneousIdeal 𝒜) :\n    I.toIdeal.homogeneousHull 𝒜 = I :=\n  HomogeneousIdeal.toIdeal_injective <| I.isHomogeneous.toIdeal_homogeneousHull_eq_self\n\n"}
{"name":"Ideal.toIdeal_homogeneousHull_eq_iSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Eq (Ideal.homogeneousHull 𝒜 I).toIdeal (iSup fun i => Ideal.span (Set.image ⇑(GradedRing.proj 𝒜 i) ↑I))","decl":"theorem Ideal.toIdeal_homogeneousHull_eq_iSup :\n    (I.homogeneousHull 𝒜).toIdeal = ⨆ i, Ideal.span (GradedRing.proj 𝒜 i '' I) := by\n  rw [← Ideal.span_iUnion]\n  apply congr_arg Ideal.span _\n  ext1\n  simp only [Set.mem_iUnion, Set.mem_image, mem_setOf_eq, GradedRing.proj_apply, SetLike.exists,\n    exists_prop, Subtype.coe_mk, SetLike.mem_coe]\n\n"}
{"name":"Ideal.homogeneousHull_eq_iSup","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Eq (Ideal.homogeneousHull 𝒜 I) (iSup fun i => { toSubmodule := Ideal.span (Set.image ⇑(GradedRing.proj 𝒜 i) ↑I), is_homogeneous' := ⋯ })","decl":"theorem Ideal.homogeneousHull_eq_iSup :\n    I.homogeneousHull 𝒜 =\n      ⨆ i, ⟨Ideal.span (GradedRing.proj 𝒜 i '' I), Ideal.homogeneous_span 𝒜 _ (by\n        rintro _ ⟨x, -, rfl⟩\n        apply SetLike.homogeneous_coe)⟩ := by\n  ext1\n  rw [Ideal.toIdeal_homogeneousHull_eq_iSup, toIdeal_iSup]\n  rfl\n\n"}
{"name":"Ideal.homogeneousHull.gc","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ GaloisConnection (Ideal.homogeneousHull 𝒜) HomogeneousIdeal.toIdeal","decl":"theorem Ideal.homogeneousHull.gc : GaloisConnection (Ideal.homogeneousHull 𝒜) toIdeal := fun _ J =>\n  ⟨le_trans (Ideal.le_toIdeal_homogeneousHull _ _),\n    fun H => J.homogeneousHull_toIdeal_eq_self ▸ Ideal.homogeneousHull_mono 𝒜 H⟩\n\n"}
{"name":"Ideal.homogeneousHull_eq_sInf","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁵ : Semiring A\ninst✝⁴ : DecidableEq ι\ninst✝³ : AddMonoid ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\nI : Ideal A\n⊢ Eq (Ideal.homogeneousHull 𝒜 I) (InfSet.sInf (setOf fun J => LE.le I J.toIdeal))","decl":"theorem Ideal.homogeneousHull_eq_sInf (I : Ideal A) :\n    Ideal.homogeneousHull 𝒜 I = sInf { J : HomogeneousIdeal 𝒜 | I ≤ J.toIdeal } :=\n  Eq.symm <| IsGLB.sInf_eq <| (Ideal.homogeneousHull.gc 𝒜).isLeast_l.isGLB\n\n"}
{"name":"HomogeneousIdeal.mem_irrelevant_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁷ : Semiring A\ninst✝⁶ : DecidableEq ι\ninst✝⁵ : AddCommMonoid ι\ninst✝⁴ : PartialOrder ι\ninst✝³ : CanonicallyOrderedAdd ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\na : A\n⊢ Iff (Membership.mem (HomogeneousIdeal.irrelevant 𝒜) a) (Eq ((GradedRing.proj 𝒜 0) a) 0)","decl":"@[simp]\ntheorem HomogeneousIdeal.mem_irrelevant_iff (a : A) :\n    a ∈ HomogeneousIdeal.irrelevant 𝒜 ↔ proj 𝒜 0 a = 0 :=\n  Iff.rfl\n\n"}
{"name":"HomogeneousIdeal.toIdeal_irrelevant","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousIdeal","initialProofState":"ι : Type u_1\nσ : Type u_2\nA : Type u_3\ninst✝⁷ : Semiring A\ninst✝⁶ : DecidableEq ι\ninst✝⁵ : AddCommMonoid ι\ninst✝⁴ : PartialOrder ι\ninst✝³ : CanonicallyOrderedAdd ι\ninst✝² : SetLike σ A\ninst✝¹ : AddSubmonoidClass σ A\n𝒜 : ι → σ\ninst✝ : GradedRing 𝒜\n⊢ Eq (HomogeneousIdeal.irrelevant 𝒜).toIdeal (RingHom.ker (GradedRing.projZeroRingHom 𝒜))","decl":"@[simp]\ntheorem HomogeneousIdeal.toIdeal_irrelevant :\n    (HomogeneousIdeal.irrelevant 𝒜).toIdeal = RingHom.ker (GradedRing.projZeroRingHom 𝒜) :=\n  rfl\n\n"}
