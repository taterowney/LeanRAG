{"name":"LinearMap.clmOfExistsBoundedImage_coe","module":"Mathlib.Analysis.LocallyConvex.ContinuousOfBounded","initialProofState":"𝕜 : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : UniformSpace E\ninst✝⁷ : UniformAddGroup E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : UniformSpace F\ninst✝⁴ : UniformAddGroup F\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : Module 𝕜 E\ninst✝¹ : Module 𝕜 F\ninst✝ : ContinuousSMul 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F\nh : Exists fun V => And (Membership.mem (nhds 0) V) (Bornology.IsVonNBounded 𝕜 (Set.image (⇑f) V))\n⊢ Eq (↑(f.clmOfExistsBoundedImage h)) f","decl":"theorem LinearMap.clmOfExistsBoundedImage_coe {f : E →ₗ[𝕜] F}\n    {h : ∃ V ∈ 𝓝 (0 : E), Bornology.IsVonNBounded 𝕜 (f '' V)} :\n    (f.clmOfExistsBoundedImage h : E →ₗ[𝕜] F) = f :=\n  rfl\n\n"}
{"name":"LinearMap.clmOfExistsBoundedImage_apply","module":"Mathlib.Analysis.LocallyConvex.ContinuousOfBounded","initialProofState":"𝕜 : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : UniformSpace E\ninst✝⁷ : UniformAddGroup E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : UniformSpace F\ninst✝⁴ : UniformAddGroup F\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : Module 𝕜 E\ninst✝¹ : Module 𝕜 F\ninst✝ : ContinuousSMul 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F\nh : Exists fun V => And (Membership.mem (nhds 0) V) (Bornology.IsVonNBounded 𝕜 (Set.image (⇑f) V))\nx : E\n⊢ Eq ((f.clmOfExistsBoundedImage h) x) (f x)","decl":"@[simp]\ntheorem LinearMap.clmOfExistsBoundedImage_apply {f : E →ₗ[𝕜] F}\n    {h : ∃ V ∈ 𝓝 (0 : E), Bornology.IsVonNBounded 𝕜 (f '' V)} {x : E} :\n    f.clmOfExistsBoundedImage h x = f x :=\n  rfl\n\n"}
{"name":"LinearMap.continuousAt_zero_of_locally_bounded","module":"Mathlib.Analysis.LocallyConvex.ContinuousOfBounded","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹¹ : AddCommGroup E\ninst✝¹⁰ : UniformSpace E\ninst✝⁹ : UniformAddGroup E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : UniformSpace F\ninst✝⁶ : FirstCountableTopology E\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : Module 𝕜 E\ninst✝³ : ContinuousSMul 𝕜 E\ninst✝² : RCLike 𝕜'\ninst✝¹ : Module 𝕜' F\ninst✝ : ContinuousSMul 𝕜' F\nσ : RingHom 𝕜 𝕜'\nf : LinearMap σ E F\nhf : ∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (Set.image (⇑f) s)\n⊢ ContinuousAt (⇑f) 0","decl":"theorem LinearMap.continuousAt_zero_of_locally_bounded (f : E →ₛₗ[σ] F)\n    (hf : ∀ s, IsVonNBounded 𝕜 s → IsVonNBounded 𝕜' (f '' s)) : ContinuousAt f 0 := by\n  -- Assume that f is not continuous at 0\n  by_contra h\n  -- We use a decreasing balanced basis for 0 : E and a balanced basis for 0 : F\n  -- and reformulate non-continuity in terms of these bases\n  rcases (nhds_basis_balanced 𝕜 E).exists_antitone_subbasis with ⟨b, bE1, bE⟩\n  simp only [_root_.id] at bE\n  have bE' : (𝓝 (0 : E)).HasBasis (fun x : ℕ => x ≠ 0) fun n : ℕ => (n : 𝕜)⁻¹ • b n := by\n    refine bE.1.to_hasBasis ?_ ?_\n    · intro n _\n      use n + 1\n      simp only [Ne, Nat.succ_ne_zero, not_false_iff, Nat.cast_add, Nat.cast_one, true_and]\n      -- `b (n + 1) ⊆ b n` follows from `Antitone`.\n      have h : b (n + 1) ⊆ b n := bE.2 (by simp)\n      refine _root_.trans ?_ h\n      rintro y ⟨x, hx, hy⟩\n      -- Since `b (n + 1)` is balanced `(n+1)⁻¹ b (n + 1) ⊆ b (n + 1)`\n      rw [← hy]\n      refine (bE1 (n + 1)).2.smul_mem ?_ hx\n      have h' : 0 < (n : ℝ) + 1 := n.cast_add_one_pos\n      rw [norm_inv, ← Nat.cast_one, ← Nat.cast_add, RCLike.norm_natCast, Nat.cast_add,\n        Nat.cast_one, inv_le_comm₀ h' zero_lt_one]\n      simp\n    intro n hn\n    -- The converse direction follows from continuity of the scalar multiplication\n    have hcont : ContinuousAt (fun x : E => (n : 𝕜) • x) 0 :=\n      (continuous_const_smul (n : 𝕜)).continuousAt\n    simp only [ContinuousAt, map_zero, smul_zero] at hcont\n    rw [bE.1.tendsto_left_iff] at hcont\n    rcases hcont (b n) (bE1 n).1 with ⟨i, _, hi⟩\n    refine ⟨i, trivial, fun x hx => ⟨(n : 𝕜) • x, hi hx, ?_⟩⟩\n    simp [← mul_smul, hn]\n  rw [ContinuousAt, map_zero, bE'.tendsto_iff (nhds_basis_balanced 𝕜' F)] at h\n  push_neg at h\n  rcases h with ⟨V, ⟨hV, -⟩, h⟩\n  simp only [_root_.id, forall_true_left] at h\n  -- There exists `u : ℕ → E` such that for all `n : ℕ` we have `u n ∈ n⁻¹ • b n` and `f (u n) ∉ V`\n  choose! u hu hu' using h\n  -- The sequence `(fun n ↦ n • u n)` converges to `0`\n  have h_tendsto : Tendsto (fun n : ℕ => (n : 𝕜) • u n) atTop (𝓝 (0 : E)) := by\n    apply bE.tendsto\n    intro n\n    by_cases h : n = 0\n    · rw [h, Nat.cast_zero, zero_smul]\n      exact mem_of_mem_nhds (bE.1.mem_of_mem <| by trivial)\n    rcases hu n h with ⟨y, hy, hu1⟩\n    convert hy\n    rw [← hu1, ← mul_smul]\n    simp only [h, mul_inv_cancel₀, Ne, Nat.cast_eq_zero, not_false_iff, one_smul]\n  -- The image `(fun n ↦ n • u n)` is von Neumann bounded:\n  have h_bounded : IsVonNBounded 𝕜 (Set.range fun n : ℕ => (n : 𝕜) • u n) :=\n    h_tendsto.cauchySeq.totallyBounded_range.isVonNBounded 𝕜\n  -- Since `range u` is bounded, `V` absorbs it\n  rcases (hf _ h_bounded hV).exists_pos with ⟨r, hr, h'⟩\n  cases' exists_nat_gt r with n hn\n  -- We now find a contradiction between `f (u n) ∉ V` and the absorbing property\n  have h1 : r ≤ ‖(n : 𝕜')‖ := by\n    rw [RCLike.norm_natCast]\n    exact hn.le\n  have hn' : 0 < ‖(n : 𝕜')‖ := lt_of_lt_of_le hr h1\n  rw [norm_pos_iff, Ne, Nat.cast_eq_zero] at hn'\n  have h'' : f (u n) ∈ V := by\n    simp only [Set.image_subset_iff] at h'\n    specialize h' (n : 𝕜') h1 (Set.mem_range_self n)\n    simp only [Set.mem_preimage, LinearMap.map_smulₛₗ, map_natCast] at h'\n    rcases h' with ⟨y, hy, h'⟩\n    apply_fun fun y : F => (n : 𝕜')⁻¹ • y at h'\n    simp only [hn', inv_smul_smul₀, Ne, Nat.cast_eq_zero, not_false_iff] at h'\n    rwa [← h']\n  exact hu' n hn' h''\n\n"}
{"name":"LinearMap.continuous_of_locally_bounded","module":"Mathlib.Analysis.LocallyConvex.ContinuousOfBounded","initialProofState":"𝕜 : Type u_1\n𝕜' : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : UniformSpace E\ninst✝¹⁰ : UniformAddGroup E\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : FirstCountableTopology E\ninst✝⁶ : RCLike 𝕜\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : ContinuousSMul 𝕜 E\ninst✝³ : RCLike 𝕜'\ninst✝² : Module 𝕜' F\ninst✝¹ : ContinuousSMul 𝕜' F\nσ : RingHom 𝕜 𝕜'\ninst✝ : UniformAddGroup F\nf : LinearMap σ E F\nhf : ∀ (s : Set E), Bornology.IsVonNBounded 𝕜 s → Bornology.IsVonNBounded 𝕜' (Set.image (⇑f) s)\n⊢ Continuous ⇑f","decl":"/-- If `E` is first countable, then every locally bounded linear map `E →ₛₗ[σ] F` is continuous. -/\ntheorem LinearMap.continuous_of_locally_bounded [UniformAddGroup F] (f : E →ₛₗ[σ] F)\n    (hf : ∀ s, IsVonNBounded 𝕜 s → IsVonNBounded 𝕜' (f '' s)) : Continuous f :=\n  (uniformContinuous_of_continuousAt_zero f <| f.continuousAt_zero_of_locally_bounded hf).continuous\n\n"}
