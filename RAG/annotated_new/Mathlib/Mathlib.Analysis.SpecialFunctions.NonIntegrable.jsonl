{"name":"not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter_aux","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : NormedAddCommGroup F\ninst✝² : CompleteSpace E\nf : Real → E\ng : Real → F\nk : Set Real\nl : Filter Real\ninst✝¹ : l.NeBot\ninst✝ : Filter.TendstoIxxClass Set.Icc l l\nhl : Membership.mem l k\nhd : Filter.Eventually (fun x => DifferentiableAt Real f x) l\nhf : Filter.Tendsto (fun x => Norm.norm (f x)) l Filter.atTop\nhfg : Asymptotics.IsBigO l (deriv f) g\n⊢ Not (MeasureTheory.IntegrableOn g k MeasureTheory.MeasureSpace.volume)","decl":"/-- If `f` is eventually differentiable along a nontrivial filter `l : Filter ℝ` that is generated\nby convex sets, the norm of `f` tends to infinity along `l`, and `f' = O(g)` along `l`, where `f'`\nis the derivative of `f`, then `g` is not integrable on any set `k` belonging to `l`.\nAuxiliary version assuming that `E` is complete. -/\ntheorem not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter_aux\n    [CompleteSpace E] {f : ℝ → E} {g : ℝ → F}\n    {k : Set ℝ} (l : Filter ℝ) [NeBot l] [TendstoIxxClass Icc l l]\n    (hl : k ∈ l) (hd : ∀ᶠ x in l, DifferentiableAt ℝ f x) (hf : Tendsto (fun x => ‖f x‖) l atTop)\n    (hfg : deriv f =O[l] g) : ¬IntegrableOn g k := by\n  intro hgi\n  obtain ⟨C, hC₀, s, hsl, hsub, hfd, hg⟩ :\n    ∃ (C : ℝ) (_ : 0 ≤ C), ∃ s ∈ l, (∀ x ∈ s, ∀ y ∈ s, [[x, y]] ⊆ k) ∧\n      (∀ x ∈ s, ∀ y ∈ s, ∀ z ∈ [[x, y]], DifferentiableAt ℝ f z) ∧\n        ∀ x ∈ s, ∀ y ∈ s, ∀ z ∈ [[x, y]], ‖deriv f z‖ ≤ C * ‖g z‖ := by\n    rcases hfg.exists_nonneg with ⟨C, C₀, hC⟩\n    have h : ∀ᶠ x : ℝ × ℝ in l ×ˢ l,\n        ∀ y ∈ [[x.1, x.2]], (DifferentiableAt ℝ f y ∧ ‖deriv f y‖ ≤ C * ‖g y‖) ∧ y ∈ k :=\n      (tendsto_fst.uIcc tendsto_snd).eventually ((hd.and hC.bound).and hl).smallSets\n    rcases mem_prod_self_iff.1 h with ⟨s, hsl, hs⟩\n    simp only [prod_subset_iff, mem_setOf_eq] at hs\n    exact ⟨C, C₀, s, hsl, fun x hx y hy z hz => (hs x hx y hy z hz).2, fun x hx y hy z hz =>\n      (hs x hx y hy z hz).1.1, fun x hx y hy z hz => (hs x hx y hy z hz).1.2⟩\n  replace hgi : IntegrableOn (fun x ↦ C * ‖g x‖) k := by exact hgi.norm.smul C\n  obtain ⟨c, hc, d, hd, hlt⟩ : ∃ c ∈ s, ∃ d ∈ s, (‖f c‖ + ∫ y in k, C * ‖g y‖) < ‖f d‖ := by\n    rcases Filter.nonempty_of_mem hsl with ⟨c, hc⟩\n    have : ∀ᶠ x in l, (‖f c‖ + ∫ y in k, C * ‖g y‖) < ‖f x‖ :=\n      hf.eventually (eventually_gt_atTop _)\n    exact ⟨c, hc, (this.and hsl).exists.imp fun d hd => ⟨hd.2, hd.1⟩⟩\n  specialize hsub c hc d hd; specialize hfd c hc d hd\n  replace hg : ∀ x ∈ Ι c d, ‖deriv f x‖ ≤ C * ‖g x‖ :=\n    fun z hz => hg c hc d hd z ⟨hz.1.le, hz.2⟩\n  have hg_ae : ∀ᵐ x ∂volume.restrict (Ι c d), ‖deriv f x‖ ≤ C * ‖g x‖ :=\n    (ae_restrict_mem measurableSet_uIoc).mono hg\n  have hsub' : Ι c d ⊆ k := Subset.trans Ioc_subset_Icc_self hsub\n  have hfi : IntervalIntegrable (deriv f) volume c d := by\n    rw [intervalIntegrable_iff]\n    have : IntegrableOn (fun x ↦ C * ‖g x‖) (Ι c d) := IntegrableOn.mono hgi hsub' le_rfl\n    exact Integrable.mono' this (aestronglyMeasurable_deriv _ _) hg_ae\n  refine hlt.not_le (sub_le_iff_le_add'.1 ?_)\n  calc\n    ‖f d‖ - ‖f c‖ ≤ ‖f d - f c‖ := norm_sub_norm_le _ _\n    _ = ‖∫ x in c..d, deriv f x‖ := congr_arg _ (integral_deriv_eq_sub hfd hfi).symm\n    _ = ‖∫ x in Ι c d, deriv f x‖ := norm_integral_eq_norm_integral_Ioc _\n    _ ≤ ∫ x in Ι c d, ‖deriv f x‖ := norm_integral_le_integral_norm _\n    _ ≤ ∫ x in Ι c d, C * ‖g x‖ :=\n      setIntegral_mono_on hfi.norm.def' (hgi.mono_set hsub') measurableSet_uIoc hg\n    _ ≤ ∫ x in k, C * ‖g x‖ := by\n      apply setIntegral_mono_set hgi\n        (ae_of_all _ fun x => mul_nonneg hC₀ (norm_nonneg _)) hsub'.eventuallyLE\n\n"}
{"name":"not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedAddCommGroup F\nf : Real → E\ng : Real → F\nk : Set Real\nl : Filter Real\ninst✝¹ : l.NeBot\ninst✝ : Filter.TendstoIxxClass Set.Icc l l\nhl : Membership.mem l k\nhd : Filter.Eventually (fun x => DifferentiableAt Real f x) l\nhf : Filter.Tendsto (fun x => Norm.norm (f x)) l Filter.atTop\nhfg : Asymptotics.IsBigO l (deriv f) g\n⊢ Not (MeasureTheory.IntegrableOn g k MeasureTheory.MeasureSpace.volume)","decl":"theorem not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter\n    {f : ℝ → E} {g : ℝ → F}\n    {k : Set ℝ} (l : Filter ℝ) [NeBot l] [TendstoIxxClass Icc l l]\n    (hl : k ∈ l) (hd : ∀ᶠ x in l, DifferentiableAt ℝ f x) (hf : Tendsto (fun x => ‖f x‖) l atTop)\n    (hfg : deriv f =O[l] g) : ¬IntegrableOn g k := by\n  let a : E →ₗᵢ[ℝ] UniformSpace.Completion E := UniformSpace.Completion.toComplₗᵢ\n  let f' := a ∘ f\n  have h'd : ∀ᶠ x in l, DifferentiableAt ℝ f' x := by\n    filter_upwards [hd] with x hx using a.toContinuousLinearMap.differentiableAt.comp x hx\n  have h'f : Tendsto (fun x => ‖f' x‖) l atTop := hf.congr (fun x ↦ by simp [f'])\n  have h'fg : deriv f' =O[l] g := by\n    apply IsBigO.trans _ hfg\n    rw [← isBigO_norm_norm]\n    suffices (fun x ↦ ‖deriv f' x‖) =ᶠ[l] (fun x ↦ ‖deriv f x‖) by exact this.isBigO\n    filter_upwards [hd] with x hx\n    have : deriv f' x = a (deriv f x) := by\n      rw [fderiv_comp_deriv x _ hx]\n      · have : fderiv ℝ a (f x) = a.toContinuousLinearMap := a.toContinuousLinearMap.fderiv\n        simp only [this]\n        rfl\n      · exact a.toContinuousLinearMap.differentiableAt\n    simp only [this]\n    simp\n  exact not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter_aux l hl h'd h'f h'fg\n\n"}
{"name":"not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_filter","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedAddCommGroup F\nf : Real → E\ng : Real → F\na b : Real\nl : Filter Real\ninst✝¹ : l.NeBot\ninst✝ : Filter.TendstoIxxClass Set.Icc l l\nhl : Membership.mem l (Set.uIcc a b)\nhd : Filter.Eventually (fun x => DifferentiableAt Real f x) l\nhf : Filter.Tendsto (fun x => Norm.norm (f x)) l Filter.atTop\nhfg : Asymptotics.IsBigO l (deriv f) g\n⊢ Not (IntervalIntegrable g MeasureTheory.MeasureSpace.volume a b)","decl":"/-- If `f` is eventually differentiable along a nontrivial filter `l : Filter ℝ` that is generated\nby convex sets, the norm of `f` tends to infinity along `l`, and `f' = O(g)` along `l`, where `f'`\nis the derivative of `f`, then `g` is not integrable on any interval `a..b` such that\n`[a, b] ∈ l`. -/\ntheorem not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_filter {f : ℝ → E} {g : ℝ → F}\n    {a b : ℝ} (l : Filter ℝ) [NeBot l] [TendstoIxxClass Icc l l] (hl : [[a, b]] ∈ l)\n    (hd : ∀ᶠ x in l, DifferentiableAt ℝ f x) (hf : Tendsto (fun x => ‖f x‖) l atTop)\n    (hfg : deriv f =O[l] g) : ¬IntervalIntegrable g volume a b := by\n  rw [intervalIntegrable_iff']\n  exact not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter _ hl hd hf hfg\n\n"}
{"name":"not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_within_diff_singleton","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedAddCommGroup F\nf : Real → E\ng : Real → F\na b c : Real\nhne : Ne a b\nhc : Membership.mem (Set.uIcc a b) c\nh_deriv : Filter.Eventually (fun x => DifferentiableAt Real f x) (nhdsWithin c (SDiff.sdiff (Set.uIcc a b) (Singleton.singleton c)))\nh_infty : Filter.Tendsto (fun x => Norm.norm (f x)) (nhdsWithin c (SDiff.sdiff (Set.uIcc a b) (Singleton.singleton c))) Filter.atTop\nhg : Asymptotics.IsBigO (nhdsWithin c (SDiff.sdiff (Set.uIcc a b) (Singleton.singleton c))) (deriv f) g\n⊢ Not (IntervalIntegrable g MeasureTheory.MeasureSpace.volume a b)","decl":"/-- If `a ≠ b`, `c ∈ [a, b]`, `f` is differentiable in the neighborhood of `c` within\n`[a, b] \\ {c}`, `‖f x‖ → ∞` as `x → c` within `[a, b] \\ {c}`, and `f' = O(g)` along\n`𝓝[[a, b] \\ {c}] c`, where `f'` is the derivative of `f`, then `g` is not interval integrable on\n`a..b`. -/\ntheorem not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_within_diff_singleton\n    {f : ℝ → E} {g : ℝ → F} {a b c : ℝ} (hne : a ≠ b) (hc : c ∈ [[a, b]])\n    (h_deriv : ∀ᶠ x in 𝓝[[[a, b]] \\ {c}] c, DifferentiableAt ℝ f x)\n    (h_infty : Tendsto (fun x => ‖f x‖) (𝓝[[[a, b]] \\ {c}] c) atTop)\n    (hg : deriv f =O[𝓝[[[a, b]] \\ {c}] c] g) : ¬IntervalIntegrable g volume a b := by\n  obtain ⟨l, hl, hl', hle, hmem⟩ :\n    ∃ l : Filter ℝ, TendstoIxxClass Icc l l ∧ l.NeBot ∧ l ≤ 𝓝 c ∧ [[a, b]] \\ {c} ∈ l := by\n    cases' (min_lt_max.2 hne).lt_or_lt c with hlt hlt\n    · refine ⟨𝓝[<] c, inferInstance, inferInstance, inf_le_left, ?_⟩\n      rw [← Iic_diff_right]\n      exact diff_mem_nhdsWithin_diff (Icc_mem_nhdsLE_of_mem ⟨hlt, hc.2⟩) _\n    · refine ⟨𝓝[>] c, inferInstance, inferInstance, inf_le_left, ?_⟩\n      rw [← Ici_diff_left]\n      exact diff_mem_nhdsWithin_diff (Icc_mem_nhdsGE_of_mem ⟨hc.1, hlt⟩) _\n  have : l ≤ 𝓝[[[a, b]] \\ {c}] c := le_inf hle (le_principal_iff.2 hmem)\n  exact not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_filter l\n    (mem_of_superset hmem diff_subset) (h_deriv.filter_mono this) (h_infty.mono_left this)\n    (hg.mono this)\n\n"}
{"name":"not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_punctured","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedAddCommGroup F\nf : Real → E\ng : Real → F\na b c : Real\nh_deriv : Filter.Eventually (fun x => DifferentiableAt Real f x) (nhdsWithin c (HasCompl.compl (Singleton.singleton c)))\nh_infty : Filter.Tendsto (fun x => Norm.norm (f x)) (nhdsWithin c (HasCompl.compl (Singleton.singleton c))) Filter.atTop\nhg : Asymptotics.IsBigO (nhdsWithin c (HasCompl.compl (Singleton.singleton c))) (deriv f) g\nhne : Ne a b\nhc : Membership.mem (Set.uIcc a b) c\n⊢ Not (IntervalIntegrable g MeasureTheory.MeasureSpace.volume a b)","decl":"/-- If `f` is differentiable in a punctured neighborhood of `c`, `‖f x‖ → ∞` as `x → c` (more\nformally, along the filter `𝓝[≠] c`), and `f' = O(g)` along `𝓝[≠] c`, where `f'` is the derivative\nof `f`, then `g` is not interval integrable on any nontrivial interval `a..b` such that\n`c ∈ [a, b]`. -/\ntheorem not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_punctured {f : ℝ → E}\n    {g : ℝ → F} {a b c : ℝ} (h_deriv : ∀ᶠ x in 𝓝[≠] c, DifferentiableAt ℝ f x)\n    (h_infty : Tendsto (fun x => ‖f x‖) (𝓝[≠] c) atTop) (hg : deriv f =O[𝓝[≠] c] g) (hne : a ≠ b)\n    (hc : c ∈ [[a, b]]) : ¬IntervalIntegrable g volume a b :=\n  have : 𝓝[[[a, b]] \\ {c}] c ≤ 𝓝[≠] c := nhdsWithin_mono _ inter_subset_right\n  not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_within_diff_singleton hne hc\n    (h_deriv.filter_mono this) (h_infty.mono_left this) (hg.mono this)\n\n"}
{"name":"not_intervalIntegrable_of_sub_inv_isBigO_punctured","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"F : Type u_2\ninst✝ : NormedAddCommGroup F\nf : Real → F\na b c : Real\nhf : Asymptotics.IsBigO (nhdsWithin c (HasCompl.compl (Singleton.singleton c))) (fun x => Inv.inv (HSub.hSub x c)) f\nhne : Ne a b\nhc : Membership.mem (Set.uIcc a b) c\n⊢ Not (IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b)","decl":"/-- If `f` grows in the punctured neighborhood of `c : ℝ` at least as fast as `1 / (x - c)`,\nthen it is not interval integrable on any nontrivial interval `a..b`, `c ∈ [a, b]`. -/\ntheorem not_intervalIntegrable_of_sub_inv_isBigO_punctured {f : ℝ → F} {a b c : ℝ}\n    (hf : (fun x => (x - c)⁻¹) =O[𝓝[≠] c] f) (hne : a ≠ b) (hc : c ∈ [[a, b]]) :\n    ¬IntervalIntegrable f volume a b := by\n  have A : ∀ᶠ x in 𝓝[≠] c, HasDerivAt (fun x => Real.log (x - c)) (x - c)⁻¹ x := by\n    filter_upwards [self_mem_nhdsWithin] with x hx\n    simpa using ((hasDerivAt_id x).sub_const c).log (sub_ne_zero.2 hx)\n  have B : Tendsto (fun x => ‖Real.log (x - c)‖) (𝓝[≠] c) atTop := by\n    refine tendsto_abs_atBot_atTop.comp (Real.tendsto_log_nhdsWithin_zero.comp ?_)\n    rw [← sub_self c]\n    exact ((hasDerivAt_id c).sub_const c).tendsto_punctured_nhds one_ne_zero\n  exact not_intervalIntegrable_of_tendsto_norm_atTop_of_deriv_isBigO_punctured\n    (A.mono fun x hx => hx.differentiableAt) B\n    (hf.congr' (A.mono fun x hx => hx.deriv.symm) EventuallyEq.rfl) hne hc\n\n"}
{"name":"intervalIntegrable_sub_inv_iff","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"a b c : Real\n⊢ Iff (IntervalIntegrable (fun x => Inv.inv (HSub.hSub x c)) MeasureTheory.MeasureSpace.volume a b) (Or (Eq a b) (Not (Membership.mem (Set.uIcc a b) c)))","decl":"/-- The function `fun x => (x - c)⁻¹` is integrable on `a..b` if and only if\n`a = b` or `c ∉ [a, b]`. -/\n@[simp]\ntheorem intervalIntegrable_sub_inv_iff {a b c : ℝ} :\n    IntervalIntegrable (fun x => (x - c)⁻¹) volume a b ↔ a = b ∨ c ∉ [[a, b]] := by\n  constructor\n  · refine fun h => or_iff_not_imp_left.2 fun hne hc => ?_\n    exact not_intervalIntegrable_of_sub_inv_isBigO_punctured (isBigO_refl _ _) hne hc h\n  · rintro (rfl | h₀)\n    · exact IntervalIntegrable.refl\n    refine ((continuous_sub_right c).continuousOn.inv₀ ?_).intervalIntegrable\n    exact fun x hx => sub_ne_zero.2 <| ne_of_mem_of_not_mem hx h₀\n\n"}
{"name":"intervalIntegrable_inv_iff","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"a b : Real\n⊢ Iff (IntervalIntegrable (fun x => Inv.inv x) MeasureTheory.MeasureSpace.volume a b) (Or (Eq a b) (Not (Membership.mem (Set.uIcc a b) 0)))","decl":"/-- The function `fun x => x⁻¹` is integrable on `a..b` if and only if\n`a = b` or `0 ∉ [a, b]`. -/\n@[simp]\ntheorem intervalIntegrable_inv_iff {a b : ℝ} :\n    IntervalIntegrable (fun x => x⁻¹) volume a b ↔ a = b ∨ (0 : ℝ) ∉ [[a, b]] := by\n  simp only [← intervalIntegrable_sub_inv_iff, sub_zero]\n\n"}
{"name":"not_IntegrableOn_Ici_inv","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"a : Real\n⊢ Not (MeasureTheory.IntegrableOn (fun x => Inv.inv x) (Set.Ici a) MeasureTheory.MeasureSpace.volume)","decl":"/-- The function `fun x ↦ x⁻¹` is not integrable on any interval `[a, +∞)`. -/\ntheorem not_IntegrableOn_Ici_inv {a : ℝ} :\n    ¬ IntegrableOn (fun x => x⁻¹) (Ici a) := by\n  have A : ∀ᶠ x in atTop, HasDerivAt (fun x => Real.log x) x⁻¹ x := by\n    filter_upwards [Ioi_mem_atTop 0] with x hx using Real.hasDerivAt_log (ne_of_gt hx)\n  have B : Tendsto (fun x => ‖Real.log x‖) atTop atTop :=\n    tendsto_norm_atTop_atTop.comp Real.tendsto_log_atTop\n  exact not_integrableOn_of_tendsto_norm_atTop_of_deriv_isBigO_filter atTop (Ici_mem_atTop a)\n    (A.mono (fun x hx ↦ hx.differentiableAt)) B\n    (Filter.EventuallyEq.isBigO (A.mono (fun x hx ↦ hx.deriv)))\n\n"}
{"name":"not_IntegrableOn_Ioi_inv","module":"Mathlib.Analysis.SpecialFunctions.NonIntegrable","initialProofState":"a : Real\n⊢ Not (MeasureTheory.IntegrableOn (fun x => Inv.inv x) (Set.Ioi a) MeasureTheory.MeasureSpace.volume)","decl":"/-- The function `fun x ↦ x⁻¹` is not integrable on any interval `(a, +∞)`. -/\ntheorem not_IntegrableOn_Ioi_inv {a : ℝ} :\n    ¬ IntegrableOn (·⁻¹) (Ioi a) := by\n  simpa only [IntegrableOn, restrict_Ioi_eq_restrict_Ici] using not_IntegrableOn_Ici_inv\n"}
