{"name":"Real.eulerMascheroniSeq_zero","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ Eq (Real.eulerMascheroniSeq 0) 0","decl":"lemma eulerMascheroniSeq_zero : eulerMascheroniSeq 0 = 0 := by\n  simp [eulerMascheroniSeq, harmonic_zero]\n\n"}
{"name":"Real.strictMono_eulerMascheroniSeq","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ StrictMono Real.eulerMascheroniSeq","decl":"lemma strictMono_eulerMascheroniSeq : StrictMono eulerMascheroniSeq := by\n  refine strictMono_nat_of_lt_succ (fun n ‚Ü¶ ?_)\n  rw [eulerMascheroniSeq, eulerMascheroniSeq, ‚Üê sub_pos, sub_sub_sub_comm,\n    harmonic_succ, add_comm, Rat.cast_add, add_sub_cancel_right,\n    ‚Üê log_div (by positivity) (by positivity), add_div, Nat.cast_add_one,\n    Nat.cast_add_one, div_self (by positivity), sub_pos, one_div, Rat.cast_inv, Rat.cast_add,\n    Rat.cast_one, Rat.cast_natCast]\n  refine (log_lt_sub_one_of_pos ?_ (ne_of_gt <| lt_add_of_pos_right _ ?_)).trans_le (le_of_eq ?_)\n  ¬∑ positivity\n  ¬∑ positivity\n  ¬∑ simp only [add_sub_cancel_left]\n\n"}
{"name":"Real.one_half_lt_eulerMascheroniSeq_six","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ LT.lt (1 / 2) (Real.eulerMascheroniSeq 6)","decl":"lemma one_half_lt_eulerMascheroniSeq_six : 1 / 2 < eulerMascheroniSeq 6 := by\n  have : eulerMascheroniSeq 6 = 49 / 20 - log 7 := by\n    rw [eulerMascheroniSeq]\n    norm_num\n  rw [this, lt_sub_iff_add_lt, ‚Üê lt_sub_iff_add_lt', log_lt_iff_lt_exp (by positivity)]\n  refine lt_of_lt_of_le ?_ (Real.sum_le_exp_of_nonneg (by norm_num) 7)\n  simp_rw [Finset.sum_range_succ, Nat.factorial_succ]\n  norm_num\n\n"}
{"name":"Real.eulerMascheroniSeq'_one","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ Eq (Real.eulerMascheroniSeq' 1) 1","decl":"lemma eulerMascheroniSeq'_one : eulerMascheroniSeq' 1 = 1 := by\n  simp [eulerMascheroniSeq']\n\n"}
{"name":"Real.strictAnti_eulerMascheroniSeq'","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ StrictAnti Real.eulerMascheroniSeq'","decl":"lemma strictAnti_eulerMascheroniSeq' : StrictAnti eulerMascheroniSeq' := by\n  refine strictAnti_nat_of_succ_lt (fun n ‚Ü¶ ?_)\n  rcases Nat.eq_zero_or_pos n with rfl | hn\n  ¬∑ simp [eulerMascheroniSeq']\n  simp_rw [eulerMascheroniSeq', eq_false_intro hn.ne', reduceCtorEq, if_false]\n  rw [‚Üê sub_pos, sub_sub_sub_comm,\n    harmonic_succ, Rat.cast_add, ‚Üê sub_sub, sub_self, zero_sub, sub_eq_add_neg, neg_sub,\n    ‚Üê sub_eq_neg_add, sub_pos, ‚Üê log_div (by positivity) (by positivity), ‚Üê neg_lt_neg_iff,\n    ‚Üê log_inv]\n  refine (log_lt_sub_one_of_pos ?_ ?_).trans_le (le_of_eq ?_)\n  ¬∑ positivity\n  ¬∑ field_simp\n  ¬∑ field_simp\n\n"}
{"name":"Real.eulerMascheroniSeq'_six_lt_two_thirds","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ LT.lt (Real.eulerMascheroniSeq' 6) (2 / 3)","decl":"lemma eulerMascheroniSeq'_six_lt_two_thirds : eulerMascheroniSeq' 6 < 2 / 3 := by\n  have h1 : eulerMascheroniSeq' 6 = 49 / 20 - log 6 := by\n    rw [eulerMascheroniSeq']\n    norm_num\n  rw [h1, sub_lt_iff_lt_add, ‚Üê sub_lt_iff_lt_add', lt_log_iff_exp_lt (by positivity)]\n  norm_num\n  have := rpow_lt_rpow (exp_pos _).le exp_one_lt_d9 (by norm_num : (0 : ‚Ñù) < 107 / 60)\n  rw [exp_one_rpow] at this\n  refine lt_trans this ?_\n  rw [‚Üê rpow_lt_rpow_iff (z := 60), ‚Üê rpow_mul, div_mul_cancel‚ÇÄ, ‚Üê Nat.cast_ofNat,\n    ‚Üê Nat.cast_ofNat, rpow_natCast, Nat.cast_ofNat, ‚Üê Nat.cast_ofNat (n := 60), rpow_natCast]\n  ¬∑ norm_num\n  all_goals positivity\n\n"}
{"name":"Real.eulerMascheroniSeq_lt_eulerMascheroniSeq'","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"m n : Nat\n‚ä¢ LT.lt (Real.eulerMascheroniSeq m) (Real.eulerMascheroniSeq' n)","decl":"lemma eulerMascheroniSeq_lt_eulerMascheroniSeq' (m n : ‚Ñï) :\n    eulerMascheroniSeq m < eulerMascheroniSeq' n := by\n  have (r : ‚Ñï) : eulerMascheroniSeq r < eulerMascheroniSeq' r := by\n    rcases eq_zero_or_pos r with rfl | hr\n    ¬∑ simp [eulerMascheroniSeq, eulerMascheroniSeq']\n    simp only [eulerMascheroniSeq, eulerMascheroniSeq', hr.ne', if_false]\n    gcongr\n    linarith\n  apply (strictMono_eulerMascheroniSeq.monotone (le_max_left m n)).trans_lt\n  exact (this _).trans_le (strictAnti_eulerMascheroniSeq'.antitone (le_max_right m n))\n\n"}
{"name":"Real.tendsto_eulerMascheroniSeq","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ Filter.Tendsto Real.eulerMascheroniSeq Filter.atTop (nhds Real.eulerMascheroniConstant)","decl":"lemma tendsto_eulerMascheroniSeq :\n    Tendsto eulerMascheroniSeq atTop (ùìù eulerMascheroniConstant) := by\n  have := tendsto_atTop_ciSup strictMono_eulerMascheroniSeq.monotone ?_\n  ¬∑ rwa [eulerMascheroniConstant, this.limUnder_eq]\n  ¬∑ exact ‚ü®_, fun _ ‚ü®_, hn‚ü© ‚Ü¶ hn ‚ñ∏ (eulerMascheroniSeq_lt_eulerMascheroniSeq' _ 1).le‚ü©\n\n"}
{"name":"Real.tendsto_harmonic_sub_log_add_one","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ Filter.Tendsto (fun n => HSub.hSub (‚Üë(harmonic n)) (Real.log (HAdd.hAdd (‚Üën) 1))) Filter.atTop (nhds Real.eulerMascheroniConstant)","decl":"lemma tendsto_harmonic_sub_log_add_one :\n    Tendsto (fun n : ‚Ñï ‚Ü¶ harmonic n - log (n + 1)) atTop (ùìù eulerMascheroniConstant) :=\n  tendsto_eulerMascheroniSeq\n\n"}
{"name":"Real.tendsto_eulerMascheroniSeq'","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ Filter.Tendsto Real.eulerMascheroniSeq' Filter.atTop (nhds Real.eulerMascheroniConstant)","decl":"lemma tendsto_eulerMascheroniSeq' :\n    Tendsto eulerMascheroniSeq' atTop (ùìù eulerMascheroniConstant) := by\n  suffices Tendsto (fun n ‚Ü¶ eulerMascheroniSeq' n - eulerMascheroniSeq n) atTop (ùìù 0) by\n    simpa using this.add tendsto_eulerMascheroniSeq\n  suffices Tendsto (fun x : ‚Ñù ‚Ü¶ log (x + 1) - log x) atTop (ùìù 0) by\n    apply (this.comp tendsto_natCast_atTop_atTop).congr'\n    filter_upwards [eventually_ne_atTop 0] with n hn\n    simp [eulerMascheroniSeq, eulerMascheroniSeq', eq_false_intro hn]\n  suffices Tendsto (fun x : ‚Ñù ‚Ü¶ log (1 + 1 / x)) atTop (ùìù 0) by\n    apply this.congr'\n    filter_upwards [eventually_gt_atTop 0] with x hx\n    rw [‚Üê log_div (by positivity) (by positivity), add_div, div_self hx.ne']\n  simpa only [add_zero, log_one] using\n    ((tendsto_const_nhds.div_atTop tendsto_id).const_add 1).log (by positivity)\n\n"}
{"name":"Real.tendsto_harmonic_sub_log","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ Filter.Tendsto (fun n => HSub.hSub (‚Üë(harmonic n)) (Real.log ‚Üën)) Filter.atTop (nhds Real.eulerMascheroniConstant)","decl":"lemma tendsto_harmonic_sub_log :\n    Tendsto (fun n : ‚Ñï ‚Ü¶ harmonic n - log n) atTop (ùìù eulerMascheroniConstant) := by\n  apply tendsto_eulerMascheroniSeq'.congr'\n  filter_upwards [eventually_ne_atTop 0] with n hn\n  simp_rw [eulerMascheroniSeq', hn, if_false]\n\n"}
{"name":"Real.eulerMascheroniSeq_lt_eulerMascheroniConstant","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"n : Nat\n‚ä¢ LT.lt (Real.eulerMascheroniSeq n) Real.eulerMascheroniConstant","decl":"lemma eulerMascheroniSeq_lt_eulerMascheroniConstant (n : ‚Ñï) :\n    eulerMascheroniSeq n < eulerMascheroniConstant := by\n  refine (strictMono_eulerMascheroniSeq (Nat.lt_succ_self n)).trans_le ?_\n  apply strictMono_eulerMascheroniSeq.monotone.ge_of_tendsto tendsto_eulerMascheroniSeq\n\n"}
{"name":"Real.eulerMascheroniConstant_lt_eulerMascheroniSeq'","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"n : Nat\n‚ä¢ LT.lt Real.eulerMascheroniConstant (Real.eulerMascheroniSeq' n)","decl":"lemma eulerMascheroniConstant_lt_eulerMascheroniSeq' (n : ‚Ñï) :\n    eulerMascheroniConstant < eulerMascheroniSeq' n := by\n  refine lt_of_le_of_lt ?_ (strictAnti_eulerMascheroniSeq' (Nat.lt_succ_self n))\n  apply strictAnti_eulerMascheroniSeq'.antitone.le_of_tendsto tendsto_eulerMascheroniSeq'\n\n"}
{"name":"Real.one_half_lt_eulerMascheroniConstant","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ LT.lt (1 / 2) Real.eulerMascheroniConstant","decl":"/-- Lower bound for `Œ≥`. (The true value is about 0.57.) -/\nlemma one_half_lt_eulerMascheroniConstant : 1 / 2 < eulerMascheroniConstant :=\n  one_half_lt_eulerMascheroniSeq_six.trans (eulerMascheroniSeq_lt_eulerMascheroniConstant _)\n\n"}
{"name":"Real.eulerMascheroniConstant_lt_two_thirds","module":"Mathlib.NumberTheory.Harmonic.EulerMascheroni","initialProofState":"‚ä¢ LT.lt Real.eulerMascheroniConstant (2 / 3)","decl":"/-- Upper bound for `Œ≥`. (The true value is about 0.57.) -/\nlemma eulerMascheroniConstant_lt_two_thirds : eulerMascheroniConstant < 2 / 3 :=\n  (eulerMascheroniConstant_lt_eulerMascheroniSeq' _).trans eulerMascheroniSeq'_six_lt_two_thirds\n\n"}
