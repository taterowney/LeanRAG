{"name":"SmoothBumpCovering.mk.sizeOf_spec","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝¹⁰ : NormedAddCommGroup E\ninst✝⁹ : NormedSpace Real E\nH : Type uH\ninst✝⁸ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : ChartedSpace H M\ninst✝⁵ : FiniteDimensional Real E\ns : optParam (Set M) Set.univ\ninst✝⁴ : SizeOf ι\ninst✝³ : SizeOf E\ninst✝² : SizeOf H\ninst✝¹ : SizeOf M\ninst✝ : (a : M) → SizeOf (s a)\nc : ι → M\ntoFun : (i : ι) → SmoothBumpFunction I (c i)\nc_mem' : ∀ (i : ι), Membership.mem s (c i)\nlocallyFinite' : LocallyFinite fun i => Function.support ↑(toFun i)\neventuallyEq_one' : ∀ (x : M), Membership.mem s x → Exists fun i => (nhds x).EventuallyEq (↑(toFun i)) 1\n⊢ Eq (SizeOf.sizeOf { c := c, toFun := toFun, c_mem' := c_mem', locallyFinite' := locallyFinite', eventuallyEq_one' := eventuallyEq_one' }) 1","decl":"/-- We say that a collection of `SmoothBumpFunction`s is a `SmoothBumpCovering` of a set `s` if\n\n* `(f i).c ∈ s` for all `i`;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for each point `x ∈ s` there exists `i` such that `f i =ᶠ[𝓝 x] 1`;\n  in other words, `x` belongs to the interior of `{y | f i y = 1}`;\n\nIf `M` is a finite dimensional real manifold which is a `σ`-compact Hausdorff topological space,\nthen for every covering `U : M → Set M`, `∀ x, U x ∈ 𝓝 x`, there exists a `SmoothBumpCovering`\nsubordinate to `U`, see `SmoothBumpCovering.exists_isSubordinate`.\n\nThis covering can be used, e.g., to construct a partition of unity and to prove the weak\nWhitney embedding theorem. -/\nstructure SmoothBumpCovering [FiniteDimensional ℝ E] (s : Set M := univ) where\n  /-- The center point of each bump in the smooth covering. -/\n  c : ι → M\n  /-- A smooth bump function around `c i`. -/\n  toFun : ∀ i, SmoothBumpFunction I (c i)\n  /-- All the bump functions in the covering are centered at points in `s`. -/\n  c_mem' : ∀ i, c i ∈ s\n  /-- Around each point, there are only finitely many nonzero bump functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- Around each point in `s`, one of the bump functions is equal to `1`. -/\n  eventuallyEq_one' : ∀ x ∈ s, ∃ i, toFun i =ᶠ[𝓝 x] 1\n\n"}
{"name":"SmoothBumpCovering.mk.inj","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nc✝ : ι → M\ntoFun✝ : (i : ι) → SmoothBumpFunction I (c✝ i)\nc_mem'✝ : ∀ (i : ι), Membership.mem s (c✝ i)\nlocallyFinite'✝ : LocallyFinite fun i => Function.support ↑(toFun✝ i)\neventuallyEq_one'✝ : ∀ (x : M), Membership.mem s x → Exists fun i => (nhds x).EventuallyEq (↑(toFun✝ i)) 1\nc : ι → M\ntoFun : (i : ι) → SmoothBumpFunction I (c i)\nc_mem' : ∀ (i : ι), Membership.mem s (c i)\nlocallyFinite' : LocallyFinite fun i => Function.support ↑(toFun i)\neventuallyEq_one' : ∀ (x : M), Membership.mem s x → Exists fun i => (nhds x).EventuallyEq (↑(toFun i)) 1\nx✝ : Eq { c := c✝, toFun := toFun✝, c_mem' := c_mem'✝, locallyFinite' := locallyFinite'✝, eventuallyEq_one' := eventuallyEq_one'✝ } { c := c, toFun := toFun, c_mem' := c_mem', locallyFinite' := locallyFinite', eventuallyEq_one' := eventuallyEq_one' }\n⊢ And (Eq c✝ c) (HEq toFun✝ toFun)","decl":"/-- We say that a collection of `SmoothBumpFunction`s is a `SmoothBumpCovering` of a set `s` if\n\n* `(f i).c ∈ s` for all `i`;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for each point `x ∈ s` there exists `i` such that `f i =ᶠ[𝓝 x] 1`;\n  in other words, `x` belongs to the interior of `{y | f i y = 1}`;\n\nIf `M` is a finite dimensional real manifold which is a `σ`-compact Hausdorff topological space,\nthen for every covering `U : M → Set M`, `∀ x, U x ∈ 𝓝 x`, there exists a `SmoothBumpCovering`\nsubordinate to `U`, see `SmoothBumpCovering.exists_isSubordinate`.\n\nThis covering can be used, e.g., to construct a partition of unity and to prove the weak\nWhitney embedding theorem. -/\nstructure SmoothBumpCovering [FiniteDimensional ℝ E] (s : Set M := univ) where\n  /-- The center point of each bump in the smooth covering. -/\n  c : ι → M\n  /-- A smooth bump function around `c i`. -/\n  toFun : ∀ i, SmoothBumpFunction I (c i)\n  /-- All the bump functions in the covering are centered at points in `s`. -/\n  c_mem' : ∀ i, c i ∈ s\n  /-- Around each point, there are only finitely many nonzero bump functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- Around each point in `s`, one of the bump functions is equal to `1`. -/\n  eventuallyEq_one' : ∀ x ∈ s, ∃ i, toFun i =ᶠ[𝓝 x] 1\n\n"}
{"name":"SmoothBumpCovering.locallyFinite'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : optParam (Set M) Set.univ\nself : SmoothBumpCovering ι I M s\n⊢ LocallyFinite fun i => Function.support ↑(self.toFun i)","decl":"/-- We say that a collection of `SmoothBumpFunction`s is a `SmoothBumpCovering` of a set `s` if\n\n* `(f i).c ∈ s` for all `i`;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for each point `x ∈ s` there exists `i` such that `f i =ᶠ[𝓝 x] 1`;\n  in other words, `x` belongs to the interior of `{y | f i y = 1}`;\n\nIf `M` is a finite dimensional real manifold which is a `σ`-compact Hausdorff topological space,\nthen for every covering `U : M → Set M`, `∀ x, U x ∈ 𝓝 x`, there exists a `SmoothBumpCovering`\nsubordinate to `U`, see `SmoothBumpCovering.exists_isSubordinate`.\n\nThis covering can be used, e.g., to construct a partition of unity and to prove the weak\nWhitney embedding theorem. -/\nstructure SmoothBumpCovering [FiniteDimensional ℝ E] (s : Set M := univ) where\n  /-- The center point of each bump in the smooth covering. -/\n  c : ι → M\n  /-- A smooth bump function around `c i`. -/\n  toFun : ∀ i, SmoothBumpFunction I (c i)\n  /-- All the bump functions in the covering are centered at points in `s`. -/\n  c_mem' : ∀ i, c i ∈ s\n  /-- Around each point, there are only finitely many nonzero bump functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- Around each point in `s`, one of the bump functions is equal to `1`. -/\n  eventuallyEq_one' : ∀ x ∈ s, ∃ i, toFun i =ᶠ[𝓝 x] 1\n\n"}
{"name":"SmoothBumpCovering.mk.injEq","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nc✝ : ι → M\ntoFun✝ : (i : ι) → SmoothBumpFunction I (c✝ i)\nc_mem'✝ : ∀ (i : ι), Membership.mem s (c✝ i)\nlocallyFinite'✝ : LocallyFinite fun i => Function.support ↑(toFun✝ i)\neventuallyEq_one'✝ : ∀ (x : M), Membership.mem s x → Exists fun i => (nhds x).EventuallyEq (↑(toFun✝ i)) 1\nc : ι → M\ntoFun : (i : ι) → SmoothBumpFunction I (c i)\nc_mem' : ∀ (i : ι), Membership.mem s (c i)\nlocallyFinite' : LocallyFinite fun i => Function.support ↑(toFun i)\neventuallyEq_one' : ∀ (x : M), Membership.mem s x → Exists fun i => (nhds x).EventuallyEq (↑(toFun i)) 1\n⊢ Eq (Eq { c := c✝, toFun := toFun✝, c_mem' := c_mem'✝, locallyFinite' := locallyFinite'✝, eventuallyEq_one' := eventuallyEq_one'✝ } { c := c, toFun := toFun, c_mem' := c_mem', locallyFinite' := locallyFinite', eventuallyEq_one' := eventuallyEq_one' }) (And (Eq c✝ c) (HEq toFun✝ toFun))","decl":"/-- We say that a collection of `SmoothBumpFunction`s is a `SmoothBumpCovering` of a set `s` if\n\n* `(f i).c ∈ s` for all `i`;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for each point `x ∈ s` there exists `i` such that `f i =ᶠ[𝓝 x] 1`;\n  in other words, `x` belongs to the interior of `{y | f i y = 1}`;\n\nIf `M` is a finite dimensional real manifold which is a `σ`-compact Hausdorff topological space,\nthen for every covering `U : M → Set M`, `∀ x, U x ∈ 𝓝 x`, there exists a `SmoothBumpCovering`\nsubordinate to `U`, see `SmoothBumpCovering.exists_isSubordinate`.\n\nThis covering can be used, e.g., to construct a partition of unity and to prove the weak\nWhitney embedding theorem. -/\nstructure SmoothBumpCovering [FiniteDimensional ℝ E] (s : Set M := univ) where\n  /-- The center point of each bump in the smooth covering. -/\n  c : ι → M\n  /-- A smooth bump function around `c i`. -/\n  toFun : ∀ i, SmoothBumpFunction I (c i)\n  /-- All the bump functions in the covering are centered at points in `s`. -/\n  c_mem' : ∀ i, c i ∈ s\n  /-- Around each point, there are only finitely many nonzero bump functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- Around each point in `s`, one of the bump functions is equal to `1`. -/\n  eventuallyEq_one' : ∀ x ∈ s, ∃ i, toFun i =ᶠ[𝓝 x] 1\n\n"}
{"name":"SmoothBumpCovering.eventuallyEq_one'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : optParam (Set M) Set.univ\nself : SmoothBumpCovering ι I M s\nx : M\na✝ : Membership.mem s x\n⊢ Exists fun i => (nhds x).EventuallyEq (↑(self.toFun i)) 1","decl":"/-- We say that a collection of `SmoothBumpFunction`s is a `SmoothBumpCovering` of a set `s` if\n\n* `(f i).c ∈ s` for all `i`;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for each point `x ∈ s` there exists `i` such that `f i =ᶠ[𝓝 x] 1`;\n  in other words, `x` belongs to the interior of `{y | f i y = 1}`;\n\nIf `M` is a finite dimensional real manifold which is a `σ`-compact Hausdorff topological space,\nthen for every covering `U : M → Set M`, `∀ x, U x ∈ 𝓝 x`, there exists a `SmoothBumpCovering`\nsubordinate to `U`, see `SmoothBumpCovering.exists_isSubordinate`.\n\nThis covering can be used, e.g., to construct a partition of unity and to prove the weak\nWhitney embedding theorem. -/\nstructure SmoothBumpCovering [FiniteDimensional ℝ E] (s : Set M := univ) where\n  /-- The center point of each bump in the smooth covering. -/\n  c : ι → M\n  /-- A smooth bump function around `c i`. -/\n  toFun : ∀ i, SmoothBumpFunction I (c i)\n  /-- All the bump functions in the covering are centered at points in `s`. -/\n  c_mem' : ∀ i, c i ∈ s\n  /-- Around each point, there are only finitely many nonzero bump functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- Around each point in `s`, one of the bump functions is equal to `1`. -/\n  eventuallyEq_one' : ∀ x ∈ s, ∃ i, toFun i =ᶠ[𝓝 x] 1\n\n"}
{"name":"SmoothBumpCovering.c_mem'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : optParam (Set M) Set.univ\nself : SmoothBumpCovering ι I M s\ni : ι\n⊢ Membership.mem s (self.c i)","decl":"/-- We say that a collection of `SmoothBumpFunction`s is a `SmoothBumpCovering` of a set `s` if\n\n* `(f i).c ∈ s` for all `i`;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for each point `x ∈ s` there exists `i` such that `f i =ᶠ[𝓝 x] 1`;\n  in other words, `x` belongs to the interior of `{y | f i y = 1}`;\n\nIf `M` is a finite dimensional real manifold which is a `σ`-compact Hausdorff topological space,\nthen for every covering `U : M → Set M`, `∀ x, U x ∈ 𝓝 x`, there exists a `SmoothBumpCovering`\nsubordinate to `U`, see `SmoothBumpCovering.exists_isSubordinate`.\n\nThis covering can be used, e.g., to construct a partition of unity and to prove the weak\nWhitney embedding theorem. -/\nstructure SmoothBumpCovering [FiniteDimensional ℝ E] (s : Set M := univ) where\n  /-- The center point of each bump in the smooth covering. -/\n  c : ι → M\n  /-- A smooth bump function around `c i`. -/\n  toFun : ∀ i, SmoothBumpFunction I (c i)\n  /-- All the bump functions in the covering are centered at points in `s`. -/\n  c_mem' : ∀ i, c i ∈ s\n  /-- Around each point, there are only finitely many nonzero bump functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- Around each point in `s`, one of the bump functions is equal to `1`. -/\n  eventuallyEq_one' : ∀ x ∈ s, ∃ i, toFun i =ᶠ[𝓝 x] 1\n\n"}
{"name":"SmoothPartitionOfUnity.sum_le_one'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : optParam (Set M) Set.univ\nself : SmoothPartitionOfUnity ι I M s\nx : M\n⊢ LE.le (finsum fun i => (self.toFun i) x) 1","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.nonneg'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : optParam (Set M) Set.univ\nself : SmoothPartitionOfUnity ι I M s\ni : ι\nx : M\n⊢ LE.le 0 ((self.toFun i) x)","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.locallyFinite'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : optParam (Set M) Set.univ\nself : SmoothPartitionOfUnity ι I M s\n⊢ LocallyFinite fun i => Function.support ⇑(self.toFun i)","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.sum_eq_one'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : optParam (Set M) Set.univ\nself : SmoothPartitionOfUnity ι I M s\nx : M\na✝ : Membership.mem s x\n⊢ Eq (finsum fun i => (self.toFun i) x) 1","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.mk.inj","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\ntoFun✝ : ι → ContMDiffMap I (modelWithCornersSelf Real Real) M Real ↑Top.top\nlocallyFinite'✝ : LocallyFinite fun i => Function.support ⇑(toFun✝ i)\nnonneg'✝ : ∀ (i : ι) (x : M), LE.le 0 ((toFun✝ i) x)\nsum_eq_one'✝ : ∀ (x : M), Membership.mem s x → Eq (finsum fun i => (toFun✝ i) x) 1\nsum_le_one'✝ : ∀ (x : M), LE.le (finsum fun i => (toFun✝ i) x) 1\ntoFun : ι → ContMDiffMap I (modelWithCornersSelf Real Real) M Real ↑Top.top\nlocallyFinite' : LocallyFinite fun i => Function.support ⇑(toFun i)\nnonneg' : ∀ (i : ι) (x : M), LE.le 0 ((toFun i) x)\nsum_eq_one' : ∀ (x : M), Membership.mem s x → Eq (finsum fun i => (toFun i) x) 1\nsum_le_one' : ∀ (x : M), LE.le (finsum fun i => (toFun i) x) 1\nx✝ : Eq { toFun := toFun✝, locallyFinite' := locallyFinite'✝, nonneg' := nonneg'✝, sum_eq_one' := sum_eq_one'✝, sum_le_one' := sum_le_one'✝ } { toFun := toFun, locallyFinite' := locallyFinite', nonneg' := nonneg', sum_eq_one' := sum_eq_one', sum_le_one' := sum_le_one' }\n⊢ Eq toFun✝ toFun","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.mk.sizeOf_spec","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\nH : Type uH\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ns : optParam (Set M) Set.univ\ninst✝⁴ : SizeOf ι\ninst✝³ : SizeOf E\ninst✝² : SizeOf H\ninst✝¹ : SizeOf M\ninst✝ : (a : M) → SizeOf (s a)\ntoFun : ι → ContMDiffMap I (modelWithCornersSelf Real Real) M Real ↑Top.top\nlocallyFinite' : LocallyFinite fun i => Function.support ⇑(toFun i)\nnonneg' : ∀ (i : ι) (x : M), LE.le 0 ((toFun i) x)\nsum_eq_one' : ∀ (x : M), Membership.mem s x → Eq (finsum fun i => (toFun i) x) 1\nsum_le_one' : ∀ (x : M), LE.le (finsum fun i => (toFun i) x) 1\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, locallyFinite' := locallyFinite', nonneg' := nonneg', sum_eq_one' := sum_eq_one', sum_le_one' := sum_le_one' }) 1","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.mk.injEq","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\ntoFun✝ : ι → ContMDiffMap I (modelWithCornersSelf Real Real) M Real ↑Top.top\nlocallyFinite'✝ : LocallyFinite fun i => Function.support ⇑(toFun✝ i)\nnonneg'✝ : ∀ (i : ι) (x : M), LE.le 0 ((toFun✝ i) x)\nsum_eq_one'✝ : ∀ (x : M), Membership.mem s x → Eq (finsum fun i => (toFun✝ i) x) 1\nsum_le_one'✝ : ∀ (x : M), LE.le (finsum fun i => (toFun✝ i) x) 1\ntoFun : ι → ContMDiffMap I (modelWithCornersSelf Real Real) M Real ↑Top.top\nlocallyFinite' : LocallyFinite fun i => Function.support ⇑(toFun i)\nnonneg' : ∀ (i : ι) (x : M), LE.le 0 ((toFun i) x)\nsum_eq_one' : ∀ (x : M), Membership.mem s x → Eq (finsum fun i => (toFun i) x) 1\nsum_le_one' : ∀ (x : M), LE.le (finsum fun i => (toFun i) x) 1\n⊢ Eq (Eq { toFun := toFun✝, locallyFinite' := locallyFinite'✝, nonneg' := nonneg'✝, sum_eq_one' := sum_eq_one'✝, sum_le_one' := sum_le_one'✝ } { toFun := toFun, locallyFinite' := locallyFinite', nonneg' := nonneg', sum_eq_one' := sum_eq_one', sum_le_one' := sum_le_one' }) (Eq toFun✝ toFun)","decl":"/-- We say that a collection of functions form a smooth partition of unity on a set `s` if\n\n* all functions are infinitely smooth and nonnegative;\n* the family `fun i ↦ support (f i)` is locally finite;\n* for all `x ∈ s` the sum `∑ᶠ i, f i x` equals one;\n* for all `x`, the sum `∑ᶠ i, f i x` is less than or equal to one. -/\nstructure SmoothPartitionOfUnity (s : Set M := univ) where\n  /-- The family of functions forming the partition of unity. -/\n  toFun : ι → C^∞⟮I, M; 𝓘(ℝ), ℝ⟯\n  /-- Around each point, there are only finitely many nonzero functions in the family. -/\n  locallyFinite' : LocallyFinite fun i => support (toFun i)\n  /-- All the functions in the partition of unity are nonnegative. -/\n  nonneg' : ∀ i x, 0 ≤ toFun i x\n  /-- The functions in the partition of unity add up to `1` at any point of `s`. -/\n  sum_eq_one' : ∀ x ∈ s, ∑ᶠ i, toFun i x = 1\n  /-- The functions in the partition of unity add up to at most `1` everywhere. -/\n  sum_le_one' : ∀ x, ∑ᶠ i, toFun i x ≤ 1\n\n"}
{"name":"SmoothPartitionOfUnity.locallyFinite","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\n⊢ LocallyFinite fun i => Function.support ⇑(f i)","decl":"protected theorem locallyFinite : LocallyFinite fun i => support (f i) :=\n  f.locallyFinite'\n\n"}
{"name":"SmoothPartitionOfUnity.nonneg","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\ni : ι\nx : M\n⊢ LE.le 0 ((f i) x)","decl":"theorem nonneg (i : ι) (x : M) : 0 ≤ f i x :=\n  f.nonneg' i x\n\n"}
{"name":"SmoothPartitionOfUnity.sum_eq_one","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nx : M\nhx : Membership.mem s x\n⊢ Eq (finsum fun i => (f i) x) 1","decl":"theorem sum_eq_one {x} (hx : x ∈ s) : ∑ᶠ i, f i x = 1 :=\n  f.sum_eq_one' x hx\n\n"}
{"name":"SmoothPartitionOfUnity.exists_pos_of_mem","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nx : M\nhx : Membership.mem s x\n⊢ Exists fun i => LT.lt 0 ((f i) x)","decl":"theorem exists_pos_of_mem {x} (hx : x ∈ s) : ∃ i, 0 < f i x := by\n  by_contra! h\n  have H : ∀ i, f i x = 0 := fun i ↦ le_antisymm (h i) (f.nonneg i x)\n  have := f.sum_eq_one hx\n  simp_rw [H] at this\n  simpa\n\n"}
{"name":"SmoothPartitionOfUnity.sum_le_one","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nx : M\n⊢ LE.le (finsum fun i => (f i) x) 1","decl":"theorem sum_le_one (x : M) : ∑ᶠ i, f i x ≤ 1 :=\n  f.sum_le_one' x\n\n"}
{"name":"SmoothPartitionOfUnity.toPartitionOfUnity_toFun","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\ni : ι\n⊢ Eq (f.toPartitionOfUnity i) ↑(f i)","decl":"/-- Reinterpret a smooth partition of unity as a continuous partition of unity. -/\n@[simps]\ndef toPartitionOfUnity : PartitionOfUnity ι M s :=\n  { f with toFun := fun i => f i }\n\n"}
{"name":"SmoothPartitionOfUnity.contMDiff_sum","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\n⊢ ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top fun x => finsum fun i => (f i) x","decl":"theorem contMDiff_sum : ContMDiff I 𝓘(ℝ) ∞ fun x => ∑ᶠ i, f i x :=\n  contMDiff_finsum (fun i => (f i).contMDiff) f.locallyFinite\n\n"}
{"name":"SmoothPartitionOfUnity.smooth_sum","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\n⊢ ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top fun x => finsum fun i => (f i) x","decl":"@[deprecated (since := \"2024-11-21\")] alias smooth_sum := contMDiff_sum\n\n"}
{"name":"SmoothPartitionOfUnity.le_one","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\ni : ι\nx : M\n⊢ LE.le ((f i) x) 1","decl":"theorem le_one (i : ι) (x : M) : f i x ≤ 1 :=\n  f.toPartitionOfUnity.le_one i x\n\n"}
{"name":"SmoothPartitionOfUnity.sum_nonneg","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nx : M\n⊢ LE.le 0 (finsum fun i => (f i) x)","decl":"theorem sum_nonneg (x : M) : 0 ≤ ∑ᶠ i, f i x :=\n  f.toPartitionOfUnity.sum_nonneg x\n\n"}
{"name":"SmoothPartitionOfUnity.finsum_smul_mem_convex","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\ng : ι → M → F\nt : Set F\nx : M\nhx : Membership.mem s x\nhg : ∀ (i : ι), Ne ((f i) x) 0 → Membership.mem t (g i x)\nht : Convex Real t\n⊢ Membership.mem t (finsum fun i => HSMul.hSMul ((f i) x) (g i x))","decl":"theorem finsum_smul_mem_convex {g : ι → M → F} {t : Set F} {x : M} (hx : x ∈ s)\n    (hg : ∀ i, f i x ≠ 0 → g i x ∈ t) (ht : Convex ℝ t) : ∑ᶠ i, f i x • g i x ∈ t :=\n  ht.finsum_mem (fun _ => f.nonneg _ _) (f.sum_eq_one hx) hg\n\n"}
{"name":"SmoothPartitionOfUnity.contMDiff_smul","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\ng : M → F\ni : ι\nhg : ∀ (x : M), Membership.mem (tsupport ⇑(f i)) x → ContMDiffAt I (modelWithCornersSelf Real F) (↑n) g x\n⊢ ContMDiff I (modelWithCornersSelf Real F) ↑n fun x => HSMul.hSMul ((f i) x) (g x)","decl":"theorem contMDiff_smul {g : M → F} {i} (hg : ∀ x ∈ tsupport (f i), ContMDiffAt I 𝓘(ℝ, F) n g x) :\n    ContMDiff I 𝓘(ℝ, F) n fun x => f i x • g x :=\n  contMDiff_of_tsupport fun x hx =>\n    ((f i).contMDiff.contMDiffAt.of_le (mod_cast le_top)).smul <| hg x\n      <| tsupport_smul_subset_left _ _ hx\n\n"}
{"name":"SmoothPartitionOfUnity.smooth_smul","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\ng : M → F\ni : ι\nhg : ∀ (x : M), Membership.mem (tsupport ⇑(f i)) x → ContMDiffAt I (modelWithCornersSelf Real F) (↑n) g x\n⊢ ContMDiff I (modelWithCornersSelf Real F) ↑n fun x => HSMul.hSMul ((f i) x) (g x)","decl":"@[deprecated (since := \"2024-11-21\")] alias smooth_smul := contMDiff_smul\n\n"}
{"name":"SmoothPartitionOfUnity.contMDiff_finsum_smul","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\ng : ι → M → F\nhg : ∀ (i : ι) (x : M), Membership.mem (tsupport ⇑(f i)) x → ContMDiffAt I (modelWithCornersSelf Real F) (↑n) (g i) x\n⊢ ContMDiff I (modelWithCornersSelf Real F) ↑n fun x => finsum fun i => HSMul.hSMul ((f i) x) (g i x)","decl":"/-- If `f` is a smooth partition of unity on a set `s : Set M` and `g : ι → M → F` is a family of\nfunctions such that `g i` is $C^n$ smooth at every point of the topological support of `f i`, then\nthe sum `fun x ↦ ∑ᶠ i, f i x • g i x` is smooth on the whole manifold. -/\ntheorem contMDiff_finsum_smul {g : ι → M → F}\n    (hg : ∀ (i), ∀ x ∈ tsupport (f i), ContMDiffAt I 𝓘(ℝ, F) n (g i) x) :\n    ContMDiff I 𝓘(ℝ, F) n fun x => ∑ᶠ i, f i x • g i x :=\n  (contMDiff_finsum fun i => f.contMDiff_smul (hg i)) <|\n    f.locallyFinite.subset fun _ => support_smul_subset_left _ _\n\n"}
{"name":"SmoothPartitionOfUnity.smooth_finsum_smul","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\ng : ι → M → F\nhg : ∀ (i : ι) (x : M), Membership.mem (tsupport ⇑(f i)) x → ContMDiffAt I (modelWithCornersSelf Real F) (↑n) (g i) x\n⊢ ContMDiff I (modelWithCornersSelf Real F) ↑n fun x => finsum fun i => HSMul.hSMul ((f i) x) (g i x)","decl":"@[deprecated (since := \"2024-11-21\")] alias smooth_finsum_smul := contMDiff_finsum_smul\n\n"}
{"name":"SmoothPartitionOfUnity.contMDiffAt_finsum","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\nx₀ : M\ng : ι → M → F\nhφ : ∀ (i : ι), Membership.mem (tsupport ⇑(f i)) x₀ → ContMDiffAt I (modelWithCornersSelf Real F) (↑n) (g i) x₀\n⊢ ContMDiffAt I (modelWithCornersSelf Real F) (↑n) (fun x => finsum fun i => HSMul.hSMul ((f i) x) (g i x)) x₀","decl":"theorem contMDiffAt_finsum {x₀ : M} {g : ι → M → F}\n    (hφ : ∀ i, x₀ ∈ tsupport (f i) → ContMDiffAt I 𝓘(ℝ, F) n (g i) x₀) :\n    ContMDiffAt I 𝓘(ℝ, F) n (fun x ↦ ∑ᶠ i, f i x • g i x) x₀ := by\n  refine _root_.contMDiffAt_finsum (f.locallyFinite.smul_left _) fun i ↦ ?_\n  by_cases hx : x₀ ∈ tsupport (f i)\n  · exact ContMDiffAt.smul ((f i).contMDiff.of_le (mod_cast le_top)).contMDiffAt (hφ i hx)\n  · exact contMDiffAt_of_not_mem (compl_subset_compl.mpr\n      (tsupport_smul_subset_left (f i) (g i)) hx) n\n\n"}
{"name":"SmoothPartitionOfUnity.contDiffAt_finsum","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nn : ENat\ns : Set E\nf : SmoothPartitionOfUnity ι (modelWithCornersSelf Real E) E s\nx₀ : E\ng : ι → E → F\nhφ : ∀ (i : ι), Membership.mem (tsupport ⇑(f i)) x₀ → ContDiffAt Real (↑n) (g i) x₀\n⊢ ContDiffAt Real (↑n) (fun x => finsum fun i => HSMul.hSMul ((f i) x) (g i x)) x₀","decl":"theorem contDiffAt_finsum {s : Set E} (f : SmoothPartitionOfUnity ι 𝓘(ℝ, E) E s) {x₀ : E}\n    {g : ι → E → F} (hφ : ∀ i, x₀ ∈ tsupport (f i) → ContDiffAt ℝ n (g i) x₀) :\n    ContDiffAt ℝ n (fun x ↦ ∑ᶠ i, f i x • g i x) x₀ := by\n  simp only [← contMDiffAt_iff_contDiffAt] at *\n  exact f.contMDiffAt_finsum hφ\n\n"}
{"name":"SmoothPartitionOfUnity.mem_finsupport","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\ni : ι\n⊢ Iff (Membership.mem (ρ.finsupport x₀) i) (Membership.mem (Function.support fun i => (ρ i) x₀) i)","decl":"@[simp]\ntheorem mem_finsupport {i : ι} : i ∈ ρ.finsupport x₀ ↔ i ∈ support fun i ↦ ρ i x₀ :=\n  ρ.toPartitionOfUnity.mem_finsupport x₀\n\n"}
{"name":"SmoothPartitionOfUnity.coe_finsupport","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\n⊢ Eq (↑(ρ.finsupport x₀)) (Function.support fun i => (ρ i) x₀)","decl":"@[simp]\ntheorem coe_finsupport : (ρ.finsupport x₀ : Set ι) = support fun i ↦ ρ i x₀ :=\n  ρ.toPartitionOfUnity.coe_finsupport x₀\n\n"}
{"name":"SmoothPartitionOfUnity.sum_finsupport","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\nhx₀ : Membership.mem s x₀\n⊢ Eq ((ρ.finsupport x₀).sum fun i => (ρ i) x₀) 1","decl":"theorem sum_finsupport (hx₀ : x₀ ∈ s) : ∑ i ∈ ρ.finsupport x₀, ρ i x₀ = 1 :=\n  ρ.toPartitionOfUnity.sum_finsupport hx₀\n\n"}
{"name":"SmoothPartitionOfUnity.sum_finsupport'","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI✝ : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I✝ M s\nx₀ : M\nhx₀ : Membership.mem s x₀\nI : Finset ι\nhI : HasSubset.Subset (ρ.finsupport x₀) I\n⊢ Eq (I.sum fun i => (ρ i) x₀) 1","decl":"theorem sum_finsupport' (hx₀ : x₀ ∈ s) {I : Finset ι} (hI : ρ.finsupport x₀ ⊆ I) :\n    ∑ i ∈ I, ρ i x₀ = 1 :=\n  ρ.toPartitionOfUnity.sum_finsupport' hx₀ hI\n\n"}
{"name":"SmoothPartitionOfUnity.sum_finsupport_smul_eq_finsum","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nH : Type uH\ninst✝⁴ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\nA : Type u_1\ninst✝¹ : AddCommGroup A\ninst✝ : Module Real A\nφ : ι → M → A\n⊢ Eq ((ρ.finsupport x₀).sum fun i => HSMul.hSMul ((ρ i) x₀) (φ i x₀)) (finsum fun i => HSMul.hSMul ((ρ i) x₀) (φ i x₀))","decl":"theorem sum_finsupport_smul_eq_finsum {A : Type*} [AddCommGroup A] [Module ℝ A] (φ : ι → M → A) :\n    ∑ i ∈ ρ.finsupport x₀, ρ i x₀ • φ i x₀ = ∑ᶠ i, ρ i x₀ • φ i x₀ :=\n  ρ.toPartitionOfUnity.sum_finsupport_smul_eq_finsum φ\n\n"}
{"name":"SmoothPartitionOfUnity.finite_tsupport","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\n⊢ (setOf fun i => Membership.mem (tsupport ⇑(ρ i)) x₀).Finite","decl":"/-- The `tsupport`s of a smooth partition of unity are locally finite. -/\ntheorem finite_tsupport : {i | x₀ ∈ tsupport (ρ i)}.Finite :=\n  ρ.toPartitionOfUnity.finite_tsupport _\n\n"}
{"name":"SmoothPartitionOfUnity.mem_fintsupport_iff","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\ni : ι\n⊢ Iff (Membership.mem (ρ.fintsupport x₀) i) (Membership.mem (tsupport ⇑(ρ i)) x₀)","decl":"theorem mem_fintsupport_iff (i : ι) : i ∈ ρ.fintsupport x₀ ↔ x₀ ∈ tsupport (ρ i) :=\n  Finite.mem_toFinset _\n\n"}
{"name":"SmoothPartitionOfUnity.eventually_fintsupport_subset","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\n⊢ Filter.Eventually (fun y => HasSubset.Subset (ρ.fintsupport y) (ρ.fintsupport x₀)) (nhds x₀)","decl":"theorem eventually_fintsupport_subset : ∀ᶠ y in 𝓝 x₀, ρ.fintsupport y ⊆ ρ.fintsupport x₀ :=\n  ρ.toPartitionOfUnity.eventually_fintsupport_subset _\n\n"}
{"name":"SmoothPartitionOfUnity.finsupport_subset_fintsupport","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\n⊢ HasSubset.Subset (ρ.finsupport x₀) (ρ.fintsupport x₀)","decl":"theorem finsupport_subset_fintsupport : ρ.finsupport x₀ ⊆ ρ.fintsupport x₀ :=\n  ρ.toPartitionOfUnity.finsupport_subset_fintsupport x₀\n\n"}
{"name":"SmoothPartitionOfUnity.eventually_finsupport_subset","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nρ : SmoothPartitionOfUnity ι I M s\nx₀ : M\n⊢ Filter.Eventually (fun y => HasSubset.Subset (ρ.finsupport y) (ρ.fintsupport x₀)) (nhds x₀)","decl":"theorem eventually_finsupport_subset : ∀ᶠ y in 𝓝 x₀, ρ.finsupport y ⊆ ρ.fintsupport x₀ :=\n  ρ.toPartitionOfUnity.eventually_finsupport_subset x₀\n\n"}
{"name":"SmoothPartitionOfUnity.isSubordinate_toPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nU : ι → Set M\n⊢ Iff (f.toPartitionOfUnity.IsSubordinate U) (f.IsSubordinate U)","decl":"@[simp]\ntheorem isSubordinate_toPartitionOfUnity :\n    f.toPartitionOfUnity.IsSubordinate U ↔ f.IsSubordinate U :=\n  Iff.rfl\n\n"}
{"name":"SmoothPartitionOfUnity.IsSubordinate.toPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nU : ι → Set M\na✝ : f.IsSubordinate U\n⊢ f.toPartitionOfUnity.IsSubordinate U","decl":"alias ⟨_, IsSubordinate.toPartitionOfUnity⟩ := isSubordinate_toPartitionOfUnity\n\n"}
{"name":"SmoothPartitionOfUnity.IsSubordinate.contMDiff_finsum_smul","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\nU : ι → Set M\ng : ι → M → F\nhf : f.IsSubordinate U\nho : ∀ (i : ι), IsOpen (U i)\nhg : ∀ (i : ι), ContMDiffOn I (modelWithCornersSelf Real F) (↑n) (g i) (U i)\n⊢ ContMDiff I (modelWithCornersSelf Real F) ↑n fun x => finsum fun i => HSMul.hSMul ((f i) x) (g i x)","decl":"/-- If `f` is a smooth partition of unity on a set `s : Set M` subordinate to a family of open sets\n`U : ι → Set M` and `g : ι → M → F` is a family of functions such that `g i` is $C^n$ smooth on\n`U i`, then the sum `fun x ↦ ∑ᶠ i, f i x • g i x` is $C^n$ smooth on the whole manifold. -/\ntheorem IsSubordinate.contMDiff_finsum_smul {g : ι → M → F} (hf : f.IsSubordinate U)\n    (ho : ∀ i, IsOpen (U i)) (hg : ∀ i, ContMDiffOn I 𝓘(ℝ, F) n (g i) (U i)) :\n    ContMDiff I 𝓘(ℝ, F) n fun x => ∑ᶠ i, f i x • g i x :=\n  f.contMDiff_finsum_smul fun i _ hx => (hg i).contMDiffAt <| (ho i).mem_nhds (hf i hx)\n\n"}
{"name":"SmoothPartitionOfUnity.IsSubordinate.smooth_finsum_smul","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\nF : Type uF\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : SmoothPartitionOfUnity ι I M s\nn : ENat\nU : ι → Set M\ng : ι → M → F\nhf : f.IsSubordinate U\nho : ∀ (i : ι), IsOpen (U i)\nhg : ∀ (i : ι), ContMDiffOn I (modelWithCornersSelf Real F) (↑n) (g i) (U i)\n⊢ ContMDiff I (modelWithCornersSelf Real F) ↑n fun x => finsum fun i => HSMul.hSMul ((f i) x) (g i x)","decl":"@[deprecated (since := \"2024-11-21\")]\nalias IsSubordinate.smooth_finsum_smul := IsSubordinate.contMDiff_finsum_smul\n\n"}
{"name":"BumpCovering.contMDiff_toPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : BumpCovering ι M s\nhf : ∀ (i : ι), ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f i)\ni : ι\n⊢ ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f.toPartitionOfUnity i)","decl":"theorem contMDiff_toPartitionOfUnity {E : Type uE} [NormedAddCommGroup E] [NormedSpace ℝ E]\n    {H : Type uH} [TopologicalSpace H] {I : ModelWithCorners ℝ E H} {M : Type uM}\n    [TopologicalSpace M] [ChartedSpace H M] {s : Set M} (f : BumpCovering ι M s)\n    (hf : ∀ i, ContMDiff I 𝓘(ℝ) ∞ (f i)) (i : ι) : ContMDiff I 𝓘(ℝ) ∞ (f.toPartitionOfUnity i) :=\n  (hf i).mul <| (contMDiff_finprod_cond fun j _ => contMDiff_const.sub (hf j)) <| by\n    simp only [Pi.sub_def, mulSupport_one_sub]\n    exact f.locallyFinite\n\n"}
{"name":"BumpCovering.smooth_toPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : BumpCovering ι M s\nhf : ∀ (i : ι), ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f i)\ni : ι\n⊢ ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f.toPartitionOfUnity i)","decl":"@[deprecated (since := \"2024-11-21\")]\nalias smooth_toPartitionOfUnity := contMDiff_toPartitionOfUnity\n\n"}
{"name":"BumpCovering.toSmoothPartitionOfUnity_toPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : BumpCovering ι M s\nhf : ∀ (i : ι), ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f i)\n⊢ Eq (f.toSmoothPartitionOfUnity hf).toPartitionOfUnity f.toPartitionOfUnity","decl":"@[simp]\ntheorem toSmoothPartitionOfUnity_toPartitionOfUnity (f : BumpCovering ι M s)\n    (hf : ∀ i, ContMDiff I 𝓘(ℝ) ∞ (f i)) :\n    (f.toSmoothPartitionOfUnity hf).toPartitionOfUnity = f.toPartitionOfUnity :=\n  rfl\n\n"}
{"name":"BumpCovering.coe_toSmoothPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : BumpCovering ι M s\nhf : ∀ (i : ι), ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f i)\ni : ι\n⊢ Eq ⇑((f.toSmoothPartitionOfUnity hf) i) ⇑(f.toPartitionOfUnity i)","decl":"@[simp]\ntheorem coe_toSmoothPartitionOfUnity (f : BumpCovering ι M s) (hf : ∀ i, ContMDiff I 𝓘(ℝ) ∞ (f i))\n    (i : ι) : ⇑(f.toSmoothPartitionOfUnity hf i) = f.toPartitionOfUnity i :=\n  rfl\n\n"}
{"name":"BumpCovering.IsSubordinate.toSmoothPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nH : Type uH\ninst✝² : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ns : Set M\nf : BumpCovering ι M s\nU : ι → Set M\nh : f.IsSubordinate U\nhf : ∀ (i : ι), ContMDiff I (modelWithCornersSelf Real Real) ↑Top.top ⇑(f i)\n⊢ (f.toSmoothPartitionOfUnity hf).IsSubordinate U","decl":"theorem IsSubordinate.toSmoothPartitionOfUnity {f : BumpCovering ι M s} {U : ι → Set M}\n    (h : f.IsSubordinate U) (hf : ∀ i, ContMDiff I 𝓘(ℝ) ∞ (f i)) :\n    (f.toSmoothPartitionOfUnity hf).IsSubordinate U :=\n  h.toPartitionOfUnity\n\n"}
{"name":"SmoothBumpCovering.IsSubordinate.support_subset","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nU : M → Set M\nh : fs.IsSubordinate U\ni : ι\n⊢ HasSubset.Subset (Function.support ↑(fs.toFun i)) (U (fs.c i))","decl":"theorem IsSubordinate.support_subset {fs : SmoothBumpCovering ι I M s} {U : M → Set M}\n    (h : fs.IsSubordinate U) (i : ι) : support (fs i) ⊆ U (fs.c i) :=\n  Subset.trans subset_closure (h i)\n\n"}
{"name":"SmoothBumpCovering.exists_isSubordinate","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nU : M → Set M\ninst✝¹ : T2Space M\ninst✝ : SigmaCompactSpace M\nhs : IsClosed s\nhU : ∀ (x : M), Membership.mem s x → Membership.mem (nhds x) (U x)\n⊢ Exists fun ι => Exists fun f => f.IsSubordinate U","decl":"variable (I) in\n/-- Let `M` be a smooth manifold modelled on a finite dimensional real vector space.\nSuppose also that `M` is a Hausdorff `σ`-compact topological space. Let `s` be a closed set\nin `M` and `U : M → Set M` be a collection of sets such that `U x ∈ 𝓝 x` for every `x ∈ s`.\nThen there exists a smooth bump covering of `s` that is subordinate to `U`. -/\ntheorem exists_isSubordinate [T2Space M] [SigmaCompactSpace M] (hs : IsClosed s)\n    (hU : ∀ x ∈ s, U x ∈ 𝓝 x) :\n    ∃ (ι : Type uM) (f : SmoothBumpCovering ι I M s), f.IsSubordinate U := by\n  -- First we deduce some missing instances\n  haveI : LocallyCompactSpace H := I.locallyCompactSpace\n  haveI : LocallyCompactSpace M := ChartedSpace.locallyCompactSpace H M\n  -- Next we choose a covering by supports of smooth bump functions\n  have hB := fun x hx => SmoothBumpFunction.nhds_basis_support (I := I) (hU x hx)\n  rcases refinement_of_locallyCompact_sigmaCompact_of_nhds_basis_set hs hB with\n    ⟨ι, c, f, hf, hsub', hfin⟩\n  choose hcs hfU using hf\n  -- Then we use the shrinking lemma to get a covering by smaller open\n  rcases exists_subset_iUnion_closed_subset hs (fun i => (f i).isOpen_support)\n    (fun x _ => hfin.point_finite x) hsub' with ⟨V, hsV, hVc, hVf⟩\n  choose r hrR hr using fun i => (f i).exists_r_pos_lt_subset_ball (hVc i) (hVf i)\n  refine ⟨ι, ⟨c, fun i => (f i).updateRIn (r i) (hrR i), hcs, ?_, fun x hx => ?_⟩, fun i => ?_⟩\n  · simpa only [SmoothBumpFunction.support_updateRIn]\n  · refine (mem_iUnion.1 <| hsV hx).imp fun i hi => ?_\n    exact ((f i).updateRIn _ _).eventuallyEq_one_of_dist_lt\n      ((f i).support_subset_source <| hVf _ hi) (hr i hi).2\n  · simpa only [SmoothBumpFunction.support_updateRIn, tsupport] using hfU i\n\n"}
{"name":"SmoothBumpCovering.locallyFinite","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\n⊢ LocallyFinite fun i => Function.support ↑(fs.toFun i)","decl":"protected theorem locallyFinite : LocallyFinite fun i => support (fs i) :=\n  fs.locallyFinite'\n\n"}
{"name":"SmoothBumpCovering.point_finite","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nx : M\n⊢ (setOf fun i => Ne (↑(fs.toFun i) x) 0).Finite","decl":"protected theorem point_finite (x : M) : {i | fs i x ≠ 0}.Finite :=\n  fs.locallyFinite.point_finite x\n\n"}
{"name":"SmoothBumpCovering.eventuallyEq_one","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nx : M\nhx : Membership.mem s x\n⊢ (nhds x).EventuallyEq (↑(fs.toFun (fs.ind x hx))) 1","decl":"theorem eventuallyEq_one (x : M) (hx : x ∈ s) : fs (fs.ind x hx) =ᶠ[𝓝 x] 1 :=\n  (fs.eventuallyEq_one' x hx).choose_spec\n\n"}
{"name":"SmoothBumpCovering.apply_ind","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nx : M\nhx : Membership.mem s x\n⊢ Eq (↑(fs.toFun (fs.ind x hx)) x) 1","decl":"theorem apply_ind (x : M) (hx : x ∈ s) : fs (fs.ind x hx) x = 1 :=\n  (fs.eventuallyEq_one x hx).eq_of_nhds\n\n"}
{"name":"SmoothBumpCovering.mem_support_ind","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nx : M\nhx : Membership.mem s x\n⊢ Membership.mem (Function.support ↑(fs.toFun (fs.ind x hx))) x","decl":"theorem mem_support_ind (x : M) (hx : x ∈ s) : x ∈ support (fs <| fs.ind x hx) := by\n  simp [fs.apply_ind x hx]\n\n"}
{"name":"SmoothBumpCovering.mem_chartAt_source_of_eq_one","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ni : ι\nx : M\nh : Eq (↑(fs.toFun i) x) 1\n⊢ Membership.mem (chartAt H (fs.c i)).source x","decl":"theorem mem_chartAt_source_of_eq_one {i : ι} {x : M} (h : fs i x = 1) :\n    x ∈ (chartAt H (fs.c i)).source :=\n  (fs i).support_subset_source <| by simp [h]\n\n"}
{"name":"SmoothBumpCovering.mem_extChartAt_source_of_eq_one","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ni : ι\nx : M\nh : Eq (↑(fs.toFun i) x) 1\n⊢ Membership.mem (extChartAt I (fs.c i)).source x","decl":"theorem mem_extChartAt_source_of_eq_one {i : ι} {x : M} (h : fs i x = 1) :\n    x ∈ (extChartAt I (fs.c i)).source := by\n  rw [extChartAt_source]; exact fs.mem_chartAt_source_of_eq_one h\n\n"}
{"name":"SmoothBumpCovering.mem_chartAt_ind_source","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nx : M\nhx : Membership.mem s x\n⊢ Membership.mem (chartAt H (fs.c (fs.ind x hx))).source x","decl":"theorem mem_chartAt_ind_source (x : M) (hx : x ∈ s) : x ∈ (chartAt H (fs.c (fs.ind x hx))).source :=\n  fs.mem_chartAt_source_of_eq_one (fs.apply_ind x hx)\n\n"}
{"name":"SmoothBumpCovering.mem_extChartAt_ind_source","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\nH : Type uH\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\nx : M\nhx : Membership.mem s x\n⊢ Membership.mem (extChartAt I (fs.c (fs.ind x hx))).source x","decl":"theorem mem_extChartAt_ind_source (x : M) (hx : x ∈ s) :\n    x ∈ (extChartAt I (fs.c (fs.ind x hx))).source :=\n  fs.mem_extChartAt_source_of_eq_one (fs.apply_ind x hx)\n\n"}
{"name":"SmoothBumpCovering.isSubordinate_toBumpCovering","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\nf : SmoothBumpCovering ι I M s\nU : M → Set M\n⊢ Iff (f.toBumpCovering.IsSubordinate fun i => U (f.c i)) (f.IsSubordinate U)","decl":"@[simp, nolint simpNF]\ntheorem isSubordinate_toBumpCovering {f : SmoothBumpCovering ι I M s} {U : M → Set M} :\n    (f.toBumpCovering.IsSubordinate fun i => U (f.c i)) ↔ f.IsSubordinate U :=\n  Iff.rfl\n\n"}
{"name":"SmoothBumpCovering.IsSubordinate.toBumpCovering","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\nf : SmoothBumpCovering ι I M s\nU : M → Set M\na✝ : f.IsSubordinate U\n⊢ f.toBumpCovering.IsSubordinate fun i => U (f.c i)","decl":"alias ⟨_, IsSubordinate.toBumpCovering⟩ := isSubordinate_toBumpCovering\n\n"}
{"name":"SmoothBumpCovering.toSmoothPartitionOfUnity_apply","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\ni : ι\nx : M\n⊢ Eq ((fs.toSmoothPartitionOfUnity i) x) (HMul.hMul (↑(fs.toFun i) x) (finprod fun j => finprod fun x_1 => HSub.hSub 1 (↑(fs.toFun j) x)))","decl":"theorem toSmoothPartitionOfUnity_apply (i : ι) (x : M) :\n    fs.toSmoothPartitionOfUnity i x = fs i x * ∏ᶠ (j) (_ : WellOrderingRel j i), (1 - fs j x) :=\n  rfl\n\n"}
{"name":"SmoothBumpCovering.toSmoothPartitionOfUnity_eq_mul_prod","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\ni : ι\nx : M\nt : Finset ι\nht : ∀ (j : ι), WellOrderingRel j i → Ne (↑(fs.toFun j) x) 0 → Membership.mem t j\n⊢ Eq ((fs.toSmoothPartitionOfUnity i) x) (HMul.hMul (↑(fs.toFun i) x) ((Finset.filter (fun j => WellOrderingRel j i) t).prod fun j => HSub.hSub 1 (↑(fs.toFun j) x)))","decl":"open Classical in\ntheorem toSmoothPartitionOfUnity_eq_mul_prod (i : ι) (x : M) (t : Finset ι)\n    (ht : ∀ j, WellOrderingRel j i → fs j x ≠ 0 → j ∈ t) :\n    fs.toSmoothPartitionOfUnity i x =\n      fs i x * ∏ j ∈ t.filter fun j => WellOrderingRel j i, (1 - fs j x) :=\n  fs.toBumpCovering.toPartitionOfUnity_eq_mul_prod i x t ht\n\n"}
{"name":"SmoothBumpCovering.exists_finset_toSmoothPartitionOfUnity_eventuallyEq","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\ni : ι\nx : M\n⊢ Exists fun t => (nhds x).EventuallyEq (⇑(fs.toSmoothPartitionOfUnity i)) (HMul.hMul (↑(fs.toFun i)) ((Finset.filter (fun j => WellOrderingRel j i) t).prod fun j => HSub.hSub 1 ↑(fs.toFun j)))","decl":"open Classical in\ntheorem exists_finset_toSmoothPartitionOfUnity_eventuallyEq (i : ι) (x : M) :\n    ∃ t : Finset ι,\n      fs.toSmoothPartitionOfUnity i =ᶠ[𝓝 x]\n        fs i * ∏ j ∈ t.filter fun j => WellOrderingRel j i, ((1 : M → ℝ) - fs j) := by\n  -- Porting note: was defeq, now the continuous lemma uses bundled homs\n  simpa using fs.toBumpCovering.exists_finset_toPartitionOfUnity_eventuallyEq i x\n\n"}
{"name":"SmoothBumpCovering.toSmoothPartitionOfUnity_zero_of_zero","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\ni : ι\nx : M\nh : Eq (↑(fs.toFun i) x) 0\n⊢ Eq ((fs.toSmoothPartitionOfUnity i) x) 0","decl":"theorem toSmoothPartitionOfUnity_zero_of_zero {i : ι} {x : M} (h : fs i x = 0) :\n    fs.toSmoothPartitionOfUnity i x = 0 :=\n  fs.toBumpCovering.toPartitionOfUnity_zero_of_zero h\n\n"}
{"name":"SmoothBumpCovering.support_toSmoothPartitionOfUnity_subset","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\ni : ι\n⊢ HasSubset.Subset (Function.support ⇑(fs.toSmoothPartitionOfUnity i)) (Function.support ↑(fs.toFun i))","decl":"theorem support_toSmoothPartitionOfUnity_subset (i : ι) :\n    support (fs.toSmoothPartitionOfUnity i) ⊆ support (fs i) :=\n  fs.toBumpCovering.support_toPartitionOfUnity_subset i\n\n"}
{"name":"SmoothBumpCovering.IsSubordinate.toSmoothPartitionOfUnity","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\nf : SmoothBumpCovering ι I M s\nU : M → Set M\nh : f.IsSubordinate U\n⊢ f.toSmoothPartitionOfUnity.IsSubordinate fun i => U (f.c i)","decl":"theorem IsSubordinate.toSmoothPartitionOfUnity {f : SmoothBumpCovering ι I M s} {U : M → Set M}\n    (h : f.IsSubordinate U) : f.toSmoothPartitionOfUnity.IsSubordinate fun i => U (f.c i) :=\n  h.toBumpCovering.toPartitionOfUnity\n\n"}
{"name":"SmoothBumpCovering.sum_toSmoothPartitionOfUnity_eq","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\ninst✝² : FiniteDimensional Real E\ns : Set M\nfs : SmoothBumpCovering ι I M s\ninst✝¹ : T2Space M\ninst✝ : IsManifold I (↑Top.top) M\nx : M\n⊢ Eq (finsum fun i => (fs.toSmoothPartitionOfUnity i) x) (HSub.hSub 1 (finprod fun i => HSub.hSub 1 (↑(fs.toFun i) x)))","decl":"theorem sum_toSmoothPartitionOfUnity_eq (x : M) :\n    ∑ᶠ i, fs.toSmoothPartitionOfUnity i x = 1 - ∏ᶠ i, (1 - fs i x) :=\n  fs.toBumpCovering.sum_toPartitionOfUnity_eq x\n\n"}
{"name":"exists_smooth_zero_one_of_isClosed","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : T2Space M\ninst✝ : SigmaCompactSpace M\ns t : Set M\nhs : IsClosed s\nht : IsClosed t\nhd : Disjoint s t\n⊢ Exists fun f => And (Set.EqOn (⇑f) 0 s) (And (Set.EqOn (⇑f) 1 t) (∀ (x : M), Membership.mem (Set.Icc 0 1) (f x)))","decl":"/-- Given two disjoint closed sets `s, t` in a Hausdorff σ-compact finite dimensional manifold,\nthere exists an infinitely smooth function that is equal to `0` on `s` and to `1` on `t`.\nSee also `exists_msmooth_zero_iff_one_iff_of_isClosed`, which ensures additionally that\n`f` is equal to `0` exactly on `s` and to `1` exactly on `t`. -/\ntheorem exists_smooth_zero_one_of_isClosed [T2Space M] [SigmaCompactSpace M] {s t : Set M}\n    (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t) :\n    ∃ f : C^∞⟮I, M; 𝓘(ℝ), ℝ⟯, EqOn f 0 s ∧ EqOn f 1 t ∧ ∀ x, f x ∈ Icc 0 1 := by\n  have : ∀ x ∈ t, sᶜ ∈ 𝓝 x := fun x hx => hs.isOpen_compl.mem_nhds (disjoint_right.1 hd hx)\n  rcases SmoothBumpCovering.exists_isSubordinate I ht this with ⟨ι, f, hf⟩\n  set g := f.toSmoothPartitionOfUnity\n  refine\n    ⟨⟨_, g.contMDiff_sum⟩, fun x hx => ?_, fun x => g.sum_eq_one, fun x =>\n      ⟨g.sum_nonneg x, g.sum_le_one x⟩⟩\n  suffices ∀ i, g i x = 0 by simp only [this, ContMDiffMap.coeFn_mk, finsum_zero, Pi.zero_apply]\n  refine fun i => f.toSmoothPartitionOfUnity_zero_of_zero ?_\n  exact nmem_support.1 (subset_compl_comm.1 (hf.support_subset i) hx)\n\n"}
{"name":"exists_smooth_zero_one_nhds_of_isClosed","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\nH : Type uH\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ninst✝⁴ : FiniteDimensional Real E\ninst✝³ : IsManifold I (↑Top.top) M\ninst✝² : T2Space M\ninst✝¹ : NormalSpace M\ninst✝ : SigmaCompactSpace M\ns t : Set M\nhs : IsClosed s\nht : IsClosed t\nhd : Disjoint s t\n⊢ Exists fun f => And (Filter.Eventually (fun x => Eq (f x) 0) (nhdsSet s)) (And (Filter.Eventually (fun x => Eq (f x) 1) (nhdsSet t)) (∀ (x : M), Membership.mem (Set.Icc 0 1) (f x)))","decl":"/-- Given two disjoint closed sets `s, t` in a Hausdorff normal σ-compact finite dimensional\nmanifold `M`, there exists a smooth function `f : M → [0,1]` that vanishes in a neighbourhood of `s`\nand is equal to `1` in a neighbourhood of `t`. -/\ntheorem exists_smooth_zero_one_nhds_of_isClosed [T2Space M] [NormalSpace M] [SigmaCompactSpace M]\n    {s t : Set M} (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t) :\n    ∃ f : C^∞⟮I, M; 𝓘(ℝ), ℝ⟯, (∀ᶠ x in 𝓝ˢ s, f x = 0) ∧ (∀ᶠ x in 𝓝ˢ t, f x = 1) ∧\n      ∀ x, f x ∈ Icc 0 1 := by\n  obtain ⟨u, u_op, hsu, hut⟩ := normal_exists_closure_subset hs ht.isOpen_compl\n    (subset_compl_iff_disjoint_left.mpr hd.symm)\n  obtain ⟨v, v_op, htv, hvu⟩ := normal_exists_closure_subset ht isClosed_closure.isOpen_compl\n    (subset_compl_comm.mp hut)\n  obtain ⟨f, hfu, hfv, hf⟩ := exists_smooth_zero_one_of_isClosed I isClosed_closure isClosed_closure\n    (subset_compl_iff_disjoint_left.mp hvu)\n  refine ⟨f, ?_, ?_, hf⟩\n  · exact eventually_of_mem (mem_of_superset (u_op.mem_nhdsSet.mpr hsu) subset_closure) hfu\n  · exact eventually_of_mem (mem_of_superset (v_op.mem_nhdsSet.mpr htv) subset_closure) hfv\n\n"}
{"name":"exists_smooth_one_nhds_of_subset_interior","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Real E\nH : Type uH\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ninst✝⁴ : FiniteDimensional Real E\ninst✝³ : IsManifold I (↑Top.top) M\ninst✝² : T2Space M\ninst✝¹ : NormalSpace M\ninst✝ : SigmaCompactSpace M\ns t : Set M\nhs : IsClosed s\nhd : HasSubset.Subset s (interior t)\n⊢ Exists fun f => And (Filter.Eventually (fun x => Eq (f x) 1) (nhdsSet s)) (And (∀ (x : M), Not (Membership.mem t x) → Eq (f x) 0) (∀ (x : M), Membership.mem (Set.Icc 0 1) (f x)))","decl":"/-- Given two sets `s, t` in a Hausdorff normal σ-compact finite-dimensional manifold `M`\nwith `s` open and `s ⊆ interior t`, there is a smooth function `f : M → [0,1]` which is equal to `s`\nin a neighbourhood of `s` and has support contained in `t`. -/\ntheorem exists_smooth_one_nhds_of_subset_interior [T2Space M] [NormalSpace M] [SigmaCompactSpace M]\n    {s t : Set M} (hs : IsClosed s) (hd : s ⊆ interior t) :\n    ∃ f : C^∞⟮I, M; 𝓘(ℝ), ℝ⟯, (∀ᶠ x in 𝓝ˢ s, f x = 1) ∧ (∀ x ∉ t, f x = 0) ∧\n      ∀ x, f x ∈ Icc 0 1 := by\n  rcases exists_smooth_zero_one_nhds_of_isClosed I isOpen_interior.isClosed_compl hs\n    (by rwa [← subset_compl_iff_disjoint_left, compl_compl]) with ⟨f, h0, h1, hf⟩\n  refine ⟨f, h1, fun x hx ↦ ?_, hf⟩\n  exact h0.self_of_nhdsSet _ fun hx' ↦ hx <| interior_subset hx'\n\n"}
{"name":"SmoothPartitionOfUnity.exists_isSubordinate","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : T2Space M\ninst✝ : SigmaCompactSpace M\ns : Set M\nhs : IsClosed s\nU : ι → Set M\nho : ∀ (i : ι), IsOpen (U i)\nhU : HasSubset.Subset s (Set.iUnion fun i => U i)\n⊢ Exists fun f => f.IsSubordinate U","decl":"/-- If `X` is a paracompact normal topological space and `U` is an open covering of a closed set\n`s`, then there exists a `SmoothPartitionOfUnity ι M s` that is subordinate to `U`. -/\ntheorem exists_isSubordinate {s : Set M} (hs : IsClosed s) (U : ι → Set M) (ho : ∀ i, IsOpen (U i))\n    (hU : s ⊆ ⋃ i, U i) : ∃ f : SmoothPartitionOfUnity ι I M s, f.IsSubordinate U := by\n  haveI : LocallyCompactSpace H := I.locallyCompactSpace\n  haveI : LocallyCompactSpace M := ChartedSpace.locallyCompactSpace H M\n  -- porting note(https://github.com/leanprover/std4/issues/116):\n  -- split `rcases` into `have` + `rcases`\n  have := BumpCovering.exists_isSubordinate_of_prop (ContMDiff I 𝓘(ℝ) ∞) ?_ hs U ho hU\n  · rcases this with ⟨f, hf, hfU⟩\n    exact ⟨f.toSmoothPartitionOfUnity hf, hfU.toSmoothPartitionOfUnity hf⟩\n  · intro s t hs ht hd\n    rcases exists_smooth_zero_one_of_isClosed I hs ht hd with ⟨f, hf⟩\n    exact ⟨f, f.contMDiff, hf⟩\n\n"}
{"name":"SmoothPartitionOfUnity.exists_isSubordinate_chartAt_source_of_isClosed","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : T2Space M\ninst✝ : SigmaCompactSpace M\ns : Set M\nhs : IsClosed s\n⊢ Exists fun f => f.IsSubordinate fun x => (chartAt H ↑x).source","decl":"theorem exists_isSubordinate_chartAt_source_of_isClosed {s : Set M} (hs : IsClosed s) :\n    ∃ f : SmoothPartitionOfUnity s I M s,\n      f.IsSubordinate (fun x ↦ (chartAt H (x : M)).source) := by\n  apply exists_isSubordinate _ hs _ (fun i ↦ (chartAt H _).open_source) (fun x hx ↦ ?_)\n  exact mem_iUnion_of_mem ⟨x, hx⟩ (mem_chart_source H x)\n\n"}
{"name":"SmoothPartitionOfUnity.exists_isSubordinate_chartAt_source","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : T2Space M\ninst✝ : SigmaCompactSpace M\n⊢ Exists fun f => f.IsSubordinate fun x => (chartAt H x).source","decl":"theorem exists_isSubordinate_chartAt_source :\n    ∃ f : SmoothPartitionOfUnity M I M univ, f.IsSubordinate (fun x ↦ (chartAt H x).source) := by\n  apply exists_isSubordinate _ isClosed_univ _ (fun i ↦ (chartAt H _).open_source) (fun x _ ↦ ?_)\n  exact mem_iUnion_of_mem x (mem_chart_source H x)\n\n"}
{"name":"exists_contMDiffOn_forall_mem_convex_of_local","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝¹⁰ : NormedAddCommGroup E\ninst✝⁹ : NormedSpace Real E\nF : Type uF\ninst✝⁸ : NormedAddCommGroup F\ninst✝⁷ : NormedSpace Real F\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : SigmaCompactSpace M\ninst✝ : T2Space M\nt : M → Set F\nn : ENat\nht : ∀ (x : M), Convex Real (t x)\nHloc : ∀ (x : M), Exists fun U => And (Membership.mem (nhds x) U) (Exists fun g => And (ContMDiffOn I (modelWithCornersSelf Real F) (↑n) g U) (∀ (y : M), Membership.mem U y → Membership.mem (t y) (g y)))\n⊢ Exists fun g => ∀ (x : M), Membership.mem (t x) (g x)","decl":"/-- Let `M` be a σ-compact Hausdorff finite dimensional topological manifold. Let `t : M → Set F`\nbe a family of convex sets. Suppose that for each point `x : M` there exists a neighborhood\n`U ∈ 𝓝 x` and a function `g : M → F` such that `g` is $C^n$ smooth on `U` and `g y ∈ t y` for all\n`y ∈ U`. Then there exists a $C^n$ smooth function `g : C^∞⟮I, M; 𝓘(ℝ, F), F⟯` such that `g x ∈ t x`\nfor all `x`. See also `exists_smooth_forall_mem_convex_of_local` and\n`exists_smooth_forall_mem_convex_of_local_const`. -/\ntheorem exists_contMDiffOn_forall_mem_convex_of_local (ht : ∀ x, Convex ℝ (t x))\n    (Hloc : ∀ x : M, ∃ U ∈ 𝓝 x, ∃ g : M → F, ContMDiffOn I 𝓘(ℝ, F) n g U ∧ ∀ y ∈ U, g y ∈ t y) :\n    ∃ g : C^n⟮I, M; 𝓘(ℝ, F), F⟯, ∀ x, g x ∈ t x := by\n  choose U hU g hgs hgt using Hloc\n  obtain ⟨f, hf⟩ :=\n    SmoothPartitionOfUnity.exists_isSubordinate I isClosed_univ (fun x => interior (U x))\n      (fun x => isOpen_interior) fun x _ => mem_iUnion.2 ⟨x, mem_interior_iff_mem_nhds.2 (hU x)⟩\n  refine ⟨⟨fun x => ∑ᶠ i, f i x • g i x,\n      hf.contMDiff_finsum_smul (fun i => isOpen_interior) fun i => (hgs i).mono interior_subset⟩,\n    fun x => f.finsum_smul_mem_convex (mem_univ x) (fun i hi => hgt _ _ ?_) (ht _)⟩\n  exact interior_subset (hf _ <| subset_closure hi)\n\n"}
{"name":"exists_smooth_forall_mem_convex_of_local","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝¹⁰ : NormedAddCommGroup E\ninst✝⁹ : NormedSpace Real E\nF : Type uF\ninst✝⁸ : NormedAddCommGroup F\ninst✝⁷ : NormedSpace Real F\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : SigmaCompactSpace M\ninst✝ : T2Space M\nt : M → Set F\nht : ∀ (x : M), Convex Real (t x)\nHloc : ∀ (x : M), Exists fun U => And (Membership.mem (nhds x) U) (Exists fun g => And (ContMDiffOn I (modelWithCornersSelf Real F) (↑Top.top) g U) (∀ (y : M), Membership.mem U y → Membership.mem (t y) (g y)))\n⊢ Exists fun g => ∀ (x : M), Membership.mem (t x) (g x)","decl":"/-- Let `M` be a σ-compact Hausdorff finite dimensional topological manifold. Let `t : M → Set F`\nbe a family of convex sets. Suppose that for each point `x : M` there exists a neighborhood\n`U ∈ 𝓝 x` and a function `g : M → F` such that `g` is smooth on `U` and `g y ∈ t y` for all `y ∈ U`.\nThen there exists a smooth function `g : C^∞⟮I, M; 𝓘(ℝ, F), F⟯` such that `g x ∈ t x` for all `x`.\nSee also `exists_contMDiffOn_forall_mem_convex_of_local` and\n`exists_smooth_forall_mem_convex_of_local_const`. -/\ntheorem exists_smooth_forall_mem_convex_of_local (ht : ∀ x, Convex ℝ (t x))\n    (Hloc : ∀ x : M, ∃ U ∈ 𝓝 x, ∃ g : M → F, ContMDiffOn I 𝓘(ℝ, F) ∞ g U ∧ ∀ y ∈ U, g y ∈ t y) :\n    ∃ g : C^∞⟮I, M; 𝓘(ℝ, F), F⟯, ∀ x, g x ∈ t x :=\n  exists_contMDiffOn_forall_mem_convex_of_local I ht Hloc\n\n"}
{"name":"exists_smooth_forall_mem_convex_of_local_const","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝¹⁰ : NormedAddCommGroup E\ninst✝⁹ : NormedSpace Real E\nF : Type uF\ninst✝⁸ : NormedAddCommGroup F\ninst✝⁷ : NormedSpace Real F\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : SigmaCompactSpace M\ninst✝ : T2Space M\nt : M → Set F\nht : ∀ (x : M), Convex Real (t x)\nHloc : ∀ (x : M), Exists fun c => Filter.Eventually (fun y => Membership.mem (t y) c) (nhds x)\n⊢ Exists fun g => ∀ (x : M), Membership.mem (t x) (g x)","decl":"/-- Let `M` be a σ-compact Hausdorff finite dimensional topological manifold. Let `t : M → Set F` be\na family of convex sets. Suppose that for each point `x : M` there exists a vector `c : F` such that\nfor all `y` in a neighborhood of `x` we have `c ∈ t y`. Then there exists a smooth function\n`g : C^∞⟮I, M; 𝓘(ℝ, F), F⟯` such that `g x ∈ t x` for all `x`.  See also\n`exists_contMDiffOn_forall_mem_convex_of_local` and `exists_smooth_forall_mem_convex_of_local`. -/\ntheorem exists_smooth_forall_mem_convex_of_local_const (ht : ∀ x, Convex ℝ (t x))\n    (Hloc : ∀ x : M, ∃ c : F, ∀ᶠ y in 𝓝 x, c ∈ t y) : ∃ g : C^∞⟮I, M; 𝓘(ℝ, F), F⟯, ∀ x, g x ∈ t x :=\n  exists_smooth_forall_mem_convex_of_local I ht fun x =>\n    let ⟨c, hc⟩ := Hloc x\n    ⟨_, hc, fun _ => c, contMDiffOn_const, fun _ => id⟩\n\n"}
{"name":"Emetric.exists_smooth_forall_closedBall_subset","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\ninst✝⁴ : FiniteDimensional Real E\nM : Type u_1\ninst✝³ : EMetricSpace M\ninst✝² : ChartedSpace H M\ninst✝¹ : IsManifold I (↑Top.top) M\ninst✝ : SigmaCompactSpace M\nK U : ι → Set M\nhK : ∀ (i : ι), IsClosed (K i)\nhU : ∀ (i : ι), IsOpen (U i)\nhKU : ∀ (i : ι), HasSubset.Subset (K i) (U i)\nhfin : LocallyFinite K\n⊢ Exists fun δ => And (∀ (x : M), LT.lt 0 (δ x)) (∀ (i : ι) (x : M), Membership.mem (K i) x → HasSubset.Subset (EMetric.closedBall x (ENNReal.ofReal (δ x))) (U i))","decl":"/-- Let `M` be a smooth σ-compact manifold with extended distance. Let `K : ι → Set M` be a locally\nfinite family of closed sets, let `U : ι → Set M` be a family of open sets such that `K i ⊆ U i` for\nall `i`. Then there exists a positive smooth function `δ : M → ℝ≥0` such that for any `i` and\n`x ∈ K i`, we have `EMetric.closedBall x (δ x) ⊆ U i`. -/\ntheorem Emetric.exists_smooth_forall_closedBall_subset {M} [EMetricSpace M] [ChartedSpace H M]\n    [IsManifold I ∞ M] [SigmaCompactSpace M] {K : ι → Set M} {U : ι → Set M}\n    (hK : ∀ i, IsClosed (K i)) (hU : ∀ i, IsOpen (U i)) (hKU : ∀ i, K i ⊆ U i)\n    (hfin : LocallyFinite K) :\n    ∃ δ : C^∞⟮I, M; 𝓘(ℝ, ℝ), ℝ⟯,\n      (∀ x, 0 < δ x) ∧ ∀ (i), ∀ x ∈ K i, EMetric.closedBall x (ENNReal.ofReal (δ x)) ⊆ U i := by\n  simpa only [mem_inter_iff, forall_and, mem_preimage, mem_iInter, @forall_swap ι M]\n    using exists_smooth_forall_mem_convex_of_local_const I\n      EMetric.exists_forall_closedBall_subset_aux₂\n      (EMetric.exists_forall_closedBall_subset_aux₁ hK hU hKU hfin)\n\n"}
{"name":"Metric.exists_smooth_forall_closedBall_subset","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"ι : Type uι\nE : Type uE\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\nH : Type uH\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners Real E H\ninst✝⁴ : FiniteDimensional Real E\nM : Type u_1\ninst✝³ : MetricSpace M\ninst✝² : ChartedSpace H M\ninst✝¹ : IsManifold I (↑Top.top) M\ninst✝ : SigmaCompactSpace M\nK U : ι → Set M\nhK : ∀ (i : ι), IsClosed (K i)\nhU : ∀ (i : ι), IsOpen (U i)\nhKU : ∀ (i : ι), HasSubset.Subset (K i) (U i)\nhfin : LocallyFinite K\n⊢ Exists fun δ => And (∀ (x : M), LT.lt 0 (δ x)) (∀ (i : ι) (x : M), Membership.mem (K i) x → HasSubset.Subset (Metric.closedBall x (δ x)) (U i))","decl":"/-- Let `M` be a smooth σ-compact manifold with a metric. Let `K : ι → Set M` be a locally finite\nfamily of closed sets, let `U : ι → Set M` be a family of open sets such that `K i ⊆ U i` for all\n`i`. Then there exists a positive smooth function `δ : M → ℝ≥0` such that for any `i` and `x ∈ K i`,\nwe have `Metric.closedBall x (δ x) ⊆ U i`. -/\ntheorem Metric.exists_smooth_forall_closedBall_subset {M} [MetricSpace M] [ChartedSpace H M]\n    [IsManifold I ∞ M] [SigmaCompactSpace M] {K : ι → Set M} {U : ι → Set M}\n    (hK : ∀ i, IsClosed (K i)) (hU : ∀ i, IsOpen (U i)) (hKU : ∀ i, K i ⊆ U i)\n    (hfin : LocallyFinite K) :\n    ∃ δ : C^∞⟮I, M; 𝓘(ℝ, ℝ), ℝ⟯,\n      (∀ x, 0 < δ x) ∧ ∀ (i), ∀ x ∈ K i, Metric.closedBall x (δ x) ⊆ U i := by\n  rcases Emetric.exists_smooth_forall_closedBall_subset I hK hU hKU hfin with ⟨δ, hδ0, hδ⟩\n  refine ⟨δ, hδ0, fun i x hx => ?_⟩\n  rw [← Metric.emetric_closedBall (hδ0 _).le]\n  exact hδ i x hx\n\n"}
{"name":"IsOpen.exists_msmooth_support_eq_aux","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nH : Type uH\ninst✝¹ : TopologicalSpace H\nI : ModelWithCorners Real E H\ninst✝ : FiniteDimensional Real E\ns : Set H\nhs : IsOpen s\n⊢ Exists fun f => And (Eq (Function.support f) s) (And (ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) f) (HasSubset.Subset (Set.range f) (Set.Icc 0 1)))","decl":"lemma IsOpen.exists_msmooth_support_eq_aux {s : Set H} (hs : IsOpen s) :\n    ∃ f : H → ℝ, f.support = s ∧ ContMDiff I 𝓘(ℝ) ∞ f ∧ Set.range f ⊆ Set.Icc 0 1 := by\n  have h's : IsOpen (I.symm ⁻¹' s) := I.continuous_symm.isOpen_preimage _ hs\n  rcases h's.exists_smooth_support_eq with ⟨f, f_supp, f_diff, f_range⟩\n  refine ⟨f ∘ I, ?_, ?_, ?_⟩\n  · rw [support_comp_eq_preimage, f_supp, ← preimage_comp]\n    simp only [ModelWithCorners.symm_comp_self, preimage_id_eq, id_eq]\n  · exact f_diff.comp_contMDiff contMDiff_model\n  · exact Subset.trans (range_comp_subset_range _ _) f_range\n\n"}
{"name":"IsOpen.exists_msmooth_support_eq","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : SigmaCompactSpace M\ninst✝ : T2Space M\ns : Set M\nhs : IsOpen s\n⊢ Exists fun f => And (Eq (Function.support f) s) (And (ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) f) (∀ (x : M), LE.le 0 (f x)))","decl":"/-- Given an open set in a finite-dimensional real manifold, there exists a nonnegative smooth\nfunction with support equal to `s`. -/\ntheorem IsOpen.exists_msmooth_support_eq {s : Set M} (hs : IsOpen s) :\n    ∃ f : M → ℝ, f.support = s ∧ ContMDiff I 𝓘(ℝ) ∞ f ∧ ∀ x, 0 ≤ f x := by\n  rcases SmoothPartitionOfUnity.exists_isSubordinate_chartAt_source I M with ⟨f, hf⟩\n  have A : ∀ (c : M), ∃ g : H → ℝ,\n      g.support = (chartAt H c).target ∩ (chartAt H c).symm ⁻¹' s ∧\n      ContMDiff I 𝓘(ℝ) ∞ g ∧ Set.range g ⊆ Set.Icc 0 1 := by\n    intro i\n    apply IsOpen.exists_msmooth_support_eq_aux\n    exact PartialHomeomorph.isOpen_inter_preimage_symm _ hs\n  choose g g_supp g_diff hg using A\n  have h'g : ∀ c x, 0 ≤ g c x := fun c x ↦ (hg c (mem_range_self (f := g c) x)).1\n  have h''g : ∀ c x, 0 ≤ f c x * g c (chartAt H c x) :=\n    fun c x ↦ mul_nonneg (f.nonneg c x) (h'g c _)\n  refine ⟨fun x ↦ ∑ᶠ c, f c x * g c (chartAt H c x), ?_, ?_, ?_⟩\n  · refine support_eq_iff.2 ⟨fun x hx ↦ ?_, fun x hx ↦ ?_⟩\n    · apply ne_of_gt\n      have B : ∃ c, 0 < f c x * g c (chartAt H c x) := by\n        obtain ⟨c, hc⟩ : ∃ c, 0 < f c x := f.exists_pos_of_mem (mem_univ x)\n        refine ⟨c, mul_pos hc ?_⟩\n        apply lt_of_le_of_ne (h'g _ _) (Ne.symm _)\n        rw [← mem_support, g_supp, ← mem_preimage, preimage_inter]\n        have Hx : x ∈ tsupport (f c) := subset_tsupport _ (ne_of_gt hc)\n        simp [(chartAt H c).left_inv (hf c Hx), hx, (chartAt H c).map_source (hf c Hx)]\n      apply finsum_pos' (fun c ↦ h''g c x) B\n      apply (f.locallyFinite.point_finite x).subset\n      apply compl_subset_compl.2\n      rintro c (hc : f c x = 0)\n      simpa only [mul_eq_zero] using Or.inl hc\n    · apply finsum_eq_zero_of_forall_eq_zero\n      intro c\n      by_cases Hx : x ∈ tsupport (f c)\n      · suffices g c (chartAt H c x) = 0 by simp only [this, mul_zero]\n        rw [← nmem_support, g_supp, ← mem_preimage, preimage_inter]\n        contrapose! hx\n        simp only [mem_inter_iff, mem_preimage, (chartAt H c).left_inv (hf c Hx)] at hx\n        exact hx.2\n      · have : x ∉ support (f c) := by contrapose! Hx; exact subset_tsupport _ Hx\n        rw [nmem_support] at this\n        simp [this]\n  · apply SmoothPartitionOfUnity.contMDiff_finsum_smul\n    intro c x hx\n    apply (g_diff c (chartAt H c x)).comp\n    exact contMDiffAt_of_mem_maximalAtlas (IsManifold.chart_mem_maximalAtlas _)\n      (hf c hx)\n  · intro x\n    apply finsum_nonneg (fun c ↦ h''g c x)\n\n"}
{"name":"exists_msmooth_support_eq_eq_one_iff","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : SigmaCompactSpace M\ninst✝ : T2Space M\ns t : Set M\nhs : IsOpen s\nht : IsClosed t\nh : HasSubset.Subset t s\n⊢ Exists fun f => And (ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) f) (And (HasSubset.Subset (Set.range f) (Set.Icc 0 1)) (And (Eq (Function.support f) s) (∀ (x : M), Iff (Membership.mem t x) (Eq (f x) 1))))","decl":"/-- Given an open set `s` containing a closed set `t` in a finite-dimensional real manifold, there\nexists a smooth function with support equal to `s`, taking values in `[0,1]`, and equal to `1`\nexactly on `t`. -/\ntheorem exists_msmooth_support_eq_eq_one_iff\n    {s t : Set M} (hs : IsOpen s) (ht : IsClosed t) (h : t ⊆ s) :\n    ∃ f : M → ℝ, ContMDiff I 𝓘(ℝ) ∞ f ∧ range f ⊆ Icc 0 1 ∧ support f = s\n      ∧ (∀ x, x ∈ t ↔ f x = 1) := by\n  /- Take `f` with support equal to `s`, and `g` with support equal to `tᶜ`. Then `f / (f + g)`\n  satisfies the conclusion of the theorem. -/\n  rcases hs.exists_msmooth_support_eq I with ⟨f, f_supp, f_diff, f_pos⟩\n  rcases ht.isOpen_compl.exists_msmooth_support_eq I with ⟨g, g_supp, g_diff, g_pos⟩\n  have A : ∀ x, 0 < f x + g x := by\n    intro x\n    by_cases xs : x ∈ support f\n    · have : 0 < f x := lt_of_le_of_ne (f_pos x) (Ne.symm xs)\n      linarith [g_pos x]\n    · have : 0 < g x := by\n        classical\n        apply lt_of_le_of_ne (g_pos x) (Ne.symm ?_)\n        rw [← mem_support, g_supp]\n        contrapose! xs\n        simp? at xs says simp only [mem_compl_iff, Decidable.not_not] at xs\n        exact h.trans f_supp.symm.subset xs\n      linarith [f_pos x]\n  refine ⟨fun x ↦ f x / (f x + g x), ?_, ?_, ?_, ?_⟩\n  -- show that `f / (f + g)` is smooth\n  · exact f_diff.div₀ (f_diff.add g_diff) (fun x ↦ ne_of_gt (A x))\n  -- show that the range is included in `[0, 1]`\n  · refine range_subset_iff.2 (fun x ↦ ⟨div_nonneg (f_pos x) (A x).le, ?_⟩)\n    apply div_le_one_of_le₀ _ (A x).le\n    simpa only [le_add_iff_nonneg_right] using g_pos x\n  -- show that the support is `s`\n  · have B : support (fun x ↦ f x + g x) = univ := eq_univ_of_forall (fun x ↦ (A x).ne')\n    simp only [support_div, f_supp, B, inter_univ]\n  -- show that the function equals one exactly on `t`\n  · intro x\n    simp [div_eq_one_iff_eq (A x).ne', self_eq_add_right, ← nmem_support, g_supp]\n\n"}
{"name":"exists_msmooth_zero_iff_one_iff_of_isClosed","module":"Mathlib.Geometry.Manifold.PartitionOfUnity","initialProofState":"E : Type uE\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Real E\nH : Type uH\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type uM\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : FiniteDimensional Real E\ninst✝² : IsManifold I (↑Top.top) M\ninst✝¹ : SigmaCompactSpace M\ninst✝ : T2Space M\ns t : Set M\nhs : IsClosed s\nht : IsClosed t\nhd : Disjoint s t\n⊢ Exists fun f => And (ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) f) (And (HasSubset.Subset (Set.range f) (Set.Icc 0 1)) (And (∀ (x : M), Iff (Membership.mem s x) (Eq (f x) 0)) (∀ (x : M), Iff (Membership.mem t x) (Eq (f x) 1))))","decl":"/-- Given two disjoint closed sets `s, t` in a Hausdorff σ-compact finite dimensional manifold,\nthere exists an infinitely smooth function that is equal to `0` exactly on `s` and to `1`\nexactly on `t`. See also `exists_smooth_zero_one_of_isClosed` for a slightly weaker version. -/\ntheorem exists_msmooth_zero_iff_one_iff_of_isClosed {s t : Set M}\n    (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t) :\n    ∃ f : M → ℝ, ContMDiff I 𝓘(ℝ) ∞ f ∧ range f ⊆ Icc 0 1 ∧ (∀ x, x ∈ s ↔ f x = 0)\n      ∧ (∀ x, x ∈ t ↔ f x = 1) := by\n  rcases exists_msmooth_support_eq_eq_one_iff I hs.isOpen_compl ht hd.subset_compl_left with\n    ⟨f, f_diff, f_range, fs, ft⟩\n  refine ⟨f, f_diff, f_range, ?_, ft⟩\n  simp [← nmem_support, fs]\n"}
