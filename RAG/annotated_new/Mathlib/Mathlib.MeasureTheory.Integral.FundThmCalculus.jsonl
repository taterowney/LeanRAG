{"name":"intervalIntegral.FTCFilter.le_nhds","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : outParam Real\nouter : Filter Real\ninner : outParam (Filter Real)\nself : intervalIntegral.FTCFilter a outer inner\n⊢ LE.le inner (nhds a)","decl":"/-- An auxiliary typeclass for the Fundamental theorem of calculus, part 1. It is used to formulate\ntheorems that work simultaneously for left and right one-sided derivatives of `∫ x in u..v, f x`. -/\nclass FTCFilter (a : outParam ℝ) (outer : Filter ℝ) (inner : outParam <| Filter ℝ) extends\n    TendstoIxxClass Ioc outer inner : Prop where\n  pure_le : pure a ≤ outer\n  le_nhds : inner ≤ 𝓝 a\n  [meas_gen : IsMeasurablyGenerated inner]\n\n"}
{"name":"intervalIntegral.FTCFilter.pure_le","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : outParam Real\nouter : Filter Real\ninner : outParam (Filter Real)\nself : intervalIntegral.FTCFilter a outer inner\n⊢ LE.le (Pure.pure a) outer","decl":"/-- An auxiliary typeclass for the Fundamental theorem of calculus, part 1. It is used to formulate\ntheorems that work simultaneously for left and right one-sided derivatives of `∫ x in u..v, f x`. -/\nclass FTCFilter (a : outParam ℝ) (outer : Filter ℝ) (inner : outParam <| Filter ℝ) extends\n    TendstoIxxClass Ioc outer inner : Prop where\n  pure_le : pure a ≤ outer\n  le_nhds : inner ≤ 𝓝 a\n  [meas_gen : IsMeasurablyGenerated inner]\n\n"}
{"name":"intervalIntegral.FTCFilter.toTendstoIxxClass","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : outParam Real\nouter : Filter Real\ninner : outParam (Filter Real)\nself : intervalIntegral.FTCFilter a outer inner\n⊢ Filter.TendstoIxxClass Set.Ioc outer inner","decl":"/-- An auxiliary typeclass for the Fundamental theorem of calculus, part 1. It is used to formulate\ntheorems that work simultaneously for left and right one-sided derivatives of `∫ x in u..v, f x`. -/\nclass FTCFilter (a : outParam ℝ) (outer : Filter ℝ) (inner : outParam <| Filter ℝ) extends\n    TendstoIxxClass Ioc outer inner : Prop where\n  pure_le : pure a ≤ outer\n  le_nhds : inner ≤ 𝓝 a\n  [meas_gen : IsMeasurablyGenerated inner]\n\n"}
{"name":"intervalIntegral.FTCFilter.meas_gen","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : outParam Real\nouter : Filter Real\ninner : outParam (Filter Real)\nself : intervalIntegral.FTCFilter a outer inner\n⊢ Filter.IsMeasurablyGenerated inner","decl":"/-- An auxiliary typeclass for the Fundamental theorem of calculus, part 1. It is used to formulate\ntheorems that work simultaneously for left and right one-sided derivatives of `∫ x in u..v, f x`. -/\nclass FTCFilter (a : outParam ℝ) (outer : Filter ℝ) (inner : outParam <| Filter ℝ) extends\n    TendstoIxxClass Ioc outer inner : Prop where\n  pure_le : pure a ≤ outer\n  le_nhds : inner ≤ 𝓝 a\n  [meas_gen : IsMeasurablyGenerated inner]\n\n"}
{"name":"intervalIntegral.FTCFilter.pure","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\n⊢ intervalIntegral.FTCFilter a (Pure.pure a) Bot.bot","decl":"instance pure (a : ℝ) : FTCFilter a (pure a) ⊥ where\n  pure_le := le_rfl\n  le_nhds := bot_le\n\n"}
{"name":"intervalIntegral.FTCFilter.nhdsWithinSingleton","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\n⊢ intervalIntegral.FTCFilter a (nhdsWithin a (Singleton.singleton a)) Bot.bot","decl":"instance nhdsWithinSingleton (a : ℝ) : FTCFilter a (𝓝[{a}] a) ⊥ := by\n  rw [nhdsWithin, principal_singleton, inf_eq_right.2 (pure_le_nhds a)]; infer_instance\n\n"}
{"name":"intervalIntegral.FTCFilter.finiteAt_inner","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\nl l' : Filter Real\nh : intervalIntegral.FTCFilter a l l'\nμ : MeasureTheory.Measure Real\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ μ.FiniteAtFilter l'","decl":"theorem finiteAt_inner {a : ℝ} (l : Filter ℝ) {l'} [h : FTCFilter a l l'] {μ : Measure ℝ}\n    [IsLocallyFiniteMeasure μ] : μ.FiniteAtFilter l' :=\n  (μ.finiteAt_nhds a).filter_mono h.le_nhds\n\n"}
{"name":"intervalIntegral.FTCFilter.nhds","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\n⊢ intervalIntegral.FTCFilter a (nhds a) (nhds a)","decl":"instance nhds (a : ℝ) : FTCFilter a (𝓝 a) (𝓝 a) where\n  pure_le := pure_le_nhds a\n  le_nhds := le_rfl\n\n"}
{"name":"intervalIntegral.FTCFilter.nhdsUniv","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\n⊢ intervalIntegral.FTCFilter a (nhdsWithin a Set.univ) (nhds a)","decl":"instance nhdsUniv (a : ℝ) : FTCFilter a (𝓝[univ] a) (𝓝 a) := by rw [nhdsWithin_univ]; infer_instance\n\n"}
{"name":"intervalIntegral.FTCFilter.nhdsLeft","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\n⊢ intervalIntegral.FTCFilter a (nhdsWithin a (Set.Iic a)) (nhdsWithin a (Set.Iic a))","decl":"instance nhdsLeft (a : ℝ) : FTCFilter a (𝓝[≤] a) (𝓝[≤] a) where\n  pure_le := pure_le_nhdsWithin right_mem_Iic\n  le_nhds := inf_le_left\n\n"}
{"name":"intervalIntegral.FTCFilter.nhdsRight","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a : Real\n⊢ intervalIntegral.FTCFilter a (nhdsWithin a (Set.Ici a)) (nhdsWithin a (Set.Ioi a))","decl":"instance nhdsRight (a : ℝ) : FTCFilter a (𝓝[≥] a) (𝓝[>] a) where\n  pure_le := pure_le_nhdsWithin left_mem_Ici\n  le_nhds := inf_le_left\n\n"}
{"name":"intervalIntegral.FTCFilter.nhdsIcc","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"x a b : Real\nh : Fact (Membership.mem (Set.Icc a b) x)\n⊢ intervalIntegral.FTCFilter x (nhdsWithin x (Set.Icc a b)) (nhdsWithin x (Set.Icc a b))","decl":"instance nhdsIcc {x a b : ℝ} [h : Fact (x ∈ Icc a b)] :\n    FTCFilter x (𝓝[Icc a b] x) (𝓝[Icc a b] x) where\n  pure_le := pure_le_nhdsWithin h.out\n  le_nhds := inf_le_left\n\n"}
{"name":"intervalIntegral.FTCFilter.nhdsUIcc","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"x a b : Real\nh : Fact (Membership.mem (Set.uIcc a b) x)\n⊢ intervalIntegral.FTCFilter x (nhdsWithin x (Set.uIcc a b)) (nhdsWithin x (Set.uIcc a b))","decl":"instance nhdsUIcc {x a b : ℝ} [h : Fact (x ∈ [[a, b]])] :\n    FTCFilter x (𝓝[[[a, b]]] x) (𝓝[[[a, b]]] x) :=\n  .nhdsIcc (h := h)\n\n"}
{"name":"intervalIntegral.measure_integral_sub_linear_isLittleO_of_tendsto_ae'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nf : Real → E\nc : E\nl l' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝¹ : l'.IsMeasurablyGenerated\ninst✝ : Filter.TendstoIxxClass Set.Ioc l l'\nhfm : StronglyMeasurableAtFilter f l' μ\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae μ)) (nhds c)\nhl : μ.FiniteAtFilter l'\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (intervalIntegral (fun x => f x) (u t) (v t) μ) (intervalIntegral (fun x => c) (u t) (v t) μ)) fun t => intervalIntegral (fun x => 1) (u t) (v t) μ","decl":"/-- **Fundamental theorem of calculus-1**, local version for any measure.\nLet filters `l` and `l'` be related by `TendstoIxxClass Ioc`.\nIf `f` has a finite limit `c` at `l' ⊓ ae μ`, where `μ` is a measure\nfinite at `l'`, then `∫ x in u..v, f x ∂μ = ∫ x in u..v, c ∂μ + o(∫ x in u..v, 1 ∂μ)` as both\n`u` and `v` tend to `l`.\n\nSee also `measure_integral_sub_linear_isLittleO_of_tendsto_ae` for a version assuming\n`[intervalIntegral.FTCFilter a l l']` and `[MeasureTheory.IsLocallyFiniteMeasure μ]`. If `l` is one\nof `𝓝[≥] a`, `𝓝[≤] a`, `𝓝 a`, then it's easier to apply the non-primed version.  The primed version\nalso works, e.g., for `l = l' = atTop`.\n\nWe use integrals of constants instead of measures because this way it is easier to formulate\na statement that works in both cases `u ≤ v` and `v ≤ u`. -/\ntheorem measure_integral_sub_linear_isLittleO_of_tendsto_ae' [IsMeasurablyGenerated l']\n    [TendstoIxxClass Ioc l l'] (hfm : StronglyMeasurableAtFilter f l' μ)\n    (hf : Tendsto f (l' ⊓ ae μ) (𝓝 c)) (hl : μ.FiniteAtFilter l') (hu : Tendsto u lt l)\n    (hv : Tendsto v lt l) :\n    (fun t => (∫ x in u t..v t, f x ∂μ) - ∫ _ in u t..v t, c ∂μ) =o[lt] fun t =>\n      ∫ _ in u t..v t, (1 : ℝ) ∂μ := by\n  by_cases hE : CompleteSpace E; swap\n  · simp [intervalIntegral, integral, hE]\n  have A := hf.integral_sub_linear_isLittleO_ae hfm hl (hu.Ioc hv)\n  have B := hf.integral_sub_linear_isLittleO_ae hfm hl (hv.Ioc hu)\n  simp_rw [integral_const', sub_smul]\n  refine ((A.trans_le fun t ↦ ?_).sub (B.trans_le fun t ↦ ?_)).congr_left fun t ↦ ?_\n  · cases le_total (u t) (v t) <;> simp [*]\n  · cases le_total (u t) (v t) <;> simp [*]\n  · simp_rw [intervalIntegral]\n    abel\n\n"}
{"name":"intervalIntegral.measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nf : Real → E\nc : E\nl l' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝² : CompleteSpace E\ninst✝¹ : l'.IsMeasurablyGenerated\ninst✝ : Filter.TendstoIxxClass Set.Ioc l l'\nhfm : StronglyMeasurableAtFilter f l' μ\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae μ)) (nhds c)\nhl : μ.FiniteAtFilter l'\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\nhuv : lt.EventuallyLE u v\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (intervalIntegral (fun x => f x) (u t) (v t) μ) (HSMul.hSMul (μ (Set.Ioc (u t) (v t))).toReal c)) fun t => (μ (Set.Ioc (u t) (v t))).toReal","decl":"/-- **Fundamental theorem of calculus-1**, local version for any measure.\nLet filters `l` and `l'` be related by `TendstoIxxClass Ioc`.\nIf `f` has a finite limit `c` at `l ⊓ ae μ`, where `μ` is a measure\nfinite at `l`, then `∫ x in u..v, f x ∂μ = μ (Ioc u v) • c + o(μ(Ioc u v))` as both\n`u` and `v` tend to `l` so that `u ≤ v`.\n\nSee also `measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le` for a version assuming\n`[intervalIntegral.FTCFilter a l l']` and `[MeasureTheory.IsLocallyFiniteMeasure μ]`. If `l` is one\nof `𝓝[≥] a`, `𝓝[≤] a`, `𝓝 a`, then it's easier to apply the non-primed version.  The primed version\nalso works, e.g., for `l = l' = Filter.atTop`. -/\ntheorem measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le'\n    [CompleteSpace E] [IsMeasurablyGenerated l']\n    [TendstoIxxClass Ioc l l'] (hfm : StronglyMeasurableAtFilter f l' μ)\n    (hf : Tendsto f (l' ⊓ ae μ) (𝓝 c)) (hl : μ.FiniteAtFilter l') (hu : Tendsto u lt l)\n    (hv : Tendsto v lt l) (huv : u ≤ᶠ[lt] v) :\n    (fun t => (∫ x in u t..v t, f x ∂μ) - (μ (Ioc (u t) (v t))).toReal • c) =o[lt] fun t =>\n      (μ <| Ioc (u t) (v t)).toReal :=\n  (measure_integral_sub_linear_isLittleO_of_tendsto_ae' hfm hf hl hu hv).congr'\n    (huv.mono fun x hx => by simp [integral_const', hx])\n    (huv.mono fun x hx => by simp [integral_const', hx])\n\n"}
{"name":"intervalIntegral.measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_ge'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nf : Real → E\nc : E\nl l' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝² : CompleteSpace E\ninst✝¹ : l'.IsMeasurablyGenerated\ninst✝ : Filter.TendstoIxxClass Set.Ioc l l'\nhfm : StronglyMeasurableAtFilter f l' μ\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae μ)) (nhds c)\nhl : μ.FiniteAtFilter l'\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\nhuv : lt.EventuallyLE v u\n⊢ Asymptotics.IsLittleO lt (fun t => HAdd.hAdd (intervalIntegral (fun x => f x) (u t) (v t) μ) (HSMul.hSMul (μ (Set.Ioc (v t) (u t))).toReal c)) fun t => (μ (Set.Ioc (v t) (u t))).toReal","decl":"/-- **Fundamental theorem of calculus-1**, local version for any measure.\nLet filters `l` and `l'` be related by `TendstoIxxClass Ioc`.\nIf `f` has a finite limit `c` at `l ⊓ ae μ`, where `μ` is a measure\nfinite at `l`, then `∫ x in u..v, f x ∂μ = -μ (Ioc v u) • c + o(μ(Ioc v u))` as both\n`u` and `v` tend to `l` so that `v ≤ u`.\n\nSee also `measure_integral_sub_linear_is_o_of_tendsto_ae_of_ge` for a version assuming\n`[intervalIntegral.FTCFilter a l l']` and `[MeasureTheory.IsLocallyFiniteMeasure μ]`. If `l` is one\nof `𝓝[≥] a`, `𝓝[≤] a`, `𝓝 a`, then it's easier to apply the non-primed version. The primed version\nalso works, e.g., for `l = l' = Filter.atTop`. -/\ntheorem measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_ge'\n    [CompleteSpace E] [IsMeasurablyGenerated l']\n    [TendstoIxxClass Ioc l l'] (hfm : StronglyMeasurableAtFilter f l' μ)\n    (hf : Tendsto f (l' ⊓ ae μ) (𝓝 c)) (hl : μ.FiniteAtFilter l') (hu : Tendsto u lt l)\n    (hv : Tendsto v lt l) (huv : v ≤ᶠ[lt] u) :\n    (fun t => (∫ x in u t..v t, f x ∂μ) + (μ (Ioc (v t) (u t))).toReal • c) =o[lt] fun t =>\n      (μ <| Ioc (v t) (u t)).toReal :=\n  (measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le' hfm hf hl hv hu\n          huv).neg_left.congr_left\n    fun t => by simp [integral_symm (u t), add_comm]\n\n"}
{"name":"intervalIntegral.measure_integral_sub_linear_isLittleO_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nf : Real → E\na : Real\nc : E\nl l' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : intervalIntegral.FTCFilter a l l'\nhfm : StronglyMeasurableAtFilter f l' μ\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae μ)) (nhds c)\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (intervalIntegral (fun x => f x) (u t) (v t) μ) (intervalIntegral (fun x => c) (u t) (v t) μ)) fun t => intervalIntegral (fun x => 1) (u t) (v t) μ","decl":"/-- **Fundamental theorem of calculus-1**, local version for any measure.\n\nLet filters `l` and `l'` be related by `[intervalIntegral.FTCFilter a l l']`; let `μ` be a locally\nfinite measure.  If `f` has a finite limit `c` at `l' ⊓ ae μ`, then\n`∫ x in u..v, f x ∂μ = ∫ x in u..v, c ∂μ + o(∫ x in u..v, 1 ∂μ)` as both `u` and `v` tend to `l`.\n\nSee also `measure_integral_sub_linear_isLittleO_of_tendsto_ae'` for a version that also works, e.g.,\nfor `l = l' = Filter.atTop`.\n\nWe use integrals of constants instead of measures because this way it is easier to formulate\na statement that works in both cases `u ≤ v` and `v ≤ u`. -/\ntheorem measure_integral_sub_linear_isLittleO_of_tendsto_ae [FTCFilter a l l']\n    (hfm : StronglyMeasurableAtFilter f l' μ) (hf : Tendsto f (l' ⊓ ae μ) (𝓝 c))\n    (hu : Tendsto u lt l) (hv : Tendsto v lt l) :\n    (fun t => (∫ x in u t..v t, f x ∂μ) - ∫ _ in u t..v t, c ∂μ) =o[lt] fun t =>\n      ∫ _ in u t..v t, (1 : ℝ) ∂μ :=\n  haveI := FTCFilter.meas_gen l\n  measure_integral_sub_linear_isLittleO_of_tendsto_ae' hfm hf (FTCFilter.finiteAt_inner l) hu hv\n\n"}
{"name":"intervalIntegral.measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nf : Real → E\na : Real\nc : E\nl l' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : CompleteSpace E\ninst✝ : intervalIntegral.FTCFilter a l l'\nhfm : StronglyMeasurableAtFilter f l' μ\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae μ)) (nhds c)\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\nhuv : lt.EventuallyLE u v\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (intervalIntegral (fun x => f x) (u t) (v t) μ) (HSMul.hSMul (μ (Set.Ioc (u t) (v t))).toReal c)) fun t => (μ (Set.Ioc (u t) (v t))).toReal","decl":"/-- **Fundamental theorem of calculus-1**, local version for any measure.\n\nLet filters `l` and `l'` be related by `[intervalIntegral.FTCFilter a l l']`; let `μ` be a locally\nfinite measure.  If `f` has a finite limit `c` at `l' ⊓ ae μ`, then\n`∫ x in u..v, f x ∂μ = μ (Ioc u v) • c + o(μ(Ioc u v))` as both `u` and `v` tend to `l`.\n\nSee also `measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le'` for a version that also works,\ne.g., for `l = l' = Filter.atTop`. -/\ntheorem measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le\n    [CompleteSpace E] [FTCFilter a l l']\n    (hfm : StronglyMeasurableAtFilter f l' μ) (hf : Tendsto f (l' ⊓ ae μ) (𝓝 c))\n    (hu : Tendsto u lt l) (hv : Tendsto v lt l) (huv : u ≤ᶠ[lt] v) :\n    (fun t => (∫ x in u t..v t, f x ∂μ) - (μ (Ioc (u t) (v t))).toReal • c) =o[lt] fun t =>\n      (μ <| Ioc (u t) (v t)).toReal :=\n  haveI := FTCFilter.meas_gen l\n  measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_le' hfm hf (FTCFilter.finiteAt_inner l) hu\n    hv huv\n\n"}
{"name":"intervalIntegral.measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_ge","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nf : Real → E\na : Real\nc : E\nl l' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝² : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝¹ : CompleteSpace E\ninst✝ : intervalIntegral.FTCFilter a l l'\nhfm : StronglyMeasurableAtFilter f l' μ\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae μ)) (nhds c)\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\nhuv : lt.EventuallyLE v u\n⊢ Asymptotics.IsLittleO lt (fun t => HAdd.hAdd (intervalIntegral (fun x => f x) (u t) (v t) μ) (HSMul.hSMul (μ (Set.Ioc (v t) (u t))).toReal c)) fun t => (μ (Set.Ioc (v t) (u t))).toReal","decl":"/-- **Fundamental theorem of calculus-1**, local version for any measure.\n\nLet filters `l` and `l'` be related by `[intervalIntegral.FTCFilter a l l']`; let `μ` be a locally\nfinite measure.  If `f` has a finite limit `c` at `l' ⊓ ae μ`, then\n`∫ x in u..v, f x ∂μ = -μ (Set.Ioc v u) • c + o(μ(Set.Ioc v u))` as both `u` and `v` tend to `l`.\n\nSee also `measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_ge'` for a version that also works,\ne.g., for `l = l' = Filter.atTop`. -/\ntheorem measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_ge\n    [CompleteSpace E] [FTCFilter a l l']\n    (hfm : StronglyMeasurableAtFilter f l' μ) (hf : Tendsto f (l' ⊓ ae μ) (𝓝 c))\n    (hu : Tendsto u lt l) (hv : Tendsto v lt l) (huv : v ≤ᶠ[lt] u) :\n    (fun t => (∫ x in u t..v t, f x ∂μ) + (μ (Ioc (v t) (u t))).toReal • c) =o[lt] fun t =>\n      (μ <| Ioc (v t) (u t)).toReal :=\n  haveI := FTCFilter.meas_gen l\n  measure_integral_sub_linear_isLittleO_of_tendsto_ae_of_ge' hfm hf (FTCFilter.finiteAt_inner l) hu\n    hv huv\n\n"}
{"name":"intervalIntegral.measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nf : Real → E\na b : Real\nca cb : E\nla la' lb lb' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nua va ub vb : ι → Real\ninst✝² : intervalIntegral.FTCFilter a la la'\ninst✝¹ : intervalIntegral.FTCFilter b lb lb'\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhab : IntervalIntegrable f μ a b\nhmeas_a : StronglyMeasurableAtFilter f la' μ\nhmeas_b : StronglyMeasurableAtFilter f lb' μ\nha_lim : Filter.Tendsto f (Min.min la' (MeasureTheory.ae μ)) (nhds ca)\nhb_lim : Filter.Tendsto f (Min.min lb' (MeasureTheory.ae μ)) (nhds cb)\nhua : Filter.Tendsto ua lt la\nhva : Filter.Tendsto va lt la\nhub : Filter.Tendsto ub lt lb\nhvb : Filter.Tendsto vb lt lb\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (HSub.hSub (intervalIntegral (fun x => f x) (va t) (vb t) μ) (intervalIntegral (fun x => f x) (ua t) (ub t) μ)) (HSub.hSub (intervalIntegral (fun x => cb) (ub t) (vb t) μ) (intervalIntegral (fun x => ca) (ua t) (va t) μ))) fun t => HAdd.hAdd (Norm.norm (intervalIntegral (fun x => 1) (ua t) (va t) μ)) (Norm.norm (intervalIntegral (fun x => 1) (ub t) (vb t) μ))","decl":"/-- **Fundamental theorem of calculus-1**, strict derivative in both limits for a locally finite\nmeasure.\n\nLet `f` be a measurable function integrable on `a..b`. Let `(la, la')` be a pair of\n`intervalIntegral.FTCFilter`s around `a`; let `(lb, lb')` be a pair of `intervalIntegral.FTCFilter`s\naround `b`. Suppose that `f` has finite limits `ca` and `cb` at `la' ⊓ ae μ` and `lb' ⊓ ae μ`,\nrespectively.\nThen `∫ x in va..vb, f x ∂μ - ∫ x in ua..ub, f x ∂μ =\n  ∫ x in ub..vb, cb ∂μ - ∫ x in ua..va, ca ∂μ +\n    o(‖∫ x in ua..va, (1:ℝ) ∂μ‖ + ‖∫ x in ub..vb, (1:ℝ) ∂μ‖)`\nas `ua` and `va` tend to `la` while `ub` and `vb` tend to `lb`.\n-/\ntheorem measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae\n    (hab : IntervalIntegrable f μ a b) (hmeas_a : StronglyMeasurableAtFilter f la' μ)\n    (hmeas_b : StronglyMeasurableAtFilter f lb' μ) (ha_lim : Tendsto f (la' ⊓ ae μ) (𝓝 ca))\n    (hb_lim : Tendsto f (lb' ⊓ ae μ) (𝓝 cb)) (hua : Tendsto ua lt la) (hva : Tendsto va lt la)\n    (hub : Tendsto ub lt lb) (hvb : Tendsto vb lt lb) :\n    (fun t =>\n        ((∫ x in va t..vb t, f x ∂μ) - ∫ x in ua t..ub t, f x ∂μ) -\n          ((∫ _ in ub t..vb t, cb ∂μ) - ∫ _ in ua t..va t, ca ∂μ)) =o[lt]\n      fun t => ‖∫ _ in ua t..va t, (1 : ℝ) ∂μ‖ + ‖∫ _ in ub t..vb t, (1 : ℝ) ∂μ‖ := by\n  haveI := FTCFilter.meas_gen la; haveI := FTCFilter.meas_gen lb\n  refine\n    ((measure_integral_sub_linear_isLittleO_of_tendsto_ae hmeas_a ha_lim hua hva).neg_left.add_add\n          (measure_integral_sub_linear_isLittleO_of_tendsto_ae hmeas_b hb_lim hub hvb)).congr'\n      ?_ EventuallyEq.rfl\n  have A : ∀ᶠ t in lt, IntervalIntegrable f μ (ua t) (va t) :=\n    ha_lim.eventually_intervalIntegrable_ae hmeas_a (FTCFilter.finiteAt_inner la) hua hva\n  have A' : ∀ᶠ t in lt, IntervalIntegrable f μ a (ua t) :=\n    ha_lim.eventually_intervalIntegrable_ae hmeas_a (FTCFilter.finiteAt_inner la)\n      (tendsto_const_pure.mono_right FTCFilter.pure_le) hua\n  have B : ∀ᶠ t in lt, IntervalIntegrable f μ (ub t) (vb t) :=\n    hb_lim.eventually_intervalIntegrable_ae hmeas_b (FTCFilter.finiteAt_inner lb) hub hvb\n  have B' : ∀ᶠ t in lt, IntervalIntegrable f μ b (ub t) :=\n    hb_lim.eventually_intervalIntegrable_ae hmeas_b (FTCFilter.finiteAt_inner lb)\n      (tendsto_const_pure.mono_right FTCFilter.pure_le) hub\n  filter_upwards [A, A', B, B'] with _ ua_va a_ua ub_vb b_ub\n  rw [← integral_interval_sub_interval_comm']\n  · abel\n  exacts [ub_vb, ua_va, b_ub.symm.trans <| hab.symm.trans a_ua]\n\n"}
{"name":"intervalIntegral.measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nf : Real → E\na b : Real\nc : E\nlb lb' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝¹ : intervalIntegral.FTCFilter b lb lb'\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhab : IntervalIntegrable f μ a b\nhmeas : StronglyMeasurableAtFilter f lb' μ\nhf : Filter.Tendsto f (Min.min lb' (MeasureTheory.ae μ)) (nhds c)\nhu : Filter.Tendsto u lt lb\nhv : Filter.Tendsto v lt lb\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (HSub.hSub (intervalIntegral (fun x => f x) a (v t) μ) (intervalIntegral (fun x => f x) a (u t) μ)) (intervalIntegral (fun x => c) (u t) (v t) μ)) fun t => intervalIntegral (fun x => 1) (u t) (v t) μ","decl":"/-- **Fundamental theorem of calculus-1**, strict derivative in right endpoint for a locally finite\nmeasure.\n\nLet `f` be a measurable function integrable on `a..b`. Let `(lb, lb')` be a pair of\n`intervalIntegral.FTCFilter`s around `b`. Suppose that `f` has a finite limit `c` at `lb' ⊓ ae μ`.\n\nThen `∫ x in a..v, f x ∂μ - ∫ x in a..u, f x ∂μ = ∫ x in u..v, c ∂μ + o(∫ x in u..v, (1:ℝ) ∂μ)` as\n`u` and `v` tend to `lb`.\n-/\ntheorem measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right\n    (hab : IntervalIntegrable f μ a b) (hmeas : StronglyMeasurableAtFilter f lb' μ)\n    (hf : Tendsto f (lb' ⊓ ae μ) (𝓝 c)) (hu : Tendsto u lt lb) (hv : Tendsto v lt lb) :\n    (fun t => ((∫ x in a..v t, f x ∂μ) - ∫ x in a..u t, f x ∂μ) - ∫ _ in u t..v t, c ∂μ) =o[lt]\n      fun t => ∫ _ in u t..v t, (1 : ℝ) ∂μ := by\n  simpa using\n    measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae hab stronglyMeasurableAt_bot\n      hmeas ((tendsto_bot : Tendsto _ ⊥ (𝓝 (0 : E))).mono_left inf_le_left) hf\n      (tendsto_const_pure : Tendsto _ _ (pure a)) tendsto_const_pure hu hv\n\n"}
{"name":"intervalIntegral.measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nf : Real → E\na b : Real\nc : E\nla la' : Filter Real\nlt : Filter ι\nμ : MeasureTheory.Measure Real\nu v : ι → Real\ninst✝¹ : intervalIntegral.FTCFilter a la la'\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhab : IntervalIntegrable f μ a b\nhmeas : StronglyMeasurableAtFilter f la' μ\nhf : Filter.Tendsto f (Min.min la' (MeasureTheory.ae μ)) (nhds c)\nhu : Filter.Tendsto u lt la\nhv : Filter.Tendsto v lt la\n⊢ Asymptotics.IsLittleO lt (fun t => HAdd.hAdd (HSub.hSub (intervalIntegral (fun x => f x) (v t) b μ) (intervalIntegral (fun x => f x) (u t) b μ)) (intervalIntegral (fun x => c) (u t) (v t) μ)) fun t => intervalIntegral (fun x => 1) (u t) (v t) μ","decl":"/-- **Fundamental theorem of calculus-1**, strict derivative in left endpoint for a locally finite\nmeasure.\n\nLet `f` be a measurable function integrable on `a..b`. Let `(la, la')` be a pair of\n`intervalIntegral.FTCFilter`s around `a`. Suppose that `f` has a finite limit `c` at `la' ⊓ ae μ`.\n\nThen `∫ x in v..b, f x ∂μ - ∫ x in u..b, f x ∂μ = -∫ x in u..v, c ∂μ + o(∫ x in u..v, (1:ℝ) ∂μ)`\nas `u` and `v` tend to `la`.\n-/\ntheorem measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_left\n    (hab : IntervalIntegrable f μ a b) (hmeas : StronglyMeasurableAtFilter f la' μ)\n    (hf : Tendsto f (la' ⊓ ae μ) (𝓝 c)) (hu : Tendsto u lt la) (hv : Tendsto v lt la) :\n    (fun t => ((∫ x in v t..b, f x ∂μ) - ∫ x in u t..b, f x ∂μ) + ∫ _ in u t..v t, c ∂μ) =o[lt]\n      fun t => ∫ _ in u t..v t, (1 : ℝ) ∂μ := by\n  simpa using\n    measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae hab hmeas\n      stronglyMeasurableAt_bot hf ((tendsto_bot : Tendsto _ ⊥ (𝓝 (0 : E))).mono_left inf_le_left) hu\n      hv (tendsto_const_pure : Tendsto _ _ (pure b)) tendsto_const_pure\n\n"}
{"name":"intervalIntegral.integral_sub_linear_isLittleO_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\nl l' : Filter Real\nlt : Filter ι\na : Real\ninst✝ : intervalIntegral.FTCFilter a l l'\nhfm : StronglyMeasurableAtFilter f l' MeasureTheory.MeasureSpace.volume\nhf : Filter.Tendsto f (Min.min l' (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\nu v : ι → Real\nhu : Filter.Tendsto u lt l\nhv : Filter.Tendsto v lt l\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (intervalIntegral (fun x => f x) (u t) (v t) MeasureTheory.MeasureSpace.volume) (HSMul.hSMul (HSub.hSub (v t) (u t)) c)) (HSub.hSub v u)","decl":"/-- **Fundamental theorem of calculus-1**, local version.\n\nIf `f` has a finite limit `c` almost surely at `l'`, where `(l, l')` is an\n`intervalIntegral.FTCFilter` pair around `a`, then `∫ x in u..v, f x ∂μ = (v - u) • c + o (v - u)`\nas both `u` and `v` tend to `l`. -/\ntheorem integral_sub_linear_isLittleO_of_tendsto_ae [FTCFilter a l l']\n    (hfm : StronglyMeasurableAtFilter f l') (hf : Tendsto f (l' ⊓ ae volume) (𝓝 c)) {u v : ι → ℝ}\n    (hu : Tendsto u lt l) (hv : Tendsto v lt l) :\n    (fun t => (∫ x in u t..v t, f x) - (v t - u t) • c) =o[lt] (v - u) := by\n  simpa [integral_const] using measure_integral_sub_linear_isLittleO_of_tendsto_ae hfm hf hu hv\n\n"}
{"name":"intervalIntegral.integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf : Real → E\nca cb : E\nla la' lb lb' : Filter Real\nlt : Filter ι\na b : Real\nua ub va vb : ι → Real\ninst✝¹ : intervalIntegral.FTCFilter a la la'\ninst✝ : intervalIntegral.FTCFilter b lb lb'\nhab : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f la' MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f lb' MeasureTheory.MeasureSpace.volume\nha_lim : Filter.Tendsto f (Min.min la' (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds ca)\nhb_lim : Filter.Tendsto f (Min.min lb' (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds cb)\nhua : Filter.Tendsto ua lt la\nhva : Filter.Tendsto va lt la\nhub : Filter.Tendsto ub lt lb\nhvb : Filter.Tendsto vb lt lb\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (HSub.hSub (intervalIntegral (fun x => f x) (va t) (vb t) MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => f x) (ua t) (ub t) MeasureTheory.MeasureSpace.volume)) (HSub.hSub (HSMul.hSMul (HSub.hSub (vb t) (ub t)) cb) (HSMul.hSMul (HSub.hSub (va t) (ua t)) ca))) fun t => HAdd.hAdd (Norm.norm (HSub.hSub (va t) (ua t))) (Norm.norm (HSub.hSub (vb t) (ub t)))","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability at filter in both endpoints.\n\nIf `f` is a measurable function integrable on `a..b`, `(la, la')` is an `intervalIntegral.FTCFilter`\npair around `a`, and `(lb, lb')` is an `intervalIntegral.FTCFilter` pair around `b`, and `f` has\nfinite limits `ca` and `cb` almost surely at `la'` and `lb'`, respectively, then\n`(∫ x in va..vb, f x) - ∫ x in ua..ub, f x = (vb - ub) • cb - (va - ua) • ca +\n  o(‖va - ua‖ + ‖vb - ub‖)` as `ua` and `va` tend to `la` while `ub` and `vb` tend to `lb`.\n\nThis lemma could've been formulated using `HasStrictFDerivAtFilter` if we had this\ndefinition. -/\ntheorem integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae\n    (hab : IntervalIntegrable f volume a b) (hmeas_a : StronglyMeasurableAtFilter f la')\n    (hmeas_b : StronglyMeasurableAtFilter f lb') (ha_lim : Tendsto f (la' ⊓ ae volume) (𝓝 ca))\n    (hb_lim : Tendsto f (lb' ⊓ ae volume) (𝓝 cb)) (hua : Tendsto ua lt la) (hva : Tendsto va lt la)\n    (hub : Tendsto ub lt lb) (hvb : Tendsto vb lt lb) :\n    (fun t =>\n        ((∫ x in va t..vb t, f x) - ∫ x in ua t..ub t, f x) -\n          ((vb t - ub t) • cb - (va t - ua t) • ca)) =o[lt]\n      fun t => ‖va t - ua t‖ + ‖vb t - ub t‖ := by\n  simpa [integral_const]\n    using measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae hab hmeas_a hmeas_b\n      ha_lim hb_lim hua hva hub hvb\n\n"}
{"name":"intervalIntegral.integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\nlb lb' : Filter Real\nlt : Filter ι\na b : Real\nu v : ι → Real\ninst✝ : intervalIntegral.FTCFilter b lb lb'\nhab : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f lb' MeasureTheory.MeasureSpace.volume\nhf : Filter.Tendsto f (Min.min lb' (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\nhu : Filter.Tendsto u lt lb\nhv : Filter.Tendsto v lt lb\n⊢ Asymptotics.IsLittleO lt (fun t => HSub.hSub (HSub.hSub (intervalIntegral (fun x => f x) a (v t) MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => f x) a (u t) MeasureTheory.MeasureSpace.volume)) (HSMul.hSMul (HSub.hSub (v t) (u t)) c)) (HSub.hSub v u)","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability at filter in both endpoints.\n\nIf `f` is a measurable function integrable on `a..b`, `(lb, lb')` is an `intervalIntegral.FTCFilter`\npair around `b`, and `f` has a finite limit `c` almost surely at `lb'`, then\n`(∫ x in a..v, f x) - ∫ x in a..u, f x = (v - u) • c + o(‖v - u‖)` as `u` and `v` tend to `lb`.\n\nThis lemma could've been formulated using `HasStrictDerivAtFilter` if we had this definition. -/\ntheorem integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right\n    (hab : IntervalIntegrable f volume a b) (hmeas : StronglyMeasurableAtFilter f lb')\n    (hf : Tendsto f (lb' ⊓ ae volume) (𝓝 c)) (hu : Tendsto u lt lb) (hv : Tendsto v lt lb) :\n    (fun t => ((∫ x in a..v t, f x) - ∫ x in a..u t, f x) - (v t - u t) • c) =o[lt] (v - u) := by\n  simpa only [integral_const, smul_eq_mul, mul_one] using\n    measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right hab hmeas hf hu hv\n\n"}
{"name":"intervalIntegral.integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"ι : Type u_1\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\nla la' : Filter Real\nlt : Filter ι\na b : Real\nu v : ι → Real\ninst✝ : intervalIntegral.FTCFilter a la la'\nhab : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f la' MeasureTheory.MeasureSpace.volume\nhf : Filter.Tendsto f (Min.min la' (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\nhu : Filter.Tendsto u lt la\nhv : Filter.Tendsto v lt la\n⊢ Asymptotics.IsLittleO lt (fun t => HAdd.hAdd (HSub.hSub (intervalIntegral (fun x => f x) (v t) b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => f x) (u t) b MeasureTheory.MeasureSpace.volume)) (HSMul.hSMul (HSub.hSub (v t) (u t)) c)) (HSub.hSub v u)","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability at filter in both endpoints.\n\nIf `f` is a measurable function integrable on `a..b`, `(la, la')` is an `intervalIntegral.FTCFilter`\npair around `a`, and `f` has a finite limit `c` almost surely at `la'`, then\n`(∫ x in v..b, f x) - ∫ x in u..b, f x = -(v - u) • c + o(‖v - u‖)` as `u` and `v` tend to `la`.\n\nThis lemma could've been formulated using `HasStrictDerivAtFilter` if we had this definition. -/\ntheorem integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_left\n    (hab : IntervalIntegrable f volume a b) (hmeas : StronglyMeasurableAtFilter f la')\n    (hf : Tendsto f (la' ⊓ ae volume) (𝓝 c)) (hu : Tendsto u lt la) (hv : Tendsto v lt la) :\n    (fun t => ((∫ x in v t..b, f x) - ∫ x in u t..b, f x) + (v t - u t) • c) =o[lt] (v - u) := by\n  simpa only [integral_const, smul_eq_mul, mul_one] using\n    measure_integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_left hab hmeas hf hu hv\n\n"}
{"name":"intervalIntegral.integral_hasStrictFDerivAt_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nca cb : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhds a) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds ca)\nhb : Filter.Tendsto f (Min.min (nhds b) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds cb)\n⊢ HasStrictFDerivAt (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight cb) ((ContinuousLinearMap.fst Real Real Real).smulRight ca)) { fst := a, snd := b }","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in both endpoints.\n\nIf `f : ℝ → E` is integrable on `a..b` and `f x` has finite limits `ca` and `cb` almost surely as\n`x` tends to `a` and `b`, respectively, then\n`(u, v) ↦ ∫ x in u..v, f x` has derivative `(u, v) ↦ v • cb - u • ca` at `(a, b)`\nin the sense of strict differentiability. -/\ntheorem integral_hasStrictFDerivAt_of_tendsto_ae (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f (𝓝 a)) (hmeas_b : StronglyMeasurableAtFilter f (𝓝 b))\n    (ha : Tendsto f (𝓝 a ⊓ ae volume) (𝓝 ca)) (hb : Tendsto f (𝓝 b ⊓ ae volume) (𝓝 cb)) :\n    HasStrictFDerivAt (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x)\n      ((snd ℝ ℝ ℝ).smulRight cb - (fst ℝ ℝ ℝ).smulRight ca) (a, b) := by\n  have :=\n    integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae hf hmeas_a hmeas_b ha hb\n      (continuous_snd.fst.tendsto ((a, b), (a, b)))\n      (continuous_fst.fst.tendsto ((a, b), (a, b)))\n      (continuous_snd.snd.tendsto ((a, b), (a, b)))\n      (continuous_fst.snd.tendsto ((a, b), (a, b)))\n  refine .of_isLittleO <| (this.congr_left ?_).trans_isBigO ?_\n  · intro x; simp [sub_smul]\n  · exact isBigO_fst_prod.norm_left.add isBigO_snd_prod.norm_left\n\n"}
{"name":"intervalIntegral.integral_hasStrictFDerivAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nha : ContinuousAt f a\nhb : ContinuousAt f b\n⊢ HasStrictFDerivAt (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight (f b)) ((ContinuousLinearMap.fst Real Real Real).smulRight (f a))) { fst := a, snd := b }","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in both endpoints.\n\nIf `f : ℝ → E` is integrable on `a..b` and `f` is continuous at `a` and `b`, then\n`(u, v) ↦ ∫ x in u..v, f x` has derivative `(u, v) ↦ v • cb - u • ca` at `(a, b)` in the sense of\nstrict differentiability. -/\ntheorem integral_hasStrictFDerivAt (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f (𝓝 a)) (hmeas_b : StronglyMeasurableAtFilter f (𝓝 b))\n    (ha : ContinuousAt f a) (hb : ContinuousAt f b) :\n    HasStrictFDerivAt (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x)\n      ((snd ℝ ℝ ℝ).smulRight (f b) - (fst ℝ ℝ ℝ).smulRight (f a)) (a, b) :=\n  integral_hasStrictFDerivAt_of_tendsto_ae hf hmeas_a hmeas_b (ha.mono_left inf_le_left)\n    (hb.mono_left inf_le_left)\n\n"}
{"name":"intervalIntegral.integral_hasStrictDerivAt_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nhb : Filter.Tendsto f (Min.min (nhds b) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ HasStrictDerivAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) c b","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in the right endpoint.\n\nIf `f : ℝ → E` is integrable on `a..b` and `f x` has a finite limit `c` almost surely at `b`, then\n`u ↦ ∫ x in a..u, f x` has derivative `c` at `b` in the sense of strict differentiability. -/\ntheorem integral_hasStrictDerivAt_of_tendsto_ae_right (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 b)) (hb : Tendsto f (𝓝 b ⊓ ae volume) (𝓝 c)) :\n    HasStrictDerivAt (fun u => ∫ x in a..u, f x) c b :=\n  .of_isLittleO <|\n    integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right hf hmeas hb continuousAt_snd\n      continuousAt_fst\n\n"}
{"name":"intervalIntegral.integral_hasStrictDerivAt_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nhb : ContinuousAt f b\n⊢ HasStrictDerivAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) (f b) b","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in the right endpoint.\n\nIf `f : ℝ → E` is integrable on `a..b` and `f` is continuous at `b`, then `u ↦ ∫ x in a..u, f x` has\nderivative `f b` at `b` in the sense of strict differentiability. -/\ntheorem integral_hasStrictDerivAt_right (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 b)) (hb : ContinuousAt f b) :\n    HasStrictDerivAt (fun u => ∫ x in a..u, f x) (f b) b :=\n  integral_hasStrictDerivAt_of_tendsto_ae_right hf hmeas (hb.mono_left inf_le_left)\n\n"}
{"name":"intervalIntegral.integral_hasStrictDerivAt_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhds a) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ HasStrictDerivAt (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) (Neg.neg c) a","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in the left endpoint.\n\nIf `f : ℝ → E` is integrable on `a..b` and `f x` has a finite limit `c` almost surely at `a`, then\n`u ↦ ∫ x in u..b, f x` has derivative `-c` at `a` in the sense of strict differentiability. -/\ntheorem integral_hasStrictDerivAt_of_tendsto_ae_left (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 a)) (ha : Tendsto f (𝓝 a ⊓ ae volume) (𝓝 c)) :\n    HasStrictDerivAt (fun u => ∫ x in u..b, f x) (-c) a := by\n  simpa only [← integral_symm] using\n    (integral_hasStrictDerivAt_of_tendsto_ae_right hf.symm hmeas ha).neg\n\n"}
{"name":"intervalIntegral.integral_hasStrictDerivAt_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nha : ContinuousAt f a\n⊢ HasStrictDerivAt (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) (Neg.neg (f a)) a","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in the left endpoint.\n\nIf `f : ℝ → E` is integrable on `a..b` and `f` is continuous at `a`, then `u ↦ ∫ x in u..b, f x` has\nderivative `-f a` at `a` in the sense of strict differentiability. -/\ntheorem integral_hasStrictDerivAt_left (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 a)) (ha : ContinuousAt f a) :\n    HasStrictDerivAt (fun u => ∫ x in u..b, f x) (-f a) a := by\n  simpa only [← integral_symm] using (integral_hasStrictDerivAt_right hf.symm hmeas ha).neg\n\n"}
{"name":"Continuous.integral_hasStrictDerivAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nhf : Continuous f\na b : Real\n⊢ HasStrictDerivAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) (f b) b","decl":"/-- **Fundamental theorem of calculus-1**, strict differentiability in the right endpoint.\n\nIf `f : ℝ → E` is continuous, then `u ↦ ∫ x in a..u, f x` has derivative `f b` at `b` in the sense\nof strict differentiability. -/\ntheorem _root_.Continuous.integral_hasStrictDerivAt {f : ℝ → E} (hf : Continuous f) (a b : ℝ) :\n    HasStrictDerivAt (fun u => ∫ x : ℝ in a..u, f x) (f b) b :=\n  integral_hasStrictDerivAt_right (hf.intervalIntegrable _ _) (hf.stronglyMeasurableAtFilter _ _)\n    hf.continuousAt\n\n"}
{"name":"Continuous.deriv_integral","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nhf : Continuous f\na b : Real\n⊢ Eq (deriv (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) b) (f b)","decl":"/-- **Fundamental theorem of calculus-1**, derivative in the right endpoint.\n\nIf `f : ℝ → E` is continuous, then the derivative of `u ↦ ∫ x in a..u, f x` at `b` is `f b`. -/\ntheorem _root_.Continuous.deriv_integral (f : ℝ → E) (hf : Continuous f) (a b : ℝ) :\n    deriv (fun u => ∫ x : ℝ in a..u, f x) b = f b :=\n  (hf.integral_hasStrictDerivAt a b).hasDerivAt.deriv\n\n"}
{"name":"intervalIntegral.integral_hasFDerivAt_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nca cb : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhds a) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds ca)\nhb : Filter.Tendsto f (Min.min (nhds b) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds cb)\n⊢ HasFDerivAt (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight cb) ((ContinuousLinearMap.fst Real Real Real).smulRight ca)) { fst := a, snd := b }","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has\nfinite limits `ca` and `cb` almost surely as `x` tends to `a` and `b`, respectively, then\n`(u, v) ↦ ∫ x in u..v, f x` has derivative `(u, v) ↦ v • cb - u • ca` at `(a, b)`. -/\ntheorem integral_hasFDerivAt_of_tendsto_ae (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f (𝓝 a)) (hmeas_b : StronglyMeasurableAtFilter f (𝓝 b))\n    (ha : Tendsto f (𝓝 a ⊓ ae volume) (𝓝 ca)) (hb : Tendsto f (𝓝 b ⊓ ae volume) (𝓝 cb)) :\n    HasFDerivAt (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x)\n      ((snd ℝ ℝ ℝ).smulRight cb - (fst ℝ ℝ ℝ).smulRight ca) (a, b) :=\n  (integral_hasStrictFDerivAt_of_tendsto_ae hf hmeas_a hmeas_b ha hb).hasFDerivAt\n\n"}
{"name":"intervalIntegral.integral_hasFDerivAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nha : ContinuousAt f a\nhb : ContinuousAt f b\n⊢ HasFDerivAt (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight (f b)) ((ContinuousLinearMap.fst Real Real Real).smulRight (f a))) { fst := a, snd := b }","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `a` and `b`, then `(u, v) ↦ ∫ x in u..v, f x` has derivative `(u, v) ↦ v • cb - u •\nca` at `(a, b)`. -/\ntheorem integral_hasFDerivAt (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f (𝓝 a)) (hmeas_b : StronglyMeasurableAtFilter f (𝓝 b))\n    (ha : ContinuousAt f a) (hb : ContinuousAt f b) :\n    HasFDerivAt (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x)\n      ((snd ℝ ℝ ℝ).smulRight (f b) - (fst ℝ ℝ ℝ).smulRight (f a)) (a, b) :=\n  (integral_hasStrictFDerivAt hf hmeas_a hmeas_b ha hb).hasFDerivAt\n\n"}
{"name":"intervalIntegral.fderiv_integral_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nca cb : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhds a) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds ca)\nhb : Filter.Tendsto f (Min.min (nhds b) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds cb)\n⊢ Eq (fderiv Real (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) { fst := a, snd := b }) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight cb) ((ContinuousLinearMap.fst Real Real Real).smulRight ca))","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has\nfinite limits `ca` and `cb` almost surely as `x` tends to `a` and `b`, respectively, then `fderiv`\nderivative of `(u, v) ↦ ∫ x in u..v, f x` at `(a, b)` equals `(u, v) ↦ v • cb - u • ca`. -/\ntheorem fderiv_integral_of_tendsto_ae (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f (𝓝 a)) (hmeas_b : StronglyMeasurableAtFilter f (𝓝 b))\n    (ha : Tendsto f (𝓝 a ⊓ ae volume) (𝓝 ca)) (hb : Tendsto f (𝓝 b ⊓ ae volume) (𝓝 cb)) :\n    fderiv ℝ (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x) (a, b) =\n      (snd ℝ ℝ ℝ).smulRight cb - (fst ℝ ℝ ℝ).smulRight ca :=\n  (integral_hasFDerivAt_of_tendsto_ae hf hmeas_a hmeas_b ha hb).fderiv\n\n"}
{"name":"intervalIntegral.fderiv_integral","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nha : ContinuousAt f a\nhb : ContinuousAt f b\n⊢ Eq (fderiv Real (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) { fst := a, snd := b }) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight (f b)) ((ContinuousLinearMap.fst Real Real Real).smulRight (f a)))","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `a` and `b`, then `fderiv` derivative of `(u, v) ↦ ∫ x in u..v, f x` at `(a, b)`\nequals `(u, v) ↦ v • cb - u • ca`. -/\ntheorem fderiv_integral (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f (𝓝 a)) (hmeas_b : StronglyMeasurableAtFilter f (𝓝 b))\n    (ha : ContinuousAt f a) (hb : ContinuousAt f b) :\n    fderiv ℝ (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x) (a, b) =\n      (snd ℝ ℝ ℝ).smulRight (f b) - (fst ℝ ℝ ℝ).smulRight (f a) :=\n  (integral_hasFDerivAt hf hmeas_a hmeas_b ha hb).fderiv\n\n"}
{"name":"intervalIntegral.integral_hasDerivAt_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nhb : Filter.Tendsto f (Min.min (nhds b) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ HasDerivAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) c b","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\nfinite limit `c` almost surely at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `c` at `b`. -/\ntheorem integral_hasDerivAt_of_tendsto_ae_right (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 b)) (hb : Tendsto f (𝓝 b ⊓ ae volume) (𝓝 c)) :\n    HasDerivAt (fun u => ∫ x in a..u, f x) c b :=\n  (integral_hasStrictDerivAt_of_tendsto_ae_right hf hmeas hb).hasDerivAt\n\n"}
{"name":"intervalIntegral.integral_hasDerivAt_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nhb : ContinuousAt f b\n⊢ HasDerivAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) (f b) b","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `b`, then `u ↦ ∫ x in a..u, f x` has derivative `f b` at `b`. -/\ntheorem integral_hasDerivAt_right (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 b)) (hb : ContinuousAt f b) :\n    HasDerivAt (fun u => ∫ x in a..u, f x) (f b) b :=\n  (integral_hasStrictDerivAt_right hf hmeas hb).hasDerivAt\n\n"}
{"name":"intervalIntegral.deriv_integral_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nhb : Filter.Tendsto f (Min.min (nhds b) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ Eq (deriv (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) b) c","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` has a finite\nlimit `c` almost surely at `b`, then the derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `c`. -/\ntheorem deriv_integral_of_tendsto_ae_right (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 b)) (hb : Tendsto f (𝓝 b ⊓ ae volume) (𝓝 c)) :\n    deriv (fun u => ∫ x in a..u, f x) b = c :=\n  (integral_hasDerivAt_of_tendsto_ae_right hf hmeas hb).deriv\n\n"}
{"name":"intervalIntegral.deriv_integral_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds b) MeasureTheory.MeasureSpace.volume\nhb : ContinuousAt f b\n⊢ Eq (deriv (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) b) (f b)","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` is continuous\nat `b`, then the derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `f b`. -/\ntheorem deriv_integral_right (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 b)) (hb : ContinuousAt f b) :\n    deriv (fun u => ∫ x in a..u, f x) b = f b :=\n  (integral_hasDerivAt_right hf hmeas hb).deriv\n\n"}
{"name":"intervalIntegral.integral_hasDerivAt_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhds a) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ HasDerivAt (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) (Neg.neg c) a","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f x` has a\nfinite limit `c` almost surely at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-c` at `a`. -/\ntheorem integral_hasDerivAt_of_tendsto_ae_left (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 a)) (ha : Tendsto f (𝓝 a ⊓ ae volume) (𝓝 c)) :\n    HasDerivAt (fun u => ∫ x in u..b, f x) (-c) a :=\n  (integral_hasStrictDerivAt_of_tendsto_ae_left hf hmeas ha).hasDerivAt\n\n"}
{"name":"intervalIntegral.integral_hasDerivAt_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nha : ContinuousAt f a\n⊢ HasDerivAt (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) (Neg.neg (f a)) a","decl":"/-- **Fundamental theorem of calculus-1**: if `f : ℝ → E` is integrable on `a..b` and `f` is\ncontinuous at `a`, then `u ↦ ∫ x in u..b, f x` has derivative `-f a` at `a`. -/\ntheorem integral_hasDerivAt_left (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 a)) (ha : ContinuousAt f a) :\n    HasDerivAt (fun u => ∫ x in u..b, f x) (-f a) a :=\n  (integral_hasStrictDerivAt_left hf hmeas ha).hasDerivAt\n\n"}
{"name":"intervalIntegral.deriv_integral_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhb : Filter.Tendsto f (Min.min (nhds a) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ Eq (deriv (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) a) (Neg.neg c)","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` has a finite\nlimit `c` almost surely at `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-c`. -/\ntheorem deriv_integral_of_tendsto_ae_left (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 a)) (hb : Tendsto f (𝓝 a ⊓ ae volume) (𝓝 c)) :\n    deriv (fun u => ∫ x in u..b, f x) a = -c :=\n  (integral_hasDerivAt_of_tendsto_ae_left hf hmeas hb).deriv\n\n"}
{"name":"intervalIntegral.deriv_integral_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas : StronglyMeasurableAtFilter f (nhds a) MeasureTheory.MeasureSpace.volume\nhb : ContinuousAt f a\n⊢ Eq (deriv (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) a) (Neg.neg (f a))","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f` is continuous\nat `a`, then the derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. -/\ntheorem deriv_integral_left (hf : IntervalIntegrable f volume a b)\n    (hmeas : StronglyMeasurableAtFilter f (𝓝 a)) (hb : ContinuousAt f a) :\n    deriv (fun u => ∫ x in u..b, f x) a = -f a :=\n  (integral_hasDerivAt_left hf hmeas hb).deriv\n\n"}
{"name":"intervalIntegral.integral_hasFDerivWithinAt_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf : Real → E\nca cb : E\nla lb : Filter Real\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝¹ : intervalIntegral.FTCFilter a (nhdsWithin a s) la\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b t) lb\nhmeas_a : StronglyMeasurableAtFilter f la MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f lb MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min la (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds ca)\nhb : Filter.Tendsto f (Min.min lb (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds cb)\n⊢ HasFDerivWithinAt (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight cb) ((ContinuousLinearMap.fst Real Real Real).smulRight ca)) (SProd.sprod s t) { fst := a, snd := b }","decl":"/-- Let `f` be a measurable function integrable on `a..b`. The function `(u, v) ↦ ∫ x in u..v, f x`\nhas derivative `(u, v) ↦ v • cb - u • ca` within `s × t` at `(a, b)`, where\n`s ∈ {Iic a, {a}, Ici a, univ}` and `t ∈ {Iic b, {b}, Ici b, univ}` provided that `f` tends to `ca`\nand `cb` almost surely at the filters `la` and `lb` from the following table.\n\n| `s`     | `la`     | `t`     | `lb`     |\n| ------- | ----     | ---     | ----     |\n| `Iic a` | `𝓝[≤] a` | `Iic b` | `𝓝[≤] b` |\n| `Ici a` | `𝓝[>] a` | `Ici b` | `𝓝[>] b` |\n| `{a}`   | `⊥`      | `{b}`   | `⊥`      |\n| `univ`  | `𝓝 a`    | `univ`  | `𝓝 b`    |\n-/\ntheorem integral_hasFDerivWithinAt_of_tendsto_ae (hf : IntervalIntegrable f volume a b)\n    {s t : Set ℝ} [FTCFilter a (𝓝[s] a) la] [FTCFilter b (𝓝[t] b) lb]\n    (hmeas_a : StronglyMeasurableAtFilter f la) (hmeas_b : StronglyMeasurableAtFilter f lb)\n    (ha : Tendsto f (la ⊓ ae volume) (𝓝 ca)) (hb : Tendsto f (lb ⊓ ae volume) (𝓝 cb)) :\n    HasFDerivWithinAt (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x)\n      ((snd ℝ ℝ ℝ).smulRight cb - (fst ℝ ℝ ℝ).smulRight ca) (s ×ˢ t) (a, b) := by\n  rw [HasFDerivWithinAt, nhdsWithin_prod_eq]\n  have :=\n    integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae hf hmeas_a hmeas_b ha hb\n      (tendsto_const_pure.mono_right FTCFilter.pure_le : Tendsto _ _ (𝓝[s] a)) tendsto_fst\n      (tendsto_const_pure.mono_right FTCFilter.pure_le : Tendsto _ _ (𝓝[t] b)) tendsto_snd\n  refine .of_isLittleO <| (this.congr_left ?_).trans_isBigO ?_\n  · intro x; simp [sub_smul]\n  · exact isBigO_fst_prod.norm_left.add isBigO_snd_prod.norm_left\n\n"}
{"name":"intervalIntegral.integral_hasFDerivWithinAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf : Real → E\nla lb : Filter Real\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f la MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f lb MeasureTheory.MeasureSpace.volume\ns t : Set Real\ninst✝¹ : intervalIntegral.FTCFilter a (nhdsWithin a s) la\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b t) lb\nha : Filter.Tendsto f la (nhds (f a))\nhb : Filter.Tendsto f lb (nhds (f b))\n⊢ HasFDerivWithinAt (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight (f b)) ((ContinuousLinearMap.fst Real Real Real).smulRight (f a))) (SProd.sprod s t) { fst := a, snd := b }","decl":"/-- Let `f` be a measurable function integrable on `a..b`. The function `(u, v) ↦ ∫ x in u..v, f x`\nhas derivative `(u, v) ↦ v • f b - u • f a` within `s × t` at `(a, b)`, where\n`s ∈ {Iic a, {a}, Ici a, univ}` and `t ∈ {Iic b, {b}, Ici b, univ}` provided that `f` tends to\n`f a` and `f b` at the filters `la` and `lb` from the following table. In most cases this assumption\nis definitionally equal `ContinuousAt f _` or `ContinuousWithinAt f _ _`.\n\n| `s`     | `la`     | `t`     | `lb`     |\n| ------- | ----     | ---     | ----     |\n| `Iic a` | `𝓝[≤] a` | `Iic b` | `𝓝[≤] b` |\n| `Ici a` | `𝓝[>] a` | `Ici b` | `𝓝[>] b` |\n| `{a}`   | `⊥`      | `{b}`   | `⊥`      |\n| `univ`  | `𝓝 a`    | `univ`  | `𝓝 b`    |\n-/\ntheorem integral_hasFDerivWithinAt (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f la) (hmeas_b : StronglyMeasurableAtFilter f lb)\n    {s t : Set ℝ} [FTCFilter a (𝓝[s] a) la] [FTCFilter b (𝓝[t] b) lb] (ha : Tendsto f la (𝓝 <| f a))\n    (hb : Tendsto f lb (𝓝 <| f b)) :\n    HasFDerivWithinAt (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x)\n      ((snd ℝ ℝ ℝ).smulRight (f b) - (fst ℝ ℝ ℝ).smulRight (f a)) (s ×ˢ t) (a, b) :=\n  integral_hasFDerivWithinAt_of_tendsto_ae hf hmeas_a hmeas_b (ha.mono_left inf_le_left)\n    (hb.mono_left inf_le_left)\n\n"}
{"name":"intervalIntegral.fderivWithin_integral_of_tendsto_ae","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf : Real → E\nca cb : E\nla lb : Filter Real\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\nhmeas_a : StronglyMeasurableAtFilter f la MeasureTheory.MeasureSpace.volume\nhmeas_b : StronglyMeasurableAtFilter f lb MeasureTheory.MeasureSpace.volume\ns t : Set Real\ninst✝¹ : intervalIntegral.FTCFilter a (nhdsWithin a s) la\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b t) lb\nha : Filter.Tendsto f (Min.min la (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds ca)\nhb : Filter.Tendsto f (Min.min lb (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds cb)\nhs : autoParam (UniqueDiffWithinAt Real s a) _auto✝\nht : autoParam (UniqueDiffWithinAt Real t b) _auto✝\n⊢ Eq (fderivWithin Real (fun p => intervalIntegral (fun x => f x) p.1 p.2 MeasureTheory.MeasureSpace.volume) (SProd.sprod s t) { fst := a, snd := b }) (HSub.hSub ((ContinuousLinearMap.snd Real Real Real).smulRight cb) ((ContinuousLinearMap.fst Real Real Real).smulRight ca))","decl":"/-- Let `f` be a measurable function integrable on `a..b`. Choose `s ∈ {Iic a, Ici a, univ}`\nand `t ∈ {Iic b, Ici b, univ}`. Suppose that `f` tends to `ca` and `cb` almost surely at the filters\n`la` and `lb` from the table below. Then `fderivWithin ℝ (fun p ↦ ∫ x in p.1..p.2, f x) (s ×ˢ t)`\nis equal to `(u, v) ↦ u • cb - v • ca`.\n\n| `s`     | `la`     | `t`     | `lb`     |\n| ------- | ----     | ---     | ----     |\n| `Iic a` | `𝓝[≤] a` | `Iic b` | `𝓝[≤] b` |\n| `Ici a` | `𝓝[>] a` | `Ici b` | `𝓝[>] b` |\n| `{a}`   | `⊥`      | `{b}`   | `⊥`      |\n| `univ`  | `𝓝 a`    | `univ`  | `𝓝 b`    |\n-/\ntheorem fderivWithin_integral_of_tendsto_ae (hf : IntervalIntegrable f volume a b)\n    (hmeas_a : StronglyMeasurableAtFilter f la) (hmeas_b : StronglyMeasurableAtFilter f lb)\n    {s t : Set ℝ} [FTCFilter a (𝓝[s] a) la] [FTCFilter b (𝓝[t] b) lb]\n    (ha : Tendsto f (la ⊓ ae volume) (𝓝 ca)) (hb : Tendsto f (lb ⊓ ae volume) (𝓝 cb))\n    (hs : UniqueDiffWithinAt ℝ s a := by uniqueDiffWithinAt_Ici_Iic_univ)\n    (ht : UniqueDiffWithinAt ℝ t b := by uniqueDiffWithinAt_Ici_Iic_univ) :\n    fderivWithin ℝ (fun p : ℝ × ℝ => ∫ x in p.1..p.2, f x) (s ×ˢ t) (a, b) =\n      (snd ℝ ℝ ℝ).smulRight cb - (fst ℝ ℝ ℝ).smulRight ca :=\n  (integral_hasFDerivWithinAt_of_tendsto_ae hf hmeas_a hmeas_b ha hb).fderivWithin <| hs.prod ht\n\n"}
{"name":"intervalIntegral.integral_hasDerivWithinAt_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin b t) MeasureTheory.MeasureSpace.volume\nhb : Filter.Tendsto f (Min.min (nhdsWithin b t) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ HasDerivWithinAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) c s b","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `b` from the right or from the left,\nthen `u ↦ ∫ x in a..u, f x` has right (resp., left) derivative `c` at `b`. -/\ntheorem integral_hasDerivWithinAt_of_tendsto_ae_right (hf : IntervalIntegrable f volume a b)\n    {s t : Set ℝ} [FTCFilter b (𝓝[s] b) (𝓝[t] b)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] b))\n    (hb : Tendsto f (𝓝[t] b ⊓ ae volume) (𝓝 c)) :\n    HasDerivWithinAt (fun u => ∫ x in a..u, f x) c s b :=\n  .of_isLittleO <| integral_sub_integral_sub_linear_isLittleO_of_tendsto_ae_right hf hmeas hb\n    (tendsto_const_pure.mono_right FTCFilter.pure_le) tendsto_id\n\n"}
{"name":"intervalIntegral.integral_hasDerivWithinAt_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin b t) MeasureTheory.MeasureSpace.volume\nhb : ContinuousWithinAt f t b\n⊢ HasDerivWithinAt (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) (f b) s b","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\nfrom the left or from the right at `b`, then `u ↦ ∫ x in a..u, f x` has left (resp., right)\nderivative `f b` at `b`. -/\ntheorem integral_hasDerivWithinAt_right (hf : IntervalIntegrable f volume a b) {s t : Set ℝ}\n    [FTCFilter b (𝓝[s] b) (𝓝[t] b)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] b))\n    (hb : ContinuousWithinAt f t b) : HasDerivWithinAt (fun u => ∫ x in a..u, f x) (f b) s b :=\n  integral_hasDerivWithinAt_of_tendsto_ae_right hf hmeas (hb.mono_left inf_le_left)\n\n"}
{"name":"intervalIntegral.derivWithin_integral_of_tendsto_ae_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin b t) MeasureTheory.MeasureSpace.volume\nhb : Filter.Tendsto f (Min.min (nhdsWithin b t) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\nhs : autoParam (UniqueDiffWithinAt Real s b) _auto✝\n⊢ Eq (derivWithin (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) s b) c","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `b` from the right or from the left, then the right\n(resp., left) derivative of `u ↦ ∫ x in a..u, f x` at `b` equals `c`. -/\ntheorem derivWithin_integral_of_tendsto_ae_right (hf : IntervalIntegrable f volume a b)\n    {s t : Set ℝ} [FTCFilter b (𝓝[s] b) (𝓝[t] b)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] b))\n    (hb : Tendsto f (𝓝[t] b ⊓ ae volume) (𝓝 c))\n    (hs : UniqueDiffWithinAt ℝ s b := by uniqueDiffWithinAt_Ici_Iic_univ) :\n    derivWithin (fun u => ∫ x in a..u, f x) s b = c :=\n  (integral_hasDerivWithinAt_of_tendsto_ae_right hf hmeas hb).derivWithin hs\n\n"}
{"name":"intervalIntegral.derivWithin_integral_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter b (nhdsWithin b s) (nhdsWithin b t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin b t) MeasureTheory.MeasureSpace.volume\nhb : ContinuousWithinAt f t b\nhs : autoParam (UniqueDiffWithinAt Real s b) _auto✝\n⊢ Eq (derivWithin (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) s b) (f b)","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\non the right or on the left at `b`, then the right (resp., left) derivative of\n`u ↦ ∫ x in a..u, f x` at `b` equals `f b`. -/\ntheorem derivWithin_integral_right (hf : IntervalIntegrable f volume a b) {s t : Set ℝ}\n    [FTCFilter b (𝓝[s] b) (𝓝[t] b)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] b))\n    (hb : ContinuousWithinAt f t b)\n    (hs : UniqueDiffWithinAt ℝ s b := by uniqueDiffWithinAt_Ici_Iic_univ) :\n    derivWithin (fun u => ∫ x in a..u, f x) s b = f b :=\n  (integral_hasDerivWithinAt_right hf hmeas hb).derivWithin hs\n\n"}
{"name":"intervalIntegral.integral_hasDerivWithinAt_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin a t) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhdsWithin a t) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\n⊢ HasDerivWithinAt (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) (Neg.neg c) s a","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `a` from the right or from the left,\nthen `u ↦ ∫ x in u..b, f x` has right (resp., left) derivative `-c` at `a`. -/\ntheorem integral_hasDerivWithinAt_of_tendsto_ae_left (hf : IntervalIntegrable f volume a b)\n    {s t : Set ℝ} [FTCFilter a (𝓝[s] a) (𝓝[t] a)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] a))\n    (ha : Tendsto f (𝓝[t] a ⊓ ae volume) (𝓝 c)) :\n    HasDerivWithinAt (fun u => ∫ x in u..b, f x) (-c) s a := by\n  simp only [integral_symm b]\n  exact (integral_hasDerivWithinAt_of_tendsto_ae_right hf.symm hmeas ha).neg\n\n"}
{"name":"intervalIntegral.integral_hasDerivWithinAt_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin a t) MeasureTheory.MeasureSpace.volume\nha : ContinuousWithinAt f t a\n⊢ HasDerivWithinAt (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) (Neg.neg (f a)) s a","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\nfrom the left or from the right at `a`, then `u ↦ ∫ x in u..b, f x` has left (resp., right)\nderivative `-f a` at `a`. -/\ntheorem integral_hasDerivWithinAt_left (hf : IntervalIntegrable f volume a b) {s t : Set ℝ}\n    [FTCFilter a (𝓝[s] a) (𝓝[t] a)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] a))\n    (ha : ContinuousWithinAt f t a) : HasDerivWithinAt (fun u => ∫ x in u..b, f x) (-f a) s a :=\n  integral_hasDerivWithinAt_of_tendsto_ae_left hf hmeas (ha.mono_left inf_le_left)\n\n"}
{"name":"intervalIntegral.derivWithin_integral_of_tendsto_ae_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\nc : E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin a t) MeasureTheory.MeasureSpace.volume\nha : Filter.Tendsto f (Min.min (nhdsWithin a t) (MeasureTheory.ae MeasureTheory.MeasureSpace.volume)) (nhds c)\nhs : autoParam (UniqueDiffWithinAt Real s a) _auto✝\n⊢ Eq (derivWithin (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) s a) (Neg.neg c)","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` has a finite\nlimit `c` almost surely as `x` tends to `a` from the right or from the left, then the right\n(resp., left) derivative of `u ↦ ∫ x in u..b, f x` at `a` equals `-c`. -/\ntheorem derivWithin_integral_of_tendsto_ae_left (hf : IntervalIntegrable f volume a b) {s t : Set ℝ}\n    [FTCFilter a (𝓝[s] a) (𝓝[t] a)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] a))\n    (ha : Tendsto f (𝓝[t] a ⊓ ae volume) (𝓝 c))\n    (hs : UniqueDiffWithinAt ℝ s a := by uniqueDiffWithinAt_Ici_Iic_univ) :\n    derivWithin (fun u => ∫ x in u..b, f x) s a = -c :=\n  (integral_hasDerivWithinAt_of_tendsto_ae_left hf hmeas ha).derivWithin hs\n\n"}
{"name":"intervalIntegral.derivWithin_integral_left","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Real → E\na b : Real\nhf : IntervalIntegrable f MeasureTheory.MeasureSpace.volume a b\ns t : Set Real\ninst✝ : intervalIntegral.FTCFilter a (nhdsWithin a s) (nhdsWithin a t)\nhmeas : StronglyMeasurableAtFilter f (nhdsWithin a t) MeasureTheory.MeasureSpace.volume\nha : ContinuousWithinAt f t a\nhs : autoParam (UniqueDiffWithinAt Real s a) _auto✝\n⊢ Eq (derivWithin (fun u => intervalIntegral (fun x => f x) u b MeasureTheory.MeasureSpace.volume) s a) (Neg.neg (f a))","decl":"/-- Fundamental theorem of calculus: if `f : ℝ → E` is integrable on `a..b` and `f x` is continuous\non the right or on the left at `a`, then the right (resp., left) derivative of\n`u ↦ ∫ x in u..b, f x` at `a` equals `-f a`. -/\ntheorem derivWithin_integral_left (hf : IntervalIntegrable f volume a b) {s t : Set ℝ}\n    [FTCFilter a (𝓝[s] a) (𝓝[t] a)] (hmeas : StronglyMeasurableAtFilter f (𝓝[t] a))\n    (ha : ContinuousWithinAt f t a)\n    (hs : UniqueDiffWithinAt ℝ s a := by uniqueDiffWithinAt_Ici_Iic_univ) :\n    derivWithin (fun u => ∫ x in u..b, f x) s a = -f a :=\n  (integral_hasDerivWithinAt_left hf hmeas ha).derivWithin hs\n\n"}
{"name":"intervalIntegral.differentiableOn_integral_of_continuous","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : Real → E\na : Real\ns : Set Real\nhintg : ∀ (x : Real), Membership.mem s x → IntervalIntegrable f MeasureTheory.MeasureSpace.volume a x\nhcont : Continuous f\n⊢ DifferentiableOn Real (fun u => intervalIntegral (fun x => f x) a u MeasureTheory.MeasureSpace.volume) s","decl":"/-- The integral of a continuous function is differentiable on a real set `s`. -/\ntheorem differentiableOn_integral_of_continuous {s : Set ℝ}\n    (hintg : ∀ x ∈ s, IntervalIntegrable f volume a x) (hcont : Continuous f) :\n    DifferentiableOn ℝ (fun u => ∫ x in a..u, f x) s := fun y hy =>\n  (integral_hasDerivAt_right (hintg y hy) hcont.aestronglyMeasurable.stronglyMeasurableAtFilter\n        hcont.continuousAt).differentiableAt.differentiableWithinAt\n\n"}
{"name":"intervalIntegral.sub_le_integral_of_hasDeriv_right_of_le_Ico","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g φ : Real → Real\na b : Real\nhab : LE.le a b\nhcont : ContinuousOn g (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ico a b) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\nφint : MeasureTheory.IntegrableOn φ (Set.Icc a b) MeasureTheory.MeasureSpace.volume\nhφg : ∀ (x : Real), Membership.mem (Set.Ico a b) x → LE.le (g' x) (φ x)\n⊢ LE.le (HSub.hSub (g b) (g a)) (intervalIntegral (fun y => φ y) a b MeasureTheory.MeasureSpace.volume)","decl":"/-- Hard part of FTC-2 for integrable derivatives, real-valued functions: one has\n`g b - g a ≤ ∫ y in a..b, g' y` when `g'` is integrable.\nAuxiliary lemma in the proof of `integral_eq_sub_of_hasDeriv_right_of_le`.\nWe give the slightly more general version that `g b - g a ≤ ∫ y in a..b, φ y` when `g' ≤ φ` and\n`φ` is integrable (even if `g'` is not known to be integrable).\nVersion assuming that `g` is differentiable on `[a, b)`. -/\ntheorem sub_le_integral_of_hasDeriv_right_of_le_Ico (hab : a ≤ b)\n    (hcont : ContinuousOn g (Icc a b)) (hderiv : ∀ x ∈ Ico a b, HasDerivWithinAt g (g' x) (Ioi x) x)\n    (φint : IntegrableOn φ (Icc a b)) (hφg : ∀ x ∈ Ico a b, g' x ≤ φ x) :\n    g b - g a ≤ ∫ y in a..b, φ y := by\n  refine le_of_forall_pos_le_add fun ε εpos => ?_\n  -- Bound from above `g'` by a lower-semicontinuous function `G'`.\n  rcases exists_lt_lowerSemicontinuous_integral_lt φ φint εpos with\n    ⟨G', f_lt_G', G'cont, G'int, G'lt_top, hG'⟩\n  -- we will show by \"induction\" that `g t - g a ≤ ∫ u in a..t, G' u` for all `t ∈ [a, b]`.\n  set s := {t | g t - g a ≤ ∫ u in a..t, (G' u).toReal} ∩ Icc a b\n  -- the set `s` of points where this property holds is closed.\n  have s_closed : IsClosed s := by\n    have : ContinuousOn (fun t => (g t - g a, ∫ u in a..t, (G' u).toReal)) (Icc a b) := by\n      rw [← uIcc_of_le hab] at G'int hcont ⊢\n      exact (hcont.sub continuousOn_const).prod (continuousOn_primitive_interval G'int)\n    simp only [s, inter_comm]\n    exact this.preimage_isClosed_of_isClosed isClosed_Icc OrderClosedTopology.isClosed_le'\n  have main : Icc a b ⊆ {t | g t - g a ≤ ∫ u in a..t, (G' u).toReal} := by\n    -- to show that the set `s` is all `[a, b]`, it suffices to show that any point `t` in `s`\n    -- with `t < b` admits another point in `s` slightly to its right\n    -- (this is a sort of real induction).\n    refine s_closed.Icc_subset_of_forall_exists_gt\n      (by simp only [integral_same, mem_setOf_eq, sub_self, le_rfl]) fun t ht v t_lt_v => ?_\n    obtain ⟨y, g'_lt_y', y_lt_G'⟩ : ∃ y : ℝ, (g' t : EReal) < y ∧ (y : EReal) < G' t :=\n      EReal.lt_iff_exists_real_btwn.1 ((EReal.coe_le_coe_iff.2 (hφg t ht.2)).trans_lt (f_lt_G' t))\n    -- bound from below the increase of `∫ x in a..u, G' x` on the right of `t`, using the lower\n    -- semicontinuity of `G'`.\n    have I1 : ∀ᶠ u in 𝓝[>] t, (u - t) * y ≤ ∫ w in t..u, (G' w).toReal := by\n      have B : ∀ᶠ u in 𝓝 t, (y : EReal) < G' u := G'cont.lowerSemicontinuousAt _ _ y_lt_G'\n      rcases mem_nhds_iff_exists_Ioo_subset.1 B with ⟨m, M, ⟨hm, hM⟩, H⟩\n      have : Ioo t (min M b) ∈ 𝓝[>] t := Ioo_mem_nhdsGT (lt_min hM ht.right.right)\n      filter_upwards [this] with u hu\n      have I : Icc t u ⊆ Icc a b := Icc_subset_Icc ht.2.1 (hu.2.le.trans (min_le_right _ _))\n      calc\n        (u - t) * y = ∫ _ in Icc t u, y := by\n          simp only [hu.left.le, MeasureTheory.integral_const, Algebra.id.smul_eq_mul, sub_nonneg,\n            MeasurableSet.univ, Real.volume_Icc, Measure.restrict_apply, univ_inter,\n            ENNReal.toReal_ofReal]\n        _ ≤ ∫ w in t..u, (G' w).toReal := by\n          rw [intervalIntegral.integral_of_le hu.1.le, ← integral_Icc_eq_integral_Ioc]\n          apply setIntegral_mono_ae_restrict\n          · simp only [integrableOn_const, Real.volume_Icc, ENNReal.ofReal_lt_top, or_true]\n          · exact IntegrableOn.mono_set G'int I\n          · have C1 : ∀ᵐ x : ℝ ∂volume.restrict (Icc t u), G' x < ∞ :=\n              ae_mono (Measure.restrict_mono I le_rfl) G'lt_top\n            have C2 : ∀ᵐ x : ℝ ∂volume.restrict (Icc t u), x ∈ Icc t u :=\n              ae_restrict_mem measurableSet_Icc\n            filter_upwards [C1, C2] with x G'x hx\n            apply EReal.coe_le_coe_iff.1\n            have : x ∈ Ioo m M := by\n              simp only [hm.trans_le hx.left,\n                (hx.right.trans_lt hu.right).trans_le (min_le_left M b), mem_Ioo, and_self_iff]\n            refine (H this).out.le.trans_eq ?_\n            exact (EReal.coe_toReal G'x.ne (f_lt_G' x).ne_bot).symm\n    -- bound from above the increase of `g u - g a` on the right of `t`, using the derivative at `t`\n    have I2 : ∀ᶠ u in 𝓝[>] t, g u - g t ≤ (u - t) * y := by\n      have g'_lt_y : g' t < y := EReal.coe_lt_coe_iff.1 g'_lt_y'\n      filter_upwards [(hderiv t ⟨ht.2.1, ht.2.2⟩).limsup_slope_le' (not_mem_Ioi.2 le_rfl) g'_lt_y,\n        self_mem_nhdsWithin] with u hu t_lt_u\n      have := mul_le_mul_of_nonneg_left hu.le (sub_pos.2 t_lt_u.out).le\n      rwa [← smul_eq_mul, sub_smul_slope] at this\n    -- combine the previous two bounds to show that `g u - g a` increases less quickly than\n    -- `∫ x in a..u, G' x`.\n    have I3 : ∀ᶠ u in 𝓝[>] t, g u - g t ≤ ∫ w in t..u, (G' w).toReal := by\n      filter_upwards [I1, I2] with u hu1 hu2 using hu2.trans hu1\n    have I4 : ∀ᶠ u in 𝓝[>] t, u ∈ Ioc t (min v b) := Ioc_mem_nhdsGT <| lt_min t_lt_v ht.2.2\n    -- choose a point `x` slightly to the right of `t` which satisfies the above bound\n    rcases (I3.and I4).exists with ⟨x, hx, h'x⟩\n    -- we check that it belongs to `s`, essentially by construction\n    refine ⟨x, ?_, Ioc_subset_Ioc le_rfl (min_le_left _ _) h'x⟩\n    calc\n      g x - g a = g t - g a + (g x - g t) := by abel\n      _ ≤ (∫ w in a..t, (G' w).toReal) + ∫ w in t..x, (G' w).toReal := add_le_add ht.1 hx\n      _ = ∫ w in a..x, (G' w).toReal := by\n        apply integral_add_adjacent_intervals\n        · rw [intervalIntegrable_iff_integrableOn_Ioc_of_le ht.2.1]\n          exact IntegrableOn.mono_set G'int\n            (Ioc_subset_Icc_self.trans (Icc_subset_Icc le_rfl ht.2.2.le))\n        · rw [intervalIntegrable_iff_integrableOn_Ioc_of_le h'x.1.le]\n          apply IntegrableOn.mono_set G'int\n          exact Ioc_subset_Icc_self.trans (Icc_subset_Icc ht.2.1 (h'x.2.trans (min_le_right _ _)))\n  -- now that we know that `s` contains `[a, b]`, we get the desired result by applying this to `b`.\n  calc\n    g b - g a ≤ ∫ y in a..b, (G' y).toReal := main (right_mem_Icc.2 hab)\n    _ ≤ (∫ y in a..b, φ y) + ε := by\n      convert hG'.le <;>\n        · rw [intervalIntegral.integral_of_le hab]\n          simp only [integral_Icc_eq_integral_Ioc', Real.volume_singleton]\n\n-- Porting note: Lean was adding `lb`/`lb'` to the arguments of this theorem, so I enclosed FTC-1\n-- into a `section`\n"}
{"name":"intervalIntegral.sub_le_integral_of_hasDeriv_right_of_le","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g φ : Real → Real\na b : Real\nhab : LE.le a b\nhcont : ContinuousOn g (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\nφint : MeasureTheory.IntegrableOn φ (Set.Icc a b) MeasureTheory.MeasureSpace.volume\nhφg : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → LE.le (g' x) (φ x)\n⊢ LE.le (HSub.hSub (g b) (g a)) (intervalIntegral (fun y => φ y) a b MeasureTheory.MeasureSpace.volume)","decl":"/-- Hard part of FTC-2 for integrable derivatives, real-valued functions: one has\n`g b - g a ≤ ∫ y in a..b, g' y` when `g'` is integrable.\nAuxiliary lemma in the proof of `integral_eq_sub_of_hasDeriv_right_of_le`.\nWe give the slightly more general version that `g b - g a ≤ ∫ y in a..b, φ y` when `g' ≤ φ` and\n`φ` is integrable (even if `g'` is not known to be integrable).\nVersion assuming that `g` is differentiable on `(a, b)`. -/\ntheorem sub_le_integral_of_hasDeriv_right_of_le (hab : a ≤ b) (hcont : ContinuousOn g (Icc a b))\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivWithinAt g (g' x) (Ioi x) x) (φint : IntegrableOn φ (Icc a b))\n    (hφg : ∀ x ∈ Ioo a b, g' x ≤ φ x) : g b - g a ≤ ∫ y in a..b, φ y := by\n  -- This follows from the version on a closed-open interval (applied to `[t, b)` for `t` close to\n  -- `a`) and a continuity argument.\n  obtain rfl | a_lt_b := hab.eq_or_lt\n  · simp\n  set s := {t | g b - g t ≤ ∫ u in t..b, φ u} ∩ Icc a b\n  have s_closed : IsClosed s := by\n    have : ContinuousOn (fun t => (g b - g t, ∫ u in t..b, φ u)) (Icc a b) := by\n      rw [← uIcc_of_le hab] at hcont φint ⊢\n      exact (continuousOn_const.sub hcont).prod (continuousOn_primitive_interval_left φint)\n    simp only [s, inter_comm]\n    exact this.preimage_isClosed_of_isClosed isClosed_Icc isClosed_le_prod\n  have A : closure (Ioc a b) ⊆ s := by\n    apply s_closed.closure_subset_iff.2\n    intro t ht\n    refine ⟨?_, ⟨ht.1.le, ht.2⟩⟩\n    exact\n      sub_le_integral_of_hasDeriv_right_of_le_Ico ht.2 (hcont.mono (Icc_subset_Icc ht.1.le le_rfl))\n        (fun x hx => hderiv x ⟨ht.1.trans_le hx.1, hx.2⟩)\n        (φint.mono_set (Icc_subset_Icc ht.1.le le_rfl)) fun x hx => hφg x ⟨ht.1.trans_le hx.1, hx.2⟩\n  rw [closure_Ioc a_lt_b.ne] at A\n  exact (A (left_mem_Icc.2 hab)).1\n\n"}
{"name":"intervalIntegral.integral_le_sub_of_hasDeriv_right_of_le","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g φ : Real → Real\na b : Real\nhab : LE.le a b\nhcont : ContinuousOn g (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\nφint : MeasureTheory.IntegrableOn φ (Set.Icc a b) MeasureTheory.MeasureSpace.volume\nhφg : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → LE.le (φ x) (g' x)\n⊢ LE.le (intervalIntegral (fun y => φ y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (g b) (g a))","decl":"/-- Auxiliary lemma in the proof of `integral_eq_sub_of_hasDeriv_right_of_le`. -/\ntheorem integral_le_sub_of_hasDeriv_right_of_le (hab : a ≤ b) (hcont : ContinuousOn g (Icc a b))\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivWithinAt g (g' x) (Ioi x) x) (φint : IntegrableOn φ (Icc a b))\n    (hφg : ∀ x ∈ Ioo a b, φ x ≤ g' x) : (∫ y in a..b, φ y) ≤ g b - g a := by\n  rw [← neg_le_neg_iff]\n  convert sub_le_integral_of_hasDeriv_right_of_le hab hcont.neg (fun x hx => (hderiv x hx).neg)\n    φint.neg fun x hx => neg_le_neg (hφg x hx) using 1\n  · abel\n  · simp only [← integral_neg]; rfl\n\n"}
{"name":"intervalIntegral.integral_eq_sub_of_hasDeriv_right_of_le_real","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g : Real → Real\na b : Real\nhab : LE.le a b\nhcont : ContinuousOn g (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\ng'int : MeasureTheory.IntegrableOn g' (Set.Icc a b) MeasureTheory.MeasureSpace.volume\n⊢ Eq (intervalIntegral (fun y => g' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (g b) (g a))","decl":"/-- Auxiliary lemma in the proof of `integral_eq_sub_of_hasDeriv_right_of_le`: real version -/\ntheorem integral_eq_sub_of_hasDeriv_right_of_le_real (hab : a ≤ b)\n    (hcont : ContinuousOn g (Icc a b)) (hderiv : ∀ x ∈ Ioo a b, HasDerivWithinAt g (g' x) (Ioi x) x)\n    (g'int : IntegrableOn g' (Icc a b)) : ∫ y in a..b, g' y = g b - g a :=\n  le_antisymm (integral_le_sub_of_hasDeriv_right_of_le hab hcont hderiv g'int fun _ _ => le_rfl)\n    (sub_le_integral_of_hasDeriv_right_of_le hab hcont hderiv g'int fun _ _ => le_rfl)\n\n"}
{"name":"intervalIntegral.integral_eq_sub_of_hasDeriv_right_of_le","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → E\nhab : LE.le a b\nhcont : ContinuousOn f (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nf'int : IntervalIntegrable f' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun y => f' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (f b) (f a))","decl":"/-- **Fundamental theorem of calculus-2**: If `f : ℝ → E` is continuous on `[a, b]` (where `a ≤ b`)\n  and has a right derivative at `f' x` for all `x` in `(a, b)`, and `f'` is integrable on `[a, b]`,\n  then `∫ y in a..b, f' y` equals `f b - f a`. -/\ntheorem integral_eq_sub_of_hasDeriv_right_of_le (hab : a ≤ b) (hcont : ContinuousOn f (Icc a b))\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivWithinAt f (f' x) (Ioi x) x)\n    (f'int : IntervalIntegrable f' volume a b) : ∫ y in a..b, f' y = f b - f a := by\n  refine (NormedSpace.eq_iff_forall_dual_eq ℝ).2 fun g => ?_\n  rw [← g.intervalIntegral_comp_comm f'int, g.map_sub]\n  exact integral_eq_sub_of_hasDeriv_right_of_le_real hab (g.continuous.comp_continuousOn hcont)\n    (fun x hx => g.hasFDerivAt.comp_hasDerivWithinAt x (hderiv x hx))\n    (g.integrable_comp ((intervalIntegrable_iff_integrableOn_Icc_of_le hab).1 f'int))\n\n"}
{"name":"intervalIntegral.integral_eq_sub_of_hasDeriv_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → E\nhcont : ContinuousOn f (Set.uIcc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhint : IntervalIntegrable f' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun y => f' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (f b) (f a))","decl":"/-- Fundamental theorem of calculus-2: If `f : ℝ → E` is continuous on `[a, b]` and\n  has a right derivative at `f' x` for all `x` in `[a, b)`, and `f'` is integrable on `[a, b]` then\n  `∫ y in a..b, f' y` equals `f b - f a`. -/\ntheorem integral_eq_sub_of_hasDeriv_right (hcont : ContinuousOn f (uIcc a b))\n    (hderiv : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hint : IntervalIntegrable f' volume a b) : ∫ y in a..b, f' y = f b - f a := by\n  rcases le_total a b with hab | hab\n  · simp only [uIcc_of_le, min_eq_left, max_eq_right, hab] at hcont hderiv hint\n    apply integral_eq_sub_of_hasDeriv_right_of_le hab hcont hderiv hint\n  · simp only [uIcc_of_ge, min_eq_right, max_eq_left, hab] at hcont hderiv\n    rw [integral_symm, integral_eq_sub_of_hasDeriv_right_of_le hab hcont hderiv hint.symm, neg_sub]\n\n"}
{"name":"intervalIntegral.integral_eq_sub_of_hasDerivAt_of_le","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → E\nhab : LE.le a b\nhcont : ContinuousOn f (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivAt f (f' x) x\nhint : IntervalIntegrable f' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun y => f' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (f b) (f a))","decl":"/-- Fundamental theorem of calculus-2: If `f : ℝ → E` is continuous on `[a, b]` (where `a ≤ b`) and\n  has a derivative at `f' x` for all `x` in `(a, b)`, and `f'` is integrable on `[a, b]`, then\n  `∫ y in a..b, f' y` equals `f b - f a`. -/\ntheorem integral_eq_sub_of_hasDerivAt_of_le (hab : a ≤ b) (hcont : ContinuousOn f (Icc a b))\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivAt f (f' x) x) (hint : IntervalIntegrable f' volume a b) :\n    ∫ y in a..b, f' y = f b - f a :=\n  integral_eq_sub_of_hasDeriv_right_of_le hab hcont (fun x hx => (hderiv x hx).hasDerivWithinAt)\n    hint\n\n"}
{"name":"intervalIntegral.integral_eq_sub_of_hasDerivAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → E\nhderiv : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nhint : IntervalIntegrable f' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun y => f' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (f b) (f a))","decl":"/-- Fundamental theorem of calculus-2: If `f : ℝ → E` has a derivative at `f' x` for all `x` in\n  `[a, b]` and `f'` is integrable on `[a, b]`, then `∫ y in a..b, f' y` equals `f b - f a`. -/\ntheorem integral_eq_sub_of_hasDerivAt (hderiv : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x)\n    (hint : IntervalIntegrable f' volume a b) : ∫ y in a..b, f' y = f b - f a :=\n  integral_eq_sub_of_hasDeriv_right (HasDerivAt.continuousOn hderiv)\n    (fun _x hx => (hderiv _ (mem_Icc_of_Ioo hx)).hasDerivWithinAt) hint\n\n"}
{"name":"intervalIntegral.integral_eq_sub_of_hasDerivAt_of_tendsto","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → E\nhab : LT.lt a b\nfa fb : E\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivAt f (f' x) x\nhint : IntervalIntegrable f' MeasureTheory.MeasureSpace.volume a b\nha : Filter.Tendsto f (nhdsWithin a (Set.Ioi a)) (nhds fa)\nhb : Filter.Tendsto f (nhdsWithin b (Set.Iio b)) (nhds fb)\n⊢ Eq (intervalIntegral (fun y => f' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub fb fa)","decl":"theorem integral_eq_sub_of_hasDerivAt_of_tendsto (hab : a < b) {fa fb}\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivAt f (f' x) x) (hint : IntervalIntegrable f' volume a b)\n    (ha : Tendsto f (𝓝[>] a) (𝓝 fa)) (hb : Tendsto f (𝓝[<] b) (𝓝 fb)) :\n    ∫ y in a..b, f' y = fb - fa := by\n  set F : ℝ → E := update (update f a fa) b fb\n  have Fderiv : ∀ x ∈ Ioo a b, HasDerivAt F (f' x) x := by\n    refine fun x hx => (hderiv x hx).congr_of_eventuallyEq ?_\n    filter_upwards [Ioo_mem_nhds hx.1 hx.2] with _ hy\n    unfold F\n    rw [update_of_ne hy.2.ne, update_of_ne hy.1.ne']\n  have hcont : ContinuousOn F (Icc a b) := by\n    rw [continuousOn_update_iff, continuousOn_update_iff, Icc_diff_right, Ico_diff_left]\n    refine ⟨⟨fun z hz => (hderiv z hz).continuousAt.continuousWithinAt, ?_⟩, ?_⟩\n    · exact fun _ => ha.mono_left (nhdsWithin_mono _ Ioo_subset_Ioi_self)\n    · rintro -\n      refine (hb.congr' ?_).mono_left (nhdsWithin_mono _ Ico_subset_Iio_self)\n      filter_upwards [Ioo_mem_nhdsLT hab] with _ hz using (update_of_ne hz.1.ne' _ _).symm\n  simpa [F, hab.ne, hab.ne'] using integral_eq_sub_of_hasDerivAt_of_le hab.le hcont Fderiv hint\n\n"}
{"name":"intervalIntegral.integral_deriv_eq_sub","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf : Real → E\nhderiv : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → DifferentiableAt Real f x\nhint : IntervalIntegrable (deriv f) MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun y => deriv f y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (f b) (f a))","decl":"/-- Fundamental theorem of calculus-2: If `f : ℝ → E` is differentiable at every `x` in `[a, b]` and\n  its derivative is integrable on `[a, b]`, then `∫ y in a..b, deriv f y` equals `f b - f a`. -/\ntheorem integral_deriv_eq_sub (hderiv : ∀ x ∈ [[a, b]], DifferentiableAt ℝ f x)\n    (hint : IntervalIntegrable (deriv f) volume a b) : ∫ y in a..b, deriv f y = f b - f a :=\n  integral_eq_sub_of_hasDerivAt (fun x hx => (hderiv x hx).hasDerivAt) hint\n\n"}
{"name":"intervalIntegral.integral_deriv_eq_sub'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf' f : Real → E\nhderiv : Eq (deriv f) f'\nhdiff : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → DifferentiableAt Real f x\nhcont : ContinuousOn f' (Set.uIcc a b)\n⊢ Eq (intervalIntegral (fun y => f' y) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (f b) (f a))","decl":"theorem integral_deriv_eq_sub' (f) (hderiv : deriv f = f')\n    (hdiff : ∀ x ∈ uIcc a b, DifferentiableAt ℝ f x) (hcont : ContinuousOn f' (uIcc a b)) :\n    ∫ y in a..b, f' y = f b - f a := by\n  rw [← hderiv, integral_deriv_eq_sub hdiff]\n  rw [hderiv]\n  exact hcont.intervalIntegrable\n\n"}
{"name":"intervalIntegral.integral_unitInterval_deriv_eq_sub","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"𝕜 : Type u_2\nE : Type u_3\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : CompleteSpace E\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : IsScalarTower Real 𝕜 E\nf f' : 𝕜 → E\nz₀ z₁ : 𝕜\nhcont : ContinuousOn (fun t => f' (HAdd.hAdd z₀ (HSMul.hSMul t z₁))) (Set.Icc 0 1)\nhderiv : ∀ (t : Real), Membership.mem (Set.Icc 0 1) t → HasDerivAt f (f' (HAdd.hAdd z₀ (HSMul.hSMul t z₁))) (HAdd.hAdd z₀ (HSMul.hSMul t z₁))\n⊢ Eq (HSMul.hSMul z₁ (intervalIntegral (fun t => f' (HAdd.hAdd z₀ (HSMul.hSMul t z₁))) 0 1 MeasureTheory.MeasureSpace.volume)) (HSub.hSub (f (HAdd.hAdd z₀ z₁)) (f z₀))","decl":"/-- A variant of `intervalIntegral.integral_deriv_eq_sub`, the Fundamental theorem\nof calculus, involving integrating over the unit interval. -/\nlemma integral_unitInterval_deriv_eq_sub [RCLike 𝕜] [NormedSpace 𝕜 E] [IsScalarTower ℝ 𝕜 E]\n    {f f' : 𝕜 → E} {z₀ z₁ : 𝕜}\n    (hcont : ContinuousOn (fun t : ℝ ↦ f' (z₀ + t • z₁)) (Set.Icc 0 1))\n    (hderiv : ∀ t ∈ Set.Icc (0 : ℝ) 1, HasDerivAt f (f' (z₀ + t • z₁)) (z₀ + t • z₁)) :\n    z₁ • ∫ t in (0 : ℝ)..1, f' (z₀ + t • z₁) = f (z₀ + z₁) - f z₀ := by\n  let γ (t : ℝ) : 𝕜 := z₀ + t • z₁\n  have hint : IntervalIntegrable (z₁ • (f' ∘ γ)) MeasureTheory.volume 0 1 :=\n    (ContinuousOn.const_smul hcont z₁).intervalIntegrable_of_Icc zero_le_one\n  have hderiv' : ∀ t ∈ Set.uIcc (0 : ℝ) 1, HasDerivAt (f ∘ γ) (z₁ • (f' ∘ γ) t) t := by\n    intro t ht\n    refine (hderiv t <| (Set.uIcc_of_le (α := ℝ) zero_le_one).symm ▸ ht).scomp t ?_\n    have : HasDerivAt (fun t : ℝ ↦ t • z₁) z₁ t := by\n      convert (hasDerivAt_id t).smul_const (F := 𝕜) _ using 1\n      simp only [one_smul]\n    exact this.const_add z₀\n  convert (integral_eq_sub_of_hasDerivAt hderiv' hint) using 1\n  · simp_rw [← integral_smul, Function.comp_apply, γ]\n  · simp only [γ, Function.comp_apply, one_smul, zero_smul, add_zero]\n\n"}
{"name":"intervalIntegral.integrableOn_deriv_right_of_nonneg","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g : Real → Real\na b : Real\nhcont : ContinuousOn g (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\ng'pos : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → LE.le 0 (g' x)\n⊢ MeasureTheory.IntegrableOn g' (Set.Ioc a b) MeasureTheory.MeasureSpace.volume","decl":"/-- When the right derivative of a function is nonnegative, then it is automatically integrable. -/\ntheorem integrableOn_deriv_right_of_nonneg (hcont : ContinuousOn g (Icc a b))\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivWithinAt g (g' x) (Ioi x) x)\n    (g'pos : ∀ x ∈ Ioo a b, 0 ≤ g' x) : IntegrableOn g' (Ioc a b) := by\n  by_cases hab : a < b; swap\n  · simp [Ioc_eq_empty hab]\n  rw [integrableOn_Ioc_iff_integrableOn_Ioo]\n  have meas_g' : AEMeasurable g' (volume.restrict (Ioo a b)) := by\n    apply (aemeasurable_derivWithin_Ioi g _).congr\n    refine (ae_restrict_mem measurableSet_Ioo).mono fun x hx => ?_\n    exact (hderiv x hx).derivWithin (uniqueDiffWithinAt_Ioi _)\n  suffices H : (∫⁻ x in Ioo a b, ‖g' x‖₊) ≤ ENNReal.ofReal (g b - g a) from\n    ⟨meas_g'.aestronglyMeasurable, H.trans_lt ENNReal.ofReal_lt_top⟩\n  by_contra! H\n  obtain ⟨f, fle, fint, hf⟩ :\n    ∃ f : SimpleFunc ℝ ℝ≥0,\n      (∀ x, f x ≤ ‖g' x‖₊) ∧\n        (∫⁻ x : ℝ in Ioo a b, f x) < ∞ ∧ ENNReal.ofReal (g b - g a) < ∫⁻ x : ℝ in Ioo a b, f x :=\n    exists_lt_lintegral_simpleFunc_of_lt_lintegral H\n  let F : ℝ → ℝ := (↑) ∘ f\n  have intF : IntegrableOn F (Ioo a b) := by\n    refine ⟨f.measurable.coe_nnreal_real.aestronglyMeasurable, ?_⟩\n    simpa only [F, hasFiniteIntegral_iff_enorm, comp_apply, NNReal.enorm_eq] using fint\n  have A : ∫⁻ x : ℝ in Ioo a b, f x = ENNReal.ofReal (∫ x in Ioo a b, F x) :=\n    lintegral_coe_eq_integral _ intF\n  rw [A] at hf\n  have B : (∫ x : ℝ in Ioo a b, F x) ≤ g b - g a := by\n    rw [← integral_Ioc_eq_integral_Ioo, ← intervalIntegral.integral_of_le hab.le]\n    refine integral_le_sub_of_hasDeriv_right_of_le hab.le hcont hderiv ?_ fun x hx => ?_\n    · rwa [integrableOn_Icc_iff_integrableOn_Ioo]\n    · convert NNReal.coe_le_coe.2 (fle x)\n      simp only [Real.norm_of_nonneg (g'pos x hx), coe_nnnorm]\n  exact lt_irrefl _ (hf.trans_le (ENNReal.ofReal_le_ofReal B))\n\n"}
{"name":"intervalIntegral.integrableOn_deriv_of_nonneg","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g : Real → Real\na b : Real\nhcont : ContinuousOn g (Set.Icc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → HasDerivAt g (g' x) x\ng'pos : ∀ (x : Real), Membership.mem (Set.Ioo a b) x → LE.le 0 (g' x)\n⊢ MeasureTheory.IntegrableOn g' (Set.Ioc a b) MeasureTheory.MeasureSpace.volume","decl":"/-- When the derivative of a function is nonnegative, then it is automatically integrable,\nIoc version. -/\ntheorem integrableOn_deriv_of_nonneg (hcont : ContinuousOn g (Icc a b))\n    (hderiv : ∀ x ∈ Ioo a b, HasDerivAt g (g' x) x) (g'pos : ∀ x ∈ Ioo a b, 0 ≤ g' x) :\n    IntegrableOn g' (Ioc a b) :=\n  integrableOn_deriv_right_of_nonneg hcont (fun x hx => (hderiv x hx).hasDerivWithinAt) g'pos\n\n"}
{"name":"intervalIntegral.intervalIntegrable_deriv_of_nonneg","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"g' g : Real → Real\na b : Real\nhcont : ContinuousOn g (Set.uIcc a b)\nhderiv : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivAt g (g' x) x\nhpos : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → LE.le 0 (g' x)\n⊢ IntervalIntegrable g' MeasureTheory.MeasureSpace.volume a b","decl":"/-- When the derivative of a function is nonnegative, then it is automatically integrable,\ninterval version. -/\ntheorem intervalIntegrable_deriv_of_nonneg (hcont : ContinuousOn g (uIcc a b))\n    (hderiv : ∀ x ∈ Ioo (min a b) (max a b), HasDerivAt g (g' x) x)\n    (hpos : ∀ x ∈ Ioo (min a b) (max a b), 0 ≤ g' x) : IntervalIntegrable g' volume a b := by\n  rcases le_total a b with hab | hab\n  · simp only [uIcc_of_le, min_eq_left, max_eq_right, hab, IntervalIntegrable, hab,\n      Ioc_eq_empty_of_le, integrableOn_empty, and_true] at hcont hderiv hpos ⊢\n    exact integrableOn_deriv_of_nonneg hcont hderiv hpos\n  · simp only [uIcc_of_ge, min_eq_right, max_eq_left, hab, IntervalIntegrable, Ioc_eq_empty_of_le,\n      integrableOn_empty, true_and] at hcont hderiv hpos ⊢\n    exact integrableOn_deriv_of_nonneg hcont hderiv hpos\n\n"}
{"name":"intervalIntegral.integral_deriv_mul_eq_sub_of_hasDeriv_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ContinuousOn u (Set.uIcc a b)\nhv : ContinuousOn v (Set.uIcc a b)\nhuu' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt u (u' x) (Set.Ioi x) x\nhvv' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt v (v' x) (Set.Ioi x) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HAdd.hAdd (HMul.hMul (u' x) (v x)) (HMul.hMul (u x) (v' x))) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a)))","decl":"/-- The integral of the derivative of a product of two maps.\nFor improper integrals, see `MeasureTheory.integral_deriv_mul_eq_sub`,\n`MeasureTheory.integral_Ioi_deriv_mul_eq_sub`, and `MeasureTheory.integral_Iic_deriv_mul_eq_sub`. -/\ntheorem integral_deriv_mul_eq_sub_of_hasDeriv_right {u v u' v' : ℝ → A}\n    (hu : ContinuousOn u [[a, b]])\n    (hv : ContinuousOn v [[a, b]])\n    (huu' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt u (u' x) (Ioi x) x)\n    (hvv' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt v (v' x) (Ioi x) x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u' x * v x + u x * v' x = u b * v b - u a * v a := by\n  apply integral_eq_sub_of_hasDeriv_right (hu.mul hv) fun x hx ↦ (huu' x hx).mul (hvv' x hx)\n  exact (hu'.mul_continuousOn hv).add (hv'.continuousOn_mul hu)\n\n"}
{"name":"intervalIntegral.integral_deriv_mul_eq_sub_of_hasDerivAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ContinuousOn u (Set.uIcc a b)\nhv : ContinuousOn v (Set.uIcc a b)\nhuu' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivAt u (u' x) x\nhvv' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivAt v (v' x) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HAdd.hAdd (HMul.hMul (u' x) (v x)) (HMul.hMul (u x) (v' x))) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a)))","decl":"/-- The integral of the derivative of a product of two maps.\nSpecial case of `integral_deriv_mul_eq_sub_of_hasDeriv_right` where the functions have a\ntwo-sided derivative in the interior of the interval. -/\ntheorem integral_deriv_mul_eq_sub_of_hasDerivAt {u v u' v' : ℝ → A}\n    (hu : ContinuousOn u [[a, b]])\n    (hv : ContinuousOn v [[a, b]])\n    (huu' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivAt u (u' x) x)\n    (hvv' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivAt v (v' x) x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u' x * v x + u x * v' x = u b * v b - u a * v a :=\n  integral_deriv_mul_eq_sub_of_hasDeriv_right hu hv\n    (fun x hx ↦ huu' x hx |>.hasDerivWithinAt) (fun x hx ↦ hvv' x hx |>.hasDerivWithinAt) hu' hv'\n\n"}
{"name":"intervalIntegral.integral_deriv_mul_eq_sub_of_hasDerivWithinAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivWithinAt u (u' x) (Set.uIcc a b) x\nhv : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivWithinAt v (v' x) (Set.uIcc a b) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HAdd.hAdd (HMul.hMul (u' x) (v x)) (HMul.hMul (u x) (v' x))) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a)))","decl":"/-- The integral of the derivative of a product of two maps.\nSpecial case of `integral_deriv_mul_eq_sub_of_hasDeriv_right` where the functions have a\n  one-sided derivative at the endpoints. -/\ntheorem integral_deriv_mul_eq_sub_of_hasDerivWithinAt {u v u' v' : ℝ → A}\n    (hu : ∀ x ∈ [[a, b]], HasDerivWithinAt u (u' x) [[a, b]] x)\n    (hv : ∀ x ∈ [[a, b]], HasDerivWithinAt v (v' x) [[a, b]] x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u' x * v x + u x * v' x = u b * v b - u a * v a :=\n  integral_deriv_mul_eq_sub_of_hasDerivAt\n    (fun x hx ↦ (hu x hx).continuousWithinAt)\n    (fun x hx ↦ (hv x hx).continuousWithinAt)\n    (fun x hx ↦ hu x (mem_Icc_of_Ioo hx) |>.hasDerivAt (Icc_mem_nhds hx.1 hx.2))\n    (fun x hx ↦ hv x (mem_Icc_of_Ioo hx) |>.hasDerivAt (Icc_mem_nhds hx.1 hx.2))\n    hu' hv'\n\n"}
{"name":"intervalIntegral.integral_deriv_mul_eq_sub","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt u (u' x) x\nhv : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt v (v' x) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HAdd.hAdd (HMul.hMul (u' x) (v x)) (HMul.hMul (u x) (v' x))) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a)))","decl":"/-- Special case of `integral_deriv_mul_eq_sub_of_hasDeriv_right` where the functions have a\n  derivative at the endpoints. -/\ntheorem integral_deriv_mul_eq_sub {u v u' v' : ℝ → A}\n    (hu : ∀ x ∈ [[a, b]], HasDerivAt u (u' x) x)\n    (hv : ∀ x ∈ [[a, b]], HasDerivAt v (v' x) x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u' x * v x + u x * v' x = u b * v b - u a * v a :=\n  integral_deriv_mul_eq_sub_of_hasDerivWithinAt\n    (fun x hx ↦ hu x hx |>.hasDerivWithinAt) (fun x hx ↦ hv x hx |>.hasDerivWithinAt) hu' hv'\n\n"}
{"name":"intervalIntegral.integral_mul_deriv_eq_deriv_mul_of_hasDeriv_right","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ContinuousOn u (Set.uIcc a b)\nhv : ContinuousOn v (Set.uIcc a b)\nhuu' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt u (u' x) (Set.Ioi x) x\nhvv' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt v (v' x) (Set.Ioi x) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (u x) (v' x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a))) (intervalIntegral (fun x => HMul.hMul (u' x) (v x)) a b MeasureTheory.MeasureSpace.volume))","decl":"/-- **Integration by parts**. For improper integrals, see\n`MeasureTheory.integral_mul_deriv_eq_deriv_mul`,\n`MeasureTheory.integral_Ioi_mul_deriv_eq_deriv_mul`,\nand `MeasureTheory.integral_Iic_mul_deriv_eq_deriv_mul`. -/\ntheorem integral_mul_deriv_eq_deriv_mul_of_hasDeriv_right {u v u' v' : ℝ → A}\n    (hu : ContinuousOn u [[a, b]])\n    (hv : ContinuousOn v [[a, b]])\n    (huu' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt u (u' x) (Ioi x) x)\n    (hvv' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt v (v' x) (Ioi x) x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u x * v' x = u b * v b - u a * v a - ∫ x in a..b, u' x * v x := by\n  rw [← integral_deriv_mul_eq_sub_of_hasDeriv_right hu hv huu' hvv' hu' hv', ← integral_sub]\n  · simp_rw [add_sub_cancel_left]\n  · exact (hu'.mul_continuousOn hv).add (hv'.continuousOn_mul hu)\n  · exact hu'.mul_continuousOn hv\n\n"}
{"name":"intervalIntegral.integral_mul_deriv_eq_deriv_mul_of_hasDerivAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ContinuousOn u (Set.uIcc a b)\nhv : ContinuousOn v (Set.uIcc a b)\nhuu' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivAt u (u' x) x\nhvv' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivAt v (v' x) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (u x) (v' x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a))) (intervalIntegral (fun x => HMul.hMul (u' x) (v x)) a b MeasureTheory.MeasureSpace.volume))","decl":"/-- **Integration by parts**. Special case of `integral_mul_deriv_eq_deriv_mul_of_hasDeriv_right`\nwhere the functions have a two-sided derivative in the interior of the interval. -/\ntheorem integral_mul_deriv_eq_deriv_mul_of_hasDerivAt {u v u' v' : ℝ → A}\n    (hu : ContinuousOn u [[a, b]])\n    (hv : ContinuousOn v [[a, b]])\n    (huu' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivAt u (u' x) x)\n    (hvv' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivAt v (v' x) x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u x * v' x = u b * v b - u a * v a - ∫ x in a..b, u' x * v x :=\n  integral_mul_deriv_eq_deriv_mul_of_hasDeriv_right hu hv\n        (fun x hx ↦ (huu' x hx).hasDerivWithinAt) (fun x hx ↦ (hvv' x hx).hasDerivWithinAt) hu' hv'\n\n"}
{"name":"intervalIntegral.integral_mul_deriv_eq_deriv_mul_of_hasDerivWithinAt","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivWithinAt u (u' x) (Set.uIcc a b) x\nhv : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivWithinAt v (v' x) (Set.uIcc a b) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (u x) (v' x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a))) (intervalIntegral (fun x => HMul.hMul (u' x) (v x)) a b MeasureTheory.MeasureSpace.volume))","decl":"/-- **Integration by parts**. Special case of\n`intervalIntegrable.integral_mul_deriv_eq_deriv_mul_of_hasDeriv_right`\nwhere the functions have a one-sided derivative at the endpoints. -/\ntheorem integral_mul_deriv_eq_deriv_mul_of_hasDerivWithinAt {u v u' v' : ℝ → A}\n    (hu : ∀ x ∈ [[a, b]], HasDerivWithinAt u (u' x) [[a, b]] x)\n    (hv : ∀ x ∈ [[a, b]], HasDerivWithinAt v (v' x) [[a, b]] x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u x * v' x = u b * v b - u a * v a - ∫ x in a..b, u' x * v x :=\n  integral_mul_deriv_eq_deriv_mul_of_hasDerivAt\n    (fun x hx ↦ (hu x hx).continuousWithinAt)\n    (fun x hx ↦ (hv x hx).continuousWithinAt)\n    (fun x hx ↦ hu x (mem_Icc_of_Ioo hx) |>.hasDerivAt (Icc_mem_nhds hx.1 hx.2))\n    (fun x hx ↦ hv x (mem_Icc_of_Ioo hx) |>.hasDerivAt (Icc_mem_nhds hx.1 hx.2))\n    hu' hv'\n\n"}
{"name":"intervalIntegral.integral_mul_deriv_eq_deriv_mul","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"A : Type u_4\na b : Real\ninst✝² : NormedRing A\ninst✝¹ : NormedAlgebra Real A\ninst✝ : CompleteSpace A\nu v u' v' : Real → A\nhu : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt u (u' x) x\nhv : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt v (v' x) x\nhu' : IntervalIntegrable u' MeasureTheory.MeasureSpace.volume a b\nhv' : IntervalIntegrable v' MeasureTheory.MeasureSpace.volume a b\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (u x) (v' x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (HSub.hSub (HMul.hMul (u b) (v b)) (HMul.hMul (u a) (v a))) (intervalIntegral (fun x => HMul.hMul (u' x) (v x)) a b MeasureTheory.MeasureSpace.volume))","decl":"/-- **Integration by parts**. Special case of\n`intervalIntegrable.integral_mul_deriv_eq_deriv_mul_of_hasDeriv_right`\nwhere the functions have a derivative also at the endpoints.\nFor improper integrals, see\n`MeasureTheory.integral_mul_deriv_eq_deriv_mul`,\n`MeasureTheory.integral_Ioi_mul_deriv_eq_deriv_mul`,\nand `MeasureTheory.integral_Iic_mul_deriv_eq_deriv_mul`. -/\ntheorem integral_mul_deriv_eq_deriv_mul {u v u' v' : ℝ → A}\n    (hu : ∀ x ∈ [[a, b]], HasDerivAt u (u' x) x)\n    (hv : ∀ x ∈ [[a, b]], HasDerivAt v (v' x) x)\n    (hu' : IntervalIntegrable u' volume a b)\n    (hv' : IntervalIntegrable v' volume a b) :\n    ∫ x in a..b, u x * v' x = u b * v b - u a * v a - ∫ x in a..b, u' x * v x :=\n  integral_mul_deriv_eq_deriv_mul_of_hasDerivWithinAt\n    (fun x hx ↦ (hu x hx).hasDerivWithinAt) (fun x hx ↦ (hv x hx).hasDerivWithinAt) hu' hv'\n\n"}
{"name":"intervalIntegral.integral_comp_smul_deriv'''","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace Real G\nf f' : Real → Real\ng : Real → G\nhf : ContinuousOn f (Set.uIcc a b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhg_cont : ContinuousOn g (Set.image f (Set.Ioo (Min.min a b) (Max.max a b)))\nhg1 : MeasureTheory.IntegrableOn g (Set.image f (Set.uIcc a b)) MeasureTheory.MeasureSpace.volume\nhg2 : MeasureTheory.IntegrableOn (fun x => HSMul.hSMul (f' x) (Function.comp g f x)) (Set.uIcc a b) MeasureTheory.MeasureSpace.volume\n⊢ Eq (intervalIntegral (fun x => HSMul.hSMul (f' x) (Function.comp g f x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun u => g u) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables, general form. If `f` is continuous on `[a, b]` and has\nright-derivative `f'` in `(a, b)`, `g` is continuous on `f '' (a, b)` and integrable on\n`f '' [a, b]`, and `f' x • (g ∘ f) x` is integrable on `[a, b]`,\nthen we can substitute `u = f x` to get `∫ x in a..b, f' x • (g ∘ f) x = ∫ u in f a..f b, g u`.\n-/\ntheorem integral_comp_smul_deriv''' {f f' : ℝ → ℝ} {g : ℝ → G} (hf : ContinuousOn f [[a, b]])\n    (hff' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hg_cont : ContinuousOn g (f '' Ioo (min a b) (max a b))) (hg1 : IntegrableOn g (f '' [[a, b]]))\n    (hg2 : IntegrableOn (fun x => f' x • (g ∘ f) x) [[a, b]]) :\n    (∫ x in a..b, f' x • (g ∘ f) x) = ∫ u in f a..f b, g u := by\n  by_cases hG : CompleteSpace G; swap\n  · simp [intervalIntegral, integral, hG]\n  rw [hf.image_uIcc, ← intervalIntegrable_iff'] at hg1\n  have h_cont : ContinuousOn (fun u => ∫ t in f a..f u, g t) [[a, b]] := by\n    refine (continuousOn_primitive_interval' hg1 ?_).comp hf ?_\n    · rw [← hf.image_uIcc]; exact mem_image_of_mem f left_mem_uIcc\n    · rw [← hf.image_uIcc]; exact mapsTo_image _ _\n  have h_der :\n    ∀ x ∈ Ioo (min a b) (max a b),\n      HasDerivWithinAt (fun u => ∫ t in f a..f u, g t) (f' x • (g ∘ f) x) (Ioi x) x := by\n    intro x hx\n    obtain ⟨c, hc⟩ := nonempty_Ioo.mpr hx.1\n    obtain ⟨d, hd⟩ := nonempty_Ioo.mpr hx.2\n    have cdsub : [[c, d]] ⊆ Ioo (min a b) (max a b) := by\n      rw [uIcc_of_le (hc.2.trans hd.1).le]\n      exact Icc_subset_Ioo hc.1 hd.2\n    replace hg_cont := hg_cont.mono (image_subset f cdsub)\n    let J := [[sInf (f '' [[c, d]]), sSup (f '' [[c, d]])]]\n    have hJ : f '' [[c, d]] = J := (hf.mono (cdsub.trans Ioo_subset_Icc_self)).image_uIcc\n    rw [hJ] at hg_cont\n    have h2x : f x ∈ J := by rw [← hJ]; exact mem_image_of_mem _ (mem_uIcc_of_le hc.2.le hd.1.le)\n    have h2g : IntervalIntegrable g volume (f a) (f x) := by\n      refine hg1.mono_set ?_\n      rw [← hf.image_uIcc]\n      exact hf.surjOn_uIcc left_mem_uIcc (Ioo_subset_Icc_self hx)\n    have h3g : StronglyMeasurableAtFilter g (𝓝[J] f x) :=\n      hg_cont.stronglyMeasurableAtFilter_nhdsWithin measurableSet_Icc (f x)\n    haveI : Fact (f x ∈ J) := ⟨h2x⟩\n    have : HasDerivWithinAt (fun u => ∫ x in f a..u, g x) (g (f x)) J (f x) :=\n      intervalIntegral.integral_hasDerivWithinAt_right h2g h3g (hg_cont (f x) h2x)\n    refine (this.scomp x ((hff' x hx).Ioo_of_Ioi hd.1) ?_).Ioi_of_Ioo hd.1\n    rw [← hJ]\n    refine (mapsTo_image _ _).mono ?_ Subset.rfl\n    exact Ioo_subset_Icc_self.trans ((Icc_subset_Icc_left hc.2.le).trans Icc_subset_uIcc)\n  rw [← intervalIntegrable_iff'] at hg2\n  simp_rw [integral_eq_sub_of_hasDeriv_right h_cont h_der hg2, integral_same, sub_zero]\n\n"}
{"name":"intervalIntegral.integral_comp_smul_deriv''","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace Real G\nf f' : Real → Real\ng : Real → G\nhf : ContinuousOn f (Set.uIcc a b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhf' : ContinuousOn f' (Set.uIcc a b)\nhg : ContinuousOn g (Set.image f (Set.uIcc a b))\n⊢ Eq (intervalIntegral (fun x => HSMul.hSMul (f' x) (Function.comp g f x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun u => g u) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables for continuous integrands. If `f` is continuous on `[a, b]` and has\ncontinuous right-derivative `f'` in `(a, b)`, and `g` is continuous on `f '' [a, b]` then we can\nsubstitute `u = f x` to get `∫ x in a..b, f' x • (g ∘ f) x = ∫ u in f a..f b, g u`.\n-/\ntheorem integral_comp_smul_deriv'' {f f' : ℝ → ℝ} {g : ℝ → G} (hf : ContinuousOn f [[a, b]])\n    (hff' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hf' : ContinuousOn f' [[a, b]]) (hg : ContinuousOn g (f '' [[a, b]])) :\n    (∫ x in a..b, f' x • (g ∘ f) x) = ∫ u in f a..f b, g u := by\n  refine\n    integral_comp_smul_deriv''' hf hff' (hg.mono <| image_subset _ Ioo_subset_Icc_self) ?_\n      (hf'.smul (hg.comp hf <| subset_preimage_image f _)).integrableOn_Icc\n  rw [hf.image_uIcc] at hg ⊢\n  exact hg.integrableOn_Icc\n\n"}
{"name":"intervalIntegral.integral_comp_smul_deriv'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace Real G\nf f' : Real → Real\ng : Real → G\nh : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nh' : ContinuousOn f' (Set.uIcc a b)\nhg : ContinuousOn g (Set.image f (Set.uIcc a b))\n⊢ Eq (intervalIntegral (fun x => HSMul.hSMul (f' x) (Function.comp g f x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => g x) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables. If `f` has continuous derivative `f'` on `[a, b]`,\nand `g` is continuous on `f '' [a, b]`, then we can substitute `u = f x` to get\n`∫ x in a..b, f' x • (g ∘ f) x = ∫ u in f a..f b, g u`.\nCompared to `intervalIntegral.integral_comp_smul_deriv` we only require that `g` is continuous on\n`f '' [a, b]`.\n-/\ntheorem integral_comp_smul_deriv' {f f' : ℝ → ℝ} {g : ℝ → G}\n    (h : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x) (h' : ContinuousOn f' (uIcc a b))\n    (hg : ContinuousOn g (f '' [[a, b]])) :\n    (∫ x in a..b, f' x • (g ∘ f) x) = ∫ x in f a..f b, g x :=\n  integral_comp_smul_deriv'' (fun x hx => (h x hx).continuousAt.continuousWithinAt)\n    (fun x hx => (h x <| Ioo_subset_Icc_self hx).hasDerivWithinAt) h' hg\n\n"}
{"name":"intervalIntegral.integral_comp_smul_deriv","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace Real G\nf f' : Real → Real\ng : Real → G\nh : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nh' : ContinuousOn f' (Set.uIcc a b)\nhg : Continuous g\n⊢ Eq (intervalIntegral (fun x => HSMul.hSMul (f' x) (Function.comp g f x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => g x) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables, most common version. If `f` has continuous derivative `f'` on `[a, b]`,\nand `g` is continuous, then we can substitute `u = f x` to get\n`∫ x in a..b, f' x • (g ∘ f) x = ∫ u in f a..f b, g u`.\n-/\ntheorem integral_comp_smul_deriv {f f' : ℝ → ℝ} {g : ℝ → G}\n    (h : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x) (h' : ContinuousOn f' (uIcc a b))\n    (hg : Continuous g) : (∫ x in a..b, f' x • (g ∘ f) x) = ∫ x in f a..f b, g x :=\n  integral_comp_smul_deriv' h h' hg.continuousOn\n\n"}
{"name":"intervalIntegral.integral_deriv_comp_smul_deriv'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → Real\ng g' : Real → E\nhf : ContinuousOn f (Set.uIcc a b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhf' : ContinuousOn f' (Set.uIcc a b)\nhg : ContinuousOn g (Set.uIcc (f a) (f b))\nhgg' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min (f a) (f b)) (Max.max (f a) (f b))) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\nhg' : ContinuousOn g' (Set.image f (Set.uIcc a b))\n⊢ Eq (intervalIntegral (fun x => HSMul.hSMul (f' x) (Function.comp g' f x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (Function.comp g f b) (Function.comp g f a))","decl":"theorem integral_deriv_comp_smul_deriv' {f f' : ℝ → ℝ} {g g' : ℝ → E} (hf : ContinuousOn f [[a, b]])\n    (hff' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hf' : ContinuousOn f' [[a, b]]) (hg : ContinuousOn g [[f a, f b]])\n    (hgg' : ∀ x ∈ Ioo (min (f a) (f b)) (max (f a) (f b)), HasDerivWithinAt g (g' x) (Ioi x) x)\n    (hg' : ContinuousOn g' (f '' [[a, b]])) :\n    (∫ x in a..b, f' x • (g' ∘ f) x) = (g ∘ f) b - (g ∘ f) a := by\n  rw [integral_comp_smul_deriv'' hf hff' hf' hg',\n    integral_eq_sub_of_hasDeriv_right hg hgg' (hg'.mono _).intervalIntegrable]\n  exacts [rfl, intermediate_value_uIcc hf]\n\n"}
{"name":"intervalIntegral.integral_deriv_comp_smul_deriv","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"E : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\na b : Real\ninst✝ : CompleteSpace E\nf f' : Real → Real\ng g' : Real → E\nhf : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nhg : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt g (g' (f x)) (f x)\nhf' : ContinuousOn f' (Set.uIcc a b)\nhg' : Continuous g'\n⊢ Eq (intervalIntegral (fun x => HSMul.hSMul (f' x) (Function.comp g' f x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (Function.comp g f b) (Function.comp g f a))","decl":"theorem integral_deriv_comp_smul_deriv {f f' : ℝ → ℝ} {g g' : ℝ → E}\n    (hf : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x)\n    (hg : ∀ x ∈ uIcc a b, HasDerivAt g (g' (f x)) (f x)) (hf' : ContinuousOn f' (uIcc a b))\n    (hg' : Continuous g') : (∫ x in a..b, f' x • (g' ∘ f) x) = (g ∘ f) b - (g ∘ f) a :=\n  integral_eq_sub_of_hasDerivAt (fun x hx => (hg x hx).scomp x <| hf x hx)\n    (hf'.smul (hg'.comp_continuousOn <| HasDerivAt.continuousOn hf)).intervalIntegrable\n\n"}
{"name":"intervalIntegral.integral_comp_mul_deriv'''","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nf f' g : Real → Real\nhf : ContinuousOn f (Set.uIcc a b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhg_cont : ContinuousOn g (Set.image f (Set.Ioo (Min.min a b) (Max.max a b)))\nhg1 : MeasureTheory.IntegrableOn g (Set.image f (Set.uIcc a b)) MeasureTheory.MeasureSpace.volume\nhg2 : MeasureTheory.IntegrableOn (fun x => HMul.hMul (Function.comp g f x) (f' x)) (Set.uIcc a b) MeasureTheory.MeasureSpace.volume\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (Function.comp g f x) (f' x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun u => g u) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables, general form for scalar functions. If `f` is continuous on `[a, b]` and has\ncontinuous right-derivative `f'` in `(a, b)`, `g` is continuous on `f '' (a, b)` and integrable on\n`f '' [a, b]`, and `(g ∘ f) x * f' x` is integrable on `[a, b]`, then we can substitute `u = f x`\nto get `∫ x in a..b, (g ∘ f) x * f' x = ∫ u in f a..f b, g u`.\n-/\ntheorem integral_comp_mul_deriv''' {a b : ℝ} {f f' : ℝ → ℝ} {g : ℝ → ℝ}\n    (hf : ContinuousOn f [[a, b]])\n    (hff' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hg_cont : ContinuousOn g (f '' Ioo (min a b) (max a b))) (hg1 : IntegrableOn g (f '' [[a, b]]))\n    (hg2 : IntegrableOn (fun x => (g ∘ f) x * f' x) [[a, b]]) :\n    (∫ x in a..b, (g ∘ f) x * f' x) = ∫ u in f a..f b, g u := by\n  have hg2' : IntegrableOn (fun x => f' x • (g ∘ f) x) [[a, b]] := by simpa [mul_comm] using hg2\n  simpa [mul_comm] using integral_comp_smul_deriv''' hf hff' hg_cont hg1 hg2'\n\n"}
{"name":"intervalIntegral.integral_comp_mul_deriv''","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nf f' g : Real → Real\nhf : ContinuousOn f (Set.uIcc a b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhf' : ContinuousOn f' (Set.uIcc a b)\nhg : ContinuousOn g (Set.image f (Set.uIcc a b))\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (Function.comp g f x) (f' x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun u => g u) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables for continuous integrands. If `f` is continuous on `[a, b]` and has\ncontinuous right-derivative `f'` in `(a, b)`, and `g` is continuous on `f '' [a, b]` then we can\nsubstitute `u = f x` to get `∫ x in a..b, (g ∘ f) x * f' x = ∫ u in f a..f b, g u`.\n-/\ntheorem integral_comp_mul_deriv'' {f f' g : ℝ → ℝ} (hf : ContinuousOn f [[a, b]])\n    (hff' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hf' : ContinuousOn f' [[a, b]]) (hg : ContinuousOn g (f '' [[a, b]])) :\n    (∫ x in a..b, (g ∘ f) x * f' x) = ∫ u in f a..f b, g u := by\n  simpa [mul_comm] using integral_comp_smul_deriv'' hf hff' hf' hg\n\n"}
{"name":"intervalIntegral.integral_comp_mul_deriv'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nf f' g : Real → Real\nh : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nh' : ContinuousOn f' (Set.uIcc a b)\nhg : ContinuousOn g (Set.image f (Set.uIcc a b))\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (Function.comp g f x) (f' x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => g x) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables. If `f` has continuous derivative `f'` on `[a, b]`,\nand `g` is continuous on `f '' [a, b]`, then we can substitute `u = f x` to get\n`∫ x in a..b, (g ∘ f) x * f' x = ∫ u in f a..f b, g u`.\nCompared to `intervalIntegral.integral_comp_mul_deriv` we only require that `g` is continuous on\n`f '' [a, b]`.\n-/\ntheorem integral_comp_mul_deriv' {f f' g : ℝ → ℝ} (h : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x)\n    (h' : ContinuousOn f' (uIcc a b)) (hg : ContinuousOn g (f '' [[a, b]])) :\n    (∫ x in a..b, (g ∘ f) x * f' x) = ∫ x in f a..f b, g x := by\n  simpa [mul_comm] using integral_comp_smul_deriv' h h' hg\n\n"}
{"name":"intervalIntegral.integral_comp_mul_deriv","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nf f' g : Real → Real\nh : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nh' : ContinuousOn f' (Set.uIcc a b)\nhg : Continuous g\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (Function.comp g f x) (f' x)) a b MeasureTheory.MeasureSpace.volume) (intervalIntegral (fun x => g x) (f a) (f b) MeasureTheory.MeasureSpace.volume)","decl":"/-- Change of variables, most common version. If `f` has continuous derivative `f'` on `[a, b]`,\nand `g` is continuous, then we can substitute `u = f x` to get\n`∫ x in a..b, (g ∘ f) x * f' x = ∫ u in f a..f b, g u`.\n-/\ntheorem integral_comp_mul_deriv {f f' g : ℝ → ℝ} (h : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x)\n    (h' : ContinuousOn f' (uIcc a b)) (hg : Continuous g) :\n    (∫ x in a..b, (g ∘ f) x * f' x) = ∫ x in f a..f b, g x :=\n  integral_comp_mul_deriv' h h' hg.continuousOn\n\n"}
{"name":"intervalIntegral.integral_deriv_comp_mul_deriv'","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nf f' g g' : Real → Real\nhf : ContinuousOn f (Set.uIcc a b)\nhff' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min a b) (Max.max a b)) x → HasDerivWithinAt f (f' x) (Set.Ioi x) x\nhf' : ContinuousOn f' (Set.uIcc a b)\nhg : ContinuousOn g (Set.uIcc (f a) (f b))\nhgg' : ∀ (x : Real), Membership.mem (Set.Ioo (Min.min (f a) (f b)) (Max.max (f a) (f b))) x → HasDerivWithinAt g (g' x) (Set.Ioi x) x\nhg' : ContinuousOn g' (Set.image f (Set.uIcc a b))\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (Function.comp g' f x) (f' x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (Function.comp g f b) (Function.comp g f a))","decl":"theorem integral_deriv_comp_mul_deriv' {f f' g g' : ℝ → ℝ} (hf : ContinuousOn f [[a, b]])\n    (hff' : ∀ x ∈ Ioo (min a b) (max a b), HasDerivWithinAt f (f' x) (Ioi x) x)\n    (hf' : ContinuousOn f' [[a, b]]) (hg : ContinuousOn g [[f a, f b]])\n    (hgg' : ∀ x ∈ Ioo (min (f a) (f b)) (max (f a) (f b)), HasDerivWithinAt g (g' x) (Ioi x) x)\n    (hg' : ContinuousOn g' (f '' [[a, b]])) :\n    (∫ x in a..b, (g' ∘ f) x * f' x) = (g ∘ f) b - (g ∘ f) a := by\n  simpa [mul_comm] using integral_deriv_comp_smul_deriv' hf hff' hf' hg hgg' hg'\n\n"}
{"name":"intervalIntegral.integral_deriv_comp_mul_deriv","module":"Mathlib.MeasureTheory.Integral.FundThmCalculus","initialProofState":"a b : Real\nf f' g g' : Real → Real\nhf : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt f (f' x) x\nhg : ∀ (x : Real), Membership.mem (Set.uIcc a b) x → HasDerivAt g (g' (f x)) (f x)\nhf' : ContinuousOn f' (Set.uIcc a b)\nhg' : Continuous g'\n⊢ Eq (intervalIntegral (fun x => HMul.hMul (Function.comp g' f x) (f' x)) a b MeasureTheory.MeasureSpace.volume) (HSub.hSub (Function.comp g f b) (Function.comp g f a))","decl":"theorem integral_deriv_comp_mul_deriv {f f' g g' : ℝ → ℝ}\n    (hf : ∀ x ∈ uIcc a b, HasDerivAt f (f' x) x)\n    (hg : ∀ x ∈ uIcc a b, HasDerivAt g (g' (f x)) (f x)) (hf' : ContinuousOn f' (uIcc a b))\n    (hg' : Continuous g') : (∫ x in a..b, (g' ∘ f) x * f' x) = (g ∘ f) b - (g ∘ f) a := by\n  simpa [mul_comm] using integral_deriv_comp_smul_deriv hf hg hf' hg'\n\n"}
