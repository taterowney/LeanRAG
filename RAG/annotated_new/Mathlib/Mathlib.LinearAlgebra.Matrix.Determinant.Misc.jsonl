{"name":"Matrix.submatrix_succAbove_det_eq_negOnePow_submatrix_succAbove_det","module":"Mathlib.LinearAlgebra.Matrix.Determinant.Misc","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nn : Nat\nM : Matrix (Fin (HAdd.hAdd n 1)) (Fin n) R\nhv : Eq (Finset.univ.sum fun j => M j) 0\nj₁ j₂ : Fin (HAdd.hAdd n 1)\n⊢ Eq (M.submatrix j₁.succAbove id).det (HSMul.hSMul (HSub.hSub ↑↑j₁ ↑↑j₂).negOnePow (M.submatrix j₂.succAbove id).det)","decl":"/-- Let `M` be a `(n+1) × n` matrix whose row sums to zero. Then all the matrices obtained by\ndeleting one row have the same determinant up to a sign. -/\ntheorem submatrix_succAbove_det_eq_negOnePow_submatrix_succAbove_det {n : ℕ}\n    (M : Matrix (Fin (n + 1)) (Fin n) R) (hv : ∑ j, M j = 0) (j₁ j₂ : Fin (n + 1)) :\n    (M.submatrix (Fin.succAbove j₁) id).det =\n      Int.negOnePow (j₁ - j₂) • (M.submatrix (Fin.succAbove j₂) id).det := by\n  suffices ∀ j, (M.submatrix (Fin.succAbove j) id).det =\n      Int.negOnePow j • (M.submatrix (Fin.succAbove 0) id).det by\n    rw [this j₁, this j₂, smul_smul, ← Int.negOnePow_add, sub_add_cancel]\n  intro j\n  induction j using Fin.induction with\n  | zero => rw [Fin.val_zero, Nat.cast_zero, Int.negOnePow_zero, one_smul]\n  | succ i h_ind =>\n      rw [Fin.val_succ, Nat.cast_add, Nat.cast_one, Int.negOnePow_succ, Units.neg_smul,\n        ← neg_eq_iff_eq_neg, ← neg_one_smul R,\n        ← det_updateRow_sum (M.submatrix i.succ.succAbove id) i (fun _ ↦ -1),\n        ← Fin.coe_castSucc i, ← h_ind]\n      congr\n      ext a b\n      simp_rw [neg_one_smul, updateRow_apply, Finset.sum_neg_distrib, Pi.neg_apply,\n        Finset.sum_apply, submatrix_apply, id_eq]\n      split_ifs with h\n      · replace hv := congr_fun hv b\n        rw [Fin.sum_univ_succAbove _ i.succ, Pi.add_apply, Finset.sum_apply] at hv\n        rwa [h, Fin.succAbove_castSucc_self, neg_eq_iff_add_eq_zero, add_comm]\n      · obtain h|h := ne_iff_lt_or_gt.mp h\n        · rw [Fin.succAbove_castSucc_of_lt _ _ h,\n            Fin.succAbove_of_succ_le _ _ (Fin.succ_lt_succ_iff.mpr h).le]\n        · rw [Fin.succAbove_succ_of_lt _ _ h, Fin.succAbove_castSucc_of_le _ _ h.le]\n\n"}
{"name":"Matrix.submatrix_succAbove_det_eq_negOnePow_submatrix_succAbove_det'","module":"Mathlib.LinearAlgebra.Matrix.Determinant.Misc","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nn : Nat\nM : Matrix (Fin n) (Fin (HAdd.hAdd n 1)) R\nhv : ∀ (i : Fin n), Eq (Finset.univ.sum fun j => M i j) 0\nj₁ j₂ : Fin (HAdd.hAdd n 1)\n⊢ Eq (M.submatrix id j₁.succAbove).det (HSMul.hSMul (HSub.hSub ↑↑j₁ ↑↑j₂).negOnePow (M.submatrix id j₂.succAbove).det)","decl":"/-- Let `M` be a `(n+1) × n` matrix whose column sums to zero. Then all the matrices obtained by\ndeleting one column have the same determinant up to a sign. -/\ntheorem submatrix_succAbove_det_eq_negOnePow_submatrix_succAbove_det' {n : ℕ}\n    (M : Matrix (Fin n) (Fin (n + 1)) R) (hv : ∀ i, ∑ j, M i j = 0) (j₁ j₂ : Fin (n + 1)) :\n    (M.submatrix id (Fin.succAbove j₁)).det =\n      Int.negOnePow (j₁ - j₂) • (M.submatrix id (Fin.succAbove j₂)).det := by\n  rw [← det_transpose, transpose_submatrix,\n    submatrix_succAbove_det_eq_negOnePow_submatrix_succAbove_det M.transpose ?_ j₁ j₂,\n    ← det_transpose, transpose_submatrix, transpose_transpose]\n  ext\n  simp_rw [Finset.sum_apply, transpose_apply, hv, Pi.zero_apply]\n\n"}
