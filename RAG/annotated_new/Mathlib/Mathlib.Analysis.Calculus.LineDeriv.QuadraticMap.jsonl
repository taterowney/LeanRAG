{"name":"QuadraticMap.hasLineDerivAt","module":"Mathlib.Analysis.Calculus.LineDeriv.QuadraticMap","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : QuadraticMap 𝕜 E F\na b : E\n⊢ HasLineDerivAt 𝕜 (⇑f) (QuadraticMap.polar (⇑f) a b) a b","decl":"theorem hasLineDerivAt (f : QuadraticMap 𝕜 E F) (a b : E) :\n    HasLineDerivAt 𝕜 f (polar f a b) a b := by\n  simpa [HasLineDerivAt, QuadraticMap.map_add, f.map_smul] using\n    ((hasDerivAt_const (0 : 𝕜) (f a)).add <|\n      ((hasDerivAt_id 0).mul (hasDerivAt_id 0)).smul (hasDerivAt_const 0 (f b))).add\n      ((hasDerivAt_id 0).smul (hasDerivAt_const 0 (polar f a b)))\n\n"}
{"name":"QuadraticMap.lineDifferentiableAt","module":"Mathlib.Analysis.Calculus.LineDeriv.QuadraticMap","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : QuadraticMap 𝕜 E F\na b : E\n⊢ LineDifferentiableAt 𝕜 (⇑f) a b","decl":"theorem lineDifferentiableAt (f : QuadraticMap 𝕜 E F) (a b : E) : LineDifferentiableAt 𝕜 f a b :=\n  (f.hasLineDerivAt a b).lineDifferentiableAt\n\n"}
{"name":"QuadraticMap.lineDeriv","module":"Mathlib.Analysis.Calculus.LineDeriv.QuadraticMap","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : QuadraticMap 𝕜 E F\n⊢ Eq (lineDeriv 𝕜 ⇑f) (QuadraticMap.polar ⇑f)","decl":"@[simp]\nprotected theorem lineDeriv (f : QuadraticMap 𝕜 E F) : lineDeriv 𝕜 f = polar f := by\n  ext a b\n  exact (f.hasLineDerivAt a b).lineDeriv\n\n"}
