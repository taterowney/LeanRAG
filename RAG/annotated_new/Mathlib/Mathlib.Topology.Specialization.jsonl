{"name":"Specialization.toEquiv_symm","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\n⊢ Eq Specialization.toEquiv.symm Specialization.ofEquiv","decl":"@[simp] lemma toEquiv_symm : (@toEquiv α).symm = ofEquiv := rfl\n"}
{"name":"Specialization.ofEquiv_symm","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\n⊢ Eq Specialization.ofEquiv.symm Specialization.toEquiv","decl":"@[simp] lemma ofEquiv_symm : (@ofEquiv α).symm = toEquiv := rfl\n"}
{"name":"Specialization.toEquiv_ofEquiv","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\na : Specialization α\n⊢ Eq (Specialization.toEquiv (Specialization.ofEquiv a)) a","decl":"@[simp] lemma toEquiv_ofEquiv (a : Specialization α) : toEquiv (ofEquiv a) = a := rfl\n"}
{"name":"Specialization.ofEquiv_toEquiv","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\na : α\n⊢ Eq (Specialization.ofEquiv (Specialization.toEquiv a)) a","decl":"@[simp] lemma ofEquiv_toEquiv (a : α) : ofEquiv (toEquiv a) = a := rfl\n-- The following two are eligible for `dsimp`\n"}
{"name":"Specialization.toEquiv_inj","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\na b : α\n⊢ Iff (Eq (Specialization.toEquiv a) (Specialization.toEquiv b)) (Eq a b)","decl":"@[simp, nolint simpNF] lemma toEquiv_inj {a b : α} : toEquiv a = toEquiv b ↔ a = b := Iff.rfl\n"}
{"name":"Specialization.ofEquiv_inj","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\na b : Specialization α\n⊢ Iff (Eq (Specialization.ofEquiv a) (Specialization.ofEquiv b)) (Eq a b)","decl":"@[simp, nolint simpNF] lemma ofEquiv_inj {a b : Specialization α} : ofEquiv a = ofEquiv b ↔ a = b :=\nIff.rfl\n\n"}
{"name":"Specialization.toEquiv_le_toEquiv","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na b : α\n⊢ Iff (LE.le (Specialization.toEquiv a) (Specialization.toEquiv b)) (Specializes b a)","decl":"@[simp] lemma toEquiv_le_toEquiv {a b : α} : toEquiv a ≤ toEquiv b ↔ b ⤳ a := Iff.rfl\n"}
{"name":"Specialization.ofEquiv_specializes_ofEquiv","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na b : Specialization α\n⊢ Iff (Specializes (Specialization.ofEquiv a) (Specialization.ofEquiv b)) (LE.le b a)","decl":"@[simp] lemma ofEquiv_specializes_ofEquiv {a b : Specialization α} :\n  ofEquiv a ⤳ ofEquiv b ↔ b ≤ a := Iff.rfl\n\n"}
{"name":"Specialization.isOpen_toEquiv_preimage","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : AlexandrovDiscrete α\ns : Set (Specialization α)\n⊢ Iff (IsOpen (Set.preimage (⇑Specialization.toEquiv) s)) (IsUpperSet s)","decl":"@[simp] lemma isOpen_toEquiv_preimage [AlexandrovDiscrete α] {s : Set (Specialization α)} :\n  IsOpen (toEquiv ⁻¹' s) ↔ IsUpperSet s := isOpen_iff_forall_specializes.trans forall_swap\n\n"}
{"name":"Specialization.isUpperSet_ofEquiv_preimage","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : AlexandrovDiscrete α\ns : Set α\n⊢ Iff (IsUpperSet (Set.preimage (⇑Specialization.ofEquiv) s)) (IsOpen s)","decl":"@[simp] lemma isUpperSet_ofEquiv_preimage [AlexandrovDiscrete α] {s : Set α} :\n  IsUpperSet (ofEquiv ⁻¹' s) ↔ IsOpen s := isOpen_toEquiv_preimage.symm\n\n"}
{"name":"Specialization.map_id","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Eq (Specialization.map (ContinuousMap.id α)) OrderHom.id","decl":"@[simp] lemma map_id : map (ContinuousMap.id α) = OrderHom.id := rfl\n"}
{"name":"Specialization.map_comp","module":"Mathlib.Topology.Specialization","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : ContinuousMap β γ\nf : ContinuousMap α β\n⊢ Eq (Specialization.map (g.comp f)) ((Specialization.map g).comp (Specialization.map f))","decl":"@[simp] lemma map_comp (g : C(β, γ)) (f : C(α, β)) : map (g.comp f) = (map g).comp (map f) := rfl\n\n"}
{"name":"topToPreord_map","module":"Mathlib.Topology.Specialization","initialProofState":"X✝ Y✝ : TopCat\nf : ContinuousMap ↑X✝ ↑Y✝\n⊢ Eq (topToPreord.map f) (Specialization.map f)","decl":"/-- Sends a topological space to its specialisation order. -/\n@[simps]\ndef topToPreord : TopCat ⥤ Preord where\n  obj X := Preord.of <| Specialization X\n  map := Specialization.map\n"}
{"name":"topToPreord_obj","module":"Mathlib.Topology.Specialization","initialProofState":"X : TopCat\n⊢ Eq (topToPreord.obj X) (Preord.of (Specialization ↑X))","decl":"/-- Sends a topological space to its specialisation order. -/\n@[simps]\ndef topToPreord : TopCat ⥤ Preord where\n  obj X := Preord.of <| Specialization X\n  map := Specialization.map\n"}
