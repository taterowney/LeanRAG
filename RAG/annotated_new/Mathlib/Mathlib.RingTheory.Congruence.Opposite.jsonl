{"name":"RingCon.op_iff","module":"Mathlib.RingTheory.Congruence.Opposite","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx y : MulOpposite R\n⊢ Iff (c.op x y) (c (MulOpposite.unop y) (MulOpposite.unop x))","decl":"lemma op_iff {c : RingCon R} {x y : Rᵐᵒᵖ} : c.op x y ↔ c y.unop x.unop := Iff.rfl\n\n"}
{"name":"RingCon.unop_iff","module":"Mathlib.RingTheory.Congruence.Opposite","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon (MulOpposite R)\nx y : R\n⊢ Iff (c.unop x y) (c (MulOpposite.op y) (MulOpposite.op x))","decl":"lemma unop_iff {c : RingCon Rᵐᵒᵖ} {x y : R} : c.unop x y ↔ c (.op y) (.op x) := Iff.rfl\n\n"}
{"name":"RingCon.opOrderIso_apply","module":"Mathlib.RingTheory.Congruence.Opposite","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\n⊢ Eq (RingCon.opOrderIso c) c.op","decl":"/--\nThe congruences of a ring `R` biject to the congruences of the opposite ring `Rᵐᵒᵖ`.\n-/\n@[simps]\ndef opOrderIso : RingCon R ≃o RingCon Rᵐᵒᵖ where\n  toFun := op\n  invFun := unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_rel_iff' {c d} := by rw [le_def, le_def]; constructor <;> intro h _ _ h' <;> exact h h'\n\n"}
{"name":"RingCon.opOrderIso_symm_apply","module":"Mathlib.RingTheory.Congruence.Opposite","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon (MulOpposite R)\n⊢ Eq ((RelIso.symm RingCon.opOrderIso) c) c.unop","decl":"/--\nThe congruences of a ring `R` biject to the congruences of the opposite ring `Rᵐᵒᵖ`.\n-/\n@[simps]\ndef opOrderIso : RingCon R ≃o RingCon Rᵐᵒᵖ where\n  toFun := op\n  invFun := unop\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_rel_iff' {c d} := by rw [le_def, le_def]; constructor <;> intro h _ _ h' <;> exact h h'\n\n"}
