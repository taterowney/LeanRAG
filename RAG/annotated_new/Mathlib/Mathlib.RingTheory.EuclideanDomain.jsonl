{"name":"gcd_ne_zero_of_left","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"R : Type u_1\ninst✝¹ : EuclideanDomain R\ninst✝ : GCDMonoid R\np q : R\nhp : Ne p 0\n⊢ Ne (GCDMonoid.gcd p q) 0","decl":"theorem gcd_ne_zero_of_left (hp : p ≠ 0) : GCDMonoid.gcd p q ≠ 0 := fun h =>\n  hp <| eq_zero_of_zero_dvd (h ▸ gcd_dvd_left p q)\n\n"}
{"name":"gcd_ne_zero_of_right","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"R : Type u_1\ninst✝¹ : EuclideanDomain R\ninst✝ : GCDMonoid R\np q : R\nhp : Ne q 0\n⊢ Ne (GCDMonoid.gcd p q) 0","decl":"theorem gcd_ne_zero_of_right (hp : q ≠ 0) : GCDMonoid.gcd p q ≠ 0 := fun h =>\n  hp <| eq_zero_of_zero_dvd (h ▸ gcd_dvd_right p q)\n\n"}
{"name":"left_div_gcd_ne_zero","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"R : Type u_1\ninst✝¹ : EuclideanDomain R\ninst✝ : GCDMonoid R\np q : R\nhp : Ne p 0\n⊢ Ne (HDiv.hDiv p (GCDMonoid.gcd p q)) 0","decl":"theorem left_div_gcd_ne_zero {p q : R} (hp : p ≠ 0) : p / GCDMonoid.gcd p q ≠ 0 := by\n  obtain ⟨r, hr⟩ := GCDMonoid.gcd_dvd_left p q\n  obtain ⟨pq0, r0⟩ : GCDMonoid.gcd p q ≠ 0 ∧ r ≠ 0 := mul_ne_zero_iff.mp (hr ▸ hp)\n  nth_rw 1 [hr]\n  rw [mul_comm, mul_div_cancel_right₀ _ pq0]\n  exact r0\n\n"}
{"name":"right_div_gcd_ne_zero","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"R : Type u_1\ninst✝¹ : EuclideanDomain R\ninst✝ : GCDMonoid R\np q : R\nhq : Ne q 0\n⊢ Ne (HDiv.hDiv q (GCDMonoid.gcd p q)) 0","decl":"theorem right_div_gcd_ne_zero {p q : R} (hq : q ≠ 0) : q / GCDMonoid.gcd p q ≠ 0 := by\n  obtain ⟨r, hr⟩ := GCDMonoid.gcd_dvd_right p q\n  obtain ⟨pq0, r0⟩ : GCDMonoid.gcd p q ≠ 0 ∧ r ≠ 0 := mul_ne_zero_iff.mp (hr ▸ hq)\n  nth_rw 1 [hr]\n  rw [mul_comm, mul_div_cancel_right₀ _ pq0]\n  exact r0\n\n"}
{"name":"isCoprime_div_gcd_div_gcd","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"R : Type u_1\ninst✝¹ : EuclideanDomain R\ninst✝ : GCDMonoid R\np q : R\nhq : Ne q 0\n⊢ IsCoprime (HDiv.hDiv p (GCDMonoid.gcd p q)) (HDiv.hDiv q (GCDMonoid.gcd p q))","decl":"theorem isCoprime_div_gcd_div_gcd (hq : q ≠ 0) :\n    IsCoprime (p / GCDMonoid.gcd p q) (q / GCDMonoid.gcd p q) :=\n  (gcd_isUnit_iff _ _).1 <|\n    isUnit_gcd_of_eq_mul_gcd\n        (EuclideanDomain.mul_div_cancel' (gcd_ne_zero_of_right hq) <| gcd_dvd_left _ _).symm\n        (EuclideanDomain.mul_div_cancel' (gcd_ne_zero_of_right hq) <| gcd_dvd_right _ _).symm <|\n      gcd_ne_zero_of_right hq\n\n"}
{"name":"EuclideanDomain.span_gcd","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"α : Type u_1\ninst✝¹ : EuclideanDomain α\ninst✝ : DecidableEq α\nx y : α\n⊢ Eq (Ideal.span (Singleton.singleton (EuclideanDomain.gcd x y))) (Ideal.span (Insert.insert x (Singleton.singleton y)))","decl":"theorem span_gcd [DecidableEq α] (x y : α) :\n    span ({gcd x y} : Set α) = span ({x, y} : Set α) :=\n  letI := EuclideanDomain.gcdMonoid α\n  _root_.span_gcd x y\n\n"}
{"name":"EuclideanDomain.gcd_isUnit_iff","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"α : Type u_1\ninst✝¹ : EuclideanDomain α\ninst✝ : DecidableEq α\nx y : α\n⊢ Iff (IsUnit (EuclideanDomain.gcd x y)) (IsCoprime x y)","decl":"theorem gcd_isUnit_iff [DecidableEq α] {x y : α} : IsUnit (gcd x y) ↔ IsCoprime x y :=\n  letI := EuclideanDomain.gcdMonoid α\n  _root_.gcd_isUnit_iff x y\n\n-- this should be proved for UFDs surely?\n"}
{"name":"EuclideanDomain.isCoprime_of_dvd","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"α : Type u_1\ninst✝ : EuclideanDomain α\nx y : α\nnonzero : Not (And (Eq x 0) (Eq y 0))\nH : ∀ (z : α), Membership.mem (nonunits α) z → Ne z 0 → Dvd.dvd z x → Not (Dvd.dvd z y)\n⊢ IsCoprime x y","decl":"theorem isCoprime_of_dvd {x y : α} (nonzero : ¬(x = 0 ∧ y = 0))\n    (H : ∀ z ∈ nonunits α, z ≠ 0 → z ∣ x → ¬z ∣ y) : IsCoprime x y :=\n  letI := Classical.decEq α\n  letI := EuclideanDomain.gcdMonoid α\n  _root_.isCoprime_of_dvd x y nonzero H\n\n-- this should be proved for UFDs surely?\n"}
{"name":"EuclideanDomain.dvd_or_coprime","module":"Mathlib.RingTheory.EuclideanDomain","initialProofState":"α : Type u_1\ninst✝ : EuclideanDomain α\nx y : α\nh : Irreducible x\n⊢ Or (Dvd.dvd x y) (IsCoprime x y)","decl":"theorem dvd_or_coprime (x y : α) (h : Irreducible x) :\n    x ∣ y ∨ IsCoprime x y :=\n  letI := Classical.decEq α\n  letI := EuclideanDomain.gcdMonoid α\n  _root_.dvd_or_isCoprime x y h\n\n"}
