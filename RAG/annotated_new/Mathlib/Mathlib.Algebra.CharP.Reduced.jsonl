{"name":"iterateFrobenius_inj","module":"Mathlib.Algebra.CharP.Reduced","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsReduced R\np n : Nat\ninst✝ : ExpChar R p\n⊢ Function.Injective ⇑(iterateFrobenius R p n)","decl":"theorem iterateFrobenius_inj : Function.Injective (iterateFrobenius R p n) := fun x y H ↦ by\n  rw [← sub_eq_zero] at H ⊢\n  simp_rw [iterateFrobenius_def, ← sub_pow_expChar_pow] at H\n  exact IsReduced.eq_zero _ ⟨_, H⟩\n\n"}
{"name":"frobenius_inj","module":"Mathlib.Algebra.CharP.Reduced","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsReduced R\np : Nat\ninst✝ : ExpChar R p\n⊢ Function.Injective ⇑(frobenius R p)","decl":"theorem frobenius_inj : Function.Injective (frobenius R p) :=\n  iterateFrobenius_one (R := R) p ▸ iterateFrobenius_inj R p 1\n\n"}
{"name":"isSquare_of_charTwo'","module":"Mathlib.Algebra.CharP.Reduced","initialProofState":"R : Type u_1\ninst✝³ : Finite R\ninst✝² : CommRing R\ninst✝¹ : IsReduced R\ninst✝ : CharP R 2\na : R\n⊢ IsSquare a","decl":"/-- If `ringChar R = 2`, where `R` is a finite reduced commutative ring,\nthen every `a : R` is a square. -/\ntheorem isSquare_of_charTwo' {R : Type*} [Finite R] [CommRing R] [IsReduced R] [CharP R 2]\n    (a : R) : IsSquare a := by\n  cases nonempty_fintype R\n  exact\n    Exists.imp (fun b h => pow_two b ▸ Eq.symm h)\n      (((Fintype.bijective_iff_injective_and_card _).mpr ⟨frobenius_inj R 2, rfl⟩).surjective a)\n\n"}
{"name":"ExpChar.pow_prime_pow_mul_eq_one_iff","module":"Mathlib.Algebra.CharP.Reduced","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsReduced R\np k m : Nat\ninst✝ : ExpChar R p\nx : R\n⊢ Iff (Eq (HPow.hPow x (HMul.hMul (HPow.hPow p k) m)) 1) (Eq (HPow.hPow x m) 1)","decl":"@[simp]\ntheorem ExpChar.pow_prime_pow_mul_eq_one_iff (p k m : ℕ) [ExpChar R p] (x : R) :\n    x ^ (p ^ k * m) = 1 ↔ x ^ m = 1 := by\n  rw [pow_mul']\n  convert ← (iterateFrobenius_inj R p k).eq_iff\n  apply map_one\n"}
