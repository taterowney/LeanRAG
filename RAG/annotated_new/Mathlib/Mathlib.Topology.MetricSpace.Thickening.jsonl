{"name":"Metric.mem_thickening_iff_infEdist_lt","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Œ±\nx : Œ±\n‚ä¢ Iff (Membership.mem (Metric.thickening Œ¥ s) x) (LT.lt (EMetric.infEdist x s) (ENNReal.ofReal Œ¥))","decl":"theorem mem_thickening_iff_infEdist_lt : x ‚àà thickening Œ¥ s ‚Üî infEdist x s < ENNReal.ofReal Œ¥ :=\n  Iff.rfl\n\n"}
{"name":"Metric.eventually_not_mem_thickening_of_infEdist_pos","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\nx : Œ±\nh : Not (Membership.mem (closure E) x)\n‚ä¢ Filter.Eventually (fun Œ¥ => Not (Membership.mem (Metric.thickening Œ¥ E) x)) (nhds 0)","decl":"/-- An exterior point of a subset `E` (i.e., a point outside the closure of `E`) is not in the\n(open) `Œ¥`-thickening of `E` for small enough positive `Œ¥`. -/\nlemma eventually_not_mem_thickening_of_infEdist_pos {E : Set Œ±} {x : Œ±} (h : x ‚àâ closure E) :\n    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù), x ‚àâ Metric.thickening Œ¥ E := by\n  obtain ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_lt‚ü©‚ü© := exists_real_pos_lt_infEdist_of_not_mem_closure h\n  filter_upwards [eventually_lt_nhds Œµ_pos] with Œ¥ hŒ¥\n  simp only [thickening, mem_setOf_eq, not_lt]\n  exact (ENNReal.ofReal_le_ofReal hŒ¥.le).trans Œµ_lt.le\n\n"}
{"name":"Metric.thickening_eq_preimage_infEdist","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ Eq (Metric.thickening Œ¥ E) (Set.preimage (fun x => EMetric.infEdist x E) (Set.Iio (ENNReal.ofReal Œ¥)))","decl":"/-- The (open) thickening equals the preimage of an open interval under `EMetric.infEdist`. -/\ntheorem thickening_eq_preimage_infEdist (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    thickening Œ¥ E = (infEdist ¬∑ E) ‚Åª¬π' Iio (ENNReal.ofReal Œ¥) :=\n  rfl\n\n"}
{"name":"Metric.isOpen_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ IsOpen (Metric.thickening Œ¥ E)","decl":"/-- The (open) thickening is an open set. -/\ntheorem isOpen_thickening {Œ¥ : ‚Ñù} {E : Set Œ±} : IsOpen (thickening Œ¥ E) :=\n  Continuous.isOpen_preimage continuous_infEdist _ isOpen_Iio\n\n"}
{"name":"Metric.thickening_empty","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\n‚ä¢ Eq (Metric.thickening Œ¥ EmptyCollection.emptyCollection) EmptyCollection.emptyCollection","decl":"/-- The (open) thickening of the empty set is empty. -/\n@[simp]\ntheorem thickening_empty (Œ¥ : ‚Ñù) : thickening Œ¥ (‚àÖ : Set Œ±) = ‚àÖ := by\n  simp only [thickening, setOf_false, infEdist_empty, not_top_lt]\n\n"}
{"name":"Metric.thickening_of_nonpos","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nhŒ¥ : LE.le Œ¥ 0\ns : Set Œ±\n‚ä¢ Eq (Metric.thickening Œ¥ s) EmptyCollection.emptyCollection","decl":"theorem thickening_of_nonpos (hŒ¥ : Œ¥ ‚â§ 0) (s : Set Œ±) : thickening Œ¥ s = ‚àÖ :=\n  eq_empty_of_forall_not_mem fun _ => ((ENNReal.ofReal_of_nonpos hŒ¥).trans_le bot_le).not_lt\n\n"}
{"name":"Metric.thickening_mono","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ Œ¥‚ÇÇ : Real\nhle : LE.le Œ¥‚ÇÅ Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œ¥‚ÇÅ E) (Metric.thickening Œ¥‚ÇÇ E)","decl":"/-- The (open) thickening `Metric.thickening Œ¥ E` of a fixed subset `E` is an increasing function of\nthe thickening radius `Œ¥`. -/\n@[gcongr]\ntheorem thickening_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :\n    thickening Œ¥‚ÇÅ E ‚äÜ thickening Œ¥‚ÇÇ E :=\n  preimage_mono (Iio_subset_Iio (ENNReal.ofReal_le_ofReal hle))\n\n"}
{"name":"Metric.thickening_subset_of_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE‚ÇÅ E‚ÇÇ : Set Œ±\nh : HasSubset.Subset E‚ÇÅ E‚ÇÇ\n‚ä¢ HasSubset.Subset (Metric.thickening Œ¥ E‚ÇÅ) (Metric.thickening Œ¥ E‚ÇÇ)","decl":"/-- The (open) thickening `Metric.thickening Œ¥ E` with a fixed thickening radius `Œ¥` is\nan increasing function of the subset `E`. -/\ntheorem thickening_subset_of_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (h : E‚ÇÅ ‚äÜ E‚ÇÇ) :\n    thickening Œ¥ E‚ÇÅ ‚äÜ thickening Œ¥ E‚ÇÇ := fun _ hx => lt_of_le_of_lt (infEdist_anti h) hx\n\n"}
{"name":"Metric.mem_thickening_iff_exists_edist_lt","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nx : Œ±\n‚ä¢ Iff (Membership.mem (Metric.thickening Œ¥ E) x) (Exists fun z => And (Membership.mem E z) (LT.lt (EDist.edist x z) (ENNReal.ofReal Œ¥)))","decl":"theorem mem_thickening_iff_exists_edist_lt {Œ¥ : ‚Ñù} (E : Set Œ±) (x : Œ±) :\n    x ‚àà thickening Œ¥ E ‚Üî ‚àÉ z ‚àà E, edist x z < ENNReal.ofReal Œ¥ :=\n  infEdist_lt_iff\n\n"}
{"name":"Metric.frontier_thickening_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\nŒ¥ : Real\n‚ä¢ HasSubset.Subset (frontier (Metric.thickening Œ¥ E)) (setOf fun x => Eq (EMetric.infEdist x E) (ENNReal.ofReal Œ¥))","decl":"/-- The frontier of the (open) thickening of a set is contained in an `EMetric.infEdist` level\nset. -/\ntheorem frontier_thickening_subset (E : Set Œ±) {Œ¥ : ‚Ñù} :\n    frontier (thickening Œ¥ E) ‚äÜ { x : Œ± | infEdist x E = ENNReal.ofReal Œ¥ } :=\n  frontier_lt_subset_eq continuous_infEdist continuous_const\n\n"}
{"name":"Metric.frontier_thickening_disjoint","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nA : Set Œ±\n‚ä¢ Pairwise (Function.onFun Disjoint fun r => frontier (Metric.thickening r A))","decl":"open scoped Function in -- required for scoped `on` notation\ntheorem frontier_thickening_disjoint (A : Set Œ±) :\n    Pairwise (Disjoint on fun r : ‚Ñù => frontier (thickening r A)) := by\n  refine (pairwise_disjoint_on _).2 fun r‚ÇÅ r‚ÇÇ hr => ?_\n  rcases le_total r‚ÇÅ 0 with h‚ÇÅ | h‚ÇÅ\n  ¬∑ simp [thickening_of_nonpos h‚ÇÅ]\n  refine ((disjoint_singleton.2 fun h => hr.ne ?_).preimage _).mono (frontier_thickening_subset _)\n    (frontier_thickening_subset _)\n  apply_fun ENNReal.toReal at h\n  rwa [ENNReal.toReal_ofReal h‚ÇÅ, ENNReal.toReal_ofReal (h‚ÇÅ.trans hr.le)] at h\n\n"}
{"name":"Metric.subset_compl_thickening_compl_thickening_self","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset E (HasCompl.compl (Metric.thickening Œ¥ (HasCompl.compl (Metric.thickening Œ¥ E))))","decl":"/-- Any set is contained in the complement of the Œ¥-thickening of the complement of its\nŒ¥-thickening. -/\nlemma subset_compl_thickening_compl_thickening_self (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    E ‚äÜ (thickening Œ¥ (thickening Œ¥ E)·∂ú)·∂ú := by\n  intro x x_in_E\n  simp only [thickening, mem_compl_iff, mem_setOf_eq, not_lt]\n  apply EMetric.le_infEdist.mpr fun y hy ‚Ü¶ ?_\n  simp only [mem_compl_iff, mem_setOf_eq, not_lt] at hy\n  simpa only [edist_comm] using le_trans hy <| EMetric.infEdist_le_edist_of_mem x_in_E\n\n"}
{"name":"Metric.thickening_compl_thickening_self_subset_compl","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œ¥ (HasCompl.compl (Metric.thickening Œ¥ E))) (HasCompl.compl E)","decl":"/-- The Œ¥-thickening of the complement of the Œ¥-thickening of a set is contained in the complement\nof the set. -/\nlemma thickening_compl_thickening_self_subset_compl (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    thickening Œ¥ (thickening Œ¥ E)·∂ú ‚äÜ E·∂ú := by\n  apply compl_subset_compl.mp\n  simpa only [compl_compl] using subset_compl_thickening_compl_thickening_self Œ¥ E\n\n"}
{"name":"Metric.mem_thickening_iff_infDist_lt","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ¥ : Real\nX : Type u\ninst‚úù : PseudoMetricSpace X\nE : Set X\nx : X\nh : E.Nonempty\n‚ä¢ Iff (Membership.mem (Metric.thickening Œ¥ E) x) (LT.lt (Metric.infDist x E) Œ¥)","decl":"theorem mem_thickening_iff_infDist_lt {E : Set X} {x : X} (h : E.Nonempty) :\n    x ‚àà thickening Œ¥ E ‚Üî infDist x E < Œ¥ :=\n  lt_ofReal_iff_toReal_lt (infEdist_ne_top h)\n\n"}
{"name":"Metric.mem_thickening_iff","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ¥ : Real\nX : Type u\ninst‚úù : PseudoMetricSpace X\nE : Set X\nx : X\n‚ä¢ Iff (Membership.mem (Metric.thickening Œ¥ E) x) (Exists fun z => And (Membership.mem E z) (LT.lt (Dist.dist x z) Œ¥))","decl":"/-- A point in a metric space belongs to the (open) `Œ¥`-thickening of a subset `E` if and only if\nit is at distance less than `Œ¥` from some point of `E`. -/\ntheorem mem_thickening_iff {E : Set X} {x : X} : x ‚àà thickening Œ¥ E ‚Üî ‚àÉ z ‚àà E, dist x z < Œ¥ := by\n  have key_iff : ‚àÄ z : X, edist x z < ENNReal.ofReal Œ¥ ‚Üî dist x z < Œ¥ := fun z ‚Ü¶ by\n    rw [dist_edist, lt_ofReal_iff_toReal_lt (edist_ne_top _ _)]\n  simp_rw [mem_thickening_iff_exists_edist_lt, key_iff]\n\n"}
{"name":"Metric.thickening_singleton","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"X : Type u\ninst‚úù : PseudoMetricSpace X\nŒ¥ : Real\nx : X\n‚ä¢ Eq (Metric.thickening Œ¥ (Singleton.singleton x)) (Metric.ball x Œ¥)","decl":"@[simp]\ntheorem thickening_singleton (Œ¥ : ‚Ñù) (x : X) : thickening Œ¥ ({x} : Set X) = ball x Œ¥ := by\n  ext\n  simp [mem_thickening_iff]\n\n"}
{"name":"Metric.ball_subset_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"X : Type u\ninst‚úù : PseudoMetricSpace X\nx : X\nE : Set X\nhx : Membership.mem E x\nŒ¥ : Real\n‚ä¢ HasSubset.Subset (Metric.ball x Œ¥) (Metric.thickening Œ¥ E)","decl":"theorem ball_subset_thickening {x : X} {E : Set X} (hx : x ‚àà E) (Œ¥ : ‚Ñù) :\n    ball x Œ¥ ‚äÜ thickening Œ¥ E :=\n  Subset.trans (by simp [Subset.rfl]) (thickening_subset_of_subset Œ¥ <| singleton_subset_iff.mpr hx)\n\n"}
{"name":"Metric.thickening_eq_biUnion_ball","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"X : Type u\ninst‚úù : PseudoMetricSpace X\nŒ¥ : Real\nE : Set X\n‚ä¢ Eq (Metric.thickening Œ¥ E) (Set.iUnion fun x => Set.iUnion fun h => Metric.ball x Œ¥)","decl":"/-- The (open) `Œ¥`-thickening `Metric.thickening Œ¥ E` of a subset `E` in a metric space equals the\nunion of balls of radius `Œ¥` centered at points of `E`. -/\ntheorem thickening_eq_biUnion_ball {Œ¥ : ‚Ñù} {E : Set X} : thickening Œ¥ E = ‚ãÉ x ‚àà E, ball x Œ¥ := by\n  ext x\n  simp only [mem_iUnion‚ÇÇ, exists_prop]\n  exact mem_thickening_iff\n\n"}
{"name":"Bornology.IsBounded.thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"X : Type u\ninst‚úù : PseudoMetricSpace X\nŒ¥ : Real\nE : Set X\nh : Bornology.IsBounded E\n‚ä¢ Bornology.IsBounded (Metric.thickening Œ¥ E)","decl":"protected theorem _root_.Bornology.IsBounded.thickening {Œ¥ : ‚Ñù} {E : Set X} (h : IsBounded E) :\n    IsBounded (thickening Œ¥ E) := by\n  rcases E.eq_empty_or_nonempty with rfl | ‚ü®x, hx‚ü©\n  ¬∑ simp\n  ¬∑ refine (isBounded_iff_subset_closedBall x).2 ‚ü®Œ¥ + diam E, fun y hy ‚Ü¶ ?_‚ü©\n    calc\n      dist y x ‚â§ infDist y E + diam E := dist_le_infDist_add_diam (x := y) h hx\n      _ ‚â§ Œ¥ + diam E := add_le_add_right ((mem_thickening_iff_infDist_lt ‚ü®x, hx‚ü©).1 hy).le _\n\n"}
{"name":"Metric.mem_cthickening_iff","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Œ±\nx : Œ±\n‚ä¢ Iff (Membership.mem (Metric.cthickening Œ¥ s) x) (LE.le (EMetric.infEdist x s) (ENNReal.ofReal Œ¥))","decl":"@[simp]\ntheorem mem_cthickening_iff : x ‚àà cthickening Œ¥ s ‚Üî infEdist x s ‚â§ ENNReal.ofReal Œ¥ :=\n  Iff.rfl\n\n"}
{"name":"Metric.eventually_not_mem_cthickening_of_infEdist_pos","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\nx : Œ±\nh : Not (Membership.mem (closure E) x)\n‚ä¢ Filter.Eventually (fun Œ¥ => Not (Membership.mem (Metric.cthickening Œ¥ E) x)) (nhds 0)","decl":"/-- An exterior point of a subset `E` (i.e., a point outside the closure of `E`) is not in the\nclosed `Œ¥`-thickening of `E` for small enough positive `Œ¥`. -/\nlemma eventually_not_mem_cthickening_of_infEdist_pos {E : Set Œ±} {x : Œ±} (h : x ‚àâ closure E) :\n    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù), x ‚àâ Metric.cthickening Œ¥ E := by\n  obtain ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_lt‚ü©‚ü© := exists_real_pos_lt_infEdist_of_not_mem_closure h\n  filter_upwards [eventually_lt_nhds Œµ_pos] with Œ¥ hŒ¥\n  simp only [cthickening, mem_setOf_eq, not_le]\n  exact ((ofReal_lt_ofReal_iff Œµ_pos).mpr hŒ¥).trans Œµ_lt\n\n"}
{"name":"Metric.mem_cthickening_of_edist_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nx y : Œ±\nŒ¥ : Real\nE : Set Œ±\nh : Membership.mem E y\nh' : LE.le (EDist.edist x y) (ENNReal.ofReal Œ¥)\n‚ä¢ Membership.mem (Metric.cthickening Œ¥ E) x","decl":"theorem mem_cthickening_of_edist_le (x y : Œ±) (Œ¥ : ‚Ñù) (E : Set Œ±) (h : y ‚àà E)\n    (h' : edist x y ‚â§ ENNReal.ofReal Œ¥) : x ‚àà cthickening Œ¥ E :=\n  (infEdist_le_edist_of_mem h).trans h'\n\n"}
{"name":"Metric.mem_cthickening_of_dist_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nx y : Œ±\nŒ¥ : Real\nE : Set Œ±\nh : Membership.mem E y\nh' : LE.le (Dist.dist x y) Œ¥\n‚ä¢ Membership.mem (Metric.cthickening Œ¥ E) x","decl":"theorem mem_cthickening_of_dist_le {Œ± : Type*} [PseudoMetricSpace Œ±] (x y : Œ±) (Œ¥ : ‚Ñù) (E : Set Œ±)\n    (h : y ‚àà E) (h' : dist x y ‚â§ Œ¥) : x ‚àà cthickening Œ¥ E := by\n  apply mem_cthickening_of_edist_le x y Œ¥ E h\n  rw [edist_dist]\n  exact ENNReal.ofReal_le_ofReal h'\n\n"}
{"name":"Metric.cthickening_eq_preimage_infEdist","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.preimage (fun x => EMetric.infEdist x E) (Set.Iic (ENNReal.ofReal Œ¥)))","decl":"theorem cthickening_eq_preimage_infEdist (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    cthickening Œ¥ E = (fun x => infEdist x E) ‚Åª¬π' Iic (ENNReal.ofReal Œ¥) :=\n  rfl\n\n"}
{"name":"Metric.isClosed_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ IsClosed (Metric.cthickening Œ¥ E)","decl":"/-- The closed thickening is a closed set. -/\ntheorem isClosed_cthickening {Œ¥ : ‚Ñù} {E : Set Œ±} : IsClosed (cthickening Œ¥ E) :=\n  IsClosed.preimage continuous_infEdist isClosed_Iic\n\n"}
{"name":"Metric.cthickening_empty","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\n‚ä¢ Eq (Metric.cthickening Œ¥ EmptyCollection.emptyCollection) EmptyCollection.emptyCollection","decl":"/-- The closed thickening of the empty set is empty. -/\n@[simp]\ntheorem cthickening_empty (Œ¥ : ‚Ñù) : cthickening Œ¥ (‚àÖ : Set Œ±) = ‚àÖ := by\n  simp only [cthickening, ENNReal.ofReal_ne_top, setOf_false, infEdist_empty, top_le_iff]\n\n"}
{"name":"Metric.cthickening_of_nonpos","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nhŒ¥ : LE.le Œ¥ 0\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (closure E)","decl":"theorem cthickening_of_nonpos {Œ¥ : ‚Ñù} (hŒ¥ : Œ¥ ‚â§ 0) (E : Set Œ±) : cthickening Œ¥ E = closure E := by\n  ext x\n  simp [mem_closure_iff_infEdist_zero, cthickening, ENNReal.ofReal_eq_zero.2 hŒ¥]\n\n"}
{"name":"Metric.cthickening_zero","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening 0 E) (closure E)","decl":"/-- The closed thickening with radius zero is the closure of the set. -/\n@[simp]\ntheorem cthickening_zero (E : Set Œ±) : cthickening 0 E = closure E :=\n  cthickening_of_nonpos le_rfl E\n\n"}
{"name":"Metric.cthickening_max_zero","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening (Max.max 0 Œ¥) E) (Metric.cthickening Œ¥ E)","decl":"theorem cthickening_max_zero (Œ¥ : ‚Ñù) (E : Set Œ±) : cthickening (max 0 Œ¥) E = cthickening Œ¥ E := by\n  cases le_total Œ¥ 0 <;> simp [cthickening_of_nonpos, *]\n\n"}
{"name":"Metric.cthickening_mono","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ Œ¥‚ÇÇ : Real\nhle : LE.le Œ¥‚ÇÅ Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.cthickening Œ¥‚ÇÅ E) (Metric.cthickening Œ¥‚ÇÇ E)","decl":"/-- The closed thickening `Metric.cthickening Œ¥ E` of a fixed subset `E` is an increasing function\nof the thickening radius `Œ¥`. -/\ntheorem cthickening_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :\n    cthickening Œ¥‚ÇÅ E ‚äÜ cthickening Œ¥‚ÇÇ E :=\n  preimage_mono (Iic_subset_Iic.mpr (ENNReal.ofReal_le_ofReal hle))\n\n"}
{"name":"Metric.cthickening_singleton","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nx : Œ±\nŒ¥ : Real\nhŒ¥ : LE.le 0 Œ¥\n‚ä¢ Eq (Metric.cthickening Œ¥ (Singleton.singleton x)) (Metric.closedBall x Œ¥)","decl":"@[simp]\ntheorem cthickening_singleton {Œ± : Type*} [PseudoMetricSpace Œ±] (x : Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 ‚â§ Œ¥) :\n    cthickening Œ¥ ({x} : Set Œ±) = closedBall x Œ¥ := by\n  ext y\n  simp [cthickening, edist_dist, ENNReal.ofReal_le_ofReal_iff hŒ¥]\n\n"}
{"name":"Metric.closedBall_subset_cthickening_singleton","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nx : Œ±\nŒ¥ : Real\n‚ä¢ HasSubset.Subset (Metric.closedBall x Œ¥) (Metric.cthickening Œ¥ (Singleton.singleton x))","decl":"theorem closedBall_subset_cthickening_singleton {Œ± : Type*} [PseudoMetricSpace Œ±] (x : Œ±) (Œ¥ : ‚Ñù) :\n    closedBall x Œ¥ ‚äÜ cthickening Œ¥ ({x} : Set Œ±) := by\n  rcases lt_or_le Œ¥ 0 with (hŒ¥ | hŒ¥)\n  ¬∑ simp only [closedBall_eq_empty.mpr hŒ¥, empty_subset]\n  ¬∑ simp only [cthickening_singleton x hŒ¥, Subset.rfl]\n\n"}
{"name":"Metric.cthickening_subset_of_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE‚ÇÅ E‚ÇÇ : Set Œ±\nh : HasSubset.Subset E‚ÇÅ E‚ÇÇ\n‚ä¢ HasSubset.Subset (Metric.cthickening Œ¥ E‚ÇÅ) (Metric.cthickening Œ¥ E‚ÇÇ)","decl":"/-- The closed thickening `Metric.cthickening Œ¥ E` with a fixed thickening radius `Œ¥` is\nan increasing function of the subset `E`. -/\ntheorem cthickening_subset_of_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (h : E‚ÇÅ ‚äÜ E‚ÇÇ) :\n    cthickening Œ¥ E‚ÇÅ ‚äÜ cthickening Œ¥ E‚ÇÇ := fun _ hx => le_trans (infEdist_anti h) hx\n\n"}
{"name":"Metric.cthickening_subset_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ : NNReal\nŒ¥‚ÇÇ : Real\nhlt : LT.lt (‚ÜëŒ¥‚ÇÅ) Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.cthickening (‚ÜëŒ¥‚ÇÅ) E) (Metric.thickening Œ¥‚ÇÇ E)","decl":"theorem cthickening_subset_thickening {Œ¥‚ÇÅ : ‚Ñù‚â•0} {Œ¥‚ÇÇ : ‚Ñù} (hlt : (Œ¥‚ÇÅ : ‚Ñù) < Œ¥‚ÇÇ) (E : Set Œ±) :\n    cthickening Œ¥‚ÇÅ E ‚äÜ thickening Œ¥‚ÇÇ E := fun _ hx =>\n  hx.out.trans_lt ((ENNReal.ofReal_lt_ofReal_iff (lt_of_le_of_lt Œ¥‚ÇÅ.prop hlt)).mpr hlt)\n\n"}
{"name":"Metric.cthickening_subset_thickening'","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ Œ¥‚ÇÇ : Real\nŒ¥‚ÇÇ_pos : LT.lt 0 Œ¥‚ÇÇ\nhlt : LT.lt Œ¥‚ÇÅ Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.cthickening Œ¥‚ÇÅ E) (Metric.thickening Œ¥‚ÇÇ E)","decl":"/-- The closed thickening `Metric.cthickening Œ¥‚ÇÅ E` is contained in the open thickening\n`Metric.thickening Œ¥‚ÇÇ E` if the radius of the latter is positive and larger. -/\ntheorem cthickening_subset_thickening' {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (Œ¥‚ÇÇ_pos : 0 < Œ¥‚ÇÇ) (hlt : Œ¥‚ÇÅ < Œ¥‚ÇÇ) (E : Set Œ±) :\n    cthickening Œ¥‚ÇÅ E ‚äÜ thickening Œ¥‚ÇÇ E := fun _ hx =>\n  lt_of_le_of_lt hx.out ((ENNReal.ofReal_lt_ofReal_iff Œ¥‚ÇÇ_pos).mpr hlt)\n\n"}
{"name":"Metric.thickening_subset_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œ¥ E) (Metric.cthickening Œ¥ E)","decl":"/-- The open thickening `Metric.thickening Œ¥ E` is contained in the closed thickening\n`Metric.cthickening Œ¥ E` with the same radius. -/\ntheorem thickening_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : thickening Œ¥ E ‚äÜ cthickening Œ¥ E := by\n  intro x hx\n  rw [thickening, mem_setOf_eq] at hx\n  exact hx.le\n\n"}
{"name":"Metric.thickening_subset_cthickening_of_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ Œ¥‚ÇÇ : Real\nhle : LE.le Œ¥‚ÇÅ Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œ¥‚ÇÅ E) (Metric.cthickening Œ¥‚ÇÇ E)","decl":"theorem thickening_subset_cthickening_of_le {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :\n    thickening Œ¥‚ÇÅ E ‚äÜ cthickening Œ¥‚ÇÇ E :=\n  (thickening_subset_cthickening Œ¥‚ÇÅ E).trans (cthickening_mono hle E)\n\n"}
{"name":"Bornology.IsBounded.cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nh : Bornology.IsBounded E\n‚ä¢ Bornology.IsBounded (Metric.cthickening Œ¥ E)","decl":"theorem _root_.Bornology.IsBounded.cthickening {Œ± : Type*} [PseudoMetricSpace Œ±] {Œ¥ : ‚Ñù} {E : Set Œ±}\n    (h : IsBounded E) : IsBounded (cthickening Œ¥ E) := by\n  have : IsBounded (thickening (max (Œ¥ + 1) 1) E) := h.thickening\n  apply this.subset\n  exact cthickening_subset_thickening' (zero_lt_one.trans_le (le_max_right _ _))\n    ((lt_add_one _).trans_le (le_max_left _ _)) _\n\n"}
{"name":"IsCompact.cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù¬π : PseudoMetricSpace Œ±\ninst‚úù : ProperSpace Œ±\ns : Set Œ±\nhs : IsCompact s\nr : Real\n‚ä¢ IsCompact (Metric.cthickening r s)","decl":"protected theorem _root_.IsCompact.cthickening\n    {Œ± : Type*} [PseudoMetricSpace Œ±] [ProperSpace Œ±] {s : Set Œ±}\n    (hs : IsCompact s) {r : ‚Ñù} : IsCompact (cthickening r s) :=\n  isCompact_of_isClosed_isBounded isClosed_cthickening hs.isBounded.cthickening\n\n"}
{"name":"Metric.thickening_subset_interior_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œ¥ E) (interior (Metric.cthickening Œ¥ E))","decl":"theorem thickening_subset_interior_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    thickening Œ¥ E ‚äÜ interior (cthickening Œ¥ E) :=\n  (subset_interior_iff_isOpen.mpr isOpen_thickening).trans\n    (interior_mono (thickening_subset_cthickening Œ¥ E))\n\n"}
{"name":"Metric.closure_thickening_subset_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset (closure (Metric.thickening Œ¥ E)) (Metric.cthickening Œ¥ E)","decl":"theorem closure_thickening_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    closure (thickening Œ¥ E) ‚äÜ cthickening Œ¥ E :=\n  (closure_mono (thickening_subset_cthickening Œ¥ E)).trans isClosed_cthickening.closure_subset\n\n"}
{"name":"Metric.closure_subset_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset (closure E) (Metric.cthickening Œ¥ E)","decl":"/-- The closed thickening of a set contains the closure of the set. -/\ntheorem closure_subset_cthickening (Œ¥ : ‚Ñù) (E : Set Œ±) : closure E ‚äÜ cthickening Œ¥ E := by\n  rw [‚Üê cthickening_of_nonpos (min_le_right Œ¥ 0)]\n  exact cthickening_mono (min_le_left Œ¥ 0) E\n\n"}
{"name":"Metric.closure_subset_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\n‚ä¢ HasSubset.Subset (closure E) (Metric.thickening Œ¥ E)","decl":"/-- The (open) thickening of a set contains the closure of the set. -/\ntheorem closure_subset_thickening {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :\n    closure E ‚äÜ thickening Œ¥ E := by\n  rw [‚Üê cthickening_zero]\n  exact cthickening_subset_thickening' Œ¥_pos Œ¥_pos E\n\n"}
{"name":"Metric.self_subset_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\n‚ä¢ HasSubset.Subset E (Metric.thickening Œ¥ E)","decl":"/-- A set is contained in its own (open) thickening. -/\ntheorem self_subset_thickening {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : E ‚äÜ thickening Œ¥ E :=\n  (@subset_closure _ E).trans (closure_subset_thickening Œ¥_pos E)\n\n"}
{"name":"Metric.self_subset_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ HasSubset.Subset E (Metric.cthickening Œ¥ E)","decl":"/-- A set is contained in its own closed thickening. -/\ntheorem self_subset_cthickening {Œ¥ : ‚Ñù} (E : Set Œ±) : E ‚äÜ cthickening Œ¥ E :=\n  subset_closure.trans (closure_subset_cthickening Œ¥ E)\n\n"}
{"name":"Metric.thickening_mem_nhdsSet","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\nŒ¥ : Real\nhŒ¥ : LT.lt 0 Œ¥\n‚ä¢ Membership.mem (nhdsSet E) (Metric.thickening Œ¥ E)","decl":"theorem thickening_mem_nhdsSet (E : Set Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : thickening Œ¥ E ‚àà ùìùÀ¢ E :=\n  isOpen_thickening.mem_nhdsSet.2 <| self_subset_thickening hŒ¥ E\n\n"}
{"name":"Metric.cthickening_mem_nhdsSet","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\nŒ¥ : Real\nhŒ¥ : LT.lt 0 Œ¥\n‚ä¢ Membership.mem (nhdsSet E) (Metric.cthickening Œ¥ E)","decl":"theorem cthickening_mem_nhdsSet (E : Set Œ±) {Œ¥ : ‚Ñù} (hŒ¥ : 0 < Œ¥) : cthickening Œ¥ E ‚àà ùìùÀ¢ E :=\n  mem_of_superset (thickening_mem_nhdsSet E hŒ¥) (thickening_subset_cthickening _ _)\n\n"}
{"name":"Metric.thickening_union","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns t : Set Œ±\n‚ä¢ Eq (Metric.thickening Œ¥ (Union.union s t)) (Union.union (Metric.thickening Œ¥ s) (Metric.thickening Œ¥ t))","decl":"@[simp]\ntheorem thickening_union (Œ¥ : ‚Ñù) (s t : Set Œ±) :\n    thickening Œ¥ (s ‚à™ t) = thickening Œ¥ s ‚à™ thickening Œ¥ t := by\n  simp_rw [thickening, infEdist_union, min_lt_iff, setOf_or]\n\n"}
{"name":"Metric.cthickening_union","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns t : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ (Union.union s t)) (Union.union (Metric.cthickening Œ¥ s) (Metric.cthickening Œ¥ t))","decl":"@[simp]\ntheorem cthickening_union (Œ¥ : ‚Ñù) (s t : Set Œ±) :\n    cthickening Œ¥ (s ‚à™ t) = cthickening Œ¥ s ‚à™ cthickening Œ¥ t := by\n  simp_rw [cthickening, infEdist_union, min_le_iff, setOf_or]\n\n"}
{"name":"Metric.thickening_iUnion","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œπ : Sort u_1\nŒ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nf : Œπ ‚Üí Set Œ±\n‚ä¢ Eq (Metric.thickening Œ¥ (Set.iUnion fun i => f i)) (Set.iUnion fun i => Metric.thickening Œ¥ (f i))","decl":"@[simp]\ntheorem thickening_iUnion (Œ¥ : ‚Ñù) (f : Œπ ‚Üí Set Œ±) :\n    thickening Œ¥ (‚ãÉ i, f i) = ‚ãÉ i, thickening Œ¥ (f i) := by\n  simp_rw [thickening, infEdist_iUnion, iInf_lt_iff, setOf_exists]\n\n"}
{"name":"Metric.thickening_biUnion","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒπ : Type u_2\nŒ¥ : Real\nf : Œπ ‚Üí Set Œ±\nI : Set Œπ\n‚ä¢ Eq (Metric.thickening Œ¥ (Set.iUnion fun i => Set.iUnion fun h => f i)) (Set.iUnion fun i => Set.iUnion fun h => Metric.thickening Œ¥ (f i))","decl":"lemma thickening_biUnion {Œπ : Type*} (Œ¥ : ‚Ñù) (f : Œπ ‚Üí Set Œ±) (I : Set Œπ) :\n    thickening Œ¥ (‚ãÉ i ‚àà I, f i) = ‚ãÉ i ‚àà I, thickening Œ¥ (f i) := by simp only [thickening_iUnion]\n\n"}
{"name":"Metric.ediam_cthickening_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\ns : Set Œ±\nŒµ : NNReal\n‚ä¢ LE.le (EMetric.diam (Metric.cthickening (‚ÜëŒµ) s)) (HAdd.hAdd (EMetric.diam s) (HMul.hMul 2 ‚ÜëŒµ))","decl":"theorem ediam_cthickening_le (Œµ : ‚Ñù‚â•0) :\n    EMetric.diam (cthickening Œµ s) ‚â§ EMetric.diam s + 2 * Œµ := by\n  refine diam_le fun x hx y hy => ENNReal.le_of_forall_pos_le_add fun Œ¥ hŒ¥ _ => ?_\n  rw [mem_cthickening_iff, ENNReal.ofReal_coe_nnreal] at hx hy\n  have hŒµ : (Œµ : ‚Ñù‚â•0‚àû) < Œµ + Œ¥ := ENNReal.coe_lt_coe.2 (lt_add_of_pos_right _ hŒ¥)\n  replace hx := hx.trans_lt hŒµ\n  obtain ‚ü®x', hx', hxx'‚ü© := infEdist_lt_iff.mp hx\n  calc\n    edist x y ‚â§ edist x x' + edist y x' := edist_triangle_right _ _ _\n    _ ‚â§ Œµ + Œ¥ + (infEdist y s + EMetric.diam s) :=\n      add_le_add hxx'.le (edist_le_infEdist_add_ediam hx')\n    _ ‚â§ Œµ + Œ¥ + (Œµ + EMetric.diam s) := add_le_add_left (add_le_add_right hy _) _\n    _ = _ := by rw [two_mul]; ac_rfl\n\n"}
{"name":"Metric.ediam_thickening_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\ns : Set Œ±\nŒµ : NNReal\n‚ä¢ LE.le (EMetric.diam (Metric.thickening (‚ÜëŒµ) s)) (HAdd.hAdd (EMetric.diam s) (HMul.hMul 2 ‚ÜëŒµ))","decl":"theorem ediam_thickening_le (Œµ : ‚Ñù‚â•0) : EMetric.diam (thickening Œµ s) ‚â§ EMetric.diam s + 2 * Œµ :=\n  (EMetric.diam_mono <| thickening_subset_cthickening _ _).trans <| ediam_cthickening_le _\n\n"}
{"name":"Metric.diam_cthickening_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œµ : Real\nŒ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\ns : Set Œ±\nhŒµ : LE.le 0 Œµ\n‚ä¢ LE.le (Metric.diam (Metric.cthickening Œµ s)) (HAdd.hAdd (Metric.diam s) (HMul.hMul 2 Œµ))","decl":"theorem diam_cthickening_le {Œ± : Type*} [PseudoMetricSpace Œ±] (s : Set Œ±) (hŒµ : 0 ‚â§ Œµ) :\n    diam (cthickening Œµ s) ‚â§ diam s + 2 * Œµ := by\n  lift Œµ to ‚Ñù‚â•0 using hŒµ\n  refine (toReal_le_add' (ediam_cthickening_le _) ?_ ?_).trans_eq ?_\n  ¬∑ exact fun h ‚Ü¶ top_unique <| h ‚ñ∏ EMetric.diam_mono (self_subset_cthickening _)\n  ¬∑ simp [mul_eq_top]\n  ¬∑ simp [diam]\n\n"}
{"name":"Metric.diam_thickening_le","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œµ : Real\nŒ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\ns : Set Œ±\nhŒµ : LE.le 0 Œµ\n‚ä¢ LE.le (Metric.diam (Metric.thickening Œµ s)) (HAdd.hAdd (Metric.diam s) (HMul.hMul 2 Œµ))","decl":"theorem diam_thickening_le {Œ± : Type*} [PseudoMetricSpace Œ±] (s : Set Œ±) (hŒµ : 0 ‚â§ Œµ) :\n    diam (thickening Œµ s) ‚â§ diam s + 2 * Œµ := by\n  by_cases hs : IsBounded s\n  ¬∑ exact (diam_mono (thickening_subset_cthickening _ _) hs.cthickening).trans\n      (diam_cthickening_le _ hŒµ)\n  obtain rfl | hŒµ := hŒµ.eq_or_lt\n  ¬∑ simp [thickening_of_nonpos, diam_nonneg]\n  ¬∑ rw [diam_eq_zero_of_unbounded (mt (IsBounded.subset ¬∑ <| self_subset_thickening hŒµ _) hs)]\n    positivity\n\n"}
{"name":"Metric.thickening_closure","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Œ±\n‚ä¢ Eq (Metric.thickening Œ¥ (closure s)) (Metric.thickening Œ¥ s)","decl":"@[simp]\ntheorem thickening_closure : thickening Œ¥ (closure s) = thickening Œ¥ s := by\n  simp_rw [thickening, infEdist_closure]\n\n"}
{"name":"Metric.cthickening_closure","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ (closure s)) (Metric.cthickening Œ¥ s)","decl":"@[simp]\ntheorem cthickening_closure : cthickening Œ¥ (closure s) = cthickening Œ¥ s := by\n  simp_rw [cthickening, infEdist_closure]\n\n"}
{"name":"Disjoint.exists_thickenings","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\ns t : Set Œ±\nhst : Disjoint s t\nhs : IsCompact s\nht : IsClosed t\n‚ä¢ Exists fun Œ¥ => And (LT.lt 0 Œ¥) (Disjoint (Metric.thickening Œ¥ s) (Metric.thickening Œ¥ t))","decl":"theorem _root_.Disjoint.exists_thickenings (hst : Disjoint s t) (hs : IsCompact s)\n    (ht : IsClosed t) :\n    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Disjoint (thickening Œ¥ s) (thickening Œ¥ t) := by\n  obtain ‚ü®r, hr, h‚ü© := exists_pos_forall_lt_edist hs ht hst\n  refine ‚ü®r / 2, half_pos (NNReal.coe_pos.2 hr), ?_‚ü©\n  rw [disjoint_iff_inf_le]\n  rintro z ‚ü®hzs, hzt‚ü©\n  rw [mem_thickening_iff_exists_edist_lt] at hzs hzt\n  rw [‚Üê NNReal.coe_two, ‚Üê NNReal.coe_div, ENNReal.ofReal_coe_nnreal] at hzs hzt\n  obtain ‚ü®x, hx, hzx‚ü© := hzs\n  obtain ‚ü®y, hy, hzy‚ü© := hzt\n  refine (h x hx y hy).not_le ?_\n  calc\n    edist x y ‚â§ edist z x + edist z y := edist_triangle_left _ _ _\n    _ ‚â§ ‚Üë(r / 2) + ‚Üë(r / 2) := add_le_add hzx.le hzy.le\n    _ = r := by rw [‚Üê ENNReal.coe_add, add_halves]\n\n"}
{"name":"Disjoint.exists_cthickenings","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\ns t : Set Œ±\nhst : Disjoint s t\nhs : IsCompact s\nht : IsClosed t\n‚ä¢ Exists fun Œ¥ => And (LT.lt 0 Œ¥) (Disjoint (Metric.cthickening Œ¥ s) (Metric.cthickening Œ¥ t))","decl":"theorem _root_.Disjoint.exists_cthickenings (hst : Disjoint s t) (hs : IsCompact s)\n    (ht : IsClosed t) :\n    ‚àÉ Œ¥, 0 < Œ¥ ‚àß Disjoint (cthickening Œ¥ s) (cthickening Œ¥ t) := by\n  obtain ‚ü®Œ¥, hŒ¥, h‚ü© := hst.exists_thickenings hs ht\n  refine ‚ü®Œ¥ / 2, half_pos hŒ¥, h.mono ?_ ?_‚ü© <;>\n    exact cthickening_subset_thickening' hŒ¥ (half_lt_self hŒ¥) _\n\n"}
{"name":"IsCompact.exists_cthickening_subset_open","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\ns t : Set Œ±\nhs : IsCompact s\nht : IsOpen t\nhst : HasSubset.Subset s t\n‚ä¢ Exists fun Œ¥ => And (LT.lt 0 Œ¥) (HasSubset.Subset (Metric.cthickening Œ¥ s) t)","decl":"/-- If `s` is compact, `t` is open and `s ‚äÜ t`, some `cthickening` of `s` is contained in `t`. -/\ntheorem _root_.IsCompact.exists_cthickening_subset_open (hs : IsCompact s) (ht : IsOpen t)\n    (hst : s ‚äÜ t) :\n    ‚àÉ Œ¥, 0 < Œ¥ ‚àß cthickening Œ¥ s ‚äÜ t :=\n  (hst.disjoint_compl_right.exists_cthickenings hs ht.isClosed_compl).imp fun _ h =>\n    ‚ü®h.1, disjoint_compl_right_iff_subset.1 <| h.2.mono_right <| self_subset_cthickening _‚ü©\n\n"}
{"name":"IsCompact.exists_isCompact_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù¬π : PseudoEMetricSpace Œ±\ns : Set Œ±\ninst‚úù : LocallyCompactSpace Œ±\nhs : IsCompact s\n‚ä¢ Exists fun Œ¥ => And (LT.lt 0 Œ¥) (IsCompact (Metric.cthickening Œ¥ s))","decl":"theorem _root_.IsCompact.exists_isCompact_cthickening [LocallyCompactSpace Œ±] (hs : IsCompact s) :\n    ‚àÉ Œ¥, 0 < Œ¥ ‚àß IsCompact (cthickening Œ¥ s) := by\n  rcases exists_compact_superset hs with ‚ü®K, K_compact, hK‚ü©\n  rcases hs.exists_cthickening_subset_open isOpen_interior hK with ‚ü®Œ¥, Œ¥pos, hŒ¥‚ü©\n  refine ‚ü®Œ¥, Œ¥pos, ?_‚ü©\n  exact K_compact.of_isClosed_subset isClosed_cthickening (hŒ¥.trans interior_subset)\n\n"}
{"name":"IsCompact.exists_thickening_subset_open","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\ns t : Set Œ±\nhs : IsCompact s\nht : IsOpen t\nhst : HasSubset.Subset s t\n‚ä¢ Exists fun Œ¥ => And (LT.lt 0 Œ¥) (HasSubset.Subset (Metric.thickening Œ¥ s) t)","decl":"theorem _root_.IsCompact.exists_thickening_subset_open (hs : IsCompact s) (ht : IsOpen t)\n    (hst : s ‚äÜ t) : ‚àÉ Œ¥, 0 < Œ¥ ‚àß thickening Œ¥ s ‚äÜ t :=\n  let ‚ü®Œ¥, h‚ÇÄ, hŒ¥‚ü© := hs.exists_cthickening_subset_open ht hst\n  ‚ü®Œ¥, h‚ÇÄ, (thickening_subset_cthickening _ _).trans hŒ¥‚ü©\n\n"}
{"name":"Metric.hasBasis_nhdsSet_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nK : Set Œ±\nhK : IsCompact K\n‚ä¢ (nhdsSet K).HasBasis (fun Œ¥ => LT.lt 0 Œ¥) fun Œ¥ => Metric.thickening Œ¥ K","decl":"theorem hasBasis_nhdsSet_thickening {K : Set Œ±} (hK : IsCompact K) :\n    (ùìùÀ¢ K).HasBasis (fun Œ¥ : ‚Ñù => 0 < Œ¥) fun Œ¥ => thickening Œ¥ K :=\n  (hasBasis_nhdsSet K).to_hasBasis' (fun _U hU => hK.exists_thickening_subset_open hU.1 hU.2)\n    fun _ => thickening_mem_nhdsSet K\n\n"}
{"name":"Metric.hasBasis_nhdsSet_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nK : Set Œ±\nhK : IsCompact K\n‚ä¢ (nhdsSet K).HasBasis (fun Œ¥ => LT.lt 0 Œ¥) fun Œ¥ => Metric.cthickening Œ¥ K","decl":"theorem hasBasis_nhdsSet_cthickening {K : Set Œ±} (hK : IsCompact K) :\n    (ùìùÀ¢ K).HasBasis (fun Œ¥ : ‚Ñù => 0 < Œ¥) fun Œ¥ => cthickening Œ¥ K :=\n  (hasBasis_nhdsSet K).to_hasBasis' (fun _U hU => hK.exists_cthickening_subset_open hU.1 hU.2)\n    fun _ => cthickening_mem_nhdsSet K\n\n"}
{"name":"Metric.cthickening_eq_iInter_cthickening'","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Real\nhsŒ¥ : HasSubset.Subset s (Set.Ioi Œ¥)\nhs : ‚àÄ (Œµ : Real), LT.lt Œ¥ Œµ ‚Üí (Inter.inter s (Set.Ioc Œ¥ Œµ)).Nonempty\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iInter fun Œµ => Set.iInter fun h => Metric.cthickening Œµ E)","decl":"theorem cthickening_eq_iInter_cthickening' {Œ¥ : ‚Ñù} (s : Set ‚Ñù) (hsŒ¥ : s ‚äÜ Ioi Œ¥)\n    (hs : ‚àÄ Œµ, Œ¥ < Œµ ‚Üí (s ‚à© Ioc Œ¥ Œµ).Nonempty) (E : Set Œ±) :\n    cthickening Œ¥ E = ‚ãÇ Œµ ‚àà s, cthickening Œµ E := by\n  apply Subset.antisymm\n  ¬∑ exact subset_iInter‚ÇÇ fun _ hŒµ => cthickening_mono (le_of_lt (hsŒ¥ hŒµ)) E\n  ¬∑ unfold cthickening\n    intro x hx\n    simp only [mem_iInter, mem_setOf_eq] at *\n    apply ENNReal.le_of_forall_pos_le_add\n    intro Œ∑ Œ∑_pos _\n    rcases hs (Œ¥ + Œ∑) (lt_add_of_pos_right _ (NNReal.coe_pos.mpr Œ∑_pos)) with ‚ü®Œµ, ‚ü®hsŒµ, hŒµ‚ü©‚ü©\n    apply ((hx Œµ hsŒµ).trans (ENNReal.ofReal_le_ofReal hŒµ.2)).trans\n    rw [ENNReal.coe_nnreal_eq Œ∑]\n    exact ENNReal.ofReal_add_le\n\n"}
{"name":"Metric.cthickening_eq_iInter_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iInter fun Œµ => Set.iInter fun x => Metric.cthickening Œµ E)","decl":"theorem cthickening_eq_iInter_cthickening {Œ¥ : ‚Ñù} (E : Set Œ±) :\n    cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (_ : Œ¥ < Œµ), cthickening Œµ E := by\n  apply cthickening_eq_iInter_cthickening' (Ioi Œ¥) rfl.subset\n  simp_rw [inter_eq_right.mpr Ioc_subset_Ioi_self]\n  exact fun _ hŒµ => nonempty_Ioc.mpr hŒµ\n\n"}
{"name":"Metric.cthickening_eq_iInter_thickening'","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_nn : LE.le 0 Œ¥\ns : Set Real\nhsŒ¥ : HasSubset.Subset s (Set.Ioi Œ¥)\nhs : ‚àÄ (Œµ : Real), LT.lt Œ¥ Œµ ‚Üí (Inter.inter s (Set.Ioc Œ¥ Œµ)).Nonempty\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iInter fun Œµ => Set.iInter fun h => Metric.thickening Œµ E)","decl":"theorem cthickening_eq_iInter_thickening' {Œ¥ : ‚Ñù} (Œ¥_nn : 0 ‚â§ Œ¥) (s : Set ‚Ñù) (hsŒ¥ : s ‚äÜ Ioi Œ¥)\n    (hs : ‚àÄ Œµ, Œ¥ < Œµ ‚Üí (s ‚à© Ioc Œ¥ Œµ).Nonempty) (E : Set Œ±) :\n    cthickening Œ¥ E = ‚ãÇ Œµ ‚àà s, thickening Œµ E := by\n  refine (subset_iInter‚ÇÇ fun Œµ hŒµ => ?_).antisymm ?_\n  ¬∑ obtain ‚ü®Œµ', -, hŒµ'‚ü© := hs Œµ (hsŒ¥ hŒµ)\n    have ss := cthickening_subset_thickening' (lt_of_le_of_lt Œ¥_nn hŒµ'.1) hŒµ'.1 E\n    exact ss.trans (thickening_mono hŒµ'.2 E)\n  ¬∑ rw [cthickening_eq_iInter_cthickening' s hsŒ¥ hs E]\n    exact iInter‚ÇÇ_mono fun Œµ _ => thickening_subset_cthickening Œµ E\n\n"}
{"name":"Metric.cthickening_eq_iInter_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_nn : LE.le 0 Œ¥\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iInter fun Œµ => Set.iInter fun x => Metric.thickening Œµ E)","decl":"theorem cthickening_eq_iInter_thickening {Œ¥ : ‚Ñù} (Œ¥_nn : 0 ‚â§ Œ¥) (E : Set Œ±) :\n    cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (_ : Œ¥ < Œµ), thickening Œµ E := by\n  apply cthickening_eq_iInter_thickening' Œ¥_nn (Ioi Œ¥) rfl.subset\n  simp_rw [inter_eq_right.mpr Ioc_subset_Ioi_self]\n  exact fun _ hŒµ => nonempty_Ioc.mpr hŒµ\n\n"}
{"name":"Metric.cthickening_eq_iInter_thickening''","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iInter fun Œµ => Set.iInter fun x => Metric.thickening Œµ E)","decl":"theorem cthickening_eq_iInter_thickening'' (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    cthickening Œ¥ E = ‚ãÇ (Œµ : ‚Ñù) (_ : max 0 Œ¥ < Œµ), thickening Œµ E := by\n  rw [‚Üê cthickening_max_zero, cthickening_eq_iInter_thickening]\n  exact le_max_left _ _\n\n"}
{"name":"Metric.closure_eq_iInter_cthickening'","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\ns : Set Real\nhs : ‚àÄ (Œµ : Real), LT.lt 0 Œµ ‚Üí (Inter.inter s (Set.Ioc 0 Œµ)).Nonempty\n‚ä¢ Eq (closure E) (Set.iInter fun Œ¥ => Set.iInter fun h => Metric.cthickening Œ¥ E)","decl":"/-- The closure of a set equals the intersection of its closed thickenings of positive radii\naccumulating at zero. -/\ntheorem closure_eq_iInter_cthickening' (E : Set Œ±) (s : Set ‚Ñù)\n    (hs : ‚àÄ Œµ, 0 < Œµ ‚Üí (s ‚à© Ioc 0 Œµ).Nonempty) : closure E = ‚ãÇ Œ¥ ‚àà s, cthickening Œ¥ E := by\n  by_cases hs‚ÇÄ : s ‚äÜ Ioi 0\n  ¬∑ rw [‚Üê cthickening_zero]\n    apply cthickening_eq_iInter_cthickening' _ hs‚ÇÄ hs\n  obtain ‚ü®Œ¥, hŒ¥s, Œ¥_nonpos‚ü© := not_subset.mp hs‚ÇÄ\n  rw [Set.mem_Ioi, not_lt] at Œ¥_nonpos\n  apply Subset.antisymm\n  ¬∑ exact subset_iInter‚ÇÇ fun Œµ _ => closure_subset_cthickening Œµ E\n  ¬∑ rw [‚Üê cthickening_of_nonpos Œ¥_nonpos E]\n    exact biInter_subset_of_mem hŒ¥s\n\n"}
{"name":"Metric.closure_eq_iInter_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\n‚ä¢ Eq (closure E) (Set.iInter fun Œ¥ => Set.iInter fun x => Metric.cthickening Œ¥ E)","decl":"/-- The closure of a set equals the intersection of its closed thickenings of positive radii. -/\ntheorem closure_eq_iInter_cthickening (E : Set Œ±) :\n    closure E = ‚ãÇ (Œ¥ : ‚Ñù) (_ : 0 < Œ¥), cthickening Œ¥ E := by\n  rw [‚Üê cthickening_zero]\n  exact cthickening_eq_iInter_cthickening E\n\n"}
{"name":"Metric.closure_eq_iInter_thickening'","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\ns : Set Real\nhs‚ÇÄ : HasSubset.Subset s (Set.Ioi 0)\nhs : ‚àÄ (Œµ : Real), LT.lt 0 Œµ ‚Üí (Inter.inter s (Set.Ioc 0 Œµ)).Nonempty\n‚ä¢ Eq (closure E) (Set.iInter fun Œ¥ => Set.iInter fun h => Metric.thickening Œ¥ E)","decl":"/-- The closure of a set equals the intersection of its open thickenings of positive radii\naccumulating at zero. -/\ntheorem closure_eq_iInter_thickening' (E : Set Œ±) (s : Set ‚Ñù) (hs‚ÇÄ : s ‚äÜ Ioi 0)\n    (hs : ‚àÄ Œµ, 0 < Œµ ‚Üí (s ‚à© Ioc 0 Œµ).Nonempty) : closure E = ‚ãÇ Œ¥ ‚àà s, thickening Œ¥ E := by\n  rw [‚Üê cthickening_zero]\n  apply cthickening_eq_iInter_thickening' le_rfl _ hs‚ÇÄ hs\n\n"}
{"name":"Metric.closure_eq_iInter_thickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\n‚ä¢ Eq (closure E) (Set.iInter fun Œ¥ => Set.iInter fun x => Metric.thickening Œ¥ E)","decl":"/-- The closure of a set equals the intersection of its (open) thickenings of positive radii. -/\ntheorem closure_eq_iInter_thickening (E : Set Œ±) :\n    closure E = ‚ãÇ (Œ¥ : ‚Ñù) (_ : 0 < Œ¥), thickening Œ¥ E := by\n  rw [‚Üê cthickening_zero]\n  exact cthickening_eq_iInter_thickening rfl.ge E\n\n"}
{"name":"Metric.frontier_cthickening_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nE : Set Œ±\nŒ¥ : Real\n‚ä¢ HasSubset.Subset (frontier (Metric.cthickening Œ¥ E)) (setOf fun x => Eq (EMetric.infEdist x E) (ENNReal.ofReal Œ¥))","decl":"/-- The frontier of the closed thickening of a set is contained in an `EMetric.infEdist` level\nset. -/\ntheorem frontier_cthickening_subset (E : Set Œ±) {Œ¥ : ‚Ñù} :\n    frontier (cthickening Œ¥ E) ‚äÜ { x : Œ± | infEdist x E = ENNReal.ofReal Œ¥ } :=\n  frontier_le_subset_eq continuous_infEdist continuous_const\n\n"}
{"name":"Metric.closedBall_subset_cthickening","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nx : Œ±\nE : Set Œ±\nhx : Membership.mem E x\nŒ¥ : Real\n‚ä¢ HasSubset.Subset (Metric.closedBall x Œ¥) (Metric.cthickening Œ¥ E)","decl":"/-- The closed ball of radius `Œ¥` centered at a point of `E` is included in the closed\nthickening of `E`. -/\ntheorem closedBall_subset_cthickening {Œ± : Type*} [PseudoMetricSpace Œ±] {x : Œ±} {E : Set Œ±}\n    (hx : x ‚àà E) (Œ¥ : ‚Ñù) : closedBall x Œ¥ ‚äÜ cthickening Œ¥ E := by\n  refine (closedBall_subset_cthickening_singleton _ _).trans (cthickening_subset_of_subset _ ?_)\n  simpa using hx\n\n"}
{"name":"Metric.cthickening_subset_iUnion_closedBall_of_lt","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nE : Set Œ±\nŒ¥ Œ¥' : Real\nhŒ¥‚ÇÄ : LT.lt 0 Œ¥'\nhŒ¥Œ¥' : LT.lt Œ¥ Œ¥'\n‚ä¢ HasSubset.Subset (Metric.cthickening Œ¥ E) (Set.iUnion fun x => Set.iUnion fun h => Metric.closedBall x Œ¥')","decl":"theorem cthickening_subset_iUnion_closedBall_of_lt {Œ± : Type*} [PseudoMetricSpace Œ±] (E : Set Œ±)\n    {Œ¥ Œ¥' : ‚Ñù} (hŒ¥‚ÇÄ : 0 < Œ¥') (hŒ¥Œ¥' : Œ¥ < Œ¥') : cthickening Œ¥ E ‚äÜ ‚ãÉ x ‚àà E, closedBall x Œ¥' := by\n  refine (cthickening_subset_thickening' hŒ¥‚ÇÄ hŒ¥Œ¥' E).trans fun x hx => ?_\n  obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := mem_thickening_iff.mp hx\n  exact mem_iUnion‚ÇÇ.mpr ‚ü®y, hy‚ÇÅ, hy‚ÇÇ.le‚ü©\n\n"}
{"name":"IsCompact.cthickening_eq_biUnion_closedBall","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u_2\ninst‚úù : PseudoMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nhE : IsCompact E\nhŒ¥ : LE.le 0 Œ¥\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iUnion fun x => Set.iUnion fun h => Metric.closedBall x Œ¥)","decl":"/-- The closed thickening of a compact set `E` is the union of the balls `Metric.closedBall x Œ¥`\nover `x ‚àà E`.\n\nSee also `Metric.cthickening_eq_biUnion_closedBall`. -/\ntheorem _root_.IsCompact.cthickening_eq_biUnion_closedBall {Œ± : Type*} [PseudoMetricSpace Œ±]\n    {Œ¥ : ‚Ñù} {E : Set Œ±} (hE : IsCompact E) (hŒ¥ : 0 ‚â§ Œ¥) :\n    cthickening Œ¥ E = ‚ãÉ x ‚àà E, closedBall x Œ¥ := by\n  rcases eq_empty_or_nonempty E with (rfl | hne)\n  ¬∑ simp only [cthickening_empty, biUnion_empty]\n  refine Subset.antisymm (fun x hx ‚Ü¶ ?_)\n    (iUnion‚ÇÇ_subset fun x hx ‚Ü¶ closedBall_subset_cthickening hx _)\n  obtain ‚ü®y, yE, hy‚ü© : ‚àÉ y ‚àà E, infEdist x E = edist x y := hE.exists_infEdist_eq_edist hne _\n  have D1 : edist x y ‚â§ ENNReal.ofReal Œ¥ := (le_of_eq hy.symm).trans hx\n  have D2 : dist x y ‚â§ Œ¥ := by\n    rw [edist_dist] at D1\n    exact (ENNReal.ofReal_le_ofReal_iff hŒ¥).1 D1\n  exact mem_biUnion yE D2\n\n"}
{"name":"Metric.cthickening_eq_biUnion_closedBall","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ¥ : Real\nŒ± : Type u_2\ninst‚úù¬π : PseudoMetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nE : Set Œ±\nhŒ¥ : LE.le 0 Œ¥\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iUnion fun x => Set.iUnion fun h => Metric.closedBall x Œ¥)","decl":"theorem cthickening_eq_biUnion_closedBall {Œ± : Type*} [PseudoMetricSpace Œ±] [ProperSpace Œ±]\n    (E : Set Œ±) (hŒ¥ : 0 ‚â§ Œ¥) : cthickening Œ¥ E = ‚ãÉ x ‚àà closure E, closedBall x Œ¥ := by\n  rcases eq_empty_or_nonempty E with (rfl | hne)\n  ¬∑ simp only [cthickening_empty, biUnion_empty, closure_empty]\n  rw [‚Üê cthickening_closure]\n  refine Subset.antisymm (fun x hx ‚Ü¶ ?_)\n    (iUnion‚ÇÇ_subset fun x hx ‚Ü¶ closedBall_subset_cthickening hx _)\n  obtain ‚ü®y, yE, hy‚ü© : ‚àÉ y ‚àà closure E, infDist x (closure E) = dist x y :=\n    isClosed_closure.exists_infDist_eq_dist (closure_nonempty_iff.mpr hne) x\n  replace hy : dist x y ‚â§ Œ¥ :=\n    (ENNReal.ofReal_le_ofReal_iff hŒ¥).mp\n      (((congr_arg ENNReal.ofReal hy.symm).le.trans ENNReal.ofReal_toReal_le).trans hx)\n  exact mem_biUnion yE hy\n\n"}
{"name":"IsClosed.cthickening_eq_biUnion_closedBall","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ¥ : Real\nŒ± : Type u_2\ninst‚úù¬π : PseudoMetricSpace Œ±\ninst‚úù : ProperSpace Œ±\nE : Set Œ±\nhE : IsClosed E\nhŒ¥ : LE.le 0 Œ¥\n‚ä¢ Eq (Metric.cthickening Œ¥ E) (Set.iUnion fun x => Set.iUnion fun h => Metric.closedBall x Œ¥)","decl":"nonrec theorem _root_.IsClosed.cthickening_eq_biUnion_closedBall {Œ± : Type*} [PseudoMetricSpace Œ±]\n    [ProperSpace Œ±] {E : Set Œ±} (hE : IsClosed E) (hŒ¥ : 0 ‚â§ Œ¥) :\n    cthickening Œ¥ E = ‚ãÉ x ‚àà E, closedBall x Œ¥ := by\n  rw [cthickening_eq_biUnion_closedBall E hŒ¥, hE.closure_eq]\n\n"}
{"name":"Metric.infEdist_le_infEdist_cthickening_add","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Œ±\nx : Œ±\n‚ä¢ LE.le (EMetric.infEdist x s) (HAdd.hAdd (EMetric.infEdist x (Metric.cthickening Œ¥ s)) (ENNReal.ofReal Œ¥))","decl":"/-- For the equality, see `infEdist_cthickening`. -/\ntheorem infEdist_le_infEdist_cthickening_add :\n    infEdist x s ‚â§ infEdist x (cthickening Œ¥ s) + ENNReal.ofReal Œ¥ := by\n  refine le_of_forall_lt' fun r h => ?_\n  simp_rw [‚Üê lt_tsub_iff_right, infEdist_lt_iff, mem_cthickening_iff] at h\n  obtain ‚ü®y, hy, hxy‚ü© := h\n  exact infEdist_le_edist_add_infEdist.trans_lt\n    ((ENNReal.add_lt_add_of_lt_of_le (hy.trans_lt ENNReal.ofReal_lt_top).ne hxy hy).trans_eq\n      (tsub_add_cancel_of_le <| le_self_add.trans (lt_tsub_iff_left.1 hxy).le))\n\n"}
{"name":"Metric.infEdist_le_infEdist_thickening_add","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\ns : Set Œ±\nx : Œ±\n‚ä¢ LE.le (EMetric.infEdist x s) (HAdd.hAdd (EMetric.infEdist x (Metric.thickening Œ¥ s)) (ENNReal.ofReal Œ¥))","decl":"/-- For the equality, see `infEdist_thickening`. -/\ntheorem infEdist_le_infEdist_thickening_add :\n    infEdist x s ‚â§ infEdist x (thickening Œ¥ s) + ENNReal.ofReal Œ¥ :=\n  infEdist_le_infEdist_cthickening_add.trans <|\n    add_le_add_right (infEdist_anti <| thickening_subset_cthickening _ _) _\n\n"}
{"name":"Metric.thickening_thickening_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒµ Œ¥ : Real\ns : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œµ (Metric.thickening Œ¥ s)) (Metric.thickening (HAdd.hAdd Œµ Œ¥) s)","decl":"/-- For the equality, see `thickening_thickening`. -/\n@[simp]\ntheorem thickening_thickening_subset (Œµ Œ¥ : ‚Ñù) (s : Set Œ±) :\n    thickening Œµ (thickening Œ¥ s) ‚äÜ thickening (Œµ + Œ¥) s := by\n  obtain hŒµ | hŒµ := le_total Œµ 0\n  ¬∑ simp only [thickening_of_nonpos hŒµ, empty_subset]\n  obtain hŒ¥ | hŒ¥ := le_total Œ¥ 0\n  ¬∑ simp only [thickening_of_nonpos hŒ¥, thickening_empty, empty_subset]\n  intro x\n  simp_rw [mem_thickening_iff_exists_edist_lt, ENNReal.ofReal_add hŒµ hŒ¥]\n  exact fun ‚ü®y, ‚ü®z, hz, hy‚ü©, hx‚ü© =>\n    ‚ü®z, hz, (edist_triangle _ _ _).trans_lt <| ENNReal.add_lt_add hx hy‚ü©\n\n"}
{"name":"Metric.thickening_cthickening_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ Œµ : Real\nhŒ¥ : LE.le 0 Œ¥\ns : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.thickening Œµ (Metric.cthickening Œ¥ s)) (Metric.thickening (HAdd.hAdd Œµ Œ¥) s)","decl":"/-- For the equality, see `thickening_cthickening`. -/\n@[simp]\ntheorem thickening_cthickening_subset (Œµ : ‚Ñù) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set Œ±) :\n    thickening Œµ (cthickening Œ¥ s) ‚äÜ thickening (Œµ + Œ¥) s := by\n  obtain hŒµ | hŒµ := le_total Œµ 0\n  ¬∑ simp only [thickening_of_nonpos hŒµ, empty_subset]\n  intro x\n  simp_rw [mem_thickening_iff_exists_edist_lt, mem_cthickening_iff, ‚Üê infEdist_lt_iff,\n    ENNReal.ofReal_add hŒµ hŒ¥]\n  rintro ‚ü®y, hy, hxy‚ü©\n  exact infEdist_le_edist_add_infEdist.trans_lt\n    (ENNReal.add_lt_add_of_lt_of_le (hy.trans_lt ENNReal.ofReal_lt_top).ne hxy hy)\n\n"}
{"name":"Metric.cthickening_thickening_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒµ : Real\nhŒµ : LE.le 0 Œµ\nŒ¥ : Real\ns : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.cthickening Œµ (Metric.thickening Œ¥ s)) (Metric.cthickening (HAdd.hAdd Œµ Œ¥) s)","decl":"/-- For the equality, see `cthickening_thickening`. -/\n@[simp]\ntheorem cthickening_thickening_subset (hŒµ : 0 ‚â§ Œµ) (Œ¥ : ‚Ñù) (s : Set Œ±) :\n    cthickening Œµ (thickening Œ¥ s) ‚äÜ cthickening (Œµ + Œ¥) s := by\n  obtain hŒ¥ | hŒ¥ := le_total Œ¥ 0\n  ¬∑ simp only [thickening_of_nonpos hŒ¥, cthickening_empty, empty_subset]\n  intro x\n  simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hŒµ hŒ¥]\n  exact fun hx => infEdist_le_infEdist_thickening_add.trans (add_le_add_right hx _)\n\n"}
{"name":"Metric.cthickening_cthickening_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ Œµ : Real\nhŒµ : LE.le 0 Œµ\nhŒ¥ : LE.le 0 Œ¥\ns : Set Œ±\n‚ä¢ HasSubset.Subset (Metric.cthickening Œµ (Metric.cthickening Œ¥ s)) (Metric.cthickening (HAdd.hAdd Œµ Œ¥) s)","decl":"/-- For the equality, see `cthickening_cthickening`. -/\n@[simp]\ntheorem cthickening_cthickening_subset (hŒµ : 0 ‚â§ Œµ) (hŒ¥ : 0 ‚â§ Œ¥) (s : Set Œ±) :\n    cthickening Œµ (cthickening Œ¥ s) ‚äÜ cthickening (Œµ + Œ¥) s := by\n  intro x\n  simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hŒµ hŒ¥]\n  exact fun hx => infEdist_le_infEdist_cthickening_add.trans (add_le_add_right hx _)\n\n"}
{"name":"Metric.frontier_cthickening_disjoint","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoEMetricSpace Œ±\nA : Set Œ±\n‚ä¢ Pairwise (Function.onFun Disjoint fun r => frontier (Metric.cthickening (‚Üër) A))","decl":"open scoped Function in -- required for scoped `on` notation\ntheorem frontier_cthickening_disjoint (A : Set Œ±) :\n    Pairwise (Disjoint on fun r : ‚Ñù‚â•0 => frontier (cthickening r A)) := fun r‚ÇÅ r‚ÇÇ hr =>\n  ((disjoint_singleton.2 <| by simpa).preimage _).mono (frontier_cthickening_subset _)\n    (frontier_cthickening_subset _)\n\n"}
{"name":"Metric.thickening_ball","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù : PseudoMetricSpace Œ±\nx : Œ±\nŒµ Œ¥ : Real\n‚ä¢ HasSubset.Subset (Metric.thickening Œµ (Metric.ball x Œ¥)) (Metric.ball x (HAdd.hAdd Œµ Œ¥))","decl":"theorem thickening_ball [PseudoMetricSpace Œ±] (x : Œ±) (Œµ Œ¥ : ‚Ñù) :\n    thickening Œµ (ball x Œ¥) ‚äÜ ball x (Œµ + Œ¥) := by\n  rw [‚Üê thickening_singleton, ‚Üê thickening_singleton]\n  apply thickening_thickening_subset\n\n"}
{"name":"IsCompact.exists_thickening_image_subset","module":"Mathlib.Topology.MetricSpace.Thickening","initialProofState":"Œ± : Type u\ninst‚úù¬π : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù : PseudoEMetricSpace Œ≤\nf : Œ± ‚Üí Œ≤\nK : Set Œ±\nU : Set Œ≤\nhK : IsCompact K\nho : IsOpen U\nhf : ‚àÄ (x : Œ±), Membership.mem K x ‚Üí ContinuousAt f x\nhKU : Set.MapsTo f K U\n‚ä¢ Exists fun Œµ => And (GT.gt Œµ 0) (Exists fun V => And (Membership.mem (nhdsSet K) V) (HasSubset.Subset (Metric.thickening Œµ (Set.image f V)) U))","decl":"open Metric in\ntheorem IsCompact.exists_thickening_image_subset\n    [PseudoEMetricSpace Œ±] {Œ≤ : Type*} [PseudoEMetricSpace Œ≤]\n    {f : Œ± ‚Üí Œ≤} {K : Set Œ±} {U : Set Œ≤} (hK : IsCompact K) (ho : IsOpen U)\n    (hf : ‚àÄ x ‚àà K, ContinuousAt f x) (hKU : MapsTo f K U) :\n    ‚àÉ Œµ > 0, ‚àÉ V ‚àà ùìùÀ¢ K, thickening Œµ (f '' V) ‚äÜ U := by\n  apply hK.induction_on (p := fun K ‚Ü¶ ‚àÉ Œµ > 0, ‚àÉ V ‚àà ùìùÀ¢ K, thickening Œµ (f '' V) ‚äÜ U)\n  ¬∑ use 1, by positivity, ‚àÖ, by simp, by simp\n  ¬∑ exact fun s t hst ‚ü®Œµ, hŒµ, V, hV, hthickening‚ü© ‚Ü¶ ‚ü®Œµ, hŒµ, V, nhdsSet_mono hst hV, hthickening‚ü©\n  ¬∑ rintro s t ‚ü®Œµ‚ÇÅ, hŒµ‚ÇÅ, V‚ÇÅ, hV‚ÇÅ, hV‚ÇÅthickening‚ü© ‚ü®Œµ‚ÇÇ, hŒµ‚ÇÇ, V‚ÇÇ, hV‚ÇÇ, hV‚ÇÇthickening‚ü©\n    refine ‚ü®min Œµ‚ÇÅ Œµ‚ÇÇ, by positivity, V‚ÇÅ ‚à™ V‚ÇÇ, union_mem_nhdsSet hV‚ÇÅ hV‚ÇÇ, ?_‚ü©\n    rw [image_union, thickening_union]\n    calc thickening (Œµ‚ÇÅ ‚äì Œµ‚ÇÇ) (f '' V‚ÇÅ) ‚à™ thickening (Œµ‚ÇÅ ‚äì Œµ‚ÇÇ) (f '' V‚ÇÇ)\n      _ ‚äÜ thickening Œµ‚ÇÅ (f '' V‚ÇÅ) ‚à™ thickening Œµ‚ÇÇ (f '' V‚ÇÇ) := by gcongr <;> norm_num\n      _ ‚äÜ U ‚à™ U := by gcongr\n      _ = U := union_self _\n  ¬∑ intro x hx\n    have : {f x} ‚äÜ U := by rw [singleton_subset_iff]; exact hKU hx\n    obtain ‚ü®Œ¥, hŒ¥, hthick‚ü© := (isCompact_singleton (x := f x)).exists_thickening_subset_open ho this\n    let V := f ‚Åª¬π' (thickening (Œ¥ / 2) {f x})\n    have : V ‚àà ùìù x := by\n      apply hf x hx\n      apply isOpen_thickening.mem_nhds\n      exact (self_subset_thickening (by positivity) _) rfl\n    refine ‚ü®K ‚à© (interior V), inter_mem_nhdsWithin K (interior_mem_nhds.mpr this),\n      Œ¥ / 2, by positivity, V, by rw [‚Üê subset_interior_iff_mem_nhdsSet]; simp, ?_‚ü©\n    calc thickening (Œ¥ / 2) (f '' V)\n      _ ‚äÜ thickening (Œ¥ / 2) (thickening (Œ¥ / 2) {f x}) :=\n        thickening_subset_of_subset _ (image_preimage_subset f _)\n      _ ‚äÜ thickening ((Œ¥ / 2) + (Œ¥ / 2)) ({f x}) :=\n        thickening_thickening_subset (Œ¥ / 2) (Œ¥ / 2) {f x}\n      _ ‚äÜ U := by simp [hthick]\n"}
