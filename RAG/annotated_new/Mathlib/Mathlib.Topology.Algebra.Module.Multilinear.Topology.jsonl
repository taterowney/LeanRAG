{"name":"ContinuousMultilinearMap.range_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : DecidableEq ι\ninst✝ : TopologicalSpace F\n⊢ Eq (Set.range ContinuousMultilinearMap.toUniformOnFun) (setOf fun f => And (Continuous ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f)) (And (∀ (m : (i : ι) → E i) (i : ι) (x y : E i), Eq ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f (Function.update m i (HAdd.hAdd x y))) (HAdd.hAdd ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f (Function.update m i x)) ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f (Function.update m i y)))) (∀ (m : (i : ι) → E i) (i : ι) (c : 𝕜) (x : E i), Eq ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f (Function.update m i (HSMul.hSMul c x))) (HSMul.hSMul c ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f (Function.update m i x))))))","decl":"open UniformOnFun in\nlemma range_toUniformOnFun [DecidableEq ι] [TopologicalSpace F] :\n    range toUniformOnFun =\n      {f : (Π i, E i) →ᵤ[{s | IsVonNBounded 𝕜 s}] F |\n        Continuous (toFun _ f) ∧\n        (∀ (m : Π i, E i) i x y,\n          toFun _ f (update m i (x + y)) = toFun _ f (update m i x) + toFun _ f (update m i y)) ∧\n        (∀ (m : Π i, E i) i (c : 𝕜) x,\n          toFun _ f (update m i (c • x)) = c • toFun _ f (update m i x))} := by\n  ext f\n  constructor\n  · rintro ⟨f, rfl⟩\n    exact ⟨f.cont, f.map_update_add, f.map_update_smul⟩\n  · rintro ⟨hcont, hadd, hsmul⟩\n    exact ⟨⟨⟨f, by intro; convert hadd, by intro; convert hsmul⟩, hcont⟩, rfl⟩\n\n"}
{"name":"ContinuousMultilinearMap.toUniformOnFun_toFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁶ : NormedField 𝕜\ninst✝⁵ : (i : ι) → TopologicalSpace (E i)\ninst✝⁴ : (i : ι) → AddCommGroup (E i)\ninst✝³ : (i : ι) → Module 𝕜 (E i)\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜 F\ninst✝ : TopologicalSpace F\nf : ContinuousMultilinearMap 𝕜 E F\n⊢ Eq ((UniformOnFun.toFun (setOf fun s => Bornology.IsVonNBounded 𝕜 s)) f.toUniformOnFun) ⇑f","decl":"@[simp]\nlemma toUniformOnFun_toFun [TopologicalSpace F] (f : ContinuousMultilinearMap 𝕜 E F) :\n    UniformOnFun.toFun _ f.toUniformOnFun = f :=\n  rfl\n\n"}
{"name":"ContinuousMultilinearMap.isUniformInducing_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformInducing ContinuousMultilinearMap.toUniformOnFun","decl":"lemma isUniformInducing_toUniformOnFun :\n    IsUniformInducing (toUniformOnFun :\n      ContinuousMultilinearMap 𝕜 E F → ((Π i, E i) →ᵤ[{s | IsVonNBounded 𝕜 s}] F)) := ⟨rfl⟩\n\n"}
{"name":"ContinuousMultilinearMap.isUniformEmbedding_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformEmbedding ContinuousMultilinearMap.toUniformOnFun","decl":"lemma isUniformEmbedding_toUniformOnFun :\n    IsUniformEmbedding (toUniformOnFun : ContinuousMultilinearMap 𝕜 E F → _) :=\n  ⟨isUniformInducing_toUniformOnFun, DFunLike.coe_injective⟩\n\n"}
{"name":"ContinuousMultilinearMap.uniformEmbedding_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformEmbedding ContinuousMultilinearMap.toUniformOnFun","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_toUniformOnFun := isUniformEmbedding_toUniformOnFun\n\n"}
{"name":"ContinuousMultilinearMap.isEmbedding_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ Topology.IsEmbedding ContinuousMultilinearMap.toUniformOnFun","decl":"lemma isEmbedding_toUniformOnFun :\n    IsEmbedding (toUniformOnFun : ContinuousMultilinearMap 𝕜 E F →\n      ((Π i, E i) →ᵤ[{s | IsVonNBounded 𝕜 s}] F)) :=\n  isUniformEmbedding_toUniformOnFun.isEmbedding\n\n"}
{"name":"ContinuousMultilinearMap.embedding_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ Topology.IsEmbedding ContinuousMultilinearMap.toUniformOnFun","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_toUniformOnFun := isEmbedding_toUniformOnFun\n\n"}
{"name":"ContinuousMultilinearMap.uniformContinuous_coe_fun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : (i : ι) → TopologicalSpace (E i)\ninst✝⁶ : (i : ι) → AddCommGroup (E i)\ninst✝⁵ : (i : ι) → Module 𝕜 (E i)\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : UniformSpace F\ninst✝¹ : UniformAddGroup F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n⊢ UniformContinuous DFunLike.coe","decl":"theorem uniformContinuous_coe_fun [∀ i, ContinuousSMul 𝕜 (E i)] :\n    UniformContinuous (DFunLike.coe : ContinuousMultilinearMap 𝕜 E F → (Π i, E i) → F) :=\n  (UniformOnFun.uniformContinuous_toFun isVonNBounded_covers).comp\n    isUniformEmbedding_toUniformOnFun.uniformContinuous\n\n"}
{"name":"ContinuousMultilinearMap.uniformContinuous_eval_const","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : (i : ι) → TopologicalSpace (E i)\ninst✝⁶ : (i : ι) → AddCommGroup (E i)\ninst✝⁵ : (i : ι) → Module 𝕜 (E i)\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : UniformSpace F\ninst✝¹ : UniformAddGroup F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\nx : (i : ι) → E i\n⊢ UniformContinuous fun f => f x","decl":"theorem uniformContinuous_eval_const [∀ i, ContinuousSMul 𝕜 (E i)] (x : Π i, E i) :\n    UniformContinuous fun f : ContinuousMultilinearMap 𝕜 E F ↦ f x :=\n  uniformContinuous_pi.1 uniformContinuous_coe_fun x\n\n"}
{"name":"ContinuousMultilinearMap.instUniformAddGroup","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ UniformAddGroup (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instUniformAddGroup : UniformAddGroup (ContinuousMultilinearMap 𝕜 E F) :=\n  let φ : ContinuousMultilinearMap 𝕜 E F →+ (Π i, E i) →ᵤ[{s | IsVonNBounded 𝕜 s}] F :=\n    { toFun := toUniformOnFun, map_add' := fun _ _ ↦ rfl, map_zero' := rfl }\n  isUniformEmbedding_toUniformOnFun.uniformAddGroup φ\n\n"}
{"name":"ContinuousMultilinearMap.instUniformContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : (i : ι) → TopologicalSpace (E i)\ninst✝⁹ : (i : ι) → AddCommGroup (E i)\ninst✝⁸ : (i : ι) → Module 𝕜 (E i)\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : UniformSpace F\ninst✝⁴ : UniformAddGroup F\nM : Type u_5\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M F\ninst✝¹ : SMulCommClass 𝕜 M F\ninst✝ : ContinuousConstSMul M F\n⊢ UniformContinuousConstSMul M (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instUniformContinuousConstSMul {M : Type*}\n    [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜 M F] [ContinuousConstSMul M F] :\n    UniformContinuousConstSMul M (ContinuousMultilinearMap 𝕜 E F) :=\n  haveI := uniformContinuousConstSMul_of_continuousConstSMul M F\n  isUniformEmbedding_toUniformOnFun.uniformContinuousConstSMul fun _ _ ↦ rfl\n\n"}
{"name":"ContinuousMultilinearMap.isUniformInducing_postcomp","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : (i : ι) → TopologicalSpace (E i)\ninst✝⁹ : (i : ι) → AddCommGroup (E i)\ninst✝⁸ : (i : ι) → Module 𝕜 (E i)\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : UniformSpace F\ninst✝⁴ : UniformAddGroup F\nG : Type u_5\ninst✝³ : AddCommGroup G\ninst✝² : UniformSpace G\ninst✝¹ : UniformAddGroup G\ninst✝ : Module 𝕜 G\ng : ContinuousLinearMap (RingHom.id 𝕜) F G\nhg : IsUniformInducing ⇑g\n⊢ IsUniformInducing g.compContinuousMultilinearMap","decl":"theorem isUniformInducing_postcomp\n    {G : Type*} [AddCommGroup G] [UniformSpace G] [UniformAddGroup G] [Module 𝕜 G]\n    (g : F →L[𝕜] G) (hg : IsUniformInducing g) :\n    IsUniformInducing (g.compContinuousMultilinearMap :\n      ContinuousMultilinearMap 𝕜 E F → ContinuousMultilinearMap 𝕜 E G) := by\n  rw [← isUniformInducing_toUniformOnFun.of_comp_iff]\n  exact (UniformOnFun.postcomp_isUniformInducing hg).comp isUniformInducing_toUniformOnFun\n\n"}
{"name":"ContinuousMultilinearMap.completeSpace","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁰ : NormedField 𝕜\ninst✝⁹ : (i : ι) → TopologicalSpace (E i)\ninst✝⁸ : (i : ι) → AddCommGroup (E i)\ninst✝⁷ : (i : ι) → Module 𝕜 (E i)\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : UniformSpace F\ninst✝³ : UniformAddGroup F\ninst✝² : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\ninst✝¹ : ContinuousConstSMul 𝕜 F\ninst✝ : CompleteSpace F\nh : Topology.RestrictGenTopology (setOf fun s => Bornology.IsVonNBounded 𝕜 s)\n⊢ CompleteSpace (ContinuousMultilinearMap 𝕜 E F)","decl":"open UniformOnFun in\ntheorem completeSpace (h : RestrictGenTopology {s : Set (Π i, E i) | IsVonNBounded 𝕜 s}) :\n    CompleteSpace (ContinuousMultilinearMap 𝕜 E F) := by\n  classical\n  wlog hF : T2Space F generalizing F\n  · rw [(isUniformInducing_postcomp (SeparationQuotient.mkCLM _ _)\n      SeparationQuotient.isUniformInducing_mk).completeSpace_congr]\n    · exact this inferInstance\n    · intro f\n      use (SeparationQuotient.outCLM _ _).compContinuousMultilinearMap f\n      simp [DFunLike.ext_iff]\n  have H : ∀ {m : Π i, E i},\n      Continuous fun f : (Π i, E i) →ᵤ[{s | IsVonNBounded 𝕜 s}] F ↦ toFun _ f m :=\n    (uniformContinuous_eval (isVonNBounded_covers) _).continuous\n  rw [completeSpace_iff_isComplete_range isUniformInducing_toUniformOnFun, range_toUniformOnFun]\n  simp only [setOf_and, setOf_forall]\n  apply_rules [IsClosed.isComplete, IsClosed.inter]\n  · exact UniformOnFun.isClosed_setOf_continuous h\n  · exact isClosed_iInter fun m ↦ isClosed_iInter fun i ↦\n      isClosed_iInter fun x ↦ isClosed_iInter fun y ↦ isClosed_eq H (H.add H)\n  · exact isClosed_iInter fun m ↦ isClosed_iInter fun i ↦\n      isClosed_iInter fun c ↦ isClosed_iInter fun x ↦ isClosed_eq H (H.const_smul _)\n\n"}
{"name":"ContinuousMultilinearMap.instCompleteSpace","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : (i : ι) → TopologicalSpace (E i)\ninst✝¹⁰ : (i : ι) → AddCommGroup (E i)\ninst✝⁹ : (i : ι) → Module 𝕜 (E i)\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : UniformSpace F\ninst✝⁵ : UniformAddGroup F\ninst✝⁴ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\ninst✝³ : ContinuousConstSMul 𝕜 F\ninst✝² : CompleteSpace F\ninst✝¹ : ∀ (i : ι), TopologicalAddGroup (E i)\ninst✝ : SequentialSpace ((i : ι) → E i)\n⊢ CompleteSpace (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instCompleteSpace [∀ i, TopologicalAddGroup (E i)] [SequentialSpace (Π i, E i)] :\n    CompleteSpace (ContinuousMultilinearMap 𝕜 E F) :=\n  completeSpace <| .of_seq fun _u x hux ↦ (hux.isVonNBounded_range 𝕜).insert x\n\n"}
{"name":"ContinuousMultilinearMap.isUniformEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : (i : ι) → Module 𝕜' (E i)\ninst✝³ : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n⊢ IsUniformEmbedding (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"theorem isUniformEmbedding_restrictScalars :\n    IsUniformEmbedding\n      (restrictScalars 𝕜' : ContinuousMultilinearMap 𝕜 E F → ContinuousMultilinearMap 𝕜' E F) := by\n  letI : NontriviallyNormedField 𝕜 :=\n    ⟨let ⟨x, hx⟩ := @NontriviallyNormedField.non_trivial 𝕜' _; ⟨algebraMap 𝕜' 𝕜 x, by simpa⟩⟩\n  rw [← isUniformEmbedding_toUniformOnFun.of_comp_iff]\n  convert isUniformEmbedding_toUniformOnFun using 4 with s\n  exact ⟨fun h ↦ h.extend_scalars _, fun h ↦ h.restrict_scalars _⟩\n\n"}
{"name":"ContinuousMultilinearMap.uniformEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : (i : ι) → Module 𝕜' (E i)\ninst✝³ : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n⊢ IsUniformEmbedding (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_restrictScalars := isUniformEmbedding_restrictScalars\n\n"}
{"name":"ContinuousMultilinearMap.uniformContinuous_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : (i : ι) → Module 𝕜' (E i)\ninst✝³ : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n⊢ UniformContinuous (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"theorem uniformContinuous_restrictScalars :\n    UniformContinuous\n      (restrictScalars 𝕜' : ContinuousMultilinearMap 𝕜 E F → ContinuousMultilinearMap 𝕜' E F) :=\n  (isUniformEmbedding_restrictScalars 𝕜').uniformContinuous\n\n"}
{"name":"ContinuousMultilinearMap.instTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ TopologicalAddGroup (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instTopologicalAddGroup : TopologicalAddGroup (ContinuousMultilinearMap 𝕜 E F) :=\n  letI := TopologicalAddGroup.toUniformSpace F\n  haveI := comm_topologicalAddGroup_is_uniform (G := F)\n  inferInstance\n\n"}
{"name":"ContinuousMultilinearMap.instContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹¹ : NormedField 𝕜\ninst✝¹⁰ : (i : ι) → TopologicalSpace (E i)\ninst✝⁹ : (i : ι) → AddCommGroup (E i)\ninst✝⁸ : (i : ι) → Module 𝕜 (E i)\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalAddGroup F\nM : Type u_5\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M F\ninst✝¹ : SMulCommClass 𝕜 M F\ninst✝ : ContinuousConstSMul M F\n⊢ ContinuousConstSMul M (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instContinuousConstSMul\n    {M : Type*} [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜 M F] [ContinuousConstSMul M F] :\n    ContinuousConstSMul M (ContinuousMultilinearMap 𝕜 E F) := by\n  letI := TopologicalAddGroup.toUniformSpace F\n  haveI := comm_topologicalAddGroup_is_uniform (G := F)\n  infer_instance\n\n"}
{"name":"ContinuousMultilinearMap.instContinuousSMul","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : (i : ι) → TopologicalSpace (E i)\ninst✝⁶ : (i : ι) → AddCommGroup (E i)\ninst✝⁵ : (i : ι) → Module 𝕜 (E i)\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜 F\n⊢ ContinuousSMul 𝕜 (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instContinuousSMul [ContinuousSMul 𝕜 F] :\n    ContinuousSMul 𝕜 (ContinuousMultilinearMap 𝕜 E F) :=\n  letI := TopologicalAddGroup.toUniformSpace F\n  haveI := comm_topologicalAddGroup_is_uniform (G := F)\n  let φ : ContinuousMultilinearMap 𝕜 E F →ₗ[𝕜] (Π i, E i) → F :=\n    { toFun := (↑), map_add' := fun _ _ ↦ rfl, map_smul' := fun _ _ ↦ rfl }\n  UniformOnFun.continuousSMul_induced_of_image_bounded _ _ _ _ φ\n    isEmbedding_toUniformOnFun.isInducing fun _ _ hu ↦ hu.image_multilinear _\n\n"}
{"name":"ContinuousMultilinearMap.hasBasis_nhds_zero_of_basis","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι✝ : Type u_2\nE : ι✝ → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι✝) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι✝) → AddCommGroup (E i)\ninst✝⁴ : (i : ι✝) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\nι : Type u_5\np : ι → Prop\nb : ι → Set F\nh : (nhds 0).HasBasis p b\n⊢ (nhds 0).HasBasis (fun Si => And (Bornology.IsVonNBounded 𝕜 Si.1) (p Si.2)) fun Si => setOf fun f => Set.MapsTo (⇑f) Si.1 (b Si.2)","decl":"theorem hasBasis_nhds_zero_of_basis {ι : Type*} {p : ι → Prop} {b : ι → Set F}\n    (h : (𝓝 (0 : F)).HasBasis p b) :\n    (𝓝 (0 : ContinuousMultilinearMap 𝕜 E F)).HasBasis\n      (fun Si : Set (Π i, E i) × ι => IsVonNBounded 𝕜 Si.1 ∧ p Si.2)\n      fun Si => { f | MapsTo f Si.1 (b Si.2) } := by\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  rw [nhds_induced]\n  refine (UniformOnFun.hasBasis_nhds_zero_of_basis _ ?_ ?_ h).comap DFunLike.coe\n  · exact ⟨∅, isVonNBounded_empty _ _⟩\n  · exact directedOn_of_sup_mem fun _ _ => Bornology.IsVonNBounded.union\n\n"}
{"name":"ContinuousMultilinearMap.hasBasis_nhds_zero","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁷ : NormedField 𝕜\ninst✝⁶ : (i : ι) → TopologicalSpace (E i)\ninst✝⁵ : (i : ι) → AddCommGroup (E i)\ninst✝⁴ : (i : ι) → Module 𝕜 (E i)\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ (nhds 0).HasBasis (fun SV => And (Bornology.IsVonNBounded 𝕜 SV.1) (Membership.mem (nhds 0) SV.2)) fun SV => setOf fun f => Set.MapsTo (⇑f) SV.1 SV.2","decl":"theorem hasBasis_nhds_zero :\n    (𝓝 (0 : ContinuousMultilinearMap 𝕜 E F)).HasBasis\n      (fun SV : Set (Π i, E i) × Set F => IsVonNBounded 𝕜 SV.1 ∧ SV.2 ∈ 𝓝 0) fun SV =>\n      { f | MapsTo f SV.1 SV.2 } :=\n  hasBasis_nhds_zero_of_basis (Filter.basis_sets _)\n\n"}
{"name":"ContinuousMultilinearMap.instContinuousEvalConstForall","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : (i : ι) → TopologicalSpace (E i)\ninst✝⁶ : (i : ι) → AddCommGroup (E i)\ninst✝⁵ : (i : ι) → Module 𝕜 (E i)\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n⊢ ContinuousEvalConst (ContinuousMultilinearMap 𝕜 E F) ((i : ι) → E i) F","decl":"instance : ContinuousEvalConst (ContinuousMultilinearMap 𝕜 E F) (Π i, E i) F where\n  continuous_eval_const x :=\n    let _ := TopologicalAddGroup.toUniformSpace F\n    have _ := comm_topologicalAddGroup_is_uniform (G := F)\n    (uniformContinuous_eval_const x).continuous\n\n"}
{"name":"ContinuousMultilinearMap.continuous_eval_const","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"F : Type u_1\nα : outParam (Type u_2)\nX : outParam (Type u_3)\ninst✝² : FunLike F α X\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalSpace X\nself : ContinuousEvalConst F α X\nx : α\n⊢ Continuous fun f => f x","decl":"@[deprecated (since := \"2024-10-05\")] protected alias continuous_eval_const := continuous_eval_const\n"}
{"name":"ContinuousMultilinearMap.continuous_coe_fun","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"F : Type u_1\nα : Type u_2\nX : Type u_3\ninst✝³ : FunLike F α X\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalSpace X\ninst✝ : ContinuousEvalConst F α X\n⊢ Continuous DFunLike.coe","decl":"@[deprecated (since := \"2024-10-05\")] protected alias continuous_coe_fun := continuous_coeFun\n\n"}
{"name":"ContinuousMultilinearMap.instT2Space","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : (i : ι) → TopologicalSpace (E i)\ninst✝⁷ : (i : ι) → AddCommGroup (E i)\ninst✝⁶ : (i : ι) → Module 𝕜 (E i)\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\ninst✝ : T2Space F\n⊢ T2Space (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instT2Space [T2Space F] : T2Space (ContinuousMultilinearMap 𝕜 E F) :=\n  .of_injective_continuous DFunLike.coe_injective continuous_coeFun\n\n"}
{"name":"ContinuousMultilinearMap.instT3Space","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : (i : ι) → TopologicalSpace (E i)\ninst✝⁷ : (i : ι) → AddCommGroup (E i)\ninst✝⁶ : (i : ι) → Module 𝕜 (E i)\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\ninst✝ : T2Space F\n⊢ T3Space (ContinuousMultilinearMap 𝕜 E F)","decl":"instance instT3Space [T2Space F] : T3Space (ContinuousMultilinearMap 𝕜 E F) :=\n  inferInstance\n\n"}
{"name":"ContinuousMultilinearMap.isEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n𝕜' : Type u_5\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : (i : ι) → Module 𝕜' (E i)\ninst✝² : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Topology.IsEmbedding (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"theorem isEmbedding_restrictScalars :\n    IsEmbedding\n      (restrictScalars 𝕜' : ContinuousMultilinearMap 𝕜 E F → ContinuousMultilinearMap 𝕜' E F) :=\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  (isUniformEmbedding_restrictScalars _).isEmbedding\n\n"}
{"name":"ContinuousMultilinearMap.embedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n𝕜' : Type u_5\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : (i : ι) → Module 𝕜' (E i)\ninst✝² : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Topology.IsEmbedding (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_restrictScalars := isEmbedding_restrictScalars\n\n"}
{"name":"ContinuousMultilinearMap.continuous_restrictScalars","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\n𝕜' : Type u_5\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : (i : ι) → Module 𝕜' (E i)\ninst✝² : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Continuous (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"@[continuity, fun_prop]\ntheorem continuous_restrictScalars :\n    Continuous\n      (restrictScalars 𝕜' : ContinuousMultilinearMap 𝕜 E F → ContinuousMultilinearMap 𝕜' E F) :=\n   isEmbedding_restrictScalars.continuous\n\n"}
{"name":"ContinuousMultilinearMap.restrictScalarsLinear_apply","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝¹⁴ : NormedField 𝕜\ninst✝¹³ : (i : ι) → TopologicalSpace (E i)\ninst✝¹² : (i : ι) → AddCommGroup (E i)\ninst✝¹¹ : (i : ι) → Module 𝕜 (E i)\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜 F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\n𝕜' : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜'\ninst✝⁵ : NormedAlgebra 𝕜' 𝕜\ninst✝⁴ : (i : ι) → Module 𝕜' (E i)\ninst✝³ : ∀ (i : ι), IsScalarTower 𝕜' 𝕜 (E i)\ninst✝² : Module 𝕜' F\ninst✝¹ : IsScalarTower 𝕜' 𝕜 F\ninst✝ : ContinuousConstSMul 𝕜' F\n⊢ Eq (⇑(ContinuousMultilinearMap.restrictScalarsLinear 𝕜')) (ContinuousMultilinearMap.restrictScalars 𝕜')","decl":"variable (𝕜') in\n/-- `ContinuousMultilinearMap.restrictScalars` as a `ContinuousLinearMap`. -/\n@[simps (config := .asFn) apply]\ndef restrictScalarsLinear [ContinuousConstSMul 𝕜' F] :\n    ContinuousMultilinearMap 𝕜 E F →L[𝕜'] ContinuousMultilinearMap 𝕜' E F where\n  toFun := restrictScalars 𝕜'\n  map_add' _ _ := rfl\n  map_smul' _ _ := rfl\n\n"}
{"name":"ContinuousMultilinearMap.apply_apply","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : (i : ι) → TopologicalSpace (E i)\ninst✝⁷ : (i : ι) → AddCommGroup (E i)\ninst✝⁶ : (i : ι) → Module 𝕜 (E i)\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\ninst✝ : ContinuousConstSMul 𝕜 F\nm : (i : ι) → E i\nc : ContinuousMultilinearMap 𝕜 E F\n⊢ Eq ((ContinuousMultilinearMap.apply 𝕜 E F m) c) (c m)","decl":"@[simp]\nlemma apply_apply [ContinuousConstSMul 𝕜 F] {m : Π i, E i} {c : ContinuousMultilinearMap 𝕜 E F} :\n    apply 𝕜 E F m c = c m := rfl\n\n"}
{"name":"ContinuousMultilinearMap.hasSum_eval","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁸ : NormedField 𝕜\ninst✝⁷ : (i : ι) → TopologicalSpace (E i)\ninst✝⁶ : (i : ι) → AddCommGroup (E i)\ninst✝⁵ : (i : ι) → Module 𝕜 (E i)\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\nα : Type u_5\np : α → ContinuousMultilinearMap 𝕜 E F\nq : ContinuousMultilinearMap 𝕜 E F\nh : HasSum p q\nm : (i : ι) → E i\n⊢ HasSum (fun a => (p a) m) (q m)","decl":"theorem hasSum_eval {α : Type*} {p : α → ContinuousMultilinearMap 𝕜 E F}\n    {q : ContinuousMultilinearMap 𝕜 E F} (h : HasSum p q) (m : Π i, E i) :\n    HasSum (fun a => p a m) (q m) :=\n  h.map (applyAddHom m) (continuous_eval_const m)\n\n"}
{"name":"ContinuousMultilinearMap.tsum_eval","module":"Mathlib.Topology.Algebra.Module.Multilinear.Topology","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nF : Type u_4\ninst✝⁹ : NormedField 𝕜\ninst✝⁸ : (i : ι) → TopologicalSpace (E i)\ninst✝⁷ : (i : ι) → AddCommGroup (E i)\ninst✝⁶ : (i : ι) → Module 𝕜 (E i)\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ∀ (i : ι), ContinuousSMul 𝕜 (E i)\ninst✝ : T2Space F\nα : Type u_5\np : α → ContinuousMultilinearMap 𝕜 E F\nhp : Summable p\nm : (i : ι) → E i\n⊢ Eq ((tsum fun a => p a) m) (tsum fun a => (p a) m)","decl":"theorem tsum_eval [T2Space F] {α : Type*} {p : α → ContinuousMultilinearMap 𝕜 E F} (hp : Summable p)\n    (m : Π i, E i) : (∑' a, p a) m = ∑' a, p a m :=\n  (hasSum_eval hp.hasSum m).tsum_eq.symm\n\n"}
