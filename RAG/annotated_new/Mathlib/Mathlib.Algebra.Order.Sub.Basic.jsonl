{"name":"add_tsub_cancel_iff_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Iff (Eq (HAdd.hAdd a (HSub.hSub b a)) b) (LE.le a b)","decl":"theorem add_tsub_cancel_iff_le : a + (b - a) = b ↔ a ≤ b :=\n  ⟨fun h => le_iff_exists_add.mpr ⟨b - a, h.symm⟩, add_tsub_cancel_of_le⟩\n\n"}
{"name":"tsub_add_cancel_iff_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Iff (Eq (HAdd.hAdd (HSub.hSub b a) a) b) (LE.le a b)","decl":"theorem tsub_add_cancel_iff_le : b - a + a = b ↔ a ≤ b := by\n  rw [add_comm]\n  exact add_tsub_cancel_iff_le\n\n-- This was previously a `@[simp]` lemma, but it is not necessarily a good idea, e.g. in\n-- `example (h : n - m = 0) : a + (n - m) = a := by simp_all`\n"}
{"name":"tsub_eq_zero_iff_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Iff (Eq (HSub.hSub a b) 0) (LE.le a b)","decl":"theorem tsub_eq_zero_iff_le : a - b = 0 ↔ a ≤ b := by\n  rw [← nonpos_iff_eq_zero, tsub_le_iff_left, add_zero]\n\n"}
{"name":"tsub_eq_zero_of_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\na✝ : LE.le a b\n⊢ Eq (HSub.hSub a b) 0","decl":"alias ⟨_, tsub_eq_zero_of_le⟩ := tsub_eq_zero_iff_le\n\n"}
{"name":"tsub_self","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na : α\n⊢ Eq (HSub.hSub a a) 0","decl":"@[simp]\ntheorem tsub_self (a : α) : a - a = 0 :=\n  tsub_eq_zero_of_le le_rfl\n\n"}
{"name":"tsub_le_self","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ LE.le (HSub.hSub a b) a","decl":"theorem tsub_le_self : a - b ≤ a :=\n  tsub_le_iff_left.mpr <| le_add_left le_rfl\n\n"}
{"name":"zero_tsub","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na : α\n⊢ Eq (HSub.hSub 0 a) 0","decl":"theorem zero_tsub (a : α) : 0 - a = 0 :=\n  tsub_eq_zero_of_le <| zero_le a\n\n"}
{"name":"tsub_self_add","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Eq (HSub.hSub a (HAdd.hAdd a b)) 0","decl":"theorem tsub_self_add (a b : α) : a - (a + b) = 0 :=\n  tsub_eq_zero_of_le <| self_le_add_right _ _\n\n"}
{"name":"tsub_pos_iff_not_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Iff (LT.lt 0 (HSub.hSub a b)) (Not (LE.le a b))","decl":"theorem tsub_pos_iff_not_le : 0 < a - b ↔ ¬a ≤ b := by\n  rw [pos_iff_ne_zero, Ne, tsub_eq_zero_iff_le]\n\n"}
{"name":"tsub_pos_of_lt","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nh : LT.lt a b\n⊢ LT.lt 0 (HSub.hSub b a)","decl":"theorem tsub_pos_of_lt (h : a < b) : 0 < b - a :=\n  tsub_pos_iff_not_le.mpr h.not_le\n\n"}
{"name":"tsub_lt_of_lt","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nh : LT.lt a b\n⊢ LT.lt (HSub.hSub a c) b","decl":"theorem tsub_lt_of_lt (h : a < b) : a - c < b :=\n  lt_of_le_of_lt tsub_le_self h\n\n"}
{"name":"AddLECancellable.tsub_le_tsub_iff_left","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nha : AddLECancellable a\nhc : AddLECancellable c\nh : LE.le c a\n⊢ Iff (LE.le (HSub.hSub a b) (HSub.hSub a c)) (LE.le c b)","decl":"protected theorem tsub_le_tsub_iff_left (ha : AddLECancellable a) (hc : AddLECancellable c)\n    (h : c ≤ a) : a - b ≤ a - c ↔ c ≤ b := by\n  refine ⟨?_, fun h => tsub_le_tsub_left h a⟩\n  rw [tsub_le_iff_left, ← hc.add_tsub_assoc_of_le h, hc.le_tsub_iff_right (h.trans le_add_self),\n    add_comm b]\n  apply ha\n\n"}
{"name":"AddLECancellable.tsub_right_inj","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : AddCommMonoid α\ninst✝³ : PartialOrder α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nha : AddLECancellable a\nhb : AddLECancellable b\nhc : AddLECancellable c\nhba : LE.le b a\nhca : LE.le c a\n⊢ Iff (Eq (HSub.hSub a b) (HSub.hSub a c)) (Eq b c)","decl":"protected theorem tsub_right_inj (ha : AddLECancellable a) (hb : AddLECancellable b)\n    (hc : AddLECancellable c) (hba : b ≤ a) (hca : c ≤ a) : a - b = a - c ↔ b = c := by\n  simp_rw [le_antisymm_iff, ha.tsub_le_tsub_iff_left hb hba, ha.tsub_le_tsub_iff_left hc hca,\n    and_comm]\n\n"}
{"name":"tsub_le_tsub_iff_left","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁵ : AddCommMonoid α\ninst✝⁴ : PartialOrder α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LE.le c a\n⊢ Iff (LE.le (HSub.hSub a b) (HSub.hSub a c)) (LE.le c b)","decl":"theorem tsub_le_tsub_iff_left (h : c ≤ a) : a - b ≤ a - c ↔ c ≤ b :=\n  Contravariant.AddLECancellable.tsub_le_tsub_iff_left Contravariant.AddLECancellable h\n\n"}
{"name":"tsub_right_inj","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁵ : AddCommMonoid α\ninst✝⁴ : PartialOrder α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nhba : LE.le b a\nhca : LE.le c a\n⊢ Iff (Eq (HSub.hSub a b) (HSub.hSub a c)) (Eq b c)","decl":"theorem tsub_right_inj (hba : b ≤ a) (hca : c ≤ a) : a - b = a - c ↔ b = c :=\n  Contravariant.AddLECancellable.tsub_right_inj Contravariant.AddLECancellable\n    Contravariant.AddLECancellable hba hca\n\n"}
{"name":"tsub_pos_iff_lt","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Iff (LT.lt 0 (HSub.hSub a b)) (LT.lt b a)","decl":"@[simp]\ntheorem tsub_pos_iff_lt : 0 < a - b ↔ b < a := by rw [tsub_pos_iff_not_le, not_le]\n\n"}
{"name":"tsub_eq_tsub_min","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Eq (HSub.hSub a b) (HSub.hSub a (Min.min a b))","decl":"theorem tsub_eq_tsub_min (a b : α) : a - b = a - min a b := by\n  rcases le_total a b with h | h\n  · rw [min_eq_left h, tsub_self, tsub_eq_zero_of_le h]\n  · rw [min_eq_right h]\n\n"}
{"name":"AddLECancellable.lt_tsub_iff_right","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedAddCommMonoid α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhc : AddLECancellable c\n⊢ Iff (LT.lt a (HSub.hSub b c)) (LT.lt (HAdd.hAdd a c) b)","decl":"omit [CanonicallyOrderedAdd α] in\nprotected theorem lt_tsub_iff_right (hc : AddLECancellable c) : a < b - c ↔ a + c < b :=\n  ⟨lt_imp_lt_of_le_imp_le tsub_le_iff_right.mpr, hc.lt_tsub_of_add_lt_right⟩\n\n"}
{"name":"AddLECancellable.lt_tsub_iff_left","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedAddCommMonoid α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhc : AddLECancellable c\n⊢ Iff (LT.lt a (HSub.hSub b c)) (LT.lt (HAdd.hAdd c a) b)","decl":"omit [CanonicallyOrderedAdd α] in\nprotected theorem lt_tsub_iff_left (hc : AddLECancellable c) : a < b - c ↔ c + a < b :=\n  ⟨lt_imp_lt_of_le_imp_le tsub_le_iff_left.mpr, hc.lt_tsub_of_add_lt_left⟩\n\n"}
{"name":"AddLECancellable.tsub_lt_tsub_iff_right","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhc : AddLECancellable c\nh : LE.le c a\n⊢ Iff (LT.lt (HSub.hSub a c) (HSub.hSub b c)) (LT.lt a b)","decl":"protected theorem tsub_lt_tsub_iff_right (hc : AddLECancellable c) (h : c ≤ a) :\n    a - c < b - c ↔ a < b := by rw [hc.lt_tsub_iff_left, add_tsub_cancel_of_le h]\n\n"}
{"name":"AddLECancellable.tsub_lt_self","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nha : AddLECancellable a\nh₁ : LT.lt 0 a\nh₂ : LT.lt 0 b\n⊢ LT.lt (HSub.hSub a b) a","decl":"protected theorem tsub_lt_self (ha : AddLECancellable a) (h₁ : 0 < a) (h₂ : 0 < b) : a - b < a := by\n  refine tsub_le_self.lt_of_ne fun h => ?_\n  rw [← h, tsub_pos_iff_lt] at h₁\n  exact h₂.not_le (ha.add_le_iff_nonpos_left.1 <| add_le_of_le_tsub_left_of_le h₁.le h.ge)\n\n"}
{"name":"AddLECancellable.tsub_lt_self_iff","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nha : AddLECancellable a\n⊢ Iff (LT.lt (HSub.hSub a b) a) (And (LT.lt 0 a) (LT.lt 0 b))","decl":"protected theorem tsub_lt_self_iff (ha : AddLECancellable a) : a - b < a ↔ 0 < a ∧ 0 < b := by\n  refine\n    ⟨fun h => ⟨(zero_le _).trans_lt h, (zero_le b).lt_of_ne ?_⟩, fun h => ha.tsub_lt_self h.1 h.2⟩\n  rintro rfl\n  rw [tsub_zero] at h\n  exact h.false\n\n"}
{"name":"AddLECancellable.tsub_lt_tsub_iff_left_of_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nha : AddLECancellable a\nhb : AddLECancellable b\nh : LE.le b a\n⊢ Iff (LT.lt (HSub.hSub a b) (HSub.hSub a c)) (LT.lt c b)","decl":"/-- See `lt_tsub_iff_left_of_le_of_le` for a weaker statement in a partial order. -/\nprotected theorem tsub_lt_tsub_iff_left_of_le (ha : AddLECancellable a) (hb : AddLECancellable b)\n    (h : b ≤ a) : a - b < a - c ↔ c < b :=\n  lt_iff_lt_of_le_iff_le <| ha.tsub_le_tsub_iff_left hb h\n\n"}
{"name":"tsub_lt_tsub_iff_right","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommMonoid α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LE.le c a\n⊢ Iff (LT.lt (HSub.hSub a c) (HSub.hSub b c)) (LT.lt a b)","decl":"/-- This lemma also holds for `ENNReal`, but we need a different proof for that. -/\ntheorem tsub_lt_tsub_iff_right (h : c ≤ a) : a - c < b - c ↔ a < b :=\n  Contravariant.AddLECancellable.tsub_lt_tsub_iff_right h\n\n"}
{"name":"tsub_lt_self","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommMonoid α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b : α\ninst✝ : AddLeftReflectLE α\na✝¹ : LT.lt 0 a\na✝ : LT.lt 0 b\n⊢ LT.lt (HSub.hSub a b) a","decl":"theorem tsub_lt_self : 0 < a → 0 < b → a - b < a :=\n  Contravariant.AddLECancellable.tsub_lt_self\n\n"}
{"name":"tsub_lt_self_iff","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommMonoid α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b : α\ninst✝ : AddLeftReflectLE α\n⊢ Iff (LT.lt (HSub.hSub a b) a) (And (LT.lt 0 a) (LT.lt 0 b))","decl":"@[simp] theorem tsub_lt_self_iff : a - b < a ↔ 0 < a ∧ 0 < b :=\n  Contravariant.AddLECancellable.tsub_lt_self_iff\n\n"}
{"name":"tsub_lt_tsub_iff_left_of_le","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommMonoid α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LE.le b a\n⊢ Iff (LT.lt (HSub.hSub a b) (HSub.hSub a c)) (LT.lt c b)","decl":"/-- See `lt_tsub_iff_left_of_le_of_le` for a weaker statement in a partial order. -/\ntheorem tsub_lt_tsub_iff_left_of_le (h : b ≤ a) : a - b < a - c ↔ c < b :=\n  Contravariant.AddLECancellable.tsub_lt_tsub_iff_left_of_le Contravariant.AddLECancellable h\n\n"}
{"name":"tsub_tsub_eq_min","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommMonoid α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\ninst✝ : AddLeftReflectLE α\na b : α\n⊢ Eq (HSub.hSub a (HSub.hSub a b)) (Min.min a b)","decl":"lemma tsub_tsub_eq_min (a b : α) : a - (a - b) = min a b := by\n  rw [tsub_eq_tsub_min _ b, tsub_tsub_cancel_of_le (min_le_left a _)]\n\n"}
{"name":"tsub_add_eq_max","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Eq (HAdd.hAdd (HSub.hSub a b) b) (Max.max a b)","decl":"theorem tsub_add_eq_max : a - b + b = max a b := by\n  rcases le_total a b with h | h\n  · rw [max_eq_right h, tsub_eq_zero_of_le h, zero_add]\n  · rw [max_eq_left h, tsub_add_cancel_of_le h]\n\n"}
{"name":"add_tsub_eq_max","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Eq (HAdd.hAdd a (HSub.hSub b a)) (Max.max a b)","decl":"theorem add_tsub_eq_max : a + (b - a) = max a b := by rw [add_comm, max_comm, tsub_add_eq_max]\n\n"}
{"name":"tsub_min","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Eq (HSub.hSub a (Min.min a b)) (HSub.hSub a b)","decl":"theorem tsub_min : a - min a b = a - b := by\n  rcases le_total a b with h | h\n  · rw [min_eq_left h, tsub_self, tsub_eq_zero_of_le h]\n  · rw [min_eq_right h]\n\n"}
{"name":"tsub_add_min","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedAddCommMonoid α\ninst✝² : CanonicallyOrderedAdd α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Eq (HAdd.hAdd (HSub.hSub a b) (Min.min a b)) a","decl":"theorem tsub_add_min : a - b + min a b = a := by\n  rw [← tsub_min, @tsub_add_cancel_of_le]\n  apply min_le_left\n\n-- `Odd.tsub` requires `CanonicallyLinearOrderedSemiring`, which we don't have\n"}
{"name":"Even.tsub","module":"Mathlib.Algebra.Order.Sub.Basic","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedAddCommMonoid α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\ninst✝ : AddLeftReflectLE α\nm n : α\nhm : Even m\nhn : Even n\n⊢ Even (HSub.hSub m n)","decl":"lemma Even.tsub [AddLeftReflectLE α] {m n : α} (hm : Even m) (hn : Even n) :\n    Even (m - n) := by\n  obtain ⟨a, rfl⟩ := hm\n  obtain ⟨b, rfl⟩ := hn\n  refine ⟨a - b, ?_⟩\n  obtain h | h := le_total a b\n  · rw [tsub_eq_zero_of_le h, tsub_eq_zero_of_le (add_le_add h h), add_zero]\n  · exact (tsub_add_tsub_comm h h).symm\n\n"}
