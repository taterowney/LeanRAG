{"name":"MvPolynomial.coeff_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns : Finsupp σ Nat\nx : MvPolynomial σ R\ns' : Finsupp σ Nat\n⊢ Eq (MvPolynomial.coeff s' (x.divMonomial s)) (MvPolynomial.coeff (HAdd.hAdd s s') x)","decl":"@[simp]\ntheorem coeff_divMonomial (s : σ →₀ ℕ) (x : MvPolynomial σ R) (s' : σ →₀ ℕ) :\n    coeff s' (x /ᵐᵒⁿᵒᵐⁱᵃˡ s) = coeff (s + s') x :=\n  rfl\n\n"}
{"name":"MvPolynomial.support_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Eq (x.divMonomial s).support (x.support.preimage (fun x => HAdd.hAdd s x) ⋯)","decl":"@[simp]\ntheorem support_divMonomial (s : σ →₀ ℕ) (x : MvPolynomial σ R) :\n    (x /ᵐᵒⁿᵒᵐⁱᵃˡ s).support = x.support.preimage _ (add_right_injective s).injOn :=\n  rfl\n\n"}
{"name":"MvPolynomial.zero_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns : Finsupp σ Nat\n⊢ Eq (MvPolynomial.divMonomial 0 s) 0","decl":"@[simp]\ntheorem zero_divMonomial (s : σ →₀ ℕ) : (0 : MvPolynomial σ R) /ᵐᵒⁿᵒᵐⁱᵃˡ s = 0 :=\n  AddMonoidAlgebra.zero_divOf _\n\n"}
{"name":"MvPolynomial.divMonomial_zero","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\n⊢ Eq (x.divMonomial 0) x","decl":"theorem divMonomial_zero (x : MvPolynomial σ R) : x /ᵐᵒⁿᵒᵐⁱᵃˡ 0 = x :=\n  x.divOf_zero\n\n"}
{"name":"MvPolynomial.add_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx y : MvPolynomial σ R\ns : Finsupp σ Nat\n⊢ Eq ((HAdd.hAdd x y).divMonomial s) (HAdd.hAdd (x.divMonomial s) (y.divMonomial s))","decl":"theorem add_divMonomial (x y : MvPolynomial σ R) (s : σ →₀ ℕ) :\n    (x + y) /ᵐᵒⁿᵒᵐⁱᵃˡ s = x /ᵐᵒⁿᵒᵐⁱᵃˡ s + y /ᵐᵒⁿᵒᵐⁱᵃˡ s :=\n  map_add (N := _ →₀ _) _ _ _\n\n"}
{"name":"MvPolynomial.divMonomial_add","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\na b : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Eq (x.divMonomial (HAdd.hAdd a b)) ((x.divMonomial a).divMonomial b)","decl":"theorem divMonomial_add (a b : σ →₀ ℕ) (x : MvPolynomial σ R) :\n    x /ᵐᵒⁿᵒᵐⁱᵃˡ (a + b) = x /ᵐᵒⁿᵒᵐⁱᵃˡ a /ᵐᵒⁿᵒᵐⁱᵃˡ b :=\n  x.divOf_add _ _\n\n"}
{"name":"MvPolynomial.divMonomial_monomial_mul","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\na : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Eq ((HMul.hMul ((MvPolynomial.monomial a) 1) x).divMonomial a) x","decl":"@[simp]\ntheorem divMonomial_monomial_mul (a : σ →₀ ℕ) (x : MvPolynomial σ R) :\n    monomial a 1 * x /ᵐᵒⁿᵒᵐⁱᵃˡ a = x :=\n  x.of'_mul_divOf _\n\n"}
{"name":"MvPolynomial.divMonomial_mul_monomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\na : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Eq ((HMul.hMul x ((MvPolynomial.monomial a) 1)).divMonomial a) x","decl":"@[simp]\ntheorem divMonomial_mul_monomial (a : σ →₀ ℕ) (x : MvPolynomial σ R) :\n    x * monomial a 1 /ᵐᵒⁿᵒᵐⁱᵃˡ a = x :=\n  x.mul_of'_divOf _\n\n"}
{"name":"MvPolynomial.divMonomial_monomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\na : Finsupp σ Nat\n⊢ Eq (((MvPolynomial.monomial a) 1).divMonomial a) 1","decl":"@[simp]\ntheorem divMonomial_monomial (a : σ →₀ ℕ) : monomial a 1 /ᵐᵒⁿᵒᵐⁱᵃˡ a = (1 : MvPolynomial σ R) :=\n  AddMonoidAlgebra.of'_divOf _\n\n"}
{"name":"MvPolynomial.coeff_modMonomial_of_not_le","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns' s : Finsupp σ Nat\nx : MvPolynomial σ R\nh : Not (LE.le s s')\n⊢ Eq (MvPolynomial.coeff s' (x.modMonomial s)) (MvPolynomial.coeff s' x)","decl":"@[simp]\ntheorem coeff_modMonomial_of_not_le {s' s : σ →₀ ℕ} (x : MvPolynomial σ R) (h : ¬s ≤ s') :\n    coeff s' (x %ᵐᵒⁿᵒᵐⁱᵃˡ s) = coeff s' x :=\n  x.modOf_apply_of_not_exists_add s s'\n    (by\n      rintro ⟨d, rfl⟩\n      exact h le_self_add)\n\n"}
{"name":"MvPolynomial.coeff_modMonomial_of_le","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns' s : Finsupp σ Nat\nx : MvPolynomial σ R\nh : LE.le s s'\n⊢ Eq (MvPolynomial.coeff s' (x.modMonomial s)) 0","decl":"@[simp]\ntheorem coeff_modMonomial_of_le {s' s : σ →₀ ℕ} (x : MvPolynomial σ R) (h : s ≤ s') :\n    coeff s' (x %ᵐᵒⁿᵒᵐⁱᵃˡ s) = 0 :=\n  x.modOf_apply_of_exists_add _ _ <| exists_add_of_le h\n\n"}
{"name":"MvPolynomial.monomial_mul_modMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Eq ((HMul.hMul ((MvPolynomial.monomial s) 1) x).modMonomial s) 0","decl":"@[simp]\ntheorem monomial_mul_modMonomial (s : σ →₀ ℕ) (x : MvPolynomial σ R) :\n    monomial s 1 * x %ᵐᵒⁿᵒᵐⁱᵃˡ s = 0 :=\n  x.of'_mul_modOf _\n\n"}
{"name":"MvPolynomial.mul_monomial_modMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Eq ((HMul.hMul x ((MvPolynomial.monomial s) 1)).modMonomial s) 0","decl":"@[simp]\ntheorem mul_monomial_modMonomial (s : σ →₀ ℕ) (x : MvPolynomial σ R) :\n    x * monomial s 1 %ᵐᵒⁿᵒᵐⁱᵃˡ s = 0 :=\n  x.mul_of'_modOf _\n\n"}
{"name":"MvPolynomial.monomial_modMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ns : Finsupp σ Nat\n⊢ Eq (((MvPolynomial.monomial s) 1).modMonomial s) 0","decl":"@[simp]\ntheorem monomial_modMonomial (s : σ →₀ ℕ) : monomial s (1 : R) %ᵐᵒⁿᵒᵐⁱᵃˡ s = 0 :=\n  AddMonoidAlgebra.of'_modOf _\n\n"}
{"name":"MvPolynomial.divMonomial_add_modMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ns : Finsupp σ Nat\n⊢ Eq (HAdd.hAdd (HMul.hMul ((MvPolynomial.monomial s) 1) (x.divMonomial s)) (x.modMonomial s)) x","decl":"theorem divMonomial_add_modMonomial (x : MvPolynomial σ R) (s : σ →₀ ℕ) :\n    monomial s 1 * (x /ᵐᵒⁿᵒᵐⁱᵃˡ s) + x %ᵐᵒⁿᵒᵐⁱᵃˡ s = x :=\n  AddMonoidAlgebra.divOf_add_modOf x s\n\n"}
{"name":"MvPolynomial.modMonomial_add_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ns : Finsupp σ Nat\n⊢ Eq (HAdd.hAdd (x.modMonomial s) (HMul.hMul ((MvPolynomial.monomial s) 1) (x.divMonomial s))) x","decl":"theorem modMonomial_add_divMonomial (x : MvPolynomial σ R) (s : σ →₀ ℕ) :\n    x %ᵐᵒⁿᵒᵐⁱᵃˡ s + monomial s 1 * (x /ᵐᵒⁿᵒᵐⁱᵃˡ s) = x :=\n  AddMonoidAlgebra.modOf_add_divOf x s\n\n"}
{"name":"MvPolynomial.monomial_one_dvd_iff_modMonomial_eq_zero","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : Finsupp σ Nat\nx : MvPolynomial σ R\n⊢ Iff (Dvd.dvd ((MvPolynomial.monomial i) 1) x) (Eq (x.modMonomial i) 0)","decl":"theorem monomial_one_dvd_iff_modMonomial_eq_zero {i : σ →₀ ℕ} {x : MvPolynomial σ R} :\n    monomial i (1 : R) ∣ x ↔ x %ᵐᵒⁿᵒᵐⁱᵃˡ i = 0 :=\n  AddMonoidAlgebra.of'_dvd_iff_modOf_eq_zero\n\n"}
{"name":"MvPolynomial.X_mul_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : σ\nx : MvPolynomial σ R\n⊢ Eq ((HMul.hMul (MvPolynomial.X i) x).divMonomial (Finsupp.single i 1)) x","decl":"@[simp]\ntheorem X_mul_divMonomial (i : σ) (x : MvPolynomial σ R) :\n    X i * x /ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = x :=\n  divMonomial_monomial_mul _ _\n\n"}
{"name":"MvPolynomial.X_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : σ\n⊢ Eq ((MvPolynomial.X i).divMonomial (Finsupp.single i 1)) 1","decl":"@[simp]\ntheorem X_divMonomial (i : σ) : (X i : MvPolynomial σ R) /ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = 1 :=\n  divMonomial_monomial (Finsupp.single i 1)\n\n"}
{"name":"MvPolynomial.mul_X_divMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ni : σ\n⊢ Eq ((HMul.hMul x (MvPolynomial.X i)).divMonomial (Finsupp.single i 1)) x","decl":"@[simp]\ntheorem mul_X_divMonomial (x : MvPolynomial σ R) (i : σ) :\n    x * X i /ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = x :=\n  divMonomial_mul_monomial _ _\n\n"}
{"name":"MvPolynomial.X_mul_modMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : σ\nx : MvPolynomial σ R\n⊢ Eq ((HMul.hMul (MvPolynomial.X i) x).modMonomial (Finsupp.single i 1)) 0","decl":"@[simp]\ntheorem X_mul_modMonomial (i : σ) (x : MvPolynomial σ R) :\n    X i * x %ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = 0 :=\n  monomial_mul_modMonomial _ _\n\n"}
{"name":"MvPolynomial.mul_X_modMonomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ni : σ\n⊢ Eq ((HMul.hMul x (MvPolynomial.X i)).modMonomial (Finsupp.single i 1)) 0","decl":"@[simp]\ntheorem mul_X_modMonomial (x : MvPolynomial σ R) (i : σ) :\n    x * X i %ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = 0 :=\n  mul_monomial_modMonomial _ _\n\n"}
{"name":"MvPolynomial.modMonomial_X","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : σ\n⊢ Eq ((MvPolynomial.X i).modMonomial (Finsupp.single i 1)) 0","decl":"@[simp]\ntheorem modMonomial_X (i : σ) : (X i : MvPolynomial σ R) %ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = 0 :=\n  monomial_modMonomial _\n\n"}
{"name":"MvPolynomial.divMonomial_add_modMonomial_single","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ni : σ\n⊢ Eq (HAdd.hAdd (HMul.hMul (MvPolynomial.X i) (x.divMonomial (Finsupp.single i 1))) (x.modMonomial (Finsupp.single i 1))) x","decl":"theorem divMonomial_add_modMonomial_single (x : MvPolynomial σ R) (i : σ) :\n    X i * (x /ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1) + x %ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = x :=\n  divMonomial_add_modMonomial _ _\n\n"}
{"name":"MvPolynomial.modMonomial_add_divMonomial_single","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nx : MvPolynomial σ R\ni : σ\n⊢ Eq (HAdd.hAdd (x.modMonomial (Finsupp.single i 1)) (HMul.hMul (MvPolynomial.X i) (x.divMonomial (Finsupp.single i 1)))) x","decl":"theorem modMonomial_add_divMonomial_single (x : MvPolynomial σ R) (i : σ) :\n    x %ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 + X i * (x /ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1) = x :=\n  modMonomial_add_divMonomial _ _\n\n"}
{"name":"MvPolynomial.X_dvd_iff_modMonomial_eq_zero","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : σ\nx : MvPolynomial σ R\n⊢ Iff (Dvd.dvd (MvPolynomial.X i) x) (Eq (x.modMonomial (Finsupp.single i 1)) 0)","decl":"theorem X_dvd_iff_modMonomial_eq_zero {i : σ} {x : MvPolynomial σ R} :\n    X i ∣ x ↔ x %ᵐᵒⁿᵒᵐⁱᵃˡ Finsupp.single i 1 = 0 :=\n  monomial_one_dvd_iff_modMonomial_eq_zero\n\n"}
{"name":"MvPolynomial.monomial_dvd_monomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\nr s : R\ni j : Finsupp σ Nat\n⊢ Iff (Dvd.dvd ((MvPolynomial.monomial i) r) ((MvPolynomial.monomial j) s)) (And (Or (Eq s 0) (LE.le i j)) (Dvd.dvd r s))","decl":"theorem monomial_dvd_monomial {r s : R} {i j : σ →₀ ℕ} :\n    monomial i r ∣ monomial j s ↔ (s = 0 ∨ i ≤ j) ∧ r ∣ s := by\n  constructor\n  · rintro ⟨x, hx⟩\n    rw [MvPolynomial.ext_iff] at hx\n    have hj := hx j\n    have hi := hx i\n    classical\n      simp_rw [coeff_monomial, if_pos] at hj hi\n      simp_rw [coeff_monomial_mul'] at hi hj\n      split_ifs at hi hj with hi hi\n      · exact ⟨Or.inr hi, _, hj⟩\n      · exact ⟨Or.inl hj, hj.symm ▸ dvd_zero _⟩\n    -- Porting note: two goals remain at this point in Lean 4\n    · simp_all only [or_true, dvd_mul_right, and_self]\n    · simp_all only [ite_self, le_refl, ite_true, dvd_mul_right, or_false, and_self]\n  · rintro ⟨h | hij, d, rfl⟩\n    · simp_rw [h, monomial_zero, dvd_zero]\n    · refine ⟨monomial (j - i) d, ?_⟩\n      rw [monomial_mul, add_tsub_cancel_of_le hij]\n\n"}
{"name":"MvPolynomial.monomial_one_dvd_monomial_one","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : CommSemiring R\ninst✝ : Nontrivial R\ni j : Finsupp σ Nat\n⊢ Iff (Dvd.dvd ((MvPolynomial.monomial i) 1) ((MvPolynomial.monomial j) 1)) (LE.le i j)","decl":"@[simp]\ntheorem monomial_one_dvd_monomial_one [Nontrivial R] {i j : σ →₀ ℕ} :\n    monomial i (1 : R) ∣ monomial j 1 ↔ i ≤ j := by\n  rw [monomial_dvd_monomial]\n  simp_rw [one_ne_zero, false_or, dvd_rfl, and_true]\n\n"}
{"name":"MvPolynomial.X_dvd_X","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : CommSemiring R\ninst✝ : Nontrivial R\ni j : σ\n⊢ Iff (Dvd.dvd (MvPolynomial.X i) (MvPolynomial.X j)) (Eq i j)","decl":"@[simp]\ntheorem X_dvd_X [Nontrivial R] {i j : σ} :\n    (X i : MvPolynomial σ R) ∣ (X j : MvPolynomial σ R) ↔ i = j := by\n  refine monomial_one_dvd_monomial_one.trans ?_\n  simp_rw [Finsupp.single_le_iff, Nat.one_le_iff_ne_zero, Finsupp.single_apply_ne_zero,\n    ne_eq, reduceCtorEq,not_false_eq_true, and_true]\n\n"}
{"name":"MvPolynomial.X_dvd_monomial","module":"Mathlib.Algebra.MvPolynomial.Division","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : CommSemiring R\ni : σ\nj : Finsupp σ Nat\nr : R\n⊢ Iff (Dvd.dvd (MvPolynomial.X i) ((MvPolynomial.monomial j) r)) (Or (Eq r 0) (Ne (j i) 0))","decl":"@[simp]\ntheorem X_dvd_monomial {i : σ} {j : σ →₀ ℕ} {r : R} :\n    (X i : MvPolynomial σ R) ∣ monomial j r ↔ r = 0 ∨ j i ≠ 0 := by\n  refine monomial_dvd_monomial.trans ?_\n  simp_rw [one_dvd, and_true, Finsupp.single_le_iff, Nat.one_le_iff_ne_zero]\n\n"}
