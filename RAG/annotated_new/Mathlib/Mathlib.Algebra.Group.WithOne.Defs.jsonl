{"name":"WithOne.nontrivial","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\ninst✝ : Nonempty α\n⊢ Nontrivial (WithOne α)","decl":"@[to_additive]\ninstance nontrivial [Nonempty α] : Nontrivial (WithOne α) :=\n  Option.nontrivial\n\n-- Porting note: this new declaration is here to make `((a : α): WithOne α)` have type `WithOne α`;\n-- otherwise the coercion kicks in and it becomes `Option.some a : WithOne α` which\n-- becomes `Option.some a : Option α`.\n"}
{"name":"WithZero.nontrivial","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\ninst✝ : Nonempty α\n⊢ Nontrivial (WithZero α)","decl":"@[to_additive]\ninstance nontrivial [Nonempty α] : Nontrivial (WithOne α) :=\n  Option.nontrivial\n\n-- Porting note: this new declaration is here to make `((a : α): WithOne α)` have type `WithOne α`;\n-- otherwise the coercion kicks in and it becomes `Option.some a : WithOne α` which\n-- becomes `Option.some a : Option α`.\n"}
{"name":"WithOne.recOneCoe_one","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nC : WithOne α → Sort u_1\nh₁ : C 1\nh₂ : (a : α) → C ↑a\n⊢ Eq (WithOne.recOneCoe h₁ h₂ 1) h₁","decl":"@[to_additive (attr := simp)]\nlemma recOneCoe_one {C : WithOne α → Sort*} (h₁ h₂) :\n    recOneCoe h₁ h₂ (1 : WithOne α) = (h₁ : C 1) :=\n  rfl\n\n"}
{"name":"WithZero.recZeroCoe_zero","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nC : WithZero α → Sort u_1\nh₁ : C 0\nh₂ : (a : α) → C ↑a\n⊢ Eq (WithZero.recZeroCoe h₁ h₂ 0) h₁","decl":"@[to_additive (attr := simp)]\nlemma recOneCoe_one {C : WithOne α → Sort*} (h₁ h₂) :\n    recOneCoe h₁ h₂ (1 : WithOne α) = (h₁ : C 1) :=\n  rfl\n\n"}
{"name":"WithOne.recOneCoe_coe","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nC : WithOne α → Sort u_1\nh₁ : C 1\nh₂ : (a : α) → C ↑a\na : α\n⊢ Eq (WithOne.recOneCoe h₁ h₂ ↑a) (h₂ a)","decl":"@[to_additive (attr := simp)]\nlemma recOneCoe_coe {C : WithOne α → Sort*} (h₁ h₂) (a : α) :\n    recOneCoe h₁ h₂ (a : WithOne α) = (h₂ : ∀ a : α, C a) a :=\n  rfl\n\n"}
{"name":"WithZero.recZeroCoe_coe","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nC : WithZero α → Sort u_1\nh₁ : C 0\nh₂ : (a : α) → C ↑a\na : α\n⊢ Eq (WithZero.recZeroCoe h₁ h₂ ↑a) (h₂ a)","decl":"@[to_additive (attr := simp)]\nlemma recOneCoe_coe {C : WithOne α → Sort*} (h₁ h₂) (a : α) :\n    recOneCoe h₁ h₂ (a : WithOne α) = (h₂ : ∀ a : α, C a) a :=\n  rfl\n\n"}
{"name":"WithOne.unone_coe","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nx : α\nhx : Ne (↑x) 1\n⊢ Eq (WithOne.unone hx) x","decl":"@[to_additive (attr := simp) unzero_coe]\ntheorem unone_coe {x : α} (hx : (x : WithOne α) ≠ 1) : unone hx = x :=\n  rfl\n\n"}
{"name":"WithZero.unzero_coe","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nx : α\nhx : Ne (↑x) 0\n⊢ Eq (WithZero.unzero hx) x","decl":"@[to_additive (attr := simp) unzero_coe]\ntheorem unone_coe {x : α} (hx : (x : WithOne α) ≠ 1) : unone hx = x :=\n  rfl\n\n"}
{"name":"WithZero.coe_unzero","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nx : WithZero α\nhx : Ne x 0\n⊢ Eq (↑(WithZero.unzero hx)) x","decl":"@[to_additive (attr := simp) coe_unzero]\nlemma coe_unone : ∀ {x : WithOne α} (hx : x ≠ 1), unone hx = x\n  | (x : α), _ => rfl\n\n-- Porting note: in Lean 4 the `some_eq_coe` lemmas present in the lean 3 version\n-- of this file are syntactic tautologies\n\n"}
{"name":"WithOne.coe_unone","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nx : WithOne α\nhx : Ne x 1\n⊢ Eq (↑(WithOne.unone hx)) x","decl":"@[to_additive (attr := simp) coe_unzero]\nlemma coe_unone : ∀ {x : WithOne α} (hx : x ≠ 1), unone hx = x\n  | (x : α), _ => rfl\n\n-- Porting note: in Lean 4 the `some_eq_coe` lemmas present in the lean 3 version\n-- of this file are syntactic tautologies\n\n"}
{"name":"WithZero.coe_ne_zero","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\na : α\n⊢ Ne (↑a) 0","decl":"@[to_additive (attr := simp)]\ntheorem coe_ne_one {a : α} : (a : WithOne α) ≠ (1 : WithOne α) :=\n  Option.some_ne_none a\n\n"}
{"name":"WithOne.coe_ne_one","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\na : α\n⊢ Ne (↑a) 1","decl":"@[to_additive (attr := simp)]\ntheorem coe_ne_one {a : α} : (a : WithOne α) ≠ (1 : WithOne α) :=\n  Option.some_ne_none a\n\n"}
{"name":"WithZero.zero_ne_coe","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\na : α\n⊢ Ne 0 ↑a","decl":"@[to_additive (attr := simp)]\ntheorem one_ne_coe {a : α} : (1 : WithOne α) ≠ a :=\n  coe_ne_one.symm\n\n"}
{"name":"WithOne.one_ne_coe","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\na : α\n⊢ Ne 1 ↑a","decl":"@[to_additive (attr := simp)]\ntheorem one_ne_coe {a : α} : (1 : WithOne α) ≠ a :=\n  coe_ne_one.symm\n\n"}
{"name":"WithOne.ne_one_iff_exists","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nx : WithOne α\n⊢ Iff (Ne x 1) (Exists fun a => Eq (↑a) x)","decl":"@[to_additive]\ntheorem ne_one_iff_exists {x : WithOne α} : x ≠ 1 ↔ ∃ a : α, ↑a = x :=\n  Option.ne_none_iff_exists\n\n"}
{"name":"WithZero.ne_zero_iff_exists","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nx : WithZero α\n⊢ Iff (Ne x 0) (Exists fun a => Eq (↑a) x)","decl":"@[to_additive]\ntheorem ne_one_iff_exists {x : WithOne α} : x ≠ 1 ↔ ∃ a : α, ↑a = x :=\n  Option.ne_none_iff_exists\n\n"}
{"name":"WithZero.canLift","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\n⊢ CanLift (WithZero α) α WithZero.coe fun a => Ne a 0","decl":"@[to_additive]\ninstance canLift : CanLift (WithOne α) α (↑) fun a => a ≠ 1 where\n  prf _ := ne_one_iff_exists.1\n\n"}
{"name":"WithOne.canLift","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\n⊢ CanLift (WithOne α) α WithOne.coe fun a => Ne a 1","decl":"@[to_additive]\ninstance canLift : CanLift (WithOne α) α (↑) fun a => a ≠ 1 where\n  prf _ := ne_one_iff_exists.1\n\n"}
{"name":"WithOne.coe_inj","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\na b : α\n⊢ Iff (Eq ↑a ↑b) (Eq a b)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_inj {a b : α} : (a : WithOne α) = b ↔ a = b :=\n  Option.some_inj\n\n"}
{"name":"WithZero.coe_inj","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\na b : α\n⊢ Iff (Eq ↑a ↑b) (Eq a b)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_inj {a b : α} : (a : WithOne α) = b ↔ a = b :=\n  Option.some_inj\n\n"}
{"name":"WithZero.cases_on","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nP : WithZero α → Prop\nx : WithZero α\na✝¹ : P 0\na✝ : ∀ (a : α), P ↑a\n⊢ P x","decl":"@[to_additive (attr := elab_as_elim)]\nprotected theorem cases_on {P : WithOne α → Prop} : ∀ x : WithOne α, P 1 → (∀ a : α, P a) → P x :=\n  Option.casesOn\n\n"}
{"name":"WithOne.cases_on","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\nP : WithOne α → Prop\nx : WithOne α\na✝¹ : P 1\na✝ : ∀ (a : α), P ↑a\n⊢ P x","decl":"@[to_additive (attr := elab_as_elim)]\nprotected theorem cases_on {P : WithOne α → Prop} : ∀ x : WithOne α, P 1 → (∀ a : α, P a) → P x :=\n  Option.casesOn\n\n"}
{"name":"WithOne.coe_mul","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\ninst✝ : Mul α\na b : α\n⊢ Eq (↑(HMul.hMul a b)) (HMul.hMul ↑a ↑b)","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma coe_mul [Mul α] (a b : α) : (↑(a * b) : WithOne α) = a * b := rfl\n\n"}
{"name":"WithZero.coe_add","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\ninst✝ : Add α\na b : α\n⊢ Eq (↑(HAdd.hAdd a b)) (HAdd.hAdd ↑a ↑b)","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma coe_mul [Mul α] (a b : α) : (↑(a * b) : WithOne α) = a * b := rfl\n\n"}
{"name":"WithOne.coe_inv","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\ninst✝ : Inv α\na : α\n⊢ Eq (↑(Inv.inv a)) (Inv.inv ↑a)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_inv [Inv α] (a : α) : ((a⁻¹ : α) : WithOne α) = (a : WithOne α)⁻¹ :=\n  rfl\n\n"}
{"name":"WithZero.coe_neg","module":"Mathlib.Algebra.Group.WithOne.Defs","initialProofState":"α : Type u\ninst✝ : Neg α\na : α\n⊢ Eq (↑(Neg.neg a)) (Neg.neg ↑a)","decl":"@[to_additive (attr := simp, norm_cast)]\ntheorem coe_inv [Inv α] (a : α) : ((a⁻¹ : α) : WithOne α) = (a : WithOne α)⁻¹ :=\n  rfl\n\n"}
