{"name":"MeasureTheory.ProbabilityMeasure.instIsProbabilityMeasureToMeasure","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ MeasureTheory.IsProbabilityMeasure ↑μ","decl":"instance (μ : ProbabilityMeasure Ω) : IsProbabilityMeasure (μ : Measure Ω) :=\n  μ.prop\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coe_mk","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nhμ : MeasureTheory.IsProbabilityMeasure μ\n⊢ Eq (↑⟨μ, hμ⟩) μ","decl":"@[simp, norm_cast] lemma coe_mk (μ : Measure Ω) (hμ) : toMeasure ⟨μ, hμ⟩ = μ := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.val_eq_to_measure","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq ↑ν ↑ν","decl":"@[simp]\ntheorem val_eq_to_measure (ν : ProbabilityMeasure Ω) : ν.val = (ν : Measure Ω) := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toMeasure_injective","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\n⊢ Function.Injective MeasureTheory.ProbabilityMeasure.toMeasure","decl":"theorem toMeasure_injective : Function.Injective ((↑) : ProbabilityMeasure Ω → Measure Ω) :=\n  Subtype.coe_injective\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coeFn_def","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq ⇑μ fun s => (↑μ s).toNNReal","decl":"lemma coeFn_def (μ : ProbabilityMeasure Ω) : μ = fun s ↦ ((μ : Measure Ω) s).toNNReal := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coeFn_mk","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nhμ : MeasureTheory.IsProbabilityMeasure μ\n⊢ Eq ⇑⟨μ, hμ⟩ fun s => (μ s).toNNReal","decl":"lemma coeFn_mk (μ : Measure Ω) (hμ) :\n    DFunLike.coe (F := ProbabilityMeasure Ω) ⟨μ, hμ⟩ = fun s ↦ (μ s).toNNReal := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.mk_apply","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nhμ : MeasureTheory.IsProbabilityMeasure μ\ns : Set Ω\n⊢ Eq (⟨μ, hμ⟩ s) (μ s).toNNReal","decl":"@[simp, norm_cast]\nlemma mk_apply (μ : Measure Ω) (hμ) (s : Set Ω) :\n    DFunLike.coe (F := ProbabilityMeasure Ω) ⟨μ, hμ⟩ s = (μ s).toNNReal := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coeFn_univ","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq (ν Set.univ) 1","decl":"@[simp, norm_cast]\ntheorem coeFn_univ (ν : ProbabilityMeasure Ω) : ν univ = 1 :=\n  congr_arg ENNReal.toNNReal ν.prop.measure_univ\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coeFn_univ_ne_zero","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\n⊢ Ne (ν Set.univ) 0","decl":"theorem coeFn_univ_ne_zero (ν : ProbabilityMeasure Ω) : ν univ ≠ 0 := by\n  simp only [coeFn_univ, Ne, one_ne_zero, not_false_iff]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coeFn_toFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq ⇑μ.toFiniteMeasure ⇑μ","decl":"@[simp] lemma coeFn_toFiniteMeasure (μ : ProbabilityMeasure Ω) : ⇑μ.toFiniteMeasure = μ := rfl\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_apply","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\ns : Set Ω\n⊢ Eq (μ.toFiniteMeasure s) (μ s)","decl":"lemma toFiniteMeasure_apply (μ : ProbabilityMeasure Ω) (s : Set Ω) :\n    μ.toFiniteMeasure s = μ s := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toMeasure_comp_toFiniteMeasure_eq_toMeasure","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq ↑ν.toFiniteMeasure ↑ν","decl":"@[simp]\ntheorem toMeasure_comp_toFiniteMeasure_eq_toMeasure (ν : ProbabilityMeasure Ω) :\n    (ν.toFiniteMeasure : Measure Ω) = (ν : Measure Ω) := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coeFn_comp_toFiniteMeasure_eq_coeFn","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq ⇑ν.toFiniteMeasure ⇑ν","decl":"@[simp]\ntheorem coeFn_comp_toFiniteMeasure_eq_coeFn (ν : ProbabilityMeasure Ω) :\n    (ν.toFiniteMeasure : Set Ω → ℝ≥0) = (ν : Set Ω → ℝ≥0) := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_apply_eq_apply","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\ns : Set Ω\n⊢ Eq (ν.toFiniteMeasure s) (ν s)","decl":"@[simp]\ntheorem toFiniteMeasure_apply_eq_apply (ν : ProbabilityMeasure Ω) (s : Set Ω) :\n    ν.toFiniteMeasure s = ν s := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\ns : Set Ω\n⊢ Eq (↑(ν s)) (↑ν s)","decl":"@[simp]\ntheorem ennreal_coeFn_eq_coeFn_toMeasure (ν : ProbabilityMeasure Ω) (s : Set Ω) :\n    (ν s : ℝ≥0∞) = (ν : Measure Ω) s := by\n  rw [← coeFn_comp_toFiniteMeasure_eq_coeFn, FiniteMeasure.ennreal_coeFn_eq_coeFn_toMeasure,\n    toMeasure_comp_toFiniteMeasure_eq_toMeasure]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.null_iff_toMeasure_null","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nν : MeasureTheory.ProbabilityMeasure Ω\ns : Set Ω\n⊢ Iff (Eq (ν s) 0) (Eq (↑ν s) 0)","decl":"@[simp]\ntheorem null_iff_toMeasure_null (ν : ProbabilityMeasure Ω) (s : Set Ω) :\n    ν s = 0 ↔ (ν : Measure Ω) s = 0 :=\n  ⟨fun h ↦ by rw [← ennreal_coeFn_eq_coeFn_toMeasure, h, ENNReal.coe_zero],\n   fun h ↦ congrArg ENNReal.toNNReal h⟩\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.apply_mono","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\ns₁ s₂ : Set Ω\nh : HasSubset.Subset s₁ s₂\n⊢ LE.le (μ s₁) (μ s₂)","decl":"theorem apply_mono (μ : ProbabilityMeasure Ω) {s₁ s₂ : Set Ω} (h : s₁ ⊆ s₂) : μ s₁ ≤ μ s₂ := by\n  rw [← coeFn_comp_toFiniteMeasure_eq_coeFn]\n  exact MeasureTheory.FiniteMeasure.apply_mono _ h\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.apply_le_one","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\ns : Set Ω\n⊢ LE.le (μ s) 1","decl":"@[simp] theorem apply_le_one (μ : ProbabilityMeasure Ω) (s : Set Ω) : μ s ≤ 1 := by\n  simpa using apply_mono μ (subset_univ s)\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.nonempty","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Nonempty Ω","decl":"theorem nonempty (μ : ProbabilityMeasure Ω) : Nonempty Ω := by\n  by_contra maybe_empty\n  have zero : (μ : Measure Ω) univ = 0 := by\n    rw [univ_eq_empty_iff.mpr (not_nonempty_iff.mp maybe_empty), measure_empty]\n  rw [measure_univ] at zero\n  exact zero_ne_one zero.symm\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.eq_of_forall_toMeasure_apply_eq_iff","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ ν : MeasureTheory.ProbabilityMeasure Ω\n⊢ Iff (Eq μ ν) (∀ (s : Set Ω), MeasurableSet s → Eq (↑μ s) (↑ν s))","decl":"@[ext]\ntheorem eq_of_forall_toMeasure_apply_eq (μ ν : ProbabilityMeasure Ω)\n    (h : ∀ s : Set Ω, MeasurableSet s → (μ : Measure Ω) s = (ν : Measure Ω) s) : μ = ν := by\n  apply toMeasure_injective\n  ext1 s s_mble\n  exact h s s_mble\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.eq_of_forall_toMeasure_apply_eq","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ ν : MeasureTheory.ProbabilityMeasure Ω\nh : ∀ (s : Set Ω), MeasurableSet s → Eq (↑μ s) (↑ν s)\n⊢ Eq μ ν","decl":"@[ext]\ntheorem eq_of_forall_toMeasure_apply_eq (μ ν : ProbabilityMeasure Ω)\n    (h : ∀ s : Set Ω, MeasurableSet s → (μ : Measure Ω) s = (ν : Measure Ω) s) : μ = ν := by\n  apply toMeasure_injective\n  ext1 s s_mble\n  exact h s s_mble\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.eq_of_forall_apply_eq","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ ν : MeasureTheory.ProbabilityMeasure Ω\nh : ∀ (s : Set Ω), MeasurableSet s → Eq (μ s) (ν s)\n⊢ Eq μ ν","decl":"theorem eq_of_forall_apply_eq (μ ν : ProbabilityMeasure Ω)\n    (h : ∀ s : Set Ω, MeasurableSet s → μ s = ν s) : μ = ν := by\n  ext1 s s_mble\n  simpa [ennreal_coeFn_eq_coeFn_toMeasure] using congr_arg ((↑) : ℝ≥0 → ℝ≥0∞) (h s s_mble)\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.mass_toFiniteMeasure","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq μ.toFiniteMeasure.mass 1","decl":"@[simp]\ntheorem mass_toFiniteMeasure (μ : ProbabilityMeasure Ω) : μ.toFiniteMeasure.mass = 1 :=\n  μ.coeFn_univ\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_nonzero","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Ne μ.toFiniteMeasure 0","decl":"theorem toFiniteMeasure_nonzero (μ : ProbabilityMeasure Ω) : μ.toFiniteMeasure ≠ 0 := by\n  simp [← FiniteMeasure.mass_nonzero_iff]\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.testAgainstNN_lipschitz","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ LipschitzWith 1 fun f => μ.toFiniteMeasure.testAgainstNN f","decl":"theorem testAgainstNN_lipschitz (μ : ProbabilityMeasure Ω) :\n    LipschitzWith 1 fun f : Ω →ᵇ ℝ≥0 ↦ μ.toFiniteMeasure.testAgainstNN f :=\n  μ.mass_toFiniteMeasure ▸ μ.toFiniteMeasure.testAgainstNN_lipschitz\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_continuous","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\n⊢ Continuous MeasureTheory.ProbabilityMeasure.toFiniteMeasure","decl":"theorem toFiniteMeasure_continuous :\n    Continuous (toFiniteMeasure : ProbabilityMeasure Ω → FiniteMeasure Ω) :=\n  continuous_induced_dom\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.coe_toWeakDualBCNN","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq (⇑μ.toWeakDualBCNN) μ.toFiniteMeasure.testAgainstNN","decl":"@[simp]\ntheorem coe_toWeakDualBCNN (μ : ProbabilityMeasure Ω) :\n    ⇑μ.toWeakDualBCNN = μ.toFiniteMeasure.testAgainstNN := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_apply","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\nf : BoundedContinuousFunction Ω NNReal\n⊢ Eq (μ.toWeakDualBCNN f) (MeasureTheory.lintegral ↑μ fun ω => ↑(f ω)).toNNReal","decl":"@[simp]\ntheorem toWeakDualBCNN_apply (μ : ProbabilityMeasure Ω) (f : Ω →ᵇ ℝ≥0) :\n    μ.toWeakDualBCNN f = (∫⁻ ω, f ω ∂(μ : Measure Ω)).toNNReal := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toWeakDualBCNN_continuous","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\n⊢ Continuous fun μ => μ.toWeakDualBCNN","decl":"theorem toWeakDualBCNN_continuous : Continuous fun μ : ProbabilityMeasure Ω ↦ μ.toWeakDualBCNN :=\n  FiniteMeasure.toWeakDualBCNN_continuous.comp toFiniteMeasure_continuous\n\n/- Integration of (nonnegative bounded continuous) test functions against Borel probability\nmeasures depends continuously on the measure. -/\n"}
{"name":"MeasureTheory.ProbabilityMeasure.continuous_testAgainstNN_eval","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nf : BoundedContinuousFunction Ω NNReal\n⊢ Continuous fun μ => μ.toFiniteMeasure.testAgainstNN f","decl":"theorem continuous_testAgainstNN_eval (f : Ω →ᵇ ℝ≥0) :\n    Continuous fun μ : ProbabilityMeasure Ω ↦ μ.toFiniteMeasure.testAgainstNN f :=\n  (FiniteMeasure.continuous_testAgainstNN_eval f).comp toFiniteMeasure_continuous\n\n-- The canonical mapping from probability measures to finite measures is an embedding.\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_isEmbedding","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_2\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\n⊢ Topology.IsEmbedding MeasureTheory.ProbabilityMeasure.toFiniteMeasure","decl":"theorem toFiniteMeasure_isEmbedding (Ω : Type*) [MeasurableSpace Ω] [TopologicalSpace Ω]\n    [OpensMeasurableSpace Ω] :\n    IsEmbedding (toFiniteMeasure : ProbabilityMeasure Ω → FiniteMeasure Ω) where\n  eq_induced := rfl\n  injective _μ _ν h := Subtype.eq <| congr_arg FiniteMeasure.toMeasure h\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toFiniteMeasure_embedding","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_2\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\n⊢ Topology.IsEmbedding MeasureTheory.ProbabilityMeasure.toFiniteMeasure","decl":"@[deprecated (since := \"2024-10-26\")]\nalias toFiniteMeasure_embedding := toFiniteMeasure_isEmbedding\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nδ : Type u_2\nF : Filter δ\nμs : δ → MeasureTheory.ProbabilityMeasure Ω\nμ₀ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Iff (Filter.Tendsto μs F (nhds μ₀)) (Filter.Tendsto (Function.comp MeasureTheory.ProbabilityMeasure.toFiniteMeasure μs) F (nhds μ₀.toFiniteMeasure))","decl":"theorem tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds {δ : Type*} (F : Filter δ)\n    {μs : δ → ProbabilityMeasure Ω} {μ₀ : ProbabilityMeasure Ω} :\n    Tendsto μs F (𝓝 μ₀) ↔ Tendsto (toFiniteMeasure ∘ μs) F (𝓝 μ₀.toFiniteMeasure) :=\n  (toFiniteMeasure_isEmbedding Ω).tendsto_nhds_iff\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.ProbabilityMeasure Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Iff (Filter.Tendsto μs F (nhds μ)) (∀ (f : BoundedContinuousFunction Ω NNReal), Filter.Tendsto (fun i => MeasureTheory.lintegral ↑(μs i) fun ω => ↑(f ω)) F (nhds (MeasureTheory.lintegral ↑μ fun ω => ↑(f ω))))","decl":"/-- A characterization of weak convergence of probability measures by the condition that the\nintegrals of every continuous bounded nonnegative function converge to the integral of the function\nagainst the limit measure. -/\ntheorem tendsto_iff_forall_lintegral_tendsto {γ : Type*} {F : Filter γ}\n    {μs : γ → ProbabilityMeasure Ω} {μ : ProbabilityMeasure Ω} :\n    Tendsto μs F (𝓝 μ) ↔\n      ∀ f : Ω →ᵇ ℝ≥0,\n        Tendsto (fun i ↦ ∫⁻ ω, f ω ∂(μs i : Measure Ω)) F (𝓝 (∫⁻ ω, f ω ∂(μ : Measure Ω))) := by\n  rw [tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds]\n  exact FiniteMeasure.tendsto_iff_forall_lintegral_tendsto\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.tendsto_iff_forall_integral_tendsto","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : MeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.ProbabilityMeasure Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Iff (Filter.Tendsto μs F (nhds μ)) (∀ (f : BoundedContinuousFunction Ω Real), Filter.Tendsto (fun i => MeasureTheory.integral ↑(μs i) fun ω => f ω) F (nhds (MeasureTheory.integral ↑μ fun ω => f ω)))","decl":"/-- The characterization of weak convergence of probability measures by the usual (defining)\ncondition that the integrals of every continuous bounded function converge to the integral of the\nfunction against the limit measure. -/\ntheorem tendsto_iff_forall_integral_tendsto {γ : Type*} {F : Filter γ}\n    {μs : γ → ProbabilityMeasure Ω} {μ : ProbabilityMeasure Ω} :\n    Tendsto μs F (𝓝 μ) ↔\n      ∀ f : Ω →ᵇ ℝ,\n        Tendsto (fun i ↦ ∫ ω, f ω ∂(μs i : Measure Ω)) F (𝓝 (∫ ω, f ω ∂(μ : Measure Ω))) := by\n  rw [tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds]\n  rw [FiniteMeasure.tendsto_iff_forall_integral_tendsto]\n  rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.continuous_integral_boundedContinuousFunction","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"α : Type u_2\ninst✝² : TopologicalSpace α\ninst✝¹ : MeasurableSpace α\ninst✝ : OpensMeasurableSpace α\nf : BoundedContinuousFunction α Real\n⊢ Continuous fun μ => MeasureTheory.integral ↑μ fun x => f x","decl":"lemma continuous_integral_boundedContinuousFunction\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous fun μ : ProbabilityMeasure α ↦ ∫ x, f x ∂μ := by\n  rw [continuous_iff_continuousAt]\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.t2Space","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝³ : MeasurableSpace Ω\ninst✝² : TopologicalSpace Ω\ninst✝¹ : HasOuterApproxClosed Ω\ninst✝ : BorelSpace Ω\n⊢ T2Space (MeasureTheory.ProbabilityMeasure Ω)","decl":"/-- On topological spaces where indicators of closed sets have decreasing approximating sequences of\ncontinuous functions (`HasOuterApproxClosed`), the topology of convergence in distribution of Borel\nprobability measures is Hausdorff (`T2Space`). -/\ninstance t2Space : T2Space (ProbabilityMeasure Ω) := (toFiniteMeasure_isEmbedding Ω).t2Space\n\n"}
{"name":"MeasureTheory.FiniteMeasure.self_eq_mass_mul_normalize","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ns : Set Ω\n⊢ Eq (μ s) (HMul.hMul μ.mass (μ.normalize s))","decl":"@[simp]\ntheorem self_eq_mass_mul_normalize (s : Set Ω) : μ s = μ.mass * μ.normalize s := by\n  obtain rfl | h := eq_or_ne μ 0\n  · simp\n  have mass_nonzero : μ.mass ≠ 0 := by rwa [μ.mass_nonzero_iff]\n  simp only [normalize, dif_neg mass_nonzero]\n  simp [ProbabilityMeasure.coe_mk, toMeasure_smul, mul_inv_cancel_left₀ mass_nonzero, coeFn_def]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.self_eq_mass_smul_normalize","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\n⊢ Eq μ (HSMul.hSMul μ.mass μ.normalize.toFiniteMeasure)","decl":"theorem self_eq_mass_smul_normalize : μ = μ.mass • μ.normalize.toFiniteMeasure := by\n  apply eq_of_forall_apply_eq\n  intro s _s_mble\n  rw [μ.self_eq_mass_mul_normalize s, smul_apply, smul_eq_mul,\n    ProbabilityMeasure.coeFn_comp_toFiniteMeasure_eq_coeFn]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.normalize_eq_of_nonzero","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\nnonzero : Ne μ 0\ns : Set Ω\n⊢ Eq (μ.normalize s) (HMul.hMul (Inv.inv μ.mass) (μ s))","decl":"theorem normalize_eq_of_nonzero (nonzero : μ ≠ 0) (s : Set Ω) : μ.normalize s = μ.mass⁻¹ * μ s := by\n  simp only [μ.self_eq_mass_mul_normalize, μ.mass_nonzero_iff.mpr nonzero, inv_mul_cancel_left₀,\n    Ne, not_false_iff]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.normalize_eq_inv_mass_smul_of_nonzero","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\nnonzero : Ne μ 0\n⊢ Eq μ.normalize.toFiniteMeasure (HSMul.hSMul (Inv.inv μ.mass) μ)","decl":"theorem normalize_eq_inv_mass_smul_of_nonzero (nonzero : μ ≠ 0) :\n    μ.normalize.toFiniteMeasure = μ.mass⁻¹ • μ := by\n  nth_rw 3 [μ.self_eq_mass_smul_normalize]\n  rw [← smul_assoc]\n  simp only [μ.mass_nonzero_iff.mpr nonzero, Algebra.id.smul_eq_mul, inv_mul_cancel₀, Ne,\n    not_false_iff, one_smul]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.toMeasure_normalize_eq_of_nonzero","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\nnonzero : Ne μ 0\n⊢ Eq (↑μ.normalize) (HSMul.hSMul (Inv.inv μ.mass) ↑μ)","decl":"theorem toMeasure_normalize_eq_of_nonzero (nonzero : μ ≠ 0) :\n    (μ.normalize : Measure Ω) = μ.mass⁻¹ • μ := by\n  ext1 s _s_mble\n  rw [← μ.normalize.ennreal_coeFn_eq_coeFn_toMeasure s, μ.normalize_eq_of_nonzero nonzero s,\n    ENNReal.coe_mul, ennreal_coeFn_eq_coeFn_toMeasure]\n  exact Measure.coe_nnreal_smul_apply _ _ _\n\n"}
{"name":"ProbabilityMeasure.toFiniteMeasure_normalize_eq_self","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.ProbabilityMeasure Ω\n⊢ Eq μ.toFiniteMeasure.normalize μ","decl":"@[simp]\ntheorem _root_.ProbabilityMeasure.toFiniteMeasure_normalize_eq_self {m0 : MeasurableSpace Ω}\n    (μ : ProbabilityMeasure Ω) : μ.toFiniteMeasure.normalize = μ := by\n  apply ProbabilityMeasure.eq_of_forall_apply_eq\n  intro s _s_mble\n  rw [μ.toFiniteMeasure.normalize_eq_of_nonzero μ.toFiniteMeasure_nonzero s]\n  simp only [ProbabilityMeasure.mass_toFiniteMeasure, inv_one, one_mul, μ.coeFn_toFiniteMeasure]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.average_eq_integral_normalize","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nnonzero : Ne μ 0\nf : Ω → E\n⊢ Eq (MeasureTheory.average (↑μ) f) (MeasureTheory.integral ↑μ.normalize fun ω => f ω)","decl":"/-- Averaging with respect to a finite measure is the same as integrating against\n`MeasureTheory.FiniteMeasure.normalize`. -/\ntheorem average_eq_integral_normalize {E : Type*} [NormedAddCommGroup E] [NormedSpace ℝ E]\n    (nonzero : μ ≠ 0) (f : Ω → E) :\n    average (μ : Measure Ω) f = ∫ ω, f ω ∂(μ.normalize : Measure Ω) := by\n  rw [μ.toMeasure_normalize_eq_of_nonzero nonzero, average]\n  congr\n  simp [ENNReal.coe_inv (μ.mass_nonzero_iff.mpr nonzero), ennreal_mass]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.testAgainstNN_eq_mass_mul","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝¹ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝ : TopologicalSpace Ω\nf : BoundedContinuousFunction Ω NNReal\n⊢ Eq (μ.testAgainstNN f) (HMul.hMul μ.mass (μ.normalize.toFiniteMeasure.testAgainstNN f))","decl":"theorem testAgainstNN_eq_mass_mul (f : Ω →ᵇ ℝ≥0) :\n    μ.testAgainstNN f = μ.mass * μ.normalize.toFiniteMeasure.testAgainstNN f := by\n  nth_rw 1 [μ.self_eq_mass_smul_normalize]\n  rw [μ.normalize.toFiniteMeasure.smul_testAgainstNN_apply μ.mass f, smul_eq_mul]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.normalize_testAgainstNN","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝¹ : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝ : TopologicalSpace Ω\nnonzero : Ne μ 0\nf : BoundedContinuousFunction Ω NNReal\n⊢ Eq (μ.normalize.toFiniteMeasure.testAgainstNN f) (HMul.hMul (Inv.inv μ.mass) (μ.testAgainstNN f))","decl":"theorem normalize_testAgainstNN (nonzero : μ ≠ 0) (f : Ω →ᵇ ℝ≥0) :\n    μ.normalize.toFiniteMeasure.testAgainstNN f = μ.mass⁻¹ * μ.testAgainstNN f := by\n  simp [μ.testAgainstNN_eq_mass_mul, inv_mul_cancel_left₀ <| μ.mass_nonzero_iff.mpr nonzero]\n\n"}
{"name":"MeasureTheory.FiniteMeasure.tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.FiniteMeasure Ω\nμs_lim : Filter.Tendsto (fun i => (μs i).normalize) F (nhds μ.normalize)\nmass_lim : Filter.Tendsto (fun i => (μs i).mass) F (nhds μ.mass)\nf : BoundedContinuousFunction Ω NNReal\n⊢ Filter.Tendsto (fun i => (μs i).testAgainstNN f) F (nhds (μ.testAgainstNN f))","decl":"theorem tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass {γ : Type*}\n    {F : Filter γ} {μs : γ → FiniteMeasure Ω}\n    (μs_lim : Tendsto (fun i ↦ (μs i).normalize) F (𝓝 μ.normalize))\n    (mass_lim : Tendsto (fun i ↦ (μs i).mass) F (𝓝 μ.mass)) (f : Ω →ᵇ ℝ≥0) :\n    Tendsto (fun i ↦ (μs i).testAgainstNN f) F (𝓝 (μ.testAgainstNN f)) := by\n  by_cases h_mass : μ.mass = 0\n  · simp only [μ.mass_zero_iff.mp h_mass, zero_testAgainstNN_apply, zero_mass,\n      eq_self_iff_true] at mass_lim ⊢\n    exact tendsto_zero_testAgainstNN_of_tendsto_zero_mass mass_lim f\n  simp_rw [fun i ↦ (μs i).testAgainstNN_eq_mass_mul f, μ.testAgainstNN_eq_mass_mul f]\n  rw [ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds] at μs_lim\n  rw [tendsto_iff_forall_testAgainstNN_tendsto] at μs_lim\n  have lim_pair :\n    Tendsto (fun i ↦ (⟨(μs i).mass, (μs i).normalize.toFiniteMeasure.testAgainstNN f⟩ : ℝ≥0 × ℝ≥0))\n      F (𝓝 ⟨μ.mass, μ.normalize.toFiniteMeasure.testAgainstNN f⟩) :=\n    (Prod.tendsto_iff _ _).mpr ⟨mass_lim, μs_lim f⟩\n  exact tendsto_mul.comp lim_pair\n\n"}
{"name":"MeasureTheory.FiniteMeasure.tendsto_normalize_testAgainstNN_of_tendsto","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.FiniteMeasure Ω\nμs_lim : Filter.Tendsto μs F (nhds μ)\nnonzero : Ne μ 0\nf : BoundedContinuousFunction Ω NNReal\n⊢ Filter.Tendsto (fun i => (μs i).normalize.toFiniteMeasure.testAgainstNN f) F (nhds (μ.normalize.toFiniteMeasure.testAgainstNN f))","decl":"theorem tendsto_normalize_testAgainstNN_of_tendsto {γ : Type*} {F : Filter γ}\n    {μs : γ → FiniteMeasure Ω} (μs_lim : Tendsto μs F (𝓝 μ)) (nonzero : μ ≠ 0) (f : Ω →ᵇ ℝ≥0) :\n    Tendsto (fun i ↦ (μs i).normalize.toFiniteMeasure.testAgainstNN f) F\n      (𝓝 (μ.normalize.toFiniteMeasure.testAgainstNN f)) := by\n  have lim_mass := μs_lim.mass\n  have aux : {(0 : ℝ≥0)}ᶜ ∈ 𝓝 μ.mass :=\n    isOpen_compl_singleton.mem_nhds (μ.mass_nonzero_iff.mpr nonzero)\n  have eventually_nonzero : ∀ᶠ i in F, μs i ≠ 0 := by\n    simp_rw [← mass_nonzero_iff]\n    exact lim_mass aux\n  have eve : ∀ᶠ i in F,\n      (μs i).normalize.toFiniteMeasure.testAgainstNN f =\n        (μs i).mass⁻¹ * (μs i).testAgainstNN f := by\n    filter_upwards [eventually_iff.mp eventually_nonzero]\n    intro i hi\n    apply normalize_testAgainstNN _ hi\n  simp_rw [tendsto_congr' eve, μ.normalize_testAgainstNN nonzero]\n  have lim_pair :\n    Tendsto (fun i ↦ (⟨(μs i).mass⁻¹, (μs i).testAgainstNN f⟩ : ℝ≥0 × ℝ≥0)) F\n      (𝓝 ⟨μ.mass⁻¹, μ.testAgainstNN f⟩) := by\n    refine (Prod.tendsto_iff _ _).mpr ⟨?_, ?_⟩\n    · exact (continuousOn_inv₀.continuousAt aux).tendsto.comp lim_mass\n    · exact tendsto_iff_forall_testAgainstNN_tendsto.mp μs_lim f\n  exact tendsto_mul.comp lim_pair\n\n"}
{"name":"MeasureTheory.FiniteMeasure.tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.FiniteMeasure Ω\nμs_lim : Filter.Tendsto (fun i => (μs i).normalize) F (nhds μ.normalize)\nmass_lim : Filter.Tendsto (fun i => (μs i).mass) F (nhds μ.mass)\n⊢ Filter.Tendsto μs F (nhds μ)","decl":"/-- If the normalized versions of finite measures converge weakly and their total masses\nalso converge, then the finite measures themselves converge weakly. -/\ntheorem tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass {γ : Type*} {F : Filter γ}\n    {μs : γ → FiniteMeasure Ω} (μs_lim : Tendsto (fun i ↦ (μs i).normalize) F (𝓝 μ.normalize))\n    (mass_lim : Tendsto (fun i ↦ (μs i).mass) F (𝓝 μ.mass)) : Tendsto μs F (𝓝 μ) := by\n  rw [tendsto_iff_forall_testAgainstNN_tendsto]\n  exact fun f ↦\n    tendsto_testAgainstNN_of_tendsto_normalize_testAgainstNN_of_tendsto_mass μs_lim mass_lim f\n\n"}
{"name":"MeasureTheory.FiniteMeasure.tendsto_normalize_of_tendsto","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.FiniteMeasure Ω\nμs_lim : Filter.Tendsto μs F (nhds μ)\nnonzero : Ne μ 0\n⊢ Filter.Tendsto (fun i => (μs i).normalize) F (nhds μ.normalize)","decl":"/-- If finite measures themselves converge weakly to a nonzero limit measure, then their\nnormalized versions also converge weakly. -/\ntheorem tendsto_normalize_of_tendsto {γ : Type*} {F : Filter γ} {μs : γ → FiniteMeasure Ω}\n    (μs_lim : Tendsto μs F (𝓝 μ)) (nonzero : μ ≠ 0) :\n    Tendsto (fun i ↦ (μs i).normalize) F (𝓝 μ.normalize) := by\n  rw [ProbabilityMeasure.tendsto_nhds_iff_toFiniteMeasure_tendsto_nhds,\n    tendsto_iff_forall_testAgainstNN_tendsto]\n  exact fun f ↦ tendsto_normalize_testAgainstNN_of_tendsto μs_lim nonzero f\n\n"}
{"name":"MeasureTheory.FiniteMeasure.tendsto_normalize_iff_tendsto","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\ninst✝² : Nonempty Ω\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.FiniteMeasure Ω\ninst✝¹ : TopologicalSpace Ω\ninst✝ : OpensMeasurableSpace Ω\nγ : Type u_2\nF : Filter γ\nμs : γ → MeasureTheory.FiniteMeasure Ω\nnonzero : Ne μ 0\n⊢ Iff (And (Filter.Tendsto (fun i => (μs i).normalize) F (nhds μ.normalize)) (Filter.Tendsto (fun i => (μs i).mass) F (nhds μ.mass))) (Filter.Tendsto μs F (nhds μ))","decl":"/-- The weak convergence of finite measures to a nonzero limit can be characterized by the weak\nconvergence of both their normalized versions (probability measures) and their total masses. -/\ntheorem tendsto_normalize_iff_tendsto {γ : Type*} {F : Filter γ} {μs : γ → FiniteMeasure Ω}\n    (nonzero : μ ≠ 0) :\n    Tendsto (fun i ↦ (μs i).normalize) F (𝓝 μ.normalize) ∧\n        Tendsto (fun i ↦ (μs i).mass) F (𝓝 μ.mass) ↔\n      Tendsto μs F (𝓝 μ) := by\n  constructor\n  · rintro ⟨normalized_lim, mass_lim⟩\n    exact tendsto_of_tendsto_normalize_testAgainstNN_of_tendsto_mass normalized_lim mass_lim\n  · intro μs_lim\n    exact ⟨tendsto_normalize_of_tendsto μs_lim nonzero, μs_lim.mass⟩\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.toMeasure_map","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\nΩ' : Type u_2\ninst✝¹ : MeasurableSpace Ω\ninst✝ : MeasurableSpace Ω'\nν : MeasureTheory.ProbabilityMeasure Ω\nf : Ω → Ω'\nhf : AEMeasurable f ↑ν\n⊢ Eq (↑(ν.map hf)) (MeasureTheory.Measure.map f ↑ν)","decl":"@[simp] lemma toMeasure_map (ν : ProbabilityMeasure Ω) {f : Ω → Ω'} (hf : AEMeasurable f ν) :\n    (ν.map hf).toMeasure = ν.toMeasure.map f := rfl\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.map_apply'","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\nΩ' : Type u_2\ninst✝¹ : MeasurableSpace Ω\ninst✝ : MeasurableSpace Ω'\nν : MeasureTheory.ProbabilityMeasure Ω\nf : Ω → Ω'\nf_aemble : AEMeasurable f ↑ν\nA : Set Ω'\nA_mble : MeasurableSet A\n⊢ Eq (↑(ν.map f_aemble) A) (↑ν (Set.preimage f A))","decl":"/-- Note that this is an equality of elements of `ℝ≥0∞`. See also\n`MeasureTheory.ProbabilityMeasure.map_apply` for the corresponding equality as elements of `ℝ≥0`. -/\nlemma map_apply' (ν : ProbabilityMeasure Ω) {f : Ω → Ω'} (f_aemble : AEMeasurable f ν)\n    {A : Set Ω'} (A_mble : MeasurableSet A) :\n    (ν.map f_aemble : Measure Ω') A = (ν : Measure Ω) (f ⁻¹' A) :=\n  Measure.map_apply_of_aemeasurable f_aemble A_mble\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.map_apply_of_aemeasurable","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\nΩ' : Type u_2\ninst✝¹ : MeasurableSpace Ω\ninst✝ : MeasurableSpace Ω'\nν : MeasureTheory.ProbabilityMeasure Ω\nf : Ω → Ω'\nf_aemble : AEMeasurable f ↑ν\nA : Set Ω'\nA_mble : MeasurableSet A\n⊢ Eq ((ν.map f_aemble) A) (ν (Set.preimage f A))","decl":"lemma map_apply_of_aemeasurable (ν : ProbabilityMeasure Ω) {f : Ω → Ω'}\n    (f_aemble : AEMeasurable f ν) {A : Set Ω'} (A_mble : MeasurableSet A) :\n    (ν.map f_aemble) A = ν (f ⁻¹' A) := by\n  exact (ENNReal.toNNReal_eq_toNNReal_iff' (measure_ne_top _ _) (measure_ne_top _ _)).mpr <|\n    ν.map_apply' f_aemble A_mble\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.map_apply","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\nΩ' : Type u_2\ninst✝¹ : MeasurableSpace Ω\ninst✝ : MeasurableSpace Ω'\nν : MeasureTheory.ProbabilityMeasure Ω\nf : Ω → Ω'\nf_aemble : AEMeasurable f ↑ν\nA : Set Ω'\nA_mble : MeasurableSet A\n⊢ Eq ((ν.map f_aemble) A) (ν (Set.preimage f A))","decl":"lemma map_apply (ν : ProbabilityMeasure Ω) {f : Ω → Ω'} (f_aemble : AEMeasurable f ν)\n    {A : Set Ω'} (A_mble : MeasurableSet A) :\n    (ν.map f_aemble) A = ν (f ⁻¹' A) :=\n  map_apply_of_aemeasurable ν f_aemble A_mble\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.tendsto_map_of_tendsto_of_continuous","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\nΩ' : Type u_2\ninst✝⁵ : MeasurableSpace Ω\ninst✝⁴ : MeasurableSpace Ω'\ninst✝³ : TopologicalSpace Ω\ninst✝² : OpensMeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω'\ninst✝ : BorelSpace Ω'\nι : Type u_3\nL : Filter ι\nνs : ι → MeasureTheory.ProbabilityMeasure Ω\nν : MeasureTheory.ProbabilityMeasure Ω\nlim : Filter.Tendsto νs L (nhds ν)\nf : Ω → Ω'\nf_cont : Continuous f\n⊢ Filter.Tendsto (fun i => (νs i).map ⋯) L (nhds (ν.map ⋯))","decl":"/-- If `f : X → Y` is continuous and `Y` is equipped with the Borel sigma algebra, then\nconvergence (in distribution) of `ProbabilityMeasure`s on `X` implies convergence (in\ndistribution) of the push-forwards of these measures by `f`. -/\nlemma tendsto_map_of_tendsto_of_continuous {ι : Type*} {L : Filter ι}\n    (νs : ι → ProbabilityMeasure Ω) (ν : ProbabilityMeasure Ω) (lim : Tendsto νs L (𝓝 ν))\n    {f : Ω → Ω'} (f_cont : Continuous f) :\n    Tendsto (fun i ↦ (νs i).map f_cont.measurable.aemeasurable) L\n      (𝓝 (ν.map f_cont.measurable.aemeasurable)) := by\n  rw [ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto] at lim ⊢\n  intro g\n  convert lim (g.compContinuous ⟨f, f_cont⟩) <;>\n  · simp only [map, compContinuous_apply, ContinuousMap.coe_mk]\n    refine lintegral_map ?_ f_cont.measurable\n    exact (ENNReal.continuous_coe.comp g.continuous).measurable\n\n"}
{"name":"MeasureTheory.ProbabilityMeasure.continuous_map","module":"Mathlib.MeasureTheory.Measure.ProbabilityMeasure","initialProofState":"Ω : Type u_1\nΩ' : Type u_2\ninst✝⁵ : MeasurableSpace Ω\ninst✝⁴ : MeasurableSpace Ω'\ninst✝³ : TopologicalSpace Ω\ninst✝² : OpensMeasurableSpace Ω\ninst✝¹ : TopologicalSpace Ω'\ninst✝ : BorelSpace Ω'\nf : Ω → Ω'\nf_cont : Continuous f\n⊢ Continuous fun ν => ν.map ⋯","decl":"/-- If `f : X → Y` is continuous and `Y` is equipped with the Borel sigma algebra, then\nthe push-forward of probability measures `f* : ProbabilityMeasure X → ProbabilityMeasure Y`\nis continuous (in the topologies of convergence in distribution). -/\nlemma continuous_map {f : Ω → Ω'} (f_cont : Continuous f) :\n    Continuous (fun ν ↦ ProbabilityMeasure.map ν f_cont.measurable.aemeasurable) := by\n  rw [continuous_iff_continuousAt]\n  exact fun _ ↦ tendsto_map_of_tendsto_of_continuous _ _ continuous_id.continuousAt f_cont\n\n"}
