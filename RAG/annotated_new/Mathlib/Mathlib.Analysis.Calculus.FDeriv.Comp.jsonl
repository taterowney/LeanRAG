{"name":"HasFDerivAtFilter.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nL' : Filter F\nhg : HasFDerivAtFilter g g' (f x) L'\nhf : HasFDerivAtFilter f f' x L\nhL : Filter.Tendsto f L L'\n⊢ HasFDerivAtFilter (Function.comp g f) (g'.comp f') x L","decl":"theorem HasFDerivAtFilter.comp {g : F → G} {g' : F →L[𝕜] G} {L' : Filter F}\n    (hg : HasFDerivAtFilter g g' (f x) L') (hf : HasFDerivAtFilter f f' x L) (hL : Tendsto f L L') :\n    HasFDerivAtFilter (g ∘ f) (g'.comp f') x L := by\n  let eq₁ := (g'.isBigO_comp _ _).trans_isLittleO hf.isLittleO\n  let eq₂ := (hg.isLittleO.comp_tendsto hL).trans_isBigO hf.isBigO_sub\n  refine .of_isLittleO <| eq₂.triangle <| eq₁.congr_left fun x' => ?_\n  simp\n\n/- A readable version of the previous theorem, a general form of the chain rule. -/\n"}
{"name":"HasFDerivWithinAt.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nt : Set F\nhg : HasFDerivWithinAt g g' t (f x)\nhf : HasFDerivWithinAt f f' s x\nhst : Set.MapsTo f s t\n⊢ HasFDerivWithinAt (Function.comp g f) (g'.comp f') s x","decl":"@[fun_prop]\ntheorem HasFDerivWithinAt.comp {g : F → G} {g' : F →L[𝕜] G} {t : Set F}\n    (hg : HasFDerivWithinAt g g' t (f x)) (hf : HasFDerivWithinAt f f' s x) (hst : MapsTo f s t) :\n    HasFDerivWithinAt (g ∘ f) (g'.comp f') s x :=\n  HasFDerivAtFilter.comp x hg hf <| hf.continuousWithinAt.tendsto_nhdsWithin hst\n\n"}
{"name":"HasFDerivAt.comp_hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nhg : HasFDerivAt g g' (f x)\nhf : HasFDerivWithinAt f f' s x\n⊢ HasFDerivWithinAt (Function.comp g f) (g'.comp f') s x","decl":"@[fun_prop]\ntheorem HasFDerivAt.comp_hasFDerivWithinAt {g : F → G} {g' : F →L[𝕜] G}\n    (hg : HasFDerivAt g g' (f x)) (hf : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt (g ∘ f) (g'.comp f') s x :=\n  hg.comp x hf hf.continuousWithinAt\n\n"}
{"name":"HasFDerivWithinAt.comp_of_tendsto","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nt : Set F\nhg : HasFDerivWithinAt g g' t (f x)\nhf : HasFDerivWithinAt f f' s x\nhst : Filter.Tendsto f (nhdsWithin x s) (nhdsWithin (f x) t)\n⊢ HasFDerivWithinAt (Function.comp g f) (g'.comp f') s x","decl":"@[fun_prop]\ntheorem HasFDerivWithinAt.comp_of_tendsto {g : F → G} {g' : F →L[𝕜] G} {t : Set F}\n    (hg : HasFDerivWithinAt g g' t (f x)) (hf : HasFDerivWithinAt f f' s x)\n    (hst : Tendsto f (𝓝[s] x) (𝓝[t] f x)) : HasFDerivWithinAt (g ∘ f) (g'.comp f') s x :=\n  HasFDerivAtFilter.comp x hg hf hst\n\n"}
{"name":"HasFDerivWithinAt.comp_of_mem","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nt : Set F\nhg : HasFDerivWithinAt g g' t (f x)\nhf : HasFDerivWithinAt f f' s x\nhst : Filter.Tendsto f (nhdsWithin x s) (nhdsWithin (f x) t)\n⊢ HasFDerivWithinAt (Function.comp g f) (g'.comp f') s x","decl":"@[deprecated (since := \"2024-10-18\")]\nalias HasFDerivWithinAt.comp_of_mem := HasFDerivWithinAt.comp_of_tendsto\n\n"}
{"name":"HasFDerivAt.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nhg : HasFDerivAt g g' (f x)\nhf : HasFDerivAt f f' x\n⊢ HasFDerivAt (Function.comp g f) (g'.comp f') x","decl":"/-- The chain rule. -/\n@[fun_prop]\ntheorem HasFDerivAt.comp {g : F → G} {g' : F →L[𝕜] G} (hg : HasFDerivAt g g' (f x))\n    (hf : HasFDerivAt f f' x) : HasFDerivAt (g ∘ f) (g'.comp f') x :=\n  HasFDerivAtFilter.comp x hg hf hf.continuousAt\n\n"}
{"name":"DifferentiableWithinAt.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\nhg : DifferentiableWithinAt 𝕜 g t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\n⊢ DifferentiableWithinAt 𝕜 (Function.comp g f) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.comp {g : F → G} {t : Set F}\n    (hg : DifferentiableWithinAt 𝕜 g t (f x)) (hf : DifferentiableWithinAt 𝕜 f s x)\n    (h : MapsTo f s t) : DifferentiableWithinAt 𝕜 (g ∘ f) s x :=\n  (hg.hasFDerivWithinAt.comp x hf.hasFDerivWithinAt h).differentiableWithinAt\n\n"}
{"name":"DifferentiableWithinAt.comp'","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\nhg : DifferentiableWithinAt 𝕜 g t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\n⊢ DifferentiableWithinAt 𝕜 (Function.comp g f) (Inter.inter s (Set.preimage f t)) x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.comp' {g : F → G} {t : Set F}\n    (hg : DifferentiableWithinAt 𝕜 g t (f x)) (hf : DifferentiableWithinAt 𝕜 f s x) :\n    DifferentiableWithinAt 𝕜 (g ∘ f) (s ∩ f ⁻¹' t) x :=\n  hg.comp x (hf.mono inter_subset_left) inter_subset_right\n\n"}
{"name":"DifferentiableAt.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableAt 𝕜 f x\n⊢ DifferentiableAt 𝕜 (Function.comp g f) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.comp {g : F → G} (hg : DifferentiableAt 𝕜 g (f x))\n    (hf : DifferentiableAt 𝕜 f x) : DifferentiableAt 𝕜 (g ∘ f) x :=\n  (hg.hasFDerivAt.comp x hf.hasFDerivAt).differentiableAt\n\n"}
{"name":"DifferentiableAt.comp_differentiableWithinAt","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\n⊢ DifferentiableWithinAt 𝕜 (Function.comp g f) s x","decl":"@[fun_prop]\ntheorem DifferentiableAt.comp_differentiableWithinAt {g : F → G} (hg : DifferentiableAt 𝕜 g (f x))\n    (hf : DifferentiableWithinAt 𝕜 f s x) : DifferentiableWithinAt 𝕜 (g ∘ f) s x :=\n  hg.differentiableWithinAt.comp x hf (mapsTo_univ _ _)\n\n"}
{"name":"fderivWithin_comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\nhg : DifferentiableWithinAt 𝕜 g t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Function.comp g f) s x) ((fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x))","decl":"theorem fderivWithin_comp {g : F → G} {t : Set F} (hg : DifferentiableWithinAt 𝕜 g t (f x))\n    (hf : DifferentiableWithinAt 𝕜 f s x) (h : MapsTo f s t) (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (g ∘ f) s x = (fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x) :=\n  (hg.hasFDerivWithinAt.comp x hf.hasFDerivWithinAt h).fderivWithin hxs\n\n"}
{"name":"fderivWithin.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\nhg : DifferentiableWithinAt 𝕜 g t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Function.comp g f) s x) ((fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x))","decl":"@[deprecated (since := \"2024-10-31\")] alias fderivWithin.comp := fderivWithin_comp\n\n"}
{"name":"fderivWithin_comp_of_eq","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\ny : F\nhg : DifferentiableWithinAt 𝕜 g t y\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\nhxs : UniqueDiffWithinAt 𝕜 s x\nhy : Eq (f x) y\n⊢ Eq (fderivWithin 𝕜 (Function.comp g f) s x) ((fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x))","decl":"theorem fderivWithin_comp_of_eq {g : F → G} {t : Set F} {y : F}\n    (hg : DifferentiableWithinAt 𝕜 g t y) (hf : DifferentiableWithinAt 𝕜 f s x) (h : MapsTo f s t)\n    (hxs : UniqueDiffWithinAt 𝕜 s x) (hy : f x = y) :\n    fderivWithin 𝕜 (g ∘ f) s x = (fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x) := by\n  subst hy; exact fderivWithin_comp _ hg hf h hxs\n\n"}
{"name":"fderivWithin_comp'","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\nhg : DifferentiableWithinAt 𝕜 g t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (fun y => g (f y)) s x) ((fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x))","decl":"/-- A variant for the derivative of a composition, written without `∘`. -/\ntheorem fderivWithin_comp' {g : F → G} {t : Set F} (hg : DifferentiableWithinAt 𝕜 g t (f x))\n    (hf : DifferentiableWithinAt 𝕜 f s x) (h : MapsTo f s t) (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (fun y ↦ g (f y)) s x\n      = (fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x) :=\n  fderivWithin_comp _ hg hf h hxs\n\n"}
{"name":"fderivWithin_comp_of_eq'","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nt : Set F\ny : F\nhg : DifferentiableWithinAt 𝕜 g t y\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\nhxs : UniqueDiffWithinAt 𝕜 s x\nhy : Eq (f x) y\n⊢ Eq (fderivWithin 𝕜 (fun y => g (f y)) s x) ((fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x))","decl":"/-- A variant for the derivative of a composition, written without `∘`. -/\ntheorem fderivWithin_comp_of_eq' {g : F → G} {t : Set F} {y : F}\n    (hg : DifferentiableWithinAt 𝕜 g t y) (hf : DifferentiableWithinAt 𝕜 f s x) (h : MapsTo f s t)\n    (hxs : UniqueDiffWithinAt 𝕜 s x) (hy : f x = y) :\n    fderivWithin 𝕜 (fun y ↦ g (f y)) s x\n      = (fderivWithin 𝕜 g t (f x)).comp (fderivWithin 𝕜 f s x) := by\n  subst hy; exact fderivWithin_comp _ hg hf h hxs\n\n"}
{"name":"fderivWithin_fderivWithin","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\ng : F → G\nf : E → F\nx : E\ny : F\ns : Set E\nt : Set F\nhg : DifferentiableWithinAt 𝕜 g t y\nhf : DifferentiableWithinAt 𝕜 f s x\nh : Set.MapsTo f s t\nhxs : UniqueDiffWithinAt 𝕜 s x\nhy : Eq (f x) y\nv : E\n⊢ Eq ((fderivWithin 𝕜 g t y) ((fderivWithin 𝕜 f s x) v)) ((fderivWithin 𝕜 (Function.comp g f) s x) v)","decl":"/-- A version of `fderivWithin_comp` that is useful to rewrite the composition of two derivatives\n  into a single derivative. This version always applies, but creates a new side-goal `f x = y`. -/\ntheorem fderivWithin_fderivWithin {g : F → G} {f : E → F} {x : E} {y : F} {s : Set E} {t : Set F}\n    (hg : DifferentiableWithinAt 𝕜 g t y) (hf : DifferentiableWithinAt 𝕜 f s x) (h : MapsTo f s t)\n    (hxs : UniqueDiffWithinAt 𝕜 s x) (hy : f x = y) (v : E) :\n    fderivWithin 𝕜 g t y (fderivWithin 𝕜 f s x v) = fderivWithin 𝕜 (g ∘ f) s x v := by\n  subst y\n  rw [fderivWithin_comp x hg hf h hxs, coe_comp', Function.comp_apply]\n\n"}
{"name":"fderivWithin_comp₃","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nG : Type u_4\ninst✝³ : NormedAddCommGroup G\ninst✝² : NormedSpace 𝕜 G\nG' : Type u_5\ninst✝¹ : NormedAddCommGroup G'\ninst✝ : NormedSpace 𝕜 G'\nf : E → F\nx : E\ns : Set E\ng' : G → G'\ng : F → G\nt : Set F\nu : Set G\ny : F\ny' : G\nhg' : DifferentiableWithinAt 𝕜 g' u y'\nhg : DifferentiableWithinAt 𝕜 g t y\nhf : DifferentiableWithinAt 𝕜 f s x\nh2g : Set.MapsTo g t u\nh2f : Set.MapsTo f s t\nh3g : Eq (g y) y'\nh3f : Eq (f x) y\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Function.comp g' (Function.comp g f)) s x) ((fderivWithin 𝕜 g' u y').comp ((fderivWithin 𝕜 g t y).comp (fderivWithin 𝕜 f s x)))","decl":"/-- Ternary version of `fderivWithin_comp`, with equality assumptions of basepoints added, in\n  order to apply more easily as a rewrite from right-to-left. -/\ntheorem fderivWithin_comp₃ {g' : G → G'} {g : F → G} {t : Set F} {u : Set G} {y : F} {y' : G}\n    (hg' : DifferentiableWithinAt 𝕜 g' u y') (hg : DifferentiableWithinAt 𝕜 g t y)\n    (hf : DifferentiableWithinAt 𝕜 f s x) (h2g : MapsTo g t u) (h2f : MapsTo f s t) (h3g : g y = y')\n    (h3f : f x = y) (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (g' ∘ g ∘ f) s x =\n      (fderivWithin 𝕜 g' u y').comp ((fderivWithin 𝕜 g t y).comp (fderivWithin 𝕜 f s x)) := by\n  substs h3g h3f\n  exact (hg'.hasFDerivWithinAt.comp x (hg.hasFDerivWithinAt.comp x hf.hasFDerivWithinAt h2f) <|\n    h2g.comp h2f).fderivWithin hxs\n\n"}
{"name":"fderivWithin.comp₃","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nG : Type u_4\ninst✝³ : NormedAddCommGroup G\ninst✝² : NormedSpace 𝕜 G\nG' : Type u_5\ninst✝¹ : NormedAddCommGroup G'\ninst✝ : NormedSpace 𝕜 G'\nf : E → F\nx : E\ns : Set E\ng' : G → G'\ng : F → G\nt : Set F\nu : Set G\ny : F\ny' : G\nhg' : DifferentiableWithinAt 𝕜 g' u y'\nhg : DifferentiableWithinAt 𝕜 g t y\nhf : DifferentiableWithinAt 𝕜 f s x\nh2g : Set.MapsTo g t u\nh2f : Set.MapsTo f s t\nh3g : Eq (g y) y'\nh3f : Eq (f x) y\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Function.comp g' (Function.comp g f)) s x) ((fderivWithin 𝕜 g' u y').comp ((fderivWithin 𝕜 g t y).comp (fderivWithin 𝕜 f s x)))","decl":"@[deprecated (since := \"2024-10-31\")] alias fderivWithin.comp₃ := fderivWithin_comp₃\n\n"}
{"name":"fderiv_comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableAt 𝕜 f x\n⊢ Eq (fderiv 𝕜 (Function.comp g f) x) ((fderiv 𝕜 g (f x)).comp (fderiv 𝕜 f x))","decl":"theorem fderiv_comp {g : F → G} (hg : DifferentiableAt 𝕜 g (f x)) (hf : DifferentiableAt 𝕜 f x) :\n    fderiv 𝕜 (g ∘ f) x = (fderiv 𝕜 g (f x)).comp (fderiv 𝕜 f x) :=\n  (hg.hasFDerivAt.comp x hf.hasFDerivAt).fderiv\n\n"}
{"name":"fderiv.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableAt 𝕜 f x\n⊢ Eq (fderiv 𝕜 (Function.comp g f) x) ((fderiv 𝕜 g (f x)).comp (fderiv 𝕜 f x))","decl":"@[deprecated (since := \"2024-10-31\")] alias fderiv.comp := fderiv_comp\n\n"}
{"name":"fderiv_comp'","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableAt 𝕜 f x\n⊢ Eq (fderiv 𝕜 (fun y => g (f y)) x) ((fderiv 𝕜 g (f x)).comp (fderiv 𝕜 f x))","decl":"/-- A variant for the derivative of a composition, written without `∘`. -/\ntheorem fderiv_comp' {g : F → G} (hg : DifferentiableAt 𝕜 g (f x)) (hf : DifferentiableAt 𝕜 f x) :\n    fderiv 𝕜 (fun y ↦ g (f y)) x = (fderiv 𝕜 g (f x)).comp (fderiv 𝕜 f x) :=\n  fderiv_comp x hg hf\n\n"}
{"name":"fderiv_comp_fderivWithin","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Function.comp g f) s x) ((fderiv 𝕜 g (f x)).comp (fderivWithin 𝕜 f s x))","decl":"theorem fderiv_comp_fderivWithin {g : F → G} (hg : DifferentiableAt 𝕜 g (f x))\n    (hf : DifferentiableWithinAt 𝕜 f s x) (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (g ∘ f) s x = (fderiv 𝕜 g (f x)).comp (fderivWithin 𝕜 f s x) :=\n  (hg.hasFDerivAt.comp_hasFDerivWithinAt x hf.hasFDerivWithinAt).fderivWithin hxs\n\n"}
{"name":"fderiv.comp_fderivWithin","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nx : E\ns : Set E\ng : F → G\nhg : DifferentiableAt 𝕜 g (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Function.comp g f) s x) ((fderiv 𝕜 g (f x)).comp (fderivWithin 𝕜 f s x))","decl":"@[deprecated (since := \"2024-10-31\")] alias fderiv.comp_fderivWithin := fderiv_comp_fderivWithin\n\n"}
{"name":"DifferentiableOn.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\ns : Set E\ng : F → G\nt : Set F\nhg : DifferentiableOn 𝕜 g t\nhf : DifferentiableOn 𝕜 f s\nst : Set.MapsTo f s t\n⊢ DifferentiableOn 𝕜 (Function.comp g f) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.comp {g : F → G} {t : Set F} (hg : DifferentiableOn 𝕜 g t)\n    (hf : DifferentiableOn 𝕜 f s) (st : MapsTo f s t) : DifferentiableOn 𝕜 (g ∘ f) s :=\n  fun x hx => DifferentiableWithinAt.comp x (hg (f x) (st hx)) (hf x hx) st\n\n"}
{"name":"Differentiable.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\ng : F → G\nhg : Differentiable 𝕜 g\nhf : Differentiable 𝕜 f\n⊢ Differentiable 𝕜 (Function.comp g f)","decl":"@[fun_prop]\ntheorem Differentiable.comp {g : F → G} (hg : Differentiable 𝕜 g) (hf : Differentiable 𝕜 f) :\n    Differentiable 𝕜 (g ∘ f) :=\n  fun x => DifferentiableAt.comp x (hg (f x)) (hf x)\n\n"}
{"name":"Differentiable.comp_differentiableOn","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\ns : Set E\ng : F → G\nhg : Differentiable 𝕜 g\nhf : DifferentiableOn 𝕜 f s\n⊢ DifferentiableOn 𝕜 (Function.comp g f) s","decl":"@[fun_prop]\ntheorem Differentiable.comp_differentiableOn {g : F → G} (hg : Differentiable 𝕜 g)\n    (hf : DifferentiableOn 𝕜 f s) : DifferentiableOn 𝕜 (g ∘ f) s :=\n  hg.differentiableOn.comp hf (mapsTo_univ _ _)\n\n"}
{"name":"HasStrictFDerivAt.comp","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nG : Type u_4\ninst✝¹ : NormedAddCommGroup G\ninst✝ : NormedSpace 𝕜 G\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ng : F → G\ng' : ContinuousLinearMap (RingHom.id 𝕜) F G\nhg : HasStrictFDerivAt g g' (f x)\nhf : HasStrictFDerivAt f f' x\n⊢ HasStrictFDerivAt (fun x => g (f x)) (g'.comp f') x","decl":"/-- The chain rule for derivatives in the sense of strict differentiability. -/\n@[fun_prop]\nprotected theorem HasStrictFDerivAt.comp {g : F → G} {g' : F →L[𝕜] G}\n    (hg : HasStrictFDerivAt g g' (f x)) (hf : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt (fun x => g (f x)) (g'.comp f') x :=\n  .of_isLittleO <|\n    ((hg.isLittleO.comp_tendsto (hf.continuousAt.prodMap' hf.continuousAt)).trans_isBigO\n        hf.isBigO_sub).triangle <| by\n      simpa only [g'.map_sub, f'.coe_comp'] using (g'.isBigO_comp _ _).trans_isLittleO hf.isLittleO\n\n"}
{"name":"Differentiable.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → E\nhf : Differentiable 𝕜 f\nn : Nat\n⊢ Differentiable 𝕜 (Nat.iterate f n)","decl":"@[fun_prop]\nprotected theorem Differentiable.iterate {f : E → E} (hf : Differentiable 𝕜 f) (n : ℕ) :\n    Differentiable 𝕜 f^[n] :=\n  Nat.recOn n differentiable_id fun _ ihn => ihn.comp hf\n\n"}
{"name":"DifferentiableOn.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set E\nf : E → E\nhf : DifferentiableOn 𝕜 f s\nhs : Set.MapsTo f s s\nn : Nat\n⊢ DifferentiableOn 𝕜 (Nat.iterate f n) s","decl":"@[fun_prop]\nprotected theorem DifferentiableOn.iterate {f : E → E} (hf : DifferentiableOn 𝕜 f s)\n    (hs : MapsTo f s s) (n : ℕ) : DifferentiableOn 𝕜 f^[n] s :=\n  Nat.recOn n differentiableOn_id fun _ ihn => ihn.comp hf hs\n\n"}
{"name":"HasFDerivAtFilter.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\nL : Filter E\nf : E → E\nf' : ContinuousLinearMap (RingHom.id 𝕜) E E\nhf : HasFDerivAtFilter f f' x L\nhL : Filter.Tendsto f L L\nhx : Eq (f x) x\nn : Nat\n⊢ HasFDerivAtFilter (Nat.iterate f n) (HPow.hPow f' n) x L","decl":"protected theorem HasFDerivAtFilter.iterate {f : E → E} {f' : E →L[𝕜] E}\n    (hf : HasFDerivAtFilter f f' x L) (hL : Tendsto f L L) (hx : f x = x) (n : ℕ) :\n    HasFDerivAtFilter f^[n] (f' ^ n) x L := by\n  induction n with\n  | zero => exact hasFDerivAtFilter_id x L\n  | succ n ihn =>\n    rw [Function.iterate_succ, pow_succ]\n    rw [← hx] at ihn\n    exact ihn.comp x hf hL\n\n"}
{"name":"HasFDerivAt.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\nf : E → E\nf' : ContinuousLinearMap (RingHom.id 𝕜) E E\nhf : HasFDerivAt f f' x\nhx : Eq (f x) x\nn : Nat\n⊢ HasFDerivAt (Nat.iterate f n) (HPow.hPow f' n) x","decl":"@[fun_prop]\nprotected theorem HasFDerivAt.iterate {f : E → E} {f' : E →L[𝕜] E} (hf : HasFDerivAt f f' x)\n    (hx : f x = x) (n : ℕ) : HasFDerivAt f^[n] (f' ^ n) x := by\n  refine HasFDerivAtFilter.iterate hf ?_ hx n\n  -- Porting note: was `convert hf.continuousAt`\n  convert hf.continuousAt.tendsto\n  exact hx.symm\n\n"}
{"name":"HasFDerivWithinAt.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\ns : Set E\nf : E → E\nf' : ContinuousLinearMap (RingHom.id 𝕜) E E\nhf : HasFDerivWithinAt f f' s x\nhx : Eq (f x) x\nhs : Set.MapsTo f s s\nn : Nat\n⊢ HasFDerivWithinAt (Nat.iterate f n) (HPow.hPow f' n) s x","decl":"@[fun_prop]\nprotected theorem HasFDerivWithinAt.iterate {f : E → E} {f' : E →L[𝕜] E}\n    (hf : HasFDerivWithinAt f f' s x) (hx : f x = x) (hs : MapsTo f s s) (n : ℕ) :\n    HasFDerivWithinAt f^[n] (f' ^ n) s x := by\n  refine HasFDerivAtFilter.iterate hf ?_ hx n\n  rw [_root_.nhdsWithin] -- Porting note: Added `rw` to get rid of an error\n  convert tendsto_inf.2 ⟨hf.continuousWithinAt, _⟩\n  exacts [hx.symm, (tendsto_principal_principal.2 hs).mono_left inf_le_right]\n\n"}
{"name":"HasStrictFDerivAt.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\nf : E → E\nf' : ContinuousLinearMap (RingHom.id 𝕜) E E\nhf : HasStrictFDerivAt f f' x\nhx : Eq (f x) x\nn : Nat\n⊢ HasStrictFDerivAt (Nat.iterate f n) (HPow.hPow f' n) x","decl":"@[fun_prop]\nprotected theorem HasStrictFDerivAt.iterate {f : E → E} {f' : E →L[𝕜] E}\n    (hf : HasStrictFDerivAt f f' x) (hx : f x = x) (n : ℕ) :\n    HasStrictFDerivAt f^[n] (f' ^ n) x := by\n  induction n with\n  | zero => exact hasStrictFDerivAt_id x\n  | succ n ihn =>\n    rw [Function.iterate_succ, pow_succ]\n    rw [← hx] at ihn\n    exact ihn.comp x hf\n\n"}
{"name":"DifferentiableAt.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\nf : E → E\nhf : DifferentiableAt 𝕜 f x\nhx : Eq (f x) x\nn : Nat\n⊢ DifferentiableAt 𝕜 (Nat.iterate f n) x","decl":"@[fun_prop]\nprotected theorem DifferentiableAt.iterate {f : E → E} (hf : DifferentiableAt 𝕜 f x) (hx : f x = x)\n    (n : ℕ) : DifferentiableAt 𝕜 f^[n] x :=\n  (hf.hasFDerivAt.iterate hx n).differentiableAt\n\n"}
{"name":"DifferentiableWithinAt.iterate","module":"Mathlib.Analysis.Calculus.FDeriv.Comp","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\ns : Set E\nf : E → E\nhf : DifferentiableWithinAt 𝕜 f s x\nhx : Eq (f x) x\nhs : Set.MapsTo f s s\nn : Nat\n⊢ DifferentiableWithinAt 𝕜 (Nat.iterate f n) s x","decl":"@[fun_prop]\nprotected theorem DifferentiableWithinAt.iterate {f : E → E} (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hx : f x = x) (hs : MapsTo f s s) (n : ℕ) : DifferentiableWithinAt 𝕜 f^[n] s x :=\n  (hf.hasFDerivWithinAt.iterate hx hs n).differentiableWithinAt\n\n"}
