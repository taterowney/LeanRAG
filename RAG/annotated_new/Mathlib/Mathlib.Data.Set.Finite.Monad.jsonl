{"name":"Finite.Set.finite_pure","module":"Mathlib.Data.Set.Finite.Monad","initialProofState":"α : Type u\na : α\n⊢ (Pure.pure a).Finite","decl":"theorem finite_pure (a : α) : (pure a : Set α).Finite :=\n  toFinite _\n\n"}
{"name":"Finite.Set.finite_seq","module":"Mathlib.Data.Set.Finite.Monad","initialProofState":"α : Type u\nβ : Type v\nf : Set (α → β)\ns : Set α\ninst✝¹ : Finite ↑f\ninst✝ : Finite ↑s\n⊢ Finite ↑(f.seq s)","decl":"instance finite_seq (f : Set (α → β)) (s : Set α) [Finite f] [Finite s] : Finite (f.seq s) := by\n  rw [seq_def]\n  infer_instance\n\n"}
{"name":"Set.Finite.bind","module":"Mathlib.Data.Set.Finite.Monad","initialProofState":"α β : Type u_1\ns : Set α\nf : α → Set β\nh : s.Finite\nhf : ∀ (a : α), Membership.mem s a → (f a).Finite\n⊢ (Bind.bind s f).Finite","decl":"theorem Finite.bind {α β} {s : Set α} {f : α → Set β} (h : s.Finite) (hf : ∀ a ∈ s, (f a).Finite) :\n    (s >>= f).Finite :=\n  h.biUnion hf\n\n"}
{"name":"Set.Finite.seq","module":"Mathlib.Data.Set.Finite.Monad","initialProofState":"α : Type u\nβ : Type v\nf : Set (α → β)\ns : Set α\nhf : f.Finite\nhs : s.Finite\n⊢ (f.seq s).Finite","decl":"theorem Finite.seq {f : Set (α → β)} {s : Set α} (hf : f.Finite) (hs : s.Finite) :\n    (f.seq s).Finite :=\n  hf.image2 _ hs\n\n"}
{"name":"Set.Finite.seq'","module":"Mathlib.Data.Set.Finite.Monad","initialProofState":"α β : Type u\nf : Set (α → β)\ns : Set α\nhf : f.Finite\nhs : s.Finite\n⊢ (Seq.seq f fun x => s).Finite","decl":"theorem Finite.seq' {α β : Type u} {f : Set (α → β)} {s : Set α} (hf : f.Finite) (hs : s.Finite) :\n    (f <*> s).Finite :=\n  hf.seq hs\n\n"}
