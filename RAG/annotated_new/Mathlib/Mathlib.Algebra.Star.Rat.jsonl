{"name":"Rat.instTrivialStar","module":"Mathlib.Algebra.Star.Rat","initialProofState":"⊢ TrivialStar Rat","decl":"instance Rat.instTrivialStar : TrivialStar ℚ := ⟨fun _ ↦ rfl⟩\n"}
{"name":"NNRat.instTrivialStar","module":"Mathlib.Algebra.Star.Rat","initialProofState":"⊢ TrivialStar NNRat","decl":"instance NNRat.instTrivialStar : TrivialStar ℚ≥0 := ⟨fun _ ↦ rfl⟩\n\n"}
{"name":"star_nnratCast","module":"Mathlib.Algebra.Star.Rat","initialProofState":"R : Type u_1\ninst✝¹ : DivisionSemiring R\ninst✝ : StarRing R\nq : NNRat\n⊢ Eq (Star.star ↑q) ↑q","decl":"@[simp, norm_cast]\nlemma star_nnratCast [DivisionSemiring R] [StarRing R] (q : ℚ≥0) : star (q : R) = q :=\n  (congr_arg unop <| map_nnratCast (starRingEquiv : R ≃+* Rᵐᵒᵖ) q).trans (unop_nnratCast _)\n\n"}
{"name":"star_ratCast","module":"Mathlib.Algebra.Star.Rat","initialProofState":"R : Type u_1\ninst✝¹ : DivisionRing R\ninst✝ : StarRing R\nr : Rat\n⊢ Eq (Star.star ↑r) ↑r","decl":"@[simp, norm_cast]\ntheorem star_ratCast [DivisionRing R] [StarRing R] (r : ℚ) : star (r : R) = r :=\n  (congr_arg unop <| map_ratCast (starRingEquiv : R ≃+* Rᵐᵒᵖ) r).trans (unop_ratCast _)\n"}
