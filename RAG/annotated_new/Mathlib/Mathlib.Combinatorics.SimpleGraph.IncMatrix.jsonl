{"name":"SimpleGraph.incMatrix_apply","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝¹ : Zero R\ninst✝ : One R\na : α\ne : Sym2 α\n⊢ Eq (SimpleGraph.incMatrix R G a e) ((G.incidenceSet a).indicator 1 e)","decl":"theorem incMatrix_apply [Zero R] [One R] {a : α} {e : Sym2 α} :\n    G.incMatrix R a e = (G.incidenceSet a).indicator 1 e :=\n  rfl\n\n"}
{"name":"SimpleGraph.incMatrix_apply'","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝³ : Zero R\ninst✝² : One R\ninst✝¹ : DecidableEq α\ninst✝ : DecidableRel G.Adj\na : α\ne : Sym2 α\n⊢ Eq (SimpleGraph.incMatrix R G a e) (ite (Membership.mem (G.incidenceSet a) e) 1 0)","decl":"/-- Entries of the incidence matrix can be computed given additional decidable instances. -/\ntheorem incMatrix_apply' [Zero R] [One R] [DecidableEq α] [DecidableRel G.Adj] {a : α}\n    {e : Sym2 α} : G.incMatrix R a e = if e ∈ G.incidenceSet a then 1 else 0 := by\n  unfold incMatrix Set.indicator\n  convert rfl\n\n"}
{"name":"SimpleGraph.incMatrix_apply_mul_incMatrix_apply","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝ : MulZeroOneClass R\na b : α\ne : Sym2 α\n⊢ Eq (HMul.hMul (SimpleGraph.incMatrix R G a e) (SimpleGraph.incMatrix R G b e)) ((Inter.inter (G.incidenceSet a) (G.incidenceSet b)).indicator 1 e)","decl":"theorem incMatrix_apply_mul_incMatrix_apply : G.incMatrix R a e * G.incMatrix R b e =\n    (G.incidenceSet a ∩ G.incidenceSet b).indicator 1 e := by\n  classical simp only [incMatrix, Set.indicator_apply, ite_zero_mul_ite_zero, Pi.one_apply, mul_one,\n    Set.mem_inter_iff]\n\n"}
{"name":"SimpleGraph.incMatrix_apply_mul_incMatrix_apply_of_not_adj","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝ : MulZeroOneClass R\na b : α\ne : Sym2 α\nhab : Ne a b\nh : Not (G.Adj a b)\n⊢ Eq (HMul.hMul (SimpleGraph.incMatrix R G a e) (SimpleGraph.incMatrix R G b e)) 0","decl":"theorem incMatrix_apply_mul_incMatrix_apply_of_not_adj (hab : a ≠ b) (h : ¬G.Adj a b) :\n    G.incMatrix R a e * G.incMatrix R b e = 0 := by\n  rw [incMatrix_apply_mul_incMatrix_apply, Set.indicator_of_not_mem]\n  rw [G.incidenceSet_inter_incidenceSet_of_not_adj h hab]\n  exact Set.not_mem_empty e\n\n"}
{"name":"SimpleGraph.incMatrix_of_not_mem_incidenceSet","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝ : MulZeroOneClass R\na : α\ne : Sym2 α\nh : Not (Membership.mem (G.incidenceSet a) e)\n⊢ Eq (SimpleGraph.incMatrix R G a e) 0","decl":"theorem incMatrix_of_not_mem_incidenceSet (h : e ∉ G.incidenceSet a) : G.incMatrix R a e = 0 := by\n  rw [incMatrix_apply, Set.indicator_of_not_mem h]\n\n"}
{"name":"SimpleGraph.incMatrix_of_mem_incidenceSet","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝ : MulZeroOneClass R\na : α\ne : Sym2 α\nh : Membership.mem (G.incidenceSet a) e\n⊢ Eq (SimpleGraph.incMatrix R G a e) 1","decl":"theorem incMatrix_of_mem_incidenceSet (h : e ∈ G.incidenceSet a) : G.incMatrix R a e = 1 := by\n  rw [incMatrix_apply, Set.indicator_of_mem h, Pi.one_apply]\n\n"}
{"name":"SimpleGraph.incMatrix_apply_eq_zero_iff","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝¹ : MulZeroOneClass R\na : α\ne : Sym2 α\ninst✝ : Nontrivial R\n⊢ Iff (Eq (SimpleGraph.incMatrix R G a e) 0) (Not (Membership.mem (G.incidenceSet a) e))","decl":"theorem incMatrix_apply_eq_zero_iff : G.incMatrix R a e = 0 ↔ e ∉ G.incidenceSet a := by\n  simp only [incMatrix_apply, Set.indicator_apply_eq_zero, Pi.one_apply, one_ne_zero]\n\n"}
{"name":"SimpleGraph.incMatrix_apply_eq_one_iff","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝¹ : MulZeroOneClass R\na : α\ne : Sym2 α\ninst✝ : Nontrivial R\n⊢ Iff (Eq (SimpleGraph.incMatrix R G a e) 1) (Membership.mem (G.incidenceSet a) e)","decl":"theorem incMatrix_apply_eq_one_iff : G.incMatrix R a e = 1 ↔ e ∈ G.incidenceSet a := by\n  convert one_ne_zero.ite_eq_left_iff\n  infer_instance\n\n"}
{"name":"SimpleGraph.sum_incMatrix_apply","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝² : NonAssocSemiring R\na : α\ninst✝¹ : Fintype (Sym2 α)\ninst✝ : Fintype ↑(G.neighborSet a)\n⊢ Eq (Finset.univ.sum fun e => SimpleGraph.incMatrix R G a e) ↑(G.degree a)","decl":"theorem sum_incMatrix_apply [Fintype (Sym2 α)] [Fintype (neighborSet G a)] :\n    ∑ e, G.incMatrix R a e = G.degree a := by\n  classical simp [incMatrix_apply', sum_boole, Set.filter_mem_univ_eq_toFinset]\n\n"}
{"name":"SimpleGraph.incMatrix_mul_transpose_diag","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝² : NonAssocSemiring R\na : α\ninst✝¹ : Fintype (Sym2 α)\ninst✝ : Fintype ↑(G.neighborSet a)\n⊢ Eq (HMul.hMul (SimpleGraph.incMatrix R G) (SimpleGraph.incMatrix R G).transpose a a) ↑(G.degree a)","decl":"theorem incMatrix_mul_transpose_diag [Fintype (Sym2 α)] [Fintype (neighborSet G a)] :\n    (G.incMatrix R * (G.incMatrix R)ᵀ) a a = G.degree a := by\n  classical\n  rw [← sum_incMatrix_apply]\n  simp only [mul_apply, incMatrix_apply', transpose_apply, mul_ite, mul_one, mul_zero]\n  simp_all only [ite_true, sum_boole]\n\n"}
{"name":"SimpleGraph.sum_incMatrix_apply_of_mem_edgeSet","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝¹ : NonAssocSemiring R\ne : Sym2 α\ninst✝ : Fintype α\na✝ : Membership.mem G.edgeSet e\n⊢ Eq (Finset.univ.sum fun a => SimpleGraph.incMatrix R G a e) 2","decl":"theorem sum_incMatrix_apply_of_mem_edgeSet [Fintype α] :\n    e ∈ G.edgeSet → ∑ a, G.incMatrix R a e = 2 := by\n  classical\n    refine e.ind ?_\n    intro a b h\n    rw [mem_edgeSet] at h\n    rw [← Nat.cast_two, ← card_pair h.ne]\n    simp only [incMatrix_apply', sum_boole, mk'_mem_incidenceSet_iff, h]\n    congr 2\n    ext e\n    simp only [mem_filter, mem_univ, true_and, mem_insert, mem_singleton]\n\n"}
{"name":"SimpleGraph.sum_incMatrix_apply_of_not_mem_edgeSet","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝¹ : NonAssocSemiring R\ne : Sym2 α\ninst✝ : Fintype α\nh : Not (Membership.mem G.edgeSet e)\n⊢ Eq (Finset.univ.sum fun a => SimpleGraph.incMatrix R G a e) 0","decl":"theorem sum_incMatrix_apply_of_not_mem_edgeSet [Fintype α] (h : e ∉ G.edgeSet) :\n    ∑ a, G.incMatrix R a e = 0 :=\n  sum_eq_zero fun _ _ => G.incMatrix_of_not_mem_incidenceSet fun he => h he.1\n\n"}
{"name":"SimpleGraph.incMatrix_transpose_mul_diag","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝² : NonAssocSemiring R\ne : Sym2 α\ninst✝¹ : Fintype α\ninst✝ : Decidable (Membership.mem G.edgeSet e)\n⊢ Eq (HMul.hMul (SimpleGraph.incMatrix R G).transpose (SimpleGraph.incMatrix R G) e e) (ite (Membership.mem G.edgeSet e) 2 0)","decl":"theorem incMatrix_transpose_mul_diag [Fintype α] [Decidable (e ∈ G.edgeSet)] :\n    ((G.incMatrix R)ᵀ * G.incMatrix R) e e = if e ∈ G.edgeSet then 2 else 0 := by\n  classical\n    simp only [Matrix.mul_apply, incMatrix_apply', transpose_apply, ite_zero_mul_ite_zero, one_mul,\n      sum_boole, and_self_iff]\n    split_ifs with h\n    · revert h\n      refine e.ind ?_\n      intro v w h\n      rw [← Nat.cast_two, ← card_pair (G.ne_of_adj h)]\n      simp only [mk'_mem_incidenceSet_iff, G.mem_edgeSet.mp h, true_and, mem_univ, forall_true_left,\n        forall_eq_or_imp, forall_eq, and_self, mem_singleton, ne_eq]\n      congr 2\n      ext u\n      simp\n    · revert h\n      refine e.ind ?_\n      intro v w h\n      simp [mk'_mem_incidenceSet_iff, G.mem_edgeSet.not.mp h]\n\n"}
{"name":"SimpleGraph.incMatrix_mul_transpose_apply_of_adj","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝¹ : Fintype (Sym2 α)\ninst✝ : Semiring R\na b : α\nh : G.Adj a b\n⊢ Eq (HMul.hMul (SimpleGraph.incMatrix R G) (SimpleGraph.incMatrix R G).transpose a b) 1","decl":"theorem incMatrix_mul_transpose_apply_of_adj (h : G.Adj a b) :\n    (G.incMatrix R * (G.incMatrix R)ᵀ) a b = (1 : R) := by\n  classical\n    simp_rw [Matrix.mul_apply, Matrix.transpose_apply, incMatrix_apply_mul_incMatrix_apply,\n      Set.indicator_apply, Pi.one_apply, sum_boole]\n    convert @Nat.cast_one R _\n    convert card_singleton s(a, b)\n    rw [← coe_eq_singleton, coe_filter_univ]\n    exact G.incidenceSet_inter_incidenceSet_of_adj h\n\n"}
{"name":"SimpleGraph.incMatrix_mul_transpose","module":"Mathlib.Combinatorics.SimpleGraph.IncMatrix","initialProofState":"R : Type u_1\nα : Type u_2\nG : SimpleGraph α\ninst✝⁴ : Fintype (Sym2 α)\ninst✝³ : Semiring R\ninst✝² : (a : α) → Fintype ↑(G.neighborSet a)\ninst✝¹ : DecidableEq α\ninst✝ : DecidableRel G.Adj\n⊢ Eq (HMul.hMul (SimpleGraph.incMatrix R G) (SimpleGraph.incMatrix R G).transpose) fun a b => ite (Eq a b) (↑(G.degree a)) (ite (G.Adj a b) 1 0)","decl":"theorem incMatrix_mul_transpose\n    [∀ a, Fintype (neighborSet G a)] [DecidableEq α] [DecidableRel G.Adj] :\n    G.incMatrix R * (G.incMatrix R)ᵀ = fun a b =>\n      if a = b then (G.degree a : R) else if G.Adj a b then 1 else 0 := by\n  ext a b\n  split_ifs with h h'\n  · subst b\n    exact incMatrix_mul_transpose_diag (R := R) G\n  · exact G.incMatrix_mul_transpose_apply_of_adj h'\n  · simp only [Matrix.mul_apply, Matrix.transpose_apply,\n      G.incMatrix_apply_mul_incMatrix_apply_of_not_adj h h', sum_const_zero]\n\n"}
