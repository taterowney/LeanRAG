{"name":"Int.erdos_ginzburg_ziv","module":"Mathlib.Combinatorics.Additive.ErdosGinzburgZiv","initialProofState":"ι : Type u_1\nn : Nat\ns : Finset ι\na : ι → Int\nhs : LE.le (HSub.hSub (HMul.hMul 2 n) 1) s.card\n⊢ Exists fun t => And (HasSubset.Subset t s) (And (Eq t.card n) (Dvd.dvd (↑n) (t.sum fun i => a i)))","decl":"/-- The **Erdős–Ginzburg–Ziv theorem** for `ℤ`.\n\nAny sequence of at least `2 * n - 1` elements of `ℤ` contains a subsequence of `n` elements whose\nsum is divisible by `n`. -/\ntheorem Int.erdos_ginzburg_ziv (a : ι → ℤ) (hs : 2 * n - 1 ≤ #s) :\n    ∃ t ⊆ s, #t = n ∧ ↑n ∣ ∑ i ∈ t, a i := by\n  classical\n  -- Do induction on the prime factorisation of `n`. Note that we will apply the induction\n  -- hypothesis with `ι := Finset ι`, so we need to generalise.\n  induction n using Nat.prime_composite_induction generalizing ι with\n  -- When `n := 0`, we can set `t := ∅`.\n  | zero => exact ⟨∅, by simp⟩\n  -- When `n := 1`, we can take `t` to be any subset of `s` of size `2 * n - 1`.\n  | one => simpa using exists_subset_card_eq hs\n  -- When `n := p` is prime, we use the prime case `Int.erdos_ginzburg_ziv_prime`.\n  | prime p hp =>\n    haveI := Fact.mk hp\n    obtain ⟨t, hts, ht⟩ := exists_subset_card_eq hs\n    obtain ⟨u, hut, hu⟩ := Int.erdos_ginzburg_ziv_prime a ht\n    exact ⟨u, hut.trans hts, hu⟩\n  -- When `n := m * n` is composite, we pick (by induction hypothesis on `n`) `2 * m - 1` sets of\n  -- size `n` and sums divisible by `n`. Then by induction hypothesis (on `m`) we can pick `m` of\n  -- these sets whose sum is divisible by `m * n`.\n  | composite m hm ihm n hn ihn =>\n     -- First, show that it is enough to have those `2 * m - 1` sets.\n    suffices ∀ k ≤ 2 * m - 1, ∃ 𝒜 : Finset (Finset ι), #𝒜 = k ∧\n      (𝒜 : Set (Finset ι)).Pairwise _root_.Disjoint ∧\n        ∀ ⦃t⦄, t ∈ 𝒜 → t ⊆ s ∧ #t = n ∧ ↑n ∣ ∑ i ∈ t, a i by\n     -- Assume `𝒜` is a family of `2 * m - 1` sets, each of size `n` and sum divisible by `n`.\n      obtain ⟨𝒜, h𝒜card, h𝒜disj, h𝒜⟩ := this _ le_rfl\n      -- By induction hypothesis on `m`, find a subfamily `ℬ` of size `m` such that the sum over\n      -- `t ∈ ℬ` of `(∑ i ∈ t, a i) / n` is divisible by `m`.\n      obtain ⟨ℬ, hℬ𝒜, hℬcard, hℬ⟩ := ihm (fun t ↦ (∑ i ∈ t, a i) / n) h𝒜card.ge\n      -- We are done.\n      refine ⟨ℬ.biUnion fun x ↦ x, biUnion_subset.2 fun t ht ↦ (h𝒜 <| hℬ𝒜 ht).1, ?_, ?_⟩\n      · rw [card_biUnion (h𝒜disj.mono hℬ𝒜), sum_const_nat fun t ht ↦ (h𝒜 <| hℬ𝒜 ht).2.1, hℬcard]\n      rwa [sum_biUnion, natCast_mul, mul_comm, ← Int.dvd_div_iff_mul_dvd, Int.sum_div]\n      · exact fun t ht ↦ (h𝒜 <| hℬ𝒜 ht).2.2\n      · exact dvd_sum fun t ht ↦ (h𝒜 <| hℬ𝒜 ht).2.2\n      · exact h𝒜disj.mono hℬ𝒜\n    -- Now, let's find those `2 * m - 1` sets.\n    rintro k hk\n    -- We induct on the size `k ≤ 2 * m - 1` of the family we are constructing.\n    induction' k with k ih\n    -- For `k = 0`, the empty family trivially works.\n    · exact ⟨∅, by simp⟩\n    -- At `k + 1`, call `𝒜` the existing family of size `k ≤ 2 * m - 2`.\n    obtain ⟨𝒜, h𝒜card, h𝒜disj, h𝒜⟩ := ih (Nat.le_of_succ_le hk)\n    -- There are at least `2 * (m * n) - 1 - k * n ≥ 2 * m - 1` elements in `s` that have not been\n    -- taken in any element of `𝒜`.\n    have : 2 * n - 1 ≤ #(s \\ 𝒜.biUnion id) := by\n      calc\n        _ ≤ (2 * m - k) * n - 1 := by gcongr; omega\n        _ = (2 * (m * n) - 1) - ∑ t ∈ 𝒜, #t := by\n          rw [tsub_mul, mul_assoc, tsub_right_comm, sum_const_nat fun t ht ↦ (h𝒜 ht).2.1, h𝒜card]\n        _ ≤ #s - #(𝒜.biUnion id) := by gcongr; exact card_biUnion_le\n        _ ≤ #(s \\ 𝒜.biUnion id) := le_card_sdiff ..\n    -- So by the induction hypothesis on `n` we can find a new set `t` of size `n` and sum divisible\n    -- by `n`.\n    obtain ⟨t₀, ht₀, ht₀card, ht₀sum⟩ := ihn a this\n    -- This set is distinct and disjoint from the previous ones, so we are done.\n    have : t₀ ∉ 𝒜 := by\n      rintro h\n      obtain rfl : n = 0 := by\n        simpa [← card_eq_zero, ht₀card] using sdiff_disjoint.mono ht₀ <| subset_biUnion_of_mem id h\n      omega\n    refine ⟨𝒜.cons t₀ this, by rw [card_cons, h𝒜card], ?_, ?_⟩\n    · simp only [cons_eq_insert, coe_insert, Set.pairwise_insert_of_symmetric symmetric_disjoint,\n        mem_coe, ne_eq]\n      exact ⟨h𝒜disj, fun t ht _ ↦ sdiff_disjoint.mono ht₀ <| subset_biUnion_of_mem id ht⟩\n    · simp only [cons_eq_insert, mem_insert, forall_eq_or_imp, and_assoc]\n      exact ⟨ht₀.trans sdiff_subset, ht₀card, ht₀sum, h𝒜⟩\n\n"}
{"name":"ZMod.erdos_ginzburg_ziv","module":"Mathlib.Combinatorics.Additive.ErdosGinzburgZiv","initialProofState":"ι : Type u_1\nn : Nat\ns : Finset ι\na : ι → ZMod n\nhs : LE.le (HSub.hSub (HMul.hMul 2 n) 1) s.card\n⊢ Exists fun t => And (HasSubset.Subset t s) (And (Eq t.card n) (Eq (t.sum fun i => a i) 0))","decl":"/-- The **Erdős–Ginzburg–Ziv theorem** for `ℤ/nℤ`.\n\nAny sequence of at least `2 * n - 1` elements of `ZMod n` contains a subsequence of `n` elements\nwhose sum is zero. -/\ntheorem ZMod.erdos_ginzburg_ziv (a : ι → ZMod n) (hs : 2 * n - 1 ≤ #s) :\n    ∃ t ⊆ s, #t = n ∧ ∑ i ∈ t, a i = 0 := by\n  simpa [← ZMod.intCast_zmod_eq_zero_iff_dvd] using Int.erdos_ginzburg_ziv (ZMod.cast ∘ a) hs\n\n"}
{"name":"Int.erdos_ginzburg_ziv_multiset","module":"Mathlib.Combinatorics.Additive.ErdosGinzburgZiv","initialProofState":"n : Nat\ns : Multiset Int\nhs : LE.le (HSub.hSub (HMul.hMul 2 n) 1) s.card\n⊢ Exists fun t => And (LE.le t s) (And (Eq t.card n) (Dvd.dvd (↑n) t.sum))","decl":"/-- The **Erdős–Ginzburg–Ziv theorem** for `ℤ` for multiset.\n\nAny multiset of at least `2 * n - 1` elements of `ℤ` contains a submultiset of `n` elements whose\nsum is divisible by `n`. -/\ntheorem Int.erdos_ginzburg_ziv_multiset (s : Multiset ℤ) (hs : 2 * n - 1 ≤ Multiset.card s) :\n    ∃ t ≤ s, Multiset.card t = n ∧ ↑n ∣ t.sum := by\n  obtain ⟨t, hts, ht⟩ := Int.erdos_ginzburg_ziv (s := s.toEnumFinset) Prod.fst (by simpa using hs)\n  exact ⟨t.1.map Prod.fst, Multiset.map_fst_le_of_subset_toEnumFinset hts, by simpa using ht⟩\n\n"}
{"name":"ZMod.erdos_ginzburg_ziv_multiset","module":"Mathlib.Combinatorics.Additive.ErdosGinzburgZiv","initialProofState":"n : Nat\ns : Multiset (ZMod n)\nhs : LE.le (HSub.hSub (HMul.hMul 2 n) 1) s.card\n⊢ Exists fun t => And (LE.le t s) (And (Eq t.card n) (Eq t.sum 0))","decl":"/-- The **Erdős–Ginzburg–Ziv theorem** for `ℤ/nℤ` for multiset.\n\nAny multiset of at least `2 * n - 1` elements of `ℤ` contains a submultiset of `n` elements whose\nsum is divisible by `n`. -/\ntheorem ZMod.erdos_ginzburg_ziv_multiset (s : Multiset (ZMod n))\n    (hs : 2 * n - 1 ≤ Multiset.card s) : ∃ t ≤ s, Multiset.card t = n ∧ t.sum = 0 := by\n  obtain ⟨t, hts, ht⟩ := ZMod.erdos_ginzburg_ziv (s := s.toEnumFinset) Prod.fst (by simpa using hs)\n  exact ⟨t.1.map Prod.fst, Multiset.map_fst_le_of_subset_toEnumFinset hts, by simpa using ht⟩\n\n"}
