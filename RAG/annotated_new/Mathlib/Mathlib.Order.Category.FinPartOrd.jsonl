{"name":"FinPartOrd.mk.sizeOf_spec","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"toPartOrd : PartOrd\nisFintype : Fintype ↑toPartOrd\n⊢ Eq (SizeOf.sizeOf (FinPartOrd.mk toPartOrd)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toPartOrd)) (SizeOf.sizeOf isFintype))","decl":"/-- The category of finite partial orders with monotone functions. -/\nstructure FinPartOrd where\n  toPartOrd : PartOrd\n  [isFintype : Fintype toPartOrd]\n\n"}
{"name":"FinPartOrd.mk.inj","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"toPartOrd✝ : PartOrd\nisFintype✝ : Fintype ↑toPartOrd✝\ntoPartOrd : PartOrd\nisFintype : Fintype ↑toPartOrd\nx✝ : Eq (FinPartOrd.mk toPartOrd✝) (FinPartOrd.mk toPartOrd)\n⊢ And (Eq toPartOrd✝ toPartOrd) (HEq isFintype✝ isFintype)","decl":"/-- The category of finite partial orders with monotone functions. -/\nstructure FinPartOrd where\n  toPartOrd : PartOrd\n  [isFintype : Fintype toPartOrd]\n\n"}
{"name":"FinPartOrd.mk.injEq","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"toPartOrd✝ : PartOrd\nisFintype✝ : Fintype ↑toPartOrd✝\ntoPartOrd : PartOrd\nisFintype : Fintype ↑toPartOrd\n⊢ Eq (Eq (FinPartOrd.mk toPartOrd✝) (FinPartOrd.mk toPartOrd)) (And (Eq toPartOrd✝ toPartOrd) (HEq isFintype✝ isFintype))","decl":"/-- The category of finite partial orders with monotone functions. -/\nstructure FinPartOrd where\n  toPartOrd : PartOrd\n  [isFintype : Fintype toPartOrd]\n\n"}
{"name":"FinPartOrd.coe_of","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : Fintype α\n⊢ Eq (↑(FinPartOrd.of α).toPartOrd) α","decl":"@[simp]\ntheorem coe_of (α : Type*) [PartialOrder α] [Fintype α] : ↥(of α) = α := rfl\n\n"}
{"name":"FinPartOrd.Iso.mk_inv","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"α β : FinPartOrd\ne : OrderIso ↑α.toPartOrd ↑β.toPartOrd\n⊢ Eq (FinPartOrd.Iso.mk e).inv ↑e.symm","decl":"/-- Constructs an isomorphism of finite partial orders from an order isomorphism between them. -/\n@[simps]\ndef Iso.mk {α β : FinPartOrd.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : OrderHom _ _)\n  inv := (e.symm : OrderHom _ _)\n  hom_inv_id := by\n    ext\n    exact e.symm_apply_apply _\n  inv_hom_id := by\n    ext\n    exact e.apply_symm_apply _\n\n"}
{"name":"FinPartOrd.Iso.mk_hom","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"α β : FinPartOrd\ne : OrderIso ↑α.toPartOrd ↑β.toPartOrd\n⊢ Eq (FinPartOrd.Iso.mk e).hom ↑e","decl":"/-- Constructs an isomorphism of finite partial orders from an order isomorphism between them. -/\n@[simps]\ndef Iso.mk {α β : FinPartOrd.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : OrderHom _ _)\n  inv := (e.symm : OrderHom _ _)\n  hom_inv_id := by\n    ext\n    exact e.symm_apply_apply _\n  inv_hom_id := by\n    ext\n    exact e.apply_symm_apply _\n\n"}
{"name":"FinPartOrd.dual_map","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"x✝¹ x✝ : FinPartOrd\na : OrderHom ↑x✝¹.toPartOrd ↑x✝.toPartOrd\n⊢ Eq (FinPartOrd.dual.map a) (OrderHom.dual a)","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : FinPartOrd ⥤ FinPartOrd where\n  obj X := of Xᵒᵈ\n  map {_ _} := OrderHom.dual\n\n"}
{"name":"FinPartOrd.dual_obj","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"X : FinPartOrd\n⊢ Eq (FinPartOrd.dual.obj X) (FinPartOrd.of (OrderDual ↑X.toPartOrd))","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : FinPartOrd ⥤ FinPartOrd where\n  obj X := of Xᵒᵈ\n  map {_ _} := OrderHom.dual\n\n"}
{"name":"FinPartOrd.dualEquiv_functor","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"⊢ Eq FinPartOrd.dualEquiv.functor FinPartOrd.dual","decl":"/-- The equivalence between `FinPartOrd` and itself induced by `OrderDual` both ways. -/\n@[simps]\ndef dualEquiv : FinPartOrd ≌ FinPartOrd where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"FinPartOrd.dualEquiv_unitIso","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"⊢ Eq FinPartOrd.dualEquiv.unitIso (CategoryTheory.NatIso.ofComponents (fun X => FinPartOrd.Iso.mk (OrderIso.dualDual ↑X.toPartOrd)) @FinPartOrd.dualEquiv.proof_1)","decl":"/-- The equivalence between `FinPartOrd` and itself induced by `OrderDual` both ways. -/\n@[simps]\ndef dualEquiv : FinPartOrd ≌ FinPartOrd where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"FinPartOrd.dualEquiv_counitIso","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"⊢ Eq FinPartOrd.dualEquiv.counitIso (CategoryTheory.NatIso.ofComponents (fun X => FinPartOrd.Iso.mk (OrderIso.dualDual ↑X.toPartOrd)) @FinPartOrd.dualEquiv.proof_2)","decl":"/-- The equivalence between `FinPartOrd` and itself induced by `OrderDual` both ways. -/\n@[simps]\ndef dualEquiv : FinPartOrd ≌ FinPartOrd where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"FinPartOrd.dualEquiv_inverse","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"⊢ Eq FinPartOrd.dualEquiv.inverse FinPartOrd.dual","decl":"/-- The equivalence between `FinPartOrd` and itself induced by `OrderDual` both ways. -/\n@[simps]\ndef dualEquiv : FinPartOrd ≌ FinPartOrd where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"FinPartOrd_dual_comp_forget_to_partOrd","module":"Mathlib.Order.Category.FinPartOrd","initialProofState":"⊢ Eq (FinPartOrd.dual.comp (CategoryTheory.forget₂ FinPartOrd PartOrd)) ((CategoryTheory.forget₂ FinPartOrd PartOrd).comp PartOrd.dual)","decl":"theorem FinPartOrd_dual_comp_forget_to_partOrd :\n    FinPartOrd.dual ⋙ forget₂ FinPartOrd PartOrd =\n      forget₂ FinPartOrd PartOrd ⋙ PartOrd.dual := rfl\n"}
