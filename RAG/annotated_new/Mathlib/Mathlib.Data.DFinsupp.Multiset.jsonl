{"name":"DFinsupp.toMultiset_single","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na : α\nn : Nat\n⊢ Eq (DFinsupp.toMultiset (DFinsupp.single a n)) (Multiset.replicate n a)","decl":"@[simp]\ntheorem toMultiset_single (a : α) (n : ℕ) :\n    toMultiset (DFinsupp.single a n) = Multiset.replicate n a :=\n  DFinsupp.sumAddHom_single _ _ _\n\n"}
{"name":"Multiset.toDFinsupp_apply","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns : Multiset α\na : α\n⊢ Eq ((Multiset.toDFinsupp s) a) (Multiset.count a s)","decl":"@[simp]\ntheorem toDFinsupp_apply (s : Multiset α) (a : α) : Multiset.toDFinsupp s a = s.count a :=\n  rfl\n\n"}
{"name":"Multiset.toDFinsupp_support","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns : Multiset α\n⊢ Eq (Multiset.toDFinsupp s).support s.toFinset","decl":"@[simp]\ntheorem toDFinsupp_support (s : Multiset α) : s.toDFinsupp.support = s.toFinset :=\n  Finset.filter_true_of_mem fun _ hx ↦ count_ne_zero.mpr <| Multiset.mem_toFinset.1 hx\n\n"}
{"name":"Multiset.toDFinsupp_replicate","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na : α\nn : Nat\n⊢ Eq (Multiset.toDFinsupp (Multiset.replicate n a)) (DFinsupp.single a n)","decl":"@[simp]\ntheorem toDFinsupp_replicate (a : α) (n : ℕ) :\n    toDFinsupp (Multiset.replicate n a) = DFinsupp.single a n := by\n  ext i\n  dsimp [toDFinsupp]\n  simp [count_replicate, eq_comm]\n\n"}
{"name":"Multiset.toDFinsupp_singleton","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na : α\n⊢ Eq (Multiset.toDFinsupp (Singleton.singleton a)) (DFinsupp.single a 1)","decl":"@[simp]\ntheorem toDFinsupp_singleton (a : α) : toDFinsupp {a} = DFinsupp.single a 1 := by\n  rw [← replicate_one, toDFinsupp_replicate]\n\n"}
{"name":"Multiset.equivDFinsupp_symm_apply","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na : DFinsupp fun x => Nat\n⊢ Eq (Multiset.equivDFinsupp.symm a) (DFinsupp.toMultiset a)","decl":"/-- `Multiset.toDFinsupp` as an `AddEquiv`. -/\n@[simps! apply symm_apply]\ndef equivDFinsupp : Multiset α ≃+ Π₀ _ : α, ℕ :=\n  AddMonoidHom.toAddEquiv Multiset.toDFinsupp DFinsupp.toMultiset (by ext; simp) (by ext; simp)\n\n"}
{"name":"Multiset.equivDFinsupp_apply","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\na : Multiset α\n⊢ Eq (Multiset.equivDFinsupp a) (Multiset.toDFinsupp a)","decl":"/-- `Multiset.toDFinsupp` as an `AddEquiv`. -/\n@[simps! apply symm_apply]\ndef equivDFinsupp : Multiset α ≃+ Π₀ _ : α, ℕ :=\n  AddMonoidHom.toAddEquiv Multiset.toDFinsupp DFinsupp.toMultiset (by ext; simp) (by ext; simp)\n\n"}
{"name":"Multiset.toDFinsupp_toMultiset","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns : Multiset α\n⊢ Eq (DFinsupp.toMultiset (Multiset.toDFinsupp s)) s","decl":"@[simp]\ntheorem toDFinsupp_toMultiset (s : Multiset α) : DFinsupp.toMultiset (Multiset.toDFinsupp s) = s :=\n  equivDFinsupp.symm_apply_apply s\n\n"}
{"name":"Multiset.toDFinsupp_injective","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\n⊢ Function.Injective ⇑Multiset.toDFinsupp","decl":"theorem toDFinsupp_injective : Injective (toDFinsupp : Multiset α → Π₀ _a, ℕ) :=\n  equivDFinsupp.injective\n\n"}
{"name":"Multiset.toDFinsupp_inj","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Iff (Eq (Multiset.toDFinsupp s) (Multiset.toDFinsupp t)) (Eq s t)","decl":"@[simp]\ntheorem toDFinsupp_inj : toDFinsupp s = toDFinsupp t ↔ s = t :=\n  toDFinsupp_injective.eq_iff\n\n"}
{"name":"Multiset.toDFinsupp_le_toDFinsupp","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Iff (LE.le (Multiset.toDFinsupp s) (Multiset.toDFinsupp t)) (LE.le s t)","decl":"@[simp]\ntheorem toDFinsupp_le_toDFinsupp : toDFinsupp s ≤ toDFinsupp t ↔ s ≤ t := by\n  simp [Multiset.le_iff_count, DFinsupp.le_def]\n\n"}
{"name":"Multiset.toDFinsupp_lt_toDFinsupp","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Iff (LT.lt (Multiset.toDFinsupp s) (Multiset.toDFinsupp t)) (LT.lt s t)","decl":"@[simp]\ntheorem toDFinsupp_lt_toDFinsupp : toDFinsupp s < toDFinsupp t ↔ s < t :=\n  lt_iff_lt_of_le_iff_le' toDFinsupp_le_toDFinsupp toDFinsupp_le_toDFinsupp\n\n"}
{"name":"Multiset.toDFinsupp_inter","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Multiset.toDFinsupp (Inter.inter s t)) (Min.min (Multiset.toDFinsupp s) (Multiset.toDFinsupp t))","decl":"@[simp]\ntheorem toDFinsupp_inter (s t : Multiset α) : toDFinsupp (s ∩ t) = toDFinsupp s ⊓ toDFinsupp t := by\n  ext i; simp\n\n"}
{"name":"Multiset.toDFinsupp_union","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\ns t : Multiset α\n⊢ Eq (Multiset.toDFinsupp (Union.union s t)) (Max.max (Multiset.toDFinsupp s) (Multiset.toDFinsupp t))","decl":"@[simp]\ntheorem toDFinsupp_union (s t : Multiset α) : toDFinsupp (s ∪ t) = toDFinsupp s ⊔ toDFinsupp t := by\n  ext i; simp\n\n"}
{"name":"DFinsupp.toMultiset_toDFinsupp","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nf : DFinsupp fun x => Nat\n⊢ Eq (Multiset.toDFinsupp (DFinsupp.toMultiset f)) f","decl":"@[simp]\ntheorem toMultiset_toDFinsupp (f : Π₀ _ : α, ℕ) :\n    Multiset.toDFinsupp (DFinsupp.toMultiset f) = f :=\n  Multiset.equivDFinsupp.apply_symm_apply f\n\n"}
{"name":"DFinsupp.toMultiset_injective","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\n⊢ Function.Injective ⇑DFinsupp.toMultiset","decl":"theorem toMultiset_injective : Injective (toMultiset : (Π₀ _a, ℕ) → Multiset α) :=\n  Multiset.equivDFinsupp.symm.injective\n\n"}
{"name":"DFinsupp.toMultiset_inj","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nf g : DFinsupp fun _a => Nat\n⊢ Iff (Eq (DFinsupp.toMultiset f) (DFinsupp.toMultiset g)) (Eq f g)","decl":"@[simp]\ntheorem toMultiset_inj : toMultiset f = toMultiset g ↔ f = g :=\n  toMultiset_injective.eq_iff\n\n"}
{"name":"DFinsupp.toMultiset_le_toMultiset","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nf g : DFinsupp fun _a => Nat\n⊢ Iff (LE.le (DFinsupp.toMultiset f) (DFinsupp.toMultiset g)) (LE.le f g)","decl":"@[simp]\ntheorem toMultiset_le_toMultiset : toMultiset f ≤ toMultiset g ↔ f ≤ g := by\n  simp_rw [← Multiset.toDFinsupp_le_toDFinsupp, toMultiset_toDFinsupp]\n\n"}
{"name":"DFinsupp.toMultiset_lt_toMultiset","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nf g : DFinsupp fun _a => Nat\n⊢ Iff (LT.lt (DFinsupp.toMultiset f) (DFinsupp.toMultiset g)) (LT.lt f g)","decl":"@[simp]\ntheorem toMultiset_lt_toMultiset : toMultiset f < toMultiset g ↔ f < g := by\n  simp_rw [← Multiset.toDFinsupp_lt_toDFinsupp, toMultiset_toDFinsupp]\n\n"}
{"name":"DFinsupp.toMultiset_inf","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nf g : DFinsupp fun _a => Nat\n⊢ Eq (DFinsupp.toMultiset (Min.min f g)) (Inter.inter (DFinsupp.toMultiset f) (DFinsupp.toMultiset g))","decl":"@[simp]\ntheorem toMultiset_inf : toMultiset (f ⊓ g) = toMultiset f ∩ toMultiset g :=\n  Multiset.toDFinsupp_injective <| by simp\n\n"}
{"name":"DFinsupp.toMultiset_sup","module":"Mathlib.Data.DFinsupp.Multiset","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nf g : DFinsupp fun _a => Nat\n⊢ Eq (DFinsupp.toMultiset (Max.max f g)) (Union.union (DFinsupp.toMultiset f) (DFinsupp.toMultiset g))","decl":"@[simp]\ntheorem toMultiset_sup : toMultiset (f ⊔ g) = toMultiset f∪ toMultiset g :=\n  Multiset.toDFinsupp_injective <| by simp\n\n"}
