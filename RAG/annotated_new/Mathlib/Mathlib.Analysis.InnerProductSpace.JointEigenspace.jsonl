{"name":"LinearMap.IsSymmetric.orthogonalFamily_eigenspace_inf_eigenspace","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nA B : LinearMap (RingHom.id 𝕜) E E\nhA : A.IsSymmetric\nhB : B.IsSymmetric\n⊢ OrthogonalFamily 𝕜 (fun i => Subtype fun x => Membership.mem (Min.min (Module.End.eigenspace A i.2) (Module.End.eigenspace B i.1)) x) fun i => (Min.min (Module.End.eigenspace A i.2) (Module.End.eigenspace B i.1)).subtypeₗᵢ","decl":"/-- The joint eigenspaces of a pair of symmetric operators form an\n`OrthogonalFamily`. -/\ntheorem orthogonalFamily_eigenspace_inf_eigenspace (hA : A.IsSymmetric) (hB : B.IsSymmetric) :\n    OrthogonalFamily 𝕜 (fun (i : 𝕜 × 𝕜) => (eigenspace A i.2 ⊓ eigenspace B i.1 : Submodule 𝕜 E))\n      fun i => (eigenspace A i.2 ⊓ eigenspace B i.1).subtypeₗᵢ :=\n  OrthogonalFamily.of_pairwise fun i j hij v ⟨hv1 , hv2⟩ ↦ by\n    obtain (h₁ | h₂) : i.1 ≠ j.1 ∨ i.2 ≠ j.2 := by rwa [Ne.eq_def, Prod.ext_iff, not_and_or] at hij\n    all_goals intro w ⟨hw1, hw2⟩\n    · exact hB.orthogonalFamily_eigenspaces.pairwise h₁ hv2 w hw2\n    · exact hA.orthogonalFamily_eigenspaces.pairwise h₂ hv1 w hw1\n\n"}
{"name":"LinearMap.IsSymmetric.orthogonalFamily_iInf_eigenspaces","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nn : Type u_3\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nT : n → Module.End 𝕜 E\nhT : ∀ (i : n), LinearMap.IsSymmetric (T i)\n⊢ OrthogonalFamily 𝕜 (fun γ => Subtype fun x => Membership.mem (iInf fun j => (T j).eigenspace (γ j)) x) fun γ => (iInf fun j => (T j).eigenspace (γ j)).subtypeₗᵢ","decl":"/-- The joint eigenspaces of a family of symmetric operators form an\n`OrthogonalFamily`. -/\ntheorem orthogonalFamily_iInf_eigenspaces (hT : ∀ i, (T i).IsSymmetric) :\n    OrthogonalFamily 𝕜 (fun γ : n → 𝕜 ↦ (⨅ j, eigenspace (T j) (γ j) : Submodule 𝕜 E))\n      fun γ : n → 𝕜 ↦ (⨅ j, eigenspace (T j) (γ j)).subtypeₗᵢ := by\n  intro f g hfg Ef Eg\n  obtain ⟨a , ha⟩ := Function.ne_iff.mp hfg\n  have H := orthogonalFamily_eigenspaces (hT a) ha\n  simp only [Submodule.coe_subtypeₗᵢ, Submodule.coe_subtype, Subtype.forall] at H\n  apply H\n  · exact (Submodule.mem_iInf <| fun _ ↦ eigenspace (T _) (f _)).mp Ef.2 _\n  · exact (Submodule.mem_iInf <| fun _ ↦ eigenspace (T _) (g _)).mp Eg.2 _\n\n"}
{"name":"LinearMap.IsSymmetric.iSup_eigenspace_inf_eigenspace_of_commute","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\nα : 𝕜\nA B : LinearMap (RingHom.id 𝕜) E E\ninst✝ : FiniteDimensional 𝕜 E\nhB : B.IsSymmetric\nhAB : Commute A B\n⊢ Eq (iSup fun γ => Min.min (Module.End.eigenspace A α) (Module.End.eigenspace B γ)) (Module.End.eigenspace A α)","decl":"/-- If A and B are commuting symmetric operators on a finite dimensional inner product space\nthen the eigenspaces of the restriction of B to any eigenspace of A exhaust that eigenspace. -/\ntheorem iSup_eigenspace_inf_eigenspace_of_commute (hB : B.IsSymmetric) (hAB : Commute A B) :\n    (⨆ γ, eigenspace A α ⊓ eigenspace B γ) = eigenspace A α := by\n  conv_rhs => rw [← (eigenspace A α).map_subtype_top]\n  simp only [← genEigenspace_eq_eigenspace (f := B), ← Submodule.map_iSup,\n    (eigenspace A α).inf_genEigenspace _ (mapsTo_genEigenspace_of_comm hAB α 1)]\n  congr 1\n  simpa only [genEigenspace_eq_eigenspace, Submodule.orthogonal_eq_bot_iff]\n    using orthogonalComplement_iSup_eigenspaces_eq_bot <|\n      hB.restrict_invariant <| mapsTo_genEigenspace_of_comm hAB α 1\n\n"}
{"name":"LinearMap.IsSymmetric.iSup_iSup_eigenspace_inf_eigenspace_eq_top_of_commute","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\nA B : LinearMap (RingHom.id 𝕜) E E\ninst✝ : FiniteDimensional 𝕜 E\nhA : A.IsSymmetric\nhB : B.IsSymmetric\nhAB : Commute A B\n⊢ Eq (iSup fun α => iSup fun γ => Min.min (Module.End.eigenspace A α) (Module.End.eigenspace B γ)) Top.top","decl":"/-- If A and B are commuting symmetric operators acting on a finite dimensional inner product space,\nthen the simultaneous eigenspaces of A and B exhaust the space. -/\ntheorem iSup_iSup_eigenspace_inf_eigenspace_eq_top_of_commute (hA : A.IsSymmetric)\n    (hB : B.IsSymmetric) (hAB : Commute A B) :\n    (⨆ α, ⨆ γ, eigenspace A α ⊓ eigenspace B γ) = ⊤ := by\n  simpa [iSup_eigenspace_inf_eigenspace_of_commute hB hAB] using\n    Submodule.orthogonal_eq_bot_iff.mp <| hA.orthogonalComplement_iSup_eigenspaces_eq_bot\n\n"}
{"name":"LinearMap.IsSymmetric.directSum_isInternal_of_commute","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\nA B : LinearMap (RingHom.id 𝕜) E E\ninst✝ : FiniteDimensional 𝕜 E\nhA : A.IsSymmetric\nhB : B.IsSymmetric\nhAB : Commute A B\n⊢ DirectSum.IsInternal fun i => Min.min (Module.End.eigenspace A i.2) (Module.End.eigenspace B i.1)","decl":"/-- Given a commuting pair of symmetric linear operators on a finite dimensional inner product\nspace, the space decomposes as an internal direct sum of simultaneous eigenspaces of these\noperators. -/\ntheorem directSum_isInternal_of_commute (hA : A.IsSymmetric) (hB : B.IsSymmetric)\n    (hAB : Commute A B) :\n    DirectSum.IsInternal (fun (i : 𝕜 × 𝕜) ↦ (eigenspace A i.2 ⊓ eigenspace B i.1)):= by\n  apply (orthogonalFamily_eigenspace_inf_eigenspace hA hB).isInternal_iff.mpr\n  rw [Submodule.orthogonal_eq_bot_iff, iSup_prod, iSup_comm]\n  exact iSup_iSup_eigenspace_inf_eigenspace_eq_top_of_commute hA hB hAB\n\n"}
{"name":"LinearMap.IsSymmetric.iSup_iInf_eq_top_of_commute","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : FiniteDimensional 𝕜 E\nι : Type u_5\nT : ι → LinearMap (RingHom.id 𝕜) E E\nhT : ∀ (i : ι), (T i).IsSymmetric\nh : Pairwise (Function.onFun Commute T)\n⊢ Eq (iSup fun χ => iInf fun i => Module.End.eigenspace (T i) (χ i)) Top.top","decl":"/-- A commuting family of symmetric linear maps on a finite dimensional inner\nproduct space is simultaneously diagonalizable. -/\ntheorem iSup_iInf_eq_top_of_commute {ι : Type*} {T : ι → E →ₗ[𝕜] E}\n    (hT : ∀ i, (T i).IsSymmetric) (h : Pairwise (Commute on T)):\n    ⨆ χ : ι → 𝕜, ⨅ i, eigenspace (T i) (χ i) = ⊤ :=\n  calc\n  _ = ⨆ χ : ι → 𝕜, ⨅ i, maxGenEigenspace (T i) (χ i) :=\n    congr(⨆ χ : ι → 𝕜, ⨅ i,\n      $(maxGenEigenspace_eq_eigenspace (isFinitelySemisimple <| hT _) (χ _))).symm\n  _ = ⊤ :=\n    iSup_iInf_maxGenEigenspace_eq_top_of_iSup_maxGenEigenspace_eq_top_of_commute T h fun _ ↦ by\n    rw [← orthogonal_eq_bot_iff,\n      congr(⨆ μ, $(maxGenEigenspace_eq_eigenspace (isFinitelySemisimple <| hT _) μ)),\n      (hT _).orthogonalComplement_iSup_eigenspaces_eq_bot]\n\n"}
{"name":"LinearMap.IsSymmetric.LinearMap.IsSymmetric.directSum_isInternal_of_pairwise_commute","module":"Mathlib.Analysis.InnerProductSpace.JointEigenspace","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nn : Type u_3\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\nT : n → Module.End 𝕜 E\ninst✝¹ : FiniteDimensional 𝕜 E\ninst✝ : DecidableEq (n → 𝕜)\nhT : ∀ (i : n), LinearMap.IsSymmetric (T i)\nhC : Pairwise (Function.onFun Commute T)\n⊢ DirectSum.IsInternal fun α => iInf fun j => (T j).eigenspace (α j)","decl":"/-- In finite dimensions, given a commuting family of symmetric linear operators, the inner\nproduct space on which they act decomposes as an internal direct sum of joint eigenspaces. -/\ntheorem LinearMap.IsSymmetric.directSum_isInternal_of_pairwise_commute [DecidableEq (n → 𝕜)]\n    (hT : ∀ i, (T i).IsSymmetric) (hC : Pairwise (Commute on T)) :\n    DirectSum.IsInternal (fun α : n → 𝕜 ↦ ⨅ j, eigenspace (T j) (α j)) := by\n  rw [OrthogonalFamily.isInternal_iff]\n  · rw [iSup_iInf_eq_top_of_commute hT hC, top_orthogonal_eq_bot]\n  · exact orthogonalFamily_iInf_eigenspaces hT\n\n"}
