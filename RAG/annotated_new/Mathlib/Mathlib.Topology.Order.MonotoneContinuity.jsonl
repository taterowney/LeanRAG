{"name":"StrictMonoOn.continuousWithinAt_right_of_exists_between","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : ‚àÄ (b : Œ≤), GT.gt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ioc (f a) b) (f c))\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If `f` is a function strictly monotone on a right neighborhood of `a` and the\nimage of this neighborhood under `f` meets every interval `(f a, b]`, `b > f a`, then `f` is\ncontinuous at `a` from the right.\n\nThe assumption `hfs : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioc (f a) b` is required because otherwise the\nfunction `f : ‚Ñù ‚Üí ‚Ñù` given by `f x = if x ‚â§ 0 then x else x + 1` would be a counter-example at\n`a = 0`. -/\ntheorem StrictMonoOn.continuousWithinAt_right_of_exists_between {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â•] a) (hfs : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioc (f a) b) :\n    ContinuousWithinAt f (Ici a) a := by\n  have ha : a ‚àà Ici a := left_mem_Ici\n  have has : a ‚àà s := mem_of_mem_nhdsWithin ha hs\n  refine tendsto_order.2 ‚ü®fun b hb => ?_, fun b hb => ?_‚ü©\n  ¬∑ filter_upwards [hs, @self_mem_nhdsWithin _ _ a (Ici a)] with _ hxs hxa using hb.trans_le\n      ((h_mono.le_iff_le has hxs).2 hxa)\n  ¬∑ rcases hfs b hb with ‚ü®c, hcs, hac, hcb‚ü©\n    rw [h_mono.lt_iff_lt has hcs] at hac\n    filter_upwards [hs, Ico_mem_nhdsGE hac]\n    rintro x hx ‚ü®_, hxc‚ü©\n    exact ((h_mono.lt_iff_lt hx hcs).2 hxc).trans_le hcb\n\n"}
{"name":"continuousWithinAt_right_of_monotoneOn_of_exists_between","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : ‚àÄ (b : Œ≤), GT.gt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ioo (f a) b) (f c))\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If `f` is a monotone function on a right neighborhood of `a` and the image of this neighborhood\nunder `f` meets every interval `(f a, b)`, `b > f a`, then `f` is continuous at `a` from the right.\n\nThe assumption `hfs : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioo (f a) b` cannot be replaced by the weaker\nassumption `hfs : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioc (f a) b` we use for strictly monotone functions\nbecause otherwise the function `ceil : ‚Ñù ‚Üí ‚Ñ§` would be a counter-example at `a = 0`. -/\ntheorem continuousWithinAt_right_of_monotoneOn_of_exists_between {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù[‚â•] a) (hfs : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioo (f a) b) :\n    ContinuousWithinAt f (Ici a) a := by\n  have ha : a ‚àà Ici a := left_mem_Ici\n  have has : a ‚àà s := mem_of_mem_nhdsWithin ha hs\n  refine tendsto_order.2 ‚ü®fun b hb => ?_, fun b hb => ?_‚ü©\n  ¬∑ filter_upwards [hs, @self_mem_nhdsWithin _ _ a (Ici a)] with _ hxs hxa using hb.trans_le\n      (h_mono has hxs hxa)\n  ¬∑ rcases hfs b hb with ‚ü®c, hcs, hac, hcb‚ü©\n    have : a < c := not_le.1 fun h => hac.not_le <| h_mono hcs has h\n    filter_upwards [hs, Ico_mem_nhdsGE this]\n    rintro x hx ‚ü®_, hxc‚ü©\n    exact (h_mono hx hcs hxc.le).trans_lt hcb\n\n"}
{"name":"continuousWithinAt_right_of_monotoneOn_of_closure_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Ici (f a))) (closure (Set.image f s))\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If a function `f` with a densely ordered codomain is monotone on a right neighborhood of `a` and\nthe closure of the image of this neighborhood under `f` is a right neighborhood of `f a`, then `f`\nis continuous at `a` from the right. -/\ntheorem continuousWithinAt_right_of_monotoneOn_of_closure_image_mem_nhdsWithin [DenselyOrdered Œ≤]\n    {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±} (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù[‚â•] a)\n    (hfs : closure (f '' s) ‚àà ùìù[‚â•] f a) : ContinuousWithinAt f (Ici a) a := by\n  refine continuousWithinAt_right_of_monotoneOn_of_exists_between h_mono hs fun b hb => ?_\n  rcases (mem_nhdsGE_iff_exists_mem_Ioc_Ico_subset hb).1 hfs with ‚ü®b', ‚ü®hab', hbb'‚ü©, hb'‚ü©\n  rcases exists_between hab' with ‚ü®c', hc'‚ü©\n  rcases mem_closure_iff.1 (hb' ‚ü®hc'.1.le, hc'.2‚ü©) (Ioo (f a) b') isOpen_Ioo hc' with\n    ‚ü®_, hc, ‚ü®c, hcs, rfl‚ü©‚ü©\n  exact ‚ü®c, hcs, hc.1, hc.2.trans_le hbb'‚ü©\n\n"}
{"name":"continuousWithinAt_right_of_monotoneOn_of_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Ici (f a))) (Set.image f s)\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If a function `f` with a densely ordered codomain is monotone on a right neighborhood of `a` and\nthe image of this neighborhood under `f` is a right neighborhood of `f a`, then `f` is continuous at\n`a` from the right. -/\ntheorem continuousWithinAt_right_of_monotoneOn_of_image_mem_nhdsWithin [DenselyOrdered Œ≤]\n    {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±} (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù[‚â•] a)\n    (hfs : f '' s ‚àà ùìù[‚â•] f a) : ContinuousWithinAt f (Ici a) a :=\n  continuousWithinAt_right_of_monotoneOn_of_closure_image_mem_nhdsWithin h_mono hs <|\n    mem_of_superset hfs subset_closure\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_right_of_closure_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Ici (f a))) (closure (Set.image f s))\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If a function `f` with a densely ordered codomain is strictly monotone on a right neighborhood\nof `a` and the closure of the image of this neighborhood under `f` is a right neighborhood of `f a`,\nthen `f` is continuous at `a` from the right. -/\ntheorem StrictMonoOn.continuousWithinAt_right_of_closure_image_mem_nhdsWithin [DenselyOrdered Œ≤]\n    {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±} (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â•] a)\n    (hfs : closure (f '' s) ‚àà ùìù[‚â•] f a) : ContinuousWithinAt f (Ici a) a :=\n  continuousWithinAt_right_of_monotoneOn_of_closure_image_mem_nhdsWithin\n    (fun _ hx _ hy => (h_mono.le_iff_le hx hy).2) hs hfs\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_right_of_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Ici (f a))) (Set.image f s)\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If a function `f` with a densely ordered codomain is strictly monotone on a right neighborhood\nof `a` and the image of this neighborhood under `f` is a right neighborhood of `f a`, then `f` is\ncontinuous at `a` from the right. -/\ntheorem StrictMonoOn.continuousWithinAt_right_of_image_mem_nhdsWithin [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤}\n    {s : Set Œ±} {a : Œ±} (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â•] a) (hfs : f '' s ‚àà ùìù[‚â•] f a) :\n    ContinuousWithinAt f (Ici a) a :=\n  h_mono.continuousWithinAt_right_of_closure_image_mem_nhdsWithin hs\n    (mem_of_superset hfs subset_closure)\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_right_of_surjOn","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Ici a)) s\nhfs : Set.SurjOn f s (Set.Ioi (f a))\n‚ä¢ ContinuousWithinAt f (Set.Ici a) a","decl":"/-- If a function `f` is strictly monotone on a right neighborhood of `a` and the image of this\nneighborhood under `f` includes `Ioi (f a)`, then `f` is continuous at `a` from the right. -/\ntheorem StrictMonoOn.continuousWithinAt_right_of_surjOn {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â•] a) (hfs : SurjOn f s (Ioi (f a))) :\n    ContinuousWithinAt f (Ici a) a :=\n  h_mono.continuousWithinAt_right_of_exists_between hs fun _ hb =>\n    let ‚ü®c, hcs, hcb‚ü© := hfs hb\n    ‚ü®c, hcs, hcb.symm ‚ñ∏ hb, hcb.le‚ü©\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_left_of_exists_between","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : ‚àÄ (b : Œ≤), LT.lt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ico b (f a)) (f c))\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If `f` is a strictly monotone function on a left neighborhood of `a` and the image of this\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, then `f` is continuous at `a`\nfrom the left.\n\nThe assumption `hfs : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ico b (f a)` is required because otherwise the\nfunction `f : ‚Ñù ‚Üí ‚Ñù` given by `f x = if x < 0 then x else x + 1` would be a counter-example at\n`a = 0`. -/\ntheorem StrictMonoOn.continuousWithinAt_left_of_exists_between {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â§] a) (hfs : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ico b (f a)) :\n    ContinuousWithinAt f (Iic a) a :=\n  h_mono.dual.continuousWithinAt_right_of_exists_between hs fun b hb =>\n    let ‚ü®c, hcs, hcb, hca‚ü© := hfs b hb\n    ‚ü®c, hcs, hca, hcb‚ü©\n\n"}
{"name":"continuousWithinAt_left_of_monotoneOn_of_exists_between","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nhf : MonotoneOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : ‚àÄ (b : Œ≤), LT.lt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ioo b (f a)) (f c))\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If `f` is a monotone function on a left neighborhood of `a` and the image of this neighborhood\nunder `f` meets every interval `(b, f a)`, `b < f a`, then `f` is continuous at `a` from the left.\n\nThe assumption `hfs : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ioo b (f a)` cannot be replaced by the weaker\nassumption `hfs : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ico b (f a)` we use for strictly monotone functions\nbecause otherwise the function `floor : ‚Ñù ‚Üí ‚Ñ§` would be a counter-example at `a = 0`. -/\ntheorem continuousWithinAt_left_of_monotoneOn_of_exists_between {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (hf : MonotoneOn f s) (hs : s ‚àà ùìù[‚â§] a) (hfs : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ioo b (f a)) :\n    ContinuousWithinAt f (Iic a) a :=\n  @continuousWithinAt_right_of_monotoneOn_of_exists_between Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s a hf.dual hs\n    fun b hb =>\n    let ‚ü®c, hcs, hcb, hca‚ü© := hfs b hb\n    ‚ü®c, hcs, hca, hcb‚ü©\n\n"}
{"name":"continuousWithinAt_left_of_monotoneOn_of_closure_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nhf : MonotoneOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Iic (f a))) (closure (Set.image f s))\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If a function `f` with a densely ordered codomain is monotone on a left neighborhood of `a` and\nthe closure of the image of this neighborhood under `f` is a left neighborhood of `f a`, then `f` is\ncontinuous at `a` from the left -/\ntheorem continuousWithinAt_left_of_monotoneOn_of_closure_image_mem_nhdsWithin [DenselyOrdered Œ≤]\n    {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±} (hf : MonotoneOn f s) (hs : s ‚àà ùìù[‚â§] a)\n    (hfs : closure (f '' s) ‚àà ùìù[‚â§] f a) : ContinuousWithinAt f (Iic a) a :=\n  @continuousWithinAt_right_of_monotoneOn_of_closure_image_mem_nhdsWithin Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ _ f s\n    a hf.dual hs hfs\n\n"}
{"name":"continuousWithinAt_left_of_monotoneOn_of_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Iic (f a))) (Set.image f s)\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If a function `f` with a densely ordered codomain is monotone on a left neighborhood of `a` and\nthe image of this neighborhood under `f` is a left neighborhood of `f a`, then `f` is continuous at\n`a` from the left. -/\ntheorem continuousWithinAt_left_of_monotoneOn_of_image_mem_nhdsWithin [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤}\n    {s : Set Œ±} {a : Œ±} (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù[‚â§] a) (hfs : f '' s ‚àà ùìù[‚â§] f a) :\n    ContinuousWithinAt f (Iic a) a :=\n  continuousWithinAt_left_of_monotoneOn_of_closure_image_mem_nhdsWithin h_mono hs\n    (mem_of_superset hfs subset_closure)\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_left_of_closure_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Iic (f a))) (closure (Set.image f s))\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If a function `f` with a densely ordered codomain is strictly monotone on a left neighborhood of\n`a` and the closure of the image of this neighborhood under `f` is a left neighborhood of `f a`,\nthen `f` is continuous at `a` from the left. -/\ntheorem StrictMonoOn.continuousWithinAt_left_of_closure_image_mem_nhdsWithin [DenselyOrdered Œ≤]\n    {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±} (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â§] a)\n    (hfs : closure (f '' s) ‚àà ùìù[‚â§] f a) : ContinuousWithinAt f (Iic a) a :=\n  h_mono.dual.continuousWithinAt_right_of_closure_image_mem_nhdsWithin hs hfs\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_left_of_image_mem_nhdsWithin","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : Membership.mem (nhdsWithin (f a) (Set.Iic (f a))) (Set.image f s)\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If a function `f` with a densely ordered codomain is strictly monotone on a left neighborhood of\n`a` and the image of this neighborhood under `f` is a left neighborhood of `f a`, then `f` is\ncontinuous at `a` from the left. -/\ntheorem StrictMonoOn.continuousWithinAt_left_of_image_mem_nhdsWithin [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤}\n    {s : Set Œ±} {a : Œ±} (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â§] a) (hfs : f '' s ‚àà ùìù[‚â§] f a) :\n    ContinuousWithinAt f (Iic a) a :=\n  h_mono.dual.continuousWithinAt_right_of_image_mem_nhdsWithin hs hfs\n\n"}
{"name":"StrictMonoOn.continuousWithinAt_left_of_surjOn","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhdsWithin a (Set.Iic a)) s\nhfs : Set.SurjOn f s (Set.Iio (f a))\n‚ä¢ ContinuousWithinAt f (Set.Iic a) a","decl":"/-- If a function `f` is strictly monotone on a left neighborhood of `a` and the image of this\nneighborhood under `f` includes `Iio (f a)`, then `f` is continuous at `a` from the left. -/\ntheorem StrictMonoOn.continuousWithinAt_left_of_surjOn {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù[‚â§] a) (hfs : SurjOn f s (Iio (f a))) :\n    ContinuousWithinAt f (Iic a) a :=\n  h_mono.dual.continuousWithinAt_right_of_surjOn hs hfs\n\n"}
{"name":"StrictMonoOn.continuousAt_of_exists_between","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhds a) s\nhfs_l : ‚àÄ (b : Œ≤), LT.lt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ico b (f a)) (f c))\nhfs_r : ‚àÄ (b : Œ≤), GT.gt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ioc (f a) b) (f c))\n‚ä¢ ContinuousAt f a","decl":"/-- If a function `f` is strictly monotone on a neighborhood of `a` and the image of this\nneighborhood under `f` meets every interval `[b, f a)`, `b < f a`, and every interval\n`(f a, b]`, `b > f a`, then `f` is continuous at `a`. -/\ntheorem StrictMonoOn.continuousAt_of_exists_between {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù a) (hfs_l : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ico b (f a))\n    (hfs_r : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioc (f a) b) : ContinuousAt f a :=\n  continuousAt_iff_continuous_left_right.2\n    ‚ü®h_mono.continuousWithinAt_left_of_exists_between (mem_nhdsWithin_of_mem_nhds hs) hfs_l,\n      h_mono.continuousWithinAt_right_of_exists_between (mem_nhdsWithin_of_mem_nhds hs) hfs_r‚ü©\n\n"}
{"name":"StrictMonoOn.continuousAt_of_closure_image_mem_nhds","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhds a) s\nhfs : Membership.mem (nhds (f a)) (closure (Set.image f s))\n‚ä¢ ContinuousAt f a","decl":"/-- If a function `f` with a densely ordered codomain is strictly monotone on a neighborhood of `a`\nand the closure of the image of this neighborhood under `f` is a neighborhood of `f a`, then `f` is\ncontinuous at `a`. -/\ntheorem StrictMonoOn.continuousAt_of_closure_image_mem_nhds [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤}\n    {s : Set Œ±} {a : Œ±} (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù a)\n    (hfs : closure (f '' s) ‚àà ùìù (f a)) : ContinuousAt f a :=\n  continuousAt_iff_continuous_left_right.2\n    ‚ü®h_mono.continuousWithinAt_left_of_closure_image_mem_nhdsWithin (mem_nhdsWithin_of_mem_nhds hs)\n        (mem_nhdsWithin_of_mem_nhds hfs),\n      h_mono.continuousWithinAt_right_of_closure_image_mem_nhdsWithin\n        (mem_nhdsWithin_of_mem_nhds hs) (mem_nhdsWithin_of_mem_nhds hfs)‚ü©\n\n"}
{"name":"StrictMonoOn.continuousAt_of_image_mem_nhds","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : StrictMonoOn f s\nhs : Membership.mem (nhds a) s\nhfs : Membership.mem (nhds (f a)) (Set.image f s)\n‚ä¢ ContinuousAt f a","decl":"/-- If a function `f` with a densely ordered codomain is strictly monotone on a neighborhood of `a`\nand the image of this set under `f` is a neighborhood of `f a`, then `f` is continuous at `a`. -/\ntheorem StrictMonoOn.continuousAt_of_image_mem_nhds [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤} {s : Set Œ±}\n    {a : Œ±} (h_mono : StrictMonoOn f s) (hs : s ‚àà ùìù a) (hfs : f '' s ‚àà ùìù (f a)) :\n    ContinuousAt f a :=\n  h_mono.continuousAt_of_closure_image_mem_nhds hs (mem_of_superset hfs subset_closure)\n\n"}
{"name":"continuousAt_of_monotoneOn_of_exists_between","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : LinearOrder Œ±\ninst‚úù‚Å¥ : TopologicalSpace Œ±\ninst‚úù¬≥ : OrderTopology Œ±\ninst‚úù¬≤ : LinearOrder Œ≤\ninst‚úù¬π : TopologicalSpace Œ≤\ninst‚úù : OrderTopology Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhds a) s\nhfs_l : ‚àÄ (b : Œ≤), LT.lt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ioo b (f a)) (f c))\nhfs_r : ‚àÄ (b : Œ≤), GT.gt b (f a) ‚Üí Exists fun c => And (Membership.mem s c) (Membership.mem (Set.Ioo (f a) b) (f c))\n‚ä¢ ContinuousAt f a","decl":"/-- If `f` is a monotone function on a neighborhood of `a` and the image of this neighborhood under\n`f` meets every interval `(b, f a)`, `b < f a`, and every interval `(f a, b)`, `b > f a`, then `f`\nis continuous at `a`. -/\ntheorem continuousAt_of_monotoneOn_of_exists_between {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}\n    (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù a) (hfs_l : ‚àÄ b < f a, ‚àÉ c ‚àà s, f c ‚àà Ioo b (f a))\n    (hfs_r : ‚àÄ b > f a, ‚àÉ c ‚àà s, f c ‚àà Ioo (f a) b) : ContinuousAt f a :=\n  continuousAt_iff_continuous_left_right.2\n    ‚ü®continuousWithinAt_left_of_monotoneOn_of_exists_between h_mono (mem_nhdsWithin_of_mem_nhds hs)\n        hfs_l,\n      continuousWithinAt_right_of_monotoneOn_of_exists_between h_mono\n        (mem_nhdsWithin_of_mem_nhds hs) hfs_r‚ü©\n\n"}
{"name":"continuousAt_of_monotoneOn_of_closure_image_mem_nhds","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhds a) s\nhfs : Membership.mem (nhds (f a)) (closure (Set.image f s))\n‚ä¢ ContinuousAt f a","decl":"/-- If a function `f` with a densely ordered codomain is monotone on a neighborhood of `a` and the\nclosure of the image of this neighborhood under `f` is a neighborhood of `f a`, then `f` is\ncontinuous at `a`. -/\ntheorem continuousAt_of_monotoneOn_of_closure_image_mem_nhds [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤}\n    {s : Set Œ±} {a : Œ±} (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù a)\n    (hfs : closure (f '' s) ‚àà ùìù (f a)) : ContinuousAt f a :=\n  continuousAt_iff_continuous_left_right.2\n    ‚ü®continuousWithinAt_left_of_monotoneOn_of_closure_image_mem_nhdsWithin h_mono\n        (mem_nhdsWithin_of_mem_nhds hs) (mem_nhdsWithin_of_mem_nhds hfs),\n      continuousWithinAt_right_of_monotoneOn_of_closure_image_mem_nhdsWithin h_mono\n        (mem_nhdsWithin_of_mem_nhds hs) (mem_nhdsWithin_of_mem_nhds hfs)‚ü©\n\n"}
{"name":"continuousAt_of_monotoneOn_of_image_mem_nhds","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\ns : Set Œ±\na : Œ±\nh_mono : MonotoneOn f s\nhs : Membership.mem (nhds a) s\nhfs : Membership.mem (nhds (f a)) (Set.image f s)\n‚ä¢ ContinuousAt f a","decl":"/-- If a function `f` with a densely ordered codomain is monotone on a neighborhood of `a` and the\nimage of this neighborhood under `f` is a neighborhood of `f a`, then `f` is continuous at `a`. -/\ntheorem continuousAt_of_monotoneOn_of_image_mem_nhds [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤} {s : Set Œ±}\n    {a : Œ±} (h_mono : MonotoneOn f s) (hs : s ‚àà ùìù a) (hfs : f '' s ‚àà ùìù (f a)) : ContinuousAt f a :=\n  continuousAt_of_monotoneOn_of_closure_image_mem_nhds h_mono hs\n    (mem_of_superset hfs subset_closure)\n\n"}
{"name":"Monotone.continuous_of_denseRange","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\nh_mono : Monotone f\nh_dense : DenseRange f\n‚ä¢ Continuous f","decl":"/-- A monotone function with densely ordered codomain and a dense range is continuous. -/\ntheorem Monotone.continuous_of_denseRange [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤} (h_mono : Monotone f)\n    (h_dense : DenseRange f) : Continuous f :=\n  continuous_iff_continuousAt.mpr fun a =>\n    continuousAt_of_monotoneOn_of_closure_image_mem_nhds (fun _ _ _ _ hxy => h_mono hxy)\n        univ_mem <|\n      by simp only [image_univ, h_dense.closure_eq, univ_mem]\n\n"}
{"name":"Monotone.continuous_of_surjective","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Å∂ : LinearOrder Œ±\ninst‚úù‚Åµ : TopologicalSpace Œ±\ninst‚úù‚Å¥ : OrderTopology Œ±\ninst‚úù¬≥ : LinearOrder Œ≤\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ≤\ninst‚úù : DenselyOrdered Œ≤\nf : Œ± ‚Üí Œ≤\nh_mono : Monotone f\nh_surj : Function.Surjective f\n‚ä¢ Continuous f","decl":"/-- A monotone surjective function with a densely ordered codomain is continuous. -/\ntheorem Monotone.continuous_of_surjective [DenselyOrdered Œ≤] {f : Œ± ‚Üí Œ≤} (h_mono : Monotone f)\n    (h_surj : Function.Surjective f) : Continuous f :=\n  h_mono.continuous_of_denseRange h_surj.denseRange\n\n"}
{"name":"OrderIso.continuous","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : PartialOrder Œ±\ninst‚úù‚Å¥ : PartialOrder Œ≤\ninst‚úù¬≥ : TopologicalSpace Œ±\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ±\ninst‚úù : OrderTopology Œ≤\ne : OrderIso Œ± Œ≤\n‚ä¢ Continuous ‚áëe","decl":"protected theorem continuous (e : Œ± ‚âÉo Œ≤) : Continuous e := by\n  rw [‚ÄπOrderTopology Œ≤‚Ä∫.topology_eq_generate_intervals, continuous_generateFrom_iff]\n  rintro s ‚ü®a, rfl | rfl‚ü©\n  ¬∑ rw [e.preimage_Ioi]\n    apply isOpen_lt'\n  ¬∑ rw [e.preimage_Iio]\n    apply isOpen_gt'\n\n"}
{"name":"OrderIso.coe_toHomeomorph","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : PartialOrder Œ±\ninst‚úù‚Å¥ : PartialOrder Œ≤\ninst‚úù¬≥ : TopologicalSpace Œ±\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ±\ninst‚úù : OrderTopology Œ≤\ne : OrderIso Œ± Œ≤\n‚ä¢ Eq ‚áëe.toHomeomorph ‚áëe","decl":"@[simp]\ntheorem coe_toHomeomorph (e : Œ± ‚âÉo Œ≤) : ‚áëe.toHomeomorph = e :=\n  rfl\n\n"}
{"name":"OrderIso.coe_toHomeomorph_symm","module":"Mathlib.Topology.Order.MonotoneContinuity","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù‚Åµ : PartialOrder Œ±\ninst‚úù‚Å¥ : PartialOrder Œ≤\ninst‚úù¬≥ : TopologicalSpace Œ±\ninst‚úù¬≤ : TopologicalSpace Œ≤\ninst‚úù¬π : OrderTopology Œ±\ninst‚úù : OrderTopology Œ≤\ne : OrderIso Œ± Œ≤\n‚ä¢ Eq ‚áëe.toHomeomorph.symm ‚áëe.symm","decl":"@[simp]\ntheorem coe_toHomeomorph_symm (e : Œ± ‚âÉo Œ≤) : ‚áëe.toHomeomorph.symm = e.symm :=\n  rfl\n\n"}
