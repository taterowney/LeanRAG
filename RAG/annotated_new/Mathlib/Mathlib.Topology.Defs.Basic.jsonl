{"name":"TopologicalSpace.isOpen_inter","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nself : TopologicalSpace X\ns t : Set X\na✝¹ : TopologicalSpace.IsOpen s\na✝ : TopologicalSpace.IsOpen t\n⊢ TopologicalSpace.IsOpen (Inter.inter s t)","decl":"/-- A topology on `X`. -/\n@[to_additive existing TopologicalSpace]\nclass TopologicalSpace (X : Type u) where\n  /-- A predicate saying that a set is an open set. Use `IsOpen` in the root namespace instead. -/\n  protected IsOpen : Set X → Prop\n  /-- The set representing the whole space is an open set.\n  Use `isOpen_univ` in the root namespace instead. -/\n  protected isOpen_univ : IsOpen univ\n  /-- The intersection of two open sets is an open set. Use `IsOpen.inter` instead. -/\n  protected isOpen_inter : ∀ s t, IsOpen s → IsOpen t → IsOpen (s ∩ t)\n  /-- The union of a family of open sets is an open set.\n  Use `isOpen_sUnion` in the root namespace instead. -/\n  protected isOpen_sUnion : ∀ s, (∀ t ∈ s, IsOpen t) → IsOpen (⋃₀ s)\n\n"}
{"name":"TopologicalSpace.isOpen_sUnion","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nself : TopologicalSpace X\ns : Set (Set X)\na✝ : ∀ (t : Set X), Membership.mem s t → TopologicalSpace.IsOpen t\n⊢ TopologicalSpace.IsOpen s.sUnion","decl":"/-- A topology on `X`. -/\n@[to_additive existing TopologicalSpace]\nclass TopologicalSpace (X : Type u) where\n  /-- A predicate saying that a set is an open set. Use `IsOpen` in the root namespace instead. -/\n  protected IsOpen : Set X → Prop\n  /-- The set representing the whole space is an open set.\n  Use `isOpen_univ` in the root namespace instead. -/\n  protected isOpen_univ : IsOpen univ\n  /-- The intersection of two open sets is an open set. Use `IsOpen.inter` instead. -/\n  protected isOpen_inter : ∀ s t, IsOpen s → IsOpen t → IsOpen (s ∩ t)\n  /-- The union of a family of open sets is an open set.\n  Use `isOpen_sUnion` in the root namespace instead. -/\n  protected isOpen_sUnion : ∀ s, (∀ t ∈ s, IsOpen t) → IsOpen (⋃₀ s)\n\n"}
{"name":"TopologicalSpace.isOpen_univ","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nself : TopologicalSpace X\n⊢ TopologicalSpace.IsOpen Set.univ","decl":"/-- A topology on `X`. -/\n@[to_additive existing TopologicalSpace]\nclass TopologicalSpace (X : Type u) where\n  /-- A predicate saying that a set is an open set. Use `IsOpen` in the root namespace instead. -/\n  protected IsOpen : Set X → Prop\n  /-- The set representing the whole space is an open set.\n  Use `isOpen_univ` in the root namespace instead. -/\n  protected isOpen_univ : IsOpen univ\n  /-- The intersection of two open sets is an open set. Use `IsOpen.inter` instead. -/\n  protected isOpen_inter : ∀ s t, IsOpen s → IsOpen t → IsOpen (s ∩ t)\n  /-- The union of a family of open sets is an open set.\n  Use `isOpen_sUnion` in the root namespace instead. -/\n  protected isOpen_sUnion : ∀ s, (∀ t ∈ s, IsOpen t) → IsOpen (⋃₀ s)\n\n"}
{"name":"isOpen_univ","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\n⊢ IsOpen Set.univ","decl":"@[simp] theorem isOpen_univ : IsOpen (univ : Set X) := TopologicalSpace.isOpen_univ\n\n"}
{"name":"IsOpen.inter","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\ns t : Set X\nhs : IsOpen s\nht : IsOpen t\n⊢ IsOpen (Inter.inter s t)","decl":"theorem IsOpen.inter (hs : IsOpen s) (ht : IsOpen t) : IsOpen (s ∩ t) :=\n  TopologicalSpace.isOpen_inter s t hs ht\n\n"}
{"name":"isOpen_sUnion","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\ns : Set (Set X)\nh : ∀ (t : Set X), Membership.mem s t → IsOpen t\n⊢ IsOpen s.sUnion","decl":"theorem isOpen_sUnion {s : Set (Set X)} (h : ∀ t ∈ s, IsOpen t) : IsOpen (⋃₀ s) :=\n  TopologicalSpace.isOpen_sUnion s h\n\n"}
{"name":"IsClosed.isOpen_compl","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\ns : Set X\nself : IsClosed s\n⊢ IsOpen (HasCompl.compl s)","decl":"/-- A set is closed if its complement is open -/\nclass IsClosed (s : Set X) : Prop where\n  /-- The complement of a closed set is an open set. -/\n  isOpen_compl : IsOpen sᶜ\n\n"}
{"name":"Continuous.isOpen_preimage","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : Continuous f\ns : Set Y\na✝ : IsOpen s\n⊢ IsOpen (Set.preimage f s)","decl":"/-- A function between topological spaces is continuous if the preimage\n  of every open set is open. Registered as a structure to make sure it is not unfolded by Lean. -/\n@[fun_prop]\nstructure Continuous (f : X → Y) : Prop where\n  /-- The preimage of an open set under a continuous function is an open set. Use `IsOpen.preimage`\n  instead. -/\n  isOpen_preimage : ∀ s, IsOpen s → IsOpen (f ⁻¹' s)\n\n"}
{"name":"IsOpenQuotientMap.isOpenMap","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsOpenQuotientMap f\n⊢ IsOpenMap f","decl":"/-- An open quotient map is an open map `f : X → Y` which is both an open map and a quotient map.\nEquivalently, it is a surjective continuous open map.\nWe use the latter characterization as a definition.\n\nMany important quotient maps are open quotient maps, including\n\n- the quotient map from a topological space to its quotient by the action of a group;\n- the quotient map from a topological group to its quotient by a normal subgroup;\n- the quotient map from a topological spaace to its separation quotient.\n\nContrary to general quotient maps,\nthe category of open quotient maps is closed under `Prod.map`.\n-/\n@[mk_iff]\nstructure IsOpenQuotientMap (f : X → Y) : Prop where\n  /-- An open quotient map is surjective. -/\n  surjective : Function.Surjective f\n  /-- An open quotient map is continuous. -/\n  continuous : Continuous f\n  /-- An open quotient map is an open map. -/\n  isOpenMap : IsOpenMap f\n\n"}
{"name":"IsOpenQuotientMap.continuous","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsOpenQuotientMap f\n⊢ Continuous f","decl":"/-- An open quotient map is an open map `f : X → Y` which is both an open map and a quotient map.\nEquivalently, it is a surjective continuous open map.\nWe use the latter characterization as a definition.\n\nMany important quotient maps are open quotient maps, including\n\n- the quotient map from a topological space to its quotient by the action of a group;\n- the quotient map from a topological group to its quotient by a normal subgroup;\n- the quotient map from a topological spaace to its separation quotient.\n\nContrary to general quotient maps,\nthe category of open quotient maps is closed under `Prod.map`.\n-/\n@[mk_iff]\nstructure IsOpenQuotientMap (f : X → Y) : Prop where\n  /-- An open quotient map is surjective. -/\n  surjective : Function.Surjective f\n  /-- An open quotient map is continuous. -/\n  continuous : Continuous f\n  /-- An open quotient map is an open map. -/\n  isOpenMap : IsOpenMap f\n\n"}
{"name":"isOpenQuotientMap_iff","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsOpenQuotientMap f) (And (Function.Surjective f) (And (Continuous f) (IsOpenMap f)))","decl":"/-- An open quotient map is an open map `f : X → Y` which is both an open map and a quotient map.\nEquivalently, it is a surjective continuous open map.\nWe use the latter characterization as a definition.\n\nMany important quotient maps are open quotient maps, including\n\n- the quotient map from a topological space to its quotient by the action of a group;\n- the quotient map from a topological group to its quotient by a normal subgroup;\n- the quotient map from a topological spaace to its separation quotient.\n\nContrary to general quotient maps,\nthe category of open quotient maps is closed under `Prod.map`.\n-/\n@[mk_iff]\nstructure IsOpenQuotientMap (f : X → Y) : Prop where\n  /-- An open quotient map is surjective. -/\n  surjective : Function.Surjective f\n  /-- An open quotient map is continuous. -/\n  continuous : Continuous f\n  /-- An open quotient map is an open map. -/\n  isOpenMap : IsOpenMap f\n\n"}
{"name":"IsOpenQuotientMap.surjective","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsOpenQuotientMap f\n⊢ Function.Surjective f","decl":"/-- An open quotient map is an open map `f : X → Y` which is both an open map and a quotient map.\nEquivalently, it is a surjective continuous open map.\nWe use the latter characterization as a definition.\n\nMany important quotient maps are open quotient maps, including\n\n- the quotient map from a topological space to its quotient by the action of a group;\n- the quotient map from a topological group to its quotient by a normal subgroup;\n- the quotient map from a topological spaace to its separation quotient.\n\nContrary to general quotient maps,\nthe category of open quotient maps is closed under `Prod.map`.\n-/\n@[mk_iff]\nstructure IsOpenQuotientMap (f : X → Y) : Prop where\n  /-- An open quotient map is surjective. -/\n  surjective : Function.Surjective f\n  /-- An open quotient map is continuous. -/\n  continuous : Continuous f\n  /-- An open quotient map is an open map. -/\n  isOpenMap : IsOpenMap f\n\n"}
{"name":"BaireSpace.baire_property","module":"Mathlib.Topology.Defs.Basic","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nself : BaireSpace X\nf : Nat → Set X\na✝¹ : ∀ (n : Nat), IsOpen (f n)\na✝ : ∀ (n : Nat), Dense (f n)\n⊢ Dense (Set.iInter fun n => f n)","decl":"/-- The property `BaireSpace α` means that the topological space `α` has the Baire property:\nany countable intersection of open dense subsets is dense.\nFormulated here when the source space is ℕ.\nUse `dense_iInter_of_isOpen` which works for any countable index type instead. -/\nclass BaireSpace (X : Type*) [TopologicalSpace X] : Prop where\n  baire_property : ∀ f : ℕ → Set X, (∀ n, IsOpen (f n)) → (∀ n, Dense (f n)) → Dense (⋂ n, f n)\n"}
