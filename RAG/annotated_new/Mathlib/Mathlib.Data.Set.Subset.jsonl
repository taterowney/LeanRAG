{"name":"Set.preimage_val_eq_univ_of_subset","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA B : Set α\nh : HasSubset.Subset A B\n⊢ Eq (Set.preimage Subtype.val B) Set.univ","decl":"lemma preimage_val_eq_univ_of_subset (h : A ⊆ B) : A ↓∩ B = univ := by\n  rw [eq_univ_iff_forall, Subtype.forall]\n  exact h\n\n"}
{"name":"Set.preimage_val_sUnion","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nS : Set (Set α)\n⊢ Eq (Set.preimage Subtype.val S.sUnion) (setOf fun x => Exists fun B => And (Membership.mem S B) (Eq (Set.preimage Subtype.val B) x)).sUnion","decl":"lemma preimage_val_sUnion : A ↓∩ (⋃₀ S) = ⋃₀ { (A ↓∩ B) | B ∈ S } := by\n  erw [sUnion_image]\n  simp_rw [sUnion_eq_biUnion, preimage_iUnion]\n\n"}
{"name":"Set.preimage_val_iInter","module":"Mathlib.Data.Set.Subset","initialProofState":"ι : Sort u_1\nα : Type u_2\nA : Set α\ns : ι → Set α\n⊢ Eq (Set.preimage Subtype.val (Set.iInter fun i => s i)) (Set.iInter fun i => Set.preimage Subtype.val (s i))","decl":"@[simp]\nlemma preimage_val_iInter : A ↓∩ (⋂ i, s i) = ⋂ i, A ↓∩ s i := preimage_iInter\n\n"}
{"name":"Set.preimage_val_sInter","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nS : Set (Set α)\n⊢ Eq (Set.preimage Subtype.val S.sInter) (setOf fun x => Exists fun B => And (Membership.mem S B) (Eq (Set.preimage Subtype.val B) x)).sInter","decl":"lemma preimage_val_sInter : A ↓∩ (⋂₀ S) = ⋂₀ { (A ↓∩ B) | B ∈ S } := by\n  erw [sInter_image]\n  simp_rw [sInter_eq_biInter, preimage_iInter]\n\n"}
{"name":"Set.preimage_val_sInter_eq_sInter","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nS : Set (Set α)\n⊢ Eq (Set.preimage Subtype.val S.sInter) (Set.image (fun x => Set.preimage Subtype.val x) S).sInter","decl":"lemma preimage_val_sInter_eq_sInter : A ↓∩ (⋂₀ S) = ⋂₀ ((A ↓∩ ·) '' S) := by\n  simp only [preimage_sInter, sInter_image]\n\n"}
{"name":"Set.eq_of_preimage_val_eq_of_subset","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA B C : Set α\nhB : HasSubset.Subset B A\nhC : HasSubset.Subset C A\nh : Eq (Set.preimage Subtype.val B) (Set.preimage Subtype.val C)\n⊢ Eq B C","decl":"lemma eq_of_preimage_val_eq_of_subset (hB : B ⊆ A) (hC : C ⊆ A) (h : A ↓∩ B = A ↓∩ C) : B = C := by\n  simp only [← inter_eq_right] at hB hC\n  simp only [Subtype.preimage_val_eq_preimage_val_iff, hB, hC] at h\n  exact h\n\n"}
{"name":"Set.image_val_union","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\n⊢ Eq (Set.image Subtype.val (Union.union D E)) (Union.union (Set.image Subtype.val D) (Set.image Subtype.val E))","decl":"@[simp]\nlemma image_val_union : (↑(D ∪ E) : Set α) = ↑D ∪ ↑E := image_union _ _ _\n\n"}
{"name":"Set.image_val_inter","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\n⊢ Eq (Set.image Subtype.val (Inter.inter D E)) (Inter.inter (Set.image Subtype.val D) (Set.image Subtype.val E))","decl":"@[simp]\nlemma image_val_inter : (↑(D ∩ E) : Set α) = ↑D ∩ ↑E := image_inter Subtype.val_injective\n\n"}
{"name":"Set.image_val_diff","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\n⊢ Eq (Set.image Subtype.val (SDiff.sdiff D E)) (SDiff.sdiff (Set.image Subtype.val D) (Set.image Subtype.val E))","decl":"@[simp]\nlemma image_val_diff : (↑(D \\ E) : Set α) = ↑D \\ ↑E := image_diff Subtype.val_injective _ _\n\n"}
{"name":"Set.image_val_compl","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Set.image Subtype.val (HasCompl.compl D)) (SDiff.sdiff A (Set.image Subtype.val D))","decl":"@[simp]\nlemma image_val_compl : ↑(Dᶜ) = A \\ ↑D := by\n  rw [compl_eq_univ_diff, image_val_diff, image_univ, Subtype.range_coe_subtype, setOf_mem_eq]\n\n"}
{"name":"Set.image_val_sUnion","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nT : Set (Set ↑A)\n⊢ Eq (Set.image Subtype.val T.sUnion) (setOf fun x => Exists fun B => And (Membership.mem T B) (Eq (Set.image Subtype.val B) x)).sUnion","decl":"@[simp]\nlemma image_val_sUnion : ↑(⋃₀ T) = ⋃₀ { (B : Set α) | B ∈ T} := by\n  rw [image_sUnion, image]\n\n"}
{"name":"Set.image_val_iUnion","module":"Mathlib.Data.Set.Subset","initialProofState":"ι : Sort u_1\nα : Type u_2\nA : Set α\nt : ι → Set ↑A\n⊢ Eq (Set.image Subtype.val (Set.iUnion fun i => t i)) (Set.iUnion fun i => Set.image Subtype.val (t i))","decl":"@[simp]\nlemma image_val_iUnion : ↑(⋃ i, t i) = ⋃ i, (t i : Set α) := image_iUnion\n\n"}
{"name":"Set.image_val_sInter","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nT : Set (Set ↑A)\nhT : T.Nonempty\n⊢ Eq (Set.image Subtype.val T.sInter) (setOf fun x => Exists fun B => And (Membership.mem T B) (Eq (Set.image Subtype.val B) x)).sInter","decl":"@[simp]\nlemma image_val_sInter (hT : T.Nonempty) : (↑(⋂₀ T) : Set α) = ⋂₀ { (↑B : Set α) | B ∈ T } := by\n  erw [sInter_image]\n  rw [sInter_eq_biInter, Subtype.val_injective.injOn.image_biInter_eq hT]\n\n"}
{"name":"Set.image_val_iInter","module":"Mathlib.Data.Set.Subset","initialProofState":"ι : Sort u_1\nα : Type u_2\nA : Set α\nt : ι → Set ↑A\ninst✝ : Nonempty ι\n⊢ Eq (Set.image Subtype.val (Set.iInter fun i => t i)) (Set.iInter fun i => Set.image Subtype.val (t i))","decl":"@[simp]\nlemma image_val_iInter [Nonempty ι] : (↑(⋂ i, t i) : Set α) = ⋂ i, (↑(t i) : Set α) :=\n  Subtype.val_injective.injOn.image_iInter_eq\n\n"}
{"name":"Set.image_val_union_self_right_eq","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Union.union A (Set.image Subtype.val D)) A","decl":"@[simp]\nlemma image_val_union_self_right_eq : A ∪ ↑D = A :=\n  union_eq_left.2 image_val_subset\n\n"}
{"name":"Set.image_val_union_self_left_eq","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Union.union (Set.image Subtype.val D) A) A","decl":"@[simp]\nlemma image_val_union_self_left_eq : ↑D ∪ A = A :=\n  union_eq_right.2 image_val_subset\n\n"}
{"name":"Set.image_val_inter_self_right_eq_coe","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Inter.inter A (Set.image Subtype.val D)) (Set.image Subtype.val D)","decl":"@[simp]\nlemma image_val_inter_self_right_eq_coe : A ∩ ↑D = ↑D :=\n  inter_eq_right.2 image_val_subset\n"}
{"name":"Set.cou_inter_self_right_eq_coe","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Inter.inter A (Set.image Subtype.val D)) (Set.image Subtype.val D)","decl":"@[deprecated (since := \"2024-10-25\")]\nalias cou_inter_self_right_eq_coe := image_val_inter_self_right_eq_coe\n\n"}
{"name":"Set.image_val_inter_self_left_eq_coe","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Inter.inter (Set.image Subtype.val D) A) (Set.image Subtype.val D)","decl":"@[simp]\nlemma image_val_inter_self_left_eq_coe : ↑D ∩ A = ↑D :=\n  inter_eq_left.2 image_val_subset\n\n"}
{"name":"Set.subset_preimage_val_image_val_iff","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\n⊢ Iff (HasSubset.Subset D (Set.preimage Subtype.val (Set.image Subtype.val E))) (HasSubset.Subset D E)","decl":"lemma subset_preimage_val_image_val_iff : D ⊆ A ↓∩ ↑E ↔ D ⊆ E := by\n  rw [preimage_image_eq _ Subtype.val_injective]\n\n"}
{"name":"Set.image_val_inj","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\n⊢ Iff (Eq (Set.image Subtype.val D) (Set.image Subtype.val E)) (Eq D E)","decl":"@[simp]\nlemma image_val_inj : (D : Set α) = ↑E ↔ D = E := Subtype.val_injective.image_injective.eq_iff\n\n"}
{"name":"Set.image_val_injective","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\n⊢ Function.Injective (Set.image Subtype.val)","decl":"lemma image_val_injective : Function.Injective ((↑) : Set A → Set α) :=\n  Subtype.val_injective.image_injective\n\n"}
{"name":"Set.subset_of_image_val_subset_image_val","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\nh : HasSubset.Subset (Set.image Subtype.val D) (Set.image Subtype.val E)\n⊢ HasSubset.Subset D E","decl":"lemma subset_of_image_val_subset_image_val (h : (↑D : Set α) ⊆ ↑E) : D ⊆ E :=\n  (image_subset_image_iff Subtype.val_injective).1 h\n\n"}
{"name":"Set.image_val_mono","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD E : Set ↑A\nh : HasSubset.Subset D E\n⊢ HasSubset.Subset (Set.image Subtype.val D) (Set.image Subtype.val E)","decl":"@[mono]\nlemma image_val_mono (h : D ⊆ E) : (↑D : Set α) ⊆ ↑E :=\n  (image_subset_image_iff Subtype.val_injective).2 h\n\n"}
{"name":"Set.image_val_preimage_val_subset_self","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA B : Set α\n⊢ HasSubset.Subset (Set.image Subtype.val (Set.preimage Subtype.val B)) B","decl":"lemma image_val_preimage_val_subset_self : ↑(A ↓∩ B) ⊆ B :=\n  image_preimage_subset _ _\n\n"}
{"name":"Set.preimage_val_image_val_eq_self","module":"Mathlib.Data.Set.Subset","initialProofState":"α : Type u_2\nA : Set α\nD : Set ↑A\n⊢ Eq (Set.preimage Subtype.val (Set.image Subtype.val D)) D","decl":"lemma preimage_val_image_val_eq_self : A ↓∩ ↑D = D :=\n  Function.Injective.preimage_image Subtype.val_injective _\n\n"}
