{"name":"Algebra.formallyEtale_iff","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n⊢ Iff (Algebra.FormallyEtale R A) (∀ ⦃B : Type u⦄ [inst : CommRing B] [inst_1 : Algebra R B] (I : Ideal B), Eq (HPow.hPow I 2) Bot.bot → Function.Bijective (Ideal.Quotient.mkₐ R I).comp)","decl":"/-- An `R` algebra `A` is formally étale if for every `R`-algebra, every square-zero ideal\n`I : Ideal B` and `f : A →ₐ[R] B ⧸ I`, there exists exactly one lift `A →ₐ[R] B`. -/\n@[mk_iff, stacks 00UQ]\nclass FormallyEtale : Prop where\n  comp_bijective :\n    ∀ ⦃B : Type u⦄ [CommRing B],\n      ∀ [Algebra R B] (I : Ideal B) (_ : I ^ 2 = ⊥),\n        Function.Bijective ((Ideal.Quotient.mkₐ R I).comp : (A →ₐ[R] B) → A →ₐ[R] B ⧸ I)\n\n"}
{"name":"Algebra.FormallyEtale.comp_bijective","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁴ : CommRing R\nA : Type u\ninst✝³ : CommRing A\ninst✝² : Algebra R A\nself : Algebra.FormallyEtale R A\nB : Type u\ninst✝¹ : CommRing B\ninst✝ : Algebra R B\nI : Ideal B\nx✝ : Eq (HPow.hPow I 2) Bot.bot\n⊢ Function.Bijective (Ideal.Quotient.mkₐ R I).comp","decl":"/-- An `R` algebra `A` is formally étale if for every `R`-algebra, every square-zero ideal\n`I : Ideal B` and `f : A →ₐ[R] B ⧸ I`, there exists exactly one lift `A →ₐ[R] B`. -/\n@[mk_iff, stacks 00UQ]\nclass FormallyEtale : Prop where\n  comp_bijective :\n    ∀ ⦃B : Type u⦄ [CommRing B],\n      ∀ [Algebra R B] (I : Ideal B) (_ : I ^ 2 = ⊥),\n        Function.Bijective ((Ideal.Quotient.mkₐ R I).comp : (A →ₐ[R] B) → A →ₐ[R] B ⧸ I)\n\n"}
{"name":"Algebra.FormallyEtale.iff_unramified_and_smooth","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n⊢ Iff (Algebra.FormallyEtale R A) (And (Algebra.FormallyUnramified R A) (Algebra.FormallySmooth R A))","decl":"theorem iff_unramified_and_smooth :\n    FormallyEtale R A ↔ FormallyUnramified R A ∧ FormallySmooth R A := by\n  rw [FormallyUnramified.iff_comp_injective, formallySmooth_iff, formallyEtale_iff]\n  simp_rw [← forall_and, Function.Bijective]\n\n"}
{"name":"Algebra.FormallyEtale.to_unramified","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\nh : Algebra.FormallyEtale R A\n⊢ Algebra.FormallyUnramified R A","decl":"instance (priority := 100) to_unramified [h : FormallyEtale R A] :\n    FormallyUnramified R A :=\n  (FormallyEtale.iff_unramified_and_smooth.mp h).1\n\n"}
{"name":"Algebra.FormallyEtale.to_smooth","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\nh : Algebra.FormallyEtale R A\n⊢ Algebra.FormallySmooth R A","decl":"instance (priority := 100) to_smooth [h : FormallyEtale R A] : FormallySmooth R A :=\n  (FormallyEtale.iff_unramified_and_smooth.mp h).2\n\n"}
{"name":"Algebra.FormallyEtale.of_unramified_and_smooth","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\nh₁ : Algebra.FormallyUnramified R A\nh₂ : Algebra.FormallySmooth R A\n⊢ Algebra.FormallyEtale R A","decl":"theorem of_unramified_and_smooth [h₁ : FormallyUnramified R A]\n    [h₂ : FormallySmooth R A] : FormallyEtale R A :=\n  FormallyEtale.iff_unramified_and_smooth.mpr ⟨h₁, h₂⟩\n\n"}
{"name":"Algebra.FormallyEtale.of_equiv","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nA B : Type u\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\ninst✝² : CommRing B\ninst✝¹ : Algebra R B\ninst✝ : Algebra.FormallyEtale R A\ne : AlgEquiv R A B\n⊢ Algebra.FormallyEtale R B","decl":"theorem of_equiv [FormallyEtale R A] (e : A ≃ₐ[R] B) : FormallyEtale R B :=\n  FormallyEtale.iff_unramified_and_smooth.mpr\n    ⟨FormallyUnramified.of_equiv e, FormallySmooth.of_equiv e⟩\n\n"}
{"name":"Algebra.FormallyEtale.iff_of_equiv","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁴ : CommRing R\nA B : Type u\ninst✝³ : CommRing A\ninst✝² : Algebra R A\ninst✝¹ : CommRing B\ninst✝ : Algebra R B\ne : AlgEquiv R A B\n⊢ Iff (Algebra.FormallyEtale R A) (Algebra.FormallyEtale R B)","decl":"theorem iff_of_equiv (e : A ≃ₐ[R] B) : FormallyEtale R A ↔ FormallyEtale R B :=\n  ⟨fun _ ↦ of_equiv e, fun _ ↦ of_equiv e.symm⟩\n\n"}
{"name":"Algebra.FormallyEtale.comp","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁸ : CommRing R\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\nB : Type u\ninst✝⁵ : CommRing B\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra A B\ninst✝² : IsScalarTower R A B\ninst✝¹ : Algebra.FormallyEtale R A\ninst✝ : Algebra.FormallyEtale A B\n⊢ Algebra.FormallyEtale R B","decl":"theorem comp [FormallyEtale R A] [FormallyEtale A B] : FormallyEtale R B :=\n  FormallyEtale.iff_unramified_and_smooth.mpr\n    ⟨FormallyUnramified.comp R A B, FormallySmooth.comp R A B⟩\n\n"}
{"name":"Algebra.FormallyEtale.base_change","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nA : Type u\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\nB : Type u\ninst✝² : CommRing B\ninst✝¹ : Algebra R B\ninst✝ : Algebra.FormallyEtale R A\n⊢ Algebra.FormallyEtale B (TensorProduct R B A)","decl":"instance base_change [FormallyEtale R A] : FormallyEtale B (B ⊗[R] A) :=\n  FormallyEtale.iff_unramified_and_smooth.mpr ⟨inferInstance, inferInstance⟩\n\n"}
{"name":"Algebra.FormallyEtale.of_isLocalization","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R Rₘ : Type u\ninst✝³ : CommRing R\ninst✝² : CommRing Rₘ\nM : Submonoid R\ninst✝¹ : Algebra R Rₘ\ninst✝ : IsLocalization M Rₘ\n⊢ Algebra.FormallyEtale R Rₘ","decl":"theorem of_isLocalization : FormallyEtale R Rₘ :=\n  FormallyEtale.iff_unramified_and_smooth.mpr\n    ⟨FormallyUnramified.of_isLocalization M, FormallySmooth.of_isLocalization M⟩\n\n"}
{"name":"Algebra.FormallyEtale.localization_base","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R Rₘ Sₘ : Type u\ninst✝⁸ : CommRing R\ninst✝⁷ : CommRing Rₘ\ninst✝⁶ : CommRing Sₘ\nM : Submonoid R\ninst✝⁵ : Algebra R Sₘ\ninst✝⁴ : Algebra R Rₘ\ninst✝³ : Algebra Rₘ Sₘ\ninst✝² : IsScalarTower R Rₘ Sₘ\ninst✝¹ : IsLocalization M Rₘ\ninst✝ : Algebra.FormallyEtale R Sₘ\n⊢ Algebra.FormallyEtale Rₘ Sₘ","decl":"theorem localization_base [FormallyEtale R Sₘ] : FormallyEtale Rₘ Sₘ :=\n  FormallyEtale.iff_unramified_and_smooth.mpr\n    ⟨FormallyUnramified.localization_base M, FormallySmooth.localization_base M⟩\n\n"}
{"name":"Algebra.FormallyEtale.localization_map","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R S Rₘ Sₘ : Type u\ninst✝¹³ : CommRing R\ninst✝¹² : CommRing S\ninst✝¹¹ : CommRing Rₘ\ninst✝¹⁰ : CommRing Sₘ\nM : Submonoid R\ninst✝⁹ : Algebra R S\ninst✝⁸ : Algebra R Sₘ\ninst✝⁷ : Algebra S Sₘ\ninst✝⁶ : Algebra R Rₘ\ninst✝⁵ : Algebra Rₘ Sₘ\ninst✝⁴ : IsScalarTower R Rₘ Sₘ\ninst✝³ : IsScalarTower R S Sₘ\ninst✝² : IsLocalization M Rₘ\ninst✝¹ : IsLocalization (Submonoid.map (algebraMap R S) M) Sₘ\ninst✝ : Algebra.FormallyEtale R S\n⊢ Algebra.FormallyEtale Rₘ Sₘ","decl":"/-- The localization of a formally étale map is formally étale. -/\ntheorem localization_map [FormallyEtale R S] : FormallyEtale Rₘ Sₘ := by\n  haveI : FormallyEtale S Sₘ := FormallyEtale.of_isLocalization (M.map (algebraMap R S))\n  haveI : FormallyEtale R Sₘ := FormallyEtale.comp R S Sₘ\n  exact FormallyEtale.localization_base M\n\n"}
{"name":"Algebra.Etale.finitePresentation","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\nself : Algebra.Etale R A\n⊢ Algebra.FinitePresentation R A","decl":"/-- An `R`-algebra `A` is étale if it is formally étale and of finite presentation. -/\n@[stacks 00U1 \"Note that this is a different definition from this Stacks entry, but\n<https://stacks.math.columbia.edu/tag/00UR> shows that it is equivalent to the definition here.\"]\nclass Etale : Prop where\n  formallyEtale : FormallyEtale R A := by infer_instance\n  finitePresentation : FinitePresentation R A := by infer_instance\n\n"}
{"name":"Algebra.Etale.formallyEtale","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝² : CommRing R\nA : Type u\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\nself : Algebra.Etale R A\n⊢ Algebra.FormallyEtale R A","decl":"/-- An `R`-algebra `A` is étale if it is formally étale and of finite presentation. -/\n@[stacks 00U1 \"Note that this is a different definition from this Stacks entry, but\n<https://stacks.math.columbia.edu/tag/00UR> shows that it is equivalent to the definition here.\"]\nclass Etale : Prop where\n  formallyEtale : FormallyEtale R A := by infer_instance\n  finitePresentation : FinitePresentation R A := by infer_instance\n\n"}
{"name":"Algebra.Etale.of_equiv","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nA B : Type u\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\ninst✝² : CommRing B\ninst✝¹ : Algebra R B\ninst✝ : Algebra.Etale R A\ne : AlgEquiv R A B\n⊢ Algebra.Etale R B","decl":"/-- Being étale is transported via algebra isomorphisms. -/\ntheorem of_equiv [Etale R A] (e : A ≃ₐ[R] B) : Etale R B where\n  formallyEtale := FormallyEtale.of_equiv e\n  finitePresentation := FinitePresentation.equiv e\n\n"}
{"name":"Algebra.Etale.comp","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁸ : CommRing R\nA B : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : CommRing B\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra A B\ninst✝² : IsScalarTower R A B\ninst✝¹ : Algebra.Etale R A\ninst✝ : Algebra.Etale A B\n⊢ Algebra.Etale R B","decl":"/-- Etale is stable under composition. -/\ntheorem comp [Algebra A B] [IsScalarTower R A B] [Etale R A] [Etale A B] : Etale R B where\n  formallyEtale := FormallyEtale.comp R A B\n  finitePresentation := FinitePresentation.trans R A B\n\n"}
{"name":"Algebra.Etale.baseChange","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝⁵ : CommRing R\nA B : Type u\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\ninst✝² : CommRing B\ninst✝¹ : Algebra R B\ninst✝ : Algebra.Etale R A\n⊢ Algebra.Etale B (TensorProduct R B A)","decl":"/-- Etale is stable under base change. -/\ninstance baseChange [Etale R A] : Etale B (B ⊗[R] A) where\n\n"}
{"name":"Algebra.Etale.of_isLocalization_Away","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nA : Type u\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\nr : R\ninst✝ : IsLocalization.Away r A\n⊢ Algebra.Etale R A","decl":"/-- Localization at an element is étale. -/\ntheorem of_isLocalization_Away (r : R) [IsLocalization.Away r A] : Etale R A where\n  formallyEtale := Algebra.FormallyEtale.of_isLocalization (Submonoid.powers r)\n  finitePresentation := IsLocalization.Away.finitePresentation r\n\n"}
{"name":"RingHom.formallyEtale_algebraMap","module":"Mathlib.RingTheory.Etale.Basic","initialProofState":"R S : Type u\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\n⊢ Iff (algebraMap R S).FormallyEtale (Algebra.FormallyEtale R S)","decl":"lemma formallyEtale_algebraMap [Algebra R S] :\n    (algebraMap R S).FormallyEtale ↔ Algebra.FormallyEtale R S := by\n  delta FormallyEtale\n  congr!\n  exact Algebra.algebra_ext _ _ fun _ ↦ rfl\n\n"}
