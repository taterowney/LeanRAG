{"name":"differentiableWithinAt_piLp","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nH : Type u_4\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : NormedAddCommGroup H\ninst✝⁴ : (i : ι) → NormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝² : NormedSpace 𝕜 H\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : H → PiLp p E\nt : Set H\ny : H\n⊢ Iff (DifferentiableWithinAt 𝕜 f t y) (∀ (i : ι), DifferentiableWithinAt 𝕜 (fun x => f x i) t y)","decl":"theorem differentiableWithinAt_piLp :\n    DifferentiableWithinAt 𝕜 f t y ↔ ∀ i, DifferentiableWithinAt 𝕜 (fun x => f x i) t y := by\n  rw [← (PiLp.continuousLinearEquiv p 𝕜 E).comp_differentiableWithinAt_iff,\n    differentiableWithinAt_pi]\n  rfl\n\n"}
{"name":"differentiableAt_piLp","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nH : Type u_4\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : NormedAddCommGroup H\ninst✝⁴ : (i : ι) → NormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝² : NormedSpace 𝕜 H\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : H → PiLp p E\ny : H\n⊢ Iff (DifferentiableAt 𝕜 f y) (∀ (i : ι), DifferentiableAt 𝕜 (fun x => f x i) y)","decl":"theorem differentiableAt_piLp :\n    DifferentiableAt 𝕜 f y ↔ ∀ i, DifferentiableAt 𝕜 (fun x => f x i) y := by\n  rw [← (PiLp.continuousLinearEquiv p 𝕜 E).comp_differentiableAt_iff, differentiableAt_pi]\n  rfl\n\n"}
{"name":"differentiableOn_piLp","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nH : Type u_4\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : NormedAddCommGroup H\ninst✝⁴ : (i : ι) → NormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝² : NormedSpace 𝕜 H\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : H → PiLp p E\nt : Set H\n⊢ Iff (DifferentiableOn 𝕜 f t) (∀ (i : ι), DifferentiableOn 𝕜 (fun x => f x i) t)","decl":"theorem differentiableOn_piLp :\n    DifferentiableOn 𝕜 f t ↔ ∀ i, DifferentiableOn 𝕜 (fun x => f x i) t := by\n  rw [← (PiLp.continuousLinearEquiv p 𝕜 E).comp_differentiableOn_iff, differentiableOn_pi]\n  rfl\n\n"}
{"name":"differentiable_piLp","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nH : Type u_4\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : NormedAddCommGroup H\ninst✝⁴ : (i : ι) → NormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝² : NormedSpace 𝕜 H\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : H → PiLp p E\n⊢ Iff (Differentiable 𝕜 f) (∀ (i : ι), Differentiable 𝕜 fun x => f x i)","decl":"theorem differentiable_piLp : Differentiable 𝕜 f ↔ ∀ i, Differentiable 𝕜 fun x => f x i := by\n  rw [← (PiLp.continuousLinearEquiv p 𝕜 E).comp_differentiable_iff, differentiable_pi]\n  rfl\n\n"}
{"name":"hasStrictFDerivAt_piLp","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nH : Type u_4\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : NormedAddCommGroup H\ninst✝⁴ : (i : ι) → NormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝² : NormedSpace 𝕜 H\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : H → PiLp p E\nf' : ContinuousLinearMap (RingHom.id 𝕜) H (PiLp p E)\ny : H\n⊢ Iff (HasStrictFDerivAt f f' y) (∀ (i : ι), HasStrictFDerivAt (fun x => f x i) ((PiLp.proj p E i).comp f') y)","decl":"theorem hasStrictFDerivAt_piLp :\n    HasStrictFDerivAt f f' y ↔\n      ∀ i, HasStrictFDerivAt (fun x => f x i) (PiLp.proj _ _ i ∘L f') y := by\n  rw [← (PiLp.continuousLinearEquiv p 𝕜 E).comp_hasStrictFDerivAt_iff, hasStrictFDerivAt_pi']\n  rfl\n\n"}
{"name":"hasFDerivWithinAt_piLp","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\nH : Type u_4\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : NormedAddCommGroup H\ninst✝⁴ : (i : ι) → NormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝² : NormedSpace 𝕜 H\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : H → PiLp p E\nf' : ContinuousLinearMap (RingHom.id 𝕜) H (PiLp p E)\nt : Set H\ny : H\n⊢ Iff (HasFDerivWithinAt f f' t y) (∀ (i : ι), HasFDerivWithinAt (fun x => f x i) ((PiLp.proj p E i).comp f') t y)","decl":"theorem hasFDerivWithinAt_piLp :\n    HasFDerivWithinAt f f' t y ↔\n      ∀ i, HasFDerivWithinAt (fun x => f x i) (PiLp.proj _ _ i ∘L f') t y := by\n  rw [← (PiLp.continuousLinearEquiv p 𝕜 E).comp_hasFDerivWithinAt_iff, hasFDerivWithinAt_pi']\n  rfl\n\n"}
{"name":"PiLp.hasStrictFDerivAt_equiv","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : (i : ι) → NormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : PiLp p E\n⊢ HasStrictFDerivAt (⇑(WithLp.equiv p ((i : ι) → E i))) (↑(PiLp.continuousLinearEquiv p 𝕜 E)) f","decl":"theorem hasStrictFDerivAt_equiv (f : PiLp p E) :\n    HasStrictFDerivAt (WithLp.equiv p (∀ i, E i))\n      (PiLp.continuousLinearEquiv p 𝕜 _).toContinuousLinearMap f :=\n  .of_isLittleO <| (Asymptotics.isLittleO_zero _ _).congr_left fun _ => (sub_self _).symm\n\n"}
{"name":"PiLp.hasStrictFDerivAt_equiv_symm","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : (i : ι) → NormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : PiLp p E\n⊢ HasStrictFDerivAt (⇑(WithLp.equiv p ((i : ι) → E i)).symm) (↑(PiLp.continuousLinearEquiv p 𝕜 E).symm) f","decl":"theorem hasStrictFDerivAt_equiv_symm (f : PiLp p E) :\n    HasStrictFDerivAt (WithLp.equiv p (∀ i, E i)).symm\n      (PiLp.continuousLinearEquiv p 𝕜 _).symm.toContinuousLinearMap f :=\n  .of_isLittleO <| (Asymptotics.isLittleO_zero _ _).congr_left fun _ => (sub_self _).symm\n\n"}
{"name":"PiLp.hasStrictFDerivAt_apply","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : (i : ι) → NormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : PiLp p E\ni : ι\n⊢ HasStrictFDerivAt (fun f => f i) (PiLp.proj p E i) f","decl":"nonrec theorem hasStrictFDerivAt_apply (f : PiLp p E) (i : ι) :\n    HasStrictFDerivAt (𝕜 := 𝕜) (fun f : PiLp p E => f i) (proj p E i) f :=\n  (hasStrictFDerivAt_apply i f).comp f (hasStrictFDerivAt_equiv (𝕜 := 𝕜) p f)\n\n"}
{"name":"PiLp.hasFDerivAt_equiv","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : (i : ι) → NormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : PiLp p E\n⊢ HasFDerivAt (⇑(WithLp.equiv p ((i : ι) → E i))) (↑(PiLp.continuousLinearEquiv p 𝕜 E)) f","decl":"theorem hasFDerivAt_equiv (f : PiLp p E) :\n    HasFDerivAt (WithLp.equiv p (∀ i, E i))\n      (PiLp.continuousLinearEquiv p 𝕜 _).toContinuousLinearMap f :=\n  (hasStrictFDerivAt_equiv p f).hasFDerivAt\n\n"}
{"name":"PiLp.hasFDerivAt_equiv_symm","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : (i : ι) → NormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : PiLp p E\n⊢ HasFDerivAt (⇑(WithLp.equiv p ((i : ι) → E i)).symm) (↑(PiLp.continuousLinearEquiv p 𝕜 E).symm) f","decl":"theorem hasFDerivAt_equiv_symm (f : PiLp p E) :\n    HasFDerivAt (WithLp.equiv p (∀ i, E i)).symm\n      (PiLp.continuousLinearEquiv p 𝕜 _).symm.toContinuousLinearMap f :=\n  (hasStrictFDerivAt_equiv_symm p f).hasFDerivAt\n\n"}
{"name":"PiLp.hasFDerivAt_apply","module":"Mathlib.Analysis.Calculus.FDeriv.WithLp","initialProofState":"𝕜 : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : (i : ι) → NormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\ninst✝¹ : Fintype ι\np : ENNReal\ninst✝ : Fact (LE.le 1 p)\nf : PiLp p E\ni : ι\n⊢ HasFDerivAt (fun f => f i) (PiLp.proj p E i) f","decl":"nonrec theorem hasFDerivAt_apply (f : PiLp p E) (i : ι) :\n    HasFDerivAt (𝕜 := 𝕜) (fun f : PiLp p E => f i) (proj p E i) f :=\n  (hasStrictFDerivAt_apply p f i).hasFDerivAt\n\n"}
