{"name":"LSeries.term_add","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\n⊢ Eq (LSeries.term (HAdd.hAdd f g) s) (HAdd.hAdd (LSeries.term f s) (LSeries.term g s))","decl":"lemma LSeries.term_add (f g : ℕ → ℂ) (s : ℂ) : term (f + g) s = term f s + term g s := by\n  ext ⟨- | n⟩ <;>\n  simp [add_div]\n\n"}
{"name":"LSeries.term_add_apply","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\nn : Nat\n⊢ Eq (LSeries.term (HAdd.hAdd f g) s n) (HAdd.hAdd (LSeries.term f s n) (LSeries.term g s n))","decl":"lemma LSeries.term_add_apply (f g : ℕ → ℂ) (s : ℂ) (n : ℕ) :\n    term (f + g) s n = term f s n + term g s n := by\n  simp [term_add]\n\n"}
{"name":"LSeriesHasSum.add","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns a b : Complex\nhf : LSeriesHasSum f s a\nhg : LSeriesHasSum g s b\n⊢ LSeriesHasSum (HAdd.hAdd f g) s (HAdd.hAdd a b)","decl":"lemma LSeriesHasSum.add {f g : ℕ → ℂ} {s a b : ℂ} (hf : LSeriesHasSum f s a)\n    (hg : LSeriesHasSum g s b) :\n    LSeriesHasSum (f + g) s (a + b) := by\n  simpa [LSeriesHasSum, term_add] using HasSum.add hf hg\n\n"}
{"name":"LSeriesSummable.add","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\nhf : LSeriesSummable f s\nhg : LSeriesSummable g s\n⊢ LSeriesSummable (HAdd.hAdd f g) s","decl":"lemma LSeriesSummable.add {f g : ℕ → ℂ} {s : ℂ} (hf : LSeriesSummable f s)\n    (hg : LSeriesSummable g s) :\n    LSeriesSummable (f + g) s := by\n  simpa [LSeriesSummable, ← term_add_apply] using Summable.add hf hg\n\n"}
{"name":"LSeries_add","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\nhf : LSeriesSummable f s\nhg : LSeriesSummable g s\n⊢ Eq (LSeries (HAdd.hAdd f g) s) (HAdd.hAdd (LSeries f s) (LSeries g s))","decl":"@[simp]\nlemma LSeries_add {f g : ℕ → ℂ} {s : ℂ} (hf : LSeriesSummable f s) (hg : LSeriesSummable g s) :\n    LSeries (f + g) s = LSeries f s + LSeries g s := by\n  simpa [LSeries, term_add] using tsum_add hf hg\n\n"}
{"name":"LSeries.term_neg","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\ns : Complex\n⊢ Eq (LSeries.term (Neg.neg f) s) (Neg.neg (LSeries.term f s))","decl":"lemma LSeries.term_neg (f : ℕ → ℂ) (s : ℂ) : term (-f) s = -term f s := by\n  ext ⟨- | n⟩ <;>\n  simp [neg_div]\n\n"}
{"name":"LSeries.term_neg_apply","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\ns : Complex\nn : Nat\n⊢ Eq (LSeries.term (Neg.neg f) s n) (Neg.neg (LSeries.term f s n))","decl":"lemma LSeries.term_neg_apply (f : ℕ → ℂ) (s : ℂ) (n : ℕ) : term (-f) s n = -term f s n := by\n  simp [term_neg]\n\n"}
{"name":"LSeriesHasSum.neg","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\ns a : Complex\nhf : LSeriesHasSum f s a\n⊢ LSeriesHasSum (Neg.neg f) s (Neg.neg a)","decl":"lemma LSeriesHasSum.neg {f : ℕ → ℂ} {s a : ℂ} (hf : LSeriesHasSum f s a) :\n    LSeriesHasSum (-f) s (-a) := by\n  simpa [LSeriesHasSum, term_neg] using HasSum.neg hf\n\n"}
{"name":"LSeriesSummable.neg","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\ns : Complex\nhf : LSeriesSummable f s\n⊢ LSeriesSummable (Neg.neg f) s","decl":"lemma LSeriesSummable.neg {f : ℕ → ℂ} {s : ℂ} (hf : LSeriesSummable f s) :\n    LSeriesSummable (-f) s := by\n  simpa [LSeriesSummable, term_neg] using Summable.neg hf\n\n"}
{"name":"LSeriesSummable.neg_iff","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\ns : Complex\n⊢ Iff (LSeriesSummable (Neg.neg f) s) (LSeriesSummable f s)","decl":"@[simp]\nlemma LSeriesSummable.neg_iff {f : ℕ → ℂ} {s : ℂ} :\n    LSeriesSummable (-f) s ↔ LSeriesSummable f s :=\n  ⟨fun H ↦ neg_neg f ▸ H.neg, .neg⟩\n\n"}
{"name":"LSeries_neg","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\ns : Complex\n⊢ Eq (LSeries (Neg.neg f) s) (Neg.neg (LSeries f s))","decl":"@[simp]\nlemma LSeries_neg (f : ℕ → ℂ) (s : ℂ) : LSeries (-f) s = -LSeries f s := by\n  simp [LSeries, term_neg_apply, tsum_neg]\n\n"}
{"name":"LSeries.term_sub","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\n⊢ Eq (LSeries.term (HSub.hSub f g) s) (HSub.hSub (LSeries.term f s) (LSeries.term g s))","decl":"lemma LSeries.term_sub (f g : ℕ → ℂ) (s : ℂ) : term (f - g) s = term f s - term g s := by\n  simp_rw [sub_eq_add_neg, term_add, term_neg]\n\n"}
{"name":"LSeries.term_sub_apply","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\nn : Nat\n⊢ Eq (LSeries.term (HSub.hSub f g) s n) (HSub.hSub (LSeries.term f s n) (LSeries.term g s n))","decl":"lemma LSeries.term_sub_apply (f g : ℕ → ℂ) (s : ℂ) (n : ℕ) :\n    term (f - g) s n = term f s n - term g s n := by\n  rw [term_sub, Pi.sub_apply]\n\n"}
{"name":"LSeriesHasSum.sub","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns a b : Complex\nhf : LSeriesHasSum f s a\nhg : LSeriesHasSum g s b\n⊢ LSeriesHasSum (HSub.hSub f g) s (HSub.hSub a b)","decl":"lemma LSeriesHasSum.sub {f g : ℕ → ℂ} {s a b : ℂ} (hf : LSeriesHasSum f s a)\n    (hg : LSeriesHasSum g s b) :\n    LSeriesHasSum (f - g) s (a - b) := by\n  simpa [LSeriesHasSum, term_sub] using HasSum.sub hf hg\n\n"}
{"name":"LSeriesSummable.sub","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\nhf : LSeriesSummable f s\nhg : LSeriesSummable g s\n⊢ LSeriesSummable (HSub.hSub f g) s","decl":"lemma LSeriesSummable.sub {f g : ℕ → ℂ} {s : ℂ} (hf : LSeriesSummable f s)\n    (hg : LSeriesSummable g s) :\n    LSeriesSummable (f - g) s := by\n  simpa [LSeriesSummable, ← term_sub_apply] using Summable.sub hf hg\n\n"}
{"name":"LSeries_sub","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f g : Nat → Complex\ns : Complex\nhf : LSeriesSummable f s\nhg : LSeriesSummable g s\n⊢ Eq (LSeries (HSub.hSub f g) s) (HSub.hSub (LSeries f s) (LSeries g s))","decl":"@[simp]\nlemma LSeries_sub {f g : ℕ → ℂ} {s : ℂ} (hf : LSeriesSummable f s) (hg : LSeriesSummable g s) :\n    LSeries (f - g) s = LSeries f s - LSeries g s := by\n  simpa [LSeries, term_sub] using tsum_sub hf hg\n\n"}
{"name":"LSeries.term_smul","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s : Complex\n⊢ Eq (LSeries.term (HSMul.hSMul c f) s) (HSMul.hSMul c (LSeries.term f s))","decl":"lemma LSeries.term_smul (f : ℕ → ℂ) (c s : ℂ) : term (c • f) s = c • term f s := by\n  ext ⟨- | n⟩ <;>\n  simp [mul_div_assoc]\n\n"}
{"name":"LSeries.term_smul_apply","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s : Complex\nn : Nat\n⊢ Eq (LSeries.term (HSMul.hSMul c f) s n) (HMul.hMul c (LSeries.term f s n))","decl":"lemma LSeries.term_smul_apply (f : ℕ → ℂ) (c s : ℂ) (n : ℕ) :\n    term (c • f) s n = c * term f s n := by\n  simp [term_smul]\n\n"}
{"name":"LSeriesHasSum.smul","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s a : Complex\nhf : LSeriesHasSum f s a\n⊢ LSeriesHasSum (HSMul.hSMul c f) s (HMul.hMul c a)","decl":"lemma LSeriesHasSum.smul {f : ℕ → ℂ} (c : ℂ) {s a : ℂ} (hf : LSeriesHasSum f s a) :\n    LSeriesHasSum (c • f) s (c * a) := by\n  simpa [LSeriesHasSum, term_smul] using hf.const_smul c\n\n"}
{"name":"LSeriesSummable.smul","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s : Complex\nhf : LSeriesSummable f s\n⊢ LSeriesSummable (HSMul.hSMul c f) s","decl":"lemma LSeriesSummable.smul {f : ℕ → ℂ} (c : ℂ) {s : ℂ} (hf : LSeriesSummable f s) :\n    LSeriesSummable (c • f) s := by\n  simpa [LSeriesSummable, term_smul] using hf.const_smul c\n\n"}
{"name":"LSeriesSummable.of_smul","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s : Complex\nhc : Ne c 0\nhf : LSeriesSummable (HSMul.hSMul c f) s\n⊢ LSeriesSummable f s","decl":"lemma LSeriesSummable.of_smul {f : ℕ → ℂ} {c s : ℂ} (hc : c ≠ 0) (hf : LSeriesSummable (c • f) s) :\n    LSeriesSummable f s := by\n  simpa [hc] using hf.smul (c⁻¹)\n\n"}
{"name":"LSeriesSummable.smul_iff","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s : Complex\nhc : Ne c 0\n⊢ Iff (LSeriesSummable (HSMul.hSMul c f) s) (LSeriesSummable f s)","decl":"lemma LSeriesSummable.smul_iff {f : ℕ → ℂ} {c s : ℂ} (hc : c ≠ 0) :\n    LSeriesSummable (c • f) s ↔ LSeriesSummable f s :=\n  ⟨of_smul hc, smul c⟩\n\n"}
{"name":"LSeries_smul","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"f : Nat → Complex\nc s : Complex\n⊢ Eq (LSeries (HSMul.hSMul c f) s) (HMul.hMul c (LSeries f s))","decl":"@[simp]\nlemma LSeries_smul (f : ℕ → ℂ) (c s : ℂ) : LSeries (c • f) s = c * LSeries f s := by\n  simp [LSeries, term_smul_apply, tsum_mul_left]\n\n"}
{"name":"LSeries.term_sum_apply","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"ι : Type u_1\nf : ι → Nat → Complex\nS : Finset ι\ns : Complex\nn : Nat\n⊢ Eq (LSeries.term (S.sum fun i => f i) s n) (S.sum fun i => LSeries.term (f i) s n)","decl":"@[simp]\nlemma LSeries.term_sum_apply (n : ℕ) :\n    term (∑ i ∈ S, f i) s n  = ∑ i ∈ S, term (f i) s n := by\n  rcases eq_or_ne n 0 with hn | hn <;>\n  simp [hn, Finset.sum_div]\n\n"}
{"name":"LSeries.term_sum","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"ι : Type u_1\nf : ι → Nat → Complex\nS : Finset ι\ns : Complex\n⊢ Eq (LSeries.term (S.sum fun i => f i) s) (S.sum fun i => LSeries.term (f i) s)","decl":"lemma LSeries.term_sum : term (∑ i ∈ S, f i) s  = ∑ i ∈ S, term (f i) s :=\n  funext fun _ ↦ by simp\n\n"}
{"name":"LSeriesHasSum.sum","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"ι : Type u_1\nf : ι → Nat → Complex\nS : Finset ι\ns : Complex\na : ι → Complex\nhf : ∀ (i : ι), Membership.mem S i → LSeriesHasSum (f i) s (a i)\n⊢ LSeriesHasSum (S.sum fun i => f i) s (S.sum fun i => a i)","decl":"lemma LSeriesHasSum.sum {a : ι → ℂ} (hf : ∀ i ∈ S, LSeriesHasSum (f i) s (a i)) :\n    LSeriesHasSum (∑ i ∈ S, f i) s (∑ i ∈ S, a i) := by\n  simpa [LSeriesHasSum, term_sum, Finset.sum_fn S fun i ↦ term (f i) s] using hasSum_sum hf\n\n"}
{"name":"LSeriesSummable.sum","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"ι : Type u_1\nf : ι → Nat → Complex\nS : Finset ι\ns : Complex\nhf : ∀ (i : ι), Membership.mem S i → LSeriesSummable (f i) s\n⊢ LSeriesSummable (S.sum fun i => f i) s","decl":"lemma LSeriesSummable.sum (hf : ∀ i ∈ S, LSeriesSummable (f i) s) :\n    LSeriesSummable (∑ i ∈ S, f i) s := by\n  simpa [LSeriesSummable, ← term_sum_apply] using summable_sum hf\n\n"}
{"name":"LSeries_sum","module":"Mathlib.NumberTheory.LSeries.Linearity","initialProofState":"ι : Type u_1\nf : ι → Nat → Complex\nS : Finset ι\ns : Complex\nhf : ∀ (i : ι), Membership.mem S i → LSeriesSummable (f i) s\n⊢ Eq (LSeries (S.sum fun i => f i) s) (S.sum fun i => LSeries (f i) s)","decl":"@[simp]\nlemma LSeries_sum (hf : ∀ i ∈ S, LSeriesSummable (f i) s) :\n    LSeries (∑ i ∈ S, f i) s = ∑ i ∈ S, LSeries (f i) s := by\n  simpa [LSeries, term_sum] using tsum_sum hf\n\n"}
