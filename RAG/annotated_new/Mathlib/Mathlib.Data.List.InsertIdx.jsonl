{"name":"List.get_insertIdx_of_lt","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhn : LT.lt k n\nhk : LT.lt k l.length\nhk' : optParam (LT.lt k (List.insertIdx n x l).length) ⋯\n⊢ Eq ((List.insertIdx n x l).get ⟨k, hk'⟩) (l.get ⟨k, hk⟩)","decl":"theorem get_insertIdx_of_lt (l : List α) (x : α) (n k : ℕ) (hn : k < n) (hk : k < l.length)\n    (hk' : k < (insertIdx n x l).length := hk.trans_le (length_le_length_insertIdx _ _ _)) :\n    (insertIdx n x l).get ⟨k, hk'⟩ = l.get ⟨k, hk⟩ := by\n  simp_all [getElem_insertIdx_of_lt]\n\n"}
{"name":"List.get_insertIdx_self","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn : Nat\nhn : LE.le n l.length\nhn' : optParam (LT.lt n (List.insertIdx n x l).length) ⋯\n⊢ Eq ((List.insertIdx n x l).get ⟨n, hn'⟩) x","decl":"theorem get_insertIdx_self (l : List α) (x : α) (n : ℕ) (hn : n ≤ l.length)\n    (hn' : n < (insertIdx n x l).length :=\n      (by rwa [length_insertIdx_of_le_length hn, Nat.lt_succ_iff])) :\n    (insertIdx n x l).get ⟨n, hn'⟩ = x := by\n  simp [hn, hn']\n\n"}
{"name":"List.getElem_insertIdx_add_succ","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhk' : LT.lt (HAdd.hAdd n k) l.length\nhk : optParam (LT.lt (HAdd.hAdd (HAdd.hAdd n k) 1) (List.insertIdx n x l).length) ⋯\n⊢ Eq (GetElem.getElem (List.insertIdx n x l) (HAdd.hAdd (HAdd.hAdd n k) 1) ⋯) (GetElem.getElem l (HAdd.hAdd n k) ⋯)","decl":"theorem getElem_insertIdx_add_succ (l : List α) (x : α) (n k : ℕ) (hk' : n + k < l.length)\n    (hk : n + k + 1 < (insertIdx n x l).length := (by\n      rwa [length_insertIdx_of_le_length (by omega), Nat.succ_lt_succ_iff])) :\n    (insertIdx n x l)[n + k + 1] = l[n + k] := by\n  rw [getElem_insertIdx_of_ge (by omega)]\n  simp only [Nat.add_one_sub_one]\n\n"}
{"name":"List.get_insertIdx_add_succ","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhk' : LT.lt (HAdd.hAdd n k) l.length\nhk : optParam (LT.lt (HAdd.hAdd (HAdd.hAdd n k) 1) (List.insertIdx n x l).length) ⋯\n⊢ Eq ((List.insertIdx n x l).get ⟨HAdd.hAdd (HAdd.hAdd n k) 1, hk⟩) (l.get ⟨HAdd.hAdd n k, hk'⟩)","decl":"theorem get_insertIdx_add_succ (l : List α) (x : α) (n k : ℕ) (hk' : n + k < l.length)\n    (hk : n + k + 1 < (insertIdx n x l).length := (by\n      rwa [length_insertIdx_of_le_length (by omega), Nat.succ_lt_succ_iff])) :\n    (insertIdx n x l).get ⟨n + k + 1, hk⟩ = get l ⟨n + k, hk'⟩ := by\n  simp [getElem_insertIdx_add_succ, hk, hk']\n\n"}
{"name":"List.insertIdx_injective","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nn : Nat\nx : α\n⊢ Function.Injective (List.insertIdx n x)","decl":"set_option linter.unnecessarySimpa false in\ntheorem insertIdx_injective (n : ℕ) (x : α) : Function.Injective (insertIdx n x) := by\n  induction' n with n IH\n  · have : insertIdx 0 x = cons x := funext fun _ => rfl\n    simp [this]\n  · rintro (_ | ⟨a, as⟩) (_ | ⟨b, bs⟩) h <;> simpa [IH.eq_iff] using h\n\n"}
{"name":"List.insertNth_zero","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\ns : List α\nx : α\n⊢ Eq (List.insertIdx 0 x s) (List.cons x s)","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_zero := insertIdx_zero\n"}
{"name":"List.insertNth_succ_nil","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nn : Nat\na : α\n⊢ Eq (List.insertIdx (HAdd.hAdd n 1) a List.nil) List.nil","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_succ_nil := insertIdx_succ_nil\n"}
{"name":"List.insertNth_succ_cons","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\ns : List α\nhd x : α\nn : Nat\n⊢ Eq (List.insertIdx (HAdd.hAdd n 1) x (List.cons hd s)) (List.cons hd (List.insertIdx n x s))","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_succ_cons := insertIdx_succ_cons\n"}
{"name":"List.length_insertNth","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\na : α\nn : Nat\nas : List α\n⊢ Eq (List.insertIdx n a as).length (ite (LE.le n as.length) (HAdd.hAdd as.length 1) as.length)","decl":"@[deprecated (since := \"2024-10-21\")] alias length_insertNth := length_insertIdx\n"}
{"name":"List.removeNth_insertIdx","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\na : α\nn : Nat\nl : List α\n⊢ Eq ((List.insertIdx n a l).eraseIdx n) l","decl":"@[deprecated (since := \"2024-10-21\")] alias removeNth_insertIdx := eraseIdx_insertIdx\n"}
{"name":"List.insertNth_eraseIdx_of_ge","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\na : α\nn m : Nat\nas : List α\na✝¹ : LT.lt n as.length\na✝ : LE.le n m\n⊢ Eq (List.insertIdx m a (as.eraseIdx n)) ((List.insertIdx (HAdd.hAdd m 1) a as).eraseIdx n)","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_eraseIdx_of_ge := insertIdx_eraseIdx_of_ge\n"}
{"name":"List.insertNth_eraseIdx_of_le","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\na : α\nn m : Nat\nas : List α\na✝¹ : LT.lt n as.length\na✝ : LE.le m n\n⊢ Eq (List.insertIdx m a (as.eraseIdx n)) ((List.insertIdx m a as).eraseIdx (HAdd.hAdd n 1))","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_eraseIdx_of_le := insertIdx_eraseIdx_of_le\n"}
{"name":"List.insertNth_comm","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\na b : α\ni j : Nat\nl : List α\nx✝¹ : LE.le i j\nx✝ : LE.le j l.length\n⊢ Eq (List.insertIdx (HAdd.hAdd j 1) b (List.insertIdx i a l)) (List.insertIdx i a (List.insertIdx j b l))","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_comm := insertIdx_comm\n"}
{"name":"List.mem_insertNth","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\na b : α\nn : Nat\nl : List α\nx✝ : LE.le n l.length\n⊢ Iff (Membership.mem (List.insertIdx n b l) a) (Or (Eq a b) (Membership.mem l a))","decl":"@[deprecated (since := \"2024-10-21\")] alias mem_insertNth := mem_insertIdx\n"}
{"name":"List.insertNth_of_length_lt","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn : Nat\nh : LT.lt l.length n\n⊢ Eq (List.insertIdx n x l) l","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_of_length_lt := insertIdx_of_length_lt\n"}
{"name":"List.insertNth_length_self","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\n⊢ Eq (List.insertIdx l.length x l) (HAppend.hAppend l (List.cons x List.nil))","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_length_self := insertIdx_length_self\n"}
{"name":"List.length_le_length_insertNth","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn : Nat\n⊢ LE.le l.length (List.insertIdx n x l).length","decl":"@[deprecated (since := \"2024-10-21\")] alias length_le_length_insertNth := length_le_length_insertIdx\n"}
{"name":"List.length_insertNth_le_succ","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn : Nat\n⊢ LE.le (List.insertIdx n x l).length (HAdd.hAdd l.length 1)","decl":"@[deprecated (since := \"2024-10-21\")] alias length_insertNth_le_succ := length_insertIdx_le_succ\n"}
{"name":"List.getElem_insertNth_of_lt","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhn : LT.lt k n\nhk : LT.lt k (List.insertIdx n x l).length\n⊢ Eq (GetElem.getElem (List.insertIdx n x l) k hk) (GetElem.getElem l k ⋯)","decl":"@[deprecated (since := \"2024-10-21\")] alias getElem_insertNth_of_lt := getElem_insertIdx_of_lt\n"}
{"name":"List.get_insertNth_of_lt","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhn : LT.lt k n\nhk : LT.lt k l.length\nhk' : optParam (LT.lt k (List.insertIdx n x l).length) ⋯\n⊢ Eq ((List.insertIdx n x l).get ⟨k, hk'⟩) (l.get ⟨k, hk⟩)","decl":"@[deprecated (since := \"2024-10-21\")] alias get_insertNth_of_lt := get_insertIdx_of_lt\n"}
{"name":"List.getElem_insertNth_self","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn : Nat\nhn : LT.lt n (List.insertIdx n x l).length\n⊢ Eq (GetElem.getElem (List.insertIdx n x l) n hn) x","decl":"@[deprecated (since := \"2024-10-21\")] alias getElem_insertNth_self := getElem_insertIdx_self\n"}
{"name":"List.get_insertNth_self","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn : Nat\nhn : LE.le n l.length\nhn' : optParam (LT.lt n (List.insertIdx n x l).length) ⋯\n⊢ Eq ((List.insertIdx n x l).get ⟨n, hn'⟩) x","decl":"@[deprecated (since := \"2024-10-21\")] alias get_insertNth_self := get_insertIdx_self\n"}
{"name":"List.getElem_insertNth_add_succ","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhk' : LT.lt (HAdd.hAdd n k) l.length\nhk : optParam (LT.lt (HAdd.hAdd (HAdd.hAdd n k) 1) (List.insertIdx n x l).length) ⋯\n⊢ Eq (GetElem.getElem (List.insertIdx n x l) (HAdd.hAdd (HAdd.hAdd n k) 1) ⋯) (GetElem.getElem l (HAdd.hAdd n k) ⋯)","decl":"@[deprecated (since := \"2024-10-21\")] alias getElem_insertNth_add_succ := getElem_insertIdx_add_succ\n"}
{"name":"List.get_insertNth_add_succ","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nl : List α\nx : α\nn k : Nat\nhk' : LT.lt (HAdd.hAdd n k) l.length\nhk : optParam (LT.lt (HAdd.hAdd (HAdd.hAdd n k) 1) (List.insertIdx n x l).length) ⋯\n⊢ Eq ((List.insertIdx n x l).get ⟨HAdd.hAdd (HAdd.hAdd n k) 1, hk⟩) (l.get ⟨HAdd.hAdd n k, hk'⟩)","decl":"@[deprecated (since := \"2024-10-21\")] alias get_insertNth_add_succ := get_insertIdx_add_succ\n"}
{"name":"List.insertNth_injective","module":"Mathlib.Data.List.InsertIdx","initialProofState":"α : Type u\nn : Nat\nx : α\n⊢ Function.Injective (List.insertIdx n x)","decl":"@[deprecated (since := \"2024-10-21\")] alias insertNth_injective := insertIdx_injective\n\n"}
