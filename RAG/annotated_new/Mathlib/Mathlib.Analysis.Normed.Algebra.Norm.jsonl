{"name":"AlgebraNorm.mk.injEq","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\ntoRingNorm✝ : RingNorm S\nsmul'✝ : ∀ (a : R) (x : S), Eq (toRingNorm✝.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toRingNorm✝.toFun x))\ntoRingNorm : RingNorm S\nsmul' : ∀ (a : R) (x : S), Eq (toRingNorm.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toRingNorm.toFun x))\n⊢ Eq (Eq { toRingNorm := toRingNorm✝, smul' := smul'✝ } { toRingNorm := toRingNorm, smul' := smul' }) (Eq toRingNorm✝ toRingNorm)","decl":"/-- An algebra norm on an `R`-algebra `S` is a ring norm on `S` compatible with the\naction of `R`. -/\nstructure AlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S] extends\n  RingNorm S, Seminorm R S\n\n"}
{"name":"AlgebraNorm.mk.inj","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\ntoRingNorm✝ : RingNorm S\nsmul'✝ : ∀ (a : R) (x : S), Eq (toRingNorm✝.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toRingNorm✝.toFun x))\ntoRingNorm : RingNorm S\nsmul' : ∀ (a : R) (x : S), Eq (toRingNorm.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toRingNorm.toFun x))\nx✝ : Eq { toRingNorm := toRingNorm✝, smul' := smul'✝ } { toRingNorm := toRingNorm, smul' := smul' }\n⊢ Eq toRingNorm✝ toRingNorm","decl":"/-- An algebra norm on an `R`-algebra `S` is a ring norm on `S` compatible with the\naction of `R`. -/\nstructure AlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S] extends\n  RingNorm S, Seminorm R S\n\n"}
{"name":"AlgebraNorm.mk.sizeOf_spec","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝⁴ : SeminormedCommRing R\nS : Type u_2\ninst✝³ : Ring S\ninst✝² : Algebra R S\ninst✝¹ : SizeOf R\ninst✝ : SizeOf S\ntoRingNorm : RingNorm S\nsmul' : ∀ (a : R) (x : S), Eq (toRingNorm.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toRingNorm.toFun x))\n⊢ Eq (SizeOf.sizeOf { toRingNorm := toRingNorm, smul' := smul' }) (HAdd.hAdd 1 (SizeOf.sizeOf toRingNorm))","decl":"/-- An algebra norm on an `R`-algebra `S` is a ring norm on `S` compatible with the\naction of `R`. -/\nstructure AlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S] extends\n  RingNorm S, Seminorm R S\n\n"}
{"name":"AlgebraNorm.smul'","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\nself : AlgebraNorm R S\na : R\nx : S\n⊢ Eq (self.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (self.toFun x))","decl":"/-- An algebra norm on an `R`-algebra `S` is a ring norm on `S` compatible with the\naction of `R`. -/\nstructure AlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S] extends\n  RingNorm S, Seminorm R S\n\n"}
{"name":"AlgebraNormClass.toSeminormClass","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\ninst✝³ : SeminormedCommRing R\nS : outParam (Type u_3)\ninst✝² : Ring S\ninst✝¹ : Algebra R S\ninst✝ : FunLike F S Real\nself : AlgebraNormClass F R S\n⊢ SeminormClass F R S","decl":"/-- `AlgebraNormClass F R S` states that `F` is a type of `R`-algebra norms on the ring `S`.\nYou should extend this class when you extend `AlgebraNorm`. -/\nclass AlgebraNormClass (F : Type*) (R : outParam <| Type*) [SeminormedCommRing R]\n    (S : outParam <| Type*) [Ring S] [Algebra R S] [FunLike F S ℝ] extends RingNormClass F S ℝ,\n    SeminormClass F R S : Prop\n\n"}
{"name":"AlgebraNormClass.toRingNormClass","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\ninst✝³ : SeminormedCommRing R\nS : outParam (Type u_3)\ninst✝² : Ring S\ninst✝¹ : Algebra R S\ninst✝ : FunLike F S Real\nself : AlgebraNormClass F R S\n⊢ RingNormClass F S Real","decl":"/-- `AlgebraNormClass F R S` states that `F` is a type of `R`-algebra norms on the ring `S`.\nYou should extend this class when you extend `AlgebraNorm`. -/\nclass AlgebraNormClass (F : Type*) (R : outParam <| Type*) [SeminormedCommRing R]\n    (S : outParam <| Type*) [Ring S] [Algebra R S] [FunLike F S ℝ] extends RingNormClass F S ℝ,\n    SeminormClass F R S : Prop\n\n"}
{"name":"AlgebraNormClass.map_smul_eq_mul","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\ninst✝³ : SeminormedCommRing R\nS : outParam (Type u_3)\ninst✝² : Ring S\ninst✝¹ : Algebra R S\ninst✝ : FunLike F S Real\nself : AlgebraNormClass F R S\nf : F\na : R\nx : S\n⊢ Eq (f (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (f x))","decl":"/-- `AlgebraNormClass F R S` states that `F` is a type of `R`-algebra norms on the ring `S`.\nYou should extend this class when you extend `AlgebraNorm`. -/\nclass AlgebraNormClass (F : Type*) (R : outParam <| Type*) [SeminormedCommRing R]\n    (S : outParam <| Type*) [Ring S] [Algebra R S] [FunLike F S ℝ] extends RingNormClass F S ℝ,\n    SeminormClass F R S : Prop\n\n"}
{"name":"AlgebraNorm.algebraNormClass","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\n⊢ AlgebraNormClass (AlgebraNorm R S) R S","decl":"instance algebraNormClass : AlgebraNormClass (AlgebraNorm R S) R S where\n  map_zero f        := f.map_zero'\n  map_add_le_add f  := f.add_le'\n  map_mul_le_mul f  := f.mul_le'\n  map_neg_eq_map f  := f.neg'\n  eq_zero_of_map_eq_zero f := f.eq_zero_of_map_eq_zero' _\n  map_smul_eq_mul f := f.smul'\n\n"}
{"name":"AlgebraNorm.toFun_eq_coe","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\np : AlgebraNorm R S\n⊢ Eq p.toFun ⇑p","decl":"theorem toFun_eq_coe (p : AlgebraNorm R S) : p.toFun = p := rfl\n\n"}
{"name":"AlgebraNorm.ext_iff","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\np q : AlgebraNorm R S\n⊢ Iff (Eq p q) (∀ (x : S), Eq (p x) (q x))","decl":"@[ext]\ntheorem ext {p q : AlgebraNorm R S} : (∀ x, p x = q x) → p = q :=\n  DFunLike.ext p q\n\n"}
{"name":"AlgebraNorm.ext","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\np q : AlgebraNorm R S\na✝ : ∀ (x : S), Eq (p x) (q x)\n⊢ Eq p q","decl":"@[ext]\ntheorem ext {p q : AlgebraNorm R S} : (∀ x, p x = q x) → p = q :=\n  DFunLike.ext p q\n\n"}
{"name":"AlgebraNorm.extends_norm'","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\nf : AlgebraNorm R S\nhf1 : Eq (f 1) 1\na : R\n⊢ Eq (f (HSMul.hSMul a 1)) (Norm.norm a)","decl":"/-- An `R`-algebra norm such that `f 1 = 1` extends the norm on `R`. -/\ntheorem extends_norm' (hf1 : f 1 = 1) (a : R) : f (a • (1 : S)) = ‖a‖ := by\n  rw [← mul_one ‖a‖, ← hf1]; exact f.smul' _ _\n\n"}
{"name":"AlgebraNorm.extends_norm","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\nf : AlgebraNorm R S\nhf1 : Eq (f 1) 1\na : R\n⊢ Eq (f ((algebraMap R S) a)) (Norm.norm a)","decl":"/-- An `R`-algebra norm such that `f 1 = 1` extends the norm on `R`. -/\ntheorem extends_norm (hf1 : f 1 = 1) (a : R) : f (algebraMap R S a) = ‖a‖ := by\n  rw [Algebra.algebraMap_eq_smul_one]; exact extends_norm' hf1 _\n\n"}
{"name":"MulAlgebraNorm.mk.inj","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\ntoMulRingNorm✝ : MulRingNorm S\nsmul'✝ : ∀ (a : R) (x : S), Eq (toMulRingNorm✝.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toMulRingNorm✝.toFun x))\ntoMulRingNorm : MulRingNorm S\nsmul' : ∀ (a : R) (x : S), Eq (toMulRingNorm.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toMulRingNorm.toFun x))\nx✝ : Eq { toMulRingNorm := toMulRingNorm✝, smul' := smul'✝ } { toMulRingNorm := toMulRingNorm, smul' := smul' }\n⊢ Eq toMulRingNorm✝ toMulRingNorm","decl":"/-- A multiplicative algebra norm on an `R`-algebra norm `S` is a multiplicative ring norm on `S`\n  compatible with the action of `R`. -/\nstructure MulAlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S]\n  extends MulRingNorm S, Seminorm R S\n\n"}
{"name":"MulAlgebraNorm.mk.sizeOf_spec","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝⁴ : SeminormedCommRing R\nS : Type u_2\ninst✝³ : Ring S\ninst✝² : Algebra R S\ninst✝¹ : SizeOf R\ninst✝ : SizeOf S\ntoMulRingNorm : MulRingNorm S\nsmul' : ∀ (a : R) (x : S), Eq (toMulRingNorm.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toMulRingNorm.toFun x))\n⊢ Eq (SizeOf.sizeOf { toMulRingNorm := toMulRingNorm, smul' := smul' }) (HAdd.hAdd 1 (SizeOf.sizeOf toMulRingNorm))","decl":"/-- A multiplicative algebra norm on an `R`-algebra norm `S` is a multiplicative ring norm on `S`\n  compatible with the action of `R`. -/\nstructure MulAlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S]\n  extends MulRingNorm S, Seminorm R S\n\n"}
{"name":"MulAlgebraNorm.mk.injEq","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\ntoMulRingNorm✝ : MulRingNorm S\nsmul'✝ : ∀ (a : R) (x : S), Eq (toMulRingNorm✝.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toMulRingNorm✝.toFun x))\ntoMulRingNorm : MulRingNorm S\nsmul' : ∀ (a : R) (x : S), Eq (toMulRingNorm.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (toMulRingNorm.toFun x))\n⊢ Eq (Eq { toMulRingNorm := toMulRingNorm✝, smul' := smul'✝ } { toMulRingNorm := toMulRingNorm, smul' := smul' }) (Eq toMulRingNorm✝ toMulRingNorm)","decl":"/-- A multiplicative algebra norm on an `R`-algebra norm `S` is a multiplicative ring norm on `S`\n  compatible with the action of `R`. -/\nstructure MulAlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S]\n  extends MulRingNorm S, Seminorm R S\n\n"}
{"name":"MulAlgebraNorm.smul'","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : Type u_1\ninst✝² : SeminormedCommRing R\nS : Type u_2\ninst✝¹ : Ring S\ninst✝ : Algebra R S\nself : MulAlgebraNorm R S\na : R\nx : S\n⊢ Eq (self.toFun (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (self.toFun x))","decl":"/-- A multiplicative algebra norm on an `R`-algebra norm `S` is a multiplicative ring norm on `S`\n  compatible with the action of `R`. -/\nstructure MulAlgebraNorm (R : Type*) [SeminormedCommRing R] (S : Type*) [Ring S] [Algebra R S]\n  extends MulRingNorm S, Seminorm R S\n\n"}
{"name":"MulAlgebraNormClass.toSeminormClass","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\ninst✝³ : SeminormedCommRing R\nS : outParam (Type u_3)\ninst✝² : Ring S\ninst✝¹ : Algebra R S\ninst✝ : FunLike F S Real\nself : MulAlgebraNormClass F R S\n⊢ SeminormClass F R S","decl":"/-- `MulAlgebraNormClass F R S` states that `F` is a type of multiplicative `R`-algebra norms on\nthe ring `S`. You should extend this class when you extend `MulAlgebraNorm`. -/\nclass MulAlgebraNormClass (F : Type*) (R : outParam <| Type*) [SeminormedCommRing R]\n    (S : outParam <| Type*) [Ring S] [Algebra R S] [FunLike F S ℝ] extends MulRingNormClass F S ℝ,\n    SeminormClass F R S : Prop\n\n"}
{"name":"MulAlgebraNormClass.toMulRingNormClass","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\ninst✝³ : SeminormedCommRing R\nS : outParam (Type u_3)\ninst✝² : Ring S\ninst✝¹ : Algebra R S\ninst✝ : FunLike F S Real\nself : MulAlgebraNormClass F R S\n⊢ MulRingNormClass F S Real","decl":"/-- `MulAlgebraNormClass F R S` states that `F` is a type of multiplicative `R`-algebra norms on\nthe ring `S`. You should extend this class when you extend `MulAlgebraNorm`. -/\nclass MulAlgebraNormClass (F : Type*) (R : outParam <| Type*) [SeminormedCommRing R]\n    (S : outParam <| Type*) [Ring S] [Algebra R S] [FunLike F S ℝ] extends MulRingNormClass F S ℝ,\n    SeminormClass F R S : Prop\n\n"}
{"name":"MulAlgebraNormClass.map_smul_eq_mul","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\ninst✝³ : SeminormedCommRing R\nS : outParam (Type u_3)\ninst✝² : Ring S\ninst✝¹ : Algebra R S\ninst✝ : FunLike F S Real\nself : MulAlgebraNormClass F R S\nf : F\na : R\nx : S\n⊢ Eq (f (HSMul.hSMul a x)) (HMul.hMul (Norm.norm a) (f x))","decl":"/-- `MulAlgebraNormClass F R S` states that `F` is a type of multiplicative `R`-algebra norms on\nthe ring `S`. You should extend this class when you extend `MulAlgebraNorm`. -/\nclass MulAlgebraNormClass (F : Type*) (R : outParam <| Type*) [SeminormedCommRing R]\n    (S : outParam <| Type*) [Ring S] [Algebra R S] [FunLike F S ℝ] extends MulRingNormClass F S ℝ,\n    SeminormClass F R S : Prop\n\n"}
{"name":"MulAlgebraNorm.mulAlgebraNormClass","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : outParam (Type u_1)\nS : outParam (Type u_2)\ninst✝² : SeminormedCommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\n⊢ MulAlgebraNormClass (MulAlgebraNorm R S) R S","decl":"instance mulAlgebraNormClass : MulAlgebraNormClass (MulAlgebraNorm R S) R S where\n  map_zero f        := f.map_zero'\n  map_add_le_add f  := f.add_le'\n  map_one f         := f.map_one'\n  map_mul f         := f.map_mul'\n  map_neg_eq_map f  := f.neg'\n  eq_zero_of_map_eq_zero f := f.eq_zero_of_map_eq_zero' _\n  map_smul_eq_mul f := f.smul'\n\n"}
{"name":"MulAlgebraNorm.toFun_eq_coe","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : outParam (Type u_1)\nS : outParam (Type u_2)\ninst✝² : SeminormedCommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\np : MulAlgebraNorm R S\n⊢ Eq p.toFun ⇑p","decl":"theorem toFun_eq_coe (p : MulAlgebraNorm R S) : p.toFun = p := rfl\n\n"}
{"name":"MulAlgebraNorm.ext","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : outParam (Type u_1)\nS : outParam (Type u_2)\ninst✝² : SeminormedCommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\np q : MulAlgebraNorm R S\na✝ : ∀ (x : S), Eq (p x) (q x)\n⊢ Eq p q","decl":"@[ext]\ntheorem ext {p q : MulAlgebraNorm R S} : (∀ x, p x = q x) → p = q :=\n  DFunLike.ext p q\n\n"}
{"name":"MulAlgebraNorm.ext_iff","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : outParam (Type u_1)\nS : outParam (Type u_2)\ninst✝² : SeminormedCommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\np q : MulAlgebraNorm R S\n⊢ Iff (Eq p q) (∀ (x : S), Eq (p x) (q x))","decl":"@[ext]\ntheorem ext {p q : MulAlgebraNorm R S} : (∀ x, p x = q x) → p = q :=\n  DFunLike.ext p q\n\n"}
{"name":"MulAlgebraNorm.extends_norm'","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : outParam (Type u_1)\nS : outParam (Type u_2)\ninst✝² : SeminormedCommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\nf : MulAlgebraNorm R S\na : R\n⊢ Eq (f (HSMul.hSMul a 1)) (Norm.norm a)","decl":"/-- A multiplicative `R`-algebra norm extends the norm on `R`. -/\ntheorem extends_norm' (f : MulAlgebraNorm R S) (a : R) : f (a • (1 : S)) = ‖a‖ := by\n  rw [← mul_one ‖a‖, ← f.map_one', ← f.smul', toFun_eq_coe]\n\n"}
{"name":"MulAlgebraNorm.extends_norm","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"R : outParam (Type u_1)\nS : outParam (Type u_2)\ninst✝² : SeminormedCommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\nf : MulAlgebraNorm R S\na : R\n⊢ Eq (f ((algebraMap R S) a)) (Norm.norm a)","decl":"/-- A multiplicative `R`-algebra norm extends the norm on `R`. -/\ntheorem extends_norm (f : MulAlgebraNorm R S) (a : R) : f (algebraMap R S a) = ‖a‖ := by\n  rw [Algebra.algebraMap_eq_smul_one]; exact extends_norm' _ _\n\n"}
{"name":"MulRingNorm.isPowMul","module":"Mathlib.Analysis.Normed.Algebra.Norm","initialProofState":"A : Type u_2\ninst✝ : Ring A\nf : MulRingNorm A\n⊢ IsPowMul ⇑f","decl":"/-- A multiplicative ring norm is power-multiplicative. -/\ntheorem isPowMul {A : Type*} [Ring A] (f : MulRingNorm A) : IsPowMul f := fun x n hn => by\n  cases n\n  · omega\n  · rw [map_pow]\n\n"}
