{"name":"MeasureTheory.lintegral_enorm_eq_lintegral_edist","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Eq (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) (MeasureTheory.lintegral μ fun a => EDist.edist (f a) 0)","decl":"lemma lintegral_enorm_eq_lintegral_edist (f : α → β) :\n    ∫⁻ a, ‖f a‖ₑ ∂μ = ∫⁻ a, edist (f a) 0 ∂μ := by simp only [edist_zero_eq_enorm]\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_eq_lintegral_edist","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Eq (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) (MeasureTheory.lintegral μ fun a => EDist.edist (f a) 0)","decl":"@[deprecated (since := \"2025-01-20\")]\nalias lintegral_nnnorm_eq_lintegral_edist := lintegral_enorm_eq_lintegral_edist\n\n"}
{"name":"MeasureTheory.lintegral_norm_eq_lintegral_edist","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Eq (MeasureTheory.lintegral μ fun a => ENNReal.ofReal (Norm.norm (f a))) (MeasureTheory.lintegral μ fun a => EDist.edist (f a) 0)","decl":"theorem lintegral_norm_eq_lintegral_edist (f : α → β) :\n    ∫⁻ a, ENNReal.ofReal ‖f a‖ ∂μ = ∫⁻ a, edist (f a) 0 ∂μ := by\n  simp only [ofReal_norm_eq_enorm, edist_zero_eq_enorm]\n\n"}
{"name":"MeasureTheory.lintegral_edist_triangle","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g h : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhh : MeasureTheory.AEStronglyMeasurable h μ\n⊢ LE.le (MeasureTheory.lintegral μ fun a => EDist.edist (f a) (g a)) (HAdd.hAdd (MeasureTheory.lintegral μ fun a => EDist.edist (f a) (h a)) (MeasureTheory.lintegral μ fun a => EDist.edist (g a) (h a)))","decl":"theorem lintegral_edist_triangle {f g h : α → β} (hf : AEStronglyMeasurable f μ)\n    (hh : AEStronglyMeasurable h μ) :\n    (∫⁻ a, edist (f a) (g a) ∂μ) ≤ (∫⁻ a, edist (f a) (h a) ∂μ) + ∫⁻ a, edist (g a) (h a) ∂μ := by\n  rw [← lintegral_add_left' (hf.edist hh)]\n  refine lintegral_mono fun a => ?_\n  apply edist_triangle_right\n\n-- Yaël: Why do the following four lemmas even exist?\n"}
{"name":"MeasureTheory.lintegral_enorm_zero","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\n⊢ Eq (MeasureTheory.lintegral μ fun x => ENorm.enorm 0) 0","decl":"theorem lintegral_enorm_zero : ∫⁻ _ : α, ‖(0 : β)‖ₑ ∂μ = 0 := by simp\n\n"}
{"name":"MeasureTheory.lintegral_enorm_add_left","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\ng : α → γ\n⊢ Eq (MeasureTheory.lintegral μ fun a => HAdd.hAdd (ENorm.enorm (f a)) (ENorm.enorm (g a))) (HAdd.hAdd (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (g a)))","decl":"theorem lintegral_enorm_add_left {f : α → β} (hf : AEStronglyMeasurable f μ) (g : α → γ) :\n    ∫⁻ a, ‖f a‖ₑ + ‖g a‖ₑ ∂μ = ∫⁻ a, ‖f a‖ₑ ∂μ + ∫⁻ a, ‖g a‖ₑ ∂μ :=\n  lintegral_add_left' hf.enorm _\n\n"}
{"name":"MeasureTheory.lintegral_enorm_add_right","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\ng : α → γ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq (MeasureTheory.lintegral μ fun a => HAdd.hAdd (ENorm.enorm (f a)) (ENorm.enorm (g a))) (HAdd.hAdd (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (g a)))","decl":"theorem lintegral_enorm_add_right (f : α → β) {g : α → γ} (hg : AEStronglyMeasurable g μ) :\n    ∫⁻ a, ‖f a‖ₑ + ‖g a‖ₑ ∂μ = ∫⁻ a, ‖f a‖ₑ ∂μ + ∫⁻ a, ‖g a‖ₑ ∂μ :=\n  lintegral_add_right' _ hg.enorm\n\n"}
{"name":"MeasureTheory.lintegral_enorm_neg","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Eq (MeasureTheory.lintegral μ fun a => ENorm.enorm (Neg.neg f a)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a))","decl":"theorem lintegral_enorm_neg {f : α → β} : ∫⁻ a, ‖(-f) a‖ₑ ∂μ = ∫⁻ a, ‖f a‖ₑ ∂μ := by simp\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_zero","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\n⊢ Eq (MeasureTheory.lintegral μ fun x => ENorm.enorm 0) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias lintegral_nnnorm_zero := lintegral_enorm_zero\n"}
{"name":"MeasureTheory.lintegral_nnnorm_add_left","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\ng : α → γ\n⊢ Eq (MeasureTheory.lintegral μ fun a => HAdd.hAdd (ENorm.enorm (f a)) (ENorm.enorm (g a))) (HAdd.hAdd (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (g a)))","decl":"@[deprecated (since := \"2025-01-21\")] alias lintegral_nnnorm_add_left := lintegral_enorm_add_left\n"}
{"name":"MeasureTheory.lintegral_nnnorm_add_right","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\ng : α → γ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ Eq (MeasureTheory.lintegral μ fun a => HAdd.hAdd (ENorm.enorm (f a)) (ENorm.enorm (g a))) (HAdd.hAdd (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (g a)))","decl":"@[deprecated (since := \"2025-01-21\")] alias lintegral_nnnorm_add_right := lintegral_enorm_add_right\n"}
{"name":"MeasureTheory.lintegral_nnnorm_neg","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Eq (MeasureTheory.lintegral μ fun a => ENorm.enorm (Neg.neg f a)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a))","decl":"@[deprecated (since := \"2025-01-21\")] alias lintegral_nnnorm_neg := lintegral_enorm_neg\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_def","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nε : Type u_4\ninst✝ : ENorm ε\nx✝ : MeasurableSpace α\nf : α → ε\nμ : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (LT.lt (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) Top.top)","decl":"theorem hasFiniteIntegral_def {_ : MeasurableSpace α} (f : α → ε) (μ : Measure α) :\n    HasFiniteIntegral f μ ↔ (∫⁻ a, ‖f a‖ₑ ∂μ < ∞) :=\n  Iff.rfl\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_iff_enorm","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (LT.lt (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) Top.top)","decl":"theorem hasFiniteIntegral_iff_enorm {f : α → β} : HasFiniteIntegral f μ ↔ ∫⁻ a, ‖f a‖ₑ ∂μ < ∞ := by\n  simp only [HasFiniteIntegral, ofReal_norm_eq_enorm, enorm_eq_nnnorm]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_iff_nnnorm","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (LT.lt (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a)) Top.top)","decl":"@[deprecated (since := \"2025-01-20\")]\nalias hasFiniteIntegral_iff_nnnorm := hasFiniteIntegral_iff_enorm\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_iff_norm","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (LT.lt (MeasureTheory.lintegral μ fun a => ENNReal.ofReal (Norm.norm (f a))) Top.top)","decl":"theorem hasFiniteIntegral_iff_norm (f : α → β) :\n    HasFiniteIntegral f μ ↔ (∫⁻ a, ENNReal.ofReal ‖f a‖ ∂μ) < ∞ := by\n  simp only [hasFiniteIntegral_iff_enorm, ofReal_norm_eq_enorm]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_iff_edist","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (LT.lt (MeasureTheory.lintegral μ fun a => EDist.edist (f a) 0) Top.top)","decl":"theorem hasFiniteIntegral_iff_edist (f : α → β) :\n    HasFiniteIntegral f μ ↔ (∫⁻ a, edist (f a) 0 ∂μ) < ∞ := by\n  simp only [hasFiniteIntegral_iff_norm, edist_dist, dist_zero_right]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_iff_ofReal","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nh : (MeasureTheory.ae μ).EventuallyLE 0 f\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (LT.lt (MeasureTheory.lintegral μ fun a => ENNReal.ofReal (f a)) Top.top)","decl":"theorem hasFiniteIntegral_iff_ofReal {f : α → ℝ} (h : 0 ≤ᵐ[μ] f) :\n    HasFiniteIntegral f μ ↔ (∫⁻ a, ENNReal.ofReal (f a) ∂μ) < ∞ := by\n  rw [hasFiniteIntegral_iff_enorm, lintegral_enorm_of_ae_nonneg h]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_iff_ofNNReal","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → NNReal\n⊢ Iff (MeasureTheory.HasFiniteIntegral (fun x => ↑(f x)) μ) (LT.lt (MeasureTheory.lintegral μ fun a => ↑(f a)) Top.top)","decl":"theorem hasFiniteIntegral_iff_ofNNReal {f : α → ℝ≥0} :\n    HasFiniteIntegral (fun x => (f x : ℝ)) μ ↔ (∫⁻ a, f a ∂μ) < ∞ := by\n  simp [hasFiniteIntegral_iff_norm]\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.mono","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\ng : α → γ\nhg : MeasureTheory.HasFiniteIntegral g μ\nh : Filter.Eventually (fun a => LE.le (Norm.norm (f a)) (Norm.norm (g a))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem HasFiniteIntegral.mono {f : α → β} {g : α → γ} (hg : HasFiniteIntegral g μ)\n    (h : ∀ᵐ a ∂μ, ‖f a‖ ≤ ‖g a‖) : HasFiniteIntegral f μ := by\n  simp only [hasFiniteIntegral_iff_norm] at *\n  calc\n    (∫⁻ a, ENNReal.ofReal ‖f a‖ ∂μ) ≤ ∫⁻ a : α, ENNReal.ofReal ‖g a‖ ∂μ :=\n      lintegral_mono_ae (h.mono fun a h => ofReal_le_ofReal h)\n    _ < ∞ := hg\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.mono'","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\ng : α → Real\nhg : MeasureTheory.HasFiniteIntegral g μ\nh : Filter.Eventually (fun a => LE.le (Norm.norm (f a)) (g a)) (MeasureTheory.ae μ)\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem HasFiniteIntegral.mono' {f : α → β} {g : α → ℝ} (hg : HasFiniteIntegral g μ)\n    (h : ∀ᵐ a ∂μ, ‖f a‖ ≤ g a) : HasFiniteIntegral f μ :=\n  hg.mono <| h.mono fun _x hx => le_trans hx (le_abs_self _)\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.congr'","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\ng : α → γ\nhf : MeasureTheory.HasFiniteIntegral f μ\nh : Filter.Eventually (fun a => Eq (Norm.norm (f a)) (Norm.norm (g a))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.HasFiniteIntegral g μ","decl":"theorem HasFiniteIntegral.congr' {f : α → β} {g : α → γ} (hf : HasFiniteIntegral f μ)\n    (h : ∀ᵐ a ∂μ, ‖f a‖ = ‖g a‖) : HasFiniteIntegral g μ :=\n  hf.mono <| EventuallyEq.le <| EventuallyEq.symm h\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_congr'","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : NormedAddCommGroup γ\nf : α → β\ng : α → γ\nh : Filter.Eventually (fun a => Eq (Norm.norm (f a)) (Norm.norm (g a))) (MeasureTheory.ae μ)\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (MeasureTheory.HasFiniteIntegral g μ)","decl":"theorem hasFiniteIntegral_congr' {f : α → β} {g : α → γ} (h : ∀ᵐ a ∂μ, ‖f a‖ = ‖g a‖) :\n    HasFiniteIntegral f μ ↔ HasFiniteIntegral g μ :=\n  ⟨fun hf => hf.congr' h, fun hg => hg.congr' <| EventuallyEq.symm h⟩\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.congr","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : α → β\nhf : MeasureTheory.HasFiniteIntegral f μ\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ MeasureTheory.HasFiniteIntegral g μ","decl":"theorem HasFiniteIntegral.congr {f g : α → β} (hf : HasFiniteIntegral f μ) (h : f =ᵐ[μ] g) :\n    HasFiniteIntegral g μ :=\n  hf.congr' <| h.fun_comp norm\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_congr","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : α → β\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ Iff (MeasureTheory.HasFiniteIntegral f μ) (MeasureTheory.HasFiniteIntegral g μ)","decl":"theorem hasFiniteIntegral_congr {f g : α → β} (h : f =ᵐ[μ] g) :\n    HasFiniteIntegral f μ ↔ HasFiniteIntegral g μ :=\n  hasFiniteIntegral_congr' <| h.fun_comp norm\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_const_iff","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nc : β\n⊢ Iff (MeasureTheory.HasFiniteIntegral (fun x => c) μ) (Or (Eq c 0) (MeasureTheory.IsFiniteMeasure μ))","decl":"theorem hasFiniteIntegral_const_iff {c : β} :\n    HasFiniteIntegral (fun _ : α => c) μ ↔ c = 0 ∨ IsFiniteMeasure μ := by\n  simp [hasFiniteIntegral_iff_enorm, lintegral_const, lt_top_iff_ne_top, ENNReal.mul_eq_top,\n    or_iff_not_imp_left, isFiniteMeasure_iff]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_const_iff_isFiniteMeasure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nc : β\nhc : Ne c 0\n⊢ Iff (MeasureTheory.HasFiniteIntegral (fun x => c) μ) (MeasureTheory.IsFiniteMeasure μ)","decl":"lemma hasFiniteIntegral_const_iff_isFiniteMeasure {c : β} (hc : c ≠ 0) :\n    HasFiniteIntegral (fun _ ↦ c) μ ↔ IsFiniteMeasure μ := by\n  simp [hasFiniteIntegral_const_iff, hc, isFiniteMeasure_iff]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_const","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nc : β\n⊢ MeasureTheory.HasFiniteIntegral (fun x => c) μ","decl":"theorem hasFiniteIntegral_const [IsFiniteMeasure μ] (c : β) :\n    HasFiniteIntegral (fun _ : α => c) μ :=\n  hasFiniteIntegral_const_iff.2 <| .inr ‹_›\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.of_mem_Icc","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\na b : Real\nX : α → Real\nh : Filter.Eventually (fun ω => Membership.mem (Set.Icc a b) (X ω)) (MeasureTheory.ae μ)\n⊢ MeasureTheory.HasFiniteIntegral X μ","decl":"theorem HasFiniteIntegral.of_mem_Icc [IsFiniteMeasure μ] (a b : ℝ) {X : α → ℝ}\n    (h : ∀ᵐ ω ∂μ, X ω ∈ Set.Icc a b) :\n    HasFiniteIntegral X μ := by\n  apply (hasFiniteIntegral_const (max ‖a‖ ‖b‖)).mono'\n  filter_upwards [h.mono fun ω h ↦ h.1, h.mono fun ω h ↦ h.2] with ω using abs_le_max_abs_abs\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_of_bounded","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : α → β\nC : Real\nhC : Filter.Eventually (fun a => LE.le (Norm.norm (f a)) C) (MeasureTheory.ae μ)\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem hasFiniteIntegral_of_bounded [IsFiniteMeasure μ] {f : α → β} {C : ℝ}\n    (hC : ∀ᵐ a ∂μ, ‖f a‖ ≤ C) : HasFiniteIntegral f μ :=\n  (hasFiniteIntegral_const C).mono' hC\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.of_finite","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup β\ninst✝¹ : Finite α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : α → β\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem HasFiniteIntegral.of_finite [Finite α] [IsFiniteMeasure μ] {f : α → β} :\n    HasFiniteIntegral f μ :=\n  let ⟨_⟩ := nonempty_fintype α\n  hasFiniteIntegral_of_bounded <| ae_of_all μ <| norm_le_pi_norm f\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.mono_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nh : MeasureTheory.HasFiniteIntegral f ν\nhμ : LE.le μ ν\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem HasFiniteIntegral.mono_measure {f : α → β} (h : HasFiniteIntegral f ν) (hμ : μ ≤ ν) :\n    HasFiniteIntegral f μ :=\n  lt_of_le_of_lt (lintegral_mono' hμ le_rfl) h\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.add_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhμ : MeasureTheory.HasFiniteIntegral f μ\nhν : MeasureTheory.HasFiniteIntegral f ν\n⊢ MeasureTheory.HasFiniteIntegral f (HAdd.hAdd μ ν)","decl":"theorem HasFiniteIntegral.add_measure {f : α → β} (hμ : HasFiniteIntegral f μ)\n    (hν : HasFiniteIntegral f ν) : HasFiniteIntegral f (μ + ν) := by\n  simp only [HasFiniteIntegral, lintegral_add_measure] at *\n  exact add_lt_top.2 ⟨hμ, hν⟩\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.left_of_add_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nh : MeasureTheory.HasFiniteIntegral f (HAdd.hAdd μ ν)\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem HasFiniteIntegral.left_of_add_measure {f : α → β} (h : HasFiniteIntegral f (μ + ν)) :\n    HasFiniteIntegral f μ :=\n  h.mono_measure <| Measure.le_add_right <| le_rfl\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.right_of_add_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nh : MeasureTheory.HasFiniteIntegral f (HAdd.hAdd μ ν)\n⊢ MeasureTheory.HasFiniteIntegral f ν","decl":"theorem HasFiniteIntegral.right_of_add_measure {f : α → β} (h : HasFiniteIntegral f (μ + ν)) :\n    HasFiniteIntegral f ν :=\n  h.mono_measure <| Measure.le_add_left <| le_rfl\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_add_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral f (HAdd.hAdd μ ν)) (And (MeasureTheory.HasFiniteIntegral f μ) (MeasureTheory.HasFiniteIntegral f ν))","decl":"@[simp]\ntheorem hasFiniteIntegral_add_measure {f : α → β} :\n    HasFiniteIntegral f (μ + ν) ↔ HasFiniteIntegral f μ ∧ HasFiniteIntegral f ν :=\n  ⟨fun h => ⟨h.left_of_add_measure, h.right_of_add_measure⟩, fun h => h.1.add_measure h.2⟩\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.smul_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nh : MeasureTheory.HasFiniteIntegral f μ\nc : ENNReal\nhc : Ne c Top.top\n⊢ MeasureTheory.HasFiniteIntegral f (HSMul.hSMul c μ)","decl":"theorem HasFiniteIntegral.smul_measure {f : α → β} (h : HasFiniteIntegral f μ) {c : ℝ≥0∞}\n    (hc : c ≠ ∞) : HasFiniteIntegral f (c • μ) := by\n  simp only [HasFiniteIntegral, lintegral_smul_measure] at *\n  exact mul_lt_top hc.lt_top h\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_zero_measure","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : NormedAddCommGroup β\nm : MeasurableSpace α\nf : α → β\n⊢ MeasureTheory.HasFiniteIntegral f 0","decl":"@[simp]\ntheorem hasFiniteIntegral_zero_measure {m : MeasurableSpace α} (f : α → β) :\n    HasFiniteIntegral f (0 : Measure α) := by\n  simp only [HasFiniteIntegral, lintegral_zero_measure, zero_lt_top]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_zero","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\n⊢ MeasureTheory.HasFiniteIntegral (fun x => 0) μ","decl":"@[simp]\ntheorem hasFiniteIntegral_zero : HasFiniteIntegral (fun _ : α => (0 : β)) μ := by\n  simp [hasFiniteIntegral_iff_enorm]\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.neg","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhfi : MeasureTheory.HasFiniteIntegral f μ\n⊢ MeasureTheory.HasFiniteIntegral (Neg.neg f) μ","decl":"theorem HasFiniteIntegral.neg {f : α → β} (hfi : HasFiniteIntegral f μ) :\n    HasFiniteIntegral (-f) μ := by simpa [hasFiniteIntegral_iff_enorm] using hfi\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_neg_iff","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral (Neg.neg f) μ) (MeasureTheory.HasFiniteIntegral f μ)","decl":"@[simp]\ntheorem hasFiniteIntegral_neg_iff {f : α → β} : HasFiniteIntegral (-f) μ ↔ HasFiniteIntegral f μ :=\n  ⟨fun h => neg_neg f ▸ h.neg, HasFiniteIntegral.neg⟩\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.norm","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhfi : MeasureTheory.HasFiniteIntegral f μ\n⊢ MeasureTheory.HasFiniteIntegral (fun a => Norm.norm (f a)) μ","decl":"theorem HasFiniteIntegral.norm {f : α → β} (hfi : HasFiniteIntegral f μ) :\n    HasFiniteIntegral (fun a => ‖f a‖) μ := by simpa [hasFiniteIntegral_iff_enorm] using hfi\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_norm_iff","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral (fun a => Norm.norm (f a)) μ) (MeasureTheory.HasFiniteIntegral f μ)","decl":"theorem hasFiniteIntegral_norm_iff (f : α → β) :\n    HasFiniteIntegral (fun a => ‖f a‖) μ ↔ HasFiniteIntegral f μ :=\n  hasFiniteIntegral_congr' <| Eventually.of_forall fun x => norm_norm (f x)\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_toReal_of_lintegral_ne_top","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → ENNReal\nhf : Ne (MeasureTheory.lintegral μ fun x => f x) Top.top\n⊢ MeasureTheory.HasFiniteIntegral (fun x => (f x).toReal) μ","decl":"theorem hasFiniteIntegral_toReal_of_lintegral_ne_top {f : α → ℝ≥0∞} (hf : ∫⁻ x, f x ∂μ ≠ ∞) :\n    HasFiniteIntegral (fun x ↦ (f x).toReal) μ := by\n  have h x : ‖(f x).toReal‖ₑ = .ofReal (f x).toReal := by\n    rw [Real.enorm_of_nonneg ENNReal.toReal_nonneg]\n  simp_rw [hasFiniteIntegral_iff_enorm, h]\n  refine lt_of_le_of_lt (lintegral_mono fun x => ?_) (lt_top_iff_ne_top.2 hf)\n  by_cases hfx : f x = ∞\n  · simp [hfx]\n  · lift f x to ℝ≥0 using hfx with fx h\n    simp [← h, ← NNReal.coe_le_coe]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_toReal_iff","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → ENNReal\nhf : Filter.Eventually (fun x => Ne (f x) Top.top) (MeasureTheory.ae μ)\n⊢ Iff (MeasureTheory.HasFiniteIntegral (fun x => (f x).toReal) μ) (Ne (MeasureTheory.lintegral μ fun x => f x) Top.top)","decl":"lemma hasFiniteIntegral_toReal_iff {f : α → ℝ≥0∞} (hf : ∀ᵐ x ∂μ, f x ≠ ∞) :\n    HasFiniteIntegral (fun x ↦ (f x).toReal) μ ↔ ∫⁻ x, f x ∂μ ≠ ∞ := by\n  have : ∀ᵐ x ∂μ, .ofReal (f x).toReal = f x := by filter_upwards [hf] with x hx; simp [hx]\n  simp [hasFiniteIntegral_iff_enorm, Real.enorm_of_nonneg ENNReal.toReal_nonneg,\n    lintegral_congr_ae this, lt_top_iff_ne_top]\n\n"}
{"name":"MeasureTheory.isFiniteMeasure_withDensity_ofReal","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhfi : MeasureTheory.HasFiniteIntegral f μ\n⊢ MeasureTheory.IsFiniteMeasure (μ.withDensity fun x => ENNReal.ofReal (f x))","decl":"theorem isFiniteMeasure_withDensity_ofReal {f : α → ℝ} (hfi : HasFiniteIntegral f μ) :\n    IsFiniteMeasure (μ.withDensity fun x => ENNReal.ofReal <| f x) := by\n  refine isFiniteMeasure_withDensity ((lintegral_mono fun x => ?_).trans_lt hfi).ne\n  exact Real.ofReal_le_enorm (f x)\n\n"}
{"name":"MeasureTheory.all_ae_ofReal_F_le_bound","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nF : Nat → α → β\nbound : α → Real\nh : ∀ (n : Nat), Filter.Eventually (fun a => LE.le (Norm.norm (F n a)) (bound a)) (MeasureTheory.ae μ)\nn : Nat\n⊢ Filter.Eventually (fun a => LE.le (ENNReal.ofReal (Norm.norm (F n a))) (ENNReal.ofReal (bound a))) (MeasureTheory.ae μ)","decl":"theorem all_ae_ofReal_F_le_bound (h : ∀ n, ∀ᵐ a ∂μ, ‖F n a‖ ≤ bound a) :\n    ∀ n, ∀ᵐ a ∂μ, ENNReal.ofReal ‖F n a‖ ≤ ENNReal.ofReal (bound a) := fun n =>\n  (h n).mono fun _ h => ENNReal.ofReal_le_ofReal h\n\n"}
{"name":"MeasureTheory.all_ae_tendsto_ofReal_norm","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nF : Nat → α → β\nf : α → β\nh : Filter.Eventually (fun a => Filter.Tendsto (fun n => F n a) Filter.atTop (nhds (f a))) (MeasureTheory.ae μ)\n⊢ Filter.Eventually (fun a => Filter.Tendsto (fun n => ENNReal.ofReal (Norm.norm (F n a))) Filter.atTop (nhds (ENNReal.ofReal (Norm.norm (f a))))) (MeasureTheory.ae μ)","decl":"theorem all_ae_tendsto_ofReal_norm (h : ∀ᵐ a ∂μ, Tendsto (fun n => F n a) atTop <| 𝓝 <| f a) :\n    ∀ᵐ a ∂μ, Tendsto (fun n => ENNReal.ofReal ‖F n a‖) atTop <| 𝓝 <| ENNReal.ofReal ‖f a‖ :=\n  h.mono fun _ h => tendsto_ofReal <| Tendsto.comp (Continuous.tendsto continuous_norm _) h\n\n"}
{"name":"MeasureTheory.all_ae_ofReal_f_le_bound","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nF : Nat → α → β\nf : α → β\nbound : α → Real\nh_bound : ∀ (n : Nat), Filter.Eventually (fun a => LE.le (Norm.norm (F n a)) (bound a)) (MeasureTheory.ae μ)\nh_lim : Filter.Eventually (fun a => Filter.Tendsto (fun n => F n a) Filter.atTop (nhds (f a))) (MeasureTheory.ae μ)\n⊢ Filter.Eventually (fun a => LE.le (ENNReal.ofReal (Norm.norm (f a))) (ENNReal.ofReal (bound a))) (MeasureTheory.ae μ)","decl":"theorem all_ae_ofReal_f_le_bound (h_bound : ∀ n, ∀ᵐ a ∂μ, ‖F n a‖ ≤ bound a)\n    (h_lim : ∀ᵐ a ∂μ, Tendsto (fun n => F n a) atTop (𝓝 (f a))) :\n    ∀ᵐ a ∂μ, ENNReal.ofReal ‖f a‖ ≤ ENNReal.ofReal (bound a) := by\n  have F_le_bound := all_ae_ofReal_F_le_bound h_bound\n  rw [← ae_all_iff] at F_le_bound\n  apply F_le_bound.mp ((all_ae_tendsto_ofReal_norm h_lim).mono _)\n  intro a tendsto_norm F_le_bound\n  exact le_of_tendsto' tendsto_norm F_le_bound\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_of_dominated_convergence","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nF : Nat → α → β\nf : α → β\nbound : α → Real\nbound_hasFiniteIntegral : MeasureTheory.HasFiniteIntegral bound μ\nh_bound : ∀ (n : Nat), Filter.Eventually (fun a => LE.le (Norm.norm (F n a)) (bound a)) (MeasureTheory.ae μ)\nh_lim : Filter.Eventually (fun a => Filter.Tendsto (fun n => F n a) Filter.atTop (nhds (f a))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.HasFiniteIntegral f μ","decl":"theorem hasFiniteIntegral_of_dominated_convergence {F : ℕ → α → β} {f : α → β} {bound : α → ℝ}\n    (bound_hasFiniteIntegral : HasFiniteIntegral bound μ)\n    (h_bound : ∀ n, ∀ᵐ a ∂μ, ‖F n a‖ ≤ bound a)\n    (h_lim : ∀ᵐ a ∂μ, Tendsto (fun n => F n a) atTop (𝓝 (f a))) : HasFiniteIntegral f μ := by\n  /- `‖F n a‖ ≤ bound a` and `‖F n a‖ --> ‖f a‖` implies `‖f a‖ ≤ bound a`,\n    and so `∫ ‖f‖ ≤ ∫ bound < ∞` since `bound` is has_finite_integral -/\n  rw [hasFiniteIntegral_iff_norm]\n  calc\n    (∫⁻ a, ENNReal.ofReal ‖f a‖ ∂μ) ≤ ∫⁻ a, ENNReal.ofReal (bound a) ∂μ :=\n      lintegral_mono_ae <| all_ae_ofReal_f_le_bound h_bound h_lim\n    _ < ∞ := by\n      rw [← hasFiniteIntegral_iff_ofReal]\n      · exact bound_hasFiniteIntegral\n      exact (h_bound 0).mono fun a h => le_trans (norm_nonneg _) h\n\n"}
{"name":"MeasureTheory.tendsto_lintegral_norm_of_dominated_convergence","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nF : Nat → α → β\nf : α → β\nbound : α → Real\nF_measurable : ∀ (n : Nat), MeasureTheory.AEStronglyMeasurable (F n) μ\nbound_hasFiniteIntegral : MeasureTheory.HasFiniteIntegral bound μ\nh_bound : ∀ (n : Nat), Filter.Eventually (fun a => LE.le (Norm.norm (F n a)) (bound a)) (MeasureTheory.ae μ)\nh_lim : Filter.Eventually (fun a => Filter.Tendsto (fun n => F n a) Filter.atTop (nhds (f a))) (MeasureTheory.ae μ)\n⊢ Filter.Tendsto (fun n => MeasureTheory.lintegral μ fun a => ENNReal.ofReal (Norm.norm (HSub.hSub (F n a) (f a)))) Filter.atTop (nhds 0)","decl":"theorem tendsto_lintegral_norm_of_dominated_convergence {F : ℕ → α → β} {f : α → β} {bound : α → ℝ}\n    (F_measurable : ∀ n, AEStronglyMeasurable (F n) μ)\n    (bound_hasFiniteIntegral : HasFiniteIntegral bound μ)\n    (h_bound : ∀ n, ∀ᵐ a ∂μ, ‖F n a‖ ≤ bound a)\n    (h_lim : ∀ᵐ a ∂μ, Tendsto (fun n => F n a) atTop (𝓝 (f a))) :\n    Tendsto (fun n => ∫⁻ a, ENNReal.ofReal ‖F n a - f a‖ ∂μ) atTop (𝓝 0) := by\n  have f_measurable : AEStronglyMeasurable f μ :=\n    aestronglyMeasurable_of_tendsto_ae _ F_measurable h_lim\n  let b a := 2 * ENNReal.ofReal (bound a)\n  /- `‖F n a‖ ≤ bound a` and `F n a --> f a` implies `‖f a‖ ≤ bound a`, and thus by the\n    triangle inequality, have `‖F n a - f a‖ ≤ 2 * (bound a)`. -/\n  have hb : ∀ n, ∀ᵐ a ∂μ, ENNReal.ofReal ‖F n a - f a‖ ≤ b a := by\n    intro n\n    filter_upwards [all_ae_ofReal_F_le_bound h_bound n,\n      all_ae_ofReal_f_le_bound h_bound h_lim] with a h₁ h₂\n    calc\n      ENNReal.ofReal ‖F n a - f a‖ ≤ ENNReal.ofReal ‖F n a‖ + ENNReal.ofReal ‖f a‖ := by\n        rw [← ENNReal.ofReal_add]\n        · apply ofReal_le_ofReal\n          apply norm_sub_le\n        · exact norm_nonneg _\n        · exact norm_nonneg _\n      _ ≤ ENNReal.ofReal (bound a) + ENNReal.ofReal (bound a) := add_le_add h₁ h₂\n      _ = b a := by rw [← two_mul]\n  -- On the other hand, `F n a --> f a` implies that `‖F n a - f a‖ --> 0`\n  have h : ∀ᵐ a ∂μ, Tendsto (fun n => ENNReal.ofReal ‖F n a - f a‖) atTop (𝓝 0) := by\n    rw [← ENNReal.ofReal_zero]\n    refine h_lim.mono fun a h => (continuous_ofReal.tendsto _).comp ?_\n    rwa [← tendsto_iff_norm_sub_tendsto_zero]\n  /- Therefore, by the dominated convergence theorem for nonnegative integration, have\n    ` ∫ ‖f a - F n a‖ --> 0 ` -/\n  suffices Tendsto (fun n => ∫⁻ a, ENNReal.ofReal ‖F n a - f a‖ ∂μ) atTop (𝓝 (∫⁻ _ : α, 0 ∂μ)) by\n    rwa [lintegral_zero] at this\n  -- Using the dominated convergence theorem.\n  refine tendsto_lintegral_of_dominated_convergence' _ ?_ hb ?_ ?_\n  -- Show `fun a => ‖f a - F n a‖` is almost everywhere measurable for all `n`\n  · exact fun n =>\n      measurable_ofReal.comp_aemeasurable ((F_measurable n).sub f_measurable).norm.aemeasurable\n  -- Show `2 * bound` `HasFiniteIntegral`\n  · rw [hasFiniteIntegral_iff_ofReal] at bound_hasFiniteIntegral\n    · calc\n        ∫⁻ a, b a ∂μ = 2 * ∫⁻ a, ENNReal.ofReal (bound a) ∂μ := by\n          rw [lintegral_const_mul']\n          exact coe_ne_top\n        _ ≠ ∞ := mul_ne_top coe_ne_top bound_hasFiniteIntegral.ne\n    filter_upwards [h_bound 0] with _ h using le_trans (norm_nonneg _) h\n  -- Show `‖f a - F n a‖ --> 0`\n  · exact h\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.max_zero","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf : MeasureTheory.HasFiniteIntegral f μ\n⊢ MeasureTheory.HasFiniteIntegral (fun a => Max.max (f a) 0) μ","decl":"theorem HasFiniteIntegral.max_zero {f : α → ℝ} (hf : HasFiniteIntegral f μ) :\n    HasFiniteIntegral (fun a => max (f a) 0) μ :=\n  hf.mono <| Eventually.of_forall fun x => by simp [abs_le, le_abs_self]\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.min_zero","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf : MeasureTheory.HasFiniteIntegral f μ\n⊢ MeasureTheory.HasFiniteIntegral (fun a => Min.min (f a) 0) μ","decl":"theorem HasFiniteIntegral.min_zero {f : α → ℝ} (hf : HasFiniteIntegral f μ) :\n    HasFiniteIntegral (fun a => min (f a) 0) μ :=\n  hf.mono <| Eventually.of_forall fun x => by simpa [abs_le] using neg_abs_le _\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.smul","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup β\n𝕜 : Type u_5\ninst✝² : NormedAddCommGroup 𝕜\ninst✝¹ : SMulZeroClass 𝕜 β\ninst✝ : BoundedSMul 𝕜 β\nc : 𝕜\nf : α → β\na✝ : MeasureTheory.HasFiniteIntegral f μ\n⊢ MeasureTheory.HasFiniteIntegral (HSMul.hSMul c f) μ","decl":"theorem HasFiniteIntegral.smul [NormedAddCommGroup 𝕜] [SMulZeroClass 𝕜 β] [BoundedSMul 𝕜 β] (c : 𝕜)\n    {f : α → β} : HasFiniteIntegral f μ → HasFiniteIntegral (c • f) μ := by\n  simp only [HasFiniteIntegral]; intro hfi\n  calc\n    ∫⁻ a : α, ‖c • f a‖ₑ ∂μ ≤ ∫⁻ a : α, ‖c‖ₑ * ‖f a‖ₑ ∂μ := lintegral_mono fun i ↦ enorm_smul_le\n    _ < ∞ := by\n      rw [lintegral_const_mul']\n      exacts [mul_lt_top coe_lt_top hfi, coe_ne_top]\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_smul_iff","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup β\n𝕜 : Type u_5\ninst✝² : NormedRing 𝕜\ninst✝¹ : MulActionWithZero 𝕜 β\ninst✝ : BoundedSMul 𝕜 β\nc : 𝕜\nhc : IsUnit c\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral (HSMul.hSMul c f) μ) (MeasureTheory.HasFiniteIntegral f μ)","decl":"theorem hasFiniteIntegral_smul_iff [NormedRing 𝕜] [MulActionWithZero 𝕜 β] [BoundedSMul 𝕜 β] {c : 𝕜}\n    (hc : IsUnit c) (f : α → β) : HasFiniteIntegral (c • f) μ ↔ HasFiniteIntegral f μ := by\n  obtain ⟨c, rfl⟩ := hc\n  constructor\n  · intro h\n    simpa only [smul_smul, Units.inv_mul, one_smul] using h.smul ((c⁻¹ : 𝕜ˣ) : 𝕜)\n  exact HasFiniteIntegral.smul _\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.const_mul","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_5\ninst✝ : NormedRing 𝕜\nf : α → 𝕜\nh : MeasureTheory.HasFiniteIntegral f μ\nc : 𝕜\n⊢ MeasureTheory.HasFiniteIntegral (fun x => HMul.hMul c (f x)) μ","decl":"theorem HasFiniteIntegral.const_mul [NormedRing 𝕜] {f : α → 𝕜} (h : HasFiniteIntegral f μ) (c : 𝕜) :\n    HasFiniteIntegral (fun x => c * f x) μ :=\n  h.smul c\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.mul_const","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_5\ninst✝ : NormedRing 𝕜\nf : α → 𝕜\nh : MeasureTheory.HasFiniteIntegral f μ\nc : 𝕜\n⊢ MeasureTheory.HasFiniteIntegral (fun x => HMul.hMul (f x) c) μ","decl":"theorem HasFiniteIntegral.mul_const [NormedRing 𝕜] {f : α → 𝕜} (h : HasFiniteIntegral f μ) (c : 𝕜) :\n    HasFiniteIntegral (fun x => f x * c) μ :=\n  h.smul (MulOpposite.op c)\n\n"}
{"name":"MeasureTheory.hasFiniteIntegral_count_iff","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup β\ninst✝ : MeasurableSingletonClass α\nf : α → β\n⊢ Iff (MeasureTheory.HasFiniteIntegral f MeasureTheory.Measure.count) (Summable fun x => Norm.norm (f x))","decl":"/-- A function has finite integral for the counting measure iff its norm is summable. -/\nlemma hasFiniteIntegral_count_iff :\n    HasFiniteIntegral f Measure.count ↔ Summable (‖f ·‖) := by\n  simp only [hasFiniteIntegral_iff_enorm, enorm, lintegral_count, lt_top_iff_ne_top,\n    tsum_coe_ne_top_iff_summable, ← summable_coe, coe_nnnorm]\n\n"}
{"name":"MeasureTheory.HasFiniteIntegral.restrict","module":"Mathlib.MeasureTheory.Function.L1Space.HasFiniteIntegral","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_6\ninst✝ : NormedAddCommGroup E\nf : α → E\nh : MeasureTheory.HasFiniteIntegral f μ\ns : Set α\n⊢ MeasureTheory.HasFiniteIntegral f (μ.restrict s)","decl":"lemma HasFiniteIntegral.restrict (h : HasFiniteIntegral f μ) {s : Set α} :\n    HasFiniteIntegral f (μ.restrict s) := by\n  refine lt_of_le_of_lt ?_ h\n  simpa [Measure.restrict_univ] using lintegral_mono_set (subset_univ s)\n\n"}
