{"name":"OrderIso.range_eq","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\n⊢ Eq (Set.range ⇑e) Set.univ","decl":"theorem range_eq (e : α ≃o β) : Set.range e = Set.univ :=\n  e.surjective.range_eq\n\n"}
{"name":"OrderIso.symm_image_image","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set α\n⊢ Eq (Set.image (⇑e.symm) (Set.image (⇑e) s)) s","decl":"@[simp]\ntheorem symm_image_image (e : α ≃o β) (s : Set α) : e.symm '' (e '' s) = s :=\n  e.toEquiv.symm_image_image s\n\n"}
{"name":"OrderIso.image_symm_image","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set β\n⊢ Eq (Set.image (⇑e) (Set.image (⇑e.symm) s)) s","decl":"@[simp]\ntheorem image_symm_image (e : α ≃o β) (s : Set β) : e '' (e.symm '' s) = s :=\n  e.toEquiv.image_symm_image s\n\n"}
{"name":"OrderIso.image_eq_preimage","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set α\n⊢ Eq (Set.image (⇑e) s) (Set.preimage (⇑e.symm) s)","decl":"theorem image_eq_preimage (e : α ≃o β) (s : Set α) : e '' s = e.symm ⁻¹' s :=\n  e.toEquiv.image_eq_preimage s\n\n"}
{"name":"OrderIso.preimage_symm_preimage","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set α\n⊢ Eq (Set.preimage (⇑e) (Set.preimage (⇑e.symm) s)) s","decl":"@[simp]\ntheorem preimage_symm_preimage (e : α ≃o β) (s : Set α) : e ⁻¹' (e.symm ⁻¹' s) = s :=\n  e.toEquiv.preimage_symm_preimage s\n\n"}
{"name":"OrderIso.symm_preimage_preimage","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set β\n⊢ Eq (Set.preimage (⇑e.symm) (Set.preimage (⇑e) s)) s","decl":"@[simp]\ntheorem symm_preimage_preimage (e : α ≃o β) (s : Set β) : e.symm ⁻¹' (e ⁻¹' s) = s :=\n  e.toEquiv.symm_preimage_preimage s\n\n"}
{"name":"OrderIso.image_preimage","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set β\n⊢ Eq (Set.image (⇑e) (Set.preimage (⇑e) s)) s","decl":"@[simp]\ntheorem image_preimage (e : α ≃o β) (s : Set β) : e '' (e ⁻¹' s) = s :=\n  e.toEquiv.image_preimage s\n\n"}
{"name":"OrderIso.preimage_image","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\ne : OrderIso α β\ns : Set α\n⊢ Eq (Set.preimage (⇑e) (Set.image (⇑e) s)) s","decl":"@[simp]\ntheorem preimage_image (e : α ≃o β) (s : Set α) : e ⁻¹' (e '' s) = s :=\n  e.toEquiv.preimage_image s\n\n"}
{"name":"OrderEmbedding.orderIso_apply","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LE α\ninst✝ : LE β\nf : OrderEmbedding α β\na : α\n⊢ Eq (OrderEmbedding.orderIso a) ⟨f a, ⋯⟩","decl":"/-- We can regard an order embedding as an order isomorphism to its range. -/\n@[simps! apply]\nnoncomputable def OrderEmbedding.orderIso [LE α] [LE β] {f : α ↪o β} :\n    α ≃o Set.range f :=\n  { Equiv.ofInjective _ f.injective with\n    map_rel_iff' := f.map_rel_iff }\n\n"}
{"name":"StrictMono.orderIso_apply","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : Preorder β\nf : α → β\nh_mono : StrictMono f\na : α\n⊢ Eq ((StrictMono.orderIso f h_mono) a) ⟨f a, ⋯⟩","decl":"/-- A strictly monotone function from a linear order is an order isomorphism between its domain and\nits range. -/\n@[simps! apply]\nprotected noncomputable def orderIso :\n    α ≃o Set.range f where\n  toEquiv := Equiv.ofInjective f h_mono.injective\n  map_rel_iff' := h_mono.le_iff_le\n\n"}
{"name":"StrictMono.coe_orderIsoOfSurjective","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : Preorder β\nf : α → β\nh_mono : StrictMono f\nh_surj : Function.Surjective f\n⊢ Eq (⇑(StrictMono.orderIsoOfSurjective f h_mono h_surj)) f","decl":"@[simp]\ntheorem coe_orderIsoOfSurjective : (orderIsoOfSurjective f h_mono h_surj : α → β) = f :=\n  rfl\n\n"}
{"name":"StrictMono.orderIsoOfSurjective_symm_apply_self","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : Preorder β\nf : α → β\nh_mono : StrictMono f\nh_surj : Function.Surjective f\na : α\n⊢ Eq ((StrictMono.orderIsoOfSurjective f h_mono h_surj).symm (f a)) a","decl":"@[simp]\ntheorem orderIsoOfSurjective_symm_apply_self (a : α) :\n    (orderIsoOfSurjective f h_mono h_surj).symm (f a) = a :=\n  (orderIsoOfSurjective f h_mono h_surj).symm_apply_apply _\n\n"}
{"name":"StrictMono.orderIsoOfSurjective_self_symm_apply","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : Preorder β\nf : α → β\nh_mono : StrictMono f\nh_surj : Function.Surjective f\nb : β\n⊢ Eq (f ((StrictMono.orderIsoOfSurjective f h_mono h_surj).symm b)) b","decl":"theorem orderIsoOfSurjective_self_symm_apply (b : β) :\n    f ((orderIsoOfSurjective f h_mono h_surj).symm b) = b :=\n  (orderIsoOfSurjective f h_mono h_surj).apply_symm_apply _\n\n"}
{"name":"OrderEmbedding.range_inj","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : WellFoundedLT α\ninst✝ : Preorder β\nf g : OrderEmbedding α β\n⊢ Iff (Eq (Set.range ⇑f) (Set.range ⇑g)) (Eq f g)","decl":"/-- Two order embeddings on a well-order are equal provided that their ranges are equal. -/\nlemma OrderEmbedding.range_inj [LinearOrder α] [WellFoundedLT α] [Preorder β] {f g : α ↪o β} :\n    Set.range f = Set.range g ↔ f = g := by\n  rw [f.strictMono.range_inj g.strictMono, DFunLike.coe_fn_eq]\n\n"}
{"name":"OrderIso.subsingleton_of_wellFoundedLT","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : WellFoundedLT α\ninst✝ : Preorder β\n⊢ Subsingleton (OrderIso α β)","decl":"instance subsingleton_of_wellFoundedLT [LinearOrder α] [WellFoundedLT α] [Preorder β] :\n    Subsingleton (α ≃o β) := by\n  refine ⟨fun f g ↦ ?_⟩\n  rw [OrderIso.ext_iff, ← coe_toOrderEmbedding, ← coe_toOrderEmbedding, DFunLike.coe_fn_eq,\n    ← OrderEmbedding.range_inj, coe_toOrderEmbedding, coe_toOrderEmbedding, range_eq, range_eq]\n\n"}
{"name":"OrderIso.subsingleton_of_wellFoundedLT'","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : LinearOrder β\ninst✝¹ : WellFoundedLT β\ninst✝ : Preorder α\n⊢ Subsingleton (OrderIso α β)","decl":"instance subsingleton_of_wellFoundedLT' [LinearOrder β] [WellFoundedLT β] [Preorder α] :\n    Subsingleton (α ≃o β) := by\n  refine ⟨fun f g ↦ ?_⟩\n  change f.symm.symm = g.symm.symm\n  rw [Subsingleton.elim f.symm]\n\n"}
{"name":"OrderIso.subsingleton_of_wellFoundedGT","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : WellFoundedGT α\ninst✝ : Preorder β\n⊢ Subsingleton (OrderIso α β)","decl":"instance subsingleton_of_wellFoundedGT [LinearOrder α] [WellFoundedGT α] [Preorder β] :\n    Subsingleton (α ≃o β) := by\n  refine ⟨fun f g ↦ ?_⟩\n  change f.dual.dual = g.dual.dual\n  rw [Subsingleton.elim f.dual]\n\n"}
{"name":"OrderIso.subsingleton_of_wellFoundedGT'","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : LinearOrder β\ninst✝¹ : WellFoundedGT β\ninst✝ : Preorder α\n⊢ Subsingleton (OrderIso α β)","decl":"instance subsingleton_of_wellFoundedGT' [LinearOrder β] [WellFoundedGT β] [Preorder α] :\n    Subsingleton (α ≃o β) := by\n  refine ⟨fun f g ↦ ?_⟩\n  change f.dual.dual = g.dual.dual\n  rw [Subsingleton.elim f.dual]\n\n"}
{"name":"OrderIso.compl_symm_apply","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\ninst✝ : BooleanAlgebra α\na✝ : OrderDual α\n⊢ Eq ((RelIso.symm (OrderIso.compl α)) a✝) (HasCompl.compl (OrderDual.ofDual a✝))","decl":"/-- Taking complements as an order isomorphism to the order dual. -/\n@[simps!]\ndef OrderIso.compl : α ≃o αᵒᵈ where\n  toFun := OrderDual.toDual ∘ HasCompl.compl\n  invFun := HasCompl.compl ∘ OrderDual.ofDual\n  left_inv := compl_compl\n  right_inv := compl_compl (α := αᵒᵈ)\n  map_rel_iff' := compl_le_compl_iff_le\n\n"}
{"name":"OrderIso.compl_apply","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\ninst✝ : BooleanAlgebra α\na✝ : α\n⊢ Eq ((OrderIso.compl α) a✝) (HasCompl.compl (OrderDual.toDual a✝))","decl":"/-- Taking complements as an order isomorphism to the order dual. -/\n@[simps!]\ndef OrderIso.compl : α ≃o αᵒᵈ where\n  toFun := OrderDual.toDual ∘ HasCompl.compl\n  invFun := HasCompl.compl ∘ OrderDual.ofDual\n  left_inv := compl_compl\n  right_inv := compl_compl (α := αᵒᵈ)\n  map_rel_iff' := compl_le_compl_iff_le\n\n"}
{"name":"compl_strictAnti","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\ninst✝ : BooleanAlgebra α\n⊢ StrictAnti HasCompl.compl","decl":"theorem compl_strictAnti : StrictAnti (compl : α → α) :=\n  (OrderIso.compl α).strictMono\n\n"}
{"name":"compl_antitone","module":"Mathlib.Order.Hom.Set","initialProofState":"α : Type u_1\ninst✝ : BooleanAlgebra α\n⊢ Antitone HasCompl.compl","decl":"theorem compl_antitone : Antitone (compl : α → α) :=\n  (OrderIso.compl α).monotone\n\n"}
