{"name":"RCLike.norm_coe_norm","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝¹ : RCLike 𝕜\nE : Type u_2\ninst✝ : NormedAddCommGroup E\nz : E\n⊢ Eq (Norm.norm ↑(Norm.norm z)) (Norm.norm z)","decl":"theorem RCLike.norm_coe_norm {z : E} : ‖(‖z‖ : 𝕜)‖ = ‖z‖ := by simp\n\n"}
{"name":"norm_smul_inv_norm","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝² : RCLike 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\nhx : Ne x 0\n⊢ Eq (Norm.norm (HSMul.hSMul (Inv.inv ↑(Norm.norm x)) x)) 1","decl":"/-- Lemma to normalize a vector in a normed space `E` over either `ℂ` or `ℝ` to unit length. -/\n@[simp]\ntheorem norm_smul_inv_norm {x : E} (hx : x ≠ 0) : ‖(‖x‖⁻¹ : 𝕜) • x‖ = 1 := by\n  have : ‖x‖ ≠ 0 := by simp [hx]\n  field_simp [norm_smul]\n\n"}
{"name":"norm_smul_inv_norm'","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝² : RCLike 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nr : Real\nr_nonneg : LE.le 0 r\nx : E\nhx : Ne x 0\n⊢ Eq (Norm.norm (HSMul.hSMul (HMul.hMul (↑r) (Inv.inv ↑(Norm.norm x))) x)) r","decl":"/-- Lemma to normalize a vector in a normed space `E` over either `ℂ` or `ℝ` to length `r`. -/\ntheorem norm_smul_inv_norm' {r : ℝ} (r_nonneg : 0 ≤ r) {x : E} (hx : x ≠ 0) :\n    ‖((r : 𝕜) * (‖x‖ : 𝕜)⁻¹) • x‖ = r := by\n  have : ‖x‖ ≠ 0 := by simp [hx]\n  field_simp [norm_smul, r_nonneg, rclike_simps]\n\n"}
{"name":"LinearMap.bound_of_sphere_bound","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝² : RCLike 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nr : Real\nr_pos : LT.lt 0 r\nc : Real\nf : LinearMap (RingHom.id 𝕜) E 𝕜\nh : ∀ (z : E), Membership.mem (Metric.sphere 0 r) z → LE.le (Norm.norm (f z)) c\nz : E\n⊢ LE.le (Norm.norm (f z)) (HMul.hMul (HDiv.hDiv c r) (Norm.norm z))","decl":"theorem LinearMap.bound_of_sphere_bound {r : ℝ} (r_pos : 0 < r) (c : ℝ) (f : E →ₗ[𝕜] 𝕜)\n    (h : ∀ z ∈ sphere (0 : E) r, ‖f z‖ ≤ c) (z : E) : ‖f z‖ ≤ c / r * ‖z‖ := by\n  by_cases z_zero : z = 0\n  · rw [z_zero]\n    simp only [LinearMap.map_zero, norm_zero, mul_zero]\n    exact le_rfl\n  set z₁ := ((r : 𝕜) * (‖z‖ : 𝕜)⁻¹) • z with hz₁\n  have norm_f_z₁ : ‖f z₁‖ ≤ c := by\n    apply h\n    rw [mem_sphere_zero_iff_norm]\n    exact norm_smul_inv_norm' r_pos.le z_zero\n  have r_ne_zero : (r : 𝕜) ≠ 0 := RCLike.ofReal_ne_zero.mpr r_pos.ne'\n  have eq : f z = ‖z‖ / r * f z₁ := by\n    rw [hz₁, LinearMap.map_smul, smul_eq_mul]\n    rw [← mul_assoc, ← mul_assoc, div_mul_cancel₀ _ r_ne_zero, mul_inv_cancel₀, one_mul]\n    simp only [z_zero, RCLike.ofReal_eq_zero, norm_eq_zero, Ne, not_false_iff]\n  rw [eq, norm_mul, norm_div, RCLike.norm_coe_norm, RCLike.norm_of_nonneg r_pos.le,\n    div_mul_eq_mul_div, div_mul_eq_mul_div, mul_comm]\n  apply div_le_div₀ _ _ r_pos rfl.ge\n  · exact mul_nonneg ((norm_nonneg _).trans norm_f_z₁) (norm_nonneg z)\n  apply mul_le_mul norm_f_z₁ rfl.le (norm_nonneg z) ((norm_nonneg _).trans norm_f_z₁)\n\n"}
{"name":"LinearMap.bound_of_ball_bound'","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝² : RCLike 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nr : Real\nr_pos : LT.lt 0 r\nc : Real\nf : LinearMap (RingHom.id 𝕜) E 𝕜\nh : ∀ (z : E), Membership.mem (Metric.closedBall 0 r) z → LE.le (Norm.norm (f z)) c\nz : E\n⊢ LE.le (Norm.norm (f z)) (HMul.hMul (HDiv.hDiv c r) (Norm.norm z))","decl":"/-- `LinearMap.bound_of_ball_bound` is a version of this over arbitrary nontrivially normed fields.\nIt produces a less precise bound so we keep both versions. -/\ntheorem LinearMap.bound_of_ball_bound' {r : ℝ} (r_pos : 0 < r) (c : ℝ) (f : E →ₗ[𝕜] 𝕜)\n    (h : ∀ z ∈ closedBall (0 : E) r, ‖f z‖ ≤ c) (z : E) : ‖f z‖ ≤ c / r * ‖z‖ :=\n  f.bound_of_sphere_bound r_pos c (fun z hz => h z hz.le) z\n\n"}
{"name":"ContinuousLinearMap.opNorm_bound_of_ball_bound","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝² : RCLike 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nr : Real\nr_pos : LT.lt 0 r\nc : Real\nf : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜\nh : ∀ (z : E), Membership.mem (Metric.closedBall 0 r) z → LE.le (Norm.norm (f z)) c\n⊢ LE.le (Norm.norm f) (HDiv.hDiv c r)","decl":"theorem ContinuousLinearMap.opNorm_bound_of_ball_bound {r : ℝ} (r_pos : 0 < r) (c : ℝ)\n    (f : E →L[𝕜] 𝕜) (h : ∀ z ∈ closedBall (0 : E) r, ‖f z‖ ≤ c) : ‖f‖ ≤ c / r := by\n  apply ContinuousLinearMap.opNorm_le_bound\n  · apply div_nonneg _ r_pos.le\n    exact\n      (norm_nonneg _).trans\n        (h 0 (by simp only [norm_zero, mem_closedBall, dist_zero_left, r_pos.le]))\n  apply LinearMap.bound_of_ball_bound' r_pos\n  exact fun z hz => h z hz\n\n"}
{"name":"NormedSpace.sphere_nonempty_rclike","module":"Mathlib.Analysis.NormedSpace.RCLike","initialProofState":"𝕜 : Type u_1\ninst✝³ : RCLike 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : Nontrivial E\nr : Real\nhr : LE.le 0 r\n⊢ Nonempty ↑(Metric.sphere 0 r)","decl":"include 𝕜 in\ntheorem NormedSpace.sphere_nonempty_rclike [Nontrivial E] {r : ℝ} (hr : 0 ≤ r) :\n    Nonempty (sphere (0 : E) r) :=\n  letI : NormedSpace ℝ E := NormedSpace.restrictScalars ℝ 𝕜 E\n  (NormedSpace.sphere_nonempty.mpr hr).coe_sort\n"}
