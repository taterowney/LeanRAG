{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₀_functor","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₀ eA e').functor (eA.functor.comp e'.functor)","decl":"/-- A basic equivalence `A ≅ B'` obtained by composing `eA : A ≅ A'` and `e' : A' ≅ B'`. -/\n@[simps! functor inverse unitIso_hom_app]\ndef equivalence₀ : A ≌ B' :=\n  eA.trans e'\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₀_inverse","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₀ eA e').inverse (e'.inverse.comp eA.inverse)","decl":"/-- A basic equivalence `A ≅ B'` obtained by composing `eA : A ≅ A'` and `e' : A' ≅ B'`. -/\n@[simps! functor inverse unitIso_hom_app]\ndef equivalence₀ : A ≌ B' :=\n  eA.trans e'\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₀_unitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₀ eA e').unitIso.hom.app X) (CategoryTheory.CategoryStruct.comp (eA.unitIso.hom.app X) (eA.inverse.map (e'.unitIso.hom.app (eA.functor.obj X))))","decl":"/-- A basic equivalence `A ≅ B'` obtained by composing `eA : A ≅ A'` and `e' : A' ≅ B'`. -/\n@[simps! functor inverse unitIso_hom_app]\ndef equivalence₀ : A ≌ B' :=\n  eA.trans e'\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁_functor","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₁ hF).functor F","decl":"/-- An intermediate equivalence `A ≅ B'` whose functor is `F` and whose inverse is\n`e'.inverse ⋙ eA.inverse`. -/\n@[simps! functor]\ndef equivalence₁ : A ≌ B' := (equivalence₀ eA e').changeFunctor hF\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁_inverse","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_7, u_2} A'\ninst✝ : CategoryTheory.Category.{u_6, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₁ hF).inverse (e'.inverse.comp eA.inverse)","decl":"theorem equivalence₁_inverse : (equivalence₁ hF).inverse = e'.inverse ⋙ eA.inverse :=\n  rfl\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁CounitIso_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : B'\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₁CounitIso hF).inv.app X) (CategoryTheory.CategoryStruct.comp (e'.counitIso.inv.app X) (CategoryTheory.CategoryStruct.comp (e'.functor.map (eA.counitIso.inv.app (e'.inverse.obj X))) (hF.hom.app (eA.inverse.obj (e'.inverse.obj X)))))","decl":"/-- The counit isomorphism of the equivalence `equivalence₁` between `A` and `B'`. -/\n@[simps!]\ndef equivalence₁CounitIso : (e'.inverse ⋙ eA.inverse) ⋙ F ≅ 𝟭 B' :=\n  calc\n    (e'.inverse ⋙ eA.inverse) ⋙ F ≅ (e'.inverse ⋙ eA.inverse) ⋙ eA.functor ⋙ e'.functor :=\n      isoWhiskerLeft _ hF.symm\n    _ ≅ e'.inverse ⋙ (eA.inverse ⋙ eA.functor) ⋙ e'.functor := Iso.refl _\n    _ ≅ e'.inverse ⋙ 𝟭 _ ⋙ e'.functor := isoWhiskerLeft _ (isoWhiskerRight eA.counitIso _)\n    _ ≅ e'.inverse ⋙ e'.functor := Iso.refl _\n    _ ≅ 𝟭 B' := e'.counitIso\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁CounitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : B'\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₁CounitIso hF).hom.app X) (CategoryTheory.CategoryStruct.comp (hF.inv.app (eA.inverse.obj (e'.inverse.obj X))) (CategoryTheory.CategoryStruct.comp (e'.functor.map (eA.counitIso.hom.app (e'.inverse.obj X))) (e'.counitIso.hom.app X)))","decl":"/-- The counit isomorphism of the equivalence `equivalence₁` between `A` and `B'`. -/\n@[simps!]\ndef equivalence₁CounitIso : (e'.inverse ⋙ eA.inverse) ⋙ F ≅ 𝟭 B' :=\n  calc\n    (e'.inverse ⋙ eA.inverse) ⋙ F ≅ (e'.inverse ⋙ eA.inverse) ⋙ eA.functor ⋙ e'.functor :=\n      isoWhiskerLeft _ hF.symm\n    _ ≅ e'.inverse ⋙ (eA.inverse ⋙ eA.functor) ⋙ e'.functor := Iso.refl _\n    _ ≅ e'.inverse ⋙ 𝟭 _ ⋙ e'.functor := isoWhiskerLeft _ (isoWhiskerRight eA.counitIso _)\n    _ ≅ e'.inverse ⋙ e'.functor := Iso.refl _\n    _ ≅ 𝟭 B' := e'.counitIso\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁CounitIso_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_6, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_7, u_2} A'\ninst✝ : CategoryTheory.Category.{u_5, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₁ hF).counitIso (AlgebraicTopology.DoldKan.Compatibility.equivalence₁CounitIso hF)","decl":"theorem equivalence₁CounitIso_eq : (equivalence₁ hF).counitIso = equivalence₁CounitIso hF := by\n  ext Y\n  simp [equivalence₁, equivalence₀]\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁UnitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₁UnitIso hF).hom.app X) (CategoryTheory.CategoryStruct.comp (eA.unitIso.hom.app X) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.unitIso.hom.app (eA.functor.obj X))) (eA.inverse.map (e'.inverse.map (hF.hom.app X)))))","decl":"/-- The unit isomorphism of the equivalence `equivalence₁` between `A` and `B'`. -/\n@[simps!]\ndef equivalence₁UnitIso : 𝟭 A ≅ F ⋙ e'.inverse ⋙ eA.inverse :=\n  calc\n    𝟭 A ≅ eA.functor ⋙ eA.inverse := eA.unitIso\n    _ ≅ eA.functor ⋙ 𝟭 A' ⋙ eA.inverse := Iso.refl _\n    _ ≅ eA.functor ⋙ (e'.functor ⋙ e'.inverse) ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight e'.unitIso _)\n    _ ≅ (eA.functor ⋙ e'.functor) ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n    _ ≅ F ⋙ e'.inverse ⋙ eA.inverse := isoWhiskerRight hF _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁UnitIso_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₁UnitIso hF).inv.app X) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.inverse.map (hF.inv.app X))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.unitIso.inv.app (eA.functor.obj X))) (eA.unitIso.inv.app X)))","decl":"/-- The unit isomorphism of the equivalence `equivalence₁` between `A` and `B'`. -/\n@[simps!]\ndef equivalence₁UnitIso : 𝟭 A ≅ F ⋙ e'.inverse ⋙ eA.inverse :=\n  calc\n    𝟭 A ≅ eA.functor ⋙ eA.inverse := eA.unitIso\n    _ ≅ eA.functor ⋙ 𝟭 A' ⋙ eA.inverse := Iso.refl _\n    _ ≅ eA.functor ⋙ (e'.functor ⋙ e'.inverse) ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight e'.unitIso _)\n    _ ≅ (eA.functor ⋙ e'.functor) ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n    _ ≅ F ⋙ e'.inverse ⋙ eA.inverse := isoWhiskerRight hF _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₁UnitIso_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_7, u_2} A'\ninst✝ : CategoryTheory.Category.{u_6, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₁ hF).unitIso (AlgebraicTopology.DoldKan.Compatibility.equivalence₁UnitIso hF)","decl":"theorem equivalence₁UnitIso_eq : (equivalence₁ hF).unitIso = equivalence₁UnitIso hF := by\n  ext X\n  simp [equivalence₁]\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂_functor","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₂ eB hF).functor (F.comp eB.inverse)","decl":"/-- An intermediate equivalence `A ≅ B` obtained as the composition of `equivalence₁` and\nthe inverse of `eB : B ≌ B'`. -/\n@[simps! functor]\ndef equivalence₂ : A ≌ B :=\n  (equivalence₁ hF).trans eB.symm\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂_inverse","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_7, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₂ eB hF).inverse (eB.functor.comp (e'.inverse.comp eA.inverse))","decl":"theorem equivalence₂_inverse :\n    (equivalence₂ eB hF).inverse = eB.functor ⋙ e'.inverse ⋙ eA.inverse :=\n  rfl\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂CounitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : B\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₂CounitIso eB hF).hom.app X) (CategoryTheory.CategoryStruct.comp (eB.inverse.map (hF.inv.app (eA.inverse.obj (e'.inverse.obj (eB.functor.obj X))))) (CategoryTheory.CategoryStruct.comp (eB.inverse.map (e'.functor.map (eA.counitIso.hom.app (e'.inverse.obj (eB.functor.obj X))))) (CategoryTheory.CategoryStruct.comp (eB.inverse.map (e'.counitIso.hom.app (eB.functor.obj X))) (eB.unitIso.inv.app X))))","decl":"/-- The counit isomorphism of the equivalence `equivalence₂` between `A` and `B`. -/\n@[simps!]\ndef equivalence₂CounitIso : (eB.functor ⋙ e'.inverse ⋙ eA.inverse) ⋙ F ⋙ eB.inverse ≅ 𝟭 B :=\n  calc\n    (eB.functor ⋙ e'.inverse ⋙ eA.inverse) ⋙ F ⋙ eB.inverse ≅\n        eB.functor ⋙ (e'.inverse ⋙ eA.inverse ⋙ F) ⋙ eB.inverse :=\n      Iso.refl _\n    _ ≅ eB.functor ⋙ 𝟭 _ ⋙ eB.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight (equivalence₁CounitIso hF) _)\n    _ ≅ eB.functor ⋙ eB.inverse := Iso.refl _\n    _ ≅ 𝟭 B := eB.unitIso.symm\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂CounitIso_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : B\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₂CounitIso eB hF).inv.app X) (CategoryTheory.CategoryStruct.comp (eB.unitIso.hom.app X) (CategoryTheory.CategoryStruct.comp (eB.inverse.map (e'.counitIso.inv.app (eB.functor.obj X))) (CategoryTheory.CategoryStruct.comp (eB.inverse.map (e'.functor.map (eA.counitIso.inv.app (e'.inverse.obj (eB.functor.obj X))))) (eB.inverse.map (hF.hom.app (eA.inverse.obj (e'.inverse.obj (eB.functor.obj X))))))))","decl":"/-- The counit isomorphism of the equivalence `equivalence₂` between `A` and `B`. -/\n@[simps!]\ndef equivalence₂CounitIso : (eB.functor ⋙ e'.inverse ⋙ eA.inverse) ⋙ F ⋙ eB.inverse ≅ 𝟭 B :=\n  calc\n    (eB.functor ⋙ e'.inverse ⋙ eA.inverse) ⋙ F ⋙ eB.inverse ≅\n        eB.functor ⋙ (e'.inverse ⋙ eA.inverse ⋙ F) ⋙ eB.inverse :=\n      Iso.refl _\n    _ ≅ eB.functor ⋙ 𝟭 _ ⋙ eB.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight (equivalence₁CounitIso hF) _)\n    _ ≅ eB.functor ⋙ eB.inverse := Iso.refl _\n    _ ≅ 𝟭 B := eB.unitIso.symm\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂CounitIso_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_6, u_1} A\ninst✝² : CategoryTheory.Category.{u_7, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_5, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₂ eB hF).counitIso (AlgebraicTopology.DoldKan.Compatibility.equivalence₂CounitIso eB hF)","decl":"theorem equivalence₂CounitIso_eq :\n    (equivalence₂ eB hF).counitIso = equivalence₂CounitIso eB hF := by\n  ext Y'\n  dsimp [equivalence₂, Iso.refl]\n  simp only [equivalence₁CounitIso_eq, equivalence₁CounitIso_hom_app, comp_id, id_comp,\n    Functor.map_comp, assoc, equivalence₂CounitIso_hom_app]\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂UnitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₂UnitIso eB hF).hom.app X) (CategoryTheory.CategoryStruct.comp (eA.unitIso.hom.app X) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.unitIso.hom.app (eA.functor.obj X))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.inverse.map (hF.hom.app X))) (eA.inverse.map (e'.inverse.map (eB.counitIso.inv.app (F.obj X)))))))","decl":"/-- The unit isomorphism of the equivalence `equivalence₂` between `A` and `B`. -/\n@[simps!]\ndef equivalence₂UnitIso : 𝟭 A ≅ (F ⋙ eB.inverse) ⋙ eB.functor ⋙ e'.inverse ⋙ eA.inverse :=\n  calc\n    𝟭 A ≅ F ⋙ e'.inverse ⋙ eA.inverse := equivalence₁UnitIso hF\n    _ ≅ F ⋙ 𝟭 B' ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n    _ ≅ F ⋙ (eB.inverse ⋙ eB.functor) ⋙ e'.inverse ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight eB.counitIso.symm _)\n    _ ≅ (F ⋙ eB.inverse) ⋙ eB.functor ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂UnitIso_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalence₂UnitIso eB hF).inv.app X) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.inverse.map (eB.counitIso.hom.app (F.obj X)))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.inverse.map (hF.inv.app X))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.unitIso.inv.app (eA.functor.obj X))) (eA.unitIso.inv.app X))))","decl":"/-- The unit isomorphism of the equivalence `equivalence₂` between `A` and `B`. -/\n@[simps!]\ndef equivalence₂UnitIso : 𝟭 A ≅ (F ⋙ eB.inverse) ⋙ eB.functor ⋙ e'.inverse ⋙ eA.inverse :=\n  calc\n    𝟭 A ≅ F ⋙ e'.inverse ⋙ eA.inverse := equivalence₁UnitIso hF\n    _ ≅ F ⋙ 𝟭 B' ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n    _ ≅ F ⋙ (eB.inverse ⋙ eB.functor) ⋙ e'.inverse ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight eB.counitIso.symm _)\n    _ ≅ (F ⋙ eB.inverse) ⋙ eB.functor ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence₂UnitIso_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_7, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence₂ eB hF).unitIso (AlgebraicTopology.DoldKan.Compatibility.equivalence₂UnitIso eB hF)","decl":"theorem equivalence₂UnitIso_eq : (equivalence₂ eB hF).unitIso = equivalence₂UnitIso eB hF := by\n  ext X\n  dsimp [equivalence₂]\n  simp only [equivalence₁UnitIso_eq, equivalence₁UnitIso_hom_app, comp_id, id_comp, assoc,\n    equivalence₂UnitIso_hom_app]\n  rfl\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence_inverse","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence hF hG).inverse G","decl":"/-- The equivalence `A ≅ B` whose functor is `F ⋙ eB.inverse` and\nwhose inverse is `G : B ≅ A`. -/\n@[simps! inverse]\ndef equivalence : A ≌ B :=\n  ((equivalence₂ eB hF).changeInverse\n    (calc eB.functor ⋙ e'.inverse ⋙ eA.inverse ≅\n        (eB.functor ⋙ e'.inverse) ⋙ eA.inverse := (Functor.associator _ _ _).symm\n    _ ≅ (G ⋙ eA.functor) ⋙ eA.inverse := isoWhiskerRight hG _\n    _ ≅ G ⋙ 𝟭 A := isoWhiskerLeft _ eA.unitIso.symm\n    _ ≅ G := G.rightUnitor))\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalence_functor","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_7, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence hF hG).functor (F.comp eB.inverse)","decl":"theorem equivalence_functor : (equivalence hF hG).functor = F ⋙ eB.inverse :=\n  rfl\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.τ₀_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nX : B\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.τ₀.hom.app X) (e'.counitIso.hom.app (eB.functor.obj X))","decl":"/-- The isomorphism `eB.functor ⋙ e'.inverse ⋙ e'.functor ≅ eB.functor` deduced\nfrom the counit isomorphism of `e'`. -/\n@[simps! hom_app]\ndef τ₀ : eB.functor ⋙ e'.inverse ⋙ e'.functor ≅ eB.functor :=\n  calc\n    eB.functor ⋙ e'.inverse ⋙ e'.functor ≅ eB.functor ⋙ 𝟭 _ := isoWhiskerLeft _ e'.counitIso\n    _ ≅ eB.functor := Functor.rightUnitor _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.τ₁_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\nη : CategoryTheory.Iso (G.comp F) eB.functor\nX : B\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.τ₁ hF hG η).hom.app X) (CategoryTheory.CategoryStruct.comp (e'.functor.map (hG.hom.app X)) (CategoryTheory.CategoryStruct.comp (hF.hom.app (G.obj X)) (η.hom.app X)))","decl":"/-- The isomorphism `eB.functor ⋙ e'.inverse ⋙ e'.functor ≅ eB.functor` deduced\nfrom the isomorphisms `hF : eA.functor ⋙ e'.functor ≅ F`,\n`hG : eB.functor ⋙ e'.inverse ≅ G ⋙ eA.functor` and the datum of\nan isomorphism `η : G ⋙ F ≅ eB.functor`. -/\n@[simps! hom_app]\ndef τ₁ (η : G ⋙ F ≅ eB.functor) : eB.functor ⋙ e'.inverse ⋙ e'.functor ≅ eB.functor :=\n  calc\n    eB.functor ⋙ e'.inverse ⋙ e'.functor ≅ (eB.functor ⋙ e'.inverse) ⋙ e'.functor :=\n        Iso.refl _\n    _ ≅ (G ⋙ eA.functor) ⋙ e'.functor := isoWhiskerRight hG _\n    _ ≅ G ⋙ eA.functor ⋙ e'.functor := by rfl\n    _ ≅ G ⋙ F := isoWhiskerLeft _ hF\n    _ ≅ eB.functor := η\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalenceCounitIso_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nB : Type u_3\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neB : CategoryTheory.Equivalence B B'\nF : CategoryTheory.Functor A B'\nG : CategoryTheory.Functor B A\nη : CategoryTheory.Iso (G.comp F) eB.functor\nX : B\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalenceCounitIso η).inv.app X) (CategoryTheory.CategoryStruct.comp (eB.unitIso.hom.app X) (eB.inverse.map (η.inv.app X)))","decl":"/-- The counit isomorphism of `equivalence`. -/\n@[simps!]\ndef equivalenceCounitIso : G ⋙ F ⋙ eB.inverse ≅ 𝟭 B :=\n  calc\n    G ⋙ F ⋙ eB.inverse ≅ (G ⋙ F) ⋙ eB.inverse := Iso.refl _\n    _ ≅ eB.functor ⋙ eB.inverse := isoWhiskerRight η _\n    _ ≅ 𝟭 B := eB.unitIso.symm\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalenceCounitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nB : Type u_3\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neB : CategoryTheory.Equivalence B B'\nF : CategoryTheory.Functor A B'\nG : CategoryTheory.Functor B A\nη : CategoryTheory.Iso (G.comp F) eB.functor\nX : B\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalenceCounitIso η).hom.app X) (CategoryTheory.CategoryStruct.comp (eB.inverse.map (η.hom.app X)) (eB.unitIso.inv.app X))","decl":"/-- The counit isomorphism of `equivalence`. -/\n@[simps!]\ndef equivalenceCounitIso : G ⋙ F ⋙ eB.inverse ≅ 𝟭 B :=\n  calc\n    G ⋙ F ⋙ eB.inverse ≅ (G ⋙ F) ⋙ eB.inverse := Iso.refl _\n    _ ≅ eB.functor ⋙ eB.inverse := isoWhiskerRight η _\n    _ ≅ 𝟭 B := eB.unitIso.symm\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalenceCounitIso_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_8, u_1} A\ninst✝² : CategoryTheory.Category.{u_7, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_6, u_3} B\ninst✝ : CategoryTheory.Category.{u_5, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\nη : CategoryTheory.Iso (G.comp F) eB.functor\nhη : Eq AlgebraicTopology.DoldKan.Compatibility.τ₀ (AlgebraicTopology.DoldKan.Compatibility.τ₁ hF hG η)\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence hF hG).counitIso (AlgebraicTopology.DoldKan.Compatibility.equivalenceCounitIso η)","decl":"theorem equivalenceCounitIso_eq (hη : τ₀ = τ₁ hF hG η) :\n    (equivalence hF hG).counitIso = equivalenceCounitIso η := by\n  ext1; apply NatTrans.ext; ext Y\n  dsimp [equivalence]\n  simp only [comp_id, id_comp, Functor.map_comp, equivalence₂CounitIso_eq,\n    equivalence₂CounitIso_hom_app, assoc, equivalenceCounitIso_hom_app]\n  simp only [← eB.inverse.map_comp_assoc, ← τ₀_hom_app, hη, τ₁_hom_app]\n  erw [hF.inv.naturality_assoc, hF.inv.naturality_assoc]\n  dsimp\n  congr 2\n  simp only [← e'.functor.map_comp_assoc, Equivalence.fun_inv_map, assoc,\n    Iso.inv_hom_id_app_assoc, hG.inv_hom_id_app]\n  dsimp\n  rw [comp_id, eA.functor_unitIso_comp, e'.functor.map_id, id_comp, hF.inv_hom_id_app_assoc]\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.υ_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.υ hF).hom.app X) (CategoryTheory.CategoryStruct.comp (e'.unitIso.hom.app (eA.functor.obj X)) (e'.inverse.map (hF.hom.app X)))","decl":"/-- The isomorphism `eA.functor ≅ F ⋙ e'.inverse` deduced from the\nunit isomorphism of `e'` and the isomorphism `hF : eA.functor ⋙ e'.functor ≅ F`. -/\n@[simps!]\ndef υ : eA.functor ≅ F ⋙ e'.inverse :=\n  calc\n    eA.functor ≅ eA.functor ⋙ 𝟭 A' := (Functor.leftUnitor _).symm\n    _ ≅ eA.functor ⋙ e'.functor ⋙ e'.inverse := isoWhiskerLeft _ e'.unitIso\n    _ ≅ (eA.functor ⋙ e'.functor) ⋙ e'.inverse := Iso.refl _\n    _ ≅ F ⋙ e'.inverse := isoWhiskerRight hF _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.υ_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB' : Type u_4\ninst✝² : CategoryTheory.Category.{u_5, u_1} A\ninst✝¹ : CategoryTheory.Category.{u_6, u_2} A'\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.υ hF).inv.app X) (CategoryTheory.CategoryStruct.comp (e'.inverse.map (hF.inv.app X)) (e'.unitIso.inv.app (eA.functor.obj X)))","decl":"/-- The isomorphism `eA.functor ≅ F ⋙ e'.inverse` deduced from the\nunit isomorphism of `e'` and the isomorphism `hF : eA.functor ⋙ e'.functor ≅ F`. -/\n@[simps!]\ndef υ : eA.functor ≅ F ⋙ e'.inverse :=\n  calc\n    eA.functor ≅ eA.functor ⋙ 𝟭 A' := (Functor.leftUnitor _).symm\n    _ ≅ eA.functor ⋙ e'.functor ⋙ e'.inverse := isoWhiskerLeft _ e'.unitIso\n    _ ≅ (eA.functor ⋙ e'.functor) ⋙ e'.inverse := Iso.refl _\n    _ ≅ F ⋙ e'.inverse := isoWhiskerRight hF _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalenceUnitIso_hom_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\nε : CategoryTheory.Iso eA.functor (F.comp e'.inverse)\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalenceUnitIso hG ε).hom.app X) (CategoryTheory.CategoryStruct.comp (eA.unitIso.hom.app X) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (ε.hom.app X)) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.inverse.map (eB.counitIso.inv.app (F.obj X)))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (hG.hom.app (eB.inverse.obj (F.obj X)))) (eA.unitIso.inv.app (G.obj (eB.inverse.obj (F.obj X))))))))","decl":"/-- The unit isomorphism of `equivalence`. -/\n@[simps!]\ndef equivalenceUnitIso : 𝟭 A ≅ (F ⋙ eB.inverse) ⋙ G :=\n  calc\n    𝟭 A ≅ eA.functor ⋙ eA.inverse := eA.unitIso\n    _ ≅ (F ⋙ e'.inverse) ⋙ eA.inverse := isoWhiskerRight ε _\n    _ ≅ F ⋙ 𝟭 B' ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n    _ ≅ F ⋙ (eB.inverse ⋙ eB.functor) ⋙ e'.inverse ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight eB.counitIso.symm _)\n    _ ≅ (F ⋙ eB.inverse) ⋙ (eB.functor ⋙ e'.inverse) ⋙ eA.inverse := Iso.refl _\n    _ ≅ (F ⋙ eB.inverse) ⋙ (G ⋙ eA.functor) ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight hG _)\n    _ ≅ (F ⋙ eB.inverse ⋙ G) ⋙ eA.functor ⋙ eA.inverse := Iso.refl _\n    _ ≅ (F ⋙ eB.inverse ⋙ G) ⋙ 𝟭 A := isoWhiskerLeft _ eA.unitIso.symm\n    _ ≅ (F ⋙ eB.inverse) ⋙ G := Iso.refl _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalenceUnitIso_inv_app","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} A\ninst✝² : CategoryTheory.Category.{u_6, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_7, u_3} B\ninst✝ : CategoryTheory.Category.{u_8, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\nε : CategoryTheory.Iso eA.functor (F.comp e'.inverse)\nX : A\n⊢ Eq ((AlgebraicTopology.DoldKan.Compatibility.equivalenceUnitIso hG ε).inv.app X) (CategoryTheory.CategoryStruct.comp (eA.unitIso.hom.app (G.obj (eB.inverse.obj (F.obj X)))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (hG.inv.app (eB.inverse.obj (F.obj X)))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (e'.inverse.map (eB.counitIso.hom.app (F.obj X)))) (CategoryTheory.CategoryStruct.comp (eA.inverse.map (ε.inv.app X)) (eA.unitIso.inv.app X)))))","decl":"/-- The unit isomorphism of `equivalence`. -/\n@[simps!]\ndef equivalenceUnitIso : 𝟭 A ≅ (F ⋙ eB.inverse) ⋙ G :=\n  calc\n    𝟭 A ≅ eA.functor ⋙ eA.inverse := eA.unitIso\n    _ ≅ (F ⋙ e'.inverse) ⋙ eA.inverse := isoWhiskerRight ε _\n    _ ≅ F ⋙ 𝟭 B' ⋙ e'.inverse ⋙ eA.inverse := Iso.refl _\n    _ ≅ F ⋙ (eB.inverse ⋙ eB.functor) ⋙ e'.inverse ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight eB.counitIso.symm _)\n    _ ≅ (F ⋙ eB.inverse) ⋙ (eB.functor ⋙ e'.inverse) ⋙ eA.inverse := Iso.refl _\n    _ ≅ (F ⋙ eB.inverse) ⋙ (G ⋙ eA.functor) ⋙ eA.inverse :=\n      isoWhiskerLeft _ (isoWhiskerRight hG _)\n    _ ≅ (F ⋙ eB.inverse ⋙ G) ⋙ eA.functor ⋙ eA.inverse := Iso.refl _\n    _ ≅ (F ⋙ eB.inverse ⋙ G) ⋙ 𝟭 A := isoWhiskerLeft _ eA.unitIso.symm\n    _ ≅ (F ⋙ eB.inverse) ⋙ G := Iso.refl _\n\n"}
{"name":"AlgebraicTopology.DoldKan.Compatibility.equivalenceUnitIso_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Compatibility","initialProofState":"A : Type u_1\nA' : Type u_2\nB : Type u_3\nB' : Type u_4\ninst✝³ : CategoryTheory.Category.{u_6, u_1} A\ninst✝² : CategoryTheory.Category.{u_5, u_2} A'\ninst✝¹ : CategoryTheory.Category.{u_8, u_3} B\ninst✝ : CategoryTheory.Category.{u_7, u_4} B'\neA : CategoryTheory.Equivalence A A'\neB : CategoryTheory.Equivalence B B'\ne' : CategoryTheory.Equivalence A' B'\nF : CategoryTheory.Functor A B'\nhF : CategoryTheory.Iso (eA.functor.comp e'.functor) F\nG : CategoryTheory.Functor B A\nhG : CategoryTheory.Iso (eB.functor.comp e'.inverse) (G.comp eA.functor)\nε : CategoryTheory.Iso eA.functor (F.comp e'.inverse)\nhε : Eq (AlgebraicTopology.DoldKan.Compatibility.υ hF) ε\n⊢ Eq (AlgebraicTopology.DoldKan.Compatibility.equivalence hF hG).unitIso (AlgebraicTopology.DoldKan.Compatibility.equivalenceUnitIso hG ε)","decl":"theorem equivalenceUnitIso_eq (hε : υ hF = ε) :\n    (equivalence hF hG).unitIso = equivalenceUnitIso hG ε := by\n  ext1; apply NatTrans.ext; ext X\n  dsimp [equivalence]\n  simp only [assoc, comp_id, equivalenceUnitIso_hom_app]\n  erw [id_comp]\n  simp only [equivalence₂UnitIso_eq eB hF, equivalence₂UnitIso_hom_app,\n    ← eA.inverse.map_comp_assoc, assoc, ← hε, υ_hom_app]\n\n"}
