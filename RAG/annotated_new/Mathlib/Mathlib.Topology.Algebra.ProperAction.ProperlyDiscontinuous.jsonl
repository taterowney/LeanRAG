{"name":"properlyDiscontinuousSMul_iff_properSMul","module":"Mathlib.Topology.Algebra.ProperAction.ProperlyDiscontinuous","initialProofState":"G : Type u_1\nX : Type u_2\ninst✝⁷ : Group G\ninst✝⁶ : MulAction G X\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : TopologicalSpace X\ninst✝³ : T2Space X\ninst✝² : DiscreteTopology G\ninst✝¹ : ContinuousConstSMul G X\ninst✝ : CompactlyGeneratedSpace (Prod X X)\n⊢ Iff (ProperlyDiscontinuousSMul G X) (ProperSMul G X)","decl":"/-- If a discrete group acts on a T2 space `X` such that `X × X` is compactly\ngenerated, and if the action is continuous in the second variable, then the action is properly\ndiscontinuous if and only if it is proper. This is in particular true if `X` is first-countable or\nweakly locally compact.\n\nThere was an older version of this theorem which was changed to this one to make use\nof the `CompactlyGeneratedSpace` typeclass. (since 2024-11-10) -/\ntheorem properlyDiscontinuousSMul_iff_properSMul [T2Space X] [DiscreteTopology G]\n    [ContinuousConstSMul G X] [CompactlyGeneratedSpace (X × X)] :\n    ProperlyDiscontinuousSMul G X ↔ ProperSMul G X := by\n  constructor\n  · intro h\n    rw [properSMul_iff]\n    -- We have to show that `f : (g, x) ↦ (g • x, x)` is proper.\n    -- Continuity follows from continuity of `g • ·` and the fact that `G` has the\n    -- discrete topology, thanks to `continuous_of_partial_of_discrete`.\n    -- Because `X × X` is compactly generated, to show that f is proper\n    -- it is enough to show that the preimage of a compact set `K` is compact.\n    refine isProperMap_iff_isCompact_preimage.2\n      ⟨(continuous_prod_mk.2\n      ⟨continuous_prod_of_discrete_left.2 continuous_const_smul, by fun_prop⟩),\n      fun K hK ↦ ?_⟩\n    -- We set `K' := pr₁(K) ∪ pr₂(K)`, which is compact because `K` is compact and `pr₁` and\n    -- `pr₂` are continuous. We halso have that `K ⊆ K' × K'`, and `K` is closed because `X` is T2.\n    -- Therefore `f ⁻¹ (K)` is also closed and `f ⁻¹ (K) ⊆ f ⁻¹ (K' × K')`, thus it suffices to\n    -- show that `f ⁻¹ (K' × K')` is compact.\n    let K' := fst '' K ∪ snd '' K\n    have hK' : IsCompact K' := (hK.image continuous_fst).union (hK.image continuous_snd)\n    let E := {g : G | Set.Nonempty ((g • ·) '' K' ∩ K')}\n    -- The set `E` is finite because the action is properly discontinuous.\n    have fin : Set.Finite E := by\n      simp_rw [E, nonempty_iff_ne_empty]\n      exact h.finite_disjoint_inter_image hK' hK'\n    -- Therefore we can rewrite `f ⁻¹ (K' × K')` as a finite union of compact sets.\n    have : (fun gx : G × X ↦ (gx.1 • gx.2, gx.2)) ⁻¹' (K' ×ˢ K') =\n        ⋃ g ∈ E, {g} ×ˢ ((g⁻¹ • ·) '' K' ∩ K') := by\n      ext gx\n      simp only [mem_preimage, mem_prod, nonempty_def, mem_inter_iff, mem_image,\n        exists_exists_and_eq_and, mem_setOf_eq, singleton_prod, iUnion_exists, biUnion_and',\n        mem_iUnion, exists_prop, E]\n      constructor\n      · exact fun ⟨gx_mem, x_mem⟩ ↦ ⟨gx.2, x_mem, gx.1, gx_mem,\n          ⟨gx.2, ⟨⟨gx.1 • gx.2, gx_mem, by simp⟩, x_mem⟩, rfl⟩⟩\n      · rintro ⟨x, -, g, -, ⟨-, ⟨⟨x', x'_mem, rfl⟩, ginvx'_mem⟩, rfl⟩⟩\n        exact ⟨by simpa, by simpa⟩\n    -- Indeed each set in this finite union is the product of a singleton and\n    -- the intersection of the compact `K'` with its image by some element `g`, and this image is\n    -- compact because `g • ·` is continuous.\n    have : IsCompact ((fun gx : G × X ↦ (gx.1 • gx.2, gx.2)) ⁻¹' (K' ×ˢ K')) :=\n      this ▸ fin.isCompact_biUnion fun g hg ↦\n        isCompact_singleton.prod <| (hK'.image <| continuous_const_smul _).inter hK'\n    -- We conclude as explained above.\n    exact this.of_isClosed_subset (hK.isClosed.preimage <|\n      continuous_prod_mk.2\n      ⟨continuous_prod_of_discrete_left.2 continuous_const_smul, by fun_prop⟩) <|\n      preimage_mono fun x hx ↦ ⟨Or.inl ⟨x, hx, rfl⟩, Or.inr ⟨x, hx, rfl⟩⟩\n  · intro h; constructor\n    intro K L hK hL\n    simp_rw [← nonempty_iff_ne_empty]\n    -- We want to show that a subset of `G` is finite, but as `G` has the discrete topology it\n    -- is enough to show that this subset is compact.\n    apply IsCompact.finite_of_discrete\n    -- Now set `h : (g, x) ↦ (g⁻¹ • x, x)`, because `f` is proper by hypothesis, so is `h`.\n    have : IsProperMap (fun gx : G × X ↦ (gx.1⁻¹ • gx.2, gx.2)) :=\n      (IsProperMap.prodMap (Homeomorph.isProperMap (Homeomorph.inv G)) isProperMap_id).comp <|\n        ProperSMul.isProperMap_smul_pair\n    --But we also have that `{g | Set.Nonempty ((g • ·) '' K ∩ L)} = h ⁻¹ (K × L)`, which\n    -- concludes the proof.\n    have eq : {g | Set.Nonempty ((g • ·) '' K ∩ L)} =\n        fst '' ((fun gx : G × X ↦ (gx.1⁻¹ • gx.2, gx.2)) ⁻¹' (K ×ˢ L)) := by\n      simp_rw [nonempty_def]\n      ext g; constructor\n      · exact fun ⟨_, ⟨x, x_mem, rfl⟩, hx⟩ ↦ ⟨(g, g • x), ⟨by simpa, hx⟩, rfl⟩\n      · rintro ⟨gx, hgx, rfl⟩\n        exact ⟨gx.2, ⟨gx.1⁻¹ • gx.2, hgx.1, by simp⟩, hgx.2⟩\n    exact eq ▸ IsCompact.image (this.isCompact_preimage <| hK.prod hL) continuous_fst\n"}
