{"name":"AlgebraicGeometry.formallyUnramified_iff","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.FormallyUnramified f) (∀ (U : ↑Y.affineOpens) (V : ↑X.affineOpens) (e : LE.le (↑V) ((TopologicalSpace.Opens.map f.base).obj ↑U)), (CommRingCat.Hom.hom (AlgebraicGeometry.Scheme.Hom.appLE f (↑U) (↑V) e)).FormallyUnramified)","decl":"/-- A morphism of schemes `f : X ⟶ Y` is formally unramified if for each affine `U ⊆ Y` and\n`V ⊆ f ⁻¹' U`, The induced map `Γ(Y, U) ⟶ Γ(X, V)` is formally unramified. -/\n@[mk_iff]\nclass FormallyUnramified (f : X ⟶ Y) : Prop where\n  formallyUnramified_of_affine_subset :\n    ∀ (U : Y.affineOpens) (V : X.affineOpens) (e : V.1 ≤ f ⁻¹ᵁ U.1),\n      (f.appLE U V e).hom.FormallyUnramified\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.formallyUnramified_of_affine_subset","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.FormallyUnramified f\nU : ↑Y.affineOpens\nV : ↑X.affineOpens\ne : LE.le (↑V) ((TopologicalSpace.Opens.map f.base).obj ↑U)\n⊢ (CommRingCat.Hom.hom (AlgebraicGeometry.Scheme.Hom.appLE f (↑U) (↑V) e)).FormallyUnramified","decl":"/-- A morphism of schemes `f : X ⟶ Y` is formally unramified if for each affine `U ⊆ Y` and\n`V ⊆ f ⁻¹' U`, The induced map `Γ(Y, U) ⟶ Γ(X, V)` is formally unramified. -/\n@[mk_iff]\nclass FormallyUnramified (f : X ⟶ Y) : Prop where\n  formallyUnramified_of_affine_subset :\n    ∀ (U : Y.affineOpens) (V : X.affineOpens) (e : V.1 ≤ f ⁻¹ᵁ U.1),\n      (f.appLE U V e).hom.FormallyUnramified\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.instHasRingHomPropertyFormallyUnramified","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"⊢ AlgebraicGeometry.HasRingHomProperty @AlgebraicGeometry.FormallyUnramified fun {R S} [CommRing R] [CommRing S] => RingHom.FormallyUnramified","decl":"instance : HasRingHomProperty @FormallyUnramified RingHom.FormallyUnramified where\n  isLocal_ringHomProperty := RingHom.FormallyUnramified.propertyIsLocal\n  eq_affineLocally' := by\n    ext X Y f\n    rw [formallyUnramified_iff, affineLocally_iff_affineOpens_le]\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.instIsStableUnderCompositionScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderComposition @AlgebraicGeometry.FormallyUnramified","decl":"instance : MorphismProperty.IsStableUnderComposition @FormallyUnramified :=\n  HasRingHomProperty.stableUnderComposition RingHom.FormallyUnramified.stableUnderComposition\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.instOfIsOpenImmersionDiagonalScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsOpenImmersion (CategoryTheory.Limits.pullback.diagonal f)\n⊢ AlgebraicGeometry.FormallyUnramified f","decl":"/-- `f : X ⟶ S` is formally unramified if `X ⟶ X ×ₛ X` is an open immersion.\nIn particular, monomorphisms (e.g. immersions) are formally unramified.\nThe converse is true if `f` is locally of finite type. -/\ninstance (priority := 900) [IsOpenImmersion (pullback.diagonal f)] : FormallyUnramified f := by\n  wlog hY : ∃ R, Y = Spec R\n  · rw [IsLocalAtTarget.iff_of_openCover (P := @FormallyUnramified) Y.affineCover]\n    intro i\n    have inst : IsOpenImmersion (pullback.diagonal (pullback.snd f (Y.affineCover.map i))) :=\n      MorphismProperty.pullback_snd (P := .diagonal @IsOpenImmersion) _ _ ‹_›\n    exact this (pullback.snd _ _) ⟨_, rfl⟩\n  obtain ⟨R, rfl⟩ := hY\n  wlog hX : ∃ S, X = Spec S generalizing X\n  · rw [IsLocalAtSource.iff_of_openCover (P := @FormallyUnramified) X.affineCover]\n    intro i\n    have inst : IsOpenImmersion (pullback.diagonal (X.affineCover.map i ≫ f)) :=\n      MorphismProperty.comp_mem (.diagonal @IsOpenImmersion) _ _\n        (inferInstanceAs (IsOpenImmersion _)) ‹_›\n    exact this (_ ≫ _) ⟨_, rfl⟩\n  obtain ⟨S, rfl⟩ := hX\n  obtain ⟨φ, rfl : Spec.map φ = f⟩ := Spec.homEquiv.symm.surjective f\n  rw [HasRingHomProperty.Spec_iff (P := @FormallyUnramified)]\n  algebraize [φ.hom]\n  let F := (Algebra.TensorProduct.lmul' R (S := S)).toRingHom\n  have hF : Function.Surjective F := fun x ↦ ⟨.mk _ _ _ x 1, by simp [F]⟩\n  have : IsOpenImmersion (Spec.map (CommRingCat.ofHom F)) := by\n    rwa [← MorphismProperty.cancel_right_of_respectsIso (P := @IsOpenImmersion) _\n      (pullbackSpecIso R S S).inv, ← AlgebraicGeometry.diagonal_Spec_map R S]\n  obtain ⟨e, he, he'⟩ := (isOpenImmersion_SpecMap_iff_of_surjective _ hF).mp this\n  refine ⟨subsingleton_of_forall_eq 0 fun x ↦ ?_⟩\n  obtain ⟨⟨x, hx⟩, rfl⟩ := Ideal.toCotangent_surjective _ x\n  obtain ⟨x, rfl⟩ := Ideal.mem_span_singleton.mp (he'.le hx)\n  refine (Ideal.toCotangent_eq_zero _ _).mpr ?_\n  rw [pow_two, Subtype.coe_mk, ← he, mul_assoc]\n  exact Ideal.mul_mem_mul (he'.ge (Ideal.mem_span_singleton_self e)) hx\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.of_comp","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"X Y Z : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\ninst✝ : AlgebraicGeometry.FormallyUnramified (CategoryTheory.CategoryStruct.comp f g)\n⊢ AlgebraicGeometry.FormallyUnramified f","decl":"theorem of_comp {X Y Z : Scheme} (f : X ⟶ Y) (g : Y ⟶ Z)\n    [FormallyUnramified (f ≫ g)] : FormallyUnramified f :=\n  HasRingHomProperty.of_comp (fun {R S T _ _ _} f g H ↦ by\n    algebraize [f, g, g.comp f]\n    exact Algebra.FormallyUnramified.of_comp R S T) ‹_›\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.instIsMultiplicativeScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsMultiplicative @AlgebraicGeometry.FormallyUnramified","decl":"instance : MorphismProperty.IsMultiplicative @FormallyUnramified where\n  id_mem _ := inferInstance\n\n"}
{"name":"AlgebraicGeometry.FormallyUnramified.instIsStableUnderBaseChangeScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.FormallyUnramified","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderBaseChange @AlgebraicGeometry.FormallyUnramified","decl":"instance : MorphismProperty.IsStableUnderBaseChange @FormallyUnramified :=\n  HasRingHomProperty.isStableUnderBaseChange RingHom.FormallyUnramified.isStableUnderBaseChange\n\n"}
