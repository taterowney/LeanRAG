{"name":"prod_dvd_iff","module":"Mathlib.Algebra.Divisibility.Prod","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝¹ : Semigroup G₁\ninst✝ : Semigroup G₂\nx y : Prod G₁ G₂\n⊢ Iff (Dvd.dvd x y) (And (Dvd.dvd x.1 y.1) (Dvd.dvd x.2 y.2))","decl":"theorem prod_dvd_iff {x y : G₁ × G₂} :\n    x ∣ y ↔ x.1 ∣ y.1 ∧ x.2 ∣ y.2 := by\n  cases x; cases y\n  simp only [dvd_def, Prod.exists, Prod.mk_mul_mk, Prod.mk.injEq,\n    exists_and_left, exists_and_right, and_self, true_and]\n\n"}
{"name":"Prod.mk_dvd_mk","module":"Mathlib.Algebra.Divisibility.Prod","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝¹ : Semigroup G₁\ninst✝ : Semigroup G₂\nx₁ y₁ : G₁\nx₂ y₂ : G₂\n⊢ Iff (Dvd.dvd { fst := x₁, snd := x₂ } { fst := y₁, snd := y₂ }) (And (Dvd.dvd x₁ y₁) (Dvd.dvd x₂ y₂))","decl":"@[simp]\ntheorem Prod.mk_dvd_mk {x₁ y₁ : G₁} {x₂ y₂ : G₂} :\n    (x₁, x₂) ∣ (y₁, y₂) ↔ x₁ ∣ y₁ ∧ x₂ ∣ y₂ :=\n  prod_dvd_iff\n\n"}
{"name":"instDecompositionMonoidProd","module":"Mathlib.Algebra.Divisibility.Prod","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝³ : Semigroup G₁\ninst✝² : Semigroup G₂\ninst✝¹ : DecompositionMonoid G₁\ninst✝ : DecompositionMonoid G₂\n⊢ DecompositionMonoid (Prod G₁ G₂)","decl":"instance [DecompositionMonoid G₁] [DecompositionMonoid G₂] : DecompositionMonoid (G₁ × G₂) where\n  primal a b c h := by\n    simp_rw [prod_dvd_iff] at h ⊢\n    obtain ⟨a₁, a₁', h₁, h₁', eq₁⟩ := DecompositionMonoid.primal a.1 h.1\n    obtain ⟨a₂, a₂', h₂, h₂', eq₂⟩ := DecompositionMonoid.primal a.2 h.2\n    -- aesop works here\n    exact ⟨(a₁, a₂), (a₁', a₂'), ⟨h₁, h₂⟩, ⟨h₁', h₂'⟩, Prod.ext eq₁ eq₂⟩\n\n"}
{"name":"pi_dvd_iff","module":"Mathlib.Algebra.Divisibility.Prod","initialProofState":"ι : Type u_1\nG : ι → Type u_4\ninst✝ : (i : ι) → Semigroup (G i)\nx y : (i : ι) → G i\n⊢ Iff (Dvd.dvd x y) (∀ (i : ι), Dvd.dvd (x i) (y i))","decl":"theorem pi_dvd_iff {x y : ∀ i, G i} : x ∣ y ↔ ∀ i, x i ∣ y i := by\n  simp_rw [dvd_def, funext_iff, Classical.skolem]; rfl\n\n"}
{"name":"instDecompositionMonoidForall","module":"Mathlib.Algebra.Divisibility.Prod","initialProofState":"ι : Type u_1\nG : ι → Type u_4\ninst✝¹ : (i : ι) → Semigroup (G i)\ninst✝ : ∀ (i : ι), DecompositionMonoid (G i)\n⊢ DecompositionMonoid ((i : ι) → G i)","decl":"instance [∀ i, DecompositionMonoid (G i)] : DecompositionMonoid (∀ i, G i) where\n  primal a b c h := by\n    simp_rw [pi_dvd_iff] at h ⊢\n    choose a₁ a₂ h₁ h₂ eq using fun i ↦ DecompositionMonoid.primal _ (h i)\n    exact ⟨a₁, a₂, h₁, h₂, funext eq⟩\n"}
