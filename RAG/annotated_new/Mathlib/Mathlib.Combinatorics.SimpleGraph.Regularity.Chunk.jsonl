{"name":"SzemerediRegularity.biUnion_star_subset_nonuniformWitness","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\nV : Finset α\n⊢ HasSubset.Subset ((SzemerediRegularity.star hP G ε hU V).biUnion id) (G.nonuniformWitness ε U V)","decl":"theorem biUnion_star_subset_nonuniformWitness :\n    (star hP G ε hU V).biUnion id ⊆ G.nonuniformWitness ε U V :=\n  biUnion_subset_iff_forall_subset.2 fun _ hA => (mem_filter.1 hA).2\n\n"}
{"name":"SzemerediRegularity.star_subset_chunk","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\nV : Finset α\n⊢ HasSubset.Subset (SzemerediRegularity.star hP G ε hU V) (SzemerediRegularity.chunk hP G ε hU).parts","decl":"theorem star_subset_chunk : star hP G ε hU V ⊆ (chunk hP G ε hU).parts :=\n  filter_subset _ _\n\n"}
{"name":"SzemerediRegularity.card_chunk","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\nhm : Ne (HDiv.hDiv (Fintype.card α) (SzemerediRegularity.stepBound P.parts.card)) 0\n⊢ Eq (SzemerediRegularity.chunk hP G ε hU).parts.card (HPow.hPow 4 P.parts.card)","decl":"theorem card_chunk (hm : m ≠ 0) : #(chunk hP G ε hU).parts = 4 ^ #P.parts := by\n  unfold chunk\n  split_ifs\n  · rw [card_parts_equitabilise _ _ hm, tsub_add_cancel_of_le]\n    exact le_of_lt a_add_one_le_four_pow_parts_card\n  · rw [card_parts_equitabilise _ _ hm, tsub_add_cancel_of_le a_add_one_le_four_pow_parts_card]\n\n"}
{"name":"SzemerediRegularity.card_eq_of_mem_parts_chunk","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\ns : Finset α\nhs : Membership.mem (SzemerediRegularity.chunk hP G ε hU).parts s\n⊢ Or (Eq s.card (HDiv.hDiv (Fintype.card α) (SzemerediRegularity.stepBound P.parts.card))) (Eq s.card (HAdd.hAdd (HDiv.hDiv (Fintype.card α) (SzemerediRegularity.stepBound P.parts.card)) 1))","decl":"theorem card_eq_of_mem_parts_chunk (hs : s ∈ (chunk hP G ε hU).parts) :\n    #s = m ∨ #s = m + 1 := by\n  unfold chunk at hs\n  split_ifs at hs <;> exact card_eq_of_mem_parts_equitabilise hs\n\n"}
{"name":"SzemerediRegularity.m_le_card_of_mem_chunk_parts","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\ns : Finset α\nhs : Membership.mem (SzemerediRegularity.chunk hP G ε hU).parts s\n⊢ LE.le (HDiv.hDiv (Fintype.card α) (SzemerediRegularity.stepBound P.parts.card)) s.card","decl":"theorem m_le_card_of_mem_chunk_parts (hs : s ∈ (chunk hP G ε hU).parts) : m ≤ #s :=\n  (card_eq_of_mem_parts_chunk hs).elim ge_of_eq fun i => by simp [i]\n\n"}
{"name":"SzemerediRegularity.card_le_m_add_one_of_mem_chunk_parts","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\ns : Finset α\nhs : Membership.mem (SzemerediRegularity.chunk hP G ε hU).parts s\n⊢ LE.le s.card (HAdd.hAdd (HDiv.hDiv (Fintype.card α) (SzemerediRegularity.stepBound P.parts.card)) 1)","decl":"theorem card_le_m_add_one_of_mem_chunk_parts (hs : s ∈ (chunk hP G ε hU).parts) : #s ≤ m + 1 :=\n  (card_eq_of_mem_parts_chunk hs).elim (fun i => by simp [i]) fun i => i.le\n\n"}
{"name":"SzemerediRegularity.card_biUnion_star_le_m_add_one_card_star_mul","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝² : Fintype α\ninst✝¹ : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nε : Real\nU : Finset α\nhU : Membership.mem P.parts U\nV : Finset α\n⊢ LE.le (↑((SzemerediRegularity.star hP G ε hU V).biUnion id).card) (HMul.hMul (↑(SzemerediRegularity.star hP G ε hU V).card) (HAdd.hAdd (↑(HDiv.hDiv (Fintype.card α) (SzemerediRegularity.stepBound P.parts.card))) 1))","decl":"theorem card_biUnion_star_le_m_add_one_card_star_mul :\n    (#((star hP G ε hU V).biUnion id) : ℝ) ≤ #(star hP G ε hU V) * (m + 1) :=\n  mod_cast card_biUnion_le_card_mul _ _ _ fun _ hs =>\n    card_le_m_add_one_of_mem_chunk_parts <| star_subset_chunk hs\n\n"}
{"name":"SzemerediRegularity.edgeDensity_chunk_not_uniform","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝³ : Fintype α\ninst✝² : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\nε : Real\nU V : Finset α\ninst✝ : Nonempty α\nhPα : LE.le (HMul.hMul P.parts.card (HPow.hPow 16 P.parts.card)) (Fintype.card α)\nhPε : LE.le 100 (HMul.hMul (HPow.hPow 4 P.parts.card) (HPow.hPow ε 5))\nhε₁ : LE.le ε 1\nhU : Membership.mem P.parts U\nhV : Membership.mem P.parts V\nhUVne : Ne U V\nhUV : Not (G.IsUniform ε U V)\n⊢ LE.le (HAdd.hAdd (HSub.hSub (HPow.hPow (↑(G.edgeDensity U V)) 2) (HDiv.hDiv (HPow.hPow ε 5) 25)) (HDiv.hDiv (HPow.hPow ε 4) 3)) (HDiv.hDiv (((SzemerediRegularity.chunk hP G ε hU).parts.product (SzemerediRegularity.chunk hP G ε hV).parts).sum fun ab => HPow.hPow (↑(G.edgeDensity ab.1 ab.2)) 2) (HPow.hPow 16 P.parts.card))","decl":"/-- Lower bound on the edge densities between non-uniform parts of `SzemerediRegularity.increment`.\n-/\ntheorem edgeDensity_chunk_not_uniform [Nonempty α] (hPα : #P.parts * 16 ^ #P.parts ≤ card α)\n    (hPε : ↑100 ≤ ↑4 ^ #P.parts * ε ^ 5) (hε₁ : ε ≤ 1) {hU : U ∈ P.parts} {hV : V ∈ P.parts}\n    (hUVne : U ≠ V) (hUV : ¬G.IsUniform ε U V) :\n    (G.edgeDensity U V : ℝ) ^ 2 - ε ^ 5 / ↑25 + ε ^ 4 / ↑3 ≤\n    (∑ ab ∈ (chunk hP G ε hU).parts.product (chunk hP G ε hV).parts,\n      (G.edgeDensity ab.1 ab.2 : ℝ) ^ 2) / ↑16 ^ #P.parts :=\n  calc\n    ↑(G.edgeDensity U V) ^ 2 - ε ^ 5 / 25 + ε ^ 4 / ↑3 ≤ ↑(G.edgeDensity U V) ^ 2 - ε ^ 5 / ↑25 +\n        #(star hP G ε hU V) * #(star hP G ε hV U) / ↑16 ^ #P.parts *\n          (↑9 / ↑16) * ε ^ 2 := by\n      apply add_le_add_left\n      have Ul : 4 / 5 * ε ≤ #(star hP G ε hU V) / _ :=\n        eps_le_card_star_div hPα hPε hε₁ hU hV hUVne hUV\n      have Vl : 4 / 5 * ε ≤ #(star hP G ε hV U) / _ :=\n        eps_le_card_star_div hPα hPε hε₁ hV hU hUVne.symm fun h => hUV h.symm\n      rw [show (16 : ℝ) = ↑4 ^ 2 by norm_num, pow_right_comm, sq ((4 : ℝ) ^ _), ←\n        _root_.div_mul_div_comm, mul_assoc]\n      have : 0 < ε := by sz_positivity\n      have UVl := mul_le_mul Ul Vl (by positivity) ?_\n      swap\n      · -- This seems faster than `exact div_nonneg (by positivity) (by positivity)` and *much*\n        -- (tens of seconds) faster than `positivity` on its own.\n        apply div_nonneg <;> positivity\n      refine le_trans ?_ (mul_le_mul_of_nonneg_right UVl ?_)\n      · norm_num\n        nlinarith\n      · norm_num\n        positivity\n    _ ≤ (∑ ab ∈ (chunk hP G ε hU).parts.product (chunk hP G ε hV).parts,\n        (G.edgeDensity ab.1 ab.2 : ℝ) ^ 2) / ↑16 ^ #P.parts := by\n      have t : (star hP G ε hU V).product (star hP G ε hV U) ⊆\n          (chunk hP G ε hU).parts.product (chunk hP G ε hV).parts :=\n        product_subset_product star_subset_chunk star_subset_chunk\n      have hε : 0 ≤ ε := by sz_positivity\n      have sp : ∀ (a b : Finset (Finset α)), a.product b = a ×ˢ b := fun a b => rfl\n      have := add_div_le_sum_sq_div_card t (fun x => (G.edgeDensity x.1 x.2 : ℝ))\n        ((G.edgeDensity U V : ℝ) ^ 2 - ε ^ 5 / ↑25) (show 0 ≤ 3 / 4 * ε by linarith) ?_ ?_\n      · simp_rw [sp, card_product, card_chunk (m_pos hPα).ne', ← mul_pow, cast_pow, mul_pow,\n          div_pow, ← mul_assoc] at this\n        norm_num at this\n        exact this\n      · simp_rw [sp, card_product, card_chunk (m_pos hPα).ne', ← mul_pow]\n        norm_num\n        exact edgeDensity_star_not_uniform hPα hPε hε₁ hUVne hUV\n      · rw [sp, card_product]\n        apply (edgeDensity_chunk_aux hP hPα hPε hU hV).trans\n        · rw [card_chunk (m_pos hPα).ne', card_chunk (m_pos hPα).ne', ← mul_pow]\n          norm_num\n\n"}
{"name":"SzemerediRegularity.edgeDensity_chunk_uniform","module":"Mathlib.Combinatorics.SimpleGraph.Regularity.Chunk","initialProofState":"α : Type u_1\ninst✝³ : Fintype α\ninst✝² : DecidableEq α\nP : Finpartition Finset.univ\nhP : P.IsEquipartition\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\nε : Real\nU V : Finset α\ninst✝ : Nonempty α\nhPα : LE.le (HMul.hMul P.parts.card (HPow.hPow 16 P.parts.card)) (Fintype.card α)\nhPε : LE.le 100 (HMul.hMul (HPow.hPow 4 P.parts.card) (HPow.hPow ε 5))\nhU : Membership.mem P.parts U\nhV : Membership.mem P.parts V\n⊢ LE.le (HSub.hSub (HPow.hPow (↑(G.edgeDensity U V)) 2) (HDiv.hDiv (HPow.hPow ε 5) 25)) (HDiv.hDiv (((SzemerediRegularity.chunk hP G ε hU).parts.product (SzemerediRegularity.chunk hP G ε hV).parts).sum fun ab => HPow.hPow (↑(G.edgeDensity ab.1 ab.2)) 2) (HPow.hPow 16 P.parts.card))","decl":"/-- Lower bound on the edge densities between parts of `SzemerediRegularity.increment`. This is the\nblanket lower bound used the uniform parts. -/\ntheorem edgeDensity_chunk_uniform [Nonempty α] (hPα : #P.parts * 16 ^ #P.parts ≤ card α)\n    (hPε : ↑100 ≤ ↑4 ^ #P.parts * ε ^ 5) (hU : U ∈ P.parts) (hV : V ∈ P.parts) :\n    (G.edgeDensity U V : ℝ) ^ 2 - ε ^ 5 / ↑25 ≤\n    (∑ ab ∈ (chunk hP G ε hU).parts.product (chunk hP G ε hV).parts,\n      (G.edgeDensity ab.1 ab.2 : ℝ) ^ 2) / ↑16 ^ #P.parts := by\n  apply (edgeDensity_chunk_aux (hP := hP) hPα hPε hU hV).trans\n  have key : (16 : ℝ) ^ #P.parts = #((chunk hP G ε hU).parts ×ˢ (chunk hP G ε hV).parts) := by\n    rw [card_product, cast_mul, card_chunk (m_pos hPα).ne', card_chunk (m_pos hPα).ne', ←\n      cast_mul, ← mul_pow]; norm_cast\n  simp_rw [key]\n  convert sum_div_card_sq_le_sum_sq_div_card (α := ℝ)\n\n"}
