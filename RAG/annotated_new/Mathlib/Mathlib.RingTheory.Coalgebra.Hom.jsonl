{"name":"CoalgHom.mk.inj","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ntoLinearMap✝ : LinearMap (RingHom.id R) A B\ncounit_comp✝ : Eq (CoalgebraStruct.counit.comp toLinearMap✝) CoalgebraStruct.counit\nmap_comp_comul✝ : Eq ((TensorProduct.map toLinearMap✝ toLinearMap✝).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp toLinearMap✝)\ntoLinearMap : LinearMap (RingHom.id R) A B\ncounit_comp : Eq (CoalgebraStruct.counit.comp toLinearMap) CoalgebraStruct.counit\nmap_comp_comul : Eq ((TensorProduct.map toLinearMap toLinearMap).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp toLinearMap)\nx✝ : Eq { toLinearMap := toLinearMap✝, counit_comp := counit_comp✝, map_comp_comul := map_comp_comul✝ } { toLinearMap := toLinearMap, counit_comp := counit_comp, map_comp_comul := map_comp_comul }\n⊢ Eq toLinearMap✝ toLinearMap","decl":"/-- Given `R`-modules `A, B` with comultiplication maps `Δ_A, Δ_B` and counit maps\n`ε_A, ε_B`, an `R`-coalgebra homomorphism `A →ₗc[R] B` is an `R`-linear map `f` such that\n`ε_B ∘ f = ε_A` and `(f ⊗ f) ∘ Δ_A = Δ_B ∘ f`. -/\nstructure CoalgHom (R A B : Type*) [CommSemiring R]\n    [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗ[R] B where\n  counit_comp : counit ∘ₗ toLinearMap = counit\n  map_comp_comul : TensorProduct.map toLinearMap toLinearMap ∘ₗ comul = comul ∘ₗ toLinearMap\n\n"}
{"name":"CoalgHom.mk.injEq","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ntoLinearMap✝ : LinearMap (RingHom.id R) A B\ncounit_comp✝ : Eq (CoalgebraStruct.counit.comp toLinearMap✝) CoalgebraStruct.counit\nmap_comp_comul✝ : Eq ((TensorProduct.map toLinearMap✝ toLinearMap✝).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp toLinearMap✝)\ntoLinearMap : LinearMap (RingHom.id R) A B\ncounit_comp : Eq (CoalgebraStruct.counit.comp toLinearMap) CoalgebraStruct.counit\nmap_comp_comul : Eq ((TensorProduct.map toLinearMap toLinearMap).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp toLinearMap)\n⊢ Eq (Eq { toLinearMap := toLinearMap✝, counit_comp := counit_comp✝, map_comp_comul := map_comp_comul✝ } { toLinearMap := toLinearMap, counit_comp := counit_comp, map_comp_comul := map_comp_comul }) (Eq toLinearMap✝ toLinearMap)","decl":"/-- Given `R`-modules `A, B` with comultiplication maps `Δ_A, Δ_B` and counit maps\n`ε_A, ε_B`, an `R`-coalgebra homomorphism `A →ₗc[R] B` is an `R`-linear map `f` such that\n`ε_B ∘ f = ε_A` and `(f ⊗ f) ∘ Δ_A = Δ_B ∘ f`. -/\nstructure CoalgHom (R A B : Type*) [CommSemiring R]\n    [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗ[R] B where\n  counit_comp : counit ∘ₗ toLinearMap = counit\n  map_comp_comul : TensorProduct.map toLinearMap toLinearMap ∘ₗ comul = comul ∘ₗ toLinearMap\n\n"}
{"name":"CoalgHom.counit_comp","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nself : CoalgHom R A B\n⊢ Eq (CoalgebraStruct.counit.comp self.toLinearMap) CoalgebraStruct.counit","decl":"/-- Given `R`-modules `A, B` with comultiplication maps `Δ_A, Δ_B` and counit maps\n`ε_A, ε_B`, an `R`-coalgebra homomorphism `A →ₗc[R] B` is an `R`-linear map `f` such that\n`ε_B ∘ f = ε_A` and `(f ⊗ f) ∘ Δ_A = Δ_B ∘ f`. -/\nstructure CoalgHom (R A B : Type*) [CommSemiring R]\n    [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗ[R] B where\n  counit_comp : counit ∘ₗ toLinearMap = counit\n  map_comp_comul : TensorProduct.map toLinearMap toLinearMap ∘ₗ comul = comul ∘ₗ toLinearMap\n\n"}
{"name":"CoalgHom.map_comp_comul","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nself : CoalgHom R A B\n⊢ Eq ((TensorProduct.map self.toLinearMap self.toLinearMap).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp self.toLinearMap)","decl":"/-- Given `R`-modules `A, B` with comultiplication maps `Δ_A, Δ_B` and counit maps\n`ε_A, ε_B`, an `R`-coalgebra homomorphism `A →ₗc[R] B` is an `R`-linear map `f` such that\n`ε_B ∘ f = ε_A` and `(f ⊗ f) ∘ Δ_A = Δ_B ∘ f`. -/\nstructure CoalgHom (R A B : Type*) [CommSemiring R]\n    [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗ[R] B where\n  counit_comp : counit ∘ₗ toLinearMap = counit\n  map_comp_comul : TensorProduct.map toLinearMap toLinearMap ∘ₗ comul = comul ∘ₗ toLinearMap\n\n"}
{"name":"CoalgHom.mk.sizeOf_spec","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : Module R A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R B\ninst✝⁴ : CoalgebraStruct R A\ninst✝³ : CoalgebraStruct R B\ninst✝² : SizeOf R\ninst✝¹ : SizeOf A\ninst✝ : SizeOf B\ntoLinearMap : LinearMap (RingHom.id R) A B\ncounit_comp : Eq (CoalgebraStruct.counit.comp toLinearMap) CoalgebraStruct.counit\nmap_comp_comul : Eq ((TensorProduct.map toLinearMap toLinearMap).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp toLinearMap)\n⊢ Eq (SizeOf.sizeOf { toLinearMap := toLinearMap, counit_comp := counit_comp, map_comp_comul := map_comp_comul }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLinearMap)) (SizeOf.sizeOf counit_comp)) (SizeOf.sizeOf map_comp_comul))","decl":"/-- Given `R`-modules `A, B` with comultiplication maps `Δ_A, Δ_B` and counit maps\n`ε_A, ε_B`, an `R`-coalgebra homomorphism `A →ₗc[R] B` is an `R`-linear map `f` such that\n`ε_B ∘ f = ε_A` and `(f ⊗ f) ∘ Δ_A = Δ_B ∘ f`. -/\nstructure CoalgHom (R A B : Type*) [CommSemiring R]\n    [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A →ₗ[R] B where\n  counit_comp : counit ∘ₗ toLinearMap = counit\n  map_comp_comul : TensorProduct.map toLinearMap toLinearMap ∘ₗ comul = comul ∘ₗ toLinearMap\n\n"}
{"name":"CoalgHomClass.map_comp_comul","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : Module R A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : FunLike F A B\nself : CoalgHomClass F R A B\nf : F\n⊢ Eq ((TensorProduct.map ↑f ↑f).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp ↑f)","decl":"/-- `CoalgHomClass F R A B` asserts `F` is a type of bundled coalgebra homomorphisms\nfrom `A` to `B`. -/\nclass CoalgHomClass (F : Type*) (R A B : outParam Type*)\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [FunLike F A B]\n    extends SemilinearMapClass F (RingHom.id R) A B : Prop where\n  counit_comp : ∀ f : F, counit ∘ₗ (f : A →ₗ[R] B) = counit\n  map_comp_comul : ∀ f : F, TensorProduct.map (f : A →ₗ[R] B)\n    (f : A →ₗ[R] B) ∘ₗ comul = comul ∘ₗ (f : A →ₗ[R] B)\n\n"}
{"name":"CoalgHomClass.toSemilinearMapClass","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : Module R A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : FunLike F A B\nself : CoalgHomClass F R A B\n⊢ SemilinearMapClass F (RingHom.id R) A B","decl":"/-- `CoalgHomClass F R A B` asserts `F` is a type of bundled coalgebra homomorphisms\nfrom `A` to `B`. -/\nclass CoalgHomClass (F : Type*) (R A B : outParam Type*)\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [FunLike F A B]\n    extends SemilinearMapClass F (RingHom.id R) A B : Prop where\n  counit_comp : ∀ f : F, counit ∘ₗ (f : A →ₗ[R] B) = counit\n  map_comp_comul : ∀ f : F, TensorProduct.map (f : A →ₗ[R] B)\n    (f : A →ₗ[R] B) ∘ₗ comul = comul ∘ₗ (f : A →ₗ[R] B)\n\n"}
{"name":"CoalgHomClass.counit_comp","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : Module R A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : FunLike F A B\nself : CoalgHomClass F R A B\nf : F\n⊢ Eq (CoalgebraStruct.counit.comp ↑f) CoalgebraStruct.counit","decl":"/-- `CoalgHomClass F R A B` asserts `F` is a type of bundled coalgebra homomorphisms\nfrom `A` to `B`. -/\nclass CoalgHomClass (F : Type*) (R A B : outParam Type*)\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [AddCommMonoid B] [Module R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [FunLike F A B]\n    extends SemilinearMapClass F (RingHom.id R) A B : Prop where\n  counit_comp : ∀ f : F, counit ∘ₗ (f : A →ₗ[R] B) = counit\n  map_comp_comul : ∀ f : F, TensorProduct.map (f : A →ₗ[R] B)\n    (f : A →ₗ[R] B) ∘ₗ comul = comul ∘ₗ (f : A →ₗ[R] B)\n\n"}
{"name":"CoalgHomClass.counit_comp_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nF : Type u_4\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : Module R A\ninst✝⁵ : AddCommMonoid B\ninst✝⁴ : Module R B\ninst✝³ : CoalgebraStruct R A\ninst✝² : CoalgebraStruct R B\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nf : F\nx : A\n⊢ Eq (CoalgebraStruct.counit (f x)) (CoalgebraStruct.counit x)","decl":"@[simp]\ntheorem counit_comp_apply (f : F) (x : A) : counit (f x) = counit (R := R) x :=\n  LinearMap.congr_fun (counit_comp f) _\n\n"}
{"name":"CoalgHomClass.map_comp_comul_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nF : Type u_4\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : Module R A\ninst✝⁵ : AddCommMonoid B\ninst✝⁴ : Module R B\ninst✝³ : CoalgebraStruct R A\ninst✝² : CoalgebraStruct R B\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nf : F\nx : A\n⊢ Eq ((TensorProduct.map ↑f ↑f) (CoalgebraStruct.comul x)) (CoalgebraStruct.comul (f x))","decl":"@[simp]\ntheorem map_comp_comul_apply (f : F) (x : A) :\n    TensorProduct.map f f (comul x) = comul (R := R) (f x) :=\n  LinearMap.congr_fun (map_comp_comul f) _\n\n"}
{"name":"CoalgHom.coalgHomClass","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ CoalgHomClass (CoalgHom R A B) R A B","decl":"instance coalgHomClass : CoalgHomClass (A →ₗc[R] B) R A B where\n  map_add := fun f => f.map_add'\n  map_smulₛₗ := fun f => f.map_smul'\n  counit_comp := fun f => f.counit_comp\n  map_comp_comul := fun f => f.map_comp_comul\n\n"}
{"name":"CoalgHom.coe_coe","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : Module R A\ninst✝⁵ : AddCommMonoid B\ninst✝⁴ : Module R B\ninst✝³ : CoalgebraStruct R A\ninst✝² : CoalgebraStruct R B\nF : Type u_6\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nf : F\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp]\nprotected theorem coe_coe {F : Type*} [FunLike F A B] [CoalgHomClass F R A B] (f : F) :\n    ⇑(f : A →ₗc[R] B) = f :=\n  rfl\n\n"}
{"name":"CoalgHom.coe_mk","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : LinearMap (RingHom.id R) A B\nh : Eq (CoalgebraStruct.counit.comp f) CoalgebraStruct.counit\nh₁ : Eq ((TensorProduct.map f f).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp f)\n⊢ Eq ⇑{ toLinearMap := f, counit_comp := h, map_comp_comul := h₁ } ⇑f","decl":"@[simp]\ntheorem coe_mk {f : A →ₗ[R] B} (h h₁) : ((⟨f, h, h₁⟩ : A →ₗc[R] B) : A → B) = f :=\n  rfl\n\n"}
{"name":"CoalgHom.coe_mks","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : A → B\nh₁ : ∀ (x y : A), Eq (f (HAdd.hAdd x y)) (HAdd.hAdd (f x) (f y))\nh₂ : ∀ (m : R) (x : A), Eq ({ toFun := f, map_add' := h₁ }.toFun (HSMul.hSMul m x)) (HSMul.hSMul ((RingHom.id R) m) ({ toFun := f, map_add' := h₁ }.toFun x))\nh₃ : Eq (CoalgebraStruct.counit.comp { toFun := f, map_add' := h₁, map_smul' := h₂ }) CoalgebraStruct.counit\nh₄ : Eq ((TensorProduct.map { toFun := f, map_add' := h₁, map_smul' := h₂ } { toFun := f, map_add' := h₁, map_smul' := h₂ }).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp { toFun := f, map_add' := h₁, map_smul' := h₂ })\n⊢ Eq (⇑{ toFun := f, map_add' := h₁, map_smul' := h₂, counit_comp := h₃, map_comp_comul := h₄ }) f","decl":"@[norm_cast]\ntheorem coe_mks {f : A → B} (h₁ h₂ h₃ h₄) : ⇑(⟨⟨⟨f, h₁⟩, h₂⟩, h₃, h₄⟩ : A →ₗc[R] B) = f :=\n  rfl\n\n"}
{"name":"CoalgHom.coe_linearMap_mk","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : LinearMap (RingHom.id R) A B\nh : Eq (CoalgebraStruct.counit.comp f) CoalgebraStruct.counit\nh₁ : Eq ((TensorProduct.map f f).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp f)\n⊢ Eq (↑{ toLinearMap := f, counit_comp := h, map_comp_comul := h₁ }) f","decl":"@[simp, norm_cast]\ntheorem coe_linearMap_mk {f : A →ₗ[R] B} (h h₁) : ((⟨f, h, h₁⟩ : A →ₗc[R] B) : A →ₗ[R] B) = f :=\n  rfl\n\n"}
{"name":"CoalgHom.toLinearMap_eq_coe","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgHom R A B\n⊢ Eq f.toLinearMap ↑f","decl":"@[simp]\ntheorem toLinearMap_eq_coe (f : A →ₗc[R] B) : f.toLinearMap = f :=\n  rfl\n\n"}
{"name":"CoalgHom.coe_toLinearMap","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgHom R A B\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp, norm_cast]\ntheorem coe_toLinearMap (f : A →ₗc[R] B) : ⇑(f : A →ₗ[R] B) = f :=\n  rfl\n\n"}
{"name":"CoalgHom.coe_toAddMonoidHom","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgHom R A B\n⊢ Eq ⇑↑f ⇑f","decl":"@[norm_cast]\ntheorem coe_toAddMonoidHom (f : A →ₗc[R] B) : ⇑(f : A →+ B) = f :=\n  rfl\n\n"}
{"name":"CoalgHom.coe_fn_injective","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective DFunLike.coe","decl":"theorem coe_fn_injective : @Function.Injective (A →ₗc[R] B) (A → B) (↑) :=\n  DFunLike.coe_injective\n\n"}
{"name":"CoalgHom.coe_fn_inj","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ₁ φ₂ : CoalgHom R A B\n⊢ Iff (Eq ⇑φ₁ ⇑φ₂) (Eq φ₁ φ₂)","decl":"theorem coe_fn_inj {φ₁ φ₂ : A →ₗc[R] B} : (φ₁ : A → B) = φ₂ ↔ φ₁ = φ₂ :=\n  DFunLike.coe_fn_eq\n\n"}
{"name":"CoalgHom.coe_linearMap_injective","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective fun x => ↑x","decl":"theorem coe_linearMap_injective : Function.Injective ((↑) : (A →ₗc[R] B) → A →ₗ[R] B) :=\n  fun φ₁ φ₂ H => coe_fn_injective <|\n    show ((φ₁ : A →ₗ[R] B) : A → B) = ((φ₂ : A →ₗ[R] B) : A → B) from congr_arg _ H\n\n"}
{"name":"CoalgHom.coe_addMonoidHom_injective","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective AddMonoidHomClass.toAddMonoidHom","decl":"theorem coe_addMonoidHom_injective : Function.Injective ((↑) : (A →ₗc[R] B) → A →+ B) :=\n  LinearMap.toAddMonoidHom_injective.comp coe_linearMap_injective\n\n"}
{"name":"CoalgHom.congr_fun","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ₁ φ₂ : CoalgHom R A B\nH : Eq φ₁ φ₂\nx : A\n⊢ Eq (φ₁ x) (φ₂ x)","decl":"protected theorem congr_fun {φ₁ φ₂ : A →ₗc[R] B} (H : φ₁ = φ₂) (x : A) : φ₁ x = φ₂ x :=\n  DFunLike.congr_fun H x\n\n"}
{"name":"CoalgHom.congr_arg","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ : CoalgHom R A B\nx y : A\nh : Eq x y\n⊢ Eq (φ x) (φ y)","decl":"protected theorem congr_arg (φ : A →ₗc[R] B) {x y : A} (h : x = y) : φ x = φ y :=\n  DFunLike.congr_arg φ h\n\n"}
{"name":"CoalgHom.ext","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ₁ φ₂ : CoalgHom R A B\nH : ∀ (x : A), Eq (φ₁ x) (φ₂ x)\n⊢ Eq φ₁ φ₂","decl":"@[ext]\ntheorem ext {φ₁ φ₂ : A →ₗc[R] B} (H : ∀ x, φ₁ x = φ₂ x) : φ₁ = φ₂ :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"CoalgHom.ext_iff","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ₁ φ₂ : CoalgHom R A B\n⊢ Iff (Eq φ₁ φ₂) (∀ (x : A), Eq (φ₁ x) (φ₂ x))","decl":"@[ext]\ntheorem ext {φ₁ φ₂ : A →ₗc[R] B} (H : ∀ x, φ₁ x = φ₂ x) : φ₁ = φ₂ :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"CoalgHom.ext_of_ring_iff","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\nf g : CoalgHom R R A\n⊢ Iff (Eq f g) (Eq (f 1) (g 1))","decl":"@[ext high]\ntheorem ext_of_ring {f g : R →ₗc[R] A} (h : f 1 = g 1) : f = g :=\n  coe_linearMap_injective (by ext; assumption)\n\n"}
{"name":"CoalgHom.ext_of_ring","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\nf g : CoalgHom R R A\nh : Eq (f 1) (g 1)\n⊢ Eq f g","decl":"@[ext high]\ntheorem ext_of_ring {f g : R →ₗc[R] A} (h : f 1 = g 1) : f = g :=\n  coe_linearMap_injective (by ext; assumption)\n\n"}
{"name":"CoalgHom.mk_coe","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgHom R A B\nh₁ : ∀ (x y : A), Eq (f (HAdd.hAdd x y)) (HAdd.hAdd (f x) (f y))\nh₂ : ∀ (m : R) (x : A), Eq ({ toFun := ⇑f, map_add' := h₁ }.toFun (HSMul.hSMul m x)) (HSMul.hSMul ((RingHom.id R) m) ({ toFun := ⇑f, map_add' := h₁ }.toFun x))\nh₃ : Eq (CoalgebraStruct.counit.comp { toFun := ⇑f, map_add' := h₁, map_smul' := h₂ }) CoalgebraStruct.counit\nh₄ : Eq ((TensorProduct.map { toFun := ⇑f, map_add' := h₁, map_smul' := h₂ } { toFun := ⇑f, map_add' := h₁, map_smul' := h₂ }).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp { toFun := ⇑f, map_add' := h₁, map_smul' := h₂ })\n⊢ Eq { toFun := ⇑f, map_add' := h₁, map_smul' := h₂, counit_comp := h₃, map_comp_comul := h₄ } f","decl":"@[simp]\ntheorem mk_coe {f : A →ₗc[R] B} (h₁ h₂ h₃ h₄) : (⟨⟨⟨f, h₁⟩, h₂⟩, h₃, h₄⟩ : A →ₗc[R] B) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CoalgHom.coe_copy","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgHom R A B\nf' : A → B\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : A →ₗc[R] B) (f' : A → B) (h : f' = ⇑f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"CoalgHom.copy_eq","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : CoalgHom R A B\nf' : A → B\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : A →ₗc[R] B) (f' : A → B) (h : f' = ⇑f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"CoalgHom.id_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\na : A\n⊢ Eq ((CoalgHom.id R A) a) a","decl":"/-- Identity map as a `CoalgHom`. -/\n@[simps!] protected def id : A →ₗc[R] A :=\n  { LinearMap.id with\n    counit_comp := by ext; rfl\n    map_comp_comul := by simp only [map_id, LinearMap.id_comp, LinearMap.comp_id] }\n\n"}
{"name":"CoalgHom.coe_id","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq (⇑(CoalgHom.id R A)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(CoalgHom.id R A) = id :=\n  rfl\n\n"}
{"name":"CoalgHom.id_toLinearMap","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq (↑(CoalgHom.id R A)) LinearMap.id","decl":"@[simp]\ntheorem id_toLinearMap : (CoalgHom.id R A : A →ₗ[R] A) = LinearMap.id := rfl\n\n"}
{"name":"CoalgHom.comp_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : Module R A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R B\ninst✝⁴ : AddCommMonoid C\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\nφ₁ : CoalgHom R B C\nφ₂ : CoalgHom R A B\na✝ : A\n⊢ Eq ((φ₁.comp φ₂) a✝) (φ₁ (φ₂ a✝))","decl":"/-- Composition of coalgebra homomorphisms. -/\n@[simps!] def comp (φ₁ : B →ₗc[R] C) (φ₂ : A →ₗc[R] B) : A →ₗc[R] C :=\n  { (φ₁ : B →ₗ[R] C) ∘ₗ (φ₂ : A →ₗ[R] B) with\n    counit_comp := by ext; simp\n    map_comp_comul := by ext; simp [map_comp] }\n\n"}
{"name":"CoalgHom.coe_comp","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : Module R A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R B\ninst✝⁴ : AddCommMonoid C\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\nφ₁ : CoalgHom R B C\nφ₂ : CoalgHom R A B\n⊢ Eq (⇑(φ₁.comp φ₂)) (Function.comp ⇑φ₁ ⇑φ₂)","decl":"@[simp]\ntheorem coe_comp (φ₁ : B →ₗc[R] C) (φ₂ : A →ₗc[R] B) : ⇑(φ₁.comp φ₂) = φ₁ ∘ φ₂ := rfl\n\n"}
{"name":"CoalgHom.comp_toLinearMap","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : Module R A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R B\ninst✝⁴ : AddCommMonoid C\ninst✝³ : Module R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\nφ₁ : CoalgHom R B C\nφ₂ : CoalgHom R A B\n⊢ Eq (↑(φ₁.comp φ₂)) ((↑φ₁).comp ↑φ₂)","decl":"@[simp]\ntheorem comp_toLinearMap (φ₁ : B →ₗc[R] C) (φ₂ : A →ₗc[R] B) :\n    φ₁.comp φ₂ = (φ₁ : B →ₗ[R] C) ∘ₗ (φ₂ : A →ₗ[R] B) := rfl\n\n"}
{"name":"CoalgHom.comp_id","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ : CoalgHom R A B\n⊢ Eq (φ.comp (CoalgHom.id R A)) φ","decl":"@[simp]\ntheorem comp_id : φ.comp (CoalgHom.id R A) = φ :=\n  ext fun _x => rfl\n\n"}
{"name":"CoalgHom.id_comp","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : Module R A\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nφ : CoalgHom R A B\n⊢ Eq ((CoalgHom.id R B).comp φ) φ","decl":"@[simp]\ntheorem id_comp : (CoalgHom.id R B).comp φ = φ :=\n  ext fun _x => rfl\n\n"}
{"name":"CoalgHom.comp_assoc","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nC : Type u_4\nD : Type u_5\ninst✝¹² : CommSemiring R\ninst✝¹¹ : AddCommMonoid A\ninst✝¹⁰ : Module R A\ninst✝⁹ : AddCommMonoid B\ninst✝⁸ : Module R B\ninst✝⁷ : AddCommMonoid C\ninst✝⁶ : Module R C\ninst✝⁵ : AddCommMonoid D\ninst✝⁴ : Module R D\ninst✝³ : CoalgebraStruct R A\ninst✝² : CoalgebraStruct R B\ninst✝¹ : CoalgebraStruct R C\ninst✝ : CoalgebraStruct R D\nφ₁ : CoalgHom R C D\nφ₂ : CoalgHom R B C\nφ₃ : CoalgHom R A B\n⊢ Eq ((φ₁.comp φ₂).comp φ₃) (φ₁.comp (φ₂.comp φ₃))","decl":"theorem comp_assoc (φ₁ : C →ₗc[R] D) (φ₂ : B →ₗc[R] C) (φ₃ : A →ₗc[R] B) :\n    (φ₁.comp φ₂).comp φ₃ = φ₁.comp (φ₂.comp φ₃) :=\n  ext fun _x => rfl\n\n"}
{"name":"CoalgHom.map_smul_of_tower","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁹ : CommSemiring R\ninst✝⁸ : AddCommMonoid A\ninst✝⁷ : Module R A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R B\ninst✝⁴ : CoalgebraStruct R A\ninst✝³ : CoalgebraStruct R B\nφ : CoalgHom R A B\nR' : Type u_6\ninst✝² : SMul R' A\ninst✝¹ : SMul R' B\ninst✝ : LinearMap.CompatibleSMul A B R' R\nr : R'\nx : A\n⊢ Eq (φ (HSMul.hSMul r x)) (HSMul.hSMul r (φ x))","decl":"theorem map_smul_of_tower {R'} [SMul R' A] [SMul R' B] [LinearMap.CompatibleSMul A B R' R] (r : R')\n    (x : A) : φ (r • x) = r • φ x :=\n  φ.toLinearMap.map_smul_of_tower r x\n\n"}
{"name":"CoalgHom.End_toOne_one","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq 1 (CoalgHom.id R A)","decl":"@[simps (config := .lemmasOnly) toSemigroup_toMul_mul toOne_one]\ninstance End : Monoid (A →ₗc[R] A) where\n  mul := comp\n  mul_assoc _ _ _ := rfl\n  one := CoalgHom.id R A\n  one_mul _ := ext fun _ => rfl\n  mul_one _ := ext fun _ => rfl\n\n"}
{"name":"CoalgHom.End_toSemigroup_toMul_mul","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\nφ₁ φ₂ : CoalgHom R A A\n⊢ Eq (HMul.hMul φ₁ φ₂) (φ₁.comp φ₂)","decl":"@[simps (config := .lemmasOnly) toSemigroup_toMul_mul toOne_one]\ninstance End : Monoid (A →ₗc[R] A) where\n  mul := comp\n  mul_assoc _ _ _ := rfl\n  one := CoalgHom.id R A\n  one_mul _ := ext fun _ => rfl\n  mul_one _ := ext fun _ => rfl\n\n"}
{"name":"CoalgHom.one_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\nx : A\n⊢ Eq (1 x) x","decl":"@[simp]\ntheorem one_apply (x : A) : (1 : A →ₗc[R] A) x = x :=\n  rfl\n\n"}
{"name":"CoalgHom.mul_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\nφ ψ : CoalgHom R A A\nx : A\n⊢ Eq ((HMul.hMul φ ψ) x) (φ (ψ x))","decl":"@[simp]\ntheorem mul_apply (φ ψ : A →ₗc[R] A) (x : A) : (φ * ψ) x = φ (ψ x) :=\n  rfl\n\n"}
{"name":"Coalgebra.counitCoalgHom_apply","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\nx : A\n⊢ Eq ((Coalgebra.counitCoalgHom R A) x) (CoalgebraStruct.counit x)","decl":"@[simp]\ntheorem counitCoalgHom_apply (x : A) :\n    counitCoalgHom R A x = counit x := rfl\n\n"}
{"name":"Coalgebra.counitCoalgHom_toLinearMap","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\n⊢ Eq (↑(Coalgebra.counitCoalgHom R A)) CoalgebraStruct.counit","decl":"@[simp]\ntheorem counitCoalgHom_toLinearMap :\n    counitCoalgHom R A = counit (R := R) (A := A) := rfl\n\n"}
{"name":"Coalgebra.subsingleton_to_ring","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\n⊢ Subsingleton (CoalgHom R A R)","decl":"instance subsingleton_to_ring : Subsingleton (A →ₗc[R] R) :=\n  ⟨fun f g => CoalgHom.ext fun x => by\n    have hf := CoalgHomClass.counit_comp_apply f x\n    have hg := CoalgHomClass.counit_comp_apply g x\n    simp_all only [CoalgHom.toLinearMap_eq_coe, LinearMap.coe_comp, CoalgHom.coe_toLinearMap,\n      Function.comp_apply, CommSemiring.counit_apply]⟩\n\n"}
{"name":"Coalgebra.ext_to_ring_iff","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\nf g : CoalgHom R A R\n⊢ Iff (Eq f g) True","decl":"@[ext high]\ntheorem ext_to_ring (f g : A →ₗc[R] R) : f = g := Subsingleton.elim _ _\n\n"}
{"name":"Coalgebra.ext_to_ring","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\nf g : CoalgHom R A R\n⊢ Eq f g","decl":"@[ext high]\ntheorem ext_to_ring (f g : A →ₗc[R] R) : f = g := Subsingleton.elim _ _\n\n"}
{"name":"Coalgebra.Repr.induced_left","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Coalgebra R A\ninst✝² : Coalgebra R B\na : A\nrepr : Coalgebra.Repr R a\nF : Type u_1\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nφ : F\na✝ : repr.ι\n⊢ Eq ((repr.induced φ).left a✝) (Function.comp (⇑φ) repr.left a✝)","decl":"/--\nIf `φ : A → B` is a coalgebra map and `a = ∑ xᵢ ⊗ yᵢ`, then `φ a = ∑ φ xᵢ ⊗ φ yᵢ`\n-/\n@[simps]\ndef Repr.induced {a : A} (repr : Repr R a)\n    {F : Type*} [FunLike F A B] [CoalgHomClass F R A B]\n    (φ : F) : Repr R (φ a) where\n  index := repr.index\n  left := φ ∘ repr.left\n  right := φ ∘ repr.right\n  eq := (congr($((CoalgHomClass.map_comp_comul φ).symm) a).trans <|\n      by rw [LinearMap.comp_apply, ← repr.eq, map_sum]; rfl).symm\n\n"}
{"name":"Coalgebra.Repr.induced_right","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Coalgebra R A\ninst✝² : Coalgebra R B\na : A\nrepr : Coalgebra.Repr R a\nF : Type u_1\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nφ : F\na✝ : repr.ι\n⊢ Eq ((repr.induced φ).right a✝) (Function.comp (⇑φ) repr.right a✝)","decl":"/--\nIf `φ : A → B` is a coalgebra map and `a = ∑ xᵢ ⊗ yᵢ`, then `φ a = ∑ φ xᵢ ⊗ φ yᵢ`\n-/\n@[simps]\ndef Repr.induced {a : A} (repr : Repr R a)\n    {F : Type*} [FunLike F A B] [CoalgHomClass F R A B]\n    (φ : F) : Repr R (φ a) where\n  index := repr.index\n  left := φ ∘ repr.left\n  right := φ ∘ repr.right\n  eq := (congr($((CoalgHomClass.map_comp_comul φ).symm) a).trans <|\n      by rw [LinearMap.comp_apply, ← repr.eq, map_sum]; rfl).symm\n\n"}
{"name":"Coalgebra.Repr.induced_ι","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Coalgebra R A\ninst✝² : Coalgebra R B\na : A\nrepr : Coalgebra.Repr R a\nF : Type u_1\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nφ : F\n⊢ Eq (repr.induced φ).ι repr.ι","decl":"/--\nIf `φ : A → B` is a coalgebra map and `a = ∑ xᵢ ⊗ yᵢ`, then `φ a = ∑ φ xᵢ ⊗ φ yᵢ`\n-/\n@[simps]\ndef Repr.induced {a : A} (repr : Repr R a)\n    {F : Type*} [FunLike F A B] [CoalgHomClass F R A B]\n    (φ : F) : Repr R (φ a) where\n  index := repr.index\n  left := φ ∘ repr.left\n  right := φ ∘ repr.right\n  eq := (congr($((CoalgHomClass.map_comp_comul φ).symm) a).trans <|\n      by rw [LinearMap.comp_apply, ← repr.eq, map_sum]; rfl).symm\n\n"}
{"name":"Coalgebra.Repr.induced_index","module":"Mathlib.RingTheory.Coalgebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid A\ninst✝⁶ : AddCommMonoid B\ninst✝⁵ : Module R A\ninst✝⁴ : Module R B\ninst✝³ : Coalgebra R A\ninst✝² : Coalgebra R B\na : A\nrepr : Coalgebra.Repr R a\nF : Type u_1\ninst✝¹ : FunLike F A B\ninst✝ : CoalgHomClass F R A B\nφ : F\n⊢ Eq (repr.induced φ).index repr.index","decl":"/--\nIf `φ : A → B` is a coalgebra map and `a = ∑ xᵢ ⊗ yᵢ`, then `φ a = ∑ φ xᵢ ⊗ φ yᵢ`\n-/\n@[simps]\ndef Repr.induced {a : A} (repr : Repr R a)\n    {F : Type*} [FunLike F A B] [CoalgHomClass F R A B]\n    (φ : F) : Repr R (φ a) where\n  index := repr.index\n  left := φ ∘ repr.left\n  right := φ ∘ repr.right\n  eq := (congr($((CoalgHomClass.map_comp_comul φ).symm) a).trans <|\n      by rw [LinearMap.comp_apply, ← repr.eq, map_sum]; rfl).symm\n\n"}
