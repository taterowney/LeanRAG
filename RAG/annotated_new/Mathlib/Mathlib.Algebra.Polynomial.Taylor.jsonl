{"name":"Polynomial.taylor_apply","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\nf : Polynomial R\n⊢ Eq ((Polynomial.taylor r) f) (f.comp (HAdd.hAdd Polynomial.X (Polynomial.C r)))","decl":"theorem taylor_apply : taylor r f = f.comp (X + C r) :=\n  rfl\n\n"}
{"name":"Polynomial.taylor_X","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\n⊢ Eq ((Polynomial.taylor r) Polynomial.X) (HAdd.hAdd Polynomial.X (Polynomial.C r))","decl":"@[simp]\ntheorem taylor_X : taylor r X = X + C r := by simp only [taylor_apply, X_comp]\n\n"}
{"name":"Polynomial.taylor_C","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr x : R\n⊢ Eq ((Polynomial.taylor r) (Polynomial.C x)) (Polynomial.C x)","decl":"@[simp]\ntheorem taylor_C (x : R) : taylor r (C x) = C x := by simp only [taylor_apply, C_comp]\n\n"}
{"name":"Polynomial.taylor_zero'","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Eq (Polynomial.taylor 0) LinearMap.id","decl":"@[simp]\ntheorem taylor_zero' : taylor (0 : R) = LinearMap.id := by\n  ext\n  simp only [taylor_apply, add_zero, comp_X, _root_.map_zero, LinearMap.id_comp,\n    Function.comp_apply, LinearMap.coe_comp]\n\n"}
{"name":"Polynomial.taylor_zero","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nf : Polynomial R\n⊢ Eq ((Polynomial.taylor 0) f) f","decl":"theorem taylor_zero (f : R[X]) : taylor 0 f = f := by rw [taylor_zero', LinearMap.id_apply]\n\n"}
{"name":"Polynomial.taylor_one","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\n⊢ Eq ((Polynomial.taylor r) 1) (Polynomial.C 1)","decl":"@[simp]\ntheorem taylor_one : taylor r (1 : R[X]) = C 1 := by rw [← C_1, taylor_C]\n\n"}
{"name":"Polynomial.taylor_monomial","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\ni : Nat\nk : R\n⊢ Eq ((Polynomial.taylor r) ((Polynomial.monomial i) k)) (HMul.hMul (Polynomial.C k) (HPow.hPow (HAdd.hAdd Polynomial.X (Polynomial.C r)) i))","decl":"@[simp]\ntheorem taylor_monomial (i : ℕ) (k : R) : taylor r (monomial i k) = C k * (X + C r) ^ i := by\n  simp [taylor_apply]\n\n"}
{"name":"Polynomial.taylor_coeff","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\nf : Polynomial R\nn : Nat\n⊢ Eq (((Polynomial.taylor r) f).coeff n) (Polynomial.eval r ((Polynomial.hasseDeriv n) f))","decl":"/-- The `k`th coefficient of `Polynomial.taylor r f` is `(Polynomial.hasseDeriv k f).eval r`. -/\ntheorem taylor_coeff (n : ℕ) : (taylor r f).coeff n = (hasseDeriv n f).eval r :=\n  show (lcoeff R n).comp (taylor r) f = (leval r).comp (hasseDeriv n) f by\n    congr 1; clear! f; ext i\n    simp only [leval_apply, mul_one, one_mul, eval_monomial, LinearMap.comp_apply, coeff_C_mul,\n      hasseDeriv_monomial, taylor_apply, monomial_comp, C_1, (commute_X (C r)).add_pow i,\n      map_sum]\n    simp only [lcoeff_apply, ← C_eq_natCast, mul_assoc, ← C_pow, ← C_mul, coeff_mul_C,\n      (Nat.cast_commute _ _).eq, coeff_X_pow, boole_mul, Finset.sum_ite_eq, Finset.mem_range]\n    split_ifs with h; · rfl\n    push_neg at h; rw [Nat.choose_eq_zero_of_lt h, Nat.cast_zero, mul_zero]\n\n"}
{"name":"Polynomial.taylor_coeff_zero","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\nf : Polynomial R\n⊢ Eq (((Polynomial.taylor r) f).coeff 0) (Polynomial.eval r f)","decl":"@[simp]\ntheorem taylor_coeff_zero : (taylor r f).coeff 0 = f.eval r := by\n  rw [taylor_coeff, hasseDeriv_zero, LinearMap.id_apply]\n\n"}
{"name":"Polynomial.taylor_coeff_one","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\nf : Polynomial R\n⊢ Eq (((Polynomial.taylor r) f).coeff 1) (Polynomial.eval r (Polynomial.derivative f))","decl":"@[simp]\ntheorem taylor_coeff_one : (taylor r f).coeff 1 = f.derivative.eval r := by\n  rw [taylor_coeff, hasseDeriv_one]\n\n"}
{"name":"Polynomial.natDegree_taylor","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\nr : R\n⊢ Eq ((Polynomial.taylor r) p).natDegree p.natDegree","decl":"@[simp]\ntheorem natDegree_taylor (p : R[X]) (r : R) : natDegree (taylor r p) = natDegree p := by\n  refine map_natDegree_eq_natDegree _ ?_\n  nontriviality R\n  intro n c c0\n  simp [taylor_monomial, natDegree_C_mul_of_mul_ne_zero, natDegree_pow_X_add_C, c0]\n\n"}
{"name":"Polynomial.taylor_mul","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nr : R\np q : Polynomial R\n⊢ Eq ((Polynomial.taylor r) (HMul.hMul p q)) (HMul.hMul ((Polynomial.taylor r) p) ((Polynomial.taylor r) q))","decl":"@[simp]\ntheorem taylor_mul {R} [CommSemiring R] (r : R) (p q : R[X]) :\n    taylor r (p * q) = taylor r p * taylor r q := by simp only [taylor_apply, mul_comp]\n\n"}
{"name":"Polynomial.taylorAlgHom_apply","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nr : R\na : Polynomial R\n⊢ Eq ((Polynomial.taylorAlgHom r) a) ((Polynomial.taylor r) a)","decl":"/-- `Polynomial.taylor` as an `AlgHom` for commutative semirings -/\n@[simps!]\ndef taylorAlgHom {R} [CommSemiring R] (r : R) : R[X] →ₐ[R] R[X] :=\n  AlgHom.ofLinearMap (taylor r) (taylor_one r) (taylor_mul r)\n\n"}
{"name":"Polynomial.taylor_taylor","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nf : Polynomial R\nr s : R\n⊢ Eq ((Polynomial.taylor r) ((Polynomial.taylor s) f)) ((Polynomial.taylor (HAdd.hAdd r s)) f)","decl":"theorem taylor_taylor {R} [CommSemiring R] (f : R[X]) (r s : R) :\n    taylor r (taylor s f) = taylor (r + s) f := by\n  simp only [taylor_apply, comp_assoc, map_add, add_comp, X_comp, C_comp, C_add, add_assoc]\n\n"}
{"name":"Polynomial.taylor_eval","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommSemiring R\nr : R\nf : Polynomial R\ns : R\n⊢ Eq (Polynomial.eval s ((Polynomial.taylor r) f)) (Polynomial.eval (HAdd.hAdd s r) f)","decl":"theorem taylor_eval {R} [CommSemiring R] (r : R) (f : R[X]) (s : R) :\n    (taylor r f).eval s = f.eval (s + r) := by\n  simp only [taylor_apply, eval_comp, eval_C, eval_X, eval_add]\n\n"}
{"name":"Polynomial.taylor_eval_sub","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommRing R\nr : R\nf : Polynomial R\ns : R\n⊢ Eq (Polynomial.eval (HSub.hSub s r) ((Polynomial.taylor r) f)) (Polynomial.eval s f)","decl":"theorem taylor_eval_sub {R} [CommRing R] (r : R) (f : R[X]) (s : R) :\n    (taylor r f).eval (s - r) = f.eval s := by rw [taylor_eval, sub_add_cancel]\n\n"}
{"name":"Polynomial.taylor_injective","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommRing R\nr : R\n⊢ Function.Injective ⇑(Polynomial.taylor r)","decl":"theorem taylor_injective {R} [CommRing R] (r : R) : Function.Injective (taylor r) := by\n  intro f g h\n  apply_fun taylor (-r) at h\n  simpa only [taylor_apply, comp_assoc, add_comp, X_comp, C_comp, C_neg, neg_add_cancel_right,\n    comp_X] using h\n\n"}
{"name":"Polynomial.eq_zero_of_hasseDeriv_eq_zero","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommRing R\nf : Polynomial R\nr : R\nh : ∀ (k : Nat), Eq (Polynomial.eval r ((Polynomial.hasseDeriv k) f)) 0\n⊢ Eq f 0","decl":"theorem eq_zero_of_hasseDeriv_eq_zero {R} [CommRing R] (f : R[X]) (r : R)\n    (h : ∀ k, (hasseDeriv k f).eval r = 0) : f = 0 := by\n  apply taylor_injective r\n  rw [LinearMap.map_zero]\n  ext k\n  simp only [taylor_coeff, h, coeff_zero]\n\n"}
{"name":"Polynomial.sum_taylor_eq","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"R : Type u_2\ninst✝ : CommRing R\nf : Polynomial R\nr : R\n⊢ Eq (((Polynomial.taylor r) f).sum fun i a => HMul.hMul (Polynomial.C a) (HPow.hPow (HSub.hSub Polynomial.X (Polynomial.C r)) i)) f","decl":"/-- Taylor's formula. -/\ntheorem sum_taylor_eq {R} [CommRing R] (f : R[X]) (r : R) :\n    ((taylor r f).sum fun i a => C a * (X - C r) ^ i) = f := by\n  rw [← comp_eq_sum_left, sub_eq_add_neg, ← C_neg, ← taylor_apply, taylor_taylor, neg_add_cancel,\n    taylor_zero]\n\n"}
{"name":"Polynomial.eval_add_of_sq_eq_zero","module":"Mathlib.Algebra.Polynomial.Taylor","initialProofState":"A : Type u_2\ninst✝ : CommSemiring A\np : Polynomial A\nx y : A\nhy : Eq (HPow.hPow y 2) 0\n⊢ Eq (Polynomial.eval (HAdd.hAdd x y) p) (HAdd.hAdd (Polynomial.eval x p) (HMul.hMul (Polynomial.eval x (Polynomial.derivative p)) y))","decl":"theorem eval_add_of_sq_eq_zero {A} [CommSemiring A] (p : Polynomial A) (x y : A) (hy : y ^ 2 = 0) :\n    p.eval (x + y) = p.eval x + p.derivative.eval x * y := by\n  rw [add_comm, ← Polynomial.taylor_eval,\n    Polynomial.eval_eq_sum_range' ((Nat.lt_succ_self _).trans (Nat.lt_succ_self _)),\n    Finset.sum_range_succ', Finset.sum_range_succ']\n  simp [pow_succ, mul_assoc, ← pow_two, hy, add_comm (eval x p)]\n\n"}
