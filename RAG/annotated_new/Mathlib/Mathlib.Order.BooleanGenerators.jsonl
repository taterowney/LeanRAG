{"name":"IsCompactlyGenerated.BooleanGenerators.isAtom","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝ : CompleteLattice α\nS : Set α\nself : IsCompactlyGenerated.BooleanGenerators S\nI : α\na✝ : Membership.mem S I\n⊢ IsAtom I","decl":"/--\nAn alternative constructor for boolean algebras.\n\nA set of *boolean generators* in a compactly generated complete lattice is a subset `S` such that\n\n* the elements of `S` are all atoms, and\n* the set `S` satisfies an atomicity condition:\n  any compact element below the supremum of a finite subset `s` of generators\n  is equal to the supremum of a subset of `s`.\n\nIf the supremum of `S` is the whole lattice,\nthen the lattice is a boolean algebra\n(see `IsCompactlyGenerated.BooleanGenerators.booleanAlgebra_of_sSup_eq_top`).\n-/\nstructure BooleanGenerators (S : Set α) : Prop where\n  /-- The elements in a collection of boolean generators are all atoms. -/\n  isAtom : ∀ I ∈ S, IsAtom I\n  /-- The elements in a collection of boolean generators satisfy an atomicity condition:\n  any compact element below the supremum of a finite subset `s` of generators\n  is equal to the supremum of a subset of `s`. -/\n  finitelyAtomistic : ∀ (s : Finset α) (a : α),\n      ↑s ⊆ S → IsCompactElement a → a ≤ s.sup id → ∃ t ⊆ s, a = t.sup id\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.finitelyAtomistic","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝ : CompleteLattice α\nS : Set α\nself : IsCompactlyGenerated.BooleanGenerators S\ns : Finset α\na : α\na✝² : HasSubset.Subset (↑s) S\na✝¹ : CompleteLattice.IsCompactElement a\na✝ : LE.le a (s.sup id)\n⊢ Exists fun t => And (HasSubset.Subset t s) (Eq a (t.sup id))","decl":"/--\nAn alternative constructor for boolean algebras.\n\nA set of *boolean generators* in a compactly generated complete lattice is a subset `S` such that\n\n* the elements of `S` are all atoms, and\n* the set `S` satisfies an atomicity condition:\n  any compact element below the supremum of a finite subset `s` of generators\n  is equal to the supremum of a subset of `s`.\n\nIf the supremum of `S` is the whole lattice,\nthen the lattice is a boolean algebra\n(see `IsCompactlyGenerated.BooleanGenerators.booleanAlgebra_of_sSup_eq_top`).\n-/\nstructure BooleanGenerators (S : Set α) : Prop where\n  /-- The elements in a collection of boolean generators are all atoms. -/\n  isAtom : ∀ I ∈ S, IsAtom I\n  /-- The elements in a collection of boolean generators satisfy an atomicity condition:\n  any compact element below the supremum of a finite subset `s` of generators\n  is equal to the supremum of a subset of `s`. -/\n  finitelyAtomistic : ∀ (s : Finset α) (a : α),\n      ↑s ⊆ S → IsCompactElement a → a ≤ s.sup id → ∃ t ⊆ s, a = t.sup id\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.mono","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝ : CompleteLattice α\nS : Set α\nhS : IsCompactlyGenerated.BooleanGenerators S\nT : Set α\nhTS : HasSubset.Subset T S\n⊢ IsCompactlyGenerated.BooleanGenerators T","decl":"lemma mono (hS : BooleanGenerators S) {T : Set α} (hTS : T ⊆ S) : BooleanGenerators T where\n  isAtom I hI := hS.isAtom I (hTS hI)\n  finitelyAtomistic := fun s a hs ↦ hS.finitelyAtomistic s a (le_trans hs hTS)\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.atomistic","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\na : α\nha : LE.le a (SupSet.sSup S)\n⊢ Exists fun T => And (HasSubset.Subset T S) (Eq a (SupSet.sSup T))","decl":"lemma atomistic (hS : BooleanGenerators S) (a : α) (ha : a ≤ sSup S) : ∃ T ⊆ S, a = sSup T := by\n  obtain ⟨C, hC, rfl⟩ := IsCompactlyGenerated.exists_sSup_eq a\n  have aux : ∀ b : α, IsCompactElement b → b ≤ sSup S → ∃ T ⊆ S, b = sSup T := by\n    intro b hb hbS\n    obtain ⟨s, hs₁, hs₂⟩ := hb S hbS\n    obtain ⟨t, ht, rfl⟩ := hS.finitelyAtomistic s b hs₁ hb hs₂\n    refine ⟨t, ?_, Finset.sup_id_eq_sSup t⟩\n    refine Set.Subset.trans ?_ hs₁\n    simpa only [Finset.coe_subset] using ht\n  choose T hT₁ hT₂ using aux\n  use sSup {T c h₁ h₂ | (c ∈ C) (h₁ : IsCompactElement c) (h₂ : c ≤ sSup S)}\n  constructor\n  · apply _root_.sSup_le\n    rintro _ ⟨c, -, h₁, h₂, rfl⟩\n    apply hT₁\n  · apply le_antisymm\n    · apply _root_.sSup_le\n      intro c hc\n      rw [hT₂ c (hC _ hc) ((le_sSup hc).trans ha)]\n      apply sSup_le_sSup\n      apply _root_.le_sSup\n      use c, hc, hC _ hc, (le_sSup hc).trans ha\n    · simp only [Set.sSup_eq_sUnion, sSup_le_iff, Set.mem_sUnion, Set.mem_setOf_eq,\n        forall_exists_index, and_imp]\n      rintro a T b hbC hb hbS rfl haT\n      apply (le_sSup haT).trans\n      rw [← hT₂]\n      exact le_sSup hbC\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.isAtomistic_of_sSup_eq_top","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\nh : Eq (SupSet.sSup S) Top.top\n⊢ IsAtomistic α","decl":"lemma isAtomistic_of_sSup_eq_top (hS : BooleanGenerators S) (h : sSup S = ⊤) :\n    IsAtomistic α := by\n  refine ⟨fun a ↦ ?_⟩\n  obtain ⟨s, hs, hs'⟩ := hS.atomistic a (h ▸ le_top)\n  exact ⟨s, hs', fun I hI ↦ hS.isAtom I (hs hI)⟩\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.mem_of_isAtom_of_le_sSup_atoms","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\na : α\nha : IsAtom a\nhaS : LE.le a (SupSet.sSup S)\n⊢ Membership.mem S a","decl":"lemma mem_of_isAtom_of_le_sSup_atoms (hS : BooleanGenerators S) (a : α) (ha : IsAtom a)\n    (haS : a ≤ sSup S) : a ∈ S := by\n  obtain ⟨T, hT, rfl⟩ := hS.atomistic a haS\n  obtain rfl | ⟨a, haT⟩ := T.eq_empty_or_nonempty\n  · simp only [sSup_empty] at ha\n    exact (ha.1 rfl).elim\n  suffices sSup T = a from this ▸ hT haT\n  have : a ≤ sSup T := le_sSup haT\n  rwa [ha.le_iff_eq, eq_comm] at this\n  exact (hS.isAtom a (hT haT)).1\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.sSup_inter","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\nT₁ T₂ : Set α\nhT₁ : HasSubset.Subset T₁ S\nhT₂ : HasSubset.Subset T₂ S\n⊢ Eq (SupSet.sSup (Inter.inter T₁ T₂)) (Min.min (SupSet.sSup T₁) (SupSet.sSup T₂))","decl":"lemma sSup_inter (hS : BooleanGenerators S) {T₁ T₂ : Set α} (hT₁ : T₁ ⊆ S) (hT₂ : T₂ ⊆ S) :\n    sSup (T₁ ∩ T₂) = (sSup T₁) ⊓ (sSup T₂) := by\n  apply le_antisymm\n  · apply le_inf\n    · apply sSup_le_sSup Set.inter_subset_left\n    · apply sSup_le_sSup Set.inter_subset_right\n  obtain ⟨X, hX, hX'⟩ := hS.atomistic (sSup T₁ ⊓ sSup T₂) (inf_le_left.trans (sSup_le_sSup hT₁))\n  rw [hX']\n  apply _root_.sSup_le\n  intro I hI\n  apply _root_.le_sSup\n  constructor\n  · apply (hS.mono hT₁).mem_of_isAtom_of_le_sSup_atoms _ _ _\n    · exact (hS.mono hX).isAtom I hI\n    · exact (_root_.le_sSup hI).trans (hX'.ge.trans inf_le_left)\n  · apply (hS.mono hT₂).mem_of_isAtom_of_le_sSup_atoms _ _ _\n    · exact (hS.mono hX).isAtom I hI\n    · exact (_root_.le_sSup hI).trans (hX'.ge.trans inf_le_right)\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.complementedLattice_of_sSup_eq_top","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\nh : Eq (SupSet.sSup S) Top.top\n⊢ ComplementedLattice α","decl":"lemma complementedLattice_of_sSup_eq_top (hS : BooleanGenerators S) (h : sSup S = ⊤) :\n    ComplementedLattice α := by\n  let _i := hS.distribLattice_of_sSup_eq_top h\n  have _i₁ := isAtomistic_of_sSup_eq_top hS h\n  apply complementedLattice_of_isAtomistic\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.sSup_le_sSup_iff_of_atoms","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\nX Y : Set α\nhX : HasSubset.Subset X S\nhY : HasSubset.Subset Y S\n⊢ Iff (LE.le (SupSet.sSup X) (SupSet.sSup Y)) (HasSubset.Subset X Y)","decl":"lemma sSup_le_sSup_iff_of_atoms (hS : BooleanGenerators S) (X Y : Set α) (hX : X ⊆ S) (hY : Y ⊆ S) :\n    sSup X ≤ sSup Y ↔ X ⊆ Y := by\n  refine ⟨?_, sSup_le_sSup⟩\n  intro h a ha\n  apply (hS.mono hY).mem_of_isAtom_of_le_sSup_atoms _ _ ((le_sSup ha).trans h)\n  exact (hS.mono hX).isAtom a ha\n\n"}
{"name":"IsCompactlyGenerated.BooleanGenerators.eq_atoms_of_sSup_eq_top","module":"Mathlib.Order.BooleanGenerators","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nS : Set α\ninst✝ : IsCompactlyGenerated α\nhS : IsCompactlyGenerated.BooleanGenerators S\nh : Eq (SupSet.sSup S) Top.top\n⊢ Eq S (setOf fun a => IsAtom a)","decl":"lemma eq_atoms_of_sSup_eq_top (hS : BooleanGenerators S) (h : sSup S = ⊤) :\n    S = {a : α | IsAtom a} := by\n  apply le_antisymm\n  · exact hS.isAtom\n  intro a ha\n  obtain ⟨T, hT, rfl⟩ := hS.atomistic a (le_top.trans h.ge)\n  exact hS.mem_of_isAtom_of_le_sSup_atoms _ ha (sSup_le_sSup hT)\n\n"}
