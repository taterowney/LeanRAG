{"name":"TrivSqZeroExt.fst_expSeries","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁵ : Field 𝕜\ninst✝¹⁴ : Ring R\ninst✝¹³ : AddCommGroup M\ninst✝¹² : Algebra 𝕜 R\ninst✝¹¹ : Module 𝕜 M\ninst✝¹⁰ : Module R M\ninst✝⁹ : Module (MulOpposite R) M\ninst✝⁸ : SMulCommClass R (MulOpposite R) M\ninst✝⁷ : IsScalarTower 𝕜 R M\ninst✝⁶ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : TopologicalSpace M\ninst✝³ : TopologicalRing R\ninst✝² : TopologicalAddGroup M\ninst✝¹ : ContinuousSMul R M\ninst✝ : ContinuousSMul (MulOpposite R) M\nx : TrivSqZeroExt R M\nn : Nat\n⊢ Eq ((NormedSpace.expSeries 𝕜 (TrivSqZeroExt R M) n) fun x_1 => x).fst ((NormedSpace.expSeries 𝕜 R n) fun x_1 => x.fst)","decl":"@[simp] theorem fst_expSeries (x : tsze R M) (n : ℕ) :\n    fst (expSeries 𝕜 (tsze R M) n fun _ => x) = expSeries 𝕜 R n fun _ => x.fst := by\n  simp [expSeries_apply_eq]\n\n"}
{"name":"TrivSqZeroExt.snd_expSeries_of_smul_comm","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁶ : Field 𝕜\ninst✝¹⁵ : CharZero 𝕜\ninst✝¹⁴ : Ring R\ninst✝¹³ : AddCommGroup M\ninst✝¹² : Algebra 𝕜 R\ninst✝¹¹ : Module 𝕜 M\ninst✝¹⁰ : Module R M\ninst✝⁹ : Module (MulOpposite R) M\ninst✝⁸ : SMulCommClass R (MulOpposite R) M\ninst✝⁷ : IsScalarTower 𝕜 R M\ninst✝⁶ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : TopologicalSpace M\ninst✝³ : TopologicalRing R\ninst✝² : TopologicalAddGroup M\ninst✝¹ : ContinuousSMul R M\ninst✝ : ContinuousSMul (MulOpposite R) M\nx : TrivSqZeroExt R M\nhx : Eq (HSMul.hSMul (MulOpposite.op x.fst) x.snd) (HSMul.hSMul x.fst x.snd)\nn : Nat\n⊢ Eq ((NormedSpace.expSeries 𝕜 (TrivSqZeroExt R M) (HAdd.hAdd n 1)) fun x_1 => x).snd (HSMul.hSMul ((NormedSpace.expSeries 𝕜 R n) fun x_1 => x.fst) x.snd)","decl":"theorem snd_expSeries_of_smul_comm\n    (x : tsze R M) (hx : MulOpposite.op x.fst • x.snd = x.fst • x.snd) (n : ℕ) :\n    snd (expSeries 𝕜 (tsze R M) (n + 1) fun _ => x) = (expSeries 𝕜 R n fun _ => x.fst) • x.snd := by\n  simp_rw [expSeries_apply_eq, snd_smul, snd_pow_of_smul_comm _ _ hx,\n    ← Nat.cast_smul_eq_nsmul 𝕜 (n + 1), smul_smul, smul_assoc, Nat.factorial_succ, Nat.pred_succ,\n    Nat.cast_mul, mul_inv_rev,\n    inv_mul_cancel_right₀ ((Nat.cast_ne_zero (R := 𝕜)).mpr <| Nat.succ_ne_zero n)]\n\n"}
{"name":"TrivSqZeroExt.hasSum_snd_expSeries_of_smul_comm","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁶ : Field 𝕜\ninst✝¹⁵ : CharZero 𝕜\ninst✝¹⁴ : Ring R\ninst✝¹³ : AddCommGroup M\ninst✝¹² : Algebra 𝕜 R\ninst✝¹¹ : Module 𝕜 M\ninst✝¹⁰ : Module R M\ninst✝⁹ : Module (MulOpposite R) M\ninst✝⁸ : SMulCommClass R (MulOpposite R) M\ninst✝⁷ : IsScalarTower 𝕜 R M\ninst✝⁶ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : TopologicalSpace M\ninst✝³ : TopologicalRing R\ninst✝² : TopologicalAddGroup M\ninst✝¹ : ContinuousSMul R M\ninst✝ : ContinuousSMul (MulOpposite R) M\nx : TrivSqZeroExt R M\nhx : Eq (HSMul.hSMul (MulOpposite.op x.fst) x.snd) (HSMul.hSMul x.fst x.snd)\ne : R\nh : HasSum (fun n => (NormedSpace.expSeries 𝕜 R n) fun x_1 => x.fst) e\n⊢ HasSum (fun n => ((NormedSpace.expSeries 𝕜 (TrivSqZeroExt R M) n) fun x_1 => x).snd) (HSMul.hSMul e x.snd)","decl":"/-- If `NormedSpace.exp R x.fst` converges to `e`\nthen `(NormedSpace.exp R x).snd` converges to `e • x.snd`. -/\ntheorem hasSum_snd_expSeries_of_smul_comm (x : tsze R M)\n    (hx : MulOpposite.op x.fst • x.snd = x.fst • x.snd) {e : R}\n    (h : HasSum (fun n => expSeries 𝕜 R n fun _ => x.fst) e) :\n    HasSum (fun n => snd (expSeries 𝕜 (tsze R M) n fun _ => x)) (e • x.snd) := by\n  rw [← hasSum_nat_add_iff' 1]\n  simp_rw [snd_expSeries_of_smul_comm _ _ hx]\n  simp_rw [expSeries_apply_eq] at *\n  rw [Finset.range_one, Finset.sum_singleton, Nat.factorial_zero, Nat.cast_one, pow_zero,\n    inv_one, one_smul, snd_one, sub_zero]\n  exact h.smul_const _\n\n"}
{"name":"TrivSqZeroExt.hasSum_expSeries_of_smul_comm","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁶ : Field 𝕜\ninst✝¹⁵ : CharZero 𝕜\ninst✝¹⁴ : Ring R\ninst✝¹³ : AddCommGroup M\ninst✝¹² : Algebra 𝕜 R\ninst✝¹¹ : Module 𝕜 M\ninst✝¹⁰ : Module R M\ninst✝⁹ : Module (MulOpposite R) M\ninst✝⁸ : SMulCommClass R (MulOpposite R) M\ninst✝⁷ : IsScalarTower 𝕜 R M\ninst✝⁶ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁵ : TopologicalSpace R\ninst✝⁴ : TopologicalSpace M\ninst✝³ : TopologicalRing R\ninst✝² : TopologicalAddGroup M\ninst✝¹ : ContinuousSMul R M\ninst✝ : ContinuousSMul (MulOpposite R) M\nx : TrivSqZeroExt R M\nhx : Eq (HSMul.hSMul (MulOpposite.op x.fst) x.snd) (HSMul.hSMul x.fst x.snd)\ne : R\nh : HasSum (fun n => (NormedSpace.expSeries 𝕜 R n) fun x_1 => x.fst) e\n⊢ HasSum (fun n => (NormedSpace.expSeries 𝕜 (TrivSqZeroExt R M) n) fun x_1 => x) (HAdd.hAdd (TrivSqZeroExt.inl e) (TrivSqZeroExt.inr (HSMul.hSMul e x.snd)))","decl":"/-- If `NormedSpace.exp R x.fst` converges to `e`\nthen `NormedSpace.exp R x` converges to `inl e + inr (e • x.snd)`. -/\ntheorem hasSum_expSeries_of_smul_comm\n    (x : tsze R M) (hx : MulOpposite.op x.fst • x.snd = x.fst • x.snd)\n    {e : R} (h : HasSum (fun n => expSeries 𝕜 R n fun _ => x.fst) e) :\n    HasSum (fun n => expSeries 𝕜 (tsze R M) n fun _ => x) (inl e + inr (e • x.snd)) := by\n  have : HasSum (fun n => fst (expSeries 𝕜 (tsze R M) n fun _ => x)) e := by\n    simpa [fst_expSeries] using h\n  simpa only [inl_fst_add_inr_snd_eq] using\n    (hasSum_inl _ <| this).add (hasSum_inr _ <| hasSum_snd_expSeries_of_smul_comm 𝕜 x hx h)\n\n"}
{"name":"TrivSqZeroExt.exp_def_of_smul_comm","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁸ : Field 𝕜\ninst✝¹⁷ : CharZero 𝕜\ninst✝¹⁶ : Ring R\ninst✝¹⁵ : AddCommGroup M\ninst✝¹⁴ : Algebra 𝕜 R\ninst✝¹³ : Module 𝕜 M\ninst✝¹² : Module R M\ninst✝¹¹ : Module (MulOpposite R) M\ninst✝¹⁰ : SMulCommClass R (MulOpposite R) M\ninst✝⁹ : IsScalarTower 𝕜 R M\ninst✝⁸ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nx : TrivSqZeroExt R M\nhx : Eq (HSMul.hSMul (MulOpposite.op x.fst) x.snd) (HSMul.hSMul x.fst x.snd)\n⊢ Eq (NormedSpace.exp 𝕜 x) (HAdd.hAdd (TrivSqZeroExt.inl (NormedSpace.exp 𝕜 x.fst)) (TrivSqZeroExt.inr (HSMul.hSMul (NormedSpace.exp 𝕜 x.fst) x.snd)))","decl":"theorem exp_def_of_smul_comm (x : tsze R M) (hx : MulOpposite.op x.fst • x.snd = x.fst • x.snd) :\n    exp 𝕜 x = inl (exp 𝕜 x.fst) + inr (exp 𝕜 x.fst • x.snd) := by\n  simp_rw [exp, FormalMultilinearSeries.sum]\n  by_cases h : Summable (fun (n : ℕ) => (expSeries 𝕜 R n) fun _ ↦ fst x)\n  · refine (hasSum_expSeries_of_smul_comm 𝕜 x hx ?_).tsum_eq\n    exact h.hasSum\n  · rw [tsum_eq_zero_of_not_summable h, zero_smul, inr_zero, inl_zero, zero_add,\n      tsum_eq_zero_of_not_summable]\n    simp_rw [← fst_expSeries] at h\n    refine mt ?_ h\n    exact (Summable.map · (TrivSqZeroExt.fstHom 𝕜 R M).toLinearMap continuous_fst)\n\n"}
{"name":"TrivSqZeroExt.exp_inl","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁸ : Field 𝕜\ninst✝¹⁷ : CharZero 𝕜\ninst✝¹⁶ : Ring R\ninst✝¹⁵ : AddCommGroup M\ninst✝¹⁴ : Algebra 𝕜 R\ninst✝¹³ : Module 𝕜 M\ninst✝¹² : Module R M\ninst✝¹¹ : Module (MulOpposite R) M\ninst✝¹⁰ : SMulCommClass R (MulOpposite R) M\ninst✝⁹ : IsScalarTower 𝕜 R M\ninst✝⁸ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nx : R\n⊢ Eq (NormedSpace.exp 𝕜 (TrivSqZeroExt.inl x)) (TrivSqZeroExt.inl (NormedSpace.exp 𝕜 x))","decl":"@[simp]\ntheorem exp_inl (x : R) : exp 𝕜 (inl x : tsze R M) = inl (exp 𝕜 x) := by\n  rw [exp_def_of_smul_comm, snd_inl, fst_inl, smul_zero, inr_zero, add_zero]\n  rw [snd_inl, fst_inl, smul_zero, smul_zero]\n\n"}
{"name":"TrivSqZeroExt.exp_inr","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁸ : Field 𝕜\ninst✝¹⁷ : CharZero 𝕜\ninst✝¹⁶ : Ring R\ninst✝¹⁵ : AddCommGroup M\ninst✝¹⁴ : Algebra 𝕜 R\ninst✝¹³ : Module 𝕜 M\ninst✝¹² : Module R M\ninst✝¹¹ : Module (MulOpposite R) M\ninst✝¹⁰ : SMulCommClass R (MulOpposite R) M\ninst✝⁹ : IsScalarTower 𝕜 R M\ninst✝⁸ : IsScalarTower 𝕜 (MulOpposite R) M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nm : M\n⊢ Eq (NormedSpace.exp 𝕜 (TrivSqZeroExt.inr m)) (HAdd.hAdd 1 (TrivSqZeroExt.inr m))","decl":"@[simp]\ntheorem exp_inr (m : M) : exp 𝕜 (inr m : tsze R M) = 1 + inr m := by\n  rw [exp_def_of_smul_comm, snd_inr, fst_inr, exp_zero, one_smul, inl_one]\n  rw [snd_inr, fst_inr, MulOpposite.op_zero, zero_smul, zero_smul]\n\n"}
{"name":"TrivSqZeroExt.exp_def","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁷ : Field 𝕜\ninst✝¹⁶ : CharZero 𝕜\ninst✝¹⁵ : CommRing R\ninst✝¹⁴ : AddCommGroup M\ninst✝¹³ : Algebra 𝕜 R\ninst✝¹² : Module 𝕜 M\ninst✝¹¹ : Module R M\ninst✝¹⁰ : Module (MulOpposite R) M\ninst✝⁹ : IsCentralScalar R M\ninst✝⁸ : IsScalarTower 𝕜 R M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nx : TrivSqZeroExt R M\n⊢ Eq (NormedSpace.exp 𝕜 x) (HAdd.hAdd (TrivSqZeroExt.inl (NormedSpace.exp 𝕜 x.fst)) (TrivSqZeroExt.inr (HSMul.hSMul (NormedSpace.exp 𝕜 x.fst) x.snd)))","decl":"theorem exp_def (x : tsze R M) : exp 𝕜 x = inl (exp 𝕜 x.fst) + inr (exp 𝕜 x.fst • x.snd) :=\n  exp_def_of_smul_comm 𝕜 x (op_smul_eq_smul _ _)\n\n"}
{"name":"TrivSqZeroExt.fst_exp","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁷ : Field 𝕜\ninst✝¹⁶ : CharZero 𝕜\ninst✝¹⁵ : CommRing R\ninst✝¹⁴ : AddCommGroup M\ninst✝¹³ : Algebra 𝕜 R\ninst✝¹² : Module 𝕜 M\ninst✝¹¹ : Module R M\ninst✝¹⁰ : Module (MulOpposite R) M\ninst✝⁹ : IsCentralScalar R M\ninst✝⁸ : IsScalarTower 𝕜 R M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nx : TrivSqZeroExt R M\n⊢ Eq (NormedSpace.exp 𝕜 x).fst (NormedSpace.exp 𝕜 x.fst)","decl":"@[simp]\ntheorem fst_exp (x : tsze R M) : fst (exp 𝕜 x) = exp 𝕜 x.fst := by\n  rw [exp_def, fst_add, fst_inl, fst_inr, add_zero]\n\n"}
{"name":"TrivSqZeroExt.snd_exp","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁷ : Field 𝕜\ninst✝¹⁶ : CharZero 𝕜\ninst✝¹⁵ : CommRing R\ninst✝¹⁴ : AddCommGroup M\ninst✝¹³ : Algebra 𝕜 R\ninst✝¹² : Module 𝕜 M\ninst✝¹¹ : Module R M\ninst✝¹⁰ : Module (MulOpposite R) M\ninst✝⁹ : IsCentralScalar R M\ninst✝⁸ : IsScalarTower 𝕜 R M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nx : TrivSqZeroExt R M\n⊢ Eq (NormedSpace.exp 𝕜 x).snd (HSMul.hSMul (NormedSpace.exp 𝕜 x.fst) x.snd)","decl":"@[simp]\ntheorem snd_exp (x : tsze R M) : snd (exp 𝕜 x) = exp 𝕜 x.fst • x.snd := by\n  rw [exp_def, snd_add, snd_inl, snd_inr, zero_add]\n\n"}
{"name":"TrivSqZeroExt.eq_smul_exp_of_invertible","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁸ : Field 𝕜\ninst✝¹⁷ : CharZero 𝕜\ninst✝¹⁶ : CommRing R\ninst✝¹⁵ : AddCommGroup M\ninst✝¹⁴ : Algebra 𝕜 R\ninst✝¹³ : Module 𝕜 M\ninst✝¹² : Module R M\ninst✝¹¹ : Module (MulOpposite R) M\ninst✝¹⁰ : IsCentralScalar R M\ninst✝⁹ : IsScalarTower 𝕜 R M\ninst✝⁸ : TopologicalSpace R\ninst✝⁷ : TopologicalSpace M\ninst✝⁶ : TopologicalRing R\ninst✝⁵ : TopologicalAddGroup M\ninst✝⁴ : ContinuousSMul R M\ninst✝³ : ContinuousSMul (MulOpposite R) M\ninst✝² : T2Space R\ninst✝¹ : T2Space M\nx : TrivSqZeroExt R M\ninst✝ : Invertible x.fst\n⊢ Eq x (HSMul.hSMul x.fst (NormedSpace.exp 𝕜 (HSMul.hSMul (Invertible.invOf x.fst) (TrivSqZeroExt.inr x.snd))))","decl":"/-- Polar form of trivial-square-zero extension. -/\ntheorem eq_smul_exp_of_invertible (x : tsze R M) [Invertible x.fst] :\n    x = x.fst • exp 𝕜 (⅟ x.fst • inr x.snd) := by\n  rw [← inr_smul, exp_inr, smul_add, ← inl_one, ← inl_smul, ← inr_smul, smul_eq_mul, mul_one,\n    smul_smul, mul_invOf_self, one_smul, inl_fst_add_inr_snd_eq]\n\n"}
{"name":"TrivSqZeroExt.eq_smul_exp_of_ne_zero","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"𝕜 : Type u_1\nR : Type u_3\nM : Type u_4\ninst✝¹⁷ : Field 𝕜\ninst✝¹⁶ : CharZero 𝕜\ninst✝¹⁵ : Field R\ninst✝¹⁴ : AddCommGroup M\ninst✝¹³ : Algebra 𝕜 R\ninst✝¹² : Module 𝕜 M\ninst✝¹¹ : Module R M\ninst✝¹⁰ : Module (MulOpposite R) M\ninst✝⁹ : IsCentralScalar R M\ninst✝⁸ : IsScalarTower 𝕜 R M\ninst✝⁷ : TopologicalSpace R\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : TopologicalRing R\ninst✝⁴ : TopologicalAddGroup M\ninst✝³ : ContinuousSMul R M\ninst✝² : ContinuousSMul (MulOpposite R) M\ninst✝¹ : T2Space R\ninst✝ : T2Space M\nx : TrivSqZeroExt R M\nhx : Ne x.fst 0\n⊢ Eq x (HSMul.hSMul x.fst (NormedSpace.exp 𝕜 (HSMul.hSMul (Inv.inv x.fst) (TrivSqZeroExt.inr x.snd))))","decl":"/-- More convenient version of `TrivSqZeroExt.eq_smul_exp_of_invertible` for when `R` is a\nfield. -/\ntheorem eq_smul_exp_of_ne_zero (x : tsze R M) (hx : x.fst ≠ 0) :\n    x = x.fst • exp 𝕜 (x.fst⁻¹ • inr x.snd) :=\n  letI : Invertible x.fst := invertibleOfNonzero hx\n  eq_smul_exp_of_invertible _ _\n\n"}
{"name":"TrivSqZeroExt.norm_def","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝¹ : SeminormedRing R\ninst✝ : SeminormedAddCommGroup M\nx : TrivSqZeroExt R M\n⊢ Eq (Norm.norm x) (HAdd.hAdd (Norm.norm x.fst) (Norm.norm x.snd))","decl":"theorem norm_def (x : tsze R M) : ‖x‖ = ‖fst x‖ + ‖snd x‖ := by\n  rw [WithLp.prod_norm_eq_add (by norm_num)]\n  simp only [ENNReal.one_toReal, Real.rpow_one, div_one]\n  rfl\n\n"}
{"name":"TrivSqZeroExt.nnnorm_def","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝¹ : SeminormedRing R\ninst✝ : SeminormedAddCommGroup M\nx : TrivSqZeroExt R M\n⊢ Eq (NNNorm.nnnorm x) (HAdd.hAdd (NNNorm.nnnorm x.fst) (NNNorm.nnnorm x.snd))","decl":"theorem nnnorm_def (x : tsze R M) : ‖x‖₊ = ‖fst x‖₊ + ‖snd x‖₊ := by\n  ext; simp [norm_def]\n\n"}
{"name":"TrivSqZeroExt.norm_inl","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝¹ : SeminormedRing R\ninst✝ : SeminormedAddCommGroup M\nr : R\n⊢ Eq (Norm.norm (TrivSqZeroExt.inl r)) (Norm.norm r)","decl":"@[simp] theorem norm_inl (r : R) : ‖(inl r : tsze R M)‖ = ‖r‖ := by simp [norm_def]\n"}
{"name":"TrivSqZeroExt.norm_inr","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝¹ : SeminormedRing R\ninst✝ : SeminormedAddCommGroup M\nm : M\n⊢ Eq (Norm.norm (TrivSqZeroExt.inr m)) (Norm.norm m)","decl":"@[simp] theorem norm_inr (m : M) : ‖(inr m : tsze R M)‖ = ‖m‖ := by simp [norm_def]\n\n"}
{"name":"TrivSqZeroExt.nnnorm_inl","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝¹ : SeminormedRing R\ninst✝ : SeminormedAddCommGroup M\nr : R\n⊢ Eq (NNNorm.nnnorm (TrivSqZeroExt.inl r)) (NNNorm.nnnorm r)","decl":"@[simp] theorem nnnorm_inl (r : R) : ‖(inl r : tsze R M)‖₊ = ‖r‖₊ := by simp [nnnorm_def]\n"}
{"name":"TrivSqZeroExt.nnnorm_inr","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝¹ : SeminormedRing R\ninst✝ : SeminormedAddCommGroup M\nm : M\n⊢ Eq (NNNorm.nnnorm (TrivSqZeroExt.inr m)) (NNNorm.nnnorm m)","decl":"@[simp] theorem nnnorm_inr (m : M) : ‖(inr m : tsze R M)‖₊ = ‖m‖₊ := by simp [nnnorm_def]\n\n"}
{"name":"TrivSqZeroExt.instL1BoundedSMul","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"S : Type u_2\nR : Type u_3\nM : Type u_4\ninst✝⁹ : SeminormedCommRing S\ninst✝⁸ : SeminormedRing R\ninst✝⁷ : SeminormedAddCommGroup M\ninst✝⁶ : Algebra S R\ninst✝⁵ : Module S M\ninst✝⁴ : BoundedSMul S R\ninst✝³ : BoundedSMul S M\ninst✝² : Module R M\ninst✝¹ : Module (MulOpposite R) M\ninst✝ : SMulCommClass R (MulOpposite R) M\n⊢ BoundedSMul S (TrivSqZeroExt R M)","decl":"instance instL1BoundedSMul : BoundedSMul S (tsze R M) :=\n  inferInstanceAs <| BoundedSMul S (WithLp 1 <| R × M)\n\n"}
{"name":"TrivSqZeroExt.instNormOneClass","module":"Mathlib.Analysis.Normed.Algebra.TrivSqZeroExt","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝⁵ : SeminormedRing R\ninst✝⁴ : SeminormedAddCommGroup M\ninst✝³ : Module R M\ninst✝² : Module (MulOpposite R) M\ninst✝¹ : SMulCommClass R (MulOpposite R) M\ninst✝ : NormOneClass R\n⊢ NormOneClass (TrivSqZeroExt R M)","decl":"instance [NormOneClass R] : NormOneClass (tsze R M) where\n  norm_one := by rw [norm_def, fst_one, snd_one, norm_zero, norm_one, add_zero]\n\n\n"}
