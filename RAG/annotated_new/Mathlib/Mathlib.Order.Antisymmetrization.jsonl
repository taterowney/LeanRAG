{"name":"antisymmRel_swap","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\n⊢ Eq (AntisymmRel (Function.swap r)) (AntisymmRel r)","decl":"theorem antisymmRel_swap : AntisymmRel (swap r) = AntisymmRel r :=\n  funext₂ fun _ _ ↦ propext and_comm\n\n"}
{"name":"antisymmRel_refl","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsRefl α r\na : α\n⊢ AntisymmRel r a a","decl":"@[refl]\ntheorem antisymmRel_refl [IsRefl α r] (a : α) : AntisymmRel r a a :=\n  ⟨refl _, refl _⟩\n\n"}
{"name":"AntisymmRel.rfl","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsRefl α r\na : α\n⊢ AntisymmRel r a a","decl":"variable {r} in\nlemma AntisymmRel.rfl [IsRefl α r] (a : α) : AntisymmRel r a a := antisymmRel_refl ..\n\n"}
{"name":"instIsReflAntisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsRefl α r\n⊢ IsRefl α (AntisymmRel r)","decl":"instance [IsRefl α r] : IsRefl α (AntisymmRel r) where\n  refl := antisymmRel_refl r\n\n"}
{"name":"AntisymmRel.symm","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\nr : α → α → Prop\na✝ : AntisymmRel r a b\n⊢ AntisymmRel r b a","decl":"@[symm]\ntheorem AntisymmRel.symm : AntisymmRel r a b → AntisymmRel r b a :=\n  And.symm\n\n"}
{"name":"instIsSymmAntisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\n⊢ IsSymm α (AntisymmRel r)","decl":"instance : IsSymm α (AntisymmRel r) where\n  symm _ _ := AntisymmRel.symm\n\n"}
{"name":"antisymmRel_comm","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\nr : α → α → Prop\n⊢ Iff (AntisymmRel r a b) (AntisymmRel r b a)","decl":"theorem antisymmRel_comm : AntisymmRel r a b ↔ AntisymmRel r b a :=\n  And.comm\n\n"}
{"name":"AntisymmRel.trans","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\nr : α → α → Prop\ninst✝ : IsTrans α r\nhab : AntisymmRel r a b\nhbc : AntisymmRel r b c\n⊢ AntisymmRel r a c","decl":"@[trans]\ntheorem AntisymmRel.trans [IsTrans α r] (hab : AntisymmRel r a b) (hbc : AntisymmRel r b c) :\n    AntisymmRel r a c :=\n  ⟨_root_.trans hab.1 hbc.1, _root_.trans hbc.2 hab.2⟩\n\n"}
{"name":"instIsTransAntisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsTrans α r\n⊢ IsTrans α (AntisymmRel r)","decl":"instance [IsTrans α r] : IsTrans α (AntisymmRel r) where\n  trans _ _ _ := .trans\n\n"}
{"name":"antisymmRel_iff_eq","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\nr : α → α → Prop\ninst✝¹ : IsRefl α r\ninst✝ : IsAntisymm α r\n⊢ Iff (AntisymmRel r a b) (Eq a b)","decl":"@[simp]\ntheorem antisymmRel_iff_eq [IsRefl α r] [IsAntisymm α r] : AntisymmRel r a b ↔ a = b :=\n  antisymm_iff\n\n"}
{"name":"AntisymmRel.eq","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\nr : α → α → Prop\ninst✝¹ : IsRefl α r\ninst✝ : IsAntisymm α r\na✝ : AntisymmRel r a b\n⊢ Eq a b","decl":"alias ⟨AntisymmRel.eq, _⟩ := antisymmRel_iff_eq\n\n"}
{"name":"AntisymmRel.le","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\ninst✝ : LE α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\n⊢ LE.le a b","decl":"theorem AntisymmRel.le [LE α] (h : AntisymmRel (· ≤ ·) a b) : a ≤ b := h.1\n"}
{"name":"AntisymmRel.ge","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\ninst✝ : LE α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\n⊢ LE.le b a","decl":"theorem AntisymmRel.ge [LE α] (h : AntisymmRel (· ≤ ·) a b) : b ≤ a := h.2\n\n"}
{"name":"AntisymmRel.setoid_r","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsPreorder α r\na b : α\n⊢ Eq ((AntisymmRel.setoid α r) a b) (AntisymmRel r a b)","decl":"/-- The antisymmetrization relation as an equivalence relation. -/\n@[simps]\ndef AntisymmRel.setoid : Setoid α :=\n  ⟨AntisymmRel r, antisymmRel_refl _, AntisymmRel.symm, AntisymmRel.trans⟩\n\n"}
{"name":"Antisymmetrization.ind","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsPreorder α r\np : Antisymmetrization α r → Prop\na✝ : ∀ (a : α), p (toAntisymmetrization r a)\nq : Antisymmetrization α r\n⊢ p q","decl":"@[elab_as_elim]\nprotected theorem Antisymmetrization.ind {p : Antisymmetrization α r → Prop} :\n    (∀ a, p <| toAntisymmetrization r a) → ∀ q, p q :=\n  Quot.ind\n\n"}
{"name":"Antisymmetrization.induction_on","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsPreorder α r\np : Antisymmetrization α r → Prop\na : Antisymmetrization α r\nh : ∀ (a : α), p (toAntisymmetrization r a)\n⊢ p a","decl":"@[elab_as_elim]\nprotected theorem Antisymmetrization.induction_on {p : Antisymmetrization α r → Prop}\n    (a : Antisymmetrization α r) (h : ∀ a, p <| toAntisymmetrization r a) : p a :=\n  Quotient.inductionOn' a h\n\n"}
{"name":"toAntisymmetrization_ofAntisymmetrization","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nr : α → α → Prop\ninst✝ : IsPreorder α r\na : Antisymmetrization α r\n⊢ Eq (toAntisymmetrization r (ofAntisymmetrization r a)) a","decl":"@[simp]\ntheorem toAntisymmetrization_ofAntisymmetrization (a : Antisymmetrization α r) :\n    toAntisymmetrization r (ofAntisymmetrization r a) = a :=\n  Quotient.out_eq' _\n\n"}
{"name":"le_iff_lt_or_antisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\ninst✝ : Preorder α\n⊢ Iff (LE.le a b) (Or (LT.lt a b) (AntisymmRel (fun x1 x2 => LE.le x1 x2) a b))","decl":"theorem le_iff_lt_or_antisymmRel : a ≤ b ↔ a < b ∨ AntisymmRel (· ≤ ·) a b := by\n  rw [lt_iff_le_not_le, AntisymmRel]\n  tauto\n\n"}
{"name":"le_of_le_of_antisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : LE.le a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ LE.le a c","decl":"@[trans]\ntheorem le_of_le_of_antisymmRel (h₁ : a ≤ b) (h₂ : AntisymmRel (· ≤ ·) b c) : a ≤ c :=\n  h₁.trans h₂.le\n\n"}
{"name":"le_of_antisymmRel_of_le","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : LE.le b c\n⊢ LE.le a c","decl":"@[trans]\ntheorem le_of_antisymmRel_of_le (h₁ : AntisymmRel (· ≤ ·) a b) (h₂ : b ≤ c) : a ≤ c :=\n  h₁.le.trans h₂\n\n"}
{"name":"lt_of_lt_of_antisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : LT.lt a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ LT.lt a c","decl":"@[trans]\ntheorem lt_of_lt_of_antisymmRel (h₁ : a < b) (h₂ : AntisymmRel (· ≤ ·) b c) : a < c :=\n  h₁.trans_le h₂.le\n\n"}
{"name":"lt_of_antisymmRel_of_lt","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : LT.lt b c\n⊢ LT.lt a c","decl":"@[trans]\ntheorem lt_of_antisymmRel_of_lt (h₁ : AntisymmRel (· ≤ ·) a b) (h₂ : b < c) : a < c :=\n  h₁.le.trans_lt h₂\n\n"}
{"name":"LE.le.lt_or_antisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\ninst✝ : Preorder α\na✝ : LE.le a b\n⊢ Or (LT.lt a b) (AntisymmRel (fun x1 x2 => LE.le x1 x2) a b)","decl":"alias ⟨LE.le.lt_or_antisymmRel, _⟩ := le_iff_lt_or_antisymmRel\n"}
{"name":"LE.le.trans_antisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : LE.le a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ LE.le a c","decl":"alias LE.le.trans_antisymmRel := le_of_le_of_antisymmRel\n"}
{"name":"AntisymmRel.trans_le","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : LE.le b c\n⊢ LE.le a c","decl":"alias AntisymmRel.trans_le := le_of_antisymmRel_of_le\n"}
{"name":"LT.lt.trans_antisymmRel","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : LT.lt a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ LT.lt a c","decl":"alias LT.lt.trans_antisymmRel := lt_of_lt_of_antisymmRel\n"}
{"name":"AntisymmRel.trans_lt","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : LT.lt b c\n⊢ LT.lt a c","decl":"alias AntisymmRel.trans_lt := lt_of_antisymmRel_of_lt\n\n"}
{"name":"AntisymmRel.le_congr","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c d : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) c d\n⊢ Iff (LE.le a c) (LE.le b d)","decl":"theorem AntisymmRel.le_congr (h₁ : AntisymmRel (· ≤ ·) a b) (h₂ : AntisymmRel (· ≤ ·) c d) :\n    a ≤ c ↔ b ≤ d where\n  mp h := (h₁.symm.trans_le h).trans_antisymmRel h₂\n  mpr h := (h₁.trans_le h).trans_antisymmRel h₂.symm\n\n"}
{"name":"AntisymmRel.le_congr_left","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\n⊢ Iff (LE.le a c) (LE.le b c)","decl":"theorem AntisymmRel.le_congr_left (h : AntisymmRel (· ≤ ·) a b) : a ≤ c ↔ b ≤ c :=\n  h.le_congr (antisymmRel_refl _ c)\n\n"}
{"name":"AntisymmRel.le_congr_right","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ Iff (LE.le a b) (LE.le a c)","decl":"theorem AntisymmRel.le_congr_right (h : AntisymmRel (· ≤ ·) b c) : a ≤ b ↔ a ≤ c :=\n  (antisymmRel_refl _ a).le_congr h\n\n"}
{"name":"AntisymmRel.lt_congr","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c d : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) c d\n⊢ Iff (LT.lt a c) (LT.lt b d)","decl":"theorem AntisymmRel.lt_congr (h₁ : AntisymmRel (· ≤ ·) a b) (h₂ : AntisymmRel (· ≤ ·) c d) :\n    a < c ↔ b < d where\n  mp h := (h₁.symm.trans_lt h).trans_antisymmRel h₂\n  mpr h := (h₁.trans_lt h).trans_antisymmRel h₂.symm\n\n"}
{"name":"AntisymmRel.lt_congr_left","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\n⊢ Iff (LT.lt a c) (LT.lt b c)","decl":"theorem AntisymmRel.lt_congr_left (h : AntisymmRel (· ≤ ·) a b) : a < c ↔ b < c :=\n  h.lt_congr (antisymmRel_refl _ c)\n\n"}
{"name":"AntisymmRel.lt_congr_right","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ Iff (LT.lt a b) (LT.lt a c)","decl":"theorem AntisymmRel.lt_congr_right (h : AntisymmRel (· ≤ ·) b c) : a < b ↔ a < c :=\n  (antisymmRel_refl _ a).lt_congr h\n\n"}
{"name":"AntisymmRel.antisymmRel_congr","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c d : α\ninst✝ : Preorder α\nh₁ : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nh₂ : AntisymmRel (fun x1 x2 => LE.le x1 x2) c d\n⊢ Iff (AntisymmRel (fun x1 x2 => LE.le x1 x2) a c) (AntisymmRel (fun x1 x2 => LE.le x1 x2) b d)","decl":"theorem AntisymmRel.antisymmRel_congr\n    (h₁ : AntisymmRel (· ≤ ·) a b) (h₂ : AntisymmRel (· ≤ ·) c d) :\n    AntisymmRel (· ≤ ·) a c ↔ AntisymmRel (· ≤ ·) b d :=\n  rel_congr h₁ h₂\n\n"}
{"name":"AntisymmRel.antisymmRel_congr_left","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\n⊢ Iff (AntisymmRel (fun x1 x2 => LE.le x1 x2) a c) (AntisymmRel (fun x1 x2 => LE.le x1 x2) b c)","decl":"theorem AntisymmRel.antisymmRel_congr_left (h : AntisymmRel (· ≤ ·) a b) :\n    AntisymmRel (· ≤ ·) a c ↔ AntisymmRel (· ≤ ·) b c :=\n  rel_congr_left h\n\n"}
{"name":"AntisymmRel.antisymmRel_congr_right","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b c : α\ninst✝ : Preorder α\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) b c\n⊢ Iff (AntisymmRel (fun x1 x2 => LE.le x1 x2) a b) (AntisymmRel (fun x1 x2 => LE.le x1 x2) a c)","decl":"theorem AntisymmRel.antisymmRel_congr_right (h : AntisymmRel (· ≤ ·) b c) :\n    AntisymmRel (· ≤ ·) a b ↔ AntisymmRel (· ≤ ·) a c :=\n  rel_congr_right h\n\n"}
{"name":"AntisymmRel.image","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\na b : α\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nh : AntisymmRel (fun x1 x2 => LE.le x1 x2) a b\nf : α → β\nhf : Monotone f\n⊢ AntisymmRel (fun x1 x2 => LE.le x1 x2) (f a) (f b)","decl":"theorem AntisymmRel.image (h : AntisymmRel (· ≤ ·) a b) {f : α → β} (hf : Monotone f) :\n    AntisymmRel (· ≤ ·) (f a) (f b) :=\n  ⟨hf h.1, hf h.2⟩\n\n"}
{"name":"antisymmetrization_fibration","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Relation.Fibration (fun x1 x2 => LT.lt x1 x2) (fun x1 x2 => LT.lt x1 x2) (toAntisymmetrization fun x1 x2 => LE.le x1 x2)","decl":"theorem antisymmetrization_fibration :\n    Relation.Fibration (· < ·) (· < ·) (@toAntisymmetrization α (· ≤ ·) _) := by\n  rintro a ⟨b⟩ h\n  exact ⟨b, h, rfl⟩\n\n"}
{"name":"acc_antisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na : α\ninst✝ : Preorder α\n⊢ Iff (Acc (fun x1 x2 => LT.lt x1 x2) (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) a)) (Acc (fun x1 x2 => LT.lt x1 x2) a)","decl":"theorem acc_antisymmetrization_iff : Acc (· < ·)\n    (@toAntisymmetrization α (· ≤ ·) _ a) ↔ Acc (· < ·) a :=\n  acc_lift₂_iff\n\n"}
{"name":"wellFounded_antisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Iff (WellFounded LT.lt) (WellFounded LT.lt)","decl":"theorem wellFounded_antisymmetrization_iff :\n    WellFounded (@LT.lt (Antisymmetrization α (· ≤ ·)) _) ↔ WellFounded (@LT.lt α _) :=\n  wellFounded_lift₂_iff\n\n"}
{"name":"wellFoundedLT_antisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Iff (WellFoundedLT (Antisymmetrization α fun x1 x2 => LE.le x1 x2)) (WellFoundedLT α)","decl":"theorem wellFoundedLT_antisymmetrization_iff :\n    WellFoundedLT (Antisymmetrization α (· ≤ ·)) ↔ WellFoundedLT α := by\n  simp_rw [isWellFounded_iff, wellFounded_antisymmetrization_iff]\n\n"}
{"name":"wellFoundedGT_antisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Iff (WellFoundedGT (Antisymmetrization α fun x1 x2 => LE.le x1 x2)) (WellFoundedGT α)","decl":"theorem wellFoundedGT_antisymmetrization_iff :\n    WellFoundedGT (Antisymmetrization α (· ≤ ·)) ↔ WellFoundedGT α := by\n  simp_rw [isWellFounded_iff]\n  convert wellFounded_liftOn₂'_iff with ⟨_⟩ ⟨_⟩\n  exact fun _ _ _ _ h₁ h₂ ↦ propext\n    ⟨fun h ↦ (h₂.2.trans_lt h).trans_le h₁.1, fun h ↦ (h₂.1.trans_lt h).trans_le h₁.2⟩\n\n"}
{"name":"instWellFoundedLTAntisymmetrizationLe","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝¹ : Preorder α\ninst✝ : WellFoundedLT α\n⊢ WellFoundedLT (Antisymmetrization α fun x1 x2 => LE.le x1 x2)","decl":"instance [WellFoundedLT α] : WellFoundedLT (Antisymmetrization α (· ≤ ·)) :=\n  wellFoundedLT_antisymmetrization_iff.mpr ‹_›\n\n"}
{"name":"instWellFoundedGTAntisymmetrizationLe","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝¹ : Preorder α\ninst✝ : WellFoundedGT α\n⊢ WellFoundedGT (Antisymmetrization α fun x1 x2 => LE.le x1 x2)","decl":"instance [WellFoundedGT α] : WellFoundedGT (Antisymmetrization α (· ≤ ·)) :=\n  wellFoundedGT_antisymmetrization_iff.mpr ‹_›\n\n"}
{"name":"toAntisymmetrization_le_toAntisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\ninst✝ : Preorder α\n⊢ Iff (LE.le (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) a) (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) b)) (LE.le a b)","decl":"@[simp]\ntheorem toAntisymmetrization_le_toAntisymmetrization_iff :\n    @toAntisymmetrization α (· ≤ ·) _ a ≤ @toAntisymmetrization α (· ≤ ·) _ b ↔ a ≤ b :=\n  Iff.rfl\n\n"}
{"name":"toAntisymmetrization_lt_toAntisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\na b : α\ninst✝ : Preorder α\n⊢ Iff (LT.lt (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) a) (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) b)) (LT.lt a b)","decl":"@[simp]\ntheorem toAntisymmetrization_lt_toAntisymmetrization_iff :\n    @toAntisymmetrization α (· ≤ ·) _ a < @toAntisymmetrization α (· ≤ ·) _ b ↔ a < b :=\n  Iff.rfl\n\n"}
{"name":"ofAntisymmetrization_le_ofAntisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na b : Antisymmetrization α fun x1 x2 => LE.le x1 x2\n⊢ Iff (LE.le (ofAntisymmetrization (fun x1 x2 => LE.le x1 x2) a) (ofAntisymmetrization (fun x1 x2 => LE.le x1 x2) b)) (LE.le a b)","decl":"@[simp]\ntheorem ofAntisymmetrization_le_ofAntisymmetrization_iff {a b : Antisymmetrization α (· ≤ ·)} :\n    ofAntisymmetrization (· ≤ ·) a ≤ ofAntisymmetrization (· ≤ ·) b ↔ a ≤ b :=\n  (Quotient.outRelEmbedding _).map_rel_iff\n\n"}
{"name":"ofAntisymmetrization_lt_ofAntisymmetrization_iff","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na b : Antisymmetrization α fun x1 x2 => LE.le x1 x2\n⊢ Iff (LT.lt (ofAntisymmetrization (fun x1 x2 => LE.le x1 x2) a) (ofAntisymmetrization (fun x1 x2 => LE.le x1 x2) b)) (LT.lt a b)","decl":"@[simp]\ntheorem ofAntisymmetrization_lt_ofAntisymmetrization_iff {a b : Antisymmetrization α (· ≤ ·)} :\n    ofAntisymmetrization (· ≤ ·) a < ofAntisymmetrization (· ≤ ·) b ↔ a < b :=\n  (Quotient.outRelEmbedding _).map_rel_iff\n\n"}
{"name":"toAntisymmetrization_mono","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\n⊢ Monotone (toAntisymmetrization fun x1 x2 => LE.le x1 x2)","decl":"@[mono]\ntheorem toAntisymmetrization_mono : Monotone (@toAntisymmetrization α (· ≤ ·) _) := fun _ _ => id\n\n"}
{"name":"OrderHom.coe_antisymmetrization","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderHom α β\n⊢ Eq (⇑f.antisymmetrization) (Quotient.map' ⇑f ⋯)","decl":"@[simp]\ntheorem OrderHom.coe_antisymmetrization (f : α →o β) :\n    ⇑f.antisymmetrization = Quotient.map' f (liftFun_antisymmRel f) :=\n  rfl\n\n/- Porting note: Removed @[simp] attribute. With this `simp` lemma the LHS of\n`OrderHom.antisymmetrization_apply_mk` is not in normal-form -/\n"}
{"name":"OrderHom.antisymmetrization_apply","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderHom α β\na : Antisymmetrization α fun x1 x2 => LE.le x1 x2\n⊢ Eq (f.antisymmetrization a) (Quotient.map' ⇑f ⋯ a)","decl":"theorem OrderHom.antisymmetrization_apply (f : α →o β) (a : Antisymmetrization α (· ≤ ·)) :\n    f.antisymmetrization a = Quotient.map' f (liftFun_antisymmRel f) a :=\n  rfl\n\n"}
{"name":"OrderHom.antisymmetrization_apply_mk","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderHom α β\na : α\n⊢ Eq (f.antisymmetrization (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) a)) (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) (f a))","decl":"@[simp]\ntheorem OrderHom.antisymmetrization_apply_mk (f : α →o β) (a : α) :\n    f.antisymmetrization (toAntisymmetrization _ a) = toAntisymmetrization _ (f a) :=\n  @Quotient.map_mk _ _ (_root_.id _) (_root_.id _) f (liftFun_antisymmRel f) _\n\n"}
{"name":"OrderEmbedding.ofAntisymmetrization_apply","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na✝ : Antisymmetrization α fun x1 x2 => LE.le x1 x2\n⊢ Eq ((OrderEmbedding.ofAntisymmetrization α) a✝) (ofAntisymmetrization (fun x1 x2 => LE.le x1 x2) a✝)","decl":"/-- `ofAntisymmetrization` as an order embedding. -/\n@[simps]\nnoncomputable def OrderEmbedding.ofAntisymmetrization : Antisymmetrization α (· ≤ ·) ↪o α :=\n  { Quotient.outRelEmbedding _ with toFun := _root_.ofAntisymmetrization _ }\n\n"}
{"name":"OrderIso.dualAntisymmetrization_apply","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na : α\n⊢ Eq ((OrderIso.dualAntisymmetrization α) (OrderDual.toDual (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) a))) (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) (OrderDual.toDual a))","decl":"@[simp]\ntheorem OrderIso.dualAntisymmetrization_apply (a : α) :\n    OrderIso.dualAntisymmetrization _ (toDual <| toAntisymmetrization _ a) =\n      toAntisymmetrization _ (toDual a) :=\n  rfl\n\n"}
{"name":"OrderIso.dualAntisymmetrization_symm_apply","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\ninst✝ : Preorder α\na : α\n⊢ Eq ((OrderIso.dualAntisymmetrization α).symm (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) (OrderDual.toDual a))) (OrderDual.toDual (toAntisymmetrization (fun x1 x2 => LE.le x1 x2) a))","decl":"@[simp]\ntheorem OrderIso.dualAntisymmetrization_symm_apply (a : α) :\n    (OrderIso.dualAntisymmetrization _).symm (toAntisymmetrization _ <| toDual a) =\n      toDual (toAntisymmetrization _ a) :=\n  rfl\n\n"}
{"name":"Antisymmetrization.prodEquiv_apply_mk","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nab : Prod α β\n⊢ Eq ((Antisymmetrization.prodEquiv α β) (Quotient.mk (AntisymmRel.setoid (Prod α β) fun x1 x2 => LE.le x1 x2) ab)) { fst := Quotient.mk (AntisymmRel.setoid α fun x1 x2 => LE.le x1 x2) ab.1, snd := Quotient.mk (AntisymmRel.setoid β fun x1 x2 => LE.le x1 x2) ab.2 }","decl":"@[simp] lemma prodEquiv_apply_mk {ab} : prodEquiv α β ⟦ab⟧ = (⟦ab.1⟧, ⟦ab.2⟧) := rfl\n"}
{"name":"Antisymmetrization.prodEquiv_symm_apply_mk","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\na : α\nb : β\n⊢ Eq ((Antisymmetrization.prodEquiv α β).symm { fst := Quotient.mk (AntisymmRel.setoid α fun x1 x2 => LE.le x1 x2) a, snd := Quotient.mk (AntisymmRel.setoid β fun x1 x2 => LE.le x1 x2) b }) (Quotient.mk (AntisymmRel.setoid (Prod α β) fun x1 x2 => LE.le x1 x2) { fst := a, snd := b })","decl":"@[simp] lemma prodEquiv_symm_apply_mk {a b} : (prodEquiv α β).symm (⟦a⟧, ⟦b⟧) = ⟦(a, b)⟧ := rfl\n\n"}
{"name":"Prod.wellFoundedLT","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : WellFoundedLT α\ninst✝ : WellFoundedLT β\n⊢ WellFoundedLT (Prod α β)","decl":"instance Prod.wellFoundedLT [WellFoundedLT α] [WellFoundedLT β] : WellFoundedLT (α × β) :=\n  wellFoundedLT_antisymmetrization_iff.mp <|\n    (Antisymmetrization.prodEquiv α β).strictMono.wellFoundedLT\n\n"}
{"name":"Prod.wellFoundedGT","module":"Mathlib.Order.Antisymmetrization","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : Preorder α\ninst✝² : Preorder β\ninst✝¹ : WellFoundedGT α\ninst✝ : WellFoundedGT β\n⊢ WellFoundedGT (Prod α β)","decl":"instance Prod.wellFoundedGT [WellFoundedGT α] [WellFoundedGT β] : WellFoundedGT (α × β) :=\n  wellFoundedGT_antisymmetrization_iff.mp <|\n    (Antisymmetrization.prodEquiv α β).strictMono.wellFoundedGT\n\n"}
