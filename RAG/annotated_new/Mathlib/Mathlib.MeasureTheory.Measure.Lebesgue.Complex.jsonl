{"name":"Complex.measurableEquivPi_apply","module":"Mathlib.MeasureTheory.Measure.Lebesgue.Complex","initialProofState":"a : Complex\n⊢ Eq (Complex.measurableEquivPi a) (Matrix.vecCons a.re (Matrix.vecCons a.im Matrix.vecEmpty))","decl":"@[simp]\ntheorem measurableEquivPi_apply (a : ℂ) :\n    measurableEquivPi a = ![a.re, a.im] := rfl\n\n"}
{"name":"Complex.measurableEquivPi_symm_apply","module":"Mathlib.MeasureTheory.Measure.Lebesgue.Complex","initialProofState":"p : Fin 2 → Real\n⊢ Eq (Complex.measurableEquivPi.symm p) (HAdd.hAdd (↑(p 0)) (HMul.hMul (↑(p 1)) Complex.I))","decl":"@[simp]\ntheorem measurableEquivPi_symm_apply (p : (Fin 2) → ℝ) :\n    measurableEquivPi.symm p = (p 0) + (p 1) * I := rfl\n\n"}
{"name":"Complex.measurableEquivRealProd_apply","module":"Mathlib.MeasureTheory.Measure.Lebesgue.Complex","initialProofState":"a : Complex\n⊢ Eq (Complex.measurableEquivRealProd a) { fst := a.re, snd := a.im }","decl":"@[simp]\ntheorem measurableEquivRealProd_apply (a : ℂ) : measurableEquivRealProd a = (a.re, a.im) := rfl\n\n"}
{"name":"Complex.measurableEquivRealProd_symm_apply","module":"Mathlib.MeasureTheory.Measure.Lebesgue.Complex","initialProofState":"p : Prod Real Real\n⊢ Eq (Complex.measurableEquivRealProd.symm p) { re := p.1, im := p.2 }","decl":"@[simp]\ntheorem measurableEquivRealProd_symm_apply (p : ℝ × ℝ) :\n    measurableEquivRealProd.symm p = {re := p.1, im := p.2} := rfl\n\n"}
{"name":"Complex.volume_preserving_equiv_pi","module":"Mathlib.MeasureTheory.Measure.Lebesgue.Complex","initialProofState":"⊢ MeasureTheory.MeasurePreserving (⇑Complex.measurableEquivPi) MeasureTheory.MeasureSpace.volume MeasureTheory.MeasureSpace.volume","decl":"theorem volume_preserving_equiv_pi : MeasurePreserving measurableEquivPi := by\n  convert (measurableEquivPi.symm.measurable.measurePreserving volume).symm\n  rw [← addHaarMeasure_eq_volume_pi, ← Basis.parallelepiped_basisFun, ← Basis.addHaar,\n    measurableEquivPi, Homeomorph.toMeasurableEquiv_symm_coe,\n    ContinuousLinearEquiv.symm_toHomeomorph, ContinuousLinearEquiv.coe_toHomeomorph,\n    Basis.map_addHaar, eq_comm]\n  exact (Basis.addHaar_eq_iff _ _).mpr Complex.orthonormalBasisOneI.volume_parallelepiped\n\n"}
{"name":"Complex.volume_preserving_equiv_real_prod","module":"Mathlib.MeasureTheory.Measure.Lebesgue.Complex","initialProofState":"⊢ MeasureTheory.MeasurePreserving (⇑Complex.measurableEquivRealProd) MeasureTheory.MeasureSpace.volume MeasureTheory.MeasureSpace.volume","decl":"theorem volume_preserving_equiv_real_prod : MeasurePreserving measurableEquivRealProd :=\n  (volume_preserving_finTwoArrow ℝ).comp volume_preserving_equiv_pi\n\n"}
