{"name":"MonotoneOn.convexOn_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf' : DifferentiableOn Real f (interior D)\nhf'_mono : MonotoneOn (deriv f) (interior D)\n⊢ ConvexOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is differentiable on its interior,\nand `f'` is monotone on the interior, then `f` is convex on `D`. -/\ntheorem MonotoneOn.convexOn_of_deriv {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf' : DifferentiableOn ℝ f (interior D))\n    (hf'_mono : MonotoneOn (deriv f) (interior D)) : ConvexOn ℝ D f :=\n  convexOn_of_slope_mono_adjacent hD\n    (by\n      intro x y z hx hz hxy hyz\n      -- First we prove some trivial inclusions\n      have hxzD : Icc x z ⊆ D := hD.ordConnected.out hx hz\n      have hxyD : Icc x y ⊆ D := (Icc_subset_Icc_right hyz.le).trans hxzD\n      have hxyD' : Ioo x y ⊆ interior D :=\n        subset_sUnion_of_mem ⟨isOpen_Ioo, Ioo_subset_Icc_self.trans hxyD⟩\n      have hyzD : Icc y z ⊆ D := (Icc_subset_Icc_left hxy.le).trans hxzD\n      have hyzD' : Ioo y z ⊆ interior D :=\n        subset_sUnion_of_mem ⟨isOpen_Ioo, Ioo_subset_Icc_self.trans hyzD⟩\n      -- Then we apply MVT to both `[x, y]` and `[y, z]`\n      obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, deriv f a = (f y - f x) / (y - x) :=\n        exists_deriv_eq_slope f hxy (hf.mono hxyD) (hf'.mono hxyD')\n      obtain ⟨b, ⟨hyb, hbz⟩, hb⟩ : ∃ b ∈ Ioo y z, deriv f b = (f z - f y) / (z - y) :=\n        exists_deriv_eq_slope f hyz (hf.mono hyzD) (hf'.mono hyzD')\n      rw [← ha, ← hb]\n      exact hf'_mono (hxyD' ⟨hxa, hay⟩) (hyzD' ⟨hyb, hbz⟩) (hay.trans hyb).le)\n\n"}
{"name":"AntitoneOn.concaveOn_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf' : DifferentiableOn Real f (interior D)\nh_anti : AntitoneOn (deriv f) (interior D)\n⊢ ConcaveOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is differentiable on its interior,\nand `f'` is antitone on the interior, then `f` is concave on `D`. -/\ntheorem AntitoneOn.concaveOn_of_deriv {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf' : DifferentiableOn ℝ f (interior D))\n    (h_anti : AntitoneOn (deriv f) (interior D)) : ConcaveOn ℝ D f :=\n  haveI : MonotoneOn (deriv (-f)) (interior D) := by\n    simpa only [← deriv.neg] using h_anti.neg\n  neg_convexOn_iff.mp (this.convexOn_of_deriv hD hf.neg hf'.neg)\n\n"}
{"name":"StrictMonoOn.exists_slope_lt_deriv_aux","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"x y : Real\nf : Real → Real\nhf : ContinuousOn f (Set.Icc x y)\nhxy : LT.lt x y\nhf'_mono : StrictMonoOn (deriv f) (Set.Ioo x y)\nh : ∀ (w : Real), Membership.mem (Set.Ioo x y) w → Ne (deriv f w) 0\n⊢ Exists fun a => And (Membership.mem (Set.Ioo x y) a) (LT.lt (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (deriv f a))","decl":"theorem StrictMonoOn.exists_slope_lt_deriv_aux {x y : ℝ} {f : ℝ → ℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) (h : ∀ w ∈ Ioo x y, deriv f w ≠ 0) :\n    ∃ a ∈ Ioo x y, (f y - f x) / (y - x) < deriv f a := by\n  have A : DifferentiableOn ℝ f (Ioo x y) := fun w wmem =>\n    (differentiableAt_of_deriv_ne_zero (h w wmem)).differentiableWithinAt\n  obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, deriv f a = (f y - f x) / (y - x) :=\n    exists_deriv_eq_slope f hxy hf A\n  rcases nonempty_Ioo.2 hay with ⟨b, ⟨hab, hby⟩⟩\n  refine ⟨b, ⟨hxa.trans hab, hby⟩, ?_⟩\n  rw [← ha]\n  exact hf'_mono ⟨hxa, hay⟩ ⟨hxa.trans hab, hby⟩ hab\n\n"}
{"name":"StrictMonoOn.exists_slope_lt_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"x y : Real\nf : Real → Real\nhf : ContinuousOn f (Set.Icc x y)\nhxy : LT.lt x y\nhf'_mono : StrictMonoOn (deriv f) (Set.Ioo x y)\n⊢ Exists fun a => And (Membership.mem (Set.Ioo x y) a) (LT.lt (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (deriv f a))","decl":"theorem StrictMonoOn.exists_slope_lt_deriv {x y : ℝ} {f : ℝ → ℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) :\n    ∃ a ∈ Ioo x y, (f y - f x) / (y - x) < deriv f a := by\n  by_cases h : ∀ w ∈ Ioo x y, deriv f w ≠ 0\n  · apply StrictMonoOn.exists_slope_lt_deriv_aux hf hxy hf'_mono h\n  · push_neg at h\n    rcases h with ⟨w, ⟨hxw, hwy⟩, hw⟩\n    obtain ⟨a, ⟨hxa, haw⟩, ha⟩ : ∃ a ∈ Ioo x w, (f w - f x) / (w - x) < deriv f a := by\n      apply StrictMonoOn.exists_slope_lt_deriv_aux _ hxw _ _\n      · exact hf.mono (Icc_subset_Icc le_rfl hwy.le)\n      · exact hf'_mono.mono (Ioo_subset_Ioo le_rfl hwy.le)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_lt\n        exact hf'_mono ⟨hz.1, hz.2.trans hwy⟩ ⟨hxw, hwy⟩ hz.2\n    obtain ⟨b, ⟨hwb, hby⟩, hb⟩ : ∃ b ∈ Ioo w y, (f y - f w) / (y - w) < deriv f b := by\n      apply StrictMonoOn.exists_slope_lt_deriv_aux _ hwy _ _\n      · refine hf.mono (Icc_subset_Icc hxw.le le_rfl)\n      · exact hf'_mono.mono (Ioo_subset_Ioo hxw.le le_rfl)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_gt\n        exact hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hz.1, hz.2⟩ hz.1\n    refine ⟨b, ⟨hxw.trans hwb, hby⟩, ?_⟩\n    simp only [div_lt_iff₀, hxy, hxw, hwy, sub_pos] at ha hb ⊢\n    have : deriv f a * (w - x) < deriv f b * (w - x) := by\n      apply mul_lt_mul _ le_rfl (sub_pos.2 hxw) _\n      · exact hf'_mono ⟨hxa, haw.trans hwy⟩ ⟨hxw.trans hwb, hby⟩ (haw.trans hwb)\n      · rw [← hw]\n        exact (hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hwb, hby⟩ hwb).le\n    linarith\n\n"}
{"name":"StrictMonoOn.exists_deriv_lt_slope_aux","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"x y : Real\nf : Real → Real\nhf : ContinuousOn f (Set.Icc x y)\nhxy : LT.lt x y\nhf'_mono : StrictMonoOn (deriv f) (Set.Ioo x y)\nh : ∀ (w : Real), Membership.mem (Set.Ioo x y) w → Ne (deriv f w) 0\n⊢ Exists fun a => And (Membership.mem (Set.Ioo x y) a) (LT.lt (deriv f a) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)))","decl":"theorem StrictMonoOn.exists_deriv_lt_slope_aux {x y : ℝ} {f : ℝ → ℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) (h : ∀ w ∈ Ioo x y, deriv f w ≠ 0) :\n    ∃ a ∈ Ioo x y, deriv f a < (f y - f x) / (y - x) := by\n  have A : DifferentiableOn ℝ f (Ioo x y) := fun w wmem =>\n    (differentiableAt_of_deriv_ne_zero (h w wmem)).differentiableWithinAt\n  obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, deriv f a = (f y - f x) / (y - x) :=\n    exists_deriv_eq_slope f hxy hf A\n  rcases nonempty_Ioo.2 hxa with ⟨b, ⟨hxb, hba⟩⟩\n  refine ⟨b, ⟨hxb, hba.trans hay⟩, ?_⟩\n  rw [← ha]\n  exact hf'_mono ⟨hxb, hba.trans hay⟩ ⟨hxa, hay⟩ hba\n\n"}
{"name":"StrictMonoOn.exists_deriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"x y : Real\nf : Real → Real\nhf : ContinuousOn f (Set.Icc x y)\nhxy : LT.lt x y\nhf'_mono : StrictMonoOn (deriv f) (Set.Ioo x y)\n⊢ Exists fun a => And (Membership.mem (Set.Ioo x y) a) (LT.lt (deriv f a) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)))","decl":"theorem StrictMonoOn.exists_deriv_lt_slope {x y : ℝ} {f : ℝ → ℝ} (hf : ContinuousOn f (Icc x y))\n    (hxy : x < y) (hf'_mono : StrictMonoOn (deriv f) (Ioo x y)) :\n    ∃ a ∈ Ioo x y, deriv f a < (f y - f x) / (y - x) := by\n  by_cases h : ∀ w ∈ Ioo x y, deriv f w ≠ 0\n  · apply StrictMonoOn.exists_deriv_lt_slope_aux hf hxy hf'_mono h\n  · push_neg at h\n    rcases h with ⟨w, ⟨hxw, hwy⟩, hw⟩\n    obtain ⟨a, ⟨hxa, haw⟩, ha⟩ : ∃ a ∈ Ioo x w, deriv f a < (f w - f x) / (w - x) := by\n      apply StrictMonoOn.exists_deriv_lt_slope_aux _ hxw _ _\n      · exact hf.mono (Icc_subset_Icc le_rfl hwy.le)\n      · exact hf'_mono.mono (Ioo_subset_Ioo le_rfl hwy.le)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_lt\n        exact hf'_mono ⟨hz.1, hz.2.trans hwy⟩ ⟨hxw, hwy⟩ hz.2\n    obtain ⟨b, ⟨hwb, hby⟩, hb⟩ : ∃ b ∈ Ioo w y, deriv f b < (f y - f w) / (y - w) := by\n      apply StrictMonoOn.exists_deriv_lt_slope_aux _ hwy _ _\n      · refine hf.mono (Icc_subset_Icc hxw.le le_rfl)\n      · exact hf'_mono.mono (Ioo_subset_Ioo hxw.le le_rfl)\n      · intro z hz\n        rw [← hw]\n        apply ne_of_gt\n        exact hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hz.1, hz.2⟩ hz.1\n    refine ⟨a, ⟨hxa, haw.trans hwy⟩, ?_⟩\n    simp only [lt_div_iff₀, hxy, hxw, hwy, sub_pos] at ha hb ⊢\n    have : deriv f a * (y - w) < deriv f b * (y - w) := by\n      apply mul_lt_mul _ le_rfl (sub_pos.2 hwy) _\n      · exact hf'_mono ⟨hxa, haw.trans hwy⟩ ⟨hxw.trans hwb, hby⟩ (haw.trans hwb)\n      · rw [← hw]\n        exact (hf'_mono ⟨hxw, hwy⟩ ⟨hxw.trans hwb, hby⟩ hwb).le\n    linarith\n\n"}
{"name":"StrictMonoOn.strictConvexOn_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf' : StrictMonoOn (deriv f) (interior D)\n⊢ StrictConvexOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, and `f'` is strictly monotone on the\ninterior, then `f` is strictly convex on `D`.\nNote that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict monotonicity of `f'`. -/\ntheorem StrictMonoOn.strictConvexOn_of_deriv {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf' : StrictMonoOn (deriv f) (interior D)) : StrictConvexOn ℝ D f :=\n  strictConvexOn_of_slope_strict_mono_adjacent hD fun {x y z} hx hz hxy hyz => by\n    -- First we prove some trivial inclusions\n    have hxzD : Icc x z ⊆ D := hD.ordConnected.out hx hz\n    have hxyD : Icc x y ⊆ D := (Icc_subset_Icc_right hyz.le).trans hxzD\n    have hxyD' : Ioo x y ⊆ interior D :=\n      subset_sUnion_of_mem ⟨isOpen_Ioo, Ioo_subset_Icc_self.trans hxyD⟩\n    have hyzD : Icc y z ⊆ D := (Icc_subset_Icc_left hxy.le).trans hxzD\n    have hyzD' : Ioo y z ⊆ interior D :=\n      subset_sUnion_of_mem ⟨isOpen_Ioo, Ioo_subset_Icc_self.trans hyzD⟩\n    -- Then we get points `a` and `b` in each interval `[x, y]` and `[y, z]` where the derivatives\n    -- can be compared to the slopes between `x, y` and `y, z` respectively.\n    obtain ⟨a, ⟨hxa, hay⟩, ha⟩ : ∃ a ∈ Ioo x y, (f y - f x) / (y - x) < deriv f a :=\n      StrictMonoOn.exists_slope_lt_deriv (hf.mono hxyD) hxy (hf'.mono hxyD')\n    obtain ⟨b, ⟨hyb, hbz⟩, hb⟩ : ∃ b ∈ Ioo y z, deriv f b < (f z - f y) / (z - y) :=\n      StrictMonoOn.exists_deriv_lt_slope (hf.mono hyzD) hyz (hf'.mono hyzD')\n    apply ha.trans (lt_trans _ hb)\n    exact hf' (hxyD' ⟨hxa, hay⟩) (hyzD' ⟨hyb, hbz⟩) (hay.trans hyb)\n\n"}
{"name":"StrictAntiOn.strictConcaveOn_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nh_anti : StrictAntiOn (deriv f) (interior D)\n⊢ StrictConcaveOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f'` is strictly antitone on the\ninterior, then `f` is strictly concave on `D`.\nNote that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict antitonicity of `f'`. -/\ntheorem StrictAntiOn.strictConcaveOn_of_deriv {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (h_anti : StrictAntiOn (deriv f) (interior D)) :\n    StrictConcaveOn ℝ D f :=\n  have : StrictMonoOn (deriv (-f)) (interior D) := by simpa only [← deriv.neg] using h_anti.neg\n  neg_neg f ▸ (this.strictConvexOn_of_deriv hD hf.neg).neg\n\n"}
{"name":"Monotone.convexOn_univ_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf : Differentiable Real f\nhf'_mono : Monotone (deriv f)\n⊢ ConvexOn Real Set.univ f","decl":"/-- If a function `f` is differentiable and `f'` is monotone on `ℝ` then `f` is convex. -/\ntheorem Monotone.convexOn_univ_of_deriv {f : ℝ → ℝ} (hf : Differentiable ℝ f)\n    (hf'_mono : Monotone (deriv f)) : ConvexOn ℝ univ f :=\n  (hf'_mono.monotoneOn _).convexOn_of_deriv convex_univ hf.continuous.continuousOn\n    hf.differentiableOn\n\n"}
{"name":"Antitone.concaveOn_univ_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf : Differentiable Real f\nhf'_anti : Antitone (deriv f)\n⊢ ConcaveOn Real Set.univ f","decl":"/-- If a function `f` is differentiable and `f'` is antitone on `ℝ` then `f` is concave. -/\ntheorem Antitone.concaveOn_univ_of_deriv {f : ℝ → ℝ} (hf : Differentiable ℝ f)\n    (hf'_anti : Antitone (deriv f)) : ConcaveOn ℝ univ f :=\n  (hf'_anti.antitoneOn _).concaveOn_of_deriv convex_univ hf.continuous.continuousOn\n    hf.differentiableOn\n\n"}
{"name":"StrictMono.strictConvexOn_univ_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf : Continuous f\nhf'_mono : StrictMono (deriv f)\n⊢ StrictConvexOn Real Set.univ f","decl":"/-- If a function `f` is continuous and `f'` is strictly monotone on `ℝ` then `f` is strictly\nconvex. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict monotonicity of `f'`. -/\ntheorem StrictMono.strictConvexOn_univ_of_deriv {f : ℝ → ℝ} (hf : Continuous f)\n    (hf'_mono : StrictMono (deriv f)) : StrictConvexOn ℝ univ f :=\n  (hf'_mono.strictMonoOn _).strictConvexOn_of_deriv convex_univ hf.continuousOn\n\n"}
{"name":"StrictAnti.strictConcaveOn_univ_of_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf : Continuous f\nhf'_anti : StrictAnti (deriv f)\n⊢ StrictConcaveOn Real Set.univ f","decl":"/-- If a function `f` is continuous and `f'` is strictly antitone on `ℝ` then `f` is strictly\nconcave. Note that we don't require differentiability, since it is guaranteed at all but at most\none point by the strict antitonicity of `f'`. -/\ntheorem StrictAnti.strictConcaveOn_univ_of_deriv {f : ℝ → ℝ} (hf : Continuous f)\n    (hf'_anti : StrictAnti (deriv f)) : StrictConcaveOn ℝ univ f :=\n  (hf'_anti.strictAntiOn _).strictConcaveOn_of_deriv convex_univ hf.continuousOn\n\n"}
{"name":"convexOn_of_deriv2_nonneg","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf' : DifferentiableOn Real f (interior D)\nhf'' : DifferentiableOn Real (deriv f) (interior D)\nhf''_nonneg : ∀ (x : Real), Membership.mem (interior D) x → LE.le 0 (Nat.iterate deriv 2 f x)\n⊢ ConvexOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonnegative on the interior, then `f` is convex on `D`. -/\ntheorem convexOn_of_deriv2_nonneg {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ} (hf : ContinuousOn f D)\n    (hf' : DifferentiableOn ℝ f (interior D)) (hf'' : DifferentiableOn ℝ (deriv f) (interior D))\n    (hf''_nonneg : ∀ x ∈ interior D, 0 ≤ deriv^[2] f x) : ConvexOn ℝ D f :=\n  (monotoneOn_of_deriv_nonneg hD.interior hf''.continuousOn (by rwa [interior_interior]) <| by\n        rwa [interior_interior]).convexOn_of_deriv\n    hD hf hf'\n\n"}
{"name":"concaveOn_of_deriv2_nonpos","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf' : DifferentiableOn Real f (interior D)\nhf'' : DifferentiableOn Real (deriv f) (interior D)\nhf''_nonpos : ∀ (x : Real), Membership.mem (interior D) x → LE.le (Nat.iterate deriv 2 f x) 0\n⊢ ConcaveOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonpositive on the interior, then `f` is concave on `D`. -/\ntheorem concaveOn_of_deriv2_nonpos {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ} (hf : ContinuousOn f D)\n    (hf' : DifferentiableOn ℝ f (interior D)) (hf'' : DifferentiableOn ℝ (deriv f) (interior D))\n    (hf''_nonpos : ∀ x ∈ interior D, deriv^[2] f x ≤ 0) : ConcaveOn ℝ D f :=\n  (antitoneOn_of_deriv_nonpos hD.interior hf''.continuousOn (by rwa [interior_interior]) <| by\n        rwa [interior_interior]).concaveOn_of_deriv\n    hD hf hf'\n\n"}
{"name":"convexOn_of_hasDerivWithinAt2_nonneg","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf f' f'' : Real → Real\nhf : ContinuousOn f D\nhf' : ∀ (x : Real), Membership.mem (interior D) x → HasDerivWithinAt f (f' x) (interior D) x\nhf'' : ∀ (x : Real), Membership.mem (interior D) x → HasDerivWithinAt f' (f'' x) (interior D) x\nhf''₀ : ∀ (x : Real), Membership.mem (interior D) x → LE.le 0 (f'' x)\n⊢ ConvexOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonnegative on the interior, then `f` is convex on `D`. -/\nlemma convexOn_of_hasDerivWithinAt2_nonneg {D : Set ℝ} (hD : Convex ℝ D) {f f' f'' : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf' : ∀ x ∈ interior D, HasDerivWithinAt f (f' x) (interior D) x)\n    (hf'' : ∀ x ∈ interior D, HasDerivWithinAt f' (f'' x) (interior D) x)\n    (hf''₀ : ∀ x ∈ interior D, 0 ≤ f'' x) : ConvexOn ℝ D f := by\n  have : (interior D).EqOn (deriv f) f' := deriv_eqOn isOpen_interior hf'\n  refine convexOn_of_deriv2_nonneg hD hf (fun x hx ↦ (hf' _ hx).differentiableWithinAt) ?_ ?_\n  · rw [differentiableOn_congr this]\n    exact fun x hx ↦ (hf'' _ hx).differentiableWithinAt\n  · rintro x hx\n    convert hf''₀ _ hx using 1\n    dsimp\n    rw [deriv_eqOn isOpen_interior (fun y hy ↦ ?_) hx]\n    exact (hf'' _ hy).congr this <| by rw [this hy]\n\n"}
{"name":"concaveOn_of_hasDerivWithinAt2_nonpos","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf f' f'' : Real → Real\nhf : ContinuousOn f D\nhf' : ∀ (x : Real), Membership.mem (interior D) x → HasDerivWithinAt f (f' x) (interior D) x\nhf'' : ∀ (x : Real), Membership.mem (interior D) x → HasDerivWithinAt f' (f'' x) (interior D) x\nhf''₀ : ∀ (x : Real), Membership.mem (interior D) x → LE.le (f'' x) 0\n⊢ ConcaveOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ`, is twice differentiable on its\ninterior, and `f''` is nonpositive on the interior, then `f` is concave on `D`. -/\nlemma concaveOn_of_hasDerivWithinAt2_nonpos {D : Set ℝ} (hD : Convex ℝ D) {f f' f'' : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf' : ∀ x ∈ interior D, HasDerivWithinAt f (f' x) (interior D) x)\n    (hf'' : ∀ x ∈ interior D, HasDerivWithinAt f' (f'' x) (interior D) x)\n    (hf''₀ : ∀ x ∈ interior D, f'' x ≤ 0) : ConcaveOn ℝ D f := by\n  have : (interior D).EqOn (deriv f) f' := deriv_eqOn isOpen_interior hf'\n  refine concaveOn_of_deriv2_nonpos hD hf (fun x hx ↦ (hf' _ hx).differentiableWithinAt) ?_ ?_\n  · rw [differentiableOn_congr this]\n    exact fun x hx ↦ (hf'' _ hx).differentiableWithinAt\n  · rintro x hx\n    convert hf''₀ _ hx using 1\n    dsimp\n    rw [deriv_eqOn isOpen_interior (fun y hy ↦ ?_) hx]\n    exact (hf'' _ hy).congr this <| by rw [this hy]\n\n"}
{"name":"strictConvexOn_of_deriv2_pos","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf'' : ∀ (x : Real), Membership.mem (interior D) x → LT.lt 0 (Nat.iterate deriv 2 f x)\n⊢ StrictConvexOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly positive on the\ninterior, then `f` is strictly convex on `D`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point. -/\ntheorem strictConvexOn_of_deriv2_pos {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ interior D, 0 < (deriv^[2] f) x) :\n    StrictConvexOn ℝ D f :=\n  ((strictMonoOn_of_deriv_pos hD.interior fun z hz =>\n          (differentiableAt_of_deriv_ne_zero\n                (hf'' z hz).ne').differentiableWithinAt.continuousWithinAt) <|\n        by rwa [interior_interior]).strictConvexOn_of_deriv\n    hD hf\n\n"}
{"name":"strictConcaveOn_of_deriv2_neg","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf'' : ∀ (x : Real), Membership.mem (interior D) x → LT.lt (Nat.iterate deriv 2 f x) 0\n⊢ StrictConcaveOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly negative on the\ninterior, then `f` is strictly concave on `D`.\nNote that we don't require twice differentiability explicitly as it already implied by the second\nderivative being strictly negative, except at at most one point. -/\ntheorem strictConcaveOn_of_deriv2_neg {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ interior D, deriv^[2] f x < 0) :\n    StrictConcaveOn ℝ D f :=\n  ((strictAntiOn_of_deriv_neg hD.interior fun z hz =>\n          (differentiableAt_of_deriv_ne_zero\n                (hf'' z hz).ne).differentiableWithinAt.continuousWithinAt) <|\n        by rwa [interior_interior]).strictConcaveOn_of_deriv\n    hD hf\n\n"}
{"name":"convexOn_of_deriv2_nonneg'","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf' : DifferentiableOn Real f D\nhf'' : DifferentiableOn Real (deriv f) D\nhf''_nonneg : ∀ (x : Real), Membership.mem D x → LE.le 0 (Nat.iterate deriv 2 f x)\n⊢ ConvexOn Real D f","decl":"/-- If a function `f` is twice differentiable on an open convex set `D ⊆ ℝ` and\n`f''` is nonnegative on `D`, then `f` is convex on `D`. -/\ntheorem convexOn_of_deriv2_nonneg' {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf' : DifferentiableOn ℝ f D) (hf'' : DifferentiableOn ℝ (deriv f) D)\n    (hf''_nonneg : ∀ x ∈ D, 0 ≤ (deriv^[2] f) x) : ConvexOn ℝ D f :=\n  convexOn_of_deriv2_nonneg hD hf'.continuousOn (hf'.mono interior_subset)\n    (hf''.mono interior_subset) fun x hx => hf''_nonneg x (interior_subset hx)\n\n"}
{"name":"concaveOn_of_deriv2_nonpos'","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf' : DifferentiableOn Real f D\nhf'' : DifferentiableOn Real (deriv f) D\nhf''_nonpos : ∀ (x : Real), Membership.mem D x → LE.le (Nat.iterate deriv 2 f x) 0\n⊢ ConcaveOn Real D f","decl":"/-- If a function `f` is twice differentiable on an open convex set `D ⊆ ℝ` and\n`f''` is nonpositive on `D`, then `f` is concave on `D`. -/\ntheorem concaveOn_of_deriv2_nonpos' {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf' : DifferentiableOn ℝ f D) (hf'' : DifferentiableOn ℝ (deriv f) D)\n    (hf''_nonpos : ∀ x ∈ D, deriv^[2] f x ≤ 0) : ConcaveOn ℝ D f :=\n  concaveOn_of_deriv2_nonpos hD hf'.continuousOn (hf'.mono interior_subset)\n    (hf''.mono interior_subset) fun x hx => hf''_nonpos x (interior_subset hx)\n\n"}
{"name":"strictConvexOn_of_deriv2_pos'","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf'' : ∀ (x : Real), Membership.mem D x → LT.lt 0 (Nat.iterate deriv 2 f x)\n⊢ StrictConvexOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly positive on `D`,\nthen `f` is strictly convex on `D`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point. -/\ntheorem strictConvexOn_of_deriv2_pos' {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ D, 0 < (deriv^[2] f) x) : StrictConvexOn ℝ D f :=\n  strictConvexOn_of_deriv2_pos hD hf fun x hx => hf'' x (interior_subset hx)\n\n"}
{"name":"strictConcaveOn_of_deriv2_neg'","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"D : Set Real\nhD : Convex Real D\nf : Real → Real\nhf : ContinuousOn f D\nhf'' : ∀ (x : Real), Membership.mem D x → LT.lt (Nat.iterate deriv 2 f x) 0\n⊢ StrictConcaveOn Real D f","decl":"/-- If a function `f` is continuous on a convex set `D ⊆ ℝ` and `f''` is strictly negative on `D`,\nthen `f` is strictly concave on `D`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly negative, except at at most one point. -/\ntheorem strictConcaveOn_of_deriv2_neg' {D : Set ℝ} (hD : Convex ℝ D) {f : ℝ → ℝ}\n    (hf : ContinuousOn f D) (hf'' : ∀ x ∈ D, deriv^[2] f x < 0) : StrictConcaveOn ℝ D f :=\n  strictConcaveOn_of_deriv2_neg hD hf fun x hx => hf'' x (interior_subset hx)\n\n"}
{"name":"convexOn_univ_of_deriv2_nonneg","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf' : Differentiable Real f\nhf'' : Differentiable Real (deriv f)\nhf''_nonneg : ∀ (x : Real), LE.le 0 (Nat.iterate deriv 2 f x)\n⊢ ConvexOn Real Set.univ f","decl":"/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonnegative on `ℝ`,\nthen `f` is convex on `ℝ`. -/\ntheorem convexOn_univ_of_deriv2_nonneg {f : ℝ → ℝ} (hf' : Differentiable ℝ f)\n    (hf'' : Differentiable ℝ (deriv f)) (hf''_nonneg : ∀ x, 0 ≤ (deriv^[2] f) x) :\n    ConvexOn ℝ univ f :=\n  convexOn_of_deriv2_nonneg' convex_univ hf'.differentiableOn hf''.differentiableOn fun x _ =>\n    hf''_nonneg x\n\n"}
{"name":"concaveOn_univ_of_deriv2_nonpos","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf' : Differentiable Real f\nhf'' : Differentiable Real (deriv f)\nhf''_nonpos : ∀ (x : Real), LE.le (Nat.iterate deriv 2 f x) 0\n⊢ ConcaveOn Real Set.univ f","decl":"/-- If a function `f` is twice differentiable on `ℝ`, and `f''` is nonpositive on `ℝ`,\nthen `f` is concave on `ℝ`. -/\ntheorem concaveOn_univ_of_deriv2_nonpos {f : ℝ → ℝ} (hf' : Differentiable ℝ f)\n    (hf'' : Differentiable ℝ (deriv f)) (hf''_nonpos : ∀ x, deriv^[2] f x ≤ 0) :\n    ConcaveOn ℝ univ f :=\n  concaveOn_of_deriv2_nonpos' convex_univ hf'.differentiableOn hf''.differentiableOn fun x _ =>\n    hf''_nonpos x\n\n"}
{"name":"strictConvexOn_univ_of_deriv2_pos","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf : Continuous f\nhf'' : ∀ (x : Real), LT.lt 0 (Nat.iterate deriv 2 f x)\n⊢ StrictConvexOn Real Set.univ f","decl":"/-- If a function `f` is continuous on `ℝ`, and `f''` is strictly positive on `ℝ`,\nthen `f` is strictly convex on `ℝ`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly positive, except at at most one point. -/\ntheorem strictConvexOn_univ_of_deriv2_pos {f : ℝ → ℝ} (hf : Continuous f)\n    (hf'' : ∀ x, 0 < (deriv^[2] f) x) : StrictConvexOn ℝ univ f :=\n  strictConvexOn_of_deriv2_pos' convex_univ hf.continuousOn fun x _ => hf'' x\n\n"}
{"name":"strictConcaveOn_univ_of_deriv2_neg","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"f : Real → Real\nhf : Continuous f\nhf'' : ∀ (x : Real), LT.lt (Nat.iterate deriv 2 f x) 0\n⊢ StrictConcaveOn Real Set.univ f","decl":"/-- If a function `f` is continuous on `ℝ`, and `f''` is strictly negative on `ℝ`,\nthen `f` is strictly concave on `ℝ`.\nNote that we don't require twice differentiability explicitly as it is already implied by the second\nderivative being strictly negative, except at at most one point. -/\ntheorem strictConcaveOn_univ_of_deriv2_neg {f : ℝ → ℝ} (hf : Continuous f)\n    (hf'' : ∀ x, deriv^[2] f x < 0) : StrictConcaveOn ℝ univ f :=\n  strictConcaveOn_of_deriv2_neg' convex_univ hf.continuousOn fun x _ => hf'' x\n\n"}
{"name":"ConvexOn.slope_mono","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nx : 𝕜\nhfc : ConvexOn 𝕜 s f\nhx : Membership.mem s x\n⊢ MonotoneOn (slope f x) (SDiff.sdiff s (Singleton.singleton x))","decl":"/-- If `f : 𝕜 → 𝕜` is convex on `s`, then for any point `x ∈ s` the slope of the secant line of `f`\nthrough `x` is monotone on `s \\ {x}`. -/\nlemma ConvexOn.slope_mono (hfc : ConvexOn 𝕜 s f) (hx : x ∈ s) : MonotoneOn (slope f x) (s \\ {x}) :=\n  (slope_fun_def_field f _).symm ▸ fun _ hy _ hz hz' ↦ hfc.secant_mono hx (mem_of_mem_diff hy)\n    (mem_of_mem_diff hz) (not_mem_of_mem_diff hy :) (not_mem_of_mem_diff hz :) hz'\n\n"}
{"name":"ConcaveOn.slope_anti","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nx : 𝕜\nhfc : ConcaveOn 𝕜 s f\nhx : Membership.mem s x\n⊢ AntitoneOn (slope f x) (SDiff.sdiff s (Singleton.singleton x))","decl":"/-- If `f : 𝕜 → 𝕜` is concave on `s`, then for any point `x ∈ s` the slope of the secant line of `f`\nthrough `x` is antitone on `s \\ {x}`. -/\nlemma ConcaveOn.slope_anti (hfc : ConcaveOn 𝕜 s f) (hx : x ∈ s) :\n    AntitoneOn (slope f x) (s \\ {x}) := by\n  rw [← neg_neg f, slope_neg_fun]\n  exact (ConvexOn.slope_mono hfc.neg hx).neg\n\n"}
{"name":"ConvexOn.le_slope_of_hasDerivWithinAt_Ioi","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Ioi x) x\n⊢ LE.le f' (slope f x y)","decl":"/-- If `f : ℝ → ℝ` is convex on `S` and right-differentiable at `x ∈ S`, then the slope of any\nsecant line with left endpoint at `x` is bounded below by the right derivative of `f` at `x`. -/\nlemma le_slope_of_hasDerivWithinAt_Ioi (hfc : ConvexOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Ioi x) x) :\n    f' ≤ slope f x y := by\n  apply le_of_tendsto <| (hasDerivWithinAt_iff_tendsto_slope' not_mem_Ioi_self).mp hf'\n  simp_rw [eventually_nhdsWithin_iff, slope_def_field]\n  filter_upwards [eventually_lt_nhds hxy] with t ht (ht' : x < t)\n  refine hfc.secant_mono hx (?_ : t ∈ S) hy ht'.ne' hxy.ne' ht.le\n  exact hfc.1.ordConnected.out hx hy ⟨ht'.le, ht.le⟩\n\n"}
{"name":"ConvexOn.rightDeriv_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LE.le (derivWithin f (Set.Ioi x) x) (slope f x y)","decl":"/-- Reformulation of `ConvexOn.le_slope_of_hasDerivWithinAt_Ioi` using `derivWithin`. -/\nlemma rightDeriv_le_slope (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Ioi x) x) :\n    derivWithin f (Ioi x) x ≤ slope f x y :=\n  le_slope_of_hasDerivWithinAt_Ioi hfc hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConvexOn.right_deriv_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LE.le (derivWithin f (Set.Ioi x) x) (slope f x y)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias right_deriv_le_slope := rightDeriv_le_slope\n\n"}
{"name":"ConvexOn.le_slope_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' S x\n⊢ LE.le f' (slope f x y)","decl":"/-- If `f : ℝ → ℝ` is convex on `S` and differentiable within `S` at `x`, then the slope of any\nsecant line with left endpoint at `x` is bounded below by the derivative of `f` within `S` at `x`.\n\nThis is fractionally weaker than `ConvexOn.le_slope_of_hasDerivWithinAt_Ioi` but simpler to apply\nunder a `DifferentiableOn S` hypothesis. -/\nlemma le_slope_of_hasDerivWithinAt (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivWithinAt f f' S x) :\n    f' ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivWithinAt_Ioi hx hy hxy <|\n    hf'.mono_of_mem_nhdsWithin <| hfc.1.ordConnected.mem_nhdsGT hx hy hxy\n\n"}
{"name":"ConvexOn.derivWithin_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S x\n⊢ LE.le (derivWithin f S x) (slope f x y)","decl":"/-- Reformulation of `ConvexOn.le_slope_of_hasDerivWithinAt` using `derivWithin`. -/\nlemma derivWithin_le_slope (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S x) :\n    derivWithin f S x ≤ slope f x y :=\n  le_slope_of_hasDerivWithinAt hfc hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConvexOn.le_slope_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nha : HasDerivAt f f' x\n⊢ LE.le f' (slope f x y)","decl":"/-- If `f : ℝ → ℝ` is convex on `S` and differentiable at `x ∈ S`, then the slope of any secant\nline with left endpoint at `x` is bounded below by the derivative of `f` at `x`. -/\nlemma le_slope_of_hasDerivAt (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (ha : HasDerivAt f f' x) :\n    f' ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivWithinAt_Ioi hx hy hxy ha.hasDerivWithinAt\n\n"}
{"name":"ConvexOn.deriv_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f x\n⊢ LE.le (deriv f x) (slope f x y)","decl":"/-- Reformulation of `ConvexOn.le_slope_of_hasDerivAt` using `deriv` -/\nlemma deriv_le_slope (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f x) :\n    deriv f x ≤ slope f x y :=\n  le_slope_of_hasDerivAt hfc hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"ConvexOn.slope_le_of_hasDerivWithinAt_Iio","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Iio y) y\n⊢ LE.le (slope f x y) f'","decl":"/-- If `f : ℝ → ℝ` is convex on `S` and left-differentiable at `y ∈ S`, then the slope of any secant\nline with right endpoint at `y` is bounded above by the left derivative of `f` at `y`. -/\nlemma slope_le_of_hasDerivWithinAt_Iio (hfc : ConvexOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Iio y) y) :\n    slope f x y ≤ f' := by\n  apply ge_of_tendsto <| (hasDerivWithinAt_iff_tendsto_slope' not_mem_Iio_self).mp hf'\n  simp_rw [eventually_nhdsWithin_iff, slope_comm f x y, slope_def_field]\n  filter_upwards [eventually_gt_nhds hxy] with t ht (ht' : t < y)\n  refine hfc.secant_mono hy hx (?_ : t ∈ S) hxy.ne ht'.ne ht.le\n  exact hfc.1.ordConnected.out hx hy ⟨ht.le, ht'.le⟩\n\n"}
{"name":"ConvexOn.slope_le_leftDeriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LE.le (slope f x y) (derivWithin f (Set.Iio y) y)","decl":"/-- Reformulation of `ConvexOn.slope_le_of_hasDerivWithinAt_Iio` using `derivWithin`. -/\nlemma slope_le_leftDeriv (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Iio y) y) :\n    slope f x y ≤ derivWithin f (Iio y) y :=\n  hfc.slope_le_of_hasDerivWithinAt_Iio hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConvexOn.slope_le_left_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LE.le (slope f x y) (derivWithin f (Set.Iio y) y)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias slope_le_left_deriv := slope_le_leftDeriv\n\n"}
{"name":"ConvexOn.slope_le_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' S y\n⊢ LE.le (slope f x y) f'","decl":"/-- If `f : ℝ → ℝ` is convex on `S` and differentiable within `S` at `y`, then the slope of any\nsecant line with right endpoint at `y` is bounded above by the derivative of `f` within `S` at `y`.\n\nThis is fractionally weaker than `ConvexOn.slope_le_of_hasDerivWithinAt_Iio` but simpler to apply\nunder a `DifferentiableOn S` hypothesis. -/\nlemma slope_le_of_hasDerivWithinAt (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivWithinAt f f' S y) :\n    slope f x y ≤ f' :=\n  hfc.slope_le_of_hasDerivWithinAt_Iio hx hy hxy <|\n    hf'.mono_of_mem_nhdsWithin <| hfc.1.ordConnected.mem_nhdsLT hx hy hxy\n\n"}
{"name":"ConvexOn.slope_le_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S y\n⊢ LE.le (slope f x y) (derivWithin f S y)","decl":"/-- Reformulation of `ConvexOn.slope_le_of_hasDerivWithinAt` using `derivWithin`. -/\nlemma slope_le_derivWithin (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S y) :\n    slope f x y ≤ derivWithin f S y :=\n  hfc.slope_le_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConvexOn.slope_le_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivAt f f' y\n⊢ LE.le (slope f x y) f'","decl":"/-- If `f : ℝ → ℝ` is convex on `S` and differentiable at `y ∈ S`, then the slope of any secant\nline with right endpoint at `y` is bounded above by the derivative of `f` at `y`. -/\nlemma slope_le_of_hasDerivAt (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivAt f f' y) :\n    slope f x y ≤ f' :=\n  hfc.slope_le_of_hasDerivWithinAt_Iio hx hy hxy hf'.hasDerivWithinAt\n\n"}
{"name":"ConvexOn.slope_le_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f y\n⊢ LE.le (slope f x y) (deriv f y)","decl":"/-- Reformulation of `ConvexOn.slope_le_of_hasDerivAt` using `deriv`. -/\nlemma slope_le_deriv (hfc : ConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f y) :\n    slope f x y ≤ deriv f y :=\n  hfc.slope_le_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"ConvexOn.monotoneOn_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : ConvexOn Real S f\nhfd : DifferentiableOn Real f S\n⊢ MonotoneOn (derivWithin f S) S","decl":"/-- If `f` is convex on `S` and differentiable on `S`, then its derivative within `S` is monotone\non `S`. -/\nlemma monotoneOn_derivWithin (hfc : ConvexOn ℝ S f) (hfd : DifferentiableOn ℝ f S) :\n    MonotoneOn (derivWithin f S) S := by\n  intro x hx y hy hxy\n  rcases eq_or_lt_of_le hxy with rfl | hxy'\n  · rfl\n  exact (hfc.derivWithin_le_slope hx hy hxy' (hfd x hx)).trans\n    (hfc.slope_le_derivWithin hx hy hxy' (hfd y hy))\n\n"}
{"name":"ConvexOn.monotoneOn_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : ConvexOn Real S f\nhfd : ∀ (x : Real), Membership.mem S x → DifferentiableAt Real f x\n⊢ MonotoneOn (deriv f) S","decl":"/-- If `f` is convex on `S` and differentiable at all points of `S`, then its derivative is monotone\non `S`. -/\ntheorem monotoneOn_deriv (hfc : ConvexOn ℝ S f) (hfd : ∀ x ∈ S, DifferentiableAt ℝ f x) :\n    MonotoneOn (deriv f) S := by\n  intro x hx y hy hxy\n  rcases eq_or_lt_of_le hxy with rfl | hxy'\n  · rfl\n  exact (hfc.deriv_le_slope hx hy hxy' (hfd x hx)).trans (hfc.slope_le_deriv hx hy hxy' (hfd y hy))\n\n"}
{"name":"StrictConvexOn.lt_slope_of_hasDerivWithinAt_Ioi","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Ioi x) x\n⊢ LT.lt f' (slope f x y)","decl":"/-- If `f : ℝ → ℝ` is strictly convex on `S` and right-differentiable at `x ∈ S`, then the slope of\nany secant line with left endpoint at `x` is strictly greater than the right derivative of `f` at\n`x`. -/\nlemma lt_slope_of_hasDerivWithinAt_Ioi (hfc : StrictConvexOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Ioi x) x) :\n    f' < slope f x y := by\n  obtain ⟨u, hxu, huy⟩ := exists_between hxy\n  have hu : u ∈ S := hfc.1.ordConnected.out hx hy ⟨hxu.le, huy.le⟩\n  have := hfc.secant_strict_mono hx hu hy hxu.ne' hxy.ne' huy\n  simp only [← slope_def_field] at this\n  exact (hfc.convexOn.le_slope_of_hasDerivWithinAt_Ioi hx hu hxu hf').trans_lt this\n\n"}
{"name":"StrictConvexOn.rightDeriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LT.lt (derivWithin f (Set.Ioi x) x) (slope f x y)","decl":"lemma rightDeriv_lt_slope (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Ioi x) x) :\n    derivWithin f (Ioi x) x < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt_Ioi hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConvexOn.right_deriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LT.lt (derivWithin f (Set.Ioi x) x) (slope f x y)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias right_deriv_lt_slope := rightDeriv_lt_slope\n\n"}
{"name":"StrictConvexOn.lt_slope_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' S x\n⊢ LT.lt f' (slope f x y)","decl":"/-- If `f : ℝ → ℝ` is strictly convex on `S` and differentiable within `S` at `x ∈ S`, then the\nslope of any secant line with left endpoint at `x` is strictly greater than the derivative of `f`\nwithin `S` at `x`.\n\nThis is fractionally weaker than `StrictConvexOn.lt_slope_of_hasDerivWithinAt_Ioi` but simpler to\napply under a `DifferentiableOn S` hypothesis. -/\nlemma lt_slope_of_hasDerivWithinAt (hfc : StrictConvexOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' S x) :\n    f' < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt_Ioi hx hy hxy <|\n    hf'.mono_of_mem_nhdsWithin <| hfc.1.ordConnected.mem_nhdsGT hx hy hxy\n\n"}
{"name":"StrictConvexOn.derivWithin_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S x\n⊢ LT.lt (derivWithin f S x) (slope f x y)","decl":"lemma derivWithin_lt_slope (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S x) :\n    derivWithin f S x < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConvexOn.lt_slope_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivAt f f' x\n⊢ LT.lt f' (slope f x y)","decl":"/-- If `f : ℝ → ℝ` is strictly convex on `S` and differentiable at `x ∈ S`, then the slope of any\nsecant line with left endpoint at `x` is strictly greater than the derivative of `f` at `x`. -/\nlemma lt_slope_of_hasDerivAt (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivAt f f' x) :\n    f' < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt_Ioi hx hy hxy hf'.hasDerivWithinAt\n\n"}
{"name":"StrictConvexOn.deriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f x\n⊢ LT.lt (deriv f x) (slope f x y)","decl":"lemma deriv_lt_slope (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f x) :\n    deriv f x < slope f x y :=\n  hfc.lt_slope_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"StrictConvexOn.slope_lt_of_hasDerivWithinAt_Iio","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Iio y) y\n⊢ LT.lt (slope f x y) f'","decl":"/-- If `f : ℝ → ℝ` is strictly convex on `S` and differentiable at `y ∈ S`, then the slope of any\nsecant line with right endpoint at `y` is strictly less than the left derivative at `y`. -/\nlemma slope_lt_of_hasDerivWithinAt_Iio (hfc : StrictConvexOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Iio y) y)  :\n    slope f x y < f' := by\n  obtain ⟨u, hxu, huy⟩ := exists_between hxy\n  have hu : u ∈ S := hfc.1.ordConnected.out hx hy ⟨hxu.le, huy.le⟩\n  have := hfc.secant_strict_mono hy hx hu hxy.ne huy.ne hxu\n  simp_rw [← slope_def_field, slope_comm _ y] at this\n  exact this.trans_le <| hfc.convexOn.slope_le_of_hasDerivWithinAt_Iio hu hy huy hf'\n\n"}
{"name":"StrictConvexOn.slope_lt_leftDeriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LT.lt (slope f x y) (derivWithin f (Set.Iio y) y)","decl":"lemma slope_lt_leftDeriv (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Iio y) y)  :\n    slope f x y < derivWithin f (Iio y) y :=\n  hfc.slope_lt_of_hasDerivWithinAt_Iio hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConvexOn.slope_lt_left_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LT.lt (slope f x y) (derivWithin f (Set.Iio y) y)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias slope_lt_left_deriv := slope_lt_leftDeriv\n\n"}
{"name":"StrictConvexOn.slope_lt_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' S y\n⊢ LT.lt (slope f x y) f'","decl":"/-- If `f : ℝ → ℝ` is strictly convex on `S` and differentiable within `S` at `y ∈ S`, then the\nslope of any secant line with right endpoint at `y` is strictly less than the derivative of `f`\nwithin `S` at `y`.\n\nThis is fractionally weaker than `StrictConvexOn.slope_lt_of_hasDerivWithinAt_Iio` but simpler to\napply under a `DifferentiableOn S` hypothesis.-/\nlemma slope_lt_of_hasDerivWithinAt (hfc : StrictConvexOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' S y) :\n    slope f x y < f' :=\n  hfc.slope_lt_of_hasDerivWithinAt_Iio hx hy hxy <|\n    hf'.mono_of_mem_nhdsWithin <| hfc.1.ordConnected.mem_nhdsLT hx hy hxy\n\n"}
{"name":"StrictConvexOn.slope_lt_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S y\n⊢ LT.lt (slope f x y) (derivWithin f S y)","decl":"lemma slope_lt_derivWithin (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S y) :\n    slope f x y < derivWithin f S y :=\n  hfc.slope_lt_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConvexOn.slope_lt_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivAt f f' y\n⊢ LT.lt (slope f x y) f'","decl":"/-- If `f : ℝ → ℝ` is strictly convex on `S` and differentiable at `y ∈ S`, then the slope of any\nsecant line with right endpoint at `y` is strictly less than the derivative of `f` at `y`. -/\nlemma slope_lt_of_hasDerivAt (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivAt f f' y) :\n    slope f x y < f' :=\n  hfc.slope_lt_of_hasDerivWithinAt_Iio hx hy hxy hf'.hasDerivWithinAt\n\n"}
{"name":"StrictConvexOn.slope_lt_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConvexOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f y\n⊢ LT.lt (slope f x y) (deriv f y)","decl":"lemma slope_lt_deriv (hfc : StrictConvexOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f y) :\n    slope f x y < deriv f y :=\n  hfc.slope_lt_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"StrictConvexOn.strictMonoOn_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : StrictConvexOn Real S f\nhfd : DifferentiableOn Real f S\n⊢ StrictMonoOn (derivWithin f S) S","decl":"/-- If `f` is convex on `S` and differentiable on `S`, then its derivative within `S` is monotone\non `S`. -/\nlemma strictMonoOn_derivWithin (hfc : StrictConvexOn ℝ S f) (hfd : DifferentiableOn ℝ f S) :\n    StrictMonoOn (derivWithin f S) S := by\n  intro x hx y hy hxy\n  exact (hfc.derivWithin_lt_slope hx hy hxy (hfd x hx)).trans\n    (hfc.slope_lt_derivWithin hx hy hxy (hfd y hy))\n\n"}
{"name":"StrictConvexOn.strictMonoOn_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : StrictConvexOn Real S f\nhfd : ∀ (x : Real), Membership.mem S x → DifferentiableAt Real f x\n⊢ StrictMonoOn (deriv f) S","decl":"/-- If `f` is convex on `S` and differentiable at all points of `S`, then its derivative is monotone\non `S`. -/\nlemma strictMonoOn_deriv (hfc : StrictConvexOn ℝ S f) (hfd : ∀ x ∈ S, DifferentiableAt ℝ f x) :\n    StrictMonoOn (deriv f) S := by\n  intro x hx y hy hxy\n  exact (hfc.deriv_lt_slope hx hy hxy (hfd x hx)).trans (hfc.slope_lt_deriv hx hy hxy (hfd y hy))\n\n"}
{"name":"ConcaveOn.slope_le_of_hasDerivWithinAt_Ioi","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Ioi x) x\n⊢ LE.le (slope f x y) f'","decl":"lemma slope_le_of_hasDerivWithinAt_Ioi (hfc : ConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Ioi x) x) :\n    slope f x y ≤ f' := by\n  simpa only [Pi.neg_def, slope_neg, neg_neg] using\n    neg_le_neg (hfc.neg.le_slope_of_hasDerivWithinAt_Ioi hx hy hxy hf'.neg)\n\n"}
{"name":"ConcaveOn.slope_le_rightDeriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LE.le (slope f x y) (derivWithin f (Set.Ioi x) x)","decl":"lemma slope_le_rightDeriv (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Ioi x) x) :\n    slope f x y ≤ derivWithin f (Ioi x) x :=\n  hfc.slope_le_of_hasDerivWithinAt_Ioi hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConcaveOn.slope_le_right_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LE.le (slope f x y) (derivWithin f (Set.Ioi x) x)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias slope_le_right_deriv := slope_le_rightDeriv\n\n"}
{"name":"ConcaveOn.slope_le_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : HasDerivWithinAt f f' S x\n⊢ LE.le (slope f x y) f'","decl":"lemma slope_le_of_hasDerivWithinAt (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : HasDerivWithinAt f f' S x) :\n    slope f x y ≤ f' :=\n  hfc.slope_le_of_hasDerivWithinAt_Ioi hx hy hxy <|\n    hfd.mono_of_mem_nhdsWithin <| hfc.1.ordConnected.mem_nhdsGT hx hy hxy\n\n"}
{"name":"ConcaveOn.slope_le_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S x\n⊢ LE.le (slope f x y) (derivWithin f S x)","decl":"lemma slope_le_derivWithin (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S x) :\n    slope f x y ≤ derivWithin f S x :=\n  hfc.slope_le_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConcaveOn.slope_le_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivAt f f' x\n⊢ LE.le (slope f x y) f'","decl":"lemma slope_le_of_hasDerivAt (hfc : ConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivAt f f' x) :\n    slope f x y ≤ f' :=\n  hfc.slope_le_of_hasDerivWithinAt_Ioi hx hy hxy hf'.hasDerivWithinAt\n\n"}
{"name":"ConcaveOn.slope_le_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f x\n⊢ LE.le (slope f x y) (deriv f x)","decl":"lemma slope_le_deriv (hfc : ConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hfd : DifferentiableAt ℝ f x) :\n    slope f x y ≤ deriv f x :=\n  hfc.slope_le_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"ConcaveOn.le_slope_of_hasDerivWithinAt_Iio","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Iio y) y\n⊢ LE.le f' (slope f x y)","decl":"lemma le_slope_of_hasDerivWithinAt_Iio (hfc : ConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Iio y) y) :\n    f' ≤ slope f x y := by\n  simpa only [neg_neg, Pi.neg_def, slope_neg] using\n    neg_le_neg (hfc.neg.slope_le_of_hasDerivWithinAt_Iio hx hy hxy hf'.neg)\n\n"}
{"name":"ConcaveOn.leftDeriv_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LE.le (derivWithin f (Set.Iio y) y) (slope f x y)","decl":"lemma leftDeriv_le_slope (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Iio y) y) :\n    derivWithin f (Iio y) y ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivWithinAt_Iio hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConcaveOn.left_deriv_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LE.le (derivWithin f (Set.Iio y) y) (slope f x y)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias left_deriv_le_slope := leftDeriv_le_slope\n\n"}
{"name":"ConcaveOn.le_slope_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' S y\n⊢ LE.le f' (slope f x y)","decl":"lemma le_slope_of_hasDerivWithinAt (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivWithinAt f f' S y) :\n    f' ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivWithinAt_Iio hx hy hxy <|\n    hf'.mono_of_mem_nhdsWithin <| hfc.1.ordConnected.mem_nhdsLT hx hy hxy\n\n"}
{"name":"ConcaveOn.derivWithin_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S y\n⊢ LE.le (derivWithin f S y) (slope f x y)","decl":"lemma derivWithin_le_slope (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S y) :\n    derivWithin f S y ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"ConcaveOn.le_slope_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivAt f f' y\n⊢ LE.le f' (slope f x y)","decl":"lemma le_slope_of_hasDerivAt (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivAt f f' y) :\n    f' ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivWithinAt_Iio hx hy hxy hf'.hasDerivWithinAt\n\n"}
{"name":"ConcaveOn.deriv_le_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : ConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f y\n⊢ LE.le (deriv f y) (slope f x y)","decl":"lemma deriv_le_slope (hfc : ConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f y) :\n    deriv f y ≤ slope f x y :=\n  hfc.le_slope_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"ConcaveOn.antitoneOn_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : ConcaveOn Real S f\nhfd : DifferentiableOn Real f S\n⊢ AntitoneOn (derivWithin f S) S","decl":"lemma antitoneOn_derivWithin (hfc : ConcaveOn ℝ S f) (hfd : DifferentiableOn ℝ f S) :\n    AntitoneOn (derivWithin f S) S := by\n  intro x hx y hy hxy\n  rcases eq_or_lt_of_le hxy with rfl | hxy'\n  · rfl\n  exact (hfc.derivWithin_le_slope hx hy hxy' (hfd y hy)).trans\n    (hfc.slope_le_derivWithin hx hy hxy' (hfd x hx))\n\n"}
{"name":"ConcaveOn.antitoneOn_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : ConcaveOn Real S f\nhfd : ∀ (x : Real), Membership.mem S x → DifferentiableAt Real f x\n⊢ AntitoneOn (deriv f) S","decl":"/-- If `f` is concave on `S` and differentiable at all points of `S`, then its derivative is\nantitone (monotone decreasing) on `S`. -/\ntheorem antitoneOn_deriv (hfc : ConcaveOn ℝ S f) (hfd : ∀ x ∈ S, DifferentiableAt ℝ f x) :\n    AntitoneOn (deriv f) S := by\n  simpa only [Pi.neg_def, deriv.neg, neg_neg] using\n    (hfc.neg.monotoneOn_deriv (fun x hx ↦ (hfd x hx).neg)).neg\n\n"}
{"name":"StrictConcaveOn.slope_lt_of_hasDerivWithinAt_Ioi","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Ioi x) x\n⊢ LT.lt (slope f x y) f'","decl":"lemma slope_lt_of_hasDerivWithinAt_Ioi (hfc : StrictConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Ioi x) x) :\n    slope f x y < f' := by\n  simpa only [Pi.neg_def, slope_neg, neg_neg] using\n    neg_lt_neg (hfc.neg.lt_slope_of_hasDerivWithinAt_Ioi hx hy hxy hf'.neg)\n\n"}
{"name":"StrictConcaveOn.slope_lt_rightDeriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LT.lt (slope f x y) (derivWithin f (Set.Ioi x) x)","decl":"lemma slope_lt_rightDeriv (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Ioi x) x) :\n    slope f x y < derivWithin f (Ioi x) x :=\n  hfc.slope_lt_of_hasDerivWithinAt_Ioi hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConcaveOn.slope_lt_right_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Ioi x) x\n⊢ LT.lt (slope f x y) (derivWithin f (Set.Ioi x) x)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias slope_lt_right_deriv := slope_lt_rightDeriv\n\n"}
{"name":"StrictConcaveOn.slope_lt_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : HasDerivWithinAt f f' S x\n⊢ LT.lt (slope f x y) f'","decl":"lemma slope_lt_of_hasDerivWithinAt (hfc : StrictConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hfd : HasDerivWithinAt f f' S x) :\n    slope f x y < f' := by\n  simpa only [Pi.neg_def, slope_neg, neg_neg] using\n    neg_lt_neg (hfc.neg.lt_slope_of_hasDerivWithinAt hx hy hxy hfd.neg)\n\n"}
{"name":"StrictConcaveOn.slope_lt_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S x\n⊢ LT.lt (slope f x y) (derivWithin f S x)","decl":"lemma slope_lt_derivWithin (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S x) :\n    slope f x y < derivWithin f S x :=\n  hfc.slope_lt_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConcaveOn.slope_lt_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : HasDerivAt f f' x\n⊢ LT.lt (slope f x y) f'","decl":"lemma slope_lt_of_hasDerivAt (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : HasDerivAt f f' x) :\n    slope f x y < f' := by\n  simpa only [Pi.neg_def, slope_neg, neg_neg] using\n    neg_lt_neg (hfc.neg.lt_slope_of_hasDerivAt hx hy hxy hfd.neg)\n\n"}
{"name":"StrictConcaveOn.slope_lt_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f x\n⊢ LT.lt (slope f x y) (deriv f x)","decl":"lemma slope_lt_deriv (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f x) :\n    slope f x y < deriv f x :=\n  hfc.slope_lt_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"StrictConcaveOn.lt_slope_of_hasDerivWithinAt_Iio","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' (Set.Iio y) y\n⊢ LT.lt f' (slope f x y)","decl":"lemma lt_slope_of_hasDerivWithinAt_Iio (hfc : StrictConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' (Iio y) y) :\n    f' < slope f x y := by\n  simpa only [Pi.neg_def, slope_neg, neg_neg] using\n    neg_lt_neg (hfc.neg.slope_lt_of_hasDerivWithinAt_Iio hx hy hxy hf'.neg)\n\n"}
{"name":"StrictConcaveOn.leftDeriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LT.lt (derivWithin f (Set.Iio y) y) (slope f x y)","decl":"lemma leftDeriv_lt_slope (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f (Iio y) y) :\n    derivWithin f (Iio y) y < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt_Iio hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConcaveOn.left_deriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f (Set.Iio y) y\n⊢ LT.lt (derivWithin f (Set.Iio y) y) (slope f x y)","decl":"@[deprecated (since := \"2025-01-26\")]\nalias left_deriv_lt_slope := leftDeriv_lt_slope\n\n"}
{"name":"StrictConcaveOn.lt_slope_of_hasDerivWithinAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivWithinAt f f' S y\n⊢ LT.lt f' (slope f x y)","decl":"lemma lt_slope_of_hasDerivWithinAt (hfc : StrictConcaveOn ℝ S f)\n    (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y) (hf' : HasDerivWithinAt f f' S y) :\n    f' < slope f x y := by\n  simpa only [neg_neg, Pi.neg_def, slope_neg] using\n    neg_lt_neg (hfc.neg.slope_lt_of_hasDerivWithinAt hx hy hxy hf'.neg)\n\n"}
{"name":"StrictConcaveOn.derivWithin_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableWithinAt Real f S y\n⊢ LT.lt (derivWithin f S y) (slope f x y)","decl":"lemma derivWithin_lt_slope (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableWithinAt ℝ f S y) :\n    derivWithin f S y < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt hx hy hxy hfd.hasDerivWithinAt\n\n"}
{"name":"StrictConcaveOn.lt_slope_of_hasDerivAt","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y f' : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhf' : HasDerivAt f f' y\n⊢ LT.lt f' (slope f x y)","decl":"lemma lt_slope_of_hasDerivAt (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hf' : HasDerivAt f f' y) :\n    f' < slope f x y :=\n  hfc.lt_slope_of_hasDerivWithinAt_Iio hx hy hxy hf'.hasDerivWithinAt\n\n"}
{"name":"StrictConcaveOn.deriv_lt_slope","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nx y : Real\nhfc : StrictConcaveOn Real S f\nhx : Membership.mem S x\nhy : Membership.mem S y\nhxy : LT.lt x y\nhfd : DifferentiableAt Real f y\n⊢ LT.lt (deriv f y) (slope f x y)","decl":"lemma deriv_lt_slope (hfc : StrictConcaveOn ℝ S f) (hx : x ∈ S) (hy : y ∈ S) (hxy : x < y)\n    (hfd : DifferentiableAt ℝ f y) :\n    deriv f y < slope f x y :=\n  hfc.lt_slope_of_hasDerivAt hx hy hxy hfd.hasDerivAt\n\n"}
{"name":"StrictConcaveOn.strictAntiOn_derivWithin","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : StrictConcaveOn Real S f\nhfd : DifferentiableOn Real f S\n⊢ StrictAntiOn (derivWithin f S) S","decl":"lemma strictAntiOn_derivWithin (hfc : StrictConcaveOn ℝ S f) (hfd : DifferentiableOn ℝ f S) :\n    StrictAntiOn (derivWithin f S) S := by\n  intro x hx y hy hxy\n  exact (hfc.derivWithin_lt_slope hx hy hxy (hfd y hy)).trans\n    (hfc.slope_lt_derivWithin hx hy hxy (hfd x hx))\n\n"}
{"name":"StrictConcaveOn.strictAntiOn_deriv","module":"Mathlib.Analysis.Convex.Deriv","initialProofState":"S : Set Real\nf : Real → Real\nhfc : StrictConcaveOn Real S f\nhfd : ∀ (x : Real), Membership.mem S x → DifferentiableAt Real f x\n⊢ StrictAntiOn (deriv f) S","decl":"theorem strictAntiOn_deriv (hfc : StrictConcaveOn ℝ S f) (hfd : ∀ x ∈ S, DifferentiableAt ℝ f x) :\n    StrictAntiOn (deriv f) S := by\n  simpa only [Pi.neg_def, deriv.neg, neg_neg] using\n    (hfc.neg.strictMonoOn_deriv (fun x hx ↦ (hfd x hx).neg)).neg\n\n"}
