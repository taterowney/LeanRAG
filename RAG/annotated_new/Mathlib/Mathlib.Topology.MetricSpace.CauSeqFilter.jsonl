{"name":"CauSeq.tendsto_limit","module":"Mathlib.Topology.MetricSpace.CauSeqFilter","initialProofState":"Œ≤ : Type v\ninst‚úù¬π : NormedRing Œ≤\nhn : IsAbsoluteValue Norm.norm\nf : CauSeq Œ≤ Norm.norm\ninst‚úù : CauSeq.IsComplete Œ≤ Norm.norm\n‚ä¢ Filter.Tendsto (‚Üëf) Filter.atTop (nhds f.lim)","decl":"theorem CauSeq.tendsto_limit [NormedRing Œ≤] [hn : IsAbsoluteValue (norm : Œ≤ ‚Üí ‚Ñù)]\n    (f : CauSeq Œ≤ norm) [CauSeq.IsComplete Œ≤ norm] : Tendsto f atTop (ùìù f.lim) :=\n  tendsto_nhds.mpr\n    (by\n      intro s os lfs\n      suffices ‚àÉ a : ‚Ñï, ‚àÄ b : ‚Ñï, b ‚â• a ‚Üí f b ‚àà s by simpa using this\n      rcases Metric.isOpen_iff.1 os _ lfs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©\n      cases' Setoid.symm (CauSeq.equiv_lim f) _ hŒµ with N hN\n      exists N\n      intro b hb\n      apply hŒµs\n      dsimp [Metric.ball]\n      rw [dist_comm, dist_eq_norm]\n      solve_by_elim)\n\n"}
{"name":"CauchySeq.isCauSeq","module":"Mathlib.Topology.MetricSpace.CauSeqFilter","initialProofState":"Œ≤ : Type v\ninst‚úù : NormedField Œ≤\nf : Nat ‚Üí Œ≤\nhf : CauchySeq f\n‚ä¢ IsCauSeq Norm.norm f","decl":"theorem CauchySeq.isCauSeq {f : ‚Ñï ‚Üí Œ≤} (hf : CauchySeq f) : IsCauSeq norm f := by\n  cases' cauchy_iff.1 hf with hf1 hf2\n  intro Œµ hŒµ\n  rcases hf2 { x | dist x.1 x.2 < Œµ } (dist_mem_uniformity hŒµ) with ‚ü®t, ‚ü®ht, htsub‚ü©‚ü©\n  simp only [mem_map, mem_atTop_sets, mem_preimage] at ht; cases' ht with N hN\n  exists N\n  intro j hj\n  rw [‚Üê dist_eq_norm]\n  apply @htsub (f j, f N)\n  apply Set.mk_mem_prod <;> solve_by_elim [le_refl]\n\n"}
{"name":"CauSeq.cauchySeq","module":"Mathlib.Topology.MetricSpace.CauSeqFilter","initialProofState":"Œ≤ : Type v\ninst‚úù : NormedField Œ≤\nf : CauSeq Œ≤ Norm.norm\n‚ä¢ CauchySeq ‚Üëf","decl":"theorem CauSeq.cauchySeq (f : CauSeq Œ≤ norm) : CauchySeq f := by\n  refine cauchy_iff.2 ‚ü®by infer_instance, fun s hs => ?_‚ü©\n  rcases mem_uniformity_dist.1 hs with ‚ü®Œµ, ‚ü®hŒµ, hŒµs‚ü©‚ü©\n  cases' CauSeq.cauchy‚ÇÇ f hŒµ with N hN\n  exists { n | n ‚â• N }.image f\n  simp only [exists_prop, mem_atTop_sets, mem_map, mem_image, mem_setOf_eq]\n  constructor\n  ¬∑ exists N\n    intro b hb\n    exists b\n  ¬∑ rintro ‚ü®a, b‚ü© ‚ü®‚ü®a', ‚ü®ha'1, ha'2‚ü©‚ü©, ‚ü®b', ‚ü®hb'1, hb'2‚ü©‚ü©‚ü©\n    dsimp at ha'1 ha'2 hb'1 hb'2\n    rw [‚Üê ha'2, ‚Üê hb'2]\n    apply hŒµs\n    rw [dist_eq_norm]\n    apply hN <;> assumption\n\n"}
{"name":"isCauSeq_iff_cauchySeq","module":"Mathlib.Topology.MetricSpace.CauSeqFilter","initialProofState":"Œ± : Type u\ninst‚úù : NormedField Œ±\nu : Nat ‚Üí Œ±\n‚ä¢ Iff (IsCauSeq Norm.norm u) (CauchySeq u)","decl":"/-- In a normed field, `CauSeq` coincides with the usual notion of Cauchy sequences. -/\ntheorem isCauSeq_iff_cauchySeq {Œ± : Type u} [NormedField Œ±] {u : ‚Ñï ‚Üí Œ±} :\n    IsCauSeq norm u ‚Üî CauchySeq u :=\n  ‚ü®fun h => CauSeq.cauchySeq ‚ü®u, h‚ü©, fun h => h.isCauSeq‚ü©\n\n-- see Note [lower instance priority]\n"}
{"name":"completeSpace_of_cauSeq_isComplete","module":"Mathlib.Topology.MetricSpace.CauSeqFilter","initialProofState":"Œ≤ : Type v\ninst‚úù¬π : NormedField Œ≤\ninst‚úù : CauSeq.IsComplete Œ≤ Norm.norm\n‚ä¢ CompleteSpace Œ≤","decl":"/-- A complete normed field is complete as a metric space, as Cauchy sequences converge by\nassumption and this suffices to characterize completeness. -/\ninstance (priority := 100) completeSpace_of_cauSeq_isComplete [CauSeq.IsComplete Œ≤ norm] :\n    CompleteSpace Œ≤ := by\n  apply complete_of_cauchySeq_tendsto\n  intro u hu\n  have C : IsCauSeq norm u := isCauSeq_iff_cauchySeq.2 hu\n  exists CauSeq.lim ‚ü®u, C‚ü©\n  rw [Metric.tendsto_atTop]\n  intro Œµ Œµpos\n  cases' (CauSeq.equiv_lim ‚ü®u, C‚ü©) _ Œµpos with N hN\n  exists N\n  simpa [dist_eq_norm] using hN\n"}
