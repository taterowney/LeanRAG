{"name":"csSup_zero","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : ConditionallyCompleteLattice M\ninst✝ : Zero M\n⊢ Eq (SupSet.sSup 0) 0","decl":"@[to_additive (attr := simp)] lemma csSup_one : sSup (1 : Set M) = 1 := csSup_singleton _\n"}
{"name":"csSup_one","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : ConditionallyCompleteLattice M\ninst✝ : One M\n⊢ Eq (SupSet.sSup 1) 1","decl":"@[to_additive (attr := simp)] lemma csSup_one : sSup (1 : Set M) = 1 := csSup_singleton _\n"}
{"name":"csInf_one","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : ConditionallyCompleteLattice M\ninst✝ : One M\n⊢ Eq (InfSet.sInf 1) 1","decl":"@[to_additive (attr := simp)] lemma csInf_one : sInf (1 : Set M) = 1 := csInf_singleton _\n\n"}
{"name":"csInf_zero","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : ConditionallyCompleteLattice M\ninst✝ : Zero M\n⊢ Eq (InfSet.sInf 0) 0","decl":"@[to_additive (attr := simp)] lemma csInf_one : sInf (1 : Set M) = 1 := csInf_singleton _\n\n"}
{"name":"csSup_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns : Set M\nhs₀ : s.Nonempty\nhs₁ : BddBelow s\n⊢ Eq (SupSet.sSup (Inv.inv s)) (Inv.inv (InfSet.sInf s))","decl":"@[to_additive]\nlemma csSup_inv (hs₀ : s.Nonempty) (hs₁ : BddBelow s) : sSup s⁻¹ = (sInf s)⁻¹ := by\n  rw [← image_inv_eq_inv]\n  exact ((OrderIso.inv _).map_csInf' hs₀ hs₁).symm\n\n"}
{"name":"csSup_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns : Set M\nhs₀ : s.Nonempty\nhs₁ : BddBelow s\n⊢ Eq (SupSet.sSup (Neg.neg s)) (Neg.neg (InfSet.sInf s))","decl":"@[to_additive]\nlemma csSup_inv (hs₀ : s.Nonempty) (hs₁ : BddBelow s) : sSup s⁻¹ = (sInf s)⁻¹ := by\n  rw [← image_inv_eq_inv]\n  exact ((OrderIso.inv _).map_csInf' hs₀ hs₁).symm\n\n"}
{"name":"csInf_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns : Set M\nhs₀ : s.Nonempty\nhs₁ : BddAbove s\n⊢ Eq (InfSet.sInf (Neg.neg s)) (Neg.neg (SupSet.sSup s))","decl":"@[to_additive]\nlemma csInf_inv (hs₀ : s.Nonempty) (hs₁ : BddAbove s) : sInf s⁻¹ = (sSup s)⁻¹ := by\n  rw [← image_inv_eq_inv]\n  exact ((OrderIso.inv _).map_csSup' hs₀ hs₁).symm\n\n"}
{"name":"csInf_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns : Set M\nhs₀ : s.Nonempty\nhs₁ : BddAbove s\n⊢ Eq (InfSet.sInf (Inv.inv s)) (Inv.inv (SupSet.sSup s))","decl":"@[to_additive]\nlemma csInf_inv (hs₀ : s.Nonempty) (hs₁ : BddAbove s) : sInf s⁻¹ = (sSup s)⁻¹ := by\n  rw [← image_inv_eq_inv]\n  exact ((OrderIso.inv _).map_csSup' hs₀ hs₁).symm\n\n"}
{"name":"csSup_add","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddAbove s\nht₀ : t.Nonempty\nht₁ : BddAbove t\n⊢ Eq (SupSet.sSup (HAdd.hAdd s t)) (HAdd.hAdd (SupSet.sSup s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma csSup_mul (hs₀ : s.Nonempty) (hs₁ : BddAbove s) (ht₀ : t.Nonempty) (ht₁ : BddAbove t) :\n    sSup (s * t) = sSup s * sSup t :=\n  csSup_image2_eq_csSup_csSup (fun _ => (OrderIso.mulRight _).to_galoisConnection)\n    (fun _ => (OrderIso.mulLeft _).to_galoisConnection) hs₀ hs₁ ht₀ ht₁\n\n"}
{"name":"csSup_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddAbove s\nht₀ : t.Nonempty\nht₁ : BddAbove t\n⊢ Eq (SupSet.sSup (HMul.hMul s t)) (HMul.hMul (SupSet.sSup s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma csSup_mul (hs₀ : s.Nonempty) (hs₁ : BddAbove s) (ht₀ : t.Nonempty) (ht₁ : BddAbove t) :\n    sSup (s * t) = sSup s * sSup t :=\n  csSup_image2_eq_csSup_csSup (fun _ => (OrderIso.mulRight _).to_galoisConnection)\n    (fun _ => (OrderIso.mulLeft _).to_galoisConnection) hs₀ hs₁ ht₀ ht₁\n\n"}
{"name":"csInf_add","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddBelow s\nht₀ : t.Nonempty\nht₁ : BddBelow t\n⊢ Eq (InfSet.sInf (HAdd.hAdd s t)) (HAdd.hAdd (InfSet.sInf s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma csInf_mul (hs₀ : s.Nonempty) (hs₁ : BddBelow s) (ht₀ : t.Nonempty) (ht₁ : BddBelow t) :\n    sInf (s * t) = sInf s * sInf t :=\n  csInf_image2_eq_csInf_csInf (fun _ => (OrderIso.mulRight _).symm.to_galoisConnection)\n    (fun _ => (OrderIso.mulLeft _).symm.to_galoisConnection) hs₀ hs₁ ht₀ ht₁\n\n"}
{"name":"csInf_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddBelow s\nht₀ : t.Nonempty\nht₁ : BddBelow t\n⊢ Eq (InfSet.sInf (HMul.hMul s t)) (HMul.hMul (InfSet.sInf s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma csInf_mul (hs₀ : s.Nonempty) (hs₁ : BddBelow s) (ht₀ : t.Nonempty) (ht₁ : BddBelow t) :\n    sInf (s * t) = sInf s * sInf t :=\n  csInf_image2_eq_csInf_csInf (fun _ => (OrderIso.mulRight _).symm.to_galoisConnection)\n    (fun _ => (OrderIso.mulLeft _).symm.to_galoisConnection) hs₀ hs₁ ht₀ ht₁\n\n"}
{"name":"csSup_div","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddAbove s\nht₀ : t.Nonempty\nht₁ : BddBelow t\n⊢ Eq (SupSet.sSup (HDiv.hDiv s t)) (HDiv.hDiv (SupSet.sSup s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma csSup_div (hs₀ : s.Nonempty) (hs₁ : BddAbove s) (ht₀ : t.Nonempty) (ht₁ : BddBelow t) :\n    sSup (s / t) = sSup s / sInf t := by\n  rw [div_eq_mul_inv, csSup_mul hs₀ hs₁ ht₀.inv ht₁.inv, csSup_inv ht₀ ht₁, div_eq_mul_inv]\n\n"}
{"name":"csSup_sub","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddAbove s\nht₀ : t.Nonempty\nht₁ : BddBelow t\n⊢ Eq (SupSet.sSup (HSub.hSub s t)) (HSub.hSub (SupSet.sSup s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma csSup_div (hs₀ : s.Nonempty) (hs₁ : BddAbove s) (ht₀ : t.Nonempty) (ht₁ : BddBelow t) :\n    sSup (s / t) = sSup s / sInf t := by\n  rw [div_eq_mul_inv, csSup_mul hs₀ hs₁ ht₀.inv ht₁.inv, csSup_inv ht₀ ht₁, div_eq_mul_inv]\n\n"}
{"name":"csInf_div","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddBelow s\nht₀ : t.Nonempty\nht₁ : BddAbove t\n⊢ Eq (InfSet.sInf (HDiv.hDiv s t)) (HDiv.hDiv (InfSet.sInf s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma csInf_div (hs₀ : s.Nonempty) (hs₁ : BddBelow s) (ht₀ : t.Nonempty) (ht₁ : BddAbove t) :\n    sInf (s / t) = sInf s / sSup t := by\n  rw [div_eq_mul_inv, csInf_mul hs₀ hs₁ ht₀.inv ht₁.inv, csInf_inv ht₀ ht₁, div_eq_mul_inv]\n\n"}
{"name":"csInf_sub","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : ConditionallyCompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs₀ : s.Nonempty\nhs₁ : BddBelow s\nht₀ : t.Nonempty\nht₁ : BddAbove t\n⊢ Eq (InfSet.sInf (HSub.hSub s t)) (HSub.hSub (InfSet.sInf s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma csInf_div (hs₀ : s.Nonempty) (hs₁ : BddBelow s) (ht₀ : t.Nonempty) (ht₁ : BddAbove t) :\n    sInf (s / t) = sInf s / sSup t := by\n  rw [div_eq_mul_inv, csInf_mul hs₀ hs₁ ht₀.inv ht₁.inv, csInf_inv ht₀ ht₁, div_eq_mul_inv]\n\n"}
{"name":"sSup_one","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : CompleteLattice M\ninst✝ : One M\n⊢ Eq (SupSet.sSup 1) 1","decl":"@[to_additive] lemma sSup_one : sSup (1 : Set M) = 1 := sSup_singleton\n"}
{"name":"sSup_zero","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : CompleteLattice M\ninst✝ : Zero M\n⊢ Eq (SupSet.sSup 0) 0","decl":"@[to_additive] lemma sSup_one : sSup (1 : Set M) = 1 := sSup_singleton\n"}
{"name":"sInf_one","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : CompleteLattice M\ninst✝ : One M\n⊢ Eq (InfSet.sInf 1) 1","decl":"@[to_additive] lemma sInf_one : sInf (1 : Set M) = 1 := sInf_singleton\n\n"}
{"name":"sInf_zero","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝¹ : CompleteLattice M\ninst✝ : Zero M\n⊢ Eq (InfSet.sInf 0) 0","decl":"@[to_additive] lemma sInf_one : sInf (1 : Set M) = 1 := sInf_singleton\n\n"}
{"name":"sSup_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns : Set M\n⊢ Eq (SupSet.sSup (Inv.inv s)) (Inv.inv (InfSet.sInf s))","decl":"@[to_additive]\nlemma sSup_inv (s : Set M) : sSup s⁻¹ = (sInf s)⁻¹ := by\n  rw [← image_inv_eq_inv, sSup_image]\n  exact ((OrderIso.inv M).map_sInf _).symm\n\n"}
{"name":"sSup_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns : Set M\n⊢ Eq (SupSet.sSup (Neg.neg s)) (Neg.neg (InfSet.sInf s))","decl":"@[to_additive]\nlemma sSup_inv (s : Set M) : sSup s⁻¹ = (sInf s)⁻¹ := by\n  rw [← image_inv_eq_inv, sSup_image]\n  exact ((OrderIso.inv M).map_sInf _).symm\n\n"}
{"name":"sInf_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns : Set M\n⊢ Eq (InfSet.sInf (Neg.neg s)) (Neg.neg (SupSet.sSup s))","decl":"@[to_additive]\nlemma sInf_inv (s : Set M) : sInf s⁻¹ = (sSup s)⁻¹ := by\n  rw [← image_inv_eq_inv, sInf_image]\n  exact ((OrderIso.inv M).map_sSup _).symm\n\n"}
{"name":"sInf_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns : Set M\n⊢ Eq (InfSet.sInf (Inv.inv s)) (Inv.inv (SupSet.sSup s))","decl":"@[to_additive]\nlemma sInf_inv (s : Set M) : sInf s⁻¹ = (sSup s)⁻¹ := by\n  rw [← image_inv_eq_inv, sInf_image]\n  exact ((OrderIso.inv M).map_sSup _).symm\n\n"}
{"name":"sSup_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\n⊢ Eq (SupSet.sSup (HMul.hMul s t)) (HMul.hMul (SupSet.sSup s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma sSup_mul : sSup (s * t) = sSup s * sSup t :=\n  (sSup_image2_eq_sSup_sSup fun _ => (OrderIso.mulRight _).to_galoisConnection) fun _ =>\n    (OrderIso.mulLeft _).to_galoisConnection\n\n"}
{"name":"sSup_add","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\n⊢ Eq (SupSet.sSup (HAdd.hAdd s t)) (HAdd.hAdd (SupSet.sSup s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma sSup_mul : sSup (s * t) = sSup s * sSup t :=\n  (sSup_image2_eq_sSup_sSup fun _ => (OrderIso.mulRight _).to_galoisConnection) fun _ =>\n    (OrderIso.mulLeft _).to_galoisConnection\n\n"}
{"name":"sInf_add","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\n⊢ Eq (InfSet.sInf (HAdd.hAdd s t)) (HAdd.hAdd (InfSet.sInf s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma sInf_mul : sInf (s * t) = sInf s * sInf t :=\n  (sInf_image2_eq_sInf_sInf fun _ => (OrderIso.mulRight _).symm.to_galoisConnection) fun _ =>\n    (OrderIso.mulLeft _).symm.to_galoisConnection\n\n"}
{"name":"sInf_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\n⊢ Eq (InfSet.sInf (HMul.hMul s t)) (HMul.hMul (InfSet.sInf s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma sInf_mul : sInf (s * t) = sInf s * sInf t :=\n  (sInf_image2_eq_sInf_sInf fun _ => (OrderIso.mulRight _).symm.to_galoisConnection) fun _ =>\n    (OrderIso.mulLeft _).symm.to_galoisConnection\n\n"}
{"name":"sSup_div","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\n⊢ Eq (SupSet.sSup (HDiv.hDiv s t)) (HDiv.hDiv (SupSet.sSup s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma sSup_div : sSup (s / t) = sSup s / sInf t := by simp_rw [div_eq_mul_inv, sSup_mul, sSup_inv]\n\n"}
{"name":"sSup_sub","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\n⊢ Eq (SupSet.sSup (HSub.hSub s t)) (HSub.hSub (SupSet.sSup s) (InfSet.sInf t))","decl":"@[to_additive]\nlemma sSup_div : sSup (s / t) = sSup s / sInf t := by simp_rw [div_eq_mul_inv, sSup_mul, sSup_inv]\n\n"}
{"name":"sInf_sub","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : AddGroup M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\n⊢ Eq (InfSet.sInf (HSub.hSub s t)) (HSub.hSub (InfSet.sInf s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma sInf_div : sInf (s / t) = sInf s / sSup t := by simp_rw [div_eq_mul_inv, sInf_mul, sInf_inv]\n\n"}
{"name":"sInf_div","module":"Mathlib.Algebra.Order.Group.Pointwise.CompleteLattice","initialProofState":"M : Type u_1\ninst✝³ : CompleteLattice M\ninst✝² : Group M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\n⊢ Eq (InfSet.sInf (HDiv.hDiv s t)) (HDiv.hDiv (InfSet.sInf s) (SupSet.sSup t))","decl":"@[to_additive]\nlemma sInf_div : sInf (s / t) = sInf s / sSup t := by simp_rw [div_eq_mul_inv, sInf_mul, sInf_inv]\n\n"}
