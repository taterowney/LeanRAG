{"name":"Asymptotics.IsBigOWith_def","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_17\nE : Type u_18\nF : Type u_19\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nl : Filter α\nf : α → E\ng : α → F\n⊢ Eq (Asymptotics.IsBigOWith c l f g) (Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l)","decl":"/-- This version of the Landau notation `IsBigOWith C l f g` where `f` and `g` are two functions on\na type `α` and `l` is a filter on `α`, means that eventually for `l`, `‖f‖` is bounded by `C * ‖g‖`.\nIn other words, `‖f‖ / ‖g‖` is eventually bounded by `C`, modulo division by zero issues that are\navoided by this definition. Probably you want to use `IsBigO` instead of this relation. -/\nirreducible_def IsBigOWith (c : ℝ) (l : Filter α) (f : α → E) (g : α → F) : Prop :=\n  ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖\n\n"}
{"name":"Asymptotics.isBigOWith_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l f g) (Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l)","decl":"/-- Definition of `IsBigOWith`. We record it in a lemma as `IsBigOWith` is irreducible. -/\ntheorem isBigOWith_iff : IsBigOWith c l f g ↔ ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖ := by rw [IsBigOWith_def]\n\n"}
{"name":"Asymptotics.IsBigOWith.bound","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f g\n⊢ Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l","decl":"alias ⟨IsBigOWith.bound, IsBigOWith.of_bound⟩ := isBigOWith_iff\n\n"}
{"name":"Asymptotics.IsBigOWith.of_bound","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\na✝ : Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l\n⊢ Asymptotics.IsBigOWith c l f g","decl":"alias ⟨IsBigOWith.bound, IsBigOWith.of_bound⟩ := isBigOWith_iff\n\n"}
{"name":"Asymptotics.IsBigO_def","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_17\nE : Type u_18\nF : Type u_19\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf : α → E\ng : α → F\n⊢ Eq (Asymptotics.IsBigO l f g) (Exists fun c => Asymptotics.IsBigOWith c l f g)","decl":"/-- The Landau notation `f =O[l] g` where `f` and `g` are two functions on a type `α` and `l` is\na filter on `α`, means that eventually for `l`, `‖f‖` is bounded by a constant multiple of `‖g‖`.\nIn other words, `‖f‖ / ‖g‖` is eventually bounded, modulo division by zero issues that are avoided\nby this definition. -/\nirreducible_def IsBigO (l : Filter α) (f : α → E) (g : α → F) : Prop :=\n  ∃ c : ℝ, IsBigOWith c l f g\n\n"}
{"name":"Asymptotics.isBigO_iff_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f g) (Exists fun c => Asymptotics.IsBigOWith c l f g)","decl":"/-- Definition of `IsBigO` in terms of `IsBigOWith`. We record it in a lemma as `IsBigO` is\nirreducible. -/\ntheorem isBigO_iff_isBigOWith : f =O[l] g ↔ ∃ c : ℝ, IsBigOWith c l f g := by rw [IsBigO_def]\n\n"}
{"name":"Asymptotics.isBigO_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f g) (Exists fun c => Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l)","decl":"/-- Definition of `IsBigO` in terms of filters. -/\ntheorem isBigO_iff : f =O[l] g ↔ ∃ c : ℝ, ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖ := by\n  simp only [IsBigO_def, IsBigOWith_def]\n\n"}
{"name":"Asymptotics.isBigO_iff'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nE''' : Type u_12\ninst✝¹ : Norm E\ninst✝ : SeminormedAddGroup E'''\nf : α → E\nl : Filter α\ng : α → E'''\n⊢ Iff (Asymptotics.IsBigO l f g) (Exists fun c => And (GT.gt c 0) (Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l))","decl":"/-- Definition of `IsBigO` in terms of filters, with a positive constant. -/\ntheorem isBigO_iff' {g : α → E'''} :\n    f =O[l] g ↔ ∃ c > 0, ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖ := by\n  refine ⟨fun h => ?mp, fun h => ?mpr⟩\n  case mp =>\n    rw [isBigO_iff] at h\n    obtain ⟨c, hc⟩ := h\n    refine ⟨max c 1, zero_lt_one.trans_le (le_max_right _ _), ?_⟩\n    filter_upwards [hc] with x hx\n    apply hx.trans\n    gcongr\n    exact le_max_left _ _\n  case mpr =>\n    rw [isBigO_iff]\n    obtain ⟨c, ⟨_, hc⟩⟩ := h\n    exact ⟨c, hc⟩\n\n"}
{"name":"Asymptotics.isBigO_iff''","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nE''' : Type u_12\ninst✝¹ : Norm E\ninst✝ : SeminormedAddGroup E'''\nf : α → E\nl : Filter α\ng : α → E'''\n⊢ Iff (Asymptotics.IsBigO l f g) (Exists fun c => And (GT.gt c 0) (Filter.Eventually (fun x => LE.le (HMul.hMul c (Norm.norm (f x))) (Norm.norm (g x))) l))","decl":"/-- Definition of `IsBigO` in terms of filters, with the constant in the lower bound. -/\ntheorem isBigO_iff'' {g : α → E'''} :\n    f =O[l] g ↔ ∃ c > 0, ∀ᶠ x in l, c * ‖f x‖ ≤ ‖g x‖ := by\n  refine ⟨fun h => ?mp, fun h => ?mpr⟩\n  case mp =>\n    rw [isBigO_iff'] at h\n    obtain ⟨c, ⟨hc_pos, hc⟩⟩ := h\n    refine ⟨c⁻¹, ⟨by positivity, ?_⟩⟩\n    filter_upwards [hc] with x hx\n    rwa [inv_mul_le_iff₀ (by positivity)]\n  case mpr =>\n    rw [isBigO_iff']\n    obtain ⟨c, ⟨hc_pos, hc⟩⟩ := h\n    refine ⟨c⁻¹, ⟨by positivity, ?_⟩⟩\n    filter_upwards [hc] with x hx\n    rwa [← inv_inv c, inv_mul_le_iff₀ (by positivity)] at hx\n\n"}
{"name":"Asymptotics.IsBigO.of_bound","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nc : Real\nh : Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsBigO.of_bound (c : ℝ) (h : ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖) : f =O[l] g :=\n  isBigO_iff.2 ⟨c, h⟩\n\n"}
{"name":"Asymptotics.IsBigO.of_bound'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nh : Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (Norm.norm (g x))) l\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsBigO.of_bound' (h : ∀ᶠ x in l, ‖f x‖ ≤ ‖g x‖) : f =O[l] g :=\n  .of_bound 1 <| by simpa only [one_mul] using h\n\n"}
{"name":"Asymptotics.IsBigO.bound","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\na✝ : Asymptotics.IsBigO l f g\n⊢ Exists fun c => Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l","decl":"theorem IsBigO.bound : f =O[l] g → ∃ c : ℝ, ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖ :=\n  isBigO_iff.1\n\n"}
{"name":"Asymptotics.IsBigO.of_norm_eventuallyLE","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\ng : α → Real\nh : l.EventuallyLE (fun x => Norm.norm (f x)) g\n⊢ Asymptotics.IsBigO l f g","decl":"/-- See also `Filter.Eventually.isBigO`, which is the same lemma\nstated using `Filter.Eventually` instead of `Filter.EventuallyLE`. -/\ntheorem IsBigO.of_norm_eventuallyLE {g : α → ℝ} (h : (‖f ·‖) ≤ᶠ[l] g) : f =O[l] g :=\n  .of_bound' <| h.mono fun _ h ↦ h.trans <| le_abs_self _\n\n"}
{"name":"Asymptotics.IsBigO.of_norm_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\ng : α → Real\nh : ∀ (x : α), LE.le (Norm.norm (f x)) (g x)\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsBigO.of_norm_le {g : α → ℝ} (h : ∀ x, ‖f x‖ ≤ g x) : f =O[l] g :=\n  .of_norm_eventuallyLE <| .of_forall h\n\n"}
{"name":"Asymptotics.IsLittleO_def","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_17\nE : Type u_18\nF : Type u_19\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf : α → E\ng : α → F\n⊢ Eq (Asymptotics.IsLittleO l f g) (∀ ⦃c : Real⦄, LT.lt 0 c → Asymptotics.IsBigOWith c l f g)","decl":"/-- The Landau notation `f =o[l] g` where `f` and `g` are two functions on a type `α` and `l` is\na filter on `α`, means that eventually for `l`, `‖f‖` is bounded by an arbitrarily small constant\nmultiple of `‖g‖`. In other words, `‖f‖ / ‖g‖` tends to `0` along `l`, modulo division by zero\nissues that are avoided by this definition. -/\nirreducible_def IsLittleO (l : Filter α) (f : α → E) (g : α → F) : Prop :=\n  ∀ ⦃c : ℝ⦄, 0 < c → IsBigOWith c l f g\n\n"}
{"name":"Asymptotics.isLittleO_iff_forall_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f g) (∀ ⦃c : Real⦄, LT.lt 0 c → Asymptotics.IsBigOWith c l f g)","decl":"/-- Definition of `IsLittleO` in terms of `IsBigOWith`. -/\ntheorem isLittleO_iff_forall_isBigOWith : f =o[l] g ↔ ∀ ⦃c : ℝ⦄, 0 < c → IsBigOWith c l f g := by\n  rw [IsLittleO_def]\n\n"}
{"name":"Asymptotics.IsLittleO.of_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\na✝ : ∀ ⦃c : Real⦄, LT.lt 0 c → Asymptotics.IsBigOWith c l f g\n⊢ Asymptotics.IsLittleO l f g","decl":"alias ⟨IsLittleO.forall_isBigOWith, IsLittleO.of_isBigOWith⟩ := isLittleO_iff_forall_isBigOWith\n\n"}
{"name":"Asymptotics.IsLittleO.forall_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\na✝¹ : Asymptotics.IsLittleO l f g\nc : Real\na✝ : LT.lt 0 c\n⊢ Asymptotics.IsBigOWith c l f g","decl":"alias ⟨IsLittleO.forall_isBigOWith, IsLittleO.of_isBigOWith⟩ := isLittleO_iff_forall_isBigOWith\n\n"}
{"name":"Asymptotics.isLittleO_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f g) (∀ ⦃c : Real⦄, LT.lt 0 c → Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l)","decl":"/-- Definition of `IsLittleO` in terms of filters. -/\ntheorem isLittleO_iff : f =o[l] g ↔ ∀ ⦃c : ℝ⦄, 0 < c → ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖ := by\n  simp only [IsLittleO_def, IsBigOWith_def]\n\n"}
{"name":"Asymptotics.IsLittleO.of_bound","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\na✝ : ∀ ⦃c : Real⦄, LT.lt 0 c → Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l\n⊢ Asymptotics.IsLittleO l f g","decl":"alias ⟨IsLittleO.bound, IsLittleO.of_bound⟩ := isLittleO_iff\n\n"}
{"name":"Asymptotics.IsLittleO.bound","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\na✝¹ : Asymptotics.IsLittleO l f g\nc : Real\na✝ : LT.lt 0 c\n⊢ Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l","decl":"alias ⟨IsLittleO.bound, IsLittleO.of_bound⟩ := isLittleO_iff\n\n"}
{"name":"Asymptotics.IsLittleO.def","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nh : Asymptotics.IsLittleO l f g\nhc : LT.lt 0 c\n⊢ Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))) l","decl":"theorem IsLittleO.def (h : f =o[l] g) (hc : 0 < c) : ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖ :=\n  isLittleO_iff.1 h hc\n\n"}
{"name":"Asymptotics.IsLittleO.def'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nh : Asymptotics.IsLittleO l f g\nhc : LT.lt 0 c\n⊢ Asymptotics.IsBigOWith c l f g","decl":"theorem IsLittleO.def' (h : f =o[l] g) (hc : 0 < c) : IsBigOWith c l f g :=\n  isBigOWith_iff.2 <| isLittleO_iff.1 h hc\n\n"}
{"name":"Asymptotics.IsLittleO.eventuallyLE","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nh : Asymptotics.IsLittleO l f g\n⊢ Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (Norm.norm (g x))) l","decl":"theorem IsLittleO.eventuallyLE (h : f =o[l] g) : ∀ᶠ x in l, ‖f x‖ ≤ ‖g x‖ := by\n  simpa using h.def zero_lt_one\n\n"}
{"name":"Asymptotics.IsBigOWith.isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nh : Asymptotics.IsBigOWith c l f g\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsBigOWith.isBigO (h : IsBigOWith c l f g) : f =O[l] g := by rw [IsBigO_def]; exact ⟨c, h⟩\n\n"}
{"name":"Asymptotics.IsLittleO.isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nhgf : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsBigOWith 1 l f g","decl":"theorem IsLittleO.isBigOWith (hgf : f =o[l] g) : IsBigOWith 1 l f g :=\n  hgf.def' zero_lt_one\n\n"}
{"name":"Asymptotics.IsLittleO.isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nhgf : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsLittleO.isBigO (hgf : f =o[l] g) : f =O[l] g :=\n  hgf.isBigOWith.isBigO\n\n"}
{"name":"Asymptotics.IsBigO.isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\na✝ : Asymptotics.IsBigO l f g\n⊢ Exists fun c => Asymptotics.IsBigOWith c l f g","decl":"theorem IsBigO.isBigOWith : f =O[l] g → ∃ c : ℝ, IsBigOWith c l f g :=\n  isBigO_iff_isBigOWith.1\n\n"}
{"name":"Asymptotics.IsBigOWith.weaken","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc c' : Real\nf : α → E\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigOWith c l f g'\nhc : LE.le c c'\n⊢ Asymptotics.IsBigOWith c' l f g'","decl":"theorem IsBigOWith.weaken (h : IsBigOWith c l f g') (hc : c ≤ c') : IsBigOWith c' l f g' :=\n  IsBigOWith.of_bound <|\n    mem_of_superset h.bound fun x hx =>\n      calc\n        ‖f x‖ ≤ c * ‖g' x‖ := hx\n        _ ≤ _ := by gcongr\n\n"}
{"name":"Asymptotics.IsBigOWith.exists_pos","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigOWith c l f g'\n⊢ Exists fun c' => And (GT.gt c' 0) (Asymptotics.IsBigOWith c' l f g')","decl":"theorem IsBigOWith.exists_pos (h : IsBigOWith c l f g') :\n    ∃ c' > 0, IsBigOWith c' l f g' :=\n  ⟨max c 1, lt_of_lt_of_le zero_lt_one (le_max_right c 1), h.weaken <| le_max_left c 1⟩\n\n"}
{"name":"Asymptotics.IsBigO.exists_pos","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigO l f g'\n⊢ Exists fun c => And (GT.gt c 0) (Asymptotics.IsBigOWith c l f g')","decl":"theorem IsBigO.exists_pos (h : f =O[l] g') : ∃ c > 0, IsBigOWith c l f g' :=\n  let ⟨_c, hc⟩ := h.isBigOWith\n  hc.exists_pos\n\n"}
{"name":"Asymptotics.IsBigOWith.exists_nonneg","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigOWith c l f g'\n⊢ Exists fun c' => And (GE.ge c' 0) (Asymptotics.IsBigOWith c' l f g')","decl":"theorem IsBigOWith.exists_nonneg (h : IsBigOWith c l f g') :\n    ∃ c' ≥ 0, IsBigOWith c' l f g' :=\n  let ⟨c, cpos, hc⟩ := h.exists_pos\n  ⟨c, le_of_lt cpos, hc⟩\n\n"}
{"name":"Asymptotics.IsBigO.exists_nonneg","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigO l f g'\n⊢ Exists fun c => And (GE.ge c 0) (Asymptotics.IsBigOWith c l f g')","decl":"theorem IsBigO.exists_nonneg (h : f =O[l] g') : ∃ c ≥ 0, IsBigOWith c l f g' :=\n  let ⟨_c, hc⟩ := h.isBigOWith\n  hc.exists_nonneg\n\n"}
{"name":"Asymptotics.isBigO_iff_eventually_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f g') (Filter.Eventually (fun c => Asymptotics.IsBigOWith c l f g') Filter.atTop)","decl":"/-- `f = O(g)` if and only if `IsBigOWith c f g` for all sufficiently large `c`. -/\ntheorem isBigO_iff_eventually_isBigOWith : f =O[l] g' ↔ ∀ᶠ c in atTop, IsBigOWith c l f g' :=\n  isBigO_iff_isBigOWith.trans\n    ⟨fun ⟨c, hc⟩ => mem_atTop_sets.2 ⟨c, fun _c' hc' => hc.weaken hc'⟩, fun h => h.exists⟩\n\n"}
{"name":"Asymptotics.isBigO_iff_eventually","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f g') (Filter.Eventually (fun c => Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g' x)))) l) Filter.atTop)","decl":"/-- `f = O(g)` if and only if `∀ᶠ x in l, ‖f x‖ ≤ c * ‖g x‖` for all sufficiently large `c`. -/\ntheorem isBigO_iff_eventually : f =O[l] g' ↔ ∀ᶠ c in atTop, ∀ᶠ x in l, ‖f x‖ ≤ c * ‖g' x‖ :=\n  isBigO_iff_eventually_isBigOWith.trans <| by simp only [IsBigOWith_def]\n\n"}
{"name":"Asymptotics.IsBigO.exists_mem_basis","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\nι : Sort u_17\np : ι → Prop\ns : ι → Set α\nh : Asymptotics.IsBigO l f g'\nhb : l.HasBasis p s\n⊢ Exists fun c => And (GT.gt c 0) (Exists fun i => And (p i) (∀ (x : α), Membership.mem (s i) x → LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g' x)))))","decl":"theorem IsBigO.exists_mem_basis {ι} {p : ι → Prop} {s : ι → Set α} (h : f =O[l] g')\n    (hb : l.HasBasis p s) :\n    ∃ c > 0, ∃ i : ι, p i ∧ ∀ x ∈ s i, ‖f x‖ ≤ c * ‖g' x‖ :=\n  flip Exists.imp h.exists_pos fun c h => by\n    simpa only [isBigOWith_iff, hb.eventually_iff, exists_prop] using h\n\n"}
{"name":"Asymptotics.isBigOWith_inv","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nhc : LT.lt 0 c\n⊢ Iff (Asymptotics.IsBigOWith (Inv.inv c) l f g) (Filter.Eventually (fun x => LE.le (HMul.hMul c (Norm.norm (f x))) (Norm.norm (g x))) l)","decl":"theorem isBigOWith_inv (hc : 0 < c) : IsBigOWith c⁻¹ l f g ↔ ∀ᶠ x in l, c * ‖f x‖ ≤ ‖g x‖ := by\n  simp only [IsBigOWith_def, ← div_eq_inv_mul, le_div_iff₀' hc]\n\n-- We prove this lemma with strange assumptions to get two lemmas below automatically\n"}
{"name":"Asymptotics.isLittleO_iff_nat_mul_le_aux","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nh₀ : Or (∀ (x : α), LE.le 0 (Norm.norm (f x))) (∀ (x : α), LE.le 0 (Norm.norm (g x)))\n⊢ Iff (Asymptotics.IsLittleO l f g) (∀ (n : Nat), Filter.Eventually (fun x => LE.le (HMul.hMul (↑n) (Norm.norm (f x))) (Norm.norm (g x))) l)","decl":"theorem isLittleO_iff_nat_mul_le_aux (h₀ : (∀ x, 0 ≤ ‖f x‖) ∨ ∀ x, 0 ≤ ‖g x‖) :\n    f =o[l] g ↔ ∀ n : ℕ, ∀ᶠ x in l, ↑n * ‖f x‖ ≤ ‖g x‖ := by\n  constructor\n  · rintro H (_ | n)\n    · refine (H.def one_pos).mono fun x h₀' => ?_\n      rw [Nat.cast_zero, zero_mul]\n      refine h₀.elim (fun hf => (hf x).trans ?_) fun hg => hg x\n      rwa [one_mul] at h₀'\n    · have : (0 : ℝ) < n.succ := Nat.cast_pos.2 n.succ_pos\n      exact (isBigOWith_inv this).1 (H.def' <| inv_pos.2 this)\n  · refine fun H => isLittleO_iff.2 fun ε ε0 => ?_\n    rcases exists_nat_gt ε⁻¹ with ⟨n, hn⟩\n    have hn₀ : (0 : ℝ) < n := (inv_pos.2 ε0).trans hn\n    refine ((isBigOWith_inv hn₀).2 (H n)).bound.mono fun x hfg => ?_\n    refine hfg.trans (mul_le_mul_of_nonneg_right (inv_le_of_inv_le₀ ε0 hn.le) ?_)\n    refine h₀.elim (fun hf => nonneg_of_mul_nonneg_right ((hf x).trans hfg) ?_) fun h => h x\n    exact inv_pos.2 hn₀\n\n"}
{"name":"Asymptotics.isLittleO_iff_nat_mul_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f g') (∀ (n : Nat), Filter.Eventually (fun x => LE.le (HMul.hMul (↑n) (Norm.norm (f x))) (Norm.norm (g' x))) l)","decl":"theorem isLittleO_iff_nat_mul_le : f =o[l] g' ↔ ∀ n : ℕ, ∀ᶠ x in l, ↑n * ‖f x‖ ≤ ‖g' x‖ :=\n  isLittleO_iff_nat_mul_le_aux (Or.inr fun _x => norm_nonneg _)\n\n"}
{"name":"Asymptotics.isLittleO_iff_nat_mul_le'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f' g) (∀ (n : Nat), Filter.Eventually (fun x => LE.le (HMul.hMul (↑n) (Norm.norm (f' x))) (Norm.norm (g x))) l)","decl":"theorem isLittleO_iff_nat_mul_le' : f' =o[l] g ↔ ∀ n : ℕ, ∀ᶠ x in l, ↑n * ‖f' x‖ ≤ ‖g x‖ :=\n  isLittleO_iff_nat_mul_le_aux (Or.inl fun _x => norm_nonneg _)\n\n"}
{"name":"Asymptotics.isLittleO_of_subsingleton","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\ninst✝ : Subsingleton E'\n⊢ Asymptotics.IsLittleO l f' g'","decl":"@[nontriviality]\ntheorem isLittleO_of_subsingleton [Subsingleton E'] : f' =o[l] g' :=\n  IsLittleO.of_bound fun c hc => by simp [Subsingleton.elim (f' _) 0, mul_nonneg hc.le]\n\n"}
{"name":"Asymptotics.isBigO_of_subsingleton","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\ninst✝ : Subsingleton E'\n⊢ Asymptotics.IsBigO l f' g'","decl":"@[nontriviality]\ntheorem isBigO_of_subsingleton [Subsingleton E'] : f' =O[l] g' :=\n  isLittleO_of_subsingleton.isBigO\n\n"}
{"name":"Asymptotics.isBigOWith_congr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc₁ c₂ : Real\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nhc : Eq c₁ c₂\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Iff (Asymptotics.IsBigOWith c₁ l f₁ g₁) (Asymptotics.IsBigOWith c₂ l f₂ g₂)","decl":"theorem isBigOWith_congr (hc : c₁ = c₂) (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) :\n    IsBigOWith c₁ l f₁ g₁ ↔ IsBigOWith c₂ l f₂ g₂ := by\n  simp only [IsBigOWith_def]\n  subst c₂\n  apply Filter.eventually_congr\n  filter_upwards [hf, hg] with _ e₁ e₂\n  rw [e₁, e₂]\n\n"}
{"name":"Asymptotics.IsBigOWith.congr'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc₁ c₂ : Real\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsBigOWith c₁ l f₁ g₁\nhc : Eq c₁ c₂\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Asymptotics.IsBigOWith c₂ l f₂ g₂","decl":"theorem IsBigOWith.congr' (h : IsBigOWith c₁ l f₁ g₁) (hc : c₁ = c₂) (hf : f₁ =ᶠ[l] f₂)\n    (hg : g₁ =ᶠ[l] g₂) : IsBigOWith c₂ l f₂ g₂ :=\n  (isBigOWith_congr hc hf hg).mp h\n\n"}
{"name":"Asymptotics.IsBigOWith.congr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc₁ c₂ : Real\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsBigOWith c₁ l f₁ g₁\nhc : Eq c₁ c₂\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsBigOWith c₂ l f₂ g₂","decl":"theorem IsBigOWith.congr (h : IsBigOWith c₁ l f₁ g₁) (hc : c₁ = c₂) (hf : ∀ x, f₁ x = f₂ x)\n    (hg : ∀ x, g₁ x = g₂ x) : IsBigOWith c₂ l f₂ g₂ :=\n  h.congr' hc (univ_mem' hf) (univ_mem' hg)\n\n"}
{"name":"Asymptotics.IsBigOWith.congr_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E\nh : Asymptotics.IsBigOWith c l f₁ g\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\n⊢ Asymptotics.IsBigOWith c l f₂ g","decl":"theorem IsBigOWith.congr_left (h : IsBigOWith c l f₁ g) (hf : ∀ x, f₁ x = f₂ x) :\n    IsBigOWith c l f₂ g :=\n  h.congr rfl hf fun _ => rfl\n\n"}
{"name":"Asymptotics.IsBigOWith.congr_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\nl : Filter α\ng₁ g₂ : α → F\nh : Asymptotics.IsBigOWith c l f g₁\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsBigOWith c l f g₂","decl":"theorem IsBigOWith.congr_right (h : IsBigOWith c l f g₁) (hg : ∀ x, g₁ x = g₂ x) :\n    IsBigOWith c l f g₂ :=\n  h.congr rfl (fun _ => rfl) hg\n\n"}
{"name":"Asymptotics.IsBigOWith.congr_const","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc₁ c₂ : Real\nf : α → E\ng : α → F\nl : Filter α\nh : Asymptotics.IsBigOWith c₁ l f g\nhc : Eq c₁ c₂\n⊢ Asymptotics.IsBigOWith c₂ l f g","decl":"theorem IsBigOWith.congr_const (h : IsBigOWith c₁ l f g) (hc : c₁ = c₂) : IsBigOWith c₂ l f g :=\n  h.congr hc (fun _ => rfl) fun _ => rfl\n\n"}
{"name":"Asymptotics.isBigO_congr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Iff (Asymptotics.IsBigO l f₁ g₁) (Asymptotics.IsBigO l f₂ g₂)","decl":"theorem isBigO_congr (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) : f₁ =O[l] g₁ ↔ f₂ =O[l] g₂ := by\n  simp only [IsBigO_def]\n  exact exists_congr fun c => isBigOWith_congr rfl hf hg\n\n"}
{"name":"Asymptotics.IsBigO.congr'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsBigO l f₁ g₁\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Asymptotics.IsBigO l f₂ g₂","decl":"theorem IsBigO.congr' (h : f₁ =O[l] g₁) (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) : f₂ =O[l] g₂ :=\n  (isBigO_congr hf hg).mp h\n\n"}
{"name":"Asymptotics.IsBigO.congr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsBigO l f₁ g₁\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsBigO l f₂ g₂","decl":"theorem IsBigO.congr (h : f₁ =O[l] g₁) (hf : ∀ x, f₁ x = f₂ x) (hg : ∀ x, g₁ x = g₂ x) :\n    f₂ =O[l] g₂ :=\n  h.congr' (univ_mem' hf) (univ_mem' hg)\n\n"}
{"name":"Asymptotics.IsBigO.congr_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\ng : α → F\nl : Filter α\nf₁ f₂ : α → E\nh : Asymptotics.IsBigO l f₁ g\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\n⊢ Asymptotics.IsBigO l f₂ g","decl":"theorem IsBigO.congr_left (h : f₁ =O[l] g) (hf : ∀ x, f₁ x = f₂ x) : f₂ =O[l] g :=\n  h.congr hf fun _ => rfl\n\n"}
{"name":"Asymptotics.IsBigO.congr_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\nl : Filter α\ng₁ g₂ : α → F\nh : Asymptotics.IsBigO l f g₁\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsBigO l f g₂","decl":"theorem IsBigO.congr_right (h : f =O[l] g₁) (hg : ∀ x, g₁ x = g₂ x) : f =O[l] g₂ :=\n  h.congr (fun _ => rfl) hg\n\n"}
{"name":"Asymptotics.isLittleO_congr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Iff (Asymptotics.IsLittleO l f₁ g₁) (Asymptotics.IsLittleO l f₂ g₂)","decl":"theorem isLittleO_congr (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) : f₁ =o[l] g₁ ↔ f₂ =o[l] g₂ := by\n  simp only [IsLittleO_def]\n  exact forall₂_congr fun c _hc => isBigOWith_congr (Eq.refl c) hf hg\n\n"}
{"name":"Asymptotics.IsLittleO.congr'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsLittleO l f₁ g₁\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Asymptotics.IsLittleO l f₂ g₂","decl":"theorem IsLittleO.congr' (h : f₁ =o[l] g₁) (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) : f₂ =o[l] g₂ :=\n  (isLittleO_congr hf hg).mp h\n\n"}
{"name":"Asymptotics.IsLittleO.congr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsLittleO l f₁ g₁\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsLittleO l f₂ g₂","decl":"theorem IsLittleO.congr (h : f₁ =o[l] g₁) (hf : ∀ x, f₁ x = f₂ x) (hg : ∀ x, g₁ x = g₂ x) :\n    f₂ =o[l] g₂ :=\n  h.congr' (univ_mem' hf) (univ_mem' hg)\n\n"}
{"name":"Asymptotics.IsLittleO.congr_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\ng : α → F\nl : Filter α\nf₁ f₂ : α → E\nh : Asymptotics.IsLittleO l f₁ g\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\n⊢ Asymptotics.IsLittleO l f₂ g","decl":"theorem IsLittleO.congr_left (h : f₁ =o[l] g) (hf : ∀ x, f₁ x = f₂ x) : f₂ =o[l] g :=\n  h.congr hf fun _ => rfl\n\n"}
{"name":"Asymptotics.IsLittleO.congr_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\nl : Filter α\ng₁ g₂ : α → F\nh : Asymptotics.IsLittleO l f g₁\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsLittleO l f g₂","decl":"theorem IsLittleO.congr_right (h : f =o[l] g₁) (hg : ∀ x, g₁ x = g₂ x) : f =o[l] g₂ :=\n  h.congr (fun _ => rfl) hg\n\n"}
{"name":"Filter.EventuallyEq.trans_isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng : α → F\nhf : l.EventuallyEq f₁ f₂\nh : Asymptotics.IsBigO l f₂ g\n⊢ Asymptotics.IsBigO l f₁ g","decl":"@[trans]\ntheorem _root_.Filter.EventuallyEq.trans_isBigO {f₁ f₂ : α → E} {g : α → F} (hf : f₁ =ᶠ[l] f₂)\n    (h : f₂ =O[l] g) : f₁ =O[l] g :=\n  h.congr' hf.symm EventuallyEq.rfl\n\n"}
{"name":"Filter.EventuallyEq.trans_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf₁ f₂ : α → E\ng : α → F\nhf : l.EventuallyEq f₁ f₂\nh : Asymptotics.IsLittleO l f₂ g\n⊢ Asymptotics.IsLittleO l f₁ g","decl":"@[trans]\ntheorem _root_.Filter.EventuallyEq.trans_isLittleO {f₁ f₂ : α → E} {g : α → F} (hf : f₁ =ᶠ[l] f₂)\n    (h : f₂ =o[l] g) : f₁ =o[l] g :=\n  h.congr' hf.symm EventuallyEq.rfl\n\n"}
{"name":"Asymptotics.IsBigO.trans_eventuallyEq","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsBigO l f g₁\nhg : l.EventuallyEq g₁ g₂\n⊢ Asymptotics.IsBigO l f g₂","decl":"@[trans]\ntheorem IsBigO.trans_eventuallyEq {f : α → E} {g₁ g₂ : α → F} (h : f =O[l] g₁) (hg : g₁ =ᶠ[l] g₂) :\n    f =O[l] g₂ :=\n  h.congr' EventuallyEq.rfl hg\n\n"}
{"name":"Asymptotics.IsLittleO.trans_eventuallyEq","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf : α → E\ng₁ g₂ : α → F\nh : Asymptotics.IsLittleO l f g₁\nhg : l.EventuallyEq g₁ g₂\n⊢ Asymptotics.IsLittleO l f g₂","decl":"@[trans]\ntheorem IsLittleO.trans_eventuallyEq {f : α → E} {g₁ g₂ : α → F} (h : f =o[l] g₁)\n    (hg : g₁ =ᶠ[l] g₂) : f =o[l] g₂ :=\n  h.congr' EventuallyEq.rfl hg\n\n"}
{"name":"Asymptotics.IsBigOWith.comp_tendsto","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nhcfg : Asymptotics.IsBigOWith c l f g\nk : β → α\nl' : Filter β\nhk : Filter.Tendsto k l' l\n⊢ Asymptotics.IsBigOWith c l' (Function.comp f k) (Function.comp g k)","decl":"theorem IsBigOWith.comp_tendsto (hcfg : IsBigOWith c l f g) {k : β → α} {l' : Filter β}\n    (hk : Tendsto k l' l) : IsBigOWith c l' (f ∘ k) (g ∘ k) :=\n  IsBigOWith.of_bound <| hk hcfg.bound\n\n"}
{"name":"Asymptotics.IsBigO.comp_tendsto","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nhfg : Asymptotics.IsBigO l f g\nk : β → α\nl' : Filter β\nhk : Filter.Tendsto k l' l\n⊢ Asymptotics.IsBigO l' (Function.comp f k) (Function.comp g k)","decl":"theorem IsBigO.comp_tendsto (hfg : f =O[l] g) {k : β → α} {l' : Filter β} (hk : Tendsto k l' l) :\n    (f ∘ k) =O[l'] (g ∘ k) :=\n  isBigO_iff_isBigOWith.2 <| hfg.isBigOWith.imp fun _c h => h.comp_tendsto hk\n\n"}
{"name":"Asymptotics.IsLittleO.comp_tendsto","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nhfg : Asymptotics.IsLittleO l f g\nk : β → α\nl' : Filter β\nhk : Filter.Tendsto k l' l\n⊢ Asymptotics.IsLittleO l' (Function.comp f k) (Function.comp g k)","decl":"theorem IsLittleO.comp_tendsto (hfg : f =o[l] g) {k : β → α} {l' : Filter β} (hk : Tendsto k l' l) :\n    (f ∘ k) =o[l'] (g ∘ k) :=\n  IsLittleO.of_isBigOWith fun _c cpos => (hfg.forall_isBigOWith cpos).comp_tendsto hk\n\n"}
{"name":"Asymptotics.isBigOWith_map","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nk : β → α\nl : Filter β\n⊢ Iff (Asymptotics.IsBigOWith c (Filter.map k l) f g) (Asymptotics.IsBigOWith c l (Function.comp f k) (Function.comp g k))","decl":"@[simp]\ntheorem isBigOWith_map {k : β → α} {l : Filter β} :\n    IsBigOWith c (map k l) f g ↔ IsBigOWith c l (f ∘ k) (g ∘ k) := by\n  simp only [IsBigOWith_def]\n  exact eventually_map\n\n"}
{"name":"Asymptotics.isBigO_map","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nk : β → α\nl : Filter β\n⊢ Iff (Asymptotics.IsBigO (Filter.map k l) f g) (Asymptotics.IsBigO l (Function.comp f k) (Function.comp g k))","decl":"@[simp]\ntheorem isBigO_map {k : β → α} {l : Filter β} : f =O[map k l] g ↔ (f ∘ k) =O[l] (g ∘ k) := by\n  simp only [IsBigO_def, isBigOWith_map]\n\n"}
{"name":"Asymptotics.isLittleO_map","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nk : β → α\nl : Filter β\n⊢ Iff (Asymptotics.IsLittleO (Filter.map k l) f g) (Asymptotics.IsLittleO l (Function.comp f k) (Function.comp g k))","decl":"@[simp]\ntheorem isLittleO_map {k : β → α} {l : Filter β} : f =o[map k l] g ↔ (f ∘ k) =o[l] (g ∘ k) := by\n  simp only [IsLittleO_def, isBigOWith_map]\n\n"}
{"name":"Asymptotics.IsBigOWith.mono","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl l' : Filter α\nh : Asymptotics.IsBigOWith c l' f g\nhl : LE.le l l'\n⊢ Asymptotics.IsBigOWith c l f g","decl":"theorem IsBigOWith.mono (h : IsBigOWith c l' f g) (hl : l ≤ l') : IsBigOWith c l f g :=\n  IsBigOWith.of_bound <| hl h.bound\n\n"}
{"name":"Asymptotics.IsBigO.mono","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl l' : Filter α\nh : Asymptotics.IsBigO l' f g\nhl : LE.le l l'\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsBigO.mono (h : f =O[l'] g) (hl : l ≤ l') : f =O[l] g :=\n  isBigO_iff_isBigOWith.2 <| h.isBigOWith.imp fun _c h => h.mono hl\n\n"}
{"name":"Asymptotics.IsLittleO.mono","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl l' : Filter α\nh : Asymptotics.IsLittleO l' f g\nhl : LE.le l l'\n⊢ Asymptotics.IsLittleO l f g","decl":"theorem IsLittleO.mono (h : f =o[l'] g) (hl : l ≤ l') : f =o[l] g :=\n  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).mono hl\n\n"}
{"name":"Asymptotics.IsBigOWith.trans","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG : Type u_5\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : Norm G\nc c' : Real\nf : α → E\ng : α → F\nk : α → G\nl : Filter α\nhfg : Asymptotics.IsBigOWith c l f g\nhgk : Asymptotics.IsBigOWith c' l g k\nhc : LE.le 0 c\n⊢ Asymptotics.IsBigOWith (HMul.hMul c c') l f k","decl":"theorem IsBigOWith.trans (hfg : IsBigOWith c l f g) (hgk : IsBigOWith c' l g k) (hc : 0 ≤ c) :\n    IsBigOWith (c * c') l f k := by\n  simp only [IsBigOWith_def] at *\n  filter_upwards [hfg, hgk] with x hx hx'\n  calc\n    ‖f x‖ ≤ c * ‖g x‖ := hx\n    _ ≤ c * (c' * ‖k x‖) := by gcongr\n    _ = c * c' * ‖k x‖ := (mul_assoc _ _ _).symm\n\n"}
{"name":"Asymptotics.IsBigO.trans","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nG : Type u_5\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : Norm G\ninst✝ : SeminormedAddCommGroup F'\nl : Filter α\nf : α → E\ng : α → F'\nk : α → G\nhfg : Asymptotics.IsBigO l f g\nhgk : Asymptotics.IsBigO l g k\n⊢ Asymptotics.IsBigO l f k","decl":"@[trans]\ntheorem IsBigO.trans {f : α → E} {g : α → F'} {k : α → G} (hfg : f =O[l] g) (hgk : g =O[l] k) :\n    f =O[l] k :=\n  let ⟨_c, cnonneg, hc⟩ := hfg.exists_nonneg\n  let ⟨_c', hc'⟩ := hgk.isBigOWith\n  (hc.trans hc' cnonneg).isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.trans_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG : Type u_5\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : Norm G\nc : Real\nf : α → E\ng : α → F\nk : α → G\nl : Filter α\nhfg : Asymptotics.IsLittleO l f g\nhgk : Asymptotics.IsBigOWith c l g k\nhc : LT.lt 0 c\n⊢ Asymptotics.IsLittleO l f k","decl":"theorem IsLittleO.trans_isBigOWith (hfg : f =o[l] g) (hgk : IsBigOWith c l g k) (hc : 0 < c) :\n    f =o[l] k := by\n  simp only [IsLittleO_def] at *\n  intro c' c'pos\n  have : 0 < c' / c := div_pos c'pos hc\n  exact ((hfg this).trans hgk this.le).congr_const (div_mul_cancel₀ _ hc.ne')\n\n"}
{"name":"Asymptotics.IsLittleO.trans_isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG' : Type u_8\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup G'\nl : Filter α\nf : α → E\ng : α → F\nk : α → G'\nhfg : Asymptotics.IsLittleO l f g\nhgk : Asymptotics.IsBigO l g k\n⊢ Asymptotics.IsLittleO l f k","decl":"@[trans]\ntheorem IsLittleO.trans_isBigO {f : α → E} {g : α → F} {k : α → G'} (hfg : f =o[l] g)\n    (hgk : g =O[l] k) : f =o[l] k :=\n  let ⟨_c, cpos, hc⟩ := hgk.exists_pos\n  hfg.trans_isBigOWith hc cpos\n\n"}
{"name":"Asymptotics.IsBigOWith.trans_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG : Type u_5\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : Norm G\nc : Real\nf : α → E\ng : α → F\nk : α → G\nl : Filter α\nhfg : Asymptotics.IsBigOWith c l f g\nhgk : Asymptotics.IsLittleO l g k\nhc : LT.lt 0 c\n⊢ Asymptotics.IsLittleO l f k","decl":"theorem IsBigOWith.trans_isLittleO (hfg : IsBigOWith c l f g) (hgk : g =o[l] k) (hc : 0 < c) :\n    f =o[l] k := by\n  simp only [IsLittleO_def] at *\n  intro c' c'pos\n  have : 0 < c' / c := div_pos c'pos hc\n  exact (hfg.trans (hgk this) hc.le).congr_const (mul_div_cancel₀ _ hc.ne')\n\n"}
{"name":"Asymptotics.IsBigO.trans_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nG : Type u_5\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : Norm G\ninst✝ : SeminormedAddCommGroup F'\nl : Filter α\nf : α → E\ng : α → F'\nk : α → G\nhfg : Asymptotics.IsBigO l f g\nhgk : Asymptotics.IsLittleO l g k\n⊢ Asymptotics.IsLittleO l f k","decl":"@[trans]\ntheorem IsBigO.trans_isLittleO {f : α → E} {g : α → F'} {k : α → G} (hfg : f =O[l] g)\n    (hgk : g =o[l] k) : f =o[l] k :=\n  let ⟨_c, cpos, hc⟩ := hfg.exists_pos\n  hc.trans_isLittleO hgk cpos\n\n"}
{"name":"Asymptotics.IsLittleO.trans","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG : Type u_5\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : Norm G\nl : Filter α\nf : α → E\ng : α → F\nk : α → G\nhfg : Asymptotics.IsLittleO l f g\nhgk : Asymptotics.IsLittleO l g k\n⊢ Asymptotics.IsLittleO l f k","decl":"@[trans]\ntheorem IsLittleO.trans {f : α → E} {g : α → F} {k : α → G} (hfg : f =o[l] g) (hgk : g =o[l] k) :\n    f =o[l] k :=\n  hfg.trans_isBigOWith hgk.isBigOWith one_pos\n\n"}
{"name":"Filter.Eventually.trans_isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nG : Type u_5\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : Norm G\ninst✝ : SeminormedAddCommGroup F'\nl : Filter α\nf : α → E\ng : α → F'\nk : α → G\nhfg : Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (Norm.norm (g x))) l\nhgk : Asymptotics.IsBigO l g k\n⊢ Asymptotics.IsBigO l f k","decl":"theorem _root_.Filter.Eventually.trans_isBigO {f : α → E} {g : α → F'} {k : α → G}\n    (hfg : ∀ᶠ x in l, ‖f x‖ ≤ ‖g x‖) (hgk : g =O[l] k) : f =O[l] k :=\n  (IsBigO.of_bound' hfg).trans hgk\n\n"}
{"name":"Filter.Eventually.isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\ng : α → Real\nl : Filter α\nhfg : Filter.Eventually (fun x => LE.le (Norm.norm (f x)) (g x)) l\n⊢ Asymptotics.IsBigO l f g","decl":"/-- See also `Asymptotics.IsBigO.of_norm_eventuallyLE`, which is the same lemma\nstated using `Filter.EventuallyLE` instead of `Filter.Eventually`. -/\ntheorem _root_.Filter.Eventually.isBigO {f : α → E} {g : α → ℝ} {l : Filter α}\n    (hfg : ∀ᶠ x in l, ‖f x‖ ≤ g x) : f =O[l] g :=\n  .of_norm_eventuallyLE hfg\n\n"}
{"name":"Asymptotics.isBigOWith_of_le'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nhfg : ∀ (x : α), LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))\n⊢ Asymptotics.IsBigOWith c l f g","decl":"theorem isBigOWith_of_le' (hfg : ∀ x, ‖f x‖ ≤ c * ‖g x‖) : IsBigOWith c l f g :=\n  IsBigOWith.of_bound <| univ_mem' hfg\n\n"}
{"name":"Asymptotics.isBigOWith_of_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nhfg : ∀ (x : α), LE.le (Norm.norm (f x)) (Norm.norm (g x))\n⊢ Asymptotics.IsBigOWith 1 l f g","decl":"theorem isBigOWith_of_le (hfg : ∀ x, ‖f x‖ ≤ ‖g x‖) : IsBigOWith 1 l f g :=\n  isBigOWith_of_le' l fun x => by\n    rw [one_mul]\n    exact hfg x\n\n"}
{"name":"Asymptotics.isBigO_of_le'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl : Filter α\nhfg : ∀ (x : α), LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x)))\n⊢ Asymptotics.IsBigO l f g","decl":"theorem isBigO_of_le' (hfg : ∀ x, ‖f x‖ ≤ c * ‖g x‖) : f =O[l] g :=\n  (isBigOWith_of_le' l hfg).isBigO\n\n"}
{"name":"Asymptotics.isBigO_of_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nhfg : ∀ (x : α), LE.le (Norm.norm (f x)) (Norm.norm (g x))\n⊢ Asymptotics.IsBigO l f g","decl":"theorem isBigO_of_le (hfg : ∀ x, ‖f x‖ ≤ ‖g x‖) : f =O[l] g :=\n  (isBigOWith_of_le l hfg).isBigO\n\n"}
{"name":"Asymptotics.isBigOWith_refl","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\n⊢ Asymptotics.IsBigOWith 1 l f f","decl":"theorem isBigOWith_refl (f : α → E) (l : Filter α) : IsBigOWith 1 l f f :=\n  isBigOWith_of_le l fun _ => le_rfl\n\n"}
{"name":"Asymptotics.isBigO_refl","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\n⊢ Asymptotics.IsBigO l f f","decl":"theorem isBigO_refl (f : α → E) (l : Filter α) : f =O[l] f :=\n  (isBigOWith_refl f l).isBigO\n\n"}
{"name":"Filter.EventuallyEq.isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nl : Filter α\nf₁ f₂ : α → E\nhf : l.EventuallyEq f₁ f₂\n⊢ Asymptotics.IsBigO l f₁ f₂","decl":"theorem _root_.Filter.EventuallyEq.isBigO {f₁ f₂ : α → E} (hf : f₁ =ᶠ[l] f₂) : f₁ =O[l] f₂ :=\n  hf.trans_isBigO (isBigO_refl _ _)\n\n"}
{"name":"Asymptotics.IsBigOWith.trans_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG : Type u_5\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : Norm G\nc : Real\nf : α → E\ng : α → F\nk : α → G\nl : Filter α\nhfg : Asymptotics.IsBigOWith c l f g\nhgk : ∀ (x : α), LE.le (Norm.norm (g x)) (Norm.norm (k x))\nhc : LE.le 0 c\n⊢ Asymptotics.IsBigOWith c l f k","decl":"theorem IsBigOWith.trans_le (hfg : IsBigOWith c l f g) (hgk : ∀ x, ‖g x‖ ≤ ‖k x‖) (hc : 0 ≤ c) :\n    IsBigOWith c l f k :=\n  (hfg.trans (isBigOWith_of_le l hgk) hc).congr_const <| mul_one c\n\n"}
{"name":"Asymptotics.IsBigO.trans_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nG : Type u_5\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : Norm G\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\nk : α → G\ng' : α → F'\nl : Filter α\nhfg : Asymptotics.IsBigO l f g'\nhgk : ∀ (x : α), LE.le (Norm.norm (g' x)) (Norm.norm (k x))\n⊢ Asymptotics.IsBigO l f k","decl":"theorem IsBigO.trans_le (hfg : f =O[l] g') (hgk : ∀ x, ‖g' x‖ ≤ ‖k x‖) : f =O[l] k :=\n  hfg.trans (isBigO_of_le l hgk)\n\n"}
{"name":"Asymptotics.IsLittleO.trans_le","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\nG : Type u_5\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : Norm G\nf : α → E\ng : α → F\nk : α → G\nl : Filter α\nhfg : Asymptotics.IsLittleO l f g\nhgk : ∀ (x : α), LE.le (Norm.norm (g x)) (Norm.norm (k x))\n⊢ Asymptotics.IsLittleO l f k","decl":"theorem IsLittleO.trans_le (hfg : f =o[l] g) (hgk : ∀ x, ‖g x‖ ≤ ‖k x‖) : f =o[l] k :=\n  hfg.trans_isBigOWith (isBigOWith_of_le _ hgk) zero_lt_one\n\n"}
{"name":"Asymptotics.isLittleO_irrefl'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\ninst✝ : SeminormedAddCommGroup E'\nf' : α → E'\nl : Filter α\nh : Filter.Frequently (fun x => Ne (Norm.norm (f' x)) 0) l\n⊢ Not (Asymptotics.IsLittleO l f' f')","decl":"theorem isLittleO_irrefl' (h : ∃ᶠ x in l, ‖f' x‖ ≠ 0) : ¬f' =o[l] f' := by\n  intro ho\n  rcases ((ho.bound one_half_pos).and_frequently h).exists with ⟨x, hle, hne⟩\n  rw [one_div, ← div_eq_inv_mul] at hle\n  exact (half_lt_self (lt_of_le_of_ne (norm_nonneg _) hne.symm)).not_le hle\n\n"}
{"name":"Asymptotics.isLittleO_irrefl","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE'' : Type u_9\ninst✝ : NormedAddCommGroup E''\nf'' : α → E''\nl : Filter α\nh : Filter.Frequently (fun x => Ne (f'' x) 0) l\n⊢ Not (Asymptotics.IsLittleO l f'' f'')","decl":"theorem isLittleO_irrefl (h : ∃ᶠ x in l, f'' x ≠ 0) : ¬f'' =o[l] f'' :=\n  isLittleO_irrefl' <| h.mono fun _x => norm_ne_zero_iff.mpr\n\n"}
{"name":"Asymptotics.IsBigO.not_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF' : Type u_7\nE'' : Type u_9\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : NormedAddCommGroup E''\ng' : α → F'\nf'' : α → E''\nl : Filter α\nh : Asymptotics.IsBigO l f'' g'\nhf : Filter.Frequently (fun x => Ne (f'' x) 0) l\n⊢ Not (Asymptotics.IsLittleO l g' f'')","decl":"theorem IsBigO.not_isLittleO (h : f'' =O[l] g') (hf : ∃ᶠ x in l, f'' x ≠ 0) :\n    ¬g' =o[l] f'' := fun h' =>\n  isLittleO_irrefl hf (h.trans_isLittleO h')\n\n"}
{"name":"Asymptotics.IsLittleO.not_isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF' : Type u_7\nE'' : Type u_9\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : NormedAddCommGroup E''\ng' : α → F'\nf'' : α → E''\nl : Filter α\nh : Asymptotics.IsLittleO l f'' g'\nhf : Filter.Frequently (fun x => Ne (f'' x) 0) l\n⊢ Not (Asymptotics.IsBigO l g' f'')","decl":"theorem IsLittleO.not_isBigO (h : f'' =o[l] g') (hf : ∃ᶠ x in l, f'' x ≠ 0) :\n    ¬g' =O[l] f'' := fun h' =>\n  isLittleO_irrefl hf (h.trans_isBigO h')\n\n"}
{"name":"Asymptotics.isBigOWith_bot","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\n⊢ Asymptotics.IsBigOWith c Bot.bot f g","decl":"@[simp]\ntheorem isBigOWith_bot : IsBigOWith c ⊥ f g :=\n  IsBigOWith.of_bound <| trivial\n\n"}
{"name":"Asymptotics.isBigO_bot","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\n⊢ Asymptotics.IsBigO Bot.bot f g","decl":"@[simp]\ntheorem isBigO_bot : f =O[⊥] g :=\n  (isBigOWith_bot 1 f g).isBigO\n\n"}
{"name":"Asymptotics.isLittleO_bot","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\n⊢ Asymptotics.IsLittleO Bot.bot f g","decl":"@[simp]\ntheorem isLittleO_bot : f =o[⊥] g :=\n  IsLittleO.of_isBigOWith fun c _ => isBigOWith_bot c f g\n\n"}
{"name":"Asymptotics.isBigOWith_pure","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nx : α\n⊢ Iff (Asymptotics.IsBigOWith c (Pure.pure x) f g) (LE.le (Norm.norm (f x)) (HMul.hMul c (Norm.norm (g x))))","decl":"@[simp]\ntheorem isBigOWith_pure {x} : IsBigOWith c (pure x) f g ↔ ‖f x‖ ≤ c * ‖g x‖ :=\n  isBigOWith_iff\n\n"}
{"name":"Asymptotics.IsBigOWith.sup","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nc : Real\nf : α → E\ng : α → F\nl l' : Filter α\nh : Asymptotics.IsBigOWith c l f g\nh' : Asymptotics.IsBigOWith c l' f g\n⊢ Asymptotics.IsBigOWith c (Max.max l l') f g","decl":"theorem IsBigOWith.sup (h : IsBigOWith c l f g) (h' : IsBigOWith c l' f g) :\n    IsBigOWith c (l ⊔ l') f g :=\n  IsBigOWith.of_bound <| mem_sup.2 ⟨h.bound, h'.bound⟩\n\n"}
{"name":"Asymptotics.IsBigOWith.sup'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc c' : Real\nf : α → E\ng' : α → F'\nl l' : Filter α\nh : Asymptotics.IsBigOWith c l f g'\nh' : Asymptotics.IsBigOWith c' l' f g'\n⊢ Asymptotics.IsBigOWith (Max.max c c') (Max.max l l') f g'","decl":"theorem IsBigOWith.sup' (h : IsBigOWith c l f g') (h' : IsBigOWith c' l' f g') :\n    IsBigOWith (max c c') (l ⊔ l') f g' :=\n  IsBigOWith.of_bound <|\n    mem_sup.2 ⟨(h.weaken <| le_max_left c c').bound, (h'.weaken <| le_max_right c c').bound⟩\n\n"}
{"name":"Asymptotics.IsBigO.sup","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl l' : Filter α\nh : Asymptotics.IsBigO l f g'\nh' : Asymptotics.IsBigO l' f g'\n⊢ Asymptotics.IsBigO (Max.max l l') f g'","decl":"theorem IsBigO.sup (h : f =O[l] g') (h' : f =O[l'] g') : f =O[l ⊔ l'] g' :=\n  let ⟨_c, hc⟩ := h.isBigOWith\n  let ⟨_c', hc'⟩ := h'.isBigOWith\n  (hc.sup' hc').isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.sup","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl l' : Filter α\nh : Asymptotics.IsLittleO l f g\nh' : Asymptotics.IsLittleO l' f g\n⊢ Asymptotics.IsLittleO (Max.max l l') f g","decl":"theorem IsLittleO.sup (h : f =o[l] g) (h' : f =o[l'] g) : f =o[l ⊔ l'] g :=\n  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).sup (h'.forall_isBigOWith cpos)\n\n"}
{"name":"Asymptotics.isBigO_sup","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl l' : Filter α\n⊢ Iff (Asymptotics.IsBigO (Max.max l l') f g') (And (Asymptotics.IsBigO l f g') (Asymptotics.IsBigO l' f g'))","decl":"@[simp]\ntheorem isBigO_sup : f =O[l ⊔ l'] g' ↔ f =O[l] g' ∧ f =O[l'] g' :=\n  ⟨fun h => ⟨h.mono le_sup_left, h.mono le_sup_right⟩, fun h => h.1.sup h.2⟩\n\n"}
{"name":"Asymptotics.isLittleO_sup","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl l' : Filter α\n⊢ Iff (Asymptotics.IsLittleO (Max.max l l') f g) (And (Asymptotics.IsLittleO l f g) (Asymptotics.IsLittleO l' f g))","decl":"@[simp]\ntheorem isLittleO_sup : f =o[l ⊔ l'] g ↔ f =o[l] g ∧ f =o[l'] g :=\n  ⟨fun h => ⟨h.mono le_sup_left, h.mono le_sup_right⟩, fun h => h.1.sup h.2⟩\n\n"}
{"name":"Asymptotics.isBigOWith_insert","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : TopologicalSpace α\nx : α\ns : Set α\nC : Real\ng : α → E\ng' : α → F\nh : LE.le (Norm.norm (g x)) (HMul.hMul C (Norm.norm (g' x)))\n⊢ Iff (Asymptotics.IsBigOWith C (nhdsWithin x (Insert.insert x s)) g g') (Asymptotics.IsBigOWith C (nhdsWithin x s) g g')","decl":"theorem isBigOWith_insert [TopologicalSpace α] {x : α} {s : Set α} {C : ℝ} {g : α → E} {g' : α → F}\n    (h : ‖g x‖ ≤ C * ‖g' x‖) : IsBigOWith C (𝓝[insert x s] x) g g' ↔\n    IsBigOWith C (𝓝[s] x) g g' := by\n  simp_rw [IsBigOWith_def, nhdsWithin_insert, eventually_sup, eventually_pure, h, true_and]\n\n"}
{"name":"Asymptotics.IsBigOWith.insert","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝² : Norm E\ninst✝¹ : Norm F\ninst✝ : TopologicalSpace α\nx : α\ns : Set α\nC : Real\ng : α → E\ng' : α → F\nh1 : Asymptotics.IsBigOWith C (nhdsWithin x s) g g'\nh2 : LE.le (Norm.norm (g x)) (HMul.hMul C (Norm.norm (g' x)))\n⊢ Asymptotics.IsBigOWith C (nhdsWithin x (Insert.insert x s)) g g'","decl":"protected theorem IsBigOWith.insert [TopologicalSpace α] {x : α} {s : Set α} {C : ℝ} {g : α → E}\n    {g' : α → F} (h1 : IsBigOWith C (𝓝[s] x) g g') (h2 : ‖g x‖ ≤ C * ‖g' x‖) :\n    IsBigOWith C (𝓝[insert x s] x) g g' :=\n  (isBigOWith_insert h2).mpr h1\n\n"}
{"name":"Asymptotics.isLittleO_insert","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : TopologicalSpace α\nx : α\ns : Set α\ng : α → E'\ng' : α → F'\nh : Eq (g x) 0\n⊢ Iff (Asymptotics.IsLittleO (nhdsWithin x (Insert.insert x s)) g g') (Asymptotics.IsLittleO (nhdsWithin x s) g g')","decl":"theorem isLittleO_insert [TopologicalSpace α] {x : α} {s : Set α} {g : α → E'} {g' : α → F'}\n    (h : g x = 0) : g =o[𝓝[insert x s] x] g' ↔ g =o[𝓝[s] x] g' := by\n  simp_rw [IsLittleO_def]\n  refine forall_congr' fun c => forall_congr' fun hc => ?_\n  rw [isBigOWith_insert]\n  rw [h, norm_zero]\n  exact mul_nonneg hc.le (norm_nonneg _)\n\n"}
{"name":"Asymptotics.IsLittleO.insert","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : TopologicalSpace α\nx : α\ns : Set α\ng : α → E'\ng' : α → F'\nh1 : Asymptotics.IsLittleO (nhdsWithin x s) g g'\nh2 : Eq (g x) 0\n⊢ Asymptotics.IsLittleO (nhdsWithin x (Insert.insert x s)) g g'","decl":"protected theorem IsLittleO.insert [TopologicalSpace α] {x : α} {s : Set α} {g : α → E'}\n    {g' : α → F'} (h1 : g =o[𝓝[s] x] g') (h2 : g x = 0) : g =o[𝓝[insert x s] x] g' :=\n  (isLittleO_insert h2).mpr h1\n\n"}
{"name":"Asymptotics.isBigOWith_norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l f fun x => Norm.norm (g' x)) (Asymptotics.IsBigOWith c l f g')","decl":"@[simp]\ntheorem isBigOWith_norm_right : (IsBigOWith c l f fun x => ‖g' x‖) ↔ IsBigOWith c l f g' := by\n  simp only [IsBigOWith_def, norm_norm]\n\n"}
{"name":"Asymptotics.isBigOWith_abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nc : Real\nf : α → E\nl : Filter α\nu : α → Real\n⊢ Iff (Asymptotics.IsBigOWith c l f fun x => abs (u x)) (Asymptotics.IsBigOWith c l f u)","decl":"@[simp]\ntheorem isBigOWith_abs_right : (IsBigOWith c l f fun x => |u x|) ↔ IsBigOWith c l f u :=\n  @isBigOWith_norm_right _ _ _ _ _ _ f u l\n\n"}
{"name":"Asymptotics.IsBigOWith.of_norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f fun x => Norm.norm (g' x)\n⊢ Asymptotics.IsBigOWith c l f g'","decl":"alias ⟨IsBigOWith.of_norm_right, IsBigOWith.norm_right⟩ := isBigOWith_norm_right\n\n"}
{"name":"Asymptotics.IsBigOWith.norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f g'\n⊢ Asymptotics.IsBigOWith c l f fun x => Norm.norm (g' x)","decl":"alias ⟨IsBigOWith.of_norm_right, IsBigOWith.norm_right⟩ := isBigOWith_norm_right\n\n"}
{"name":"Asymptotics.IsBigOWith.of_abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nc : Real\nf : α → E\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigOWith c l f fun x => abs (u x)\n⊢ Asymptotics.IsBigOWith c l f u","decl":"alias ⟨IsBigOWith.of_abs_right, IsBigOWith.abs_right⟩ := isBigOWith_abs_right\n\n"}
{"name":"Asymptotics.IsBigOWith.abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nc : Real\nf : α → E\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigOWith c l f u\n⊢ Asymptotics.IsBigOWith c l f fun x => abs (u x)","decl":"alias ⟨IsBigOWith.of_abs_right, IsBigOWith.abs_right⟩ := isBigOWith_abs_right\n\n"}
{"name":"Asymptotics.isBigO_norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f fun x => Norm.norm (g' x)) (Asymptotics.IsBigO l f g')","decl":"@[simp]\ntheorem isBigO_norm_right : (f =O[l] fun x => ‖g' x‖) ↔ f =O[l] g' := by\n  simp only [IsBigO_def]\n  exact exists_congr fun _ => isBigOWith_norm_right\n\n"}
{"name":"Asymptotics.isBigO_abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\nu : α → Real\n⊢ Iff (Asymptotics.IsBigO l f fun x => abs (u x)) (Asymptotics.IsBigO l f u)","decl":"@[simp]\ntheorem isBigO_abs_right : (f =O[l] fun x => |u x|) ↔ f =O[l] u :=\n  @isBigO_norm_right _ _ ℝ _ _ _ _ _\n\n"}
{"name":"Asymptotics.IsBigO.norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigO l f g'\n⊢ Asymptotics.IsBigO l f fun x => Norm.norm (g' x)","decl":"alias ⟨IsBigO.of_norm_right, IsBigO.norm_right⟩ := isBigO_norm_right\n\n"}
{"name":"Asymptotics.IsBigO.of_norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigO l f fun x => Norm.norm (g' x)\n⊢ Asymptotics.IsBigO l f g'","decl":"alias ⟨IsBigO.of_norm_right, IsBigO.norm_right⟩ := isBigO_norm_right\n\n"}
{"name":"Asymptotics.IsBigO.abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigO l f u\n⊢ Asymptotics.IsBigO l f fun x => abs (u x)","decl":"alias ⟨IsBigO.of_abs_right, IsBigO.abs_right⟩ := isBigO_abs_right\n\n"}
{"name":"Asymptotics.IsBigO.of_abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigO l f fun x => abs (u x)\n⊢ Asymptotics.IsBigO l f u","decl":"alias ⟨IsBigO.of_abs_right, IsBigO.abs_right⟩ := isBigO_abs_right\n\n"}
{"name":"Asymptotics.isLittleO_norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f fun x => Norm.norm (g' x)) (Asymptotics.IsLittleO l f g')","decl":"@[simp]\ntheorem isLittleO_norm_right : (f =o[l] fun x => ‖g' x‖) ↔ f =o[l] g' := by\n  simp only [IsLittleO_def]\n  exact forall₂_congr fun _ _ => isBigOWith_norm_right\n\n"}
{"name":"Asymptotics.isLittleO_abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\nu : α → Real\n⊢ Iff (Asymptotics.IsLittleO l f fun x => abs (u x)) (Asymptotics.IsLittleO l f u)","decl":"@[simp]\ntheorem isLittleO_abs_right : (f =o[l] fun x => |u x|) ↔ f =o[l] u :=\n  @isLittleO_norm_right _ _ ℝ _ _ _ _ _\n\n"}
{"name":"Asymptotics.IsLittleO.norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f g'\n⊢ Asymptotics.IsLittleO l f fun x => Norm.norm (g' x)","decl":"alias ⟨IsLittleO.of_norm_right, IsLittleO.norm_right⟩ := isLittleO_norm_right\n\n"}
{"name":"Asymptotics.IsLittleO.of_norm_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f fun x => Norm.norm (g' x)\n⊢ Asymptotics.IsLittleO l f g'","decl":"alias ⟨IsLittleO.of_norm_right, IsLittleO.norm_right⟩ := isLittleO_norm_right\n\n"}
{"name":"Asymptotics.IsLittleO.abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsLittleO l f u\n⊢ Asymptotics.IsLittleO l f fun x => abs (u x)","decl":"alias ⟨IsLittleO.of_abs_right, IsLittleO.abs_right⟩ := isLittleO_abs_right\n\n"}
{"name":"Asymptotics.IsLittleO.of_abs_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\ninst✝ : Norm E\nf : α → E\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsLittleO l f fun x => abs (u x)\n⊢ Asymptotics.IsLittleO l f u","decl":"alias ⟨IsLittleO.of_abs_right, IsLittleO.abs_right⟩ := isLittleO_abs_right\n\n"}
{"name":"Asymptotics.isBigOWith_norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => Norm.norm (f' x)) g) (Asymptotics.IsBigOWith c l f' g)","decl":"@[simp]\ntheorem isBigOWith_norm_left : IsBigOWith c l (fun x => ‖f' x‖) g ↔ IsBigOWith c l f' g := by\n  simp only [IsBigOWith_def, norm_norm]\n\n"}
{"name":"Asymptotics.isBigOWith_abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\nc : Real\ng : α → F\nl : Filter α\nu : α → Real\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => abs (u x)) g) (Asymptotics.IsBigOWith c l u g)","decl":"@[simp]\ntheorem isBigOWith_abs_left : IsBigOWith c l (fun x => |u x|) g ↔ IsBigOWith c l u g :=\n  @isBigOWith_norm_left _ _ _ _ _ _ g u l\n\n"}
{"name":"Asymptotics.IsBigOWith.of_norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l (fun x => Norm.norm (f' x)) g\n⊢ Asymptotics.IsBigOWith c l f' g","decl":"alias ⟨IsBigOWith.of_norm_left, IsBigOWith.norm_left⟩ := isBigOWith_norm_left\n\n"}
{"name":"Asymptotics.IsBigOWith.norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f' g\n⊢ Asymptotics.IsBigOWith c l (fun x => Norm.norm (f' x)) g","decl":"alias ⟨IsBigOWith.of_norm_left, IsBigOWith.norm_left⟩ := isBigOWith_norm_left\n\n"}
{"name":"Asymptotics.IsBigOWith.of_abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\nc : Real\ng : α → F\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigOWith c l (fun x => abs (u x)) g\n⊢ Asymptotics.IsBigOWith c l u g","decl":"alias ⟨IsBigOWith.of_abs_left, IsBigOWith.abs_left⟩ := isBigOWith_abs_left\n\n"}
{"name":"Asymptotics.IsBigOWith.abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\nc : Real\ng : α → F\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigOWith c l u g\n⊢ Asymptotics.IsBigOWith c l (fun x => abs (u x)) g","decl":"alias ⟨IsBigOWith.of_abs_left, IsBigOWith.abs_left⟩ := isBigOWith_abs_left\n\n"}
{"name":"Asymptotics.isBigO_norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l (fun x => Norm.norm (f' x)) g) (Asymptotics.IsBigO l f' g)","decl":"@[simp]\ntheorem isBigO_norm_left : (fun x => ‖f' x‖) =O[l] g ↔ f' =O[l] g := by\n  simp only [IsBigO_def]\n  exact exists_congr fun _ => isBigOWith_norm_left\n\n"}
{"name":"Asymptotics.isBigO_abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\ng : α → F\nl : Filter α\nu : α → Real\n⊢ Iff (Asymptotics.IsBigO l (fun x => abs (u x)) g) (Asymptotics.IsBigO l u g)","decl":"@[simp]\ntheorem isBigO_abs_left : (fun x => |u x|) =O[l] g ↔ u =O[l] g :=\n  @isBigO_norm_left _ _ _ _ _ g u l\n\n"}
{"name":"Asymptotics.IsBigO.norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigO l f' g\n⊢ Asymptotics.IsBigO l (fun x => Norm.norm (f' x)) g","decl":"alias ⟨IsBigO.of_norm_left, IsBigO.norm_left⟩ := isBigO_norm_left\n\n"}
{"name":"Asymptotics.IsBigO.of_norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigO l (fun x => Norm.norm (f' x)) g\n⊢ Asymptotics.IsBigO l f' g","decl":"alias ⟨IsBigO.of_norm_left, IsBigO.norm_left⟩ := isBigO_norm_left\n\n"}
{"name":"Asymptotics.IsBigO.abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\ng : α → F\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigO l u g\n⊢ Asymptotics.IsBigO l (fun x => abs (u x)) g","decl":"alias ⟨IsBigO.of_abs_left, IsBigO.abs_left⟩ := isBigO_abs_left\n\n"}
{"name":"Asymptotics.IsBigO.of_abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\ng : α → F\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsBigO l (fun x => abs (u x)) g\n⊢ Asymptotics.IsBigO l u g","decl":"alias ⟨IsBigO.of_abs_left, IsBigO.abs_left⟩ := isBigO_abs_left\n\n"}
{"name":"Asymptotics.isLittleO_norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l (fun x => Norm.norm (f' x)) g) (Asymptotics.IsLittleO l f' g)","decl":"@[simp]\ntheorem isLittleO_norm_left : (fun x => ‖f' x‖) =o[l] g ↔ f' =o[l] g := by\n  simp only [IsLittleO_def]\n  exact forall₂_congr fun _ _ => isBigOWith_norm_left\n\n"}
{"name":"Asymptotics.isLittleO_abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\ng : α → F\nl : Filter α\nu : α → Real\n⊢ Iff (Asymptotics.IsLittleO l (fun x => abs (u x)) g) (Asymptotics.IsLittleO l u g)","decl":"@[simp]\ntheorem isLittleO_abs_left : (fun x => |u x|) =o[l] g ↔ u =o[l] g :=\n  @isLittleO_norm_left _ _ _ _ _ g u l\n\n"}
{"name":"Asymptotics.IsLittleO.norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f' g\n⊢ Asymptotics.IsLittleO l (fun x => Norm.norm (f' x)) g","decl":"alias ⟨IsLittleO.of_norm_left, IsLittleO.norm_left⟩ := isLittleO_norm_left\n\n"}
{"name":"Asymptotics.IsLittleO.of_norm_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsLittleO l (fun x => Norm.norm (f' x)) g\n⊢ Asymptotics.IsLittleO l f' g","decl":"alias ⟨IsLittleO.of_norm_left, IsLittleO.norm_left⟩ := isLittleO_norm_left\n\n"}
{"name":"Asymptotics.IsLittleO.of_abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\ng : α → F\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsLittleO l (fun x => abs (u x)) g\n⊢ Asymptotics.IsLittleO l u g","decl":"alias ⟨IsLittleO.of_abs_left, IsLittleO.abs_left⟩ := isLittleO_abs_left\n\n"}
{"name":"Asymptotics.IsLittleO.abs_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\ninst✝ : Norm F\ng : α → F\nl : Filter α\nu : α → Real\na✝ : Asymptotics.IsLittleO l u g\n⊢ Asymptotics.IsLittleO l (fun x => abs (u x)) g","decl":"alias ⟨IsLittleO.of_abs_left, IsLittleO.abs_left⟩ := isLittleO_abs_left\n\n"}
{"name":"Asymptotics.isBigOWith_norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)) (Asymptotics.IsBigOWith c l f' g')","decl":"theorem isBigOWith_norm_norm :\n    (IsBigOWith c l (fun x => ‖f' x‖) fun x => ‖g' x‖) ↔ IsBigOWith c l f' g' :=\n  isBigOWith_norm_left.trans isBigOWith_norm_right\n\n"}
{"name":"Asymptotics.isBigOWith_abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nc : Real\nl : Filter α\nu v : α → Real\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => abs (u x)) fun x => abs (v x)) (Asymptotics.IsBigOWith c l u v)","decl":"theorem isBigOWith_abs_abs :\n    (IsBigOWith c l (fun x => |u x|) fun x => |v x|) ↔ IsBigOWith c l u v :=\n  isBigOWith_abs_left.trans isBigOWith_abs_right\n\n"}
{"name":"Asymptotics.IsBigOWith.norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf' : α → E'\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f' g'\n⊢ Asymptotics.IsBigOWith c l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)","decl":"alias ⟨IsBigOWith.of_norm_norm, IsBigOWith.norm_norm⟩ := isBigOWith_norm_norm\n\n"}
{"name":"Asymptotics.IsBigOWith.of_norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf' : α → E'\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)\n⊢ Asymptotics.IsBigOWith c l f' g'","decl":"alias ⟨IsBigOWith.of_norm_norm, IsBigOWith.norm_norm⟩ := isBigOWith_norm_norm\n\n"}
{"name":"Asymptotics.IsBigOWith.of_abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nc : Real\nl : Filter α\nu v : α → Real\na✝ : Asymptotics.IsBigOWith c l (fun x => abs (u x)) fun x => abs (v x)\n⊢ Asymptotics.IsBigOWith c l u v","decl":"alias ⟨IsBigOWith.of_abs_abs, IsBigOWith.abs_abs⟩ := isBigOWith_abs_abs\n\n"}
{"name":"Asymptotics.IsBigOWith.abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nc : Real\nl : Filter α\nu v : α → Real\na✝ : Asymptotics.IsBigOWith c l u v\n⊢ Asymptotics.IsBigOWith c l (fun x => abs (u x)) fun x => abs (v x)","decl":"alias ⟨IsBigOWith.of_abs_abs, IsBigOWith.abs_abs⟩ := isBigOWith_abs_abs\n\n"}
{"name":"Asymptotics.isBigO_norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)) (Asymptotics.IsBigO l f' g')","decl":"theorem isBigO_norm_norm : ((fun x => ‖f' x‖) =O[l] fun x => ‖g' x‖) ↔ f' =O[l] g' :=\n  isBigO_norm_left.trans isBigO_norm_right\n\n"}
{"name":"Asymptotics.isBigO_abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nl : Filter α\nu v : α → Real\n⊢ Iff (Asymptotics.IsBigO l (fun x => abs (u x)) fun x => abs (v x)) (Asymptotics.IsBigO l u v)","decl":"theorem isBigO_abs_abs : ((fun x => |u x|) =O[l] fun x => |v x|) ↔ u =O[l] v :=\n  isBigO_abs_left.trans isBigO_abs_right\n\n"}
{"name":"Asymptotics.IsBigO.of_norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigO l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)\n⊢ Asymptotics.IsBigO l f' g'","decl":"alias ⟨IsBigO.of_norm_norm, IsBigO.norm_norm⟩ := isBigO_norm_norm\n\n"}
{"name":"Asymptotics.IsBigO.norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigO l f' g'\n⊢ Asymptotics.IsBigO l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)","decl":"alias ⟨IsBigO.of_norm_norm, IsBigO.norm_norm⟩ := isBigO_norm_norm\n\n"}
{"name":"Asymptotics.IsBigO.abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nl : Filter α\nu v : α → Real\na✝ : Asymptotics.IsBigO l u v\n⊢ Asymptotics.IsBigO l (fun x => abs (u x)) fun x => abs (v x)","decl":"alias ⟨IsBigO.of_abs_abs, IsBigO.abs_abs⟩ := isBigO_abs_abs\n\n"}
{"name":"Asymptotics.IsBigO.of_abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nl : Filter α\nu v : α → Real\na✝ : Asymptotics.IsBigO l (fun x => abs (u x)) fun x => abs (v x)\n⊢ Asymptotics.IsBigO l u v","decl":"alias ⟨IsBigO.of_abs_abs, IsBigO.abs_abs⟩ := isBigO_abs_abs\n\n"}
{"name":"Asymptotics.isLittleO_norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)) (Asymptotics.IsLittleO l f' g')","decl":"theorem isLittleO_norm_norm : ((fun x => ‖f' x‖) =o[l] fun x => ‖g' x‖) ↔ f' =o[l] g' :=\n  isLittleO_norm_left.trans isLittleO_norm_right\n\n"}
{"name":"Asymptotics.isLittleO_abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nl : Filter α\nu v : α → Real\n⊢ Iff (Asymptotics.IsLittleO l (fun x => abs (u x)) fun x => abs (v x)) (Asymptotics.IsLittleO l u v)","decl":"theorem isLittleO_abs_abs : ((fun x => |u x|) =o[l] fun x => |v x|) ↔ u =o[l] v :=\n  isLittleO_abs_left.trans isLittleO_abs_right\n\n"}
{"name":"Asymptotics.IsLittleO.norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f' g'\n⊢ Asymptotics.IsLittleO l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)","decl":"alias ⟨IsLittleO.of_norm_norm, IsLittleO.norm_norm⟩ := isLittleO_norm_norm\n\n"}
{"name":"Asymptotics.IsLittleO.of_norm_norm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsLittleO l (fun x => Norm.norm (f' x)) fun x => Norm.norm (g' x)\n⊢ Asymptotics.IsLittleO l f' g'","decl":"alias ⟨IsLittleO.of_norm_norm, IsLittleO.norm_norm⟩ := isLittleO_norm_norm\n\n"}
{"name":"Asymptotics.IsLittleO.of_abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nl : Filter α\nu v : α → Real\na✝ : Asymptotics.IsLittleO l (fun x => abs (u x)) fun x => abs (v x)\n⊢ Asymptotics.IsLittleO l u v","decl":"alias ⟨IsLittleO.of_abs_abs, IsLittleO.abs_abs⟩ := isLittleO_abs_abs\n\n"}
{"name":"Asymptotics.IsLittleO.abs_abs","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nl : Filter α\nu v : α → Real\na✝ : Asymptotics.IsLittleO l u v\n⊢ Asymptotics.IsLittleO l (fun x => abs (u x)) fun x => abs (v x)","decl":"alias ⟨IsLittleO.of_abs_abs, IsLittleO.abs_abs⟩ := isLittleO_abs_abs\n\n"}
{"name":"Asymptotics.isBigOWith_neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l f fun x => Neg.neg (g' x)) (Asymptotics.IsBigOWith c l f g')","decl":"@[simp]\ntheorem isBigOWith_neg_right : (IsBigOWith c l f fun x => -g' x) ↔ IsBigOWith c l f g' := by\n  simp only [IsBigOWith_def, norm_neg]\n\n"}
{"name":"Asymptotics.IsBigOWith.of_neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f fun x => Neg.neg (g' x)\n⊢ Asymptotics.IsBigOWith c l f g'","decl":"alias ⟨IsBigOWith.of_neg_right, IsBigOWith.neg_right⟩ := isBigOWith_neg_right\n\n"}
{"name":"Asymptotics.IsBigOWith.neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f g'\n⊢ Asymptotics.IsBigOWith c l f fun x => Neg.neg (g' x)","decl":"alias ⟨IsBigOWith.of_neg_right, IsBigOWith.neg_right⟩ := isBigOWith_neg_right\n\n"}
{"name":"Asymptotics.isBigO_neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f fun x => Neg.neg (g' x)) (Asymptotics.IsBigO l f g')","decl":"@[simp]\ntheorem isBigO_neg_right : (f =O[l] fun x => -g' x) ↔ f =O[l] g' := by\n  simp only [IsBigO_def]\n  exact exists_congr fun _ => isBigOWith_neg_right\n\n"}
{"name":"Asymptotics.IsBigO.of_neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigO l f fun x => Neg.neg (g' x)\n⊢ Asymptotics.IsBigO l f g'","decl":"alias ⟨IsBigO.of_neg_right, IsBigO.neg_right⟩ := isBigO_neg_right\n\n"}
{"name":"Asymptotics.IsBigO.neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsBigO l f g'\n⊢ Asymptotics.IsBigO l f fun x => Neg.neg (g' x)","decl":"alias ⟨IsBigO.of_neg_right, IsBigO.neg_right⟩ := isBigO_neg_right\n\n"}
{"name":"Asymptotics.isLittleO_neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f fun x => Neg.neg (g' x)) (Asymptotics.IsLittleO l f g')","decl":"@[simp]\ntheorem isLittleO_neg_right : (f =o[l] fun x => -g' x) ↔ f =o[l] g' := by\n  simp only [IsLittleO_def]\n  exact forall₂_congr fun _ _ => isBigOWith_neg_right\n\n"}
{"name":"Asymptotics.IsLittleO.of_neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f fun x => Neg.neg (g' x)\n⊢ Asymptotics.IsLittleO l f g'","decl":"alias ⟨IsLittleO.of_neg_right, IsLittleO.neg_right⟩ := isLittleO_neg_right\n\n"}
{"name":"Asymptotics.IsLittleO.neg_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\ninst✝¹ : Norm E\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\ng' : α → F'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f g'\n⊢ Asymptotics.IsLittleO l f fun x => Neg.neg (g' x)","decl":"alias ⟨IsLittleO.of_neg_right, IsLittleO.neg_right⟩ := isLittleO_neg_right\n\n"}
{"name":"Asymptotics.isBigOWith_neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => Neg.neg (f' x)) g) (Asymptotics.IsBigOWith c l f' g)","decl":"@[simp]\ntheorem isBigOWith_neg_left : IsBigOWith c l (fun x => -f' x) g ↔ IsBigOWith c l f' g := by\n  simp only [IsBigOWith_def, norm_neg]\n\n"}
{"name":"Asymptotics.IsBigOWith.of_neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l (fun x => Neg.neg (f' x)) g\n⊢ Asymptotics.IsBigOWith c l f' g","decl":"alias ⟨IsBigOWith.of_neg_left, IsBigOWith.neg_left⟩ := isBigOWith_neg_left\n\n"}
{"name":"Asymptotics.IsBigOWith.neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigOWith c l f' g\n⊢ Asymptotics.IsBigOWith c l (fun x => Neg.neg (f' x)) g","decl":"alias ⟨IsBigOWith.of_neg_left, IsBigOWith.neg_left⟩ := isBigOWith_neg_left\n\n"}
{"name":"Asymptotics.isBigO_neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l (fun x => Neg.neg (f' x)) g) (Asymptotics.IsBigO l f' g)","decl":"@[simp]\ntheorem isBigO_neg_left : (fun x => -f' x) =O[l] g ↔ f' =O[l] g := by\n  simp only [IsBigO_def]\n  exact exists_congr fun _ => isBigOWith_neg_left\n\n"}
{"name":"Asymptotics.IsBigO.of_neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigO l (fun x => Neg.neg (f' x)) g\n⊢ Asymptotics.IsBigO l f' g","decl":"alias ⟨IsBigO.of_neg_left, IsBigO.neg_left⟩ := isBigO_neg_left\n\n"}
{"name":"Asymptotics.IsBigO.neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsBigO l f' g\n⊢ Asymptotics.IsBigO l (fun x => Neg.neg (f' x)) g","decl":"alias ⟨IsBigO.of_neg_left, IsBigO.neg_left⟩ := isBigO_neg_left\n\n"}
{"name":"Asymptotics.isLittleO_neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l (fun x => Neg.neg (f' x)) g) (Asymptotics.IsLittleO l f' g)","decl":"@[simp]\ntheorem isLittleO_neg_left : (fun x => -f' x) =o[l] g ↔ f' =o[l] g := by\n  simp only [IsLittleO_def]\n  exact forall₂_congr fun _ _ => isBigOWith_neg_left\n\n"}
{"name":"Asymptotics.IsLittleO.of_neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsLittleO l (fun x => Neg.neg (f' x)) g\n⊢ Asymptotics.IsLittleO l f' g","decl":"alias ⟨IsLittleO.of_neg_left, IsLittleO.neg_left⟩ := isLittleO_neg_left\n\n"}
{"name":"Asymptotics.IsLittleO.neg_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nf' : α → E'\nl : Filter α\na✝ : Asymptotics.IsLittleO l f' g\n⊢ Asymptotics.IsLittleO l (fun x => Neg.neg (f' x)) g","decl":"alias ⟨IsLittleO.of_neg_left, IsLittleO.neg_left⟩ := isLittleO_neg_left\n\n"}
{"name":"Asymptotics.isBigOWith_fst_prod","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsBigOWith 1 l f' fun x => { fst := f' x, snd := g' x }","decl":"theorem isBigOWith_fst_prod : IsBigOWith 1 l f' fun x => (f' x, g' x) :=\n  isBigOWith_of_le l fun _x => le_max_left _ _\n\n"}
{"name":"Asymptotics.isBigOWith_snd_prod","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsBigOWith 1 l g' fun x => { fst := f' x, snd := g' x }","decl":"theorem isBigOWith_snd_prod : IsBigOWith 1 l g' fun x => (f' x, g' x) :=\n  isBigOWith_of_le l fun _x => le_max_right _ _\n\n"}
{"name":"Asymptotics.isBigO_fst_prod","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsBigO l f' fun x => { fst := f' x, snd := g' x }","decl":"theorem isBigO_fst_prod : f' =O[l] fun x => (f' x, g' x) :=\n  isBigOWith_fst_prod.isBigO\n\n"}
{"name":"Asymptotics.isBigO_snd_prod","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsBigO l g' fun x => { fst := f' x, snd := g' x }","decl":"theorem isBigO_snd_prod : g' =O[l] fun x => (f' x, g' x) :=\n  isBigOWith_snd_prod.isBigO\n\n"}
{"name":"Asymptotics.isBigO_fst_prod'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nl : Filter α\nf' : α → Prod E' F'\n⊢ Asymptotics.IsBigO l (fun x => (f' x).1) f'","decl":"theorem isBigO_fst_prod' {f' : α → E' × F'} : (fun x => (f' x).1) =O[l] f' := by\n  simpa [IsBigO_def, IsBigOWith_def] using isBigO_fst_prod (E' := E') (F' := F')\n\n"}
{"name":"Asymptotics.isBigO_snd_prod'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nl : Filter α\nf' : α → Prod E' F'\n⊢ Asymptotics.IsBigO l (fun x => (f' x).2) f'","decl":"theorem isBigO_snd_prod' {f' : α → E' × F'} : (fun x => (f' x).2) =O[l] f' := by\n  simpa [IsBigO_def, IsBigOWith_def] using isBigO_snd_prod (E' := E') (F' := F')\n\n"}
{"name":"Asymptotics.IsBigOWith.prod_rightl","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\nG' : Type u_8\ninst✝² : Norm E\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nc : Real\nf : α → E\ng' : α → F'\nk' : α → G'\nl : Filter α\nh : Asymptotics.IsBigOWith c l f g'\nhc : LE.le 0 c\n⊢ Asymptotics.IsBigOWith c l f fun x => { fst := g' x, snd := k' x }","decl":"theorem IsBigOWith.prod_rightl (h : IsBigOWith c l f g') (hc : 0 ≤ c) :\n    IsBigOWith c l f fun x => (g' x, k' x) :=\n  (h.trans isBigOWith_fst_prod hc).congr_const (mul_one c)\n\n"}
{"name":"Asymptotics.IsBigO.prod_rightl","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\nG' : Type u_8\ninst✝² : Norm E\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf : α → E\ng' : α → F'\nk' : α → G'\nl : Filter α\nh : Asymptotics.IsBigO l f g'\n⊢ Asymptotics.IsBigO l f fun x => { fst := g' x, snd := k' x }","decl":"theorem IsBigO.prod_rightl (h : f =O[l] g') : f =O[l] fun x => (g' x, k' x) :=\n  let ⟨_c, cnonneg, hc⟩ := h.exists_nonneg\n  (hc.prod_rightl k' cnonneg).isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.prod_rightl","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF' : Type u_7\nG' : Type u_8\ninst✝² : Norm E\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf : α → E\ng' : α → F'\nk' : α → G'\nl : Filter α\nh : Asymptotics.IsLittleO l f g'\n⊢ Asymptotics.IsLittleO l f fun x => { fst := g' x, snd := k' x }","decl":"theorem IsLittleO.prod_rightl (h : f =o[l] g') : f =o[l] fun x => (g' x, k' x) :=\n  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).prod_rightl k' cpos.le\n\n"}
{"name":"Asymptotics.IsBigOWith.prod_rightr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nE' : Type u_6\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nc : Real\nf : α → E\nf' : α → E'\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigOWith c l f g'\nhc : LE.le 0 c\n⊢ Asymptotics.IsBigOWith c l f fun x => { fst := f' x, snd := g' x }","decl":"theorem IsBigOWith.prod_rightr (h : IsBigOWith c l f g') (hc : 0 ≤ c) :\n    IsBigOWith c l f fun x => (f' x, g' x) :=\n  (h.trans isBigOWith_snd_prod hc).congr_const (mul_one c)\n\n"}
{"name":"Asymptotics.IsBigO.prod_rightr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nE' : Type u_6\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\nf' : α → E'\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsBigO l f g'\n⊢ Asymptotics.IsBigO l f fun x => { fst := f' x, snd := g' x }","decl":"theorem IsBigO.prod_rightr (h : f =O[l] g') : f =O[l] fun x => (f' x, g' x) :=\n  let ⟨_c, cnonneg, hc⟩ := h.exists_nonneg\n  (hc.prod_rightr f' cnonneg).isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.prod_rightr","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nE' : Type u_6\nF' : Type u_7\ninst✝² : Norm E\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf : α → E\nf' : α → E'\ng' : α → F'\nl : Filter α\nh : Asymptotics.IsLittleO l f g'\n⊢ Asymptotics.IsLittleO l f fun x => { fst := f' x, snd := g' x }","decl":"theorem IsLittleO.prod_rightr (h : f =o[l] g') : f =o[l] fun x => (f' x, g' x) :=\n  IsLittleO.of_isBigOWith fun _c cpos => (h.forall_isBigOWith cpos).prod_rightr f' cpos.le\n\n"}
{"name":"Asymptotics.IsBigO.fiberwise_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf : Prod α β → E\ng : Prod α β → F\nl' : Filter β\na✝ : Asymptotics.IsBigO (SProd.sprod l l') f g\n⊢ Filter.Eventually (fun a => Asymptotics.IsBigO l' (fun x => f { fst := a, snd := x }) fun x => g { fst := a, snd := x }) l","decl":"protected theorem IsBigO.fiberwise_right :\n    f =O[l ×ˢ l'] g → ∀ᶠ a in l, (f ⟨a, ·⟩) =O[l'] (g ⟨a, ·⟩) := by\n  simp only [isBigO_iff, eventually_iff, mem_prod_iff]\n  rintro ⟨c, t₁, ht₁, t₂, ht₂, ht⟩\n  exact mem_of_superset ht₁ fun _ ha ↦ ⟨c, mem_of_superset ht₂ fun _ hb ↦ ht ⟨ha, hb⟩⟩\n\n"}
{"name":"Asymptotics.IsBigO.fiberwise_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nl : Filter α\nf : Prod α β → E\ng : Prod α β → F\nl' : Filter β\na✝ : Asymptotics.IsBigO (SProd.sprod l l') f g\n⊢ Filter.Eventually (fun b => Asymptotics.IsBigO l (fun x => f { fst := x, snd := b }) fun x => g { fst := x, snd := b }) l'","decl":"protected theorem IsBigO.fiberwise_left :\n    f =O[l ×ˢ l'] g → ∀ᶠ b in l', (f ⟨·, b⟩) =O[l] (g ⟨·, b⟩) := by\n  simp only [isBigO_iff, eventually_iff, mem_prod_iff]\n  rintro ⟨c, t₁, ht₁, t₂, ht₂, ht⟩\n  exact mem_of_superset ht₂ fun _ hb ↦ ⟨c, mem_of_superset ht₁ fun _ ha ↦ ht ⟨ha, hb⟩⟩\n\n"}
{"name":"Asymptotics.IsBigO.comp_fst","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nl' : Filter β\na✝ : Asymptotics.IsBigO l f g\n⊢ Asymptotics.IsBigO (SProd.sprod l l') (Function.comp f Prod.fst) (Function.comp g Prod.fst)","decl":"protected theorem IsBigO.comp_fst : f =O[l] g → (f ∘ Prod.fst) =O[l ×ˢ l'] (g ∘ Prod.fst) := by\n  simp only [isBigO_iff, eventually_prod_iff]\n  exact fun ⟨c, hc⟩ ↦ ⟨c, _, hc, fun _ ↦ True, eventually_true l', fun {_} h {_} _ ↦ h⟩\n\n"}
{"name":"Asymptotics.IsBigO.comp_snd","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nl' : Filter β\na✝ : Asymptotics.IsBigO l f g\n⊢ Asymptotics.IsBigO (SProd.sprod l' l) (Function.comp f Prod.snd) (Function.comp g Prod.snd)","decl":"protected theorem IsBigO.comp_snd : f =O[l] g → (f ∘ Prod.snd) =O[l' ×ˢ l] (g ∘ Prod.snd) := by\n  simp only [isBigO_iff, eventually_prod_iff]\n  exact fun ⟨c, hc⟩ ↦ ⟨c, fun _ ↦ True, eventually_true l', _, hc, fun _ ↦ id⟩\n\n"}
{"name":"Asymptotics.IsLittleO.comp_fst","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nl' : Filter β\na✝ : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsLittleO (SProd.sprod l l') (Function.comp f Prod.fst) (Function.comp g Prod.fst)","decl":"protected theorem IsLittleO.comp_fst : f =o[l] g → (f ∘ Prod.fst) =o[l ×ˢ l'] (g ∘ Prod.fst) := by\n  simp only [isLittleO_iff, eventually_prod_iff]\n  exact fun h _ hc ↦ ⟨_, h hc, fun _ ↦ True, eventually_true l', fun {_} h {_} _ ↦ h⟩\n\n"}
{"name":"Asymptotics.IsLittleO.comp_snd","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝¹ : Norm E\ninst✝ : Norm F\nf : α → E\ng : α → F\nl : Filter α\nl' : Filter β\na✝ : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsLittleO (SProd.sprod l' l) (Function.comp f Prod.snd) (Function.comp g Prod.snd)","decl":"protected theorem IsLittleO.comp_snd : f =o[l] g → (f ∘ Prod.snd) =o[l' ×ˢ l] (g ∘ Prod.snd) := by\n  simp only [isLittleO_iff, eventually_prod_iff]\n  exact fun h _ hc ↦ ⟨fun _ ↦ True, eventually_true l', _, h hc, fun _ ↦ id⟩\n\n"}
{"name":"Asymptotics.IsBigOWith.prod_left_same","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nc : Real\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\nhf : Asymptotics.IsBigOWith c l f' k'\nhg : Asymptotics.IsBigOWith c l g' k'\n⊢ Asymptotics.IsBigOWith c l (fun x => { fst := f' x, snd := g' x }) k'","decl":"theorem IsBigOWith.prod_left_same (hf : IsBigOWith c l f' k') (hg : IsBigOWith c l g' k') :\n    IsBigOWith c l (fun x => (f' x, g' x)) k' := by\n  rw [isBigOWith_iff] at *; filter_upwards [hf, hg] with x using max_le\n\n"}
{"name":"Asymptotics.IsBigOWith.prod_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nc c' : Real\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\nhf : Asymptotics.IsBigOWith c l f' k'\nhg : Asymptotics.IsBigOWith c' l g' k'\n⊢ Asymptotics.IsBigOWith (Max.max c c') l (fun x => { fst := f' x, snd := g' x }) k'","decl":"theorem IsBigOWith.prod_left (hf : IsBigOWith c l f' k') (hg : IsBigOWith c' l g' k') :\n    IsBigOWith (max c c') l (fun x => (f' x, g' x)) k' :=\n  (hf.weaken <| le_max_left c c').prod_left_same (hg.weaken <| le_max_right c c')\n\n"}
{"name":"Asymptotics.IsBigOWith.prod_left_fst","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nc : Real\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\nh : Asymptotics.IsBigOWith c l (fun x => { fst := f' x, snd := g' x }) k'\n⊢ Asymptotics.IsBigOWith c l f' k'","decl":"theorem IsBigOWith.prod_left_fst (h : IsBigOWith c l (fun x => (f' x, g' x)) k') :\n    IsBigOWith c l f' k' :=\n  (isBigOWith_fst_prod.trans h zero_le_one).congr_const <| one_mul c\n\n"}
{"name":"Asymptotics.IsBigOWith.prod_left_snd","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nc : Real\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\nh : Asymptotics.IsBigOWith c l (fun x => { fst := f' x, snd := g' x }) k'\n⊢ Asymptotics.IsBigOWith c l g' k'","decl":"theorem IsBigOWith.prod_left_snd (h : IsBigOWith c l (fun x => (f' x, g' x)) k') :\n    IsBigOWith c l g' k' :=\n  (isBigOWith_snd_prod.trans h zero_le_one).congr_const <| one_mul c\n\n"}
{"name":"Asymptotics.isBigOWith_prod_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nc : Real\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => { fst := f' x, snd := g' x }) k') (And (Asymptotics.IsBigOWith c l f' k') (Asymptotics.IsBigOWith c l g' k'))","decl":"theorem isBigOWith_prod_left :\n    IsBigOWith c l (fun x => (f' x, g' x)) k' ↔ IsBigOWith c l f' k' ∧ IsBigOWith c l g' k' :=\n  ⟨fun h => ⟨h.prod_left_fst, h.prod_left_snd⟩, fun h => h.1.prod_left_same h.2⟩\n\n"}
{"name":"Asymptotics.IsBigO.prod_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\nhf : Asymptotics.IsBigO l f' k'\nhg : Asymptotics.IsBigO l g' k'\n⊢ Asymptotics.IsBigO l (fun x => { fst := f' x, snd := g' x }) k'","decl":"theorem IsBigO.prod_left (hf : f' =O[l] k') (hg : g' =O[l] k') : (fun x => (f' x, g' x)) =O[l] k' :=\n  let ⟨_c, hf⟩ := hf.isBigOWith\n  let ⟨_c', hg⟩ := hg.isBigOWith\n  (hf.prod_left hg).isBigO\n\n"}
{"name":"Asymptotics.IsBigO.prod_left_fst","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\na✝ : Asymptotics.IsBigO l (fun x => { fst := f' x, snd := g' x }) k'\n⊢ Asymptotics.IsBigO l f' k'","decl":"theorem IsBigO.prod_left_fst : (fun x => (f' x, g' x)) =O[l] k' → f' =O[l] k' :=\n  IsBigO.trans isBigO_fst_prod\n\n"}
{"name":"Asymptotics.IsBigO.prod_left_snd","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\na✝ : Asymptotics.IsBigO l (fun x => { fst := f' x, snd := g' x }) k'\n⊢ Asymptotics.IsBigO l g' k'","decl":"theorem IsBigO.prod_left_snd : (fun x => (f' x, g' x)) =O[l] k' → g' =O[l] k' :=\n  IsBigO.trans isBigO_snd_prod\n\n"}
{"name":"Asymptotics.isBigO_prod_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l (fun x => { fst := f' x, snd := g' x }) k') (And (Asymptotics.IsBigO l f' k') (Asymptotics.IsBigO l g' k'))","decl":"@[simp]\ntheorem isBigO_prod_left : (fun x => (f' x, g' x)) =O[l] k' ↔ f' =O[l] k' ∧ g' =O[l] k' :=\n  ⟨fun h => ⟨h.prod_left_fst, h.prod_left_snd⟩, fun h => h.1.prod_left h.2⟩\n\n"}
{"name":"Asymptotics.IsLittleO.prod_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\nhf : Asymptotics.IsLittleO l f' k'\nhg : Asymptotics.IsLittleO l g' k'\n⊢ Asymptotics.IsLittleO l (fun x => { fst := f' x, snd := g' x }) k'","decl":"theorem IsLittleO.prod_left (hf : f' =o[l] k') (hg : g' =o[l] k') :\n    (fun x => (f' x, g' x)) =o[l] k' :=\n  IsLittleO.of_isBigOWith fun _c hc =>\n    (hf.forall_isBigOWith hc).prod_left_same (hg.forall_isBigOWith hc)\n\n"}
{"name":"Asymptotics.IsLittleO.prod_left_fst","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\na✝ : Asymptotics.IsLittleO l (fun x => { fst := f' x, snd := g' x }) k'\n⊢ Asymptotics.IsLittleO l f' k'","decl":"theorem IsLittleO.prod_left_fst : (fun x => (f' x, g' x)) =o[l] k' → f' =o[l] k' :=\n  IsBigO.trans_isLittleO isBigO_fst_prod\n\n"}
{"name":"Asymptotics.IsLittleO.prod_left_snd","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\na✝ : Asymptotics.IsLittleO l (fun x => { fst := f' x, snd := g' x }) k'\n⊢ Asymptotics.IsLittleO l g' k'","decl":"theorem IsLittleO.prod_left_snd : (fun x => (f' x, g' x)) =o[l] k' → g' =o[l] k' :=\n  IsBigO.trans_isLittleO isBigO_snd_prod\n\n"}
{"name":"Asymptotics.isLittleO_prod_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\nG' : Type u_8\ninst✝² : SeminormedAddCommGroup E'\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : SeminormedAddCommGroup G'\nf' : α → E'\ng' : α → F'\nk' : α → G'\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l (fun x => { fst := f' x, snd := g' x }) k') (And (Asymptotics.IsLittleO l f' k') (Asymptotics.IsLittleO l g' k'))","decl":"@[simp]\ntheorem isLittleO_prod_left : (fun x => (f' x, g' x)) =o[l] k' ↔ f' =o[l] k' ∧ g' =o[l] k' :=\n  ⟨fun h => ⟨h.prod_left_fst, h.prod_left_snd⟩, fun h => h.1.prod_left h.2⟩\n\n"}
{"name":"Asymptotics.IsBigOWith.eq_zero_imp","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE'' : Type u_9\nF'' : Type u_10\ninst✝¹ : NormedAddCommGroup E''\ninst✝ : NormedAddCommGroup F''\nc : Real\nf'' : α → E''\ng'' : α → F''\nl : Filter α\nh : Asymptotics.IsBigOWith c l f'' g''\n⊢ Filter.Eventually (fun x => Eq (g'' x) 0 → Eq (f'' x) 0) l","decl":"theorem IsBigOWith.eq_zero_imp (h : IsBigOWith c l f'' g'') : ∀ᶠ x in l, g'' x = 0 → f'' x = 0 :=\n  Eventually.mono h.bound fun x hx hg => norm_le_zero_iff.1 <| by simpa [hg] using hx\n\n"}
{"name":"Asymptotics.IsBigO.eq_zero_imp","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE'' : Type u_9\nF'' : Type u_10\ninst✝¹ : NormedAddCommGroup E''\ninst✝ : NormedAddCommGroup F''\nf'' : α → E''\ng'' : α → F''\nl : Filter α\nh : Asymptotics.IsBigO l f'' g''\n⊢ Filter.Eventually (fun x => Eq (g'' x) 0 → Eq (f'' x) 0) l","decl":"theorem IsBigO.eq_zero_imp (h : f'' =O[l] g'') : ∀ᶠ x in l, g'' x = 0 → f'' x = 0 :=\n  let ⟨_C, hC⟩ := h.isBigOWith\n  hC.eq_zero_imp\n\n"}
{"name":"Asymptotics.IsBigOWith.add","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc₁ c₂ : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigOWith c₁ l f₁ g\nh₂ : Asymptotics.IsBigOWith c₂ l f₂ g\n⊢ Asymptotics.IsBigOWith (HAdd.hAdd c₁ c₂) l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsBigOWith.add (h₁ : IsBigOWith c₁ l f₁ g) (h₂ : IsBigOWith c₂ l f₂ g) :\n    IsBigOWith (c₁ + c₂) l (fun x => f₁ x + f₂ x) g := by\n  rw [IsBigOWith_def] at *\n  filter_upwards [h₁, h₂] with x hx₁ hx₂ using\n    calc\n      ‖f₁ x + f₂ x‖ ≤ c₁ * ‖g x‖ + c₂ * ‖g x‖ := norm_add_le_of_le hx₁ hx₂\n      _ = (c₁ + c₂) * ‖g x‖ := (add_mul _ _ _).symm\n\n"}
{"name":"Asymptotics.IsBigO.add","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigO l f₁ g\nh₂ : Asymptotics.IsBigO l f₂ g\n⊢ Asymptotics.IsBigO l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsBigO.add (h₁ : f₁ =O[l] g) (h₂ : f₂ =O[l] g) : (fun x => f₁ x + f₂ x) =O[l] g :=\n  let ⟨_c₁, hc₁⟩ := h₁.isBigOWith\n  let ⟨_c₂, hc₂⟩ := h₂.isBigOWith\n  (hc₁.add hc₂).isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.add","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsLittleO l f₁ g\nh₂ : Asymptotics.IsLittleO l f₂ g\n⊢ Asymptotics.IsLittleO l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsLittleO.add (h₁ : f₁ =o[l] g) (h₂ : f₂ =o[l] g) : (fun x => f₁ x + f₂ x) =o[l] g :=\n  IsLittleO.of_isBigOWith fun c cpos =>\n    ((h₁.forall_isBigOWith <| half_pos cpos).add (h₂.forall_isBigOWith <|\n      half_pos cpos)).congr_const (add_halves c)\n\n"}
{"name":"Asymptotics.IsLittleO.add_add","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nl : Filter α\nf₁ f₂ : α → E'\ng₁ g₂ : α → F'\nh₁ : Asymptotics.IsLittleO l f₁ g₁\nh₂ : Asymptotics.IsLittleO l f₂ g₂\n⊢ Asymptotics.IsLittleO l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) fun x => HAdd.hAdd (Norm.norm (g₁ x)) (Norm.norm (g₂ x))","decl":"theorem IsLittleO.add_add (h₁ : f₁ =o[l] g₁) (h₂ : f₂ =o[l] g₂) :\n    (fun x => f₁ x + f₂ x) =o[l] fun x => ‖g₁ x‖ + ‖g₂ x‖ := by\n  refine (h₁.trans_le fun x => ?_).add (h₂.trans_le ?_) <;> simp [abs_of_nonneg, add_nonneg]\n\n"}
{"name":"Asymptotics.IsBigO.add_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigO l f₁ g\nh₂ : Asymptotics.IsLittleO l f₂ g\n⊢ Asymptotics.IsBigO l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsBigO.add_isLittleO (h₁ : f₁ =O[l] g) (h₂ : f₂ =o[l] g) : (fun x => f₁ x + f₂ x) =O[l] g :=\n  h₁.add h₂.isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.add_isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsLittleO l f₁ g\nh₂ : Asymptotics.IsBigO l f₂ g\n⊢ Asymptotics.IsBigO l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsLittleO.add_isBigO (h₁ : f₁ =o[l] g) (h₂ : f₂ =O[l] g) : (fun x => f₁ x + f₂ x) =O[l] g :=\n  h₁.isBigO.add h₂\n\n"}
{"name":"Asymptotics.IsBigOWith.add_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc₁ c₂ : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigOWith c₁ l f₁ g\nh₂ : Asymptotics.IsLittleO l f₂ g\nhc : LT.lt c₁ c₂\n⊢ Asymptotics.IsBigOWith c₂ l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsBigOWith.add_isLittleO (h₁ : IsBigOWith c₁ l f₁ g) (h₂ : f₂ =o[l] g) (hc : c₁ < c₂) :\n    IsBigOWith c₂ l (fun x => f₁ x + f₂ x) g :=\n  (h₁.add (h₂.forall_isBigOWith (sub_pos.2 hc))).congr_const (add_sub_cancel _ _)\n\n"}
{"name":"Asymptotics.IsLittleO.add_isBigOWith","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc₁ c₂ : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsLittleO l f₁ g\nh₂ : Asymptotics.IsBigOWith c₁ l f₂ g\nhc : LT.lt c₁ c₂\n⊢ Asymptotics.IsBigOWith c₂ l (fun x => HAdd.hAdd (f₁ x) (f₂ x)) g","decl":"theorem IsLittleO.add_isBigOWith (h₁ : f₁ =o[l] g) (h₂ : IsBigOWith c₁ l f₂ g) (hc : c₁ < c₂) :\n    IsBigOWith c₂ l (fun x => f₁ x + f₂ x) g :=\n  (h₂.add_isLittleO h₁ hc).congr_left fun _ => add_comm _ _\n\n"}
{"name":"Asymptotics.IsBigOWith.sub","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc₁ c₂ : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigOWith c₁ l f₁ g\nh₂ : Asymptotics.IsBigOWith c₂ l f₂ g\n⊢ Asymptotics.IsBigOWith (HAdd.hAdd c₁ c₂) l (fun x => HSub.hSub (f₁ x) (f₂ x)) g","decl":"theorem IsBigOWith.sub (h₁ : IsBigOWith c₁ l f₁ g) (h₂ : IsBigOWith c₂ l f₂ g) :\n    IsBigOWith (c₁ + c₂) l (fun x => f₁ x - f₂ x) g := by\n  simpa only [sub_eq_add_neg] using h₁.add h₂.neg_left\n\n"}
{"name":"Asymptotics.IsBigOWith.sub_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc₁ c₂ : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigOWith c₁ l f₁ g\nh₂ : Asymptotics.IsLittleO l f₂ g\nhc : LT.lt c₁ c₂\n⊢ Asymptotics.IsBigOWith c₂ l (fun x => HSub.hSub (f₁ x) (f₂ x)) g","decl":"theorem IsBigOWith.sub_isLittleO (h₁ : IsBigOWith c₁ l f₁ g) (h₂ : f₂ =o[l] g) (hc : c₁ < c₂) :\n    IsBigOWith c₂ l (fun x => f₁ x - f₂ x) g := by\n  simpa only [sub_eq_add_neg] using h₁.add_isLittleO h₂.neg_left hc\n\n"}
{"name":"Asymptotics.IsBigO.sub","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsBigO l f₁ g\nh₂ : Asymptotics.IsBigO l f₂ g\n⊢ Asymptotics.IsBigO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g","decl":"theorem IsBigO.sub (h₁ : f₁ =O[l] g) (h₂ : f₂ =O[l] g) : (fun x => f₁ x - f₂ x) =O[l] g := by\n  simpa only [sub_eq_add_neg] using h₁.add h₂.neg_left\n\n"}
{"name":"Asymptotics.IsLittleO.sub","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh₁ : Asymptotics.IsLittleO l f₁ g\nh₂ : Asymptotics.IsLittleO l f₂ g\n⊢ Asymptotics.IsLittleO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g","decl":"theorem IsLittleO.sub (h₁ : f₁ =o[l] g) (h₂ : f₂ =o[l] g) : (fun x => f₁ x - f₂ x) =o[l] g := by\n  simpa only [sub_eq_add_neg] using h₁.add h₂.neg_left\n\n"}
{"name":"Asymptotics.IsBigOWith.symm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh : Asymptotics.IsBigOWith c l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\n⊢ Asymptotics.IsBigOWith c l (fun x => HSub.hSub (f₂ x) (f₁ x)) g","decl":"theorem IsBigOWith.symm (h : IsBigOWith c l (fun x => f₁ x - f₂ x) g) :\n    IsBigOWith c l (fun x => f₂ x - f₁ x) g :=\n  h.neg_left.congr_left fun _x => neg_sub _ _\n\n"}
{"name":"Asymptotics.isBigOWith_comm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc : Real\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\n⊢ Iff (Asymptotics.IsBigOWith c l (fun x => HSub.hSub (f₁ x) (f₂ x)) g) (Asymptotics.IsBigOWith c l (fun x => HSub.hSub (f₂ x) (f₁ x)) g)","decl":"theorem isBigOWith_comm :\n    IsBigOWith c l (fun x => f₁ x - f₂ x) g ↔ IsBigOWith c l (fun x => f₂ x - f₁ x) g :=\n  ⟨IsBigOWith.symm, IsBigOWith.symm⟩\n\n"}
{"name":"Asymptotics.IsBigO.symm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh : Asymptotics.IsBigO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\n⊢ Asymptotics.IsBigO l (fun x => HSub.hSub (f₂ x) (f₁ x)) g","decl":"theorem IsBigO.symm (h : (fun x => f₁ x - f₂ x) =O[l] g) : (fun x => f₂ x - f₁ x) =O[l] g :=\n  h.neg_left.congr_left fun _x => neg_sub _ _\n\n"}
{"name":"Asymptotics.isBigO_comm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\n⊢ Iff (Asymptotics.IsBigO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g) (Asymptotics.IsBigO l (fun x => HSub.hSub (f₂ x) (f₁ x)) g)","decl":"theorem isBigO_comm : (fun x => f₁ x - f₂ x) =O[l] g ↔ (fun x => f₂ x - f₁ x) =O[l] g :=\n  ⟨IsBigO.symm, IsBigO.symm⟩\n\n"}
{"name":"Asymptotics.IsLittleO.symm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh : Asymptotics.IsLittleO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\n⊢ Asymptotics.IsLittleO l (fun x => HSub.hSub (f₂ x) (f₁ x)) g","decl":"theorem IsLittleO.symm (h : (fun x => f₁ x - f₂ x) =o[l] g) : (fun x => f₂ x - f₁ x) =o[l] g := by\n  simpa only [neg_sub] using h.neg_left\n\n"}
{"name":"Asymptotics.isLittleO_comm","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\n⊢ Iff (Asymptotics.IsLittleO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g) (Asymptotics.IsLittleO l (fun x => HSub.hSub (f₂ x) (f₁ x)) g)","decl":"theorem isLittleO_comm : (fun x => f₁ x - f₂ x) =o[l] g ↔ (fun x => f₂ x - f₁ x) =o[l] g :=\n  ⟨IsLittleO.symm, IsLittleO.symm⟩\n\n"}
{"name":"Asymptotics.IsBigOWith.triangle","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\nc c' : Real\ng : α → F\nl : Filter α\nf₁ f₂ f₃ : α → E'\nh₁ : Asymptotics.IsBigOWith c l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\nh₂ : Asymptotics.IsBigOWith c' l (fun x => HSub.hSub (f₂ x) (f₃ x)) g\n⊢ Asymptotics.IsBigOWith (HAdd.hAdd c c') l (fun x => HSub.hSub (f₁ x) (f₃ x)) g","decl":"theorem IsBigOWith.triangle (h₁ : IsBigOWith c l (fun x => f₁ x - f₂ x) g)\n    (h₂ : IsBigOWith c' l (fun x => f₂ x - f₃ x) g) :\n    IsBigOWith (c + c') l (fun x => f₁ x - f₃ x) g :=\n  (h₁.add h₂).congr_left fun _x => sub_add_sub_cancel _ _ _\n\n"}
{"name":"Asymptotics.IsBigO.triangle","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ f₃ : α → E'\nh₁ : Asymptotics.IsBigO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\nh₂ : Asymptotics.IsBigO l (fun x => HSub.hSub (f₂ x) (f₃ x)) g\n⊢ Asymptotics.IsBigO l (fun x => HSub.hSub (f₁ x) (f₃ x)) g","decl":"theorem IsBigO.triangle (h₁ : (fun x => f₁ x - f₂ x) =O[l] g)\n    (h₂ : (fun x => f₂ x - f₃ x) =O[l] g) : (fun x => f₁ x - f₃ x) =O[l] g :=\n  (h₁.add h₂).congr_left fun _x => sub_add_sub_cancel _ _ _\n\n"}
{"name":"Asymptotics.IsLittleO.triangle","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ f₃ : α → E'\nh₁ : Asymptotics.IsLittleO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\nh₂ : Asymptotics.IsLittleO l (fun x => HSub.hSub (f₂ x) (f₃ x)) g\n⊢ Asymptotics.IsLittleO l (fun x => HSub.hSub (f₁ x) (f₃ x)) g","decl":"theorem IsLittleO.triangle (h₁ : (fun x => f₁ x - f₂ x) =o[l] g)\n    (h₂ : (fun x => f₂ x - f₃ x) =o[l] g) : (fun x => f₁ x - f₃ x) =o[l] g :=\n  (h₁.add h₂).congr_left fun _x => sub_add_sub_cancel _ _ _\n\n"}
{"name":"Asymptotics.IsBigO.congr_of_sub","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh : Asymptotics.IsBigO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\n⊢ Iff (Asymptotics.IsBigO l f₁ g) (Asymptotics.IsBigO l f₂ g)","decl":"theorem IsBigO.congr_of_sub (h : (fun x => f₁ x - f₂ x) =O[l] g) : f₁ =O[l] g ↔ f₂ =O[l] g :=\n  ⟨fun h' => (h'.sub h).congr_left fun _x => sub_sub_cancel _ _, fun h' =>\n    (h.add h').congr_left fun _x => sub_add_cancel _ _⟩\n\n"}
{"name":"Asymptotics.IsLittleO.congr_of_sub","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nf₁ f₂ : α → E'\nh : Asymptotics.IsLittleO l (fun x => HSub.hSub (f₁ x) (f₂ x)) g\n⊢ Iff (Asymptotics.IsLittleO l f₁ g) (Asymptotics.IsLittleO l f₂ g)","decl":"theorem IsLittleO.congr_of_sub (h : (fun x => f₁ x - f₂ x) =o[l] g) : f₁ =o[l] g ↔ f₂ =o[l] g :=\n  ⟨fun h' => (h'.sub h).congr_left fun _x => sub_sub_cancel _ _, fun h' =>\n    (h.add h').congr_left fun _x => sub_add_cancel _ _⟩\n\n"}
{"name":"Asymptotics.isLittleO_zero","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsLittleO l (fun _x => 0) g'","decl":"theorem isLittleO_zero : (fun _x => (0 : E')) =o[l] g' :=\n  IsLittleO.of_bound fun c hc =>\n    univ_mem' fun x => by simpa using mul_nonneg hc.le (norm_nonneg <| g' x)\n\n"}
{"name":"Asymptotics.isBigOWith_zero","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nc : Real\ng' : α → F'\nl : Filter α\nhc : LE.le 0 c\n⊢ Asymptotics.IsBigOWith c l (fun _x => 0) g'","decl":"theorem isBigOWith_zero (hc : 0 ≤ c) : IsBigOWith c l (fun _x => (0 : E')) g' :=\n  IsBigOWith.of_bound <| univ_mem' fun x => by simpa using mul_nonneg hc (norm_nonneg <| g' x)\n\n"}
{"name":"Asymptotics.isBigOWith_zero'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\n⊢ Asymptotics.IsBigOWith 0 l (fun _x => 0) g","decl":"theorem isBigOWith_zero' : IsBigOWith 0 l (fun _x => (0 : E')) g :=\n  IsBigOWith.of_bound <| univ_mem' fun x => by simp\n\n"}
{"name":"Asymptotics.isBigO_zero","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\n⊢ Asymptotics.IsBigO l (fun _x => 0) g","decl":"theorem isBigO_zero : (fun _x => (0 : E')) =O[l] g :=\n  isBigO_iff_isBigOWith.2 ⟨0, isBigOWith_zero' _ _⟩\n\n"}
{"name":"Asymptotics.isBigO_refl_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsBigO l (fun x => HSub.hSub (f' x) (f' x)) g'","decl":"theorem isBigO_refl_left : (fun x => f' x - f' x) =O[l] g' :=\n  (isBigO_zero g' l).congr_left fun _x => (sub_self _).symm\n\n"}
{"name":"Asymptotics.isLittleO_refl_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\nf' : α → E'\ng' : α → F'\nl : Filter α\n⊢ Asymptotics.IsLittleO l (fun x => HSub.hSub (f' x) (f' x)) g'","decl":"theorem isLittleO_refl_left : (fun x => f' x - f' x) =o[l] g' :=\n  (isLittleO_zero g' l).congr_left fun _x => (sub_self _).symm\n\n"}
{"name":"Asymptotics.isBigOWith_zero_right_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF' : Type u_7\nE'' : Type u_9\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : NormedAddCommGroup E''\nc : Real\nf'' : α → E''\nl : Filter α\n⊢ Iff (Asymptotics.IsBigOWith c l f'' fun _x => 0) (l.EventuallyEq f'' 0)","decl":"@[simp]\ntheorem isBigOWith_zero_right_iff : (IsBigOWith c l f'' fun _x => (0 : F')) ↔ f'' =ᶠ[l] 0 := by\n  simp only [IsBigOWith_def, exists_prop, norm_zero, mul_zero,\n    norm_le_zero_iff, EventuallyEq, Pi.zero_apply]\n\n"}
{"name":"Asymptotics.isBigO_zero_right_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF' : Type u_7\nE'' : Type u_9\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : NormedAddCommGroup E''\nf'' : α → E''\nl : Filter α\n⊢ Iff (Asymptotics.IsBigO l f'' fun _x => 0) (l.EventuallyEq f'' 0)","decl":"@[simp]\ntheorem isBigO_zero_right_iff : (f'' =O[l] fun _x => (0 : F')) ↔ f'' =ᶠ[l] 0 :=\n  ⟨fun h =>\n    let ⟨_c, hc⟩ := h.isBigOWith\n    isBigOWith_zero_right_iff.1 hc,\n    fun h => (isBigOWith_zero_right_iff.2 h : IsBigOWith 1 _ _ _).isBigO⟩\n\n"}
{"name":"Asymptotics.isLittleO_zero_right_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF' : Type u_7\nE'' : Type u_9\ninst✝¹ : SeminormedAddCommGroup F'\ninst✝ : NormedAddCommGroup E''\nf'' : α → E''\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleO l f'' fun _x => 0) (l.EventuallyEq f'' 0)","decl":"@[simp]\ntheorem isLittleO_zero_right_iff : (f'' =o[l] fun _x => (0 : F')) ↔ f'' =ᶠ[l] 0 :=\n  ⟨fun h => isBigO_zero_right_iff.1 h.isBigO,\n   fun h => IsLittleO.of_isBigOWith fun _c _hc => isBigOWith_zero_right_iff.2 h⟩\n\n"}
{"name":"Asymptotics.isBigOWith_const_const","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF'' : Type u_10\ninst✝¹ : Norm E\ninst✝ : NormedAddCommGroup F''\nc : E\nc' : F''\nhc' : Ne c' 0\nl : Filter α\n⊢ Asymptotics.IsBigOWith (HDiv.hDiv (Norm.norm c) (Norm.norm c')) l (fun _x => c) fun _x => c'","decl":"theorem isBigOWith_const_const (c : E) {c' : F''} (hc' : c' ≠ 0) (l : Filter α) :\n    IsBigOWith (‖c‖ / ‖c'‖) l (fun _x : α => c) fun _x => c' := by\n  simp only [IsBigOWith_def]\n  apply univ_mem'\n  intro x\n  rw [mem_setOf, div_mul_cancel₀ _ (norm_ne_zero_iff.mpr hc')]\n\n"}
{"name":"Asymptotics.isBigO_const_const","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nF'' : Type u_10\ninst✝¹ : Norm E\ninst✝ : NormedAddCommGroup F''\nc : E\nc' : F''\nhc' : Ne c' 0\nl : Filter α\n⊢ Asymptotics.IsBigO l (fun _x => c) fun _x => c'","decl":"theorem isBigO_const_const (c : E) {c' : F''} (hc' : c' ≠ 0) (l : Filter α) :\n    (fun _x : α => c) =O[l] fun _x => c' :=\n  (isBigOWith_const_const c hc' l).isBigO\n\n"}
{"name":"Asymptotics.isBigO_const_const_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE'' : Type u_9\nF'' : Type u_10\ninst✝² : NormedAddCommGroup E''\ninst✝¹ : NormedAddCommGroup F''\nc : E''\nc' : F''\nl : Filter α\ninst✝ : l.NeBot\n⊢ Iff (Asymptotics.IsBigO l (fun _x => c) fun _x => c') (Eq c' 0 → Eq c 0)","decl":"@[simp]\ntheorem isBigO_const_const_iff {c : E''} {c' : F''} (l : Filter α) [l.NeBot] :\n    ((fun _x : α => c) =O[l] fun _x => c') ↔ c' = 0 → c = 0 := by\n  rcases eq_or_ne c' 0 with (rfl | hc')\n  · simp [EventuallyEq]\n  · simp [hc', isBigO_const_const _ hc']\n\n"}
{"name":"Asymptotics.isBigO_pure","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE'' : Type u_9\nF'' : Type u_10\ninst✝¹ : NormedAddCommGroup E''\ninst✝ : NormedAddCommGroup F''\nf'' : α → E''\ng'' : α → F''\nx : α\n⊢ Iff (Asymptotics.IsBigO (Pure.pure x) f'' g'') (Eq (g'' x) 0 → Eq (f'' x) 0)","decl":"@[simp]\ntheorem isBigO_pure {x} : f'' =O[pure x] g'' ↔ g'' x = 0 → f'' x = 0 :=\n  calc\n    f'' =O[pure x] g'' ↔ (fun _y : α => f'' x) =O[pure x] fun _ => g'' x := isBigO_congr rfl rfl\n    _ ↔ g'' x = 0 → f'' x = 0 := isBigO_const_const_iff _\n\n"}
{"name":"Asymptotics.isBigOWith_const_mul_self","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\ninst✝ : SeminormedRing R\nc : R\nf : α → R\nl : Filter α\n⊢ Asymptotics.IsBigOWith (Norm.norm c) l (fun x => HMul.hMul c (f x)) f","decl":"theorem isBigOWith_const_mul_self (c : R) (f : α → R) (l : Filter α) :\n    IsBigOWith ‖c‖ l (fun x => c * f x) f :=\n  isBigOWith_of_le' _ fun _x => norm_mul_le _ _\n\n"}
{"name":"Asymptotics.isBigO_const_mul_self","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\ninst✝ : SeminormedRing R\nc : R\nf : α → R\nl : Filter α\n⊢ Asymptotics.IsBigO l (fun x => HMul.hMul c (f x)) f","decl":"theorem isBigO_const_mul_self (c : R) (f : α → R) (l : Filter α) : (fun x => c * f x) =O[l] f :=\n  (isBigOWith_const_mul_self c f l).isBigO\n\n"}
{"name":"Asymptotics.IsBigOWith.const_mul_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nR : Type u_13\ninst✝¹ : Norm F\ninst✝ : SeminormedRing R\nc : Real\ng : α → F\nl : Filter α\nf : α → R\nh : Asymptotics.IsBigOWith c l f g\nc' : R\n⊢ Asymptotics.IsBigOWith (HMul.hMul (Norm.norm c') c) l (fun x => HMul.hMul c' (f x)) g","decl":"theorem IsBigOWith.const_mul_left {f : α → R} (h : IsBigOWith c l f g) (c' : R) :\n    IsBigOWith (‖c'‖ * c) l (fun x => c' * f x) g :=\n  (isBigOWith_const_mul_self c' f l).trans h (norm_nonneg c')\n\n"}
{"name":"Asymptotics.IsBigO.const_mul_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nR : Type u_13\ninst✝¹ : Norm F\ninst✝ : SeminormedRing R\ng : α → F\nl : Filter α\nf : α → R\nh : Asymptotics.IsBigO l f g\nc' : R\n⊢ Asymptotics.IsBigO l (fun x => HMul.hMul c' (f x)) g","decl":"theorem IsBigO.const_mul_left {f : α → R} (h : f =O[l] g) (c' : R) : (fun x => c' * f x) =O[l] g :=\n  let ⟨_c, hc⟩ := h.isBigOWith\n  (hc.const_mul_left c').isBigO\n\n"}
{"name":"Asymptotics.isBigOWith_self_const_mul'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\ninst✝ : SeminormedRing R\nu : Units R\nf : α → R\nl : Filter α\n⊢ Asymptotics.IsBigOWith (Norm.norm ↑(Inv.inv u)) l f fun x => HMul.hMul (↑u) (f x)","decl":"theorem isBigOWith_self_const_mul' (u : Rˣ) (f : α → R) (l : Filter α) :\n    IsBigOWith ‖(↑u⁻¹ : R)‖ l f fun x => ↑u * f x :=\n  (isBigOWith_const_mul_self ↑u⁻¹ (fun x ↦ ↑u * f x) l).congr_left\n    fun x ↦ u.inv_mul_cancel_left (f x)\n\n"}
{"name":"Asymptotics.isBigOWith_self_const_mul","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\ninst✝ : NormedDivisionRing 𝕜\nc : 𝕜\nhc : Ne c 0\nf : α → 𝕜\nl : Filter α\n⊢ Asymptotics.IsBigOWith (Inv.inv (Norm.norm c)) l f fun x => HMul.hMul c (f x)","decl":"theorem isBigOWith_self_const_mul (c : 𝕜) (hc : c ≠ 0) (f : α → 𝕜) (l : Filter α) :\n    IsBigOWith ‖c‖⁻¹ l f fun x => c * f x :=\n  (isBigOWith_self_const_mul' (Units.mk0 c hc) f l).congr_const <| norm_inv c\n\n"}
{"name":"Asymptotics.isBigO_self_const_mul'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\ninst✝ : SeminormedRing R\nc : R\nhc : IsUnit c\nf : α → R\nl : Filter α\n⊢ Asymptotics.IsBigO l f fun x => HMul.hMul c (f x)","decl":"theorem isBigO_self_const_mul' {c : R} (hc : IsUnit c) (f : α → R) (l : Filter α) :\n    f =O[l] fun x => c * f x :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ (isBigOWith_self_const_mul' u f l).isBigO\n\n"}
{"name":"Asymptotics.isBigO_self_const_mul","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\ninst✝ : NormedDivisionRing 𝕜\nc : 𝕜\nhc : Ne c 0\nf : α → 𝕜\nl : Filter α\n⊢ Asymptotics.IsBigO l f fun x => HMul.hMul c (f x)","decl":"theorem isBigO_self_const_mul (c : 𝕜) (hc : c ≠ 0) (f : α → 𝕜) (l : Filter α) :\n    f =O[l] fun x => c * f x :=\n  isBigO_self_const_mul' (IsUnit.mk0 c hc) f l\n\n"}
{"name":"Asymptotics.isBigO_const_mul_left_iff'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nR : Type u_13\ninst✝¹ : Norm F\ninst✝ : SeminormedRing R\ng : α → F\nl : Filter α\nf : α → R\nc : R\nhc : IsUnit c\n⊢ Iff (Asymptotics.IsBigO l (fun x => HMul.hMul c (f x)) g) (Asymptotics.IsBigO l f g)","decl":"theorem isBigO_const_mul_left_iff' {f : α → R} {c : R} (hc : IsUnit c) :\n    (fun x => c * f x) =O[l] g ↔ f =O[l] g :=\n  ⟨(isBigO_self_const_mul' hc f l).trans, fun h => h.const_mul_left c⟩\n\n"}
{"name":"Asymptotics.isBigO_const_mul_left_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\n𝕜 : Type u_15\ninst✝¹ : Norm F\ninst✝ : NormedDivisionRing 𝕜\ng : α → F\nl : Filter α\nf : α → 𝕜\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (Asymptotics.IsBigO l (fun x => HMul.hMul c (f x)) g) (Asymptotics.IsBigO l f g)","decl":"theorem isBigO_const_mul_left_iff {f : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    (fun x => c * f x) =O[l] g ↔ f =O[l] g :=\n  isBigO_const_mul_left_iff' <| IsUnit.mk0 c hc\n\n"}
{"name":"Asymptotics.IsLittleO.const_mul_left","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nR : Type u_13\ninst✝¹ : Norm F\ninst✝ : SeminormedRing R\ng : α → F\nl : Filter α\nf : α → R\nh : Asymptotics.IsLittleO l f g\nc : R\n⊢ Asymptotics.IsLittleO l (fun x => HMul.hMul c (f x)) g","decl":"theorem IsLittleO.const_mul_left {f : α → R} (h : f =o[l] g) (c : R) : (fun x => c * f x) =o[l] g :=\n  (isBigO_const_mul_self c f l).trans_isLittleO h\n\n"}
{"name":"Asymptotics.isLittleO_const_mul_left_iff'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nR : Type u_13\ninst✝¹ : Norm F\ninst✝ : SeminormedRing R\ng : α → F\nl : Filter α\nf : α → R\nc : R\nhc : IsUnit c\n⊢ Iff (Asymptotics.IsLittleO l (fun x => HMul.hMul c (f x)) g) (Asymptotics.IsLittleO l f g)","decl":"theorem isLittleO_const_mul_left_iff' {f : α → R} {c : R} (hc : IsUnit c) :\n    (fun x => c * f x) =o[l] g ↔ f =o[l] g :=\n  ⟨(isBigO_self_const_mul' hc f l).trans_isLittleO, fun h => h.const_mul_left c⟩\n\n"}
{"name":"Asymptotics.isLittleO_const_mul_left_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\n𝕜 : Type u_15\ninst✝¹ : Norm F\ninst✝ : NormedDivisionRing 𝕜\ng : α → F\nl : Filter α\nf : α → 𝕜\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (Asymptotics.IsLittleO l (fun x => HMul.hMul c (f x)) g) (Asymptotics.IsLittleO l f g)","decl":"theorem isLittleO_const_mul_left_iff {f : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    (fun x => c * f x) =o[l] g ↔ f =o[l] g :=\n  isLittleO_const_mul_left_iff' <| IsUnit.mk0 c hc\n\n"}
{"name":"Asymptotics.IsBigOWith.of_const_mul_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nc' : Real\nf : α → E\nl : Filter α\ng : α → R\nc : R\nhc' : LE.le 0 c'\nh : Asymptotics.IsBigOWith c' l f fun x => HMul.hMul c (g x)\n⊢ Asymptotics.IsBigOWith (HMul.hMul c' (Norm.norm c)) l f g","decl":"theorem IsBigOWith.of_const_mul_right {g : α → R} {c : R} (hc' : 0 ≤ c')\n    (h : IsBigOWith c' l f fun x => c * g x) : IsBigOWith (c' * ‖c‖) l f g :=\n  h.trans (isBigOWith_const_mul_self c g l) hc'\n\n"}
{"name":"Asymptotics.IsBigO.of_const_mul_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nc : R\nh : Asymptotics.IsBigO l f fun x => HMul.hMul c (g x)\n⊢ Asymptotics.IsBigO l f g","decl":"theorem IsBigO.of_const_mul_right {g : α → R} {c : R} (h : f =O[l] fun x => c * g x) : f =O[l] g :=\n  let ⟨_c, cnonneg, hc⟩ := h.exists_nonneg\n  (hc.of_const_mul_right cnonneg).isBigO\n\n"}
{"name":"Asymptotics.IsBigOWith.const_mul_right'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nu : Units R\nc' : Real\nhc' : LE.le 0 c'\nh : Asymptotics.IsBigOWith c' l f g\n⊢ Asymptotics.IsBigOWith (HMul.hMul c' (Norm.norm ↑(Inv.inv u))) l f fun x => HMul.hMul (↑u) (g x)","decl":"theorem IsBigOWith.const_mul_right' {g : α → R} {u : Rˣ} {c' : ℝ} (hc' : 0 ≤ c')\n    (h : IsBigOWith c' l f g) : IsBigOWith (c' * ‖(↑u⁻¹ : R)‖) l f fun x => ↑u * g x :=\n  h.trans (isBigOWith_self_const_mul' _ _ _) hc'\n\n"}
{"name":"Asymptotics.IsBigOWith.const_mul_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_15\ninst✝¹ : Norm E\ninst✝ : NormedDivisionRing 𝕜\nf : α → E\nl : Filter α\ng : α → 𝕜\nc : 𝕜\nhc : Ne c 0\nc' : Real\nhc' : LE.le 0 c'\nh : Asymptotics.IsBigOWith c' l f g\n⊢ Asymptotics.IsBigOWith (HMul.hMul c' (Inv.inv (Norm.norm c))) l f fun x => HMul.hMul c (g x)","decl":"theorem IsBigOWith.const_mul_right {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) {c' : ℝ} (hc' : 0 ≤ c')\n    (h : IsBigOWith c' l f g) : IsBigOWith (c' * ‖c‖⁻¹) l f fun x => c * g x :=\n  h.trans (isBigOWith_self_const_mul c hc g l) hc'\n\n"}
{"name":"Asymptotics.IsBigO.const_mul_right'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nc : R\nhc : IsUnit c\nh : Asymptotics.IsBigO l f g\n⊢ Asymptotics.IsBigO l f fun x => HMul.hMul c (g x)","decl":"theorem IsBigO.const_mul_right' {g : α → R} {c : R} (hc : IsUnit c) (h : f =O[l] g) :\n    f =O[l] fun x => c * g x :=\n  h.trans (isBigO_self_const_mul' hc g l)\n\n"}
{"name":"Asymptotics.IsBigO.const_mul_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_15\ninst✝¹ : Norm E\ninst✝ : NormedDivisionRing 𝕜\nf : α → E\nl : Filter α\ng : α → 𝕜\nc : 𝕜\nhc : Ne c 0\nh : Asymptotics.IsBigO l f g\n⊢ Asymptotics.IsBigO l f fun x => HMul.hMul c (g x)","decl":"theorem IsBigO.const_mul_right {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) (h : f =O[l] g) :\n    f =O[l] fun x => c * g x :=\n  h.const_mul_right' <| IsUnit.mk0 c hc\n\n"}
{"name":"Asymptotics.isBigO_const_mul_right_iff'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nc : R\nhc : IsUnit c\n⊢ Iff (Asymptotics.IsBigO l f fun x => HMul.hMul c (g x)) (Asymptotics.IsBigO l f g)","decl":"theorem isBigO_const_mul_right_iff' {g : α → R} {c : R} (hc : IsUnit c) :\n    (f =O[l] fun x => c * g x) ↔ f =O[l] g :=\n  ⟨fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc⟩\n\n"}
{"name":"Asymptotics.isBigO_const_mul_right_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_15\ninst✝¹ : Norm E\ninst✝ : NormedDivisionRing 𝕜\nf : α → E\nl : Filter α\ng : α → 𝕜\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (Asymptotics.IsBigO l f fun x => HMul.hMul c (g x)) (Asymptotics.IsBigO l f g)","decl":"theorem isBigO_const_mul_right_iff {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    (f =O[l] fun x => c * g x) ↔ f =O[l] g :=\n  isBigO_const_mul_right_iff' <| IsUnit.mk0 c hc\n\n"}
{"name":"Asymptotics.IsLittleO.of_const_mul_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nc : R\nh : Asymptotics.IsLittleO l f fun x => HMul.hMul c (g x)\n⊢ Asymptotics.IsLittleO l f g","decl":"theorem IsLittleO.of_const_mul_right {g : α → R} {c : R} (h : f =o[l] fun x => c * g x) :\n    f =o[l] g :=\n  h.trans_isBigO (isBigO_const_mul_self c g l)\n\n"}
{"name":"Asymptotics.IsLittleO.const_mul_right'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nc : R\nhc : IsUnit c\nh : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsLittleO l f fun x => HMul.hMul c (g x)","decl":"theorem IsLittleO.const_mul_right' {g : α → R} {c : R} (hc : IsUnit c) (h : f =o[l] g) :\n    f =o[l] fun x => c * g x :=\n  h.trans_isBigO (isBigO_self_const_mul' hc g l)\n\n"}
{"name":"Asymptotics.IsLittleO.const_mul_right","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_15\ninst✝¹ : Norm E\ninst✝ : NormedDivisionRing 𝕜\nf : α → E\nl : Filter α\ng : α → 𝕜\nc : 𝕜\nhc : Ne c 0\nh : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsLittleO l f fun x => HMul.hMul c (g x)","decl":"theorem IsLittleO.const_mul_right {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) (h : f =o[l] g) :\n    f =o[l] fun x => c * g x :=\n  h.const_mul_right' <| IsUnit.mk0 c hc\n\n"}
{"name":"Asymptotics.isLittleO_const_mul_right_iff'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\nR : Type u_13\ninst✝¹ : Norm E\ninst✝ : SeminormedRing R\nf : α → E\nl : Filter α\ng : α → R\nc : R\nhc : IsUnit c\n⊢ Iff (Asymptotics.IsLittleO l f fun x => HMul.hMul c (g x)) (Asymptotics.IsLittleO l f g)","decl":"theorem isLittleO_const_mul_right_iff' {g : α → R} {c : R} (hc : IsUnit c) :\n    (f =o[l] fun x => c * g x) ↔ f =o[l] g :=\n  ⟨fun h => h.of_const_mul_right, fun h => h.const_mul_right' hc⟩\n\n"}
{"name":"Asymptotics.isLittleO_const_mul_right_iff","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE : Type u_3\n𝕜 : Type u_15\ninst✝¹ : Norm E\ninst✝ : NormedDivisionRing 𝕜\nf : α → E\nl : Filter α\ng : α → 𝕜\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (Asymptotics.IsLittleO l f fun x => HMul.hMul c (g x)) (Asymptotics.IsLittleO l f g)","decl":"theorem isLittleO_const_mul_right_iff {g : α → 𝕜} {c : 𝕜} (hc : c ≠ 0) :\n    (f =o[l] fun x => c * g x) ↔ f =o[l] g :=\n  isLittleO_const_mul_right_iff' <| IsUnit.mk0 c hc\n\n"}
{"name":"Asymptotics.IsBigOWith.mul","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf₁ f₂ : α → R\ng₁ g₂ : α → 𝕜\nc₁ c₂ : Real\nh₁ : Asymptotics.IsBigOWith c₁ l f₁ g₁\nh₂ : Asymptotics.IsBigOWith c₂ l f₂ g₂\n⊢ Asymptotics.IsBigOWith (HMul.hMul c₁ c₂) l (fun x => HMul.hMul (f₁ x) (f₂ x)) fun x => HMul.hMul (g₁ x) (g₂ x)","decl":"theorem IsBigOWith.mul {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} {c₁ c₂ : ℝ} (h₁ : IsBigOWith c₁ l f₁ g₁)\n    (h₂ : IsBigOWith c₂ l f₂ g₂) :\n    IsBigOWith (c₁ * c₂) l (fun x => f₁ x * f₂ x) fun x => g₁ x * g₂ x := by\n  simp only [IsBigOWith_def] at *\n  filter_upwards [h₁, h₂] with _ hx₁ hx₂\n  apply le_trans (norm_mul_le _ _)\n  convert mul_le_mul hx₁ hx₂ (norm_nonneg _) (le_trans (norm_nonneg _) hx₁) using 1\n  rw [norm_mul, mul_mul_mul_comm]\n\n"}
{"name":"Asymptotics.IsBigO.mul","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf₁ f₂ : α → R\ng₁ g₂ : α → 𝕜\nh₁ : Asymptotics.IsBigO l f₁ g₁\nh₂ : Asymptotics.IsBigO l f₂ g₂\n⊢ Asymptotics.IsBigO l (fun x => HMul.hMul (f₁ x) (f₂ x)) fun x => HMul.hMul (g₁ x) (g₂ x)","decl":"theorem IsBigO.mul {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : f₁ =O[l] g₁) (h₂ : f₂ =O[l] g₂) :\n    (fun x => f₁ x * f₂ x) =O[l] fun x => g₁ x * g₂ x :=\n  let ⟨_c, hc⟩ := h₁.isBigOWith\n  let ⟨_c', hc'⟩ := h₂.isBigOWith\n  (hc.mul hc').isBigO\n\n"}
{"name":"Asymptotics.IsBigO.mul_isLittleO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf₁ f₂ : α → R\ng₁ g₂ : α → 𝕜\nh₁ : Asymptotics.IsBigO l f₁ g₁\nh₂ : Asymptotics.IsLittleO l f₂ g₂\n⊢ Asymptotics.IsLittleO l (fun x => HMul.hMul (f₁ x) (f₂ x)) fun x => HMul.hMul (g₁ x) (g₂ x)","decl":"theorem IsBigO.mul_isLittleO {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : f₁ =O[l] g₁) (h₂ : f₂ =o[l] g₂) :\n    (fun x => f₁ x * f₂ x) =o[l] fun x => g₁ x * g₂ x := by\n  simp only [IsLittleO_def] at *\n  intro c cpos\n  rcases h₁.exists_pos with ⟨c', c'pos, hc'⟩\n  exact (hc'.mul (h₂ (div_pos cpos c'pos))).congr_const (mul_div_cancel₀ _ (ne_of_gt c'pos))\n\n"}
{"name":"Asymptotics.IsLittleO.mul_isBigO","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf₁ f₂ : α → R\ng₁ g₂ : α → 𝕜\nh₁ : Asymptotics.IsLittleO l f₁ g₁\nh₂ : Asymptotics.IsBigO l f₂ g₂\n⊢ Asymptotics.IsLittleO l (fun x => HMul.hMul (f₁ x) (f₂ x)) fun x => HMul.hMul (g₁ x) (g₂ x)","decl":"theorem IsLittleO.mul_isBigO {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : f₁ =o[l] g₁) (h₂ : f₂ =O[l] g₂) :\n    (fun x => f₁ x * f₂ x) =o[l] fun x => g₁ x * g₂ x := by\n  simp only [IsLittleO_def] at *\n  intro c cpos\n  rcases h₂.exists_pos with ⟨c', c'pos, hc'⟩\n  exact ((h₁ (div_pos cpos c'pos)).mul hc').congr_const (div_mul_cancel₀ _ (ne_of_gt c'pos))\n\n"}
{"name":"Asymptotics.IsLittleO.mul","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf₁ f₂ : α → R\ng₁ g₂ : α → 𝕜\nh₁ : Asymptotics.IsLittleO l f₁ g₁\nh₂ : Asymptotics.IsLittleO l f₂ g₂\n⊢ Asymptotics.IsLittleO l (fun x => HMul.hMul (f₁ x) (f₂ x)) fun x => HMul.hMul (g₁ x) (g₂ x)","decl":"theorem IsLittleO.mul {f₁ f₂ : α → R} {g₁ g₂ : α → 𝕜} (h₁ : f₁ =o[l] g₁) (h₂ : f₂ =o[l] g₂) :\n    (fun x => f₁ x * f₂ x) =o[l] fun x => g₁ x * g₂ x :=\n  h₁.mul_isBigO h₂.isBigO\n\n"}
{"name":"Asymptotics.IsBigOWith.pow'","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nc : Real\nl : Filter α\nf : α → R\ng : α → 𝕜\nh : Asymptotics.IsBigOWith c l f g\nn : Nat\n⊢ Asymptotics.IsBigOWith (Nat.casesOn n (Norm.norm 1) fun n => HPow.hPow c (HAdd.hAdd n 1)) l (fun x => HPow.hPow (f x) n) fun x => HPow.hPow (g x) n","decl":"theorem IsBigOWith.pow' {f : α → R} {g : α → 𝕜} (h : IsBigOWith c l f g) :\n    ∀ n : ℕ, IsBigOWith (Nat.casesOn n ‖(1 : R)‖ fun n => c ^ (n + 1))\n      l (fun x => f x ^ n) fun x => g x ^ n\n  | 0 => by simpa using isBigOWith_const_const (1 : R) (one_ne_zero' 𝕜) l\n  | 1 => by simpa\n  | n + 2 => by simpa [pow_succ] using (IsBigOWith.pow' h (n + 1)).mul h\n\n"}
{"name":"Asymptotics.IsBigOWith.pow","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝² : SeminormedRing R\ninst✝¹ : NormedDivisionRing 𝕜\nc : Real\nl : Filter α\ninst✝ : NormOneClass R\nf : α → R\ng : α → 𝕜\nh : Asymptotics.IsBigOWith c l f g\nn : Nat\n⊢ Asymptotics.IsBigOWith (HPow.hPow c n) l (fun x => HPow.hPow (f x) n) fun x => HPow.hPow (g x) n","decl":"theorem IsBigOWith.pow [NormOneClass R] {f : α → R} {g : α → 𝕜} (h : IsBigOWith c l f g) :\n    ∀ n : ℕ, IsBigOWith (c ^ n) l (fun x => f x ^ n) fun x => g x ^ n\n  | 0 => by simpa using h.pow' 0\n  | n + 1 => h.pow' (n + 1)\n\n"}
{"name":"Asymptotics.IsBigOWith.of_pow","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nc c' : Real\nl : Filter α\nn : Nat\nf : α → 𝕜\ng : α → R\nh : Asymptotics.IsBigOWith c l (HPow.hPow f n) (HPow.hPow g n)\nhn : Ne n 0\nhc : LE.le c (HPow.hPow c' n)\nhc' : LE.le 0 c'\n⊢ Asymptotics.IsBigOWith c' l f g","decl":"theorem IsBigOWith.of_pow {n : ℕ} {f : α → 𝕜} {g : α → R} (h : IsBigOWith c l (f ^ n) (g ^ n))\n    (hn : n ≠ 0) (hc : c ≤ c' ^ n) (hc' : 0 ≤ c') : IsBigOWith c' l f g :=\n  IsBigOWith.of_bound <| (h.weaken hc).bound.mono fun x hx ↦\n    le_of_pow_le_pow_left₀ hn (by positivity) <|\n      calc\n        ‖f x‖ ^ n = ‖f x ^ n‖ := (norm_pow _ _).symm\n        _ ≤ c' ^ n * ‖g x ^ n‖ := hx\n        _ ≤ c' ^ n * ‖g x‖ ^ n := by gcongr; exact norm_pow_le' _ hn.bot_lt\n        _ = (c' * ‖g x‖) ^ n := (mul_pow _ _ _).symm\n\n"}
{"name":"Asymptotics.IsBigO.pow","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf : α → R\ng : α → 𝕜\nh : Asymptotics.IsBigO l f g\nn : Nat\n⊢ Asymptotics.IsBigO l (fun x => HPow.hPow (f x) n) fun x => HPow.hPow (g x) n","decl":"theorem IsBigO.pow {f : α → R} {g : α → 𝕜} (h : f =O[l] g) (n : ℕ) :\n    (fun x => f x ^ n) =O[l] fun x => g x ^ n :=\n  let ⟨_C, hC⟩ := h.isBigOWith\n  isBigO_iff_isBigOWith.2 ⟨_, hC.pow' n⟩\n\n"}
{"name":"Asymptotics.IsLittleO.pow","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf : α → R\ng : α → 𝕜\nh : Asymptotics.IsLittleO l f g\nn : Nat\nhn : LT.lt 0 n\n⊢ Asymptotics.IsLittleO l (fun x => HPow.hPow (f x) n) fun x => HPow.hPow (g x) n","decl":"theorem IsLittleO.pow {f : α → R} {g : α → 𝕜} (h : f =o[l] g) {n : ℕ} (hn : 0 < n) :\n    (fun x => f x ^ n) =o[l] fun x => g x ^ n := by\n  obtain ⟨n, rfl⟩ := Nat.exists_eq_succ_of_ne_zero hn.ne'; clear hn\n  induction n with\n  | zero => simpa only [pow_one]\n  | succ n ihn => convert ihn.mul h <;> simp [pow_succ]\n\n"}
{"name":"Asymptotics.IsLittleO.of_pow","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nR : Type u_13\n𝕜 : Type u_15\ninst✝¹ : SeminormedRing R\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nf : α → 𝕜\ng : α → R\nn : Nat\nh : Asymptotics.IsLittleO l (HPow.hPow f n) (HPow.hPow g n)\nhn : Ne n 0\n⊢ Asymptotics.IsLittleO l f g","decl":"theorem IsLittleO.of_pow {f : α → 𝕜} {g : α → R} {n : ℕ} (h : (f ^ n) =o[l] (g ^ n)) (hn : n ≠ 0) :\n    f =o[l] g :=\n  IsLittleO.of_isBigOWith fun _c hc => (h.def' <| pow_pos hc _).of_pow hn le_rfl hc.le\n\n"}
{"name":"Asymptotics.IsBigOWith.inv_rev","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\n𝕜' : Type u_16\ninst✝¹ : NormedDivisionRing 𝕜\ninst✝ : NormedDivisionRing 𝕜'\nc : Real\nl : Filter α\nf : α → 𝕜\ng : α → 𝕜'\nh : Asymptotics.IsBigOWith c l f g\nh₀ : Filter.Eventually (fun x => Eq (f x) 0 → Eq (g x) 0) l\n⊢ Asymptotics.IsBigOWith c l (fun x => Inv.inv (g x)) fun x => Inv.inv (f x)","decl":"theorem IsBigOWith.inv_rev {f : α → 𝕜} {g : α → 𝕜'} (h : IsBigOWith c l f g)\n    (h₀ : ∀ᶠ x in l, f x = 0 → g x = 0) : IsBigOWith c l (fun x => (g x)⁻¹) fun x => (f x)⁻¹ := by\n  refine IsBigOWith.of_bound (h.bound.mp (h₀.mono fun x h₀ hle => ?_))\n  rcases eq_or_ne (f x) 0 with hx | hx\n  · simp only [hx, h₀ hx, inv_zero, norm_zero, mul_zero, le_rfl]\n  · have hc : 0 < c := pos_of_mul_pos_left ((norm_pos_iff.2 hx).trans_le hle) (norm_nonneg _)\n    replace hle := inv_anti₀ (norm_pos_iff.2 hx) hle\n    simpa only [norm_inv, mul_inv, ← div_eq_inv_mul, div_le_iff₀ hc] using hle\n\n"}
{"name":"Asymptotics.IsBigO.inv_rev","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\n𝕜' : Type u_16\ninst✝¹ : NormedDivisionRing 𝕜\ninst✝ : NormedDivisionRing 𝕜'\nl : Filter α\nf : α → 𝕜\ng : α → 𝕜'\nh : Asymptotics.IsBigO l f g\nh₀ : Filter.Eventually (fun x => Eq (f x) 0 → Eq (g x) 0) l\n⊢ Asymptotics.IsBigO l (fun x => Inv.inv (g x)) fun x => Inv.inv (f x)","decl":"theorem IsBigO.inv_rev {f : α → 𝕜} {g : α → 𝕜'} (h : f =O[l] g)\n    (h₀ : ∀ᶠ x in l, f x = 0 → g x = 0) : (fun x => (g x)⁻¹) =O[l] fun x => (f x)⁻¹ :=\n  let ⟨_c, hc⟩ := h.isBigOWith\n  (hc.inv_rev h₀).isBigO\n\n"}
{"name":"Asymptotics.IsLittleO.inv_rev","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\n𝕜' : Type u_16\ninst✝¹ : NormedDivisionRing 𝕜\ninst✝ : NormedDivisionRing 𝕜'\nl : Filter α\nf : α → 𝕜\ng : α → 𝕜'\nh : Asymptotics.IsLittleO l f g\nh₀ : Filter.Eventually (fun x => Eq (f x) 0 → Eq (g x) 0) l\n⊢ Asymptotics.IsLittleO l (fun x => Inv.inv (g x)) fun x => Inv.inv (f x)","decl":"theorem IsLittleO.inv_rev {f : α → 𝕜} {g : α → 𝕜'} (h : f =o[l] g)\n    (h₀ : ∀ᶠ x in l, f x = 0 → g x = 0) : (fun x => (g x)⁻¹) =o[l] fun x => (f x)⁻¹ :=\n  IsLittleO.of_isBigOWith fun _c hc => (h.def' hc).inv_rev h₀\n\n"}
{"name":"Asymptotics.IsBigOWith.sum","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nι : Type u_17\nA : ι → α → E'\nC : ι → Real\ns : Finset ι\nh : ∀ (i : ι), Membership.mem s i → Asymptotics.IsBigOWith (C i) l (A i) g\n⊢ Asymptotics.IsBigOWith (s.sum fun i => C i) l (fun x => s.sum fun i => A i x) g","decl":"theorem IsBigOWith.sum (h : ∀ i ∈ s, IsBigOWith (C i) l (A i) g) :\n    IsBigOWith (∑ i ∈ s, C i) l (fun x => ∑ i ∈ s, A i x) g := by\n  induction s using Finset.cons_induction with\n  | empty => simp only [isBigOWith_zero', Finset.sum_empty, forall_true_iff]\n  | cons i s is IH =>\n    simp only [is, Finset.sum_cons, Finset.forall_mem_cons] at h ⊢\n    exact h.1.add (IH h.2)\n\n"}
{"name":"Asymptotics.IsBigO.sum","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nF : Type u_4\nE' : Type u_6\ninst✝¹ : Norm F\ninst✝ : SeminormedAddCommGroup E'\ng : α → F\nl : Filter α\nι : Type u_17\nA : ι → α → E'\ns : Finset ι\nh : ∀ (i : ι), Membership.mem s i → Asymptotics.IsBigO l (A i) g\n⊢ Asymptotics.IsBigO l (fun x => s.sum fun i => A i x) g","decl":"theorem IsBigO.sum (h : ∀ i ∈ s, A i =O[l] g) : (fun x => ∑ i ∈ s, A i x) =O[l] g := by\n  simp only [IsBigO_def] at *\n  choose! C hC using h\n  exact ⟨_, IsBigOWith.sum hC⟩\n\n"}
{"name":"Asymptotics.IsLittleO.sum","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\nE' : Type u_6\nF' : Type u_7\ninst✝¹ : SeminormedAddCommGroup E'\ninst✝ : SeminormedAddCommGroup F'\ng' : α → F'\nl : Filter α\nι : Type u_17\nA : ι → α → E'\ns : Finset ι\nh : ∀ (i : ι), Membership.mem s i → Asymptotics.IsLittleO l (A i) g'\n⊢ Asymptotics.IsLittleO l (fun x => s.sum fun i => A i x) g'","decl":"theorem IsLittleO.sum (h : ∀ i ∈ s, A i =o[l] g') : (fun x => ∑ i ∈ s, A i x) =o[l] g' := by\n  simp only [← Finset.sum_apply]\n  exact Finset.sum_induction A (· =o[l] g') (fun _ _ ↦ .add) (isLittleO_zero ..) h\n\n"}
{"name":"Asymptotics.IsBigOWith.eventually_mul_div_cancel","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\ninst✝ : NormedDivisionRing 𝕜\nc : Real\nl : Filter α\nu v : α → 𝕜\nh : Asymptotics.IsBigOWith c l u v\n⊢ l.EventuallyEq (HMul.hMul (HDiv.hDiv u v) v) u","decl":"theorem IsBigOWith.eventually_mul_div_cancel (h : IsBigOWith c l u v) : u / v * v =ᶠ[l] u :=\n  Eventually.mono h.bound fun y hy => div_mul_cancel_of_imp fun hv => by simpa [hv] using hy\n\n"}
{"name":"Asymptotics.IsBigO.eventually_mul_div_cancel","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nu v : α → 𝕜\nh : Asymptotics.IsBigO l u v\n⊢ l.EventuallyEq (HMul.hMul (HDiv.hDiv u v) v) u","decl":"/-- If `u = O(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem IsBigO.eventually_mul_div_cancel (h : u =O[l] v) : u / v * v =ᶠ[l] u :=\n  let ⟨_c, hc⟩ := h.isBigOWith\n  hc.eventually_mul_div_cancel\n\n"}
{"name":"Asymptotics.IsLittleO.eventually_mul_div_cancel","module":"Mathlib.Analysis.Asymptotics.Defs","initialProofState":"α : Type u_1\n𝕜 : Type u_15\ninst✝ : NormedDivisionRing 𝕜\nl : Filter α\nu v : α → 𝕜\nh : Asymptotics.IsLittleO l u v\n⊢ l.EventuallyEq (HMul.hMul (HDiv.hDiv u v) v) u","decl":"/-- If `u = o(v)` along `l`, then `(u / v) * v = u` eventually at `l`. -/\ntheorem IsLittleO.eventually_mul_div_cancel (h : u =o[l] v) : u / v * v =ᶠ[l] u :=\n  (h.forall_isBigOWith zero_lt_one).eventually_mul_div_cancel\n\n"}
