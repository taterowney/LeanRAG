{"name":"topDualPairing_apply","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : ContinuousConstSMul 𝕜 𝕜\nv : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜\nx : E\n⊢ Eq (((topDualPairing 𝕜 E) v) x) (v x)","decl":"theorem topDualPairing_apply [CommSemiring 𝕜] [TopologicalSpace 𝕜] [ContinuousAdd 𝕜]\n    [AddCommMonoid E] [Module 𝕜 E] [TopologicalSpace E] [ContinuousConstSMul 𝕜 𝕜] (v : E →L[𝕜] 𝕜)\n    (x : E) : topDualPairing 𝕜 E v x = v x :=\n  rfl\n\n"}
{"name":"WeakDual.instContinuousAdd","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ ContinuousAdd (WeakDual 𝕜 E)","decl":"instance instContinuousAdd : ContinuousAdd (WeakDual 𝕜 E) :=\n  WeakBilin.instContinuousAdd (topDualPairing 𝕜 E)\n\n"}
{"name":"WeakDual.instContinuousLinearMapClass","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ ContinuousLinearMapClass (WeakDual 𝕜 E) 𝕜 E 𝕜","decl":"instance instContinuousLinearMapClass : ContinuousLinearMapClass (WeakDual 𝕜 E) 𝕜 E 𝕜 :=\n  ContinuousLinearMap.continuousSemilinearMapClass\n\n"}
{"name":"WeakDual.instContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝¹⁰ : CommSemiring 𝕜\ninst✝⁹ : TopologicalSpace 𝕜\ninst✝⁸ : ContinuousAdd 𝕜\ninst✝⁷ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁶ : AddCommMonoid E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\nM : Type u_6\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M 𝕜\ninst✝¹ : SMulCommClass 𝕜 M 𝕜\ninst✝ : ContinuousConstSMul M 𝕜\n⊢ ContinuousConstSMul M (WeakDual 𝕜 E)","decl":"instance instContinuousConstSMul (M) [Monoid M] [DistribMulAction M 𝕜] [SMulCommClass 𝕜 M 𝕜]\n    [ContinuousConstSMul M 𝕜] : ContinuousConstSMul M (WeakDual 𝕜 E) :=\n  ⟨fun m =>\n    continuous_induced_rng.2 <| (WeakBilin.coeFn_continuous (topDualPairing 𝕜 E)).const_smul m⟩\n\n"}
{"name":"WeakDual.instContinuousSMul","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝¹¹ : CommSemiring 𝕜\ninst✝¹⁰ : TopologicalSpace 𝕜\ninst✝⁹ : ContinuousAdd 𝕜\ninst✝⁸ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁷ : AddCommMonoid E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace E\nM : Type u_6\ninst✝⁴ : Monoid M\ninst✝³ : DistribMulAction M 𝕜\ninst✝² : SMulCommClass 𝕜 M 𝕜\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousSMul M 𝕜\n⊢ ContinuousSMul M (WeakDual 𝕜 E)","decl":"/-- If a monoid `M` distributively continuously acts on `𝕜` and this action commutes with\nmultiplication on `𝕜`, then it continuously acts on `WeakDual 𝕜 E`. -/\ninstance instContinuousSMul (M) [Monoid M] [DistribMulAction M 𝕜] [SMulCommClass 𝕜 M 𝕜]\n    [TopologicalSpace M] [ContinuousSMul M 𝕜] : ContinuousSMul M (WeakDual 𝕜 E) :=\n  ⟨continuous_induced_rng.2 <|\n      continuous_fst.smul ((WeakBilin.coeFn_continuous (topDualPairing 𝕜 E)).comp continuous_snd)⟩\n\n"}
{"name":"WeakDual.coeFn_continuous","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ Continuous fun x y => x y","decl":"theorem coeFn_continuous : Continuous fun (x : WeakDual 𝕜 E) y => x y :=\n  continuous_induced_dom\n\n"}
{"name":"WeakDual.eval_continuous","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\ny : E\n⊢ Continuous fun x => x y","decl":"theorem eval_continuous (y : E) : Continuous fun x : WeakDual 𝕜 E => x y :=\n  continuous_pi_iff.mp coeFn_continuous y\n\n"}
{"name":"WeakDual.continuous_of_continuous_eval","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"α : Type u_1\n𝕜 : Type u_2\nE : Type u_4\ninst✝⁷ : CommSemiring 𝕜\ninst✝⁶ : TopologicalSpace 𝕜\ninst✝⁵ : ContinuousAdd 𝕜\ninst✝⁴ : ContinuousConstSMul 𝕜 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalSpace α\ng : α → WeakDual 𝕜 E\nh : ∀ (y : E), Continuous fun a => (g a) y\n⊢ Continuous g","decl":"theorem continuous_of_continuous_eval [TopologicalSpace α] {g : α → WeakDual 𝕜 E}\n    (h : ∀ y, Continuous fun a => (g a) y) : Continuous g :=\n  continuous_induced_rng.2 (continuous_pi_iff.mpr h)\n\n"}
{"name":"WeakDual.instT2Space","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁷ : CommSemiring 𝕜\ninst✝⁶ : TopologicalSpace 𝕜\ninst✝⁵ : ContinuousAdd 𝕜\ninst✝⁴ : ContinuousConstSMul 𝕜 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : T2Space 𝕜\n⊢ T2Space (WeakDual 𝕜 E)","decl":"instance instT2Space [T2Space 𝕜] : T2Space (WeakDual 𝕜 E) :=\n   (WeakBilin.isEmbedding ContinuousLinearMap.coe_injective).t2Space\n\n"}
{"name":"WeakDual.instTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommRing 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : TopologicalAddGroup 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ TopologicalAddGroup (WeakDual 𝕜 E)","decl":"instance instTopologicalAddGroup : TopologicalAddGroup (WeakDual 𝕜 E) :=\n  WeakBilin.instTopologicalAddGroup (topDualPairing 𝕜 E)\n\n"}
{"name":"WeakSpace.instContinuousAdd","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ ContinuousAdd (WeakSpace 𝕜 E)","decl":"instance instContinuousAdd : ContinuousAdd (WeakSpace 𝕜 E) :=\n  WeakBilin.instContinuousAdd (topDualPairing 𝕜 E).flip\n\n"}
{"name":"WeakSpace.instIsScalarTower","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\n𝕝 : Type u_3\nE : Type u_4\ninst✝¹⁰ : CommSemiring 𝕜\ninst✝⁹ : TopologicalSpace 𝕜\ninst✝⁸ : ContinuousAdd 𝕜\ninst✝⁷ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁶ : AddCommMonoid E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : CommSemiring 𝕝\ninst✝² : Module 𝕝 𝕜\ninst✝¹ : Module 𝕝 E\ninst✝ : IsScalarTower 𝕝 𝕜 E\n⊢ IsScalarTower 𝕝 𝕜 (WeakSpace 𝕜 E)","decl":"instance instIsScalarTower [CommSemiring 𝕝] [Module 𝕝 𝕜] [Module 𝕝 E] [IsScalarTower 𝕝 𝕜 E] :\n    IsScalarTower 𝕝 𝕜 (WeakSpace 𝕜 E) :=\n  WeakBilin.instIsScalarTower (topDualPairing 𝕜 E).flip\n\n"}
{"name":"WeakSpace.map_apply","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\nF : Type u_5\ninst✝⁹ : CommSemiring 𝕜\ninst✝⁸ : TopologicalSpace 𝕜\ninst✝⁷ : ContinuousAdd 𝕜\ninst✝⁶ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁵ : AddCommMonoid E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : TopologicalSpace E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 F\ninst✝ : TopologicalSpace F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ Eq ((WeakSpace.map f) x) (f x)","decl":"theorem map_apply (f : E →L[𝕜] F) (x : E) : WeakSpace.map f x = f x :=\n  rfl\n\n"}
{"name":"WeakSpace.coe_map","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\nF : Type u_5\ninst✝⁹ : CommSemiring 𝕜\ninst✝⁸ : TopologicalSpace 𝕜\ninst✝⁷ : ContinuousAdd 𝕜\ninst✝⁶ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁵ : AddCommMonoid E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : TopologicalSpace E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 F\ninst✝ : TopologicalSpace F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\n⊢ Eq ⇑(WeakSpace.map f) ⇑f","decl":"@[simp]\ntheorem coe_map (f : E →L[𝕜] F) : (WeakSpace.map f : E → F) = f :=\n  rfl\n\n"}
{"name":"toWeakSpaceCLM_eq_toWeakSpace","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\nx : E\n⊢ Eq ((toWeakSpaceCLM 𝕜 E) x) ((toWeakSpace 𝕜 E) x)","decl":"variable (𝕜 E) in\n@[simp]\ntheorem toWeakSpaceCLM_eq_toWeakSpace (x : E) :\n    toWeakSpaceCLM 𝕜 E x = toWeakSpace 𝕜 E x := by rfl\n\n"}
{"name":"toWeakSpaceCLM_bijective","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ Function.Bijective ⇑(toWeakSpaceCLM 𝕜 E)","decl":"theorem toWeakSpaceCLM_bijective :\n    Function.Bijective (toWeakSpaceCLM 𝕜 E) :=\n  (toWeakSpace 𝕜 E).bijective\n\n"}
{"name":"isOpenMap_toWeakSpace_symm","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ IsOpenMap ⇑(toWeakSpace 𝕜 E).symm","decl":"/-- The canonical map from `WeakSpace 𝕜 E` to `E` is an open map. -/\ntheorem isOpenMap_toWeakSpace_symm : IsOpenMap (toWeakSpace 𝕜 E).symm :=\n  IsOpenMap.of_inverse (toWeakSpaceCLM 𝕜 E).cont\n    (toWeakSpace 𝕜 E).left_inv (toWeakSpace 𝕜 E).right_inv\n\n"}
{"name":"WeakSpace.isOpen_of_isOpen","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\nV : Set E\nhV : IsOpen (Set.image (⇑(toWeakSpaceCLM 𝕜 E)) V)\n⊢ IsOpen V","decl":"/-- A set in `E` which is open in the weak topology is open. -/\ntheorem WeakSpace.isOpen_of_isOpen (V : Set E)\n    (hV : IsOpen ((toWeakSpaceCLM 𝕜 E) '' V : Set (WeakSpace 𝕜 E))) : IsOpen V := by\n  simpa [Set.image_image] using isOpenMap_toWeakSpace_symm _ hV\n\n"}
{"name":"tendsto_iff_forall_eval_tendsto_topDualPairing","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"α : Type u_1\n𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\nl : Filter α\nf : α → WeakDual 𝕜 E\nx : WeakDual 𝕜 E\n⊢ Iff (Filter.Tendsto f l (nhds x)) (∀ (y : E), Filter.Tendsto (fun i => ((topDualPairing 𝕜 E) (f i)) y) l (nhds (((topDualPairing 𝕜 E) x) y)))","decl":"theorem tendsto_iff_forall_eval_tendsto_topDualPairing {l : Filter α} {f : α → WeakDual 𝕜 E}\n    {x : WeakDual 𝕜 E} :\n    Tendsto f l (𝓝 x) ↔\n      ∀ y, Tendsto (fun i => topDualPairing 𝕜 E (f i) y) l (𝓝 (topDualPairing 𝕜 E x y)) :=\n  WeakBilin.tendsto_iff_forall_eval_tendsto _ ContinuousLinearMap.coe_injective\n\n"}
{"name":"WeakSpace.instTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Module.WeakDual","initialProofState":"𝕜 : Type u_2\nE : Type u_4\ninst✝⁶ : CommRing 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : TopologicalAddGroup 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ TopologicalAddGroup (WeakSpace 𝕜 E)","decl":"instance instTopologicalAddGroup : TopologicalAddGroup (WeakSpace 𝕜 E) :=\n  WeakBilin.instTopologicalAddGroup (topDualPairing 𝕜 E).flip\n\n"}
