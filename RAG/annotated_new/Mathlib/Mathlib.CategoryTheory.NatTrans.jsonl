{"name":"CategoryTheory.NatTrans.ext_iff","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\nx y : CategoryTheory.NatTrans F G\n‚ä¢ Iff (Eq x y) (Eq x.app y.app)","decl":"/-- `NatTrans F G` represents a natural transformation between functors `F` and `G`.\n\nThe field `app` provides the components of the natural transformation.\n\nNaturality is expressed by `Œ±.naturality`.\n-/\n@[ext]\nstructure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where\n  /-- The component of a natural transformation. -/\n  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X\n  /-- The naturality square for a given morphism. -/\n  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by aesop_cat\n\n-- Rather arbitrarily, we say that the 'simpler' form is\n-- components of natural transformations moving earlier.\n"}
{"name":"CategoryTheory.NatTrans.ext","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\nx y : CategoryTheory.NatTrans F G\napp : Eq x.app y.app\n‚ä¢ Eq x y","decl":"/-- `NatTrans F G` represents a natural transformation between functors `F` and `G`.\n\nThe field `app` provides the components of the natural transformation.\n\nNaturality is expressed by `Œ±.naturality`.\n-/\n@[ext]\nstructure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where\n  /-- The component of a natural transformation. -/\n  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X\n  /-- The naturality square for a given morphism. -/\n  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by aesop_cat\n\n-- Rather arbitrarily, we say that the 'simpler' form is\n-- components of natural transformations moving earlier.\n"}
{"name":"CategoryTheory.NatTrans.naturality","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\nself : CategoryTheory.NatTrans F G\nX Y : C\nf : Quiver.Hom X Y\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (F.map f) (self.app Y)) (CategoryTheory.CategoryStruct.comp (self.app X) (G.map f))","decl":"/-- `NatTrans F G` represents a natural transformation between functors `F` and `G`.\n\nThe field `app` provides the components of the natural transformation.\n\nNaturality is expressed by `Œ±.naturality`.\n-/\n@[ext]\nstructure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where\n  /-- The component of a natural transformation. -/\n  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X\n  /-- The naturality square for a given morphism. -/\n  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by aesop_cat\n\n-- Rather arbitrarily, we say that the 'simpler' form is\n-- components of natural transformations moving earlier.\n"}
{"name":"CategoryTheory.NatTrans.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≥ : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù¬≤ : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\ninst‚úù¬π : SizeOf C\ninst‚úù : SizeOf D\napp : (X : C) ‚Üí Quiver.Hom (F.obj X) (G.obj X)\nnaturality : autoParam (‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (app Y)) (CategoryTheory.CategoryStruct.comp (app X) (G.map f))) _auto‚úù\n‚ä¢ Eq (SizeOf.sizeOf { app := app, naturality := naturality }) 1","decl":"/-- `NatTrans F G` represents a natural transformation between functors `F` and `G`.\n\nThe field `app` provides the components of the natural transformation.\n\nNaturality is expressed by `Œ±.naturality`.\n-/\n@[ext]\nstructure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where\n  /-- The component of a natural transformation. -/\n  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X\n  /-- The naturality square for a given morphism. -/\n  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by aesop_cat\n\n-- Rather arbitrarily, we say that the 'simpler' form is\n-- components of natural transformations moving earlier.\n"}
{"name":"CategoryTheory.NatTrans.mk.injEq","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\napp‚úù : (X : C) ‚Üí Quiver.Hom (F.obj X) (G.obj X)\nnaturality‚úù : autoParam (‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (app‚úù Y)) (CategoryTheory.CategoryStruct.comp (app‚úù X) (G.map f))) _auto‚úù\napp : (X : C) ‚Üí Quiver.Hom (F.obj X) (G.obj X)\nnaturality : autoParam (‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (app Y)) (CategoryTheory.CategoryStruct.comp (app X) (G.map f))) _auto‚úù\n‚ä¢ Eq (Eq { app := app‚úù, naturality := naturality‚úù } { app := app, naturality := naturality }) (Eq app‚úù app)","decl":"/-- `NatTrans F G` represents a natural transformation between functors `F` and `G`.\n\nThe field `app` provides the components of the natural transformation.\n\nNaturality is expressed by `Œ±.naturality`.\n-/\n@[ext]\nstructure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where\n  /-- The component of a natural transformation. -/\n  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X\n  /-- The naturality square for a given morphism. -/\n  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by aesop_cat\n\n-- Rather arbitrarily, we say that the 'simpler' form is\n-- components of natural transformations moving earlier.\n"}
{"name":"CategoryTheory.NatTrans.mk.inj","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\napp‚úù : (X : C) ‚Üí Quiver.Hom (F.obj X) (G.obj X)\nnaturality‚úù : autoParam (‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (app‚úù Y)) (CategoryTheory.CategoryStruct.comp (app‚úù X) (G.map f))) _auto‚úù\napp : (X : C) ‚Üí Quiver.Hom (F.obj X) (G.obj X)\nnaturality : autoParam (‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : Quiver.Hom X Y), Eq (CategoryTheory.CategoryStruct.comp (F.map f) (app Y)) (CategoryTheory.CategoryStruct.comp (app X) (G.map f))) _auto‚úù\nx‚úù : Eq { app := app‚úù, naturality := naturality‚úù } { app := app, naturality := naturality }\n‚ä¢ Eq app‚úù app","decl":"/-- `NatTrans F G` represents a natural transformation between functors `F` and `G`.\n\nThe field `app` provides the components of the natural transformation.\n\nNaturality is expressed by `Œ±.naturality`.\n-/\n@[ext]\nstructure NatTrans (F G : C ‚•§ D) : Type max u‚ÇÅ v‚ÇÇ where\n  /-- The component of a natural transformation. -/\n  app : ‚àÄ X : C, F.obj X ‚ü∂ G.obj X\n  /-- The naturality square for a given morphism. -/\n  naturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y), F.map f ‚â´ app Y = app X ‚â´ G.map f := by aesop_cat\n\n-- Rather arbitrarily, we say that the 'simpler' form is\n-- components of natural transformations moving earlier.\n"}
{"name":"CategoryTheory.NatTrans.naturality_assoc","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\nself : CategoryTheory.NatTrans F G\nX Y : C\nf : Quiver.Hom X Y\nZ : D\nh : Quiver.Hom (G.obj Y) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (F.map f) (CategoryTheory.CategoryStruct.comp (self.app Y) h)) (CategoryTheory.CategoryStruct.comp (self.app X) (CategoryTheory.CategoryStruct.comp (G.map f) h))","decl":"attribute [reassoc (attr := simp)] NatTrans.naturality\n\n"}
{"name":"CategoryTheory.congr_app","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G : CategoryTheory.Functor C D\nŒ± Œ≤ : CategoryTheory.NatTrans F G\nh : Eq Œ± Œ≤\nX : C\n‚ä¢ Eq (Œ±.app X) (Œ≤.app X)","decl":"theorem congr_app {F G : C ‚•§ D} {Œ± Œ≤ : NatTrans F G} (h : Œ± = Œ≤) (X : C) : Œ±.app X = Œ≤.app X := by\n  aesop_cat\n\n"}
{"name":"CategoryTheory.NatTrans.id_app'","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF : CategoryTheory.Functor C D\nX : C\n‚ä¢ Eq ((CategoryTheory.NatTrans.id F).app X) (CategoryTheory.CategoryStruct.id (F.obj X))","decl":"@[simp]\ntheorem id_app' (F : C ‚•§ D) (X : C) : (NatTrans.id F).app X = ùüô (F.obj X) := rfl\n\n"}
{"name":"CategoryTheory.NatTrans.vcomp_app","module":"Mathlib.CategoryTheory.NatTrans","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nF G H : CategoryTheory.Functor C D\nŒ± : CategoryTheory.NatTrans F G\nŒ≤ : CategoryTheory.NatTrans G H\nX : C\n‚ä¢ Eq ((Œ±.vcomp Œ≤).app X) (CategoryTheory.CategoryStruct.comp (Œ±.app X) (Œ≤.app X))","decl":"theorem vcomp_app (Œ± : NatTrans F G) (Œ≤ : NatTrans G H) (X : C) :\n    (vcomp Œ± Œ≤).app X = Œ±.app X ‚â´ Œ≤.app X := rfl\n\n"}
