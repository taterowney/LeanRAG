{"name":"LocallyConnectedSpace.open_connected_basis","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u_3\ninst‚úù : TopologicalSpace Œ±\nself : LocallyConnectedSpace Œ±\nx : Œ±\n‚ä¢ (nhds x).HasBasis (fun s => And (IsOpen s) (And (Membership.mem s x) (IsConnected s))) id","decl":"/-- A topological space is **locally connected** if each neighborhood filter admits a basis\nof connected *open* sets. Note that it is equivalent to each point having a basis of connected\n(non necessarily open) sets but in a non-trivial way, so we choose this definition and prove the\nequivalence later in `locallyConnectedSpace_iff_connected_basis`. -/\nclass LocallyConnectedSpace (Œ± : Type*) [TopologicalSpace Œ±] : Prop where\n  /-- Open connected neighborhoods form a basis of the neighborhoods filter. -/\n  open_connected_basis : ‚àÄ x, (ùìù x).HasBasis (fun s : Set Œ± => IsOpen s ‚àß x ‚àà s ‚àß IsConnected s) id\n\n"}
{"name":"locallyConnectedSpace_iff_hasBasis_isOpen_isConnected","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (x : Œ±), (nhds x).HasBasis (fun s => And (IsOpen s) (And (Membership.mem s x) (IsConnected s))) id)","decl":"theorem locallyConnectedSpace_iff_hasBasis_isOpen_isConnected :\n    LocallyConnectedSpace Œ± ‚Üî\n      ‚àÄ x, (ùìù x).HasBasis (fun s : Set Œ± => IsOpen s ‚àß x ‚àà s ‚àß IsConnected s) id :=\n  ‚ü®@LocallyConnectedSpace.open_connected_basis _ _, LocallyConnectedSpace.mk‚ü©\n\n"}
{"name":"locallyConnectedSpace_iff_open_connected_basis","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (x : Œ±), (nhds x).HasBasis (fun s => And (IsOpen s) (And (Membership.mem s x) (IsConnected s))) id)","decl":"@[deprecated (since := \"2024-11-18\")] alias locallyConnectedSpace_iff_open_connected_basis :=\n  locallyConnectedSpace_iff_hasBasis_isOpen_isConnected\n\n"}
{"name":"locallyConnectedSpace_iff_subsets_isOpen_isConnected","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (x : Œ±) (U : Set Œ±), Membership.mem (nhds x) U ‚Üí Exists fun V => And (HasSubset.Subset V U) (And (IsOpen V) (And (Membership.mem V x) (IsConnected V))))","decl":"theorem locallyConnectedSpace_iff_subsets_isOpen_isConnected :\n    LocallyConnectedSpace Œ± ‚Üî\n      ‚àÄ x, ‚àÄ U ‚àà ùìù x, ‚àÉ V : Set Œ±, V ‚äÜ U ‚àß IsOpen V ‚àß x ‚àà V ‚àß IsConnected V := by\n  simp_rw [locallyConnectedSpace_iff_hasBasis_isOpen_isConnected]\n  refine forall_congr' fun _ => ?_\n  constructor\n  ¬∑ intro h U hU\n    rcases h.mem_iff.mp hU with ‚ü®V, hV, hVU‚ü©\n    exact ‚ü®V, hVU, hV‚ü©\n  ¬∑ exact fun h => ‚ü®fun U => ‚ü®fun hU =>\n      let ‚ü®V, hVU, hV‚ü© := h U hU\n      ‚ü®V, hV, hVU‚ü©, fun ‚ü®V, ‚ü®hV, hxV, _‚ü©, hVU‚ü© => mem_nhds_iff.mpr ‚ü®V, hVU, hV, hxV‚ü©‚ü©‚ü©\n\n"}
{"name":"locallyConnectedSpace_iff_open_connected_subsets","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (x : Œ±) (U : Set Œ±), Membership.mem (nhds x) U ‚Üí Exists fun V => And (HasSubset.Subset V U) (And (IsOpen V) (And (Membership.mem V x) (IsConnected V))))","decl":"@[deprecated (since := \"2024-11-18\")] alias locallyConnectedSpace_iff_open_connected_subsets :=\n  locallyConnectedSpace_iff_subsets_isOpen_isConnected\n\n"}
{"name":"DiscreteTopology.toLocallyConnectedSpace","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u_3\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : DiscreteTopology Œ±\n‚ä¢ LocallyConnectedSpace Œ±","decl":"/-- A space with discrete topology is a locally connected space. -/\ninstance (priority := 100) DiscreteTopology.toLocallyConnectedSpace (Œ±) [TopologicalSpace Œ±]\n    [DiscreteTopology Œ±] : LocallyConnectedSpace Œ± :=\n  locallyConnectedSpace_iff_subsets_isOpen_isConnected.2 fun x _U hU =>\n    ‚ü®{x}, singleton_subset_iff.2 <| mem_of_mem_nhds hU, isOpen_discrete _, rfl,\n      isConnected_singleton‚ü©\n\n"}
{"name":"connectedComponentIn_mem_nhds","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : LocallyConnectedSpace Œ±\nF : Set Œ±\nx : Œ±\nh : Membership.mem (nhds x) F\n‚ä¢ Membership.mem (nhds x) (connectedComponentIn F x)","decl":"theorem connectedComponentIn_mem_nhds [LocallyConnectedSpace Œ±] {F : Set Œ±} {x : Œ±} (h : F ‚àà ùìù x) :\n    connectedComponentIn F x ‚àà ùìù x := by\n  rw [(LocallyConnectedSpace.open_connected_basis x).mem_iff] at h\n  rcases h with ‚ü®s, ‚ü®h1s, hxs, h2s‚ü©, hsF‚ü©\n  exact mem_nhds_iff.mpr ‚ü®s, h2s.isPreconnected.subset_connectedComponentIn hxs hsF, h1s, hxs‚ü©\n\n"}
{"name":"IsOpen.connectedComponentIn","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : LocallyConnectedSpace Œ±\nF : Set Œ±\nx : Œ±\nhF : IsOpen F\n‚ä¢ IsOpen (connectedComponentIn F x)","decl":"protected theorem IsOpen.connectedComponentIn [LocallyConnectedSpace Œ±] {F : Set Œ±} {x : Œ±}\n    (hF : IsOpen F) : IsOpen (connectedComponentIn F x) := by\n  rw [isOpen_iff_mem_nhds]\n  intro y hy\n  rw [connectedComponentIn_eq hy]\n  exact connectedComponentIn_mem_nhds (hF.mem_nhds <| connectedComponentIn_subset F x hy)\n\n"}
{"name":"isOpen_connectedComponent","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : LocallyConnectedSpace Œ±\nx : Œ±\n‚ä¢ IsOpen (connectedComponent x)","decl":"theorem isOpen_connectedComponent [LocallyConnectedSpace Œ±] {x : Œ±} :\n    IsOpen (connectedComponent x) := by\n  rw [‚Üê connectedComponentIn_univ]\n  exact isOpen_univ.connectedComponentIn\n\n"}
{"name":"isClopen_connectedComponent","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : LocallyConnectedSpace Œ±\nx : Œ±\n‚ä¢ IsClopen (connectedComponent x)","decl":"theorem isClopen_connectedComponent [LocallyConnectedSpace Œ±] {x : Œ±} :\n    IsClopen (connectedComponent x) :=\n  ‚ü®isClosed_connectedComponent, isOpen_connectedComponent‚ü©\n\n"}
{"name":"locallyConnectedSpace_iff_connectedComponentIn_open","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (F : Set Œ±), IsOpen F ‚Üí ‚àÄ (x : Œ±), Membership.mem F x ‚Üí IsOpen (connectedComponentIn F x))","decl":"theorem locallyConnectedSpace_iff_connectedComponentIn_open :\n    LocallyConnectedSpace Œ± ‚Üî\n      ‚àÄ F : Set Œ±, IsOpen F ‚Üí ‚àÄ x ‚àà F, IsOpen (connectedComponentIn F x) := by\n  constructor\n  ¬∑ intro h\n    exact fun F hF x _ => hF.connectedComponentIn\n  ¬∑ intro h\n    rw [locallyConnectedSpace_iff_subsets_isOpen_isConnected]\n    refine fun x U hU =>\n        ‚ü®connectedComponentIn (interior U) x,\n          (connectedComponentIn_subset _ _).trans interior_subset, h _ isOpen_interior x ?_,\n          mem_connectedComponentIn ?_, isConnected_connectedComponentIn_iff.mpr ?_‚ü© <;>\n      exact mem_interior_iff_mem_nhds.mpr hU\n\n"}
{"name":"locallyConnectedSpace_iff_connected_subsets","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (x : Œ±) (U : Set Œ±), Membership.mem (nhds x) U ‚Üí Exists fun V => And (Membership.mem (nhds x) V) (And (IsPreconnected V) (HasSubset.Subset V U)))","decl":"theorem locallyConnectedSpace_iff_connected_subsets :\n    LocallyConnectedSpace Œ± ‚Üî ‚àÄ (x : Œ±), ‚àÄ U ‚àà ùìù x, ‚àÉ V ‚àà ùìù x, IsPreconnected V ‚àß V ‚äÜ U := by\n  constructor\n  ¬∑ rw [locallyConnectedSpace_iff_subsets_isOpen_isConnected]\n    intro h x U hxU\n    rcases h x U hxU with ‚ü®V, hVU, hV‚ÇÅ, hxV, hV‚ÇÇ‚ü©\n    exact ‚ü®V, hV‚ÇÅ.mem_nhds hxV, hV‚ÇÇ.isPreconnected, hVU‚ü©\n  ¬∑ rw [locallyConnectedSpace_iff_connectedComponentIn_open]\n    refine fun h U hU x _ => isOpen_iff_mem_nhds.mpr fun y hy => ?_\n    rw [connectedComponentIn_eq hy]\n    rcases h y U (hU.mem_nhds <| (connectedComponentIn_subset _ _) hy) with ‚ü®V, hVy, hV, hVU‚ü©\n    exact Filter.mem_of_superset hVy (hV.subset_connectedComponentIn (mem_of_mem_nhds hVy) hVU)\n\n"}
{"name":"locallyConnectedSpace_iff_connected_basis","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\n‚ä¢ Iff (LocallyConnectedSpace Œ±) (‚àÄ (x : Œ±), (nhds x).HasBasis (fun s => And (Membership.mem (nhds x) s) (IsPreconnected s)) id)","decl":"theorem locallyConnectedSpace_iff_connected_basis :\n    LocallyConnectedSpace Œ± ‚Üî\n      ‚àÄ x, (ùìù x).HasBasis (fun s : Set Œ± => s ‚àà ùìù x ‚àß IsPreconnected s) id := by\n  rw [locallyConnectedSpace_iff_connected_subsets]\n  exact forall_congr' fun x => Filter.hasBasis_self.symm\n\n"}
{"name":"locallyConnectedSpace_of_connected_bases","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù : TopologicalSpace Œ±\nŒπ : Type u_3\nb : Œ± ‚Üí Œπ ‚Üí Set Œ±\np : Œ± ‚Üí Œπ ‚Üí Prop\nhbasis : ‚àÄ (x : Œ±), (nhds x).HasBasis (p x) (b x)\nhconnected : ‚àÄ (x : Œ±) (i : Œπ), p x i ‚Üí IsPreconnected (b x i)\n‚ä¢ LocallyConnectedSpace Œ±","decl":"theorem locallyConnectedSpace_of_connected_bases {Œπ : Type*} (b : Œ± ‚Üí Œπ ‚Üí Set Œ±) (p : Œ± ‚Üí Œπ ‚Üí Prop)\n    (hbasis : ‚àÄ x, (ùìù x).HasBasis (p x) (b x))\n    (hconnected : ‚àÄ x i, p x i ‚Üí IsPreconnected (b x i)) : LocallyConnectedSpace Œ± := by\n  rw [locallyConnectedSpace_iff_connected_basis]\n  exact fun x =>\n    (hbasis x).to_hasBasis\n      (fun i hi => ‚ü®b x i, ‚ü®(hbasis x).mem_of_mem hi, hconnected x i hi‚ü©, subset_rfl‚ü©) fun s hs =>\n      ‚ü®(hbasis x).index s hs.1, ‚ü®(hbasis x).property_index hs.1, (hbasis x).set_index_subset hs.1‚ü©‚ü©\n\n"}
{"name":"Topology.IsOpenEmbedding.locallyConnectedSpace","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬≤ : TopologicalSpace Œ±\ninst‚úù¬π : LocallyConnectedSpace Œ±\ninst‚úù : TopologicalSpace Œ≤\nf : Œ≤ ‚Üí Œ±\nh : Topology.IsOpenEmbedding f\n‚ä¢ LocallyConnectedSpace Œ≤","decl":"lemma Topology.IsOpenEmbedding.locallyConnectedSpace [LocallyConnectedSpace Œ±] [TopologicalSpace Œ≤]\n    {f : Œ≤ ‚Üí Œ±} (h : IsOpenEmbedding f) : LocallyConnectedSpace Œ≤ := by\n  refine locallyConnectedSpace_of_connected_bases (fun _ s ‚Ü¶ f ‚Åª¬π' s)\n    (fun x s ‚Ü¶ (IsOpen s ‚àß f x ‚àà s ‚àß IsConnected s) ‚àß s ‚äÜ range f) (fun x ‚Ü¶ ?_)\n    (fun x s hxs ‚Ü¶ hxs.1.2.2.isPreconnected.preimage_of_isOpenMap h.injective h.isOpenMap hxs.2)\n  rw [h.nhds_eq_comap]\n  exact LocallyConnectedSpace.open_connected_basis (f x) |>.restrict_subset\n    (h.isOpen_range.mem_nhds <| mem_range_self _) |>.comap _\n\n"}
{"name":"OpenEmbedding.locallyConnectedSpace","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\nŒ≤ : Type v\ninst‚úù¬≤ : TopologicalSpace Œ±\ninst‚úù¬π : LocallyConnectedSpace Œ±\ninst‚úù : TopologicalSpace Œ≤\nf : Œ≤ ‚Üí Œ±\nh : Topology.IsOpenEmbedding f\n‚ä¢ LocallyConnectedSpace Œ≤","decl":"@[deprecated (since := \"2024-10-18\")]\nalias OpenEmbedding.locallyConnectedSpace := IsOpenEmbedding.locallyConnectedSpace\n\n"}
{"name":"IsOpen.locallyConnectedSpace","module":"Mathlib.Topology.Connected.LocallyConnected","initialProofState":"Œ± : Type u\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : LocallyConnectedSpace Œ±\nU : Set Œ±\nhU : IsOpen U\n‚ä¢ LocallyConnectedSpace ‚ÜëU","decl":"theorem IsOpen.locallyConnectedSpace [LocallyConnectedSpace Œ±] {U : Set Œ±} (hU : IsOpen U) :\n    LocallyConnectedSpace U :=\n  hU.isOpenEmbedding_subtypeVal.locallyConnectedSpace\n\n"}
