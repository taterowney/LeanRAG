{"name":"SheafOfModules.restrictScalars_obj_val","module":"Mathlib.Algebra.Category.ModuleCat.Sheaf.ChangeOfRings","initialProofState":"C : Type u'\ninst✝ : CategoryTheory.Category.{v', u'} C\nJ : CategoryTheory.GrothendieckTopology C\nR R' : CategoryTheory.Sheaf J RingCat\nα : Quiver.Hom R R'\nM' : SheafOfModules R'\n⊢ Eq ((SheafOfModules.restrictScalars α).obj M').val ((PresheafOfModules.restrictScalars α.val).obj M'.val)","decl":"/-- The restriction of scalars functor `SheafOfModules R' ⥤ SheafOfModules R`\ninduced by a morphism of sheaves of rings `R ⟶ R'`. -/\n@[simps]\nnoncomputable def restrictScalars :\n    SheafOfModules.{v} R' ⥤ SheafOfModules.{v} R where\n  obj M' :=\n    { val := (PresheafOfModules.restrictScalars α.val).obj M'.val\n      isSheaf := M'.isSheaf }\n  map φ := { val := (PresheafOfModules.restrictScalars α.val).map φ.val }\n\n"}
{"name":"SheafOfModules.restrictScalars_map_val","module":"Mathlib.Algebra.Category.ModuleCat.Sheaf.ChangeOfRings","initialProofState":"C : Type u'\ninst✝ : CategoryTheory.Category.{v', u'} C\nJ : CategoryTheory.GrothendieckTopology C\nR R' : CategoryTheory.Sheaf J RingCat\nα : Quiver.Hom R R'\nX✝ Y✝ : SheafOfModules R'\nφ : Quiver.Hom X✝ Y✝\n⊢ Eq ((SheafOfModules.restrictScalars α).map φ).val ((PresheafOfModules.restrictScalars α.val).map φ.val)","decl":"/-- The restriction of scalars functor `SheafOfModules R' ⥤ SheafOfModules R`\ninduced by a morphism of sheaves of rings `R ⟶ R'`. -/\n@[simps]\nnoncomputable def restrictScalars :\n    SheafOfModules.{v} R' ⥤ SheafOfModules.{v} R where\n  obj M' :=\n    { val := (PresheafOfModules.restrictScalars α.val).obj M'.val\n      isSheaf := M'.isSheaf }\n  map φ := { val := (PresheafOfModules.restrictScalars α.val).map φ.val }\n\n"}
{"name":"SheafOfModules.instAdditiveRestrictScalars","module":"Mathlib.Algebra.Category.ModuleCat.Sheaf.ChangeOfRings","initialProofState":"C : Type u'\ninst✝ : CategoryTheory.Category.{v', u'} C\nJ : CategoryTheory.GrothendieckTopology C\nR R' : CategoryTheory.Sheaf J RingCat\nα : Quiver.Hom R R'\n⊢ (SheafOfModules.restrictScalars α).Additive","decl":"instance : (restrictScalars.{v} α).Additive where\n\n"}
