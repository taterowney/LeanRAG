{"name":"Set.pi_univ_Ici","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝ : (i : ι) → Preorder (α i)\nx : (i : ι) → α i\n⊢ Eq (Set.univ.pi fun i => Set.Ici (x i)) (Set.Ici x)","decl":"@[simp]\ntheorem pi_univ_Ici : (pi univ fun i ↦ Ici (x i)) = Ici x :=\n  ext fun y ↦ by simp [Pi.le_def]\n\n"}
{"name":"Set.pi_univ_Iic","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝ : (i : ι) → Preorder (α i)\nx : (i : ι) → α i\n⊢ Eq (Set.univ.pi fun i => Set.Iic (x i)) (Set.Iic x)","decl":"@[simp]\ntheorem pi_univ_Iic : (pi univ fun i ↦ Iic (x i)) = Iic x :=\n  ext fun y ↦ by simp [Pi.le_def]\n\n"}
{"name":"Set.pi_univ_Icc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝ : (i : ι) → Preorder (α i)\nx y : (i : ι) → α i\n⊢ Eq (Set.univ.pi fun i => Set.Icc (x i) (y i)) (Set.Icc x y)","decl":"@[simp]\ntheorem pi_univ_Icc : (pi univ fun i ↦ Icc (x i) (y i)) = Icc x y :=\n  ext fun y ↦ by simp [Pi.le_def, forall_and]\n\n"}
{"name":"Set.piecewise_mem_Icc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\ns : Set ι\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\nf₁ f₂ g₁ g₂ : (i : ι) → α i\nh₁ : ∀ (i : ι), Membership.mem s i → Membership.mem (Set.Icc (g₁ i) (g₂ i)) (f₁ i)\nh₂ : ∀ (i : ι), Not (Membership.mem s i) → Membership.mem (Set.Icc (g₁ i) (g₂ i)) (f₂ i)\n⊢ Membership.mem (Set.Icc g₁ g₂) (s.piecewise f₁ f₂)","decl":"theorem piecewise_mem_Icc {s : Set ι} [∀ j, Decidable (j ∈ s)] {f₁ f₂ g₁ g₂ : ∀ i, α i}\n    (h₁ : ∀ i ∈ s, f₁ i ∈ Icc (g₁ i) (g₂ i)) (h₂ : ∀ i ∉ s, f₂ i ∈ Icc (g₁ i) (g₂ i)) :\n    s.piecewise f₁ f₂ ∈ Icc g₁ g₂ :=\n  ⟨le_piecewise (fun i hi ↦ (h₁ i hi).1) fun i hi ↦ (h₂ i hi).1,\n    piecewise_le (fun i hi ↦ (h₁ i hi).2) fun i hi ↦ (h₂ i hi).2⟩\n\n"}
{"name":"Set.piecewise_mem_Icc'","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\ns : Set ι\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\nf₁ f₂ g₁ g₂ : (i : ι) → α i\nh₁ : Membership.mem (Set.Icc g₁ g₂) f₁\nh₂ : Membership.mem (Set.Icc g₁ g₂) f₂\n⊢ Membership.mem (Set.Icc g₁ g₂) (s.piecewise f₁ f₂)","decl":"theorem piecewise_mem_Icc' {s : Set ι} [∀ j, Decidable (j ∈ s)] {f₁ f₂ g₁ g₂ : ∀ i, α i}\n    (h₁ : f₁ ∈ Icc g₁ g₂) (h₂ : f₂ ∈ Icc g₁ g₂) : s.piecewise f₁ f₂ ∈ Icc g₁ g₂ :=\n  piecewise_mem_Icc (fun _ _ ↦ ⟨h₁.1 _, h₁.2 _⟩) fun _ _ ↦ ⟨h₂.1 _, h₂.2 _⟩\n\n"}
{"name":"Set.pi_univ_Ioi_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\nx : (i : ι) → α i\ninst✝ : Nonempty ι\n⊢ HasSubset.Subset (Set.univ.pi fun i => Set.Ioi (x i)) (Set.Ioi x)","decl":"theorem pi_univ_Ioi_subset [Nonempty ι]: (pi univ fun i ↦ Ioi (x i)) ⊆ Ioi x := fun _ hz ↦\n  ⟨fun i ↦ le_of_lt <| hz i trivial, fun h ↦\n    (‹Nonempty ι›.elim) fun i ↦ not_lt_of_le (h i) (hz i trivial)⟩\n\n"}
{"name":"Set.pi_univ_Iio_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\nx : (i : ι) → α i\ninst✝ : Nonempty ι\n⊢ HasSubset.Subset (Set.univ.pi fun i => Set.Iio (x i)) (Set.Iio x)","decl":"theorem pi_univ_Iio_subset [Nonempty ι]: (pi univ fun i ↦ Iio (x i)) ⊆ Iio x :=\n  pi_univ_Ioi_subset (α := fun i ↦ (α i)ᵒᵈ) x\n\n"}
{"name":"Set.pi_univ_Ioo_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\nx y : (i : ι) → α i\ninst✝ : Nonempty ι\n⊢ HasSubset.Subset (Set.univ.pi fun i => Set.Ioo (x i) (y i)) (Set.Ioo x y)","decl":"theorem pi_univ_Ioo_subset [Nonempty ι]: (pi univ fun i ↦ Ioo (x i) (y i)) ⊆ Ioo x y := fun _ hx ↦\n  ⟨(pi_univ_Ioi_subset _) fun i hi ↦ (hx i hi).1, (pi_univ_Iio_subset _) fun i hi ↦ (hx i hi).2⟩\n\n"}
{"name":"Set.pi_univ_Ioc_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\nx y : (i : ι) → α i\ninst✝ : Nonempty ι\n⊢ HasSubset.Subset (Set.univ.pi fun i => Set.Ioc (x i) (y i)) (Set.Ioc x y)","decl":"theorem pi_univ_Ioc_subset [Nonempty ι]: (pi univ fun i ↦ Ioc (x i) (y i)) ⊆ Ioc x y := fun _ hx ↦\n  ⟨(pi_univ_Ioi_subset _) fun i hi ↦ (hx i hi).1, fun i ↦ (hx i trivial).2⟩\n\n"}
{"name":"Set.pi_univ_Ico_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\nx y : (i : ι) → α i\ninst✝ : Nonempty ι\n⊢ HasSubset.Subset (Set.univ.pi fun i => Set.Ico (x i) (y i)) (Set.Ico x y)","decl":"theorem pi_univ_Ico_subset [Nonempty ι]: (pi univ fun i ↦ Ico (x i) (y i)) ⊆ Ico x y := fun _ hx ↦\n  ⟨fun i ↦ (hx i trivial).1, (pi_univ_Iio_subset _) fun i hi ↦ (hx i hi).2⟩\n\n"}
{"name":"Set.pi_univ_Ioc_update_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\ninst✝ : DecidableEq ι\nx y : (i : ι) → α i\ni₀ : ι\nm : α i₀\nhm : LE.le (x i₀) m\n⊢ Eq (Set.univ.pi fun i => Set.Ioc (Function.update x i₀ m i) (y i)) (Inter.inter (setOf fun z => LT.lt m (z i₀)) (Set.univ.pi fun i => Set.Ioc (x i) (y i)))","decl":"theorem pi_univ_Ioc_update_left {x y : ∀ i, α i} {i₀ : ι} {m : α i₀} (hm : x i₀ ≤ m) :\n    (pi univ fun i ↦ Ioc (update x i₀ m i) (y i)) =\n      { z | m < z i₀ } ∩ pi univ fun i ↦ Ioc (x i) (y i) := by\n  have : Ioc m (y i₀) = Ioi m ∩ Ioc (x i₀) (y i₀) := by\n    rw [← Ioi_inter_Iic, ← Ioi_inter_Iic, ← inter_assoc,\n      inter_eq_self_of_subset_left (Ioi_subset_Ioi hm)]\n  simp_rw [univ_pi_update i₀ _ _ fun i z ↦ Ioc z (y i), ← pi_inter_compl ({i₀} : Set ι),\n    singleton_pi', ← inter_assoc, this]\n  rfl\n\n"}
{"name":"Set.pi_univ_Ioc_update_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\ninst✝ : DecidableEq ι\nx y : (i : ι) → α i\ni₀ : ι\nm : α i₀\nhm : LE.le m (y i₀)\n⊢ Eq (Set.univ.pi fun i => Set.Ioc (x i) (Function.update y i₀ m i)) (Inter.inter (setOf fun z => LE.le (z i₀) m) (Set.univ.pi fun i => Set.Ioc (x i) (y i)))","decl":"theorem pi_univ_Ioc_update_right {x y : ∀ i, α i} {i₀ : ι} {m : α i₀} (hm : m ≤ y i₀) :\n    (pi univ fun i ↦ Ioc (x i) (update y i₀ m i)) =\n      { z | z i₀ ≤ m } ∩ pi univ fun i ↦ Ioc (x i) (y i) := by\n  have : Ioc (x i₀) m = Iic m ∩ Ioc (x i₀) (y i₀) := by\n    rw [← Ioi_inter_Iic, ← Ioi_inter_Iic, inter_left_comm,\n      inter_eq_self_of_subset_left (Iic_subset_Iic.2 hm)]\n  simp_rw [univ_pi_update i₀ y m fun i z ↦ Ioc (x i) z, ← pi_inter_compl ({i₀} : Set ι),\n    singleton_pi', ← inter_assoc, this]\n  rfl\n\n"}
{"name":"Set.disjoint_pi_univ_Ioc_update_left_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Preorder (α i)\ninst✝ : DecidableEq ι\nx y : (i : ι) → α i\ni₀ : ι\nm : α i₀\n⊢ Disjoint (Set.univ.pi fun i => Set.Ioc (x i) (Function.update y i₀ m i)) (Set.univ.pi fun i => Set.Ioc (Function.update x i₀ m i) (y i))","decl":"theorem disjoint_pi_univ_Ioc_update_left_right {x y : ∀ i, α i} {i₀ : ι} {m : α i₀} :\n    Disjoint (pi univ fun i ↦ Ioc (x i) (update y i₀ m i))\n    (pi univ fun i ↦ Ioc (update x i₀ m i) (y i)) := by\n  rw [disjoint_left]\n  rintro z h₁ h₂\n  refine (h₁ i₀ (mem_univ _)).2.not_lt ?_\n  simpa only [Function.update_self] using (h₂ i₀ (mem_univ _)).1\n\n"}
{"name":"Set.image_update_Icc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na b : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Icc a b)) (Set.Icc (Function.update f i a) (Function.update f i b))","decl":"theorem image_update_Icc (f : ∀ i, α i) (i : ι) (a b : α i) :\n    update f i '' Icc a b = Icc (update f i a) (update f i b) := by\n  ext x\n  rw [← Set.pi_univ_Icc]\n  refine ⟨?_, fun h => ⟨x i, ?_, ?_⟩⟩\n  · rintro ⟨c, hc, rfl⟩\n    simpa [update_le_update_iff]\n  · simpa only [Function.update_self] using h i (mem_univ i)\n  · ext j\n    obtain rfl | hij := eq_or_ne i j\n    · exact Function.update_self ..\n    · simpa only [Function.update_of_ne hij.symm, le_antisymm_iff] using h j (mem_univ j)\n\n"}
{"name":"Set.image_update_Ico","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na b : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ico a b)) (Set.Ico (Function.update f i a) (Function.update f i b))","decl":"theorem image_update_Ico (f : ∀ i, α i) (i : ι) (a b : α i) :\n    update f i '' Ico a b = Ico (update f i a) (update f i b) := by\n  rw [← Icc_diff_right, ← Icc_diff_right, image_diff (update_injective _ _), image_singleton,\n    image_update_Icc]\n\n"}
{"name":"Set.image_update_Ioc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na b : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ioc a b)) (Set.Ioc (Function.update f i a) (Function.update f i b))","decl":"theorem image_update_Ioc (f : ∀ i, α i) (i : ι) (a b : α i) :\n    update f i '' Ioc a b = Ioc (update f i a) (update f i b) := by\n  rw [← Icc_diff_left, ← Icc_diff_left, image_diff (update_injective _ _), image_singleton,\n    image_update_Icc]\n\n"}
{"name":"Set.image_update_Ioo","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na b : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ioo a b)) (Set.Ioo (Function.update f i a) (Function.update f i b))","decl":"theorem image_update_Ioo (f : ∀ i, α i) (i : ι) (a b : α i) :\n    update f i '' Ioo a b = Ioo (update f i a) (update f i b) := by\n  rw [← Ico_diff_left, ← Ico_diff_left, image_diff (update_injective _ _), image_singleton,\n    image_update_Ico]\n\n"}
{"name":"Set.image_update_Icc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Icc a (f i))) (Set.Icc (Function.update f i a) f)","decl":"theorem image_update_Icc_left (f : ∀ i, α i) (i : ι) (a : α i) :\n    update f i '' Icc a (f i) = Icc (update f i a) f := by simpa using image_update_Icc f i a (f i)\n\n"}
{"name":"Set.image_update_Ico_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ico a (f i))) (Set.Ico (Function.update f i a) f)","decl":"theorem image_update_Ico_left (f : ∀ i, α i) (i : ι) (a : α i) :\n    update f i '' Ico a (f i) = Ico (update f i a) f := by simpa using image_update_Ico f i a (f i)\n\n"}
{"name":"Set.image_update_Ioc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ioc a (f i))) (Set.Ioc (Function.update f i a) f)","decl":"theorem image_update_Ioc_left (f : ∀ i, α i) (i : ι) (a : α i) :\n    update f i '' Ioc a (f i) = Ioc (update f i a) f := by simpa using image_update_Ioc f i a (f i)\n\n"}
{"name":"Set.image_update_Ioo_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\na : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ioo a (f i))) (Set.Ioo (Function.update f i a) f)","decl":"theorem image_update_Ioo_left (f : ∀ i, α i) (i : ι) (a : α i) :\n    update f i '' Ioo a (f i) = Ioo (update f i a) f := by simpa using image_update_Ioo f i a (f i)\n\n"}
{"name":"Set.image_update_Icc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\nb : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Icc (f i) b)) (Set.Icc f (Function.update f i b))","decl":"theorem image_update_Icc_right (f : ∀ i, α i) (i : ι) (b : α i) :\n    update f i '' Icc (f i) b = Icc f (update f i b) := by simpa using image_update_Icc f i (f i) b\n\n"}
{"name":"Set.image_update_Ico_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\nb : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ico (f i) b)) (Set.Ico f (Function.update f i b))","decl":"theorem image_update_Ico_right (f : ∀ i, α i) (i : ι) (b : α i) :\n    update f i '' Ico (f i) b = Ico f (update f i b) := by simpa using image_update_Ico f i (f i) b\n\n"}
{"name":"Set.image_update_Ioc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\nb : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ioc (f i) b)) (Set.Ioc f (Function.update f i b))","decl":"theorem image_update_Ioc_right (f : ∀ i, α i) (i : ι) (b : α i) :\n    update f i '' Ioc (f i) b = Ioc f (update f i b) := by simpa using image_update_Ioc f i (f i) b\n\n"}
{"name":"Set.image_update_Ioo_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → PartialOrder (α i)\nf : (i : ι) → α i\ni : ι\nb : α i\n⊢ Eq (Set.image (Function.update f i) (Set.Ioo (f i) b)) (Set.Ioo f (Function.update f i b))","decl":"theorem image_update_Ioo_right (f : ∀ i, α i) (i : ι) (b : α i) :\n    update f i '' Ioo (f i) b = Ioo f (update f i b) := by simpa using image_update_Ioo f i (f i) b\n\n"}
{"name":"Set.image_single_Icc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Icc a b)) (Set.Icc (Pi.single i a) (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Icc (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Icc a b = Icc (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Icc _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_Icc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Icc a b)) (Set.Icc (Pi.mulSingle i a) (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Icc (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Icc a b = Icc (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Icc _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ico","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ico a b)) (Set.Ico (Pi.mulSingle i a) (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ico (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Ico a b = Ico (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Ico _ _ _ _\n\n"}
{"name":"Set.image_single_Ico","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ico a b)) (Set.Ico (Pi.single i a) (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ico (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Ico a b = Ico (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Ico _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ioc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ioc a b)) (Set.Ioc (Pi.mulSingle i a) (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioc (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Ioc a b = Ioc (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Ioc _ _ _ _\n\n"}
{"name":"Set.image_single_Ioc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ioc a b)) (Set.Ioc (Pi.single i a) (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioc (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Ioc a b = Ioc (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Ioc _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ioo","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ioo a b)) (Set.Ioo (Pi.mulSingle i a) (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioo (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Ioo a b = Ioo (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Ioo _ _ _ _\n\n"}
{"name":"Set.image_single_Ioo","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ioo a b)) (Set.Ioo (Pi.single i a) (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioo (i : ι) (a b : α i) :\n    Pi.mulSingle i '' Ioo a b = Ioo (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_Ioo _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_Icc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Icc a 1)) (Set.Icc (Pi.mulSingle i a) 1)","decl":"@[to_additive]\ntheorem image_mulSingle_Icc_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Icc a 1 = Icc (Pi.mulSingle i a) 1 :=\n  image_update_Icc_left _ _ _\n\n"}
{"name":"Set.image_single_Icc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Icc a 0)) (Set.Icc (Pi.single i a) 0)","decl":"@[to_additive]\ntheorem image_mulSingle_Icc_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Icc a 1 = Icc (Pi.mulSingle i a) 1 :=\n  image_update_Icc_left _ _ _\n\n"}
{"name":"Set.image_single_Ico_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ico a 0)) (Set.Ico (Pi.single i a) 0)","decl":"@[to_additive]\ntheorem image_mulSingle_Ico_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Ico a 1 = Ico (Pi.mulSingle i a) 1 :=\n  image_update_Ico_left _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ico_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ico a 1)) (Set.Ico (Pi.mulSingle i a) 1)","decl":"@[to_additive]\ntheorem image_mulSingle_Ico_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Ico a 1 = Ico (Pi.mulSingle i a) 1 :=\n  image_update_Ico_left _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ioc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ioc a 1)) (Set.Ioc (Pi.mulSingle i a) 1)","decl":"@[to_additive]\ntheorem image_mulSingle_Ioc_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Ioc a 1 = Ioc (Pi.mulSingle i a) 1 :=\n  image_update_Ioc_left _ _ _\n\n"}
{"name":"Set.image_single_Ioc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ioc a 0)) (Set.Ioc (Pi.single i a) 0)","decl":"@[to_additive]\ntheorem image_mulSingle_Ioc_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Ioc a 1 = Ioc (Pi.mulSingle i a) 1 :=\n  image_update_Ioc_left _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ioo_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ioo a 1)) (Set.Ioo (Pi.mulSingle i a) 1)","decl":"@[to_additive]\ntheorem image_mulSingle_Ioo_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Ioo a 1 = Ioo (Pi.mulSingle i a) 1 :=\n  image_update_Ioo_left _ _ _\n\n"}
{"name":"Set.image_single_Ioo_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ioo a 0)) (Set.Ioo (Pi.single i a) 0)","decl":"@[to_additive]\ntheorem image_mulSingle_Ioo_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' Ioo a 1 = Ioo (Pi.mulSingle i a) 1 :=\n  image_update_Ioo_left _ _ _\n\n"}
{"name":"Set.image_single_Icc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Icc 0 b)) (Set.Icc 0 (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Icc_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Icc 1 b = Icc 1 (Pi.mulSingle i b) :=\n  image_update_Icc_right _ _ _\n\n"}
{"name":"Set.image_mulSingle_Icc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Icc 1 b)) (Set.Icc 1 (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Icc_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Icc 1 b = Icc 1 (Pi.mulSingle i b) :=\n  image_update_Icc_right _ _ _\n\n"}
{"name":"Set.image_single_Ico_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ico 0 b)) (Set.Ico 0 (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ico_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Ico 1 b = Ico 1 (Pi.mulSingle i b) :=\n  image_update_Ico_right _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ico_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ico 1 b)) (Set.Ico 1 (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ico_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Ico 1 b = Ico 1 (Pi.mulSingle i b) :=\n  image_update_Ico_right _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ioc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ioc 1 b)) (Set.Ioc 1 (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioc_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Ioc 1 b = Ioc 1 (Pi.mulSingle i b) :=\n  image_update_Ioc_right _ _ _\n\n"}
{"name":"Set.image_single_Ioc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ioc 0 b)) (Set.Ioc 0 (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioc_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Ioc 1 b = Ioc 1 (Pi.mulSingle i b) :=\n  image_update_Ioc_right _ _ _\n\n"}
{"name":"Set.image_single_Ioo_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → Zero (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.single i) (Set.Ioo 0 b)) (Set.Ioo 0 (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioo_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Ioo 1 b = Ioo 1 (Pi.mulSingle i b) :=\n  image_update_Ioo_right _ _ _\n\n"}
{"name":"Set.image_mulSingle_Ioo_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : DecidableEq ι\ninst✝¹ : (i : ι) → PartialOrder (α i)\ninst✝ : (i : ι) → One (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.Ioo 1 b)) (Set.Ioo 1 (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_Ioo_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' Ioo 1 b = Ioo 1 (Pi.mulSingle i b) :=\n  image_update_Ioo_right _ _ _\n\n"}
{"name":"Set.pi_univ_uIcc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝ : (i : ι) → Lattice (α i)\na b : (i : ι) → α i\n⊢ Eq (Set.univ.pi fun i => Set.uIcc (a i) (b i)) (Set.uIcc a b)","decl":"@[simp]\ntheorem pi_univ_uIcc (a b : ∀ i, α i) : (pi univ fun i => uIcc (a i) (b i)) = uIcc a b :=\n  pi_univ_Icc _ _\n\n"}
{"name":"Set.image_update_uIcc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : DecidableEq ι\nf : (i : ι) → α i\ni : ι\na b : α i\n⊢ Eq (Set.image (Function.update f i) (Set.uIcc a b)) (Set.uIcc (Function.update f i a) (Function.update f i b))","decl":"theorem image_update_uIcc (f : ∀ i, α i) (i : ι) (a b : α i) :\n    update f i '' uIcc a b = uIcc (update f i a) (update f i b) :=\n  (image_update_Icc _ _ _ _).trans <| by simp_rw [uIcc, update_sup, update_inf]\n\n"}
{"name":"Set.image_update_uIcc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : DecidableEq ι\nf : (i : ι) → α i\ni : ι\na : α i\n⊢ Eq (Set.image (Function.update f i) (Set.uIcc a (f i))) (Set.uIcc (Function.update f i a) f)","decl":"theorem image_update_uIcc_left (f : ∀ i, α i) (i : ι) (a : α i) :\n    update f i '' uIcc a (f i) = uIcc (update f i a) f := by\n  simpa using image_update_uIcc f i a (f i)\n\n"}
{"name":"Set.image_update_uIcc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : (i : ι) → Lattice (α i)\ninst✝ : DecidableEq ι\nf : (i : ι) → α i\ni : ι\nb : α i\n⊢ Eq (Set.image (Function.update f i) (Set.uIcc (f i) b)) (Set.uIcc f (Function.update f i b))","decl":"theorem image_update_uIcc_right (f : ∀ i, α i) (i : ι) (b : α i) :\n    update f i '' uIcc (f i) b = uIcc f (update f i b) := by\n  simpa using image_update_uIcc f i (f i) b\n\n"}
{"name":"Set.image_single_uIcc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : (i : ι) → Lattice (α i)\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.single i) (Set.uIcc a b)) (Set.uIcc (Pi.single i a) (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_uIcc (i : ι) (a b : α i) :\n    Pi.mulSingle i '' uIcc a b = uIcc (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_uIcc _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_uIcc","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : (i : ι) → Lattice (α i)\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → One (α i)\ni : ι\na b : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.uIcc a b)) (Set.uIcc (Pi.mulSingle i a) (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_uIcc (i : ι) (a b : α i) :\n    Pi.mulSingle i '' uIcc a b = uIcc (Pi.mulSingle i a) (Pi.mulSingle i b) :=\n  image_update_uIcc _ _ _ _\n\n"}
{"name":"Set.image_mulSingle_uIcc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : (i : ι) → Lattice (α i)\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → One (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.uIcc a 1)) (Set.uIcc (Pi.mulSingle i a) 1)","decl":"@[to_additive]\ntheorem image_mulSingle_uIcc_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' uIcc a 1 = uIcc (Pi.mulSingle i a) 1 :=\n  image_update_uIcc_left _ _ _\n\n"}
{"name":"Set.image_single_uIcc_left","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : (i : ι) → Lattice (α i)\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → Zero (α i)\ni : ι\na : α i\n⊢ Eq (Set.image (Pi.single i) (Set.uIcc a 0)) (Set.uIcc (Pi.single i a) 0)","decl":"@[to_additive]\ntheorem image_mulSingle_uIcc_left (i : ι) (a : α i) :\n    Pi.mulSingle i '' uIcc a 1 = uIcc (Pi.mulSingle i a) 1 :=\n  image_update_uIcc_left _ _ _\n\n"}
{"name":"Set.image_single_uIcc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : (i : ι) → Lattice (α i)\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → Zero (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.single i) (Set.uIcc 0 b)) (Set.uIcc 0 (Pi.single i b))","decl":"@[to_additive]\ntheorem image_mulSingle_uIcc_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' uIcc 1 b = uIcc 1 (Pi.mulSingle i b) :=\n  image_update_uIcc_right _ _ _\n\n"}
{"name":"Set.image_mulSingle_uIcc_right","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝² : (i : ι) → Lattice (α i)\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → One (α i)\ni : ι\nb : α i\n⊢ Eq (Set.image (Pi.mulSingle i) (Set.uIcc 1 b)) (Set.uIcc 1 (Pi.mulSingle i b))","decl":"@[to_additive]\ntheorem image_mulSingle_uIcc_right (i : ι) (b : α i) :\n    Pi.mulSingle i '' uIcc 1 b = uIcc 1 (Pi.mulSingle i b) :=\n  image_update_uIcc_right _ _ _\n\n"}
{"name":"Set.pi_univ_Ioc_update_union","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → LinearOrder (α i)\nx y : (i : ι) → α i\ni₀ : ι\nm : α i₀\nhm : Membership.mem (Set.Icc (x i₀) (y i₀)) m\n⊢ Eq (Union.union (Set.univ.pi fun i => Set.Ioc (x i) (Function.update y i₀ m i)) (Set.univ.pi fun i => Set.Ioc (Function.update x i₀ m i) (y i))) (Set.univ.pi fun i => Set.Ioc (x i) (y i))","decl":"theorem pi_univ_Ioc_update_union (x y : ∀ i, α i) (i₀ : ι) (m : α i₀) (hm : m ∈ Icc (x i₀) (y i₀)) :\n    ((pi univ fun i ↦ Ioc (x i) (update y i₀ m i)) ∪\n        pi univ fun i ↦ Ioc (update x i₀ m i) (y i)) =\n      pi univ fun i ↦ Ioc (x i) (y i) := by\n  simp_rw [pi_univ_Ioc_update_left hm.1, pi_univ_Ioc_update_right hm.2, ← union_inter_distrib_right,\n    ← setOf_or, le_or_lt, setOf_true, univ_inter]\n\n"}
{"name":"Set.Icc_diff_pi_univ_Ioo_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → LinearOrder (α i)\nx y x' y' : (i : ι) → α i\n⊢ HasSubset.Subset (SDiff.sdiff (Set.Icc x y) (Set.univ.pi fun i => Set.Ioo (x' i) (y' i))) (Union.union (Set.iUnion fun i => Set.Icc x (Function.update y i (x' i))) (Set.iUnion fun i => Set.Icc (Function.update x i (y' i)) y))","decl":"/-- If `x`, `y`, `x'`, and `y'` are functions `Π i : ι, α i`, then\nthe set difference between the box `[x, y]` and the product of the open intervals `(x' i, y' i)`\nis covered by the union of the following boxes: for each `i : ι`, we take\n`[x, update y i (x' i)]` and `[update x i (y' i), y]`.\n\nE.g., if `x' = x` and `y' = y`, then this lemma states that the difference between a closed box\n`[x, y]` and the corresponding open box `{z | ∀ i, x i < z i < y i}` is covered by the union\nof the faces of `[x, y]`. -/\ntheorem Icc_diff_pi_univ_Ioo_subset (x y x' y' : ∀ i, α i) :\n    (Icc x y \\ pi univ fun i ↦ Ioo (x' i) (y' i)) ⊆\n    (⋃ i : ι, Icc x (update y i (x' i))) ∪ ⋃ i : ι, Icc (update x i (y' i)) y := by\n  rintro a ⟨⟨hxa, hay⟩, ha'⟩\n  simp only [mem_pi, mem_univ, mem_Ioo, true_implies, not_forall] at ha'\n  simp only [le_update_iff, update_le_iff, mem_union, mem_iUnion, mem_Icc,\n    hxa, hay _, hxa _, hay, ← exists_or]\n  rcases ha' with ⟨w, hw⟩\n  apply Exists.intro w\n  cases lt_or_le (x' w) (a w) <;> simp_all\n\n"}
{"name":"Set.Icc_diff_pi_univ_Ioc_subset","module":"Mathlib.Order.Interval.Set.Pi","initialProofState":"ι : Type u_1\nα : ι → Type u_2\ninst✝¹ : DecidableEq ι\ninst✝ : (i : ι) → LinearOrder (α i)\nx y z : (i : ι) → α i\n⊢ HasSubset.Subset (SDiff.sdiff (Set.Icc x z) (Set.univ.pi fun i => Set.Ioc (y i) (z i))) (Set.iUnion fun i => Set.Icc x (Function.update z i (y i)))","decl":"/-- If `x`, `y`, `z` are functions `Π i : ι, α i`, then\nthe set difference between the box `[x, z]` and the product of the intervals `(y i, z i]`\nis covered by the union of the boxes `[x, update z i (y i)]`.\n\nE.g., if `x = y`, then this lemma states that the difference between a closed box\n`[x, y]` and the product of half-open intervals `{z | ∀ i, x i < z i ≤ y i}` is covered by the union\nof the faces of `[x, y]` adjacent to `x`. -/\ntheorem Icc_diff_pi_univ_Ioc_subset (x y z : ∀ i, α i) :\n    (Icc x z \\ pi univ fun i ↦ Ioc (y i) (z i)) ⊆ ⋃ i : ι, Icc x (update z i (y i)) := by\n  rintro a ⟨⟨hax, haz⟩, hay⟩\n  simpa [not_and_or, hax, le_update_iff, haz _] using hay\n\n"}
