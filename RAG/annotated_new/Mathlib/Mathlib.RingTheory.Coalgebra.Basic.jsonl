{"name":"Coalgebra.Repr.mk.injEq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\na : A\nι✝ : Type u_1\nindex✝ : Finset ι✝\nleft✝ right✝ : ι✝ → A\neq✝ : Eq (index✝.sum fun i => TensorProduct.tmul R (left✝ i) (right✝ i)) (CoalgebraStruct.comul a)\nι : Type u_1\nindex : Finset ι\nleft right : ι → A\neq : Eq (index.sum fun i => TensorProduct.tmul R (left i) (right i)) (CoalgebraStruct.comul a)\n⊢ Eq (Eq (Coalgebra.Repr.mk index✝ left✝ right✝ eq✝) (Coalgebra.Repr.mk index left right eq)) (And (Eq ι✝ ι) (And (HEq index✝ index) (And (HEq left✝ left) (HEq right✝ right))))","decl":"/--\nA representation of an element `a` of a coalgebra `A` is a finite sum of pure tensors `∑ xᵢ ⊗ yᵢ`\nthat is equal to `comul a`.\n-/\nstructure Coalgebra.Repr (R : Type u) {A : Type v}\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [CoalgebraStruct R A] (a : A) where\n  /-- the indexing type of a representation of `comul a` -/\n  {ι : Type*}\n  /-- the finite indexing set of a representation of `comul a` -/\n  (index : Finset ι)\n  /-- the first coordinate of a representation of `comul a` -/\n  (left : ι → A)\n  /-- the second coordinate of a representation of `comul a` -/\n  (right : ι → A)\n  /-- `comul a` is equal to a finite sum of some pure tensors -/\n  (eq : ∑ i ∈ index, left i ⊗ₜ[R] right i = CoalgebraStruct.comul a)\n\n"}
{"name":"Coalgebra.Repr.eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\na : A\nself : Coalgebra.Repr R a\n⊢ Eq (self.index.sum fun i => TensorProduct.tmul R (self.left i) (self.right i)) (CoalgebraStruct.comul a)","decl":"/--\nA representation of an element `a` of a coalgebra `A` is a finite sum of pure tensors `∑ xᵢ ⊗ yᵢ`\nthat is equal to `comul a`.\n-/\nstructure Coalgebra.Repr (R : Type u) {A : Type v}\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [CoalgebraStruct R A] (a : A) where\n  /-- the indexing type of a representation of `comul a` -/\n  {ι : Type*}\n  /-- the finite indexing set of a representation of `comul a` -/\n  (index : Finset ι)\n  /-- the first coordinate of a representation of `comul a` -/\n  (left : ι → A)\n  /-- the second coordinate of a representation of `comul a` -/\n  (right : ι → A)\n  /-- `comul a` is equal to a finite sum of some pure tensors -/\n  (eq : ∑ i ∈ index, left i ⊗ₜ[R] right i = CoalgebraStruct.comul a)\n\n"}
{"name":"Coalgebra.Repr.mk.sizeOf_spec","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁵ : CommSemiring R\ninst✝⁴ : AddCommMonoid A\ninst✝³ : Module R A\ninst✝² : CoalgebraStruct R A\na : A\ninst✝¹ : SizeOf R\ninst✝ : SizeOf A\nι : Type u_1\nindex : Finset ι\nleft right : ι → A\neq : Eq (index.sum fun i => TensorProduct.tmul R (left i) (right i)) (CoalgebraStruct.comul a)\n⊢ Eq (SizeOf.sizeOf (Coalgebra.Repr.mk index left right eq)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf ι)) (SizeOf.sizeOf index)) (SizeOf.sizeOf eq))","decl":"/--\nA representation of an element `a` of a coalgebra `A` is a finite sum of pure tensors `∑ xᵢ ⊗ yᵢ`\nthat is equal to `comul a`.\n-/\nstructure Coalgebra.Repr (R : Type u) {A : Type v}\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [CoalgebraStruct R A] (a : A) where\n  /-- the indexing type of a representation of `comul a` -/\n  {ι : Type*}\n  /-- the finite indexing set of a representation of `comul a` -/\n  (index : Finset ι)\n  /-- the first coordinate of a representation of `comul a` -/\n  (left : ι → A)\n  /-- the second coordinate of a representation of `comul a` -/\n  (right : ι → A)\n  /-- `comul a` is equal to a finite sum of some pure tensors -/\n  (eq : ∑ i ∈ index, left i ⊗ₜ[R] right i = CoalgebraStruct.comul a)\n\n"}
{"name":"Coalgebra.Repr.mk.inj","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : CoalgebraStruct R A\na : A\nι✝ : Type u_1\nindex✝ : Finset ι✝\nleft✝ right✝ : ι✝ → A\neq✝ : Eq (index✝.sum fun i => TensorProduct.tmul R (left✝ i) (right✝ i)) (CoalgebraStruct.comul a)\nι : Type u_1\nindex : Finset ι\nleft right : ι → A\neq : Eq (index.sum fun i => TensorProduct.tmul R (left i) (right i)) (CoalgebraStruct.comul a)\nx✝ : Eq (Coalgebra.Repr.mk index✝ left✝ right✝ eq✝) (Coalgebra.Repr.mk index left right eq)\n⊢ And (Eq ι✝ ι) (And (HEq index✝ index) (And (HEq left✝ left) (HEq right✝ right)))","decl":"/--\nA representation of an element `a` of a coalgebra `A` is a finite sum of pure tensors `∑ xᵢ ⊗ yᵢ`\nthat is equal to `comul a`.\n-/\nstructure Coalgebra.Repr (R : Type u) {A : Type v}\n    [CommSemiring R] [AddCommMonoid A] [Module R A] [CoalgebraStruct R A] (a : A) where\n  /-- the indexing type of a representation of `comul a` -/\n  {ι : Type*}\n  /-- the finite indexing set of a representation of `comul a` -/\n  (index : Finset ι)\n  /-- the first coordinate of a representation of `comul a` -/\n  (left : ι → A)\n  /-- the second coordinate of a representation of `comul a` -/\n  (right : ι → A)\n  /-- `comul a` is equal to a finite sum of some pure tensors -/\n  (eq : ∑ i ∈ index, left i ⊗ₜ[R] right i = CoalgebraStruct.comul a)\n\n"}
{"name":"Coalgebra.rTensor_counit_comp_comul","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid A\ninst✝ : Module R A\nself : Coalgebra R A\n⊢ Eq ((LinearMap.rTensor A CoalgebraStruct.counit).comp CoalgebraStruct.comul) ((TensorProduct.mk R R A) 1)","decl":"/-- A coalgebra over a commutative (semi)ring `R` is an `R`-module equipped with a coassociative\ncomultiplication `Δ` and a counit `ε` obeying the left and right counitality laws. -/\nclass Coalgebra (R : Type u) (A : Type v)\n    [CommSemiring R] [AddCommMonoid A] [Module R A] extends CoalgebraStruct R A where\n  /-- The comultiplication is coassociative -/\n  coassoc : TensorProduct.assoc R A A A ∘ₗ comul.rTensor A ∘ₗ comul = comul.lTensor A ∘ₗ comul\n  /-- The counit satisfies the left counitality law -/\n  rTensor_counit_comp_comul : counit.rTensor A ∘ₗ comul = TensorProduct.mk R _ _ 1\n  /-- The counit satisfies the right counitality law -/\n  lTensor_counit_comp_comul : counit.lTensor A ∘ₗ comul = (TensorProduct.mk R _ _).flip 1\n\n"}
{"name":"Coalgebra.lTensor_counit_comp_comul","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid A\ninst✝ : Module R A\nself : Coalgebra R A\n⊢ Eq ((LinearMap.lTensor A CoalgebraStruct.counit).comp CoalgebraStruct.comul) ((TensorProduct.mk R A R).flip 1)","decl":"/-- A coalgebra over a commutative (semi)ring `R` is an `R`-module equipped with a coassociative\ncomultiplication `Δ` and a counit `ε` obeying the left and right counitality laws. -/\nclass Coalgebra (R : Type u) (A : Type v)\n    [CommSemiring R] [AddCommMonoid A] [Module R A] extends CoalgebraStruct R A where\n  /-- The comultiplication is coassociative -/\n  coassoc : TensorProduct.assoc R A A A ∘ₗ comul.rTensor A ∘ₗ comul = comul.lTensor A ∘ₗ comul\n  /-- The counit satisfies the left counitality law -/\n  rTensor_counit_comp_comul : counit.rTensor A ∘ₗ comul = TensorProduct.mk R _ _ 1\n  /-- The counit satisfies the right counitality law -/\n  lTensor_counit_comp_comul : counit.lTensor A ∘ₗ comul = (TensorProduct.mk R _ _).flip 1\n\n"}
{"name":"Coalgebra.coassoc","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid A\ninst✝ : Module R A\nself : Coalgebra R A\n⊢ Eq ((↑(TensorProduct.assoc R A A A)).comp ((LinearMap.rTensor A CoalgebraStruct.comul).comp CoalgebraStruct.comul)) ((LinearMap.lTensor A CoalgebraStruct.comul).comp CoalgebraStruct.comul)","decl":"/-- A coalgebra over a commutative (semi)ring `R` is an `R`-module equipped with a coassociative\ncomultiplication `Δ` and a counit `ε` obeying the left and right counitality laws. -/\nclass Coalgebra (R : Type u) (A : Type v)\n    [CommSemiring R] [AddCommMonoid A] [Module R A] extends CoalgebraStruct R A where\n  /-- The comultiplication is coassociative -/\n  coassoc : TensorProduct.assoc R A A A ∘ₗ comul.rTensor A ∘ₗ comul = comul.lTensor A ∘ₗ comul\n  /-- The counit satisfies the left counitality law -/\n  rTensor_counit_comp_comul : counit.rTensor A ∘ₗ comul = TensorProduct.mk R _ _ 1\n  /-- The counit satisfies the right counitality law -/\n  lTensor_counit_comp_comul : counit.lTensor A ∘ₗ comul = (TensorProduct.mk R _ _).flip 1\n\n"}
{"name":"Coalgebra.coassoc_apply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\n⊢ Eq ((TensorProduct.assoc R A A A) ((LinearMap.rTensor A CoalgebraStruct.comul) (CoalgebraStruct.comul a))) ((LinearMap.lTensor A CoalgebraStruct.comul) (CoalgebraStruct.comul a))","decl":"@[simp]\ntheorem coassoc_apply (a : A) :\n    TensorProduct.assoc R A A A (comul.rTensor A (comul a)) = comul.lTensor A (comul a) :=\n  LinearMap.congr_fun coassoc a\n\n"}
{"name":"Coalgebra.coassoc_symm_apply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\n⊢ Eq ((TensorProduct.assoc R A A A).symm ((LinearMap.lTensor A CoalgebraStruct.comul) (CoalgebraStruct.comul a))) ((LinearMap.rTensor A CoalgebraStruct.comul) (CoalgebraStruct.comul a))","decl":"@[simp]\ntheorem coassoc_symm_apply (a : A) :\n    (TensorProduct.assoc R A A A).symm (comul.lTensor A (comul a)) = comul.rTensor A (comul a) := by\n  rw [(TensorProduct.assoc R A A A).symm_apply_eq, coassoc_apply a]\n\n"}
{"name":"Coalgebra.coassoc_symm","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\n⊢ Eq ((↑(TensorProduct.assoc R A A A).symm).comp ((LinearMap.lTensor A CoalgebraStruct.comul).comp CoalgebraStruct.comul)) ((LinearMap.rTensor A CoalgebraStruct.comul).comp CoalgebraStruct.comul)","decl":"@[simp]\ntheorem coassoc_symm :\n    (TensorProduct.assoc R A A A).symm ∘ₗ comul.lTensor A ∘ₗ comul =\n    comul.rTensor A ∘ₗ (comul (R := R)) :=\n  LinearMap.ext coassoc_symm_apply\n\n"}
{"name":"Coalgebra.rTensor_counit_comul","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\n⊢ Eq ((LinearMap.rTensor A CoalgebraStruct.counit) (CoalgebraStruct.comul a)) (TensorProduct.tmul R 1 a)","decl":"@[simp]\ntheorem rTensor_counit_comul (a : A) : counit.rTensor A (comul a) = 1 ⊗ₜ[R] a :=\n  LinearMap.congr_fun rTensor_counit_comp_comul a\n\n"}
{"name":"Coalgebra.lTensor_counit_comul","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\n⊢ Eq ((LinearMap.lTensor A CoalgebraStruct.counit) (CoalgebraStruct.comul a)) (TensorProduct.tmul R a 1)","decl":"@[simp]\ntheorem lTensor_counit_comul (a : A) : counit.lTensor A (comul a) = a ⊗ₜ[R] 1 :=\n  LinearMap.congr_fun lTensor_counit_comp_comul a\n\n"}
{"name":"Coalgebra.sum_counit_tmul_eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\nrepr : Coalgebra.Repr R a\n⊢ Eq (repr.index.sum fun i => TensorProduct.tmul R (CoalgebraStruct.counit (repr.left i)) (repr.right i)) (TensorProduct.tmul R 1 a)","decl":"@[simp]\nlemma sum_counit_tmul_eq {a : A} (repr : Coalgebra.Repr R a) :\n    ∑ i ∈ repr.index, counit (R := R) (repr.left i) ⊗ₜ (repr.right i) = 1 ⊗ₜ[R] a := by\n  simpa [← repr.eq, map_sum] using congr($(rTensor_counit_comp_comul (R := R) (A := A)) a)\n\n"}
{"name":"Coalgebra.sum_tmul_counit_eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\nrepr : Coalgebra.Repr R a\n⊢ Eq (repr.index.sum fun i => TensorProduct.tmul R (repr.left i) (CoalgebraStruct.counit (repr.right i))) (TensorProduct.tmul R a 1)","decl":"@[simp]\nlemma sum_tmul_counit_eq {a : A} (repr : Coalgebra.Repr R a) :\n    ∑ i ∈ repr.index, (repr.left i) ⊗ₜ counit (R := R) (repr.right i) = a ⊗ₜ[R] 1 := by\n  simpa [← repr.eq, map_sum] using congr($(lTensor_counit_comp_comul (R := R) (A := A)) a)\n\n"}
{"name":"Coalgebra.sum_tmul_tmul_eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\na : A\nrepr : Coalgebra.Repr R a\na₁ : (i : repr.ι) → Coalgebra.Repr R (repr.left i)\na₂ : (i : repr.ι) → Coalgebra.Repr R (repr.right i)\n⊢ Eq (repr.index.sum fun i => (a₁ i).index.sum fun j => TensorProduct.tmul R ((a₁ i).left j) (TensorProduct.tmul R ((a₁ i).right j) (repr.right i))) (repr.index.sum fun i => (a₂ i).index.sum fun j => TensorProduct.tmul R (repr.left i) (TensorProduct.tmul R ((a₂ i).left j) ((a₂ i).right j)))","decl":"@[simp]\nlemma sum_tmul_tmul_eq {a : A} (repr : Repr R a)\n    (a₁ : (i : repr.ι) → Repr R (repr.left i)) (a₂ : (i : repr.ι) → Repr R (repr.right i)) :\n    ∑ i ∈ repr.index, ∑ j ∈ (a₁ i).index,\n      (a₁ i).left j ⊗ₜ[R] (a₁ i).right j ⊗ₜ[R] repr.right i\n      = ∑ i ∈ repr.index, ∑ j ∈ (a₂ i).index,\n      repr.left i ⊗ₜ[R] (a₂ i).left j ⊗ₜ[R] (a₂ i).right j := by\n  simpa [(a₂ _).eq, ← (a₁ _).eq, ← TensorProduct.tmul_sum,\n    TensorProduct.sum_tmul, ← repr.eq] using congr($(coassoc (R := R)) a)\n\n"}
{"name":"Coalgebra.sum_counit_tmul_map_eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : Module R A\ninst✝⁴ : Coalgebra R A\nB : Type u_1\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\nF : Type u_2\ninst✝¹ : FunLike F A B\ninst✝ : LinearMapClass F R A B\nf : F\na : A\nrepr : Coalgebra.Repr R a\n⊢ Eq (repr.index.sum fun i => TensorProduct.tmul R (CoalgebraStruct.counit (repr.left i)) (f (repr.right i))) (TensorProduct.tmul R 1 (f a))","decl":"@[simp]\ntheorem sum_counit_tmul_map_eq {B : Type*} [AddCommMonoid B] [Module R B]\n    {F : Type*} [FunLike F A B] [LinearMapClass F R A B] (f : F) (a : A) {repr : Repr R a} :\n    ∑ i ∈ repr.index, counit (R := R) (repr.left i) ⊗ₜ f (repr.right i) = 1 ⊗ₜ[R] f a := by\n  have := sum_counit_tmul_eq repr\n  apply_fun LinearMap.lTensor R (f : A →ₗ[R] B) at this\n  simp_all only [map_sum, LinearMap.lTensor_tmul, LinearMap.coe_coe]\n\n"}
{"name":"Coalgebra.sum_map_tmul_counit_eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : Module R A\ninst✝⁴ : Coalgebra R A\nB : Type u_1\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\nF : Type u_2\ninst✝¹ : FunLike F A B\ninst✝ : LinearMapClass F R A B\nf : F\na : A\nrepr : Coalgebra.Repr R a\n⊢ Eq (repr.index.sum fun i => TensorProduct.tmul R (f (repr.left i)) (CoalgebraStruct.counit (repr.right i))) (TensorProduct.tmul R (f a) 1)","decl":"@[simp]\ntheorem sum_map_tmul_counit_eq {B : Type*} [AddCommMonoid B] [Module R B]\n    {F : Type*} [FunLike F A B] [LinearMapClass F R A B] (f : F) (a : A) {repr : Repr R a} :\n    ∑ i ∈ repr.index, f (repr.left i) ⊗ₜ counit (R := R) (repr.right i) = f a ⊗ₜ[R] 1 := by\n  have := sum_tmul_counit_eq repr\n  apply_fun LinearMap.rTensor R (f : A →ₗ[R] B) at this\n  simp_all only [map_sum, LinearMap.rTensor_tmul, LinearMap.coe_coe]\n\n"}
{"name":"Coalgebra.sum_map_tmul_tmul_eq","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid A\ninst✝⁵ : Module R A\ninst✝⁴ : Coalgebra R A\nB : Type u_1\ninst✝³ : AddCommMonoid B\ninst✝² : Module R B\nF : Type u_2\ninst✝¹ : FunLike F A B\ninst✝ : LinearMapClass F R A B\nf g h : F\na : A\nrepr : Coalgebra.Repr R a\na₁ : (i : repr.ι) → Coalgebra.Repr R (repr.left i)\na₂ : (i : repr.ι) → Coalgebra.Repr R (repr.right i)\n⊢ Eq (repr.index.sum fun i => (a₂ i).index.sum fun j => TensorProduct.tmul R (f (repr.left i)) (TensorProduct.tmul R (g ((a₂ i).left j)) (h ((a₂ i).right j)))) (repr.index.sum fun i => (a₁ i).index.sum fun j => TensorProduct.tmul R (f ((a₁ i).left j)) (TensorProduct.tmul R (g ((a₁ i).right j)) (h (repr.right i))))","decl":"@[simp]\ntheorem sum_map_tmul_tmul_eq {B : Type*} [AddCommMonoid B] [Module R B]\n    {F : Type*} [FunLike F A B] [LinearMapClass F R A B] (f g h : F) (a : A) {repr : Repr R a}\n    {a₁ : (i : repr.ι) → Repr R (repr.left i)} {a₂ : (i : repr.ι) → Repr R (repr.right i)} :\n    ∑ i ∈ repr.index, ∑ j ∈ (a₂ i).index,\n      f (repr.left i) ⊗ₜ (g ((a₂ i).left j) ⊗ₜ h ((a₂ i).right j)) =\n    ∑ i ∈ repr.index, ∑ j ∈ (a₁ i).index,\n      f ((a₁ i).left j) ⊗ₜ[R] (g ((a₁ i).right j) ⊗ₜ[R] h (repr.right i)) := by\n  have := sum_tmul_tmul_eq repr a₁ a₂\n  apply_fun TensorProduct.map (f : A →ₗ[R] B)\n    (TensorProduct.map (g : A →ₗ[R] B) (h : A →ₗ[R] B)) at this\n  simp_all only [map_sum, TensorProduct.map_tmul, LinearMap.coe_coe]\n\n"}
{"name":"CommSemiring.comul_apply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\ninst✝ : CommSemiring R\nr : R\n⊢ Eq (CoalgebraStruct.comul r) (TensorProduct.tmul R 1 r)","decl":"@[simp]\ntheorem comul_apply (r : R) : comul r = 1 ⊗ₜ[R] r := rfl\n\n"}
{"name":"CommSemiring.counit_apply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\ninst✝ : CommSemiring R\nr : R\n⊢ Eq (CoalgebraStruct.counit r) r","decl":"@[simp]\ntheorem counit_apply (r : R) : counit r = r := rfl\n\n"}
{"name":"Prod.comul_apply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\nr : Prod A B\n⊢ Eq (CoalgebraStruct.comul r) (HAdd.hAdd ((TensorProduct.map (LinearMap.inl R A B) (LinearMap.inl R A B)) (CoalgebraStruct.comul r.1)) ((TensorProduct.map (LinearMap.inr R A B) (LinearMap.inr R A B)) (CoalgebraStruct.comul r.2)))","decl":"@[simp]\ntheorem comul_apply (r : A × B) :\n    comul r =\n      TensorProduct.map (.inl R A B) (.inl R A B) (comul r.1) +\n      TensorProduct.map (.inr R A B) (.inr R A B) (comul r.2) := rfl\n\n"}
{"name":"Prod.counit_apply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\nr : Prod A B\n⊢ Eq (CoalgebraStruct.counit r) (HAdd.hAdd (CoalgebraStruct.counit r.1) (CoalgebraStruct.counit r.2))","decl":"@[simp]\ntheorem counit_apply (r : A × B) : (counit r : R) = counit r.1 + counit r.2 := rfl\n\n"}
{"name":"Prod.comul_comp_inl","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\n⊢ Eq (CoalgebraStruct.comul.comp (LinearMap.inl R A B)) ((TensorProduct.map (LinearMap.inl R A B) (LinearMap.inl R A B)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_inl :\n    comul ∘ₗ inl R A B = TensorProduct.map (.inl R A B) (.inl R A B) ∘ₗ comul := by\n  ext; simp\n\n"}
{"name":"Prod.comul_comp_inr","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\n⊢ Eq (CoalgebraStruct.comul.comp (LinearMap.inr R A B)) ((TensorProduct.map (LinearMap.inr R A B) (LinearMap.inr R A B)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_inr :\n    comul ∘ₗ inr R A B = TensorProduct.map (.inr R A B) (.inr R A B) ∘ₗ comul := by\n  ext; simp\n\n"}
{"name":"Prod.comul_comp_fst","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\n⊢ Eq (CoalgebraStruct.comul.comp (LinearMap.fst R A B)) ((TensorProduct.map (LinearMap.fst R A B) (LinearMap.fst R A B)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_fst :\n    comul ∘ₗ .fst R A B = TensorProduct.map (.fst R A B) (.fst R A B) ∘ₗ comul := by\n  ext : 1\n  · rw [comp_assoc, fst_comp_inl, comp_id, comp_assoc, comul_comp_inl, ← comp_assoc,\n      ← TensorProduct.map_comp, fst_comp_inl, TensorProduct.map_id, id_comp]\n  · rw [comp_assoc, fst_comp_inr, comp_zero, comp_assoc, comul_comp_inr, ← comp_assoc,\n      ← TensorProduct.map_comp, fst_comp_inr, TensorProduct.map_zero_left, zero_comp]\n\n"}
{"name":"Prod.comul_comp_snd","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\n⊢ Eq (CoalgebraStruct.comul.comp (LinearMap.snd R A B)) ((TensorProduct.map (LinearMap.snd R A B) (LinearMap.snd R A B)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_snd :\n    comul ∘ₗ .snd R A B = TensorProduct.map (.snd R A B) (.snd R A B) ∘ₗ comul := by\n  ext : 1\n  · rw [comp_assoc, snd_comp_inl, comp_zero, comp_assoc, comul_comp_inl, ← comp_assoc,\n      ← TensorProduct.map_comp, snd_comp_inl, TensorProduct.map_zero_left, zero_comp]\n  · rw [comp_assoc, snd_comp_inr, comp_id, comp_assoc, comul_comp_inr, ← comp_assoc,\n      ← TensorProduct.map_comp, snd_comp_inr, TensorProduct.map_id, id_comp]\n\n"}
{"name":"Prod.counit_comp_inr","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\n⊢ Eq (CoalgebraStruct.counit.comp (LinearMap.inr R A B)) CoalgebraStruct.counit","decl":"@[simp] theorem counit_comp_inr : counit ∘ₗ inr R A B = counit := by ext; simp\n\n"}
{"name":"Prod.counit_comp_inl","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : Coalgebra R A\ninst✝ : Coalgebra R B\n⊢ Eq (CoalgebraStruct.counit.comp (LinearMap.inl R A B)) CoalgebraStruct.counit","decl":"@[simp] theorem counit_comp_inl : counit ∘ₗ inl R A B = counit := by ext; simp\n\n"}
{"name":"DFinsupp.comul_single","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : ι → Type w\ninst✝⁴ : DecidableEq ι\ninst✝³ : CommSemiring R\ninst✝² : (i : ι) → AddCommMonoid (A i)\ninst✝¹ : (i : ι) → Module R (A i)\ninst✝ : (i : ι) → Coalgebra R (A i)\ni : ι\na : A i\n⊢ Eq (CoalgebraStruct.comul (DFinsupp.single i a)) ((TensorProduct.map (DFinsupp.lsingle i) (DFinsupp.lsingle i)) (CoalgebraStruct.comul a))","decl":"@[simp]\ntheorem comul_single (i : ι) (a : A i) :\n    comul (R := R) (DFinsupp.single i a) =\n      (TensorProduct.map (DFinsupp.lsingle i) (DFinsupp.lsingle i) : _ →ₗ[R] _) (comul a) :=\n  lsum_single _ _ _ _\n\n"}
{"name":"DFinsupp.counit_single","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : ι → Type w\ninst✝⁴ : DecidableEq ι\ninst✝³ : CommSemiring R\ninst✝² : (i : ι) → AddCommMonoid (A i)\ninst✝¹ : (i : ι) → Module R (A i)\ninst✝ : (i : ι) → Coalgebra R (A i)\ni : ι\na : A i\n⊢ Eq (CoalgebraStruct.counit (DFinsupp.single i a)) (CoalgebraStruct.counit a)","decl":"@[simp]\ntheorem counit_single (i : ι) (a : A i) : counit (DFinsupp.single i a) = counit (R := R) a :=\n  lsum_single _ _ _ _\n\n"}
{"name":"DFinsupp.comul_comp_lsingle","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : ι → Type w\ninst✝⁴ : DecidableEq ι\ninst✝³ : CommSemiring R\ninst✝² : (i : ι) → AddCommMonoid (A i)\ninst✝¹ : (i : ι) → Module R (A i)\ninst✝ : (i : ι) → Coalgebra R (A i)\ni : ι\n⊢ Eq (CoalgebraStruct.comul.comp (DFinsupp.lsingle i)) ((TensorProduct.map (DFinsupp.lsingle i) (DFinsupp.lsingle i)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_lsingle (i : ι) :\n    comul ∘ₗ (lsingle i : A i →ₗ[R] _) = TensorProduct.map (lsingle i) (lsingle i) ∘ₗ comul := by\n  ext; simp\n\n"}
{"name":"DFinsupp.comul_comp_lapply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : ι → Type w\ninst✝⁴ : DecidableEq ι\ninst✝³ : CommSemiring R\ninst✝² : (i : ι) → AddCommMonoid (A i)\ninst✝¹ : (i : ι) → Module R (A i)\ninst✝ : (i : ι) → Coalgebra R (A i)\ni : ι\n⊢ Eq (CoalgebraStruct.comul.comp (DFinsupp.lapply i)) ((TensorProduct.map (DFinsupp.lapply i) (DFinsupp.lapply i)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_lapply (i : ι) :\n    comul ∘ₗ (lapply i : _ →ₗ[R] A i) = TensorProduct.map (lapply i) (lapply i) ∘ₗ comul := by\n  ext j : 1\n  conv_rhs => rw [comp_assoc, comul_comp_lsingle, ← comp_assoc, ← TensorProduct.map_comp]\n  obtain rfl | hij := eq_or_ne i j\n  · rw [comp_assoc, lapply_comp_lsingle_same, comp_id,  TensorProduct.map_id, id_comp]\n  · rw [comp_assoc, lapply_comp_lsingle_of_ne _ _ hij, comp_zero, TensorProduct.map_zero_left,\n      zero_comp]\n\n"}
{"name":"DFinsupp.counit_comp_lsingle","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : ι → Type w\ninst✝⁴ : DecidableEq ι\ninst✝³ : CommSemiring R\ninst✝² : (i : ι) → AddCommMonoid (A i)\ninst✝¹ : (i : ι) → Module R (A i)\ninst✝ : (i : ι) → Coalgebra R (A i)\ni : ι\n⊢ Eq (CoalgebraStruct.counit.comp (DFinsupp.lsingle i)) CoalgebraStruct.counit","decl":"@[simp] theorem counit_comp_lsingle (i : ι) : counit ∘ₗ (lsingle i : A i →ₗ[R] _) = counit := by\n  ext; simp\n\n"}
{"name":"Finsupp.comul_single","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\ni : ι\na : A\n⊢ Eq (CoalgebraStruct.comul (Finsupp.single i a)) ((TensorProduct.map (Finsupp.lsingle i) (Finsupp.lsingle i)) (CoalgebraStruct.comul a))","decl":"@[simp]\ntheorem comul_single (i : ι) (a : A) :\n    comul (R := R) (Finsupp.single i a) =\n      (TensorProduct.map (Finsupp.lsingle i) (Finsupp.lsingle i) : _ →ₗ[R] _) (comul a) :=\n  lsum_single _ _ _ _\n\n"}
{"name":"Finsupp.counit_single","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\ni : ι\na : A\n⊢ Eq (CoalgebraStruct.counit (Finsupp.single i a)) (CoalgebraStruct.counit a)","decl":"@[simp]\ntheorem counit_single (i : ι) (a : A) : counit (Finsupp.single i a) = counit (R := R) a :=\n  lsum_single _ _ _ _\n\n"}
{"name":"Finsupp.comul_comp_lsingle","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\ni : ι\n⊢ Eq (CoalgebraStruct.comul.comp (Finsupp.lsingle i)) ((TensorProduct.map (Finsupp.lsingle i) (Finsupp.lsingle i)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_lsingle (i : ι) :\n    comul ∘ₗ (lsingle i : A →ₗ[R] _) = TensorProduct.map (lsingle i) (lsingle i) ∘ₗ comul := by\n  ext; simp\n\n"}
{"name":"Finsupp.comul_comp_lapply","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\ni : ι\n⊢ Eq (CoalgebraStruct.comul.comp (Finsupp.lapply i)) ((TensorProduct.map (Finsupp.lapply i) (Finsupp.lapply i)).comp CoalgebraStruct.comul)","decl":"theorem comul_comp_lapply (i : ι) :\n    comul ∘ₗ (lapply i : _ →ₗ[R] A) = TensorProduct.map (lapply i) (lapply i) ∘ₗ comul := by\n  ext j : 1\n  conv_rhs => rw [comp_assoc, comul_comp_lsingle, ← comp_assoc, ← TensorProduct.map_comp]\n  obtain rfl | hij := eq_or_ne i j\n  · rw [comp_assoc, lapply_comp_lsingle_same, comp_id,  TensorProduct.map_id, id_comp]\n  · rw [comp_assoc, lapply_comp_lsingle_of_ne _ _ hij, comp_zero, TensorProduct.map_zero_left,\n      zero_comp]\n\n"}
{"name":"Finsupp.counit_comp_lsingle","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u\nι : Type v\nA : Type w\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid A\ninst✝¹ : Module R A\ninst✝ : Coalgebra R A\ni : ι\n⊢ Eq (CoalgebraStruct.counit.comp (Finsupp.lsingle i)) CoalgebraStruct.counit","decl":"@[simp] theorem counit_comp_lsingle (i : ι) : counit ∘ₗ (lsingle i : A →ₗ[R] _) = counit := by\n  ext; simp\n\n"}
{"name":"TensorProduct.instCoalgebraStruct_comul","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Eq CoalgebraStruct.comul ((↑(TensorProduct.tensorTensorTensorComm R A A B B)).comp (TensorProduct.map CoalgebraStruct.comul CoalgebraStruct.comul))","decl":"/-- See `Mathlib.RingTheory.Coalgebra.TensorProduct` for the `Coalgebra` instance. -/\n@[simps] instance instCoalgebraStruct :\n    CoalgebraStruct R (A ⊗[R] B) where\n  comul := TensorProduct.tensorTensorTensorComm R A A B B ∘ₗ TensorProduct.map comul comul\n  counit := LinearMap.mul' R R ∘ₗ TensorProduct.map counit counit\n\n"}
{"name":"TensorProduct.instCoalgebraStruct_counit","module":"Mathlib.RingTheory.Coalgebra.Basic","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : Module R A\ninst✝² : Module R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Eq CoalgebraStruct.counit ((LinearMap.mul' R R).comp (TensorProduct.map CoalgebraStruct.counit CoalgebraStruct.counit))","decl":"/-- See `Mathlib.RingTheory.Coalgebra.TensorProduct` for the `Coalgebra` instance. -/\n@[simps] instance instCoalgebraStruct :\n    CoalgebraStruct R (A ⊗[R] B) where\n  comul := TensorProduct.tensorTensorTensorComm R A A B B ∘ₗ TensorProduct.map comul comul\n  counit := LinearMap.mul' R R ∘ₗ TensorProduct.map counit counit\n\n"}
