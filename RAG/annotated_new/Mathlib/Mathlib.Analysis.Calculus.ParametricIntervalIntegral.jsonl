{"name":"intervalIntegral.hasFDerivAt_integral_of_dominated_loc_of_lip","module":"Mathlib.Analysis.Calculus.ParametricIntervalIntegral","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : RCLike 𝕜\nμ : MeasureTheory.Measure Real\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedSpace 𝕜 E\nH : Type u_3\ninst✝¹ : NormedAddCommGroup H\ninst✝ : NormedSpace 𝕜 H\na b ε : Real\nbound : Real → Real\nF : H → Real → E\nF' : Real → ContinuousLinearMap (RingHom.id 𝕜) H E\nx₀ : H\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) (μ.restrict (Set.uIoc a b))) (nhds x₀)\nhF_int : IntervalIntegrable (F x₀) μ a b\nhF'_meas : MeasureTheory.AEStronglyMeasurable F' (μ.restrict (Set.uIoc a b))\nh_lip : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → LipschitzOnWith (Real.nnabs (bound t)) (fun x => F x t) (Metric.ball x₀ ε)) (MeasureTheory.ae μ)\nbound_integrable : IntervalIntegrable bound μ a b\nh_diff : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → HasFDerivAt (fun x => F x t) (F' t) x₀) (MeasureTheory.ae μ)\n⊢ And (IntervalIntegrable F' μ a b) (HasFDerivAt (fun x => intervalIntegral (fun t => F x t) a b μ) (intervalIntegral (fun t => F' t) a b μ) x₀)","decl":"/-- Differentiation under integral of `x ↦ ∫ t in a..b, F x t` at a given point `x₀`, assuming\n`F x₀` is integrable, `x ↦ F x a` is locally Lipschitz on a ball around `x₀` for ae `a`\n(with a ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is ae-measurable\nfor `x` in a possibly smaller neighborhood of `x₀`. -/\nnonrec theorem hasFDerivAt_integral_of_dominated_loc_of_lip\n    {F : H → ℝ → E} {F' : ℝ → H →L[𝕜] E} {x₀ : H}\n    (ε_pos : 0 < ε) (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) (μ.restrict (Ι a b)))\n    (hF_int : IntervalIntegrable (F x₀) μ a b)\n    (hF'_meas : AEStronglyMeasurable F' (μ.restrict (Ι a b)))\n    (h_lip : ∀ᵐ t ∂μ, t ∈ Ι a b →\n      LipschitzOnWith (Real.nnabs <| bound t) (fun x => F x t) (ball x₀ ε))\n    (bound_integrable : IntervalIntegrable bound μ a b)\n    (h_diff : ∀ᵐ t ∂μ, t ∈ Ι a b → HasFDerivAt (fun x => F x t) (F' t) x₀) :\n    IntervalIntegrable F' μ a b ∧\n      HasFDerivAt (fun x => ∫ t in a..b, F x t ∂μ) (∫ t in a..b, F' t ∂μ) x₀ := by\n  rw [← ae_restrict_iff' measurableSet_uIoc] at h_lip h_diff\n  simp only [intervalIntegrable_iff] at hF_int bound_integrable ⊢\n  simp only [intervalIntegral_eq_integral_uIoc]\n  have := hasFDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas hF_int hF'_meas h_lip\n    bound_integrable h_diff\n  exact ⟨this.1, this.2.const_smul _⟩\n\n"}
{"name":"intervalIntegral.hasFDerivAt_integral_of_dominated_of_fderiv_le","module":"Mathlib.Analysis.Calculus.ParametricIntervalIntegral","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : RCLike 𝕜\nμ : MeasureTheory.Measure Real\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedSpace 𝕜 E\nH : Type u_3\ninst✝¹ : NormedAddCommGroup H\ninst✝ : NormedSpace 𝕜 H\na b ε : Real\nbound : Real → Real\nF : H → Real → E\nF' : H → Real → ContinuousLinearMap (RingHom.id 𝕜) H E\nx₀ : H\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) (μ.restrict (Set.uIoc a b))) (nhds x₀)\nhF_int : IntervalIntegrable (F x₀) μ a b\nhF'_meas : MeasureTheory.AEStronglyMeasurable (F' x₀) (μ.restrict (Set.uIoc a b))\nh_bound : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → LE.le (Norm.norm (F' x t)) (bound t)) (MeasureTheory.ae μ)\nbound_integrable : IntervalIntegrable bound μ a b\nh_diff : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → HasFDerivAt (fun x => F x t) (F' x t) x) (MeasureTheory.ae μ)\n⊢ HasFDerivAt (fun x => intervalIntegral (fun t => F x t) a b μ) (intervalIntegral (fun t => F' x₀ t) a b μ) x₀","decl":"/-- Differentiation under integral of `x ↦ ∫ F x a` at a given point `x₀`, assuming\n`F x₀` is integrable, `x ↦ F x a` is differentiable on a ball around `x₀` for ae `a` with\nderivative norm uniformly bounded by an integrable function (the ball radius is independent of `a`),\nand `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\nnonrec theorem hasFDerivAt_integral_of_dominated_of_fderiv_le\n    {F : H → ℝ → E} {F' : H → ℝ → H →L[𝕜] E} {x₀ : H} (ε_pos : 0 < ε)\n    (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) (μ.restrict (Ι a b)))\n    (hF_int : IntervalIntegrable (F x₀) μ a b)\n    (hF'_meas : AEStronglyMeasurable (F' x₀) (μ.restrict (Ι a b)))\n    (h_bound : ∀ᵐ t ∂μ, t ∈ Ι a b → ∀ x ∈ ball x₀ ε, ‖F' x t‖ ≤ bound t)\n    (bound_integrable : IntervalIntegrable bound μ a b)\n    (h_diff : ∀ᵐ t ∂μ, t ∈ Ι a b → ∀ x ∈ ball x₀ ε, HasFDerivAt (fun x => F x t) (F' x t) x) :\n    HasFDerivAt (fun x => ∫ t in a..b, F x t ∂μ) (∫ t in a..b, F' x₀ t ∂μ) x₀ := by\n  rw [← ae_restrict_iff' measurableSet_uIoc] at h_bound h_diff\n  simp only [intervalIntegrable_iff] at hF_int bound_integrable\n  simp only [intervalIntegral_eq_integral_uIoc]\n  exact (hasFDerivAt_integral_of_dominated_of_fderiv_le ε_pos hF_meas hF_int hF'_meas h_bound\n    bound_integrable h_diff).const_smul _\n\n"}
{"name":"intervalIntegral.hasDerivAt_integral_of_dominated_loc_of_lip","module":"Mathlib.Analysis.Calculus.ParametricIntervalIntegral","initialProofState":"𝕜 : Type u_1\ninst✝³ : RCLike 𝕜\nμ : MeasureTheory.Measure Real\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedSpace 𝕜 E\na b ε : Real\nbound : Real → Real\nF : 𝕜 → Real → E\nF' : Real → E\nx₀ : 𝕜\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) (μ.restrict (Set.uIoc a b))) (nhds x₀)\nhF_int : IntervalIntegrable (F x₀) μ a b\nhF'_meas : MeasureTheory.AEStronglyMeasurable F' (μ.restrict (Set.uIoc a b))\nh_lipsch : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → LipschitzOnWith (Real.nnabs (bound t)) (fun x => F x t) (Metric.ball x₀ ε)) (MeasureTheory.ae μ)\nbound_integrable : IntervalIntegrable bound μ a b\nh_diff : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → HasDerivAt (fun x => F x t) (F' t) x₀) (MeasureTheory.ae μ)\n⊢ And (IntervalIntegrable F' μ a b) (HasDerivAt (fun x => intervalIntegral (fun t => F x t) a b μ) (intervalIntegral (fun t => F' t) a b μ) x₀)","decl":"/-- Derivative under integral of `x ↦ ∫ F x a` at a given point `x₀ : 𝕜`, `𝕜 = ℝ` or `𝕜 = ℂ`,\nassuming `F x₀` is integrable, `x ↦ F x a` is locally Lipschitz on a ball around `x₀` for ae `a`\n(with ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is\nae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\nnonrec theorem hasDerivAt_integral_of_dominated_loc_of_lip {F : 𝕜 → ℝ → E} {F' : ℝ → E} {x₀ : 𝕜}\n    (ε_pos : 0 < ε) (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) (μ.restrict (Ι a b)))\n    (hF_int : IntervalIntegrable (F x₀) μ a b)\n    (hF'_meas : AEStronglyMeasurable F' (μ.restrict (Ι a b)))\n    (h_lipsch : ∀ᵐ t ∂μ, t ∈ Ι a b →\n      LipschitzOnWith (Real.nnabs <| bound t) (fun x => F x t) (ball x₀ ε))\n    (bound_integrable : IntervalIntegrable (bound : ℝ → ℝ) μ a b)\n    (h_diff : ∀ᵐ t ∂μ, t ∈ Ι a b → HasDerivAt (fun x => F x t) (F' t) x₀) :\n    IntervalIntegrable F' μ a b ∧\n      HasDerivAt (fun x => ∫ t in a..b, F x t ∂μ) (∫ t in a..b, F' t ∂μ) x₀ := by\n  rw [← ae_restrict_iff' measurableSet_uIoc] at h_lipsch h_diff\n  simp only [intervalIntegrable_iff] at hF_int bound_integrable ⊢\n  simp only [intervalIntegral_eq_integral_uIoc]\n  have := hasDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas hF_int hF'_meas h_lipsch\n    bound_integrable h_diff\n  exact ⟨this.1, this.2.const_smul _⟩\n\n"}
{"name":"intervalIntegral.hasDerivAt_integral_of_dominated_loc_of_deriv_le","module":"Mathlib.Analysis.Calculus.ParametricIntervalIntegral","initialProofState":"𝕜 : Type u_1\ninst✝³ : RCLike 𝕜\nμ : MeasureTheory.Measure Real\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedSpace 𝕜 E\na b ε : Real\nbound : Real → Real\nF F' : 𝕜 → Real → E\nx₀ : 𝕜\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) (μ.restrict (Set.uIoc a b))) (nhds x₀)\nhF_int : IntervalIntegrable (F x₀) μ a b\nhF'_meas : MeasureTheory.AEStronglyMeasurable (F' x₀) (μ.restrict (Set.uIoc a b))\nh_bound : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → ∀ (x : 𝕜), Membership.mem (Metric.ball x₀ ε) x → LE.le (Norm.norm (F' x t)) (bound t)) (MeasureTheory.ae μ)\nbound_integrable : IntervalIntegrable bound μ a b\nh_diff : Filter.Eventually (fun t => Membership.mem (Set.uIoc a b) t → ∀ (x : 𝕜), Membership.mem (Metric.ball x₀ ε) x → HasDerivAt (fun x => F x t) (F' x t) x) (MeasureTheory.ae μ)\n⊢ And (IntervalIntegrable (F' x₀) μ a b) (HasDerivAt (fun x => intervalIntegral (fun t => F x t) a b μ) (intervalIntegral (fun t => F' x₀ t) a b μ) x₀)","decl":"/-- Derivative under integral of `x ↦ ∫ F x a` at a given point `x₀ : 𝕜`, `𝕜 = ℝ` or `𝕜 = ℂ`,\nassuming `F x₀` is integrable, `x ↦ F x a` is differentiable on an interval around `x₀` for ae `a`\n(with interval radius independent of `a`) with derivative uniformly bounded by an integrable\nfunction, and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\nnonrec theorem hasDerivAt_integral_of_dominated_loc_of_deriv_le\n    {F : 𝕜 → ℝ → E} {F' : 𝕜 → ℝ → E} {x₀ : 𝕜}\n    (ε_pos : 0 < ε) (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) (μ.restrict (Ι a b)))\n    (hF_int : IntervalIntegrable (F x₀) μ a b)\n    (hF'_meas : AEStronglyMeasurable (F' x₀) (μ.restrict (Ι a b)))\n    (h_bound : ∀ᵐ t ∂μ, t ∈ Ι a b → ∀ x ∈ ball x₀ ε, ‖F' x t‖ ≤ bound t)\n    (bound_integrable : IntervalIntegrable bound μ a b)\n    (h_diff : ∀ᵐ t ∂μ, t ∈ Ι a b → ∀ x ∈ ball x₀ ε, HasDerivAt (fun x => F x t) (F' x t) x) :\n    IntervalIntegrable (F' x₀) μ a b ∧\n      HasDerivAt (fun x => ∫ t in a..b, F x t ∂μ) (∫ t in a..b, F' x₀ t ∂μ) x₀ := by\n  rw [← ae_restrict_iff' measurableSet_uIoc] at h_bound h_diff\n  simp only [intervalIntegrable_iff] at hF_int bound_integrable ⊢\n  simp only [intervalIntegral_eq_integral_uIoc]\n  have := hasDerivAt_integral_of_dominated_loc_of_deriv_le ε_pos hF_meas hF_int hF'_meas h_bound\n    bound_integrable h_diff\n  exact ⟨this.1, this.2.const_smul _⟩\n\n"}
