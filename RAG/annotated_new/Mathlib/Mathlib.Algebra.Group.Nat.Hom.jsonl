{"name":"ext_nat'","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"A : Type u_3\nF : Type u_5\ninst✝² : FunLike F Nat A\ninst✝¹ : AddMonoid A\ninst✝ : AddMonoidHomClass F Nat A\nf g : F\nh : Eq (f 1) (g 1)\n⊢ Eq f g","decl":"lemma ext_nat' [AddMonoid A] [AddMonoidHomClass F ℕ A] (f g : F) (h : f 1 = g 1) : f = g :=\n  DFunLike.ext f g <| by\n    intro n\n    induction n with\n    | zero => simp_rw [map_zero f, map_zero g]\n    | succ n ihn =>\n      simp [h, ihn]\n\n"}
{"name":"AddMonoidHom.ext_nat","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"A : Type u_3\ninst✝ : AddMonoid A\nf g : AddMonoidHom Nat A\na✝ : Eq (f 1) (g 1)\n⊢ Eq f g","decl":"@[ext]\nlemma AddMonoidHom.ext_nat [AddMonoid A] {f g : ℕ →+ A} : f 1 = g 1 → f = g :=\n  ext_nat' f g\n\n"}
{"name":"AddMonoidHom.ext_nat_iff","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"A : Type u_3\ninst✝ : AddMonoid A\nf g : AddMonoidHom Nat A\n⊢ Iff (Eq f g) (Eq (f 1) (g 1))","decl":"@[ext]\nlemma AddMonoidHom.ext_nat [AddMonoid A] {f g : ℕ →+ A} : f 1 = g 1 → f = g :=\n  ext_nat' f g\n\n"}
{"name":"multiplesHom_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : AddMonoid M\nx : M\nn : Nat\n⊢ Eq (((multiplesHom M) x) n) (HSMul.hSMul n x)","decl":"@[simp] lemma multiplesHom_apply (x : M) (n : ℕ) : multiplesHom M x n = n • x := rfl\n\n"}
{"name":"multiplesHom_symm_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : AddMonoid M\nf : AddMonoidHom Nat M\n⊢ Eq ((multiplesHom M).symm f) (f 1)","decl":"lemma multiplesHom_symm_apply (f : ℕ →+ M) : (multiplesHom M).symm f = f 1 := rfl\n\n"}
{"name":"AddMonoidHom.apply_nat","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : AddMonoid M\nf : AddMonoidHom Nat M\nn : Nat\n⊢ Eq (f n) (HSMul.hSMul n (f 1))","decl":"lemma AddMonoidHom.apply_nat (f : ℕ →+ M) (n : ℕ) : f n = n • f 1 := by\n  rw [← multiplesHom_symm_apply, ← multiplesHom_apply, Equiv.apply_symm_apply]\n\n"}
{"name":"powersHom_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : Monoid M\nx : M\nn : Multiplicative Nat\n⊢ Eq (((powersHom M) x) n) (HPow.hPow x (Multiplicative.toAdd n))","decl":"@[to_additive existing (attr := simp)]\nlemma powersHom_apply (x : M) (n : Multiplicative ℕ) :\n    powersHom M x n = x ^ n.toAdd := rfl\n\n"}
{"name":"powersHom_symm_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : Monoid M\nf : MonoidHom (Multiplicative Nat) M\n⊢ Eq ((powersHom M).symm f) (f (Multiplicative.ofAdd 1))","decl":"@[to_additive existing (attr := simp)]\nlemma powersHom_symm_apply (f : Multiplicative ℕ →* M) :\n    (powersHom M).symm f = f (Multiplicative.ofAdd 1) := rfl\n\n"}
{"name":"MonoidHom.apply_mnat","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : Monoid M\nf : MonoidHom (Multiplicative Nat) M\nn : Multiplicative Nat\n⊢ Eq (f n) (HPow.hPow (f (Multiplicative.ofAdd 1)) (Multiplicative.toAdd n))","decl":"@[to_additive existing AddMonoidHom.apply_nat]\nlemma MonoidHom.apply_mnat (f : Multiplicative ℕ →* M) (n : Multiplicative ℕ) :\n    f n = f (Multiplicative.ofAdd 1) ^ n.toAdd := by\n  rw [← powersHom_symm_apply, ← powersHom_apply, Equiv.apply_symm_apply]\n\n"}
{"name":"MonoidHom.ext_mnat_iff","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : Monoid M\nf g : MonoidHom (Multiplicative Nat) M\n⊢ Iff (Eq f g) (Eq (f (Multiplicative.ofAdd 1)) (g (Multiplicative.ofAdd 1)))","decl":"@[to_additive existing (attr := ext) AddMonoidHom.ext_nat]\nlemma MonoidHom.ext_mnat ⦃f g : Multiplicative ℕ →* M⦄\n    (h : f (Multiplicative.ofAdd 1) = g (Multiplicative.ofAdd 1)) : f = g :=\n  MonoidHom.ext fun n ↦ by rw [f.apply_mnat, g.apply_mnat, h]\n\n"}
{"name":"MonoidHom.ext_mnat","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : Monoid M\nf g : MonoidHom (Multiplicative Nat) M\nh : Eq (f (Multiplicative.ofAdd 1)) (g (Multiplicative.ofAdd 1))\n⊢ Eq f g","decl":"@[to_additive existing (attr := ext) AddMonoidHom.ext_nat]\nlemma MonoidHom.ext_mnat ⦃f g : Multiplicative ℕ →* M⦄\n    (h : f (Multiplicative.ofAdd 1) = g (Multiplicative.ofAdd 1)) : f = g :=\n  MonoidHom.ext fun n ↦ by rw [f.apply_mnat, g.apply_mnat, h]\n\n"}
{"name":"multiplesAddHom_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : AddCommMonoid M\nx : M\nn : Nat\n⊢ Eq (((multiplesAddHom M) x) n) (HSMul.hSMul n x)","decl":"@[simp] lemma multiplesAddHom_apply (x : M) (n : ℕ) : multiplesAddHom M x n = n • x := rfl\n\n"}
{"name":"multiplesAddHom_symm_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : AddCommMonoid M\nf : AddMonoidHom Nat M\n⊢ Eq ((multiplesAddHom M).symm f) (f 1)","decl":"@[simp] lemma multiplesAddHom_symm_apply (f : ℕ →+ M) : (multiplesAddHom M).symm f = f 1 := rfl\n\n"}
{"name":"powersMulHom_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : CommMonoid M\nx : M\nn : Multiplicative Nat\n⊢ Eq (((powersMulHom M) x) n) (HPow.hPow x (Multiplicative.toAdd n))","decl":"@[to_additive existing (attr := simp)]\nlemma powersMulHom_apply (x : M) (n : Multiplicative ℕ) : powersMulHom M x n = x ^ n.toAdd := rfl\n\n"}
{"name":"powersMulHom_symm_apply","module":"Mathlib.Algebra.Group.Nat.Hom","initialProofState":"M : Type u_2\ninst✝ : CommMonoid M\nf : MonoidHom (Multiplicative Nat) M\n⊢ Eq ((powersMulHom M).symm f) (f (Multiplicative.ofAdd 1))","decl":"@[to_additive existing (attr := simp)]\nlemma powersMulHom_symm_apply (f : Multiplicative ℕ →* M) : (powersMulHom M).symm f = f (ofAdd 1) :=\n  rfl\n\n"}
