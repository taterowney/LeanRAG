{"name":"WeierstrassCurve.C_Ψ₂Sq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (Polynomial.C W.Ψ₂Sq) (HSub.hSub (HPow.hPow W.ψ₂ 2) (HMul.hMul 4 W.toAffine.polynomial))","decl":"lemma C_Ψ₂Sq : C W.Ψ₂Sq = W.ψ₂ ^ 2 - 4 * W.toAffine.polynomial := by\n  rw [Ψ₂Sq, ψ₂, b₂, b₄, b₆, Affine.polynomialY, Affine.polynomial]\n  C_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.ψ₂_sq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (HPow.hPow W.ψ₂ 2) (HAdd.hAdd (Polynomial.C W.Ψ₂Sq) (HMul.hMul 4 W.toAffine.polynomial))","decl":"lemma ψ₂_sq : W.ψ₂ ^ 2 = C W.Ψ₂Sq + 4 * W.toAffine.polynomial := by\n  rw [C_Ψ₂Sq, sub_add_cancel]\n\n"}
{"name":"WeierstrassCurve.Affine.CoordinateRing.mk_ψ₂_sq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (HPow.hPow ((WeierstrassCurve.Affine.CoordinateRing.mk W) W.ψ₂) 2) ((WeierstrassCurve.Affine.CoordinateRing.mk W) (Polynomial.C W.Ψ₂Sq))","decl":"lemma Affine.CoordinateRing.mk_ψ₂_sq : mk W W.ψ₂ ^ 2 = mk W (C W.Ψ₂Sq) := by\n  rw [C_Ψ₂Sq, map_sub, map_mul, AdjoinRoot.mk_self, mul_zero, sub_zero, map_pow]\n\n-- TODO: remove `twoTorsionPolynomial` in favour of `Ψ₂Sq`\n"}
{"name":"WeierstrassCurve.Ψ₂Sq_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq W.Ψ₂Sq W.twoTorsionPolynomial.toPoly","decl":"lemma Ψ₂Sq_eq : W.Ψ₂Sq = W.twoTorsionPolynomial.toPoly :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.preΨ'_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ' 0) 0","decl":"@[simp]\nlemma preΨ'_zero : W.preΨ' 0 = 0 :=\n  preNormEDS'_zero ..\n\n"}
{"name":"WeierstrassCurve.preΨ'_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ' 1) 1","decl":"@[simp]\nlemma preΨ'_one : W.preΨ' 1 = 1 :=\n  preNormEDS'_one ..\n\n"}
{"name":"WeierstrassCurve.preΨ'_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ' 2) 1","decl":"@[simp]\nlemma preΨ'_two : W.preΨ' 2 = 1 :=\n  preNormEDS'_two ..\n\n"}
{"name":"WeierstrassCurve.preΨ'_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ' 3) W.Ψ₃","decl":"@[simp]\nlemma preΨ'_three : W.preΨ' 3 = W.Ψ₃ :=\n  preNormEDS'_three ..\n\n"}
{"name":"WeierstrassCurve.preΨ'_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ' 4) W.preΨ₄","decl":"@[simp]\nlemma preΨ'_four : W.preΨ' 4 = W.preΨ₄ :=\n  preNormEDS'_four ..\n\n"}
{"name":"WeierstrassCurve.preΨ'_even","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.preΨ' (HMul.hMul 2 (HAdd.hAdd m 3))) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.preΨ' (HAdd.hAdd m 2)) 2) (W.preΨ' (HAdd.hAdd m 3))) (W.preΨ' (HAdd.hAdd m 5))) (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd m 1)) (W.preΨ' (HAdd.hAdd m 3))) (HPow.hPow (W.preΨ' (HAdd.hAdd m 4)) 2)))","decl":"lemma preΨ'_even (m : ℕ) : W.preΨ' (2 * (m + 3)) =\n    W.preΨ' (m + 2) ^ 2 * W.preΨ' (m + 3) * W.preΨ' (m + 5) -\n      W.preΨ' (m + 1) * W.preΨ' (m + 3) * W.preΨ' (m + 4) ^ 2 :=\n  preNormEDS'_even ..\n\n"}
{"name":"WeierstrassCurve.preΨ'_odd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.preΨ' (HAdd.hAdd (HMul.hMul 2 (HAdd.hAdd m 2)) 1)) (HSub.hSub (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd m 4)) (HPow.hPow (W.preΨ' (HAdd.hAdd m 2)) 3)) (ite (Even m) (HPow.hPow W.Ψ₂Sq 2) 1)) (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd m 1)) (HPow.hPow (W.preΨ' (HAdd.hAdd m 3)) 3)) (ite (Even m) 1 (HPow.hPow W.Ψ₂Sq 2))))","decl":"lemma preΨ'_odd (m : ℕ) : W.preΨ' (2 * (m + 2) + 1) =\n    W.preΨ' (m + 4) * W.preΨ' (m + 2) ^ 3 * (if Even m then W.Ψ₂Sq ^ 2 else 1) -\n      W.preΨ' (m + 1) * W.preΨ' (m + 3) ^ 3 * (if Even m then 1 else W.Ψ₂Sq ^ 2) :=\n  preNormEDS'_odd ..\n\n"}
{"name":"WeierstrassCurve.preΨ_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Nat\n⊢ Eq (W.preΨ ↑n) (W.preΨ' n)","decl":"@[simp]\nlemma preΨ_ofNat (n : ℕ) : W.preΨ n = W.preΨ' n :=\n  preNormEDS_ofNat ..\n\n"}
{"name":"WeierstrassCurve.preΨ_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ 0) 0","decl":"@[simp]\nlemma preΨ_zero : W.preΨ 0 = 0 :=\n  preNormEDS_zero ..\n\n"}
{"name":"WeierstrassCurve.preΨ_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ 1) 1","decl":"@[simp]\nlemma preΨ_one : W.preΨ 1 = 1 :=\n  preNormEDS_one ..\n\n"}
{"name":"WeierstrassCurve.preΨ_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ 2) 1","decl":"@[simp]\nlemma preΨ_two : W.preΨ 2 = 1 :=\n  preNormEDS_two ..\n\n"}
{"name":"WeierstrassCurve.preΨ_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ 3) W.Ψ₃","decl":"@[simp]\nlemma preΨ_three : W.preΨ 3 = W.Ψ₃ :=\n  preNormEDS_three ..\n\n"}
{"name":"WeierstrassCurve.preΨ_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.preΨ 4) W.preΨ₄","decl":"@[simp]\nlemma preΨ_four : W.preΨ 4 = W.preΨ₄ :=\n  preNormEDS_four ..\n\n"}
{"name":"WeierstrassCurve.preΨ_even_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.preΨ (HMul.hMul 2 (HAdd.hAdd (↑m) 3))) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.preΨ (HAdd.hAdd (↑m) 2)) 2) (W.preΨ (HAdd.hAdd (↑m) 3))) (W.preΨ (HAdd.hAdd (↑m) 5))) (HMul.hMul (HMul.hMul (W.preΨ (HAdd.hAdd (↑m) 1)) (W.preΨ (HAdd.hAdd (↑m) 3))) (HPow.hPow (W.preΨ (HAdd.hAdd (↑m) 4)) 2)))","decl":"lemma preΨ_even_ofNat (m : ℕ) : W.preΨ (2 * (m + 3)) =\n    W.preΨ (m + 2) ^ 2 * W.preΨ (m + 3) * W.preΨ (m + 5) -\n      W.preΨ (m + 1) * W.preΨ (m + 3) * W.preΨ (m + 4) ^ 2 :=\n  preNormEDS_even_ofNat ..\n\n"}
{"name":"WeierstrassCurve.preΨ_odd_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.preΨ (HAdd.hAdd (HMul.hMul 2 (HAdd.hAdd (↑m) 2)) 1)) (HSub.hSub (HMul.hMul (HMul.hMul (W.preΨ (HAdd.hAdd (↑m) 4)) (HPow.hPow (W.preΨ (HAdd.hAdd (↑m) 2)) 3)) (ite (Even m) (HPow.hPow W.Ψ₂Sq 2) 1)) (HMul.hMul (HMul.hMul (W.preΨ (HAdd.hAdd (↑m) 1)) (HPow.hPow (W.preΨ (HAdd.hAdd (↑m) 3)) 3)) (ite (Even m) 1 (HPow.hPow W.Ψ₂Sq 2))))","decl":"lemma preΨ_odd_ofNat (m : ℕ) : W.preΨ (2 * (m + 2) + 1) =\n    W.preΨ (m + 4) * W.preΨ (m + 2) ^ 3 * (if Even m then W.Ψ₂Sq ^ 2 else 1) -\n      W.preΨ (m + 1) * W.preΨ (m + 3) ^ 3 * (if Even m then 1 else W.Ψ₂Sq ^ 2) :=\n  preNormEDS_odd_ofNat ..\n\n"}
{"name":"WeierstrassCurve.preΨ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (W.preΨ (Neg.neg n)) (Neg.neg (W.preΨ n))","decl":"@[simp]\nlemma preΨ_neg (n : ℤ) : W.preΨ (-n) = -W.preΨ n :=\n  preNormEDS_neg ..\n\n"}
{"name":"WeierstrassCurve.preΨ_even","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (W.preΨ (HMul.hMul 2 m)) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.preΨ (HSub.hSub m 1)) 2) (W.preΨ m)) (W.preΨ (HAdd.hAdd m 2))) (HMul.hMul (HMul.hMul (W.preΨ (HSub.hSub m 2)) (W.preΨ m)) (HPow.hPow (W.preΨ (HAdd.hAdd m 1)) 2)))","decl":"lemma preΨ_even (m : ℤ) : W.preΨ (2 * m) =\n    W.preΨ (m - 1) ^ 2 * W.preΨ m * W.preΨ (m + 2) -\n      W.preΨ (m - 2) * W.preΨ m * W.preΨ (m + 1) ^ 2 :=\n  preNormEDS_even ..\n\n"}
{"name":"WeierstrassCurve.preΨ_odd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (W.preΨ (HAdd.hAdd (HMul.hMul 2 m) 1)) (HSub.hSub (HMul.hMul (HMul.hMul (W.preΨ (HAdd.hAdd m 2)) (HPow.hPow (W.preΨ m) 3)) (ite (Even m) (HPow.hPow W.Ψ₂Sq 2) 1)) (HMul.hMul (HMul.hMul (W.preΨ (HSub.hSub m 1)) (HPow.hPow (W.preΨ (HAdd.hAdd m 1)) 3)) (ite (Even m) 1 (HPow.hPow W.Ψ₂Sq 2))))","decl":"lemma preΨ_odd (m : ℤ) : W.preΨ (2 * m + 1) =\n    W.preΨ (m + 2) * W.preΨ m ^ 3 * (if Even m then W.Ψ₂Sq ^ 2 else 1) -\n      W.preΨ (m - 1) * W.preΨ (m + 1) ^ 3 * (if Even m then 1 else W.Ψ₂Sq ^ 2) :=\n  preNormEDS_odd ..\n\n"}
{"name":"WeierstrassCurve.ΨSq_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Nat\n⊢ Eq (W.ΨSq ↑n) (HMul.hMul (HPow.hPow (W.preΨ' n) 2) (ite (Even n) W.Ψ₂Sq 1))","decl":"@[simp]\nlemma ΨSq_ofNat (n : ℕ) : W.ΨSq n = W.preΨ' n ^ 2 * if Even n then W.Ψ₂Sq else 1 := by\n  simp only [ΨSq, preΨ_ofNat, Int.even_coe_nat]\n\n"}
{"name":"WeierstrassCurve.ΨSq_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ΨSq 0) 0","decl":"@[simp]\nlemma ΨSq_zero : W.ΨSq 0 = 0 := by\n  rw [← Nat.cast_zero, ΨSq_ofNat, preΨ'_zero, zero_pow two_ne_zero, zero_mul]\n\n"}
{"name":"WeierstrassCurve.ΨSq_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ΨSq 1) 1","decl":"@[simp]\nlemma ΨSq_one : W.ΨSq 1 = 1 := by\n  rw [← Nat.cast_one, ΨSq_ofNat, preΨ'_one, one_pow, one_mul, if_neg Nat.not_even_one]\n\n"}
{"name":"WeierstrassCurve.ΨSq_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ΨSq 2) W.Ψ₂Sq","decl":"@[simp]\nlemma ΨSq_two : W.ΨSq 2 = W.Ψ₂Sq := by\n  rw [← Nat.cast_two, ΨSq_ofNat, preΨ'_two, one_pow, one_mul, if_pos even_two]\n\n"}
{"name":"WeierstrassCurve.ΨSq_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ΨSq 3) (HPow.hPow W.Ψ₃ 2)","decl":"@[simp]\nlemma ΨSq_three : W.ΨSq 3 = W.Ψ₃ ^ 2 := by\n  rw [← Nat.cast_three, ΨSq_ofNat, preΨ'_three, if_neg <| by decide, mul_one]\n\n"}
{"name":"WeierstrassCurve.ΨSq_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ΨSq 4) (HMul.hMul (HPow.hPow W.preΨ₄ 2) W.Ψ₂Sq)","decl":"@[simp]\nlemma ΨSq_four : W.ΨSq 4 = W.preΨ₄ ^ 2 * W.Ψ₂Sq := by\n  rw [← Nat.cast_four, ΨSq_ofNat, preΨ'_four, if_pos <| by decide]\n\n"}
{"name":"WeierstrassCurve.ΨSq_even_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.ΨSq (HMul.hMul 2 (HAdd.hAdd (↑m) 3))) (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.preΨ' (HAdd.hAdd m 2)) 2) (W.preΨ' (HAdd.hAdd m 3))) (W.preΨ' (HAdd.hAdd m 5))) (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd m 1)) (W.preΨ' (HAdd.hAdd m 3))) (HPow.hPow (W.preΨ' (HAdd.hAdd m 4)) 2))) 2) W.Ψ₂Sq)","decl":"lemma ΨSq_even_ofNat (m : ℕ) : W.ΨSq (2 * (m + 3)) =\n    (W.preΨ' (m + 2) ^ 2 * W.preΨ' (m + 3) * W.preΨ' (m + 5) -\n      W.preΨ' (m + 1) * W.preΨ' (m + 3) * W.preΨ' (m + 4) ^ 2) ^ 2 * W.Ψ₂Sq := by\n  rw_mod_cast [ΨSq_ofNat, preΨ'_even, if_pos <| even_two_mul _]\n\n"}
{"name":"WeierstrassCurve.ΨSq_odd_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.ΨSq (HAdd.hAdd (HMul.hMul 2 (HAdd.hAdd (↑m) 2)) 1)) (HPow.hPow (HSub.hSub (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd m 4)) (HPow.hPow (W.preΨ' (HAdd.hAdd m 2)) 3)) (ite (Even m) (HPow.hPow W.Ψ₂Sq 2) 1)) (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd m 1)) (HPow.hPow (W.preΨ' (HAdd.hAdd m 3)) 3)) (ite (Even m) 1 (HPow.hPow W.Ψ₂Sq 2)))) 2)","decl":"lemma ΨSq_odd_ofNat (m : ℕ) : W.ΨSq (2 * (m + 2) + 1) =\n    (W.preΨ' (m + 4) * W.preΨ' (m + 2) ^ 3 * (if Even m then W.Ψ₂Sq ^ 2 else 1) -\n      W.preΨ' (m + 1) * W.preΨ' (m + 3) ^ 3 * (if Even m then 1 else W.Ψ₂Sq ^ 2)) ^ 2 := by\n  rw_mod_cast [ΨSq_ofNat, preΨ'_odd, if_neg (m + 2).not_even_two_mul_add_one, mul_one]\n\n"}
{"name":"WeierstrassCurve.ΨSq_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (W.ΨSq (Neg.neg n)) (W.ΨSq n)","decl":"@[simp]\nlemma ΨSq_neg (n : ℤ) : W.ΨSq (-n) = W.ΨSq n := by\n  simp only [ΨSq, preΨ_neg, neg_sq, even_neg]\n\n"}
{"name":"WeierstrassCurve.ΨSq_even","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (W.ΨSq (HMul.hMul 2 m)) (HMul.hMul (HPow.hPow (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.preΨ (HSub.hSub m 1)) 2) (W.preΨ m)) (W.preΨ (HAdd.hAdd m 2))) (HMul.hMul (HMul.hMul (W.preΨ (HSub.hSub m 2)) (W.preΨ m)) (HPow.hPow (W.preΨ (HAdd.hAdd m 1)) 2))) 2) W.Ψ₂Sq)","decl":"lemma ΨSq_even (m : ℤ) : W.ΨSq (2 * m) =\n    (W.preΨ (m - 1) ^ 2 * W.preΨ m * W.preΨ (m + 2) -\n      W.preΨ (m - 2) * W.preΨ m * W.preΨ (m + 1) ^ 2) ^ 2 * W.Ψ₂Sq := by\n  rw [ΨSq, preΨ_even, if_pos <| even_two_mul _]\n\n"}
{"name":"WeierstrassCurve.ΨSq_odd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (W.ΨSq (HAdd.hAdd (HMul.hMul 2 m) 1)) (HPow.hPow (HSub.hSub (HMul.hMul (HMul.hMul (W.preΨ (HAdd.hAdd m 2)) (HPow.hPow (W.preΨ m) 3)) (ite (Even m) (HPow.hPow W.Ψ₂Sq 2) 1)) (HMul.hMul (HMul.hMul (W.preΨ (HSub.hSub m 1)) (HPow.hPow (W.preΨ (HAdd.hAdd m 1)) 3)) (ite (Even m) 1 (HPow.hPow W.Ψ₂Sq 2)))) 2)","decl":"lemma ΨSq_odd (m : ℤ) : W.ΨSq (2 * m + 1) =\n    (W.preΨ (m + 2) * W.preΨ m ^ 3 * (if Even m then W.Ψ₂Sq ^ 2 else 1) -\n      W.preΨ (m - 1) * W.preΨ (m + 1) ^ 3 * (if Even m then 1 else W.Ψ₂Sq ^ 2)) ^ 2 := by\n  rw [ΨSq, preΨ_odd, if_neg m.not_even_two_mul_add_one, mul_one]\n\n"}
{"name":"WeierstrassCurve.Ψ_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Nat\n⊢ Eq (W.Ψ ↑n) (HMul.hMul (Polynomial.C (W.preΨ' n)) (ite (Even n) W.ψ₂ 1))","decl":"@[simp]\nlemma Ψ_ofNat (n : ℕ) : W.Ψ n = C (W.preΨ' n) * if Even n then W.ψ₂ else 1 := by\n  simp only [Ψ, preΨ_ofNat, Int.even_coe_nat]\n\n"}
{"name":"WeierstrassCurve.Ψ_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Ψ 0) 0","decl":"@[simp]\nlemma Ψ_zero : W.Ψ 0 = 0 := by\n  rw [← Nat.cast_zero, Ψ_ofNat, preΨ'_zero, C_0, zero_mul]\n\n"}
{"name":"WeierstrassCurve.Ψ_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Ψ 1) 1","decl":"@[simp]\nlemma Ψ_one : W.Ψ 1 = 1 := by\n  rw [← Nat.cast_one, Ψ_ofNat, preΨ'_one, C_1, if_neg Nat.not_even_one, mul_one]\n\n"}
{"name":"WeierstrassCurve.Ψ_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Ψ 2) W.ψ₂","decl":"@[simp]\nlemma Ψ_two : W.Ψ 2 = W.ψ₂ := by\n  rw [← Nat.cast_two, Ψ_ofNat, preΨ'_two, C_1, one_mul, if_pos even_two]\n\n"}
{"name":"WeierstrassCurve.Ψ_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Ψ 3) (Polynomial.C W.Ψ₃)","decl":"@[simp]\nlemma Ψ_three : W.Ψ 3 = C W.Ψ₃ := by\n  rw [← Nat.cast_three, Ψ_ofNat, preΨ'_three, if_neg <| by decide, mul_one]\n\n"}
{"name":"WeierstrassCurve.Ψ_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Ψ 4) (HMul.hMul (Polynomial.C W.preΨ₄) W.ψ₂)","decl":"@[simp]\nlemma Ψ_four : W.Ψ 4 = C W.preΨ₄ * W.ψ₂ := by\n  rw [← Nat.cast_four, Ψ_ofNat, preΨ'_four, if_pos <| by decide]\n\n"}
{"name":"WeierstrassCurve.Ψ_even_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (HMul.hMul (W.Ψ (HMul.hMul 2 (HAdd.hAdd (↑m) 3))) W.ψ₂) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.Ψ (HAdd.hAdd (↑m) 2)) 2) (W.Ψ (HAdd.hAdd (↑m) 3))) (W.Ψ (HAdd.hAdd (↑m) 5))) (HMul.hMul (HMul.hMul (W.Ψ (HAdd.hAdd (↑m) 1)) (W.Ψ (HAdd.hAdd (↑m) 3))) (HPow.hPow (W.Ψ (HAdd.hAdd (↑m) 4)) 2)))","decl":"lemma Ψ_even_ofNat (m : ℕ) : W.Ψ (2 * (m + 3)) * W.ψ₂ =\n    W.Ψ (m + 2) ^ 2 * W.Ψ (m + 3) * W.Ψ (m + 5) - W.Ψ (m + 1) * W.Ψ (m + 3) * W.Ψ (m + 4) ^ 2 := by\n  repeat rw_mod_cast [Ψ_ofNat]\n  simp_rw [preΨ'_even, if_pos <| even_two_mul _, Nat.even_add_one, ite_not]\n  split_ifs <;> C_simp <;> ring1\n\n"}
{"name":"WeierstrassCurve.Ψ_odd_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.Ψ (HAdd.hAdd (HMul.hMul 2 (HAdd.hAdd (↑m) 2)) 1)) (HAdd.hAdd (HSub.hSub (HMul.hMul (W.Ψ (HAdd.hAdd (↑m) 4)) (HPow.hPow (W.Ψ (HAdd.hAdd (↑m) 2)) 3)) (HMul.hMul (W.Ψ (HAdd.hAdd (↑m) 1)) (HPow.hPow (W.Ψ (HAdd.hAdd (↑m) 3)) 3))) (HMul.hMul (HMul.hMul W.toAffine.polynomial (HSub.hSub (HMul.hMul 16 W.toAffine.polynomial) (HMul.hMul 8 (HPow.hPow W.ψ₂ 2)))) (Polynomial.C (ite (Even m) (HMul.hMul (W.preΨ' (HAdd.hAdd m 4)) (HPow.hPow (W.preΨ' (HAdd.hAdd m 2)) 3)) (HMul.hMul (Neg.neg (W.preΨ' (HAdd.hAdd m 1))) (HPow.hPow (W.preΨ' (HAdd.hAdd m 3)) 3))))))","decl":"lemma Ψ_odd_ofNat (m : ℕ) : W.Ψ (2 * (m + 2) + 1) =\n    W.Ψ (m + 4) * W.Ψ (m + 2) ^ 3 - W.Ψ (m + 1) * W.Ψ (m + 3) ^ 3 +\n      W.toAffine.polynomial * (16 * W.toAffine.polynomial - 8 * W.ψ₂ ^ 2) *\n        C (if Even m then W.preΨ' (m + 4) * W.preΨ' (m + 2) ^ 3\n            else -W.preΨ' (m + 1) * W.preΨ' (m + 3) ^ 3) := by\n  repeat rw_mod_cast [Ψ_ofNat]\n  simp_rw [preΨ'_odd, if_neg (m + 2).not_even_two_mul_add_one, Nat.even_add_one, ite_not]\n  split_ifs <;> C_simp <;> rw [C_Ψ₂Sq] <;> ring1\n\n"}
{"name":"WeierstrassCurve.Ψ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (W.Ψ (Neg.neg n)) (Neg.neg (W.Ψ n))","decl":"@[simp]\nlemma Ψ_neg (n : ℤ) : W.Ψ (-n) = -W.Ψ n := by\n  simp only [Ψ, preΨ_neg, C_neg, neg_mul (α := R[X][Y]), even_neg]\n\n"}
{"name":"WeierstrassCurve.Ψ_even","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (HMul.hMul (W.Ψ (HMul.hMul 2 m)) W.ψ₂) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.Ψ (HSub.hSub m 1)) 2) (W.Ψ m)) (W.Ψ (HAdd.hAdd m 2))) (HMul.hMul (HMul.hMul (W.Ψ (HSub.hSub m 2)) (W.Ψ m)) (HPow.hPow (W.Ψ (HAdd.hAdd m 1)) 2)))","decl":"lemma Ψ_even (m : ℤ) : W.Ψ (2 * m) * W.ψ₂ =\n    W.Ψ (m - 1) ^ 2 * W.Ψ m * W.Ψ (m + 2) - W.Ψ (m - 2) * W.Ψ m * W.Ψ (m + 1) ^ 2 := by\n  repeat rw [Ψ]\n  simp_rw [preΨ_even, if_pos <| even_two_mul _, Int.even_add_one, show m + 2 = m + 1 + 1 by ring1,\n    Int.even_add_one, show m - 2 = m - 1 - 1 by ring1, Int.even_sub_one, ite_not]\n  split_ifs <;> C_simp <;> ring1\n\n"}
{"name":"WeierstrassCurve.Ψ_odd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (W.Ψ (HAdd.hAdd (HMul.hMul 2 m) 1)) (HAdd.hAdd (HSub.hSub (HMul.hMul (W.Ψ (HAdd.hAdd m 2)) (HPow.hPow (W.Ψ m) 3)) (HMul.hMul (W.Ψ (HSub.hSub m 1)) (HPow.hPow (W.Ψ (HAdd.hAdd m 1)) 3))) (HMul.hMul (HMul.hMul W.toAffine.polynomial (HSub.hSub (HMul.hMul 16 W.toAffine.polynomial) (HMul.hMul 8 (HPow.hPow W.ψ₂ 2)))) (Polynomial.C (ite (Even m) (HMul.hMul (W.preΨ (HAdd.hAdd m 2)) (HPow.hPow (W.preΨ m) 3)) (HMul.hMul (Neg.neg (W.preΨ (HSub.hSub m 1))) (HPow.hPow (W.preΨ (HAdd.hAdd m 1)) 3))))))","decl":"lemma Ψ_odd (m : ℤ) : W.Ψ (2 * m + 1) =\n    W.Ψ (m + 2) * W.Ψ m ^ 3 - W.Ψ (m - 1) * W.Ψ (m + 1) ^ 3 +\n      W.toAffine.polynomial * (16 * W.toAffine.polynomial - 8 * W.ψ₂ ^ 2) *\n        C (if Even m then W.preΨ (m + 2) * W.preΨ m ^ 3\n            else -W.preΨ (m - 1) * W.preΨ (m + 1) ^ 3) := by\n  repeat rw [Ψ]\n  simp_rw [preΨ_odd, if_neg m.not_even_two_mul_add_one, show m + 2 = m + 1 + 1 by ring1,\n    Int.even_add_one, Int.even_sub_one, ite_not]\n  split_ifs <;> C_simp <;> rw [C_Ψ₂Sq] <;> ring1\n\n"}
{"name":"WeierstrassCurve.Affine.CoordinateRing.mk_Ψ_sq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (HPow.hPow ((WeierstrassCurve.Affine.CoordinateRing.mk W) (W.Ψ n)) 2) ((WeierstrassCurve.Affine.CoordinateRing.mk W) (Polynomial.C (W.ΨSq n)))","decl":"lemma Affine.CoordinateRing.mk_Ψ_sq (n : ℤ) : mk W (W.Ψ n) ^ 2 = mk W (C <| W.ΨSq n) := by\n  simp only [Ψ, ΨSq, map_one, map_mul, map_pow, one_pow, mul_pow, ite_pow, apply_ite C,\n    apply_ite <| mk W, mk_ψ₂_sq]\n\n"}
{"name":"WeierstrassCurve.Φ_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Nat\n⊢ Eq (W.Φ (HAdd.hAdd (↑n) 1)) (HSub.hSub (HMul.hMul (HMul.hMul Polynomial.X (HPow.hPow (W.preΨ' (HAdd.hAdd n 1)) 2)) (ite (Even n) 1 W.Ψ₂Sq)) (HMul.hMul (HMul.hMul (W.preΨ' (HAdd.hAdd n 2)) (W.preΨ' n)) (ite (Even n) W.Ψ₂Sq 1)))","decl":"@[simp]\nlemma Φ_ofNat (n : ℕ) : W.Φ (n + 1) =\n    X * W.preΨ' (n + 1) ^ 2 * (if Even n then 1 else W.Ψ₂Sq) -\n      W.preΨ' (n + 2) * W.preΨ' n * (if Even n then W.Ψ₂Sq else 1) := by\n  rw [Φ, ← Nat.cast_one, ← Nat.cast_add, ΨSq_ofNat, ← mul_assoc, ← Nat.cast_add, preΨ_ofNat,\n    Nat.cast_add, add_sub_cancel_right, preΨ_ofNat, ← Nat.cast_add]\n  simp only [Nat.even_add_one, Int.even_add_one, Int.even_coe_nat, ite_not]\n\n"}
{"name":"WeierstrassCurve.Φ_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Φ 0) 1","decl":"@[simp]\nlemma Φ_zero : W.Φ 0 = 1 := by\n  rw [Φ, ΨSq_zero, mul_zero, zero_sub, zero_add, preΨ_one, one_mul, zero_sub, preΨ_neg, preΨ_one,\n    neg_one_mul, neg_neg, if_pos Even.zero]\n\n"}
{"name":"WeierstrassCurve.Φ_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Φ 1) Polynomial.X","decl":"@[simp]\nlemma Φ_one : W.Φ 1 = X := by\n  rw [show 1 = ((0 : ℕ) + 1 : ℤ) by rfl, Φ_ofNat, preΨ'_one, one_pow, mul_one, if_pos Even.zero,\n    mul_one, preΨ'_zero, mul_zero, zero_mul, sub_zero]\n\n"}
{"name":"WeierstrassCurve.Φ_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Φ 2) (HSub.hSub (HSub.hSub (HSub.hSub (HPow.hPow Polynomial.X 4) (HMul.hMul (Polynomial.C W.b₄) (HPow.hPow Polynomial.X 2))) (HMul.hMul (Polynomial.C (HMul.hMul 2 W.b₆)) Polynomial.X)) (Polynomial.C W.b₈))","decl":"@[simp]\nlemma Φ_two : W.Φ 2 = X ^ 4 - C W.b₄ * X ^ 2 - C (2 * W.b₆) * X - C W.b₈ := by\n  rw [show 2 = ((1 : ℕ) + 1 : ℤ) by rfl, Φ_ofNat, preΨ'_two, if_neg Nat.not_even_one, Ψ₂Sq,\n    preΨ'_three, preΨ'_one, if_neg Nat.not_even_one, Ψ₃]\n  C_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Φ_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Φ 3) (HSub.hSub (HMul.hMul Polynomial.X (HPow.hPow W.Ψ₃ 2)) (HMul.hMul W.preΨ₄ W.Ψ₂Sq))","decl":"@[simp]\nlemma Φ_three : W.Φ 3 = X * W.Ψ₃ ^ 2 - W.preΨ₄ * W.Ψ₂Sq := by\n  rw [show 3 = ((2 : ℕ) + 1 : ℤ) by rfl, Φ_ofNat, preΨ'_three, if_pos <| by decide, mul_one,\n    preΨ'_four, preΨ'_two, mul_one, if_pos even_two]\n\n"}
{"name":"WeierstrassCurve.Φ_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.Φ 4) (HSub.hSub (HMul.hMul (HMul.hMul Polynomial.X (HPow.hPow W.preΨ₄ 2)) W.Ψ₂Sq) (HMul.hMul W.Ψ₃ (HSub.hSub (HMul.hMul W.preΨ₄ (HPow.hPow W.Ψ₂Sq 2)) (HPow.hPow W.Ψ₃ 3))))","decl":"@[simp]\nlemma Φ_four : W.Φ 4 = X * W.preΨ₄ ^ 2 * W.Ψ₂Sq - W.Ψ₃ * (W.preΨ₄ * W.Ψ₂Sq ^ 2 - W.Ψ₃ ^ 3) := by\n  rw [show 4 = ((3 : ℕ) + 1 : ℤ) by rfl, Φ_ofNat, preΨ'_four, if_neg <| by decide,\n    show 3 + 2 = 2 * 2 + 1 by rfl, preΨ'_odd, preΨ'_four, preΨ'_two, if_pos Even.zero, preΨ'_one,\n    preΨ'_three, if_pos Even.zero, if_neg <| by decide]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Φ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (W.Φ (Neg.neg n)) (W.Φ n)","decl":"@[simp]\nlemma Φ_neg (n : ℤ) : W.Φ (-n) = W.Φ n := by\n  simp only [Φ, ΨSq_neg, neg_add_eq_sub, ← neg_sub n, preΨ_neg, ← neg_add', preΨ_neg, neg_mul_neg,\n    mul_comm <| W.preΨ <| n - 1, even_neg]\n\n"}
{"name":"WeierstrassCurve.ψ_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ψ 0) 0","decl":"@[simp]\nlemma ψ_zero : W.ψ 0 = 0 :=\n  normEDS_zero ..\n\n"}
{"name":"WeierstrassCurve.ψ_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ψ 1) 1","decl":"@[simp]\nlemma ψ_one : W.ψ 1 = 1 :=\n  normEDS_one ..\n\n"}
{"name":"WeierstrassCurve.ψ_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ψ 2) W.ψ₂","decl":"@[simp]\nlemma ψ_two : W.ψ 2 = W.ψ₂ :=\n  normEDS_two ..\n\n"}
{"name":"WeierstrassCurve.ψ_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ψ 3) (Polynomial.C W.Ψ₃)","decl":"@[simp]\nlemma ψ_three : W.ψ 3 = C W.Ψ₃ :=\n  normEDS_three ..\n\n"}
{"name":"WeierstrassCurve.ψ_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.ψ 4) (HMul.hMul (Polynomial.C W.preΨ₄) W.ψ₂)","decl":"@[simp]\nlemma ψ_four : W.ψ 4 = C W.preΨ₄ * W.ψ₂ :=\n  normEDS_four ..\n\n"}
{"name":"WeierstrassCurve.ψ_even_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (HMul.hMul (W.ψ (HMul.hMul 2 (HAdd.hAdd (↑m) 3))) W.ψ₂) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.ψ (HAdd.hAdd (↑m) 2)) 2) (W.ψ (HAdd.hAdd (↑m) 3))) (W.ψ (HAdd.hAdd (↑m) 5))) (HMul.hMul (HMul.hMul (W.ψ (HAdd.hAdd (↑m) 1)) (W.ψ (HAdd.hAdd (↑m) 3))) (HPow.hPow (W.ψ (HAdd.hAdd (↑m) 4)) 2)))","decl":"lemma ψ_even_ofNat (m : ℕ) : W.ψ (2 * (m + 3)) * W.ψ₂ =\n    W.ψ (m + 2) ^ 2 * W.ψ (m + 3) * W.ψ (m + 5) - W.ψ (m + 1) * W.ψ (m + 3) * W.ψ (m + 4) ^ 2 :=\n  normEDS_even_ofNat ..\n\n"}
{"name":"WeierstrassCurve.ψ_odd_ofNat","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Nat\n⊢ Eq (W.ψ (HAdd.hAdd (HMul.hMul 2 (HAdd.hAdd (↑m) 2)) 1)) (HSub.hSub (HMul.hMul (W.ψ (HAdd.hAdd (↑m) 4)) (HPow.hPow (W.ψ (HAdd.hAdd (↑m) 2)) 3)) (HMul.hMul (W.ψ (HAdd.hAdd (↑m) 1)) (HPow.hPow (W.ψ (HAdd.hAdd (↑m) 3)) 3)))","decl":"lemma ψ_odd_ofNat (m : ℕ) : W.ψ (2 * (m + 2) + 1) =\n    W.ψ (m + 4) * W.ψ (m + 2) ^ 3 - W.ψ (m + 1) * W.ψ (m + 3) ^ 3 :=\n  normEDS_odd_ofNat ..\n\n"}
{"name":"WeierstrassCurve.ψ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (W.ψ (Neg.neg n)) (Neg.neg (W.ψ n))","decl":"@[simp]\nlemma ψ_neg (n : ℤ) : W.ψ (-n) = -W.ψ n :=\n  normEDS_neg ..\n\n"}
{"name":"WeierstrassCurve.ψ_even","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (HMul.hMul (W.ψ (HMul.hMul 2 m)) W.ψ₂) (HSub.hSub (HMul.hMul (HMul.hMul (HPow.hPow (W.ψ (HSub.hSub m 1)) 2) (W.ψ m)) (W.ψ (HAdd.hAdd m 2))) (HMul.hMul (HMul.hMul (W.ψ (HSub.hSub m 2)) (W.ψ m)) (HPow.hPow (W.ψ (HAdd.hAdd m 1)) 2)))","decl":"lemma ψ_even (m : ℤ) : W.ψ (2 * m) * W.ψ₂ =\n    W.ψ (m - 1) ^ 2 * W.ψ m * W.ψ (m + 2) - W.ψ (m - 2) * W.ψ m * W.ψ (m + 1) ^ 2 :=\n  normEDS_even ..\n\n"}
{"name":"WeierstrassCurve.ψ_odd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nm : Int\n⊢ Eq (W.ψ (HAdd.hAdd (HMul.hMul 2 m) 1)) (HSub.hSub (HMul.hMul (W.ψ (HAdd.hAdd m 2)) (HPow.hPow (W.ψ m) 3)) (HMul.hMul (W.ψ (HSub.hSub m 1)) (HPow.hPow (W.ψ (HAdd.hAdd m 1)) 3)))","decl":"lemma ψ_odd (m : ℤ) : W.ψ (2 * m + 1) =\n    W.ψ (m + 2) * W.ψ m ^ 3 - W.ψ (m - 1) * W.ψ (m + 1) ^ 3 :=\n  normEDS_odd ..\n\n"}
{"name":"WeierstrassCurve.Affine.CoordinateRing.mk_ψ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq ((WeierstrassCurve.Affine.CoordinateRing.mk W) (W.ψ n)) ((WeierstrassCurve.Affine.CoordinateRing.mk W) (W.Ψ n))","decl":"lemma Affine.CoordinateRing.mk_ψ (n : ℤ) : mk W (W.ψ n) = mk W (W.Ψ n) := by\n  simp only [ψ, normEDS, Ψ, preΨ, map_mul, map_pow, map_preNormEDS, ← mk_ψ₂_sq, ← pow_mul]\n\n"}
{"name":"WeierstrassCurve.φ_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.φ 0) 1","decl":"@[simp]\nlemma φ_zero : W.φ 0 = 1 := by\n  rw [φ, ψ_zero, zero_pow two_ne_zero, mul_zero, zero_sub, zero_add, ψ_one, one_mul, zero_sub,\n    ψ_neg, neg_neg, ψ_one]\n\n"}
{"name":"WeierstrassCurve.φ_one","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.φ 1) (Polynomial.C Polynomial.X)","decl":"@[simp]\nlemma φ_one : W.φ 1 = C X := by\n  rw [φ, ψ_one, one_pow, mul_one, sub_self, ψ_zero, mul_zero, sub_zero]\n\n"}
{"name":"WeierstrassCurve.φ_two","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.φ 2) (HSub.hSub (HMul.hMul (Polynomial.C Polynomial.X) (HPow.hPow W.ψ₂ 2)) (Polynomial.C W.Ψ₃))","decl":"@[simp]\nlemma φ_two : W.φ 2 = C X * W.ψ₂ ^ 2 - C W.Ψ₃ := by\n  rw [φ, ψ_two, two_add_one_eq_three, ψ_three, show (2 - 1 : ℤ) = 1 by rfl, ψ_one, mul_one]\n\n"}
{"name":"WeierstrassCurve.φ_three","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.φ 3) (HSub.hSub (HMul.hMul (Polynomial.C Polynomial.X) (HPow.hPow (Polynomial.C W.Ψ₃) 2)) (HMul.hMul (Polynomial.C W.preΨ₄) (HPow.hPow W.ψ₂ 2)))","decl":"@[simp]\nlemma φ_three : W.φ 3 = C X * C W.Ψ₃ ^ 2 - C W.preΨ₄ * W.ψ₂ ^ 2 := by\n  rw [φ, ψ_three, three_add_one_eq_four, ψ_four, mul_assoc, show (3 - 1 : ℤ) = 2 by rfl, ψ_two,\n    ← sq]\n\n"}
{"name":"WeierstrassCurve.φ_four","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\n⊢ Eq (W.φ 4) (HAdd.hAdd (HSub.hSub (HMul.hMul (HMul.hMul (Polynomial.C Polynomial.X) (HPow.hPow (Polynomial.C W.preΨ₄) 2)) (HPow.hPow W.ψ₂ 2)) (HMul.hMul (HMul.hMul (Polynomial.C W.preΨ₄) (HPow.hPow W.ψ₂ 4)) (Polynomial.C W.Ψ₃))) (HPow.hPow (Polynomial.C W.Ψ₃) 4))","decl":"@[simp]\nlemma φ_four :\n    W.φ 4 = C X * C W.preΨ₄ ^ 2 * W.ψ₂ ^ 2 - C W.preΨ₄ * W.ψ₂ ^ 4 * C W.Ψ₃ + C W.Ψ₃ ^ 4 := by\n  rw [φ, ψ_four, show (4 + 1 : ℤ) = 2 * 2 + 1 by rfl, ψ_odd, two_add_two_eq_four, ψ_four,\n    show (2 - 1 : ℤ) = 1 by rfl, ψ_two, ψ_one, two_add_one_eq_three, show (4 - 1 : ℤ) = 3 by rfl,\n    ψ_three]\n  ring1\n\n"}
{"name":"WeierstrassCurve.φ_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq (W.φ (Neg.neg n)) (W.φ n)","decl":"@[simp]\nlemma φ_neg (n : ℤ) : W.φ (-n) = W.φ n := by\n  rw [φ, ψ_neg, neg_sq (R := R[X][Y]), neg_add_eq_sub, ← neg_sub n, ψ_neg, ← neg_add', ψ_neg,\n    neg_mul_neg (α := R[X][Y]), mul_comm <| W.ψ _, φ]\n\n"}
{"name":"WeierstrassCurve.Affine.CoordinateRing.mk_φ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\ninst✝ : CommRing R\nW : WeierstrassCurve R\nn : Int\n⊢ Eq ((WeierstrassCurve.Affine.CoordinateRing.mk W) (W.φ n)) ((WeierstrassCurve.Affine.CoordinateRing.mk W) (Polynomial.C (W.Φ n)))","decl":"lemma Affine.CoordinateRing.mk_φ (n : ℤ) : mk W (W.φ n) = mk W (C <| W.Φ n) := by\n  simp_rw [φ, Φ, map_sub, map_mul, map_pow, mk_ψ, mk_Ψ_sq, Ψ, map_mul,\n    mul_mul_mul_comm _ <| mk W <| ite .., Int.even_add_one, Int.even_sub_one, ← sq, ite_not,\n    apply_ite C, apply_ite <| mk W, ite_pow, map_one, one_pow, mk_ψ₂_sq]\n\n"}
{"name":"WeierstrassCurve.map_ψ₂","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\n⊢ Eq (W.map f).ψ₂ (Polynomial.map (Polynomial.mapRingHom f) W.ψ₂)","decl":"lemma map_ψ₂ : (W.map f).ψ₂ = W.ψ₂.map (mapRingHom f) := by\n  simp only [ψ₂, Affine.map_polynomialY]\n\n"}
{"name":"WeierstrassCurve.map_Ψ₂Sq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\n⊢ Eq (W.map f).Ψ₂Sq (Polynomial.map f W.Ψ₂Sq)","decl":"lemma map_Ψ₂Sq : (W.map f).Ψ₂Sq = W.Ψ₂Sq.map f := by\n  simp only [Ψ₂Sq, map_b₂, map_b₄, map_b₆]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_Ψ₃","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\n⊢ Eq (W.map f).Ψ₃ (Polynomial.map f W.Ψ₃)","decl":"lemma map_Ψ₃ : (W.map f).Ψ₃ = W.Ψ₃.map f := by\n  simp only [Ψ₃, map_b₂, map_b₄, map_b₆, map_b₈]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_preΨ₄","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\n⊢ Eq (W.map f).preΨ₄ (Polynomial.map f W.preΨ₄)","decl":"lemma map_preΨ₄ : (W.map f).preΨ₄ = W.preΨ₄.map f := by\n  simp only [preΨ₄, map_b₂, map_b₄, map_b₆, map_b₈]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_preΨ'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Nat\n⊢ Eq ((W.map f).preΨ' n) (Polynomial.map f (W.preΨ' n))","decl":"lemma map_preΨ' (n : ℕ) : (W.map f).preΨ' n = (W.preΨ' n).map f := by\n  simp only [preΨ', map_Ψ₂Sq, map_Ψ₃, map_preΨ₄, ← coe_mapRingHom, map_preNormEDS']\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_preΨ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Int\n⊢ Eq ((W.map f).preΨ n) (Polynomial.map f (W.preΨ n))","decl":"lemma map_preΨ (n : ℤ) : (W.map f).preΨ n = (W.preΨ n).map f := by\n  simp only [preΨ, map_Ψ₂Sq, map_Ψ₃, map_preΨ₄, ← coe_mapRingHom, map_preNormEDS]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_ΨSq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Int\n⊢ Eq ((W.map f).ΨSq n) (Polynomial.map f (W.ΨSq n))","decl":"lemma map_ΨSq (n : ℤ) : (W.map f).ΨSq n = (W.ΨSq n).map f := by\n  simp only [ΨSq, map_preΨ, map_Ψ₂Sq, ← coe_mapRingHom]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_Ψ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Int\n⊢ Eq ((W.map f).Ψ n) (Polynomial.map (Polynomial.mapRingHom f) (W.Ψ n))","decl":"lemma map_Ψ (n : ℤ) : (W.map f).Ψ n = (W.Ψ n).map (mapRingHom f) := by\n  simp only [Ψ, map_preΨ, map_ψ₂, ← coe_mapRingHom]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_Φ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Int\n⊢ Eq ((W.map f).Φ n) (Polynomial.map f (W.Φ n))","decl":"lemma map_Φ (n : ℤ) : (W.map f).Φ n = (W.Φ n).map f := by\n  simp only [Φ, map_ΨSq, map_preΨ, map_Ψ₂Sq, ← coe_mapRingHom]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_ψ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Int\n⊢ Eq ((W.map f).ψ n) (Polynomial.map (Polynomial.mapRingHom f) (W.ψ n))","decl":"lemma map_ψ (n : ℤ) : (W.map f).ψ n = (W.ψ n).map (mapRingHom f) := by\n  simp only [ψ, map_ψ₂, map_Ψ₃, map_preΨ₄, ← coe_mapRingHom, map_normEDS]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.map_φ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nW : WeierstrassCurve R\nf : RingHom R S\nn : Int\n⊢ Eq ((W.map f).φ n) (Polynomial.map (Polynomial.mapRingHom f) (W.φ n))","decl":"lemma map_φ (n : ℤ) : (W.map f).φ n = (W.φ n).map (mapRingHom f) := by\n  simp only [φ, map_ψ]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.baseChange_ψ₂","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (W.baseChange B).ψ₂ (Polynomial.map (Polynomial.mapRingHom ↑f) (W.baseChange A).ψ₂)","decl":"lemma baseChange_ψ₂ : (W.baseChange B).ψ₂ = (W.baseChange A).ψ₂.map (mapRingHom f) := by\n  rw [← map_ψ₂, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_Ψ₂Sq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (W.baseChange B).Ψ₂Sq (Polynomial.map (↑f) (W.baseChange A).Ψ₂Sq)","decl":"lemma baseChange_Ψ₂Sq : (W.baseChange B).Ψ₂Sq = (W.baseChange A).Ψ₂Sq.map f := by\n  rw [← map_Ψ₂Sq, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_Ψ₃","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (W.baseChange B).Ψ₃ (Polynomial.map (↑f) (W.baseChange A).Ψ₃)","decl":"lemma baseChange_Ψ₃ : (W.baseChange B).Ψ₃ = (W.baseChange A).Ψ₃.map f := by\n  rw [← map_Ψ₃, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_preΨ₄","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (W.baseChange B).preΨ₄ (Polynomial.map (↑f) (W.baseChange A).preΨ₄)","decl":"lemma baseChange_preΨ₄ : (W.baseChange B).preΨ₄ = (W.baseChange A).preΨ₄.map f := by\n  rw [← map_preΨ₄, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_preΨ'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Nat\n⊢ Eq ((W.baseChange B).preΨ' n) (Polynomial.map (↑f) ((W.baseChange A).preΨ' n))","decl":"lemma baseChange_preΨ' (n : ℕ) : (W.baseChange B).preΨ' n = ((W.baseChange A).preΨ' n).map f := by\n  rw [← map_preΨ', map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_preΨ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Int\n⊢ Eq ((W.baseChange B).preΨ n) (Polynomial.map (↑f) ((W.baseChange A).preΨ n))","decl":"lemma baseChange_preΨ (n : ℤ) : (W.baseChange B).preΨ n = ((W.baseChange A).preΨ n).map f := by\n  rw [← map_preΨ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_ΨSq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Int\n⊢ Eq ((W.baseChange B).ΨSq n) (Polynomial.map (↑f) ((W.baseChange A).ΨSq n))","decl":"lemma baseChange_ΨSq (n : ℤ) : (W.baseChange B).ΨSq n = ((W.baseChange A).ΨSq n).map f := by\n  rw [← map_ΨSq, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_Ψ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Int\n⊢ Eq ((W.baseChange B).Ψ n) (Polynomial.map (Polynomial.mapRingHom ↑f) ((W.baseChange A).Ψ n))","decl":"lemma baseChange_Ψ (n : ℤ) : (W.baseChange B).Ψ n = ((W.baseChange A).Ψ n).map (mapRingHom f) := by\n  rw [← map_Ψ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_Φ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Int\n⊢ Eq ((W.baseChange B).Φ n) (Polynomial.map (↑f) ((W.baseChange A).Φ n))","decl":"lemma baseChange_Φ (n : ℤ) : (W.baseChange B).Φ n = ((W.baseChange A).Φ n).map f := by\n  rw [← map_Φ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_ψ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Int\n⊢ Eq ((W.baseChange B).ψ n) (Polynomial.map (Polynomial.mapRingHom ↑f) ((W.baseChange A).ψ n))","decl":"lemma baseChange_ψ (n : ℤ) : (W.baseChange B).ψ n = ((W.baseChange A).ψ n).map (mapRingHom f) := by\n  rw [← map_ψ, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.baseChange_φ","module":"Mathlib.AlgebraicGeometry.EllipticCurve.DivisionPolynomial.Basic","initialProofState":"R : Type r\nS : Type s\ninst✝¹⁰ : CommRing R\ninst✝⁹ : CommRing S\nW : WeierstrassCurve R\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nn : Int\n⊢ Eq ((W.baseChange B).φ n) (Polynomial.map (Polynomial.mapRingHom ↑f) ((W.baseChange A).φ n))","decl":"lemma baseChange_φ (n : ℤ) : (W.baseChange B).φ n = ((W.baseChange A).φ n).map (mapRingHom f) := by\n  rw [← map_φ, map_baseChange]\n\n"}
