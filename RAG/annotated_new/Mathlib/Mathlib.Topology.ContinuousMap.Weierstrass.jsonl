{"name":"polynomialFunctions_closure_eq_top'","module":"Mathlib.Topology.ContinuousMap.Weierstrass","initialProofState":"‚ä¢ Eq (polynomialFunctions unitInterval).topologicalClosure Top.top","decl":"/-- The special case of the Weierstrass approximation theorem for the interval `[0,1]`.\nThis is just a matter of unravelling definitions and using the Bernstein approximations.\n-/\ntheorem polynomialFunctions_closure_eq_top' : (polynomialFunctions I).topologicalClosure = ‚ä§ := by\n  rw [eq_top_iff]\n  rintro f -\n  refine Filter.Frequently.mem_closure ?_\n  refine Filter.Tendsto.frequently (bernsteinApproximation_uniform f) ?_\n  apply Frequently.of_forall\n  intro n\n  simp only [SetLike.mem_coe]\n  apply Subalgebra.sum_mem\n  rintro n -\n  apply Subalgebra.smul_mem\n  dsimp [bernstein, polynomialFunctions]\n  simp\n\n"}
{"name":"polynomialFunctions_closure_eq_top","module":"Mathlib.Topology.ContinuousMap.Weierstrass","initialProofState":"a b : Real\n‚ä¢ Eq (polynomialFunctions (Set.Icc a b)).topologicalClosure Top.top","decl":"/-- The **Weierstrass Approximation Theorem**:\npolynomials functions on `[a, b] ‚äÜ ‚Ñù` are dense in `C([a,b],‚Ñù)`\n\n(While we could deduce this as an application of the Stone-Weierstrass theorem,\nour proof of that relies on the fact that `abs` is in the closure of polynomials on `[-M, M]`,\nso we may as well get this done first.)\n-/\ntheorem polynomialFunctions_closure_eq_top (a b : ‚Ñù) :\n    (polynomialFunctions (Set.Icc a b)).topologicalClosure = ‚ä§ := by\n  cases' lt_or_le a b with h h\n  -- (Otherwise it's easy; we'll deal with that later.)\n  ¬∑ -- We can pullback continuous functions on `[a,b]` to continuous functions on `[0,1]`,\n    -- by precomposing with an affine map.\n    let W : C(Set.Icc a b, ‚Ñù) ‚Üí‚Çê[‚Ñù] C(I, ‚Ñù) :=\n      compRightAlgHom ‚Ñù ‚Ñù (iccHomeoI a b h).symm\n    -- This operation is itself a homeomorphism\n    -- (with respect to the norm topologies on continuous functions).\n    let W' : C(Set.Icc a b, ‚Ñù) ‚âÉ‚Çú C(I, ‚Ñù) := (iccHomeoI a b h).arrowCongr (.refl _)\n    have w : (W : C(Set.Icc a b, ‚Ñù) ‚Üí C(I, ‚Ñù)) = W' := rfl\n    -- Thus we take the statement of the Weierstrass approximation theorem for `[0,1]`,\n    have p := polynomialFunctions_closure_eq_top'\n    -- and pullback both sides, obtaining an equation between subalgebras of `C([a,b], ‚Ñù)`.\n    apply_fun fun s => s.comap W at p\n    simp only [Algebra.comap_top] at p\n    -- Since the pullback operation is continuous, it commutes with taking `topologicalClosure`,\n    rw [Subalgebra.topologicalClosure_comap_homeomorph _ W W' w] at p\n    -- and precomposing with an affine map takes polynomial functions to polynomial functions.\n    rw [polynomialFunctions.comap_compRightAlgHom_iccHomeoI] at p\n    -- üéâ\n    exact p\n  ¬∑ -- Otherwise, `b ‚â§ a`, and the interval is a subsingleton,\n    subsingleton [(Set.subsingleton_Icc_of_ge h).coe_sort]\n\n"}
{"name":"continuousMap_mem_polynomialFunctions_closure","module":"Mathlib.Topology.ContinuousMap.Weierstrass","initialProofState":"a b : Real\nf : ContinuousMap (‚Üë(Set.Icc a b)) Real\n‚ä¢ Membership.mem (polynomialFunctions (Set.Icc a b)).topologicalClosure f","decl":"/-- An alternative statement of Weierstrass' theorem.\n\nEvery real-valued continuous function on `[a,b]` is a uniform limit of polynomials.\n-/\ntheorem continuousMap_mem_polynomialFunctions_closure (a b : ‚Ñù) (f : C(Set.Icc a b, ‚Ñù)) :\n    f ‚àà (polynomialFunctions (Set.Icc a b)).topologicalClosure := by\n  rw [polynomialFunctions_closure_eq_top _ _]\n  simp\n\n"}
{"name":"exists_polynomial_near_continuousMap","module":"Mathlib.Topology.ContinuousMap.Weierstrass","initialProofState":"a b : Real\nf : ContinuousMap (‚Üë(Set.Icc a b)) Real\nŒµ : Real\npos : LT.lt 0 Œµ\n‚ä¢ Exists fun p => LT.lt (Norm.norm (HSub.hSub (p.toContinuousMapOn (Set.Icc a b)) f)) Œµ","decl":"/-- An alternative statement of Weierstrass' theorem,\nfor those who like their epsilons.\n\nEvery real-valued continuous function on `[a,b]` is within any `Œµ > 0` of some polynomial.\n-/\ntheorem exists_polynomial_near_continuousMap (a b : ‚Ñù) (f : C(Set.Icc a b, ‚Ñù)) (Œµ : ‚Ñù)\n    (pos : 0 < Œµ) : ‚àÉ p : ‚Ñù[X], ‚Äñp.toContinuousMapOn _ - f‚Äñ < Œµ := by\n  have w := mem_closure_iff_frequently.mp (continuousMap_mem_polynomialFunctions_closure _ _ f)\n  rw [Metric.nhds_basis_ball.frequently_iff] at w\n  obtain ‚ü®-, H, ‚ü®m, ‚ü®-, rfl‚ü©‚ü©‚ü© := w Œµ pos\n  rw [Metric.mem_ball, dist_eq_norm] at H\n  exact ‚ü®m, H‚ü©\n\n"}
{"name":"exists_polynomial_near_of_continuousOn","module":"Mathlib.Topology.ContinuousMap.Weierstrass","initialProofState":"a b : Real\nf : Real ‚Üí Real\nc : ContinuousOn f (Set.Icc a b)\nŒµ : Real\npos : LT.lt 0 Œµ\n‚ä¢ Exists fun p => ‚àÄ (x : Real), Membership.mem (Set.Icc a b) x ‚Üí LT.lt (abs (HSub.hSub (Polynomial.eval x p) (f x))) Œµ","decl":"/-- Another alternative statement of Weierstrass's theorem,\nfor those who like epsilons, but not bundled continuous functions.\n\nEvery real-valued function `‚Ñù ‚Üí ‚Ñù` which is continuous on `[a,b]`\ncan be approximated to within any `Œµ > 0` on `[a,b]` by some polynomial.\n-/\ntheorem exists_polynomial_near_of_continuousOn (a b : ‚Ñù) (f : ‚Ñù ‚Üí ‚Ñù)\n    (c : ContinuousOn f (Set.Icc a b)) (Œµ : ‚Ñù) (pos : 0 < Œµ) :\n    ‚àÉ p : ‚Ñù[X], ‚àÄ x ‚àà Set.Icc a b, |p.eval x - f x| < Œµ := by\n  let f' : C(Set.Icc a b, ‚Ñù) := ‚ü®fun x => f x, continuousOn_iff_continuous_restrict.mp c‚ü©\n  obtain ‚ü®p, b‚ü© := exists_polynomial_near_continuousMap a b f' Œµ pos\n  use p\n  rw [norm_lt_iff _ pos] at b\n  intro x m\n  exact b ‚ü®x, m‚ü©\n"}
