{"name":"IsSimpleGroup.eq_bot_or_eq_top_of_normal","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"G : Type u_1\ninst✝ : Group G\nself : IsSimpleGroup G\nH : Subgroup G\na✝ : H.Normal\n⊢ Or (Eq H Bot.bot) (Eq H Top.top)","decl":"/-- A `Group` is simple when it has exactly two normal `Subgroup`s. -/\nclass IsSimpleGroup extends Nontrivial G : Prop where\n  /-- Any normal subgroup is either `⊥` or `⊤` -/\n  eq_bot_or_eq_top_of_normal : ∀ H : Subgroup G, H.Normal → H = ⊥ ∨ H = ⊤\n\n"}
{"name":"IsSimpleGroup.toNontrivial","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"G : Type u_1\ninst✝ : Group G\nself : IsSimpleGroup G\n⊢ Nontrivial G","decl":"/-- A `Group` is simple when it has exactly two normal `Subgroup`s. -/\nclass IsSimpleGroup extends Nontrivial G : Prop where\n  /-- Any normal subgroup is either `⊥` or `⊤` -/\n  eq_bot_or_eq_top_of_normal : ∀ H : Subgroup G, H.Normal → H = ⊥ ∨ H = ⊤\n\n"}
{"name":"IsSimpleAddGroup.eq_bot_or_eq_top_of_normal","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"A : Type u_2\ninst✝ : AddGroup A\nself : IsSimpleAddGroup A\nH : AddSubgroup A\na✝ : H.Normal\n⊢ Or (Eq H Bot.bot) (Eq H Top.top)","decl":"/-- An `AddGroup` is simple when it has exactly two normal `AddSubgroup`s. -/\nclass IsSimpleAddGroup extends Nontrivial A : Prop where\n  /-- Any normal additive subgroup is either `⊥` or `⊤` -/\n  eq_bot_or_eq_top_of_normal : ∀ H : AddSubgroup A, H.Normal → H = ⊥ ∨ H = ⊤\n\n"}
{"name":"IsSimpleAddGroup.toNontrivial","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"A : Type u_2\ninst✝ : AddGroup A\nself : IsSimpleAddGroup A\n⊢ Nontrivial A","decl":"/-- An `AddGroup` is simple when it has exactly two normal `AddSubgroup`s. -/\nclass IsSimpleAddGroup extends Nontrivial A : Prop where\n  /-- Any normal additive subgroup is either `⊥` or `⊤` -/\n  eq_bot_or_eq_top_of_normal : ∀ H : AddSubgroup A, H.Normal → H = ⊥ ∨ H = ⊤\n\n"}
{"name":"Subgroup.Normal.eq_bot_or_eq_top","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsSimpleGroup G\nH : Subgroup G\nHn : H.Normal\n⊢ Or (Eq H Bot.bot) (Eq H Top.top)","decl":"@[to_additive]\ntheorem Subgroup.Normal.eq_bot_or_eq_top [IsSimpleGroup G] {H : Subgroup G} (Hn : H.Normal) :\n    H = ⊥ ∨ H = ⊤ :=\n  IsSimpleGroup.eq_bot_or_eq_top_of_normal H Hn\n\n"}
{"name":"AddSubgroup.Normal.eq_bot_or_eq_top","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsSimpleAddGroup G\nH : AddSubgroup G\nHn : H.Normal\n⊢ Or (Eq H Bot.bot) (Eq H Top.top)","decl":"@[to_additive]\ntheorem Subgroup.Normal.eq_bot_or_eq_top [IsSimpleGroup G] {H : Subgroup G} (Hn : H.Normal) :\n    H = ⊥ ∨ H = ⊤ :=\n  IsSimpleGroup.eq_bot_or_eq_top_of_normal H Hn\n\n"}
{"name":"IsSimpleAddGroup.instIsSimpleOrderAddSubgroup","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"C : Type u_3\ninst✝¹ : AddCommGroup C\ninst✝ : IsSimpleAddGroup C\n⊢ IsSimpleOrder (AddSubgroup C)","decl":"@[to_additive]\ninstance {C : Type*} [CommGroup C] [IsSimpleGroup C] : IsSimpleOrder (Subgroup C) :=\n  ⟨fun H => H.normal_of_comm.eq_bot_or_eq_top⟩\n\n"}
{"name":"IsSimpleGroup.instIsSimpleOrderSubgroup","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"C : Type u_3\ninst✝¹ : CommGroup C\ninst✝ : IsSimpleGroup C\n⊢ IsSimpleOrder (Subgroup C)","decl":"@[to_additive]\ninstance {C : Type*} [CommGroup C] [IsSimpleGroup C] : IsSimpleOrder (Subgroup C) :=\n  ⟨fun H => H.normal_of_comm.eq_bot_or_eq_top⟩\n\n"}
{"name":"IsSimpleGroup.isSimpleGroup_of_surjective","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"G : Type u_1\ninst✝³ : Group G\nH : Type u_3\ninst✝² : Group H\ninst✝¹ : IsSimpleGroup G\ninst✝ : Nontrivial H\nf : MonoidHom G H\nhf : Function.Surjective ⇑f\n⊢ IsSimpleGroup H","decl":"@[to_additive]\ntheorem isSimpleGroup_of_surjective {H : Type*} [Group H] [IsSimpleGroup G] [Nontrivial H]\n    (f : G →* H) (hf : Function.Surjective f) : IsSimpleGroup H :=\n  ⟨fun H iH => by\n    refine (iH.comap f).eq_bot_or_eq_top.imp (fun h => ?_) fun h => ?_\n    · rw [← map_bot f, ← h, map_comap_eq_self_of_surjective hf]\n    · rw [← comap_top f] at h\n      exact comap_injective hf h⟩\n\n"}
{"name":"IsSimpleAddGroup.isSimpleAddGroup_of_surjective","module":"Mathlib.GroupTheory.Subgroup.Simple","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\nH : Type u_3\ninst✝² : AddGroup H\ninst✝¹ : IsSimpleAddGroup G\ninst✝ : Nontrivial H\nf : AddMonoidHom G H\nhf : Function.Surjective ⇑f\n⊢ IsSimpleAddGroup H","decl":"@[to_additive]\ntheorem isSimpleGroup_of_surjective {H : Type*} [Group H] [IsSimpleGroup G] [Nontrivial H]\n    (f : G →* H) (hf : Function.Surjective f) : IsSimpleGroup H :=\n  ⟨fun H iH => by\n    refine (iH.comap f).eq_bot_or_eq_top.imp (fun h => ?_) fun h => ?_\n    · rw [← map_bot f, ← h, map_comap_eq_self_of_surjective hf]\n    · rw [← comap_top f] at h\n      exact comap_injective hf h⟩\n\n"}
