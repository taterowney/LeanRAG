{"name":"NormedSpace.Dual.coe_toWeakDual","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' : NormedSpace.Dual 𝕜 E\n⊢ Eq (NormedSpace.Dual.toWeakDual x') x'","decl":"@[simp]\ntheorem coe_toWeakDual (x' : Dual 𝕜 E) : toWeakDual x' = x' :=\n  rfl\n\n"}
{"name":"NormedSpace.Dual.toWeakDual_inj","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' y' : NormedSpace.Dual 𝕜 E\n⊢ Iff (Eq (NormedSpace.Dual.toWeakDual x') (NormedSpace.Dual.toWeakDual y')) (Eq x' y')","decl":"@[simp]\ntheorem toWeakDual_inj (x' y' : Dual 𝕜 E) : toWeakDual x' = toWeakDual y' ↔ x' = y' :=\n  (LinearEquiv.injective toWeakDual).eq_iff\n\n"}
{"name":"NormedSpace.Dual.toWeakDual_eq_iff","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' y' : NormedSpace.Dual 𝕜 E\n⊢ Iff (Eq (NormedSpace.Dual.toWeakDual x') (NormedSpace.Dual.toWeakDual y')) (Eq x' y')","decl":"@[deprecated (since := \"2024-12-29\")] alias toWeakDual_eq_iff := toWeakDual_inj\n\n"}
{"name":"NormedSpace.Dual.toWeakDual_continuous","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\n⊢ Continuous fun x' => NormedSpace.Dual.toWeakDual x'","decl":"theorem toWeakDual_continuous : Continuous fun x' : Dual 𝕜 E => toWeakDual x' :=\n  WeakBilin.continuous_of_continuous_eval _ fun z => (inclusionInDoubleDual 𝕜 E z).continuous\n\n"}
{"name":"NormedSpace.Dual.dual_norm_topology_le_weak_dual_topology","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\n⊢ LE.le UniformSpace.toTopologicalSpace WeakDual.instTopologicalSpace","decl":"/-- The weak-star topology is coarser than the dual-norm topology. -/\ntheorem dual_norm_topology_le_weak_dual_topology :\n    (UniformSpace.toTopologicalSpace : TopologicalSpace (Dual 𝕜 E)) ≤\n      (WeakDual.instTopologicalSpace : TopologicalSpace (WeakDual 𝕜 E)) := by\n  convert (@toWeakDual_continuous _ _ _ _ (by assumption)).le_induced\n  exact induced_id.symm\n\n"}
{"name":"WeakDual.toNormedDual_apply","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : WeakDual 𝕜 E\ny : E\n⊢ Eq ((WeakDual.toNormedDual x) y) (x y)","decl":"theorem toNormedDual_apply (x : WeakDual 𝕜 E) (y : E) : (toNormedDual x) y = x y :=\n  rfl\n\n"}
{"name":"WeakDual.coe_toNormedDual","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' : WeakDual 𝕜 E\n⊢ Eq (WeakDual.toNormedDual x') x'","decl":"@[simp]\ntheorem coe_toNormedDual (x' : WeakDual 𝕜 E) : toNormedDual x' = x' :=\n  rfl\n\n"}
{"name":"WeakDual.toNormedDual_inj","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' y' : WeakDual 𝕜 E\n⊢ Iff (Eq (WeakDual.toNormedDual x') (WeakDual.toNormedDual y')) (Eq x' y')","decl":"@[simp]\ntheorem toNormedDual_inj (x' y' : WeakDual 𝕜 E) : toNormedDual x' = toNormedDual y' ↔ x' = y' :=\n  (LinearEquiv.injective toNormedDual).eq_iff\n\n"}
{"name":"WeakDual.toNormedDual_eq_iff","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' y' : WeakDual 𝕜 E\n⊢ Iff (Eq (WeakDual.toNormedDual x') (WeakDual.toNormedDual y')) (Eq x' y')","decl":"@[deprecated (since := \"2024-12-29\")] alias toNormedDual_eq_iff := toNormedDual_inj\n\n"}
{"name":"WeakDual.isClosed_closedBall","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx' : NormedSpace.Dual 𝕜 E\nr : Real\n⊢ IsClosed (Set.preimage (⇑WeakDual.toNormedDual) (Metric.closedBall x' r))","decl":"theorem isClosed_closedBall (x' : Dual 𝕜 E) (r : ℝ) : IsClosed (toNormedDual ⁻¹' closedBall x' r) :=\n  isClosed_induced_iff'.2 (ContinuousLinearMap.is_weak_closed_closedBall x' r)\n\n"}
{"name":"WeakDual.polar_def","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set E\n⊢ Eq (WeakDual.polar 𝕜 s) (setOf fun f => ∀ (x : E), Membership.mem s x → LE.le (Norm.norm (f x)) 1)","decl":"theorem polar_def (s : Set E) : polar 𝕜 s = { f : WeakDual 𝕜 E | ∀ x ∈ s, ‖f x‖ ≤ 1 } :=\n  rfl\n\n"}
{"name":"WeakDual.isClosed_polar","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set E\n⊢ IsClosed (WeakDual.polar 𝕜 s)","decl":"/-- The polar `polar 𝕜 s` of a set `s : E` is a closed subset when the weak star topology\nis used. -/\ntheorem isClosed_polar (s : Set E) : IsClosed (polar 𝕜 s) := by\n  simp only [polar_def, setOf_forall]\n  exact isClosed_biInter fun x hx => isClosed_Iic.preimage (WeakBilin.eval_continuous _ _).norm\n\n"}
{"name":"WeakDual.isClosed_image_coe_of_bounded_of_closed","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set (WeakDual 𝕜 E)\nhb : Bornology.IsBounded (Set.preimage (⇑NormedSpace.Dual.toWeakDual) s)\nhc : IsClosed s\n⊢ IsClosed (Set.image DFunLike.coe s)","decl":"/-- While the coercion `↑ : WeakDual 𝕜 E → (E → 𝕜)` is not a closed map, it sends *bounded*\nclosed sets to closed sets. -/\ntheorem isClosed_image_coe_of_bounded_of_closed {s : Set (WeakDual 𝕜 E)}\n    (hb : IsBounded (Dual.toWeakDual ⁻¹' s)) (hc : IsClosed s) :\n    IsClosed (((↑) : WeakDual 𝕜 E → E → 𝕜) '' s) :=\n  ContinuousLinearMap.isClosed_image_coe_of_bounded_of_weak_closed hb (isClosed_induced_iff'.1 hc)\n\n"}
{"name":"WeakDual.isCompact_of_bounded_of_closed","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : ProperSpace 𝕜\ns : Set (WeakDual 𝕜 E)\nhb : Bornology.IsBounded (Set.preimage (⇑NormedSpace.Dual.toWeakDual) s)\nhc : IsClosed s\n⊢ IsCompact s","decl":"theorem isCompact_of_bounded_of_closed [ProperSpace 𝕜] {s : Set (WeakDual 𝕜 E)}\n    (hb : IsBounded (Dual.toWeakDual ⁻¹' s)) (hc : IsClosed s) : IsCompact s :=\n  DFunLike.coe_injective.isEmbedding_induced.isCompact_iff.mpr <|\n    ContinuousLinearMap.isCompact_image_coe_of_bounded_of_closed_image hb <|\n      isClosed_image_coe_of_bounded_of_closed hb hc\n\n"}
{"name":"WeakDual.isClosed_image_polar_of_mem_nhds","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set E\ns_nhd : Membership.mem (nhds 0) s\n⊢ IsClosed (Set.image DFunLike.coe (WeakDual.polar 𝕜 s))","decl":"/-- The image under `↑ : WeakDual 𝕜 E → (E → 𝕜)` of a polar `WeakDual.polar 𝕜 s` of a\nneighborhood `s` of the origin is a closed set. -/\ntheorem isClosed_image_polar_of_mem_nhds {s : Set E} (s_nhd : s ∈ 𝓝 (0 : E)) :\n    IsClosed (((↑) : WeakDual 𝕜 E → E → 𝕜) '' polar 𝕜 s) :=\n  isClosed_image_coe_of_bounded_of_closed (isBounded_polar_of_mem_nhds_zero 𝕜 s_nhd)\n    (isClosed_polar _ _)\n\n"}
{"name":"NormedSpace.Dual.isClosed_image_polar_of_mem_nhds","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set E\ns_nhd : Membership.mem (nhds 0) s\n⊢ IsClosed (Set.image DFunLike.coe (NormedSpace.polar 𝕜 s))","decl":"/-- The image under `↑ : NormedSpace.Dual 𝕜 E → (E → 𝕜)` of a polar `polar 𝕜 s` of a\nneighborhood `s` of the origin is a closed set. -/\ntheorem _root_.NormedSpace.Dual.isClosed_image_polar_of_mem_nhds {s : Set E}\n    (s_nhd : s ∈ 𝓝 (0 : E)) :\n    IsClosed (((↑) : Dual 𝕜 E → E → 𝕜) '' NormedSpace.polar 𝕜 s) :=\n  WeakDual.isClosed_image_polar_of_mem_nhds 𝕜 s_nhd\n\n"}
{"name":"WeakDual.isCompact_polar","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : ProperSpace 𝕜\ns : Set E\ns_nhd : Membership.mem (nhds 0) s\n⊢ IsCompact (WeakDual.polar 𝕜 s)","decl":"/-- The **Banach-Alaoglu theorem**: the polar set of a neighborhood `s` of the origin in a\nnormed space `E` is a compact subset of `WeakDual 𝕜 E`. -/\ntheorem isCompact_polar [ProperSpace 𝕜] {s : Set E} (s_nhd : s ∈ 𝓝 (0 : E)) :\n    IsCompact (polar 𝕜 s) :=\n  isCompact_of_bounded_of_closed (isBounded_polar_of_mem_nhds_zero 𝕜 s_nhd) (isClosed_polar _ _)\n\n"}
{"name":"WeakDual.isCompact_closedBall","module":"Mathlib.Analysis.Normed.Module.WeakDual","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : ProperSpace 𝕜\nx' : NormedSpace.Dual 𝕜 E\nr : Real\n⊢ IsCompact (Set.preimage (⇑WeakDual.toNormedDual) (Metric.closedBall x' r))","decl":"/-- The **Banach-Alaoglu theorem**: closed balls of the dual of a normed space `E` are compact in\nthe weak-star topology. -/\ntheorem isCompact_closedBall [ProperSpace 𝕜] (x' : Dual 𝕜 E) (r : ℝ) :\n    IsCompact (toNormedDual ⁻¹' closedBall x' r) :=\n  isCompact_of_bounded_of_closed isBounded_closedBall (isClosed_closedBall x' r)\n\n"}
