{"name":"AlgebraicGeometry.isProper_iff","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.IsProper f) (And (AlgebraicGeometry.IsSeparated f) (And (AlgebraicGeometry.UniversallyClosed f) (AlgebraicGeometry.LocallyOfFiniteType f)))","decl":"/-- A morphism is proper if it is separated, universally closed and locally of finite type. -/\n@[mk_iff]\nclass IsProper extends IsSeparated f, UniversallyClosed f, LocallyOfFiniteType f : Prop where\n\n"}
{"name":"AlgebraicGeometry.IsProper.toIsSeparated","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.IsProper f\n⊢ AlgebraicGeometry.IsSeparated f","decl":"/-- A morphism is proper if it is separated, universally closed and locally of finite type. -/\n@[mk_iff]\nclass IsProper extends IsSeparated f, UniversallyClosed f, LocallyOfFiniteType f : Prop where\n\n"}
{"name":"AlgebraicGeometry.IsProper.toLocallyOfFiniteType","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.IsProper f\n⊢ AlgebraicGeometry.LocallyOfFiniteType f","decl":"/-- A morphism is proper if it is separated, universally closed and locally of finite type. -/\n@[mk_iff]\nclass IsProper extends IsSeparated f, UniversallyClosed f, LocallyOfFiniteType f : Prop where\n\n"}
{"name":"AlgebraicGeometry.IsProper.toUniversallyClosed","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.IsProper f\n⊢ AlgebraicGeometry.UniversallyClosed f","decl":"/-- A morphism is proper if it is separated, universally closed and locally of finite type. -/\n@[mk_iff]\nclass IsProper extends IsSeparated f, UniversallyClosed f, LocallyOfFiniteType f : Prop where\n\n"}
{"name":"AlgebraicGeometry.isProper_eq","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"⊢ Eq (@AlgebraicGeometry.IsProper) (Min.min (Min.min @AlgebraicGeometry.IsSeparated @AlgebraicGeometry.UniversallyClosed) @AlgebraicGeometry.LocallyOfFiniteType)","decl":"lemma isProper_eq : @IsProper =\n    (@IsSeparated ⊓ @UniversallyClosed : MorphismProperty Scheme) ⊓ @LocallyOfFiniteType := by\n  ext X Y f\n  rw [isProper_iff, ← and_assoc]\n  rfl\n\n"}
{"name":"AlgebraicGeometry.IsProper.instRespectsIsoScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"⊢ CategoryTheory.MorphismProperty.RespectsIso @AlgebraicGeometry.IsProper","decl":"instance : MorphismProperty.RespectsIso @IsProper := by\n  rw [isProper_eq]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.IsProper.stableUnderComposition","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderComposition @AlgebraicGeometry.IsProper","decl":"instance stableUnderComposition : MorphismProperty.IsStableUnderComposition @IsProper := by\n  rw [isProper_eq]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.IsProper.instIsMultiplicativeScheme","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsMultiplicative @AlgebraicGeometry.IsProper","decl":"instance : MorphismProperty.IsMultiplicative @IsProper := by\n  rw [isProper_eq]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.IsProper.instOfIsClosedImmersion","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsClosedImmersion f\n⊢ AlgebraicGeometry.IsProper f","decl":"instance (priority := 900) [IsClosedImmersion f] : IsProper f where\n\n"}
{"name":"AlgebraicGeometry.IsProper.isStableUnderBaseChange","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"⊢ CategoryTheory.MorphismProperty.IsStableUnderBaseChange @AlgebraicGeometry.IsProper","decl":"instance isStableUnderBaseChange : MorphismProperty.IsStableUnderBaseChange @IsProper := by\n  rw [isProper_eq]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.IsProper.instIsLocalAtTarget","module":"Mathlib.AlgebraicGeometry.Morphisms.Proper","initialProofState":"⊢ AlgebraicGeometry.IsLocalAtTarget @AlgebraicGeometry.IsProper","decl":"instance : IsLocalAtTarget @IsProper := by\n  rw [isProper_eq]\n  infer_instance\n\n"}
