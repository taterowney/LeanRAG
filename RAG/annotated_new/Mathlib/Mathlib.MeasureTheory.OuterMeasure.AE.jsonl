{"name":"MeasureTheory.mem_ae_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ Iff (Membership.mem (MeasureTheory.ae μ) s) (Eq (μ (HasCompl.compl s)) 0)","decl":"theorem mem_ae_iff {s : Set α} : s ∈ ae μ ↔ μ sᶜ = 0 :=\n  Iff.rfl\n\n"}
{"name":"MeasureTheory.ae_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\np : α → Prop\n⊢ Iff (Filter.Eventually (fun a => p a) (MeasureTheory.ae μ)) (Eq (μ (setOf fun a => Not (p a))) 0)","decl":"theorem ae_iff {p : α → Prop} : (∀ᵐ a ∂μ, p a) ↔ μ { a | ¬p a } = 0 :=\n  Iff.rfl\n\n"}
{"name":"MeasureTheory.compl_mem_ae_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ Iff (Membership.mem (MeasureTheory.ae μ) (HasCompl.compl s)) (Eq (μ s) 0)","decl":"theorem compl_mem_ae_iff {s : Set α} : sᶜ ∈ ae μ ↔ μ s = 0 := by simp only [mem_ae_iff, compl_compl]\n\n"}
{"name":"MeasureTheory.frequently_ae_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\np : α → Prop\n⊢ Iff (Filter.Frequently (fun a => p a) (MeasureTheory.ae μ)) (Ne (μ (setOf fun a => p a)) 0)","decl":"theorem frequently_ae_iff {p : α → Prop} : (∃ᵐ a ∂μ, p a) ↔ μ { a | p a } ≠ 0 :=\n  not_congr compl_mem_ae_iff\n\n"}
{"name":"MeasureTheory.frequently_ae_mem_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ Iff (Filter.Frequently (fun a => Membership.mem s a) (MeasureTheory.ae μ)) (Ne (μ s) 0)","decl":"theorem frequently_ae_mem_iff {s : Set α} : (∃ᵐ a ∂μ, a ∈ s) ↔ μ s ≠ 0 :=\n  not_congr compl_mem_ae_iff\n\n"}
{"name":"MeasureTheory.measure_zero_iff_ae_nmem","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ Iff (Eq (μ s) 0) (Filter.Eventually (fun a => Not (Membership.mem s a)) (MeasureTheory.ae μ))","decl":"theorem measure_zero_iff_ae_nmem {s : Set α} : μ s = 0 ↔ ∀ᵐ a ∂μ, a ∉ s :=\n  compl_mem_ae_iff.symm\n\n"}
{"name":"MeasureTheory.ae_of_all","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\np : α → Prop\nμ : F\na✝ : ∀ (a : α), p a\n⊢ Filter.Eventually (fun a => p a) (MeasureTheory.ae μ)","decl":"theorem ae_of_all {p : α → Prop} (μ : F) : (∀ a, p a) → ∀ᵐ a ∂μ, p a :=\n  Eventually.of_forall\n\n"}
{"name":"MeasureTheory.instCountableInterFilter","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\n⊢ CountableInterFilter (MeasureTheory.ae μ)","decl":"instance instCountableInterFilter : CountableInterFilter (ae μ) := by\n  unfold ae; infer_instance\n\n"}
{"name":"MeasureTheory.ae_all_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\nι : Sort u_4\ninst✝ : Countable ι\np : α → ι → Prop\n⊢ Iff (Filter.Eventually (fun a => ∀ (i : ι), p a i) (MeasureTheory.ae μ)) (∀ (i : ι), Filter.Eventually (fun a => p a i) (MeasureTheory.ae μ))","decl":"theorem ae_all_iff {ι : Sort*} [Countable ι] {p : α → ι → Prop} :\n    (∀ᵐ a ∂μ, ∀ i, p a i) ↔ ∀ i, ∀ᵐ a ∂μ, p a i :=\n  eventually_countable_forall\n\n"}
{"name":"MeasureTheory.all_ae_of","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nι : Sort u_4\np : α → ι → Prop\nhp : Filter.Eventually (fun a => ∀ (i : ι), p a i) (MeasureTheory.ae μ)\ni : ι\n⊢ Filter.Eventually (fun a => p a i) (MeasureTheory.ae μ)","decl":"theorem all_ae_of {ι : Sort*} {p : α → ι → Prop} (hp : ∀ᵐ a ∂μ, ∀ i, p a i) (i : ι) :\n    ∀ᵐ a ∂μ, p a i := by\n  filter_upwards [hp] with a ha using ha i\n\n"}
{"name":"MeasureTheory.ae_iff_of_countable","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\ninst✝ : Countable α\np : α → Prop\n⊢ Iff (Filter.Eventually (fun x => p x) (MeasureTheory.ae μ)) (∀ (x : α), Ne (μ (Singleton.singleton x)) 0 → p x)","decl":"lemma ae_iff_of_countable [Countable α] {p : α → Prop} : (∀ᵐ x ∂μ, p x) ↔ ∀ x, μ {x} ≠ 0 → p x := by\n  rw [ae_iff, measure_null_iff_singleton]\n  exacts [forall_congr' fun _ ↦ not_imp_comm, Set.to_countable _]\n\n"}
{"name":"MeasureTheory.ae_ball_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nι : Type u_4\nS : Set ι\nhS : S.Countable\np : α → (i : ι) → Membership.mem S i → Prop\n⊢ Iff (Filter.Eventually (fun x => ∀ (i : ι) (hi : Membership.mem S i), p x i hi) (MeasureTheory.ae μ)) (∀ (i : ι) (hi : Membership.mem S i), Filter.Eventually (fun x => p x i hi) (MeasureTheory.ae μ))","decl":"theorem ae_ball_iff {ι : Type*} {S : Set ι} (hS : S.Countable) {p : α → ∀ i ∈ S, Prop} :\n    (∀ᵐ x ∂μ, ∀ i (hi : i ∈ S), p x i hi) ↔ ∀ i (hi : i ∈ S), ∀ᵐ x ∂μ, p x i hi :=\n  eventually_countable_ball hS\n\n"}
{"name":"MeasureTheory.ae_eq_refl","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nf : α → β\n⊢ (MeasureTheory.ae μ).EventuallyEq f f","decl":"lemma ae_eq_refl (f : α → β) : f =ᵐ[μ] f := EventuallyEq.rfl\n"}
{"name":"MeasureTheory.ae_eq_rfl","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nf : α → β\n⊢ (MeasureTheory.ae μ).EventuallyEq f f","decl":"lemma ae_eq_rfl {f : α → β} : f =ᵐ[μ] f := EventuallyEq.rfl\n"}
{"name":"MeasureTheory.ae_eq_comm","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nf g : α → β\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq f g) ((MeasureTheory.ae μ).EventuallyEq g f)","decl":"lemma ae_eq_comm {f g : α → β} : f =ᵐ[μ] g ↔ g =ᵐ[μ] f := eventuallyEq_comm\n\n"}
{"name":"MeasureTheory.ae_eq_symm","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nf g : α → β\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ (MeasureTheory.ae μ).EventuallyEq g f","decl":"theorem ae_eq_symm {f g : α → β} (h : f =ᵐ[μ] g) : g =ᵐ[μ] f :=\n  h.symm\n\n"}
{"name":"MeasureTheory.ae_eq_trans","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nβ : Type u_2\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\nf g h : α → β\nh₁ : (MeasureTheory.ae μ).EventuallyEq f g\nh₂ : (MeasureTheory.ae μ).EventuallyEq g h\n⊢ (MeasureTheory.ae μ).EventuallyEq f h","decl":"theorem ae_eq_trans {f g h : α → β} (h₁ : f =ᵐ[μ] g) (h₂ : g =ᵐ[μ] h) : f =ᵐ[μ] h :=\n  h₁.trans h₂\n\n"}
{"name":"MeasureTheory.ae_eq_top","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\n⊢ Iff (Eq (MeasureTheory.ae μ) Top.top) (∀ (a : α), Ne (μ (Singleton.singleton a)) 0)","decl":"@[simp] lemma ae_eq_top  : ae μ = ⊤ ↔ ∀ a, μ {a} ≠ 0 := by\n  simp only [Filter.ext_iff, mem_ae_iff, mem_top, ne_eq]\n  refine ⟨fun h a ha ↦ by simpa [ha] using (h {a}ᶜ).1, fun h s ↦ ⟨fun hs ↦ ?_, ?_⟩⟩\n  · rw [← compl_empty_iff, ← not_nonempty_iff_eq_empty]\n    rintro ⟨a, ha⟩\n    exact h _ <| measure_mono_null (singleton_subset_iff.2 ha) hs\n  · rintro rfl\n    simp\n\n"}
{"name":"MeasureTheory.ae_le_of_ae_lt","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\nβ : Type u_4\ninst✝ : Preorder β\nf g : α → β\nh : Filter.Eventually (fun x => LT.lt (f x) (g x)) (MeasureTheory.ae μ)\n⊢ (MeasureTheory.ae μ).EventuallyLE f g","decl":"theorem ae_le_of_ae_lt {β : Type*} [Preorder β] {f g : α → β} (h : ∀ᵐ x ∂μ, f x < g x) :\n    f ≤ᵐ[μ] g :=\n  h.mono fun _ ↦ le_of_lt\n\n"}
{"name":"MeasureTheory.ae_eq_empty","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) (Eq (μ s) 0)","decl":"@[simp]\ntheorem ae_eq_empty : s =ᵐ[μ] (∅ : Set α) ↔ μ s = 0 :=\n  eventuallyEq_empty.trans <| by simp only [ae_iff, Classical.not_not, setOf_mem_eq]\n\n-- Porting note: The priority should be higher than `eventuallyEq_univ`.\n"}
{"name":"MeasureTheory.ae_eq_univ","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq s Set.univ) (Eq (μ (HasCompl.compl s)) 0)","decl":"@[simp high]\ntheorem ae_eq_univ : s =ᵐ[μ] (univ : Set α) ↔ μ sᶜ = 0 :=\n  eventuallyEq_univ\n\n"}
{"name":"MeasureTheory.ae_le_set","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyLE s t) (Eq (μ (SDiff.sdiff s t)) 0)","decl":"theorem ae_le_set : s ≤ᵐ[μ] t ↔ μ (s \\ t) = 0 :=\n  calc\n    s ≤ᵐ[μ] t ↔ ∀ᵐ x ∂μ, x ∈ s → x ∈ t := Iff.rfl\n    _ ↔ μ (s \\ t) = 0 := by simp [ae_iff]; rfl\n\n"}
{"name":"MeasureTheory.ae_le_set_inter","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t s' t' : Set α\nh : (MeasureTheory.ae μ).EventuallyLE s t\nh' : (MeasureTheory.ae μ).EventuallyLE s' t'\n⊢ (MeasureTheory.ae μ).EventuallyLE (Inter.inter s s') (Inter.inter t t')","decl":"theorem ae_le_set_inter {s' t' : Set α} (h : s ≤ᵐ[μ] t) (h' : s' ≤ᵐ[μ] t') :\n    (s ∩ s' : Set α) ≤ᵐ[μ] (t ∩ t' : Set α) :=\n  h.inter h'\n\n"}
{"name":"MeasureTheory.ae_le_set_union","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t s' t' : Set α\nh : (MeasureTheory.ae μ).EventuallyLE s t\nh' : (MeasureTheory.ae μ).EventuallyLE s' t'\n⊢ (MeasureTheory.ae μ).EventuallyLE (Union.union s s') (Union.union t t')","decl":"theorem ae_le_set_union {s' t' : Set α} (h : s ≤ᵐ[μ] t) (h' : s' ≤ᵐ[μ] t') :\n    (s ∪ s' : Set α) ≤ᵐ[μ] (t ∪ t' : Set α) :=\n  h.union h'\n\n"}
{"name":"MeasureTheory.union_ae_eq_right","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq (Union.union s t) t) (Eq (μ (SDiff.sdiff s t)) 0)","decl":"theorem union_ae_eq_right : (s ∪ t : Set α) =ᵐ[μ] t ↔ μ (s \\ t) = 0 := by\n  simp [eventuallyLE_antisymm_iff, ae_le_set, union_diff_right,\n    diff_eq_empty.2 Set.subset_union_right]\n\n"}
{"name":"MeasureTheory.diff_ae_eq_self","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq (SDiff.sdiff s t) s) (Eq (μ (Inter.inter s t)) 0)","decl":"theorem diff_ae_eq_self : (s \\ t : Set α) =ᵐ[μ] s ↔ μ (s ∩ t) = 0 := by\n  simp [eventuallyLE_antisymm_iff, ae_le_set, diff_diff_right, diff_diff,\n    diff_eq_empty.2 Set.subset_union_right]\n\n"}
{"name":"MeasureTheory.diff_null_ae_eq_self","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nht : Eq (μ t) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq (SDiff.sdiff s t) s","decl":"theorem diff_null_ae_eq_self (ht : μ t = 0) : (s \\ t : Set α) =ᵐ[μ] s :=\n  diff_ae_eq_self.mpr (measure_mono_null inter_subset_right ht)\n\n"}
{"name":"MeasureTheory.ae_eq_set","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq s t) (And (Eq (μ (SDiff.sdiff s t)) 0) (Eq (μ (SDiff.sdiff t s)) 0))","decl":"theorem ae_eq_set {s t : Set α} : s =ᵐ[μ] t ↔ μ (s \\ t) = 0 ∧ μ (t \\ s) = 0 := by\n  simp [eventuallyLE_antisymm_iff, ae_le_set]\n\n"}
{"name":"MeasureTheory.measure_symmDiff_eq_zero_iff","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff (Eq (μ (symmDiff s t)) 0) ((MeasureTheory.ae μ).EventuallyEq s t)","decl":"open scoped symmDiff in\n@[simp]\ntheorem measure_symmDiff_eq_zero_iff {s t : Set α} : μ (s ∆ t) = 0 ↔ s =ᵐ[μ] t := by\n  simp [ae_eq_set, symmDiff_def]\n\n"}
{"name":"MeasureTheory.ae_eq_set_compl_compl","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq (HasCompl.compl s) (HasCompl.compl t)) ((MeasureTheory.ae μ).EventuallyEq s t)","decl":"@[simp]\ntheorem ae_eq_set_compl_compl {s t : Set α} : sᶜ =ᵐ[μ] tᶜ ↔ s =ᵐ[μ] t := by\n  simp only [← measure_symmDiff_eq_zero_iff, compl_symmDiff_compl]\n\n"}
{"name":"MeasureTheory.ae_eq_set_compl","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq (HasCompl.compl s) t) ((MeasureTheory.ae μ).EventuallyEq s (HasCompl.compl t))","decl":"theorem ae_eq_set_compl {s t : Set α} : sᶜ =ᵐ[μ] t ↔ s =ᵐ[μ] tᶜ := by\n  rw [← ae_eq_set_compl_compl, compl_compl]\n\n"}
{"name":"MeasureTheory.ae_eq_set_inter","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t s' t' : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s t\nh' : (MeasureTheory.ae μ).EventuallyEq s' t'\n⊢ (MeasureTheory.ae μ).EventuallyEq (Inter.inter s s') (Inter.inter t t')","decl":"theorem ae_eq_set_inter {s' t' : Set α} (h : s =ᵐ[μ] t) (h' : s' =ᵐ[μ] t') :\n    (s ∩ s' : Set α) =ᵐ[μ] (t ∩ t' : Set α) :=\n  h.inter h'\n\n"}
{"name":"MeasureTheory.ae_eq_set_union","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t s' t' : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s t\nh' : (MeasureTheory.ae μ).EventuallyEq s' t'\n⊢ (MeasureTheory.ae μ).EventuallyEq (Union.union s s') (Union.union t t')","decl":"theorem ae_eq_set_union {s' t' : Set α} (h : s =ᵐ[μ] t) (h' : s' =ᵐ[μ] t') :\n    (s ∪ s' : Set α) =ᵐ[μ] (t ∪ t' : Set α) :=\n  h.union h'\n\n"}
{"name":"MeasureTheory.union_ae_eq_univ_of_ae_eq_univ_left","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s Set.univ\n⊢ (MeasureTheory.ae μ).EventuallyEq (Union.union s t) Set.univ","decl":"theorem union_ae_eq_univ_of_ae_eq_univ_left (h : s =ᵐ[μ] univ) : (s ∪ t : Set α) =ᵐ[μ] univ :=\n  (ae_eq_set_union h (ae_eq_refl t)).trans <| by rw [univ_union]\n\n"}
{"name":"MeasureTheory.union_ae_eq_univ_of_ae_eq_univ_right","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq t Set.univ\n⊢ (MeasureTheory.ae μ).EventuallyEq (Union.union s t) Set.univ","decl":"theorem union_ae_eq_univ_of_ae_eq_univ_right (h : t =ᵐ[μ] univ) : (s ∪ t : Set α) =ᵐ[μ] univ := by\n  convert ae_eq_set_union (ae_eq_refl s) h\n  rw [union_univ]\n\n"}
{"name":"MeasureTheory.union_ae_eq_right_of_ae_eq_empty","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection\n⊢ (MeasureTheory.ae μ).EventuallyEq (Union.union s t) t","decl":"theorem union_ae_eq_right_of_ae_eq_empty (h : s =ᵐ[μ] (∅ : Set α)) : (s ∪ t : Set α) =ᵐ[μ] t := by\n  convert ae_eq_set_union h (ae_eq_refl t)\n  rw [empty_union]\n\n"}
{"name":"MeasureTheory.union_ae_eq_left_of_ae_eq_empty","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq t EmptyCollection.emptyCollection\n⊢ (MeasureTheory.ae μ).EventuallyEq (Union.union s t) s","decl":"theorem union_ae_eq_left_of_ae_eq_empty (h : t =ᵐ[μ] (∅ : Set α)) : (s ∪ t : Set α) =ᵐ[μ] s := by\n  convert ae_eq_set_union (ae_eq_refl s) h\n  rw [union_empty]\n\n"}
{"name":"MeasureTheory.inter_ae_eq_right_of_ae_eq_univ","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s Set.univ\n⊢ (MeasureTheory.ae μ).EventuallyEq (Inter.inter s t) t","decl":"theorem inter_ae_eq_right_of_ae_eq_univ (h : s =ᵐ[μ] univ) : (s ∩ t : Set α) =ᵐ[μ] t := by\n  convert ae_eq_set_inter h (ae_eq_refl t)\n  rw [univ_inter]\n\n"}
{"name":"MeasureTheory.inter_ae_eq_left_of_ae_eq_univ","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq t Set.univ\n⊢ (MeasureTheory.ae μ).EventuallyEq (Inter.inter s t) s","decl":"theorem inter_ae_eq_left_of_ae_eq_univ (h : t =ᵐ[μ] univ) : (s ∩ t : Set α) =ᵐ[μ] s := by\n  convert ae_eq_set_inter (ae_eq_refl s) h\n  rw [inter_univ]\n\n"}
{"name":"MeasureTheory.inter_ae_eq_empty_of_ae_eq_empty_left","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection\n⊢ (MeasureTheory.ae μ).EventuallyEq (Inter.inter s t) EmptyCollection.emptyCollection","decl":"theorem inter_ae_eq_empty_of_ae_eq_empty_left (h : s =ᵐ[μ] (∅ : Set α)) :\n    (s ∩ t : Set α) =ᵐ[μ] (∅ : Set α) := by\n  convert ae_eq_set_inter h (ae_eq_refl t)\n  rw [empty_inter]\n\n"}
{"name":"MeasureTheory.inter_ae_eq_empty_of_ae_eq_empty_right","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq t EmptyCollection.emptyCollection\n⊢ (MeasureTheory.ae μ).EventuallyEq (Inter.inter s t) EmptyCollection.emptyCollection","decl":"theorem inter_ae_eq_empty_of_ae_eq_empty_right (h : t =ᵐ[μ] (∅ : Set α)) :\n    (s ∩ t : Set α) =ᵐ[μ] (∅ : Set α) := by\n  convert ae_eq_set_inter (ae_eq_refl s) h\n  rw [inter_empty]\n\n"}
{"name":"Set.indicator_ae_eq_zero","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\nM : Type u_4\ninst✝ : Zero M\nf : α → M\ns : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq (s.indicator f) 0) (Eq (μ (Inter.inter s (Function.support f))) 0)","decl":"@[to_additive]\ntheorem _root_.Set.mulIndicator_ae_eq_one {M : Type*} [One M] {f : α → M} {s : Set α} :\n    s.mulIndicator f =ᵐ[μ] 1 ↔ μ (s ∩ f.mulSupport) = 0 := by\n  simp [EventuallyEq, eventually_iff, ae, compl_setOf]; rfl\n\n"}
{"name":"Set.mulIndicator_ae_eq_one","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝² : FunLike F (Set α) ENNReal\ninst✝¹ : MeasureTheory.OuterMeasureClass F α\nμ : F\nM : Type u_4\ninst✝ : One M\nf : α → M\ns : Set α\n⊢ Iff ((MeasureTheory.ae μ).EventuallyEq (s.mulIndicator f) 1) (Eq (μ (Inter.inter s (Function.mulSupport f))) 0)","decl":"@[to_additive]\ntheorem _root_.Set.mulIndicator_ae_eq_one {M : Type*} [One M] {f : α → M} {s : Set α} :\n    s.mulIndicator f =ᵐ[μ] 1 ↔ μ (s ∩ f.mulSupport) = 0 := by\n  simp [EventuallyEq, eventually_iff, ae, compl_setOf]; rfl\n\n"}
{"name":"MeasureTheory.measure_mono_ae","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nH : (MeasureTheory.ae μ).EventuallyLE s t\n⊢ LE.le (μ s) (μ t)","decl":"/-- If `s ⊆ t` modulo a set of measure `0`, then `μ s ≤ μ t`. -/\n@[mono]\ntheorem measure_mono_ae (H : s ≤ᵐ[μ] t) : μ s ≤ μ t :=\n  calc\n    μ s ≤ μ (s ∪ t) := measure_mono subset_union_left\n    _ = μ (t ∪ s \\ t) := by rw [union_diff_self, Set.union_comm]\n    _ ≤ μ t + μ (s \\ t) := measure_union_le _ _\n    _ = μ t := by rw [ae_le_set.1 H, add_zero]\n\n"}
{"name":"Filter.EventuallyLE.measure_le","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nH : (MeasureTheory.ae μ).EventuallyLE s t\n⊢ LE.le (μ s) (μ t)","decl":"alias _root_.Filter.EventuallyLE.measure_le := measure_mono_ae\n\n"}
{"name":"MeasureTheory.measure_congr","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nH : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ Eq (μ s) (μ t)","decl":"/-- If two sets are equal modulo a set of measure zero, then `μ s = μ t`. -/\ntheorem measure_congr (H : s =ᵐ[μ] t) : μ s = μ t :=\n  le_antisymm H.le.measure_le H.symm.le.measure_le\n\n"}
{"name":"Filter.EventuallyEq.measure_eq","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nH : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ Eq (μ s) (μ t)","decl":"alias _root_.Filter.EventuallyEq.measure_eq := measure_congr\n\n"}
{"name":"MeasureTheory.measure_mono_null_ae","module":"Mathlib.MeasureTheory.OuterMeasure.AE","initialProofState":"α : Type u_1\nF : Type u_3\ninst✝¹ : FunLike F (Set α) ENNReal\ninst✝ : MeasureTheory.OuterMeasureClass F α\nμ : F\ns t : Set α\nH : (MeasureTheory.ae μ).EventuallyLE s t\nht : Eq (μ t) 0\n⊢ Eq (μ s) 0","decl":"theorem measure_mono_null_ae (H : s ≤ᵐ[μ] t) (ht : μ t = 0) : μ s = 0 :=\n  nonpos_iff_eq_zero.1 <| ht ▸ H.measure_le\n\n"}
