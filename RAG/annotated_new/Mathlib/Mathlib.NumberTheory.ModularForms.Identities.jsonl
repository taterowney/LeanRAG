{"name":"SlashInvariantForm.vAdd_width_periodic","module":"Mathlib.NumberTheory.ModularForms.Identities","initialProofState":"N : Nat\nk n : Int\nf : SlashInvariantForm (CongruenceSubgroup.Gamma N) k\nz : UpperHalfPlane\n⊢ Eq (f (HVAdd.hVAdd (HMul.hMul ↑N ↑n) z)) (f z)","decl":"theorem vAdd_width_periodic (N : ℕ) (k n : ℤ) (f : SlashInvariantForm (Gamma N) k) (z : ℍ) :\n    f (((N * n) : ℝ) +ᵥ z) = f z := by\n  norm_cast\n  rw [← modular_T_zpow_smul z (N * n)]\n  convert slash_action_eqn' f (ModularGroup_T_pow_mem_Gamma N (N * n) (Int.dvd_mul_right N n)) z\n  simp only [Fin.isValue, ModularGroup.coe_T_zpow (N * n), of_apply, cons_val', cons_val_zero,\n    empty_val', cons_val_fin_one, cons_val_one, head_fin_const, Int.cast_zero, zero_mul, head_cons,\n    Int.cast_one, zero_add, one_zpow, one_mul]\n\n"}
{"name":"SlashInvariantForm.T_zpow_width_invariant","module":"Mathlib.NumberTheory.ModularForms.Identities","initialProofState":"N : Nat\nk n : Int\nf : SlashInvariantForm (CongruenceSubgroup.Gamma N) k\nz : UpperHalfPlane\n⊢ Eq (f (HSMul.hSMul (HPow.hPow ModularGroup.T (HMul.hMul (↑N) n)) z)) (f z)","decl":"theorem T_zpow_width_invariant (N : ℕ) (k n : ℤ) (f : SlashInvariantForm (Gamma N) k) (z : ℍ) :\n    f (((ModularGroup.T ^ (N * n))) • z) = f z := by\n  rw [modular_T_zpow_smul z (N * n)]\n  simpa only [Int.cast_mul, Int.cast_natCast] using vAdd_width_periodic N k n f z\n\n"}
