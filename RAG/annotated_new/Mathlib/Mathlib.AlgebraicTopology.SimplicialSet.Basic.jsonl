{"name":"SSet.hasLimits","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"⊢ CategoryTheory.Limits.HasLimits SSet","decl":"instance hasLimits : HasLimits SSet := by\n  dsimp only [SSet]\n  infer_instance\n\n"}
{"name":"SSet.hasColimits","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"⊢ CategoryTheory.Limits.HasColimits SSet","decl":"instance hasColimits : HasColimits SSet := by\n  dsimp only [SSet]\n  infer_instance\n\n"}
{"name":"SSet.hom_ext_iff","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"X Y : SSet\nf g : Quiver.Hom X Y\n⊢ Iff (Eq f g) (∀ (n : Opposite SimplexCategory), Eq (f.app n) (g.app n))","decl":"@[ext]\nlemma hom_ext {X Y : SSet} {f g : X ⟶ Y} (w : ∀ n, f.app n = g.app n) : f = g :=\n  SimplicialObject.hom_ext _ _ w\n\n"}
{"name":"SSet.hom_ext","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"X Y : SSet\nf g : Quiver.Hom X Y\nw : ∀ (n : Opposite SimplexCategory), Eq (f.app n) (g.app n)\n⊢ Eq f g","decl":"@[ext]\nlemma hom_ext {X Y : SSet} {f g : X ⟶ Y} (w : ∀ n, f.app n = g.app n) : f = g :=\n  SimplicialObject.hom_ext _ _ w\n\n"}
{"name":"SSet.comp_app","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"X Y Z : SSet\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\nn : Opposite SimplexCategory\n⊢ Eq ((CategoryTheory.CategoryStruct.comp f g).app n) (CategoryTheory.CategoryStruct.comp (f.app n) (g.app n))","decl":"@[simp]\nlemma comp_app {X Y Z : SSet} (f : X ⟶ Y) (g : Y ⟶ Z) (n : SimplexCategoryᵒᵖ) :\n    (f ≫ g).app n = f.app n ≫ g.app n := NatTrans.comp_app _ _ _\n\n"}
{"name":"SSet.Truncated.hasLimits","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ CategoryTheory.Limits.HasLimits (SSet.Truncated n)","decl":"instance Truncated.hasLimits {n : ℕ} : HasLimits (Truncated n) := by\n  dsimp only [Truncated]\n  infer_instance\n\n"}
{"name":"SSet.Truncated.hasColimits","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ CategoryTheory.Limits.HasColimits (SSet.Truncated n)","decl":"instance Truncated.hasColimits {n : ℕ} : HasColimits (Truncated n) := by\n  dsimp only [Truncated]\n  infer_instance\n\n"}
{"name":"SSet.Truncated.hom_ext","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\nX Y : SSet.Truncated n\nf g : Quiver.Hom X Y\nw : ∀ (n_1 : Opposite (SimplexCategory.Truncated n)), Eq (f.app n_1) (g.app n_1)\n⊢ Eq f g","decl":"@[ext]\nlemma Truncated.hom_ext {n : ℕ} {X Y : Truncated n} {f g : X ⟶ Y} (w : ∀ n, f.app n = g.app n) :\n    f = g :=\n  NatTrans.ext (funext w)\n\n"}
{"name":"SSet.Truncated.hom_ext_iff","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\nX Y : SSet.Truncated n\nf g : Quiver.Hom X Y\n⊢ Iff (Eq f g) (∀ (n_1 : Opposite (SimplexCategory.Truncated n)), Eq (f.app n_1) (g.app n_1))","decl":"@[ext]\nlemma Truncated.hom_ext {n : ℕ} {X Y : Truncated n} {f g : X ⟶ Y} (w : ∀ n, f.app n = g.app n) :\n    f = g :=\n  NatTrans.ext (funext w)\n\n"}
{"name":"SSet.Truncated.cosk_reflective","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ CategoryTheory.IsIso (SSet.coskAdj n).counit","decl":"instance cosk_reflective (n) : IsIso (coskAdj n).counit :=\n  SimplicialObject.Truncated.cosk_reflective n\n\n"}
{"name":"SSet.Truncated.sk_coreflective","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ CategoryTheory.IsIso (SSet.skAdj n).unit","decl":"instance sk_coreflective (n) : IsIso (skAdj n).unit :=\n  SimplicialObject.Truncated.sk_coreflective n\n\n"}
{"name":"SSet.Truncated.cosk.full","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ (SSet.Truncated.cosk n).Full","decl":"instance cosk.full (n) : (Truncated.cosk n).Full :=\n  SimplicialObject.Truncated.cosk.full n\n\n"}
{"name":"SSet.Truncated.cosk.faithful","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ (SSet.Truncated.cosk n).Faithful","decl":"instance cosk.faithful (n) : (Truncated.cosk n).Faithful :=\n  SimplicialObject.Truncated.cosk.faithful n\n\n"}
{"name":"SSet.Truncated.sk.full","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ (SSet.Truncated.sk n).Full","decl":"instance sk.full (n) : (Truncated.sk n).Full := SimplicialObject.Truncated.sk.full n\n\n"}
{"name":"SSet.Truncated.sk.faithful","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"n : Nat\n⊢ (SSet.Truncated.sk n).Faithful","decl":"instance sk.faithful (n) : (Truncated.sk n).Faithful :=\n  SimplicialObject.Truncated.sk.faithful n\n\n"}
{"name":"SSet.δ_comp_δ_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni j : Fin (HAdd.hAdd n 2)\nH : LE.le i j\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 2) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.δ S j.succ x)) (CategoryTheory.SimplicialObject.δ S j (CategoryTheory.SimplicialObject.δ S i.castSucc x))","decl":"lemma δ_comp_δ_apply {n} {i j : Fin (n + 2)} (H : i ≤ j) (x : S _[n + 2]) :\n    S.δ i (S.δ j.succ x) = S.δ j (S.δ i.castSucc x) := congr_fun (S.δ_comp_δ H) x\n\n"}
{"name":"SSet.δ_comp_δ'_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 2)\nj : Fin (HAdd.hAdd n 3)\nH : LT.lt i.castSucc j\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 2) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.δ S j x)) (CategoryTheory.SimplicialObject.δ S (j.pred ⋯) (CategoryTheory.SimplicialObject.δ S i.castSucc x))","decl":"lemma δ_comp_δ'_apply {n} {i : Fin (n + 2)} {j : Fin (n + 3)} (H : Fin.castSucc i < j)\n    (x : S _[n + 2]) : S.δ i (S.δ j x) =\n      S.δ (j.pred fun (hj : j = 0) => by simp [hj, Fin.not_lt_zero] at H) (S.δ i.castSucc x) :=\n  congr_fun (S.δ_comp_δ' H) x\n\n"}
{"name":"SSet.δ_comp_δ''_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 3)\nj : Fin (HAdd.hAdd n 2)\nH : LE.le i j.castSucc\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 2) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S (i.castLT ⋯) (CategoryTheory.SimplicialObject.δ S j.succ x)) (CategoryTheory.SimplicialObject.δ S j (CategoryTheory.SimplicialObject.δ S i x))","decl":"lemma δ_comp_δ''_apply {n} {i : Fin (n + 3)} {j : Fin (n + 2)} (H : i ≤ Fin.castSucc j)\n    (x : S _[n + 2]) :\n    S.δ (i.castLT (Nat.lt_of_le_of_lt (Fin.le_iff_val_le_val.mp H) j.is_lt)) (S.δ j.succ x) =\n      S.δ j (S.δ i x) := congr_fun (S.δ_comp_δ'' H) x\n\n"}
{"name":"SSet.δ_comp_δ_self_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 2)\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 2) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.δ S i.castSucc x)) (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.δ S i.succ x))","decl":"lemma δ_comp_δ_self_apply {n} {i : Fin (n + 2)} (x : S _[n + 2]) :\n    S.δ i (S.δ i.castSucc x) = S.δ i (S.δ i.succ x) := congr_fun S.δ_comp_δ_self x\n\n"}
{"name":"SSet.δ_comp_δ_self'_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 2)\nj : Fin (HAdd.hAdd n 3)\nH : Eq j i.castSucc\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 2) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.δ S j x)) (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.δ S i.succ x))","decl":"lemma δ_comp_δ_self'_apply {n} {i : Fin (n + 2)} {j : Fin (n + 3)} (H : j = Fin.castSucc i)\n    (x : S _[n + 2]) : S.δ i (S.δ j x) = S.δ i (S.δ i.succ x) := congr_fun (S.δ_comp_δ_self' H) x\n\n"}
{"name":"SSet.δ_comp_σ_of_le_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 2)\nj : Fin (HAdd.hAdd n 1)\nH : LE.le i j.castSucc\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 1) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i.castSucc (CategoryTheory.SimplicialObject.σ S j.succ x)) (CategoryTheory.SimplicialObject.σ S j (CategoryTheory.SimplicialObject.δ S i x))","decl":"lemma δ_comp_σ_of_le_apply {n} {i : Fin (n + 2)} {j : Fin (n + 1)} (H : i ≤ Fin.castSucc j)\n    (x : S _[n + 1]) :\n    S.δ (Fin.castSucc i) (S.σ j.succ x) = S.σ j (S.δ i x) := congr_fun (S.δ_comp_σ_of_le H) x\n\n"}
{"name":"SSet.δ_comp_σ_self_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nx : S.obj { unop := SimplexCategory.mk n }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i.castSucc (CategoryTheory.SimplicialObject.σ S i x)) x","decl":"@[simp]\nlemma δ_comp_σ_self_apply {n} (i : Fin (n + 1)) (x : S _[n]) : S.δ i.castSucc (S.σ i x) = x :=\n  congr_fun S.δ_comp_σ_self x\n\n"}
{"name":"SSet.δ_comp_σ_self'_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\nj : Fin (HAdd.hAdd n 2)\ni : Fin (HAdd.hAdd n 1)\nH : Eq j i.castSucc\nx : S.obj { unop := SimplexCategory.mk n }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S j (CategoryTheory.SimplicialObject.σ S i x)) x","decl":"lemma δ_comp_σ_self'_apply {n} {j : Fin (n + 2)} {i : Fin (n + 1)} (H : j = Fin.castSucc i)\n    (x : S _[n]) : S.δ j (S.σ i x) = x := congr_fun (S.δ_comp_σ_self' H) x\n\n"}
{"name":"SSet.δ_comp_σ_succ_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nx : S.obj { unop := SimplexCategory.mk n }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i.succ (CategoryTheory.SimplicialObject.σ S i x)) x","decl":"@[simp]\nlemma δ_comp_σ_succ_apply {n} (i : Fin (n + 1)) (x : S _[n]) : S.δ i.succ (S.σ i x) = x :=\n  congr_fun S.δ_comp_σ_succ x\n\n"}
{"name":"SSet.δ_comp_σ_succ'_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\nj : Fin (HAdd.hAdd n 2)\ni : Fin (HAdd.hAdd n 1)\nH : Eq j i.succ\nx : S.obj { unop := SimplexCategory.mk n }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S j (CategoryTheory.SimplicialObject.σ S i x)) x","decl":"lemma δ_comp_σ_succ'_apply {n} {j : Fin (n + 2)} {i : Fin (n + 1)} (H : j = i.succ) (x : S _[n]) :\n    S.δ j (S.σ i x) = x := congr_fun (S.δ_comp_σ_succ' H) x\n\n"}
{"name":"SSet.δ_comp_σ_of_gt_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 2)\nj : Fin (HAdd.hAdd n 1)\nH : LT.lt j.castSucc i\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 1) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i.succ (CategoryTheory.SimplicialObject.σ S j.castSucc x)) (CategoryTheory.SimplicialObject.σ S j (CategoryTheory.SimplicialObject.δ S i x))","decl":"lemma δ_comp_σ_of_gt_apply {n} {i : Fin (n + 2)} {j : Fin (n + 1)} (H : Fin.castSucc j < i)\n    (x : S _[n + 1]) : S.δ i.succ (S.σ (Fin.castSucc j) x) = S.σ j (S.δ i x) :=\n  congr_fun (S.δ_comp_σ_of_gt H) x\n\n"}
{"name":"SSet.δ_comp_σ_of_gt'_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni : Fin (HAdd.hAdd n 3)\nj : Fin (HAdd.hAdd n 2)\nH : LT.lt j.succ i\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 1) }\n⊢ Eq (CategoryTheory.SimplicialObject.δ S i (CategoryTheory.SimplicialObject.σ S j x)) (CategoryTheory.SimplicialObject.σ S (j.castLT ⋯) (CategoryTheory.SimplicialObject.δ S (i.pred ⋯) x))","decl":"lemma δ_comp_σ_of_gt'_apply {n} {i : Fin (n + 3)} {j : Fin (n + 2)} (H : j.succ < i)\n    (x : S _[n + 1]) : S.δ i (S.σ j x) =\n      S.σ (j.castLT ((add_lt_add_iff_right 1).mp (lt_of_lt_of_le H i.is_le)))\n        (S.δ (i.pred fun (hi : i = 0) => by simp only [Fin.not_lt_zero, hi] at H) x) :=\n  congr_fun (S.δ_comp_σ_of_gt' H) x\n\n"}
{"name":"SSet.σ_comp_σ_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S : SSet\nn : Nat\ni j : Fin (HAdd.hAdd n 1)\nH : LE.le i j\nx : S.obj { unop := SimplexCategory.mk n }\n⊢ Eq (CategoryTheory.SimplicialObject.σ S i.castSucc (CategoryTheory.SimplicialObject.σ S j x)) (CategoryTheory.SimplicialObject.σ S j.succ (CategoryTheory.SimplicialObject.σ S i x))","decl":"lemma σ_comp_σ_apply {n} {i j : Fin (n + 1)} (H : i ≤ j) (x : S _[n]) :\n    S.σ i.castSucc (S.σ j x) = S.σ j.succ (S.σ i x) := congr_fun (S.σ_comp_σ H) x\n\n"}
{"name":"SSet.δ_naturality_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S T : SSet\nf : Quiver.Hom S T\nn : Nat\ni : Fin (HAdd.hAdd n 2)\nx : S.obj { unop := SimplexCategory.mk (HAdd.hAdd n 1) }\n⊢ Eq (f.app { unop := SimplexCategory.mk n } (CategoryTheory.SimplicialObject.δ S i x)) (CategoryTheory.SimplicialObject.δ T i (f.app { unop := SimplexCategory.mk (HAdd.hAdd n 1) } x))","decl":"lemma δ_naturality_apply {n : ℕ} (i : Fin (n + 2)) (x : S _[n + 1]) :\n    f.app (op [n]) (S.δ i x) = T.δ i (f.app (op [n + 1]) x) := by\n  show (S.δ i ≫ f.app (op [n])) x = (f.app (op [n + 1]) ≫ T.δ i) x\n  exact congr_fun (SimplicialObject.δ_naturality f i) x\n\n"}
{"name":"SSet.σ_naturality_apply","module":"Mathlib.AlgebraicTopology.SimplicialSet.Basic","initialProofState":"S T : SSet\nf : Quiver.Hom S T\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nx : S.obj { unop := SimplexCategory.mk n }\n⊢ Eq (f.app { unop := SimplexCategory.mk (HAdd.hAdd n 1) } (CategoryTheory.SimplicialObject.σ S i x)) (CategoryTheory.SimplicialObject.σ T i (f.app { unop := SimplexCategory.mk n } x))","decl":"lemma σ_naturality_apply {n : ℕ} (i : Fin (n + 1)) (x : S _[n]) :\n    f.app (op [n + 1]) (S.σ i x) = T.σ i (f.app (op [n]) x) := by\n  show (S.σ i ≫ f.app (op [n + 1])) x = (f.app (op [n]) ≫ T.σ i) x\n  exact congr_fun (SimplicialObject.σ_naturality f i) x\n\n"}
