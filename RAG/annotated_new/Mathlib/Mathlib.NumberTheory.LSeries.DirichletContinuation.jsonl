{"name":"DirichletCharacter.LFunction_modOne_eq","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"χ : DirichletCharacter Complex 1\n⊢ Eq (DirichletCharacter.LFunction χ) riemannZeta","decl":"/--\nThe L-function of the (unique) Dirichlet character mod 1 is the Riemann zeta function.\n(Compare `DirichletCharacter.LSeries_modOne_eq`.)\n-/\n@[simp] lemma LFunction_modOne_eq {χ : DirichletCharacter ℂ 1} :\n    LFunction χ = riemannZeta := by\n  ext; rw [LFunction, ZMod.LFunction_modOne_eq, (by rfl : (0 : ZMod 1) = 1), map_one, one_mul]\n\n"}
{"name":"DirichletCharacter.LFunction_eq_LSeries","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\ns : Complex\nhs : LT.lt 1 s.re\n⊢ Eq (DirichletCharacter.LFunction χ s) (LSeries (fun x => χ ↑x) s)","decl":"/--\nFor `1 < re s` the L-function of a Dirichlet character agrees with the sum of the naive Dirichlet\nseries.\n-/\nlemma LFunction_eq_LSeries (χ : DirichletCharacter ℂ N) {s : ℂ} (hs : 1 < re s) :\n    LFunction χ s = LSeries (χ ·) s :=\n  ZMod.LFunction_eq_LSeries χ hs\n\n"}
{"name":"DirichletCharacter.deriv_LFunction_eq_deriv_LSeries","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\ns : Complex\nhs : LT.lt 1 s.re\n⊢ Eq (deriv (DirichletCharacter.LFunction χ) s) (deriv (LSeries fun x => χ ↑x) s)","decl":"lemma deriv_LFunction_eq_deriv_LSeries (χ : DirichletCharacter ℂ N) {s : ℂ} (hs : 1 < s.re) :\n    deriv (LFunction χ) s = deriv (LSeries (χ ·)) s := by\n  refine Filter.EventuallyEq.deriv_eq ?_\n  have h : {z | 1 < z.re} ∈ nhds s :=\n    (isOpen_lt continuous_const continuous_re).mem_nhds hs\n  filter_upwards [h] with z hz\n  exact LFunction_eq_LSeries χ hz\n\n"}
{"name":"DirichletCharacter.differentiableAt_LFunction","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\ns : Complex\nhs : Or (Ne s 1) (Ne χ 1)\n⊢ DifferentiableAt Complex (DirichletCharacter.LFunction χ) s","decl":"/--\nThe L-function of a Dirichlet character is differentiable, except at `s = 1` if the character is\ntrivial.\n-/\n@[fun_prop]\nlemma differentiableAt_LFunction (χ : DirichletCharacter ℂ N) (s : ℂ) (hs : s ≠ 1 ∨ χ ≠ 1) :\n    DifferentiableAt ℂ (LFunction χ) s :=\n  ZMod.differentiableAt_LFunction χ s (hs.imp_right χ.sum_eq_zero_of_ne_one)\n\n"}
{"name":"DirichletCharacter.differentiable_LFunction","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\nhχ : Ne χ 1\n⊢ Differentiable Complex (DirichletCharacter.LFunction χ)","decl":"/-- The L-function of a non-trivial Dirichlet character is differentiable everywhere. -/\n@[fun_prop]\nlemma differentiable_LFunction {χ : DirichletCharacter ℂ N} (hχ : χ ≠ 1) :\n    Differentiable ℂ (LFunction χ) :=\n  (differentiableAt_LFunction _ · <| Or.inr hχ)\n\n"}
{"name":"DirichletCharacter.Even.LFunction_neg_two_mul_nat_add_one","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\nhχ : χ.Even\nn : Nat\n⊢ Eq (DirichletCharacter.LFunction χ (Neg.neg (HMul.hMul 2 (HAdd.hAdd (↑n) 1)))) 0","decl":"/-- The L-function of an even Dirichlet character vanishes at strictly negative even integers. -/\n@[simp]\nlemma Even.LFunction_neg_two_mul_nat_add_one {χ : DirichletCharacter ℂ N} (hχ : Even χ) (n : ℕ) :\n    LFunction χ (-(2 * (n + 1))) = 0 :=\n  ZMod.LFunction_neg_two_mul_nat_add_one hχ.to_fun n\n\n"}
{"name":"DirichletCharacter.Even.LFunction_neg_two_mul_nat","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝¹ : NeZero N\nχ : DirichletCharacter Complex N\nhχ : χ.Even\nn : Nat\ninst✝ : NeZero n\n⊢ Eq (DirichletCharacter.LFunction χ (Neg.neg (HMul.hMul 2 ↑n))) 0","decl":"/-- The L-function of an even Dirichlet character vanishes at strictly negative even integers. -/\n@[simp]\nlemma Even.LFunction_neg_two_mul_nat {χ : DirichletCharacter ℂ N} (hχ : Even χ) (n : ℕ) [NeZero n] :\n    LFunction χ (-(2 * n)) = 0 := by\n  obtain ⟨m, rfl⟩ := Nat.exists_eq_succ_of_ne_zero (NeZero.ne n)\n  exact_mod_cast hχ.LFunction_neg_two_mul_nat_add_one m\n\n"}
{"name":"DirichletCharacter.Odd.LFunction_neg_two_mul_nat_sub_one","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\nhχ : χ.Odd\nn : Nat\n⊢ Eq (DirichletCharacter.LFunction χ (HSub.hSub (Neg.neg (HMul.hMul 2 ↑n)) 1)) 0","decl":"/-- The L-function of an odd Dirichlet character vanishes at negative odd integers. -/\n@[simp] lemma Odd.LFunction_neg_two_mul_nat_sub_one\n  {χ : DirichletCharacter ℂ N} (hχ : Odd χ) (n : ℕ) :\n    LFunction χ (-(2 * n) - 1) = 0 :=\n  ZMod.LFunction_neg_two_mul_nat_sub_one hχ.to_fun n\n\n"}
{"name":"DirichletCharacter.LFunction_changeLevel","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"M N : Nat\ninst✝¹ : NeZero M\ninst✝ : NeZero N\nhMN : Dvd.dvd M N\nχ : DirichletCharacter Complex M\ns : Complex\nh : Or (Ne χ 1) (Ne s 1)\n⊢ Eq (DirichletCharacter.LFunction ((DirichletCharacter.changeLevel hMN) χ) s) (HMul.hMul (DirichletCharacter.LFunction χ s) (N.primeFactors.prod fun p => HSub.hSub 1 (HMul.hMul (χ ↑p) (HPow.hPow (↑p) (Neg.neg s)))))","decl":"/-- If `χ` is a Dirichlet character and its level `M` divides `N`, then we obtain the L function\nof `χ` considered as a Dirichlet character of level `N` from the L function of `χ` by multiplying\nwith `∏ p ∈ N.primeFactors, (1 - χ p * p ^ (-s))`.\n(Note that `1 - χ p * p ^ (-s) = 1` when `p` divides `M`). -/\nlemma LFunction_changeLevel {M N : ℕ} [NeZero M] [NeZero N] (hMN : M ∣ N)\n    (χ : DirichletCharacter ℂ M) {s : ℂ} (h : χ ≠ 1 ∨ s ≠ 1) :\n    LFunction (changeLevel hMN χ) s =\n      LFunction χ s * ∏ p ∈ N.primeFactors, (1 - χ p * p ^ (-s)) := by\n  rcases h with h | h\n  · have hχ : changeLevel hMN χ ≠ 1 := h ∘ (changeLevel_eq_one_iff hMN).mp\n    have h' : Continuous fun s ↦ LFunction χ s * ∏ p ∈ N.primeFactors, (1 - χ p * ↑p ^ (-s)) :=\n      (differentiable_LFunction h).continuous.mul <| continuous_finset_prod _ fun p hp ↦ by\n        have : NeZero p := ⟨(Nat.prime_of_mem_primeFactors hp).ne_zero⟩\n        fun_prop\n    exact congrFun ((differentiable_LFunction hχ).continuous.ext_on\n      (dense_compl_singleton 1) h' (fun _ h ↦ LFunction_changeLevel_aux hMN χ h)) s\n  · exact LFunction_changeLevel_aux hMN χ h\n\n"}
{"name":"DirichletCharacter.LFunctionTrivChar_eq_mul_riemannZeta","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\ns : Complex\nhs : Ne s 1\n⊢ Eq (DirichletCharacter.LFunctionTrivChar N s) (HMul.hMul (N.primeFactors.prod fun p => HSub.hSub 1 (HPow.hPow (↑p) (Neg.neg s))) (riemannZeta s))","decl":"/-- The L function of the trivial Dirichlet character mod `N` is obtained from the Riemann\nzeta function by multiplying with `∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))`. -/\nlemma LFunctionTrivChar_eq_mul_riemannZeta {s : ℂ} (hs : s ≠ 1) :\n    LFunctionTrivChar N s = (∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))) * riemannZeta s := by\n  rw [← LFunction_modOne_eq (χ := 1), LFunctionTrivChar, ← changeLevel_one N.one_dvd, mul_comm]\n  convert LFunction_changeLevel N.one_dvd 1 (.inr hs) using 4 with p\n  rw [MulChar.one_apply <| isUnit_of_subsingleton _, one_mul]\n\n"}
{"name":"DirichletCharacter.LFunctionTrivChar_residue_one","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\n⊢ Filter.Tendsto (fun s => HMul.hMul (HSub.hSub s 1) (DirichletCharacter.LFunctionTrivChar N s)) (nhdsWithin 1 (HasCompl.compl (Singleton.singleton 1))) (nhds (N.primeFactors.prod fun p => HSub.hSub 1 (Inv.inv ↑p)))","decl":"/-- The L function of the trivial Dirichlet character mod `N` has a simple pole with\nresidue `∏ p ∈ N.primeFactors, (1 - p⁻¹)` at `s = 1`. -/\nlemma LFunctionTrivChar_residue_one :\n    Tendsto (fun s ↦ (s - 1) * LFunctionTrivChar N s) (𝓝[≠] 1)\n      (𝓝 <| ∏ p ∈ N.primeFactors, (1 - (p : ℂ)⁻¹)) := by\n  have H : (fun s ↦ (s - 1) * LFunctionTrivChar N s) =ᶠ[𝓝[≠] 1]\n        fun s ↦ (∏ p ∈ N.primeFactors, (1 - (p : ℂ) ^ (-s))) * ((s - 1) * riemannZeta s) := by\n    refine Set.EqOn.eventuallyEq_nhdsWithin fun s hs ↦ ?_\n    rw [mul_left_comm, LFunctionTrivChar_eq_mul_riemannZeta hs]\n  rw [tendsto_congr' H]\n  conv => enter [3, 1]; rw [← mul_one <| Finset.prod ..]; enter [1, 2, p]; rw [← cpow_neg_one]\n  refine .mul (f := fun s ↦ ∏ p ∈ N.primeFactors, _) ?_ riemannZeta_residue_one\n  refine tendsto_nhdsWithin_of_tendsto_nhds <| Continuous.tendsto ?_ 1\n  exact continuous_finset_prod _ fun p hp ↦ by\n    have : NeZero p := ⟨(Nat.prime_of_mem_primeFactors hp).ne_zero⟩\n    fun_prop\n\n"}
{"name":"DirichletCharacter.Even.gammaFactor_def","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\nhχ : χ.Even\ns : Complex\n⊢ Eq (χ.gammaFactor s) s.Gammaℝ","decl":"lemma Even.gammaFactor_def {χ : DirichletCharacter ℂ N} (hχ : χ.Even) (s : ℂ) :\n    gammaFactor χ s = Gammaℝ s := by\n  simp [gammaFactor, hχ]\n\n"}
{"name":"DirichletCharacter.Odd.gammaFactor_def","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\nχ : DirichletCharacter Complex N\nhχ : χ.Odd\ns : Complex\n⊢ Eq (χ.gammaFactor s) (HAdd.hAdd s 1).Gammaℝ","decl":"lemma Odd.gammaFactor_def {χ : DirichletCharacter ℂ N} (hχ : χ.Odd) (s : ℂ) :\n    gammaFactor χ s = Gammaℝ (s + 1) := by\n  simp [gammaFactor, hχ.not_even]\n\n"}
{"name":"DirichletCharacter.completedLFunction_modOne_eq","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"χ : DirichletCharacter Complex 1\n⊢ Eq (DirichletCharacter.completedLFunction χ) completedRiemannZeta","decl":"/--\nThe completed L-function of the (unique) Dirichlet character mod 1 is the completed Riemann zeta\nfunction.\n-/\nlemma completedLFunction_modOne_eq {χ : DirichletCharacter ℂ 1} :\n    completedLFunction χ = completedRiemannZeta := by\n  ext; rw [completedLFunction, ZMod.completedLFunction_modOne_eq, map_one, one_mul]\n\n"}
{"name":"DirichletCharacter.differentiableAt_completedLFunction","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\ns : Complex\nhs₀ : Or (Ne s 0) (Ne N 1)\nhs₁ : Or (Ne s 1) (Ne χ 1)\n⊢ DifferentiableAt Complex (DirichletCharacter.completedLFunction χ) s","decl":"/--\nThe completed L-function of a Dirichlet character is differentiable, with the following\nexceptions: at `s = 1` if `χ` is the trivial character (to any modulus); and at `s = 0` if the\nmodulus is 1. This result is best possible.\n\nNote both `χ` and `s` are explicit arguments: we will always be able to infer one or other\nof them from the hypotheses, but it's not clear which!\n-/\nlemma differentiableAt_completedLFunction (χ : DirichletCharacter ℂ N) (s : ℂ)\n    (hs₀ : s ≠ 0 ∨ N ≠ 1) (hs₁ : s ≠ 1 ∨ χ ≠ 1) :\n    DifferentiableAt ℂ (completedLFunction χ) s :=\n  ZMod.differentiableAt_completedLFunction _ _ (by have := χ.map_zero'; tauto)\n    (by have := χ.sum_eq_zero_of_ne_one; tauto)\n\n"}
{"name":"DirichletCharacter.differentiable_completedLFunction","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\nhχ : Ne χ 1\n⊢ Differentiable Complex (DirichletCharacter.completedLFunction χ)","decl":"/-- The completed L-function of a non-trivial Dirichlet character is differentiable everywhere. -/\nlemma differentiable_completedLFunction {χ : DirichletCharacter ℂ N} (hχ : χ ≠ 1) :\n    Differentiable ℂ (completedLFunction χ) := by\n  refine fun s ↦ differentiableAt_completedLFunction _ _ (Or.inr ?_) (Or.inr hχ)\n  exact hχ ∘ level_one' _\n\n"}
{"name":"DirichletCharacter.LFunction_eq_completed_div_gammaFactor","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\ns : Complex\nh : Or (Ne s 0) (Ne N 1)\n⊢ Eq (DirichletCharacter.LFunction χ s) (HDiv.hDiv (DirichletCharacter.completedLFunction χ s) (χ.gammaFactor s))","decl":"/--\nRelation between the completed L-function and the usual one. We state it this way around so\nit holds at the poles of the gamma factor as well.\n-/\nlemma LFunction_eq_completed_div_gammaFactor (χ : DirichletCharacter ℂ N) (s : ℂ)\n    (h : s ≠ 0 ∨ N ≠ 1) : LFunction χ s = completedLFunction χ s / gammaFactor χ s := by\n  rcases χ.even_or_odd with hχ | hχ <;>\n  rw [hχ.gammaFactor_def]\n  · exact LFunction_eq_completed_div_gammaFactor_even hχ.to_fun _ (h.imp_right χ.map_zero')\n  · apply LFunction_eq_completed_div_gammaFactor_odd hχ.to_fun\n\n"}
{"name":"DirichletCharacter.rootNumber_modOne","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"χ : DirichletCharacter Complex 1\n⊢ Eq χ.rootNumber 1","decl":"/-- The root number of the unique Dirichlet character modulo 1 is 1. -/\nlemma rootNumber_modOne (χ : DirichletCharacter ℂ 1) : rootNumber χ = 1 := by\n  simp [rootNumber, gaussSum, -univ_unique, ← singleton_eq_univ (1 : ZMod 1),\n    (show stdAddChar (1 : ZMod 1) = 1 from AddChar.map_zero_eq_one _),\n    (show χ.Even from map_one _)]\n\n"}
{"name":"DirichletCharacter.IsPrimitive.completedLFunction_one_sub","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"N : Nat\ninst✝ : NeZero N\nχ : DirichletCharacter Complex N\nhχ : χ.IsPrimitive\ns : Complex\n⊢ Eq (DirichletCharacter.completedLFunction χ (HSub.hSub 1 s)) (HMul.hMul (HMul.hMul (HPow.hPow (↑N) (HSub.hSub s (1 / 2))) χ.rootNumber) (DirichletCharacter.completedLFunction (Inv.inv χ) s))","decl":"/-- **Functional equation** for primitive Dirichlet L-functions. -/\ntheorem completedLFunction_one_sub {χ : DirichletCharacter ℂ N} (hχ : IsPrimitive χ) (s : ℂ) :\n    completedLFunction χ (1 - s) = N ^ (s - 1 / 2) * rootNumber χ * completedLFunction χ⁻¹ s := by\n  classical\n  -- First handle special case of Riemann zeta\n  rcases eq_or_ne N 1 with rfl | hN\n  · simp [completedLFunction_modOne_eq, completedRiemannZeta_one_sub, rootNumber_modOne]\n  -- facts about `χ` as function\n  have h_sum : ∑ j, χ j = 0 := by\n    refine χ.sum_eq_zero_of_ne_one (fun h ↦ hN.symm ?_)\n    rwa [IsPrimitive, h, conductor_one (NeZero.ne _)] at hχ\n  let ε := I ^ (if χ.Even then 0 else 1)\n  -- gather up powers of N\n  rw [rootNumber, ← mul_comm_div, ← mul_comm_div, ← cpow_sub _ _ (NeZero.ne _), sub_sub, add_halves]\n  calc completedLFunction χ (1 - s)\n  _ = N ^ (s - 1) * χ (-1) /  ε * ZMod.completedLFunction (𝓕 χ) s := by\n    simp only [ε]\n    split_ifs with h\n    · rw [pow_zero, div_one, h, mul_one, completedLFunction,\n        completedLFunction_one_sub_even h.to_fun _ (.inr h_sum) (.inr <| χ.map_zero' hN)]\n    · replace h : χ.Odd := χ.even_or_odd.resolve_left h\n      rw [completedLFunction, completedLFunction_one_sub_odd h.to_fun,\n        pow_one, h, div_I, mul_neg_one, ← neg_mul, neg_neg]\n  _ = (_) * ZMod.completedLFunction (fun j ↦ χ⁻¹ (-1) * gaussSum χ stdAddChar * χ⁻¹ j) s := by\n    congr 2 with j\n    rw [hχ.fourierTransform_eq_inv_mul_gaussSum, ← neg_one_mul j, map_mul, mul_right_comm]\n  _ = N ^ (s - 1) / ε * gaussSum χ stdAddChar * completedLFunction χ⁻¹ s * (χ (-1) * χ⁻¹ (-1)):= by\n    rw [completedLFunction, completedLFunction_const_mul]\n    ring\n  _ = N ^ (s - 1) / ε * gaussSum χ stdAddChar * completedLFunction χ⁻¹ s := by\n    rw [← MulChar.mul_apply, mul_inv_cancel, MulChar.one_apply (isUnit_one.neg), mul_one]\n\n"}
{"name":"DirichletCharacter.LFunctionTrivChar₁_apply_one_ne_zero","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"n : Nat\ninst✝ : NeZero n\n⊢ Ne (DirichletCharacter.LFunctionTrivChar₁ n 1) 0","decl":"lemma LFunctionTrivChar₁_apply_one_ne_zero : LFunctionTrivChar₁ n 1 ≠ 0 := by\n  simp only [Function.update_self]\n  refine Finset.prod_ne_zero_iff.mpr fun p hp ↦ ?_\n  simpa [sub_ne_zero] using (Nat.prime_of_mem_primeFactors hp).ne_one\n\n"}
{"name":"DirichletCharacter.differentiable_LFunctionTrivChar₁","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"n : Nat\ninst✝ : NeZero n\n⊢ Differentiable Complex (DirichletCharacter.LFunctionTrivChar₁ n)","decl":"/-- `s ↦ (s - 1) * L χ s` is an entire function when `χ` is a trivial Dirichlet character. -/\nlemma differentiable_LFunctionTrivChar₁ : Differentiable ℂ (LFunctionTrivChar₁ n) := by\n  rw [← differentiableOn_univ,\n    ← differentiableOn_compl_singleton_and_continuousAt_iff (c := 1) Filter.univ_mem]\n  refine ⟨DifferentiableOn.congr (f := fun s ↦ (s - 1) * LFunctionTrivChar n s)\n    (fun _ hs ↦ DifferentiableAt.differentiableWithinAt <| by fun_prop (disch := simp_all [hs]))\n   fun _ hs ↦ Function.update_of_ne (Set.mem_diff_singleton.mp hs).2 ..,\n    continuousWithinAt_compl_self.mp ?_⟩\n  simpa using LFunctionTrivChar_residue_one\n\n"}
{"name":"DirichletCharacter.deriv_LFunctionTrivChar₁_apply_of_ne_one","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"n : Nat\ninst✝ : NeZero n\ns : Complex\nhs : Ne s 1\n⊢ Eq (deriv (DirichletCharacter.LFunctionTrivChar₁ n) s) (HAdd.hAdd (HMul.hMul (HSub.hSub s 1) (deriv (DirichletCharacter.LFunctionTrivChar n) s)) (DirichletCharacter.LFunctionTrivChar n s))","decl":"lemma deriv_LFunctionTrivChar₁_apply_of_ne_one {s : ℂ} (hs : s ≠ 1) :\n    deriv (LFunctionTrivChar₁ n) s =\n      (s - 1) * deriv (LFunctionTrivChar n) s + LFunctionTrivChar n s := by\n  have H : deriv (LFunctionTrivChar₁ n) s =\n      deriv (fun w ↦ (w - 1) * LFunctionTrivChar n w) s := by\n    refine eventuallyEq_iff_exists_mem.mpr ?_ |>.deriv_eq\n    exact ⟨_, isOpen_ne.mem_nhds hs, fun _ hw ↦ Function.update_of_ne (Set.mem_setOf.mp hw) ..⟩\n  rw [H, deriv_mul (by fun_prop) (differentiableAt_LFunction _ s (.inl hs)), deriv_sub_const,\n    deriv_id'', one_mul, add_comm]\n\n"}
{"name":"DirichletCharacter.continuousOn_neg_logDeriv_LFunctionTrivChar₁","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"n : Nat\ninst✝ : NeZero n\n⊢ ContinuousOn (fun s => HDiv.hDiv (Neg.neg (deriv (DirichletCharacter.LFunctionTrivChar₁ n) s)) (DirichletCharacter.LFunctionTrivChar₁ n s)) (setOf fun s => Or (Eq s 1) (Ne (DirichletCharacter.LFunctionTrivChar n s) 0))","decl":"/-- The negative logarithmtic derivative of `s ↦ (s - 1) * L χ s` for a trivial\nDirichlet character `χ` is continuous away from the zeros of `L χ` (including at `s = 1`). -/\nlemma continuousOn_neg_logDeriv_LFunctionTrivChar₁ :\n    ContinuousOn (fun s ↦ -deriv (LFunctionTrivChar₁ n) s / LFunctionTrivChar₁ n s)\n      {s | s = 1 ∨ LFunctionTrivChar n s ≠ 0} := by\n  simp_rw [neg_div]\n  have h := differentiable_LFunctionTrivChar₁ n\n  refine ((h.contDiff.continuous_deriv le_rfl).continuousOn.div\n    h.continuous.continuousOn fun w hw ↦ ?_).neg\n  rcases eq_or_ne w 1 with rfl | hw'\n  · exact LFunctionTrivChar₁_apply_one_ne_zero _\n  · rw [LFunctionTrivChar₁, Function.update_of_ne hw', mul_ne_zero_iff]\n    exact ⟨sub_ne_zero_of_ne hw', (Set.mem_setOf.mp hw).resolve_left hw'⟩\n\n"}
{"name":"DirichletCharacter.continuousOn_neg_logDeriv_LFunction_of_nontriv","module":"Mathlib.NumberTheory.LSeries.DirichletContinuation","initialProofState":"n : Nat\ninst✝ : NeZero n\nχ : DirichletCharacter Complex n\nhχ : Ne χ 1\n⊢ ContinuousOn (fun s => HDiv.hDiv (Neg.neg (deriv (DirichletCharacter.LFunction χ) s)) (DirichletCharacter.LFunction χ s)) (setOf fun s => Ne (DirichletCharacter.LFunction χ s) 0)","decl":"/-- The negative logarithmic derivative of the L-function of a nontrivial Dirichlet character\nis continuous away from the zeros of the L-function. -/\nlemma continuousOn_neg_logDeriv_LFunction_of_nontriv (hχ : χ ≠ 1) :\n    ContinuousOn (fun s ↦ -deriv (LFunction χ) s / LFunction χ s) {s | LFunction χ s ≠ 0} := by\n  have h := differentiable_LFunction hχ\n  simpa [neg_div] using ((h.contDiff.continuous_deriv le_rfl).continuousOn.div\n    h.continuous.continuousOn fun _ hw ↦ hw).neg\n\n"}
