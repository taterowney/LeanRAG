{"name":"Submonoid.coe_center","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\n⊢ Eq (↑(Submonoid.center M)) (Set.center M)","decl":"@[to_additive]\ntheorem coe_center : ↑(center M) = Set.center M :=\n  rfl\n\n"}
{"name":"AddSubmonoid.coe_center","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : AddZeroClass M\n⊢ Eq (↑(AddSubmonoid.center M)) (Set.addCenter M)","decl":"@[to_additive]\ntheorem coe_center : ↑(center M) = Set.center M :=\n  rfl\n\n"}
{"name":"AddSubmonoid.center_toAddSubsemigroup","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : AddZeroClass M\n⊢ Eq (AddSubmonoid.center M).toAddSubsemigroup (AddSubsemigroup.center M)","decl":"@[to_additive (attr := simp) AddSubmonoid.center_toAddSubsemigroup]\ntheorem center_toSubsemigroup : (center M).toSubsemigroup = Subsemigroup.center M :=\n  rfl\n\n"}
{"name":"Submonoid.center_toSubsemigroup","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\n⊢ Eq (Submonoid.center M).toSubsemigroup (Subsemigroup.center M)","decl":"@[to_additive (attr := simp) AddSubmonoid.center_toAddSubsemigroup]\ntheorem center_toSubsemigroup : (center M).toSubsemigroup = Subsemigroup.center M :=\n  rfl\n\n"}
{"name":"AddSubmonoid.mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\nz : M\n⊢ Iff (Membership.mem (AddSubmonoid.center M) z) (∀ (g : M), Eq (HAdd.hAdd g z) (HAdd.hAdd z g))","decl":"@[to_additive]\ntheorem mem_center_iff {z : M} : z ∈ center M ↔ ∀ g, g * z = z * g := by\n  rw [← Semigroup.mem_center_iff]\n  exact Iff.rfl\n\n"}
{"name":"Submonoid.mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : Monoid M\nz : M\n⊢ Iff (Membership.mem (Submonoid.center M) z) (∀ (g : M), Eq (HMul.hMul g z) (HMul.hMul z g))","decl":"@[to_additive]\ntheorem mem_center_iff {z : M} : z ∈ center M ↔ ∀ g, g * z = z * g := by\n  rw [← Semigroup.mem_center_iff]\n  exact Iff.rfl\n\n"}
{"name":"Submonoid.center.smulCommClass_left","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : Monoid M\n⊢ SMulCommClass (Subtype fun x => Membership.mem (Submonoid.center M) x) M M","decl":"/-- The center of a monoid acts commutatively on that monoid. -/\ninstance center.smulCommClass_left : SMulCommClass (center M) M M where\n  smul_comm m x y := Commute.left_comm (m.prop.comm x) y\n\n"}
{"name":"Submonoid.center.smulCommClass_right","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : Monoid M\n⊢ SMulCommClass M (Subtype fun x => Membership.mem (Submonoid.center M) x) M","decl":"/-- The center of a monoid acts commutatively on that monoid. -/\ninstance center.smulCommClass_right : SMulCommClass M (center M) M :=\n  SMulCommClass.symm _ _ _\n\n"}
{"name":"Submonoid.center_eq_top","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : CommMonoid M\n⊢ Eq (Submonoid.center M) Top.top","decl":"@[simp]\ntheorem center_eq_top : center M = ⊤ :=\n  SetLike.coe_injective (Set.center_eq_univ M)\n\n"}
{"name":"val_unitsCenterToCenterUnits_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : Monoid M\nn : Units (Subtype fun x => Membership.mem (Submonoid.center M) x)\n⊢ Eq ↑↑((unitsCenterToCenterUnits M) n) ↑↑n","decl":"/-- For a monoid, the units of the center inject into the center of the units. This is not an\nequivalence in general; one case when it is is for groups with zero, which is covered in\n`centerUnitsEquivUnitsCenter`. -/\n@[to_additive (attr := simps! apply_coe_val)\n  \"For an additive monoid, the units of the center inject into the center of the units.\"]\ndef unitsCenterToCenterUnits [Monoid M] : (Submonoid.center M)ˣ →* Submonoid.center (Mˣ) :=\n  (Units.map (Submonoid.center M).subtype).codRestrict _ <|\n      fun u ↦ Submonoid.mem_center_iff.mpr <|\n        fun r ↦ Units.ext <| by\n        rw [Units.val_mul, Units.coe_map, Submonoid.coe_subtype, Units.val_mul, Units.coe_map,\n          Submonoid.coe_subtype, u.1.prop.comm r]\n\n"}
{"name":"val_addUnitsCenterToCenterAddUnits_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\nn : AddUnits (Subtype fun x => Membership.mem (AddSubmonoid.center M) x)\n⊢ Eq ↑↑((addUnitsCenterToCenterAddUnits M) n) ↑↑n","decl":"/-- For a monoid, the units of the center inject into the center of the units. This is not an\nequivalence in general; one case when it is is for groups with zero, which is covered in\n`centerUnitsEquivUnitsCenter`. -/\n@[to_additive (attr := simps! apply_coe_val)\n  \"For an additive monoid, the units of the center inject into the center of the units.\"]\ndef unitsCenterToCenterUnits [Monoid M] : (Submonoid.center M)ˣ →* Submonoid.center (Mˣ) :=\n  (Units.map (Submonoid.center M).subtype).codRestrict _ <|\n      fun u ↦ Submonoid.mem_center_iff.mpr <|\n        fun r ↦ Units.ext <| by\n        rw [Units.val_mul, Units.coe_map, Submonoid.coe_subtype, Units.val_mul, Units.coe_map,\n          Submonoid.coe_subtype, u.1.prop.comm r]\n\n"}
{"name":"unitsCenterToCenterUnits_injective","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : Monoid M\n⊢ Function.Injective ⇑(unitsCenterToCenterUnits M)","decl":"@[to_additive]\ntheorem unitsCenterToCenterUnits_injective [Monoid M] :\n    Function.Injective (unitsCenterToCenterUnits M) :=\n  fun _a _b h => Units.ext <| Subtype.ext <| congr_arg (Units.val ∘ Subtype.val) h\n\n"}
{"name":"addUnitsCenterToCenterAddUnits_injective","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\n⊢ Function.Injective ⇑(addUnitsCenterToCenterAddUnits M)","decl":"@[to_additive]\ntheorem unitsCenterToCenterUnits_injective [Monoid M] :\n    Function.Injective (unitsCenterToCenterUnits M) :=\n  fun _a _b h => Units.ext <| Subtype.ext <| congr_arg (Units.val ∘ Subtype.val) h\n\n"}
{"name":"MulEquivClass.apply_mem_center","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_3\nN : Type u_1\nF : Type u_2\ninst✝³ : EquivLike F M N\ninst✝² : Mul M\ninst✝¹ : Mul N\ninst✝ : MulEquivClass F M N\ne : F\nx : M\nhx : Membership.mem (Set.center M) x\n⊢ Membership.mem (Set.center N) (e x)","decl":"@[to_additive] theorem _root_.MulEquivClass.apply_mem_center {F} [EquivLike F M N] [Mul M] [Mul N]\n    [MulEquivClass F M N] (e : F) {x : M} (hx : x ∈ Set.center M) : e x ∈ Set.center N := by\n  let e := MulEquivClass.toMulEquiv e\n  show e x ∈ Set.center N\n  constructor <;>\n  (intros; apply e.symm.injective;\n    simp only [map_mul, e.symm_apply_apply, (isMulCentral_iff _).mp hx])\n\n"}
{"name":"AddEquivClass.apply_mem_center","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_3\nN : Type u_1\nF : Type u_2\ninst✝³ : EquivLike F M N\ninst✝² : Add M\ninst✝¹ : Add N\ninst✝ : AddEquivClass F M N\ne : F\nx : M\nhx : Membership.mem (Set.addCenter M) x\n⊢ Membership.mem (Set.addCenter N) (e x)","decl":"@[to_additive] theorem _root_.MulEquivClass.apply_mem_center {F} [EquivLike F M N] [Mul M] [Mul N]\n    [MulEquivClass F M N] (e : F) {x : M} (hx : x ∈ Set.center M) : e x ∈ Set.center N := by\n  let e := MulEquivClass.toMulEquiv e\n  show e x ∈ Set.center N\n  constructor <;>\n  (intros; apply e.symm.injective;\n    simp only [map_mul, e.symm_apply_apply, (isMulCentral_iff _).mp hx])\n\n"}
{"name":"AddEquivClass.apply_mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_3\nN : Type u_1\nF : Type u_2\ninst✝³ : EquivLike F M N\ninst✝² : Add M\ninst✝¹ : Add N\ninst✝ : AddEquivClass F M N\ne : F\nx : M\n⊢ Iff (Membership.mem (Set.addCenter N) (e x)) (Membership.mem (Set.addCenter M) x)","decl":"@[to_additive] theorem _root_.MulEquivClass.apply_mem_center_iff {F} [EquivLike F M N]\n    [Mul M] [Mul N] [MulEquivClass F M N] (e : F) {x : M} :\n    e x ∈ Set.center N ↔ x ∈ Set.center M :=\n  ⟨(by simpa using MulEquivClass.apply_mem_center (MulEquivClass.toMulEquiv e).symm ·),\n    MulEquivClass.apply_mem_center e⟩\n\n"}
{"name":"MulEquivClass.apply_mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_3\nN : Type u_1\nF : Type u_2\ninst✝³ : EquivLike F M N\ninst✝² : Mul M\ninst✝¹ : Mul N\ninst✝ : MulEquivClass F M N\ne : F\nx : M\n⊢ Iff (Membership.mem (Set.center N) (e x)) (Membership.mem (Set.center M) x)","decl":"@[to_additive] theorem _root_.MulEquivClass.apply_mem_center_iff {F} [EquivLike F M N]\n    [Mul M] [Mul N] [MulEquivClass F M N] (e : F) {x : M} :\n    e x ∈ Set.center N ↔ x ∈ Set.center M :=\n  ⟨(by simpa using MulEquivClass.apply_mem_center (MulEquivClass.toMulEquiv e).symm ·),\n    MulEquivClass.apply_mem_center e⟩\n\n"}
{"name":"Subsemigroup.centerCongr_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : Mul M\ninst✝ : Mul N\ne : MulEquiv M N\nr : Subtype fun x => Membership.mem (Subsemigroup.center M) x\n⊢ Eq (↑((Subsemigroup.centerCongr e) r)) (e ↑r)","decl":"/-- The center of isomorphic magmas are isomorphic. -/\n@[to_additive (attr := simps) \"The center of isomorphic additive magmas are isomorphic.\"]\ndef Subsemigroup.centerCongr [Mul M] [Mul N] (e : M ≃* N) : center M ≃* center N where\n  toFun r := ⟨e r, MulEquivClass.apply_mem_center e r.2⟩\n  invFun s := ⟨e.symm s, MulEquivClass.apply_mem_center e.symm s.2⟩\n  left_inv _ := Subtype.ext (e.left_inv _)\n  right_inv _ := Subtype.ext (e.right_inv _)\n  map_mul' _ _ := Subtype.ext (map_mul ..)\n\n"}
{"name":"AddSubsemigroup.centerCongr_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : Add M\ninst✝ : Add N\ne : AddEquiv M N\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center M) x\n⊢ Eq (↑((AddSubsemigroup.centerCongr e) r)) (e ↑r)","decl":"/-- The center of isomorphic magmas are isomorphic. -/\n@[to_additive (attr := simps) \"The center of isomorphic additive magmas are isomorphic.\"]\ndef Subsemigroup.centerCongr [Mul M] [Mul N] (e : M ≃* N) : center M ≃* center N where\n  toFun r := ⟨e r, MulEquivClass.apply_mem_center e r.2⟩\n  invFun s := ⟨e.symm s, MulEquivClass.apply_mem_center e.symm s.2⟩\n  left_inv _ := Subtype.ext (e.left_inv _)\n  right_inv _ := Subtype.ext (e.right_inv _)\n  map_mul' _ _ := Subtype.ext (map_mul ..)\n\n"}
{"name":"AddSubsemigroup.centerCongr_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : Add M\ninst✝ : Add N\ne : AddEquiv M N\ns : Subtype fun x => Membership.mem (AddSubsemigroup.center N) x\n⊢ Eq (↑((AddSubsemigroup.centerCongr e).symm s)) (e.symm ↑s)","decl":"/-- The center of isomorphic magmas are isomorphic. -/\n@[to_additive (attr := simps) \"The center of isomorphic additive magmas are isomorphic.\"]\ndef Subsemigroup.centerCongr [Mul M] [Mul N] (e : M ≃* N) : center M ≃* center N where\n  toFun r := ⟨e r, MulEquivClass.apply_mem_center e r.2⟩\n  invFun s := ⟨e.symm s, MulEquivClass.apply_mem_center e.symm s.2⟩\n  left_inv _ := Subtype.ext (e.left_inv _)\n  right_inv _ := Subtype.ext (e.right_inv _)\n  map_mul' _ _ := Subtype.ext (map_mul ..)\n\n"}
{"name":"Subsemigroup.centerCongr_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : Mul M\ninst✝ : Mul N\ne : MulEquiv M N\ns : Subtype fun x => Membership.mem (Subsemigroup.center N) x\n⊢ Eq (↑((Subsemigroup.centerCongr e).symm s)) (e.symm ↑s)","decl":"/-- The center of isomorphic magmas are isomorphic. -/\n@[to_additive (attr := simps) \"The center of isomorphic additive magmas are isomorphic.\"]\ndef Subsemigroup.centerCongr [Mul M] [Mul N] (e : M ≃* N) : center M ≃* center N where\n  toFun r := ⟨e r, MulEquivClass.apply_mem_center e r.2⟩\n  invFun s := ⟨e.symm s, MulEquivClass.apply_mem_center e.symm s.2⟩\n  left_inv _ := Subtype.ext (e.left_inv _)\n  right_inv _ := Subtype.ext (e.right_inv _)\n  map_mul' _ _ := Subtype.ext (map_mul ..)\n\n"}
{"name":"Submonoid.centerCongr_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass N\ne : MulEquiv M N\ns : Subtype fun x => Membership.mem (Subsemigroup.center N) x\n⊢ Eq (↑((Submonoid.centerCongr e).symm s)) (e.symm ↑s)","decl":"/-- The center of isomorphic monoids are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive monoids are isomorphic.\"]\ndef Submonoid.centerCongr [MulOneClass M] [MulOneClass N] (e : M ≃* N) : center M ≃* center N :=\n  Subsemigroup.centerCongr e\n\n"}
{"name":"Submonoid.centerCongr_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : MulOneClass M\ninst✝ : MulOneClass N\ne : MulEquiv M N\nr : Subtype fun x => Membership.mem (Subsemigroup.center M) x\n⊢ Eq (↑((Submonoid.centerCongr e) r)) (e ↑r)","decl":"/-- The center of isomorphic monoids are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive monoids are isomorphic.\"]\ndef Submonoid.centerCongr [MulOneClass M] [MulOneClass N] (e : M ≃* N) : center M ≃* center N :=\n  Subsemigroup.centerCongr e\n\n"}
{"name":"AddSubmonoid.centerCongr_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass N\ne : AddEquiv M N\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center M) x\n⊢ Eq (↑((AddSubmonoid.centerCongr e) r)) (e ↑r)","decl":"/-- The center of isomorphic monoids are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive monoids are isomorphic.\"]\ndef Submonoid.centerCongr [MulOneClass M] [MulOneClass N] (e : M ≃* N) : center M ≃* center N :=\n  Subsemigroup.centerCongr e\n\n"}
{"name":"AddSubmonoid.centerCongr_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\nN : Type u_1\ninst✝¹ : AddZeroClass M\ninst✝ : AddZeroClass N\ne : AddEquiv M N\ns : Subtype fun x => Membership.mem (AddSubsemigroup.center N) x\n⊢ Eq (↑((AddSubmonoid.centerCongr e).symm s)) (e.symm ↑s)","decl":"/-- The center of isomorphic monoids are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive monoids are isomorphic.\"]\ndef Submonoid.centerCongr [MulOneClass M] [MulOneClass N] (e : M ≃* N) : center M ≃* center N :=\n  Subsemigroup.centerCongr e\n\n"}
{"name":"AddOpposite.op_mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Add M\nx : M\n⊢ Iff (Membership.mem (Set.addCenter (AddOpposite M)) (AddOpposite.op x)) (Membership.mem (Set.addCenter M) x)","decl":"@[to_additive] theorem MulOpposite.op_mem_center_iff [Mul M] {x : M} :\n    op x ∈ Set.center Mᵐᵒᵖ ↔ x ∈ Set.center M := by\n  simp_rw [Set.mem_center_iff, isMulCentral_iff, MulOpposite.forall, ← op_mul, op_inj]; aesop\n\n"}
{"name":"MulOpposite.op_mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Mul M\nx : M\n⊢ Iff (Membership.mem (Set.center (MulOpposite M)) (MulOpposite.op x)) (Membership.mem (Set.center M) x)","decl":"@[to_additive] theorem MulOpposite.op_mem_center_iff [Mul M] {x : M} :\n    op x ∈ Set.center Mᵐᵒᵖ ↔ x ∈ Set.center M := by\n  simp_rw [Set.mem_center_iff, isMulCentral_iff, MulOpposite.forall, ← op_mul, op_inj]; aesop\n\n"}
{"name":"MulOpposite.unop_mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Mul M\nx : MulOpposite M\n⊢ Iff (Membership.mem (Set.center M) (MulOpposite.unop x)) (Membership.mem (Set.center (MulOpposite M)) x)","decl":"@[to_additive] theorem MulOpposite.unop_mem_center_iff [Mul M] {x : Mᵐᵒᵖ} :\n    unop x ∈ Set.center M ↔ x ∈ Set.center Mᵐᵒᵖ :=\n  op_mem_center_iff.symm\n\n"}
{"name":"AddOpposite.unop_mem_center_iff","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Add M\nx : AddOpposite M\n⊢ Iff (Membership.mem (Set.addCenter M) (AddOpposite.unop x)) (Membership.mem (Set.addCenter (AddOpposite M)) x)","decl":"@[to_additive] theorem MulOpposite.unop_mem_center_iff [Mul M] {x : Mᵐᵒᵖ} :\n    unop x ∈ Set.center M ↔ x ∈ Set.center Mᵐᵒᵖ :=\n  op_mem_center_iff.symm\n\n"}
{"name":"Subsemigroup.centerToMulOpposite_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Mul M\nr : Subtype fun x => Membership.mem (Subsemigroup.center M) x\n⊢ Eq (↑(Subsemigroup.centerToMulOpposite r)) (MulOpposite.op ↑r)","decl":"/-- The center of a magma is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps)\n\"The center of an additive magma is isomorphic to the center of its opposite.\"]\ndef Subsemigroup.centerToMulOpposite [Mul M] : center M ≃* center Mᵐᵒᵖ where\n  toFun r := ⟨_, MulOpposite.op_mem_center_iff.mpr r.2⟩\n  invFun r := ⟨_, MulOpposite.unop_mem_center_iff.mpr r.2⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_mul' r _ := Subtype.ext (congr_arg MulOpposite.op <| r.2.1 _)\n\n"}
{"name":"AddSubsemigroup.centerToAddOpposite_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Add M\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center (AddOpposite M)) x\n⊢ Eq (↑(AddSubsemigroup.centerToAddOpposite.symm r)) (AddOpposite.unop ↑r)","decl":"/-- The center of a magma is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps)\n\"The center of an additive magma is isomorphic to the center of its opposite.\"]\ndef Subsemigroup.centerToMulOpposite [Mul M] : center M ≃* center Mᵐᵒᵖ where\n  toFun r := ⟨_, MulOpposite.op_mem_center_iff.mpr r.2⟩\n  invFun r := ⟨_, MulOpposite.unop_mem_center_iff.mpr r.2⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_mul' r _ := Subtype.ext (congr_arg MulOpposite.op <| r.2.1 _)\n\n"}
{"name":"Subsemigroup.centerToMulOpposite_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Mul M\nr : Subtype fun x => Membership.mem (Subsemigroup.center (MulOpposite M)) x\n⊢ Eq (↑(Subsemigroup.centerToMulOpposite.symm r)) (MulOpposite.unop ↑r)","decl":"/-- The center of a magma is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps)\n\"The center of an additive magma is isomorphic to the center of its opposite.\"]\ndef Subsemigroup.centerToMulOpposite [Mul M] : center M ≃* center Mᵐᵒᵖ where\n  toFun r := ⟨_, MulOpposite.op_mem_center_iff.mpr r.2⟩\n  invFun r := ⟨_, MulOpposite.unop_mem_center_iff.mpr r.2⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_mul' r _ := Subtype.ext (congr_arg MulOpposite.op <| r.2.1 _)\n\n"}
{"name":"AddSubsemigroup.centerToAddOpposite_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : Add M\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center M) x\n⊢ Eq (↑(AddSubsemigroup.centerToAddOpposite r)) (AddOpposite.op ↑r)","decl":"/-- The center of a magma is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps)\n\"The center of an additive magma is isomorphic to the center of its opposite.\"]\ndef Subsemigroup.centerToMulOpposite [Mul M] : center M ≃* center Mᵐᵒᵖ where\n  toFun r := ⟨_, MulOpposite.op_mem_center_iff.mpr r.2⟩\n  invFun r := ⟨_, MulOpposite.unop_mem_center_iff.mpr r.2⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n  map_mul' r _ := Subtype.ext (congr_arg MulOpposite.op <| r.2.1 _)\n\n"}
{"name":"AddSubmonoid.centerToAddOpposite_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : AddZeroClass M\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center (AddOpposite M)) x\n⊢ Eq (↑(AddSubmonoid.centerToAddOpposite.symm r)) (AddOpposite.unop ↑r)","decl":"/-- The center of a monoid is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive monoid is isomorphic to the center of its opposite. \"]\ndef Submonoid.centerToMulOpposite [MulOneClass M] : center M ≃* center Mᵐᵒᵖ :=\n  Subsemigroup.centerToMulOpposite\n\n"}
{"name":"AddSubmonoid.centerToAddOpposite_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : AddZeroClass M\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center M) x\n⊢ Eq (↑(AddSubmonoid.centerToAddOpposite r)) (AddOpposite.op ↑r)","decl":"/-- The center of a monoid is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive monoid is isomorphic to the center of its opposite. \"]\ndef Submonoid.centerToMulOpposite [MulOneClass M] : center M ≃* center Mᵐᵒᵖ :=\n  Subsemigroup.centerToMulOpposite\n\n"}
{"name":"Submonoid.centerToMulOpposite_symm_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : MulOneClass M\nr : Subtype fun x => Membership.mem (Subsemigroup.center (MulOpposite M)) x\n⊢ Eq (↑(Submonoid.centerToMulOpposite.symm r)) (MulOpposite.unop ↑r)","decl":"/-- The center of a monoid is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive monoid is isomorphic to the center of its opposite. \"]\ndef Submonoid.centerToMulOpposite [MulOneClass M] : center M ≃* center Mᵐᵒᵖ :=\n  Subsemigroup.centerToMulOpposite\n\n"}
{"name":"Submonoid.centerToMulOpposite_apply_coe","module":"Mathlib.GroupTheory.Submonoid.Center","initialProofState":"M : Type u_2\ninst✝ : MulOneClass M\nr : Subtype fun x => Membership.mem (Subsemigroup.center M) x\n⊢ Eq (↑(Submonoid.centerToMulOpposite r)) (MulOpposite.op ↑r)","decl":"/-- The center of a monoid is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive monoid is isomorphic to the center of its opposite. \"]\ndef Submonoid.centerToMulOpposite [MulOneClass M] : center M ≃* center Mᵐᵒᵖ :=\n  Subsemigroup.centerToMulOpposite\n\n"}
