{"name":"FormalMultilinearSeries.zero_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nn : Nat\n⊢ Eq (0 n) 0","decl":"@[simp, nolint simpNF]\ntheorem zero_apply (n : ℕ) : (0 : FormalMultilinearSeries 𝕜 E F) n = 0 := rfl\n\n"}
{"name":"FormalMultilinearSeries.neg_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\nf : FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Eq (Neg.neg f n) (Neg.neg (f n))","decl":"@[simp]\ntheorem neg_apply (f : FormalMultilinearSeries 𝕜 E F) (n : ℕ) : (-f) n = - f n := rfl\n\n"}
{"name":"FormalMultilinearSeries.add_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np q : FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Eq (HAdd.hAdd p q n) (HAdd.hAdd (p n) (q n))","decl":"@[simp]\ntheorem add_apply (p q : FormalMultilinearSeries 𝕜 E F) (n : ℕ) : (p + q) n = p n + q n := rfl\n\n"}
{"name":"FormalMultilinearSeries.sub_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np q : FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Eq (HSub.hSub p q n) (HSub.hSub (p n) (q n))","decl":"@[simp]\ntheorem sub_apply (p q : FormalMultilinearSeries 𝕜 E F) (n : ℕ) : (p - q) n = p n - q n := rfl\n\n"}
{"name":"FormalMultilinearSeries.smul_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\n𝕜' : Type u'\nE : Type v\nF : Type w\ninst✝¹⁴ : Ring 𝕜\ninst✝¹³ : AddCommGroup E\ninst✝¹² : Module 𝕜 E\ninst✝¹¹ : TopologicalSpace E\ninst✝¹⁰ : TopologicalAddGroup E\ninst✝⁹ : ContinuousConstSMul 𝕜 E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜 F\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalAddGroup F\ninst✝⁴ : ContinuousConstSMul 𝕜 F\ninst✝³ : Semiring 𝕜'\ninst✝² : Module 𝕜' F\ninst✝¹ : ContinuousConstSMul 𝕜' F\ninst✝ : SMulCommClass 𝕜 𝕜' F\nf : FormalMultilinearSeries 𝕜 E F\nn : Nat\na : 𝕜'\n⊢ Eq (HSMul.hSMul a f n) (HSMul.hSMul a (f n))","decl":"@[simp]\ntheorem smul_apply [Semiring 𝕜'] [Module 𝕜' F] [ContinuousConstSMul 𝕜' F] [SMulCommClass 𝕜 𝕜' F]\n    (f : FormalMultilinearSeries 𝕜 E F) (n : ℕ) (a : 𝕜') : (a • f) n = a • f n := rfl\n\n"}
{"name":"FormalMultilinearSeries.ext","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np q : FormalMultilinearSeries 𝕜 E F\nh : ∀ (n : Nat), Eq (p n) (q n)\n⊢ Eq p q","decl":"@[ext]\nprotected theorem ext {p q : FormalMultilinearSeries 𝕜 E F} (h : ∀ n, p n = q n) : p = q :=\n  funext h\n\n"}
{"name":"FormalMultilinearSeries.ext_iff","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np q : FormalMultilinearSeries 𝕜 E F\n⊢ Iff (Eq p q) (∀ (n : Nat), Eq (p n) (q n))","decl":"@[ext]\nprotected theorem ext {p q : FormalMultilinearSeries 𝕜 E F} (h : ∀ n, p n = q n) : p = q :=\n  funext h\n\n"}
{"name":"FormalMultilinearSeries.ne_iff","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np q : FormalMultilinearSeries 𝕜 E F\n⊢ Iff (Ne p q) (Exists fun n => Ne (p n) (q n))","decl":"protected theorem ne_iff {p q : FormalMultilinearSeries 𝕜 E F} : p ≠ q ↔ ∃ n, p n ≠ q n :=\n  Function.ne_iff\n\n"}
{"name":"FormalMultilinearSeries.removeZero_coeff_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\n⊢ Eq (p.removeZero 0) 0","decl":"@[simp]\ntheorem removeZero_coeff_zero (p : FormalMultilinearSeries 𝕜 E F) : p.removeZero 0 = 0 :=\n  rfl\n\n"}
{"name":"FormalMultilinearSeries.removeZero_coeff_succ","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Eq (p.removeZero (HAdd.hAdd n 1)) (p (HAdd.hAdd n 1))","decl":"@[simp]\ntheorem removeZero_coeff_succ (p : FormalMultilinearSeries 𝕜 E F) (n : ℕ) :\n    p.removeZero (n + 1) = p (n + 1) :=\n  rfl\n\n"}
{"name":"FormalMultilinearSeries.removeZero_of_pos","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nn : Nat\nh : LT.lt 0 n\n⊢ Eq (p.removeZero n) (p n)","decl":"theorem removeZero_of_pos (p : FormalMultilinearSeries 𝕜 E F) {n : ℕ} (h : 0 < n) :\n    p.removeZero n = p n := by\n  rw [← Nat.succ_pred_eq_of_pos h]\n  rfl\n\n"}
{"name":"FormalMultilinearSeries.congr","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nm n : Nat\nv : Fin m → E\nw : Fin n → E\nh1 : Eq m n\nh2 : ∀ (i : Nat) (him : LT.lt i m) (hin : LT.lt i n), Eq (v ⟨i, him⟩) (w ⟨i, hin⟩)\n⊢ Eq ((p m) v) ((p n) w)","decl":"/-- Convenience congruence lemma stating in a dependent setting that, if the arguments to a formal\nmultilinear series are equal, then the values are also equal. -/\ntheorem congr (p : FormalMultilinearSeries 𝕜 E F) {m n : ℕ} {v : Fin m → E} {w : Fin n → E}\n    (h1 : m = n) (h2 : ∀ (i : ℕ) (him : i < m) (hin : i < n), v ⟨i, him⟩ = w ⟨i, hin⟩) :\n    p m v = p n w := by\n  subst n\n  congr with ⟨i, hi⟩\n  exact h2 i hi hi\n\n"}
{"name":"FormalMultilinearSeries.congr_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nk l : Nat\nh : Eq k l\nh' : Eq (p k) 0\n⊢ Eq (p l) 0","decl":"lemma congr_zero (p : FormalMultilinearSeries 𝕜 E F) {k l : ℕ} (h : k = l) (h' : p k = 0) :\n    p l = 0 := by\n  subst h; exact h'\n\n"}
{"name":"FormalMultilinearSeries.compContinuousLinearMap_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\nG : Type x\ninst✝¹⁵ : Ring 𝕜\ninst✝¹⁴ : AddCommGroup E\ninst✝¹³ : Module 𝕜 E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : TopologicalAddGroup E\ninst✝¹⁰ : ContinuousConstSMul 𝕜 E\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜 F\ninst✝⁷ : TopologicalSpace F\ninst✝⁶ : TopologicalAddGroup F\ninst✝⁵ : ContinuousConstSMul 𝕜 F\ninst✝⁴ : AddCommGroup G\ninst✝³ : Module 𝕜 G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : ContinuousConstSMul 𝕜 G\np : FormalMultilinearSeries 𝕜 F G\nu : ContinuousLinearMap (RingHom.id 𝕜) E F\nn : Nat\nv : Fin n → E\n⊢ Eq ((p.compContinuousLinearMap u n) v) ((p n) (Function.comp (⇑u) v))","decl":"@[simp]\ntheorem compContinuousLinearMap_apply (p : FormalMultilinearSeries 𝕜 F G) (u : E →L[𝕜] F) (n : ℕ)\n    (v : Fin n → E) : (p.compContinuousLinearMap u) n v = p n (u ∘ v) :=\n  rfl\n\n"}
{"name":"FormalMultilinearSeries.unshift_shift","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\np : FormalMultilinearSeries 𝕜 E (ContinuousLinearMap (RingHom.id 𝕜) E F)\nz : F\n⊢ Eq (p.unshift z).shift p","decl":"theorem unshift_shift {p : FormalMultilinearSeries 𝕜 E (E →L[𝕜] F)} {z : F} :\n    (p.unshift z).shift = p := by\n  ext1 n\n  simp [shift, unshift]\n  exact LinearIsometryEquiv.apply_symm_apply (continuousMultilinearCurryRightEquiv' 𝕜 n E F) (p n)\n\n"}
{"name":"ContinuousLinearMap.compFormalMultilinearSeries_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\nG : Type x\ninst✝¹⁵ : Ring 𝕜\ninst✝¹⁴ : AddCommGroup E\ninst✝¹³ : Module 𝕜 E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : TopologicalAddGroup E\ninst✝¹⁰ : ContinuousConstSMul 𝕜 E\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜 F\ninst✝⁷ : TopologicalSpace F\ninst✝⁶ : TopologicalAddGroup F\ninst✝⁵ : ContinuousConstSMul 𝕜 F\ninst✝⁴ : AddCommGroup G\ninst✝³ : Module 𝕜 G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : ContinuousConstSMul 𝕜 G\nf : ContinuousLinearMap (RingHom.id 𝕜) F G\np : FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Eq (f.compFormalMultilinearSeries p n) (f.compContinuousMultilinearMap (p n))","decl":"@[simp]\ntheorem compFormalMultilinearSeries_apply (f : F →L[𝕜] G) (p : FormalMultilinearSeries 𝕜 E F)\n    (n : ℕ) : (f.compFormalMultilinearSeries p) n = f.compContinuousMultilinearMap (p n) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.compFormalMultilinearSeries_apply'","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\nG : Type x\ninst✝¹⁵ : Ring 𝕜\ninst✝¹⁴ : AddCommGroup E\ninst✝¹³ : Module 𝕜 E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : TopologicalAddGroup E\ninst✝¹⁰ : ContinuousConstSMul 𝕜 E\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜 F\ninst✝⁷ : TopologicalSpace F\ninst✝⁶ : TopologicalAddGroup F\ninst✝⁵ : ContinuousConstSMul 𝕜 F\ninst✝⁴ : AddCommGroup G\ninst✝³ : Module 𝕜 G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : ContinuousConstSMul 𝕜 G\nf : ContinuousLinearMap (RingHom.id 𝕜) F G\np : FormalMultilinearSeries 𝕜 E F\nn : Nat\nv : Fin n → E\n⊢ Eq ((f.compFormalMultilinearSeries p n) v) (f ((p n) v))","decl":"theorem compFormalMultilinearSeries_apply' (f : F →L[𝕜] G) (p : FormalMultilinearSeries 𝕜 E F)\n    (n : ℕ) (v : Fin n → E) : (f.compFormalMultilinearSeries p) n v = f (p n v) :=\n  rfl\n\n"}
{"name":"FormalMultilinearSeries.order_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\n⊢ Eq (FormalMultilinearSeries.order 0) 0","decl":"@[simp]\ntheorem order_zero : (0 : FormalMultilinearSeries 𝕜 E F).order = 0 := by simp [order]\n\n"}
{"name":"FormalMultilinearSeries.ne_zero_of_order_ne_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nhp : Ne p.order 0\n⊢ Ne p 0","decl":"theorem ne_zero_of_order_ne_zero (hp : p.order ≠ 0) : p ≠ 0 := fun h => by simp [h] at hp\n\n"}
{"name":"FormalMultilinearSeries.order_eq_find","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹¹ : Ring 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : TopologicalAddGroup E\ninst✝⁶ : ContinuousConstSMul 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\ninst✝ : DecidablePred fun n => Ne (p n) 0\nhp : Exists fun n => Ne (p n) 0\n⊢ Eq p.order (Nat.find hp)","decl":"theorem order_eq_find [DecidablePred fun n => p n ≠ 0] (hp : ∃ n, p n ≠ 0) :\n    p.order = Nat.find hp := by convert Nat.sInf_def hp\n\n"}
{"name":"FormalMultilinearSeries.order_eq_find'","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹¹ : Ring 𝕜\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : TopologicalAddGroup E\ninst✝⁶ : ContinuousConstSMul 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\ninst✝ : DecidablePred fun n => Ne (p n) 0\nhp : Ne p 0\n⊢ Eq p.order (Nat.find ⋯)","decl":"theorem order_eq_find' [DecidablePred fun n => p n ≠ 0] (hp : p ≠ 0) :\n    p.order = Nat.find (FormalMultilinearSeries.ne_iff.mp hp) :=\n  order_eq_find _\n\n"}
{"name":"FormalMultilinearSeries.order_eq_zero_iff'","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\n⊢ Iff (Eq p.order 0) (Or (Eq p 0) (Ne (p 0) 0))","decl":"theorem order_eq_zero_iff' : p.order = 0 ↔ p = 0 ∨ p 0 ≠ 0 := by\n  simpa [order, Nat.sInf_eq_zero, FormalMultilinearSeries.ext_iff, eq_empty_iff_forall_not_mem]\n    using or_comm\n\n"}
{"name":"FormalMultilinearSeries.order_eq_zero_iff","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nhp : Ne p 0\n⊢ Iff (Eq p.order 0) (Ne (p 0) 0)","decl":"theorem order_eq_zero_iff (hp : p ≠ 0) : p.order = 0 ↔ p 0 ≠ 0 := by\n  simp [order_eq_zero_iff', hp]\n\n"}
{"name":"FormalMultilinearSeries.apply_order_ne_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nhp : Ne p 0\n⊢ Ne (p p.order) 0","decl":"theorem apply_order_ne_zero (hp : p ≠ 0) : p p.order ≠ 0 :=\n  Nat.sInf_mem (FormalMultilinearSeries.ne_iff.1 hp)\n\n"}
{"name":"FormalMultilinearSeries.apply_order_ne_zero'","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nhp : Ne p.order 0\n⊢ Ne (p p.order) 0","decl":"theorem apply_order_ne_zero' (hp : p.order ≠ 0) : p p.order ≠ 0 :=\n  apply_order_ne_zero (ne_zero_of_order_ne_zero hp)\n\n"}
{"name":"FormalMultilinearSeries.apply_eq_zero_of_lt_order","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝¹⁰ : Ring 𝕜\nn : Nat\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜 E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousConstSMul 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜 F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul 𝕜 F\np : FormalMultilinearSeries 𝕜 E F\nhp : LT.lt n p.order\n⊢ Eq (p n) 0","decl":"theorem apply_eq_zero_of_lt_order (hp : n < p.order) : p n = 0 :=\n  by_contra <| Nat.not_mem_of_lt_sInf hp\n\n"}
{"name":"FormalMultilinearSeries.mkPiRing_coeff_eq","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nn : Nat\n⊢ Eq (ContinuousMultilinearMap.mkPiRing 𝕜 (Fin n) (p.coeff n)) (p n)","decl":"theorem mkPiRing_coeff_eq (p : FormalMultilinearSeries 𝕜 𝕜 E) (n : ℕ) :\n    ContinuousMultilinearMap.mkPiRing 𝕜 (Fin n) (p.coeff n) = p n :=\n  (p n).mkPiRing_apply_one_eq_self\n\n"}
{"name":"FormalMultilinearSeries.apply_eq_prod_smul_coeff","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nn : Nat\ny : Fin n → 𝕜\n⊢ Eq ((p n) y) (HSMul.hSMul (Finset.univ.prod fun i => y i) (p.coeff n))","decl":"@[simp]\ntheorem apply_eq_prod_smul_coeff : p n y = (∏ i, y i) • p.coeff n := by\n  convert (p n).toMultilinearMap.map_smul_univ y 1\n  simp only [Pi.one_apply, Algebra.id.smul_eq_mul, mul_one]\n\n"}
{"name":"FormalMultilinearSeries.coeff_eq_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nn : Nat\n⊢ Iff (Eq (p.coeff n) 0) (Eq (p n) 0)","decl":"theorem coeff_eq_zero : p.coeff n = 0 ↔ p n = 0 := by\n  rw [← mkPiRing_coeff_eq p, ContinuousMultilinearMap.mkPiRing_eq_zero_iff]\n\n"}
{"name":"FormalMultilinearSeries.apply_eq_pow_smul_coeff","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nn : Nat\nz : 𝕜\n⊢ Eq ((p n) fun x => z) (HSMul.hSMul (HPow.hPow z n) (p.coeff n))","decl":"theorem apply_eq_pow_smul_coeff : (p n fun _ => z) = z ^ n • p.coeff n := by simp\n\n"}
{"name":"FormalMultilinearSeries.norm_apply_eq_norm_coef","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nn : Nat\n⊢ Eq (Norm.norm (p n)) (Norm.norm (p.coeff n))","decl":"@[simp]\ntheorem norm_apply_eq_norm_coef : ‖p n‖ = ‖coeff p n‖ := by\n  rw [← mkPiRing_coeff_eq p, ContinuousMultilinearMap.norm_mkPiRing]\n\n"}
{"name":"FormalMultilinearSeries.coeff_fslope","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nn : Nat\n⊢ Eq (p.fslope.coeff n) (p.coeff (HAdd.hAdd n 1))","decl":"@[simp]\ntheorem coeff_fslope : p.fslope.coeff n = p.coeff (n + 1) := by\n  simp only [fslope, coeff, ContinuousMultilinearMap.curryLeft_apply]\n  congr 1\n  exact Fin.cons_self_tail (fun _ => (1 : 𝕜))\n\n"}
{"name":"FormalMultilinearSeries.coeff_iterate_fslope","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\np : FormalMultilinearSeries 𝕜 𝕜 E\nk n : Nat\n⊢ Eq ((Nat.iterate FormalMultilinearSeries.fslope k p).coeff n) (p.coeff (HAdd.hAdd n k))","decl":"@[simp]\ntheorem coeff_iterate_fslope (k n : ℕ) : (fslope^[k] p).coeff n = p.coeff (n + k) := by\n  induction k generalizing p with\n  | zero => rfl\n  | succ k ih => simp [ih, add_assoc]\n\n"}
{"name":"constFormalMultilinearSeries_apply","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : NormedSpace 𝕜 F\nc : F\nn : Nat\nhn : Ne n 0\n⊢ Eq (constFormalMultilinearSeries 𝕜 E c n) 0","decl":"@[simp]\ntheorem constFormalMultilinearSeries_apply [NontriviallyNormedField 𝕜] [NormedAddCommGroup E]\n    [NormedAddCommGroup F] [NormedSpace 𝕜 E] [NormedSpace 𝕜 F] {c : F} {n : ℕ} (hn : n ≠ 0) :\n    constFormalMultilinearSeries 𝕜 E c n = 0 :=\n  Nat.casesOn n (fun hn => (hn rfl).elim) (fun _ _ => rfl) hn\n\n"}
{"name":"constFormalMultilinearSeries_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : NormedSpace 𝕜 F\n⊢ Eq (constFormalMultilinearSeries 𝕜 E 0) 0","decl":"@[simp]\nlemma constFormalMultilinearSeries_zero [NontriviallyNormedField 𝕜] [NormedAddCommGroup E ]\n    [NormedAddCommGroup F] [NormedSpace 𝕜 E] [NormedSpace 𝕜 F] :\n    constFormalMultilinearSeries 𝕜 E (0 : F) = 0 := by\n  ext n x\n  simp only [FormalMultilinearSeries.zero_apply, ContinuousMultilinearMap.zero_apply,\n    constFormalMultilinearSeries]\n  induction n\n  · simp only [ContinuousMultilinearMap.uncurry0_apply]\n  · simp only [constFormalMultilinearSeries.match_1.eq_2, ContinuousMultilinearMap.zero_apply]\n\n"}
{"name":"ContinuousLinearMap.fpowerSeries_apply_zero","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ Eq (f.fpowerSeries x 0) (ContinuousMultilinearMap.uncurry0 𝕜 E (f x))","decl":"@[simp]\ntheorem fpowerSeries_apply_zero (f : E →L[𝕜] F) (x : E) :\n    f.fpowerSeries x 0 = ContinuousMultilinearMap.uncurry0 𝕜 _ (f x) :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.fpowerSeries_apply_one","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ Eq (f.fpowerSeries x 1) ((continuousMultilinearCurryFin1 𝕜 E F).symm f)","decl":"@[simp]\ntheorem fpowerSeries_apply_one (f : E →L[𝕜] F) (x : E) :\n    f.fpowerSeries x 1 = (continuousMultilinearCurryFin1 𝕜 E F).symm f :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.fpowerSeries_apply_add_two","module":"Mathlib.Analysis.Calculus.FormalMultilinearSeries","initialProofState":"𝕜 : Type u\nE : Type v\nF : Type w\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nn : Nat\n⊢ Eq (f.fpowerSeries x (HAdd.hAdd n 2)) 0","decl":"@[simp]\ntheorem fpowerSeries_apply_add_two (f : E →L[𝕜] F) (x : E) (n : ℕ) : f.fpowerSeries x (n + 2) = 0 :=\n  rfl\n\n"}
