{"name":"CliffordAlgebra.star_def","module":"Mathlib.LinearAlgebra.CliffordAlgebra.Star","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nM : Type u_2\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nQ : QuadraticForm R M\nx : CliffordAlgebra Q\n⊢ Eq (Star.star x) (CliffordAlgebra.reverse (CliffordAlgebra.involute x))","decl":"theorem star_def (x : CliffordAlgebra Q) : star x = reverse (involute x) :=\n  rfl\n\n"}
{"name":"CliffordAlgebra.star_def'","module":"Mathlib.LinearAlgebra.CliffordAlgebra.Star","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nM : Type u_2\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nQ : QuadraticForm R M\nx : CliffordAlgebra Q\n⊢ Eq (Star.star x) (CliffordAlgebra.involute (CliffordAlgebra.reverse x))","decl":"theorem star_def' (x : CliffordAlgebra Q) : star x = involute (reverse x) :=\n  reverse_involute _\n\n"}
{"name":"CliffordAlgebra.star_ι","module":"Mathlib.LinearAlgebra.CliffordAlgebra.Star","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nM : Type u_2\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nQ : QuadraticForm R M\nm : M\n⊢ Eq (Star.star ((CliffordAlgebra.ι Q) m)) (Neg.neg ((CliffordAlgebra.ι Q) m))","decl":"@[simp]\ntheorem star_ι (m : M) : star (ι Q m) = -ι Q m := by rw [star_def, involute_ι, map_neg, reverse_ι]\n\n"}
{"name":"CliffordAlgebra.star_smul","module":"Mathlib.LinearAlgebra.CliffordAlgebra.Star","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nM : Type u_2\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nQ : QuadraticForm R M\nr : R\nx : CliffordAlgebra Q\n⊢ Eq (Star.star (HSMul.hSMul r x)) (HSMul.hSMul r (Star.star x))","decl":"/-- Note that this not match the `star_smul` implied by `StarModule`; it certainly could if we\nalso conjugated all the scalars, but there appears to be nothing in the literature that advocates\ndoing this. -/\n@[simp]\ntheorem star_smul (r : R) (x : CliffordAlgebra Q) : star (r • x) = r • star x := by\n  rw [star_def, star_def, map_smul, map_smul]\n\n"}
{"name":"CliffordAlgebra.star_algebraMap","module":"Mathlib.LinearAlgebra.CliffordAlgebra.Star","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nM : Type u_2\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\nQ : QuadraticForm R M\nr : R\n⊢ Eq (Star.star ((algebraMap R (CliffordAlgebra Q)) r)) ((algebraMap R (CliffordAlgebra Q)) r)","decl":"@[simp]\ntheorem star_algebraMap (r : R) :\n    star (algebraMap R (CliffordAlgebra Q) r) = algebraMap R (CliffordAlgebra Q) r := by\n  rw [star_def, involute.commutes, reverse.commutes]\n\n"}
