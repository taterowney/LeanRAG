{"name":"ProbabilityTheory.hasFiniteIntegral_prod_mk_left","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\ns : Set (Prod β γ)\nh2s : Ne (((κ.compProd η) a) s) Top.top\n⊢ MeasureTheory.HasFiniteIntegral (fun b => ((η { fst := a, snd := b }) (Set.preimage (Prod.mk b) s)).toReal) (κ a)","decl":"theorem hasFiniteIntegral_prod_mk_left (a : α) {s : Set (β × γ)} (h2s : (κ ⊗ₖ η) a s ≠ ∞) :\n    HasFiniteIntegral (fun b => (η (a, b) (Prod.mk b ⁻¹' s)).toReal) (κ a) := by\n  let t := toMeasurable ((κ ⊗ₖ η) a) s\n  simp_rw [hasFiniteIntegral_iff_enorm, enorm_eq_ofReal toReal_nonneg]\n  calc\n    ∫⁻ b, ENNReal.ofReal (η (a, b) (Prod.mk b ⁻¹' s)).toReal ∂κ a\n    _ ≤ ∫⁻ b, η (a, b) (Prod.mk b ⁻¹' t) ∂κ a := by\n      refine lintegral_mono_ae ?_\n      filter_upwards [ae_kernel_lt_top a h2s] with b hb\n      rw [ofReal_toReal hb.ne]\n      exact measure_mono (preimage_mono (subset_toMeasurable _ _))\n    _ ≤ (κ ⊗ₖ η) a t := le_compProd_apply _ _ _ _\n    _ = (κ ⊗ₖ η) a s := measure_toMeasurable s\n    _ < ⊤ := h2s.lt_top\n\n"}
{"name":"ProbabilityTheory.integrable_kernel_prod_mk_left","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\ns : Set (Prod β γ)\nhs : MeasurableSet s\nh2s : Ne (((κ.compProd η) a) s) Top.top\n⊢ MeasureTheory.Integrable (fun b => ((η { fst := a, snd := b }) (Set.preimage (Prod.mk b) s)).toReal) (κ a)","decl":"theorem integrable_kernel_prod_mk_left (a : α) {s : Set (β × γ)} (hs : MeasurableSet s)\n    (h2s : (κ ⊗ₖ η) a s ≠ ∞) : Integrable (fun b => (η (a, b) (Prod.mk b ⁻¹' s)).toReal) (κ a) := by\n  constructor\n  · exact (measurable_kernel_prod_mk_left' hs a).ennreal_toReal.aestronglyMeasurable\n  · exact hasFiniteIntegral_prod_mk_left a h2s\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.integral_kernel_compProd","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf : Prod β γ → E\nhf : MeasureTheory.AEStronglyMeasurable f ((κ.compProd η) a)\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (κ a)","decl":"theorem _root_.MeasureTheory.AEStronglyMeasurable.integral_kernel_compProd [NormedSpace ℝ E]\n    ⦃f : β × γ → E⦄ (hf : AEStronglyMeasurable f ((κ ⊗ₖ η) a)) :\n    AEStronglyMeasurable (fun x => ∫ y, f (x, y) ∂η (a, x)) (κ a) :=\n  ⟨fun x => ∫ y, hf.mk f (x, y) ∂η (a, x), hf.stronglyMeasurable_mk.integral_kernel_prod_right'', by\n    filter_upwards [ae_ae_of_ae_compProd hf.ae_eq_mk] with _ hx using integral_congr_ae hx⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.compProd_mk_left","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\nδ : Type u_5\ninst✝ : TopologicalSpace δ\nf : Prod β γ → δ\nhf : MeasureTheory.AEStronglyMeasurable f ((κ.compProd η) a)\n⊢ Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (fun y => f { fst := x, snd := y }) (η { fst := a, snd := x })) (MeasureTheory.ae (κ a))","decl":"theorem _root_.MeasureTheory.AEStronglyMeasurable.compProd_mk_left {δ : Type*} [TopologicalSpace δ]\n    {f : β × γ → δ} (hf : AEStronglyMeasurable f ((κ ⊗ₖ η) a)) :\n    ∀ᵐ x ∂κ a, AEStronglyMeasurable (fun y => f (x, y)) (η (a, x)) := by\n  filter_upwards [ae_ae_of_ae_compProd hf.ae_eq_mk] with x hx using\n    ⟨fun y => hf.mk f (x, y), hf.stronglyMeasurable_mk.comp_measurable measurable_prod_mk_left, hx⟩\n\n"}
{"name":"ProbabilityTheory.hasFiniteIntegral_compProd_iff","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝² : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\nf : Prod β γ → E\nh1f : MeasureTheory.StronglyMeasurable f\n⊢ Iff (MeasureTheory.HasFiniteIntegral f ((κ.compProd η) a)) (And (Filter.Eventually (fun x => MeasureTheory.HasFiniteIntegral (fun y => f { fst := x, snd := y }) (η { fst := a, snd := x })) (MeasureTheory.ae (κ a))) (MeasureTheory.HasFiniteIntegral (fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => Norm.norm (f { fst := x, snd := y })) (κ a)))","decl":"theorem hasFiniteIntegral_compProd_iff ⦃f : β × γ → E⦄ (h1f : StronglyMeasurable f) :\n    HasFiniteIntegral f ((κ ⊗ₖ η) a) ↔\n      (∀ᵐ x ∂κ a, HasFiniteIntegral (fun y => f (x, y)) (η (a, x))) ∧\n        HasFiniteIntegral (fun x => ∫ y, ‖f (x, y)‖ ∂η (a, x)) (κ a) := by\n  simp only [hasFiniteIntegral_iff_enorm]\n  rw [lintegral_compProd _ _ _ h1f.enorm]\n  have : ∀ x, ∀ᵐ y ∂η (a, x), 0 ≤ ‖f (x, y)‖ := fun x => Eventually.of_forall fun y => norm_nonneg _\n  simp_rw [integral_eq_lintegral_of_nonneg_ae (this _)\n      (h1f.norm.comp_measurable measurable_prod_mk_left).aestronglyMeasurable,\n    enorm_eq_ofReal toReal_nonneg, ofReal_norm_eq_enorm]\n  have : ∀ {p q r : Prop} (_ : r → p), (r ↔ p ∧ q) ↔ p → (r ↔ q) := fun {p q r} h1 => by\n    rw [← and_congr_right_iff, and_iff_right_of_imp h1]\n  rw [this]\n  · intro h2f; rw [lintegral_congr_ae]\n    filter_upwards [h2f] with x hx\n    rw [ofReal_toReal]; rw [← lt_top_iff_ne_top]; exact hx\n  · intro h2f; refine ae_lt_top ?_ h2f.ne; exact h1f.enorm.lintegral_kernel_prod_right''\n\n"}
{"name":"ProbabilityTheory.hasFiniteIntegral_compProd_iff'","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝² : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\nf : Prod β γ → E\nh1f : MeasureTheory.AEStronglyMeasurable f ((κ.compProd η) a)\n⊢ Iff (MeasureTheory.HasFiniteIntegral f ((κ.compProd η) a)) (And (Filter.Eventually (fun x => MeasureTheory.HasFiniteIntegral (fun y => f { fst := x, snd := y }) (η { fst := a, snd := x })) (MeasureTheory.ae (κ a))) (MeasureTheory.HasFiniteIntegral (fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => Norm.norm (f { fst := x, snd := y })) (κ a)))","decl":"theorem hasFiniteIntegral_compProd_iff' ⦃f : β × γ → E⦄\n    (h1f : AEStronglyMeasurable f ((κ ⊗ₖ η) a)) :\n    HasFiniteIntegral f ((κ ⊗ₖ η) a) ↔\n      (∀ᵐ x ∂κ a, HasFiniteIntegral (fun y => f (x, y)) (η (a, x))) ∧\n        HasFiniteIntegral (fun x => ∫ y, ‖f (x, y)‖ ∂η (a, x)) (κ a) := by\n  rw [hasFiniteIntegral_congr h1f.ae_eq_mk,\n    hasFiniteIntegral_compProd_iff h1f.stronglyMeasurable_mk]\n  apply and_congr\n  · apply eventually_congr\n    filter_upwards [ae_ae_of_ae_compProd h1f.ae_eq_mk.symm] with x hx using\n      hasFiniteIntegral_congr hx\n  · apply hasFiniteIntegral_congr\n    filter_upwards [ae_ae_of_ae_compProd h1f.ae_eq_mk.symm] with _ hx using\n      integral_congr_ae (EventuallyEq.fun_comp hx _)\n\n"}
{"name":"ProbabilityTheory.integrable_compProd_iff","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝² : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\nf : Prod β γ → E\nhf : MeasureTheory.AEStronglyMeasurable f ((κ.compProd η) a)\n⊢ Iff (MeasureTheory.Integrable f ((κ.compProd η) a)) (And (Filter.Eventually (fun x => MeasureTheory.Integrable (fun y => f { fst := x, snd := y }) (η { fst := a, snd := x })) (MeasureTheory.ae (κ a))) (MeasureTheory.Integrable (fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => Norm.norm (f { fst := x, snd := y })) (κ a)))","decl":"theorem integrable_compProd_iff ⦃f : β × γ → E⦄ (hf : AEStronglyMeasurable f ((κ ⊗ₖ η) a)) :\n    Integrable f ((κ ⊗ₖ η) a) ↔\n      (∀ᵐ x ∂κ a, Integrable (fun y => f (x, y)) (η (a, x))) ∧\n        Integrable (fun x => ∫ y, ‖f (x, y)‖ ∂η (a, x)) (κ a) := by\n  simp only [Integrable, hasFiniteIntegral_compProd_iff' hf, hf.norm.integral_kernel_compProd,\n    hf, hf.compProd_mk_left, eventually_and, true_and]\n\n"}
{"name":"MeasureTheory.Integrable.compProd_mk_left_ae","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝² : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\nf : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\n⊢ Filter.Eventually (fun x => MeasureTheory.Integrable (fun y => f { fst := x, snd := y }) (η { fst := a, snd := x })) (MeasureTheory.ae (κ a))","decl":"theorem _root_.MeasureTheory.Integrable.compProd_mk_left_ae ⦃f : β × γ → E⦄\n    (hf : Integrable f ((κ ⊗ₖ η) a)) : ∀ᵐ x ∂κ a, Integrable (fun y => f (x, y)) (η (a, x)) :=\n  ((integrable_compProd_iff hf.aestronglyMeasurable).mp hf).1\n\n"}
{"name":"MeasureTheory.Integrable.integral_norm_compProd","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝² : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\nf : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\n⊢ MeasureTheory.Integrable (fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => Norm.norm (f { fst := x, snd := y })) (κ a)","decl":"theorem _root_.MeasureTheory.Integrable.integral_norm_compProd ⦃f : β × γ → E⦄\n    (hf : Integrable f ((κ ⊗ₖ η) a)) : Integrable (fun x => ∫ y, ‖f (x, y)‖ ∂η (a, x)) (κ a) :=\n  ((integrable_compProd_iff hf.aestronglyMeasurable).mp hf).2\n\n"}
{"name":"MeasureTheory.Integrable.integral_compProd","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\n⊢ MeasureTheory.Integrable (fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (κ a)","decl":"theorem _root_.MeasureTheory.Integrable.integral_compProd [NormedSpace ℝ E]\n    ⦃f : β × γ → E⦄ (hf : Integrable f ((κ ⊗ₖ η) a)) :\n    Integrable (fun x => ∫ y, f (x, y) ∂η (a, x)) (κ a) :=\n  Integrable.mono hf.integral_norm_compProd hf.aestronglyMeasurable.integral_kernel_compProd <|\n    Eventually.of_forall fun x =>\n      (norm_integral_le_integral_norm _).trans_eq <|\n        (norm_of_nonneg <|\n            integral_nonneg_of_ae <|\n              Eventually.of_forall fun y => (norm_nonneg (f (x, y)) :)).symm\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_fn_integral_add","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝⁵ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝⁴ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝³ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝² : NormedSpace Real E\nE' : Type u_5\ninst✝¹ : NormedAddCommGroup E'\ninst✝ : NormedSpace Real E'\nf g : Prod β γ → E\nF : E → E'\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (κ a) fun x => F (MeasureTheory.integral (η { fst := a, snd := x }) fun y => HAdd.hAdd (f { fst := x, snd := y }) (g { fst := x, snd := y }))) (MeasureTheory.integral (κ a) fun x => F (HAdd.hAdd (MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y })))","decl":"theorem Kernel.integral_fn_integral_add ⦃f g : β × γ → E⦄ (F : E → E')\n    (hf : Integrable f ((κ ⊗ₖ η) a)) (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫ x, F (∫ y, f (x, y) + g (x, y) ∂η (a, x)) ∂κ a =\n      ∫ x, F (∫ y, f (x, y) ∂η (a, x) + ∫ y, g (x, y) ∂η (a, x)) ∂κ a := by\n  refine integral_congr_ae ?_\n  filter_upwards [hf.compProd_mk_left_ae, hg.compProd_mk_left_ae] with _ h2f h2g\n  simp [integral_add h2f h2g]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_fn_integral_sub","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝⁵ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝⁴ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝³ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝² : NormedSpace Real E\nE' : Type u_5\ninst✝¹ : NormedAddCommGroup E'\ninst✝ : NormedSpace Real E'\nf g : Prod β γ → E\nF : E → E'\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (κ a) fun x => F (MeasureTheory.integral (η { fst := a, snd := x }) fun y => HSub.hSub (f { fst := x, snd := y }) (g { fst := x, snd := y }))) (MeasureTheory.integral (κ a) fun x => F (HSub.hSub (MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y })))","decl":"theorem Kernel.integral_fn_integral_sub ⦃f g : β × γ → E⦄ (F : E → E')\n    (hf : Integrable f ((κ ⊗ₖ η) a)) (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫ x, F (∫ y, f (x, y) - g (x, y) ∂η (a, x)) ∂κ a =\n      ∫ x, F (∫ y, f (x, y) ∂η (a, x) - ∫ y, g (x, y) ∂η (a, x)) ∂κ a := by\n  refine integral_congr_ae ?_\n  filter_upwards [hf.compProd_mk_left_ae, hg.compProd_mk_left_ae] with _ h2f h2g\n  simp [integral_sub h2f h2g]\n\n"}
{"name":"ProbabilityTheory.Kernel.lintegral_fn_integral_sub","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf g : Prod β γ → E\nF : E → ENNReal\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.lintegral (κ a) fun x => F (MeasureTheory.integral (η { fst := a, snd := x }) fun y => HSub.hSub (f { fst := x, snd := y }) (g { fst := x, snd := y }))) (MeasureTheory.lintegral (κ a) fun x => F (HSub.hSub (MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y })))","decl":"theorem Kernel.lintegral_fn_integral_sub ⦃f g : β × γ → E⦄ (F : E → ℝ≥0∞)\n    (hf : Integrable f ((κ ⊗ₖ η) a)) (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫⁻ x, F (∫ y, f (x, y) - g (x, y) ∂η (a, x)) ∂κ a =\n      ∫⁻ x, F (∫ y, f (x, y) ∂η (a, x) - ∫ y, g (x, y) ∂η (a, x)) ∂κ a := by\n  refine lintegral_congr_ae ?_\n  filter_upwards [hf.compProd_mk_left_ae, hg.compProd_mk_left_ae] with _ h2f h2g\n  simp [integral_sub h2f h2g]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_integral_add","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf g : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => HAdd.hAdd (f { fst := x, snd := y }) (g { fst := x, snd := y })) (HAdd.hAdd (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y }))","decl":"theorem Kernel.integral_integral_add ⦃f g : β × γ → E⦄ (hf : Integrable f ((κ ⊗ₖ η) a))\n    (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫ x, ∫ y, f (x, y) + g (x, y) ∂η (a, x) ∂κ a =\n      ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a + ∫ x, ∫ y, g (x, y) ∂η (a, x) ∂κ a :=\n  (Kernel.integral_fn_integral_add id hf hg).trans <|\n    integral_add hf.integral_compProd hg.integral_compProd\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_integral_add'","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf g : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => HAdd.hAdd f g { fst := x, snd := y }) (HAdd.hAdd (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y }))","decl":"theorem Kernel.integral_integral_add' ⦃f g : β × γ → E⦄ (hf : Integrable f ((κ ⊗ₖ η) a))\n    (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫ x, ∫ y, (f + g) (x, y) ∂η (a, x) ∂κ a =\n      ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a + ∫ x, ∫ y, g (x, y) ∂η (a, x) ∂κ a :=\n  Kernel.integral_integral_add hf hg\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_integral_sub","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf g : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => HSub.hSub (f { fst := x, snd := y }) (g { fst := x, snd := y })) (HSub.hSub (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y }))","decl":"theorem Kernel.integral_integral_sub ⦃f g : β × γ → E⦄ (hf : Integrable f ((κ ⊗ₖ η) a))\n    (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫ x, ∫ y, f (x, y) - g (x, y) ∂η (a, x) ∂κ a =\n      ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a - ∫ x, ∫ y, g (x, y) ∂η (a, x) ∂κ a :=\n  (Kernel.integral_fn_integral_sub id hf hg).trans <|\n    integral_sub hf.integral_compProd hg.integral_compProd\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_integral_sub'","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf g : Prod β γ → E\nhf : MeasureTheory.Integrable f ((κ.compProd η) a)\nhg : MeasureTheory.Integrable g ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => HSub.hSub f g { fst := x, snd := y }) (HSub.hSub (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y }) (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => g { fst := x, snd := y }))","decl":"theorem Kernel.integral_integral_sub' ⦃f g : β × γ → E⦄ (hf : Integrable f ((κ ⊗ₖ η) a))\n    (hg : Integrable g ((κ ⊗ₖ η) a)) :\n    ∫ x, ∫ y, (f - g) (x, y) ∂η (a, x) ∂κ a =\n      ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a - ∫ x, ∫ y, g (x, y) ∂η (a, x) ∂κ a :=\n  Kernel.integral_integral_sub hf hg\n\n-- Porting note: couldn't get the `→₁[]` syntax to work\n"}
{"name":"ProbabilityTheory.Kernel.continuous_integral_integral","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\n⊢ Continuous fun f => MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => ↑↑f { fst := x, snd := y }","decl":"theorem Kernel.continuous_integral_integral :\n    -- Continuous fun f : α × β →₁[(κ ⊗ₖ η) a] E => ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a := by\n    Continuous fun f : (MeasureTheory.Lp (α := β × γ) E 1 (((κ ⊗ₖ η) a) : Measure (β × γ))) =>\n        ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a := by\n  rw [continuous_iff_continuousAt]; intro g\n  refine\n    tendsto_integral_of_L1 _ (L1.integrable_coeFn g).integral_compProd\n      (Eventually.of_forall fun h => (L1.integrable_coeFn h).integral_compProd) ?_\n  simp_rw [← lintegral_fn_integral_sub (‖·‖ₑ) (L1.integrable_coeFn _) (L1.integrable_coeFn g)]\n  apply tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds _ (fun i => zero_le _) _\n  · exact fun i => ∫⁻ x, ∫⁻ y, ‖i (x, y) - g (x, y)‖ₑ ∂η (a, x) ∂κ a\n  swap; · exact fun i => lintegral_mono fun x => enorm_integral_le_lintegral_enorm _\n  show\n    Tendsto\n      (fun i : β × γ →₁[(κ ⊗ₖ η) a] E => ∫⁻ x, ∫⁻ y : γ, ‖i (x, y) - g (x, y)‖ₑ ∂η (a, x) ∂κ a)\n      (𝓝 g) (𝓝 0)\n  have this (i : Lp (α := β × γ) E 1 (((κ ⊗ₖ η) a) : Measure (β × γ))) :\n      Measurable fun z => ‖i z - g z‖ₑ :=\n    ((Lp.stronglyMeasurable i).sub (Lp.stronglyMeasurable g)).enorm\n  simp_rw [← lintegral_compProd _ _ _ (this _), ← L1.ofReal_norm_sub_eq_lintegral, ← ofReal_zero]\n  refine (continuous_ofReal.tendsto 0).comp ?_\n  rw [← tendsto_iff_norm_sub_tendsto_zero]\n  exact tendsto_id\n\n"}
{"name":"ProbabilityTheory.integral_compProd","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf : Prod β γ → E\nx✝ : MeasureTheory.Integrable f ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral ((κ.compProd η) a) fun z => f z) (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y })","decl":"theorem integral_compProd :\n    ∀ {f : β × γ → E} (_ : Integrable f ((κ ⊗ₖ η) a)),\n      ∫ z, f z ∂(κ ⊗ₖ η) a = ∫ x, ∫ y, f (x, y) ∂η (a, x) ∂κ a := by\n  by_cases hE : CompleteSpace E; swap\n  · simp [integral, hE]\n  apply Integrable.induction\n  · intro c s hs h2s\n    simp_rw [integral_indicator hs, ← indicator_comp_right, Function.comp_def,\n      integral_indicator (measurable_prod_mk_left hs), MeasureTheory.setIntegral_const,\n      integral_smul_const]\n    congr 1\n    rw [integral_toReal]\n    rotate_left\n    · exact (Kernel.measurable_kernel_prod_mk_left' hs _).aemeasurable\n    · exact ae_kernel_lt_top a h2s.ne\n    rw [Kernel.compProd_apply hs]\n    rfl\n  · intro f g _ i_f i_g hf hg\n    simp_rw [integral_add' i_f i_g, Kernel.integral_integral_add' i_f i_g, hf, hg]\n  · exact isClosed_eq continuous_integral Kernel.continuous_integral_integral\n  · intro f g hfg _ hf\n    convert hf using 1\n    · exact integral_congr_ae hfg.symm\n    · apply integral_congr_ae\n      filter_upwards [ae_ae_of_ae_compProd hfg] with x hfgx using\n        integral_congr_ae (ae_eq_symm hfgx)\n\n"}
{"name":"ProbabilityTheory.setIntegral_compProd","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf : Prod β γ → E\ns : Set β\nt : Set γ\nhs : MeasurableSet s\nht : MeasurableSet t\nhf : MeasureTheory.IntegrableOn f (SProd.sprod s t) ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (((κ.compProd η) a).restrict (SProd.sprod s t)) fun z => f z) (MeasureTheory.integral ((κ a).restrict s) fun x => MeasureTheory.integral ((η { fst := a, snd := x }).restrict t) fun y => f { fst := x, snd := y })","decl":"theorem setIntegral_compProd {f : β × γ → E} {s : Set β} {t : Set γ} (hs : MeasurableSet s)\n    (ht : MeasurableSet t) (hf : IntegrableOn f (s ×ˢ t) ((κ ⊗ₖ η) a)) :\n    ∫ z in s ×ˢ t, f z ∂(κ ⊗ₖ η) a = ∫ x in s, ∫ y in t, f (x, y) ∂η (a, x) ∂κ a := by\n  -- Porting note: `compProd_restrict` needed some explicit arguments\n  rw [← Kernel.restrict_apply (κ ⊗ₖ η) (hs.prod ht), ← compProd_restrict hs ht, integral_compProd]\n  · simp_rw [Kernel.restrict_apply]\n  · rw [compProd_restrict, Kernel.restrict_apply]; exact hf\n\n"}
{"name":"ProbabilityTheory.setIntegral_compProd_univ_right","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf : Prod β γ → E\ns : Set β\nhs : MeasurableSet s\nhf : MeasureTheory.IntegrableOn f (SProd.sprod s Set.univ) ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (((κ.compProd η) a).restrict (SProd.sprod s Set.univ)) fun z => f z) (MeasureTheory.integral ((κ a).restrict s) fun x => MeasureTheory.integral (η { fst := a, snd := x }) fun y => f { fst := x, snd := y })","decl":"theorem setIntegral_compProd_univ_right (f : β × γ → E) {s : Set β} (hs : MeasurableSet s)\n    (hf : IntegrableOn f (s ×ˢ univ) ((κ ⊗ₖ η) a)) :\n    ∫ z in s ×ˢ univ, f z ∂(κ ⊗ₖ η) a = ∫ x in s, ∫ y, f (x, y) ∂η (a, x) ∂κ a := by\n  simp_rw [setIntegral_compProd hs MeasurableSet.univ hf, Measure.restrict_univ]\n\n"}
{"name":"ProbabilityTheory.setIntegral_compProd_univ_left","module":"Mathlib.Probability.Kernel.Composition.IntegralCompProd","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nE : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\ninst✝³ : NormedAddCommGroup E\nκ : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel (Prod α β) γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\na : α\ninst✝ : NormedSpace Real E\nf : Prod β γ → E\nt : Set γ\nht : MeasurableSet t\nhf : MeasureTheory.IntegrableOn f (SProd.sprod Set.univ t) ((κ.compProd η) a)\n⊢ Eq (MeasureTheory.integral (((κ.compProd η) a).restrict (SProd.sprod Set.univ t)) fun z => f z) (MeasureTheory.integral (κ a) fun x => MeasureTheory.integral ((η { fst := a, snd := x }).restrict t) fun y => f { fst := x, snd := y })","decl":"theorem setIntegral_compProd_univ_left (f : β × γ → E) {t : Set γ} (ht : MeasurableSet t)\n    (hf : IntegrableOn f (univ ×ˢ t) ((κ ⊗ₖ η) a)) :\n    ∫ z in univ ×ˢ t, f z ∂(κ ⊗ₖ η) a = ∫ x, ∫ y in t, f (x, y) ∂η (a, x) ∂κ a := by\n  simp_rw [setIntegral_compProd MeasurableSet.univ ht hf, Measure.restrict_univ]\n\n"}
