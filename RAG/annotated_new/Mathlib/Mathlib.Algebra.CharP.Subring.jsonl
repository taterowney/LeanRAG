{"name":"CharP.subsemiring","module":"Mathlib.Algebra.CharP.Subring","initialProofState":"R : Type u\ninst✝¹ : Semiring R\np : Nat\ninst✝ : CharP R p\nS : Subsemiring R\n⊢ CharP (Subtype fun x => Membership.mem S x) p","decl":"instance subsemiring (R : Type u) [Semiring R] (p : ℕ) [CharP R p] (S : Subsemiring R) :\n    CharP S p :=\n  ⟨fun x =>\n    Iff.symm <|\n      (CharP.cast_eq_zero_iff R p x).symm.trans\n        ⟨fun h => Subtype.eq <| show S.subtype x = 0 by rw [map_natCast, h], fun h =>\n          map_natCast S.subtype x ▸ by rw [h, RingHom.map_zero]⟩⟩\n\n"}
{"name":"CharP.subring","module":"Mathlib.Algebra.CharP.Subring","initialProofState":"R : Type u\ninst✝¹ : Ring R\np : Nat\ninst✝ : CharP R p\nS : Subring R\n⊢ CharP (Subtype fun x => Membership.mem S x) p","decl":"instance subring (R : Type u) [Ring R] (p : ℕ) [CharP R p] (S : Subring R) : CharP S p :=\n  ⟨fun x =>\n    Iff.symm <|\n      (CharP.cast_eq_zero_iff R p x).symm.trans\n        ⟨fun h => Subtype.eq <| show S.subtype x = 0 by rw [map_natCast, h], fun h =>\n          map_natCast S.subtype x ▸ by rw [h, RingHom.map_zero]⟩⟩\n\n"}
{"name":"CharP.subring'","module":"Mathlib.Algebra.CharP.Subring","initialProofState":"R : Type u\ninst✝¹ : CommRing R\np : Nat\ninst✝ : CharP R p\nS : Subring R\n⊢ CharP (Subtype fun x => Membership.mem S x) p","decl":"instance subring' (R : Type u) [CommRing R] (p : ℕ) [CharP R p] (S : Subring R) : CharP S p :=\n  CharP.subring R p S\n\n"}
{"name":"CharP.charP_center_iff","module":"Mathlib.Algebra.CharP.Subring","initialProofState":"R : Type u\ninst✝ : Ring R\np : Nat\n⊢ Iff (CharP (Subtype fun x => Membership.mem (Subring.center R) x) p) (CharP R p)","decl":"/-- The characteristic of a division ring is equal to the characteristic\n  of its center-/\ntheorem charP_center_iff {R : Type u} [Ring R] {p : ℕ} :\n    CharP (Subring.center R) p ↔ CharP R p :=\n  (algebraMap (Subring.center R) R).charP_iff Subtype.val_injective p\n\n"}
{"name":"ExpChar.expChar_center_iff","module":"Mathlib.Algebra.CharP.Subring","initialProofState":"R : Type u\ninst✝ : Ring R\np : Nat\n⊢ Iff (ExpChar (Subtype fun x => Membership.mem (Subring.center R) x) p) (ExpChar R p)","decl":"theorem expChar_center_iff {R : Type u} [Ring R] {p : ℕ} :\n    ExpChar (Subring.center R) p ↔ ExpChar R p :=\n  (algebraMap (Subring.center R) R).expChar_iff Subtype.val_injective p\n\n"}
