{"name":"ModuleCat.MonoidalCategory.tensor_id","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\nN : ModuleCat R\n‚ä¢ Eq (ModuleCat.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id M) (CategoryTheory.CategoryStruct.id N)) (CategoryTheory.CategoryStruct.id (ModuleCat.of R (TensorProduct R ‚ÜëM ‚ÜëN)))","decl":"theorem tensor_id (M N : ModuleCat R) : tensorHom (ùüô M) (ùüô N) = ùüô (ModuleCat.of R (M ‚äó N)) := by\n  ext : 1\n  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): even with high priority `ext` fails to find this.\n  apply TensorProduct.ext\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.tensor_comp","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚ÇÅ Y‚ÇÅ Z‚ÇÅ : ModuleCat R\nX‚ÇÇ Y‚ÇÇ Z‚ÇÇ : ModuleCat R\nf‚ÇÅ : Quiver.Hom X‚ÇÅ Y‚ÇÅ\nf‚ÇÇ : Quiver.Hom X‚ÇÇ Y‚ÇÇ\ng‚ÇÅ : Quiver.Hom Y‚ÇÅ Z‚ÇÅ\ng‚ÇÇ : Quiver.Hom Y‚ÇÇ Z‚ÇÇ\n‚ä¢ Eq (ModuleCat.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.comp f‚ÇÅ g‚ÇÅ) (CategoryTheory.CategoryStruct.comp f‚ÇÇ g‚ÇÇ)) (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.tensorHom f‚ÇÅ f‚ÇÇ) (ModuleCat.MonoidalCategory.tensorHom g‚ÇÅ g‚ÇÇ))","decl":"theorem tensor_comp {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ)\n    (g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) : tensorHom (f‚ÇÅ ‚â´ g‚ÇÅ) (f‚ÇÇ ‚â´ g‚ÇÇ) = tensorHom f‚ÇÅ f‚ÇÇ ‚â´ tensorHom g‚ÇÅ g‚ÇÇ := by\n  ext : 1\n  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): even with high priority `ext` fails to find this.\n  apply TensorProduct.ext\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_rightUnitor","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.rightUnitor M) (ModuleCat.MonoidalCategory.rightUnitor M)","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_tensorHom","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚ÇÅ‚úù Y‚ÇÅ‚úù X‚ÇÇ‚úù Y‚ÇÇ‚úù : ModuleCat R\nf : Quiver.Hom X‚ÇÅ‚úù Y‚ÇÅ‚úù\ng : Quiver.Hom X‚ÇÇ‚úù Y‚ÇÇ‚úù\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.tensorHom f g) (ModuleCat.ofHom (TensorProduct.map (ModuleCat.Hom.hom f) (ModuleCat.Hom.hom g)))","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_tensorUnit_isModule","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ Eq CategoryTheory.MonoidalCategoryStruct.tensorUnit.isModule Semiring.toModule","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_whiskerRight","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚ÇÅ‚úù X‚ÇÇ‚úù : ModuleCat R\nf : Quiver.Hom X‚ÇÅ‚úù X‚ÇÇ‚úù\nN : ModuleCat R\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.whiskerRight f N) (ModuleCat.MonoidalCategory.whiskerRight f N)","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_associator","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N K : ModuleCat R\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.associator M N K) (ModuleCat.MonoidalCategory.associator M N K)","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_tensorUnit_isAddCommGroup","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ Eq CategoryTheory.MonoidalCategoryStruct.tensorUnit.isAddCommGroup Ring.toAddCommGroup","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_leftUnitor","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.leftUnitor M) (ModuleCat.MonoidalCategory.leftUnitor M)","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_tensorUnit_carrier","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ Eq (‚ÜëCategoryTheory.MonoidalCategoryStruct.tensorUnit) R","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_tensorObj","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : ModuleCat R\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.tensorObj M N) (ModuleCat.MonoidalCategory.tensorObj M N)","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.instMonoidalCategoryStruct_whiskerLeft","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N‚ÇÅ N‚ÇÇ : ModuleCat R\nf : Quiver.Hom N‚ÇÅ N‚ÇÇ\n‚ä¢ Eq (CategoryTheory.MonoidalCategoryStruct.whiskerLeft M f) (ModuleCat.MonoidalCategory.whiskerLeft M f)","decl":"@[simps (config := .lemmasOnly)]\ninstance instMonoidalCategoryStruct : MonoidalCategoryStruct (ModuleCat.{u} R) where\n  tensorObj := tensorObj\n  whiskerLeft := whiskerLeft\n  whiskerRight := whiskerRight\n  tensorHom f g := ofHom <| TensorProduct.map f.hom g.hom\n  tensorUnit := ModuleCat.of R R\n  associator := associator\n  leftUnitor := leftUnitor\n  rightUnitor := rightUnitor\n\n"}
{"name":"ModuleCat.MonoidalCategory.associator_naturality","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚ÇÅ : ModuleCat R\nX‚ÇÇ : ModuleCat R\nX‚ÇÉ : ModuleCat R\nY‚ÇÅ : ModuleCat R\nY‚ÇÇ : ModuleCat R\nY‚ÇÉ : ModuleCat R\nf‚ÇÅ : Quiver.Hom X‚ÇÅ Y‚ÇÅ\nf‚ÇÇ : Quiver.Hom X‚ÇÇ Y‚ÇÇ\nf‚ÇÉ : Quiver.Hom X‚ÇÉ Y‚ÇÉ\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.tensorHom (ModuleCat.MonoidalCategory.tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ) (ModuleCat.MonoidalCategory.associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom) (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom (ModuleCat.MonoidalCategory.tensorHom f‚ÇÅ (ModuleCat.MonoidalCategory.tensorHom f‚ÇÇ f‚ÇÉ)))","decl":"theorem associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : ModuleCat R} (f‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ)\n    (f‚ÇÉ : X‚ÇÉ ‚ü∂ Y‚ÇÉ) :\n    tensorHom (tensorHom f‚ÇÅ f‚ÇÇ) f‚ÇÉ ‚â´ (associator Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ).hom =\n      (associator X‚ÇÅ X‚ÇÇ X‚ÇÉ).hom ‚â´ tensorHom f‚ÇÅ (tensorHom f‚ÇÇ f‚ÇÉ) := by\n  ext : 1\n  apply TensorProduct.ext_threefold\n  intro x y z\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.pentagon","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nW : ModuleCat R\nX : ModuleCat R\nY : ModuleCat R\nZ : ModuleCat R\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.whiskerRight (ModuleCat.MonoidalCategory.associator W X Y).hom Z) (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.associator W (ModuleCat.MonoidalCategory.tensorObj X Y) Z).hom (ModuleCat.MonoidalCategory.whiskerLeft W (ModuleCat.MonoidalCategory.associator X Y Z).hom))) (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.associator (ModuleCat.MonoidalCategory.tensorObj W X) Y Z).hom (ModuleCat.MonoidalCategory.associator W X (ModuleCat.MonoidalCategory.tensorObj Y Z)).hom)","decl":"theorem pentagon (W X Y Z : ModuleCat R) :\n    whiskerRight (associator W X Y).hom Z ‚â´\n        (associator W (tensorObj X Y) Z).hom ‚â´ whiskerLeft W (associator X Y Z).hom =\n      (associator (tensorObj W X) Y Z).hom ‚â´ (associator W X (tensorObj Y Z)).hom := by\n  ext : 1\n  apply TensorProduct.ext_fourfold\n  intro w x y z\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.leftUnitor_naturality","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : ModuleCat R\nf : Quiver.Hom M N\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id (ModuleCat.of R R)) f) (ModuleCat.MonoidalCategory.leftUnitor N).hom) (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.leftUnitor M).hom f)","decl":"theorem leftUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :\n    tensorHom (ùüô (ModuleCat.of R R)) f ‚â´ (leftUnitor N).hom = (leftUnitor M).hom ‚â´ f := by\n  ext : 1\n  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): broken ext\n  apply TensorProduct.ext\n  ext x\n  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/10934): used to be dsimp\n  change ((leftUnitor N).hom) ((tensorHom (ùüô (of R R)) f) ((1 : R) ‚äó‚Çú[R] x)) =\n    f (((leftUnitor M).hom) (1 ‚äó‚Çú[R] x))\n  erw [TensorProduct.lid_tmul, TensorProduct.lid_tmul]\n  rw [LinearMap.map_smul]\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.rightUnitor_naturality","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : ModuleCat R\nf : Quiver.Hom M N\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.tensorHom f (CategoryTheory.CategoryStruct.id (ModuleCat.of R R))) (ModuleCat.MonoidalCategory.rightUnitor N).hom) (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.rightUnitor M).hom f)","decl":"theorem rightUnitor_naturality {M N : ModuleCat R} (f : M ‚ü∂ N) :\n    tensorHom f (ùüô (ModuleCat.of R R)) ‚â´ (rightUnitor N).hom = (rightUnitor M).hom ‚â´ f := by\n  ext : 1\n  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/11041): broken ext\n  apply TensorProduct.ext\n  ext x\n  dsimp\n  erw [TensorProduct.rid_tmul, TensorProduct.rid_tmul]\n  rw [LinearMap.map_smul]\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.triangle","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : ModuleCat R\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (ModuleCat.MonoidalCategory.associator M (ModuleCat.of R R) N).hom (ModuleCat.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id M) (ModuleCat.MonoidalCategory.leftUnitor N).hom)) (ModuleCat.MonoidalCategory.tensorHom (ModuleCat.MonoidalCategory.rightUnitor M).hom (CategoryTheory.CategoryStruct.id N))","decl":"theorem triangle (M N : ModuleCat.{u} R) :\n    (associator M (ModuleCat.of R R) N).hom ‚â´ tensorHom (ùüô M) (leftUnitor N).hom =\n      tensorHom (rightUnitor M).hom (ùüô N) := by\n  ext : 1\n  apply TensorProduct.ext_threefold\n  intro x y z\n  -- Porting note (https://github.com/leanprover-community/mathlib4/pull/10934): used to be dsimp [tensorHom, associator]\n  change x ‚äó‚Çú[R] ((leftUnitor N).hom) (y ‚äó‚Çú[R] z) = ((rightUnitor M).hom) (x ‚äó‚Çú[R] y) ‚äó‚Çú[R] z\n  erw [TensorProduct.lid_tmul, TensorProduct.rid_tmul]\n  exact (TensorProduct.smul_tmul _ _ _).symm\n\n"}
{"name":"ModuleCat.MonoidalCategory.tensorHom_tmul","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nK L M N : ModuleCat R\nf : Quiver.Hom K L\ng : Quiver.Hom M N\nk : ‚ÜëK\nm : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.tensorHom f g)) (TensorProduct.tmul R k m)) (TensorProduct.tmul R ((CategoryTheory.ConcreteCategory.hom f) k) ((CategoryTheory.ConcreteCategory.hom g) m))","decl":"@[simp]\ntheorem tensorHom_tmul {K L M N : ModuleCat.{u} R} (f : K ‚ü∂ L) (g : M ‚ü∂ N) (k : K) (m : M) :\n    (f ‚äó g) (k ‚äó‚Çú m) = f k ‚äó‚Çú g m :=\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.hom_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nK L M N : ModuleCat R\nf : Quiver.Hom K L\ng : Quiver.Hom M N\nk : ‚ÜëK\nm : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.tensorHom f g)) (TensorProduct.tmul R k m)) (TensorProduct.tmul R ((CategoryTheory.ConcreteCategory.hom f) k) ((CategoryTheory.ConcreteCategory.hom g) m))","decl":"@[deprecated (since := \"2024-09-30\")] alias hom_apply := tensorHom_tmul\n\n\n"}
{"name":"ModuleCat.MonoidalCategory.whiskerLeft_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nL M N : ModuleCat R\nf : Quiver.Hom M N\nl : ‚ÜëL\nm : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.whiskerLeft L f)) (TensorProduct.tmul R l m)) (TensorProduct.tmul R l ((CategoryTheory.ConcreteCategory.hom f) m))","decl":"@[simp]\ntheorem whiskerLeft_apply (L : ModuleCat.{u} R) {M N : ModuleCat.{u} R} (f : M ‚ü∂ N)\n    (l : L) (m : M) :\n    (L ‚óÅ f) (l ‚äó‚Çú m) = l ‚äó‚Çú f m :=\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.whiskerRight_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nL M : ModuleCat R\nf : Quiver.Hom L M\nN : ModuleCat R\nl : ‚ÜëL\nn : ‚ÜëN\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.whiskerRight f N)) (TensorProduct.tmul R l n)) (TensorProduct.tmul R ((CategoryTheory.ConcreteCategory.hom f) l) n)","decl":"@[simp]\ntheorem whiskerRight_apply {L M : ModuleCat.{u} R} (f : L ‚ü∂ M) (N : ModuleCat.{u} R)\n    (l : L) (n : N) :\n    (f ‚ñ∑ N) (l ‚äó‚Çú n) = f l ‚äó‚Çú n :=\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.leftUnitor_hom_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\nr : R\nm : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.leftUnitor M).hom) (TensorProduct.tmul R r m)) (HSMul.hSMul r m)","decl":"@[simp]\ntheorem leftUnitor_hom_apply {M : ModuleCat.{u} R} (r : R) (m : M) :\n    ((Œª_ M).hom : ùüô_ (ModuleCat R) ‚äó M ‚ü∂ M) (r ‚äó‚Çú[R] m) = r ‚Ä¢ m :=\n  TensorProduct.lid_tmul m r\n\n"}
{"name":"ModuleCat.MonoidalCategory.leftUnitor_inv_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\nm : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.leftUnitor M).inv) m) (TensorProduct.tmul R 1 m)","decl":"@[simp]\ntheorem leftUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :\n    ((Œª_ M).inv : M ‚ü∂ ùüô_ (ModuleCat.{u} R) ‚äó M) m = 1 ‚äó‚Çú[R] m :=\n  TensorProduct.lid_symm_apply m\n\n"}
{"name":"ModuleCat.MonoidalCategory.rightUnitor_hom_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\nm : ‚ÜëM\nr : R\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.rightUnitor M).hom) (TensorProduct.tmul R m r)) (HSMul.hSMul r m)","decl":"@[simp]\ntheorem rightUnitor_hom_apply {M : ModuleCat.{u} R} (m : M) (r : R) :\n    ((œÅ_ M).hom : M ‚äó ùüô_ (ModuleCat R) ‚ü∂ M) (m ‚äó‚Çú r) = r ‚Ä¢ m :=\n  TensorProduct.rid_tmul m r\n\n"}
{"name":"ModuleCat.MonoidalCategory.rightUnitor_inv_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : ModuleCat R\nm : ‚ÜëM\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.rightUnitor M).inv) m) (TensorProduct.tmul R m 1)","decl":"@[simp]\ntheorem rightUnitor_inv_apply {M : ModuleCat.{u} R} (m : M) :\n    ((œÅ_ M).inv : M ‚ü∂ M ‚äó ùüô_ (ModuleCat.{u} R)) m = m ‚äó‚Çú[R] 1 :=\n  TensorProduct.rid_symm_apply m\n\n"}
{"name":"ModuleCat.MonoidalCategory.associator_hom_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N K : ModuleCat R\nm : ‚ÜëM\nn : ‚ÜëN\nk : ‚ÜëK\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.associator M N K).hom) (TensorProduct.tmul R (TensorProduct.tmul R m n) k)) (TensorProduct.tmul R m (TensorProduct.tmul R n k))","decl":"@[simp]\ntheorem associator_hom_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :\n    ((Œ±_ M N K).hom : (M ‚äó N) ‚äó K ‚ü∂ M ‚äó N ‚äó K) (m ‚äó‚Çú n ‚äó‚Çú k) = m ‚äó‚Çú (n ‚äó‚Çú k) :=\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.associator_inv_apply","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N K : ModuleCat R\nm : ‚ÜëM\nn : ‚ÜëN\nk : ‚ÜëK\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.MonoidalCategoryStruct.associator M N K).inv) (TensorProduct.tmul R m (TensorProduct.tmul R n k))) (TensorProduct.tmul R (TensorProduct.tmul R m n) k)","decl":"@[simp]\ntheorem associator_inv_apply {M N K : ModuleCat.{u} R} (m : M) (n : N) (k : K) :\n    ((Œ±_ M N K).inv : M ‚äó N ‚äó K ‚ü∂ (M ‚äó N) ‚äó K) (m ‚äó‚Çú (n ‚äó‚Çú k)) = m ‚äó‚Çú n ‚äó‚Çú k :=\n  rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.tensorLift_tmul","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM‚ÇÅ M‚ÇÇ M‚ÇÉ : ModuleCat R\nf : ‚ÜëM‚ÇÅ ‚Üí ‚ÜëM‚ÇÇ ‚Üí ‚ÜëM‚ÇÉ\nh‚ÇÅ : ‚àÄ (m‚ÇÅ m‚ÇÇ : ‚ÜëM‚ÇÅ) (n : ‚ÜëM‚ÇÇ), Eq (f (HAdd.hAdd m‚ÇÅ m‚ÇÇ) n) (HAdd.hAdd (f m‚ÇÅ n) (f m‚ÇÇ n))\nh‚ÇÇ : ‚àÄ (a : R) (m : ‚ÜëM‚ÇÅ) (n : ‚ÜëM‚ÇÇ), Eq (f (HSMul.hSMul a m) n) (HSMul.hSMul a (f m n))\nh‚ÇÉ : ‚àÄ (m : ‚ÜëM‚ÇÅ) (n‚ÇÅ n‚ÇÇ : ‚ÜëM‚ÇÇ), Eq (f m (HAdd.hAdd n‚ÇÅ n‚ÇÇ)) (HAdd.hAdd (f m n‚ÇÅ) (f m n‚ÇÇ))\nh‚ÇÑ : ‚àÄ (a : R) (m : ‚ÜëM‚ÇÅ) (n : ‚ÜëM‚ÇÇ), Eq (f m (HSMul.hSMul a n)) (HSMul.hSMul a (f m n))\nm : ‚ÜëM‚ÇÅ\nn : ‚ÜëM‚ÇÇ\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (ModuleCat.MonoidalCategory.tensorLift f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ)) (TensorProduct.tmul R m n)) (f m n)","decl":"@[simp]\nlemma tensorLift_tmul (m : M‚ÇÅ) (n : M‚ÇÇ) :\n    tensorLift f h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ (m ‚äó‚Çú n) = f m n := rfl\n\n"}
{"name":"ModuleCat.MonoidalCategory.tensor_ext","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM‚ÇÅ M‚ÇÇ M‚ÇÉ : ModuleCat R\nf g : Quiver.Hom (CategoryTheory.MonoidalCategoryStruct.tensorObj M‚ÇÅ M‚ÇÇ) M‚ÇÉ\nh : ‚àÄ (m : ‚ÜëM‚ÇÅ) (n : ‚ÜëM‚ÇÇ), Eq ((ModuleCat.Hom.hom f) (TensorProduct.tmul R m n)) ((ModuleCat.Hom.hom g) (TensorProduct.tmul R m n))\n‚ä¢ Eq f g","decl":"lemma tensor_ext {f g : M‚ÇÅ ‚äó M‚ÇÇ ‚ü∂ M‚ÇÉ} (h : ‚àÄ m n, f.hom (m ‚äó‚Çú n) = g.hom (m ‚äó‚Çú n)) :\n    f = g :=\n  hom_ext <| TensorProduct.ext (by ext; apply h)\n\n"}
{"name":"ModuleCat.MonoidalCategory.tensor_ext‚ÇÉ'","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ : ModuleCat R\nf g : Quiver.Hom (CategoryTheory.MonoidalCategoryStruct.tensorObj (CategoryTheory.MonoidalCategoryStruct.tensorObj M‚ÇÅ M‚ÇÇ) M‚ÇÉ) M‚ÇÑ\nh : ‚àÄ (m‚ÇÅ : ‚ÜëM‚ÇÅ) (m‚ÇÇ : ‚ÜëM‚ÇÇ) (m‚ÇÉ : ‚ÜëM‚ÇÉ), Eq ((CategoryTheory.ConcreteCategory.hom f) (TensorProduct.tmul R (TensorProduct.tmul R m‚ÇÅ m‚ÇÇ) m‚ÇÉ)) ((CategoryTheory.ConcreteCategory.hom g) (TensorProduct.tmul R (TensorProduct.tmul R m‚ÇÅ m‚ÇÇ) m‚ÇÉ))\n‚ä¢ Eq f g","decl":"/-- Extensionality lemma for morphisms from a module of the form `(M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ`. -/\nlemma tensor_ext‚ÇÉ' {f g : (M‚ÇÅ ‚äó M‚ÇÇ) ‚äó M‚ÇÉ ‚ü∂ M‚ÇÑ}\n    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ) = g (m‚ÇÅ ‚äó‚Çú m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) :\n    f = g :=\n  hom_ext <| TensorProduct.ext_threefold h\n\n"}
{"name":"ModuleCat.MonoidalCategory.tensor_ext‚ÇÉ","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM‚ÇÅ M‚ÇÇ M‚ÇÉ M‚ÇÑ : ModuleCat R\nf g : Quiver.Hom (CategoryTheory.MonoidalCategoryStruct.tensorObj M‚ÇÅ (CategoryTheory.MonoidalCategoryStruct.tensorObj M‚ÇÇ M‚ÇÉ)) M‚ÇÑ\nh : ‚àÄ (m‚ÇÅ : ‚ÜëM‚ÇÅ) (m‚ÇÇ : ‚ÜëM‚ÇÇ) (m‚ÇÉ : ‚ÜëM‚ÇÉ), Eq ((CategoryTheory.ConcreteCategory.hom f) (TensorProduct.tmul R m‚ÇÅ (TensorProduct.tmul R m‚ÇÇ m‚ÇÉ))) ((CategoryTheory.ConcreteCategory.hom g) (TensorProduct.tmul R m‚ÇÅ (TensorProduct.tmul R m‚ÇÇ m‚ÇÉ)))\n‚ä¢ Eq f g","decl":"/-- Extensionality lemma for morphisms from a module of the form `M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ)`. -/\nlemma tensor_ext‚ÇÉ {f g : M‚ÇÅ ‚äó (M‚ÇÇ ‚äó M‚ÇÉ) ‚ü∂ M‚ÇÑ}\n    (h : ‚àÄ m‚ÇÅ m‚ÇÇ m‚ÇÉ, f (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ)) = g (m‚ÇÅ ‚äó‚Çú (m‚ÇÇ ‚äó‚Çú m‚ÇÉ))) :\n    f = g := by\n  rw [‚Üê cancel_epi (Œ±_ _ _ _).hom]\n  exact tensor_ext‚ÇÉ' h\n\n"}
{"name":"ModuleCat.instMonoidalPreadditive","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ CategoryTheory.MonoidalPreadditive (ModuleCat R)","decl":"instance : MonoidalPreadditive (ModuleCat.{u} R) := by\n  refine ‚ü®?_, ?_, ?_, ?_‚ü©\n  ¬∑ intros\n    ext : 1\n    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)\n    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_zero, LinearMap.zero_apply]\n    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n    erw [MonoidalCategory.whiskerLeft_apply]\n    simp\n  ¬∑ intros\n    ext : 1\n    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)\n    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_zero, LinearMap.zero_apply, ]\n    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n    erw [MonoidalCategory.whiskerRight_apply]\n    simp\n  ¬∑ intros\n    ext : 1\n    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)\n    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_add, LinearMap.add_apply]\n    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n    erw [MonoidalCategory.whiskerLeft_apply, MonoidalCategory.whiskerLeft_apply]\n    erw [MonoidalCategory.whiskerLeft_apply]\n    simp [TensorProduct.tmul_add]\n  ¬∑ intros\n    ext : 1\n    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)\n    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_add, LinearMap.add_apply]\n    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n    erw [MonoidalCategory.whiskerRight_apply, MonoidalCategory.whiskerRight_apply]\n    erw [MonoidalCategory.whiskerRight_apply]\n    simp [TensorProduct.add_tmul]\n\n"}
{"name":"ModuleCat.instMonoidalLinear","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ CategoryTheory.MonoidalLinear R (ModuleCat R)","decl":"instance : MonoidalLinear R (ModuleCat.{u} R) := by\n  refine ‚ü®?_, ?_‚ü©\n  ¬∑ intros\n    ext : 1\n    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)\n    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_smul, LinearMap.smul_apply]\n    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n    erw [MonoidalCategory.whiskerLeft_apply, MonoidalCategory.whiskerLeft_apply]\n    simp\n  ¬∑ intros\n    ext : 1\n    refine TensorProduct.ext (LinearMap.ext fun x => LinearMap.ext fun y => ?_)\n    simp only [LinearMap.compr‚ÇÇ_apply, TensorProduct.mk_apply, hom_smul, LinearMap.smul_apply]\n    -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n    erw [MonoidalCategory.whiskerRight_apply, MonoidalCategory.whiskerRight_apply]\n    simp [TensorProduct.smul_tmul, TensorProduct.tmul_smul]\n\n"}
{"name":"ModuleCat.ofHom‚ÇÇ_compr‚ÇÇ","module":"Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N P Q : ModuleCat R\nf : LinearMap (RingHom.id R) (‚ÜëM) (LinearMap (RingHom.id R) ‚ÜëN ‚ÜëP)\ng : LinearMap (RingHom.id R) ‚ÜëP ‚ÜëQ\n‚ä¢ Eq (ModuleCat.ofHom‚ÇÇ (f.compr‚ÇÇ g)) (CategoryTheory.CategoryStruct.comp (ModuleCat.ofHom‚ÇÇ f) (ModuleCat.ofHom (CategoryTheory.Linear.rightComp R N (ModuleCat.ofHom g))))","decl":"@[simp] lemma ofHom‚ÇÇ_compr‚ÇÇ {M N P Q : ModuleCat.{u} R} (f : M ‚Üí‚Çó[R] N ‚Üí‚Çó[R] P) (g : P ‚Üí‚Çó[R] Q):\n    ofHom‚ÇÇ (f.compr‚ÇÇ g) = ofHom‚ÇÇ f ‚â´ ofHom (Linear.rightComp R _ (ofHom g)) := rfl\n\n"}
