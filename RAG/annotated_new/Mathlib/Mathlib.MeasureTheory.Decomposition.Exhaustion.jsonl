{"name":"MeasureTheory.measurableSet_sigmaFiniteSetWRT","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\n‚ä¢ MeasurableSet (Œº.sigmaFiniteSetWRT ŒΩ)","decl":"@[measurability]\nlemma measurableSet_sigmaFiniteSetWRT :\n    MeasurableSet (Œº.sigmaFiniteSetWRT ŒΩ) := by\n  rw [Measure.sigmaFiniteSetWRT]\n  split_ifs with h\n  ¬∑ exact h.choose_spec.1\n  ¬∑ exact MeasurableSet.empty\n\n"}
{"name":"MeasureTheory.instSigmaFiniteRestrictSigmaFiniteSetWRT","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\n‚ä¢ MeasureTheory.SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetWRT ŒΩ))","decl":"instance : SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetWRT ŒΩ)) := by\n  rw [Measure.sigmaFiniteSetWRT]\n  split_ifs with h\n  ¬∑ exact h.choose_spec.2.1\n  ¬∑ rw [Measure.restrict_empty]\n    infer_instance\n\n"}
{"name":"MeasureTheory.exists_isSigmaFiniteSet_measure_ge","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nn : Nat\n‚ä¢ Exists fun t => And (MeasurableSet t) (And (MeasureTheory.SigmaFinite (Œº.restrict t)) (LE.le (HSub.hSub (iSup fun s => iSup fun x => iSup fun x => ŒΩ s) (HDiv.hDiv 1 ‚Üën)) (ŒΩ t)))","decl":"/-- Let `C` be the supremum of `ŒΩ s` over all measurable sets `s` such that `Œº.restrict s` is\nsigma-finite. `C` is finite since `ŒΩ` is a finite measure. Then there exists a measurable set `t`\nwith `Œº.restrict t` sigma-finite such that `ŒΩ t ‚â• C - 1/n`. -/\nlemma exists_isSigmaFiniteSet_measure_ge (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :\n    ‚àÉ t, MeasurableSet t ‚àß SigmaFinite (Œº.restrict t)\n      ‚àß (‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s) - 1/n ‚â§ ŒΩ t := by\n  by_cases hC_lt : 1/n < ‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s\n  ¬∑ have h_lt_top : ‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s < ‚àû := by\n      refine (?_ : ‚®Ü (s) (_ : MeasurableSet s)\n        (_ : SigmaFinite (Œº.restrict s)), ŒΩ s ‚â§ ŒΩ Set.univ).trans_lt (measure_lt_top _ _)\n      refine iSup_le (fun s ‚Ü¶ ?_)\n      exact iSup_le (fun _ ‚Ü¶ iSup_le (fun _ ‚Ü¶ measure_mono (Set.subset_univ s)))\n    obtain ‚ü®t, ht‚ü© := exists_lt_of_lt_ciSup\n      (ENNReal.sub_lt_self h_lt_top.ne (ne_zero_of_lt hC_lt) (by simp) :\n          (‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s) - 1/n\n        < ‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s)\n    have ht_meas : MeasurableSet t := by\n      by_contra h_not_mem\n      simp only [h_not_mem] at ht\n      simp at ht\n    have ht_mem : SigmaFinite (Œº.restrict t) := by\n      by_contra h_not_mem\n      simp only [h_not_mem] at ht\n      simp at ht\n    refine ‚ü®t, ht_meas, ht_mem, ?_‚ü©\n    simp only [ht_meas, ht_mem, iSup_true] at ht\n    exact ht.le\n  ¬∑ refine ‚ü®‚àÖ, MeasurableSet.empty, by rw [Measure.restrict_empty]; infer_instance, ?_‚ü©\n    rw [tsub_eq_zero_of_le (not_lt.mp hC_lt)]\n    exact zero_le'\n\n"}
{"name":"MeasureTheory.measurableSet_sigmaFiniteSetGE","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nn : Nat\n‚ä¢ MeasurableSet (Œº.sigmaFiniteSetGE ŒΩ n)","decl":"lemma measurableSet_sigmaFiniteSetGE [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :\n    MeasurableSet (Œº.sigmaFiniteSetGE ŒΩ n) :=\n  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose_spec.1\n\n"}
{"name":"MeasureTheory.sigmaFinite_restrict_sigmaFiniteSetGE","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nn : Nat\n‚ä¢ MeasureTheory.SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ n))","decl":"lemma sigmaFinite_restrict_sigmaFiniteSetGE (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :\n    SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ n)) :=\n  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose_spec.2.1\n\n"}
{"name":"MeasureTheory.measure_sigmaFiniteSetGE_le","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nn : Nat\n‚ä¢ LE.le (ŒΩ (Œº.sigmaFiniteSetGE ŒΩ n)) (iSup fun s => iSup fun x => iSup fun x => ŒΩ s)","decl":"lemma measure_sigmaFiniteSetGE_le (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :\n    ŒΩ (Œº.sigmaFiniteSetGE ŒΩ n)\n      ‚â§ ‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s := by\n  refine (le_iSup (f := fun s ‚Ü¶ _)\n    (sigmaFinite_restrict_sigmaFiniteSetGE Œº ŒΩ n)).trans ?_\n  exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : SigmaFinite (Œº.restrict s)), ŒΩ s) (Œº.sigmaFiniteSetGE ŒΩ n)\n    (measurableSet_sigmaFiniteSetGE n)\n\n"}
{"name":"MeasureTheory.measure_sigmaFiniteSetGE_ge","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nn : Nat\n‚ä¢ LE.le (HSub.hSub (iSup fun s => iSup fun x => iSup fun x => ŒΩ s) (HDiv.hDiv 1 ‚Üën)) (ŒΩ (Œº.sigmaFiniteSetGE ŒΩ n))","decl":"lemma measure_sigmaFiniteSetGE_ge (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] (n : ‚Ñï) :\n    (‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s) - 1/n\n      ‚â§ ŒΩ (Œº.sigmaFiniteSetGE ŒΩ n) :=\n  (exists_isSigmaFiniteSet_measure_ge Œº ŒΩ n).choose_spec.2.2\n\n"}
{"name":"MeasureTheory.tendsto_measure_sigmaFiniteSetGE","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\n‚ä¢ Filter.Tendsto (fun n => ŒΩ (Œº.sigmaFiniteSetGE ŒΩ n)) Filter.atTop (nhds (iSup fun s => iSup fun x => iSup fun x => ŒΩ s))","decl":"lemma tendsto_measure_sigmaFiniteSetGE (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :\n    Tendsto (fun n ‚Ü¶ ŒΩ (Œº.sigmaFiniteSetGE ŒΩ n)) atTop\n      (ùìù (‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s)) := by\n  refine tendsto_of_tendsto_of_tendsto_of_le_of_le ?_\n    tendsto_const_nhds (measure_sigmaFiniteSetGE_ge Œº ŒΩ) (measure_sigmaFiniteSetGE_le Œº ŒΩ)\n  nth_rewrite 2 [‚Üê tsub_zero (‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s)]\n  refine ENNReal.Tendsto.sub tendsto_const_nhds ?_ (Or.inr ENNReal.zero_ne_top)\n  simp only [one_div]\n  exact ENNReal.tendsto_inv_nat_nhds_zero\n\n"}
{"name":"MeasureTheory.measurableSet_sigmaFiniteSetWRT'","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\n‚ä¢ MeasurableSet (Œº.sigmaFiniteSetWRT' ŒΩ)","decl":"lemma measurableSet_sigmaFiniteSetWRT' [IsFiniteMeasure ŒΩ] :\n    MeasurableSet (Œº.sigmaFiniteSetWRT' ŒΩ) :=\n  MeasurableSet.iUnion measurableSet_sigmaFiniteSetGE\n\n"}
{"name":"MeasureTheory.sigmaFinite_restrict_sigmaFiniteSetWRT'","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\n‚ä¢ MeasureTheory.SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetWRT' ŒΩ))","decl":"lemma sigmaFinite_restrict_sigmaFiniteSetWRT' (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :\n    SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetWRT' ŒΩ)) := by\n  have := sigmaFinite_restrict_sigmaFiniteSetGE Œº ŒΩ\n  let f : ‚Ñï √ó ‚Ñï ‚Üí Set Œ± := fun p : ‚Ñï √ó ‚Ñï ‚Ü¶ (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú\n    ‚à™ (spanningSets (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ p.1)) p.2 ‚à© (Œº.sigmaFiniteSetGE ŒΩ p.1))\n  suffices (Œº.restrict (Œº.sigmaFiniteSetWRT' ŒΩ)).FiniteSpanningSetsIn (Set.range f) from\n    this.sigmaFinite\n  let e : ‚Ñï ‚âÉ ‚Ñï √ó ‚Ñï := Nat.pairEquiv.symm\n  refine ‚ü®fun n ‚Ü¶ f (e n), fun _ ‚Ü¶ by simp, fun n ‚Ü¶ ?_, ?_‚ü©\n  ¬∑ simp only [Nat.pairEquiv_symm_apply, gt_iff_lt, measure_union_lt_top_iff, f, e]\n    rw [Measure.restrict_apply' measurableSet_sigmaFiniteSetWRT', Set.compl_inter_self,\n      Measure.restrict_apply' measurableSet_sigmaFiniteSetWRT']\n    simp only [measure_empty, ENNReal.zero_lt_top, true_and]\n    refine (measure_mono Set.inter_subset_left).trans_lt ?_\n    rw [‚Üê Measure.restrict_apply' (measurableSet_sigmaFiniteSetGE _)]\n    exact measure_spanningSets_lt_top _ _\n  ¬∑ simp only [Nat.pairEquiv_symm_apply, f, e]\n    rw [‚Üê Set.union_iUnion]\n    suffices ‚ãÉ n, (spanningSets (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ (Nat.unpair n).1)) n.unpair.2\n        ‚à© Œº.sigmaFiniteSetGE ŒΩ n.unpair.1) = Œº.sigmaFiniteSetWRT' ŒΩ by\n      rw [this, Set.compl_union_self]\n    calc ‚ãÉ n, (spanningSets (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ (Nat.unpair n).1)) n.unpair.2\n        ‚à© Œº.sigmaFiniteSetGE ŒΩ n.unpair.1)\n      = ‚ãÉ n, ‚ãÉ m, (spanningSets (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ n)) m\n            ‚à© Œº.sigmaFiniteSetGE ŒΩ n) :=\n          Set.iUnion_unpair (fun n m ‚Ü¶ spanningSets (Œº.restrict (Œº.sigmaFiniteSetGE ŒΩ n)) m\n            ‚à© Œº.sigmaFiniteSetGE ŒΩ n)\n    _ = ‚ãÉ n, Œº.sigmaFiniteSetGE ŒΩ n := by\n        refine Set.iUnion_congr (fun n ‚Ü¶ ?_)\n        rw [‚Üê Set.iUnion_inter, iUnion_spanningSets, Set.univ_inter]\n    _ = Œº.sigmaFiniteSetWRT' ŒΩ := rfl\n\n"}
{"name":"MeasureTheory.measure_sigmaFiniteSetWRT'","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\n‚ä¢ Eq (ŒΩ (Œº.sigmaFiniteSetWRT' ŒΩ)) (iSup fun s => iSup fun x => iSup fun x => ŒΩ s)","decl":"/-- `Œº.sigmaFiniteSetWRT' ŒΩ` has maximal `ŒΩ`-measure among all measurable sets `s` with sigma-finite\n`Œº.restrict s`. -/\nlemma measure_sigmaFiniteSetWRT' (Œº ŒΩ : Measure Œ±) [IsFiniteMeasure ŒΩ] :\n    ŒΩ (Œº.sigmaFiniteSetWRT' ŒΩ)\n      = ‚®Ü (s) (_ : MeasurableSet s) (_ : SigmaFinite (Œº.restrict s)), ŒΩ s := by\n  apply le_antisymm\n  ¬∑ refine (le_iSup (f := fun _ ‚Ü¶ _)\n      (sigmaFinite_restrict_sigmaFiniteSetWRT' Œº ŒΩ)).trans ?_\n    exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : SigmaFinite (Œº.restrict s)), ŒΩ s) (Œº.sigmaFiniteSetWRT' ŒΩ)\n      measurableSet_sigmaFiniteSetWRT'\n  ¬∑ exact le_of_tendsto' (tendsto_measure_sigmaFiniteSetGE Œº ŒΩ)\n      (fun _ ‚Ü¶ measure_mono (Set.subset_iUnion _ _))\n\n"}
{"name":"MeasureTheory.measure_eq_top_of_subset_compl_sigmaFiniteSetWRT'_of_measurableSet","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ns : Set Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nhs : MeasurableSet s\nhs_subset : HasSubset.Subset s (HasCompl.compl (Œº.sigmaFiniteSetWRT' ŒΩ))\nhŒΩs : Ne (ŒΩ s) 0\n‚ä¢ Eq (Œº s) Top.top","decl":"/-- Auxiliary lemma for `measure_eq_top_of_subset_compl_sigmaFiniteSetWRT'`. -/\nlemma measure_eq_top_of_subset_compl_sigmaFiniteSetWRT'_of_measurableSet [IsFiniteMeasure ŒΩ]\n    (hs : MeasurableSet s) (hs_subset : s ‚äÜ (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú) (hŒΩs : ŒΩ s ‚â† 0) :\n    Œº s = ‚àû := by\n  suffices ¬¨ SigmaFinite (Œº.restrict s) by\n    by_contra h\n    have h_lt_top : Fact (Œº s < ‚àû) := ‚ü®Ne.lt_top h‚ü©\n    exact this inferInstance\n  intro hsœÉ\n  have h_lt : ŒΩ (Œº.sigmaFiniteSetWRT' ŒΩ) < ŒΩ (Œº.sigmaFiniteSetWRT' ŒΩ ‚à™ s) := by\n    rw [measure_union _ hs]\n    ¬∑ exact ENNReal.lt_add_right (measure_ne_top _ _) hŒΩs\n    ¬∑ exact disjoint_compl_right.mono_right hs_subset\n  have h_le : ŒΩ (Œº.sigmaFiniteSetWRT' ŒΩ ‚à™ s) ‚â§ ŒΩ (Œº.sigmaFiniteSetWRT' ŒΩ) := by\n    conv_rhs => rw [measure_sigmaFiniteSetWRT']\n    refine (le_iSup\n      (f := fun (_ : SigmaFinite (Œº.restrict (Œº.sigmaFiniteSetWRT' ŒΩ ‚à™ s))) ‚Ü¶ _) ?_).trans ?_\n    ¬∑ have := sigmaFinite_restrict_sigmaFiniteSetWRT' Œº ŒΩ\n      infer_instance\n    ¬∑ exact le_iSup‚ÇÇ (f := fun s _ ‚Ü¶ ‚®Ü (_ : SigmaFinite (Œº.restrict _)), ŒΩ s)\n        (Œº.sigmaFiniteSetWRT' ŒΩ ‚à™ s) (measurableSet_sigmaFiniteSetWRT'.union hs)\n  exact h_lt.not_le h_le\n\n"}
{"name":"MeasureTheory.measure_eq_top_of_subset_compl_sigmaFiniteSetWRT'","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ns : Set Œ±\ninst‚úù : MeasureTheory.IsFiniteMeasure ŒΩ\nhs_subset : HasSubset.Subset s (HasCompl.compl (Œº.sigmaFiniteSetWRT' ŒΩ))\nhŒΩs : Ne (ŒΩ s) 0\n‚ä¢ Eq (Œº s) Top.top","decl":"/-- For all sets `s` in `(Œº.sigmaFiniteSetWRT ŒΩ)·∂ú`, if `ŒΩ s ‚â† 0` then `Œº s = ‚àû`. -/\nlemma measure_eq_top_of_subset_compl_sigmaFiniteSetWRT' [IsFiniteMeasure ŒΩ]\n    (hs_subset : s ‚äÜ (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú) (hŒΩs : ŒΩ s ‚â† 0) :\n    Œº s = ‚àû := by\n  rw [measure_eq_iInf]\n  simp_rw [iInf_eq_top]\n  suffices ‚àÄ t, t ‚äÜ (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú ‚Üí s ‚äÜ t ‚Üí MeasurableSet t ‚Üí Œº t = ‚àû by\n    intro t hts ht\n    suffices Œº (t ‚à© (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú) = ‚àû from\n      measure_mono_top Set.inter_subset_left this\n    have hs_subset_t : s ‚äÜ t ‚à© (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú := Set.subset_inter hts hs_subset\n    exact this (t ‚à© (Œº.sigmaFiniteSetWRT' ŒΩ)·∂ú) Set.inter_subset_right hs_subset_t\n      (ht.inter measurableSet_sigmaFiniteSetWRT'.compl)\n  intro t ht_subset hst ht\n  refine measure_eq_top_of_subset_compl_sigmaFiniteSetWRT'_of_measurableSet ht ht_subset ?_\n  exact fun hŒΩt ‚Ü¶ hŒΩs (measure_mono_null hst hŒΩt)\n\n"}
{"name":"MeasureTheory.measure_eq_top_of_subset_compl_sigmaFiniteSetWRT","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ns : Set Œ±\ninst‚úù : MeasureTheory.SFinite ŒΩ\nhs_subset : HasSubset.Subset s (HasCompl.compl (Œº.sigmaFiniteSetWRT ŒΩ))\nhŒΩs : Ne (ŒΩ s) 0\n‚ä¢ Eq (Œº s) Top.top","decl":"/-- For all sets `s` in `(Œº.sigmaFiniteSetWRT ŒΩ)·∂ú`, if `ŒΩ s ‚â† 0` then `Œº s = ‚àû`. -/\nlemma measure_eq_top_of_subset_compl_sigmaFiniteSetWRT [SFinite ŒΩ]\n    (hs_subset : s ‚äÜ (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú) (hŒΩs : ŒΩ s ‚â† 0) :\n    Œº s = ‚àû := by\n  have ‚ü®ŒΩ', hŒΩ', hŒΩŒΩ', _‚ü© := exists_isFiniteMeasure_absolutelyContinuous ŒΩ\n  have h : ‚àÉ s : Set Œ±, MeasurableSet s ‚àß SigmaFinite (Œº.restrict s)\n      ‚àß (‚àÄ t ‚äÜ s·∂ú, ŒΩ t ‚â† 0 ‚Üí Œº t = ‚àû) := by\n    refine ‚ü®Œº.sigmaFiniteSetWRT' ŒΩ', measurableSet_sigmaFiniteSetWRT',\n      sigmaFinite_restrict_sigmaFiniteSetWRT' _ _,\n      fun t ht_subset hŒΩt ‚Ü¶ measure_eq_top_of_subset_compl_sigmaFiniteSetWRT' ht_subset ?_‚ü©\n    exact fun hŒΩ't ‚Ü¶ hŒΩt (hŒΩŒΩ' hŒΩ't)\n  rw [Measure.sigmaFiniteSetWRT, dif_pos h] at hs_subset\n  exact h.choose_spec.2.2 s hs_subset hŒΩs\n\n"}
{"name":"MeasureTheory.restrict_compl_sigmaFiniteSetWRT","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.SFinite ŒΩ\nhŒºŒΩ : Œº.AbsolutelyContinuous ŒΩ\n‚ä¢ Eq (Œº.restrict (HasCompl.compl (Œº.sigmaFiniteSetWRT ŒΩ))) (HSMul.hSMul Top.top (ŒΩ.restrict (HasCompl.compl (Œº.sigmaFiniteSetWRT ŒΩ))))","decl":"lemma restrict_compl_sigmaFiniteSetWRT [SFinite ŒΩ] (hŒºŒΩ : Œº ‚â™ ŒΩ) :\n    Œº.restrict (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú = ‚àû ‚Ä¢ ŒΩ.restrict (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú := by\n  ext s\n  rw [Measure.restrict_apply' measurableSet_sigmaFiniteSetWRT.compl,\n    Measure.smul_apply, smul_eq_mul,\n    Measure.restrict_apply' measurableSet_sigmaFiniteSetWRT.compl]\n  by_cases hŒΩs : ŒΩ (s ‚à© (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú) = 0\n  ¬∑ rw [hŒΩs, mul_zero]\n    exact hŒºŒΩ hŒΩs\n  ¬∑ rw [ENNReal.top_mul hŒΩs, measure_eq_top_of_subset_compl_sigmaFiniteSetWRT\n      Set.inter_subset_right hŒΩs]\n\n"}
{"name":"MeasureTheory.measure_compl_sigmaFiniteSetWRT","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº ŒΩ : MeasureTheory.Measure Œ±\nhŒºŒΩ : Œº.AbsolutelyContinuous ŒΩ\ninst‚úù¬π : MeasureTheory.SigmaFinite Œº\ninst‚úù : MeasureTheory.SFinite ŒΩ\n‚ä¢ Eq (ŒΩ (HasCompl.compl (Œº.sigmaFiniteSetWRT ŒΩ))) 0","decl":"@[simp]\nlemma measure_compl_sigmaFiniteSetWRT (hŒºŒΩ : Œº ‚â™ ŒΩ) [SigmaFinite Œº] [SFinite ŒΩ] :\n    ŒΩ (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú = 0 := by\n  have h : ŒΩ (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú ‚â† 0 ‚Üí Œº (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú = ‚àû :=\n    measure_eq_top_of_subset_compl_sigmaFiniteSetWRT subset_rfl\n  by_contra h0\n  refine ENNReal.top_ne_zero ?_\n  rw [‚Üê h h0, ‚Üê Measure.iSup_restrict_spanningSets]\n  simp_rw [Measure.restrict_apply' (measurableSet_spanningSets Œº _), ENNReal.iSup_eq_zero]\n  intro i\n  by_contra h_ne_zero\n  have h_zero_top := measure_eq_top_of_subset_compl_sigmaFiniteSetWRT\n    (Set.inter_subset_left : (Œº.sigmaFiniteSetWRT ŒΩ)·∂ú ‚à© spanningSets Œº i ‚äÜ _) ?_\n  swap; ¬∑ exact fun h ‚Ü¶ h_ne_zero (hŒºŒΩ h)\n  refine absurd h_zero_top (ne_of_lt ?_)\n  exact (measure_mono Set.inter_subset_right).trans_lt (measure_spanningSets_lt_top Œº i)\n\n"}
{"name":"MeasureTheory.measurableSet_sigmaFiniteSet","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\n‚ä¢ MeasurableSet Œº.sigmaFiniteSet","decl":"@[measurability]\nlemma measurableSet_sigmaFiniteSet : MeasurableSet Œº.sigmaFiniteSet :=\n  measurableSet_sigmaFiniteSetWRT\n\n"}
{"name":"MeasureTheory.measure_eq_zero_or_top_of_subset_compl_sigmaFiniteSet","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nt : Set Œ±\ninst‚úù : MeasureTheory.SFinite Œº\nht_subset : HasSubset.Subset t (HasCompl.compl Œº.sigmaFiniteSet)\n‚ä¢ Or (Eq (Œº t) 0) (Eq (Œº t) Top.top)","decl":"lemma measure_eq_zero_or_top_of_subset_compl_sigmaFiniteSet [SFinite Œº]\n    (ht_subset : t ‚äÜ Œº.sigmaFiniteSet·∂ú) :\n    Œº t = 0 ‚à® Œº t = ‚àû := by\n  rw [or_iff_not_imp_left]\n  exact measure_eq_top_of_subset_compl_sigmaFiniteSetWRT ht_subset\n\n"}
{"name":"MeasureTheory.restrict_compl_sigmaFiniteSet_eq_zero_or_top","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.SFinite Œº\ns : Set Œ±\n‚ä¢ Or (Eq ((Œº.restrict (HasCompl.compl Œº.sigmaFiniteSet)) s) 0) (Eq ((Œº.restrict (HasCompl.compl Œº.sigmaFiniteSet)) s) Top.top)","decl":"/-- The measure `Œº.restrict Œº.sigmaFiniteSet·∂ú` takes only two values: 0 and ‚àû . -/\nlemma restrict_compl_sigmaFiniteSet_eq_zero_or_top (Œº : Measure Œ±) [SFinite Œº] (s : Set Œ±) :\n    Œº.restrict Œº.sigmaFiniteSet·∂ú s = 0 ‚à® Œº.restrict Œº.sigmaFiniteSet·∂ú s = ‚àû := by\n  rw [Measure.restrict_apply' measurableSet_sigmaFiniteSet.compl]\n  exact measure_eq_zero_or_top_of_subset_compl_sigmaFiniteSet Set.inter_subset_right\n\n"}
{"name":"MeasureTheory.instSigmaFiniteRestrictSigmaFiniteSet","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\n‚ä¢ MeasureTheory.SigmaFinite (Œº.restrict Œº.sigmaFiniteSet)","decl":"/-- The restriction of an s-finite measure `Œº` to `Œº.sigmaFiniteSet` is sigma-finite. -/\ninstance : SigmaFinite (Œº.restrict Œº.sigmaFiniteSet) := by\n  rw [Measure.sigmaFiniteSet]\n  infer_instance\n\n"}
{"name":"MeasureTheory.sigmaFinite_of_measure_compl_sigmaFiniteSet_eq_zero","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nh : Eq (Œº (HasCompl.compl Œº.sigmaFiniteSet)) 0\n‚ä¢ MeasureTheory.SigmaFinite Œº","decl":"lemma sigmaFinite_of_measure_compl_sigmaFiniteSet_eq_zero (h : Œº Œº.sigmaFiniteSet·∂ú = 0) :\n    SigmaFinite Œº := by\n  rw [‚Üê Measure.restrict_add_restrict_compl (Œº := Œº) (measurableSet_sigmaFiniteSet (Œº := Œº)),\n    Measure.restrict_eq_zero.mpr h, add_zero]\n  infer_instance\n\n"}
{"name":"MeasureTheory.measure_compl_sigmaFiniteSet","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù : MeasureTheory.SigmaFinite Œº\n‚ä¢ Eq (Œº (HasCompl.compl Œº.sigmaFiniteSet)) 0","decl":"@[simp]\nlemma measure_compl_sigmaFiniteSet (Œº : Measure Œ±) [SigmaFinite Œº] : Œº Œº.sigmaFiniteSet·∂ú = 0 :=\n  measure_compl_sigmaFiniteSetWRT Measure.AbsolutelyContinuous.rfl\n\n"}
{"name":"MeasureTheory.measure_compl_sigmaFiniteSet_eq_zero_iff_sigmaFinite","module":"Mathlib.MeasureTheory.Decomposition.Exhaustion","initialProofState":"Œ± : Type u_1\nmŒ± : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\n‚ä¢ Iff (Eq (Œº (HasCompl.compl Œº.sigmaFiniteSet)) 0) (MeasureTheory.SigmaFinite Œº)","decl":"/-- An s-finite measure `Œº` is sigma-finite iff `Œº Œº.sigmaFiniteSet·∂ú = 0`. -/\nlemma measure_compl_sigmaFiniteSet_eq_zero_iff_sigmaFinite (Œº : Measure Œ±) :\n    Œº Œº.sigmaFiniteSet·∂ú = 0 ‚Üî SigmaFinite Œº :=\n  ‚ü®sigmaFinite_of_measure_compl_sigmaFiniteSet_eq_zero, fun _ ‚Ü¶ measure_compl_sigmaFiniteSet Œº‚ü©\n\n"}
