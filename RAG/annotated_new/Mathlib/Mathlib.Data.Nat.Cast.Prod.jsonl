{"name":"Prod.fst_natCast","module":"Mathlib.Data.Nat.Cast.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : AddMonoidWithOne α\ninst✝ : AddMonoidWithOne β\nn : Nat\n⊢ Eq (↑n).1 ↑n","decl":"@[simp]\ntheorem fst_natCast (n : ℕ) : (n : α × β).fst = n := by induction n <;> simp [*]\n\n"}
{"name":"Prod.fst_ofNat","module":"Mathlib.Data.Nat.Cast.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : AddMonoidWithOne α\ninst✝¹ : AddMonoidWithOne β\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (OfNat.ofNat n).1 (OfNat.ofNat n)","decl":"@[simp]\ntheorem fst_ofNat (n : ℕ) [n.AtLeastTwo] :\n    (ofNat(n) : α × β).1 = (ofNat(n) : α) :=\n  rfl\n\n"}
{"name":"Prod.snd_natCast","module":"Mathlib.Data.Nat.Cast.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : AddMonoidWithOne α\ninst✝ : AddMonoidWithOne β\nn : Nat\n⊢ Eq (↑n).2 ↑n","decl":"@[simp]\ntheorem snd_natCast (n : ℕ) : (n : α × β).snd = n := by induction n <;> simp [*]\n\n"}
{"name":"Prod.snd_ofNat","module":"Mathlib.Data.Nat.Cast.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : AddMonoidWithOne α\ninst✝¹ : AddMonoidWithOne β\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (OfNat.ofNat n).2 (OfNat.ofNat n)","decl":"@[simp]\ntheorem snd_ofNat (n : ℕ) [n.AtLeastTwo] :\n    (ofNat(n) : α × β).2 = (ofNat(n) : β) :=\n  rfl\n\n"}
