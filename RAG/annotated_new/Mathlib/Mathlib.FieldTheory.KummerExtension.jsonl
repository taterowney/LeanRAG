{"name":"X_pow_sub_C_splits_of_isPrimitiveRoot","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\nζ : K\nhζ : IsPrimitiveRoot ζ n\nα a : K\ne : Eq (HPow.hPow α n) a\n⊢ Polynomial.Splits (RingHom.id K) (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))","decl":"theorem X_pow_sub_C_splits_of_isPrimitiveRoot\n    {n : ℕ} {ζ : K} (hζ : IsPrimitiveRoot ζ n) {α a : K} (e : α ^ n = a) :\n    (X ^ n - C a).Splits (RingHom.id _) := by\n  cases n.eq_zero_or_pos with\n  | inl hn =>\n    rw [hn, pow_zero, ← C.map_one, ← map_sub]\n    exact splits_C _ _\n  | inr hn =>\n    rw [splits_iff_card_roots, ← nthRoots, hζ.card_nthRoots, natDegree_X_pow_sub_C, if_pos ⟨α, e⟩]\n\n-- make this private, as we only use it to prove a strictly more general version\n"}
{"name":"X_pow_sub_C_eq_prod","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\nn : Nat\nζ : R\nhζ : IsPrimitiveRoot ζ n\nα a : R\nhn : LT.lt 0 n\ne : Eq (HPow.hPow α n) a\n⊢ Eq (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)) ((Finset.range n).prod fun i => HSub.hSub Polynomial.X (Polynomial.C (HMul.hMul (HPow.hPow ζ i) α)))","decl":"lemma X_pow_sub_C_eq_prod {R : Type*} [CommRing R] [IsDomain R]\n    {n : ℕ} {ζ : R} (hζ : IsPrimitiveRoot ζ n) {α a : R} (hn : 0 < n) (e : α ^ n = a) :\n    (X ^ n - C a) = ∏ i ∈ Finset.range n, (X - C (ζ ^ i * α)) := by\n  let K := FractionRing R\n  let i := algebraMap R K\n  have h := NoZeroSMulDivisors.algebraMap_injective R K\n  apply_fun Polynomial.map i using map_injective i h\n  simpa only [Polynomial.map_sub, Polynomial.map_pow, map_X, map_C, map_mul, map_pow,\n    Polynomial.map_prod, Polynomial.map_mul]\n    using X_pow_sub_C_eq_prod' (hζ.map_of_injective h) hn <| map_pow i α n ▸ congrArg i e\n\n"}
{"name":"X_pow_mul_sub_C_irreducible","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn m : Nat\na : K\nhm : Irreducible (HSub.hSub (HPow.hPow Polynomial.X m) (Polynomial.C a))\nhn : ∀ (E : Type u) [inst : Field E] [inst_1 : Algebra K E] (x : E), Eq (minpoly K x) (HSub.hSub (HPow.hPow Polynomial.X m) (Polynomial.C a)) → Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C (IntermediateField.AdjoinSimple.gen K x)))\n⊢ Irreducible (HSub.hSub (HPow.hPow Polynomial.X (HMul.hMul n m)) (Polynomial.C a))","decl":"theorem X_pow_mul_sub_C_irreducible\n    {n m : ℕ} {a : K} (hm : Irreducible (X ^ m - C a))\n    (hn : ∀ (E : Type u) [Field E] [Algebra K E] (x : E) (_ : minpoly K x = X ^ m - C a),\n      Irreducible (X ^ n - C (AdjoinSimple.gen K x))) :\n    Irreducible (X ^ (n * m) - C a) := by\n  have hm' : m ≠ 0 := by\n    rintro rfl\n    rw [pow_zero, ← C.map_one, ← map_sub] at hm\n    exact not_irreducible_C _ hm\n  simpa [pow_mul] using irreducible_comp (monic_X_pow_sub_C a hm') (monic_X_pow n) hm\n    (by simpa only [Polynomial.map_pow, map_X] using hn)\n\n-- TODO: generalize to even `n`\n"}
{"name":"X_pow_sub_C_irreducible_of_odd","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\nhn : Odd n\na : K\nha : ∀ (p : Nat), Nat.Prime p → Dvd.dvd p n → ∀ (b : K), Ne (HPow.hPow b p) a\n⊢ Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))","decl":"theorem X_pow_sub_C_irreducible_of_odd\n    {n : ℕ} (hn : Odd n) {a : K} (ha : ∀ p : ℕ, p.Prime → p ∣ n → ∀ b : K, b ^ p ≠ a) :\n    Irreducible (X ^ n - C a) := by\n  induction n using induction_on_primes generalizing K a with\n  | h₀ => simp [← Nat.not_even_iff_odd] at hn\n  | h₁ => simpa using irreducible_X_sub_C a\n  | h p n hp IH =>\n    rw [mul_comm]\n    apply X_pow_mul_sub_C_irreducible\n      (X_pow_sub_C_irreducible_of_prime hp (ha p hp (dvd_mul_right _ _)))\n    intro E _ _ x hx\n    have : IsIntegral K x := not_not.mp fun h ↦ by\n      simpa only [degree_zero, degree_X_pow_sub_C hp.pos,\n        WithBot.natCast_ne_bot] using congr_arg degree (hx.symm.trans (dif_neg h))\n    apply IH (Nat.odd_mul.mp hn).2\n    intros q hq hqn b hb\n    apply ha q hq (dvd_mul_of_dvd_right hqn p) (Algebra.norm _ b)\n    rw [← map_pow, hb, ← adjoin.powerBasis_gen this,\n      Algebra.PowerBasis.norm_gen_eq_coeff_zero_minpoly]\n    simp [minpoly_gen, hx, hp.ne_zero.symm, (Nat.odd_mul.mp hn).1.neg_pow]\n\n"}
{"name":"X_pow_sub_C_irreducible_iff_forall_prime_of_odd","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\nhn : Odd n\na : K\n⊢ Iff (Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))) (∀ (p : Nat), Nat.Prime p → Dvd.dvd p n → ∀ (b : K), Ne (HPow.hPow b p) a)","decl":"theorem X_pow_sub_C_irreducible_iff_forall_prime_of_odd {n : ℕ} (hn : Odd n) {a : K} :\n    Irreducible (X ^ n - C a) ↔ (∀ p : ℕ, p.Prime → p ∣ n → ∀ b : K, b ^ p ≠ a) :=\n  ⟨fun e _ hp hpn ↦ pow_ne_of_irreducible_X_pow_sub_C e hpn hp.ne_one,\n    X_pow_sub_C_irreducible_of_odd hn⟩\n\n"}
{"name":"X_pow_sub_C_irreducible_iff_of_odd","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\nhn : Odd n\na : K\n⊢ Iff (Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))) (∀ (d : Nat), Dvd.dvd d n → Ne d 1 → ∀ (b : K), Ne (HPow.hPow b d) a)","decl":"theorem X_pow_sub_C_irreducible_iff_of_odd {n : ℕ} (hn : Odd n) {a : K} :\n    Irreducible (X ^ n - C a) ↔ (∀ d, d ∣ n → d ≠ 1 → ∀ b : K, b ^ d ≠ a) :=\n  ⟨fun e _ ↦ pow_ne_of_irreducible_X_pow_sub_C e,\n    fun H ↦ X_pow_sub_C_irreducible_of_odd hn fun p hp hpn ↦ (H p hpn hp.ne_one)⟩\n\n-- TODO: generalize to `p = 2`\n"}
{"name":"X_pow_sub_C_irreducible_of_prime_pow","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\np : Nat\nhp : Nat.Prime p\nhp' : Ne p 2\nn : Nat\na : K\nha : ∀ (b : K), Ne (HPow.hPow b p) a\n⊢ Irreducible (HSub.hSub (HPow.hPow Polynomial.X (HPow.hPow p n)) (Polynomial.C a))","decl":"theorem X_pow_sub_C_irreducible_of_prime_pow\n    {p : ℕ} (hp : p.Prime) (hp' : p ≠ 2) (n : ℕ) {a : K} (ha : ∀ b : K, b ^ p ≠ a) :\n    Irreducible (X ^ (p ^ n) - C a) := by\n  apply X_pow_sub_C_irreducible_of_odd (hp.odd_of_ne_two hp').pow\n  intros q hq hq'\n  simpa [(Nat.prime_dvd_prime_iff_eq hq hp).mp (hq.dvd_of_dvd_pow hq')] using ha\n\n"}
{"name":"X_pow_sub_C_irreducible_iff_of_prime_pow","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\np : Nat\nhp : Nat.Prime p\nhp' : Ne p 2\nn : Nat\nhn : Ne n 0\na : K\n⊢ Iff (Irreducible (HSub.hSub (HPow.hPow Polynomial.X (HPow.hPow p n)) (Polynomial.C a))) (∀ (b : K), Ne (HPow.hPow b p) a)","decl":"theorem X_pow_sub_C_irreducible_iff_of_prime_pow\n    {p : ℕ} (hp : p.Prime) (hp' : p ≠ 2) {n} (hn : n ≠ 0) {a : K} :\n    Irreducible (X ^ p ^ n - C a) ↔ ∀ b, b ^ p ≠ a :=\n  ⟨(pow_ne_of_irreducible_X_pow_sub_C · (dvd_pow dvd_rfl hn) hp.ne_one),\n    X_pow_sub_C_irreducible_of_prime_pow hp hp' n⟩\n\n"}
{"name":"Polynomial.separable_X_pow_sub_C_of_irreducible","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\n⊢ (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)).Separable","decl":"include hζ H in\n/-- Also see `Polynomial.separable_X_pow_sub_C_unit` -/\ntheorem Polynomial.separable_X_pow_sub_C_of_irreducible : (X ^ n - C a).Separable := by\n  letI := Fact.mk H\n  letI : Algebra K K[n√a] := inferInstance\n  have hn := Nat.pos_iff_ne_zero.mpr (ne_zero_of_irreducible_X_pow_sub_C H)\n  by_cases hn' : n = 1\n  · rw [hn', pow_one]; exact separable_X_sub_C\n  have ⟨ζ, hζ⟩ := hζ\n  rw [mem_primitiveRoots (Nat.pos_of_ne_zero <| ne_zero_of_irreducible_X_pow_sub_C H)] at hζ\n  rw [← separable_map (algebraMap K K[n√a]), Polynomial.map_sub, Polynomial.map_pow, map_C, map_X,\n    AdjoinRoot.algebraMap_eq,\n    X_pow_sub_C_eq_prod (hζ.map_of_injective (algebraMap K _).injective) hn\n    (root_X_pow_sub_C_pow n a), separable_prod_X_sub_C_iff']\n  #adaptation_note /-- https://github.com/leanprover/lean4/pull/5376\n  we need to provide this helper instance. -/\n  have : MonoidHomClass (K →+* K[n√a]) K K[n√a] := inferInstance\n  exact (hζ.map_of_injective (algebraMap K K[n√a]).injective).injOn_pow_mul\n    (root_X_pow_sub_C_ne_zero (lt_of_le_of_ne (show 1 ≤ n from hn) (Ne.symm hn')) _)\n\n"}
{"name":"autAdjoinRootXPowSubC_root","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\na : K\nη : Subtype fun x => Membership.mem (rootsOfUnity n K) x\n⊢ Eq (((autAdjoinRootXPowSubC n a) η) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)))) (HSMul.hSMul (↑↑η) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))))","decl":"lemma autAdjoinRootXPowSubC_root (η) :\n    autAdjoinRootXPowSubC n a η (root _) = ((η : Kˣ) : K) • root _ := by\n  dsimp [autAdjoinRootXPowSubC, autAdjoinRootXPowSubCHom, AlgEquiv.algHomUnitsEquiv]\n  apply liftHom_root\n\n"}
{"name":"autAdjoinRootXPowSubCEquiv_root","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝¹ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\ninst✝ : NeZero n\nη : Subtype fun x => Membership.mem (rootsOfUnity n K) x\n⊢ Eq (((autAdjoinRootXPowSubCEquiv hζ H) η) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)))) (HSMul.hSMul (↑↑η) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))))","decl":"lemma autAdjoinRootXPowSubCEquiv_root [NeZero n] (η) :\n    autAdjoinRootXPowSubCEquiv hζ H η (root _) = ((η : Kˣ) : K) • root _ :=\n  autAdjoinRootXPowSubC_root a η\n\n"}
{"name":"autAdjoinRootXPowSubCEquiv_symm_smul","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝¹ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\ninst✝ : NeZero n\nσ : AlgEquiv K (AdjoinRoot (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))) (AdjoinRoot (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)))\n⊢ Eq (HSMul.hSMul (↑((autAdjoinRootXPowSubCEquiv hζ H).symm σ)) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)))) (σ (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))))","decl":"lemma autAdjoinRootXPowSubCEquiv_symm_smul [NeZero n] (σ) :\n    ((autAdjoinRootXPowSubCEquiv hζ H).symm σ : Kˣ) • (root _ : K[n√a]) = σ (root _) := by\n  have := Fact.mk H\n  simp only [autAdjoinRootXPowSubCEquiv, OneHom.toFun_eq_coe, MonoidHom.toOneHom_coe,\n    MulEquiv.symm_mk, MulEquiv.coe_mk, Equiv.coe_fn_symm_mk, AdjoinRootXPowSubCEquivToRootsOfUnity,\n    AdjoinRoot.algebraMap_eq, rootsOfUnity.mkOfPowEq, Units.smul_def, Algebra.smul_def,\n    rootsOfUnityEquivOfPrimitiveRoots_symm_apply, Units.val_ofPowEqOne, ite_mul, one_mul]\n  simp_rw [← root_X_pow_sub_C_eq_zero_iff H]\n  split_ifs with h\n  · rw [h, map_zero]\n  · rw [div_mul_cancel₀ _ h]\n\n"}
{"name":"isSplittingField_AdjoinRoot_X_pow_sub_C","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\n⊢ Polynomial.IsSplittingField K (AdjoinRoot (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))) (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))","decl":"include hζ in\nlemma isSplittingField_AdjoinRoot_X_pow_sub_C :\n    haveI := Fact.mk H\n    letI : Algebra K K[n√a] := inferInstance\n    IsSplittingField K K[n√a] (X ^ n - C a) := by\n  have := Fact.mk H\n  letI : Algebra K K[n√a] := inferInstance\n  constructor\n  · rw [← splits_id_iff_splits, Polynomial.map_sub, Polynomial.map_pow, Polynomial.map_C,\n      Polynomial.map_X]\n    have ⟨_, hζ⟩ := hζ\n    rw [mem_primitiveRoots (Nat.pos_of_ne_zero <| ne_zero_of_irreducible_X_pow_sub_C H)] at hζ\n    exact X_pow_sub_C_splits_of_isPrimitiveRoot (hζ.map_of_injective (algebraMap K _).injective)\n      (root_X_pow_sub_C_pow n a)\n  · rw [eq_top_iff, ← AdjoinRoot.adjoinRoot_eq_top]\n    apply Algebra.adjoin_mono\n    have := ne_zero_of_irreducible_X_pow_sub_C H\n    rw [Set.singleton_subset_iff, mem_rootSet_of_ne (X_pow_sub_C_ne_zero\n      (Nat.pos_of_ne_zero this) a), aeval_def, AdjoinRoot.algebraMap_eq, AdjoinRoot.eval₂_root]\n\n"}
{"name":"adjoinRootXPowSubCEquiv_root","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\n⊢ Eq ((adjoinRootXPowSubCEquiv hζ H hα) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)))) α","decl":"lemma adjoinRootXPowSubCEquiv_root :\n    adjoinRootXPowSubCEquiv hζ H hα (root _) = α := by\n  rw [adjoinRootXPowSubCEquiv, AlgEquiv.coe_ofBijective, liftHom_root]\n\n"}
{"name":"adjoinRootXPowSubCEquiv_symm_eq_root","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\n⊢ Eq ((adjoinRootXPowSubCEquiv hζ H hα).symm α) (AdjoinRoot.root (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)))","decl":"lemma adjoinRootXPowSubCEquiv_symm_eq_root :\n    (adjoinRootXPowSubCEquiv hζ H hα).symm α = root _ := by\n  apply (adjoinRootXPowSubCEquiv hζ H hα).injective\n  rw [(adjoinRootXPowSubCEquiv hζ H hα).apply_symm_apply, adjoinRootXPowSubCEquiv_root]\n\n"}
{"name":"Algebra.adjoin_root_eq_top_of_isSplittingField","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\n⊢ Eq (Algebra.adjoin K (Singleton.singleton α)) Top.top","decl":"include hζ H hα in\nlemma Algebra.adjoin_root_eq_top_of_isSplittingField :\n    Algebra.adjoin K {α} = ⊤ := by\n  apply Subalgebra.map_injective (B := K[n√a]) (f := (adjoinRootXPowSubCEquiv hζ H hα).symm)\n    (adjoinRootXPowSubCEquiv hζ H hα).symm.injective\n  rw [Algebra.map_top, (AlgHom.range_eq_top _).mpr\n    (adjoinRootXPowSubCEquiv hζ H hα).symm.surjective, AlgHom.map_adjoin,\n    Set.image_singleton, AlgHom.coe_coe, adjoinRootXPowSubCEquiv_symm_eq_root, adjoinRoot_eq_top]\n\n"}
{"name":"IntermediateField.adjoin_root_eq_top_of_isSplittingField","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\n⊢ Eq (IntermediateField.adjoin K (Singleton.singleton α)) Top.top","decl":"include hζ H hα in\nlemma IntermediateField.adjoin_root_eq_top_of_isSplittingField :\n    K⟮α⟯ = ⊤ := by\n  refine (IntermediateField.eq_adjoin_of_eq_algebra_adjoin _ _ _ ?_).symm\n  exact (Algebra.adjoin_root_eq_top_of_isSplittingField hζ H hα).symm\n\n"}
{"name":"rootOfSplitsXPowSubC_pow","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁴ : Field K\nn : Nat\na : K\nL : Type u_1\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\ninst✝ : NeZero n\n⊢ Eq (HPow.hPow (rootOfSplitsXPowSubC ⋯ a L) n) ((algebraMap K L) a)","decl":"lemma rootOfSplitsXPowSubC_pow [NeZero n] :\n    (rootOfSplitsXPowSubC (NeZero.pos n) a L) ^ n = algebraMap K L a := by\n  have := map_rootOfSplits _ (IsSplittingField.splits L (X ^ n - C a))\n  simp only [eval₂_sub, eval₂_X_pow, eval₂_C, sub_eq_zero] at this\n  exact this _\n\n"}
{"name":"autEquivRootsOfUnity_apply_rootOfSplit","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁴ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\ninst✝ : NeZero n\nσ : AlgEquiv K L L\n⊢ Eq (σ (rootOfSplitsXPowSubC ⋯ a L)) (HSMul.hSMul ((autEquivRootsOfUnity hζ H L) σ) (rootOfSplitsXPowSubC ⋯ a L))","decl":"lemma autEquivRootsOfUnity_apply_rootOfSplit [NeZero n] (σ : L ≃ₐ[K] L) :\n    σ (rootOfSplitsXPowSubC (NeZero.pos n) a L) =\n      autEquivRootsOfUnity hζ H L σ • (rootOfSplitsXPowSubC (NeZero.pos n) a L) := by\n  obtain ⟨η, rfl⟩ := (autEquivRootsOfUnity hζ H L).symm.surjective σ\n  rw [MulEquiv.apply_symm_apply, autEquivRootsOfUnity]\n  simp only [MulEquiv.symm_trans_apply, AlgEquiv.autCongr_symm, AlgEquiv.symm_symm,\n    MulEquiv.symm_symm, AlgEquiv.autCongr_apply, AlgEquiv.trans_apply,\n    adjoinRootXPowSubCEquiv_symm_eq_root, autAdjoinRootXPowSubCEquiv_root, map_smul,\n    adjoinRootXPowSubCEquiv_root]\n  rfl\n\n"}
{"name":"autEquivRootsOfUnity_smul","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁴ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\ninst✝ : NeZero n\nσ : AlgEquiv K L L\n⊢ Eq (HSMul.hSMul ((autEquivRootsOfUnity hζ H L) σ) α) (σ α)","decl":"include hα in\nlemma autEquivRootsOfUnity_smul [NeZero n] (σ : L ≃ₐ[K] L) :\n    autEquivRootsOfUnity hζ H L σ • α = σ α := by\n  have ⟨ζ, hζ'⟩ := hζ\n  have hn := NeZero.pos n\n  rw [mem_primitiveRoots hn] at hζ'\n  rw [← mem_nthRoots hn, (hζ'.map_of_injective (algebraMap K L).injective).nthRoots_eq\n    (rootOfSplitsXPowSubC_pow a L)] at hα\n  simp only [Finset.range_val, Multiset.mem_map, Multiset.mem_range] at hα\n  obtain ⟨i, _, rfl⟩ := hα\n  simp only [map_mul, ← map_pow, ← Algebra.smul_def, map_smul,\n    autEquivRootsOfUnity_apply_rootOfSplit hζ H L]\n  exact smul_comm _ _ _\n\n"}
{"name":"autEquivZmod_symm_apply_intCast","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁴ : Field K\nn : Nat\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\ninst✝ : NeZero n\nζ : K\nhζ : IsPrimitiveRoot ζ n\nm : Int\n⊢ Eq (((autEquivZmod H L hζ).symm (Multiplicative.ofAdd ↑m)) α) (HSMul.hSMul (HPow.hPow ζ m) α)","decl":"include hα in\nlemma autEquivZmod_symm_apply_intCast [NeZero n] {ζ : K} (hζ : IsPrimitiveRoot ζ n) (m : ℤ) :\n    (autEquivZmod H L hζ).symm (Multiplicative.ofAdd (m : ZMod n)) α = ζ ^ m • α := by\n  have hn := Nat.pos_iff_ne_zero.mpr (ne_zero_of_irreducible_X_pow_sub_C H)\n  rw [← autEquivRootsOfUnity_smul ⟨ζ, (mem_primitiveRoots hn).mpr hζ⟩ H L hα]\n  simp [MulEquiv.subgroupCongr_symm_apply, Subgroup.smul_def, Units.smul_def, autEquivZmod]\n\n"}
{"name":"autEquivZmod_symm_apply_natCast","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁴ : Field K\nn : Nat\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nα : L\nhα : Eq (HPow.hPow α n) ((algebraMap K L) a)\ninst✝ : NeZero n\nζ : K\nhζ : IsPrimitiveRoot ζ n\nm : Nat\n⊢ Eq (((autEquivZmod H L hζ).symm (Multiplicative.ofAdd ↑m)) α) (HSMul.hSMul (HPow.hPow ζ m) α)","decl":"include hα in\nlemma autEquivZmod_symm_apply_natCast [NeZero n] {ζ : K} (hζ : IsPrimitiveRoot ζ n) (m : ℕ) :\n    (autEquivZmod H L hζ).symm (Multiplicative.ofAdd (m : ZMod n)) α = ζ ^ m • α := by\n  simpa only [Int.cast_natCast, zpow_natCast] using autEquivZmod_symm_apply_intCast H L hα hζ m\n\n"}
{"name":"isCyclic_of_isSplittingField_X_pow_sub_C","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁴ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\ninst✝ : NeZero n\n⊢ IsCyclic (AlgEquiv K L L)","decl":"include hζ H in\nlemma isCyclic_of_isSplittingField_X_pow_sub_C [NeZero n] : IsCyclic (L ≃ₐ[K] L) :=\n  have hn := Nat.pos_iff_ne_zero.mpr (ne_zero_of_irreducible_X_pow_sub_C H)\n  isCyclic_of_surjective _\n    (autEquivZmod H _ <| (mem_primitiveRoots hn).mp hζ.choose_spec).symm.surjective\n\n"}
{"name":"isGalois_of_isSplittingField_X_pow_sub_C","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\n⊢ IsGalois K L","decl":"include hζ H in\nlemma isGalois_of_isSplittingField_X_pow_sub_C : IsGalois K L :=\n  IsGalois.of_separable_splitting_field (separable_X_pow_sub_C_of_irreducible hζ a H)\n\n"}
{"name":"finrank_of_isSplittingField_X_pow_sub_C","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nn : Nat\nhζ : (primitiveRoots n K).Nonempty\na : K\nH : Irreducible (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a))\n⊢ Eq (Module.finrank K L) n","decl":"include hζ H in\nlemma finrank_of_isSplittingField_X_pow_sub_C : Module.finrank K L = n := by\n  have := Polynomial.IsSplittingField.finiteDimensional L (X ^ n - C a)\n  have := isGalois_of_isSplittingField_X_pow_sub_C hζ H L\n  have hn := Nat.pos_iff_ne_zero.mpr (ne_zero_of_irreducible_X_pow_sub_C H)\n  have : NeZero n := ⟨ne_zero_of_irreducible_X_pow_sub_C H⟩\n  rw [← IsGalois.card_aut_eq_finrank, Fintype.card_congr ((autEquivZmod H L <|\n    (mem_primitiveRoots hn).mp hζ.choose_spec).toEquiv.trans Multiplicative.toAdd), ZMod.card]\n\n"}
{"name":"exists_root_adjoin_eq_top_of_isCyclic","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝⁵ : Field K\nL : Type u_1\ninst✝⁴ : Field L\ninst✝³ : Algebra K L\ninst✝² : FiniteDimensional K L\nhK : (primitiveRoots (Module.finrank K L) K).Nonempty\ninst✝¹ : IsGalois K L\ninst✝ : IsCyclic (AlgEquiv K L L)\n⊢ Exists fun α => And (Membership.mem (Set.range ⇑(algebraMap K L)) (HPow.hPow α (Module.finrank K L))) (Eq (IntermediateField.adjoin K (Singleton.singleton α)) Top.top)","decl":"include hK in\n/-- If `L/K` is a cyclic extension of degree `n`, and `K` contains all `n`-th roots of unity,\nthen `L = K[α]` for some `α ^ n ∈ K`. -/\nlemma exists_root_adjoin_eq_top_of_isCyclic [IsGalois K L] [IsCyclic (L ≃ₐ[K] L)] :\n    ∃ (α : L), α ^ (finrank K L) ∈ Set.range (algebraMap K L) ∧ K⟮α⟯ = ⊤ := by\n  -- Let `ζ` be an `n`-th root of unity, and `σ` be a generator of `L ≃ₐ[K] L`.\n  have ⟨ζ, hζ⟩ := hK\n  rw [mem_primitiveRoots finrank_pos] at hζ\n  obtain ⟨σ, hσ⟩ := ‹IsCyclic (L ≃ₐ[K] L)›\n  have hσ' := orderOf_eq_card_of_forall_mem_zpowers hσ\n  -- Since the minimal polynomial of `σ` over `K` is `Xⁿ - 1`,\n  -- `σ` has an eigenvector `v` with eigenvalue `ζ`.\n  have : IsRoot (minpoly K σ.toLinearMap) ζ := by\n    simpa [minpoly_algEquiv_toLinearMap σ (isOfFinOrder_of_finite σ), hσ',\n      sub_eq_zero, IsGalois.card_aut_eq_finrank] using hζ.pow_eq_one\n  obtain ⟨v, hv⟩ := (Module.End.hasEigenvalue_of_isRoot this).exists_hasEigenvector\n  have hv' := hv.pow_apply\n  simp_rw [← AlgEquiv.pow_toLinearMap, AlgEquiv.toLinearMap_apply] at hv'\n  -- We claim that `v` is the desired root.\n  refine ⟨v, ?_, ?_⟩\n  · -- Since `v ^ n` is fixed by `σ` (`σ (v ^ n) = ζ ^ n • v ^ n = v ^ n`), it is in `K`.\n    rw [← IntermediateField.mem_bot,\n      ← OrderIso.map_bot IsGalois.intermediateFieldEquivSubgroup.symm]\n    intro ⟨σ', hσ'⟩\n    obtain ⟨n, rfl : σ ^ n = σ'⟩ := mem_powers_iff_mem_zpowers.mpr (hσ σ')\n    rw [smul_pow', Submonoid.smul_def, AlgEquiv.smul_def, hv', smul_pow, ← pow_mul,\n      mul_comm, pow_mul, hζ.pow_eq_one, one_pow, one_smul]\n  · -- Since `σ` does not fix `K⟮α⟯`, `K⟮α⟯` is `L`.\n    apply IsGalois.intermediateFieldEquivSubgroup.injective\n    rw [map_top, eq_top_iff]\n    intros σ' hσ'\n    obtain ⟨n, rfl : σ ^ n = σ'⟩ := mem_powers_iff_mem_zpowers.mpr (hσ σ')\n    have := hσ' ⟨v, IntermediateField.mem_adjoin_simple_self K v⟩\n    simp only [AlgEquiv.smul_def, hv'] at this\n    conv_rhs at this => rw [← one_smul K v]\n    obtain ⟨k, rfl⟩ := hζ.dvd_of_pow_eq_one n (smul_left_injective K hv.2 this)\n    rw [pow_mul, ← IsGalois.card_aut_eq_finrank, pow_card_eq_one, one_pow]\n    exact one_mem _\n\n"}
{"name":"irreducible_X_pow_sub_C_of_root_adjoin_eq_top","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\na : K\nα : L\nha : Eq (HPow.hPow α (Module.finrank K L)) ((algebraMap K L) a)\nhα : Eq (IntermediateField.adjoin K (Singleton.singleton α)) Top.top\n⊢ Irreducible (HSub.hSub (HPow.hPow Polynomial.X (Module.finrank K L)) (Polynomial.C a))","decl":"lemma irreducible_X_pow_sub_C_of_root_adjoin_eq_top\n    {a : K} {α : L} (ha : α ^ (finrank K L) = algebraMap K L a) (hα : K⟮α⟯ = ⊤) :\n    Irreducible (X ^ (finrank K L) - C a) := by\n  have : X ^ (finrank K L) - C a = minpoly K α := by\n    refine minpoly.unique _ _ (monic_X_pow_sub_C _ finrank_pos.ne.symm) ?_ ?_\n    · simp only [aeval_def, eval₂_sub, eval₂_X_pow, ha, eval₂_C, sub_self]\n    · intros q hq hq'\n      refine le_trans ?_ (degree_le_of_dvd (minpoly.dvd _ _ hq') hq.ne_zero)\n      rw [degree_X_pow_sub_C finrank_pos,\n        degree_eq_natDegree (minpoly.ne_zero (IsIntegral.of_finite K α)),\n        ← IntermediateField.adjoin.finrank (IsIntegral.of_finite K α), hα, Nat.cast_le]\n      exact (finrank_top K L).ge\n  exact this ▸ minpoly.irreducible (IsIntegral.of_finite K α)\n\n"}
{"name":"isSplittingField_X_pow_sub_C_of_root_adjoin_eq_top","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u\ninst✝³ : Field K\nL : Type u_1\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\nhK : (primitiveRoots (Module.finrank K L) K).Nonempty\na : K\nα : L\nha : Eq (HPow.hPow α (Module.finrank K L)) ((algebraMap K L) a)\nhα : Eq (IntermediateField.adjoin K (Singleton.singleton α)) Top.top\n⊢ Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X (Module.finrank K L)) (Polynomial.C a))","decl":"include hK in\nlemma isSplittingField_X_pow_sub_C_of_root_adjoin_eq_top\n    {a : K} {α : L} (ha : α ^ (finrank K L) = algebraMap K L a) (hα : K⟮α⟯ = ⊤) :\n    IsSplittingField K L (X ^ (finrank K L) - C a) := by\n  constructor\n  · rw [← splits_id_iff_splits, Polynomial.map_sub, Polynomial.map_pow, Polynomial.map_C,\n      Polynomial.map_X]\n    have ⟨_, hζ⟩ := hK\n    rw [mem_primitiveRoots finrank_pos] at hζ\n    exact X_pow_sub_C_splits_of_isPrimitiveRoot (hζ.map_of_injective (algebraMap K _).injective) ha\n  · rw [eq_top_iff, ← IntermediateField.top_toSubalgebra, ← hα,\n      IntermediateField.adjoin_simple_toSubalgebra_of_integral (IsIntegral.of_finite K α)]\n    apply Algebra.adjoin_mono\n    rw [Set.singleton_subset_iff, mem_rootSet_of_ne (X_pow_sub_C_ne_zero finrank_pos a),\n      aeval_def, eval₂_sub, eval₂_X_pow, eval₂_C, ha, sub_self]\n\n"}
{"name":"isCyclic_tfae","module":"Mathlib.FieldTheory.KummerExtension","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\nhK : (primitiveRoots (Module.finrank K L) K).Nonempty\n⊢ (List.cons (And (IsGalois K L) (IsCyclic (AlgEquiv K L L))) (List.cons (Exists fun a => And (Irreducible (HSub.hSub (HPow.hPow Polynomial.X (Module.finrank K L)) (Polynomial.C a))) (Polynomial.IsSplittingField K L (HSub.hSub (HPow.hPow Polynomial.X (Module.finrank K L)) (Polynomial.C a)))) (List.cons (Exists fun α => And (Membership.mem (Set.range ⇑(algebraMap K L)) (HPow.hPow α (Module.finrank K L))) (Eq (IntermediateField.adjoin K (Singleton.singleton α)) Top.top)) List.nil))).TFAE","decl":"open Module in\n/--\nSuppose `L/K` is a finite extension of dimension `n`, and `K` contains all `n`-th roots of unity.\nThen `L/K` is cyclic iff\n`L` is a splitting field of some irreducible polynomial of the form `Xⁿ - a : K[X]` iff\n`L = K[α]` for some `αⁿ ∈ K`.\n-/\nlemma isCyclic_tfae (K L) [Field K] [Field L] [Algebra K L] [FiniteDimensional K L]\n    (hK : (primitiveRoots (Module.finrank K L) K).Nonempty) :\n    List.TFAE [\n      IsGalois K L ∧ IsCyclic (L ≃ₐ[K] L),\n      ∃ a : K, Irreducible (X ^ (finrank K L) - C a) ∧\n        IsSplittingField K L (X ^ (finrank K L) - C a),\n      ∃ (α : L), α ^ (finrank K L) ∈ Set.range (algebraMap K L) ∧ K⟮α⟯ = ⊤] := by\n  have : NeZero (Module.finrank K L) := NeZero.of_pos finrank_pos\n  tfae_have 1 → 3\n  | ⟨inst₁, inst₂⟩ => exists_root_adjoin_eq_top_of_isCyclic K L hK\n  tfae_have 3 → 2\n  | ⟨α, ⟨a, ha⟩, hα⟩ => ⟨a, irreducible_X_pow_sub_C_of_root_adjoin_eq_top ha.symm hα,\n      isSplittingField_X_pow_sub_C_of_root_adjoin_eq_top hK ha.symm hα⟩\n  tfae_have 2 → 1\n  | ⟨a, H, inst⟩ => ⟨isGalois_of_isSplittingField_X_pow_sub_C hK H L,\n      isCyclic_of_isSplittingField_X_pow_sub_C hK H L⟩\n  tfae_finish\n"}
