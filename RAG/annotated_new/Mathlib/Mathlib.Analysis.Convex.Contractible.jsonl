{"name":"StarConvex.contractibleSpace","module":"Mathlib.Analysis.Convex.Contractible","initialProofState":"E : Type u_1\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module Real E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul Real E\ns : Set E\nx : E\nh : StarConvex Real x s\nhne : s.Nonempty\n⊢ ContractibleSpace ↑s","decl":"/-- A non-empty star convex set is a contractible space. -/\nprotected theorem StarConvex.contractibleSpace (h : StarConvex ℝ x s) (hne : s.Nonempty) :\n    ContractibleSpace s := by\n  refine\n    (contractible_iff_id_nullhomotopic s).2\n      ⟨⟨x, h.mem hne⟩,\n        ⟨⟨⟨fun p => ⟨p.1.1 • x + (1 - p.1.1) • (p.2 : E), ?_⟩, ?_⟩, fun x => ?_, fun x => ?_⟩⟩⟩\n  · exact h p.2.2 p.1.2.1 (sub_nonneg.2 p.1.2.2) (add_sub_cancel _ _)\n  · exact\n      ((continuous_subtype_val.fst'.smul continuous_const).add\n            ((continuous_const.sub continuous_subtype_val.fst').smul\n              continuous_subtype_val.snd')).subtype_mk\n        _\n  · ext1\n    simp\n  · ext1\n    simp\n\n"}
{"name":"Convex.contractibleSpace","module":"Mathlib.Analysis.Convex.Contractible","initialProofState":"E : Type u_1\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module Real E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul Real E\ns : Set E\nhs : Convex Real s\nhne : s.Nonempty\n⊢ ContractibleSpace ↑s","decl":"/-- A non-empty convex set is a contractible space. -/\nprotected theorem Convex.contractibleSpace (hs : Convex ℝ s) (hne : s.Nonempty) :\n    ContractibleSpace s :=\n  let ⟨_, hx⟩ := hne\n  (hs.starConvex hx).contractibleSpace hne\n\n"}
{"name":"RealTopologicalVectorSpace.contractibleSpace","module":"Mathlib.Analysis.Convex.Contractible","initialProofState":"E : Type u_1\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module Real E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul Real E\n⊢ ContractibleSpace E","decl":"instance (priority := 100) RealTopologicalVectorSpace.contractibleSpace : ContractibleSpace E :=\n  (Homeomorph.Set.univ E).contractibleSpace_iff.mp <|\n    convex_univ.contractibleSpace Set.univ_nonempty\n"}
