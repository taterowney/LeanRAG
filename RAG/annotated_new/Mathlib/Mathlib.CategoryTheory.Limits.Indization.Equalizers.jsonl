{"name":"CategoryTheory.Limits.isIndObject_limit_comp_yoneda_comp_colim","module":"Mathlib.CategoryTheory.Limits.Indization.Equalizers","initialProofState":"C : Type u\ninst✝⁴ : CategoryTheory.Category.{v, u} C\nI : Type v\ninst✝³ : CategoryTheory.SmallCategory I\ninst✝² : CategoryTheory.IsFiltered I\nJ : Type\ninst✝¹ : CategoryTheory.SmallCategory J\ninst✝ : CategoryTheory.FinCategory J\nF : CategoryTheory.Functor J (CategoryTheory.Functor I C)\nhF : ∀ (i : I), CategoryTheory.Limits.IsIndObject (CategoryTheory.Limits.limit ((F.flip.obj i).comp CategoryTheory.yoneda))\n⊢ CategoryTheory.Limits.IsIndObject (CategoryTheory.Limits.limit (F.comp (((CategoryTheory.whiskeringRight I C (CategoryTheory.Functor (Opposite C) (Type v))).obj CategoryTheory.yoneda).comp CategoryTheory.Limits.colim)))","decl":"/--\nSuppose `F : J ⥤ I ⥤ C` is a finite diagram in the functor category `I ⥤ C`, where `I` is small\nand filtered. If `i : I`, we can apply the Yoneda embedding to `F(·, i)` to obtain a\ndiagram of presheaves `J ⥤ Cᵒᵖ ⥤ Type v`. Suppose that the limits of this diagram is always an\nind-object.\n\nFor `j : J` we can apply the Yoneda embedding to `F(j, ·)` and take colimits to obtain a finite\ndiagram `J ⥤ Cᵒᵖ ⥤ Type v` (which is actually a diagram `J ⥤ Ind C`). The theorem states that\nthe limit of this diagram is an ind-object.\n\nThis theorem will be used to construct equalizers in the category of ind-objects. It can be\ninterpreted as saying that ind-objects are closed under finite limits as long as the diagram\nwe are taking the limit of comes from a diagram in a functor category `I ⥤ C`. We will show (TODO)\nthat this is the case for any parallel pair of morphisms in `Ind C` and deduce that ind-objects\nare closed under equalizers.\n\nThis is Proposition 6.1.16(i) in [Kashiwara2006].\n-/\ntheorem isIndObject_limit_comp_yoneda_comp_colim\n    (hF : ∀ i, IsIndObject (limit (F.flip.obj i ⋙ yoneda))) :\n    IsIndObject (limit (F ⋙ (whiskeringRight _ _ _).obj yoneda ⋙ colim)) := by\n  let G : J ⥤ I ⥤ (Cᵒᵖ ⥤ Type v) := F ⋙ (whiskeringRight _ _ _).obj yoneda\n  apply IsIndObject.map (HasLimit.isoOfNatIso (colimitFlipIsoCompColim G)).hom\n  apply IsIndObject.map (colimitLimitIso G).hom\n  apply isIndObject_colimit\n  exact fun i => IsIndObject.map (limitObjIsoLimitCompEvaluation _ _).inv (hF i)\n\n"}
{"name":"CategoryTheory.Limits.closedUnderLimitsOfShape_walkingParallelPair_isIndObject","module":"Mathlib.CategoryTheory.Limits.Indization.Equalizers","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasEqualizers C\n⊢ CategoryTheory.Limits.ClosedUnderLimitsOfShape CategoryTheory.Limits.WalkingParallelPair CategoryTheory.Limits.IsIndObject","decl":"/-- If `C` has equalizers. then ind-objects are closed under equalizers.\n\nThis is Proposition 6.1.17(i) in [Kashiwara2006].\n-/\ntheorem closedUnderLimitsOfShape_walkingParallelPair_isIndObject [HasEqualizers C] :\n    ClosedUnderLimitsOfShape WalkingParallelPair (IsIndObject (C := C)) := by\n  apply closedUnderLimitsOfShape_of_limit\n  intro F hF h\n  obtain ⟨P⟩ := nonempty_indParallelPairPresentation (h WalkingParallelPair.zero)\n    (h WalkingParallelPair.one) (F.map WalkingParallelPairHom.left)\n    (F.map WalkingParallelPairHom.right)\n  exact IsIndObject.map\n    (HasLimit.isoOfNatIso (P.parallelPairIsoParallelPairCompYoneda.symm ≪≫\n      (diagramIsoParallelPair _).symm)).hom\n    (isIndObject_limit_comp_yoneda_comp_colim (parallelPair P.φ P.ψ)\n      (fun i => isIndObject_limit_comp_yoneda _))\n\n"}
