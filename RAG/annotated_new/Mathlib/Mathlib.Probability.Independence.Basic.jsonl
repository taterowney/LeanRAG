{"name":"ProbabilityTheory.iIndepSets_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nx✝ : MeasurableSpace Ω\nπ : ι → Set (Set Ω)\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndepSets π μ) (∀ (s : Finset ι) {f : ι → Set Ω}, (∀ (i : ι), Membership.mem s i → Membership.mem (π i) (f i)) → Eq (μ (Set.iInter fun i => Set.iInter fun h => f i)) (s.prod fun i => μ (f i)))","decl":"lemma iIndepSets_iff (π : ι → Set (Set Ω)) (μ : Measure Ω) :\n    iIndepSets π μ ↔ ∀ (s : Finset ι) {f : ι → Set Ω} (_H : ∀ i, i ∈ s → f i ∈ π i),\n      μ (⋂ i ∈ s, f i) = ∏ i ∈ s, μ (f i) := by\n  simp only [iIndepSets, Kernel.iIndepSets, ae_dirac_eq, Filter.eventually_pure, Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.iIndepSets.meas_biInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nπ : ι → Set (Set Ω)\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh : ProbabilityTheory.iIndepSets π μ\ns : Finset ι\nf : ι → Set Ω\nhf : ∀ (i : ι), Membership.mem s i → Membership.mem (π i) (f i)\n⊢ Eq (μ (Set.iInter fun i => Set.iInter fun h => f i)) (s.prod fun i => μ (f i))","decl":"lemma iIndepSets.meas_biInter (h : iIndepSets π μ) (s : Finset ι) {f : ι → Set Ω}\n    (hf : ∀ i, i ∈ s → f i ∈ π i) : μ (⋂ i ∈ s, f i) = ∏ i ∈ s, μ (f i) :=\n  (iIndepSets_iff _ _).1 h s hf\n\n"}
{"name":"ProbabilityTheory.iIndepSets.isProbabilityMeasure","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nπ : ι → Set (Set Ω)\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh : ProbabilityTheory.iIndepSets π μ\n⊢ MeasureTheory.IsProbabilityMeasure μ","decl":"lemma iIndepSets.isProbabilityMeasure (h : iIndepSets π μ) : IsProbabilityMeasure μ :=\n  ⟨by simpa using h ∅ (f := fun _ ↦ univ)⟩\n\n"}
{"name":"ProbabilityTheory.iIndepSets.meas_iInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nπ : ι → Set (Set Ω)\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set Ω\ninst✝ : Fintype ι\nh : ProbabilityTheory.iIndepSets π μ\nhs : ∀ (i : ι), Membership.mem (π i) (s i)\n⊢ Eq (μ (Set.iInter fun i => s i)) (Finset.univ.prod fun i => μ (s i))","decl":"lemma iIndepSets.meas_iInter [Fintype ι] (h : iIndepSets π μ) (hs : ∀ i, s i ∈ π i) :\n    μ (⋂ i, s i) = ∏ i, μ (s i) := by simp [← h.meas_biInter _ fun _i _ ↦ hs _]\n\n"}
{"name":"ProbabilityTheory.IndepSets_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nx✝ : MeasurableSpace Ω\ns1 s2 : Set (Set Ω)\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.IndepSets s1 s2 μ) (∀ (t1 t2 : Set Ω), Membership.mem s1 t1 → Membership.mem s2 t2 → Eq (μ (Inter.inter t1 t2)) (HMul.hMul (μ t1) (μ t2)))","decl":"lemma IndepSets_iff (s1 s2 : Set (Set Ω)) (μ : Measure Ω) :\n    IndepSets s1 s2 μ ↔ ∀ t1 t2 : Set Ω, t1 ∈ s1 → t2 ∈ s2 → (μ (t1 ∩ t2) = μ t1 * μ t2) := by\n  simp only [IndepSets, Kernel.IndepSets, ae_dirac_eq, Filter.eventually_pure, Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.iIndep_iff_iIndepSets","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndep m μ) (ProbabilityTheory.iIndepSets (fun x => setOf fun s => MeasurableSet s) μ)","decl":"lemma iIndep_iff_iIndepSets (m : ι → MeasurableSpace Ω) {_mΩ : MeasurableSpace Ω} (μ : Measure Ω) :\n    iIndep m μ ↔ iIndepSets (fun x ↦ {s | MeasurableSet[m x] s}) μ := by\n  simp only [iIndep, iIndepSets, Kernel.iIndep]\n\n"}
{"name":"ProbabilityTheory.iIndep.iIndepSets'","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nhμ : ProbabilityTheory.iIndep m μ\n⊢ ProbabilityTheory.iIndepSets (fun x => setOf fun s => MeasurableSet s) μ","decl":"lemma iIndep.iIndepSets' {m : ι → MeasurableSpace Ω}\n    {_ : MeasurableSpace Ω} {μ : Measure Ω} (hμ : iIndep m μ) :\n    iIndepSets (fun x ↦ {s | MeasurableSet[m x] s}) μ := (iIndep_iff_iIndepSets _ _).1 hμ\n\n"}
{"name":"ProbabilityTheory.iIndep.isProbabilityMeasure","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh : ProbabilityTheory.iIndep m μ\n⊢ MeasureTheory.IsProbabilityMeasure μ","decl":"lemma iIndep.isProbabilityMeasure (h : iIndep m μ) : IsProbabilityMeasure μ :=\n  h.iIndepSets'.isProbabilityMeasure\n\n"}
{"name":"ProbabilityTheory.iIndep_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndep m μ) (∀ (s : Finset ι) {f : ι → Set Ω}, (∀ (i : ι), Membership.mem s i → MeasurableSet (f i)) → Eq (μ (Set.iInter fun i => Set.iInter fun h => f i)) (s.prod fun i => μ (f i)))","decl":"lemma iIndep_iff (m : ι → MeasurableSpace Ω) {_mΩ : MeasurableSpace Ω} (μ : Measure Ω) :\n    iIndep m μ ↔ ∀ (s : Finset ι) {f : ι → Set Ω} (_H : ∀ i, i ∈ s → MeasurableSet[m i] (f i)),\n      μ (⋂ i ∈ s, f i) = ∏ i ∈ s, μ (f i) := by\n  simp only [iIndep_iff_iIndepSets, iIndepSets_iff]; rfl\n\n"}
{"name":"ProbabilityTheory.iIndep.meas_biInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nS : Finset ι\ns : ι → Set Ω\nhμ : ProbabilityTheory.iIndep m μ\nhs : ∀ (i : ι), Membership.mem S i → MeasurableSet (s i)\n⊢ Eq (μ (Set.iInter fun i => Set.iInter fun h => s i)) (S.prod fun i => μ (s i))","decl":"lemma iIndep.meas_biInter (hμ : iIndep m μ) (hs : ∀ i, i ∈ S → MeasurableSet[m i] (s i)) :\n    μ (⋂ i ∈ S, s i) = ∏ i ∈ S, μ (s i) := (iIndep_iff _ _).1 hμ _ hs\n\n"}
{"name":"ProbabilityTheory.iIndep.meas_iInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set Ω\ninst✝ : Fintype ι\nhμ : ProbabilityTheory.iIndep m μ\nhs : ∀ (i : ι), MeasurableSet (s i)\n⊢ Eq (μ (Set.iInter fun i => s i)) (Finset.univ.prod fun i => μ (s i))","decl":"lemma iIndep.meas_iInter [Fintype ι] (hμ : iIndep m μ) (hs : ∀ i, MeasurableSet[m i] (s i)) :\n    μ (⋂ i, s i) = ∏ i, μ (s i) := by simp [← hμ.meas_biInter fun _ _ ↦ hs _]\n\n"}
{"name":"ProbabilityTheory.Indep_iff_IndepSets","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.Indep m₁ m₂ μ) (ProbabilityTheory.IndepSets (setOf fun s => MeasurableSet s) (setOf fun s => MeasurableSet s) μ)","decl":"lemma Indep_iff_IndepSets (m₁ m₂ : MeasurableSpace Ω) {_mΩ : MeasurableSpace Ω} (μ : Measure Ω) :\n    Indep m₁ m₂ μ ↔ IndepSets {s | MeasurableSet[m₁] s} {s | MeasurableSet[m₂] s} μ := by\n  simp only [Indep, IndepSets, Kernel.Indep]\n\n"}
{"name":"ProbabilityTheory.Indep_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.Indep m₁ m₂ μ) (∀ (t1 t2 : Set Ω), MeasurableSet t1 → MeasurableSet t2 → Eq (μ (Inter.inter t1 t2)) (HMul.hMul (μ t1) (μ t2)))","decl":"lemma Indep_iff (m₁ m₂ : MeasurableSpace Ω) {_mΩ : MeasurableSpace Ω} (μ : Measure Ω) :\n    Indep m₁ m₂ μ\n      ↔ ∀ t1 t2, MeasurableSet[m₁] t1 → MeasurableSet[m₂] t2 → μ (t1 ∩ t2) = μ t1 * μ t2 := by\n  rw [Indep_iff_IndepSets, IndepSets_iff]; rfl\n\n"}
{"name":"ProbabilityTheory.iIndepSet_iff_iIndep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nx✝ : MeasurableSpace Ω\ns : ι → Set Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndepSet s μ) (ProbabilityTheory.iIndep (fun i => MeasurableSpace.generateFrom (Singleton.singleton (s i))) μ)","decl":"lemma iIndepSet_iff_iIndep (s : ι → Set Ω) (μ : Measure Ω) :\n    iIndepSet s μ ↔ iIndep (fun i ↦ generateFrom {s i}) μ := by\n  simp only [iIndepSet, iIndep, Kernel.iIndepSet]\n\n"}
{"name":"ProbabilityTheory.iIndepSet.isProbabilityMeasure","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set Ω\nh : ProbabilityTheory.iIndepSet s μ\n⊢ MeasureTheory.IsProbabilityMeasure μ","decl":"lemma iIndepSet.isProbabilityMeasure (h : iIndepSet s μ) : IsProbabilityMeasure μ :=\n  ((iIndepSet_iff_iIndep _ _).1 h).isProbabilityMeasure\n\n"}
{"name":"ProbabilityTheory.iIndepSet_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nx✝ : MeasurableSpace Ω\ns : ι → Set Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndepSet s μ) (∀ (s' : Finset ι) {f : ι → Set Ω}, (∀ (i : ι), Membership.mem s' i → MeasurableSet (f i)) → Eq (μ (Set.iInter fun i => Set.iInter fun h => f i)) (s'.prod fun i => μ (f i)))","decl":"lemma iIndepSet_iff (s : ι → Set Ω) (μ : Measure Ω) :\n    iIndepSet s μ ↔ ∀ (s' : Finset ι) {f : ι → Set Ω}\n      (_H : ∀ i, i ∈ s' → MeasurableSet[generateFrom {s i}] (f i)),\n      μ (⋂ i ∈ s', f i) = ∏ i ∈ s', μ (f i) := by\n  simp only [iIndepSet_iff_iIndep, iIndep_iff]\n\n"}
{"name":"ProbabilityTheory.IndepSet_iff_Indep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nx✝ : MeasurableSpace Ω\ns t : Set Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.IndepSet s t μ) (ProbabilityTheory.Indep (MeasurableSpace.generateFrom (Singleton.singleton s)) (MeasurableSpace.generateFrom (Singleton.singleton t)) μ)","decl":"lemma IndepSet_iff_Indep (s t : Set Ω) (μ : Measure Ω) :\n    IndepSet s t μ ↔ Indep (generateFrom {s}) (generateFrom {t}) μ := by\n  simp only [IndepSet, Indep, Kernel.IndepSet]\n\n"}
{"name":"ProbabilityTheory.IndepSet_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nx✝ : MeasurableSpace Ω\ns t : Set Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.IndepSet s t μ) (∀ (t1 t2 : Set Ω), MeasurableSet t1 → MeasurableSet t2 → Eq (μ (Inter.inter t1 t2)) (HMul.hMul (μ t1) (μ t2)))","decl":"lemma IndepSet_iff (s t : Set Ω) (μ : Measure Ω) :\n    IndepSet s t μ ↔ ∀ t1 t2, MeasurableSet[generateFrom {s}] t1\n      → MeasurableSet[generateFrom {t}] t2 → μ (t1 ∩ t2) = μ t1 * μ t2 := by\n  simp only [IndepSet_iff_Indep, Indep_iff]\n\n"}
{"name":"ProbabilityTheory.iIndepFun_iff_iIndep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nx✝ : MeasurableSpace Ω\nβ : ι → Type u_6\nm : (x : ι) → MeasurableSpace (β x)\nf : (x : ι) → Ω → β x\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndepFun m f μ) (ProbabilityTheory.iIndep (fun x => MeasurableSpace.comap (f x) (m x)) μ)","decl":"lemma iIndepFun_iff_iIndep {β : ι → Type*}\n    (m : ∀ x : ι, MeasurableSpace (β x)) (f : ∀ x : ι, Ω → β x) (μ : Measure Ω) :\n    iIndepFun m f μ ↔ iIndep (fun x ↦ (m x).comap (f x)) μ := by\n  simp only [iIndepFun, iIndep, Kernel.iIndepFun]\n\n"}
{"name":"ProbabilityTheory.iIndepFun.iIndep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nκ : ι → Type u_5\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nm : (i : ι) → MeasurableSpace (κ i)\nf : (x : ι) → Ω → κ x\nhf : ProbabilityTheory.iIndepFun m f μ\n⊢ ProbabilityTheory.iIndep (fun x => MeasurableSpace.comap (f x) (m x)) μ","decl":"protected lemma iIndepFun.iIndep {m : ∀ i, MeasurableSpace (κ i)} {f : ∀ x : ι, Ω → κ x}\n    (hf : iIndepFun m f μ) :\n    iIndep (fun x ↦ (m x).comap (f x)) μ := hf\n\n"}
{"name":"ProbabilityTheory.iIndepFun_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nx✝ : MeasurableSpace Ω\nβ : ι → Type u_6\nm : (x : ι) → MeasurableSpace (β x)\nf : (x : ι) → Ω → β x\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.iIndepFun m f μ) (∀ (s : Finset ι) {f' : ι → Set Ω}, (∀ (i : ι), Membership.mem s i → MeasurableSet (f' i)) → Eq (μ (Set.iInter fun i => Set.iInter fun h => f' i)) (s.prod fun i => μ (f' i)))","decl":"lemma iIndepFun_iff {β : ι → Type*}\n    (m : ∀ x : ι, MeasurableSpace (β x)) (f : ∀ x : ι, Ω → β x) (μ : Measure Ω) :\n    iIndepFun m f μ ↔ ∀ (s : Finset ι) {f' : ι → Set Ω}\n      (_H : ∀ i, i ∈ s → MeasurableSet[(m i).comap (f i)] (f' i)),\n      μ (⋂ i ∈ s, f' i) = ∏ i ∈ s, μ (f' i) := by\n  simp only [iIndepFun_iff_iIndep, iIndep_iff]\n\n"}
{"name":"ProbabilityTheory.iIndepFun.meas_biInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nκ : ι → Type u_5\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nS : Finset ι\ns : ι → Set Ω\nm : (i : ι) → MeasurableSpace (κ i)\nf : (x : ι) → Ω → κ x\nhf : ProbabilityTheory.iIndepFun m f μ\nhs : ∀ (i : ι), Membership.mem S i → MeasurableSet (s i)\n⊢ Eq (μ (Set.iInter fun i => Set.iInter fun h => s i)) (S.prod fun i => μ (s i))","decl":"lemma iIndepFun.meas_biInter {m : ∀ i, MeasurableSpace (κ i)} {f : ∀ x : ι, Ω → κ x}\n    (hf : iIndepFun m f μ) (hs : ∀ i, i ∈ S → MeasurableSet[(m i).comap (f i)] (s i)) :\n    μ (⋂ i ∈ S, s i) = ∏ i ∈ S, μ (s i) := hf.iIndep.meas_biInter hs\n\n"}
{"name":"ProbabilityTheory.iIndepFun.meas_iInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nκ : ι → Type u_5\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set Ω\ninst✝ : Fintype ι\nm : (i : ι) → MeasurableSpace (κ i)\nf : (x : ι) → Ω → κ x\nhf : ProbabilityTheory.iIndepFun m f μ\nhs : ∀ (i : ι), MeasurableSet (s i)\n⊢ Eq (μ (Set.iInter fun i => s i)) (Finset.univ.prod fun i => μ (s i))","decl":"lemma iIndepFun.meas_iInter [Fintype ι] {m : ∀ i, MeasurableSpace (κ i)} {f : ∀ x : ι, Ω → κ x}\n    (hf : iIndepFun m f μ) (hs : ∀ i, MeasurableSet[(m i).comap (f i)] (s i)) :\n    μ (⋂ i, s i) = ∏ i, μ (s i) := hf.iIndep.meas_iInter hs\n\n"}
{"name":"ProbabilityTheory.IndepFun_iff_Indep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_3\nγ : Type u_4\nx✝ : MeasurableSpace Ω\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nf : Ω → β\ng : Ω → γ\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.IndepFun f g μ) (ProbabilityTheory.Indep (MeasurableSpace.comap f mβ) (MeasurableSpace.comap g mγ) μ)","decl":"lemma IndepFun_iff_Indep [mβ : MeasurableSpace β]\n    [mγ : MeasurableSpace γ] (f : Ω → β) (g : Ω → γ) (μ : Measure Ω) :\n    IndepFun f g μ ↔ Indep (MeasurableSpace.comap f mβ) (MeasurableSpace.comap g mγ) μ := by\n  simp only [IndepFun, Indep, Kernel.IndepFun]\n\n"}
{"name":"ProbabilityTheory.IndepFun_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nx✝ : MeasurableSpace Ω\nβ : Type u_6\nγ : Type u_7\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nf : Ω → β\ng : Ω → γ\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.IndepFun f g μ) (∀ (t1 t2 : Set Ω), MeasurableSet t1 → MeasurableSet t2 → Eq (μ (Inter.inter t1 t2)) (HMul.hMul (μ t1) (μ t2)))","decl":"lemma IndepFun_iff {β γ} [mβ : MeasurableSpace β] [mγ : MeasurableSpace γ]\n    (f : Ω → β) (g : Ω → γ) (μ : Measure Ω) :\n    IndepFun f g μ ↔ ∀ t1 t2, MeasurableSet[MeasurableSpace.comap f mβ] t1\n      → MeasurableSet[MeasurableSpace.comap g mγ] t2 → μ (t1 ∩ t2) = μ t1 * μ t2 := by\n  rw [IndepFun_iff_Indep, Indep_iff]\n\n"}
{"name":"ProbabilityTheory.IndepFun.meas_inter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_3\nγ : Type u_4\nx✝ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nf : Ω → β\ng : Ω → γ\nhfg : ProbabilityTheory.IndepFun f g μ\ns t : Set Ω\nhs : MeasurableSet s\nht : MeasurableSet t\n⊢ Eq (μ (Inter.inter s t)) (HMul.hMul (μ s) (μ t))","decl":"lemma IndepFun.meas_inter [mβ : MeasurableSpace β] [mγ : MeasurableSpace γ] {f : Ω → β} {g : Ω → γ}\n    (hfg : IndepFun f g μ) {s t : Set Ω} (hs : MeasurableSet[mβ.comap f] s)\n    (ht : MeasurableSet[mγ.comap g] t) :\n    μ (s ∩ t) = μ s * μ t :=\n  (IndepFun_iff _ _ _).1 hfg _ _ hs ht\n\n"}
{"name":"ProbabilityTheory.IndepSets.symm","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns₁ s₂ : Set (Set Ω)\nh : ProbabilityTheory.IndepSets s₁ s₂ μ\n⊢ ProbabilityTheory.IndepSets s₂ s₁ μ","decl":"@[symm]\ntheorem IndepSets.symm {s₁ s₂ : Set (Set Ω)} (h : IndepSets s₁ s₂ μ) : IndepSets s₂ s₁ μ :=\n  Kernel.IndepSets.symm h\n\n"}
{"name":"ProbabilityTheory.Indep.symm","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh : ProbabilityTheory.Indep m₁ m₂ μ\n⊢ ProbabilityTheory.Indep m₂ m₁ μ","decl":"@[symm]\ntheorem Indep.symm (h : Indep m₁ m₂ μ) : Indep m₂ m₁ μ := IndepSets.symm h\n\n"}
{"name":"ProbabilityTheory.indep_bot_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm' _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\n⊢ ProbabilityTheory.Indep m' Bot.bot μ","decl":"theorem indep_bot_right [IsZeroOrProbabilityMeasure μ] : Indep m' ⊥ μ :=\n  Kernel.indep_bot_right m'\n\n"}
{"name":"ProbabilityTheory.indep_bot_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm' _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\n⊢ ProbabilityTheory.Indep Bot.bot m' μ","decl":"theorem indep_bot_left [IsZeroOrProbabilityMeasure μ] : Indep ⊥ m' μ := (indep_bot_right m').symm\n\n"}
{"name":"ProbabilityTheory.indepSet_empty_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\ns : Set Ω\n⊢ ProbabilityTheory.IndepSet s EmptyCollection.emptyCollection μ","decl":"theorem indepSet_empty_right [IsZeroOrProbabilityMeasure μ] (s : Set Ω) : IndepSet s ∅ μ :=\n  Kernel.indepSet_empty_right s\n\n"}
{"name":"ProbabilityTheory.indepSet_empty_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\ns : Set Ω\n⊢ ProbabilityTheory.IndepSet EmptyCollection.emptyCollection s μ","decl":"theorem indepSet_empty_left [IsZeroOrProbabilityMeasure μ] (s : Set Ω) : IndepSet ∅ s μ :=\n  Kernel.indepSet_empty_left s\n\n"}
{"name":"ProbabilityTheory.indepSets_of_indepSets_of_le_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns₁ s₂ s₃ : Set (Set Ω)\nh_indep : ProbabilityTheory.IndepSets s₁ s₂ μ\nh31 : HasSubset.Subset s₃ s₁\n⊢ ProbabilityTheory.IndepSets s₃ s₂ μ","decl":"theorem indepSets_of_indepSets_of_le_left {s₁ s₂ s₃ : Set (Set Ω)}\n    (h_indep : IndepSets s₁ s₂ μ) (h31 : s₃ ⊆ s₁) :\n    IndepSets s₃ s₂ μ :=\n  Kernel.indepSets_of_indepSets_of_le_left h_indep h31\n\n"}
{"name":"ProbabilityTheory.indepSets_of_indepSets_of_le_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns₁ s₂ s₃ : Set (Set Ω)\nh_indep : ProbabilityTheory.IndepSets s₁ s₂ μ\nh32 : HasSubset.Subset s₃ s₂\n⊢ ProbabilityTheory.IndepSets s₁ s₃ μ","decl":"theorem indepSets_of_indepSets_of_le_right {s₁ s₂ s₃ : Set (Set Ω)}\n    (h_indep : IndepSets s₁ s₂ μ) (h32 : s₃ ⊆ s₂) :\n    IndepSets s₁ s₃ μ :=\n  Kernel.indepSets_of_indepSets_of_le_right h_indep h32\n\n"}
{"name":"ProbabilityTheory.indep_of_indep_of_le_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ m₃ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_indep : ProbabilityTheory.Indep m₁ m₂ μ\nh31 : LE.le m₃ m₁\n⊢ ProbabilityTheory.Indep m₃ m₂ μ","decl":"theorem indep_of_indep_of_le_left (h_indep : Indep m₁ m₂ μ) (h31 : m₃ ≤ m₁) :\n    Indep m₃ m₂ μ :=\n  Kernel.indep_of_indep_of_le_left h_indep h31\n\n"}
{"name":"ProbabilityTheory.indep_of_indep_of_le_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ m₃ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_indep : ProbabilityTheory.Indep m₁ m₂ μ\nh32 : LE.le m₃ m₂\n⊢ ProbabilityTheory.Indep m₁ m₃ μ","decl":"theorem indep_of_indep_of_le_right (h_indep : Indep m₁ m₂ μ) (h32 : m₃ ≤ m₂) :\n    Indep m₁ m₃ μ :=\n  Kernel.indep_of_indep_of_le_right h_indep h32\n\n"}
{"name":"ProbabilityTheory.IndepSets.union","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns₁ s₂ s' : Set (Set Ω)\nh₁ : ProbabilityTheory.IndepSets s₁ s' μ\nh₂ : ProbabilityTheory.IndepSets s₂ s' μ\n⊢ ProbabilityTheory.IndepSets (Union.union s₁ s₂) s' μ","decl":"theorem IndepSets.union {s₁ s₂ s' : Set (Set Ω)} (h₁ : IndepSets s₁ s' μ) (h₂ : IndepSets s₂ s' μ) :\n    IndepSets (s₁ ∪ s₂) s' μ :=\n  Kernel.IndepSets.union h₁ h₂\n\n"}
{"name":"ProbabilityTheory.IndepSets.union_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns₁ s₂ s' : Set (Set Ω)\n⊢ Iff (ProbabilityTheory.IndepSets (Union.union s₁ s₂) s' μ) (And (ProbabilityTheory.IndepSets s₁ s' μ) (ProbabilityTheory.IndepSets s₂ s' μ))","decl":"@[simp]\ntheorem IndepSets.union_iff {s₁ s₂ s' : Set (Set Ω)} :\n    IndepSets (s₁ ∪ s₂) s' μ ↔ IndepSets s₁ s' μ ∧ IndepSets s₂ s' μ :=\n  Kernel.IndepSets.union_iff\n\n"}
{"name":"ProbabilityTheory.IndepSets.iUnion","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\ns' : Set (Set Ω)\nhyp : ∀ (n : ι), ProbabilityTheory.IndepSets (s n) s' μ\n⊢ ProbabilityTheory.IndepSets (Set.iUnion fun n => s n) s' μ","decl":"theorem IndepSets.iUnion {s : ι → Set (Set Ω)} {s' : Set (Set Ω)}\n    (hyp : ∀ n, IndepSets (s n) s' μ) :\n    IndepSets (⋃ n, s n) s' μ :=\n  Kernel.IndepSets.iUnion hyp\n\n"}
{"name":"ProbabilityTheory.IndepSets.bUnion","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\ns' : Set (Set Ω)\nu : Set ι\nhyp : ∀ (n : ι), Membership.mem u n → ProbabilityTheory.IndepSets (s n) s' μ\n⊢ ProbabilityTheory.IndepSets (Set.iUnion fun n => Set.iUnion fun h => s n) s' μ","decl":"theorem IndepSets.bUnion {s : ι → Set (Set Ω)} {s' : Set (Set Ω)}\n    {u : Set ι} (hyp : ∀ n ∈ u, IndepSets (s n) s' μ) :\n    IndepSets (⋃ n ∈ u, s n) s' μ :=\n  Kernel.IndepSets.bUnion hyp\n\n"}
{"name":"ProbabilityTheory.IndepSets.inter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns₁ s' s₂ : Set (Set Ω)\nh₁ : ProbabilityTheory.IndepSets s₁ s' μ\n⊢ ProbabilityTheory.IndepSets (Inter.inter s₁ s₂) s' μ","decl":"theorem IndepSets.inter {s₁ s' : Set (Set Ω)} (s₂ : Set (Set Ω)) (h₁ : IndepSets s₁ s' μ) :\n    IndepSets (s₁ ∩ s₂) s' μ :=\n  Kernel.IndepSets.inter s₂ h₁\n\n"}
{"name":"ProbabilityTheory.IndepSets.iInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\ns' : Set (Set Ω)\nh : Exists fun n => ProbabilityTheory.IndepSets (s n) s' μ\n⊢ ProbabilityTheory.IndepSets (Set.iInter fun n => s n) s' μ","decl":"theorem IndepSets.iInter {s : ι → Set (Set Ω)} {s' : Set (Set Ω)}\n    (h : ∃ n, IndepSets (s n) s' μ) :\n    IndepSets (⋂ n, s n) s' μ :=\n  Kernel.IndepSets.iInter h\n\n"}
{"name":"ProbabilityTheory.IndepSets.bInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\ns' : Set (Set Ω)\nu : Set ι\nh : Exists fun n => And (Membership.mem u n) (ProbabilityTheory.IndepSets (s n) s' μ)\n⊢ ProbabilityTheory.IndepSets (Set.iInter fun n => Set.iInter fun h => s n) s' μ","decl":"theorem IndepSets.bInter {s : ι → Set (Set Ω)} {s' : Set (Set Ω)}\n    {u : Set ι} (h : ∃ n ∈ u, IndepSets (s n) s' μ) :\n    IndepSets (⋂ n ∈ u, s n) s' μ :=\n  Kernel.IndepSets.bInter h\n\n"}
{"name":"ProbabilityTheory.indepSets_singleton_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns t : Set Ω\n⊢ Iff (ProbabilityTheory.IndepSets (Singleton.singleton s) (Singleton.singleton t) μ) (Eq (μ (Inter.inter s t)) (HMul.hMul (μ s) (μ t)))","decl":"theorem indepSets_singleton_iff {s t : Set Ω} :\n    IndepSets {s} {t} μ ↔ μ (s ∩ t) = μ s * μ t := by\n  simp only [IndepSets, Kernel.indepSets_singleton_iff, ae_dirac_eq, Filter.eventually_pure,\n    Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.iIndepSets.indepSets","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\nh_indep : ProbabilityTheory.iIndepSets s μ\ni j : ι\nhij : Ne i j\n⊢ ProbabilityTheory.IndepSets (s i) (s j) μ","decl":"theorem iIndepSets.indepSets {s : ι → Set (Set Ω)}\n    (h_indep : iIndepSets s μ) {i j : ι} (hij : i ≠ j) : IndepSets (s i) (s j) μ :=\n  Kernel.iIndepSets.indepSets h_indep hij\n\n"}
{"name":"ProbabilityTheory.iIndep.indep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_indep : ProbabilityTheory.iIndep m μ\ni j : ι\nhij : Ne i j\n⊢ ProbabilityTheory.Indep (m i) (m j) μ","decl":"theorem iIndep.indep\n    (h_indep : iIndep m μ) {i j : ι} (hij : i ≠ j) : Indep (m i) (m j) μ :=\n  Kernel.iIndep.indep h_indep hij\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_6\nm : (x : ι) → MeasurableSpace (β x)\nf : (i : ι) → Ω → β i\nhf_Indep : ProbabilityTheory.iIndepFun m f μ\ni j : ι\nhij : Ne i j\n⊢ ProbabilityTheory.IndepFun (f i) (f j) μ","decl":"theorem iIndepFun.indepFun {β : ι → Type*}\n    {m : ∀ x, MeasurableSpace (β x)} {f : ∀ i, Ω → β i} (hf_Indep : iIndepFun m f μ) {i j : ι}\n    (hij : i ≠ j) :\n    IndepFun (f i) (f j) μ :=\n  Kernel.iIndepFun.indepFun hf_Indep hij\n\n"}
{"name":"ProbabilityTheory.iIndep.iIndepSets","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\nhms : ∀ (n : ι), Eq (m n) (MeasurableSpace.generateFrom (s n))\nh_indep : ProbabilityTheory.iIndep m μ\n⊢ ProbabilityTheory.iIndepSets s μ","decl":"theorem iIndep.iIndepSets\n    {s : ι → Set (Set Ω)} (hms : ∀ n, m n = generateFrom (s n)) (h_indep : iIndep m μ) :\n    iIndepSets s μ :=\n  Kernel.iIndep.iIndepSets hms h_indep\n\n"}
{"name":"ProbabilityTheory.Indep.indepSets","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns1 s2 : Set (Set Ω)\nh_indep : ProbabilityTheory.Indep (MeasurableSpace.generateFrom s1) (MeasurableSpace.generateFrom s2) μ\n⊢ ProbabilityTheory.IndepSets s1 s2 μ","decl":"theorem Indep.indepSets {s1 s2 : Set (Set Ω)}\n    (h_indep : Indep (generateFrom s1) (generateFrom s2) μ) :\n    IndepSets s1 s2 μ :=\n  Kernel.Indep.indepSets h_indep\n\n"}
{"name":"ProbabilityTheory.IndepSets.indep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm1 m2 _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\np1 p2 : Set (Set Ω)\nh1 : LE.le m1 _mΩ\nh2 : LE.le m2 _mΩ\nhp1 : IsPiSystem p1\nhp2 : IsPiSystem p2\nhpm1 : Eq m1 (MeasurableSpace.generateFrom p1)\nhpm2 : Eq m2 (MeasurableSpace.generateFrom p2)\nhyp : ProbabilityTheory.IndepSets p1 p2 μ\n⊢ ProbabilityTheory.Indep m1 m2 μ","decl":"theorem IndepSets.indep [IsZeroOrProbabilityMeasure μ]\n    {p1 p2 : Set (Set Ω)} (h1 : m1 ≤ _mΩ) (h2 : m2 ≤ _mΩ) (hp1 : IsPiSystem p1)\n    (hp2 : IsPiSystem p2) (hpm1 : m1 = generateFrom p1) (hpm2 : m2 = generateFrom p2)\n    (hyp : IndepSets p1 p2 μ) :\n    Indep m1 m2 μ :=\n  Kernel.IndepSets.indep h1 h2 hp1 hp2 hpm1 hpm2 hyp\n\n"}
{"name":"ProbabilityTheory.IndepSets.indep'","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\np1 p2 : Set (Set Ω)\nhp1m : ∀ (s : Set Ω), Membership.mem p1 s → MeasurableSet s\nhp2m : ∀ (s : Set Ω), Membership.mem p2 s → MeasurableSet s\nhp1 : IsPiSystem p1\nhp2 : IsPiSystem p2\nhyp : ProbabilityTheory.IndepSets p1 p2 μ\n⊢ ProbabilityTheory.Indep (MeasurableSpace.generateFrom p1) (MeasurableSpace.generateFrom p2) μ","decl":"theorem IndepSets.indep' [IsZeroOrProbabilityMeasure μ]\n    {p1 p2 : Set (Set Ω)} (hp1m : ∀ s ∈ p1, MeasurableSet s) (hp2m : ∀ s ∈ p2, MeasurableSet s)\n    (hp1 : IsPiSystem p1) (hp2 : IsPiSystem p2) (hyp : IndepSets p1 p2 μ) :\n    Indep (generateFrom p1) (generateFrom p2) μ :=\n  Kernel.IndepSets.indep' hp1m hp2m hp1 hp2 hyp\n\n"}
{"name":"ProbabilityTheory.indepSets_piiUnionInter_of_disjoint","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set (Set Ω)\nS T : Set ι\nh_indep : ProbabilityTheory.iIndepSets s μ\nhST : Disjoint S T\n⊢ ProbabilityTheory.IndepSets (piiUnionInter s S) (piiUnionInter s T) μ","decl":"theorem indepSets_piiUnionInter_of_disjoint {s : ι → Set (Set Ω)}\n    {S T : Set ι} (h_indep : iIndepSets s μ) (hST : Disjoint S T) :\n    IndepSets (piiUnionInter s S) (piiUnionInter s T) μ :=\n  Kernel.indepSets_piiUnionInter_of_disjoint h_indep hST\n\n"}
{"name":"ProbabilityTheory.iIndepSet.indep_generateFrom_of_disjoint","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set Ω\nhsm : ∀ (n : ι), MeasurableSet (s n)\nhs : ProbabilityTheory.iIndepSet s μ\nS T : Set ι\nhST : Disjoint S T\n⊢ ProbabilityTheory.Indep (MeasurableSpace.generateFrom (setOf fun t => Exists fun n => And (Membership.mem S n) (Eq (s n) t))) (MeasurableSpace.generateFrom (setOf fun t => Exists fun k => And (Membership.mem T k) (Eq (s k) t))) μ","decl":"theorem iIndepSet.indep_generateFrom_of_disjoint {s : ι → Set Ω}\n    (hsm : ∀ n, MeasurableSet (s n)) (hs : iIndepSet s μ) (S T : Set ι) (hST : Disjoint S T) :\n    Indep (generateFrom { t | ∃ n ∈ S, s n = t }) (generateFrom { t | ∃ k ∈ T, s k = t }) μ :=\n  Kernel.iIndepSet.indep_generateFrom_of_disjoint hsm hs S T hST\n\n"}
{"name":"ProbabilityTheory.indep_iSup_of_disjoint","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_le : ∀ (i : ι), LE.le (m i) _mΩ\nh_indep : ProbabilityTheory.iIndep m μ\nS T : Set ι\nhST : Disjoint S T\n⊢ ProbabilityTheory.Indep (iSup fun i => iSup fun h => m i) (iSup fun i => iSup fun h => m i) μ","decl":"theorem indep_iSup_of_disjoint\n    (h_le : ∀ i, m i ≤ _mΩ) (h_indep : iIndep m μ) {S T : Set ι} (hST : Disjoint S T) :\n    Indep (⨆ i ∈ S, m i) (⨆ i ∈ T, m i) μ :=\n  Kernel.indep_iSup_of_disjoint h_le h_indep hST\n\n"}
{"name":"ProbabilityTheory.indep_iSup_of_directed_le","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nm1 _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\nh_indep : ∀ (i : ι), ProbabilityTheory.Indep (m i) m1 μ\nh_le : ∀ (i : ι), LE.le (m i) _mΩ\nh_le' : LE.le m1 _mΩ\nhm : Directed (fun x1 x2 => LE.le x1 x2) m\n⊢ ProbabilityTheory.Indep (iSup fun i => m i) m1 μ","decl":"theorem indep_iSup_of_directed_le\n    [IsZeroOrProbabilityMeasure μ] (h_indep : ∀ i, Indep (m i) m1 μ)\n    (h_le : ∀ i, m i ≤ _mΩ) (h_le' : m1 ≤ _mΩ) (hm : Directed (· ≤ ·) m) :\n    Indep (⨆ i, m i) m1 μ :=\n  Kernel.indep_iSup_of_directed_le h_indep h_le h_le' hm\n\n"}
{"name":"ProbabilityTheory.iIndepSet.indep_generateFrom_lt","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : Preorder ι\ns : ι → Set Ω\nhsm : ∀ (n : ι), MeasurableSet (s n)\nhs : ProbabilityTheory.iIndepSet s μ\ni : ι\n⊢ ProbabilityTheory.Indep (MeasurableSpace.generateFrom (Singleton.singleton (s i))) (MeasurableSpace.generateFrom (setOf fun t => Exists fun j => And (LT.lt j i) (Eq (s j) t))) μ","decl":"theorem iIndepSet.indep_generateFrom_lt [Preorder ι] {s : ι → Set Ω}\n    (hsm : ∀ n, MeasurableSet (s n)) (hs : iIndepSet s μ) (i : ι) :\n    Indep (generateFrom {s i}) (generateFrom { t | ∃ j < i, s j = t }) μ :=\n  Kernel.iIndepSet.indep_generateFrom_lt hsm hs i\n\n"}
{"name":"ProbabilityTheory.iIndepSet.indep_generateFrom_le","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝ : LinearOrder ι\ns : ι → Set Ω\nhsm : ∀ (n : ι), MeasurableSet (s n)\nhs : ProbabilityTheory.iIndepSet s μ\ni k : ι\nhk : LT.lt i k\n⊢ ProbabilityTheory.Indep (MeasurableSpace.generateFrom (Singleton.singleton (s k))) (MeasurableSpace.generateFrom (setOf fun t => Exists fun j => And (LE.le j i) (Eq (s j) t))) μ","decl":"theorem iIndepSet.indep_generateFrom_le [LinearOrder ι]\n    {s : ι → Set Ω}\n    (hsm : ∀ n, MeasurableSet (s n)) (hs : iIndepSet s μ) (i : ι) {k : ι} (hk : i < k) :\n    Indep (generateFrom {s k}) (generateFrom { t | ∃ j ≤ i, s j = t }) μ :=\n  Kernel.iIndepSet.indep_generateFrom_le hsm hs i hk\n\n"}
{"name":"ProbabilityTheory.iIndepSet.indep_generateFrom_le_nat","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : Nat → Set Ω\nhsm : ∀ (n : Nat), MeasurableSet (s n)\nhs : ProbabilityTheory.iIndepSet s μ\nn : Nat\n⊢ ProbabilityTheory.Indep (MeasurableSpace.generateFrom (Singleton.singleton (s (HAdd.hAdd n 1)))) (MeasurableSpace.generateFrom (setOf fun t => Exists fun k => And (LE.le k n) (Eq (s k) t))) μ","decl":"theorem iIndepSet.indep_generateFrom_le_nat {s : ℕ → Set Ω}\n    (hsm : ∀ n, MeasurableSet (s n)) (hs : iIndepSet s μ) (n : ℕ) :\n    Indep (generateFrom {s (n + 1)}) (generateFrom { t | ∃ k ≤ n, s k = t }) μ :=\n  Kernel.iIndepSet.indep_generateFrom_le_nat hsm hs n\n\n"}
{"name":"ProbabilityTheory.indep_iSup_of_monotone","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nm1 _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹ : SemilatticeSup ι\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\nh_indep : ∀ (i : ι), ProbabilityTheory.Indep (m i) m1 μ\nh_le : ∀ (i : ι), LE.le (m i) _mΩ\nh_le' : LE.le m1 _mΩ\nhm : Monotone m\n⊢ ProbabilityTheory.Indep (iSup fun i => m i) m1 μ","decl":"theorem indep_iSup_of_monotone [SemilatticeSup ι] [IsZeroOrProbabilityMeasure μ]\n    (h_indep : ∀ i, Indep (m i) m1 μ) (h_le : ∀ i, m i ≤ _mΩ) (h_le' : m1 ≤ _mΩ) (hm : Monotone m) :\n    Indep (⨆ i, m i) m1 μ :=\n  Kernel.indep_iSup_of_monotone h_indep h_le h_le' hm\n\n"}
{"name":"ProbabilityTheory.indep_iSup_of_antitone","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\nm1 _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹ : SemilatticeInf ι\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\nh_indep : ∀ (i : ι), ProbabilityTheory.Indep (m i) m1 μ\nh_le : ∀ (i : ι), LE.le (m i) _mΩ\nh_le' : LE.le m1 _mΩ\nhm : Antitone m\n⊢ ProbabilityTheory.Indep (iSup fun i => m i) m1 μ","decl":"theorem indep_iSup_of_antitone [SemilatticeInf ι] [IsZeroOrProbabilityMeasure μ]\n    (h_indep : ∀ i, Indep (m i) m1 μ) (h_le : ∀ i, m i ≤ _mΩ) (h_le' : m1 ≤ _mΩ) (hm : Antitone m) :\n    Indep (⨆ i, m i) m1 μ :=\n  Kernel.indep_iSup_of_antitone h_indep h_le h_le' hm\n\n"}
{"name":"ProbabilityTheory.iIndepSets.piiUnionInter_of_not_mem","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nπ : ι → Set (Set Ω)\na : ι\nS : Finset ι\nhp_ind : ProbabilityTheory.iIndepSets π μ\nhaS : Not (Membership.mem S a)\n⊢ ProbabilityTheory.IndepSets (piiUnionInter π ↑S) (π a) μ","decl":"theorem iIndepSets.piiUnionInter_of_not_mem {π : ι → Set (Set Ω)} {a : ι} {S : Finset ι}\n    (hp_ind : iIndepSets π μ) (haS : a ∉ S) :\n    IndepSets (piiUnionInter π S) (π a) μ :=\n  Kernel.iIndepSets.piiUnionInter_of_not_mem hp_ind haS\n\n"}
{"name":"ProbabilityTheory.iIndepSets.iIndep","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nm : ι → MeasurableSpace Ω\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_le : ∀ (i : ι), LE.le (m i) _mΩ\nπ : ι → Set (Set Ω)\nh_pi : ∀ (n : ι), IsPiSystem (π n)\nh_generate : ∀ (i : ι), Eq (m i) (MeasurableSpace.generateFrom (π i))\nh_ind : ProbabilityTheory.iIndepSets π μ\n⊢ ProbabilityTheory.iIndep m μ","decl":"/-- The measurable space structures generated by independent pi-systems are independent. -/\ntheorem iIndepSets.iIndep\n    (h_le : ∀ i, m i ≤ _mΩ) (π : ι → Set (Set Ω)) (h_pi : ∀ n, IsPiSystem (π n))\n    (h_generate : ∀ i, m i = generateFrom (π i)) (h_ind : iIndepSets π μ) :\n    iIndep m μ :=\n  Kernel.iIndepSets.iIndep m h_le π h_pi h_generate h_ind\n\n"}
{"name":"ProbabilityTheory.indepSet_iff_indepSets_singleton","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\ns t : Set Ω\nhs_meas : MeasurableSet s\nht_meas : MeasurableSet t\nμ : autoParam (MeasureTheory.Measure Ω) _auto✝\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\n⊢ Iff (ProbabilityTheory.IndepSet s t μ) (ProbabilityTheory.IndepSets (Singleton.singleton s) (Singleton.singleton t) μ)","decl":"theorem indepSet_iff_indepSets_singleton (hs_meas : MeasurableSet s)\n    (ht_meas : MeasurableSet t) (μ : Measure Ω := by volume_tac)\n    [IsZeroOrProbabilityMeasure μ] : IndepSet s t μ ↔ IndepSets {s} {t} μ :=\n  Kernel.indepSet_iff_indepSets_singleton hs_meas ht_meas _ _\n\n"}
{"name":"ProbabilityTheory.indepSet_iff_measure_inter_eq_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\ns t : Set Ω\nhs_meas : MeasurableSet s\nht_meas : MeasurableSet t\nμ : autoParam (MeasureTheory.Measure Ω) _auto✝\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\n⊢ Iff (ProbabilityTheory.IndepSet s t μ) (Eq (μ (Inter.inter s t)) (HMul.hMul (μ s) (μ t)))","decl":"theorem indepSet_iff_measure_inter_eq_mul (hs_meas : MeasurableSet s)\n    (ht_meas : MeasurableSet t) (μ : Measure Ω := by volume_tac)\n    [IsZeroOrProbabilityMeasure μ] : IndepSet s t μ ↔ μ (s ∩ t) = μ s * μ t :=\n  (indepSet_iff_indepSets_singleton hs_meas ht_meas μ).trans indepSets_singleton_iff\n\n"}
{"name":"ProbabilityTheory.IndepSet.measure_inter_eq_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\ns t : Set Ω\nμ : MeasureTheory.Measure Ω\nh : ProbabilityTheory.IndepSet s t μ\n⊢ Eq (μ (Inter.inter s t)) (HMul.hMul (μ s) (μ t))","decl":"lemma IndepSet.measure_inter_eq_mul {μ : Measure Ω} (h : IndepSet s t μ) :\n    μ (s ∩ t) = μ s * μ t := by\n  simpa using Kernel.IndepSet.measure_inter_eq_mul _ _ h\n\n"}
{"name":"ProbabilityTheory.IndepSets.indepSet_of_mem","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\ns t : Set Ω\nS T : Set (Set Ω)\nhs : Membership.mem S s\nht : Membership.mem T t\nhs_meas : MeasurableSet s\nht_meas : MeasurableSet t\nμ : autoParam (MeasureTheory.Measure Ω) _auto✝\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\nh_indep : ProbabilityTheory.IndepSets S T μ\n⊢ ProbabilityTheory.IndepSet s t μ","decl":"theorem IndepSets.indepSet_of_mem (hs : s ∈ S) (ht : t ∈ T)\n    (hs_meas : MeasurableSet s) (ht_meas : MeasurableSet t)\n    (μ : Measure Ω := by volume_tac) [IsZeroOrProbabilityMeasure μ]\n    (h_indep : IndepSets S T μ) :\n    IndepSet s t μ :=\n  Kernel.IndepSets.indepSet_of_mem _ _ hs ht hs_meas ht_meas _ _ h_indep\n\n"}
{"name":"ProbabilityTheory.Indep.indepSet_of_measurableSet","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nh_indep : ProbabilityTheory.Indep m₁ m₂ μ\ns t : Set Ω\nhs : MeasurableSet s\nht : MeasurableSet t\n⊢ ProbabilityTheory.IndepSet s t μ","decl":"theorem Indep.indepSet_of_measurableSet\n    (h_indep : Indep m₁ m₂ μ) {s t : Set Ω} (hs : MeasurableSet[m₁] s) (ht : MeasurableSet[m₂] t) :\n    IndepSet s t μ :=\n  Kernel.Indep.indepSet_of_measurableSet h_indep hs ht\n\n"}
{"name":"ProbabilityTheory.indep_iff_forall_indepSet","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nm₁ m₂ _mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n⊢ Iff (ProbabilityTheory.Indep m₁ m₂ μ) (∀ (s t : Set Ω), MeasurableSet s → MeasurableSet t → ProbabilityTheory.IndepSet s t μ)","decl":"theorem indep_iff_forall_indepSet (μ : Measure Ω) :\n    Indep m₁ m₂ μ ↔ ∀ s t, MeasurableSet[m₁] s → MeasurableSet[m₂] t → IndepSet s t μ :=\n  Kernel.indep_iff_forall_indepSet m₁ m₂ _ _\n\n"}
{"name":"ProbabilityTheory.iIndep_comap_mem_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : ι → Set Ω\n⊢ Iff (ProbabilityTheory.iIndep (fun i => MeasurableSpace.comap (fun x => Membership.mem (f i) x) Top.top) μ) (ProbabilityTheory.iIndepSet f μ)","decl":"theorem iIndep_comap_mem_iff {f : ι → Set Ω} :\n    iIndep (fun i => MeasurableSpace.comap (· ∈ f i) ⊤) μ ↔ iIndepSet f μ :=\n  Kernel.iIndep_comap_mem_iff\n\n"}
{"name":"ProbabilityTheory.iIndepSet.iIndep_comap_mem","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : ι → Set Ω\na✝ : ProbabilityTheory.iIndepSet f μ\n⊢ ProbabilityTheory.iIndep (fun i => MeasurableSpace.comap (fun x => Membership.mem (f i) x) Top.top) μ","decl":"alias ⟨_, iIndepSet.iIndep_comap_mem⟩ := iIndep_comap_mem_iff\n\n"}
{"name":"ProbabilityTheory.iIndepSets_singleton_iff","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ns : ι → Set Ω\n⊢ Iff (ProbabilityTheory.iIndepSets (fun i => Singleton.singleton (s i)) μ) (∀ (t : Finset ι), Eq (μ (Set.iInter fun i => Set.iInter fun h => s i)) (t.prod fun i => μ (s i)))","decl":"theorem iIndepSets_singleton_iff {s : ι → Set Ω} :\n    iIndepSets (fun i ↦ {s i}) μ ↔ ∀ t, μ (⋂ i ∈ t, s i) = ∏ i ∈ t, μ (s i) := by\n  simp_rw [iIndepSets, Kernel.iIndepSets_singleton_iff, ae_dirac_eq, Filter.eventually_pure,\n    Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.iIndepSet.meas_biInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : ι → Set Ω\nh : ProbabilityTheory.iIndepSet f μ\ns : Finset ι\n⊢ Eq (μ (Set.iInter fun i => Set.iInter fun h => f i)) (s.prod fun i => μ (f i))","decl":"theorem iIndepSet.meas_biInter {f : ι → Set Ω} (h : iIndepSet f μ) (s : Finset ι) :\n    μ (⋂ i ∈ s, f i) = ∏ i ∈ s, μ (f i) := by\n  simpa using Kernel.iIndepSet.meas_biInter h s\n\n"}
{"name":"ProbabilityTheory.iIndepSet_iff_iIndepSets_singleton","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : ι → Set Ω\nhf : ∀ (i : ι), MeasurableSet (f i)\n⊢ Iff (ProbabilityTheory.iIndepSet f μ) (ProbabilityTheory.iIndepSets (fun i => Singleton.singleton (f i)) μ)","decl":"theorem iIndepSet_iff_iIndepSets_singleton {f : ι → Set Ω} (hf : ∀ i, MeasurableSet (f i)) :\n    iIndepSet f μ ↔ iIndepSets (fun i ↦ {f i}) μ :=\n  Kernel.iIndepSet_iff_iIndepSets_singleton hf\n\n"}
{"name":"ProbabilityTheory.iIndepSet_iff_meas_biInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : ι → Set Ω\nhf : ∀ (i : ι), MeasurableSet (f i)\n⊢ Iff (ProbabilityTheory.iIndepSet f μ) (∀ (s : Finset ι), Eq (μ (Set.iInter fun i => Set.iInter fun h => f i)) (s.prod fun i => μ (f i)))","decl":"theorem iIndepSet_iff_meas_biInter {f : ι → Set Ω} (hf : ∀ i, MeasurableSet (f i)) :\n    iIndepSet f μ ↔ ∀ s, μ (⋂ i ∈ s, f i) = ∏ i ∈ s, μ (f i) := by\n  simp_rw [iIndepSet, Kernel.iIndepSet_iff_meas_biInter hf, ae_dirac_eq, Filter.eventually_pure,\n    Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.iIndepSets.iIndepSet_of_mem","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nπ : ι → Set (Set Ω)\nf : ι → Set Ω\nhfπ : ∀ (i : ι), Membership.mem (π i) (f i)\nhf : ∀ (i : ι), MeasurableSet (f i)\nhπ : ProbabilityTheory.iIndepSets π μ\n⊢ ProbabilityTheory.iIndepSet f μ","decl":"theorem iIndepSets.iIndepSet_of_mem {π : ι → Set (Set Ω)} {f : ι → Set Ω}\n    (hfπ : ∀ i, f i ∈ π i) (hf : ∀ i, MeasurableSet (f i))\n    (hπ : iIndepSets π μ) : iIndepSet f μ :=\n  Kernel.iIndepSets.iIndepSet_of_mem hfπ hf hπ\n\n"}
{"name":"ProbabilityTheory.indepFun_iff_measure_inter_preimage_eq_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\nmβ : MeasurableSpace β\nmβ' : MeasurableSpace β'\n⊢ Iff (ProbabilityTheory.IndepFun f g μ) (∀ (s : Set β) (t : Set β'), MeasurableSet s → MeasurableSet t → Eq (μ (Inter.inter (Set.preimage f s) (Set.preimage g t))) (HMul.hMul (μ (Set.preimage f s)) (μ (Set.preimage g t))))","decl":"theorem indepFun_iff_measure_inter_preimage_eq_mul {mβ : MeasurableSpace β}\n    {mβ' : MeasurableSpace β'} :\n    IndepFun f g μ ↔\n      ∀ s t, MeasurableSet s → MeasurableSet t\n        → μ (f ⁻¹' s ∩ g ⁻¹' t) = μ (f ⁻¹' s) * μ (g ⁻¹' t) := by\n  simp only [IndepFun, Kernel.indepFun_iff_measure_inter_preimage_eq_mul, ae_dirac_eq,\n    Filter.eventually_pure, Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.IndepFun.measure_inter_preimage_eq_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\nmβ : MeasurableSpace β\nmβ' : MeasurableSpace β'\na✝² : ProbabilityTheory.IndepFun f g μ\ns : Set β\nt : Set β'\na✝¹ : MeasurableSet s\na✝ : MeasurableSet t\n⊢ Eq (μ (Inter.inter (Set.preimage f s) (Set.preimage g t))) (HMul.hMul (μ (Set.preimage f s)) (μ (Set.preimage g t)))","decl":"alias ⟨IndepFun.measure_inter_preimage_eq_mul, _⟩ := indepFun_iff_measure_inter_preimage_eq_mul\n\n"}
{"name":"ProbabilityTheory.iIndepFun_iff_measure_inter_preimage_eq_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nι : Type u_10\nβ : ι → Type u_11\nm : (x : ι) → MeasurableSpace (β x)\nf : (i : ι) → Ω → β i\n⊢ Iff (ProbabilityTheory.iIndepFun m f μ) (∀ (S : Finset ι) {sets : (i : ι) → Set (β i)}, (∀ (i : ι), Membership.mem S i → MeasurableSet (sets i)) → Eq (μ (Set.iInter fun i => Set.iInter fun h => Set.preimage (f i) (sets i))) (S.prod fun i => μ (Set.preimage (f i) (sets i))))","decl":"theorem iIndepFun_iff_measure_inter_preimage_eq_mul {ι : Type*} {β : ι → Type*}\n    {m : ∀ x, MeasurableSpace (β x)} {f : ∀ i, Ω → β i} :\n    iIndepFun m f μ ↔\n      ∀ (S : Finset ι) {sets : ∀ i : ι, Set (β i)} (_H : ∀ i, i ∈ S → MeasurableSet[m i] (sets i)),\n        μ (⋂ i ∈ S, f i ⁻¹' sets i) = ∏ i ∈ S, μ (f i ⁻¹' sets i) := by\n  simp only [iIndepFun, Kernel.iIndepFun_iff_measure_inter_preimage_eq_mul, ae_dirac_eq,\n    Filter.eventually_pure, Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.iIndepFun.measure_inter_preimage_eq_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nι : Type u_10\nβ : ι → Type u_11\nm : (x : ι) → MeasurableSpace (β x)\nf : (i : ι) → Ω → β i\na✝ : ProbabilityTheory.iIndepFun m f μ\nS : Finset ι\nsets : (i : ι) → Set (β i)\n_H : ∀ (i : ι), Membership.mem S i → MeasurableSet (sets i)\n⊢ Eq (μ (Set.iInter fun i => Set.iInter fun h => Set.preimage (f i) (sets i))) (S.prod fun i => μ (Set.preimage (f i) (sets i)))","decl":"alias ⟨iIndepFun.measure_inter_preimage_eq_mul, _⟩ := iIndepFun_iff_measure_inter_preimage_eq_mul\n\n"}
{"name":"ProbabilityTheory.iIndepFun.comp","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_10\nγ : ι → Type u_11\nmβ : (i : ι) → MeasurableSpace (β i)\nmγ : (i : ι) → MeasurableSpace (γ i)\nf : (i : ι) → Ω → β i\nh : ProbabilityTheory.iIndepFun mβ f μ\ng : (i : ι) → β i → γ i\nhg : ∀ (i : ι), Measurable (g i)\n⊢ ProbabilityTheory.iIndepFun mγ (fun i => Function.comp (g i) (f i)) μ","decl":"nonrec lemma iIndepFun.comp {β γ : ι → Type*} {mβ : ∀ i, MeasurableSpace (β i)}\n    {mγ : ∀ i, MeasurableSpace (γ i)} {f : ∀ i, Ω → β i}\n    (h : iIndepFun mβ f μ) (g : ∀ i, β i → γ i) (hg : ∀ i, Measurable (g i)) :\n    iIndepFun mγ (fun i ↦ g i ∘ f i) μ := h.comp _ hg\n\n"}
{"name":"ProbabilityTheory.indepFun_iff_indepSet_preimage","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\nmβ : MeasurableSpace β\nmβ' : MeasurableSpace β'\ninst✝ : MeasureTheory.IsZeroOrProbabilityMeasure μ\nhf : Measurable f\nhg : Measurable g\n⊢ Iff (ProbabilityTheory.IndepFun f g μ) (∀ (s : Set β) (t : Set β'), MeasurableSet s → MeasurableSet t → ProbabilityTheory.IndepSet (Set.preimage f s) (Set.preimage g t) μ)","decl":"theorem indepFun_iff_indepSet_preimage {mβ : MeasurableSpace β} {mβ' : MeasurableSpace β'}\n    [IsZeroOrProbabilityMeasure μ] (hf : Measurable f) (hg : Measurable g) :\n    IndepFun f g μ ↔\n      ∀ s t, MeasurableSet s → MeasurableSet t → IndepSet (f ⁻¹' s) (g ⁻¹' t) μ := by\n  simp only [IndepFun, IndepSet, Kernel.indepFun_iff_indepSet_preimage hf hg, ae_dirac_eq,\n    Filter.eventually_pure, Kernel.const_apply]\n\n"}
{"name":"ProbabilityTheory.indepFun_iff_map_prod_eq_prod_map_map","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\nmβ : MeasurableSpace β\nmβ' : MeasurableSpace β'\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhf : AEMeasurable f μ\nhg : AEMeasurable g μ\n⊢ Iff (ProbabilityTheory.IndepFun f g μ) (Eq (MeasureTheory.Measure.map (fun ω => { fst := f ω, snd := g ω }) μ) ((MeasureTheory.Measure.map f μ).prod (MeasureTheory.Measure.map g μ)))","decl":"theorem indepFun_iff_map_prod_eq_prod_map_map {mβ : MeasurableSpace β} {mβ' : MeasurableSpace β'}\n    [IsFiniteMeasure μ] (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) :\n    IndepFun f g μ ↔ μ.map (fun ω ↦ (f ω, g ω)) = (μ.map f).prod (μ.map g) := by\n  rw [indepFun_iff_measure_inter_preimage_eq_mul]\n  have h₀ {s : Set β} {t : Set β'} (hs : MeasurableSet s) (ht : MeasurableSet t) :\n      μ (f ⁻¹' s) * μ (g ⁻¹' t) = μ.map f s * μ.map g t ∧\n      μ (f ⁻¹' s ∩ g ⁻¹' t) = μ.map (fun ω ↦ (f ω, g ω)) (s ×ˢ t) :=\n    ⟨by rw [Measure.map_apply_of_aemeasurable hf hs, Measure.map_apply_of_aemeasurable hg ht],\n      (Measure.map_apply_of_aemeasurable (hf.prod_mk hg) (hs.prod ht)).symm⟩\n  constructor\n  · refine fun h ↦ (Measure.prod_eq fun s t hs ht ↦ ?_).symm\n    rw [← (h₀ hs ht).1, ← (h₀ hs ht).2, h s t hs ht]\n  · intro h s t hs ht\n    rw [(h₀ hs ht).1, (h₀ hs ht).2, h, Measure.prod_prod]\n\n"}
{"name":"ProbabilityTheory.IndepFun.symm","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\nx✝¹ : MeasurableSpace β\nx✝ : MeasurableSpace β'\nhfg : ProbabilityTheory.IndepFun f g μ\n⊢ ProbabilityTheory.IndepFun g f μ","decl":"@[symm]\nnonrec theorem IndepFun.symm {_ : MeasurableSpace β} {_ : MeasurableSpace β'}\n    (hfg : IndepFun f g μ) : IndepFun g f μ := hfg.symm\n\n"}
{"name":"ProbabilityTheory.IndepFun.ae_eq","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\nmβ : MeasurableSpace β\nmβ' : MeasurableSpace β'\nf' : Ω → β\ng' : Ω → β'\nhfg : ProbabilityTheory.IndepFun f g μ\nhf : (MeasureTheory.ae μ).EventuallyEq f f'\nhg : (MeasureTheory.ae μ).EventuallyEq g g'\n⊢ ProbabilityTheory.IndepFun f' g' μ","decl":"theorem IndepFun.ae_eq {mβ : MeasurableSpace β} {mβ' : MeasurableSpace β'}\n    {f' : Ω → β} {g' : Ω → β'} (hfg : IndepFun f g μ)\n    (hf : f =ᵐ[μ] f') (hg : g =ᵐ[μ] g') : IndepFun f' g' μ := by\n  refine Kernel.IndepFun.ae_eq hfg ?_ ?_ <;>\n    simp only [ae_dirac_eq, Filter.eventually_pure, Kernel.const_apply]\n  exacts [hf, hg]\n\n"}
{"name":"ProbabilityTheory.IndepFun.comp","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\nγ : Type u_8\nγ' : Type u_9\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\n_mβ : MeasurableSpace β\n_mβ' : MeasurableSpace β'\n_mγ : MeasurableSpace γ\n_mγ' : MeasurableSpace γ'\nφ : β → γ\nψ : β' → γ'\nhfg : ProbabilityTheory.IndepFun f g μ\nhφ : Measurable φ\nhψ : Measurable ψ\n⊢ ProbabilityTheory.IndepFun (Function.comp φ f) (Function.comp ψ g) μ","decl":"theorem IndepFun.comp {_mβ : MeasurableSpace β} {_mβ' : MeasurableSpace β'}\n    {_mγ : MeasurableSpace γ} {_mγ' : MeasurableSpace γ'} {φ : β → γ} {ψ : β' → γ'}\n    (hfg : IndepFun f g μ) (hφ : Measurable φ) (hψ : Measurable ψ) :\n    IndepFun (φ ∘ f) (ψ ∘ g) μ :=\n  Kernel.IndepFun.comp hfg hφ hψ\n\n"}
{"name":"ProbabilityTheory.IndepFun.neg_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\n_mβ : MeasurableSpace β\n_mβ' : MeasurableSpace β'\ninst✝¹ : Neg β'\ninst✝ : MeasurableNeg β'\nhfg : ProbabilityTheory.IndepFun f g μ\n⊢ ProbabilityTheory.IndepFun f (Neg.neg g) μ","decl":"theorem IndepFun.neg_right {_mβ : MeasurableSpace β} {_mβ' : MeasurableSpace β'} [Neg β']\n    [MeasurableNeg β'] (hfg : IndepFun f g μ) :\n    IndepFun f (-g) μ := hfg.comp measurable_id measurable_neg\n\n"}
{"name":"ProbabilityTheory.IndepFun.neg_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nβ : Type u_6\nβ' : Type u_7\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nf : Ω → β\ng : Ω → β'\n_mβ : MeasurableSpace β\n_mβ' : MeasurableSpace β'\ninst✝¹ : Neg β\ninst✝ : MeasurableNeg β\nhfg : ProbabilityTheory.IndepFun f g μ\n⊢ ProbabilityTheory.IndepFun (Neg.neg f) g μ","decl":"theorem IndepFun.neg_left {_mβ : MeasurableSpace β} {_mβ' : MeasurableSpace β'} [Neg β]\n    [MeasurableNeg β] (hfg : IndepFun f g μ) :\n    IndepFun (-f) g μ := hfg.comp measurable_neg measurable_id\n\n"}
{"name":"ProbabilityTheory.iIndepFun.of_subsingleton","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_10\nm : (i : ι) → MeasurableSpace (β i)\nf : (i : ι) → Ω → β i\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\ninst✝ : Subsingleton ι\n⊢ ProbabilityTheory.iIndepFun m f μ","decl":"@[nontriviality]\nlemma iIndepFun.of_subsingleton [IsProbabilityMeasure μ] [Subsingleton ι] : iIndepFun m f μ :=\n  Kernel.iIndepFun.of_subsingleton\n\n"}
{"name":"ProbabilityTheory.iIndepFun.isProbabilityMeasure","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_10\nm : (i : ι) → MeasurableSpace (β i)\nf : (i : ι) → Ω → β i\nh : ProbabilityTheory.iIndepFun m f μ\n⊢ MeasureTheory.IsProbabilityMeasure μ","decl":"lemma iIndepFun.isProbabilityMeasure (h : iIndepFun m f μ) : IsProbabilityMeasure μ :=\n  ⟨by simpa using h.meas_biInter (S := ∅) (s := fun _ ↦ univ)⟩\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_finset","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_10\nm : (i : ι) → MeasurableSpace (β i)\nf : (i : ι) → Ω → β i\nS T : Finset ι\nhST : Disjoint S T\nhf_Indep : ProbabilityTheory.iIndepFun m f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\n⊢ ProbabilityTheory.IndepFun (fun a i => f (↑i) a) (fun a i => f (↑i) a) μ","decl":"/-- If `f` is a family of mutually independent random variables (`iIndepFun m f μ`) and `S, T` are\ntwo disjoint finite index sets, then the tuple formed by `f i` for `i ∈ S` is independent of the\ntuple `(f i)_i` for `i ∈ T`. -/\nlemma iIndepFun.indepFun_finset (S T : Finset ι) (hST : Disjoint S T) (hf_Indep : iIndepFun m f μ)\n    (hf_meas : ∀ i, Measurable (f i)) :\n    IndepFun (fun a (i : S) ↦ f i a) (fun a (i : T) ↦ f i a) μ :=\n  Kernel.iIndepFun.indepFun_finset S T hST hf_Indep hf_meas\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_prod_mk","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_10\nm : (i : ι) → MeasurableSpace (β i)\nf : (i : ι) → Ω → β i\nhf_Indep : ProbabilityTheory.iIndepFun m f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhik : Ne i k\nhjk : Ne j k\n⊢ ProbabilityTheory.IndepFun (fun a => { fst := f i a, snd := f j a }) (f k) μ","decl":"lemma iIndepFun.indepFun_prod_mk (hf_Indep : iIndepFun m f μ) (hf_meas : ∀ i, Measurable (f i))\n    (i j k : ι) (hik : i ≠ k) (hjk : j ≠ k) :\n    IndepFun (fun a => (f i a, f j a)) (f k) μ :=\n  Kernel.iIndepFun.indepFun_prod_mk hf_Indep hf_meas i j k hik hjk\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_prod_mk_prod_mk","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : ι → Type u_10\nm : (i : ι) → MeasurableSpace (β i)\nf : (i : ι) → Ω → β i\nh_indep : ProbabilityTheory.iIndepFun m f μ\nhf : ∀ (i : ι), Measurable (f i)\ni j k l : ι\nhik : Ne i k\nhil : Ne i l\nhjk : Ne j k\nhjl : Ne j l\n⊢ ProbabilityTheory.IndepFun (fun a => { fst := f i a, snd := f j a }) (fun a => { fst := f k a, snd := f l a }) μ","decl":"open Finset in\nlemma iIndepFun.indepFun_prod_mk_prod_mk (h_indep : iIndepFun m f μ) (hf : ∀ i, Measurable (f i))\n    (i j k l : ι) (hik : i ≠ k) (hil : i ≠ l) (hjk : j ≠ k) (hjl : j ≠ l) :\n    IndepFun (fun a ↦ (f i a, f j a)) (fun a ↦ (f k a, f l a)) μ := by\n  classical\n  let g (i j : ι) (v : Π x : ({i, j} : Finset ι), β x) : β i × β j :=\n    ⟨v ⟨i, mem_insert_self _ _⟩, v ⟨j, mem_insert_of_mem <| mem_singleton_self _⟩⟩\n  have hg (i j : ι) : Measurable (g i j) := by fun_prop\n  exact (h_indep.indepFun_finset {i, j} {k, l} (by aesop) hf).comp (hg i j) (hg k l)\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_add_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Add β\ninst✝ : MeasurableAdd₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhik : Ne i k\nhjk : Ne j k\n⊢ ProbabilityTheory.IndepFun (HAdd.hAdd (f i) (f j)) (f k) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_mul_left (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hik : i ≠ k) (hjk : j ≠ k) :\n    IndepFun (f i * f j) (f k) μ :=\n  Kernel.iIndepFun.indepFun_mul_left hf_indep hf_meas i j k hik hjk\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_mul_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Mul β\ninst✝ : MeasurableMul₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhik : Ne i k\nhjk : Ne j k\n⊢ ProbabilityTheory.IndepFun (HMul.hMul (f i) (f j)) (f k) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_mul_left (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hik : i ≠ k) (hjk : j ≠ k) :\n    IndepFun (f i * f j) (f k) μ :=\n  Kernel.iIndepFun.indepFun_mul_left hf_indep hf_meas i j k hik hjk\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_add_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Add β\ninst✝ : MeasurableAdd₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhij : Ne i j\nhik : Ne i k\n⊢ ProbabilityTheory.IndepFun (f i) (HAdd.hAdd (f j) (f k)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_mul_right (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hij : i ≠ j) (hik : i ≠ k) :\n    IndepFun (f i) (f j * f k) μ :=\n  Kernel.iIndepFun.indepFun_mul_right hf_indep hf_meas i j k hij hik\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_mul_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Mul β\ninst✝ : MeasurableMul₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhij : Ne i j\nhik : Ne i k\n⊢ ProbabilityTheory.IndepFun (f i) (HMul.hMul (f j) (f k)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_mul_right (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hij : i ≠ j) (hik : i ≠ k) :\n    IndepFun (f i) (f j * f k) μ :=\n  Kernel.iIndepFun.indepFun_mul_right hf_indep hf_meas i j k hij hik\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_add_add","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Add β\ninst✝ : MeasurableAdd₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k l : ι\nhik : Ne i k\nhil : Ne i l\nhjk : Ne j k\nhjl : Ne j l\n⊢ ProbabilityTheory.IndepFun (HAdd.hAdd (f i) (f j)) (HAdd.hAdd (f k) (f l)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_mul_mul (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i))\n    (i j k l : ι) (hik : i ≠ k) (hil : i ≠ l) (hjk : j ≠ k) (hjl : j ≠ l) :\n    IndepFun (f i * f j) (f k * f l) μ :=\n  Kernel.iIndepFun.indepFun_mul_mul hf_indep hf_meas i j k l hik hil hjk hjl\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_mul_mul","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Mul β\ninst✝ : MeasurableMul₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k l : ι\nhik : Ne i k\nhil : Ne i l\nhjk : Ne j k\nhjl : Ne j l\n⊢ ProbabilityTheory.IndepFun (HMul.hMul (f i) (f j)) (HMul.hMul (f k) (f l)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_mul_mul (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i))\n    (i j k l : ι) (hik : i ≠ k) (hil : i ≠ l) (hjk : j ≠ k) (hjl : j ≠ l) :\n    IndepFun (f i * f j) (f k * f l) μ :=\n  Kernel.iIndepFun.indepFun_mul_mul hf_indep hf_meas i j k l hik hil hjk hjl\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_sub_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Sub β\ninst✝ : MeasurableSub₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhik : Ne i k\nhjk : Ne j k\n⊢ ProbabilityTheory.IndepFun (HSub.hSub (f i) (f j)) (f k) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_div_left (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hik : i ≠ k) (hjk : j ≠ k) :\n    IndepFun (f i / f j) (f k) μ :=\n  Kernel.iIndepFun.indepFun_div_left hf_indep hf_meas i j k hik hjk\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_div_left","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Div β\ninst✝ : MeasurableDiv₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhik : Ne i k\nhjk : Ne j k\n⊢ ProbabilityTheory.IndepFun (HDiv.hDiv (f i) (f j)) (f k) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_div_left (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hik : i ≠ k) (hjk : j ≠ k) :\n    IndepFun (f i / f j) (f k) μ :=\n  Kernel.iIndepFun.indepFun_div_left hf_indep hf_meas i j k hik hjk\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_div_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Div β\ninst✝ : MeasurableDiv₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhij : Ne i j\nhik : Ne i k\n⊢ ProbabilityTheory.IndepFun (f i) (HDiv.hDiv (f j) (f k)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_div_right (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hij : i ≠ j) (hik : i ≠ k) :\n    IndepFun (f i) (f j / f k) μ :=\n  Kernel.iIndepFun.indepFun_div_right hf_indep hf_meas i j k hij hik\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_sub_right","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Sub β\ninst✝ : MeasurableSub₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k : ι\nhij : Ne i j\nhik : Ne i k\n⊢ ProbabilityTheory.IndepFun (f i) (HSub.hSub (f j) (f k)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_div_right (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (i j k : ι) (hij : i ≠ j) (hik : i ≠ k) :\n    IndepFun (f i) (f j / f k) μ :=\n  Kernel.iIndepFun.indepFun_div_right hf_indep hf_meas i j k hij hik\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_sub_sub","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Sub β\ninst✝ : MeasurableSub₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k l : ι\nhik : Ne i k\nhil : Ne i l\nhjk : Ne j k\nhjl : Ne j l\n⊢ ProbabilityTheory.IndepFun (HSub.hSub (f i) (f j)) (HSub.hSub (f k) (f l)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_div_div (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i))\n    (i j k l : ι) (hik : i ≠ k) (hil : i ≠ l) (hjk : j ≠ k) (hjl : j ≠ l) :\n    IndepFun (f i / f j) (f k / f l) μ :=\n  Kernel.iIndepFun.indepFun_div_div hf_indep hf_meas i j k l hik hil hjk hjl\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_div_div","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : Div β\ninst✝ : MeasurableDiv₂ β\nf : ι → Ω → β\nhf_indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ni j k l : ι\nhik : Ne i k\nhil : Ne i l\nhjk : Ne j k\nhjl : Ne j l\n⊢ ProbabilityTheory.IndepFun (HDiv.hDiv (f i) (f j)) (HDiv.hDiv (f k) (f l)) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_div_div (hf_indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i))\n    (i j k l : ι) (hik : i ≠ k) (hil : i ≠ l) (hjk : j ≠ k) (hjl : j ≠ l) :\n    IndepFun (f i / f j) (f k / f l) μ :=\n  Kernel.iIndepFun.indepFun_div_div hf_indep hf_meas i j k l hik hil hjk hjl\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_finset_prod_of_not_mem","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : CommMonoid β\ninst✝ : MeasurableMul₂ β\nf : ι → Ω → β\nhf_Indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ns : Finset ι\ni : ι\nhi : Not (Membership.mem s i)\n⊢ ProbabilityTheory.IndepFun (s.prod fun j => f j) (f i) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_finset_prod_of_not_mem (hf_Indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) {s : Finset ι} {i : ι} (hi : i ∉ s) :\n    IndepFun (∏ j ∈ s, f j) (f i) μ :=\n  Kernel.iIndepFun.indepFun_finset_prod_of_not_mem hf_Indep hf_meas hi\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_finset_sum_of_not_mem","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\nf : ι → Ω → β\nhf_Indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : ι), Measurable (f i)\ns : Finset ι\ni : ι\nhi : Not (Membership.mem s i)\n⊢ ProbabilityTheory.IndepFun (s.sum fun j => f j) (f i) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_finset_prod_of_not_mem (hf_Indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) {s : Finset ι} {i : ι} (hi : i ∉ s) :\n    IndepFun (∏ j ∈ s, f j) (f i) μ :=\n  Kernel.iIndepFun.indepFun_finset_prod_of_not_mem hf_Indep hf_meas hi\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_sum_range_succ","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\nf : Nat → Ω → β\nhf_Indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : Nat), Measurable (f i)\nn : Nat\n⊢ ProbabilityTheory.IndepFun ((Finset.range n).sum fun j => f j) (f n) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_prod_range_succ {f : ℕ → Ω → β} (hf_Indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (n : ℕ) : IndepFun (∏ j ∈ Finset.range n, f j) (f n) μ :=\n  Kernel.iIndepFun.indepFun_prod_range_succ hf_Indep hf_meas n\n\n"}
{"name":"ProbabilityTheory.iIndepFun.indepFun_prod_range_succ","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nβ : Type u_10\nm : MeasurableSpace β\ninst✝¹ : CommMonoid β\ninst✝ : MeasurableMul₂ β\nf : Nat → Ω → β\nhf_Indep : ProbabilityTheory.iIndepFun (fun x => m) f μ\nhf_meas : ∀ (i : Nat), Measurable (f i)\nn : Nat\n⊢ ProbabilityTheory.IndepFun ((Finset.range n).prod fun j => f j) (f n) μ","decl":"@[to_additive]\nlemma iIndepFun.indepFun_prod_range_succ {f : ℕ → Ω → β} (hf_Indep : iIndepFun (fun _ ↦ m) f μ)\n    (hf_meas : ∀ i, Measurable (f i)) (n : ℕ) : IndepFun (∏ j ∈ Finset.range n, f j) (f n) μ :=\n  Kernel.iIndepFun.indepFun_prod_range_succ hf_Indep hf_meas n\n\n"}
{"name":"ProbabilityTheory.iIndepSet.iIndepFun_indicator","module":"Mathlib.Probability.Independence.Basic","initialProofState":"Ω : Type u_1\nι : Type u_2\nβ : Type u_6\n_mΩ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝¹ : Zero β\ninst✝ : One β\nm : MeasurableSpace β\ns : ι → Set Ω\nhs : ProbabilityTheory.iIndepSet s μ\n⊢ ProbabilityTheory.iIndepFun (fun _n => m) (fun n => (s n).indicator fun _ω => 1) μ","decl":"theorem iIndepSet.iIndepFun_indicator [Zero β] [One β] {m : MeasurableSpace β} {s : ι → Set Ω}\n    (hs : iIndepSet s μ) :\n    iIndepFun (fun _n => m) (fun n => (s n).indicator fun _ω => 1) μ :=\n  Kernel.iIndepSet.iIndepFun_indicator hs\n\n"}
{"name":"ProbabilityTheory.cond_iInter","module":"Mathlib.Probability.Independence.Basic","initialProofState":"ι : Type u_6\nΩ : Type u_7\nα : Type u_8\nβ : Type u_9\nmΩ : MeasurableSpace Ω\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure Ω\nX : ι → Ω → α\nY : ι → Ω → β\nf : ι → Set Ω\nt : ι → Set β\ns : Finset ι\ninst✝ : Finite ι\nhY : ∀ (i : ι), Measurable (Y i)\nhindep : ProbabilityTheory.iIndepFun (fun x => mα.prod mβ) (fun i ω => { fst := X i ω, snd := Y i ω }) μ\nhf : ∀ (i : ι), Membership.mem s i → MeasurableSet (f i)\nhy : ∀ (i : ι), Not (Membership.mem s i) → Ne (μ (Set.preimage (Y i) (t i))) 0\nht : ∀ (i : ι), MeasurableSet (t i)\n⊢ Eq ((ProbabilityTheory.cond μ (Set.iInter fun i => Set.preimage (Y i) (t i))) (Set.iInter fun i => Set.iInter fun h => f i)) (s.prod fun i => (ProbabilityTheory.cond μ (Set.preimage (Y i) (t i))) (f i))","decl":"/-- The probability of an intersection of preimages conditioning on another intersection factors\ninto a product. -/\nlemma cond_iInter [Finite ι] (hY : ∀ i, Measurable (Y i))\n    (hindep : iIndepFun (fun _ ↦ mα.prod mβ) (fun i ω ↦ (X i ω, Y i ω)) μ)\n    (hf : ∀ i ∈ s, MeasurableSet[mα.comap (X i)] (f i))\n    (hy : ∀ i ∉ s, μ (Y i ⁻¹' t i) ≠ 0) (ht : ∀ i, MeasurableSet (t i)) :\n    μ[⋂ i ∈ s, f i | ⋂ i, Y i ⁻¹' t i] = ∏ i ∈ s, μ[f i | Y i in t i] := by\n  have : IsProbabilityMeasure (μ : Measure Ω) := hindep.isProbabilityMeasure\n  classical\n  cases nonempty_fintype ι\n  let g (i' : ι) := if i' ∈ s then Y i' ⁻¹' t i' ∩ f i' else Y i' ⁻¹' t i'\n  calc\n    _ = (μ (⋂ i, Y i ⁻¹' t i))⁻¹ * μ ((⋂ i, Y i ⁻¹' t i) ∩ ⋂ i ∈ s, f i) := by\n      rw [cond_apply]; exact .iInter fun i ↦ hY i (ht i)\n    _ = (μ (⋂ i, Y i ⁻¹' t i))⁻¹ * μ (⋂ i, g i) := by\n      congr\n      calc\n        _ = (⋂ i, Y i ⁻¹' t i) ∩ ⋂ i, if i ∈ s then f i else .univ := by\n          congr\n          simp only [Set.iInter_ite, Set.iInter_univ, Set.inter_univ]\n        _ = ⋂ i, Y i ⁻¹' t i ∩ (if i ∈ s then f i else .univ) := by rw [Set.iInter_inter_distrib]\n        _ = _ := Set.iInter_congr fun i ↦ by by_cases hi : i ∈ s <;> simp [hi, g]\n    _ = (∏ i, μ (Y i ⁻¹' t i))⁻¹ * μ (⋂ i, g i) := by\n      rw [hindep.meas_iInter]\n      exact fun i ↦ ⟨.univ ×ˢ t i, MeasurableSet.univ.prod (ht _), by ext; simp [eq_comm]⟩\n    _ = (∏ i, μ (Y i ⁻¹' t i))⁻¹ * ∏ i, μ (g i) := by\n      rw [hindep.meas_iInter]\n      intro i\n      by_cases hi : i ∈ s <;> simp only [hi, ↓reduceIte, g]\n      · obtain ⟨A, hA, hA'⟩ := hf i hi\n        exact .inter ⟨.univ ×ˢ t i, MeasurableSet.univ.prod (ht _), by ext; simp [eq_comm]⟩\n          ⟨A ×ˢ Set.univ, hA.prod .univ, by ext; simp [← hA']⟩\n      · exact ⟨.univ ×ˢ t i, MeasurableSet.univ.prod (ht _), by ext; simp [eq_comm]⟩\n    _ = ∏ i, (μ (Y i ⁻¹' t i))⁻¹ * μ (g i) := by\n      rw [Finset.prod_mul_distrib, ENNReal.prod_inv_distrib]\n      exact fun _ _ i _ _ ↦ .inr <| measure_ne_top _ _\n    _ = ∏ i, if i ∈ s then μ[f i | Y i ⁻¹' t i] else 1 := by\n      refine Finset.prod_congr rfl fun i _ ↦ ?_\n      by_cases hi : i ∈ s\n      · simp only [hi, ↓reduceIte, g, cond_apply (hY i (ht i))]\n      · simp only [hi, ↓reduceIte, g, ENNReal.inv_mul_cancel (hy i hi) (measure_ne_top μ _)]\n    _ = _ := by simp\n\n"}
{"name":"ProbabilityTheory.iIndepFun.cond","module":"Mathlib.Probability.Independence.Basic","initialProofState":"ι : Type u_6\nΩ : Type u_7\nα : Type u_8\nβ : Type u_9\nmΩ : MeasurableSpace Ω\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure Ω\nX : ι → Ω → α\nY : ι → Ω → β\nt : ι → Set β\ninst✝ : Finite ι\nhY : ∀ (i : ι), Measurable (Y i)\nhindep : ProbabilityTheory.iIndepFun (fun x => mα.prod mβ) (fun i ω => { fst := X i ω, snd := Y i ω }) μ\nhy : ∀ (i : ι), Ne (μ (Set.preimage (Y i) (t i))) 0\nht : ∀ (i : ι), MeasurableSet (t i)\n⊢ ProbabilityTheory.iIndepFun (fun x => mα) X (ProbabilityTheory.cond μ (Set.iInter fun i => Set.preimage (Y i) (t i)))","decl":"lemma iIndepFun.cond [Finite ι] (hY : ∀ i, Measurable (Y i))\n    (hindep : iIndepFun (fun _ ↦ mα.prod mβ) (fun i ω ↦ (X i ω, Y i ω)) μ)\n    (hy : ∀ i, μ (Y i ⁻¹' t i) ≠ 0) (ht : ∀ i, MeasurableSet (t i)) :\n    iIndepFun (fun _ ↦ mα) X μ[|⋂ i, Y i ⁻¹' t i] := by\n  rw [iIndepFun_iff]\n  intro s f hf\n  convert cond_iInter hY hindep hf (fun i _ ↦ hy _) ht using 2 with i hi\n  simpa using cond_iInter hY hindep (fun j hj ↦ hf _ <| Finset.mem_singleton.1 hj ▸ hi)\n    (fun i _ ↦ hy _) ht\n\n"}
