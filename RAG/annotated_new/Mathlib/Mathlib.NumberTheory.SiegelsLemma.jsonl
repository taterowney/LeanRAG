{"name":"Int.Matrix.one_le_norm_A_of_ne_zero","module":"Mathlib.NumberTheory.SiegelsLemma","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nA : Matrix α β Int\nhA : Ne A 0\n⊢ LE.le 1 (Norm.norm A)","decl":"/-- The sup norm of a non-zero integer matrix is at least one  -/\nlemma one_le_norm_A_of_ne_zero (hA : A ≠ 0) : 1 ≤ ‖A‖ := by\n  by_contra! h\n  apply hA\n  ext i j\n  simp only [zero_apply]\n  rw [norm_lt_iff Real.zero_lt_one] at h\n  specialize h i j\n  rw [Int.norm_eq_abs] at h\n  norm_cast at h\n  exact Int.abs_lt_one_iff.1 h\n\n-- # Step 2: #S < #T\n\n"}
{"name":"Int.Matrix.exists_ne_zero_int_vec_norm_le","module":"Mathlib.NumberTheory.SiegelsLemma","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nA : Matrix α β Int\nhn : LT.lt (Fintype.card α) (Fintype.card β)\nhm : LT.lt 0 (Fintype.card α)\n⊢ Exists fun t => And (Ne t 0) (And (Eq (A.mulVec t) 0) (LE.le (Norm.norm t) (HPow.hPow (HMul.hMul (↑(Fintype.card β)) (Max.max 1 (Norm.norm A))) (HDiv.hDiv (↑(Fintype.card α)) (HSub.hSub ↑(Fintype.card β) ↑(Fintype.card α))))))","decl":"theorem exists_ne_zero_int_vec_norm_le\n    (hn : Fintype.card α < Fintype.card β) (hm : 0 < Fintype.card α) : ∃ t : β → ℤ, t ≠ 0 ∧\n    A *ᵥ t = 0 ∧ ‖t‖ ≤ (n * max 1 ‖A‖) ^ ((m : ℝ) / (n - m)) := by\n  classical\n  -- Pigeonhole\n  rcases Finset.exists_ne_map_eq_of_card_lt_of_maps_to\n    (card_S_lt_card_T A hn hm) (image_T_subset_S A)\n    with ⟨x, hxT, y, hyT, hneq, hfeq⟩\n  -- Proofs that x - y ≠ 0 and x - y is a solution\n  refine ⟨x - y, sub_ne_zero.mpr hneq, by simp only [mulVec_sub, sub_eq_zero, hfeq], ?_⟩\n  -- Inequality\n  have n_mul_norm_A_pow_e_nonneg : 0 ≤ (n * max 1 ‖A‖) ^ e := by positivity\n  rw [← norm_col (ι := Unit), norm_le_iff n_mul_norm_A_pow_e_nonneg]\n  intro i j\n  simp only [col_apply, Pi.sub_apply]\n  rw [Int.norm_eq_abs, ← Int.cast_abs]\n  refine le_trans ?_ (Nat.floor_le n_mul_norm_A_pow_e_nonneg)\n  norm_cast\n  rw [abs_le]\n  rw [Finset.mem_Icc] at hxT hyT\n  constructor\n  · simp only [neg_le_sub_iff_le_add]\n    apply le_trans (hyT.2 i)\n    norm_cast\n    simp only [le_add_iff_nonneg_left]\n    exact hxT.1 i\n  · simp only [tsub_le_iff_right]\n    apply le_trans (hxT.2 i)\n    norm_cast\n    simp only [le_add_iff_nonneg_right]\n    exact hyT.1 i\n\n\n"}
{"name":"Int.Matrix.exists_ne_zero_int_vec_norm_le'","module":"Mathlib.NumberTheory.SiegelsLemma","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nA : Matrix α β Int\nhn : LT.lt (Fintype.card α) (Fintype.card β)\nhm : LT.lt 0 (Fintype.card α)\nhA : Ne A 0\n⊢ Exists fun t => And (Ne t 0) (And (Eq (A.mulVec t) 0) (LE.le (Norm.norm t) (HPow.hPow (HMul.hMul (↑(Fintype.card β)) (Norm.norm A)) (HDiv.hDiv (↑(Fintype.card α)) (HSub.hSub ↑(Fintype.card β) ↑(Fintype.card α))))))","decl":"theorem exists_ne_zero_int_vec_norm_le'\n    (hn : Fintype.card α < Fintype.card β) (hm : 0 < Fintype.card α) (hA : A ≠ 0) :\n    ∃ t : β → ℤ, t ≠ 0 ∧\n    A *ᵥ t = 0 ∧ ‖t‖ ≤ (n * ‖A‖) ^ ((m : ℝ) / (n - m)) := by\n  have := exists_ne_zero_int_vec_norm_le A hn hm\n  rwa [max_eq_right] at this\n  exact Int.Matrix.one_le_norm_A_of_ne_zero _ hA\n\n"}
