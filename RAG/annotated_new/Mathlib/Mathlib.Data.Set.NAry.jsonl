{"name":"Set.mem_image2_iff","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\na : α\nb : β\nhf : Function.Injective2 f\n⊢ Iff (Membership.mem (Set.image2 f s t) (f a b)) (And (Membership.mem s a) (Membership.mem t b))","decl":"theorem mem_image2_iff (hf : Injective2 f) : f a b ∈ image2 f s t ↔ a ∈ s ∧ b ∈ t :=\n  ⟨by\n    rintro ⟨a', ha', b', hb', h⟩\n    rcases hf h with ⟨rfl, rfl⟩\n    exact ⟨ha', hb'⟩, fun ⟨ha, hb⟩ => mem_image2_of_mem ha hb⟩\n\n"}
{"name":"Set.image2_subset","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt t' : Set β\nhs : HasSubset.Subset s s'\nht : HasSubset.Subset t t'\n⊢ HasSubset.Subset (Set.image2 f s t) (Set.image2 f s' t')","decl":"/-- image2 is monotone with respect to `⊆`. -/\n@[gcongr]\ntheorem image2_subset (hs : s ⊆ s') (ht : t ⊆ t') : image2 f s t ⊆ image2 f s' t' := by\n  rintro _ ⟨a, ha, b, hb, rfl⟩\n  exact mem_image2_of_mem (hs ha) (ht hb)\n\n"}
{"name":"Set.image2_subset_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt t' : Set β\nht : HasSubset.Subset t t'\n⊢ HasSubset.Subset (Set.image2 f s t) (Set.image2 f s t')","decl":"@[gcongr]\ntheorem image2_subset_left (ht : t ⊆ t') : image2 f s t ⊆ image2 f s t' :=\n  image2_subset Subset.rfl ht\n\n"}
{"name":"Set.image2_subset_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt : Set β\nhs : HasSubset.Subset s s'\n⊢ HasSubset.Subset (Set.image2 f s t) (Set.image2 f s' t)","decl":"@[gcongr]\ntheorem image2_subset_right (hs : s ⊆ s') : image2 f s t ⊆ image2 f s' t :=\n  image2_subset hs Subset.rfl\n\n"}
{"name":"Set.image_subset_image2_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nb : β\nhb : Membership.mem t b\n⊢ HasSubset.Subset (Set.image (fun a => f a b) s) (Set.image2 f s t)","decl":"theorem image_subset_image2_left (hb : b ∈ t) : (fun a => f a b) '' s ⊆ image2 f s t :=\n  forall_mem_image.2 fun _ ha => mem_image2_of_mem ha hb\n\n"}
{"name":"Set.image_subset_image2_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\na : α\nha : Membership.mem s a\n⊢ HasSubset.Subset (Set.image (f a) t) (Set.image2 f s t)","decl":"theorem image_subset_image2_right (ha : a ∈ s) : f a '' t ⊆ image2 f s t :=\n  forall_mem_image.2 fun _ => mem_image2_of_mem ha\n\n"}
{"name":"Set.forall_mem_image2","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\np : γ → Prop\n⊢ Iff (∀ (z : γ), Membership.mem (Set.image2 f s t) z → p z) (∀ (x : α), Membership.mem s x → ∀ (y : β), Membership.mem t y → p (f x y))","decl":"lemma forall_mem_image2 {p : γ → Prop} :\n    (∀ z ∈ image2 f s t, p z) ↔ ∀ x ∈ s, ∀ y ∈ t, p (f x y) := by aesop\n\n"}
{"name":"Set.exists_mem_image2","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\np : γ → Prop\n⊢ Iff (Exists fun z => And (Membership.mem (Set.image2 f s t) z) (p z)) (Exists fun x => And (Membership.mem s x) (Exists fun y => And (Membership.mem t y) (p (f x y))))","decl":"lemma exists_mem_image2 {p : γ → Prop} :\n    (∃ z ∈ image2 f s t, p z) ↔ ∃ x ∈ s, ∃ y ∈ t, p (f x y) := by aesop\n\n"}
{"name":"Set.forall_image2_iff","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\np : γ → Prop\n⊢ Iff (∀ (z : γ), Membership.mem (Set.image2 f s t) z → p z) (∀ (x : α), Membership.mem s x → ∀ (y : β), Membership.mem t y → p (f x y))","decl":"@[deprecated (since := \"2024-11-23\")] alias forall_image2_iff := forall_mem_image2\n\n"}
{"name":"Set.image2_subset_iff","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nu : Set γ\n⊢ Iff (HasSubset.Subset (Set.image2 f s t) u) (∀ (x : α), Membership.mem s x → ∀ (y : β), Membership.mem t y → Membership.mem u (f x y))","decl":"@[simp]\ntheorem image2_subset_iff {u : Set γ} : image2 f s t ⊆ u ↔ ∀ x ∈ s, ∀ y ∈ t, f x y ∈ u :=\n  forall_mem_image2\n\n"}
{"name":"Set.image2_subset_iff_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nu : Set γ\n⊢ Iff (HasSubset.Subset (Set.image2 f s t) u) (∀ (a : α), Membership.mem s a → HasSubset.Subset (Set.image (fun b => f a b) t) u)","decl":"theorem image2_subset_iff_left : image2 f s t ⊆ u ↔ ∀ a ∈ s, (fun b => f a b) '' t ⊆ u := by\n  simp_rw [image2_subset_iff, image_subset_iff, subset_def, mem_preimage]\n\n"}
{"name":"Set.image2_subset_iff_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nu : Set γ\n⊢ Iff (HasSubset.Subset (Set.image2 f s t) u) (∀ (b : β), Membership.mem t b → HasSubset.Subset (Set.image (fun a => f a b) s) u)","decl":"theorem image2_subset_iff_right : image2 f s t ⊆ u ↔ ∀ b ∈ t, (fun a => f a b) '' s ⊆ u := by\n  simp_rw [image2_subset_iff, image_subset_iff, subset_def, mem_preimage, @forall₂_swap α]\n\n"}
{"name":"Set.image_prod","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\n⊢ Eq (Set.image (fun x => f x.1 x.2) (SProd.sprod s t)) (Set.image2 f s t)","decl":"lemma image_prod : (fun x : α × β ↦ f x.1 x.2) '' s ×ˢ t = image2 f s t :=\n  ext fun _ ↦ by simp [and_assoc]\n\n"}
{"name":"Set.image_uncurry_prod","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\n⊢ Eq (Set.image (Function.uncurry f) (SProd.sprod s t)) (Set.image2 f s t)","decl":"@[simp] lemma image_uncurry_prod (s : Set α) (t : Set β) : uncurry f '' s ×ˢ t = image2 f s t :=\n  image_prod _\n\n"}
{"name":"Set.image2_mk_eq_prod","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\ns : Set α\nt : Set β\n⊢ Eq (Set.image2 Prod.mk s t) (SProd.sprod s t)","decl":"@[simp] lemma image2_mk_eq_prod : image2 Prod.mk s t = s ×ˢ t := ext <| by simp\n\n-- Porting note: Removing `simp` - LHS does not simplify\n"}
{"name":"Set.image2_curry","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : Prod α β → γ\ns : Set α\nt : Set β\n⊢ Eq (Set.image2 (fun a b => f { fst := a, snd := b }) s t) (Set.image f (SProd.sprod s t))","decl":"lemma image2_curry (f : α × β → γ) (s : Set α) (t : Set β) :\n    image2 (fun a b ↦ f (a, b)) s t = f '' s ×ˢ t := by\n  simp [← image_uncurry_prod, uncurry]\n\n"}
{"name":"Set.image2_swap","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\n⊢ Eq (Set.image2 f s t) (Set.image2 (fun a b => f b a) t s)","decl":"theorem image2_swap (s : Set α) (t : Set β) : image2 f s t = image2 (fun a b => f b a) t s := by\n  ext\n  constructor <;> rintro ⟨a, ha, b, hb, rfl⟩ <;> exact ⟨b, hb, a, ha, rfl⟩\n\n"}
{"name":"Set.image2_union_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt : Set β\n⊢ Eq (Set.image2 f (Union.union s s') t) (Union.union (Set.image2 f s t) (Set.image2 f s' t))","decl":"theorem image2_union_left : image2 f (s ∪ s') t = image2 f s t ∪ image2 f s' t := by\n  simp_rw [← image_prod, union_prod, image_union]\n\n"}
{"name":"Set.image2_union_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt t' : Set β\n⊢ Eq (Set.image2 f s (Union.union t t')) (Union.union (Set.image2 f s t) (Set.image2 f s t'))","decl":"theorem image2_union_right : image2 f s (t ∪ t') = image2 f s t ∪ image2 f s t' := by\n  rw [← image2_swap, image2_union_left, image2_swap f, image2_swap f]\n\n"}
{"name":"Set.image2_inter_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt : Set β\nhf : Function.Injective2 f\n⊢ Eq (Set.image2 f (Inter.inter s s') t) (Inter.inter (Set.image2 f s t) (Set.image2 f s' t))","decl":"lemma image2_inter_left (hf : Injective2 f) :\n    image2 f (s ∩ s') t = image2 f s t ∩ image2 f s' t := by\n  simp_rw [← image_uncurry_prod, inter_prod, image_inter hf.uncurry]\n\n"}
{"name":"Set.image2_inter_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt t' : Set β\nhf : Function.Injective2 f\n⊢ Eq (Set.image2 f s (Inter.inter t t')) (Inter.inter (Set.image2 f s t) (Set.image2 f s t'))","decl":"lemma image2_inter_right (hf : Injective2 f) :\n    image2 f s (t ∩ t') = image2 f s t ∩ image2 f s t' := by\n  simp_rw [← image_uncurry_prod, prod_inter, image_inter hf.uncurry]\n\n"}
{"name":"Set.image2_empty_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\nt : Set β\n⊢ Eq (Set.image2 f EmptyCollection.emptyCollection t) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem image2_empty_left : image2 f ∅ t = ∅ :=\n  ext <| by simp\n\n"}
{"name":"Set.image2_empty_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\n⊢ Eq (Set.image2 f s EmptyCollection.emptyCollection) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem image2_empty_right : image2 f s ∅ = ∅ :=\n  ext <| by simp\n\n"}
{"name":"Set.Nonempty.image2","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\na✝¹ : s.Nonempty\na✝ : t.Nonempty\n⊢ (Set.image2 f s t).Nonempty","decl":"theorem Nonempty.image2 : s.Nonempty → t.Nonempty → (image2 f s t).Nonempty :=\n  fun ⟨_, ha⟩ ⟨_, hb⟩ => ⟨_, mem_image2_of_mem ha hb⟩\n\n"}
{"name":"Set.image2_nonempty_iff","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\n⊢ Iff (Set.image2 f s t).Nonempty (And s.Nonempty t.Nonempty)","decl":"@[simp]\ntheorem image2_nonempty_iff : (image2 f s t).Nonempty ↔ s.Nonempty ∧ t.Nonempty :=\n  ⟨fun ⟨_, a, ha, b, hb, _⟩ => ⟨⟨a, ha⟩, b, hb⟩, fun h => h.1.image2 h.2⟩\n\n"}
{"name":"Set.Nonempty.of_image2_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nh : (Set.image2 f s t).Nonempty\n⊢ s.Nonempty","decl":"theorem Nonempty.of_image2_left (h : (Set.image2 f s t).Nonempty) : s.Nonempty :=\n  (image2_nonempty_iff.1 h).1\n\n"}
{"name":"Set.Nonempty.of_image2_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nh : (Set.image2 f s t).Nonempty\n⊢ t.Nonempty","decl":"theorem Nonempty.of_image2_right (h : (Set.image2 f s t).Nonempty) : t.Nonempty :=\n  (image2_nonempty_iff.1 h).2\n\n"}
{"name":"Set.image2_eq_empty_iff","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\n⊢ Iff (Eq (Set.image2 f s t) EmptyCollection.emptyCollection) (Or (Eq s EmptyCollection.emptyCollection) (Eq t EmptyCollection.emptyCollection))","decl":"@[simp]\ntheorem image2_eq_empty_iff : image2 f s t = ∅ ↔ s = ∅ ∨ t = ∅ := by\n  rw [← not_nonempty_iff_eq_empty, image2_nonempty_iff, not_and_or]\n  simp [not_nonempty_iff_eq_empty]\n\n"}
{"name":"Set.Subsingleton.image2","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\ns : Set α\nt : Set β\nhs : s.Subsingleton\nht : t.Subsingleton\nf : α → β → γ\n⊢ (Set.image2 f s t).Subsingleton","decl":"theorem Subsingleton.image2 (hs : s.Subsingleton) (ht : t.Subsingleton) (f : α → β → γ) :\n    (image2 f s t).Subsingleton := by\n  rw [← image_prod]\n  apply (hs.prod ht).image\n\n"}
{"name":"Set.image2_inter_subset_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt : Set β\n⊢ HasSubset.Subset (Set.image2 f (Inter.inter s s') t) (Inter.inter (Set.image2 f s t) (Set.image2 f s' t))","decl":"theorem image2_inter_subset_left : image2 f (s ∩ s') t ⊆ image2 f s t ∩ image2 f s' t :=\n  Monotone.map_inf_le (fun _ _ ↦ image2_subset_right) s s'\n\n"}
{"name":"Set.image2_inter_subset_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt t' : Set β\n⊢ HasSubset.Subset (Set.image2 f s (Inter.inter t t')) (Inter.inter (Set.image2 f s t) (Set.image2 f s t'))","decl":"theorem image2_inter_subset_right : image2 f s (t ∩ t') ⊆ image2 f s t ∩ image2 f s t' :=\n  Monotone.map_inf_le (fun _ _ ↦ image2_subset_left) t t'\n\n"}
{"name":"Set.image2_singleton_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\nt : Set β\na : α\n⊢ Eq (Set.image2 f (Singleton.singleton a) t) (Set.image (f a) t)","decl":"@[simp]\ntheorem image2_singleton_left : image2 f {a} t = f a '' t :=\n  ext fun x => by simp\n\n"}
{"name":"Set.image2_singleton_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nb : β\n⊢ Eq (Set.image2 f s (Singleton.singleton b)) (Set.image (fun a => f a b) s)","decl":"@[simp]\ntheorem image2_singleton_right : image2 f s {b} = (fun a => f a b) '' s :=\n  ext fun x => by simp\n\n"}
{"name":"Set.image2_singleton","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\na : α\nb : β\n⊢ Eq (Set.image2 f (Singleton.singleton a) (Singleton.singleton b)) (Singleton.singleton (f a b))","decl":"theorem image2_singleton : image2 f {a} {b} = {f a b} := by simp\n\n"}
{"name":"Set.image2_insert_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\na : α\n⊢ Eq (Set.image2 f (Insert.insert a s) t) (Union.union (Set.image (fun b => f a b) t) (Set.image2 f s t))","decl":"@[simp]\ntheorem image2_insert_left : image2 f (insert a s) t = (fun b => f a b) '' t ∪ image2 f s t := by\n  rw [insert_eq, image2_union_left, image2_singleton_left]\n\n"}
{"name":"Set.image2_insert_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\nb : β\n⊢ Eq (Set.image2 f s (Insert.insert b t)) (Union.union (Set.image (fun a => f a b) s) (Set.image2 f s t))","decl":"@[simp]\ntheorem image2_insert_right : image2 f s (insert b t) = (fun a => f a b) '' s ∪ image2 f s t := by\n  rw [insert_eq, image2_union_right, image2_singleton_right]\n\n"}
{"name":"Set.image2_congr","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf f' : α → β → γ\ns : Set α\nt : Set β\nh : ∀ (a : α), Membership.mem s a → ∀ (b : β), Membership.mem t b → Eq (f a b) (f' a b)\n⊢ Eq (Set.image2 f s t) (Set.image2 f' s t)","decl":"@[congr]\ntheorem image2_congr (h : ∀ a ∈ s, ∀ b ∈ t, f a b = f' a b) : image2 f s t = image2 f' s t := by\n  ext\n  constructor <;> rintro ⟨a, ha, b, hb, rfl⟩ <;> exact ⟨a, ha, b, hb, by rw [h a ha b hb]⟩\n\n"}
{"name":"Set.image2_congr'","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf f' : α → β → γ\ns : Set α\nt : Set β\nh : ∀ (a : α) (b : β), Eq (f a b) (f' a b)\n⊢ Eq (Set.image2 f s t) (Set.image2 f' s t)","decl":"/-- A common special case of `image2_congr` -/\ntheorem image2_congr' (h : ∀ a b, f a b = f' a b) : image2 f s t = image2 f' s t :=\n  image2_congr fun a _ b _ => h a b\n\n"}
{"name":"Set.image_image2","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : α → β → γ\ng : γ → δ\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 (fun a b => g (f a b)) s t)","decl":"theorem image_image2 (f : α → β → γ) (g : γ → δ) :\n    g '' image2 f s t = image2 (fun a b => g (f a b)) s t := by\n  simp only [← image_prod, image_image]\n\n"}
{"name":"Set.image2_image_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : γ → β → δ\ng : α → γ\n⊢ Eq (Set.image2 f (Set.image g s) t) (Set.image2 (fun a b => f (g a) b) s t)","decl":"theorem image2_image_left (f : γ → β → δ) (g : α → γ) :\n    image2 f (g '' s) t = image2 (fun a b => f (g a) b) s t := by\n  ext; simp\n\n"}
{"name":"Set.image2_image_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : α → γ → δ\ng : β → γ\n⊢ Eq (Set.image2 f s (Set.image g t)) (Set.image2 (fun a b => f a (g b)) s t)","decl":"theorem image2_image_right (f : α → γ → δ) (g : β → γ) :\n    image2 f s (g '' t) = image2 (fun a b => f a (g b)) s t := by\n  ext; simp\n\n"}
{"name":"Set.image2_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\ns : Set α\nt : Set β\nh : t.Nonempty\n⊢ Eq (Set.image2 (fun x x_1 => x) s t) s","decl":"@[simp]\ntheorem image2_left (h : t.Nonempty) : image2 (fun x _ => x) s t = s := by\n  simp [nonempty_def.mp h, Set.ext_iff]\n\n"}
{"name":"Set.image2_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\ns : Set α\nt : Set β\nh : s.Nonempty\n⊢ Eq (Set.image2 (fun x y => y) s t) t","decl":"@[simp]\ntheorem image2_right (h : s.Nonempty) : image2 (fun _ y => y) s t = t := by\n  simp [nonempty_def.mp h, Set.ext_iff]\n\n"}
{"name":"Set.image2_range","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nf : α' → β' → γ\ng : α → α'\nh : β → β'\n⊢ Eq (Set.image2 f (Set.range g) (Set.range h)) (Set.range fun x => f (g x.1) (h x.2))","decl":"lemma image2_range (f : α' → β' → γ) (g : α → α') (h : β → β') :\n    image2 f (range g) (range h) = range fun x : α × β ↦ f (g x.1) (h x.2) := by\n  simp_rw [← image_univ, image2_image_left, image2_image_right, ← image_prod, univ_prod_univ]\n\n"}
{"name":"Set.image2_assoc","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\nε : Type u_9\nε' : Type u_10\ns : Set α\nt : Set β\nu : Set γ\nf : δ → γ → ε\ng : α → β → δ\nf' : α → ε' → ε\ng' : β → γ → ε'\nh_assoc : ∀ (a : α) (b : β) (c : γ), Eq (f (g a b) c) (f' a (g' b c))\n⊢ Eq (Set.image2 f (Set.image2 g s t) u) (Set.image2 f' s (Set.image2 g' t u))","decl":"theorem image2_assoc {f : δ → γ → ε} {g : α → β → δ} {f' : α → ε' → ε} {g' : β → γ → ε'}\n    (h_assoc : ∀ a b c, f (g a b) c = f' a (g' b c)) :\n    image2 f (image2 g s t) u = image2 f' s (image2 g' t u) :=\n  eq_of_forall_subset_iff fun _ ↦ by simp only [image2_subset_iff, forall_mem_image2, h_assoc]\n\n"}
{"name":"Set.image2_comm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns : Set α\nt : Set β\ng : β → α → γ\nh_comm : ∀ (a : α) (b : β), Eq (f a b) (g b a)\n⊢ Eq (Set.image2 f s t) (Set.image2 g t s)","decl":"theorem image2_comm {g : β → α → γ} (h_comm : ∀ a b, f a b = g b a) : image2 f s t = image2 g t s :=\n  (image2_swap _ _ _).trans <| by simp_rw [h_comm]\n\n"}
{"name":"Set.image2_left_comm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\nδ' : Type u_8\nε : Type u_9\ns : Set α\nt : Set β\nu : Set γ\nf : α → δ → ε\ng : β → γ → δ\nf' : α → γ → δ'\ng' : β → δ' → ε\nh_left_comm : ∀ (a : α) (b : β) (c : γ), Eq (f a (g b c)) (g' b (f' a c))\n⊢ Eq (Set.image2 f s (Set.image2 g t u)) (Set.image2 g' t (Set.image2 f' s u))","decl":"theorem image2_left_comm {f : α → δ → ε} {g : β → γ → δ} {f' : α → γ → δ'} {g' : β → δ' → ε}\n    (h_left_comm : ∀ a b c, f a (g b c) = g' b (f' a c)) :\n    image2 f s (image2 g t u) = image2 g' t (image2 f' s u) := by\n  rw [image2_swap f', image2_swap f]\n  exact image2_assoc fun _ _ _ => h_left_comm _ _ _\n\n"}
{"name":"Set.image2_right_comm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\nδ' : Type u_8\nε : Type u_9\ns : Set α\nt : Set β\nu : Set γ\nf : δ → γ → ε\ng : α → β → δ\nf' : α → γ → δ'\ng' : δ' → β → ε\nh_right_comm : ∀ (a : α) (b : β) (c : γ), Eq (f (g a b) c) (g' (f' a c) b)\n⊢ Eq (Set.image2 f (Set.image2 g s t) u) (Set.image2 g' (Set.image2 f' s u) t)","decl":"theorem image2_right_comm {f : δ → γ → ε} {g : α → β → δ} {f' : α → γ → δ'} {g' : δ' → β → ε}\n    (h_right_comm : ∀ a b c, f (g a b) c = g' (f' a c) b) :\n    image2 f (image2 g s t) u = image2 g' (image2 f' s u) t := by\n  rw [image2_swap g, image2_swap g']\n  exact image2_assoc fun _ _ _ => h_right_comm _ _ _\n\n"}
{"name":"Set.image2_image2_image2_comm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\nε : Type u_9\nε' : Type u_10\nζ : Type u_11\nζ' : Type u_12\nν : Type u_13\ns : Set α\nt : Set β\nu : Set γ\nv : Set δ\nf : ε → ζ → ν\ng : α → β → ε\nh : γ → δ → ζ\nf' : ε' → ζ' → ν\ng' : α → γ → ε'\nh' : β → δ → ζ'\nh_comm : ∀ (a : α) (b : β) (c : γ) (d : δ), Eq (f (g a b) (h c d)) (f' (g' a c) (h' b d))\n⊢ Eq (Set.image2 f (Set.image2 g s t) (Set.image2 h u v)) (Set.image2 f' (Set.image2 g' s u) (Set.image2 h' t v))","decl":"theorem image2_image2_image2_comm {f : ε → ζ → ν} {g : α → β → ε} {h : γ → δ → ζ} {f' : ε' → ζ' → ν}\n    {g' : α → γ → ε'} {h' : β → δ → ζ'}\n    (h_comm : ∀ a b c d, f (g a b) (h c d) = f' (g' a c) (h' b d)) :\n    image2 f (image2 g s t) (image2 h u v) = image2 f' (image2 g' s u) (image2 h' t v) := by\n  ext; constructor\n  · rintro ⟨_, ⟨a, ha, b, hb, rfl⟩, _, ⟨c, hc, d, hd, rfl⟩, rfl⟩\n    exact ⟨_, ⟨a, ha, c, hc, rfl⟩, _, ⟨b, hb, d, hd, rfl⟩, (h_comm _ _ _ _).symm⟩\n  · rintro ⟨_, ⟨a, ha, c, hc, rfl⟩, _, ⟨b, hb, d, hd, rfl⟩, rfl⟩\n    exact ⟨_, ⟨a, ha, b, hb, rfl⟩, _, ⟨c, hc, d, hd, rfl⟩, h_comm _ _ _ _⟩\n\n"}
{"name":"Set.image_image2_distrib","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\nf : α → β → γ\ns : Set α\nt : Set β\ng : γ → δ\nf' : α' → β' → δ\ng₁ : α → α'\ng₂ : β → β'\nh_distrib : ∀ (a : α) (b : β), Eq (g (f a b)) (f' (g₁ a) (g₂ b))\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 f' (Set.image g₁ s) (Set.image g₂ t))","decl":"theorem image_image2_distrib {g : γ → δ} {f' : α' → β' → δ} {g₁ : α → α'} {g₂ : β → β'}\n    (h_distrib : ∀ a b, g (f a b) = f' (g₁ a) (g₂ b)) :\n    (image2 f s t).image g = image2 f' (s.image g₁) (t.image g₂) := by\n  simp_rw [image_image2, image2_image_left, image2_image_right, h_distrib]\n\n"}
{"name":"Set.image_image2_distrib_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\nf : α → β → γ\ns : Set α\nt : Set β\ng : γ → δ\nf' : α' → β → δ\ng' : α → α'\nh_distrib : ∀ (a : α) (b : β), Eq (g (f a b)) (f' (g' a) b)\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 f' (Set.image g' s) t)","decl":"/-- Symmetric statement to `Set.image2_image_left_comm`. -/\ntheorem image_image2_distrib_left {g : γ → δ} {f' : α' → β → δ} {g' : α → α'}\n    (h_distrib : ∀ a b, g (f a b) = f' (g' a) b) :\n    (image2 f s t).image g = image2 f' (s.image g') t :=\n  (image_image2_distrib h_distrib).trans <| by rw [image_id']\n\n"}
{"name":"Set.image_image2_distrib_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\nf : α → β → γ\ns : Set α\nt : Set β\ng : γ → δ\nf' : α → β' → δ\ng' : β → β'\nh_distrib : ∀ (a : α) (b : β), Eq (g (f a b)) (f' a (g' b))\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 f' s (Set.image g' t))","decl":"/-- Symmetric statement to `Set.image_image2_right_comm`. -/\ntheorem image_image2_distrib_right {g : γ → δ} {f' : α → β' → δ} {g' : β → β'}\n    (h_distrib : ∀ a b, g (f a b) = f' a (g' b)) :\n    (image2 f s t).image g = image2 f' s (t.image g') :=\n  (image_image2_distrib h_distrib).trans <| by rw [image_id']\n\n"}
{"name":"Set.image2_image_left_comm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : α' → β → γ\ng : α → α'\nf' : α → β → δ\ng' : δ → γ\nh_left_comm : ∀ (a : α) (b : β), Eq (f (g a) b) (g' (f' a b))\n⊢ Eq (Set.image2 f (Set.image g s) t) (Set.image g' (Set.image2 f' s t))","decl":"/-- Symmetric statement to `Set.image_image2_distrib_left`. -/\ntheorem image2_image_left_comm {f : α' → β → γ} {g : α → α'} {f' : α → β → δ} {g' : δ → γ}\n    (h_left_comm : ∀ a b, f (g a) b = g' (f' a b)) :\n    image2 f (s.image g) t = (image2 f' s t).image g' :=\n  (image_image2_distrib_left fun a b => (h_left_comm a b).symm).symm\n\n"}
{"name":"Set.image_image2_right_comm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : α → β' → γ\ng : β → β'\nf' : α → β → δ\ng' : δ → γ\nh_right_comm : ∀ (a : α) (b : β), Eq (f a (g b)) (g' (f' a b))\n⊢ Eq (Set.image2 f s (Set.image g t)) (Set.image g' (Set.image2 f' s t))","decl":"/-- Symmetric statement to `Set.image_image2_distrib_right`. -/\ntheorem image_image2_right_comm {f : α → β' → γ} {g : β → β'} {f' : α → β → δ} {g' : δ → γ}\n    (h_right_comm : ∀ a b, f a (g b) = g' (f' a b)) :\n    image2 f s (t.image g) = (image2 f' s t).image g' :=\n  (image_image2_distrib_right fun a b => (h_right_comm a b).symm).symm\n\n"}
{"name":"Set.image2_distrib_subset_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nγ' : Type u_6\nδ : Type u_7\nε : Type u_9\ns : Set α\nt : Set β\nu : Set γ\nf : α → δ → ε\ng : β → γ → δ\nf₁ : α → β → β'\nf₂ : α → γ → γ'\ng' : β' → γ' → ε\nh_distrib : ∀ (a : α) (b : β) (c : γ), Eq (f a (g b c)) (g' (f₁ a b) (f₂ a c))\n⊢ HasSubset.Subset (Set.image2 f s (Set.image2 g t u)) (Set.image2 g' (Set.image2 f₁ s t) (Set.image2 f₂ s u))","decl":"/-- The other direction does not hold because of the `s`-`s` cross terms on the RHS. -/\ntheorem image2_distrib_subset_left {f : α → δ → ε} {g : β → γ → δ} {f₁ : α → β → β'}\n    {f₂ : α → γ → γ'} {g' : β' → γ' → ε} (h_distrib : ∀ a b c, f a (g b c) = g' (f₁ a b) (f₂ a c)) :\n    image2 f s (image2 g t u) ⊆ image2 g' (image2 f₁ s t) (image2 f₂ s u) := by\n  rintro _ ⟨a, ha, _, ⟨b, hb, c, hc, rfl⟩, rfl⟩\n  rw [h_distrib]\n  exact mem_image2_of_mem (mem_image2_of_mem ha hb) (mem_image2_of_mem ha hc)\n\n"}
{"name":"Set.image2_distrib_subset_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\nε : Type u_9\ns : Set α\nt : Set β\nu : Set γ\nf : δ → γ → ε\ng : α → β → δ\nf₁ : α → γ → α'\nf₂ : β → γ → β'\ng' : α' → β' → ε\nh_distrib : ∀ (a : α) (b : β) (c : γ), Eq (f (g a b) c) (g' (f₁ a c) (f₂ b c))\n⊢ HasSubset.Subset (Set.image2 f (Set.image2 g s t) u) (Set.image2 g' (Set.image2 f₁ s u) (Set.image2 f₂ t u))","decl":"/-- The other direction does not hold because of the `u`-`u` cross terms on the RHS. -/\ntheorem image2_distrib_subset_right {f : δ → γ → ε} {g : α → β → δ} {f₁ : α → γ → α'}\n    {f₂ : β → γ → β'} {g' : α' → β' → ε} (h_distrib : ∀ a b c, f (g a b) c = g' (f₁ a c) (f₂ b c)) :\n    image2 f (image2 g s t) u ⊆ image2 g' (image2 f₁ s u) (image2 f₂ t u) := by\n  rintro _ ⟨_, ⟨a, ha, b, hb, rfl⟩, c, hc, rfl⟩\n  rw [h_distrib]\n  exact mem_image2_of_mem (mem_image2_of_mem ha hc) (mem_image2_of_mem hb hc)\n\n"}
{"name":"Set.image_image2_antidistrib","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\nf : α → β → γ\ns : Set α\nt : Set β\ng : γ → δ\nf' : β' → α' → δ\ng₁ : β → β'\ng₂ : α → α'\nh_antidistrib : ∀ (a : α) (b : β), Eq (g (f a b)) (f' (g₁ b) (g₂ a))\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 f' (Set.image g₁ t) (Set.image g₂ s))","decl":"theorem image_image2_antidistrib {g : γ → δ} {f' : β' → α' → δ} {g₁ : β → β'} {g₂ : α → α'}\n    (h_antidistrib : ∀ a b, g (f a b) = f' (g₁ b) (g₂ a)) :\n    (image2 f s t).image g = image2 f' (t.image g₁) (s.image g₂) := by\n  rw [image2_swap f]\n  exact image_image2_distrib fun _ _ => h_antidistrib _ _\n\n"}
{"name":"Set.image_image2_antidistrib_left","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\nf : α → β → γ\ns : Set α\nt : Set β\ng : γ → δ\nf' : β' → α → δ\ng' : β → β'\nh_antidistrib : ∀ (a : α) (b : β), Eq (g (f a b)) (f' (g' b) a)\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 f' (Set.image g' t) s)","decl":"/-- Symmetric statement to `Set.image2_image_left_anticomm`. -/\ntheorem image_image2_antidistrib_left {g : γ → δ} {f' : β' → α → δ} {g' : β → β'}\n    (h_antidistrib : ∀ a b, g (f a b) = f' (g' b) a) :\n    (image2 f s t).image g = image2 f' (t.image g') s :=\n  (image_image2_antidistrib h_antidistrib).trans <| by rw [image_id']\n\n"}
{"name":"Set.image_image2_antidistrib_right","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\nf : α → β → γ\ns : Set α\nt : Set β\ng : γ → δ\nf' : β → α' → δ\ng' : α → α'\nh_antidistrib : ∀ (a : α) (b : β), Eq (g (f a b)) (f' b (g' a))\n⊢ Eq (Set.image g (Set.image2 f s t)) (Set.image2 f' t (Set.image g' s))","decl":"/-- Symmetric statement to `Set.image_image2_right_anticomm`. -/\ntheorem image_image2_antidistrib_right {g : γ → δ} {f' : β → α' → δ} {g' : α → α'}\n    (h_antidistrib : ∀ a b, g (f a b) = f' b (g' a)) :\n    (image2 f s t).image g = image2 f' t (s.image g') :=\n  (image_image2_antidistrib h_antidistrib).trans <| by rw [image_id']\n\n"}
{"name":"Set.image2_image_left_anticomm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nα' : Type u_2\nβ : Type u_3\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : α' → β → γ\ng : α → α'\nf' : β → α → δ\ng' : δ → γ\nh_left_anticomm : ∀ (a : α) (b : β), Eq (f (g a) b) (g' (f' b a))\n⊢ Eq (Set.image2 f (Set.image g s) t) (Set.image g' (Set.image2 f' t s))","decl":"/-- Symmetric statement to `Set.image_image2_antidistrib_left`. -/\ntheorem image2_image_left_anticomm {f : α' → β → γ} {g : α → α'} {f' : β → α → δ} {g' : δ → γ}\n    (h_left_anticomm : ∀ a b, f (g a) b = g' (f' b a)) :\n    image2 f (s.image g) t = (image2 f' t s).image g' :=\n  (image_image2_antidistrib_left fun a b => (h_left_anticomm b a).symm).symm\n\n"}
{"name":"Set.image_image2_right_anticomm","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nβ' : Type u_4\nγ : Type u_5\nδ : Type u_7\ns : Set α\nt : Set β\nf : α → β' → γ\ng : β → β'\nf' : β → α → δ\ng' : δ → γ\nh_right_anticomm : ∀ (a : α) (b : β), Eq (f a (g b)) (g' (f' b a))\n⊢ Eq (Set.image2 f s (Set.image g t)) (Set.image g' (Set.image2 f' t s))","decl":"/-- Symmetric statement to `Set.image_image2_antidistrib_right`. -/\ntheorem image_image2_right_anticomm {f : α → β' → γ} {g : β → β'} {f' : β → α → δ} {g' : δ → γ}\n    (h_right_anticomm : ∀ a b, f a (g b) = g' (f' b a)) :\n    image2 f s (t.image g) = (image2 f' t s).image g' :=\n  (image_image2_antidistrib_right fun a b => (h_right_anticomm b a).symm).symm\n\n"}
{"name":"Set.image2_left_identity","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β → β\na : α\nh : ∀ (b : β), Eq (f a b) b\nt : Set β\n⊢ Eq (Set.image2 f (Singleton.singleton a) t) t","decl":"/-- If `a` is a left identity for `f : α → β → β`, then `{a}` is a left identity for\n`Set.image2 f`. -/\nlemma image2_left_identity {f : α → β → β} {a : α} (h : ∀ b, f a b = b) (t : Set β) :\n    image2 f {a} t = t := by\n  rw [image2_singleton_left, show f a = id from funext h, image_id]\n\n"}
{"name":"Set.image2_right_identity","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β → α\nb : β\nh : ∀ (a : α), Eq (f a b) a\ns : Set α\n⊢ Eq (Set.image2 f s (Singleton.singleton b)) s","decl":"/-- If `b` is a right identity for `f : α → β → α`, then `{b}` is a right identity for\n`Set.image2 f`. -/\nlemma image2_right_identity {f : α → β → α} {b : β} (h : ∀ a, f a b = a) (s : Set α) :\n    image2 f s {b} = s := by\n  rw [image2_singleton_right, funext h, image_id']\n\n"}
{"name":"Set.image2_inter_union_subset_union","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt t' : Set β\n⊢ HasSubset.Subset (Set.image2 f (Inter.inter s s') (Union.union t t')) (Union.union (Set.image2 f s t) (Set.image2 f s' t'))","decl":"theorem image2_inter_union_subset_union :\n    image2 f (s ∩ s') (t ∪ t') ⊆ image2 f s t ∪ image2 f s' t' := by\n  rw [image2_union_right]\n  exact\n    union_subset_union (image2_subset_right inter_subset_left)\n      (image2_subset_right inter_subset_right)\n\n"}
{"name":"Set.image2_union_inter_subset_union","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_5\nf : α → β → γ\ns s' : Set α\nt t' : Set β\n⊢ HasSubset.Subset (Set.image2 f (Union.union s s') (Inter.inter t t')) (Union.union (Set.image2 f s t) (Set.image2 f s' t'))","decl":"theorem image2_union_inter_subset_union :\n    image2 f (s ∪ s') (t ∩ t') ⊆ image2 f s t ∪ image2 f s' t' := by\n  rw [image2_union_left]\n  exact\n    union_subset_union (image2_subset_left inter_subset_left)\n      (image2_subset_left inter_subset_right)\n\n"}
{"name":"Set.image2_inter_union_subset","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → α → β\ns t : Set α\nhf : ∀ (a b : α), Eq (f a b) (f b a)\n⊢ HasSubset.Subset (Set.image2 f (Inter.inter s t) (Union.union s t)) (Set.image2 f s t)","decl":"theorem image2_inter_union_subset {f : α → α → β} {s t : Set α} (hf : ∀ a b, f a b = f b a) :\n    image2 f (s ∩ t) (s ∪ t) ⊆ image2 f s t := by\n  rw [inter_comm]\n  exact image2_inter_union_subset_union.trans (union_subset (image2_comm hf).subset Subset.rfl)\n\n"}
{"name":"Set.image2_union_inter_subset","module":"Mathlib.Data.Set.NAry","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → α → β\ns t : Set α\nhf : ∀ (a b : α), Eq (f a b) (f b a)\n⊢ HasSubset.Subset (Set.image2 f (Union.union s t) (Inter.inter s t)) (Set.image2 f s t)","decl":"theorem image2_union_inter_subset {f : α → α → β} {s t : Set α} (hf : ∀ a b, f a b = f b a) :\n    image2 f (s ∪ t) (s ∩ t) ⊆ image2 f s t := by\n  rw [image2_comm hf]\n  exact image2_inter_union_subset hf\n\n"}
