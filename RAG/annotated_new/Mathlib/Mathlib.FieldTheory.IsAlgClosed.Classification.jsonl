{"name":"IsAlgClosed.isAlgClosure_of_transcendence_basis","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"R : Type u_1\nK : Type u_3\ninst✝³ : CommRing R\ninst✝² : Field K\ninst✝¹ : Algebra R K\nι : Type u_4\nv : ι → K\ninst✝ : IsAlgClosed K\nhv : IsTranscendenceBasis R v\n⊢ IsAlgClosure (Subtype fun x => Membership.mem (Algebra.adjoin R (Set.range v)) x) K","decl":"theorem isAlgClosure_of_transcendence_basis [IsAlgClosed K] (hv : IsTranscendenceBasis R v) :\n    IsAlgClosure (Algebra.adjoin R (Set.range v)) K :=\n  letI := RingHom.domain_nontrivial (algebraMap R K)\n  { isAlgClosed := by infer_instance\n    isAlgebraic := hv.isAlgebraic }\n\n"}
{"name":"IsAlgClosed.cardinal_le_max_transcendence_basis","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"R : Type u\nK : Type v\ninst✝³ : CommRing R\ninst✝² : Field K\ninst✝¹ : Algebra R K\ninst✝ : IsAlgClosed K\nι : Type w\nv : ι → K\nhv : IsTranscendenceBasis R v\n⊢ LE.le (Cardinal.lift.{max u w, v} (Cardinal.mk K)) (Max.max (Max.max (Cardinal.lift.{max v w, u} (Cardinal.mk R)) (Cardinal.lift.{max u v, w} (Cardinal.mk ι))) Cardinal.aleph0)","decl":"/-- The cardinality of an algebraically closed `R`-algebra is less than or equal to\nthe maximum of of the cardinality of `R`, the cardinality of a transcendence basis and\n`ℵ₀`\n\nFor a simpler, but less universe-polymorphic statement, see\n`IsAlgClosed.cardinal_le_max_transcendence_basis'`  -/\ntheorem cardinal_le_max_transcendence_basis (hv : IsTranscendenceBasis R v) :\n    Cardinal.lift.{max u w} #K ≤ max (max (Cardinal.lift.{max v w} #R)\n      (Cardinal.lift.{max u v} #ι)) ℵ₀ :=\n  calc\n    Cardinal.lift.{max u w} #K ≤ Cardinal.lift.{max u w}\n        (max #(Algebra.adjoin R (Set.range v)) ℵ₀) := by\n      letI := isAlgClosure_of_transcendence_basis v hv\n      simpa using Algebra.IsAlgebraic.cardinalMk_le_max (Algebra.adjoin R (Set.range v)) K\n    _ = Cardinal.lift.{v} (max #(MvPolynomial ι R) ℵ₀) := by\n      rw [lift_max, ← Cardinal.lift_mk_eq.2 ⟨hv.1.aevalEquiv.toEquiv⟩, lift_aleph0,\n        ← lift_aleph0.{max u v w, max u w}, ← lift_max, lift_umax.{max u w, v}]\n    _ ≤ Cardinal.lift.{v} (max (max (max (Cardinal.lift #R) (Cardinal.lift #ι)) ℵ₀) ℵ₀) :=\n        lift_le.2 (max_le_max MvPolynomial.cardinalMk_le_max_lift le_rfl)\n    _ = _ := by simp\n\n"}
{"name":"IsAlgClosed.cardinal_le_max_transcendence_basis'","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"R : Type u\ninst✝³ : CommRing R\nK' : Type u\ninst✝² : Field K'\ninst✝¹ : Algebra R K'\ninst✝ : IsAlgClosed K'\nι' : Type u\nv' : ι' → K'\nhv : IsTranscendenceBasis R v'\n⊢ LE.le (Cardinal.mk K') (Max.max (Max.max (Cardinal.mk R) (Cardinal.mk ι')) Cardinal.aleph0)","decl":"/-- The cardinality of an algebraically closed `R`-algebra is less than or equal to\nthe maximum of of the cardinality of `R`, the cardinality of a transcendence basis and\n`ℵ₀`\n\nA less-universe polymorphic, but simpler statement of\n`IsAlgClosed.cardinal_le_max_transcendence_basis`  -/\ntheorem cardinal_le_max_transcendence_basis' (hv : IsTranscendenceBasis R v') :\n    #K' ≤ max (max #R #ι') ℵ₀ := by\n  simpa using cardinal_le_max_transcendence_basis v' hv\n\n"}
{"name":"IsAlgClosed.cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"R : Type u\nK : Type v\ninst✝⁴ : CommRing R\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : IsAlgClosed K\nι : Type w\nv : ι → K\ninst✝ : Nontrivial R\nhv : IsTranscendenceBasis R v\nhR : LE.le (Cardinal.mk R) Cardinal.aleph0\nhK : LT.lt Cardinal.aleph0 (Cardinal.mk K)\n⊢ Eq (Cardinal.lift.{w, v} (Cardinal.mk K)) (Cardinal.lift.{v, w} (Cardinal.mk ι))","decl":"/-- If `K` is an uncountable algebraically closed field, then its\ncardinality is the same as that of a transcendence basis.\n\nFor a simpler, but less universe-polymorphic statement, see\n`IsAlgClosed.cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt'` -/\ntheorem cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt [Nontrivial R]\n    (hv : IsTranscendenceBasis R v) (hR : #R ≤ ℵ₀) (hK : ℵ₀ < #K) :\n    Cardinal.lift.{w} #K = Cardinal.lift.{v} #ι :=\n  have : ℵ₀ ≤ Cardinal.lift.{max u v} #ι := le_of_not_lt fun h => not_le_of_gt\n    (show ℵ₀ < Cardinal.lift.{max u w} #K by simpa) <|\n    calc\n      Cardinal.lift.{max u w, v} #K ≤ max (max (Cardinal.lift.{max v w, u} #R)\n        (Cardinal.lift.{max u v, w} #ι)) ℵ₀ := cardinal_le_max_transcendence_basis v hv\n      _ ≤ _ := max_le (max_le (by simpa) (by simpa using le_of_lt h)) le_rfl\n  suffices Cardinal.lift.{max u w} #K = Cardinal.lift.{max u v} #ι\n    from Cardinal.lift_injective.{u, max v w} (by simpa)\n  le_antisymm\n    (calc\n      Cardinal.lift.{max u w} #K ≤ max (max\n        (Cardinal.lift.{max v w} #R) (Cardinal.lift.{max u v} #ι)) ℵ₀ :=\n        cardinal_le_max_transcendence_basis v hv\n      _ = Cardinal.lift #ι := by\n        rw [max_eq_left, max_eq_right]\n        · exact le_trans (by simpa using hR) this\n        · exact le_max_of_le_right this)\n    (lift_mk_le.2 ⟨⟨v, hv.1.injective⟩⟩)\n\n"}
{"name":"IsAlgClosed.cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt'","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"R : Type u\ninst✝⁴ : CommRing R\nK' : Type u\ninst✝³ : Field K'\ninst✝² : Algebra R K'\ninst✝¹ : IsAlgClosed K'\nι' : Type u\nv' : ι' → K'\ninst✝ : Nontrivial R\nhv : IsTranscendenceBasis R v'\nhR : LE.le (Cardinal.mk R) Cardinal.aleph0\nhK : LT.lt Cardinal.aleph0 (Cardinal.mk K')\n⊢ Eq (Cardinal.mk K') (Cardinal.mk ι')","decl":"/-- If `K` is an uncountable algebraically closed field, then its\ncardinality is the same as that of a transcendence basis.\n\nThis is a simpler, but less general statement of\n`cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt`. -/\ntheorem cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt' [Nontrivial R]\n    (hv : IsTranscendenceBasis R v') (hR : #R ≤ ℵ₀) (hK : ℵ₀ < #K') : #K' = #ι' := by\n  simpa using cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt v' hv hR hK\n\n"}
{"name":"IsAlgClosed.ringEquiv_of_equiv_of_charZero","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"K : Type u\nL : Type v\ninst✝⁵ : Field K\ninst✝⁴ : Field L\ninst✝³ : IsAlgClosed K\ninst✝² : IsAlgClosed L\ninst✝¹ : CharZero K\ninst✝ : CharZero L\nhK : LT.lt Cardinal.aleph0 (Cardinal.mk K)\nhKL : Nonempty (Equiv K L)\n⊢ Nonempty (RingEquiv K L)","decl":"/-- Two uncountable algebraically closed fields of characteristic zero are isomorphic\nif they have the same cardinality. -/\ntheorem ringEquiv_of_equiv_of_charZero [CharZero K] [CharZero L] (hK : ℵ₀ < #K)\n    (hKL : Nonempty (K ≃ L)) : Nonempty (K ≃+* L) := by\n  cases' exists_isTranscendenceBasis ℤ\n    (show Function.Injective (algebraMap ℤ K) from Int.cast_injective) with s hs\n  cases' exists_isTranscendenceBasis ℤ\n    (show Function.Injective (algebraMap ℤ L) from Int.cast_injective) with t ht\n  have hL : ℵ₀ < #L := by\n    rwa [← aleph0_lt_lift.{v, u}, ← lift_mk_eq'.2 hKL, aleph0_lt_lift]\n  have : Cardinal.lift.{v} #s = Cardinal.lift.{u} #t := by\n    rw [← lift_injective (cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt _\n        hs (le_of_eq mk_int) hK),\n      ← lift_injective (cardinal_eq_cardinal_transcendence_basis_of_aleph0_lt _\n        ht (le_of_eq mk_int) hL)]\n    exact Cardinal.lift_mk_eq'.2 hKL\n  cases' Cardinal.lift_mk_eq'.1 this with e\n  exact ⟨equivOfTranscendenceBasis _ _ e hs ht⟩\n\n"}
{"name":"IsAlgClosed.ringEquiv_of_equiv_of_char_eq","module":"Mathlib.FieldTheory.IsAlgClosed.Classification","initialProofState":"K : Type u\nL : Type v\ninst✝⁵ : Field K\ninst✝⁴ : Field L\ninst✝³ : IsAlgClosed K\ninst✝² : IsAlgClosed L\np : Nat\ninst✝¹ : CharP K p\ninst✝ : CharP L p\nhK : LT.lt Cardinal.aleph0 (Cardinal.mk K)\nhKL : Nonempty (Equiv K L)\n⊢ Nonempty (RingEquiv K L)","decl":"/-- Two uncountable algebraically closed fields are isomorphic\nif they have the same cardinality and the same characteristic. -/\ntheorem ringEquiv_of_equiv_of_char_eq (p : ℕ) [CharP K p] [CharP L p] (hK : ℵ₀ < #K)\n    (hKL : Nonempty (K ≃ L)) : Nonempty (K ≃+* L) := by\n  rcases CharP.char_is_prime_or_zero K p with (hp | hp)\n  · haveI : Fact p.Prime := ⟨hp⟩\n    exact ringEquiv_of_Cardinal_eq_of_charP p hK hKL\n  · simp only [hp] at *\n    letI : CharZero K := CharP.charP_to_charZero K\n    letI : CharZero L := CharP.charP_to_charZero L\n    exact ringEquiv_of_equiv_of_charZero hK hKL\n\n"}
