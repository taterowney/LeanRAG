{"name":"MonoidHom.CompTriple.comp_eq","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\nN : Type u_2\nP : Type u_3\ninst✝² : Monoid M\ninst✝¹ : Monoid N\ninst✝ : Monoid P\nφ : MonoidHom M N\nψ : MonoidHom N P\nχ : outParam (MonoidHom M P)\nself : φ.CompTriple ψ χ\n⊢ Eq (ψ.comp φ) χ","decl":"/-- Class of composing triples -/\nclass CompTriple {M N P : Type*} [Monoid M] [Monoid N] [Monoid P]\n  (φ : M →* N) (ψ : N →* P) (χ : outParam (M →* P)) : Prop where\n  /-- The maps form a commuting triangle -/\n  comp_eq : ψ.comp φ = χ\n\n"}
{"name":"MonoidHom.CompTriple.IsId.eq_id","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\ninst✝ : Monoid M\nσ : MonoidHom M M\nself : MonoidHom.CompTriple.IsId σ\n⊢ Eq σ (MonoidHom.id M)","decl":"/-- Class of Id maps -/\nclass IsId (σ : M →* M) : Prop where\n  eq_id : σ = MonoidHom.id M\n\n"}
{"name":"MonoidHom.CompTriple.instIsId","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_4\ninst✝ : Monoid M\n⊢ MonoidHom.CompTriple.IsId (MonoidHom.id M)","decl":"instance instIsId {M : Type*} [Monoid M] : IsId (MonoidHom.id M) where\n  eq_id := rfl\n\n"}
{"name":"MonoidHom.CompTriple.instIsIdOfIsIdCoe","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\ninst✝ : Monoid M\nσ : MonoidHom M M\nh : CompTriple.IsId ⇑σ\n⊢ MonoidHom.CompTriple.IsId σ","decl":"instance {σ : M →* M} [h : _root_.CompTriple.IsId σ] : IsId σ  where\n  eq_id := by ext; exact _root_.congr_fun h.eq_id _\n\n"}
{"name":"MonoidHom.CompTriple.instComp_id","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"N : Type u_4\nP : Type u_5\ninst✝² : Monoid N\ninst✝¹ : Monoid P\nφ : MonoidHom N N\ninst✝ : MonoidHom.CompTriple.IsId φ\nψ : MonoidHom N P\n⊢ φ.CompTriple ψ ψ","decl":"instance instComp_id {N P : Type*} [Monoid N] [Monoid P]\n    {φ : N →* N} [IsId φ] {ψ : N →* P} :\n    CompTriple φ ψ ψ where\n  comp_eq := by simp only [IsId.eq_id, MonoidHom.comp_id]\n\n"}
{"name":"MonoidHom.CompTriple.instId_comp","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_4\nN : Type u_5\ninst✝² : Monoid M\ninst✝¹ : Monoid N\nφ : MonoidHom M N\nψ : MonoidHom N N\ninst✝ : MonoidHom.CompTriple.IsId ψ\n⊢ φ.CompTriple ψ φ","decl":"instance instId_comp {M N : Type*} [Monoid M] [Monoid N]\n    {φ : M →* N} {ψ : N →* N} [IsId ψ] :\n    CompTriple φ ψ φ where\n  comp_eq := by simp only [IsId.eq_id, MonoidHom.id_comp]\n\n"}
{"name":"MonoidHom.CompTriple.comp_inv","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\nN : Type u_2\ninst✝² : Monoid M\ninst✝¹ : Monoid N\nφ : MonoidHom M N\nψ : MonoidHom N M\nh : Function.RightInverse ⇑φ ⇑ψ\nχ : MonoidHom M M\ninst✝ : MonoidHom.CompTriple.IsId χ\n⊢ φ.CompTriple ψ χ","decl":"lemma comp_inv {φ : M →* N} {ψ : N →* M} (h : Function.RightInverse φ ψ)\n    {χ : M →* M} [IsId χ] :\n    CompTriple φ ψ χ where\n  comp_eq := by\n    simp only [IsId.eq_id, ← DFunLike.coe_fn_eq, coe_comp, h.id]\n    rfl\n\n"}
{"name":"MonoidHom.CompTriple.instRootCompTriple","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\nN : Type u_2\nP : Type u_3\ninst✝² : Monoid M\ninst✝¹ : Monoid N\ninst✝ : Monoid P\nφ : MonoidHom M N\nψ : MonoidHom N P\nχ : MonoidHom M P\nκ : φ.CompTriple ψ χ\n⊢ CompTriple ⇑φ ⇑ψ ⇑χ","decl":"instance instRootCompTriple {φ : M →* N} {ψ : N  →* P} {χ : M →* P} [κ : CompTriple φ ψ χ] :\n    _root_.CompTriple φ ψ χ where\n  comp_eq := by rw [← MonoidHom.coe_comp, κ.comp_eq]\n\n"}
{"name":"MonoidHom.CompTriple.comp","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\nN : Type u_2\nP : Type u_3\ninst✝² : Monoid M\ninst✝¹ : Monoid N\ninst✝ : Monoid P\nφ : MonoidHom M N\nψ : MonoidHom N P\n⊢ φ.CompTriple ψ (ψ.comp φ)","decl":"/-- `φ`, `ψ` and `ψ.comp φ` form a `MonoidHom.CompTriple`\n\n  (to be used with care, because no simplification is done)-/\ntheorem comp {φ : M →* N} {ψ : N →* P} :\n    CompTriple φ ψ (ψ.comp φ) where\n  comp_eq := rfl\n\n"}
{"name":"MonoidHom.CompTriple.comp_apply","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\nN : Type u_2\nP : Type u_3\ninst✝² : Monoid M\ninst✝¹ : Monoid N\ninst✝ : Monoid P\nφ : MonoidHom M N\nψ : MonoidHom N P\nχ : MonoidHom M P\nh : φ.CompTriple ψ χ\nx : M\n⊢ Eq (ψ (φ x)) (χ x)","decl":"lemma comp_apply\n    {φ : M →* N} {ψ : N →* P} {χ : M →* P} (h : CompTriple φ ψ χ) (x : M) :\n    ψ (φ x) = χ x := by\n  rw [← h.comp_eq, MonoidHom.comp_apply]\n\n"}
{"name":"MonoidHom.CompTriple.comp_assoc","module":"Mathlib.Algebra.Group.Hom.CompTypeclasses","initialProofState":"M : Type u_1\nN : Type u_2\nP : Type u_3\ninst✝³ : Monoid M\ninst✝² : Monoid N\ninst✝¹ : Monoid P\nQ : Type u_4\ninst✝ : Monoid Q\nφ₁ : MonoidHom M N\nφ₂ : MonoidHom N P\nφ₁₂ : MonoidHom M P\nκ : φ₁.CompTriple φ₂ φ₁₂\nφ₃ : MonoidHom P Q\nφ₂₃ : MonoidHom N Q\nκ' : φ₂.CompTriple φ₃ φ₂₃\nφ₁₂₃ : MonoidHom M Q\n⊢ Iff (φ₁.CompTriple φ₂₃ φ₁₂₃) (φ₁₂.CompTriple φ₃ φ₁₂₃)","decl":"theorem comp_assoc {Q : Type*} [Monoid Q]\n    {φ₁ : M →* N} {φ₂ : N →* P} {φ₁₂ : M →* P}\n    (κ : CompTriple φ₁ φ₂ φ₁₂)\n    {φ₃ : P →* Q} {φ₂₃ : N →* Q} (κ' : CompTriple φ₂ φ₃ φ₂₃)\n    {φ₁₂₃ : M →* Q} :\n    CompTriple φ₁ φ₂₃ φ₁₂₃ ↔ CompTriple φ₁₂ φ₃ φ₁₂₃ := by\n  constructor <;>\n  · rintro ⟨h⟩\n    exact ⟨by simp only [← κ.comp_eq, ← h, ← κ'.comp_eq, MonoidHom.comp_assoc]⟩\n\n"}
