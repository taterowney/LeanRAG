{"name":"Subgroup.range_zpowersHom","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : Group G\ng : G\n⊢ Eq ((zpowersHom G) g).range (Subgroup.zpowers g)","decl":"theorem range_zpowersHom (g : G) : (zpowersHom G g).range = zpowers g := rfl\n\n"}
{"name":"AddSubgroup.instCountableSubtypeMemZmultiples","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na : G\n⊢ Countable (Subtype fun x => Membership.mem (AddSubgroup.zmultiples a) x)","decl":"@[to_additive]\ninstance (a : G) : Countable (zpowers a) := Set.surjective_onto_range.countable\n\n"}
{"name":"Subgroup.instCountableSubtypeMemZpowers","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : Group G\na : G\n⊢ Countable (Subtype fun x => Membership.mem (Subgroup.zpowers a) x)","decl":"@[to_additive]\ninstance (a : G) : Countable (zpowers a) := Set.surjective_onto_range.countable\n\n"}
{"name":"AddSubgroup.range_zmultiplesHom","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"A : Type u_2\ninst✝ : AddGroup A\na : A\n⊢ Eq ((zmultiplesHom A) a).range (AddSubgroup.zmultiples a)","decl":"@[simp]\ntheorem range_zmultiplesHom (a : A) : (zmultiplesHom A a).range = zmultiples a :=\n  rfl\n\n"}
{"name":"AddSubgroup.intCast_mul_mem_zmultiples","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"R : Type u_4\ninst✝ : Ring R\nr : R\nk : Int\n⊢ Membership.mem (AddSubgroup.zmultiples r) (HMul.hMul (↑k) r)","decl":"@[simp]\ntheorem intCast_mul_mem_zmultiples : ↑(k : ℤ) * r ∈ zmultiples r := by\n  simpa only [← zsmul_eq_mul] using zsmul_mem_zmultiples r k\n\n"}
{"name":"AddSubgroup.intCast_mem_zmultiples_one","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"R : Type u_4\ninst✝ : Ring R\nk : Int\n⊢ Membership.mem (AddSubgroup.zmultiples 1) ↑k","decl":"@[simp]\ntheorem intCast_mem_zmultiples_one : ↑(k : ℤ) ∈ zmultiples (1 : R) :=\n  mem_zmultiples_iff.mp ⟨k, by simp⟩\n\n"}
{"name":"Int.range_castAddHom","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"A : Type u_4\ninst✝ : AddGroupWithOne A\n⊢ Eq (Int.castAddHom A).range (AddSubgroup.zmultiples 1)","decl":"@[simp] lemma Int.range_castAddHom {A : Type*} [AddGroupWithOne A] :\n    (Int.castAddHom A).range = AddSubgroup.zmultiples 1 := by\n  ext a\n  simp_rw [AddMonoidHom.mem_range, Int.coe_castAddHom, AddSubgroup.mem_zmultiples_iff, zsmul_one]\n\n"}
{"name":"AddSubgroup.centralizer_closure","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nS : Set G\n⊢ Eq (AddSubgroup.centralizer ↑(AddSubgroup.closure S)) (iInf fun g => iInf fun h => AddSubgroup.centralizer ↑(AddSubgroup.zmultiples g))","decl":"@[to_additive]\ntheorem centralizer_closure (S : Set G) :\n    centralizer (closure S : Set G) = ⨅ g ∈ S, centralizer (zpowers g : Set G) :=\n  le_antisymm\n      (le_iInf fun _ => le_iInf fun hg => centralizer_le <| zpowers_le.2 <| subset_closure hg) <|\n    le_centralizer_iff.1 <|\n      (closure_le _).2 fun g =>\n        SetLike.mem_coe.2 ∘ zpowers_le.1 ∘ le_centralizer_iff.1 ∘ iInf_le_of_le g ∘ iInf_le _\n\n"}
{"name":"Subgroup.centralizer_closure","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : Group G\nS : Set G\n⊢ Eq (Subgroup.centralizer ↑(Subgroup.closure S)) (iInf fun g => iInf fun h => Subgroup.centralizer ↑(Subgroup.zpowers g))","decl":"@[to_additive]\ntheorem centralizer_closure (S : Set G) :\n    centralizer (closure S : Set G) = ⨅ g ∈ S, centralizer (zpowers g : Set G) :=\n  le_antisymm\n      (le_iInf fun _ => le_iInf fun hg => centralizer_le <| zpowers_le.2 <| subset_closure hg) <|\n    le_centralizer_iff.1 <|\n      (closure_le _).2 fun g =>\n        SetLike.mem_coe.2 ∘ zpowers_le.1 ∘ le_centralizer_iff.1 ∘ iInf_le_of_le g ∘ iInf_le _\n\n"}
{"name":"Subgroup.center_eq_iInf","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : Group G\nS : Set G\nhS : Eq (Subgroup.closure S) Top.top\n⊢ Eq (Subgroup.center G) (iInf fun g => iInf fun h => Subgroup.centralizer ↑(Subgroup.zpowers g))","decl":"@[to_additive]\ntheorem center_eq_iInf (S : Set G) (hS : closure S = ⊤) :\n    center G = ⨅ g ∈ S, centralizer (zpowers g) := by\n  rw [← centralizer_univ, ← coe_top, ← hS, centralizer_closure]\n\n"}
{"name":"AddSubgroup.center_eq_iInf","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nS : Set G\nhS : Eq (AddSubgroup.closure S) Top.top\n⊢ Eq (AddSubgroup.center G) (iInf fun g => iInf fun h => AddSubgroup.centralizer ↑(AddSubgroup.zmultiples g))","decl":"@[to_additive]\ntheorem center_eq_iInf (S : Set G) (hS : closure S = ⊤) :\n    center G = ⨅ g ∈ S, centralizer (zpowers g) := by\n  rw [← centralizer_univ, ← coe_top, ← hS, centralizer_closure]\n\n"}
{"name":"Subgroup.center_eq_infi'","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : Group G\nS : Set G\nhS : Eq (Subgroup.closure S) Top.top\n⊢ Eq (Subgroup.center G) (iInf fun g => Subgroup.centralizer ↑(Subgroup.zpowers ↑g))","decl":"@[to_additive]\ntheorem center_eq_infi' (S : Set G) (hS : closure S = ⊤) :\n    center G = ⨅ g : S, centralizer (zpowers (g : G)) := by\n  rw [center_eq_iInf S hS, ← iInf_subtype'']\n\n"}
{"name":"AddSubgroup.center_eq_infi'","module":"Mathlib.Algebra.Group.Subgroup.ZPowers.Lemmas","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nS : Set G\nhS : Eq (AddSubgroup.closure S) Top.top\n⊢ Eq (AddSubgroup.center G) (iInf fun g => AddSubgroup.centralizer ↑(AddSubgroup.zmultiples ↑g))","decl":"@[to_additive]\ntheorem center_eq_infi' (S : Set G) (hS : closure S = ⊤) :\n    center G = ⨅ g : S, centralizer (zpowers (g : G)) := by\n  rw [center_eq_iInf S hS, ← iInf_subtype'']\n\n"}
