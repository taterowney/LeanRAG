{"name":"Locale.coe_of","module":"Mathlib.Topology.Category.Locale","initialProofState":"α : Type u_1\ninst✝ : Order.Frame α\n⊢ Eq (↑(Opposite.unop (Locale.of α))) α","decl":"@[simp]\ntheorem coe_of (α : Type*) [Frame α] : ↥(of α) = α :=\n  rfl\n\n"}
{"name":"topToLocale_obj","module":"Mathlib.Topology.Category.Locale","initialProofState":"X : TopCat\n⊢ Eq (topToLocale.obj X) { unop := Frm.of (TopologicalSpace.Opens ↑X) }","decl":"/-- The forgetful functor from `Top` to `Locale` which forgets that the space has \"enough points\".\n-/\n@[simps!]\ndef topToLocale : TopCat ⥤ Locale :=\n  topCatOpToFrm.rightOp\n\n-- Note, `CompHaus` is too strong. We only need `T0Space`.\n"}
{"name":"topToLocale_map","module":"Mathlib.Topology.Category.Locale","initialProofState":"X✝ Y✝ : TopCat\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (topToLocale.map f) (Quiver.Hom.op (TopologicalSpace.Opens.comap f))","decl":"/-- The forgetful functor from `Top` to `Locale` which forgets that the space has \"enough points\".\n-/\n@[simps!]\ndef topToLocale : TopCat ⥤ Locale :=\n  topCatOpToFrm.rightOp\n\n-- Note, `CompHaus` is too strong. We only need `T0Space`.\n"}
{"name":"CompHausToLocale.faithful","module":"Mathlib.Topology.Category.Locale","initialProofState":"⊢ (compHausToTop.comp topToLocale).Faithful","decl":"instance CompHausToLocale.faithful : (compHausToTop ⋙ topToLocale.{u}).Faithful :=\n  ⟨fun h => by\n    dsimp at h\n    exact Opens.comap_injective (Quiver.Hom.op_inj h)⟩\n"}
