{"name":"sSupHom.map_sSup'","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nself : sSupHom α β\ns : Set α\n⊢ Eq (self.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image self.toFun s))","decl":"/-- The type of `⨆`-preserving functions from `α` to `β`. -/\nstructure sSupHom (α β : Type*) [SupSet α] [SupSet β] where\n  /-- The underlying function of a sSupHom. -/\n  toFun : α → β\n  /-- The proposition that a `sSupHom` commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"sSupHom.mk.injEq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : SupSet α\ninst✝ : SupSet β\ntoFun✝ : α → β\nmap_sSup'✝ : ∀ (s : Set α), Eq (toFun✝ (SupSet.sSup s)) (SupSet.sSup (Set.image toFun✝ s))\ntoFun : α → β\nmap_sSup' : ∀ (s : Set α), Eq (toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toFun s))\n⊢ Eq (Eq { toFun := toFun✝, map_sSup' := map_sSup'✝ } { toFun := toFun, map_sSup' := map_sSup' }) (Eq toFun✝ toFun)","decl":"/-- The type of `⨆`-preserving functions from `α` to `β`. -/\nstructure sSupHom (α β : Type*) [SupSet α] [SupSet β] where\n  /-- The underlying function of a sSupHom. -/\n  toFun : α → β\n  /-- The proposition that a `sSupHom` commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"sSupHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝³ : SupSet α\ninst✝² : SupSet β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoFun : α → β\nmap_sSup' : ∀ (s : Set α), Eq (toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toFun s))\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, map_sSup' := map_sSup' }) 1","decl":"/-- The type of `⨆`-preserving functions from `α` to `β`. -/\nstructure sSupHom (α β : Type*) [SupSet α] [SupSet β] where\n  /-- The underlying function of a sSupHom. -/\n  toFun : α → β\n  /-- The proposition that a `sSupHom` commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"sSupHom.mk.inj","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : SupSet α\ninst✝ : SupSet β\ntoFun✝ : α → β\nmap_sSup'✝ : ∀ (s : Set α), Eq (toFun✝ (SupSet.sSup s)) (SupSet.sSup (Set.image toFun✝ s))\ntoFun : α → β\nmap_sSup' : ∀ (s : Set α), Eq (toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toFun s))\nx✝ : Eq { toFun := toFun✝, map_sSup' := map_sSup'✝ } { toFun := toFun, map_sSup' := map_sSup' }\n⊢ Eq toFun✝ toFun","decl":"/-- The type of `⨆`-preserving functions from `α` to `β`. -/\nstructure sSupHom (α β : Type*) [SupSet α] [SupSet β] where\n  /-- The underlying function of a sSupHom. -/\n  toFun : α → β\n  /-- The proposition that a `sSupHom` commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"sInfHom.map_sInf'","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nself : sInfHom α β\ns : Set α\n⊢ Eq (self.toFun (InfSet.sInf s)) (InfSet.sInf (Set.image self.toFun s))","decl":"/-- The type of `⨅`-preserving functions from `α` to `β`. -/\nstructure sInfHom (α β : Type*) [InfSet α] [InfSet β] where\n  /-- The underlying function of an `sInfHom`. -/\n  toFun : α → β\n  /-- The proposition that a `sInfHom` commutes with arbitrary infima/meets -/\n  map_sInf' (s : Set α) : toFun (sInf s) = sInf (toFun '' s)\n\n"}
{"name":"sInfHom.mk.inj","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : InfSet α\ninst✝ : InfSet β\ntoFun✝ : α → β\nmap_sInf'✝ : ∀ (s : Set α), Eq (toFun✝ (InfSet.sInf s)) (InfSet.sInf (Set.image toFun✝ s))\ntoFun : α → β\nmap_sInf' : ∀ (s : Set α), Eq (toFun (InfSet.sInf s)) (InfSet.sInf (Set.image toFun s))\nx✝ : Eq { toFun := toFun✝, map_sInf' := map_sInf'✝ } { toFun := toFun, map_sInf' := map_sInf' }\n⊢ Eq toFun✝ toFun","decl":"/-- The type of `⨅`-preserving functions from `α` to `β`. -/\nstructure sInfHom (α β : Type*) [InfSet α] [InfSet β] where\n  /-- The underlying function of an `sInfHom`. -/\n  toFun : α → β\n  /-- The proposition that a `sInfHom` commutes with arbitrary infima/meets -/\n  map_sInf' (s : Set α) : toFun (sInf s) = sInf (toFun '' s)\n\n"}
{"name":"sInfHom.mk.injEq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : InfSet α\ninst✝ : InfSet β\ntoFun✝ : α → β\nmap_sInf'✝ : ∀ (s : Set α), Eq (toFun✝ (InfSet.sInf s)) (InfSet.sInf (Set.image toFun✝ s))\ntoFun : α → β\nmap_sInf' : ∀ (s : Set α), Eq (toFun (InfSet.sInf s)) (InfSet.sInf (Set.image toFun s))\n⊢ Eq (Eq { toFun := toFun✝, map_sInf' := map_sInf'✝ } { toFun := toFun, map_sInf' := map_sInf' }) (Eq toFun✝ toFun)","decl":"/-- The type of `⨅`-preserving functions from `α` to `β`. -/\nstructure sInfHom (α β : Type*) [InfSet α] [InfSet β] where\n  /-- The underlying function of an `sInfHom`. -/\n  toFun : α → β\n  /-- The proposition that a `sInfHom` commutes with arbitrary infima/meets -/\n  map_sInf' (s : Set α) : toFun (sInf s) = sInf (toFun '' s)\n\n"}
{"name":"sInfHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝³ : InfSet α\ninst✝² : InfSet β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoFun : α → β\nmap_sInf' : ∀ (s : Set α), Eq (toFun (InfSet.sInf s)) (InfSet.sInf (Set.image toFun s))\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, map_sInf' := map_sInf' }) 1","decl":"/-- The type of `⨅`-preserving functions from `α` to `β`. -/\nstructure sInfHom (α β : Type*) [InfSet α] [InfSet β] where\n  /-- The underlying function of an `sInfHom`. -/\n  toFun : α → β\n  /-- The proposition that a `sInfHom` commutes with arbitrary infima/meets -/\n  map_sInf' (s : Set α) : toFun (sInf s) = sInf (toFun '' s)\n\n"}
{"name":"FrameHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝³ : CompleteLattice α\ninst✝² : CompleteLattice β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoInfTopHom : InfTopHom α β\nmap_sSup' : ∀ (s : Set α), Eq (toInfTopHom.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toInfTopHom.toFun s))\n⊢ Eq (SizeOf.sizeOf { toInfTopHom := toInfTopHom, map_sSup' := map_sSup' }) (HAdd.hAdd 1 (SizeOf.sizeOf toInfTopHom))","decl":"/-- The type of frame homomorphisms from `α` to `β`. They preserve finite meets and arbitrary joins.\n-/\nstructure FrameHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  InfTopHom α β where\n  /-- The proposition that frame homomorphisms commute with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n\n"}
{"name":"FrameHom.mk.injEq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\ntoInfTopHom✝ : InfTopHom α β\nmap_sSup'✝ : ∀ (s : Set α), Eq (toInfTopHom✝.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toInfTopHom✝.toFun s))\ntoInfTopHom : InfTopHom α β\nmap_sSup' : ∀ (s : Set α), Eq (toInfTopHom.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toInfTopHom.toFun s))\n⊢ Eq (Eq { toInfTopHom := toInfTopHom✝, map_sSup' := map_sSup'✝ } { toInfTopHom := toInfTopHom, map_sSup' := map_sSup' }) (Eq toInfTopHom✝ toInfTopHom)","decl":"/-- The type of frame homomorphisms from `α` to `β`. They preserve finite meets and arbitrary joins.\n-/\nstructure FrameHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  InfTopHom α β where\n  /-- The proposition that frame homomorphisms commute with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n\n"}
{"name":"FrameHom.mk.inj","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\ntoInfTopHom✝ : InfTopHom α β\nmap_sSup'✝ : ∀ (s : Set α), Eq (toInfTopHom✝.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toInfTopHom✝.toFun s))\ntoInfTopHom : InfTopHom α β\nmap_sSup' : ∀ (s : Set α), Eq (toInfTopHom.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image toInfTopHom.toFun s))\nx✝ : Eq { toInfTopHom := toInfTopHom✝, map_sSup' := map_sSup'✝ } { toInfTopHom := toInfTopHom, map_sSup' := map_sSup' }\n⊢ Eq toInfTopHom✝ toInfTopHom","decl":"/-- The type of frame homomorphisms from `α` to `β`. They preserve finite meets and arbitrary joins.\n-/\nstructure FrameHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  InfTopHom α β where\n  /-- The proposition that frame homomorphisms commute with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n\n"}
{"name":"FrameHom.map_sSup'","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nself : FrameHom α β\ns : Set α\n⊢ Eq (self.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image self.toFun s))","decl":"/-- The type of frame homomorphisms from `α` to `β`. They preserve finite meets and arbitrary joins.\n-/\nstructure FrameHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  InfTopHom α β where\n  /-- The proposition that frame homomorphisms commute with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n\n"}
{"name":"CompleteLatticeHom.mk.inj","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\ntosInfHom✝ : sInfHom α β\nmap_sSup'✝ : ∀ (s : Set α), Eq (tosInfHom✝.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image tosInfHom✝.toFun s))\ntosInfHom : sInfHom α β\nmap_sSup' : ∀ (s : Set α), Eq (tosInfHom.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image tosInfHom.toFun s))\nx✝ : Eq { tosInfHom := tosInfHom✝, map_sSup' := map_sSup'✝ } { tosInfHom := tosInfHom, map_sSup' := map_sSup' }\n⊢ Eq tosInfHom✝ tosInfHom","decl":"/-- The type of complete lattice homomorphisms from `α` to `β`. -/\nstructure CompleteLatticeHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  sInfHom α β where\n  /-- The proposition that complete lattice homomorphism commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"CompleteLatticeHom.mk.injEq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\ntosInfHom✝ : sInfHom α β\nmap_sSup'✝ : ∀ (s : Set α), Eq (tosInfHom✝.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image tosInfHom✝.toFun s))\ntosInfHom : sInfHom α β\nmap_sSup' : ∀ (s : Set α), Eq (tosInfHom.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image tosInfHom.toFun s))\n⊢ Eq (Eq { tosInfHom := tosInfHom✝, map_sSup' := map_sSup'✝ } { tosInfHom := tosInfHom, map_sSup' := map_sSup' }) (Eq tosInfHom✝ tosInfHom)","decl":"/-- The type of complete lattice homomorphisms from `α` to `β`. -/\nstructure CompleteLatticeHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  sInfHom α β where\n  /-- The proposition that complete lattice homomorphism commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"CompleteLatticeHom.map_sSup'","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nself : CompleteLatticeHom α β\ns : Set α\n⊢ Eq (self.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image self.toFun s))","decl":"/-- The type of complete lattice homomorphisms from `α` to `β`. -/\nstructure CompleteLatticeHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  sInfHom α β where\n  /-- The proposition that complete lattice homomorphism commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"CompleteLatticeHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_8\nβ : Type u_9\ninst✝³ : CompleteLattice α\ninst✝² : CompleteLattice β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntosInfHom : sInfHom α β\nmap_sSup' : ∀ (s : Set α), Eq (tosInfHom.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image tosInfHom.toFun s))\n⊢ Eq (SizeOf.sizeOf { tosInfHom := tosInfHom, map_sSup' := map_sSup' }) (HAdd.hAdd 1 (SizeOf.sizeOf tosInfHom))","decl":"/-- The type of complete lattice homomorphisms from `α` to `β`. -/\nstructure CompleteLatticeHom (α β : Type*) [CompleteLattice α] [CompleteLattice β] extends\n  sInfHom α β where\n  /-- The proposition that complete lattice homomorphism commutes with arbitrary suprema/joins. -/\n  map_sSup' (s : Set α) : toFun (sSup s) = sSup (toFun '' s)\n\n"}
{"name":"sSupHomClass.map_sSup","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_8\nα : Type u_9\nβ : Type u_10\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : FunLike F α β\nself : sSupHomClass F α β\nf : F\ns : Set α\n⊢ Eq (f (SupSet.sSup s)) (SupSet.sSup (Set.image (⇑f) s))","decl":"/-- `sSupHomClass F α β` states that `F` is a type of `⨆`-preserving morphisms.\n\nYou should extend this class when you extend `sSupHom`. -/\nclass sSupHomClass (F α β : Type*) [SupSet α] [SupSet β] [FunLike F α β] : Prop where\n  /-- The proposition that members of `sSupHomClass`s commute with arbitrary suprema/joins. -/\n  map_sSup (f : F) (s : Set α) : f (sSup s) = sSup (f '' s)\n\n"}
{"name":"sInfHomClass.map_sInf","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_8\nα : Type u_9\nβ : Type u_10\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : FunLike F α β\nself : sInfHomClass F α β\nf : F\ns : Set α\n⊢ Eq (f (InfSet.sInf s)) (InfSet.sInf (Set.image (⇑f) s))","decl":"/-- `sInfHomClass F α β` states that `F` is a type of `⨅`-preserving morphisms.\n\nYou should extend this class when you extend `sInfHom`. -/\nclass sInfHomClass (F α β : Type*) [InfSet α] [InfSet β] [FunLike F α β] : Prop where\n  /-- The proposition that members of `sInfHomClass`s commute with arbitrary infima/meets. -/\n  map_sInf (f : F) (s : Set α) : f (sInf s) = sInf (f '' s)\n\n"}
{"name":"FrameHomClass.toInfTopHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_8\nα : Type u_9\nβ : Type u_10\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : FunLike F α β\nself : FrameHomClass F α β\n⊢ InfTopHomClass F α β","decl":"/-- `FrameHomClass F α β` states that `F` is a type of frame morphisms. They preserve `⊓` and `⨆`.\n\nYou should extend this class when you extend `FrameHom`. -/\nclass FrameHomClass (F α β : Type*) [CompleteLattice α] [CompleteLattice β] [FunLike F α β]\n  extends InfTopHomClass F α β : Prop where\n  /-- The proposition that members of `FrameHomClass` commute with arbitrary suprema/joins. -/\n  map_sSup (f : F) (s : Set α) : f (sSup s) = sSup (f '' s)\n\n"}
{"name":"FrameHomClass.map_sSup","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_8\nα : Type u_9\nβ : Type u_10\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : FunLike F α β\nself : FrameHomClass F α β\nf : F\ns : Set α\n⊢ Eq (f (SupSet.sSup s)) (SupSet.sSup (Set.image (⇑f) s))","decl":"/-- `FrameHomClass F α β` states that `F` is a type of frame morphisms. They preserve `⊓` and `⨆`.\n\nYou should extend this class when you extend `FrameHom`. -/\nclass FrameHomClass (F α β : Type*) [CompleteLattice α] [CompleteLattice β] [FunLike F α β]\n  extends InfTopHomClass F α β : Prop where\n  /-- The proposition that members of `FrameHomClass` commute with arbitrary suprema/joins. -/\n  map_sSup (f : F) (s : Set α) : f (sSup s) = sSup (f '' s)\n\n"}
{"name":"CompleteLatticeHomClass.tosInfHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_8\nα : Type u_9\nβ : Type u_10\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : FunLike F α β\nself : CompleteLatticeHomClass F α β\n⊢ sInfHomClass F α β","decl":"/-- `CompleteLatticeHomClass F α β` states that `F` is a type of complete lattice morphisms.\n\nYou should extend this class when you extend `CompleteLatticeHom`. -/\nclass CompleteLatticeHomClass (F α β : Type*) [CompleteLattice α] [CompleteLattice β]\n  [FunLike F α β] extends sInfHomClass F α β : Prop where\n  /-- The proposition that members of `CompleteLatticeHomClass` commute with arbitrary\n  suprema/joins. -/\n  map_sSup (f : F) (s : Set α) : f (sSup s) = sSup (f '' s)\n\n"}
{"name":"CompleteLatticeHomClass.map_sSup","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_8\nα : Type u_9\nβ : Type u_10\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : FunLike F α β\nself : CompleteLatticeHomClass F α β\nf : F\ns : Set α\n⊢ Eq (f (SupSet.sSup s)) (SupSet.sSup (Set.image (⇑f) s))","decl":"/-- `CompleteLatticeHomClass F α β` states that `F` is a type of complete lattice morphisms.\n\nYou should extend this class when you extend `CompleteLatticeHom`. -/\nclass CompleteLatticeHomClass (F α β : Type*) [CompleteLattice α] [CompleteLattice β]\n  [FunLike F α β] extends sInfHomClass F α β : Prop where\n  /-- The proposition that members of `CompleteLatticeHomClass` commute with arbitrary\n  suprema/joins. -/\n  map_sSup (f : F) (s : Set α) : f (sSup s) = sSup (f '' s)\n\n"}
{"name":"map_iSup","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\nι : Sort u_6\ninst✝³ : FunLike F α β\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : sSupHomClass F α β\nf : F\ng : ι → α\n⊢ Eq (f (iSup fun i => g i)) (iSup fun i => f (g i))","decl":"@[simp] theorem map_iSup [SupSet α] [SupSet β] [sSupHomClass F α β] (f : F) (g : ι → α) :\n    f (⨆ i, g i) = ⨆ i, f (g i) := by simp [iSup, ← Set.range_comp, Function.comp_def]\n\n"}
{"name":"map_iSup₂","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\nι : Sort u_6\nκ : ι → Sort u_7\ninst✝³ : FunLike F α β\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : sSupHomClass F α β\nf : F\ng : (i : ι) → κ i → α\n⊢ Eq (f (iSup fun i => iSup fun j => g i j)) (iSup fun i => iSup fun j => f (g i j))","decl":"theorem map_iSup₂ [SupSet α] [SupSet β] [sSupHomClass F α β] (f : F) (g : ∀ i, κ i → α) :\n    f (⨆ (i) (j), g i j) = ⨆ (i) (j), f (g i j) := by simp_rw [map_iSup]\n\n"}
{"name":"map_iInf","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\nι : Sort u_6\ninst✝³ : FunLike F α β\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : sInfHomClass F α β\nf : F\ng : ι → α\n⊢ Eq (f (iInf fun i => g i)) (iInf fun i => f (g i))","decl":"@[simp] theorem map_iInf [InfSet α] [InfSet β] [sInfHomClass F α β] (f : F) (g : ι → α) :\n    f (⨅ i, g i) = ⨅ i, f (g i) := by simp [iInf, ← Set.range_comp, Function.comp_def]\n\n"}
{"name":"map_iInf₂","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\nι : Sort u_6\nκ : ι → Sort u_7\ninst✝³ : FunLike F α β\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : sInfHomClass F α β\nf : F\ng : (i : ι) → κ i → α\n⊢ Eq (f (iInf fun i => iInf fun j => g i j)) (iInf fun i => iInf fun j => f (g i j))","decl":"theorem map_iInf₂ [InfSet α] [InfSet β] [sInfHomClass F α β] (f : F) (g : ∀ i, κ i → α) :\n    f (⨅ (i) (j), g i j) = ⨅ (i) (j), f (g i j) := by simp_rw [map_iInf]\n\n-- See note [lower instance priority]\n"}
{"name":"sSupHomClass.toSupBotHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : sSupHomClass F α β\n⊢ SupBotHomClass F α β","decl":"instance (priority := 100) sSupHomClass.toSupBotHomClass [CompleteLattice α]\n    [CompleteLattice β] [sSupHomClass F α β] : SupBotHomClass F α β :=\n  {  ‹sSupHomClass F α β› with\n    map_sup := fun f a b => by\n      rw [← sSup_pair, map_sSup]\n      simp only [Set.image_pair, sSup_insert, sSup_singleton]\n    map_bot := fun f => by\n      rw [← sSup_empty, map_sSup, Set.image_empty, sSup_empty] }\n\n-- See note [lower instance priority]\n"}
{"name":"sInfHomClass.toInfTopHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : sInfHomClass F α β\n⊢ InfTopHomClass F α β","decl":"instance (priority := 100) sInfHomClass.toInfTopHomClass [CompleteLattice α]\n    [CompleteLattice β] [sInfHomClass F α β] : InfTopHomClass F α β :=\n  { ‹sInfHomClass F α β› with\n    map_inf := fun f a b => by\n      rw [← sInf_pair, map_sInf, Set.image_pair]\n      simp only [Set.image_pair, sInf_insert, sInf_singleton]\n    map_top := fun f => by\n      rw [← sInf_empty, map_sInf, Set.image_empty, sInf_empty] }\n\n-- See note [lower instance priority]\n"}
{"name":"FrameHomClass.tosSupHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : FrameHomClass F α β\n⊢ sSupHomClass F α β","decl":"instance (priority := 100) FrameHomClass.tosSupHomClass [CompleteLattice α]\n    [CompleteLattice β] [FrameHomClass F α β] : sSupHomClass F α β :=\n  { ‹FrameHomClass F α β› with }\n\n-- See note [lower instance priority]\n"}
{"name":"FrameHomClass.toBoundedLatticeHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : FrameHomClass F α β\n⊢ BoundedLatticeHomClass F α β","decl":"instance (priority := 100) FrameHomClass.toBoundedLatticeHomClass [CompleteLattice α]\n    [CompleteLattice β] [FrameHomClass F α β] : BoundedLatticeHomClass F α β :=\n  { ‹FrameHomClass F α β›, sSupHomClass.toSupBotHomClass with }\n\n-- See note [lower instance priority]\n"}
{"name":"CompleteLatticeHomClass.toFrameHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLatticeHomClass F α β\n⊢ FrameHomClass F α β","decl":"instance (priority := 100) CompleteLatticeHomClass.toFrameHomClass [CompleteLattice α]\n    [CompleteLattice β] [CompleteLatticeHomClass F α β] : FrameHomClass F α β :=\n  { ‹CompleteLatticeHomClass F α β›, sInfHomClass.toInfTopHomClass with }\n\n-- See note [lower instance priority]\n"}
{"name":"CompleteLatticeHomClass.toBoundedLatticeHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLatticeHomClass F α β\n⊢ BoundedLatticeHomClass F α β","decl":"instance (priority := 100) CompleteLatticeHomClass.toBoundedLatticeHomClass [CompleteLattice α]\n    [CompleteLattice β] [CompleteLatticeHomClass F α β] : BoundedLatticeHomClass F α β :=\n  { sSupHomClass.toSupBotHomClass, sInfHomClass.toInfTopHomClass with }\n\n"}
{"name":"OrderIsoClass.tosSupHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : EquivLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : OrderIsoClass F α β\n⊢ sSupHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.tosSupHomClass [CompleteLattice α]\n    [CompleteLattice β] [OrderIsoClass F α β] : sSupHomClass F α β :=\n  { show OrderHomClass F α β from inferInstance with\n    map_sSup := fun f s =>\n      eq_of_forall_ge_iff fun c => by\n        simp only [← le_map_inv_iff, sSup_le_iff, Set.forall_mem_image] }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.tosInfHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : EquivLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : OrderIsoClass F α β\n⊢ sInfHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.tosInfHomClass [CompleteLattice α]\n    [CompleteLattice β] [OrderIsoClass F α β] : sInfHomClass F α β :=\n  { show OrderHomClass F α β from inferInstance with\n    map_sInf := fun f s =>\n      eq_of_forall_le_iff fun c => by\n        simp only [← map_inv_le_iff, le_sInf_iff, Set.forall_mem_image] }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toCompleteLatticeHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : EquivLike F α β\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : OrderIsoClass F α β\n⊢ CompleteLatticeHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toCompleteLatticeHomClass [CompleteLattice α]\n    [CompleteLattice β] [OrderIsoClass F α β] : CompleteLatticeHomClass F α β :=\n  -- Porting note: Used to be:\n    -- { OrderIsoClass.tosSupHomClass, OrderIsoClass.toLatticeHomClass,\n    -- show sInfHomClass F α β from inferInstance with }\n  { OrderIsoClass.tosSupHomClass, OrderIsoClass.tosInfHomClass with }\n\n"}
{"name":"OrderIso.toCompleteLatticeHom_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : OrderIso α β\na : α\n⊢ Eq (f.toCompleteLatticeHom.toFun a) (f a)","decl":"/-- Reinterpret an order isomorphism as a morphism of complete lattices. -/\n@[simps] def OrderIso.toCompleteLatticeHom [CompleteLattice α] [CompleteLattice β]\n    (f : OrderIso α β) : CompleteLatticeHom α β where\n  toFun := f\n  map_sInf' := sInfHomClass.map_sInf f\n  map_sSup' := sSupHomClass.map_sSup f\n\n"}
{"name":"sSupHom.instSSupHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\n⊢ sSupHomClass (sSupHom α β) α β","decl":"instance : sSupHomClass (sSupHom α β) α β where\n  map_sSup := sSupHom.map_sSup'\n\n"}
{"name":"sSupHom.toFun_eq_coe","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sSupHom α β\n⊢ Eq f.toFun ⇑f","decl":"@[simp] lemma toFun_eq_coe (f : sSupHom α β) : f.toFun = f := rfl\n\n"}
{"name":"sSupHom.coe_mk","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : α → β\nhf : ∀ (s : Set α), Eq (f (SupSet.sSup s)) (SupSet.sSup (Set.image f s))\n⊢ Eq (⇑{ toFun := f, map_sSup' := hf }) f","decl":"@[simp, norm_cast] lemma coe_mk (f : α → β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"sSupHom.ext_iff","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf g : sSupHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : sSupHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"sSupHom.ext","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf g : sSupHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : sSupHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"sSupHom.coe_copy","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sSupHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : sSupHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"sSupHom.copy_eq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sSupHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : sSupHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"sSupHom.coe_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : SupSet α\n⊢ Eq (⇑(sSupHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(sSupHom.id α) = id :=\n  rfl\n\n"}
{"name":"sSupHom.id_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : SupSet α\na : α\n⊢ Eq ((sSupHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : sSupHom.id α a = a :=\n  rfl\n\n"}
{"name":"sSupHom.coe_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : SupSet γ\nf : sSupHom β γ\ng : sSupHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : sSupHom β γ) (g : sSupHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"sSupHom.comp_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : SupSet γ\nf : sSupHom β γ\ng : sSupHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : sSupHom β γ) (g : sSupHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"sSupHom.comp_assoc","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : SupSet α\ninst✝² : SupSet β\ninst✝¹ : SupSet γ\ninst✝ : SupSet δ\nf : sSupHom γ δ\ng : sSupHom β γ\nh : sSupHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : sSupHom γ δ) (g : sSupHom β γ) (h : sSupHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"sSupHom.comp_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sSupHom α β\n⊢ Eq (f.comp (sSupHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : sSupHom α β) : f.comp (sSupHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"sSupHom.id_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sSupHom α β\n⊢ Eq ((sSupHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : sSupHom α β) : (sSupHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"sSupHom.cancel_right","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : SupSet γ\ng₁ g₂ : sSupHom β γ\nf : sSupHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : sSupHom β γ} {f : sSupHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"sSupHom.cancel_left","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : SupSet γ\ng : sSupHom β γ\nf₁ f₂ : sSupHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : sSupHom β γ} {f₁ f₂ : sSupHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"sSupHom.coe_bot","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝ : SupSet α\nx✝ : CompleteLattice β\n⊢ Eq (⇑Bot.bot) Bot.bot","decl":"@[simp]\ntheorem coe_bot : ⇑(⊥ : sSupHom α β) = ⊥ :=\n  rfl\n\n"}
{"name":"sSupHom.bot_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝ : SupSet α\nx✝ : CompleteLattice β\na : α\n⊢ Eq (Bot.bot a) Bot.bot","decl":"@[simp]\ntheorem bot_apply (a : α) : (⊥ : sSupHom α β) a = ⊥ :=\n  rfl\n\n"}
{"name":"sInfHom.instSInfHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\n⊢ sInfHomClass (sInfHom α β) α β","decl":"instance : sInfHomClass (sInfHom α β) α β where\n  map_sInf := sInfHom.map_sInf'\n\n"}
{"name":"sInfHom.toFun_eq_coe","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sInfHom α β\n⊢ Eq f.toFun ⇑f","decl":"@[simp] lemma toFun_eq_coe (f : sInfHom α β) : f.toFun = f := rfl\n\n"}
{"name":"sInfHom.coe_mk","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : α → β\nhf : ∀ (s : Set α), Eq (f (InfSet.sInf s)) (InfSet.sInf (Set.image f s))\n⊢ Eq (⇑{ toFun := f, map_sInf' := hf }) f","decl":"@[simp] lemma coe_mk (f : α → β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"sInfHom.ext_iff","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf g : sInfHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : sInfHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"sInfHom.ext","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf g : sInfHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : sInfHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"sInfHom.coe_copy","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sInfHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : sInfHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"sInfHom.copy_eq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sInfHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : sInfHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"sInfHom.coe_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : InfSet α\n⊢ Eq (⇑(sInfHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(sInfHom.id α) = id :=\n  rfl\n\n"}
{"name":"sInfHom.id_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : InfSet α\na : α\n⊢ Eq ((sInfHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : sInfHom.id α a = a :=\n  rfl\n\n"}
{"name":"sInfHom.coe_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : InfSet γ\nf : sInfHom β γ\ng : sInfHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : sInfHom β γ) (g : sInfHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"sInfHom.comp_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : InfSet γ\nf : sInfHom β γ\ng : sInfHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : sInfHom β γ) (g : sInfHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"sInfHom.comp_assoc","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : InfSet α\ninst✝² : InfSet β\ninst✝¹ : InfSet γ\ninst✝ : InfSet δ\nf : sInfHom γ δ\ng : sInfHom β γ\nh : sInfHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : sInfHom γ δ) (g : sInfHom β γ) (h : sInfHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"sInfHom.comp_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sInfHom α β\n⊢ Eq (f.comp (sInfHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : sInfHom α β) : f.comp (sInfHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"sInfHom.id_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sInfHom α β\n⊢ Eq ((sInfHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : sInfHom α β) : (sInfHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"sInfHom.cancel_right","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : InfSet γ\ng₁ g₂ : sInfHom β γ\nf : sInfHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : sInfHom β γ} {f : sInfHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"sInfHom.cancel_left","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : InfSet γ\ng : sInfHom β γ\nf₁ f₂ : sInfHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : sInfHom β γ} {f₁ f₂ : sInfHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"sInfHom.coe_top","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : CompleteLattice β\n⊢ Eq (⇑Top.top) Top.top","decl":"@[simp]\ntheorem coe_top : ⇑(⊤ : sInfHom α β) = ⊤ :=\n  rfl\n\n"}
{"name":"sInfHom.top_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : CompleteLattice β\na : α\n⊢ Eq (Top.top a) Top.top","decl":"@[simp]\ntheorem top_apply (a : α) : (⊤ : sInfHom α β) a = ⊤ :=\n  rfl\n\n"}
{"name":"FrameHom.instFrameHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\n⊢ FrameHomClass (FrameHom α β) α β","decl":"instance : FrameHomClass (FrameHom α β) α β where\n  map_sSup f := f.map_sSup'\n  map_inf f := f.map_inf'\n  map_top f := f.map_top'\n\n"}
{"name":"FrameHom.toFun_eq_coe","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\n⊢ Eq f.toFun ⇑f","decl":"lemma toFun_eq_coe (f : FrameHom α β) : f.toFun = f := rfl\n\n"}
{"name":"FrameHom.coe_toInfTopHom","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\n⊢ Eq ⇑f.toInfTopHom ⇑f","decl":"@[simp] lemma coe_toInfTopHom (f : FrameHom α β) : ⇑f.toInfTopHom = f := rfl\n"}
{"name":"FrameHom.coe_toLatticeHom","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\n⊢ Eq ⇑f.toLatticeHom ⇑f","decl":"@[simp] lemma coe_toLatticeHom (f : FrameHom α β) : ⇑f.toLatticeHom = f := rfl\n"}
{"name":"FrameHom.coe_mk","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : InfTopHom α β\nhf : ∀ (s : Set α), Eq (f.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image f.toFun s))\n⊢ Eq ⇑{ toInfTopHom := f, map_sSup' := hf } ⇑f","decl":"@[simp] lemma coe_mk (f : InfTopHom α β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"FrameHom.ext_iff","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf g : FrameHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : FrameHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"FrameHom.ext","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf g : FrameHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : FrameHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"FrameHom.coe_copy","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : FrameHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"FrameHom.copy_eq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : FrameHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"FrameHom.coe_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\n⊢ Eq (⇑(FrameHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(FrameHom.id α) = id :=\n  rfl\n\n"}
{"name":"FrameHom.id_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\na : α\n⊢ Eq ((FrameHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : FrameHom.id α a = a :=\n  rfl\n\n"}
{"name":"FrameHom.coe_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\nf : FrameHom β γ\ng : FrameHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : FrameHom β γ) (g : FrameHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"FrameHom.comp_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\nf : FrameHom β γ\ng : FrameHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : FrameHom β γ) (g : FrameHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"FrameHom.comp_assoc","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : CompleteLattice α\ninst✝² : CompleteLattice β\ninst✝¹ : CompleteLattice γ\ninst✝ : CompleteLattice δ\nf : FrameHom γ δ\ng : FrameHom β γ\nh : FrameHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : FrameHom γ δ) (g : FrameHom β γ) (h : FrameHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"FrameHom.comp_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\n⊢ Eq (f.comp (FrameHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : FrameHom α β) : f.comp (FrameHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"FrameHom.id_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : FrameHom α β\n⊢ Eq ((FrameHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : FrameHom α β) : (FrameHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"FrameHom.cancel_right","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\ng₁ g₂ : FrameHom β γ\nf : FrameHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : FrameHom β γ} {f : FrameHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"FrameHom.cancel_left","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\ng : FrameHom β γ\nf₁ f₂ : FrameHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : FrameHom β γ} {f₁ f₂ : FrameHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"CompleteLatticeHom.instCompleteLatticeHomClass","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\n⊢ CompleteLatticeHomClass (CompleteLatticeHom α β) α β","decl":"instance : CompleteLatticeHomClass (CompleteLatticeHom α β) α β where\n  map_sSup f := f.map_sSup'\n  map_sInf f := f.map_sInf'\n\n"}
{"name":"CompleteLatticeHom.toFun_eq_coe","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\n⊢ Eq f.toFun ⇑f","decl":"lemma toFun_eq_coe (f : CompleteLatticeHom α β) : f.toFun = f := rfl\n\n"}
{"name":"CompleteLatticeHom.coe_tosInfHom","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\n⊢ Eq ⇑f.tosInfHom ⇑f","decl":"@[simp] lemma coe_tosInfHom (f : CompleteLatticeHom α β) : ⇑f.tosInfHom = f := rfl\n"}
{"name":"CompleteLatticeHom.coe_tosSupHom","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\n⊢ Eq ⇑f.tosSupHom ⇑f","decl":"@[simp] lemma coe_tosSupHom (f : CompleteLatticeHom α β) : ⇑f.tosSupHom = f := rfl\n"}
{"name":"CompleteLatticeHom.coe_toBoundedLatticeHom","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\n⊢ Eq ⇑f.toBoundedLatticeHom ⇑f","decl":"@[simp] lemma coe_toBoundedLatticeHom (f : CompleteLatticeHom α β) : ⇑f.toBoundedLatticeHom = f :=\nrfl\n"}
{"name":"CompleteLatticeHom.coe_mk","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : sInfHom α β\nhf : ∀ (s : Set α), Eq (f.toFun (SupSet.sSup s)) (SupSet.sSup (Set.image f.toFun s))\n⊢ Eq ⇑{ tosInfHom := f, map_sSup' := hf } ⇑f","decl":"@[simp] lemma coe_mk (f : sInfHom α β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"CompleteLatticeHom.ext","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf g : CompleteLatticeHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : CompleteLatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CompleteLatticeHom.ext_iff","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf g : CompleteLatticeHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : CompleteLatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CompleteLatticeHom.coe_copy","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : CompleteLatticeHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.copy_eq","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : CompleteLatticeHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"CompleteLatticeHom.coe_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\n⊢ Eq (⇑(CompleteLatticeHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(CompleteLatticeHom.id α) = id :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.id_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\na : α\n⊢ Eq ((CompleteLatticeHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : CompleteLatticeHom.id α a = a :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.coe_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\nf : CompleteLatticeHom β γ\ng : CompleteLatticeHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : CompleteLatticeHom β γ) (g : CompleteLatticeHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.comp_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\nf : CompleteLatticeHom β γ\ng : CompleteLatticeHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : CompleteLatticeHom β γ) (g : CompleteLatticeHom α β) (a : α) :\n    (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.comp_assoc","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : CompleteLattice α\ninst✝² : CompleteLattice β\ninst✝¹ : CompleteLattice γ\ninst✝ : CompleteLattice δ\nf : CompleteLatticeHom γ δ\ng : CompleteLatticeHom β γ\nh : CompleteLatticeHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : CompleteLatticeHom γ δ) (g : CompleteLatticeHom β γ)\n    (h : CompleteLatticeHom α β) : (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.comp_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\n⊢ Eq (f.comp (CompleteLatticeHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : CompleteLatticeHom α β) : f.comp (CompleteLatticeHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CompleteLatticeHom.id_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\n⊢ Eq ((CompleteLatticeHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : CompleteLatticeHom α β) : (CompleteLatticeHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CompleteLatticeHom.cancel_right","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\ng₁ g₂ : CompleteLatticeHom β γ\nf : CompleteLatticeHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : CompleteLatticeHom β γ} {f : CompleteLatticeHom α β}\n    (hf : Surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"CompleteLatticeHom.cancel_left","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\ng : CompleteLatticeHom β γ\nf₁ f₂ : CompleteLatticeHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : CompleteLatticeHom β γ} {f₁ f₂ : CompleteLatticeHom α β}\n    (hg : Injective g) : g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"sSupHom.dual_symm_apply_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sInfHom (OrderDual α) (OrderDual β)\na✝ : α\n⊢ Eq ((sSupHom.dual.symm f) a✝) (Function.comp (⇑OrderDual.ofDual) (Function.comp ⇑f ⇑OrderDual.toDual) a✝)","decl":"/-- Reinterpret a `⨆`-homomorphism as an `⨅`-homomorphism between the dual orders. -/\n@[simps]\nprotected def dual : sSupHom α β ≃ sInfHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨toDual ∘ f ∘ ofDual, f.map_sSup'⟩\n  invFun f := ⟨ofDual ∘ f ∘ toDual, f.map_sInf'⟩\n  left_inv _ := sSupHom.ext fun _ => rfl\n  right_inv _ := sInfHom.ext fun _ => rfl\n\n"}
{"name":"sSupHom.dual_apply_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : SupSet α\ninst✝ : SupSet β\nf : sSupHom α β\na✝ : OrderDual α\n⊢ Eq ((sSupHom.dual f).toFun a✝) (Function.comp (⇑OrderDual.toDual) (Function.comp ⇑f ⇑OrderDual.ofDual) a✝)","decl":"/-- Reinterpret a `⨆`-homomorphism as an `⨅`-homomorphism between the dual orders. -/\n@[simps]\nprotected def dual : sSupHom α β ≃ sInfHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨toDual ∘ f ∘ ofDual, f.map_sSup'⟩\n  invFun f := ⟨ofDual ∘ f ∘ toDual, f.map_sInf'⟩\n  left_inv _ := sSupHom.ext fun _ => rfl\n  right_inv _ := sInfHom.ext fun _ => rfl\n\n"}
{"name":"sSupHom.dual_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : SupSet α\n⊢ Eq (sSupHom.dual (sSupHom.id α)) (sInfHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : sSupHom.dual (sSupHom.id α) = sInfHom.id _ :=\n  rfl\n\n"}
{"name":"sSupHom.dual_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : SupSet γ\ng : sSupHom β γ\nf : sSupHom α β\n⊢ Eq (sSupHom.dual (g.comp f)) ((sSupHom.dual g).comp (sSupHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : sSupHom β γ) (f : sSupHom α β) :\n    sSupHom.dual (g.comp f) = (sSupHom.dual g).comp (sSupHom.dual f) :=\n  rfl\n\n"}
{"name":"sSupHom.symm_dual_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : SupSet α\n⊢ Eq (sSupHom.dual.symm (sInfHom.id (OrderDual α))) (sSupHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : sSupHom.dual.symm (sInfHom.id _) = sSupHom.id α :=\n  rfl\n\n"}
{"name":"sSupHom.symm_dual_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : SupSet α\ninst✝¹ : SupSet β\ninst✝ : SupSet γ\ng : sInfHom (OrderDual β) (OrderDual γ)\nf : sInfHom (OrderDual α) (OrderDual β)\n⊢ Eq (sSupHom.dual.symm (g.comp f)) ((sSupHom.dual.symm g).comp (sSupHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : sInfHom βᵒᵈ γᵒᵈ) (f : sInfHom αᵒᵈ βᵒᵈ) :\n    sSupHom.dual.symm (g.comp f) = (sSupHom.dual.symm g).comp (sSupHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"sInfHom.dual_symm_apply_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sSupHom (OrderDual α) (OrderDual β)\na✝ : α\n⊢ Eq ((sInfHom.dual.symm f).toFun a✝) (Function.comp (⇑OrderDual.ofDual) (Function.comp ⇑f ⇑OrderDual.toDual) a✝)","decl":"/-- Reinterpret an `⨅`-homomorphism as a `⨆`-homomorphism between the dual orders. -/\n@[simps]\nprotected def dual : sInfHom α β ≃ sSupHom αᵒᵈ βᵒᵈ where\n  toFun f :=\n    { toFun := toDual ∘ f ∘ ofDual\n      map_sSup' := fun _ => congr_arg toDual (map_sInf f _) }\n  invFun f :=\n    { toFun := ofDual ∘ f ∘ toDual\n      map_sInf' := fun _ => congr_arg ofDual (map_sSup f _) }\n  left_inv _ := sInfHom.ext fun _ => rfl\n  right_inv _ := sSupHom.ext fun _ => rfl\n\n"}
{"name":"sInfHom.dual_apply_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : InfSet α\ninst✝ : InfSet β\nf : sInfHom α β\na✝ : OrderDual α\n⊢ Eq ((sInfHom.dual f) a✝) (Function.comp (⇑OrderDual.toDual) (Function.comp ⇑f ⇑OrderDual.ofDual) a✝)","decl":"/-- Reinterpret an `⨅`-homomorphism as a `⨆`-homomorphism between the dual orders. -/\n@[simps]\nprotected def dual : sInfHom α β ≃ sSupHom αᵒᵈ βᵒᵈ where\n  toFun f :=\n    { toFun := toDual ∘ f ∘ ofDual\n      map_sSup' := fun _ => congr_arg toDual (map_sInf f _) }\n  invFun f :=\n    { toFun := ofDual ∘ f ∘ toDual\n      map_sInf' := fun _ => congr_arg ofDual (map_sSup f _) }\n  left_inv _ := sInfHom.ext fun _ => rfl\n  right_inv _ := sSupHom.ext fun _ => rfl\n\n"}
{"name":"sInfHom.dual_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : InfSet α\n⊢ Eq (sInfHom.dual (sInfHom.id α)) (sSupHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : sInfHom.dual (sInfHom.id α) = sSupHom.id _ :=\n  rfl\n\n"}
{"name":"sInfHom.dual_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : InfSet γ\ng : sInfHom β γ\nf : sInfHom α β\n⊢ Eq (sInfHom.dual (g.comp f)) ((sInfHom.dual g).comp (sInfHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : sInfHom β γ) (f : sInfHom α β) :\n    sInfHom.dual (g.comp f) = (sInfHom.dual g).comp (sInfHom.dual f) :=\n  rfl\n\n"}
{"name":"sInfHom.symm_dual_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : InfSet α\n⊢ Eq (sInfHom.dual.symm (sSupHom.id (OrderDual α))) (sInfHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : sInfHom.dual.symm (sSupHom.id _) = sInfHom.id α :=\n  rfl\n\n"}
{"name":"sInfHom.symm_dual_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : InfSet α\ninst✝¹ : InfSet β\ninst✝ : InfSet γ\ng : sSupHom (OrderDual β) (OrderDual γ)\nf : sSupHom (OrderDual α) (OrderDual β)\n⊢ Eq (sInfHom.dual.symm (g.comp f)) ((sInfHom.dual.symm g).comp (sInfHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : sSupHom βᵒᵈ γᵒᵈ) (f : sSupHom αᵒᵈ βᵒᵈ) :\n    sInfHom.dual.symm (g.comp f) = (sInfHom.dual.symm g).comp (sInfHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.dual_apply_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom α β\na✝ : OrderDual α\n⊢ Eq ((CompleteLatticeHom.dual f).toFun a✝) (OrderDual.toDual (f (OrderDual.ofDual a✝)))","decl":"/-- Reinterpret a complete lattice homomorphism as a complete lattice homomorphism between the dual\nlattices. -/\n@[simps!]\nprotected def dual : CompleteLatticeHom α β ≃ CompleteLatticeHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨sSupHom.dual f.tosSupHom, fun s ↦ f.map_sInf' s⟩\n  invFun f := ⟨sSupHom.dual f.tosSupHom, fun s ↦ f.map_sInf' s⟩\n  left_inv _ := ext fun _ => rfl\n  right_inv _ := ext fun _ => rfl\n\n"}
{"name":"CompleteLatticeHom.dual_symm_apply_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CompleteLattice α\ninst✝ : CompleteLattice β\nf : CompleteLatticeHom (OrderDual α) (OrderDual β)\na✝ : OrderDual (OrderDual α)\n⊢ Eq ((CompleteLatticeHom.dual.symm f).toFun a✝) (OrderDual.toDual (f (OrderDual.ofDual a✝)))","decl":"/-- Reinterpret a complete lattice homomorphism as a complete lattice homomorphism between the dual\nlattices. -/\n@[simps!]\nprotected def dual : CompleteLatticeHom α β ≃ CompleteLatticeHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨sSupHom.dual f.tosSupHom, fun s ↦ f.map_sInf' s⟩\n  invFun f := ⟨sSupHom.dual f.tosSupHom, fun s ↦ f.map_sInf' s⟩\n  left_inv _ := ext fun _ => rfl\n  right_inv _ := ext fun _ => rfl\n\n"}
{"name":"CompleteLatticeHom.dual_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\n⊢ Eq (CompleteLatticeHom.dual (CompleteLatticeHom.id α)) (CompleteLatticeHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : CompleteLatticeHom.dual (CompleteLatticeHom.id α) = CompleteLatticeHom.id _ :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.dual_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\ng : CompleteLatticeHom β γ\nf : CompleteLatticeHom α β\n⊢ Eq (CompleteLatticeHom.dual (g.comp f)) ((CompleteLatticeHom.dual g).comp (CompleteLatticeHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : CompleteLatticeHom β γ) (f : CompleteLatticeHom α β) :\n    CompleteLatticeHom.dual (g.comp f) =\n      (CompleteLatticeHom.dual g).comp (CompleteLatticeHom.dual f) :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.symm_dual_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\n⊢ Eq (CompleteLatticeHom.dual.symm (CompleteLatticeHom.id (OrderDual α))) (CompleteLatticeHom.id α)","decl":"@[simp]\ntheorem symm_dual_id :\n    CompleteLatticeHom.dual.symm (CompleteLatticeHom.id _) = CompleteLatticeHom.id α :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.symm_dual_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CompleteLattice α\ninst✝¹ : CompleteLattice β\ninst✝ : CompleteLattice γ\ng : CompleteLatticeHom (OrderDual β) (OrderDual γ)\nf : CompleteLatticeHom (OrderDual α) (OrderDual β)\n⊢ Eq (CompleteLatticeHom.dual.symm (g.comp f)) ((CompleteLatticeHom.dual.symm g).comp (CompleteLatticeHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : CompleteLatticeHom βᵒᵈ γᵒᵈ) (f : CompleteLatticeHom αᵒᵈ βᵒᵈ) :\n    CompleteLatticeHom.dual.symm (g.comp f) =\n      (CompleteLatticeHom.dual.symm g).comp (CompleteLatticeHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.coe_setPreimage","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nf : α → β\n⊢ Eq (⇑(CompleteLatticeHom.setPreimage f)) (Set.preimage f)","decl":"@[simp]\ntheorem coe_setPreimage (f : α → β) : ⇑(setPreimage f) = preimage f :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.setPreimage_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nf : α → β\ns : Set β\n⊢ Eq ((CompleteLatticeHom.setPreimage f) s) (Set.preimage f s)","decl":"@[simp]\ntheorem setPreimage_apply (f : α → β) (s : Set β) : setPreimage f s = s.preimage f :=\n  rfl\n\n"}
{"name":"CompleteLatticeHom.setPreimage_id","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\n⊢ Eq (CompleteLatticeHom.setPreimage id) (CompleteLatticeHom.id (Set α))","decl":"@[simp]\ntheorem setPreimage_id : setPreimage (id : α → α) = CompleteLatticeHom.id _ :=\n  rfl\n\n-- This lemma can't be `simp` because `g ∘ f` matches anything (`id ∘ f = f` syntactically)\n"}
{"name":"CompleteLatticeHom.setPreimage_comp","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ng : β → γ\nf : α → β\n⊢ Eq (CompleteLatticeHom.setPreimage (Function.comp g f)) ((CompleteLatticeHom.setPreimage f).comp (CompleteLatticeHom.setPreimage g))","decl":"theorem setPreimage_comp (g : β → γ) (f : α → β) :\n    setPreimage (g ∘ f) = (setPreimage f).comp (setPreimage g) :=\n  rfl\n\n"}
{"name":"Set.image_sSup","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nf : α → β\ns : Set (Set α)\n⊢ Eq (Set.image f (SupSet.sSup s)) (SupSet.sSup (Set.image (Set.image f) s))","decl":"theorem Set.image_sSup {f : α → β} (s : Set (Set α)) : f '' sSup s = sSup (image f '' s) :=\n  Set.image_sUnion\n\n"}
{"name":"sSupHom.setImage_toFun","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\nf : α → β\ns : Set α\n⊢ Eq ((sSupHom.setImage f) s) (Set.image f s)","decl":"/-- Using `Set.image`, a function between types yields a `sSupHom` between their lattices of\nsubsets.\n\nSee also `CompleteLatticeHom.setPreimage`. -/\n@[simps]\ndef sSupHom.setImage (f : α → β) : sSupHom (Set α) (Set β) where\n  toFun := image f\n  map_sSup' := Set.image_sSup\n\n"}
{"name":"Equiv.toOrderIsoSet_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ne : Equiv α β\ns : Set α\n⊢ Eq (e.toOrderIsoSet s) (Set.image (⇑e) s)","decl":"/-- An equivalence of types yields an order isomorphism between their lattices of subsets. -/\n@[simps]\ndef Equiv.toOrderIsoSet (e : α ≃ β) : Set α ≃o Set β where\n  toFun s := e '' s\n  invFun s := e.symm '' s\n  left_inv s := by simp only [← image_comp, Equiv.symm_comp_self, id, image_id']\n  right_inv s := by simp only [← image_comp, Equiv.self_comp_symm, id, image_id']\n  map_rel_iff' :=\n    ⟨fun h => by simpa using @monotone_image _ _ e.symm _ _ h, fun h => monotone_image h⟩\n\n"}
{"name":"Equiv.toOrderIsoSet_symm_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\nβ : Type u_3\ne : Equiv α β\ns : Set β\n⊢ Eq ((RelIso.symm e.toOrderIsoSet) s) (Set.image (⇑e.symm) s)","decl":"/-- An equivalence of types yields an order isomorphism between their lattices of subsets. -/\n@[simps]\ndef Equiv.toOrderIsoSet (e : α ≃ β) : Set α ≃o Set β where\n  toFun s := e '' s\n  invFun s := e.symm '' s\n  left_inv s := by simp only [← image_comp, Equiv.symm_comp_self, id, image_id']\n  right_inv s := by simp only [← image_comp, Equiv.self_comp_symm, id, image_id']\n  map_rel_iff' :=\n    ⟨fun h => by simpa using @monotone_image _ _ e.symm _ _ h, fun h => monotone_image h⟩\n\n"}
{"name":"supsSupHom_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\nx : Prod α α\n⊢ Eq (supsSupHom x) (Max.max x.1 x.2)","decl":"@[simp, norm_cast]\ntheorem supsSupHom_apply : supsSupHom x = x.1 ⊔ x.2 :=\n  rfl\n\n"}
{"name":"infsInfHom_apply","module":"Mathlib.Order.Hom.CompleteLattice","initialProofState":"α : Type u_2\ninst✝ : CompleteLattice α\nx : Prod α α\n⊢ Eq (infsInfHom x) (Min.min x.1 x.2)","decl":"@[simp, norm_cast]\ntheorem infsInfHom_apply : infsInfHom x = x.1 ⊓ x.2 :=\n  rfl\n"}
