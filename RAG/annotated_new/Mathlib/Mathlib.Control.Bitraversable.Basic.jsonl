{"name":"LawfulBitraversable.bitraverse_eq_bimap_id","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝ : Bitraversable t\nself : LawfulBitraversable t\nα α' β β' : Type u\nf : α → β\nf' : α' → β'\nx : t α α'\n⊢ Eq (Bitraversable.bitraverse (Function.comp Pure.pure f) (Function.comp Pure.pure f') x) (Pure.pure (Bifunctor.bimap f f' x))","decl":"/-- Bifunctor. This typeclass asserts that a lawless bitraversable bifunctor is lawful. -/\nclass LawfulBitraversable (t : Type u → Type u → Type u) [Bitraversable t] extends\n  LawfulBifunctor t : Prop where\n  -- Porting note: need to specify `m := Id` because `id` no longer has a `Monad` instance\n  id_bitraverse : ∀ {α β} (x : t α β), bitraverse (m := Id) pure pure x = pure x\n  comp_bitraverse :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      {α α' β β' γ γ'} (f : β → F γ) (f' : β' → F γ') (g : α → G β) (g' : α' → G β') (x : t α α'),\n      bitraverse (Comp.mk ∘ map f ∘ g) (Comp.mk ∘ map f' ∘ g') x =\n        Comp.mk (bitraverse f f' <$> bitraverse g g' x)\n  bitraverse_eq_bimap_id :\n    ∀ {α α' β β'} (f : α → β) (f' : α' → β') (x : t α α'),\n      bitraverse (m := Id) (pure ∘ f) (pure ∘ f') x = pure (bimap f f' x)\n  binaturality :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      (η : ApplicativeTransformation F G) {α α' β β'} (f : α → F β) (f' : α' → F β') (x : t α α'),\n      η (bitraverse f f' x) = bitraverse (@η _ ∘ f) (@η _ ∘ f') x\n\n"}
{"name":"LawfulBitraversable.comp_bitraverse","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝⁴ : Bitraversable t\nself : LawfulBitraversable t\nF G : Type u → Type u\ninst✝³ : Applicative F\ninst✝² : Applicative G\ninst✝¹ : LawfulApplicative F\ninst✝ : LawfulApplicative G\nα α' β β' γ γ' : Type u\nf : β → F γ\nf' : β' → F γ'\ng : α → G β\ng' : α' → G β'\nx : t α α'\n⊢ Eq (Bitraversable.bitraverse (Function.comp Functor.Comp.mk (Function.comp (Functor.map f) g)) (Function.comp Functor.Comp.mk (Function.comp (Functor.map f') g')) x) (Functor.Comp.mk (Functor.map (Bitraversable.bitraverse f f') (Bitraversable.bitraverse g g' x)))","decl":"/-- Bifunctor. This typeclass asserts that a lawless bitraversable bifunctor is lawful. -/\nclass LawfulBitraversable (t : Type u → Type u → Type u) [Bitraversable t] extends\n  LawfulBifunctor t : Prop where\n  -- Porting note: need to specify `m := Id` because `id` no longer has a `Monad` instance\n  id_bitraverse : ∀ {α β} (x : t α β), bitraverse (m := Id) pure pure x = pure x\n  comp_bitraverse :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      {α α' β β' γ γ'} (f : β → F γ) (f' : β' → F γ') (g : α → G β) (g' : α' → G β') (x : t α α'),\n      bitraverse (Comp.mk ∘ map f ∘ g) (Comp.mk ∘ map f' ∘ g') x =\n        Comp.mk (bitraverse f f' <$> bitraverse g g' x)\n  bitraverse_eq_bimap_id :\n    ∀ {α α' β β'} (f : α → β) (f' : α' → β') (x : t α α'),\n      bitraverse (m := Id) (pure ∘ f) (pure ∘ f') x = pure (bimap f f' x)\n  binaturality :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      (η : ApplicativeTransformation F G) {α α' β β'} (f : α → F β) (f' : α' → F β') (x : t α α'),\n      η (bitraverse f f' x) = bitraverse (@η _ ∘ f) (@η _ ∘ f') x\n\n"}
{"name":"LawfulBitraversable.toLawfulBifunctor","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝ : Bitraversable t\nself : LawfulBitraversable t\n⊢ LawfulBifunctor t","decl":"/-- Bifunctor. This typeclass asserts that a lawless bitraversable bifunctor is lawful. -/\nclass LawfulBitraversable (t : Type u → Type u → Type u) [Bitraversable t] extends\n  LawfulBifunctor t : Prop where\n  -- Porting note: need to specify `m := Id` because `id` no longer has a `Monad` instance\n  id_bitraverse : ∀ {α β} (x : t α β), bitraverse (m := Id) pure pure x = pure x\n  comp_bitraverse :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      {α α' β β' γ γ'} (f : β → F γ) (f' : β' → F γ') (g : α → G β) (g' : α' → G β') (x : t α α'),\n      bitraverse (Comp.mk ∘ map f ∘ g) (Comp.mk ∘ map f' ∘ g') x =\n        Comp.mk (bitraverse f f' <$> bitraverse g g' x)\n  bitraverse_eq_bimap_id :\n    ∀ {α α' β β'} (f : α → β) (f' : α' → β') (x : t α α'),\n      bitraverse (m := Id) (pure ∘ f) (pure ∘ f') x = pure (bimap f f' x)\n  binaturality :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      (η : ApplicativeTransformation F G) {α α' β β'} (f : α → F β) (f' : α' → F β') (x : t α α'),\n      η (bitraverse f f' x) = bitraverse (@η _ ∘ f) (@η _ ∘ f') x\n\n"}
{"name":"LawfulBitraversable.id_bitraverse","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝ : Bitraversable t\nself : LawfulBitraversable t\nα β : Type u\nx : t α β\n⊢ Eq (Bitraversable.bitraverse Pure.pure Pure.pure x) (Pure.pure x)","decl":"/-- Bifunctor. This typeclass asserts that a lawless bitraversable bifunctor is lawful. -/\nclass LawfulBitraversable (t : Type u → Type u → Type u) [Bitraversable t] extends\n  LawfulBifunctor t : Prop where\n  -- Porting note: need to specify `m := Id` because `id` no longer has a `Monad` instance\n  id_bitraverse : ∀ {α β} (x : t α β), bitraverse (m := Id) pure pure x = pure x\n  comp_bitraverse :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      {α α' β β' γ γ'} (f : β → F γ) (f' : β' → F γ') (g : α → G β) (g' : α' → G β') (x : t α α'),\n      bitraverse (Comp.mk ∘ map f ∘ g) (Comp.mk ∘ map f' ∘ g') x =\n        Comp.mk (bitraverse f f' <$> bitraverse g g' x)\n  bitraverse_eq_bimap_id :\n    ∀ {α α' β β'} (f : α → β) (f' : α' → β') (x : t α α'),\n      bitraverse (m := Id) (pure ∘ f) (pure ∘ f') x = pure (bimap f f' x)\n  binaturality :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      (η : ApplicativeTransformation F G) {α α' β β'} (f : α → F β) (f' : α' → F β') (x : t α α'),\n      η (bitraverse f f' x) = bitraverse (@η _ ∘ f) (@η _ ∘ f') x\n\n"}
{"name":"LawfulBitraversable.binaturality","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝⁴ : Bitraversable t\nself : LawfulBitraversable t\nF G : Type u → Type u\ninst✝³ : Applicative F\ninst✝² : Applicative G\ninst✝¹ : LawfulApplicative F\ninst✝ : LawfulApplicative G\nη : ApplicativeTransformation F G\nα α' β β' : Type u\nf : α → F β\nf' : α' → F β'\nx : t α α'\n⊢ Eq ((fun {α} => η.app α) (Bitraversable.bitraverse f f' x)) (Bitraversable.bitraverse (Function.comp (fun {α} => η.app α) f) (Function.comp (fun {α} => η.app α) f') x)","decl":"/-- Bifunctor. This typeclass asserts that a lawless bitraversable bifunctor is lawful. -/\nclass LawfulBitraversable (t : Type u → Type u → Type u) [Bitraversable t] extends\n  LawfulBifunctor t : Prop where\n  -- Porting note: need to specify `m := Id` because `id` no longer has a `Monad` instance\n  id_bitraverse : ∀ {α β} (x : t α β), bitraverse (m := Id) pure pure x = pure x\n  comp_bitraverse :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      {α α' β β' γ γ'} (f : β → F γ) (f' : β' → F γ') (g : α → G β) (g' : α' → G β') (x : t α α'),\n      bitraverse (Comp.mk ∘ map f ∘ g) (Comp.mk ∘ map f' ∘ g') x =\n        Comp.mk (bitraverse f f' <$> bitraverse g g' x)\n  bitraverse_eq_bimap_id :\n    ∀ {α α' β β'} (f : α → β) (f' : α' → β') (x : t α α'),\n      bitraverse (m := Id) (pure ∘ f) (pure ∘ f') x = pure (bimap f f' x)\n  binaturality :\n    ∀ {F G} [Applicative F] [Applicative G] [LawfulApplicative F] [LawfulApplicative G]\n      (η : ApplicativeTransformation F G) {α α' β β'} (f : α → F β) (f' : α' → F β') (x : t α α'),\n      η (bitraverse f f' x) = bitraverse (@η _ ∘ f) (@η _ ∘ f') x\n\n"}
{"name":"LawfulBitraversable.bitraverse_id_id","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝ : Bitraversable t\nself : LawfulBitraversable t\nα β : Type u\n⊢ Eq (Bitraversable.bitraverse Pure.pure Pure.pure) Pure.pure","decl":"attribute [higher_order bitraverse_id_id] id_bitraverse\n\n"}
{"name":"LawfulBitraversable.bitraverse_comp","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝⁴ : Bitraversable t\nself : LawfulBitraversable t\nF G : Type u → Type u\ninst✝³ : Applicative F\ninst✝² : Applicative G\ninst✝¹ : LawfulApplicative F\ninst✝ : LawfulApplicative G\nα α' β β' γ γ' : Type u\nf : β → F γ\nf' : β' → F γ'\ng : α → G β\ng' : α' → G β'\n⊢ Eq (Bitraversable.bitraverse (Function.comp Functor.Comp.mk (Function.comp (Functor.map f) g)) (Function.comp Functor.Comp.mk (Function.comp (Functor.map f') g'))) (Function.comp Functor.Comp.mk (Function.comp (Functor.map (Bitraversable.bitraverse f f')) (Bitraversable.bitraverse g g')))","decl":"attribute [higher_order bitraverse_comp] comp_bitraverse\n\n"}
{"name":"LawfulBitraversable.binaturality'","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝⁴ : Bitraversable t\nself : LawfulBitraversable t\nF G : Type u → Type u\ninst✝³ : Applicative F\ninst✝² : Applicative G\ninst✝¹ : LawfulApplicative F\ninst✝ : LawfulApplicative G\nη : ApplicativeTransformation F G\nα α' β β' : Type u\nf : α → F β\nf' : α' → F β'\n⊢ Eq (Function.comp (fun {α} => η.app α) (Bitraversable.bitraverse f f')) (Bitraversable.bitraverse (Function.comp (fun {α} => η.app α) f) (Function.comp (fun {α} => η.app α) f'))","decl":"attribute [higher_order] binaturality bitraverse_eq_bimap_id\n\n"}
{"name":"LawfulBitraversable.bitraverse_eq_bimap_id'","module":"Mathlib.Control.Bitraversable.Basic","initialProofState":"t : Type u → Type u → Type u\ninst✝ : Bitraversable t\nself : LawfulBitraversable t\nα α' β β' : Type u\nf : α → β\nf' : α' → β'\n⊢ Eq (Bitraversable.bitraverse (Function.comp Pure.pure f) (Function.comp Pure.pure f')) (Function.comp Pure.pure (Bifunctor.bimap f f'))","decl":"attribute [higher_order] binaturality bitraverse_eq_bimap_id\n\n"}
