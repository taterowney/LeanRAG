{"name":"LocallyConvexSpace.convex_basis","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\nself : LocallyConvexSpace 𝕜 E\nx : E\n⊢ (nhds x).HasBasis (fun s => And (Membership.mem (nhds x) s) (Convex 𝕜 s)) id","decl":"/-- A `LocallyConvexSpace` is a topological semimodule over an ordered semiring in which convex\nneighborhoods of a point form a neighborhood basis at that point. -/\nclass LocallyConvexSpace (𝕜 E : Type*) [OrderedSemiring 𝕜] [AddCommMonoid E] [Module 𝕜 E]\n    [TopologicalSpace E] : Prop where\n  convex_basis : ∀ x : E, (𝓝 x).HasBasis (fun s : Set E => s ∈ 𝓝 x ∧ Convex 𝕜 s) id\n\n"}
{"name":"locallyConvexSpace_iff","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ Iff (LocallyConvexSpace 𝕜 E) (∀ (x : E), (nhds x).HasBasis (fun s => And (Membership.mem (nhds x) s) (Convex 𝕜 s)) id)","decl":"theorem locallyConvexSpace_iff :\n    LocallyConvexSpace 𝕜 E ↔ ∀ x : E, (𝓝 x).HasBasis (fun s : Set E => s ∈ 𝓝 x ∧ Convex 𝕜 s) id :=\n  ⟨@LocallyConvexSpace.convex_basis _ _ _ _ _ _, LocallyConvexSpace.mk⟩\n\n"}
{"name":"LocallyConvexSpace.ofBases","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\nι : Type u_3\nb : E → ι → Set E\np : E → ι → Prop\nhbasis : ∀ (x : E), (nhds x).HasBasis (p x) (b x)\nhconvex : ∀ (x : E) (i : ι), p x i → Convex 𝕜 (b x i)\n⊢ LocallyConvexSpace 𝕜 E","decl":"theorem LocallyConvexSpace.ofBases {ι : Type*} (b : E → ι → Set E) (p : E → ι → Prop)\n    (hbasis : ∀ x : E, (𝓝 x).HasBasis (p x) (b x)) (hconvex : ∀ x i, p x i → Convex 𝕜 (b x i)) :\n    LocallyConvexSpace 𝕜 E :=\n  ⟨fun x =>\n    (hbasis x).to_hasBasis\n      (fun i hi => ⟨b x i, ⟨⟨(hbasis x).mem_of_mem hi, hconvex x i hi⟩, le_refl (b x i)⟩⟩)\n      fun s hs =>\n      ⟨(hbasis x).index s hs.1, ⟨(hbasis x).property_index hs.1, (hbasis x).set_index_subset hs.1⟩⟩⟩\n\n"}
{"name":"LocallyConvexSpace.convex_basis_zero","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : LocallyConvexSpace 𝕜 E\n⊢ (nhds 0).HasBasis (fun s => And (Membership.mem (nhds 0) s) (Convex 𝕜 s)) id","decl":"theorem LocallyConvexSpace.convex_basis_zero [LocallyConvexSpace 𝕜 E] :\n    (𝓝 0 : Filter E).HasBasis (fun s => s ∈ (𝓝 0 : Filter E) ∧ Convex 𝕜 s) id :=\n  LocallyConvexSpace.convex_basis 0\n\n"}
{"name":"locallyConvexSpace_iff_exists_convex_subset","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : AddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : TopologicalSpace E\n⊢ Iff (LocallyConvexSpace 𝕜 E) (∀ (x : E) (U : Set E), Membership.mem (nhds x) U → Exists fun S => And (Membership.mem (nhds x) S) (And (Convex 𝕜 S) (HasSubset.Subset S U)))","decl":"theorem locallyConvexSpace_iff_exists_convex_subset :\n    LocallyConvexSpace 𝕜 E ↔ ∀ x : E, ∀ U ∈ 𝓝 x, ∃ S ∈ 𝓝 x, Convex 𝕜 S ∧ S ⊆ U :=\n  (locallyConvexSpace_iff 𝕜 E).trans (forall_congr' fun _ => hasBasis_self)\n\n"}
{"name":"LocallyConvexSpace.ofBasisZero","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\nι : Type u_3\nb : ι → Set E\np : ι → Prop\nhbasis : (nhds 0).HasBasis p b\nhconvex : ∀ (i : ι), p i → Convex 𝕜 (b i)\n⊢ LocallyConvexSpace 𝕜 E","decl":"theorem LocallyConvexSpace.ofBasisZero {ι : Type*} (b : ι → Set E) (p : ι → Prop)\n    (hbasis : (𝓝 0).HasBasis p b) (hconvex : ∀ i, p i → Convex 𝕜 (b i)) :\n    LocallyConvexSpace 𝕜 E := by\n  refine LocallyConvexSpace.ofBases 𝕜 E (fun (x : E) (i : ι) => (x + ·) '' b i) (fun _ => p)\n    (fun x => ?_) fun x i hi => (hconvex i hi).translate x\n  rw [← map_add_left_nhds_zero]\n  exact hbasis.map _\n\n"}
{"name":"locallyConvexSpace_iff_zero","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\n⊢ Iff (LocallyConvexSpace 𝕜 E) ((nhds 0).HasBasis (fun s => And (Membership.mem (nhds 0) s) (Convex 𝕜 s)) id)","decl":"theorem locallyConvexSpace_iff_zero : LocallyConvexSpace 𝕜 E ↔\n    (𝓝 0 : Filter E).HasBasis (fun s : Set E => s ∈ (𝓝 0 : Filter E) ∧ Convex 𝕜 s) id :=\n  ⟨fun h => @LocallyConvexSpace.convex_basis _ _ _ _ _ _ h 0, fun h =>\n    LocallyConvexSpace.ofBasisZero 𝕜 E _ _ h fun _ => And.right⟩\n\n"}
{"name":"locallyConvexSpace_iff_exists_convex_subset_zero","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalAddGroup E\n⊢ Iff (LocallyConvexSpace 𝕜 E) (∀ (U : Set E), Membership.mem (nhds 0) U → Exists fun S => And (Membership.mem (nhds 0) S) (And (Convex 𝕜 S) (HasSubset.Subset S U)))","decl":"theorem locallyConvexSpace_iff_exists_convex_subset_zero :\n    LocallyConvexSpace 𝕜 E ↔ ∀ U ∈ (𝓝 0 : Filter E), ∃ S ∈ (𝓝 0 : Filter E), Convex 𝕜 S ∧ S ⊆ U :=\n  (locallyConvexSpace_iff_zero 𝕜 E).trans hasBasis_self\n\n-- see Note [lower instance priority]\n"}
{"name":"LocallyConvexSpace.toLocPathConnectedSpace","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"E : Type u_2\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : TopologicalAddGroup E\ninst✝² : Module Real E\ninst✝¹ : ContinuousSMul Real E\ninst✝ : LocallyConvexSpace Real E\n⊢ LocPathConnectedSpace E","decl":"instance (priority := 100) LocallyConvexSpace.toLocPathConnectedSpace [Module ℝ E]\n    [ContinuousSMul ℝ E] [LocallyConvexSpace ℝ E] : LocPathConnectedSpace E :=\n  .of_bases (fun x ↦ convex_basis (𝕜 := ℝ) x)\n    fun _ _ hs ↦ hs.2.isPathConnected <| nonempty_of_mem <| mem_of_mem_nhds hs.1\n\n"}
{"name":"Convex.locPathConnectedSpace","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"E : Type u_2\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : TopologicalAddGroup E\ninst✝² : Module Real E\ninst✝¹ : ContinuousSMul Real E\ninst✝ : LocallyConvexSpace Real E\nS : Set E\nhS : Convex Real S\n⊢ LocPathConnectedSpace ↑S","decl":"/-- Convex subsets of locally convex spaces are locally path-connected. -/\ntheorem Convex.locPathConnectedSpace [Module ℝ E] [ContinuousSMul ℝ E] [LocallyConvexSpace ℝ E]\n    {S : Set E} (hS : Convex ℝ S) : LocPathConnectedSpace S := by\n  refine ⟨fun x ↦ ⟨fun s ↦ ⟨fun hs ↦ ?_, fun ⟨t, ht⟩ ↦ mem_of_superset ht.1.1 ht.2⟩⟩⟩\n  let ⟨t, ht⟩ := (mem_nhds_subtype S x s).mp hs\n  let ⟨t', ht'⟩ := (LocallyConvexSpace.convex_basis (𝕜 := ℝ) x.1).mem_iff.mp ht.1\n  refine ⟨(↑) ⁻¹' t', ⟨?_, ?_⟩, (preimage_mono ht'.2).trans ht.2⟩\n  · exact continuousAt_subtype_val.preimage_mem_nhds ht'.1.1\n  · refine Subtype.preimage_coe_self_inter _ _ ▸ IsPathConnected.preimage_coe ?_ inter_subset_left\n    exact (hS.inter ht'.1.2).isPathConnected ⟨x, x.2, mem_of_mem_nhds ht'.1.1⟩\n\n"}
{"name":"LocallyConvexSpace.convex_open_basis_zero","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁶ : LinearOrderedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : TopologicalSpace E\ninst✝² : TopologicalAddGroup E\ninst✝¹ : ContinuousConstSMul 𝕜 E\ninst✝ : LocallyConvexSpace 𝕜 E\n⊢ (nhds 0).HasBasis (fun s => And (Membership.mem s 0) (And (IsOpen s) (Convex 𝕜 s))) id","decl":"theorem LocallyConvexSpace.convex_open_basis_zero [LocallyConvexSpace 𝕜 E] :\n    (𝓝 0 : Filter E).HasBasis (fun s => (0 : E) ∈ s ∧ IsOpen s ∧ Convex 𝕜 s) id :=\n  (LocallyConvexSpace.convex_basis_zero 𝕜 E).to_hasBasis\n    (fun s hs =>\n      ⟨interior s, ⟨mem_interior_iff_mem_nhds.mpr hs.1, isOpen_interior, hs.2.interior⟩,\n        interior_subset⟩)\n    fun s hs => ⟨s, ⟨hs.2.1.mem_nhds hs.1, hs.2.2⟩, subset_rfl⟩\n\n"}
{"name":"Disjoint.exists_open_convexes","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁶ : LinearOrderedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : TopologicalSpace E\ninst✝² : TopologicalAddGroup E\ninst✝¹ : ContinuousConstSMul 𝕜 E\ninst✝ : LocallyConvexSpace 𝕜 E\ns t : Set E\ndisj : Disjoint s t\nhs₁ : Convex 𝕜 s\nhs₂ : IsCompact s\nht₁ : Convex 𝕜 t\nht₂ : IsClosed t\n⊢ Exists fun u => Exists fun v => And (IsOpen u) (And (IsOpen v) (And (Convex 𝕜 u) (And (Convex 𝕜 v) (And (HasSubset.Subset s u) (And (HasSubset.Subset t v) (Disjoint u v))))))","decl":"/-- In a locally convex space, if `s`, `t` are disjoint convex sets, `s` is compact and `t` is\nclosed, then we can find open disjoint convex sets containing them. -/\ntheorem Disjoint.exists_open_convexes [LocallyConvexSpace 𝕜 E] {s t : Set E} (disj : Disjoint s t)\n    (hs₁ : Convex 𝕜 s) (hs₂ : IsCompact s) (ht₁ : Convex 𝕜 t) (ht₂ : IsClosed t) :\n    ∃ u v, IsOpen u ∧ IsOpen v ∧ Convex 𝕜 u ∧ Convex 𝕜 v ∧ s ⊆ u ∧ t ⊆ v ∧ Disjoint u v := by\n  letI : UniformSpace E := TopologicalAddGroup.toUniformSpace E\n  haveI : UniformAddGroup E := comm_topologicalAddGroup_is_uniform\n  have := (LocallyConvexSpace.convex_open_basis_zero 𝕜 E).comap fun x : E × E => x.2 - x.1\n  rw [← uniformity_eq_comap_nhds_zero] at this\n  rcases disj.exists_uniform_thickening_of_basis this hs₂ ht₂ with ⟨V, ⟨hV0, hVopen, hVconvex⟩, hV⟩\n  refine ⟨s + V, t + V, hVopen.add_left, hVopen.add_left, hs₁.add hVconvex, ht₁.add hVconvex,\n    subset_add_left _ hV0, subset_add_left _ hV0, ?_⟩\n  simp_rw [← iUnion_add_left_image, image_add_left]\n  simp_rw [UniformSpace.ball, ← preimage_comp, sub_eq_neg_add] at hV\n  exact hV\n\n"}
{"name":"locallyConvexSpace_sInf","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_2\nE : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nts : Set (TopologicalSpace E)\nh : ∀ (t : TopologicalSpace E), Membership.mem ts t → LocallyConvexSpace 𝕜 E\n⊢ LocallyConvexSpace 𝕜 E","decl":"theorem locallyConvexSpace_sInf {ts : Set (TopologicalSpace E)}\n    (h : ∀ t ∈ ts, @LocallyConvexSpace 𝕜 E _ _ _ t) : @LocallyConvexSpace 𝕜 E _ _ _ (sInf ts) := by\n  letI : TopologicalSpace E := sInf ts\n  refine\n    LocallyConvexSpace.ofBases 𝕜 E (fun _ => fun If : Set ts × (ts → Set E) => ⋂ i ∈ If.1, If.2 i)\n      (fun x => fun If : Set ts × (ts → Set E) =>\n        If.1.Finite ∧ ∀ i ∈ If.1, If.2 i ∈ @nhds _ (↑i) x ∧ Convex 𝕜 (If.2 i))\n      (fun x => ?_) fun x If hif => convex_iInter fun i => convex_iInter fun hi => (hif.2 i hi).2\n  rw [nhds_sInf, ← iInf_subtype'']\n  exact hasBasis_iInf' fun i : ts => (@locallyConvexSpace_iff 𝕜 E _ _ _ ↑i).mp (h (↑i) i.2) x\n\n"}
{"name":"locallyConvexSpace_iInf","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"ι : Sort u_1\n𝕜 : Type u_2\nE : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nts' : ι → TopologicalSpace E\nh' : ∀ (i : ι), LocallyConvexSpace 𝕜 E\n⊢ LocallyConvexSpace 𝕜 E","decl":"theorem locallyConvexSpace_iInf {ts' : ι → TopologicalSpace E}\n    (h' : ∀ i, @LocallyConvexSpace 𝕜 E _ _ _ (ts' i)) :\n    @LocallyConvexSpace 𝕜 E _ _ _ (⨅ i, ts' i) := by\n  refine locallyConvexSpace_sInf ?_\n  rwa [forall_mem_range]\n\n"}
{"name":"locallyConvexSpace_inf","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_2\nE : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nt₁ t₂ : TopologicalSpace E\nh₁ : LocallyConvexSpace 𝕜 E\nh₂ : LocallyConvexSpace 𝕜 E\n⊢ LocallyConvexSpace 𝕜 E","decl":"theorem locallyConvexSpace_inf {t₁ t₂ : TopologicalSpace E} (h₁ : @LocallyConvexSpace 𝕜 E _ _ _ t₁)\n    (h₂ : @LocallyConvexSpace 𝕜 E _ _ _ t₂) : @LocallyConvexSpace 𝕜 E _ _ _ (t₁ ⊓ t₂) := by\n  rw [inf_eq_iInf]\n  refine locallyConvexSpace_iInf fun b => ?_\n  cases b <;> assumption\n\n"}
{"name":"locallyConvexSpace_induced","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝⁵ : OrderedSemiring 𝕜\ninst✝⁴ : AddCommMonoid E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 F\nt : TopologicalSpace F\ninst✝ : LocallyConvexSpace 𝕜 F\nf : LinearMap (RingHom.id 𝕜) E F\n⊢ LocallyConvexSpace 𝕜 E","decl":"theorem locallyConvexSpace_induced {t : TopologicalSpace F} [LocallyConvexSpace 𝕜 F]\n    (f : E →ₗ[𝕜] F) : @LocallyConvexSpace 𝕜 E _ _ _ (t.induced f) := by\n  letI : TopologicalSpace E := t.induced f\n  refine LocallyConvexSpace.ofBases 𝕜 E (fun _ => preimage f)\n    (fun x => fun s : Set F => s ∈ 𝓝 (f x) ∧ Convex 𝕜 s) (fun x => ?_) fun x s ⟨_, hs⟩ =>\n    hs.linear_preimage f\n  rw [nhds_induced]\n  exact (LocallyConvexSpace.convex_basis <| f x).comap f\n\n"}
{"name":"Pi.locallyConvexSpace","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_2\ninst✝⁴ : OrderedSemiring 𝕜\nι : Type u_5\nX : ι → Type u_6\ninst✝³ : (i : ι) → AddCommMonoid (X i)\ninst✝² : (i : ι) → TopologicalSpace (X i)\ninst✝¹ : (i : ι) → Module 𝕜 (X i)\ninst✝ : ∀ (i : ι), LocallyConvexSpace 𝕜 (X i)\n⊢ LocallyConvexSpace 𝕜 ((i : ι) → X i)","decl":"instance Pi.locallyConvexSpace {ι : Type*} {X : ι → Type*} [∀ i, AddCommMonoid (X i)]\n    [∀ i, TopologicalSpace (X i)] [∀ i, Module 𝕜 (X i)] [∀ i, LocallyConvexSpace 𝕜 (X i)] :\n    LocallyConvexSpace 𝕜 (∀ i, X i) :=\n  locallyConvexSpace_iInf fun i => locallyConvexSpace_induced (LinearMap.proj i)\n\n"}
{"name":"Prod.locallyConvexSpace","module":"Mathlib.Topology.Algebra.Module.LocallyConvex","initialProofState":"𝕜 : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝⁸ : OrderedSemiring 𝕜\ninst✝⁷ : AddCommMonoid E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommMonoid F\ninst✝⁴ : Module 𝕜 F\ninst✝³ : TopologicalSpace E\ninst✝² : TopologicalSpace F\ninst✝¹ : LocallyConvexSpace 𝕜 E\ninst✝ : LocallyConvexSpace 𝕜 F\n⊢ LocallyConvexSpace 𝕜 (Prod E F)","decl":"instance Prod.locallyConvexSpace [TopologicalSpace E] [TopologicalSpace F] [LocallyConvexSpace 𝕜 E]\n    [LocallyConvexSpace 𝕜 F] : LocallyConvexSpace 𝕜 (E × F) :=\n-- Porting note: had to specify `t₁` and `t₂`\n  locallyConvexSpace_inf (t₁ := induced Prod.fst _) (t₂ := induced Prod.snd _)\n    (locallyConvexSpace_induced (LinearMap.fst _ _ _))\n    (locallyConvexSpace_induced (LinearMap.snd _ _ _))\n\n"}
