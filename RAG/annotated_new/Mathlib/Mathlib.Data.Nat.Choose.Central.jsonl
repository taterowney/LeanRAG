{"name":"Nat.centralBinom_eq_two_mul_choose","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\n⊢ Eq n.centralBinom ((HMul.hMul 2 n).choose n)","decl":"theorem centralBinom_eq_two_mul_choose (n : ℕ) : centralBinom n = (2 * n).choose n :=\n  rfl\n\n"}
{"name":"Nat.centralBinom_pos","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\n⊢ LT.lt 0 n.centralBinom","decl":"theorem centralBinom_pos (n : ℕ) : 0 < centralBinom n :=\n  choose_pos (Nat.le_mul_of_pos_left _ zero_lt_two)\n\n"}
{"name":"Nat.centralBinom_ne_zero","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\n⊢ Ne n.centralBinom 0","decl":"theorem centralBinom_ne_zero (n : ℕ) : centralBinom n ≠ 0 :=\n  (centralBinom_pos n).ne'\n\n"}
{"name":"Nat.centralBinom_zero","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"⊢ Eq (Nat.centralBinom 0) 1","decl":"@[simp]\ntheorem centralBinom_zero : centralBinom 0 = 1 :=\n  choose_zero_right _\n\n"}
{"name":"Nat.choose_le_centralBinom","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"r n : Nat\n⊢ LE.le ((HMul.hMul 2 n).choose r) n.centralBinom","decl":"/-- The central binomial coefficient is the largest binomial coefficient.\n-/\ntheorem choose_le_centralBinom (r n : ℕ) : choose (2 * n) r ≤ centralBinom n :=\n  calc\n    (2 * n).choose r ≤ (2 * n).choose (2 * n / 2) := choose_le_middle r (2 * n)\n    _ = (2 * n).choose n := by rw [Nat.mul_div_cancel_left n zero_lt_two]\n\n"}
{"name":"Nat.two_le_centralBinom","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\nn_pos : LT.lt 0 n\n⊢ LE.le 2 n.centralBinom","decl":"theorem two_le_centralBinom (n : ℕ) (n_pos : 0 < n) : 2 ≤ centralBinom n :=\n  calc\n    2 ≤ 2 * n := Nat.le_mul_of_pos_right _ n_pos\n    _ = (2 * n).choose 1 := (choose_one_right (2 * n)).symm\n    _ ≤ centralBinom n := choose_le_centralBinom 1 n\n\n"}
{"name":"Nat.succ_mul_centralBinom_succ","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\n⊢ Eq (HMul.hMul (HAdd.hAdd n 1) (HAdd.hAdd n 1).centralBinom) (HMul.hMul (HMul.hMul 2 (HAdd.hAdd (HMul.hMul 2 n) 1)) n.centralBinom)","decl":"/-- An inductive property of the central binomial coefficient.\n-/\ntheorem succ_mul_centralBinom_succ (n : ℕ) :\n    (n + 1) * centralBinom (n + 1) = 2 * (2 * n + 1) * centralBinom n :=\n  calc\n    (n + 1) * (2 * (n + 1)).choose (n + 1) = (2 * n + 2).choose (n + 1) * (n + 1) := mul_comm _ _\n    _ = (2 * n + 1).choose n * (2 * n + 2) := by rw [choose_succ_right_eq, choose_mul_succ_eq]\n    _ = 2 * ((2 * n + 1).choose n * (n + 1)) := by ring\n    _ = 2 * ((2 * n + 1).choose n * (2 * n + 1 - n)) := by rw [two_mul n, add_assoc,\n                                                               Nat.add_sub_cancel_left]\n    _ = 2 * ((2 * n).choose n * (2 * n + 1)) := by rw [choose_mul_succ_eq]\n    _ = 2 * (2 * n + 1) * (2 * n).choose n := by rw [mul_assoc, mul_comm (2 * n + 1)]\n\n"}
{"name":"Nat.four_pow_lt_mul_centralBinom","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\nn_big : LE.le 4 n\n⊢ LT.lt (HPow.hPow 4 n) (HMul.hMul n n.centralBinom)","decl":"/-- An exponential lower bound on the central binomial coefficient.\nThis bound is of interest because it appears in\n[Tochiori's refinement of Erdős's proof of Bertrand's postulate](tochiori_bertrand).\n-/\ntheorem four_pow_lt_mul_centralBinom (n : ℕ) (n_big : 4 ≤ n) : 4 ^ n < n * centralBinom n := by\n  induction' n using Nat.strong_induction_on with n IH\n  rcases lt_trichotomy n 4 with (hn | rfl | hn)\n  · clear IH; exact False.elim ((not_lt.2 n_big) hn)\n  · norm_num [centralBinom, choose]\n  obtain ⟨n, rfl⟩ : ∃ m, n = m + 1 := Nat.exists_eq_succ_of_ne_zero (Nat.not_eq_zero_of_lt hn)\n  calc\n    4 ^ (n + 1) < 4 * (n * centralBinom n) := lt_of_eq_of_lt pow_succ' <|\n      (mul_lt_mul_left <| zero_lt_four' ℕ).mpr (IH n n.lt_succ_self (Nat.le_of_lt_succ hn))\n    _ ≤ 2 * (2 * n + 1) * centralBinom n := by rw [← mul_assoc]; linarith\n    _ = (n + 1) * centralBinom (n + 1) := (succ_mul_centralBinom_succ n).symm\n\n"}
{"name":"Nat.four_pow_le_two_mul_self_mul_centralBinom","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\nx✝ : LT.lt 0 n\n⊢ LE.le (HPow.hPow 4 n) (HMul.hMul (HMul.hMul 2 n) n.centralBinom)","decl":"/-- An exponential lower bound on the central binomial coefficient.\nThis bound is weaker than `Nat.four_pow_lt_mul_centralBinom`, but it is of historical interest\nbecause it appears in Erdős's proof of Bertrand's postulate.\n-/\ntheorem four_pow_le_two_mul_self_mul_centralBinom :\n    ∀ (n : ℕ) (_ : 0 < n), 4 ^ n ≤ 2 * n * centralBinom n\n  | 0, pr => (Nat.not_lt_zero _ pr).elim\n  | 1, _ => by norm_num [centralBinom, choose]\n  | 2, _ => by norm_num [centralBinom, choose]\n  | 3, _ => by norm_num [centralBinom, choose]\n  | n + 4, _ =>\n    calc\n      4 ^ (n+4) ≤ (n+4) * centralBinom (n+4) := (four_pow_lt_mul_centralBinom _ le_add_self).le\n      _ ≤ 2 * (n+4) * centralBinom (n+4) := by\n        rw [mul_assoc]; refine Nat.le_mul_of_pos_left _ zero_lt_two\n\n"}
{"name":"Nat.two_dvd_centralBinom_succ","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\n⊢ Dvd.dvd 2 (HAdd.hAdd n 1).centralBinom","decl":"theorem two_dvd_centralBinom_succ (n : ℕ) : 2 ∣ centralBinom (n + 1) := by\n  use (n + 1 + n).choose n\n  rw [centralBinom_eq_two_mul_choose, two_mul, ← add_assoc,\n      choose_succ_succ' (n + 1 + n) n, choose_symm_add, ← two_mul]\n\n"}
{"name":"Nat.two_dvd_centralBinom_of_one_le","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\nh : LT.lt 0 n\n⊢ Dvd.dvd 2 n.centralBinom","decl":"theorem two_dvd_centralBinom_of_one_le {n : ℕ} (h : 0 < n) : 2 ∣ centralBinom n := by\n  rw [← Nat.succ_pred_eq_of_pos h]\n  exact two_dvd_centralBinom_succ n.pred\n\n"}
{"name":"Nat.succ_dvd_centralBinom","module":"Mathlib.Data.Nat.Choose.Central","initialProofState":"n : Nat\n⊢ Dvd.dvd (HAdd.hAdd n 1) n.centralBinom","decl":"/-- A crucial lemma to ensure that Catalan numbers can be defined via their explicit formula\n  `catalan n = n.centralBinom / (n + 1)`. -/\ntheorem succ_dvd_centralBinom (n : ℕ) : n + 1 ∣ n.centralBinom := by\n  have h_s : (n + 1).Coprime (2 * n + 1) := by\n    rw [two_mul, add_assoc, coprime_add_self_right, coprime_self_add_left]\n    exact coprime_one_left n\n  apply h_s.dvd_of_dvd_mul_left\n  apply Nat.dvd_of_mul_dvd_mul_left zero_lt_two\n  rw [← mul_assoc, ← succ_mul_centralBinom_succ, mul_comm]\n  exact mul_dvd_mul_left _ (two_dvd_centralBinom_succ n)\n\n"}
