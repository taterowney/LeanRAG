{"name":"ULift.down_injective","module":"Mathlib.Logic.Function.ULift","initialProofState":"α : Type u_1\n⊢ Function.Injective ULift.down","decl":"theorem ULift.down_injective {α : Sort _} : Function.Injective (@ULift.down α)\n  | ⟨a⟩, ⟨b⟩, _ => by congr\n\n"}
{"name":"ULift.down_inj","module":"Mathlib.Logic.Function.ULift","initialProofState":"α : Type u_1\na b : ULift α\n⊢ Iff (Eq a.down b.down) (Eq a b)","decl":"@[simp] theorem ULift.down_inj {α : Sort _} {a b : ULift α} : a.down = b.down ↔ a = b :=\n  ⟨fun h ↦ ULift.down_injective h, fun h ↦ by rw [h]⟩\n\n"}
{"name":"PLift.down_injective","module":"Mathlib.Logic.Function.ULift","initialProofState":"α : Sort u_1\n⊢ Function.Injective PLift.down","decl":"theorem PLift.down_injective : Function.Injective (@PLift.down α)\n  | ⟨a⟩, ⟨b⟩, _ => by congr\n\n"}
{"name":"PLift.down_inj","module":"Mathlib.Logic.Function.ULift","initialProofState":"α : Sort u_1\na b : PLift α\n⊢ Iff (Eq a.down b.down) (Eq a b)","decl":"@[simp] theorem PLift.down_inj {a b : PLift α} : a.down = b.down ↔ a = b :=\n  ⟨fun h ↦ PLift.down_injective h, fun h ↦ by rw [h]⟩\n"}
