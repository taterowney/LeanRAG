{"name":"Polynomial.deriv_gaussian_eq_hermite_mul_gaussian","module":"Mathlib.RingTheory.Polynomial.Hermite.Gaussian","initialProofState":"n : Nat\nx : Real\n⊢ Eq (Nat.iterate deriv n (fun y => Real.exp (Neg.neg (HDiv.hDiv (HPow.hPow y 2) 2))) x) (HMul.hMul (HMul.hMul (HPow.hPow (-1) n) ((Polynomial.aeval x) (Polynomial.hermite n))) (Real.exp (Neg.neg (HDiv.hDiv (HPow.hPow x 2) 2))))","decl":"/-- `hermite n` is (up to sign) the factor appearing in `deriv^[n]` of a gaussian -/\ntheorem deriv_gaussian_eq_hermite_mul_gaussian (n : ℕ) (x : ℝ) :\n    deriv^[n] (fun y => Real.exp (-(y ^ 2 / 2))) x =\n    (-1 : ℝ) ^ n * aeval x (hermite n) * Real.exp (-(x ^ 2 / 2)) := by\n  rw [mul_assoc]\n  induction' n with n ih generalizing x\n  · rw [Function.iterate_zero_apply, pow_zero, one_mul, hermite_zero, C_1, map_one, one_mul]\n  · replace ih : deriv^[n] _ = _ := _root_.funext ih\n    have deriv_gaussian :\n      deriv (fun y => Real.exp (-(y ^ 2 / 2))) x = -x * Real.exp (-(x ^ 2 / 2)) := by\n      -- Porting note (https://github.com/leanprover-community/mathlib4/issues/10745): was `simp [mul_comm, ← neg_mul]`\n      rw [deriv_exp (by simp)]; simp; ring\n    rw [Function.iterate_succ_apply', ih, deriv_const_mul_field, deriv_mul, pow_succ (-1 : ℝ),\n      deriv_gaussian, hermite_succ, map_sub, map_mul, aeval_X, Polynomial.deriv_aeval]\n    · ring\n    · apply Polynomial.differentiable_aeval\n    · apply DifferentiableAt.exp; simp -- Porting note: was just `simp`\n\n"}
{"name":"Polynomial.hermite_eq_deriv_gaussian","module":"Mathlib.RingTheory.Polynomial.Hermite.Gaussian","initialProofState":"n : Nat\nx : Real\n⊢ Eq ((Polynomial.aeval x) (Polynomial.hermite n)) (HDiv.hDiv (HMul.hMul (HPow.hPow (-1) n) (Nat.iterate deriv n (fun y => Real.exp (Neg.neg (HDiv.hDiv (HPow.hPow y 2) 2))) x)) (Real.exp (Neg.neg (HDiv.hDiv (HPow.hPow x 2) 2))))","decl":"theorem hermite_eq_deriv_gaussian (n : ℕ) (x : ℝ) : aeval x (hermite n) =\n    (-1 : ℝ) ^ n * deriv^[n] (fun y => Real.exp (-(y ^ 2 / 2))) x / Real.exp (-(x ^ 2 / 2)) := by\n  rw [deriv_gaussian_eq_hermite_mul_gaussian]\n  field_simp [Real.exp_ne_zero]\n  rw [← @smul_eq_mul ℝ _ ((-1) ^ n), ← inv_smul_eq_iff₀, mul_assoc, smul_eq_mul, ← inv_pow, ←\n    neg_inv, inv_one]\n  exact pow_ne_zero _ (by norm_num)\n\n"}
{"name":"Polynomial.hermite_eq_deriv_gaussian'","module":"Mathlib.RingTheory.Polynomial.Hermite.Gaussian","initialProofState":"n : Nat\nx : Real\n⊢ Eq ((Polynomial.aeval x) (Polynomial.hermite n)) (HMul.hMul (HMul.hMul (HPow.hPow (-1) n) (Nat.iterate deriv n (fun y => Real.exp (Neg.neg (HDiv.hDiv (HPow.hPow y 2) 2))) x)) (Real.exp (HDiv.hDiv (HPow.hPow x 2) 2)))","decl":"theorem hermite_eq_deriv_gaussian' (n : ℕ) (x : ℝ) : aeval x (hermite n) =\n    (-1 : ℝ) ^ n * deriv^[n] (fun y => Real.exp (-(y ^ 2 / 2))) x * Real.exp (x ^ 2 / 2) := by\n  rw [hermite_eq_deriv_gaussian, Real.exp_neg]\n  field_simp [Real.exp_ne_zero]\n\n"}
