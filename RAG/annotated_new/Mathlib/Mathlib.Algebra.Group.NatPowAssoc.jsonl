{"name":"NatPowAssoc.npow_zero","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_2\ninst✝¹ : MulOneClass M\ninst✝ : Pow M Nat\nself : NatPowAssoc M\nx : M\n⊢ Eq (HPow.hPow x 0) 1","decl":"/-- A mixin for power-associative multiplication. -/\nclass NatPowAssoc (M : Type*) [MulOneClass M] [Pow M ℕ] : Prop where\n  /-- Multiplication is power-associative. -/\n  protected npow_add : ∀ (k n : ℕ) (x : M), x ^ (k + n) = x ^ k * x ^ n\n  /-- Exponent zero is one. -/\n  protected npow_zero : ∀ (x : M), x ^ 0 = 1\n  /-- Exponent one is identity. -/\n  protected npow_one : ∀ (x : M), x ^ 1 = x\n\n"}
{"name":"NatPowAssoc.npow_one","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_2\ninst✝¹ : MulOneClass M\ninst✝ : Pow M Nat\nself : NatPowAssoc M\nx : M\n⊢ Eq (HPow.hPow x 1) x","decl":"/-- A mixin for power-associative multiplication. -/\nclass NatPowAssoc (M : Type*) [MulOneClass M] [Pow M ℕ] : Prop where\n  /-- Multiplication is power-associative. -/\n  protected npow_add : ∀ (k n : ℕ) (x : M), x ^ (k + n) = x ^ k * x ^ n\n  /-- Exponent zero is one. -/\n  protected npow_zero : ∀ (x : M), x ^ 0 = 1\n  /-- Exponent one is identity. -/\n  protected npow_one : ∀ (x : M), x ^ 1 = x\n\n"}
{"name":"NatPowAssoc.npow_add","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_2\ninst✝¹ : MulOneClass M\ninst✝ : Pow M Nat\nself : NatPowAssoc M\nk n : Nat\nx : M\n⊢ Eq (HPow.hPow x (HAdd.hAdd k n)) (HMul.hMul (HPow.hPow x k) (HPow.hPow x n))","decl":"/-- A mixin for power-associative multiplication. -/\nclass NatPowAssoc (M : Type*) [MulOneClass M] [Pow M ℕ] : Prop where\n  /-- Multiplication is power-associative. -/\n  protected npow_add : ∀ (k n : ℕ) (x : M), x ^ (k + n) = x ^ k * x ^ n\n  /-- Exponent zero is one. -/\n  protected npow_zero : ∀ (x : M), x ^ 0 = 1\n  /-- Exponent one is identity. -/\n  protected npow_one : ∀ (x : M), x ^ 1 = x\n\n"}
{"name":"npow_add","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nk n : Nat\nx : M\n⊢ Eq (HPow.hPow x (HAdd.hAdd k n)) (HMul.hMul (HPow.hPow x k) (HPow.hPow x n))","decl":"theorem npow_add (k n : ℕ) (x : M) : x ^ (k + n) = x ^ k * x ^ n  :=\n  NatPowAssoc.npow_add k n x\n\n"}
{"name":"npow_zero","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nx : M\n⊢ Eq (HPow.hPow x 0) 1","decl":"@[simp]\ntheorem npow_zero (x : M) : x ^ 0 = 1 :=\n  NatPowAssoc.npow_zero x\n\n"}
{"name":"npow_one","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nx : M\n⊢ Eq (HPow.hPow x 1) x","decl":"@[simp]\ntheorem npow_one (x : M) : x ^ 1 = x :=\n  NatPowAssoc.npow_one x\n\n"}
{"name":"npow_mul_assoc","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nk m n : Nat\nx : M\n⊢ Eq (HMul.hMul (HMul.hMul (HPow.hPow x k) (HPow.hPow x m)) (HPow.hPow x n)) (HMul.hMul (HPow.hPow x k) (HMul.hMul (HPow.hPow x m) (HPow.hPow x n)))","decl":"theorem npow_mul_assoc (k m n : ℕ) (x : M) :\n    (x ^ k * x ^ m) * x ^ n = x ^ k * (x ^ m * x ^ n) := by\n  simp only [← npow_add, add_assoc]\n\n"}
{"name":"npow_mul_comm","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nm n : Nat\nx : M\n⊢ Eq (HMul.hMul (HPow.hPow x m) (HPow.hPow x n)) (HMul.hMul (HPow.hPow x n) (HPow.hPow x m))","decl":"theorem npow_mul_comm (m n : ℕ) (x : M) :\n    x ^ m * x ^ n = x ^ n * x ^ m := by simp only [← npow_add, add_comm]\n\n"}
{"name":"npow_mul","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nx : M\nm n : Nat\n⊢ Eq (HPow.hPow x (HMul.hMul m n)) (HPow.hPow (HPow.hPow x m) n)","decl":"theorem npow_mul (x : M) (m n : ℕ) : x ^ (m * n) = (x ^ m) ^ n := by\n  induction n with\n  | zero => rw [npow_zero, Nat.mul_zero, npow_zero]\n  | succ n ih => rw [mul_add, npow_add, ih, mul_one, npow_add, npow_one]\n\n"}
{"name":"npow_mul'","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝² : MulOneClass M\ninst✝¹ : Pow M Nat\ninst✝ : NatPowAssoc M\nx : M\nm n : Nat\n⊢ Eq (HPow.hPow x (HMul.hMul m n)) (HPow.hPow (HPow.hPow x n) m)","decl":"theorem npow_mul' (x : M) (m n : ℕ) : x ^ (m * n) = (x ^ n) ^ m := by\n  rw [mul_comm]\n  exact npow_mul x n m\n\n"}
{"name":"neg_npow_assoc","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"R : Type u_2\ninst✝² : NonAssocRing R\ninst✝¹ : Pow R Nat\ninst✝ : NatPowAssoc R\na b : R\nk : Nat\n⊢ Eq (HMul.hMul (HMul.hMul (HPow.hPow (-1) k) a) b) (HMul.hMul (HPow.hPow (-1) k) (HMul.hMul a b))","decl":"theorem neg_npow_assoc {R : Type*} [NonAssocRing R] [Pow R ℕ] [NatPowAssoc R] (a b : R) (k : ℕ) :\n    (-1)^k * a * b = (-1)^k * (a * b) := by\n  induction k with\n  | zero => simp only [npow_zero, one_mul]\n  | succ k ih =>\n    rw [npow_add, npow_one, ← neg_mul_comm, mul_one]\n    simp only [neg_mul, ih]\n\n"}
{"name":"Pi.instNatPowAssoc","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝² : (i : ι) → MulOneClass (α i)\ninst✝¹ : (i : ι) → Pow (α i) Nat\ninst✝ : ∀ (i : ι), NatPowAssoc (α i)\n⊢ NatPowAssoc ((i : ι) → α i)","decl":"instance Pi.instNatPowAssoc {ι : Type*} {α : ι → Type*} [∀ i, MulOneClass <| α i] [∀ i, Pow (α i) ℕ]\n    [∀ i, NatPowAssoc <| α i] : NatPowAssoc (∀ i, α i) where\n    npow_add _ _ _ := by ext; simp [npow_add]\n    npow_zero _ := by ext; simp\n    npow_one _ := by ext; simp\n\n"}
{"name":"Prod.instNatPowAssoc","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\nN : Type u_2\ninst✝⁵ : MulOneClass M\ninst✝⁴ : Pow M Nat\ninst✝³ : NatPowAssoc M\ninst✝² : MulOneClass N\ninst✝¹ : Pow N Nat\ninst✝ : NatPowAssoc N\n⊢ NatPowAssoc (Prod M N)","decl":"instance Prod.instNatPowAssoc {N : Type*} [MulOneClass M] [Pow M ℕ] [NatPowAssoc M] [MulOneClass N]\n    [Pow N ℕ] [NatPowAssoc N] : NatPowAssoc (M × N) where\n  npow_add _ _ _ := by ext <;> simp [npow_add]\n  npow_zero _ := by ext <;> simp\n  npow_one _ := by ext <;> simp\n\n"}
{"name":"Monoid.PowAssoc","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"M : Type u_1\ninst✝ : Monoid M\n⊢ NatPowAssoc M","decl":"instance Monoid.PowAssoc : NatPowAssoc M where\n  npow_add _ _ _ := pow_add _ _ _\n  npow_zero _ := pow_zero _\n  npow_one _ := pow_one _\n\n"}
{"name":"Nat.cast_npow","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"R : Type u_2\ninst✝² : NonAssocSemiring R\ninst✝¹ : Pow R Nat\ninst✝ : NatPowAssoc R\nn m : Nat\n⊢ Eq (↑(HPow.hPow n m)) (HPow.hPow (↑n) m)","decl":"@[simp, norm_cast]\ntheorem Nat.cast_npow (R : Type*) [NonAssocSemiring R] [Pow R ℕ] [NatPowAssoc R] (n m : ℕ) :\n    (↑(n ^ m) : R) = (↑n : R) ^ m := by\n  induction m with\n  | zero => simp only [pow_zero, Nat.cast_one, npow_zero]\n  | succ m ih => rw [npow_add, npow_add, Nat.cast_mul, ih, npow_one, npow_one]\n\n"}
{"name":"Int.cast_npow","module":"Mathlib.Algebra.Group.NatPowAssoc","initialProofState":"R : Type u_2\ninst✝² : NonAssocRing R\ninst✝¹ : Pow R Nat\ninst✝ : NatPowAssoc R\nn : Int\nm : Nat\n⊢ Eq (↑(HPow.hPow n m)) (HPow.hPow (↑n) m)","decl":"@[simp, norm_cast]\ntheorem Int.cast_npow (R : Type*) [NonAssocRing R] [Pow R ℕ] [NatPowAssoc R]\n    (n : ℤ) : ∀(m : ℕ), @Int.cast R NonAssocRing.toIntCast (n ^ m) = (n : R) ^ m\n  | 0 => by\n    rw [pow_zero, npow_zero, Int.cast_one]\n  | m + 1 => by\n    rw [npow_add, npow_one, Int.cast_mul, Int.cast_npow R n m, npow_add, npow_one]\n\n"}
