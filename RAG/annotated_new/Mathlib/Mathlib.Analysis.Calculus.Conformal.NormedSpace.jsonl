{"name":"conformalAt_id","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\ninst✝¹ : NormedAddCommGroup X\ninst✝ : NormedSpace Real X\nx : X\n⊢ ConformalAt id x","decl":"theorem conformalAt_id (x : X) : ConformalAt _root_.id x :=\n  ⟨id ℝ X, hasFDerivAt_id _, isConformalMap_id⟩\n\n"}
{"name":"conformalAt_const_smul","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\ninst✝¹ : NormedAddCommGroup X\ninst✝ : NormedSpace Real X\nc : Real\nh : Ne c 0\nx : X\n⊢ ConformalAt (fun x' => HSMul.hSMul c x') x","decl":"theorem conformalAt_const_smul {c : ℝ} (h : c ≠ 0) (x : X) : ConformalAt (fun x' : X => c • x') x :=\n  ⟨c • ContinuousLinearMap.id ℝ X, (hasFDerivAt_id x).const_smul c, isConformalMap_const_smul h⟩\n\n"}
{"name":"Subsingleton.conformalAt","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : NormedAddCommGroup X\ninst✝³ : NormedAddCommGroup Y\ninst✝² : NormedSpace Real X\ninst✝¹ : NormedSpace Real Y\ninst✝ : Subsingleton X\nf : X → Y\nx : X\n⊢ ConformalAt f x","decl":"@[nontriviality]\ntheorem Subsingleton.conformalAt [Subsingleton X] (f : X → Y) (x : X) : ConformalAt f x :=\n  ⟨0, hasFDerivAt_of_subsingleton _ _, isConformalMap_of_subsingleton _⟩\n\n"}
{"name":"conformalAt_iff_isConformalMap_fderiv","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf : X → Y\nx : X\n⊢ Iff (ConformalAt f x) (IsConformalMap (fderiv Real f x))","decl":"/-- A function is a conformal map if and only if its differential is a conformal linear map -/\ntheorem conformalAt_iff_isConformalMap_fderiv {f : X → Y} {x : X} :\n    ConformalAt f x ↔ IsConformalMap (fderiv ℝ f x) := by\n  constructor\n  · rintro ⟨f', hf, hf'⟩\n    rwa [hf.fderiv]\n  · intro H\n    by_cases h : DifferentiableAt ℝ f x\n    · exact ⟨fderiv ℝ f x, h.hasFDerivAt, H⟩\n    · nontriviality X\n      exact absurd (fderiv_zero_of_not_differentiableAt h) H.ne_zero\n\n"}
{"name":"ConformalAt.differentiableAt","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf : X → Y\nx : X\nh : ConformalAt f x\n⊢ DifferentiableAt Real f x","decl":"theorem differentiableAt {f : X → Y} {x : X} (h : ConformalAt f x) : DifferentiableAt ℝ f x :=\n  let ⟨_, h₁, _⟩ := h\n  h₁.differentiableAt\n\n"}
{"name":"ConformalAt.congr","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf g : X → Y\nx : X\nu : Set X\nhx : Membership.mem u x\nhu : IsOpen u\nhf : ConformalAt f x\nh : ∀ (x : X), Membership.mem u x → Eq (g x) (f x)\n⊢ ConformalAt g x","decl":"theorem congr {f g : X → Y} {x : X} {u : Set X} (hx : x ∈ u) (hu : IsOpen u) (hf : ConformalAt f x)\n    (h : ∀ x : X, x ∈ u → g x = f x) : ConformalAt g x :=\n  let ⟨f', hfderiv, hf'⟩ := hf\n  ⟨f', hfderiv.congr_of_eventuallyEq ((hu.eventually_mem hx).mono h), hf'⟩\n\n"}
{"name":"ConformalAt.comp","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝⁵ : NormedAddCommGroup X\ninst✝⁴ : NormedAddCommGroup Y\ninst✝³ : NormedAddCommGroup Z\ninst✝² : NormedSpace Real X\ninst✝¹ : NormedSpace Real Y\ninst✝ : NormedSpace Real Z\nf : X → Y\ng : Y → Z\nx : X\nhg : ConformalAt g (f x)\nhf : ConformalAt f x\n⊢ ConformalAt (Function.comp g f) x","decl":"theorem comp {f : X → Y} {g : Y → Z} (x : X) (hg : ConformalAt g (f x)) (hf : ConformalAt f x) :\n    ConformalAt (g ∘ f) x := by\n  rcases hf with ⟨f', hf₁, cf⟩\n  rcases hg with ⟨g', hg₁, cg⟩\n  exact ⟨g'.comp f', hg₁.comp x hf₁, cg.comp cf⟩\n\n"}
{"name":"ConformalAt.const_smul","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf : X → Y\nx : X\nc : Real\nhc : Ne c 0\nhf : ConformalAt f x\n⊢ ConformalAt (HSMul.hSMul c f) x","decl":"theorem const_smul {f : X → Y} {x : X} {c : ℝ} (hc : c ≠ 0) (hf : ConformalAt f x) :\n    ConformalAt (c • f) x :=\n  (conformalAt_const_smul hc <| f x).comp x hf\n\n"}
{"name":"conformal_id","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\ninst✝¹ : NormedAddCommGroup X\ninst✝ : NormedSpace Real X\n⊢ Conformal id","decl":"theorem conformal_id : Conformal (id : X → X) := fun x => conformalAt_id x\n\n"}
{"name":"conformal_const_smul","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\ninst✝¹ : NormedAddCommGroup X\ninst✝ : NormedSpace Real X\nc : Real\nh : Ne c 0\n⊢ Conformal fun x => HSMul.hSMul c x","decl":"theorem conformal_const_smul {c : ℝ} (h : c ≠ 0) : Conformal fun x : X => c • x := fun x =>\n  conformalAt_const_smul h x\n\n"}
{"name":"Conformal.conformalAt","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf : X → Y\nh : Conformal f\nx : X\n⊢ ConformalAt f x","decl":"theorem conformalAt {f : X → Y} (h : Conformal f) (x : X) : ConformalAt f x :=\n  h x\n\n"}
{"name":"Conformal.differentiable","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf : X → Y\nh : Conformal f\n⊢ Differentiable Real f","decl":"theorem differentiable {f : X → Y} (h : Conformal f) : Differentiable ℝ f := fun x =>\n  (h x).differentiableAt\n\n"}
{"name":"Conformal.comp","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝⁵ : NormedAddCommGroup X\ninst✝⁴ : NormedAddCommGroup Y\ninst✝³ : NormedAddCommGroup Z\ninst✝² : NormedSpace Real X\ninst✝¹ : NormedSpace Real Y\ninst✝ : NormedSpace Real Z\nf : X → Y\ng : Y → Z\nhf : Conformal f\nhg : Conformal g\n⊢ Conformal (Function.comp g f)","decl":"theorem comp {f : X → Y} {g : Y → Z} (hf : Conformal f) (hg : Conformal g) : Conformal (g ∘ f) :=\n  fun x => (hg <| f x).comp x (hf x)\n\n"}
{"name":"Conformal.const_smul","module":"Mathlib.Analysis.Calculus.Conformal.NormedSpace","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : NormedAddCommGroup X\ninst✝² : NormedAddCommGroup Y\ninst✝¹ : NormedSpace Real X\ninst✝ : NormedSpace Real Y\nf : X → Y\nhf : Conformal f\nc : Real\nhc : Ne c 0\n⊢ Conformal (HSMul.hSMul c f)","decl":"theorem const_smul {f : X → Y} (hf : Conformal f) {c : ℝ} (hc : c ≠ 0) : Conformal (c • f) :=\n  fun x => (hf x).const_smul hc\n\n"}
