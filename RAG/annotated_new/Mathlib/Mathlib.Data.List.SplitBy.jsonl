{"name":"List.splitBy_nil","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\n⊢ Eq (List.splitBy r List.nil) List.nil","decl":"@[simp]\ntheorem splitBy_nil (r : α → α → Bool) : splitBy r [] = [] :=\n  rfl\n\n"}
{"name":"List.flatten_splitBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ Eq (List.splitBy r l).flatten l","decl":"@[simp]\ntheorem flatten_splitBy (r : α → α → Bool) (l : List α) : (l.splitBy r).flatten = l :=\n  match l with\n  | nil => rfl\n  | cons _ _ => flatten_splitByLoop\n\n"}
{"name":"List.nil_not_mem_splitBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ Not (Membership.mem (List.splitBy r l) List.nil)","decl":"theorem nil_not_mem_splitBy (r : α → α → Bool) (l : List α) : [] ∉ l.splitBy r :=\n  match l with\n  | nil => not_mem_nil _\n  | cons _ _ => nil_not_mem_splitByLoop\n\n"}
{"name":"List.ne_nil_of_mem_splitBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nm : List α\nr : α → α → Bool\nl : List α\nh : Membership.mem (List.splitBy r l) m\n⊢ Ne m List.nil","decl":"theorem ne_nil_of_mem_splitBy (r : α → α → Bool) {l : List α} (h : m ∈ l.splitBy r) : m ≠ [] := by\n  rintro rfl\n  exact nil_not_mem_splitBy r l h\n\n"}
{"name":"List.chain'_of_mem_splitBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nm : List α\nr : α → α → Bool\nl : List α\nh : Membership.mem (List.splitBy r l) m\n⊢ List.Chain' (fun x y => Eq (r x y) Bool.true) m","decl":"theorem chain'_of_mem_splitBy {r : α → α → Bool} {l : List α} (h : m ∈ l.splitBy r) :\n    m.Chain' fun x y ↦ r x y := by\n  cases l with\n  | nil => cases h\n  | cons a l =>\n    apply chain'_of_mem_splitByLoop _ _ h\n    · rintro _ ⟨⟩\n    · exact chain'_nil\n\n"}
{"name":"List.chain'_getLast_head_splitBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ List.Chain' (fun a b => Exists fun ha => Exists fun hb => Eq (r (a.getLast ha) (b.head hb)) Bool.false) (List.splitBy r l)","decl":"theorem chain'_getLast_head_splitBy (r : α → α → Bool) (l : List α) :\n    (l.splitBy r).Chain' fun a b ↦ ∃ ha hb, r (a.getLast ha) (b.head hb) = false := by\n  cases l with\n  | nil => exact chain'_nil\n  | cons _ _ =>\n    apply chain'_getLast_head_splitByLoop _ (not_mem_nil _) chain'_nil\n    rintro _ ⟨⟩\n\n"}
{"name":"List.groupBy_nil","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\n⊢ Eq (List.splitBy r List.nil) List.nil","decl":"@[deprecated (since := \"2024-10-30\")] alias groupBy_nil := splitBy_nil\n"}
{"name":"List.flatten_groupBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ Eq (List.splitBy r l).flatten l","decl":"@[deprecated (since := \"2024-10-30\")] alias flatten_groupBy := flatten_splitBy\n"}
{"name":"List.join_splitBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ Eq (List.splitBy r l).flatten l","decl":"@[deprecated (since := \"2024-10-15\")] alias join_splitBy := flatten_splitBy\n"}
{"name":"List.nil_not_mem_groupBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ Not (Membership.mem (List.splitBy r l) List.nil)","decl":"@[deprecated (since := \"2024-10-30\")] alias nil_not_mem_groupBy := nil_not_mem_splitBy\n"}
{"name":"List.ne_nil_of_mem_groupBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nm : List α\nr : α → α → Bool\nl : List α\nh : Membership.mem (List.splitBy r l) m\n⊢ Ne m List.nil","decl":"@[deprecated (since := \"2024-10-30\")] alias ne_nil_of_mem_groupBy := ne_nil_of_mem_splitBy\n"}
{"name":"List.chain'_of_mem_groupBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nm : List α\nr : α → α → Bool\nl : List α\nh : Membership.mem (List.splitBy r l) m\n⊢ List.Chain' (fun x y => Eq (r x y) Bool.true) m","decl":"@[deprecated (since := \"2024-10-30\")] alias chain'_of_mem_groupBy := chain'_of_mem_splitBy\n"}
{"name":"List.chain'_getLast_head_groupBy","module":"Mathlib.Data.List.SplitBy","initialProofState":"α : Type u_1\nr : α → α → Bool\nl : List α\n⊢ List.Chain' (fun a b => Exists fun ha => Exists fun hb => Eq (r (a.getLast ha) (b.head hb)) Bool.false) (List.splitBy r l)","decl":"@[deprecated (since := \"2024-10-30\")]\nalias chain'_getLast_head_groupBy := chain'_getLast_head_splitBy\n\n"}
