{"name":"CategoryTheory.InducedCategory.isoMk_hom","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÇ} D\nF : C ‚Üí D\nX Y : CategoryTheory.InducedCategory D F\nf : CategoryTheory.Iso (F X) (F Y)\n‚ä¢ Eq (CategoryTheory.InducedCategory.isoMk f).hom f.hom","decl":"variable {F} in\n/-- Construct an isomorphism in the induced category\nfrom an isomorphism in the original category. -/\n@[simps] def InducedCategory.isoMk {X Y : InducedCategory D F} (f : F X ‚âÖ F Y) : X ‚âÖ Y where\n  hom := f.hom\n  inv := f.inv\n  hom_inv_id := f.hom_inv_id\n  inv_hom_id := f.inv_hom_id\n\n"}
{"name":"CategoryTheory.InducedCategory.isoMk_inv","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÇ} D\nF : C ‚Üí D\nX Y : CategoryTheory.InducedCategory D F\nf : CategoryTheory.Iso (F X) (F Y)\n‚ä¢ Eq (CategoryTheory.InducedCategory.isoMk f).inv f.inv","decl":"variable {F} in\n/-- Construct an isomorphism in the induced category\nfrom an isomorphism in the original category. -/\n@[simps] def InducedCategory.isoMk {X Y : InducedCategory D F} (f : F X ‚âÖ F Y) : X ‚âÖ Y where\n  hom := f.hom\n  inv := f.inv\n  hom_inv_id := f.hom_inv_id\n  inv_hom_id := f.inv_hom_id\n\n"}
{"name":"CategoryTheory.inducedFunctor_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÇ} D\nF : C ‚Üí D\nX‚úù Y‚úù : CategoryTheory.InducedCategory D F\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.inducedFunctor F).map f) f","decl":"/-- The forgetful functor from an induced category to the original category,\nforgetting the extra data.\n-/\n@[simps]\ndef inducedFunctor : InducedCategory D F ‚•§ D where\n  obj := F\n  map f := f\n\n"}
{"name":"CategoryTheory.inducedFunctor_obj","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÇ} D\nF : C ‚Üí D\na‚úù : C\n‚ä¢ Eq ((CategoryTheory.inducedFunctor F).obj a‚úù) (F a‚úù)","decl":"/-- The forgetful functor from an induced category to the original category,\nforgetting the extra data.\n-/\n@[simps]\ndef inducedFunctor : InducedCategory D F ‚•§ D where\n  obj := F\n  map f := f\n\n"}
{"name":"CategoryTheory.InducedCategory.full","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÇ} D\nF : C ‚Üí D\n‚ä¢ (CategoryTheory.inducedFunctor F).Full","decl":"instance InducedCategory.full : (inducedFunctor F).Full :=\n  (fullyFaithfulInducedFunctor F).full\n\n"}
{"name":"CategoryTheory.InducedCategory.faithful","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÇ} D\nF : C ‚Üí D\n‚ä¢ (CategoryTheory.inducedFunctor F).Faithful","decl":"instance InducedCategory.faithful : (inducedFunctor F).Faithful :=\n  (fullyFaithfulInducedFunctor F).faithful\n\n"}
{"name":"CategoryTheory.FullSubcategory.ext_iff","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nZ : C ‚Üí Prop\nx y : CategoryTheory.FullSubcategory Z\n‚ä¢ Iff (Eq x y) (Eq x.obj y.obj)","decl":"/--\nA subtype-like structure for full subcategories. Morphisms just ignore the property. We don't use\nactual subtypes since the simp-normal form `‚ÜëX` of `X.val` does not work well for full\nsubcategories. -/\n@[ext, stacks 001D \"We do not define 'strictly full' subcategories.\"]\nstructure FullSubcategory where\n  /-- The category of which this is a full subcategory -/\n  obj : C\n  /-- The predicate satisfied by all objects in this subcategory -/\n  property : Z obj\n\n"}
{"name":"CategoryTheory.FullSubcategory.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nZ : C ‚Üí Prop\ninst‚úù¬π : SizeOf C\ninst‚úù : (a : C) ‚Üí SizeOf (Z a)\nobj : C\nproperty : Z obj\n‚ä¢ Eq (SizeOf.sizeOf { obj := obj, property := property }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf obj)) (SizeOf.sizeOf property))","decl":"/--\nA subtype-like structure for full subcategories. Morphisms just ignore the property. We don't use\nactual subtypes since the simp-normal form `‚ÜëX` of `X.val` does not work well for full\nsubcategories. -/\n@[ext, stacks 001D \"We do not define 'strictly full' subcategories.\"]\nstructure FullSubcategory where\n  /-- The category of which this is a full subcategory -/\n  obj : C\n  /-- The predicate satisfied by all objects in this subcategory -/\n  property : Z obj\n\n"}
{"name":"CategoryTheory.FullSubcategory.ext","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nZ : C ‚Üí Prop\nx y : CategoryTheory.FullSubcategory Z\nobj : Eq x.obj y.obj\n‚ä¢ Eq x y","decl":"/--\nA subtype-like structure for full subcategories. Morphisms just ignore the property. We don't use\nactual subtypes since the simp-normal form `‚ÜëX` of `X.val` does not work well for full\nsubcategories. -/\n@[ext, stacks 001D \"We do not define 'strictly full' subcategories.\"]\nstructure FullSubcategory where\n  /-- The category of which this is a full subcategory -/\n  obj : C\n  /-- The predicate satisfied by all objects in this subcategory -/\n  property : Z obj\n\n"}
{"name":"CategoryTheory.FullSubcategory.mk.inj","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nZ : C ‚Üí Prop\nobj‚úù : C\nproperty‚úù : Z obj‚úù\nobj : C\nproperty : Z obj\nx‚úù : Eq { obj := obj‚úù, property := property‚úù } { obj := obj, property := property }\n‚ä¢ Eq obj‚úù obj","decl":"/--\nA subtype-like structure for full subcategories. Morphisms just ignore the property. We don't use\nactual subtypes since the simp-normal form `‚ÜëX` of `X.val` does not work well for full\nsubcategories. -/\n@[ext, stacks 001D \"We do not define 'strictly full' subcategories.\"]\nstructure FullSubcategory where\n  /-- The category of which this is a full subcategory -/\n  obj : C\n  /-- The predicate satisfied by all objects in this subcategory -/\n  property : Z obj\n\n"}
{"name":"CategoryTheory.FullSubcategory.mk.injEq","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nZ : C ‚Üí Prop\nobj‚úù : C\nproperty‚úù : Z obj‚úù\nobj : C\nproperty : Z obj\n‚ä¢ Eq (Eq { obj := obj‚úù, property := property‚úù } { obj := obj, property := property }) (Eq obj‚úù obj)","decl":"/--\nA subtype-like structure for full subcategories. Morphisms just ignore the property. We don't use\nactual subtypes since the simp-normal form `‚ÜëX` of `X.val` does not work well for full\nsubcategories. -/\n@[ext, stacks 001D \"We do not define 'strictly full' subcategories.\"]\nstructure FullSubcategory where\n  /-- The category of which this is a full subcategory -/\n  obj : C\n  /-- The predicate satisfied by all objects in this subcategory -/\n  property : Z obj\n\n"}
{"name":"CategoryTheory.FullSubcategory.property","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\nZ : C ‚Üí Prop\nself : CategoryTheory.FullSubcategory Z\n‚ä¢ Z self.obj","decl":"/--\nA subtype-like structure for full subcategories. Morphisms just ignore the property. We don't use\nactual subtypes since the simp-normal form `‚ÜëX` of `X.val` does not work well for full\nsubcategories. -/\n@[ext, stacks 001D \"We do not define 'strictly full' subcategories.\"]\nstructure FullSubcategory where\n  /-- The category of which this is a full subcategory -/\n  obj : C\n  /-- The predicate satisfied by all objects in this subcategory -/\n  property : Z obj\n\n"}
{"name":"CategoryTheory.FullSubcategory.id_def","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ : C ‚Üí Prop\nX : CategoryTheory.FullSubcategory Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.id X) (CategoryTheory.CategoryStruct.id X.obj)","decl":"lemma FullSubcategory.id_def (X : FullSubcategory Z) : ùüô X = ùüô X.obj := rfl\n\n"}
{"name":"CategoryTheory.FullSubcategory.comp_def","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ‚úù : C ‚Üí Prop\nX Y Z : CategoryTheory.FullSubcategory Z‚úù\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp f g) (CategoryTheory.CategoryStruct.comp f g)","decl":"lemma FullSubcategory.comp_def {X Y Z : FullSubcategory Z} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :\n    f ‚â´ g = (f ‚â´ g : X.obj ‚ü∂ Z.obj) := rfl\n\n"}
{"name":"CategoryTheory.fullSubcategoryInclusion.obj","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ : C ‚Üí Prop\nX : CategoryTheory.FullSubcategory Z\n‚ä¢ Eq ((CategoryTheory.fullSubcategoryInclusion Z).obj X) X.obj","decl":"@[simp]\ntheorem fullSubcategoryInclusion.obj {X} : (fullSubcategoryInclusion Z).obj X = X.obj :=\n  rfl\n\n"}
{"name":"CategoryTheory.fullSubcategoryInclusion.map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ : C ‚Üí Prop\nX Y : CategoryTheory.FullSubcategory Z\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.fullSubcategoryInclusion Z).map f) f","decl":"@[simp]\ntheorem fullSubcategoryInclusion.map {X Y} {f : X ‚ü∂ Y} : (fullSubcategoryInclusion Z).map f = f :=\n  rfl\n\n"}
{"name":"CategoryTheory.FullSubcategory.full","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ : C ‚Üí Prop\n‚ä¢ (CategoryTheory.fullSubcategoryInclusion Z).Full","decl":"instance FullSubcategory.full : (fullSubcategoryInclusion Z).Full :=\n  (fullyFaithfulFullSubcategoryInclusion _).full\n\n"}
{"name":"CategoryTheory.FullSubcategory.faithful","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ : C ‚Üí Prop\n‚ä¢ (CategoryTheory.fullSubcategoryInclusion Z).Faithful","decl":"instance FullSubcategory.faithful : (fullSubcategoryInclusion Z).Faithful :=\n  (fullyFaithfulFullSubcategoryInclusion _).faithful\n\n"}
{"name":"CategoryTheory.FullSubcategory.map_obj_obj","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ Z' : C ‚Üí Prop\nh : ‚àÄ ‚¶ÉX : C‚¶Ñ, Z X ‚Üí Z' X\nX : CategoryTheory.FullSubcategory Z\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.map h).obj X).obj X.obj","decl":"/-- An implication of predicates `Z ‚Üí Z'` induces a functor between full subcategories. -/\n@[simps]\ndef FullSubcategory.map (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) : FullSubcategory Z ‚•§ FullSubcategory Z' where\n  obj X := ‚ü®X.1, h X.2‚ü©\n  map f := f\n\n"}
{"name":"CategoryTheory.FullSubcategory.map_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ Z' : C ‚Üí Prop\nh : ‚àÄ ‚¶ÉX : C‚¶Ñ, Z X ‚Üí Z' X\nX‚úù Y‚úù : CategoryTheory.FullSubcategory Z\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.map h).map f) f","decl":"/-- An implication of predicates `Z ‚Üí Z'` induces a functor between full subcategories. -/\n@[simps]\ndef FullSubcategory.map (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) : FullSubcategory Z ‚•§ FullSubcategory Z' where\n  obj X := ‚ü®X.1, h X.2‚ü©\n  map f := f\n\n"}
{"name":"CategoryTheory.FullSubcategory.full_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ Z' : C ‚Üí Prop\nh : ‚àÄ ‚¶ÉX : C‚¶Ñ, Z X ‚Üí Z' X\n‚ä¢ (CategoryTheory.FullSubcategory.map h).Full","decl":"instance FullSubcategory.full_map (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) :\n  (FullSubcategory.map h).Full where map_surjective f := ‚ü®f, rfl‚ü©\n\n"}
{"name":"CategoryTheory.FullSubcategory.faithful_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ Z' : C ‚Üí Prop\nh : ‚àÄ ‚¶ÉX : C‚¶Ñ, Z X ‚Üí Z' X\n‚ä¢ (CategoryTheory.FullSubcategory.map h).Faithful","decl":"instance FullSubcategory.faithful_map (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) :\n  (FullSubcategory.map h).Faithful where\n\n"}
{"name":"CategoryTheory.FullSubcategory.map_inclusion","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v, u‚ÇÅ} C\nZ Z' : C ‚Üí Prop\nh : ‚àÄ ‚¶ÉX : C‚¶Ñ, Z X ‚Üí Z' X\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.map h).comp (CategoryTheory.fullSubcategoryInclusion Z')) (CategoryTheory.fullSubcategoryInclusion Z)","decl":"@[simp]\ntheorem FullSubcategory.map_inclusion (h : ‚àÄ ‚¶ÉX‚¶Ñ, Z X ‚Üí Z' X) :\n    FullSubcategory.map h ‚ãô fullSubcategoryInclusion Z' = fullSubcategoryInclusion Z :=\n  rfl\n\n"}
{"name":"CategoryTheory.FullSubcategory.lift_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\nX‚úù Y‚úù : C\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.lift P F hF).map f) (F.map f)","decl":"/-- A functor which maps objects to objects satisfying a certain property induces a lift through\n    the full subcategory of objects satisfying that property. -/\n@[simps]\ndef FullSubcategory.lift (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) : C ‚•§ FullSubcategory P where\n  obj X := ‚ü®F.obj X, hF X‚ü©\n  map f := F.map f\n\n"}
{"name":"CategoryTheory.FullSubcategory.lift_obj_obj","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\nX : C\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.lift P F hF).obj X).obj (F.obj X)","decl":"/-- A functor which maps objects to objects satisfying a certain property induces a lift through\n    the full subcategory of objects satisfying that property. -/\n@[simps]\ndef FullSubcategory.lift (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) : C ‚•§ FullSubcategory P where\n  obj X := ‚ü®F.obj X, hF X‚ü©\n  map f := F.map f\n\n"}
{"name":"CategoryTheory.FullSubcategory.lift_comp_inclusion_eq","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.lift P F hF).comp (CategoryTheory.fullSubcategoryInclusion P)) F","decl":"@[simp]\ntheorem FullSubcategory.lift_comp_inclusion_eq (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) :\n    FullSubcategory.lift P F hF ‚ãô fullSubcategoryInclusion P = F :=\n  rfl\n\n"}
{"name":"CategoryTheory.fullSubcategoryInclusion_obj_lift_obj","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\nX : C\n‚ä¢ Eq ((CategoryTheory.fullSubcategoryInclusion P).obj ((CategoryTheory.FullSubcategory.lift P F hF).obj X)) (F.obj X)","decl":"@[simp]\ntheorem fullSubcategoryInclusion_obj_lift_obj (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) {X : C} :\n    (fullSubcategoryInclusion P).obj ((FullSubcategory.lift P F hF).obj X) = F.obj X :=\n  rfl\n\n"}
{"name":"CategoryTheory.fullSubcategoryInclusion_map_lift_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\nX Y : C\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.fullSubcategoryInclusion P).map ((CategoryTheory.FullSubcategory.lift P F hF).map f)) (F.map f)","decl":"@[simp]\ntheorem fullSubcategoryInclusion_map_lift_map (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) {X Y : C}\n    (f : X ‚ü∂ Y) :\n    (fullSubcategoryInclusion P).map ((FullSubcategory.lift P F hF).map f) = F.map f :=\n  rfl\n\n"}
{"name":"CategoryTheory.instFaithfulFullSubcategoryLift","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\ninst‚úù : F.Faithful\n‚ä¢ (CategoryTheory.FullSubcategory.lift P F hF).Faithful","decl":"instance (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) [F.Faithful] :\n    (FullSubcategory.lift P F hF).Faithful :=\n  Functor.Faithful.of_comp_iso (FullSubcategory.lift_comp_inclusion P F hF)\n\n"}
{"name":"CategoryTheory.instFullFullSubcategoryLift","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\ninst‚úù : F.Full\n‚ä¢ (CategoryTheory.FullSubcategory.lift P F hF).Full","decl":"instance (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) [F.Full] : (FullSubcategory.lift P F hF).Full :=\n  Functor.Full.of_comp_faithful_iso (FullSubcategory.lift_comp_inclusion P F hF)\n\n"}
{"name":"CategoryTheory.FullSubcategory.lift_comp_map","module":"Mathlib.CategoryTheory.FullSubcategory","initialProofState":"C : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v, u‚ÇÅ} C\nD : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} D\nP Q : D ‚Üí Prop\nF : CategoryTheory.Functor C D\nhF : ‚àÄ (X : C), P (F.obj X)\nh : ‚àÄ ‚¶ÉX : D‚¶Ñ, P X ‚Üí Q X\n‚ä¢ Eq ((CategoryTheory.FullSubcategory.lift P F hF).comp (CategoryTheory.FullSubcategory.map h)) (CategoryTheory.FullSubcategory.lift Q F ‚ãØ)","decl":"@[simp]\ntheorem FullSubcategory.lift_comp_map (F : C ‚•§ D) (hF : ‚àÄ X, P (F.obj X)) (h : ‚àÄ ‚¶ÉX‚¶Ñ, P X ‚Üí Q X) :\n    FullSubcategory.lift P F hF ‚ãô FullSubcategory.map h =\n      FullSubcategory.lift Q F fun X => h (hF X) :=\n  rfl\n\n"}
