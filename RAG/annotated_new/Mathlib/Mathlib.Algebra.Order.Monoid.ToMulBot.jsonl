{"name":"WithZero.toMulBot_zero","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝ : Add α\n⊢ Eq (WithZero.toMulBot 0) (Multiplicative.ofAdd Bot.bot)","decl":"@[simp]\ntheorem toMulBot_zero : toMulBot (0 : WithZero (Multiplicative α)) = Multiplicative.ofAdd ⊥ :=\n  rfl\n\n"}
{"name":"WithZero.toMulBot_coe","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝ : Add α\nx : Multiplicative α\n⊢ Eq (WithZero.toMulBot ↑x) (Multiplicative.ofAdd ↑(Multiplicative.toAdd x))","decl":"@[simp]\ntheorem toMulBot_coe (x : Multiplicative α) :\n    toMulBot ↑x = Multiplicative.ofAdd (↑x.toAdd : WithBot α) :=\n  rfl\n\n"}
{"name":"WithZero.toMulBot_symm_bot","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝ : Add α\n⊢ Eq (WithZero.toMulBot.symm (Multiplicative.ofAdd Bot.bot)) 0","decl":"@[simp]\ntheorem toMulBot_symm_bot : toMulBot.symm (Multiplicative.ofAdd (⊥ : WithBot α)) = 0 :=\n  rfl\n\n"}
{"name":"WithZero.toMulBot_coe_ofAdd","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝ : Add α\nx : α\n⊢ Eq (WithZero.toMulBot.symm (Multiplicative.ofAdd ↑x)) ↑(Multiplicative.ofAdd x)","decl":"@[simp]\ntheorem toMulBot_coe_ofAdd (x : α) :\n    toMulBot.symm (Multiplicative.ofAdd (x : WithBot α)) = Multiplicative.ofAdd x :=\n  rfl\n\n"}
{"name":"WithZero.toMulBot_strictMono","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝¹ : Add α\ninst✝ : Preorder α\n⊢ StrictMono ⇑WithZero.toMulBot","decl":"theorem toMulBot_strictMono : StrictMono (@toMulBot α _) := fun _ _ => id\n\n"}
{"name":"WithZero.toMulBot_le","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝¹ : Add α\ninst✝ : Preorder α\na b : WithZero (Multiplicative α)\n⊢ Iff (LE.le (WithZero.toMulBot a) (WithZero.toMulBot b)) (LE.le a b)","decl":"@[simp]\ntheorem toMulBot_le : toMulBot a ≤ toMulBot b ↔ a ≤ b :=\n  Iff.rfl\n\n"}
{"name":"WithZero.toMulBot_lt","module":"Mathlib.Algebra.Order.Monoid.ToMulBot","initialProofState":"α : Type u\ninst✝¹ : Add α\ninst✝ : Preorder α\na b : WithZero (Multiplicative α)\n⊢ Iff (LT.lt (WithZero.toMulBot a) (WithZero.toMulBot b)) (LT.lt a b)","decl":"@[simp]\ntheorem toMulBot_lt : toMulBot a < toMulBot b ↔ a < b :=\n  Iff.rfl\n\n"}
