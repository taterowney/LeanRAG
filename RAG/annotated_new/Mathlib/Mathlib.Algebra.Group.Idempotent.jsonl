{"name":"IsIdempotentElem.of_isIdempotent","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝¹ : Mul M\ninst✝ : Std.IdempotentOp fun x1 x2 => HMul.hMul x1 x2\na : M\n⊢ IsIdempotentElem a","decl":"lemma of_isIdempotent [Std.IdempotentOp (α := M) (· * ·)] (a : M) : IsIdempotentElem a :=\n  Std.IdempotentOp.idempotent a\n\n"}
{"name":"IsIdempotentElem.eq","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝ : Mul M\na : M\nha : IsIdempotentElem a\n⊢ Eq (HMul.hMul a a) a","decl":"lemma eq (ha : IsIdempotentElem a) : a * a = a := ha\n\n"}
{"name":"IsIdempotentElem.mul_of_commute","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"S : Type u_3\ninst✝ : Semigroup S\na b : S\nhab : Commute a b\nha : IsIdempotentElem a\nhb : IsIdempotentElem b\n⊢ IsIdempotentElem (HMul.hMul a b)","decl":"lemma mul_of_commute (hab : Commute a b) (ha : IsIdempotentElem a) (hb : IsIdempotentElem b) :\n    IsIdempotentElem (a * b) := by rw [IsIdempotentElem, hab.symm.mul_mul_mul_comm, ha.eq, hb.eq]\n\n"}
{"name":"IsIdempotentElem.mul","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"S : Type u_3\ninst✝ : CommSemigroup S\na b : S\nha : IsIdempotentElem a\nhb : IsIdempotentElem b\n⊢ IsIdempotentElem (HMul.hMul a b)","decl":"lemma mul (ha : IsIdempotentElem a) (hb : IsIdempotentElem b) : IsIdempotentElem (a * b) :=\n  ha.mul_of_commute (.all ..) hb\n\n"}
{"name":"IsIdempotentElem.one","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\n⊢ IsIdempotentElem 1","decl":"lemma one : IsIdempotentElem (1 : M) := mul_one _\n\n"}
{"name":"IsIdempotentElem.coe_one","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝ : MulOneClass M\n⊢ Eq (↑1) 1","decl":"@[simp, norm_cast] lemma coe_one : ↑(1 : {a : M // IsIdempotentElem a}) = (1 : M) := rfl\n\n"}
{"name":"IsIdempotentElem.pow","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝ : Monoid M\na : M\nn : Nat\nh : IsIdempotentElem a\n⊢ IsIdempotentElem (HPow.hPow a n)","decl":"lemma pow (n : ℕ) (h : IsIdempotentElem a) : IsIdempotentElem (a ^ n) :=\n  Nat.recOn n ((pow_zero a).symm ▸ one) fun n _ =>\n    show a ^ n.succ * a ^ n.succ = a ^ n.succ by\n      conv_rhs => rw [← h.eq] -- Porting note: was `nth_rw 3 [← h.eq]`\n      rw [← sq, ← sq, ← pow_mul, ← pow_mul']\n\n"}
{"name":"IsIdempotentElem.pow_succ_eq","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝ : Monoid M\na : M\nn : Nat\nh : IsIdempotentElem a\n⊢ Eq (HPow.hPow a (HAdd.hAdd n 1)) a","decl":"lemma pow_succ_eq (n : ℕ) (h : IsIdempotentElem a) : a ^ (n + 1) = a :=\n  Nat.recOn n ((Nat.zero_add 1).symm ▸ pow_one a) fun n ih => by rw [pow_succ, ih, h.eq]\n\n"}
{"name":"IsIdempotentElem.iff_eq_one","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_1\ninst✝ : CancelMonoid M\na : M\n⊢ Iff (IsIdempotentElem a) (Eq a 1)","decl":"@[simp] lemma iff_eq_one : IsIdempotentElem a ↔ a = 1 := by simp [IsIdempotentElem]\n\n"}
{"name":"IsIdempotentElem.map","module":"Mathlib.Algebra.Group.Idempotent","initialProofState":"M : Type u_4\nN : Type u_5\nF : Type u_6\ninst✝³ : Mul M\ninst✝² : Mul N\ninst✝¹ : FunLike F M N\ninst✝ : MulHomClass F M N\ne : M\nhe : IsIdempotentElem e\nf : F\n⊢ IsIdempotentElem (f e)","decl":"lemma map {M N F} [Mul M] [Mul N] [FunLike F M N] [MulHomClass F M N] {e : M}\n    (he : IsIdempotentElem e) (f : F) : IsIdempotentElem (f e) := by\n  rw [IsIdempotentElem, ← map_mul, he.eq]\n\n"}
