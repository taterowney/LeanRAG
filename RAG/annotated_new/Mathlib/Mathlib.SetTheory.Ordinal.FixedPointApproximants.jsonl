{"name":"Cardinal.not_injective_limitation_set","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ng : Ordinal.{u} → α\n⊢ Not (Set.InjOn g (Set.Iio (SuccOrder.succ (Cardinal.mk α)).ord))","decl":"theorem not_injective_limitation_set : ¬ InjOn g (Iio (ord <| succ #α)) := by\n  intro h_inj\n  have h := lift_mk_le_lift_mk_of_injective <| injOn_iff_injective.1 h_inj\n  have mk_initialSeg_subtype :\n      #(Iio (ord <| succ #α)) = lift.{u + 1} (succ #α) := by\n    simpa only [coe_setOf, card_typein, card_ord] using mk_Iio_ordinal (ord <| succ #α)\n  rw [mk_initialSeg_subtype, lift_lift, lift_le] at h\n  exact not_le_of_lt (Order.lt_succ #α) h\n\n"}
{"name":"OrdinalApprox.lfpApprox_monotone","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\n⊢ Monotone (OrdinalApprox.lfpApprox f x)","decl":"theorem lfpApprox_monotone : Monotone (lfpApprox f x) := by\n  intros a b h\n  rw [lfpApprox, lfpApprox]\n  refine sSup_le_sSup ?h\n  apply sup_le_sup_right\n  simp only [exists_prop, Set.le_eq_subset, Set.setOf_subset_setOf, forall_exists_index, and_imp,\n    forall_apply_eq_imp_iff₂]\n  intros a' h'\n  use a'\n  exact ⟨lt_of_lt_of_le h' h, rfl⟩\n\n"}
{"name":"OrdinalApprox.le_lfpApprox","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\na : Ordinal.{u}\n⊢ LE.le x (OrdinalApprox.lfpApprox f x a)","decl":"theorem le_lfpApprox {a : Ordinal} : x ≤ lfpApprox f x a := by\n  rw [lfpApprox]\n  apply le_sSup\n  simp only [exists_prop, Set.union_singleton, Set.mem_insert_iff, Set.mem_setOf_eq, true_or]\n\n"}
{"name":"OrdinalApprox.lfpApprox_add_one","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\nh : LE.le x (f x)\na : Ordinal.{u}\n⊢ Eq (OrdinalApprox.lfpApprox f x (HAdd.hAdd a 1)) (f (OrdinalApprox.lfpApprox f x a))","decl":"theorem lfpApprox_add_one (h : x ≤ f x) (a : Ordinal) :\n    lfpApprox f x (a+1) = f (lfpApprox f x a) := by\n  apply le_antisymm\n  · conv => left; rw [lfpApprox]\n    apply sSup_le\n    simp only [Ordinal.add_one_eq_succ, lt_succ_iff, exists_prop, Set.union_singleton,\n      Set.mem_insert_iff, Set.mem_setOf_eq, forall_eq_or_imp, forall_exists_index, and_imp,\n      forall_apply_eq_imp_iff₂]\n    apply And.intro\n    · apply le_trans h\n      apply Monotone.imp f.monotone\n      exact le_lfpApprox f x\n    · intros a' h\n      apply f.2; apply lfpApprox_monotone; exact h\n  · conv => right; rw [lfpApprox]\n    apply le_sSup\n    simp only [Ordinal.add_one_eq_succ, lt_succ_iff, exists_prop]\n    rw [Set.mem_union]\n    apply Or.inl\n    simp only [Set.mem_setOf_eq]\n    use a\n\n"}
{"name":"OrdinalApprox.lfpApprox_mono_left","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\n⊢ Monotone OrdinalApprox.lfpApprox","decl":"theorem lfpApprox_mono_left : Monotone (lfpApprox : (α →o α) → _) := by\n  intro f g h x a\n  induction a using Ordinal.induction with\n  | h i ih =>\n    rw [lfpApprox, lfpApprox]\n    apply sSup_le\n    simp only [exists_prop, Set.union_singleton, Set.mem_insert_iff, Set.mem_setOf_eq, sSup_insert,\n      forall_eq_or_imp, le_sup_left, forall_exists_index, and_imp, forall_apply_eq_imp_iff₂,\n      true_and]\n    intro i' h_lt\n    apply le_sup_of_le_right\n    apply le_sSup_of_le\n    · use i'\n    · apply le_trans (h _)\n      simp only [OrderHom.toFun_eq_coe]\n      exact g.monotone (ih i' h_lt)\n\n"}
{"name":"OrdinalApprox.lfpApprox_mono_mid","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\n⊢ Monotone (OrdinalApprox.lfpApprox f)","decl":"theorem lfpApprox_mono_mid : Monotone (lfpApprox f) := by\n  intro x₁ x₂ h a\n  induction a using Ordinal.induction with\n  | h i ih =>\n    rw [lfpApprox, lfpApprox]\n    apply sSup_le\n    simp only [exists_prop, Set.union_singleton, Set.mem_insert_iff, Set.mem_setOf_eq, sSup_insert,\n      forall_eq_or_imp, forall_exists_index, and_imp, forall_apply_eq_imp_iff₂]\n    constructor\n    · exact le_sup_of_le_left h\n    · intro i' h_i'\n      apply le_sup_of_le_right\n      apply le_sSup_of_le\n      · use i'\n      · exact f.monotone (ih i' h_i')\n\n"}
{"name":"OrdinalApprox.lfpApprox_eq_of_mem_fixedPoints","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\na b : Ordinal.{u}\nh_init : LE.le x (f x)\nh_ab : LE.le a b\nh : Membership.mem (Function.fixedPoints ⇑f) (OrdinalApprox.lfpApprox f x a)\n⊢ Eq (OrdinalApprox.lfpApprox f x b) (OrdinalApprox.lfpApprox f x a)","decl":"/-- The approximations of the least fixed point stabilize at a fixed point of `f` -/\ntheorem lfpApprox_eq_of_mem_fixedPoints {a b : Ordinal} (h_init : x ≤ f x) (h_ab : a ≤ b)\n    (h : lfpApprox f x a ∈ fixedPoints f) : lfpApprox f x b = lfpApprox f x a := by\n  rw [mem_fixedPoints_iff] at h\n  induction b using Ordinal.induction with | h b IH =>\n  apply le_antisymm\n  · conv => left; rw [lfpApprox]\n    apply sSup_le\n    simp only [exists_prop, Set.union_singleton, Set.mem_insert_iff, Set.mem_setOf_eq,\n      forall_eq_or_imp, forall_exists_index, and_imp, forall_apply_eq_imp_iff₂]\n    apply And.intro (le_lfpApprox f x)\n    intro a' ha'b\n    by_cases haa : a' < a\n    · rw [← lfpApprox_add_one f x h_init]\n      apply lfpApprox_monotone\n      simp only [Ordinal.add_one_eq_succ, succ_le_iff]\n      exact haa\n    · rw [IH a' ha'b (le_of_not_lt haa), h]\n  · exact lfpApprox_monotone f x h_ab\n\n"}
{"name":"OrdinalApprox.exists_lfpApprox_eq_lfpApprox","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\n⊢ Exists fun a => And (LT.lt a (Order.succ (Cardinal.mk α)).ord) (Exists fun b => And (LT.lt b (Order.succ (Cardinal.mk α)).ord) (And (Ne a b) (Eq (OrdinalApprox.lfpApprox f x a) (OrdinalApprox.lfpApprox f x b))))","decl":"/-- There are distinct indices smaller than the successor of the domain's cardinality\nyielding the same value -/\ntheorem exists_lfpApprox_eq_lfpApprox : ∃ a < ord <| succ #α, ∃ b < ord <| succ #α,\n    a ≠ b ∧ lfpApprox f x a = lfpApprox f x b := by\n  have h_ninj := not_injective_limitation_set <| lfpApprox f x\n  rw [Set.injOn_iff_injective, Function.not_injective_iff] at h_ninj\n  let ⟨a, b, h_fab, h_nab⟩ := h_ninj\n  use a.val; apply And.intro a.prop\n  use b.val; apply And.intro b.prop\n  apply And.intro\n  · intro h_eq; rw [Subtype.coe_inj] at h_eq; exact h_nab h_eq\n  · exact h_fab\n\n"}
{"name":"OrdinalApprox.lfpApprox_mem_fixedPoints_of_eq","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\na b c : Ordinal.{u}\nh_init : LE.le x (f x)\nh_ab : LT.lt a b\nh_ac : LE.le a c\nh_fab : Eq (OrdinalApprox.lfpApprox f x a) (OrdinalApprox.lfpApprox f x b)\n⊢ Membership.mem (Function.fixedPoints ⇑f) (OrdinalApprox.lfpApprox f x c)","decl":"/-- If the sequence of ordinal-indexed approximations takes a value twice,\nthen it actually stabilised at that value. -/\nlemma lfpApprox_mem_fixedPoints_of_eq {a b c : Ordinal}\n    (h_init : x ≤ f x) (h_ab : a < b) (h_ac : a ≤ c) (h_fab : lfpApprox f x a = lfpApprox f x b) :\n    lfpApprox f x c ∈ fixedPoints f := by\n  have lfpApprox_mem_fixedPoint :\n      lfpApprox f x a ∈ fixedPoints f := by\n    rw [mem_fixedPoints_iff, ← lfpApprox_add_one f x h_init]\n    exact Monotone.eq_of_le_of_le (lfpApprox_monotone f x)\n      h_fab (SuccOrder.le_succ a) (SuccOrder.succ_le_of_lt h_ab)\n  rw [lfpApprox_eq_of_mem_fixedPoints f x h_init]\n  · exact lfpApprox_mem_fixedPoint\n  · exact h_ac\n  · exact lfpApprox_mem_fixedPoint\n\n"}
{"name":"OrdinalApprox.lfpApprox_ord_mem_fixedPoint","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\nh_init : LE.le x (f x)\n⊢ Membership.mem (Function.fixedPoints ⇑f) (OrdinalApprox.lfpApprox f x (Order.succ (Cardinal.mk α)).ord)","decl":"/-- The approximation at the index of the successor of the domain's cardinality is a fixed point -/\ntheorem lfpApprox_ord_mem_fixedPoint (h_init : x ≤ f x) :\n    lfpApprox f x (ord <| succ #α) ∈ fixedPoints f := by\n  let ⟨a, h_a, b, h_b, h_nab, h_fab⟩ := exists_lfpApprox_eq_lfpApprox f x\n  cases le_total a b with\n  | inl h_ab =>\n    exact lfpApprox_mem_fixedPoints_of_eq f x h_init\n      (h_nab.lt_of_le h_ab) (le_of_lt h_a) h_fab\n  | inr h_ba =>\n    exact lfpApprox_mem_fixedPoints_of_eq f x h_init\n      (h_nab.symm.lt_of_le h_ba) (le_of_lt h_b) (h_fab.symm)\n\n"}
{"name":"OrdinalApprox.lfpApprox_le_of_mem_fixedPoints","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx a : α\nh_a : Membership.mem (Function.fixedPoints ⇑f) a\nh_le_init : LE.le x a\ni : Ordinal.{u}\n⊢ LE.le (OrdinalApprox.lfpApprox f x i) a","decl":"/-- Every value of the approximation is less or equal than every fixed point of `f`\ngreater or equal than the initial value -/\ntheorem lfpApprox_le_of_mem_fixedPoints {a : α}\n    (h_a : a ∈ fixedPoints f) (h_le_init : x ≤ a) (i : Ordinal) : lfpApprox f x i ≤ a := by\n  induction i using Ordinal.induction with\n  | h i IH =>\n    rw [lfpApprox]\n    apply sSup_le\n    simp only [exists_prop]\n    intro y h_y\n    simp only [Set.mem_union, Set.mem_setOf_eq, Set.mem_singleton_iff] at h_y\n    cases h_y with\n    | inl h_y =>\n      let ⟨j, h_j_lt, h_j⟩ := h_y\n      rw [← h_j, ← h_a]\n      exact f.monotone' (IH j h_j_lt)\n    | inr h_y =>\n      rw [h_y]\n      exact h_le_init\n\n"}
{"name":"OrdinalApprox.lfpApprox_ord_eq_lfp","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\n⊢ Eq (OrdinalApprox.lfpApprox f Bot.bot (Order.succ (Cardinal.mk α)).ord) (OrderHom.lfp f)","decl":"/-- The approximation sequence converges at the successor of the domain's cardinality\nto the least fixed point if starting from `⊥` -/\ntheorem lfpApprox_ord_eq_lfp : lfpApprox f ⊥ (ord <| succ #α) = f.lfp := by\n  apply le_antisymm\n  · have h_lfp : ∃ y : fixedPoints f, f.lfp = y := by use ⊥; exact rfl\n    let ⟨y, h_y⟩ := h_lfp; rw [h_y]\n    exact lfpApprox_le_of_mem_fixedPoints f ⊥ y.2 bot_le (ord <| succ #α)\n  · have h_fix : ∃ y : fixedPoints f, lfpApprox f ⊥ (ord <| succ #α) = y := by\n      simpa only [Subtype.exists, mem_fixedPoints, exists_prop, exists_eq_right'] using\n        lfpApprox_ord_mem_fixedPoint f ⊥ bot_le\n    let ⟨x, h_x⟩ := h_fix; rw [h_x]\n    exact lfp_le_fixed f x.prop\n\n"}
{"name":"OrdinalApprox.lfp_mem_range_lfpApprox","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\n⊢ Membership.mem (Set.range (OrdinalApprox.lfpApprox f Bot.bot)) (OrderHom.lfp f)","decl":"/-- Some approximation of the least fixed point starting from `⊥` is the least fixed point. -/\ntheorem lfp_mem_range_lfpApprox : f.lfp ∈ Set.range (lfpApprox f ⊥) := by\n  use ord <| succ #α\n  exact lfpApprox_ord_eq_lfp f\n\n"}
{"name":"OrdinalApprox.gfpApprox_antitone","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\n⊢ Antitone (OrdinalApprox.gfpApprox f x)","decl":"theorem gfpApprox_antitone : Antitone (gfpApprox f x) :=\n  lfpApprox_monotone f.dual x\n\n"}
{"name":"OrdinalApprox.gfpApprox_le","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\na : Ordinal.{u}\n⊢ LE.le (OrdinalApprox.gfpApprox f x a) x","decl":"theorem gfpApprox_le {a : Ordinal} : gfpApprox f x a ≤ x :=\n  le_lfpApprox f.dual x\n\n"}
{"name":"OrdinalApprox.gfpApprox_add_one","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\nh : LE.le (f x) x\na : Ordinal.{u}\n⊢ Eq (OrdinalApprox.gfpApprox f x (HAdd.hAdd a 1)) (f (OrdinalApprox.gfpApprox f x a))","decl":"theorem gfpApprox_add_one (h : f x ≤ x) (a : Ordinal) :\n    gfpApprox f x (a+1) = f (gfpApprox f x a) :=\n  lfpApprox_add_one f.dual x h a\n\n"}
{"name":"OrdinalApprox.gfpApprox_mono_left","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\n⊢ Monotone OrdinalApprox.gfpApprox","decl":"theorem gfpApprox_mono_left : Monotone (gfpApprox : (α →o α) → _) := by\n  intro f g h\n  have : g.dual ≤ f.dual := h\n  exact lfpApprox_mono_left this\n\n"}
{"name":"OrdinalApprox.gfpApprox_mono_mid","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\n⊢ Monotone (OrdinalApprox.gfpApprox f)","decl":"theorem gfpApprox_mono_mid : Monotone (gfpApprox f) :=\n  fun _ _ h => lfpApprox_mono_mid f.dual h\n\n"}
{"name":"OrdinalApprox.gfpApprox_eq_of_mem_fixedPoints","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\na b : Ordinal.{u}\nh_init : LE.le (f x) x\nh_ab : LE.le a b\nh : Membership.mem (Function.fixedPoints ⇑f) (OrdinalApprox.gfpApprox f x a)\n⊢ Eq (OrdinalApprox.gfpApprox f x b) (OrdinalApprox.gfpApprox f x a)","decl":"/-- The approximations of the greatest fixed point stabilize at a fixed point of `f` -/\ntheorem gfpApprox_eq_of_mem_fixedPoints {a b : Ordinal} (h_init : f x ≤ x) (h_ab : a ≤ b)\n    (h : gfpApprox f x a ∈ fixedPoints f) : gfpApprox f x b = gfpApprox f x a :=\n  lfpApprox_eq_of_mem_fixedPoints f.dual x h_init h_ab h\n\n"}
{"name":"OrdinalApprox.exists_gfpApprox_eq_gfpApprox","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\n⊢ Exists fun a => And (LT.lt a (Order.succ (Cardinal.mk α)).ord) (Exists fun b => And (LT.lt b (Order.succ (Cardinal.mk α)).ord) (And (Ne a b) (Eq (OrdinalApprox.gfpApprox f x a) (OrdinalApprox.gfpApprox f x b))))","decl":"/-- There are distinct indices smaller than the successor of the domain's cardinality\nyielding the same value -/\ntheorem exists_gfpApprox_eq_gfpApprox : ∃ a < ord <| succ #α, ∃ b < ord <| succ #α,\n    a ≠ b ∧ gfpApprox f x a = gfpApprox f x b :=\n  exists_lfpApprox_eq_lfpApprox f.dual x\n\n"}
{"name":"OrdinalApprox.gfpApprox_ord_mem_fixedPoint","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx : α\nh_init : LE.le (f x) x\n⊢ Membership.mem (Function.fixedPoints ⇑f) (OrdinalApprox.gfpApprox f x (Order.succ (Cardinal.mk α)).ord)","decl":"/-- The approximation at the index of the successor of the domain's cardinality is a fixed point -/\nlemma gfpApprox_ord_mem_fixedPoint (h_init : f x ≤ x) :\n    gfpApprox f x (ord <| succ #α) ∈ fixedPoints f :=\n  lfpApprox_ord_mem_fixedPoint f.dual x h_init\n\n"}
{"name":"OrdinalApprox.le_gfpApprox_of_mem_fixedPoints","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\nx a : α\nh_a : Membership.mem (Function.fixedPoints ⇑f) a\nh_le_init : LE.le a x\ni : Ordinal.{u}\n⊢ LE.le a (OrdinalApprox.gfpApprox f x i)","decl":"/-- Every value of the approximation is greater or equal than every fixed point of `f`\nless or equal than the initial value -/\nlemma le_gfpApprox_of_mem_fixedPoints {a : α}\n    (h_a : a ∈ fixedPoints f) (h_le_init : a ≤ x) (i : Ordinal) : a ≤ gfpApprox f x i :=\n  lfpApprox_le_of_mem_fixedPoints f.dual x h_a h_le_init i\n\n"}
{"name":"OrdinalApprox.gfpApprox_ord_eq_gfp","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\n⊢ Eq (OrdinalApprox.gfpApprox f Top.top (Order.succ (Cardinal.mk α)).ord) (OrderHom.gfp f)","decl":"/-- The approximation sequence converges at the successor of the domain's cardinality\nto the greatest fixed point if starting from `⊥` -/\ntheorem gfpApprox_ord_eq_gfp : gfpApprox f ⊤ (ord <| succ #α) = f.gfp :=\n  lfpApprox_ord_eq_lfp f.dual\n\n"}
{"name":"OrdinalApprox.gfp_mem_range_gfpApprox","module":"Mathlib.SetTheory.Ordinal.FixedPointApproximants","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\nf : OrderHom α α\n⊢ Membership.mem (Set.range (OrdinalApprox.gfpApprox f Top.top)) (OrderHom.gfp f)","decl":"/-- Some approximation of the least fixed point starting from `⊤` is the greatest fixed point. -/\ntheorem gfp_mem_range_gfpApprox : f.gfp ∈ Set.range (gfpApprox f ⊤) :=\n  lfp_mem_range_lfpApprox f.dual\n\n"}
