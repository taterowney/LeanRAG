{"name":"EReal.log_exp","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : EReal\n⊢ Eq x.exp.log x","decl":"@[simp] lemma EReal.log_exp (x : EReal) : log (exp x) = x := by\n  induction x\n  · simp\n  · rw [exp_coe, log_ofReal, if_neg (not_le.mpr (Real.exp_pos _)), Real.log_exp]\n  · simp\n\n"}
{"name":"ENNReal.exp_log","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : ENNReal\n⊢ Eq x.log.exp x","decl":"@[simp] lemma ENNReal.exp_log (x : ℝ≥0∞) : exp (log x) = x := by\n  by_cases hx_top : x = ∞\n  · simp [hx_top]\n  by_cases hx_zero : x = 0\n  · simp [hx_zero]\n  have hx_pos : 0 < x.toReal := ENNReal.toReal_pos hx_zero hx_top\n  rw [← ENNReal.ofReal_toReal hx_top, log_ofReal_of_pos hx_pos, exp_coe, Real.exp_log hx_pos]\n\n"}
{"name":"EReal.exp_nmul","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : EReal\nn : Nat\n⊢ Eq (HMul.hMul (↑n) x).exp (HPow.hPow x.exp n)","decl":"lemma exp_nmul (x : EReal) (n : ℕ) : exp (n * x) = (exp x) ^ n := by\n  simp_rw [← log_eq_iff, log_pow, log_exp]\n\n"}
{"name":"EReal.exp_mul","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : EReal\ny : Real\n⊢ Eq (HMul.hMul x ↑y).exp (HPow.hPow x.exp y)","decl":"lemma exp_mul (x : EReal) (y : ℝ) : exp (x * y) = (exp x) ^ y := by\n  rw [← log_eq_iff, log_rpow, log_exp, log_exp, mul_comm]\n\n"}
{"name":"ENNReal.logOrderIso_apply","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : ENNReal\n⊢ Eq (ENNReal.logOrderIso x) x.log","decl":"@[simp] lemma logOrderIso_apply (x : ℝ≥0∞) : logOrderIso x = log x := rfl\n\n"}
{"name":"EReal.expOrderIso_apply","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : EReal\n⊢ Eq (EReal.expOrderIso x) x.exp","decl":"@[simp] lemma _root_.EReal.expOrderIso_apply (x : EReal) : expOrderIso x = exp x := rfl\n\n"}
{"name":"ENNReal.logOrderIso_symm","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Eq ENNReal.logOrderIso.symm EReal.expOrderIso","decl":"@[simp] lemma logOrderIso_symm : logOrderIso.symm = expOrderIso := rfl\n"}
{"name":"EReal.expOrderIso_symm","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Eq EReal.expOrderIso.symm ENNReal.logOrderIso","decl":"@[simp] lemma _root_.EReal.expOrderIso_symm : expOrderIso.symm = logOrderIso := rfl\n\n"}
{"name":"ENNReal.logHomeomorph_apply","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : ENNReal\n⊢ Eq (ENNReal.logHomeomorph x) x.log","decl":"@[simp] lemma logHomeomorph_apply (x : ℝ≥0∞) : logHomeomorph x = log x := rfl\n\n"}
{"name":"EReal.expHomeomorph_apply","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"x : EReal\n⊢ Eq (EReal.expHomeomorph x) x.exp","decl":"@[simp] lemma _root_.EReal.expHomeomorph_apply (x : EReal) : expHomeomorph x = exp x := rfl\n\n"}
{"name":"ENNReal.logHomeomorph_symm","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Eq ENNReal.logHomeomorph.symm EReal.expHomeomorph","decl":"@[simp] lemma logHomeomorph_symm : logHomeomorph.symm = expHomeomorph := rfl\n\n"}
{"name":"EReal.expHomeomorph_symm","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Eq EReal.expHomeomorph.symm ENNReal.logHomeomorph","decl":"@[simp] lemma _root_.EReal.expHomeomorph_symm : expHomeomorph.symm = logHomeomorph := rfl\n\n"}
{"name":"ENNReal.continuous_log","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Continuous ENNReal.log","decl":"@[continuity, fun_prop]\nlemma continuous_log : Continuous log := logOrderIso.continuous\n\n"}
{"name":"ENNReal.continuous_exp","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Continuous EReal.exp","decl":"@[continuity, fun_prop]\nlemma continuous_exp : Continuous exp := expOrderIso.continuous\n\n"}
{"name":"ENNReal.measurable_log","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Measurable ENNReal.log","decl":"@[measurability, fun_prop]\nlemma measurable_log : Measurable log := continuous_log.measurable\n\n"}
{"name":"EReal.measurable_exp","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ Measurable EReal.exp","decl":"@[measurability, fun_prop]\nlemma _root_.EReal.measurable_exp : Measurable exp := continuous_exp.measurable\n\n"}
{"name":"Measurable.ennreal_log","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"α : Type u_1\nx✝ : MeasurableSpace α\nf : α → ENNReal\nhf : Measurable f\n⊢ Measurable fun x => (f x).log","decl":"@[measurability, fun_prop]\nlemma _root_.Measurable.ennreal_log {α : Type*} {_ : MeasurableSpace α}\n    {f : α → ℝ≥0∞} (hf : Measurable f) :\n    Measurable fun x ↦ log (f x) := measurable_log.comp hf\n\n"}
{"name":"Measurable.ereal_exp","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"α : Type u_1\nx✝ : MeasurableSpace α\nf : α → EReal\nhf : Measurable f\n⊢ Measurable fun x => (f x).exp","decl":"@[measurability, fun_prop]\nlemma _root_.Measurable.ereal_exp {α : Type*} {_ : MeasurableSpace α}\n    {f : α → EReal} (hf : Measurable f) :\n    Measurable fun x ↦ exp (f x) := measurable_exp.comp hf\n\n"}
{"name":"instPolishSpaceEReal","module":"Mathlib.Analysis.SpecialFunctions.Log.ENNRealLogExp","initialProofState":"⊢ PolishSpace EReal","decl":"instance : PolishSpace EReal := ENNReal.logOrderIso.symm.toHomeomorph.isClosedEmbedding.polishSpace\n"}
