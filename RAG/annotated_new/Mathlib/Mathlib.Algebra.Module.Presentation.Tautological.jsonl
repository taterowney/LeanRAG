{"name":"Module.Presentation.tautological.R.smul.sizeOf_spec","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\nM : Type v\ninst✝¹ : SizeOf A\ninst✝ : SizeOf M\na : A\nm : M\n⊢ Eq (SizeOf.sizeOf (Module.Presentation.tautological.R.smul a m)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf a)) (SizeOf.sizeOf m))","decl":"/-- The type which parametrizes the tautological relations in an `A`-module `M`. -/\ninductive tautological.R\n  | add (m₁ m₂ : M)\n  | smul (a : A) (m : M)\n\n"}
{"name":"Module.Presentation.tautological.R.smul.injEq","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\nM : Type v\na✝ : A\nm✝ : M\na : A\nm : M\n⊢ Eq (Eq (Module.Presentation.tautological.R.smul a✝ m✝) (Module.Presentation.tautological.R.smul a m)) (And (Eq a✝ a) (Eq m✝ m))","decl":"/-- The type which parametrizes the tautological relations in an `A`-module `M`. -/\ninductive tautological.R\n  | add (m₁ m₂ : M)\n  | smul (a : A) (m : M)\n\n"}
{"name":"Module.Presentation.tautological.R.add.injEq","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\nM : Type v\nm₁✝ m₂✝ m₁ m₂ : M\n⊢ Eq (Eq (Module.Presentation.tautological.R.add m₁✝ m₂✝) (Module.Presentation.tautological.R.add m₁ m₂)) (And (Eq m₁✝ m₁) (Eq m₂✝ m₂))","decl":"/-- The type which parametrizes the tautological relations in an `A`-module `M`. -/\ninductive tautological.R\n  | add (m₁ m₂ : M)\n  | smul (a : A) (m : M)\n\n"}
{"name":"Module.Presentation.tautological.R.add.sizeOf_spec","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\nM : Type v\ninst✝¹ : SizeOf A\ninst✝ : SizeOf M\nm₁ m₂ : M\n⊢ Eq (SizeOf.sizeOf (Module.Presentation.tautological.R.add m₁ m₂)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf m₁)) (SizeOf.sizeOf m₂))","decl":"/-- The type which parametrizes the tautological relations in an `A`-module `M`. -/\ninductive tautological.R\n  | add (m₁ m₂ : M)\n  | smul (a : A) (m : M)\n\n"}
{"name":"Module.Presentation.tautological.R.smul.inj","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\nM : Type v\na✝ : A\nm✝ : M\na : A\nm : M\nx✝ : Eq (Module.Presentation.tautological.R.smul a✝ m✝) (Module.Presentation.tautological.R.smul a m)\n⊢ And (Eq a✝ a) (Eq m✝ m)","decl":"/-- The type which parametrizes the tautological relations in an `A`-module `M`. -/\ninductive tautological.R\n  | add (m₁ m₂ : M)\n  | smul (a : A) (m : M)\n\n"}
{"name":"Module.Presentation.tautological.R.add.inj","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\nM : Type v\nm₁✝ m₂✝ m₁ m₂ : M\nx✝ : Eq (Module.Presentation.tautological.R.add m₁✝ m₂✝) (Module.Presentation.tautological.R.add m₁ m₂)\n⊢ And (Eq m₁✝ m₁) (Eq m₂✝ m₂)","decl":"/-- The type which parametrizes the tautological relations in an `A`-module `M`. -/\ninductive tautological.R\n  | add (m₁ m₂ : M)\n  | smul (a : A) (m : M)\n\n"}
{"name":"Module.Presentation.tautologicalRelations_relation","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\nx✝ : Module.Presentation.tautological.R A M\n⊢ Eq ((Module.Presentation.tautologicalRelations A M).relation x✝) (Module.Presentation.tautologicalRelations.match_1 A M (fun x => Finsupp M A) x✝ (fun m₁ m₂ => HSub.hSub (HAdd.hAdd (Finsupp.single m₁ 1) (Finsupp.single m₂ 1)) (Finsupp.single (HAdd.hAdd m₁ m₂) 1)) fun a m => HSub.hSub (HSMul.hSMul a (Finsupp.single m 1)) (Finsupp.single (HSMul.hSMul a m) 1))","decl":"/-- The system of equations corresponding to the tautological presentation of an `A`-module. -/\n@[simps]\nnoncomputable def tautologicalRelations : Relations A where\n  G := M\n  R := tautological.R A M\n  relation\n    | .add m₁ m₂ => Finsupp.single m₁ 1 + Finsupp.single m₂ 1 - Finsupp.single (m₁ + m₂) 1\n    | .smul a m => a • Finsupp.single m 1 - Finsupp.single (a • m) 1\n\n"}
{"name":"Module.Presentation.tautologicalRelations_R","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\n⊢ Eq (Module.Presentation.tautologicalRelations A M).R (Module.Presentation.tautological.R A M)","decl":"/-- The system of equations corresponding to the tautological presentation of an `A`-module. -/\n@[simps]\nnoncomputable def tautologicalRelations : Relations A where\n  G := M\n  R := tautological.R A M\n  relation\n    | .add m₁ m₂ => Finsupp.single m₁ 1 + Finsupp.single m₂ 1 - Finsupp.single (m₁ + m₂) 1\n    | .smul a m => a • Finsupp.single m 1 - Finsupp.single (a • m) 1\n\n"}
{"name":"Module.Presentation.tautologicalRelations_G","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\n⊢ Eq (Module.Presentation.tautologicalRelations A M).G M","decl":"/-- The system of equations corresponding to the tautological presentation of an `A`-module. -/\n@[simps]\nnoncomputable def tautologicalRelations : Relations A where\n  G := M\n  R := tautological.R A M\n  relation\n    | .add m₁ m₂ => Finsupp.single m₁ 1 + Finsupp.single m₂ 1 - Finsupp.single (m₁ + m₂) 1\n    | .smul a m => a • Finsupp.single m 1 - Finsupp.single (a • m) 1\n\n"}
{"name":"Module.Presentation.tautologicalSolution_var","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\na : M\n⊢ Eq ((Module.Presentation.tautologicalSolution A M).var a) a","decl":"/-- The obvious solution of `tautologicalRelations A M` in the module `M`. -/\n@[simps! var]\ndef tautologicalSolution : (tautologicalRelations A M).Solution M :=\n  tautologicalRelationsSolutionEquiv.symm .id\n\n"}
{"name":"Module.Presentation.tautologicalSolution_isPresentation","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\n⊢ (Module.Presentation.tautologicalSolution A M).IsPresentation","decl":"lemma tautologicalSolution_isPresentation :\n    (tautologicalSolution A M).IsPresentation :=\n  (tautologicalSolutionIsPresentationCore A M).isPresentation\n\n"}
{"name":"Module.Presentation.tautological_var","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\na : M\n⊢ Eq ((Module.Presentation.tautological A M).var a) a","decl":"/-- The tautological presentation of any `A`-module `M` by generators and relations.\nThere is a generator `[m]` for any element `m : M`, and there are two types of relations:\n* `[m₁] + [m₂] - [m₁ + m₂] = 0`\n* `a • [m] - [a • m] = 0`. -/\n@[simps!]\nnoncomputable def tautological : Presentation A M :=\n  ofIsPresentation (tautologicalSolution_isPresentation A M)\n\n"}
{"name":"Module.Presentation.tautological_R","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\n⊢ Eq (Module.Presentation.tautological A M).R (Module.Presentation.tautological.R A M)","decl":"/-- The tautological presentation of any `A`-module `M` by generators and relations.\nThere is a generator `[m]` for any element `m : M`, and there are two types of relations:\n* `[m₁] + [m₂] - [m₁ + m₂] = 0`\n* `a • [m] - [a • m] = 0`. -/\n@[simps!]\nnoncomputable def tautological : Presentation A M :=\n  ofIsPresentation (tautologicalSolution_isPresentation A M)\n\n"}
{"name":"Module.Presentation.tautological_relation","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\nr : (Module.Presentation.tautologicalRelations A M).R\n⊢ Eq ((Module.Presentation.tautological A M).relation r) (Module.Presentation.tautologicalRelations.match_1 A M (fun x => Finsupp M A) r (fun m₁ m₂ => HSub.hSub (HAdd.hAdd (Finsupp.single m₁ 1) (Finsupp.single m₂ 1)) (Finsupp.single (HAdd.hAdd m₁ m₂) 1)) fun a m => HSub.hSub (Finsupp.single m a) (Finsupp.single (HSMul.hSMul a m) 1))","decl":"/-- The tautological presentation of any `A`-module `M` by generators and relations.\nThere is a generator `[m]` for any element `m : M`, and there are two types of relations:\n* `[m₁] + [m₂] - [m₁ + m₂] = 0`\n* `a • [m] - [a • m] = 0`. -/\n@[simps!]\nnoncomputable def tautological : Presentation A M :=\n  ofIsPresentation (tautologicalSolution_isPresentation A M)\n\n"}
{"name":"Module.Presentation.tautological_G","module":"Mathlib.Algebra.Module.Presentation.Tautological","initialProofState":"A : Type u\ninst✝² : Ring A\nM : Type v\ninst✝¹ : AddCommGroup M\ninst✝ : Module A M\n⊢ Eq (Module.Presentation.tautological A M).G M","decl":"/-- The tautological presentation of any `A`-module `M` by generators and relations.\nThere is a generator `[m]` for any element `m : M`, and there are two types of relations:\n* `[m₁] + [m₂] - [m₁ + m₂] = 0`\n* `a • [m] - [a • m] = 0`. -/\n@[simps!]\nnoncomputable def tautological : Presentation A M :=\n  ofIsPresentation (tautologicalSolution_isPresentation A M)\n\n"}
