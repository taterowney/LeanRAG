{"name":"Monotone.tendstoLocallyUniformly_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\nhF_cont : ‚àÄ (i : Œπ), Continuous (F i)\nhF_mono : Monotone F\nhf : Continuous f\nh_tendsto : ‚àÄ (x : Œ±), Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoLocallyUniformly F f Filter.atTop","decl":"/-- **Dini's theorem**: if `F n` is a monotone increasing collection of continuous functions\nconverging pointwise to a continuous function `f`, then `F n` converges locally uniformly to `f`. -/\nlemma tendstoLocallyUniformly_of_forall_tendsto\n    (hF_cont : ‚àÄ i, Continuous (F i)) (hF_mono : Monotone F) (hf : Continuous f)\n    (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoLocallyUniformly F f atTop := by\n  refine (atTop : Filter Œπ).eq_or_neBot.elim (fun h ‚Ü¶ ?eq_bot) (fun _ ‚Ü¶ ?_)\n  case eq_bot => simp [h, tendstoLocallyUniformly_iff_forall_tendsto]\n  have F_le_f (x : Œ±) (n : Œπ) : F n x ‚â§ f x := by\n    refine ge_of_tendsto (h_tendsto x) ?_\n    filter_upwards [Ici_mem_atTop n] with m hnm\n    exact hF_mono hnm x\n  simp_rw [Metric.tendstoLocallyUniformly_iff, dist_eq_norm']\n  intro Œµ Œµ_pos x\n  simp_rw +singlePass [tendsto_iff_norm_sub_tendsto_zero] at h_tendsto\n  obtain ‚ü®n, hn‚ü© := (h_tendsto x).eventually (eventually_lt_nhds Œµ_pos) |>.exists\n  refine ‚ü®{y | ‚ÄñF n y - f y‚Äñ < Œµ}, ‚ü®isOpen_lt (by fun_prop) continuous_const |>.mem_nhds hn, ?_‚ü©‚ü©\n  filter_upwards [eventually_ge_atTop n] with m hnm z hz\n  refine norm_le_norm_of_abs_le_abs ?_ |>.trans_lt hz\n  simp only [abs_of_nonpos (sub_nonpos_of_le (F_le_f _ _)), neg_sub, sub_le_sub_iff_left]\n  exact hF_mono hnm z\n\n"}
{"name":"Monotone.tendstoLocallyUniformlyOn_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\ns : Set Œ±\nhF_cont : ‚àÄ (i : Œπ), ContinuousOn (F i) s\nhF_mono : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Monotone fun x_1 => F x_1 x\nhf : ContinuousOn f s\nh_tendsto : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoLocallyUniformlyOn F f Filter.atTop s","decl":"/-- **Dini's theorem**: if `F n` is a monotone increasing collection of continuous functions on a\nset `s` converging pointwise to a continuous function `f`, then `F n` converges locally uniformly\nto `f`. -/\nlemma tendstoLocallyUniformlyOn_of_forall_tendsto {s : Set Œ±}\n    (hF_cont : ‚àÄ i, ContinuousOn (F i) s) (hF_mono : ‚àÄ x ‚àà s, Monotone (F ¬∑ x))\n    (hf : ContinuousOn f s) (h_tendsto : ‚àÄ x ‚àà s, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoLocallyUniformlyOn F f atTop s := by\n  rw [tendstoLocallyUniformlyOn_iff_tendstoLocallyUniformly_comp_coe]\n  exact tendstoLocallyUniformly_of_forall_tendsto (hF_cont ¬∑ |>.restrict)\n    (fun _ _ h x ‚Ü¶ hF_mono _ x.2 h) hf.restrict (fun x ‚Ü¶ h_tendsto x x.2)\n\n"}
{"name":"Monotone.tendstoUniformly_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≥ : Preorder Œπ\ninst‚úù¬≤ : TopologicalSpace Œ±\ninst‚úù¬π : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\ninst‚úù : CompactSpace Œ±\nhF_cont : ‚àÄ (i : Œπ), Continuous (F i)\nhF_mono : Monotone F\nhf : Continuous f\nh_tendsto : ‚àÄ (x : Œ±), Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoUniformly F f Filter.atTop","decl":"/-- **Dini's theorem**: if `F n` is a monotone increasing collection of continuous functions on a\ncompact space converging pointwise to a continuous function `f`, then `F n` converges uniformly to\n`f`. -/\nlemma tendstoUniformly_of_forall_tendsto [CompactSpace Œ±] (hF_cont : ‚àÄ i, Continuous (F i))\n    (hF_mono : Monotone F) (hf : Continuous f) (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoUniformly F f atTop :=\n  tendstoLocallyUniformly_iff_tendstoUniformly_of_compactSpace.mp <|\n    tendstoLocallyUniformly_of_forall_tendsto hF_cont hF_mono hf h_tendsto\n\n"}
{"name":"Monotone.tendstoUniformlyOn_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\ns : Set Œ±\nhs : IsCompact s\nhF_cont : ‚àÄ (i : Œπ), ContinuousOn (F i) s\nhF_mono : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Monotone fun x_1 => F x_1 x\nhf : ContinuousOn f s\nh_tendsto : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoUniformlyOn F f Filter.atTop s","decl":"/-- **Dini's theorem**: if `F n` is a monotone increasing collection of continuous functions on a\ncompact set `s` converging pointwise to a continuous function `f`, then `F n` converges uniformly\nto `f`. -/\nlemma tendstoUniformlyOn_of_forall_tendsto {s : Set Œ±} (hs : IsCompact s)\n    (hF_cont : ‚àÄ i, ContinuousOn (F i) s) (hF_mono : ‚àÄ x ‚àà s, Monotone (F ¬∑ x))\n    (hf : ContinuousOn f s) (h_tendsto : ‚àÄ x ‚àà s, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoUniformlyOn F f atTop s :=\n  tendstoLocallyUniformlyOn_iff_tendstoUniformlyOn_of_compact hs |>.mp <|\n    tendstoLocallyUniformlyOn_of_forall_tendsto hF_cont hF_mono hf h_tendsto\n\n"}
{"name":"Antitone.tendstoLocallyUniformly_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\nhF_cont : ‚àÄ (i : Œπ), Continuous (F i)\nhF_anti : Antitone F\nhf : Continuous f\nh_tendsto : ‚àÄ (x : Œ±), Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoLocallyUniformly F f Filter.atTop","decl":"/-- **Dini's theorem**: if `F n` is a monotone decreasing collection of continuous functions on a\nconverging pointwise to a continuous function `f`, then `F n` converges locally uniformly to `f`. -/\nlemma tendstoLocallyUniformly_of_forall_tendsto\n    (hF_cont : ‚àÄ i, Continuous (F i)) (hF_anti : Antitone F) (hf : Continuous f)\n    (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoLocallyUniformly F f atTop :=\n  Monotone.tendstoLocallyUniformly_of_forall_tendsto (G := G·µí·µà) hF_cont hF_anti hf h_tendsto\n\n"}
{"name":"Antitone.tendstoLocallyUniformlyOn_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\ns : Set Œ±\nhF_cont : ‚àÄ (i : Œπ), ContinuousOn (F i) s\nhF_anti : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Antitone fun x_1 => F x_1 x\nhf : ContinuousOn f s\nh_tendsto : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoLocallyUniformlyOn F f Filter.atTop s","decl":"/-- **Dini's theorem**: if `F n` is a monotone decreasing collection of continuous functions on a\nset `s` converging pointwise to a continuous function `f`, then `F n` converges locally uniformly\nto `f`. -/\nlemma tendstoLocallyUniformlyOn_of_forall_tendsto {s : Set Œ±}\n    (hF_cont : ‚àÄ i, ContinuousOn (F i) s) (hF_anti : ‚àÄ x ‚àà s, Antitone (F ¬∑ x))\n    (hf : ContinuousOn f s) (h_tendsto : ‚àÄ x ‚àà s, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoLocallyUniformlyOn F f atTop s :=\n  Monotone.tendstoLocallyUniformlyOn_of_forall_tendsto (G := G·µí·µà) hF_cont hF_anti hf h_tendsto\n\n"}
{"name":"Antitone.tendstoUniformly_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≥ : Preorder Œπ\ninst‚úù¬≤ : TopologicalSpace Œ±\ninst‚úù¬π : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\ninst‚úù : CompactSpace Œ±\nhF_cont : ‚àÄ (i : Œπ), Continuous (F i)\nhF_anti : Antitone F\nhf : Continuous f\nh_tendsto : ‚àÄ (x : Œ±), Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoUniformly F f Filter.atTop","decl":"/-- **Dini's theorem**: if `F n` is a monotone decreasing collection of continuous functions on a\ncompact space converging pointwise to a continuous function `f`, then `F n` converges uniformly\nto `f`. -/\nlemma tendstoUniformly_of_forall_tendsto [CompactSpace Œ±] (hF_cont : ‚àÄ i, Continuous (F i))\n    (hF_anti : Antitone F) (hf : Continuous f) (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoUniformly F f atTop :=\n  Monotone.tendstoUniformly_of_forall_tendsto (G := G·µí·µà) hF_cont hF_anti hf h_tendsto\n\n"}
{"name":"Antitone.tendstoUniformlyOn_of_forall_tendsto","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí Œ± ‚Üí G\nf : Œ± ‚Üí G\ns : Set Œ±\nhs : IsCompact s\nhF_cont : ‚àÄ (i : Œπ), ContinuousOn (F i) s\nhF_anti : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Antitone fun x_1 => F x_1 x\nhf : ContinuousOn f s\nh_tendsto : ‚àÄ (x : Œ±), Membership.mem s x ‚Üí Filter.Tendsto (fun x_1 => F x_1 x) Filter.atTop (nhds (f x))\n‚ä¢ TendstoUniformlyOn F f Filter.atTop s","decl":"/-- **Dini's theorem**: if `F n` is a monotone decreasing collection of continuous functions on a\ncompact set `s` converging pointwise to a continuous `f`, then `F n` converges uniformly to `f`. -/\nlemma tendstoUniformlyOn_of_forall_tendsto {s : Set Œ±} (hs : IsCompact s)\n    (hF_cont : ‚àÄ i, ContinuousOn (F i) s) (hF_anti : ‚àÄ x ‚àà s, Antitone (F ¬∑ x))\n    (hf : ContinuousOn f s) (h_tendsto : ‚àÄ x ‚àà s, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    TendstoUniformlyOn F f atTop s :=\n  Monotone.tendstoUniformlyOn_of_forall_tendsto (G := G·µí·µà) hs hF_cont hF_anti hf h_tendsto\n\n"}
{"name":"ContinuousMap.tendsto_of_monotone_of_pointwise","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí ContinuousMap Œ± G\nf : ContinuousMap Œ± G\nhF_mono : Monotone F\nh_tendsto : ‚àÄ (x : Œ±), Filter.Tendsto (fun x_1 => (F x_1) x) Filter.atTop (nhds (f x))\n‚ä¢ Filter.Tendsto F Filter.atTop (nhds f)","decl":"/-- **Dini's theorem**: if `F n` is a monotone increasing collection of continuous functions\nconverging pointwise to a continuous function `f`, then `F n` converges to `f` in the\ncompact-open topology. -/\nlemma tendsto_of_monotone_of_pointwise (hF_mono : Monotone F)\n    (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    Tendsto F atTop (ùìù f) :=\n  tendsto_of_tendstoLocallyUniformly <|\n    hF_mono.tendstoLocallyUniformly_of_forall_tendsto (F ¬∑ |>.continuous) f.continuous h_tendsto\n\n"}
{"name":"ContinuousMap.tendsto_of_antitone_of_pointwise","module":"Mathlib.Topology.UniformSpace.Dini","initialProofState":"Œπ : Type u_1\nŒ± : Type u_2\nG : Type u_3\ninst‚úù¬≤ : Preorder Œπ\ninst‚úù¬π : TopologicalSpace Œ±\ninst‚úù : NormedLatticeAddCommGroup G\nF : Œπ ‚Üí ContinuousMap Œ± G\nf : ContinuousMap Œ± G\nhF_anti : Antitone F\nh_tendsto : ‚àÄ (x : Œ±), Filter.Tendsto (fun x_1 => (F x_1) x) Filter.atTop (nhds (f x))\n‚ä¢ Filter.Tendsto F Filter.atTop (nhds f)","decl":"/-- **Dini's theorem**: if `F n` is a monotone decreasing collection of continuous functions\nconverging pointwise to a continuous function `f`, then `F n` converges to `f` in the\ncompact-open topology. -/\nlemma tendsto_of_antitone_of_pointwise (hF_anti : Antitone F)\n    (h_tendsto : ‚àÄ x, Tendsto (F ¬∑ x) atTop (ùìù (f x))) :\n    Tendsto F atTop (ùìù f) :=\n  tendsto_of_monotone_of_pointwise (G := G·µí·µà) hF_anti h_tendsto\n\n"}
