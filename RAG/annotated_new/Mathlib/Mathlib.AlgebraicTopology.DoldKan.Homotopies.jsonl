{"name":"AlgebraicTopology.DoldKan.c_mk","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"i j : Nat\nh : Eq (HAdd.hAdd j 1) i\n⊢ AlgebraicTopology.DoldKan.c.Rel i j","decl":"/-- Helper when we need some `c.rel i j` (i.e. `ComplexShape.down ℕ`),\ne.g. `c_mk n (n+1) rfl` -/\ntheorem c_mk (i j : ℕ) (h : j + 1 = i) : c.Rel i j :=\n  ComplexShape.down_mk i j h\n\n"}
{"name":"AlgebraicTopology.DoldKan.cs_down_0_not_rel_left","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"j : Nat\n⊢ Not (AlgebraicTopology.DoldKan.c.Rel 0 j)","decl":"/-- This lemma is meant to be used with `nullHomotopicMap'_f_of_not_rel_left` -/\ntheorem cs_down_0_not_rel_left (j : ℕ) : ¬c.Rel 0 j := by\n  intro hj\n  dsimp at hj\n  apply Nat.not_succ_le_zero j\n  rw [Nat.succ_eq_add_one, hj]\n\n"}
{"name":"AlgebraicTopology.DoldKan.hσ'_eq_zero","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nX : CategoryTheory.SimplicialObject C\nq n m : Nat\nhnq : LT.lt n q\nhnm : AlgebraicTopology.DoldKan.c.Rel m n\n⊢ Eq (AlgebraicTopology.DoldKan.hσ' q n m hnm) 0","decl":"theorem hσ'_eq_zero {q n m : ℕ} (hnq : n < q) (hnm : c.Rel m n) :\n    (hσ' q n m hnm : X _[n] ⟶ X _[m]) = 0 := by\n  simp only [hσ', hσ]\n  split_ifs\n  exact zero_comp\n\n"}
{"name":"AlgebraicTopology.DoldKan.hσ'_eq","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nX : CategoryTheory.SimplicialObject C\nq n a m : Nat\nha : Eq n (HAdd.hAdd a q)\nhnm : AlgebraicTopology.DoldKan.c.Rel m n\n⊢ Eq (AlgebraicTopology.DoldKan.hσ' q n m hnm) (CategoryTheory.CategoryStruct.comp (HSMul.hSMul (HPow.hPow (-1) a) (X.σ ⟨a, ⋯⟩)) (CategoryTheory.eqToHom ⋯))","decl":"theorem hσ'_eq {q n a m : ℕ} (ha : n = a + q) (hnm : c.Rel m n) :\n    (hσ' q n m hnm : X _[n] ⟶ X _[m]) =\n      ((-1 : ℤ) ^ a • X.σ ⟨a, Nat.lt_succ_iff.mpr (Nat.le.intro (Eq.symm ha))⟩) ≫\n        eqToHom (by congr) := by\n  simp only [hσ', hσ]\n  split_ifs\n  · omega\n  · have h' := tsub_eq_of_eq_add ha\n    congr\n\n"}
{"name":"AlgebraicTopology.DoldKan.hσ'_eq'","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nX : CategoryTheory.SimplicialObject C\nq n a : Nat\nha : Eq n (HAdd.hAdd a q)\n⊢ Eq (AlgebraicTopology.DoldKan.hσ' q n (HAdd.hAdd n 1) ⋯) (HSMul.hSMul (HPow.hPow (-1) a) (X.σ ⟨a, ⋯⟩))","decl":"theorem hσ'_eq' {q n a : ℕ} (ha : n = a + q) :\n    (hσ' q n (n + 1) rfl : X _[n] ⟶ X _[n + 1]) =\n      (-1 : ℤ) ^ a • X.σ ⟨a, Nat.lt_succ_iff.mpr (Nat.le.intro (Eq.symm ha))⟩ := by\n  rw [hσ'_eq ha rfl, eqToHom_refl, comp_id]\n\n"}
{"name":"AlgebraicTopology.DoldKan.Hσ_eq_zero","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nX : CategoryTheory.SimplicialObject C\nq : Nat\n⊢ Eq ((AlgebraicTopology.DoldKan.Hσ q).f 0) 0","decl":"/-- In degree `0`, the null homotopic map `Hσ` is zero. -/\ntheorem Hσ_eq_zero (q : ℕ) : (Hσ q : K[X] ⟶ K[X]).f 0 = 0 := by\n  unfold Hσ\n  rw [nullHomotopicMap'_f_of_not_rel_left (c_mk 1 0 rfl) cs_down_0_not_rel_left]\n  rcases q with (_|q)\n  · rw [hσ'_eq (show 0 = 0 + 0 by rfl) (c_mk 1 0 rfl)]\n    simp only [pow_zero, Fin.mk_zero, one_zsmul, eqToHom_refl, Category.comp_id]\n    erw [ChainComplex.of_d]\n    rw [AlternatingFaceMapComplex.objD, Fin.sum_univ_two, Fin.val_zero, Fin.val_one, pow_zero,\n      pow_one, one_smul, neg_smul, one_smul, comp_add, comp_neg, add_neg_eq_zero]\n    erw [δ_comp_σ_self, δ_comp_σ_succ]\n  · rw [hσ'_eq_zero (Nat.succ_pos q) (c_mk 1 0 rfl), zero_comp]\n\n"}
{"name":"AlgebraicTopology.DoldKan.hσ'_naturality","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝¹ : CategoryTheory.Category.{u_2, u_1} C\ninst✝ : CategoryTheory.Preadditive C\nq n m : Nat\nhnm : AlgebraicTopology.DoldKan.c.Rel m n\nX Y : CategoryTheory.SimplicialObject C\nf : Quiver.Hom X Y\n⊢ Eq (CategoryTheory.CategoryStruct.comp (f.app { unop := SimplexCategory.mk n }) (AlgebraicTopology.DoldKan.hσ' q n m hnm)) (CategoryTheory.CategoryStruct.comp (AlgebraicTopology.DoldKan.hσ' q n m hnm) (f.app { unop := SimplexCategory.mk m }))","decl":"/-- The maps `hσ' q n m hnm` are natural on the simplicial object -/\ntheorem hσ'_naturality (q : ℕ) (n m : ℕ) (hnm : c.Rel m n) {X Y : SimplicialObject C} (f : X ⟶ Y) :\n    f.app (op [n]) ≫ hσ' q n m hnm = hσ' q n m hnm ≫ f.app (op [m]) := by\n  have h : n + 1 = m := hnm\n  subst h\n  simp only [hσ', eqToHom_refl, comp_id]\n  unfold hσ\n  split_ifs\n  · rw [zero_comp, comp_zero]\n  · simp\n\n"}
{"name":"AlgebraicTopology.DoldKan.map_hσ'","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝⁴ : CategoryTheory.Category.{u_4, u_1} C\ninst✝³ : CategoryTheory.Preadditive C\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_3, u_2} D\ninst✝¹ : CategoryTheory.Preadditive D\nG : CategoryTheory.Functor C D\ninst✝ : G.Additive\nX : CategoryTheory.SimplicialObject C\nq n m : Nat\nhnm : AlgebraicTopology.DoldKan.c.Rel m n\n⊢ Eq (AlgebraicTopology.DoldKan.hσ' q n m hnm) (G.map (AlgebraicTopology.DoldKan.hσ' q n m hnm))","decl":"/-- The maps `hσ' q n m hnm` are compatible with the application of additive functors. -/\ntheorem map_hσ' {D : Type*} [Category D] [Preadditive D] (G : C ⥤ D) [G.Additive]\n    (X : SimplicialObject C) (q n m : ℕ) (hnm : c.Rel m n) :\n    (hσ' q n m hnm : K[((whiskering _ _).obj G).obj X].X n ⟶ _) =\n      G.map (hσ' q n m hnm : K[X].X n ⟶ _) := by\n  unfold hσ' hσ\n  split_ifs\n  · simp only [Functor.map_zero, zero_comp]\n  · simp only [eqToHom_map, Functor.map_comp, Functor.map_zsmul]\n    rfl\n\n"}
{"name":"AlgebraicTopology.DoldKan.map_Hσ","module":"Mathlib.AlgebraicTopology.DoldKan.Homotopies","initialProofState":"C : Type u_1\ninst✝⁴ : CategoryTheory.Category.{u_4, u_1} C\ninst✝³ : CategoryTheory.Preadditive C\nD : Type u_2\ninst✝² : CategoryTheory.Category.{u_3, u_2} D\ninst✝¹ : CategoryTheory.Preadditive D\nG : CategoryTheory.Functor C D\ninst✝ : G.Additive\nX : CategoryTheory.SimplicialObject C\nq n : Nat\n⊢ Eq ((AlgebraicTopology.DoldKan.Hσ q).f n) (G.map ((AlgebraicTopology.DoldKan.Hσ q).f n))","decl":"/-- The null homotopic maps `Hσ` are compatible with the application of additive functors. -/\ntheorem map_Hσ {D : Type*} [Category D] [Preadditive D] (G : C ⥤ D) [G.Additive]\n    (X : SimplicialObject C) (q n : ℕ) :\n    (Hσ q : K[((whiskering C D).obj G).obj X] ⟶ _).f n = G.map ((Hσ q : K[X] ⟶ _).f n) := by\n  unfold Hσ\n  have eq := HomologicalComplex.congr_hom (map_nullHomotopicMap' G (@hσ' _ _ _ X q)) n\n  simp only [Functor.mapHomologicalComplex_map_f, ← map_hσ'] at eq\n  rw [eq]\n  let h := (Functor.congr_obj (map_alternatingFaceMapComplex G) X).symm\n  congr\n\n"}
