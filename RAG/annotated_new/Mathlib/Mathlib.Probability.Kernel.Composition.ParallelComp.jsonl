{"name":"ProbabilityTheory.Kernel.parallelComp_apply","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\nx : Prod α γ\n⊢ Eq ((κ.parallelComp η) x) ((κ x.1).prod (η x.2))","decl":"lemma parallelComp_apply (κ : Kernel α β) [IsSFiniteKernel κ]\n    (η : Kernel γ δ) [IsSFiniteKernel η] (x : α × γ) :\n    (κ ∥ₖ η) x = (κ x.1).prod (η x.2) := by\n  rw [parallelComp, prod_apply, prodMkRight_apply, prodMkLeft_apply]\n\n"}
{"name":"ProbabilityTheory.Kernel.lintegral_parallelComp","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\nac : Prod α γ\ng : Prod β δ → ENNReal\nhg : Measurable g\n⊢ Eq (MeasureTheory.lintegral ((κ.parallelComp η) ac) fun bd => g bd) (MeasureTheory.lintegral (κ ac.1) fun b => MeasureTheory.lintegral (η ac.2) fun d => g { fst := b, snd := d })","decl":"lemma lintegral_parallelComp (κ : Kernel α β) [IsSFiniteKernel κ]\n    (η : Kernel γ δ) [IsSFiniteKernel η]\n    (ac : α × γ) {g : β × δ → ℝ≥0∞} (hg : Measurable g) :\n    ∫⁻ bd, g bd ∂(κ ∥ₖ η) ac = ∫⁻ b, ∫⁻ d, g (b, d) ∂η ac.2 ∂κ ac.1 := by\n  rw [parallelComp, lintegral_prod _ _ _ hg]\n  simp\n\n"}
{"name":"ProbabilityTheory.Kernel.instIsSFiniteKernelProdParallelComp","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\nη : ProbabilityTheory.Kernel γ δ\n⊢ ProbabilityTheory.IsSFiniteKernel (κ.parallelComp η)","decl":"instance (κ : Kernel α β) (η : Kernel γ δ) : IsSFiniteKernel (κ ∥ₖ η) := by\n  rw [parallelComp]; infer_instance\n\n"}
{"name":"ProbabilityTheory.Kernel.instIsFiniteKernelProdParallelComp","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ ProbabilityTheory.IsFiniteKernel (κ.parallelComp η)","decl":"instance (κ : Kernel α β) [IsFiniteKernel κ] (η : Kernel γ δ) [IsFiniteKernel η] :\n    IsFiniteKernel (κ ∥ₖ η) := by\n  rw [parallelComp]; infer_instance\n\n"}
{"name":"ProbabilityTheory.Kernel.instIsMarkovKernelProdParallelComp","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsMarkovKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsMarkovKernel η\n⊢ ProbabilityTheory.IsMarkovKernel (κ.parallelComp η)","decl":"instance (κ : Kernel α β) [IsMarkovKernel κ] (η : Kernel γ δ) [IsMarkovKernel η] :\n    IsMarkovKernel (κ ∥ₖ η) := by\n  rw [parallelComp]; infer_instance\n\n"}
{"name":"ProbabilityTheory.Kernel.instIsZeroOrMarkovKernelProdParallelComp","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsZeroOrMarkovKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsZeroOrMarkovKernel η\n⊢ ProbabilityTheory.IsZeroOrMarkovKernel (κ.parallelComp η)","decl":"instance (κ : Kernel α β) [IsZeroOrMarkovKernel κ] (η : Kernel γ δ) [IsZeroOrMarkovKernel η] :\n    IsZeroOrMarkovKernel (κ ∥ₖ η) := by\n  rw [parallelComp]; infer_instance\n\n"}
{"name":"ProbabilityTheory.Kernel.parallelComp_comp_copy","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq ((κ.parallelComp η).comp (ProbabilityTheory.Kernel.copy α)) (κ.prod η)","decl":"lemma parallelComp_comp_copy (κ : Kernel α β) [IsSFiniteKernel κ]\n    (η : Kernel α γ) [IsSFiniteKernel η] :\n    (κ ∥ₖ η) ∘ₖ (copy α) = κ ×ₖ η := by\n  ext a s hs\n  simp_rw [prod_apply, comp_apply, copy_apply, Measure.bind_apply hs (Kernel.measurable _)]\n  rw [lintegral_dirac']\n  swap; · exact Kernel.measurable_coe _ hs\n  rw [parallelComp_apply]\n\n"}
{"name":"ProbabilityTheory.Kernel.swap_parallelComp","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nmδ : MeasurableSpace δ\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\nη : ProbabilityTheory.Kernel γ δ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq ((ProbabilityTheory.Kernel.swap β δ).comp (κ.parallelComp η)) ((η.parallelComp κ).comp (ProbabilityTheory.Kernel.swap α γ))","decl":"lemma swap_parallelComp {κ : Kernel α β} [IsSFiniteKernel κ]\n    {η : Kernel γ δ} [IsSFiniteKernel η] :\n    (swap β δ) ∘ₖ (κ ∥ₖ η) = (η ∥ₖ κ) ∘ₖ (swap α γ) := by\n  rw [parallelComp, swap_prod, parallelComp]\n  ext ac s hs\n  rw [comp_apply, swap_apply, Measure.bind_apply hs (Kernel.measurable _),\n    lintegral_dirac' _ (Kernel.measurable_coe _ hs), prod_apply, prod_apply, prodMkLeft_apply,\n    prodMkLeft_apply, prodMkRight_apply, prodMkRight_apply, Prod.fst_swap, Prod.snd_swap]\n\n"}
{"name":"ProbabilityTheory.Kernel.deterministic_comp_copy","module":"Mathlib.Probability.Kernel.Composition.ParallelComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nf : α → β\nhf : Measurable f\n⊢ Eq (((ProbabilityTheory.Kernel.deterministic f hf).parallelComp (ProbabilityTheory.Kernel.deterministic f hf)).comp (ProbabilityTheory.Kernel.copy α)) ((ProbabilityTheory.Kernel.copy β).comp (ProbabilityTheory.Kernel.deterministic f hf))","decl":"/-- For a deterministic kernel, copying then applying the kernel to the two copies is the same\nas first applying the kernel then copying. -/\nlemma deterministic_comp_copy {f : α → β} (hf : Measurable f) :\n    (Kernel.deterministic f hf ∥ₖ Kernel.deterministic f hf) ∘ₖ Kernel.copy α\n      = Kernel.copy β ∘ₖ Kernel.deterministic f hf := by\n  simp_rw [Kernel.parallelComp_comp_copy, Kernel.deterministic_prod_deterministic,\n    Kernel.copy, Kernel.deterministic_comp_deterministic, Function.comp_def]\n\n"}
