{"name":"Nat.cast_choose","module":"Mathlib.Data.Nat.Choose.Cast","initialProofState":"K : Type u_1\ninst✝¹ : DivisionRing K\ninst✝ : CharZero K\na b : Nat\nh : LE.le a b\n⊢ Eq (↑(b.choose a)) (HDiv.hDiv (↑b.factorial) (HMul.hMul ↑a.factorial ↑(HSub.hSub b a).factorial))","decl":"theorem cast_choose {a b : ℕ} (h : a ≤ b) : (b.choose a : K) = b ! / (a ! * (b - a)!) := by\n  have : ∀ {n : ℕ}, (n ! : K) ≠ 0 := Nat.cast_ne_zero.2 (factorial_ne_zero _)\n  rw [eq_div_iff_mul_eq (mul_ne_zero this this)]\n  rw_mod_cast [← mul_assoc, choose_mul_factorial_mul_factorial h]\n\n"}
{"name":"Nat.cast_add_choose","module":"Mathlib.Data.Nat.Choose.Cast","initialProofState":"K : Type u_1\ninst✝¹ : DivisionRing K\ninst✝ : CharZero K\na b : Nat\n⊢ Eq (↑((HAdd.hAdd a b).choose a)) (HDiv.hDiv (↑(HAdd.hAdd a b).factorial) (HMul.hMul ↑a.factorial ↑b.factorial))","decl":"theorem cast_add_choose {a b : ℕ} : ((a + b).choose a : K) = (a + b)! / (a ! * b !) := by\n  rw [cast_choose K (_root_.le_add_right le_rfl), add_tsub_cancel_left]\n\n"}
{"name":"Nat.cast_choose_eq_ascPochhammer_div","module":"Mathlib.Data.Nat.Choose.Cast","initialProofState":"K : Type u_1\ninst✝¹ : DivisionRing K\ninst✝ : CharZero K\na b : Nat\n⊢ Eq (↑(a.choose b)) (HDiv.hDiv (Polynomial.eval (↑(HSub.hSub a (HSub.hSub b 1))) (ascPochhammer K b)) ↑b.factorial)","decl":"theorem cast_choose_eq_ascPochhammer_div (a b : ℕ) :\n    (a.choose b : K) = (ascPochhammer K b).eval ↑(a - (b - 1)) / b ! := by\n  rw [eq_div_iff_mul_eq (cast_ne_zero.2 b.factorial_ne_zero : (b ! : K) ≠ 0), ← cast_mul,\n    mul_comm, ← descFactorial_eq_factorial_mul_choose, ← cast_descFactorial]\n\n"}
{"name":"Nat.cast_choose_two","module":"Mathlib.Data.Nat.Choose.Cast","initialProofState":"K : Type u_1\ninst✝¹ : DivisionRing K\ninst✝ : CharZero K\na : Nat\n⊢ Eq (↑(a.choose 2)) (HDiv.hDiv (HMul.hMul (↑a) (HSub.hSub (↑a) 1)) 2)","decl":"theorem cast_choose_two (a : ℕ) : (a.choose 2 : K) = a * (a - 1) / 2 := by\n  rw [← cast_descFactorial_two, descFactorial_eq_factorial_mul_choose, factorial_two, mul_comm,\n    cast_mul, cast_two, eq_div_iff_mul_eq (two_ne_zero : (2 : K) ≠ 0)]\n\n"}
