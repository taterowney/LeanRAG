{"name":"HasStrictFDerivAt.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜') E F\nx : E\nh : HasStrictFDerivAt f f' x\n⊢ HasStrictFDerivAt f (ContinuousLinearMap.restrictScalars 𝕜 f') x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.restrictScalars (h : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt f (f'.restrictScalars 𝕜) x :=\n  .of_isLittleO h.isLittleO\n\n"}
{"name":"HasFDerivAtFilter.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜') E F\nx : E\nL : Filter E\nh : HasFDerivAtFilter f f' x L\n⊢ HasFDerivAtFilter f (ContinuousLinearMap.restrictScalars 𝕜 f') x L","decl":"theorem HasFDerivAtFilter.restrictScalars {L} (h : HasFDerivAtFilter f f' x L) :\n    HasFDerivAtFilter f (f'.restrictScalars 𝕜) x L :=\n  .of_isLittleO h.isLittleO\n\n"}
{"name":"HasFDerivAt.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜') E F\nx : E\nh : HasFDerivAt f f' x\n⊢ HasFDerivAt f (ContinuousLinearMap.restrictScalars 𝕜 f') x","decl":"@[fun_prop]\ntheorem HasFDerivAt.restrictScalars (h : HasFDerivAt f f' x) :\n    HasFDerivAt f (f'.restrictScalars 𝕜) x :=\n  .of_isLittleO h.isLittleO\n\n"}
{"name":"HasFDerivWithinAt.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜') E F\ns : Set E\nx : E\nh : HasFDerivWithinAt f f' s x\n⊢ HasFDerivWithinAt f (ContinuousLinearMap.restrictScalars 𝕜 f') s x","decl":"@[fun_prop]\ntheorem HasFDerivWithinAt.restrictScalars (h : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt f (f'.restrictScalars 𝕜) s x :=\n  .of_isLittleO h.isLittleO\n\n"}
{"name":"DifferentiableAt.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nx : E\nh : DifferentiableAt 𝕜' f x\n⊢ DifferentiableAt 𝕜 f x","decl":"@[fun_prop]\ntheorem DifferentiableAt.restrictScalars (h : DifferentiableAt 𝕜' f x) : DifferentiableAt 𝕜 f x :=\n  (h.hasFDerivAt.restrictScalars 𝕜).differentiableAt\n\n"}
{"name":"DifferentiableWithinAt.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\ns : Set E\nx : E\nh : DifferentiableWithinAt 𝕜' f s x\n⊢ DifferentiableWithinAt 𝕜 f s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.restrictScalars (h : DifferentiableWithinAt 𝕜' f s x) :\n    DifferentiableWithinAt 𝕜 f s x :=\n  (h.hasFDerivWithinAt.restrictScalars 𝕜).differentiableWithinAt\n\n"}
{"name":"DifferentiableOn.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\ns : Set E\nh : DifferentiableOn 𝕜' f s\n⊢ DifferentiableOn 𝕜 f s","decl":"@[fun_prop]\ntheorem DifferentiableOn.restrictScalars (h : DifferentiableOn 𝕜' f s) : DifferentiableOn 𝕜 f s :=\n  fun x hx => (h x hx).restrictScalars 𝕜\n\n"}
{"name":"Differentiable.restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nh : Differentiable 𝕜' f\n⊢ Differentiable 𝕜 f","decl":"@[fun_prop]\ntheorem Differentiable.restrictScalars (h : Differentiable 𝕜' f) : Differentiable 𝕜 f := fun x =>\n  (h x).restrictScalars 𝕜\n\n"}
{"name":"HasFDerivWithinAt.of_restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜') E F\ns : Set E\nx : E\ng' : ContinuousLinearMap (RingHom.id 𝕜) E F\nh : HasFDerivWithinAt f g' s x\nH : Eq (ContinuousLinearMap.restrictScalars 𝕜 f') g'\n⊢ HasFDerivWithinAt f f' s x","decl":"@[fun_prop]\ntheorem HasFDerivWithinAt.of_restrictScalars {g' : E →L[𝕜] F} (h : HasFDerivWithinAt f g' s x)\n    (H : f'.restrictScalars 𝕜 = g') : HasFDerivWithinAt f f' s x := by\n  rw [← H] at h\n  exact .of_isLittleO h.isLittleO\n\n"}
{"name":"hasFDerivAt_of_restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜') E F\nx : E\ng' : ContinuousLinearMap (RingHom.id 𝕜) E F\nh : HasFDerivAt f g' x\nH : Eq (ContinuousLinearMap.restrictScalars 𝕜 f') g'\n⊢ HasFDerivAt f f' x","decl":"@[fun_prop]\ntheorem hasFDerivAt_of_restrictScalars {g' : E →L[𝕜] F} (h : HasFDerivAt f g' x)\n    (H : f'.restrictScalars 𝕜 = g') : HasFDerivAt f f' x := by\n  rw [← H] at h\n  exact .of_isLittleO h.isLittleO\n\n"}
{"name":"DifferentiableAt.fderiv_restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nx : E\nh : DifferentiableAt 𝕜' f x\n⊢ Eq (fderiv 𝕜 f x) (ContinuousLinearMap.restrictScalars 𝕜 (fderiv 𝕜' f x))","decl":"theorem DifferentiableAt.fderiv_restrictScalars (h : DifferentiableAt 𝕜' f x) :\n    fderiv 𝕜 f x = (fderiv 𝕜' f x).restrictScalars 𝕜 :=\n  (h.hasFDerivAt.restrictScalars 𝕜).fderiv\n\n"}
{"name":"differentiableWithinAt_iff_restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\ns : Set E\nx : E\nhf : DifferentiableWithinAt 𝕜 f s x\nhs : UniqueDiffWithinAt 𝕜 s x\n⊢ Iff (DifferentiableWithinAt 𝕜' f s x) (Exists fun g' => Eq (ContinuousLinearMap.restrictScalars 𝕜 g') (fderivWithin 𝕜 f s x))","decl":"theorem differentiableWithinAt_iff_restrictScalars (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hs : UniqueDiffWithinAt 𝕜 s x) : DifferentiableWithinAt 𝕜' f s x ↔\n      ∃ g' : E →L[𝕜'] F, g'.restrictScalars 𝕜 = fderivWithin 𝕜 f s x := by\n  constructor\n  · rintro ⟨g', hg'⟩\n    exact ⟨g', hs.eq (hg'.restrictScalars 𝕜) hf.hasFDerivWithinAt⟩\n  · rintro ⟨f', hf'⟩\n    exact ⟨f', hf.hasFDerivWithinAt.of_restrictScalars 𝕜 hf'⟩\n\n"}
{"name":"differentiableAt_iff_restrictScalars","module":"Mathlib.Analysis.Calculus.FDeriv.RestrictScalars","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\n𝕜' : Type u_2\ninst✝⁹ : NontriviallyNormedField 𝕜'\ninst✝⁸ : NormedAlgebra 𝕜 𝕜'\nE : Type u_3\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : NormedSpace 𝕜' E\ninst✝⁴ : IsScalarTower 𝕜 𝕜' E\nF : Type u_4\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nf : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\n⊢ Iff (DifferentiableAt 𝕜' f x) (Exists fun g' => Eq (ContinuousLinearMap.restrictScalars 𝕜 g') (fderiv 𝕜 f x))","decl":"theorem differentiableAt_iff_restrictScalars (hf : DifferentiableAt 𝕜 f x) :\n    DifferentiableAt 𝕜' f x ↔ ∃ g' : E →L[𝕜'] F, g'.restrictScalars 𝕜 = fderiv 𝕜 f x := by\n  rw [← differentiableWithinAt_univ, ← fderivWithin_univ]\n  exact\n    differentiableWithinAt_iff_restrictScalars 𝕜 hf.differentiableWithinAt uniqueDiffWithinAt_univ\n\n"}
