{"name":"Rel.gc_leftDual_rightDual","module":"Mathlib.Order.Rel.GaloisConnection","initialProofState":"α : Type u_1\nβ : Type u_2\nR : Rel α β\n⊢ GaloisConnection (Function.comp (⇑OrderDual.toDual) R.leftDual) (Function.comp R.rightDual ⇑OrderDual.ofDual)","decl":"/-- The pair of functions `toDual ∘ leftDual` and `rightDual ∘ ofDual` forms a Galois connection. -/\ntheorem gc_leftDual_rightDual : GaloisConnection (toDual ∘ R.leftDual) (R.rightDual ∘ ofDual) :=\n  fun _ _ ↦ ⟨fun h _ ha _ hb ↦ h (by simpa) ha, fun h _ hb _ ha ↦ h (by simpa) hb⟩\n\n"}
{"name":"Rel.leftDual_mem_rightFixedPoint","module":"Mathlib.Order.Rel.GaloisConnection","initialProofState":"α : Type u_1\nβ : Type u_2\nR : Rel α β\nJ : Set α\n⊢ Membership.mem R.rightFixedPoints (R.leftDual J)","decl":"/-- `leftDual` maps every element `J` to `rightFixedPoints`. -/\ntheorem leftDual_mem_rightFixedPoint (J : Set α) : R.leftDual J ∈ R.rightFixedPoints := by\n  apply le_antisymm\n  · apply R.gc_leftDual_rightDual.monotone_l; exact R.gc_leftDual_rightDual.le_u_l J\n  · exact R.gc_leftDual_rightDual.l_u_le (R.leftDual J)\n\n"}
{"name":"Rel.rightDual_mem_leftFixedPoint","module":"Mathlib.Order.Rel.GaloisConnection","initialProofState":"α : Type u_1\nβ : Type u_2\nR : Rel α β\nI : Set β\n⊢ Membership.mem R.leftFixedPoints (R.rightDual I)","decl":"/-- `rightDual` maps every element `I` to `leftFixedPoints`. -/\ntheorem rightDual_mem_leftFixedPoint (I : Set β) : R.rightDual I ∈ R.leftFixedPoints := by\n  apply le_antisymm\n  · apply R.gc_leftDual_rightDual.monotone_u; exact R.gc_leftDual_rightDual.l_u_le I\n  · exact R.gc_leftDual_rightDual.le_u_l (R.rightDual I)\n\n"}
{"name":"Rel.rightDual_leftDual_le_of_le","module":"Mathlib.Order.Rel.GaloisConnection","initialProofState":"α : Type u_1\nβ : Type u_2\nR : Rel α β\nJ J' : Set α\nh : Membership.mem R.leftFixedPoints J'\nh₁ : LE.le J J'\n⊢ LE.le (R.rightDual (R.leftDual J)) J'","decl":"theorem rightDual_leftDual_le_of_le {J J' : Set α} (h : J' ∈ R.leftFixedPoints) (h₁ : J ≤ J') :\n    R.rightDual (R.leftDual J) ≤ J' := by\n  rw [← h]\n  apply R.gc_leftDual_rightDual.monotone_u\n  apply R.gc_leftDual_rightDual.monotone_l\n  exact h₁\n\n"}
{"name":"Rel.leftDual_rightDual_le_of_le","module":"Mathlib.Order.Rel.GaloisConnection","initialProofState":"α : Type u_1\nβ : Type u_2\nR : Rel α β\nI I' : Set β\nh : Membership.mem R.rightFixedPoints I'\nh₁ : LE.le I I'\n⊢ LE.le (R.leftDual (R.rightDual I)) I'","decl":"theorem leftDual_rightDual_le_of_le {I I' : Set β} (h : I' ∈ R.rightFixedPoints) (h₁ : I ≤ I') :\n    R.leftDual (R.rightDual I) ≤ I' := by\n  rw [← h]\n  apply R.gc_leftDual_rightDual.monotone_l\n  apply R.gc_leftDual_rightDual.monotone_u\n  exact h₁\n\n"}
