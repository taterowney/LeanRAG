{"name":"AddGroupFilterBasis.uniformAddGroup","module":"Mathlib.Topology.Algebra.UniformFilterBasis","initialProofState":"G : Type u_1\ninst✝ : AddCommGroup G\nB : AddGroupFilterBasis G\n⊢ UniformAddGroup G","decl":"/-- The uniform space structure associated to an abelian group filter basis via the associated\ntopological abelian group structure is compatible with its group structure. -/\nprotected theorem uniformAddGroup : @UniformAddGroup G B.uniformSpace _ :=\n  @comm_topologicalAddGroup_is_uniform G _ B.topology B.isTopologicalAddGroup\n\n"}
{"name":"AddGroupFilterBasis.cauchy_iff","module":"Mathlib.Topology.Algebra.UniformFilterBasis","initialProofState":"G : Type u_1\ninst✝ : AddCommGroup G\nB : AddGroupFilterBasis G\nF : Filter G\n⊢ Iff (Cauchy F) (And F.NeBot (∀ (U : Set G), Membership.mem B U → Exists fun M => And (Membership.mem F M) (∀ (x : G), Membership.mem M x → ∀ (y : G), Membership.mem M y → Membership.mem U (HSub.hSub y x))))","decl":"theorem cauchy_iff {F : Filter G} :\n    @Cauchy G B.uniformSpace F ↔\n      F.NeBot ∧ ∀ U ∈ B, ∃ M ∈ F, ∀ᵉ (x ∈ M) (y ∈ M), y - x ∈ U := by\n  letI := B.uniformSpace\n  haveI := B.uniformAddGroup\n  suffices F ×ˢ F ≤ uniformity G ↔ ∀ U ∈ B, ∃ M ∈ F, ∀ᵉ (x ∈ M) (y ∈ M), y - x ∈ U by\n    constructor <;> rintro ⟨h', h⟩ <;> refine ⟨h', ?_⟩ <;> [rwa [← this]; rwa [this]]\n  rw [uniformity_eq_comap_nhds_zero G, ← map_le_iff_le_comap]\n  change Tendsto _ _ _ ↔ _\n  simp [(basis_sets F).prod_self.tendsto_iff B.nhds_zero_hasBasis, @forall_swap (_ ∈ _) G]\n\n"}
