{"name":"RingAut.smul_def","module":"Mathlib.Algebra.Ring.Aut","initialProofState":"R : Type u_2\ninst✝ : Semiring R\nf : RingAut R\nr : R\n⊢ Eq (HSMul.hSMul f r) (f r)","decl":"@[simp]\nprotected theorem smul_def (f : RingAut R) (r : R) : f • r = f r :=\n  rfl\n\n"}
{"name":"RingAut.apply_faithfulSMul","module":"Mathlib.Algebra.Ring.Aut","initialProofState":"R : Type u_2\ninst✝ : Semiring R\n⊢ FaithfulSMul (RingAut R) R","decl":"instance apply_faithfulSMul : FaithfulSMul (RingAut R) R :=\n  ⟨RingEquiv.ext⟩\n\n"}
{"name":"MulSemiringAction.toRingAut_apply","module":"Mathlib.Algebra.Ring.Aut","initialProofState":"G : Type u_1\nR : Type u_2\ninst✝² : Group G\ninst✝¹ : Semiring R\ninst✝ : MulSemiringAction G R\nx : G\n⊢ Eq ((MulSemiringAction.toRingAut G R) x) (MulSemiringAction.toRingEquiv G R x)","decl":"/-- Each element of the group defines a ring automorphism.\n\nThis is a stronger version of `DistribMulAction.toAddAut` and\n`MulDistribMulAction.toMulAut`. -/\n@[simps]\ndef _root_.MulSemiringAction.toRingAut [MulSemiringAction G R] :\n    G →* RingAut R where\n  toFun := MulSemiringAction.toRingEquiv G R\n  map_mul' g h := RingEquiv.ext <| mul_smul g h\n  map_one' := RingEquiv.ext <| one_smul _\n\n"}
