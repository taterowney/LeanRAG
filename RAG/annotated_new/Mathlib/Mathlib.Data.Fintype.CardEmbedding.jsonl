{"name":"Fintype.card_embedding_eq_of_unique","module":"Mathlib.Data.Fintype.CardEmbedding","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : Unique α\ninst✝¹ : Fintype β\ninst✝ : Fintype (Function.Embedding α β)\n⊢ Eq (Fintype.card (Function.Embedding α β)) (Fintype.card β)","decl":"theorem card_embedding_eq_of_unique {α β : Type*} [Unique α] [Fintype β] [Fintype (α ↪ β)] :\n    ‖α ↪ β‖ = ‖β‖ :=\n  card_congr Equiv.uniqueEmbeddingEquivResult\n\n-- Establishes the cardinality of the type of all injections between two finite types.\n-- Porting note: `induction'` is broken so instead we make an ugly refine and `dsimp` a lot.\n"}
{"name":"Fintype.card_embedding_eq","module":"Mathlib.Data.Fintype.CardEmbedding","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nemb : Fintype (Function.Embedding α β)\n⊢ Eq (Fintype.card (Function.Embedding α β)) ((Fintype.card β).descFactorial (Fintype.card α))","decl":"@[simp]\ntheorem card_embedding_eq {α β : Type*} [Fintype α] [Fintype β] [emb : Fintype (α ↪ β)] :\n    ‖α ↪ β‖ = ‖β‖.descFactorial ‖α‖ := by\n  rw [Subsingleton.elim emb Embedding.fintype]\n  refine Fintype.induction_empty_option (P := fun t ↦ ‖t ↪ β‖ = ‖β‖.descFactorial ‖t‖)\n        (fun α₁ α₂ h₂ e ih ↦ ?_) (?_) (fun γ h ih ↦ ?_) α <;> dsimp only <;> clear! α\n  · letI := Fintype.ofEquiv _ e.symm\n    rw [← card_congr (Equiv.embeddingCongr e (Equiv.refl β)), ih, card_congr e]\n  · rw [card_pempty, Nat.descFactorial_zero, card_eq_one_iff]\n    exact ⟨Embedding.ofIsEmpty, fun x ↦ DFunLike.ext _ _ isEmptyElim⟩\n  · classical\n    dsimp only at ih\n    rw [card_option, Nat.descFactorial_succ, card_congr (Embedding.optionEmbeddingEquiv γ β),\n        card_sigma, ← ih]\n    simp only [Fintype.card_compl_set, Fintype.card_range, Finset.sum_const, Finset.card_univ,\n      Nat.nsmul_eq_mul, mul_comm]\n\n"}
{"name":"Fintype.card_embedding_eq_of_infinite","module":"Mathlib.Data.Fintype.CardEmbedding","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : Infinite α\ninst✝¹ : Finite β\ninst✝ : Fintype (Function.Embedding α β)\n⊢ Eq (Fintype.card (Function.Embedding α β)) 0","decl":"/-- The cardinality of embeddings from an infinite type to a finite type is zero.\nThis is a re-statement of the pigeonhole principle. -/\ntheorem card_embedding_eq_of_infinite {α β : Type*} [Infinite α] [Finite β] [Fintype (α ↪ β)] :\n    ‖α ↪ β‖ = 0 :=\n  card_eq_zero\n\n"}
