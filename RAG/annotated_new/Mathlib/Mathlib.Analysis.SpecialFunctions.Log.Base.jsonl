{"name":"Real.log_div_log","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\n⊢ Eq (HDiv.hDiv (Real.log x) (Real.log b)) (Real.logb b x)","decl":"theorem log_div_log : log x / log b = logb b x :=\n  rfl\n\n"}
{"name":"Real.logb_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\n⊢ Eq (Real.logb b 0) 0","decl":"@[simp]\ntheorem logb_zero : logb b 0 = 0 := by simp [logb]\n\n"}
{"name":"Real.logb_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\n⊢ Eq (Real.logb b 1) 0","decl":"@[simp]\ntheorem logb_one : logb b 1 = 0 := by simp [logb]\n\n"}
{"name":"Real.logb_zero_left","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"x : Real\n⊢ Eq (Real.logb 0 x) 0","decl":"theorem logb_zero_left : logb 0 x = 0 := by simp only [← log_div_log, log_zero, div_zero]\n\n"}
{"name":"Real.logb_zero_left_eq_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"⊢ Eq (Real.logb 0) 0","decl":"@[simp] theorem logb_zero_left_eq_zero : logb 0 = 0 := by ext; rw [logb_zero_left, Pi.zero_apply]\n\n"}
{"name":"Real.logb_one_left","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"x : Real\n⊢ Eq (Real.logb 1 x) 0","decl":"theorem logb_one_left : logb 1 x = 0 := by simp only [← log_div_log, log_one, div_zero]\n\n"}
{"name":"Real.logb_one_left_eq_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"⊢ Eq (Real.logb 1) 0","decl":"@[simp] theorem logb_one_left_eq_zero : logb 1 = 0 := by ext; rw [logb_one_left, Pi.zero_apply]\n\n"}
{"name":"Real.logb_self_eq_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ Eq (Real.logb b b) 1","decl":"@[simp]\nlemma logb_self_eq_one (hb : 1 < b) : logb b b = 1 :=\n  div_self (log_pos hb).ne'\n\n"}
{"name":"Real.logb_self_eq_one_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\n⊢ Iff (Eq (Real.logb b b) 1) (And (Ne b 0) (And (Ne b 1) (Ne b (-1))))","decl":"lemma logb_self_eq_one_iff : logb b b = 1 ↔ b ≠ 0 ∧ b ≠ 1 ∧ b ≠ -1 :=\n  Iff.trans ⟨fun h h' => by simp [logb, h'] at h, div_self⟩ log_ne_zero\n\n"}
{"name":"Real.logb_abs","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\n⊢ Eq (Real.logb b (abs x)) (Real.logb b x)","decl":"@[simp]\ntheorem logb_abs (x : ℝ) : logb b |x| = logb b x := by rw [logb, logb, log_abs]\n\n"}
{"name":"Real.logb_neg_eq_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\n⊢ Eq (Real.logb b (Neg.neg x)) (Real.logb b x)","decl":"@[simp]\ntheorem logb_neg_eq_logb (x : ℝ) : logb b (-x) = logb b x := by\n  rw [← logb_abs x, ← logb_abs (-x), abs_neg]\n\n"}
{"name":"Real.logb_mul","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhx : Ne x 0\nhy : Ne y 0\n⊢ Eq (Real.logb b (HMul.hMul x y)) (HAdd.hAdd (Real.logb b x) (Real.logb b y))","decl":"theorem logb_mul (hx : x ≠ 0) (hy : y ≠ 0) : logb b (x * y) = logb b x + logb b y := by\n  simp_rw [logb, log_mul hx hy, add_div]\n\n"}
{"name":"Real.logb_div","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhx : Ne x 0\nhy : Ne y 0\n⊢ Eq (Real.logb b (HDiv.hDiv x y)) (HSub.hSub (Real.logb b x) (Real.logb b y))","decl":"theorem logb_div (hx : x ≠ 0) (hy : y ≠ 0) : logb b (x / y) = logb b x - logb b y := by\n  simp_rw [logb, log_div hx hy, sub_div]\n\n"}
{"name":"Real.logb_inv","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\n⊢ Eq (Real.logb b (Inv.inv x)) (Neg.neg (Real.logb b x))","decl":"@[simp]\ntheorem logb_inv (x : ℝ) : logb b x⁻¹ = -logb b x := by simp [logb, neg_div]\n\n"}
{"name":"Real.inv_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b : Real\n⊢ Eq (Inv.inv (Real.logb a b)) (Real.logb b a)","decl":"theorem inv_logb (a b : ℝ) : (logb a b)⁻¹ = logb b a := by simp_rw [logb, inv_div]\n\n"}
{"name":"Real.inv_logb_mul_base","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b : Real\nh₁ : Ne a 0\nh₂ : Ne b 0\nc : Real\n⊢ Eq (Inv.inv (Real.logb (HMul.hMul a b) c)) (HAdd.hAdd (Inv.inv (Real.logb a c)) (Inv.inv (Real.logb b c)))","decl":"theorem inv_logb_mul_base {a b : ℝ} (h₁ : a ≠ 0) (h₂ : b ≠ 0) (c : ℝ) :\n    (logb (a * b) c)⁻¹ = (logb a c)⁻¹ + (logb b c)⁻¹ := by\n  simp_rw [inv_logb]; exact logb_mul h₁ h₂\n\n"}
{"name":"Real.inv_logb_div_base","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b : Real\nh₁ : Ne a 0\nh₂ : Ne b 0\nc : Real\n⊢ Eq (Inv.inv (Real.logb (HDiv.hDiv a b) c)) (HSub.hSub (Inv.inv (Real.logb a c)) (Inv.inv (Real.logb b c)))","decl":"theorem inv_logb_div_base {a b : ℝ} (h₁ : a ≠ 0) (h₂ : b ≠ 0) (c : ℝ) :\n    (logb (a / b) c)⁻¹ = (logb a c)⁻¹ - (logb b c)⁻¹ := by\n  simp_rw [inv_logb]; exact logb_div h₁ h₂\n\n"}
{"name":"Real.logb_mul_base","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b : Real\nh₁ : Ne a 0\nh₂ : Ne b 0\nc : Real\n⊢ Eq (Real.logb (HMul.hMul a b) c) (Inv.inv (HAdd.hAdd (Inv.inv (Real.logb a c)) (Inv.inv (Real.logb b c))))","decl":"theorem logb_mul_base {a b : ℝ} (h₁ : a ≠ 0) (h₂ : b ≠ 0) (c : ℝ) :\n    logb (a * b) c = ((logb a c)⁻¹ + (logb b c)⁻¹)⁻¹ := by rw [← inv_logb_mul_base h₁ h₂ c, inv_inv]\n\n"}
{"name":"Real.logb_div_base","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b : Real\nh₁ : Ne a 0\nh₂ : Ne b 0\nc : Real\n⊢ Eq (Real.logb (HDiv.hDiv a b) c) (Inv.inv (HSub.hSub (Inv.inv (Real.logb a c)) (Inv.inv (Real.logb b c))))","decl":"theorem logb_div_base {a b : ℝ} (h₁ : a ≠ 0) (h₂ : b ≠ 0) (c : ℝ) :\n    logb (a / b) c = ((logb a c)⁻¹ - (logb b c)⁻¹)⁻¹ := by rw [← inv_logb_div_base h₁ h₂ c, inv_inv]\n\n"}
{"name":"Real.mul_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b c : Real\nh₁ : Ne b 0\nh₂ : Ne b 1\nh₃ : Ne b (-1)\n⊢ Eq (HMul.hMul (Real.logb a b) (Real.logb b c)) (Real.logb a c)","decl":"theorem mul_logb {a b c : ℝ} (h₁ : b ≠ 0) (h₂ : b ≠ 1) (h₃ : b ≠ -1) :\n    logb a b * logb b c = logb a c := by\n  unfold logb\n  rw [mul_comm, div_mul_div_cancel₀ (log_ne_zero.mpr ⟨h₁, h₂, h₃⟩)]\n\n"}
{"name":"Real.div_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b c : Real\nh₁ : Ne c 0\nh₂ : Ne c 1\nh₃ : Ne c (-1)\n⊢ Eq (HDiv.hDiv (Real.logb a c) (Real.logb b c)) (Real.logb a b)","decl":"theorem div_logb {a b c : ℝ} (h₁ : c ≠ 0) (h₂ : c ≠ 1) (h₃ : c ≠ -1) :\n    logb a c / logb b c = logb a b :=\n  div_div_div_cancel_left' _ _ <| log_ne_zero.mpr ⟨h₁, h₂, h₃⟩\n\n"}
{"name":"Real.logb_rpow_eq_mul_logb_of_pos","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhx : LT.lt 0 x\n⊢ Eq (Real.logb b (HPow.hPow x y)) (HMul.hMul y (Real.logb b x))","decl":"theorem logb_rpow_eq_mul_logb_of_pos (hx : 0 < x) : logb b (x ^ y) = y * logb b x := by\n  rw [logb, log_rpow hx, logb, mul_div_assoc]\n\n"}
{"name":"Real.logb_pow","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nk : Nat\n⊢ Eq (Real.logb b (HPow.hPow x k)) (HMul.hMul (↑k) (Real.logb b x))","decl":"theorem logb_pow (b x : ℝ) (k : ℕ) : logb b (x ^ k) = k * logb b x := by\n  rw [logb, logb, log_pow, mul_div_assoc]\n\n"}
{"name":"Real.logb_rpow","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\n⊢ Eq (Real.logb b (HPow.hPow b x)) x","decl":"@[simp]\ntheorem logb_rpow : logb b (b ^ x) = x := by\n  rw [logb, div_eq_iff, log_rpow b_pos]\n  exact log_b_ne_zero b_pos b_ne_one\n\n"}
{"name":"Real.rpow_logb_eq_abs","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\nhx : Ne x 0\n⊢ Eq (HPow.hPow b (Real.logb b x)) (abs x)","decl":"theorem rpow_logb_eq_abs (hx : x ≠ 0) : b ^ logb b x = |x| := by\n  apply log_injOn_pos\n  · simp only [Set.mem_Ioi]\n    apply rpow_pos_of_pos b_pos\n  · simp only [abs_pos, mem_Ioi, Ne, hx, not_false_iff]\n  rw [log_rpow b_pos, logb, log_abs]\n  field_simp [log_b_ne_zero b_pos b_ne_one]\n\n"}
{"name":"Real.rpow_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\nhx : LT.lt 0 x\n⊢ Eq (HPow.hPow b (Real.logb b x)) x","decl":"@[simp]\ntheorem rpow_logb (hx : 0 < x) : b ^ logb b x = x := by\n  rw [rpow_logb_eq_abs b_pos b_ne_one hx.ne']\n  exact abs_of_pos hx\n\n"}
{"name":"Real.rpow_logb_of_neg","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\nhx : LT.lt x 0\n⊢ Eq (HPow.hPow b (Real.logb b x)) (Neg.neg x)","decl":"theorem rpow_logb_of_neg (hx : x < 0) : b ^ logb b x = -x := by\n  rw [rpow_logb_eq_abs b_pos b_ne_one (ne_of_lt hx)]\n  exact abs_of_neg hx\n\n"}
{"name":"Real.logb_eq_iff_rpow_eq","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\nhy : LT.lt 0 y\n⊢ Iff (Eq (Real.logb b y) x) (Eq (HPow.hPow b x) y)","decl":"theorem logb_eq_iff_rpow_eq (hy : 0 < y) : logb b y = x ↔ b ^ x = y := by\n  constructor <;> rintro rfl\n  · exact rpow_logb b_pos b_ne_one hy\n  · exact logb_rpow b_pos b_ne_one\n\n"}
{"name":"Real.surjOn_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\n⊢ Set.SurjOn (Real.logb b) (Set.Ioi 0) Set.univ","decl":"theorem surjOn_logb : SurjOn (logb b) (Ioi 0) univ := fun x _ =>\n  ⟨b ^ x, rpow_pos_of_pos b_pos x, logb_rpow b_pos b_ne_one⟩\n\n"}
{"name":"Real.logb_surjective","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\n⊢ Function.Surjective (Real.logb b)","decl":"theorem logb_surjective : Surjective (logb b) := fun x => ⟨b ^ x, logb_rpow b_pos b_ne_one⟩\n\n"}
{"name":"Real.range_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\n⊢ Eq (Set.range (Real.logb b)) Set.univ","decl":"@[simp]\ntheorem range_logb : range (logb b) = univ :=\n  (logb_surjective b_pos b_ne_one).range_eq\n\n"}
{"name":"Real.surjOn_logb'","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_ne_one : Ne b 1\n⊢ Set.SurjOn (Real.logb b) (Set.Iio 0) Set.univ","decl":"theorem surjOn_logb' : SurjOn (logb b) (Iio 0) univ := by\n  intro x _\n  use -b ^ x\n  constructor\n  · simp only [Right.neg_neg_iff, Set.mem_Iio]\n    apply rpow_pos_of_pos b_pos\n  · rw [logb_neg_eq_logb, logb_rpow b_pos b_ne_one]\n\n"}
{"name":"Real.logb_le_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nh : LT.lt 0 x\nh₁ : LT.lt 0 y\n⊢ Iff (LE.le (Real.logb b x) (Real.logb b y)) (LE.le x y)","decl":"@[simp]\ntheorem logb_le_logb (h : 0 < x) (h₁ : 0 < y) : logb b x ≤ logb b y ↔ x ≤ y := by\n  rw [logb, logb, div_le_div_iff_of_pos_right (log_pos hb), log_le_log_iff h h₁]\n\n"}
{"name":"Real.logb_le_logb_of_le","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nh : LT.lt 0 x\nhxy : LE.le x y\n⊢ LE.le (Real.logb b x) (Real.logb b y)","decl":"@[gcongr]\ntheorem logb_le_logb_of_le (h : 0 < x) (hxy : x ≤ y) : logb b x ≤ logb b y :=\n  (logb_le_logb hb h (by linarith)).mpr hxy\n\n"}
{"name":"Real.logb_lt_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\nhxy : LT.lt x y\n⊢ LT.lt (Real.logb b x) (Real.logb b y)","decl":"@[gcongr]\ntheorem logb_lt_logb (hx : 0 < x) (hxy : x < y) : logb b x < logb b y := by\n  rw [logb, logb, div_lt_div_iff_of_pos_right (log_pos hb)]\n  exact log_lt_log hx hxy\n\n"}
{"name":"Real.logb_lt_logb_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\nhy : LT.lt 0 y\n⊢ Iff (LT.lt (Real.logb b x) (Real.logb b y)) (LT.lt x y)","decl":"@[simp]\ntheorem logb_lt_logb_iff (hx : 0 < x) (hy : 0 < y) : logb b x < logb b y ↔ x < y := by\n  rw [logb, logb, div_lt_div_iff_of_pos_right (log_pos hb)]\n  exact log_lt_log_iff hx hy\n\n"}
{"name":"Real.logb_le_iff_le_rpow","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\n⊢ Iff (LE.le (Real.logb b x) y) (LE.le x (HPow.hPow b y))","decl":"theorem logb_le_iff_le_rpow (hx : 0 < x) : logb b x ≤ y ↔ x ≤ b ^ y := by\n  rw [← rpow_le_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one' hb) hx]\n\n"}
{"name":"Real.logb_lt_iff_lt_rpow","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\n⊢ Iff (LT.lt (Real.logb b x) y) (LT.lt x (HPow.hPow b y))","decl":"theorem logb_lt_iff_lt_rpow (hx : 0 < x) : logb b x < y ↔ x < b ^ y := by\n  rw [← rpow_lt_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one' hb) hx]\n\n"}
{"name":"Real.le_logb_iff_rpow_le","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nhy : LT.lt 0 y\n⊢ Iff (LE.le x (Real.logb b y)) (LE.le (HPow.hPow b x) y)","decl":"theorem le_logb_iff_rpow_le (hy : 0 < y) : x ≤ logb b y ↔ b ^ x ≤ y := by\n  rw [← rpow_le_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one' hb) hy]\n\n"}
{"name":"Real.lt_logb_iff_rpow_lt","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nhb : LT.lt 1 b\nhy : LT.lt 0 y\n⊢ Iff (LT.lt x (Real.logb b y)) (LT.lt (HPow.hPow b x) y)","decl":"theorem lt_logb_iff_rpow_lt (hy : 0 < y) : x < logb b y ↔ b ^ x < y := by\n  rw [← rpow_lt_rpow_left_iff hb, rpow_logb (b_pos hb) (b_ne_one' hb) hy]\n\n"}
{"name":"Real.logb_pos_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\n⊢ Iff (LT.lt 0 (Real.logb b x)) (LT.lt 1 x)","decl":"theorem logb_pos_iff (hx : 0 < x) : 0 < logb b x ↔ 1 < x := by\n  rw [← @logb_one b]\n  rw [logb_lt_logb_iff hb zero_lt_one hx]\n\n"}
{"name":"Real.logb_pos","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LT.lt 1 x\n⊢ LT.lt 0 (Real.logb b x)","decl":"theorem logb_pos (hx : 1 < x) : 0 < logb b x := by\n  rw [logb_pos_iff hb (lt_trans zero_lt_one hx)]\n  exact hx\n\n"}
{"name":"Real.logb_neg_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nh : LT.lt 0 x\n⊢ Iff (LT.lt (Real.logb b x) 0) (LT.lt x 1)","decl":"theorem logb_neg_iff (h : 0 < x) : logb b x < 0 ↔ x < 1 := by\n  rw [← logb_one]\n  exact logb_lt_logb_iff hb h zero_lt_one\n\n"}
{"name":"Real.logb_neg","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nh0 : LT.lt 0 x\nh1 : LT.lt x 1\n⊢ LT.lt (Real.logb b x) 0","decl":"theorem logb_neg (h0 : 0 < x) (h1 : x < 1) : logb b x < 0 :=\n  (logb_neg_iff hb h0).2 h1\n\n"}
{"name":"Real.logb_nonneg_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\n⊢ Iff (LE.le 0 (Real.logb b x)) (LE.le 1 x)","decl":"theorem logb_nonneg_iff (hx : 0 < x) : 0 ≤ logb b x ↔ 1 ≤ x := by\n  rw [← not_lt, logb_neg_iff hb hx, not_lt]\n\n"}
{"name":"Real.logb_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LE.le 1 x\n⊢ LE.le 0 (Real.logb b x)","decl":"theorem logb_nonneg (hx : 1 ≤ x) : 0 ≤ logb b x :=\n  (logb_nonneg_iff hb (zero_lt_one.trans_le hx)).2 hx\n\n"}
{"name":"Real.logb_nonpos_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LT.lt 0 x\n⊢ Iff (LE.le (Real.logb b x) 0) (LE.le x 1)","decl":"theorem logb_nonpos_iff (hx : 0 < x) : logb b x ≤ 0 ↔ x ≤ 1 := by\n  rw [← not_lt, logb_pos_iff hb hx, not_lt]\n\n"}
{"name":"Real.logb_nonpos_iff'","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LE.le 0 x\n⊢ Iff (LE.le (Real.logb b x) 0) (LE.le x 1)","decl":"theorem logb_nonpos_iff' (hx : 0 ≤ x) : logb b x ≤ 0 ↔ x ≤ 1 := by\n  rcases hx.eq_or_lt with (rfl | hx)\n  · simp [le_refl, zero_le_one]\n  exact logb_nonpos_iff hb hx\n\n"}
{"name":"Real.logb_nonpos","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx : LE.le 0 x\nh'x : LE.le x 1\n⊢ LE.le (Real.logb b x) 0","decl":"theorem logb_nonpos (hx : 0 ≤ x) (h'x : x ≤ 1) : logb b x ≤ 0 :=\n  (logb_nonpos_iff' hb hx).2 h'x\n\n"}
{"name":"Real.strictMonoOn_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ StrictMonoOn (Real.logb b) (Set.Ioi 0)","decl":"theorem strictMonoOn_logb : StrictMonoOn (logb b) (Set.Ioi 0) := fun _ hx _ _ hxy =>\n  logb_lt_logb hb hx hxy\n\n"}
{"name":"Real.strictAntiOn_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ StrictAntiOn (Real.logb b) (Set.Iio 0)","decl":"theorem strictAntiOn_logb : StrictAntiOn (logb b) (Set.Iio 0) := by\n  rintro x (hx : x < 0) y (hy : y < 0) hxy\n  rw [← logb_abs y, ← logb_abs x]\n  refine logb_lt_logb hb (abs_pos.2 hy.ne) ?_\n  rwa [abs_of_neg hy, abs_of_neg hx, neg_lt_neg_iff]\n\n"}
{"name":"Real.logb_injOn_pos","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ Set.InjOn (Real.logb b) (Set.Ioi 0)","decl":"theorem logb_injOn_pos : Set.InjOn (logb b) (Set.Ioi 0) :=\n  (strictMonoOn_logb hb).injOn\n\n"}
{"name":"Real.eq_one_of_pos_of_logb_eq_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nh₁ : LT.lt 0 x\nh₂ : Eq (Real.logb b x) 0\n⊢ Eq x 1","decl":"theorem eq_one_of_pos_of_logb_eq_zero (h₁ : 0 < x) (h₂ : logb b x = 0) : x = 1 :=\n  logb_injOn_pos hb (Set.mem_Ioi.2 h₁) (Set.mem_Ioi.2 zero_lt_one) (h₂.trans Real.logb_one.symm)\n\n"}
{"name":"Real.logb_ne_zero_of_pos_of_ne_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb : LT.lt 1 b\nhx_pos : LT.lt 0 x\nhx : Ne x 1\n⊢ Ne (Real.logb b x) 0","decl":"theorem logb_ne_zero_of_pos_of_ne_one (hx_pos : 0 < x) (hx : x ≠ 1) : logb b x ≠ 0 :=\n  mt (eq_one_of_pos_of_logb_eq_zero hb hx_pos) hx\n\n"}
{"name":"Real.tendsto_logb_atTop","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ Filter.Tendsto (Real.logb b) Filter.atTop Filter.atTop","decl":"theorem tendsto_logb_atTop : Tendsto (logb b) atTop atTop :=\n  Tendsto.atTop_div_const (log_pos hb) tendsto_log_atTop\n\n"}
{"name":"Real.logb_le_logb_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nh : LT.lt 0 x\nh₁ : LT.lt 0 y\n⊢ Iff (LE.le (Real.logb b x) (Real.logb b y)) (LE.le y x)","decl":"@[simp]\ntheorem logb_le_logb_of_base_lt_one (h : 0 < x) (h₁ : 0 < y) : logb b x ≤ logb b y ↔ y ≤ x := by\n  rw [logb, logb, div_le_div_right_of_neg (log_neg b_pos b_lt_one), log_le_log_iff h₁ h]\n\n"}
{"name":"Real.logb_lt_logb_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\nhxy : LT.lt x y\n⊢ LT.lt (Real.logb b y) (Real.logb b x)","decl":"theorem logb_lt_logb_of_base_lt_one (hx : 0 < x) (hxy : x < y) : logb b y < logb b x := by\n  rw [logb, logb, div_lt_div_right_of_neg (log_neg b_pos b_lt_one)]\n  exact log_lt_log hx hxy\n\n"}
{"name":"Real.logb_lt_logb_iff_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\nhy : LT.lt 0 y\n⊢ Iff (LT.lt (Real.logb b x) (Real.logb b y)) (LT.lt y x)","decl":"@[simp]\ntheorem logb_lt_logb_iff_of_base_lt_one (hx : 0 < x) (hy : 0 < y) :\n    logb b x < logb b y ↔ y < x := by\n  rw [logb, logb, div_lt_div_right_of_neg (log_neg b_pos b_lt_one)]\n  exact log_lt_log_iff hy hx\n\n"}
{"name":"Real.logb_le_iff_le_rpow_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\n⊢ Iff (LE.le (Real.logb b x) y) (LE.le (HPow.hPow b y) x)","decl":"theorem logb_le_iff_le_rpow_of_base_lt_one (hx : 0 < x) : logb b x ≤ y ↔ b ^ y ≤ x := by\n  rw [← rpow_le_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hx]\n\n"}
{"name":"Real.logb_lt_iff_lt_rpow_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\n⊢ Iff (LT.lt (Real.logb b x) y) (LT.lt (HPow.hPow b y) x)","decl":"theorem logb_lt_iff_lt_rpow_of_base_lt_one (hx : 0 < x) : logb b x < y ↔ b ^ y < x := by\n  rw [← rpow_lt_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hx]\n\n"}
{"name":"Real.le_logb_iff_rpow_le_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhy : LT.lt 0 y\n⊢ Iff (LE.le x (Real.logb b y)) (LE.le y (HPow.hPow b x))","decl":"theorem le_logb_iff_rpow_le_of_base_lt_one (hy : 0 < y) : x ≤ logb b y ↔ y ≤ b ^ x := by\n  rw [← rpow_le_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hy]\n\n"}
{"name":"Real.lt_logb_iff_rpow_lt_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x y : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhy : LT.lt 0 y\n⊢ Iff (LT.lt x (Real.logb b y)) (LT.lt y (HPow.hPow b x))","decl":"theorem lt_logb_iff_rpow_lt_of_base_lt_one (hy : 0 < y) : x < logb b y ↔ y < b ^ x := by\n  rw [← rpow_lt_rpow_left_iff_of_base_lt_one b_pos b_lt_one, rpow_logb b_pos (b_ne_one b_lt_one) hy]\n\n"}
{"name":"Real.logb_pos_iff_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\n⊢ Iff (LT.lt 0 (Real.logb b x)) (LT.lt x 1)","decl":"theorem logb_pos_iff_of_base_lt_one (hx : 0 < x) : 0 < logb b x ↔ x < 1 := by\n  rw [← @logb_one b, logb_lt_logb_iff_of_base_lt_one b_pos b_lt_one zero_lt_one hx]\n\n"}
{"name":"Real.logb_pos_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\nhx' : LT.lt x 1\n⊢ LT.lt 0 (Real.logb b x)","decl":"theorem logb_pos_of_base_lt_one (hx : 0 < x) (hx' : x < 1) : 0 < logb b x := by\n  rw [logb_pos_iff_of_base_lt_one b_pos b_lt_one hx]\n  exact hx'\n\n"}
{"name":"Real.logb_neg_iff_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nh : LT.lt 0 x\n⊢ Iff (LT.lt (Real.logb b x) 0) (LT.lt 1 x)","decl":"theorem logb_neg_iff_of_base_lt_one (h : 0 < x) : logb b x < 0 ↔ 1 < x := by\n  rw [← @logb_one b, logb_lt_logb_iff_of_base_lt_one b_pos b_lt_one h zero_lt_one]\n\n"}
{"name":"Real.logb_neg_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nh1 : LT.lt 1 x\n⊢ LT.lt (Real.logb b x) 0","decl":"theorem logb_neg_of_base_lt_one (h1 : 1 < x) : logb b x < 0 :=\n  (logb_neg_iff_of_base_lt_one b_pos b_lt_one (lt_trans zero_lt_one h1)).2 h1\n\n"}
{"name":"Real.logb_nonneg_iff_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\n⊢ Iff (LE.le 0 (Real.logb b x)) (LE.le x 1)","decl":"theorem logb_nonneg_iff_of_base_lt_one (hx : 0 < x) : 0 ≤ logb b x ↔ x ≤ 1 := by\n  rw [← not_lt, logb_neg_iff_of_base_lt_one b_pos b_lt_one hx, not_lt]\n\n"}
{"name":"Real.logb_nonneg_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\nhx' : LE.le x 1\n⊢ LE.le 0 (Real.logb b x)","decl":"theorem logb_nonneg_of_base_lt_one (hx : 0 < x) (hx' : x ≤ 1) : 0 ≤ logb b x := by\n  rw [logb_nonneg_iff_of_base_lt_one b_pos b_lt_one hx]\n  exact hx'\n\n"}
{"name":"Real.logb_nonpos_iff_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx : LT.lt 0 x\n⊢ Iff (LE.le (Real.logb b x) 0) (LE.le 1 x)","decl":"theorem logb_nonpos_iff_of_base_lt_one (hx : 0 < x) : logb b x ≤ 0 ↔ 1 ≤ x := by\n  rw [← not_lt, logb_pos_iff_of_base_lt_one b_pos b_lt_one hx, not_lt]\n\n"}
{"name":"Real.strictAntiOn_logb_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\n⊢ StrictAntiOn (Real.logb b) (Set.Ioi 0)","decl":"theorem strictAntiOn_logb_of_base_lt_one : StrictAntiOn (logb b) (Set.Ioi 0) := fun _ hx _ _ hxy =>\n  logb_lt_logb_of_base_lt_one b_pos b_lt_one hx hxy\n\n"}
{"name":"Real.strictMonoOn_logb_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\n⊢ StrictMonoOn (Real.logb b) (Set.Iio 0)","decl":"theorem strictMonoOn_logb_of_base_lt_one : StrictMonoOn (logb b) (Set.Iio 0) := by\n  rintro x (hx : x < 0) y (hy : y < 0) hxy\n  rw [← logb_abs y, ← logb_abs x]\n  refine logb_lt_logb_of_base_lt_one b_pos b_lt_one (abs_pos.2 hy.ne) ?_\n  rwa [abs_of_neg hy, abs_of_neg hx, neg_lt_neg_iff]\n\n"}
{"name":"Real.logb_injOn_pos_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\n⊢ Set.InjOn (Real.logb b) (Set.Ioi 0)","decl":"theorem logb_injOn_pos_of_base_lt_one : Set.InjOn (logb b) (Set.Ioi 0) :=\n  (strictAntiOn_logb_of_base_lt_one b_pos b_lt_one).injOn\n\n"}
{"name":"Real.eq_one_of_pos_of_logb_eq_zero_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nh₁ : LT.lt 0 x\nh₂ : Eq (Real.logb b x) 0\n⊢ Eq x 1","decl":"theorem eq_one_of_pos_of_logb_eq_zero_of_base_lt_one (h₁ : 0 < x) (h₂ : logb b x = 0) : x = 1 :=\n  logb_injOn_pos_of_base_lt_one b_pos b_lt_one (Set.mem_Ioi.2 h₁) (Set.mem_Ioi.2 zero_lt_one)\n    (h₂.trans Real.logb_one.symm)\n\n"}
{"name":"Real.logb_ne_zero_of_pos_of_ne_one_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\nhx_pos : LT.lt 0 x\nhx : Ne x 1\n⊢ Ne (Real.logb b x) 0","decl":"theorem logb_ne_zero_of_pos_of_ne_one_of_base_lt_one (hx_pos : 0 < x) (hx : x ≠ 1) : logb b x ≠ 0 :=\n  mt (eq_one_of_pos_of_logb_eq_zero_of_base_lt_one b_pos b_lt_one hx_pos) hx\n\n"}
{"name":"Real.tendsto_logb_atTop_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nb_pos : LT.lt 0 b\nb_lt_one : LT.lt b 1\n⊢ Filter.Tendsto (Real.logb b) Filter.atTop Filter.atBot","decl":"theorem tendsto_logb_atTop_of_base_lt_one : Tendsto (logb b) atTop atBot := by\n  rw [tendsto_atTop_atBot]\n  intro e\n  use 1 ⊔ b ^ e\n  intro a\n  simp only [and_imp, sup_le_iff]\n  intro ha\n  rw [logb_le_iff_le_rpow_of_base_lt_one b_pos b_lt_one]\n  · tauto\n  · exact lt_of_lt_of_le zero_lt_one ha\n\n"}
{"name":"Real.floor_logb_natCast","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Nat\nr : Real\nhr : LE.le 0 r\n⊢ Eq (Int.floor (Real.logb (↑b) r)) (Int.log b r)","decl":"theorem floor_logb_natCast {b : ℕ} {r : ℝ} (hr : 0 ≤ r) :\n    ⌊logb b r⌋ = Int.log b r := by\n  obtain rfl | hr := hr.eq_or_lt\n  · rw [logb_zero, Int.log_zero_right, Int.floor_zero]\n  by_cases hb : 1 < b\n  · have hb1' : 1 < (b : ℝ) := Nat.one_lt_cast.mpr hb\n    apply le_antisymm\n    · rw [← Int.zpow_le_iff_le_log hb hr, ← rpow_intCast b]\n      refine le_of_le_of_eq ?_ (rpow_logb (zero_lt_one.trans hb1') hb1'.ne' hr)\n      exact rpow_le_rpow_of_exponent_le hb1'.le (Int.floor_le _)\n    · rw [Int.le_floor, le_logb_iff_rpow_le hb1' hr, rpow_intCast]\n      exact Int.zpow_log_le_self hb hr\n  · rw [Nat.one_lt_iff_ne_zero_and_ne_one, ← or_iff_not_and_not] at hb\n    cases hb\n    · simp_all only [CharP.cast_eq_zero, logb_zero_left, Int.floor_zero, Int.log_zero_left]\n    · simp_all only [Nat.cast_one, logb_one_left, Int.floor_zero, Int.log_one_left]\n\n"}
{"name":"Real.ceil_logb_natCast","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Nat\nr : Real\nhr : LE.le 0 r\n⊢ Eq (Int.ceil (Real.logb (↑b) r)) (Int.clog b r)","decl":"theorem ceil_logb_natCast {b : ℕ} {r : ℝ} (hr : 0 ≤ r) :\n    ⌈logb b r⌉ = Int.clog b r := by\n  obtain rfl | hr := hr.eq_or_lt\n  · rw [logb_zero, Int.clog_zero_right, Int.ceil_zero]\n  by_cases hb : 1 < b\n  · have hb1' : 1 < (b : ℝ) := Nat.one_lt_cast.mpr hb\n    apply le_antisymm\n    · rw [Int.ceil_le, logb_le_iff_le_rpow hb1' hr, rpow_intCast]\n      exact Int.self_le_zpow_clog hb r\n    · rw [← Int.le_zpow_iff_clog_le hb hr, ← rpow_intCast b]\n      refine (rpow_logb (zero_lt_one.trans hb1') hb1'.ne' hr).symm.trans_le ?_\n      exact rpow_le_rpow_of_exponent_le hb1'.le (Int.le_ceil _)\n  · rw [Nat.one_lt_iff_ne_zero_and_ne_one, ← or_iff_not_and_not] at hb\n    cases hb\n    · simp_all only [CharP.cast_eq_zero, logb_zero_left, Int.ceil_zero, Int.clog_zero_left]\n    · simp_all only [Nat.cast_one, logb_one_left, Int.ceil_zero, Int.clog_one_left]\n\n"}
{"name":"Real.natLog_le_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"a b : Nat\n⊢ LE.le (↑(Nat.log b a)) (Real.logb ↑b ↑a)","decl":"lemma natLog_le_logb (a b : ℕ) : Nat.log b a ≤ Real.logb b a := by\n  apply le_trans _ (Int.floor_le ((b : ℝ).logb a))\n  rw [Real.floor_logb_natCast (Nat.cast_nonneg a), Int.log_natCast, Int.cast_natCast]\n\n"}
{"name":"Real.logb_eq_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\n⊢ Iff (Eq (Real.logb b x) 0) (Or (Eq b 0) (Or (Eq b 1) (Or (Eq b (-1)) (Or (Eq x 0) (Or (Eq x 1) (Eq x (-1)))))))","decl":"@[simp]\ntheorem logb_eq_zero : logb b x = 0 ↔ b = 0 ∨ b = 1 ∨ b = -1 ∨ x = 0 ∨ x = 1 ∨ x = -1 := by\n  simp_rw [logb, div_eq_zero_iff, log_eq_zero]\n  tauto\n\n"}
{"name":"Real.tendsto_logb_nhdsWithin_zero","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ Filter.Tendsto (Real.logb b) (nhdsWithin 0 (HasCompl.compl (Singleton.singleton 0))) Filter.atBot","decl":"theorem tendsto_logb_nhdsWithin_zero (hb : 1 < b) :\n    Tendsto (logb b) (𝓝[≠] 0) atBot :=\n  tendsto_log_nhdsWithin_zero.atBot_div_const (log_pos hb)\n\n"}
{"name":"Real.tendsto_logb_nhdsWithin_zero_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb₀ : LT.lt 0 b\nhb : LT.lt b 1\n⊢ Filter.Tendsto (Real.logb b) (nhdsWithin 0 (HasCompl.compl (Singleton.singleton 0))) Filter.atTop","decl":"theorem tendsto_logb_nhdsWithin_zero_of_base_lt_one (hb₀ : 0 < b) (hb : b < 1) :\n    Tendsto (logb b) (𝓝[≠] 0) atTop :=\n  tendsto_log_nhdsWithin_zero.atBot_mul_const_of_neg (inv_lt_zero.2 (log_neg hb₀ hb))\n\n"}
{"name":"Real.tendsto_logb_nhdsWithin_zero_right","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb : LT.lt 1 b\n⊢ Filter.Tendsto (Real.logb b) (nhdsWithin 0 (Set.Ioi 0)) Filter.atBot","decl":"lemma tendsto_logb_nhdsWithin_zero_right (hb : 1 < b) : Tendsto (logb b) (𝓝[>] 0) atBot :=\n  tendsto_log_nhdsWithin_zero_right.atBot_div_const (log_pos hb)\n\n"}
{"name":"Real.tendsto_logb_nhdsWithin_zero_right_of_base_lt_one","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nhb₀ : LT.lt 0 b\nhb : LT.lt b 1\n⊢ Filter.Tendsto (Real.logb b) (nhdsWithin 0 (Set.Ioi 0)) Filter.atTop","decl":"lemma tendsto_logb_nhdsWithin_zero_right_of_base_lt_one (hb₀ : 0 < b) (hb : b < 1) :\n    Tendsto (logb b) (𝓝[>] 0) atTop :=\n  tendsto_log_nhdsWithin_zero_right.atBot_mul_const_of_neg (inv_lt_zero.2 (log_neg hb₀ hb))\n\n"}
{"name":"Real.continuousOn_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\n⊢ ContinuousOn (Real.logb b) (HasCompl.compl (Singleton.singleton 0))","decl":"theorem continuousOn_logb : ContinuousOn (logb b) {0}ᶜ := continuousOn_log.div_const _\n\n"}
{"name":"Real.continuous_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\n⊢ Continuous fun x => Real.logb b ↑x","decl":"/-- The real logarithm base b is continuous as a function from nonzero reals. -/\n@[fun_prop]\ntheorem continuous_logb : Continuous fun x : { x : ℝ // x ≠ 0 } => logb b x :=\n  continuous_log.div_const _\n\n"}
{"name":"Real.continuous_logb'","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\n⊢ Continuous fun x => Real.logb b ↑x","decl":"/-- The real logarithm base b is continuous as a function from positive reals. -/\n@[fun_prop]\ntheorem continuous_logb' : Continuous fun x : { x : ℝ // 0 < x } => logb b x :=\n  continuous_log'.div_const _\n\n"}
{"name":"Real.continuousAt_logb","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhx : Ne x 0\n⊢ ContinuousAt (Real.logb b) x","decl":"theorem continuousAt_logb (hx : x ≠ 0) : ContinuousAt (logb b) x :=\n  (continuousAt_log hx).div_const _\n\n"}
{"name":"Real.continuousAt_logb_iff","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b x : Real\nhb₀ : LT.lt 0 b\nhb : Ne b 1\n⊢ Iff (ContinuousAt (Real.logb b) x) (Ne x 0)","decl":"@[simp]\ntheorem continuousAt_logb_iff (hb₀ : 0 < b) (hb : b ≠ 1) : ContinuousAt (logb b) x ↔ x ≠ 0 := by\n  refine ⟨?_, continuousAt_logb⟩\n  rintro h rfl\n  cases lt_or_gt_of_ne hb with\n  | inl hb₁ =>\n      exact not_tendsto_nhds_of_tendsto_atTop (tendsto_logb_nhdsWithin_zero_of_base_lt_one hb₀ hb₁)\n        _ (h.tendsto.mono_left inf_le_left)\n  | inr hb₁ =>\n      exact not_tendsto_nhds_of_tendsto_atBot (tendsto_logb_nhdsWithin_zero hb₁)\n        _ (h.tendsto.mono_left inf_le_left)\n\n"}
{"name":"Real.logb_prod","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nα : Type u_1\ns : Finset α\nf : α → Real\nhf : ∀ (x : α), Membership.mem s x → Ne (f x) 0\n⊢ Eq (Real.logb b (s.prod fun i => f i)) (s.sum fun i => Real.logb b (f i))","decl":"theorem logb_prod {α : Type*} (s : Finset α) (f : α → ℝ) (hf : ∀ x ∈ s, f x ≠ 0) :\n    logb b (∏ i ∈ s, f i) = ∑ i ∈ s, logb b (f i) := by\n  classical\n    induction' s using Finset.induction_on with a s ha ih\n    · simp\n    simp only [Finset.mem_insert, forall_eq_or_imp] at hf\n    simp [ha, ih hf.2, logb_mul hf.1 (Finset.prod_ne_zero_iff.2 hf.2)]\n\n"}
{"name":"Finsupp.logb_prod","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nα : Type u_1\nβ : Type u_2\ninst✝ : Zero β\nf : Finsupp α β\ng : α → β → Real\nhg : ∀ (a : α), Eq (g a (f a)) 0 → Eq (f a) 0\n⊢ Eq (Real.logb b (f.prod g)) (f.sum fun a c => Real.logb b (g a c))","decl":"protected theorem _root_.Finsupp.logb_prod {α β : Type*} [Zero β] (f : α →₀ β) (g : α → β → ℝ)\n    (hg : ∀ a, g a (f a) = 0 → f a = 0) : logb b (f.prod g) = f.sum fun a c ↦ logb b (g a c) :=\n  logb_prod _ _ fun _x hx h₀ ↦ Finsupp.mem_support_iff.1 hx <| hg _ h₀\n\n"}
{"name":"Real.logb_nat_eq_sum_factorization","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"b : Real\nn : Nat\n⊢ Eq (Real.logb b ↑n) (n.factorization.sum fun p t => HMul.hMul (↑t) (Real.logb b ↑p))","decl":"theorem logb_nat_eq_sum_factorization (n : ℕ) :\n    logb b n = n.factorization.sum fun p t => t * logb b p := by\n  simp only [logb, mul_div_assoc', log_nat_eq_sum_factorization n, Finsupp.sum, Finset.sum_div]\n\n-- TODO add other limits and continuous API lemmas analogous to those in Log.lean\n\n"}
{"name":"Real.induction_Ico_mul","module":"Mathlib.Analysis.SpecialFunctions.Log.Base","initialProofState":"P : Real → Prop\nx₀ r : Real\nhr : LT.lt 1 r\nhx₀ : LT.lt 0 x₀\nbase : ∀ (x : Real), Membership.mem (Set.Ico x₀ (HMul.hMul r x₀)) x → P x\nstep : ∀ (n : Nat), GE.ge n 1 → (∀ (z : Real), Membership.mem (Set.Ico x₀ (HMul.hMul (HPow.hPow r n) x₀)) z → P z) → ∀ (z : Real), Membership.mem (Set.Ico (HMul.hMul (HPow.hPow r n) x₀) (HMul.hMul (HPow.hPow r (HAdd.hAdd n 1)) x₀)) z → P z\nx : Real\na✝ : GE.ge x x₀\n⊢ P x","decl":"/-- Induction principle for intervals of real numbers: if a proposition `P` is true\non `[x₀, r * x₀)` and if `P` for `[x₀, r^n * x₀)` implies `P` for `[r^n * x₀, r^(n+1) * x₀)`,\nthen `P` is true for all `x ≥ x₀`. -/\nlemma Real.induction_Ico_mul {P : ℝ → Prop} (x₀ r : ℝ) (hr : 1 < r) (hx₀ : 0 < x₀)\n    (base : ∀ x ∈ Set.Ico x₀ (r * x₀), P x)\n    (step : ∀ n : ℕ, n ≥ 1 → (∀ z ∈ Set.Ico x₀ (r ^ n * x₀), P z) →\n      (∀ z ∈ Set.Ico (r ^ n * x₀) (r ^ (n+1) * x₀), P z)) :\n    ∀ x ≥ x₀, P x := by\n  suffices ∀ n : ℕ, ∀ x ∈ Set.Ico x₀ (r ^ (n + 1) * x₀), P x by\n    intro x hx\n    have hx' : 0 < x / x₀ := div_pos (hx₀.trans_le hx) hx₀\n    refine this ⌊logb r (x / x₀)⌋₊ x ?_\n    rw [mem_Ico, ← div_lt_iff₀ hx₀, ← rpow_natCast, ← logb_lt_iff_lt_rpow hr hx', Nat.cast_add,\n      Nat.cast_one]\n    exact ⟨hx, Nat.lt_floor_add_one _⟩\n  intro n\n  induction n with\n  | zero => simpa using base\n  | succ n ih =>\n    exact fun x hx => (Ico_subset_Ico_union_Ico hx).elim (ih x) (step (n + 1) (by simp) ih _)\n\n"}
