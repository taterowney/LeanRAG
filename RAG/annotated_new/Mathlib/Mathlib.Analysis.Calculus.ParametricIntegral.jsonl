{"name":"hasFDerivAt_integral_of_dominated_loc_of_lip'","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_2\ninst✝⁵ : RCLike 𝕜\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedSpace 𝕜 E\nH : Type u_4\ninst✝¹ : NormedAddCommGroup H\ninst✝ : NormedSpace 𝕜 H\nF : H → α → E\nx₀ : H\nbound : α → Real\nε : Real\nF' : α → ContinuousLinearMap (RingHom.id 𝕜) H E\nε_pos : LT.lt 0 ε\nhF_meas : ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → MeasureTheory.AEStronglyMeasurable (F x) μ\nhF_int : MeasureTheory.Integrable (F x₀) μ\nhF'_meas : MeasureTheory.AEStronglyMeasurable F' μ\nh_lipsch : Filter.Eventually (fun a => ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → LE.le (Norm.norm (HSub.hSub (F x a) (F x₀ a))) (HMul.hMul (bound a) (Norm.norm (HSub.hSub x x₀)))) (MeasureTheory.ae μ)\nbound_integrable : MeasureTheory.Integrable bound μ\nh_diff : Filter.Eventually (fun a => HasFDerivAt (fun x => F x a) (F' a) x₀) (MeasureTheory.ae μ)\n⊢ And (MeasureTheory.Integrable F' μ) (HasFDerivAt (fun x => MeasureTheory.integral μ fun a => F x a) (MeasureTheory.integral μ fun a => F' a) x₀)","decl":"/-- Differentiation under integral of `x ↦ ∫ F x a` at a given point `x₀`, assuming `F x₀` is\nintegrable, `‖F x a - F x₀ a‖ ≤ bound a * ‖x - x₀‖` for `x` in a ball around `x₀` for ae `a` with\nintegrable Lipschitz bound `bound` (with a ball radius independent of `a`), and `F x` is\nae-measurable for `x` in the same ball. See `hasFDerivAt_integral_of_dominated_loc_of_lip` for a\nslightly less general but usually more useful version. -/\ntheorem hasFDerivAt_integral_of_dominated_loc_of_lip' {F' : α → H →L[𝕜] E} (ε_pos : 0 < ε)\n    (hF_meas : ∀ x ∈ ball x₀ ε, AEStronglyMeasurable (F x) μ) (hF_int : Integrable (F x₀) μ)\n    (hF'_meas : AEStronglyMeasurable F' μ)\n    (h_lipsch : ∀ᵐ a ∂μ, ∀ x ∈ ball x₀ ε, ‖F x a - F x₀ a‖ ≤ bound a * ‖x - x₀‖)\n    (bound_integrable : Integrable (bound : α → ℝ) μ)\n    (h_diff : ∀ᵐ a ∂μ, HasFDerivAt (F · a) (F' a) x₀) :\n    Integrable F' μ ∧ HasFDerivAt (fun x ↦ ∫ a, F x a ∂μ) (∫ a, F' a ∂μ) x₀ := by\n  have x₀_in : x₀ ∈ ball x₀ ε := mem_ball_self ε_pos\n  have nneg : ∀ x, 0 ≤ ‖x - x₀‖⁻¹ := fun x ↦ inv_nonneg.mpr (norm_nonneg _)\n  set b : α → ℝ := fun a ↦ |bound a|\n  have b_int : Integrable b μ := bound_integrable.norm\n  have b_nonneg : ∀ a, 0 ≤ b a := fun a ↦ abs_nonneg _\n  replace h_lipsch : ∀ᵐ a ∂μ, ∀ x ∈ ball x₀ ε, ‖F x a - F x₀ a‖ ≤ b a * ‖x - x₀‖ :=\n    h_lipsch.mono fun a ha x hx ↦\n      (ha x hx).trans <| mul_le_mul_of_nonneg_right (le_abs_self _) (norm_nonneg _)\n  have hF_int' : ∀ x ∈ ball x₀ ε, Integrable (F x) μ := fun x x_in ↦ by\n    have : ∀ᵐ a ∂μ, ‖F x₀ a - F x a‖ ≤ ε * b a := by\n      simp only [norm_sub_rev (F x₀ _)]\n      refine h_lipsch.mono fun a ha ↦ (ha x x_in).trans ?_\n      rw [mul_comm ε]\n      rw [mem_ball, dist_eq_norm] at x_in\n      exact mul_le_mul_of_nonneg_left x_in.le (b_nonneg _)\n    exact integrable_of_norm_sub_le (hF_meas x x_in) hF_int\n      (bound_integrable.norm.const_mul ε) this\n  have hF'_int : Integrable F' μ :=\n    have : ∀ᵐ a ∂μ, ‖F' a‖ ≤ b a := by\n      apply (h_diff.and h_lipsch).mono\n      rintro a ⟨ha_diff, ha_lip⟩\n      exact ha_diff.le_of_lip' (b_nonneg a) (mem_of_superset (ball_mem_nhds _ ε_pos) <| ha_lip)\n    b_int.mono' hF'_meas this\n  refine ⟨hF'_int, ?_⟩\n  /- Discard the trivial case where `E` is not complete, as all integrals vanish. -/\n  by_cases hE : CompleteSpace E; swap\n  · rcases subsingleton_or_nontrivial H with hH|hH\n    · have : Subsingleton (H →L[𝕜] E) := inferInstance\n      convert hasFDerivAt_of_subsingleton _ x₀\n    · have : ¬(CompleteSpace (H →L[𝕜] E)) := by\n        simpa [SeparatingDual.completeSpace_continuousLinearMap_iff] using hE\n      simp only [integral, hE, ↓reduceDIte, this]\n      exact hasFDerivAt_const 0 x₀\n  have h_ball : ball x₀ ε ∈ 𝓝 x₀ := ball_mem_nhds x₀ ε_pos\n  have : ∀ᶠ x in 𝓝 x₀, ‖x - x₀‖⁻¹ * ‖((∫ a, F x a ∂μ) - ∫ a, F x₀ a ∂μ) - (∫ a, F' a ∂μ) (x - x₀)‖ =\n      ‖∫ a, ‖x - x₀‖⁻¹ • (F x a - F x₀ a - F' a (x - x₀)) ∂μ‖ := by\n    apply mem_of_superset (ball_mem_nhds _ ε_pos)\n    intro x x_in; simp only\n    rw [Set.mem_setOf_eq, ← norm_smul_of_nonneg (nneg _), integral_smul, integral_sub, integral_sub,\n      ← ContinuousLinearMap.integral_apply hF'_int]\n    exacts [hF_int' x x_in, hF_int, (hF_int' x x_in).sub hF_int,\n      hF'_int.apply_continuousLinearMap _]\n  rw [hasFDerivAt_iff_tendsto, tendsto_congr' this, ← tendsto_zero_iff_norm_tendsto_zero, ←\n    show (∫ a : α, ‖x₀ - x₀‖⁻¹ • (F x₀ a - F x₀ a - (F' a) (x₀ - x₀)) ∂μ) = 0 by simp]\n  apply tendsto_integral_filter_of_dominated_convergence\n  · filter_upwards [h_ball] with _ x_in\n    apply AEStronglyMeasurable.const_smul\n    exact ((hF_meas _ x_in).sub (hF_meas _ x₀_in)).sub (hF'_meas.apply_continuousLinearMap _)\n  · refine mem_of_superset h_ball fun x hx ↦ ?_\n    apply (h_diff.and h_lipsch).mono\n    on_goal 1 => rintro a ⟨-, ha_bound⟩\n    show ‖‖x - x₀‖⁻¹ • (F x a - F x₀ a - F' a (x - x₀))‖ ≤ b a + ‖F' a‖\n    replace ha_bound : ‖F x a - F x₀ a‖ ≤ b a * ‖x - x₀‖ := ha_bound x hx\n    calc\n      ‖‖x - x₀‖⁻¹ • (F x a - F x₀ a - F' a (x - x₀))‖ =\n          ‖‖x - x₀‖⁻¹ • (F x a - F x₀ a) - ‖x - x₀‖⁻¹ • F' a (x - x₀)‖ := by rw [smul_sub]\n      _ ≤ ‖‖x - x₀‖⁻¹ • (F x a - F x₀ a)‖ + ‖‖x - x₀‖⁻¹ • F' a (x - x₀)‖ := norm_sub_le _ _\n      _ = ‖x - x₀‖⁻¹ * ‖F x a - F x₀ a‖ + ‖x - x₀‖⁻¹ * ‖F' a (x - x₀)‖ := by\n        rw [norm_smul_of_nonneg, norm_smul_of_nonneg] <;> exact nneg _\n      _ ≤ ‖x - x₀‖⁻¹ * (b a * ‖x - x₀‖) + ‖x - x₀‖⁻¹ * (‖F' a‖ * ‖x - x₀‖) := by\n        gcongr; exact (F' a).le_opNorm _\n      _ ≤ b a + ‖F' a‖ := ?_\n    simp only [← div_eq_inv_mul]\n    apply_rules [add_le_add, div_le_of_le_mul₀] <;> first | rfl | positivity\n  · exact b_int.add hF'_int.norm\n  · apply h_diff.mono\n    intro a ha\n    suffices Tendsto (fun x ↦ ‖x - x₀‖⁻¹ • (F x a - F x₀ a - F' a (x - x₀))) (𝓝 x₀) (𝓝 0) by simpa\n    rw [tendsto_zero_iff_norm_tendsto_zero]\n    have : (fun x ↦ ‖x - x₀‖⁻¹ * ‖F x a - F x₀ a - F' a (x - x₀)‖) = fun x ↦\n        ‖‖x - x₀‖⁻¹ • (F x a - F x₀ a - F' a (x - x₀))‖ := by\n      ext x\n      rw [norm_smul_of_nonneg (nneg _)]\n    rwa [hasFDerivAt_iff_tendsto, this] at ha\n\n"}
{"name":"hasFDerivAt_integral_of_dominated_loc_of_lip","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_2\ninst✝⁵ : RCLike 𝕜\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedSpace 𝕜 E\nH : Type u_4\ninst✝¹ : NormedAddCommGroup H\ninst✝ : NormedSpace 𝕜 H\nF : H → α → E\nx₀ : H\nbound : α → Real\nε : Real\nF' : α → ContinuousLinearMap (RingHom.id 𝕜) H E\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) μ) (nhds x₀)\nhF_int : MeasureTheory.Integrable (F x₀) μ\nhF'_meas : MeasureTheory.AEStronglyMeasurable F' μ\nh_lip : Filter.Eventually (fun a => LipschitzOnWith (Real.nnabs (bound a)) (fun x => F x a) (Metric.ball x₀ ε)) (MeasureTheory.ae μ)\nbound_integrable : MeasureTheory.Integrable bound μ\nh_diff : Filter.Eventually (fun a => HasFDerivAt (fun x => F x a) (F' a) x₀) (MeasureTheory.ae μ)\n⊢ And (MeasureTheory.Integrable F' μ) (HasFDerivAt (fun x => MeasureTheory.integral μ fun a => F x a) (MeasureTheory.integral μ fun a => F' a) x₀)","decl":"/-- Differentiation under integral of `x ↦ ∫ F x a` at a given point `x₀`, assuming\n`F x₀` is integrable, `x ↦ F x a` is locally Lipschitz on a ball around `x₀` for ae `a`\n(with a ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is ae-measurable\nfor `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem hasFDerivAt_integral_of_dominated_loc_of_lip {F' : α → H →L[𝕜] E}\n    (ε_pos : 0 < ε) (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) μ)\n    (hF_int : Integrable (F x₀) μ) (hF'_meas : AEStronglyMeasurable F' μ)\n    (h_lip : ∀ᵐ a ∂μ, LipschitzOnWith (Real.nnabs <| bound a) (F · a) (ball x₀ ε))\n    (bound_integrable : Integrable (bound : α → ℝ) μ)\n    (h_diff : ∀ᵐ a ∂μ, HasFDerivAt (F · a) (F' a) x₀) :\n    Integrable F' μ ∧ HasFDerivAt (fun x ↦ ∫ a, F x a ∂μ) (∫ a, F' a ∂μ) x₀ := by\n  obtain ⟨δ, δ_pos, hδ⟩ : ∃ δ > 0, ∀ x ∈ ball x₀ δ, AEStronglyMeasurable (F x) μ ∧ x ∈ ball x₀ ε :=\n    eventually_nhds_iff_ball.mp (hF_meas.and (ball_mem_nhds x₀ ε_pos))\n  choose hδ_meas hδε using hδ\n  replace h_lip : ∀ᵐ a : α ∂μ, ∀ x ∈ ball x₀ δ, ‖F x a - F x₀ a‖ ≤ |bound a| * ‖x - x₀‖ :=\n    h_lip.mono fun a lip x hx ↦ lip.norm_sub_le (hδε x hx) (mem_ball_self ε_pos)\n  replace bound_integrable := bound_integrable.norm\n  apply hasFDerivAt_integral_of_dominated_loc_of_lip' δ_pos <;> assumption\n\n"}
{"name":"hasFDerivAt_integral_of_dominated_loc_of_lip_interval","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nH : Type u_4\ninst✝¹ : NormedAddCommGroup H\nx₀ : H\nε : Real\ninst✝ : NormedSpace Real H\nμ : MeasureTheory.Measure Real\nF : H → Real → E\nF' : Real → ContinuousLinearMap (RingHom.id Real) H E\na b : Real\nbound : Real → Real\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) (μ.restrict (Set.uIoc a b))) (nhds x₀)\nhF_int : IntervalIntegrable (F x₀) μ a b\nhF'_meas : MeasureTheory.AEStronglyMeasurable F' (μ.restrict (Set.uIoc a b))\nh_lip : Filter.Eventually (fun t => LipschitzOnWith (Real.nnabs (bound t)) (fun x => F x t) (Metric.ball x₀ ε)) (MeasureTheory.ae (μ.restrict (Set.uIoc a b)))\nbound_integrable : IntervalIntegrable bound μ a b\nh_diff : Filter.Eventually (fun t => HasFDerivAt (fun x => F x t) (F' t) x₀) (MeasureTheory.ae (μ.restrict (Set.uIoc a b)))\n⊢ And (IntervalIntegrable F' μ a b) (HasFDerivAt (fun x => intervalIntegral (fun t => F x t) a b μ) (intervalIntegral (fun t => F' t) a b μ) x₀)","decl":"/-- Differentiation under integral of `x ↦ ∫ x in a..b, F x t` at a given point `x₀ ∈ (a,b)`,\nassuming `F x₀` is integrable on `(a,b)`, that `x ↦ F x t` is Lipschitz on a ball around `x₀`\nfor almost every `t` (with a ball radius independent of `t`) with integrable Lipschitz bound,\nand `F x` is a.e.-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem hasFDerivAt_integral_of_dominated_loc_of_lip_interval [NormedSpace ℝ H] {μ : Measure ℝ}\n    {F : H → ℝ → E} {F' : ℝ → H →L[ℝ] E} {a b : ℝ} {bound : ℝ → ℝ} (ε_pos : 0 < ε)\n    (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) <| μ.restrict (Ι a b))\n    (hF_int : IntervalIntegrable (F x₀) μ a b)\n    (hF'_meas : AEStronglyMeasurable F' <| μ.restrict (Ι a b))\n    (h_lip : ∀ᵐ t ∂μ.restrict (Ι a b),\n      LipschitzOnWith (Real.nnabs <| bound t) (F · t) (ball x₀ ε))\n    (bound_integrable : IntervalIntegrable bound μ a b)\n    (h_diff : ∀ᵐ t ∂μ.restrict (Ι a b), HasFDerivAt (F · t) (F' t) x₀) :\n    IntervalIntegrable F' μ a b ∧\n      HasFDerivAt (fun x ↦ ∫ t in a..b, F x t ∂μ) (∫ t in a..b, F' t ∂μ) x₀ := by\n  simp_rw [AEStronglyMeasurable.aestronglyMeasurable_uIoc_iff, eventually_and] at hF_meas hF'_meas\n  rw [ae_restrict_uIoc_iff] at h_lip h_diff\n  have H₁ :=\n    hasFDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas.1 hF_int.1 hF'_meas.1 h_lip.1\n      bound_integrable.1 h_diff.1\n  have H₂ :=\n    hasFDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas.2 hF_int.2 hF'_meas.2 h_lip.2\n      bound_integrable.2 h_diff.2\n  exact ⟨⟨H₁.1, H₂.1⟩, H₁.2.sub H₂.2⟩\n\n"}
{"name":"hasFDerivAt_integral_of_dominated_of_fderiv_le","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"α : Type u_1\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_2\ninst✝⁵ : RCLike 𝕜\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : NormedSpace 𝕜 E\nH : Type u_4\ninst✝¹ : NormedAddCommGroup H\ninst✝ : NormedSpace 𝕜 H\nF : H → α → E\nx₀ : H\nbound : α → Real\nε : Real\nF' : H → α → ContinuousLinearMap (RingHom.id 𝕜) H E\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) μ) (nhds x₀)\nhF_int : MeasureTheory.Integrable (F x₀) μ\nhF'_meas : MeasureTheory.AEStronglyMeasurable (F' x₀) μ\nh_bound : Filter.Eventually (fun a => ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → LE.le (Norm.norm (F' x a)) (bound a)) (MeasureTheory.ae μ)\nbound_integrable : MeasureTheory.Integrable bound μ\nh_diff : Filter.Eventually (fun a => ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → HasFDerivAt (fun x => F x a) (F' x a) x) (MeasureTheory.ae μ)\n⊢ HasFDerivAt (fun x => MeasureTheory.integral μ fun a => F x a) (MeasureTheory.integral μ fun a => F' x₀ a) x₀","decl":"/-- Differentiation under integral of `x ↦ ∫ F x a` at a given point `x₀`, assuming\n`F x₀` is integrable, `x ↦ F x a` is differentiable on a ball around `x₀` for ae `a` with\nderivative norm uniformly bounded by an integrable function (the ball radius is independent of `a`),\nand `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem hasFDerivAt_integral_of_dominated_of_fderiv_le {F' : H → α → H →L[𝕜] E} (ε_pos : 0 < ε)\n    (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) μ) (hF_int : Integrable (F x₀) μ)\n    (hF'_meas : AEStronglyMeasurable (F' x₀) μ)\n    (h_bound : ∀ᵐ a ∂μ, ∀ x ∈ ball x₀ ε, ‖F' x a‖ ≤ bound a)\n    (bound_integrable : Integrable (bound : α → ℝ) μ)\n    (h_diff : ∀ᵐ a ∂μ, ∀ x ∈ ball x₀ ε, HasFDerivAt (F · a) (F' x a) x) :\n    HasFDerivAt (fun x ↦ ∫ a, F x a ∂μ) (∫ a, F' x₀ a ∂μ) x₀ := by\n  letI : NormedSpace ℝ H := NormedSpace.restrictScalars ℝ 𝕜 H\n  have x₀_in : x₀ ∈ ball x₀ ε := mem_ball_self ε_pos\n  have diff_x₀ : ∀ᵐ a ∂μ, HasFDerivAt (F · a) (F' x₀ a) x₀ :=\n    h_diff.mono fun a ha ↦ ha x₀ x₀_in\n  have : ∀ᵐ a ∂μ, LipschitzOnWith (Real.nnabs (bound a)) (F · a) (ball x₀ ε) := by\n    apply (h_diff.and h_bound).mono\n    rintro a ⟨ha_deriv, ha_bound⟩\n    refine (convex_ball _ _).lipschitzOnWith_of_nnnorm_hasFDerivWithin_le\n      (fun x x_in ↦ (ha_deriv x x_in).hasFDerivWithinAt) fun x x_in ↦ ?_\n    rw [← NNReal.coe_le_coe, coe_nnnorm, Real.coe_nnabs]\n    exact (ha_bound x x_in).trans (le_abs_self _)\n  exact (hasFDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas hF_int hF'_meas this\n    bound_integrable diff_x₀).2\n\n"}
{"name":"hasFDerivAt_integral_of_dominated_of_fderiv_le''","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"E : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nH : Type u_4\ninst✝¹ : NormedAddCommGroup H\nx₀ : H\nε : Real\ninst✝ : NormedSpace Real H\nμ : MeasureTheory.Measure Real\nF : H → Real → E\nF' : H → Real → ContinuousLinearMap (RingHom.id Real) H E\na b : Real\nbound : Real → Real\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) (μ.restrict (Set.uIoc a b))) (nhds x₀)\nhF_int : IntervalIntegrable (F x₀) μ a b\nhF'_meas : MeasureTheory.AEStronglyMeasurable (F' x₀) (μ.restrict (Set.uIoc a b))\nh_bound : Filter.Eventually (fun t => ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → LE.le (Norm.norm (F' x t)) (bound t)) (MeasureTheory.ae (μ.restrict (Set.uIoc a b)))\nbound_integrable : IntervalIntegrable bound μ a b\nh_diff : Filter.Eventually (fun t => ∀ (x : H), Membership.mem (Metric.ball x₀ ε) x → HasFDerivAt (fun x => F x t) (F' x t) x) (MeasureTheory.ae (μ.restrict (Set.uIoc a b)))\n⊢ HasFDerivAt (fun x => intervalIntegral (fun t => F x t) a b μ) (intervalIntegral (fun t => F' x₀ t) a b μ) x₀","decl":"/-- Differentiation under integral of `x ↦ ∫ x in a..b, F x a` at a given point `x₀`, assuming\n`F x₀` is integrable on `(a,b)`, `x ↦ F x a` is differentiable on a ball around `x₀` for ae `a` with\nderivative norm uniformly bounded by an integrable function (the ball radius is independent of `a`),\nand `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem hasFDerivAt_integral_of_dominated_of_fderiv_le'' [NormedSpace ℝ H] {μ : Measure ℝ}\n    {F : H → ℝ → E} {F' : H → ℝ → H →L[ℝ] E} {a b : ℝ} {bound : ℝ → ℝ} (ε_pos : 0 < ε)\n    (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) <| μ.restrict (Ι a b))\n    (hF_int : IntervalIntegrable (F x₀) μ a b)\n    (hF'_meas : AEStronglyMeasurable (F' x₀) <| μ.restrict (Ι a b))\n    (h_bound : ∀ᵐ t ∂μ.restrict (Ι a b), ∀ x ∈ ball x₀ ε, ‖F' x t‖ ≤ bound t)\n    (bound_integrable : IntervalIntegrable bound μ a b)\n    (h_diff : ∀ᵐ t ∂μ.restrict (Ι a b), ∀ x ∈ ball x₀ ε, HasFDerivAt (F · t) (F' x t) x) :\n    HasFDerivAt (fun x ↦ ∫ t in a..b, F x t ∂μ) (∫ t in a..b, F' x₀ t ∂μ) x₀ := by\n  rw [ae_restrict_uIoc_iff] at h_diff h_bound\n  simp_rw [AEStronglyMeasurable.aestronglyMeasurable_uIoc_iff, eventually_and] at hF_meas hF'_meas\n  exact\n    (hasFDerivAt_integral_of_dominated_of_fderiv_le ε_pos hF_meas.1 hF_int.1 hF'_meas.1 h_bound.1\n          bound_integrable.1 h_diff.1).sub\n      (hasFDerivAt_integral_of_dominated_of_fderiv_le ε_pos hF_meas.2 hF_int.2 hF'_meas.2 h_bound.2\n        bound_integrable.2 h_diff.2)\n\n"}
{"name":"hasDerivAt_integral_of_dominated_loc_of_lip","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_2\ninst✝³ : RCLike 𝕜\nE : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedSpace 𝕜 E\nbound : α → Real\nε : Real\nF : 𝕜 → α → E\nx₀ : 𝕜\nF' : α → E\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) μ) (nhds x₀)\nhF_int : MeasureTheory.Integrable (F x₀) μ\nhF'_meas : MeasureTheory.AEStronglyMeasurable F' μ\nh_lipsch : Filter.Eventually (fun a => LipschitzOnWith (Real.nnabs (bound a)) (fun x => F x a) (Metric.ball x₀ ε)) (MeasureTheory.ae μ)\nbound_integrable : MeasureTheory.Integrable bound μ\nh_diff : Filter.Eventually (fun a => HasDerivAt (fun x => F x a) (F' a) x₀) (MeasureTheory.ae μ)\n⊢ And (MeasureTheory.Integrable F' μ) (HasDerivAt (fun x => MeasureTheory.integral μ fun a => F x a) (MeasureTheory.integral μ fun a => F' a) x₀)","decl":"/-- Derivative under integral of `x ↦ ∫ F x a` at a given point `x₀ : 𝕜`, `𝕜 = ℝ` or `𝕜 = ℂ`,\nassuming `F x₀` is integrable, `x ↦ F x a` is locally Lipschitz on a ball around `x₀` for ae `a`\n(with ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is\nae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem hasDerivAt_integral_of_dominated_loc_of_lip {F' : α → E} (ε_pos : 0 < ε)\n    (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) μ) (hF_int : Integrable (F x₀) μ)\n    (hF'_meas : AEStronglyMeasurable F' μ)\n    (h_lipsch : ∀ᵐ a ∂μ, LipschitzOnWith (Real.nnabs <| bound a) (F · a) (ball x₀ ε))\n    (bound_integrable : Integrable (bound : α → ℝ) μ)\n    (h_diff : ∀ᵐ a ∂μ, HasDerivAt (F · a) (F' a) x₀) :\n    Integrable F' μ ∧ HasDerivAt (fun x ↦ ∫ a, F x a ∂μ) (∫ a, F' a ∂μ) x₀ := by\n  set L : E →L[𝕜] 𝕜 →L[𝕜] E := ContinuousLinearMap.smulRightL 𝕜 𝕜 E 1\n  replace h_diff : ∀ᵐ a ∂μ, HasFDerivAt (F · a) (L (F' a)) x₀ :=\n    h_diff.mono fun x hx ↦ hx.hasFDerivAt\n  have hm : AEStronglyMeasurable (L ∘ F') μ := L.continuous.comp_aestronglyMeasurable hF'_meas\n  cases'\n    hasFDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas hF_int hm h_lipsch bound_integrable\n      h_diff with\n    hF'_int key\n  replace hF'_int : Integrable F' μ := by\n    rw [← integrable_norm_iff hm] at hF'_int\n    simpa only [L, (· ∘ ·), integrable_norm_iff, hF'_meas, one_mul, norm_one,\n      ContinuousLinearMap.comp_apply, ContinuousLinearMap.coe_restrict_scalarsL',\n      ContinuousLinearMap.norm_restrictScalars, ContinuousLinearMap.norm_smulRightL_apply] using\n      hF'_int\n  refine ⟨hF'_int, ?_⟩\n  by_cases hE : CompleteSpace E; swap\n  · simpa [integral, hE] using hasDerivAt_const x₀ 0\n  simp_rw [hasDerivAt_iff_hasFDerivAt] at h_diff ⊢\n  simpa only [(· ∘ ·), ContinuousLinearMap.integral_comp_comm _ hF'_int] using key\n\n"}
{"name":"hasDerivAt_integral_of_dominated_loc_of_deriv_le","module":"Mathlib.Analysis.Calculus.ParametricIntegral","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_2\ninst✝³ : RCLike 𝕜\nE : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedSpace 𝕜 E\nbound : α → Real\nε : Real\nF : 𝕜 → α → E\nx₀ : 𝕜\nε_pos : LT.lt 0 ε\nhF_meas : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (F x) μ) (nhds x₀)\nhF_int : MeasureTheory.Integrable (F x₀) μ\nF' : 𝕜 → α → E\nhF'_meas : MeasureTheory.AEStronglyMeasurable (F' x₀) μ\nh_bound : Filter.Eventually (fun a => ∀ (x : 𝕜), Membership.mem (Metric.ball x₀ ε) x → LE.le (Norm.norm (F' x a)) (bound a)) (MeasureTheory.ae μ)\nbound_integrable : MeasureTheory.Integrable bound μ\nh_diff : Filter.Eventually (fun a => ∀ (x : 𝕜), Membership.mem (Metric.ball x₀ ε) x → HasDerivAt (fun x => F x a) (F' x a) x) (MeasureTheory.ae μ)\n⊢ And (MeasureTheory.Integrable (F' x₀) μ) (HasDerivAt (fun n => MeasureTheory.integral μ fun a => F n a) (MeasureTheory.integral μ fun a => F' x₀ a) x₀)","decl":"/-- Derivative under integral of `x ↦ ∫ F x a` at a given point `x₀ : ℝ`, assuming\n`F x₀` is integrable, `x ↦ F x a` is differentiable on an interval around `x₀` for ae `a`\n(with interval radius independent of `a`) with derivative uniformly bounded by an integrable\nfunction, and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x₀`. -/\ntheorem hasDerivAt_integral_of_dominated_loc_of_deriv_le (ε_pos : 0 < ε)\n    (hF_meas : ∀ᶠ x in 𝓝 x₀, AEStronglyMeasurable (F x) μ) (hF_int : Integrable (F x₀) μ)\n    {F' : 𝕜 → α → E} (hF'_meas : AEStronglyMeasurable (F' x₀) μ)\n    (h_bound : ∀ᵐ a ∂μ, ∀ x ∈ ball x₀ ε, ‖F' x a‖ ≤ bound a) (bound_integrable : Integrable bound μ)\n    (h_diff : ∀ᵐ a ∂μ, ∀ x ∈ ball x₀ ε, HasDerivAt (F · a) (F' x a) x) :\n    Integrable (F' x₀) μ ∧ HasDerivAt (fun n ↦ ∫ a, F n a ∂μ) (∫ a, F' x₀ a ∂μ) x₀ := by\n  have x₀_in : x₀ ∈ ball x₀ ε := mem_ball_self ε_pos\n  have diff_x₀ : ∀ᵐ a ∂μ, HasDerivAt (F · a) (F' x₀ a) x₀ :=\n    h_diff.mono fun a ha ↦ ha x₀ x₀_in\n  have : ∀ᵐ a ∂μ, LipschitzOnWith (Real.nnabs (bound a)) (fun x : 𝕜 ↦ F x a) (ball x₀ ε) := by\n    apply (h_diff.and h_bound).mono\n    rintro a ⟨ha_deriv, ha_bound⟩\n    refine (convex_ball _ _).lipschitzOnWith_of_nnnorm_hasDerivWithin_le\n      (fun x x_in ↦ (ha_deriv x x_in).hasDerivWithinAt) fun x x_in ↦ ?_\n    rw [← NNReal.coe_le_coe, coe_nnnorm, Real.coe_nnabs]\n    exact (ha_bound x x_in).trans (le_abs_self _)\n  exact\n    hasDerivAt_integral_of_dominated_loc_of_lip ε_pos hF_meas hF_int hF'_meas this bound_integrable\n      diff_x₀\n\n"}
