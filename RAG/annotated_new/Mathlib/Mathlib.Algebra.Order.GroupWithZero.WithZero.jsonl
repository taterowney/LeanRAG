{"name":"instPosMulStrictMonoWithZeroOfMulLeftStrictMono","module":"Mathlib.Algebra.Order.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulLeftStrictMono α\n⊢ PosMulStrictMono (WithZero α)","decl":"instance {α : Type*} [Mul α] [Preorder α] [MulLeftStrictMono α] :\n    PosMulStrictMono (WithZero α) where\n  elim := @fun\n    | ⟨(x : α), hx⟩, 0, (b : α), _ => by\n        simpa only [mul_zero] using WithZero.zero_lt_coe _\n    | ⟨(x : α), hx⟩, (a : α), (b : α), h => by\n        dsimp only\n        norm_cast at h ⊢\n        exact mul_lt_mul_left' h x\n\n"}
{"name":"instMulPosStrictMonoWithZeroOfMulRightStrictMono","module":"Mathlib.Algebra.Order.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulRightStrictMono α\n⊢ MulPosStrictMono (WithZero α)","decl":"open Function in\ninstance {α : Type*} [Mul α] [Preorder α] [MulRightStrictMono α] :\n    MulPosStrictMono (WithZero α) where\n  elim := @fun\n    | ⟨(x : α), hx⟩, 0, (b : α), _ => by\n        simpa only [mul_zero] using WithZero.zero_lt_coe _\n    | ⟨(x : α), hx⟩, (a : α), (b : α), h => by\n        dsimp only\n        norm_cast at h ⊢\n        exact mul_lt_mul_right' h x\n\n"}
{"name":"instPosMulMonoWithZeroOfMulLeftMono","module":"Mathlib.Algebra.Order.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulLeftMono α\n⊢ PosMulMono (WithZero α)","decl":"instance {α : Type*} [Mul α] [Preorder α] [MulLeftMono α] :\n    PosMulMono (WithZero α) where\n  elim := @fun\n    | ⟨0, _⟩, a, b, _ => by\n        simp only [zero_mul, le_refl]\n    | ⟨(x : α), _⟩, 0, _, _ => by\n        simp only [mul_zero, WithZero.zero_le]\n    | ⟨(x : α), _⟩, (a : α), 0, h =>\n        (lt_irrefl 0 (lt_of_lt_of_le (WithZero.zero_lt_coe a) h)).elim\n    | ⟨(x : α), hx⟩, (a : α), (b : α), h => by\n        dsimp only\n        norm_cast at h ⊢\n        exact mul_le_mul_left' h x\n\n-- This makes `lt_mul_of_le_of_one_lt'` work on `ℤₘ₀`\n"}
{"name":"instMulPosMonoWithZeroOfMulRightMono","module":"Mathlib.Algebra.Order.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝² : Mul α\ninst✝¹ : Preorder α\ninst✝ : MulRightMono α\n⊢ MulPosMono (WithZero α)","decl":"open Function in\ninstance {α : Type*} [Mul α] [Preorder α] [MulRightMono α] :\n    MulPosMono (WithZero α) where\n  elim := @fun\n    | ⟨0, _⟩, a, b, _ => by\n        simp only [mul_zero, le_refl]\n    | ⟨(x : α), _⟩, 0, _, _ => by\n        simp only [zero_mul, WithZero.zero_le]\n    | ⟨(x : α), _⟩, (a : α), 0, h =>\n        (lt_irrefl 0 (lt_of_lt_of_le (WithZero.zero_lt_coe a) h)).elim\n    | ⟨(x : α), hx⟩, (a : α), (b : α), h => by\n        dsimp only\n        norm_cast at h ⊢\n        exact mul_le_mul_right' h x\n"}
