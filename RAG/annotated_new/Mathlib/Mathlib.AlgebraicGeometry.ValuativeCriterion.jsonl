{"name":"AlgebraicGeometry.ValuativeCommSq.commSq","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.ValuativeCommSq f\n⊢ CategoryTheory.CommSq self.i₁ (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (algebraMap self.R self.K))) f self.i₂","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCommSq.isFractionRing","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.ValuativeCommSq f\n⊢ IsFractionRing self.R self.K","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCommSq.mk.sizeOf_spec","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nR : Type u\ncommRing : CommRing R\ndomain : IsDomain R\nvaluationRing : ValuationRing R\nK : Type u\nfield : Field K\nalgebra : Algebra R K\nisFractionRing : IsFractionRing R K\ni₁ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of K)) X\ni₂ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of R)) Y\ncommSq : CategoryTheory.CommSq i₁ (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂\n⊢ Eq (SizeOf.sizeOf (AlgebraicGeometry.ValuativeCommSq.mk R K i₁ i₂ commSq)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf R)) (SizeOf.sizeOf commRing)) (SizeOf.sizeOf domain)) (SizeOf.sizeOf valuationRing)) (SizeOf.sizeOf K)) (SizeOf.sizeOf field)) (SizeOf.sizeOf algebra)) (SizeOf.sizeOf isFractionRing)) (SizeOf.sizeOf i₁)) (SizeOf.sizeOf i₂)) (SizeOf.sizeOf commSq))","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCommSq.mk.injEq","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nR✝ : Type u\ncommRing✝ : CommRing R✝\ndomain✝ : IsDomain R✝\nvaluationRing✝ : ValuationRing R✝\nK✝ : Type u\nfield✝ : Field K✝\nalgebra✝ : Algebra R✝ K✝\nisFractionRing✝ : IsFractionRing R✝ K✝\ni₁✝ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of K✝)) X\ni₂✝ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of R✝)) Y\ncommSq✝ : CategoryTheory.CommSq i₁✝ (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (algebraMap R✝ K✝))) f i₂✝\nR : Type u\ncommRing : CommRing R\ndomain : IsDomain R\nvaluationRing : ValuationRing R\nK : Type u\nfield : Field K\nalgebra : Algebra R K\nisFractionRing : IsFractionRing R K\ni₁ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of K)) X\ni₂ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of R)) Y\ncommSq : CategoryTheory.CommSq i₁ (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂\n⊢ Eq (Eq (AlgebraicGeometry.ValuativeCommSq.mk R✝ K✝ i₁✝ i₂✝ commSq✝) (AlgebraicGeometry.ValuativeCommSq.mk R K i₁ i₂ commSq)) (And (Eq R✝ R) (And (HEq commRing✝ commRing) (And (Eq K✝ K) (And (HEq field✝ field) (And (HEq algebra✝ algebra) (And (HEq i₁✝ i₁) (HEq i₂✝ i₂)))))))","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCommSq.valuationRing","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.ValuativeCommSq f\n⊢ ValuationRing self.R","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCommSq.mk.inj","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nR✝ : Type u\ncommRing✝ : CommRing R✝\ndomain✝ : IsDomain R✝\nvaluationRing✝ : ValuationRing R✝\nK✝ : Type u\nfield✝ : Field K✝\nalgebra✝ : Algebra R✝ K✝\nisFractionRing✝ : IsFractionRing R✝ K✝\ni₁✝ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of K✝)) X\ni₂✝ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of R✝)) Y\ncommSq✝ : CategoryTheory.CommSq i₁✝ (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (algebraMap R✝ K✝))) f i₂✝\nR : Type u\ncommRing : CommRing R\ndomain : IsDomain R\nvaluationRing : ValuationRing R\nK : Type u\nfield : Field K\nalgebra : Algebra R K\nisFractionRing : IsFractionRing R K\ni₁ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of K)) X\ni₂ : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of R)) Y\ncommSq : CategoryTheory.CommSq i₁ (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂\nx✝ : Eq (AlgebraicGeometry.ValuativeCommSq.mk R✝ K✝ i₁✝ i₂✝ commSq✝) (AlgebraicGeometry.ValuativeCommSq.mk R K i₁ i₂ commSq)\n⊢ And (Eq R✝ R) (And (HEq commRing✝ commRing) (And (Eq K✝ K) (And (HEq field✝ field) (And (HEq algebra✝ algebra) (And (HEq i₁✝ i₁) (HEq i₂✝ i₂))))))","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCommSq.domain","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.ValuativeCommSq f\n⊢ IsDomain self.R","decl":"/--\nA valuative commutative square over a morphism `f : X ⟶ Y` is a square\n```\nSpec K ⟶ Y\n  |       |\n  ↓       ↓\nSpec R ⟶ X\n```\nwhere `R` is a valuation ring, and `K` is its ring of fractions.\n\nWe are interested in finding lifts `Spec R ⟶ Y` of this diagram.\n-/\nstructure ValuativeCommSq {X Y : Scheme.{u}} (f : X ⟶ Y) where\n  /-- The valuation ring of a valuative commutative square. -/\n  R : Type u\n  [commRing : CommRing R]\n  [domain : IsDomain R]\n  [valuationRing : ValuationRing R]\n  /-- The field of fractions of a valuative commutative square. -/\n  K : Type u\n  [field : Field K]\n  [algebra : Algebra R K]\n  [isFractionRing : IsFractionRing R K]\n  /-- The top map in a valuative commutative map. -/\n  (i₁ : Spec (.of K) ⟶ X)\n  /-- The bottom map in a valuative commutative map. -/\n  (i₂ : Spec (.of R) ⟶ Y)\n  (commSq : CommSq i₁ (Spec.map (CommRingCat.ofHom (algebraMap R K))) f i₂)\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.iff","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Iff (AlgebraicGeometry.ValuativeCriterion f) (And (AlgebraicGeometry.ValuativeCriterion.Existence f) (AlgebraicGeometry.ValuativeCriterion.Uniqueness f))","decl":"lemma ValuativeCriterion.iff {f : X ⟶ Y} :\n    ValuativeCriterion f ↔ Existence f ∧ Uniqueness f := by\n  show (∀ _, _) ↔ (∀ _, _) ∧ (∀ _, _)\n  simp_rw [← forall_and, unique_iff_subsingleton_and_nonempty, and_comm, CommSq.HasLift.iff]\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.eq","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"⊢ Eq AlgebraicGeometry.ValuativeCriterion (Min.min AlgebraicGeometry.ValuativeCriterion.Existence AlgebraicGeometry.ValuativeCriterion.Uniqueness)","decl":"lemma ValuativeCriterion.eq :\n    ValuativeCriterion = Existence ⊓ Uniqueness := by\n  ext X Y f\n  exact iff\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.existence","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nh : AlgebraicGeometry.ValuativeCriterion f\n⊢ AlgebraicGeometry.ValuativeCriterion.Existence f","decl":"lemma ValuativeCriterion.existence {f : X ⟶ Y} (h : ValuativeCriterion f) :\n    ValuativeCriterion.Existence f := (iff.mp h).1\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.uniqueness","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nh : AlgebraicGeometry.ValuativeCriterion f\n⊢ AlgebraicGeometry.ValuativeCriterion.Uniqueness f","decl":"lemma ValuativeCriterion.uniqueness {f : X ⟶ Y} (h : ValuativeCriterion f) :\n    ValuativeCriterion.Uniqueness f := (iff.mp h).2\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.Existence.specializingMap","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.ValuativeCriterion.Existence f\n⊢ SpecializingMap ⇑f.base","decl":"@[stacks 01KE]\nlemma specializingMap (H : ValuativeCriterion.Existence f) :\n    SpecializingMap f.base := by\n  intro x' y h\n  let stalk_y_to_residue_x' : Y.presheaf.stalk y ⟶ X.residueField x' :=\n    Y.presheaf.stalkSpecializes h ≫ f.stalkMap x' ≫ X.residue x'\n  obtain ⟨A, hA, hA_local⟩ := exists_factor_valuationRing stalk_y_to_residue_x'.hom\n  let stalk_y_to_A : Y.presheaf.stalk y ⟶ .of A :=\n    CommRingCat.ofHom (stalk_y_to_residue_x'.hom.codRestrict _ hA)\n  have w : X.fromSpecResidueField x' ≫ f =\n      Spec.map (CommRingCat.ofHom (algebraMap A (X.residueField x'))) ≫\n        Spec.map stalk_y_to_A ≫ Y.fromSpecStalk y := by\n    rw [Scheme.fromSpecResidueField, Category.assoc, ← Scheme.Spec_map_stalkMap_fromSpecStalk,\n      ← Scheme.Spec_map_stalkSpecializes_fromSpecStalk h]\n    simp_rw [← Spec.map_comp_assoc]\n    rfl\n  obtain ⟨l, hl₁, hl₂⟩ := (H { R := A, K := X.residueField x', commSq := ⟨w⟩ }).exists_lift\n  dsimp only at hl₁ hl₂\n  refine ⟨l.base (closedPoint A), ?_, ?_⟩\n  · simp_rw [← Scheme.fromSpecResidueField_apply x' (closedPoint (X.residueField x')), ← hl₁]\n    exact (specializes_closedPoint _).map l.base.2\n  · rw [← Scheme.comp_base_apply, hl₂]\n    simp only [Scheme.comp_coeBase, TopCat.coe_comp, Function.comp_apply]\n    have : (Spec.map stalk_y_to_A).base (closedPoint A) = closedPoint (Y.presheaf.stalk y) :=\n      comap_closedPoint (S := A) (stalk_y_to_residue_x'.hom.codRestrict A.toSubring hA)\n    rw [this, Y.fromSpecStalk_closedPoint]\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.Existence.instIsLocalHomCarrierRingHomHomHomCommRingCat","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"R S : CommRingCat\ne : CategoryTheory.Iso R S\n⊢ IsLocalHom (CommRingCat.Hom.hom e.hom)","decl":"instance {R S : CommRingCat} (e : R ≅ S) : IsLocalHom e.hom.hom :=\n  isLocalHom_of_isIso _\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.Existence.of_specializingMap","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nH : (AlgebraicGeometry.topologically @SpecializingMap).universally f\n⊢ AlgebraicGeometry.ValuativeCriterion.Existence f","decl":"lemma of_specializingMap (H : (topologically @SpecializingMap).universally f) :\n    ValuativeCriterion.Existence f := by\n  rintro ⟨R, K, i₁, i₂, ⟨w⟩⟩\n  haveI : IsDomain (CommRingCat.of R) := ‹_›\n  haveI : ValuationRing (CommRingCat.of R) := ‹_›\n  letI : Field (CommRingCat.of K) := ‹_›\n  replace H := H (pullback.snd i₂ f) i₂ (pullback.fst i₂ f) (.of_hasPullback i₂ f)\n  let lft := pullback.lift (Spec.map (CommRingCat.ofHom (algebraMap R K))) i₁ w.symm\n  obtain ⟨x, h₁, h₂⟩ := @H (lft.base (closedPoint _)) _ (specializes_closedPoint (R := R) _)\n  let e : CommRingCat.of R ≅ (Spec (.of R)).presheaf.stalk ((pullback.fst i₂ f).base x) :=\n    (stalkClosedPointIso (.of R)).symm ≪≫\n      (Spec (.of R)).presheaf.stalkCongr (.of_eq h₂.symm)\n  let α := e.hom ≫ (pullback.fst i₂ f).stalkMap x\n  have : IsLocalHom e.hom.hom := isLocalHom_of_isIso e.hom\n  have : IsLocalHom α.hom := inferInstanceAs\n    (IsLocalHom (((pullback.fst i₂ f).stalkMap x).hom.comp e.hom.hom))\n  let β := (pullback i₂ f).presheaf.stalkSpecializes h₁ ≫ Scheme.stalkClosedPointTo lft\n  have hαβ : α ≫ β = CommRingCat.ofHom (algebraMap R K) := by\n    simp only [CommRingCat.coe_of, Iso.trans_hom, Iso.symm_hom, TopCat.Presheaf.stalkCongr_hom,\n      Category.assoc, α, e, β, stalkClosedPointIso_inv, StructureSheaf.toStalk]\n    show (Scheme.ΓSpecIso (.of R)).inv ≫ (Spec (.of R)).presheaf.germ _ _ _ ≫ _ = _\n    simp only [TopCat.Presheaf.germ_stalkSpecializes_assoc, Scheme.stalkMap_germ_assoc,\n      TopologicalSpace.Opens.map_top]\n    erw [Scheme.germ_stalkClosedPointTo lft ⊤ trivial,\n      ← Scheme.comp_app_assoc lft (pullback.fst i₂ f)]\n    rw [pullback.lift_fst]\n    simp\n  have hbij := (bijective_rangeRestrict_comp_of_valuationRing (R := R) (K := K) α.hom β.hom\n    (CommRingCat.hom_ext_iff.mp hαβ))\n  let φ : (pullback i₂ f).presheaf.stalk x ⟶ CommRingCat.of R := CommRingCat.ofHom <|\n    (RingEquiv.ofBijective _ hbij).symm.toRingHom.comp β.hom.rangeRestrict\n  have hαφ : α ≫ φ = 𝟙 _ := by ext x; exact (RingEquiv.ofBijective _ hbij).symm_apply_apply x\n  have hαφ' : (pullback.fst i₂ f).stalkMap x ≫ φ = e.inv := by\n    rw [← cancel_epi e.hom, ← Category.assoc, hαφ, e.hom_inv_id]\n  have hφβ : φ ≫ CommRingCat.ofHom (algebraMap R K) = β :=\n    hαβ ▸ CommRingCat.hom_ext (RingHom.ext fun x ↦ congr_arg Subtype.val\n      ((RingEquiv.ofBijective _ hbij).apply_symm_apply (β.hom.rangeRestrict x)))\n  refine ⟨⟨⟨Spec.map ((pullback.snd i₂ f).stalkMap x ≫ φ) ≫ X.fromSpecStalk _, ?_, ?_⟩⟩⟩\n  · simp only [← Spec.map_comp_assoc, Category.assoc, hφβ]\n    simp only [Spec.map_comp, Category.assoc, Scheme.Spec_map_stalkMap_fromSpecStalk,\n      Scheme.Spec_map_stalkSpecializes_fromSpecStalk_assoc, β]\n    -- This next line only fires as `rw`, not `simp`:\n    rw [Scheme.Spec_stalkClosedPointTo_fromSpecStalk_assoc]\n    simp [lft]\n  · simp only [Spec.map_comp, Category.assoc, Scheme.Spec_map_stalkMap_fromSpecStalk,\n      ← pullback.condition]\n    rw [← Scheme.Spec_map_stalkMap_fromSpecStalk_assoc, ← Spec.map_comp_assoc, hαφ']\n    simp only [Iso.trans_inv, TopCat.Presheaf.stalkCongr_inv, Iso.symm_inv, Spec.map_comp,\n      Category.assoc, Scheme.Spec_map_stalkSpecializes_fromSpecStalk_assoc, e]\n    rw [← Spec_stalkClosedPointIso, ← Spec.map_comp_assoc,\n      Iso.inv_hom_id, Spec.map_id, Category.id_comp]\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.Existence.stableUnderBaseChange","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"⊢ AlgebraicGeometry.ValuativeCriterion.Existence.IsStableUnderBaseChange","decl":"instance stableUnderBaseChange : ValuativeCriterion.Existence.IsStableUnderBaseChange := by\n  constructor\n  intros Y' X X' Y  Y'_to_Y f X'_to_X f' hP hf commSq\n  let commSq' : ValuativeCommSq f :=\n  { R := commSq.R\n    K := commSq.K\n    i₁ := commSq.i₁ ≫ X'_to_X\n    i₂ := commSq.i₂ ≫ Y'_to_Y\n    commSq := ⟨by simp only [Category.assoc, hP.w, reassoc_of% commSq.commSq.w]⟩ }\n  obtain ⟨l₀, hl₁, hl₂⟩ := (hf commSq').exists_lift\n  refine ⟨⟨⟨hP.lift l₀ commSq.i₂ (by simp_all only [commSq']), ?_, hP.lift_snd _ _ _⟩⟩⟩\n  apply hP.hom_ext\n  · simpa\n  · simp only [Category.assoc]\n    rw [hP.lift_snd]\n    rw [commSq.commSq.w]\n\n"}
{"name":"AlgebraicGeometry.ValuativeCriterion.Existence.eq","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"⊢ Eq AlgebraicGeometry.ValuativeCriterion.Existence (AlgebraicGeometry.topologically @SpecializingMap).universally","decl":"@[stacks 01KE]\nprotected lemma eq :\n    ValuativeCriterion.Existence = (topologically @SpecializingMap).universally := by\n  ext\n  constructor\n  · intro _\n    apply MorphismProperty.universally_mono\n    · apply specializingMap\n    · rwa [MorphismProperty.IsStableUnderBaseChange.universally_eq]\n  · apply of_specializingMap\n\n"}
{"name":"AlgebraicGeometry.UniversallyClosed.eq_valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"⊢ Eq (@AlgebraicGeometry.UniversallyClosed) (Min.min AlgebraicGeometry.ValuativeCriterion.Existence @AlgebraicGeometry.QuasiCompact)","decl":"/-- The **valuative criterion** for universally closed morphisms. -/\n@[stacks 01KF]\nlemma UniversallyClosed.eq_valuativeCriterion :\n    @UniversallyClosed = ValuativeCriterion.Existence ⊓ @QuasiCompact := by\n  rw [universallyClosed_eq_universallySpecializing, ValuativeCriterion.Existence.eq]\n\n"}
{"name":"AlgebraicGeometry.UniversallyClosed.of_valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.QuasiCompact f\nhf : AlgebraicGeometry.ValuativeCriterion.Existence f\n⊢ AlgebraicGeometry.UniversallyClosed f","decl":"/-- The **valuative criterion** for universally closed morphisms. -/\n@[stacks 01KF]\nlemma UniversallyClosed.of_valuativeCriterion [QuasiCompact f]\n    (hf : ValuativeCriterion.Existence f) : UniversallyClosed f := by\n  rw [eq_valuativeCriterion]\n  exact ⟨hf, ‹_›⟩\n\n"}
{"name":"AlgebraicGeometry.IsSeparated.of_valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.QuasiSeparated f\nhf : AlgebraicGeometry.ValuativeCriterion.Uniqueness f\n⊢ AlgebraicGeometry.IsSeparated f","decl":"/-- The **valuative criterion** for separated morphisms. -/\n@[stacks 01L0]\nlemma IsSeparated.of_valuativeCriterion [QuasiSeparated f]\n    (hf : ValuativeCriterion.Uniqueness f) : IsSeparated f where\n  diagonal_isClosedImmersion := by\n    suffices h : ValuativeCriterion.Existence (pullback.diagonal f) by\n      have : QuasiCompact (pullback.diagonal f) :=\n        AlgebraicGeometry.QuasiSeparated.diagonalQuasiCompact\n      apply IsClosedImmersion.of_isPreimmersion\n      apply IsClosedMap.isClosed_range\n      apply (topologically @IsClosedMap).universally_le\n      exact (UniversallyClosed.of_valuativeCriterion (pullback.diagonal f) h).out\n    intro S\n    have hc : CommSq S.i₁ (Spec.map (CommRingCat.ofHom (algebraMap S.R S.K)))\n        f (S.i₂ ≫ pullback.fst f f ≫ f) := ⟨by simp [← S.commSq.w_assoc]⟩\n    let S' : ValuativeCommSq f := ⟨S.R, S.K, S.i₁, S.i₂ ≫ pullback.fst f f ≫ f, hc⟩\n    have : Subsingleton S'.commSq.LiftStruct := hf S'\n    let S'l₁ : S'.commSq.LiftStruct := ⟨S.i₂ ≫ pullback.fst f f,\n      by simp [S', ← S.commSq.w_assoc], by simp [S']⟩\n    let S'l₂ : S'.commSq.LiftStruct := ⟨S.i₂ ≫ pullback.snd f f,\n      by simp [S', ← S.commSq.w_assoc], by simp [S', pullback.condition]⟩\n    have h₁₂ : S'l₁ = S'l₂ := Subsingleton.elim _ _\n    constructor\n    constructor\n    refine ⟨S.i₂ ≫ pullback.fst _ _, ?_, ?_⟩\n    · simp [← S.commSq.w_assoc]\n    · simp\n      apply IsPullback.hom_ext (IsPullback.of_hasPullback _ _)\n      · simp\n      · simp only [Category.assoc, pullback.diagonal_snd, Category.comp_id]\n        exact congrArg CommSq.LiftStruct.l h₁₂\n\n"}
{"name":"AlgebraicGeometry.IsSeparated.valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝ : AlgebraicGeometry.IsSeparated f\n⊢ AlgebraicGeometry.ValuativeCriterion.Uniqueness f","decl":"@[stacks 01KZ]\nlemma IsSeparated.valuativeCriterion [IsSeparated f] : ValuativeCriterion.Uniqueness f := by\n  intros S\n  constructor\n  rintro ⟨l₁, hl₁, hl₁'⟩ ⟨l₂, hl₂, hl₂'⟩\n  ext : 1\n  dsimp at *\n  have h := hl₁'.trans hl₂'.symm\n  let Z := pullback (pullback.diagonal f) (pullback.lift l₁ l₂ h)\n  let g : Z ⟶ Spec (.of S.R) := pullback.snd _ _\n  have : IsClosedImmersion g := MorphismProperty.pullback_snd _ _ inferInstance\n  have hZ : IsAffine Z := by\n    rw [@HasAffineProperty.iff_of_isAffine @IsClosedImmersion] at this\n    exact this.left\n  suffices IsIso g by\n    rw [← cancel_epi g]\n    conv_lhs => rw [← pullback.lift_fst l₁ l₂ h, ← pullback.condition_assoc]\n    conv_rhs => rw [← pullback.lift_snd l₁ l₂ h, ← pullback.condition_assoc]\n    simp\n  suffices h : Function.Bijective (g.appTop) by\n    refine (HasAffineProperty.iff_of_isAffine (P := MorphismProperty.isomorphisms Scheme)).mpr ?_\n    exact ⟨hZ, (ConcreteCategory.isIso_iff_bijective _).mpr h⟩\n  constructor\n  · let l : Spec (.of S.K) ⟶ Z := by\n      apply pullback.lift S.i₁ (Spec.map (CommRingCat.ofHom (algebraMap S.R S.K)))\n      apply IsPullback.hom_ext (IsPullback.of_hasPullback _ _)\n      simpa using hl₁.symm\n      simpa using hl₂.symm\n    have hg : l ≫ g = Spec.map (CommRingCat.ofHom (algebraMap S.R S.K)) :=\n      pullback.lift_snd _ _ _\n    have : Function.Injective ((l ≫ g).appTop) := by\n      rw [hg]\n      let e := arrowIsoΓSpecOfIsAffine (CommRingCat.ofHom <| algebraMap S.R S.K)\n      let P : MorphismProperty CommRingCat :=\n        RingHom.toMorphismProperty <| fun f ↦ Function.Injective f\n      have : (RingHom.toMorphismProperty <| fun f ↦ Function.Injective f).RespectsIso :=\n        RingHom.toMorphismProperty_respectsIso_iff.mp RingHom.injective_respectsIso\n      show P _\n      rw [← MorphismProperty.arrow_mk_iso_iff (P := P) e]\n      exact NoZeroSMulDivisors.algebraMap_injective S.R S.K\n    rw [Scheme.comp_appTop] at this\n    exact Function.Injective.of_comp this\n  · rw [@HasAffineProperty.iff_of_isAffine @IsClosedImmersion] at this\n    exact this.right\n\n"}
{"name":"AlgebraicGeometry.IsSeparated.eq_valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"⊢ Eq (@AlgebraicGeometry.IsSeparated) (Min.min AlgebraicGeometry.ValuativeCriterion.Uniqueness @AlgebraicGeometry.QuasiSeparated)","decl":"/-- The **valuative criterion** for separated morphisms. -/\nlemma IsSeparated.eq_valuativeCriterion :\n    @IsSeparated = ValuativeCriterion.Uniqueness ⊓ @QuasiSeparated := by\n  ext X Y f\n  exact ⟨fun _ ↦ ⟨IsSeparated.valuativeCriterion f, inferInstance⟩,\n    fun ⟨H, _⟩ ↦ .of_valuativeCriterion f H⟩\n\n"}
{"name":"AlgebraicGeometry.IsProper.eq_valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"⊢ Eq (@AlgebraicGeometry.IsProper) (Min.min (Min.min (Min.min AlgebraicGeometry.ValuativeCriterion @AlgebraicGeometry.QuasiCompact) @AlgebraicGeometry.QuasiSeparated) @AlgebraicGeometry.LocallyOfFiniteType)","decl":"/-- The **valuative criterion** for proper morphisms. -/\n@[stacks 0BX5]\nlemma IsProper.eq_valuativeCriterion :\n    @IsProper = ValuativeCriterion ⊓ @QuasiCompact ⊓ @QuasiSeparated ⊓ @LocallyOfFiniteType := by\n  rw [isProper_eq, IsSeparated.eq_valuativeCriterion, ValuativeCriterion.eq,\n    UniversallyClosed.eq_valuativeCriterion]\n  simp_rw [inf_assoc]\n  ext X Y f\n  show _ ∧ _ ∧ _ ∧ _ ∧ _ ↔ _ ∧ _ ∧ _ ∧ _ ∧ _\n  tauto\n\n"}
{"name":"AlgebraicGeometry.IsProper.of_valuativeCriterion","module":"Mathlib.AlgebraicGeometry.ValuativeCriterion","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\ninst✝² : AlgebraicGeometry.QuasiCompact f\ninst✝¹ : AlgebraicGeometry.QuasiSeparated f\ninst✝ : AlgebraicGeometry.LocallyOfFiniteType f\nH : AlgebraicGeometry.ValuativeCriterion f\n⊢ AlgebraicGeometry.IsProper f","decl":"/-- The **valuative criterion** for proper morphisms. -/\n@[stacks 0BX5]\nlemma IsProper.of_valuativeCriterion [QuasiCompact f] [QuasiSeparated f] [LocallyOfFiniteType f]\n    (H : ValuativeCriterion f) : IsProper f := by\n  rw [eq_valuativeCriterion]\n  exact ⟨⟨⟨‹_›, ‹_›⟩, ‹_›⟩, ‹_›⟩\n\n"}
