{"name":"Set.mem_op","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set α\na : Opposite α\n⊢ Iff (Membership.mem s.op a) (Membership.mem s (Opposite.unop a))","decl":"@[simp]\ntheorem mem_op {s : Set α} {a : αᵒᵖ} : a ∈ s.op ↔ unop a ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Set.op_mem_op","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set α\na : α\n⊢ Iff (Membership.mem s.op { unop := a }) (Membership.mem s a)","decl":"@[simp 1100]\ntheorem op_mem_op {s : Set α} {a : α} : op a ∈ s.op ↔ a ∈ s := by rfl\n\n"}
{"name":"Set.mem_unop","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set (Opposite α)\na : α\n⊢ Iff (Membership.mem s.unop a) (Membership.mem s { unop := a })","decl":"@[simp]\ntheorem mem_unop {s : Set αᵒᵖ} {a : α} : a ∈ s.unop ↔ op a ∈ s :=\n  Iff.rfl\n\n"}
{"name":"Set.unop_mem_unop","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set (Opposite α)\na : Opposite α\n⊢ Iff (Membership.mem s.unop (Opposite.unop a)) (Membership.mem s a)","decl":"@[simp 1100]\ntheorem unop_mem_unop {s : Set αᵒᵖ} {a : αᵒᵖ} : unop a ∈ s.unop ↔ a ∈ s := by rfl\n\n"}
{"name":"Set.op_unop","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set α\n⊢ Eq s.op.unop s","decl":"@[simp]\ntheorem op_unop (s : Set α) : s.op.unop = s := rfl\n\n"}
{"name":"Set.unop_op","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set (Opposite α)\n⊢ Eq s.unop.op s","decl":"@[simp]\ntheorem unop_op (s : Set αᵒᵖ) : s.unop.op = s := rfl\n\n"}
{"name":"Set.opEquiv_self_apply_coe","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set α\nx : ↑s.op\n⊢ Eq (↑(s.opEquiv_self x)) (Opposite.unop ↑x)","decl":"/-- The members of the opposite of a set are in bijection with the members of the set itself. -/\n@[simps]\ndef opEquiv_self (s : Set α) : s.op ≃ s :=\n  ⟨fun x ↦ ⟨unop x, x.2⟩, fun x ↦ ⟨op x, x.2⟩, fun _ ↦ rfl, fun _ ↦ rfl⟩\n\n"}
{"name":"Set.opEquiv_self_symm_apply_coe","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set α\nx : ↑s\n⊢ Eq ↑(s.opEquiv_self.symm x) { unop := ↑x }","decl":"/-- The members of the opposite of a set are in bijection with the members of the set itself. -/\n@[simps]\ndef opEquiv_self (s : Set α) : s.op ≃ s :=\n  ⟨fun x ↦ ⟨unop x, x.2⟩, fun x ↦ ⟨op x, x.2⟩, fun _ ↦ rfl, fun _ ↦ rfl⟩\n\n"}
{"name":"Set.opEquiv_symm_apply","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set (Opposite α)\n⊢ Eq (Set.opEquiv.symm s) s.unop","decl":"/-- Taking opposites as an equivalence of powersets. -/\n@[simps]\ndef opEquiv : Set α ≃ Set αᵒᵖ :=\n  ⟨Set.op, Set.unop, op_unop, unop_op⟩\n\n"}
{"name":"Set.opEquiv_apply","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\ns : Set α\n⊢ Eq (Set.opEquiv s) s.op","decl":"/-- Taking opposites as an equivalence of powersets. -/\n@[simps]\ndef opEquiv : Set α ≃ Set αᵒᵖ :=\n  ⟨Set.op, Set.unop, op_unop, unop_op⟩\n\n"}
{"name":"Set.singleton_op","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\nx : α\n⊢ Eq (Singleton.singleton x).op (Singleton.singleton { unop := x })","decl":"@[simp]\ntheorem singleton_op (x : α) : ({x} : Set α).op = {op x} := by\n  ext\n  constructor\n  · apply unop_injective\n  · apply op_injective\n\n"}
{"name":"Set.singleton_unop","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\nx : Opposite α\n⊢ Eq (Singleton.singleton x).unop (Singleton.singleton (Opposite.unop x))","decl":"@[simp]\ntheorem singleton_unop (x : αᵒᵖ) : ({x} : Set αᵒᵖ).unop = {unop x} := by\n  ext\n  constructor\n  · apply op_injective\n  · apply unop_injective\n\n"}
{"name":"Set.singleton_op_unop","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\nx : α\n⊢ Eq (Singleton.singleton { unop := x }).unop (Singleton.singleton x)","decl":"@[simp 1100]\ntheorem singleton_op_unop (x : α) : ({op x} : Set αᵒᵖ).unop = {x} := by\n  ext\n  constructor\n  · apply op_injective\n  · apply unop_injective\n\n"}
{"name":"Set.singleton_unop_op","module":"Mathlib.Data.Set.Opposite","initialProofState":"α : Type u_1\nx : Opposite α\n⊢ Eq (Singleton.singleton (Opposite.unop x)).op (Singleton.singleton x)","decl":"@[simp 1100]\ntheorem singleton_unop_op (x : αᵒᵖ) : ({unop x} : Set α).op = {x} := by\n  ext\n  constructor\n  · apply unop_injective\n  · apply op_injective\n\n"}
