{"name":"Polynomial.smul_eq_map","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"M : Type u_1\ninst✝² : Monoid M\nR : Type u_2\ninst✝¹ : Semiring R\ninst✝ : MulSemiringAction M R\nm : M\n⊢ Eq (HSMul.hSMul m) (Polynomial.map (MulSemiringAction.toRingHom M R m))","decl":"theorem smul_eq_map [MulSemiringAction M R] (m : M) :\n    HSMul.hSMul m = map (MulSemiringAction.toRingHom M R m) := by\n  suffices DistribMulAction.toAddMonoidHom R[X] m =\n      (mapRingHom (MulSemiringAction.toRingHom M R m)).toAddMonoidHom by\n    ext1 r\n    exact DFunLike.congr_fun this r\n  ext n r : 2\n  change m • monomial n r = map (MulSemiringAction.toRingHom M R m) (monomial n r)\n  rw [Polynomial.map_monomial, Polynomial.smul_monomial, MulSemiringAction.toRingHom_apply]\n\n"}
{"name":"Polynomial.smul_X","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"M : Type u_1\ninst✝² : Monoid M\nR : Type u_2\ninst✝¹ : Semiring R\ninst✝ : MulSemiringAction M R\nm : M\n⊢ Eq (HSMul.hSMul m Polynomial.X) Polynomial.X","decl":"@[simp]\ntheorem smul_X (m : M) : (m • X : R[X]) = X :=\n  (smul_eq_map R m).symm ▸ map_X _\n\n"}
{"name":"Polynomial.smul_eval_smul","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"M : Type u_1\ninst✝² : Monoid M\nS : Type u_3\ninst✝¹ : CommSemiring S\ninst✝ : MulSemiringAction M S\nm : M\nf : Polynomial S\nx : S\n⊢ Eq (Polynomial.eval (HSMul.hSMul m x) (HSMul.hSMul m f)) (HSMul.hSMul m (Polynomial.eval x f))","decl":"theorem smul_eval_smul (m : M) (f : S[X]) (x : S) : (m • f).eval (m • x) = m • f.eval x :=\n  Polynomial.induction_on f (fun r ↦ by rw [smul_C, eval_C, eval_C])\n    (fun f g ihf ihg ↦ by rw [smul_add, eval_add, ihf, ihg, eval_add, smul_add]) fun n r _ ↦ by\n    rw [smul_mul', smul_pow', smul_C, smul_X, eval_mul, eval_C, eval_pow, eval_X, eval_mul, eval_C,\n      eval_pow, eval_X, smul_mul', smul_pow']\n\n"}
{"name":"Polynomial.eval_smul'","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"S : Type u_3\ninst✝² : CommSemiring S\nG : Type u_4\ninst✝¹ : Group G\ninst✝ : MulSemiringAction G S\ng : G\nf : Polynomial S\nx : S\n⊢ Eq (Polynomial.eval (HSMul.hSMul g x) f) (HSMul.hSMul g (Polynomial.eval x (HSMul.hSMul (Inv.inv g) f)))","decl":"theorem eval_smul' [MulSemiringAction G S] (g : G) (f : S[X]) (x : S) :\n    f.eval (g • x) = g • (g⁻¹ • f).eval x := by\n  rw [← smul_eval_smul, smul_inv_smul]\n\n"}
{"name":"Polynomial.smul_eval","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"S : Type u_3\ninst✝² : CommSemiring S\nG : Type u_4\ninst✝¹ : Group G\ninst✝ : MulSemiringAction G S\ng : G\nf : Polynomial S\nx : S\n⊢ Eq (Polynomial.eval x (HSMul.hSMul g f)) (HSMul.hSMul g (Polynomial.eval (HSMul.hSMul (Inv.inv g) x) f))","decl":"theorem smul_eval [MulSemiringAction G S] (g : G) (f : S[X]) (x : S) :\n    (g • f).eval x = g • f.eval (g⁻¹ • x) := by\n  rw [← smul_eval_smul, smul_inv_smul]\n\n"}
{"name":"prodXSubSMul.monic","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Fintype G\nR : Type u_3\ninst✝¹ : CommRing R\ninst✝ : MulSemiringAction G R\nx : R\n⊢ (prodXSubSMul G R x).Monic","decl":"theorem prodXSubSMul.monic (x : R) : (prodXSubSMul G R x).Monic :=\n  Polynomial.monic_prod_of_monic _ _ fun _ _ ↦ Polynomial.monic_X_sub_C _\n\n"}
{"name":"prodXSubSMul.eval","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Fintype G\nR : Type u_3\ninst✝¹ : CommRing R\ninst✝ : MulSemiringAction G R\nx : R\n⊢ Eq (Polynomial.eval x (prodXSubSMul G R x)) 0","decl":"theorem prodXSubSMul.eval (x : R) : (prodXSubSMul G R x).eval x = 0 :=\n  letI := Classical.decEq R\n  (map_prod ((Polynomial.aeval x).toRingHom.toMonoidHom : R[X] →* R) _ _).trans <|\n    Finset.prod_eq_zero (Finset.mem_univ <| QuotientGroup.mk 1) <| by simp\n\n"}
{"name":"prodXSubSMul.smul","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Fintype G\nR : Type u_3\ninst✝¹ : CommRing R\ninst✝ : MulSemiringAction G R\nx : R\ng : G\n⊢ Eq (HSMul.hSMul g (prodXSubSMul G R x)) (prodXSubSMul G R x)","decl":"theorem prodXSubSMul.smul (x : R) (g : G) : g • prodXSubSMul G R x = prodXSubSMul G R x :=\n  letI := Classical.decEq R\n  Finset.smul_prod'.trans <|\n    Fintype.prod_bijective _ (MulAction.bijective g) _ _ fun g' ↦ by\n      rw [ofQuotientStabilizer_smul, smul_sub, Polynomial.smul_X, Polynomial.smul_C]\n\n"}
{"name":"prodXSubSMul.coeff","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Fintype G\nR : Type u_3\ninst✝¹ : CommRing R\ninst✝ : MulSemiringAction G R\nx : R\ng : G\nn : Nat\n⊢ Eq (HSMul.hSMul g ((prodXSubSMul G R x).coeff n)) ((prodXSubSMul G R x).coeff n)","decl":"theorem prodXSubSMul.coeff (x : R) (g : G) (n : ℕ) :\n    g • (prodXSubSMul G R x).coeff n = (prodXSubSMul G R x).coeff n := by\n  rw [← Polynomial.coeff_smul, prodXSubSMul.smul]\n\n"}
{"name":"MulSemiringActionHom.coe_polynomial","module":"Mathlib.Algebra.Polynomial.GroupRingAction","initialProofState":"M : Type u_1\ninst✝⁴ : Monoid M\nP : Type u_2\ninst✝³ : CommSemiring P\ninst✝² : MulSemiringAction M P\nQ : Type u_3\ninst✝¹ : CommSemiring Q\ninst✝ : MulSemiringAction M Q\ng : MulSemiringActionHom (MonoidHom.id M) P Q\n⊢ Eq (⇑g.polynomial) (Polynomial.map ↑g)","decl":"@[simp]\ntheorem coe_polynomial (g : P →+*[M] Q) : (g.polynomial : P[X] → Q[X]) = map g := rfl\n\n"}
