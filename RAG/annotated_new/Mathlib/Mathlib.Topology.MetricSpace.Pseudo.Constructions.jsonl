{"name":"Subtype.dist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\np : α → Prop\nx y : Subtype p\n⊢ Eq (Dist.dist x y) (Dist.dist ↑x ↑y)","decl":"lemma Subtype.dist_eq {p : α → Prop} (x y : Subtype p) : dist x y = dist (x : α) y := rfl\n\n"}
{"name":"Subtype.nndist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\np : α → Prop\nx y : Subtype p\n⊢ Eq (NNDist.nndist x y) (NNDist.nndist ↑x ↑y)","decl":"lemma Subtype.nndist_eq {p : α → Prop} (x y : Subtype p) : nndist x y = nndist (x : α) y := rfl\n\n"}
{"name":"AddOpposite.dist_unop","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : AddOpposite α\n⊢ Eq (Dist.dist (AddOpposite.unop x) (AddOpposite.unop y)) (Dist.dist x y)","decl":"@[to_additive (attr := simp)]\nlemma dist_unop (x y : αᵐᵒᵖ) : dist (unop x) (unop y) = dist x y := rfl\n\n"}
{"name":"MulOpposite.dist_unop","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : MulOpposite α\n⊢ Eq (Dist.dist (MulOpposite.unop x) (MulOpposite.unop y)) (Dist.dist x y)","decl":"@[to_additive (attr := simp)]\nlemma dist_unop (x y : αᵐᵒᵖ) : dist (unop x) (unop y) = dist x y := rfl\n\n"}
{"name":"AddOpposite.dist_op","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : α\n⊢ Eq (Dist.dist (AddOpposite.op x) (AddOpposite.op y)) (Dist.dist x y)","decl":"@[to_additive (attr := simp)]\nlemma dist_op (x y : α) : dist (op x) (op y) = dist x y := rfl\n\n"}
{"name":"MulOpposite.dist_op","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : α\n⊢ Eq (Dist.dist (MulOpposite.op x) (MulOpposite.op y)) (Dist.dist x y)","decl":"@[to_additive (attr := simp)]\nlemma dist_op (x y : α) : dist (op x) (op y) = dist x y := rfl\n\n"}
{"name":"AddOpposite.nndist_unop","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : AddOpposite α\n⊢ Eq (NNDist.nndist (AddOpposite.unop x) (AddOpposite.unop y)) (NNDist.nndist x y)","decl":"@[to_additive (attr := simp)]\nlemma nndist_unop (x y : αᵐᵒᵖ) : nndist (unop x) (unop y) = nndist x y := rfl\n\n"}
{"name":"MulOpposite.nndist_unop","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : MulOpposite α\n⊢ Eq (NNDist.nndist (MulOpposite.unop x) (MulOpposite.unop y)) (NNDist.nndist x y)","decl":"@[to_additive (attr := simp)]\nlemma nndist_unop (x y : αᵐᵒᵖ) : nndist (unop x) (unop y) = nndist x y := rfl\n\n"}
{"name":"MulOpposite.nndist_op","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : α\n⊢ Eq (NNDist.nndist (MulOpposite.op x) (MulOpposite.op y)) (NNDist.nndist x y)","decl":"@[to_additive (attr := simp)]\nlemma nndist_op (x y : α) : nndist (op x) (op y) = nndist x y := rfl\n\n"}
{"name":"AddOpposite.nndist_op","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nx y : α\n⊢ Eq (NNDist.nndist (AddOpposite.op x) (AddOpposite.op y)) (NNDist.nndist x y)","decl":"@[to_additive (attr := simp)]\nlemma nndist_op (x y : α) : nndist (op x) (op y) = nndist x y := rfl\n\n"}
{"name":"NNReal.dist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"a b : NNReal\n⊢ Eq (Dist.dist a b) (abs (HSub.hSub ↑a ↑b))","decl":"lemma NNReal.dist_eq (a b : ℝ≥0) : dist a b = |(a : ℝ) - b| := rfl\n\n"}
{"name":"NNReal.nndist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"a b : NNReal\n⊢ Eq (NNDist.nndist a b) (Max.max (HSub.hSub a b) (HSub.hSub b a))","decl":"lemma NNReal.nndist_eq (a b : ℝ≥0) : nndist a b = max (a - b) (b - a) :=\n  eq_of_forall_ge_iff fun _ => by\n    simp only [max_le_iff, tsub_le_iff_right (α := ℝ≥0)]\n    simp only [← NNReal.coe_le_coe, coe_nndist, dist_eq, abs_sub_le_iff,\n      tsub_le_iff_right, NNReal.coe_add]\n\n"}
{"name":"NNReal.nndist_zero_eq_val","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"z : NNReal\n⊢ Eq (NNDist.nndist 0 z) z","decl":"@[simp]\nlemma NNReal.nndist_zero_eq_val (z : ℝ≥0) : nndist 0 z = z := by\n  simp only [NNReal.nndist_eq, max_eq_right, tsub_zero, zero_tsub, zero_le']\n\n"}
{"name":"NNReal.nndist_zero_eq_val'","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"z : NNReal\n⊢ Eq (NNDist.nndist z 0) z","decl":"@[simp]\nlemma NNReal.nndist_zero_eq_val' (z : ℝ≥0) : nndist z 0 = z := by\n  rw [nndist_comm]\n  exact NNReal.nndist_zero_eq_val z\n\n"}
{"name":"NNReal.le_add_nndist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"a b : NNReal\n⊢ LE.le a (HAdd.hAdd b (NNDist.nndist a b))","decl":"lemma NNReal.le_add_nndist (a b : ℝ≥0) : a ≤ b + nndist a b := by\n  suffices (a : ℝ) ≤ (b : ℝ) + dist a b by\n    rwa [← NNReal.coe_le_coe, NNReal.coe_add, coe_nndist]\n  rw [← sub_le_iff_le_add']\n  exact le_of_abs_le (dist_eq a b).ge\n\n"}
{"name":"NNReal.ball_zero_eq_Ico'","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"c : NNReal\n⊢ Eq (Metric.ball 0 ↑c) (Set.Ico 0 c)","decl":"lemma NNReal.ball_zero_eq_Ico' (c : ℝ≥0) :\n    Metric.ball (0 : ℝ≥0) c.toReal = Set.Ico 0 c := by ext x; simp\n\n"}
{"name":"NNReal.ball_zero_eq_Ico","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"c : Real\n⊢ Eq (Metric.ball 0 c) (Set.Ico 0 c.toNNReal)","decl":"lemma NNReal.ball_zero_eq_Ico (c : ℝ) :\n    Metric.ball (0 : ℝ≥0) c = Set.Ico 0 c.toNNReal := by\n  by_cases c_pos : 0 < c\n  · convert NNReal.ball_zero_eq_Ico' ⟨c, c_pos.le⟩\n    simp [Real.toNNReal, c_pos.le]\n  simp [not_lt.mp c_pos]\n\n"}
{"name":"NNReal.closedBall_zero_eq_Icc'","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"c : NNReal\n⊢ Eq (Metric.closedBall 0 ↑c) (Set.Icc 0 c)","decl":"lemma NNReal.closedBall_zero_eq_Icc' (c : ℝ≥0) :\n    Metric.closedBall (0 : ℝ≥0) c.toReal = Set.Icc 0 c := by ext x; simp\n\n"}
{"name":"NNReal.closedBall_zero_eq_Icc","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"c : Real\nc_nn : LE.le 0 c\n⊢ Eq (Metric.closedBall 0 c) (Set.Icc 0 c.toNNReal)","decl":"lemma NNReal.closedBall_zero_eq_Icc {c : ℝ} (c_nn : 0 ≤ c) :\n    Metric.closedBall (0 : ℝ≥0) c = Set.Icc 0 c.toNNReal := by\n  convert NNReal.closedBall_zero_eq_Icc' ⟨c, c_nn⟩\n  simp [Real.toNNReal, c_nn]\n\n"}
{"name":"ULift.dist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"β : Type u_2\ninst✝ : PseudoMetricSpace β\nx y : ULift.{u_3, u_2} β\n⊢ Eq (Dist.dist x y) (Dist.dist x.down y.down)","decl":"lemma dist_eq (x y : ULift β) : dist x y = dist x.down y.down := rfl\n\n"}
{"name":"ULift.nndist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"β : Type u_2\ninst✝ : PseudoMetricSpace β\nx y : ULift.{u_3, u_2} β\n⊢ Eq (NNDist.nndist x y) (NNDist.nndist x.down y.down)","decl":"lemma nndist_eq (x y : ULift β) : nndist x y = nndist x.down y.down := rfl\n\n"}
{"name":"ULift.dist_up_up","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"β : Type u_2\ninst✝ : PseudoMetricSpace β\nx y : β\n⊢ Eq (Dist.dist { down := x } { down := y }) (Dist.dist x y)","decl":"@[simp] lemma dist_up_up (x y : β) : dist (ULift.up x) (ULift.up y) = dist x y := rfl\n\n"}
{"name":"ULift.nndist_up_up","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"β : Type u_2\ninst✝ : PseudoMetricSpace β\nx y : β\n⊢ Eq (NNDist.nndist { down := x } { down := y }) (NNDist.nndist x y)","decl":"@[simp] lemma nndist_up_up (x y : β) : nndist (ULift.up x) (ULift.up y) = nndist x y := rfl\n\n"}
{"name":"Prod.dist_eq","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nx y : Prod α β\n⊢ Eq (Dist.dist x y) (Max.max (Dist.dist x.1 y.1) (Dist.dist x.2 y.2))","decl":"lemma Prod.dist_eq {x y : α × β} : dist x y = max (dist x.1 y.1) (dist x.2 y.2) := rfl\n\n"}
{"name":"dist_prod_same_left","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nx : α\ny₁ y₂ : β\n⊢ Eq (Dist.dist { fst := x, snd := y₁ } { fst := x, snd := y₂ }) (Dist.dist y₁ y₂)","decl":"@[simp]\nlemma dist_prod_same_left {x : α} {y₁ y₂ : β} : dist (x, y₁) (x, y₂) = dist y₁ y₂ := by\n  simp [Prod.dist_eq, dist_nonneg]\n\n"}
{"name":"dist_prod_same_right","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nx₁ x₂ : α\ny : β\n⊢ Eq (Dist.dist { fst := x₁, snd := y } { fst := x₂, snd := y }) (Dist.dist x₁ x₂)","decl":"@[simp]\nlemma dist_prod_same_right {x₁ x₂ : α} {y : β} : dist (x₁, y) (x₂, y) = dist x₁ x₂ := by\n  simp [Prod.dist_eq, dist_nonneg]\n\n"}
{"name":"ball_prod_same","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nx : α\ny : β\nr : Real\n⊢ Eq (SProd.sprod (Metric.ball x r) (Metric.ball y r)) (Metric.ball { fst := x, snd := y } r)","decl":"lemma ball_prod_same (x : α) (y : β) (r : ℝ) : ball x r ×ˢ ball y r = ball (x, y) r :=\n  ext fun z => by simp [Prod.dist_eq]\n\n"}
{"name":"closedBall_prod_same","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nx : α\ny : β\nr : Real\n⊢ Eq (SProd.sprod (Metric.closedBall x r) (Metric.closedBall y r)) (Metric.closedBall { fst := x, snd := y } r)","decl":"lemma closedBall_prod_same (x : α) (y : β) (r : ℝ) :\n    closedBall x r ×ˢ closedBall y r = closedBall (x, y) r := ext fun z => by simp [Prod.dist_eq]\n\n"}
{"name":"sphere_prod","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : PseudoMetricSpace β\nx : Prod α β\nr : Real\n⊢ Eq (Metric.sphere x r) (Union.union (SProd.sprod (Metric.sphere x.1 r) (Metric.closedBall x.2 r)) (SProd.sprod (Metric.closedBall x.1 r) (Metric.sphere x.2 r)))","decl":"lemma sphere_prod (x : α × β) (r : ℝ) :\n    sphere x r = sphere x.1 r ×ˢ closedBall x.2 r ∪ closedBall x.1 r ×ˢ sphere x.2 r := by\n  obtain hr | rfl | hr := lt_trichotomy r 0\n  · simp [hr]\n  · cases x\n    simp_rw [← closedBall_eq_sphere_of_nonpos le_rfl, union_self, closedBall_prod_same]\n  · ext ⟨x', y'⟩\n    simp_rw [Set.mem_union, Set.mem_prod, Metric.mem_closedBall, Metric.mem_sphere, Prod.dist_eq,\n      max_eq_iff]\n    refine or_congr (and_congr_right ?_) (and_comm.trans (and_congr_left ?_))\n    all_goals rintro rfl; rfl\n\n"}
{"name":"uniformContinuous_dist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\n⊢ UniformContinuous fun p => Dist.dist p.1 p.2","decl":"lemma uniformContinuous_dist : UniformContinuous fun p : α × α => dist p.1 p.2 :=\n  Metric.uniformContinuous_iff.2 fun ε ε0 =>\n    ⟨ε / 2, half_pos ε0, fun {a b} h =>\n      calc dist (dist a.1 a.2) (dist b.1 b.2) ≤ dist a.1 b.1 + dist a.2 b.2 :=\n        dist_dist_dist_le _ _ _ _\n      _ ≤ dist a b + dist a b := add_le_add (le_max_left _ _) (le_max_right _ _)\n      _ < ε / 2 + ε / 2 := add_lt_add h h\n      _ = ε := add_halves ε⟩\n\n"}
{"name":"UniformContinuous.dist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : UniformSpace β\nf g : β → α\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ UniformContinuous fun b => Dist.dist (f b) (g b)","decl":"protected lemma UniformContinuous.dist [UniformSpace β] {f g : β → α} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : UniformContinuous fun b => dist (f b) (g b) :=\n  uniformContinuous_dist.comp (hf.prod_mk hg)\n\n"}
{"name":"continuous_dist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\n⊢ Continuous fun p => Dist.dist p.1 p.2","decl":"@[continuity]\nlemma continuous_dist : Continuous fun p : α × α ↦ dist p.1 p.2 := uniformContinuous_dist.continuous\n\n"}
{"name":"Continuous.dist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : TopologicalSpace β\nf g : β → α\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun b => Dist.dist (f b) (g b)","decl":"@[continuity, fun_prop]\nprotected lemma Continuous.dist [TopologicalSpace β] {f g : β → α} (hf : Continuous f)\n    (hg : Continuous g) : Continuous fun b => dist (f b) (g b) :=\n  continuous_dist.comp (hf.prod_mk hg :)\n\n"}
{"name":"Filter.Tendsto.dist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : PseudoMetricSpace α\nf g : β → α\nx : Filter β\na b : α\nhf : Filter.Tendsto f x (nhds a)\nhg : Filter.Tendsto g x (nhds b)\n⊢ Filter.Tendsto (fun x => Dist.dist (f x) (g x)) x (nhds (Dist.dist a b))","decl":"protected lemma Filter.Tendsto.dist {f g : β → α} {x : Filter β} {a b : α}\n    (hf : Tendsto f x (𝓝 a)) (hg : Tendsto g x (𝓝 b)) :\n    Tendsto (fun x => dist (f x) (g x)) x (𝓝 (dist a b)) :=\n  (continuous_dist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)\n\n"}
{"name":"continuous_iff_continuous_dist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : TopologicalSpace β\nf : β → α\n⊢ Iff (Continuous f) (Continuous fun x => Dist.dist (f x.1) (f x.2))","decl":"lemma continuous_iff_continuous_dist [TopologicalSpace β] {f : β → α} :\n    Continuous f ↔ Continuous fun x : β × β => dist (f x.1) (f x.2) :=\n  ⟨fun h => h.fst'.dist h.snd', fun h =>\n    continuous_iff_continuousAt.2 fun _ => tendsto_iff_dist_tendsto_zero.2 <|\n      (h.comp (continuous_id.prod_mk continuous_const)).tendsto' _ _ <| dist_self _⟩\n\n"}
{"name":"uniformContinuous_nndist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\n⊢ UniformContinuous fun p => NNDist.nndist p.1 p.2","decl":"lemma uniformContinuous_nndist : UniformContinuous fun p : α × α => nndist p.1 p.2 :=\n  uniformContinuous_dist.subtype_mk _\n\n"}
{"name":"UniformContinuous.nndist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : UniformSpace β\nf g : β → α\nhf : UniformContinuous f\nhg : UniformContinuous g\n⊢ UniformContinuous fun b => NNDist.nndist (f b) (g b)","decl":"protected lemma UniformContinuous.nndist [UniformSpace β] {f g : β → α} (hf : UniformContinuous f)\n    (hg : UniformContinuous g) : UniformContinuous fun b => nndist (f b) (g b) :=\n  uniformContinuous_nndist.comp (hf.prod_mk hg)\n\n"}
{"name":"continuous_nndist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\n⊢ Continuous fun p => NNDist.nndist p.1 p.2","decl":"lemma continuous_nndist : Continuous fun p : α × α => nndist p.1 p.2 :=\n  uniformContinuous_nndist.continuous\n\n"}
{"name":"Continuous.nndist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : TopologicalSpace β\nf g : β → α\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun b => NNDist.nndist (f b) (g b)","decl":"@[fun_prop]\nprotected lemma Continuous.nndist [TopologicalSpace β] {f g : β → α} (hf : Continuous f)\n    (hg : Continuous g) : Continuous fun b => nndist (f b) (g b) :=\n  continuous_nndist.comp (hf.prod_mk hg :)\n\n"}
{"name":"Filter.Tendsto.nndist","module":"Mathlib.Topology.MetricSpace.Pseudo.Constructions","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : PseudoMetricSpace α\nf g : β → α\nx : Filter β\na b : α\nhf : Filter.Tendsto f x (nhds a)\nhg : Filter.Tendsto g x (nhds b)\n⊢ Filter.Tendsto (fun x => NNDist.nndist (f x) (g x)) x (nhds (NNDist.nndist a b))","decl":"protected lemma Filter.Tendsto.nndist {f g : β → α} {x : Filter β} {a b : α}\n    (hf : Tendsto f x (𝓝 a)) (hg : Tendsto g x (𝓝 b)) :\n    Tendsto (fun x => nndist (f x) (g x)) x (𝓝 (nndist a b)) :=\n  (continuous_nndist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)\n"}
