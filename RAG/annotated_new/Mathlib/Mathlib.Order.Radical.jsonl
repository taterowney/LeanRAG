{"name":"Order.radical_le_coatom","module":"Mathlib.Order.Radical","initialProofState":"α : Type u_1\ninst✝ : CompleteLattice α\na : α\nh : IsCoatom a\n⊢ LE.le (Order.radical α) a","decl":"lemma Order.radical_le_coatom {a : α} (h : IsCoatom a) : radical α ≤ a := biInf_le _ h\n\n"}
{"name":"OrderIso.map_radical","module":"Mathlib.Order.Radical","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\nβ : Type u_2\ninst✝ : CompleteLattice β\nf : OrderIso α β\n⊢ Eq (f (Order.radical α)) (Order.radical β)","decl":"theorem OrderIso.map_radical (f : α ≃o β) : f (Order.radical α) = Order.radical β := by\n  unfold Order.radical\n  simp only [OrderIso.map_iInf]\n  fapply Equiv.iInf_congr\n  · exact f.toEquiv\n  · simp\n\n"}
{"name":"Order.radical_nongenerating","module":"Mathlib.Order.Radical","initialProofState":"α : Type u_1\ninst✝¹ : CompleteLattice α\ninst✝ : IsCoatomic α\na : α\nh : Eq (Max.max a (Order.radical α)) Top.top\n⊢ Eq a Top.top","decl":"theorem Order.radical_nongenerating [IsCoatomic α] {a : α} (h : a ⊔ radical α = ⊤) : a = ⊤ := by\n  -- Since the lattice is coatomic, either `a` is already the top element,\n  -- or there is a coatom above it.\n  obtain (rfl | w) := eq_top_or_exists_le_coatom a\n  · -- In the first case, we're done, this was already the goal.\n    rfl\n  · obtain ⟨m, c, le⟩ := w\n    have q : a ⊔ radical α ≤ m := sup_le le (radical_le_coatom c)\n    -- Now note that `a ⊔ radical α ≤ m` since both `a ≤ m` and `radical α ≤ m`.\n    rw [h, top_le_iff] at q\n    simpa using c.1 q\n"}
