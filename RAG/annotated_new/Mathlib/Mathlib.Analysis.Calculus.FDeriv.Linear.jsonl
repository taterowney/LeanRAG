{"name":"ContinuousLinearMap.hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ HasStrictFDerivAt (⇑e) e x","decl":"@[fun_prop]\nprotected theorem ContinuousLinearMap.hasStrictFDerivAt {x : E} : HasStrictFDerivAt e e x :=\n  .of_isLittleOTVS <| (IsLittleOTVS.zero _ _).congr_left fun x => by\n    simp only [e.map_sub, sub_self, Pi.zero_apply]\n\n"}
{"name":"ContinuousLinearMap.hasFDerivAtFilter","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\n⊢ HasFDerivAtFilter (⇑e) e x L","decl":"protected theorem ContinuousLinearMap.hasFDerivAtFilter : HasFDerivAtFilter e e x L :=\n  .of_isLittleOTVS <| (IsLittleOTVS.zero _ _).congr_left fun x => by\n    simp only [e.map_sub, sub_self, Pi.zero_apply]\n\n"}
{"name":"ContinuousLinearMap.hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\n⊢ HasFDerivWithinAt (⇑e) e s x","decl":"@[fun_prop]\nprotected theorem ContinuousLinearMap.hasFDerivWithinAt : HasFDerivWithinAt e e s x :=\n  e.hasFDerivAtFilter\n\n"}
{"name":"ContinuousLinearMap.hasFDerivAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ HasFDerivAt (⇑e) e x","decl":"@[fun_prop]\nprotected theorem ContinuousLinearMap.hasFDerivAt : HasFDerivAt e e x :=\n  e.hasFDerivAtFilter\n\n"}
{"name":"ContinuousLinearMap.differentiableAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ DifferentiableAt 𝕜 (⇑e) x","decl":"@[simp, fun_prop]\nprotected theorem ContinuousLinearMap.differentiableAt : DifferentiableAt 𝕜 e x :=\n  e.hasFDerivAt.differentiableAt\n\n"}
{"name":"ContinuousLinearMap.differentiableWithinAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\n⊢ DifferentiableWithinAt 𝕜 (⇑e) s x","decl":"@[fun_prop]\nprotected theorem ContinuousLinearMap.differentiableWithinAt : DifferentiableWithinAt 𝕜 e s x :=\n  e.differentiableAt.differentiableWithinAt\n\n"}
{"name":"ContinuousLinearMap.fderiv","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\n⊢ Eq (fderiv 𝕜 (⇑e) x) e","decl":"@[simp]\nprotected theorem ContinuousLinearMap.fderiv : fderiv 𝕜 e x = e :=\n  e.hasFDerivAt.fderiv\n\n"}
{"name":"ContinuousLinearMap.fderivWithin","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (⇑e) s x) e","decl":"protected theorem ContinuousLinearMap.fderivWithin (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 e s x = e := by\n  rw [DifferentiableAt.fderivWithin e.differentiableAt hxs]\n  exact e.fderiv\n\n"}
{"name":"ContinuousLinearMap.differentiable","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\n⊢ Differentiable 𝕜 ⇑e","decl":"@[simp, fun_prop]\nprotected theorem ContinuousLinearMap.differentiable : Differentiable 𝕜 e := fun _ =>\n  e.differentiableAt\n\n"}
{"name":"ContinuousLinearMap.differentiableOn","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ne : ContinuousLinearMap (RingHom.id 𝕜) E F\ns : Set E\n⊢ DifferentiableOn 𝕜 (⇑e) s","decl":"@[fun_prop]\nprotected theorem ContinuousLinearMap.differentiableOn : DifferentiableOn 𝕜 e s :=\n  e.differentiable.differentiableOn\n\n"}
{"name":"IsBoundedLinearMap.hasFDerivAtFilter","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nL : Filter E\nh : IsBoundedLinearMap 𝕜 f\n⊢ HasFDerivAtFilter f h.toContinuousLinearMap x L","decl":"theorem IsBoundedLinearMap.hasFDerivAtFilter (h : IsBoundedLinearMap 𝕜 f) :\n    HasFDerivAtFilter f h.toContinuousLinearMap x L :=\n  h.toContinuousLinearMap.hasFDerivAtFilter\n\n"}
{"name":"IsBoundedLinearMap.hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nh : IsBoundedLinearMap 𝕜 f\n⊢ HasFDerivWithinAt f h.toContinuousLinearMap s x","decl":"@[fun_prop]\ntheorem IsBoundedLinearMap.hasFDerivWithinAt (h : IsBoundedLinearMap 𝕜 f) :\n    HasFDerivWithinAt f h.toContinuousLinearMap s x :=\n  h.hasFDerivAtFilter\n\n"}
{"name":"IsBoundedLinearMap.hasFDerivAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nh : IsBoundedLinearMap 𝕜 f\n⊢ HasFDerivAt f h.toContinuousLinearMap x","decl":"@[fun_prop]\ntheorem IsBoundedLinearMap.hasFDerivAt (h : IsBoundedLinearMap 𝕜 f) :\n    HasFDerivAt f h.toContinuousLinearMap x :=\n  h.hasFDerivAtFilter\n\n"}
{"name":"IsBoundedLinearMap.differentiableAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nh : IsBoundedLinearMap 𝕜 f\n⊢ DifferentiableAt 𝕜 f x","decl":"@[fun_prop]\ntheorem IsBoundedLinearMap.differentiableAt (h : IsBoundedLinearMap 𝕜 f) : DifferentiableAt 𝕜 f x :=\n  h.hasFDerivAt.differentiableAt\n\n"}
{"name":"IsBoundedLinearMap.differentiableWithinAt","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nh : IsBoundedLinearMap 𝕜 f\n⊢ DifferentiableWithinAt 𝕜 f s x","decl":"@[fun_prop]\ntheorem IsBoundedLinearMap.differentiableWithinAt (h : IsBoundedLinearMap 𝕜 f) :\n    DifferentiableWithinAt 𝕜 f s x :=\n  h.differentiableAt.differentiableWithinAt\n\n"}
{"name":"IsBoundedLinearMap.fderiv","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nh : IsBoundedLinearMap 𝕜 f\n⊢ Eq (fderiv 𝕜 f x) h.toContinuousLinearMap","decl":"theorem IsBoundedLinearMap.fderiv (h : IsBoundedLinearMap 𝕜 f) :\n    fderiv 𝕜 f x = h.toContinuousLinearMap :=\n  HasFDerivAt.fderiv h.hasFDerivAt\n\n"}
{"name":"IsBoundedLinearMap.fderivWithin","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nh : IsBoundedLinearMap 𝕜 f\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 f s x) h.toContinuousLinearMap","decl":"theorem IsBoundedLinearMap.fderivWithin (h : IsBoundedLinearMap 𝕜 f)\n    (hxs : UniqueDiffWithinAt 𝕜 s x) : fderivWithin 𝕜 f s x = h.toContinuousLinearMap := by\n  rw [DifferentiableAt.fderivWithin h.differentiableAt hxs]\n  exact h.fderiv\n\n"}
{"name":"IsBoundedLinearMap.differentiable","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nh : IsBoundedLinearMap 𝕜 f\n⊢ Differentiable 𝕜 f","decl":"@[fun_prop]\ntheorem IsBoundedLinearMap.differentiable (h : IsBoundedLinearMap 𝕜 f) : Differentiable 𝕜 f :=\n  fun _ => h.differentiableAt\n\n"}
{"name":"IsBoundedLinearMap.differentiableOn","module":"Mathlib.Analysis.Calculus.FDeriv.Linear","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nh : IsBoundedLinearMap 𝕜 f\n⊢ DifferentiableOn 𝕜 f s","decl":"@[fun_prop]\ntheorem IsBoundedLinearMap.differentiableOn (h : IsBoundedLinearMap 𝕜 f) : DifferentiableOn 𝕜 f s :=\n  h.differentiable.differentiableOn\n\n"}
