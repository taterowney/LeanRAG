{"name":"ClosedSubgroup.mk.injEq","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\ntoSubgroup✝ : Subgroup G\nisClosed'✝ : IsClosed toSubgroup✝.carrier\ntoSubgroup : Subgroup G\nisClosed' : IsClosed toSubgroup.carrier\n⊢ Eq (Eq { toSubgroup := toSubgroup✝, isClosed' := isClosed'✝ } { toSubgroup := toSubgroup, isClosed' := isClosed' }) (Eq toSubgroup✝ toSubgroup)","decl":"/-- The type of closed subgroups of a topological group. -/\n@[ext]\nstructure ClosedSubgroup (G : Type u) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedSubgroup.mk.inj","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\ntoSubgroup✝ : Subgroup G\nisClosed'✝ : IsClosed toSubgroup✝.carrier\ntoSubgroup : Subgroup G\nisClosed' : IsClosed toSubgroup.carrier\nx✝ : Eq { toSubgroup := toSubgroup✝, isClosed' := isClosed'✝ } { toSubgroup := toSubgroup, isClosed' := isClosed' }\n⊢ Eq toSubgroup✝ toSubgroup","decl":"/-- The type of closed subgroups of a topological group. -/\n@[ext]\nstructure ClosedSubgroup (G : Type u) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedSubgroup.ext_iff","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nx y : ClosedSubgroup G\n⊢ Iff (Eq x y) (Eq x.carrier y.carrier)","decl":"/-- The type of closed subgroups of a topological group. -/\n@[ext]\nstructure ClosedSubgroup (G : Type u) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedSubgroup.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : SizeOf G\ntoSubgroup : Subgroup G\nisClosed' : IsClosed toSubgroup.carrier\n⊢ Eq (SizeOf.sizeOf { toSubgroup := toSubgroup, isClosed' := isClosed' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toSubgroup)) (SizeOf.sizeOf isClosed'))","decl":"/-- The type of closed subgroups of a topological group. -/\n@[ext]\nstructure ClosedSubgroup (G : Type u) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedSubgroup.isClosed'","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nself : ClosedSubgroup G\n⊢ IsClosed self.carrier","decl":"/-- The type of closed subgroups of a topological group. -/\n@[ext]\nstructure ClosedSubgroup (G : Type u) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedSubgroup.ext","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\nx y : ClosedSubgroup G\ncarrier : Eq x.carrier y.carrier\n⊢ Eq x y","decl":"/-- The type of closed subgroups of a topological group. -/\n@[ext]\nstructure ClosedSubgroup (G : Type u) [Group G] [TopologicalSpace G] extends Subgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedAddSubgroup.mk.injEq","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\ntoAddSubgroup✝ : AddSubgroup G\nisClosed'✝ : IsClosed toAddSubgroup✝.carrier\ntoAddSubgroup : AddSubgroup G\nisClosed' : IsClosed toAddSubgroup.carrier\n⊢ Eq (Eq { toAddSubgroup := toAddSubgroup✝, isClosed' := isClosed'✝ } { toAddSubgroup := toAddSubgroup, isClosed' := isClosed' }) (Eq toAddSubgroup✝ toAddSubgroup)","decl":"/-- The type of closed subgroups of an additive topological group. -/\n@[ext]\nstructure ClosedAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G] extends\n    AddSubgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedAddSubgroup.mk.inj","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\ntoAddSubgroup✝ : AddSubgroup G\nisClosed'✝ : IsClosed toAddSubgroup✝.carrier\ntoAddSubgroup : AddSubgroup G\nisClosed' : IsClosed toAddSubgroup.carrier\nx✝ : Eq { toAddSubgroup := toAddSubgroup✝, isClosed' := isClosed'✝ } { toAddSubgroup := toAddSubgroup, isClosed' := isClosed' }\n⊢ Eq toAddSubgroup✝ toAddSubgroup","decl":"/-- The type of closed subgroups of an additive topological group. -/\n@[ext]\nstructure ClosedAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G] extends\n    AddSubgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedAddSubgroup.ext","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nx y : ClosedAddSubgroup G\ncarrier : Eq x.carrier y.carrier\n⊢ Eq x y","decl":"/-- The type of closed subgroups of an additive topological group. -/\n@[ext]\nstructure ClosedAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G] extends\n    AddSubgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedAddSubgroup.mk.sizeOf_spec","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : SizeOf G\ntoAddSubgroup : AddSubgroup G\nisClosed' : IsClosed toAddSubgroup.carrier\n⊢ Eq (SizeOf.sizeOf { toAddSubgroup := toAddSubgroup, isClosed' := isClosed' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toAddSubgroup)) (SizeOf.sizeOf isClosed'))","decl":"/-- The type of closed subgroups of an additive topological group. -/\n@[ext]\nstructure ClosedAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G] extends\n    AddSubgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedAddSubgroup.ext_iff","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nx y : ClosedAddSubgroup G\n⊢ Iff (Eq x y) (Eq x.carrier y.carrier)","decl":"/-- The type of closed subgroups of an additive topological group. -/\n@[ext]\nstructure ClosedAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G] extends\n    AddSubgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedAddSubgroup.isClosed'","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\nself : ClosedAddSubgroup G\n⊢ IsClosed self.carrier","decl":"/-- The type of closed subgroups of an additive topological group. -/\n@[ext]\nstructure ClosedAddSubgroup (G : Type u) [AddGroup G] [TopologicalSpace G] extends\n    AddSubgroup G where\n  isClosed' : IsClosed carrier\n\n"}
{"name":"ClosedSubgroup.toSubgroup_injective","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ Function.Injective ClosedSubgroup.toSubgroup","decl":"variable {G} in\n@[to_additive]\ntheorem toSubgroup_injective : Function.Injective\n    (ClosedSubgroup.toSubgroup : ClosedSubgroup G → Subgroup G) :=\n  fun A B h ↦ by\n  ext\n  rw [h]\n\n"}
{"name":"ClosedAddSubgroup.toAddSubgroup_injective","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ Function.Injective ClosedAddSubgroup.toAddSubgroup","decl":"variable {G} in\n@[to_additive]\ntheorem toSubgroup_injective : Function.Injective\n    (ClosedSubgroup.toSubgroup : ClosedSubgroup G → Subgroup G) :=\n  fun A B h ↦ by\n  ext\n  rw [h]\n\n"}
{"name":"ClosedSubgroup.instSubgroupClass","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : Group G\ninst✝ : TopologicalSpace G\n⊢ SubgroupClass (ClosedSubgroup G) G","decl":"@[to_additive]\ninstance : SubgroupClass (ClosedSubgroup G) G where\n  mul_mem := Subsemigroup.mul_mem' _\n  one_mem U := U.one_mem'\n  inv_mem := Subgroup.inv_mem' _\n\n"}
{"name":"ClosedAddSubgroup.instAddSubgroupClass","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝¹ : AddGroup G\ninst✝ : TopologicalSpace G\n⊢ AddSubgroupClass (ClosedAddSubgroup G) G","decl":"@[to_additive]\ninstance : SubgroupClass (ClosedSubgroup G) G where\n  mul_mem := Subsemigroup.mul_mem' _\n  one_mem U := U.one_mem'\n  inv_mem := Subgroup.inv_mem' _\n\n"}
{"name":"ClosedAddSubgroup.instCompactSpaceSubtypeMem","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝² : AddGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : CompactSpace G\nH : ClosedAddSubgroup G\n⊢ CompactSpace (Subtype fun x => Membership.mem H x)","decl":"@[to_additive]\ninstance [CompactSpace G] (H : ClosedSubgroup G) : CompactSpace H :=\n  isCompact_iff_compactSpace.mp (IsClosed.isCompact H.isClosed')\n\n"}
{"name":"ClosedSubgroup.instCompactSpaceSubtypeMem","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : CompactSpace G\nH : ClosedSubgroup G\n⊢ CompactSpace (Subtype fun x => Membership.mem H x)","decl":"@[to_additive]\ninstance [CompactSpace G] (H : ClosedSubgroup G) : CompactSpace H :=\n  isCompact_iff_compactSpace.mp (IsClosed.isCompact H.isClosed')\n\n"}
{"name":"Subgroup.normalCore_isClosed","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝² : Group G\ninst✝¹ : TopologicalSpace G\ninst✝ : ContinuousMul G\nH : Subgroup G\nh : IsClosed ↑H\n⊢ IsClosed ↑H.normalCore","decl":"lemma normalCore_isClosed (H : Subgroup G) (h : IsClosed (H : Set G)) :\n    IsClosed (H.normalCore : Set G) := by\n  rw [normalCore_eq_iInf_conjAct]\n  push_cast\n  apply isClosed_iInter\n  intro g\n  convert IsClosed.preimage (TopologicalGroup.continuous_conj (ConjAct.ofConjAct g⁻¹)) h\n  exact Set.ext (fun t ↦ Set.mem_smul_set_iff_inv_smul_mem)\n\n"}
{"name":"Subgroup.isOpen_of_isClosed_of_finiteIndex","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousMul G\nH : Subgroup G\ninst✝ : H.FiniteIndex\nh : IsClosed ↑H\n⊢ IsOpen ↑H","decl":"@[to_additive]\nlemma isOpen_of_isClosed_of_finiteIndex (H : Subgroup G) [H.FiniteIndex]\n    (h : IsClosed (H : Set G)) : IsOpen (H : Set G) := by\n  apply isClosed_compl_iff.mp\n  convert isClosed_iUnion_of_finite <| fun (x : {x : (G ⧸ H) // x ≠ QuotientGroup.mk 1})\n    ↦ IsClosed.smul h (Quotient.out x.1)\n  ext x\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · have : QuotientGroup.mk 1 ≠ QuotientGroup.mk (s := H) x := by\n      apply QuotientGroup.eq.not.mpr\n      simpa only [inv_one, one_mul, ne_eq]\n    simp only [ne_eq, Set.mem_iUnion]\n    use ⟨QuotientGroup.mk (s := H) x, this.symm⟩,\n      (Quotient.out (QuotientGroup.mk (s := H) x))⁻¹ * x\n    simp only [SetLike.mem_coe, smul_eq_mul, mul_inv_cancel_left, and_true]\n    exact QuotientGroup.eq.mp <| QuotientGroup.out_eq' (QuotientGroup.mk (s := H) x)\n  · rcases h with ⟨S,⟨y,hS⟩,mem⟩\n    simp only [← hS] at mem\n    rcases mem with ⟨h,hh,eq⟩\n    simp only [Set.mem_compl_iff, SetLike.mem_coe]\n    by_contra mH\n    simp only [← eq, ne_eq, smul_eq_mul] at mH\n    absurd y.2.symm\n    rw [← QuotientGroup.out_eq' y.1, QuotientGroup.eq]\n    simp only [inv_one, ne_eq, one_mul, (Subgroup.mul_mem_cancel_right H hh).mp mH]\n\n"}
{"name":"AddSubgroup.isOpen_of_isClosed_of_finiteIndex","module":"Mathlib.Topology.Algebra.ClosedSubgroup","initialProofState":"G : Type u\ninst✝³ : AddGroup G\ninst✝² : TopologicalSpace G\ninst✝¹ : ContinuousAdd G\nH : AddSubgroup G\ninst✝ : H.FiniteIndex\nh : IsClosed ↑H\n⊢ IsOpen ↑H","decl":"@[to_additive]\nlemma isOpen_of_isClosed_of_finiteIndex (H : Subgroup G) [H.FiniteIndex]\n    (h : IsClosed (H : Set G)) : IsOpen (H : Set G) := by\n  apply isClosed_compl_iff.mp\n  convert isClosed_iUnion_of_finite <| fun (x : {x : (G ⧸ H) // x ≠ QuotientGroup.mk 1})\n    ↦ IsClosed.smul h (Quotient.out x.1)\n  ext x\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · have : QuotientGroup.mk 1 ≠ QuotientGroup.mk (s := H) x := by\n      apply QuotientGroup.eq.not.mpr\n      simpa only [inv_one, one_mul, ne_eq]\n    simp only [ne_eq, Set.mem_iUnion]\n    use ⟨QuotientGroup.mk (s := H) x, this.symm⟩,\n      (Quotient.out (QuotientGroup.mk (s := H) x))⁻¹ * x\n    simp only [SetLike.mem_coe, smul_eq_mul, mul_inv_cancel_left, and_true]\n    exact QuotientGroup.eq.mp <| QuotientGroup.out_eq' (QuotientGroup.mk (s := H) x)\n  · rcases h with ⟨S,⟨y,hS⟩,mem⟩\n    simp only [← hS] at mem\n    rcases mem with ⟨h,hh,eq⟩\n    simp only [Set.mem_compl_iff, SetLike.mem_coe]\n    by_contra mH\n    simp only [← eq, ne_eq, smul_eq_mul] at mH\n    absurd y.2.symm\n    rw [← QuotientGroup.out_eq' y.1, QuotientGroup.eq]\n    simp only [inv_one, ne_eq, one_mul, (Subgroup.mul_mem_cancel_right H hh).mp mH]\n\n"}
