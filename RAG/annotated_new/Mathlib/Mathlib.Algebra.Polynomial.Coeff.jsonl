{"name":"Polynomial.coeff_add","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nn : Nat\n⊢ Eq ((HAdd.hAdd p q).coeff n) (HAdd.hAdd (p.coeff n) (q.coeff n))","decl":"@[simp]\ntheorem coeff_add (p q : R[X]) (n : ℕ) : coeff (p + q) n = coeff p n + coeff q n := by\n  rcases p with ⟨⟩\n  rcases q with ⟨⟩\n  simp_rw [← ofFinsupp_add, coeff]\n  exact Finsupp.add_apply _ _ _\n\n"}
{"name":"Polynomial.coeff_smul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : SMulZeroClass S R\nr : S\np : Polynomial R\nn : Nat\n⊢ Eq ((HSMul.hSMul r p).coeff n) (HSMul.hSMul r (p.coeff n))","decl":"@[simp]\ntheorem coeff_smul [SMulZeroClass S R] (r : S) (p : R[X]) (n : ℕ) :\n    coeff (r • p) n = r • coeff p n := by\n  rcases p with ⟨⟩\n  simp_rw [← ofFinsupp_smul, coeff]\n  exact Finsupp.smul_apply _ _ _\n\n"}
{"name":"Polynomial.support_smul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : SMulZeroClass S R\nr : S\np : Polynomial R\n⊢ HasSubset.Subset (HSMul.hSMul r p).support p.support","decl":"theorem support_smul [SMulZeroClass S R] (r : S) (p : R[X]) :\n    support (r • p) ⊆ support p := by\n  intro i hi\n  simp? [mem_support_iff] at hi ⊢ says simp only [mem_support_iff, coeff_smul, ne_eq] at hi ⊢\n  contrapose! hi\n  simp [hi]\n\n"}
{"name":"Polynomial.card_support_mul_le","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\n⊢ LE.le (HMul.hMul p q).support.card (HMul.hMul p.support.card q.support.card)","decl":"open scoped Pointwise in\ntheorem card_support_mul_le : #(p * q).support ≤ #p.support * #q.support := by\n  calc #(p * q).support\n   _ = #(p.toFinsupp * q.toFinsupp).support := by rw [← support_toFinsupp, toFinsupp_mul]\n   _ ≤ #(p.toFinsupp.support + q.toFinsupp.support) :=\n    Finset.card_le_card (AddMonoidAlgebra.support_mul p.toFinsupp q.toFinsupp)\n   _ ≤ #p.support * #q.support := Finset.card_image₂_le ..\n\n"}
{"name":"Polynomial.lsum_apply","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u_1\nA : Type u_2\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : Semiring A\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R A\ninst✝ : Module R M\nf : Nat → LinearMap (RingHom.id R) A M\np : Polynomial A\n⊢ Eq ((Polynomial.lsum f) p) (p.sum fun x1 x2 => (f x1) x2)","decl":"/-- `Polynomial.sum` as a linear map. -/\n@[simps]\ndef lsum {R A M : Type*} [Semiring R] [Semiring A] [AddCommMonoid M] [Module R A] [Module R M]\n    (f : ℕ → A →ₗ[R] M) : A[X] →ₗ[R] M where\n  toFun p := p.sum (f · ·)\n  map_add' p q := sum_add_index p q _ (fun n => (f n).map_zero) fun n _ _ => (f n).map_add _ _\n  map_smul' c p := by\n    -- Porting note: added `dsimp only`; `beta_reduce` alone is not sufficient\n    dsimp only\n    rw [sum_eq_of_subset (f · ·) (fun n => (f n).map_zero) (support_smul c p)]\n    simp only [sum_def, Finset.smul_sum, coeff_smul, LinearMap.map_smul, RingHom.id_apply]\n\n"}
{"name":"Polynomial.lcoeff_apply","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nn : Nat\nf : Polynomial R\n⊢ Eq ((Polynomial.lcoeff R n) f) (f.coeff n)","decl":"@[simp]\ntheorem lcoeff_apply (n : ℕ) (f : R[X]) : lcoeff R n f = coeff f n :=\n  rfl\n\n"}
{"name":"Polynomial.finset_sum_coeff","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nι : Type u_1\ns : Finset ι\nf : ι → Polynomial R\nn : Nat\n⊢ Eq ((s.sum fun b => f b).coeff n) (s.sum fun b => (f b).coeff n)","decl":"@[simp]\ntheorem finset_sum_coeff {ι : Type*} (s : Finset ι) (f : ι → R[X]) (n : ℕ) :\n    coeff (∑ b ∈ s, f b) n = ∑ b ∈ s, coeff (f b) n :=\n  map_sum (lcoeff R n) _ _\n\n"}
{"name":"Polynomial.coeff_list_sum","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nl : List (Polynomial R)\nn : Nat\n⊢ Eq (l.sum.coeff n) (List.map (⇑(Polynomial.lcoeff R n)) l).sum","decl":"lemma coeff_list_sum (l : List R[X]) (n : ℕ) :\n    l.sum.coeff n = (l.map (lcoeff R n)).sum :=\n  map_list_sum (lcoeff R n) _\n\n"}
{"name":"Polynomial.coeff_list_sum_map","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nι : Type u_1\nl : List ι\nf : ι → Polynomial R\nn : Nat\n⊢ Eq ((List.map f l).sum.coeff n) (List.map (fun a => (f a).coeff n) l).sum","decl":"lemma coeff_list_sum_map {ι : Type*} (l : List ι) (f : ι → R[X]) (n : ℕ) :\n    (l.map f).sum.coeff n = (l.map (fun a => (f a).coeff n)).sum := by\n  simp_rw [coeff_list_sum, List.map_map, Function.comp_def, lcoeff_apply]\n\n"}
{"name":"Polynomial.coeff_sum","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\np : Polynomial R\ninst✝ : Semiring S\nn : Nat\nf : Nat → R → Polynomial S\n⊢ Eq ((p.sum f).coeff n) (p.sum fun a b => (f a b).coeff n)","decl":"@[simp]\ntheorem coeff_sum [Semiring S] (n : ℕ) (f : ℕ → R → S[X]) :\n    coeff (p.sum f) n = p.sum fun a b => coeff (f a b) n := by\n  rcases p with ⟨⟩\n  simp [Polynomial.sum, support_ofFinsupp, coeff_ofFinsupp]\n\n"}
{"name":"Polynomial.coeff_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nn : Nat\n⊢ Eq ((HMul.hMul p q).coeff n) ((Finset.HasAntidiagonal.antidiagonal n).sum fun x => HMul.hMul (p.coeff x.1) (q.coeff x.2))","decl":"/-- Decomposes the coefficient of the product `p * q` as a sum\nover `antidiagonal`. A version which sums over `range (n + 1)` can be obtained\nby using `Finset.Nat.sum_antidiagonal_eq_sum_range_succ`. -/\ntheorem coeff_mul (p q : R[X]) (n : ℕ) :\n    coeff (p * q) n = ∑ x ∈ antidiagonal n, coeff p x.1 * coeff q x.2 := by\n  rcases p with ⟨p⟩; rcases q with ⟨q⟩\n  simp_rw [← ofFinsupp_mul, coeff]\n  exact AddMonoidAlgebra.mul_apply_antidiagonal p q n _ Finset.mem_antidiagonal\n\n"}
{"name":"Polynomial.mul_coeff_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\n⊢ Eq ((HMul.hMul p q).coeff 0) (HMul.hMul (p.coeff 0) (q.coeff 0))","decl":"@[simp]\ntheorem mul_coeff_zero (p q : R[X]) : coeff (p * q) 0 = coeff p 0 * coeff q 0 := by simp [coeff_mul]\n\n"}
{"name":"Polynomial.mul_coeff_one","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\n⊢ Eq ((HMul.hMul p q).coeff 1) (HAdd.hAdd (HMul.hMul (p.coeff 0) (q.coeff 1)) (HMul.hMul (p.coeff 1) (q.coeff 0)))","decl":"theorem mul_coeff_one (p q : R[X]) :\n    coeff (p * q) 1 = coeff p 0 * coeff q 1 + coeff p 1 * coeff q 0 := by\n  rw [coeff_mul, Nat.antidiagonal_eq_map]\n  simp [sum_range_succ]\n\n"}
{"name":"Polynomial.constantCoeff_apply","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq (Polynomial.constantCoeff p) (p.coeff 0)","decl":"/-- `constantCoeff p` returns the constant term of the polynomial `p`,\n  defined as `coeff p 0`. This is a ring homomorphism. -/\n@[simps]\ndef constantCoeff : R[X] →+* R where\n  toFun p := coeff p 0\n  map_one' := coeff_one_zero\n  map_mul' := mul_coeff_zero\n  map_zero' := coeff_zero 0\n  map_add' p q := coeff_add p q 0\n\n"}
{"name":"Polynomial.isUnit_C","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nx : R\n⊢ Iff (IsUnit (Polynomial.C x)) (IsUnit x)","decl":"theorem isUnit_C {x : R} : IsUnit (C x) ↔ IsUnit x :=\n  ⟨fun h => (congr_arg IsUnit coeff_C_zero).mp (h.map <| @constantCoeff R _), fun h => h.map C⟩\n\n"}
{"name":"Polynomial.coeff_mul_X_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq ((HMul.hMul p Polynomial.X).coeff 0) 0","decl":"theorem coeff_mul_X_zero (p : R[X]) : coeff (p * X) 0 = 0 := by simp\n\n"}
{"name":"Polynomial.coeff_X_mul_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq ((HMul.hMul Polynomial.X p).coeff 0) 0","decl":"theorem coeff_X_mul_zero (p : R[X]) : coeff (X * p) 0 = 0 := by simp\n\n"}
{"name":"Polynomial.coeff_C_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nx : R\nk n : Nat\n⊢ Eq ((HMul.hMul (Polynomial.C x) (HPow.hPow Polynomial.X k)).coeff n) (ite (Eq n k) x 0)","decl":"theorem coeff_C_mul_X_pow (x : R) (k n : ℕ) :\n    coeff (C x * X ^ k : R[X]) n = if n = k then x else 0 := by\n  rw [C_mul_X_pow_eq_monomial, coeff_monomial]\n  congr 1\n  simp [eq_comm]\n\n"}
{"name":"Polynomial.coeff_C_mul_X","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nx : R\nn : Nat\n⊢ Eq ((HMul.hMul (Polynomial.C x) Polynomial.X).coeff n) (ite (Eq n 1) x 0)","decl":"theorem coeff_C_mul_X (x : R) (n : ℕ) : coeff (C x * X : R[X]) n = if n = 1 then x else 0 := by\n  rw [← pow_one X, coeff_C_mul_X_pow]\n\n"}
{"name":"Polynomial.coeff_C_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\na : R\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq ((HMul.hMul (Polynomial.C a) p).coeff n) (HMul.hMul a (p.coeff n))","decl":"@[simp]\ntheorem coeff_C_mul (p : R[X]) : coeff (C a * p) n = a * coeff p n := by\n  rcases p with ⟨p⟩\n  simp_rw [← monomial_zero_left, ← ofFinsupp_single, ← ofFinsupp_mul, coeff]\n  exact AddMonoidAlgebra.single_zero_mul_apply p a n\n\n"}
{"name":"Polynomial.C_mul'","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\na : R\nf : Polynomial R\n⊢ Eq (HMul.hMul (Polynomial.C a) f) (HSMul.hSMul a f)","decl":"theorem C_mul' (a : R) (f : R[X]) : C a * f = a • f := by\n  ext\n  rw [coeff_C_mul, coeff_smul, smul_eq_mul]\n\n"}
{"name":"Polynomial.coeff_mul_C","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\na : R\n⊢ Eq ((HMul.hMul p (Polynomial.C a)).coeff n) (HMul.hMul (p.coeff n) a)","decl":"@[simp]\ntheorem coeff_mul_C (p : R[X]) (n : ℕ) (a : R) : coeff (p * C a) n = coeff p n * a := by\n  rcases p with ⟨p⟩\n  simp_rw [← monomial_zero_left, ← ofFinsupp_single, ← ofFinsupp_mul, coeff]\n  exact AddMonoidAlgebra.mul_single_zero_apply p a n\n\n"}
{"name":"Polynomial.coeff_mul_natCast","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na k : Nat\n⊢ Eq ((HMul.hMul p ↑a).coeff k) (HMul.hMul (p.coeff k) ↑a)","decl":"@[simp] lemma coeff_mul_natCast {a k : ℕ} :\n  coeff (p * (a : R[X])) k = coeff p k * (↑a : R) := coeff_mul_C _ _ _\n\n"}
{"name":"Polynomial.coeff_natCast_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na k : Nat\n⊢ Eq ((HMul.hMul (↑a) p).coeff k) (HMul.hMul (↑a) (p.coeff k))","decl":"@[simp] lemma coeff_natCast_mul {a k : ℕ} :\n  coeff ((a : R[X]) * p) k = a * coeff p k := coeff_C_mul _\n\n"}
{"name":"Polynomial.coeff_mul_ofNat","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝¹ : Semiring R\np : Polynomial R\na k : Nat\ninst✝ : a.AtLeastTwo\n⊢ Eq ((HMul.hMul p (OfNat.ofNat a)).coeff k) (HMul.hMul (p.coeff k) (OfNat.ofNat a))","decl":"@[simp] lemma coeff_mul_ofNat {a k : ℕ} [Nat.AtLeastTwo a] :\n  coeff (p * (ofNat(a) : R[X])) k = coeff p k * ofNat(a) := coeff_mul_C _ _ _\n\n"}
{"name":"Polynomial.coeff_ofNat_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝¹ : Semiring R\np : Polynomial R\na k : Nat\ninst✝ : a.AtLeastTwo\n⊢ Eq ((HMul.hMul (OfNat.ofNat a) p).coeff k) (HMul.hMul (OfNat.ofNat a) (p.coeff k))","decl":"@[simp] lemma coeff_ofNat_mul {a k : ℕ} [Nat.AtLeastTwo a] :\n  coeff ((ofNat(a) : R[X]) * p) k = ofNat(a) * coeff p k := coeff_C_mul _\n\n"}
{"name":"Polynomial.coeff_mul_intCast","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"S : Type v\ninst✝ : Ring S\np : Polynomial S\na : Int\nk : Nat\n⊢ Eq ((HMul.hMul p ↑a).coeff k) (HMul.hMul (p.coeff k) ↑a)","decl":"@[simp] lemma coeff_mul_intCast [Ring S] {p : S[X]} {a : ℤ} {k : ℕ} :\n  coeff (p * (a : S[X])) k = coeff p k * (↑a : S) := coeff_mul_C _ _ _\n\n"}
{"name":"Polynomial.coeff_intCast_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"S : Type v\ninst✝ : Ring S\np : Polynomial S\na : Int\nk : Nat\n⊢ Eq ((HMul.hMul (↑a) p).coeff k) (HMul.hMul (↑a) (p.coeff k))","decl":"@[simp] lemma coeff_intCast_mul [Ring S] {p : S[X]} {a : ℤ} {k : ℕ} :\n  coeff ((a : S[X]) * p) k = a * coeff p k := coeff_C_mul _\n\n"}
{"name":"Polynomial.coeff_X_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nk n : Nat\n⊢ Eq ((HPow.hPow Polynomial.X k).coeff n) (ite (Eq n k) 1 0)","decl":"@[simp]\ntheorem coeff_X_pow (k n : ℕ) : coeff (X ^ k : R[X]) n = if n = k then 1 else 0 := by\n  simp only [one_mul, RingHom.map_one, ← coeff_C_mul_X_pow]\n\n"}
{"name":"Polynomial.coeff_X_pow_self","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nn : Nat\n⊢ Eq ((HPow.hPow Polynomial.X n).coeff n) 1","decl":"theorem coeff_X_pow_self (n : ℕ) : coeff (X ^ n : R[X]) n = 1 := by simp\n\n"}
{"name":"Polynomial.support_binomial","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nk m : Nat\nhkm : Ne k m\nx y : R\nhx : Ne x 0\nhy : Ne y 0\n⊢ Eq (HAdd.hAdd (HMul.hMul (Polynomial.C x) (HPow.hPow Polynomial.X k)) (HMul.hMul (Polynomial.C y) (HPow.hPow Polynomial.X m))).support (Insert.insert k (Singleton.singleton m))","decl":"theorem support_binomial {k m : ℕ} (hkm : k ≠ m) {x y : R} (hx : x ≠ 0) (hy : y ≠ 0) :\n    support (C x * X ^ k + C y * X ^ m) = {k, m} := by\n  apply subset_antisymm (support_binomial' k m x y)\n  simp_rw [insert_subset_iff, singleton_subset_iff, mem_support_iff, coeff_add, coeff_C_mul,\n    coeff_X_pow_self, mul_one, coeff_X_pow, if_neg hkm, if_neg hkm.symm, mul_zero, zero_add,\n    add_zero, Ne, hx, hy, not_false_eq_true, and_true]\n\n"}
{"name":"Polynomial.support_trinomial","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nk m n : Nat\nhkm : LT.lt k m\nhmn : LT.lt m n\nx y z : R\nhx : Ne x 0\nhy : Ne y 0\nhz : Ne z 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C x) (HPow.hPow Polynomial.X k)) (HMul.hMul (Polynomial.C y) (HPow.hPow Polynomial.X m))) (HMul.hMul (Polynomial.C z) (HPow.hPow Polynomial.X n))).support (Insert.insert k (Insert.insert m (Singleton.singleton n)))","decl":"theorem support_trinomial {k m n : ℕ} (hkm : k < m) (hmn : m < n) {x y z : R} (hx : x ≠ 0)\n    (hy : y ≠ 0) (hz : z ≠ 0) :\n    support (C x * X ^ k + C y * X ^ m + C z * X ^ n) = {k, m, n} := by\n  apply subset_antisymm (support_trinomial' k m n x y z)\n  simp_rw [insert_subset_iff, singleton_subset_iff, mem_support_iff, coeff_add, coeff_C_mul,\n    coeff_X_pow_self, mul_one, coeff_X_pow, if_neg hkm.ne, if_neg hkm.ne', if_neg hmn.ne,\n    if_neg hmn.ne', if_neg (hkm.trans hmn).ne, if_neg (hkm.trans hmn).ne', mul_zero, add_zero,\n    zero_add, Ne, hx, hy, hz, not_false_eq_true, and_true]\n\n"}
{"name":"Polynomial.card_support_binomial","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nk m : Nat\nh : Ne k m\nx y : R\nhx : Ne x 0\nhy : Ne y 0\n⊢ Eq (HAdd.hAdd (HMul.hMul (Polynomial.C x) (HPow.hPow Polynomial.X k)) (HMul.hMul (Polynomial.C y) (HPow.hPow Polynomial.X m))).support.card 2","decl":"theorem card_support_binomial {k m : ℕ} (h : k ≠ m) {x y : R} (hx : x ≠ 0) (hy : y ≠ 0) :\n    #(support (C x * X ^ k + C y * X ^ m)) = 2 := by\n  rw [support_binomial h hx hy, card_insert_of_not_mem (mt mem_singleton.mp h), card_singleton]\n\n"}
{"name":"Polynomial.card_support_trinomial","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nk m n : Nat\nhkm : LT.lt k m\nhmn : LT.lt m n\nx y z : R\nhx : Ne x 0\nhy : Ne y 0\nhz : Ne z 0\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul (Polynomial.C x) (HPow.hPow Polynomial.X k)) (HMul.hMul (Polynomial.C y) (HPow.hPow Polynomial.X m))) (HMul.hMul (Polynomial.C z) (HPow.hPow Polynomial.X n))).support.card 3","decl":"theorem card_support_trinomial {k m n : ℕ} (hkm : k < m) (hmn : m < n) {x y z : R} (hx : x ≠ 0)\n    (hy : y ≠ 0) (hz : z ≠ 0) : #(support (C x * X ^ k + C y * X ^ m + C z * X ^ n)) = 3 := by\n  rw [support_trinomial hkm hmn hx hy hz,\n    card_insert_of_not_mem\n      (mt mem_insert.mp (not_or_intro hkm.ne (mt mem_singleton.mp (hkm.trans hmn).ne))),\n    card_insert_of_not_mem (mt mem_singleton.mp hmn.ne), card_singleton]\n\n"}
{"name":"Polynomial.coeff_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn d : Nat\n⊢ Eq ((HMul.hMul p (HPow.hPow Polynomial.X n)).coeff (HAdd.hAdd d n)) (p.coeff d)","decl":"@[simp]\ntheorem coeff_mul_X_pow (p : R[X]) (n d : ℕ) :\n    coeff (p * Polynomial.X ^ n) (d + n) = coeff p d := by\n  rw [coeff_mul, Finset.sum_eq_single (d, n), coeff_X_pow, if_pos rfl, mul_one]\n  · rintro ⟨i, j⟩ h1 h2\n    rw [coeff_X_pow, if_neg, mul_zero]\n    rintro rfl\n    apply h2\n    rw [mem_antidiagonal, add_right_cancel_iff] at h1\n    subst h1\n    rfl\n  · exact fun h1 => (h1 (mem_antidiagonal.2 rfl)).elim\n\n"}
{"name":"Polynomial.coeff_X_pow_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn d : Nat\n⊢ Eq ((HMul.hMul (HPow.hPow Polynomial.X n) p).coeff (HAdd.hAdd d n)) (p.coeff d)","decl":"@[simp]\ntheorem coeff_X_pow_mul (p : R[X]) (n d : ℕ) :\n    coeff (Polynomial.X ^ n * p) (d + n) = coeff p d := by\n  rw [(commute_X_pow p n).eq, coeff_mul_X_pow]\n\n"}
{"name":"Polynomial.coeff_mul_X_pow'","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn d : Nat\n⊢ Eq ((HMul.hMul p (HPow.hPow Polynomial.X n)).coeff d) (ite (LE.le n d) (p.coeff (HSub.hSub d n)) 0)","decl":"theorem coeff_mul_X_pow' (p : R[X]) (n d : ℕ) :\n    (p * X ^ n).coeff d = ite (n ≤ d) (p.coeff (d - n)) 0 := by\n  split_ifs with h\n  · rw [← tsub_add_cancel_of_le h, coeff_mul_X_pow, add_tsub_cancel_right]\n  · refine (coeff_mul _ _ _).trans (Finset.sum_eq_zero fun x hx => ?_)\n    rw [coeff_X_pow, if_neg, mul_zero]\n    exact ((le_of_add_le_right (mem_antidiagonal.mp hx).le).trans_lt <| not_le.mp h).ne\n\n"}
{"name":"Polynomial.coeff_X_pow_mul'","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn d : Nat\n⊢ Eq ((HMul.hMul (HPow.hPow Polynomial.X n) p).coeff d) (ite (LE.le n d) (p.coeff (HSub.hSub d n)) 0)","decl":"theorem coeff_X_pow_mul' (p : R[X]) (n d : ℕ) :\n    (X ^ n * p).coeff d = ite (n ≤ d) (p.coeff (d - n)) 0 := by\n  rw [(commute_X_pow p n).eq, coeff_mul_X_pow']\n\n"}
{"name":"Polynomial.coeff_mul_X","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\n⊢ Eq ((HMul.hMul p Polynomial.X).coeff (HAdd.hAdd n 1)) (p.coeff n)","decl":"@[simp]\ntheorem coeff_mul_X (p : R[X]) (n : ℕ) : coeff (p * X) (n + 1) = coeff p n := by\n  simpa only [pow_one] using coeff_mul_X_pow p 1 n\n\n"}
{"name":"Polynomial.coeff_X_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\n⊢ Eq ((HMul.hMul Polynomial.X p).coeff (HAdd.hAdd n 1)) (p.coeff n)","decl":"@[simp]\ntheorem coeff_X_mul (p : R[X]) (n : ℕ) : coeff (X * p) (n + 1) = coeff p n := by\n  rw [(commute_X p).eq, coeff_mul_X]\n\n"}
{"name":"Polynomial.coeff_mul_monomial","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn d : Nat\nr : R\n⊢ Eq ((HMul.hMul p ((Polynomial.monomial n) r)).coeff (HAdd.hAdd d n)) (HMul.hMul (p.coeff d) r)","decl":"theorem coeff_mul_monomial (p : R[X]) (n d : ℕ) (r : R) :\n    coeff (p * monomial n r) (d + n) = coeff p d * r := by\n  rw [← C_mul_X_pow_eq_monomial, ← X_pow_mul, ← mul_assoc, coeff_mul_C, coeff_mul_X_pow]\n\n"}
{"name":"Polynomial.coeff_monomial_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn d : Nat\nr : R\n⊢ Eq ((HMul.hMul ((Polynomial.monomial n) r) p).coeff (HAdd.hAdd d n)) (HMul.hMul r (p.coeff d))","decl":"theorem coeff_monomial_mul (p : R[X]) (n d : ℕ) (r : R) :\n    coeff (monomial n r * p) (d + n) = r * coeff p d := by\n  rw [← C_mul_X_pow_eq_monomial, mul_assoc, coeff_C_mul, X_pow_mul, coeff_mul_X_pow]\n\n-- This can already be proved by `simp`.\n"}
{"name":"Polynomial.coeff_mul_monomial_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nd : Nat\nr : R\n⊢ Eq ((HMul.hMul p ((Polynomial.monomial 0) r)).coeff d) (HMul.hMul (p.coeff d) r)","decl":"theorem coeff_mul_monomial_zero (p : R[X]) (d : ℕ) (r : R) :\n    coeff (p * monomial 0 r) d = coeff p d * r :=\n  coeff_mul_monomial p 0 d r\n\n-- This can already be proved by `simp`.\n"}
{"name":"Polynomial.coeff_monomial_zero_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nd : Nat\nr : R\n⊢ Eq ((HMul.hMul ((Polynomial.monomial 0) r) p).coeff d) (HMul.hMul r (p.coeff d))","decl":"theorem coeff_monomial_zero_mul (p : R[X]) (d : ℕ) (r : R) :\n    coeff (monomial 0 r * p) d = r * coeff p d :=\n  coeff_monomial_mul p 0 d r\n\n"}
{"name":"Polynomial.mul_X_pow_eq_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\nH : Eq (HMul.hMul p (HPow.hPow Polynomial.X n)) 0\n⊢ Eq p 0","decl":"theorem mul_X_pow_eq_zero {p : R[X]} {n : ℕ} (H : p * X ^ n = 0) : p = 0 :=\n  ext fun k => (coeff_mul_X_pow p n k).symm.trans <| ext_iff.1 H (k + n)\n\n"}
{"name":"Polynomial.isRegular_X_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nn : Nat\n⊢ IsRegular (HPow.hPow Polynomial.X n)","decl":"theorem isRegular_X_pow (n : ℕ) : IsRegular (X ^ n : R[X]) := by\n  suffices IsLeftRegular (X^n : R[X]) from\n    ⟨this, this.right_of_commute (fun p => commute_X_pow p n)⟩\n  intro P Q (hPQ : X^n * P = X^n * Q)\n  ext i\n  rw [← coeff_X_pow_mul P n i, hPQ, coeff_X_pow_mul Q n i]\n\n"}
{"name":"Polynomial.isRegular_X","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\n⊢ IsRegular Polynomial.X","decl":"@[simp] theorem isRegular_X : IsRegular (X : R[X]) := pow_one (X : R[X]) ▸ isRegular_X_pow 1\n\n"}
{"name":"Polynomial.coeff_X_add_C_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nr : R\nn k : Nat\n⊢ Eq ((HPow.hPow (HAdd.hAdd Polynomial.X (Polynomial.C r)) n).coeff k) (HMul.hMul (HPow.hPow r (HSub.hSub n k)) ↑(n.choose k))","decl":"theorem coeff_X_add_C_pow (r : R) (n k : ℕ) :\n    ((X + C r) ^ n).coeff k = r ^ (n - k) * (n.choose k : R) := by\n  rw [(commute_X (C r : R[X])).add_pow, ← lcoeff_apply, map_sum]\n  simp only [one_pow, mul_one, lcoeff_apply, ← C_eq_natCast, ← C_pow, coeff_mul_C, Nat.cast_id]\n  rw [Finset.sum_eq_single k, coeff_X_pow_self, one_mul]\n  · intro _ _ h\n    simp [coeff_X_pow, h.symm]\n  · simp only [coeff_X_pow_self, one_mul, not_lt, Finset.mem_range]\n    intro h\n    rw [Nat.choose_eq_zero_of_lt h, Nat.cast_zero, mul_zero]\n\n"}
{"name":"Polynomial.coeff_X_add_one_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn k : Nat\n⊢ Eq ((HPow.hPow (HAdd.hAdd Polynomial.X 1) n).coeff k) ↑(n.choose k)","decl":"theorem coeff_X_add_one_pow (R : Type*) [Semiring R] (n k : ℕ) :\n    ((X + 1) ^ n).coeff k = (n.choose k : R) := by rw [← C_1, coeff_X_add_C_pow, one_pow, one_mul]\n\n"}
{"name":"Polynomial.coeff_one_add_X_pow","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn k : Nat\n⊢ Eq ((HPow.hPow (HAdd.hAdd 1 Polynomial.X) n).coeff k) ↑(n.choose k)","decl":"theorem coeff_one_add_X_pow (R : Type*) [Semiring R] (n k : ℕ) :\n    ((1 + X) ^ n).coeff k = (n.choose k : R) := by rw [add_comm _ X, coeff_X_add_one_pow]\n\n"}
{"name":"Polynomial.C_dvd_iff_dvd_coeff","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\nr : R\nφ : Polynomial R\n⊢ Iff (Dvd.dvd (Polynomial.C r) φ) (∀ (i : Nat), Dvd.dvd r (φ.coeff i))","decl":"theorem C_dvd_iff_dvd_coeff (r : R) (φ : R[X]) : C r ∣ φ ↔ ∀ i, r ∣ φ.coeff i := by\n  constructor\n  · rintro ⟨φ, rfl⟩ c\n    rw [coeff_C_mul]\n    apply dvd_mul_right\n  · intro h\n    choose c hc using h\n    classical\n      let c' : ℕ → R := fun i => if i ∈ φ.support then c i else 0\n      let ψ : R[X] := ∑ i ∈ φ.support, monomial i (c' i)\n      use ψ\n      ext i\n      simp only [c', ψ, coeff_C_mul, mem_support_iff, coeff_monomial, finset_sum_coeff,\n        Finset.sum_ite_eq']\n      split_ifs with hi\n      · rw [hc]\n      · rw [Classical.not_not] at hi\n        rwa [mul_zero]\n\n"}
{"name":"Polynomial.smul_eq_C_mul","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na : R\n⊢ Eq (HSMul.hSMul a p) (HMul.hMul (Polynomial.C a) p)","decl":"theorem smul_eq_C_mul (a : R) : a • p = C a * p := by simp [ext_iff]\n\n"}
{"name":"Polynomial.update_eq_add_sub_coeff","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u_1\ninst✝ : Ring R\np : Polynomial R\nn : Nat\na : R\n⊢ Eq (p.update n a) (HAdd.hAdd p (HMul.hMul (Polynomial.C (HSub.hSub a (p.coeff n))) (HPow.hPow Polynomial.X n)))","decl":"theorem update_eq_add_sub_coeff {R : Type*} [Ring R] (p : R[X]) (n : ℕ) (a : R) :\n    p.update n a = p + Polynomial.C (a - p.coeff n) * Polynomial.X ^ n := by\n  ext\n  rw [coeff_update_apply, coeff_add, coeff_C_mul_X_pow]\n  split_ifs with h <;> simp [h]\n\n"}
{"name":"Polynomial.natCast_coeff_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"n : Nat\nR : Type u_1\ninst✝ : Semiring R\n⊢ Eq ((↑n).coeff 0) ↑n","decl":"theorem natCast_coeff_zero {n : ℕ} {R : Type*} [Semiring R] : (n : R[X]).coeff 0 = n := by\n  simp only [coeff_natCast_ite, ite_true]\n\n"}
{"name":"Polynomial.natCast_inj","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"m n : Nat\nR : Type u_1\ninst✝¹ : Semiring R\ninst✝ : CharZero R\n⊢ Iff (Eq ↑m ↑n) (Eq m n)","decl":"@[norm_cast]\ntheorem natCast_inj {m n : ℕ} {R : Type*} [Semiring R] [CharZero R] :\n    (↑m : R[X]) = ↑n ↔ m = n := by\n  constructor\n  · intro h\n    apply_fun fun p => p.coeff 0 at h\n    simpa using h\n  · rintro rfl\n    rfl\n\n"}
{"name":"Polynomial.intCast_coeff_zero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"i : Int\nR : Type u_1\ninst✝ : Ring R\n⊢ Eq ((↑i).coeff 0) ↑i","decl":"@[simp]\ntheorem intCast_coeff_zero {i : ℤ} {R : Type*} [Ring R] : (i : R[X]).coeff 0 = i := by\n  cases i <;> simp\n\n"}
{"name":"Polynomial.intCast_inj","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"m n : Int\nR : Type u_1\ninst✝¹ : Ring R\ninst✝ : CharZero R\n⊢ Iff (Eq ↑m ↑n) (Eq m n)","decl":"@[norm_cast]\ntheorem intCast_inj {m n : ℤ} {R : Type*} [Ring R] [CharZero R] : (↑m : R[X]) = ↑n ↔ m = n := by\n  constructor\n  · intro h\n    apply_fun fun p => p.coeff 0 at h\n    simpa using h\n  · rintro rfl\n    rfl\n\n"}
{"name":"Polynomial.charZero","module":"Mathlib.Algebra.Polynomial.Coeff","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : CharZero R\n⊢ CharZero (Polynomial R)","decl":"instance charZero [CharZero R] : CharZero R[X] where cast_injective _x _y := natCast_inj.mp\n\n"}
