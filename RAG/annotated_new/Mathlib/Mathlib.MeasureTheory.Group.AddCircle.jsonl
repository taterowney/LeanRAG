{"name":"AddCircle.closedBall_ae_eq_ball","module":"Mathlib.MeasureTheory.Group.AddCircle","initialProofState":"T : Real\nhT : Fact (LT.lt 0 T)\nx : AddCircle T\nŒµ : Real\n‚ä¢ (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyEq (Metric.closedBall x Œµ) (Metric.ball x Œµ)","decl":"theorem closedBall_ae_eq_ball {x : AddCircle T} {Œµ : ‚Ñù} : closedBall x Œµ =·µê[volume] ball x Œµ := by\n  rcases le_or_lt Œµ 0 with hŒµ | hŒµ\n  ¬∑ rw [ball_eq_empty.mpr hŒµ, ae_eq_empty, volume_closedBall,\n      min_eq_right (by linarith [hT.out] : 2 * Œµ ‚â§ T), ENNReal.ofReal_eq_zero]\n    exact mul_nonpos_of_nonneg_of_nonpos zero_le_two hŒµ\n  ¬∑ suffices volume (closedBall x Œµ) ‚â§ volume (ball x Œµ) from\n      (ae_eq_of_subset_of_measure_ge ball_subset_closedBall this\n        measurableSet_ball.nullMeasurableSet (measure_ne_top _ _)).symm\n    have : Tendsto (fun Œ¥ => volume (closedBall x Œ¥)) (ùìù[<] Œµ) (ùìù <| volume (closedBall x Œµ)) := by\n      simp_rw [volume_closedBall]\n      refine ENNReal.tendsto_ofReal (Tendsto.min tendsto_const_nhds <| Tendsto.const_mul _ ?_)\n      exact nhdsWithin_le_nhds\n    refine le_of_tendsto this <| mem_of_superset (Ioo_mem_nhdsLT hŒµ) fun r hr ‚Ü¶ ?_\n    exact measure_mono (closedBall_subset_ball hr.2)\n\n"}
{"name":"AddCircle.isAddFundamentalDomain_of_ae_ball","module":"Mathlib.MeasureTheory.Group.AddCircle","initialProofState":"T : Real\nhT : Fact (LT.lt 0 T)\nI : Set (AddCircle T)\nu x : AddCircle T\nhu : IsOfFinAddOrder u\nhI : (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyEq I (Metric.ball x (HDiv.hDiv T (HMul.hMul 2 ‚Üë(addOrderOf u))))\n‚ä¢ MeasureTheory.IsAddFundamentalDomain (Subtype fun x => Membership.mem (AddSubgroup.zmultiples u) x) I MeasureTheory.MeasureSpace.volume","decl":"/-- Let `G` be the subgroup of `AddCircle T` generated by a point `u` of finite order `n : ‚Ñï`. Then\nany set `I` that is almost equal to a ball of radius `T / 2n` is a fundamental domain for the action\nof `G` on `AddCircle T` by left addition. -/\ntheorem isAddFundamentalDomain_of_ae_ball (I : Set <| AddCircle T) (u x : AddCircle T)\n    (hu : IsOfFinAddOrder u) (hI : I =·µê[volume] ball x (T / (2 * addOrderOf u))) :\n    IsAddFundamentalDomain (AddSubgroup.zmultiples u) I := by\n  set G := AddSubgroup.zmultiples u\n  set n := addOrderOf u\n  set B := ball x (T / (2 * n))\n  have hn : 1 ‚â§ (n : ‚Ñù) := by norm_cast; linarith [hu.addOrderOf_pos]\n  refine IsAddFundamentalDomain.mk_of_measure_univ_le ?_ ?_ ?_ ?_\n  ¬∑ -- `NullMeasurableSet I volume`\n    exact measurableSet_ball.nullMeasurableSet.congr hI.symm\n  ¬∑ -- `‚àÄ (g : G), g ‚â† 0 ‚Üí AEDisjoint volume (g +·µ• I) I`\n    rintro ‚ü®g, hg‚ü© hg'\n    replace hg' : g ‚â† 0 := by simpa only [Ne, AddSubgroup.mk_eq_zero] using hg'\n    change AEDisjoint volume (g +·µ• I) I\n    refine AEDisjoint.congr (Disjoint.aedisjoint ?_)\n      ((quasiMeasurePreserving_add_left volume (-g)).vadd_ae_eq_of_ae_eq g hI) hI\n    have hBg : g +·µ• B = ball (g + x) (T / (2 * n)) := by\n      rw [add_comm g x, ‚Üê singleton_add_ball _ x g, add_ball, thickening_singleton]\n    rw [hBg]\n    apply ball_disjoint_ball\n    rw [dist_eq_norm, add_sub_cancel_right, div_mul_eq_div_div, ‚Üê add_div, ‚Üê add_div,\n      add_self_div_two, div_le_iff‚ÇÄ' (by positivity : 0 < (n : ‚Ñù)), ‚Üê nsmul_eq_mul]\n    refine (le_add_order_smul_norm_of_isOfFinAddOrder (hu.of_mem_zmultiples hg) hg').trans\n      (nsmul_le_nsmul_left (norm_nonneg g) ?_)\n    exact Nat.le_of_dvd (addOrderOf_pos_iff.mpr hu) (addOrderOf_dvd_of_mem_zmultiples hg)\n  ¬∑ -- `‚àÄ (g : G), QuasiMeasurePreserving (VAdd.vadd g) volume volume`\n    exact fun g => quasiMeasurePreserving_add_left (G := AddCircle T) volume g\n  ¬∑ -- `volume univ ‚â§ ‚àë' (g : G), volume (g +·µ• I)`\n    replace hI := hI.trans closedBall_ae_eq_ball.symm\n    haveI : Fintype G := @Fintype.ofFinite _ hu.finite_zmultiples.to_subtype\n    have hG_card : (Finset.univ : Finset G).card = n := by\n      show _ = addOrderOf u\n      rw [‚Üê Nat.card_zmultiples, Nat.card_eq_fintype_card]; rfl\n    simp_rw [measure_vadd]\n    rw [AddCircle.measure_univ, tsum_fintype, Finset.sum_const, measure_congr hI,\n      volume_closedBall, ‚Üê ENNReal.ofReal_nsmul, mul_div, mul_div_mul_comm,\n      div_self, one_mul, min_eq_right (div_le_self hT.out.le hn), hG_card,\n      nsmul_eq_mul, mul_div_cancel‚ÇÄ T (lt_of_lt_of_le zero_lt_one hn).ne.symm]\n    exact two_ne_zero\n\n"}
{"name":"AddCircle.volume_of_add_preimage_eq","module":"Mathlib.MeasureTheory.Group.AddCircle","initialProofState":"T : Real\nhT : Fact (LT.lt 0 T)\ns I : Set (AddCircle T)\nu x : AddCircle T\nhu : IsOfFinAddOrder u\nhs : (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyEq (HVAdd.hVAdd u s) s\nhI : (MeasureTheory.ae MeasureTheory.MeasureSpace.volume).EventuallyEq I (Metric.ball x (HDiv.hDiv T (HMul.hMul 2 ‚Üë(addOrderOf u))))\n‚ä¢ Eq (MeasureTheory.MeasureSpace.volume s) (HSMul.hSMul (addOrderOf u) (MeasureTheory.MeasureSpace.volume (Inter.inter s I)))","decl":"theorem volume_of_add_preimage_eq (s I : Set <| AddCircle T) (u x : AddCircle T)\n    (hu : IsOfFinAddOrder u) (hs : (u +·µ• s : Set <| AddCircle T) =·µê[volume] s)\n    (hI : I =·µê[volume] ball x (T / (2 * addOrderOf u))) :\n    volume s = addOrderOf u ‚Ä¢ volume (s ‚à© I) := by\n  let G := AddSubgroup.zmultiples u\n  haveI : Fintype G := @Fintype.ofFinite _ hu.finite_zmultiples.to_subtype\n  have hsG : ‚àÄ g : G, (g +·µ• s : Set <| AddCircle T) =·µê[volume] s := by\n    rintro ‚ü®y, hy‚ü©; exact (vadd_ae_eq_self_of_mem_zmultiples hs hy :)\n  rw [(isAddFundamentalDomain_of_ae_ball I u x hu hI).measure_eq_card_smul_of_vadd_ae_eq_self s hsG,\n    ‚Üê Nat.card_zmultiples u]\n\n"}
