{"name":"Asymptotics.isLittleOTVS_congr","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nl : Filter α\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 l f₁ g₁) (Asymptotics.IsLittleOTVS 𝕜 l f₂ g₂)","decl":"theorem isLittleOTVS_congr (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) :\n    f₁ =o[𝕜;l] g₁ ↔ f₂ =o[𝕜;l] g₂ := by\n  simp only [IsLittleOTVS]\n  refine forall₂_congr fun U hU => exists_congr fun V => and_congr_right fun hV =>\n    forall₂_congr fun ε hε => Filter.eventually_congr ?_\n  filter_upwards [hf, hg] with _ e₁ e₂\n  rw [e₁, e₂]\n\n"}
{"name":"Asymptotics.IsLittleOTVS.congr'","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nl : Filter α\nh : Asymptotics.IsLittleOTVS 𝕜 l f₁ g₁\nhf : l.EventuallyEq f₁ f₂\nhg : l.EventuallyEq g₁ g₂\n⊢ Asymptotics.IsLittleOTVS 𝕜 l f₂ g₂","decl":"/-- A stronger version of `IsLittleOTVS.congr` that requires the functions only agree along the\nfilter. -/\ntheorem IsLittleOTVS.congr' (h : f₁ =o[𝕜;l] g₁) (hf : f₁ =ᶠ[l] f₂) (hg : g₁ =ᶠ[l] g₂) :\n    f₂ =o[𝕜;l] g₂ :=\n  (isLittleOTVS_congr hf hg).mp h\n\n"}
{"name":"Asymptotics.IsLittleOTVS.congr","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf₁ f₂ : α → E\ng₁ g₂ : α → F\nl : Filter α\nh : Asymptotics.IsLittleOTVS 𝕜 l f₁ g₁\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsLittleOTVS 𝕜 l f₂ g₂","decl":"theorem IsLittleOTVS.congr (h : f₁ =o[𝕜;l] g₁) (hf : ∀ x, f₁ x = f₂ x) (hg : ∀ x, g₁ x = g₂ x) :\n    f₂ =o[𝕜;l] g₂ :=\n  h.congr' (univ_mem' hf) (univ_mem' hg)\n\n"}
{"name":"Asymptotics.IsLittleOTVS.congr_left","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf₁ f₂ : α → E\ng : α → F\nl : Filter α\nh : Asymptotics.IsLittleOTVS 𝕜 l f₁ g\nhf : ∀ (x : α), Eq (f₁ x) (f₂ x)\n⊢ Asymptotics.IsLittleOTVS 𝕜 l f₂ g","decl":"theorem IsLittleOTVS.congr_left (h : f₁ =o[𝕜;l] g) (hf : ∀ x, f₁ x = f₂ x) : f₂ =o[𝕜;l] g :=\n  h.congr hf fun _ => rfl\n\n"}
{"name":"Asymptotics.IsLittleOTVS.congr_right","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf : α → E\ng₁ g₂ : α → F\nl : Filter α\nh : Asymptotics.IsLittleOTVS 𝕜 l f g₁\nhg : ∀ (x : α), Eq (g₁ x) (g₂ x)\n⊢ Asymptotics.IsLittleOTVS 𝕜 l f g₂","decl":"theorem IsLittleOTVS.congr_right (h : f =o[𝕜;l] g₁) (hg : ∀ x, g₁ x = g₂ x) : f =o[𝕜;l] g₂ :=\n  h.congr (fun _ => rfl) hg\n\n"}
{"name":"Asymptotics.IsLittleOTVS.trans","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\nG : Type u_6\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : TopologicalSpace F\ninst✝³ : Module 𝕜 F\ninst✝² : AddCommGroup G\ninst✝¹ : TopologicalSpace G\ninst✝ : Module 𝕜 G\nl : Filter α\nf : α → E\ng : α → F\nk : α → G\nhfg : Asymptotics.IsLittleOTVS 𝕜 l f g\nhgk : Asymptotics.IsLittleOTVS 𝕜 l g k\n⊢ Asymptotics.IsLittleOTVS 𝕜 l f k","decl":"@[trans]\ntheorem IsLittleOTVS.trans {k : α → G} (hfg : f =o[𝕜;l] g) (hgk : g =o[𝕜;l] k) : f =o[𝕜;l] k := by\n  intros U hU\n  obtain ⟨V, hV0, hV⟩ := hfg U hU\n  obtain ⟨W, hW0, hW⟩ := hgk V hV0\n  refine ⟨W, hW0, fun ε hε => ?_⟩\n  filter_upwards [hV ε hε, hW 1 one_ne_zero] with a hfga hgka\n  refine hfga.trans ?_\n  gcongr\n  simpa using hgka\n\n"}
{"name":"Filter.HasBasis.isLittleOTVS_iff","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl : Filter α\nf : α → E\ng : α → F\nιE : Sort u_7\nιF : Sort u_8\npE : ιE → Prop\npF : ιF → Prop\nsE : ιE → Set E\nsF : ιF → Set F\nhE : (nhds 0).HasBasis pE sE\nhF : (nhds 0).HasBasis pF sF\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 l f g) (∀ (i : ιE), pE i → Exists fun j => And (pF j) (∀ (ε : NNReal), Ne ε 0 → Filter.Eventually (fun x => LE.le (egauge 𝕜 (sE i) (f x)) (HMul.hMul (↑ε) (egauge 𝕜 (sF j) (g x)))) l))","decl":"theorem _root_.Filter.HasBasis.isLittleOTVS_iff {ιE ιF : Sort*} {pE : ιE → Prop} {pF : ιF → Prop}\n    {sE : ιE → Set E} {sF : ιF → Set F} (hE : HasBasis (𝓝 (0 : E)) pE sE)\n    (hF : HasBasis (𝓝 (0 : F)) pF sF) :\n    f =o[𝕜;l] g ↔ ∀ i, pE i → ∃ j, pF j ∧ ∀ ε ≠ (0 : ℝ≥0),\n      ∀ᶠ x in l, egauge 𝕜 (sE i) (f x) ≤ ε * egauge 𝕜 (sF j) (g x) := by\n  refine (hE.forall_iff ?_).trans <| forall₂_congr fun _ _ ↦ hF.exists_iff ?_\n  · rintro s t hsub ⟨V, hV₀, hV⟩\n    exact ⟨V, hV₀, fun ε hε ↦ (hV ε hε).mono fun x ↦ le_trans <| egauge_anti _ hsub _⟩\n  · refine fun s t hsub h ε hε ↦ (h ε hε).mono fun x hx ↦ hx.trans ?_\n    gcongr\n\n"}
{"name":"Asymptotics.isLittleOTVS_iff_smallSets","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl : Filter α\nf : α → E\ng : α → F\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 l f g) (∀ (U : Set E), Membership.mem (nhds 0) U → Filter.Eventually (fun V => ∀ (ε : NNReal), Ne ε 0 → Filter.Eventually (fun x => LE.le (egauge 𝕜 U (f x)) (HMul.hMul (↑ε) (egauge 𝕜 V (g x)))) l) (nhds 0).smallSets)","decl":"theorem isLittleOTVS_iff_smallSets :\n    f =o[𝕜; l] g ↔ ∀ U ∈ 𝓝 0, ∀ᶠ V in (𝓝 0).smallSets, ∀ ε ≠ (0 : ℝ≥0),\n      ∀ᶠ x in l, egauge 𝕜 U (f x) ≤ ε * egauge 𝕜 V (g x) :=\n  forall₂_congr fun U hU ↦ .symm <| eventually_smallSets' fun V₁ V₂ hV hV₂ ε hε ↦\n    (hV₂ ε hε).mono fun x hx ↦ hx.trans <| by gcongr\n\n"}
{"name":"Asymptotics.IsLittleOTVS.eventually_smallSets","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl : Filter α\nf : α → E\ng : α → F\na✝¹ : Asymptotics.IsLittleOTVS 𝕜 l f g\nU : Set E\na✝ : Membership.mem (nhds 0) U\n⊢ Filter.Eventually (fun V => ∀ (ε : NNReal), Ne ε 0 → Filter.Eventually (fun x => LE.le (egauge 𝕜 U (f x)) (HMul.hMul (↑ε) (egauge 𝕜 V (g x)))) l) (nhds 0).smallSets","decl":"alias ⟨IsLittleOTVS.eventually_smallSets, _⟩ := isLittleOTVS_iff_smallSets\n\n"}
{"name":"Asymptotics.isLittleOTVS_map","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\nβ : Type u_2\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf : α → E\ng : α → F\nk : β → α\nl : Filter β\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 (Filter.map k l) f g) (Asymptotics.IsLittleOTVS 𝕜 l (Function.comp f k) (Function.comp g k))","decl":"@[simp]\ntheorem isLittleOTVS_map {k : β → α} {l : Filter β} :\n    f =o[𝕜; map k l] g ↔ (f ∘ k) =o[𝕜;l] (g ∘ k) := by\n  simp [IsLittleOTVS]\n\n"}
{"name":"Asymptotics.IsLittleOTVS.mono","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl₁ l₂ : Filter α\nf : α → E\ng : α → F\nhf : Asymptotics.IsLittleOTVS 𝕜 l₁ f g\nh : LE.le l₂ l₁\n⊢ Asymptotics.IsLittleOTVS 𝕜 l₂ f g","decl":"lemma IsLittleOTVS.mono (hf : f =o[𝕜;l₁] g) (h : l₂ ≤ l₁) : f =o[𝕜;l₂] g :=\n  fun U hU => let ⟨V, hV0, hV⟩ := hf U hU; ⟨V, hV0, fun ε hε => (hV ε hε).filter_mono h⟩\n\n"}
{"name":"Asymptotics.IsLittleOTVS.comp_tendsto","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\nβ : Type u_2\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl : Filter α\nf : α → E\ng : α → F\nk : β → α\nlb : Filter β\nh : Asymptotics.IsLittleOTVS 𝕜 l f g\nhk : Filter.Tendsto k lb l\n⊢ Asymptotics.IsLittleOTVS 𝕜 lb (Function.comp f k) (Function.comp g k)","decl":"lemma IsLittleOTVS.comp_tendsto {k : β → α} {lb : Filter β} (h : f =o[𝕜; l] g)\n    (hk : Tendsto k lb l) : (f ∘ k) =o[𝕜; lb] (g ∘ k) :=\n  isLittleOTVS_map.mp (h.mono hk)\n\n"}
{"name":"Asymptotics.isLittleOTVS_sup","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl₁ l₂ : Filter α\nf : α → E\ng : α → F\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 (Max.max l₁ l₂) f g) (And (Asymptotics.IsLittleOTVS 𝕜 l₁ f g) (Asymptotics.IsLittleOTVS 𝕜 l₂ f g))","decl":"lemma isLittleOTVS_sup : f =o[𝕜; l₁ ⊔ l₂] g ↔ f =o[𝕜; l₁] g ∧ f =o[𝕜; l₂] g := by\n  simp only [isLittleOTVS_iff_smallSets, ← forall_and, ← eventually_and, eventually_sup]\n\n"}
{"name":"Asymptotics.IsLittleOTVS.sup","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl₁ l₂ : Filter α\nf : α → E\ng : α → F\nhf₁ : Asymptotics.IsLittleOTVS 𝕜 l₁ f g\nhf₂ : Asymptotics.IsLittleOTVS 𝕜 l₂ f g\n⊢ Asymptotics.IsLittleOTVS 𝕜 (Max.max l₁ l₂) f g","decl":"lemma IsLittleOTVS.sup (hf₁ : f =o[𝕜; l₁] g) (hf₂ : f =o[𝕜; l₂] g) : f =o[𝕜; l₁ ⊔ l₂] g :=\n  isLittleOTVS_sup.mpr ⟨hf₁, hf₂⟩\n\n"}
{"name":"Asymptotics.IsLittleOTVS.zero","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\ng : α → F\nl : Filter α\n⊢ Asymptotics.IsLittleOTVS 𝕜 l 0 g","decl":"@[simp]\nlemma IsLittleOTVS.zero (g : α → F) (l : Filter α) : (0 : α → E) =o[𝕜;l] g := by\n  intros U hU\n  simpa [egauge_zero_right _ (Filter.nonempty_of_mem hU)] using ⟨univ, by simp⟩\n\n"}
{"name":"Asymptotics.isLittleOTVS_insert","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : AddCommGroup F\ninst✝² : TopologicalSpace F\ninst✝¹ : Module 𝕜 F\nf : α → E\ng : α → F\ninst✝ : TopologicalSpace α\nx : α\ns : Set α\nh : Eq (f x) 0\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 (nhdsWithin x (Insert.insert x s)) f g) (Asymptotics.IsLittleOTVS 𝕜 (nhdsWithin x s) f g)","decl":"lemma isLittleOTVS_insert [TopologicalSpace α] {x : α} {s : Set α} (h : f x = 0) :\n    f =o[𝕜;(𝓝[insert x s] x)] g ↔ f =o[𝕜;(𝓝[s] x)] g := by\n  rw [nhdsWithin_insert, isLittleOTVS_sup, and_iff_right]\n  exact .congr' (.zero g _) h.symm .rfl\n\n"}
{"name":"Asymptotics.IsLittleOTVS.insert","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : AddCommGroup F\ninst✝² : TopologicalSpace F\ninst✝¹ : Module 𝕜 F\nf : α → E\ng : α → F\ninst✝ : TopologicalSpace α\nx : α\ns : Set α\nh : Asymptotics.IsLittleOTVS 𝕜 (nhdsWithin x s) f g\nhf : Eq (f x) 0\n⊢ Asymptotics.IsLittleOTVS 𝕜 (nhdsWithin x (Insert.insert x s)) f g","decl":"lemma IsLittleOTVS.insert [TopologicalSpace α] {x : α} {s : Set α}\n    (h : f =o[𝕜;(𝓝[s] x)] g) (hf : f x = 0) :\n    f =o[𝕜;(𝓝[insert x s] x)] g :=\n  (isLittleOTVS_insert hf).2 h\n\n"}
{"name":"Asymptotics.IsLittleOTVS.bot","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nf : α → E\ng : α → F\n⊢ Asymptotics.IsLittleOTVS 𝕜 Bot.bot f g","decl":"@[simp]\nlemma IsLittleOTVS.bot : f =o[𝕜;⊥] g :=\n  fun u hU => ⟨univ, by simp⟩\n\n"}
{"name":"Asymptotics.IsLittleOTVS.add","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁸ : NontriviallyNormedField 𝕜\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : Module 𝕜 E\ninst✝⁴ : AddCommGroup F\ninst✝³ : TopologicalSpace F\ninst✝² : Module 𝕜 F\ninst✝¹ : TopologicalAddGroup E\ninst✝ : ContinuousSMul 𝕜 E\nf₁ f₂ : α → E\ng : α → F\nl : Filter α\nh₁ : Asymptotics.IsLittleOTVS 𝕜 l f₁ g\nh₂ : Asymptotics.IsLittleOTVS 𝕜 l f₂ g\n⊢ Asymptotics.IsLittleOTVS 𝕜 l (HAdd.hAdd f₁ f₂) g","decl":"theorem IsLittleOTVS.add [TopologicalAddGroup E] [ContinuousSMul 𝕜 E]\n    {f₁ f₂ : α → E} {g : α → F} {l : Filter α}\n    (h₁ : f₁ =o[𝕜; l] g) (h₂ : f₂ =o[𝕜; l] g) : (f₁ + f₂) =o[𝕜; l] g := by\n  rw [(nhds_basis_balanced 𝕜 E).add_self.isLittleOTVS_iff (basis_sets _)]\n  rintro U ⟨hU, hUb⟩\n  rcases ((h₁.eventually_smallSets U hU).and (h₂.eventually_smallSets U hU)).exists_mem_of_smallSets\n    with ⟨V, hV, hVf₁, hVf₂⟩\n  refine ⟨V, hV, fun ε hε ↦ ?_⟩\n  filter_upwards [hVf₁ ε hε, hVf₂ ε hε] with x hx₁ hx₂\n  exact (egauge_add_add_le hUb hUb _ _).trans (max_le hx₁ hx₂)\n\n"}
{"name":"Asymptotics.IsLittleOTVS.smul_left","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁶ : NontriviallyNormedField 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : Module 𝕜 E\ninst✝² : AddCommGroup F\ninst✝¹ : TopologicalSpace F\ninst✝ : Module 𝕜 F\nl : Filter α\nf : α → E\ng : α → F\nh : Asymptotics.IsLittleOTVS 𝕜 l f g\nc : α → 𝕜\n⊢ Asymptotics.IsLittleOTVS 𝕜 l (fun x => HSMul.hSMul (c x) (f x)) fun x => HSMul.hSMul (c x) (g x)","decl":"protected lemma IsLittleOTVS.smul_left (h : f =o[𝕜;l] g) (c : α → 𝕜) :\n    (fun x ↦ c x • f x) =o[𝕜;l] (fun x ↦ c x • g x) := by\n  unfold IsLittleOTVS at *\n  peel h with U hU V hV ε hε x hx\n  rw [egauge_smul_right, egauge_smul_right, mul_left_comm]\n  · gcongr\n  all_goals exact fun _ ↦ Filter.nonempty_of_mem ‹_›\n\n"}
{"name":"Asymptotics.isLittleOTVS_one","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : TopologicalSpace E\ninst✝¹ : Module 𝕜 E\nl : Filter α\nf : α → E\ninst✝ : ContinuousSMul 𝕜 E\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 l f 1) (Filter.Tendsto f l (nhds 0))","decl":"lemma isLittleOTVS_one [ContinuousSMul 𝕜 E] : f =o[𝕜;l] (1 : α → 𝕜) ↔ Tendsto f l (𝓝 0) := by\n  constructor\n  · intro hf\n    rw [(basis_sets _).isLittleOTVS_iff nhds_basis_ball] at hf\n    rw [(nhds_basis_balanced 𝕜 E).tendsto_right_iff]\n    rintro U ⟨hU, hUb⟩\n    rcases hf U hU with ⟨r, hr₀, hr⟩\n    lift r to ℝ≥0 using hr₀.le\n    norm_cast at hr₀\n    rcases NormedField.exists_one_lt_norm 𝕜 with ⟨c, hc⟩\n    obtain ⟨ε, hε₀, hε⟩ : ∃ ε : ℝ≥0, 0 < ε ∧ (ε * ‖c‖₊ / r : ℝ≥0∞) < 1 := by\n      apply Eventually.exists_gt\n      refine Continuous.tendsto' ?_ _ _ (by simp) |>.eventually_lt_const zero_lt_one\n      fun_prop (disch := intros; first | apply ENNReal.coe_ne_top | positivity)\n    filter_upwards [hr ε hε₀.ne'] with x hx\n    refine mem_of_egauge_lt_one hUb (hx.trans_lt ?_)\n    calc\n      (ε : ℝ≥0∞) * egauge 𝕜 (ball (0 : 𝕜) r) 1 ≤ (ε * ‖c‖₊ / r : ℝ≥0∞) := by\n        rw [mul_div_assoc]\n        gcongr\n        simpa using egauge_ball_le_of_one_lt_norm (r := r) (x := (1 : 𝕜)) hc (by simp)\n      _ < 1 := ‹_›\n  · intro hf U hU\n    refine ⟨ball 0 1, ball_mem_nhds _ one_pos, fun ε hε ↦ ?_⟩\n    rcases NormedField.exists_norm_lt 𝕜 hε.bot_lt with ⟨c, hc₀, hcε⟩\n    replace hc₀ : c ≠ 0 := by simpa using hc₀\n    filter_upwards [hf ((set_smul_mem_nhds_zero_iff hc₀).2 hU)] with a ha\n    calc\n      egauge 𝕜 U (f a) ≤ ‖c‖₊ := egauge_le_of_mem_smul ha\n      _ ≤ ε := mod_cast hcε.le\n      _ ≤ ε * egauge 𝕜 (ball (0 : 𝕜) 1) 1 := by\n        apply le_mul_of_one_le_right'\n        simpa using le_egauge_ball_one 𝕜 (1 : 𝕜)\n\n"}
{"name":"Asymptotics.IsLittleOTVS.tendsto_inv_smul","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : TopologicalSpace E\ninst✝¹ : Module 𝕜 E\nl : Filter α\ninst✝ : ContinuousSMul 𝕜 E\nf : α → 𝕜\ng : α → E\nh : Asymptotics.IsLittleOTVS 𝕜 l g f\n⊢ Filter.Tendsto (fun x => HSMul.hSMul (Inv.inv (f x)) (g x)) l (nhds 0)","decl":"lemma IsLittleOTVS.tendsto_inv_smul [ContinuousSMul 𝕜 E] {f : α → 𝕜} {g : α → E} (h : g =o[𝕜;l] f) :\n    Tendsto (fun x ↦ (f x)⁻¹ • g x) l (𝓝 0) := by\n  rw [← isLittleOTVS_one (𝕜 := 𝕜)]\n  intro U hU\n  rcases h.smul_left f⁻¹ U hU with ⟨V, hV₀, hV⟩\n  refine ⟨V, hV₀, fun ε hε ↦ (hV ε hε).mono fun x hx ↦ hx.trans ?_⟩\n  by_cases hx₀ : f x = 0 <;> simp [hx₀, egauge_zero_right _ (Filter.nonempty_of_mem hV₀)]\n\n"}
{"name":"Asymptotics.isLittleOTVS_iff_tendsto_inv_smul","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : TopologicalSpace E\ninst✝¹ : Module 𝕜 E\ninst✝ : ContinuousSMul 𝕜 E\nf : α → 𝕜\ng : α → E\nl : Filter α\nh₀ : Filter.Eventually (fun x => Eq (f x) 0 → Eq (g x) 0) l\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 l g f) (Filter.Tendsto (fun x => HSMul.hSMul (Inv.inv (f x)) (g x)) l (nhds 0))","decl":"lemma isLittleOTVS_iff_tendsto_inv_smul [ContinuousSMul 𝕜 E] {f : α → 𝕜} {g : α → E} {l : Filter α}\n    (h₀ : ∀ᶠ x in l, f x = 0 → g x = 0) :\n    g =o[𝕜;l] f ↔ Tendsto (fun x ↦ (f x)⁻¹ • g x) l (𝓝 0) := by\n  refine ⟨IsLittleOTVS.tendsto_inv_smul, fun h ↦ ?_⟩\n  refine (((isLittleOTVS_one (𝕜 := 𝕜)).mpr h).smul_left f).congr' (h₀.mono fun x hx ↦ ?_) (by simp)\n  by_cases h : f x = 0 <;> simp [h, hx]\n\n"}
{"name":"Asymptotics.isLittleOTVS_iff_isLittleO","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : NormedSpace 𝕜 F\nf : α → E\ng : α → F\nl : Filter α\n⊢ Iff (Asymptotics.IsLittleOTVS 𝕜 l f g) (Asymptotics.IsLittleO l f g)","decl":"lemma isLittleOTVS_iff_isLittleO {f : α → E} {g : α → F} {l : Filter α} :\n    f =o[𝕜;l] g ↔ f =o[l] g := by\n  rcases NormedField.exists_one_lt_norm 𝕜 with ⟨c, hc : 1 < ‖c‖₊⟩\n  have hc₀ : 0 < ‖c‖₊ := one_pos.trans hc\n  simp only [isLittleO_iff, nhds_basis_ball.isLittleOTVS_iff nhds_basis_ball]\n  refine ⟨fun h ε hε ↦ ?_, fun h ε hε ↦ ⟨1, one_pos, fun δ hδ ↦ ?_⟩⟩\n  · rcases h ε hε with ⟨δ, hδ₀, hδ⟩\n    lift ε to ℝ≥0 using hε.le; lift δ to ℝ≥0 using hδ₀.le; norm_cast at hε hδ₀\n    filter_upwards [hδ (δ / ‖c‖₊) (div_pos hδ₀ hc₀).ne'] with x hx\n    suffices (‖f x‖₊ / ε : ℝ≥0∞) ≤ ‖g x‖₊ by\n      rw [← ENNReal.coe_div hε.ne'] at this\n      rw [← div_le_iff₀' (NNReal.coe_pos.2 hε)]\n      exact_mod_cast this\n    calc\n      (‖f x‖₊ / ε : ℝ≥0∞) ≤ egauge 𝕜 (ball 0 ε) (f x) := div_le_egauge_ball 𝕜 _ _\n      _ ≤ ↑(δ / ‖c‖₊) * egauge 𝕜 (ball 0 ↑δ) (g x) := hx\n      _ ≤ (δ / ‖c‖₊) * (‖c‖₊ * ‖g x‖₊ / δ) := by\n        gcongr\n        exacts [ENNReal.coe_div_le, egauge_ball_le_of_one_lt_norm hc (.inl <| ne_of_gt hδ₀)]\n      _ = (δ / δ) * (‖c‖₊ / ‖c‖₊) * ‖g x‖₊ := by simp only [div_eq_mul_inv]; ring\n      _ ≤ 1 * 1 * ‖g x‖₊ := by gcongr <;> exact ENNReal.div_self_le_one\n      _ = ‖g x‖₊ := by simp\n  · filter_upwards [@h ↑(ε * δ / ‖c‖₊) (by positivity)] with x (hx : ‖f x‖₊ ≤ ε * δ / ‖c‖₊ * ‖g x‖₊)\n    lift ε to ℝ≥0 using hε.le\n    calc\n      egauge 𝕜 (ball 0 ε) (f x) ≤ ‖c‖₊ * ‖f x‖₊ / ε :=\n        egauge_ball_le_of_one_lt_norm hc (.inl <| ne_of_gt hε)\n      _ ≤ ‖c‖₊ * (↑(ε * δ / ‖c‖₊) * ‖g x‖₊) / ε := by gcongr; exact_mod_cast hx\n      _ = (‖c‖₊ / ‖c‖₊) * (ε / ε) * δ * ‖g x‖₊ := by\n        simp only [div_eq_mul_inv, ENNReal.coe_inv hc₀.ne', ENNReal.coe_mul]; ring\n      _ ≤ 1 * 1 * δ * ‖g x‖₊ := by gcongr <;> exact ENNReal.div_self_le_one\n      _ = δ * ‖g x‖₊ := by simp\n      _ ≤ δ * egauge 𝕜 (ball 0 1) (g x) := by gcongr; apply le_egauge_ball_one\n\n"}
{"name":"Asymptotics.IsLittleO.isLittleOTVS","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : NormedSpace 𝕜 F\nf : α → E\ng : α → F\nl : Filter α\na✝ : Asymptotics.IsLittleO l f g\n⊢ Asymptotics.IsLittleOTVS 𝕜 l f g","decl":"alias ⟨isLittleOTVS.isLittleO, IsLittleO.isLittleOTVS⟩ := isLittleOTVS_iff_isLittleO\n\n"}
{"name":"Asymptotics.isLittleOTVS.isLittleO","module":"Mathlib.Analysis.Asymptotics.TVS","initialProofState":"α : Type u_1\n𝕜 : Type u_3\nE : Type u_4\nF : Type u_5\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedAddCommGroup F\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : NormedSpace 𝕜 F\nf : α → E\ng : α → F\nl : Filter α\na✝ : Asymptotics.IsLittleOTVS 𝕜 l f g\n⊢ Asymptotics.IsLittleO l f g","decl":"alias ⟨isLittleOTVS.isLittleO, IsLittleO.isLittleOTVS⟩ := isLittleOTVS_iff_isLittleO\n\n"}
