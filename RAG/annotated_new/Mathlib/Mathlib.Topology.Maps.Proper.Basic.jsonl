{"name":"isProperMap_iff_clusterPt","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (∀ ⦃ℱ : Filter X⦄ ⦃y : Y⦄, MapClusterPt y ℱ f → Exists fun x => And (Eq (f x) y) (ClusterPt x ℱ)))","decl":"/-- A map `f : X → Y` between two topological spaces is said to be **proper** if it is continuous\nand, for all `ℱ : Filter X`, any cluster point of `map f ℱ` is the image by `f` of a cluster point\nof `ℱ`. -/\n@[mk_iff isProperMap_iff_clusterPt, fun_prop]\nstructure IsProperMap (f : X → Y) extends Continuous f : Prop where\n  /-- By definition, if `f` is a proper map and `ℱ` is any filter on `X`, then any cluster point of\n  `map f ℱ` is the image by `f` of some cluster point of `ℱ`. -/\n  clusterPt_of_mapClusterPt :\n    ∀ ⦃ℱ : Filter X⦄, ∀ ⦃y : Y⦄, MapClusterPt y ℱ f → ∃ x, f x = y ∧ ClusterPt x ℱ\n\n"}
{"name":"IsProperMap.clusterPt_of_mapClusterPt","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsProperMap f\nℱ : Filter X\ny : Y\na✝ : MapClusterPt y ℱ f\n⊢ Exists fun x => And (Eq (f x) y) (ClusterPt x ℱ)","decl":"/-- A map `f : X → Y` between two topological spaces is said to be **proper** if it is continuous\nand, for all `ℱ : Filter X`, any cluster point of `map f ℱ` is the image by `f` of a cluster point\nof `ℱ`. -/\n@[mk_iff isProperMap_iff_clusterPt, fun_prop]\nstructure IsProperMap (f : X → Y) extends Continuous f : Prop where\n  /-- By definition, if `f` is a proper map and `ℱ` is any filter on `X`, then any cluster point of\n  `map f ℱ` is the image by `f` of some cluster point of `ℱ`. -/\n  clusterPt_of_mapClusterPt :\n    ∀ ⦃ℱ : Filter X⦄, ∀ ⦃y : Y⦄, MapClusterPt y ℱ f → ∃ x, f x = y ∧ ClusterPt x ℱ\n\n"}
{"name":"IsProperMap.toContinuous","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nself : IsProperMap f\n⊢ Continuous f","decl":"/-- A map `f : X → Y` between two topological spaces is said to be **proper** if it is continuous\nand, for all `ℱ : Filter X`, any cluster point of `map f ℱ` is the image by `f` of a cluster point\nof `ℱ`. -/\n@[mk_iff isProperMap_iff_clusterPt, fun_prop]\nstructure IsProperMap (f : X → Y) extends Continuous f : Prop where\n  /-- By definition, if `f` is a proper map and `ℱ` is any filter on `X`, then any cluster point of\n  `map f ℱ` is the image by `f` of some cluster point of `ℱ`. -/\n  clusterPt_of_mapClusterPt :\n    ∀ ⦃ℱ : Filter X⦄, ∀ ⦃y : Y⦄, MapClusterPt y ℱ f → ∃ x, f x = y ∧ ClusterPt x ℱ\n\n"}
{"name":"IsProperMap.continuous","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nh : IsProperMap f\n⊢ Continuous f","decl":"/-- By definition, a proper map is continuous. -/\n@[fun_prop]\nlemma IsProperMap.continuous (h : IsProperMap f) : Continuous f := h.toContinuous\n\n"}
{"name":"IsProperMap.isClosedMap","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nh : IsProperMap f\n⊢ IsClosedMap f","decl":"/-- A proper map is closed. -/\nlemma IsProperMap.isClosedMap (h : IsProperMap f) : IsClosedMap f := by\n  rw [isClosedMap_iff_clusterPt]\n  exact fun s y ↦ h.clusterPt_of_mapClusterPt (ℱ := 𝓟 s) (y := y)\n\n"}
{"name":"isProperMap_iff_ultrafilter","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (∀ ⦃𝒰 : Ultrafilter X⦄ ⦃y : Y⦄, Filter.Tendsto f (↑𝒰) (nhds y) → Exists fun x => And (Eq (f x) y) (LE.le (↑𝒰) (nhds x))))","decl":"/-- Characterization of proper maps by ultrafilters. -/\nlemma isProperMap_iff_ultrafilter : IsProperMap f ↔ Continuous f ∧\n    ∀ ⦃𝒰 : Ultrafilter X⦄, ∀ ⦃y : Y⦄, Tendsto f 𝒰 (𝓝 y) → ∃ x, f x = y ∧ 𝒰 ≤ 𝓝 x := by\n  -- This is morally trivial since ultrafilters give all the information about cluster points.\n  rw [isProperMap_iff_clusterPt]\n  refine and_congr_right (fun _ ↦ ?_)\n  constructor <;> intro H\n  · intro 𝒰 y (hY : (Ultrafilter.map f 𝒰 : Filter Y) ≤ _)\n    simp_rw [← Ultrafilter.clusterPt_iff] at hY ⊢\n    exact H hY\n  · simp_rw [MapClusterPt, ClusterPt, ← Filter.push_pull', map_neBot_iff, ← exists_ultrafilter_iff,\n      forall_exists_index]\n    intro ℱ y 𝒰 hy\n    rcases H (tendsto_iff_comap.mpr <| hy.trans inf_le_left) with ⟨x, hxy, hx⟩\n    exact ⟨x, hxy, 𝒰, le_inf hx (hy.trans inf_le_right)⟩\n\n"}
{"name":"isProperMap_iff_ultrafilter_of_t2","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\ninst✝ : T2Space Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (∀ ⦃𝒰 : Ultrafilter X⦄ ⦃y : Y⦄, Filter.Tendsto f (↑𝒰) (nhds y) → Exists fun x => LE.le (↑𝒰) (nhds x)))","decl":"lemma isProperMap_iff_ultrafilter_of_t2 [T2Space Y] : IsProperMap f ↔ Continuous f ∧\n    ∀ ⦃𝒰 : Ultrafilter X⦄, ∀ ⦃y : Y⦄, Tendsto f 𝒰 (𝓝 y) → ∃ x, 𝒰.1 ≤ 𝓝 x :=\n  isProperMap_iff_ultrafilter.trans <| and_congr_right fun hc ↦ forall₃_congr fun _𝒰 _y hy ↦\n    exists_congr fun x ↦ and_iff_right_of_imp fun h ↦\n      tendsto_nhds_unique ((hc.tendsto x).mono_left h) hy\n\n"}
{"name":"IsProperMap.ultrafilter_le_nhds_of_tendsto","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nh : IsProperMap f\n𝒰 : Ultrafilter X\ny : Y\nhy : Filter.Tendsto f (↑𝒰) (nhds y)\n⊢ Exists fun x => And (Eq (f x) y) (LE.le (↑𝒰) (nhds x))","decl":"/-- If `f` is proper and converges to `y` along some ultrafilter `𝒰`, then `𝒰` converges to some\n`x` such that `f x = y`. -/\nlemma IsProperMap.ultrafilter_le_nhds_of_tendsto (h : IsProperMap f) ⦃𝒰 : Ultrafilter X⦄ ⦃y : Y⦄\n    (hy : Tendsto f 𝒰 (𝓝 y)) : ∃ x, f x = y ∧ 𝒰 ≤ 𝓝 x :=\n  (isProperMap_iff_ultrafilter.mp h).2 hy\n\n"}
{"name":"IsProperMap.comp","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : X → Y\ng : Y → Z\nhf : IsProperMap f\nhg : IsProperMap g\n⊢ IsProperMap (Function.comp g f)","decl":"/-- The composition of two proper maps is proper. -/\nlemma IsProperMap.comp (hf : IsProperMap f) (hg : IsProperMap g) :\n    IsProperMap (g ∘ f) := by\n  refine ⟨by fun_prop, fun ℱ z h ↦ ?_⟩\n  rw [mapClusterPt_comp] at h\n  rcases hg.clusterPt_of_mapClusterPt h with ⟨y, rfl, hy⟩\n  rcases hf.clusterPt_of_mapClusterPt hy with ⟨x, rfl, hx⟩\n  use x, rfl\n\n\n"}
{"name":"isProperMap_of_comp_of_surj","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : X → Y\ng : Y → Z\nhf : Continuous f\nhg : Continuous g\nhgf : IsProperMap (Function.comp g f)\nf_surj : Function.Surjective f\n⊢ IsProperMap g","decl":"/-- If the composition of two continuous functions `g ∘ f` is proper and `f` is surjective,\nthen `g` is proper. -/\nlemma isProperMap_of_comp_of_surj (hf : Continuous f)\n    (hg : Continuous g) (hgf : IsProperMap (g ∘ f)) (f_surj : f.Surjective) : IsProperMap g := by\n  refine ⟨hg, fun ℱ z h ↦ ?_⟩\n  rw [← ℱ.map_comap_of_surjective f_surj, ← mapClusterPt_comp] at h\n  rcases hgf.clusterPt_of_mapClusterPt h with ⟨x, rfl, hx⟩\n  rw [← ℱ.map_comap_of_surjective f_surj]\n  exact ⟨f x, rfl, hx.map hf.continuousAt tendsto_map⟩\n\n"}
{"name":"isProperMap_of_comp_of_inj","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : X → Y\ng : Y → Z\nhf : Continuous f\nhg : Continuous g\nhgf : IsProperMap (Function.comp g f)\ng_inj : Function.Injective g\n⊢ IsProperMap f","decl":"/-- If the composition of two continuous functions `g ∘ f` is proper and `g` is injective,\nthen `f` is proper. -/\nlemma isProperMap_of_comp_of_inj {f : X → Y} {g : Y → Z} (hf : Continuous f) (hg : Continuous g)\n    (hgf : IsProperMap (g ∘ f)) (g_inj : g.Injective) : IsProperMap f := by\n  refine ⟨hf, fun ℱ y h ↦ ?_⟩\n  rcases hgf.clusterPt_of_mapClusterPt (h.map hg.continuousAt tendsto_map) with ⟨x, hx1, hx2⟩\n  exact ⟨x, g_inj hx1, hx2⟩\n\n"}
{"name":"isProperMap_of_comp_of_t2","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\nf : X → Y\ng : Y → Z\ninst✝ : T2Space Y\nhf : Continuous f\nhg : Continuous g\nhgf : IsProperMap (Function.comp g f)\n⊢ IsProperMap f","decl":"/-- If the composition of two continuous functions `f : X → Y` and `g : Y → Z` is proper\nand `Y` is T2, then `f` is proper. -/\nlemma isProperMap_of_comp_of_t2 [T2Space Y] (hf : Continuous f) (hg : Continuous g)\n    (hgf : IsProperMap (g ∘ f)) : IsProperMap f := by\n  rw [isProperMap_iff_ultrafilter_of_t2]\n  refine ⟨hf, fun 𝒰 y h ↦ ?_⟩\n  rw [isProperMap_iff_ultrafilter] at hgf\n  rcases hgf.2 ((hg.tendsto y).comp h) with ⟨x, -, hx⟩\n  exact ⟨x, hx⟩\n\n"}
{"name":"IsProperMap.prodMap","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\nW : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace W\nf : X → Y\ng : Z → W\nhf : IsProperMap f\nhg : IsProperMap g\n⊢ IsProperMap (Prod.map f g)","decl":"/-- A binary product of proper maps is proper. -/\nlemma IsProperMap.prodMap {g : Z → W} (hf : IsProperMap f) (hg : IsProperMap g) :\n    IsProperMap (Prod.map f g) := by\n  simp_rw [isProperMap_iff_ultrafilter] at hf hg ⊢\n  constructor\n  -- Continuity is clear.\n  · exact hf.1.prodMap hg.1\n  -- Let `𝒰 : Ultrafilter (X × Z)`, and assume that `f × g` tends to some `(y, w) : Y × W`\n  -- along `𝒰`.\n  · intro 𝒰 ⟨y, w⟩ hyw\n  -- That means that `f` tends to `y` along `map fst 𝒰` and `g` tends to `w` along `map snd 𝒰`.\n    simp_rw [nhds_prod_eq, tendsto_prod_iff'] at hyw\n  -- Thus, by properness of `f` and `g`, we get some `x : X` and `z : Z` such that `f x = y`,\n  -- `g z = w`, `map fst 𝒰` tends to  `x`, and `map snd 𝒰` tends to `y`.\n    rcases hf.2 (show Tendsto f (Ultrafilter.map fst 𝒰) (𝓝 y) by simpa using hyw.1) with\n      ⟨x, hxy, hx⟩\n    rcases hg.2 (show Tendsto g (Ultrafilter.map snd 𝒰) (𝓝 w) by simpa using hyw.2) with\n      ⟨z, hzw, hz⟩\n  -- By the properties of the product topology, that means that `𝒰` tends to `(x, z)`,\n  -- which completes the proof since `(f × g)(x, z) = (y, w)`.\n    refine ⟨⟨x, z⟩, Prod.ext hxy hzw, ?_⟩\n    rw [nhds_prod_eq, le_prod]\n    exact ⟨hx, hz⟩\n\n"}
{"name":"IsProperMap.prod_map","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\nW : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace W\nf : X → Y\ng : Z → W\nhf : IsProperMap f\nhg : IsProperMap g\n⊢ IsProperMap (Prod.map f g)","decl":"@[deprecated (since := \"2024-10-06\")] alias IsProperMap.prod_map := IsProperMap.prodMap\n\n"}
{"name":"IsProperMap.pi_map","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"ι : Type u_5\nX : ι → Type u_6\nY : ι → Type u_7\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : (i : ι) → TopologicalSpace (Y i)\nf : (i : ι) → X i → Y i\nh : ∀ (i : ι), IsProperMap (f i)\n⊢ IsProperMap fun x i => f i (x i)","decl":"/-- Any product of proper maps is proper. -/\nlemma IsProperMap.pi_map {X Y : ι → Type*} [∀ i, TopologicalSpace (X i)]\n    [∀ i, TopologicalSpace (Y i)] {f : (i : ι) → X i → Y i} (h : ∀ i, IsProperMap (f i)) :\n    IsProperMap (fun (x : ∀ i, X i) i ↦ f i (x i)) := by\n  simp_rw [isProperMap_iff_ultrafilter] at h ⊢\n  constructor\n  -- Continuity is clear.\n  · exact continuous_pi fun i ↦ (h i).1.comp (continuous_apply i)\n  -- Let `𝒰 : Ultrafilter (Π i, X i)`, and assume that `Π i, f i` tends to some `y : Π i, Y i`\n  -- along `𝒰`.\n  · intro 𝒰 y hy\n  -- That means that each `f i` tends to `y i` along `map (eval i) 𝒰`.\n    have : ∀ i, Tendsto (f i) (Ultrafilter.map (eval i) 𝒰) (𝓝 (y i)) := by\n      simpa [tendsto_pi_nhds] using hy\n  -- Thus, by properness of all the `f i`s, we can choose some `x : Π i, X i` such that, for all\n  -- `i`, `f i (x i) = y i` and `map (eval i) 𝒰` tends to  `x i`.\n    choose x hxy hx using fun i ↦ (h i).2 (this i)\n  -- By the properties of the product topology, that means that `𝒰` tends to `x`,\n  -- which completes the proof since `(Π i, f i) x = y`.\n    refine ⟨x, funext hxy, ?_⟩\n    rwa [nhds_pi, le_pi]\n\n"}
{"name":"IsProperMap.isCompact_preimage","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nh : IsProperMap f\nK : Set Y\nhK : IsCompact K\n⊢ IsCompact (Set.preimage f K)","decl":"/-- The preimage of a compact set by a proper map is again compact. See also\n`isProperMap_iff_isCompact_preimage` which proves that this property completely characterizes\nproper map when the codomain is compactly generated and Hausdorff. -/\nlemma IsProperMap.isCompact_preimage (h : IsProperMap f) {K : Set Y} (hK : IsCompact K) :\n    IsCompact (f ⁻¹' K) := by\n  rw [isCompact_iff_ultrafilter_le_nhds]\n  -- Let `𝒰 ≤ 𝓟 (f ⁻¹' K)` an ultrafilter.\n  intro 𝒰 h𝒰\n  -- In other words, we have `map f 𝒰 ≤ 𝓟 K`\n  rw [← comap_principal, ← map_le_iff_le_comap, ← Ultrafilter.coe_map] at h𝒰\n  -- Thus, by compactness of `K`, the ultrafilter `map f 𝒰` tends to some `y ∈ K`.\n  rcases hK.ultrafilter_le_nhds _ h𝒰 with ⟨y, hyK, hy⟩\n  -- Then, by properness of `f`, that means that `𝒰` tends to some `x ∈ f ⁻¹' {y} ⊆ f ⁻¹' K`,\n  -- which completes the proof.\n  rcases h.ultrafilter_le_nhds_of_tendsto hy with ⟨x, rfl, hx⟩\n  exact ⟨x, hyK, hx⟩\n\n"}
{"name":"isProperMap_iff_isClosedMap_and_compact_fibers","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (And (IsClosedMap f) (∀ (y : Y), IsCompact (Set.preimage f (Singleton.singleton y)))))","decl":"/-- A map is proper if and only if it is closed and its fibers are compact. -/\ntheorem isProperMap_iff_isClosedMap_and_compact_fibers :\n    IsProperMap f ↔ Continuous f ∧ IsClosedMap f ∧ ∀ y, IsCompact (f ⁻¹' {y}) := by\n  constructor <;> intro H\n  -- Note: In Bourbaki, the direct implication is proved by going through universally closed maps.\n  -- We could do the same (using a `TFAE` cycle) but proving it directly from\n  -- `IsProperMap.isCompact_preimage` is nice enough already so we don't bother with that.\n  · exact ⟨H.continuous, H.isClosedMap, fun y ↦ H.isCompact_preimage isCompact_singleton⟩\n  · rw [isProperMap_iff_clusterPt]\n  -- Let `ℱ : Filter X` and `y` some cluster point of `map f ℱ`.\n    refine ⟨H.1, fun ℱ y hy ↦ ?_⟩\n  -- That means that the singleton `pure y` meets the \"closure\" of `map f ℱ`, by which we mean\n  -- `Filter.lift' (map f ℱ) closure`. But `f` is closed, so\n  -- `closure (map f ℱ) = map f (closure ℱ)` (see `IsClosedMap.lift'_closure_map_eq`).\n  -- Thus `map f (closure ℱ ⊓ 𝓟 (f ⁻¹' {y})) = map f (closure ℱ) ⊓ 𝓟 {y} ≠ ⊥`, hence\n  -- `closure ℱ ⊓ 𝓟 (f ⁻¹' {y}) ≠ ⊥`.\n    rw [H.2.1.mapClusterPt_iff_lift'_closure H.1] at hy\n  -- Now, applying the compactness of `f ⁻¹' {y}` to the nontrivial filter\n  -- `closure ℱ ⊓ 𝓟 (f ⁻¹' {y})`, we obtain that it has a cluster point `x ∈ f ⁻¹' {y}`.\n    rcases H.2.2 y (f := Filter.lift' ℱ closure ⊓ 𝓟 (f ⁻¹' {y})) inf_le_right with ⟨x, hxy, hx⟩\n    refine ⟨x, hxy, ?_⟩\n  -- In particular `x` is a cluster point of `closure ℱ`. Since cluster points of `closure ℱ`\n  -- are exactly cluster points of `ℱ` (see `clusterPt_lift'_closure_iff`), this completes\n  -- the proof.\n    rw [← clusterPt_lift'_closure_iff]\n    exact hx.mono inf_le_left\n\n"}
{"name":"isProperMap_iff_isClosedMap_of_inj","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nf_cont : Continuous f\nf_inj : Function.Injective f\n⊢ Iff (IsProperMap f) (IsClosedMap f)","decl":"/-- An injective and continuous function is proper if and only if it is closed. -/\nlemma isProperMap_iff_isClosedMap_of_inj (f_cont : Continuous f) (f_inj : f.Injective) :\n    IsProperMap f ↔ IsClosedMap f := by\n  refine ⟨fun h ↦ h.isClosedMap, fun h ↦ ?_⟩\n  rw [isProperMap_iff_isClosedMap_and_compact_fibers]\n  exact ⟨f_cont, h, fun y ↦ (subsingleton_singleton.preimage f_inj).isCompact⟩\n\n"}
{"name":"isProperMap_of_isClosedMap_of_inj","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nf_cont : Continuous f\nf_inj : Function.Injective f\nf_closed : IsClosedMap f\n⊢ IsProperMap f","decl":"/-- A injective continuous and closed map is proper. -/\nlemma isProperMap_of_isClosedMap_of_inj (f_cont : Continuous f) (f_inj : f.Injective)\n    (f_closed : IsClosedMap f) : IsProperMap f :=\n  (isProperMap_iff_isClosedMap_of_inj f_cont f_inj).2 f_closed\n\n"}
{"name":"Homeomorph.isProperMap","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ IsProperMap ⇑e","decl":"/-- A homeomorphism is proper. -/\n@[simp] lemma Homeomorph.isProperMap (e : X ≃ₜ Y) : IsProperMap e :=\n  isProperMap_of_isClosedMap_of_inj e.continuous e.injective e.isClosedMap\n\n"}
{"name":"IsHomeomorph.isProperMap","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsHomeomorph f\n⊢ IsProperMap f","decl":"protected lemma IsHomeomorph.isProperMap (hf : IsHomeomorph f) : IsProperMap f :=\n  isProperMap_of_isClosedMap_of_inj hf.continuous hf.injective hf.isClosedMap\n\n"}
{"name":"isProperMap_id","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ IsProperMap id","decl":"/-- The identity is proper. -/\n@[simp] lemma isProperMap_id : IsProperMap (id : X → X) := IsHomeomorph.id.isProperMap\n\n"}
{"name":"Topology.IsClosedEmbedding.isProperMap","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : Topology.IsClosedEmbedding f\n⊢ IsProperMap f","decl":"/-- A closed embedding is proper. -/\nlemma Topology.IsClosedEmbedding.isProperMap (hf : IsClosedEmbedding f) : IsProperMap f :=\n  isProperMap_of_isClosedMap_of_inj hf.continuous hf.injective hf.isClosedMap\n\n"}
{"name":"isProperMap_of_closedEmbedding","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : Topology.IsClosedEmbedding f\n⊢ IsProperMap f","decl":"@[deprecated (since := \"2024-10-20\")]\nalias isProperMap_of_closedEmbedding := IsClosedEmbedding.isProperMap\n\n"}
{"name":"IsClosed.isProperMap_subtypeVal","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nC : Set X\nhC : IsClosed C\n⊢ IsProperMap Subtype.val","decl":"/-- The coercion from a closed subset is proper. -/\nlemma IsClosed.isProperMap_subtypeVal {C : Set X} (hC : IsClosed C) : IsProperMap ((↑) : C → X) :=\n  hC.isClosedEmbedding_subtypeVal.isProperMap\n\n"}
{"name":"isProperMap_subtype_val_of_closed","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nC : Set X\nhC : IsClosed C\n⊢ IsProperMap Subtype.val","decl":"@[deprecated (since := \"2024-10-20\")]\nalias isProperMap_subtype_val_of_closed := IsClosed.isProperMap_subtypeVal\n\n"}
{"name":"IsProperMap.restrict","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nC : Set X\nhf : IsProperMap f\nhC : IsClosed C\n⊢ IsProperMap fun x => f ↑x","decl":"/-- The restriction of a proper map to a closed subset is proper. -/\nlemma IsProperMap.restrict {C : Set X} (hf : IsProperMap f) (hC : IsClosed C) :\n    IsProperMap fun x : C ↦ f x := hC.isProperMap_subtypeVal.comp  hf\n\n"}
{"name":"isProperMap_restr_of_proper_of_closed","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nC : Set X\nhf : IsProperMap f\nhC : IsClosed C\n⊢ IsProperMap fun x => f ↑x","decl":"@[deprecated (since := \"2024-10-20\")]\nalias isProperMap_restr_of_proper_of_closed := IsProperMap.restrict\n\n"}
{"name":"IsProperMap.isClosed_range","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\nhf : IsProperMap f\n⊢ IsClosed (Set.range f)","decl":"/-- The range of a proper map is closed. -/\nlemma IsProperMap.isClosed_range (hf : IsProperMap f) : IsClosed (range f) :=\n  hf.isClosedMap.isClosed_range\n\n"}
{"name":"isProperMap_iff_isClosedMap_and_tendsto_cofinite","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\ninst✝ : T1Space Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (And (IsClosedMap f) (Filter.Tendsto f (Filter.cocompact X) Filter.cofinite)))","decl":"/-- Version of `isProperMap_iff_isClosedMap_and_compact_fibers` in terms of `cofinite` and\n`cocompact`. Only works when the codomain is `T1`. -/\nlemma isProperMap_iff_isClosedMap_and_tendsto_cofinite [T1Space Y] :\n    IsProperMap f ↔ Continuous f ∧ IsClosedMap f ∧ Tendsto f (cocompact X) cofinite := by\n  simp_rw [isProperMap_iff_isClosedMap_and_compact_fibers, Tendsto,\n    le_cofinite_iff_compl_singleton_mem, mem_map, preimage_compl]\n  refine and_congr_right fun f_cont ↦ and_congr_right fun _ ↦\n    ⟨fun H y ↦ (H y).compl_mem_cocompact, fun H y ↦ ?_⟩\n  rcases mem_cocompact.mp (H y) with ⟨K, hK, hKy⟩\n  exact hK.of_isClosed_subset (isClosed_singleton.preimage f_cont)\n    (compl_le_compl_iff_le.mp hKy)\n\n"}
{"name":"Continuous.isProperMap","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\nf : X → Y\ninst✝¹ : CompactSpace X\ninst✝ : T2Space Y\nhf : Continuous f\n⊢ IsProperMap f","decl":"/-- A continuous map from a compact space to a T₂ space is a proper map. -/\ntheorem Continuous.isProperMap [CompactSpace X] [T2Space Y] (hf : Continuous f) : IsProperMap f :=\n  isProperMap_iff_isClosedMap_and_tendsto_cofinite.2 ⟨hf, hf.isClosedMap, by simp⟩\n\n"}
{"name":"IsProperMap.universally_closed","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nZ : Type u_6\ninst✝ : TopologicalSpace Z\nh : IsProperMap f\n⊢ IsClosedMap (Prod.map f id)","decl":"/-- A proper map `f : X → Y` is **universally closed**: for any topological space `Z`, the map\n`Prod.map f id : X × Z → Y × Z` is closed. We will prove in `isProperMap_iff_universally_closed`\nthat proper maps are exactly continuous maps which have this property, but this result should be\neasier to use because it allows `Z` to live in any universe. -/\ntheorem IsProperMap.universally_closed (Z) [TopologicalSpace Z] (h : IsProperMap f) :\n    IsClosedMap (Prod.map f id : X × Z → Y × Z) :=\n  -- `f × id` is proper as a product of proper maps, hence closed.\n  (h.prodMap isProperMap_id).isClosedMap\n\n"}
{"name":"isProperMap_iff_isClosedMap_filter","module":"Mathlib.Topology.Maps.Proper.Basic","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nf : X → Y\n⊢ Iff (IsProperMap f) (And (Continuous f) (IsClosedMap (Prod.map f id)))","decl":"/-- A map `f : X → Y` is proper if and only if it is continuous and the map\n`(Prod.map f id : X × Filter X → Y × Filter X)` is closed. This is stronger than\n`isProperMap_iff_universally_closed` since it shows that there's only one space to check to get\nproperness, but in most cases it doesn't matter. -/\ntheorem isProperMap_iff_isClosedMap_filter {X : Type u} {Y : Type v} [TopologicalSpace X]\n    [TopologicalSpace Y] {f : X → Y} :\n    IsProperMap f ↔ Continuous f ∧ IsClosedMap\n      (Prod.map f id : X × Filter X → Y × Filter X) := by\n  constructor <;> intro H\n  -- The direct implication is clear.\n  · exact ⟨H.continuous, H.universally_closed _⟩\n  · rw [isProperMap_iff_ultrafilter]\n  -- Let `𝒰 : Ultrafilter X`, and assume that `f` tends to some `y` along `𝒰`.\n    refine ⟨H.1, fun 𝒰 y hy ↦ ?_⟩\n  -- In `X × Filter X`, consider the closed set `F := closure {(x, ℱ) | ℱ = pure x}`\n    let F : Set (X × Filter X) := closure {xℱ | xℱ.2 = pure xℱ.1}\n  -- Since `f × id` is closed, the set `(f × id) '' F` is also closed.\n    have := H.2 F isClosed_closure\n  -- Let us show that `(y, 𝒰) ∈ (f × id) '' F`.\n    have : (y, ↑𝒰) ∈ Prod.map f id '' F :=\n  -- Note that, by the properties of the topology on `Filter X`, the function `pure : X → Filter X`\n  -- tends to the point `𝒰` of `Filter X` along the filter `𝒰` on `X`. Since `f` tends to `y` along\n  -- `𝒰`, we get that the function `(f, pure) : X → (Y, Filter X)` tends to `(y, 𝒰)` along\n  -- `𝒰`. Furthermore, each `(f, pure)(x) = (f × id)(x, pure x)` is clearly an element of\n  -- the closed set `(f × id) '' F`, thus the limit `(y, 𝒰)` also belongs to that set.\n      this.mem_of_tendsto (hy.prod_mk_nhds (Filter.tendsto_pure_self (𝒰 : Filter X)))\n        (Eventually.of_forall fun x ↦ ⟨⟨x, pure x⟩, subset_closure rfl, rfl⟩)\n  -- The above shows that `(y, 𝒰) = (f x, 𝒰)`, for some `x : X` such that `(x, 𝒰) ∈ F`.\n    rcases this with ⟨⟨x, _⟩, hx, ⟨_, _⟩⟩\n  -- We already know that `f x = y`, so to finish the proof we just have to check that `𝒰` tends\n  -- to `x`. So, for `U ∈ 𝓝 x` arbitrary, let's show that `U ∈ 𝒰`. Since `𝒰` is a ultrafilter,\n  -- it is enough to show that `Uᶜ` is not in `𝒰`.\n    refine ⟨x, rfl, fun U hU ↦ Ultrafilter.compl_not_mem_iff.mp fun hUc ↦ ?_⟩\n    rw [mem_closure_iff_nhds] at hx\n  -- Indeed, if that was the case, the set `V := {𝒢 : Filter X | Uᶜ ∈ 𝒢}` would be a neighborhood\n  -- of `𝒰` in `Filter X`, hence `U ×ˢ V` would be a neighborhood of `(x, 𝒰) : X × Filter X`.\n  -- But recall that `(x, 𝒰) ∈ F = closure {(x, ℱ) | ℱ = pure x}`, so the neighborhood `U ×ˢ V`\n  -- must contain some element of the form `(z, pure z)`. In other words, we have `z ∈ U` and\n  -- `Uᶜ ∈ pure z`, which means `z ∈ Uᶜ` by the definition of pure.\n  -- This is a contradiction, which completes the proof.\n    rcases hx (U ×ˢ {𝒢 | Uᶜ ∈ 𝒢}) (prod_mem_nhds hU (isOpen_setOf_mem.mem_nhds hUc)) with\n      ⟨⟨z, 𝒢⟩, ⟨⟨hz : z ∈ U, hz' : Uᶜ ∈ 𝒢⟩, rfl : 𝒢 = pure z⟩⟩\n    exact hz' hz\n"}
