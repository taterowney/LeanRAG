{"name":"GradedMonoid.mk_smul_mk","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nιM : Type u_3\nA : ιA → Type u_4\nM : ιM → Type u_5\ninst✝¹ : VAdd ιA ιM\ninst✝ : GradedMonoid.GSMul A M\ni : ιA\nj : ιM\na : A i\nb : M j\n⊢ Eq (HSMul.hSMul (GradedMonoid.mk i a) (GradedMonoid.mk j b)) (GradedMonoid.mk (HVAdd.hVAdd i j) (GradedMonoid.GSMul.smul a b))","decl":"theorem mk_smul_mk [VAdd ιA ιM] [GSMul A M] {i j} (a : A i) (b : M j) :\n    mk i a • mk j b = mk (i +ᵥ j) (GSMul.smul a b) :=\n  rfl\n\n"}
{"name":"GradedMonoid.GMulAction.mul_smul","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nιM : Type u_3\nA : ιA → Type u_4\nM : ιM → Type u_5\ninst✝² : AddMonoid ιA\ninst✝¹ : VAdd ιA ιM\ninst✝ : GradedMonoid.GMonoid A\nself : GradedMonoid.GMulAction A M\na a' : GradedMonoid A\nb : GradedMonoid M\n⊢ Eq (HSMul.hSMul (HMul.hMul a a') b) (HSMul.hSMul a (HSMul.hSMul a' b))","decl":"/-- A graded version of `MulAction`. -/\nclass GMulAction [AddMonoid ιA] [VAdd ιA ιM] [GMonoid A] extends GSMul A M where\n  /-- One is the neutral element for `•` -/\n  one_smul (b : GradedMonoid M) : (1 : GradedMonoid A) • b = b\n  /-- Associativity of `•` and `*` -/\n  mul_smul (a a' : GradedMonoid A) (b : GradedMonoid M) : (a * a') • b = a • a' • b\n\n"}
{"name":"GradedMonoid.GMulAction.one_smul","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nιM : Type u_3\nA : ιA → Type u_4\nM : ιM → Type u_5\ninst✝² : AddMonoid ιA\ninst✝¹ : VAdd ιA ιM\ninst✝ : GradedMonoid.GMonoid A\nself : GradedMonoid.GMulAction A M\nb : GradedMonoid M\n⊢ Eq (HSMul.hSMul 1 b) b","decl":"/-- A graded version of `MulAction`. -/\nclass GMulAction [AddMonoid ιA] [VAdd ιA ιM] [GMonoid A] extends GSMul A M where\n  /-- One is the neutral element for `•` -/\n  one_smul (b : GradedMonoid M) : (1 : GradedMonoid A) • b = b\n  /-- Associativity of `•` and `*` -/\n  mul_smul (a a' : GradedMonoid A) (b : GradedMonoid M) : (a * a') • b = a • a' • b\n\n"}
{"name":"SetLike.GradedSMul.smul_mem","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nιB : Type u_2\nS : Type u_5\nR : Type u_6\nN : Type u_7\nM : Type u_8\ninst✝³ : SetLike S R\ninst✝² : SetLike N M\ninst✝¹ : SMul R M\ninst✝ : VAdd ιA ιB\nA : ιA → S\nB : ιB → N\nself : SetLike.GradedSMul A B\ni : ιA\nj : ιB\nai : R\nbj : M\na✝¹ : Membership.mem (A i) ai\na✝ : Membership.mem (B j) bj\n⊢ Membership.mem (B (HVAdd.hVAdd i j)) (HSMul.hSMul ai bj)","decl":"/-- A version of `GradedMonoid.GSMul` for internally graded objects. -/\nclass SetLike.GradedSMul {S R N M : Type*} [SetLike S R] [SetLike N M] [SMul R M] [VAdd ιA ιB]\n  (A : ιA → S) (B : ιB → N) : Prop where\n  /-- Multiplication is homogeneous -/\n  smul_mem : ∀ ⦃i : ιA⦄ ⦃j : ιB⦄ {ai bj}, ai ∈ A i → bj ∈ B j → ai • bj ∈ B (i +ᵥ j)\n\n"}
{"name":"SetLike.coe_GSMul","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nιB : Type u_2\nS : Type u_5\nR : Type u_6\nN : Type u_7\nM : Type u_8\ninst✝⁴ : SetLike S R\ninst✝³ : SetLike N M\ninst✝² : SMul R M\ninst✝¹ : VAdd ιA ιB\nA : ιA → S\nB : ιB → N\ninst✝ : SetLike.GradedSMul A B\ni : ιA\nj : ιB\nx : Subtype fun x => Membership.mem (A i) x\ny : Subtype fun x => Membership.mem (B j) x\n⊢ Eq (↑(GradedMonoid.GSMul.smul x y)) (HSMul.hSMul ↑x ↑y)","decl":"@[simp]\ntheorem SetLike.coe_GSMul {S R N M : Type*} [SetLike S R] [SetLike N M] [SMul R M] [VAdd ιA ιB]\n    (A : ιA → S) (B : ιB → N) [SetLike.GradedSMul A B] {i : ιA} {j : ιB} (x : A i) (y : B j) :\n    (@GradedMonoid.GSMul.smul ιA ιB (fun i ↦ A i) (fun i ↦ B i) _ _ i j x y : M) = x.1 • y.1 :=\n  rfl\n\n"}
{"name":"SetLike.GradedMul.toGradedSMul","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nR : Type u_4\ninst✝³ : AddMonoid ιA\ninst✝² : Monoid R\nS : Type u_5\ninst✝¹ : SetLike S R\nA : ιA → S\ninst✝ : SetLike.GradedMonoid A\n⊢ SetLike.GradedSMul A A","decl":"/-- Internally graded version of `Mul.toSMul`. -/\ninstance SetLike.GradedMul.toGradedSMul [AddMonoid ιA] [Monoid R] {S : Type*} [SetLike S R]\n    (A : ιA → S) [SetLike.GradedMonoid A] : SetLike.GradedSMul A A where\n  smul_mem _ _ _ _ hi hj := SetLike.GradedMonoid.toGradedMul.mul_mem hi hj\n\n"}
{"name":"SetLike.Homogeneous.graded_smul","module":"Mathlib.Algebra.GradedMulAction","initialProofState":"ιA : Type u_1\nιB : Type u_2\nS : Type u_4\nR : Type u_5\nN : Type u_6\nM : Type u_7\ninst✝⁴ : SetLike S R\ninst✝³ : SetLike N M\ninst✝² : VAdd ιA ιB\ninst✝¹ : SMul R M\nA : ιA → S\nB : ιB → N\ninst✝ : SetLike.GradedSMul A B\na : R\nb : M\na✝¹ : SetLike.Homogeneous A a\na✝ : SetLike.Homogeneous B b\n⊢ SetLike.Homogeneous B (HSMul.hSMul a b)","decl":"theorem SetLike.Homogeneous.graded_smul [VAdd ιA ιB] [SMul R M] {A : ιA → S} {B : ιB → N}\n    [SetLike.GradedSMul A B] {a : R} {b : M} :\n    SetLike.Homogeneous A a → SetLike.Homogeneous B b → SetLike.Homogeneous B (a • b)\n  | ⟨i, hi⟩, ⟨j, hj⟩ => ⟨i +ᵥ j, SetLike.GradedSMul.smul_mem hi hj⟩\n\n"}
