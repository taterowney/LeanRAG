{"name":"ContinuousMap.nullhomotopic_of_constant","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ny : Y\n⊢ (ContinuousMap.const X y).Nullhomotopic","decl":"theorem nullhomotopic_of_constant (y : Y) : Nullhomotopic (ContinuousMap.const X y) :=\n  ⟨y, by rfl⟩\n\n"}
{"name":"ContinuousMap.Nullhomotopic.comp_right","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : ContinuousMap X Y\nhf : f.Nullhomotopic\ng : ContinuousMap Y Z\n⊢ (g.comp f).Nullhomotopic","decl":"theorem Nullhomotopic.comp_right {f : C(X, Y)} (hf : f.Nullhomotopic) (g : C(Y, Z)) :\n    (g.comp f).Nullhomotopic := by\n  cases' hf with y hy\n  use g y\n  exact Homotopic.hcomp hy (Homotopic.refl g)\n\n"}
{"name":"ContinuousMap.Nullhomotopic.comp_left","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nf : ContinuousMap Y Z\nhf : f.Nullhomotopic\ng : ContinuousMap X Y\n⊢ (f.comp g).Nullhomotopic","decl":"theorem Nullhomotopic.comp_left {f : C(Y, Z)} (hf : f.Nullhomotopic) (g : C(X, Y)) :\n    (f.comp g).Nullhomotopic := by\n  cases' hf with y hy\n  use y\n  exact Homotopic.hcomp (Homotopic.refl g) hy\n\n"}
{"name":"ContractibleSpace.hequiv_unit'","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nself : ContractibleSpace X\n⊢ Nonempty (ContinuousMap.HomotopyEquiv X Unit)","decl":"/-- A contractible space is one that is homotopy equivalent to `Unit`. -/\nclass ContractibleSpace (X : Type*) [TopologicalSpace X] : Prop where\n  hequiv_unit' : Nonempty (X ≃ₕ Unit)\n\n-- Porting note: added to work around lack of infer kinds\n"}
{"name":"ContractibleSpace.hequiv_unit","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : ContractibleSpace X\n⊢ Nonempty (ContinuousMap.HomotopyEquiv X Unit)","decl":"theorem ContractibleSpace.hequiv_unit (X : Type*) [TopologicalSpace X] [ContractibleSpace X] :\n    Nonempty (X ≃ₕ Unit) :=\n  ContractibleSpace.hequiv_unit'\n\n"}
{"name":"id_nullhomotopic","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : ContractibleSpace X\n⊢ (ContinuousMap.id X).Nullhomotopic","decl":"theorem id_nullhomotopic (X : Type*) [TopologicalSpace X] [ContractibleSpace X] :\n    (ContinuousMap.id X).Nullhomotopic := by\n  obtain ⟨hv⟩ := ContractibleSpace.hequiv_unit X\n  use hv.invFun ()\n  convert hv.left_inv.symm\n\n"}
{"name":"contractible_iff_id_nullhomotopic","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"Y : Type u_1\ninst✝ : TopologicalSpace Y\n⊢ Iff (ContractibleSpace Y) (ContinuousMap.id Y).Nullhomotopic","decl":"theorem contractible_iff_id_nullhomotopic (Y : Type*) [TopologicalSpace Y] :\n    ContractibleSpace Y ↔ (ContinuousMap.id Y).Nullhomotopic := by\n  constructor\n  · intro\n    apply id_nullhomotopic\n  rintro ⟨p, h⟩\n  refine\n    { hequiv_unit' :=\n        ⟨{  toFun := ContinuousMap.const _ ()\n            invFun := ContinuousMap.const _ p\n            left_inv := ?_\n            right_inv := ?_ }⟩ }\n  · exact h.symm\n  · convert Homotopic.refl (ContinuousMap.id Unit)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.contractibleSpace","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : ContractibleSpace Y\ne : ContinuousMap.HomotopyEquiv X Y\n⊢ ContractibleSpace X","decl":"protected theorem ContinuousMap.HomotopyEquiv.contractibleSpace [ContractibleSpace Y] (e : X ≃ₕ Y) :\n    ContractibleSpace X :=\n  ⟨(ContractibleSpace.hequiv_unit Y).map e.trans⟩\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.contractibleSpace_iff","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : ContinuousMap.HomotopyEquiv X Y\n⊢ Iff (ContractibleSpace X) (ContractibleSpace Y)","decl":"protected theorem ContinuousMap.HomotopyEquiv.contractibleSpace_iff (e : X ≃ₕ Y) :\n    ContractibleSpace X ↔ ContractibleSpace Y :=\n  ⟨fun _ => e.symm.contractibleSpace, fun _ => e.contractibleSpace⟩\n\n"}
{"name":"Homeomorph.contractibleSpace","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : ContractibleSpace Y\ne : Homeomorph X Y\n⊢ ContractibleSpace X","decl":"protected theorem Homeomorph.contractibleSpace [ContractibleSpace Y] (e : X ≃ₜ Y) :\n    ContractibleSpace X :=\n  e.toHomotopyEquiv.contractibleSpace\n\n"}
{"name":"Homeomorph.contractibleSpace_iff","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ Iff (ContractibleSpace X) (ContractibleSpace Y)","decl":"protected theorem Homeomorph.contractibleSpace_iff (e : X ≃ₜ Y) :\n    ContractibleSpace X ↔ ContractibleSpace Y :=\n  e.toHomotopyEquiv.contractibleSpace_iff\n\n"}
{"name":"ContractibleSpace.instOfNonemptyOfSubsingleton","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"Y : Type u_2\ninst✝² : TopologicalSpace Y\ninst✝¹ : Nonempty Y\ninst✝ : Subsingleton Y\n⊢ ContractibleSpace Y","decl":"instance [Nonempty Y] [Subsingleton Y] : ContractibleSpace Y :=\n  let ⟨_⟩ := nonempty_unique Y\n  ⟨⟨(Homeomorph.homeomorphOfUnique Y Unit).toHomotopyEquiv⟩⟩\n\n"}
{"name":"ContractibleSpace.hequiv","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : ContractibleSpace X\ninst✝ : ContractibleSpace Y\n⊢ Nonempty (ContinuousMap.HomotopyEquiv X Y)","decl":"variable (X Y) in\ntheorem hequiv [ContractibleSpace X] [ContractibleSpace Y] :\n    Nonempty (X ≃ₕ Y) := by\n  rcases ContractibleSpace.hequiv_unit' (X := X) with ⟨h⟩\n  rcases ContractibleSpace.hequiv_unit' (X := Y) with ⟨h'⟩\n  exact ⟨h.trans h'.symm⟩\n\n"}
{"name":"ContractibleSpace.instPathConnectedSpace","module":"Mathlib.Topology.Homotopy.Contractible","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : ContractibleSpace X\n⊢ PathConnectedSpace X","decl":"instance (priority := 100) [ContractibleSpace X] : PathConnectedSpace X := by\n  obtain ⟨p, ⟨h⟩⟩ := id_nullhomotopic X\n  have : ∀ x, Joined p x := fun x => ⟨(h.evalAt x).symm⟩\n  rw [pathConnectedSpace_iff_eq]; use p; ext; tauto\n\n"}
