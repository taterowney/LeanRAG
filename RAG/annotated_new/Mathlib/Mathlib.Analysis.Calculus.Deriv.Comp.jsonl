{"name":"HasDerivAtFilter.scomp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\nL : Filter 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nL' : Filter 𝕜'\nhg : HasDerivAtFilter g₁ g₁' (h x) L'\nhh : HasDerivAtFilter h h' x L\nhL : Filter.Tendsto h L L'\n⊢ HasDerivAtFilter (Function.comp g₁ h) (HSMul.hSMul h' g₁') x L","decl":"theorem HasDerivAtFilter.scomp (hg : HasDerivAtFilter g₁ g₁' (h x) L')\n    (hh : HasDerivAtFilter h h' x L) (hL : Tendsto h L L') :\n    HasDerivAtFilter (g₁ ∘ h) (h' • g₁') x L := by\n  simpa using ((hg.restrictScalars 𝕜).comp x hh hL).hasDerivAtFilter\n\n"}
{"name":"HasDerivAtFilter.scomp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\nL : Filter 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nL' : Filter 𝕜'\ny : 𝕜'\nhg : HasDerivAtFilter g₁ g₁' y L'\nhh : HasDerivAtFilter h h' x L\nhy : Eq y (h x)\nhL : Filter.Tendsto h L L'\n⊢ HasDerivAtFilter (Function.comp g₁ h) (HSMul.hSMul h' g₁') x L","decl":"theorem HasDerivAtFilter.scomp_of_eq (hg : HasDerivAtFilter g₁ g₁' y L')\n    (hh : HasDerivAtFilter h h' x L) (hy : y = h x) (hL : Tendsto h L L') :\n    HasDerivAtFilter (g₁ ∘ h) (h' • g₁') x L := by\n  rw [hy] at hg; exact hg.scomp x hh hL\n\n"}
{"name":"HasDerivWithinAt.scomp_hasDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nhg : HasDerivWithinAt g₁ g₁' s' (h x)\nhh : HasDerivAt h h' x\nhs : ∀ (x : 𝕜), Membership.mem s' (h x)\n⊢ HasDerivAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') x","decl":"theorem HasDerivWithinAt.scomp_hasDerivAt (hg : HasDerivWithinAt g₁ g₁' s' (h x))\n    (hh : HasDerivAt h h' x) (hs : ∀ x, h x ∈ s') : HasDerivAt (g₁ ∘ h) (h' • g₁') x :=\n  hg.scomp x hh <| tendsto_inf.2 ⟨hh.continuousAt, tendsto_principal.2 <| Eventually.of_forall hs⟩\n\n"}
{"name":"HasDerivWithinAt.scomp_hasDerivAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\ny : 𝕜'\nhg : HasDerivWithinAt g₁ g₁' s' y\nhh : HasDerivAt h h' x\nhs : ∀ (x : 𝕜), Membership.mem s' (h x)\nhy : Eq y (h x)\n⊢ HasDerivAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') x","decl":"theorem HasDerivWithinAt.scomp_hasDerivAt_of_eq (hg : HasDerivWithinAt g₁ g₁' s' y)\n    (hh : HasDerivAt h h' x) (hs : ∀ x, h x ∈ s') (hy : y = h x) :\n    HasDerivAt (g₁ ∘ h) (h' • g₁') x := by\n  rw [hy] at hg; exact hg.scomp_hasDerivAt x hh hs\n\n"}
{"name":"HasDerivWithinAt.scomp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nt' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nhg : HasDerivWithinAt g₁ g₁' t' (h x)\nhh : HasDerivWithinAt h h' s x\nhst : Set.MapsTo h s t'\n⊢ HasDerivWithinAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') s x","decl":"nonrec theorem HasDerivWithinAt.scomp (hg : HasDerivWithinAt g₁ g₁' t' (h x))\n    (hh : HasDerivWithinAt h h' s x) (hst : MapsTo h s t') :\n    HasDerivWithinAt (g₁ ∘ h) (h' • g₁') s x :=\n  hg.scomp x hh <| hh.continuousWithinAt.tendsto_nhdsWithin hst\n\n"}
{"name":"HasDerivWithinAt.scomp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nt' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\ny : 𝕜'\nhg : HasDerivWithinAt g₁ g₁' t' y\nhh : HasDerivWithinAt h h' s x\nhst : Set.MapsTo h s t'\nhy : Eq y (h x)\n⊢ HasDerivWithinAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') s x","decl":"theorem HasDerivWithinAt.scomp_of_eq (hg : HasDerivWithinAt g₁ g₁' t' y)\n    (hh : HasDerivWithinAt h h' s x) (hst : MapsTo h s t') (hy : y = h x) :\n    HasDerivWithinAt (g₁ ∘ h) (h' • g₁') s x := by\n  rw [hy] at hg; exact hg.scomp x hh hst\n\n"}
{"name":"HasDerivAt.scomp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nhg : HasDerivAt g₁ g₁' (h x)\nhh : HasDerivAt h h' x\n⊢ HasDerivAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') x","decl":"/-- The chain rule. -/\nnonrec theorem HasDerivAt.scomp (hg : HasDerivAt g₁ g₁' (h x)) (hh : HasDerivAt h h' x) :\n    HasDerivAt (g₁ ∘ h) (h' • g₁') x :=\n  hg.scomp x hh hh.continuousAt\n\n"}
{"name":"HasDerivAt.scomp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\ny : 𝕜'\nhg : HasDerivAt g₁ g₁' y\nhh : HasDerivAt h h' x\nhy : Eq y (h x)\n⊢ HasDerivAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') x","decl":"/-- The chain rule. -/\ntheorem HasDerivAt.scomp_of_eq\n    (hg : HasDerivAt g₁ g₁' y) (hh : HasDerivAt h h' x) (hy : y = h x) :\n    HasDerivAt (g₁ ∘ h) (h' • g₁') x := by\n  rw [hy] at hg; exact hg.scomp x hh\n\n"}
{"name":"HasStrictDerivAt.scomp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nhg : HasStrictDerivAt g₁ g₁' (h x)\nhh : HasStrictDerivAt h h' x\n⊢ HasStrictDerivAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') x","decl":"theorem HasStrictDerivAt.scomp (hg : HasStrictDerivAt g₁ g₁' (h x)) (hh : HasStrictDerivAt h h' x) :\n    HasStrictDerivAt (g₁ ∘ h) (h' • g₁') x := by\n  simpa using ((hg.restrictScalars 𝕜).comp x hh).hasStrictDerivAt\n\n"}
{"name":"HasStrictDerivAt.scomp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\ny : 𝕜'\nhg : HasStrictDerivAt g₁ g₁' y\nhh : HasStrictDerivAt h h' x\nhy : Eq y (h x)\n⊢ HasStrictDerivAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') x","decl":"theorem HasStrictDerivAt.scomp_of_eq\n    (hg : HasStrictDerivAt g₁ g₁' y) (hh : HasStrictDerivAt h h' x) (hy : y = h x) :\n    HasStrictDerivAt (g₁ ∘ h) (h' • g₁') x := by\n  rw [hy] at hg; exact hg.scomp x hh\n\n"}
{"name":"HasDerivAt.scomp_hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\nhg : HasDerivAt g₁ g₁' (h x)\nhh : HasDerivWithinAt h h' s x\n⊢ HasDerivWithinAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') s x","decl":"theorem HasDerivAt.scomp_hasDerivWithinAt (hg : HasDerivAt g₁ g₁' (h x))\n    (hh : HasDerivWithinAt h h' s x) : HasDerivWithinAt (g₁ ∘ h) (h' • g₁') s x :=\n  HasDerivWithinAt.scomp x hg.hasDerivWithinAt hh (mapsTo_univ _ _)\n\n"}
{"name":"HasDerivAt.scomp_hasDerivWithinAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\nh' : 𝕜'\ng₁ : 𝕜' → F\ng₁' : F\ny : 𝕜'\nhg : HasDerivAt g₁ g₁' y\nhh : HasDerivWithinAt h h' s x\nhy : Eq y (h x)\n⊢ HasDerivWithinAt (Function.comp g₁ h) (HSMul.hSMul h' g₁') s x","decl":"theorem HasDerivAt.scomp_hasDerivWithinAt_of_eq (hg : HasDerivAt g₁ g₁' y)\n    (hh : HasDerivWithinAt h h' s x) (hy : y = h x) :\n    HasDerivWithinAt (g₁ ∘ h) (h' • g₁') s x := by\n  rw [hy] at hg; exact hg.scomp_hasDerivWithinAt x hh\n\n"}
{"name":"derivWithin.scomp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nt' : Set 𝕜'\nh : 𝕜 → 𝕜'\ng₁ : 𝕜' → F\nhg : DifferentiableWithinAt 𝕜' g₁ t' (h x)\nhh : DifferentiableWithinAt 𝕜 h s x\nhs : Set.MapsTo h s t'\n⊢ Eq (derivWithin (Function.comp g₁ h) s x) (HSMul.hSMul (derivWithin h s x) (derivWithin g₁ t' (h x)))","decl":"theorem derivWithin.scomp (hg : DifferentiableWithinAt 𝕜' g₁ t' (h x))\n    (hh : DifferentiableWithinAt 𝕜 h s x) (hs : MapsTo h s t') :\n    derivWithin (g₁ ∘ h) s x = derivWithin h s x • derivWithin g₁ t' (h x) := by\n  rcases uniqueDiffWithinAt_or_nhdsWithin_eq_bot s x with hxs | hxs\n  · exact (HasDerivWithinAt.scomp x hg.hasDerivWithinAt hh.hasDerivWithinAt hs).derivWithin hxs\n  · simp [derivWithin_zero_of_isolated hxs]\n\n"}
{"name":"derivWithin.scomp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nt' : Set 𝕜'\nh : 𝕜 → 𝕜'\ng₁ : 𝕜' → F\ny : 𝕜'\nhg : DifferentiableWithinAt 𝕜' g₁ t' y\nhh : DifferentiableWithinAt 𝕜 h s x\nhs : Set.MapsTo h s t'\nhy : Eq y (h x)\n⊢ Eq (derivWithin (Function.comp g₁ h) s x) (HSMul.hSMul (derivWithin h s x) (derivWithin g₁ t' (h x)))","decl":"theorem derivWithin.scomp_of_eq (hg : DifferentiableWithinAt 𝕜' g₁ t' y)\n    (hh : DifferentiableWithinAt 𝕜 h s x) (hs : MapsTo h s t')\n    (hy : y = h x) :\n    derivWithin (g₁ ∘ h) s x = derivWithin h s x • derivWithin g₁ t' (h x) := by\n  rw [hy] at hg; exact derivWithin.scomp x hg hh hs\n\n"}
{"name":"deriv.scomp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\ng₁ : 𝕜' → F\nhg : DifferentiableAt 𝕜' g₁ (h x)\nhh : DifferentiableAt 𝕜 h x\n⊢ Eq (deriv (Function.comp g₁ h) x) (HSMul.hSMul (deriv h x) (deriv g₁ (h x)))","decl":"theorem deriv.scomp (hg : DifferentiableAt 𝕜' g₁ (h x)) (hh : DifferentiableAt 𝕜 h x) :\n    deriv (g₁ ∘ h) x = deriv h x • deriv g₁ (h x) :=\n  (HasDerivAt.scomp x hg.hasDerivAt hh.hasDerivAt).deriv\n\n"}
{"name":"deriv.scomp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nx : 𝕜\n𝕜' : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜'\ninst✝² : NormedAlgebra 𝕜 𝕜'\ninst✝¹ : NormedSpace 𝕜' F\ninst✝ : IsScalarTower 𝕜 𝕜' F\nh : 𝕜 → 𝕜'\ng₁ : 𝕜' → F\ny : 𝕜'\nhg : DifferentiableAt 𝕜' g₁ y\nhh : DifferentiableAt 𝕜 h x\nhy : Eq y (h x)\n⊢ Eq (deriv (Function.comp g₁ h) x) (HSMul.hSMul (deriv h x) (deriv g₁ (h x)))","decl":"theorem deriv.scomp_of_eq\n    (hg : DifferentiableAt 𝕜' g₁ y) (hh : DifferentiableAt 𝕜 h x) (hy : y = h x) :\n    deriv (g₁ ∘ h) x = deriv h x • deriv g₁ (h x) := by\n  rw [hy] at hg; exact deriv.scomp x hg hh\n\n"}
{"name":"HasDerivAtFilter.comp_hasFDerivAtFilter","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' : 𝕜'\nL' : Filter 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\nx : E\nL'' : Filter E\nhh₂ : HasDerivAtFilter h₂ h₂' (f x) L'\nhf : HasFDerivAtFilter f f' x L''\nhL : Filter.Tendsto f L'' L'\n⊢ HasFDerivAtFilter (Function.comp h₂ f) (HSMul.hSMul h₂' f') x L''","decl":"theorem HasDerivAtFilter.comp_hasFDerivAtFilter {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} (x) {L'' : Filter E}\n    (hh₂ : HasDerivAtFilter h₂ h₂' (f x) L') (hf : HasFDerivAtFilter f f' x L'')\n    (hL : Tendsto f L'' L') : HasFDerivAtFilter (h₂ ∘ f) (h₂' • f') x L'' := by\n  convert (hh₂.restrictScalars 𝕜).comp x hf hL\n  ext x\n  simp [mul_comm]\n\n"}
{"name":"HasDerivAtFilter.comp_hasFDerivAtFilter_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' : 𝕜'\nL' : Filter 𝕜'\ny : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\nx : E\nL'' : Filter E\nhh₂ : HasDerivAtFilter h₂ h₂' y L'\nhf : HasFDerivAtFilter f f' x L''\nhL : Filter.Tendsto f L'' L'\nhy : Eq y (f x)\n⊢ HasFDerivAtFilter (Function.comp h₂ f) (HSMul.hSMul h₂' f') x L''","decl":"theorem HasDerivAtFilter.comp_hasFDerivAtFilter_of_eq\n    {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} (x) {L'' : Filter E}\n    (hh₂ : HasDerivAtFilter h₂ h₂' y L') (hf : HasFDerivAtFilter f f' x L'')\n    (hL : Tendsto f L'' L') (hy : y = f x) : HasFDerivAtFilter (h₂ ∘ f) (h₂' • f') x L'' := by\n  rw [hy] at hh₂; exact hh₂.comp_hasFDerivAtFilter x hf hL\n\n"}
{"name":"HasStrictDerivAt.comp_hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\nx : E\nhh : HasStrictDerivAt h₂ h₂' (f x)\nhf : HasStrictFDerivAt f f' x\n⊢ HasStrictFDerivAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') x","decl":"theorem HasStrictDerivAt.comp_hasStrictFDerivAt {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} (x)\n    (hh : HasStrictDerivAt h₂ h₂' (f x)) (hf : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt (h₂ ∘ f) (h₂' • f') x := by\n  rw [HasStrictDerivAt] at hh\n  convert (hh.restrictScalars 𝕜).comp x hf\n  ext x\n  simp [mul_comm]\n\n"}
{"name":"HasStrictDerivAt.comp_hasStrictFDerivAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' y : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\nx : E\nhh : HasStrictDerivAt h₂ h₂' y\nhf : HasStrictFDerivAt f f' x\nhy : Eq y (f x)\n⊢ HasStrictFDerivAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') x","decl":"theorem HasStrictDerivAt.comp_hasStrictFDerivAt_of_eq {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} (x)\n    (hh : HasStrictDerivAt h₂ h₂' y) (hf : HasStrictFDerivAt f f' x) (hy : y = f x) :\n    HasStrictFDerivAt (h₂ ∘ f) (h₂' • f') x := by\n  rw [hy] at hh; exact hh.comp_hasStrictFDerivAt x hf\n\n"}
{"name":"HasDerivAt.comp_hasFDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\nx : E\nhh : HasDerivAt h₂ h₂' (f x)\nhf : HasFDerivAt f f' x\n⊢ HasFDerivAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') x","decl":"theorem HasDerivAt.comp_hasFDerivAt {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} (x)\n    (hh : HasDerivAt h₂ h₂' (f x)) (hf : HasFDerivAt f f' x) : HasFDerivAt (h₂ ∘ f) (h₂' • f') x :=\n  hh.comp_hasFDerivAtFilter x hf hf.continuousAt\n\n"}
{"name":"HasDerivAt.comp_hasFDerivAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' y : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\nx : E\nhh : HasDerivAt h₂ h₂' y\nhf : HasFDerivAt f f' x\nhy : Eq y (f x)\n⊢ HasFDerivAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') x","decl":"theorem HasDerivAt.comp_hasFDerivAt_of_eq {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} (x)\n    (hh : HasDerivAt h₂ h₂' y) (hf : HasFDerivAt f f' x) (hy : y = f x) :\n    HasFDerivAt (h₂ ∘ f) (h₂' • f') x := by\n  rw [hy] at hh; exact hh.comp_hasFDerivAt x hf\n\n"}
{"name":"HasDerivAt.comp_hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\ns : Set E\nx : E\nhh : HasDerivAt h₂ h₂' (f x)\nhf : HasFDerivWithinAt f f' s x\n⊢ HasFDerivWithinAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') s x","decl":"theorem HasDerivAt.comp_hasFDerivWithinAt {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} {s} (x)\n    (hh : HasDerivAt h₂ h₂' (f x)) (hf : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt (h₂ ∘ f) (h₂' • f') s x :=\n  hh.comp_hasFDerivAtFilter x hf hf.continuousWithinAt\n\n"}
{"name":"HasDerivAt.comp_hasFDerivWithinAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' y : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\ns : Set E\nx : E\nhh : HasDerivAt h₂ h₂' y\nhf : HasFDerivWithinAt f f' s x\nhy : Eq y (f x)\n⊢ HasFDerivWithinAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') s x","decl":"theorem HasDerivAt.comp_hasFDerivWithinAt_of_eq {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} {s} (x)\n    (hh : HasDerivAt h₂ h₂' y) (hf : HasFDerivWithinAt f f' s x) (hy : y = f x) :\n    HasFDerivWithinAt (h₂ ∘ f) (h₂' • f') s x := by\n  rw [hy] at hh; exact hh.comp_hasFDerivWithinAt x hf\n\n"}
{"name":"HasDerivWithinAt.comp_hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\ns : Set E\nt : Set 𝕜'\nx : E\nhh : HasDerivWithinAt h₂ h₂' t (f x)\nhf : HasFDerivWithinAt f f' s x\nhst : Set.MapsTo f s t\n⊢ HasFDerivWithinAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') s x","decl":"theorem HasDerivWithinAt.comp_hasFDerivWithinAt {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} {s t} (x)\n    (hh : HasDerivWithinAt h₂ h₂' t (f x)) (hf : HasFDerivWithinAt f f' s x) (hst : MapsTo f s t) :\n    HasFDerivWithinAt (h₂ ∘ f) (h₂' • f') s x :=\n  hh.comp_hasFDerivAtFilter x hf <| hf.continuousWithinAt.tendsto_nhdsWithin hst\n\n"}
{"name":"HasDerivWithinAt.comp_hasFDerivWithinAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type w\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh₂ : 𝕜' → 𝕜'\nh₂' y : 𝕜'\nf : E → 𝕜'\nf' : ContinuousLinearMap (RingHom.id 𝕜) E 𝕜'\ns : Set E\nt : Set 𝕜'\nx : E\nhh : HasDerivWithinAt h₂ h₂' t y\nhf : HasFDerivWithinAt f f' s x\nhst : Set.MapsTo f s t\nhy : Eq y (f x)\n⊢ HasFDerivWithinAt (Function.comp h₂ f) (HSMul.hSMul h₂' f') s x","decl":"theorem HasDerivWithinAt.comp_hasFDerivWithinAt_of_eq {f : E → 𝕜'} {f' : E →L[𝕜] 𝕜'} {s t} (x)\n    (hh : HasDerivWithinAt h₂ h₂' t y) (hf : HasFDerivWithinAt f f' s x) (hst : MapsTo f s t)\n    (hy : y = f x) :\n    HasFDerivWithinAt (h₂ ∘ f) (h₂' • f') s x := by\n  rw [hy] at hh; exact hh.comp_hasFDerivWithinAt x hf hst\n\n"}
{"name":"HasDerivAtFilter.comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\nL : Filter 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' : 𝕜'\nL' : Filter 𝕜'\nhh₂ : HasDerivAtFilter h₂ h₂' (h x) L'\nhh : HasDerivAtFilter h h' x L\nhL : Filter.Tendsto h L L'\n⊢ HasDerivAtFilter (Function.comp h₂ h) (HMul.hMul h₂' h') x L","decl":"theorem HasDerivAtFilter.comp (hh₂ : HasDerivAtFilter h₂ h₂' (h x) L')\n    (hh : HasDerivAtFilter h h' x L) (hL : Tendsto h L L') :\n    HasDerivAtFilter (h₂ ∘ h) (h₂' * h') x L := by\n  rw [mul_comm]\n  exact hh₂.scomp x hh hL\n\n"}
{"name":"HasDerivAtFilter.comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\nL : Filter 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' : 𝕜'\nL' : Filter 𝕜'\ny : 𝕜'\nhh₂ : HasDerivAtFilter h₂ h₂' y L'\nhh : HasDerivAtFilter h h' x L\nhL : Filter.Tendsto h L L'\nhy : Eq y (h x)\n⊢ HasDerivAtFilter (Function.comp h₂ h) (HMul.hMul h₂' h') x L","decl":"theorem HasDerivAtFilter.comp_of_eq (hh₂ : HasDerivAtFilter h₂ h₂' y L')\n    (hh : HasDerivAtFilter h h' x L) (hL : Tendsto h L L') (hy : y = h x) :\n    HasDerivAtFilter (h₂ ∘ h) (h₂' * h') x L := by\n  rw [hy] at hh₂; exact hh₂.comp x hh hL\n\n"}
{"name":"HasDerivWithinAt.comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' : 𝕜'\nhh₂ : HasDerivWithinAt h₂ h₂' s' (h x)\nhh : HasDerivWithinAt h h' s x\nhst : Set.MapsTo h s s'\n⊢ HasDerivWithinAt (Function.comp h₂ h) (HMul.hMul h₂' h') s x","decl":"theorem HasDerivWithinAt.comp (hh₂ : HasDerivWithinAt h₂ h₂' s' (h x))\n    (hh : HasDerivWithinAt h h' s x) (hst : MapsTo h s s') :\n    HasDerivWithinAt (h₂ ∘ h) (h₂' * h') s x := by\n  rw [mul_comm]\n  exact hh₂.scomp x hh hst\n\n"}
{"name":"HasDerivWithinAt.comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' y : 𝕜'\nhh₂ : HasDerivWithinAt h₂ h₂' s' y\nhh : HasDerivWithinAt h h' s x\nhst : Set.MapsTo h s s'\nhy : Eq y (h x)\n⊢ HasDerivWithinAt (Function.comp h₂ h) (HMul.hMul h₂' h') s x","decl":"theorem HasDerivWithinAt.comp_of_eq (hh₂ : HasDerivWithinAt h₂ h₂' s' y)\n    (hh : HasDerivWithinAt h h' s x) (hst : MapsTo h s s') (hy : y = h x) :\n    HasDerivWithinAt (h₂ ∘ h) (h₂' * h') s x := by\n  rw [hy] at hh₂; exact hh₂.comp x hh hst\n\n"}
{"name":"HasDerivAt.comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' : 𝕜'\nhh₂ : HasDerivAt h₂ h₂' (h x)\nhh : HasDerivAt h h' x\n⊢ HasDerivAt (Function.comp h₂ h) (HMul.hMul h₂' h') x","decl":"/-- The chain rule.\n\nNote that the function `h₂` is a function on an algebra. If you are looking for the chain rule\nwith `h₂` taking values in a vector space, use `HasDerivAt.scomp`. -/\nnonrec theorem HasDerivAt.comp (hh₂ : HasDerivAt h₂ h₂' (h x)) (hh : HasDerivAt h h' x) :\n    HasDerivAt (h₂ ∘ h) (h₂' * h') x :=\n  hh₂.comp x hh hh.continuousAt\n\n"}
{"name":"HasDerivAt.comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' y : 𝕜'\nhh₂ : HasDerivAt h₂ h₂' y\nhh : HasDerivAt h h' x\nhy : Eq y (h x)\n⊢ HasDerivAt (Function.comp h₂ h) (HMul.hMul h₂' h') x","decl":"/-- The chain rule.\n\nNote that the function `h₂` is a function on an algebra. If you are looking for the chain rule\nwith `h₂` taking values in a vector space, use `HasDerivAt.scomp_of_eq`. -/\ntheorem HasDerivAt.comp_of_eq\n    (hh₂ : HasDerivAt h₂ h₂' y) (hh : HasDerivAt h h' x) (hy : y = h x) :\n    HasDerivAt (h₂ ∘ h) (h₂' * h') x := by\n  rw [hy] at hh₂; exact hh₂.comp x hh\n\n"}
{"name":"HasStrictDerivAt.comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' : 𝕜'\nhh₂ : HasStrictDerivAt h₂ h₂' (h x)\nhh : HasStrictDerivAt h h' x\n⊢ HasStrictDerivAt (Function.comp h₂ h) (HMul.hMul h₂' h') x","decl":"theorem HasStrictDerivAt.comp (hh₂ : HasStrictDerivAt h₂ h₂' (h x)) (hh : HasStrictDerivAt h h' x) :\n    HasStrictDerivAt (h₂ ∘ h) (h₂' * h') x := by\n  rw [mul_comm]\n  exact hh₂.scomp x hh\n\n"}
{"name":"HasStrictDerivAt.comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' y : 𝕜'\nhh₂ : HasStrictDerivAt h₂ h₂' y\nhh : HasStrictDerivAt h h' x\nhy : Eq y (h x)\n⊢ HasStrictDerivAt (Function.comp h₂ h) (HMul.hMul h₂' h') x","decl":"theorem HasStrictDerivAt.comp_of_eq\n    (hh₂ : HasStrictDerivAt h₂ h₂' y) (hh : HasStrictDerivAt h h' x) (hy : y = h x) :\n    HasStrictDerivAt (h₂ ∘ h) (h₂' * h') x := by\n  rw [hy] at hh₂; exact hh₂.comp x hh\n\n"}
{"name":"HasDerivAt.comp_hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' : 𝕜'\nhh₂ : HasDerivAt h₂ h₂' (h x)\nhh : HasDerivWithinAt h h' s x\n⊢ HasDerivWithinAt (Function.comp h₂ h) (HMul.hMul h₂' h') s x","decl":"theorem HasDerivAt.comp_hasDerivWithinAt (hh₂ : HasDerivAt h₂ h₂' (h x))\n    (hh : HasDerivWithinAt h h' s x) : HasDerivWithinAt (h₂ ∘ h) (h₂' * h') s x :=\n  hh₂.hasDerivWithinAt.comp x hh (mapsTo_univ _ _)\n\n"}
{"name":"HasDerivAt.comp_hasDerivWithinAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nh' h₂' y : 𝕜'\nhh₂ : HasDerivAt h₂ h₂' y\nhh : HasDerivWithinAt h h' s x\nhy : Eq y (h x)\n⊢ HasDerivWithinAt (Function.comp h₂ h) (HMul.hMul h₂' h') s x","decl":"theorem HasDerivAt.comp_hasDerivWithinAt_of_eq (hh₂ : HasDerivAt h₂ h₂' y)\n    (hh : HasDerivWithinAt h h' s x) (hy : y = h x) :\n    HasDerivWithinAt (h₂ ∘ h) (h₂' * h') s x := by\n  rw [hy] at hh₂; exact hh₂.comp_hasDerivWithinAt x hh\n\n"}
{"name":"derivWithin_comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nhh₂ : DifferentiableWithinAt 𝕜' h₂ s' (h x)\nhh : DifferentiableWithinAt 𝕜 h s x\nhs : Set.MapsTo h s s'\n⊢ Eq (derivWithin (Function.comp h₂ h) s x) (HMul.hMul (derivWithin h₂ s' (h x)) (derivWithin h s x))","decl":"theorem derivWithin_comp (hh₂ : DifferentiableWithinAt 𝕜' h₂ s' (h x))\n    (hh : DifferentiableWithinAt 𝕜 h s x) (hs : MapsTo h s s') :\n    derivWithin (h₂ ∘ h) s x = derivWithin h₂ s' (h x) * derivWithin h s x := by\n  rcases uniqueDiffWithinAt_or_nhdsWithin_eq_bot s x with hxs | hxs\n  · exact (hh₂.hasDerivWithinAt.comp x hh.hasDerivWithinAt hs).derivWithin hxs\n  · simp [derivWithin_zero_of_isolated hxs]\n\n"}
{"name":"derivWithin.comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nhh₂ : DifferentiableWithinAt 𝕜' h₂ s' (h x)\nhh : DifferentiableWithinAt 𝕜 h s x\nhs : Set.MapsTo h s s'\n⊢ Eq (derivWithin (Function.comp h₂ h) s x) (HMul.hMul (derivWithin h₂ s' (h x)) (derivWithin h s x))","decl":"@[deprecated (since := \"2024-10-31\")] alias derivWithin.comp := derivWithin_comp\n\n"}
{"name":"derivWithin_comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\ny : 𝕜'\nhh₂ : DifferentiableWithinAt 𝕜' h₂ s' y\nhh : DifferentiableWithinAt 𝕜 h s x\nhs : Set.MapsTo h s s'\nhy : Eq (h x) y\n⊢ Eq (derivWithin (Function.comp h₂ h) s x) (HMul.hMul (derivWithin h₂ s' (h x)) (derivWithin h s x))","decl":"theorem derivWithin_comp_of_eq (hh₂ : DifferentiableWithinAt 𝕜' h₂ s' y)\n    (hh : DifferentiableWithinAt 𝕜 h s x) (hs : MapsTo h s s')\n    (hy : h x = y) :\n    derivWithin (h₂ ∘ h) s x = derivWithin h₂ s' (h x) * derivWithin h s x := by\n  subst hy; exact derivWithin_comp x hh₂ hh hs\n\n"}
{"name":"derivWithin.comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\ns' : Set 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\ny : 𝕜'\nhh₂ : DifferentiableWithinAt 𝕜' h₂ s' y\nhh : DifferentiableWithinAt 𝕜 h s x\nhs : Set.MapsTo h s s'\nhy : Eq (h x) y\n⊢ Eq (derivWithin (Function.comp h₂ h) s x) (HMul.hMul (derivWithin h₂ s' (h x)) (derivWithin h s x))","decl":"@[deprecated (since := \"2024-10-31\")] alias derivWithin.comp_of_eq := derivWithin_comp_of_eq\n\n"}
{"name":"deriv_comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nhh₂ : DifferentiableAt 𝕜' h₂ (h x)\nhh : DifferentiableAt 𝕜 h x\n⊢ Eq (deriv (Function.comp h₂ h) x) (HMul.hMul (deriv h₂ (h x)) (deriv h x))","decl":"theorem deriv_comp (hh₂ : DifferentiableAt 𝕜' h₂ (h x)) (hh : DifferentiableAt 𝕜 h x) :\n    deriv (h₂ ∘ h) x = deriv h₂ (h x) * deriv h x :=\n  (hh₂.hasDerivAt.comp x hh.hasDerivAt).deriv\n\n"}
{"name":"deriv.comp","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\nhh₂ : DifferentiableAt 𝕜' h₂ (h x)\nhh : DifferentiableAt 𝕜 h x\n⊢ Eq (deriv (Function.comp h₂ h) x) (HMul.hMul (deriv h₂ (h x)) (deriv h x))","decl":"@[deprecated (since := \"2024-10-31\")] alias deriv.comp := deriv_comp\n\n"}
{"name":"deriv_comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\ny : 𝕜'\nhh₂ : DifferentiableAt 𝕜' h₂ y\nhh : DifferentiableAt 𝕜 h x\nhy : Eq (h x) y\n⊢ Eq (deriv (Function.comp h₂ h) x) (HMul.hMul (deriv h₂ (h x)) (deriv h x))","decl":"theorem deriv_comp_of_eq (hh₂ : DifferentiableAt 𝕜' h₂ y) (hh : DifferentiableAt 𝕜 h x)\n    (hy : h x = y) :\n    deriv (h₂ ∘ h) x = deriv h₂ (h x) * deriv h x := by\n  subst hy; exact deriv_comp x hh₂ hh\n\n"}
{"name":"deriv.comp_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\n𝕜' : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜'\ninst✝ : NormedAlgebra 𝕜 𝕜'\nh : 𝕜 → 𝕜'\nh₂ : 𝕜' → 𝕜'\ny : 𝕜'\nhh₂ : DifferentiableAt 𝕜' h₂ y\nhh : DifferentiableAt 𝕜 h x\nhy : Eq (h x) y\n⊢ Eq (deriv (Function.comp h₂ h) x) (HMul.hMul (deriv h₂ (h x)) (deriv h x))","decl":"@[deprecated (since := \"2024-10-31\")] alias deriv.comp_of_eq := deriv_comp_of_eq\n\n"}
{"name":"HasDerivAtFilter.iterate","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\nL : Filter 𝕜\nf : 𝕜 → 𝕜\nf' : 𝕜\nhf : HasDerivAtFilter f f' x L\nhL : Filter.Tendsto f L L\nhx : Eq (f x) x\nn : Nat\n⊢ HasDerivAtFilter (Nat.iterate f n) (HPow.hPow f' n) x L","decl":"protected nonrec theorem HasDerivAtFilter.iterate {f : 𝕜 → 𝕜} {f' : 𝕜}\n    (hf : HasDerivAtFilter f f' x L) (hL : Tendsto f L L) (hx : f x = x) (n : ℕ) :\n    HasDerivAtFilter f^[n] (f' ^ n) x L := by\n  have := hf.iterate hL hx n\n  rwa [ContinuousLinearMap.smulRight_one_pow] at this\n\n"}
{"name":"HasDerivAt.iterate","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\nf : 𝕜 → 𝕜\nf' : 𝕜\nhf : HasDerivAt f f' x\nhx : Eq (f x) x\nn : Nat\n⊢ HasDerivAt (Nat.iterate f n) (HPow.hPow f' n) x","decl":"protected nonrec theorem HasDerivAt.iterate {f : 𝕜 → 𝕜} {f' : 𝕜} (hf : HasDerivAt f f' x)\n    (hx : f x = x) (n : ℕ) : HasDerivAt f^[n] (f' ^ n) x :=\n  hf.iterate _ (have := hf.tendsto_nhds le_rfl; by rwa [hx] at this) hx n\n\n"}
{"name":"HasDerivWithinAt.iterate","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nf' : 𝕜\nhf : HasDerivWithinAt f f' s x\nhx : Eq (f x) x\nhs : Set.MapsTo f s s\nn : Nat\n⊢ HasDerivWithinAt (Nat.iterate f n) (HPow.hPow f' n) s x","decl":"protected theorem HasDerivWithinAt.iterate {f : 𝕜 → 𝕜} {f' : 𝕜} (hf : HasDerivWithinAt f f' s x)\n    (hx : f x = x) (hs : MapsTo f s s) (n : ℕ) : HasDerivWithinAt f^[n] (f' ^ n) s x := by\n  have := HasFDerivWithinAt.iterate hf hx hs n\n  rwa [ContinuousLinearMap.smulRight_one_pow] at this\n\n"}
{"name":"HasStrictDerivAt.iterate","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\nf : 𝕜 → 𝕜\nf' : 𝕜\nhf : HasStrictDerivAt f f' x\nhx : Eq (f x) x\nn : Nat\n⊢ HasStrictDerivAt (Nat.iterate f n) (HPow.hPow f' n) x","decl":"protected nonrec theorem HasStrictDerivAt.iterate {f : 𝕜 → 𝕜} {f' : 𝕜}\n    (hf : HasStrictDerivAt f f' x) (hx : f x = x) (n : ℕ) :\n    HasStrictDerivAt f^[n] (f' ^ n) x := by\n  have := hf.iterate hx n\n  rwa [ContinuousLinearMap.smulRight_one_pow] at this\n\n"}
{"name":"HasFDerivWithinAt.comp_hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\ns : Set 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\nt : Set F\nhl : HasFDerivWithinAt l l' t (f x)\nhf : HasDerivWithinAt f f' s x\nhst : Set.MapsTo f s t\n⊢ HasDerivWithinAt (Function.comp l f) (l' f') s x","decl":"/-- The composition `l ∘ f` where `l : F → E` and `f : 𝕜 → F`, has a derivative within a set\nequal to the Fréchet derivative of `l` applied to the derivative of `f`. -/\ntheorem HasFDerivWithinAt.comp_hasDerivWithinAt {t : Set F} (hl : HasFDerivWithinAt l l' t (f x))\n    (hf : HasDerivWithinAt f f' s x) (hst : MapsTo f s t) :\n    HasDerivWithinAt (l ∘ f) (l' f') s x := by\n  simpa only [one_apply, one_smul, smulRight_apply, coe_comp', (· ∘ ·)] using\n    (hl.comp x hf.hasFDerivWithinAt hst).hasDerivWithinAt\n\n"}
{"name":"HasFDerivWithinAt.comp_hasDerivWithinAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\ns : Set 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\ny : F\nt : Set F\nhl : HasFDerivWithinAt l l' t y\nhf : HasDerivWithinAt f f' s x\nhst : Set.MapsTo f s t\nhy : Eq y (f x)\n⊢ HasDerivWithinAt (Function.comp l f) (l' f') s x","decl":"/-- The composition `l ∘ f` where `l : F → E` and `f : 𝕜 → F`, has a derivative within a set\nequal to the Fréchet derivative of `l` applied to the derivative of `f`. -/\ntheorem HasFDerivWithinAt.comp_hasDerivWithinAt_of_eq {t : Set F}\n    (hl : HasFDerivWithinAt l l' t y)\n    (hf : HasDerivWithinAt f f' s x) (hst : MapsTo f s t) (hy : y = f x) :\n    HasDerivWithinAt (l ∘ f) (l' f') s x := by\n  rw [hy] at hl; exact hl.comp_hasDerivWithinAt x hf hst\n\n"}
{"name":"HasFDerivAt.comp_hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\ns : Set 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\nhl : HasFDerivAt l l' (f x)\nhf : HasDerivWithinAt f f' s x\n⊢ HasDerivWithinAt (Function.comp l f) (l' f') s x","decl":"theorem HasFDerivAt.comp_hasDerivWithinAt (hl : HasFDerivAt l l' (f x))\n    (hf : HasDerivWithinAt f f' s x) : HasDerivWithinAt (l ∘ f) (l' f') s x :=\n  hl.hasFDerivWithinAt.comp_hasDerivWithinAt x hf (mapsTo_univ _ _)\n\n"}
{"name":"HasFDerivAt.comp_hasDerivWithinAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\ns : Set 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\ny : F\nhl : HasFDerivAt l l' y\nhf : HasDerivWithinAt f f' s x\nhy : Eq y (f x)\n⊢ HasDerivWithinAt (Function.comp l f) (l' f') s x","decl":"theorem HasFDerivAt.comp_hasDerivWithinAt_of_eq (hl : HasFDerivAt l l' y)\n    (hf : HasDerivWithinAt f f' s x) (hy : y = f x) :\n    HasDerivWithinAt (l ∘ f) (l' f') s x := by\n  rw [hy] at hl; exact hl.comp_hasDerivWithinAt x hf\n\n"}
{"name":"HasFDerivAt.comp_hasDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\nhl : HasFDerivAt l l' (f x)\nhf : HasDerivAt f f' x\n⊢ HasDerivAt (Function.comp l f) (l' f') x","decl":"/-- The composition `l ∘ f` where `l : F → E` and `f : 𝕜 → F`, has a derivative equal to the\nFréchet derivative of `l` applied to the derivative of `f`. -/\ntheorem HasFDerivAt.comp_hasDerivAt (hl : HasFDerivAt l l' (f x)) (hf : HasDerivAt f f' x) :\n    HasDerivAt (l ∘ f) (l' f') x :=\n  hasDerivWithinAt_univ.mp <| hl.comp_hasDerivWithinAt x hf.hasDerivWithinAt\n\n"}
{"name":"HasFDerivAt.comp_hasDerivAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\ny : F\nhl : HasFDerivAt l l' y\nhf : HasDerivAt f f' x\nhy : Eq y (f x)\n⊢ HasDerivAt (Function.comp l f) (l' f') x","decl":"/-- The composition `l ∘ f` where `l : F → E` and `f : 𝕜 → F`, has a derivative equal to the\nFréchet derivative of `l` applied to the derivative of `f`. -/\ntheorem HasFDerivAt.comp_hasDerivAt_of_eq\n    (hl : HasFDerivAt l l' y) (hf : HasDerivAt f f' x) (hy : y = f x) :\n    HasDerivAt (l ∘ f) (l' f') x := by\n  rw [hy] at hl; exact hl.comp_hasDerivAt x hf\n\n"}
{"name":"HasStrictFDerivAt.comp_hasStrictDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\nhl : HasStrictFDerivAt l l' (f x)\nhf : HasStrictDerivAt f f' x\n⊢ HasStrictDerivAt (Function.comp l f) (l' f') x","decl":"theorem HasStrictFDerivAt.comp_hasStrictDerivAt (hl : HasStrictFDerivAt l l' (f x))\n    (hf : HasStrictDerivAt f f' x) : HasStrictDerivAt (l ∘ f) (l' f') x := by\n  simpa only [one_apply, one_smul, smulRight_apply, coe_comp', (· ∘ ·)] using\n    (hl.comp x hf.hasStrictFDerivAt).hasStrictDerivAt\n\n"}
{"name":"HasStrictFDerivAt.comp_hasStrictDerivAt_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nf' : F\nx : 𝕜\nl : F → E\nl' : ContinuousLinearMap (RingHom.id 𝕜) F E\ny : F\nhl : HasStrictFDerivAt l l' y\nhf : HasStrictDerivAt f f' x\nhy : Eq y (f x)\n⊢ HasStrictDerivAt (Function.comp l f) (l' f') x","decl":"theorem HasStrictFDerivAt.comp_hasStrictDerivAt_of_eq (hl : HasStrictFDerivAt l l' y)\n    (hf : HasStrictDerivAt f f' x) (hy : y = f x) :\n    HasStrictDerivAt (l ∘ f) (l' f') x := by\n  rw [hy] at hl; exact hl.comp_hasStrictDerivAt x hf\n\n"}
{"name":"fderivWithin_comp_derivWithin","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\ns : Set 𝕜\nl : F → E\nt : Set F\nhl : DifferentiableWithinAt 𝕜 l t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nhs : Set.MapsTo f s t\n⊢ Eq (derivWithin (Function.comp l f) s x) ((fderivWithin 𝕜 l t (f x)) (derivWithin f s x))","decl":"theorem fderivWithin_comp_derivWithin {t : Set F} (hl : DifferentiableWithinAt 𝕜 l t (f x))\n    (hf : DifferentiableWithinAt 𝕜 f s x) (hs : MapsTo f s t) :\n    derivWithin (l ∘ f) s x = (fderivWithin 𝕜 l t (f x) : F → E) (derivWithin f s x) := by\n  rcases uniqueDiffWithinAt_or_nhdsWithin_eq_bot s x with hxs | hxs\n  · exact (hl.hasFDerivWithinAt.comp_hasDerivWithinAt x hf.hasDerivWithinAt hs).derivWithin hxs\n  · simp [derivWithin_zero_of_isolated hxs]\n\n"}
{"name":"fderivWithin.comp_derivWithin","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\ns : Set 𝕜\nl : F → E\nt : Set F\nhl : DifferentiableWithinAt 𝕜 l t (f x)\nhf : DifferentiableWithinAt 𝕜 f s x\nhs : Set.MapsTo f s t\n⊢ Eq (derivWithin (Function.comp l f) s x) ((fderivWithin 𝕜 l t (f x)) (derivWithin f s x))","decl":"@[deprecated (since := \"2024-10-31\")]\nalias fderivWithin.comp_derivWithin := fderivWithin_comp_derivWithin\n\n"}
{"name":"fderivWithin_comp_derivWithin_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\ns : Set 𝕜\nl : F → E\ny : F\nt : Set F\nhl : DifferentiableWithinAt 𝕜 l t y\nhf : DifferentiableWithinAt 𝕜 f s x\nhs : Set.MapsTo f s t\nhy : Eq y (f x)\n⊢ Eq (derivWithin (Function.comp l f) s x) ((fderivWithin 𝕜 l t (f x)) (derivWithin f s x))","decl":"theorem fderivWithin_comp_derivWithin_of_eq {t : Set F} (hl : DifferentiableWithinAt 𝕜 l t y)\n    (hf : DifferentiableWithinAt 𝕜 f s x) (hs : MapsTo f s t) (hy : y = f x) :\n    derivWithin (l ∘ f) s x = (fderivWithin 𝕜 l t (f x) : F → E) (derivWithin f s x) := by\n  rw [hy] at hl; exact fderivWithin_comp_derivWithin x hl hf hs\n\n"}
{"name":"fderivWithin.comp_derivWithin_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\ns : Set 𝕜\nl : F → E\ny : F\nt : Set F\nhl : DifferentiableWithinAt 𝕜 l t y\nhf : DifferentiableWithinAt 𝕜 f s x\nhs : Set.MapsTo f s t\nhy : Eq y (f x)\n⊢ Eq (derivWithin (Function.comp l f) s x) ((fderivWithin 𝕜 l t (f x)) (derivWithin f s x))","decl":"@[deprecated (since := \"2024-10-31\")]\nalias fderivWithin.comp_derivWithin_of_eq := fderivWithin_comp_derivWithin_of_eq\n\n"}
{"name":"fderiv_comp_deriv","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\nl : F → E\nhl : DifferentiableAt 𝕜 l (f x)\nhf : DifferentiableAt 𝕜 f x\n⊢ Eq (deriv (Function.comp l f) x) ((fderiv 𝕜 l (f x)) (deriv f x))","decl":"theorem fderiv_comp_deriv (hl : DifferentiableAt 𝕜 l (f x)) (hf : DifferentiableAt 𝕜 f x) :\n    deriv (l ∘ f) x = (fderiv 𝕜 l (f x) : F → E) (deriv f x) :=\n  (hl.hasFDerivAt.comp_hasDerivAt x hf.hasDerivAt).deriv\n\n"}
{"name":"fderiv.comp_deriv","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\nl : F → E\nhl : DifferentiableAt 𝕜 l (f x)\nhf : DifferentiableAt 𝕜 f x\n⊢ Eq (deriv (Function.comp l f) x) ((fderiv 𝕜 l (f x)) (deriv f x))","decl":"@[deprecated (since := \"2024-10-31\")]\nalias fderiv.comp_deriv := fderiv_comp_deriv\n\n"}
{"name":"fderiv_comp_deriv_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\nl : F → E\ny : F\nhl : DifferentiableAt 𝕜 l y\nhf : DifferentiableAt 𝕜 f x\nhy : Eq y (f x)\n⊢ Eq (deriv (Function.comp l f) x) ((fderiv 𝕜 l (f x)) (deriv f x))","decl":"theorem fderiv_comp_deriv_of_eq (hl : DifferentiableAt 𝕜 l y) (hf : DifferentiableAt 𝕜 f x)\n    (hy : y = f x) :\n    deriv (l ∘ f) x = (fderiv 𝕜 l (f x) : F → E) (deriv f x) := by\n  rw [hy] at hl; exact fderiv_comp_deriv x hl hf\n\n"}
{"name":"fderiv.comp_deriv_of_eq","module":"Mathlib.Analysis.Calculus.Deriv.Comp","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type v\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type w\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → F\nx : 𝕜\nl : F → E\ny : F\nhl : DifferentiableAt 𝕜 l y\nhf : DifferentiableAt 𝕜 f x\nhy : Eq y (f x)\n⊢ Eq (deriv (Function.comp l f) x) ((fderiv 𝕜 l (f x)) (deriv f x))","decl":"@[deprecated (since := \"2024-10-31\")]\nalias fderiv.comp_deriv_of_eq := fderiv_comp_deriv_of_eq\n\n"}
