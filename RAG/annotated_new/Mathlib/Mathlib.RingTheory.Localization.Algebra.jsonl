{"name":"Algebra.idealMap_isLocalizedModule","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : CommSemiring S\nM : Submonoid R\ninst✝¹ : Algebra R S\ninst✝ : IsLocalization M S\nI : Ideal R\n⊢ IsLocalizedModule M (Algebra.idealMap S I)","decl":"open IsLocalization in\nvariable (M S) in\n/-- The span of `I` in a localization of `R` at `M` is the localization of `I` at `M`. -/\n-- TODO: golf using `Ideal.localized'_eq_map`\ninstance Algebra.idealMap_isLocalizedModule (I : Ideal R) :\n    IsLocalizedModule M (Algebra.idealMap I (S := S)) where\n  map_units x :=\n    (Module.End_isUnit_iff _).mpr ⟨fun a b e ↦ Subtype.ext ((map_units S x).mul_right_injective\n      (by simpa [Algebra.smul_def] using congr(($e).1))),\n      fun a ↦ ⟨⟨_, Ideal.mul_mem_left _ (map_units S x).unit⁻¹.1 a.2⟩,\n        Subtype.ext (by simp [Algebra.smul_def, ← mul_assoc])⟩⟩\n  surj' y :=\n    have ⟨x, hx⟩ := (mem_map_algebraMap_iff M S).mp y.property\n    ⟨x, Subtype.ext (by simp [Submonoid.smul_def, Algebra.smul_def, mul_comm, hx])⟩\n  exists_of_eq h := ⟨_, Subtype.ext (exists_of_eq congr(($h).1)).choose_spec⟩\n\n"}
{"name":"IsLocalization.ker_map","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u_1\nS : Type u_2\nP : Type u_3\nQ : Type u_4\ninst✝⁷ : CommSemiring R\ninst✝⁶ : CommSemiring S\ninst✝⁵ : CommSemiring P\ninst✝⁴ : CommSemiring Q\nM : Submonoid R\nT : Submonoid P\ninst✝³ : Algebra R S\ninst✝² : Algebra P Q\ninst✝¹ : IsLocalization M S\ninst✝ : IsLocalization T Q\ng : RingHom R P\nhT : Eq (Submonoid.map g M) T\n⊢ Eq (RingHom.ker (IsLocalization.map Q g ⋯)) (Ideal.map (algebraMap R S) (RingHom.ker g))","decl":"lemma IsLocalization.ker_map (hT : Submonoid.map g M = T) :\n    RingHom.ker (IsLocalization.map Q g (hT.symm ▸ M.le_comap_map) : S →+* Q) =\n      (RingHom.ker g).map (algebraMap R S) := by\n  ext x\n  obtain ⟨x, s, rfl⟩ := IsLocalization.mk'_surjective M x\n  simp [RingHom.mem_ker, IsLocalization.map_mk', IsLocalization.mk'_eq_zero_iff,\n    IsLocalization.mk'_mem_map_algebraMap_iff, ← hT]\n\n"}
{"name":"RingHom.toKerIsLocalization_apply","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u_1\nS : Type u_2\nP : Type u_3\nQ : Type u_4\ninst✝⁷ : CommSemiring R\ninst✝⁶ : CommSemiring S\ninst✝⁵ : CommSemiring P\ninst✝⁴ : CommSemiring Q\nM : Submonoid R\nT : Submonoid P\ninst✝³ : Algebra R S\ninst✝² : Algebra P Q\ninst✝¹ : IsLocalization M S\ninst✝ : IsLocalization T Q\ng : RingHom R P\nhy : LE.le M (Submonoid.comap g T)\nr : Subtype fun x => Membership.mem (RingHom.ker g) x\n⊢ Eq (↑((RingHom.toKerIsLocalization S Q g hy) r)) ((algebraMap R S) ↑r)","decl":"@[simp]\nlemma RingHom.toKerIsLocalization_apply (hy : M ≤ Submonoid.comap g T) (r : RingHom.ker g) :\n    (RingHom.toKerIsLocalization S Q g hy r).val = algebraMap R S r :=\n  rfl\n\n"}
{"name":"RingHom.toKerIsLocalization_isLocalizedModule","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u_1\nS : Type u_2\nP : Type u_3\nQ : Type u_4\ninst✝⁷ : CommSemiring R\ninst✝⁶ : CommSemiring S\ninst✝⁵ : CommSemiring P\ninst✝⁴ : CommSemiring Q\nM : Submonoid R\nT : Submonoid P\ninst✝³ : Algebra R S\ninst✝² : Algebra P Q\ninst✝¹ : IsLocalization M S\ninst✝ : IsLocalization T Q\ng : RingHom R P\nhT : Eq (Submonoid.map g M) T\n⊢ IsLocalizedModule M (RingHom.toKerIsLocalization S Q g ⋯)","decl":"/-- The canonical linear map from the kernel of `g` to the kernel of its localization\nis localizing. In other words, localization commutes with taking kernels. -/\nlemma RingHom.toKerIsLocalization_isLocalizedModule (hT : Submonoid.map g M = T) :\n    IsLocalizedModule M (toKerIsLocalization S Q g (hT.symm ▸ Submonoid.le_comap_map M)) := by\n  let e := LinearEquiv.ofEq _ _ (IsLocalization.ker_map (S := S) Q g hT).symm\n  convert_to IsLocalizedModule M ((e.restrictScalars R).toLinearMap ∘ₗ\n    Algebra.idealMap S (RingHom.ker g))\n  apply IsLocalizedModule.of_linearEquiv\n\n"}
{"name":"IsLocalization.isLocalization_algebraMapSubmonoid_map_algHom","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u\ninst✝⁶ : CommRing R\nM : Submonoid R\nA : Type v\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\nB : Type w\ninst✝³ : CommRing B\ninst✝² : Algebra R B\nBₚ : Type v'\ninst✝¹ : CommRing Bₚ\ninst✝ : Algebra B Bₚ\nf : AlgHom R A B\n⊢ IsLocalization (Submonoid.map f.toRingHom (Algebra.algebraMapSubmonoid A M)) Bₚ","decl":"instance isLocalization_algebraMapSubmonoid_map_algHom (f : A →ₐ[R] B) :\n    IsLocalization ((algebraMapSubmonoid A M).map f.toRingHom) Bₚ := by\n  erw [algebraMapSubmonoid_map_eq M f]\n  infer_instance\n\n"}
{"name":"IsLocalization.mapₐ_coe","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u\ninst✝²¹ : CommRing R\nM : Submonoid R\nA : Type v\ninst✝²⁰ : CommRing A\ninst✝¹⁹ : Algebra R A\nB : Type w\ninst✝¹⁸ : CommRing B\ninst✝¹⁷ : Algebra R B\nRₚ : Type u'\ninst✝¹⁶ : CommRing Rₚ\ninst✝¹⁵ : Algebra R Rₚ\ninst✝¹⁴ : IsLocalization M Rₚ\nAₚ : Type v'\ninst✝¹³ : CommRing Aₚ\ninst✝¹² : Algebra R Aₚ\ninst✝¹¹ : Algebra A Aₚ\ninst✝¹⁰ : IsScalarTower R A Aₚ\ninst✝⁹ : IsLocalization (Algebra.algebraMapSubmonoid A M) Aₚ\nBₚ : Type v'\ninst✝⁸ : CommRing Bₚ\ninst✝⁷ : Algebra R Bₚ\ninst✝⁶ : Algebra B Bₚ\ninst✝⁵ : IsScalarTower R B Bₚ\ninst✝⁴ : IsLocalization (Algebra.algebraMapSubmonoid B M) Bₚ\ninst✝³ : Algebra Rₚ Aₚ\ninst✝² : Algebra Rₚ Bₚ\ninst✝¹ : IsScalarTower R Rₚ Aₚ\ninst✝ : IsScalarTower R Rₚ Bₚ\nf : AlgHom R A B\n⊢ Eq ⇑(IsLocalization.mapₐ M Rₚ Aₚ Bₚ f) ⇑(IsLocalization.map Bₚ f.toRingHom ⋯)","decl":"@[simp]\nlemma mapₐ_coe (f : A →ₐ[R] B) :\n    (mapₐ M Rₚ Aₚ Bₚ f : Aₚ → Bₚ) = map Bₚ f.toRingHom (algebraMapSubmonoid_le_comap M f)  :=\n  rfl\n\n"}
{"name":"IsLocalization.mapₐ_injective_of_injective","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u\ninst✝²¹ : CommRing R\nM : Submonoid R\nA : Type v\ninst✝²⁰ : CommRing A\ninst✝¹⁹ : Algebra R A\nB : Type w\ninst✝¹⁸ : CommRing B\ninst✝¹⁷ : Algebra R B\nRₚ : Type u'\ninst✝¹⁶ : CommRing Rₚ\ninst✝¹⁵ : Algebra R Rₚ\ninst✝¹⁴ : IsLocalization M Rₚ\nAₚ : Type v'\ninst✝¹³ : CommRing Aₚ\ninst✝¹² : Algebra R Aₚ\ninst✝¹¹ : Algebra A Aₚ\ninst✝¹⁰ : IsScalarTower R A Aₚ\ninst✝⁹ : IsLocalization (Algebra.algebraMapSubmonoid A M) Aₚ\nBₚ : Type v'\ninst✝⁸ : CommRing Bₚ\ninst✝⁷ : Algebra R Bₚ\ninst✝⁶ : Algebra B Bₚ\ninst✝⁵ : IsScalarTower R B Bₚ\ninst✝⁴ : IsLocalization (Algebra.algebraMapSubmonoid B M) Bₚ\ninst✝³ : Algebra Rₚ Aₚ\ninst✝² : Algebra Rₚ Bₚ\ninst✝¹ : IsScalarTower R Rₚ Aₚ\ninst✝ : IsScalarTower R Rₚ Bₚ\nf : AlgHom R A B\nhf : Function.Injective ⇑f\n⊢ Function.Injective ⇑(IsLocalization.mapₐ M Rₚ Aₚ Bₚ f)","decl":"lemma mapₐ_injective_of_injective (f : A →ₐ[R] B) (hf : Function.Injective f) :\n    Function.Injective (mapₐ M Rₚ Aₚ Bₚ f) :=\n  IsLocalization.map_injective_of_injective _ _ _ hf\n\n"}
{"name":"IsLocalization.mapₐ_surjective_of_surjective","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u\ninst✝²¹ : CommRing R\nM : Submonoid R\nA : Type v\ninst✝²⁰ : CommRing A\ninst✝¹⁹ : Algebra R A\nB : Type w\ninst✝¹⁸ : CommRing B\ninst✝¹⁷ : Algebra R B\nRₚ : Type u'\ninst✝¹⁶ : CommRing Rₚ\ninst✝¹⁵ : Algebra R Rₚ\ninst✝¹⁴ : IsLocalization M Rₚ\nAₚ : Type v'\ninst✝¹³ : CommRing Aₚ\ninst✝¹² : Algebra R Aₚ\ninst✝¹¹ : Algebra A Aₚ\ninst✝¹⁰ : IsScalarTower R A Aₚ\ninst✝⁹ : IsLocalization (Algebra.algebraMapSubmonoid A M) Aₚ\nBₚ : Type v'\ninst✝⁸ : CommRing Bₚ\ninst✝⁷ : Algebra R Bₚ\ninst✝⁶ : Algebra B Bₚ\ninst✝⁵ : IsScalarTower R B Bₚ\ninst✝⁴ : IsLocalization (Algebra.algebraMapSubmonoid B M) Bₚ\ninst✝³ : Algebra Rₚ Aₚ\ninst✝² : Algebra Rₚ Bₚ\ninst✝¹ : IsScalarTower R Rₚ Aₚ\ninst✝ : IsScalarTower R Rₚ Bₚ\nf : AlgHom R A B\nhf : Function.Surjective ⇑f\n⊢ Function.Surjective ⇑(IsLocalization.mapₐ M Rₚ Aₚ Bₚ f)","decl":"lemma mapₐ_surjective_of_surjective (f : A →ₐ[R] B) (hf : Function.Surjective f) :\n    Function.Surjective (mapₐ M Rₚ Aₚ Bₚ f) :=\n  IsLocalization.map_surjective_of_surjective _ _ _ hf\n\n"}
{"name":"AlgHom.toKerIsLocalization_apply","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u\ninst✝²¹ : CommRing R\nM : Submonoid R\nA : Type v\ninst✝²⁰ : CommRing A\ninst✝¹⁹ : Algebra R A\nB : Type w\ninst✝¹⁸ : CommRing B\ninst✝¹⁷ : Algebra R B\nRₚ : Type u'\ninst✝¹⁶ : CommRing Rₚ\ninst✝¹⁵ : Algebra R Rₚ\ninst✝¹⁴ : IsLocalization M Rₚ\nAₚ : Type v'\ninst✝¹³ : CommRing Aₚ\ninst✝¹² : Algebra R Aₚ\ninst✝¹¹ : Algebra A Aₚ\ninst✝¹⁰ : IsScalarTower R A Aₚ\ninst✝⁹ : IsLocalization (Algebra.algebraMapSubmonoid A M) Aₚ\nBₚ : Type v'\ninst✝⁸ : CommRing Bₚ\ninst✝⁷ : Algebra R Bₚ\ninst✝⁶ : Algebra B Bₚ\ninst✝⁵ : IsScalarTower R B Bₚ\ninst✝⁴ : IsLocalization (Algebra.algebraMapSubmonoid B M) Bₚ\ninst✝³ : Algebra Rₚ Aₚ\ninst✝² : Algebra Rₚ Bₚ\ninst✝¹ : IsScalarTower R Rₚ Aₚ\ninst✝ : IsScalarTower R Rₚ Bₚ\nf : AlgHom R A B\nx : Subtype fun x => Membership.mem (RingHom.ker f) x\n⊢ Eq ((AlgHom.toKerIsLocalization M Rₚ Aₚ Bₚ f) x) ((RingHom.toKerIsLocalization Aₚ Bₚ f.toRingHom ⋯) x)","decl":"@[simp]\nlemma AlgHom.toKerIsLocalization_apply (f : A →ₐ[R] B) (x : RingHom.ker f) :\n    AlgHom.toKerIsLocalization M Rₚ Aₚ Bₚ f x =\n      RingHom.toKerIsLocalization Aₚ Bₚ f.toRingHom (algebraMapSubmonoid_le_comap M f) x :=\n  rfl\n\n"}
{"name":"AlgHom.toKerIsLocalization_isLocalizedModule","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u\ninst✝²¹ : CommRing R\nM : Submonoid R\nA : Type v\ninst✝²⁰ : CommRing A\ninst✝¹⁹ : Algebra R A\nB : Type w\ninst✝¹⁸ : CommRing B\ninst✝¹⁷ : Algebra R B\nRₚ : Type u'\ninst✝¹⁶ : CommRing Rₚ\ninst✝¹⁵ : Algebra R Rₚ\ninst✝¹⁴ : IsLocalization M Rₚ\nAₚ : Type v'\ninst✝¹³ : CommRing Aₚ\ninst✝¹² : Algebra R Aₚ\ninst✝¹¹ : Algebra A Aₚ\ninst✝¹⁰ : IsScalarTower R A Aₚ\ninst✝⁹ : IsLocalization (Algebra.algebraMapSubmonoid A M) Aₚ\nBₚ : Type v'\ninst✝⁸ : CommRing Bₚ\ninst✝⁷ : Algebra R Bₚ\ninst✝⁶ : Algebra B Bₚ\ninst✝⁵ : IsScalarTower R B Bₚ\ninst✝⁴ : IsLocalization (Algebra.algebraMapSubmonoid B M) Bₚ\ninst✝³ : Algebra Rₚ Aₚ\ninst✝² : Algebra Rₚ Bₚ\ninst✝¹ : IsScalarTower R Rₚ Aₚ\ninst✝ : IsScalarTower R Rₚ Bₚ\nf : AlgHom R A B\n⊢ IsLocalizedModule (Algebra.algebraMapSubmonoid A M) (AlgHom.toKerIsLocalization M Rₚ Aₚ Bₚ f)","decl":"/-- The canonical linear map from the kernel of an algebra homomorphism to its localization\nis localizing. -/\nlemma AlgHom.toKerIsLocalization_isLocalizedModule (f : A →ₐ[R] B) :\n    IsLocalizedModule (Algebra.algebraMapSubmonoid A M)\n      (AlgHom.toKerIsLocalization M Rₚ Aₚ Bₚ f) :=\n  RingHom.toKerIsLocalization_isLocalizedModule Bₚ f.toRingHom\n    (algebraMapSubmonoid_map_eq M f)\n\n"}
{"name":"Polynomial.isLocalization","module":"Mathlib.RingTheory.Localization.Algebra","initialProofState":"R : Type u_5\ninst✝³ : CommRing R\nS : Submonoid R\nA : Type u_6\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\ninst✝ : IsLocalization S A\n⊢ IsLocalization (Submonoid.map Polynomial.C S) (Polynomial A)","decl":"/-- If `A` is the localization of `R` at a submonoid `S`, then `A[X]` is the localization of\n`R[X]` at `S.map Polynomial.C`.\n\nSee also `MvPolynomial.isLocalization` for the multivariate case. -/\nlemma isLocalization {R} [CommRing R] (S : Submonoid R) (A) [CommRing A] [Algebra R A]\n    [IsLocalization S A] : letI := (mapRingHom (algebraMap R A)).toAlgebra\n    IsLocalization (S.map C) A[X] := by\n  letI := (mapRingHom (algebraMap R A)).toAlgebra\n  have : IsScalarTower R R[X] A[X] := .of_algebraMap_eq fun _ ↦ (map_C _).symm\n  apply isLocalizedModule_iff_isLocalization.mp <| (isLocalizedModule_iff_isBaseChange S A _).mpr <|\n    .of_equiv (polyEquivTensor' R A).symm.toLinearEquiv fun _ ↦ ?_\n  show _ = eval₂ ..\n  simp [eval₂, ← C_mul_X_pow_eq_monomial]\n\n"}
