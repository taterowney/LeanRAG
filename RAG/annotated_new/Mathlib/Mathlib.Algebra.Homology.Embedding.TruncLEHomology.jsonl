{"name":"HomologicalComplex.truncLE'.quasiIsoAt_truncLE'ToRestriction","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁵ : CategoryTheory.Category.{u_4, u_3} C\ninst✝⁴ : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝³ : e.IsTruncLE\ninst✝² : ∀ (i' : ι'), K.HasHomology i'\nj : ι\nhj : Not (e.BoundaryLE j)\ninst✝¹ : (K.restriction e).HasHomology j\ninst✝ : (K.truncLE' e).HasHomology j\n⊢ QuasiIsoAt (K.truncLE'ToRestriction e) j","decl":"/-- `K.truncLE'ToRestriction e` is a quasi-isomorphism in degrees that are not at the boundary. -/\nlemma quasiIsoAt_truncLE'ToRestriction (j : ι) (hj : ¬ e.BoundaryLE j)\n    [(K.restriction e).HasHomology j] [(K.truncLE' e).HasHomology j] :\n    QuasiIsoAt (K.truncLE'ToRestriction e) j := by\n  dsimp only [truncLE'ToRestriction]\n  have : (K.op.restriction e.op).HasHomology j :=\n    inferInstanceAs ((K.restriction e).op.HasHomology j)\n  rw [quasiIsoAt_unopFunctor_map_iff]\n  exact truncGE'.quasiIsoAt_restrictionToTruncGE' K.op e.op j (by simpa)\n\n"}
{"name":"HomologicalComplex.truncLE'.truncLE'_hasHomology","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝³ : CategoryTheory.Category.{u_4, u_3} C\ninst✝² : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝¹ : e.IsTruncLE\ninst✝ : ∀ (i' : ι'), K.HasHomology i'\ni : ι\n⊢ (K.truncLE' e).HasHomology i","decl":"instance truncLE'_hasHomology (i : ι) : (K.truncLE' e).HasHomology i :=\n  inferInstanceAs ((K.op.truncGE' e.op).unop.HasHomology i)\n\n"}
{"name":"HomologicalComplex.instHasHomologyTruncLE","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁴ : CategoryTheory.Category.{u_4, u_3} C\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝² : e.IsTruncLE\ninst✝¹ : ∀ (i' : ι'), K.HasHomology i'\ninst✝ : CategoryTheory.Limits.HasZeroObject C\ni' : ι'\n⊢ (K.truncLE e).HasHomology i'","decl":"instance (i' : ι') : (K.truncLE e).HasHomology i' :=\n  inferInstanceAs ((K.op.truncGE e.op).unop.HasHomology i')\n\n"}
{"name":"HomologicalComplex.quasiIsoAt_ιTruncLE","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁴ : CategoryTheory.Category.{u_4, u_3} C\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝² : e.IsTruncLE\ninst✝¹ : ∀ (i' : ι'), K.HasHomology i'\ninst✝ : CategoryTheory.Limits.HasZeroObject C\nj : ι\nj' : ι'\nhj' : Eq (e.f j) j'\n⊢ QuasiIsoAt (K.ιTruncLE e) j'","decl":"lemma quasiIsoAt_ιTruncLE {j : ι} {j' : ι'} (hj' : e.f j = j') :\n    QuasiIsoAt (K.ιTruncLE e) j' := by\n  have := K.op.quasiIsoAt_πTruncGE e.op hj'\n  exact inferInstanceAs (QuasiIsoAt ((unopFunctor _ _ ).map (K.op.πTruncGE e.op).op) j')\n\n"}
{"name":"HomologicalComplex.instQuasiIsoAtιTruncLEF","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁴ : CategoryTheory.Category.{u_4, u_3} C\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝² : e.IsTruncLE\ninst✝¹ : ∀ (i' : ι'), K.HasHomology i'\ninst✝ : CategoryTheory.Limits.HasZeroObject C\ni : ι\n⊢ QuasiIsoAt (K.ιTruncLE e) (e.f i)","decl":"instance (i : ι) : QuasiIsoAt (K.ιTruncLE e) (e.f i) := K.quasiIsoAt_ιTruncLE e rfl\n\n"}
{"name":"HomologicalComplex.quasiIso_ιTruncLE_iff_isSupported","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁴ : CategoryTheory.Category.{u_4, u_3} C\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝² : e.IsTruncLE\ninst✝¹ : ∀ (i' : ι'), K.HasHomology i'\ninst✝ : CategoryTheory.Limits.HasZeroObject C\n⊢ Iff (QuasiIso (K.ιTruncLE e)) (K.IsSupported e)","decl":"lemma quasiIso_ιTruncLE_iff_isSupported :\n    QuasiIso (K.ιTruncLE e) ↔ K.IsSupported e := by\n  rw [← quasiIso_opFunctor_map_iff, ← isSupported_op_iff]\n  exact K.op.quasiIso_πTruncGE_iff_isSupported e.op\n\n"}
{"name":"HomologicalComplex.acyclic_truncLE_iff_isSupportedOutside","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁴ : CategoryTheory.Category.{u_4, u_3} C\ninst✝³ : CategoryTheory.Limits.HasZeroMorphisms C\nK : HomologicalComplex C c'\ne : c.Embedding c'\ninst✝² : e.IsTruncLE\ninst✝¹ : ∀ (i' : ι'), K.HasHomology i'\ninst✝ : CategoryTheory.Limits.HasZeroObject C\n⊢ Iff (K.truncLE e).Acyclic (K.IsSupportedOutside e)","decl":"lemma acyclic_truncLE_iff_isSupportedOutside :\n    (K.truncLE e).Acyclic ↔ K.IsSupportedOutside e := by\n  rw [← acyclic_op_iff, ← isSupportedOutside_op_iff]\n  exact K.op.acyclic_truncGE_iff_isSupportedOutside e.op\n\n"}
{"name":"HomologicalComplex.quasiIso_truncLEMap_iff","module":"Mathlib.Algebra.Homology.Embedding.TruncLEHomology","initialProofState":"ι : Type u_1\nι' : Type u_2\nc : ComplexShape ι\nc' : ComplexShape ι'\nC : Type u_3\ninst✝⁵ : CategoryTheory.Category.{u_4, u_3} C\ninst✝⁴ : CategoryTheory.Limits.HasZeroMorphisms C\nK L : HomologicalComplex C c'\nφ : Quiver.Hom K L\ne : c.Embedding c'\ninst✝³ : e.IsTruncLE\ninst✝² : ∀ (i' : ι'), K.HasHomology i'\ninst✝¹ : ∀ (i' : ι'), L.HasHomology i'\ninst✝ : CategoryTheory.Limits.HasZeroObject C\n⊢ Iff (QuasiIso (HomologicalComplex.truncLEMap φ e)) (∀ (i : ι) (i' : ι'), Eq (e.f i) i' → QuasiIsoAt φ i')","decl":"lemma quasiIso_truncLEMap_iff :\n    QuasiIso (truncLEMap φ e) ↔ ∀ (i : ι) (i' : ι') (_ : e.f i = i'), QuasiIsoAt φ i' := by\n  rw [← quasiIso_opFunctor_map_iff]\n  simp only [← quasiIsoAt_opFunctor_map_iff φ]\n  apply quasiIso_truncGEMap_iff\n\n"}
