{"name":"DomMulAct.smul_Lp_val","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (↑(HSMul.hSMul c f)) (HSMul.hSMul c ↑f)","decl":"@[to_additive (attr := simp)]\ntheorem smul_Lp_val (c : Mᵈᵐᵃ) (f : Lp E p μ) : (c • f).1 = c • f.1 := rfl\n\n"}
{"name":"DomAddAct.vadd_Lp_val","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (↑(HVAdd.hVAdd c f)) (HVAdd.hVAdd c ↑f)","decl":"@[to_additive (attr := simp)]\ntheorem smul_Lp_val (c : Mᵈᵐᵃ) (f : Lp E p μ) : (c • f).1 = c • f.1 := rfl\n\n"}
{"name":"DomMulAct.smul_Lp_ae_eq","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑(HSMul.hSMul c f) fun x => ↑↑f (HSMul.hSMul (DomMulAct.mk.symm c) x)","decl":"@[to_additive]\ntheorem smul_Lp_ae_eq (c : Mᵈᵐᵃ) (f : Lp E p μ) : c • f =ᵐ[μ] (f <| mk.symm c • ·) :=\n  Lp.coeFn_compMeasurePreserving _ _\n\n"}
{"name":"DomAddAct.vadd_Lp_ae_eq","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑(HVAdd.hVAdd c f) fun x => ↑↑f (HVAdd.hVAdd (DomAddAct.mk.symm c) x)","decl":"@[to_additive]\ntheorem smul_Lp_ae_eq (c : Mᵈᵐᵃ) (f : Lp E p μ) : c • f =ᵐ[μ] (f <| mk.symm c • ·) :=\n  Lp.coeFn_compMeasurePreserving _ _\n\n"}
{"name":"DomAddAct.mk_vadd_toLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : M\nf : α → E\nhf : MeasureTheory.Memℒp f p μ\n⊢ Eq (HVAdd.hVAdd (DomAddAct.mk c) (MeasureTheory.Memℒp.toLp f hf)) (MeasureTheory.Memℒp.toLp (fun x => f (HVAdd.hVAdd c x)) ⋯)","decl":"@[to_additive]\ntheorem mk_smul_toLp (c : M) {f : α → E} (hf : Memℒp f p μ) :\n    mk c • hf.toLp f =\n      (hf.comp_measurePreserving <| measurePreserving_smul c μ).toLp (f <| c • ·) :=\n  rfl\n\n"}
{"name":"DomMulAct.mk_smul_toLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : M\nf : α → E\nhf : MeasureTheory.Memℒp f p μ\n⊢ Eq (HSMul.hSMul (DomMulAct.mk c) (MeasureTheory.Memℒp.toLp f hf)) (MeasureTheory.Memℒp.toLp (fun x => f (HSMul.hSMul c x)) ⋯)","decl":"@[to_additive]\ntheorem mk_smul_toLp (c : M) {f : α → E} (hf : Memℒp f p μ) :\n    mk c • hf.toLp f =\n      (hf.comp_measurePreserving <| measurePreserving_smul c μ).toLp (f <| c • ·) :=\n  rfl\n\n"}
{"name":"DomMulAct.smul_Lp_const","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁶ : MeasurableSpace M\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝³ : SMul M α\ninst✝² : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝¹ : MeasurableSMul M α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nc : DomMulAct M\na : E\n⊢ Eq (HSMul.hSMul c ((MeasureTheory.Lp.const p μ) a)) ((MeasureTheory.Lp.const p μ) a)","decl":"@[to_additive (attr := simp)]\ntheorem smul_Lp_const [IsFiniteMeasure μ] (c : Mᵈᵐᵃ) (a : E) :\n    c • Lp.const p μ a = Lp.const p μ a :=\n  rfl\n\n"}
{"name":"DomAddAct.vadd_Lp_const","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁶ : MeasurableSpace M\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝³ : VAdd M α\ninst✝² : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝¹ : MeasurableVAdd M α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nc : DomAddAct M\na : E\n⊢ Eq (HVAdd.hVAdd c ((MeasureTheory.Lp.const p μ) a)) ((MeasureTheory.Lp.const p μ) a)","decl":"@[to_additive (attr := simp)]\ntheorem smul_Lp_const [IsFiniteMeasure μ] (c : Mᵈᵐᵃ) (a : E) :\n    c • Lp.const p μ a = Lp.const p μ a :=\n  rfl\n\n"}
{"name":"DomMulAct.mk_smul_indicatorConstLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : M\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nb : E\n⊢ Eq (HSMul.hSMul (DomMulAct.mk c) (MeasureTheory.indicatorConstLp p hs hμs b)) (MeasureTheory.indicatorConstLp p ⋯ ⋯ b)","decl":"@[to_additive]\ntheorem mk_smul_indicatorConstLp (c : M)\n    {s : Set α} (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (b : E) :\n    mk c • indicatorConstLp p hs hμs b =\n      indicatorConstLp p (hs.preimage <| measurable_const_smul c)\n        (by rwa [SMulInvariantMeasure.measure_preimage_smul c hs]) b :=\n  rfl\n\n"}
{"name":"DomAddAct.mk_vadd_indicatorConstLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : M\ns : Set α\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nb : E\n⊢ Eq (HVAdd.hVAdd (DomAddAct.mk c) (MeasureTheory.indicatorConstLp p hs hμs b)) (MeasureTheory.indicatorConstLp p ⋯ ⋯ b)","decl":"@[to_additive]\ntheorem mk_smul_indicatorConstLp (c : M)\n    {s : Set α} (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (b : E) :\n    mk c • indicatorConstLp p hs hμs b =\n      indicatorConstLp p (hs.preimage <| measurable_const_smul c)\n        (by rwa [SMulInvariantMeasure.measure_preimage_smul c hs]) b :=\n  rfl\n\n"}
{"name":"DomMulAct.instSMulCommClassSubtypeAEEqFunMemAddSubgroupLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\nE : Type u_4\ninst✝¹⁰ : MeasurableSpace M\ninst✝⁹ : MeasurableSpace N\ninst✝⁸ : MeasurableSpace α\ninst✝⁷ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝⁶ : SMul M α\ninst✝⁵ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝⁴ : MeasurableSMul M α\ninst✝³ : SMul N α\ninst✝² : SMulCommClass M N α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure N α μ\ninst✝ : MeasurableSMul N α\n⊢ SMulCommClass (DomMulAct M) (DomMulAct N) (Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x)","decl":"instance [SMul N α] [SMulCommClass M N α] [SMulInvariantMeasure N α μ] [MeasurableSMul N α] :\n    SMulCommClass Mᵈᵐᵃ Nᵈᵐᵃ (Lp E p μ) :=\n  Subtype.val_injective.smulCommClass (fun _ _ ↦ rfl) fun _ _ ↦ rfl\n\n"}
{"name":"DomMulAct.instSMulCommClassSubtypeAEEqFunMemAddSubgroupLp_1","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁸ : MeasurableSpace M\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝⁵ : SMul M α\ninst✝⁴ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝³ : MeasurableSMul M α\n𝕜 : Type u_5\ninst✝² : NormedRing 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\n⊢ SMulCommClass (DomMulAct M) 𝕜 (Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x)","decl":"instance {𝕜 : Type*} [NormedRing 𝕜] [Module 𝕜 E] [BoundedSMul 𝕜 E] :\n    SMulCommClass Mᵈᵐᵃ 𝕜 (Lp E p μ) :=\n  Subtype.val_injective.smulCommClass (fun _ _ ↦ rfl) fun _ _ ↦ rfl\n\n"}
{"name":"DomMulAct.instSMulCommClassSubtypeAEEqFunMemAddSubgroupLp_2","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁸ : MeasurableSpace M\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝⁵ : SMul M α\ninst✝⁴ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝³ : MeasurableSMul M α\n𝕜 : Type u_5\ninst✝² : NormedRing 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\n⊢ SMulCommClass 𝕜 (DomMulAct M) (Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x)","decl":"instance {𝕜 : Type*} [NormedRing 𝕜] [Module 𝕜 E] [BoundedSMul 𝕜 E] :\n    SMulCommClass 𝕜 Mᵈᵐᵃ (Lp E p μ) :=\n  .symm _ _ _\n\n-- We don't have a typeclass for additive versions of the next few lemmas\n-- Should we add `AddDistribAddAction` with `to_additive` both from `MulDistribMulAction`\n-- and `DistribMulAction`?\n\n"}
{"name":"DomAddAct.vadd_Lp_add","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (HVAdd.hVAdd c (HAdd.hAdd f g)) (HAdd.hAdd (HVAdd.hVAdd c f) (HVAdd.hVAdd c g))","decl":"@[to_additive]\ntheorem smul_Lp_add (c : Mᵈᵐᵃ) : ∀ f g : Lp E p μ, c • (f + g) = c • f + c • g := by\n  rintro ⟨⟨⟩, _⟩ ⟨⟨⟩, _⟩; rfl\n"}
{"name":"DomMulAct.smul_Lp_add","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (HSMul.hSMul c (HAdd.hAdd f g)) (HAdd.hAdd (HSMul.hSMul c f) (HSMul.hSMul c g))","decl":"@[to_additive]\ntheorem smul_Lp_add (c : Mᵈᵐᵃ) : ∀ f g : Lp E p μ, c • (f + g) = c • f + c • g := by\n  rintro ⟨⟨⟩, _⟩ ⟨⟨⟩, _⟩; rfl\n"}
{"name":"DomAddAct.vadd_Lp_zero","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\n⊢ Eq (HVAdd.hVAdd c 0) 0","decl":"@[to_additive (attr := simp 1001)]\ntheorem smul_Lp_zero (c : Mᵈᵐᵃ) : c • (0 : Lp E p μ) = 0 := rfl\n\n"}
{"name":"DomMulAct.smul_Lp_zero","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\n⊢ Eq (HSMul.hSMul c 0) 0","decl":"@[to_additive (attr := simp 1001)]\ntheorem smul_Lp_zero (c : Mᵈᵐᵃ) : c • (0 : Lp E p μ) = 0 := rfl\n\n"}
{"name":"DomMulAct.smul_Lp_neg","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (HSMul.hSMul c (Neg.neg f)) (Neg.neg (HSMul.hSMul c f))","decl":"@[to_additive]\ntheorem smul_Lp_neg (c : Mᵈᵐᵃ) (f : Lp E p μ) : c • (-f) = -(c • f) := by\n  rcases f with ⟨⟨_⟩, _⟩; rfl\n\n"}
{"name":"DomAddAct.vadd_Lp_neg","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (HVAdd.hVAdd c (Neg.neg f)) (Neg.neg (HVAdd.hVAdd c f))","decl":"@[to_additive]\ntheorem smul_Lp_neg (c : Mᵈᵐᵃ) (f : Lp E p μ) : c • (-f) = -(c • f) := by\n  rcases f with ⟨⟨_⟩, _⟩; rfl\n\n"}
{"name":"DomAddAct.vadd_Lp_sub","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (HVAdd.hVAdd c (HSub.hSub f g)) (HSub.hSub (HVAdd.hVAdd c f) (HVAdd.hVAdd c g))","decl":"@[to_additive]\ntheorem smul_Lp_sub (c : Mᵈᵐᵃ) : ∀ f g : Lp E p μ, c • (f - g) = c • f - c • g := by\n  rintro ⟨⟨⟩, _⟩ ⟨⟨⟩, _⟩; rfl\n\n"}
{"name":"DomMulAct.smul_Lp_sub","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (HSMul.hSMul c (HSub.hSub f g)) (HSub.hSub (HSMul.hSMul c f) (HSMul.hSMul c g))","decl":"@[to_additive]\ntheorem smul_Lp_sub (c : Mᵈᵐᵃ) : ∀ f g : Lp E p μ, c • (f - g) = c • f - c • g := by\n  rintro ⟨⟨⟩, _⟩ ⟨⟨⟩, _⟩; rfl\n\n"}
{"name":"DomMulAct.norm_smul_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (Norm.norm (HSMul.hSMul c f)) (Norm.norm f)","decl":"@[to_additive (attr := simp)]\ntheorem norm_smul_Lp (c : Mᵈᵐᵃ) (f : Lp E p μ) : ‖c • f‖ = ‖f‖ :=\n  Lp.norm_compMeasurePreserving _ _\n\n"}
{"name":"DomAddAct.norm_vadd_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (Norm.norm (HVAdd.hVAdd c f)) (Norm.norm f)","decl":"@[to_additive (attr := simp)]\ntheorem norm_smul_Lp (c : Mᵈᵐᵃ) (f : Lp E p μ) : ‖c • f‖ = ‖f‖ :=\n  Lp.norm_compMeasurePreserving _ _\n\n"}
{"name":"DomMulAct.nnnorm_smul_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (NNNorm.nnnorm (HSMul.hSMul c f)) (NNNorm.nnnorm f)","decl":"@[to_additive (attr := simp)]\ntheorem nnnorm_smul_Lp (c : Mᵈᵐᵃ) (f : Lp E p μ) : ‖c • f‖₊ = ‖f‖₊ :=\n  NNReal.eq <| Lp.norm_compMeasurePreserving _ _\n\n"}
{"name":"DomAddAct.nnnorm_vadd_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (NNNorm.nnnorm (HVAdd.hVAdd c f)) (NNNorm.nnnorm f)","decl":"@[to_additive (attr := simp)]\ntheorem nnnorm_smul_Lp (c : Mᵈᵐᵃ) (f : Lp E p μ) : ‖c • f‖₊ = ‖f‖₊ :=\n  NNReal.eq <| Lp.norm_compMeasurePreserving _ _\n\n"}
{"name":"DomMulAct.dist_smul_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (Dist.dist (HSMul.hSMul c f) (HSMul.hSMul c g)) (Dist.dist f g)","decl":"@[to_additive (attr := simp)]\ntheorem dist_smul_Lp (c : Mᵈᵐᵃ) (f g : Lp E p μ) : dist (c • f) (c • g) = dist f g := by\n  simp only [dist, ← smul_Lp_sub, norm_smul_Lp]\n\n"}
{"name":"DomAddAct.dist_vadd_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (Dist.dist (HVAdd.hVAdd c f) (HVAdd.hVAdd c g)) (Dist.dist f g)","decl":"@[to_additive (attr := simp)]\ntheorem dist_smul_Lp (c : Mᵈᵐᵃ) (f g : Lp E p μ) : dist (c • f) (c • g) = dist f g := by\n  simp only [dist, ← smul_Lp_sub, norm_smul_Lp]\n\n"}
{"name":"DomMulAct.edist_smul_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : SMul M α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝ : MeasurableSMul M α\nc : DomMulAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (EDist.edist (HSMul.hSMul c f) (HSMul.hSMul c g)) (EDist.edist f g)","decl":"@[to_additive (attr := simp)]\ntheorem edist_smul_Lp (c : Mᵈᵐᵃ) (f g : Lp E p μ) : edist (c • f) (c • g) = edist f g := by\n  simp only [Lp.edist_dist, dist_smul_Lp]\n\n"}
{"name":"DomAddAct.edist_vadd_Lp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝² : VAdd M α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝ : MeasurableVAdd M α\nc : DomAddAct M\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\n⊢ Eq (EDist.edist (HVAdd.hVAdd c f) (HVAdd.hVAdd c g)) (EDist.edist f g)","decl":"@[to_additive (attr := simp)]\ntheorem edist_smul_Lp (c : Mᵈᵐᵃ) (f g : Lp E p μ) : edist (c • f) (c • g) = edist f g := by\n  simp only [Lp.edist_dist, dist_smul_Lp]\n\n"}
{"name":"DomMulAct.instIsometricSMulSubtypeAEEqFunMemAddSubgroupLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁶ : MeasurableSpace M\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝³ : SMul M α\ninst✝² : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝¹ : MeasurableSMul M α\ninst✝ : Fact (LE.le 1 p)\n⊢ IsometricSMul (DomMulAct M) (Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x)","decl":"@[to_additive]\ninstance : IsometricSMul Mᵈᵐᵃ (Lp E p μ) := ⟨edist_smul_Lp⟩\n\n"}
{"name":"DomAddAct.instIsometricVAddSubtypeAEEqFunMemAddAddSubgroupLp","module":"Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic","initialProofState":"M : Type u_1\nα : Type u_3\nE : Type u_4\ninst✝⁶ : MeasurableSpace M\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : NormedAddCommGroup E\nμ : MeasureTheory.Measure α\np : ENNReal\ninst✝³ : VAdd M α\ninst✝² : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝¹ : MeasurableVAdd M α\ninst✝ : Fact (LE.le 1 p)\n⊢ IsometricVAdd (DomAddAct M) (Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x)","decl":"@[to_additive]\ninstance : IsometricSMul Mᵈᵐᵃ (Lp E p μ) := ⟨edist_smul_Lp⟩\n\n"}
