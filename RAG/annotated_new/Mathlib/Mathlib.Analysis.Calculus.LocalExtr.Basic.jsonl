{"name":"posTangentConeAt_mono","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\na : E\n‚ä¢ Monotone fun s => posTangentConeAt s a","decl":"theorem posTangentConeAt_mono : Monotone fun s => posTangentConeAt s a := by\n  rintro s t hst y ‚ü®c, d, hd, hc, hcd‚ü©\n  exact ‚ü®c, d, mem_of_superset hd fun h hn => hst hn, hc, hcd‚ü©\n\n"}
{"name":"mem_posTangentConeAt_of_frequently_mem","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\ns : Set E\nx y : E\nh : Filter.Frequently (fun t => Membership.mem s (HAdd.hAdd x (HSMul.hSMul t y))) (nhdsWithin 0 (Set.Ioi 0))\n‚ä¢ Membership.mem (posTangentConeAt s x) y","decl":"theorem mem_posTangentConeAt_of_frequently_mem (h : ‚àÉ·∂† t : ‚Ñù in ùìù[>] 0, x + t ‚Ä¢ y ‚àà s) :\n    y ‚àà posTangentConeAt s x := by\n  obtain ‚ü®a, ha, has‚ü© := Filter.exists_seq_forall_of_frequently h\n  refine ‚ü®a‚Åª¬π, (a ¬∑ ‚Ä¢ y), Eventually.of_forall has, tendsto_inv_nhdsGT_zero.comp ha, ?_‚ü©\n  refine tendsto_const_nhds.congr' ?_\n  filter_upwards [(tendsto_nhdsWithin_iff.1 ha).2] with n (hn : 0 < a n)\n  simp [ne_of_gt hn]\n\n"}
{"name":"mem_posTangentConeAt_of_segment_subset","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\ns : Set E\nx y : E\nh : HasSubset.Subset (segment Real x (HAdd.hAdd x y)) s\n‚ä¢ Membership.mem (posTangentConeAt s x) y","decl":"/-- If `[x -[‚Ñù] x + y] ‚äÜ s`, then `y` belongs to the positive tangnet cone of `s`.\n\nBefore 2024-07-13, this lemma used to be called `mem_posTangentConeAt_of_segment_subset`.\nSee also `sub_mem_posTangentConeAt_of_segment_subset`\nfor the lemma that used to be called `mem_posTangentConeAt_of_segment_subset`. -/\ntheorem mem_posTangentConeAt_of_segment_subset (h : [x -[‚Ñù] x + y] ‚äÜ s) :\n    y ‚àà posTangentConeAt s x := by\n  refine mem_posTangentConeAt_of_frequently_mem (Eventually.frequently ?_)\n  rw [eventually_nhdsWithin_iff]\n  filter_upwards [ge_mem_nhds one_pos] with t ht‚ÇÅ ht‚ÇÄ\n  apply h\n  rw [segment_eq_image', add_sub_cancel_left]\n  exact mem_image_of_mem _ ‚ü®le_of_lt ht‚ÇÄ, ht‚ÇÅ‚ü©\n\n"}
{"name":"sub_mem_posTangentConeAt_of_segment_subset","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\ns : Set E\nx y : E\nh : HasSubset.Subset (segment Real x y) s\n‚ä¢ Membership.mem (posTangentConeAt s x) (HSub.hSub y x)","decl":"theorem sub_mem_posTangentConeAt_of_segment_subset (h : segment ‚Ñù x y ‚äÜ s) :\n    y - x ‚àà posTangentConeAt s x :=\n  mem_posTangentConeAt_of_segment_subset <| by rwa [add_sub_cancel]\n\n"}
{"name":"posTangentConeAt_univ","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\na : E\n‚ä¢ Eq (posTangentConeAt Set.univ a) Set.univ","decl":"@[simp]\ntheorem posTangentConeAt_univ : posTangentConeAt univ a = univ :=\n  eq_univ_of_forall fun _ => mem_posTangentConeAt_of_segment_subset (subset_univ _)\n\n"}
{"name":"IsLocalMaxOn.hasFDerivWithinAt_nonpos","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\ns : Set E\na y : E\nh : IsLocalMaxOn f s a\nhf : HasFDerivWithinAt f f' s a\nhy : Membership.mem (posTangentConeAt s a) y\n‚ä¢ LE.le (f' y) 0","decl":"/-- If `f` has a local max on `s` at `a`, `f'` is the derivative of `f` at `a` within `s`, and\n`y` belongs to the positive tangent cone of `s` at `a`, then `f' y ‚â§ 0`. -/\ntheorem IsLocalMaxOn.hasFDerivWithinAt_nonpos (h : IsLocalMaxOn f s a)\n    (hf : HasFDerivWithinAt f f' s a) (hy : y ‚àà posTangentConeAt s a) : f' y ‚â§ 0 := by\n  rcases hy with ‚ü®c, d, hd, hc, hcd‚ü©\n  have hc' : Tendsto (‚Äñc ¬∑‚Äñ) atTop atTop := tendsto_abs_atTop_atTop.comp hc\n  suffices ‚àÄ·∂† n in atTop, c n ‚Ä¢ (f (a + d n) - f a) ‚â§ 0 from\n    le_of_tendsto (hf.lim atTop hd hc' hcd) this\n  replace hd : Tendsto (fun n => a + d n) atTop (ùìù[s] (a + 0)) :=\n    tendsto_nhdsWithin_iff.2 ‚ü®tendsto_const_nhds.add (tangentConeAt.lim_zero _ hc' hcd), hd‚ü©\n  rw [add_zero] at hd\n  filter_upwards [hd.eventually h, hc.eventually_ge_atTop 0] with n hfn hcn\n  exact mul_nonpos_of_nonneg_of_nonpos hcn (sub_nonpos.2 hfn)\n\n"}
{"name":"IsLocalMaxOn.fderivWithin_nonpos","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\na y : E\nh : IsLocalMaxOn f s a\nhy : Membership.mem (posTangentConeAt s a) y\n‚ä¢ LE.le ((fderivWithin Real f s a) y) 0","decl":"/-- If `f` has a local max on `s` at `a` and `y` belongs to the positive tangent cone\nof `s` at `a`, then `f' y ‚â§ 0`. -/\ntheorem IsLocalMaxOn.fderivWithin_nonpos (h : IsLocalMaxOn f s a)\n    (hy : y ‚àà posTangentConeAt s a) : (fderivWithin ‚Ñù f s a : E ‚Üí ‚Ñù) y ‚â§ 0 := by\n  classical\n  exact\n    if hf : DifferentiableWithinAt ‚Ñù f s a then h.hasFDerivWithinAt_nonpos hf.hasFDerivWithinAt hy\n    else by rw [fderivWithin_zero_of_not_differentiableWithinAt hf]; rfl\n\n"}
{"name":"IsLocalMaxOn.hasFDerivWithinAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\ns : Set E\na y : E\nh : IsLocalMaxOn f s a\nhf : HasFDerivWithinAt f f' s a\nhy : Membership.mem (posTangentConeAt s a) y\nhy' : Membership.mem (posTangentConeAt s a) (Neg.neg y)\n‚ä¢ Eq (f' y) 0","decl":"/-- If `f` has a local max on `s` at `a`, `f'` is a derivative of `f` at `a` within `s`, and\nboth `y` and `-y` belong to the positive tangent cone of `s` at `a`, then `f' y ‚â§ 0`. -/\ntheorem IsLocalMaxOn.hasFDerivWithinAt_eq_zero (h : IsLocalMaxOn f s a)\n    (hf : HasFDerivWithinAt f f' s a) (hy : y ‚àà posTangentConeAt s a)\n    (hy' : -y ‚àà posTangentConeAt s a) : f' y = 0 :=\n  le_antisymm (h.hasFDerivWithinAt_nonpos hf hy) <| by simpa using h.hasFDerivWithinAt_nonpos hf hy'\n\n"}
{"name":"IsLocalMaxOn.fderivWithin_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\na y : E\nh : IsLocalMaxOn f s a\nhy : Membership.mem (posTangentConeAt s a) y\nhy' : Membership.mem (posTangentConeAt s a) (Neg.neg y)\n‚ä¢ Eq ((fderivWithin Real f s a) y) 0","decl":"/-- If `f` has a local max on `s` at `a` and both `y` and `-y` belong to the positive tangent cone\nof `s` at `a`, then `f' y = 0`. -/\ntheorem IsLocalMaxOn.fderivWithin_eq_zero (h : IsLocalMaxOn f s a)\n    (hy : y ‚àà posTangentConeAt s a) (hy' : -y ‚àà posTangentConeAt s a) :\n    (fderivWithin ‚Ñù f s a : E ‚Üí ‚Ñù) y = 0 := by\n  classical\n  exact if hf : DifferentiableWithinAt ‚Ñù f s a then\n    h.hasFDerivWithinAt_eq_zero hf.hasFDerivWithinAt hy hy'\n  else by rw [fderivWithin_zero_of_not_differentiableWithinAt hf]; rfl\n\n"}
{"name":"IsLocalMinOn.hasFDerivWithinAt_nonneg","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\ns : Set E\na y : E\nh : IsLocalMinOn f s a\nhf : HasFDerivWithinAt f f' s a\nhy : Membership.mem (posTangentConeAt s a) y\n‚ä¢ LE.le 0 (f' y)","decl":"/-- If `f` has a local min on `s` at `a`, `f'` is the derivative of `f` at `a` within `s`, and\n`y` belongs to the positive tangent cone of `s` at `a`, then `0 ‚â§ f' y`. -/\ntheorem IsLocalMinOn.hasFDerivWithinAt_nonneg (h : IsLocalMinOn f s a)\n    (hf : HasFDerivWithinAt f f' s a) (hy : y ‚àà posTangentConeAt s a) : 0 ‚â§ f' y := by\n  simpa using h.neg.hasFDerivWithinAt_nonpos hf.neg hy\n\n"}
{"name":"IsLocalMinOn.fderivWithin_nonneg","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\na y : E\nh : IsLocalMinOn f s a\nhy : Membership.mem (posTangentConeAt s a) y\n‚ä¢ LE.le 0 ((fderivWithin Real f s a) y)","decl":"/-- If `f` has a local min on `s` at `a` and `y` belongs to the positive tangent cone\nof `s` at `a`, then `0 ‚â§ f' y`. -/\ntheorem IsLocalMinOn.fderivWithin_nonneg (h : IsLocalMinOn f s a)\n    (hy : y ‚àà posTangentConeAt s a) : (0 : ‚Ñù) ‚â§ (fderivWithin ‚Ñù f s a : E ‚Üí ‚Ñù) y := by\n  classical\n  exact\n    if hf : DifferentiableWithinAt ‚Ñù f s a then h.hasFDerivWithinAt_nonneg hf.hasFDerivWithinAt hy\n    else by rw [fderivWithin_zero_of_not_differentiableWithinAt hf]; rfl\n\n"}
{"name":"IsLocalMinOn.hasFDerivWithinAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\ns : Set E\na y : E\nh : IsLocalMinOn f s a\nhf : HasFDerivWithinAt f f' s a\nhy : Membership.mem (posTangentConeAt s a) y\nhy' : Membership.mem (posTangentConeAt s a) (Neg.neg y)\n‚ä¢ Eq (f' y) 0","decl":"/-- If `f` has a local max on `s` at `a`, `f'` is a derivative of `f` at `a` within `s`, and\nboth `y` and `-y` belong to the positive tangent cone of `s` at `a`, then `f' y ‚â§ 0`. -/\ntheorem IsLocalMinOn.hasFDerivWithinAt_eq_zero (h : IsLocalMinOn f s a)\n    (hf : HasFDerivWithinAt f f' s a) (hy : y ‚àà posTangentConeAt s a)\n    (hy' : -y ‚àà posTangentConeAt s a) : f' y = 0 := by\n  simpa using h.neg.hasFDerivWithinAt_eq_zero hf.neg hy hy'\n\n"}
{"name":"IsLocalMinOn.fderivWithin_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\ns : Set E\na y : E\nh : IsLocalMinOn f s a\nhy : Membership.mem (posTangentConeAt s a) y\nhy' : Membership.mem (posTangentConeAt s a) (Neg.neg y)\n‚ä¢ Eq ((fderivWithin Real f s a) y) 0","decl":"/-- If `f` has a local min on `s` at `a` and both `y` and `-y` belong to the positive tangent cone\nof `s` at `a`, then `f' y = 0`. -/\ntheorem IsLocalMinOn.fderivWithin_eq_zero (h : IsLocalMinOn f s a)\n    (hy : y ‚àà posTangentConeAt s a) (hy' : -y ‚àà posTangentConeAt s a) :\n    (fderivWithin ‚Ñù f s a : E ‚Üí ‚Ñù) y = 0 := by\n  classical\n  exact if hf : DifferentiableWithinAt ‚Ñù f s a then\n    h.hasFDerivWithinAt_eq_zero hf.hasFDerivWithinAt hy hy'\n  else by rw [fderivWithin_zero_of_not_differentiableWithinAt hf]; rfl\n\n"}
{"name":"IsLocalMin.hasFDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\na : E\nh : IsLocalMin f a\nhf : HasFDerivAt f f' a\n‚ä¢ Eq f' 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local minimum equals zero. -/\ntheorem IsLocalMin.hasFDerivAt_eq_zero (h : IsLocalMin f a) (hf : HasFDerivAt f f' a) : f' = 0 := by\n  ext y\n  apply (h.on univ).hasFDerivWithinAt_eq_zero hf.hasFDerivWithinAt <;>\n      rw [posTangentConeAt_univ] <;>\n    apply mem_univ\n\n"}
{"name":"IsLocalMin.fderiv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\na : E\nh : IsLocalMin f a\n‚ä¢ Eq (fderiv Real f a) 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local minimum equals zero. -/\ntheorem IsLocalMin.fderiv_eq_zero (h : IsLocalMin f a) : fderiv ‚Ñù f a = 0 := by\n  classical\n  exact if hf : DifferentiableAt ‚Ñù f a then h.hasFDerivAt_eq_zero hf.hasFDerivAt\n  else fderiv_zero_of_not_differentiableAt hf\n\n"}
{"name":"IsLocalMax.hasFDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\na : E\nh : IsLocalMax f a\nhf : HasFDerivAt f f' a\n‚ä¢ Eq f' 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local maximum equals zero. -/\ntheorem IsLocalMax.hasFDerivAt_eq_zero (h : IsLocalMax f a) (hf : HasFDerivAt f f' a) : f' = 0 :=\n  neg_eq_zero.1 <| h.neg.hasFDerivAt_eq_zero hf.neg\n\n"}
{"name":"IsLocalMax.fderiv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\na : E\nh : IsLocalMax f a\n‚ä¢ Eq (fderiv Real f a) 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local maximum equals zero. -/\ntheorem IsLocalMax.fderiv_eq_zero (h : IsLocalMax f a) : fderiv ‚Ñù f a = 0 := by\n  classical\n  exact if hf : DifferentiableAt ‚Ñù f a then h.hasFDerivAt_eq_zero hf.hasFDerivAt\n  else fderiv_zero_of_not_differentiableAt hf\n\n"}
{"name":"IsLocalExtr.hasFDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\na : E\nh : IsLocalExtr f a\na‚úù : HasFDerivAt f f' a\n‚ä¢ Eq f' 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local extremum equals zero. -/\ntheorem IsLocalExtr.hasFDerivAt_eq_zero (h : IsLocalExtr f a) : HasFDerivAt f f' a ‚Üí f' = 0 :=\n  h.elim IsLocalMin.hasFDerivAt_eq_zero IsLocalMax.hasFDerivAt_eq_zero\n\n"}
{"name":"IsLocalExtr.fderiv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"E : Type u\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : E ‚Üí Real\na : E\nh : IsLocalExtr f a\n‚ä¢ Eq (fderiv Real f a) 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local extremum equals zero. -/\ntheorem IsLocalExtr.fderiv_eq_zero (h : IsLocalExtr f a) : fderiv ‚Ñù f a = 0 :=\n  h.elim IsLocalMin.fderiv_eq_zero IsLocalMax.fderiv_eq_zero\n\n"}
{"name":"one_mem_posTangentConeAt_iff_mem_closure","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"s : Set Real\na : Real\n‚ä¢ Iff (Membership.mem (posTangentConeAt s a) 1) (Membership.mem (closure (Inter.inter (Set.Ioi a) s)) a)","decl":"lemma one_mem_posTangentConeAt_iff_mem_closure :\n    1 ‚àà posTangentConeAt s a ‚Üî a ‚àà closure (Ioi a ‚à© s) := by\n  constructor\n  ¬∑ rintro ‚ü®c, d, hs, hc, hcd‚ü©\n    have : Tendsto (a + d ¬∑) atTop (ùìù a) := by\n      simpa only [add_zero] using tendsto_const_nhds.add\n        (tangentConeAt.lim_zero _ (tendsto_abs_atTop_atTop.comp hc) hcd)\n    apply mem_closure_of_tendsto this\n    filter_upwards [hc.eventually_gt_atTop 0, hcd.eventually (lt_mem_nhds one_pos), hs]\n      with n hcn hcdn hdn\n    simp_all\n  ¬∑ intro h\n    apply mem_posTangentConeAt_of_frequently_mem\n    rw [mem_closure_iff_frequently, ‚Üê map_add_left_nhds_zero, frequently_map] at h\n    simpa [nhdsWithin, frequently_inf_principal] using h\n\n"}
{"name":"one_mem_posTangentConeAt_iff_frequently","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"s : Set Real\na : Real\n‚ä¢ Iff (Membership.mem (posTangentConeAt s a) 1) (Filter.Frequently (fun x => Membership.mem s x) (nhdsWithin a (Set.Ioi a)))","decl":"lemma one_mem_posTangentConeAt_iff_frequently :\n    1 ‚àà posTangentConeAt s a ‚Üî ‚àÉ·∂† x in ùìù[>] a, x ‚àà s := by\n  rw [one_mem_posTangentConeAt_iff_mem_closure, mem_closure_iff_frequently,\n    frequently_nhdsWithin_iff, inter_comm]\n  simp_rw [mem_inter_iff]\n\n"}
{"name":"IsLocalMin.hasDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"f : Real ‚Üí Real\nf' a : Real\nh : IsLocalMin f a\nhf : HasDerivAt f f' a\n‚ä¢ Eq f' 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local minimum equals zero. -/\ntheorem IsLocalMin.hasDerivAt_eq_zero (h : IsLocalMin f a) (hf : HasDerivAt f f' a) : f' = 0 := by\n  simpa using DFunLike.congr_fun (h.hasFDerivAt_eq_zero (hasDerivAt_iff_hasFDerivAt.1 hf)) 1\n\n"}
{"name":"IsLocalMin.deriv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"f : Real ‚Üí Real\na : Real\nh : IsLocalMin f a\n‚ä¢ Eq (deriv f a) 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local minimum equals zero. -/\ntheorem IsLocalMin.deriv_eq_zero (h : IsLocalMin f a) : deriv f a = 0 := by\n  classical\n  exact if hf : DifferentiableAt ‚Ñù f a then h.hasDerivAt_eq_zero hf.hasDerivAt\n  else deriv_zero_of_not_differentiableAt hf\n\n"}
{"name":"IsLocalMax.hasDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"f : Real ‚Üí Real\nf' a : Real\nh : IsLocalMax f a\nhf : HasDerivAt f f' a\n‚ä¢ Eq f' 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local maximum equals zero. -/\ntheorem IsLocalMax.hasDerivAt_eq_zero (h : IsLocalMax f a) (hf : HasDerivAt f f' a) : f' = 0 :=\n  neg_eq_zero.1 <| h.neg.hasDerivAt_eq_zero hf.neg\n\n"}
{"name":"IsLocalMax.deriv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"f : Real ‚Üí Real\na : Real\nh : IsLocalMax f a\n‚ä¢ Eq (deriv f a) 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local maximum equals zero. -/\ntheorem IsLocalMax.deriv_eq_zero (h : IsLocalMax f a) : deriv f a = 0 := by\n  classical\n  exact if hf : DifferentiableAt ‚Ñù f a then h.hasDerivAt_eq_zero hf.hasDerivAt\n  else deriv_zero_of_not_differentiableAt hf\n\n"}
{"name":"IsLocalExtr.hasDerivAt_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"f : Real ‚Üí Real\nf' a : Real\nh : IsLocalExtr f a\na‚úù : HasDerivAt f f' a\n‚ä¢ Eq f' 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local extremum equals zero. -/\ntheorem IsLocalExtr.hasDerivAt_eq_zero (h : IsLocalExtr f a) : HasDerivAt f f' a ‚Üí f' = 0 :=\n  h.elim IsLocalMin.hasDerivAt_eq_zero IsLocalMax.hasDerivAt_eq_zero\n\n"}
{"name":"IsLocalExtr.deriv_eq_zero","module":"Mathlib.Analysis.Calculus.LocalExtr.Basic","initialProofState":"f : Real ‚Üí Real\na : Real\nh : IsLocalExtr f a\n‚ä¢ Eq (deriv f a) 0","decl":"/-- **Fermat's Theorem**: the derivative of a function at a local extremum equals zero. -/\ntheorem IsLocalExtr.deriv_eq_zero (h : IsLocalExtr f a) : deriv f a = 0 :=\n  h.elim IsLocalMin.deriv_eq_zero IsLocalMax.deriv_eq_zero\n\n"}
