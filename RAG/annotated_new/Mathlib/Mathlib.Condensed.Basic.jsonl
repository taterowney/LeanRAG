{"name":"Condensed.id_val","module":"Mathlib.Condensed.Basic","initialProofState":"C : Type w\ninst‚úù : CategoryTheory.Category.{v, w} C\nX : Condensed C\n‚ä¢ Eq (CategoryTheory.CategoryStruct.id X).val (CategoryTheory.CategoryStruct.id X.val)","decl":"@[simp]\nlemma id_val (X : Condensed.{u} C) : (ùüô X : X ‚ü∂ X).val = ùüô _ := rfl\n\n"}
{"name":"Condensed.comp_val","module":"Mathlib.Condensed.Basic","initialProofState":"C : Type w\ninst‚úù : CategoryTheory.Category.{v, w} C\nX Y Z : Condensed C\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp f g).val (CategoryTheory.CategoryStruct.comp f.val g.val)","decl":"@[simp]\nlemma comp_val {X Y Z : Condensed.{u} C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : (f ‚â´ g).val = f.val ‚â´ g.val :=\n  rfl\n\n"}
{"name":"Condensed.hom_ext","module":"Mathlib.Condensed.Basic","initialProofState":"C : Type w\ninst‚úù : CategoryTheory.Category.{v, w} C\nX Y : Condensed C\nf g : Quiver.Hom X Y\nh : ‚àÄ (S : Opposite CompHaus), Eq (f.val.app S) (g.val.app S)\n‚ä¢ Eq f g","decl":"@[ext]\nlemma hom_ext {X Y : Condensed.{u} C} (f g : X ‚ü∂ Y) (h : ‚àÄ S, f.val.app S = g.val.app S) :\n    f = g := by\n  apply Sheaf.hom_ext\n  ext\n  exact h _\n\n"}
{"name":"Condensed.hom_ext_iff","module":"Mathlib.Condensed.Basic","initialProofState":"C : Type w\ninst‚úù : CategoryTheory.Category.{v, w} C\nX Y : Condensed C\nf g : Quiver.Hom X Y\n‚ä¢ Iff (Eq f g) (‚àÄ (S : Opposite CompHaus), Eq (f.val.app S) (g.val.app S))","decl":"@[ext]\nlemma hom_ext {X Y : Condensed.{u} C} (f g : X ‚ü∂ Y) (h : ‚àÄ S, f.val.app S = g.val.app S) :\n    f = g := by\n  apply Sheaf.hom_ext\n  ext\n  exact h _\n\n"}
{"name":"CondensedSet.hom_naturality_apply","module":"Mathlib.Condensed.Basic","initialProofState":"X Y : CondensedSet\nf : Quiver.Hom X Y\nS T : Opposite CompHaus\ng : Quiver.Hom S T\nx : X.val.obj S\n‚ä¢ Eq (f.val.app T (X.val.map g x)) (Y.val.map g (f.val.app S x))","decl":"@[simp]\nlemma hom_naturality_apply {X Y : CondensedSet.{u}} (f : X ‚ü∂ Y) {S T : CompHaus·µí·µñ} (g : S ‚ü∂ T)\n    (x : X.val.obj S) : f.val.app T (X.val.map g x) = Y.val.map g (f.val.app S x) :=\n  NatTrans.naturality_apply f.val g x\n\n"}
