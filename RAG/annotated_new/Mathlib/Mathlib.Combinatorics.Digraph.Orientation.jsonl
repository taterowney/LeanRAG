{"name":"Digraph.toSimpleGraphStrict_subgraph_toSimpleGraphInclusive","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\nG : Digraph V\n⊢ LE.le G.toSimpleGraphStrict G.toSimpleGraphInclusive","decl":"lemma toSimpleGraphStrict_subgraph_toSimpleGraphInclusive (G : Digraph V) :\n    G.toSimpleGraphStrict ≤ G.toSimpleGraphInclusive :=\n  fun _ _ h ↦ ⟨h.1, Or.inl h.2.1⟩\n\n"}
{"name":"Digraph.toSimpleGraphInclusive_mono","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\n⊢ Monotone Digraph.toSimpleGraphInclusive","decl":"@[mono]\nlemma toSimpleGraphInclusive_mono : Monotone (toSimpleGraphInclusive : _ → SimpleGraph V) := by\n  intro _ _ h₁ _ _ h₂\n  apply And.intro h₂.1\n  cases h₂.2\n  · exact Or.inl <| h₁ ‹_›\n  · exact Or.inr <| h₁ ‹_›\n\n"}
{"name":"Digraph.toSimpleGraphStrict_mono","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\n⊢ Monotone Digraph.toSimpleGraphStrict","decl":"@[mono]\nlemma toSimpleGraphStrict_mono : Monotone (toSimpleGraphStrict : _ → SimpleGraph V) :=\n  fun _ _ h₁ _ _ h₂ ↦ And.intro h₂.1 <| And.intro (h₁ h₂.2.1) (h₁ h₂.2.2)\n\n"}
{"name":"Digraph.toSimpleGraphInclusive_top","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\n⊢ Eq Top.top.toSimpleGraphInclusive Top.top","decl":"@[simp]\nlemma toSimpleGraphInclusive_top : (⊤ : Digraph V).toSimpleGraphInclusive = ⊤ := by\n  ext; exact ⟨And.left, fun h ↦ ⟨h.ne, Or.inl trivial⟩⟩\n\n"}
{"name":"Digraph.toSimpleGraphStrict_top","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\n⊢ Eq Top.top.toSimpleGraphStrict Top.top","decl":"@[simp]\nlemma toSimpleGraphStrict_top : (⊤ : Digraph V).toSimpleGraphStrict = ⊤ := by\n  ext; exact ⟨And.left, fun h ↦ ⟨h.ne, trivial, trivial⟩⟩\n\n"}
{"name":"Digraph.toSimpleGraphInclusive_bot","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\n⊢ Eq Bot.bot.toSimpleGraphInclusive Bot.bot","decl":"@[simp]\nlemma toSimpleGraphInclusive_bot : (⊥ : Digraph V).toSimpleGraphInclusive = ⊥ := by\n  ext; exact ⟨fun ⟨_, h⟩ ↦ by tauto, False.elim⟩\n\n"}
{"name":"Digraph.toSimpleGraphStrict_bot","module":"Mathlib.Combinatorics.Digraph.Orientation","initialProofState":"V : Type u_1\n⊢ Eq Bot.bot.toSimpleGraphStrict Bot.bot","decl":"@[simp]\nlemma toSimpleGraphStrict_bot : (⊥ : Digraph V).toSimpleGraphStrict = ⊥ := by\n  ext; exact ⟨fun ⟨_, h⟩ ↦ by tauto, False.elim⟩\n\n"}
