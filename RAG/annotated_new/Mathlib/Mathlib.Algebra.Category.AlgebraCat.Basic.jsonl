{"name":"AlgebraCat.coe_of","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Algebra R X\n‚ä¢ Eq (‚Üë(AlgebraCat.of R X)) X","decl":"lemma coe_of (X : Type v) [Ring X] [Algebra R X] : (of R X : Type v) = X :=\n  rfl\n\n"}
{"name":"AlgebraCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\nx y : A.Hom B\n‚ä¢ Iff (Eq x y) (Eq x.hom' y.hom')","decl":"variable {R} in\n/-- The type of morphisms in `AlgebraCat R`. -/\n@[ext]\nstructure Hom (A B : AlgebraCat.{v} R) where\n  private mk ::\n  /-- The underlying algebra map. -/\n  hom' : A ‚Üí‚Çê[R] B\n\n"}
{"name":"AlgebraCat.Hom.ext","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\nx y : A.Hom B\nhom' : Eq x.hom' y.hom'\n‚ä¢ Eq x y","decl":"variable {R} in\n/-- The type of morphisms in `AlgebraCat R`. -/\n@[ext]\nstructure Hom (A B : AlgebraCat.{v} R) where\n  private mk ::\n  /-- The underlying algebra map. -/\n  hom' : A ‚Üí‚Çê[R] B\n\n"}
{"name":"AlgebraCat.hom_id","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA : AlgebraCat R\n‚ä¢ Eq (AlgebraCat.Hom.hom (CategoryTheory.CategoryStruct.id A)) (AlgHom.id R ‚ÜëA)","decl":"@[simp]\nlemma hom_id {A : AlgebraCat.{v} R} : (ùüô A : A ‚ü∂ A).hom = AlgHom.id R A := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AlgebraCat.id_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA : AlgebraCat R\na : ‚ÜëA\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.id A)) a) a","decl":"lemma id_apply (A : AlgebraCat.{v} R) (a : A) :\n    (ùüô A : A ‚ü∂ A) a = a := by simp\n\n"}
{"name":"AlgebraCat.hom_comp","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B C : AlgebraCat R\nf : Quiver.Hom A B\ng : Quiver.Hom B C\n‚ä¢ Eq (AlgebraCat.Hom.hom (CategoryTheory.CategoryStruct.comp f g)) ((AlgebraCat.Hom.hom g).comp (AlgebraCat.Hom.hom f))","decl":"@[simp]\nlemma hom_comp {A B C : AlgebraCat.{v} R} (f : A ‚ü∂ B) (g : B ‚ü∂ C) :\n    (f ‚â´ g).hom = g.hom.comp f.hom := rfl\n\n/- Provided for rewriting. -/\n"}
{"name":"AlgebraCat.comp_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B C : AlgebraCat R\nf : Quiver.Hom A B\ng : Quiver.Hom B C\na : ‚ÜëA\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (CategoryTheory.CategoryStruct.comp f g)) a) ((CategoryTheory.ConcreteCategory.hom g) ((CategoryTheory.ConcreteCategory.hom f) a))","decl":"lemma comp_apply {A B C : AlgebraCat.{v} R} (f : A ‚ü∂ B) (g : B ‚ü∂ C) (a : A) :\n    (f ‚â´ g) a = g (f a) := by simp\n\n"}
{"name":"AlgebraCat.hom_ext","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\nf g : Quiver.Hom A B\nhf : Eq (AlgebraCat.Hom.hom f) (AlgebraCat.Hom.hom g)\n‚ä¢ Eq f g","decl":"@[ext]\nlemma hom_ext {A B : AlgebraCat.{v} R} {f g : A ‚ü∂ B} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"AlgebraCat.hom_ext_iff","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\nf g : Quiver.Hom A B\n‚ä¢ Iff (Eq f g) (Eq (AlgebraCat.Hom.hom f) (AlgebraCat.Hom.hom g))","decl":"@[ext]\nlemma hom_ext {A B : AlgebraCat.{v} R} {f g : A ‚ü∂ B} (hf : f.hom = g.hom) : f = g :=\n  Hom.ext hf\n\n"}
{"name":"AlgebraCat.hom_ofHom","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Algebra R X\ninst‚úù¬π : Ring Y\ninst‚úù : Algebra R Y\nf : AlgHom R X Y\n‚ä¢ Eq (AlgebraCat.Hom.hom (AlgebraCat.ofHom f)) f","decl":"@[simp]\nlemma hom_ofHom {R : Type u} [CommRing R] {X Y : Type v} [Ring X] [Algebra R X] [Ring Y]\n    [Algebra R Y] (f : X ‚Üí‚Çê[R] Y) : (ofHom f).hom = f := rfl\n\n"}
{"name":"AlgebraCat.ofHom_hom","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\nf : Quiver.Hom A B\n‚ä¢ Eq (AlgebraCat.ofHom (AlgebraCat.Hom.hom f)) f","decl":"@[simp]\nlemma ofHom_hom {A B : AlgebraCat.{v} R} (f : A ‚ü∂ B) :\n    ofHom (Hom.hom f) = f := rfl\n\n"}
{"name":"AlgebraCat.ofHom_id","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : Ring X\ninst‚úù : Algebra R X\n‚ä¢ Eq (AlgebraCat.ofHom (AlgHom.id R X)) (CategoryTheory.CategoryStruct.id (AlgebraCat.of R X))","decl":"@[simp]\nlemma ofHom_id {X : Type v} [Ring X] [Algebra R X] : ofHom (AlgHom.id R X) = ùüô (of R X) := rfl\n\n"}
{"name":"AlgebraCat.ofHom_comp","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å∂ : CommRing R\nX Y Z : Type v\ninst‚úù‚Åµ : Ring X\ninst‚úù‚Å¥ : Ring Y\ninst‚úù¬≥ : Ring Z\ninst‚úù¬≤ : Algebra R X\ninst‚úù¬π : Algebra R Y\ninst‚úù : Algebra R Z\nf : AlgHom R X Y\ng : AlgHom R Y Z\n‚ä¢ Eq (AlgebraCat.ofHom (g.comp f)) (CategoryTheory.CategoryStruct.comp (AlgebraCat.ofHom f) (AlgebraCat.ofHom g))","decl":"@[simp]\nlemma ofHom_comp {X Y Z : Type v} [Ring X] [Ring Y] [Ring Z] [Algebra R X] [Algebra R Y]\n    [Algebra R Z] (f : X ‚Üí‚Çê[R] Y) (g : Y ‚Üí‚Çê[R] Z) :\n    ofHom (g.comp f) = ofHom f ‚â´ ofHom g :=\n  rfl\n\n"}
{"name":"AlgebraCat.ofHom_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Algebra R X\ninst‚úù¬π : Ring Y\ninst‚úù : Algebra R Y\nf : AlgHom R X Y\nx : X\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (AlgebraCat.ofHom f)) x) (f x)","decl":"lemma ofHom_apply {R : Type u} [CommRing R] {X Y : Type v} [Ring X] [Algebra R X] [Ring Y]\n    [Algebra R Y] (f : X ‚Üí‚Çê[R] Y) (x : X) : ofHom f x = f x := rfl\n\n"}
{"name":"AlgebraCat.inv_hom_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\ne : CategoryTheory.Iso A B\nx : ‚ÜëA\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.inv) ((CategoryTheory.ConcreteCategory.hom e.hom) x)) x","decl":"@[simp]\nlemma inv_hom_apply {A B : AlgebraCat.{v} R} (e : A ‚âÖ B) (x : A) : e.inv (e.hom x) = x := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"AlgebraCat.hom_inv_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\ne : CategoryTheory.Iso A B\nx : ‚ÜëB\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom e.hom) ((CategoryTheory.ConcreteCategory.hom e.inv) x)) x","decl":"@[simp]\nlemma hom_inv_apply {A B : AlgebraCat.{v} R} (e : A ‚âÖ B) (x : B) : e.hom (e.inv x) = x := by\n  rw [‚Üê comp_apply]\n  simp\n\n"}
{"name":"AlgebraCat.forget_obj","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA : AlgebraCat R\n‚ä¢ Eq ((CategoryTheory.forget (AlgebraCat R)).obj A) ‚ÜëA","decl":"lemma forget_obj {A : AlgebraCat.{v} R} : (forget (AlgebraCat.{v} R)).obj A = A := rfl\n\n"}
{"name":"AlgebraCat.forget_map","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nA B : AlgebraCat R\nf : Quiver.Hom A B\n‚ä¢ Eq ((CategoryTheory.forget (AlgebraCat R)).map f) ‚áë(CategoryTheory.ConcreteCategory.hom f)","decl":"lemma forget_map {A B : AlgebraCat.{v} R} (f : A ‚ü∂ B) :\n    (forget (AlgebraCat.{v} R)).map f = f :=\n  rfl\n\n"}
{"name":"AlgebraCat.forget‚ÇÇ_module_obj","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : AlgebraCat R\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (AlgebraCat R) (ModuleCat R)).obj X) (ModuleCat.of R ‚ÜëX)","decl":"@[simp]\nlemma forget‚ÇÇ_module_obj (X : AlgebraCat.{v} R) :\n    (forget‚ÇÇ (AlgebraCat.{v} R) (ModuleCat.{v} R)).obj X = ModuleCat.of R X :=\n  rfl\n\n"}
{"name":"AlgebraCat.forget‚ÇÇ_module_map","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : AlgebraCat R\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (AlgebraCat R) (ModuleCat R)).map f) (ModuleCat.ofHom (AlgebraCat.Hom.hom f).toLinearMap)","decl":"@[simp]\nlemma forget‚ÇÇ_module_map {X Y : AlgebraCat.{v} R} (f : X ‚ü∂ Y) :\n    (forget‚ÇÇ (AlgebraCat.{v} R) (ModuleCat.{v} R)).map f = ModuleCat.ofHom f.hom.toLinearMap :=\n  rfl\n\n"}
{"name":"AlgebraCat.ofSelfIso_hom","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : AlgebraCat R\n‚ä¢ Eq M.ofSelfIso.hom (CategoryTheory.CategoryStruct.id M)","decl":"variable {R} in\n/-- Forgetting to the underlying type and then building the bundled object returns the original\nalgebra. -/\n@[simps]\ndef ofSelfIso (M : AlgebraCat.{v} R) : AlgebraCat.of R M ‚âÖ M where\n  hom := ùüô M\n  inv := ùüô M\n\n"}
{"name":"AlgebraCat.ofSelfIso_inv","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : AlgebraCat R\n‚ä¢ Eq M.ofSelfIso.inv (CategoryTheory.CategoryStruct.id M)","decl":"variable {R} in\n/-- Forgetting to the underlying type and then building the bundled object returns the original\nalgebra. -/\n@[simps]\ndef ofSelfIso (M : AlgebraCat.{v} R) : AlgebraCat.of R M ‚âÖ M where\n  hom := ùüô M\n  inv := ùüô M\n\n"}
{"name":"AlgebraCat.free_map","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚úù Y‚úù : Type u\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((AlgebraCat.free R).map f) (AlgebraCat.ofHom ((FreeAlgebra.lift R) (Function.comp (FreeAlgebra.Œπ R) f)))","decl":"/-- The \"free algebra\" functor, sending a type `S` to the free algebra on `S`. -/\n@[simps! obj map]\ndef free : Type u ‚•§ AlgebraCat.{u} R where\n  obj S := of R (FreeAlgebra R S)\n  map f := ofHom <| FreeAlgebra.lift _ <| FreeAlgebra.Œπ _ ‚àò f\n\n"}
{"name":"AlgebraCat.free_obj","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nS : Type u\n‚ä¢ Eq ((AlgebraCat.free R).obj S) (AlgebraCat.of R (FreeAlgebra R S))","decl":"/-- The \"free algebra\" functor, sending a type `S` to the free algebra on `S`. -/\n@[simps! obj map]\ndef free : Type u ‚•§ AlgebraCat.{u} R where\n  obj S := of R (FreeAlgebra R S)\n  map f := ofHom <| FreeAlgebra.lift _ <| FreeAlgebra.Œπ _ ‚àò f\n\n"}
{"name":"AlgebraCat.instIsRightAdjointForget","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ (CategoryTheory.forget (AlgebraCat R)).IsRightAdjoint","decl":"instance : (forget (AlgebraCat.{u} R)).IsRightAdjoint := (adj R).isRightAdjoint\n\n"}
{"name":"AlgEquiv.toAlgebraIso_hom","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚ÇÅ X‚ÇÇ : Type u\ng‚ÇÅ : Ring X‚ÇÅ\ng‚ÇÇ : Ring X‚ÇÇ\nm‚ÇÅ : Algebra R X‚ÇÅ\nm‚ÇÇ : Algebra R X‚ÇÇ\ne : AlgEquiv R X‚ÇÅ X‚ÇÇ\n‚ä¢ Eq e.toAlgebraIso.hom (AlgebraCat.ofHom ‚Üëe)","decl":"/-- Build an isomorphism in the category `AlgebraCat R` from a `AlgEquiv` between `Algebra`s. -/\n@[simps]\ndef AlgEquiv.toAlgebraIso {g‚ÇÅ : Ring X‚ÇÅ} {g‚ÇÇ : Ring X‚ÇÇ} {m‚ÇÅ : Algebra R X‚ÇÅ} {m‚ÇÇ : Algebra R X‚ÇÇ}\n    (e : X‚ÇÅ ‚âÉ‚Çê[R] X‚ÇÇ) : AlgebraCat.of R X‚ÇÅ ‚âÖ AlgebraCat.of R X‚ÇÇ where\n  hom := AlgebraCat.ofHom (e : X‚ÇÅ ‚Üí‚Çê[R] X‚ÇÇ)\n  inv := AlgebraCat.ofHom (e.symm : X‚ÇÇ ‚Üí‚Çê[R] X‚ÇÅ)\n\n"}
{"name":"AlgEquiv.toAlgebraIso_inv","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX‚ÇÅ X‚ÇÇ : Type u\ng‚ÇÅ : Ring X‚ÇÅ\ng‚ÇÇ : Ring X‚ÇÇ\nm‚ÇÅ : Algebra R X‚ÇÅ\nm‚ÇÇ : Algebra R X‚ÇÇ\ne : AlgEquiv R X‚ÇÅ X‚ÇÇ\n‚ä¢ Eq e.toAlgebraIso.inv (AlgebraCat.ofHom ‚Üëe.symm)","decl":"/-- Build an isomorphism in the category `AlgebraCat R` from a `AlgEquiv` between `Algebra`s. -/\n@[simps]\ndef AlgEquiv.toAlgebraIso {g‚ÇÅ : Ring X‚ÇÅ} {g‚ÇÇ : Ring X‚ÇÇ} {m‚ÇÅ : Algebra R X‚ÇÅ} {m‚ÇÇ : Algebra R X‚ÇÇ}\n    (e : X‚ÇÅ ‚âÉ‚Çê[R] X‚ÇÇ) : AlgebraCat.of R X‚ÇÅ ‚âÖ AlgebraCat.of R X‚ÇÇ where\n  hom := AlgebraCat.ofHom (e : X‚ÇÅ ‚Üí‚Çê[R] X‚ÇÇ)\n  inv := AlgebraCat.ofHom (e.symm : X‚ÇÇ ‚Üí‚Çê[R] X‚ÇÅ)\n\n"}
{"name":"CategoryTheory.Iso.toAlgEquiv_symm_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : AlgebraCat R\ni : CategoryTheory.Iso X Y\na : ‚ÜëY\n‚ä¢ Eq (i.toAlgEquiv.symm a) ((CategoryTheory.ConcreteCategory.hom i.inv) a)","decl":"/-- Build a `AlgEquiv` from an isomorphism in the category `AlgebraCat R`. -/\n@[simps]\ndef toAlgEquiv {X Y : AlgebraCat R} (i : X ‚âÖ Y) : X ‚âÉ‚Çê[R] Y :=\n  { i.hom.hom with\n    toFun := i.hom\n    invFun := i.inv\n    left_inv := fun x ‚Ü¶ by simp\n    right_inv := fun x ‚Ü¶ by simp }\n\n"}
{"name":"CategoryTheory.Iso.toAlgEquiv_apply","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : AlgebraCat R\ni : CategoryTheory.Iso X Y\na : ‚ÜëX\n‚ä¢ Eq (i.toAlgEquiv a) ((CategoryTheory.ConcreteCategory.hom i.hom) a)","decl":"/-- Build a `AlgEquiv` from an isomorphism in the category `AlgebraCat R`. -/\n@[simps]\ndef toAlgEquiv {X Y : AlgebraCat R} (i : X ‚âÖ Y) : X ‚âÉ‚Çê[R] Y :=\n  { i.hom.hom with\n    toFun := i.hom\n    invFun := i.inv\n    left_inv := fun x ‚Ü¶ by simp\n    right_inv := fun x ‚Ü¶ by simp }\n\n"}
{"name":"algEquivIsoAlgebraIso_hom","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type u\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Ring Y\ninst‚úù¬π : Algebra R X\ninst‚úù : Algebra R Y\ne : AlgEquiv R X Y\n‚ä¢ Eq (algEquivIsoAlgebraIso.hom e) e.toAlgebraIso","decl":"/-- Algebra equivalences between `Algebra`s are the same as (isomorphic to) isomorphisms in\n`AlgebraCat`. -/\n@[simps]\ndef algEquivIsoAlgebraIso {X Y : Type u} [Ring X] [Ring Y] [Algebra R X] [Algebra R Y] :\n    (X ‚âÉ‚Çê[R] Y) ‚âÖ AlgebraCat.of R X ‚âÖ AlgebraCat.of R Y where\n  hom e := e.toAlgebraIso\n  inv i := i.toAlgEquiv\n\n"}
{"name":"algEquivIsoAlgebraIso_inv","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type u\ninst‚úù¬≥ : Ring X\ninst‚úù¬≤ : Ring Y\ninst‚úù¬π : Algebra R X\ninst‚úù : Algebra R Y\ni : CategoryTheory.Iso (AlgebraCat.of R X) (AlgebraCat.of R Y)\n‚ä¢ Eq (algEquivIsoAlgebraIso.inv i) i.toAlgEquiv","decl":"/-- Algebra equivalences between `Algebra`s are the same as (isomorphic to) isomorphisms in\n`AlgebraCat`. -/\n@[simps]\ndef algEquivIsoAlgebraIso {X Y : Type u} [Ring X] [Ring Y] [Algebra R X] [Algebra R Y] :\n    (X ‚âÉ‚Çê[R] Y) ‚âÖ AlgebraCat.of R X ‚âÖ AlgebraCat.of R Y where\n  hom e := e.toAlgebraIso\n  inv i := i.toAlgEquiv\n\n"}
{"name":"AlgebraCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.AlgebraCat.Basic","initialProofState":"R : Type u\ninst‚úù : CommRing R\n‚ä¢ (CategoryTheory.forget (AlgebraCat R)).ReflectsIsomorphisms","decl":"instance AlgebraCat.forget_reflects_isos : (forget (AlgebraCat.{u} R)).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget (AlgebraCat.{u} R)).map f)\n    let e : X ‚âÉ‚Çê[R] Y := { f.hom, i.toEquiv with }\n    exact e.toAlgebraIso.isIso_hom\n"}
