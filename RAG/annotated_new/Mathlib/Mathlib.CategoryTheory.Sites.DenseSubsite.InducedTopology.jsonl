{"name":"CategoryTheory.Functor.LocallyCoverDense.functorPushforward_functorPullback_mem","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\nself : G.LocallyCoverDense K\nX : C\nT : ‚Üë(K (G.obj X))\n‚ä¢ Membership.mem (K (G.obj X)) (CategoryTheory.Sieve.functorPushforward G (CategoryTheory.Sieve.functorPullback G ‚ÜëT))","decl":"/-- We say that a functor `C ‚•§ D` into a site is \"locally dense\" if\nfor each covering sieve `T` in `D`, `T ‚à© mor(C)` generates a covering sieve in `D`.\n-/\nclass LocallyCoverDense : Prop where\n  functorPushforward_functorPullback_mem :\n    ‚àÄ ‚¶ÉX : C‚¶Ñ (T : K (G.obj X)), (T.val.functorPullback G).functorPushforward G ‚àà K (G.obj X)\n\n"}
{"name":"CategoryTheory.Functor.pushforward_cover_iff_cover_pullback","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\ninst‚úù¬≤ : G.LocallyCoverDense K\ninst‚úù¬π : G.Full\ninst‚úù : G.Faithful\nX : C\nS : CategoryTheory.Sieve X\n‚ä¢ Iff (K (G.obj X) (CategoryTheory.Sieve.functorPushforward G S)) (Exists fun T => Eq (CategoryTheory.Sieve.functorPullback G ‚ÜëT) S)","decl":"theorem pushforward_cover_iff_cover_pullback [G.Full] [G.Faithful] {X : C} (S : Sieve X) :\n    K _ (S.functorPushforward G) ‚Üî ‚àÉ T : K (G.obj X), T.val.functorPullback G = S := by\n  constructor\n  ¬∑ intro hS\n    exact ‚ü®‚ü®_, hS‚ü©, (Sieve.fullyFaithfulFunctorGaloisCoinsertion G X).u_l_eq S‚ü©\n  ¬∑ rintro ‚ü®T, rfl‚ü©\n    exact LocallyCoverDense.functorPushforward_functorPullback_mem T\n\n"}
{"name":"CategoryTheory.Functor.inducedTopology_sieves","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\nx‚úù : C\nS : CategoryTheory.Sieve x‚úù\n‚ä¢ Eq ((G.inducedTopology K).sieves x‚úù S) (K (G.obj x‚úù) (CategoryTheory.Sieve.functorPushforward G S))","decl":"/-- If a functor `G : C ‚•§ (D, K)` is fully faithful and locally dense,\nthen the set `{ T ‚à© mor(C) | T ‚àà K }` is a grothendieck topology of `C`.\n-/\n@[simps]\ndef inducedTopology : GrothendieckTopology C where\n  sieves _ S := K _ (S.functorPushforward G)\n  top_mem' X := by\n    change K _ _\n    rw [Sieve.functorPushforward_top]\n    exact K.top_mem _\n  pullback_stable' X Y S iYX hS := by\n    apply K.transitive (LocallyCoverDense.functorPushforward_functorPullback_mem\n      ‚ü®_, K.pullback_stable (G.map iYX) hS‚ü©)\n    rintro Z _ ‚ü®U, iUY, iZU, ‚ü®W, iWX, iUW, hiWX, e‚ÇÅ‚ü©, rfl‚ü©\n    rw [Sieve.pullback_comp]\n    apply K.pullback_stable\n    clear iZU Z\n    apply K.transitive (G.functorPushforward_imageSieve_mem _ iUW)\n    rintro Z _ ‚ü®U‚ÇÅ, iU‚ÇÅU, iZU‚ÇÅ, ‚ü®iU‚ÇÅW, e‚ÇÇ‚ü©, rfl‚ü©\n    rw [Sieve.pullback_comp]\n    apply K.pullback_stable\n    clear iZU‚ÇÅ Z\n    apply K.superset_covering ?_ (G.functorPushforward_equalizer_mem _\n      (iU‚ÇÅU ‚â´ iUY ‚â´ iYX) (iU‚ÇÅW ‚â´ iWX) (by simp [e‚ÇÅ, e‚ÇÇ]))\n    rintro Z _ ‚ü®U‚ÇÇ, iU‚ÇÇU‚ÇÅ, iZU‚ÇÇ, e‚ÇÉ : _ = _, rfl‚ü©\n    refine ‚ü®_, iU‚ÇÇU‚ÇÅ ‚â´ iU‚ÇÅU ‚â´ iUY, iZU‚ÇÇ, ?_, by simp‚ü©\n    simpa [e‚ÇÉ] using S.downward_closed hiWX (iU‚ÇÇU‚ÇÅ ‚â´ iU‚ÇÅW)\n  transitive' X S hS S' H' := by\n    apply K.transitive hS\n    rintro Y _ ‚ü®Z, g, i, hg, rfl‚ü©\n    rw [Sieve.pullback_comp]\n    apply K.pullback_stable i\n    refine K.superset_covering ?_ (H' hg)\n    rintro W _ ‚ü®Z', g', i', hg, rfl‚ü©\n    refine ‚ü®Z', g' ‚â´ g , i', hg, ?_‚ü©\n    simp\n\n"}
{"name":"CategoryTheory.Functor.mem_inducedTopology_sieves_iff","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\ninst‚úù¬≤ : G.LocallyCoverDense K\ninst‚úù¬π : G.IsLocallyFull K\ninst‚úù : G.IsLocallyFaithful K\nX : C\nS : CategoryTheory.Sieve X\n‚ä¢ Iff (Membership.mem ((G.inducedTopology K) X) S) (Membership.mem (K (G.obj X)) (CategoryTheory.Sieve.functorPushforward G S))","decl":"@[simp]\nlemma mem_inducedTopology_sieves_iff {X : C} (S : Sieve X) :\n    S ‚àà (G.inducedTopology K) X ‚Üî (S.functorPushforward G) ‚àà K (G.obj X) :=\n  Iff.rfl\n\n"}
{"name":"CategoryTheory.Functor.inducedTopology_isCocontinuous","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\ninst‚úù : G.LocallyCoverDense K\n‚ä¢ G.IsCocontinuous (G.inducedTopology K) K","decl":"/-- `G` is cover-lifting wrt the induced topology. -/\ninstance inducedTopology_isCocontinuous : G.IsCocontinuous (G.inducedTopology K) K :=\n  ‚ü®@fun _ S hS => LocallyCoverDense.functorPushforward_functorPullback_mem ‚ü®S, hS‚ü©‚ü©\n\n"}
{"name":"CategoryTheory.Functor.inducedTopology_coverPreserving","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\ninst‚úù¬≤ : G.LocallyCoverDense K\ninst‚úù¬π : G.IsLocallyFull K\ninst‚úù : G.IsLocallyFaithful K\n‚ä¢ CategoryTheory.CoverPreserving (G.inducedTopology K) K G","decl":"/-- `G` is cover-preserving wrt the induced topology. -/\ntheorem inducedTopology_coverPreserving : CoverPreserving (G.inducedTopology K) K G :=\n  ‚ü®@fun _ _ hS => hS‚ü©\n\n"}
{"name":"CategoryTheory.Functor.locallyCoverDense_of_isCoverDense","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\ninst‚úù¬π : G.IsLocallyFull K\ninst‚úù : G.IsCoverDense K\n‚ä¢ G.LocallyCoverDense K","decl":"instance (priority := 900) locallyCoverDense_of_isCoverDense [G.IsCoverDense K] :\n    G.LocallyCoverDense K where\n  functorPushforward_functorPullback_mem _ _ :=\n    IsCoverDense.functorPullback_pushforward_covering _\n\n"}
{"name":"CategoryTheory.Functor.instIsDenseSubsiteInducedTopologyOfIsCoverDense","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_2} D\nG : CategoryTheory.Functor C D\nK : CategoryTheory.GrothendieckTopology D\ninst‚úù : G.IsCoverDense K\n‚ä¢ CategoryTheory.Functor.IsDenseSubsite (G.inducedTopology K) K G","decl":"instance (priority := 900) [G.IsCoverDense K] : G.IsDenseSubsite (G.inducedTopology K) K where\n  functorPushforward_mem_iff := Iff.rfl\n\n"}
{"name":"CategoryTheory.Functor.over_forget_locallyCoverDense","module":"Mathlib.CategoryTheory.Sites.DenseSubsite.InducedTopology","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nJ : CategoryTheory.GrothendieckTopology C\nX : C\n‚ä¢ (CategoryTheory.Over.forget X).LocallyCoverDense J","decl":"instance over_forget_locallyCoverDense (X : C) : (Over.forget X).LocallyCoverDense J where\n  functorPushforward_functorPullback_mem Y T := by\n    convert T.property\n    ext Z f\n    constructor\n    ¬∑ rintro ‚ü®_, _, g', hg, rfl‚ü©\n      exact T.val.downward_closed hg g'\n    ¬∑ intro hf\n      exact ‚ü®Over.mk (f ‚â´ Y.hom), Over.homMk f, ùüô _, hf, (Category.id_comp _).symm‚ü©\n\n"}
