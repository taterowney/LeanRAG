{"name":"Multiset.IsDershowitzMannaLT.trans","module":"Mathlib.Data.Multiset.DershowitzManna","initialProofState":"α : Type u_1\ninst✝ : Preorder α\nM N P : Multiset α\na✝¹ : M.IsDershowitzMannaLT N\na✝ : N.IsDershowitzMannaLT P\n⊢ M.IsDershowitzMannaLT P","decl":"/-- `IsDershowitzMannaLT` is transitive. -/\nlemma IsDershowitzMannaLT.trans :\n    IsDershowitzMannaLT M N → IsDershowitzMannaLT N P → IsDershowitzMannaLT M P := by\n  classical\n  rintro ⟨X₁, Y₁, Z₁, -, rfl, rfl, hYZ₁⟩ ⟨X₂, Y₂, Z₂, hZ₂, hXZXY, rfl, hYZ₂⟩\n  rw [add_comm X₁,add_comm X₂] at hXZXY\n  refine ⟨X₁ ∩ X₂, Y₁ + (Y₂ - Z₁), Z₂ + (Z₁ - Y₂), ?_, ?_, ?_, ?_⟩\n  · simpa [-not_and, not_and_or] using .inl hZ₂\n  · rwa [← add_assoc, add_right_comm, inter_add_sub_of_add_eq_add]\n  · rw [← add_assoc, add_right_comm, add_left_inj, inter_comm, inter_add_sub_of_add_eq_add]\n    rwa [eq_comm]\n  simp only [mem_add, or_imp, forall_and]\n  refine ⟨fun y hy ↦ ?_, fun y hy ↦ ?_⟩\n  · obtain ⟨z, hz, hyz⟩ := hYZ₁ y hy\n    by_cases z_in : z ∈ Y₂\n    · obtain ⟨w, hw, hzw⟩ := hYZ₂ z z_in\n      exact ⟨w, .inl hw, hyz.trans hzw⟩\n    · exact ⟨z, .inr <| by rwa [mem_sub, count_eq_zero_of_not_mem z_in, count_pos], hyz⟩\n  · obtain ⟨z, hz, hyz⟩ := hYZ₂ y <| mem_of_le (Multiset.sub_le_self ..) hy\n    exact ⟨z, .inl hz, hyz⟩\n\n"}
{"name":"Multiset.wellFounded_isDershowitzMannaLT","module":"Mathlib.Data.Multiset.DershowitzManna","initialProofState":"α : Type u_1\ninst✝¹ : Preorder α\ninst✝ : WellFoundedLT α\n⊢ WellFounded Multiset.IsDershowitzMannaLT","decl":"/-- Over a well-founded order, the Dershowitz-Manna order on multisets is well-founded. -/\ntheorem wellFounded_isDershowitzMannaLT [WellFoundedLT α] :\n    WellFounded (IsDershowitzMannaLT : Multiset α → Multiset α → Prop) := by\n  rw [← transGen_oneStep_eq_isDershowitzMannaLT]\n  exact isDershowitzMannaLT_singleton_wf.transGen\n\n"}
