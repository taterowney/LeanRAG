{"name":"RestrictScalars.isScalarTower","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁴ : Semiring S\ninst✝³ : AddCommMonoid M\ninst✝² : CommSemiring R\ninst✝¹ : Algebra R S\ninst✝ : Module S M\n⊢ IsScalarTower R S (RestrictScalars R S M)","decl":"/-- This instance is only relevant when `RestrictScalars.moduleOrig` is available as an instance.\n-/\ninstance RestrictScalars.isScalarTower [Module S M] : IsScalarTower R S (RestrictScalars R S M) :=\n  ⟨fun r S M ↦ by\n    rw [Algebra.smul_def, mul_smul]\n    rfl⟩\n\n"}
{"name":"RestrictScalars.isCentralScalar","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁶ : Semiring S\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : CommSemiring R\ninst✝³ : Algebra R S\ninst✝² : Module S M\ninst✝¹ : Module (MulOpposite S) M\ninst✝ : IsCentralScalar S M\n⊢ IsCentralScalar R (RestrictScalars R S M)","decl":"instance RestrictScalars.isCentralScalar [Module S M] [Module Sᵐᵒᵖ M] [IsCentralScalar S M] :\n    IsCentralScalar R (RestrictScalars R S M) where\n  op_smul_eq_smul r _x := (op_smul_eq_smul (algebraMap R S r) (_ : M) :)\n\n"}
{"name":"RestrictScalars.smul_def","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁴ : AddCommMonoid M\ninst✝³ : CommSemiring R\ninst✝² : Semiring S\ninst✝¹ : Algebra R S\ninst✝ : Module S M\nc : R\nx : RestrictScalars R S M\n⊢ Eq (HSMul.hSMul c x) ((RestrictScalars.addEquiv R S M).symm (HSMul.hSMul ((algebraMap R S) c) ((RestrictScalars.addEquiv R S M) x)))","decl":"theorem RestrictScalars.smul_def (c : R) (x : RestrictScalars R S M) :\n    c • x = (RestrictScalars.addEquiv R S M).symm\n      (algebraMap R S c • RestrictScalars.addEquiv R S M x) :=\n  rfl\n\n"}
{"name":"RestrictScalars.addEquiv_map_smul","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁴ : AddCommMonoid M\ninst✝³ : CommSemiring R\ninst✝² : Semiring S\ninst✝¹ : Algebra R S\ninst✝ : Module S M\nc : R\nx : RestrictScalars R S M\n⊢ Eq ((RestrictScalars.addEquiv R S M) (HSMul.hSMul c x)) (HSMul.hSMul ((algebraMap R S) c) ((RestrictScalars.addEquiv R S M) x))","decl":"@[simp]\ntheorem RestrictScalars.addEquiv_map_smul (c : R) (x : RestrictScalars R S M) :\n    RestrictScalars.addEquiv R S M (c • x) = algebraMap R S c • RestrictScalars.addEquiv R S M x :=\n  rfl\n\n"}
{"name":"RestrictScalars.addEquiv_symm_map_algebraMap_smul","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁴ : AddCommMonoid M\ninst✝³ : CommSemiring R\ninst✝² : Semiring S\ninst✝¹ : Algebra R S\ninst✝ : Module S M\nr : R\nx : M\n⊢ Eq ((RestrictScalars.addEquiv R S M).symm (HSMul.hSMul ((algebraMap R S) r) x)) (HSMul.hSMul r ((RestrictScalars.addEquiv R S M).symm x))","decl":"theorem RestrictScalars.addEquiv_symm_map_algebraMap_smul (r : R) (x : M) :\n    (RestrictScalars.addEquiv R S M).symm (algebraMap R S r • x) =\n      r • (RestrictScalars.addEquiv R S M).symm x :=\n  rfl\n\n"}
{"name":"RestrictScalars.addEquiv_symm_map_smul_smul","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁴ : AddCommMonoid M\ninst✝³ : CommSemiring R\ninst✝² : Semiring S\ninst✝¹ : Algebra R S\ninst✝ : Module S M\nr : R\ns : S\nx : M\n⊢ Eq ((RestrictScalars.addEquiv R S M).symm (HSMul.hSMul (HSMul.hSMul r s) x)) (HSMul.hSMul r ((RestrictScalars.addEquiv R S M).symm (HSMul.hSMul s x)))","decl":"theorem RestrictScalars.addEquiv_symm_map_smul_smul (r : R) (s : S) (x : M) :\n    (RestrictScalars.addEquiv R S M).symm ((r • s) • x) =\n      r • (RestrictScalars.addEquiv R S M).symm (s • x) := by\n  rw [Algebra.smul_def, mul_smul]\n  rfl\n\n"}
{"name":"RestrictScalars.lsmul_apply_apply","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\ninst✝⁴ : AddCommMonoid M\ninst✝³ : CommSemiring R\ninst✝² : Semiring S\ninst✝¹ : Algebra R S\ninst✝ : Module S M\ns : S\nx : RestrictScalars R S M\n⊢ Eq (((RestrictScalars.lsmul R S M) s) x) ((RestrictScalars.addEquiv R S M).symm (HSMul.hSMul s ((RestrictScalars.addEquiv R S M) x)))","decl":"theorem RestrictScalars.lsmul_apply_apply (s : S) (x : RestrictScalars R S M) :\n    RestrictScalars.lsmul R S M s x =\n      (RestrictScalars.addEquiv R S M).symm (s • RestrictScalars.addEquiv R S M x) :=\n  rfl\n\n"}
{"name":"RestrictScalars.ringEquiv_map_smul","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nA : Type u_4\ninst✝⁴ : Semiring A\ninst✝³ : CommSemiring S\ninst✝² : Algebra S A\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R S\nr : R\nx : RestrictScalars R S A\n⊢ Eq ((RestrictScalars.ringEquiv R S A) (HSMul.hSMul r x)) (HSMul.hSMul ((algebraMap R S) r) ((RestrictScalars.ringEquiv R S A) x))","decl":"@[simp]\ntheorem RestrictScalars.ringEquiv_map_smul (r : R) (x : RestrictScalars R S A) :\n    RestrictScalars.ringEquiv R S A (r • x) =\n      algebraMap R S r • RestrictScalars.ringEquiv R S A x :=\n  rfl\n\n"}
{"name":"RestrictScalars.ringEquiv_algebraMap","module":"Mathlib.Algebra.Algebra.RestrictScalars","initialProofState":"R : Type u_1\nS : Type u_2\nA : Type u_4\ninst✝⁴ : Semiring A\ninst✝³ : CommSemiring S\ninst✝² : Algebra S A\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R S\nr : R\n⊢ Eq ((RestrictScalars.ringEquiv R S A) ((algebraMap R (RestrictScalars R S A)) r)) ((algebraMap S A) ((algebraMap R S) r))","decl":"@[simp]\ntheorem RestrictScalars.ringEquiv_algebraMap (r : R) :\n    RestrictScalars.ringEquiv R S A (algebraMap R (RestrictScalars R S A) r) =\n      algebraMap S A (algebraMap R S r) :=\n  rfl\n\n"}
