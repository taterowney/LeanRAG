{"name":"BaireSpace.of_t2Space_locallyCompactSpace","module":"Mathlib.Topology.Baire.LocallyCompactRegular","initialProofState":"X : Type u_1\ninst✝² : TopologicalSpace X\ninst✝¹ : R1Space X\ninst✝ : LocallyCompactSpace X\n⊢ BaireSpace X","decl":"/-- **Second Baire theorem**: locally compact R₁ spaces are Baire. -/\ninstance (priority := 100) BaireSpace.of_t2Space_locallyCompactSpace {X : Type*}\n    [TopologicalSpace X] [R1Space X] [LocallyCompactSpace X] : BaireSpace X := by\n  constructor\n  intro f ho hd\n  /- To prove that an intersection of open dense subsets is dense, prove that its intersection\n    with any open neighbourhood `U` is dense. Define recursively a decreasing sequence `K` of\n    compact neighbourhoods: start with some compact neighbourhood inside `U`, then at each step,\n    take its interior, intersect with `f n`, then choose a compact neighbourhood inside the\n    intersection. -/\n  rw [dense_iff_inter_open]\n  intro U U_open U_nonempty\n  -- Choose an antitone sequence of positive compacts such that `closure (K 0) ⊆ U`\n  -- and `closure (K (n + 1)) ⊆ f n` for all `n`\n  obtain ⟨K, hK_anti, hKf, hKU⟩ : ∃ K : ℕ → PositiveCompacts X,\n      (∀ n, K (n + 1) ≤ K n) ∧ (∀ n, closure ↑(K (n + 1)) ⊆ f n) ∧ closure ↑(K 0) ⊆ U := by\n    rcases U_open.exists_positiveCompacts_closure_subset U_nonempty with ⟨K₀, hK₀⟩\n    have : ∀ (n) (K : PositiveCompacts X),\n        ∃ K' : PositiveCompacts X, closure ↑K' ⊆ f n ∩ interior K := by\n      refine fun n K ↦ ((ho n).inter isOpen_interior).exists_positiveCompacts_closure_subset ?_\n      rw [inter_comm]\n      exact (hd n).inter_open_nonempty _ isOpen_interior K.interior_nonempty\n    choose K_next hK_next using this\n    -- The next two lines are faster than a single `refine`.\n    use Nat.rec K₀ K_next\n    refine ⟨fun n ↦ ?_, fun n ↦ (hK_next n _).trans inter_subset_left, hK₀⟩\n    exact subset_closure.trans <| (hK_next _ _).trans <|\n      inter_subset_right.trans interior_subset\n  -- Prove that ̀`⋂ n : ℕ, closure (K n)` is inside `U ∩ ⋂ n : ℕ, f n`.\n  have hK_subset : (⋂ n, closure (K n) : Set X) ⊆ U ∩ ⋂ n, f n := fun x hx ↦ by\n    simp only [mem_iInter, mem_inter_iff] at hx ⊢\n    exact ⟨hKU <| hx 0, fun n ↦ hKf n <| hx (n + 1)⟩\n  /- Prove that `⋂ n : ℕ, closure (K n)` is not empty, as an intersection of a decreasing sequence\n    of nonempty compact closed subsets. -/\n  have hK_nonempty : (⋂ n, closure (K n) : Set X).Nonempty :=\n    IsCompact.nonempty_iInter_of_sequence_nonempty_isCompact_isClosed _\n      (fun n => closure_mono <| hK_anti n) (fun n => (K n).nonempty.closure)\n      (K 0).isCompact.closure fun n => isClosed_closure\n  exact hK_nonempty.mono hK_subset\n"}
