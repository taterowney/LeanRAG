{"name":"CategoryTheory.Cat.HasLimits.homDiagram_map","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nX Y : CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects)\nX✝ Y✝ : J\nf : Quiver.Hom X✝ Y✝\ng : Quiver.Hom (CategoryTheory.Limits.limit.π (F.comp CategoryTheory.Cat.objects) X✝ X) (CategoryTheory.Limits.limit.π (F.comp CategoryTheory.Cat.objects) X✝ Y)\n⊢ Eq ((CategoryTheory.Cat.HasLimits.homDiagram X Y).map f g) (CategoryTheory.CategoryStruct.comp (CategoryTheory.eqToHom ⋯) (CategoryTheory.CategoryStruct.comp ((F.map f).map g) (CategoryTheory.eqToHom ⋯)))","decl":"/-- Auxiliary definition:\nthe diagram whose limit gives the morphism space between two objects of the limit category. -/\n@[simps]\ndef homDiagram {F : J ⥤ Cat.{v, v}} (X Y : limit (F ⋙ Cat.objects.{v, v})) : J ⥤ Type v where\n  obj j := limit.π (F ⋙ Cat.objects) j X ⟶ limit.π (F ⋙ Cat.objects) j Y\n  map f g := by\n    refine eqToHom ?_ ≫ (F.map f).map g ≫ eqToHom ?_\n    · exact (congr_fun (limit.w (F ⋙ Cat.objects) f) X).symm\n    · exact congr_fun (limit.w (F ⋙ Cat.objects) f) Y\n  map_id X := by\n    funext f\n    letI : Category (objects.obj (F.obj X)) := (inferInstance : Category (F.obj X))\n    simp [Functor.congr_hom (F.map_id X) f]\n  map_comp {_ _ Z} f g := by\n    funext h\n    letI : Category (objects.obj (F.obj Z)) := (inferInstance : Category (F.obj Z))\n    simp [Functor.congr_hom (F.map_comp f g) h, eqToHom_map]\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.homDiagram_obj","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nX Y : CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects)\nj : J\n⊢ Eq ((CategoryTheory.Cat.HasLimits.homDiagram X Y).obj j) (Quiver.Hom (CategoryTheory.Limits.limit.π (F.comp CategoryTheory.Cat.objects) j X) (CategoryTheory.Limits.limit.π (F.comp CategoryTheory.Cat.objects) j Y))","decl":"/-- Auxiliary definition:\nthe diagram whose limit gives the morphism space between two objects of the limit category. -/\n@[simps]\ndef homDiagram {F : J ⥤ Cat.{v, v}} (X Y : limit (F ⋙ Cat.objects.{v, v})) : J ⥤ Type v where\n  obj j := limit.π (F ⋙ Cat.objects) j X ⟶ limit.π (F ⋙ Cat.objects) j Y\n  map f g := by\n    refine eqToHom ?_ ≫ (F.map f).map g ≫ eqToHom ?_\n    · exact (congr_fun (limit.w (F ⋙ Cat.objects) f) X).symm\n    · exact congr_fun (limit.w (F ⋙ Cat.objects) f) Y\n  map_id X := by\n    funext f\n    letI : Category (objects.obj (F.obj X)) := (inferInstance : Category (F.obj X))\n    simp [Functor.congr_hom (F.map_id X) f]\n  map_comp {_ _ Z} f g := by\n    funext h\n    letI : Category (objects.obj (F.obj Z)) := (inferInstance : Category (F.obj Z))\n    simp [Functor.congr_hom (F.map_comp f g) h, eqToHom_map]\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.instCategoryLimitCompObjects_comp","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nX Y Z : CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects)\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp f g) (CategoryTheory.Limits.Types.Limit.mk (CategoryTheory.Cat.HasLimits.homDiagram X Z) (fun j => CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.limit.π (CategoryTheory.Cat.HasLimits.homDiagram X Y) j f) (CategoryTheory.Limits.limit.π (CategoryTheory.Cat.HasLimits.homDiagram Y Z) j g)) ⋯)","decl":"@[simps]\ninstance (F : J ⥤ Cat.{v, v}) : Category (limit (F ⋙ Cat.objects)) where\n  Hom X Y := limit (homDiagram X Y)\n  id X := Types.Limit.mk.{v, v} (homDiagram X X) (fun _ => 𝟙 _) fun j j' f => by simp\n  comp {X Y Z} f g :=\n    Types.Limit.mk.{v, v} (homDiagram X Z)\n      (fun j => limit.π (homDiagram X Y) j f ≫ limit.π (homDiagram Y Z) j g) fun j j' h => by\n      simp [← congr_fun (limit.w (homDiagram X Y) h) f,\n        ← congr_fun (limit.w (homDiagram Y Z) h) g]\n  id_comp _ := by\n    apply Types.limit_ext.{v, v}\n    simp\n  comp_id _ := by\n    apply Types.limit_ext.{v, v}\n    simp\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.instCategoryLimitCompObjects_id","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nX : CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects)\n⊢ Eq (CategoryTheory.CategoryStruct.id X) (CategoryTheory.Limits.Types.Limit.mk (CategoryTheory.Cat.HasLimits.homDiagram X X) (fun x => CategoryTheory.CategoryStruct.id (CategoryTheory.Limits.limit.π (F.comp CategoryTheory.Cat.objects) x X)) ⋯)","decl":"@[simps]\ninstance (F : J ⥤ Cat.{v, v}) : Category (limit (F ⋙ Cat.objects)) where\n  Hom X Y := limit (homDiagram X Y)\n  id X := Types.Limit.mk.{v, v} (homDiagram X X) (fun _ => 𝟙 _) fun j j' f => by simp\n  comp {X Y Z} f g :=\n    Types.Limit.mk.{v, v} (homDiagram X Z)\n      (fun j => limit.π (homDiagram X Y) j f ≫ limit.π (homDiagram Y Z) j g) fun j j' h => by\n      simp [← congr_fun (limit.w (homDiagram X Y) h) f,\n        ← congr_fun (limit.w (homDiagram Y Z) h) g]\n  id_comp _ := by\n    apply Types.limit_ext.{v, v}\n    simp\n  comp_id _ := by\n    apply Types.limit_ext.{v, v}\n    simp\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitConeX_α","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\n⊢ Eq (↑(CategoryTheory.Cat.HasLimits.limitConeX F)) (CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects))","decl":"/-- Auxiliary definition: the limit category. -/\n@[simps]\ndef limitConeX (F : J ⥤ Cat.{v, v}) : Cat.{v, v} where α := limit (F ⋙ Cat.objects)\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitConeX_str","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\n⊢ Eq (CategoryTheory.Cat.HasLimits.limitConeX F).str inferInstance","decl":"/-- Auxiliary definition: the limit category. -/\n@[simps]\ndef limitConeX (F : J ⥤ Cat.{v, v}) : Cat.{v, v} where α := limit (F ⋙ Cat.objects)\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitCone_π_app_map","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nj : J\nX✝ Y✝ : ↑(((CategoryTheory.Functor.const J).obj (CategoryTheory.Cat.HasLimits.limitConeX F)).obj j)\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (((CategoryTheory.Cat.HasLimits.limitCone F).π.app j).map f) (CategoryTheory.Limits.limit.π (CategoryTheory.Cat.HasLimits.homDiagram X✝ Y✝) j f)","decl":"/-- Auxiliary definition: the cone over the limit category. -/\n@[simps]\ndef limitCone (F : J ⥤ Cat.{v, v}) : Cone F where\n  pt := limitConeX F\n  π :=\n    { app := fun j =>\n        { obj := limit.π (F ⋙ Cat.objects) j\n          map := fun f => limit.π (homDiagram _ _) j f }\n      naturality := fun _ _ f =>\n        CategoryTheory.Functor.ext (fun X => (congr_fun (limit.w (F ⋙ Cat.objects) f) X).symm)\n          fun X Y h => (congr_fun (limit.w (homDiagram X Y) f) h).symm }\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitCone_π_app_obj","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nj : J\na✝ : CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects)\n⊢ Eq (((CategoryTheory.Cat.HasLimits.limitCone F).π.app j).obj a✝) (CategoryTheory.Limits.limit.π (F.comp CategoryTheory.Cat.objects) j a✝)","decl":"/-- Auxiliary definition: the cone over the limit category. -/\n@[simps]\ndef limitCone (F : J ⥤ Cat.{v, v}) : Cone F where\n  pt := limitConeX F\n  π :=\n    { app := fun j =>\n        { obj := limit.π (F ⋙ Cat.objects) j\n          map := fun f => limit.π (homDiagram _ _) j f }\n      naturality := fun _ _ f =>\n        CategoryTheory.Functor.ext (fun X => (congr_fun (limit.w (F ⋙ Cat.objects) f) X).symm)\n          fun X Y h => (congr_fun (limit.w (homDiagram X Y) f) h).symm }\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitCone_pt","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\n⊢ Eq (CategoryTheory.Cat.HasLimits.limitCone F).pt (CategoryTheory.Cat.HasLimits.limitConeX F)","decl":"/-- Auxiliary definition: the cone over the limit category. -/\n@[simps]\ndef limitCone (F : J ⥤ Cat.{v, v}) : Cone F where\n  pt := limitConeX F\n  π :=\n    { app := fun j =>\n        { obj := limit.π (F ⋙ Cat.objects) j\n          map := fun f => limit.π (homDiagram _ _) j f }\n      naturality := fun _ _ f =>\n        CategoryTheory.Functor.ext (fun X => (congr_fun (limit.w (F ⋙ Cat.objects) f) X).symm)\n          fun X Y h => (congr_fun (limit.w (homDiagram X Y) f) h).symm }\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitConeLift_obj","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\ns : CategoryTheory.Limits.Cone F\na✝ : { pt := ↑s.pt, π := { app := fun j => (s.π.app j).obj, naturality := ⋯ } }.pt\n⊢ Eq ((CategoryTheory.Cat.HasLimits.limitConeLift F s).obj a✝) (CategoryTheory.Limits.limit.lift (F.comp CategoryTheory.Cat.objects) { pt := ↑s.pt, π := { app := fun j => (s.π.app j).obj, naturality := ⋯ } } a✝)","decl":"/-- Auxiliary definition: the universal morphism to the proposed limit cone. -/\n@[simps]\ndef limitConeLift (F : J ⥤ Cat.{v, v}) (s : Cone F) : s.pt ⟶ limitConeX F where\n  obj :=\n    limit.lift (F ⋙ Cat.objects)\n      { pt := s.pt\n        π :=\n          { app := fun j => (s.π.app j).obj\n            naturality := fun _ _ f => objects.congr_map (s.π.naturality f) } }\n  map f := by\n    fapply Types.Limit.mk.{v, v}\n    · intro j\n      refine eqToHom ?_ ≫ (s.π.app j).map f ≫ eqToHom ?_ <;> simp\n    · intro j j' h\n      dsimp\n      simp only [Category.assoc, Functor.map_comp, eqToHom_map, eqToHom_trans,\n        eqToHom_trans_assoc, ← Functor.comp_map]\n      have := (s.π.naturality h).symm\n      dsimp at this\n      rw [Category.id_comp] at this\n      erw [Functor.congr_hom this f]\n      simp\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limitConeLift_map","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\ns : CategoryTheory.Limits.Cone F\nX✝ Y✝ : ↑s.pt\nf : Quiver.Hom X✝ Y✝\n⊢ Eq ((CategoryTheory.Cat.HasLimits.limitConeLift F s).map f) (CategoryTheory.Limits.Types.Limit.mk (CategoryTheory.Cat.HasLimits.homDiagram (CategoryTheory.Limits.limit.lift (F.comp CategoryTheory.Cat.objects) { pt := ↑s.pt, π := { app := fun j => (s.π.app j).obj, naturality := ⋯ } } X✝) (CategoryTheory.Limits.limit.lift (F.comp CategoryTheory.Cat.objects) { pt := ↑s.pt, π := { app := fun j => (s.π.app j).obj, naturality := ⋯ } } Y✝)) (fun j => CategoryTheory.CategoryStruct.comp (CategoryTheory.eqToHom ⋯) (CategoryTheory.CategoryStruct.comp ((s.π.app j).map f) (CategoryTheory.eqToHom ⋯))) ⋯)","decl":"/-- Auxiliary definition: the universal morphism to the proposed limit cone. -/\n@[simps]\ndef limitConeLift (F : J ⥤ Cat.{v, v}) (s : Cone F) : s.pt ⟶ limitConeX F where\n  obj :=\n    limit.lift (F ⋙ Cat.objects)\n      { pt := s.pt\n        π :=\n          { app := fun j => (s.π.app j).obj\n            naturality := fun _ _ f => objects.congr_map (s.π.naturality f) } }\n  map f := by\n    fapply Types.Limit.mk.{v, v}\n    · intro j\n      refine eqToHom ?_ ≫ (s.π.app j).map f ≫ eqToHom ?_ <;> simp\n    · intro j j' h\n      dsimp\n      simp only [Category.assoc, Functor.map_comp, eqToHom_map, eqToHom_trans,\n        eqToHom_trans_assoc, ← Functor.comp_map]\n      have := (s.π.naturality h).symm\n      dsimp at this\n      rw [Category.id_comp] at this\n      erw [Functor.congr_hom this f]\n      simp\n\n"}
{"name":"CategoryTheory.Cat.HasLimits.limit_π_homDiagram_eqToHom","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"J : Type v\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J CategoryTheory.Cat\nX Y : CategoryTheory.Limits.limit (F.comp CategoryTheory.Cat.objects)\nj : J\nh : Eq X Y\n⊢ Eq (CategoryTheory.Limits.limit.π (CategoryTheory.Cat.HasLimits.homDiagram X Y) j (CategoryTheory.eqToHom h)) (CategoryTheory.eqToHom ⋯)","decl":"@[simp]\ntheorem limit_π_homDiagram_eqToHom {F : J ⥤ Cat.{v, v}} (X Y : limit (F ⋙ Cat.objects.{v, v}))\n    (j : J) (h : X = Y) :\n    limit.π (homDiagram X Y) j (eqToHom h) =\n      eqToHom (congr_arg (limit.π (F ⋙ Cat.objects.{v, v}) j) h) := by\n  subst h\n  simp\n\n"}
{"name":"CategoryTheory.Cat.instHasLimits","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"⊢ CategoryTheory.Limits.HasLimits CategoryTheory.Cat","decl":"/-- The category of small categories has all small limits. -/\ninstance : HasLimits Cat.{v, v} where\n  has_limits_of_shape _ :=\n    { has_limit := fun F => ⟨⟨⟨HasLimits.limitCone F, HasLimits.limitConeIsLimit F⟩⟩⟩ }\n\n"}
{"name":"CategoryTheory.Cat.instPreservesLimitsObjects","module":"Mathlib.CategoryTheory.Category.Cat.Limit","initialProofState":"⊢ CategoryTheory.Limits.PreservesLimits CategoryTheory.Cat.objects","decl":"instance : PreservesLimits Cat.objects.{v, v} where\n  preservesLimitsOfShape :=\n    { preservesLimit := fun {F} =>\n        preservesLimit_of_preserves_limit_cone (HasLimits.limitConeIsLimit F)\n          (Limits.IsLimit.ofIsoLimit (limit.isLimit (F ⋙ Cat.objects))\n            (Cones.ext (by rfl) (by aesop_cat))) }\n\n"}
