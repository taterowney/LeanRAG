{"name":"strictConvexOn_exp","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"⊢ StrictConvexOn Real Set.univ Real.exp","decl":"/-- `Real.exp` is strictly convex on the whole real line. -/\ntheorem strictConvexOn_exp : StrictConvexOn ℝ univ exp := by\n  apply strictConvexOn_of_slope_strict_mono_adjacent convex_univ\n  rintro x y z - - hxy hyz\n  trans exp y\n  · have h1 : 0 < y - x := by linarith\n    have h2 : x - y < 0 := by linarith\n    rw [div_lt_iff₀ h1]\n    calc\n      exp y - exp x = exp y - exp y * exp (x - y) := by rw [← exp_add]; ring_nf\n      _ = exp y * (1 - exp (x - y)) := by ring\n      _ < exp y * -(x - y) := by gcongr; linarith [add_one_lt_exp h2.ne]\n      _ = exp y * (y - x) := by ring\n  · have h1 : 0 < z - y := by linarith\n    rw [lt_div_iff₀ h1]\n    calc\n      exp y * (z - y) < exp y * (exp (z - y) - 1) := by\n        gcongr _ * ?_\n        linarith [add_one_lt_exp h1.ne']\n      _ = exp (z - y) * exp y - exp y := by ring\n      _ ≤ exp z - exp y := by rw [← exp_add]; ring_nf; rfl\n\n"}
{"name":"convexOn_exp","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"⊢ ConvexOn Real Set.univ Real.exp","decl":"/-- `Real.exp` is convex on the whole real line. -/\ntheorem convexOn_exp : ConvexOn ℝ univ exp :=\n  strictConvexOn_exp.convexOn\n\n"}
{"name":"strictConcaveOn_log_Ioi","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"⊢ StrictConcaveOn Real (Set.Ioi 0) Real.log","decl":"/-- `Real.log` is strictly concave on `(0, +∞)`. -/\ntheorem strictConcaveOn_log_Ioi : StrictConcaveOn ℝ (Ioi 0) log := by\n  apply strictConcaveOn_of_slope_strict_anti_adjacent (convex_Ioi (0 : ℝ))\n  intro x y z (hx : 0 < x) (hz : 0 < z) hxy hyz\n  have hy : 0 < y := hx.trans hxy\n  trans y⁻¹\n  · have h : 0 < z - y := by linarith\n    rw [div_lt_iff₀ h]\n    have hyz' : 0 < z / y := by positivity\n    have hyz'' : z / y ≠ 1 := by\n      contrapose! h\n      rw [div_eq_one_iff_eq hy.ne'] at h\n      simp [h]\n    calc\n      log z - log y = log (z / y) := by rw [← log_div hz.ne' hy.ne']\n      _ < z / y - 1 := log_lt_sub_one_of_pos hyz' hyz''\n      _ = y⁻¹ * (z - y) := by field_simp\n  · have h : 0 < y - x := by linarith\n    rw [lt_div_iff₀ h]\n    have hxy' : 0 < x / y := by positivity\n    have hxy'' : x / y ≠ 1 := by\n      contrapose! h\n      rw [div_eq_one_iff_eq hy.ne'] at h\n      simp [h]\n    calc\n      y⁻¹ * (y - x) = 1 - x / y := by field_simp\n      _ < -log (x / y) := by linarith [log_lt_sub_one_of_pos hxy' hxy'']\n      _ = -(log x - log y) := by rw [log_div hx.ne' hy.ne']\n      _ = log y - log x := by ring\n\n"}
{"name":"one_add_mul_self_lt_rpow_one_add","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"s : Real\nhs : LE.le (-1) s\nhs' : Ne s 0\np : Real\nhp : LT.lt 1 p\n⊢ LT.lt (HAdd.hAdd 1 (HMul.hMul p s)) (HPow.hPow (HAdd.hAdd 1 s) p)","decl":"/-- **Bernoulli's inequality** for real exponents, strict version: for `1 < p` and `-1 ≤ s`, with\n`s ≠ 0`, we have `1 + p * s < (1 + s) ^ p`. -/\ntheorem one_add_mul_self_lt_rpow_one_add {s : ℝ} (hs : -1 ≤ s) (hs' : s ≠ 0) {p : ℝ} (hp : 1 < p) :\n    1 + p * s < (1 + s) ^ p := by\n  have hp' : 0 < p := zero_lt_one.trans hp\n  rcases eq_or_lt_of_le hs with rfl | hs\n  · rwa [add_neg_cancel, zero_rpow hp'.ne', mul_neg_one, add_neg_lt_iff_lt_add, zero_add]\n  have hs1 : 0 < 1 + s := neg_lt_iff_pos_add'.mp hs\n  rcases le_or_lt (1 + p * s) 0 with hs2 | hs2\n  · exact hs2.trans_lt (rpow_pos_of_pos hs1 _)\n  have hs3 : 1 + s ≠ 1 := hs' ∘ add_right_eq_self.mp\n  have hs4 : 1 + p * s ≠ 1 := by\n    contrapose! hs'; rwa [add_right_eq_self, mul_eq_zero, eq_false_intro hp'.ne', false_or] at hs'\n  rw [rpow_def_of_pos hs1, ← exp_log hs2]\n  apply exp_strictMono\n  cases' lt_or_gt_of_ne hs' with hs' hs'\n  · rw [← div_lt_iff₀ hp', ← div_lt_div_right_of_neg hs']\n    convert strictConcaveOn_log_Ioi.secant_strict_mono (zero_lt_one' ℝ) hs2 hs1 hs4 hs3 _ using 1\n    · rw [add_sub_cancel_left, log_one, sub_zero]\n    · rw [add_sub_cancel_left, div_div, log_one, sub_zero]\n    · apply add_lt_add_left (mul_lt_of_one_lt_left hs' hp)\n  · rw [← div_lt_iff₀ hp', ← div_lt_div_iff_of_pos_right hs']\n    convert strictConcaveOn_log_Ioi.secant_strict_mono (zero_lt_one' ℝ) hs1 hs2 hs3 hs4 _ using 1\n    · rw [add_sub_cancel_left, div_div, log_one, sub_zero]\n    · rw [add_sub_cancel_left, log_one, sub_zero]\n    · apply add_lt_add_left (lt_mul_of_one_lt_left hs' hp)\n\n"}
{"name":"one_add_mul_self_le_rpow_one_add","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"s : Real\nhs : LE.le (-1) s\np : Real\nhp : LE.le 1 p\n⊢ LE.le (HAdd.hAdd 1 (HMul.hMul p s)) (HPow.hPow (HAdd.hAdd 1 s) p)","decl":"/-- **Bernoulli's inequality** for real exponents, non-strict version: for `1 ≤ p` and `-1 ≤ s`\nwe have `1 + p * s ≤ (1 + s) ^ p`. -/\ntheorem one_add_mul_self_le_rpow_one_add {s : ℝ} (hs : -1 ≤ s) {p : ℝ} (hp : 1 ≤ p) :\n    1 + p * s ≤ (1 + s) ^ p := by\n  rcases eq_or_lt_of_le hp with (rfl | hp)\n  · simp\n  by_cases hs' : s = 0\n  · simp [hs']\n  exact (one_add_mul_self_lt_rpow_one_add hs hs' hp).le\n\n"}
{"name":"rpow_one_add_lt_one_add_mul_self","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"s : Real\nhs : LE.le (-1) s\nhs' : Ne s 0\np : Real\nhp1 : LT.lt 0 p\nhp2 : LT.lt p 1\n⊢ LT.lt (HPow.hPow (HAdd.hAdd 1 s) p) (HAdd.hAdd 1 (HMul.hMul p s))","decl":"/-- **Bernoulli's inequality** for real exponents, strict version: for `0 < p < 1` and `-1 ≤ s`,\nwith `s ≠ 0`, we have `(1 + s) ^ p < 1 + p * s`. -/\ntheorem rpow_one_add_lt_one_add_mul_self {s : ℝ} (hs : -1 ≤ s) (hs' : s ≠ 0) {p : ℝ} (hp1 : 0 < p)\n    (hp2 : p < 1) : (1 + s) ^ p < 1 + p * s := by\n  rcases eq_or_lt_of_le hs with rfl | hs\n  · rwa [add_neg_cancel, zero_rpow hp1.ne', mul_neg_one, lt_add_neg_iff_add_lt, zero_add]\n  have hs1 : 0 < 1 + s := neg_lt_iff_pos_add'.mp hs\n  have hs2 : 0 < 1 + p * s := by\n    rw [← neg_lt_iff_pos_add']\n    rcases lt_or_gt_of_ne hs' with h | h\n    · exact hs.trans (lt_mul_of_lt_one_left h hp2)\n    · exact neg_one_lt_zero.trans (mul_pos hp1 h)\n  have hs3 : 1 + s ≠ 1 := hs' ∘ add_right_eq_self.mp\n  have hs4 : 1 + p * s ≠ 1 := by\n    contrapose! hs'; rwa [add_right_eq_self, mul_eq_zero, eq_false_intro hp1.ne', false_or] at hs'\n  rw [rpow_def_of_pos hs1, ← exp_log hs2]\n  apply exp_strictMono\n  cases' lt_or_gt_of_ne hs' with hs' hs'\n  · rw [← lt_div_iff₀ hp1, ← div_lt_div_right_of_neg hs']\n    convert strictConcaveOn_log_Ioi.secant_strict_mono (zero_lt_one' ℝ) hs1 hs2 hs3 hs4 _ using 1\n    · rw [add_sub_cancel_left, div_div, log_one, sub_zero]\n    · rw [add_sub_cancel_left, log_one, sub_zero]\n    · apply add_lt_add_left (lt_mul_of_lt_one_left hs' hp2)\n  · rw [← lt_div_iff₀ hp1, ← div_lt_div_iff_of_pos_right hs']\n    convert strictConcaveOn_log_Ioi.secant_strict_mono (zero_lt_one' ℝ) hs2 hs1 hs4 hs3 _ using 1\n    · rw [add_sub_cancel_left, log_one, sub_zero]\n    · rw [add_sub_cancel_left, div_div, log_one, sub_zero]\n    · apply add_lt_add_left (mul_lt_of_lt_one_left hs' hp2)\n\n"}
{"name":"rpow_one_add_le_one_add_mul_self","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"s : Real\nhs : LE.le (-1) s\np : Real\nhp1 : LE.le 0 p\nhp2 : LE.le p 1\n⊢ LE.le (HPow.hPow (HAdd.hAdd 1 s) p) (HAdd.hAdd 1 (HMul.hMul p s))","decl":"/-- **Bernoulli's inequality** for real exponents, non-strict version: for `0 ≤ p ≤ 1` and `-1 ≤ s`\nwe have `(1 + s) ^ p ≤ 1 + p * s`. -/\ntheorem rpow_one_add_le_one_add_mul_self {s : ℝ} (hs : -1 ≤ s) {p : ℝ} (hp1 : 0 ≤ p) (hp2 : p ≤ 1) :\n    (1 + s) ^ p ≤ 1 + p * s := by\n  rcases eq_or_lt_of_le hp1 with (rfl | hp1)\n  · simp\n  rcases eq_or_lt_of_le hp2 with (rfl | hp2)\n  · simp\n  by_cases hs' : s = 0\n  · simp [hs']\n  exact (rpow_one_add_lt_one_add_mul_self hs hs' hp1 hp2).le\n\n"}
{"name":"strictConvexOn_rpow","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"p : Real\nhp : LT.lt 1 p\n⊢ StrictConvexOn Real (Set.Ici 0) fun x => HPow.hPow x p","decl":"/-- For `p : ℝ` with `1 < p`, `fun x ↦ x ^ p` is strictly convex on $[0, +∞)$. -/\ntheorem strictConvexOn_rpow {p : ℝ} (hp : 1 < p) : StrictConvexOn ℝ (Ici 0) fun x : ℝ ↦ x ^ p := by\n  apply strictConvexOn_of_slope_strict_mono_adjacent (convex_Ici (0 : ℝ))\n  intro x y z (hx : 0 ≤ x) (hz : 0 ≤ z) hxy hyz\n  have hy : 0 < y := hx.trans_lt hxy\n  have hy' : 0 < y ^ p := rpow_pos_of_pos hy _\n  trans p * y ^ (p - 1)\n  · have q : 0 < y - x := by rwa [sub_pos]\n    rw [div_lt_iff₀ q, ← div_lt_div_iff_of_pos_right hy', _root_.sub_div, div_self hy'.ne',\n      ← div_rpow hx hy.le, sub_lt_comm, ← add_sub_cancel_right (x / y) 1, add_comm, add_sub_assoc,\n      ← div_mul_eq_mul_div, mul_div_assoc, ← rpow_sub hy, sub_sub_cancel_left, rpow_neg_one,\n      mul_assoc, ← div_eq_inv_mul, sub_eq_add_neg, ← mul_neg, ← neg_div, neg_sub, _root_.sub_div,\n      div_self hy.ne']\n    apply one_add_mul_self_lt_rpow_one_add _ _ hp\n    · rw [le_sub_iff_add_le, neg_add_cancel, div_nonneg_iff]\n      exact Or.inl ⟨hx, hy.le⟩\n    · rw [sub_ne_zero]\n      exact ((div_lt_one hy).mpr hxy).ne\n  · have q : 0 < z - y := by rwa [sub_pos]\n    rw [lt_div_iff₀ q, ← div_lt_div_iff_of_pos_right hy', _root_.sub_div, div_self hy'.ne',\n      ← div_rpow hz hy.le, lt_sub_iff_add_lt', ← add_sub_cancel_right (z / y) 1, add_comm _ 1,\n      add_sub_assoc, ← div_mul_eq_mul_div, mul_div_assoc, ← rpow_sub hy, sub_sub_cancel_left,\n      rpow_neg_one, mul_assoc, ← div_eq_inv_mul, _root_.sub_div, div_self hy.ne']\n    apply one_add_mul_self_lt_rpow_one_add _ _ hp\n    · rw [le_sub_iff_add_le, neg_add_cancel, div_nonneg_iff]\n      exact Or.inl ⟨hz, hy.le⟩\n    · rw [sub_ne_zero]\n      exact ((one_lt_div hy).mpr hyz).ne'\n\n"}
{"name":"convexOn_rpow","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"p : Real\nhp : LE.le 1 p\n⊢ ConvexOn Real (Set.Ici 0) fun x => HPow.hPow x p","decl":"theorem convexOn_rpow {p : ℝ} (hp : 1 ≤ p) : ConvexOn ℝ (Ici 0) fun x : ℝ ↦ x ^ p := by\n  rcases eq_or_lt_of_le hp with (rfl | hp)\n  · simpa using convexOn_id (convex_Ici _)\n  exact (strictConvexOn_rpow hp).convexOn\n\n"}
{"name":"strictConcaveOn_log_Iio","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"⊢ StrictConcaveOn Real (Set.Iio 0) Real.log","decl":"theorem strictConcaveOn_log_Iio : StrictConcaveOn ℝ (Iio 0) log := by\n  refine ⟨convex_Iio _, ?_⟩\n  intro x (hx : x < 0) y (hy : y < 0) hxy a b ha hb hab\n  have hx' : 0 < -x := by linarith\n  have hy' : 0 < -y := by linarith\n  have hxy' : -x ≠ -y := by contrapose! hxy; linarith\n  calc\n    a • log x + b • log y = a • log (-x) + b • log (-y) := by simp_rw [log_neg_eq_log]\n    _ < log (a • -x + b • -y) := strictConcaveOn_log_Ioi.2 hx' hy' hxy' ha hb hab\n    _ = log (-(a • x + b • y)) := by congr 1; simp only [Algebra.id.smul_eq_mul]; ring\n    _ = _ := by rw [log_neg_eq_log]\n\n"}
{"name":"Real.exp_mul_le_cosh_add_mul_sinh","module":"Mathlib.Analysis.Convex.SpecificFunctions.Basic","initialProofState":"t : Real\nht : LE.le (abs t) 1\nx : Real\n⊢ LE.le (Real.exp (HMul.hMul t x)) (HAdd.hAdd (Real.cosh x) (HMul.hMul t (Real.sinh x)))","decl":"lemma exp_mul_le_cosh_add_mul_sinh {t : ℝ} (ht : |t| ≤ 1) (x : ℝ) :\n    exp (t * x) ≤ cosh x + t * sinh x := by\n  rw [abs_le] at ht\n  calc\n    _ = exp ((1 + t) / 2 * x + (1 - t) / 2 * (-x)) := by ring_nf\n    _ ≤ (1 + t) / 2 * exp x + (1 - t) / 2 * exp (-x) :=\n        convexOn_exp.2 (Set.mem_univ _) (Set.mem_univ _) (by linarith) (by linarith) <| by ring\n    _ = _ := by rw [cosh_eq, sinh_eq]; ring\n\n"}
