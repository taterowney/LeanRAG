{"name":"GradeOrder.covBy_grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_5\nα : Type u_6\ninst✝¹ : Preorder 𝕆\ninst✝ : Preorder α\nself : GradeOrder 𝕆 α\na b : α\na✝ : CovBy a b\n⊢ CovBy (GradeOrder.grade a) (GradeOrder.grade b)","decl":"/-- An `𝕆`-graded order is an order `α` equipped with a strictly monotone function\n`grade 𝕆 : α → 𝕆` which preserves order covering (`CovBy`). -/\nclass GradeOrder (𝕆 α : Type*) [Preorder 𝕆] [Preorder α] where\n  /-- The grading function. -/\n  protected grade : α → 𝕆\n  /-- `grade` is strictly monotonic. -/\n  grade_strictMono : StrictMono grade\n  /-- `grade` preserves `CovBy`. -/\n  covBy_grade ⦃a b : α⦄ : a ⋖ b → grade a ⋖ grade b\n\n"}
{"name":"GradeOrder.grade_strictMono","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_5\nα : Type u_6\ninst✝¹ : Preorder 𝕆\ninst✝ : Preorder α\nself : GradeOrder 𝕆 α\n⊢ StrictMono GradeOrder.grade","decl":"/-- An `𝕆`-graded order is an order `α` equipped with a strictly monotone function\n`grade 𝕆 : α → 𝕆` which preserves order covering (`CovBy`). -/\nclass GradeOrder (𝕆 α : Type*) [Preorder 𝕆] [Preorder α] where\n  /-- The grading function. -/\n  protected grade : α → 𝕆\n  /-- `grade` is strictly monotonic. -/\n  grade_strictMono : StrictMono grade\n  /-- `grade` preserves `CovBy`. -/\n  covBy_grade ⦃a b : α⦄ : a ⋖ b → grade a ⋖ grade b\n\n"}
{"name":"GradeMinOrder.isMin_grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_5\nα : Type u_6\ninst✝¹ : Preorder 𝕆\ninst✝ : Preorder α\nself : GradeMinOrder 𝕆 α\na : α\na✝ : IsMin a\n⊢ IsMin (GradeOrder.grade a)","decl":"/-- An `𝕆`-graded order where minimal elements have minimal grades. -/\nclass GradeMinOrder (𝕆 α : Type*) [Preorder 𝕆] [Preorder α] extends GradeOrder 𝕆 α where\n  /-- Minimal elements have minimal grades. -/\n  isMin_grade ⦃a : α⦄ : IsMin a → IsMin (grade a)\n\n"}
{"name":"GradeMaxOrder.isMax_grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_5\nα : Type u_6\ninst✝¹ : Preorder 𝕆\ninst✝ : Preorder α\nself : GradeMaxOrder 𝕆 α\na : α\na✝ : IsMax a\n⊢ IsMax (GradeOrder.grade a)","decl":"/-- An `𝕆`-graded order where maximal elements have maximal grades. -/\nclass GradeMaxOrder (𝕆 α : Type*) [Preorder 𝕆] [Preorder α] extends GradeOrder 𝕆 α where\n  /-- Maximal elements have maximal grades. -/\n  isMax_grade ⦃a : α⦄ : IsMax a → IsMax (grade a)\n\n"}
{"name":"GradeBoundedOrder.isMax_grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_5\nα : Type u_6\ninst✝¹ : Preorder 𝕆\ninst✝ : Preorder α\nself : GradeBoundedOrder 𝕆 α\na : α\na✝ : IsMax a\n⊢ IsMax (GradeOrder.grade a)","decl":"/-- An `𝕆`-graded order where minimal elements have minimal grades and maximal elements have maximal\ngrades. -/\nclass GradeBoundedOrder (𝕆 α : Type*) [Preorder 𝕆] [Preorder α] extends GradeMinOrder 𝕆 α,\n  GradeMaxOrder 𝕆 α\n\n"}
{"name":"CovBy.grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeOrder 𝕆 α\na b : α\nh : CovBy a b\n⊢ CovBy (grade 𝕆 a) (grade 𝕆 b)","decl":"protected theorem CovBy.grade (h : a ⋖ b) : grade 𝕆 a ⋖ grade 𝕆 b :=\n  GradeOrder.covBy_grade h\n\n"}
{"name":"grade_strictMono","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeOrder 𝕆 α\n⊢ StrictMono (grade 𝕆)","decl":"theorem grade_strictMono : StrictMono (grade 𝕆 : α → 𝕆) :=\n  GradeOrder.grade_strictMono\n\n"}
{"name":"covBy_iff_lt_covBy_grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeOrder 𝕆 α\na b : α\n⊢ Iff (CovBy a b) (And (LT.lt a b) (CovBy (grade 𝕆 a) (grade 𝕆 b)))","decl":"theorem covBy_iff_lt_covBy_grade : a ⋖ b ↔ a < b ∧ grade 𝕆 a ⋖ grade 𝕆 b :=\n  ⟨fun h => ⟨h.1, h.grade _⟩,\n    And.imp_right fun h _ ha hb => h.2 (grade_strictMono ha) <| grade_strictMono hb⟩\n\n"}
{"name":"IsMin.grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeMinOrder 𝕆 α\na : α\nh : IsMin a\n⊢ IsMin (grade 𝕆 a)","decl":"protected theorem IsMin.grade (h : IsMin a) : IsMin (grade 𝕆 a) :=\n  GradeMinOrder.isMin_grade h\n\n"}
{"name":"isMin_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeMinOrder 𝕆 α\na : α\n⊢ Iff (IsMin (grade 𝕆 a)) (IsMin a)","decl":"@[simp]\ntheorem isMin_grade_iff : IsMin (grade 𝕆 a) ↔ IsMin a :=\n  ⟨grade_strictMono.isMin_of_apply, IsMin.grade _⟩\n\n"}
{"name":"IsMax.grade","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeMaxOrder 𝕆 α\na : α\nh : IsMax a\n⊢ IsMax (grade 𝕆 a)","decl":"protected theorem IsMax.grade (h : IsMax a) : IsMax (grade 𝕆 a) :=\n  GradeMaxOrder.isMax_grade h\n\n"}
{"name":"isMax_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeMaxOrder 𝕆 α\na : α\n⊢ Iff (IsMax (grade 𝕆 a)) (IsMax a)","decl":"@[simp]\ntheorem isMax_grade_iff : IsMax (grade 𝕆 a) ↔ IsMax a :=\n  ⟨grade_strictMono.isMax_of_apply, IsMax.grade _⟩\n\n"}
{"name":"grade_mono","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : PartialOrder α\ninst✝ : GradeOrder 𝕆 α\n⊢ Monotone (grade 𝕆)","decl":"theorem grade_mono [PartialOrder α] [GradeOrder 𝕆 α] : Monotone (grade 𝕆 : α → 𝕆) :=\n  grade_strictMono.monotone\n\n"}
{"name":"grade_injective","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : LinearOrder α\ninst✝ : GradeOrder 𝕆 α\n⊢ Function.Injective (grade 𝕆)","decl":"theorem grade_injective : Function.Injective (grade 𝕆 : α → 𝕆) :=\n  grade_strictMono.injective\n\n"}
{"name":"grade_le_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : LinearOrder α\ninst✝ : GradeOrder 𝕆 α\na b : α\n⊢ Iff (LE.le (grade 𝕆 a) (grade 𝕆 b)) (LE.le a b)","decl":"@[simp]\ntheorem grade_le_grade_iff : grade 𝕆 a ≤ grade 𝕆 b ↔ a ≤ b :=\n  grade_strictMono.le_iff_le\n\n"}
{"name":"grade_lt_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : LinearOrder α\ninst✝ : GradeOrder 𝕆 α\na b : α\n⊢ Iff (LT.lt (grade 𝕆 a) (grade 𝕆 b)) (LT.lt a b)","decl":"@[simp]\ntheorem grade_lt_grade_iff : grade 𝕆 a < grade 𝕆 b ↔ a < b :=\n  grade_strictMono.lt_iff_lt\n\n"}
{"name":"grade_eq_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : LinearOrder α\ninst✝ : GradeOrder 𝕆 α\na b : α\n⊢ Iff (Eq (grade 𝕆 a) (grade 𝕆 b)) (Eq a b)","decl":"@[simp]\ntheorem grade_eq_grade_iff : grade 𝕆 a = grade 𝕆 b ↔ a = b :=\n  grade_injective.eq_iff\n\n"}
{"name":"grade_ne_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : LinearOrder α\ninst✝ : GradeOrder 𝕆 α\na b : α\n⊢ Iff (Ne (grade 𝕆 a) (grade 𝕆 b)) (Ne a b)","decl":"theorem grade_ne_grade_iff : grade 𝕆 a ≠ grade 𝕆 b ↔ a ≠ b :=\n  grade_injective.ne_iff\n\n"}
{"name":"grade_covBy_grade_iff","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : LinearOrder α\ninst✝ : GradeOrder 𝕆 α\na b : α\n⊢ Iff (CovBy (grade 𝕆 a) (grade 𝕆 b)) (CovBy a b)","decl":"theorem grade_covBy_grade_iff : grade 𝕆 a ⋖ grade 𝕆 b ↔ a ⋖ b :=\n  (covBy_iff_lt_covBy_grade.trans <| and_iff_right_of_imp fun h => grade_lt_grade_iff.1 h.1).symm\n\n"}
{"name":"grade_bot","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝⁴ : PartialOrder 𝕆\ninst✝³ : Preorder α\ninst✝² : OrderBot 𝕆\ninst✝¹ : OrderBot α\ninst✝ : GradeMinOrder 𝕆 α\n⊢ Eq (grade 𝕆 Bot.bot) Bot.bot","decl":"@[simp]\ntheorem grade_bot [OrderBot 𝕆] [OrderBot α] [GradeMinOrder 𝕆 α] : grade 𝕆 (⊥ : α) = ⊥ :=\n  (isMin_bot.grade _).eq_bot\n\n"}
{"name":"grade_top","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝⁴ : PartialOrder 𝕆\ninst✝³ : Preorder α\ninst✝² : OrderTop 𝕆\ninst✝¹ : OrderTop α\ninst✝ : GradeMaxOrder 𝕆 α\n⊢ Eq (grade 𝕆 Top.top) Top.top","decl":"@[simp]\ntheorem grade_top [OrderTop 𝕆] [OrderTop α] [GradeMaxOrder 𝕆 α] : grade 𝕆 (⊤ : α) = ⊤ :=\n  (isMax_top.grade _).eq_top\n\n"}
{"name":"grade_self","module":"Mathlib.Order.Grade","initialProofState":"α : Type u_3\ninst✝ : Preorder α\na : α\n⊢ Eq (grade α a) a","decl":"@[simp]\ntheorem grade_self (a : α) : grade α a = a :=\n  rfl\n\n"}
{"name":"grade_toDual","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeOrder 𝕆 α\na : α\n⊢ Eq (grade (OrderDual 𝕆) (OrderDual.toDual a)) (OrderDual.toDual (grade 𝕆 a))","decl":"@[simp]\ntheorem grade_toDual [GradeOrder 𝕆 α] (a : α) : grade 𝕆ᵒᵈ (toDual a) = toDual (grade 𝕆 a) :=\n  rfl\n\n"}
{"name":"grade_ofDual","module":"Mathlib.Order.Grade","initialProofState":"𝕆 : Type u_1\nα : Type u_3\ninst✝² : Preorder 𝕆\ninst✝¹ : Preorder α\ninst✝ : GradeOrder 𝕆 α\na : OrderDual α\n⊢ Eq (grade 𝕆 (OrderDual.ofDual a)) (OrderDual.ofDual (grade (OrderDual 𝕆) a))","decl":"@[simp]\ntheorem grade_ofDual [GradeOrder 𝕆 α] (a : αᵒᵈ) : grade 𝕆 (ofDual a) = ofDual (grade 𝕆ᵒᵈ a) :=\n  rfl\n\n"}
{"name":"GradeOrder.wellFoundedLT","module":"Mathlib.Order.Grade","initialProofState":"α : Type u_3\ninst✝³ : Preorder α\n𝕆 : Type u_5\ninst✝² : Preorder 𝕆\ninst✝¹ : GradeOrder 𝕆 α\ninst✝ : WellFoundedLT 𝕆\n⊢ WellFoundedLT α","decl":"theorem GradeOrder.wellFoundedLT (𝕆 : Type*) [Preorder 𝕆] [GradeOrder 𝕆 α]\n    [WellFoundedLT 𝕆] : WellFoundedLT α :=\n  (grade_strictMono (𝕆 := 𝕆)).wellFoundedLT\n\n"}
{"name":"GradeOrder.wellFoundedGT","module":"Mathlib.Order.Grade","initialProofState":"α : Type u_3\ninst✝³ : Preorder α\n𝕆 : Type u_5\ninst✝² : Preorder 𝕆\ninst✝¹ : GradeOrder 𝕆 α\ninst✝ : WellFoundedGT 𝕆\n⊢ WellFoundedGT α","decl":"theorem GradeOrder.wellFoundedGT (𝕆 : Type*) [Preorder 𝕆] [GradeOrder 𝕆 α]\n    [WellFoundedGT 𝕆] : WellFoundedGT α :=\n  (grade_strictMono (𝕆 := 𝕆)).wellFoundedGT\n\n"}
{"name":"instWellFoundedLTOfGradeOrderNat","module":"Mathlib.Order.Grade","initialProofState":"α : Type u_3\ninst✝¹ : Preorder α\ninst✝ : GradeOrder Nat α\n⊢ WellFoundedLT α","decl":"instance [GradeOrder ℕ α] : WellFoundedLT α :=\n  GradeOrder.wellFoundedLT ℕ\n\n"}
{"name":"instWellFoundedGTOfGradeOrderOrderDualNat","module":"Mathlib.Order.Grade","initialProofState":"α : Type u_3\ninst✝¹ : Preorder α\ninst✝ : GradeOrder (OrderDual Nat) α\n⊢ WellFoundedGT α","decl":"instance [GradeOrder ℕᵒᵈ α] : WellFoundedGT α :=\n  GradeOrder.wellFoundedGT ℕᵒᵈ\n"}
