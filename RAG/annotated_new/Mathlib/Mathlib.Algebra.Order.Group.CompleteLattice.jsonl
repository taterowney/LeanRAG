{"name":"ciSup_mul","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : Group G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : MulRightMono G\nhf : BddAbove (Set.range f)\na : G\n⊢ Eq (HMul.hMul (iSup fun i => f i) a) (iSup fun i => HMul.hMul (f i) a)","decl":"@[to_additive]\nlemma ciSup_mul (hf : BddAbove (range f)) (a : G) : (⨆ i, f i) * a = ⨆ i, f i * a :=\n  (OrderIso.mulRight a).map_ciSup hf\n\n"}
{"name":"ciSup_add","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : AddGroup G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : AddRightMono G\nhf : BddAbove (Set.range f)\na : G\n⊢ Eq (HAdd.hAdd (iSup fun i => f i) a) (iSup fun i => HAdd.hAdd (f i) a)","decl":"@[to_additive]\nlemma ciSup_mul (hf : BddAbove (range f)) (a : G) : (⨆ i, f i) * a = ⨆ i, f i * a :=\n  (OrderIso.mulRight a).map_ciSup hf\n\n"}
{"name":"ciSup_sub","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : AddGroup G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : AddRightMono G\nhf : BddAbove (Set.range f)\na : G\n⊢ Eq (HSub.hSub (iSup fun i => f i) a) (iSup fun i => HSub.hSub (f i) a)","decl":"@[to_additive]\nlemma ciSup_div (hf : BddAbove (range f)) (a : G) : (⨆ i, f i) / a = ⨆ i, f i / a := by\n  simp only [div_eq_mul_inv, ciSup_mul hf]\n\n"}
{"name":"ciSup_div","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : Group G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : MulRightMono G\nhf : BddAbove (Set.range f)\na : G\n⊢ Eq (HDiv.hDiv (iSup fun i => f i) a) (iSup fun i => HDiv.hDiv (f i) a)","decl":"@[to_additive]\nlemma ciSup_div (hf : BddAbove (range f)) (a : G) : (⨆ i, f i) / a = ⨆ i, f i / a := by\n  simp only [div_eq_mul_inv, ciSup_mul hf]\n\n"}
{"name":"ciInf_add","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : AddGroup G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : AddRightMono G\nhf : BddBelow (Set.range f)\na : G\n⊢ Eq (HAdd.hAdd (iInf fun i => f i) a) (iInf fun i => HAdd.hAdd (f i) a)","decl":"@[to_additive]\nlemma ciInf_mul (hf : BddBelow (range f)) (a : G) : (⨅ i, f i) * a = ⨅ i, f i * a :=\n  (OrderIso.mulRight a).map_ciInf hf\n\n"}
{"name":"ciInf_mul","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : Group G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : MulRightMono G\nhf : BddBelow (Set.range f)\na : G\n⊢ Eq (HMul.hMul (iInf fun i => f i) a) (iInf fun i => HMul.hMul (f i) a)","decl":"@[to_additive]\nlemma ciInf_mul (hf : BddBelow (range f)) (a : G) : (⨅ i, f i) * a = ⨅ i, f i * a :=\n  (OrderIso.mulRight a).map_ciInf hf\n\n"}
{"name":"ciInf_div","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : Group G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : MulRightMono G\nhf : BddBelow (Set.range f)\na : G\n⊢ Eq (HDiv.hDiv (iInf fun i => f i) a) (iInf fun i => HDiv.hDiv (f i) a)","decl":"@[to_additive]\nlemma ciInf_div (hf : BddBelow (range f)) (a : G) : (⨅ i, f i) / a = ⨅ i, f i / a := by\n  simp only [div_eq_mul_inv, ciInf_mul hf]\n\n"}
{"name":"ciInf_sub","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : AddGroup G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : AddRightMono G\nhf : BddBelow (Set.range f)\na : G\n⊢ Eq (HSub.hSub (iInf fun i => f i) a) (iInf fun i => HSub.hSub (f i) a)","decl":"@[to_additive]\nlemma ciInf_div (hf : BddBelow (range f)) (a : G) : (⨅ i, f i) / a = ⨅ i, f i / a := by\n  simp only [div_eq_mul_inv, ciInf_mul hf]\n\n"}
{"name":"add_ciSup","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : AddGroup G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : AddLeftMono G\nhf : BddAbove (Set.range f)\na : G\n⊢ Eq (HAdd.hAdd a (iSup fun i => f i)) (iSup fun i => HAdd.hAdd a (f i))","decl":"@[to_additive]\nlemma mul_ciSup (hf : BddAbove (range f)) (a : G) : (a * ⨆ i, f i) = ⨆ i, a * f i :=\n  (OrderIso.mulLeft a).map_ciSup hf\n\n"}
{"name":"mul_ciSup","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : Group G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : MulLeftMono G\nhf : BddAbove (Set.range f)\na : G\n⊢ Eq (HMul.hMul a (iSup fun i => f i)) (iSup fun i => HMul.hMul a (f i))","decl":"@[to_additive]\nlemma mul_ciSup (hf : BddAbove (range f)) (a : G) : (a * ⨆ i, f i) = ⨆ i, a * f i :=\n  (OrderIso.mulLeft a).map_ciSup hf\n\n"}
{"name":"add_ciInf","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : AddGroup G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : AddLeftMono G\nhf : BddBelow (Set.range f)\na : G\n⊢ Eq (HAdd.hAdd a (iInf fun i => f i)) (iInf fun i => HAdd.hAdd a (f i))","decl":"@[to_additive]\nlemma mul_ciInf (hf : BddBelow (range f)) (a : G) : (a * ⨅ i, f i) = ⨅ i, a * f i :=\n  (OrderIso.mulLeft a).map_ciInf hf\n\n"}
{"name":"mul_ciInf","module":"Mathlib.Algebra.Order.Group.CompleteLattice","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝³ : Group G\ninst✝² : ConditionallyCompleteLattice G\ninst✝¹ : Nonempty ι\nf : ι → G\ninst✝ : MulLeftMono G\nhf : BddBelow (Set.range f)\na : G\n⊢ Eq (HMul.hMul a (iInf fun i => f i)) (iInf fun i => HMul.hMul a (f i))","decl":"@[to_additive]\nlemma mul_ciInf (hf : BddBelow (range f)) (a : G) : (a * ⨅ i, f i) = ⨅ i, a * f i :=\n  (OrderIso.mulLeft a).map_ciInf hf\n\n"}
