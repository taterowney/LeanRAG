{"name":"SupHom.map_sup'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Max α\ninst✝ : Max β\nself : SupHom α β\na b : α\n⊢ Eq (self.toFun (Max.max a b)) (Max.max (self.toFun a) (self.toFun b))","decl":"/-- The type of `⊔`-preserving functions from `α` to `β`. -/\nstructure SupHom (α β : Type*) [Max α] [Max β] where\n  /-- The underlying function of a `SupHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- A `SupHom` preserves suprema.\n\n  Do not use this directly. Use `map_sup` instead. -/\n  map_sup' (a b : α) : toFun (a ⊔ b) = toFun a ⊔ toFun b\n\n"}
{"name":"SupHom.mk.injEq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Max α\ninst✝ : Max β\ntoFun✝ : α → β\nmap_sup'✝ : ∀ (a b : α), Eq (toFun✝ (Max.max a b)) (Max.max (toFun✝ a) (toFun✝ b))\ntoFun : α → β\nmap_sup' : ∀ (a b : α), Eq (toFun (Max.max a b)) (Max.max (toFun a) (toFun b))\n⊢ Eq (Eq { toFun := toFun✝, map_sup' := map_sup'✝ } { toFun := toFun, map_sup' := map_sup' }) (Eq toFun✝ toFun)","decl":"/-- The type of `⊔`-preserving functions from `α` to `β`. -/\nstructure SupHom (α β : Type*) [Max α] [Max β] where\n  /-- The underlying function of a `SupHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- A `SupHom` preserves suprema.\n\n  Do not use this directly. Use `map_sup` instead. -/\n  map_sup' (a b : α) : toFun (a ⊔ b) = toFun a ⊔ toFun b\n\n"}
{"name":"SupHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Max α\ninst✝² : Max β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoFun : α → β\nmap_sup' : ∀ (a b : α), Eq (toFun (Max.max a b)) (Max.max (toFun a) (toFun b))\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, map_sup' := map_sup' }) 1","decl":"/-- The type of `⊔`-preserving functions from `α` to `β`. -/\nstructure SupHom (α β : Type*) [Max α] [Max β] where\n  /-- The underlying function of a `SupHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- A `SupHom` preserves suprema.\n\n  Do not use this directly. Use `map_sup` instead. -/\n  map_sup' (a b : α) : toFun (a ⊔ b) = toFun a ⊔ toFun b\n\n"}
{"name":"SupHom.mk.inj","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Max α\ninst✝ : Max β\ntoFun✝ : α → β\nmap_sup'✝ : ∀ (a b : α), Eq (toFun✝ (Max.max a b)) (Max.max (toFun✝ a) (toFun✝ b))\ntoFun : α → β\nmap_sup' : ∀ (a b : α), Eq (toFun (Max.max a b)) (Max.max (toFun a) (toFun b))\nx✝ : Eq { toFun := toFun✝, map_sup' := map_sup'✝ } { toFun := toFun, map_sup' := map_sup' }\n⊢ Eq toFun✝ toFun","decl":"/-- The type of `⊔`-preserving functions from `α` to `β`. -/\nstructure SupHom (α β : Type*) [Max α] [Max β] where\n  /-- The underlying function of a `SupHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- A `SupHom` preserves suprema.\n\n  Do not use this directly. Use `map_sup` instead. -/\n  map_sup' (a b : α) : toFun (a ⊔ b) = toFun a ⊔ toFun b\n\n"}
{"name":"InfHom.mk.inj","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Min α\ninst✝ : Min β\ntoFun✝ : α → β\nmap_inf'✝ : ∀ (a b : α), Eq (toFun✝ (Min.min a b)) (Min.min (toFun✝ a) (toFun✝ b))\ntoFun : α → β\nmap_inf' : ∀ (a b : α), Eq (toFun (Min.min a b)) (Min.min (toFun a) (toFun b))\nx✝ : Eq { toFun := toFun✝, map_inf' := map_inf'✝ } { toFun := toFun, map_inf' := map_inf' }\n⊢ Eq toFun✝ toFun","decl":"/-- The type of `⊓`-preserving functions from `α` to `β`. -/\nstructure InfHom (α β : Type*) [Min α] [Min β] where\n  /-- The underlying function of an `InfHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- An `InfHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"InfHom.mk.injEq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Min α\ninst✝ : Min β\ntoFun✝ : α → β\nmap_inf'✝ : ∀ (a b : α), Eq (toFun✝ (Min.min a b)) (Min.min (toFun✝ a) (toFun✝ b))\ntoFun : α → β\nmap_inf' : ∀ (a b : α), Eq (toFun (Min.min a b)) (Min.min (toFun a) (toFun b))\n⊢ Eq (Eq { toFun := toFun✝, map_inf' := map_inf'✝ } { toFun := toFun, map_inf' := map_inf' }) (Eq toFun✝ toFun)","decl":"/-- The type of `⊓`-preserving functions from `α` to `β`. -/\nstructure InfHom (α β : Type*) [Min α] [Min β] where\n  /-- The underlying function of an `InfHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- An `InfHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"InfHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Min α\ninst✝² : Min β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoFun : α → β\nmap_inf' : ∀ (a b : α), Eq (toFun (Min.min a b)) (Min.min (toFun a) (toFun b))\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, map_inf' := map_inf' }) 1","decl":"/-- The type of `⊓`-preserving functions from `α` to `β`. -/\nstructure InfHom (α β : Type*) [Min α] [Min β] where\n  /-- The underlying function of an `InfHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- An `InfHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"InfHom.map_inf'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Min α\ninst✝ : Min β\nself : InfHom α β\na b : α\n⊢ Eq (self.toFun (Min.min a b)) (Min.min (self.toFun a) (self.toFun b))","decl":"/-- The type of `⊓`-preserving functions from `α` to `β`. -/\nstructure InfHom (α β : Type*) [Min α] [Min β] where\n  /-- The underlying function of an `InfHom`.\n\n  Do not use this function directly. Instead use the coercion coming from the `FunLike`\n  instance. -/\n  toFun : α → β\n  /-- An `InfHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"SupBotHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝⁵ : Max α\ninst✝⁴ : Max β\ninst✝³ : Bot α\ninst✝² : Bot β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoSupHom : SupHom α β\nmap_bot' : Eq (toSupHom.toFun Bot.bot) Bot.bot\n⊢ Eq (SizeOf.sizeOf { toSupHom := toSupHom, map_bot' := map_bot' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toSupHom)) (SizeOf.sizeOf map_bot'))","decl":"/-- The type of finitary supremum-preserving homomorphisms from `α` to `β`. -/\nstructure SupBotHom (α β : Type*) [Max α] [Max β] [Bot α] [Bot β] extends SupHom α β where\n  /-- A `SupBotHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n"}
{"name":"SupBotHom.mk.injEq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Max α\ninst✝² : Max β\ninst✝¹ : Bot α\ninst✝ : Bot β\ntoSupHom✝ : SupHom α β\nmap_bot'✝ : Eq (toSupHom✝.toFun Bot.bot) Bot.bot\ntoSupHom : SupHom α β\nmap_bot' : Eq (toSupHom.toFun Bot.bot) Bot.bot\n⊢ Eq (Eq { toSupHom := toSupHom✝, map_bot' := map_bot'✝ } { toSupHom := toSupHom, map_bot' := map_bot' }) (Eq toSupHom✝ toSupHom)","decl":"/-- The type of finitary supremum-preserving homomorphisms from `α` to `β`. -/\nstructure SupBotHom (α β : Type*) [Max α] [Max β] [Bot α] [Bot β] extends SupHom α β where\n  /-- A `SupBotHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n"}
{"name":"SupBotHom.mk.inj","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Max α\ninst✝² : Max β\ninst✝¹ : Bot α\ninst✝ : Bot β\ntoSupHom✝ : SupHom α β\nmap_bot'✝ : Eq (toSupHom✝.toFun Bot.bot) Bot.bot\ntoSupHom : SupHom α β\nmap_bot' : Eq (toSupHom.toFun Bot.bot) Bot.bot\nx✝ : Eq { toSupHom := toSupHom✝, map_bot' := map_bot'✝ } { toSupHom := toSupHom, map_bot' := map_bot' }\n⊢ Eq toSupHom✝ toSupHom","decl":"/-- The type of finitary supremum-preserving homomorphisms from `α` to `β`. -/\nstructure SupBotHom (α β : Type*) [Max α] [Max β] [Bot α] [Bot β] extends SupHom α β where\n  /-- A `SupBotHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n"}
{"name":"SupBotHom.map_bot'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Max α\ninst✝² : Max β\ninst✝¹ : Bot α\ninst✝ : Bot β\nself : SupBotHom α β\n⊢ Eq (self.toFun Bot.bot) Bot.bot","decl":"/-- The type of finitary supremum-preserving homomorphisms from `α` to `β`. -/\nstructure SupBotHom (α β : Type*) [Max α] [Max β] [Bot α] [Bot β] extends SupHom α β where\n  /-- A `SupBotHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n"}
{"name":"InfTopHom.map_top'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Min α\ninst✝² : Min β\ninst✝¹ : Top α\ninst✝ : Top β\nself : InfTopHom α β\n⊢ Eq (self.toFun Top.top) Top.top","decl":"/-- The type of finitary infimum-preserving homomorphisms from `α` to `β`. -/\nstructure InfTopHom (α β : Type*) [Min α] [Min β] [Top α] [Top β] extends InfHom α β where\n  /-- An `InfTopHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n\n"}
{"name":"InfTopHom.mk.inj","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Min α\ninst✝² : Min β\ninst✝¹ : Top α\ninst✝ : Top β\ntoInfHom✝ : InfHom α β\nmap_top'✝ : Eq (toInfHom✝.toFun Top.top) Top.top\ntoInfHom : InfHom α β\nmap_top' : Eq (toInfHom.toFun Top.top) Top.top\nx✝ : Eq { toInfHom := toInfHom✝, map_top' := map_top'✝ } { toInfHom := toInfHom, map_top' := map_top' }\n⊢ Eq toInfHom✝ toInfHom","decl":"/-- The type of finitary infimum-preserving homomorphisms from `α` to `β`. -/\nstructure InfTopHom (α β : Type*) [Min α] [Min β] [Top α] [Top β] extends InfHom α β where\n  /-- An `InfTopHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n\n"}
{"name":"InfTopHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝⁵ : Min α\ninst✝⁴ : Min β\ninst✝³ : Top α\ninst✝² : Top β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoInfHom : InfHom α β\nmap_top' : Eq (toInfHom.toFun Top.top) Top.top\n⊢ Eq (SizeOf.sizeOf { toInfHom := toInfHom, map_top' := map_top' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toInfHom)) (SizeOf.sizeOf map_top'))","decl":"/-- The type of finitary infimum-preserving homomorphisms from `α` to `β`. -/\nstructure InfTopHom (α β : Type*) [Min α] [Min β] [Top α] [Top β] extends InfHom α β where\n  /-- An `InfTopHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n\n"}
{"name":"InfTopHom.mk.injEq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Min α\ninst✝² : Min β\ninst✝¹ : Top α\ninst✝ : Top β\ntoInfHom✝ : InfHom α β\nmap_top'✝ : Eq (toInfHom✝.toFun Top.top) Top.top\ntoInfHom : InfHom α β\nmap_top' : Eq (toInfHom.toFun Top.top) Top.top\n⊢ Eq (Eq { toInfHom := toInfHom✝, map_top' := map_top'✝ } { toInfHom := toInfHom, map_top' := map_top' }) (Eq toInfHom✝ toInfHom)","decl":"/-- The type of finitary infimum-preserving homomorphisms from `α` to `β`. -/\nstructure InfTopHom (α β : Type*) [Min α] [Min β] [Top α] [Top β] extends InfHom α β where\n  /-- An `InfTopHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n\n"}
{"name":"LatticeHom.map_inf'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nself : LatticeHom α β\na b : α\n⊢ Eq (self.toFun (Min.min a b)) (Min.min (self.toFun a) (self.toFun b))","decl":"/-- The type of lattice homomorphisms from `α` to `β`. -/\nstructure LatticeHom (α β : Type*) [Lattice α] [Lattice β] extends SupHom α β where\n  /-- A `LatticeHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"LatticeHom.mk.inj","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Lattice α\ninst✝ : Lattice β\ntoSupHom✝ : SupHom α β\nmap_inf'✝ : ∀ (a b : α), Eq (toSupHom✝.toFun (Min.min a b)) (Min.min (toSupHom✝.toFun a) (toSupHom✝.toFun b))\ntoSupHom : SupHom α β\nmap_inf' : ∀ (a b : α), Eq (toSupHom.toFun (Min.min a b)) (Min.min (toSupHom.toFun a) (toSupHom.toFun b))\nx✝ : Eq { toSupHom := toSupHom✝, map_inf' := map_inf'✝ } { toSupHom := toSupHom, map_inf' := map_inf' }\n⊢ Eq toSupHom✝ toSupHom","decl":"/-- The type of lattice homomorphisms from `α` to `β`. -/\nstructure LatticeHom (α β : Type*) [Lattice α] [Lattice β] extends SupHom α β where\n  /-- A `LatticeHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"LatticeHom.mk.injEq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : Lattice α\ninst✝ : Lattice β\ntoSupHom✝ : SupHom α β\nmap_inf'✝ : ∀ (a b : α), Eq (toSupHom✝.toFun (Min.min a b)) (Min.min (toSupHom✝.toFun a) (toSupHom✝.toFun b))\ntoSupHom : SupHom α β\nmap_inf' : ∀ (a b : α), Eq (toSupHom.toFun (Min.min a b)) (Min.min (toSupHom.toFun a) (toSupHom.toFun b))\n⊢ Eq (Eq { toSupHom := toSupHom✝, map_inf' := map_inf'✝ } { toSupHom := toSupHom, map_inf' := map_inf' }) (Eq toSupHom✝ toSupHom)","decl":"/-- The type of lattice homomorphisms from `α` to `β`. -/\nstructure LatticeHom (α β : Type*) [Lattice α] [Lattice β] extends SupHom α β where\n  /-- A `LatticeHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"LatticeHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoSupHom : SupHom α β\nmap_inf' : ∀ (a b : α), Eq (toSupHom.toFun (Min.min a b)) (Min.min (toSupHom.toFun a) (toSupHom.toFun b))\n⊢ Eq (SizeOf.sizeOf { toSupHom := toSupHom, map_inf' := map_inf' }) (HAdd.hAdd 1 (SizeOf.sizeOf toSupHom))","decl":"/-- The type of lattice homomorphisms from `α` to `β`. -/\nstructure LatticeHom (α β : Type*) [Lattice α] [Lattice β] extends SupHom α β where\n  /-- A `LatticeHom` preserves infima.\n\n  Do not use this directly. Use `map_inf` instead. -/\n  map_inf' (a b : α) : toFun (a ⊓ b) = toFun a ⊓ toFun b\n\n"}
{"name":"BoundedLatticeHom.mk.inj","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\ntoLatticeHom✝ : LatticeHom α β\nmap_top'✝ : Eq (toLatticeHom✝.toFun Top.top) Top.top\nmap_bot'✝ : Eq (toLatticeHom✝.toFun Bot.bot) Bot.bot\ntoLatticeHom : LatticeHom α β\nmap_top' : Eq (toLatticeHom.toFun Top.top) Top.top\nmap_bot' : Eq (toLatticeHom.toFun Bot.bot) Bot.bot\nx✝ : Eq { toLatticeHom := toLatticeHom✝, map_top' := map_top'✝, map_bot' := map_bot'✝ } { toLatticeHom := toLatticeHom, map_top' := map_top', map_bot' := map_bot' }\n⊢ Eq toLatticeHom✝ toLatticeHom","decl":"/-- The type of bounded lattice homomorphisms from `α` to `β`. -/\nstructure BoundedLatticeHom (α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] extends LatticeHom α β where\n  /-- A `BoundedLatticeHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n  /-- A `BoundedLatticeHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: remove this configuration and use the default configuration.\n-- We keep this to be consistent with Lean 3.\n"}
{"name":"BoundedLatticeHom.map_bot'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nself : BoundedLatticeHom α β\n⊢ Eq (self.toFun Bot.bot) Bot.bot","decl":"/-- The type of bounded lattice homomorphisms from `α` to `β`. -/\nstructure BoundedLatticeHom (α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] extends LatticeHom α β where\n  /-- A `BoundedLatticeHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n  /-- A `BoundedLatticeHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: remove this configuration and use the default configuration.\n-- We keep this to be consistent with Lean 3.\n"}
{"name":"BoundedLatticeHom.map_top'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nself : BoundedLatticeHom α β\n⊢ Eq (self.toFun Top.top) Top.top","decl":"/-- The type of bounded lattice homomorphisms from `α` to `β`. -/\nstructure BoundedLatticeHom (α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] extends LatticeHom α β where\n  /-- A `BoundedLatticeHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n  /-- A `BoundedLatticeHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: remove this configuration and use the default configuration.\n-- We keep this to be consistent with Lean 3.\n"}
{"name":"BoundedLatticeHom.mk.injEq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\ntoLatticeHom✝ : LatticeHom α β\nmap_top'✝ : Eq (toLatticeHom✝.toFun Top.top) Top.top\nmap_bot'✝ : Eq (toLatticeHom✝.toFun Bot.bot) Bot.bot\ntoLatticeHom : LatticeHom α β\nmap_top' : Eq (toLatticeHom.toFun Top.top) Top.top\nmap_bot' : Eq (toLatticeHom.toFun Bot.bot) Bot.bot\n⊢ Eq (Eq { toLatticeHom := toLatticeHom✝, map_top' := map_top'✝, map_bot' := map_bot'✝ } { toLatticeHom := toLatticeHom, map_top' := map_top', map_bot' := map_bot' }) (Eq toLatticeHom✝ toLatticeHom)","decl":"/-- The type of bounded lattice homomorphisms from `α` to `β`. -/\nstructure BoundedLatticeHom (α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] extends LatticeHom α β where\n  /-- A `BoundedLatticeHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n  /-- A `BoundedLatticeHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: remove this configuration and use the default configuration.\n-- We keep this to be consistent with Lean 3.\n"}
{"name":"BoundedLatticeHom.mk.sizeOf_spec","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : BoundedOrder α\ninst✝² : BoundedOrder β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoLatticeHom : LatticeHom α β\nmap_top' : Eq (toLatticeHom.toFun Top.top) Top.top\nmap_bot' : Eq (toLatticeHom.toFun Bot.bot) Bot.bot\n⊢ Eq (SizeOf.sizeOf { toLatticeHom := toLatticeHom, map_top' := map_top', map_bot' := map_bot' }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLatticeHom)) (SizeOf.sizeOf map_top')) (SizeOf.sizeOf map_bot'))","decl":"/-- The type of bounded lattice homomorphisms from `α` to `β`. -/\nstructure BoundedLatticeHom (α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] extends LatticeHom α β where\n  /-- A `BoundedLatticeHom` preserves the top element.\n\n  Do not use this directly. Use `map_top` instead. -/\n  map_top' : toFun ⊤ = ⊤\n  /-- A `BoundedLatticeHom` preserves the bottom element.\n\n  Do not use this directly. Use `map_bot` instead. -/\n  map_bot' : toFun ⊥ = ⊥\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: remove this configuration and use the default configuration.\n-- We keep this to be consistent with Lean 3.\n"}
{"name":"SupHomClass.map_sup","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : FunLike F α β\nself : SupHomClass F α β\nf : F\na b : α\n⊢ Eq (f (Max.max a b)) (Max.max (f a) (f b))","decl":"/-- `SupHomClass F α β` states that `F` is a type of `⊔`-preserving morphisms.\n\nYou should extend this class when you extend `SupHom`. -/\nclass SupHomClass (F α β : Type*) [Max α] [Max β] [FunLike F α β] : Prop where\n  /-- A `SupHomClass` morphism preserves suprema. -/\n  map_sup (f : F) (a b : α) : f (a ⊔ b) = f a ⊔ f b\n\n"}
{"name":"InfHomClass.map_inf","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : FunLike F α β\nself : InfHomClass F α β\nf : F\na b : α\n⊢ Eq (f (Min.min a b)) (Min.min (f a) (f b))","decl":"/-- `InfHomClass F α β` states that `F` is a type of `⊓`-preserving morphisms.\n\nYou should extend this class when you extend `InfHom`. -/\nclass InfHomClass (F α β : Type*) [Min α] [Min β] [FunLike F α β] : Prop where\n  /-- An `InfHomClass` morphism preserves infima. -/\n  map_inf (f : F) (a b : α) : f (a ⊓ b) = f a ⊓ f b\n\n"}
{"name":"SupBotHomClass.toSupHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Max α\ninst✝³ : Max β\ninst✝² : Bot α\ninst✝¹ : Bot β\ninst✝ : FunLike F α β\nself : SupBotHomClass F α β\n⊢ SupHomClass F α β","decl":"/-- `SupBotHomClass F α β` states that `F` is a type of finitary supremum-preserving morphisms.\n\nYou should extend this class when you extend `SupBotHom`. -/\nclass SupBotHomClass (F α β : Type*) [Max α] [Max β] [Bot α] [Bot β] [FunLike F α β]\n  extends SupHomClass F α β : Prop where\n  /-- A `SupBotHomClass` morphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n\n"}
{"name":"SupBotHomClass.map_bot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Max α\ninst✝³ : Max β\ninst✝² : Bot α\ninst✝¹ : Bot β\ninst✝ : FunLike F α β\nself : SupBotHomClass F α β\nf : F\n⊢ Eq (f Bot.bot) Bot.bot","decl":"/-- `SupBotHomClass F α β` states that `F` is a type of finitary supremum-preserving morphisms.\n\nYou should extend this class when you extend `SupBotHom`. -/\nclass SupBotHomClass (F α β : Type*) [Max α] [Max β] [Bot α] [Bot β] [FunLike F α β]\n  extends SupHomClass F α β : Prop where\n  /-- A `SupBotHomClass` morphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n\n"}
{"name":"InfTopHomClass.toInfHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Min α\ninst✝³ : Min β\ninst✝² : Top α\ninst✝¹ : Top β\ninst✝ : FunLike F α β\nself : InfTopHomClass F α β\n⊢ InfHomClass F α β","decl":"/-- `InfTopHomClass F α β` states that `F` is a type of finitary infimum-preserving morphisms.\n\nYou should extend this class when you extend `SupBotHom`. -/\nclass InfTopHomClass (F α β : Type*) [Min α] [Min β] [Top α] [Top β] [FunLike F α β]\n  extends InfHomClass F α β : Prop where\n  /-- An `InfTopHomClass` morphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n\n"}
{"name":"InfTopHomClass.map_top","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Min α\ninst✝³ : Min β\ninst✝² : Top α\ninst✝¹ : Top β\ninst✝ : FunLike F α β\nself : InfTopHomClass F α β\nf : F\n⊢ Eq (f Top.top) Top.top","decl":"/-- `InfTopHomClass F α β` states that `F` is a type of finitary infimum-preserving morphisms.\n\nYou should extend this class when you extend `SupBotHom`. -/\nclass InfTopHomClass (F α β : Type*) [Min α] [Min β] [Top α] [Top β] [FunLike F α β]\n  extends InfHomClass F α β : Prop where\n  /-- An `InfTopHomClass` morphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n\n"}
{"name":"LatticeHomClass.toSupHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : FunLike F α β\nself : LatticeHomClass F α β\n⊢ SupHomClass F α β","decl":"/-- `LatticeHomClass F α β` states that `F` is a type of lattice morphisms.\n\nYou should extend this class when you extend `LatticeHom`. -/\nclass LatticeHomClass (F α β : Type*) [Lattice α] [Lattice β] [FunLike F α β]\n  extends SupHomClass F α β : Prop where\n  /-- A `LatticeHomClass` morphism preserves infima. -/\n  map_inf (f : F) (a b : α) : f (a ⊓ b) = f a ⊓ f b\n\n"}
{"name":"LatticeHomClass.map_inf","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : FunLike F α β\nself : LatticeHomClass F α β\nf : F\na b : α\n⊢ Eq (f (Min.min a b)) (Min.min (f a) (f b))","decl":"/-- `LatticeHomClass F α β` states that `F` is a type of lattice morphisms.\n\nYou should extend this class when you extend `LatticeHom`. -/\nclass LatticeHomClass (F α β : Type*) [Lattice α] [Lattice β] [FunLike F α β]\n  extends SupHomClass F α β : Prop where\n  /-- A `LatticeHomClass` morphism preserves infima. -/\n  map_inf (f : F) (a b : α) : f (a ⊓ b) = f a ⊓ f b\n\n"}
{"name":"BoundedLatticeHomClass.map_top","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : FunLike F α β\nself : BoundedLatticeHomClass F α β\nf : F\n⊢ Eq (f Top.top) Top.top","decl":"/-- `BoundedLatticeHomClass F α β` states that `F` is a type of bounded lattice morphisms.\n\nYou should extend this class when you extend `BoundedLatticeHom`. -/\nclass BoundedLatticeHomClass (F α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] [FunLike F α β] extends LatticeHomClass F α β : Prop where\n  /-- A `BoundedLatticeHomClass` morphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n  /-- A `BoundedLatticeHomClass` morphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n\n"}
{"name":"BoundedLatticeHomClass.map_bot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : FunLike F α β\nself : BoundedLatticeHomClass F α β\nf : F\n⊢ Eq (f Bot.bot) Bot.bot","decl":"/-- `BoundedLatticeHomClass F α β` states that `F` is a type of bounded lattice morphisms.\n\nYou should extend this class when you extend `BoundedLatticeHom`. -/\nclass BoundedLatticeHomClass (F α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] [FunLike F α β] extends LatticeHomClass F α β : Prop where\n  /-- A `BoundedLatticeHomClass` morphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n  /-- A `BoundedLatticeHomClass` morphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n\n"}
{"name":"BoundedLatticeHomClass.toLatticeHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : FunLike F α β\nself : BoundedLatticeHomClass F α β\n⊢ LatticeHomClass F α β","decl":"/-- `BoundedLatticeHomClass F α β` states that `F` is a type of bounded lattice morphisms.\n\nYou should extend this class when you extend `BoundedLatticeHom`. -/\nclass BoundedLatticeHomClass (F α β : Type*) [Lattice α] [Lattice β] [BoundedOrder α]\n  [BoundedOrder β] [FunLike F α β] extends LatticeHomClass F α β : Prop where\n  /-- A `BoundedLatticeHomClass` morphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n  /-- A `BoundedLatticeHomClass` morphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n\n"}
{"name":"SupHomClass.toOrderHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : FunLike F α β\ninst✝² : SemilatticeSup α\ninst✝¹ : SemilatticeSup β\ninst✝ : SupHomClass F α β\n⊢ OrderHomClass F α β","decl":"instance (priority := 100) SupHomClass.toOrderHomClass [SemilatticeSup α] [SemilatticeSup β]\n    [SupHomClass F α β] : OrderHomClass F α β :=\n  { ‹SupHomClass F α β› with\n    map_rel := fun f a b h => by rw [← sup_eq_right, ← map_sup, sup_eq_right.2 h] }\n\n-- See note [lower instance priority]\n"}
{"name":"InfHomClass.toOrderHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : FunLike F α β\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\ninst✝ : InfHomClass F α β\n⊢ OrderHomClass F α β","decl":"instance (priority := 100) InfHomClass.toOrderHomClass [SemilatticeInf α] [SemilatticeInf β]\n    [InfHomClass F α β] : OrderHomClass F α β :=\n  { ‹InfHomClass F α β› with\n    map_rel := fun f a b h => by rw [← inf_eq_left, ← map_inf, inf_eq_left.2 h] }\n\n-- See note [lower instance priority]\n"}
{"name":"SupBotHomClass.toBotHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : FunLike F α β\ninst✝⁴ : Max α\ninst✝³ : Max β\ninst✝² : Bot α\ninst✝¹ : Bot β\ninst✝ : SupBotHomClass F α β\n⊢ BotHomClass F α β","decl":"instance (priority := 100) SupBotHomClass.toBotHomClass [Max α] [Max β] [Bot α]\n    [Bot β] [SupBotHomClass F α β] : BotHomClass F α β :=\n  { ‹SupBotHomClass F α β› with }\n\n-- See note [lower instance priority]\n"}
{"name":"InfTopHomClass.toTopHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : FunLike F α β\ninst✝⁴ : Min α\ninst✝³ : Min β\ninst✝² : Top α\ninst✝¹ : Top β\ninst✝ : InfTopHomClass F α β\n⊢ TopHomClass F α β","decl":"instance (priority := 100) InfTopHomClass.toTopHomClass [Min α] [Min β] [Top α]\n    [Top β] [InfTopHomClass F α β] : TopHomClass F α β :=\n  { ‹InfTopHomClass F α β› with }\n\n-- See note [lower instance priority]\n"}
{"name":"LatticeHomClass.toInfHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : FunLike F α β\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : LatticeHomClass F α β\n⊢ InfHomClass F α β","decl":"instance (priority := 100) LatticeHomClass.toInfHomClass [Lattice α] [Lattice β]\n    [LatticeHomClass F α β] : InfHomClass F α β :=\n  { ‹LatticeHomClass F α β› with }\n\n-- See note [lower instance priority]\n"}
{"name":"BoundedLatticeHomClass.toSupBotHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : FunLike F α β\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedLatticeHomClass F α β\n⊢ SupBotHomClass F α β","decl":"instance (priority := 100) BoundedLatticeHomClass.toSupBotHomClass [Lattice α] [Lattice β]\n    [BoundedOrder α] [BoundedOrder β] [BoundedLatticeHomClass F α β] :\n    SupBotHomClass F α β :=\n  { ‹BoundedLatticeHomClass F α β› with }\n\n-- See note [lower instance priority]\n"}
{"name":"BoundedLatticeHomClass.toInfTopHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : FunLike F α β\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedLatticeHomClass F α β\n⊢ InfTopHomClass F α β","decl":"instance (priority := 100) BoundedLatticeHomClass.toInfTopHomClass [Lattice α] [Lattice β]\n    [BoundedOrder α] [BoundedOrder β] [BoundedLatticeHomClass F α β] :\n    InfTopHomClass F α β :=\n  { ‹BoundedLatticeHomClass F α β› with }\n\n-- See note [lower instance priority]\n"}
{"name":"BoundedLatticeHomClass.toBoundedOrderHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : FunLike F α β\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedLatticeHomClass F α β\n⊢ BoundedOrderHomClass F α β","decl":"instance (priority := 100) BoundedLatticeHomClass.toBoundedOrderHomClass [Lattice α]\n    [Lattice β] [BoundedOrder α] [BoundedOrder β] [BoundedLatticeHomClass F α β] :\n    BoundedOrderHomClass F α β :=\n{ show OrderHomClass F α β from inferInstance, ‹BoundedLatticeHomClass F α β› with }\n\n"}
{"name":"OrderIsoClass.toSupHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : EquivLike F α β\ninst✝² : SemilatticeSup α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderIsoClass F α β\n⊢ SupHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toSupHomClass [SemilatticeSup α] [SemilatticeSup β]\n    [OrderIsoClass F α β] : SupHomClass F α β :=\n  { show OrderHomClass F α β from inferInstance with\n    map_sup := fun f a b =>\n      eq_of_forall_ge_iff fun c => by simp only [← le_map_inv_iff, sup_le_iff] }\n\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toInfHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : EquivLike F α β\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderIsoClass F α β\n⊢ InfHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toInfHomClass [SemilatticeInf α] [SemilatticeInf β]\n    [OrderIsoClass F α β] : InfHomClass F α β :=\n  { show OrderHomClass F α β from inferInstance with\n    map_inf := fun f a b =>\n      eq_of_forall_le_iff fun c => by simp only [← map_inv_le_iff, le_inf_iff] }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toSupBotHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : EquivLike F α β\ninst✝⁴ : SemilatticeSup α\ninst✝³ : OrderBot α\ninst✝² : SemilatticeSup β\ninst✝¹ : OrderBot β\ninst✝ : OrderIsoClass F α β\n⊢ SupBotHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toSupBotHomClass [SemilatticeSup α] [OrderBot α]\n    [SemilatticeSup β] [OrderBot β] [OrderIsoClass F α β] : SupBotHomClass F α β :=\n  { OrderIsoClass.toSupHomClass, OrderIsoClass.toBotHomClass with }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toInfTopHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : EquivLike F α β\ninst✝⁴ : SemilatticeInf α\ninst✝³ : OrderTop α\ninst✝² : SemilatticeInf β\ninst✝¹ : OrderTop β\ninst✝ : OrderIsoClass F α β\n⊢ InfTopHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toInfTopHomClass [SemilatticeInf α] [OrderTop α]\n    [SemilatticeInf β] [OrderTop β] [OrderIsoClass F α β] : InfTopHomClass F α β :=\n  { OrderIsoClass.toInfHomClass, OrderIsoClass.toTopHomClass with }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toLatticeHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : EquivLike F α β\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : OrderIsoClass F α β\n⊢ LatticeHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toLatticeHomClass [Lattice α] [Lattice β]\n    [OrderIsoClass F α β] : LatticeHomClass F α β :=\n  { OrderIsoClass.toSupHomClass, OrderIsoClass.toInfHomClass with }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toBoundedLatticeHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : EquivLike F α β\ninst✝⁴ : Lattice α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : OrderIsoClass F α β\n⊢ BoundedLatticeHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toBoundedLatticeHomClass [Lattice α] [Lattice β]\n    [BoundedOrder α] [BoundedOrder β] [OrderIsoClass F α β] :\n    BoundedLatticeHomClass F α β :=\n  { OrderIsoClass.toLatticeHomClass, OrderIsoClass.toBoundedOrderHomClass with }\n\n"}
{"name":"orderEmbeddingOfInjective_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : FunLike F α β\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\nf : F\ninst✝ : InfHomClass F α β\nhf : Function.Injective ⇑f\na : α\n⊢ Eq ((orderEmbeddingOfInjective f hf) a) (f a)","decl":"/-- We can regard an injective map preserving binary infima as an order embedding. -/\n@[simps! apply]\ndef orderEmbeddingOfInjective [SemilatticeInf α] [SemilatticeInf β] (f : F) [InfHomClass F α β]\n    (hf : Injective f) : α ↪o β :=\n  OrderEmbedding.ofMapLEIff f (fun x y ↦ by\n    refine ⟨fun h ↦ ?_, fun h ↦ OrderHomClass.mono f h⟩\n    rwa [← inf_eq_left, ← hf.eq_iff, map_inf, inf_eq_left])\n\n"}
{"name":"Disjoint.map","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : Lattice α\ninst✝⁴ : BoundedOrder α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder β\ninst✝¹ : FunLike F α β\ninst✝ : BoundedLatticeHomClass F α β\nf : F\na b : α\nh : Disjoint a b\n⊢ Disjoint (f a) (f b)","decl":"theorem Disjoint.map (h : Disjoint a b) : Disjoint (f a) (f b) := by\n  rw [disjoint_iff, ← map_inf, h.eq_bot, map_bot]\n\n"}
{"name":"Codisjoint.map","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : Lattice α\ninst✝⁴ : BoundedOrder α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder β\ninst✝¹ : FunLike F α β\ninst✝ : BoundedLatticeHomClass F α β\nf : F\na b : α\nh : Codisjoint a b\n⊢ Codisjoint (f a) (f b)","decl":"theorem Codisjoint.map (h : Codisjoint a b) : Codisjoint (f a) (f b) := by\n  rw [codisjoint_iff, ← map_sup, h.eq_top, map_top]\n\n"}
{"name":"IsCompl.map","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : Lattice α\ninst✝⁴ : BoundedOrder α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder β\ninst✝¹ : FunLike F α β\ninst✝ : BoundedLatticeHomClass F α β\nf : F\na b : α\nh : IsCompl a b\n⊢ IsCompl (f a) (f b)","decl":"theorem IsCompl.map (h : IsCompl a b) : IsCompl (f a) (f b) :=\n  ⟨h.1.map _, h.2.map _⟩\n\n"}
{"name":"map_compl'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : BooleanAlgebra α\ninst✝² : BooleanAlgebra β\ninst✝¹ : FunLike F α β\ninst✝ : BoundedLatticeHomClass F α β\nf : F\na : α\n⊢ Eq (f (HasCompl.compl a)) (HasCompl.compl (f a))","decl":"/-- Special case of `map_compl` for boolean algebras. -/\ntheorem map_compl' (a : α) : f aᶜ = (f a)ᶜ :=\n  (isCompl_compl.map _).compl_eq.symm\n\n"}
{"name":"map_sdiff'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : BooleanAlgebra α\ninst✝² : BooleanAlgebra β\ninst✝¹ : FunLike F α β\ninst✝ : BoundedLatticeHomClass F α β\nf : F\na b : α\n⊢ Eq (f (SDiff.sdiff a b)) (SDiff.sdiff (f a) (f b))","decl":"/-- Special case of `map_sdiff` for boolean algebras. -/\ntheorem map_sdiff' (a b : α) : f (a \\ b) = f a \\ f b := by\n  rw [sdiff_eq, sdiff_eq, map_inf, map_compl']\n\n"}
{"name":"map_symmDiff'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : BooleanAlgebra α\ninst✝² : BooleanAlgebra β\ninst✝¹ : FunLike F α β\ninst✝ : BoundedLatticeHomClass F α β\nf : F\na b : α\n⊢ Eq (f (symmDiff a b)) (symmDiff (f a) (f b))","decl":"open scoped symmDiff in\n/-- Special case of `map_symmDiff` for boolean algebras. -/\ntheorem map_symmDiff' (a b : α) : f (a ∆ b) = f a ∆ f b := by\n  rw [symmDiff, symmDiff, map_sup, map_sdiff', map_sdiff']\n\n"}
{"name":"SupHom.instSupHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\n⊢ SupHomClass (SupHom α β) α β","decl":"instance : SupHomClass (SupHom α β) α β where\n  map_sup := SupHom.map_sup'\n\n"}
{"name":"SupHom.toFun_eq_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : SupHom α β\n⊢ Eq f.toFun ⇑f","decl":"@[simp] lemma toFun_eq_coe (f : SupHom α β) : f.toFun = f := rfl\n\n"}
{"name":"SupHom.coe_mk","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : α → β\nhf : ∀ (a b : α), Eq (f (Max.max a b)) (Max.max (f a) (f b))\n⊢ Eq (⇑{ toFun := f, map_sup' := hf }) f","decl":"@[simp, norm_cast] lemma coe_mk (f : α → β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"SupHom.ext","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf g : SupHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : SupHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SupHom.ext_iff","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf g : SupHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : SupHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SupHom.coe_copy","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : SupHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : SupHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"SupHom.copy_eq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : SupHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : SupHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"SupHom.coe_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Max α\n⊢ Eq (⇑(SupHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(SupHom.id α) = id :=\n  rfl\n\n"}
{"name":"SupHom.id_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Max α\na : α\n⊢ Eq ((SupHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : SupHom.id α a = a :=\n  rfl\n\n"}
{"name":"SupHom.coe_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : Max γ\nf : SupHom β γ\ng : SupHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : SupHom β γ) (g : SupHom α β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"SupHom.comp_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : Max γ\nf : SupHom β γ\ng : SupHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : SupHom β γ) (g : SupHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"SupHom.comp_assoc","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\nδ : Type u_6\ninst✝³ : Max α\ninst✝² : Max β\ninst✝¹ : Max γ\ninst✝ : Max δ\nf : SupHom γ δ\ng : SupHom β γ\nh : SupHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : SupHom γ δ) (g : SupHom β γ) (h : SupHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"SupHom.comp_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : SupHom α β\n⊢ Eq (f.comp (SupHom.id α)) f","decl":"@[simp] theorem comp_id (f : SupHom α β) : f.comp (SupHom.id α) = f := rfl\n\n"}
{"name":"SupHom.id_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : SupHom α β\n⊢ Eq ((SupHom.id β).comp f) f","decl":"@[simp] theorem id_comp (f : SupHom α β) : (SupHom.id β).comp f = f := rfl\n\n"}
{"name":"SupHom.cancel_right","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : Max γ\ng₁ g₂ : SupHom β γ\nf : SupHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : SupHom β γ} {f : SupHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => SupHom.ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"SupHom.cancel_left","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : Max γ\ng : SupHom β γ\nf₁ f₂ : SupHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : SupHom β γ} {f₁ f₂ : SupHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => SupHom.ext fun a => hg <| by rw [← SupHom.comp_apply, h, SupHom.comp_apply],\n    congr_arg _⟩\n\n"}
{"name":"SupHom.coe_const","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : SemilatticeSup β\nb : β\n⊢ Eq (⇑(SupHom.const α b)) (Function.const α b)","decl":"@[simp]\ntheorem coe_const (b : β) : ⇑(const α b) = Function.const α b :=\n  rfl\n\n"}
{"name":"SupHom.const_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : SemilatticeSup β\nb : β\na : α\n⊢ Eq ((SupHom.const α b) a) b","decl":"@[simp]\ntheorem const_apply (b : β) (a : α) : const α b a = b :=\n  rfl\n\n"}
{"name":"SupHom.coe_sup","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : SemilatticeSup β\nf g : SupHom α β\n⊢ Eq ⇑(Max.max f g) ⇑(Max.max f g)","decl":"@[simp]\ntheorem coe_sup (f g : SupHom α β) : DFunLike.coe (f ⊔ g) = f ⊔ g :=\n  rfl\n\n"}
{"name":"SupHom.coe_bot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Max α\ninst✝¹ : SemilatticeSup β\ninst✝ : Bot β\n⊢ Eq (⇑Bot.bot) Bot.bot","decl":"@[simp]\ntheorem coe_bot [Bot β] : ⇑(⊥ : SupHom α β) = ⊥ :=\n  rfl\n\n"}
{"name":"SupHom.coe_top","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Max α\ninst✝¹ : SemilatticeSup β\ninst✝ : Top β\n⊢ Eq (⇑Top.top) Top.top","decl":"@[simp]\ntheorem coe_top [Top β] : ⇑(⊤ : SupHom α β) = ⊤ :=\n  rfl\n\n"}
{"name":"SupHom.sup_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : SemilatticeSup β\nf g : SupHom α β\na : α\n⊢ Eq ((Max.max f g) a) (Max.max (f a) (g a))","decl":"@[simp]\ntheorem sup_apply (f g : SupHom α β) (a : α) : (f ⊔ g) a = f a ⊔ g a :=\n  rfl\n\n"}
{"name":"SupHom.bot_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Max α\ninst✝¹ : SemilatticeSup β\ninst✝ : Bot β\na : α\n⊢ Eq (Bot.bot a) Bot.bot","decl":"@[simp]\ntheorem bot_apply [Bot β] (a : α) : (⊥ : SupHom α β) a = ⊥ :=\n  rfl\n\n"}
{"name":"SupHom.top_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Max α\ninst✝¹ : SemilatticeSup β\ninst✝ : Top β\na : α\n⊢ Eq (Top.top a) Top.top","decl":"@[simp]\ntheorem top_apply [Top β] (a : α) : (⊤ : SupHom α β) a = ⊤ :=\n  rfl\n\n"}
{"name":"SupHom.subtypeVal_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝ : SemilatticeSup β\nP : β → Prop\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\nx : Subtype fun x => P x\n⊢ Eq ((SupHom.subtypeVal Psup) x) ↑x","decl":"@[simp]\nlemma subtypeVal_apply {P : β → Prop}\n    (Psup : ∀ ⦃x y : β⦄, P x → P y → P (x ⊔ y)) (x : {x : β // P x}) :\n    subtypeVal Psup x = x := rfl\n\n"}
{"name":"SupHom.subtypeVal_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝ : SemilatticeSup β\nP : β → Prop\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\n⊢ Eq (⇑(SupHom.subtypeVal Psup)) Subtype.val","decl":"@[simp]\nlemma subtypeVal_coe {P : β → Prop}\n    (Psup : ∀ ⦃x y : β⦄, P x → P y → P (x ⊔ y)) :\n    ⇑(subtypeVal Psup) = Subtype.val := rfl\n\n"}
{"name":"InfHom.instInfHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\n⊢ InfHomClass (InfHom α β) α β","decl":"instance : InfHomClass (InfHom α β) α β where\n  map_inf := InfHom.map_inf'\n\n"}
{"name":"InfHom.toFun_eq_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : InfHom α β\n⊢ Eq f.toFun ⇑f","decl":"@[simp] lemma toFun_eq_coe (f : InfHom α β) : f.toFun = (f : α → β) := rfl\n\n"}
{"name":"InfHom.coe_mk","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : α → β\nhf : ∀ (a b : α), Eq (f (Min.min a b)) (Min.min (f a) (f b))\n⊢ Eq (⇑{ toFun := f, map_inf' := hf }) f","decl":"@[simp, norm_cast] lemma coe_mk (f : α → β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"InfHom.ext","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf g : InfHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : InfHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"InfHom.ext_iff","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf g : InfHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : InfHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"InfHom.coe_copy","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : InfHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : InfHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"InfHom.copy_eq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : InfHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : InfHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"InfHom.coe_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Min α\n⊢ Eq (⇑(InfHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(InfHom.id α) = id :=\n  rfl\n\n"}
{"name":"InfHom.id_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Min α\na : α\n⊢ Eq ((InfHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : InfHom.id α a = a :=\n  rfl\n\n"}
{"name":"InfHom.coe_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : Min γ\nf : InfHom β γ\ng : InfHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : InfHom β γ) (g : InfHom α β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"InfHom.comp_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : Min γ\nf : InfHom β γ\ng : InfHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : InfHom β γ) (g : InfHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"InfHom.comp_assoc","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\nδ : Type u_6\ninst✝³ : Min α\ninst✝² : Min β\ninst✝¹ : Min γ\ninst✝ : Min δ\nf : InfHom γ δ\ng : InfHom β γ\nh : InfHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : InfHom γ δ) (g : InfHom β γ) (h : InfHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"InfHom.comp_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : InfHom α β\n⊢ Eq (f.comp (InfHom.id α)) f","decl":"@[simp] theorem comp_id (f : InfHom α β) : f.comp (InfHom.id α) = f := rfl\n\n"}
{"name":"InfHom.id_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : InfHom α β\n⊢ Eq ((InfHom.id β).comp f) f","decl":"@[simp] theorem id_comp (f : InfHom α β) : (InfHom.id β).comp f = f := rfl\n\n"}
{"name":"InfHom.cancel_right","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : Min γ\ng₁ g₂ : InfHom β γ\nf : InfHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : InfHom β γ} {f : InfHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => InfHom.ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"InfHom.cancel_left","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : Min γ\ng : InfHom β γ\nf₁ f₂ : InfHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : InfHom β γ} {f₁ f₂ : InfHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => InfHom.ext fun a => hg <| by rw [← InfHom.comp_apply, h, InfHom.comp_apply],\n    congr_arg _⟩\n\n"}
{"name":"InfHom.coe_const","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : SemilatticeInf β\nb : β\n⊢ Eq (⇑(InfHom.const α b)) (Function.const α b)","decl":"@[simp]\ntheorem coe_const (b : β) : ⇑(const α b) = Function.const α b :=\n  rfl\n\n"}
{"name":"InfHom.const_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : SemilatticeInf β\nb : β\na : α\n⊢ Eq ((InfHom.const α b) a) b","decl":"@[simp]\ntheorem const_apply (b : β) (a : α) : const α b a = b :=\n  rfl\n\n"}
{"name":"InfHom.coe_inf","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : SemilatticeInf β\nf g : InfHom α β\n⊢ Eq ⇑(Min.min f g) ⇑(Min.min f g)","decl":"@[simp]\ntheorem coe_inf (f g : InfHom α β) : DFunLike.coe (f ⊓ g) = f ⊓ g :=\n  rfl\n\n"}
{"name":"InfHom.coe_bot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Min α\ninst✝¹ : SemilatticeInf β\ninst✝ : Bot β\n⊢ Eq (⇑Bot.bot) Bot.bot","decl":"@[simp]\ntheorem coe_bot [Bot β] : ⇑(⊥ : InfHom α β) = ⊥ :=\n  rfl\n\n"}
{"name":"InfHom.coe_top","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Min α\ninst✝¹ : SemilatticeInf β\ninst✝ : Top β\n⊢ Eq (⇑Top.top) Top.top","decl":"@[simp]\ntheorem coe_top [Top β] : ⇑(⊤ : InfHom α β) = ⊤ :=\n  rfl\n\n"}
{"name":"InfHom.inf_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : SemilatticeInf β\nf g : InfHom α β\na : α\n⊢ Eq ((Min.min f g) a) (Min.min (f a) (g a))","decl":"@[simp]\ntheorem inf_apply (f g : InfHom α β) (a : α) : (f ⊓ g) a = f a ⊓ g a :=\n  rfl\n\n"}
{"name":"InfHom.bot_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Min α\ninst✝¹ : SemilatticeInf β\ninst✝ : Bot β\na : α\n⊢ Eq (Bot.bot a) Bot.bot","decl":"@[simp]\ntheorem bot_apply [Bot β] (a : α) : (⊥ : InfHom α β) a = ⊥ :=\n  rfl\n\n"}
{"name":"InfHom.top_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Min α\ninst✝¹ : SemilatticeInf β\ninst✝ : Top β\na : α\n⊢ Eq (Top.top a) Top.top","decl":"@[simp]\ntheorem top_apply [Top β] (a : α) : (⊤ : InfHom α β) a = ⊤ :=\n  rfl\n\n"}
{"name":"InfHom.subtypeVal_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝ : SemilatticeInf β\nP : β → Prop\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\nx : Subtype fun x => P x\n⊢ Eq ((InfHom.subtypeVal Pinf) x) ↑x","decl":"@[simp]\nlemma subtypeVal_apply {P : β → Prop}\n    (Pinf : ∀ ⦃x y : β⦄, P x → P y → P (x ⊓ y)) (x : {x : β // P x}) :\n    subtypeVal Pinf x = x := rfl\n\n"}
{"name":"InfHom.subtypeVal_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝ : SemilatticeInf β\nP : β → Prop\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\n⊢ Eq (⇑(InfHom.subtypeVal Pinf)) Subtype.val","decl":"@[simp]\nlemma subtypeVal_coe {P : β → Prop}\n    (Pinf : ∀ ⦃x y : β⦄, P x → P y → P (x ⊓ y)) :\n    ⇑(subtypeVal Pinf) = Subtype.val := rfl\n\n"}
{"name":"SupBotHom.instSupBotHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\n⊢ SupBotHomClass (SupBotHom α β) α β","decl":"instance : SupBotHomClass (SupBotHom α β) α β where\n  map_sup f := f.map_sup'\n  map_bot f := f.map_bot'\n\n"}
{"name":"SupBotHom.toFun_eq_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\n⊢ Eq f.toFun ⇑f","decl":"lemma toFun_eq_coe (f : SupBotHom α β) : f.toFun = f := rfl\n\n"}
{"name":"SupBotHom.coe_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\n⊢ Eq ⇑f.toSupHom ⇑f","decl":"@[simp] lemma coe_toSupHom (f : SupBotHom α β) : ⇑f.toSupHom = f := rfl\n"}
{"name":"SupBotHom.coe_toBotHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\n⊢ Eq ⇑f.toBotHom ⇑f","decl":"@[simp] lemma coe_toBotHom (f : SupBotHom α β) : ⇑f.toBotHom = f := rfl\n"}
{"name":"SupBotHom.coe_mk","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupHom α β\nhf : Eq (f.toFun Bot.bot) Bot.bot\n⊢ Eq ⇑{ toSupHom := f, map_bot' := hf } ⇑f","decl":"@[simp] lemma coe_mk (f : SupHom α β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"SupBotHom.ext","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf g : SupBotHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : SupBotHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SupBotHom.ext_iff","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf g : SupBotHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : SupBotHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SupBotHom.coe_copy","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : SupBotHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"SupBotHom.copy_eq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : SupBotHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"SupBotHom.id_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Max α\ninst✝ : Bot α\n⊢ Eq (SupBotHom.id α).toSupHom (SupHom.id α)","decl":"/-- `id` as a `SupBotHom`. -/\n@[simps]\nprotected def id : SupBotHom α α :=\n  ⟨SupHom.id α, rfl⟩\n\n"}
{"name":"SupBotHom.coe_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Max α\ninst✝ : Bot α\n⊢ Eq (⇑(SupBotHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(SupBotHom.id α) = id :=\n  rfl\n\n"}
{"name":"SupBotHom.id_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Max α\ninst✝ : Bot α\na : α\n⊢ Eq ((SupBotHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : SupBotHom.id α a = a :=\n  rfl\n\n"}
{"name":"SupBotHom.coe_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Max α\ninst✝⁴ : Bot α\ninst✝³ : Max β\ninst✝² : Bot β\ninst✝¹ : Max γ\ninst✝ : Bot γ\nf : SupBotHom β γ\ng : SupBotHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : SupBotHom β γ) (g : SupBotHom α β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"SupBotHom.comp_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Max α\ninst✝⁴ : Bot α\ninst✝³ : Max β\ninst✝² : Bot β\ninst✝¹ : Max γ\ninst✝ : Bot γ\nf : SupBotHom β γ\ng : SupBotHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : SupBotHom β γ) (g : SupBotHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"SupBotHom.comp_assoc","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\nδ : Type u_6\ninst✝⁷ : Max α\ninst✝⁶ : Bot α\ninst✝⁵ : Max β\ninst✝⁴ : Bot β\ninst✝³ : Max γ\ninst✝² : Bot γ\ninst✝¹ : Max δ\ninst✝ : Bot δ\nf : SupBotHom γ δ\ng : SupBotHom β γ\nh : SupBotHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : SupBotHom γ δ) (g : SupBotHom β γ) (h : SupBotHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"SupBotHom.comp_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\n⊢ Eq (f.comp (SupBotHom.id α)) f","decl":"@[simp] theorem comp_id (f : SupBotHom α β) : f.comp (SupBotHom.id α) = f := rfl\n\n"}
{"name":"SupBotHom.id_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : Max β\ninst✝ : Bot β\nf : SupBotHom α β\n⊢ Eq ((SupBotHom.id β).comp f) f","decl":"@[simp] theorem id_comp (f : SupBotHom α β) : (SupBotHom.id β).comp f = f := rfl\n\n"}
{"name":"SupBotHom.cancel_right","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Max α\ninst✝⁴ : Bot α\ninst✝³ : Max β\ninst✝² : Bot β\ninst✝¹ : Max γ\ninst✝ : Bot γ\ng₁ g₂ : SupBotHom β γ\nf : SupBotHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : SupBotHom β γ} {f : SupBotHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"SupBotHom.cancel_left","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Max α\ninst✝⁴ : Bot α\ninst✝³ : Max β\ninst✝² : Bot β\ninst✝¹ : Max γ\ninst✝ : Bot γ\ng : SupBotHom β γ\nf₁ f₂ : SupBotHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : SupBotHom β γ} {f₁ f₂ : SupBotHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => SupBotHom.ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"SupBotHom.coe_sup","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\nf g : SupBotHom α β\n⊢ Eq ⇑(Max.max f g) ⇑(Max.max f g)","decl":"@[simp]\ntheorem coe_sup (f g : SupBotHom α β) : DFunLike.coe (f ⊔ g) = f ⊔ g :=\n  rfl\n\n"}
{"name":"SupBotHom.coe_bot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\n⊢ Eq (⇑Bot.bot) Bot.bot","decl":"@[simp]\ntheorem coe_bot : ⇑(⊥ : SupBotHom α β) = ⊥ :=\n  rfl\n\n"}
{"name":"SupBotHom.sup_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\nf g : SupBotHom α β\na : α\n⊢ Eq ((Max.max f g) a) (Max.max (f a) (g a))","decl":"@[simp]\ntheorem sup_apply (f g : SupBotHom α β) (a : α) : (f ⊔ g) a = f a ⊔ g a :=\n  rfl\n\n"}
{"name":"SupBotHom.bot_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Max α\ninst✝² : Bot α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\na : α\n⊢ Eq (Bot.bot a) Bot.bot","decl":"@[simp]\ntheorem bot_apply (a : α) : (⊥ : SupBotHom α β) a = ⊥ :=\n  rfl\n\n"}
{"name":"SupBotHom.subtypeVal_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\nP : β → Prop\nPbot : P Bot.bot\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\nx : Subtype fun x => P x\n⊢ Eq ((SupBotHom.subtypeVal Pbot Psup) x) ↑x","decl":"@[simp]\nlemma subtypeVal_apply {P : β → Prop}\n    (Pbot : P ⊥) (Psup : ∀ ⦃x y : β⦄, P x → P y → P (x ⊔ y)) (x : {x : β // P x}) :\n    subtypeVal Pbot Psup x = x := rfl\n\n"}
{"name":"SupBotHom.subtypeVal_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\nP : β → Prop\nPbot : P Bot.bot\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\n⊢ Eq (⇑(SupBotHom.subtypeVal Pbot Psup)) Subtype.val","decl":"@[simp]\nlemma subtypeVal_coe {P : β → Prop}\n    (Pbot : P ⊥) (Psup : ∀ ⦃x y : β⦄, P x → P y → P (x ⊔ y)) :\n    ⇑(subtypeVal Pbot Psup) = Subtype.val := rfl\n\n"}
{"name":"InfTopHom.instInfTopHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\n⊢ InfTopHomClass (InfTopHom α β) α β","decl":"instance : InfTopHomClass (InfTopHom α β) α β where\n  map_inf f := f.map_inf'\n  map_top f := f.map_top'\n\n"}
{"name":"InfTopHom.toFun_eq_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\n⊢ Eq f.toFun ⇑f","decl":"theorem toFun_eq_coe (f : InfTopHom α β) : f.toFun = f := rfl\n\n"}
{"name":"InfTopHom.coe_toInfHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\n⊢ Eq ⇑f.toInfHom ⇑f","decl":"@[simp] lemma coe_toInfHom (f : InfTopHom α β) : ⇑f.toInfHom = f := rfl\n"}
{"name":"InfTopHom.coe_toTopHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\n⊢ Eq ⇑f.toTopHom ⇑f","decl":"@[simp] lemma coe_toTopHom (f : InfTopHom α β) : ⇑f.toTopHom = f := rfl\n"}
{"name":"InfTopHom.coe_mk","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfHom α β\nhf : Eq (f.toFun Top.top) Top.top\n⊢ Eq ⇑{ toInfHom := f, map_top' := hf } ⇑f","decl":"@[simp] lemma coe_mk (f : InfHom α β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"InfTopHom.ext","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf g : InfTopHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : InfTopHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"InfTopHom.ext_iff","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf g : InfTopHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : InfTopHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"InfTopHom.coe_copy","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : InfTopHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"InfTopHom.copy_eq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : InfTopHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"InfTopHom.id_toInfHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Min α\ninst✝ : Top α\n⊢ Eq (InfTopHom.id α).toInfHom (InfHom.id α)","decl":"/-- `id` as an `InfTopHom`. -/\n@[simps]\nprotected def id : InfTopHom α α :=\n  ⟨InfHom.id α, rfl⟩\n\n"}
{"name":"InfTopHom.coe_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Min α\ninst✝ : Top α\n⊢ Eq (⇑(InfTopHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(InfTopHom.id α) = id :=\n  rfl\n\n"}
{"name":"InfTopHom.id_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Min α\ninst✝ : Top α\na : α\n⊢ Eq ((InfTopHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : InfTopHom.id α a = a :=\n  rfl\n\n"}
{"name":"InfTopHom.coe_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Min α\ninst✝⁴ : Top α\ninst✝³ : Min β\ninst✝² : Top β\ninst✝¹ : Min γ\ninst✝ : Top γ\nf : InfTopHom β γ\ng : InfTopHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : InfTopHom β γ) (g : InfTopHom α β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"InfTopHom.comp_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Min α\ninst✝⁴ : Top α\ninst✝³ : Min β\ninst✝² : Top β\ninst✝¹ : Min γ\ninst✝ : Top γ\nf : InfTopHom β γ\ng : InfTopHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : InfTopHom β γ) (g : InfTopHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"InfTopHom.comp_assoc","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\nδ : Type u_6\ninst✝⁷ : Min α\ninst✝⁶ : Top α\ninst✝⁵ : Min β\ninst✝⁴ : Top β\ninst✝³ : Min γ\ninst✝² : Top γ\ninst✝¹ : Min δ\ninst✝ : Top δ\nf : InfTopHom γ δ\ng : InfTopHom β γ\nh : InfTopHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : InfTopHom γ δ) (g : InfTopHom β γ) (h : InfTopHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"InfTopHom.comp_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\n⊢ Eq (f.comp (InfTopHom.id α)) f","decl":"@[simp] theorem comp_id (f : InfTopHom α β) : f.comp (InfTopHom.id α) = f := rfl\n\n"}
{"name":"InfTopHom.id_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\n⊢ Eq ((InfTopHom.id β).comp f) f","decl":"@[simp] theorem id_comp (f : InfTopHom α β) : (InfTopHom.id β).comp f = f := rfl\n\n"}
{"name":"InfTopHom.cancel_right","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Min α\ninst✝⁴ : Top α\ninst✝³ : Min β\ninst✝² : Top β\ninst✝¹ : Min γ\ninst✝ : Top γ\ng₁ g₂ : InfTopHom β γ\nf : InfTopHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : InfTopHom β γ} {f : InfTopHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"InfTopHom.cancel_left","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Min α\ninst✝⁴ : Top α\ninst✝³ : Min β\ninst✝² : Top β\ninst✝¹ : Min γ\ninst✝ : Top γ\ng : InfTopHom β γ\nf₁ f₂ : InfTopHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : InfTopHom β γ} {f₁ f₂ : InfTopHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => InfTopHom.ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"InfTopHom.coe_inf","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\nf g : InfTopHom α β\n⊢ Eq ⇑(Min.min f g) ⇑(Min.min f g)","decl":"@[simp]\ntheorem coe_inf (f g : InfTopHom α β) : DFunLike.coe (f ⊓ g) = f ⊓ g :=\n  rfl\n\n"}
{"name":"InfTopHom.coe_top","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\n⊢ Eq (⇑Top.top) Top.top","decl":"@[simp]\ntheorem coe_top : ⇑(⊤ : InfTopHom α β) = ⊤ :=\n  rfl\n\n"}
{"name":"InfTopHom.inf_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\nf g : InfTopHom α β\na : α\n⊢ Eq ((Min.min f g) a) (Min.min (f a) (g a))","decl":"@[simp]\ntheorem inf_apply (f g : InfTopHom α β) (a : α) : (f ⊓ g) a = f a ⊓ g a :=\n  rfl\n\n"}
{"name":"InfTopHom.top_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\na : α\n⊢ Eq (Top.top a) Top.top","decl":"@[simp]\ntheorem top_apply (a : α) : (⊤ : InfTopHom α β) a = ⊤ :=\n  rfl\n\n"}
{"name":"InfTopHom.subtypeVal_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\nP : β → Prop\nPtop : P Top.top\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\nx : Subtype fun x => P x\n⊢ Eq ((InfTopHom.subtypeVal Ptop Pinf) x) ↑x","decl":"@[simp]\nlemma subtypeVal_apply {P : β → Prop}\n    (Ptop : P ⊤) (Pinf : ∀ ⦃x y : β⦄, P x → P y → P (x ⊓ y)) (x : {x : β // P x}) :\n    subtypeVal Ptop Pinf x = x := rfl\n\n"}
{"name":"InfTopHom.subtypeVal_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\nP : β → Prop\nPtop : P Top.top\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\n⊢ Eq (⇑(InfTopHom.subtypeVal Ptop Pinf)) Subtype.val","decl":"@[simp]\nlemma subtypeVal_coe {P : β → Prop}\n    (Ptop : P ⊤) (Pinf : ∀ ⦃x y : β⦄, P x → P y → P (x ⊓ y)) :\n    ⇑(subtypeVal Ptop Pinf) = Subtype.val := rfl\n\n"}
{"name":"LatticeHom.instLatticeHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\n⊢ LatticeHomClass (LatticeHom α β) α β","decl":"instance : LatticeHomClass (LatticeHom α β) α β where\n  map_sup f := f.map_sup'\n  map_inf f := f.map_inf'\n\n"}
{"name":"LatticeHom.toFun_eq_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq f.toFun ⇑f","decl":"lemma toFun_eq_coe (f : LatticeHom α β) : f.toFun = f := rfl\n\n"}
{"name":"LatticeHom.coe_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq ⇑f.toSupHom ⇑f","decl":"@[simp] lemma coe_toSupHom (f : LatticeHom α β) : ⇑f.toSupHom = f := rfl\n"}
{"name":"LatticeHom.coe_toInfHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq ⇑f.toInfHom ⇑f","decl":"@[simp] lemma coe_toInfHom (f : LatticeHom α β) : ⇑f.toInfHom = f := rfl\n"}
{"name":"LatticeHom.coe_mk","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : SupHom α β\nhf : ∀ (a b : α), Eq (f.toFun (Min.min a b)) (Min.min (f.toFun a) (f.toFun b))\n⊢ Eq ⇑{ toSupHom := f, map_inf' := hf } ⇑f","decl":"@[simp] lemma coe_mk (f : SupHom α β) (hf) : ⇑(mk f hf) = f := rfl\n\n"}
{"name":"LatticeHom.ext","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf g : LatticeHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : LatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"LatticeHom.ext_iff","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf g : LatticeHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : LatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"LatticeHom.coe_copy","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : LatticeHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"LatticeHom.copy_eq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : LatticeHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"LatticeHom.coe_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\n⊢ Eq (⇑(LatticeHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(LatticeHom.id α) = id :=\n  rfl\n\n"}
{"name":"LatticeHom.id_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\na : α\n⊢ Eq ((LatticeHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : LatticeHom.id α a = a :=\n  rfl\n\n"}
{"name":"LatticeHom.coe_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : LatticeHom β γ) (g : LatticeHom α β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"LatticeHom.comp_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : LatticeHom β γ) (g : LatticeHom α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"LatticeHom.coe_comp_sup_hom'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq { toFun := Function.comp ⇑f ⇑g, map_sup' := ⋯ } ({ toFun := ⇑f, map_sup' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯ })","decl":"@[simp]\n-- Porting note: `simp`-normal form of `coe_comp_sup_hom`\ntheorem coe_comp_sup_hom' (f : LatticeHom β γ) (g : LatticeHom α β) :\n    ⟨f ∘ g, map_sup (f.comp g)⟩ = (f : SupHom β γ).comp g :=\n  rfl\n\n"}
{"name":"LatticeHom.coe_comp_sup_hom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq { toFun := ⇑(f.comp g), map_sup' := ⋯ } ({ toFun := ⇑f, map_sup' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯ })","decl":"theorem coe_comp_sup_hom (f : LatticeHom β γ) (g : LatticeHom α β) :\n    (f.comp g : SupHom α γ) = (f : SupHom β γ).comp g :=\n  rfl\n\n"}
{"name":"LatticeHom.coe_comp_inf_hom'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq { toFun := Function.comp ⇑f ⇑g, map_inf' := ⋯ } ({ toFun := ⇑f, map_inf' := ⋯ }.comp { toFun := ⇑g, map_inf' := ⋯ })","decl":"@[simp]\n-- Porting note: `simp`-normal form of `coe_comp_inf_hom`\ntheorem coe_comp_inf_hom' (f : LatticeHom β γ) (g : LatticeHom α β) :\n    ⟨f ∘ g, map_inf (f.comp g)⟩ = (f : InfHom β γ).comp g :=\n  rfl\n\n"}
{"name":"LatticeHom.coe_comp_inf_hom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq { toFun := ⇑(f.comp g), map_inf' := ⋯ } ({ toFun := ⇑f, map_inf' := ⋯ }.comp { toFun := ⇑g, map_inf' := ⋯ })","decl":"theorem coe_comp_inf_hom (f : LatticeHom β γ) (g : LatticeHom α β) :\n    (f.comp g : InfHom α γ) = (f : InfHom β γ).comp g :=\n  rfl\n\n"}
{"name":"LatticeHom.comp_assoc","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\nδ : Type u_6\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : Lattice γ\ninst✝ : Lattice δ\nf : LatticeHom γ δ\ng : LatticeHom β γ\nh : LatticeHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : LatticeHom γ δ) (g : LatticeHom β γ) (h : LatticeHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"LatticeHom.comp_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq (f.comp (LatticeHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : LatticeHom α β) : f.comp (LatticeHom.id α) = f :=\n  LatticeHom.ext fun _ => rfl\n\n"}
{"name":"LatticeHom.id_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq ((LatticeHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : LatticeHom α β) : (LatticeHom.id β).comp f = f :=\n  LatticeHom.ext fun _ => rfl\n\n"}
{"name":"LatticeHom.cancel_right","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\ng₁ g₂ : LatticeHom β γ\nf : LatticeHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : LatticeHom β γ} {f : LatticeHom α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => LatticeHom.ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"LatticeHom.cancel_left","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\ng : LatticeHom β γ\nf₁ f₂ : LatticeHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : LatticeHom β γ} {f₁ f₂ : LatticeHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => LatticeHom.ext fun a => hg <| by rw [← LatticeHom.comp_apply, h, LatticeHom.comp_apply],\n    congr_arg _⟩\n\n"}
{"name":"LatticeHom.subtypeVal_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝ : Lattice β\nP : β → Prop\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\nx : Subtype fun x => P x\n⊢ Eq ((LatticeHom.subtypeVal Psup Pinf) x) ↑x","decl":"@[simp]\nlemma subtypeVal_apply {P : β → Prop}\n    (Psup : ∀ ⦃x y⦄, P x → P y → P (x ⊔ y)) (Pinf : ∀ ⦃x y⦄, P x → P y → P (x ⊓ y))\n    (x : {x : β // P x}) :\n    subtypeVal Psup Pinf x = x := rfl\n\n"}
{"name":"LatticeHom.subtypeVal_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝ : Lattice β\nP : β → Prop\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\n⊢ Eq (⇑(LatticeHom.subtypeVal Psup Pinf)) Subtype.val","decl":"@[simp]\nlemma subtypeVal_coe {P : β → Prop}\n    (Psup : ∀ ⦃x y⦄, P x → P y → P (x ⊔ y)) (Pinf : ∀ ⦃x y⦄, P x → P y → P (x ⊓ y)) :\n    ⇑(subtypeVal Psup Pinf) = Subtype.val := rfl\n\n"}
{"name":"OrderHomClass.toLatticeHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝² : FunLike F α β\ninst✝¹ : LinearOrder α\ninst✝ : Lattice β\n⊢ LatticeHomClass F α β","decl":"/-- An order homomorphism from a linear order is a lattice homomorphism. -/\n-- Porting note: made it an `instance` because we're no longer afraid of loops\ninstance (priority := 100) toLatticeHomClass : LatticeHomClass F α β :=\n  { ‹OrderHomClass F α β› with\n    map_sup := fun f a b => by\n      obtain h | h := le_total a b\n      · rw [sup_eq_right.2 h, sup_eq_right.2 (OrderHomClass.mono f h : f a ≤ f b)]\n      · rw [sup_eq_left.2 h, sup_eq_left.2 (OrderHomClass.mono f h : f b ≤ f a)]\n    map_inf := fun f a b => by\n      obtain h | h := le_total a b\n      · rw [inf_eq_left.2 h, inf_eq_left.2 (OrderHomClass.mono f h : f a ≤ f b)]\n      · rw [inf_eq_right.2 h, inf_eq_right.2 (OrderHomClass.mono f h : f b ≤ f a)] }\n\n"}
{"name":"OrderHomClass.coe_to_lattice_hom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : FunLike F α β\ninst✝² : LinearOrder α\ninst✝¹ : Lattice β\ninst✝ : OrderHomClass F α β\nf : F\n⊢ Eq ⇑(OrderHomClass.toLatticeHom α β f) ⇑f","decl":"@[simp]\ntheorem coe_to_lattice_hom (f : F) : ⇑(toLatticeHom α β f) = f :=\n  rfl\n\n"}
{"name":"OrderHomClass.to_lattice_hom_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"F : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : FunLike F α β\ninst✝² : LinearOrder α\ninst✝¹ : Lattice β\ninst✝ : OrderHomClass F α β\nf : F\na : α\n⊢ Eq ((OrderHomClass.toLatticeHom α β f) a) (f a)","decl":"@[simp]\ntheorem to_lattice_hom_apply (f : F) (a : α) : toLatticeHom α β f a = f a :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.instBoundedLatticeHomClass","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\n⊢ BoundedLatticeHomClass (BoundedLatticeHom α β) α β","decl":"instance instBoundedLatticeHomClass : BoundedLatticeHomClass (BoundedLatticeHom α β) α β where\n  map_sup f := f.map_sup'\n  map_inf f := f.map_inf'\n  map_top f := f.map_top'\n  map_bot f := f.map_bot'\n\n"}
{"name":"BoundedLatticeHom.toFun_eq_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq f.toFun ⇑f","decl":"@[simp] lemma toFun_eq_coe (f : BoundedLatticeHom α β) : f.toFun = f := rfl\n\n"}
{"name":"BoundedLatticeHom.coe_toLatticeHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq ⇑f.toLatticeHom ⇑f","decl":"@[simp] lemma coe_toLatticeHom (f : BoundedLatticeHom α β) : ⇑f.toLatticeHom = f := rfl\n"}
{"name":"BoundedLatticeHom.coe_toSupBotHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq ⇑f.toSupBotHom ⇑f","decl":"@[simp] lemma coe_toSupBotHom (f : BoundedLatticeHom α β) : ⇑f.toSupBotHom = f := rfl\n"}
{"name":"BoundedLatticeHom.coe_toInfTopHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq ⇑f.toInfTopHom ⇑f","decl":"@[simp] lemma coe_toInfTopHom (f : BoundedLatticeHom α β) : ⇑f.toInfTopHom = f := rfl\n"}
{"name":"BoundedLatticeHom.coe_toBoundedOrderHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq ⇑f.toBoundedOrderHom ⇑f","decl":"@[simp] lemma coe_toBoundedOrderHom (f : BoundedLatticeHom α β) : ⇑f.toBoundedOrderHom = f := rfl\n"}
{"name":"BoundedLatticeHom.coe_mk","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : LatticeHom α β\nhf : Eq (f.toFun Top.top) Top.top\nhf' : Eq (f.toFun Bot.bot) Bot.bot\n⊢ Eq ⇑{ toLatticeHom := f, map_top' := hf, map_bot' := hf' } ⇑f","decl":"@[simp] lemma coe_mk (f : LatticeHom α β) (hf hf') : ⇑(mk f hf hf') = f := rfl\n\n"}
{"name":"BoundedLatticeHom.ext","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf g : BoundedLatticeHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : BoundedLatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"BoundedLatticeHom.ext_iff","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf g : BoundedLatticeHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : BoundedLatticeHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"BoundedLatticeHom.coe_copy","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : BoundedLatticeHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.copy_eq","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : BoundedLatticeHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"BoundedLatticeHom.coe_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Lattice α\ninst✝ : BoundedOrder α\n⊢ Eq (⇑(BoundedLatticeHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(BoundedLatticeHom.id α) = id :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.id_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Lattice α\ninst✝ : BoundedOrder α\na : α\n⊢ Eq ((BoundedLatticeHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : BoundedLatticeHom.id α a = a :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.comp_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) (a : α) :\n    (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp_lattice_hom'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq { toSupHom := { toFun := ⇑f, map_sup' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯ }, map_inf' := ⋯ } ({ toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯, map_inf' := ⋯ })","decl":"@[simp]\n-- Porting note: `simp`-normal form of `coe_comp_lattice_hom`\ntheorem coe_comp_lattice_hom' (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    (⟨(f : SupHom β γ).comp g, map_inf (f.comp g)⟩ : LatticeHom α γ) =\n      (f : LatticeHom β γ).comp g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp_lattice_hom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq { toFun := ⇑(f.comp g), map_sup' := ⋯, map_inf' := ⋯ } ({ toFun := ⇑f, map_sup' := ⋯, map_inf' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯, map_inf' := ⋯ })","decl":"theorem coe_comp_lattice_hom (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    (f.comp g : LatticeHom α γ) = (f : LatticeHom β γ).comp g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp_sup_hom'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq { toFun := Function.comp ⇑f ⇑g, map_sup' := ⋯ } ({ toFun := ⇑f, map_sup' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯ })","decl":"@[simp]\n-- Porting note: `simp`-normal form of `coe_comp_sup_hom`\ntheorem coe_comp_sup_hom' (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    ⟨f ∘ g, map_sup (f.comp g)⟩ = (f : SupHom β γ).comp g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp_sup_hom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq { toFun := ⇑(f.comp g), map_sup' := ⋯ } ({ toFun := ⇑f, map_sup' := ⋯ }.comp { toFun := ⇑g, map_sup' := ⋯ })","decl":"theorem coe_comp_sup_hom (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    (f.comp g : SupHom α γ) = (f : SupHom β γ).comp g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp_inf_hom'","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq { toFun := Function.comp ⇑f ⇑g, map_inf' := ⋯ } ({ toFun := ⇑f, map_inf' := ⋯ }.comp { toFun := ⇑g, map_inf' := ⋯ })","decl":"@[simp]\n-- Porting note: `simp`-normal form of `coe_comp_inf_hom`\ntheorem coe_comp_inf_hom' (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    ⟨f ∘ g, map_inf (f.comp g)⟩ = (f : InfHom β γ).comp g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.coe_comp_inf_hom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\nf : BoundedLatticeHom β γ\ng : BoundedLatticeHom α β\n⊢ Eq { toFun := ⇑(f.comp g), map_inf' := ⋯ } ({ toFun := ⇑f, map_inf' := ⋯ }.comp { toFun := ⇑g, map_inf' := ⋯ })","decl":"theorem coe_comp_inf_hom (f : BoundedLatticeHom β γ) (g : BoundedLatticeHom α β) :\n    (f.comp g : InfHom α γ) = (f : InfHom β γ).comp g :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.comp_assoc","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\nδ : Type u_6\ninst✝⁷ : Lattice α\ninst✝⁶ : Lattice β\ninst✝⁵ : Lattice γ\ninst✝⁴ : Lattice δ\ninst✝³ : BoundedOrder α\ninst✝² : BoundedOrder β\ninst✝¹ : BoundedOrder γ\ninst✝ : BoundedOrder δ\nf : BoundedLatticeHom γ δ\ng : BoundedLatticeHom β γ\nh : BoundedLatticeHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : BoundedLatticeHom γ δ) (g : BoundedLatticeHom β γ)\n    (h : BoundedLatticeHom α β) : (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.comp_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq (f.comp (BoundedLatticeHom.id α)) f","decl":"@[simp] theorem comp_id (f : BoundedLatticeHom α β) : f.comp (BoundedLatticeHom.id α) = f := rfl\n\n"}
{"name":"BoundedLatticeHom.id_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : Lattice β\ninst✝¹ : BoundedOrder α\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq ((BoundedLatticeHom.id β).comp f) f","decl":"@[simp] theorem id_comp (f : BoundedLatticeHom α β) : (BoundedLatticeHom.id β).comp f = f := rfl\n\n"}
{"name":"BoundedLatticeHom.cancel_right","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\ng₁ g₂ : BoundedLatticeHom β γ\nf : BoundedLatticeHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : BoundedLatticeHom β γ} {f : BoundedLatticeHom α β}\n    (hf : Surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => BoundedLatticeHom.ext <| hf.forall.2 <| DFunLike.ext_iff.1 h,\n    fun h => congr_arg₂ _ h rfl⟩\n\n"}
{"name":"BoundedLatticeHom.cancel_left","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : Lattice β\ninst✝³ : Lattice γ\ninst✝² : BoundedOrder α\ninst✝¹ : BoundedOrder β\ninst✝ : BoundedOrder γ\ng : BoundedLatticeHom β γ\nf₁ f₂ : BoundedLatticeHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : BoundedLatticeHom β γ} {f₁ f₂ : BoundedLatticeHom α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"BoundedLatticeHom.subtypeVal_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝¹ : Lattice β\ninst✝ : BoundedOrder β\nP : β → Prop\nPbot : P Bot.bot\nPtop : P Top.top\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\nx : Subtype fun x => P x\n⊢ Eq ((BoundedLatticeHom.subtypeVal Pbot Ptop Psup Pinf) x) ↑x","decl":"@[simp]\nlemma subtypeVal_apply {P : β → Prop}\n    (Pbot : P ⊥) (Ptop : P ⊤) (Psup : ∀ ⦃x y⦄, P x → P y → P (x ⊔ y))\n    (Pinf : ∀ ⦃x y⦄, P x → P y → P (x ⊓ y)) (x : {x : β // P x}) :\n    subtypeVal Pbot Ptop Psup Pinf x = x := rfl\n\n"}
{"name":"BoundedLatticeHom.subtypeVal_coe","module":"Mathlib.Order.Hom.Lattice","initialProofState":"β : Type u_4\ninst✝¹ : Lattice β\ninst✝ : BoundedOrder β\nP : β → Prop\nPbot : P Bot.bot\nPtop : P Top.top\nPsup : ∀ ⦃x y : β⦄, P x → P y → P (Max.max x y)\nPinf : ∀ ⦃x y : β⦄, P x → P y → P (Min.min x y)\n⊢ Eq (⇑(BoundedLatticeHom.subtypeVal Pbot Ptop Psup Pinf)) Subtype.val","decl":"@[simp]\nlemma subtypeVal_coe {P : β → Prop} (Pbot : P ⊥) (Ptop : P ⊤)\n    (Psup : ∀ ⦃x y⦄, P x → P y → P (x ⊔ y)) (Pinf : ∀ ⦃x y⦄, P x → P y → P (x ⊓ y)) :\n    ⇑(subtypeVal Pbot Ptop Psup Pinf) = Subtype.val := rfl\n\n"}
{"name":"SupHom.dual_apply_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : SupHom α β\na : α\n⊢ Eq ((SupHom.dual f) a) (f a)","decl":"/-- Reinterpret a supremum homomorphism as an infimum homomorphism between the dual lattices. -/\n@[simps]\nprotected def dual : SupHom α β ≃ InfHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨f, f.map_sup'⟩\n  invFun f := ⟨f, f.map_inf'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"SupHom.dual_symm_apply_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Max α\ninst✝ : Max β\nf : InfHom (OrderDual α) (OrderDual β)\na : OrderDual α\n⊢ Eq ((SupHom.dual.symm f) a) (f a)","decl":"/-- Reinterpret a supremum homomorphism as an infimum homomorphism between the dual lattices. -/\n@[simps]\nprotected def dual : SupHom α β ≃ InfHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨f, f.map_sup'⟩\n  invFun f := ⟨f, f.map_inf'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"SupHom.dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Max α\n⊢ Eq (SupHom.dual (SupHom.id α)) (InfHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : SupHom.dual (SupHom.id α) = InfHom.id _ :=\n  rfl\n\n"}
{"name":"SupHom.dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : Max γ\ng : SupHom β γ\nf : SupHom α β\n⊢ Eq (SupHom.dual (g.comp f)) ((SupHom.dual g).comp (SupHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : SupHom β γ) (f : SupHom α β) :\n    SupHom.dual (g.comp f) = (SupHom.dual g).comp (SupHom.dual f) :=\n  rfl\n\n"}
{"name":"SupHom.symm_dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Max α\n⊢ Eq (SupHom.dual.symm (InfHom.id (OrderDual α))) (SupHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : SupHom.dual.symm (InfHom.id _) = SupHom.id α :=\n  rfl\n\n"}
{"name":"SupHom.symm_dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Max α\ninst✝¹ : Max β\ninst✝ : Max γ\ng : InfHom (OrderDual β) (OrderDual γ)\nf : InfHom (OrderDual α) (OrderDual β)\n⊢ Eq (SupHom.dual.symm (g.comp f)) ((SupHom.dual.symm g).comp (SupHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : InfHom βᵒᵈ γᵒᵈ) (f : InfHom αᵒᵈ βᵒᵈ) :\n    SupHom.dual.symm (g.comp f) =\n      (SupHom.dual.symm g).comp (SupHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"InfHom.dual_apply_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : InfHom α β\na : α\n⊢ Eq ((InfHom.dual f) a) (f a)","decl":"/-- Reinterpret an infimum homomorphism as a supremum homomorphism between the dual lattices. -/\n@[simps]\nprotected def dual : InfHom α β ≃ SupHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨f, f.map_inf'⟩\n  invFun f := ⟨f, f.map_sup'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"InfHom.dual_symm_apply_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Min α\ninst✝ : Min β\nf : SupHom (OrderDual α) (OrderDual β)\na : OrderDual α\n⊢ Eq ((InfHom.dual.symm f) a) (f a)","decl":"/-- Reinterpret an infimum homomorphism as a supremum homomorphism between the dual lattices. -/\n@[simps]\nprotected def dual : InfHom α β ≃ SupHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨f, f.map_inf'⟩\n  invFun f := ⟨f, f.map_sup'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"InfHom.dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Min α\n⊢ Eq (InfHom.dual (InfHom.id α)) (SupHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : InfHom.dual (InfHom.id α) = SupHom.id _ :=\n  rfl\n\n"}
{"name":"InfHom.dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : Min γ\ng : InfHom β γ\nf : InfHom α β\n⊢ Eq (InfHom.dual (g.comp f)) ((InfHom.dual g).comp (InfHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : InfHom β γ) (f : InfHom α β) :\n    InfHom.dual (g.comp f) = (InfHom.dual g).comp (InfHom.dual f) :=\n  rfl\n\n"}
{"name":"InfHom.symm_dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Min α\n⊢ Eq (InfHom.dual.symm (SupHom.id (OrderDual α))) (InfHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : InfHom.dual.symm (SupHom.id _) = InfHom.id α :=\n  rfl\n\n"}
{"name":"InfHom.symm_dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Min α\ninst✝¹ : Min β\ninst✝ : Min γ\ng : SupHom (OrderDual β) (OrderDual γ)\nf : SupHom (OrderDual α) (OrderDual β)\n⊢ Eq (InfHom.dual.symm (g.comp f)) ((InfHom.dual.symm g).comp (InfHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : SupHom βᵒᵈ γᵒᵈ) (f : SupHom αᵒᵈ βᵒᵈ) :\n    InfHom.dual.symm (g.comp f) =\n      (InfHom.dual.symm g).comp (InfHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"SupBotHom.dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Max α\ninst✝ : Bot α\n⊢ Eq (SupBotHom.dual (SupBotHom.id α)) (InfTopHom.id (OrderDual α))","decl":"@[simp] theorem dual_id : SupBotHom.dual (SupBotHom.id α) = InfTopHom.id _ := rfl\n\n"}
{"name":"SupBotHom.dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Max α\ninst✝⁴ : Bot α\ninst✝³ : Max β\ninst✝² : Bot β\ninst✝¹ : Max γ\ninst✝ : Bot γ\ng : SupBotHom β γ\nf : SupBotHom α β\n⊢ Eq (SupBotHom.dual (g.comp f)) ((SupBotHom.dual g).comp (SupBotHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : SupBotHom β γ) (f : SupBotHom α β) :\n    SupBotHom.dual (g.comp f) = (SupBotHom.dual g).comp (SupBotHom.dual f) :=\n  rfl\n\n"}
{"name":"SupBotHom.symm_dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Max α\ninst✝ : Bot α\n⊢ Eq (SupBotHom.dual.symm (InfTopHom.id (OrderDual α))) (SupBotHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : SupBotHom.dual.symm (InfTopHom.id _) = SupBotHom.id α :=\n  rfl\n\n"}
{"name":"SupBotHom.symm_dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Max α\ninst✝⁴ : Bot α\ninst✝³ : Max β\ninst✝² : Bot β\ninst✝¹ : Max γ\ninst✝ : Bot γ\ng : InfTopHom (OrderDual β) (OrderDual γ)\nf : InfTopHom (OrderDual α) (OrderDual β)\n⊢ Eq (SupBotHom.dual.symm (g.comp f)) ((SupBotHom.dual.symm g).comp (SupBotHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : InfTopHom βᵒᵈ γᵒᵈ) (f : InfTopHom αᵒᵈ βᵒᵈ) :\n    SupBotHom.dual.symm (g.comp f) =\n      (SupBotHom.dual.symm g).comp (SupBotHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"InfTopHom.dual_symm_apply_toInfHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : SupBotHom (OrderDual α) (OrderDual β)\n⊢ Eq (InfTopHom.dual.symm f).toInfHom (InfHom.dual.symm f.toSupHom)","decl":"/-- Reinterpret a finitary infimum homomorphism as a finitary supremum homomorphism between the dual\nlattices. -/\n@[simps]\nprotected def dual : InfTopHom α β ≃ SupBotHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨InfHom.dual f.toInfHom, f.map_top'⟩\n  invFun f := ⟨InfHom.dual.symm f.toSupHom, f.map_bot'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"InfTopHom.dual_apply_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Min α\ninst✝² : Top α\ninst✝¹ : Min β\ninst✝ : Top β\nf : InfTopHom α β\n⊢ Eq (InfTopHom.dual f).toSupHom (InfHom.dual f.toInfHom)","decl":"/-- Reinterpret a finitary infimum homomorphism as a finitary supremum homomorphism between the dual\nlattices. -/\n@[simps]\nprotected def dual : InfTopHom α β ≃ SupBotHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨InfHom.dual f.toInfHom, f.map_top'⟩\n  invFun f := ⟨InfHom.dual.symm f.toSupHom, f.map_bot'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"InfTopHom.dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Min α\ninst✝ : Top α\n⊢ Eq (InfTopHom.dual (InfTopHom.id α)) (SupBotHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : InfTopHom.dual (InfTopHom.id α) = SupBotHom.id _ :=\n  rfl\n\n"}
{"name":"InfTopHom.dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Min α\ninst✝⁴ : Top α\ninst✝³ : Min β\ninst✝² : Top β\ninst✝¹ : Min γ\ninst✝ : Top γ\ng : InfTopHom β γ\nf : InfTopHom α β\n⊢ Eq (InfTopHom.dual (g.comp f)) ((InfTopHom.dual g).comp (InfTopHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : InfTopHom β γ) (f : InfTopHom α β) :\n    InfTopHom.dual (g.comp f) = (InfTopHom.dual g).comp (InfTopHom.dual f) :=\n  rfl\n\n"}
{"name":"InfTopHom.symm_dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Min α\ninst✝ : Top α\n⊢ Eq (InfTopHom.dual.symm (SupBotHom.id (OrderDual α))) (InfTopHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : InfTopHom.dual.symm (SupBotHom.id _) = InfTopHom.id α :=\n  rfl\n\n"}
{"name":"InfTopHom.symm_dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Min α\ninst✝⁴ : Top α\ninst✝³ : Min β\ninst✝² : Top β\ninst✝¹ : Min γ\ninst✝ : Top γ\ng : SupBotHom (OrderDual β) (OrderDual γ)\nf : SupBotHom (OrderDual α) (OrderDual β)\n⊢ Eq (InfTopHom.dual.symm (g.comp f)) ((InfTopHom.dual.symm g).comp (InfTopHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : SupBotHom βᵒᵈ γᵒᵈ) (f : SupBotHom αᵒᵈ βᵒᵈ) :\n    InfTopHom.dual.symm (g.comp f) =\n      (InfTopHom.dual.symm g).comp (InfTopHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"LatticeHom.dual_apply_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq (LatticeHom.dual f).toSupHom (InfHom.dual f.toInfHom)","decl":"/-- Reinterpret a lattice homomorphism as a lattice homomorphism between the dual lattices. -/\n@[simps]\nprotected def dual : LatticeHom α β ≃ LatticeHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨InfHom.dual f.toInfHom, f.map_sup'⟩\n  invFun f := ⟨SupHom.dual.symm f.toInfHom, f.map_sup'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"LatticeHom.dual_symm_apply_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom (OrderDual α) (OrderDual β)\n⊢ Eq (LatticeHom.dual.symm f).toSupHom (SupHom.dual.symm f.toInfHom)","decl":"/-- Reinterpret a lattice homomorphism as a lattice homomorphism between the dual lattices. -/\n@[simps]\nprotected def dual : LatticeHom α β ≃ LatticeHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨InfHom.dual f.toInfHom, f.map_sup'⟩\n  invFun f := ⟨SupHom.dual.symm f.toInfHom, f.map_sup'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"LatticeHom.dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\n⊢ Eq (LatticeHom.dual (LatticeHom.id α)) (LatticeHom.id (OrderDual α))","decl":"@[simp] theorem dual_id : LatticeHom.dual (LatticeHom.id α) = LatticeHom.id _ := rfl\n\n"}
{"name":"LatticeHom.dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\ng : LatticeHom β γ\nf : LatticeHom α β\n⊢ Eq (LatticeHom.dual (g.comp f)) ((LatticeHom.dual g).comp (LatticeHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : LatticeHom β γ) (f : LatticeHom α β) :\n    LatticeHom.dual (g.comp f) = (LatticeHom.dual g).comp (LatticeHom.dual f) :=\n  rfl\n\n"}
{"name":"LatticeHom.symm_dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\n⊢ Eq (LatticeHom.dual.symm (LatticeHom.id (OrderDual α))) (LatticeHom.id α)","decl":"@[simp]\ntheorem symm_dual_id : LatticeHom.dual.symm (LatticeHom.id _) = LatticeHom.id α :=\n  rfl\n\n"}
{"name":"LatticeHom.symm_dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\ng : LatticeHom (OrderDual β) (OrderDual γ)\nf : LatticeHom (OrderDual α) (OrderDual β)\n⊢ Eq (LatticeHom.dual.symm (g.comp f)) ((LatticeHom.dual.symm g).comp (LatticeHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : LatticeHom βᵒᵈ γᵒᵈ) (f : LatticeHom αᵒᵈ βᵒᵈ) :\n    LatticeHom.dual.symm (g.comp f) =\n      (LatticeHom.dual.symm g).comp (LatticeHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.dual_symm_apply_toLatticeHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : BoundedOrder α\ninst✝¹ : Lattice β\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom (OrderDual α) (OrderDual β)\n⊢ Eq (BoundedLatticeHom.dual.symm f).toLatticeHom (LatticeHom.dual.symm f.toLatticeHom)","decl":"/-- Reinterpret a bounded lattice homomorphism as a bounded lattice homomorphism between the dual\nbounded lattices. -/\n@[simps]\nprotected def dual : BoundedLatticeHom α β ≃ BoundedLatticeHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨LatticeHom.dual f.toLatticeHom, f.map_bot', f.map_top'⟩\n  invFun f := ⟨LatticeHom.dual.symm f.toLatticeHom, f.map_bot', f.map_top'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"BoundedLatticeHom.dual_apply_toLatticeHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : Lattice α\ninst✝² : BoundedOrder α\ninst✝¹ : Lattice β\ninst✝ : BoundedOrder β\nf : BoundedLatticeHom α β\n⊢ Eq (BoundedLatticeHom.dual f).toLatticeHom (LatticeHom.dual f.toLatticeHom)","decl":"/-- Reinterpret a bounded lattice homomorphism as a bounded lattice homomorphism between the dual\nbounded lattices. -/\n@[simps]\nprotected def dual : BoundedLatticeHom α β ≃ BoundedLatticeHom αᵒᵈ βᵒᵈ where\n  toFun f := ⟨LatticeHom.dual f.toLatticeHom, f.map_bot', f.map_top'⟩\n  invFun f := ⟨LatticeHom.dual.symm f.toLatticeHom, f.map_bot', f.map_top'⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"BoundedLatticeHom.dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Lattice α\ninst✝ : BoundedOrder α\n⊢ Eq (BoundedLatticeHom.dual (BoundedLatticeHom.id α)) (BoundedLatticeHom.id (OrderDual α))","decl":"@[simp]\ntheorem dual_id : BoundedLatticeHom.dual (BoundedLatticeHom.id α) = BoundedLatticeHom.id _ :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : BoundedOrder α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder β\ninst✝¹ : Lattice γ\ninst✝ : BoundedOrder γ\ng : BoundedLatticeHom β γ\nf : BoundedLatticeHom α β\n⊢ Eq (BoundedLatticeHom.dual (g.comp f)) ((BoundedLatticeHom.dual g).comp (BoundedLatticeHom.dual f))","decl":"@[simp]\ntheorem dual_comp (g : BoundedLatticeHom β γ) (f : BoundedLatticeHom α β) :\n    BoundedLatticeHom.dual (g.comp f) =\n      (BoundedLatticeHom.dual g).comp (BoundedLatticeHom.dual f) :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.symm_dual_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝¹ : Lattice α\ninst✝ : BoundedOrder α\n⊢ Eq (BoundedLatticeHom.dual.symm (BoundedLatticeHom.id (OrderDual α))) (BoundedLatticeHom.id α)","decl":"@[simp]\ntheorem symm_dual_id :\n    BoundedLatticeHom.dual.symm (BoundedLatticeHom.id _) = BoundedLatticeHom.id α :=\n  rfl\n\n"}
{"name":"BoundedLatticeHom.symm_dual_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝⁵ : Lattice α\ninst✝⁴ : BoundedOrder α\ninst✝³ : Lattice β\ninst✝² : BoundedOrder β\ninst✝¹ : Lattice γ\ninst✝ : BoundedOrder γ\ng : BoundedLatticeHom (OrderDual β) (OrderDual γ)\nf : BoundedLatticeHom (OrderDual α) (OrderDual β)\n⊢ Eq (BoundedLatticeHom.dual.symm (g.comp f)) ((BoundedLatticeHom.dual.symm g).comp (BoundedLatticeHom.dual.symm f))","decl":"@[simp]\ntheorem symm_dual_comp (g : BoundedLatticeHom βᵒᵈ γᵒᵈ) (f : BoundedLatticeHom αᵒᵈ βᵒᵈ) :\n    BoundedLatticeHom.dual.symm (g.comp f) =\n      (BoundedLatticeHom.dual.symm g).comp (BoundedLatticeHom.dual.symm f) :=\n  rfl\n\n"}
{"name":"LatticeHom.coe_fst","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\n⊢ Eq (⇑LatticeHom.fst) Prod.fst","decl":"@[simp, norm_cast] lemma coe_fst : ⇑(fst (α := α) (β := β)) = Prod.fst := rfl\n"}
{"name":"LatticeHom.coe_snd","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\n⊢ Eq (⇑LatticeHom.snd) Prod.snd","decl":"@[simp, norm_cast] lemma coe_snd : ⇑(snd (α := α) (β := β)) = Prod.snd := rfl\n"}
{"name":"LatticeHom.fst_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nx : Prod α β\n⊢ Eq (LatticeHom.fst x) x.1","decl":"lemma fst_apply (x : α × β) : fst x = x.fst := rfl\n"}
{"name":"LatticeHom.snd_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nx : Prod α β\n⊢ Eq (LatticeHom.snd x) x.2","decl":"lemma snd_apply (x : α × β) : snd x = x.snd := rfl\n\n"}
{"name":"Pi.coe_evalLatticeHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"ι : Type u_7\nα : ι → Type u_8\ninst✝ : (i : ι) → Lattice (α i)\ni : ι\n⊢ Eq (⇑(Pi.evalLatticeHom i)) (Function.eval i)","decl":"@[simp, norm_cast]\nlemma coe_evalLatticeHom (i : ι) : ⇑(evalLatticeHom (α := α) i) = Function.eval i := rfl\n\n"}
{"name":"Pi.evalLatticeHom_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"ι : Type u_7\nα : ι → Type u_8\ninst✝ : (i : ι) → Lattice (α i)\ni : ι\nf : (i : ι) → α i\n⊢ Eq ((Pi.evalLatticeHom i) f) (f i)","decl":"lemma evalLatticeHom_apply (i : ι) (f : ∀ i, α i) : evalLatticeHom i f = f i := rfl\n\n"}
{"name":"SupHom.withTop_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : SemilatticeSup α\ninst✝ : SemilatticeSup β\nf : SupHom α β\na✝ : WithTop α\n⊢ Eq (f.withTop a✝) (WithTop.map (⇑f) a✝)","decl":"/-- Adjoins a `⊤` to the domain and codomain of a `SupHom`. -/\n@[simps]\nprotected def withTop (f : SupHom α β) : SupHom (WithTop α) (WithTop β) where\n  -- Porting note: this was `Option.map f`\n  toFun := WithTop.map f\n  map_sup' a b :=\n    match a, b with\n    | ⊤, ⊤ => rfl\n    | ⊤, (b : α) => rfl\n    | (a : α), ⊤ => rfl\n    | (a : α), (b : α) => congr_arg _ (f.map_sup' _ _)\n\n"}
{"name":"SupHom.withTop_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : SemilatticeSup α\n⊢ Eq (SupHom.id α).withTop (SupHom.id (WithTop α))","decl":"@[simp]\ntheorem withTop_id : (SupHom.id α).withTop = SupHom.id _ := DFunLike.coe_injective Option.map_id\n\n"}
{"name":"SupHom.withTop_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : SemilatticeSup α\ninst✝¹ : SemilatticeSup β\ninst✝ : SemilatticeSup γ\nf : SupHom β γ\ng : SupHom α β\n⊢ Eq (f.comp g).withTop (f.withTop.comp g.withTop)","decl":"@[simp]\ntheorem withTop_comp (f : SupHom β γ) (g : SupHom α β) :\n    (f.comp g).withTop = f.withTop.comp g.withTop :=\n  DFunLike.coe_injective <| Eq.symm <| Option.map_comp_map _ _\n\n"}
{"name":"SupHom.withBot_toSupHom_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : SemilatticeSup α\ninst✝ : SemilatticeSup β\nf : SupHom α β\na✝ : Option α\n⊢ Eq (f.withBot.toSupHom a✝) (Option.map (⇑f) a✝)","decl":"/-- Adjoins a `⊥` to the domain and codomain of a `SupHom`. -/\n@[simps]\nprotected def withBot (f : SupHom α β) : SupBotHom (WithBot α) (WithBot β) where\n  toFun := Option.map f\n  map_sup' a b :=\n    match a, b with\n    | ⊥, ⊥ => rfl\n    | ⊥, (b : α) => rfl\n    | (a : α), ⊥ => rfl\n    | (a : α), (b : α) => congr_arg _ (f.map_sup' _ _)\n  map_bot' := rfl\n\n"}
{"name":"SupHom.withBot_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : SemilatticeSup α\n⊢ Eq (SupHom.id α).withBot (SupBotHom.id (WithBot α))","decl":"@[simp]\ntheorem withBot_id : (SupHom.id α).withBot = SupBotHom.id _ := DFunLike.coe_injective Option.map_id\n\n"}
{"name":"SupHom.withBot_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : SemilatticeSup α\ninst✝¹ : SemilatticeSup β\ninst✝ : SemilatticeSup γ\nf : SupHom β γ\ng : SupHom α β\n⊢ Eq (f.comp g).withBot (f.withBot.comp g.withBot)","decl":"@[simp]\ntheorem withBot_comp (f : SupHom β γ) (g : SupHom α β) :\n    (f.comp g).withBot = f.withBot.comp g.withBot :=\n  DFunLike.coe_injective <| Eq.symm <| Option.map_comp_map _ _\n\n"}
{"name":"SupHom.withTop'_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : SemilatticeSup α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderTop β\nf : SupHom α β\na : WithTop α\n⊢ Eq (f.withTop' a) (Option.elim a Top.top ⇑f)","decl":"/-- Adjoins a `⊤` to the codomain of a `SupHom`. -/\n@[simps]\ndef withTop' [OrderTop β] (f : SupHom α β) : SupHom (WithTop α) β where\n  toFun a := a.elim ⊤ f\n  map_sup' a b :=\n    match a, b with\n    | ⊤, ⊤ => (top_sup_eq _).symm\n    | ⊤, (b : α) => (top_sup_eq _).symm\n    | (a : α), ⊤ => (sup_top_eq _).symm\n    | (a : α), (b : α) => f.map_sup' _ _\n\n"}
{"name":"SupHom.withBot'_toSupHom_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : SemilatticeSup α\ninst✝¹ : SemilatticeSup β\ninst✝ : OrderBot β\nf : SupHom α β\na : WithBot α\n⊢ Eq (f.withBot'.toSupHom a) (Option.elim a Bot.bot ⇑f)","decl":"/-- Adjoins a `⊥` to the domain of a `SupHom`. -/\n@[simps]\ndef withBot' [OrderBot β] (f : SupHom α β) : SupBotHom (WithBot α) β where\n  toFun a := a.elim ⊥ f\n  map_sup' a b :=\n    match a, b with\n    | ⊥, ⊥ => (bot_sup_eq _).symm\n    | ⊥, (b : α) => (bot_sup_eq _).symm\n    | (a : α), ⊥ => (sup_bot_eq _).symm\n    | (a : α), (b : α) => f.map_sup' _ _\n  map_bot' := rfl\n\n"}
{"name":"InfHom.withTop_toInfHom_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : SemilatticeInf α\ninst✝ : SemilatticeInf β\nf : InfHom α β\na✝ : Option α\n⊢ Eq (f.withTop.toInfHom a✝) (Option.map (⇑f) a✝)","decl":"/-- Adjoins a `⊤` to the domain and codomain of an `InfHom`. -/\n@[simps]\nprotected def withTop (f : InfHom α β) : InfTopHom (WithTop α) (WithTop β) where\n  toFun := Option.map f\n  map_inf' a b :=\n    match a, b with\n    | ⊤, ⊤ => rfl\n    | ⊤, (b : α) => rfl\n    | (a : α), ⊤ => rfl\n    | (a : α), (b : α) => congr_arg _ (f.map_inf' _ _)\n  map_top' := rfl\n\n"}
{"name":"InfHom.withTop_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : SemilatticeInf α\n⊢ Eq (InfHom.id α).withTop (InfTopHom.id (WithTop α))","decl":"@[simp]\ntheorem withTop_id : (InfHom.id α).withTop = InfTopHom.id _ := DFunLike.coe_injective Option.map_id\n\n"}
{"name":"InfHom.withTop_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\ninst✝ : SemilatticeInf γ\nf : InfHom β γ\ng : InfHom α β\n⊢ Eq (f.comp g).withTop (f.withTop.comp g.withTop)","decl":"@[simp]\ntheorem withTop_comp (f : InfHom β γ) (g : InfHom α β) :\n    (f.comp g).withTop = f.withTop.comp g.withTop :=\n  DFunLike.coe_injective <| Eq.symm <| Option.map_comp_map _ _\n\n"}
{"name":"InfHom.withBot_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : SemilatticeInf α\ninst✝ : SemilatticeInf β\nf : InfHom α β\na✝ : Option α\n⊢ Eq (f.withBot a✝) (Option.map (⇑f) a✝)","decl":"/-- Adjoins a `⊥` to the domain and codomain of an `InfHom`. -/\n@[simps]\nprotected def withBot (f : InfHom α β) : InfHom (WithBot α) (WithBot β) where\n  toFun := Option.map f\n  map_inf' a b :=\n    match a, b with\n    | ⊥, ⊥ => rfl\n    | ⊥, (b : α) => rfl\n    | (a : α), ⊥ => rfl\n    | (a : α), (b : α) => congr_arg _ (f.map_inf' _ _)\n\n"}
{"name":"InfHom.withBot_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : SemilatticeInf α\n⊢ Eq (InfHom.id α).withBot (InfHom.id (WithBot α))","decl":"@[simp]\ntheorem withBot_id : (InfHom.id α).withBot = InfHom.id _ := DFunLike.coe_injective Option.map_id\n\n"}
{"name":"InfHom.withBot_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\ninst✝ : SemilatticeInf γ\nf : InfHom β γ\ng : InfHom α β\n⊢ Eq (f.comp g).withBot (f.withBot.comp g.withBot)","decl":"@[simp]\ntheorem withBot_comp (f : InfHom β γ) (g : InfHom α β) :\n    (f.comp g).withBot = f.withBot.comp g.withBot :=\n  DFunLike.coe_injective <| Eq.symm <| Option.map_comp_map _ _\n\n"}
{"name":"InfHom.withTop'_toInfHom_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderTop β\nf : InfHom α β\na : WithTop α\n⊢ Eq (f.withTop'.toInfHom a) (Option.elim a Top.top ⇑f)","decl":"/-- Adjoins a `⊤` to the codomain of an `InfHom`. -/\n@[simps]\ndef withTop' [OrderTop β] (f : InfHom α β) : InfTopHom (WithTop α) β where\n  toFun a := a.elim ⊤ f\n  map_inf' a b :=\n    match a, b with\n    | ⊤, ⊤ => (top_inf_eq _).symm\n    | ⊤, (b : α) => (top_inf_eq _).symm\n    | (a : α), ⊤ => (inf_top_eq _).symm\n    | (a : α), (b : α) => f.map_inf' _ _\n  map_top' := rfl\n\n"}
{"name":"InfHom.withBot'_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : SemilatticeInf α\ninst✝¹ : SemilatticeInf β\ninst✝ : OrderBot β\nf : InfHom α β\na : WithBot α\n⊢ Eq (f.withBot' a) (Option.elim a Bot.bot ⇑f)","decl":"/-- Adjoins a `⊥` to the codomain of an `InfHom`. -/\n@[simps]\ndef withBot' [OrderBot β] (f : InfHom α β) : InfHom (WithBot α) β where\n  toFun a := a.elim ⊥ f\n  map_inf' a b :=\n    match a, b with\n    | ⊥, ⊥ => (bot_inf_eq _).symm\n    | ⊥, (b : α) => (bot_inf_eq _).symm\n    | (a : α), ⊥ => (inf_bot_eq _).symm\n    | (a : α), (b : α) => f.map_inf' _ _\n\n"}
{"name":"LatticeHom.withTop_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq f.withTop.toSupHom f.withTop","decl":"/-- Adjoins a `⊤` to the domain and codomain of a `LatticeHom`. -/\n@[simps]\nprotected def withTop (f : LatticeHom α β) : LatticeHom (WithTop α) (WithTop β) :=\n  { f.toInfHom.withTop with toSupHom := f.toSupHom.withTop }\n\n-- Porting note: `simps` doesn't generate those\n"}
{"name":"LatticeHom.coe_withTop","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq (⇑f.withTop) (WithTop.map ⇑f)","decl":"@[simp, norm_cast]\nlemma coe_withTop (f : LatticeHom α β) : ⇑f.withTop = WithTop.map f := rfl\n\n"}
{"name":"LatticeHom.withTop_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\na : WithTop α\n⊢ Eq (f.withTop a) (WithTop.map (⇑f) a)","decl":"lemma withTop_apply (f : LatticeHom α β) (a : WithTop α) : f.withTop a = a.map f := rfl\n\n"}
{"name":"LatticeHom.withTop_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\n⊢ Eq (LatticeHom.id α).withTop (LatticeHom.id (WithTop α))","decl":"@[simp]\ntheorem withTop_id : (LatticeHom.id α).withTop = LatticeHom.id _ :=\n  DFunLike.coe_injective Option.map_id\n\n"}
{"name":"LatticeHom.withTop_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq (f.comp g).withTop (f.withTop.comp g.withTop)","decl":"@[simp]\ntheorem withTop_comp (f : LatticeHom β γ) (g : LatticeHom α β) :\n    (f.comp g).withTop = f.withTop.comp g.withTop :=\n  DFunLike.coe_injective <| Eq.symm <| Option.map_comp_map _ _\n\n"}
{"name":"LatticeHom.withBot_toSupHom_toFun","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\na : WithBot α\n⊢ Eq (f.withBot.toSupHom a) (f.withBot a)","decl":"/-- Adjoins a `⊥` to the domain and codomain of a `LatticeHom`. -/\n@[simps]\nprotected def withBot (f : LatticeHom α β) : LatticeHom (WithBot α) (WithBot β) :=\n  { f.toInfHom.withBot with toSupHom := f.toSupHom.withBot }\n\n-- Porting note: `simps` doesn't generate those\n"}
{"name":"LatticeHom.coe_withBot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq (⇑f.withBot) (Option.map ⇑f)","decl":"@[simp, norm_cast]\nlemma coe_withBot (f : LatticeHom α β) : ⇑f.withBot = Option.map f := rfl\n\n"}
{"name":"LatticeHom.withBot_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\na : WithBot α\n⊢ Eq (f.withBot a) (WithBot.map (⇑f) a)","decl":"lemma withBot_apply (f : LatticeHom α β) (a : WithBot α) : f.withBot a = a.map f := rfl\n\n"}
{"name":"LatticeHom.withBot_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\n⊢ Eq (LatticeHom.id α).withBot (LatticeHom.id (WithBot α))","decl":"@[simp]\ntheorem withBot_id : (LatticeHom.id α).withBot = LatticeHom.id _ :=\n  DFunLike.coe_injective Option.map_id\n\n"}
{"name":"LatticeHom.withBot_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq (f.comp g).withBot (f.withBot.comp g.withBot)","decl":"@[simp]\ntheorem withBot_comp (f : LatticeHom β γ) (g : LatticeHom α β) :\n    (f.comp g).withBot = f.withBot.comp g.withBot :=\n  DFunLike.coe_injective <| Eq.symm <| Option.map_comp_map _ _\n\n"}
{"name":"LatticeHom.withTopWithBot_toLatticeHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq f.withTopWithBot.toLatticeHom f.withBot.withTop","decl":"/-- Adjoins a `⊤` and `⊥` to the domain and codomain of a `LatticeHom`. -/\n@[simps]\ndef withTopWithBot (f : LatticeHom α β) :\n    BoundedLatticeHom (WithTop <| WithBot α) (WithTop <| WithBot β) :=\n  ⟨f.withBot.withTop, rfl, rfl⟩\n\n-- Porting note: `simps` doesn't generate those\n"}
{"name":"LatticeHom.coe_withTopWithBot","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\n⊢ Eq (⇑f.withTopWithBot) (Option.map (Option.map ⇑f))","decl":"@[simp, norm_cast]\nlemma coe_withTopWithBot (f : LatticeHom α β) : ⇑f.withTopWithBot = Option.map (Option.map f) := rfl\n\n"}
{"name":"LatticeHom.withTopWithBot_apply","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Lattice α\ninst✝ : Lattice β\nf : LatticeHom α β\na : WithTop (WithBot α)\n⊢ Eq (f.withTopWithBot a) (WithTop.map (Option.map ⇑f) a)","decl":"lemma withTopWithBot_apply (f : LatticeHom α β) (a : WithTop <| WithBot α) :\n    f.withTopWithBot a = a.map (Option.map f) := rfl\n\n"}
{"name":"LatticeHom.withTopWithBot_id","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\ninst✝ : Lattice α\n⊢ Eq (LatticeHom.id α).withTopWithBot (BoundedLatticeHom.id (WithTop (WithBot α)))","decl":"@[simp]\ntheorem withTopWithBot_id : (LatticeHom.id α).withTopWithBot = BoundedLatticeHom.id _ :=\n  DFunLike.coe_injective <| by\n    refine (congr_arg Option.map ?_).trans Option.map_id\n    rw [withBot_id]\n    rfl\n\n"}
{"name":"LatticeHom.withTopWithBot_comp","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\nγ : Type u_5\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : Lattice γ\nf : LatticeHom β γ\ng : LatticeHom α β\n⊢ Eq (f.comp g).withTopWithBot (f.withTopWithBot.comp g.withTopWithBot)","decl":"@[simp]\ntheorem withTopWithBot_comp (f : LatticeHom β γ) (g : LatticeHom α β) :\n    (f.comp g).withTopWithBot = f.withTopWithBot.comp g.withTopWithBot := by\n  ext; simp\n\n"}
{"name":"LatticeHom.withTop'_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : OrderTop β\nf : LatticeHom α β\n⊢ Eq f.withTop'.toSupHom f.withTop'","decl":"/-- Adjoins a `⊥` to the codomain of a `LatticeHom`. -/\n@[simps]\ndef withTop' [OrderTop β] (f : LatticeHom α β) : LatticeHom (WithTop α) β :=\n  { f.toSupHom.withTop', f.toInfHom.withTop' with }\n\n"}
{"name":"LatticeHom.withBot'_toSupHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : OrderBot β\nf : LatticeHom α β\n⊢ Eq f.withBot'.toSupHom f.withBot'.toSupHom","decl":"/-- Adjoins a `⊥` to the domain and codomain of a `LatticeHom`. -/\n@[simps]\ndef withBot' [OrderBot β] (f : LatticeHom α β) : LatticeHom (WithBot α) β :=\n  { f.toSupHom.withBot', f.toInfHom.withBot' with }\n\n"}
{"name":"LatticeHom.withTopWithBot'_toLatticeHom","module":"Mathlib.Order.Hom.Lattice","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝² : Lattice α\ninst✝¹ : Lattice β\ninst✝ : BoundedOrder β\nf : LatticeHom α β\n⊢ Eq f.withTopWithBot'.toLatticeHom f.withBot'.withTop'","decl":"/-- Adjoins a `⊤` and `⊥` to the codomain of a `LatticeHom`. -/\n@[simps]\ndef withTopWithBot' [BoundedOrder β] (f : LatticeHom α β) :\n    BoundedLatticeHom (WithTop <| WithBot α) β where\n  toLatticeHom := f.withBot'.withTop'\n  map_top' := rfl\n  map_bot' := rfl\n\n"}
