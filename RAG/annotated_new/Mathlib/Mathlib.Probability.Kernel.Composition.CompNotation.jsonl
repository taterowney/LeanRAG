{"name":"MeasureTheory.Measure.comp_apply_univ","module":"Mathlib.Probability.Kernel.Composition.CompNotation","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝ : ProbabilityTheory.IsMarkovKernel κ\n⊢ Eq ((μ.bind ⇑κ) Set.univ) (μ Set.univ)","decl":"@[simp]\nlemma comp_apply_univ [IsMarkovKernel κ] : (κ ∘ₘ μ) Set.univ = μ Set.univ := by\n  simp [bind_apply .univ κ.measurable]\n\n"}
{"name":"MeasureTheory.Measure.deterministic_comp_eq_map","module":"Mathlib.Probability.Kernel.Composition.CompNotation","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nf : α → β\nhf : Measurable f\n⊢ Eq (μ.bind ⇑(ProbabilityTheory.Kernel.deterministic f hf)) (MeasureTheory.Measure.map f μ)","decl":"lemma deterministic_comp_eq_map {f : α → β} (hf : Measurable f) :\n    Kernel.deterministic f hf ∘ₘ μ = μ.map f :=\n  Measure.bind_dirac_eq_map μ hf\n\n"}
{"name":"MeasureTheory.Measure.id_comp","module":"Mathlib.Probability.Kernel.Composition.CompNotation","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Eq (μ.bind ⇑ProbabilityTheory.Kernel.id) μ","decl":"@[simp]\nlemma id_comp : Kernel.id ∘ₘ μ = μ := by rw [Kernel.id, deterministic_comp_eq_map, Measure.map_id]\n\n"}
{"name":"MeasureTheory.Measure.swap_comp","module":"Mathlib.Probability.Kernel.Composition.CompNotation","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure (Prod α β)\n⊢ Eq (μ.bind ⇑(ProbabilityTheory.Kernel.swap α β)) (MeasureTheory.Measure.map Prod.swap μ)","decl":"lemma swap_comp {μ : Measure (α × β)} : (Kernel.swap α β) ∘ₘ μ = μ.map Prod.swap :=\n  deterministic_comp_eq_map measurable_swap\n\n"}
{"name":"MeasureTheory.Measure.const_comp","module":"Mathlib.Probability.Kernel.Composition.CompNotation","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\n⊢ Eq (μ.bind ⇑(ProbabilityTheory.Kernel.const α ν)) (HSMul.hSMul (μ Set.univ) ν)","decl":"@[simp]\nlemma const_comp {ν : Measure β} : (Kernel.const α ν) ∘ₘ μ = μ Set.univ • ν := μ.bind_const\n\n"}
