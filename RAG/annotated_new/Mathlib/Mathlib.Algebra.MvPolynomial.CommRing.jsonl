{"name":"MvPolynomial.C_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\na a' : R\ninst✝ : CommRing R\n⊢ Eq (MvPolynomial.C (HSub.hSub a a')) (HSub.hSub (MvPolynomial.C a) (MvPolynomial.C a'))","decl":"@[simp]\ntheorem C_sub : (C (a - a') : MvPolynomial σ R) = C a - C a' :=\n  RingHom.map_sub _ _ _\n\n"}
{"name":"MvPolynomial.C_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\na : R\ninst✝ : CommRing R\n⊢ Eq (MvPolynomial.C (Neg.neg a)) (Neg.neg (MvPolynomial.C a))","decl":"@[simp]\ntheorem C_neg : (C (-a) : MvPolynomial σ R) = -C a :=\n  RingHom.map_neg _ _\n\n"}
{"name":"MvPolynomial.coeff_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\nm : Finsupp σ Nat\np : MvPolynomial σ R\n⊢ Eq (MvPolynomial.coeff m (Neg.neg p)) (Neg.neg (MvPolynomial.coeff m p))","decl":"@[simp]\ntheorem coeff_neg (m : σ →₀ ℕ) (p : MvPolynomial σ R) : coeff m (-p) = -coeff m p :=\n  Finsupp.neg_apply _ _\n\n"}
{"name":"MvPolynomial.coeff_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\nm : Finsupp σ Nat\np q : MvPolynomial σ R\n⊢ Eq (MvPolynomial.coeff m (HSub.hSub p q)) (HSub.hSub (MvPolynomial.coeff m p) (MvPolynomial.coeff m q))","decl":"@[simp]\ntheorem coeff_sub (m : σ →₀ ℕ) (p q : MvPolynomial σ R) : coeff m (p - q) = coeff m p - coeff m q :=\n  Finsupp.sub_apply _ _ _\n\n"}
{"name":"MvPolynomial.support_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\np : MvPolynomial σ R\n⊢ Eq (Neg.neg p).support p.support","decl":"@[simp]\ntheorem support_neg : (-p).support = p.support :=\n  Finsupp.support_neg p\n\n"}
{"name":"MvPolynomial.support_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝¹ : CommRing R\ninst✝ : DecidableEq σ\np q : MvPolynomial σ R\n⊢ HasSubset.Subset (HSub.hSub p q).support (Union.union p.support q.support)","decl":"theorem support_sub [DecidableEq σ] (p q : MvPolynomial σ R) :\n    (p - q).support ⊆ p.support ∪ q.support :=\n  Finsupp.support_sub\n\n"}
{"name":"MvPolynomial.degrees_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\np : MvPolynomial σ R\n⊢ Eq (Neg.neg p).degrees p.degrees","decl":"@[simp]\ntheorem degrees_neg (p : MvPolynomial σ R) : (-p).degrees = p.degrees := by\n  rw [degrees, support_neg]; rfl\n\n"}
{"name":"MvPolynomial.degrees_sub_le","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝¹ : CommRing R\ninst✝ : DecidableEq σ\np q : MvPolynomial σ R\n⊢ LE.le (HSub.hSub p q).degrees (Union.union p.degrees q.degrees)","decl":"theorem degrees_sub_le [DecidableEq σ] {p q : MvPolynomial σ R} :\n    (p - q).degrees ≤ p.degrees ∪ q.degrees := by\n  simpa [degrees_def] using AddMonoidAlgebra.supDegree_sub_le\n\n"}
{"name":"MvPolynomial.degrees_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝¹ : CommRing R\ninst✝ : DecidableEq σ\np q : MvPolynomial σ R\n⊢ LE.le (HSub.hSub p q).degrees (Union.union p.degrees q.degrees)","decl":"@[deprecated (since := \"2024-12-28\")] alias degrees_sub := degrees_sub_le\n\n"}
{"name":"MvPolynomial.degreeOf_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\ni : σ\np : MvPolynomial σ R\n⊢ Eq (MvPolynomial.degreeOf i (Neg.neg p)) (MvPolynomial.degreeOf i p)","decl":"@[simp]\ntheorem degreeOf_neg (i : σ) (p : MvPolynomial σ R) : degreeOf i (-p) = degreeOf i p := by\n  rw [degreeOf, degreeOf, degrees_neg]\n\n"}
{"name":"MvPolynomial.degreeOf_sub_le","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\ni : σ\np q : MvPolynomial σ R\n⊢ LE.le (MvPolynomial.degreeOf i (HSub.hSub p q)) (Max.max (MvPolynomial.degreeOf i p) (MvPolynomial.degreeOf i q))","decl":"theorem degreeOf_sub_le (i : σ) (p q : MvPolynomial σ R) :\n    degreeOf i (p - q) ≤ max (degreeOf i p) (degreeOf i q) := by\n  simpa only [sub_eq_add_neg, degreeOf_neg] using degreeOf_add_le i p (-q)\n\n"}
{"name":"MvPolynomial.vars_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\np : MvPolynomial σ R\n⊢ Eq (Neg.neg p).vars p.vars","decl":"@[simp]\ntheorem vars_neg : (-p).vars = p.vars := by simp [vars, degrees_neg]\n\n"}
{"name":"MvPolynomial.vars_sub_subset","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝¹ : CommRing R\np q : MvPolynomial σ R\ninst✝ : DecidableEq σ\n⊢ HasSubset.Subset (HSub.hSub p q).vars (Union.union p.vars q.vars)","decl":"theorem vars_sub_subset [DecidableEq σ] : (p - q).vars ⊆ p.vars ∪ q.vars := by\n  convert vars_add_subset p (-q) using 2 <;> simp [sub_eq_add_neg]\n\n"}
{"name":"MvPolynomial.vars_sub_of_disjoint","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝¹ : CommRing R\np q : MvPolynomial σ R\ninst✝ : DecidableEq σ\nhpq : Disjoint p.vars q.vars\n⊢ Eq (HSub.hSub p q).vars (Union.union p.vars q.vars)","decl":"@[simp]\ntheorem vars_sub_of_disjoint [DecidableEq σ] (hpq : Disjoint p.vars q.vars) :\n    (p - q).vars = p.vars ∪ q.vars := by\n  rw [← vars_neg q] at hpq\n  convert vars_add_of_disjoint hpq using 2 <;> simp [sub_eq_add_neg]\n\n"}
{"name":"MvPolynomial.eval₂_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nS : Type v\nσ : Type u_1\ninst✝¹ : CommRing R\np q : MvPolynomial σ R\ninst✝ : CommRing S\nf : RingHom R S\ng : σ → S\n⊢ Eq (MvPolynomial.eval₂ f g (HSub.hSub p q)) (HSub.hSub (MvPolynomial.eval₂ f g p) (MvPolynomial.eval₂ f g q))","decl":"@[simp]\ntheorem eval₂_sub : (p - q).eval₂ f g = p.eval₂ f g - q.eval₂ f g :=\n  (eval₂Hom f g).map_sub _ _\n\n"}
{"name":"MvPolynomial.eval_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\np q : MvPolynomial σ R\nf : σ → R\n⊢ Eq ((MvPolynomial.eval f) (HSub.hSub p q)) (HSub.hSub ((MvPolynomial.eval f) p) ((MvPolynomial.eval f) q))","decl":"theorem eval_sub (f : σ → R) : eval f (p - q) = eval f p - eval f q :=\n  eval₂_sub _ _ _\n\n"}
{"name":"MvPolynomial.eval₂_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nS : Type v\nσ : Type u_1\ninst✝¹ : CommRing R\np : MvPolynomial σ R\ninst✝ : CommRing S\nf : RingHom R S\ng : σ → S\n⊢ Eq (MvPolynomial.eval₂ f g (Neg.neg p)) (Neg.neg (MvPolynomial.eval₂ f g p))","decl":"@[simp]\ntheorem eval₂_neg : (-p).eval₂ f g = -p.eval₂ f g :=\n  (eval₂Hom f g).map_neg _\n\n"}
{"name":"MvPolynomial.eval_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\np : MvPolynomial σ R\nf : σ → R\n⊢ Eq ((MvPolynomial.eval f) (Neg.neg p)) (Neg.neg ((MvPolynomial.eval f) p))","decl":"theorem eval_neg (f : σ → R) : eval f (-p) = -eval f p :=\n  eval₂_neg _ _ _\n\n"}
{"name":"MvPolynomial.hom_C","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"S : Type v\nσ : Type u_1\ninst✝ : CommRing S\nf : RingHom (MvPolynomial σ Int) S\nn : Int\n⊢ Eq (f (MvPolynomial.C n)) ↑n","decl":"theorem hom_C (f : MvPolynomial σ ℤ →+* S) (n : ℤ) : f (C n) = (n : S) :=\n  eq_intCast (f.comp C) n\n\n"}
{"name":"MvPolynomial.eval₂Hom_X","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"S : Type v\ninst✝ : CommRing S\nR : Type u\nc : RingHom Int S\nf : RingHom (MvPolynomial R Int) S\nx : MvPolynomial R Int\n⊢ Eq (MvPolynomial.eval₂ c (Function.comp (⇑f) MvPolynomial.X) x) (f x)","decl":"/-- A ring homomorphism f : Z[X_1, X_2, ...] → R\nis determined by the evaluations f(X_1), f(X_2), ... -/\n@[simp]\ntheorem eval₂Hom_X {R : Type u} (c : ℤ →+* S) (f : MvPolynomial R ℤ →+* S) (x : MvPolynomial R ℤ) :\n    eval₂ c (f ∘ X) x = f x := by\n  apply MvPolynomial.induction_on x\n    (fun n => by\n      rw [hom_C f, eval₂_C]\n      exact eq_intCast c n)\n    (fun p q hp hq => by\n      rw [eval₂_add, hp, hq]\n      exact (f.map_add _ _).symm)\n    (fun p n hp => by\n      rw [eval₂_mul, eval₂_X, hp]\n      exact (f.map_mul _ _).symm)\n\n"}
{"name":"MvPolynomial.degreeOf_sub_lt","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\nx : σ\nf g : MvPolynomial σ R\nk : Nat\nh : LT.lt 0 k\nhf : ∀ (m : Finsupp σ Nat), Membership.mem f.support m → LE.le k (m x) → Eq (MvPolynomial.coeff m f) (MvPolynomial.coeff m g)\nhg : ∀ (m : Finsupp σ Nat), Membership.mem g.support m → LE.le k (m x) → Eq (MvPolynomial.coeff m f) (MvPolynomial.coeff m g)\n⊢ LT.lt (MvPolynomial.degreeOf x (HSub.hSub f g)) k","decl":"theorem degreeOf_sub_lt {x : σ} {f g : MvPolynomial σ R} {k : ℕ} (h : 0 < k)\n    (hf : ∀ m : σ →₀ ℕ, m ∈ f.support → k ≤ m x → coeff m f = coeff m g)\n    (hg : ∀ m : σ →₀ ℕ, m ∈ g.support → k ≤ m x → coeff m f = coeff m g) :\n    degreeOf x (f - g) < k := by\n  classical\n  rw [degreeOf_lt_iff h]\n  intro m hm\n  by_contra! hc\n  have h := support_sub σ f g hm\n  simp only [mem_support_iff, Ne, coeff_sub, sub_eq_zero] at hm\n  cases' Finset.mem_union.1 h with cf cg\n  · exact hm (hf m cf hc)\n  · exact hm (hg m cg hc)\n\n"}
{"name":"MvPolynomial.totalDegree_neg","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\na : MvPolynomial σ R\n⊢ Eq (Neg.neg a).totalDegree a.totalDegree","decl":"@[simp]\ntheorem totalDegree_neg (a : MvPolynomial σ R) : (-a).totalDegree = a.totalDegree := by\n  simp only [totalDegree, support_neg]\n\n"}
{"name":"MvPolynomial.totalDegree_sub","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\na b : MvPolynomial σ R\n⊢ LE.le (HSub.hSub a b).totalDegree (Max.max a.totalDegree b.totalDegree)","decl":"theorem totalDegree_sub (a b : MvPolynomial σ R) :\n    (a - b).totalDegree ≤ max a.totalDegree b.totalDegree :=\n  calc\n    (a - b).totalDegree = (a + -b).totalDegree := by rw [sub_eq_add_neg]\n    _ ≤ max a.totalDegree (-b).totalDegree := totalDegree_add a (-b)\n    _ = max a.totalDegree b.totalDegree := by rw [totalDegree_neg]\n\n"}
{"name":"MvPolynomial.totalDegree_sub_C_le","module":"Mathlib.Algebra.MvPolynomial.CommRing","initialProofState":"R : Type u\nσ : Type u_1\ninst✝ : CommRing R\np : MvPolynomial σ R\nr : R\n⊢ LE.le (HSub.hSub p (MvPolynomial.C r)).totalDegree p.totalDegree","decl":"theorem totalDegree_sub_C_le (p : MvPolynomial σ R) (r : R) :\n    totalDegree (p - C r) ≤ totalDegree p :=\n  (totalDegree_sub _ _).trans_eq <| by rw [totalDegree_C, Nat.max_zero]\n\n"}
