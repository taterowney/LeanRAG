{"name":"groupCohomology.Hilbert90.aux_ne_zero","module":"Mathlib.RepresentationTheory.GroupCohomology.Hilbert90","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\nf : AlgEquiv K L L → Units L\n⊢ Ne (groupCohomology.Hilbert90.aux f) 0","decl":"theorem aux_ne_zero (f : (L ≃ₐ[K] L) → Lˣ) : aux f ≠ 0 :=\n/- the set `Aut_K(L)` is linearly independent in the `L`-vector space `L → L`, by Dedekind's\nlinear independence of characters -/\n  have : LinearIndependent L (fun (f : L ≃ₐ[K] L) => (f : L → L)) :=\n    LinearIndependent.comp (ι' := L ≃ₐ[K] L)\n      (linearIndependent_monoidHom L L) (fun f => f)\n      (fun x y h => by ext; exact DFunLike.ext_iff.1 h _)\n  have h := linearIndependent_iff.1 this\n    (Finsupp.equivFunOnFinite.symm (fun φ => (f φ : L)))\n  fun H => Units.ne_zero (f 1) (DFunLike.ext_iff.1 (h H) 1)\n\n"}
{"name":"groupCohomology.isMulOneCoboundary_of_isMulOneCocycle_of_aut_to_units","module":"Mathlib.RepresentationTheory.GroupCohomology.Hilbert90","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\nf : AlgEquiv K L L → Units L\nhf : groupCohomology.IsMulOneCocycle f\n⊢ groupCohomology.IsMulOneCoboundary f","decl":"/-- Noether's generalization of Hilbert's Theorem 90: given a finite extension of fields and a\nfunction `f : Aut_K(L) → Lˣ` satisfying `f(gh) = g(f(h)) * f(g)` for all `g, h : Aut_K(L)`, there\nexists `β : Lˣ` such that `g(β)/β = f(g)` for all `g : Aut_K(L).` -/\ntheorem isMulOneCoboundary_of_isMulOneCocycle_of_aut_to_units\n    (f : (L ≃ₐ[K] L) → Lˣ) (hf : IsMulOneCocycle f) :\n    IsMulOneCoboundary f := by\n/- Let `z : L` be such that `∑ f(h) * h(z) ≠ 0`, for `h ∈ Aut_K(L)` -/\n  obtain ⟨z, hz⟩ : ∃ z, aux f z ≠ 0 :=\n    not_forall.1 (fun H => aux_ne_zero f <| funext <| fun x => H x)\n  have : aux f z = ∑ h, f h * h z := by simp [aux, Finsupp.linearCombination, Finsupp.sum_fintype]\n/- Let `β = (∑ f(h) * h(z))⁻¹.` -/\n  use (Units.mk0 (aux f z) hz)⁻¹\n  intro g\n/- Then the equality follows from the hypothesis that `f` is a 1-cocycle. -/\n  simp only [IsMulOneCocycle, IsMulOneCoboundary, AlgEquiv.smul_units_def,\n    map_inv, div_inv_eq_mul, inv_mul_eq_iff_eq_mul, Units.ext_iff, this,\n    Units.val_mul, Units.coe_map, Units.val_mk0, MonoidHom.coe_coe] at hf ⊢\n  simp_rw [map_sum, map_mul, Finset.sum_mul, mul_assoc, mul_comm _ (f _ : L), ← mul_assoc, ← hf g]\n  exact eq_comm.1 (Fintype.sum_bijective (fun i => g * i)\n    (Group.mulLeft_bijective g) _ _ (fun i => rfl))\n\n"}
