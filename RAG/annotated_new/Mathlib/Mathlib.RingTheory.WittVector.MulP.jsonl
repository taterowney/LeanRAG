{"name":"WittVector.mulN_coeff","module":"Mathlib.RingTheory.WittVector.MulP","initialProofState":"p : Nat\nR : Type u_1\nhp : Fact (Nat.Prime p)\ninst‚úù : CommRing R\nn : Nat\nx : WittVector p R\nk : Nat\n‚ä¢ Eq ((HMul.hMul x ‚Üën).coeff k) ((MvPolynomial.aeval x.coeff) (WittVector.wittMulN p n k))","decl":"theorem mulN_coeff (n : ‚Ñï) (x : ùïé R) (k : ‚Ñï) :\n    (x * n).coeff k = aeval x.coeff (wittMulN p n k) := by\n  induction' n with n ih generalizing k\n  ¬∑ simp only [Nat.cast_zero, mul_zero, zero_coeff, wittMulN, Pi.zero_apply, map_zero]\n  ¬∑ rw [wittMulN, Nat.cast_add, Nat.cast_one, mul_add, mul_one, aeval_bind‚ÇÅ, add_coeff]\n    apply eval‚ÇÇHom_congr (RingHom.ext_int _ _) _ rfl\n    ext1 ‚ü®b, i‚ü©\n    fin_cases b\n    ¬∑ simp [Function.uncurry, Matrix.cons_val_zero, ih]\n    ¬∑ simp [Function.uncurry, Matrix.cons_val_one, Matrix.head_cons, aeval_X]\n\n"}
{"name":"WittVector.mulN_isPoly","module":"Mathlib.RingTheory.WittVector.MulP","initialProofState":"p : Nat\nhp : Fact (Nat.Prime p)\nn : Nat\n‚ä¢ WittVector.IsPoly p fun x _Rcr x_1 => HMul.hMul x_1 ‚Üën","decl":"/-- Multiplication by `n` is a polynomial function. -/\n@[is_poly]\ntheorem mulN_isPoly (n : ‚Ñï) : IsPoly p fun _ _Rcr x => x * n :=\n  ‚ü®‚ü®wittMulN p n, fun R _Rcr x => by funext k; exact mulN_coeff n x k‚ü©‚ü©\n\n"}
{"name":"WittVector.bind‚ÇÅ_wittMulN_wittPolynomial","module":"Mathlib.RingTheory.WittVector.MulP","initialProofState":"p : Nat\nhp : Fact (Nat.Prime p)\nn k : Nat\n‚ä¢ Eq ((MvPolynomial.bind‚ÇÅ (WittVector.wittMulN p n)) (wittPolynomial p Int k)) (HMul.hMul (‚Üën) (wittPolynomial p Int k))","decl":"@[simp]\ntheorem bind‚ÇÅ_wittMulN_wittPolynomial (n k : ‚Ñï) :\n    bind‚ÇÅ (wittMulN p n) (wittPolynomial p ‚Ñ§ k) = n * wittPolynomial p ‚Ñ§ k := by\n  induction' n with n ih\n  ¬∑ simp [wittMulN, Nat.cast_zero, zero_mul, bind‚ÇÅ_zero_wittPolynomial]\n  ¬∑ rw [wittMulN, ‚Üê bind‚ÇÅ_bind‚ÇÅ, wittAdd, wittStructureInt_prop]\n    simp only [map_add, Nat.cast_succ, bind‚ÇÅ_X_right]\n    rw [add_mul, one_mul, bind‚ÇÅ_rename, bind‚ÇÅ_rename]\n    simp only [ih, Function.uncurry, Function.comp_def, bind‚ÇÅ_X_left, AlgHom.id_apply,\n      Matrix.cons_val_zero, Matrix.head_cons, Matrix.cons_val_one]\n\n"}
