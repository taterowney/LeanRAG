{"name":"AddChar.expect_eq_ite","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝⁴ : AddGroup G\ninst✝³ : Fintype G\ninst✝² : Semifield R\ninst✝¹ : IsDomain R\ninst✝ : CharZero R\nψ : AddChar G R\n⊢ Eq (Finset.univ.expect fun a => ψ a) (ite (Eq ψ 0) 1 0)","decl":"lemma expect_eq_ite (ψ : AddChar G R) : 𝔼 a, ψ a = if ψ = 0 then 1 else 0 := by\n  simp [Fintype.expect_eq_sum_div_card, sum_eq_ite, ite_div]\n\n"}
{"name":"AddChar.expect_eq_zero_iff_ne_zero","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝⁴ : AddGroup G\ninst✝³ : Fintype G\ninst✝² : Semifield R\ninst✝¹ : IsDomain R\ninst✝ : CharZero R\nψ : AddChar G R\n⊢ Iff (Eq (Finset.univ.expect fun x => ψ x) 0) (Ne ψ 0)","decl":"lemma expect_eq_zero_iff_ne_zero : 𝔼 x, ψ x = 0 ↔ ψ ≠ 0 := by\n  rw [expect_eq_ite, one_ne_zero.ite_eq_right_iff]\n\n"}
{"name":"AddChar.expect_ne_zero_iff_eq_zero","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝⁴ : AddGroup G\ninst✝³ : Fintype G\ninst✝² : Semifield R\ninst✝¹ : IsDomain R\ninst✝ : CharZero R\nψ : AddChar G R\n⊢ Iff (Ne (Finset.univ.expect fun x => ψ x) 0) (Eq ψ 0)","decl":"lemma expect_ne_zero_iff_eq_zero : 𝔼 x, ψ x ≠ 0 ↔ ψ = 0 := expect_eq_zero_iff_ne_zero.not_left\n\n"}
{"name":"AddChar.wInner_cWeight_self","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : RCLike R\ninst✝ : Fintype G\nψ : AddChar G R\n⊢ Eq (RCLike.wInner RCLike.cWeight ⇑ψ ⇑ψ) 1","decl":"lemma wInner_cWeight_self (ψ : AddChar G R) : ⟪(ψ : G → R), ψ⟫ₙ_[R] = 1 := by\n  simp [wInner_cWeight_eq_expect, ψ.norm_apply, RCLike.conj_mul]\n\n"}
{"name":"AddChar.wInner_cWeight_eq_boole","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝² : AddCommGroup G\ninst✝¹ : RCLike R\ninst✝ : Fintype G\nψ₁ ψ₂ : AddChar G R\n⊢ Eq (RCLike.wInner RCLike.cWeight ⇑ψ₁ ⇑ψ₂) (ite (Eq ψ₁ ψ₂) 1 0)","decl":"lemma wInner_cWeight_eq_boole [Fintype G] (ψ₁ ψ₂ : AddChar G R) :\n    ⟪(ψ₁ : G → R), ψ₂⟫ₙ_[R] = if ψ₁ = ψ₂ then 1 else 0 := by\n  split_ifs with h\n  · rw [h, wInner_cWeight_self]\n  have : ψ₁⁻¹ * ψ₂ ≠ 1 := by rwa [Ne, inv_mul_eq_one]\n  simp_rw [wInner_cWeight_eq_expect, RCLike.inner_apply, ← inv_apply_eq_conj]\n  simpa [map_neg_eq_inv] using expect_eq_zero_iff_ne_zero.2 this\n\n"}
{"name":"AddChar.wInner_cWeight_eq_zero_iff_ne","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝² : AddCommGroup G\ninst✝¹ : RCLike R\nψ₁ ψ₂ : AddChar G R\ninst✝ : Fintype G\n⊢ Iff (Eq (RCLike.wInner RCLike.cWeight ⇑ψ₁ ⇑ψ₂) 0) (Ne ψ₁ ψ₂)","decl":"lemma wInner_cWeight_eq_zero_iff_ne [Fintype G] : ⟪(ψ₁ : G → R), ψ₂⟫ₙ_[R] = 0 ↔ ψ₁ ≠ ψ₂ := by\n  rw [wInner_cWeight_eq_boole, one_ne_zero.ite_eq_right_iff]\n\n"}
{"name":"AddChar.wInner_cWeight_eq_one_iff_eq","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝² : AddCommGroup G\ninst✝¹ : RCLike R\nψ₁ ψ₂ : AddChar G R\ninst✝ : Fintype G\n⊢ Iff (Eq (RCLike.wInner RCLike.cWeight ⇑ψ₁ ⇑ψ₂) 1) (Eq ψ₁ ψ₂)","decl":"lemma wInner_cWeight_eq_one_iff_eq [Fintype G] : ⟪(ψ₁ : G → R), ψ₂⟫ₙ_[R] = 1 ↔ ψ₁ = ψ₂ := by\n  rw [wInner_cWeight_eq_boole, one_ne_zero.ite_eq_left_iff]\n\n"}
{"name":"AddChar.linearIndependent","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝² : AddCommGroup G\ninst✝¹ : RCLike R\ninst✝ : Finite G\n⊢ LinearIndependent R DFunLike.coe","decl":"protected lemma linearIndependent [Finite G] : LinearIndependent R ((⇑) : AddChar G R → G → R) := by\n  cases nonempty_fintype G\n  exact linearIndependent_of_ne_zero_of_wInner_cWeight_eq_zero coe_ne_zero\n    fun ψ₁ ψ₂ ↦ wInner_cWeight_eq_zero_iff_ne.2\n\n"}
{"name":"AddChar.card_addChar_le","module":"Mathlib.Analysis.Fourier.FiniteAbelian.Orthogonality","initialProofState":"G : Type u_1\nR : Type u_3\ninst✝² : AddCommGroup G\ninst✝¹ : RCLike R\ninst✝ : Fintype G\n⊢ LE.le (Fintype.card (AddChar G R)) (Fintype.card G)","decl":"@[simp] lemma card_addChar_le [Fintype G] : card (AddChar G R) ≤ card G := by\n  simpa only [Module.finrank_fintype_fun_eq_card] using\n    (AddChar.linearIndependent G R).fintype_card_le_finrank\n\n"}
