{"name":"MeasureTheory.LocallyIntegrableOn.mono_set","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nt : Set X\nhst : HasSubset.Subset t s\n⊢ MeasureTheory.LocallyIntegrableOn f t μ","decl":"theorem LocallyIntegrableOn.mono_set (hf : LocallyIntegrableOn f s μ) {t : Set X}\n    (hst : t ⊆ s) : LocallyIntegrableOn f t μ := fun x hx =>\n  (hf x <| hst hx).filter_mono (nhdsWithin_mono x hst)\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.norm","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => Norm.norm (f x)) s μ","decl":"theorem LocallyIntegrableOn.norm (hf : LocallyIntegrableOn f s μ) :\n    LocallyIntegrableOn (fun x => ‖f x‖) s μ := fun t ht =>\n  let ⟨U, hU_nhd, hU_int⟩ := hf t ht\n  ⟨U, hU_nhd, hU_int.norm⟩\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.mono","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedAddCommGroup F\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\ng : X → F\nhg : MeasureTheory.AEStronglyMeasurable g μ\nh : Filter.Eventually (fun x => LE.le (Norm.norm (g x)) (Norm.norm (f x))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.LocallyIntegrableOn g s μ","decl":"theorem LocallyIntegrableOn.mono (hf : LocallyIntegrableOn f s μ) {g : X → F}\n    (hg : AEStronglyMeasurable g μ) (h : ∀ᵐ x ∂μ, ‖g x‖ ≤ ‖f x‖) :\n    LocallyIntegrableOn g s μ := by\n  intro x hx\n  rcases hf x hx with ⟨t, t_mem, ht⟩\n  exact ⟨t, t_mem, Integrable.mono ht hg.restrict (ae_restrict_of_ae h)⟩\n\n"}
{"name":"MeasureTheory.IntegrableOn.locallyIntegrableOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.IntegrableOn f s μ\n⊢ MeasureTheory.LocallyIntegrableOn f s μ","decl":"theorem IntegrableOn.locallyIntegrableOn (hf : IntegrableOn f s μ) : LocallyIntegrableOn f s μ :=\n  fun _ _ => ⟨s, self_mem_nhdsWithin, hf⟩\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.integrableOn_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhs : IsCompact s\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"/-- If a function is locally integrable on a compact set, then it is integrable on that set. -/\ntheorem LocallyIntegrableOn.integrableOn_isCompact (hf : LocallyIntegrableOn f s μ)\n    (hs : IsCompact s) : IntegrableOn f s μ :=\n  IsCompact.induction_on hs integrableOn_empty (fun _u _v huv hv => hv.mono_set huv)\n    (fun _u _v hu hv => integrableOn_union.mpr ⟨hu, hv⟩) hf\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.integrableOn_compact_subset","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nt : Set X\nhst : HasSubset.Subset t s\nht : IsCompact t\n⊢ MeasureTheory.IntegrableOn f t μ","decl":"theorem LocallyIntegrableOn.integrableOn_compact_subset (hf : LocallyIntegrableOn f s μ) {t : Set X}\n    (hst : t ⊆ s) (ht : IsCompact t) : IntegrableOn f t μ :=\n  (hf.mono_set hst).integrableOn_isCompact ht\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.exists_countable_integrableOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : SecondCountableTopology X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\n⊢ Exists fun T => And T.Countable (And (∀ (u : Set X), Membership.mem T u → IsOpen u) (And (HasSubset.Subset s (Set.iUnion fun u => Set.iUnion fun h => u)) (∀ (u : Set X), Membership.mem T u → MeasureTheory.IntegrableOn f (Inter.inter u s) μ)))","decl":"/-- If a function `f` is locally integrable on a set `s` in a second countable topological space,\nthen there exist countably many open sets `u` covering `s` such that `f` is integrable on each\nset `u ∩ s`. -/\ntheorem LocallyIntegrableOn.exists_countable_integrableOn [SecondCountableTopology X]\n    (hf : LocallyIntegrableOn f s μ) : ∃ T : Set (Set X), T.Countable ∧\n    (∀ u ∈ T, IsOpen u) ∧ (s ⊆ ⋃ u ∈ T, u) ∧ (∀ u ∈ T, IntegrableOn f (u ∩ s) μ) := by\n  have : ∀ x : s, ∃ u, IsOpen u ∧ x.1 ∈ u ∧ IntegrableOn f (u ∩ s) μ := by\n    rintro ⟨x, hx⟩\n    rcases hf x hx with ⟨t, ht, h't⟩\n    rcases mem_nhdsWithin.1 ht with ⟨u, u_open, x_mem, u_sub⟩\n    exact ⟨u, u_open, x_mem, h't.mono_set u_sub⟩\n  choose u u_open xu hu using this\n  obtain ⟨T, T_count, hT⟩ : ∃ T : Set s, T.Countable ∧ s ⊆ ⋃ i ∈ T, u i := by\n    have : s ⊆ ⋃ x : s, u x := fun y hy => mem_iUnion_of_mem ⟨y, hy⟩ (xu ⟨y, hy⟩)\n    obtain ⟨T, hT_count, hT_un⟩ := isOpen_iUnion_countable u u_open\n    exact ⟨T, hT_count, by rwa [hT_un]⟩\n  refine ⟨u '' T, T_count.image _, ?_, by rwa [biUnion_image], ?_⟩\n  · rintro v ⟨w, -, rfl⟩\n    exact u_open _\n  · rintro v ⟨w, -, rfl⟩\n    exact hu _\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.exists_nat_integrableOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : SecondCountableTopology X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\n⊢ Exists fun u => And (∀ (n : Nat), IsOpen (u n)) (And (HasSubset.Subset s (Set.iUnion fun n => u n)) (∀ (n : Nat), MeasureTheory.IntegrableOn f (Inter.inter (u n) s) μ))","decl":"/-- If a function `f` is locally integrable on a set `s` in a second countable topological space,\nthen there exists a sequence of open sets `u n` covering `s` such that `f` is integrable on each\nset `u n ∩ s`. -/\ntheorem LocallyIntegrableOn.exists_nat_integrableOn [SecondCountableTopology X]\n    (hf : LocallyIntegrableOn f s μ) : ∃ u : ℕ → Set X,\n    (∀ n, IsOpen (u n)) ∧ (s ⊆ ⋃ n, u n) ∧ (∀ n, IntegrableOn f (u n ∩ s) μ) := by\n  rcases hf.exists_countable_integrableOn with ⟨T, T_count, T_open, sT, hT⟩\n  let T' : Set (Set X) := insert ∅ T\n  have T'_count : T'.Countable := Countable.insert ∅ T_count\n  have T'_ne : T'.Nonempty := by simp only [T', insert_nonempty]\n  rcases T'_count.exists_eq_range T'_ne with ⟨u, hu⟩\n  refine ⟨u, ?_, ?_, ?_⟩\n  · intro n\n    have : u n ∈ T' := by rw [hu]; exact mem_range_self n\n    rcases mem_insert_iff.1 this with h|h\n    · rw [h]\n      exact isOpen_empty\n    · exact T_open _ h\n  · intro x hx\n    obtain ⟨v, hv, h'v⟩ : ∃ v, v ∈ T ∧ x ∈ v := by simpa only [mem_iUnion, exists_prop] using sT hx\n    have : v ∈ range u := by rw [← hu]; exact subset_insert ∅ T hv\n    obtain ⟨n, rfl⟩ : ∃ n, u n = v := by simpa only [mem_range] using this\n    exact mem_iUnion_of_mem _ h'v\n  · intro n\n    have : u n ∈ T' := by rw [hu]; exact mem_range_self n\n    rcases mem_insert_iff.1 this with h|h\n    · simp only [h, empty_inter, integrableOn_empty]\n    · exact hT _ h\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : SecondCountableTopology X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict s)","decl":"theorem LocallyIntegrableOn.aestronglyMeasurable [SecondCountableTopology X]\n    (hf : LocallyIntegrableOn f s μ) : AEStronglyMeasurable f (μ.restrict s) := by\n  rcases hf.exists_nat_integrableOn with ⟨u, -, su, hu⟩\n  have : s = ⋃ n, u n ∩ s := by rw [← iUnion_inter]; exact (inter_eq_right.mpr su).symm\n  rw [this, aestronglyMeasurable_iUnion_iff]\n  exact fun i : ℕ => (hu i).aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.locallyIntegrableOn_iff","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : LocallyCompactSpace X\nhs : IsLocallyClosed s\n⊢ Iff (MeasureTheory.LocallyIntegrableOn f s μ) (∀ (k : Set X), HasSubset.Subset k s → IsCompact k → MeasureTheory.IntegrableOn f k μ)","decl":"/-- If `s` is locally closed (e.g. open or closed), then `f` is locally integrable on `s` iff it is\nintegrable on every compact subset contained in `s`. -/\ntheorem locallyIntegrableOn_iff [LocallyCompactSpace X] (hs : IsLocallyClosed s) :\n    LocallyIntegrableOn f s μ ↔ ∀ (k : Set X), k ⊆ s → IsCompact k → IntegrableOn f k μ := by\n  refine ⟨fun hf k hk ↦ hf.integrableOn_compact_subset hk, fun hf x hx ↦ ?_⟩\n  rcases hs with ⟨U, Z, hU, hZ, rfl⟩\n  rcases exists_compact_subset hU hx.1 with ⟨K, hK, hxK, hKU⟩\n  rw [nhdsWithin_inter_of_mem (nhdsWithin_le_nhds <| hU.mem_nhds hx.1)]\n  refine ⟨Z ∩ K, inter_mem_nhdsWithin _ (mem_interior_iff_mem_nhds.1 hxK), ?_⟩\n  exact hf (Z ∩ K) (fun y hy ↦ ⟨hKU hy.2, hy.1⟩) (.inter_left hK hZ)\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.add","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf g : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhg : MeasureTheory.LocallyIntegrableOn g s μ\n⊢ MeasureTheory.LocallyIntegrableOn (HAdd.hAdd f g) s μ","decl":"protected theorem LocallyIntegrableOn.add\n    (hf : LocallyIntegrableOn f s μ) (hg : LocallyIntegrableOn g s μ) :\n    LocallyIntegrableOn (f + g) s μ := fun x hx ↦ (hf x hx).add (hg x hx)\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.sub","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf g : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhg : MeasureTheory.LocallyIntegrableOn g s μ\n⊢ MeasureTheory.LocallyIntegrableOn (HSub.hSub f g) s μ","decl":"protected theorem LocallyIntegrableOn.sub\n    (hf : LocallyIntegrableOn f s μ) (hg : LocallyIntegrableOn g s μ) :\n    LocallyIntegrableOn (f - g) s μ := fun x hx ↦ (hf x hx).sub (hg x hx)\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.neg","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\n⊢ MeasureTheory.LocallyIntegrableOn (Neg.neg f) s μ","decl":"protected theorem LocallyIntegrableOn.neg (hf : LocallyIntegrableOn f s μ) :\n    LocallyIntegrableOn (-f) s μ := fun x hx ↦ (hf x hx).neg\n\n"}
{"name":"MeasureTheory.locallyIntegrable_comap","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\nhs : MeasurableSet s\n⊢ Iff (MeasureTheory.LocallyIntegrable (fun x => f ↑x) (MeasureTheory.Measure.comap Subtype.val μ)) (MeasureTheory.LocallyIntegrableOn f s μ)","decl":"theorem locallyIntegrable_comap (hs : MeasurableSet s) :\n    LocallyIntegrable (fun x : s ↦ f x) (μ.comap Subtype.val) ↔ LocallyIntegrableOn f s μ := by\n  simp_rw [LocallyIntegrableOn, Subtype.forall', ← map_nhds_subtype_val]\n  exact forall_congr' fun _ ↦ (MeasurableEmbedding.subtype_coe hs).integrableAtFilter_iff_comap.symm\n\n"}
{"name":"MeasureTheory.locallyIntegrableOn_univ","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\n⊢ Iff (MeasureTheory.LocallyIntegrableOn f Set.univ μ) (MeasureTheory.LocallyIntegrable f μ)","decl":"theorem locallyIntegrableOn_univ : LocallyIntegrableOn f univ μ ↔ LocallyIntegrable f μ := by\n  simp only [LocallyIntegrableOn, nhdsWithin_univ, mem_univ, true_imp_iff]; rfl\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.locallyIntegrableOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\ns : Set X\n⊢ MeasureTheory.LocallyIntegrableOn f s μ","decl":"theorem LocallyIntegrable.locallyIntegrableOn (hf : LocallyIntegrable f μ) (s : Set X) :\n    LocallyIntegrableOn f s μ := fun x _ => (hf x).filter_mono nhdsWithin_le_nhds\n\n"}
{"name":"MeasureTheory.Integrable.locallyIntegrable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.Integrable f μ\n⊢ MeasureTheory.LocallyIntegrable f μ","decl":"theorem Integrable.locallyIntegrable (hf : Integrable f μ) : LocallyIntegrable f μ := fun _ =>\n  hf.integrableAtFilter _\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.mono","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\nF : Type u_4\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedAddCommGroup F\nf : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\ng : X → F\nhg : MeasureTheory.AEStronglyMeasurable g μ\nh : Filter.Eventually (fun x => LE.le (Norm.norm (g x)) (Norm.norm (f x))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.LocallyIntegrable g μ","decl":"theorem LocallyIntegrable.mono (hf : LocallyIntegrable f μ) {g : X → F}\n    (hg : AEStronglyMeasurable g μ) (h : ∀ᵐ x ∂μ, ‖g x‖ ≤ ‖f x‖) :\n    LocallyIntegrable g μ := by\n  rw [← locallyIntegrableOn_univ] at hf ⊢\n  exact hf.mono hg h\n\n"}
{"name":"MeasureTheory.locallyIntegrableOn_of_locallyIntegrable_restrict","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : OpensMeasurableSpace X\nhf : MeasureTheory.LocallyIntegrable f (μ.restrict s)\n⊢ MeasureTheory.LocallyIntegrableOn f s μ","decl":"/-- If `f` is locally integrable with respect to `μ.restrict s`, it is locally integrable on `s`.\n(See `locallyIntegrableOn_iff_locallyIntegrable_restrict` for an iff statement when `s` is\nclosed.) -/\ntheorem locallyIntegrableOn_of_locallyIntegrable_restrict [OpensMeasurableSpace X]\n    (hf : LocallyIntegrable f (μ.restrict s)) : LocallyIntegrableOn f s μ := by\n  intro x _\n  obtain ⟨t, ht_mem, ht_int⟩ := hf x\n  obtain ⟨u, hu_sub, hu_o, hu_mem⟩ := mem_nhds_iff.mp ht_mem\n  refine ⟨_, inter_mem_nhdsWithin s (hu_o.mem_nhds hu_mem), ?_⟩\n  simpa only [IntegrableOn, Measure.restrict_restrict hu_o.measurableSet, inter_comm] using\n    ht_int.mono_set hu_sub\n\n"}
{"name":"MeasureTheory.locallyIntegrableOn_iff_locallyIntegrable_restrict","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : OpensMeasurableSpace X\nhs : IsClosed s\n⊢ Iff (MeasureTheory.LocallyIntegrableOn f s μ) (MeasureTheory.LocallyIntegrable f (μ.restrict s))","decl":"/-- If `s` is closed, being locally integrable on `s` wrt `μ` is equivalent to being locally\nintegrable with respect to `μ.restrict s`. For the one-way implication without assuming `s` closed,\nsee `locallyIntegrableOn_of_locallyIntegrable_restrict`. -/\ntheorem locallyIntegrableOn_iff_locallyIntegrable_restrict [OpensMeasurableSpace X]\n    (hs : IsClosed s) : LocallyIntegrableOn f s μ ↔ LocallyIntegrable f (μ.restrict s) := by\n  refine ⟨fun hf x => ?_, locallyIntegrableOn_of_locallyIntegrable_restrict⟩\n  by_cases h : x ∈ s\n  · obtain ⟨t, ht_nhds, ht_int⟩ := hf x h\n    obtain ⟨u, hu_o, hu_x, hu_sub⟩ := mem_nhdsWithin.mp ht_nhds\n    refine ⟨u, hu_o.mem_nhds hu_x, ?_⟩\n    rw [IntegrableOn, restrict_restrict hu_o.measurableSet]\n    exact ht_int.mono_set hu_sub\n  · rw [← isOpen_compl_iff] at hs\n    refine ⟨sᶜ, hs.mem_nhds h, ?_⟩\n    rw [IntegrableOn, restrict_restrict, inter_comm, inter_compl_self, ← IntegrableOn]\n    exacts [integrableOn_empty, hs.measurableSet]\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrableOn_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\nk : Set X\nhf : MeasureTheory.LocallyIntegrable f μ\nhk : IsCompact k\n⊢ MeasureTheory.IntegrableOn f k μ","decl":"/-- If a function is locally integrable, then it is integrable on any compact set. -/\ntheorem LocallyIntegrable.integrableOn_isCompact {k : Set X} (hf : LocallyIntegrable f μ)\n    (hk : IsCompact k) : IntegrableOn f k μ :=\n  (hf.locallyIntegrableOn k).integrableOn_isCompact hk\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrableOn_nhds_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\nk : Set X\nhk : IsCompact k\n⊢ Exists fun u => And (IsOpen u) (And (HasSubset.Subset k u) (MeasureTheory.IntegrableOn f u μ))","decl":"/-- If a function is locally integrable, then it is integrable on an open neighborhood of any\ncompact set. -/\ntheorem LocallyIntegrable.integrableOn_nhds_isCompact (hf : LocallyIntegrable f μ) {k : Set X}\n    (hk : IsCompact k) : ∃ u, IsOpen u ∧ k ⊆ u ∧ IntegrableOn f u μ := by\n  refine IsCompact.induction_on hk ?_ ?_ ?_ ?_\n  · refine ⟨∅, isOpen_empty, Subset.rfl, integrableOn_empty⟩\n  · rintro s t hst ⟨u, u_open, tu, hu⟩\n    exact ⟨u, u_open, hst.trans tu, hu⟩\n  · rintro s t ⟨u, u_open, su, hu⟩ ⟨v, v_open, tv, hv⟩\n    exact ⟨u ∪ v, u_open.union v_open, union_subset_union su tv, hu.union hv⟩\n  · intro x _\n    rcases hf x with ⟨u, ux, hu⟩\n    rcases mem_nhds_iff.1 ux with ⟨v, vu, v_open, xv⟩\n    exact ⟨v, nhdsWithin_le_nhds (v_open.mem_nhds xv), v, v_open, Subset.rfl, hu.mono_set vu⟩\n\n"}
{"name":"MeasureTheory.locallyIntegrable_iff","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝ : LocallyCompactSpace X\n⊢ Iff (MeasureTheory.LocallyIntegrable f μ) (∀ (k : Set X), IsCompact k → MeasureTheory.IntegrableOn f k μ)","decl":"theorem locallyIntegrable_iff [LocallyCompactSpace X] :\n    LocallyIntegrable f μ ↔ ∀ k : Set X, IsCompact k → IntegrableOn f k μ :=\n  ⟨fun hf _k hk => hf.integrableOn_isCompact hk, fun hf x =>\n    let ⟨K, hK, h2K⟩ := exists_compact_mem_nhds x\n    ⟨K, h2K, hf K hK⟩⟩\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝ : SecondCountableTopology X\nhf : MeasureTheory.LocallyIntegrable f μ\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"theorem LocallyIntegrable.aestronglyMeasurable [SecondCountableTopology X]\n    (hf : LocallyIntegrable f μ) : AEStronglyMeasurable f μ := by\n  simpa only [restrict_univ] using (locallyIntegrableOn_univ.mpr hf).aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.exists_nat_integrableOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝ : SecondCountableTopology X\nhf : MeasureTheory.LocallyIntegrable f μ\n⊢ Exists fun u => And (∀ (n : Nat), IsOpen (u n)) (And (Eq (Set.iUnion fun n => u n) Set.univ) (∀ (n : Nat), MeasureTheory.IntegrableOn f (u n) μ))","decl":"/-- If a function is locally integrable in a second countable topological space,\nthen there exists a sequence of open sets covering the space on which it is integrable. -/\ntheorem LocallyIntegrable.exists_nat_integrableOn [SecondCountableTopology X]\n    (hf : LocallyIntegrable f μ) : ∃ u : ℕ → Set X,\n    (∀ n, IsOpen (u n)) ∧ ((⋃ n, u n) = univ) ∧ (∀ n, IntegrableOn f (u n) μ) := by\n  rcases (hf.locallyIntegrableOn univ).exists_nat_integrableOn with ⟨u, u_open, u_union, hu⟩\n  refine ⟨u, u_open, eq_univ_of_univ_subset u_union, fun n ↦ ?_⟩\n  simpa only [inter_univ] using hu n\n\n"}
{"name":"MeasureTheory.Memℒp.locallyIntegrable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nf : X → E\np : ENNReal\nhf : MeasureTheory.Memℒp f p μ\nhp : LE.le 1 p\n⊢ MeasureTheory.LocallyIntegrable f μ","decl":"theorem Memℒp.locallyIntegrable [IsLocallyFiniteMeasure μ] {f : X → E} {p : ℝ≥0∞}\n    (hf : Memℒp f p μ) (hp : 1 ≤ p) : LocallyIntegrable f μ := by\n  intro x\n  rcases μ.finiteAt_nhds x with ⟨U, hU, h'U⟩\n  have : Fact (μ U < ⊤) := ⟨h'U⟩\n  refine ⟨U, hU, ?_⟩\n  rw [IntegrableOn, ← memℒp_one_iff_integrable]\n  apply (hf.restrict U).mono_exponent hp\n\n"}
{"name":"MeasureTheory.locallyIntegrable_const","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nc : E\n⊢ MeasureTheory.LocallyIntegrable (fun x => c) μ","decl":"theorem locallyIntegrable_const [IsLocallyFiniteMeasure μ] (c : E) :\n    LocallyIntegrable (fun _ => c) μ :=\n  (memℒp_top_const c).locallyIntegrable le_top\n\n"}
{"name":"MeasureTheory.locallyIntegrableOn_const","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝³ : MeasurableSpace X\ninst✝² : TopologicalSpace X\ninst✝¹ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nc : E\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => c) s μ","decl":"theorem locallyIntegrableOn_const [IsLocallyFiniteMeasure μ] (c : E) :\n    LocallyIntegrableOn (fun _ => c) s μ :=\n  (locallyIntegrable_const c).locallyIntegrableOn s\n\n"}
{"name":"MeasureTheory.locallyIntegrable_zero","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\n⊢ MeasureTheory.LocallyIntegrable (fun x => 0) μ","decl":"theorem locallyIntegrable_zero : LocallyIntegrable (fun _ ↦ (0 : E)) μ :=\n  (integrable_zero X E μ).locallyIntegrable\n\n"}
{"name":"MeasureTheory.locallyIntegrableOn_zero","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ns : Set X\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => 0) s μ","decl":"theorem locallyIntegrableOn_zero : LocallyIntegrableOn (fun _ ↦ (0 : E)) s μ :=\n  locallyIntegrable_zero.locallyIntegrableOn s\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.indicator","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\ns : Set X\nhs : MeasurableSet s\n⊢ MeasureTheory.LocallyIntegrable (s.indicator f) μ","decl":"theorem LocallyIntegrable.indicator (hf : LocallyIntegrable f μ) {s : Set X}\n    (hs : MeasurableSet s) : LocallyIntegrable (s.indicator f) μ := by\n  intro x\n  rcases hf x with ⟨U, hU, h'U⟩\n  exact ⟨U, hU, h'U.indicator hs⟩\n\n"}
{"name":"MeasureTheory.locallyIntegrable_map_homeomorph","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nY : Type u_2\nE : Type u_3\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : MeasurableSpace Y\ninst✝³ : TopologicalSpace Y\ninst✝² : NormedAddCommGroup E\ninst✝¹ : BorelSpace X\ninst✝ : BorelSpace Y\ne : Homeomorph X Y\nf : Y → E\nμ : MeasureTheory.Measure X\n⊢ Iff (MeasureTheory.LocallyIntegrable f (MeasureTheory.Measure.map (⇑e) μ)) (MeasureTheory.LocallyIntegrable (Function.comp f ⇑e) μ)","decl":"theorem locallyIntegrable_map_homeomorph [BorelSpace X] [BorelSpace Y] (e : X ≃ₜ Y) {f : Y → E}\n    {μ : Measure X} : LocallyIntegrable f (Measure.map e μ) ↔ LocallyIntegrable (f ∘ e) μ := by\n  refine ⟨fun h x => ?_, fun h x => ?_⟩\n  · rcases h (e x) with ⟨U, hU, h'U⟩\n    refine ⟨e ⁻¹' U, e.continuous.continuousAt.preimage_mem_nhds hU, ?_⟩\n    exact (integrableOn_map_equiv e.toMeasurableEquiv).1 h'U\n  · rcases h (e.symm x) with ⟨U, hU, h'U⟩\n    refine ⟨e.symm ⁻¹' U, e.symm.continuous.continuousAt.preimage_mem_nhds hU, ?_⟩\n    apply (integrableOn_map_equiv e.toMeasurableEquiv).2\n    simp only [Homeomorph.toMeasurableEquiv_coe]\n    convert h'U\n    ext x\n    simp only [mem_preimage, Homeomorph.symm_apply_apply]\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.add","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf g : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\nhg : MeasureTheory.LocallyIntegrable g μ\n⊢ MeasureTheory.LocallyIntegrable (HAdd.hAdd f g) μ","decl":"protected theorem LocallyIntegrable.add (hf : LocallyIntegrable f μ) (hg : LocallyIntegrable g μ) :\n    LocallyIntegrable (f + g) μ := fun x ↦ (hf x).add (hg x)\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.sub","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf g : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\nhg : MeasureTheory.LocallyIntegrable g μ\n⊢ MeasureTheory.LocallyIntegrable (HSub.hSub f g) μ","decl":"protected theorem LocallyIntegrable.sub (hf : LocallyIntegrable f μ) (hg : LocallyIntegrable g μ) :\n    LocallyIntegrable (f - g) μ := fun x ↦ (hf x).sub (hg x)\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.neg","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\nhf : MeasureTheory.LocallyIntegrable f μ\n⊢ MeasureTheory.LocallyIntegrable (Neg.neg f) μ","decl":"protected theorem LocallyIntegrable.neg (hf : LocallyIntegrable f μ) :\n    LocallyIntegrable (-f) μ := fun x ↦ (hf x).neg\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.smul","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\n𝕜 : Type u_6\ninst✝² : NormedAddCommGroup 𝕜\ninst✝¹ : SMulZeroClass 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nhf : MeasureTheory.LocallyIntegrable f μ\nc : 𝕜\n⊢ MeasureTheory.LocallyIntegrable (HSMul.hSMul c f) μ","decl":"protected theorem LocallyIntegrable.smul {𝕜 : Type*} [NormedAddCommGroup 𝕜] [SMulZeroClass 𝕜 E]\n    [BoundedSMul 𝕜 E] (hf : LocallyIntegrable f μ) (c : 𝕜) :\n    LocallyIntegrable (c • f) μ := fun x ↦ (hf x).smul c\n\n"}
{"name":"MeasureTheory.locallyIntegrable_finset_sum'","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\nι : Type u_6\ns : Finset ι\nf : ι → X → E\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.LocallyIntegrable (f i) μ\n⊢ MeasureTheory.LocallyIntegrable (s.sum fun i => f i) μ","decl":"theorem locallyIntegrable_finset_sum' {ι} (s : Finset ι) {f : ι → X → E}\n    (hf : ∀ i ∈ s, LocallyIntegrable (f i) μ) : LocallyIntegrable (∑ i ∈ s, f i) μ :=\n  Finset.sum_induction f (fun g => LocallyIntegrable g μ) (fun _ _ => LocallyIntegrable.add)\n    locallyIntegrable_zero hf\n\n"}
{"name":"MeasureTheory.locallyIntegrable_finset_sum","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\nι : Type u_6\ns : Finset ι\nf : ι → X → E\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.LocallyIntegrable (f i) μ\n⊢ MeasureTheory.LocallyIntegrable (fun a => s.sum fun i => f i a) μ","decl":"theorem locallyIntegrable_finset_sum {ι} (s : Finset ι) {f : ι → X → E}\n    (hf : ∀ i ∈ s, LocallyIntegrable (f i) μ) : LocallyIntegrable (fun a ↦ ∑ i ∈ s, f i a) μ := by\n  simpa only [← Finset.sum_apply] using locallyIntegrable_finset_sum' s hf\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_smul_left_of_hasCompactSupport","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝² : NormedSpace Real E\ninst✝¹ : OpensMeasurableSpace X\ninst✝ : T2Space X\nhf : MeasureTheory.LocallyIntegrable f μ\ng : X → Real\nhg : Continuous g\nh'g : HasCompactSupport g\n⊢ MeasureTheory.Integrable (fun x => HSMul.hSMul (g x) (f x)) μ","decl":"/-- If `f` is locally integrable and `g` is continuous with compact support,\nthen `g • f` is integrable. -/\ntheorem LocallyIntegrable.integrable_smul_left_of_hasCompactSupport\n    [NormedSpace ℝ E] [OpensMeasurableSpace X] [T2Space X]\n    (hf : LocallyIntegrable f μ) {g : X → ℝ} (hg : Continuous g) (h'g : HasCompactSupport g) :\n    Integrable (fun x ↦ g x • f x) μ := by\n  let K := tsupport g\n  have hK : IsCompact K := h'g\n  have : K.indicator (fun x ↦ g x • f x) = (fun x ↦ g x • f x) := by\n    apply indicator_eq_self.2\n    apply support_subset_iff'.2\n    intros x hx\n    simp [image_eq_zero_of_nmem_tsupport hx]\n  rw [← this, indicator_smul]\n  apply Integrable.smul_of_top_right\n  · rw [integrable_indicator_iff hK.measurableSet]\n    exact hf.integrableOn_isCompact hK\n  · exact hg.memℒp_top_of_hasCompactSupport h'g μ\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_smul_right_of_hasCompactSupport","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝² : NormedSpace Real E\ninst✝¹ : OpensMeasurableSpace X\ninst✝ : T2Space X\nf : X → Real\nhf : MeasureTheory.LocallyIntegrable f μ\ng : X → E\nhg : Continuous g\nh'g : HasCompactSupport g\n⊢ MeasureTheory.Integrable (fun x => HSMul.hSMul (f x) (g x)) μ","decl":"/-- If `f` is locally integrable and `g` is continuous with compact support,\nthen `f • g` is integrable. -/\ntheorem LocallyIntegrable.integrable_smul_right_of_hasCompactSupport\n    [NormedSpace ℝ E] [OpensMeasurableSpace X] [T2Space X] {f : X → ℝ} (hf : LocallyIntegrable f μ)\n    {g : X → E} (hg : Continuous g) (h'g : HasCompactSupport g) :\n    Integrable (fun x ↦ f x • g x) μ := by\n  let K := tsupport g\n  have hK : IsCompact K := h'g\n  have : K.indicator (fun x ↦ f x • g x) = (fun x ↦ f x • g x) := by\n    apply indicator_eq_self.2\n    apply support_subset_iff'.2\n    intros x hx\n    simp [image_eq_zero_of_nmem_tsupport hx]\n  rw [← this, indicator_smul_left]\n  apply Integrable.smul_of_top_left\n  · rw [integrable_indicator_iff hK.measurableSet]\n    exact hf.integrableOn_isCompact hK\n  · exact hg.memℒp_top_of_hasCompactSupport h'g μ\n\n"}
{"name":"MeasureTheory.integrable_iff_integrableAtFilter_cocompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝² : MeasurableSpace X\ninst✝¹ : TopologicalSpace X\ninst✝ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\n⊢ Iff (MeasureTheory.Integrable f μ) (And (MeasureTheory.IntegrableAtFilter f (Filter.cocompact X) μ) (MeasureTheory.LocallyIntegrable f μ))","decl":"theorem integrable_iff_integrableAtFilter_cocompact :\n    Integrable f μ ↔ (IntegrableAtFilter f (cocompact X) μ ∧ LocallyIntegrable f μ) := by\n  refine ⟨fun hf ↦ ⟨hf.integrableAtFilter _, hf.locallyIntegrable⟩, fun ⟨⟨s, hsc, hs⟩, hloc⟩ ↦ ?_⟩\n  obtain ⟨t, htc, ht⟩ := mem_cocompact'.mp hsc\n  rewrite [← integrableOn_univ, ← compl_union_self s, integrableOn_union]\n  exact ⟨(hloc.integrableOn_isCompact htc).mono ht le_rfl, hs⟩\n\n"}
{"name":"MeasureTheory.integrable_iff_integrableAtFilter_atBot_atTop","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\ninst✝² : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝¹ : LinearOrder X\ninst✝ : CompactIccSpace X\n⊢ Iff (MeasureTheory.Integrable f μ) (And (And (MeasureTheory.IntegrableAtFilter f Filter.atBot μ) (MeasureTheory.IntegrableAtFilter f Filter.atTop μ)) (MeasureTheory.LocallyIntegrable f μ))","decl":"theorem integrable_iff_integrableAtFilter_atBot_atTop [LinearOrder X] [CompactIccSpace X] :\n    Integrable f μ ↔\n    (IntegrableAtFilter f atBot μ ∧ IntegrableAtFilter f atTop μ) ∧ LocallyIntegrable f μ := by\n  constructor\n  · exact fun hf ↦ ⟨⟨hf.integrableAtFilter _, hf.integrableAtFilter _⟩, hf.locallyIntegrable⟩\n  · refine fun h ↦ integrable_iff_integrableAtFilter_cocompact.mpr ⟨?_, h.2⟩\n    exact (IntegrableAtFilter.sup_iff.mpr h.1).filter_mono cocompact_le_atBot_atTop\n\n"}
{"name":"MeasureTheory.integrable_iff_integrableAtFilter_atBot","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝² : LinearOrder X\ninst✝¹ : OrderTop X\ninst✝ : CompactIccSpace X\n⊢ Iff (MeasureTheory.Integrable f μ) (And (MeasureTheory.IntegrableAtFilter f Filter.atBot μ) (MeasureTheory.LocallyIntegrable f μ))","decl":"theorem integrable_iff_integrableAtFilter_atBot [LinearOrder X] [OrderTop X] [CompactIccSpace X] :\n    Integrable f μ ↔ IntegrableAtFilter f atBot μ ∧ LocallyIntegrable f μ := by\n  constructor\n  · exact fun hf ↦ ⟨hf.integrableAtFilter _, hf.locallyIntegrable⟩\n  · refine fun h ↦ integrable_iff_integrableAtFilter_cocompact.mpr ⟨?_, h.2⟩\n    exact h.1.filter_mono cocompact_le_atBot\n\n"}
{"name":"MeasureTheory.integrable_iff_integrableAtFilter_atTop","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝² : LinearOrder X\ninst✝¹ : OrderBot X\ninst✝ : CompactIccSpace X\n⊢ Iff (MeasureTheory.Integrable f μ) (And (MeasureTheory.IntegrableAtFilter f Filter.atTop μ) (MeasureTheory.LocallyIntegrable f μ))","decl":"theorem integrable_iff_integrableAtFilter_atTop [LinearOrder X] [OrderBot X] [CompactIccSpace X] :\n    Integrable f μ ↔ IntegrableAtFilter f atTop μ ∧ LocallyIntegrable f μ :=\n  integrable_iff_integrableAtFilter_atBot (X := Xᵒᵈ)\n\n"}
{"name":"MeasureTheory.integrableOn_Iic_iff_integrableAtFilter_atBot","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\ninst✝² : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\na : X\ninst✝¹ : LinearOrder X\ninst✝ : CompactIccSpace X\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Iic a) μ) (And (MeasureTheory.IntegrableAtFilter f Filter.atBot μ) (MeasureTheory.LocallyIntegrableOn f (Set.Iic a) μ))","decl":"theorem integrableOn_Iic_iff_integrableAtFilter_atBot [LinearOrder X] [CompactIccSpace X] :\n    IntegrableOn f (Iic a) μ ↔ IntegrableAtFilter f atBot μ ∧ LocallyIntegrableOn f (Iic a) μ := by\n  refine ⟨fun h ↦ ⟨⟨Iic a, Iic_mem_atBot a, h⟩, h.locallyIntegrableOn⟩, fun ⟨⟨s, hsl, hs⟩, h⟩ ↦ ?_⟩\n  haveI : Nonempty X := Nonempty.intro a\n  obtain ⟨a', ha'⟩ := mem_atBot_sets.mp hsl\n  refine (integrableOn_union.mpr ⟨hs.mono ha' le_rfl, ?_⟩).mono Iic_subset_Iic_union_Icc le_rfl\n  exact h.integrableOn_compact_subset Icc_subset_Iic_self isCompact_Icc\n\n"}
{"name":"MeasureTheory.integrableOn_Ici_iff_integrableAtFilter_atTop","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\ninst✝² : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\na : X\ninst✝¹ : LinearOrder X\ninst✝ : CompactIccSpace X\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ici a) μ) (And (MeasureTheory.IntegrableAtFilter f Filter.atTop μ) (MeasureTheory.LocallyIntegrableOn f (Set.Ici a) μ))","decl":"theorem integrableOn_Ici_iff_integrableAtFilter_atTop [LinearOrder X] [CompactIccSpace X] :\n    IntegrableOn f (Ici a) μ ↔ IntegrableAtFilter f atTop μ ∧ LocallyIntegrableOn f (Ici a) μ :=\n  integrableOn_Iic_iff_integrableAtFilter_atBot (X := Xᵒᵈ)\n\n"}
{"name":"MeasureTheory.integrableOn_Iio_iff_integrableAtFilter_atBot_nhdsWithin","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\na : X\ninst✝³ : LinearOrder X\ninst✝² : CompactIccSpace X\ninst✝¹ : NoMinOrder X\ninst✝ : OrderTopology X\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Iio a) μ) (And (MeasureTheory.IntegrableAtFilter f Filter.atBot μ) (And (MeasureTheory.IntegrableAtFilter f (nhdsWithin a (Set.Iio a)) μ) (MeasureTheory.LocallyIntegrableOn f (Set.Iio a) μ)))","decl":"theorem integrableOn_Iio_iff_integrableAtFilter_atBot_nhdsWithin\n    [LinearOrder X] [CompactIccSpace X] [NoMinOrder X] [OrderTopology X] :\n    IntegrableOn f (Iio a) μ ↔ IntegrableAtFilter f atBot μ ∧\n    IntegrableAtFilter f (𝓝[<] a) μ ∧ LocallyIntegrableOn f (Iio a) μ := by\n  constructor\n  · intro h\n    exact ⟨⟨Iio a, Iio_mem_atBot a, h⟩, ⟨Iio a, self_mem_nhdsWithin, h⟩, h.locallyIntegrableOn⟩\n  · intro ⟨hbot, ⟨s, hsl, hs⟩, hlocal⟩\n    obtain ⟨s', ⟨hs'_mono, hs'⟩⟩ := mem_nhdsLT_iff_exists_Ioo_subset.mp hsl\n    refine (integrableOn_union.mpr ⟨?_, hs.mono hs' le_rfl⟩).mono Iio_subset_Iic_union_Ioo le_rfl\n    exact integrableOn_Iic_iff_integrableAtFilter_atBot.mpr\n      ⟨hbot, hlocal.mono_set (Iic_subset_Iio.mpr hs'_mono)⟩\n\n"}
{"name":"MeasureTheory.integrableOn_Ioi_iff_integrableAtFilter_atTop_nhdsWithin","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\na : X\ninst✝³ : LinearOrder X\ninst✝² : CompactIccSpace X\ninst✝¹ : NoMaxOrder X\ninst✝ : OrderTopology X\n⊢ Iff (MeasureTheory.IntegrableOn f (Set.Ioi a) μ) (And (MeasureTheory.IntegrableAtFilter f Filter.atTop μ) (And (MeasureTheory.IntegrableAtFilter f (nhdsWithin a (Set.Ioi a)) μ) (MeasureTheory.LocallyIntegrableOn f (Set.Ioi a) μ)))","decl":"theorem integrableOn_Ioi_iff_integrableAtFilter_atTop_nhdsWithin\n    [LinearOrder X] [CompactIccSpace X] [NoMaxOrder X] [OrderTopology X] :\n    IntegrableOn f (Ioi a) μ ↔ IntegrableAtFilter f atTop μ ∧\n    IntegrableAtFilter f (𝓝[>] a) μ ∧ LocallyIntegrableOn f (Ioi a) μ :=\n  integrableOn_Iio_iff_integrableAtFilter_atBot_nhdsWithin (X := Xᵒᵈ)\n\n"}
{"name":"Continuous.locallyIntegrable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝² : OpensMeasurableSpace X\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : SecondCountableTopologyEither X E\nhf : Continuous f\n⊢ MeasureTheory.LocallyIntegrable f μ","decl":"/-- A continuous function `f` is locally integrable with respect to any locally finite measure. -/\ntheorem Continuous.locallyIntegrable [IsLocallyFiniteMeasure μ] [SecondCountableTopologyEither X E]\n    (hf : Continuous f) : LocallyIntegrable f μ :=\n  hf.integrableAt_nhds\n\n"}
{"name":"ContinuousOn.locallyIntegrableOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝² : OpensMeasurableSpace X\nK : Set X\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : SecondCountableTopologyEither X E\nhf : ContinuousOn f K\nhK : MeasurableSet K\n⊢ MeasureTheory.LocallyIntegrableOn f K μ","decl":"/-- A function `f` continuous on a set `K` is locally integrable on this set with respect\nto any locally finite measure. -/\ntheorem ContinuousOn.locallyIntegrableOn [IsLocallyFiniteMeasure μ]\n    [SecondCountableTopologyEither X E] (hf : ContinuousOn f K)\n    (hK : MeasurableSet K) : LocallyIntegrableOn f K μ := fun _x hx =>\n  hf.integrableAt_nhdsWithin hK hx\n\n"}
{"name":"ContinuousOn.integrableOn_compact'","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\ninst✝² : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝¹ : OpensMeasurableSpace X\nK : Set X\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts μ\nhK : IsCompact K\nh'K : MeasurableSet K\nhf : ContinuousOn f K\n⊢ MeasureTheory.IntegrableOn f K μ","decl":"/-- A function `f` continuous on a compact set `K` is integrable on this set with respect to any\nlocally finite measure. -/\ntheorem ContinuousOn.integrableOn_compact'\n    (hK : IsCompact K) (h'K : MeasurableSet K) (hf : ContinuousOn f K) :\n    IntegrableOn f K μ := by\n  refine ⟨ContinuousOn.aestronglyMeasurable_of_isCompact hf hK h'K, ?_⟩\n  have : Fact (μ K < ∞) := ⟨hK.measure_lt_top⟩\n  obtain ⟨C, hC⟩ : ∃ C, ∀ x ∈ f '' K, ‖x‖ ≤ C :=\n    IsBounded.exists_norm_le (hK.image_of_continuousOn hf).isBounded\n  apply hasFiniteIntegral_of_bounded (C := C)\n  filter_upwards [ae_restrict_mem h'K] with x hx using hC _ (mem_image_of_mem f hx)\n\n"}
{"name":"ContinuousOn.integrableOn_compact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝² : OpensMeasurableSpace X\nK : Set X\ninst✝¹ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝ : T2Space X\nhK : IsCompact K\nhf : ContinuousOn f K\n⊢ MeasureTheory.IntegrableOn f K μ","decl":"theorem ContinuousOn.integrableOn_compact [T2Space X]\n    (hK : IsCompact K) (hf : ContinuousOn f K) : IntegrableOn f K μ :=\n  hf.integrableOn_compact' hK hK.measurableSet\n\n"}
{"name":"ContinuousOn.integrableOn_Icc","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\na b : X\ninst✝³ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝² : Preorder X\ninst✝¹ : CompactIccSpace X\ninst✝ : T2Space X\nhf : ContinuousOn f (Set.Icc a b)\n⊢ MeasureTheory.IntegrableOn f (Set.Icc a b) μ","decl":"theorem ContinuousOn.integrableOn_Icc [Preorder X] [CompactIccSpace X] [T2Space X]\n    (hf : ContinuousOn f (Icc a b)) : IntegrableOn f (Icc a b) μ :=\n  hf.integrableOn_compact isCompact_Icc\n\n"}
{"name":"Continuous.integrableOn_Icc","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\na b : X\ninst✝³ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝² : Preorder X\ninst✝¹ : CompactIccSpace X\ninst✝ : T2Space X\nhf : Continuous f\n⊢ MeasureTheory.IntegrableOn f (Set.Icc a b) μ","decl":"theorem Continuous.integrableOn_Icc [Preorder X] [CompactIccSpace X] [T2Space X]\n    (hf : Continuous f) : IntegrableOn f (Icc a b) μ :=\n  hf.continuousOn.integrableOn_Icc\n\n"}
{"name":"Continuous.integrableOn_Ioc","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\na b : X\ninst✝³ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝² : Preorder X\ninst✝¹ : CompactIccSpace X\ninst✝ : T2Space X\nhf : Continuous f\n⊢ MeasureTheory.IntegrableOn f (Set.Ioc a b) μ","decl":"theorem Continuous.integrableOn_Ioc [Preorder X] [CompactIccSpace X] [T2Space X]\n    (hf : Continuous f) : IntegrableOn f (Ioc a b) μ :=\n  hf.integrableOn_Icc.mono_set Ioc_subset_Icc_self\n\n"}
{"name":"ContinuousOn.integrableOn_uIcc","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\na b : X\ninst✝³ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝² : LinearOrder X\ninst✝¹ : CompactIccSpace X\ninst✝ : T2Space X\nhf : ContinuousOn f (Set.uIcc a b)\n⊢ MeasureTheory.IntegrableOn f (Set.uIcc a b) μ","decl":"theorem ContinuousOn.integrableOn_uIcc [LinearOrder X] [CompactIccSpace X] [T2Space X]\n    (hf : ContinuousOn f [[a, b]]) : IntegrableOn f [[a, b]] μ :=\n  hf.integrableOn_Icc\n\n"}
{"name":"Continuous.integrableOn_uIcc","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\na b : X\ninst✝³ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝² : LinearOrder X\ninst✝¹ : CompactIccSpace X\ninst✝ : T2Space X\nhf : Continuous f\n⊢ MeasureTheory.IntegrableOn f (Set.uIcc a b) μ","decl":"theorem Continuous.integrableOn_uIcc [LinearOrder X] [CompactIccSpace X] [T2Space X]\n    (hf : Continuous f) : IntegrableOn f [[a, b]] μ :=\n  hf.integrableOn_Icc\n\n"}
{"name":"Continuous.integrableOn_uIoc","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\na b : X\ninst✝³ : MeasureTheory.IsFiniteMeasureOnCompacts μ\ninst✝² : LinearOrder X\ninst✝¹ : CompactIccSpace X\ninst✝ : T2Space X\nhf : Continuous f\n⊢ MeasureTheory.IntegrableOn f (Set.uIoc a b) μ","decl":"theorem Continuous.integrableOn_uIoc [LinearOrder X] [CompactIccSpace X] [T2Space X]\n    (hf : Continuous f) : IntegrableOn f (Ι a b) μ :=\n  hf.integrableOn_Ioc\n\n"}
{"name":"Continuous.integrable_of_hasCompactSupport","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\ninst✝² : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝¹ : OpensMeasurableSpace X\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts μ\nhf : Continuous f\nhcf : HasCompactSupport f\n⊢ MeasureTheory.Integrable f μ","decl":"/-- A continuous function with compact support is integrable on the whole space. -/\ntheorem Continuous.integrable_of_hasCompactSupport (hf : Continuous f) (hcf : HasCompactSupport f) :\n    Integrable f μ :=\n  (integrableOn_iff_integrable_of_support_subset (subset_tsupport f)).mp <|\n    hf.continuousOn.integrableOn_compact' hcf (isClosed_tsupport _).measurableSet\n\n"}
{"name":"MonotoneOn.memℒp_top","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : ConditionallyCompleteLinearOrder X\ninst✝³ : ConditionallyCompleteLinearOrder E\ninst✝² : OrderTopology X\ninst✝¹ : OrderTopology E\ninst✝ : SecondCountableTopology E\nhmono : MonotoneOn f s\na b : X\nha : IsLeast s a\nhb : IsGreatest s b\nh's : MeasurableSet s\n⊢ MeasureTheory.Memℒp f Top.top (μ.restrict s)","decl":"theorem MonotoneOn.memℒp_top (hmono : MonotoneOn f s) {a b : X}\n    (ha : IsLeast s a) (hb : IsGreatest s b) (h's : MeasurableSet s) :\n    Memℒp f ∞ (μ.restrict s) := by\n  borelize E\n  have hbelow : BddBelow (f '' s) := ⟨f a, fun x ⟨y, hy, hyx⟩ => hyx ▸ hmono ha.1 hy (ha.2 hy)⟩\n  have habove : BddAbove (f '' s) := ⟨f b, fun x ⟨y, hy, hyx⟩ => hyx ▸ hmono hy hb.1 (hb.2 hy)⟩\n  have : IsBounded (f '' s) := Metric.isBounded_of_bddAbove_of_bddBelow habove hbelow\n  rcases isBounded_iff_forall_norm_le.mp this with ⟨C, hC⟩\n  have A : Memℒp (fun _ => C) ⊤ (μ.restrict s) := memℒp_top_const _\n  apply Memℒp.mono A (aemeasurable_restrict_of_monotoneOn h's hmono).aestronglyMeasurable\n  apply (ae_restrict_iff' h's).mpr\n  apply ae_of_all _ fun y hy ↦ ?_\n  exact (hC _ (mem_image_of_mem f hy)).trans (le_abs_self _)\n\n"}
{"name":"MonotoneOn.memℒp_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : ConditionallyCompleteLinearOrder X\ninst✝³ : ConditionallyCompleteLinearOrder E\ninst✝² : OrderTopology X\ninst✝¹ : OrderTopology E\ninst✝ : SecondCountableTopology E\np : ENNReal\nhmono : MonotoneOn f s\na b : X\nha : IsLeast s a\nhb : IsGreatest s b\nhs : Ne (μ s) Top.top\nh's : MeasurableSet s\n⊢ MeasureTheory.Memℒp f p (μ.restrict s)","decl":"theorem MonotoneOn.memℒp_of_measure_ne_top (hmono : MonotoneOn f s) {a b : X}\n    (ha : IsLeast s a) (hb : IsGreatest s b) (hs : μ s ≠ ∞) (h's : MeasurableSet s) :\n    Memℒp f p (μ.restrict s) :=\n  (hmono.memℒp_top ha hb h's).mono_exponent_of_measure_support_ne_top (s := univ)\n    (by simp) (by simpa using hs) le_top\n\n"}
{"name":"MonotoneOn.memℒp_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁶ : BorelSpace X\ninst✝⁵ : ConditionallyCompleteLinearOrder X\ninst✝⁴ : ConditionallyCompleteLinearOrder E\ninst✝³ : OrderTopology X\ninst✝² : OrderTopology E\ninst✝¹ : SecondCountableTopology E\np : ENNReal\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts μ\nhs : IsCompact s\nhmono : MonotoneOn f s\n⊢ MeasureTheory.Memℒp f p (μ.restrict s)","decl":"theorem MonotoneOn.memℒp_isCompact [IsFiniteMeasureOnCompacts μ] (hs : IsCompact s)\n    (hmono : MonotoneOn f s) : Memℒp f p (μ.restrict s) := by\n  obtain rfl | h := s.eq_empty_or_nonempty\n  · simp\n  · exact hmono.memℒp_of_measure_ne_top (hs.isLeast_sInf h) (hs.isGreatest_sSup h)\n      hs.measure_lt_top.ne hs.measurableSet\n\n"}
{"name":"AntitoneOn.memℒp_top","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : ConditionallyCompleteLinearOrder X\ninst✝³ : ConditionallyCompleteLinearOrder E\ninst✝² : OrderTopology X\ninst✝¹ : OrderTopology E\ninst✝ : SecondCountableTopology E\nhanti : AntitoneOn f s\na b : X\nha : IsLeast s a\nhb : IsGreatest s b\nh's : MeasurableSet s\n⊢ MeasureTheory.Memℒp f Top.top (μ.restrict s)","decl":"theorem AntitoneOn.memℒp_top (hanti : AntitoneOn f s) {a b : X}\n    (ha : IsLeast s a) (hb : IsGreatest s b) (h's : MeasurableSet s) :\n    Memℒp f ∞ (μ.restrict s) :=\n  MonotoneOn.memℒp_top (E := Eᵒᵈ) hanti ha hb h's\n\n"}
{"name":"AntitoneOn.memℒp_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : ConditionallyCompleteLinearOrder X\ninst✝³ : ConditionallyCompleteLinearOrder E\ninst✝² : OrderTopology X\ninst✝¹ : OrderTopology E\ninst✝ : SecondCountableTopology E\np : ENNReal\nhanti : AntitoneOn f s\na b : X\nha : IsLeast s a\nhb : IsGreatest s b\nhs : Ne (μ s) Top.top\nh's : MeasurableSet s\n⊢ MeasureTheory.Memℒp f p (μ.restrict s)","decl":"theorem AntitoneOn.memℒp_of_measure_ne_top (hanti : AntitoneOn f s) {a b : X}\n    (ha : IsLeast s a) (hb : IsGreatest s b) (hs : μ s ≠ ∞) (h's : MeasurableSet s) :\n    Memℒp f p (μ.restrict s) :=\n  MonotoneOn.memℒp_of_measure_ne_top (E := Eᵒᵈ) hanti ha hb hs h's\n\n"}
{"name":"AntitoneOn.memℒp_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁶ : BorelSpace X\ninst✝⁵ : ConditionallyCompleteLinearOrder X\ninst✝⁴ : ConditionallyCompleteLinearOrder E\ninst✝³ : OrderTopology X\ninst✝² : OrderTopology E\ninst✝¹ : SecondCountableTopology E\np : ENNReal\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts μ\nhs : IsCompact s\nhanti : AntitoneOn f s\n⊢ MeasureTheory.Memℒp f p (μ.restrict s)","decl":"theorem AntitoneOn.memℒp_isCompact [IsFiniteMeasureOnCompacts μ] (hs : IsCompact s)\n    (hanti : AntitoneOn f s) : Memℒp f p (μ.restrict s) :=\n  MonotoneOn.memℒp_isCompact (E := Eᵒᵈ) hs hanti\n\n"}
{"name":"MonotoneOn.integrableOn_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : ConditionallyCompleteLinearOrder X\ninst✝³ : ConditionallyCompleteLinearOrder E\ninst✝² : OrderTopology X\ninst✝¹ : OrderTopology E\ninst✝ : SecondCountableTopology E\nhmono : MonotoneOn f s\na b : X\nha : IsLeast s a\nhb : IsGreatest s b\nhs : Ne (μ s) Top.top\nh's : MeasurableSet s\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem MonotoneOn.integrableOn_of_measure_ne_top (hmono : MonotoneOn f s) {a b : X}\n    (ha : IsLeast s a) (hb : IsGreatest s b) (hs : μ s ≠ ∞) (h's : MeasurableSet s) :\n    IntegrableOn f s μ :=\n  memℒp_one_iff_integrable.1 (hmono.memℒp_of_measure_ne_top ha hb hs h's)\n\n"}
{"name":"MonotoneOn.integrableOn_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁶ : BorelSpace X\ninst✝⁵ : ConditionallyCompleteLinearOrder X\ninst✝⁴ : ConditionallyCompleteLinearOrder E\ninst✝³ : OrderTopology X\ninst✝² : OrderTopology E\ninst✝¹ : SecondCountableTopology E\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts μ\nhs : IsCompact s\nhmono : MonotoneOn f s\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem MonotoneOn.integrableOn_isCompact [IsFiniteMeasureOnCompacts μ] (hs : IsCompact s)\n    (hmono : MonotoneOn f s) : IntegrableOn f s μ :=\n  memℒp_one_iff_integrable.1 (hmono.memℒp_isCompact hs)\n\n"}
{"name":"AntitoneOn.integrableOn_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁵ : BorelSpace X\ninst✝⁴ : ConditionallyCompleteLinearOrder X\ninst✝³ : ConditionallyCompleteLinearOrder E\ninst✝² : OrderTopology X\ninst✝¹ : OrderTopology E\ninst✝ : SecondCountableTopology E\nhanti : AntitoneOn f s\na b : X\nha : IsLeast s a\nhb : IsGreatest s b\nhs : Ne (μ s) Top.top\nh's : MeasurableSet s\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem AntitoneOn.integrableOn_of_measure_ne_top (hanti : AntitoneOn f s) {a b : X}\n    (ha : IsLeast s a) (hb : IsGreatest s b) (hs : μ s ≠ ∞) (h's : MeasurableSet s) :\n    IntegrableOn f s μ :=\n  memℒp_one_iff_integrable.1 (hanti.memℒp_of_measure_ne_top ha hb hs h's)\n\n"}
{"name":"AntitoneOn.integrableOn_isCompact","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ns : Set X\ninst✝⁶ : BorelSpace X\ninst✝⁵ : ConditionallyCompleteLinearOrder X\ninst✝⁴ : ConditionallyCompleteLinearOrder E\ninst✝³ : OrderTopology X\ninst✝² : OrderTopology E\ninst✝¹ : SecondCountableTopology E\ninst✝ : MeasureTheory.IsFiniteMeasureOnCompacts μ\nhs : IsCompact s\nhanti : AntitoneOn f s\n⊢ MeasureTheory.IntegrableOn f s μ","decl":"theorem AntitoneOn.integrableOn_isCompact [IsFiniteMeasureOnCompacts μ] (hs : IsCompact s)\n    (hanti : AntitoneOn f s) : IntegrableOn f s μ :=\n  memℒp_one_iff_integrable.1 (hanti.memℒp_isCompact hs)\n\n"}
{"name":"Monotone.locallyIntegrable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁶ : BorelSpace X\ninst✝⁵ : ConditionallyCompleteLinearOrder X\ninst✝⁴ : ConditionallyCompleteLinearOrder E\ninst✝³ : OrderTopology X\ninst✝² : OrderTopology E\ninst✝¹ : SecondCountableTopology E\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhmono : Monotone f\n⊢ MeasureTheory.LocallyIntegrable f μ","decl":"theorem Monotone.locallyIntegrable [IsLocallyFiniteMeasure μ] (hmono : Monotone f) :\n    LocallyIntegrable f μ := by\n  intro x\n  rcases μ.finiteAt_nhds x with ⟨U, hU, h'U⟩\n  obtain ⟨a, b, xab, hab, abU⟩ : ∃ a b : X, x ∈ Icc a b ∧ Icc a b ∈ 𝓝 x ∧ Icc a b ⊆ U :=\n    exists_Icc_mem_subset_of_mem_nhds hU\n  have ab : a ≤ b := xab.1.trans xab.2\n  refine ⟨Icc a b, hab, ?_⟩\n  exact\n    (hmono.monotoneOn _).integrableOn_of_measure_ne_top (isLeast_Icc ab) (isGreatest_Icc ab)\n      ((measure_mono abU).trans_lt h'U).ne measurableSet_Icc\n\n"}
{"name":"Antitone.locallyIntegrable","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁹ : MeasurableSpace X\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : NormedAddCommGroup E\nf : X → E\nμ : MeasureTheory.Measure X\ninst✝⁶ : BorelSpace X\ninst✝⁵ : ConditionallyCompleteLinearOrder X\ninst✝⁴ : ConditionallyCompleteLinearOrder E\ninst✝³ : OrderTopology X\ninst✝² : OrderTopology E\ninst✝¹ : SecondCountableTopology E\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\nhanti : Antitone f\n⊢ MeasureTheory.LocallyIntegrable f μ","decl":"theorem Antitone.locallyIntegrable [IsLocallyFiniteMeasure μ] (hanti : Antitone f) :\n    LocallyIntegrable f μ :=\n  hanti.dual_right.locallyIntegrable\n\n"}
{"name":"MeasureTheory.IntegrableOn.mul_continuousOn_of_subset","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nR : Type u_5\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝² : OpensMeasurableSpace X\nA K : Set X\ninst✝¹ : NormedRing R\ninst✝ : SecondCountableTopologyEither X R\ng g' : X → R\nhg : MeasureTheory.IntegrableOn g A μ\nhg' : ContinuousOn g' K\nhA : MeasurableSet A\nhK : IsCompact K\nhAK : HasSubset.Subset A K\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (g x) (g' x)) A μ","decl":"theorem IntegrableOn.mul_continuousOn_of_subset (hg : IntegrableOn g A μ) (hg' : ContinuousOn g' K)\n    (hA : MeasurableSet A) (hK : IsCompact K) (hAK : A ⊆ K) :\n    IntegrableOn (fun x => g x * g' x) A μ := by\n  rcases IsCompact.exists_bound_of_continuousOn hK hg' with ⟨C, hC⟩\n  rw [IntegrableOn, ← memℒp_one_iff_integrable] at hg ⊢\n  have : ∀ᵐ x ∂μ.restrict A, ‖g x * g' x‖ ≤ C * ‖g x‖ := by\n    filter_upwards [ae_restrict_mem hA] with x hx\n    refine (norm_mul_le _ _).trans ?_\n    rw [mul_comm]\n    gcongr\n    exact hC x (hAK hx)\n  exact\n    Memℒp.of_le_mul hg (hg.aestronglyMeasurable.mul <| (hg'.mono hAK).aestronglyMeasurable hA) this\n\n"}
{"name":"MeasureTheory.IntegrableOn.mul_continuousOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nR : Type u_5\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝³ : OpensMeasurableSpace X\nK : Set X\ninst✝² : NormedRing R\ninst✝¹ : SecondCountableTopologyEither X R\ng g' : X → R\ninst✝ : T2Space X\nhg : MeasureTheory.IntegrableOn g K μ\nhg' : ContinuousOn g' K\nhK : IsCompact K\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (g x) (g' x)) K μ","decl":"theorem IntegrableOn.mul_continuousOn [T2Space X] (hg : IntegrableOn g K μ)\n    (hg' : ContinuousOn g' K) (hK : IsCompact K) : IntegrableOn (fun x => g x * g' x) K μ :=\n  hg.mul_continuousOn_of_subset hg' hK.measurableSet hK (Subset.refl _)\n\n"}
{"name":"MeasureTheory.IntegrableOn.continuousOn_mul_of_subset","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nR : Type u_5\ninst✝⁴ : MeasurableSpace X\ninst✝³ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝² : OpensMeasurableSpace X\nA K : Set X\ninst✝¹ : NormedRing R\ninst✝ : SecondCountableTopologyEither X R\ng g' : X → R\nhg : ContinuousOn g K\nhg' : MeasureTheory.IntegrableOn g' A μ\nhK : IsCompact K\nhA : MeasurableSet A\nhAK : HasSubset.Subset A K\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (g x) (g' x)) A μ","decl":"theorem IntegrableOn.continuousOn_mul_of_subset (hg : ContinuousOn g K) (hg' : IntegrableOn g' A μ)\n    (hK : IsCompact K) (hA : MeasurableSet A) (hAK : A ⊆ K) :\n    IntegrableOn (fun x => g x * g' x) A μ := by\n  rcases IsCompact.exists_bound_of_continuousOn hK hg with ⟨C, hC⟩\n  rw [IntegrableOn, ← memℒp_one_iff_integrable] at hg' ⊢\n  have : ∀ᵐ x ∂μ.restrict A, ‖g x * g' x‖ ≤ C * ‖g' x‖ := by\n    filter_upwards [ae_restrict_mem hA] with x hx\n    refine (norm_mul_le _ _).trans ?_\n    gcongr\n    exact hC x (hAK hx)\n  exact\n    Memℒp.of_le_mul hg' (((hg.mono hAK).aestronglyMeasurable hA).mul hg'.aestronglyMeasurable) this\n\n"}
{"name":"MeasureTheory.IntegrableOn.continuousOn_mul","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nR : Type u_5\ninst✝⁵ : MeasurableSpace X\ninst✝⁴ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝³ : OpensMeasurableSpace X\nK : Set X\ninst✝² : NormedRing R\ninst✝¹ : SecondCountableTopologyEither X R\ng g' : X → R\ninst✝ : T2Space X\nhg : ContinuousOn g K\nhg' : MeasureTheory.IntegrableOn g' K μ\nhK : IsCompact K\n⊢ MeasureTheory.IntegrableOn (fun x => HMul.hMul (g x) (g' x)) K μ","decl":"theorem IntegrableOn.continuousOn_mul [T2Space X] (hg : ContinuousOn g K)\n    (hg' : IntegrableOn g' K μ) (hK : IsCompact K) : IntegrableOn (fun x => g x * g' x) K μ :=\n  hg'.continuousOn_mul_of_subset hg hK hK.measurableSet Subset.rfl\n\n"}
{"name":"MeasureTheory.IntegrableOn.continuousOn_smul","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\nK : Set X\n𝕜 : Type u_6\ninst✝³ : NormedField 𝕜\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : T2Space X\ninst✝ : SecondCountableTopologyEither X 𝕜\ng : X → E\nhg : MeasureTheory.IntegrableOn g K μ\nf : X → 𝕜\nhf : ContinuousOn f K\nhK : IsCompact K\n⊢ MeasureTheory.IntegrableOn (fun x => HSMul.hSMul (f x) (g x)) K μ","decl":"theorem IntegrableOn.continuousOn_smul [T2Space X] [SecondCountableTopologyEither X 𝕜] {g : X → E}\n    (hg : IntegrableOn g K μ) {f : X → 𝕜} (hf : ContinuousOn f K) (hK : IsCompact K) :\n    IntegrableOn (fun x => f x • g x) K μ := by\n  rw [IntegrableOn, ← integrable_norm_iff]\n  · simp_rw [norm_smul]\n    refine IntegrableOn.continuousOn_mul ?_ hg.norm hK\n    exact continuous_norm.comp_continuousOn hf\n  · exact (hf.aestronglyMeasurable hK.measurableSet).smul hg.1\n\n"}
{"name":"MeasureTheory.IntegrableOn.smul_continuousOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁷ : MeasurableSpace X\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\nK : Set X\n𝕜 : Type u_6\ninst✝³ : NormedField 𝕜\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : T2Space X\ninst✝ : SecondCountableTopologyEither X E\nf : X → 𝕜\nhf : MeasureTheory.IntegrableOn f K μ\ng : X → E\nhg : ContinuousOn g K\nhK : IsCompact K\n⊢ MeasureTheory.IntegrableOn (fun x => HSMul.hSMul (f x) (g x)) K μ","decl":"theorem IntegrableOn.smul_continuousOn [T2Space X] [SecondCountableTopologyEither X E] {f : X → 𝕜}\n    (hf : IntegrableOn f K μ) {g : X → E} (hg : ContinuousOn g K) (hK : IsCompact K) :\n    IntegrableOn (fun x => f x • g x) K μ := by\n  rw [IntegrableOn, ← integrable_norm_iff]\n  · simp_rw [norm_smul]\n    refine IntegrableOn.mul_continuousOn hf.norm ?_ hK\n    exact continuous_norm.comp_continuousOn hg\n  · exact hf.1.smul (hg.aestronglyMeasurable hK.measurableSet)\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.continuousOn_mul","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nR : Type u_5\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\ninst✝³ : LocallyCompactSpace X\ninst✝² : T2Space X\ninst✝¹ : NormedRing R\ninst✝ : SecondCountableTopologyEither X R\nf g : X → R\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhg : ContinuousOn g s\nhs : IsLocallyClosed s\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => HMul.hMul (g x) (f x)) s μ","decl":"theorem continuousOn_mul [LocallyCompactSpace X] [T2Space X] [NormedRing R]\n    [SecondCountableTopologyEither X R] {f g : X → R} {s : Set X} (hf : LocallyIntegrableOn f s μ)\n    (hg : ContinuousOn g s) (hs : IsLocallyClosed s) :\n    LocallyIntegrableOn (fun x => g x * f x) s μ := by\n  rw [MeasureTheory.locallyIntegrableOn_iff hs] at hf ⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).continuousOn_mul (hg.mono hk_sub) hk_c\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.mul_continuousOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nR : Type u_5\ninst✝⁶ : MeasurableSpace X\ninst✝⁵ : TopologicalSpace X\nμ : MeasureTheory.Measure X\ninst✝⁴ : OpensMeasurableSpace X\ninst✝³ : LocallyCompactSpace X\ninst✝² : T2Space X\ninst✝¹ : NormedRing R\ninst✝ : SecondCountableTopologyEither X R\nf g : X → R\ns : Set X\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhg : ContinuousOn g s\nhs : IsLocallyClosed s\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => HMul.hMul (f x) (g x)) s μ","decl":"theorem mul_continuousOn [LocallyCompactSpace X] [T2Space X] [NormedRing R]\n    [SecondCountableTopologyEither X R] {f g : X → R} {s : Set X} (hf : LocallyIntegrableOn f s μ)\n    (hg : ContinuousOn g s) (hs : IsLocallyClosed s) :\n    LocallyIntegrableOn (fun x => f x * g x) s μ := by\n  rw [MeasureTheory.locallyIntegrableOn_iff hs] at hf ⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).mul_continuousOn (hg.mono hk_sub) hk_c\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.continuousOn_smul","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝⁵ : OpensMeasurableSpace X\ninst✝⁴ : LocallyCompactSpace X\ninst✝³ : T2Space X\n𝕜 : Type u_6\ninst✝² : NormedField 𝕜\ninst✝¹ : SecondCountableTopologyEither X 𝕜\ninst✝ : NormedSpace 𝕜 E\nf : X → E\ng : X → 𝕜\ns : Set X\nhs : IsLocallyClosed s\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhg : ContinuousOn g s\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => HSMul.hSMul (g x) (f x)) s μ","decl":"theorem continuousOn_smul [LocallyCompactSpace X] [T2Space X] {𝕜 : Type*} [NormedField 𝕜]\n    [SecondCountableTopologyEither X 𝕜] [NormedSpace 𝕜 E] {f : X → E} {g : X → 𝕜} {s : Set X}\n    (hs : IsLocallyClosed s) (hf : LocallyIntegrableOn f s μ) (hg : ContinuousOn g s) :\n    LocallyIntegrableOn (fun x => g x • f x) s μ := by\n  rw [MeasureTheory.locallyIntegrableOn_iff hs] at hf ⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).continuousOn_smul (hg.mono hk_sub) hk_c\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.smul_continuousOn","module":"Mathlib.MeasureTheory.Function.LocallyIntegrable","initialProofState":"X : Type u_1\nE : Type u_3\ninst✝⁸ : MeasurableSpace X\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : NormedAddCommGroup E\nμ : MeasureTheory.Measure X\ninst✝⁵ : OpensMeasurableSpace X\ninst✝⁴ : LocallyCompactSpace X\ninst✝³ : T2Space X\n𝕜 : Type u_6\ninst✝² : NormedField 𝕜\ninst✝¹ : SecondCountableTopologyEither X E\ninst✝ : NormedSpace 𝕜 E\nf : X → 𝕜\ng : X → E\ns : Set X\nhs : IsLocallyClosed s\nhf : MeasureTheory.LocallyIntegrableOn f s μ\nhg : ContinuousOn g s\n⊢ MeasureTheory.LocallyIntegrableOn (fun x => HSMul.hSMul (f x) (g x)) s μ","decl":"theorem smul_continuousOn [LocallyCompactSpace X] [T2Space X] {𝕜 : Type*} [NormedField 𝕜]\n    [SecondCountableTopologyEither X E] [NormedSpace 𝕜 E] {f : X → 𝕜} {g : X → E} {s : Set X}\n    (hs : IsLocallyClosed s) (hf : LocallyIntegrableOn f s μ) (hg : ContinuousOn g s) :\n    LocallyIntegrableOn (fun x => f x • g x) s μ := by\n  rw [MeasureTheory.locallyIntegrableOn_iff hs] at hf ⊢\n  exact fun k hk_sub hk_c => (hf k hk_sub hk_c).smul_continuousOn (hg.mono hk_sub) hk_c\n\n"}
