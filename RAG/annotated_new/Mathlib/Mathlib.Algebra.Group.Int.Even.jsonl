{"name":"Int.emod_two_ne_one","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Not (Eq (HMod.hMod n 2) 1)) (Eq (HMod.hMod n 2) 0)","decl":"@[simp] lemma emod_two_ne_one : ¬n % 2 = 1 ↔ n % 2 = 0 := by\n  cases' emod_two_eq_zero_or_one n with h h <;> simp [h]\n\n"}
{"name":"Int.one_emod_two","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"⊢ Eq (HMod.hMod 1 2) 1","decl":"@[simp] lemma one_emod_two : (1 : Int) % 2 = 1 := rfl\n\n-- `EuclideanDomain.mod_eq_zero` uses (2 ∣ n) as normal form\n"}
{"name":"Int.emod_two_ne_zero","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Not (Eq (HMod.hMod n 2) 0)) (Eq (HMod.hMod n 2) 1)","decl":"@[local simp] lemma emod_two_ne_zero : ¬n % 2 = 0 ↔ n % 2 = 1 := by\n  cases' emod_two_eq_zero_or_one n with h h <;> simp [h]\n\n"}
{"name":"Int.even_iff","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Even n) (Eq (HMod.hMod n 2) 0)","decl":"lemma even_iff : Even n ↔ n % 2 = 0 where\n  mp := fun ⟨m, hm⟩ ↦ by simp [← Int.two_mul, hm]\n  mpr h := ⟨n / 2, (emod_add_ediv n 2).symm.trans (by simp [← Int.two_mul, h])⟩\n\n"}
{"name":"Int.not_even_iff","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Not (Even n)) (Eq (HMod.hMod n 2) 1)","decl":"lemma not_even_iff : ¬Even n ↔ n % 2 = 1 := by rw [even_iff, emod_two_ne_zero]\n\n"}
{"name":"Int.two_dvd_ne_zero","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Not (Dvd.dvd 2 n)) (Eq (HMod.hMod n 2) 1)","decl":"@[simp] lemma two_dvd_ne_zero : ¬2 ∣ n ↔ n % 2 = 1 :=\n  (even_iff_exists_two_nsmul _).symm.not.trans not_even_iff\n\n"}
{"name":"Int.not_even_one","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"⊢ Not (Even 1)","decl":"@[simp] lemma not_even_one : ¬Even (1 : ℤ) := by simp [even_iff]\n\n"}
{"name":"Int.even_add","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"m n : Int\n⊢ Iff (Even (HAdd.hAdd m n)) (Iff (Even m) (Even n))","decl":"@[parity_simps] lemma even_add : Even (m + n) ↔ (Even m ↔ Even n) := by\n  cases' emod_two_eq_zero_or_one m with h₁ h₁ <;>\n  cases' emod_two_eq_zero_or_one n with h₂ h₂ <;>\n  simp [even_iff, h₁, h₂, Int.add_emod, one_add_one_eq_two, emod_self]\n\n"}
{"name":"Int.two_not_dvd_two_mul_add_one","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Not (Dvd.dvd 2 (HAdd.hAdd (HMul.hMul 2 n) 1))","decl":"lemma two_not_dvd_two_mul_add_one (n : ℤ) : ¬2 ∣ 2 * n + 1 := by simp [add_emod]\n\n"}
{"name":"Int.even_sub","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"m n : Int\n⊢ Iff (Even (HSub.hSub m n)) (Iff (Even m) (Even n))","decl":"@[parity_simps]\nlemma even_sub : Even (m - n) ↔ (Even m ↔ Even n) := by simp [sub_eq_add_neg, parity_simps]\n\n"}
{"name":"Int.even_add_one","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Even (HAdd.hAdd n 1)) (Not (Even n))","decl":"@[parity_simps] lemma even_add_one : Even (n + 1) ↔ ¬Even n := by simp [even_add]\n\n"}
{"name":"Int.even_sub_one","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\n⊢ Iff (Even (HSub.hSub n 1)) (Not (Even n))","decl":"@[parity_simps] lemma even_sub_one : Even (n - 1) ↔ ¬Even n := by simp [even_sub]\n\n"}
{"name":"Int.even_mul","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"m n : Int\n⊢ Iff (Even (HMul.hMul m n)) (Or (Even m) (Even n))","decl":"@[parity_simps] lemma even_mul : Even (m * n) ↔ Even m ∨ Even n := by\n  cases' emod_two_eq_zero_or_one m with h₁ h₁ <;>\n  cases' emod_two_eq_zero_or_one n with h₂ h₂ <;>\n  simp [even_iff, h₁, h₂, Int.mul_emod]\n\n"}
{"name":"Int.even_pow","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"m : Int\nn : Nat\n⊢ Iff (Even (HPow.hPow m n)) (And (Even m) (Ne n 0))","decl":"@[parity_simps] lemma even_pow {n : ℕ} : Even (m ^ n) ↔ Even m ∧ n ≠ 0 := by\n  induction n <;> simp [*, even_mul, pow_succ]; tauto\n\n"}
{"name":"Int.even_pow'","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"m : Int\nn : Nat\nh : Ne n 0\n⊢ Iff (Even (HPow.hPow m n)) (Even m)","decl":"lemma even_pow' {n : ℕ} (h : n ≠ 0) : Even (m ^ n) ↔ Even m := even_pow.trans <| and_iff_left h\n\n"}
{"name":"Int.even_coe_nat","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Nat\n⊢ Iff (Even ↑n) (Even n)","decl":"@[simp, norm_cast] lemma even_coe_nat (n : ℕ) : Even (n : ℤ) ↔ Even n := by\n  rw_mod_cast [even_iff, Nat.even_iff]\n\n"}
{"name":"Int.two_mul_ediv_two_of_even","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\na✝ : Even n\n⊢ Eq (HMul.hMul 2 (HDiv.hDiv n 2)) n","decl":"lemma two_mul_ediv_two_of_even : Even n → 2 * (n / 2) = n :=\n  fun h ↦ Int.mul_ediv_cancel' ((even_iff_exists_two_nsmul _).mp h)\n\n"}
{"name":"Int.ediv_two_mul_two_of_even","module":"Mathlib.Algebra.Group.Int.Even","initialProofState":"n : Int\na✝ : Even n\n⊢ Eq (HMul.hMul (HDiv.hDiv n 2) 2) n","decl":"lemma ediv_two_mul_two_of_even : Even n → n / 2 * 2 = n :=\n  fun h ↦ Int.ediv_mul_cancel ((even_iff_exists_two_nsmul _).mp h)\n\n-- Here are examples of how `parity_simps` can be used with `Int`.\n"}
