{"name":"UniformConvergenceCLM.instContinuousSemilinearMapClass","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁷ : NormedField 𝕜₁\ninst✝⁶ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜₁ E\ninst✝³ : TopologicalSpace E\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜₂ F\ninst✝ : TopologicalSpace F\n𝔖 : Set (Set E)\n⊢ ContinuousSemilinearMapClass (UniformConvergenceCLM σ F 𝔖) σ E F","decl":"instance instContinuousSemilinearMapClass [TopologicalSpace F] (𝔖 : Set (Set E)) :\n    ContinuousSemilinearMapClass (UniformConvergenceCLM σ F 𝔖) σ E F :=\n  ContinuousLinearMap.continuousSemilinearMapClass\n\n"}
{"name":"UniformConvergenceCLM.topologicalSpace_eq","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ Eq (UniformConvergenceCLM.instTopologicalSpace σ F 𝔖) (TopologicalSpace.induced (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe) (UniformOnFun.topologicalSpace E F 𝔖))","decl":"theorem topologicalSpace_eq [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    instTopologicalSpace σ F 𝔖 = TopologicalSpace.induced (UniformOnFun.ofFun 𝔖 ∘ DFunLike.coe)\n      (UniformOnFun.topologicalSpace E F 𝔖) := by\n  rw [instTopologicalSpace]\n  congr\n  exact UniformAddGroup.toUniformSpace_eq\n\n"}
{"name":"UniformConvergenceCLM.uniformSpace_eq","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ Eq (UniformConvergenceCLM.instUniformSpace σ F 𝔖) (UniformSpace.comap (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe) (UniformOnFun.uniformSpace E F 𝔖))","decl":"theorem uniformSpace_eq [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    instUniformSpace σ F 𝔖 =\n      UniformSpace.comap (UniformOnFun.ofFun 𝔖 ∘ DFunLike.coe)\n        (UniformOnFun.uniformSpace E F 𝔖) := by\n  rw [instUniformSpace, UniformSpace.replaceTopology_eq]\n\n"}
{"name":"UniformConvergenceCLM.uniformity_toTopologicalSpace_eq","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ Eq UniformSpace.toTopologicalSpace (UniformConvergenceCLM.instTopologicalSpace σ F 𝔖)","decl":"@[simp]\ntheorem uniformity_toTopologicalSpace_eq [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    (UniformConvergenceCLM.instUniformSpace σ F 𝔖).toTopologicalSpace =\n      UniformConvergenceCLM.instTopologicalSpace σ F 𝔖 :=\n  rfl\n\n"}
{"name":"UniformConvergenceCLM.isUniformInducing_coeFn","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ IsUniformInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe)","decl":"theorem isUniformInducing_coeFn [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    IsUniformInducing (α := UniformConvergenceCLM σ F 𝔖) (UniformOnFun.ofFun 𝔖 ∘ DFunLike.coe) :=\n  ⟨rfl⟩\n\n"}
{"name":"UniformConvergenceCLM.isUniformEmbedding_coeFn","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ IsUniformEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe)","decl":"theorem isUniformEmbedding_coeFn [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    IsUniformEmbedding (α := UniformConvergenceCLM σ F 𝔖) (UniformOnFun.ofFun 𝔖 ∘ DFunLike.coe) :=\n  ⟨isUniformInducing_coeFn .., DFunLike.coe_injective⟩\n\n"}
{"name":"UniformConvergenceCLM.uniformEmbedding_coeFn","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ IsUniformEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe)","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_coeFn := isUniformEmbedding_coeFn\n\n"}
{"name":"UniformConvergenceCLM.isEmbedding_coeFn","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ Topology.IsEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe)","decl":"theorem isEmbedding_coeFn [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    IsEmbedding (X := UniformConvergenceCLM σ F 𝔖) (Y := E →ᵤ[𝔖] F)\n      (UniformOnFun.ofFun 𝔖 ∘ DFunLike.coe) :=\n  IsUniformEmbedding.isEmbedding (isUniformEmbedding_coeFn _ _ _)\n\n"}
{"name":"UniformConvergenceCLM.embedding_coeFn","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ Topology.IsEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) DFunLike.coe)","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_coeFn := isEmbedding_coeFn\n\n"}
{"name":"UniformConvergenceCLM.coe_zero","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\n⊢ Eq (⇑0) 0","decl":"@[simp]\ntheorem coe_zero [TopologicalSpace F] [TopologicalAddGroup F] (𝔖 : Set (Set E)) :\n    ⇑(0 : UniformConvergenceCLM σ F 𝔖) = 0 :=\n  rfl\n\n"}
{"name":"UniformConvergenceCLM.instUniformAddGroup","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\n⊢ UniformAddGroup (UniformConvergenceCLM σ F 𝔖)","decl":"instance instUniformAddGroup [UniformSpace F] [UniformAddGroup F] (𝔖 : Set (Set E)) :\n    UniformAddGroup (UniformConvergenceCLM σ F 𝔖) := by\n  let φ : (UniformConvergenceCLM σ F 𝔖) →+ E →ᵤ[𝔖] F :=\n    ⟨⟨(DFunLike.coe : (UniformConvergenceCLM σ F 𝔖) → E →ᵤ[𝔖] F), rfl⟩, fun _ _ => rfl⟩\n  exact (isUniformEmbedding_coeFn _ _ _).uniformAddGroup φ\n\n"}
{"name":"UniformConvergenceCLM.instTopologicalAddGroup","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\n⊢ TopologicalAddGroup (UniformConvergenceCLM σ F 𝔖)","decl":"instance instTopologicalAddGroup [TopologicalSpace F] [TopologicalAddGroup F]\n    (𝔖 : Set (Set E)) : TopologicalAddGroup (UniformConvergenceCLM σ F 𝔖) := by\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  infer_instance\n\n"}
{"name":"UniformConvergenceCLM.continuousEvalConst","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\nh𝔖 : Eq 𝔖.sUnion Set.univ\n⊢ ContinuousEvalConst (UniformConvergenceCLM σ F 𝔖) E F","decl":"theorem continuousEvalConst [TopologicalSpace F] [TopologicalAddGroup F]\n    (𝔖 : Set (Set E)) (h𝔖 : ⋃₀ 𝔖 = Set.univ) :\n    ContinuousEvalConst (UniformConvergenceCLM σ F 𝔖) E F where\n  continuous_eval_const x := by\n    letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n    haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n    exact (UniformOnFun.uniformContinuous_eval h𝔖 x).continuous.comp\n      (isEmbedding_coeFn σ F 𝔖).continuous\n\n"}
{"name":"UniformConvergenceCLM.t2Space","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁹ : NormedField 𝕜₁\ninst✝⁸ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜₁ E\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : T2Space F\n𝔖 : Set (Set E)\nh𝔖 : Eq 𝔖.sUnion Set.univ\n⊢ T2Space (UniformConvergenceCLM σ F 𝔖)","decl":"theorem t2Space [TopologicalSpace F] [TopologicalAddGroup F] [T2Space F]\n    (𝔖 : Set (Set E)) (h𝔖 : ⋃₀ 𝔖 = univ) : T2Space (UniformConvergenceCLM σ F 𝔖) := by\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  haveI : T2Space (E →ᵤ[𝔖] F) := UniformOnFun.t2Space_of_covering h𝔖\n  exact (isEmbedding_coeFn σ F 𝔖).t2Space\n\n"}
{"name":"UniformConvergenceCLM.continuousSMul","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹¹ : NormedField 𝕜₁\ninst✝¹⁰ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜₁ E\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜₂ F\ninst✝⁴ : RingHomSurjective σ\ninst✝³ : RingHomIsometric σ\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜₂ F\n𝔖 : Set (Set E)\nh𝔖₃ : ∀ (S : Set E), Membership.mem 𝔖 S → Bornology.IsVonNBounded 𝕜₁ S\n⊢ ContinuousSMul 𝕜₂ (UniformConvergenceCLM σ F 𝔖)","decl":"theorem continuousSMul [RingHomSurjective σ] [RingHomIsometric σ]\n    [TopologicalSpace F] [TopologicalAddGroup F] [ContinuousSMul 𝕜₂ F] (𝔖 : Set (Set E))\n    (h𝔖₃ : ∀ S ∈ 𝔖, IsVonNBounded 𝕜₁ S) :\n    ContinuousSMul 𝕜₂ (UniformConvergenceCLM σ F 𝔖) := by\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  let φ : (UniformConvergenceCLM σ F 𝔖) →ₗ[𝕜₂] E → F :=\n    ⟨⟨DFunLike.coe, fun _ _ => rfl⟩, fun _ _ => rfl⟩\n  exact UniformOnFun.continuousSMul_induced_of_image_bounded 𝕜₂ E F (UniformConvergenceCLM σ F 𝔖) φ\n    ⟨rfl⟩ fun u s hs => (h𝔖₃ s hs).image u\n\n"}
{"name":"UniformConvergenceCLM.hasBasis_nhds_zero_of_basis","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\nι : Type u_5\n𝔖 : Set (Set E)\nh𝔖₁ : 𝔖.Nonempty\nh𝔖₂ : DirectedOn (fun x1 x2 => HasSubset.Subset x1 x2) 𝔖\np : ι → Prop\nb : ι → Set F\nh : (nhds 0).HasBasis p b\n⊢ (nhds 0).HasBasis (fun Si => And (Membership.mem 𝔖 Si.1) (p Si.2)) fun Si => setOf fun f => ∀ (x : E), Membership.mem Si.1 x → Membership.mem (b Si.2) (f x)","decl":"theorem hasBasis_nhds_zero_of_basis [TopologicalSpace F] [TopologicalAddGroup F]\n    {ι : Type*} (𝔖 : Set (Set E)) (h𝔖₁ : 𝔖.Nonempty) (h𝔖₂ : DirectedOn (· ⊆ ·) 𝔖) {p : ι → Prop}\n    {b : ι → Set F} (h : (𝓝 0 : Filter F).HasBasis p b) :\n    (𝓝 (0 : UniformConvergenceCLM σ F 𝔖)).HasBasis\n      (fun Si : Set E × ι => Si.1 ∈ 𝔖 ∧ p Si.2)\n      fun Si => { f : E →SL[σ] F | ∀ x ∈ Si.1, f x ∈ b Si.2 } := by\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  rw [(isEmbedding_coeFn σ F 𝔖).isInducing.nhds_eq_comap]\n  exact (UniformOnFun.hasBasis_nhds_zero_of_basis 𝔖 h𝔖₁ h𝔖₂ h).comap DFunLike.coe\n\n"}
{"name":"UniformConvergenceCLM.hasBasis_nhds_zero","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\nh𝔖₁ : 𝔖.Nonempty\nh𝔖₂ : DirectedOn (fun x1 x2 => HasSubset.Subset x1 x2) 𝔖\n⊢ (nhds 0).HasBasis (fun SV => And (Membership.mem 𝔖 SV.1) (Membership.mem (nhds 0) SV.2)) fun SV => setOf fun f => ∀ (x : E), Membership.mem SV.1 x → Membership.mem SV.2 (f x)","decl":"theorem hasBasis_nhds_zero [TopologicalSpace F] [TopologicalAddGroup F]\n    (𝔖 : Set (Set E)) (h𝔖₁ : 𝔖.Nonempty) (h𝔖₂ : DirectedOn (· ⊆ ·) 𝔖) :\n    (𝓝 (0 : UniformConvergenceCLM σ F 𝔖)).HasBasis\n      (fun SV : Set E × Set F => SV.1 ∈ 𝔖 ∧ SV.2 ∈ (𝓝 0 : Filter F)) fun SV =>\n      { f : UniformConvergenceCLM σ F 𝔖 | ∀ x ∈ SV.1, f x ∈ SV.2 } :=\n  hasBasis_nhds_zero_of_basis σ F 𝔖 h𝔖₁ h𝔖₂ (𝓝 0).basis_sets\n\n"}
{"name":"UniformConvergenceCLM.nhds_zero_eq_of_basis","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\nι : Type u_5\np : ι → Prop\nb : ι → Set F\nh : (nhds 0).HasBasis p b\n⊢ Eq (nhds 0) (iInf fun s => iInf fun x => iInf fun i => iInf fun x => Filter.principal (setOf fun f => Set.MapsTo (⇑f) s (b i)))","decl":"theorem nhds_zero_eq_of_basis [TopologicalSpace F] [TopologicalAddGroup F] (𝔖 : Set (Set E))\n    {ι : Type*} {p : ι → Prop} {b : ι → Set F} (h : (𝓝 0 : Filter F).HasBasis p b) :\n    𝓝 (0 : UniformConvergenceCLM σ F 𝔖) =\n      ⨅ (s : Set E) (_ : s ∈ 𝔖) (i : ι) (_ : p i),\n        𝓟 {f : UniformConvergenceCLM σ F 𝔖 | MapsTo f s (b i)} := by\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  rw [(isEmbedding_coeFn σ F 𝔖).isInducing.nhds_eq_comap,\n    UniformOnFun.nhds_eq_of_basis _ _ h.uniformity_of_nhds_zero]\n  simp [MapsTo]\n\n"}
{"name":"UniformConvergenceCLM.nhds_zero_eq","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\n⊢ Eq (nhds 0) (iInf fun s => iInf fun h => iInf fun t => iInf fun h => Filter.principal (setOf fun f => Set.MapsTo (⇑f) s t))","decl":"theorem nhds_zero_eq [TopologicalSpace F] [TopologicalAddGroup F] (𝔖 : Set (Set E)) :\n    𝓝 (0 : UniformConvergenceCLM σ F 𝔖) =\n      ⨅ s ∈ 𝔖, ⨅ t ∈ 𝓝 (0 : F),\n        𝓟 {f : UniformConvergenceCLM σ F 𝔖 | MapsTo f s t} :=\n  nhds_zero_eq_of_basis _ _ _ (𝓝 0).basis_sets\n\n"}
{"name":"UniformConvergenceCLM.eventually_nhds_zero_mapsTo","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n𝔖 : Set (Set E)\ns : Set E\nhs : Membership.mem 𝔖 s\nU : Set F\nhu : Membership.mem (nhds 0) U\n⊢ Filter.Eventually (fun f => Set.MapsTo (⇑f) s U) (nhds 0)","decl":"variable {F} in\ntheorem eventually_nhds_zero_mapsTo [TopologicalSpace F] [TopologicalAddGroup F]\n    {𝔖 : Set (Set E)} {s : Set E} (hs : s ∈ 𝔖) {U : Set F} (hu : U ∈ 𝓝 0) :\n    ∀ᶠ f : UniformConvergenceCLM σ F 𝔖 in 𝓝 0, MapsTo f s U := by\n  rw [nhds_zero_eq]\n  apply_rules [mem_iInf_of_mem, mem_principal_self]\n\n"}
{"name":"UniformConvergenceCLM.isVonNBounded_image2_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\nR : Type u_5\ninst✝⁵ : SeminormedRing R\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalAddGroup F\ninst✝² : Module R F\ninst✝¹ : ContinuousConstSMul R F\ninst✝ : SMulCommClass 𝕜₂ R F\n𝔖 : Set (Set E)\nS : Set (UniformConvergenceCLM σ F 𝔖)\nhS : Bornology.IsVonNBounded R S\ns : Set E\nhs : Membership.mem 𝔖 s\n⊢ Bornology.IsVonNBounded R (Set.image2 (fun f x => f x) S s)","decl":"variable {σ F} in\ntheorem isVonNBounded_image2_apply {R : Type*} [SeminormedRing R]\n    [TopologicalSpace F] [TopologicalAddGroup F]\n    [Module R F] [ContinuousConstSMul R F] [SMulCommClass 𝕜₂ R F]\n    {𝔖 : Set (Set E)} {S : Set (UniformConvergenceCLM σ F 𝔖)} (hS : IsVonNBounded R S)\n    {s : Set E} (hs : s ∈ 𝔖) : IsVonNBounded R (Set.image2 (fun f x ↦ f x) S s) := by\n  intro U hU\n  filter_upwards [hS (eventually_nhds_zero_mapsTo σ hs hU)] with c hc\n  rw [image2_subset_iff]\n  intro f hf x hx\n  rcases hc hf with ⟨g, hg, rfl⟩\n  exact smul_mem_smul_set (hg hx)\n\n"}
{"name":"UniformConvergenceCLM.isVonNBounded_iff","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\nR : Type u_5\ninst✝⁵ : NormedDivisionRing R\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalAddGroup F\ninst✝² : Module R F\ninst✝¹ : ContinuousConstSMul R F\ninst✝ : SMulCommClass 𝕜₂ R F\n𝔖 : Set (Set E)\nS : Set (UniformConvergenceCLM σ F 𝔖)\n⊢ Iff (Bornology.IsVonNBounded R S) (∀ (s : Set E), Membership.mem 𝔖 s → Bornology.IsVonNBounded R (Set.image2 (fun f x => f x) S s))","decl":"variable {σ F} in\n/-- A set `S` of continuous linear maps with topology of uniform convergence on sets `s ∈ 𝔖`\nis von Neumann bounded iff for any `s ∈ 𝔖`,\nthe set `{f x | (f ∈ S) (x ∈ s)}` is von Neumann bounded. -/\ntheorem isVonNBounded_iff {R : Type*} [NormedDivisionRing R]\n    [TopologicalSpace F] [TopologicalAddGroup F]\n    [Module R F] [ContinuousConstSMul R F] [SMulCommClass 𝕜₂ R F]\n    {𝔖 : Set (Set E)} {S : Set (UniformConvergenceCLM σ F 𝔖)} :\n    IsVonNBounded R S ↔ ∀ s ∈ 𝔖, IsVonNBounded R (Set.image2 (fun f x ↦ f x) S s) := by\n  refine ⟨fun hS s hs ↦ isVonNBounded_image2_apply hS hs, fun h ↦ ?_⟩\n  simp_rw [isVonNBounded_iff_absorbing_le, nhds_zero_eq, le_iInf_iff, le_principal_iff]\n  intro s hs U hU\n  rw [Filter.mem_absorbing, Absorbs]\n  filter_upwards [h s hs hU, eventually_ne_cobounded 0] with c hc hc₀ f hf\n  rw [mem_smul_set_iff_inv_smul_mem₀ hc₀]\n  intro x hx\n  simpa only [mem_smul_set_iff_inv_smul_mem₀ hc₀] using hc (mem_image2_of_mem hf hx)\n\n"}
{"name":"UniformConvergenceCLM.instUniformContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\nM : Type u_5\ninst✝⁵ : Monoid M\ninst✝⁴ : DistribMulAction M F\ninst✝³ : SMulCommClass 𝕜₂ M F\ninst✝² : UniformSpace F\ninst✝¹ : UniformAddGroup F\ninst✝ : UniformContinuousConstSMul M F\n𝔖 : Set (Set E)\n⊢ UniformContinuousConstSMul M (UniformConvergenceCLM σ F 𝔖)","decl":"instance instUniformContinuousConstSMul (M : Type*)\n    [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜₂ M F]\n    [UniformSpace F] [UniformAddGroup F] [UniformContinuousConstSMul M F] (𝔖 : Set (Set E)) :\n    UniformContinuousConstSMul M (UniformConvergenceCLM σ F 𝔖) :=\n  (isUniformInducing_coeFn σ F 𝔖).uniformContinuousConstSMul fun _ _ ↦ by rfl\n\n"}
{"name":"UniformConvergenceCLM.instContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\nM : Type u_5\ninst✝⁵ : Monoid M\ninst✝⁴ : DistribMulAction M F\ninst✝³ : SMulCommClass 𝕜₂ M F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul M F\n𝔖 : Set (Set E)\n⊢ ContinuousConstSMul M (UniformConvergenceCLM σ F 𝔖)","decl":"instance instContinuousConstSMul (M : Type*)\n    [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜₂ M F]\n    [TopologicalSpace F] [TopologicalAddGroup F] [ContinuousConstSMul M F] (𝔖 : Set (Set E)) :\n    ContinuousConstSMul M (UniformConvergenceCLM σ F 𝔖) :=\n  let _ := TopologicalAddGroup.toUniformSpace F\n  have _ : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  have _ := uniformContinuousConstSMul_of_continuousConstSMul M F\n  inferInstance\n\n"}
{"name":"UniformConvergenceCLM.tendsto_iff_tendstoUniformlyOn","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\nι : Type u_5\np : Filter ι\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n𝔖 : Set (Set E)\na : ι → UniformConvergenceCLM σ F 𝔖\na₀ : UniformConvergenceCLM σ F 𝔖\n⊢ Iff (Filter.Tendsto a p (nhds a₀)) (∀ (s : Set E), Membership.mem 𝔖 s → TendstoUniformlyOn (fun x1 x2 => (a x1) x2) (⇑a₀) p s)","decl":"theorem tendsto_iff_tendstoUniformlyOn {ι : Type*} {p : Filter ι} [UniformSpace F]\n    [UniformAddGroup F] (𝔖 : Set (Set E)) {a : ι → UniformConvergenceCLM σ F 𝔖}\n    {a₀ : UniformConvergenceCLM σ F 𝔖} :\n    Filter.Tendsto a p (𝓝 a₀) ↔ ∀ s ∈ 𝔖, TendstoUniformlyOn (a · ·) a₀ p s := by\n  rw [(isEmbedding_coeFn σ F 𝔖).tendsto_nhds_iff, UniformOnFun.tendsto_iff_tendstoUniformlyOn]\n  rfl\n\n"}
{"name":"UniformConvergenceCLM.isUniformInducing_postcomp","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹⁴ : NormedField 𝕜₁\ninst✝¹³ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜₁ E\ninst✝¹⁰ : TopologicalSpace E\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜₂ F\nG : Type u_5\ninst✝⁷ : AddCommGroup G\ninst✝⁶ : UniformSpace G\ninst✝⁵ : UniformAddGroup G\n𝕜₃ : Type u_6\ninst✝⁴ : NormedField 𝕜₃\ninst✝³ : Module 𝕜₃ G\nτ : RingHom 𝕜₂ 𝕜₃\nρ : RingHom 𝕜₁ 𝕜₃\ninst✝² : RingHomCompTriple σ τ ρ\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\ng : ContinuousLinearMap τ F G\nhg : IsUniformInducing ⇑g\n𝔖 : Set (Set E)\n⊢ IsUniformInducing g.comp","decl":"variable {F} in\ntheorem isUniformInducing_postcomp\n    {G : Type*} [AddCommGroup G] [UniformSpace G] [UniformAddGroup G]\n    {𝕜₃ : Type*} [NormedField 𝕜₃] [Module 𝕜₃ G]\n    {τ : 𝕜₂ →+* 𝕜₃} {ρ : 𝕜₁ →+* 𝕜₃} [RingHomCompTriple σ τ ρ] [UniformSpace F] [UniformAddGroup F]\n    (g : F →SL[τ] G) (hg : IsUniformInducing g) (𝔖 : Set (Set E)) :\n    IsUniformInducing (α := UniformConvergenceCLM σ F 𝔖) (β := UniformConvergenceCLM ρ G 𝔖)\n      g.comp := by\n  rw [← (isUniformInducing_coeFn _ _ _).of_comp_iff]\n  exact (UniformOnFun.postcomp_isUniformInducing hg).comp (isUniformInducing_coeFn _ _ _)\n\n"}
{"name":"UniformConvergenceCLM.completeSpace","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹⁰ : NormedField 𝕜₁\ninst✝⁹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜₁ E\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜₂ F\ninst✝³ : UniformSpace F\ninst✝² : UniformAddGroup F\ninst✝¹ : ContinuousSMul 𝕜₂ F\ninst✝ : CompleteSpace F\n𝔖 : Set (Set E)\nh𝔖 : Topology.RestrictGenTopology 𝔖\nh𝔖U : Eq 𝔖.sUnion Set.univ\n⊢ CompleteSpace (UniformConvergenceCLM σ F 𝔖)","decl":"theorem completeSpace [UniformSpace F] [UniformAddGroup F] [ContinuousSMul 𝕜₂ F] [CompleteSpace F]\n    {𝔖 : Set (Set E)} (h𝔖 : RestrictGenTopology 𝔖) (h𝔖U : ⋃₀ 𝔖 = univ) :\n    CompleteSpace (UniformConvergenceCLM σ F 𝔖) := by\n  wlog hF : T2Space F generalizing F\n  · rw [(isUniformInducing_postcomp σ (SeparationQuotient.mkCLM 𝕜₂ F)\n      SeparationQuotient.isUniformInducing_mk _).completeSpace_congr]\n    exacts [this _ inferInstance, SeparationQuotient.postcomp_mkCLM_surjective F σ E]\n  rw [completeSpace_iff_isComplete_range (isUniformInducing_coeFn _ _ _)]\n  apply IsClosed.isComplete\n  have H₁ : IsClosed {f : E →ᵤ[𝔖] F | Continuous ((UniformOnFun.toFun 𝔖) f)} :=\n    UniformOnFun.isClosed_setOf_continuous h𝔖\n  convert H₁.inter <| (LinearMap.isClosed_range_coe E F σ).preimage\n    (UniformOnFun.uniformContinuous_toFun h𝔖U).continuous\n  exact ContinuousLinearMap.range_coeFn_eq\n\n"}
{"name":"UniformConvergenceCLM.uniformSpace_mono","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\n𝔖₁ 𝔖₂ : Set (Set E)\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\nh : HasSubset.Subset 𝔖₂ 𝔖₁\n⊢ LE.le (UniformConvergenceCLM.instUniformSpace σ F 𝔖₁) (UniformConvergenceCLM.instUniformSpace σ F 𝔖₂)","decl":"theorem uniformSpace_mono [UniformSpace F] [UniformAddGroup F] (h : 𝔖₂ ⊆ 𝔖₁) :\n    instUniformSpace σ F 𝔖₁ ≤ instUniformSpace σ F 𝔖₂ := by\n  simp_rw [uniformSpace_eq]\n  exact UniformSpace.comap_mono (UniformOnFun.mono (le_refl _) h)\n\n"}
{"name":"UniformConvergenceCLM.topologicalSpace_mono","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_3\nF : Type u_4\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : TopologicalSpace E\ninst✝³ : AddCommGroup F\ninst✝² : Module 𝕜₂ F\n𝔖₁ 𝔖₂ : Set (Set E)\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\nh : HasSubset.Subset 𝔖₂ 𝔖₁\n⊢ LE.le (UniformConvergenceCLM.instTopologicalSpace σ F 𝔖₁) (UniformConvergenceCLM.instTopologicalSpace σ F 𝔖₂)","decl":"theorem topologicalSpace_mono [TopologicalSpace F] [TopologicalAddGroup F] (h : 𝔖₂ ⊆ 𝔖₁) :\n    instTopologicalSpace σ F 𝔖₁ ≤ instTopologicalSpace σ F 𝔖₂ := by\n  letI := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  simp_rw [← uniformity_toTopologicalSpace_eq]\n  exact UniformSpace.toTopologicalSpace_mono (uniformSpace_mono σ F h)\n\n"}
{"name":"ContinuousLinearMap.topologicalAddGroup","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ TopologicalAddGroup (ContinuousLinearMap σ E F)","decl":"instance topologicalAddGroup [TopologicalSpace F] [TopologicalAddGroup F] :\n    TopologicalAddGroup (E →SL[σ] F) :=\n  UniformConvergenceCLM.instTopologicalAddGroup σ F _\n\n"}
{"name":"ContinuousLinearMap.continuousSMul","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹¹ : NormedField 𝕜₁\ninst✝¹⁰ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜₁ E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : RingHomSurjective σ\ninst✝³ : RingHomIsometric σ\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜₂ F\n⊢ ContinuousSMul 𝕜₂ (ContinuousLinearMap σ E F)","decl":"instance continuousSMul [RingHomSurjective σ] [RingHomIsometric σ] [TopologicalSpace F]\n    [TopologicalAddGroup F] [ContinuousSMul 𝕜₂ F] : ContinuousSMul 𝕜₂ (E →SL[σ] F) :=\n  UniformConvergenceCLM.continuousSMul σ F { S | IsVonNBounded 𝕜₁ S } fun _ hs => hs\n\n"}
{"name":"ContinuousLinearMap.uniformAddGroup","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ UniformAddGroup (ContinuousLinearMap σ E F)","decl":"instance uniformAddGroup [UniformSpace F] [UniformAddGroup F] : UniformAddGroup (E →SL[σ] F) :=\n  UniformConvergenceCLM.instUniformAddGroup σ F _\n\n"}
{"name":"ContinuousLinearMap.instContinuousEvalConst","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁹ : NormedField 𝕜₁\ninst✝⁸ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜₁ E\ninst✝⁵ : AddCommGroup F\ninst✝⁴ : Module 𝕜₂ F\ninst✝³ : TopologicalSpace E\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousSMul 𝕜₁ E\n⊢ ContinuousEvalConst (ContinuousLinearMap σ E F) E F","decl":"instance instContinuousEvalConst [TopologicalSpace F] [TopologicalAddGroup F]\n    [ContinuousSMul 𝕜₁ E] : ContinuousEvalConst (E →SL[σ] F) E F :=\n  UniformConvergenceCLM.continuousEvalConst σ F _ Bornology.isVonNBounded_covers\n\n"}
{"name":"ContinuousLinearMap.instT2Space","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹⁰ : NormedField 𝕜₁\ninst✝⁹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁸ : AddCommGroup E\ninst✝⁷ : Module 𝕜₁ E\ninst✝⁶ : AddCommGroup F\ninst✝⁵ : Module 𝕜₂ F\ninst✝⁴ : TopologicalSpace E\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalAddGroup F\ninst✝¹ : ContinuousSMul 𝕜₁ E\ninst✝ : T2Space F\n⊢ T2Space (ContinuousLinearMap σ E F)","decl":"instance instT2Space [TopologicalSpace F] [TopologicalAddGroup F] [ContinuousSMul 𝕜₁ E]\n    [T2Space F] : T2Space (E →SL[σ] F) :=\n  UniformConvergenceCLM.t2Space σ F _ Bornology.isVonNBounded_covers\n\n"}
{"name":"ContinuousLinearMap.hasBasis_nhds_zero_of_basis","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\nι : Type u_7\np : ι → Prop\nb : ι → Set F\nh : (nhds 0).HasBasis p b\n⊢ (nhds 0).HasBasis (fun Si => And (Bornology.IsVonNBounded 𝕜₁ Si.1) (p Si.2)) fun Si => setOf fun f => ∀ (x : E), Membership.mem Si.1 x → Membership.mem (b Si.2) (f x)","decl":"protected theorem hasBasis_nhds_zero_of_basis [TopologicalSpace F] [TopologicalAddGroup F]\n    {ι : Type*} {p : ι → Prop} {b : ι → Set F} (h : (𝓝 0 : Filter F).HasBasis p b) :\n    (𝓝 (0 : E →SL[σ] F)).HasBasis (fun Si : Set E × ι => IsVonNBounded 𝕜₁ Si.1 ∧ p Si.2)\n      fun Si => { f : E →SL[σ] F | ∀ x ∈ Si.1, f x ∈ b Si.2 } :=\n  UniformConvergenceCLM.hasBasis_nhds_zero_of_basis σ F { S | IsVonNBounded 𝕜₁ S }\n    ⟨∅, isVonNBounded_empty 𝕜₁ E⟩\n    (directedOn_of_sup_mem fun _ _ => IsVonNBounded.union) h\n\n"}
{"name":"ContinuousLinearMap.hasBasis_nhds_zero","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ (nhds 0).HasBasis (fun SV => And (Bornology.IsVonNBounded 𝕜₁ SV.1) (Membership.mem (nhds 0) SV.2)) fun SV => setOf fun f => ∀ (x : E), Membership.mem SV.1 x → Membership.mem SV.2 (f x)","decl":"protected theorem hasBasis_nhds_zero [TopologicalSpace F] [TopologicalAddGroup F] :\n    (𝓝 (0 : E →SL[σ] F)).HasBasis\n      (fun SV : Set E × Set F => IsVonNBounded 𝕜₁ SV.1 ∧ SV.2 ∈ (𝓝 0 : Filter F))\n      fun SV => { f : E →SL[σ] F | ∀ x ∈ SV.1, f x ∈ SV.2 } :=\n  ContinuousLinearMap.hasBasis_nhds_zero_of_basis (𝓝 0).basis_sets\n\n"}
{"name":"ContinuousLinearMap.isUniformEmbedding_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformEmbedding fun f => (UniformOnFun.ofFun (setOf fun s => Bornology.IsVonNBounded 𝕜₁ s)) ⇑f","decl":"theorem isUniformEmbedding_toUniformOnFun [UniformSpace F] [UniformAddGroup F] :\n    IsUniformEmbedding\n      fun f : E →SL[σ] F ↦ UniformOnFun.ofFun {s | Bornology.IsVonNBounded 𝕜₁ s} f :=\n  UniformConvergenceCLM.isUniformEmbedding_coeFn ..\n\n"}
{"name":"ContinuousLinearMap.uniformEmbedding_toUniformOnFun","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : UniformSpace F\ninst✝ : UniformAddGroup F\n⊢ IsUniformEmbedding fun f => (UniformOnFun.ofFun (setOf fun s => Bornology.IsVonNBounded 𝕜₁ s)) ⇑f","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_toUniformOnFun := isUniformEmbedding_toUniformOnFun\n\n"}
{"name":"ContinuousLinearMap.uniformContinuousConstSMul","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜₂ F\ninst✝⁶ : TopologicalSpace E\nM : Type u_7\ninst✝⁵ : Monoid M\ninst✝⁴ : DistribMulAction M F\ninst✝³ : SMulCommClass 𝕜₂ M F\ninst✝² : UniformSpace F\ninst✝¹ : UniformAddGroup F\ninst✝ : UniformContinuousConstSMul M F\n⊢ UniformContinuousConstSMul M (ContinuousLinearMap σ E F)","decl":"instance uniformContinuousConstSMul\n    {M : Type*} [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜₂ M F]\n    [UniformSpace F] [UniformAddGroup F] [UniformContinuousConstSMul M F] :\n    UniformContinuousConstSMul M (E →SL[σ] F) :=\n  UniformConvergenceCLM.instUniformContinuousConstSMul σ F _ _\n\n"}
{"name":"ContinuousLinearMap.continuousConstSMul","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜₂ F\ninst✝⁶ : TopologicalSpace E\nM : Type u_7\ninst✝⁵ : Monoid M\ninst✝⁴ : DistribMulAction M F\ninst✝³ : SMulCommClass 𝕜₂ M F\ninst✝² : TopologicalSpace F\ninst✝¹ : TopologicalAddGroup F\ninst✝ : ContinuousConstSMul M F\n⊢ ContinuousConstSMul M (ContinuousLinearMap σ E F)","decl":"instance continuousConstSMul {M : Type*} [Monoid M] [DistribMulAction M F] [SMulCommClass 𝕜₂ M F]\n    [TopologicalSpace F] [TopologicalAddGroup F] [ContinuousConstSMul M F] :\n    ContinuousConstSMul M (E →SL[σ] F) :=\n  UniformConvergenceCLM.instContinuousConstSMul σ F _ _\n\n"}
{"name":"ContinuousLinearMap.nhds_zero_eq_of_basis","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\nι : Type u_7\np : ι → Prop\nb : ι → Set F\nh : (nhds 0).HasBasis p b\n⊢ Eq (nhds 0) (iInf fun s => iInf fun x => iInf fun i => iInf fun x => Filter.principal (setOf fun f => Set.MapsTo (⇑f) s (b i)))","decl":"protected theorem nhds_zero_eq_of_basis [TopologicalSpace F] [TopologicalAddGroup F]\n    {ι : Type*} {p : ι → Prop} {b : ι → Set F} (h : (𝓝 0 : Filter F).HasBasis p b) :\n    𝓝 (0 : E →SL[σ] F) =\n      ⨅ (s : Set E) (_ : IsVonNBounded 𝕜₁ s) (i : ι) (_ : p i),\n        𝓟 {f : E →SL[σ] F | MapsTo f s (b i)} :=\n  UniformConvergenceCLM.nhds_zero_eq_of_basis _ _ _ h\n\n"}
{"name":"ContinuousLinearMap.nhds_zero_eq","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\n⊢ Eq (nhds 0) (iInf fun s => iInf fun x => iInf fun U => iInf fun x => Filter.principal (setOf fun f => Set.MapsTo (⇑f) s U))","decl":"protected theorem nhds_zero_eq [TopologicalSpace F] [TopologicalAddGroup F] :\n    𝓝 (0 : E →SL[σ] F) =\n      ⨅ (s : Set E) (_ : IsVonNBounded 𝕜₁ s) (U : Set F) (_ : U ∈ 𝓝 0),\n        𝓟 {f : E →SL[σ] F | MapsTo f s U} :=\n  UniformConvergenceCLM.nhds_zero_eq ..\n\n"}
{"name":"ContinuousLinearMap.eventually_nhds_zero_mapsTo","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝⁸ : NormedField 𝕜₁\ninst✝⁷ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁶ : AddCommGroup E\ninst✝⁵ : Module 𝕜₁ E\ninst✝⁴ : AddCommGroup F\ninst✝³ : Module 𝕜₂ F\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace F\ninst✝ : TopologicalAddGroup F\ns : Set E\nhs : Bornology.IsVonNBounded 𝕜₁ s\nU : Set F\nhu : Membership.mem (nhds 0) U\n⊢ Filter.Eventually (fun f => Set.MapsTo (⇑f) s U) (nhds 0)","decl":"/-- If `s` is a von Neumann bounded set and `U` is a neighbourhood of zero,\nthen sufficiently small continuous linear maps map `s` to `U`. -/\ntheorem eventually_nhds_zero_mapsTo [TopologicalSpace F] [TopologicalAddGroup F]\n    {s : Set E} (hs : IsVonNBounded 𝕜₁ s) {U : Set F} (hu : U ∈ 𝓝 0) :\n    ∀ᶠ f : E →SL[σ] F in 𝓝 0, MapsTo f s U :=\n  UniformConvergenceCLM.eventually_nhds_zero_mapsTo _ hs hu\n\n"}
{"name":"ContinuousLinearMap.isVonNBounded_image2_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜₂ F\ninst✝⁶ : TopologicalSpace E\nR : Type u_7\ninst✝⁵ : SeminormedRing R\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalAddGroup F\ninst✝² : Module R F\ninst✝¹ : ContinuousConstSMul R F\ninst✝ : SMulCommClass 𝕜₂ R F\nS : Set (ContinuousLinearMap σ E F)\nhS : Bornology.IsVonNBounded R S\ns : Set E\nhs : Bornology.IsVonNBounded 𝕜₁ s\n⊢ Bornology.IsVonNBounded R (Set.image2 (fun f x => f x) S s)","decl":"/-- If `S` is a von Neumann bounded set of continuous linear maps `f : E →SL[σ] F`\nand `s` is a von Neumann bounded set in the domain,\nthen the set `{f x | (f ∈ S) (x ∈ s)}` is von Neumann bounded.\n\nSee also `isVonNBounded_iff` for an `Iff` version with stronger typeclass assumptions. -/\ntheorem isVonNBounded_image2_apply {R : Type*} [SeminormedRing R]\n    [TopologicalSpace F] [TopologicalAddGroup F]\n    [Module R F] [ContinuousConstSMul R F] [SMulCommClass 𝕜₂ R F]\n    {S : Set (E →SL[σ] F)} (hS : IsVonNBounded R S) {s : Set E} (hs : IsVonNBounded 𝕜₁ s) :\n    IsVonNBounded R (Set.image2 (fun f x ↦ f x) S s) :=\n  UniformConvergenceCLM.isVonNBounded_image2_apply hS hs\n\n"}
{"name":"ContinuousLinearMap.isVonNBounded_iff","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹² : NormedField 𝕜₁\ninst✝¹¹ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜₁ E\ninst✝⁸ : AddCommGroup F\ninst✝⁷ : Module 𝕜₂ F\ninst✝⁶ : TopologicalSpace E\nR : Type u_7\ninst✝⁵ : NormedDivisionRing R\ninst✝⁴ : TopologicalSpace F\ninst✝³ : TopologicalAddGroup F\ninst✝² : Module R F\ninst✝¹ : ContinuousConstSMul R F\ninst✝ : SMulCommClass 𝕜₂ R F\nS : Set (ContinuousLinearMap σ E F)\n⊢ Iff (Bornology.IsVonNBounded R S) (∀ (s : Set E), Bornology.IsVonNBounded 𝕜₁ s → Bornology.IsVonNBounded R (Set.image2 (fun f x => f x) S s))","decl":"/-- A set `S` of continuous linear maps is von Neumann bounded\niff for any von Neumann bounded set `s`,\nthe set `{f x | (f ∈ S) (x ∈ s)}` is von Neumann bounded.\n\nFor the forward implication with weaker typeclass assumptions, see `isVonNBounded_image2_apply`. -/\ntheorem isVonNBounded_iff {R : Type*} [NormedDivisionRing R]\n    [TopologicalSpace F] [TopologicalAddGroup F]\n    [Module R F] [ContinuousConstSMul R F] [SMulCommClass 𝕜₂ R F]\n    {S : Set (E →SL[σ] F)} :\n    IsVonNBounded R S ↔\n      ∀ s, IsVonNBounded 𝕜₁ s → IsVonNBounded R (Set.image2 (fun f x ↦ f x) S s) :=\n  UniformConvergenceCLM.isVonNBounded_iff\n\n"}
{"name":"ContinuousLinearMap.completeSpace","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹¹ : NormedField 𝕜₁\ninst✝¹⁰ : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝⁹ : AddCommGroup E\ninst✝⁸ : Module 𝕜₁ E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜₂ F\ninst✝⁵ : TopologicalSpace E\ninst✝⁴ : UniformSpace F\ninst✝³ : UniformAddGroup F\ninst✝² : ContinuousSMul 𝕜₂ F\ninst✝¹ : CompleteSpace F\ninst✝ : ContinuousSMul 𝕜₁ E\nh : Topology.RestrictGenTopology (setOf fun s => Bornology.IsVonNBounded 𝕜₁ s)\n⊢ CompleteSpace (ContinuousLinearMap σ E F)","decl":"theorem completeSpace [UniformSpace F] [UniformAddGroup F] [ContinuousSMul 𝕜₂ F] [CompleteSpace F]\n    [ContinuousSMul 𝕜₁ E] (h : RestrictGenTopology {s : Set E | IsVonNBounded 𝕜₁ s}) :\n    CompleteSpace (E →SL[σ] F) :=\n  UniformConvergenceCLM.completeSpace _ _ h isVonNBounded_covers\n\n"}
{"name":"ContinuousLinearMap.instCompleteSpace","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\ninst✝¹³ : NormedField 𝕜₁\ninst✝¹² : NormedField 𝕜₂\nσ : RingHom 𝕜₁ 𝕜₂\nE : Type u_4\nF : Type u_5\ninst✝¹¹ : AddCommGroup E\ninst✝¹⁰ : Module 𝕜₁ E\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : Module 𝕜₂ F\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalAddGroup E\ninst✝⁵ : ContinuousSMul 𝕜₁ E\ninst✝⁴ : SequentialSpace E\ninst✝³ : UniformSpace F\ninst✝² : UniformAddGroup F\ninst✝¹ : ContinuousSMul 𝕜₂ F\ninst✝ : CompleteSpace F\n⊢ CompleteSpace (ContinuousLinearMap σ E F)","decl":"instance instCompleteSpace [TopologicalAddGroup E] [ContinuousSMul 𝕜₁ E] [SequentialSpace E]\n    [UniformSpace F] [UniformAddGroup F] [ContinuousSMul 𝕜₂ F] [CompleteSpace F] :\n    CompleteSpace (E →SL[σ] F) :=\n  completeSpace <| .of_seq fun _ _ h ↦ (h.isVonNBounded_range 𝕜₁).insert _\n\n"}
{"name":"ContinuousLinearMap.precomp_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\n𝕜₃ : Type u_3\ninst✝¹⁶ : NormedField 𝕜₁\ninst✝¹⁵ : NormedField 𝕜₂\ninst✝¹⁴ : NormedField 𝕜₃\nσ : RingHom 𝕜₁ 𝕜₂\nτ : RingHom 𝕜₂ 𝕜₃\nρ : RingHom 𝕜₁ 𝕜₃\ninst✝¹³ : RingHomCompTriple σ τ ρ\nE : Type u_4\nF : Type u_5\nG : Type u_6\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜₁ E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜₂ F\ninst✝⁸ : AddCommGroup G\ninst✝⁷ : Module 𝕜₃ G\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalSpace G\ninst✝³ : TopologicalAddGroup G\ninst✝² : ContinuousConstSMul 𝕜₃ G\ninst✝¹ : RingHomSurjective σ\ninst✝ : RingHomIsometric σ\nL : ContinuousLinearMap σ E F\nf : ContinuousLinearMap τ F G\n⊢ Eq ((ContinuousLinearMap.precomp G L) f) (f.comp L)","decl":"/-- Pre-composition by a *fixed* continuous linear map as a continuous linear map.\nNote that in non-normed space it is not always true that composition is continuous\nin both variables, so we have to fix one of them. -/\n@[simps]\ndef precomp [TopologicalAddGroup G] [ContinuousConstSMul 𝕜₃ G] [RingHomSurjective σ]\n    [RingHomIsometric σ] (L : E →SL[σ] F) : (F →SL[τ] G) →L[𝕜₃] E →SL[ρ] G where\n  toFun f := f.comp L\n  map_add' f g := add_comp f g L\n  map_smul' a f := smul_comp a f L\n  cont := by\n    letI : UniformSpace G := TopologicalAddGroup.toUniformSpace G\n    haveI : UniformAddGroup G := comm_topologicalAddGroup_is_uniform\n    rw [(UniformConvergenceCLM.isEmbedding_coeFn _ _ _).continuous_iff]\n    -- Porting note: without this, the following doesn't work\n    change Continuous ((fun f ↦ UniformOnFun.ofFun _ (f ∘ L)) ∘ DFunLike.coe)\n    exact (UniformOnFun.precomp_uniformContinuous fun S hS => hS.image L).continuous.comp\n        (UniformConvergenceCLM.isEmbedding_coeFn _ _ _).continuous\n\n"}
{"name":"ContinuousLinearMap.postcomp_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜₁ : Type u_1\n𝕜₂ : Type u_2\n𝕜₃ : Type u_3\ninst✝¹⁶ : NormedField 𝕜₁\ninst✝¹⁵ : NormedField 𝕜₂\ninst✝¹⁴ : NormedField 𝕜₃\nσ : RingHom 𝕜₁ 𝕜₂\nτ : RingHom 𝕜₂ 𝕜₃\nρ : RingHom 𝕜₁ 𝕜₃\ninst✝¹³ : RingHomCompTriple σ τ ρ\nE : Type u_4\nF : Type u_5\nG : Type u_6\ninst✝¹² : AddCommGroup E\ninst✝¹¹ : Module 𝕜₁ E\ninst✝¹⁰ : AddCommGroup F\ninst✝⁹ : Module 𝕜₂ F\ninst✝⁸ : AddCommGroup G\ninst✝⁷ : Module 𝕜₃ G\ninst✝⁶ : TopologicalSpace E\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : TopologicalSpace G\ninst✝³ : TopologicalAddGroup F\ninst✝² : TopologicalAddGroup G\ninst✝¹ : ContinuousConstSMul 𝕜₃ G\ninst✝ : ContinuousConstSMul 𝕜₂ F\nL : ContinuousLinearMap τ F G\nf : ContinuousLinearMap σ E F\n⊢ Eq ((ContinuousLinearMap.postcomp E L) f) (L.comp f)","decl":"/-- Post-composition by a *fixed* continuous linear map as a continuous linear map.\nNote that in non-normed space it is not always true that composition is continuous\nin both variables, so we have to fix one of them. -/\n@[simps]\ndef postcomp [TopologicalAddGroup F] [TopologicalAddGroup G] [ContinuousConstSMul 𝕜₃ G]\n    [ContinuousConstSMul 𝕜₂ F] (L : F →SL[τ] G) : (E →SL[σ] F) →SL[τ] E →SL[ρ] G where\n  toFun f := L.comp f\n  map_add' := comp_add L\n  map_smul' := comp_smulₛₗ L\n  cont := by\n    letI : UniformSpace G := TopologicalAddGroup.toUniformSpace G\n    haveI : UniformAddGroup G := comm_topologicalAddGroup_is_uniform\n    letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n    haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n    rw [(UniformConvergenceCLM.isEmbedding_coeFn _ _ _).continuous_iff]\n    exact\n      (UniformOnFun.postcomp_uniformContinuous L.uniformContinuous).continuous.comp\n        (UniformConvergenceCLM.isEmbedding_coeFn _ _ _).continuous\n\n"}
{"name":"ContinuousLinearMap.toLinearMap₂_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹¹ : NormedField 𝕜\nE : Type u_2\nF : Type u_3\nG : Type u_4\ninst✝¹⁰ : AddCommGroup E\ninst✝⁹ : Module 𝕜 E\ninst✝⁸ : TopologicalSpace E\ninst✝⁷ : AddCommGroup F\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : TopologicalSpace F\ninst✝⁴ : AddCommGroup G\ninst✝³ : Module 𝕜 G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalAddGroup G\ninst✝ : ContinuousConstSMul 𝕜 G\nL : ContinuousLinearMap (RingHom.id 𝕜) E (ContinuousLinearMap (RingHom.id 𝕜) F G)\nv : E\nw : F\n⊢ Eq ((L.toLinearMap₂ v) w) ((L v) w)","decl":"@[simp] lemma toLinearMap₂_apply (L : E →L[𝕜] F →L[𝕜] G) (v : E) (w : F) :\n    L.toLinearMap₂ v w = L v w := rfl\n\n"}
{"name":"ContinuousLinearMap.isUniformEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹³ : AddCommGroup E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\ninst✝⁶ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ IsUniformEmbedding (ContinuousLinearMap.restrictScalars 𝕜')","decl":"theorem isUniformEmbedding_restrictScalars :\n    IsUniformEmbedding (restrictScalars 𝕜' : (E →L[𝕜] F) → (E →L[𝕜'] F)) := by\n  rw [← isUniformEmbedding_toUniformOnFun.of_comp_iff]\n  convert isUniformEmbedding_toUniformOnFun using 4 with s\n  exact ⟨fun h ↦ h.extend_scalars _, fun h ↦ h.restrict_scalars _⟩\n\n"}
{"name":"ContinuousLinearMap.uniformEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹³ : AddCommGroup E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\ninst✝⁶ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ IsUniformEmbedding (ContinuousLinearMap.restrictScalars 𝕜')","decl":"@[deprecated (since := \"2024-10-01\")]\nalias uniformEmbedding_restrictScalars := isUniformEmbedding_restrictScalars\n\n"}
{"name":"ContinuousLinearMap.uniformContinuous_restrictScalars","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹³ : AddCommGroup E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : UniformSpace F\ninst✝⁷ : UniformAddGroup F\ninst✝⁶ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ UniformContinuous (ContinuousLinearMap.restrictScalars 𝕜')","decl":"theorem uniformContinuous_restrictScalars :\n    UniformContinuous (restrictScalars 𝕜' : (E →L[𝕜] F) → (E →L[𝕜'] F)) :=\n  (isUniformEmbedding_restrictScalars 𝕜').uniformContinuous\n\n"}
{"name":"ContinuousLinearMap.isEmbedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹³ : AddCommGroup E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Topology.IsEmbedding (ContinuousLinearMap.restrictScalars 𝕜')","decl":"theorem isEmbedding_restrictScalars :\n    IsEmbedding (restrictScalars 𝕜' : (E →L[𝕜] F) → (E →L[𝕜'] F)) :=\n  letI : UniformSpace F := TopologicalAddGroup.toUniformSpace F\n  haveI : UniformAddGroup F := comm_topologicalAddGroup_is_uniform\n  (isUniformEmbedding_restrictScalars _).isEmbedding\n\n"}
{"name":"ContinuousLinearMap.embedding_restrictScalars","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹³ : AddCommGroup E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Topology.IsEmbedding (ContinuousLinearMap.restrictScalars 𝕜')","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_restrictScalars := isEmbedding_restrictScalars\n\n"}
{"name":"ContinuousLinearMap.continuous_restrictScalars","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹³ : AddCommGroup E\ninst✝¹² : TopologicalSpace E\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝⁹ : AddCommGroup F\ninst✝⁸ : TopologicalSpace F\ninst✝⁷ : TopologicalAddGroup F\ninst✝⁶ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝⁵ : NontriviallyNormedField 𝕜'\ninst✝⁴ : NormedAlgebra 𝕜' 𝕜\ninst✝³ : Module 𝕜' E\ninst✝² : IsScalarTower 𝕜' 𝕜 E\ninst✝¹ : Module 𝕜' F\ninst✝ : IsScalarTower 𝕜' 𝕜 F\n⊢ Continuous (ContinuousLinearMap.restrictScalars 𝕜')","decl":"@[continuity, fun_prop]\ntheorem continuous_restrictScalars :\n    Continuous (restrictScalars 𝕜' : (E →L[𝕜] F) → (E →L[𝕜'] F)) :=\n   (isEmbedding_restrictScalars _).continuous\n\n"}
{"name":"ContinuousLinearMap.coe_restrictScalarsL","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁹ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹⁸ : AddCommGroup E\ninst✝¹⁷ : TopologicalSpace E\ninst✝¹⁶ : Module 𝕜 E\ninst✝¹⁵ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝¹⁴ : AddCommGroup F\ninst✝¹³ : TopologicalSpace F\ninst✝¹² : TopologicalAddGroup F\ninst✝¹¹ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝¹⁰ : NontriviallyNormedField 𝕜'\ninst✝⁹ : NormedAlgebra 𝕜' 𝕜\ninst✝⁸ : Module 𝕜' E\ninst✝⁷ : IsScalarTower 𝕜' 𝕜 E\ninst✝⁶ : Module 𝕜' F\ninst✝⁵ : IsScalarTower 𝕜' 𝕜 F\n𝕜'' : Type u_5\ninst✝⁴ : Ring 𝕜''\ninst✝³ : Module 𝕜'' F\ninst✝² : ContinuousConstSMul 𝕜'' F\ninst✝¹ : SMulCommClass 𝕜 𝕜'' F\ninst✝ : SMulCommClass 𝕜' 𝕜'' F\n⊢ Eq (↑(ContinuousLinearMap.restrictScalarsL 𝕜 E F 𝕜' 𝕜'')) (ContinuousLinearMap.restrictScalarsₗ 𝕜 E F 𝕜' 𝕜'')","decl":"@[simp]\ntheorem coe_restrictScalarsL : (restrictScalarsL 𝕜 E F 𝕜' 𝕜'' : (E →L[𝕜] F) →ₗ[𝕜''] E →L[𝕜'] F) =\n    restrictScalarsₗ 𝕜 E F 𝕜' 𝕜'' :=\n  rfl\n\n"}
{"name":"ContinuousLinearMap.coe_restrict_scalarsL'","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\ninst✝¹⁹ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹⁸ : AddCommGroup E\ninst✝¹⁷ : TopologicalSpace E\ninst✝¹⁶ : Module 𝕜 E\ninst✝¹⁵ : ContinuousSMul 𝕜 E\nF : Type u_3\ninst✝¹⁴ : AddCommGroup F\ninst✝¹³ : TopologicalSpace F\ninst✝¹² : TopologicalAddGroup F\ninst✝¹¹ : Module 𝕜 F\n𝕜' : Type u_4\ninst✝¹⁰ : NontriviallyNormedField 𝕜'\ninst✝⁹ : NormedAlgebra 𝕜' 𝕜\ninst✝⁸ : Module 𝕜' E\ninst✝⁷ : IsScalarTower 𝕜' 𝕜 E\ninst✝⁶ : Module 𝕜' F\ninst✝⁵ : IsScalarTower 𝕜' 𝕜 F\n𝕜'' : Type u_5\ninst✝⁴ : Ring 𝕜''\ninst✝³ : Module 𝕜'' F\ninst✝² : ContinuousConstSMul 𝕜'' F\ninst✝¹ : SMulCommClass 𝕜 𝕜'' F\ninst✝ : SMulCommClass 𝕜' 𝕜'' F\n⊢ Eq (⇑(ContinuousLinearMap.restrictScalarsL 𝕜 E F 𝕜' 𝕜'')) (ContinuousLinearMap.restrictScalars 𝕜')","decl":"@[simp]\ntheorem coe_restrict_scalarsL' : ⇑(restrictScalarsL 𝕜 E F 𝕜' 𝕜'') = restrictScalars 𝕜' :=\n  rfl\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongrSL_symm_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\n𝕜₃ : Type u_3\n𝕜₄ : Type u_4\nE : Type u_5\nF : Type u_6\nG : Type u_7\nH : Type u_8\ninst✝³¹ : AddCommGroup E\ninst✝³⁰ : AddCommGroup F\ninst✝²⁹ : AddCommGroup G\ninst✝²⁸ : AddCommGroup H\ninst✝²⁷ : NormedField 𝕜\ninst✝²⁶ : NormedField 𝕜₂\ninst✝²⁵ : NormedField 𝕜₃\ninst✝²⁴ : NormedField 𝕜₄\ninst✝²³ : Module 𝕜 E\ninst✝²² : Module 𝕜₂ F\ninst✝²¹ : Module 𝕜₃ G\ninst✝²⁰ : Module 𝕜₄ H\ninst✝¹⁹ : TopologicalSpace E\ninst✝¹⁸ : TopologicalSpace F\ninst✝¹⁷ : TopologicalSpace G\ninst✝¹⁶ : TopologicalSpace H\ninst✝¹⁵ : TopologicalAddGroup G\ninst✝¹⁴ : TopologicalAddGroup H\ninst✝¹³ : ContinuousConstSMul 𝕜₃ G\ninst✝¹² : ContinuousConstSMul 𝕜₄ H\nσ₁₂ : RingHom 𝕜 𝕜₂\nσ₂₁ : RingHom 𝕜₂ 𝕜\nσ₂₃ : RingHom 𝕜₂ 𝕜₃\nσ₁₃ : RingHom 𝕜 𝕜₃\nσ₃₄ : RingHom 𝕜₃ 𝕜₄\nσ₄₃ : RingHom 𝕜₄ 𝕜₃\nσ₂₄ : RingHom 𝕜₂ 𝕜₄\nσ₁₄ : RingHom 𝕜 𝕜₄\ninst✝¹¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁰ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁹ : RingHomInvPair σ₃₄ σ₄₃\ninst✝⁸ : RingHomInvPair σ₄₃ σ₃₄\ninst✝⁷ : RingHomCompTriple σ₂₁ σ₁₄ σ₂₄\ninst✝⁶ : RingHomCompTriple σ₂₄ σ₄₃ σ₂₃\ninst✝⁵ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁴ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝³ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝² : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\ninst✝¹ : RingHomIsometric σ₁₂\ninst✝ : RingHomIsometric σ₂₁\ne₁₂ : ContinuousLinearEquiv σ₁₂ E F\ne₄₃ : ContinuousLinearEquiv σ₄₃ H G\nL : ContinuousLinearMap σ₂₃ F G\n⊢ Eq ((e₁₂.arrowCongrSL e₄₃).symm L) ((↑e₄₃.symm).comp (L.comp ↑e₁₂))","decl":"/-- A pair of continuous (semi)linear equivalences generates a (semi)linear equivalence between the\nspaces of continuous (semi)linear maps. -/\n@[simps apply symm_apply toLinearEquiv_apply toLinearEquiv_symm_apply]\ndef arrowCongrSL (e₁₂ : E ≃SL[σ₁₂] F) (e₄₃ : H ≃SL[σ₄₃] G) :\n    (E →SL[σ₁₄] H) ≃SL[σ₄₃] F →SL[σ₂₃] G :=\n{ e₁₂.arrowCongrEquiv e₄₃ with\n    -- given explicitly to help `simps`\n    toFun := fun L => (e₄₃ : H →SL[σ₄₃] G).comp (L.comp (e₁₂.symm : F →SL[σ₂₁] E))\n    -- given explicitly to help `simps`\n    invFun := fun L => (e₄₃.symm : G →SL[σ₃₄] H).comp (L.comp (e₁₂ : E →SL[σ₁₂] F))\n    map_add' := fun f g => by simp only [add_comp, comp_add]\n    map_smul' := fun t f => by simp only [smul_comp, comp_smulₛₗ]\n    continuous_toFun := ((postcomp F e₄₃.toContinuousLinearMap).comp\n      (precomp H e₁₂.symm.toContinuousLinearMap)).continuous\n    continuous_invFun := ((precomp H e₁₂.toContinuousLinearMap).comp\n      (postcomp F e₄₃.symm.toContinuousLinearMap)).continuous }\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongrSL_toLinearEquiv_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\n𝕜₃ : Type u_3\n𝕜₄ : Type u_4\nE : Type u_5\nF : Type u_6\nG : Type u_7\nH : Type u_8\ninst✝³¹ : AddCommGroup E\ninst✝³⁰ : AddCommGroup F\ninst✝²⁹ : AddCommGroup G\ninst✝²⁸ : AddCommGroup H\ninst✝²⁷ : NormedField 𝕜\ninst✝²⁶ : NormedField 𝕜₂\ninst✝²⁵ : NormedField 𝕜₃\ninst✝²⁴ : NormedField 𝕜₄\ninst✝²³ : Module 𝕜 E\ninst✝²² : Module 𝕜₂ F\ninst✝²¹ : Module 𝕜₃ G\ninst✝²⁰ : Module 𝕜₄ H\ninst✝¹⁹ : TopologicalSpace E\ninst✝¹⁸ : TopologicalSpace F\ninst✝¹⁷ : TopologicalSpace G\ninst✝¹⁶ : TopologicalSpace H\ninst✝¹⁵ : TopologicalAddGroup G\ninst✝¹⁴ : TopologicalAddGroup H\ninst✝¹³ : ContinuousConstSMul 𝕜₃ G\ninst✝¹² : ContinuousConstSMul 𝕜₄ H\nσ₁₂ : RingHom 𝕜 𝕜₂\nσ₂₁ : RingHom 𝕜₂ 𝕜\nσ₂₃ : RingHom 𝕜₂ 𝕜₃\nσ₁₃ : RingHom 𝕜 𝕜₃\nσ₃₄ : RingHom 𝕜₃ 𝕜₄\nσ₄₃ : RingHom 𝕜₄ 𝕜₃\nσ₂₄ : RingHom 𝕜₂ 𝕜₄\nσ₁₄ : RingHom 𝕜 𝕜₄\ninst✝¹¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁰ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁹ : RingHomInvPair σ₃₄ σ₄₃\ninst✝⁸ : RingHomInvPair σ₄₃ σ₃₄\ninst✝⁷ : RingHomCompTriple σ₂₁ σ₁₄ σ₂₄\ninst✝⁶ : RingHomCompTriple σ₂₄ σ₄₃ σ₂₃\ninst✝⁵ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁴ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝³ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝² : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\ninst✝¹ : RingHomIsometric σ₁₂\ninst✝ : RingHomIsometric σ₂₁\ne₁₂ : ContinuousLinearEquiv σ₁₂ E F\ne₄₃ : ContinuousLinearEquiv σ₄₃ H G\nL : ContinuousLinearMap σ₁₄ E H\n⊢ Eq ((e₁₂.arrowCongrSL e₄₃).toLinearEquiv L) ((↑e₄₃).comp (L.comp ↑e₁₂.symm))","decl":"/-- A pair of continuous (semi)linear equivalences generates a (semi)linear equivalence between the\nspaces of continuous (semi)linear maps. -/\n@[simps apply symm_apply toLinearEquiv_apply toLinearEquiv_symm_apply]\ndef arrowCongrSL (e₁₂ : E ≃SL[σ₁₂] F) (e₄₃ : H ≃SL[σ₄₃] G) :\n    (E →SL[σ₁₄] H) ≃SL[σ₄₃] F →SL[σ₂₃] G :=\n{ e₁₂.arrowCongrEquiv e₄₃ with\n    -- given explicitly to help `simps`\n    toFun := fun L => (e₄₃ : H →SL[σ₄₃] G).comp (L.comp (e₁₂.symm : F →SL[σ₂₁] E))\n    -- given explicitly to help `simps`\n    invFun := fun L => (e₄₃.symm : G →SL[σ₃₄] H).comp (L.comp (e₁₂ : E →SL[σ₁₂] F))\n    map_add' := fun f g => by simp only [add_comp, comp_add]\n    map_smul' := fun t f => by simp only [smul_comp, comp_smulₛₗ]\n    continuous_toFun := ((postcomp F e₄₃.toContinuousLinearMap).comp\n      (precomp H e₁₂.symm.toContinuousLinearMap)).continuous\n    continuous_invFun := ((precomp H e₁₂.toContinuousLinearMap).comp\n      (postcomp F e₄₃.symm.toContinuousLinearMap)).continuous }\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongrSL_toLinearEquiv_symm_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\n𝕜₃ : Type u_3\n𝕜₄ : Type u_4\nE : Type u_5\nF : Type u_6\nG : Type u_7\nH : Type u_8\ninst✝³¹ : AddCommGroup E\ninst✝³⁰ : AddCommGroup F\ninst✝²⁹ : AddCommGroup G\ninst✝²⁸ : AddCommGroup H\ninst✝²⁷ : NormedField 𝕜\ninst✝²⁶ : NormedField 𝕜₂\ninst✝²⁵ : NormedField 𝕜₃\ninst✝²⁴ : NormedField 𝕜₄\ninst✝²³ : Module 𝕜 E\ninst✝²² : Module 𝕜₂ F\ninst✝²¹ : Module 𝕜₃ G\ninst✝²⁰ : Module 𝕜₄ H\ninst✝¹⁹ : TopologicalSpace E\ninst✝¹⁸ : TopologicalSpace F\ninst✝¹⁷ : TopologicalSpace G\ninst✝¹⁶ : TopologicalSpace H\ninst✝¹⁵ : TopologicalAddGroup G\ninst✝¹⁴ : TopologicalAddGroup H\ninst✝¹³ : ContinuousConstSMul 𝕜₃ G\ninst✝¹² : ContinuousConstSMul 𝕜₄ H\nσ₁₂ : RingHom 𝕜 𝕜₂\nσ₂₁ : RingHom 𝕜₂ 𝕜\nσ₂₃ : RingHom 𝕜₂ 𝕜₃\nσ₁₃ : RingHom 𝕜 𝕜₃\nσ₃₄ : RingHom 𝕜₃ 𝕜₄\nσ₄₃ : RingHom 𝕜₄ 𝕜₃\nσ₂₄ : RingHom 𝕜₂ 𝕜₄\nσ₁₄ : RingHom 𝕜 𝕜₄\ninst✝¹¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁰ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁹ : RingHomInvPair σ₃₄ σ₄₃\ninst✝⁸ : RingHomInvPair σ₄₃ σ₃₄\ninst✝⁷ : RingHomCompTriple σ₂₁ σ₁₄ σ₂₄\ninst✝⁶ : RingHomCompTriple σ₂₄ σ₄₃ σ₂₃\ninst✝⁵ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁴ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝³ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝² : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\ninst✝¹ : RingHomIsometric σ₁₂\ninst✝ : RingHomIsometric σ₂₁\ne₁₂ : ContinuousLinearEquiv σ₁₂ E F\ne₄₃ : ContinuousLinearEquiv σ₄₃ H G\nL : ContinuousLinearMap σ₂₃ F G\n⊢ Eq ((e₁₂.arrowCongrSL e₄₃).symm L) ((↑e₄₃.symm).comp (L.comp ↑e₁₂))","decl":"/-- A pair of continuous (semi)linear equivalences generates a (semi)linear equivalence between the\nspaces of continuous (semi)linear maps. -/\n@[simps apply symm_apply toLinearEquiv_apply toLinearEquiv_symm_apply]\ndef arrowCongrSL (e₁₂ : E ≃SL[σ₁₂] F) (e₄₃ : H ≃SL[σ₄₃] G) :\n    (E →SL[σ₁₄] H) ≃SL[σ₄₃] F →SL[σ₂₃] G :=\n{ e₁₂.arrowCongrEquiv e₄₃ with\n    -- given explicitly to help `simps`\n    toFun := fun L => (e₄₃ : H →SL[σ₄₃] G).comp (L.comp (e₁₂.symm : F →SL[σ₂₁] E))\n    -- given explicitly to help `simps`\n    invFun := fun L => (e₄₃.symm : G →SL[σ₃₄] H).comp (L.comp (e₁₂ : E →SL[σ₁₂] F))\n    map_add' := fun f g => by simp only [add_comp, comp_add]\n    map_smul' := fun t f => by simp only [smul_comp, comp_smulₛₗ]\n    continuous_toFun := ((postcomp F e₄₃.toContinuousLinearMap).comp\n      (precomp H e₁₂.symm.toContinuousLinearMap)).continuous\n    continuous_invFun := ((precomp H e₁₂.toContinuousLinearMap).comp\n      (postcomp F e₄₃.symm.toContinuousLinearMap)).continuous }\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongrSL_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\n𝕜₂ : Type u_2\n𝕜₃ : Type u_3\n𝕜₄ : Type u_4\nE : Type u_5\nF : Type u_6\nG : Type u_7\nH : Type u_8\ninst✝³¹ : AddCommGroup E\ninst✝³⁰ : AddCommGroup F\ninst✝²⁹ : AddCommGroup G\ninst✝²⁸ : AddCommGroup H\ninst✝²⁷ : NormedField 𝕜\ninst✝²⁶ : NormedField 𝕜₂\ninst✝²⁵ : NormedField 𝕜₃\ninst✝²⁴ : NormedField 𝕜₄\ninst✝²³ : Module 𝕜 E\ninst✝²² : Module 𝕜₂ F\ninst✝²¹ : Module 𝕜₃ G\ninst✝²⁰ : Module 𝕜₄ H\ninst✝¹⁹ : TopologicalSpace E\ninst✝¹⁸ : TopologicalSpace F\ninst✝¹⁷ : TopologicalSpace G\ninst✝¹⁶ : TopologicalSpace H\ninst✝¹⁵ : TopologicalAddGroup G\ninst✝¹⁴ : TopologicalAddGroup H\ninst✝¹³ : ContinuousConstSMul 𝕜₃ G\ninst✝¹² : ContinuousConstSMul 𝕜₄ H\nσ₁₂ : RingHom 𝕜 𝕜₂\nσ₂₁ : RingHom 𝕜₂ 𝕜\nσ₂₃ : RingHom 𝕜₂ 𝕜₃\nσ₁₃ : RingHom 𝕜 𝕜₃\nσ₃₄ : RingHom 𝕜₃ 𝕜₄\nσ₄₃ : RingHom 𝕜₄ 𝕜₃\nσ₂₄ : RingHom 𝕜₂ 𝕜₄\nσ₁₄ : RingHom 𝕜 𝕜₄\ninst✝¹¹ : RingHomInvPair σ₁₂ σ₂₁\ninst✝¹⁰ : RingHomInvPair σ₂₁ σ₁₂\ninst✝⁹ : RingHomInvPair σ₃₄ σ₄₃\ninst✝⁸ : RingHomInvPair σ₄₃ σ₃₄\ninst✝⁷ : RingHomCompTriple σ₂₁ σ₁₄ σ₂₄\ninst✝⁶ : RingHomCompTriple σ₂₄ σ₄₃ σ₂₃\ninst✝⁵ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝⁴ : RingHomCompTriple σ₁₃ σ₃₄ σ₁₄\ninst✝³ : RingHomCompTriple σ₂₃ σ₃₄ σ₂₄\ninst✝² : RingHomCompTriple σ₁₂ σ₂₄ σ₁₄\ninst✝¹ : RingHomIsometric σ₁₂\ninst✝ : RingHomIsometric σ₂₁\ne₁₂ : ContinuousLinearEquiv σ₁₂ E F\ne₄₃ : ContinuousLinearEquiv σ₄₃ H G\nL : ContinuousLinearMap σ₁₄ E H\n⊢ Eq ((e₁₂.arrowCongrSL e₄₃) L) ((↑e₄₃).comp (L.comp ↑e₁₂.symm))","decl":"/-- A pair of continuous (semi)linear equivalences generates a (semi)linear equivalence between the\nspaces of continuous (semi)linear maps. -/\n@[simps apply symm_apply toLinearEquiv_apply toLinearEquiv_symm_apply]\ndef arrowCongrSL (e₁₂ : E ≃SL[σ₁₂] F) (e₄₃ : H ≃SL[σ₄₃] G) :\n    (E →SL[σ₁₄] H) ≃SL[σ₄₃] F →SL[σ₂₃] G :=\n{ e₁₂.arrowCongrEquiv e₄₃ with\n    -- given explicitly to help `simps`\n    toFun := fun L => (e₄₃ : H →SL[σ₄₃] G).comp (L.comp (e₁₂.symm : F →SL[σ₂₁] E))\n    -- given explicitly to help `simps`\n    invFun := fun L => (e₄₃.symm : G →SL[σ₃₄] H).comp (L.comp (e₁₂ : E →SL[σ₁₂] F))\n    map_add' := fun f g => by simp only [add_comp, comp_add]\n    map_smul' := fun t f => by simp only [smul_comp, comp_smulₛₗ]\n    continuous_toFun := ((postcomp F e₄₃.toContinuousLinearMap).comp\n      (precomp H e₁₂.symm.toContinuousLinearMap)).continuous\n    continuous_invFun := ((precomp H e₁₂.toContinuousLinearMap).comp\n      (postcomp F e₄₃.symm.toContinuousLinearMap)).continuous }\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongr_apply","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nG : Type u_4\nH : Type u_5\ninst✝¹⁶ : AddCommGroup E\ninst✝¹⁵ : AddCommGroup F\ninst✝¹⁴ : AddCommGroup G\ninst✝¹³ : AddCommGroup H\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : Module 𝕜 F\ninst✝⁹ : Module 𝕜 G\ninst✝⁸ : Module 𝕜 H\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : TopologicalSpace H\ninst✝³ : TopologicalAddGroup G\ninst✝² : TopologicalAddGroup H\ninst✝¹ : ContinuousConstSMul 𝕜 G\ninst✝ : ContinuousConstSMul 𝕜 H\ne₁ : ContinuousLinearEquiv (RingHom.id 𝕜) E F\ne₂ : ContinuousLinearEquiv (RingHom.id 𝕜) H G\nf : ContinuousLinearMap (RingHom.id 𝕜) E H\nx : F\n⊢ Eq (((e₁.arrowCongr e₂) f) x) (e₂ (f (e₁.symm x)))","decl":"@[simp] lemma arrowCongr_apply (e₁ : E ≃L[𝕜] F) (e₂ : H ≃L[𝕜] G) (f : E →L[𝕜] H) (x : F) :\n    e₁.arrowCongr e₂ f x = e₂ (f (e₁.symm x)) := rfl\n\n"}
{"name":"ContinuousLinearEquiv.arrowCongr_symm","module":"Mathlib.Topology.Algebra.Module.StrongTopology","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nG : Type u_4\nH : Type u_5\ninst✝¹⁶ : AddCommGroup E\ninst✝¹⁵ : AddCommGroup F\ninst✝¹⁴ : AddCommGroup G\ninst✝¹³ : AddCommGroup H\ninst✝¹² : NormedField 𝕜\ninst✝¹¹ : Module 𝕜 E\ninst✝¹⁰ : Module 𝕜 F\ninst✝⁹ : Module 𝕜 G\ninst✝⁸ : Module 𝕜 H\ninst✝⁷ : TopologicalSpace E\ninst✝⁶ : TopologicalSpace F\ninst✝⁵ : TopologicalSpace G\ninst✝⁴ : TopologicalSpace H\ninst✝³ : TopologicalAddGroup G\ninst✝² : TopologicalAddGroup H\ninst✝¹ : ContinuousConstSMul 𝕜 G\ninst✝ : ContinuousConstSMul 𝕜 H\ne₁ : ContinuousLinearEquiv (RingHom.id 𝕜) E F\ne₂ : ContinuousLinearEquiv (RingHom.id 𝕜) H G\n⊢ Eq (e₁.arrowCongr e₂).symm (e₁.symm.arrowCongr e₂.symm)","decl":"@[simp] lemma arrowCongr_symm (e₁ : E ≃L[𝕜] F) (e₂ : H ≃L[𝕜] G) :\n    (e₁.arrowCongr e₂).symm = e₁.symm.arrowCongr e₂.symm := rfl\n\n"}
