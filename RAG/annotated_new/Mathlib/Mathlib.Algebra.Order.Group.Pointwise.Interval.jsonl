{"name":"Set.Icc_add_Icc_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : Preorder α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b c d : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Icc a b) (Set.Icc c d)) (Set.Icc (HAdd.hAdd a c) (HAdd.hAdd b d))","decl":"@[to_additive Icc_add_Icc_subset]\ntheorem Icc_mul_Icc_subset' (a b c d : α) : Icc a b * Icc c d ⊆ Icc (a * c) (b * d) := by\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_le_mul' hya hzc, mul_le_mul' hyb hzd⟩\n\n"}
{"name":"Set.Icc_mul_Icc_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : Preorder α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b c d : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Icc a b) (Set.Icc c d)) (Set.Icc (HMul.hMul a c) (HMul.hMul b d))","decl":"@[to_additive Icc_add_Icc_subset]\ntheorem Icc_mul_Icc_subset' (a b c d : α) : Icc a b * Icc c d ⊆ Icc (a * c) (b * d) := by\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_le_mul' hya hzc, mul_le_mul' hyb hzd⟩\n\n"}
{"name":"Set.Iic_mul_Iic_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : Preorder α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Iic a) (Set.Iic b)) (Set.Iic (HMul.hMul a b))","decl":"@[to_additive Iic_add_Iic_subset]\ntheorem Iic_mul_Iic_subset' (a b : α) : Iic a * Iic b ⊆ Iic (a * b) := by\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_le_mul' hya hzb\n\n"}
{"name":"Set.Iic_add_Iic_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : Preorder α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Iic a) (Set.Iic b)) (Set.Iic (HAdd.hAdd a b))","decl":"@[to_additive Iic_add_Iic_subset]\ntheorem Iic_mul_Iic_subset' (a b : α) : Iic a * Iic b ⊆ Iic (a * b) := by\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_le_mul' hya hzb\n\n"}
{"name":"Set.Ici_mul_Ici_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : Preorder α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Ici a) (Set.Ici b)) (Set.Ici (HMul.hMul a b))","decl":"@[to_additive Ici_add_Ici_subset]\ntheorem Ici_mul_Ici_subset' (a b : α) : Ici a * Ici b ⊆ Ici (a * b) := by\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_le_mul' hya hzb\n\n"}
{"name":"Set.Ici_add_Ici_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : Preorder α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Ici a) (Set.Ici b)) (Set.Ici (HAdd.hAdd a b))","decl":"@[to_additive Ici_add_Ici_subset]\ntheorem Ici_mul_Ici_subset' (a b : α) : Ici a * Ici b ⊆ Ici (a * b) := by\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_le_mul' hya hzb\n\n"}
{"name":"Set.Icc_mul_Ico_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Icc a b) (Set.Ico c d)) (Set.Ico (HMul.hMul a c) (HMul.hMul b d))","decl":"@[to_additive Icc_add_Ico_subset]\ntheorem Icc_mul_Ico_subset' (a b c d : α) : Icc a b * Ico c d ⊆ Ico (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_le_mul' hya hzc, mul_lt_mul_of_le_of_lt hyb hzd⟩\n\n"}
{"name":"Set.Icc_add_Ico_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Icc a b) (Set.Ico c d)) (Set.Ico (HAdd.hAdd a c) (HAdd.hAdd b d))","decl":"@[to_additive Icc_add_Ico_subset]\ntheorem Icc_mul_Ico_subset' (a b c d : α) : Icc a b * Ico c d ⊆ Ico (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_le_mul' hya hzc, mul_lt_mul_of_le_of_lt hyb hzd⟩\n\n"}
{"name":"Set.Ico_add_Icc_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Ico a b) (Set.Icc c d)) (Set.Ico (HAdd.hAdd a c) (HAdd.hAdd b d))","decl":"@[to_additive Ico_add_Icc_subset]\ntheorem Ico_mul_Icc_subset' (a b c d : α) : Ico a b * Icc c d ⊆ Ico (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_le_mul' hya hzc, mul_lt_mul_of_lt_of_le hyb hzd⟩\n\n"}
{"name":"Set.Ico_mul_Icc_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Ico a b) (Set.Icc c d)) (Set.Ico (HMul.hMul a c) (HMul.hMul b d))","decl":"@[to_additive Ico_add_Icc_subset]\ntheorem Ico_mul_Icc_subset' (a b c d : α) : Ico a b * Icc c d ⊆ Ico (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_le_mul' hya hzc, mul_lt_mul_of_lt_of_le hyb hzd⟩\n\n"}
{"name":"Set.Ioc_add_Ico_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Ioc a b) (Set.Ico c d)) (Set.Ioo (HAdd.hAdd a c) (HAdd.hAdd b d))","decl":"@[to_additive Ioc_add_Ico_subset]\ntheorem Ioc_mul_Ico_subset' (a b c d : α) : Ioc a b * Ico c d ⊆ Ioo (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_lt_mul_of_lt_of_le hya hzc, mul_lt_mul_of_le_of_lt hyb hzd⟩\n\n"}
{"name":"Set.Ioc_mul_Ico_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Ioc a b) (Set.Ico c d)) (Set.Ioo (HMul.hMul a c) (HMul.hMul b d))","decl":"@[to_additive Ioc_add_Ico_subset]\ntheorem Ioc_mul_Ico_subset' (a b c d : α) : Ioc a b * Ico c d ⊆ Ioo (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_lt_mul_of_lt_of_le hya hzc, mul_lt_mul_of_le_of_lt hyb hzd⟩\n\n"}
{"name":"Set.Ico_mul_Ioc_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Ico a b) (Set.Ioc c d)) (Set.Ioo (HMul.hMul a c) (HMul.hMul b d))","decl":"@[to_additive Ico_add_Ioc_subset]\ntheorem Ico_mul_Ioc_subset' (a b c d : α) : Ico a b * Ioc c d ⊆ Ioo (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_lt_mul_of_le_of_lt hya hzc, mul_lt_mul_of_lt_of_le hyb hzd⟩\n\n"}
{"name":"Set.Ico_add_Ioc_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b c d : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Ico a b) (Set.Ioc c d)) (Set.Ioo (HAdd.hAdd a c) (HAdd.hAdd b d))","decl":"@[to_additive Ico_add_Ioc_subset]\ntheorem Ico_mul_Ioc_subset' (a b c d : α) : Ico a b * Ioc c d ⊆ Ioo (a * c) (b * d) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, ⟨hya, hyb⟩, z, ⟨hzc, hzd⟩, rfl⟩\n  exact ⟨mul_lt_mul_of_le_of_lt hya hzc, mul_lt_mul_of_lt_of_le hyb hzd⟩\n\n"}
{"name":"Set.Iic_add_Iio_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Iic a) (Set.Iio b)) (Set.Iio (HAdd.hAdd a b))","decl":"@[to_additive Iic_add_Iio_subset]\ntheorem Iic_mul_Iio_subset' (a b : α) : Iic a * Iio b ⊆ Iio (a * b) := by\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_le_of_lt hya hzb\n\n"}
{"name":"Set.Iic_mul_Iio_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Iic a) (Set.Iio b)) (Set.Iio (HMul.hMul a b))","decl":"@[to_additive Iic_add_Iio_subset]\ntheorem Iic_mul_Iio_subset' (a b : α) : Iic a * Iio b ⊆ Iio (a * b) := by\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_le_of_lt hya hzb\n\n"}
{"name":"Set.Iio_mul_Iic_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Iio a) (Set.Iic b)) (Set.Iio (HMul.hMul a b))","decl":"@[to_additive Iio_add_Iic_subset]\ntheorem Iio_mul_Iic_subset' (a b : α) : Iio a * Iic b ⊆ Iio (a * b) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_lt_of_le hya hzb\n\n"}
{"name":"Set.Iio_add_Iic_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Iio a) (Set.Iic b)) (Set.Iio (HAdd.hAdd a b))","decl":"@[to_additive Iio_add_Iic_subset]\ntheorem Iio_mul_Iic_subset' (a b : α) : Iio a * Iic b ⊆ Iio (a * b) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_lt_of_le hya hzb\n\n"}
{"name":"Set.Ioi_mul_Ici_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Ioi a) (Set.Ici b)) (Set.Ioi (HMul.hMul a b))","decl":"@[to_additive Ioi_add_Ici_subset]\ntheorem Ioi_mul_Ici_subset' (a b : α) : Ioi a * Ici b ⊆ Ioi (a * b) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_lt_of_le hya hzb\n\n"}
{"name":"Set.Ioi_add_Ici_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Ioi a) (Set.Ici b)) (Set.Ioi (HAdd.hAdd a b))","decl":"@[to_additive Ioi_add_Ici_subset]\ntheorem Ioi_mul_Ici_subset' (a b : α) : Ioi a * Ici b ⊆ Ioi (a * b) := by\n  have := mulLeftMono_of_mulLeftStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_lt_of_le hya hzb\n\n"}
{"name":"Set.Ici_add_Ioi_subset","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Add α\ninst✝² : PartialOrder α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HAdd.hAdd (Set.Ici a) (Set.Ioi b)) (Set.Ioi (HAdd.hAdd a b))","decl":"@[to_additive Ici_add_Ioi_subset]\ntheorem Ici_mul_Ioi_subset' (a b : α) : Ici a * Ioi b ⊆ Ioi (a * b) := by\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_le_of_lt hya hzb\n\n"}
{"name":"Set.Ici_mul_Ioi_subset'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝³ : Mul α\ninst✝² : PartialOrder α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na b : α\n⊢ HasSubset.Subset (HMul.hMul (Set.Ici a) (Set.Ioi b)) (Set.Ioi (HMul.hMul a b))","decl":"@[to_additive Ici_add_Ioi_subset]\ntheorem Ici_mul_Ioi_subset' (a b : α) : Ici a * Ioi b ⊆ Ioi (a * b) := by\n  have := mulRightMono_of_mulRightStrictMono α\n  rintro x ⟨y, hya, z, hzb, rfl⟩\n  exact mul_lt_mul_of_le_of_lt hya hzb\n\n"}
{"name":"Set.vadd_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedAddCommMonoid α\ninst✝¹ : AddLeftReflectLE α\ninst✝ : ExistsAddOfLE α\na b c : α\n⊢ Eq (HVAdd.hVAdd a (Set.Icc b c)) (Set.Icc (HAdd.hAdd a b) (HAdd.hAdd a c))","decl":"@[to_additive (attr := simp)]\nlemma smul_Icc (a b c : α) : a • Icc b c = Icc (a * b) (a * c) := by\n  ext x\n  constructor\n  · rintro ⟨y, ⟨hby, hyc⟩, rfl⟩\n    exact ⟨mul_le_mul_left' hby _, mul_le_mul_left' hyc _⟩\n  · rintro ⟨habx, hxac⟩\n    obtain ⟨y, hy, rfl⟩ := exists_one_le_mul_of_le habx\n    refine ⟨b * y, ⟨le_mul_of_one_le_right' hy, ?_⟩, (mul_assoc ..).symm⟩\n    rwa [mul_assoc, mul_le_mul_iff_left] at hxac\n\n"}
{"name":"Set.smul_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedCommMonoid α\ninst✝¹ : MulLeftReflectLE α\ninst✝ : ExistsMulOfLE α\na b c : α\n⊢ Eq (HSMul.hSMul a (Set.Icc b c)) (Set.Icc (HMul.hMul a b) (HMul.hMul a c))","decl":"@[to_additive (attr := simp)]\nlemma smul_Icc (a b c : α) : a • Icc b c = Icc (a * b) (a * c) := by\n  ext x\n  constructor\n  · rintro ⟨y, ⟨hby, hyc⟩, rfl⟩\n    exact ⟨mul_le_mul_left' hby _, mul_le_mul_left' hyc _⟩\n  · rintro ⟨habx, hxac⟩\n    obtain ⟨y, hy, rfl⟩ := exists_one_le_mul_of_le habx\n    refine ⟨b * y, ⟨le_mul_of_one_le_right' hy, ?_⟩, (mul_assoc ..).symm⟩\n    rwa [mul_assoc, mul_le_mul_iff_left] at hxac\n\n"}
{"name":"Set.Icc_mul_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedCommMonoid α\ninst✝¹ : MulLeftReflectLE α\ninst✝ : ExistsMulOfLE α\na b c d : α\nhab : LE.le a b\nhcd : LE.le c d\n⊢ Eq (HMul.hMul (Set.Icc a b) (Set.Icc c d)) (Set.Icc (HMul.hMul a c) (HMul.hMul b d))","decl":"@[to_additive]\nlemma Icc_mul_Icc (hab : a ≤ b) (hcd : c ≤ d) : Icc a b * Icc c d = Icc (a * c) (b * d) := by\n  refine (Icc_mul_Icc_subset' _ _ _ _).antisymm fun x ⟨hacx, hxbd⟩ ↦ ?_\n  obtain hxbc | hbcx := le_total x (b * c)\n  · obtain ⟨y, hy, rfl⟩ := exists_one_le_mul_of_le hacx\n    refine ⟨a * y, ⟨le_mul_of_one_le_right' hy, ?_⟩, c, left_mem_Icc.2 hcd, mul_right_comm ..⟩\n    rwa [mul_right_comm, mul_le_mul_iff_right] at hxbc\n  · obtain ⟨y, hy, rfl⟩ := exists_one_le_mul_of_le hbcx\n    refine ⟨b, right_mem_Icc.2 hab, c * y, ⟨le_mul_of_one_le_right' hy, ?_⟩, (mul_assoc ..).symm⟩\n    rwa [mul_assoc, mul_le_mul_iff_left] at hxbd\n\n"}
{"name":"Set.Icc_add_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedAddCommMonoid α\ninst✝¹ : AddLeftReflectLE α\ninst✝ : ExistsAddOfLE α\na b c d : α\nhab : LE.le a b\nhcd : LE.le c d\n⊢ Eq (HAdd.hAdd (Set.Icc a b) (Set.Icc c d)) (Set.Icc (HAdd.hAdd a c) (HAdd.hAdd b d))","decl":"@[to_additive]\nlemma Icc_mul_Icc (hab : a ≤ b) (hcd : c ≤ d) : Icc a b * Icc c d = Icc (a * c) (b * d) := by\n  refine (Icc_mul_Icc_subset' _ _ _ _).antisymm fun x ⟨hacx, hxbd⟩ ↦ ?_\n  obtain hxbc | hbcx := le_total x (b * c)\n  · obtain ⟨y, hy, rfl⟩ := exists_one_le_mul_of_le hacx\n    refine ⟨a * y, ⟨le_mul_of_one_le_right' hy, ?_⟩, c, left_mem_Icc.2 hcd, mul_right_comm ..⟩\n    rwa [mul_right_comm, mul_le_mul_iff_right] at hxbc\n  · obtain ⟨y, hy, rfl⟩ := exists_one_le_mul_of_le hbcx\n    refine ⟨b, right_mem_Icc.2 hab, c * y, ⟨le_mul_of_one_le_right' hy, ?_⟩, (mul_assoc ..).symm⟩\n    rwa [mul_assoc, mul_le_mul_iff_left] at hxbd\n\n"}
{"name":"Set.neg_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Ici a)) (Set.Iic (Neg.neg a))","decl":"@[to_additive (attr := simp)] lemma inv_Ici (a : α) : (Ici a)⁻¹ = Iic a⁻¹ := ext fun _x ↦ le_inv'\n"}
{"name":"Set.inv_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na : α\n⊢ Eq (Inv.inv (Set.Ici a)) (Set.Iic (Inv.inv a))","decl":"@[to_additive (attr := simp)] lemma inv_Ici (a : α) : (Ici a)⁻¹ = Iic a⁻¹ := ext fun _x ↦ le_inv'\n"}
{"name":"Set.neg_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Iic a)) (Set.Ici (Neg.neg a))","decl":"@[to_additive (attr := simp)] lemma inv_Iic (a : α) : (Iic a)⁻¹ = Ici a⁻¹ := ext fun _x ↦ inv_le'\n"}
{"name":"Set.inv_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na : α\n⊢ Eq (Inv.inv (Set.Iic a)) (Set.Ici (Inv.inv a))","decl":"@[to_additive (attr := simp)] lemma inv_Iic (a : α) : (Iic a)⁻¹ = Ici a⁻¹ := ext fun _x ↦ inv_le'\n"}
{"name":"Set.neg_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Ioi a)) (Set.Iio (Neg.neg a))","decl":"@[to_additive (attr := simp)] lemma inv_Ioi (a : α) : (Ioi a)⁻¹ = Iio a⁻¹ := ext fun _x ↦ lt_inv'\n"}
{"name":"Set.inv_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na : α\n⊢ Eq (Inv.inv (Set.Ioi a)) (Set.Iio (Inv.inv a))","decl":"@[to_additive (attr := simp)] lemma inv_Ioi (a : α) : (Ioi a)⁻¹ = Iio a⁻¹ := ext fun _x ↦ lt_inv'\n"}
{"name":"Set.inv_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na : α\n⊢ Eq (Inv.inv (Set.Iio a)) (Set.Ioi (Inv.inv a))","decl":"@[to_additive (attr := simp)] lemma inv_Iio (a : α) : (Iio a)⁻¹ = Ioi a⁻¹ := ext fun _x ↦ inv_lt'\n\n"}
{"name":"Set.neg_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Iio a)) (Set.Ioi (Neg.neg a))","decl":"@[to_additive (attr := simp)] lemma inv_Iio (a : α) : (Iio a)⁻¹ = Ioi a⁻¹ := ext fun _x ↦ inv_lt'\n\n"}
{"name":"Set.inv_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Eq (Inv.inv (Set.Icc a b)) (Set.Icc (Inv.inv b) (Inv.inv a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Icc (a b : α) : (Icc a b)⁻¹ = Icc b⁻¹ a⁻¹ := by simp [← Ici_inter_Iic, inter_comm]\n\n"}
{"name":"Set.neg_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Icc a b)) (Set.Icc (Neg.neg b) (Neg.neg a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Icc (a b : α) : (Icc a b)⁻¹ = Icc b⁻¹ a⁻¹ := by simp [← Ici_inter_Iic, inter_comm]\n\n"}
{"name":"Set.neg_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Ico a b)) (Set.Ioc (Neg.neg b) (Neg.neg a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Ico (a b : α) : (Ico a b)⁻¹ = Ioc b⁻¹ a⁻¹ := by\n  simp [← Ici_inter_Iio, ← Ioi_inter_Iic, inter_comm]\n\n"}
{"name":"Set.inv_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Eq (Inv.inv (Set.Ico a b)) (Set.Ioc (Inv.inv b) (Inv.inv a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Ico (a b : α) : (Ico a b)⁻¹ = Ioc b⁻¹ a⁻¹ := by\n  simp [← Ici_inter_Iio, ← Ioi_inter_Iic, inter_comm]\n\n"}
{"name":"Set.inv_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Eq (Inv.inv (Set.Ioc a b)) (Set.Ico (Inv.inv b) (Inv.inv a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Ioc (a b : α) : (Ioc a b)⁻¹ = Ico b⁻¹ a⁻¹ := by\n  simp [← Ioi_inter_Iic, ← Ici_inter_Iio, inter_comm]\n\n"}
{"name":"Set.neg_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Ioc a b)) (Set.Ico (Neg.neg b) (Neg.neg a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Ioc (a b : α) : (Ioc a b)⁻¹ = Ico b⁻¹ a⁻¹ := by\n  simp [← Ioi_inter_Iic, ← Ici_inter_Iio, inter_comm]\n\n"}
{"name":"Set.inv_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Eq (Inv.inv (Set.Ioo a b)) (Set.Ioo (Inv.inv b) (Inv.inv a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Ioo (a b : α) : (Ioo a b)⁻¹ = Ioo b⁻¹ a⁻¹ := by simp [← Ioi_inter_Iio, inter_comm]\n\n"}
{"name":"Set.neg_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Ioo a b)) (Set.Ioo (Neg.neg b) (Neg.neg a))","decl":"@[to_additive (attr := simp)]\nlemma inv_Ioo (a b : α) : (Ioo a b)⁻¹ = Ioo b⁻¹ a⁻¹ := by simp [← Ioi_inter_Iio, inter_comm]\n\n"}
{"name":"Set.preimage_neg_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Ici a)) (Set.Iic (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Ici := neg_Ici\n"}
{"name":"Set.preimage_neg_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Iic a)) (Set.Ici (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Iic := neg_Iic\n"}
{"name":"Set.preimage_neg_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Ioi a)) (Set.Iio (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Ioi := neg_Ioi\n"}
{"name":"Set.preimage_neg_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Neg.neg (Set.Iio a)) (Set.Ioi (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Iio := neg_Iio\n"}
{"name":"Set.preimage_neg_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Icc a b)) (Set.Icc (Neg.neg b) (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Icc := neg_Icc\n"}
{"name":"Set.preimage_neg_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Ico a b)) (Set.Ioc (Neg.neg b) (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Ico := neg_Ico\n"}
{"name":"Set.preimage_neg_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Ioc a b)) (Set.Ico (Neg.neg b) (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Ioc := neg_Ioc\n"}
{"name":"Set.preimage_neg_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.Ioo a b)) (Set.Ioo (Neg.neg b) (Neg.neg a))","decl":"@[deprecated (since := \"2024-11-23\")] alias preimage_neg_Ioo := neg_Ioo\n\n"}
{"name":"Set.preimage_const_add_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Ici b)) (Set.Ici (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_const_add_Ici : (fun x => a + x) ⁻¹' Ici b = Ici (b - a) :=\n  ext fun _x => sub_le_iff_le_add'.symm\n\n"}
{"name":"Set.preimage_const_add_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Ioi b)) (Set.Ioi (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_const_add_Ioi : (fun x => a + x) ⁻¹' Ioi b = Ioi (b - a) :=\n  ext fun _x => sub_lt_iff_lt_add'.symm\n\n"}
{"name":"Set.preimage_const_add_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Iic b)) (Set.Iic (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_const_add_Iic : (fun x => a + x) ⁻¹' Iic b = Iic (b - a) :=\n  ext fun _x => le_sub_iff_add_le'.symm\n\n"}
{"name":"Set.preimage_const_add_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Iio b)) (Set.Iio (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_const_add_Iio : (fun x => a + x) ⁻¹' Iio b = Iio (b - a) :=\n  ext fun _x => lt_sub_iff_add_lt'.symm\n\n"}
{"name":"Set.preimage_const_add_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Icc b c)) (Set.Icc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_const_add_Icc : (fun x => a + x) ⁻¹' Icc b c = Icc (b - a) (c - a) := by\n  simp [← Ici_inter_Iic]\n\n"}
{"name":"Set.preimage_const_add_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Ico b c)) (Set.Ico (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_const_add_Ico : (fun x => a + x) ⁻¹' Ico b c = Ico (b - a) (c - a) := by\n  simp [← Ici_inter_Iio]\n\n"}
{"name":"Set.preimage_const_add_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Ioc b c)) (Set.Ioc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_const_add_Ioc : (fun x => a + x) ⁻¹' Ioc b c = Ioc (b - a) (c - a) := by\n  simp [← Ioi_inter_Iic]\n\n"}
{"name":"Set.preimage_const_add_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.Ioo b c)) (Set.Ioo (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_const_add_Ioo : (fun x => a + x) ⁻¹' Ioo b c = Ioo (b - a) (c - a) := by\n  simp [← Ioi_inter_Iio]\n\n"}
{"name":"Set.preimage_add_const_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Ici b)) (Set.Ici (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_add_const_Ici : (fun x => x + a) ⁻¹' Ici b = Ici (b - a) :=\n  ext fun _x => sub_le_iff_le_add.symm\n\n"}
{"name":"Set.preimage_add_const_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Ioi b)) (Set.Ioi (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_add_const_Ioi : (fun x => x + a) ⁻¹' Ioi b = Ioi (b - a) :=\n  ext fun _x => sub_lt_iff_lt_add.symm\n\n"}
{"name":"Set.preimage_add_const_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Iic b)) (Set.Iic (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_add_const_Iic : (fun x => x + a) ⁻¹' Iic b = Iic (b - a) :=\n  ext fun _x => le_sub_iff_add_le.symm\n\n"}
{"name":"Set.preimage_add_const_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Iio b)) (Set.Iio (HSub.hSub b a))","decl":"@[simp]\ntheorem preimage_add_const_Iio : (fun x => x + a) ⁻¹' Iio b = Iio (b - a) :=\n  ext fun _x => lt_sub_iff_add_lt.symm\n\n"}
{"name":"Set.preimage_add_const_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Icc b c)) (Set.Icc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_add_const_Icc : (fun x => x + a) ⁻¹' Icc b c = Icc (b - a) (c - a) := by\n  simp [← Ici_inter_Iic]\n\n"}
{"name":"Set.preimage_add_const_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Ico b c)) (Set.Ico (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_add_const_Ico : (fun x => x + a) ⁻¹' Ico b c = Ico (b - a) (c - a) := by\n  simp [← Ici_inter_Iio]\n\n"}
{"name":"Set.preimage_add_const_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Ioc b c)) (Set.Ioc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_add_const_Ioc : (fun x => x + a) ⁻¹' Ioc b c = Ioc (b - a) (c - a) := by\n  simp [← Ioi_inter_Iic]\n\n"}
{"name":"Set.preimage_add_const_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.Ioo b c)) (Set.Ioo (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_add_const_Ioo : (fun x => x + a) ⁻¹' Ioo b c = Ioo (b - a) (c - a) := by\n  simp [← Ioi_inter_Iio]\n\n"}
{"name":"Set.preimage_sub_const_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Ici b)) (Set.Ici (HAdd.hAdd b a))","decl":"@[simp]\ntheorem preimage_sub_const_Ici : (fun x => x - a) ⁻¹' Ici b = Ici (b + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Ioi b)) (Set.Ioi (HAdd.hAdd b a))","decl":"@[simp]\ntheorem preimage_sub_const_Ioi : (fun x => x - a) ⁻¹' Ioi b = Ioi (b + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Iic b)) (Set.Iic (HAdd.hAdd b a))","decl":"@[simp]\ntheorem preimage_sub_const_Iic : (fun x => x - a) ⁻¹' Iic b = Iic (b + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Iio b)) (Set.Iio (HAdd.hAdd b a))","decl":"@[simp]\ntheorem preimage_sub_const_Iio : (fun x => x - a) ⁻¹' Iio b = Iio (b + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Icc b c)) (Set.Icc (HAdd.hAdd b a) (HAdd.hAdd c a))","decl":"@[simp]\ntheorem preimage_sub_const_Icc : (fun x => x - a) ⁻¹' Icc b c = Icc (b + a) (c + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Ico b c)) (Set.Ico (HAdd.hAdd b a) (HAdd.hAdd c a))","decl":"@[simp]\ntheorem preimage_sub_const_Ico : (fun x => x - a) ⁻¹' Ico b c = Ico (b + a) (c + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Ioc b c)) (Set.Ioc (HAdd.hAdd b a) (HAdd.hAdd c a))","decl":"@[simp]\ntheorem preimage_sub_const_Ioc : (fun x => x - a) ⁻¹' Ioc b c = Ioc (b + a) (c + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_sub_const_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.Ioo b c)) (Set.Ioo (HAdd.hAdd b a) (HAdd.hAdd c a))","decl":"@[simp]\ntheorem preimage_sub_const_Ioo : (fun x => x - a) ⁻¹' Ioo b c = Ioo (b + a) (c + a) := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_const_sub_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Ici b)) (Set.Iic (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Ici : (fun x => a - x) ⁻¹' Ici b = Iic (a - b) :=\n  ext fun _x => le_sub_comm\n\n"}
{"name":"Set.preimage_const_sub_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Iic b)) (Set.Ici (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Iic : (fun x => a - x) ⁻¹' Iic b = Ici (a - b) :=\n  ext fun _x => sub_le_comm\n\n"}
{"name":"Set.preimage_const_sub_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Ioi b)) (Set.Iio (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Ioi : (fun x => a - x) ⁻¹' Ioi b = Iio (a - b) :=\n  ext fun _x => lt_sub_comm\n\n"}
{"name":"Set.preimage_const_sub_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Iio b)) (Set.Ioi (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Iio : (fun x => a - x) ⁻¹' Iio b = Ioi (a - b) :=\n  ext fun _x => sub_lt_comm\n\n"}
{"name":"Set.preimage_const_sub_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Icc b c)) (Set.Icc (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Icc : (fun x => a - x) ⁻¹' Icc b c = Icc (a - c) (a - b) := by\n  simp [← Ici_inter_Iic, inter_comm]\n\n"}
{"name":"Set.preimage_const_sub_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Ico b c)) (Set.Ioc (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Ico : (fun x => a - x) ⁻¹' Ico b c = Ioc (a - c) (a - b) := by\n  simp [← Ioi_inter_Iic, ← Ici_inter_Iio, inter_comm]\n\n"}
{"name":"Set.preimage_const_sub_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Ioc b c)) (Set.Ico (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Ioc : (fun x => a - x) ⁻¹' Ioc b c = Ico (a - c) (a - b) := by\n  simp [← Ioi_inter_Iic, ← Ici_inter_Iio, inter_comm]\n\n"}
{"name":"Set.preimage_const_sub_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.Ioo b c)) (Set.Ioo (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem preimage_const_sub_Ioo : (fun x => a - x) ⁻¹' Ioo b c = Ioo (a - c) (a - b) := by\n  simp [← Ioi_inter_Iio, inter_comm]\n\n"}
{"name":"Set.image_const_add_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd a x) (Set.Iic b)) (Set.Iic (HAdd.hAdd a b))","decl":"theorem image_const_add_Iic : (fun x => a + x) '' Iic b = Iic (a + b) := by simp [add_comm]\n\n-- simp can prove this modulo `add_comm`\n"}
{"name":"Set.image_const_add_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd a x) (Set.Iio b)) (Set.Iio (HAdd.hAdd a b))","decl":"theorem image_const_add_Iio : (fun x => a + x) '' Iio b = Iio (a + b) := by simp [add_comm]\n\n"}
{"name":"Set.image_add_const_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd x a) (Set.Iic b)) (Set.Iic (HAdd.hAdd b a))","decl":"theorem image_add_const_Iic : (fun x => x + a) '' Iic b = Iic (b + a) := by simp\n\n"}
{"name":"Set.image_add_const_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd x a) (Set.Iio b)) (Set.Iio (HAdd.hAdd b a))","decl":"theorem image_add_const_Iio : (fun x => x + a) '' Iio b = Iio (b + a) := by simp\n\n"}
{"name":"Set.image_neg_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Set.image Neg.neg (Set.Ici a)) (Set.Iic (Neg.neg a))","decl":"theorem image_neg_Ici : Neg.neg '' Ici a = Iic (-a) := by simp\n\n"}
{"name":"Set.image_neg_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Set.image Neg.neg (Set.Iic a)) (Set.Ici (Neg.neg a))","decl":"theorem image_neg_Iic : Neg.neg '' Iic a = Ici (-a) := by simp\n\n"}
{"name":"Set.image_neg_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Set.image Neg.neg (Set.Ioi a)) (Set.Iio (Neg.neg a))","decl":"theorem image_neg_Ioi : Neg.neg '' Ioi a = Iio (-a) := by simp\n\n"}
{"name":"Set.image_neg_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na : α\n⊢ Eq (Set.image Neg.neg (Set.Iio a)) (Set.Ioi (Neg.neg a))","decl":"theorem image_neg_Iio : Neg.neg '' Iio a = Ioi (-a) := by simp\n\n"}
{"name":"Set.image_neg_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image Neg.neg (Set.Icc a b)) (Set.Icc (Neg.neg b) (Neg.neg a))","decl":"theorem image_neg_Icc : Neg.neg '' Icc a b = Icc (-b) (-a) := by simp\n\n"}
{"name":"Set.image_neg_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image Neg.neg (Set.Ico a b)) (Set.Ioc (Neg.neg b) (Neg.neg a))","decl":"theorem image_neg_Ico : Neg.neg '' Ico a b = Ioc (-b) (-a) := by simp\n\n"}
{"name":"Set.image_neg_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image Neg.neg (Set.Ioc a b)) (Set.Ico (Neg.neg b) (Neg.neg a))","decl":"theorem image_neg_Ioc : Neg.neg '' Ioc a b = Ico (-b) (-a) := by simp\n\n"}
{"name":"Set.image_neg_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image Neg.neg (Set.Ioo a b)) (Set.Ioo (Neg.neg b) (Neg.neg a))","decl":"theorem image_neg_Ioo : Neg.neg '' Ioo a b = Ioo (-b) (-a) := by simp\n\n"}
{"name":"Set.image_const_sub_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Ici b)) (Set.Iic (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Ici : (fun x => a - x) '' Ici b = Iic (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Iic b)) (Set.Ici (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Iic : (fun x => a - x) '' Iic b = Ici (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Ioi b)) (Set.Iio (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Ioi : (fun x => a - x) '' Ioi b = Iio (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Iio b)) (Set.Ioi (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Iio : (fun x => a - x) '' Iio b = Ioi (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Icc b c)) (Set.Icc (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Icc : (fun x => a - x) '' Icc b c = Icc (a - c) (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Ico b c)) (Set.Ioc (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Ico : (fun x => a - x) '' Ico b c = Ioc (a - c) (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Ioc b c)) (Set.Ico (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Ioc : (fun x => a - x) '' Ioc b c = Ico (a - c) (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_const_sub_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.Ioo b c)) (Set.Ioo (HSub.hSub a c) (HSub.hSub a b))","decl":"@[simp]\ntheorem image_const_sub_Ioo : (fun x => a - x) '' Ioo b c = Ioo (a - c) (a - b) := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_sub_const_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Ici b)) (Set.Ici (HSub.hSub b a))","decl":"@[simp]\ntheorem image_sub_const_Ici : (fun x => x - a) '' Ici b = Ici (b - a) := by simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Iic b)) (Set.Iic (HSub.hSub b a))","decl":"@[simp]\ntheorem image_sub_const_Iic : (fun x => x - a) '' Iic b = Iic (b - a) := by simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Ioi b)) (Set.Ioi (HSub.hSub b a))","decl":"@[simp]\ntheorem image_sub_const_Ioi : (fun x => x - a) '' Ioi b = Ioi (b - a) := by simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Iio b)) (Set.Iio (HSub.hSub b a))","decl":"@[simp]\ntheorem image_sub_const_Iio : (fun x => x - a) '' Iio b = Iio (b - a) := by simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Icc b c)) (Set.Icc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem image_sub_const_Icc : (fun x => x - a) '' Icc b c = Icc (b - a) (c - a) := by\n  simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Ico b c)) (Set.Ico (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem image_sub_const_Ico : (fun x => x - a) '' Ico b c = Ico (b - a) (c - a) := by\n  simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Ioc b c)) (Set.Ioc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem image_sub_const_Ioc : (fun x => x - a) '' Ioc b c = Ioc (b - a) (c - a) := by\n  simp [sub_eq_neg_add]\n\n"}
{"name":"Set.image_sub_const_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.Ioo b c)) (Set.Ioo (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem image_sub_const_Ioo : (fun x => x - a) '' Ioo b c = Ioo (b - a) (c - a) := by\n  simp [sub_eq_neg_add]\n\n"}
{"name":"Set.Iic_add_bij","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Set.BijOn (fun x => HAdd.hAdd x a) (Set.Iic b) (Set.Iic (HAdd.hAdd b a))","decl":"theorem Iic_add_bij : BijOn (· + a) (Iic b) (Iic (b + a)) :=\n  image_add_const_Iic a b ▸ (add_left_injective _).injOn.bijOn_image\n\n"}
{"name":"Set.Iio_add_bij","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Set.BijOn (fun x => HAdd.hAdd x a) (Set.Iio b) (Set.Iio (HAdd.hAdd b a))","decl":"theorem Iio_add_bij : BijOn (· + a) (Iio b) (Iio (b + a)) :=\n  image_add_const_Iio a b ▸ (add_left_injective _).injOn.bijOn_image\n\n"}
{"name":"Set.inv_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedCommGroup α\na b : α\n⊢ Eq (Inv.inv (Set.uIcc a b)) (Set.uIcc (Inv.inv a) (Inv.inv b))","decl":"@[to_additive (attr := simp)]\nlemma inv_uIcc (a b : α) : [[a, b]]⁻¹ = [[a⁻¹, b⁻¹]] := by\n  simp only [uIcc, inv_Icc, inv_sup, inv_inf]\n\n"}
{"name":"Set.neg_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.uIcc a b)) (Set.uIcc (Neg.neg a) (Neg.neg b))","decl":"@[to_additive (attr := simp)]\nlemma inv_uIcc (a b : α) : [[a, b]]⁻¹ = [[a⁻¹, b⁻¹]] := by\n  simp only [uIcc, inv_Icc, inv_sup, inv_inf]\n\n"}
{"name":"Set.preimage_const_add_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Set.uIcc b c)) (Set.uIcc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_const_add_uIcc : (fun x => a + x) ⁻¹' [[b, c]] = [[b - a, c - a]] := by\n  simp only [← Icc_min_max, preimage_const_add_Icc, min_sub_sub_right, max_sub_sub_right]\n\n"}
{"name":"Set.preimage_add_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Set.uIcc b c)) (Set.uIcc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem preimage_add_const_uIcc : (fun x => x + a) ⁻¹' [[b, c]] = [[b - a, c - a]] := by\n  simpa only [add_comm] using preimage_const_add_uIcc a b c\n\n"}
{"name":"Set.preimage_neg_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Eq (Neg.neg (Set.uIcc a b)) (Set.uIcc (Neg.neg a) (Neg.neg b))","decl":"@[deprecated neg_uIcc (since := \"2024-11-23\")]\ntheorem preimage_neg_uIcc : -[[a, b]] = [[-a, -b]] := by\n  simp only [← Icc_min_max, neg_Icc, min_neg_neg, max_neg_neg]\n\n"}
{"name":"Set.preimage_sub_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub x a) (Set.uIcc b c)) (Set.uIcc (HAdd.hAdd b a) (HAdd.hAdd c a))","decl":"@[simp]\ntheorem preimage_sub_const_uIcc : (fun x => x - a) ⁻¹' [[b, c]] = [[b + a, c + a]] := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"Set.preimage_const_sub_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.preimage (fun x => HSub.hSub a x) (Set.uIcc b c)) (Set.uIcc (HSub.hSub a b) (HSub.hSub a c))","decl":"@[simp]\ntheorem preimage_const_sub_uIcc : (fun x => a - x) ⁻¹' [[b, c]] = [[a - b, a - c]] := by\n  simp_rw [← Icc_min_max, preimage_const_sub_Icc]\n  simp only [sub_eq_add_neg, min_add_add_left, max_add_add_left, min_neg_neg, max_neg_neg]\n\n-- simp can prove this modulo `add_comm`\n"}
{"name":"Set.image_const_add_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd a x) (Set.uIcc b c)) (Set.uIcc (HAdd.hAdd a b) (HAdd.hAdd a c))","decl":"theorem image_const_add_uIcc : (fun x => a + x) '' [[b, c]] = [[a + b, a + c]] := by simp [add_comm]\n\n"}
{"name":"Set.image_add_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd x a) (Set.uIcc b c)) (Set.uIcc (HAdd.hAdd b a) (HAdd.hAdd c a))","decl":"theorem image_add_const_uIcc : (fun x => x + a) '' [[b, c]] = [[b + a, c + a]] := by simp\n\n"}
{"name":"Set.image_const_sub_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub a x) (Set.uIcc b c)) (Set.uIcc (HSub.hSub a b) (HSub.hSub a c))","decl":"@[simp]\ntheorem image_const_sub_uIcc : (fun x => a - x) '' [[b, c]] = [[a - b, a - c]] := by\n  have := image_comp (fun x => a + x) fun x => -x; dsimp [Function.comp_def] at this\n  simp [sub_eq_add_neg, this, add_comm]\n\n"}
{"name":"Set.image_sub_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\n⊢ Eq (Set.image (fun x => HSub.hSub x a) (Set.uIcc b c)) (Set.uIcc (HSub.hSub b a) (HSub.hSub c a))","decl":"@[simp]\ntheorem image_sub_const_uIcc : (fun x => x - a) '' [[b, c]] = [[b - a, c - a]] := by\n  simp [sub_eq_add_neg, add_comm]\n\n"}
{"name":"Set.image_neg_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b : α\n⊢ Eq (Set.image Neg.neg (Set.uIcc a b)) (Set.uIcc (Neg.neg a) (Neg.neg b))","decl":"theorem image_neg_uIcc : Neg.neg '' [[a, b]] = [[-a, -b]] := by simp\n\n"}
{"name":"Set.abs_sub_le_of_uIcc_subset_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c d : α\nh : HasSubset.Subset (Set.uIcc c d) (Set.uIcc a b)\n⊢ LE.le (abs (HSub.hSub d c)) (abs (HSub.hSub b a))","decl":"/-- If `[c, d]` is a subinterval of `[a, b]`, then the distance between `c` and `d` is less than or\nequal to that of `a` and `b` -/\ntheorem abs_sub_le_of_uIcc_subset_uIcc (h : [[c, d]] ⊆ [[a, b]]) : |d - c| ≤ |b - a| := by\n  rw [← max_sub_min_eq_abs, ← max_sub_min_eq_abs]\n  rw [uIcc_subset_uIcc_iff_le] at h\n  exact sub_le_sub h.2 h.1\n\n"}
{"name":"Set.abs_sub_left_of_mem_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nh : Membership.mem (Set.uIcc a b) c\n⊢ LE.le (abs (HSub.hSub c a)) (abs (HSub.hSub b a))","decl":"/-- If `c ∈ [a, b]`, then the distance between `a` and `c` is less than or equal to\nthat of `a` and `b`  -/\ntheorem abs_sub_left_of_mem_uIcc (h : c ∈ [[a, b]]) : |c - a| ≤ |b - a| :=\n  abs_sub_le_of_uIcc_subset_uIcc <| uIcc_subset_uIcc_left h\n\n"}
{"name":"Set.abs_sub_right_of_mem_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\na b c : α\nh : Membership.mem (Set.uIcc a b) c\n⊢ LE.le (abs (HSub.hSub b c)) (abs (HSub.hSub b a))","decl":"/-- If `x ∈ [a, b]`, then the distance between `c` and `b` is less than or equal to\nthat of `a` and `b`  -/\ntheorem abs_sub_right_of_mem_uIcc (h : c ∈ [[a, b]]) : |b - c| ≤ |b - a| :=\n  abs_sub_le_of_uIcc_subset_uIcc <| uIcc_subset_uIcc_right h\n\n"}
{"name":"Set.preimage_mul_const_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Iio a)) (Set.Iio (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Iio (a : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Iio a = Iio (a / c) :=\n  ext fun _x => (lt_div_iff₀ h).symm\n\n"}
{"name":"Set.preimage_mul_const_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ioi a)) (Set.Ioi (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ioi (a : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Ioi a = Ioi (a / c) :=\n  ext fun _x => (div_lt_iff₀ h).symm\n\n"}
{"name":"Set.preimage_mul_const_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Iic a)) (Set.Iic (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Iic (a : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Iic a = Iic (a / c) :=\n  ext fun _x => (le_div_iff₀ h).symm\n\n"}
{"name":"Set.preimage_mul_const_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ici a)) (Set.Ici (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ici (a : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Ici a = Ici (a / c) :=\n  ext fun _x => (div_le_iff₀ h).symm\n\n"}
{"name":"Set.preimage_mul_const_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ioo a b)) (Set.Ioo (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_mul_const_Ioo (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Ioo a b = Ioo (a / c) (b / c) := by simp [← Ioi_inter_Iio, h]\n\n"}
{"name":"Set.preimage_mul_const_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ioc a b)) (Set.Ioc (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_mul_const_Ioc (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Ioc a b = Ioc (a / c) (b / c) := by simp [← Ioi_inter_Iic, h]\n\n"}
{"name":"Set.preimage_mul_const_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ico a b)) (Set.Ico (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_mul_const_Ico (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Ico a b = Ico (a / c) (b / c) := by simp [← Ici_inter_Iio, h]\n\n"}
{"name":"Set.preimage_mul_const_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Icc a b)) (Set.Icc (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_mul_const_Icc (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) ⁻¹' Icc a b = Icc (a / c) (b / c) := by simp [← Ici_inter_Iic, h]\n\n"}
{"name":"Set.preimage_mul_const_Iio_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Iio a)) (Set.Ioi (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Iio_of_neg (a : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Iio a = Ioi (a / c) :=\n  ext fun _x => (div_lt_iff_of_neg h).symm\n\n"}
{"name":"Set.preimage_mul_const_Ioi_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ioi a)) (Set.Iio (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ioi_of_neg (a : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Ioi a = Iio (a / c) :=\n  ext fun _x => (lt_div_iff_of_neg h).symm\n\n"}
{"name":"Set.preimage_mul_const_Iic_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Iic a)) (Set.Ici (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Iic_of_neg (a : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Iic a = Ici (a / c) :=\n  ext fun _x => (div_le_iff_of_neg h).symm\n\n"}
{"name":"Set.preimage_mul_const_Ici_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ici a)) (Set.Iic (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ici_of_neg (a : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Ici a = Iic (a / c) :=\n  ext fun _x => (le_div_iff_of_neg h).symm\n\n"}
{"name":"Set.preimage_mul_const_Ioo_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ioo a b)) (Set.Ioo (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ioo_of_neg (a b : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Ioo a b = Ioo (b / c) (a / c) := by simp [← Ioi_inter_Iio, h, inter_comm]\n\n"}
{"name":"Set.preimage_mul_const_Ioc_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ioc a b)) (Set.Ico (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ioc_of_neg (a b : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Ioc a b = Ico (b / c) (a / c) := by\n  simp [← Ioi_inter_Iic, ← Ici_inter_Iio, h, inter_comm]\n\n"}
{"name":"Set.preimage_mul_const_Ico_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Ico a b)) (Set.Ioc (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Ico_of_neg (a b : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Ico a b = Ioc (b / c) (a / c) := by\n  simp [← Ici_inter_Iio, ← Ioi_inter_Iic, h, inter_comm]\n\n"}
{"name":"Set.preimage_mul_const_Icc_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul x c) (Set.Icc a b)) (Set.Icc (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_mul_const_Icc_of_neg (a b : α) {c : α} (h : c < 0) :\n    (fun x => x * c) ⁻¹' Icc a b = Icc (b / c) (a / c) := by simp [← Ici_inter_Iic, h, inter_comm]\n\n"}
{"name":"Set.preimage_const_mul_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Iio a)) (Set.Iio (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Iio (a : α) {c : α} (h : 0 < c) : (c * ·) ⁻¹' Iio a = Iio (a / c) :=\n  ext fun _x => (lt_div_iff₀' h).symm\n\n"}
{"name":"Set.preimage_const_mul_Ioi","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ioi a)) (Set.Ioi (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ioi (a : α) {c : α} (h : 0 < c) : (c * ·) ⁻¹' Ioi a = Ioi (a / c) :=\n  ext fun _x => (div_lt_iff₀' h).symm\n\n"}
{"name":"Set.preimage_const_mul_Iic","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Iic a)) (Set.Iic (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Iic (a : α) {c : α} (h : 0 < c) : (c * ·) ⁻¹' Iic a = Iic (a / c) :=\n  ext fun _x => (le_div_iff₀' h).symm\n\n"}
{"name":"Set.preimage_const_mul_Ici","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ici a)) (Set.Ici (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ici (a : α) {c : α} (h : 0 < c) : (c * ·) ⁻¹' Ici a = Ici (a / c) :=\n  ext fun _x => (div_le_iff₀' h).symm\n\n"}
{"name":"Set.preimage_const_mul_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ioo a b)) (Set.Ioo (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_const_mul_Ioo (a b : α) {c : α} (h : 0 < c) :\n    (c * ·) ⁻¹' Ioo a b = Ioo (a / c) (b / c) := by simp [← Ioi_inter_Iio, h]\n\n"}
{"name":"Set.preimage_const_mul_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ioc a b)) (Set.Ioc (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_const_mul_Ioc (a b : α) {c : α} (h : 0 < c) :\n    (c * ·) ⁻¹' Ioc a b = Ioc (a / c) (b / c) := by simp [← Ioi_inter_Iic, h]\n\n"}
{"name":"Set.preimage_const_mul_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ico a b)) (Set.Ico (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_const_mul_Ico (a b : α) {c : α} (h : 0 < c) :\n    (c * ·) ⁻¹' Ico a b = Ico (a / c) (b / c) := by simp [← Ici_inter_Iio, h]\n\n"}
{"name":"Set.preimage_const_mul_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Icc a b)) (Set.Icc (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[simp]\ntheorem preimage_const_mul_Icc (a b : α) {c : α} (h : 0 < c) :\n    (c * ·) ⁻¹' Icc a b = Icc (a / c) (b / c) := by simp [← Ici_inter_Iic, h]\n\n"}
{"name":"Set.preimage_const_mul_Iio_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Iio a)) (Set.Ioi (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Iio_of_neg (a : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Iio a = Ioi (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Iio_of_neg a h\n\n"}
{"name":"Set.preimage_const_mul_Ioi_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ioi a)) (Set.Iio (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ioi_of_neg (a : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Ioi a = Iio (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Ioi_of_neg a h\n\n"}
{"name":"Set.preimage_const_mul_Iic_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Iic a)) (Set.Ici (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Iic_of_neg (a : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Iic a = Ici (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Iic_of_neg a h\n\n"}
{"name":"Set.preimage_const_mul_Ici_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ici a)) (Set.Iic (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ici_of_neg (a : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Ici a = Iic (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Ici_of_neg a h\n\n"}
{"name":"Set.preimage_const_mul_Ioo_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ioo a b)) (Set.Ioo (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ioo_of_neg (a b : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Ioo a b = Ioo (b / c) (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Ioo_of_neg a b h\n\n"}
{"name":"Set.preimage_const_mul_Ioc_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ioc a b)) (Set.Ico (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ioc_of_neg (a b : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Ioc a b = Ico (b / c) (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Ioc_of_neg a b h\n\n"}
{"name":"Set.preimage_const_mul_Ico_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Ico a b)) (Set.Ioc (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Ico_of_neg (a b : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Ico a b = Ioc (b / c) (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Ico_of_neg a b h\n\n"}
{"name":"Set.preimage_const_mul_Icc_of_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt c 0\n⊢ Eq (Set.preimage (fun x => HMul.hMul c x) (Set.Icc a b)) (Set.Icc (HDiv.hDiv b c) (HDiv.hDiv a c))","decl":"@[simp]\ntheorem preimage_const_mul_Icc_of_neg (a b : α) {c : α} (h : c < 0) :\n    (c * ·) ⁻¹' Icc a b = Icc (b / c) (a / c) := by\n  simpa only [mul_comm] using preimage_mul_const_Icc_of_neg a b h\n\n"}
{"name":"Set.preimage_mul_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : Ne a 0\nb c : α\n⊢ Eq (Set.preimage (fun x => HMul.hMul x a) (Set.uIcc b c)) (Set.uIcc (HDiv.hDiv b a) (HDiv.hDiv c a))","decl":"@[simp]\ntheorem preimage_mul_const_uIcc (ha : a ≠ 0) (b c : α) :\n    (· * a) ⁻¹' [[b, c]] = [[b / a, c / a]] :=\n  (lt_or_gt_of_ne ha).elim\n    (fun h => by\n      simp [← Icc_min_max, h, h.le, min_div_div_right_of_nonpos, max_div_div_right_of_nonpos])\n    fun ha : 0 < a => by simp [← Icc_min_max, ha, ha.le, min_div_div_right, max_div_div_right]\n\n"}
{"name":"Set.preimage_const_mul_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : Ne a 0\nb c : α\n⊢ Eq (Set.preimage (fun x => HMul.hMul a x) (Set.uIcc b c)) (Set.uIcc (HDiv.hDiv b a) (HDiv.hDiv c a))","decl":"@[simp]\ntheorem preimage_const_mul_uIcc (ha : a ≠ 0) (b c : α) :\n    (a * ·) ⁻¹' [[b, c]] = [[b / a, c / a]] := by\n  simp only [← preimage_mul_const_uIcc ha, mul_comm]\n\n"}
{"name":"Set.preimage_div_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : Ne a 0\nb c : α\n⊢ Eq (Set.preimage (fun x => HDiv.hDiv x a) (Set.uIcc b c)) (Set.uIcc (HMul.hMul b a) (HMul.hMul c a))","decl":"@[simp]\ntheorem preimage_div_const_uIcc (ha : a ≠ 0) (b c : α) :\n    (fun x => x / a) ⁻¹' [[b, c]] = [[b * a, c * a]] := by\n  simp only [div_eq_mul_inv, preimage_mul_const_uIcc (inv_ne_zero ha), inv_inv]\n\n"}
{"name":"Set.preimage_const_mul_Ioi_or_Iio","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nhb : Ne a 0\nU V : Set α\nhU : Membership.mem (setOf fun s => Exists fun a => Or (Eq s (Set.Ioi a)) (Eq s (Set.Iio a))) U\nhV : Eq V (Set.preimage (HMul.hMul a) U)\n⊢ Membership.mem (setOf fun s => Exists fun a => Or (Eq s (Set.Ioi a)) (Eq s (Set.Iio a))) V","decl":"lemma preimage_const_mul_Ioi_or_Iio (hb : a ≠ 0) {U V : Set α}\n    (hU : U ∈ {s | ∃ a, s = Ioi a ∨ s = Iio a}) (hV : V = HMul.hMul a ⁻¹' U) :\n    V ∈ {s | ∃ a, s = Ioi a ∨ s = Iio a} := by\n  obtain ⟨aU, (haU | haU)⟩ := hU <;>\n  simp only [hV, haU, mem_setOf_eq] <;>\n  use a⁻¹ * aU <;>\n  rcases lt_or_gt_of_ne hb with (hb | hb)\n  · right; rw [Set.preimage_const_mul_Ioi_of_neg _ hb, div_eq_inv_mul]\n  · left; rw [Set.preimage_const_mul_Ioi _ hb, div_eq_inv_mul]\n  · left; rw [Set.preimage_const_mul_Iio_of_neg _ hb, div_eq_inv_mul]\n  · right; rw [Set.preimage_const_mul_Iio _ hb, div_eq_inv_mul]\n\n"}
{"name":"Set.image_mul_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\n⊢ Eq (Set.image (fun x => HMul.hMul x a) (Set.uIcc b c)) (Set.uIcc (HMul.hMul b a) (HMul.hMul c a))","decl":"@[simp]\ntheorem image_mul_const_uIcc (a b c : α) : (· * a) '' [[b, c]] = [[b * a, c * a]] :=\n  if ha : a = 0 then by simp [ha]\n  else calc\n    (fun x => x * a) '' [[b, c]] = (· * a⁻¹) ⁻¹' [[b, c]] :=\n      (Units.mk0 a ha).mulRight.image_eq_preimage _\n    _ = (fun x => x / a) ⁻¹' [[b, c]] := by simp only [div_eq_mul_inv]\n    _ = [[b * a, c * a]] := preimage_div_const_uIcc ha _ _\n\n"}
{"name":"Set.image_const_mul_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\n⊢ Eq (Set.image (fun x => HMul.hMul a x) (Set.uIcc b c)) (Set.uIcc (HMul.hMul a b) (HMul.hMul a c))","decl":"@[simp]\ntheorem image_const_mul_uIcc (a b c : α) : (a * ·) '' [[b, c]] = [[a * b, a * c]] := by\n  simpa only [mul_comm] using image_mul_const_uIcc a b c\n\n"}
{"name":"Set.image_div_const_uIcc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\n⊢ Eq (Set.image (fun x => HDiv.hDiv x a) (Set.uIcc b c)) (Set.uIcc (HDiv.hDiv b a) (HDiv.hDiv c a))","decl":"@[simp]\ntheorem image_div_const_uIcc (a b c : α) : (fun x => x / a) '' [[b, c]] = [[b / a, c / a]] := by\n  simp only [div_eq_mul_inv, image_mul_const_uIcc]\n\n"}
{"name":"Set.image_mul_right_Icc'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.image (fun x => HMul.hMul x c) (Set.Icc a b)) (Set.Icc (HMul.hMul a c) (HMul.hMul b c))","decl":"theorem image_mul_right_Icc' (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) '' Icc a b = Icc (a * c) (b * c) :=\n  ((Units.mk0 c h.ne').mulRight.image_eq_preimage _).trans (by simp [h, division_def])\n\n"}
{"name":"Set.image_mul_right_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nhab : LE.le a b\nhc : LE.le 0 c\n⊢ Eq (Set.image (fun x => HMul.hMul x c) (Set.Icc a b)) (Set.Icc (HMul.hMul a c) (HMul.hMul b c))","decl":"theorem image_mul_right_Icc {a b c : α} (hab : a ≤ b) (hc : 0 ≤ c) :\n    (fun x => x * c) '' Icc a b = Icc (a * c) (b * c) := by\n  cases eq_or_lt_of_le hc\n  · subst c\n    simp [(nonempty_Icc.2 hab).image_const]\n  exact image_mul_right_Icc' a b ‹0 < c›\n\n"}
{"name":"Set.image_mul_left_Icc'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c : α\n⊢ Eq (Set.image (fun x => HMul.hMul a x) (Set.Icc b c)) (Set.Icc (HMul.hMul a b) (HMul.hMul a c))","decl":"theorem image_mul_left_Icc' {a : α} (h : 0 < a) (b c : α) :\n    (a * ·) '' Icc b c = Icc (a * b) (a * c) := by\n  convert image_mul_right_Icc' b c h using 1 <;> simp only [mul_comm _ a]\n\n"}
{"name":"Set.image_mul_left_Icc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nha : LE.le 0 a\nhbc : LE.le b c\n⊢ Eq (Set.image (fun x => HMul.hMul a x) (Set.Icc b c)) (Set.Icc (HMul.hMul a b) (HMul.hMul a c))","decl":"theorem image_mul_left_Icc {a b c : α} (ha : 0 ≤ a) (hbc : b ≤ c) :\n    (a * ·) '' Icc b c = Icc (a * b) (a * c) := by\n  convert image_mul_right_Icc hbc ha using 1 <;> simp only [mul_comm _ a]\n\n"}
{"name":"Set.image_mul_right_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.image (fun x => HMul.hMul x c) (Set.Ioo a b)) (Set.Ioo (HMul.hMul a c) (HMul.hMul b c))","decl":"theorem image_mul_right_Ioo (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) '' Ioo a b = Ioo (a * c) (b * c) :=\n  ((Units.mk0 c h.ne').mulRight.image_eq_preimage _).trans (by simp [h, division_def])\n\n"}
{"name":"Set.image_mul_left_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c : α\n⊢ Eq (Set.image (fun x => HMul.hMul a x) (Set.Ioo b c)) (Set.Ioo (HMul.hMul a b) (HMul.hMul a c))","decl":"theorem image_mul_left_Ioo {a : α} (h : 0 < a) (b c : α) :\n    (a * ·) '' Ioo b c = Ioo (a * b) (a * c) := by\n  convert image_mul_right_Ioo b c h using 1 <;> simp only [mul_comm _ a]\n\n"}
{"name":"Set.image_mul_right_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.image (fun x => HMul.hMul x c) (Set.Ico a b)) (Set.Ico (HMul.hMul a c) (HMul.hMul b c))","decl":"theorem image_mul_right_Ico (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) '' Ico a b = Ico (a * c) (b * c) :=\n  ((Units.mk0 c h.ne').mulRight.image_eq_preimage _).trans (by simp [h, division_def])\n\n"}
{"name":"Set.image_mul_left_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c : α\n⊢ Eq (Set.image (fun x => HMul.hMul a x) (Set.Ico b c)) (Set.Ico (HMul.hMul a b) (HMul.hMul a c))","decl":"theorem image_mul_left_Ico {a : α} (h : 0 < a) (b c : α) :\n    (a * ·) '' Ico b c = Ico (a * b) (a * c) := by\n  convert image_mul_right_Ico b c h using 1 <;> simp only [mul_comm _ a]\n\n"}
{"name":"Set.image_mul_right_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na b c : α\nh : LT.lt 0 c\n⊢ Eq (Set.image (fun x => HMul.hMul x c) (Set.Ioc a b)) (Set.Ioc (HMul.hMul a c) (HMul.hMul b c))","decl":"theorem image_mul_right_Ioc (a b : α) {c : α} (h : 0 < c) :\n    (fun x => x * c) '' Ioc a b = Ioc (a * c) (b * c) :=\n  ((Units.mk0 c h.ne').mulRight.image_eq_preimage _).trans (by simp [h, division_def])\n\n"}
{"name":"Set.image_mul_left_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c : α\n⊢ Eq (Set.image (fun x => HMul.hMul a x) (Set.Ioc b c)) (Set.Ioc (HMul.hMul a b) (HMul.hMul a c))","decl":"theorem image_mul_left_Ioc {a : α} (h : 0 < a) (b c : α) :\n    (a * ·) '' Ioc b c = Ioc (a * b) (a * c) := by\n  convert image_mul_right_Ioc b c h using 1 <;> simp only [mul_comm _ a]\n\n"}
{"name":"Set.inv_Ioo_0_left","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : LT.lt 0 a\n⊢ Eq (Inv.inv (Set.Ioo 0 a)) (Set.Ioi (Inv.inv a))","decl":"/-- The (pre)image under `inv` of `Ioo 0 a` is `Ioi a⁻¹`. -/\ntheorem inv_Ioo_0_left {a : α} (ha : 0 < a) : (Ioo 0 a)⁻¹ = Ioi a⁻¹ := by\n  ext x\n  exact ⟨fun h ↦ inv_lt_of_inv_lt₀ (inv_pos.1 h.1) h.2,\n         fun h ↦ ⟨inv_pos.2 <| (inv_pos.2 ha).trans h, inv_lt_of_inv_lt₀ ha h⟩⟩\n\n"}
{"name":"Set.inv_Ioo_0_right","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : LT.lt a 0\n⊢ Eq (Inv.inv (Set.Ioo a 0)) (Set.Iio (Inv.inv a))","decl":"/-- The (pre)image under `inv` of `Ioo a 0` is `Iio a⁻¹`. -/\ntheorem inv_Ioo_0_right {a : α} (ha : a < 0) : (Ioo a 0)⁻¹ = Iio a⁻¹ := by\n  ext x\n  refine ⟨fun h ↦ (lt_inv_of_neg (inv_neg''.1 h.2) ha).2 h.1, fun h ↦ ?_⟩\n  have h' := (h.trans (inv_neg''.2 ha))\n  exact ⟨(lt_inv_of_neg ha h').2 h, inv_neg''.2 h'⟩\n\n"}
{"name":"Set.inv_Ioi₀","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : LT.lt 0 a\n⊢ Eq (Inv.inv (Set.Ioi a)) (Set.Ioo 0 (Inv.inv a))","decl":"theorem inv_Ioi₀ {a : α} (ha : 0 < a) : (Ioi a)⁻¹ = Ioo 0 a⁻¹ := by\n  rw [inv_eq_iff_eq_inv, inv_Ioo_0_left (inv_pos.2 ha), inv_inv]\n\n"}
{"name":"Set.inv_Iio₀","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nha : LT.lt a 0\n⊢ Eq (Inv.inv (Set.Iio a)) (Set.Ioo (Inv.inv a) 0)","decl":"theorem inv_Iio₀ {a : α} (ha : a < 0) : (Iio a)⁻¹ = Ioo a⁻¹ 0 := by\n  rw [inv_eq_iff_eq_inv, inv_Ioo_0_right (inv_neg''.2 ha), inv_inv]\n\n"}
{"name":"Set.image_const_mul_Ioi_zero","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"k : Type u_2\ninst✝ : LinearOrderedField k\nx : k\nhx : LT.lt 0 x\n⊢ Eq (Set.image (fun y => HMul.hMul x y) (Set.Ioi 0)) (Set.Ioi 0)","decl":"theorem image_const_mul_Ioi_zero {k : Type*} [LinearOrderedField k] {x : k} (hx : 0 < x) :\n    (fun y => x * y) '' Ioi (0 : k) = Ioi 0 := by\n  have := (Units.mk0 x hx.ne').mulLeft.image_eq_preimage (Ioi 0)\n  simp at this\n  simp_all\n\n"}
{"name":"Set.image_affine_Icc'","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c d : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd (HMul.hMul a x) b) (Set.Icc c d)) (Set.Icc (HAdd.hAdd (HMul.hMul a c) b) (HAdd.hAdd (HMul.hMul a d) b))","decl":"@[simp]\ntheorem image_affine_Icc' {a : α} (h : 0 < a) (b c d : α) :\n    (a * · + b) '' Icc c d = Icc (a * c + b) (a * d + b) := by\n  suffices (· + b) '' ((a * ·) '' Icc c d) = Icc (a * c + b) (a * d + b) by\n    rwa [Set.image_image] at this\n  rw [image_mul_left_Icc' h, image_add_const_Icc]\n\n"}
{"name":"Set.image_affine_Ico","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c d : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd (HMul.hMul a x) b) (Set.Ico c d)) (Set.Ico (HAdd.hAdd (HMul.hMul a c) b) (HAdd.hAdd (HMul.hMul a d) b))","decl":"@[simp]\ntheorem image_affine_Ico {a : α} (h : 0 < a) (b c d : α) :\n    (a * · + b) '' Ico c d = Ico (a * c + b) (a * d + b) := by\n  suffices (· + b) '' ((a * ·) '' Ico c d) = Ico (a * c + b) (a * d + b) by\n    rwa [Set.image_image] at this\n  rw [image_mul_left_Ico h, image_add_const_Ico]\n\n"}
{"name":"Set.image_affine_Ioc","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c d : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd (HMul.hMul a x) b) (Set.Ioc c d)) (Set.Ioc (HAdd.hAdd (HMul.hMul a c) b) (HAdd.hAdd (HMul.hMul a d) b))","decl":"@[simp]\ntheorem image_affine_Ioc {a : α} (h : 0 < a) (b c d : α) :\n    (a * · + b) '' Ioc c d = Ioc (a * c + b) (a * d + b) := by\n  suffices (· + b) '' ((a * ·) '' Ioc c d) = Ioc (a * c + b) (a * d + b) by\n    rwa [Set.image_image] at this\n  rw [image_mul_left_Ioc h, image_add_const_Ioc]\n\n"}
{"name":"Set.image_affine_Ioo","module":"Mathlib.Algebra.Order.Group.Pointwise.Interval","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedField α\na : α\nh : LT.lt 0 a\nb c d : α\n⊢ Eq (Set.image (fun x => HAdd.hAdd (HMul.hMul a x) b) (Set.Ioo c d)) (Set.Ioo (HAdd.hAdd (HMul.hMul a c) b) (HAdd.hAdd (HMul.hMul a d) b))","decl":"@[simp]\ntheorem image_affine_Ioo {a : α} (h : 0 < a) (b c d : α) :\n    (a * · + b) '' Ioo c d = Ioo (a * c + b) (a * d + b) := by\n  suffices (· + b) '' ((a * ·) '' Ioo c d) = Ioo (a * c + b) (a * d + b) by\n    rwa [Set.image_image] at this\n  rw [image_mul_left_Ioo h, image_add_const_Ioo]\n\n"}
