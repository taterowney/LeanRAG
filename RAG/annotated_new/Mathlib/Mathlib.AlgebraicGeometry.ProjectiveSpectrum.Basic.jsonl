{"name":"AlgebraicGeometry.Proj.mem_basicOpen","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nx : ↑↑(AlgebraicGeometry.Proj 𝒜).toPresheafedSpace\n⊢ Iff (Membership.mem (AlgebraicGeometry.Proj.basicOpen 𝒜 f) x) (Not (Membership.mem x.asHomogeneousIdeal f))","decl":"@[simp]\ntheorem mem_basicOpen (x : Proj 𝒜) :\n    x ∈ basicOpen 𝒜 f ↔ f ∉ x.asHomogeneousIdeal :=\n  Iff.rfl\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpen_one","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (AlgebraicGeometry.Proj.basicOpen 𝒜 1) Top.top","decl":"@[simp] theorem basicOpen_one : basicOpen 𝒜 1 = ⊤ := ProjectiveSpectrum.basicOpen_one ..\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpen_zero","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (AlgebraicGeometry.Proj.basicOpen 𝒜 0) Bot.bot","decl":"@[simp] theorem basicOpen_zero : basicOpen 𝒜 0 = ⊥ := ProjectiveSpectrum.basicOpen_zero ..\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpen_pow","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (AlgebraicGeometry.Proj.basicOpen 𝒜 (HPow.hPow f n)) (AlgebraicGeometry.Proj.basicOpen 𝒜 f)","decl":"@[simp] theorem basicOpen_pow (n) (hn : 0 < n) : basicOpen 𝒜 (f ^ n) = basicOpen 𝒜 f :=\n  ProjectiveSpectrum.basicOpen_pow 𝒜 f n hn\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpen_mul","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf g : A\n⊢ Eq (AlgebraicGeometry.Proj.basicOpen 𝒜 (HMul.hMul f g)) (Min.min (AlgebraicGeometry.Proj.basicOpen 𝒜 f) (AlgebraicGeometry.Proj.basicOpen 𝒜 g))","decl":"theorem basicOpen_mul : basicOpen 𝒜 (f * g) = basicOpen 𝒜 f ⊓ basicOpen 𝒜 g :=\n  ProjectiveSpectrum.basicOpen_mul ..\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpen_mono","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf g : A\nhfg : Dvd.dvd f g\n⊢ LE.le (AlgebraicGeometry.Proj.basicOpen 𝒜 g) (AlgebraicGeometry.Proj.basicOpen 𝒜 f)","decl":"theorem basicOpen_mono (hfg : f ∣ g) : basicOpen 𝒜 g ≤ basicOpen 𝒜 f :=\n  (hfg.choose_spec ▸ basicOpen_mul 𝒜 f _).trans_le inf_le_left\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpen_eq_iSup_proj","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\n⊢ Eq (AlgebraicGeometry.Proj.basicOpen 𝒜 f) (iSup fun i => AlgebraicGeometry.Proj.basicOpen 𝒜 ((GradedAlgebra.proj 𝒜 i) f))","decl":"theorem basicOpen_eq_iSup_proj (f : A) :\n    basicOpen 𝒜 f = ⨆ i : ℕ, basicOpen 𝒜 (GradedAlgebra.proj 𝒜 i f) :=\n  ProjectiveSpectrum.basicOpen_eq_union_of_projection ..\n\n"}
{"name":"AlgebraicGeometry.Proj.isBasis_basicOpen","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\n⊢ TopologicalSpace.Opens.IsBasis (Set.range (AlgebraicGeometry.Proj.basicOpen 𝒜))","decl":"theorem isBasis_basicOpen :\n    TopologicalSpace.Opens.IsBasis (Set.range (basicOpen 𝒜)) := by\n  delta TopologicalSpace.Opens.IsBasis\n  convert ProjectiveSpectrum.isTopologicalBasis_basic_opens 𝒜\n  exact (Set.range_comp _ _).symm\n\n"}
{"name":"AlgebraicGeometry.Proj.iSup_basicOpen_eq_top","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nι : Type u_3\nf : ι → A\nhf : LE.le (HomogeneousIdeal.irrelevant 𝒜).toIdeal (Ideal.span (Set.range f))\n⊢ Eq (iSup fun i => AlgebraicGeometry.Proj.basicOpen 𝒜 (f i)) Top.top","decl":"lemma iSup_basicOpen_eq_top {ι : Type*} (f : ι → A)\n    (hf : (HomogeneousIdeal.irrelevant 𝒜).toIdeal ≤ Ideal.span (Set.range f)) :\n    ⨆ i, Proj.basicOpen 𝒜 (f i) = ⊤ := by\n  classical\n  refine top_le_iff.mp fun x hx ↦ TopologicalSpace.Opens.mem_iSup.mpr ?_\n  by_contra! H\n  simp only [mem_basicOpen, Decidable.not_not] at H\n  refine x.not_irrelevant_le (hf.trans ?_)\n  rwa [Ideal.span_le, Set.range_subset_iff]\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpenToSpec_app_top","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\n⊢ Eq (AlgebraicGeometry.Scheme.Hom.app (AlgebraicGeometry.Proj.basicOpenToSpec 𝒜 f) Top.top) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Scheme.ΓSpecIso (CommRingCat.of (HomogeneousLocalization.Away 𝒜 f))).hom (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.awayToSection 𝒜 f) (AlgebraicGeometry.Proj.basicOpen 𝒜 f).topIso.inv))","decl":"lemma basicOpenToSpec_app_top :\n    (basicOpenToSpec 𝒜 f).app ⊤ = (Scheme.ΓSpecIso _).hom ≫ awayToSection 𝒜 f ≫\n      (basicOpen 𝒜 f).topIso.inv := by\n  rw [basicOpenToSpec]\n  simp only [Scheme.comp_coeBase, TopologicalSpace.Opens.map_comp_obj,\n    TopologicalSpace.Opens.map_top, Scheme.comp_app, Scheme.Opens.topIso_inv, eqToHom_op]\n  erw [Scheme.comp_app]\n  simp\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpenIsoSpec_hom","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\n⊢ Eq (AlgebraicGeometry.Proj.basicOpenIsoSpec 𝒜 f).hom (AlgebraicGeometry.Proj.basicOpenToSpec 𝒜 f)","decl":"/-- The canonical isomorphism `Proj A |_ D₊(f) ≅ Spec (A_f)₀`\nwhen `f` is homogeneous of positive degree. -/\n@[simps! (config := .lemmasOnly) hom]\nnoncomputable\ndef basicOpenIsoSpec : (basicOpen 𝒜 f).toScheme ≅ Spec (.of (Away 𝒜 f)) :=\n  have : IsIso (basicOpenToSpec 𝒜 f) := by\n    apply (isIso_iff_of_reflects_iso _ Scheme.forgetToLocallyRingedSpace).mp ?_\n    convert ProjectiveSpectrum.Proj.isIso_toSpec 𝒜 f f_deg hm using 1\n    refine Eq.trans ?_ (ΓSpec.locallyRingedSpaceAdjunction.homEquiv_apply _ _ _).symm\n    dsimp [basicOpenToSpec, Scheme.Opens.toSpecΓ]\n    simp only [eqToHom_op, Category.assoc, ← Spec.map_comp]\n    rfl\n  asIso (basicOpenToSpec 𝒜 f)\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpenIsoAway_hom","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\n⊢ Eq (AlgebraicGeometry.Proj.basicOpenIsoAway 𝒜 f).hom (AlgebraicGeometry.Proj.awayToSection 𝒜 f)","decl":"/-- The canonical isomorphism `(A_f)₀ ≅ Γ(Proj A, D₊(f))`\nwhen `f` is homogeneous of positive degree. -/\n@[simps! (config := .lemmasOnly) hom]\nnoncomputable\ndef basicOpenIsoAway : CommRingCat.of (Away 𝒜 f) ≅ Γ(Proj 𝒜, basicOpen 𝒜 f) :=\n  have : IsIso (awayToSection 𝒜 f) := by\n    have := basicOpenToSpec_app_top 𝒜 f\n    rw [← Iso.inv_comp_eq, Iso.eq_comp_inv] at this\n    rw [← this, ← basicOpenIsoSpec_hom 𝒜 f f_deg hm]\n    infer_instance\n  asIso (awayToSection 𝒜 f)\n\n"}
{"name":"AlgebraicGeometry.Proj.opensRange_awayι","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\n⊢ Eq (sorryAx (Unit → (AlgebraicGeometry.Proj 𝒜).Opens) Bool.true (Function.const Lean.Name Unit.unit ((((((((((Lean.Name.anonymous.num 148).num 4).num 148).num 40).num 4).num 41).str \"_sorry\").str \"_@\").str \"_hyg\").num 1364))) (AlgebraicGeometry.Proj.basicOpen 𝒜 f)","decl":"lemma opensRange_awayι :\n    (Proj.awayι 𝒜 f f_deg hm).opensRange = Proj.basicOpen 𝒜 f :=\n  (Scheme.Hom.opensRange_comp_of_isIso _ _).trans (basicOpen 𝒜 f).opensRange_ι\n\n"}
{"name":"AlgebraicGeometry.Proj.isAffineOpen_basicOpen","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nm : Nat\nf_deg : Membership.mem (𝒜 m) f\nhm : LT.lt 0 m\n⊢ AlgebraicGeometry.IsAffineOpen (AlgebraicGeometry.Proj.basicOpen 𝒜 f)","decl":"include f_deg hm in\nlemma isAffineOpen_basicOpen : IsAffineOpen (basicOpen 𝒜 f) := by\n  rw [← opensRange_awayι 𝒜 f f_deg hm]\n  exact isAffineOpen_opensRange (awayι _ _ _ _)\n\n"}
{"name":"AlgebraicGeometry.Proj.awayMap_awayToSection","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nm' : Nat\ng : A\ng_deg : Membership.mem (𝒜 m') g\nx : A\nhx : Eq x (HMul.hMul f g)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CommRingCat.ofHom (HomogeneousLocalization.awayMap 𝒜 g_deg hx)) (AlgebraicGeometry.Proj.awayToSection 𝒜 x)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.awayToSection 𝒜 f) ((AlgebraicGeometry.Proj 𝒜).presheaf.map (CategoryTheory.homOfLE ⋯).op))","decl":"@[reassoc]\nlemma awayMap_awayToSection  :\n    CommRingCat.ofHom (awayMap 𝒜 g_deg hx) ≫ awayToSection 𝒜 x =\n      awayToSection 𝒜 f ≫ (Proj 𝒜).presheaf.map (homOfLE (basicOpen_mono _ _ _ ⟨_, hx⟩)).op := by\n  ext a\n  apply Subtype.ext\n  ext ⟨i, hi⟩\n  obtain ⟨⟨n, a, ⟨b, hb'⟩, i, rfl : _ = b⟩, rfl⟩ := mk_surjective a\n  simp only [homOfLE_leOfHom, CommRingCat.hom_comp, RingHom.coe_comp, Function.comp_apply]\n  erw [ProjectiveSpectrum.Proj.awayToSection_apply]\n  rw [CommRingCat.hom_ofHom, val_awayMap_mk, Localization.mk_eq_mk', IsLocalization.map_mk',\n    ← Localization.mk_eq_mk']\n  refine Localization.mk_eq_mk_iff.mpr ?_\n  rw [Localization.r_iff_exists]\n  use 1\n  simp only [OneMemClass.coe_one, RingHom.id_apply, one_mul, hx]\n  ring\n\n"}
{"name":"AlgebraicGeometry.Proj.awayMap_awayToSection_assoc","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nm' : Nat\ng : A\ng_deg : Membership.mem (𝒜 m') g\nx : A\nhx : Eq x (HMul.hMul f g)\nZ : CommRingCat\nh : Quiver.Hom ((AlgebraicGeometry.Proj 𝒜).presheaf.obj { unop := AlgebraicGeometry.Proj.basicOpen 𝒜 x }) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CommRingCat.ofHom (HomogeneousLocalization.awayMap 𝒜 g_deg hx)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.awayToSection 𝒜 x) h)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.awayToSection 𝒜 f) (CategoryTheory.CategoryStruct.comp ((AlgebraicGeometry.Proj 𝒜).presheaf.map (CategoryTheory.homOfLE ⋯).op) h))","decl":"@[reassoc]\nlemma awayMap_awayToSection  :\n    CommRingCat.ofHom (awayMap 𝒜 g_deg hx) ≫ awayToSection 𝒜 x =\n      awayToSection 𝒜 f ≫ (Proj 𝒜).presheaf.map (homOfLE (basicOpen_mono _ _ _ ⟨_, hx⟩)).op := by\n  ext a\n  apply Subtype.ext\n  ext ⟨i, hi⟩\n  obtain ⟨⟨n, a, ⟨b, hb'⟩, i, rfl : _ = b⟩, rfl⟩ := mk_surjective a\n  simp only [homOfLE_leOfHom, CommRingCat.hom_comp, RingHom.coe_comp, Function.comp_apply]\n  erw [ProjectiveSpectrum.Proj.awayToSection_apply]\n  rw [CommRingCat.hom_ofHom, val_awayMap_mk, Localization.mk_eq_mk', IsLocalization.map_mk',\n    ← Localization.mk_eq_mk']\n  refine Localization.mk_eq_mk_iff.mpr ?_\n  rw [Localization.r_iff_exists]\n  use 1\n  simp only [OneMemClass.coe_one, RingHom.id_apply, one_mul, hx]\n  ring\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpenToSpec_SpecMap_awayMap","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nm' : Nat\ng : A\ng_deg : Membership.mem (𝒜 m') g\nx : A\nhx : Eq x (HMul.hMul f g)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.basicOpenToSpec 𝒜 x) (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (HomogeneousLocalization.awayMap 𝒜 g_deg hx)))) (CategoryTheory.CategoryStruct.comp ((AlgebraicGeometry.Proj 𝒜).homOfLE ⋯) (AlgebraicGeometry.Proj.basicOpenToSpec 𝒜 f))","decl":"@[reassoc]\nlemma basicOpenToSpec_SpecMap_awayMap :\n    basicOpenToSpec 𝒜 x ≫ Spec.map (CommRingCat.ofHom (awayMap 𝒜 g_deg hx)) =\n      (Proj 𝒜).homOfLE (basicOpen_mono _ _ _ ⟨_, hx⟩) ≫ basicOpenToSpec 𝒜 f := by\n  rw [basicOpenToSpec, Category.assoc, ← Spec.map_comp, awayMap_awayToSection,\n    Spec.map_comp, Scheme.Opens.toSpecΓ_SpecMap_map_assoc]\n  rfl\n\n"}
{"name":"AlgebraicGeometry.Proj.basicOpenToSpec_SpecMap_awayMap_assoc","module":"Mathlib.AlgebraicGeometry.ProjectiveSpectrum.Basic","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing A\ninst✝¹ : Algebra R A\n𝒜 : Nat → Submodule R A\ninst✝ : GradedAlgebra 𝒜\nf : A\nm' : Nat\ng : A\ng_deg : Membership.mem (𝒜 m') g\nx : A\nhx : Eq x (HMul.hMul f g)\nZ : AlgebraicGeometry.Scheme\nh : Quiver.Hom (AlgebraicGeometry.Spec (CommRingCat.of (HomogeneousLocalization.Away 𝒜 f))) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.basicOpenToSpec 𝒜 x) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.map (CommRingCat.ofHom (HomogeneousLocalization.awayMap 𝒜 g_deg hx))) h)) (CategoryTheory.CategoryStruct.comp ((AlgebraicGeometry.Proj 𝒜).homOfLE ⋯) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Proj.basicOpenToSpec 𝒜 f) h))","decl":"@[reassoc]\nlemma basicOpenToSpec_SpecMap_awayMap :\n    basicOpenToSpec 𝒜 x ≫ Spec.map (CommRingCat.ofHom (awayMap 𝒜 g_deg hx)) =\n      (Proj 𝒜).homOfLE (basicOpen_mono _ _ _ ⟨_, hx⟩) ≫ basicOpenToSpec 𝒜 f := by\n  rw [basicOpenToSpec, Category.assoc, ← Spec.map_comp, awayMap_awayToSection,\n    Spec.map_comp, Scheme.Opens.toSpecΓ_SpecMap_map_assoc]\n  rfl\n\n"}
