{"name":"Complex.integerComplement_eq","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"⊢ Eq Complex.integerComplement (setOf fun z => Not (Exists fun n => Eq (↑n) z))","decl":"lemma integerComplement_eq : ℂ_ℤ = {z : ℂ | ¬ ∃ (n : ℤ), n = z} := rfl\n\n"}
{"name":"Complex.integerComplement.mem_iff","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"x : Complex\n⊢ Iff (Membership.mem Complex.integerComplement x) (Not (Exists fun n => Eq (↑n) x))","decl":"lemma integerComplement.mem_iff {x : ℂ} : x ∈ ℂ_ℤ ↔ ¬ ∃ (n : ℤ), n = x := Iff.rfl\n\n"}
{"name":"Complex.UpperHalfPlane.coe_mem_integerComplement","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"z : UpperHalfPlane\n⊢ Membership.mem Complex.integerComplement ↑z","decl":"lemma UpperHalfPlane.coe_mem_integerComplement (z : ℍ) : ↑z ∈ ℂ_ℤ :=\n  not_exists.mpr fun x hx ↦ ne_int z x hx.symm\n\n"}
{"name":"Complex.integerComplement.add_coe_int_mem","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"x : Complex\na : Int\n⊢ Iff (Membership.mem Complex.integerComplement (HAdd.hAdd x ↑a)) (Membership.mem Complex.integerComplement x)","decl":"lemma integerComplement.add_coe_int_mem {x : ℂ} (a : ℤ) : x + (a : ℂ) ∈ ℂ_ℤ ↔ x ∈ ℂ_ℤ := by\n  simp only [mem_iff, not_iff_not]\n  exact ⟨(Exists.elim · fun n hn ↦ ⟨n - a, by simp [hn]⟩),\n    (Exists.elim · fun n hn ↦ ⟨n + a, by simp [hn]⟩)⟩\n\n"}
{"name":"Complex.integerComplement.ne_zero","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"x : Complex\nhx : Membership.mem Complex.integerComplement x\n⊢ Ne x 0","decl":"lemma integerComplement.ne_zero {x : ℂ} (hx : x ∈ ℂ_ℤ) : x ≠ 0 :=\n  fun hx' ↦ hx ⟨0, by exact_mod_cast hx'.symm⟩\n\n"}
{"name":"Complex.integerComplement_add_ne_zero","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"x : Complex\nhx : Membership.mem Complex.integerComplement x\na : Int\n⊢ Ne (HAdd.hAdd x ↑a) 0","decl":"lemma integerComplement_add_ne_zero {x : ℂ} (hx : x ∈ ℂ_ℤ) (a : ℤ) : x + (a : ℂ)  ≠ 0 :=\n  integerComplement.ne_zero ((integerComplement.add_coe_int_mem a).mpr hx)\n\n"}
{"name":"Complex.integerComplement.ne_one","module":"Mathlib.Analysis.Complex.IntegerCompl","initialProofState":"x : Complex\nhx : Membership.mem Complex.integerComplement x\n⊢ Ne x 1","decl":"lemma integerComplement.ne_one {x : ℂ} (hx : x ∈ ℂ_ℤ): x ≠ 1 :=\n  fun hx' ↦ hx ⟨1, by exact_mod_cast hx'.symm⟩\n\n"}
