{"name":"LSeries.abscissaOfAbsConv_congr","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f g : Nat → Complex\nh : ∀ {n : Nat}, Ne n 0 → Eq (f n) (g n)\n⊢ Eq (LSeries.abscissaOfAbsConv f) (LSeries.abscissaOfAbsConv g)","decl":"lemma LSeries.abscissaOfAbsConv_congr {f g : ℕ → ℂ} (h : ∀ {n}, n ≠ 0 → f n = g n) :\n    abscissaOfAbsConv f = abscissaOfAbsConv g :=\n  congr_arg sInf <| congr_arg _ <| Set.ext fun x ↦ LSeriesSummable_congr x h\n\n"}
{"name":"LSeries.abscissaOfAbsConv_congr'","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f g : Nat → Complex\nh : Filter.atTop.EventuallyEq f g\n⊢ Eq (LSeries.abscissaOfAbsConv f) (LSeries.abscissaOfAbsConv g)","decl":"open Filter in\n/-- If `f` and `g` agree on large `n : ℕ`, then their `LSeries` have the same\nabscissa of absolute convergence. -/\nlemma LSeries.abscissaOfAbsConv_congr' {f g : ℕ → ℂ} (h : f =ᶠ[atTop] g) :\n    abscissaOfAbsConv f = abscissaOfAbsConv g :=\n  congr_arg sInf <| congr_arg _ <| Set.ext fun x ↦ LSeriesSummable_congr' x h\n\n"}
{"name":"LSeriesSummable_of_abscissaOfAbsConv_lt_re","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\ns : Complex\nhs : LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re\n⊢ LSeriesSummable f s","decl":"lemma LSeriesSummable_of_abscissaOfAbsConv_lt_re {f : ℕ → ℂ} {s : ℂ}\n    (hs : abscissaOfAbsConv f < s.re) : LSeriesSummable f s := by\n  obtain ⟨y, hy, hys⟩ : ∃ a : ℝ, LSeriesSummable f a ∧ a < s.re := by\n    simpa [abscissaOfAbsConv, sInf_lt_iff] using hs\n  exact hy.of_re_le_re <| ofReal_re y ▸ hys.le\n\n"}
{"name":"LSeriesSummable_lt_re_of_abscissaOfAbsConv_lt_re","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\ns : Complex\nhs : LT.lt (LSeries.abscissaOfAbsConv f) ↑s.re\n⊢ Exists fun x => And (LT.lt x s.re) (LSeriesSummable f ↑x)","decl":"lemma LSeriesSummable_lt_re_of_abscissaOfAbsConv_lt_re {f : ℕ → ℂ} {s : ℂ}\n    (hs : abscissaOfAbsConv f < s.re) :\n    ∃ x : ℝ, x < s.re ∧ LSeriesSummable f x := by\n  obtain ⟨x, hx₁, hx₂⟩ := EReal.exists_between_coe_real hs\n  exact ⟨x, by simpa using hx₂, LSeriesSummable_of_abscissaOfAbsConv_lt_re hx₁⟩\n\n"}
{"name":"LSeriesSummable.abscissaOfAbsConv_le","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\ns : Complex\nh : LSeriesSummable f s\n⊢ LE.le (LSeries.abscissaOfAbsConv f) ↑s.re","decl":"lemma LSeriesSummable.abscissaOfAbsConv_le {f : ℕ → ℂ} {s : ℂ} (h : LSeriesSummable f s) :\n    abscissaOfAbsConv f ≤ s.re :=\n  sInf_le <| by simpa using h.of_re_le_re (by simp)\n\n"}
{"name":"LSeries.abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\nx : Real\nh : ∀ (y : Real), LT.lt x y → LSeriesSummable f ↑y\n⊢ LE.le (LSeries.abscissaOfAbsConv f) ↑x","decl":"lemma LSeries.abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable {f : ℕ → ℂ} {x : ℝ}\n    (h : ∀ y : ℝ, x < y → LSeriesSummable f y) :\n    abscissaOfAbsConv f ≤ x := by\n  refine sInf_le_iff.mpr fun y hy ↦ le_of_forall_gt_imp_ge_of_dense fun a ↦ ?_\n  replace hy : ∀ (a : ℝ), LSeriesSummable f a → y ≤ a := by simpa [mem_lowerBounds] using hy\n  cases a with\n  | h_real a₀ => exact_mod_cast fun ha ↦ hy a₀ (h a₀ ha)\n  | h_bot => simp\n  | h_top => simp\n\n"}
{"name":"LSeries.abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable'","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\nx : EReal\nh : ∀ (y : Real), LT.lt x ↑y → LSeriesSummable f ↑y\n⊢ LE.le (LSeries.abscissaOfAbsConv f) x","decl":"lemma LSeries.abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable' {f : ℕ → ℂ} {x : EReal}\n    (h : ∀ y : ℝ, x < y → LSeriesSummable f y) :\n    abscissaOfAbsConv f ≤ x := by\n  cases x with\n  | h_real => exact abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable <| mod_cast h\n  | h_top => exact le_top\n  | h_bot =>\n    refine le_of_eq <| sInf_eq_bot.mpr fun y hy ↦ ?_\n    cases y with\n    | h_bot => simp at hy\n    | h_real y => exact ⟨_,  ⟨_, h _ <| EReal.bot_lt_coe _, rfl⟩, mod_cast sub_one_lt y⟩\n    | h_top => exact ⟨_, ⟨_, h _ <| EReal.bot_lt_coe 0, rfl⟩, EReal.zero_lt_top⟩\n\n"}
{"name":"LSeries.abscissaOfAbsConv_le_of_le_const_mul_rpow","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\nx : Real\nh : Exists fun C => ∀ (n : Nat), Ne n 0 → LE.le (Norm.norm (f n)) (HMul.hMul C (HPow.hPow (↑n) x))\n⊢ LE.le (LSeries.abscissaOfAbsConv f) (HAdd.hAdd (↑x) 1)","decl":"/-- If `‖f n‖` is bounded by a constant times `n^x`, then the abscissa of absolute convergence\nof `f` is bounded by `x + 1`. -/\nlemma LSeries.abscissaOfAbsConv_le_of_le_const_mul_rpow {f : ℕ → ℂ} {x : ℝ}\n    (h : ∃ C, ∀ n ≠ 0, ‖f n‖ ≤ C * n ^ x) : abscissaOfAbsConv f ≤ x + 1 := by\n  rw [show x = x + 1 - 1 by ring] at h\n  by_contra! H\n  obtain ⟨y, hy₁, hy₂⟩ := EReal.exists_between_coe_real H\n  exact (LSeriesSummable_of_le_const_mul_rpow (s := y) (EReal.coe_lt_coe_iff.mp hy₁) h\n    |>.abscissaOfAbsConv_le.trans_lt hy₂).false\n\n"}
{"name":"LSeries.abscissaOfAbsConv_le_of_isBigO_rpow","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\nx : Real\nh : Asymptotics.IsBigO Filter.atTop f fun n => HPow.hPow (↑n) x\n⊢ LE.le (LSeries.abscissaOfAbsConv f) (HAdd.hAdd (↑x) 1)","decl":"open Filter in\n/-- If `‖f n‖` is `O(n^x)`, then the abscissa of absolute convergence\nof `f` is bounded by `x + 1`. -/\nlemma LSeries.abscissaOfAbsConv_le_of_isBigO_rpow {f : ℕ → ℂ} {x : ℝ}\n    (h : f =O[atTop] fun n ↦ (n : ℝ) ^ x) :\n    abscissaOfAbsConv f ≤ x + 1 := by\n  rw [show x = x + 1 - 1 by ring] at h\n  by_contra! H\n  obtain ⟨y, hy₁, hy₂⟩ := EReal.exists_between_coe_real H\n  exact (LSeriesSummable_of_isBigO_rpow (s := y) (EReal.coe_lt_coe_iff.mp hy₁) h\n    |>.abscissaOfAbsConv_le.trans_lt hy₂).false\n\n"}
{"name":"LSeries.abscissaOfAbsConv_le_of_le_const","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\nh : Exists fun C => ∀ (n : Nat), Ne n 0 → LE.le (Norm.norm (f n)) C\n⊢ LE.le (LSeries.abscissaOfAbsConv f) 1","decl":"/-- If `f` is bounded, then the abscissa of absolute convergence of `f` is bounded above by `1`. -/\nlemma LSeries.abscissaOfAbsConv_le_of_le_const {f : ℕ → ℂ} (h : ∃ C, ∀ n ≠ 0, ‖f n‖ ≤ C) :\n    abscissaOfAbsConv f ≤ 1 := by\n  simpa using abscissaOfAbsConv_le_of_le_const_mul_rpow (x := 0) (by simpa using h)\n\n"}
{"name":"LSeries.abscissaOfAbsConv_le_one_of_isBigO_one","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Complex\nh : Asymptotics.IsBigO Filter.atTop f fun x => 1\n⊢ LE.le (LSeries.abscissaOfAbsConv f) 1","decl":"open Filter in\n/-- If `f` is `O(1)`, then the abscissa of absolute convergence of `f` is bounded above by `1`. -/\nlemma LSeries.abscissaOfAbsConv_le_one_of_isBigO_one {f : ℕ → ℂ} (h : f =O[atTop] fun _ ↦ (1 : ℝ)) :\n    abscissaOfAbsConv f ≤ 1 := by\n  simpa using abscissaOfAbsConv_le_of_isBigO_rpow (x := 0) (by simpa using h)\n\n"}
{"name":"LSeries.summable_real_of_abscissaOfAbsConv_lt","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"f : Nat → Real\nx : Real\nh : LT.lt (LSeries.abscissaOfAbsConv fun x => ↑(f x)) ↑x\n⊢ Summable fun n => HDiv.hDiv (f n) (HPow.hPow (↑n) x)","decl":"/-- If `f` is real-valued and `x` is strictly greater than the abscissa of absolute convergence\nof `f`, then the real series `∑' n, f n / n ^ x` converges. -/\nlemma LSeries.summable_real_of_abscissaOfAbsConv_lt {f : ℕ → ℝ} {x : ℝ}\n    (h : abscissaOfAbsConv (f ·) < x) :\n    Summable fun n : ℕ ↦ f n / (n : ℝ) ^ x := by\n  have aux : term (f ·) x = fun n ↦ ↑(if n = 0 then 0 else f n / (n : ℝ) ^ x) := by\n    ext n\n    simp [term_def, apply_ite ((↑) : ℝ → ℂ), ofReal_cpow n.cast_nonneg]\n  have := LSeriesSummable_of_abscissaOfAbsConv_lt_re (ofReal_re x ▸ h)\n  simp only [LSeriesSummable, aux, summable_ofReal] at this\n  refine this.congr_cofinite ?_\n  filter_upwards [(Set.finite_singleton 0).compl_mem_cofinite] with n hn\n    using if_neg (by simpa using hn)\n\n"}
{"name":"LSeries.abscissaOfAbsConv_binop_le","module":"Mathlib.NumberTheory.LSeries.Convergence","initialProofState":"F : (Nat → Complex) → (Nat → Complex) → Nat → Complex\nhF : ∀ {f g : Nat → Complex} {s : Complex}, LSeriesSummable f s → LSeriesSummable g s → LSeriesSummable (F f g) s\nf g : Nat → Complex\n⊢ LE.le (LSeries.abscissaOfAbsConv (F f g)) (Max.max (LSeries.abscissaOfAbsConv f) (LSeries.abscissaOfAbsConv g))","decl":"/-- If `F` is a binary operation on `ℕ → ℂ` with the property that the `LSeries` of `F f g`\nconverges whenever the `LSeries` of `f` and `g` do, then the abscissa of absolute convergence\nof `F f g` is at most the maximum of the abscissa of absolute convergence of `f`\nand that of `g`. -/\nlemma LSeries.abscissaOfAbsConv_binop_le {F : (ℕ → ℂ) → (ℕ → ℂ) → (ℕ → ℂ)}\n    (hF : ∀ {f g s}, LSeriesSummable f s → LSeriesSummable g s → LSeriesSummable (F f g) s)\n    (f g : ℕ → ℂ) :\n    abscissaOfAbsConv (F f g) ≤ max (abscissaOfAbsConv f) (abscissaOfAbsConv g) := by\n  refine abscissaOfAbsConv_le_of_forall_lt_LSeriesSummable' fun x hx ↦  hF ?_ ?_\n  · exact LSeriesSummable_of_abscissaOfAbsConv_lt_re <|\n      (ofReal_re x).symm ▸ (le_max_left ..).trans_lt hx\n  · exact LSeriesSummable_of_abscissaOfAbsConv_lt_re <|\n      (ofReal_re x).symm ▸ (le_max_right ..).trans_lt hx\n"}
