{"name":"MeasureTheory.aemeasurable_of_exist_almost_disjoint_supersets","module":"Mathlib.MeasureTheory.Function.AEMeasurableOrder","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_2\ninst✝⁶ : CompleteLinearOrder β\ninst✝⁵ : DenselyOrdered β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : OrderTopology β\ninst✝² : SecondCountableTopology β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\ns : Set β\ns_count : s.Countable\ns_dense : Dense s\nf : α → β\nh : ∀ (p : β), Membership.mem s p → ∀ (q : β), Membership.mem s q → LT.lt p q → Exists fun u => Exists fun v => And (MeasurableSet u) (And (MeasurableSet v) (And (HasSubset.Subset (setOf fun x => LT.lt (f x) p) u) (And (HasSubset.Subset (setOf fun x => LT.lt q (f x)) v) (Eq (μ (Inter.inter u v)) 0))))\n⊢ AEMeasurable f μ","decl":"/-- If a function `f : α → β` is such that the level sets `{f < p}` and `{q < f}` have measurable\nsupersets which are disjoint up to measure zero when `p < q`, then `f` is almost-everywhere\nmeasurable. It is even enough to have this for `p` and `q` in a countable dense set. -/\ntheorem MeasureTheory.aemeasurable_of_exist_almost_disjoint_supersets {α : Type*}\n    {m : MeasurableSpace α} (μ : Measure α) {β : Type*} [CompleteLinearOrder β] [DenselyOrdered β]\n    [TopologicalSpace β] [OrderTopology β] [SecondCountableTopology β] [MeasurableSpace β]\n    [BorelSpace β] (s : Set β) (s_count : s.Countable) (s_dense : Dense s) (f : α → β)\n    (h : ∀ p ∈ s, ∀ q ∈ s, p < q → ∃ u v, MeasurableSet u ∧ MeasurableSet v ∧\n      { x | f x < p } ⊆ u ∧ { x | q < f x } ⊆ v ∧ μ (u ∩ v) = 0) :\n    AEMeasurable f μ := by\n  classical\n  haveI : Encodable s := s_count.toEncodable\n  have h' : ∀ p q, ∃ u v, MeasurableSet u ∧ MeasurableSet v ∧\n      { x | f x < p } ⊆ u ∧ { x | q < f x } ⊆ v ∧ (p ∈ s → q ∈ s → p < q → μ (u ∩ v) = 0) := by\n    intro p q\n    by_cases H : p ∈ s ∧ q ∈ s ∧ p < q\n    · rcases h p H.1 q H.2.1 H.2.2 with ⟨u, v, hu, hv, h'u, h'v, hμ⟩\n      exact ⟨u, v, hu, hv, h'u, h'v, fun _ _ _ => hμ⟩\n    · refine\n        ⟨univ, univ, MeasurableSet.univ, MeasurableSet.univ, subset_univ _, subset_univ _,\n          fun ps qs pq => ?_⟩\n      simp only [not_and] at H\n      exact (H ps qs pq).elim\n  choose! u v huv using h'\n  let u' : β → Set α := fun p => ⋂ q ∈ s ∩ Ioi p, u p q\n  have u'_meas : ∀ i, MeasurableSet (u' i) := by\n    intro i\n    exact MeasurableSet.biInter (s_count.mono inter_subset_left) fun b _ => (huv i b).1\n  let f' : α → β := fun x => ⨅ i : s, piecewise (u' i) (fun _ => (i : β)) (fun _ => (⊤ : β)) x\n  have f'_meas : Measurable f' := by fun_prop (disch := aesop)\n  let t := ⋃ (p : s) (q : ↥(s ∩ Ioi p)), u' p ∩ v p q\n  have μt : μ t ≤ 0 :=\n    calc\n      μ t ≤ ∑' (p : s) (q : ↥(s ∩ Ioi p)), μ (u' p ∩ v p q) := by\n        refine (measure_iUnion_le _).trans ?_\n        refine ENNReal.tsum_le_tsum fun p => ?_\n        haveI := (s_count.mono (s.inter_subset_left (t := Ioi ↑p))).to_subtype\n        apply measure_iUnion_le\n      _ ≤ ∑' (p : s) (q : ↥(s ∩ Ioi p)), μ (u p q ∩ v p q) := by\n        gcongr with p q\n        exact biInter_subset_of_mem q.2\n      _ = ∑' (p : s) (_ : ↥(s ∩ Ioi p)), (0 : ℝ≥0∞) := by\n        congr\n        ext1 p\n        congr\n        ext1 q\n        exact (huv p q).2.2.2.2 p.2 q.2.1 q.2.2\n      _ = 0 := by simp only [tsum_zero]\n  have ff' : ∀ᵐ x ∂μ, f x = f' x := by\n    have : ∀ᵐ x ∂μ, x ∉ t := by\n      have : μ t = 0 := le_antisymm μt bot_le\n      change μ _ = 0\n      convert this\n      ext y\n      simp only [not_exists, exists_prop, mem_setOf_eq, mem_compl_iff, not_not_mem]\n    filter_upwards [this] with x hx\n    apply (iInf_eq_of_forall_ge_of_forall_gt_exists_lt _ _).symm\n    · intro i\n      by_cases H : x ∈ u' i\n      swap\n      · simp only [H, le_top, not_false_iff, piecewise_eq_of_not_mem]\n      simp only [H, piecewise_eq_of_mem]\n      contrapose! hx\n      obtain ⟨r, ⟨xr, rq⟩, rs⟩ : ∃ r, r ∈ Ioo (i : β) (f x) ∩ s :=\n        dense_iff_inter_open.1 s_dense (Ioo i (f x)) isOpen_Ioo (nonempty_Ioo.2 hx)\n      have A : x ∈ v i r := (huv i r).2.2.2.1 rq\n      refine mem_iUnion.2 ⟨i, ?_⟩\n      refine mem_iUnion.2 ⟨⟨r, ⟨rs, xr⟩⟩, ?_⟩\n      exact ⟨H, A⟩\n    · intro q hq\n      obtain ⟨r, ⟨xr, rq⟩, rs⟩ : ∃ r, r ∈ Ioo (f x) q ∩ s :=\n        dense_iff_inter_open.1 s_dense (Ioo (f x) q) isOpen_Ioo (nonempty_Ioo.2 hq)\n      refine ⟨⟨r, rs⟩, ?_⟩\n      have A : x ∈ u' r := mem_biInter fun i _ => (huv r i).2.2.1 xr\n      simp only [A, rq, piecewise_eq_of_mem, Subtype.coe_mk]\n  exact ⟨f', f'_meas, ff'⟩\n\n"}
{"name":"ENNReal.aemeasurable_of_exist_almost_disjoint_supersets","module":"Mathlib.MeasureTheory.Function.AEMeasurableOrder","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → ENNReal\nh : ∀ (p q : NNReal), LT.lt p q → Exists fun u => Exists fun v => And (MeasurableSet u) (And (MeasurableSet v) (And (HasSubset.Subset (setOf fun x => LT.lt (f x) ↑p) u) (And (HasSubset.Subset (setOf fun x => LT.lt (↑q) (f x)) v) (Eq (μ (Inter.inter u v)) 0))))\n⊢ AEMeasurable f μ","decl":"/-- If a function `f : α → ℝ≥0∞` is such that the level sets `{f < p}` and `{q < f}` have measurable\nsupersets which are disjoint up to measure zero when `p` and `q` are finite numbers satisfying\n`p < q`, then `f` is almost-everywhere measurable. -/\ntheorem ENNReal.aemeasurable_of_exist_almost_disjoint_supersets {α : Type*} {m : MeasurableSpace α}\n    (μ : Measure α) (f : α → ℝ≥0∞)\n    (h : ∀ (p : ℝ≥0) (q : ℝ≥0), p < q →\n      ∃ u v, MeasurableSet u ∧ MeasurableSet v ∧\n        { x | f x < p } ⊆ u ∧ { x | (q : ℝ≥0∞) < f x } ⊆ v ∧ μ (u ∩ v) = 0) :\n    AEMeasurable f μ := by\n  obtain ⟨s, s_count, s_dense, _, s_top⟩ :\n    ∃ s : Set ℝ≥0∞, s.Countable ∧ Dense s ∧ 0 ∉ s ∧ ∞ ∉ s :=\n    ENNReal.exists_countable_dense_no_zero_top\n  have I : ∀ x ∈ s, x ≠ ∞ := fun x xs hx => s_top (hx ▸ xs)\n  apply MeasureTheory.aemeasurable_of_exist_almost_disjoint_supersets μ s s_count s_dense _\n  rintro p hp q hq hpq\n  lift p to ℝ≥0 using I p hp\n  lift q to ℝ≥0 using I q hq\n  exact h p q (ENNReal.coe_lt_coe.1 hpq)\n"}
