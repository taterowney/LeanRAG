{"name":"TensorAlgebra.equivFreeAlgebra_ι_apply","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"κ : Type uκ\nR : Type uR\nM : Type uM\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nb : Basis κ R M\ni : κ\n⊢ Eq ((TensorAlgebra.equivFreeAlgebra b) ((TensorAlgebra.ι R) (b i))) (FreeAlgebra.ι R i)","decl":"@[simp]\nlemma equivFreeAlgebra_ι_apply (b : Basis κ R M) (i : κ) :\n    equivFreeAlgebra b (ι R (b i)) = FreeAlgebra.ι R i :=\n  (TensorAlgebra.lift_ι_apply _ _).trans <| by simp\n\n"}
{"name":"TensorAlgebra.equivFreeAlgebra_symm_ι","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"κ : Type uκ\nR : Type uR\nM : Type uM\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nb : Basis κ R M\ni : κ\n⊢ Eq ((TensorAlgebra.equivFreeAlgebra b).symm (FreeAlgebra.ι R i)) ((TensorAlgebra.ι R) (b i))","decl":"@[simp]\nlemma equivFreeAlgebra_symm_ι (b : Basis κ R M) (i : κ) :\n    (equivFreeAlgebra b).symm (FreeAlgebra.ι R i) = ι R (b i) :=\n  (equivFreeAlgebra b).toEquiv.symm_apply_eq.mpr <| equivFreeAlgebra_ι_apply b i |>.symm\n\n"}
{"name":"Basis.tensorAlgebra_repr_apply","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"κ : Type uκ\nR : Type uR\nM : Type uM\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nb : Basis κ R M\na✝ : TensorAlgebra R M\n⊢ Eq (b.tensorAlgebra.repr a✝) ((FreeAlgebra.basisFreeMonoid R κ).repr ((TensorAlgebra.equivFreeAlgebra b) a✝))","decl":"/-- A basis on `M` can be lifted to a basis on `TensorAlgebra R M` -/\n@[simps! repr_apply]\nnoncomputable def _root_.Basis.tensorAlgebra (b : Basis κ R M) :\n    Basis (FreeMonoid κ) R (TensorAlgebra R M) :=\n  (FreeAlgebra.basisFreeMonoid R κ).map <| (equivFreeAlgebra b).symm.toLinearEquiv\n\n"}
{"name":"TensorAlgebra.instModuleFree","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"R : Type uR\nM : Type uM\ninst✝³ : CommSemiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : Module.Free R M\n⊢ Module.Free R (TensorAlgebra R M)","decl":"/-- `TensorAlgebra R M` is free when `M` is. -/\ninstance instModuleFree [Module.Free R M] : Module.Free R (TensorAlgebra R M) :=\n  let ⟨⟨_κ, b⟩⟩ := Module.Free.exists_basis (R := R) (M := M)\n  .of_basis b.tensorAlgebra\n\n"}
{"name":"TensorAlgebra.instNoZeroDivisors","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"R : Type uR\nM : Type uM\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : NoZeroDivisors R\ninst✝ : Module.Free R M\n⊢ NoZeroDivisors (TensorAlgebra R M)","decl":"/-- The `TensorAlgebra` of a free module over a commutative semiring with no zero-divisors has\nno zero-divisors. -/\ninstance instNoZeroDivisors [NoZeroDivisors R] [Module.Free R M] :\n    NoZeroDivisors (TensorAlgebra R M) :=\n  have ⟨⟨_, b⟩⟩ := ‹Module.Free R M›\n  (equivFreeAlgebra b).toMulEquiv.noZeroDivisors\n\n"}
{"name":"TensorAlgebra.instIsDomain","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"R : Type uR\nM : Type uM\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsDomain R\ninst✝ : Module.Free R M\n⊢ IsDomain (TensorAlgebra R M)","decl":"/-- The `TensorAlgebra` of a free module over an integral domain is a domain. -/\ninstance instIsDomain [IsDomain R] [Module.Free R M] : IsDomain (TensorAlgebra R M) :=\n  NoZeroDivisors.to_isDomain _\n\n"}
{"name":"TensorAlgebra.rank_eq","module":"Mathlib.LinearAlgebra.TensorAlgebra.Basis","initialProofState":"R : Type uR\nM : Type uM\ninst✝⁴ : CommRing R\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : Nontrivial R\ninst✝ : Module.Free R M\n⊢ Eq (Module.rank R (TensorAlgebra R M)) (Cardinal.lift.{uR, uM} (Cardinal.sum fun n => HPow.hPow (Module.rank R M) n))","decl":"open Cardinal in\nlemma rank_eq [Nontrivial R] [Module.Free R M] :\n    Module.rank R (TensorAlgebra R M) = Cardinal.lift.{uR} (sum fun n ↦ Module.rank R M ^ n) := by\n  let ⟨⟨κ, b⟩⟩ := Module.Free.exists_basis (R := R) (M := M)\n  rw [(equivFreeAlgebra b).toLinearEquiv.rank_eq, FreeAlgebra.rank_eq, mk_list_eq_sum_pow,\n    Basis.mk_eq_rank'' b]\n\n"}
