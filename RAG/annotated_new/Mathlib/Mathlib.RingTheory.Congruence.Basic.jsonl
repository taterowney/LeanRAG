{"name":"RingCon.coe_smul","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"α : Type u_1\nR : Type u_2\ninst✝³ : Add R\ninst✝² : MulOneClass R\ninst✝¹ : SMul α R\ninst✝ : IsScalarTower α R R\nc : RingCon R\na : α\nx : R\n⊢ Eq (↑(HSMul.hSMul a x)) (HSMul.hSMul a ↑x)","decl":"@[simp, norm_cast]\ntheorem coe_smul (a : α) (x : R) : (↑(a • x) : c.Quotient) = a • (x : c.Quotient) :=\n  rfl\n\n"}
{"name":"RingCon.isScalarTower_right","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"α : Type u_1\nR : Type u_2\ninst✝³ : Add R\ninst✝² : MulOneClass R\ninst✝¹ : SMul α R\ninst✝ : IsScalarTower α R R\nc : RingCon R\n⊢ IsScalarTower α c.Quotient c.Quotient","decl":"instance isScalarTower_right [Add R] [MulOneClass R] [SMul α R] [IsScalarTower α R R]\n    (c : RingCon R) : IsScalarTower α c.Quotient c.Quotient where\n  smul_assoc _ := Quotient.ind₂' fun _ _ => congr_arg Quotient.mk'' <| smul_mul_assoc _ _ _\n\n"}
{"name":"RingCon.smulCommClass","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"α : Type u_1\nR : Type u_2\ninst✝⁴ : Add R\ninst✝³ : MulOneClass R\ninst✝² : SMul α R\ninst✝¹ : IsScalarTower α R R\ninst✝ : SMulCommClass α R R\nc : RingCon R\n⊢ SMulCommClass α c.Quotient c.Quotient","decl":"instance smulCommClass [Add R] [MulOneClass R] [SMul α R] [IsScalarTower α R R]\n    [SMulCommClass α R R] (c : RingCon R) : SMulCommClass α c.Quotient c.Quotient where\n  smul_comm _ := Quotient.ind₂' fun _ _ => congr_arg Quotient.mk'' <| (mul_smul_comm _ _ _).symm\n\n"}
{"name":"RingCon.smulCommClass'","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"α : Type u_1\nR : Type u_2\ninst✝⁴ : Add R\ninst✝³ : MulOneClass R\ninst✝² : SMul α R\ninst✝¹ : IsScalarTower α R R\ninst✝ : SMulCommClass R α R\nc : RingCon R\n⊢ SMulCommClass c.Quotient α c.Quotient","decl":"instance smulCommClass' [Add R] [MulOneClass R] [SMul α R] [IsScalarTower α R R]\n    [SMulCommClass R α R] (c : RingCon R) : SMulCommClass c.Quotient α c.Quotient :=\n  haveI := SMulCommClass.symm R α R\n  SMulCommClass.symm _ _ _\n\n"}
{"name":"RingCon.le_def","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\n⊢ Iff (LE.le c d) (∀ {x y : R}, c x y → d x y)","decl":"/-- Definition of `≤` for congruence relations. -/\ntheorem le_def {c d : RingCon R} : c ≤ d ↔ ∀ {x y}, c x y → d x y :=\n  Iff.rfl\n\n"}
{"name":"RingCon.sInf_toSetoid","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nS : Set (RingCon R)\n⊢ Eq (InfSet.sInf S).toSetoid (InfSet.sInf (Set.image (fun x => x.toSetoid) S))","decl":"/-- The infimum of a set of congruence relations is the same as the infimum of the set's image\n    under the map to the underlying equivalence relation. -/\ntheorem sInf_toSetoid (S : Set (RingCon R)) : (sInf S).toSetoid = sInf ((·.toSetoid) '' S) :=\n  Setoid.ext fun x y =>\n    ⟨fun h r ⟨c, hS, hr⟩ => by rw [← hr]; exact h c hS, fun h c hS => h c.toSetoid ⟨c, hS, rfl⟩⟩\n\n"}
{"name":"RingCon.coe_sInf","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nS : Set (RingCon R)\n⊢ Eq (⇑(InfSet.sInf S)) (InfSet.sInf (Set.image DFunLike.coe S))","decl":"/-- The infimum of a set of congruence relations is the same as the infimum of the set's image\n    under the map to the underlying binary relation. -/\n@[simp, norm_cast]\ntheorem coe_sInf (S : Set (RingCon R)) : ⇑(sInf S) = sInf ((⇑) '' S) := by\n  ext; simp only [sInf_image, iInf_apply, iInf_Prop_eq]; rfl\n\n"}
{"name":"RingCon.coe_iInf","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nι : Sort u_3\nf : ι → RingCon R\n⊢ Eq (⇑(iInf f)) (iInf fun i => ⇑(f i))","decl":"@[simp, norm_cast]\ntheorem coe_iInf {ι : Sort*} (f : ι → RingCon R) : ⇑(iInf f) = ⨅ i, ⇑(f i) := by\n  rw [iInf, coe_sInf, ← Set.range_comp, sInf_range, Function.comp_def]\n\n"}
{"name":"RingCon.coe_top","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\n⊢ Eq (⇑Top.top) Top.top","decl":"@[simp, norm_cast]\ntheorem coe_top : ⇑(⊤ : RingCon R) = ⊤ := rfl\n\n"}
{"name":"RingCon.coe_bot","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\n⊢ Eq (⇑Bot.bot) Eq","decl":"@[simp, norm_cast]\ntheorem coe_bot : ⇑(⊥ : RingCon R) = Eq := rfl\n\n"}
{"name":"RingCon.coe_inf","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\n⊢ Eq (⇑(Min.min c d)) (Min.min ⇑c ⇑d)","decl":"/-- The infimum of two congruence relations equals the infimum of the underlying binary\noperations. -/\n@[simp, norm_cast]\ntheorem coe_inf {c d : RingCon R} : ⇑(c ⊓ d) = ⇑c ⊓ ⇑d := rfl\n\n"}
{"name":"RingCon.inf_iff_and","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\nx y : R\n⊢ Iff ((Min.min c d) x y) (And (c x y) (d x y))","decl":"/-- Definition of the infimum of two congruence relations. -/\ntheorem inf_iff_and {c d : RingCon R} {x y} : (c ⊓ d) x y ↔ c x y ∧ d x y :=\n  Iff.rfl\n\n"}
{"name":"RingCon.instNontrivial","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝² : Add R\ninst✝¹ : Mul R\ninst✝ : Nontrivial R\n⊢ Nontrivial (RingCon R)","decl":"instance [Nontrivial R] : Nontrivial (RingCon R) where\n  exists_pair_ne :=\n    let ⟨x, y, ne⟩ := exists_pair_ne R\n    ⟨⊥, ⊤, ne_of_apply_ne (· x y) <| by simp [ne]⟩\n\n"}
{"name":"RingCon.ringConGen_eq","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nr : R → R → Prop\n⊢ Eq (ringConGen r) (InfSet.sInf (setOf fun s => ∀ (x y : R), r x y → s x y))","decl":"/-- The inductively defined smallest congruence relation containing a binary relation `r` equals\n    the infimum of the set of congruence relations containing `r`. -/\ntheorem ringConGen_eq (r : R → R → Prop) :\n    ringConGen r = sInf {s : RingCon R | ∀ x y, r x y → s x y} :=\n  le_antisymm\n    (fun _x _y H =>\n      RingConGen.Rel.recOn H (fun _ _ h _ hs => hs _ _ h) (RingCon.refl _)\n        (fun _ => RingCon.symm _) (fun _ _ => RingCon.trans _)\n        (fun _ _ h1 h2 c hc => c.add (h1 c hc) <| h2 c hc)\n        (fun _ _ h1 h2 c hc => c.mul (h1 c hc) <| h2 c hc))\n    (sInf_le fun _ _ => RingConGen.Rel.of _ _)\n\n"}
{"name":"RingCon.ringConGen_le","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nr : R → R → Prop\nc : RingCon R\nh : ∀ (x y : R), r x y → c x y\n⊢ LE.le (ringConGen r) c","decl":"/-- The smallest congruence relation containing a binary relation `r` is contained in any\n    congruence relation containing `r`. -/\ntheorem ringConGen_le {r : R → R → Prop} {c : RingCon R}\n    (h : ∀ x y, r x y → c x y) : ringConGen r ≤ c := by\n  rw [ringConGen_eq]; exact sInf_le h\n\n"}
{"name":"RingCon.ringConGen_mono","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nr s : R → R → Prop\nh : ∀ (x y : R), r x y → s x y\n⊢ LE.le (ringConGen r) (ringConGen s)","decl":"/-- Given binary relations `r, s` with `r` contained in `s`, the smallest congruence relation\n    containing `s` contains the smallest congruence relation containing `r`. -/\ntheorem ringConGen_mono {r s : R → R → Prop} (h : ∀ x y, r x y → s x y) :\n    ringConGen r ≤ ringConGen s :=\n  ringConGen_le fun x y hr => RingConGen.Rel.of _ _ <| h x y hr\n\n"}
{"name":"RingCon.ringConGen_of_ringCon","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\n⊢ Eq (ringConGen ⇑c) c","decl":"/-- Congruence relations equal the smallest congruence relation in which they are contained. -/\ntheorem ringConGen_of_ringCon (c : RingCon R) : ringConGen c = c :=\n  le_antisymm (by rw [ringConGen_eq]; exact sInf_le fun _ _ => id) RingConGen.Rel.of\n\n"}
{"name":"RingCon.ringConGen_idem","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nr : R → R → Prop\n⊢ Eq (ringConGen ⇑(ringConGen r)) (ringConGen r)","decl":"/-- The map sending a binary relation to the smallest congruence relation in which it is\n    contained is idempotent. -/\ntheorem ringConGen_idem (r : R → R → Prop) : ringConGen (ringConGen r) = ringConGen r :=\n  ringConGen_of_ringCon _\n\n"}
{"name":"RingCon.sup_eq_ringConGen","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\n⊢ Eq (Max.max c d) (ringConGen fun x y => Or (c x y) (d x y))","decl":"/-- The supremum of congruence relations `c, d` equals the smallest congruence relation containing\n    the binary relation '`x` is related to `y` by `c` or `d`'. -/\ntheorem sup_eq_ringConGen (c d : RingCon R) : c ⊔ d = ringConGen fun x y => c x y ∨ d x y := by\n  rw [ringConGen_eq]\n  apply congr_arg sInf\n  simp only [le_def, or_imp, ← forall_and]\n\n"}
{"name":"RingCon.sup_def","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\n⊢ Eq (Max.max c d) (ringConGen (Max.max ⇑c ⇑d))","decl":"/-- The supremum of two congruence relations equals the smallest congruence relation containing\n    the supremum of the underlying binary operations. -/\ntheorem sup_def {c d : RingCon R} : c ⊔ d = ringConGen (⇑c ⊔ ⇑d) := by\n  rw [sup_eq_ringConGen]; rfl\n\n"}
{"name":"RingCon.sSup_eq_ringConGen","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nS : Set (RingCon R)\n⊢ Eq (SupSet.sSup S) (ringConGen fun x y => Exists fun c => And (Membership.mem S c) (c x y))","decl":"/-- The supremum of a set of congruence relations `S` equals the smallest congruence relation\n    containing the binary relation 'there exists `c ∈ S` such that `x` is related to `y` by\n    `c`'. -/\ntheorem sSup_eq_ringConGen (S : Set (RingCon R)) :\n    sSup S = ringConGen fun x y => ∃ c : RingCon R, c ∈ S ∧ c x y := by\n  rw [ringConGen_eq]\n  apply congr_arg sInf\n  ext\n  exact ⟨fun h _ _ ⟨r, hr⟩ => h hr.1 hr.2, fun h r hS _ _ hr => h _ _ ⟨r, hS, hr⟩⟩\n\n"}
{"name":"RingCon.sSup_def","module":"Mathlib.RingTheory.Congruence.Basic","initialProofState":"R : Type u_2\ninst✝¹ : Add R\ninst✝ : Mul R\nS : Set (RingCon R)\n⊢ Eq (SupSet.sSup S) (ringConGen (SupSet.sSup (Set.image DFunLike.coe S)))","decl":"/-- The supremum of a set of congruence relations is the same as the smallest congruence relation\n    containing the supremum of the set's image under the map to the underlying binary relation. -/\ntheorem sSup_def {S : Set (RingCon R)} :\n    sSup S = ringConGen (sSup (@Set.image (RingCon R) (R → R → Prop) (⇑) S)) := by\n  rw [sSup_eq_ringConGen, sSup_image]\n  congr with (x y)\n  simp only [sSup_image, iSup_apply, iSup_Prop_eq, exists_prop, rel_eq_coe]\n\n"}
