{"name":"QuadraticForm.tmul_comp_tensorMap","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\nM₄ : Type uM₄\ninst✝⁹ : CommRing R\ninst✝⁸ : AddCommGroup M₁\ninst✝⁷ : AddCommGroup M₂\ninst✝⁶ : AddCommGroup M₃\ninst✝⁵ : AddCommGroup M₄\ninst✝⁴ : Module R M₁\ninst✝³ : Module R M₂\ninst✝² : Module R M₃\ninst✝¹ : Module R M₄\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\nQ₄ : QuadraticForm R M₄\nf : QuadraticMap.Isometry Q₁ Q₂\ng : QuadraticMap.Isometry Q₃ Q₄\n⊢ Eq (QuadraticMap.comp (Q₂.tmul Q₄) (TensorProduct.map f.toLinearMap g.toLinearMap)) (Q₁.tmul Q₃)","decl":"@[simp]\ntheorem tmul_comp_tensorMap\n    {Q₁ : QuadraticForm R M₁} {Q₂ : QuadraticForm R M₂}\n    {Q₃ : QuadraticForm R M₃} {Q₄ : QuadraticForm R M₄}\n    (f : Q₁ →qᵢ Q₂) (g : Q₃ →qᵢ Q₄) :\n    (Q₂.tmul Q₄).comp (TensorProduct.map f.toLinearMap g.toLinearMap) = Q₁.tmul Q₃ := by\n  have h₁ : Q₁ = Q₂.comp f.toLinearMap := QuadraticMap.ext fun x => (f.map_app x).symm\n  have h₃ : Q₃ = Q₄.comp g.toLinearMap := QuadraticMap.ext fun x => (g.map_app x).symm\n  refine (QuadraticMap.associated_rightInverse R).injective ?_\n  ext m₁ m₃ m₁' m₃'\n  simp [-associated_apply, h₁, h₃, associated_tmul]\n\n"}
{"name":"QuadraticForm.tmul_tensorMap_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\nM₄ : Type uM₄\ninst✝⁹ : CommRing R\ninst✝⁸ : AddCommGroup M₁\ninst✝⁷ : AddCommGroup M₂\ninst✝⁶ : AddCommGroup M₃\ninst✝⁵ : AddCommGroup M₄\ninst✝⁴ : Module R M₁\ninst✝³ : Module R M₂\ninst✝² : Module R M₃\ninst✝¹ : Module R M₄\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\nQ₄ : QuadraticForm R M₄\nf : QuadraticMap.Isometry Q₁ Q₂\ng : QuadraticMap.Isometry Q₃ Q₄\nx : TensorProduct R M₁ M₃\n⊢ Eq ((Q₂.tmul Q₄) ((TensorProduct.map f.toLinearMap g.toLinearMap) x)) ((Q₁.tmul Q₃) x)","decl":"@[simp]\ntheorem tmul_tensorMap_apply\n    {Q₁ : QuadraticForm R M₁} {Q₂ : QuadraticForm R M₂}\n    {Q₃ : QuadraticForm R M₃} {Q₄ : QuadraticForm R M₄}\n    (f : Q₁ →qᵢ Q₂) (g : Q₃ →qᵢ Q₄) (x : M₁ ⊗[R] M₃) :\n    Q₂.tmul Q₄ (TensorProduct.map f.toLinearMap g.toLinearMap x) = Q₁.tmul Q₃ x :=\n  DFunLike.congr_fun (tmul_comp_tensorMap f g) x\n\n"}
{"name":"QuadraticMap.Isometry.tmul_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\nM₄ : Type uM₄\ninst✝⁹ : CommRing R\ninst✝⁸ : AddCommGroup M₁\ninst✝⁷ : AddCommGroup M₂\ninst✝⁶ : AddCommGroup M₃\ninst✝⁵ : AddCommGroup M₄\ninst✝⁴ : Module R M₁\ninst✝³ : Module R M₂\ninst✝² : Module R M₃\ninst✝¹ : Module R M₄\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\nQ₄ : QuadraticForm R M₄\nf : QuadraticMap.Isometry Q₁ Q₂\ng : QuadraticMap.Isometry Q₃ Q₄\nx : TensorProduct R M₁ M₃\n⊢ Eq ((f.tmul g) x) ((TensorProduct.map f.toLinearMap g.toLinearMap) x)","decl":"@[simp]\ntheorem _root_.QuadraticMap.Isometry.tmul_apply\n    {Q₁ : QuadraticForm R M₁} {Q₂ : QuadraticForm R M₂}\n    {Q₃ : QuadraticForm R M₃} {Q₄ : QuadraticForm R M₄}\n    (f : Q₁ →qᵢ Q₂) (g : Q₃ →qᵢ Q₄) (x : M₁ ⊗[R] M₃) :\n    f.tmul g x = TensorProduct.map f.toLinearMap g.toLinearMap x :=\n  rfl\n\n"}
{"name":"QuadraticForm.tmul_comp_tensorComm","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\ninst✝⁵ : CommRing R\ninst✝⁴ : AddCommGroup M₁\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\n⊢ Eq (QuadraticMap.comp (Q₂.tmul Q₁) ↑(TensorProduct.comm R M₁ M₂)) (Q₁.tmul Q₂)","decl":"@[simp]\ntheorem tmul_comp_tensorComm (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) :\n    (Q₂.tmul Q₁).comp (TensorProduct.comm R M₁ M₂) = Q₁.tmul Q₂ := by\n  refine (QuadraticMap.associated_rightInverse R).injective ?_\n  ext m₁ m₂ m₁' m₂'\n  dsimp [-associated_apply]\n  simp only [associated_tmul, QuadraticMap.associated_comp]\n  exact mul_comm _ _\n\n"}
{"name":"QuadraticForm.tmul_tensorComm_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\ninst✝⁵ : CommRing R\ninst✝⁴ : AddCommGroup M₁\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nx : TensorProduct R M₁ M₂\n⊢ Eq ((Q₂.tmul Q₁) ((TensorProduct.comm R M₁ M₂) x)) ((Q₁.tmul Q₂) x)","decl":"@[simp]\ntheorem tmul_tensorComm_apply\n    (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) (x : M₁ ⊗[R] M₂) :\n    Q₂.tmul Q₁ (TensorProduct.comm R M₁ M₂ x) = Q₁.tmul Q₂ x :=\n  DFunLike.congr_fun (tmul_comp_tensorComm Q₁ Q₂) x\n\n"}
{"name":"QuadraticForm.tensorComm_toLinearEquiv","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\ninst✝⁵ : CommRing R\ninst✝⁴ : AddCommGroup M₁\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\n⊢ Eq (Q₁.tensorComm Q₂).toLinearEquiv (TensorProduct.comm R M₁ M₂)","decl":"/-- `TensorProduct.comm` preserves tensor products of quadratic forms. -/\n@[simps toLinearEquiv]\ndef tensorComm (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) :\n    (Q₁.tmul Q₂).IsometryEquiv (Q₂.tmul Q₁) where\n  toLinearEquiv := TensorProduct.comm R M₁ M₂\n  map_app' := tmul_tensorComm_apply Q₁ Q₂\n\n"}
{"name":"QuadraticForm.tensorComm_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\ninst✝⁵ : CommRing R\ninst✝⁴ : AddCommGroup M₁\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nx : TensorProduct R M₁ M₂\n⊢ Eq ((Q₁.tensorComm Q₂) x) ((TensorProduct.comm R M₁ M₂) x)","decl":"@[simp] lemma tensorComm_apply (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂)\n    (x : M₁ ⊗[R] M₂) :\n    tensorComm Q₁ Q₂ x = TensorProduct.comm R M₁ M₂ x :=\n  rfl\n\n"}
{"name":"QuadraticForm.tensorComm_symm","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\ninst✝⁵ : CommRing R\ninst✝⁴ : AddCommGroup M₁\ninst✝³ : AddCommGroup M₂\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\n⊢ Eq (Q₁.tensorComm Q₂).symm (Q₂.tensorComm Q₁)","decl":"@[simp] lemma tensorComm_symm (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) :\n    (tensorComm Q₁ Q₂).symm = tensorComm Q₂ Q₁ :=\n  rfl\n\n"}
{"name":"QuadraticForm.tmul_comp_tensorAssoc","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁷ : CommRing R\ninst✝⁶ : AddCommGroup M₁\ninst✝⁵ : AddCommGroup M₂\ninst✝⁴ : AddCommGroup M₃\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\n⊢ Eq (QuadraticMap.comp (Q₁.tmul (Q₂.tmul Q₃)) ↑(TensorProduct.assoc R M₁ M₂ M₃)) ((Q₁.tmul Q₂).tmul Q₃)","decl":"@[simp]\ntheorem tmul_comp_tensorAssoc\n    (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) (Q₃ : QuadraticForm R M₃) :\n    (Q₁.tmul (Q₂.tmul Q₃)).comp (TensorProduct.assoc R M₁ M₂ M₃) = (Q₁.tmul Q₂).tmul Q₃ := by\n  refine (QuadraticMap.associated_rightInverse R).injective ?_\n  ext m₁ m₂ m₁' m₂' m₁'' m₂''\n  dsimp [-associated_apply]\n  simp only [associated_tmul, QuadraticMap.associated_comp]\n  exact mul_assoc _ _ _\n\n"}
{"name":"QuadraticForm.tmul_tensorAssoc_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁷ : CommRing R\ninst✝⁶ : AddCommGroup M₁\ninst✝⁵ : AddCommGroup M₂\ninst✝⁴ : AddCommGroup M₃\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\nx : TensorProduct R (TensorProduct R M₁ M₂) M₃\n⊢ Eq ((Q₁.tmul (Q₂.tmul Q₃)) ((TensorProduct.assoc R M₁ M₂ M₃) x)) (((Q₁.tmul Q₂).tmul Q₃) x)","decl":"@[simp]\ntheorem tmul_tensorAssoc_apply\n    (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) (Q₃ : QuadraticForm R M₃)\n    (x : (M₁ ⊗[R] M₂) ⊗[R] M₃) :\n    Q₁.tmul (Q₂.tmul Q₃) (TensorProduct.assoc R M₁ M₂ M₃ x) = (Q₁.tmul Q₂).tmul Q₃ x :=\n  DFunLike.congr_fun (tmul_comp_tensorAssoc Q₁ Q₂ Q₃) x\n\n"}
{"name":"QuadraticForm.tensorAssoc_toLinearEquiv","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁷ : CommRing R\ninst✝⁶ : AddCommGroup M₁\ninst✝⁵ : AddCommGroup M₂\ninst✝⁴ : AddCommGroup M₃\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\n⊢ Eq (Q₁.tensorAssoc Q₂ Q₃).toLinearEquiv (TensorProduct.assoc R M₁ M₂ M₃)","decl":"/-- `TensorProduct.assoc` preserves tensor products of quadratic forms. -/\n@[simps toLinearEquiv]\ndef tensorAssoc (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) (Q₃ : QuadraticForm R M₃) :\n    ((Q₁.tmul Q₂).tmul Q₃).IsometryEquiv (Q₁.tmul (Q₂.tmul Q₃)) where\n  toLinearEquiv := TensorProduct.assoc R M₁ M₂ M₃\n  map_app' := tmul_tensorAssoc_apply Q₁ Q₂ Q₃\n\n"}
{"name":"QuadraticForm.tensorAssoc_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁷ : CommRing R\ninst✝⁶ : AddCommGroup M₁\ninst✝⁵ : AddCommGroup M₂\ninst✝⁴ : AddCommGroup M₃\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\nx : TensorProduct R (TensorProduct R M₁ M₂) M₃\n⊢ Eq ((Q₁.tensorAssoc Q₂ Q₃) x) ((TensorProduct.assoc R M₁ M₂ M₃) x)","decl":"@[simp] lemma tensorAssoc_apply\n    (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) (Q₃ : QuadraticForm R M₃)\n    (x : (M₁ ⊗[R] M₂) ⊗[R] M₃) :\n    tensorAssoc Q₁ Q₂ Q₃ x = TensorProduct.assoc R M₁ M₂ M₃ x :=\n  rfl\n\n"}
{"name":"QuadraticForm.tensorAssoc_symm_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁷ : CommRing R\ninst✝⁶ : AddCommGroup M₁\ninst✝⁵ : AddCommGroup M₂\ninst✝⁴ : AddCommGroup M₃\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nQ₂ : QuadraticForm R M₂\nQ₃ : QuadraticForm R M₃\nx : TensorProduct R M₁ (TensorProduct R M₂ M₃)\n⊢ Eq ((Q₁.tensorAssoc Q₂ Q₃).symm x) ((TensorProduct.assoc R M₁ M₂ M₃).symm x)","decl":"@[simp] lemma tensorAssoc_symm_apply\n    (Q₁ : QuadraticForm R M₁) (Q₂ : QuadraticForm R M₂) (Q₃ : QuadraticForm R M₃)\n    (x : M₁ ⊗[R] (M₂ ⊗[R] M₃)) :\n    (tensorAssoc Q₁ Q₂ Q₃).symm x = (TensorProduct.assoc R M₁ M₂ M₃).symm x :=\n  rfl\n\n"}
{"name":"QuadraticForm.comp_tensorRId_eq","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module R M₁\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\n⊢ Eq (QuadraticMap.comp Q₁ ↑(TensorProduct.rid R M₁)) (Q₁.tmul QuadraticMap.sq)","decl":"theorem comp_tensorRId_eq (Q₁ : QuadraticForm R M₁) :\n    Q₁.comp (TensorProduct.rid R M₁) = Q₁.tmul (sq (R := R)) := by\n  refine (QuadraticMap.associated_rightInverse R).injective ?_\n  ext m₁ m₁'\n  dsimp [-associated_apply]\n  simp only [associated_tmul, QuadraticMap.associated_comp]\n  simp [-associated_apply, one_mul]\n\n"}
{"name":"QuadraticForm.tmul_tensorRId_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module R M₁\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nx : TensorProduct R M₁ R\n⊢ Eq (Q₁ ((TensorProduct.rid R M₁) x)) ((Q₁.tmul QuadraticMap.sq) x)","decl":"@[simp]\ntheorem tmul_tensorRId_apply\n    (Q₁ : QuadraticForm R M₁) (x : M₁ ⊗[R] R) :\n    Q₁ (TensorProduct.rid R M₁ x) = Q₁.tmul (sq (R := R)) x :=\n  DFunLike.congr_fun (comp_tensorRId_eq Q₁) x\n\n"}
{"name":"QuadraticForm.tensorRId_toLinearEquiv","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module R M₁\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\n⊢ Eq Q₁.tensorRId.toLinearEquiv (TensorProduct.rid R M₁)","decl":"/-- `TensorProduct.rid` preserves tensor products of quadratic forms. -/\n@[simps toLinearEquiv]\ndef tensorRId (Q₁ : QuadraticForm R M₁) :\n    (Q₁.tmul (sq (R := R))).IsometryEquiv Q₁ where\n  toLinearEquiv := TensorProduct.rid R M₁\n  map_app' := tmul_tensorRId_apply Q₁\n\n"}
{"name":"QuadraticForm.tensorRId_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module R M₁\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nx : TensorProduct R M₁ R\n⊢ Eq (Q₁.tensorRId x) ((TensorProduct.rid R M₁) x)","decl":"@[simp] lemma tensorRId_apply (Q₁ : QuadraticForm R M₁) (x : M₁ ⊗[R] R) :\n    tensorRId Q₁ x = TensorProduct.rid R M₁ x :=\n  rfl\n\n"}
{"name":"QuadraticForm.tensorRId_symm_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₁ : Type uM₁\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module R M₁\ninst✝ : Invertible 2\nQ₁ : QuadraticForm R M₁\nx : M₁\n⊢ Eq (Q₁.tensorRId.symm x) ((TensorProduct.rid R M₁).symm x)","decl":"@[simp] lemma tensorRId_symm_apply (Q₁ : QuadraticForm R M₁) (x : M₁) :\n    (tensorRId Q₁).symm x = (TensorProduct.rid R M₁).symm x :=\n  rfl\n\n"}
{"name":"QuadraticForm.comp_tensorLId_eq","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₂ : Type uM₂\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₂ : QuadraticForm R M₂\n⊢ Eq (QuadraticMap.comp Q₂ ↑(TensorProduct.lid R M₂)) (QuadraticForm.tmul QuadraticMap.sq Q₂)","decl":"theorem comp_tensorLId_eq (Q₂ : QuadraticForm R M₂) :\n    Q₂.comp (TensorProduct.lid R M₂) = QuadraticForm.tmul (sq (R := R)) Q₂ := by\n  refine (QuadraticMap.associated_rightInverse R).injective ?_\n  ext m₂ m₂'\n  dsimp [-associated_apply]\n  simp only [associated_tmul, QuadraticMap.associated_comp]\n  simp [-associated_apply, mul_one]\n\n"}
{"name":"QuadraticForm.tmul_tensorLId_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₂ : Type uM₂\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₂ : QuadraticForm R M₂\nx : TensorProduct R R M₂\n⊢ Eq (Q₂ ((TensorProduct.lid R M₂) x)) ((QuadraticForm.tmul QuadraticMap.sq Q₂) x)","decl":"@[simp]\ntheorem tmul_tensorLId_apply\n    (Q₂ : QuadraticForm R M₂) (x : R ⊗[R] M₂) :\n    Q₂ (TensorProduct.lid R M₂ x) = QuadraticForm.tmul (sq (R := R)) Q₂ x :=\n  DFunLike.congr_fun (comp_tensorLId_eq Q₂) x\n\n"}
{"name":"QuadraticForm.tensorLId_toLinearEquiv","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₂ : Type uM₂\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₂ : QuadraticForm R M₂\n⊢ Eq Q₂.tensorLId.toLinearEquiv (TensorProduct.lid R M₂)","decl":"/-- `TensorProduct.lid` preserves tensor products of quadratic forms. -/\n@[simps toLinearEquiv]\ndef tensorLId (Q₂ : QuadraticForm R M₂) :\n    (QuadraticForm.tmul (sq (R := R)) Q₂).IsometryEquiv Q₂ where\n  toLinearEquiv := TensorProduct.lid R M₂\n  map_app' := tmul_tensorLId_apply Q₂\n\n"}
{"name":"QuadraticForm.tensorLId_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₂ : Type uM₂\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₂ : QuadraticForm R M₂\nx : TensorProduct R R M₂\n⊢ Eq (Q₂.tensorLId x) ((TensorProduct.lid R M₂) x)","decl":"@[simp] lemma tensorLId_apply (Q₂ : QuadraticForm R M₂) (x : R ⊗[R] M₂) :\n    tensorLId Q₂ x = TensorProduct.lid R M₂ x :=\n  rfl\n\n"}
{"name":"QuadraticForm.tensorLId_symm_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries","initialProofState":"R : Type uR\nM₂ : Type uM₂\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M₂\ninst✝¹ : Module R M₂\ninst✝ : Invertible 2\nQ₂ : QuadraticForm R M₂\nx : M₂\n⊢ Eq (Q₂.tensorLId.symm x) ((TensorProduct.lid R M₂).symm x)","decl":"@[simp] lemma tensorLId_symm_apply (Q₂ : QuadraticForm R M₂) (x : M₂) :\n    (tensorLId Q₂).symm x = (TensorProduct.lid R M₂).symm x :=\n  rfl\n\n"}
