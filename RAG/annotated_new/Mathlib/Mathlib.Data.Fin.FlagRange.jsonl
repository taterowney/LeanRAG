{"name":"IsMaxChain.range_fin_of_covBy","module":"Mathlib.Data.Fin.FlagRange","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : BoundedOrder α\nn : Nat\nf : Fin (HAdd.hAdd n 1) → α\nh0 : Eq (f 0) Bot.bot\nhlast : Eq (f (Fin.last n)) Top.top\nhcovBy : ∀ (k : Fin n), WCovBy (f k.castSucc) (f k.succ)\n⊢ IsMaxChain (fun x1 x2 => LE.le x1 x2) (Set.range f)","decl":"/-- Let `f : Fin (n + 1) → α` be an `(n + 1)`-tuple `(f₀, …, fₙ)` such that\n- `f₀ = ⊥` and `fₙ = ⊤`;\n- `fₖ₊₁` weakly covers `fₖ` for all `0 ≤ k < n`;\n  this means that `fₖ ≤ fₖ₊₁` and there is no `c` such that `fₖ<c<fₖ₊₁`.\nThen the range of `f` is a maximal chain. -/\ntheorem IsMaxChain.range_fin_of_covBy (h0 : f 0 = ⊥) (hlast : f (.last n) = ⊤)\n    (hcovBy : ∀ k : Fin n, f k.castSucc ⩿ f k.succ) :\n    IsMaxChain (· ≤ ·) (range f) := by\n  have hmono : Monotone f := Fin.monotone_iff_le_succ.2 fun k ↦ (hcovBy k).1\n  refine ⟨hmono.isChain_range, fun t htc hbt ↦ hbt.antisymm fun x hx ↦ ?_⟩\n  rw [mem_range]; by_contra! h\n  suffices ∀ k, f k < x by simpa [hlast] using this (.last _)\n  intro k\n  induction k using Fin.induction with\n  | zero => simpa [h0, bot_lt_iff_ne_bot] using (h 0).symm\n  | succ k ihk =>\n    rw [range_subset_iff] at hbt\n    exact (htc.lt_of_le (hbt k.succ) hx (h _)).resolve_right ((hcovBy k).2 ihk)\n\n"}
{"name":"Flag.rangeFin_carrier","module":"Mathlib.Data.Fin.FlagRange","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : BoundedOrder α\nn : Nat\nf : Fin (HAdd.hAdd n 1) → α\nh0 : Eq (f 0) Bot.bot\nhlast : Eq (f (Fin.last n)) Top.top\nhcovBy : ∀ (k : Fin n), WCovBy (f k.castSucc) (f k.succ)\n⊢ Eq (↑(Flag.rangeFin f h0 hlast hcovBy)) (Set.range f)","decl":"/-- Let `f : Fin (n + 1) → α` be an `(n + 1)`-tuple `(f₀, …, fₙ)` such that\n- `f₀ = ⊥` and `fₙ = ⊤`;\n- `fₖ₊₁` weakly covers `fₖ` for all `0 ≤ k < n`;\n  this means that `fₖ ≤ fₖ₊₁` and there is no `c` such that `fₖ<c<fₖ₊₁`.\nThen the range of `f` is a `Flag α`. -/\n@[simps]\ndef Flag.rangeFin (f : Fin (n + 1) → α) (h0 : f 0 = ⊥) (hlast : f (.last n) = ⊤)\n    (hcovBy : ∀ k : Fin n, f k.castSucc ⩿ f k.succ) : Flag α where\n  carrier := range f\n  Chain' := (IsMaxChain.range_fin_of_covBy h0 hlast hcovBy).1\n  max_chain' := (IsMaxChain.range_fin_of_covBy h0 hlast hcovBy).2\n\n"}
{"name":"Flag.mem_rangeFin","module":"Mathlib.Data.Fin.FlagRange","initialProofState":"α : Type u_1\ninst✝¹ : PartialOrder α\ninst✝ : BoundedOrder α\nn : Nat\nf : Fin (HAdd.hAdd n 1) → α\nx : α\nh0 : Eq (f 0) Bot.bot\nhlast : Eq (f (Fin.last n)) Top.top\nhcovBy : ∀ (k : Fin n), WCovBy (f k.castSucc) (f k.succ)\n⊢ Iff (Membership.mem (Flag.rangeFin f h0 hlast hcovBy) x) (Exists fun k => Eq (f k) x)","decl":"@[simp] theorem Flag.mem_rangeFin {x h0 hlast hcovBy} :\n    x ∈ rangeFin f h0 hlast hcovBy ↔ ∃ k, f k = x :=\n  Iff.rfl\n"}
