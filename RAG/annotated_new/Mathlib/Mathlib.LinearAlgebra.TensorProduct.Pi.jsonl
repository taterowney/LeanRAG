{"name":"TensorProduct.piRightHom_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝⁸ : CommSemiring R\nS : Type u_2\ninst✝⁷ : CommSemiring S\ninst✝⁶ : Algebra R S\nN : Type u_3\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R N\ninst✝³ : Module S N\ninst✝² : IsScalarTower R S N\nι : Type u_4\nM : ι → Type u_5\ninst✝¹ : (i : ι) → AddCommMonoid (M i)\ninst✝ : (i : ι) → Module R (M i)\nx : N\nf : (i : ι) → M i\n⊢ Eq ((TensorProduct.piRightHom R S N M) (TensorProduct.tmul R x f)) fun j => TensorProduct.tmul R x (f j)","decl":"@[simp]\nlemma piRightHom_tmul (x : N) (f : ∀ i, M i) :\n    piRightHom R S N M (x ⊗ₜ f) = (fun j ↦ x ⊗ₜ f j) :=\n  rfl\n\n"}
{"name":"TensorProduct.piRight_apply","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝¹⁰ : CommSemiring R\nS : Type u_2\ninst✝⁹ : CommSemiring S\ninst✝⁸ : Algebra R S\nN : Type u_3\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : Module R N\ninst✝⁵ : Module S N\ninst✝⁴ : IsScalarTower R S N\nι : Type u_4\nM : ι → Type u_5\ninst✝³ : (i : ι) → AddCommMonoid (M i)\ninst✝² : (i : ι) → Module R (M i)\ninst✝¹ : Fintype ι\ninst✝ : DecidableEq ι\nx : TensorProduct R N ((i : ι) → M i)\n⊢ Eq ((TensorProduct.piRight R S N M) x) ((TensorProduct.piRightHom R S N M) x)","decl":"@[simp]\nlemma piRight_apply (x : N ⊗[R] (∀ i, M i)) :\n    piRight R S N M x = piRightHom R S N M x := by\n  rfl\n\n"}
{"name":"TensorProduct.piRight_symm_apply","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝¹⁰ : CommSemiring R\nS : Type u_2\ninst✝⁹ : CommSemiring S\ninst✝⁸ : Algebra R S\nN : Type u_3\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : Module R N\ninst✝⁵ : Module S N\ninst✝⁴ : IsScalarTower R S N\nι : Type u_4\nM : ι → Type u_5\ninst✝³ : (i : ι) → AddCommMonoid (M i)\ninst✝² : (i : ι) → Module R (M i)\ninst✝¹ : Fintype ι\ninst✝ : DecidableEq ι\nx : N\nm : (i : ι) → M i\n⊢ Eq ((TensorProduct.piRight R S N M).symm fun i => TensorProduct.tmul R x (m i)) (TensorProduct.tmul R x m)","decl":"@[simp]\nlemma piRight_symm_apply (x : N) (m : ∀ i, M i) :\n    (piRight R S N M).symm (fun i ↦ x ⊗ₜ m i) = x ⊗ₜ m := by\n  simp [piRight]\n\n"}
{"name":"TensorProduct.piRight_symm_single","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝¹⁰ : CommSemiring R\nS : Type u_2\ninst✝⁹ : CommSemiring S\ninst✝⁸ : Algebra R S\nN : Type u_3\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : Module R N\ninst✝⁵ : Module S N\ninst✝⁴ : IsScalarTower R S N\nι : Type u_4\nM : ι → Type u_5\ninst✝³ : (i : ι) → AddCommMonoid (M i)\ninst✝² : (i : ι) → Module R (M i)\ninst✝¹ : Fintype ι\ninst✝ : DecidableEq ι\nx : N\ni : ι\nm : M i\n⊢ Eq ((TensorProduct.piRight R S N M).symm (Pi.single i (TensorProduct.tmul R x m))) (TensorProduct.tmul R x (Pi.single i m))","decl":"@[simp]\nlemma piRight_symm_single (x : N) (i : ι) (m : M i) :\n    (piRight R S N M).symm (Pi.single i (x ⊗ₜ m)) = x ⊗ₜ Pi.single i m := by\n  simp [piRight]\n\n"}
{"name":"TensorProduct.piScalarRightHom_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nS : Type u_2\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Algebra R S\nN : Type u_3\ninst✝³ : AddCommMonoid N\ninst✝² : Module R N\ninst✝¹ : Module S N\ninst✝ : IsScalarTower R S N\nι : Type u_4\nx : N\nf : ι → R\n⊢ Eq ((TensorProduct.piScalarRightHom R S N ι) (TensorProduct.tmul R x f)) fun j => HSMul.hSMul (f j) x","decl":"@[simp]\nlemma piScalarRightHom_tmul (x : N) (f : ι → R) :\n    piScalarRightHom R S N ι (x ⊗ₜ f) = (fun j ↦ f j • x) := by\n  ext j\n  simp [piScalarRightHom, piScalarRightHomBil]\n\n"}
{"name":"TensorProduct.piScalarRight_apply","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝⁸ : CommSemiring R\nS : Type u_2\ninst✝⁷ : CommSemiring S\ninst✝⁶ : Algebra R S\nN : Type u_3\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R N\ninst✝³ : Module S N\ninst✝² : IsScalarTower R S N\nι : Type u_4\ninst✝¹ : Fintype ι\ninst✝ : DecidableEq ι\nx : TensorProduct R N (ι → R)\n⊢ Eq ((TensorProduct.piScalarRight R S N ι) x) ((TensorProduct.piScalarRightHom R S N ι) x)","decl":"@[simp]\nlemma piScalarRight_apply (x : N ⊗[R] (ι → R)) :\n    piScalarRight R S N ι x = piScalarRightHom R S N ι x := by\n  rfl\n\n"}
{"name":"TensorProduct.piScalarRight_symm_single","module":"Mathlib.LinearAlgebra.TensorProduct.Pi","initialProofState":"R : Type u_1\ninst✝⁸ : CommSemiring R\nS : Type u_2\ninst✝⁷ : CommSemiring S\ninst✝⁶ : Algebra R S\nN : Type u_3\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R N\ninst✝³ : Module S N\ninst✝² : IsScalarTower R S N\nι : Type u_4\ninst✝¹ : Fintype ι\ninst✝ : DecidableEq ι\nx : N\ni : ι\n⊢ Eq ((TensorProduct.piScalarRight R S N ι).symm (Pi.single i x)) (TensorProduct.tmul R x (Pi.single i 1))","decl":"@[simp]\nlemma piScalarRight_symm_single (x : N) (i : ι) :\n    (piScalarRight R S N ι).symm (Pi.single i x) = x ⊗ₜ Pi.single i 1 := by\n  simp [piScalarRight]\n\n"}
