{"name":"Polynomial.opRingEquiv_op_monomial","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\nr : R\n⊢ Eq ((Polynomial.opRingEquiv R) (MulOpposite.op ((Polynomial.monomial n) r))) ((Polynomial.monomial n) (MulOpposite.op r))","decl":"@[simp]\ntheorem opRingEquiv_op_monomial (n : ℕ) (r : R) :\n    opRingEquiv R (op (monomial n r : R[X])) = monomial n (op r) := by\n  simp only [opRingEquiv, RingEquiv.coe_trans, Function.comp_apply,\n    AddMonoidAlgebra.opRingEquiv_apply, RingEquiv.op_apply_apply, toFinsuppIso_apply, unop_op,\n    toFinsupp_monomial, Finsupp.mapRange_single, toFinsuppIso_symm_apply, ofFinsupp_single]\n\n"}
{"name":"Polynomial.opRingEquiv_op_C","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\na : R\n⊢ Eq ((Polynomial.opRingEquiv R) (MulOpposite.op (Polynomial.C a))) (Polynomial.C (MulOpposite.op a))","decl":"@[simp]\ntheorem opRingEquiv_op_C (a : R) : opRingEquiv R (op (C a)) = C (op a) :=\n  opRingEquiv_op_monomial 0 a\n\n"}
{"name":"Polynomial.opRingEquiv_op_X","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Eq ((Polynomial.opRingEquiv R) (MulOpposite.op Polynomial.X)) Polynomial.X","decl":"@[simp]\ntheorem opRingEquiv_op_X : opRingEquiv R (op (X : R[X])) = X :=\n  opRingEquiv_op_monomial 1 1\n\n"}
{"name":"Polynomial.opRingEquiv_op_C_mul_X_pow","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : R\nn : Nat\n⊢ Eq ((Polynomial.opRingEquiv R) (MulOpposite.op (HMul.hMul (Polynomial.C r) (HPow.hPow Polynomial.X n)))) (HMul.hMul (Polynomial.C (MulOpposite.op r)) (HPow.hPow Polynomial.X n))","decl":"theorem opRingEquiv_op_C_mul_X_pow (r : R) (n : ℕ) :\n    opRingEquiv R (op (C r * X ^ n : R[X])) = C (op r) * X ^ n := by\n  simp only [X_pow_mul, op_mul, op_pow, map_mul, map_pow, opRingEquiv_op_X, opRingEquiv_op_C]\n\n"}
{"name":"Polynomial.opRingEquiv_symm_monomial","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\nr : MulOpposite R\n⊢ Eq ((Polynomial.opRingEquiv R).symm ((Polynomial.monomial n) r)) (MulOpposite.op ((Polynomial.monomial n) (MulOpposite.unop r)))","decl":"@[simp]\ntheorem opRingEquiv_symm_monomial (n : ℕ) (r : Rᵐᵒᵖ) :\n    (opRingEquiv R).symm (monomial n r) = op (monomial n (unop r)) :=\n  (opRingEquiv R).injective (by simp)\n\n"}
{"name":"Polynomial.opRingEquiv_symm_C","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\na : MulOpposite R\n⊢ Eq ((Polynomial.opRingEquiv R).symm (Polynomial.C a)) (MulOpposite.op (Polynomial.C (MulOpposite.unop a)))","decl":"@[simp]\ntheorem opRingEquiv_symm_C (a : Rᵐᵒᵖ) : (opRingEquiv R).symm (C a) = op (C (unop a)) :=\n  opRingEquiv_symm_monomial 0 a\n\n"}
{"name":"Polynomial.opRingEquiv_symm_X","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Eq ((Polynomial.opRingEquiv R).symm Polynomial.X) (MulOpposite.op Polynomial.X)","decl":"@[simp]\ntheorem opRingEquiv_symm_X : (opRingEquiv R).symm (X : Rᵐᵒᵖ[X]) = op X :=\n  opRingEquiv_symm_monomial 1 1\n\n"}
{"name":"Polynomial.opRingEquiv_symm_C_mul_X_pow","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nr : MulOpposite R\nn : Nat\n⊢ Eq ((Polynomial.opRingEquiv R).symm (HMul.hMul (Polynomial.C r) (HPow.hPow Polynomial.X n))) (MulOpposite.op (HMul.hMul (Polynomial.C (MulOpposite.unop r)) (HPow.hPow Polynomial.X n)))","decl":"theorem opRingEquiv_symm_C_mul_X_pow (r : Rᵐᵒᵖ) (n : ℕ) :\n    (opRingEquiv R).symm (C r * X ^ n : Rᵐᵒᵖ[X]) = op (C (unop r) * X ^ n) := by\n  rw [C_mul_X_pow_eq_monomial, opRingEquiv_symm_monomial, C_mul_X_pow_eq_monomial]\n\n"}
{"name":"Polynomial.coeff_opRingEquiv","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : MulOpposite (Polynomial R)\nn : Nat\n⊢ Eq (((Polynomial.opRingEquiv R) p).coeff n) (MulOpposite.op ((MulOpposite.unop p).coeff n))","decl":"@[simp]\ntheorem coeff_opRingEquiv (p : R[X]ᵐᵒᵖ) (n : ℕ) :\n    (opRingEquiv R p).coeff n = op ((unop p).coeff n) := by\n  induction' p with p\n  cases p\n  rfl\n\n"}
{"name":"Polynomial.support_opRingEquiv","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : MulOpposite (Polynomial R)\n⊢ Eq ((Polynomial.opRingEquiv R) p).support (MulOpposite.unop p).support","decl":"@[simp]\ntheorem support_opRingEquiv (p : R[X]ᵐᵒᵖ) : (opRingEquiv R p).support = (unop p).support := by\n  induction' p with p\n  cases p\n  exact Finsupp.support_mapRange_of_injective (map_zero _) _ op_injective\n\n"}
{"name":"Polynomial.natDegree_opRingEquiv","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : MulOpposite (Polynomial R)\n⊢ Eq ((Polynomial.opRingEquiv R) p).natDegree (MulOpposite.unop p).natDegree","decl":"@[simp]\ntheorem natDegree_opRingEquiv (p : R[X]ᵐᵒᵖ) : (opRingEquiv R p).natDegree = (unop p).natDegree := by\n  by_cases p0 : p = 0\n  · simp only [p0, _root_.map_zero, natDegree_zero, unop_zero]\n  · simp only [p0, natDegree_eq_support_max', Ne, EmbeddingLike.map_eq_zero_iff, not_false_iff,\n      support_opRingEquiv, unop_eq_zero_iff]\n\n"}
{"name":"Polynomial.leadingCoeff_opRingEquiv","module":"Mathlib.RingTheory.Polynomial.Opposites","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : MulOpposite (Polynomial R)\n⊢ Eq ((Polynomial.opRingEquiv R) p).leadingCoeff (MulOpposite.op (MulOpposite.unop p).leadingCoeff)","decl":"@[simp]\ntheorem leadingCoeff_opRingEquiv (p : R[X]ᵐᵒᵖ) :\n    (opRingEquiv R p).leadingCoeff = op (unop p).leadingCoeff := by\n  rw [leadingCoeff, coeff_opRingEquiv, natDegree_opRingEquiv, leadingCoeff]\n\n"}
