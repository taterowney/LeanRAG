{"name":"Polynomial.instNoZeroDivisors","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝ : Semiring R\n⊢ NoZeroDivisors (Polynomial R)","decl":"instance : NoZeroDivisors R[X] where\n  eq_zero_or_eq_zero_of_mul_eq_zero h := by\n    rw [← leadingCoeff_eq_zero, ← leadingCoeff_eq_zero]\n    refine eq_zero_or_eq_zero_of_mul_eq_zero ?_\n    rw [← leadingCoeff_zero, ← leadingCoeff_mul, h]\n\n"}
{"name":"Polynomial.natDegree_mul","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nhp : Ne p 0\nhq : Ne q 0\n⊢ Eq (HMul.hMul p q).natDegree (HAdd.hAdd p.natDegree q.natDegree)","decl":"lemma natDegree_mul (hp : p ≠ 0) (hq : q ≠ 0) : (p*q).natDegree = p.natDegree + q.natDegree := by\n  rw [← Nat.cast_inj (R := WithBot ℕ), ← degree_eq_natDegree (mul_ne_zero hp hq),\n    Nat.cast_add, ← degree_eq_natDegree hp, ← degree_eq_natDegree hq, degree_mul]\n\n"}
{"name":"Polynomial.natDegree_smul","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\na : R\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np : Polynomial R\nha : Ne a 0\n⊢ Eq (HSMul.hSMul a p).natDegree p.natDegree","decl":"variable (p) in\nlemma natDegree_smul (ha : a ≠ 0) : (a • p).natDegree = p.natDegree := by\n  by_cases hp : p = 0\n  · simp only [hp, smul_zero]\n  · apply natDegree_eq_of_le_of_coeff_ne_zero\n    · exact (natDegree_smul_le _ _).trans (le_refl _)\n    · simpa only [coeff_smul, coeff_natDegree, smul_eq_mul, ne_eq, mul_eq_zero,\n        leadingCoeff_eq_zero, not_or] using ⟨ha, hp⟩\n\n"}
{"name":"Polynomial.natDegree_pow","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np : Polynomial R\nn : Nat\n⊢ Eq (HPow.hPow p n).natDegree (HMul.hMul n p.natDegree)","decl":"@[simp]\nlemma natDegree_pow (p : R[X]) (n : ℕ) : natDegree (p ^ n) = n * natDegree p := by\n  classical\n  obtain rfl | hp := eq_or_ne p 0\n  · obtain rfl | hn := eq_or_ne n 0 <;> simp [*]\n  exact natDegree_pow' <| by\n    rw [← leadingCoeff_pow, Ne, leadingCoeff_eq_zero]; exact pow_ne_zero _ hp\n\n"}
{"name":"Polynomial.natDegree_le_of_dvd","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nh1 : Dvd.dvd p q\nh2 : Ne q 0\n⊢ LE.le p.natDegree q.natDegree","decl":"lemma natDegree_le_of_dvd (h1 : p ∣ q) (h2 : q ≠ 0) : p.natDegree ≤ q.natDegree := by\n  obtain ⟨q, rfl⟩ := h1\n  rw [mul_ne_zero_iff] at h2\n  rw [natDegree_mul h2.1 h2.2]; exact Nat.le_add_right _ _\n\n"}
{"name":"Polynomial.degree_le_of_dvd","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nh1 : Dvd.dvd p q\nh2 : Ne q 0\n⊢ LE.le p.degree q.degree","decl":"lemma degree_le_of_dvd (h1 : p ∣ q) (h2 : q ≠ 0) : degree p ≤ degree q := by\n  rcases h1 with ⟨q, rfl⟩; rw [mul_ne_zero_iff] at h2\n  exact degree_le_mul_left p h2.2\n\n"}
{"name":"Polynomial.eq_zero_of_dvd_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nh₁ : Dvd.dvd p q\nh₂ : LT.lt q.degree p.degree\n⊢ Eq q 0","decl":"lemma eq_zero_of_dvd_of_degree_lt (h₁ : p ∣ q) (h₂ : degree q < degree p) : q = 0 := by\n  by_contra hc\n  exact (lt_iff_not_ge _ _).mp h₂ (degree_le_of_dvd h₁ hc)\n\n"}
{"name":"Polynomial.eq_zero_of_dvd_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nh₁ : Dvd.dvd p q\nh₂ : LT.lt q.natDegree p.natDegree\n⊢ Eq q 0","decl":"lemma eq_zero_of_dvd_of_natDegree_lt (h₁ : p ∣ q) (h₂ : natDegree q < natDegree p) :\n    q = 0 := by\n  by_contra hc\n  exact (lt_iff_not_ge _ _).mp h₂ (natDegree_le_of_dvd h₁ hc)\n\n"}
{"name":"Polynomial.not_dvd_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nh0 : Ne q 0\nhl : LT.lt q.degree p.degree\n⊢ Not (Dvd.dvd p q)","decl":"lemma not_dvd_of_degree_lt (h0 : q ≠ 0) (hl : q.degree < p.degree) : ¬p ∣ q := by\n  by_contra hcontra\n  exact h0 (eq_zero_of_dvd_of_degree_lt hcontra hl)\n\n"}
{"name":"Polynomial.not_dvd_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\nh0 : Ne q 0\nhl : LT.lt q.natDegree p.natDegree\n⊢ Not (Dvd.dvd p q)","decl":"lemma not_dvd_of_natDegree_lt (h0 : q ≠ 0) (hl : q.natDegree < p.natDegree) :\n    ¬p ∣ q := by\n  by_contra hcontra\n  exact h0 (eq_zero_of_dvd_of_natDegree_lt hcontra hl)\n\n"}
{"name":"Polynomial.natDegree_sub_eq_of_prod_eq","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np₁ p₂ q₁ q₂ : Polynomial R\nhp₁ : Ne p₁ 0\nhq₁ : Ne q₁ 0\nhp₂ : Ne p₂ 0\nhq₂ : Ne q₂ 0\nh_eq : Eq (HMul.hMul p₁ q₂) (HMul.hMul p₂ q₁)\n⊢ Eq (HSub.hSub ↑p₁.natDegree ↑q₁.natDegree) (HSub.hSub ↑p₂.natDegree ↑q₂.natDegree)","decl":"/-- This lemma is useful for working with the `intDegree` of a rational function. -/\nlemma natDegree_sub_eq_of_prod_eq {p₁ p₂ q₁ q₂ : R[X]} (hp₁ : p₁ ≠ 0) (hq₁ : q₁ ≠ 0)\n    (hp₂ : p₂ ≠ 0) (hq₂ : q₂ ≠ 0) (h_eq : p₁ * q₂ = p₂ * q₁) :\n    (p₁.natDegree : ℤ) - q₁.natDegree = (p₂.natDegree : ℤ) - q₂.natDegree := by\n  rw [sub_eq_sub_iff_add_eq_add]\n  norm_cast\n  rw [← natDegree_mul hp₁ hq₂, ← natDegree_mul hp₂ hq₁, h_eq]\n\n"}
{"name":"Polynomial.instIsDomain","module":"Mathlib.Algebra.Polynomial.Degree.Domain","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\n⊢ IsDomain (Polynomial R)","decl":"instance : IsDomain R[X] := NoZeroDivisors.to_isDomain _\n\n"}
