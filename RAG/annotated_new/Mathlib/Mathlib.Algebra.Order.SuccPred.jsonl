{"name":"SuccAddOrder.succ_eq_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : Add α\ninst✝ : One α\nself : SuccAddOrder α\nx : α\n⊢ Eq (SuccOrder.succ x) (HAdd.hAdd x 1)","decl":"/-- A typeclass for `succ x = x + 1`. -/\nclass SuccAddOrder (α : Type*) [Preorder α] [Add α] [One α] extends SuccOrder α where\n  succ_eq_add_one (x : α) : succ x = x + 1\n\n"}
{"name":"PredSubOrder.pred_eq_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : Sub α\ninst✝ : One α\nself : PredSubOrder α\nx : α\n⊢ Eq (PredOrder.pred x) (HSub.hSub x 1)","decl":"/-- A typeclass for `pred x = x - 1`. -/\nclass PredSubOrder (α : Type*) [Preorder α] [Sub α] [One α] extends PredOrder α where\n  pred_eq_sub_one (x : α) : pred x = x - 1\n\n"}
{"name":"Order.succ_eq_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nx : α\n⊢ Eq (Order.succ x) (HAdd.hAdd x 1)","decl":"theorem succ_eq_add_one (x : α) : succ x = x + 1 :=\n  SuccAddOrder.succ_eq_add_one x\n\n"}
{"name":"Order.add_one_le_of_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : Preorder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nh : LT.lt x y\n⊢ LE.le (HAdd.hAdd x 1) y","decl":"theorem add_one_le_of_lt (h : x < y) : x + 1 ≤ y := by\n  rw [← succ_eq_add_one]\n  exact succ_le_of_lt h\n\n"}
{"name":"Order.add_one_le_iff_of_not_isMax","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : Preorder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nhx : Not (IsMax x)\n⊢ Iff (LE.le (HAdd.hAdd x 1) y) (LT.lt x y)","decl":"theorem add_one_le_iff_of_not_isMax (hx : ¬ IsMax x) : x + 1 ≤ y ↔ x < y := by\n  rw [← succ_eq_add_one, succ_le_iff_of_not_isMax hx]\n\n"}
{"name":"Order.add_one_le_iff","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝⁴ : Preorder α\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : NoMaxOrder α\n⊢ Iff (LE.le (HAdd.hAdd x 1) y) (LT.lt x y)","decl":"theorem add_one_le_iff [NoMaxOrder α] : x + 1 ≤ y ↔ x < y :=\n  add_one_le_iff_of_not_isMax (not_isMax x)\n\n"}
{"name":"Order.wcovBy_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nx : α\n⊢ WCovBy x (HAdd.hAdd x 1)","decl":"@[simp]\ntheorem wcovBy_add_one (x : α) : x ⩿ x + 1 := by\n  rw [← succ_eq_add_one]\n  exact wcovBy_succ x\n\n"}
{"name":"Order.covBy_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : NoMaxOrder α\nx : α\n⊢ CovBy x (HAdd.hAdd x 1)","decl":"@[simp]\ntheorem covBy_add_one [NoMaxOrder α] (x : α) : x ⋖ x + 1 := by\n  rw [← succ_eq_add_one]\n  exact covBy_succ x\n\n"}
{"name":"Order.pred_eq_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nx : α\n⊢ Eq (Order.pred x) (HSub.hSub x 1)","decl":"theorem pred_eq_sub_one (x : α) : pred x = x - 1 :=\n  PredSubOrder.pred_eq_sub_one x\n\n"}
{"name":"Order.le_sub_one_of_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : Preorder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nh : LT.lt x y\n⊢ LE.le x (HSub.hSub y 1)","decl":"theorem le_sub_one_of_lt (h : x < y) : x ≤ y - 1 := by\n  rw [← pred_eq_sub_one]\n  exact le_pred_of_lt h\n\n"}
{"name":"Order.le_sub_one_iff_of_not_isMin","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : Preorder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nhy : Not (IsMin y)\n⊢ Iff (LE.le x (HSub.hSub y 1)) (LT.lt x y)","decl":"theorem le_sub_one_iff_of_not_isMin (hy : ¬ IsMin y) : x ≤ y - 1 ↔ x < y := by\n  rw [← pred_eq_sub_one, le_pred_iff_of_not_isMin hy]\n\n"}
{"name":"Order.le_sub_one_iff","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝⁴ : Preorder α\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : NoMinOrder α\n⊢ Iff (LE.le x (HSub.hSub y 1)) (LT.lt x y)","decl":"theorem le_sub_one_iff [NoMinOrder α] : x ≤ y - 1 ↔ x < y :=\n  le_sub_one_iff_of_not_isMin (not_isMin y)\n\n"}
{"name":"Order.sub_one_wcovBy","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nx : α\n⊢ WCovBy (HSub.hSub x 1) x","decl":"@[simp]\ntheorem sub_one_wcovBy (x : α) : x - 1 ⩿ x := by\n  rw [← pred_eq_sub_one]\n  exact pred_wcovBy x\n\n"}
{"name":"Order.sub_one_covBy","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : NoMinOrder α\nx : α\n⊢ CovBy (HSub.hSub x 1) x","decl":"@[simp]\ntheorem sub_one_covBy [NoMinOrder α] (x : α) : x - 1 ⋖ x := by\n  rw [← pred_eq_sub_one]\n  exact pred_covBy x\n\n"}
{"name":"Order.succ_iterate","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : AddMonoidWithOne α\ninst✝ : SuccAddOrder α\nx : α\nn : Nat\n⊢ Eq (Nat.iterate Order.succ n x) (HAdd.hAdd x ↑n)","decl":"@[simp]\ntheorem succ_iterate [AddMonoidWithOne α] [SuccAddOrder α] (x : α) (n : ℕ) :\n    succ^[n] x = x + n := by\n  induction n with\n  | zero =>\n    rw [Function.iterate_zero_apply, Nat.cast_zero, add_zero]\n  | succ n IH =>\n    rw [Function.iterate_succ_apply', IH, Nat.cast_add, succ_eq_add_one, Nat.cast_one, add_assoc]\n\n"}
{"name":"Order.pred_iterate","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝² : Preorder α\ninst✝¹ : AddCommGroupWithOne α\ninst✝ : PredSubOrder α\nx : α\nn : Nat\n⊢ Eq (Nat.iterate Order.pred n x) (HSub.hSub x ↑n)","decl":"@[simp]\ntheorem pred_iterate [AddCommGroupWithOne α] [PredSubOrder α] (x : α) (n : ℕ) :\n    pred^[n] x = x - n := by\n  induction n with\n  | zero =>\n    rw [Function.iterate_zero_apply, Nat.cast_zero, sub_zero]\n  | succ n IH =>\n    rw [Function.iterate_succ_apply', IH, Nat.cast_add, pred_eq_sub_one, Nat.cast_one, sub_sub]\n\n"}
{"name":"Order.not_isMax_zero","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : Zero α\ninst✝² : One α\ninst✝¹ : ZeroLEOneClass α\ninst✝ : NeZero 1\n⊢ Not (IsMax 0)","decl":"theorem not_isMax_zero [Zero α] [One α] [ZeroLEOneClass α] [NeZero (1 : α)] : ¬ IsMax (0 : α) := by\n  rw [not_isMax_iff]\n  exact ⟨1, one_pos⟩\n\n"}
{"name":"Order.one_le_iff_pos","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx : α\ninst✝⁴ : PartialOrder α\ninst✝³ : AddMonoidWithOne α\ninst✝² : ZeroLEOneClass α\ninst✝¹ : NeZero 1\ninst✝ : SuccAddOrder α\n⊢ Iff (LE.le 1 x) (LT.lt 0 x)","decl":"theorem one_le_iff_pos [AddMonoidWithOne α] [ZeroLEOneClass α] [NeZero (1 : α)]\n    [SuccAddOrder α] : 1 ≤ x ↔ 0 < x := by\n  rw [← succ_le_iff_of_not_isMax not_isMax_zero, succ_eq_add_one, zero_add]\n\n"}
{"name":"Order.covBy_iff_add_one_eq","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝⁴ : PartialOrder α\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : NoMaxOrder α\n⊢ Iff (CovBy x y) (Eq (HAdd.hAdd x 1) y)","decl":"theorem covBy_iff_add_one_eq [Add α] [One α] [SuccAddOrder α] [NoMaxOrder α] :\n    x ⋖ y ↔ x + 1 = y := by\n  rw [← succ_eq_add_one]\n  exact succ_eq_iff_covBy.symm\n\n"}
{"name":"Order.covBy_iff_sub_one_eq","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝⁴ : PartialOrder α\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : NoMinOrder α\n⊢ Iff (CovBy x y) (Eq (HSub.hSub y 1) x)","decl":"theorem covBy_iff_sub_one_eq [Sub α] [One α] [PredSubOrder α] [NoMinOrder α] :\n    x ⋖ y ↔ y - 1 = x := by\n  rw [← pred_eq_sub_one]\n  exact pred_eq_iff_covBy.symm\n\n"}
{"name":"Order.IsSuccPrelimit.add_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : PartialOrder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nhx : Order.IsSuccPrelimit x\nhy : LT.lt y x\n⊢ LT.lt (HAdd.hAdd y 1) x","decl":"theorem IsSuccPrelimit.add_one_lt [Add α] [One α] [SuccAddOrder α]\n    (hx : IsSuccPrelimit x) (hy : y < x) : y + 1 < x := by\n  rw [← succ_eq_add_one]\n  exact hx.succ_lt hy\n\n"}
{"name":"Order.IsPredPrelimit.lt_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : PartialOrder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nhx : Order.IsPredPrelimit x\nhy : LT.lt x y\n⊢ LT.lt x (HSub.hSub y 1)","decl":"theorem IsPredPrelimit.lt_sub_one [Sub α] [One α] [PredSubOrder α]\n    (hx : IsPredPrelimit x) (hy : x < y) : x < y - 1 := by\n  rw [← pred_eq_sub_one]\n  exact hx.lt_pred hy\n\n"}
{"name":"Order.IsSuccLimit.add_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : PartialOrder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nhx : Order.IsSuccLimit x\nhy : LT.lt y x\n⊢ LT.lt (HAdd.hAdd y 1) x","decl":"theorem IsSuccLimit.add_one_lt [Add α] [One α] [SuccAddOrder α]\n    (hx : IsSuccLimit x) (hy : y < x) : y + 1 < x :=\n  hx.isSuccPrelimit.add_one_lt hy\n\n"}
{"name":"Order.IsPredLimit.lt_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : PartialOrder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nhx : Order.IsPredLimit x\nhy : LT.lt x y\n⊢ LT.lt x (HSub.hSub y 1)","decl":"theorem IsPredLimit.lt_sub_one [Sub α] [One α] [PredSubOrder α]\n    (hx : IsPredLimit x) (hy : x < y) : x < y - 1 :=\n  hx.isPredPrelimit.lt_sub_one hy\n\n"}
{"name":"Order.IsSuccPrelimit.add_natCast_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝² : PartialOrder α\ninst✝¹ : AddMonoidWithOne α\ninst✝ : SuccAddOrder α\nhx : Order.IsSuccPrelimit x\nhy : LT.lt y x\nn : Nat\n⊢ LT.lt (HAdd.hAdd y ↑n) x","decl":"theorem IsSuccPrelimit.add_natCast_lt [AddMonoidWithOne α] [SuccAddOrder α]\n    (hx : IsSuccPrelimit x) (hy : y < x) : ∀ n : ℕ, y + n < x\n  | 0 => by simpa\n  | n + 1 => by\n    rw [Nat.cast_add_one, ← add_assoc]\n    exact hx.add_one_lt (hx.add_natCast_lt hy n)\n\n"}
{"name":"Order.IsPredPrelimit.lt_sub_natCast","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝² : PartialOrder α\ninst✝¹ : AddCommGroupWithOne α\ninst✝ : PredSubOrder α\nhx : Order.IsPredPrelimit x\nhy : LT.lt x y\nn : Nat\n⊢ LT.lt x (HSub.hSub y ↑n)","decl":"theorem IsPredPrelimit.lt_sub_natCast [AddCommGroupWithOne α] [PredSubOrder α]\n    (hx : IsPredPrelimit x) (hy : x < y) : ∀ n : ℕ, x < y - n\n  | 0 => by simpa\n  | n + 1 => by\n    rw [Nat.cast_add_one, ← sub_sub]\n    exact hx.lt_sub_one (hx.lt_sub_natCast hy n)\n\n"}
{"name":"Order.IsSuccLimit.add_natCast_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝² : PartialOrder α\ninst✝¹ : AddMonoidWithOne α\ninst✝ : SuccAddOrder α\nhx : Order.IsSuccLimit x\nhy : LT.lt y x\nn : Nat\n⊢ LT.lt (HAdd.hAdd y ↑n) x","decl":"theorem IsSuccLimit.add_natCast_lt [AddMonoidWithOne α] [SuccAddOrder α]\n    (hx : IsSuccLimit x) (hy : y < x) : ∀ n : ℕ, y + n < x :=\n  hx.isSuccPrelimit.add_natCast_lt hy\n\n"}
{"name":"Order.IsPredLimit.lt_sub_natCast","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝² : PartialOrder α\ninst✝¹ : AddCommGroupWithOne α\ninst✝ : PredSubOrder α\nhx : Order.IsPredLimit x\nhy : LT.lt x y\nn : Nat\n⊢ LT.lt x (HSub.hSub y ↑n)","decl":"theorem IsPredLimit.lt_sub_natCast [AddCommGroupWithOne α] [PredSubOrder α]\n    (hx : IsPredLimit x) (hy : x < y) : ∀ n : ℕ, x < y - n :=\n  hx.isPredPrelimit.lt_sub_natCast hy\n\n"}
{"name":"Order.le_of_lt_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : LinearOrder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nh : LT.lt x (HAdd.hAdd y 1)\n⊢ LE.le x y","decl":"theorem le_of_lt_add_one (h : x < y + 1) : x ≤ y := by\n  rw [← succ_eq_add_one] at h\n  exact le_of_lt_succ h\n\n"}
{"name":"Order.lt_add_one_iff_of_not_isMax","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : LinearOrder α\ninst✝² : Add α\ninst✝¹ : One α\ninst✝ : SuccAddOrder α\nhy : Not (IsMax y)\n⊢ Iff (LT.lt x (HAdd.hAdd y 1)) (LE.le x y)","decl":"theorem lt_add_one_iff_of_not_isMax (hy : ¬ IsMax y) : x < y + 1 ↔ x ≤ y := by\n  rw [← succ_eq_add_one, lt_succ_iff_of_not_isMax hy]\n\n"}
{"name":"Order.lt_add_one_iff","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝⁴ : LinearOrder α\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : NoMaxOrder α\n⊢ Iff (LT.lt x (HAdd.hAdd y 1)) (LE.le x y)","decl":"theorem lt_add_one_iff [NoMaxOrder α] : x < y + 1 ↔ x ≤ y :=\n  lt_add_one_iff_of_not_isMax (not_isMax y)\n\n"}
{"name":"Order.le_of_sub_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : LinearOrder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nh : LT.lt (HSub.hSub x 1) y\n⊢ LE.le x y","decl":"theorem le_of_sub_one_lt (h : x - 1 < y) : x ≤ y := by\n  rw [← pred_eq_sub_one] at h\n  exact le_of_pred_lt h\n\n"}
{"name":"Order.sub_one_lt_iff_of_not_isMin","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝³ : LinearOrder α\ninst✝² : Sub α\ninst✝¹ : One α\ninst✝ : PredSubOrder α\nhx : Not (IsMin x)\n⊢ Iff (LT.lt (HSub.hSub x 1) y) (LE.le x y)","decl":"theorem sub_one_lt_iff_of_not_isMin (hx : ¬ IsMin x) : x - 1 < y ↔ x ≤ y := by\n  rw [← pred_eq_sub_one, pred_lt_iff_of_not_isMin hx]\n\n"}
{"name":"Order.sub_one_lt_iff","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx y : α\ninst✝⁴ : LinearOrder α\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : NoMinOrder α\n⊢ Iff (LT.lt (HSub.hSub x 1) y) (LE.le x y)","decl":"theorem sub_one_lt_iff [NoMinOrder α] : x - 1 < y ↔ x ≤ y :=\n  sub_one_lt_iff_of_not_isMin (not_isMin x)\n\n"}
{"name":"Order.lt_one_iff_nonpos","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_1\nx : α\ninst✝⁴ : LinearOrder α\ninst✝³ : AddMonoidWithOne α\ninst✝² : ZeroLEOneClass α\ninst✝¹ : NeZero 1\ninst✝ : SuccAddOrder α\n⊢ Iff (LT.lt x 1) (LE.le x 0)","decl":"theorem lt_one_iff_nonpos [AddMonoidWithOne α] [ZeroLEOneClass α] [NeZero (1 : α)]\n    [SuccAddOrder α] : x < 1 ↔ x ≤ 0 := by\n  rw [← lt_succ_iff_of_not_isMax not_isMax_zero, succ_eq_add_one, zero_add]\n\n"}
{"name":"monotoneOn_of_le_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMax a) → Membership.mem s a → Membership.mem s (HAdd.hAdd a 1) → LE.le (f a) (f (HAdd.hAdd a 1))\n⊢ MonotoneOn f s","decl":"lemma monotoneOn_of_le_add_one (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMax a → a ∈ s → a + 1 ∈ s → f a ≤ f (a + 1)) → MonotoneOn f s := by\n  simpa [Order.succ_eq_add_one] using monotoneOn_of_le_succ hs (f := f)\n\n"}
{"name":"antitoneOn_of_add_one_le","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMax a) → Membership.mem s a → Membership.mem s (HAdd.hAdd a 1) → LE.le (f (HAdd.hAdd a 1)) (f a)\n⊢ AntitoneOn f s","decl":"lemma antitoneOn_of_add_one_le (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMax a → a ∈ s → a + 1 ∈ s → f (a + 1) ≤ f a) → AntitoneOn f s := by\n  simpa [Order.succ_eq_add_one] using antitoneOn_of_succ_le hs (f := f)\n\n"}
{"name":"strictMonoOn_of_lt_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMax a) → Membership.mem s a → Membership.mem s (HAdd.hAdd a 1) → LT.lt (f a) (f (HAdd.hAdd a 1))\n⊢ StrictMonoOn f s","decl":"lemma strictMonoOn_of_lt_add_one (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMax a → a ∈ s → a + 1 ∈ s → f a < f (a + 1)) → StrictMonoOn f s := by\n  simpa [Order.succ_eq_add_one] using strictMonoOn_of_lt_succ hs (f := f)\n\n"}
{"name":"strictAntiOn_of_add_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMax a) → Membership.mem s a → Membership.mem s (HAdd.hAdd a 1) → LT.lt (f (HAdd.hAdd a 1)) (f a)\n⊢ StrictAntiOn f s","decl":"lemma strictAntiOn_of_add_one_lt (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMax a → a ∈ s → a + 1 ∈ s → f (a + 1) < f a) → StrictAntiOn f s := by\n  simpa [Order.succ_eq_add_one] using strictAntiOn_of_succ_lt hs (f := f)\n\n"}
{"name":"monotone_of_le_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMax a) → LE.le (f a) (f (HAdd.hAdd a 1))\n⊢ Monotone f","decl":"lemma monotone_of_le_add_one : (∀ a, ¬ IsMax a → f a ≤ f (a + 1)) → Monotone f := by\n  simpa [Order.succ_eq_add_one] using monotone_of_le_succ (f := f)\n\n"}
{"name":"antitone_of_add_one_le","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMax a) → LE.le (f (HAdd.hAdd a 1)) (f a)\n⊢ Antitone f","decl":"lemma antitone_of_add_one_le : (∀ a, ¬ IsMax a → f (a + 1) ≤ f a) → Antitone f := by\n  simpa [Order.succ_eq_add_one] using antitone_of_succ_le (f := f)\n\n"}
{"name":"strictMono_of_lt_add_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMax a) → LT.lt (f a) (f (HAdd.hAdd a 1))\n⊢ StrictMono f","decl":"lemma strictMono_of_lt_add_one : (∀ a, ¬ IsMax a → f a < f (a + 1)) → StrictMono f := by\n  simpa [Order.succ_eq_add_one] using strictMono_of_lt_succ (f := f)\n\n"}
{"name":"strictAnti_of_add_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Add α\ninst✝² : One α\ninst✝¹ : SuccAddOrder α\ninst✝ : IsSuccArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMax a) → LT.lt (f (HAdd.hAdd a 1)) (f a)\n⊢ StrictAnti f","decl":"lemma strictAnti_of_add_one_lt : (∀ a, ¬ IsMax a → f (a + 1) < f a) → StrictAnti f := by\n  simpa [Order.succ_eq_add_one] using strictAnti_of_succ_lt (f := f)\n\n"}
{"name":"monotoneOn_of_sub_one_le","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMin a) → Membership.mem s a → Membership.mem s (HSub.hSub a 1) → LE.le (f (HSub.hSub a 1)) (f a)\n⊢ MonotoneOn f s","decl":"lemma monotoneOn_of_sub_one_le (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMin a → a ∈ s → a - 1 ∈ s → f (a - 1) ≤ f a) → MonotoneOn f s := by\n  simpa [Order.pred_eq_sub_one] using monotoneOn_of_pred_le hs (f := f)\n\n"}
{"name":"antitoneOn_of_le_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMin a) → Membership.mem s a → Membership.mem s (HSub.hSub a 1) → LE.le (f a) (f (HSub.hSub a 1))\n⊢ AntitoneOn f s","decl":"lemma antitoneOn_of_le_sub_one (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMin a → a ∈ s → a - 1 ∈ s → f a ≤ f (a - 1)) → AntitoneOn f s := by\n  simpa [Order.pred_eq_sub_one] using antitoneOn_of_le_pred hs (f := f)\n\n"}
{"name":"strictMonoOn_of_sub_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMin a) → Membership.mem s a → Membership.mem s (HSub.hSub a 1) → LT.lt (f (HSub.hSub a 1)) (f a)\n⊢ StrictMonoOn f s","decl":"lemma strictMonoOn_of_sub_one_lt (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMin a → a ∈ s → a - 1 ∈ s → f (a - 1) < f a) → StrictMonoOn f s := by\n  simpa [Order.pred_eq_sub_one] using strictMonoOn_of_pred_lt hs (f := f)\n\n"}
{"name":"strictAntiOn_of_lt_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\ns : Set α\nf : α → β\nhs : s.OrdConnected\na✝ : ∀ (a : α), Not (IsMin a) → Membership.mem s a → Membership.mem s (HSub.hSub a 1) → LT.lt (f a) (f (HSub.hSub a 1))\n⊢ StrictAntiOn f s","decl":"lemma strictAntiOn_of_lt_sub_one (hs : s.OrdConnected) :\n    (∀ a, ¬ IsMin a → a ∈ s → a - 1 ∈ s → f a < f (a - 1)) → StrictAntiOn f s := by\n  simpa [Order.pred_eq_sub_one] using strictAntiOn_of_lt_pred hs (f := f)\n\n"}
{"name":"monotone_of_sub_one_le","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMin a) → LE.le (f (HSub.hSub a 1)) (f a)\n⊢ Monotone f","decl":"lemma monotone_of_sub_one_le : (∀ a, ¬ IsMin a → f (a - 1) ≤ f a) → Monotone f := by\n  simpa [Order.pred_eq_sub_one] using monotone_of_pred_le (f := f)\n\n"}
{"name":"antitone_of_le_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMin a) → LE.le (f a) (f (HSub.hSub a 1))\n⊢ Antitone f","decl":"lemma antitone_of_le_sub_one : (∀ a, ¬ IsMin a → f a ≤ f (a - 1)) → Antitone f := by\n  simpa [Order.pred_eq_sub_one] using antitone_of_le_pred (f := f)\n\n"}
{"name":"strictMono_of_sub_one_lt","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMin a) → LT.lt (f (HSub.hSub a 1)) (f a)\n⊢ StrictMono f","decl":"lemma strictMono_of_sub_one_lt : (∀ a, ¬ IsMin a → f (a - 1) < f a) → StrictMono f := by\n  simpa [Order.pred_eq_sub_one] using strictMono_of_pred_lt (f := f)\n\n"}
{"name":"strictAnti_of_lt_sub_one","module":"Mathlib.Algebra.Order.SuccPred","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : PartialOrder α\ninst✝⁴ : Preorder β\ninst✝³ : Sub α\ninst✝² : One α\ninst✝¹ : PredSubOrder α\ninst✝ : IsPredArchimedean α\nf : α → β\na✝ : ∀ (a : α), Not (IsMin a) → LT.lt (f a) (f (HSub.hSub a 1))\n⊢ StrictAnti f","decl":"lemma strictAnti_of_lt_sub_one : (∀ a, ¬ IsMin a → f a < f (a - 1)) → StrictAnti f := by\n  simpa [Order.pred_eq_sub_one] using strictAnti_of_lt_pred (f := f)\n\n"}
