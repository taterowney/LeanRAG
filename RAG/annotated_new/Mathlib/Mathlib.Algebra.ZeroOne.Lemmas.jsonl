{"name":"one_le_dite","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LE α\nha : ∀ (h : p), LE.le 1 (a h)\nhb : ∀ (h : Not p), LE.le 1 (b h)\n⊢ LE.le 1 (dite p a b)","decl":"@[to_additive dite_nonneg]\nlemma one_le_dite [LE α] (ha : ∀ h, 1 ≤ a h) (hb : ∀ h, 1 ≤ b h) : 1 ≤ dite p a b := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"dite_nonneg","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LE α\nha : ∀ (h : p), LE.le 0 (a h)\nhb : ∀ (h : Not p), LE.le 0 (b h)\n⊢ LE.le 0 (dite p a b)","decl":"@[to_additive dite_nonneg]\nlemma one_le_dite [LE α] (ha : ∀ h, 1 ≤ a h) (hb : ∀ h, 1 ≤ b h) : 1 ≤ dite p a b := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"dite_le_one","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LE α\nha : ∀ (h : p), LE.le (a h) 1\nhb : ∀ (h : Not p), LE.le (b h) 1\n⊢ LE.le (dite p a b) 1","decl":"@[to_additive]\nlemma dite_le_one [LE α] (ha : ∀ h, a h ≤ 1) (hb : ∀ h, b h ≤ 1) : dite p a b ≤ 1 := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"dite_nonpos","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LE α\nha : ∀ (h : p), LE.le (a h) 0\nhb : ∀ (h : Not p), LE.le (b h) 0\n⊢ LE.le (dite p a b) 0","decl":"@[to_additive]\nlemma dite_le_one [LE α] (ha : ∀ h, a h ≤ 1) (hb : ∀ h, b h ≤ 1) : dite p a b ≤ 1 := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"dite_pos","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LT α\nha : ∀ (h : p), LT.lt 0 (a h)\nhb : ∀ (h : Not p), LT.lt 0 (b h)\n⊢ LT.lt 0 (dite p a b)","decl":"@[to_additive dite_pos]\nlemma one_lt_dite [LT α] (ha : ∀ h, 1 < a h) (hb : ∀ h, 1 < b h) : 1 < dite p a b := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"one_lt_dite","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LT α\nha : ∀ (h : p), LT.lt 1 (a h)\nhb : ∀ (h : Not p), LT.lt 1 (b h)\n⊢ LT.lt 1 (dite p a b)","decl":"@[to_additive dite_pos]\nlemma one_lt_dite [LT α] (ha : ∀ h, 1 < a h) (hb : ∀ h, 1 < b h) : 1 < dite p a b := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"dite_neg","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LT α\nha : ∀ (h : p), LT.lt (a h) 0\nhb : ∀ (h : Not p), LT.lt (b h) 0\n⊢ LT.lt (dite p a b) 0","decl":"@[to_additive]\nlemma dite_lt_one [LT α] (ha : ∀ h, a h < 1) (hb : ∀ h, b h < 1) : dite p a b < 1 := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"dite_lt_one","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na : p → α\nb : Not p → α\ninst✝ : LT α\nha : ∀ (h : p), LT.lt (a h) 1\nhb : ∀ (h : Not p), LT.lt (b h) 1\n⊢ LT.lt (dite p a b) 1","decl":"@[to_additive]\nlemma dite_lt_one [LT α] (ha : ∀ h, a h < 1) (hb : ∀ h, b h < 1) : dite p a b < 1 := by\n  split; exacts [ha ‹_›, hb ‹_›]\n\n"}
{"name":"ite_nonneg","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LE α\nha : LE.le 0 a\nhb : LE.le 0 b\n⊢ LE.le 0 (ite p a b)","decl":"@[to_additive ite_nonneg]\nlemma one_le_ite [LE α] (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ ite p a b := by split <;> assumption\n\n"}
{"name":"one_le_ite","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LE α\nha : LE.le 1 a\nhb : LE.le 1 b\n⊢ LE.le 1 (ite p a b)","decl":"@[to_additive ite_nonneg]\nlemma one_le_ite [LE α] (ha : 1 ≤ a) (hb : 1 ≤ b) : 1 ≤ ite p a b := by split <;> assumption\n\n"}
{"name":"ite_nonpos","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LE α\nha : LE.le a 0\nhb : LE.le b 0\n⊢ LE.le (ite p a b) 0","decl":"@[to_additive]\nlemma ite_le_one [LE α] (ha : a ≤ 1) (hb : b ≤ 1) : ite p a b ≤ 1 := by split <;> assumption\n\n"}
{"name":"ite_le_one","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LE α\nha : LE.le a 1\nhb : LE.le b 1\n⊢ LE.le (ite p a b) 1","decl":"@[to_additive]\nlemma ite_le_one [LE α] (ha : a ≤ 1) (hb : b ≤ 1) : ite p a b ≤ 1 := by split <;> assumption\n\n"}
{"name":"ite_pos","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LT α\nha : LT.lt 0 a\nhb : LT.lt 0 b\n⊢ LT.lt 0 (ite p a b)","decl":"@[to_additive ite_pos]\nlemma one_lt_ite [LT α] (ha : 1 < a) (hb : 1 < b) : 1 < ite p a b := by split <;> assumption\n\n"}
{"name":"one_lt_ite","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LT α\nha : LT.lt 1 a\nhb : LT.lt 1 b\n⊢ LT.lt 1 (ite p a b)","decl":"@[to_additive ite_pos]\nlemma one_lt_ite [LT α] (ha : 1 < a) (hb : 1 < b) : 1 < ite p a b := by split <;> assumption\n\n"}
{"name":"ite_neg","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : Zero α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LT α\nha : LT.lt a 0\nhb : LT.lt b 0\n⊢ LT.lt (ite p a b) 0","decl":"@[to_additive]\nlemma ite_lt_one [LT α] (ha : a < 1) (hb : b < 1) : ite p a b < 1 := by split <;> assumption\n\n"}
{"name":"ite_lt_one","module":"Mathlib.Algebra.ZeroOne.Lemmas","initialProofState":"α : Type u_1\ninst✝² : One α\np : Prop\ninst✝¹ : Decidable p\na b : α\ninst✝ : LT α\nha : LT.lt a 1\nhb : LT.lt b 1\n⊢ LT.lt (ite p a b) 1","decl":"@[to_additive]\nlemma ite_lt_one [LT α] (ha : a < 1) (hb : b < 1) : ite p a b < 1 := by split <;> assumption\n\n"}
