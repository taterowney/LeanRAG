{"name":"HasStrictFDerivAt.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nh : HasStrictFDerivAt f f' x\n⊢ HasStrictFDerivAt (fun x => Star.star (f x)) ((↑(starL' 𝕜)).comp f') x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.star (h : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt (fun x => star (f x)) (((starL' 𝕜 : F ≃L[𝕜] F) : F →L[𝕜] F) ∘L f') x :=\n  (starL' 𝕜 : F ≃L[𝕜] F).toContinuousLinearMap.hasStrictFDerivAt.comp x h\n\n"}
{"name":"HasFDerivAtFilter.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nh : HasFDerivAtFilter f f' x L\n⊢ HasFDerivAtFilter (fun x => Star.star (f x)) ((↑(starL' 𝕜)).comp f') x L","decl":"theorem HasFDerivAtFilter.star (h : HasFDerivAtFilter f f' x L) :\n    HasFDerivAtFilter (fun x => star (f x)) (((starL' 𝕜 : F ≃L[𝕜] F) : F →L[𝕜] F) ∘L f') x L :=\n  (starL' 𝕜 : F ≃L[𝕜] F).toContinuousLinearMap.hasFDerivAtFilter.comp x h Filter.tendsto_map\n\n"}
{"name":"HasFDerivWithinAt.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nh : HasFDerivWithinAt f f' s x\n⊢ HasFDerivWithinAt (fun x => Star.star (f x)) ((↑(starL' 𝕜)).comp f') s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.star (h : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt (fun x => star (f x)) (((starL' 𝕜 : F ≃L[𝕜] F) : F →L[𝕜] F) ∘L f') s x :=\n  h.star\n\n"}
{"name":"HasFDerivAt.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nh : HasFDerivAt f f' x\n⊢ HasFDerivAt (fun x => Star.star (f x)) ((↑(starL' 𝕜)).comp f') x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.star (h : HasFDerivAt f f' x) :\n    HasFDerivAt (fun x => star (f x)) (((starL' 𝕜 : F ≃L[𝕜] F) : F →L[𝕜] F) ∘L f') x :=\n  h.star\n\n"}
{"name":"DifferentiableWithinAt.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nx : E\ns : Set E\nh : DifferentiableWithinAt 𝕜 f s x\n⊢ DifferentiableWithinAt 𝕜 (fun y => Star.star (f y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.star (h : DifferentiableWithinAt 𝕜 f s x) :\n    DifferentiableWithinAt 𝕜 (fun y => star (f y)) s x :=\n  h.hasFDerivWithinAt.star.differentiableWithinAt\n\n"}
{"name":"differentiableWithinAt_star_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nx : E\ns : Set E\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun y => Star.star (f y)) s x) (DifferentiableWithinAt 𝕜 f s x)","decl":"@[simp]\ntheorem differentiableWithinAt_star_iff :\n    DifferentiableWithinAt 𝕜 (fun y => star (f y)) s x ↔ DifferentiableWithinAt 𝕜 f s x :=\n  (starL' 𝕜 : F ≃L[𝕜] F).comp_differentiableWithinAt_iff\n\n"}
{"name":"DifferentiableAt.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nx : E\nh : DifferentiableAt 𝕜 f x\n⊢ DifferentiableAt 𝕜 (fun y => Star.star (f y)) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.star (h : DifferentiableAt 𝕜 f x) :\n    DifferentiableAt 𝕜 (fun y => star (f y)) x :=\n  h.hasFDerivAt.star.differentiableAt\n\n"}
{"name":"differentiableAt_star_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nx : E\n⊢ Iff (DifferentiableAt 𝕜 (fun y => Star.star (f y)) x) (DifferentiableAt 𝕜 f x)","decl":"@[simp]\ntheorem differentiableAt_star_iff :\n    DifferentiableAt 𝕜 (fun y => star (f y)) x ↔ DifferentiableAt 𝕜 f x :=\n  (starL' 𝕜 : F ≃L[𝕜] F).comp_differentiableAt_iff\n\n"}
{"name":"DifferentiableOn.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\ns : Set E\nh : DifferentiableOn 𝕜 f s\n⊢ DifferentiableOn 𝕜 (fun y => Star.star (f y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.star (h : DifferentiableOn 𝕜 f s) :\n    DifferentiableOn 𝕜 (fun y => star (f y)) s := fun x hx => (h x hx).star\n\n"}
{"name":"differentiableOn_star_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\ns : Set E\n⊢ Iff (DifferentiableOn 𝕜 (fun y => Star.star (f y)) s) (DifferentiableOn 𝕜 f s)","decl":"@[simp]\ntheorem differentiableOn_star_iff :\n    DifferentiableOn 𝕜 (fun y => star (f y)) s ↔ DifferentiableOn 𝕜 f s :=\n  (starL' 𝕜 : F ≃L[𝕜] F).comp_differentiableOn_iff\n\n"}
{"name":"Differentiable.star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nh : Differentiable 𝕜 f\n⊢ Differentiable 𝕜 fun y => Star.star (f y)","decl":"@[fun_prop]\ntheorem Differentiable.star (h : Differentiable 𝕜 f) : Differentiable 𝕜 fun y => star (f y) :=\n  fun x => (h x).star\n\n"}
{"name":"differentiable_star_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\n⊢ Iff (Differentiable 𝕜 fun y => Star.star (f y)) (Differentiable 𝕜 f)","decl":"@[simp]\ntheorem differentiable_star_iff : (Differentiable 𝕜 fun y => star (f y)) ↔ Differentiable 𝕜 f :=\n  (starL' 𝕜 : F ≃L[𝕜] F).comp_differentiable_iff\n\n"}
{"name":"fderivWithin_star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (fun y => Star.star (f y)) s x) ((↑(starL' 𝕜)).comp (fderivWithin 𝕜 f s x))","decl":"theorem fderivWithin_star (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (fun y => star (f y)) s x =\n      ((starL' 𝕜 : F ≃L[𝕜] F) : F →L[𝕜] F) ∘L fderivWithin 𝕜 f s x :=\n  (starL' 𝕜 : F ≃L[𝕜] F).comp_fderivWithin hxs\n\n"}
{"name":"fderiv_star","module":"Mathlib.Analysis.Calculus.FDeriv.Star","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : NontriviallyNormedField 𝕜\ninst✝⁸ : StarRing 𝕜\ninst✝⁷ : TrivialStar 𝕜\nE : Type u_2\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : StarAddMonoid F\ninst✝² : NormedSpace 𝕜 F\ninst✝¹ : StarModule 𝕜 F\ninst✝ : ContinuousStar F\nf : E → F\nx : E\n⊢ Eq (fderiv 𝕜 (fun y => Star.star (f y)) x) ((↑(starL' 𝕜)).comp (fderiv 𝕜 f x))","decl":"@[simp]\ntheorem fderiv_star :\n    fderiv 𝕜 (fun y => star (f y)) x = ((starL' 𝕜 : F ≃L[𝕜] F) : F →L[𝕜] F) ∘L fderiv 𝕜 f x :=\n  (starL' 𝕜 : F ≃L[𝕜] F).comp_fderiv\n"}
