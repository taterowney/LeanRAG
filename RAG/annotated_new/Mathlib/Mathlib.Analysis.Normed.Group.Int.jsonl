{"name":"Int.norm_cast_real","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"m : Int\n⊢ Eq (Norm.norm ↑m) (Norm.norm m)","decl":"@[norm_cast]\ntheorem norm_cast_real (m : ℤ) : ‖(m : ℝ)‖ = ‖m‖ :=\n  rfl\n\n"}
{"name":"Int.norm_eq_abs","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"n : Int\n⊢ Eq (Norm.norm n) (abs ↑n)","decl":"theorem norm_eq_abs (n : ℤ) : ‖n‖ = |(n : ℝ)| :=\n  rfl\n\n"}
{"name":"Int.norm_natCast","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"n : Nat\n⊢ Eq (Norm.norm ↑n) ↑n","decl":"@[simp]\ntheorem norm_natCast (n : ℕ) : ‖(n : ℤ)‖ = n := by simp [Int.norm_eq_abs]\n\n"}
{"name":"NNReal.natCast_natAbs","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"n : Int\n⊢ Eq (↑n.natAbs) (NNNorm.nnnorm n)","decl":"theorem _root_.NNReal.natCast_natAbs (n : ℤ) : (n.natAbs : ℝ≥0) = ‖n‖₊ :=\n  NNReal.eq <|\n    calc\n      ((n.natAbs : ℝ≥0) : ℝ) = (n.natAbs : ℤ) := by simp only [Int.cast_natCast, NNReal.coe_natCast]\n      _ = |(n : ℝ)| := by simp only [Int.natCast_natAbs, Int.cast_abs]\n      _ = ‖n‖ := (norm_eq_abs n).symm\n\n"}
{"name":"Int.abs_le_floor_nnreal_iff","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"z : Int\nc : NNReal\n⊢ Iff (LE.le (abs z) ↑(Nat.floor c)) (LE.le (NNNorm.nnnorm z) c)","decl":"theorem abs_le_floor_nnreal_iff (z : ℤ) (c : ℝ≥0) : |z| ≤ ⌊c⌋₊ ↔ ‖z‖₊ ≤ c := by\n  rw [Int.abs_eq_natAbs, Int.ofNat_le, Nat.le_floor_iff (zero_le c), NNReal.natCast_natAbs z]\n\n"}
{"name":"norm_zsmul_le","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"α : Type u_1\ninst✝ : SeminormedAddCommGroup α\nn : Int\na : α\n⊢ LE.le (Norm.norm (HSMul.hSMul n a)) (HMul.hMul (Norm.norm n) (Norm.norm a))","decl":"@[to_additive norm_zsmul_le]\ntheorem norm_zpow_le_mul_norm (n : ℤ) (a : α) : ‖a ^ n‖ ≤ ‖n‖ * ‖a‖ := by\n  rcases n.eq_nat_or_neg with ⟨n, rfl | rfl⟩ <;> simpa using norm_pow_le_mul_norm\n\n"}
{"name":"norm_zpow_le_mul_norm","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"α : Type u_1\ninst✝ : SeminormedCommGroup α\nn : Int\na : α\n⊢ LE.le (Norm.norm (HPow.hPow a n)) (HMul.hMul (Norm.norm n) (Norm.norm a))","decl":"@[to_additive norm_zsmul_le]\ntheorem norm_zpow_le_mul_norm (n : ℤ) (a : α) : ‖a ^ n‖ ≤ ‖n‖ * ‖a‖ := by\n  rcases n.eq_nat_or_neg with ⟨n, rfl | rfl⟩ <;> simpa using norm_pow_le_mul_norm\n\n"}
{"name":"nnnorm_zpow_le_mul_norm","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"α : Type u_1\ninst✝ : SeminormedCommGroup α\nn : Int\na : α\n⊢ LE.le (NNNorm.nnnorm (HPow.hPow a n)) (HMul.hMul (NNNorm.nnnorm n) (NNNorm.nnnorm a))","decl":"@[to_additive nnnorm_zsmul_le]\ntheorem nnnorm_zpow_le_mul_norm (n : ℤ) (a : α) : ‖a ^ n‖₊ ≤ ‖n‖₊ * ‖a‖₊ := by\n  simpa only [← NNReal.coe_le_coe, NNReal.coe_mul] using norm_zpow_le_mul_norm n a\n\n"}
{"name":"nnnorm_zsmul_le","module":"Mathlib.Analysis.Normed.Group.Int","initialProofState":"α : Type u_1\ninst✝ : SeminormedAddCommGroup α\nn : Int\na : α\n⊢ LE.le (NNNorm.nnnorm (HSMul.hSMul n a)) (HMul.hMul (NNNorm.nnnorm n) (NNNorm.nnnorm a))","decl":"@[to_additive nnnorm_zsmul_le]\ntheorem nnnorm_zpow_le_mul_norm (n : ℤ) (a : α) : ‖a ^ n‖₊ ≤ ‖n‖₊ * ‖a‖₊ := by\n  simpa only [← NNReal.coe_le_coe, NNReal.coe_mul] using norm_zpow_le_mul_norm n a\n\n"}
