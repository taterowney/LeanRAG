{"name":"cfcL_integral","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝⁷ : RCLike 𝕜\ninst✝⁶ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝⁵ : NormedRing A\ninst✝⁴ : StarRing A\ninst✝³ : NormedAlgebra 𝕜 A\ninst✝² : NormedAlgebra Real A\ninst✝¹ : CompleteSpace A\ninst✝ : ContinuousFunctionalCalculus 𝕜 p\na : A\nf : X → ContinuousMap (↑(spectrum 𝕜 a)) 𝕜\nhf₁ : MeasureTheory.Integrable f μ\nha : autoParam (p a) _auto✝\n⊢ Eq (MeasureTheory.integral μ fun x => (cfcL ha) (f x)) ((cfcL ha) (MeasureTheory.integral μ fun x => f x))","decl":"lemma cfcL_integral (a : A) (f : X → C(spectrum 𝕜 a, 𝕜)) (hf₁ : Integrable f μ)\n    (ha : p a := by cfc_tac) :\n    ∫ x, cfcL (a := a) ha (f x) ∂μ = cfcL (a := a) ha (∫ x, f x ∂μ) := by\n  rw [ContinuousLinearMap.integral_comp_comm _ hf₁]\n\n"}
{"name":"cfcHom_integral","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝⁷ : RCLike 𝕜\ninst✝⁶ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝⁵ : NormedRing A\ninst✝⁴ : StarRing A\ninst✝³ : NormedAlgebra 𝕜 A\ninst✝² : NormedAlgebra Real A\ninst✝¹ : CompleteSpace A\ninst✝ : ContinuousFunctionalCalculus 𝕜 p\na : A\nf : X → ContinuousMap (↑(spectrum 𝕜 a)) 𝕜\nhf₁ : MeasureTheory.Integrable f μ\nha : autoParam (p a) _auto✝\n⊢ Eq (MeasureTheory.integral μ fun x => (cfcHom ha) (f x)) ((cfcHom ha) (MeasureTheory.integral μ fun x => f x))","decl":"lemma cfcHom_integral (a : A) (f : X → C(spectrum 𝕜 a, 𝕜)) (hf₁ : Integrable f μ)\n    (ha : p a := by cfc_tac) :\n    ∫ x, cfcHom (a := a) ha (f x) ∂μ = cfcHom (a := a) ha (∫ x, f x ∂μ) :=\n  cfcL_integral a f hf₁ ha\n\n"}
{"name":"cfc_integral","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝¹⁰ : RCLike 𝕜\ninst✝⁹ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝⁸ : NormedRing A\ninst✝⁷ : StarRing A\ninst✝⁶ : NormedAlgebra 𝕜 A\ninst✝⁵ : NormedAlgebra Real A\ninst✝⁴ : CompleteSpace A\ninst✝³ : ContinuousFunctionalCalculus 𝕜 p\ninst✝² : TopologicalSpace X\ninst✝¹ : OpensMeasurableSpace X\nf : X → 𝕜 → 𝕜\nbound : X → Real\na : A\ninst✝ : SecondCountableTopologyEither X (ContinuousMap (↑(spectrum 𝕜 a)) 𝕜)\nhf₁ : ∀ (x : X), ContinuousOn (f x) (spectrum 𝕜 a)\nhf₂ : Continuous fun x => { toFun := (spectrum 𝕜 a).restrict (f x), continuous_toFun := ⋯ }\nhbound : ∀ (x : X) (z : 𝕜), Membership.mem (spectrum 𝕜 a) z → LE.le (Norm.norm (f x z)) (Norm.norm (bound x))\nhbound_finite_integral : MeasureTheory.HasFiniteIntegral bound μ\nha : autoParam (p a) _auto✝\n⊢ Eq (cfc (fun r => MeasureTheory.integral μ fun x => f x r) a) (MeasureTheory.integral μ fun x => cfc (f x) a)","decl":"open ContinuousMap in\n/-- The continuous functional calculus commutes with integration. -/\nlemma cfc_integral [TopologicalSpace X] [OpensMeasurableSpace X] (f : X → 𝕜 → 𝕜)\n    (bound : X → ℝ) (a : A) [SecondCountableTopologyEither X C(spectrum 𝕜 a, 𝕜)]\n    (hf₁ : ∀ x, ContinuousOn (f x) (spectrum 𝕜 a))\n    (hf₂ : Continuous (fun x ↦ (⟨_, hf₁ x |>.restrict⟩ : C(spectrum 𝕜 a, 𝕜))))\n    (hbound : ∀ x, ∀ z ∈ spectrum 𝕜 a, ‖f x z‖ ≤ ‖bound x‖)\n    (hbound_finite_integral : HasFiniteIntegral bound μ) (ha : p a := by cfc_tac) :\n    cfc (fun r => ∫ x, f x r ∂μ) a = ∫ x, cfc (f x) a ∂μ := by\n  let fc : X → C(spectrum 𝕜 a, 𝕜) := fun x => ⟨_, (hf₁ x).restrict⟩\n  have fc_integrable : Integrable fc μ := by\n    refine ⟨hf₂.aestronglyMeasurable, ?_⟩\n    refine hbound_finite_integral.mono <| .of_forall fun x ↦ ?_\n    rw [norm_le _ (norm_nonneg (bound x))]\n    exact fun z ↦ hbound x z.1 z.2\n  have h_int_fc : (spectrum 𝕜 a).restrict (∫ x, f x · ∂μ) = ∫ x, fc x ∂μ := by\n    ext; simp [integral_apply fc_integrable, fc]\n  have hcont₂ : ContinuousOn (fun r => ∫ x, f x r ∂μ) (spectrum 𝕜 a) := by\n    rw [continuousOn_iff_continuous_restrict]\n    convert map_continuous (∫ x, fc x ∂μ)\n  rw [integral_congr_ae (.of_forall fun _ ↦ cfc_apply ..), cfc_apply ..,\n    cfcHom_integral _ _ fc_integrable]\n  congr\n\n"}
{"name":"cfc_integral'","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝¹⁰ : RCLike 𝕜\ninst✝⁹ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝⁸ : NormedRing A\ninst✝⁷ : StarRing A\ninst✝⁶ : NormedAlgebra 𝕜 A\ninst✝⁵ : NormedAlgebra Real A\ninst✝⁴ : CompleteSpace A\ninst✝³ : ContinuousFunctionalCalculus 𝕜 p\ninst✝² : TopologicalSpace X\ninst✝¹ : OpensMeasurableSpace X\nf : X → 𝕜 → 𝕜\nbound : X → Real\na : A\ninst✝ : SecondCountableTopologyEither X (ContinuousMap (↑(spectrum 𝕜 a)) 𝕜)\nhf : Continuous (Function.uncurry fun x => (spectrum 𝕜 a).restrict (f x))\nhbound : ∀ (x : X) (z : 𝕜), Membership.mem (spectrum 𝕜 a) z → LE.le (Norm.norm (f x z)) (Norm.norm (bound x))\nhbound_finite_integral : MeasureTheory.HasFiniteIntegral bound μ\nha : autoParam (p a) _auto✝\n⊢ Eq (cfc (fun r => MeasureTheory.integral μ fun x => f x r) a) (MeasureTheory.integral μ fun x => cfc (f x) a)","decl":"/-- The continuous functional calculus commutes with integration. -/\nlemma cfc_integral' [TopologicalSpace X] [OpensMeasurableSpace X] (f : X → 𝕜 → 𝕜)\n    (bound : X → ℝ) (a : A) [SecondCountableTopologyEither X C(spectrum 𝕜 a, 𝕜)]\n    (hf : Continuous (fun x => (spectrum 𝕜 a).restrict (f x)).uncurry)\n    (hbound : ∀ x, ∀ z ∈ spectrum 𝕜 a, ‖f x z‖ ≤ ‖bound x‖)\n    (hbound_finite_integral : HasFiniteIntegral bound μ) (ha : p a := by cfc_tac) :\n    cfc (fun r => ∫ x, f x r ∂μ) a = ∫ x, cfc (f x) a ∂μ := by\n  refine cfc_integral f bound a ?_ ?_ hbound hbound_finite_integral\n  · exact (continuousOn_iff_continuous_restrict.mpr <| hf.uncurry_left ·)\n  · exact ContinuousMap.curry ⟨_, hf⟩ |>.continuous\n\n"}
{"name":"cfcₙL_integral","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝⁹ : RCLike 𝕜\ninst✝⁸ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝⁷ : NonUnitalNormedRing A\ninst✝⁶ : StarRing A\ninst✝⁵ : CompleteSpace A\ninst✝⁴ : NormedSpace 𝕜 A\ninst✝³ : NormedSpace Real A\ninst✝² : IsScalarTower 𝕜 A A\ninst✝¹ : SMulCommClass 𝕜 A A\ninst✝ : NonUnitalContinuousFunctionalCalculus 𝕜 p\na : A\nf : X → ContinuousMapZero (↑(quasispectrum 𝕜 a)) 𝕜\nhf₁ : MeasureTheory.Integrable f μ\nha : autoParam (p a) _auto✝\n⊢ Eq (MeasureTheory.integral μ fun x => (cfcₙL ha) (f x)) ((cfcₙL ha) (MeasureTheory.integral μ fun x => f x))","decl":"lemma cfcₙL_integral (a : A) (f : X → C(quasispectrum 𝕜 a, 𝕜)₀) (hf₁ : Integrable f μ)\n    (ha : p a := by cfc_tac) :\n    ∫ x, cfcₙL (a := a) ha (f x) ∂μ = cfcₙL (a := a) ha (∫ x, f x ∂μ) := by\n  rw [ContinuousLinearMap.integral_comp_comm _ hf₁]\n\n"}
{"name":"cfcₙHom_integral","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝⁹ : RCLike 𝕜\ninst✝⁸ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝⁷ : NonUnitalNormedRing A\ninst✝⁶ : StarRing A\ninst✝⁵ : CompleteSpace A\ninst✝⁴ : NormedSpace 𝕜 A\ninst✝³ : NormedSpace Real A\ninst✝² : IsScalarTower 𝕜 A A\ninst✝¹ : SMulCommClass 𝕜 A A\ninst✝ : NonUnitalContinuousFunctionalCalculus 𝕜 p\na : A\nf : X → ContinuousMapZero (↑(quasispectrum 𝕜 a)) 𝕜\nhf₁ : MeasureTheory.Integrable f μ\nha : autoParam (p a) _auto✝\n⊢ Eq (MeasureTheory.integral μ fun x => (cfcₙHom ha) (f x)) ((cfcₙHom ha) (MeasureTheory.integral μ fun x => f x))","decl":"lemma cfcₙHom_integral (a : A) (f : X → C(quasispectrum 𝕜 a, 𝕜)₀) (hf₁ : Integrable f μ)\n    (ha : p a := by cfc_tac) :\n    ∫ x, cfcₙHom (a := a) ha (f x) ∂μ = cfcₙHom (a := a) ha (∫ x, f x ∂μ) :=\n  cfcₙL_integral a f hf₁ ha\n\n"}
{"name":"cfcₙ_integral","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝¹² : RCLike 𝕜\ninst✝¹¹ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝¹⁰ : NonUnitalNormedRing A\ninst✝⁹ : StarRing A\ninst✝⁸ : CompleteSpace A\ninst✝⁷ : NormedSpace 𝕜 A\ninst✝⁶ : NormedSpace Real A\ninst✝⁵ : IsScalarTower 𝕜 A A\ninst✝⁴ : SMulCommClass 𝕜 A A\ninst✝³ : NonUnitalContinuousFunctionalCalculus 𝕜 p\ninst✝² : TopologicalSpace X\ninst✝¹ : OpensMeasurableSpace X\nf : X → 𝕜 → 𝕜\nbound : X → Real\na : A\ninst✝ : SecondCountableTopologyEither X (ContinuousMapZero (↑(quasispectrum 𝕜 a)) 𝕜)\nhf₁ : ∀ (x : X), ContinuousOn (f x) (quasispectrum 𝕜 a)\nhf₂ : ∀ (x : X), Eq (f x 0) 0\nhf₃ : Continuous fun x => { toFun := (quasispectrum 𝕜 a).restrict (f x), continuous_toFun := ⋯, map_zero' := ⋯ }\nhbound : ∀ (x : X) (z : 𝕜), Membership.mem (quasispectrum 𝕜 a) z → LE.le (Norm.norm (f x z)) (Norm.norm (bound x))\nhbound_finite_integral : MeasureTheory.HasFiniteIntegral bound μ\nha : autoParam (p a) _auto✝\n⊢ Eq (cfcₙ (fun r => MeasureTheory.integral μ fun x => f x r) a) (MeasureTheory.integral μ fun x => cfcₙ (f x) a)","decl":"open ContinuousMapZero in\n/-- The non-unital continuous functional calculus commutes with integration. -/\nlemma cfcₙ_integral [TopologicalSpace X] [OpensMeasurableSpace X] (f : X → 𝕜 → 𝕜)\n    (bound : X → ℝ) (a : A) [SecondCountableTopologyEither X C(quasispectrum 𝕜 a, 𝕜)₀]\n    (hf₁ : ∀ x, ContinuousOn (f x) (quasispectrum 𝕜 a))\n    (hf₂ : ∀ x, f x 0 = 0)\n    (hf₃ : Continuous (fun x ↦ (⟨⟨_, hf₁ x |>.restrict⟩, hf₂ x⟩ : C(quasispectrum 𝕜 a, 𝕜)₀)))\n    (hbound : ∀ x, ∀ z ∈ quasispectrum 𝕜 a, ‖f x z‖ ≤ ‖bound x‖)\n    (hbound_finite_integral : HasFiniteIntegral bound μ) (ha : p a := by cfc_tac) :\n    cfcₙ (fun r => ∫ x, f x r ∂μ) a = ∫ x, cfcₙ (f x) a ∂μ := by\n  let fc : X → C(quasispectrum 𝕜 a, 𝕜)₀ := fun x => ⟨⟨_, (hf₁ x).restrict⟩, hf₂ x⟩\n  have fc_integrable : Integrable fc μ := by\n    refine ⟨hf₃.aestronglyMeasurable, ?_⟩\n    refine hbound_finite_integral.mono <| .of_forall fun x ↦ ?_\n    change ‖(fc x : C(quasispectrum  𝕜 a, 𝕜))‖ ≤ ‖bound x‖\n    rw [ContinuousMap.norm_le _ (norm_nonneg (bound x))]\n    exact fun z ↦ hbound x z.1 z.2\n  have h_int_fc : (quasispectrum 𝕜 a).restrict (∫ x, f x · ∂μ) = ∫ x, fc x ∂μ := by\n    ext; simp [integral_apply fc_integrable, fc]\n  have hcont₂ : ContinuousOn (fun r => ∫ x, f x r ∂μ) (quasispectrum 𝕜 a) := by\n    rw [continuousOn_iff_continuous_restrict]\n    convert map_continuous (∫ x, fc x ∂μ)\n  rw [integral_congr_ae (.of_forall fun _ ↦ cfcₙ_apply ..), cfcₙ_apply ..,\n    cfcₙHom_integral _ _ fc_integrable]\n  congr\n\n"}
{"name":"cfcₙ_integral'","module":"Mathlib.Analysis.CStarAlgebra.ContinuousFunctionalCalculus.Integral","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\np : A → Prop\ninst✝¹² : RCLike 𝕜\ninst✝¹¹ : MeasurableSpace X\nμ : MeasureTheory.Measure X\ninst✝¹⁰ : NonUnitalNormedRing A\ninst✝⁹ : StarRing A\ninst✝⁸ : CompleteSpace A\ninst✝⁷ : NormedSpace 𝕜 A\ninst✝⁶ : NormedSpace Real A\ninst✝⁵ : IsScalarTower 𝕜 A A\ninst✝⁴ : SMulCommClass 𝕜 A A\ninst✝³ : NonUnitalContinuousFunctionalCalculus 𝕜 p\ninst✝² : TopologicalSpace X\ninst✝¹ : OpensMeasurableSpace X\nf : X → 𝕜 → 𝕜\nbound : X → Real\na : A\ninst✝ : SecondCountableTopologyEither X (ContinuousMapZero (↑(quasispectrum 𝕜 a)) 𝕜)\nhf : Continuous (Function.uncurry fun x => (quasispectrum 𝕜 a).restrict (f x))\nhf₂ : ∀ (x : X), Eq (f x 0) 0\nhbound : ∀ (x : X) (z : 𝕜), Membership.mem (quasispectrum 𝕜 a) z → LE.le (Norm.norm (f x z)) (Norm.norm (bound x))\nhbound_finite_integral : MeasureTheory.HasFiniteIntegral bound μ\nha : autoParam (p a) _auto✝\n⊢ Eq (cfcₙ (fun r => MeasureTheory.integral μ fun x => f x r) a) (MeasureTheory.integral μ fun x => cfcₙ (f x) a)","decl":"/-- The non-unital continuous functional calculus commutes with integration. -/\nlemma cfcₙ_integral' [TopologicalSpace X] [OpensMeasurableSpace X] (f : X → 𝕜 → 𝕜)\n    (bound : X → ℝ) (a : A) [SecondCountableTopologyEither X C(quasispectrum 𝕜 a, 𝕜)₀]\n    (hf : Continuous (fun x => (quasispectrum 𝕜 a).restrict (f x)).uncurry)\n    (hf₂ : ∀ x, f x 0 = 0)\n    (hbound : ∀ x, ∀ z ∈ quasispectrum 𝕜 a, ‖f x z‖ ≤ ‖bound x‖)\n    (hbound_finite_integral : HasFiniteIntegral bound μ) (ha : p a := by cfc_tac) :\n    cfcₙ (fun r => ∫ x, f x r ∂μ) a = ∫ x, cfcₙ (f x) a ∂μ := by\n  refine cfcₙ_integral f bound a ?_ hf₂ ?_ hbound hbound_finite_integral\n  · exact (continuousOn_iff_continuous_restrict.mpr <| hf.uncurry_left ·)\n  · let g := ((↑) : C(quasispectrum 𝕜 a, 𝕜)₀ → C(quasispectrum 𝕜 a, 𝕜))\n    refine ((isInducing_iff g).mpr rfl).continuous_iff.mpr ?_\n    exact ContinuousMap.curry ⟨_, hf⟩ |>.continuous\n\n"}
