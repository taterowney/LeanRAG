{"name":"FreeAlgebra.cardinalMk_eq_max_lift","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nX : Type v\ninst✝¹ : Nonempty X\ninst✝ : Nontrivial R\n⊢ Eq (Cardinal.mk (FreeAlgebra R X)) (Max.max (Max.max (Cardinal.lift.{v, u} (Cardinal.mk R)) (Cardinal.lift.{u, v} (Cardinal.mk X))) Cardinal.aleph0)","decl":"@[simp]\ntheorem cardinalMk_eq_max_lift [Nonempty X] [Nontrivial R] :\n    #(FreeAlgebra R X) = Cardinal.lift.{v} #R ⊔ Cardinal.lift.{u} #X ⊔ ℵ₀ := by\n  have hX := mk_freeMonoid X\n  haveI : Infinite (FreeMonoid X) := infinite_iff.2 (by simp [hX])\n  rw [equivMonoidAlgebraFreeMonoid.toEquiv.cardinal_eq, MonoidAlgebra,\n    mk_finsupp_lift_of_infinite, hX, lift_max, lift_aleph0, sup_comm, ← sup_assoc]\n\n"}
{"name":"FreeAlgebra.cardinalMk_eq_lift","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝¹ : CommSemiring R\nX : Type v\ninst✝ : IsEmpty X\n⊢ Eq (Cardinal.mk (FreeAlgebra R X)) (Cardinal.lift.{v, u} (Cardinal.mk R))","decl":"@[simp]\ntheorem cardinalMk_eq_lift [IsEmpty X] : #(FreeAlgebra R X) = Cardinal.lift.{v} #R := by\n  have := lift_mk_eq'.2 ⟨show (FreeMonoid X →₀ R) ≃ R from Equiv.finsuppUnique⟩\n  rw [lift_id'.{u, v}, lift_umax] at this\n  rwa [equivMonoidAlgebraFreeMonoid.toEquiv.cardinal_eq, MonoidAlgebra]\n\n"}
{"name":"FreeAlgebra.cardinalMk_eq_one","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝¹ : CommSemiring R\nX : Type v\ninst✝ : Subsingleton R\n⊢ Eq (Cardinal.mk (FreeAlgebra R X)) 1","decl":"@[nontriviality]\ntheorem cardinalMk_eq_one [Subsingleton R] : #(FreeAlgebra R X) = 1 := by\n  rw [equivMonoidAlgebraFreeMonoid.toEquiv.cardinal_eq, MonoidAlgebra, mk_eq_one]\n\n"}
{"name":"FreeAlgebra.cardinalMk_le_max_lift","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝ : CommSemiring R\nX : Type v\n⊢ LE.le (Cardinal.mk (FreeAlgebra R X)) (Max.max (Max.max (Cardinal.lift.{v, u} (Cardinal.mk R)) (Cardinal.lift.{u, v} (Cardinal.mk X))) Cardinal.aleph0)","decl":"theorem cardinalMk_le_max_lift :\n    #(FreeAlgebra R X) ≤ Cardinal.lift.{v} #R ⊔ Cardinal.lift.{u} #X ⊔ ℵ₀ := by\n  cases subsingleton_or_nontrivial R\n  · exact (cardinalMk_eq_one R X).trans_le (le_max_of_le_right one_le_aleph0)\n  cases isEmpty_or_nonempty X\n  · exact (cardinalMk_eq_lift R X).trans_le (le_max_of_le_left <| le_max_left _ _)\n  · exact (cardinalMk_eq_max_lift R X).le\n\n"}
{"name":"FreeAlgebra.cardinalMk_eq_max","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nX : Type u\ninst✝¹ : Nonempty X\ninst✝ : Nontrivial R\n⊢ Eq (Cardinal.mk (FreeAlgebra R X)) (Max.max (Max.max (Cardinal.mk R) (Cardinal.mk X)) Cardinal.aleph0)","decl":"theorem cardinalMk_eq_max [Nonempty X] [Nontrivial R] : #(FreeAlgebra R X) = #R ⊔ #X ⊔ ℵ₀ := by\n  simp\n\n"}
{"name":"FreeAlgebra.cardinalMk_eq","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝¹ : CommSemiring R\nX : Type u\ninst✝ : IsEmpty X\n⊢ Eq (Cardinal.mk (FreeAlgebra R X)) (Cardinal.mk R)","decl":"theorem cardinalMk_eq [IsEmpty X] : #(FreeAlgebra R X) = #R := by\n  simp\n\n"}
{"name":"FreeAlgebra.cardinalMk_le_max","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝ : CommSemiring R\nX : Type u\n⊢ LE.le (Cardinal.mk (FreeAlgebra R X)) (Max.max (Max.max (Cardinal.mk R) (Cardinal.mk X)) Cardinal.aleph0)","decl":"theorem cardinalMk_le_max : #(FreeAlgebra R X) ≤ #R ⊔ #X ⊔ ℵ₀ := by\n  simpa using cardinalMk_le_max_lift R X\n\n"}
{"name":"Algebra.lift_cardinalMk_adjoin_le","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nA : Type v\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ LE.le (Cardinal.lift.{u, v} (Cardinal.mk (Subtype fun x => Membership.mem (Algebra.adjoin R s) x))) (Max.max (Max.max (Cardinal.lift.{v, u} (Cardinal.mk R)) (Cardinal.lift.{u, v} (Cardinal.mk ↑s))) Cardinal.aleph0)","decl":"theorem lift_cardinalMk_adjoin_le {A : Type v} [Semiring A] [Algebra R A] (s : Set A) :\n    lift.{u} #(adjoin R s) ≤ lift.{v} #R ⊔ lift.{u} #s ⊔ ℵ₀ := by\n  have H := mk_range_le_lift (f := FreeAlgebra.lift R ((↑) : s → A))\n  rw [lift_umax, lift_id'.{v, u}] at H\n  rw [Algebra.adjoin_eq_range_freeAlgebra_lift]\n  exact H.trans (FreeAlgebra.cardinalMk_le_max_lift R s)\n\n"}
{"name":"Algebra.cardinalMk_adjoin_le","module":"Mathlib.Algebra.FreeAlgebra.Cardinality","initialProofState":"R : Type u\ninst✝² : CommSemiring R\nA : Type u\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set A\n⊢ LE.le (Cardinal.mk (Subtype fun x => Membership.mem (Algebra.adjoin R s) x)) (Max.max (Max.max (Cardinal.mk R) (Cardinal.mk ↑s)) Cardinal.aleph0)","decl":"theorem cardinalMk_adjoin_le {A : Type u} [Semiring A] [Algebra R A] (s : Set A) :\n    #(adjoin R s) ≤ #R ⊔ #s ⊔ ℵ₀ := by\n  simpa using lift_cardinalMk_adjoin_le R s\n\n"}
