{"name":"IsLocalRing.map_mkQ_eq","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nM : Type u_2\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : IsLocalRing R\nN₁ N₂ : Submodule R M\nh : LE.le N₁ N₂\nh' : N₂.FG\n⊢ Iff (Eq (Submodule.map (HSMul.hSMul (IsLocalRing.maximalIdeal R) N₂).mkQ N₁) (Submodule.map (HSMul.hSMul (IsLocalRing.maximalIdeal R) N₂).mkQ N₂)) (Eq N₁ N₂)","decl":"theorem map_mkQ_eq {N₁ N₂ : Submodule R M} (h : N₁ ≤ N₂) (h' : N₂.FG) :\n    N₁.map (Submodule.mkQ (𝔪 • N₂)) = N₂.map (Submodule.mkQ (𝔪 • N₂)) ↔ N₁ = N₂ := by\n  constructor\n  · intro hN\n    have : N₂ ≤ 𝔪 • N₂ ⊔ N₁ := by\n      simpa using Submodule.comap_mono (f := Submodule.mkQ (𝔪 • N₂)) hN.ge\n    rw [sup_comm] at this\n    exact h.antisymm (Submodule.le_of_le_smul_of_le_jacobson_bot h'\n      (by rw [jacobson_eq_maximalIdeal]; exact bot_ne_top) this)\n  · rintro rfl; simp\n\n"}
{"name":"IsLocalRing.map_mkQ_eq_top","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\nN : Submodule R M\ninst✝ : Module.Finite R M\n⊢ Iff (Eq (Submodule.map (HSMul.hSMul (IsLocalRing.maximalIdeal R) Top.top).mkQ N) Top.top) (Eq N Top.top)","decl":"theorem map_mkQ_eq_top {N : Submodule R M} [Module.Finite R M] :\n    N.map (Submodule.mkQ (𝔪 • ⊤)) = ⊤ ↔ N = ⊤ := by\n  rw [← map_mkQ_eq (N₁ := N) le_top Module.Finite.fg_top, Submodule.map_top, Submodule.range_mkQ]\n\n"}
{"name":"IsLocalRing.map_tensorProduct_mk_eq_top","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\nN : Submodule R M\ninst✝ : Module.Finite R M\n⊢ Iff (Eq (Submodule.map ((TensorProduct.mk R (IsLocalRing.ResidueField R) M) 1) N) Top.top) (Eq N Top.top)","decl":"theorem map_tensorProduct_mk_eq_top {N : Submodule R M} [Module.Finite R M] :\n    N.map (TensorProduct.mk R k M 1) = ⊤ ↔ N = ⊤ := by\n  constructor\n  · intro hN\n    letI : Module k (M ⧸ (𝔪 • ⊤ : Submodule R M)) :=\n      inferInstanceAs (Module (R ⧸ 𝔪) (M ⧸ 𝔪 • (⊤ : Submodule R M)))\n    letI : IsScalarTower R k (M ⧸ (𝔪 • ⊤ : Submodule R M)) :=\n      inferInstanceAs (IsScalarTower R (R ⧸ 𝔪) (M ⧸ 𝔪 • (⊤ : Submodule R M)))\n    let f := AlgebraTensorModule.lift (((LinearMap.ringLmapEquivSelf k k _).symm\n      (Submodule.mkQ (𝔪 • ⊤ : Submodule R M))).restrictScalars R)\n    have : f.comp (TensorProduct.mk R k M 1) = Submodule.mkQ (𝔪 • ⊤) := by ext; simp [f]\n    have hf : Function.Surjective f := by\n      intro x; obtain ⟨x, rfl⟩ := Submodule.mkQ_surjective _ x\n      rw [← this, LinearMap.comp_apply]; exact ⟨_, rfl⟩\n    apply_fun Submodule.map f at hN\n    rwa [← Submodule.map_comp, this, Submodule.map_top, LinearMap.range_eq_top.2 hf,\n      map_mkQ_eq_top] at hN\n  · rintro rfl; rw [Submodule.map_top, LinearMap.range_eq_top]\n    exact TensorProduct.mk_surjective R M k Ideal.Quotient.mk_surjective\n\n"}
{"name":"IsLocalRing.subsingleton_tensorProduct","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.Finite R M\n⊢ Iff (Subsingleton (TensorProduct R (IsLocalRing.ResidueField R) M)) (Subsingleton M)","decl":"theorem subsingleton_tensorProduct [Module.Finite R M] :\n    Subsingleton (k ⊗[R] M) ↔ Subsingleton M := by\n  rw [← Submodule.subsingleton_iff R, ← subsingleton_iff_bot_eq_top,\n    ← Submodule.subsingleton_iff R, ← subsingleton_iff_bot_eq_top,\n    ← map_tensorProduct_mk_eq_top (M := M), Submodule.map_bot]\n\n"}
{"name":"IsLocalRing.span_eq_top_of_tmul_eq_basis","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.Finite R M\nι : Type u_3\nf : ι → M\nb : Basis ι (IsLocalRing.ResidueField R) (TensorProduct R (IsLocalRing.ResidueField R) M)\nhb : ∀ (i : ι), Eq (TensorProduct.tmul R 1 (f i)) (b i)\n⊢ Eq (Submodule.span R (Set.range f)) Top.top","decl":"theorem span_eq_top_of_tmul_eq_basis [Module.Finite R M] {ι}\n    (f : ι → M) (b : Basis ι k (k ⊗[R] M))\n    (hb : ∀ i, 1 ⊗ₜ f i = b i) : Submodule.span R (Set.range f) = ⊤ := by\n  rw [← map_tensorProduct_mk_eq_top, Submodule.map_span, ← Submodule.restrictScalars_span R k\n    Ideal.Quotient.mk_surjective, Submodule.restrictScalars_eq_top_iff,\n    ← b.span_eq, ← Set.range_comp]\n  simp only [Function.comp_def, mk_apply, hb, Basis.span_eq]\n\n"}
{"name":"LocalRing.map_mkQ_eq","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nM : Type u_2\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : IsLocalRing R\nN₁ N₂ : Submodule R M\nh : LE.le N₁ N₂\nh' : N₂.FG\n⊢ Iff (Eq (Submodule.map (HSMul.hSMul (IsLocalRing.maximalIdeal R) N₂).mkQ N₁) (Submodule.map (HSMul.hSMul (IsLocalRing.maximalIdeal R) N₂).mkQ N₂)) (Eq N₁ N₂)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.map_mkQ_eq := IsLocalRing.map_mkQ_eq\n\n"}
{"name":"LocalRing.map_mkQ_eq_top","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\nN : Submodule R M\ninst✝ : Module.Finite R M\n⊢ Iff (Eq (Submodule.map (HSMul.hSMul (IsLocalRing.maximalIdeal R) Top.top).mkQ N) Top.top) (Eq N Top.top)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.map_mkQ_eq_top := IsLocalRing.map_mkQ_eq_top\n\n"}
{"name":"LocalRing.map_tensorProduct_mk_eq_top","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\nN : Submodule R M\ninst✝ : Module.Finite R M\n⊢ Iff (Eq (Submodule.map ((TensorProduct.mk R (IsLocalRing.ResidueField R) M) 1) N) Top.top) (Eq N Top.top)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.map_tensorProduct_mk_eq_top := IsLocalRing.map_tensorProduct_mk_eq_top\n\n"}
{"name":"LocalRing.subsingleton_tensorProduct","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.Finite R M\n⊢ Iff (Subsingleton (TensorProduct R (IsLocalRing.ResidueField R) M)) (Subsingleton M)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.subsingleton_tensorProduct := IsLocalRing.subsingleton_tensorProduct\n\n"}
{"name":"LocalRing.span_eq_top_of_tmul_eq_basis","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.Finite R M\nι : Type u_3\nf : ι → M\nb : Basis ι (IsLocalRing.ResidueField R) (TensorProduct R (IsLocalRing.ResidueField R) M)\nhb : ∀ (i : ι), Eq (TensorProduct.tmul R 1 (f i)) (b i)\n⊢ Eq (Submodule.span R (Set.range f)) Top.top","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.span_eq_top_of_tmul_eq_basis := IsLocalRing.span_eq_top_of_tmul_eq_basis\n\n"}
{"name":"lTensor_injective_of_exact_of_exact_of_rTensor_injective","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_7\ninst✝¹² : CommRing R\nM₁ : Type u_1\nM₂ : Type u_2\nM₃ : Type u_3\nN₁ : Type u_4\nN₂ : Type u_5\nN₃ : Type u_6\ninst✝¹¹ : AddCommGroup M₁\ninst✝¹⁰ : Module R M₁\ninst✝⁹ : AddCommGroup M₂\ninst✝⁸ : Module R M₂\ninst✝⁷ : AddCommGroup M₃\ninst✝⁶ : Module R M₃\ninst✝⁵ : AddCommGroup N₁\ninst✝⁴ : Module R N₁\ninst✝³ : AddCommGroup N₂\ninst✝² : Module R N₂\ninst✝¹ : AddCommGroup N₃\ninst✝ : Module R N₃\nf₁ : LinearMap (RingHom.id R) M₁ M₂\nf₂ : LinearMap (RingHom.id R) M₂ M₃\ng₁ : LinearMap (RingHom.id R) N₁ N₂\ng₂ : LinearMap (RingHom.id R) N₂ N₃\nhfexact : Function.Exact ⇑f₁ ⇑f₂\nhfsurj : Function.Surjective ⇑f₂\nhgexact : Function.Exact ⇑g₁ ⇑g₂\nhgsurj : Function.Surjective ⇑g₂\nhfinj : Function.Injective ⇑(LinearMap.rTensor N₃ f₁)\nhginj : Function.Injective ⇑(LinearMap.lTensor M₂ g₁)\n⊢ Function.Injective ⇑(LinearMap.lTensor M₃ g₁)","decl":"open Function in\n/--\nGiven `M₁ → M₂ → M₃ → 0` and `N₁ → N₂ → N₃ → 0`,\nif `M₁ ⊗ N₃ → M₂ ⊗ N₃` and `M₂ ⊗ N₁ → M₂ ⊗ N₂` are both injective,\nthen `M₃ ⊗ N₁ → M₃ ⊗ N₂` is also injective.\n-/\ntheorem lTensor_injective_of_exact_of_exact_of_rTensor_injective\n    {M₁ M₂ M₃ N₁ N₂ N₃}\n    [AddCommGroup M₁] [Module R M₁] [AddCommGroup M₂] [Module R M₂] [AddCommGroup M₃] [Module R M₃]\n    [AddCommGroup N₁] [Module R N₁] [AddCommGroup N₂] [Module R N₂] [AddCommGroup N₃] [Module R N₃]\n    {f₁ : M₁ →ₗ[R] M₂} {f₂ : M₂ →ₗ[R] M₃} {g₁ : N₁ →ₗ[R] N₂} {g₂ : N₂ →ₗ[R] N₃}\n    (hfexact : Exact f₁ f₂) (hfsurj : Surjective f₂)\n    (hgexact : Exact g₁ g₂) (hgsurj : Surjective g₂)\n    (hfinj : Injective (f₁.rTensor N₃)) (hginj : Injective (g₁.lTensor M₂)) :\n    Injective (g₁.lTensor M₃) := by\n  rw [injective_iff_map_eq_zero]\n  intro x hx\n  obtain ⟨x, rfl⟩ := f₂.rTensor_surjective N₁ hfsurj x\n  have : f₂.rTensor N₂ (g₁.lTensor M₂ x) = 0 := by\n    rw [← hx, ← LinearMap.comp_apply, ← LinearMap.comp_apply, LinearMap.rTensor_comp_lTensor,\n      LinearMap.lTensor_comp_rTensor]\n  obtain ⟨y, hy⟩ := (rTensor_exact N₂ hfexact hfsurj _).mp this\n  have : g₂.lTensor M₁ y = 0 := by\n    apply hfinj\n    trans g₂.lTensor M₂ (g₁.lTensor M₂ x)\n    · rw [← hy, ← LinearMap.comp_apply, ← LinearMap.comp_apply, LinearMap.rTensor_comp_lTensor,\n        LinearMap.lTensor_comp_rTensor]\n    rw [← LinearMap.comp_apply, ← LinearMap.lTensor_comp, hgexact.linearMap_comp_eq_zero]\n    simp\n  obtain ⟨z, rfl⟩ := (lTensor_exact _ hgexact hgsurj _).mp this\n  obtain rfl : f₁.rTensor N₁ z = x := by\n    apply hginj\n    simp only [← hy, ← LinearMap.comp_apply, ← LinearMap.comp_apply, LinearMap.lTensor_comp_rTensor,\n      LinearMap.rTensor_comp_lTensor]\n  rw [← LinearMap.comp_apply, ← LinearMap.rTensor_comp, hfexact.linearMap_comp_eq_zero]\n  simp\n\n"}
{"name":"Module.exists_basis_of_basis_baseChange","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.FinitePresentation R M\nι : Type u\nv : ι → M\nhli : LinearIndependent (IsLocalRing.ResidueField R) (Function.comp (⇑((TensorProduct.mk R (IsLocalRing.ResidueField R) M) 1)) v)\nhsp : Eq (Submodule.span (IsLocalRing.ResidueField R) (Set.range (Function.comp (⇑((TensorProduct.mk R (IsLocalRing.ResidueField R) M) 1)) v))) Top.top\nH : Function.Injective ⇑(LinearMap.rTensor M (Submodule.subtype (IsLocalRing.maximalIdeal R)))\n⊢ Exists fun b => ∀ (i : ι), Eq (b i) (v i)","decl":"/-- If `M` is of finite presentation over a local ring `(R, 𝔪, k)` such that\n`𝔪 ⊗ M → M` is injective, then every family of elements that is a `k`-basis of\n`k ⊗ M` is an `R`-basis of `M`. -/\nlemma exists_basis_of_basis_baseChange [Module.FinitePresentation R M]\n    {ι : Type u} (v : ι → M) (hli : LinearIndependent k (TensorProduct.mk R k M 1 ∘ v))\n    (hsp : Submodule.span k (Set.range (TensorProduct.mk R k M 1 ∘ v)) = ⊤)\n    (H : Function.Injective ((𝔪).subtype.rTensor M)) :\n    ∃ (b : Basis ι R M), ∀ i, b i = v i := by\n  let bk : Basis ι k (k ⊗[R] M) := Basis.mk hli (by rw [hsp])\n  haveI : Finite ι := Module.Finite.finite_basis bk\n  letI : Fintype ι := Fintype.ofFinite ι\n  letI : IsNoetherian k (k ⊗[R] (ι →₀ R)) :=\n    isNoetherian_of_isNoetherianRing_of_finite k (k ⊗[R] (ι →₀ R))\n  let i := Finsupp.linearCombination R v\n  have hi : Surjective i := by\n    rw [← LinearMap.range_eq_top, Finsupp.range_linearCombination]\n    refine IsLocalRing.span_eq_top_of_tmul_eq_basis (R := R) (f := v) bk\n      (fun _ ↦ by simp [bk])\n  have : Module.Finite R (LinearMap.ker i) := by\n    constructor\n    exact (Submodule.fg_top _).mpr (Module.FinitePresentation.fg_ker i hi)\n  -- We claim that `i` is actually a bijection,\n  -- hence `v` induces an isomorphism `M ≃[R] Rᴵ` showing that `v` is a basis.\n  let iequiv : (ι →₀ R) ≃ₗ[R] M := by\n    refine LinearEquiv.ofBijective i ⟨?_, hi⟩\n    -- By Nakayama's lemma, it suffices to show that `k ⊗ ker(i) = 0`.\n    rw [← LinearMap.ker_eq_bot, ← Submodule.subsingleton_iff_eq_bot,\n      ← IsLocalRing.subsingleton_tensorProduct (R := R), subsingleton_iff_forall_eq 0]\n    have : Function.Surjective (i.baseChange k) := i.lTensor_surjective _ hi\n    -- By construction, `k ⊗ i : kᴵ → k ⊗ M` is bijective.\n    have hi' : Function.Bijective (i.baseChange k) := by\n      refine ⟨?_, this⟩\n      rw [← LinearMap.ker_eq_bot (M := k ⊗[R] (ι →₀ R)) (f := i.baseChange k),\n        ← Submodule.finrank_eq_zero (R := k) (M := k ⊗[R] (ι →₀ R)),\n        ← Nat.add_right_inj (n := Module.finrank k (LinearMap.range <| i.baseChange k)),\n        LinearMap.finrank_range_add_finrank_ker (V := k ⊗[R] (ι →₀ R)),\n        LinearMap.range_eq_top.mpr this, finrank_top]\n      simp only [Module.finrank_tensorProduct, Module.finrank_self,\n        Module.finrank_finsupp_self, one_mul, add_zero]\n      rw [Module.finrank_eq_card_basis bk]\n    -- On the other hand, `m ⊗ M → M` injective => `Tor₁(k, M) = 0` => `k ⊗ ker(i) → kᴵ` injective.\n    intro x\n    refine lTensor_injective_of_exact_of_exact_of_rTensor_injective\n      (N₁ := LinearMap.ker i) (N₂ := ι →₀ R) (N₃ := M)\n      (f₁ := (𝔪).subtype) (f₂ := Submodule.mkQ 𝔪)\n      (g₁ := (LinearMap.ker i).subtype) (g₂ := i) (LinearMap.exact_subtype_mkQ 𝔪)\n      (Submodule.mkQ_surjective _) (LinearMap.exact_subtype_ker_map i) hi H ?_ ?_\n    · apply Module.Flat.lTensor_preserves_injective_linearMap\n      exact Subtype.val_injective\n    · apply hi'.injective\n      rw [LinearMap.baseChange_eq_ltensor]\n      erw [← LinearMap.comp_apply (i.lTensor k), ← LinearMap.lTensor_comp]\n      rw [(LinearMap.exact_subtype_ker_map i).linearMap_comp_eq_zero]\n      simp only [LinearMap.lTensor_zero, LinearMap.zero_apply, map_zero]\n  use Basis.ofRepr iequiv.symm\n  intro j\n  simp [iequiv, i]\n\n"}
{"name":"Module.exists_basis_of_span_of_maximalIdeal_rTensor_injective","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.FinitePresentation R M\nH : Function.Injective ⇑(LinearMap.rTensor M (Submodule.subtype (IsLocalRing.maximalIdeal R)))\nι : Type u\nv : ι → M\nhv : Eq (Submodule.span R (Set.range v)) Top.top\n⊢ Exists fun κ => Exists fun a => Exists fun b => ∀ (i : κ), Eq (b i) (v (a i))","decl":"/--\nIf `M` is a finitely presented module over a local ring `(R, 𝔪)` such that `m ⊗ M → M` is\ninjective, then every generating family contains a basis.\n-/\nlemma exists_basis_of_span_of_maximalIdeal_rTensor_injective [Module.FinitePresentation R M]\n    (H : Function.Injective ((𝔪).subtype.rTensor M))\n    {ι : Type u} (v : ι → M) (hv : Submodule.span R (Set.range v) = ⊤) :\n    ∃ (κ : Type u) (a : κ → ι) (b : Basis κ R M), ∀ i, b i = v (a i) := by\n  have := (map_tensorProduct_mk_eq_top (N := Submodule.span R (Set.range v))).mpr hv\n  rw [← Submodule.span_image, ← Set.range_comp, eq_top_iff, ← SetLike.coe_subset_coe,\n    Submodule.top_coe] at this\n  have : Submodule.span k (Set.range (TensorProduct.mk R k M 1 ∘ v)) = ⊤ := by\n    rw [eq_top_iff]\n    exact Set.Subset.trans this (Submodule.span_subset_span _ _ _)\n  obtain ⟨κ, a, ha, hsp, hli⟩ := exists_linearIndependent' k (TensorProduct.mk R k M 1 ∘ v)\n  rw [this] at hsp\n  obtain ⟨b, hb⟩ := exists_basis_of_basis_baseChange (v ∘ a) hli hsp H\n  use κ, a, b, hb\n\n"}
{"name":"Module.exists_basis_of_span_of_flat","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nM : Type u_2\ninst✝⁴ : AddCommGroup M\ninst✝³ : Module R M\ninst✝² : IsLocalRing R\ninst✝¹ : Module.FinitePresentation R M\ninst✝ : Module.Flat R M\nι : Type u\nv : ι → M\nhv : Eq (Submodule.span R (Set.range v)) Top.top\n⊢ Exists fun κ => Exists fun a => Exists fun b => ∀ (i : κ), Eq (b i) (v (a i))","decl":"lemma exists_basis_of_span_of_flat [Module.FinitePresentation R M] [Module.Flat R M]\n    {ι : Type u} (v : ι → M) (hv : Submodule.span R (Set.range v) = ⊤) :\n    ∃ (κ : Type u) (a : κ → ι) (b : Basis κ R M), ∀ i, b i = v (a i) :=\n  exists_basis_of_span_of_maximalIdeal_rTensor_injective\n    (Module.Flat.rTensor_preserves_injective_linearMap (𝔪).subtype Subtype.val_injective) v hv\n\n"}
{"name":"Module.free_of_maximalIdeal_rTensor_injective","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nM : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : IsLocalRing R\ninst✝ : Module.FinitePresentation R M\nH : Function.Injective ⇑(LinearMap.rTensor M (Submodule.subtype (IsLocalRing.maximalIdeal R)))\n⊢ Module.Free R M","decl":"/--\nIf `M` is a finitely presented module over a local ring `(R, 𝔪)` such that `m ⊗ M → M` is\ninjective, then `M` is free.\n-/\ntheorem free_of_maximalIdeal_rTensor_injective [Module.FinitePresentation R M]\n    (H : Function.Injective ((𝔪).subtype.rTensor M)) :\n    Module.Free R M := by\n  obtain ⟨_, _, b, _⟩ := exists_basis_of_span_of_maximalIdeal_rTensor_injective H id (by simp)\n  exact Free.of_basis b\n\n-- TODO: Generalise this to finite free modules.\n"}
{"name":"Module.free_of_flat_of_isLocalRing","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nP : Type u_2\ninst✝⁴ : AddCommGroup P\ninst✝³ : Module R P\ninst✝² : IsLocalRing R\ninst✝¹ : Module.FinitePresentation R P\ninst✝ : Module.Flat R P\n⊢ Module.Free R P","decl":"theorem free_of_flat_of_isLocalRing [Module.FinitePresentation R P] [Module.Flat R P] :\n    Module.Free R P :=\n  free_of_maximalIdeal_rTensor_injective\n    (Module.Flat.rTensor_preserves_injective_linearMap _ Subtype.val_injective)\n\n"}
{"name":"Module.free_of_flat_of_localRing","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nP : Type u_2\ninst✝⁴ : AddCommGroup P\ninst✝³ : Module R P\ninst✝² : IsLocalRing R\ninst✝¹ : Module.FinitePresentation R P\ninst✝ : Module.Flat R P\n⊢ Module.Free R P","decl":"@[deprecated (since := \"2024-11-12\")] alias free_of_flat_of_localRing := free_of_flat_of_isLocalRing\n\n"}
{"name":"Module.free_of_lTensor_residueField_injective","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_3\ninst✝¹⁰ : CommRing R\nM : Type u_4\nN : Type u_1\ninst✝⁹ : AddCommGroup M\ninst✝⁸ : AddCommGroup N\ninst✝⁷ : Module R M\ninst✝⁶ : Module R N\nP : Type u_2\ninst✝⁵ : AddCommGroup P\ninst✝⁴ : Module R P\nf : LinearMap (RingHom.id R) M N\ng : LinearMap (RingHom.id R) N P\ninst✝³ : IsLocalRing R\nhg : Function.Surjective ⇑g\nh : Function.Exact ⇑f ⇑g\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Finite R N\ninst✝ : Module.Free R N\nhf : Function.Injective ⇑(LinearMap.lTensor (IsLocalRing.ResidueField R) f)\n⊢ Module.Free R P","decl":"/--\nIf `M → N → P → 0` is a presentation of `P` over a local ring `(R, 𝔪, k)` with\n`M` finite and `N` finite free, then injectivity of `k ⊗ M → k ⊗ N` implies that `P` is free.\n-/\ntheorem free_of_lTensor_residueField_injective (hg : Surjective g) (h : Exact f g)\n    [Module.Finite R M] [Module.Finite R N] [Module.Free R N]\n    (hf : Function.Injective (f.lTensor k)) :\n    Module.Free R P := by\n  have := Module.finitePresentation_of_free_of_surjective g hg\n    (by rw [h.linearMap_ker_eq, LinearMap.range_eq_map]; exact (Module.Finite.fg_top).map f)\n  apply free_of_maximalIdeal_rTensor_injective\n  rw [← LinearMap.lTensor_inj_iff_rTensor_inj]\n  apply lTensor_injective_of_exact_of_exact_of_rTensor_injective\n    h hg (LinearMap.exact_subtype_mkQ 𝔪) (Submodule.mkQ_surjective _)\n    ((LinearMap.lTensor_inj_iff_rTensor_inj _ _).mp hf)\n    (Module.Flat.lTensor_preserves_injective_linearMap _ Subtype.val_injective)\n\n"}
{"name":"IsLocalRing.split_injective_iff_lTensor_residueField_injective","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁸ : CommRing R\nM : Type u_2\nN : Type u_3\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : AddCommGroup N\ninst✝⁵ : Module R M\ninst✝⁴ : Module R N\ninst✝³ : IsLocalRing R\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Finite R N\ninst✝ : Module.Free R N\nl : LinearMap (RingHom.id R) M N\n⊢ Iff (Exists fun l' => Eq (l'.comp l) LinearMap.id) (Function.Injective ⇑(LinearMap.lTensor (IsLocalRing.ResidueField R) l))","decl":"/--\nGiven a linear map `l : M → N` over a local ring `(R, 𝔪, k)`\nwith `M` finite and `N` finite free,\n`l` is a split injection if and only if `k ⊗ l` is a (split) injection.\n-/\ntheorem IsLocalRing.split_injective_iff_lTensor_residueField_injective [IsLocalRing R]\n    [Module.Finite R M] [Module.Finite R N] [Module.Free R N] (l : M →ₗ[R] N) :\n    (∃ l', l' ∘ₗ l = LinearMap.id) ↔ Function.Injective (l.lTensor (ResidueField R)) := by\n  constructor\n  · intro ⟨l', hl⟩\n    have : l'.lTensor (ResidueField R) ∘ₗ l.lTensor (ResidueField R) = .id := by\n      rw [← LinearMap.lTensor_comp, hl, LinearMap.lTensor_id]\n    exact Function.HasLeftInverse.injective ⟨_, LinearMap.congr_fun this⟩\n  · intro h\n    -- By `Module.free_of_lTensor_residueField_injective`, `k ⊗ l` injective => `N ⧸ l(M)` free.\n    have := Module.free_of_lTensor_residueField_injective l (LinearMap.range l).mkQ\n      (Submodule.mkQ_surjective _) l.exact_map_mkQ_range h\n    -- Hence `l(M)` is projective because `0 → l(M) → N → N ⧸ l(M) → 0` splits.\n    have : Module.Projective R (LinearMap.range l) := by\n      have := (Exact.split_tfae (LinearMap.exact_subtype_mkQ (LinearMap.range l))\n        Subtype.val_injective (Submodule.mkQ_surjective _)).out 0 1\n      obtain ⟨l', hl'⟩ := this.mp\n         (Module.projective_lifting_property _ _ (Submodule.mkQ_surjective _))\n      exact Module.Projective.of_split _ _ hl'\n    -- Then `0 → ker l → M → l(M) → 0` splits.\n    obtain ⟨l', hl'⟩ : ∃ l', l' ∘ₗ (LinearMap.ker l).subtype = LinearMap.id := by\n      have : Function.Exact (LinearMap.ker l).subtype\n          (l.codRestrict (LinearMap.range l) (LinearMap.mem_range_self l)) := by\n        rw [LinearMap.exact_iff, LinearMap.ker_rangeRestrict, Submodule.range_subtype]\n      have := (Exact.split_tfae this\n        Subtype.val_injective (fun ⟨x, y, e⟩ ↦ ⟨y, Subtype.ext e⟩)).out 0 1\n      exact this.mp (Module.projective_lifting_property _ _ (fun ⟨x, y, e⟩ ↦ ⟨y, Subtype.ext e⟩))\n    have : Module.Finite R (LinearMap.ker l) := by\n      refine Module.Finite.of_surjective l' ?_\n      exact Function.HasRightInverse.surjective ⟨_, DFunLike.congr_fun hl'⟩\n    -- And tensoring with `k` preserves the injectivity of the first arrow.\n    -- That is, `k ⊗ ker l → k ⊗ M` is also injective.\n    have H : Function.Injective ((LinearMap.ker l).subtype.lTensor k) := by\n      apply_fun (LinearMap.lTensor k) at hl'\n      rw [LinearMap.lTensor_comp, LinearMap.lTensor_id] at hl'\n      exact Function.HasLeftInverse.injective ⟨l'.lTensor k, DFunLike.congr_fun hl'⟩\n    -- But by assumption `k ⊗ M → k ⊗ l(M)` is already injective, so `k ⊗ ker l = 0`.\n    have : Subsingleton (k ⊗[R] LinearMap.ker l) := by\n      refine (subsingleton_iff_forall_eq 0).mpr fun y ↦ H (h ?_)\n      rw [map_zero, map_zero, ← LinearMap.comp_apply, ← LinearMap.lTensor_comp,\n        l.exact_subtype_ker_map.linearMap_comp_eq_zero, LinearMap.lTensor_zero,\n        LinearMap.zero_apply]\n    -- By Nakayama's lemma, `l` is injective.\n    have : Function.Injective l := by\n      rwa [← LinearMap.ker_eq_bot, ← Submodule.subsingleton_iff_eq_bot,\n        ← IsLocalRing.subsingleton_tensorProduct (R := R)]\n    -- Whence `M ≃ l(M)` is projective and the result follows.\n    have := (Exact.split_tfae l.exact_map_mkQ_range this (Submodule.mkQ_surjective _)).out 0 1\n    rw [← this]\n    exact Module.projective_lifting_property _ _ (Submodule.mkQ_surjective _)\n\n"}
{"name":"LocalRing.split_injective_iff_lTensor_residueField_injective","module":"Mathlib.RingTheory.LocalRing.Module","initialProofState":"R : Type u_1\ninst✝⁸ : CommRing R\nM : Type u_2\nN : Type u_3\ninst✝⁷ : AddCommGroup M\ninst✝⁶ : AddCommGroup N\ninst✝⁵ : Module R M\ninst✝⁴ : Module R N\ninst✝³ : IsLocalRing R\ninst✝² : Module.Finite R M\ninst✝¹ : Module.Finite R N\ninst✝ : Module.Free R N\nl : LinearMap (RingHom.id R) M N\n⊢ Iff (Exists fun l' => Eq (l'.comp l) LinearMap.id) (Function.Injective ⇑(LinearMap.lTensor (IsLocalRing.ResidueField R) l))","decl":"@[deprecated (since := \"2024-11-09\")]\nalias LocalRing.split_injective_iff_lTensor_residueField_injective :=\n  IsLocalRing.split_injective_iff_lTensor_residueField_injective\n\n"}
