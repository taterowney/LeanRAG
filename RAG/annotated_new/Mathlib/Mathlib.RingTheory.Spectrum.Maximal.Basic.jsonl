{"name":"MaximalSpectrum.equivSubtype_apply_coe","module":"Mathlib.RingTheory.Spectrum.Maximal.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nI : MaximalSpectrum R\n⊢ Eq (↑((MaximalSpectrum.equivSubtype R) I)) I.asIdeal","decl":"/-- The prime spectrum is in bijection with the set of prime ideals. -/\n@[simps]\ndef equivSubtype : MaximalSpectrum R ≃ {I : Ideal R // I.IsMaximal} where\n  toFun I := ⟨I.asIdeal, I.2⟩\n  invFun I := ⟨I, I.2⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"MaximalSpectrum.equivSubtype_symm_apply_asIdeal","module":"Mathlib.RingTheory.Spectrum.Maximal.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nI : Subtype fun I => I.IsMaximal\n⊢ Eq ((MaximalSpectrum.equivSubtype R).symm I).asIdeal ↑I","decl":"/-- The prime spectrum is in bijection with the set of prime ideals. -/\n@[simps]\ndef equivSubtype : MaximalSpectrum R ≃ {I : Ideal R // I.IsMaximal} where\n  toFun I := ⟨I.asIdeal, I.2⟩\n  invFun I := ⟨I, I.2⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"MaximalSpectrum.range_asIdeal","module":"Mathlib.RingTheory.Spectrum.Maximal.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\n⊢ Eq (Set.range MaximalSpectrum.asIdeal) (setOf fun J => J.IsMaximal)","decl":"theorem range_asIdeal : Set.range MaximalSpectrum.asIdeal = {J : Ideal R | J.IsMaximal} :=\n  Set.ext fun J ↦\n    ⟨fun hJ ↦ let ⟨j, hj⟩ := Set.mem_range.mp hJ; Set.mem_setOf.mpr <| hj ▸ j.isMaximal,\n      fun hJ ↦ Set.mem_range.mpr ⟨⟨J, Set.mem_setOf.mp hJ⟩, rfl⟩⟩\n\n"}
{"name":"MaximalSpectrum.instNonemptyOfNontrivial","module":"Mathlib.RingTheory.Spectrum.Maximal.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Nontrivial R\n⊢ Nonempty (MaximalSpectrum R)","decl":"instance [Nontrivial R] : Nonempty <| MaximalSpectrum R :=\n  let ⟨I, hI⟩ := Ideal.exists_maximal R\n  ⟨⟨I, hI⟩⟩\n\n"}
{"name":"MaximalSpectrum.toPrimeSpectrum_injective","module":"Mathlib.RingTheory.Spectrum.Maximal.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\n⊢ Function.Injective MaximalSpectrum.toPrimeSpectrum","decl":"theorem toPrimeSpectrum_injective : (@toPrimeSpectrum R _).Injective := fun ⟨_, _⟩ ⟨_, _⟩ h => by\n  simpa only [MaximalSpectrum.mk.injEq] using PrimeSpectrum.ext_iff.mp h\n\n"}
