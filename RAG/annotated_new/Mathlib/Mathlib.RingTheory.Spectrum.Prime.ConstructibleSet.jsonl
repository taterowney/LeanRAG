{"name":"PrimeSpectrum.ConstructibleSetData.map_id","module":"Mathlib.RingTheory.Spectrum.Prime.ConstructibleSet","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : DecidableEq R\ns : PrimeSpectrum.ConstructibleSetData R\n⊢ Eq (PrimeSpectrum.ConstructibleSetData.map (RingHom.id R) s) s","decl":"@[simp]\nlemma map_id [DecidableEq R] (s : ConstructibleSetData R) : s.map (.id _) = s := by simp [map]\n\n"}
{"name":"PrimeSpectrum.ConstructibleSetData.map_comp","module":"Mathlib.RingTheory.Spectrum.Prime.ConstructibleSet","initialProofState":"R : Type u_1\nS : Type u_2\nT : Type u_3\ninst✝⁴ : CommSemiring R\ninst✝³ : CommSemiring S\ninst✝² : CommSemiring T\ninst✝¹ : DecidableEq S\ninst✝ : DecidableEq T\nf : RingHom S T\ng : RingHom R S\ns : PrimeSpectrum.ConstructibleSetData R\n⊢ Eq (PrimeSpectrum.ConstructibleSetData.map (f.comp g) s) (PrimeSpectrum.ConstructibleSetData.map f (PrimeSpectrum.ConstructibleSetData.map g s))","decl":"lemma map_comp [DecidableEq S] [DecidableEq T] (f : S →+* T) (g : R →+* S)\n    (s : ConstructibleSetData R) : s.map (f.comp g) = (s.map g).map f := by\n  simp [map, image_image, Function.comp_def]\n\n"}
{"name":"PrimeSpectrum.ConstructibleSetData.toSet_map","module":"Mathlib.RingTheory.Spectrum.Prime.ConstructibleSet","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring S\ninst✝ : DecidableEq S\nf : RingHom R S\ns : PrimeSpectrum.ConstructibleSetData R\n⊢ Eq (PrimeSpectrum.ConstructibleSetData.map f s).toSet (Set.preimage (⇑(PrimeSpectrum.comap f)) s.toSet)","decl":"@[simp]\nlemma toSet_map [DecidableEq S] (f : R →+* S) (s : ConstructibleSetData R) :\n    (s.map f).toSet = comap f ⁻¹' s.toSet := by\n  unfold toSet map\n  rw [set_biUnion_finset_image]\n  simp [← Set.range_comp]\n\n"}
