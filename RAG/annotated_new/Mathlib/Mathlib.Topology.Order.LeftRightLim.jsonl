{"name":"leftLim_eq_of_tendsto","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace β\nhα : TopologicalSpace α\nh'α : OrderTopology α\ninst✝ : T2Space β\nf : α → β\na : α\ny : β\nh : Ne (nhdsWithin a (Set.Iio a)) Bot.bot\nh' : Filter.Tendsto f (nhdsWithin a (Set.Iio a)) (nhds y)\n⊢ Eq (Function.leftLim f a) y","decl":"theorem leftLim_eq_of_tendsto [hα : TopologicalSpace α] [h'α : OrderTopology α] [T2Space β]\n    {f : α → β} {a : α} {y : β} (h : 𝓝[<] a ≠ ⊥) (h' : Tendsto f (𝓝[<] a) (𝓝 y)) :\n    leftLim f a = y := by\n  have h'' : ∃ y, Tendsto f (𝓝[<] a) (𝓝 y) := ⟨y, h'⟩\n  rw [h'α.topology_eq_generate_intervals] at h h' h''\n  simp only [leftLim, h, h'', not_true, or_self_iff, if_false]\n  haveI := neBot_iff.2 h\n  exact lim_eq h'\n\n"}
{"name":"leftLim_eq_of_eq_bot","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : TopologicalSpace β\nhα : TopologicalSpace α\nh'α : OrderTopology α\nf : α → β\na : α\nh : Eq (nhdsWithin a (Set.Iio a)) Bot.bot\n⊢ Eq (Function.leftLim f a) (f a)","decl":"theorem leftLim_eq_of_eq_bot [hα : TopologicalSpace α] [h'α : OrderTopology α] (f : α → β) {a : α}\n    (h : 𝓝[<] a = ⊥) : leftLim f a = f a := by\n  rw [h'α.topology_eq_generate_intervals] at h\n  simp [leftLim, ite_eq_left_iff, h]\n\n"}
{"name":"rightLim_eq_of_tendsto","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : T2Space β\nf : α → β\na : α\ny : β\nh : Ne (nhdsWithin a (Set.Ioi a)) Bot.bot\nh' : Filter.Tendsto f (nhdsWithin a (Set.Ioi a)) (nhds y)\n⊢ Eq (Function.rightLim f a) y","decl":"theorem rightLim_eq_of_tendsto [TopologicalSpace α] [OrderTopology α] [T2Space β]\n    {f : α → β} {a : α} {y : β} (h : 𝓝[>] a ≠ ⊥) (h' : Tendsto f (𝓝[>] a) (𝓝 y)) :\n    Function.rightLim f a = y :=\n  @leftLim_eq_of_tendsto αᵒᵈ _ _ _ _ _ _ f a y h h'\n\n"}
{"name":"rightLim_eq_of_eq_bot","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nf : α → β\na : α\nh : Eq (nhdsWithin a (Set.Ioi a)) Bot.bot\n⊢ Eq (Function.rightLim f a) (f a)","decl":"theorem rightLim_eq_of_eq_bot [TopologicalSpace α] [OrderTopology α] (f : α → β) {a : α}\n    (h : 𝓝[>] a = ⊥) : rightLim f a = f a :=\n  @leftLim_eq_of_eq_bot αᵒᵈ _ _ _ _ _  f a h\n\n"}
{"name":"Monotone.leftLim_eq_sSup","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nh : Ne (nhdsWithin x (Set.Iio x)) Bot.bot\n⊢ Eq (Function.leftLim f x) (SupSet.sSup (Set.image f (Set.Iio x)))","decl":"theorem leftLim_eq_sSup [TopologicalSpace α] [OrderTopology α] (h : 𝓝[<] x ≠ ⊥) :\n    leftLim f x = sSup (f '' Iio x) :=\n  leftLim_eq_of_tendsto h (hf.tendsto_nhdsLT x)\n\n"}
{"name":"Monotone.rightLim_eq_sInf","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nh : Ne (nhdsWithin x (Set.Ioi x)) Bot.bot\n⊢ Eq (Function.rightLim f x) (InfSet.sInf (Set.image f (Set.Ioi x)))","decl":"theorem rightLim_eq_sInf [TopologicalSpace α] [OrderTopology α] (h : 𝓝[>] x ≠ ⊥) :\n    rightLim f x = sInf (f '' Ioi x) :=\n  rightLim_eq_of_tendsto h (hf.tendsto_nhdsGT x)\n\n"}
{"name":"Monotone.leftLim_le","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\nx y : α\nh : LE.le x y\n⊢ LE.le (Function.leftLim f x) (f y)","decl":"theorem leftLim_le (h : x ≤ y) : leftLim f x ≤ f y := by\n  letI : TopologicalSpace α := Preorder.topology α\n  haveI : OrderTopology α := ⟨rfl⟩\n  rcases eq_or_ne (𝓝[<] x) ⊥ with (h' | h')\n  · simpa [leftLim, h'] using hf h\n  haveI A : NeBot (𝓝[<] x) := neBot_iff.2 h'\n  rw [leftLim_eq_sSup hf h']\n  refine csSup_le ?_ ?_\n  · simp only [image_nonempty]\n    exact (forall_mem_nonempty_iff_neBot.2 A) _ self_mem_nhdsWithin\n  · simp only [mem_image, mem_Iio, forall_exists_index, and_imp, forall_apply_eq_imp_iff₂]\n    intro z hz\n    exact hf (hz.le.trans h)\n\n"}
{"name":"Monotone.le_leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\nx y : α\nh : LT.lt x y\n⊢ LE.le (f x) (Function.leftLim f y)","decl":"theorem le_leftLim (h : x < y) : f x ≤ leftLim f y := by\n  letI : TopologicalSpace α := Preorder.topology α\n  haveI : OrderTopology α := ⟨rfl⟩\n  rcases eq_or_ne (𝓝[<] y) ⊥ with (h' | h')\n  · rw [leftLim_eq_of_eq_bot _ h']\n    exact hf h.le\n  rw [leftLim_eq_sSup hf h']\n  refine le_csSup ⟨f y, ?_⟩ (mem_image_of_mem _ h)\n  simp only [upperBounds, mem_image, mem_Iio, forall_exists_index, and_imp,\n    forall_apply_eq_imp_iff₂, mem_setOf_eq]\n  intro z hz\n  exact hf hz.le\n\n"}
{"name":"Monotone.leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\n⊢ Monotone (Function.leftLim f)","decl":"@[mono]\nprotected theorem leftLim : Monotone (leftLim f) := by\n  intro x y h\n  rcases eq_or_lt_of_le h with (rfl | hxy)\n  · exact le_rfl\n  · exact (hf.leftLim_le le_rfl).trans (hf.le_leftLim hxy)\n\n"}
{"name":"Monotone.le_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\nx y : α\nh : LE.le x y\n⊢ LE.le (f x) (Function.rightLim f y)","decl":"theorem le_rightLim (h : x ≤ y) : f x ≤ rightLim f y :=\n  hf.dual.leftLim_le h\n\n"}
{"name":"Monotone.rightLim_le","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\nx y : α\nh : LT.lt x y\n⊢ LE.le (Function.rightLim f x) (f y)","decl":"theorem rightLim_le (h : x < y) : rightLim f x ≤ f y :=\n  hf.dual.le_leftLim h\n\n"}
{"name":"Monotone.rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\n⊢ Monotone (Function.rightLim f)","decl":"@[mono]\nprotected theorem rightLim : Monotone (rightLim f) := fun _ _ h => hf.dual.leftLim h\n\n"}
{"name":"Monotone.leftLim_le_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\nx y : α\nh : LE.le x y\n⊢ LE.le (Function.leftLim f x) (Function.rightLim f y)","decl":"theorem leftLim_le_rightLim (h : x ≤ y) : leftLim f x ≤ rightLim f y :=\n  (hf.leftLim_le le_rfl).trans (hf.le_rightLim h)\n\n"}
{"name":"Monotone.rightLim_le_leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Monotone f\nx y : α\nh : LT.lt x y\n⊢ LE.le (Function.rightLim f x) (Function.leftLim f y)","decl":"theorem rightLim_le_leftLim (h : x < y) : rightLim f x ≤ leftLim f y := by\n  letI : TopologicalSpace α := Preorder.topology α\n  haveI : OrderTopology α := ⟨rfl⟩\n  rcases eq_or_neBot (𝓝[<] y) with (h' | h')\n  · simpa [leftLim, h'] using rightLim_le hf h\n  obtain ⟨a, ⟨xa, ay⟩⟩ : (Ioo x y).Nonempty := nonempty_of_mem (Ioo_mem_nhdsLT h)\n  calc\n    rightLim f x ≤ f a := hf.rightLim_le xa\n    _ ≤ leftLim f y := hf.le_leftLim ay\n\n"}
{"name":"Monotone.tendsto_leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Iio x)) (nhds (Function.leftLim f x))","decl":"theorem tendsto_leftLim (x : α) : Tendsto f (𝓝[<] x) (𝓝 (leftLim f x)) := by\n  rcases eq_or_ne (𝓝[<] x) ⊥ with (h' | h')\n  · simp [h']\n  rw [leftLim_eq_sSup hf h']\n  exact hf.tendsto_nhdsLT x\n\n"}
{"name":"Monotone.tendsto_leftLim_within","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Iio x)) (nhdsWithin (Function.leftLim f x) (Set.Iic (Function.leftLim f x)))","decl":"theorem tendsto_leftLim_within (x : α) : Tendsto f (𝓝[<] x) (𝓝[≤] leftLim f x) := by\n  apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within f (hf.tendsto_leftLim x)\n  filter_upwards [@self_mem_nhdsWithin _ _ x (Iio x)] with y hy using hf.le_leftLim hy\n\n"}
{"name":"Monotone.tendsto_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Ioi x)) (nhds (Function.rightLim f x))","decl":"theorem tendsto_rightLim (x : α) : Tendsto f (𝓝[>] x) (𝓝 (rightLim f x)) :=\n  hf.dual.tendsto_leftLim x\n\n"}
{"name":"Monotone.tendsto_rightLim_within","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Ioi x)) (nhdsWithin (Function.rightLim f x) (Set.Ici (Function.rightLim f x)))","decl":"theorem tendsto_rightLim_within (x : α) : Tendsto f (𝓝[>] x) (𝓝[≥] rightLim f x) :=\n  hf.dual.tendsto_leftLim_within x\n\n"}
{"name":"Monotone.continuousWithinAt_Iio_iff_leftLim_eq","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Iff (ContinuousWithinAt f (Set.Iio x) x) (Eq (Function.leftLim f x) (f x))","decl":"/-- A monotone function is continuous to the left at a point if and only if its left limit\ncoincides with the value of the function. -/\ntheorem continuousWithinAt_Iio_iff_leftLim_eq :\n    ContinuousWithinAt f (Iio x) x ↔ leftLim f x = f x := by\n  rcases eq_or_ne (𝓝[<] x) ⊥ with (h' | h')\n  · simp [leftLim_eq_of_eq_bot f h', ContinuousWithinAt, h']\n  haveI : (𝓝[Iio x] x).NeBot := neBot_iff.2 h'\n  refine ⟨fun h => tendsto_nhds_unique (hf.tendsto_leftLim x) h.tendsto, fun h => ?_⟩\n  have := hf.tendsto_leftLim x\n  rwa [h] at this\n\n"}
{"name":"Monotone.continuousWithinAt_Ioi_iff_rightLim_eq","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Iff (ContinuousWithinAt f (Set.Ioi x) x) (Eq (Function.rightLim f x) (f x))","decl":"/-- A monotone function is continuous to the right at a point if and only if its right limit\ncoincides with the value of the function. -/\ntheorem continuousWithinAt_Ioi_iff_rightLim_eq :\n    ContinuousWithinAt f (Ioi x) x ↔ rightLim f x = f x :=\n  hf.dual.continuousWithinAt_Iio_iff_leftLim_eq\n\n"}
{"name":"Monotone.continuousAt_iff_leftLim_eq_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Monotone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Iff (ContinuousAt f x) (Eq (Function.leftLim f x) (Function.rightLim f x))","decl":"/-- A monotone function is continuous at a point if and only if its left and right limits\ncoincide. -/\ntheorem continuousAt_iff_leftLim_eq_rightLim : ContinuousAt f x ↔ leftLim f x = rightLim f x := by\n  refine ⟨fun h => ?_, fun h => ?_⟩\n  · have A : leftLim f x = f x :=\n      hf.continuousWithinAt_Iio_iff_leftLim_eq.1 h.continuousWithinAt\n    have B : rightLim f x = f x :=\n      hf.continuousWithinAt_Ioi_iff_rightLim_eq.1 h.continuousWithinAt\n    exact A.trans B.symm\n  · have h' : leftLim f x = f x := by\n      apply le_antisymm (leftLim_le hf (le_refl _))\n      rw [h]\n      exact le_rightLim hf (le_refl _)\n    refine continuousAt_iff_continuous_left'_right'.2 ⟨?_, ?_⟩\n    · exact hf.continuousWithinAt_Iio_iff_leftLim_eq.2 h'\n    · rw [h] at h'\n      exact hf.continuousWithinAt_Ioi_iff_rightLim_eq.2 h'\n\n"}
{"name":"Monotone.countable_not_continuousWithinAt_Ioi","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : LinearOrder α\ninst✝⁵ : ConditionallyCompleteLinearOrder β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : SecondCountableTopology β\n⊢ (setOf fun x => Not (ContinuousWithinAt f (Set.Ioi x) x)).Countable","decl":"/-- In a second countable space, the set of points where a monotone function is not right-continuous\nis at most countable. Superseded by `countable_not_continuousAt` which gives the two-sided\nversion. -/\ntheorem countable_not_continuousWithinAt_Ioi [SecondCountableTopology β] :\n    Set.Countable { x | ¬ContinuousWithinAt f (Ioi x) x } := by\n  apply (countable_image_lt_image_Ioi f).mono\n  rintro x (hx : ¬ContinuousWithinAt f (Ioi x) x)\n  dsimp\n  contrapose! hx\n  refine tendsto_order.2 ⟨fun m hm => ?_, fun u hu => ?_⟩\n  · filter_upwards [@self_mem_nhdsWithin _ _ x (Ioi x)] with y hy using hm.trans_le\n      (hf (le_of_lt hy))\n  rcases hx u hu with ⟨v, xv, fvu⟩\n  have : Ioo x v ∈ 𝓝[>] x := Ioo_mem_nhdsGT xv\n  filter_upwards [this] with y hy\n  apply (hf hy.2.le).trans_lt fvu\n\n"}
{"name":"Monotone.countable_not_continuousWithinAt_Iio","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : LinearOrder α\ninst✝⁵ : ConditionallyCompleteLinearOrder β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : SecondCountableTopology β\n⊢ (setOf fun x => Not (ContinuousWithinAt f (Set.Iio x) x)).Countable","decl":"/-- In a second countable space, the set of points where a monotone function is not left-continuous\nis at most countable. Superseded by `countable_not_continuousAt` which gives the two-sided\nversion. -/\ntheorem countable_not_continuousWithinAt_Iio [SecondCountableTopology β] :\n    Set.Countable { x | ¬ContinuousWithinAt f (Iio x) x } :=\n  hf.dual.countable_not_continuousWithinAt_Ioi\n\n"}
{"name":"Monotone.countable_not_continuousAt","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : LinearOrder α\ninst✝⁵ : ConditionallyCompleteLinearOrder β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : OrderTopology β\nf : α → β\nhf : Monotone f\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : SecondCountableTopology β\n⊢ (setOf fun x => Not (ContinuousAt f x)).Countable","decl":"/-- In a second countable space, the set of points where a monotone function is not continuous\nis at most countable. -/\ntheorem countable_not_continuousAt [SecondCountableTopology β] :\n    Set.Countable { x | ¬ContinuousAt f x } := by\n  apply\n    (hf.countable_not_continuousWithinAt_Ioi.union hf.countable_not_continuousWithinAt_Iio).mono\n      _\n  refine compl_subset_compl.1 ?_\n  simp only [compl_union]\n  rintro x ⟨hx, h'x⟩\n  simp only [mem_setOf_eq, Classical.not_not, mem_compl_iff] at hx h'x ⊢\n  exact continuousAt_iff_continuous_left'_right'.2 ⟨h'x, hx⟩\n\n"}
{"name":"Antitone.le_leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\nx y : α\nh : LE.le x y\n⊢ LE.le (f y) (Function.leftLim f x)","decl":"theorem le_leftLim (h : x ≤ y) : f y ≤ leftLim f x :=\n  hf.dual_right.leftLim_le h\n\n"}
{"name":"Antitone.leftLim_le","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\nx y : α\nh : LT.lt x y\n⊢ LE.le (Function.leftLim f y) (f x)","decl":"theorem leftLim_le (h : x < y) : leftLim f y ≤ f x :=\n  hf.dual_right.le_leftLim h\n\n"}
{"name":"Antitone.leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\n⊢ Antitone (Function.leftLim f)","decl":"@[mono]\nprotected theorem leftLim : Antitone (leftLim f) :=\n  hf.dual_right.leftLim\n\n"}
{"name":"Antitone.rightLim_le","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\nx y : α\nh : LE.le x y\n⊢ LE.le (Function.rightLim f y) (f x)","decl":"theorem rightLim_le (h : x ≤ y) : rightLim f y ≤ f x :=\n  hf.dual_right.le_rightLim h\n\n"}
{"name":"Antitone.le_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\nx y : α\nh : LT.lt x y\n⊢ LE.le (f y) (Function.rightLim f x)","decl":"theorem le_rightLim (h : x < y) : f y ≤ rightLim f x :=\n  hf.dual_right.rightLim_le h\n\n"}
{"name":"Antitone.rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\n⊢ Antitone (Function.rightLim f)","decl":"@[mono]\nprotected theorem rightLim : Antitone (rightLim f) :=\n  hf.dual_right.rightLim\n\n"}
{"name":"Antitone.rightLim_le_leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\nx y : α\nh : LE.le x y\n⊢ LE.le (Function.rightLim f y) (Function.leftLim f x)","decl":"theorem rightLim_le_leftLim (h : x ≤ y) : rightLim f y ≤ leftLim f x :=\n  hf.dual_right.leftLim_le_rightLim h\n\n"}
{"name":"Antitone.leftLim_le_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : ConditionallyCompleteLinearOrder β\ninst✝¹ : TopologicalSpace β\ninst✝ : OrderTopology β\nf : α → β\nhf : Antitone f\nx y : α\nh : LT.lt x y\n⊢ LE.le (Function.leftLim f y) (Function.rightLim f x)","decl":"theorem leftLim_le_rightLim (h : x < y) : leftLim f y ≤ rightLim f x :=\n  hf.dual_right.rightLim_le_leftLim h\n\n"}
{"name":"Antitone.tendsto_leftLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Iio x)) (nhds (Function.leftLim f x))","decl":"theorem tendsto_leftLim (x : α) : Tendsto f (𝓝[<] x) (𝓝 (leftLim f x)) :=\n  hf.dual_right.tendsto_leftLim x\n\n"}
{"name":"Antitone.tendsto_leftLim_within","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Iio x)) (nhdsWithin (Function.leftLim f x) (Set.Ici (Function.leftLim f x)))","decl":"theorem tendsto_leftLim_within (x : α) : Tendsto f (𝓝[<] x) (𝓝[≥] leftLim f x) :=\n  hf.dual_right.tendsto_leftLim_within x\n\n"}
{"name":"Antitone.tendsto_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Ioi x)) (nhds (Function.rightLim f x))","decl":"theorem tendsto_rightLim (x : α) : Tendsto f (𝓝[>] x) (𝓝 (rightLim f x)) :=\n  hf.dual_right.tendsto_rightLim x\n\n"}
{"name":"Antitone.tendsto_rightLim_within","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\nx : α\n⊢ Filter.Tendsto f (nhdsWithin x (Set.Ioi x)) (nhdsWithin (Function.rightLim f x) (Set.Iic (Function.rightLim f x)))","decl":"theorem tendsto_rightLim_within (x : α) : Tendsto f (𝓝[>] x) (𝓝[≤] rightLim f x) :=\n  hf.dual_right.tendsto_rightLim_within x\n\n"}
{"name":"Antitone.continuousWithinAt_Iio_iff_leftLim_eq","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Iff (ContinuousWithinAt f (Set.Iio x) x) (Eq (Function.leftLim f x) (f x))","decl":"/-- An antitone function is continuous to the left at a point if and only if its left limit\ncoincides with the value of the function. -/\ntheorem continuousWithinAt_Iio_iff_leftLim_eq :\n    ContinuousWithinAt f (Iio x) x ↔ leftLim f x = f x :=\n  hf.dual_right.continuousWithinAt_Iio_iff_leftLim_eq\n\n"}
{"name":"Antitone.continuousWithinAt_Ioi_iff_rightLim_eq","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Iff (ContinuousWithinAt f (Set.Ioi x) x) (Eq (Function.rightLim f x) (f x))","decl":"/-- An antitone function is continuous to the right at a point if and only if its right limit\ncoincides with the value of the function. -/\ntheorem continuousWithinAt_Ioi_iff_rightLim_eq :\n    ContinuousWithinAt f (Ioi x) x ↔ rightLim f x = f x :=\n  hf.dual_right.continuousWithinAt_Ioi_iff_rightLim_eq\n\n"}
{"name":"Antitone.continuousAt_iff_leftLim_eq_rightLim","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : ConditionallyCompleteLinearOrder β\ninst✝³ : TopologicalSpace β\ninst✝² : OrderTopology β\nf : α → β\nhf : Antitone f\nx : α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ Iff (ContinuousAt f x) (Eq (Function.leftLim f x) (Function.rightLim f x))","decl":"/-- An antitone function is continuous at a point if and only if its left and right limits\ncoincide. -/\ntheorem continuousAt_iff_leftLim_eq_rightLim : ContinuousAt f x ↔ leftLim f x = rightLim f x :=\n  hf.dual_right.continuousAt_iff_leftLim_eq_rightLim\n\n"}
{"name":"Antitone.countable_not_continuousAt","module":"Mathlib.Topology.Order.LeftRightLim","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : LinearOrder α\ninst✝⁵ : ConditionallyCompleteLinearOrder β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : OrderTopology β\nf : α → β\nhf : Antitone f\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : SecondCountableTopology β\n⊢ (setOf fun x => Not (ContinuousAt f x)).Countable","decl":"/-- In a second countable space, the set of points where an antitone function is not continuous\nis at most countable. -/\ntheorem countable_not_continuousAt [SecondCountableTopology β] :\n    Set.Countable { x | ¬ContinuousAt f x } :=\n  hf.dual_right.countable_not_continuousAt\n\n"}
