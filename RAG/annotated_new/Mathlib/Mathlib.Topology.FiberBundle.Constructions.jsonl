{"name":"Bundle.Trivial.isInducing_toProd","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF : Type u_2\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\n⊢ Topology.IsInducing ⇑(Bundle.TotalSpace.toProd B F)","decl":"theorem isInducing_toProd : IsInducing (TotalSpace.toProd B F) :=\n  ⟨by simp only [instTopologicalSpaceProd, induced_inf, induced_compose]; rfl⟩\n\n"}
{"name":"Bundle.Trivial.inducing_toProd","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF : Type u_2\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\n⊢ Topology.IsInducing ⇑(Bundle.TotalSpace.toProd B F)","decl":"@[deprecated (since := \"2024-10-28\")] alias inducing_toProd := isInducing_toProd\n\n"}
{"name":"Bundle.Trivial.trivialization_source","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF : Type u_2\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\n⊢ Eq (Bundle.Trivial.trivialization B F).source Set.univ","decl":"@[simp]\ntheorem trivialization_source : (trivialization B F).source = univ := rfl\n\n"}
{"name":"Bundle.Trivial.trivialization_target","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF : Type u_2\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\n⊢ Eq (Bundle.Trivial.trivialization B F).target Set.univ","decl":"@[simp]\ntheorem trivialization_target : (trivialization B F).target = univ := rfl\n\n"}
{"name":"Bundle.Trivial.eq_trivialization","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF : Type u_2\ninst✝¹ : TopologicalSpace B\ninst✝ : TopologicalSpace F\ne : Trivialization F Bundle.TotalSpace.proj\ni : MemTrivializationAtlas e\n⊢ Eq e (Bundle.Trivial.trivialization B F)","decl":"theorem eq_trivialization (e : Trivialization F (π F (Bundle.Trivial B F)))\n    [i : MemTrivializationAtlas e] : e = trivialization B F := i.out\n\n"}
{"name":"FiberBundle.Prod.isInducing_diag","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF₁ : Type u_2\nE₁ : B → Type u_3\nF₂ : Type u_4\nE₂ : B → Type u_5\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\ninst✝ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\n⊢ Topology.IsInducing fun p => { fst := { proj := p.proj, snd := p.snd.1 }, snd := { proj := p.proj, snd := p.snd.2 } }","decl":"/-- The diagonal map from the total space of the fiberwise product of two fiber bundles\n`E₁`, `E₂` into `TotalSpace F₁ E₁ × TotalSpace F₂ E₂` is an inducing map. -/\ntheorem FiberBundle.Prod.isInducing_diag :\n    IsInducing (fun p ↦ (⟨p.1, p.2.1⟩, ⟨p.1, p.2.2⟩) :\n      TotalSpace (F₁ × F₂) (E₁ ×ᵇ E₂) → TotalSpace F₁ E₁ × TotalSpace F₂ E₂) :=\n  ⟨rfl⟩\n\n"}
{"name":"FiberBundle.Prod.inducing_diag","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF₁ : Type u_2\nE₁ : B → Type u_3\nF₂ : Type u_4\nE₂ : B → Type u_5\ninst✝¹ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\ninst✝ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\n⊢ Topology.IsInducing fun p => { fst := { proj := p.proj, snd := p.snd.1 }, snd := { proj := p.proj, snd := p.snd.2 } }","decl":"@[deprecated (since := \"2024-10-28\")]\nalias FiberBundle.Prod.inducing_diag := FiberBundle.Prod.isInducing_diag\n\n"}
{"name":"Trivialization.Prod.continuous_to_fun","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝⁴ : TopologicalSpace B\nF₁ : Type u_2\ninst✝³ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝² : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝¹ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\n⊢ ContinuousOn (Trivialization.Prod.toFun' e₁ e₂) (Set.preimage Bundle.TotalSpace.proj (Inter.inter e₁.baseSet e₂.baseSet))","decl":"theorem Prod.continuous_to_fun : ContinuousOn (Prod.toFun' e₁ e₂)\n    (π (F₁ × F₂) (E₁ ×ᵇ E₂) ⁻¹' (e₁.baseSet ∩ e₂.baseSet)) := by\n  let f₁ : TotalSpace (F₁ × F₂) (E₁ ×ᵇ E₂) → TotalSpace F₁ E₁ × TotalSpace F₂ E₂ :=\n    fun p ↦ ((⟨p.1, p.2.1⟩ : TotalSpace F₁ E₁), (⟨p.1, p.2.2⟩ : TotalSpace F₂ E₂))\n  let f₂ : TotalSpace F₁ E₁ × TotalSpace F₂ E₂ → (B × F₁) × B × F₂ := fun p ↦ ⟨e₁ p.1, e₂ p.2⟩\n  let f₃ : (B × F₁) × B × F₂ → B × F₁ × F₂ := fun p ↦ ⟨p.1.1, p.1.2, p.2.2⟩\n  have hf₁ : Continuous f₁ := (Prod.isInducing_diag F₁ E₁ F₂ E₂).continuous\n  have hf₂ : ContinuousOn f₂ (e₁.source ×ˢ e₂.source) :=\n    e₁.toPartialHomeomorph.continuousOn.prod_map e₂.toPartialHomeomorph.continuousOn\n  have hf₃ : Continuous f₃ := by fun_prop\n  refine ((hf₃.comp_continuousOn hf₂).comp hf₁.continuousOn ?_).congr ?_\n  · rw [e₁.source_eq, e₂.source_eq]\n    exact mapsTo_preimage _ _\n  rintro ⟨b, v₁, v₂⟩ ⟨hb₁, _⟩\n  simp only [f₁, f₂, f₃, Prod.toFun', Prod.mk.inj_iff, Function.comp_apply, and_true]\n  rw [e₁.coe_fst]\n  rw [e₁.source_eq, mem_preimage]\n  exact hb₁\n\n"}
{"name":"Trivialization.Prod.left_inv","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝⁶ : TopologicalSpace B\nF₁ : Type u_2\ninst✝⁵ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝³ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝² : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹ : (x : B) → Zero (E₁ x)\ninst✝ : (x : B) → Zero (E₂ x)\nx : Bundle.TotalSpace (Prod F₁ F₂) fun x => Prod (E₁ x) (E₂ x)\nh : Membership.mem (Set.preimage Bundle.TotalSpace.proj (Inter.inter e₁.baseSet e₂.baseSet)) x\n⊢ Eq (Trivialization.Prod.invFun' e₁ e₂ (Trivialization.Prod.toFun' e₁ e₂ x)) x","decl":"theorem Prod.left_inv {x : TotalSpace (F₁ × F₂) (E₁ ×ᵇ E₂)}\n    (h : x ∈ π (F₁ × F₂) (E₁ ×ᵇ E₂) ⁻¹' (e₁.baseSet ∩ e₂.baseSet)) :\n    Prod.invFun' e₁ e₂ (Prod.toFun' e₁ e₂ x) = x := by\n  obtain ⟨x, v₁, v₂⟩ := x\n  obtain ⟨h₁ : x ∈ e₁.baseSet, h₂ : x ∈ e₂.baseSet⟩ := h\n  simp only [Prod.toFun', Prod.invFun', symm_apply_apply_mk, h₁, h₂]\n\n"}
{"name":"Trivialization.Prod.right_inv","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝⁶ : TopologicalSpace B\nF₁ : Type u_2\ninst✝⁵ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝³ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝² : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹ : (x : B) → Zero (E₁ x)\ninst✝ : (x : B) → Zero (E₂ x)\nx : Prod B (Prod F₁ F₂)\nh : Membership.mem (SProd.sprod (Inter.inter e₁.baseSet e₂.baseSet) Set.univ) x\n⊢ Eq (Trivialization.Prod.toFun' e₁ e₂ (Trivialization.Prod.invFun' e₁ e₂ x)) x","decl":"theorem Prod.right_inv {x : B × F₁ × F₂}\n    (h : x ∈ (e₁.baseSet ∩ e₂.baseSet) ×ˢ (univ : Set (F₁ × F₂))) :\n    Prod.toFun' e₁ e₂ (Prod.invFun' e₁ e₂ x) = x := by\n  obtain ⟨x, w₁, w₂⟩ := x\n  obtain ⟨⟨h₁ : x ∈ e₁.baseSet, h₂ : x ∈ e₂.baseSet⟩, -⟩ := h\n  simp only [Prod.toFun', Prod.invFun', apply_mk_symm, h₁, h₂]\n\n"}
{"name":"Trivialization.Prod.continuous_inv_fun","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝⁶ : TopologicalSpace B\nF₁ : Type u_2\ninst✝⁵ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝³ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝² : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹ : (x : B) → Zero (E₁ x)\ninst✝ : (x : B) → Zero (E₂ x)\n⊢ ContinuousOn (Trivialization.Prod.invFun' e₁ e₂) (SProd.sprod (Inter.inter e₁.baseSet e₂.baseSet) Set.univ)","decl":"theorem Prod.continuous_inv_fun :\n    ContinuousOn (Prod.invFun' e₁ e₂) ((e₁.baseSet ∩ e₂.baseSet) ×ˢ univ) := by\n  rw [(Prod.isInducing_diag F₁ E₁ F₂ E₂).continuousOn_iff]\n  have H₁ : Continuous fun p : B × F₁ × F₂ ↦ ((p.1, p.2.1), (p.1, p.2.2)) := by fun_prop\n  refine (e₁.continuousOn_symm.prod_map e₂.continuousOn_symm).comp H₁.continuousOn ?_\n  exact fun x h ↦ ⟨⟨h.1.1, mem_univ _⟩, ⟨h.1.2, mem_univ _⟩⟩\n\n"}
{"name":"Trivialization.baseSet_prod","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝⁶ : TopologicalSpace B\nF₁ : Type u_2\ninst✝⁵ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝³ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝² : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹ : (x : B) → Zero (E₁ x)\ninst✝ : (x : B) → Zero (E₂ x)\n⊢ Eq (e₁.prod e₂).baseSet (Inter.inter e₁.baseSet e₂.baseSet)","decl":"@[simp]\ntheorem baseSet_prod : (prod e₁ e₂).baseSet = e₁.baseSet ∩ e₂.baseSet := rfl\n\n"}
{"name":"Trivialization.prod_symm_apply","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝⁶ : TopologicalSpace B\nF₁ : Type u_2\ninst✝⁵ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝⁴ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝³ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝² : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹ : (x : B) → Zero (E₁ x)\ninst✝ : (x : B) → Zero (E₂ x)\nx : B\nw₁ : F₁\nw₂ : F₂\n⊢ Eq (↑(e₁.prod e₂).symm { fst := x, snd := { fst := w₁, snd := w₂ } }) { proj := x, snd := { fst := e₁.symm x w₁, snd := e₂.symm x w₂ } }","decl":"theorem prod_symm_apply (x : B) (w₁ : F₁) (w₂ : F₂) :\n    (prod e₁ e₂).toPartialEquiv.symm (x, w₁, w₂) = ⟨x, e₁.symm x w₁, e₂.symm x w₂⟩ := rfl\n\n"}
{"name":"instMemTrivializationAtlasProdProd","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\ninst✝¹² : TopologicalSpace B\nF₁ : Type u_2\ninst✝¹¹ : TopologicalSpace F₁\nE₁ : B → Type u_3\ninst✝¹⁰ : TopologicalSpace (Bundle.TotalSpace F₁ E₁)\nF₂ : Type u_4\ninst✝⁹ : TopologicalSpace F₂\nE₂ : B → Type u_5\ninst✝⁸ : TopologicalSpace (Bundle.TotalSpace F₂ E₂)\ninst✝⁷ : (x : B) → Zero (E₁ x)\ninst✝⁶ : (x : B) → Zero (E₂ x)\ninst✝⁵ : (x : B) → TopologicalSpace (E₁ x)\ninst✝⁴ : (x : B) → TopologicalSpace (E₂ x)\ninst✝³ : FiberBundle F₁ E₁\ninst✝² : FiberBundle F₂ E₂\ne₁ : Trivialization F₁ Bundle.TotalSpace.proj\ne₂ : Trivialization F₂ Bundle.TotalSpace.proj\ninst✝¹ : MemTrivializationAtlas e₁\ninst✝ : MemTrivializationAtlas e₂\n⊢ MemTrivializationAtlas (e₁.prod e₂)","decl":"instance {e₁ : Trivialization F₁ (π F₁ E₁)} {e₂ : Trivialization F₂ (π F₂ E₂)}\n    [MemTrivializationAtlas e₁] [MemTrivializationAtlas e₂] :\n    MemTrivializationAtlas (e₁.prod e₂ : Trivialization (F₁ × F₂) (π (F₁ × F₂) (E₁ ×ᵇ E₂))) where\n  out := ⟨e₁, e₂, inferInstance, inferInstance, rfl⟩\n\n"}
{"name":"pullbackTopology_def","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u_1\nF : Type u_2\nE : B → Type u_3\nB' : Type u_4\nf : B' → B\ninst✝¹ : TopologicalSpace B'\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\n⊢ Eq (pullbackTopology F E f) (Min.min (TopologicalSpace.induced Bundle.TotalSpace.proj inst✝¹) (TopologicalSpace.induced (Bundle.Pullback.lift f) inst✝))","decl":"/-- Definition of `Pullback.TotalSpace.topologicalSpace`, which we make irreducible. -/\nirreducible_def pullbackTopology : TopologicalSpace (TotalSpace F (f *ᵖ E)) :=\n  induced TotalSpace.proj ‹TopologicalSpace B'› ⊓\n    induced (Pullback.lift f) ‹TopologicalSpace (TotalSpace F E)›\n\n"}
{"name":"Pullback.continuous_proj","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u\nF : Type v\nE : B → Type w₁\nB' : Type w₂\ninst✝¹ : TopologicalSpace B'\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\nf : B' → B\n⊢ Continuous Bundle.TotalSpace.proj","decl":"theorem Pullback.continuous_proj (f : B' → B) : Continuous (π F (f *ᵖ E)) := by\n  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology_def]\n  exact inf_le_left\n\n"}
{"name":"Pullback.continuous_lift","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u\nF : Type v\nE : B → Type w₁\nB' : Type w₂\ninst✝¹ : TopologicalSpace B'\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\nf : B' → B\n⊢ Continuous (Bundle.Pullback.lift f)","decl":"theorem Pullback.continuous_lift (f : B' → B) : Continuous (@Pullback.lift B F E B' f) := by\n  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology_def]\n  exact inf_le_right\n\n"}
{"name":"inducing_pullbackTotalSpaceEmbedding","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u\nF : Type v\nE : B → Type w₁\nB' : Type w₂\ninst✝¹ : TopologicalSpace B'\ninst✝ : TopologicalSpace (Bundle.TotalSpace F E)\nf : B' → B\n⊢ Topology.IsInducing (Bundle.pullbackTotalSpaceEmbedding f)","decl":"theorem inducing_pullbackTotalSpaceEmbedding (f : B' → B) :\n    IsInducing (@pullbackTotalSpaceEmbedding B F E B' f) := by\n  constructor\n  simp_rw [instTopologicalSpaceProd, induced_inf, induced_compose,\n    Pullback.TotalSpace.topologicalSpace, pullbackTopology_def]\n  rfl\n\n"}
{"name":"Pullback.continuous_totalSpaceMk","module":"Mathlib.Topology.FiberBundle.Constructions","initialProofState":"B : Type u\nF : Type v\nE : B → Type w₁\nB' : Type w₂\ninst✝⁵ : TopologicalSpace B'\ninst✝⁴ : TopologicalSpace (Bundle.TotalSpace F E)\ninst✝³ : TopologicalSpace F\ninst✝² : TopologicalSpace B\ninst✝¹ : (x : B) → TopologicalSpace (E x)\ninst✝ : FiberBundle F E\nf : B' → B\nx : B'\n⊢ Continuous (Bundle.TotalSpace.mk x)","decl":"theorem Pullback.continuous_totalSpaceMk [∀ x, TopologicalSpace (E x)] [FiberBundle F E]\n    {f : B' → B} {x : B'} : Continuous (@TotalSpace.mk _ F (f *ᵖ E) x) := by\n  simp only [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, induced_compose,\n    induced_inf, Function.comp_def, induced_const, top_inf_eq, pullbackTopology_def]\n  exact (FiberBundle.totalSpaceMk_isInducing F E (f x)).eq_induced.le\n\n"}
