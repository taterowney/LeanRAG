{"name":"LieAlgebra.IsExtension.exact","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nself : LieAlgebra.IsExtension i p\n⊢ Eq i.range (LieIdeal.toLieSubalgebra R L p.ker)","decl":"/-- A sequence of two Lie algebra homomorphisms is an extension if it is short exact. -/\nclass IsExtension (i : N →ₗ⁅R⁆ L) (p : L →ₗ⁅R⁆ M) : Prop where\n  ker_eq_bot : i.ker = ⊥\n  range_eq_top : p.range = ⊤\n  exact : i.range = p.ker\n\n"}
{"name":"LieAlgebra.IsExtension.range_eq_top","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nself : LieAlgebra.IsExtension i p\n⊢ Eq p.range Top.top","decl":"/-- A sequence of two Lie algebra homomorphisms is an extension if it is short exact. -/\nclass IsExtension (i : N →ₗ⁅R⁆ L) (p : L →ₗ⁅R⁆ M) : Prop where\n  ker_eq_bot : i.ker = ⊥\n  range_eq_top : p.range = ⊤\n  exact : i.range = p.ker\n\n"}
{"name":"LieAlgebra.IsExtension.ker_eq_bot","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nself : LieAlgebra.IsExtension i p\n⊢ Eq i.ker Bot.bot","decl":"/-- A sequence of two Lie algebra homomorphisms is an extension if it is short exact. -/\nclass IsExtension (i : N →ₗ⁅R⁆ L) (p : L →ₗ⁅R⁆ M) : Prop where\n  ker_eq_bot : i.ker = ⊥\n  range_eq_top : p.range = ⊤\n  exact : i.range = p.ker\n\n"}
{"name":"LieAlgebra.Extension.mk.sizeOf_spec","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nM : Type u_4\ninst✝⁷ : CommRing R\ninst✝⁶ : LieRing N\ninst✝⁵ : LieAlgebra R N\ninst✝⁴ : LieRing M\ninst✝³ : LieAlgebra R M\ninst✝² : SizeOf R\ninst✝¹ : SizeOf N\ninst✝ : SizeOf M\nL : Type u_5\ninstLieRing : LieRing L\ninstLieAlgebra : LieAlgebra R L\nincl : LieHom R N L\nproj : LieHom R L M\nIsExtension : LieAlgebra.IsExtension incl proj\n⊢ Eq (SizeOf.sizeOf { L := L, instLieRing := instLieRing, instLieAlgebra := instLieAlgebra, incl := incl, proj := proj, IsExtension := IsExtension }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf L)) (SizeOf.sizeOf instLieRing)) (SizeOf.sizeOf instLieAlgebra)) (SizeOf.sizeOf incl)) (SizeOf.sizeOf proj)) (SizeOf.sizeOf IsExtension))","decl":"variable (R N M) in\n/-- The type of all Lie extensions of `M` by `N`.  That is, short exact sequences of `R`-Lie algebra\nhomomorphisms `0 → N → L → M → 0` where `R`, `M`, and `N` are fixed. -/\nstructure Extension where\n  /-- The middle object in the sequence. -/\n  L : Type*\n  /-- `L` is a Lie ring. -/\n  instLieRing : LieRing L\n  /-- `L` is a Lie algebra over `R`. -/\n  instLieAlgebra : LieAlgebra R L\n  /-- The inclusion homomorphism `N →ₗ⁅R⁆ L` -/\n  incl : N →ₗ⁅R⁆ L\n  /-- The projection homomorphism `L →ₗ⁅R⁆ M` -/\n  proj : L →ₗ⁅R⁆ M\n  IsExtension : IsExtension incl proj\n\n"}
{"name":"LieAlgebra.Extension.mk.inj","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nM : Type u_4\ninst✝⁴ : CommRing R\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\nL✝ : Type u_5\ninstLieRing✝ : LieRing L✝\ninstLieAlgebra✝ : LieAlgebra R L✝\nincl✝ : LieHom R N L✝\nproj✝ : LieHom R L✝ M\nIsExtension✝ : LieAlgebra.IsExtension incl✝ proj✝\nL : Type u_5\ninstLieRing : LieRing L\ninstLieAlgebra : LieAlgebra R L\nincl : LieHom R N L\nproj : LieHom R L M\nIsExtension : LieAlgebra.IsExtension incl proj\nx✝ : Eq { L := L✝, instLieRing := instLieRing✝, instLieAlgebra := instLieAlgebra✝, incl := incl✝, proj := proj✝, IsExtension := IsExtension✝ } { L := L, instLieRing := instLieRing, instLieAlgebra := instLieAlgebra, incl := incl, proj := proj, IsExtension := IsExtension }\n⊢ And (Eq L✝ L) (And (HEq instLieRing✝ instLieRing) (And (HEq instLieAlgebra✝ instLieAlgebra) (And (HEq incl✝ incl) (HEq proj✝ proj))))","decl":"variable (R N M) in\n/-- The type of all Lie extensions of `M` by `N`.  That is, short exact sequences of `R`-Lie algebra\nhomomorphisms `0 → N → L → M → 0` where `R`, `M`, and `N` are fixed. -/\nstructure Extension where\n  /-- The middle object in the sequence. -/\n  L : Type*\n  /-- `L` is a Lie ring. -/\n  instLieRing : LieRing L\n  /-- `L` is a Lie algebra over `R`. -/\n  instLieAlgebra : LieAlgebra R L\n  /-- The inclusion homomorphism `N →ₗ⁅R⁆ L` -/\n  incl : N →ₗ⁅R⁆ L\n  /-- The projection homomorphism `L →ₗ⁅R⁆ M` -/\n  proj : L →ₗ⁅R⁆ M\n  IsExtension : IsExtension incl proj\n\n"}
{"name":"LieAlgebra.Extension.mk.injEq","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nM : Type u_4\ninst✝⁴ : CommRing R\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\nL✝ : Type u_5\ninstLieRing✝ : LieRing L✝\ninstLieAlgebra✝ : LieAlgebra R L✝\nincl✝ : LieHom R N L✝\nproj✝ : LieHom R L✝ M\nIsExtension✝ : LieAlgebra.IsExtension incl✝ proj✝\nL : Type u_5\ninstLieRing : LieRing L\ninstLieAlgebra : LieAlgebra R L\nincl : LieHom R N L\nproj : LieHom R L M\nIsExtension : LieAlgebra.IsExtension incl proj\n⊢ Eq (Eq { L := L✝, instLieRing := instLieRing✝, instLieAlgebra := instLieAlgebra✝, incl := incl✝, proj := proj✝, IsExtension := IsExtension✝ } { L := L, instLieRing := instLieRing, instLieAlgebra := instLieAlgebra, incl := incl, proj := proj, IsExtension := IsExtension }) (And (Eq L✝ L) (And (HEq instLieRing✝ instLieRing) (And (HEq instLieAlgebra✝ instLieAlgebra) (And (HEq incl✝ incl) (HEq proj✝ proj)))))","decl":"variable (R N M) in\n/-- The type of all Lie extensions of `M` by `N`.  That is, short exact sequences of `R`-Lie algebra\nhomomorphisms `0 → N → L → M → 0` where `R`, `M`, and `N` are fixed. -/\nstructure Extension where\n  /-- The middle object in the sequence. -/\n  L : Type*\n  /-- `L` is a Lie ring. -/\n  instLieRing : LieRing L\n  /-- `L` is a Lie algebra over `R`. -/\n  instLieAlgebra : LieAlgebra R L\n  /-- The inclusion homomorphism `N →ₗ⁅R⁆ L` -/\n  incl : N →ₗ⁅R⁆ L\n  /-- The projection homomorphism `L →ₗ⁅R⁆ M` -/\n  proj : L →ₗ⁅R⁆ M\n  IsExtension : IsExtension incl proj\n\n"}
{"name":"LieAlgebra.Extension.IsExtension","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nM : Type u_4\ninst✝⁴ : CommRing R\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\nself : LieAlgebra.Extension R N M\n⊢ LieAlgebra.IsExtension self.incl self.proj","decl":"variable (R N M) in\n/-- The type of all Lie extensions of `M` by `N`.  That is, short exact sequences of `R`-Lie algebra\nhomomorphisms `0 → N → L → M → 0` where `R`, `M`, and `N` are fixed. -/\nstructure Extension where\n  /-- The middle object in the sequence. -/\n  L : Type*\n  /-- `L` is a Lie ring. -/\n  instLieRing : LieRing L\n  /-- `L` is a Lie algebra over `R`. -/\n  instLieAlgebra : LieAlgebra R L\n  /-- The inclusion homomorphism `N →ₗ⁅R⁆ L` -/\n  incl : N →ₗ⁅R⁆ L\n  /-- The projection homomorphism `L →ₗ⁅R⁆ M` -/\n  proj : L →ₗ⁅R⁆ M\n  IsExtension : IsExtension incl proj\n\n"}
{"name":"LieAlgebra.IsExtension.extension_instLieAlgebra","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nh : LieAlgebra.IsExtension i p\n⊢ Eq h.extension.instLieAlgebra inst✝⁴","decl":"/-- The bundled `LieAlgebra.Extension` corresponding to `LieAlgebra.IsExtension` -/\n@[simps] def IsExtension.extension {i : N →ₗ⁅R⁆ L} {p : L →ₗ⁅R⁆ M} (h : IsExtension i p) :\n    Extension R N M :=\n  ⟨L, _, _, i, p, h⟩\n\n"}
{"name":"LieAlgebra.IsExtension.extension_instLieRing","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nh : LieAlgebra.IsExtension i p\n⊢ Eq h.extension.instLieRing inst✝⁵","decl":"/-- The bundled `LieAlgebra.Extension` corresponding to `LieAlgebra.IsExtension` -/\n@[simps] def IsExtension.extension {i : N →ₗ⁅R⁆ L} {p : L →ₗ⁅R⁆ M} (h : IsExtension i p) :\n    Extension R N M :=\n  ⟨L, _, _, i, p, h⟩\n\n"}
{"name":"LieAlgebra.IsExtension.extension_L","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nh : LieAlgebra.IsExtension i p\n⊢ Eq h.extension.L L","decl":"/-- The bundled `LieAlgebra.Extension` corresponding to `LieAlgebra.IsExtension` -/\n@[simps] def IsExtension.extension {i : N →ₗ⁅R⁆ L} {p : L →ₗ⁅R⁆ M} (h : IsExtension i p) :\n    Extension R N M :=\n  ⟨L, _, _, i, p, h⟩\n\n"}
{"name":"LieAlgebra.IsExtension.extension_incl","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nh : LieAlgebra.IsExtension i p\n⊢ Eq h.extension.incl i","decl":"/-- The bundled `LieAlgebra.Extension` corresponding to `LieAlgebra.IsExtension` -/\n@[simps] def IsExtension.extension {i : N →ₗ⁅R⁆ L} {p : L →ₗ⁅R⁆ M} (h : IsExtension i p) :\n    Extension R N M :=\n  ⟨L, _, _, i, p, h⟩\n\n"}
{"name":"LieAlgebra.IsExtension.extension_proj","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nN : Type u_2\nL : Type u_3\nM : Type u_4\ninst✝⁶ : CommRing R\ninst✝⁵ : LieRing L\ninst✝⁴ : LieAlgebra R L\ninst✝³ : LieRing N\ninst✝² : LieAlgebra R N\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\ni : LieHom R N L\np : LieHom R L M\nh : LieAlgebra.IsExtension i p\n⊢ Eq h.extension.proj p","decl":"/-- The bundled `LieAlgebra.Extension` corresponding to `LieAlgebra.IsExtension` -/\n@[simps] def IsExtension.extension {i : N →ₗ⁅R⁆ L} {p : L →ₗ⁅R⁆ M} (h : IsExtension i p) :\n    Extension R N M :=\n  ⟨L, _, _, i, p, h⟩\n\n"}
{"name":"LieAlgebra.isExtension_of_surjective","module":"Mathlib.Algebra.Lie.Extension","initialProofState":"R : Type u_1\nL : Type u_3\nM : Type u_4\ninst✝⁴ : CommRing R\ninst✝³ : LieRing L\ninst✝² : LieAlgebra R L\ninst✝¹ : LieRing M\ninst✝ : LieAlgebra R M\nf : LieHom R L M\nhf : Function.Surjective ⇑f\n⊢ LieAlgebra.IsExtension f.ker.incl f","decl":"/-- A surjective Lie algebra homomorphism yields an extension. -/\ntheorem isExtension_of_surjective (f : L →ₗ⁅R⁆ M) (hf : Function.Surjective f) :\n    IsExtension f.ker.incl f where\n  ker_eq_bot := LieIdeal.ker_incl f.ker\n  range_eq_top := (LieHom.range_eq_top f).mpr hf\n  exact := LieIdeal.incl_range f.ker\n\n"}
