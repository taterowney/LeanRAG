{"name":"Ordering.ite_eq_lt_distrib","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"c : Prop\ninst✝ : Decidable c\na b : Ordering\n⊢ Eq (Eq (ite c a b) Ordering.lt) (ite c (Eq a Ordering.lt) (Eq b Ordering.lt))","decl":"@[simp]\ntheorem ite_eq_lt_distrib (c : Prop) [Decidable c] (a b : Ordering) :\n    ((if c then a else b) = Ordering.lt) = if c then a = Ordering.lt else b = Ordering.lt := by\n  by_cases c <;> simp [*]\n\n"}
{"name":"Ordering.ite_eq_eq_distrib","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"c : Prop\ninst✝ : Decidable c\na b : Ordering\n⊢ Eq (Eq (ite c a b) Ordering.eq) (ite c (Eq a Ordering.eq) (Eq b Ordering.eq))","decl":"@[simp]\ntheorem ite_eq_eq_distrib (c : Prop) [Decidable c] (a b : Ordering) :\n    ((if c then a else b) = Ordering.eq) = if c then a = Ordering.eq else b = Ordering.eq := by\n  by_cases c <;> simp [*]\n\n"}
{"name":"Ordering.ite_eq_gt_distrib","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"c : Prop\ninst✝ : Decidable c\na b : Ordering\n⊢ Eq (Eq (ite c a b) Ordering.gt) (ite c (Eq a Ordering.gt) (Eq b Ordering.gt))","decl":"@[simp]\ntheorem ite_eq_gt_distrib (c : Prop) [Decidable c] (a b : Ordering) :\n    ((if c then a else b) = Ordering.gt) = if c then a = Ordering.gt else b = Ordering.gt := by\n  by_cases c <;> simp [*]\n\n"}
{"name":"Ordering.dthen_eq_then","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"o₁ o₂ : Ordering\n⊢ Eq (o₁.dthen fun x => o₂) (o₁.then o₂)","decl":"@[simp]\nlemma dthen_eq_then (o₁ o₂ : Ordering) : o₁.dthen (fun _ => o₂) = o₁.then o₂ := by\n  cases o₁ <;> rfl\n\n"}
{"name":"cmpUsing_eq_lt","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"α : Type u\nlt : α → α → Prop\ninst✝ : DecidableRel lt\na b : α\n⊢ Eq (Eq (cmpUsing lt a b) Ordering.lt) (lt a b)","decl":"@[simp]\ntheorem cmpUsing_eq_lt (a b : α) : (cmpUsing lt a b = Ordering.lt) = lt a b := by\n  simp only [cmpUsing, Ordering.ite_eq_lt_distrib, ite_self, if_false_right, and_true, reduceCtorEq]\n\n"}
{"name":"cmpUsing_eq_gt","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"α : Type u\nlt : α → α → Prop\ninst✝¹ : DecidableRel lt\ninst✝ : IsStrictOrder α lt\na b : α\n⊢ Iff (Eq (cmpUsing lt a b) Ordering.gt) (lt b a)","decl":"@[simp]\ntheorem cmpUsing_eq_gt [IsStrictOrder α lt] (a b : α) : cmpUsing lt a b = Ordering.gt ↔ lt b a := by\n  simp only [cmpUsing, Ordering.ite_eq_gt_distrib, if_false_right, and_true, if_false_left,\n    and_iff_right_iff_imp, reduceCtorEq]\n  exact fun hba hab ↦ (irrefl a) (_root_.trans hab hba)\n\n"}
{"name":"cmpUsing_eq_eq","module":"Mathlib.Data.Ordering.Lemmas","initialProofState":"α : Type u\nlt : α → α → Prop\ninst✝ : DecidableRel lt\na b : α\n⊢ Iff (Eq (cmpUsing lt a b) Ordering.eq) (And (Not (lt a b)) (Not (lt b a)))","decl":"@[simp]\ntheorem cmpUsing_eq_eq (a b : α) : cmpUsing lt a b = Ordering.eq ↔ ¬lt a b ∧ ¬lt b a := by simp\n\n"}
