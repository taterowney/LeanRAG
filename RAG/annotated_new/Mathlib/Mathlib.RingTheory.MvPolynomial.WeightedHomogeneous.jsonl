{"name":"MvPolynomial.weightedTotalDegree'_eq_bot_iff","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\ninst✝ : SemilatticeSup M\nw : σ → M\np : MvPolynomial σ R\n⊢ Iff (Eq (MvPolynomial.weightedTotalDegree' w p) Bot.bot) (Eq p 0)","decl":"/-- The `weightedTotalDegree'` of a polynomial `p` is `⊥` if and only if `p = 0`. -/\ntheorem weightedTotalDegree'_eq_bot_iff (w : σ → M) (p : MvPolynomial σ R) :\n    weightedTotalDegree' w p = ⊥ ↔ p = 0 := by\n  simp only [weightedTotalDegree', Finset.sup_eq_bot_iff, mem_support_iff, WithBot.coe_ne_bot,\n    MvPolynomial.eq_zero_iff]\n  exact forall_congr' fun _ => Classical.not_not\n\n"}
{"name":"MvPolynomial.weightedTotalDegree'_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\ninst✝ : SemilatticeSup M\nw : σ → M\n⊢ Eq (MvPolynomial.weightedTotalDegree' w 0) Bot.bot","decl":"/-- The `weightedTotalDegree'` of the zero polynomial is `⊥`. -/\ntheorem weightedTotalDegree'_zero (w : σ → M) :\n    weightedTotalDegree' w (0 : MvPolynomial σ R) = ⊥ := by\n  simp only [weightedTotalDegree', support_zero, Finset.sup_empty]\n\n"}
{"name":"MvPolynomial.weightedTotalDegree_coe","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\nσ : Type u_3\ninst✝² : AddCommMonoid M\ninst✝¹ : SemilatticeSup M\ninst✝ : OrderBot M\nw : σ → M\np : MvPolynomial σ R\nhp : Ne p 0\n⊢ Eq (MvPolynomial.weightedTotalDegree' w p) ↑(MvPolynomial.weightedTotalDegree w p)","decl":"/-- This lemma relates `weightedTotalDegree` and `weightedTotalDegree'`. -/\ntheorem weightedTotalDegree_coe (w : σ → M) (p : MvPolynomial σ R) (hp : p ≠ 0) :\n    weightedTotalDegree' w p = ↑(weightedTotalDegree w p) := by\n  rw [Ne, ← weightedTotalDegree'_eq_bot_iff w p, ← Ne, WithBot.ne_bot_iff_exists] at hp\n  obtain ⟨m, hm⟩ := hp\n  apply le_antisymm\n  · simp only [weightedTotalDegree, weightedTotalDegree', Finset.sup_le_iff, WithBot.coe_le_coe]\n    intro b\n    exact Finset.le_sup\n  · simp only [weightedTotalDegree]\n    have hm' : weightedTotalDegree' w p ≤ m := le_of_eq hm.symm\n    rw [← hm]\n    simpa [weightedTotalDegree'] using hm'\n\n"}
{"name":"MvPolynomial.weightedTotalDegree_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\nσ : Type u_3\ninst✝² : AddCommMonoid M\ninst✝¹ : SemilatticeSup M\ninst✝ : OrderBot M\nw : σ → M\n⊢ Eq (MvPolynomial.weightedTotalDegree w 0) Bot.bot","decl":"/-- The `weightedTotalDegree` of the zero polynomial is `⊥`. -/\ntheorem weightedTotalDegree_zero (w : σ → M) :\n    weightedTotalDegree w (0 : MvPolynomial σ R) = ⊥ := by\n  simp only [weightedTotalDegree, support_zero, Finset.sup_empty]\n\n"}
{"name":"MvPolynomial.le_weightedTotalDegree","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\nσ : Type u_3\ninst✝² : AddCommMonoid M\ninst✝¹ : SemilatticeSup M\ninst✝ : OrderBot M\nw : σ → M\nφ : MvPolynomial σ R\nd : Finsupp σ Nat\nhd : Membership.mem φ.support d\n⊢ LE.le ((Finsupp.weight w) d) (MvPolynomial.weightedTotalDegree w φ)","decl":"theorem le_weightedTotalDegree (w : σ → M) {φ : MvPolynomial σ R} {d : σ →₀ ℕ}\n    (hd : d ∈ φ.support) : weight w d ≤ φ.weightedTotalDegree w :=\n  le_sup hd\n\n"}
{"name":"MvPolynomial.mem_weightedHomogeneousSubmodule","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm : M\np : MvPolynomial σ R\n⊢ Iff (Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w m) p) (MvPolynomial.IsWeightedHomogeneous w p m)","decl":"@[simp]\ntheorem mem_weightedHomogeneousSubmodule (w : σ → M) (m : M) (p : MvPolynomial σ R) :\n    p ∈ weightedHomogeneousSubmodule R w m ↔ p.IsWeightedHomogeneous w m :=\n  Iff.rfl\n\n"}
{"name":"MvPolynomial.weightedHomogeneousSubmodule_eq_finsupp_supported","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm : M\n⊢ Eq (MvPolynomial.weightedHomogeneousSubmodule R w m) (Finsupp.supported R R (setOf fun d => Eq ((Finsupp.weight w) d) m))","decl":"/-- The submodule `weightedHomogeneousSubmodule R w m` of homogeneous `MvPolynomial`s of\n  degree `n` is equal to the `R`-submodule of all `p : (σ →₀ ℕ) →₀ R` such that\n  `p.support ⊆ {d | weight w d = m}`. While equal, the former has a\n  convenient definitional reduction. -/\ntheorem weightedHomogeneousSubmodule_eq_finsupp_supported (w : σ → M) (m : M) :\n    weightedHomogeneousSubmodule R w m = Finsupp.supported R R { d | weight w d = m } := by\n  ext x\n  rw [mem_supported, Set.subset_def]\n  simp only [Finsupp.mem_support_iff, mem_coe]\n  rfl\n\n"}
{"name":"MvPolynomial.weightedHomogeneousSubmodule_mul","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm n : M\n⊢ LE.le (HMul.hMul (MvPolynomial.weightedHomogeneousSubmodule R w m) (MvPolynomial.weightedHomogeneousSubmodule R w n)) (MvPolynomial.weightedHomogeneousSubmodule R w (HAdd.hAdd m n))","decl":"/-- The submodule generated by products `Pm * Pn` of weighted homogeneous polynomials of degrees `m`\n  and `n` is contained in the submodule of weighted homogeneous polynomials of degree `m + n`. -/\ntheorem weightedHomogeneousSubmodule_mul (w : σ → M) (m n : M) :\n    weightedHomogeneousSubmodule R w m * weightedHomogeneousSubmodule R w n ≤\n      weightedHomogeneousSubmodule R w (m + n) := by\n  classical\n  rw [Submodule.mul_le]\n  intro φ hφ ψ hψ c hc\n  rw [coeff_mul] at hc\n  obtain ⟨⟨d, e⟩, hde, H⟩ := Finset.exists_ne_zero_of_sum_ne_zero hc\n  have aux : coeff d φ ≠ 0 ∧ coeff e ψ ≠ 0 := by\n    contrapose! H\n    by_cases h : coeff d φ = 0 <;>\n      simp_all only [Ne, not_false_iff, zero_mul, mul_zero]\n  rw [← mem_antidiagonal.mp hde, ← hφ aux.1, ← hψ aux.2, map_add]\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_monomial","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nd : Finsupp σ Nat\nr : R\nm : M\nhm : Eq ((Finsupp.weight w) d) m\n⊢ MvPolynomial.IsWeightedHomogeneous w ((MvPolynomial.monomial d) r) m","decl":"/-- Monomials are weighted homogeneous. -/\ntheorem isWeightedHomogeneous_monomial (w : σ → M) (d : σ →₀ ℕ) (r : R) {m : M}\n    (hm : weight w d = m) : IsWeightedHomogeneous w (monomial d r) m := by\n  classical\n  intro c hc\n  rw [coeff_monomial] at hc\n  split_ifs at hc with h\n  · subst c\n    exact hm\n  · contradiction\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_of_total_degree_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\nσ : Type u_3\ninst✝² : AddCommMonoid M\ninst✝¹ : SemilatticeSup M\ninst✝ : OrderBot M\nw : σ → M\np : MvPolynomial σ R\nhp : Eq (MvPolynomial.weightedTotalDegree w p) Bot.bot\n⊢ MvPolynomial.IsWeightedHomogeneous w p Bot.bot","decl":"/-- A polynomial of weightedTotalDegree `⊥` is weighted_homogeneous of degree `⊥`. -/\ntheorem isWeightedHomogeneous_of_total_degree_zero [SemilatticeSup M] [OrderBot M] (w : σ → M)\n    {p : MvPolynomial σ R} (hp : weightedTotalDegree w p = (⊥ : M)) :\n    IsWeightedHomogeneous w p (⊥ : M) := by\n  intro d hd\n  have h := weightedTotalDegree_coe w p (MvPolynomial.ne_zero_iff.mpr ⟨d, hd⟩)\n  simp only [weightedTotalDegree', hp] at h\n  rw [eq_bot_iff, ← WithBot.coe_le_coe, ← h]\n  apply Finset.le_sup (mem_support_iff.mpr hd)\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_C","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nr : R\n⊢ MvPolynomial.IsWeightedHomogeneous w (MvPolynomial.C r) 0","decl":"/-- Constant polynomials are weighted homogeneous of degree 0. -/\ntheorem isWeightedHomogeneous_C (w : σ → M) (r : R) :\n    IsWeightedHomogeneous w (C r : MvPolynomial σ R) 0 :=\n  isWeightedHomogeneous_monomial _ _ _ (map_zero _)\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm : M\n⊢ MvPolynomial.IsWeightedHomogeneous w 0 m","decl":"/-- 0 is weighted homogeneous of any degree. -/\ntheorem isWeightedHomogeneous_zero (w : σ → M) (m : M) :\n    IsWeightedHomogeneous w (0 : MvPolynomial σ R) m :=\n  (weightedHomogeneousSubmodule R w m).zero_mem\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_one","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\n⊢ MvPolynomial.IsWeightedHomogeneous w 1 0","decl":"/-- 1 is weighted homogeneous of degree 0. -/\ntheorem isWeightedHomogeneous_one (w : σ → M) : IsWeightedHomogeneous w (1 : MvPolynomial σ R) 0 :=\n  isWeightedHomogeneous_C _ _\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_X","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\ni : σ\n⊢ MvPolynomial.IsWeightedHomogeneous w (MvPolynomial.X i) (w i)","decl":"/-- An indeterminate `i : σ` is weighted homogeneous of degree `w i`. -/\ntheorem isWeightedHomogeneous_X (w : σ → M) (i : σ) :\n    IsWeightedHomogeneous w (X i : MvPolynomial σ R) (w i) := by\n  apply isWeightedHomogeneous_monomial\n  simp only [weight, LinearMap.toAddMonoidHom_coe, linearCombination_single, one_nsmul]\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.coeff_eq_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nφ : MvPolynomial σ R\nn : M\nw : σ → M\nhφ : MvPolynomial.IsWeightedHomogeneous w φ n\nd : Finsupp σ Nat\nhd : Ne ((Finsupp.weight w) d) n\n⊢ Eq (MvPolynomial.coeff d φ) 0","decl":"/-- The weighted degree of a weighted homogeneous polynomial controls its support. -/\ntheorem coeff_eq_zero {w : σ → M} (hφ : IsWeightedHomogeneous w φ n) (d : σ →₀ ℕ)\n    (hd : weight w d ≠ n) : coeff d φ = 0 := by\n  have aux := mt (@hφ d) hd\n  rwa [Classical.not_not] at aux\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.inj_right","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nφ : MvPolynomial σ R\nm n : M\nw : σ → M\nhφ : Ne φ 0\nhm : MvPolynomial.IsWeightedHomogeneous w φ m\nhn : MvPolynomial.IsWeightedHomogeneous w φ n\n⊢ Eq m n","decl":"/-- The weighted degree of a nonzero weighted homogeneous polynomial is well-defined. -/\ntheorem inj_right {w : σ → M} (hφ : φ ≠ 0) (hm : IsWeightedHomogeneous w φ m)\n    (hn : IsWeightedHomogeneous w φ n) : m = n := by\n  obtain ⟨d, hd⟩ : ∃ d, coeff d φ ≠ 0 := exists_coeff_ne_zero hφ\n  rw [← hm hd, ← hn hd]\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.add","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nφ ψ : MvPolynomial σ R\nn : M\nw : σ → M\nhφ : MvPolynomial.IsWeightedHomogeneous w φ n\nhψ : MvPolynomial.IsWeightedHomogeneous w ψ n\n⊢ MvPolynomial.IsWeightedHomogeneous w (HAdd.hAdd φ ψ) n","decl":"/-- The sum of two weighted homogeneous polynomials of degree `n` is weighted homogeneous of\n  weighted degree `n`. -/\ntheorem add {w : σ → M} (hφ : IsWeightedHomogeneous w φ n) (hψ : IsWeightedHomogeneous w ψ n) :\n    IsWeightedHomogeneous w (φ + ψ) n :=\n  (weightedHomogeneousSubmodule R w n).add_mem hφ hψ\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.sum","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nι : Type u_4\ns : Finset ι\nφ : ι → MvPolynomial σ R\nn : M\nw : σ → M\nh : ∀ (i : ι), Membership.mem s i → MvPolynomial.IsWeightedHomogeneous w (φ i) n\n⊢ MvPolynomial.IsWeightedHomogeneous w (s.sum fun i => φ i) n","decl":"/-- The sum of weighted homogeneous polynomials of degree `n` is weighted homogeneous of\n  weighted degree `n`. -/\ntheorem sum {ι : Type*} (s : Finset ι) (φ : ι → MvPolynomial σ R) (n : M) {w : σ → M}\n    (h : ∀ i ∈ s, IsWeightedHomogeneous w (φ i) n) : IsWeightedHomogeneous w (∑ i ∈ s, φ i) n :=\n  (weightedHomogeneousSubmodule R w n).sum_mem h\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.mul","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nφ ψ : MvPolynomial σ R\nm n : M\nw : σ → M\nhφ : MvPolynomial.IsWeightedHomogeneous w φ m\nhψ : MvPolynomial.IsWeightedHomogeneous w ψ n\n⊢ MvPolynomial.IsWeightedHomogeneous w (HMul.hMul φ ψ) (HAdd.hAdd m n)","decl":"/-- The product of weighted homogeneous polynomials of weighted degrees `m` and `n` is weighted\n  homogeneous of weighted degree `m + n`. -/\ntheorem mul {w : σ → M} (hφ : IsWeightedHomogeneous w φ m) (hψ : IsWeightedHomogeneous w ψ n) :\n    IsWeightedHomogeneous w (φ * ψ) (m + n) :=\n  weightedHomogeneousSubmodule_mul w m n <| Submodule.mul_mem_mul hφ hψ\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.pow","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nφ : MvPolynomial σ R\nm : M\nw : σ → M\nhφ : MvPolynomial.IsWeightedHomogeneous w φ m\nn : Nat\n⊢ MvPolynomial.IsWeightedHomogeneous w (HPow.hPow φ n) (HSMul.hSMul n m)","decl":"theorem pow {w : σ → M} (hφ : IsWeightedHomogeneous w φ m) (n : ℕ) :\n    IsWeightedHomogeneous w (φ ^ n) (n • m) := by\n  induction n with\n  | zero => rw [pow_zero, zero_smul]; exact isWeightedHomogeneous_one R w\n  | succ n ih => rw [pow_succ, succ_nsmul]; exact ih.mul hφ\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.prod","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nι : Type u_4\ns : Finset ι\nφ : ι → MvPolynomial σ R\nn : ι → M\nw : σ → M\na✝ : ∀ (i : ι), Membership.mem s i → MvPolynomial.IsWeightedHomogeneous w (φ i) (n i)\n⊢ MvPolynomial.IsWeightedHomogeneous w (s.prod fun i => φ i) (s.sum fun i => n i)","decl":"/-- A product of weighted homogeneous polynomials is weighted homogeneous, with weighted degree\n  equal to the sum of the weighted degrees. -/\ntheorem prod {ι : Type*} (s : Finset ι) (φ : ι → MvPolynomial σ R) (n : ι → M) {w : σ → M} :\n    (∀ i ∈ s, IsWeightedHomogeneous w (φ i) (n i)) →\n      IsWeightedHomogeneous w (∏ i ∈ s, φ i) (∑ i ∈ s, n i) := by\n  classical\n  refine Finset.induction_on s ?_ ?_\n  · intro\n    simp only [isWeightedHomogeneous_one, Finset.sum_empty, Finset.prod_empty]\n  · intro i s his IH h\n    simp only [his, Finset.prod_insert, Finset.sum_insert, not_false_iff]\n    apply (h i (Finset.mem_insert_self _ _)).mul (IH _)\n    intro j hjs\n    exact h j (Finset.mem_insert_of_mem hjs)\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.weighted_total_degree","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\nφ : MvPolynomial σ R\nn : M\ninst✝ : SemilatticeSup M\nw : σ → M\nhφ : MvPolynomial.IsWeightedHomogeneous w φ n\nh : Ne φ 0\n⊢ Eq (MvPolynomial.weightedTotalDegree' w φ) ↑n","decl":"/-- A non zero weighted homogeneous polynomial of weighted degree `n` has weighted total degree\n  `n`. -/\ntheorem weighted_total_degree [SemilatticeSup M] {w : σ → M} (hφ : IsWeightedHomogeneous w φ n)\n    (h : φ ≠ 0) : weightedTotalDegree' w φ = n := by\n  simp only [weightedTotalDegree']\n  apply le_antisymm\n  · simp only [Finset.sup_le_iff, mem_support_iff, WithBot.coe_le_coe]\n    exact fun d hd => le_of_eq (hφ hd)\n  · obtain ⟨d, hd⟩ : ∃ d, coeff d φ ≠ 0 := exists_coeff_ne_zero h\n    simp only [← hφ hd, Finsupp.sum]\n    replace hd := Finsupp.mem_support_iff.mpr hd\n    apply Finset.le_sup hd\n\n"}
{"name":"MvPolynomial.WeightedHomogeneousSubmodule.gradedMonoid","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\n⊢ SetLike.GradedMonoid (MvPolynomial.weightedHomogeneousSubmodule R w)","decl":"/-- The weighted homogeneous submodules form a graded monoid. -/\nlemma WeightedHomogeneousSubmodule.gradedMonoid {w : σ → M} :\n    SetLike.GradedMonoid (weightedHomogeneousSubmodule R w) where\n  one_mem := isWeightedHomogeneous_one R w\n  mul_mem _ _ _ _ := IsWeightedHomogeneous.mul\n\n"}
{"name":"MvPolynomial.coeff_weightedHomogeneousComponent","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\nw : σ → M\nn : M\nφ : MvPolynomial σ R\ninst✝ : DecidableEq M\nd : Finsupp σ Nat\n⊢ Eq (MvPolynomial.coeff d ((MvPolynomial.weightedHomogeneousComponent w n) φ)) (ite (Eq ((Finsupp.weight w) d) n) (MvPolynomial.coeff d φ) 0)","decl":"theorem coeff_weightedHomogeneousComponent [DecidableEq M] (d : σ →₀ ℕ) :\n    coeff d (weightedHomogeneousComponent w n φ) =\n      if weight w d = n then coeff d φ else 0 :=\n  letI := Classical.decEq M\n  Finsupp.filter_apply (fun d : σ →₀ ℕ => weight w d = n) φ d |>.trans <| by convert rfl\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_apply","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\nw : σ → M\nn : M\nφ : MvPolynomial σ R\ninst✝ : DecidableEq M\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w n) φ) ((Finset.filter (fun d => Eq ((Finsupp.weight w) d) n) φ.support).sum fun d => (MvPolynomial.monomial d) (MvPolynomial.coeff d φ))","decl":"theorem weightedHomogeneousComponent_apply [DecidableEq M] :\n    weightedHomogeneousComponent w n φ =\n      ∑ d ∈ φ.support with weight w d = n, monomial d (coeff d φ) :=\n  letI := Classical.decEq M\n  Finsupp.filter_eq_sum (fun d : σ →₀ ℕ => weight w d = n) φ |>.trans <| by convert rfl\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_isWeightedHomogeneous","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nn : M\nφ : MvPolynomial σ R\n⊢ MvPolynomial.IsWeightedHomogeneous w ((MvPolynomial.weightedHomogeneousComponent w n) φ) n","decl":"/-- The `n` weighted homogeneous component of a polynomial is weighted homogeneous of\nweighted degree `n`. -/\ntheorem weightedHomogeneousComponent_isWeightedHomogeneous :\n    (weightedHomogeneousComponent w n φ).IsWeightedHomogeneous w n := by\n  classical\n  intro d hd\n  contrapose! hd\n  rw [coeff_weightedHomogeneousComponent, if_neg hd]\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_mem","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nφ : MvPolynomial σ R\nm : M\n⊢ Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w m) ((MvPolynomial.weightedHomogeneousComponent w m) φ)","decl":"theorem weightedHomogeneousComponent_mem (w : σ → M) (φ : MvPolynomial σ R) (m : M) :\n    weightedHomogeneousComponent w m φ ∈ weightedHomogeneousSubmodule R w m := by\n  rw [mem_weightedHomogeneousSubmodule]\n  exact weightedHomogeneousComponent_isWeightedHomogeneous m φ\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_C_mul","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nφ : MvPolynomial σ R\nn : M\nr : R\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w n) (HMul.hMul (MvPolynomial.C r) φ)) (HMul.hMul (MvPolynomial.C r) ((MvPolynomial.weightedHomogeneousComponent w n) φ))","decl":"@[simp]\ntheorem weightedHomogeneousComponent_C_mul (n : M) (r : R) :\n    weightedHomogeneousComponent w n (C r * φ) = C r * weightedHomogeneousComponent w n φ := by\n  simp only [C_mul', LinearMap.map_smul]\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_eq_zero'","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nn : M\nφ : MvPolynomial σ R\nh : ∀ (d : Finsupp σ Nat), Membership.mem φ.support d → Ne ((Finsupp.weight w) d) n\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w n) φ) 0","decl":"theorem weightedHomogeneousComponent_eq_zero'\n    (h : ∀ d : σ →₀ ℕ, d ∈ φ.support → weight w d ≠ n) :\n    weightedHomogeneousComponent w n φ = 0 := by\n  classical\n  rw [weightedHomogeneousComponent_apply, sum_eq_zero]\n  intro d hd; rw [mem_filter] at hd\n  exfalso; exact h _ hd.1 hd.2\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_eq_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\nσ : Type u_3\ninst✝² : AddCommMonoid M\nw : σ → M\nn : M\nφ : MvPolynomial σ R\ninst✝¹ : SemilatticeSup M\ninst✝ : OrderBot M\nh : LT.lt (MvPolynomial.weightedTotalDegree w φ) n\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w n) φ) 0","decl":"theorem weightedHomogeneousComponent_eq_zero [SemilatticeSup M] [OrderBot M]\n    (h : weightedTotalDegree w φ < n) : weightedHomogeneousComponent w n φ = 0 := by\n  classical\n  rw [weightedHomogeneousComponent_apply, sum_eq_zero]\n  intro d hd\n  rw [Finset.mem_filter] at hd\n  exfalso\n  apply lt_irrefl n\n  nth_rw 1 [← hd.2]\n  exact lt_of_le_of_lt (le_weightedTotalDegree w hd.1) h\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_finsupp","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nφ : MvPolynomial σ R\n⊢ (Function.support fun m => (MvPolynomial.weightedHomogeneousComponent w m) φ).Finite","decl":"theorem weightedHomogeneousComponent_finsupp :\n    (Function.support fun m => weightedHomogeneousComponent w m φ).Finite := by\n  apply ((fun d : σ →₀ ℕ => (weight w) d) '' (φ.support : Set (σ →₀ ℕ))).toFinite.subset\n  intro m hm\n  by_contra hm'\n  apply hm (weightedHomogeneousComponent_eq_zero' m φ _)\n  simpa only [Set.mem_image, not_exists, not_and] using hm'\n\n"}
{"name":"MvPolynomial.sum_weightedHomogeneousComponent","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nφ : MvPolynomial σ R\n⊢ Eq (finsum fun m => (MvPolynomial.weightedHomogeneousComponent w m) φ) φ","decl":"/-- Every polynomial is the sum of its weighted homogeneous components. -/\ntheorem sum_weightedHomogeneousComponent :\n    (finsum fun m => weightedHomogeneousComponent w m φ) = φ := by\n  classical\n  rw [finsum_eq_sum _ (weightedHomogeneousComponent_finsupp φ)]\n  ext1 d\n  simp only [coeff_sum, coeff_weightedHomogeneousComponent]\n  rw [Finset.sum_eq_single (weight w d)]\n  · rw [if_pos rfl]\n  · intro m _ hm'\n    rw [if_neg hm'.symm]\n  · intro hm\n    rw [if_pos rfl]\n    simp only [Finite.mem_toFinset, mem_support, Ne, Classical.not_not] at hm\n    have := coeff_weightedHomogeneousComponent (w := w) (weight w d) φ d\n    rw [hm, if_pos rfl, coeff_zero] at this\n    exact this.symm\n\n"}
{"name":"MvPolynomial.finsum_weightedHomogeneousComponent","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nφ : MvPolynomial σ R\n⊢ Eq (finsum fun m => (MvPolynomial.weightedHomogeneousComponent w m) φ) φ","decl":"theorem finsum_weightedHomogeneousComponent :\n    (finsum fun m => weightedHomogeneousComponent w m φ) = φ := by\n  rw [sum_weightedHomogeneousComponent]\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.weightedHomogeneousComponent_same","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm : M\np : MvPolynomial σ R\nhp : MvPolynomial.IsWeightedHomogeneous w p m\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w m) p) p","decl":"theorem IsWeightedHomogeneous.weightedHomogeneousComponent_same {m : M} {p : MvPolynomial σ R}\n    (hp : IsWeightedHomogeneous w p m) :\n    weightedHomogeneousComponent w m p = p := by\n  classical\n  ext x\n  rw [coeff_weightedHomogeneousComponent]\n  by_cases zero_coeff : coeff x p = 0\n  · split_ifs\n    · rfl\n    rw [zero_coeff]\n  · rw [hp zero_coeff, if_pos rfl]\n\n"}
{"name":"MvPolynomial.IsWeightedHomogeneous.weightedHomogeneousComponent_ne","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm n : M\np : MvPolynomial σ R\nhp : MvPolynomial.IsWeightedHomogeneous w p m\na✝ : Ne n m\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w n) p) 0","decl":"theorem IsWeightedHomogeneous.weightedHomogeneousComponent_ne {m : M} (n : M)\n    {p : MvPolynomial σ R} (hp : IsWeightedHomogeneous w p m) :\n    n ≠ m → weightedHomogeneousComponent w n p = 0 := by\n  classical\n  intro hn\n  ext x\n  rw [coeff_weightedHomogeneousComponent]\n  by_cases zero_coeff : coeff x p = 0\n  · simp [zero_coeff]\n  · rw [if_neg]\n    · rw [coeff_zero]\n    · rw [hp zero_coeff]; exact Ne.symm hn\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_of_mem","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\nw : σ → M\ninst✝ : DecidableEq M\nm n : M\np : MvPolynomial σ R\nh : Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w n) p\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w m) p) (ite (Eq m n) p 0)","decl":"/-- The weighted homogeneous components of a weighted homogeneous polynomial. -/\ntheorem weightedHomogeneousComponent_of_mem [DecidableEq M] {m n : M}\n    {p : MvPolynomial σ R} (h : p ∈ weightedHomogeneousSubmodule R w n) :\n    weightedHomogeneousComponent w m p = if m = n then p else 0 := by\n  simp only [mem_weightedHomogeneousSubmodule] at h\n  ext x\n  rw [coeff_weightedHomogeneousComponent]\n  by_cases zero_coeff : coeff x p = 0\n  · split_ifs <;>\n    simp only [zero_coeff, coeff_zero]\n  · rw [h zero_coeff]\n    simp only [show n = m ↔ m = n from eq_comm]\n    split_ifs with h1\n    · rfl\n    · simp only [coeff_zero]\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_of_isWeightedHomogeneous_same","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm : M\np : MvPolynomial σ R\nhp : MvPolynomial.IsWeightedHomogeneous w p m\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w m) p) p","decl":"theorem weightedHomogeneousComponent_of_isWeightedHomogeneous_same\n    {m : M} {p : MvPolynomial σ R} (hp : IsWeightedHomogeneous w p m) :\n    weightedHomogeneousComponent w m p = p := by\n  classical\n  ext x\n  rw [coeff_weightedHomogeneousComponent]\n  by_cases zero_coeff : coeff x p = 0\n  · simp [zero_coeff]\n  · rw [hp zero_coeff, if_pos rfl]\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_of_isWeightedHomogeneous_ne","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝¹ : CommSemiring R\nσ : Type u_3\ninst✝ : AddCommMonoid M\nw : σ → M\nm n : M\np : MvPolynomial σ R\nhp : MvPolynomial.IsWeightedHomogeneous w p m\nhn : Ne n m\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w n) p) 0","decl":"theorem weightedHomogeneousComponent_of_isWeightedHomogeneous_ne\n    {m n : M} {p : MvPolynomial σ R} (hp : IsWeightedHomogeneous w p m) (hn : n ≠ m) :\n    weightedHomogeneousComponent w n p = 0 := by\n  classical\n  ext x\n  rw [coeff_weightedHomogeneousComponent]\n  by_cases zero_coeff : coeff x p = 0\n  · simp [zero_coeff]\n  · rw [if_neg (by simp only [hp zero_coeff, hn.symm, not_false_eq_true]), coeff_zero]\n\n"}
{"name":"MvPolynomial.DirectSum.coeLinearMap_eq_dfinsupp_sum","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\nσ : Type u_3\ninst✝³ : AddCommMonoid M\nw : σ → M\ninst✝² : DecidableEq σ\ninst✝¹ : DecidableEq R\ninst✝ : DecidableEq M\nx : DirectSum M fun i => Subtype fun x => Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w i) x\n⊢ Eq ((DirectSum.coeLinearMap fun i => MvPolynomial.weightedHomogeneousSubmodule R w i) x) (DFinsupp.sum x fun x x_1 => ↑x_1)","decl":"theorem DirectSum.coeLinearMap_eq_dfinsupp_sum [DecidableEq σ] [DecidableEq R] [DecidableEq M]\n    (x : DirectSum M fun i : M => ↥(weightedHomogeneousSubmodule R w i)) :\n    (coeLinearMap fun i : M => weightedHomogeneousSubmodule R w i) x =\n      DFinsupp.sum x (fun _ x => ↑x) := by\n  rw [_root_.DirectSum.coeLinearMap_eq_dfinsupp_sum]\n\n"}
{"name":"MvPolynomial.DirectSum.coeAddMonoidHom_eq_support_sum","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁴ : CommSemiring R\nσ : Type u_3\ninst✝³ : AddCommMonoid M\nw : σ → M\ninst✝² : DecidableEq σ\ninst✝¹ : DecidableEq R\ninst✝ : DecidableEq M\nx : DirectSum M fun i => Subtype fun x => Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w i) x\n⊢ Eq ((DirectSum.coeAddMonoidHom fun i => MvPolynomial.weightedHomogeneousSubmodule R w i) x) (DFinsupp.sum x fun x x_1 => ↑x_1)","decl":"theorem DirectSum.coeAddMonoidHom_eq_support_sum [DecidableEq σ] [DecidableEq R] [DecidableEq M]\n    (x : DirectSum M fun i : M => ↥(weightedHomogeneousSubmodule R w i)) :\n    (DirectSum.coeAddMonoidHom fun i : M => weightedHomogeneousSubmodule R w i) x =\n      DFinsupp.sum x (fun _ x => ↑x) :=\n  DirectSum.coeLinearMap_eq_dfinsupp_sum R w x\n\n"}
{"name":"MvPolynomial.DirectSum.coeLinearMap_eq_finsum","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\nw : σ → M\ninst✝ : DecidableEq M\nx : DirectSum M fun i => Subtype fun x => Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w i) x\n⊢ Eq ((DirectSum.coeLinearMap fun i => MvPolynomial.weightedHomogeneousSubmodule R w i) x) (finsum fun m => ↑(x m))","decl":"theorem DirectSum.coeLinearMap_eq_finsum [DecidableEq M]\n    (x : DirectSum M fun i : M => ↥(weightedHomogeneousSubmodule R w i)) :\n    (DirectSum.coeLinearMap fun i : M => weightedHomogeneousSubmodule R w i) x =\n      finsum fun m => x m := by\n  classical\n  rw [DirectSum.coeLinearMap_eq_dfinsupp_sum, DFinsupp.sum, finsum_eq_sum_of_support_subset]\n  apply DirectSum.support_subset\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_directSum","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : AddCommMonoid M\nw : σ → M\ninst✝ : DecidableEq M\nx : DirectSum M fun i => Subtype fun x => Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w i) x\nm : M\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w m) ((DirectSum.coeLinearMap fun i => MvPolynomial.weightedHomogeneousSubmodule R w i) x)) ↑(x m)","decl":"theorem weightedHomogeneousComponent_directSum [DecidableEq M]\n    (x : DirectSum M fun i : M => ↥(weightedHomogeneousSubmodule R w i)) (m : M) :\n    (weightedHomogeneousComponent w m)\n      ((DirectSum.coeLinearMap fun i : M => weightedHomogeneousSubmodule R w i) x) = x m := by\n  classical\n  rw [DirectSum.coeLinearMap_eq_dfinsupp_sum, DFinsupp.sum, map_sum]\n  convert @Finset.sum_eq_single M (MvPolynomial σ R) _ (DFinsupp.support x) _ m _ _\n  · rw [weightedHomogeneousComponent_of_isWeightedHomogeneous_same (x m).prop]\n  · intro n _ hmn\n    rw [weightedHomogeneousComponent_of_isWeightedHomogeneous_ne (x n).prop hmn.symm]\n  · rw [DFinsupp.not_mem_support_iff]\n    intro hm; rw [hm, Submodule.coe_zero, map_zero]\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommSemiring R\nσ : Type u_3\ninst✝² : OrderedAddCommMonoid M\nw : σ → M\nφ : MvPolynomial σ R\ninst✝¹ : CanonicallyOrderedAdd M\ninst✝ : NoZeroSMulDivisors Nat M\nhw : ∀ (i : σ), Ne (w i) 0\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w 0) φ) (MvPolynomial.C (MvPolynomial.coeff 0 φ))","decl":"/-- If `M` is a canonically `OrderedAddCommMonoid`, then the `weightedHomogeneousComponent`\n  of weighted degree `0` of a polynomial is its constant coefficient. -/\n@[simp]\ntheorem weightedHomogeneousComponent_zero [CanonicallyOrderedAdd M] [NoZeroSMulDivisors ℕ M]\n    (hw : ∀ i : σ, w i ≠ 0) :\n    weightedHomogeneousComponent w 0 φ = C (coeff 0 φ) := by\n  classical\n  ext1 d\n  rcases Classical.em (d = 0) with (rfl | hd)\n  · simp only [coeff_weightedHomogeneousComponent, if_pos, map_zero, coeff_zero_C]\n  · rw [coeff_weightedHomogeneousComponent, if_neg, coeff_C, if_neg (Ne.symm hd)]\n    simp only [weight, LinearMap.toAddMonoidHom_coe, Finsupp.linearCombination_apply, Finsupp.sum,\n      sum_eq_zero_iff, Finsupp.mem_support_iff, Ne, smul_eq_zero, not_forall, not_or,\n      and_self_left, exists_prop]\n    simp only [DFunLike.ext_iff, Finsupp.coe_zero, Pi.zero_apply, not_forall] at hd\n    obtain ⟨i, hi⟩ := hd\n    exact ⟨i, hi, hw i⟩\n\n"}
{"name":"MvPolynomial.nonTorsionWeight_of","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"M : Type u_2\nσ : Type u_3\ninst✝¹ : OrderedAddCommMonoid M\nw : σ → M\ninst✝ : NoZeroSMulDivisors Nat M\nhw : ∀ (i : σ), Ne (w i) 0\n⊢ MvPolynomial.NonTorsionWeight w","decl":"theorem nonTorsionWeight_of [NoZeroSMulDivisors ℕ M] (hw : ∀ i : σ, w i ≠ 0) :\n    NonTorsionWeight w :=\n  fun _ x hnx => (smul_eq_zero_iff_left (hw x)).mp hnx\n\n"}
{"name":"MvPolynomial.weightedDegree_eq_zero_iff","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"M : Type u_2\nσ : Type u_3\ninst✝¹ : OrderedAddCommMonoid M\nw : σ → M\ninst✝ : CanonicallyOrderedAdd M\nhw : MvPolynomial.NonTorsionWeight w\nm : Finsupp σ Nat\n⊢ Iff (Eq ((Finsupp.weight w) m) 0) (∀ (x : σ), Eq (m x) 0)","decl":"/-- If `w` is a nontorsion weight function, then the finitely supported function `m : σ →₀ ℕ`\n  has weighted degree zero if and only if `∀ x : σ, m x = 0`. -/\ntheorem weightedDegree_eq_zero_iff [CanonicallyOrderedAdd M]\n    (hw : NonTorsionWeight w) {m : σ →₀ ℕ} :\n    weight w m = 0 ↔ ∀ x : σ, m x = 0 := by\n  simp only [weight, Finsupp.linearCombination, LinearMap.toAddMonoidHom_coe, coe_lsum,\n    LinearMap.coe_smulRight, LinearMap.id_coe, id_eq]\n  rw [Finsupp.sum, Finset.sum_eq_zero_iff]\n  apply forall_congr'\n  intro x\n  rw [Finsupp.mem_support_iff]\n  constructor\n  · intro hx\n    by_contra hx'\n    exact absurd (hw _ _ (hx hx')) hx'\n  · intro hax _\n    simp only [hax, zero_smul]\n\n"}
{"name":"MvPolynomial.isWeightedHomogeneous_zero_iff_weightedTotalDegree_eq_zero","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : LinearOrderedAddCommMonoid M\ninst✝ : CanonicallyOrderedAdd M\nw : σ → M\np : MvPolynomial σ R\n⊢ Iff (MvPolynomial.IsWeightedHomogeneous w p 0) (Eq (MvPolynomial.weightedTotalDegree w p) 0)","decl":"/-- A multivatiate polynomial is weighted homogeneous of weighted degree zero if and only if\n  its weighted total degree is equal to zero. -/\ntheorem isWeightedHomogeneous_zero_iff_weightedTotalDegree_eq_zero {p : MvPolynomial σ R} :\n    IsWeightedHomogeneous w p 0 ↔ p.weightedTotalDegree w = 0 := by\n  rw [weightedTotalDegree, ← bot_eq_zero, Finset.sup_eq_bot_iff, bot_eq_zero, IsWeightedHomogeneous]\n  apply forall_congr'\n  intro m\n  rw [mem_support_iff]\n\n"}
{"name":"MvPolynomial.weightedTotalDegree_eq_zero_iff","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\ninst✝¹ : LinearOrderedAddCommMonoid M\ninst✝ : CanonicallyOrderedAdd M\nw : σ → M\nhw : MvPolynomial.NonTorsionWeight w\np : MvPolynomial σ R\n⊢ Iff (Eq (MvPolynomial.weightedTotalDegree w p) 0) (∀ (m : Finsupp σ Nat), Membership.mem p.support m → ∀ (x : σ), Eq (m x) 0)","decl":"/-- If `w` is a nontorsion weight function, then a multivariate polynomial has weighted total\n  degree zero if and only if for every `m ∈ p.support` and `x : σ`, `m x = 0`. -/\ntheorem weightedTotalDegree_eq_zero_iff (hw : NonTorsionWeight w) (p : MvPolynomial σ R) :\n    p.weightedTotalDegree w = 0 ↔ ∀ (m : σ →₀ ℕ) (_ : m ∈ p.support) (x : σ), m x = 0 := by\n  rw [← isWeightedHomogeneous_zero_iff_weightedTotalDegree_eq_zero, IsWeightedHomogeneous]\n  apply forall_congr'\n  intro m\n  rw [mem_support_iff]\n  apply forall_congr'\n  intro _\n  exact weightedDegree_eq_zero_iff hw\n\n"}
{"name":"MvPolynomial.weightedHomogeneousComponent_eq_zero_of_not_mem","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\nw : σ → M\ninst✝¹ : AddCommMonoid M\ninst✝ : DecidableEq M\nφ : MvPolynomial σ R\ni : M\nhi : Not (Membership.mem (Finset.image (⇑(Finsupp.weight w)) φ.support) i)\n⊢ Eq ((MvPolynomial.weightedHomogeneousComponent w i) φ) 0","decl":"theorem weightedHomogeneousComponent_eq_zero_of_not_mem [DecidableEq M]\n    (φ : MvPolynomial σ R) (i : M) (hi : i ∉ Finset.image (weight w) φ.support) :\n    weightedHomogeneousComponent w i φ = 0 := by\n  apply weightedHomogeneousComponent_eq_zero'\n  simp only [Finset.mem_image, mem_support_iff, ne_eq, exists_prop, not_exists, not_and] at hi\n  exact fun m hm ↦ hi m (mem_support_iff.mp hm)\n\n"}
{"name":"MvPolynomial.decompose'_apply","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\nw : σ → M\ninst✝¹ : AddCommMonoid M\ninst✝ : DecidableEq M\nφ : MvPolynomial σ R\nm : M\n⊢ Eq (↑((MvPolynomial.decompose' R w φ) m)) ((MvPolynomial.weightedHomogeneousComponent w m) φ)","decl":"theorem decompose'_apply [DecidableEq M] (φ : MvPolynomial σ R) (m : M) :\n    (decompose' R w φ m : MvPolynomial σ R) = weightedHomogeneousComponent w m φ := by\n  rw [decompose']\n  by_cases hm : m ∈ Finset.image (weight w) φ.support\n  · simp only [DirectSum.mk_apply_of_mem hm, Subtype.coe_mk]\n  · rw [DirectSum.mk_apply_of_not_mem hm, Submodule.coe_zero,\n      weightedHomogeneousComponent_eq_zero_of_not_mem w φ m hm]\n\n"}
{"name":"MvPolynomial.weightedDecomposition.decompose'_eq","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\nw : σ → M\ninst✝¹ : AddCommMonoid M\ninst✝ : DecidableEq M\n⊢ Eq DirectSum.Decomposition.decompose' fun φ => (DirectSum.mk (fun i => Subtype fun x => Membership.mem (MvPolynomial.weightedHomogeneousSubmodule R w i) x) (Finset.image (⇑(Finsupp.weight w)) φ.support)) fun m => ⟨(MvPolynomial.weightedHomogeneousComponent w ↑m) φ, ⋯⟩","decl":"theorem weightedDecomposition.decompose'_eq [DecidableEq M] :\n    (weightedDecomposition R w).decompose' = fun φ : MvPolynomial σ R =>\n      DirectSum.mk (fun i : M => ↥(weightedHomogeneousSubmodule R w i))\n        (Finset.image (weight w) φ.support) fun m =>\n          ⟨weightedHomogeneousComponent w m φ, weightedHomogeneousComponent_mem w φ m⟩ := rfl\n\n"}
{"name":"MvPolynomial.weightedDecomposition.decompose'_apply","module":"Mathlib.RingTheory.MvPolynomial.WeightedHomogeneous","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\nσ : Type u_3\nw : σ → M\ninst✝¹ : AddCommMonoid M\ninst✝ : DecidableEq M\nφ : MvPolynomial σ R\nm : M\n⊢ Eq (↑((DirectSum.Decomposition.decompose' φ) m)) ((MvPolynomial.weightedHomogeneousComponent w m) φ)","decl":"theorem weightedDecomposition.decompose'_apply [DecidableEq M]\n    (φ : MvPolynomial σ R) (m : M) :\n    ((weightedDecomposition R w).decompose' φ m : MvPolynomial σ R) =\n      weightedHomogeneousComponent w m φ :=\n  MvPolynomial.decompose'_apply R w φ m\n\n"}
