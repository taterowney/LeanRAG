{"name":"Metric.exists_subseq_summable_dist_of_cauchySeq","module":"Mathlib.Analysis.Normed.Group.Completeness","initialProofState":"α : Type u_1\ninst✝ : PseudoMetricSpace α\nu : Nat → α\nhu : CauchySeq u\n⊢ Exists fun f => And (StrictMono f) (Summable fun i => Dist.dist (u (f (HAdd.hAdd i 1))) (u (f i)))","decl":"lemma Metric.exists_subseq_summable_dist_of_cauchySeq (u : ℕ → α) (hu : CauchySeq u) :\n    ∃ f : ℕ → ℕ, StrictMono f ∧ Summable fun i => dist (u (f (i+1))) (u (f i)) := by\n  obtain ⟨f, hf₁, hf₂⟩ := Metric.exists_subseq_bounded_of_cauchySeq u hu\n    (fun n => (1 / (2 : ℝ))^n) (fun n => by positivity)\n  refine ⟨f, hf₁, ?_⟩\n  refine Summable.of_nonneg_of_le (fun n => by positivity) ?_ summable_geometric_two\n  exact fun n => le_of_lt <| hf₂ n (f (n+1)) <| hf₁.monotone (Nat.le_add_right n 1)\n\n"}
{"name":"NormedAddCommGroup.completeSpace_of_summable_imp_tendsto","module":"Mathlib.Analysis.Normed.Group.Completeness","initialProofState":"E : Type u_1\ninst✝ : NormedAddCommGroup E\nh : ∀ (u : Nat → E), (Summable fun x => Norm.norm (u x)) → Exists fun a => Filter.Tendsto (fun n => (Finset.range n).sum fun i => u i) Filter.atTop (nhds a)\n⊢ CompleteSpace E","decl":"/-- A normed additive group is complete if any absolutely convergent series converges in the\nspace. -/\nlemma NormedAddCommGroup.completeSpace_of_summable_imp_tendsto\n    (h : ∀ u : ℕ → E,\n      Summable (‖u ·‖) → ∃ a, Tendsto (fun n => ∑ i ∈ range n, u i) atTop (𝓝 a)) :\n    CompleteSpace E := by\n  apply Metric.complete_of_cauchySeq_tendsto\n  intro u hu\n  obtain ⟨f, hf₁, hf₂⟩ := Metric.exists_subseq_summable_dist_of_cauchySeq u hu\n  simp only [dist_eq_norm] at hf₂\n  let v n := u (f (n+1)) - u (f n)\n  have hv_sum : (fun n => (∑ i ∈ range n, v i)) = fun n => u (f n) - u (f 0) := by\n    ext n\n    exact sum_range_sub (u ∘ f) n\n  obtain ⟨a, ha⟩ := h v hf₂\n  refine ⟨a + u (f 0), ?_⟩\n  refine tendsto_nhds_of_cauchySeq_of_subseq hu hf₁.tendsto_atTop ?_\n  rw [hv_sum] at ha\n  have h₁ : Tendsto (fun n => u (f n) - u (f 0) + u (f 0)) atTop (𝓝 (a + u (f 0))) :=\n    Tendsto.add_const _ ha\n  simpa only [sub_add_cancel] using h₁\n\n"}
{"name":"NormedAddCommGroup.summable_imp_tendsto_of_complete","module":"Mathlib.Analysis.Normed.Group.Completeness","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : CompleteSpace E\nu : Nat → E\nhu : Summable fun x => Norm.norm (u x)\n⊢ Exists fun a => Filter.Tendsto (fun n => (Finset.range n).sum fun i => u i) Filter.atTop (nhds a)","decl":"/-- In a complete normed additive group, every absolutely convergent series converges in the\nspace. -/\nlemma NormedAddCommGroup.summable_imp_tendsto_of_complete [CompleteSpace E] (u : ℕ → E)\n    (hu : Summable (‖u ·‖)) : ∃ a, Tendsto (fun n => ∑ i ∈ range n, u i) atTop (𝓝 a) := by\n  refine cauchySeq_tendsto_of_complete <| cauchySeq_of_summable_dist ?_\n  simp [dist_eq_norm, sum_range_succ, hu]\n\n"}
{"name":"NormedAddCommGroup.summable_imp_tendsto_iff_completeSpace","module":"Mathlib.Analysis.Normed.Group.Completeness","initialProofState":"E : Type u_1\ninst✝ : NormedAddCommGroup E\n⊢ Iff (∀ (u : Nat → E), (Summable fun x => Norm.norm (u x)) → Exists fun a => Filter.Tendsto (fun n => (Finset.range n).sum fun i => u i) Filter.atTop (nhds a)) (CompleteSpace E)","decl":"/-- In a normed additive group, every absolutely convergent series converges in the\nspace iff the space is complete. -/\nlemma NormedAddCommGroup.summable_imp_tendsto_iff_completeSpace :\n    (∀ u : ℕ → E, Summable (‖u ·‖) → ∃ a, Tendsto (fun n => ∑ i ∈ range n, u i) atTop (𝓝 a))\n     ↔ CompleteSpace E :=\n  ⟨completeSpace_of_summable_imp_tendsto, fun _ u hu => summable_imp_tendsto_of_complete u hu⟩\n\n"}
