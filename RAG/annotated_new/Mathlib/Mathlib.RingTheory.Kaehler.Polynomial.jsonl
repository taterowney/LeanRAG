{"name":"KaehlerDifferential.mvPolynomialBasis_repr_comp_D","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\n⊢ Eq ((↑(KaehlerDifferential.mvPolynomialBasis R σ).repr).compDer (KaehlerDifferential.D R (MvPolynomial σ R))) (MvPolynomial.mkDerivation R fun x => Finsupp.single x 1)","decl":"lemma KaehlerDifferential.mvPolynomialBasis_repr_comp_D (σ) :\n    (mvPolynomialBasis R σ).repr.toLinearMap.compDer (D _ _) =\n      MvPolynomial.mkDerivation _ (Finsupp.single · 1) :=\n  Derivation.liftKaehlerDifferential_comp _\n\n"}
{"name":"KaehlerDifferential.mvPolynomialBasis_repr_D","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\nx : MvPolynomial σ R\n⊢ Eq ((KaehlerDifferential.mvPolynomialBasis R σ).repr ((KaehlerDifferential.D R (MvPolynomial σ R)) x)) ((MvPolynomial.mkDerivation R fun x => Finsupp.single x 1) x)","decl":"lemma KaehlerDifferential.mvPolynomialBasis_repr_D (σ) (x) :\n    (mvPolynomialBasis R σ).repr (D _ _ x) =\n      MvPolynomial.mkDerivation R (Finsupp.single · (1 : MvPolynomial σ R)) x :=\n  Derivation.congr_fun (mvPolynomialBasis_repr_comp_D R σ) x\n\n"}
{"name":"KaehlerDifferential.mvPolynomialBasis_repr_D_X","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\ni : σ\n⊢ Eq ((KaehlerDifferential.mvPolynomialBasis R σ).repr ((KaehlerDifferential.D R (MvPolynomial σ R)) (MvPolynomial.X i))) (Finsupp.single i 1)","decl":"@[simp]\nlemma KaehlerDifferential.mvPolynomialBasis_repr_D_X (σ) (i) :\n    (mvPolynomialBasis R σ).repr (D _ _ (.X i)) = Finsupp.single i 1 := by\n  simp [mvPolynomialBasis_repr_D]\n\n"}
{"name":"KaehlerDifferential.mvPolynomialBasis_repr_apply","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\nx : MvPolynomial σ R\ni : σ\n⊢ Eq (((KaehlerDifferential.mvPolynomialBasis R σ).repr ((KaehlerDifferential.D R (MvPolynomial σ R)) x)) i) ((MvPolynomial.pderiv i) x)","decl":"@[simp]\nlemma KaehlerDifferential.mvPolynomialBasis_repr_apply (σ) (x) (i) :\n    (mvPolynomialBasis R σ).repr (D _ _ x) i = MvPolynomial.pderiv i x := by\n  classical\n  suffices ((Finsupp.lapply i).comp\n    (mvPolynomialBasis R σ).repr.toLinearMap).compDer (D _ _) = MvPolynomial.pderiv i by\n    rw [← this]; rfl\n  apply MvPolynomial.derivation_ext\n  intro j\n  simp [Finsupp.single_apply, Pi.single_apply]\n\n"}
{"name":"KaehlerDifferential.mvPolynomialBasis_repr_symm_single","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\ni : σ\nx : MvPolynomial σ R\n⊢ Eq ((KaehlerDifferential.mvPolynomialBasis R σ).repr.symm (Finsupp.single i x)) (HSMul.hSMul x ((KaehlerDifferential.D R (MvPolynomial σ R)) (MvPolynomial.X i)))","decl":"lemma KaehlerDifferential.mvPolynomialBasis_repr_symm_single (σ) (i) (x) :\n    (mvPolynomialBasis R σ).repr.symm (Finsupp.single i x) = x • D R (MvPolynomial σ R) (.X i) := by\n  apply (mvPolynomialBasis R σ).repr.injective; simp [LinearEquiv.map_smul, -map_smul]\n\n"}
{"name":"KaehlerDifferential.mvPolynomialBasis_apply","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\ni : σ\n⊢ Eq ((KaehlerDifferential.mvPolynomialBasis R σ) i) ((KaehlerDifferential.D R (MvPolynomial σ R)) (MvPolynomial.X i))","decl":"@[simp]\nlemma KaehlerDifferential.mvPolynomialBasis_apply (σ) (i) :\n    mvPolynomialBasis R σ i = D R (MvPolynomial σ R) (.X i) :=\n  (mvPolynomialBasis_repr_symm_single R σ i 1).trans (one_smul _ _)\n\n"}
{"name":"instFreeMvPolynomialKaehlerDifferential","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nσ : Type u_1\n⊢ Module.Free (MvPolynomial σ R) (KaehlerDifferential R (MvPolynomial σ R))","decl":"instance (σ) : Module.Free (MvPolynomial σ R) (Ω[MvPolynomial σ R⁄R]) :=\n  .of_basis (KaehlerDifferential.mvPolynomialBasis R σ)\n\n"}
{"name":"KaehlerDifferential.polynomial_D_apply","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Polynomial R\n⊢ Eq ((KaehlerDifferential.D R (Polynomial R)) P) (HSMul.hSMul (Polynomial.derivative P) ((KaehlerDifferential.D R (Polynomial R)) Polynomial.X))","decl":"lemma KaehlerDifferential.polynomial_D_apply (P : R[X]) :\n    D R R[X] P = derivative P • D R R[X] X := by\n  rw [← aeval_X_left_apply P, (D R R[X]).map_aeval, aeval_X_left_apply, aeval_X_left_apply]\n\n"}
{"name":"KaehlerDifferential.polynomialEquiv_comp_D","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\n⊢ Eq ((KaehlerDifferential.polynomialEquiv R).compDer (KaehlerDifferential.D R (Polynomial R))) Polynomial.derivative'","decl":"lemma KaehlerDifferential.polynomialEquiv_comp_D :\n    (polynomialEquiv R).compDer (D R R[X]) = derivative' :=\n  Derivation.liftKaehlerDifferential_comp _\n\n"}
{"name":"KaehlerDifferential.polynomialEquiv_D","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Polynomial R\n⊢ Eq ((KaehlerDifferential.polynomialEquiv R) ((KaehlerDifferential.D R (Polynomial R)) P)) (Polynomial.derivative P)","decl":"@[simp]\nlemma KaehlerDifferential.polynomialEquiv_D (P) :\n    polynomialEquiv R (D R R[X] P) = derivative P :=\n  Derivation.congr_fun (polynomialEquiv_comp_D R) P\n\n"}
{"name":"KaehlerDifferential.polynomialEquiv_symm","module":"Mathlib.RingTheory.Kaehler.Polynomial","initialProofState":"R : Type u\ninst✝ : CommRing R\nP : Polynomial R\n⊢ Eq ((KaehlerDifferential.polynomialEquiv R).symm P) (HSMul.hSMul P ((KaehlerDifferential.D R (Polynomial R)) Polynomial.X))","decl":"@[simp]\nlemma KaehlerDifferential.polynomialEquiv_symm (P) :\n    (polynomialEquiv R).symm P = P • D R R[X] X := rfl\n\n"}
