{"name":"instLawfulBitraversableProd","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"⊢ LawfulBitraversable Prod","decl":"instance : LawfulBitraversable Prod := by\n  constructor <;> intros <;> casesm _ × _ <;>\n    simp [bitraverse, Prod.bitraverse, functor_norm] <;> rfl\n\n"}
{"name":"instLawfulBitraversableSum","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"⊢ LawfulBitraversable Sum","decl":"instance : LawfulBitraversable Sum := by\n  constructor <;> intros <;> casesm _ ⊕ _ <;>\n    simp [bitraverse, Sum.bitraverse, functor_norm] <;> rfl\n\n\n"}
{"name":"LawfulBitraversable.const","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"⊢ LawfulBitraversable Functor.Const","decl":"instance LawfulBitraversable.const : LawfulBitraversable Const := by\n  constructor <;> intros <;> simp [bitraverse, Const.bitraverse, functor_norm] <;> rfl\n\n"}
{"name":"LawfulBitraversable.flip","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"t : Type u → Type u → Type u\ninst✝¹ : Bitraversable t\ninst✝ : LawfulBitraversable t\n⊢ LawfulBitraversable (flip t)","decl":"instance LawfulBitraversable.flip [LawfulBitraversable t] : LawfulBitraversable (flip t) := by\n  constructor <;> intros <;> casesm LawfulBitraversable t <;> apply_assumption only [*]\n\n"}
{"name":"Bitraversable.isLawfulTraversable","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"t : Type u → Type u → Type u\ninst✝¹ : Bitraversable t\ninst✝ : LawfulBitraversable t\nα : Type u\n⊢ LawfulTraversable (t α)","decl":"instance (priority := 10) Bitraversable.isLawfulTraversable [LawfulBitraversable t] {α} :\n    LawfulTraversable (t α) := by\n  constructor <;> intros <;>\n    simp [traverse, comp_tsnd, functor_norm]\n  · simp [tsnd_eq_snd_id, (· <$> ·), id.mk]\n  · simp [tsnd, binaturality, Function.comp_def, functor_norm]\n\n"}
{"name":"instLawfulBitraversableBicomplOfLawfulTraversable","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"t : Type u → Type u → Type u\ninst✝⁵ : Bitraversable t\nF G : Type u → Type u\ninst✝⁴ : Traversable F\ninst✝³ : Traversable G\ninst✝² : LawfulTraversable F\ninst✝¹ : LawfulTraversable G\ninst✝ : LawfulBitraversable t\n⊢ LawfulBitraversable (Function.bicompl t F G)","decl":"instance [LawfulTraversable F] [LawfulTraversable G] [LawfulBitraversable t] :\n    LawfulBitraversable (bicompl t F G) := by\n  constructor <;> intros <;>\n    simp [bitraverse, Bicompl.bitraverse, bimap, traverse_id, bitraverse_id_id, comp_bitraverse,\n      functor_norm]\n  · simp [traverse_eq_map_id', bitraverse_eq_bimap_id]\n  · dsimp only [bicompl]\n    simp [binaturality, naturality_pf]\n\n"}
{"name":"instLawfulBitraversableBicomprOfLawfulTraversable","module":"Mathlib.Control.Bitraversable.Instances","initialProofState":"t : Type u → Type u → Type u\ninst✝³ : Bitraversable t\nF : Type u → Type u\ninst✝² : Traversable F\ninst✝¹ : LawfulTraversable F\ninst✝ : LawfulBitraversable t\n⊢ LawfulBitraversable (Function.bicompr F t)","decl":"instance [LawfulTraversable F] [LawfulBitraversable t] : LawfulBitraversable (bicompr F t) := by\n  constructor <;> intros <;>\n    simp [bitraverse, Bicompr.bitraverse, bitraverse_id_id, functor_norm]\n  · simp only [bitraverse_eq_bimap_id', traverse_eq_map_id', Function.comp_apply, Id.pure_eq]; rfl\n  · dsimp only [bicompr]\n    simp [naturality, binaturality']\n\n"}
