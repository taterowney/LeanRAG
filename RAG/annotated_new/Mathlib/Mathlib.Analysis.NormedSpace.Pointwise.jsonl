{"name":"ediam_smul_le","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : SeminormedAddCommGroup 𝕜\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : SMulZeroClass 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nc : 𝕜\ns : Set E\n⊢ LE.le (EMetric.diam (HSMul.hSMul c s)) (HSMul.hSMul (NNNorm.nnnorm c) (EMetric.diam s))","decl":"theorem ediam_smul_le (c : 𝕜) (s : Set E) : EMetric.diam (c • s) ≤ ‖c‖₊ • EMetric.diam s :=\n  (lipschitzWith_smul c).ediam_image_le s\n\n"}
{"name":"ediam_smul₀","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NormedDivisionRing 𝕜\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nc : 𝕜\ns : Set E\n⊢ Eq (EMetric.diam (HSMul.hSMul c s)) (HSMul.hSMul (NNNorm.nnnorm c) (EMetric.diam s))","decl":"theorem ediam_smul₀ (c : 𝕜) (s : Set E) : EMetric.diam (c • s) = ‖c‖₊ • EMetric.diam s := by\n  refine le_antisymm (ediam_smul_le c s) ?_\n  obtain rfl | hc := eq_or_ne c 0\n  · obtain rfl | hs := s.eq_empty_or_nonempty\n    · simp\n    simp [zero_smul_set hs, ← Set.singleton_zero]\n  · have := (lipschitzWith_smul c⁻¹).ediam_image_le (c • s)\n    rwa [← smul_eq_mul, ← ENNReal.smul_def, Set.image_smul, inv_smul_smul₀ hc s, nnnorm_inv,\n      le_inv_smul_iff_of_pos (nnnorm_pos.2 hc)] at this\n\n"}
{"name":"diam_smul₀","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NormedDivisionRing 𝕜\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nc : 𝕜\nx : Set E\n⊢ Eq (Metric.diam (HSMul.hSMul c x)) (HMul.hMul (Norm.norm c) (Metric.diam x))","decl":"theorem diam_smul₀ (c : 𝕜) (x : Set E) : diam (c • x) = ‖c‖ * diam x := by\n  simp_rw [diam, ediam_smul₀, ENNReal.toReal_smul, NNReal.smul_def, coe_nnnorm, smul_eq_mul]\n\n"}
{"name":"infEdist_smul₀","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NormedDivisionRing 𝕜\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nc : 𝕜\nhc : Ne c 0\ns : Set E\nx : E\n⊢ Eq (EMetric.infEdist (HSMul.hSMul c x) (HSMul.hSMul c s)) (HSMul.hSMul (NNNorm.nnnorm c) (EMetric.infEdist x s))","decl":"theorem infEdist_smul₀ {c : 𝕜} (hc : c ≠ 0) (s : Set E) (x : E) :\n    EMetric.infEdist (c • x) (c • s) = ‖c‖₊ • EMetric.infEdist x s := by\n  simp_rw [EMetric.infEdist]\n  have : Function.Surjective ((c • ·) : E → E) :=\n    Function.RightInverse.surjective (smul_inv_smul₀ hc)\n  trans ⨅ (y) (_ : y ∈ s), ‖c‖₊ • edist x y\n  · refine (this.iInf_congr _ fun y => ?_).symm\n    simp_rw [smul_mem_smul_set_iff₀ hc, edist_smul₀]\n  · have : (‖c‖₊ : ENNReal) ≠ 0 := by simp [hc]\n    simp_rw [ENNReal.smul_def, smul_eq_mul, ENNReal.mul_iInf_of_ne this ENNReal.coe_ne_top]\n\n"}
{"name":"infDist_smul₀","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NormedDivisionRing 𝕜\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nc : 𝕜\nhc : Ne c 0\ns : Set E\nx : E\n⊢ Eq (Metric.infDist (HSMul.hSMul c x) (HSMul.hSMul c s)) (HMul.hMul (Norm.norm c) (Metric.infDist x s))","decl":"theorem infDist_smul₀ {c : 𝕜} (hc : c ≠ 0) (s : Set E) (x : E) :\n    Metric.infDist (c • x) (c • s) = ‖c‖ * Metric.infDist x s := by\n  simp_rw [Metric.infDist, infEdist_smul₀ hc s, ENNReal.toReal_smul, NNReal.smul_def, coe_nnnorm,\n    smul_eq_mul]\n\n"}
{"name":"smul_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nhc : Ne c 0\nx : E\nr : Real\n⊢ Eq (HSMul.hSMul c (Metric.ball x r)) (Metric.ball (HSMul.hSMul c x) (HMul.hMul (Norm.norm c) r))","decl":"theorem smul_ball {c : 𝕜} (hc : c ≠ 0) (x : E) (r : ℝ) : c • ball x r = ball (c • x) (‖c‖ * r) := by\n  ext y\n  rw [mem_smul_set_iff_inv_smul_mem₀ hc]\n  conv_lhs => rw [← inv_smul_smul₀ hc x]\n  simp [← div_eq_inv_mul, div_lt_iff₀ (norm_pos_iff.2 hc), mul_comm _ r, dist_smul₀]\n\n"}
{"name":"smul_unitBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nhc : Ne c 0\n⊢ Eq (HSMul.hSMul c (Metric.ball 0 1)) (Metric.ball 0 (Norm.norm c))","decl":"theorem smul_unitBall {c : 𝕜} (hc : c ≠ 0) : c • ball (0 : E) (1 : ℝ) = ball (0 : E) ‖c‖ := by\n  rw [_root_.smul_ball hc, smul_zero, mul_one]\n\n"}
{"name":"smul_sphere'","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nhc : Ne c 0\nx : E\nr : Real\n⊢ Eq (HSMul.hSMul c (Metric.sphere x r)) (Metric.sphere (HSMul.hSMul c x) (HMul.hMul (Norm.norm c) r))","decl":"theorem smul_sphere' {c : 𝕜} (hc : c ≠ 0) (x : E) (r : ℝ) :\n    c • sphere x r = sphere (c • x) (‖c‖ * r) := by\n  ext y\n  rw [mem_smul_set_iff_inv_smul_mem₀ hc]\n  conv_lhs => rw [← inv_smul_smul₀ hc x]\n  simp only [mem_sphere, dist_smul₀, norm_inv, ← div_eq_inv_mul, div_eq_iff (norm_pos_iff.2 hc).ne',\n    mul_comm r]\n\n"}
{"name":"smul_closedBall'","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nhc : Ne c 0\nx : E\nr : Real\n⊢ Eq (HSMul.hSMul c (Metric.closedBall x r)) (Metric.closedBall (HSMul.hSMul c x) (HMul.hMul (Norm.norm c) r))","decl":"theorem smul_closedBall' {c : 𝕜} (hc : c ≠ 0) (x : E) (r : ℝ) :\n    c • closedBall x r = closedBall (c • x) (‖c‖ * r) := by\n  simp only [← ball_union_sphere, Set.smul_set_union, _root_.smul_ball hc, smul_sphere' hc]\n\n"}
{"name":"set_smul_sphere_zero","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set 𝕜\nhs : Not (Membership.mem s 0)\nr : Real\n⊢ Eq (HSMul.hSMul s (Metric.sphere 0 r)) (Set.preimage (fun x => Norm.norm x) (Set.image (fun x => HMul.hMul (Norm.norm x) r) s))","decl":"theorem set_smul_sphere_zero {s : Set 𝕜} (hs : 0 ∉ s) (r : ℝ) :\n    s • sphere (0 : E) r = (‖·‖) ⁻¹' ((‖·‖ * r) '' s) :=\n  calc\n    s • sphere (0 : E) r = ⋃ c ∈ s, c • sphere (0 : E) r := iUnion_smul_left_image.symm\n    _ = ⋃ c ∈ s, sphere (0 : E) (‖c‖ * r) := iUnion₂_congr fun c hc ↦ by\n      rw [smul_sphere' (ne_of_mem_of_not_mem hc hs), smul_zero]\n    _ = (‖·‖) ⁻¹' ((‖·‖ * r) '' s) := by ext; simp [eq_comm]\n\n"}
{"name":"Bornology.IsBounded.smul₀","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\ns : Set E\nhs : Bornology.IsBounded s\nc : 𝕜\n⊢ Bornology.IsBounded (HSMul.hSMul c s)","decl":"/-- Image of a bounded set in a normed space under scalar multiplication by a constant is\nbounded. See also `Bornology.IsBounded.smul` for a similar lemma about an isometric action. -/\ntheorem Bornology.IsBounded.smul₀ {s : Set E} (hs : IsBounded s) (c : 𝕜) : IsBounded (c • s) :=\n  (lipschitzWith_smul c).isBounded_image hs\n\n"}
{"name":"eventually_singleton_add_smul_subset","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nx : E\ns : Set E\nhs : Bornology.IsBounded s\nu : Set E\nhu : Membership.mem (nhds x) u\n⊢ Filter.Eventually (fun r => HasSubset.Subset (HAdd.hAdd (Singleton.singleton x) (HSMul.hSMul r s)) u) (nhds 0)","decl":"/-- If `s` is a bounded set, then for small enough `r`, the set `{x} + r • s` is contained in any\nfixed neighborhood of `x`. -/\ntheorem eventually_singleton_add_smul_subset {x : E} {s : Set E} (hs : Bornology.IsBounded s)\n    {u : Set E} (hu : u ∈ 𝓝 x) : ∀ᶠ r in 𝓝 (0 : 𝕜), {x} + r • s ⊆ u := by\n  obtain ⟨ε, εpos, hε⟩ : ∃ ε : ℝ, 0 < ε ∧ closedBall x ε ⊆ u := nhds_basis_closedBall.mem_iff.1 hu\n  obtain ⟨R, Rpos, hR⟩ : ∃ R : ℝ, 0 < R ∧ s ⊆ closedBall 0 R := hs.subset_closedBall_lt 0 0\n  have : Metric.closedBall (0 : 𝕜) (ε / R) ∈ 𝓝 (0 : 𝕜) := closedBall_mem_nhds _ (div_pos εpos Rpos)\n  filter_upwards [this] with r hr\n  simp only [image_add_left, singleton_add]\n  intro y hy\n  obtain ⟨z, zs, hz⟩ : ∃ z : E, z ∈ s ∧ r • z = -x + y := by simpa [mem_smul_set] using hy\n  have I : ‖r • z‖ ≤ ε :=\n    calc\n      ‖r • z‖ = ‖r‖ * ‖z‖ := norm_smul _ _\n      _ ≤ ε / R * R :=\n        (mul_le_mul (mem_closedBall_zero_iff.1 hr) (mem_closedBall_zero_iff.1 (hR zs))\n          (norm_nonneg _) (div_pos εpos Rpos).le)\n      _ = ε := by field_simp\n  have : y = x + r • z := by simp only [hz, add_neg_cancel_left]\n  apply hε\n  simpa only [this, dist_eq_norm, add_sub_cancel_left, mem_closedBall] using I\n\n"}
{"name":"smul_unitBall_of_pos","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (HSMul.hSMul r (Metric.ball 0 1)) (Metric.ball 0 r)","decl":"/-- In a real normed space, the image of the unit ball under scalar multiplication by a positive\nconstant `r` is the ball of radius `r`. -/\ntheorem smul_unitBall_of_pos {r : ℝ} (hr : 0 < r) : r • ball (0 : E) 1 = ball (0 : E) r := by\n  rw [smul_unitBall hr.ne', Real.norm_of_nonneg hr.le]\n\n"}
{"name":"Ioo_smul_sphere_zero","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\na b r : Real\nha : LE.le 0 a\nhr : LT.lt 0 r\n⊢ Eq (HSMul.hSMul (Set.Ioo a b) (Metric.sphere 0 r)) (SDiff.sdiff (Metric.ball 0 (HMul.hMul b r)) (Metric.closedBall 0 (HMul.hMul a r)))","decl":"lemma Ioo_smul_sphere_zero {a b r : ℝ} (ha : 0 ≤ a) (hr : 0 < r) :\n    Ioo a b • sphere (0 : E) r = ball 0 (b * r) \\ closedBall 0 (a * r) := by\n  have : EqOn (‖·‖) id (Ioo a b) := fun x hx ↦ abs_of_pos (ha.trans_lt hx.1)\n  rw [set_smul_sphere_zero (by simp [ha.not_lt]), ← image_image (· * r), this.image_eq, image_id,\n    image_mul_right_Ioo _ _ hr]\n  ext x; simp [and_comm]\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"exists_dist_eq","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx z : E\na b : Real\nha : LE.le 0 a\nhb : LE.le 0 b\nhab : Eq (HAdd.hAdd a b) 1\n⊢ Exists fun y => And (Eq (Dist.dist x y) (HMul.hMul b (Dist.dist x z))) (Eq (Dist.dist y z) (HMul.hMul a (Dist.dist x z)))","decl":"theorem exists_dist_eq (x z : E) {a b : ℝ} (ha : 0 ≤ a) (hb : 0 ≤ b) (hab : a + b = 1) :\n    ∃ y, dist x y = b * dist x z ∧ dist y z = a * dist x z := by\n  use a • x + b • z\n  nth_rw 1 [← one_smul ℝ x]\n  nth_rw 4 [← one_smul ℝ z]\n  simp [dist_eq_norm, ← hab, add_smul, ← smul_sub, norm_smul_of_nonneg, ha, hb]\n\n"}
{"name":"exists_dist_le_le","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx z : E\nδ ε : Real\nhδ : LE.le 0 δ\nhε : LE.le 0 ε\nh : LE.le (Dist.dist x z) (HAdd.hAdd ε δ)\n⊢ Exists fun y => And (LE.le (Dist.dist x y) δ) (LE.le (Dist.dist y z) ε)","decl":"theorem exists_dist_le_le (hδ : 0 ≤ δ) (hε : 0 ≤ ε) (h : dist x z ≤ ε + δ) :\n    ∃ y, dist x y ≤ δ ∧ dist y z ≤ ε := by\n  obtain rfl | hε' := hε.eq_or_lt\n  · exact ⟨z, by rwa [zero_add] at h, (dist_self _).le⟩\n  have hεδ := add_pos_of_pos_of_nonneg hε' hδ\n  refine (exists_dist_eq x z (div_nonneg hε <| add_nonneg hε hδ)\n    (div_nonneg hδ <| add_nonneg hε hδ) <| by\n      rw [← add_div, div_self hεδ.ne']).imp\n    fun y hy => ?_\n  rw [hy.1, hy.2, div_mul_comm, div_mul_comm ε]\n  rw [← div_le_one hεδ] at h\n  exact ⟨mul_le_of_le_one_left hδ h, mul_le_of_le_one_left hε h⟩\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"exists_dist_le_lt","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx z : E\nδ ε : Real\nhδ : LE.le 0 δ\nhε : LT.lt 0 ε\nh : LT.lt (Dist.dist x z) (HAdd.hAdd ε δ)\n⊢ Exists fun y => And (LE.le (Dist.dist x y) δ) (LT.lt (Dist.dist y z) ε)","decl":"theorem exists_dist_le_lt (hδ : 0 ≤ δ) (hε : 0 < ε) (h : dist x z < ε + δ) :\n    ∃ y, dist x y ≤ δ ∧ dist y z < ε := by\n  refine (exists_dist_eq x z (div_nonneg hε.le <| add_nonneg hε.le hδ)\n    (div_nonneg hδ <| add_nonneg hε.le hδ) <| by\n      rw [← add_div, div_self (add_pos_of_pos_of_nonneg hε hδ).ne']).imp\n    fun y hy => ?_\n  rw [hy.1, hy.2, div_mul_comm, div_mul_comm ε]\n  rw [← div_lt_one (add_pos_of_pos_of_nonneg hε hδ)] at h\n  exact ⟨mul_le_of_le_one_left hδ h.le, mul_lt_of_lt_one_left hε h⟩\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"exists_dist_lt_le","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx z : E\nδ ε : Real\nhδ : LT.lt 0 δ\nhε : LE.le 0 ε\nh : LT.lt (Dist.dist x z) (HAdd.hAdd ε δ)\n⊢ Exists fun y => And (LT.lt (Dist.dist x y) δ) (LE.le (Dist.dist y z) ε)","decl":"theorem exists_dist_lt_le (hδ : 0 < δ) (hε : 0 ≤ ε) (h : dist x z < ε + δ) :\n    ∃ y, dist x y < δ ∧ dist y z ≤ ε := by\n  obtain ⟨y, yz, xy⟩ :=\n    exists_dist_le_lt hε hδ (show dist z x < δ + ε by simpa only [dist_comm, add_comm] using h)\n  exact ⟨y, by simp [dist_comm x y, dist_comm y z, *]⟩\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"exists_dist_lt_lt","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx z : E\nδ ε : Real\nhδ : LT.lt 0 δ\nhε : LT.lt 0 ε\nh : LT.lt (Dist.dist x z) (HAdd.hAdd ε δ)\n⊢ Exists fun y => And (LT.lt (Dist.dist x y) δ) (LT.lt (Dist.dist y z) ε)","decl":"theorem exists_dist_lt_lt (hδ : 0 < δ) (hε : 0 < ε) (h : dist x z < ε + δ) :\n    ∃ y, dist x y < δ ∧ dist y z < ε := by\n  refine (exists_dist_eq x z (div_nonneg hε.le <| add_nonneg hε.le hδ.le)\n    (div_nonneg hδ.le <| add_nonneg hε.le hδ.le) <| by\n      rw [← add_div, div_self (add_pos hε hδ).ne']).imp\n    fun y hy => ?_\n  rw [hy.1, hy.2, div_mul_comm, div_mul_comm ε]\n  rw [← div_lt_one (add_pos hε hδ)] at h\n  exact ⟨mul_lt_of_lt_one_left hδ h, mul_lt_of_lt_one_left hε h⟩\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"disjoint_ball_ball_iff","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nδ ε : Real\nhδ : LT.lt 0 δ\nhε : LT.lt 0 ε\n⊢ Iff (Disjoint (Metric.ball x δ) (Metric.ball y ε)) (LE.le (HAdd.hAdd δ ε) (Dist.dist x y))","decl":"theorem disjoint_ball_ball_iff (hδ : 0 < δ) (hε : 0 < ε) :\n    Disjoint (ball x δ) (ball y ε) ↔ δ + ε ≤ dist x y := by\n  refine ⟨fun h => le_of_not_lt fun hxy => ?_, ball_disjoint_ball⟩\n  rw [add_comm] at hxy\n  obtain ⟨z, hxz, hzy⟩ := exists_dist_lt_lt hδ hε hxy\n  rw [dist_comm] at hxz\n  exact h.le_bot ⟨hxz, hzy⟩\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"disjoint_ball_closedBall_iff","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nδ ε : Real\nhδ : LT.lt 0 δ\nhε : LE.le 0 ε\n⊢ Iff (Disjoint (Metric.ball x δ) (Metric.closedBall y ε)) (LE.le (HAdd.hAdd δ ε) (Dist.dist x y))","decl":"theorem disjoint_ball_closedBall_iff (hδ : 0 < δ) (hε : 0 ≤ ε) :\n    Disjoint (ball x δ) (closedBall y ε) ↔ δ + ε ≤ dist x y := by\n  refine ⟨fun h => le_of_not_lt fun hxy => ?_, ball_disjoint_closedBall⟩\n  rw [add_comm] at hxy\n  obtain ⟨z, hxz, hzy⟩ := exists_dist_lt_le hδ hε hxy\n  rw [dist_comm] at hxz\n  exact h.le_bot ⟨hxz, hzy⟩\n\n-- This is also true for `ℚ`-normed spaces\n"}
{"name":"disjoint_closedBall_ball_iff","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nδ ε : Real\nhδ : LE.le 0 δ\nhε : LT.lt 0 ε\n⊢ Iff (Disjoint (Metric.closedBall x δ) (Metric.ball y ε)) (LE.le (HAdd.hAdd δ ε) (Dist.dist x y))","decl":"theorem disjoint_closedBall_ball_iff (hδ : 0 ≤ δ) (hε : 0 < ε) :\n    Disjoint (closedBall x δ) (ball y ε) ↔ δ + ε ≤ dist x y := by\n  rw [disjoint_comm, disjoint_ball_closedBall_iff hε hδ, add_comm, dist_comm]\n\n"}
{"name":"disjoint_closedBall_closedBall_iff","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nδ ε : Real\nhδ : LE.le 0 δ\nhε : LE.le 0 ε\n⊢ Iff (Disjoint (Metric.closedBall x δ) (Metric.closedBall y ε)) (LT.lt (HAdd.hAdd δ ε) (Dist.dist x y))","decl":"theorem disjoint_closedBall_closedBall_iff (hδ : 0 ≤ δ) (hε : 0 ≤ ε) :\n    Disjoint (closedBall x δ) (closedBall y ε) ↔ δ + ε < dist x y := by\n  refine ⟨fun h => lt_of_not_ge fun hxy => ?_, closedBall_disjoint_closedBall⟩\n  rw [add_comm] at hxy\n  obtain ⟨z, hxz, hzy⟩ := exists_dist_le_le hδ hε hxy\n  rw [dist_comm] at hxz\n  exact h.le_bot ⟨hxz, hzy⟩\n\n"}
{"name":"infEdist_thickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ : Real\nhδ : LT.lt 0 δ\ns : Set E\nx : E\n⊢ Eq (EMetric.infEdist x (Metric.thickening δ s)) (HSub.hSub (EMetric.infEdist x s) (ENNReal.ofReal δ))","decl":"@[simp]\ntheorem infEdist_thickening (hδ : 0 < δ) (s : Set E) (x : E) :\n    infEdist x (thickening δ s) = infEdist x s - ENNReal.ofReal δ := by\n  obtain hs | hs := lt_or_le (infEdist x s) (ENNReal.ofReal δ)\n  · rw [infEdist_zero_of_mem, tsub_eq_zero_of_le hs.le]\n    exact hs\n  refine (tsub_le_iff_right.2 infEdist_le_infEdist_thickening_add).antisymm' ?_\n  refine le_sub_of_add_le_right ofReal_ne_top ?_\n  refine le_infEdist.2 fun z hz => le_of_forall_lt' fun r h => ?_\n  cases' r with r\n  · exact add_lt_top.2 ⟨lt_top_iff_ne_top.2 <| infEdist_ne_top ⟨z, self_subset_thickening hδ _ hz⟩,\n      ofReal_lt_top⟩\n  have hr : 0 < ↑r - δ := by\n    refine sub_pos_of_lt ?_\n    have := hs.trans_lt ((infEdist_le_edist_of_mem hz).trans_lt h)\n    rw [ofReal_eq_coe_nnreal hδ.le] at this\n    exact mod_cast this\n  rw [edist_lt_coe, ← dist_lt_coe, ← add_sub_cancel δ ↑r] at h\n  obtain ⟨y, hxy, hyz⟩ := exists_dist_lt_lt hr hδ h\n  refine (ENNReal.add_lt_add_right ofReal_ne_top <|\n    infEdist_lt_iff.2 ⟨_, mem_thickening_iff.2 ⟨_, hz, hyz⟩, edist_lt_ofReal.2 hxy⟩).trans_le ?_\n  rw [← ofReal_add hr.le hδ.le, sub_add_cancel, ofReal_coe_nnreal]\n\n"}
{"name":"thickening_thickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LT.lt 0 δ\ns : Set E\n⊢ Eq (Metric.thickening ε (Metric.thickening δ s)) (Metric.thickening (HAdd.hAdd ε δ) s)","decl":"@[simp]\ntheorem thickening_thickening (hε : 0 < ε) (hδ : 0 < δ) (s : Set E) :\n    thickening ε (thickening δ s) = thickening (ε + δ) s :=\n  (thickening_thickening_subset _ _ _).antisymm fun x => by\n    simp_rw [mem_thickening_iff]\n    rintro ⟨z, hz, hxz⟩\n    rw [add_comm] at hxz\n    obtain ⟨y, hxy, hyz⟩ := exists_dist_lt_lt hε hδ hxz\n    exact ⟨y, ⟨_, hz, hyz⟩, hxy⟩\n\n"}
{"name":"cthickening_thickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LE.le 0 ε\nhδ : LT.lt 0 δ\ns : Set E\n⊢ Eq (Metric.cthickening ε (Metric.thickening δ s)) (Metric.cthickening (HAdd.hAdd ε δ) s)","decl":"@[simp]\ntheorem cthickening_thickening (hε : 0 ≤ ε) (hδ : 0 < δ) (s : Set E) :\n    cthickening ε (thickening δ s) = cthickening (ε + δ) s :=\n  (cthickening_thickening_subset hε _ _).antisymm fun x => by\n    simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hε hδ.le, infEdist_thickening hδ]\n    exact tsub_le_iff_right.2\n\n-- Note: `interior (cthickening δ s) ≠ thickening δ s` in general\n"}
{"name":"closure_thickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ : Real\nhδ : LT.lt 0 δ\ns : Set E\n⊢ Eq (closure (Metric.thickening δ s)) (Metric.cthickening δ s)","decl":"@[simp]\ntheorem closure_thickening (hδ : 0 < δ) (s : Set E) :\n    closure (thickening δ s) = cthickening δ s := by\n  rw [← cthickening_zero, cthickening_thickening le_rfl hδ, zero_add]\n\n"}
{"name":"infEdist_cthickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (EMetric.infEdist x (Metric.cthickening δ s)) (HSub.hSub (EMetric.infEdist x s) (ENNReal.ofReal δ))","decl":"@[simp]\ntheorem infEdist_cthickening (δ : ℝ) (s : Set E) (x : E) :\n    infEdist x (cthickening δ s) = infEdist x s - ENNReal.ofReal δ := by\n  obtain hδ | hδ := le_or_lt δ 0\n  · rw [cthickening_of_nonpos hδ, infEdist_closure, ofReal_of_nonpos hδ, tsub_zero]\n  · rw [← closure_thickening hδ, infEdist_closure, infEdist_thickening hδ]\n\n"}
{"name":"thickening_cthickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LE.le 0 δ\ns : Set E\n⊢ Eq (Metric.thickening ε (Metric.cthickening δ s)) (Metric.thickening (HAdd.hAdd ε δ) s)","decl":"@[simp]\ntheorem thickening_cthickening (hε : 0 < ε) (hδ : 0 ≤ δ) (s : Set E) :\n    thickening ε (cthickening δ s) = thickening (ε + δ) s := by\n  obtain rfl | hδ := hδ.eq_or_lt\n  · rw [cthickening_zero, thickening_closure, add_zero]\n  · rw [← closure_thickening hδ, thickening_closure, thickening_thickening hε hδ]\n\n"}
{"name":"cthickening_cthickening","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LE.le 0 ε\nhδ : LE.le 0 δ\ns : Set E\n⊢ Eq (Metric.cthickening ε (Metric.cthickening δ s)) (Metric.cthickening (HAdd.hAdd ε δ) s)","decl":"@[simp]\ntheorem cthickening_cthickening (hε : 0 ≤ ε) (hδ : 0 ≤ δ) (s : Set E) :\n    cthickening ε (cthickening δ s) = cthickening (ε + δ) s :=\n  (cthickening_cthickening_subset hε hδ _).antisymm fun x => by\n    simp_rw [mem_cthickening_iff, ENNReal.ofReal_add hε hδ, infEdist_cthickening]\n    exact tsub_le_iff_right.2\n\n"}
{"name":"thickening_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LT.lt 0 δ\nx : E\n⊢ Eq (Metric.thickening ε (Metric.ball x δ)) (Metric.ball x (HAdd.hAdd ε δ))","decl":"@[simp]\ntheorem thickening_ball (hε : 0 < ε) (hδ : 0 < δ) (x : E) :\n    thickening ε (ball x δ) = ball x (ε + δ) := by\n  rw [← thickening_singleton, thickening_thickening hε hδ, thickening_singleton]\n\n"}
{"name":"thickening_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (Metric.thickening ε (Metric.closedBall x δ)) (Metric.ball x (HAdd.hAdd ε δ))","decl":"@[simp]\ntheorem thickening_closedBall (hε : 0 < ε) (hδ : 0 ≤ δ) (x : E) :\n    thickening ε (closedBall x δ) = ball x (ε + δ) := by\n  rw [← cthickening_singleton _ hδ, thickening_cthickening hε hδ, thickening_singleton]\n\n"}
{"name":"cthickening_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LE.le 0 ε\nhδ : LT.lt 0 δ\nx : E\n⊢ Eq (Metric.cthickening ε (Metric.ball x δ)) (Metric.closedBall x (HAdd.hAdd ε δ))","decl":"@[simp]\ntheorem cthickening_ball (hε : 0 ≤ ε) (hδ : 0 < δ) (x : E) :\n    cthickening ε (ball x δ) = closedBall x (ε + δ) := by\n  rw [← thickening_singleton, cthickening_thickening hε hδ,\n      cthickening_singleton _ (add_nonneg hε hδ.le)]\n\n"}
{"name":"cthickening_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LE.le 0 ε\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (Metric.cthickening ε (Metric.closedBall x δ)) (Metric.closedBall x (HAdd.hAdd ε δ))","decl":"@[simp]\ntheorem cthickening_closedBall (hε : 0 ≤ ε) (hδ : 0 ≤ δ) (x : E) :\n    cthickening ε (closedBall x δ) = closedBall x (ε + δ) := by\n  rw [← cthickening_singleton _ hδ, cthickening_cthickening hε hδ,\n      cthickening_singleton _ (add_nonneg hε hδ)]\n\n"}
{"name":"ball_add_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LT.lt 0 δ\na b : E\n⊢ Eq (HAdd.hAdd (Metric.ball a ε) (Metric.ball b δ)) (Metric.ball (HAdd.hAdd a b) (HAdd.hAdd ε δ))","decl":"theorem ball_add_ball (hε : 0 < ε) (hδ : 0 < δ) (a b : E) :\n    ball a ε + ball b δ = ball (a + b) (ε + δ) := by\n  rw [ball_add, thickening_ball hε hδ b, Metric.vadd_ball, vadd_eq_add]\n\n"}
{"name":"ball_sub_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LT.lt 0 δ\na b : E\n⊢ Eq (HSub.hSub (Metric.ball a ε) (Metric.ball b δ)) (Metric.ball (HSub.hSub a b) (HAdd.hAdd ε δ))","decl":"theorem ball_sub_ball (hε : 0 < ε) (hδ : 0 < δ) (a b : E) :\n    ball a ε - ball b δ = ball (a - b) (ε + δ) := by\n  simp_rw [sub_eq_add_neg, neg_ball, ball_add_ball hε hδ]\n\n"}
{"name":"ball_add_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LE.le 0 δ\na b : E\n⊢ Eq (HAdd.hAdd (Metric.ball a ε) (Metric.closedBall b δ)) (Metric.ball (HAdd.hAdd a b) (HAdd.hAdd ε δ))","decl":"theorem ball_add_closedBall (hε : 0 < ε) (hδ : 0 ≤ δ) (a b : E) :\n    ball a ε + closedBall b δ = ball (a + b) (ε + δ) := by\n  rw [ball_add, thickening_closedBall hε hδ b, Metric.vadd_ball, vadd_eq_add]\n\n"}
{"name":"ball_sub_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LT.lt 0 ε\nhδ : LE.le 0 δ\na b : E\n⊢ Eq (HSub.hSub (Metric.ball a ε) (Metric.closedBall b δ)) (Metric.ball (HSub.hSub a b) (HAdd.hAdd ε δ))","decl":"theorem ball_sub_closedBall (hε : 0 < ε) (hδ : 0 ≤ δ) (a b : E) :\n    ball a ε - closedBall b δ = ball (a - b) (ε + δ) := by\n  simp_rw [sub_eq_add_neg, neg_closedBall, ball_add_closedBall hε hδ]\n\n"}
{"name":"closedBall_add_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LE.le 0 ε\nhδ : LT.lt 0 δ\na b : E\n⊢ Eq (HAdd.hAdd (Metric.closedBall a ε) (Metric.ball b δ)) (Metric.ball (HAdd.hAdd a b) (HAdd.hAdd ε δ))","decl":"theorem closedBall_add_ball (hε : 0 ≤ ε) (hδ : 0 < δ) (a b : E) :\n    closedBall a ε + ball b δ = ball (a + b) (ε + δ) := by\n  rw [add_comm, ball_add_closedBall hδ hε b, add_comm, add_comm δ]\n\n"}
{"name":"closedBall_sub_ball","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nδ ε : Real\nhε : LE.le 0 ε\nhδ : LT.lt 0 δ\na b : E\n⊢ Eq (HSub.hSub (Metric.closedBall a ε) (Metric.ball b δ)) (Metric.ball (HSub.hSub a b) (HAdd.hAdd ε δ))","decl":"theorem closedBall_sub_ball (hε : 0 ≤ ε) (hδ : 0 < δ) (a b : E) :\n    closedBall a ε - ball b δ = ball (a - b) (ε + δ) := by\n  simp_rw [sub_eq_add_neg, neg_ball, closedBall_add_ball hε hδ]\n\n"}
{"name":"closedBall_add_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nδ ε : Real\ninst✝ : ProperSpace E\nhε : LE.le 0 ε\nhδ : LE.le 0 δ\na b : E\n⊢ Eq (HAdd.hAdd (Metric.closedBall a ε) (Metric.closedBall b δ)) (Metric.closedBall (HAdd.hAdd a b) (HAdd.hAdd ε δ))","decl":"theorem closedBall_add_closedBall [ProperSpace E] (hε : 0 ≤ ε) (hδ : 0 ≤ δ) (a b : E) :\n    closedBall a ε + closedBall b δ = closedBall (a + b) (ε + δ) := by\n  rw [(isCompact_closedBall _ _).add_closedBall hδ b, cthickening_closedBall hδ hε a,\n    Metric.vadd_closedBall, vadd_eq_add, add_comm, add_comm δ]\n\n"}
{"name":"closedBall_sub_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝² : SeminormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nδ ε : Real\ninst✝ : ProperSpace E\nhε : LE.le 0 ε\nhδ : LE.le 0 δ\na b : E\n⊢ Eq (HSub.hSub (Metric.closedBall a ε) (Metric.closedBall b δ)) (Metric.closedBall (HSub.hSub a b) (HAdd.hAdd ε δ))","decl":"theorem closedBall_sub_closedBall [ProperSpace E] (hε : 0 ≤ ε) (hδ : 0 ≤ δ) (a b : E) :\n    closedBall a ε - closedBall b δ = closedBall (a - b) (ε + δ) := by\n  rw [sub_eq_add_neg, neg_closedBall, closedBall_add_closedBall hε hδ, sub_eq_add_neg]\n\n"}
{"name":"smul_closedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\nx : E\nr : Real\nhr : LE.le 0 r\n⊢ Eq (HSMul.hSMul c (Metric.closedBall x r)) (Metric.closedBall (HSMul.hSMul c x) (HMul.hMul (Norm.norm c) r))","decl":"theorem smul_closedBall (c : 𝕜) (x : E) {r : ℝ} (hr : 0 ≤ r) :\n    c • closedBall x r = closedBall (c • x) (‖c‖ * r) := by\n  rcases eq_or_ne c 0 with (rfl | hc)\n  · simp [hr, zero_smul_set, Set.singleton_zero, nonempty_closedBall]\n  · exact smul_closedBall' hc x r\n\n"}
{"name":"smul_unitClosedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\n⊢ Eq (HSMul.hSMul c (Metric.closedBall 0 1)) (Metric.closedBall 0 (Norm.norm c))","decl":"theorem smul_unitClosedBall (c : 𝕜) : c • closedBall (0 : E) (1 : ℝ) = closedBall (0 : E) ‖c‖ := by\n  rw [_root_.smul_closedBall _ _ zero_le_one, smul_zero, mul_one]\n\n"}
{"name":"smul_closedUnitBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nc : 𝕜\n⊢ Eq (HSMul.hSMul c (Metric.closedBall 0 1)) (Metric.closedBall 0 (Norm.norm c))","decl":"@[deprecated (since := \"2024-12-01\")] alias smul_closedUnitBall := smul_unitClosedBall\n\n"}
{"name":"smul_unitClosedBall_of_nonneg","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nr : Real\nhr : LE.le 0 r\n⊢ Eq (HSMul.hSMul r (Metric.closedBall 0 1)) (Metric.closedBall 0 r)","decl":"/-- In a real normed space, the image of the unit closed ball under multiplication by a nonnegative\nnumber `r` is the closed ball of radius `r` with center at the origin. -/\ntheorem smul_unitClosedBall_of_nonneg {r : ℝ} (hr : 0 ≤ r) :\n    r • closedBall (0 : E) 1 = closedBall (0 : E) r := by\n  rw [smul_unitClosedBall, Real.norm_of_nonneg hr]\n\n"}
{"name":"smul_closedUnitBall_of_nonneg","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nr : Real\nhr : LE.le 0 r\n⊢ Eq (HSMul.hSMul r (Metric.closedBall 0 1)) (Metric.closedBall 0 r)","decl":"@[deprecated (since := \"2024-12-01\")]\nalias smul_closedUnitBall_of_nonneg := smul_unitClosedBall_of_nonneg\n\n"}
{"name":"NormedSpace.sphere_nonempty","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : Nontrivial E\nx : E\nr : Real\n⊢ Iff (Metric.sphere x r).Nonempty (LE.le 0 r)","decl":"/-- In a nontrivial real normed space, a sphere is nonempty if and only if its radius is\nnonnegative. -/\n@[simp]\ntheorem NormedSpace.sphere_nonempty [Nontrivial E] {x : E} {r : ℝ} :\n    (sphere x r).Nonempty ↔ 0 ≤ r := by\n  obtain ⟨y, hy⟩ := exists_ne x\n  refine ⟨fun h => nonempty_closedBall.1 (h.mono sphere_subset_closedBall), fun hr =>\n    ⟨r • ‖y - x‖⁻¹ • (y - x) + x, ?_⟩⟩\n  have : ‖y - x‖ ≠ 0 := by simpa [sub_eq_zero]\n  simp only [mem_sphere_iff_norm, add_sub_cancel_right, norm_smul, Real.norm_eq_abs, norm_inv,\n    norm_norm, ne_eq, norm_eq_zero]\n  simp only [abs_norm, ne_eq, norm_eq_zero]\n  rw [inv_mul_cancel₀ this, mul_one, abs_eq_self.mpr hr]\n\n"}
{"name":"smul_sphere","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : NormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\ninst✝¹ : NormedSpace Real E\ninst✝ : Nontrivial E\nc : 𝕜\nx : E\nr : Real\nhr : LE.le 0 r\n⊢ Eq (HSMul.hSMul c (Metric.sphere x r)) (Metric.sphere (HSMul.hSMul c x) (HMul.hMul (Norm.norm c) r))","decl":"theorem smul_sphere [Nontrivial E] (c : 𝕜) (x : E) {r : ℝ} (hr : 0 ≤ r) :\n    c • sphere x r = sphere (c • x) (‖c‖ * r) := by\n  rcases eq_or_ne c 0 with (rfl | hc)\n  · simp [zero_smul_set, Set.singleton_zero, hr]\n  · exact smul_sphere' hc x r\n\n"}
{"name":"affinity_unitBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nr : Real\nhr : LT.lt 0 r\nx : E\n⊢ Eq (HVAdd.hVAdd x (HSMul.hSMul r (Metric.ball 0 1))) (Metric.ball x r)","decl":"/-- Any ball `Metric.ball x r`, `0 < r` is the image of the unit ball under `fun y ↦ x + r • y`. -/\ntheorem affinity_unitBall {r : ℝ} (hr : 0 < r) (x : E) : x +ᵥ r • ball (0 : E) 1 = ball x r := by\n  rw [smul_unitBall_of_pos hr, vadd_ball_zero]\n\n"}
{"name":"affinity_unitClosedBall","module":"Mathlib.Analysis.NormedSpace.Pointwise","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nr : Real\nhr : LE.le 0 r\nx : E\n⊢ Eq (HVAdd.hVAdd x (HSMul.hSMul r (Metric.closedBall 0 1))) (Metric.closedBall x r)","decl":"/-- Any closed ball `Metric.closedBall x r`, `0 ≤ r` is the image of the unit closed ball under\n`fun y ↦ x + r • y`. -/\ntheorem affinity_unitClosedBall {r : ℝ} (hr : 0 ≤ r) (x : E) :\n    x +ᵥ r • closedBall (0 : E) 1 = closedBall x r := by\n  rw [smul_unitClosedBall, Real.norm_of_nonneg hr, vadd_closedBall_zero]\n\n"}
