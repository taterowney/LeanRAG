{"name":"ProperSpace.isCompact_closedBall","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nself : ProperSpace α\nx : α\nr : Real\n⊢ IsCompact (Metric.closedBall x r)","decl":"/-- A pseudometric space is proper if all closed balls are compact. -/\nclass ProperSpace (α : Type u) [PseudoMetricSpace α] : Prop where\n  isCompact_closedBall : ∀ x : α, ∀ r, IsCompact (closedBall x r)\n\n"}
{"name":"isCompact_sphere","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u_3\ninst✝¹ : PseudoMetricSpace α\ninst✝ : ProperSpace α\nx : α\nr : Real\n⊢ IsCompact (Metric.sphere x r)","decl":"/-- In a proper pseudometric space, all spheres are compact. -/\ntheorem isCompact_sphere {α : Type*} [PseudoMetricSpace α] [ProperSpace α] (x : α) (r : ℝ) :\n    IsCompact (sphere x r) :=\n  (isCompact_closedBall x r).of_isClosed_subset isClosed_sphere sphere_subset_closedBall\n\n"}
{"name":"Metric.sphere.compactSpace","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u_3\ninst✝¹ : PseudoMetricSpace α\ninst✝ : ProperSpace α\nx : α\nr : Real\n⊢ CompactSpace ↑(Metric.sphere x r)","decl":"/-- In a proper pseudometric space, any sphere is a `CompactSpace` when considered as a subtype. -/\ninstance Metric.sphere.compactSpace {α : Type*} [PseudoMetricSpace α] [ProperSpace α]\n    (x : α) (r : ℝ) : CompactSpace (sphere x r) :=\n  isCompact_iff_compactSpace.mp (isCompact_sphere _ _)\n\n"}
{"name":"secondCountable_of_proper","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝¹ : PseudoMetricSpace α\ninst✝ : ProperSpace α\n⊢ SecondCountableTopology α","decl":"/-- A proper pseudo metric space is sigma compact, and therefore second countable. -/\ninstance (priority := 100) secondCountable_of_proper [ProperSpace α] :\n    SecondCountableTopology α := by\n  -- We already have `sigmaCompactSpace_of_locallyCompact_secondCountable`, so we don't\n  -- add an instance for `SigmaCompactSpace`.\n  suffices SigmaCompactSpace α from EMetric.secondCountable_of_sigmaCompact α\n  rcases em (Nonempty α) with (⟨⟨x⟩⟩ | hn)\n  · exact ⟨⟨fun n => closedBall x n, fun n => isCompact_closedBall _ _, iUnion_closedBall_nat _⟩⟩\n  · exact ⟨⟨fun _ => ∅, fun _ => isCompact_empty, iUnion_eq_univ_iff.2 fun x => (hn ⟨x⟩).elim⟩⟩\n\n"}
{"name":"ProperSpace.of_isCompact_closedBall_of_le","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝ : PseudoMetricSpace α\nR : Real\nh : ∀ (x : α) (r : Real), LE.le R r → IsCompact (Metric.closedBall x r)\n⊢ ProperSpace α","decl":"/-- If all closed balls of large enough radius are compact, then the space is proper. Especially\nuseful when the lower bound for the radius is 0. -/\ntheorem ProperSpace.of_isCompact_closedBall_of_le (R : ℝ)\n    (h : ∀ x : α, ∀ r, R ≤ r → IsCompact (closedBall x r)) : ProperSpace α :=\n  ⟨fun x r => IsCompact.of_isClosed_subset (h x (max r R) (le_max_right _ _)) isClosed_ball\n    (closedBall_subset_closedBall <| le_max_left _ _)⟩\n\n"}
{"name":"ProperSpace.of_seq_closedBall","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝¹ : PseudoMetricSpace α\nβ : Type u_3\nl : Filter β\ninst✝ : l.NeBot\nx : α\nr : β → Real\nhr : Filter.Tendsto r l Filter.atTop\nhc : Filter.Eventually (fun i => IsCompact (Metric.closedBall x (r i))) l\n⊢ ProperSpace α","decl":"/-- If there exists a sequence of compact closed balls with the same center\nsuch that the radii tend to infinity, then the space is proper. -/\ntheorem ProperSpace.of_seq_closedBall {β : Type*} {l : Filter β} [NeBot l] {x : α} {r : β → ℝ}\n    (hr : Tendsto r l atTop) (hc : ∀ᶠ i in l, IsCompact (closedBall x (r i))) :\n    ProperSpace α where\n  isCompact_closedBall a r :=\n    let ⟨_i, hci, hir⟩ := (hc.and <| hr.eventually_ge_atTop <| r + dist a x).exists\n    hci.of_isClosed_subset isClosed_ball <| closedBall_subset_closedBall' hir\n\n-- A compact pseudometric space is proper\n-- see Note [lower instance priority]\n"}
{"name":"proper_of_compact","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝¹ : PseudoMetricSpace α\ninst✝ : CompactSpace α\n⊢ ProperSpace α","decl":"instance (priority := 100) proper_of_compact [CompactSpace α] : ProperSpace α :=\n  ⟨fun _ _ => isClosed_ball.isCompact⟩\n\n-- see Note [lower instance priority]\n"}
{"name":"locallyCompact_of_proper","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝¹ : PseudoMetricSpace α\ninst✝ : ProperSpace α\n⊢ LocallyCompactSpace α","decl":"/-- A proper space is locally compact -/\ninstance (priority := 100) locallyCompact_of_proper [ProperSpace α] : LocallyCompactSpace α :=\n  .of_hasBasis (fun _ => nhds_basis_closedBall) fun _ _ _ =>\n    isCompact_closedBall _ _\n\n-- The `alias` command creates a definition, triggering the defLemma linter.\n"}
{"name":"locally_compact_of_proper","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝¹ : PseudoMetricSpace α\ninst✝ : ProperSpace α\n⊢ LocallyCompactSpace α","decl":"@[nolint defLemma, deprecated (since := \"2024-11-13\")]\nalias locally_compact_of_proper := locallyCompact_of_proper\n\n-- see Note [lower instance priority]\n"}
{"name":"complete_of_proper","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u\ninst✝¹ : PseudoMetricSpace α\ninst✝ : ProperSpace α\n⊢ CompleteSpace α","decl":"/-- A proper space is complete -/\ninstance (priority := 100) complete_of_proper [ProperSpace α] : CompleteSpace α :=\n  ⟨fun {f} hf => by\n    /- We want to show that the Cauchy filter `f` is converging. It suffices to find a closed\n      ball (therefore compact by properness) where it is nontrivial. -/\n    obtain ⟨t, t_fset, ht⟩ : ∃ t ∈ f, ∀ x ∈ t, ∀ y ∈ t, dist x y < 1 :=\n      (Metric.cauchy_iff.1 hf).2 1 zero_lt_one\n    rcases hf.1.nonempty_of_mem t_fset with ⟨x, xt⟩\n    have : closedBall x 1 ∈ f := mem_of_superset t_fset fun y yt => (ht y yt x xt).le\n    rcases (isCompact_iff_totallyBounded_isComplete.1 (isCompact_closedBall x 1)).2 f hf\n        (le_principal_iff.2 this) with\n      ⟨y, -, hy⟩\n    exact ⟨y, hy⟩⟩\n\n"}
{"name":"prod_properSpace","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝³ : PseudoMetricSpace α\ninst✝² : PseudoMetricSpace β\ninst✝¹ : ProperSpace α\ninst✝ : ProperSpace β\n⊢ ProperSpace (Prod α β)","decl":"/-- A binary product of proper spaces is proper. -/\ninstance prod_properSpace {α : Type*} {β : Type*} [PseudoMetricSpace α] [PseudoMetricSpace β]\n    [ProperSpace α] [ProperSpace β] : ProperSpace (α × β) where\n  isCompact_closedBall := by\n    rintro ⟨x, y⟩ r\n    rw [← closedBall_prod_same x y]\n    exact (isCompact_closedBall x r).prod (isCompact_closedBall y r)\n\n"}
{"name":"pi_properSpace","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"β : Type v\nπ : β → Type u_3\ninst✝¹ : Fintype β\ninst✝ : (b : β) → PseudoMetricSpace (π b)\nh : ∀ (b : β), ProperSpace (π b)\n⊢ ProperSpace ((b : β) → π b)","decl":"/-- A finite product of proper spaces is proper. -/\ninstance pi_properSpace {π : β → Type*} [Fintype β] [∀ b, PseudoMetricSpace (π b)]\n    [h : ∀ b, ProperSpace (π b)] : ProperSpace (∀ b, π b) := by\n  refine .of_isCompact_closedBall_of_le 0 fun x r hr => ?_\n  rw [closedBall_pi _ hr]\n  exact isCompact_univ_pi fun _ => isCompact_closedBall _ _\n\n"}
{"name":"instProperSpaceAdditive","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : ProperSpace X\n⊢ ProperSpace (Additive X)","decl":"instance [PseudoMetricSpace X] [ProperSpace X] : ProperSpace (Additive X) := ‹ProperSpace X›\n"}
{"name":"instProperSpaceMultiplicative","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : ProperSpace X\n⊢ ProperSpace (Multiplicative X)","decl":"instance [PseudoMetricSpace X] [ProperSpace X] : ProperSpace (Multiplicative X) := ‹ProperSpace X›\n"}
{"name":"instProperSpaceOrderDual","module":"Mathlib.Topology.MetricSpace.ProperSpace","initialProofState":"X : Type u_1\ninst✝¹ : PseudoMetricSpace X\ninst✝ : ProperSpace X\n⊢ ProperSpace (OrderDual X)","decl":"instance [PseudoMetricSpace X] [ProperSpace X] : ProperSpace Xᵒᵈ := ‹ProperSpace X›\n"}
