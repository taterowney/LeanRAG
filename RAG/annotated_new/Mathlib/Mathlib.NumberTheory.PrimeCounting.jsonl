{"name":"Nat.primeCounting_sub_one","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ Eq (HSub.hSub n 1).primeCounting n.primeCounting'","decl":"@[simp]\ntheorem primeCounting_sub_one (n : ℕ) : π (n - 1) = π' n := by\n  cases n <;> rfl\n\n"}
{"name":"Nat.monotone_primeCounting'","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Monotone Nat.primeCounting'","decl":"theorem monotone_primeCounting' : Monotone primeCounting' :=\n  count_monotone Prime\n\n"}
{"name":"Nat.monotone_primeCounting","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Monotone Nat.primeCounting","decl":"theorem monotone_primeCounting : Monotone primeCounting :=\n  monotone_primeCounting'.comp (monotone_id.add_const _)\n\n"}
{"name":"Nat.primeCounting'_nth_eq","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ Eq (Nat.nth Nat.Prime n).primeCounting' n","decl":"@[simp]\ntheorem primeCounting'_nth_eq (n : ℕ) : π' (nth Prime n) = n :=\n  count_nth_of_infinite infinite_setOf_prime _\n\n"}
{"name":"Nat.add_two_le_nth_prime","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ LE.le (HAdd.hAdd n 2) (Nat.nth Nat.Prime n)","decl":"/-- The `n`th prime is greater or equal to `n + 2`. -/\ntheorem add_two_le_nth_prime (n : ℕ) : n + 2 ≤ nth Prime n :=\n  nth_prime_zero_eq_two ▸ (nth_strictMono infinite_setOf_prime).add_le_nat n 0\n\n"}
{"name":"Nat.surjective_primeCounting'","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Function.Surjective Nat.primeCounting'","decl":"theorem surjective_primeCounting' : Function.Surjective π' :=\n  Nat.surjective_count_of_infinite_setOf infinite_setOf_prime\n\n"}
{"name":"Nat.surjective_primeCounting","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Function.Surjective Nat.primeCounting","decl":"theorem surjective_primeCounting : Function.Surjective π := by\n  suffices Function.Surjective (π ∘ fun n => n - 1) from this.of_comp\n  convert surjective_primeCounting'\n  ext\n  exact primeCounting_sub_one _\n\n"}
{"name":"Nat.tendsto_primeCounting'","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Filter.Tendsto Nat.primeCounting' Filter.atTop Filter.atTop","decl":"theorem tendsto_primeCounting' : Tendsto π' atTop atTop := by\n  apply tendsto_atTop_atTop_of_monotone' monotone_primeCounting'\n  simp [Set.range_eq_univ.mpr surjective_primeCounting']\n\n"}
{"name":"Nat.tensto_primeCounting","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Filter.Tendsto Nat.primeCounting Filter.atTop Filter.atTop","decl":"theorem tensto_primeCounting : Tendsto π atTop atTop :=\n  (tendsto_add_atTop_iff_nat 1).mpr tendsto_primeCounting'\n\n"}
{"name":"Nat.prime_nth_prime","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ Nat.Prime (Nat.nth Nat.Prime n)","decl":"@[simp]\ntheorem prime_nth_prime (n : ℕ) : Prime (nth Prime n) :=\n  nth_mem_of_infinite infinite_setOf_prime _\n\n"}
{"name":"Nat.primeCounting'_eq_zero_iff","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ Iff (Eq n.primeCounting' 0) (LE.le n 2)","decl":"@[simp]\nlemma primeCounting'_eq_zero_iff {n : ℕ} : n.primeCounting' = 0 ↔ n ≤ 2 := by\n  rw [primeCounting', Nat.count_eq_zero ⟨_, Nat.prime_two⟩, Nat.nth_prime_zero_eq_two]\n\n"}
{"name":"Nat.primeCounting_eq_zero_iff","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ Iff (Eq n.primeCounting 0) (LE.le n 1)","decl":"@[simp]\nlemma primeCounting_eq_zero_iff {n : ℕ} : n.primeCounting = 0 ↔ n ≤ 1 := by\n  simp [primeCounting]\n\n"}
{"name":"Nat.primeCounting_zero","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Eq (Nat.primeCounting 0) 0","decl":"@[simp]\nlemma primeCounting_zero : primeCounting 0 = 0 :=\n  primeCounting_eq_zero_iff.mpr zero_le_one\n\n"}
{"name":"Nat.primeCounting_one","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"⊢ Eq (Nat.primeCounting 1) 0","decl":"@[simp]\nlemma primeCounting_one : primeCounting 1 = 0 :=\n  primeCounting_eq_zero_iff.mpr le_rfl\n\n"}
{"name":"Nat.primesBelow_card_eq_primeCounting'","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"n : Nat\n⊢ Eq n.primesBelow.card n.primeCounting'","decl":"/-- The cardinality of the finset `primesBelow n` equals the counting function\n`primeCounting'` at `n`. -/\ntheorem primesBelow_card_eq_primeCounting' (n : ℕ) : #n.primesBelow = primeCounting' n := by\n  simp only [primesBelow, primeCounting']\n  exact (count_eq_card_filter_range Prime n).symm\n\n"}
{"name":"Nat.primeCounting'_add_le","module":"Mathlib.NumberTheory.PrimeCounting","initialProofState":"a k : Nat\nh0 : LT.lt 0 a\nh1 : LT.lt a k\nn : Nat\n⊢ LE.le (HAdd.hAdd k n).primeCounting' (HAdd.hAdd k.primeCounting' (HMul.hMul a.totient (HAdd.hAdd (HDiv.hDiv n a) 1)))","decl":"/-- A linear upper bound on the size of the `primeCounting'` function -/\ntheorem primeCounting'_add_le {a k : ℕ} (h0 : 0 < a) (h1 : a < k) (n : ℕ) :\n    π' (k + n) ≤ π' k + Nat.totient a * (n / a + 1) :=\n  calc\n    π' (k + n) ≤ #{p ∈ range k | p.Prime} + #{p ∈ Ico k (k + n) | p.Prime} := by\n      rw [primeCounting', count_eq_card_filter_range, range_eq_Ico, ←\n        Ico_union_Ico_eq_Ico (zero_le k) le_self_add, filter_union]\n      apply card_union_le\n    _ ≤ π' k + #{p ∈ Ico k (k + n) | p.Prime} := by\n      rw [primeCounting', count_eq_card_filter_range]\n    _ ≤ π' k + #{b ∈ Ico k (k + n) | a.Coprime b} := by\n      refine add_le_add_left (card_le_card ?_) k.primeCounting'\n      simp only [subset_iff, and_imp, mem_filter, mem_Ico]\n      intro p succ_k_le_p p_lt_n p_prime\n      constructor\n      · exact ⟨succ_k_le_p, p_lt_n⟩\n      · rw [coprime_comm]\n        exact coprime_of_lt_prime h0 (gt_of_ge_of_gt succ_k_le_p h1) p_prime\n    _ ≤ π' k + totient a * (n / a + 1) := by\n      rw [add_le_add_iff_left]\n      exact Ico_filter_coprime_le k n h0\n\n"}
