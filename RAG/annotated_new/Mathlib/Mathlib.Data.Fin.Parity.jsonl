{"name":"Fin.even_of_val","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\nk : Fin n\nh : Even ↑k\n⊢ Even k","decl":"lemma even_of_val {n : ℕ} {k : Fin n} (h : Even k.val) : Even k := by\n  have : NeZero n := ⟨k.pos.ne'⟩\n  rw [← Fin.cast_val_eq_self k]\n  exact h.natCast\n\n"}
{"name":"Fin.odd_of_val","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nk : Fin n\nh : Odd ↑k\n⊢ Odd k","decl":"lemma odd_of_val {n : ℕ} [NeZero n] {k : Fin n} (h : Odd k.val) : Odd k := by\n  rw [← Fin.cast_val_eq_self k]\n  exact h.natCast\n\n"}
{"name":"Fin.even_of_odd","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\nhn : Odd n\nk : Fin n\n⊢ Even k","decl":"lemma even_of_odd {n : ℕ} (hn : Odd n) (k : Fin n) : Even k := by\n  have : NeZero n := ⟨k.pos.ne'⟩\n  rcases k.val.even_or_odd with hk | hk\n  · exact even_of_val hk\n  · simpa using (hk.add_odd hn).natCast (α := Fin n)\n\n\n"}
{"name":"Fin.odd_of_odd","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nhn : Odd n\nk : Fin n\n⊢ Odd k","decl":"lemma odd_of_odd {n : ℕ} [NeZero n] (hn : Odd n) (k : Fin n) : Odd k := by\n  rcases k.val.even_or_odd with hk | hk\n  · simpa using (Even.add_odd hk hn).natCast (R := Fin n)\n  · exact odd_of_val hk\n\n"}
{"name":"Fin.even_iff_of_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\nhn : Even n\nk : Fin n\n⊢ Iff (Even k) (Even ↑k)","decl":"lemma even_iff_of_even {n : ℕ} (hn : Even n) {k : Fin n} : Even k ↔ Even k.val := by\n  rcases hn with ⟨n, rfl⟩\n  refine ⟨?_, even_of_val⟩\n  rintro ⟨l, rfl⟩\n  rw [val_add_eq_ite]\n  split_ifs with h <;> simp [Nat.even_sub, *]\n\n"}
{"name":"Fin.odd_iff_of_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nhn : Even n\nk : Fin n\n⊢ Iff (Odd k) (Odd ↑k)","decl":"lemma odd_iff_of_even {n : ℕ} [NeZero n] (hn : Even n) {k : Fin n} : Odd k ↔ Odd k.val := by\n  rcases hn with ⟨n, rfl⟩\n  refine ⟨?_, odd_of_val⟩\n  rintro ⟨l, rfl⟩\n  rw [val_add, val_mul, val_one', show Fin.val 2 = 2 % _ from rfl]\n  simp only [Nat.mod_mul_mod, Nat.add_mod_mod, Nat.mod_add_mod, Nat.odd_iff]\n  rw [Nat.mod_mod_of_dvd _ ⟨n, (two_mul n).symm⟩, ← Nat.odd_iff, Nat.odd_add_one,\n    Nat.not_odd_iff_even]\n  simp\n\n"}
{"name":"Fin.even_iff","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\nk : Fin n\n⊢ Iff (Even k) (Or (Odd n) (Even ↑k))","decl":"/-- In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. -/\nlemma even_iff {n : ℕ} {k : Fin n} : Even k ↔ (Odd n ∨ Even k.val) := by\n  refine ⟨fun hk ↦ ?_, or_imp.mpr ⟨(even_of_odd · k), even_of_val⟩⟩\n  rw [← Nat.not_even_iff_odd, ← imp_iff_not_or]\n  exact fun hn ↦ (even_iff_of_even hn).mp hk\n\n"}
{"name":"Fin.even_iff_imp","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\nk : Fin n\n⊢ Iff (Even k) (Even n → Even ↑k)","decl":"lemma even_iff_imp {n : ℕ} {k : Fin n} : Even k ↔ (Even n → Even k.val) := by\n  rw [imp_iff_not_or, Nat.not_even_iff_odd]\n  exact even_iff\n\n"}
{"name":"Fin.odd_iff","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nk : Fin n\n⊢ Iff (Odd k) (Or (Odd n) (Odd ↑k))","decl":"/-- In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. -/\nlemma odd_iff {n : ℕ} [NeZero n] {k : Fin n} : Odd k ↔ Odd n ∨ Odd k.val := by\n  refine ⟨fun hk ↦ ?_, or_imp.mpr ⟨(odd_of_odd · k), odd_of_val⟩⟩\n  rw [← Nat.not_even_iff_odd, ← imp_iff_not_or]\n  exact fun hn ↦ (odd_iff_of_even hn).mp hk\n\n"}
{"name":"Fin.odd_iff_imp","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nk : Fin n\n⊢ Iff (Odd k) (Even n → Odd ↑k)","decl":"lemma odd_iff_imp {n : ℕ} [NeZero n] {k : Fin n} : Odd k ↔ (Even n → Odd k.val) := by\n  rw [imp_iff_not_or, Nat.not_even_iff_odd]\n  exact odd_iff\n\n"}
{"name":"Fin.even_iff_mod_of_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\nhn : Even n\nk : Fin n\n⊢ Iff (Even k) (Eq (HMod.hMod (↑k) 2) 0)","decl":"lemma even_iff_mod_of_even {n : ℕ} (hn : Even n) {k : Fin n} : Even k ↔ k.val % 2 = 0 := by\n  rw [even_iff_of_even hn]\n  exact Nat.even_iff\n\n"}
{"name":"Fin.odd_iff_mod_of_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nhn : Even n\nk : Fin n\n⊢ Iff (Odd k) (Eq (HMod.hMod (↑k) 2) 1)","decl":"lemma odd_iff_mod_of_even {n : ℕ} [NeZero n] (hn : Even n) {k : Fin n} : Odd k ↔ k.val % 2 = 1 := by\n  rw [odd_iff_of_even hn]\n  exact Nat.odd_iff\n\n"}
{"name":"Fin.not_odd_iff_even_of_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nhn : Even n\nk : Fin n\n⊢ Iff (Not (Odd k)) (Even k)","decl":"lemma not_odd_iff_even_of_even {n : ℕ} [NeZero n] (hn : Even n) {k : Fin n} : ¬Odd k ↔ Even k := by\n  rw [even_iff_of_even hn, odd_iff_of_even hn]\n  exact Nat.not_odd_iff_even\n\n"}
{"name":"Fin.not_even_iff_odd_of_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nhn : Even n\nk : Fin n\n⊢ Iff (Not (Even k)) (Odd k)","decl":"lemma not_even_iff_odd_of_even {n : ℕ} [NeZero n] (hn : Even n) {k : Fin n} : ¬Even k ↔ Odd k := by\n  rw [even_iff_of_even hn, odd_iff_of_even hn]\n  exact Nat.not_even_iff_odd\n\n"}
{"name":"Fin.odd_add_one_iff_even","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nk : Fin n\n⊢ Iff (Odd (HAdd.hAdd k 1)) (Even k)","decl":"lemma odd_add_one_iff_even {n : ℕ} [NeZero n] {k : Fin n} : Odd (k + 1) ↔ Even k :=\n  ⟨fun ⟨k, hk⟩ ↦ add_right_cancel hk ▸ even_two_mul k, Even.add_one⟩\n\n"}
{"name":"Fin.even_add_one_iff_odd","module":"Mathlib.Data.Fin.Parity","initialProofState":"n : Nat\ninst✝ : NeZero n\nk : Fin n\n⊢ Iff (Even (HAdd.hAdd k 1)) (Odd k)","decl":"lemma even_add_one_iff_odd {n : ℕ} [NeZero n] {k : Fin n} : Even (k + 1) ↔ Odd k :=\n  ⟨fun ⟨k, hk⟩ ↦ eq_sub_iff_add_eq.mpr hk ▸ (Even.add_self k).sub_odd odd_one, Odd.add_one⟩\n\n"}
