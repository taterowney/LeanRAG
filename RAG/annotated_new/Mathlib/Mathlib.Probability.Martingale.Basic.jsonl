{"name":"MeasureTheory.martingale_const","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nℱ : MeasureTheory.Filtration ι m0\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nx : E\n⊢ MeasureTheory.Martingale (fun x_1 x_2 => x) ℱ μ","decl":"theorem martingale_const (ℱ : Filtration ι m0) (μ : Measure Ω) [IsFiniteMeasure μ] (x : E) :\n    Martingale (fun _ _ => x) ℱ μ :=\n  ⟨adapted_const ℱ _, fun i j _ => by rw [condExp_const (ℱ.le _)]⟩\n\n"}
{"name":"MeasureTheory.martingale_const_fun","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\ninst✝¹ : OrderBot ι\nℱ : MeasureTheory.Filtration ι m0\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Ω → E\nhf : MeasureTheory.StronglyMeasurable f\nhfint : MeasureTheory.Integrable f μ\n⊢ MeasureTheory.Martingale (fun x => f) ℱ μ","decl":"theorem martingale_const_fun [OrderBot ι] (ℱ : Filtration ι m0) (μ : Measure Ω) [IsFiniteMeasure μ]\n    {f : Ω → E} (hf : StronglyMeasurable[ℱ ⊥] f) (hfint : Integrable f μ) :\n    Martingale (fun _ => f) ℱ μ := by\n  refine ⟨fun i => hf.mono <| ℱ.mono bot_le, fun i j _ => ?_⟩\n  rw [condExp_of_stronglyMeasurable (ℱ.le _) (hf.mono <| ℱ.mono bot_le) hfint]\n\n"}
{"name":"MeasureTheory.martingale_zero","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nℱ : MeasureTheory.Filtration ι m0\nμ : MeasureTheory.Measure Ω\n⊢ MeasureTheory.Martingale 0 ℱ μ","decl":"theorem martingale_zero (ℱ : Filtration ι m0) (μ : Measure Ω) : Martingale (0 : ι → Ω → E) ℱ μ :=\n  ⟨adapted_zero E ℱ, fun i j _ => by rw [Pi.zero_apply, condExp_zero]; simp⟩\n\n"}
{"name":"MeasureTheory.Martingale.adapted","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\n⊢ MeasureTheory.Adapted ℱ f","decl":"protected theorem adapted (hf : Martingale f ℱ μ) : Adapted ℱ f :=\n  hf.1\n\n"}
{"name":"MeasureTheory.Martingale.stronglyMeasurable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\ni : ι\n⊢ MeasureTheory.StronglyMeasurable (f i)","decl":"protected theorem stronglyMeasurable (hf : Martingale f ℱ μ) (i : ι) :\n    StronglyMeasurable[ℱ i] (f i) :=\n  hf.adapted i\n\n"}
{"name":"MeasureTheory.Martingale.condExp_ae_eq","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp (↑ℱ i) μ (f j)) (f i)","decl":"theorem condExp_ae_eq (hf : Martingale f ℱ μ) {i j : ι} (hij : i ≤ j) : μ[f j|ℱ i] =ᵐ[μ] f i :=\n  hf.2 i j hij\n\n"}
{"name":"MeasureTheory.Martingale.condexp_ae_eq","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp (↑ℱ i) μ (f j)) (f i)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_ae_eq := condExp_ae_eq\n\n"}
{"name":"MeasureTheory.Martingale.integrable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\ni : ι\n⊢ MeasureTheory.Integrable (f i) μ","decl":"protected theorem integrable (hf : Martingale f ℱ μ) (i : ι) : Integrable (f i) μ :=\n  integrable_condExp.congr (hf.condExp_ae_eq (le_refl i))\n\n"}
{"name":"MeasureTheory.Martingale.setIntegral_eq","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nhf : MeasureTheory.Martingale f ℱ μ\ni j : ι\nhij : LE.le i j\ns : Set Ω\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun ω => f i ω) (MeasureTheory.integral (μ.restrict s) fun ω => f j ω)","decl":"theorem setIntegral_eq [SigmaFiniteFiltration μ ℱ] (hf : Martingale f ℱ μ) {i j : ι} (hij : i ≤ j)\n    {s : Set Ω} (hs : MeasurableSet[ℱ i] s) : ∫ ω in s, f i ω ∂μ = ∫ ω in s, f j ω ∂μ := by\n  rw [← setIntegral_condExp (ℱ.le i) (hf.integrable j) hs]\n  refine setIntegral_congr_ae (ℱ.le i s hs) ?_\n  filter_upwards [hf.2 i j hij] with _ heq _ using heq.symm\n\n"}
{"name":"MeasureTheory.Martingale.add","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\nhg : MeasureTheory.Martingale g ℱ μ\n⊢ MeasureTheory.Martingale (HAdd.hAdd f g) ℱ μ","decl":"theorem add (hf : Martingale f ℱ μ) (hg : Martingale g ℱ μ) : Martingale (f + g) ℱ μ := by\n  refine ⟨hf.adapted.add hg.adapted, fun i j hij => ?_⟩\n  exact (condExp_add (hf.integrable j) (hg.integrable j) _).trans\n    ((hf.2 i j hij).add (hg.2 i j hij))\n\n"}
{"name":"MeasureTheory.Martingale.neg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\n⊢ MeasureTheory.Martingale (Neg.neg f) ℱ μ","decl":"theorem neg (hf : Martingale f ℱ μ) : Martingale (-f) ℱ μ :=\n  ⟨hf.adapted.neg, fun i j hij => (condExp_neg ..).trans (hf.2 i j hij).neg⟩\n\n"}
{"name":"MeasureTheory.Martingale.sub","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nhf : MeasureTheory.Martingale f ℱ μ\nhg : MeasureTheory.Martingale g ℱ μ\n⊢ MeasureTheory.Martingale (HSub.hSub f g) ℱ μ","decl":"theorem sub (hf : Martingale f ℱ μ) (hg : Martingale g ℱ μ) : Martingale (f - g) ℱ μ := by\n  rw [sub_eq_add_neg]; exact hf.add hg.neg\n\n"}
{"name":"MeasureTheory.Martingale.smul","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\nc : Real\nhf : MeasureTheory.Martingale f ℱ μ\n⊢ MeasureTheory.Martingale (HSMul.hSMul c f) ℱ μ","decl":"theorem smul (c : ℝ) (hf : Martingale f ℱ μ) : Martingale (c • f) ℱ μ := by\n  refine ⟨hf.adapted.smul c, fun i j hij => ?_⟩\n  refine (condExp_smul ..).trans ((hf.2 i j hij).mono fun x hx => ?_)\n  simp only [Pi.smul_apply, hx]\n\n"}
{"name":"MeasureTheory.Martingale.supermartingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : Preorder E\nhf : MeasureTheory.Martingale f ℱ μ\n⊢ MeasureTheory.Supermartingale f ℱ μ","decl":"theorem supermartingale [Preorder E] (hf : Martingale f ℱ μ) : Supermartingale f ℱ μ :=\n  ⟨hf.1, fun i j hij => (hf.2 i j hij).le, fun i => hf.integrable i⟩\n\n"}
{"name":"MeasureTheory.Martingale.submartingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : Preorder E\nhf : MeasureTheory.Martingale f ℱ μ\n⊢ MeasureTheory.Submartingale f ℱ μ","decl":"theorem submartingale [Preorder E] (hf : Martingale f ℱ μ) : Submartingale f ℱ μ :=\n  ⟨hf.1, fun i j hij => (hf.2 i j hij).symm.le, fun i => hf.integrable i⟩\n\n"}
{"name":"MeasureTheory.martingale_iff","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : PartialOrder E\n⊢ Iff (MeasureTheory.Martingale f ℱ μ) (And (MeasureTheory.Supermartingale f ℱ μ) (MeasureTheory.Submartingale f ℱ μ))","decl":"theorem martingale_iff [PartialOrder E] :\n    Martingale f ℱ μ ↔ Supermartingale f ℱ μ ∧ Submartingale f ℱ μ :=\n  ⟨fun hf => ⟨hf.supermartingale, hf.submartingale⟩, fun ⟨hf₁, hf₂⟩ =>\n    ⟨hf₁.1, fun i j hij => (hf₁.2.1 i j hij).antisymm (hf₂.2.1 i j hij)⟩⟩\n\n"}
{"name":"MeasureTheory.martingale_condExp","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Ω → E\nℱ : MeasureTheory.Filtration ι m0\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\n⊢ MeasureTheory.Martingale (fun i => MeasureTheory.condExp (↑ℱ i) μ f) ℱ μ","decl":"theorem martingale_condExp (f : Ω → E) (ℱ : Filtration ι m0) (μ : Measure Ω)\n    [SigmaFiniteFiltration μ ℱ] : Martingale (fun i => μ[f|ℱ i]) ℱ μ :=\n  ⟨fun _ => stronglyMeasurable_condExp, fun _ j hij => condExp_condExp_of_le (ℱ.mono hij) (ℱ.le j)⟩\n\n"}
{"name":"MeasureTheory.martingale_condexp","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : Ω → E\nℱ : MeasureTheory.Filtration ι m0\nμ : MeasureTheory.Measure Ω\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\n⊢ MeasureTheory.Martingale (fun i => MeasureTheory.condExp (↑ℱ i) μ f) ℱ μ","decl":"@[deprecated (since := \"2025-01-21\")] alias martingale_condexp := martingale_condExp\n\n"}
{"name":"MeasureTheory.Supermartingale.adapted","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Supermartingale f ℱ μ\n⊢ MeasureTheory.Adapted ℱ f","decl":"protected theorem adapted [LE E] (hf : Supermartingale f ℱ μ) : Adapted ℱ f :=\n  hf.1\n\n"}
{"name":"MeasureTheory.Supermartingale.stronglyMeasurable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Supermartingale f ℱ μ\ni : ι\n⊢ MeasureTheory.StronglyMeasurable (f i)","decl":"protected theorem stronglyMeasurable [LE E] (hf : Supermartingale f ℱ μ) (i : ι) :\n    StronglyMeasurable[ℱ i] (f i) :=\n  hf.adapted i\n\n"}
{"name":"MeasureTheory.Supermartingale.integrable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Supermartingale f ℱ μ\ni : ι\n⊢ MeasureTheory.Integrable (f i) μ","decl":"protected theorem integrable [LE E] (hf : Supermartingale f ℱ μ) (i : ι) : Integrable (f i) μ :=\n  hf.2.2 i\n\n"}
{"name":"MeasureTheory.Supermartingale.condExp_ae_le","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Supermartingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp (↑ℱ i) μ (f j)) (f i)","decl":"theorem condExp_ae_le [LE E] (hf : Supermartingale f ℱ μ) {i j : ι} (hij : i ≤ j) :\n    μ[f j|ℱ i] ≤ᵐ[μ] f i :=\n  hf.2.1 i j hij\n\n"}
{"name":"MeasureTheory.Supermartingale.condexp_ae_le","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Supermartingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp (↑ℱ i) μ (f j)) (f i)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexp_ae_le := condExp_ae_le\n\n"}
{"name":"MeasureTheory.Supermartingale.setIntegral_le","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nf : ι → Ω → Real\nhf : MeasureTheory.Supermartingale f ℱ μ\ni j : ι\nhij : LE.le i j\ns : Set Ω\nhs : MeasurableSet s\n⊢ LE.le (MeasureTheory.integral (μ.restrict s) fun ω => f j ω) (MeasureTheory.integral (μ.restrict s) fun ω => f i ω)","decl":"theorem setIntegral_le [SigmaFiniteFiltration μ ℱ] {f : ι → Ω → ℝ} (hf : Supermartingale f ℱ μ)\n    {i j : ι} (hij : i ≤ j) {s : Set Ω} (hs : MeasurableSet[ℱ i] s) :\n    ∫ ω in s, f j ω ∂μ ≤ ∫ ω in s, f i ω ∂μ := by\n  rw [← setIntegral_condExp (ℱ.le i) (hf.integrable j) hs]\n  refine setIntegral_mono_ae integrable_condExp.integrableOn (hf.integrable i).integrableOn ?_\n  filter_upwards [hf.2.1 i j hij] with _ heq using heq\n\n"}
{"name":"MeasureTheory.Supermartingale.add","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Supermartingale f ℱ μ\nhg : MeasureTheory.Supermartingale g ℱ μ\n⊢ MeasureTheory.Supermartingale (HAdd.hAdd f g) ℱ μ","decl":"theorem add [Preorder E] [AddLeftMono E] (hf : Supermartingale f ℱ μ)\n    (hg : Supermartingale g ℱ μ) : Supermartingale (f + g) ℱ μ := by\n  refine ⟨hf.1.add hg.1, fun i j hij => ?_, fun i => (hf.2.2 i).add (hg.2.2 i)⟩\n  refine (condExp_add (hf.integrable j) (hg.integrable j) _).le.trans ?_\n  filter_upwards [hf.2.1 i j hij, hg.2.1 i j hij]\n  intros\n  refine add_le_add ?_ ?_ <;> assumption\n\n"}
{"name":"MeasureTheory.Supermartingale.add_martingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Supermartingale f ℱ μ\nhg : MeasureTheory.Martingale g ℱ μ\n⊢ MeasureTheory.Supermartingale (HAdd.hAdd f g) ℱ μ","decl":"theorem add_martingale [Preorder E] [AddLeftMono E]\n    (hf : Supermartingale f ℱ μ) (hg : Martingale g ℱ μ) : Supermartingale (f + g) ℱ μ :=\n  hf.add hg.supermartingale\n\n"}
{"name":"MeasureTheory.Supermartingale.neg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Supermartingale f ℱ μ\n⊢ MeasureTheory.Submartingale (Neg.neg f) ℱ μ","decl":"theorem neg [Preorder E] [AddLeftMono E] (hf : Supermartingale f ℱ μ) :\n    Submartingale (-f) ℱ μ := by\n  refine ⟨hf.1.neg, fun i j hij => ?_, fun i => (hf.2.2 i).neg⟩\n  refine EventuallyLE.trans ?_ (condExp_neg ..).symm.le\n  filter_upwards [hf.2.1 i j hij] with _ _\n  simpa\n\n"}
{"name":"MeasureTheory.Submartingale.adapted","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Submartingale f ℱ μ\n⊢ MeasureTheory.Adapted ℱ f","decl":"protected theorem adapted [LE E] (hf : Submartingale f ℱ μ) : Adapted ℱ f :=\n  hf.1\n\n"}
{"name":"MeasureTheory.Submartingale.stronglyMeasurable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Submartingale f ℱ μ\ni : ι\n⊢ MeasureTheory.StronglyMeasurable (f i)","decl":"protected theorem stronglyMeasurable [LE E] (hf : Submartingale f ℱ μ) (i : ι) :\n    StronglyMeasurable[ℱ i] (f i) :=\n  hf.adapted i\n\n"}
{"name":"MeasureTheory.Submartingale.integrable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Submartingale f ℱ μ\ni : ι\n⊢ MeasureTheory.Integrable (f i) μ","decl":"protected theorem integrable [LE E] (hf : Submartingale f ℱ μ) (i : ι) : Integrable (f i) μ :=\n  hf.2.2 i\n\n"}
{"name":"MeasureTheory.Submartingale.ae_le_condExp","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Submartingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyLE (f i) (MeasureTheory.condExp (↑ℱ i) μ (f j))","decl":"theorem ae_le_condExp [LE E] (hf : Submartingale f ℱ μ) {i j : ι} (hij : i ≤ j) :\n    f i ≤ᵐ[μ] μ[f j|ℱ i] :=\n  hf.2.1 i j hij\n\n"}
{"name":"MeasureTheory.Submartingale.ae_le_condexp","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : LE E\nhf : MeasureTheory.Submartingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyLE (f i) (MeasureTheory.condExp (↑ℱ i) μ (f j))","decl":"@[deprecated (since := \"2025-01-21\")] alias ae_le_condexp := ae_le_condExp\n\n"}
{"name":"MeasureTheory.Submartingale.add","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Submartingale f ℱ μ\nhg : MeasureTheory.Submartingale g ℱ μ\n⊢ MeasureTheory.Submartingale (HAdd.hAdd f g) ℱ μ","decl":"theorem add [Preorder E] [AddLeftMono E] (hf : Submartingale f ℱ μ)\n    (hg : Submartingale g ℱ μ) : Submartingale (f + g) ℱ μ := by\n  refine ⟨hf.1.add hg.1, fun i j hij => ?_, fun i => (hf.2.2 i).add (hg.2.2 i)⟩\n  refine EventuallyLE.trans ?_ (condExp_add (hf.integrable j) (hg.integrable j) _).symm.le\n  filter_upwards [hf.2.1 i j hij, hg.2.1 i j hij]\n  intros\n  refine add_le_add ?_ ?_ <;> assumption\n\n"}
{"name":"MeasureTheory.Submartingale.add_martingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Submartingale f ℱ μ\nhg : MeasureTheory.Martingale g ℱ μ\n⊢ MeasureTheory.Submartingale (HAdd.hAdd f g) ℱ μ","decl":"theorem add_martingale [Preorder E] [AddLeftMono E] (hf : Submartingale f ℱ μ)\n    (hg : Martingale g ℱ μ) : Submartingale (f + g) ℱ μ :=\n  hf.add hg.submartingale\n\n"}
{"name":"MeasureTheory.Submartingale.neg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Submartingale f ℱ μ\n⊢ MeasureTheory.Supermartingale (Neg.neg f) ℱ μ","decl":"theorem neg [Preorder E] [AddLeftMono E] (hf : Submartingale f ℱ μ) :\n    Supermartingale (-f) ℱ μ := by\n  refine ⟨hf.1.neg, fun i j hij => (condExp_neg ..).le.trans ?_, fun i => (hf.2.2 i).neg⟩\n  filter_upwards [hf.2.1 i j hij] with _ _\n  simpa\n\n"}
{"name":"MeasureTheory.Submartingale.setIntegral_le","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ ℱ\nf : ι → Ω → Real\nhf : MeasureTheory.Submartingale f ℱ μ\ni j : ι\nhij : LE.le i j\ns : Set Ω\nhs : MeasurableSet s\n⊢ LE.le (MeasureTheory.integral (μ.restrict s) fun ω => f i ω) (MeasureTheory.integral (μ.restrict s) fun ω => f j ω)","decl":"/-- The converse of this lemma is `MeasureTheory.submartingale_of_setIntegral_le`. -/\ntheorem setIntegral_le [SigmaFiniteFiltration μ ℱ] {f : ι → Ω → ℝ} (hf : Submartingale f ℱ μ)\n    {i j : ι} (hij : i ≤ j) {s : Set Ω} (hs : MeasurableSet[ℱ i] s) :\n    ∫ ω in s, f i ω ∂μ ≤ ∫ ω in s, f j ω ∂μ := by\n  rw [← neg_le_neg_iff, ← integral_neg, ← integral_neg]\n  exact Supermartingale.setIntegral_le hf.neg hij hs\n\n"}
{"name":"MeasureTheory.Submartingale.sub_supermartingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Submartingale f ℱ μ\nhg : MeasureTheory.Supermartingale g ℱ μ\n⊢ MeasureTheory.Submartingale (HSub.hSub f g) ℱ μ","decl":"theorem sub_supermartingale [Preorder E] [AddLeftMono E]\n    (hf : Submartingale f ℱ μ) (hg : Supermartingale g ℱ μ) : Submartingale (f - g) ℱ μ := by\n  rw [sub_eq_add_neg]; exact hf.add hg.neg\n\n"}
{"name":"MeasureTheory.Submartingale.sub_martingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Submartingale f ℱ μ\nhg : MeasureTheory.Martingale g ℱ μ\n⊢ MeasureTheory.Submartingale (HSub.hSub f g) ℱ μ","decl":"theorem sub_martingale [Preorder E] [AddLeftMono E] (hf : Submartingale f ℱ μ)\n    (hg : Martingale g ℱ μ) : Submartingale (f - g) ℱ μ :=\n  hf.sub_supermartingale hg.supermartingale\n\n"}
{"name":"MeasureTheory.Submartingale.sup","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nf g : ι → Ω → Real\nhf : MeasureTheory.Submartingale f ℱ μ\nhg : MeasureTheory.Submartingale g ℱ μ\n⊢ MeasureTheory.Submartingale (Max.max f g) ℱ μ","decl":"protected theorem sup {f g : ι → Ω → ℝ} (hf : Submartingale f ℱ μ) (hg : Submartingale g ℱ μ) :\n    Submartingale (f ⊔ g) ℱ μ := by\n  refine ⟨fun i => @StronglyMeasurable.sup _ _ _ _ (ℱ i) _ _ _ (hf.adapted i) (hg.adapted i),\n    fun i j hij => ?_, fun i => Integrable.sup (hf.integrable _) (hg.integrable _)⟩\n  refine EventuallyLE.sup_le ?_ ?_\n  · exact EventuallyLE.trans (hf.2.1 i j hij)\n      (condExp_mono (hf.integrable _) (Integrable.sup (hf.integrable j) (hg.integrable j))\n        (Eventually.of_forall fun x => le_max_left _ _))\n  · exact EventuallyLE.trans (hg.2.1 i j hij)\n      (condExp_mono (hg.integrable _) (Integrable.sup (hf.integrable j) (hg.integrable j))\n        (Eventually.of_forall fun x => le_max_right _ _))\n\n"}
{"name":"MeasureTheory.Submartingale.pos","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nf : ι → Ω → Real\nhf : MeasureTheory.Submartingale f ℱ μ\n⊢ MeasureTheory.Submartingale (PosPart.posPart f) ℱ μ","decl":"protected theorem pos {f : ι → Ω → ℝ} (hf : Submartingale f ℱ μ) : Submartingale (f⁺) ℱ μ :=\n  hf.sup (martingale_zero _ _ _).submartingale\n\n"}
{"name":"MeasureTheory.submartingale_of_setIntegral_le","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : ι → Ω → Real\nhadp : MeasureTheory.Adapted ℱ f\nhint : ∀ (i : ι), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i j : ι), LE.le i j → ∀ (s : Set Ω), MeasurableSet s → LE.le (MeasureTheory.integral (μ.restrict s) fun ω => f i ω) (MeasureTheory.integral (μ.restrict s) fun ω => f j ω)\n⊢ MeasureTheory.Submartingale f ℱ μ","decl":"theorem submartingale_of_setIntegral_le [IsFiniteMeasure μ] {f : ι → Ω → ℝ} (hadp : Adapted ℱ f)\n    (hint : ∀ i, Integrable (f i) μ) (hf : ∀ i j : ι,\n      i ≤ j → ∀ s : Set Ω, MeasurableSet[ℱ i] s → ∫ ω in s, f i ω ∂μ ≤ ∫ ω in s, f j ω ∂μ) :\n    Submartingale f ℱ μ := by\n  refine ⟨hadp, fun i j hij => ?_, hint⟩\n  suffices f i ≤ᵐ[μ.trim (ℱ.le i)] μ[f j|ℱ i] by exact ae_le_of_ae_le_trim this\n  suffices 0 ≤ᵐ[μ.trim (ℱ.le i)] μ[f j|ℱ i] - f i by\n    filter_upwards [this] with x hx\n    rwa [← sub_nonneg]\n  refine ae_nonneg_of_forall_setIntegral_nonneg\n    ((integrable_condExp.sub (hint i)).trim _ (stronglyMeasurable_condExp.sub <| hadp i))\n      fun s hs _ => ?_\n  specialize hf i j hij s hs\n  rwa [← setIntegral_trim _ (stronglyMeasurable_condExp.sub <| hadp i) hs,\n    integral_sub' integrable_condExp.integrableOn (hint i).integrableOn, sub_nonneg,\n    setIntegral_condExp (ℱ.le i) (hint j) hs]\n\n"}
{"name":"MeasureTheory.submartingale_of_condExp_sub_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : ι → Ω → Real\nhadp : MeasureTheory.Adapted ℱ f\nhint : ∀ (i : ι), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i j : ι), LE.le i j → (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑ℱ i) μ (HSub.hSub (f j) (f i)))\n⊢ MeasureTheory.Submartingale f ℱ μ","decl":"theorem submartingale_of_condExp_sub_nonneg [IsFiniteMeasure μ] {f : ι → Ω → ℝ} (hadp : Adapted ℱ f)\n    (hint : ∀ i, Integrable (f i) μ) (hf : ∀ i j, i ≤ j → 0 ≤ᵐ[μ] μ[f j - f i|ℱ i]) :\n    Submartingale f ℱ μ := by\n  refine ⟨hadp, fun i j hij => ?_, hint⟩\n  rw [← condExp_of_stronglyMeasurable (ℱ.le _) (hadp _) (hint _), ← eventually_sub_nonneg]\n  exact EventuallyLE.trans (hf i j hij) (condExp_sub (hint _) (hint _) _).le\n\n"}
{"name":"MeasureTheory.submartingale_of_condexp_sub_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : ι → Ω → Real\nhadp : MeasureTheory.Adapted ℱ f\nhint : ∀ (i : ι), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i j : ι), LE.le i j → (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑ℱ i) μ (HSub.hSub (f j) (f i)))\n⊢ MeasureTheory.Submartingale f ℱ μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias submartingale_of_condexp_sub_nonneg := submartingale_of_condExp_sub_nonneg\n\n"}
{"name":"MeasureTheory.Submartingale.condExp_sub_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nf : ι → Ω → Real\nhf : MeasureTheory.Submartingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑ℱ i) μ (HSub.hSub (f j) (f i)))","decl":"theorem Submartingale.condExp_sub_nonneg {f : ι → Ω → ℝ} (hf : Submartingale f ℱ μ) {i j : ι}\n    (hij : i ≤ j) : 0 ≤ᵐ[μ] μ[f j - f i|ℱ i] := by\n  by_cases h : SigmaFinite (μ.trim (ℱ.le i))\n  swap; · rw [condExp_of_not_sigmaFinite (ℱ.le i) h]\n  refine EventuallyLE.trans ?_ (condExp_sub (hf.integrable _) (hf.integrable _) _).symm.le\n  rw [eventually_sub_nonneg,\n    condExp_of_stronglyMeasurable (ℱ.le _) (hf.adapted _) (hf.integrable _)]\n  exact hf.2.1 i j hij\n\n"}
{"name":"MeasureTheory.Submartingale.condexp_sub_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nf : ι → Ω → Real\nhf : MeasureTheory.Submartingale f ℱ μ\ni j : ι\nhij : LE.le i j\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑ℱ i) μ (HSub.hSub (f j) (f i)))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias Submartingale.condexp_sub_nonneg := Submartingale.condExp_sub_nonneg\n\n"}
{"name":"MeasureTheory.submartingale_iff_condExp_sub_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : ι → Ω → Real\n⊢ Iff (MeasureTheory.Submartingale f ℱ μ) (And (MeasureTheory.Adapted ℱ f) (And (∀ (i : ι), MeasureTheory.Integrable (f i) μ) (∀ (i j : ι), LE.le i j → (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑ℱ i) μ (HSub.hSub (f j) (f i))))))","decl":"theorem submartingale_iff_condExp_sub_nonneg [IsFiniteMeasure μ] {f : ι → Ω → ℝ} :\n    Submartingale f ℱ μ ↔\n      Adapted ℱ f ∧ (∀ i, Integrable (f i) μ) ∧ ∀ i j, i ≤ j → 0 ≤ᵐ[μ] μ[f j - f i|ℱ i] :=\n  ⟨fun h => ⟨h.adapted, h.integrable, fun _ _ => h.condExp_sub_nonneg⟩, fun ⟨hadp, hint, h⟩ =>\n    submartingale_of_condExp_sub_nonneg hadp hint h⟩\n\n"}
{"name":"MeasureTheory.submartingale_iff_condexp_sub_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝¹ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : ι → Ω → Real\n⊢ Iff (MeasureTheory.Submartingale f ℱ μ) (And (MeasureTheory.Adapted ℱ f) (And (∀ (i : ι), MeasureTheory.Integrable (f i) μ) (∀ (i j : ι), LE.le i j → (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑ℱ i) μ (HSub.hSub (f j) (f i))))))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias submartingale_iff_condexp_sub_nonneg := submartingale_iff_condExp_sub_nonneg\n\n"}
{"name":"MeasureTheory.Supermartingale.sub_submartingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Supermartingale f ℱ μ\nhg : MeasureTheory.Submartingale g ℱ μ\n⊢ MeasureTheory.Supermartingale (HSub.hSub f g) ℱ μ","decl":"theorem sub_submartingale [Preorder E] [AddLeftMono E]\n    (hf : Supermartingale f ℱ μ) (hg : Submartingale g ℱ μ) : Supermartingale (f - g) ℱ μ := by\n  rw [sub_eq_add_neg]; exact hf.add hg.neg\n\n"}
{"name":"MeasureTheory.Supermartingale.sub_martingale","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝⁵ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\nf g : ι → Ω → E\nℱ : MeasureTheory.Filtration ι m0\ninst✝¹ : Preorder E\ninst✝ : AddLeftMono E\nhf : MeasureTheory.Supermartingale f ℱ μ\nhg : MeasureTheory.Martingale g ℱ μ\n⊢ MeasureTheory.Supermartingale (HSub.hSub f g) ℱ μ","decl":"theorem sub_martingale [Preorder E] [AddLeftMono E]\n    (hf : Supermartingale f ℱ μ) (hg : Martingale g ℱ μ) : Supermartingale (f - g) ℱ μ :=\n  hf.sub_submartingale hg.submartingale\n\n"}
{"name":"MeasureTheory.Supermartingale.smul_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nF : Type u_4\ninst✝³ : NormedLatticeAddCommGroup F\ninst✝² : NormedSpace Real F\ninst✝¹ : CompleteSpace F\ninst✝ : OrderedSMul Real F\nf : ι → Ω → F\nc : Real\nhc : LE.le 0 c\nhf : MeasureTheory.Supermartingale f ℱ μ\n⊢ MeasureTheory.Supermartingale (HSMul.hSMul c f) ℱ μ","decl":"theorem smul_nonneg {f : ι → Ω → F} {c : ℝ} (hc : 0 ≤ c) (hf : Supermartingale f ℱ μ) :\n    Supermartingale (c • f) ℱ μ := by\n  refine ⟨hf.1.smul c, fun i j hij => ?_, fun i => (hf.2.2 i).smul c⟩\n  filter_upwards [condExp_smul c (f j) (ℱ i), hf.2.1 i j hij] with ω hω hle\n  simpa only [hω, Pi.smul_apply] using smul_le_smul_of_nonneg_left hle hc\n\n"}
{"name":"MeasureTheory.Supermartingale.smul_nonpos","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nF : Type u_4\ninst✝³ : NormedLatticeAddCommGroup F\ninst✝² : NormedSpace Real F\ninst✝¹ : CompleteSpace F\ninst✝ : OrderedSMul Real F\nf : ι → Ω → F\nc : Real\nhc : LE.le c 0\nhf : MeasureTheory.Supermartingale f ℱ μ\n⊢ MeasureTheory.Submartingale (HSMul.hSMul c f) ℱ μ","decl":"theorem smul_nonpos {f : ι → Ω → F} {c : ℝ} (hc : c ≤ 0) (hf : Supermartingale f ℱ μ) :\n    Submartingale (c • f) ℱ μ := by\n  rw [← neg_neg c, (by ext (i x); simp : - -c • f = -(-c • f))]\n  exact (hf.smul_nonneg <| neg_nonneg.2 hc).neg\n\n"}
{"name":"MeasureTheory.Submartingale.smul_nonneg","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nF : Type u_4\ninst✝³ : NormedLatticeAddCommGroup F\ninst✝² : NormedSpace Real F\ninst✝¹ : CompleteSpace F\ninst✝ : OrderedSMul Real F\nf : ι → Ω → F\nc : Real\nhc : LE.le 0 c\nhf : MeasureTheory.Submartingale f ℱ μ\n⊢ MeasureTheory.Submartingale (HSMul.hSMul c f) ℱ μ","decl":"theorem smul_nonneg {f : ι → Ω → F} {c : ℝ} (hc : 0 ≤ c) (hf : Submartingale f ℱ μ) :\n    Submartingale (c • f) ℱ μ := by\n  rw [← neg_neg c, (by ext (i x); simp : - -c • f = -(c • -f))]\n  exact Supermartingale.neg (hf.neg.smul_nonneg hc)\n\n"}
{"name":"MeasureTheory.Submartingale.smul_nonpos","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nι : Type u_3\ninst✝⁴ : Preorder ι\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\nℱ : MeasureTheory.Filtration ι m0\nF : Type u_4\ninst✝³ : NormedLatticeAddCommGroup F\ninst✝² : NormedSpace Real F\ninst✝¹ : CompleteSpace F\ninst✝ : OrderedSMul Real F\nf : ι → Ω → F\nc : Real\nhc : LE.le c 0\nhf : MeasureTheory.Submartingale f ℱ μ\n⊢ MeasureTheory.Supermartingale (HSMul.hSMul c f) ℱ μ","decl":"theorem smul_nonpos {f : ι → Ω → F} {c : ℝ} (hc : c ≤ 0) (hf : Submartingale f ℱ μ) :\n    Supermartingale (c • f) ℱ μ := by\n  rw [← neg_neg c, (by ext (i x); simp : - -c • f = -(-c • f))]\n  exact (hf.smul_nonneg <| neg_nonneg.2 hc).neg\n\n"}
{"name":"MeasureTheory.submartingale_of_setIntegral_le_succ","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat) (s : Set Ω), MeasurableSet s → LE.le (MeasureTheory.integral (μ.restrict s) fun ω => f i ω) (MeasureTheory.integral (μ.restrict s) fun ω => f (HAdd.hAdd i 1) ω)\n⊢ MeasureTheory.Submartingale f 𝒢 μ","decl":"theorem submartingale_of_setIntegral_le_succ [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ}\n    (hadp : Adapted 𝒢 f) (hint : ∀ i, Integrable (f i) μ)\n    (hf : ∀ i, ∀ s : Set Ω, MeasurableSet[𝒢 i] s → ∫ ω in s, f i ω ∂μ ≤ ∫ ω in s, f (i + 1) ω ∂μ) :\n    Submartingale f 𝒢 μ := by\n  refine submartingale_of_setIntegral_le hadp hint fun i j hij s hs => ?_\n  induction' hij with k hk₁ hk₂\n  · exact le_rfl\n  · exact le_trans hk₂ (hf k s (𝒢.mono hk₁ _ hs))\n\n"}
{"name":"MeasureTheory.supermartingale_of_setIntegral_succ_le","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat) (s : Set Ω), MeasurableSet s → LE.le (MeasureTheory.integral (μ.restrict s) fun ω => f (HAdd.hAdd i 1) ω) (MeasureTheory.integral (μ.restrict s) fun ω => f i ω)\n⊢ MeasureTheory.Supermartingale f 𝒢 μ","decl":"theorem supermartingale_of_setIntegral_succ_le [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ}\n    (hadp : Adapted 𝒢 f) (hint : ∀ i, Integrable (f i) μ)\n    (hf : ∀ i, ∀ s : Set Ω, MeasurableSet[𝒢 i] s → ∫ ω in s, f (i + 1) ω ∂μ ≤ ∫ ω in s, f i ω ∂μ) :\n    Supermartingale f 𝒢 μ := by\n  rw [← neg_neg f]\n  refine (submartingale_of_setIntegral_le_succ hadp.neg (fun i => (hint i).neg) ?_).neg\n  simpa only [integral_neg, Pi.neg_apply, neg_le_neg_iff]\n\n"}
{"name":"MeasureTheory.martingale_of_setIntegral_eq_succ","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat) (s : Set Ω), MeasurableSet s → Eq (MeasureTheory.integral (μ.restrict s) fun ω => f i ω) (MeasureTheory.integral (μ.restrict s) fun ω => f (HAdd.hAdd i 1) ω)\n⊢ MeasureTheory.Martingale f 𝒢 μ","decl":"theorem martingale_of_setIntegral_eq_succ [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ} (hadp : Adapted 𝒢 f)\n    (hint : ∀ i, Integrable (f i) μ)\n    (hf : ∀ i, ∀ s : Set Ω, MeasurableSet[𝒢 i] s → ∫ ω in s, f i ω ∂μ = ∫ ω in s, f (i + 1) ω ∂μ) :\n    Martingale f 𝒢 μ :=\n  martingale_iff.2 ⟨supermartingale_of_setIntegral_succ_le hadp hint fun i s hs => (hf i s hs).ge,\n    submartingale_of_setIntegral_le_succ hadp hint fun i s hs => (hf i s hs).le⟩\n\n"}
{"name":"MeasureTheory.submartingale_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyLE (f i) (MeasureTheory.condExp (↑𝒢 i) μ (f (HAdd.hAdd i 1)))\n⊢ MeasureTheory.Submartingale f 𝒢 μ","decl":"theorem submartingale_nat [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ} (hadp : Adapted 𝒢 f)\n    (hint : ∀ i, Integrable (f i) μ) (hf : ∀ i, f i ≤ᵐ[μ] μ[f (i + 1)|𝒢 i]) :\n    Submartingale f 𝒢 μ := by\n  refine submartingale_of_setIntegral_le_succ hadp hint fun i s hs => ?_\n  have : ∫ ω in s, f (i + 1) ω ∂μ = ∫ ω in s, (μ[f (i + 1)|𝒢 i]) ω ∂μ :=\n    (setIntegral_condExp (𝒢.le i) (hint _) hs).symm\n  rw [this]\n  exact setIntegral_mono_ae (hint i).integrableOn integrable_condExp.integrableOn (hf i)\n\n"}
{"name":"MeasureTheory.supermartingale_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyLE (MeasureTheory.condExp (↑𝒢 i) μ (f (HAdd.hAdd i 1))) (f i)\n⊢ MeasureTheory.Supermartingale f 𝒢 μ","decl":"theorem supermartingale_nat [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ} (hadp : Adapted 𝒢 f)\n    (hint : ∀ i, Integrable (f i) μ) (hf : ∀ i, μ[f (i + 1)|𝒢 i] ≤ᵐ[μ] f i) :\n    Supermartingale f 𝒢 μ := by\n  rw [← neg_neg f]\n  refine (submartingale_nat hadp.neg (fun i => (hint i).neg) fun i =>\n    EventuallyLE.trans ?_ (condExp_neg ..).symm.le).neg\n  filter_upwards [hf i] with x hx using neg_le_neg hx\n\n"}
{"name":"MeasureTheory.martingale_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyEq (f i) (MeasureTheory.condExp (↑𝒢 i) μ (f (HAdd.hAdd i 1)))\n⊢ MeasureTheory.Martingale f 𝒢 μ","decl":"theorem martingale_nat [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ} (hadp : Adapted 𝒢 f)\n    (hint : ∀ i, Integrable (f i) μ) (hf : ∀ i, f i =ᵐ[μ] μ[f (i + 1)|𝒢 i]) : Martingale f 𝒢 μ :=\n  martingale_iff.2 ⟨supermartingale_nat hadp hint fun i => (hf i).symm.le,\n    submartingale_nat hadp hint fun i => (hf i).le⟩\n\n"}
{"name":"MeasureTheory.submartingale_of_condExp_sub_nonneg_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑𝒢 i) μ (HSub.hSub (f (HAdd.hAdd i 1)) (f i)))\n⊢ MeasureTheory.Submartingale f 𝒢 μ","decl":"theorem submartingale_of_condExp_sub_nonneg_nat [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ}\n    (hadp : Adapted 𝒢 f) (hint : ∀ i, Integrable (f i) μ)\n    (hf : ∀ i, 0 ≤ᵐ[μ] μ[f (i + 1) - f i|𝒢 i]) : Submartingale f 𝒢 μ := by\n  refine submartingale_nat hadp hint fun i => ?_\n  rw [← condExp_of_stronglyMeasurable (𝒢.le _) (hadp _) (hint _), ← eventually_sub_nonneg]\n  exact EventuallyLE.trans (hf i) (condExp_sub (hint _) (hint _) _).le\n\n"}
{"name":"MeasureTheory.submartingale_of_condexp_sub_nonneg_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑𝒢 i) μ (HSub.hSub (f (HAdd.hAdd i 1)) (f i)))\n⊢ MeasureTheory.Submartingale f 𝒢 μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias submartingale_of_condexp_sub_nonneg_nat := submartingale_of_condExp_sub_nonneg_nat\n\n"}
{"name":"MeasureTheory.supermartingale_of_condExp_sub_nonneg_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑𝒢 i) μ (HSub.hSub (f i) (f (HAdd.hAdd i 1))))\n⊢ MeasureTheory.Supermartingale f 𝒢 μ","decl":"theorem supermartingale_of_condExp_sub_nonneg_nat [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ}\n    (hadp : Adapted 𝒢 f) (hint : ∀ i, Integrable (f i) μ)\n    (hf : ∀ i, 0 ≤ᵐ[μ] μ[f i - f (i + 1)|𝒢 i]) : Supermartingale f 𝒢 μ := by\n  rw [← neg_neg f]\n  refine (submartingale_of_condExp_sub_nonneg_nat hadp.neg (fun i => (hint i).neg) ?_).neg\n  simpa only [Pi.zero_apply, Pi.neg_apply, neg_sub_neg]\n\n"}
{"name":"MeasureTheory.supermartingale_of_condexp_sub_nonneg_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyLE 0 (MeasureTheory.condExp (↑𝒢 i) μ (HSub.hSub (f i) (f (HAdd.hAdd i 1))))\n⊢ MeasureTheory.Supermartingale f 𝒢 μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias supermartingale_of_condexp_sub_nonneg_nat := supermartingale_of_condExp_sub_nonneg_nat\n\n"}
{"name":"MeasureTheory.martingale_of_condExp_sub_eq_zero_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp (↑𝒢 i) μ (HSub.hSub (f (HAdd.hAdd i 1)) (f i))) 0\n⊢ MeasureTheory.Martingale f 𝒢 μ","decl":"theorem martingale_of_condExp_sub_eq_zero_nat [IsFiniteMeasure μ] {f : ℕ → Ω → ℝ}\n    (hadp : Adapted 𝒢 f) (hint : ∀ i, Integrable (f i) μ)\n    (hf : ∀ i, μ[f (i + 1) - f i|𝒢 i] =ᵐ[μ] 0) : Martingale f 𝒢 μ := by\n  refine martingale_iff.2 ⟨supermartingale_of_condExp_sub_nonneg_nat hadp hint fun i => ?_,\n    submartingale_of_condExp_sub_nonneg_nat hadp hint fun i => (hf i).symm.le⟩\n  rw [← neg_sub]\n  refine (EventuallyEq.trans ?_ (condExp_neg ..).symm).le\n  filter_upwards [hf i] with x hx\n  simpa only [Pi.zero_apply, Pi.neg_apply, zero_eq_neg]\n\n"}
{"name":"MeasureTheory.martingale_of_condexp_sub_eq_zero_nat","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Nat → Ω → Real\nhadp : MeasureTheory.Adapted 𝒢 f\nhint : ∀ (i : Nat), MeasureTheory.Integrable (f i) μ\nhf : ∀ (i : Nat), (MeasureTheory.ae μ).EventuallyEq (MeasureTheory.condExp (↑𝒢 i) μ (HSub.hSub (f (HAdd.hAdd i 1)) (f i))) 0\n⊢ MeasureTheory.Martingale f 𝒢 μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias martingale_of_condexp_sub_eq_zero_nat := martingale_of_condExp_sub_eq_zero_nat\n\n-- Note that one cannot use `Submartingale.zero_le_of_predictable` to prove the other two\n-- corresponding lemmas without imposing more restrictions to the ordering of `E`\n"}
{"name":"MeasureTheory.Submartingale.zero_le_of_predictable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝¹ : Preorder E\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ 𝒢\nf : Nat → Ω → E\nhfmgle : MeasureTheory.Submartingale f 𝒢 μ\nhfadp : MeasureTheory.Adapted 𝒢 fun n => f (HAdd.hAdd n 1)\nn : Nat\n⊢ (MeasureTheory.ae μ).EventuallyLE (f 0) (f n)","decl":"/-- A predictable submartingale is a.e. greater equal than its initial state. -/\ntheorem Submartingale.zero_le_of_predictable [Preorder E] [SigmaFiniteFiltration μ 𝒢]\n    {f : ℕ → Ω → E} (hfmgle : Submartingale f 𝒢 μ) (hfadp : Adapted 𝒢 fun n => f (n + 1)) (n : ℕ) :\n    f 0 ≤ᵐ[μ] f n := by\n  induction' n with k ih\n  · rfl\n  · exact ih.trans ((hfmgle.2.1 k (k + 1) k.le_succ).trans_eq <| Germ.coe_eq.mp <|\n    congr_arg Germ.ofFun <| condExp_of_stronglyMeasurable (𝒢.le _) (hfadp _) <| hfmgle.integrable _)\n\n"}
{"name":"MeasureTheory.Supermartingale.le_zero_of_predictable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : CompleteSpace E\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝¹ : Preorder E\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ 𝒢\nf : Nat → Ω → E\nhfmgle : MeasureTheory.Supermartingale f 𝒢 μ\nhfadp : MeasureTheory.Adapted 𝒢 fun n => f (HAdd.hAdd n 1)\nn : Nat\n⊢ (MeasureTheory.ae μ).EventuallyLE (f n) (f 0)","decl":"/-- A predictable supermartingale is a.e. less equal than its initial state. -/\ntheorem Supermartingale.le_zero_of_predictable [Preorder E] [SigmaFiniteFiltration μ 𝒢]\n    {f : ℕ → Ω → E} (hfmgle : Supermartingale f 𝒢 μ) (hfadp : Adapted 𝒢 fun n => f (n + 1))\n    (n : ℕ) : f n ≤ᵐ[μ] f 0 := by\n  induction' n with k ih\n  · rfl\n  · exact ((Germ.coe_eq.mp <| congr_arg Germ.ofFun <| condExp_of_stronglyMeasurable (𝒢.le _)\n      (hfadp _) <| hfmgle.integrable _).symm.trans_le (hfmgle.2.1 k (k + 1) k.le_succ)).trans ih\n\n"}
{"name":"MeasureTheory.Martingale.eq_zero_of_predictable","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.SigmaFiniteFiltration μ 𝒢\nf : Nat → Ω → E\nhfmgle : MeasureTheory.Martingale f 𝒢 μ\nhfadp : MeasureTheory.Adapted 𝒢 fun n => f (HAdd.hAdd n 1)\nn : Nat\n⊢ (MeasureTheory.ae μ).EventuallyEq (f n) (f 0)","decl":"/-- A predictable martingale is a.e. equal to its initial state. -/\ntheorem Martingale.eq_zero_of_predictable [SigmaFiniteFiltration μ 𝒢] {f : ℕ → Ω → E}\n    (hfmgle : Martingale f 𝒢 μ) (hfadp : Adapted 𝒢 fun n => f (n + 1)) (n : ℕ) : f n =ᵐ[μ] f 0 := by\n  induction' n with k ih\n  · rfl\n  · exact ((Germ.coe_eq.mp (congr_arg Germ.ofFun <| condExp_of_stronglyMeasurable (𝒢.le _) (hfadp _)\n      (hfmgle.integrable _))).symm.trans (hfmgle.2 k (k + 1) k.le_succ)).trans ih\n\n"}
{"name":"MeasureTheory.Submartingale.integrable_stoppedValue","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nE : Type u_2\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : LE E\nf : Nat → Ω → E\nhf : MeasureTheory.Submartingale f 𝒢 μ\nτ : Ω → Nat\nhτ : MeasureTheory.IsStoppingTime 𝒢 τ\nN : Nat\nhbdd : ∀ (ω : Ω), LE.le (τ ω) N\n⊢ MeasureTheory.Integrable (MeasureTheory.stoppedValue f τ) μ","decl":"protected theorem integrable_stoppedValue [LE E] {f : ℕ → Ω → E} (hf : Submartingale f 𝒢 μ)\n    {τ : Ω → ℕ} (hτ : IsStoppingTime 𝒢 τ) {N : ℕ} (hbdd : ∀ ω, τ ω ≤ N) :\n    Integrable (stoppedValue f τ) μ :=\n  integrable_stoppedValue ℕ hτ hf.integrable hbdd\n\n"}
{"name":"MeasureTheory.Submartingale.sum_mul_sub","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nR : Real\nξ f : Nat → Ω → Real\nhf : MeasureTheory.Submartingale f 𝒢 μ\nhξ : MeasureTheory.Adapted 𝒢 ξ\nhbdd : ∀ (n : Nat) (ω : Ω), LE.le (ξ n ω) R\nhnonneg : ∀ (n : Nat) (ω : Ω), LE.le 0 (ξ n ω)\n⊢ MeasureTheory.Submartingale (fun n => (Finset.range n).sum fun k => HMul.hMul (ξ k) (HSub.hSub (f (HAdd.hAdd k 1)) (f k))) 𝒢 μ","decl":"theorem Submartingale.sum_mul_sub [IsFiniteMeasure μ] {R : ℝ} {ξ f : ℕ → Ω → ℝ}\n    (hf : Submartingale f 𝒢 μ) (hξ : Adapted 𝒢 ξ) (hbdd : ∀ n ω, ξ n ω ≤ R)\n    (hnonneg : ∀ n ω, 0 ≤ ξ n ω) :\n    Submartingale (fun n => ∑ k ∈ Finset.range n, ξ k * (f (k + 1) - f k)) 𝒢 μ := by\n  have hξbdd : ∀ i, ∃ C, ∀ ω, |ξ i ω| ≤ C := fun i =>\n    ⟨R, fun ω => (abs_of_nonneg (hnonneg i ω)).trans_le (hbdd i ω)⟩\n  have hint : ∀ m, Integrable (∑ k ∈ Finset.range m, ξ k * (f (k + 1) - f k)) μ := fun m =>\n    integrable_finset_sum' _ fun i _ => Integrable.bdd_mul ((hf.integrable _).sub (hf.integrable _))\n      hξ.stronglyMeasurable.aestronglyMeasurable (hξbdd _)\n  have hadp : Adapted 𝒢 fun n => ∑ k ∈ Finset.range n, ξ k * (f (k + 1) - f k) := by\n    intro m\n    refine Finset.stronglyMeasurable_sum' _ fun i hi => ?_\n    rw [Finset.mem_range] at hi\n    exact (hξ.stronglyMeasurable_le hi.le).mul\n      ((hf.adapted.stronglyMeasurable_le (Nat.succ_le_of_lt hi)).sub\n        (hf.adapted.stronglyMeasurable_le hi.le))\n  refine submartingale_of_condExp_sub_nonneg_nat hadp hint fun i => ?_\n  simp only [← Finset.sum_Ico_eq_sub _ (Nat.le_succ _), Finset.sum_apply, Pi.mul_apply,\n    Pi.sub_apply, Nat.Ico_succ_singleton, Finset.sum_singleton]\n  exact EventuallyLE.trans (EventuallyLE.mul_nonneg (Eventually.of_forall (hnonneg _))\n    (hf.condExp_sub_nonneg (Nat.le_succ _))) (condExp_mul_of_stronglyMeasurable_left (hξ _)\n    (((hf.integrable _).sub (hf.integrable _)).bdd_mul\n      hξ.stronglyMeasurable.aestronglyMeasurable (hξbdd _))\n    ((hf.integrable _).sub (hf.integrable _))).symm.le\n\n"}
{"name":"MeasureTheory.Submartingale.sum_mul_sub'","module":"Mathlib.Probability.Martingale.Basic","initialProofState":"Ω : Type u_1\nm0 : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\n𝒢 : MeasureTheory.Filtration Nat m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nR : Real\nξ f : Nat → Ω → Real\nhf : MeasureTheory.Submartingale f 𝒢 μ\nhξ : MeasureTheory.Adapted 𝒢 fun n => ξ (HAdd.hAdd n 1)\nhbdd : ∀ (n : Nat) (ω : Ω), LE.le (ξ n ω) R\nhnonneg : ∀ (n : Nat) (ω : Ω), LE.le 0 (ξ n ω)\n⊢ MeasureTheory.Submartingale (fun n => (Finset.range n).sum fun k => HMul.hMul (ξ (HAdd.hAdd k 1)) (HSub.hSub (f (HAdd.hAdd k 1)) (f k))) 𝒢 μ","decl":"/-- Given a discrete submartingale `f` and a predictable process `ξ` (i.e. `ξ (n + 1)` is adapted)\nthe process defined by `fun n => ∑ k ∈ Finset.range n, ξ (k + 1) * (f (k + 1) - f k)` is also a\nsubmartingale. -/\ntheorem Submartingale.sum_mul_sub' [IsFiniteMeasure μ] {R : ℝ} {ξ f : ℕ → Ω → ℝ}\n    (hf : Submartingale f 𝒢 μ) (hξ : Adapted 𝒢 fun n => ξ (n + 1)) (hbdd : ∀ n ω, ξ n ω ≤ R)\n    (hnonneg : ∀ n ω, 0 ≤ ξ n ω) :\n    Submartingale (fun n => ∑ k ∈ Finset.range n, ξ (k + 1) * (f (k + 1) - f k)) 𝒢 μ :=\n  hf.sum_mul_sub hξ (fun _ => hbdd _) fun _ => hnonneg _\n\n"}
