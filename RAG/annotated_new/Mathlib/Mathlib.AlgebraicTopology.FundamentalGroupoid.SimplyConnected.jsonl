{"name":"simply_connected_def","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Iff (SimplyConnectedSpace X) (Nonempty (CategoryTheory.Equivalence (FundamentalGroupoid X) (CategoryTheory.Discrete Unit)))","decl":"/-- A simply connected space is one whose fundamental groupoid is equivalent to `Discrete Unit` -/\n@[mk_iff simply_connected_def]\nclass SimplyConnectedSpace (X : Type*) [TopologicalSpace X] : Prop where\n  equiv_unit : Nonempty (FundamentalGroupoid X ≌ Discrete Unit)\n\n"}
{"name":"SimplyConnectedSpace.equiv_unit","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nself : SimplyConnectedSpace X\n⊢ Nonempty (CategoryTheory.Equivalence (FundamentalGroupoid X) (CategoryTheory.Discrete Unit))","decl":"/-- A simply connected space is one whose fundamental groupoid is equivalent to `Discrete Unit` -/\n@[mk_iff simply_connected_def]\nclass SimplyConnectedSpace (X : Type*) [TopologicalSpace X] : Prop where\n  equiv_unit : Nonempty (FundamentalGroupoid X ≌ Discrete Unit)\n\n"}
{"name":"simply_connected_iff_unique_homotopic","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Iff (SimplyConnectedSpace X) (And (Nonempty X) (∀ (x y : X), Nonempty (Unique (Path.Homotopic.Quotient x y))))","decl":"theorem simply_connected_iff_unique_homotopic (X : Type*) [TopologicalSpace X] :\n    SimplyConnectedSpace X ↔\n      Nonempty X ∧ ∀ x y : X, Nonempty (Unique (Path.Homotopic.Quotient x y)) := by\n  simp only [simply_connected_def, equiv_punit_iff_unique,\n    FundamentalGroupoid.nonempty_iff X, and_congr_right_iff, Nonempty.forall]\n  intros\n  exact ⟨fun h _ _ => h _ _, fun h _ _ => h _ _⟩\n\n"}
{"name":"SimplyConnectedSpace.instSubsingletonQuotient","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx y : X\n⊢ Subsingleton (Path.Homotopic.Quotient x y)","decl":"instance (x y : X) : Subsingleton (Path.Homotopic.Quotient x y) :=\n  @Unique.instSubsingleton _ (Nonempty.some (by\n    rw [simply_connected_iff_unique_homotopic] at *; tauto))\n\n"}
{"name":"SimplyConnectedSpace.instPathConnectedSpace","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SimplyConnectedSpace X\n⊢ PathConnectedSpace X","decl":"instance (priority := 100) : PathConnectedSpace X :=\n  let unique_homotopic := (simply_connected_iff_unique_homotopic X).mp inferInstance\n  { nonempty := unique_homotopic.1\n    joined := fun x y => ⟨(unique_homotopic.2 x y).some.default.out⟩ }\n\n"}
{"name":"SimplyConnectedSpace.paths_homotopic","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : SimplyConnectedSpace X\nx y : X\np₁ p₂ : Path x y\n⊢ p₁.Homotopic p₂","decl":"/-- In a simply connected space, any two paths are homotopic -/\ntheorem paths_homotopic {x y : X} (p₁ p₂ : Path x y) : Path.Homotopic p₁ p₂ :=\n  Quotient.eq.mp (@Subsingleton.elim (Path.Homotopic.Quotient x y) _ _ _)\n\n"}
{"name":"SimplyConnectedSpace.ofContractible","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"Y : Type u\ninst✝¹ : TopologicalSpace Y\ninst✝ : ContractibleSpace Y\n⊢ SimplyConnectedSpace Y","decl":"instance (priority := 100) ofContractible (Y : Type u) [TopologicalSpace Y] [ContractibleSpace Y] :\n    SimplyConnectedSpace Y where\n  equiv_unit :=\n    let H : TopCat.of Y ≃ₕ TopCat.of PUnit.{u+1} := (ContractibleSpace.hequiv Y PUnit.{u+1}).some\n    ⟨(FundamentalGroupoidFunctor.equivOfHomotopyEquiv H).trans\n      FundamentalGroupoid.punitEquivDiscretePUnit⟩\n\n"}
{"name":"simply_connected_iff_paths_homotopic","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"Y : Type u_1\ninst✝ : TopologicalSpace Y\n⊢ Iff (SimplyConnectedSpace Y) (And (PathConnectedSpace Y) (∀ (x y : Y), Subsingleton (Path.Homotopic.Quotient x y)))","decl":"/-- A space is simply connected iff it is path connected, and there is at most one path\n  up to homotopy between any two points. -/\ntheorem simply_connected_iff_paths_homotopic {Y : Type*} [TopologicalSpace Y] :\n    SimplyConnectedSpace Y ↔\n      PathConnectedSpace Y ∧ ∀ x y : Y, Subsingleton (Path.Homotopic.Quotient x y) :=\n  ⟨by intro; constructor <;> infer_instance, fun h => by\n    cases h; rw [simply_connected_iff_unique_homotopic]\n    exact ⟨inferInstance, fun x y => ⟨uniqueOfSubsingleton ⟦PathConnectedSpace.somePath x y⟧⟩⟩⟩\n\n"}
{"name":"simply_connected_iff_paths_homotopic'","module":"Mathlib.AlgebraicTopology.FundamentalGroupoid.SimplyConnected","initialProofState":"Y : Type u_1\ninst✝ : TopologicalSpace Y\n⊢ Iff (SimplyConnectedSpace Y) (And (PathConnectedSpace Y) (∀ {x y : Y} (p₁ p₂ : Path x y), p₁.Homotopic p₂))","decl":"/-- Another version of `simply_connected_iff_paths_homotopic` -/\ntheorem simply_connected_iff_paths_homotopic' {Y : Type*} [TopologicalSpace Y] :\n    SimplyConnectedSpace Y ↔\n      PathConnectedSpace Y ∧ ∀ {x y : Y} (p₁ p₂ : Path x y), Path.Homotopic p₁ p₂ := by\n  convert simply_connected_iff_paths_homotopic (Y := Y)\n  simp [Path.Homotopic.Quotient, Setoid.eq_top_iff]; rfl\n"}
