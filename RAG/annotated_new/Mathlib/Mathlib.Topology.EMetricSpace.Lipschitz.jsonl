{"name":"lipschitzOnWith_empty","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\n⊢ LipschitzOnWith K f EmptyCollection.emptyCollection","decl":"/-- Every function is Lipschitz on the empty set (with any Lipschitz constant). -/\n@[simp]\ntheorem lipschitzOnWith_empty (K : ℝ≥0) (f : α → β) : LipschitzOnWith K f ∅ := fun _ => False.elim\n\n"}
{"name":"locallyLipschitzOn_empty","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\n⊢ LocallyLipschitzOn EmptyCollection.emptyCollection f","decl":"@[simp] lemma locallyLipschitzOn_empty (f : α → β) : LocallyLipschitzOn ∅ f := fun _ ↦ False.elim\n\n"}
{"name":"LipschitzOnWith.mono","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns t : Set α\nf : α → β\nhf : LipschitzOnWith K f t\nh : HasSubset.Subset s t\n⊢ LipschitzOnWith K f s","decl":"/-- Being Lipschitz on a set is monotone w.r.t. that set. -/\ntheorem LipschitzOnWith.mono (hf : LipschitzOnWith K f t) (h : s ⊆ t) : LipschitzOnWith K f s :=\n  fun _x x_in _y y_in => hf (h x_in) (h y_in)\n\n"}
{"name":"LocallyLipschitzOn.mono","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ns t : Set α\nf : α → β\nhf : LocallyLipschitzOn t f\nh : HasSubset.Subset s t\n⊢ LocallyLipschitzOn s f","decl":"lemma LocallyLipschitzOn.mono (hf : LocallyLipschitzOn t f) (h : s ⊆ t) : LocallyLipschitzOn s f :=\n  fun x hx ↦ by obtain ⟨K, u, hu, hfu⟩ := hf (h hx); exact ⟨K, u, nhdsWithin_mono _ h hu, hfu⟩\n\n"}
{"name":"lipschitzOnWith_univ","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\n⊢ Iff (LipschitzOnWith K f Set.univ) (LipschitzWith K f)","decl":"/-- `f` is Lipschitz iff it is Lipschitz on the entire space. -/\n@[simp] lemma lipschitzOnWith_univ : LipschitzOnWith K f univ ↔ LipschitzWith K f := by\n  simp [LipschitzOnWith, LipschitzWith]\n\n"}
{"name":"locallyLipschitzOn_univ","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\n⊢ Iff (LocallyLipschitzOn Set.univ f) (LocallyLipschitz f)","decl":"@[simp] lemma locallyLipschitzOn_univ : LocallyLipschitzOn univ f ↔ LocallyLipschitz f := by\n  simp [LocallyLipschitzOn, LocallyLipschitz]\n\n"}
{"name":"LocallyLipschitz.locallyLipschitzOn","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ns : Set α\nf : α → β\nh : LocallyLipschitz f\n⊢ LocallyLipschitzOn s f","decl":"protected lemma LocallyLipschitz.locallyLipschitzOn (h : LocallyLipschitz f) :\n    LocallyLipschitzOn s f := (locallyLipschitzOn_univ.2 h).mono s.subset_univ\n\n"}
{"name":"lipschitzOnWith_iff_restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\n⊢ Iff (LipschitzOnWith K f s) (LipschitzWith K (s.restrict f))","decl":"theorem lipschitzOnWith_iff_restrict : LipschitzOnWith K f s ↔ LipschitzWith K (s.restrict f) := by\n  simp [LipschitzOnWith, LipschitzWith]\n\n"}
{"name":"lipschitzOnWith_restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nt : Set ↑s\n⊢ Iff (LipschitzOnWith K (s.restrict f) t) (LipschitzOnWith K f (Inter.inter s (Set.image Subtype.val t)))","decl":"lemma lipschitzOnWith_restrict {t : Set s} :\n    LipschitzOnWith K (s.restrict f) t ↔ LipschitzOnWith K f (s ∩ Subtype.val '' t) := by\n  simp [LipschitzOnWith, LipschitzWith]\n\n"}
{"name":"locallyLipschitzOn_iff_restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ns : Set α\nf : α → β\n⊢ Iff (LocallyLipschitzOn s f) (LocallyLipschitz (s.restrict f))","decl":"lemma locallyLipschitzOn_iff_restrict :\n    LocallyLipschitzOn s f ↔ LocallyLipschitz (s.restrict f) := by\n  simp only [LocallyLipschitzOn, LocallyLipschitz, SetCoe.forall', restrict_apply,\n    Subtype.edist_mk_mk, ← lipschitzOnWith_iff_restrict, lipschitzOnWith_restrict,\n    nhds_subtype_eq_comap_nhdsWithin, mem_comap]\n  congr! with x K\n  constructor\n  · rintro ⟨t, ht, hft⟩\n    exact ⟨_, ⟨t, ht, Subset.rfl⟩, hft.mono <| inter_subset_right.trans <| image_preimage_subset ..⟩\n  · rintro ⟨t, ⟨u, hu, hut⟩, hft⟩\n    exact ⟨s ∩ u, Filter.inter_mem self_mem_nhdsWithin hu,\n      hft.mono fun x hx ↦ ⟨hx.1, ⟨x, hx.1⟩, hut hx.2, rfl⟩⟩\n\n"}
{"name":"LipschitzOnWith.to_restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\na✝ : LipschitzOnWith K f s\n⊢ LipschitzWith K (s.restrict f)","decl":"alias ⟨LipschitzOnWith.to_restrict, _⟩ := lipschitzOnWith_iff_restrict\n"}
{"name":"LocallyLipschitzOn.restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\ns : Set α\nf : α → β\na✝ : LocallyLipschitzOn s f\n⊢ LocallyLipschitz (s.restrict f)","decl":"alias ⟨LocallyLipschitzOn.restrict, _⟩ := locallyLipschitzOn_iff_restrict\n\n"}
{"name":"Set.MapsTo.lipschitzOnWith_iff_restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nt : Set β\nh : Set.MapsTo f s t\n⊢ Iff (LipschitzOnWith K f s) (LipschitzWith K (Set.MapsTo.restrict f s t h))","decl":"lemma Set.MapsTo.lipschitzOnWith_iff_restrict {t : Set β} (h : MapsTo f s t) :\n    LipschitzOnWith K f s ↔ LipschitzWith K (h.restrict f s t) :=\n  _root_.lipschitzOnWith_iff_restrict\n\n"}
{"name":"LipschitzOnWith.to_restrict_mapsTo","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nt : Set β\nh : Set.MapsTo f s t\na✝ : LipschitzOnWith K f s\n⊢ LipschitzWith K (Set.MapsTo.restrict f s t h)","decl":"alias ⟨LipschitzOnWith.to_restrict_mapsTo, _⟩ := Set.MapsTo.lipschitzOnWith_iff_restrict\n\n"}
{"name":"LipschitzWith.lipschitzOnWith","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\ns : Set α\nh : LipschitzWith K f\n⊢ LipschitzOnWith K f s","decl":"protected theorem lipschitzOnWith (h : LipschitzWith K f) : LipschitzOnWith K f s :=\n  fun x _ y _ => h x y\n\n"}
{"name":"LipschitzWith.edist_le_mul","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nh : LipschitzWith K f\nx y : α\n⊢ LE.le (EDist.edist (f x) (f y)) (HMul.hMul (↑K) (EDist.edist x y))","decl":"theorem edist_le_mul (h : LipschitzWith K f) (x y : α) : edist (f x) (f y) ≤ K * edist x y :=\n  h x y\n\n"}
{"name":"LipschitzWith.edist_le_mul_of_le","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nx y : α\nr : ENNReal\nh : LipschitzWith K f\nhr : LE.le (EDist.edist x y) r\n⊢ LE.le (EDist.edist (f x) (f y)) (HMul.hMul (↑K) r)","decl":"theorem edist_le_mul_of_le (h : LipschitzWith K f) (hr : edist x y ≤ r) :\n    edist (f x) (f y) ≤ K * r :=\n  (h x y).trans <| mul_left_mono hr\n\n"}
{"name":"LipschitzWith.edist_lt_mul_of_lt","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nx y : α\nr : ENNReal\nh : LipschitzWith K f\nhK : Ne K 0\nhr : LT.lt (EDist.edist x y) r\n⊢ LT.lt (EDist.edist (f x) (f y)) (HMul.hMul (↑K) r)","decl":"theorem edist_lt_mul_of_lt (h : LipschitzWith K f) (hK : K ≠ 0) (hr : edist x y < r) :\n    edist (f x) (f y) < K * r :=\n  (h x y).trans_lt <| (ENNReal.mul_lt_mul_left (ENNReal.coe_ne_zero.2 hK) ENNReal.coe_ne_top).2 hr\n\n"}
{"name":"LipschitzWith.mapsTo_emetric_closedBall","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nh : LipschitzWith K f\nx : α\nr : ENNReal\n⊢ Set.MapsTo f (EMetric.closedBall x r) (EMetric.closedBall (f x) (HMul.hMul (↑K) r))","decl":"theorem mapsTo_emetric_closedBall (h : LipschitzWith K f) (x : α) (r : ℝ≥0∞) :\n    MapsTo f (closedBall x r) (closedBall (f x) (K * r)) := fun _y hy => h.edist_le_mul_of_le hy\n\n"}
{"name":"LipschitzWith.mapsTo_emetric_ball","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nh : LipschitzWith K f\nhK : Ne K 0\nx : α\nr : ENNReal\n⊢ Set.MapsTo f (EMetric.ball x r) (EMetric.ball (f x) (HMul.hMul (↑K) r))","decl":"theorem mapsTo_emetric_ball (h : LipschitzWith K f) (hK : K ≠ 0) (x : α) (r : ℝ≥0∞) :\n    MapsTo f (ball x r) (ball (f x) (K * r)) := fun _y hy => h.edist_lt_mul_of_lt hK hy\n\n"}
{"name":"LipschitzWith.edist_lt_top","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\nx y : α\nh : Ne (EDist.edist x y) Top.top\n⊢ LT.lt (EDist.edist (f x) (f y)) Top.top","decl":"theorem edist_lt_top (hf : LipschitzWith K f) {x y : α} (h : edist x y ≠ ⊤) :\n    edist (f x) (f y) < ⊤ :=\n  (hf x y).trans_lt <| ENNReal.mul_lt_top ENNReal.coe_lt_top h.lt_top\n\n"}
{"name":"LipschitzWith.mul_edist_le","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nh : LipschitzWith K f\nx y : α\n⊢ LE.le (HMul.hMul (Inv.inv ↑K) (EDist.edist (f x) (f y))) (EDist.edist x y)","decl":"theorem mul_edist_le (h : LipschitzWith K f) (x y : α) :\n    (K⁻¹ : ℝ≥0∞) * edist (f x) (f y) ≤ edist x y := by\n  rw [mul_comm, ← div_eq_mul_inv]\n  exact ENNReal.div_le_of_le_mul' (h x y)\n\n"}
{"name":"LipschitzWith.of_edist_le","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nh : ∀ (x y : α), LE.le (EDist.edist (f x) (f y)) (EDist.edist x y)\n⊢ LipschitzWith 1 f","decl":"protected theorem of_edist_le (h : ∀ x y, edist (f x) (f y) ≤ edist x y) : LipschitzWith 1 f :=\n  fun x y => by simp only [ENNReal.coe_one, one_mul, h]\n\n"}
{"name":"LipschitzWith.weaken","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\nK' : NNReal\nh : LE.le K K'\n⊢ LipschitzWith K' f","decl":"protected theorem weaken (hf : LipschitzWith K f) {K' : ℝ≥0} (h : K ≤ K') : LipschitzWith K' f :=\n  fun x y => le_trans (hf x y) <| mul_right_mono (ENNReal.coe_le_coe.2 h)\n\n"}
{"name":"LipschitzWith.ediam_image_le","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\ns : Set α\n⊢ LE.le (EMetric.diam (Set.image f s)) (HMul.hMul (↑K) (EMetric.diam s))","decl":"theorem ediam_image_le (hf : LipschitzWith K f) (s : Set α) :\n    EMetric.diam (f '' s) ≤ K * EMetric.diam s := by\n  apply EMetric.diam_le\n  rintro _ ⟨x, hx, rfl⟩ _ ⟨y, hy, rfl⟩\n  exact hf.edist_le_mul_of_le (EMetric.edist_le_diam_of_mem hx hy)\n\n"}
{"name":"LipschitzWith.edist_lt_of_edist_lt_div","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\nx y : α\nd : ENNReal\nh : LT.lt (EDist.edist x y) (HDiv.hDiv d ↑K)\n⊢ LT.lt (EDist.edist (f x) (f y)) d","decl":"theorem edist_lt_of_edist_lt_div (hf : LipschitzWith K f) {x y : α} {d : ℝ≥0∞}\n    (h : edist x y < d / K) : edist (f x) (f y) < d :=\n  calc\n    edist (f x) (f y) ≤ K * edist x y := hf x y\n    _ < d := ENNReal.mul_lt_of_lt_div' h\n\n"}
{"name":"LipschitzWith.uniformContinuous","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\n⊢ UniformContinuous f","decl":"/-- A Lipschitz function is uniformly continuous. -/\nprotected theorem uniformContinuous (hf : LipschitzWith K f) : UniformContinuous f :=\n  EMetric.uniformContinuous_iff.2 fun ε εpos =>\n    ⟨ε / K, ENNReal.div_pos_iff.2 ⟨ne_of_gt εpos, ENNReal.coe_ne_top⟩, hf.edist_lt_of_edist_lt_div⟩\n\n"}
{"name":"LipschitzWith.continuous","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\n⊢ Continuous f","decl":"/-- A Lipschitz function is continuous. -/\nprotected theorem continuous (hf : LipschitzWith K f) : Continuous f :=\n  hf.uniformContinuous.continuous\n\n"}
{"name":"LipschitzWith.const","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nb : β\n⊢ LipschitzWith 0 fun x => b","decl":"/-- Constant functions are Lipschitz (with any constant). -/\nprotected theorem const (b : β) : LipschitzWith 0 fun _ : α => b := fun x y => by\n  simp only [edist_self, zero_le]\n\n"}
{"name":"LipschitzWith.const'","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nb : β\nK : NNReal\n⊢ LipschitzWith K fun x => b","decl":"protected theorem const' (b : β) {K : ℝ≥0} : LipschitzWith K fun _ : α => b := fun x y => by\n  simp only [edist_self, zero_le]\n\n"}
{"name":"LipschitzWith.id","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\n⊢ LipschitzWith 1 id","decl":"/-- The identity is 1-Lipschitz. -/\nprotected theorem id : LipschitzWith 1 (@id α) :=\n  LipschitzWith.of_edist_le fun _ _ => le_rfl\n\n"}
{"name":"LipschitzWith.subtype_val","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\ns : Set α\n⊢ LipschitzWith 1 Subtype.val","decl":"/-- The inclusion of a subset is 1-Lipschitz. -/\nprotected theorem subtype_val (s : Set α) : LipschitzWith 1 (Subtype.val : s → α) :=\n  LipschitzWith.of_edist_le fun _ _ => le_rfl\n\n"}
{"name":"LipschitzWith.subtype_mk","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\np : β → Prop\nhp : ∀ (x : α), p (f x)\n⊢ LipschitzWith K fun x => ⟨f x, ⋯⟩","decl":"theorem subtype_mk (hf : LipschitzWith K f) {p : β → Prop} (hp : ∀ x, p (f x)) :\n    LipschitzWith K (fun x => ⟨f x, hp x⟩ : α → { y // p y }) :=\n  hf\n\n"}
{"name":"LipschitzWith.eval","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"ι : Type x\nα : ι → Type u\ninst✝¹ : (i : ι) → PseudoEMetricSpace (α i)\ninst✝ : Fintype ι\ni : ι\n⊢ LipschitzWith 1 (Function.eval i)","decl":"protected theorem eval {α : ι → Type u} [∀ i, PseudoEMetricSpace (α i)] [Fintype ι] (i : ι) :\n    LipschitzWith 1 (Function.eval i : (∀ i, α i) → α i) :=\n  LipschitzWith.of_edist_le fun f g => by convert edist_le_pi_edist f g i\n\n"}
{"name":"LipschitzWith.restrict","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\nf : α → β\nhf : LipschitzWith K f\ns : Set α\n⊢ LipschitzWith K (s.restrict f)","decl":"/-- The restriction of a `K`-Lipschitz function is `K`-Lipschitz. -/\nprotected theorem restrict (hf : LipschitzWith K f) (s : Set α) : LipschitzWith K (s.restrict f) :=\n  fun x y => hf x y\n\n"}
{"name":"LipschitzWith.comp","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nKf Kg : NNReal\nf : β → γ\ng : α → β\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HMul.hMul Kf Kg) (Function.comp f g)","decl":"/-- The composition of Lipschitz functions is Lipschitz. -/\nprotected theorem comp {Kf Kg : ℝ≥0} {f : β → γ} {g : α → β} (hf : LipschitzWith Kf f)\n    (hg : LipschitzWith Kg g) : LipschitzWith (Kf * Kg) (f ∘ g) := fun x y =>\n  calc\n    edist (f (g x)) (f (g y)) ≤ Kf * edist (g x) (g y) := hf _ _\n    _ ≤ Kf * (Kg * edist x y) := mul_left_mono (hg _ _)\n    _ = (Kf * Kg : ℝ≥0) * edist x y := by rw [← mul_assoc, ENNReal.coe_mul]\n\n"}
{"name":"LipschitzWith.comp_lipschitzOnWith","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nKf Kg : NNReal\nf : β → γ\ng : α → β\ns : Set α\nhf : LipschitzWith Kf f\nhg : LipschitzOnWith Kg g s\n⊢ LipschitzOnWith (HMul.hMul Kf Kg) (Function.comp f g) s","decl":"theorem comp_lipschitzOnWith {Kf Kg : ℝ≥0} {f : β → γ} {g : α → β} {s : Set α}\n    (hf : LipschitzWith Kf f) (hg : LipschitzOnWith Kg g s) : LipschitzOnWith (Kf * Kg) (f ∘ g) s :=\n  lipschitzOnWith_iff_restrict.mpr <| hf.comp hg.to_restrict\n\n"}
{"name":"LipschitzWith.prod_fst","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\n⊢ LipschitzWith 1 Prod.fst","decl":"protected theorem prod_fst : LipschitzWith 1 (@Prod.fst α β) :=\n  LipschitzWith.of_edist_le fun _ _ => le_max_left _ _\n\n"}
{"name":"LipschitzWith.prod_snd","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\n⊢ LipschitzWith 1 Prod.snd","decl":"protected theorem prod_snd : LipschitzWith 1 (@Prod.snd α β) :=\n  LipschitzWith.of_edist_le fun _ _ => le_max_right _ _\n\n"}
{"name":"LipschitzWith.prod","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nf : α → β\nKf : NNReal\nhf : LipschitzWith Kf f\ng : α → γ\nKg : NNReal\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (Max.max Kf Kg) fun x => { fst := f x, snd := g x }","decl":"/-- If `f` and `g` are Lipschitz functions, so is the induced map `f × g` to the product type. -/\nprotected theorem prod {f : α → β} {Kf : ℝ≥0} (hf : LipschitzWith Kf f) {g : α → γ} {Kg : ℝ≥0}\n    (hg : LipschitzWith Kg g) : LipschitzWith (max Kf Kg) fun x => (f x, g x) := by\n  intro x y\n  rw [ENNReal.coe_mono.map_max, Prod.edist_eq, max_mul]\n  exact max_le_max (hf x y) (hg x y)\n\n"}
{"name":"LipschitzWith.prod_mk_left","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\na : α\n⊢ LipschitzWith 1 (Prod.mk a)","decl":"protected theorem prod_mk_left (a : α) : LipschitzWith 1 (Prod.mk a : β → α × β) := by\n  simpa only [max_eq_right zero_le_one] using (LipschitzWith.const a).prod LipschitzWith.id\n\n"}
{"name":"LipschitzWith.prod_mk_right","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nb : β\n⊢ LipschitzWith 1 fun a => { fst := a, snd := b }","decl":"protected theorem prod_mk_right (b : β) : LipschitzWith 1 fun a : α => (a, b) := by\n  simpa only [max_eq_left zero_le_one] using LipschitzWith.id.prod (LipschitzWith.const b)\n\n"}
{"name":"LipschitzWith.uncurry","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nf : α → β → γ\nKα Kβ : NNReal\nhα : ∀ (b : β), LipschitzWith Kα fun a => f a b\nhβ : ∀ (a : α), LipschitzWith Kβ (f a)\n⊢ LipschitzWith (HAdd.hAdd Kα Kβ) (Function.uncurry f)","decl":"protected theorem uncurry {f : α → β → γ} {Kα Kβ : ℝ≥0} (hα : ∀ b, LipschitzWith Kα fun a => f a b)\n    (hβ : ∀ a, LipschitzWith Kβ (f a)) : LipschitzWith (Kα + Kβ) (Function.uncurry f) := by\n  rintro ⟨a₁, b₁⟩ ⟨a₂, b₂⟩\n  simp only [Function.uncurry, ENNReal.coe_add, add_mul]\n  apply le_trans (edist_triangle _ (f a₂ b₁) _)\n  exact\n    add_le_add (le_trans (hα _ _ _) <| mul_left_mono <| le_max_left _ _)\n      (le_trans (hβ _ _ _) <| mul_left_mono <| le_max_right _ _)\n\n"}
{"name":"LipschitzWith.iterate","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → α\nhf : LipschitzWith K f\nn : Nat\n⊢ LipschitzWith (HPow.hPow K n) (Nat.iterate f n)","decl":"/-- Iterates of a Lipschitz function are Lipschitz. -/\nprotected theorem iterate {f : α → α} (hf : LipschitzWith K f) : ∀ n, LipschitzWith (K ^ n) f^[n]\n  | 0 => by simpa only [pow_zero] using LipschitzWith.id\n  | n + 1 => by rw [pow_succ]; exact (LipschitzWith.iterate hf n).comp hf\n\n"}
{"name":"LipschitzWith.edist_iterate_succ_le_geometric","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nK : NNReal\nf : α → α\nhf : LipschitzWith K f\nx : α\nn : Nat\n⊢ LE.le (EDist.edist (Nat.iterate f n x) (Nat.iterate f (HAdd.hAdd n 1) x)) (HMul.hMul (EDist.edist x (f x)) (HPow.hPow (↑K) n))","decl":"theorem edist_iterate_succ_le_geometric {f : α → α} (hf : LipschitzWith K f) (x n) :\n    edist (f^[n] x) (f^[n + 1] x) ≤ edist x (f x) * (K : ℝ≥0∞) ^ n := by\n  rw [iterate_succ, mul_comm]\n  simpa only [ENNReal.coe_pow] using (hf.iterate n) x (f x)\n\n"}
{"name":"LipschitzWith.mul_end","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nf g : Function.End α\nKf Kg : NNReal\nhf : LipschitzWith Kf f\nhg : LipschitzWith Kg g\n⊢ LipschitzWith (HMul.hMul Kf Kg) (HMul.hMul f g)","decl":"protected theorem mul_end {f g : Function.End α} {Kf Kg} (hf : LipschitzWith Kf f)\n    (hg : LipschitzWith Kg g) : LipschitzWith (Kf * Kg) (f * g : Function.End α) :=\n  hf.comp hg\n\n"}
{"name":"LipschitzWith.list_prod","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nι : Type x\ninst✝ : PseudoEMetricSpace α\nf : ι → Function.End α\nK : ι → NNReal\nh : ∀ (i : ι), LipschitzWith (K i) (f i)\nl : List ι\n⊢ LipschitzWith (List.map K l).prod (List.map f l).prod","decl":"/-- The product of a list of Lipschitz continuous endomorphisms is a Lipschitz continuous\nendomorphism. -/\nprotected theorem list_prod (f : ι → Function.End α) (K : ι → ℝ≥0)\n    (h : ∀ i, LipschitzWith (K i) (f i)) : ∀ l : List ι, LipschitzWith (l.map K).prod (l.map f).prod\n  | [] => by simpa using LipschitzWith.id\n  | i::l => by\n    simp only [List.map_cons, List.prod_cons]\n    exact (h i).mul_end (LipschitzWith.list_prod f K h l)\n\n"}
{"name":"LipschitzWith.pow_end","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nf : Function.End α\nK : NNReal\nh : LipschitzWith K f\nn : Nat\n⊢ LipschitzWith (HPow.hPow K n) (HPow.hPow f n)","decl":"protected theorem pow_end {f : Function.End α} {K} (h : LipschitzWith K f) :\n    ∀ n : ℕ, LipschitzWith (K ^ n) (f ^ n : Function.End α)\n  | 0 => by simpa only [pow_zero] using LipschitzWith.id\n  | n + 1 => by\n    rw [pow_succ, pow_succ]\n    exact (LipschitzWith.pow_end h n).mul_end h\n\n"}
{"name":"LipschitzOnWith.uniformContinuousOn","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nhf : LipschitzOnWith K f s\n⊢ UniformContinuousOn f s","decl":"protected theorem uniformContinuousOn (hf : LipschitzOnWith K f s) : UniformContinuousOn f s :=\n  uniformContinuousOn_iff_restrict.mpr hf.to_restrict.uniformContinuous\n\n"}
{"name":"LipschitzOnWith.continuousOn","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nhf : LipschitzOnWith K f s\n⊢ ContinuousOn f s","decl":"protected theorem continuousOn (hf : LipschitzOnWith K f s) : ContinuousOn f s :=\n  hf.uniformContinuousOn.continuousOn\n\n"}
{"name":"LipschitzOnWith.edist_le_mul_of_le","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nh : LipschitzOnWith K f s\nx y : α\nhx : Membership.mem s x\nhy : Membership.mem s y\nr : ENNReal\nhr : LE.le (EDist.edist x y) r\n⊢ LE.le (EDist.edist (f x) (f y)) (HMul.hMul (↑K) r)","decl":"theorem edist_le_mul_of_le (h : LipschitzOnWith K f s) {x y : α} (hx : x ∈ s) (hy : y ∈ s)\n    {r : ℝ≥0∞} (hr : edist x y ≤ r) :\n    edist (f x) (f y) ≤ K * r :=\n  (h hx hy).trans <| mul_left_mono hr\n\n"}
{"name":"LipschitzOnWith.edist_lt_of_edist_lt_div","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nK : NNReal\ns : Set α\nf : α → β\nhf : LipschitzOnWith K f s\nx y : α\nhx : Membership.mem s x\nhy : Membership.mem s y\nd : ENNReal\nhd : LT.lt (EDist.edist x y) (HDiv.hDiv d ↑K)\n⊢ LT.lt (EDist.edist (f x) (f y)) d","decl":"theorem edist_lt_of_edist_lt_div (hf : LipschitzOnWith K f s) {x y : α} (hx : x ∈ s) (hy : y ∈ s)\n    {d : ℝ≥0∞} (hd : edist x y < d / K) : edist (f x) (f y) < d :=\n   hf.to_restrict.edist_lt_of_edist_lt_div <|\n    show edist (⟨x, hx⟩ : s) ⟨y, hy⟩ < d / K from hd\n\n"}
{"name":"LipschitzOnWith.comp","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nK : NNReal\ns : Set α\nf : α → β\ng : β → γ\nt : Set β\nKg : NNReal\nhg : LipschitzOnWith Kg g t\nhf : LipschitzOnWith K f s\nhmaps : Set.MapsTo f s t\n⊢ LipschitzOnWith (HMul.hMul Kg K) (Function.comp g f) s","decl":"protected theorem comp {g : β → γ} {t : Set β} {Kg : ℝ≥0} (hg : LipschitzOnWith Kg g t)\n    (hf : LipschitzOnWith K f s) (hmaps : MapsTo f s t) : LipschitzOnWith (Kg * K) (g ∘ f) s :=\n  lipschitzOnWith_iff_restrict.mpr <| hg.to_restrict.comp (hf.to_restrict_mapsTo hmaps)\n\n"}
{"name":"LipschitzOnWith.prod","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\ns : Set α\nf : α → β\ng : α → γ\nKf Kg : NNReal\nhf : LipschitzOnWith Kf f s\nhg : LipschitzOnWith Kg g s\n⊢ LipschitzOnWith (Max.max Kf Kg) (fun x => { fst := f x, snd := g x }) s","decl":"/-- If `f` and `g` are Lipschitz on `s`, so is the induced map `f × g` to the product type. -/\nprotected theorem prod {g : α → γ} {Kf Kg : ℝ≥0} (hf : LipschitzOnWith Kf f s)\n    (hg : LipschitzOnWith Kg g s) : LipschitzOnWith (max Kf Kg) (fun x => (f x, g x)) s := by\n  intro _ hx _ hy\n  rw [ENNReal.coe_mono.map_max, Prod.edist_eq, max_mul]\n  exact max_le_max (hf hx hy) (hg hx hy)\n\n"}
{"name":"LipschitzOnWith.ediam_image2_le","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nf : α → β → γ\nK₁ K₂ : NNReal\ns : Set α\nt : Set β\nhf₁ : ∀ (b : β), Membership.mem t b → LipschitzOnWith K₁ (fun x => f x b) s\nhf₂ : ∀ (a : α), Membership.mem s a → LipschitzOnWith K₂ (f a) t\n⊢ LE.le (EMetric.diam (Set.image2 f s t)) (HAdd.hAdd (HMul.hMul (↑K₁) (EMetric.diam s)) (HMul.hMul (↑K₂) (EMetric.diam t)))","decl":"theorem ediam_image2_le (f : α → β → γ) {K₁ K₂ : ℝ≥0} (s : Set α) (t : Set β)\n    (hf₁ : ∀ b ∈ t, LipschitzOnWith K₁ (f · b) s) (hf₂ : ∀ a ∈ s, LipschitzOnWith K₂ (f a) t) :\n    EMetric.diam (Set.image2 f s t) ≤ ↑K₁ * EMetric.diam s + ↑K₂ * EMetric.diam t := by\n  simp only [EMetric.diam_le_iff, forall_mem_image2]\n  intro a₁ ha₁ b₁ hb₁ a₂ ha₂ b₂ hb₂\n  refine (edist_triangle _ (f a₂ b₁) _).trans ?_\n  exact\n    add_le_add\n      ((hf₁ b₁ hb₁ ha₁ ha₂).trans <| mul_left_mono <| EMetric.edist_le_diam_of_mem ha₁ ha₂)\n      ((hf₂ a₂ ha₂ hb₁ hb₂).trans <| mul_left_mono <| EMetric.edist_le_diam_of_mem hb₁ hb₂)\n\n"}
{"name":"LipschitzWith.locallyLipschitz","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nK : NNReal\nhf : LipschitzWith K f\n⊢ LocallyLipschitz f","decl":"/-- A Lipschitz function is locally Lipschitz. -/\nprotected lemma _root_.LipschitzWith.locallyLipschitz {K : ℝ≥0} (hf : LipschitzWith K f) :\n    LocallyLipschitz f :=\n  fun _ ↦ ⟨K, univ, Filter.univ_mem, lipschitzOnWith_univ.mpr hf⟩\n\n"}
{"name":"LocallyLipschitz.id","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\n⊢ LocallyLipschitz id","decl":"/-- The identity function is locally Lipschitz. -/\nprotected lemma id : LocallyLipschitz (@id α) := LipschitzWith.id.locallyLipschitz\n\n"}
{"name":"LocallyLipschitz.const","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nb : β\n⊢ LocallyLipschitz fun x => b","decl":"/-- Constant functions are locally Lipschitz. -/\nprotected lemma const (b : β) : LocallyLipschitz (fun _ : α ↦ b) :=\n  (LipschitzWith.const b).locallyLipschitz\n\n"}
{"name":"LocallyLipschitz.continuous","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\nhf : LocallyLipschitz f\n⊢ Continuous f","decl":"/-- A locally Lipschitz function is continuous. (The converse is false: for example,\n$x ↦ \\sqrt{x}$ is continuous, but not locally Lipschitz at 0.) -/\nprotected theorem continuous {f : α → β} (hf : LocallyLipschitz f) : Continuous f := by\n  rw [continuous_iff_continuousAt]\n  intro x\n  rcases (hf x) with ⟨K, t, ht, hK⟩\n  exact (hK.continuousOn).continuousAt ht\n\n"}
{"name":"LocallyLipschitz.comp","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nf : β → γ\ng : α → β\nhf : LocallyLipschitz f\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz (Function.comp f g)","decl":"/-- The composition of locally Lipschitz functions is locally Lipschitz. --/\nprotected lemma comp  {f : β → γ} {g : α → β}\n    (hf : LocallyLipschitz f) (hg : LocallyLipschitz g) : LocallyLipschitz (f ∘ g) := by\n  intro x\n  -- g is Lipschitz on t ∋ x, f is Lipschitz on u ∋ g(x)\n  rcases hg x with ⟨Kg, t, ht, hgL⟩\n  rcases hf (g x) with ⟨Kf, u, hu, hfL⟩\n  refine ⟨Kf * Kg, t ∩ g⁻¹' u, inter_mem ht (hg.continuous.continuousAt hu), ?_⟩\n  exact hfL.comp (hgL.mono inter_subset_left)\n    ((mapsTo_preimage g u).mono_left inter_subset_right)\n\n"}
{"name":"LocallyLipschitz.prod","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : PseudoEMetricSpace β\ninst✝ : PseudoEMetricSpace γ\nf : α → β\nhf : LocallyLipschitz f\ng : α → γ\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz fun x => { fst := f x, snd := g x }","decl":"/-- If `f` and `g` are locally Lipschitz, so is the induced map `f × g` to the product type. -/\nprotected lemma prod {f : α → β} (hf : LocallyLipschitz f) {g : α → γ} (hg : LocallyLipschitz g) :\n    LocallyLipschitz fun x => (f x, g x) := by\n  intro x\n  rcases hf x with ⟨Kf, t₁, h₁t, hfL⟩\n  rcases hg x with ⟨Kg, t₂, h₂t, hgL⟩\n  refine ⟨max Kf Kg, t₁ ∩ t₂, Filter.inter_mem h₁t h₂t, ?_⟩\n  exact (hfL.mono inter_subset_left).prod (hgL.mono inter_subset_right)\n\n"}
{"name":"LocallyLipschitz.prod_mk_left","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\na : α\n⊢ LocallyLipschitz (Prod.mk a)","decl":"protected theorem prod_mk_left (a : α) : LocallyLipschitz (Prod.mk a : β → α × β) :=\n  (LipschitzWith.prod_mk_left a).locallyLipschitz\n\n"}
{"name":"LocallyLipschitz.prod_mk_right","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nb : β\n⊢ LocallyLipschitz fun a => { fst := a, snd := b }","decl":"protected theorem prod_mk_right (b : β) : LocallyLipschitz (fun a : α => (a, b)) :=\n  (LipschitzWith.prod_mk_right b).locallyLipschitz\n\n"}
{"name":"LocallyLipschitz.iterate","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nf : α → α\nhf : LocallyLipschitz f\nn : Nat\n⊢ LocallyLipschitz (Nat.iterate f n)","decl":"protected theorem iterate {f : α → α} (hf : LocallyLipschitz f) : ∀ n, LocallyLipschitz f^[n]\n  | 0 => by simpa only [pow_zero] using LocallyLipschitz.id\n  | n + 1 => by rw [iterate_add, iterate_one]; exact (hf.iterate n).comp hf\n\n"}
{"name":"LocallyLipschitz.mul_end","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nf g : Function.End α\nhf : LocallyLipschitz f\nhg : LocallyLipschitz g\n⊢ LocallyLipschitz (HMul.hMul f g)","decl":"protected theorem mul_end {f g : Function.End α} (hf : LocallyLipschitz f)\n    (hg : LocallyLipschitz g) : LocallyLipschitz (f * g : Function.End α) := hf.comp hg\n\n"}
{"name":"LocallyLipschitz.pow_end","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\ninst✝ : PseudoEMetricSpace α\nf : Function.End α\nh : LocallyLipschitz f\nn : Nat\n⊢ LocallyLipschitz (HPow.hPow f n)","decl":"protected theorem pow_end {f : Function.End α} (h : LocallyLipschitz f) :\n    ∀ n : ℕ, LocallyLipschitz (f ^ n : Function.End α)\n  | 0 => by simpa only [pow_zero] using LocallyLipschitz.id\n  | n + 1 => by\n    rw [pow_succ]\n    exact (h.pow_end n).mul_end h\n\n"}
{"name":"LocallyLipschitzOn.continuousOn","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : PseudoEMetricSpace β\nf : α → β\ns : Set α\nhf : LocallyLipschitzOn s f\n⊢ ContinuousOn f s","decl":"protected lemma continuousOn (hf : LocallyLipschitzOn s f) : ContinuousOn f s :=\n  continuousOn_iff_continuous_restrict.2 hf.restrict.continuous\n\n"}
{"name":"continuousOn_prod_of_subset_closure_continuousOn_lipschitzOnWith","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : PseudoEMetricSpace γ\nf : Prod α β → γ\ns s' : Set α\nt : Set β\nhs' : HasSubset.Subset s' s\nhss' : HasSubset.Subset s (closure s')\nK : NNReal\nha : ∀ (a : α), Membership.mem s' a → ContinuousOn (fun y => f { fst := a, snd := y }) t\nhb : ∀ (b : β), Membership.mem t b → LipschitzOnWith K (fun x => f { fst := x, snd := b }) s\n⊢ ContinuousOn f (SProd.sprod s t)","decl":"/-- Consider a function `f : α × β → γ`. Suppose that it is continuous on each “vertical fiber”\n`{a} × t`, `a ∈ s`, and is Lipschitz continuous on each “horizontal fiber” `s × {b}`, `b ∈ t`\nwith the same Lipschitz constant `K`. Then it is continuous on `s × t`. Moreover, it suffices\nto require continuity on vertical fibers for `a` from a subset `s' ⊆ s` that is dense in `s`.\n\nThe actual statement uses (Lipschitz) continuity of `fun y ↦ f (a, y)` and `fun x ↦ f (x, b)`\ninstead of continuity of `f` on subsets of the product space. -/\ntheorem continuousOn_prod_of_subset_closure_continuousOn_lipschitzOnWith [PseudoEMetricSpace α]\n    [TopologicalSpace β] [PseudoEMetricSpace γ] (f : α × β → γ) {s s' : Set α} {t : Set β}\n    (hs' : s' ⊆ s) (hss' : s ⊆ closure s') (K : ℝ≥0)\n    (ha : ∀ a ∈ s', ContinuousOn (fun y => f (a, y)) t)\n    (hb : ∀ b ∈ t, LipschitzOnWith K (fun x => f (x, b)) s) : ContinuousOn f (s ×ˢ t) := by\n  rintro ⟨x, y⟩ ⟨hx : x ∈ s, hy : y ∈ t⟩\n  refine EMetric.nhds_basis_closed_eball.tendsto_right_iff.2 fun ε (ε0 : 0 < ε) => ?_\n  replace ε0 : 0 < ε / 2 := ENNReal.half_pos ε0.ne'\n  obtain ⟨δ, δpos, hδ⟩ : ∃ δ : ℝ≥0, 0 < δ ∧ (δ : ℝ≥0∞) * ↑(3 * K) < ε / 2 :=\n    ENNReal.exists_nnreal_pos_mul_lt ENNReal.coe_ne_top ε0.ne'\n  rw [← ENNReal.coe_pos] at δpos\n  rcases EMetric.mem_closure_iff.1 (hss' hx) δ δpos with ⟨x', hx', hxx'⟩\n  have A : s ∩ EMetric.ball x δ ∈ 𝓝[s] x :=\n    inter_mem_nhdsWithin _ (EMetric.ball_mem_nhds _ δpos)\n  have B : t ∩ { b | edist (f (x', b)) (f (x', y)) ≤ ε / 2 } ∈ 𝓝[t] y :=\n    inter_mem self_mem_nhdsWithin (ha x' hx' y hy (EMetric.closedBall_mem_nhds (f (x', y)) ε0))\n  filter_upwards [nhdsWithin_prod A B] with ⟨a, b⟩ ⟨⟨has, hax⟩, ⟨hbt, hby⟩⟩\n  calc\n    edist (f (a, b)) (f (x, y)) ≤ edist (f (a, b)) (f (x', b)) + edist (f (x', b)) (f (x', y)) +\n        edist (f (x', y)) (f (x, y)) := edist_triangle4 _ _ _ _\n    _ ≤ K * (δ + δ) + ε / 2 + K * δ := by\n      gcongr\n      · refine (hb b hbt).edist_le_mul_of_le has (hs' hx') ?_\n        exact (edist_triangle _ _ _).trans (add_le_add (le_of_lt hax) hxx'.le)\n      · exact hby\n      · exact (hb y hy).edist_le_mul_of_le (hs' hx') hx ((edist_comm _ _).trans_le hxx'.le)\n    _ = δ * ↑(3 * K) + ε / 2 := by push_cast; ring\n    _ ≤ ε / 2 + ε / 2 := by gcongr\n    _ = ε := ENNReal.add_halves _\n\n"}
{"name":"continuousOn_prod_of_continuousOn_lipschitzOnWith","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : PseudoEMetricSpace γ\nf : Prod α β → γ\ns : Set α\nt : Set β\nK : NNReal\nha : ∀ (a : α), Membership.mem s a → ContinuousOn (fun y => f { fst := a, snd := y }) t\nhb : ∀ (b : β), Membership.mem t b → LipschitzOnWith K (fun x => f { fst := x, snd := b }) s\n⊢ ContinuousOn f (SProd.sprod s t)","decl":"/-- Consider a function `f : α × β → γ`. Suppose that it is continuous on each “vertical fiber”\n`{a} × t`, `a ∈ s`, and is Lipschitz continuous on each “horizontal fiber” `s × {b}`, `b ∈ t`\nwith the same Lipschitz constant `K`. Then it is continuous on `s × t`.\n\nThe actual statement uses (Lipschitz) continuity of `fun y ↦ f (a, y)` and `fun x ↦ f (x, b)`\ninstead of continuity of `f` on subsets of the product space. -/\ntheorem continuousOn_prod_of_continuousOn_lipschitzOnWith [PseudoEMetricSpace α]\n    [TopologicalSpace β] [PseudoEMetricSpace γ] (f : α × β → γ) {s : Set α} {t : Set β} (K : ℝ≥0)\n    (ha : ∀ a ∈ s, ContinuousOn (fun y => f (a, y)) t)\n    (hb : ∀ b ∈ t, LipschitzOnWith K (fun x => f (x, b)) s) : ContinuousOn f (s ×ˢ t) :=\n  continuousOn_prod_of_subset_closure_continuousOn_lipschitzOnWith\n    f Subset.rfl subset_closure K ha hb\n\n"}
{"name":"continuous_prod_of_dense_continuous_lipschitzWith","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : PseudoEMetricSpace γ\nf : Prod α β → γ\nK : NNReal\ns : Set α\nhs : Dense s\nha : ∀ (a : α), Membership.mem s a → Continuous fun y => f { fst := a, snd := y }\nhb : ∀ (b : β), LipschitzWith K fun x => f { fst := x, snd := b }\n⊢ Continuous f","decl":"/-- Consider a function `f : α × β → γ`. Suppose that it is continuous on each “vertical section”\n`{a} × univ` for `a : α` from a dense set. Suppose that it is Lipschitz continuous on each\n“horizontal section” `univ × {b}`, `b : β` with the same Lipschitz constant `K`. Then it is\ncontinuous.\n\nThe actual statement uses (Lipschitz) continuity of `fun y ↦ f (a, y)` and `fun x ↦ f (x, b)`\ninstead of continuity of `f` on subsets of the product space. -/\ntheorem continuous_prod_of_dense_continuous_lipschitzWith [PseudoEMetricSpace α]\n    [TopologicalSpace β] [PseudoEMetricSpace γ] (f : α × β → γ) (K : ℝ≥0) {s : Set α}\n    (hs : Dense s) (ha : ∀ a ∈ s, Continuous fun y => f (a, y))\n    (hb : ∀ b, LipschitzWith K fun x => f (x, b)) : Continuous f := by\n  simp only [continuous_iff_continuousOn_univ, ← univ_prod_univ, ← lipschitzOnWith_univ] at *\n  exact continuousOn_prod_of_subset_closure_continuousOn_lipschitzOnWith f (subset_univ _)\n    hs.closure_eq.ge K ha fun b _ => hb b\n\n"}
{"name":"continuous_prod_of_continuous_lipschitzWith","module":"Mathlib.Topology.EMetricSpace.Lipschitz","initialProofState":"α : Type u\nβ : Type v\nγ : Type w\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : PseudoEMetricSpace γ\nf : Prod α β → γ\nK : NNReal\nha : ∀ (a : α), Continuous fun y => f { fst := a, snd := y }\nhb : ∀ (b : β), LipschitzWith K fun x => f { fst := x, snd := b }\n⊢ Continuous f","decl":"/-- Consider a function `f : α × β → γ`. Suppose that it is continuous on each “vertical section”\n`{a} × univ`, `a : α`, and is Lipschitz continuous on each “horizontal section”\n`univ × {b}`, `b : β` with the same Lipschitz constant `K`. Then it is continuous.\n\nThe actual statement uses (Lipschitz) continuity of `fun y ↦ f (a, y)` and `fun x ↦ f (x, b)`\ninstead of continuity of `f` on subsets of the product space. -/\ntheorem continuous_prod_of_continuous_lipschitzWith [PseudoEMetricSpace α] [TopologicalSpace β]\n    [PseudoEMetricSpace γ] (f : α × β → γ) (K : ℝ≥0) (ha : ∀ a, Continuous fun y => f (a, y))\n    (hb : ∀ b, LipschitzWith K fun x => f (x, b)) : Continuous f :=\n  continuous_prod_of_dense_continuous_lipschitzWith f K dense_univ (fun _ _ ↦ ha _) hb\n"}
