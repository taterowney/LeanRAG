{"name":"QuadraticMap.Isometry.mk.sizeOf_spec","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝¹⁰ : CommSemiring R\ninst✝⁹ : AddCommMonoid M₁\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : Module R M₁\ninst✝⁵ : Module R M₂\ninst✝⁴ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ninst✝³ : SizeOf R\ninst✝² : SizeOf M₁\ninst✝¹ : SizeOf M₂\ninst✝ : SizeOf N\ntoLinearMap : LinearMap (RingHom.id R) M₁ M₂\nmap_app' : ∀ (m : M₁), Eq (Q₂ (toLinearMap.toFun m)) (Q₁ m)\n⊢ Eq (SizeOf.sizeOf { toLinearMap := toLinearMap, map_app' := map_app' }) (HAdd.hAdd 1 (SizeOf.sizeOf toLinearMap))","decl":"/-- An isometry between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear map between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure Isometry (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N) extends M₁ →ₗ[R] M₂ where\n  /-- The quadratic form agrees across the map. -/\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.Isometry.map_app'","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nself : Q₁.Isometry Q₂\nm : M₁\n⊢ Eq (Q₂ (self.toFun m)) (Q₁ m)","decl":"/-- An isometry between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear map between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure Isometry (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N) extends M₁ →ₗ[R] M₂ where\n  /-- The quadratic form agrees across the map. -/\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.Isometry.mk.injEq","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ntoLinearMap✝ : LinearMap (RingHom.id R) M₁ M₂\nmap_app'✝ : ∀ (m : M₁), Eq (Q₂ (toLinearMap✝.toFun m)) (Q₁ m)\ntoLinearMap : LinearMap (RingHom.id R) M₁ M₂\nmap_app' : ∀ (m : M₁), Eq (Q₂ (toLinearMap.toFun m)) (Q₁ m)\n⊢ Eq (Eq { toLinearMap := toLinearMap✝, map_app' := map_app'✝ } { toLinearMap := toLinearMap, map_app' := map_app' }) (Eq toLinearMap✝ toLinearMap)","decl":"/-- An isometry between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear map between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure Isometry (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N) extends M₁ →ₗ[R] M₂ where\n  /-- The quadratic form agrees across the map. -/\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.Isometry.mk.inj","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ntoLinearMap✝ : LinearMap (RingHom.id R) M₁ M₂\nmap_app'✝ : ∀ (m : M₁), Eq (Q₂ (toLinearMap✝.toFun m)) (Q₁ m)\ntoLinearMap : LinearMap (RingHom.id R) M₁ M₂\nmap_app' : ∀ (m : M₁), Eq (Q₂ (toLinearMap.toFun m)) (Q₁ m)\nx✝ : Eq { toLinearMap := toLinearMap✝, map_app' := map_app'✝ } { toLinearMap := toLinearMap, map_app' := map_app' }\n⊢ Eq toLinearMap✝ toLinearMap","decl":"/-- An isometry between two quadratic spaces `M₁, Q₁` and `M₂, Q₂` over a ring `R`,\nis a linear map between `M₁` and `M₂` that commutes with the quadratic forms. -/\nstructure Isometry (Q₁ : QuadraticMap R M₁ N) (Q₂ : QuadraticMap R M₂ N) extends M₁ →ₗ[R] M₂ where\n  /-- The quadratic form agrees across the map. -/\n  map_app' : ∀ m, Q₂ (toFun m) = Q₁ m\n\n"}
{"name":"QuadraticMap.Isometry.instLinearMapClass","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\n⊢ LinearMapClass (Q₁.Isometry Q₂) R M₁ M₂","decl":"instance instLinearMapClass : LinearMapClass (Q₁ →qᵢ Q₂) R M₁ M₂ where\n  map_add f := f.toLinearMap.map_add\n  map_smulₛₗ f := f.toLinearMap.map_smul\n\n"}
{"name":"QuadraticMap.Isometry.toLinearMap_injective","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\n⊢ Function.Injective QuadraticMap.Isometry.toLinearMap","decl":"theorem toLinearMap_injective :\n    Function.Injective (Isometry.toLinearMap : (Q₁ →qᵢ Q₂) → M₁ →ₗ[R] M₂) := fun _f _g h =>\n  DFunLike.coe_injective (congr_arg DFunLike.coe h :)\n\n"}
{"name":"QuadraticMap.Isometry.ext_iff","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf g : Q₁.Isometry Q₂\n⊢ Iff (Eq f g) (∀ (x : M₁), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext ⦃f g : Q₁ →qᵢ Q₂⦄ (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"QuadraticMap.Isometry.ext","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf g : Q₁.Isometry Q₂\nh : ∀ (x : M₁), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext ⦃f g : Q₁ →qᵢ Q₂⦄ (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"QuadraticMap.Isometry.map_app","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf : Q₁.Isometry Q₂\nm : M₁\n⊢ Eq (Q₂ (f m)) (Q₁ m)","decl":"@[simp]\ntheorem map_app (f : Q₁ →qᵢ Q₂) (m : M₁) : Q₂ (f m) = Q₁ m :=\n  f.map_app' m\n\n"}
{"name":"QuadraticMap.Isometry.coe_toLinearMap","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf : Q₁.Isometry Q₂\n⊢ Eq ⇑f.toLinearMap ⇑f","decl":"@[simp]\ntheorem coe_toLinearMap (f : Q₁ →qᵢ Q₂) : ⇑f.toLinearMap = f :=\n  rfl\n\n"}
{"name":"QuadraticMap.Isometry.id_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM : Type u_2\nN : Type u_7\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R M\ninst✝ : Module R N\nQ : QuadraticMap R M N\na : M\n⊢ Eq ((QuadraticMap.Isometry.id Q) a) a","decl":"/-- The identity isometry from a quadratic form to itself. -/\n@[simps!]\ndef id (Q : QuadraticMap R M N) : Q →qᵢ Q where\n  __ := LinearMap.id\n  map_app' _ := rfl\n\n"}
{"name":"QuadraticMap.Isometry.ofEq_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nN : Type u_7\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M₁\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R M₁\ninst✝ : Module R N\nQ₁ Q₂ : QuadraticMap R M₁ N\nh : Eq Q₁ Q₂\na : M₁\n⊢ Eq ((QuadraticMap.Isometry.ofEq h) a) a","decl":"/-- The identity isometry between equal quadratic forms. -/\n@[simps!]\ndef ofEq {Q₁ Q₂ : QuadraticMap R M₁ N} (h : Q₁ = Q₂) : Q₁ →qᵢ Q₂ where\n  __ := LinearMap.id\n  map_app' _ := h ▸ rfl\n\n"}
{"name":"QuadraticMap.Isometry.ofEq_rfl","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nN : Type u_7\ninst✝⁴ : CommSemiring R\ninst✝³ : AddCommMonoid M₁\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R M₁\ninst✝ : Module R N\nQ : QuadraticMap R M₁ N\n⊢ Eq (QuadraticMap.Isometry.ofEq ⋯) (QuadraticMap.Isometry.id Q)","decl":"@[simp]\ntheorem ofEq_rfl {Q : QuadraticMap R M₁ N} : ofEq (rfl : Q = Q) = .id Q := rfl\n\n"}
{"name":"QuadraticMap.Isometry.comp_apply","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nM₃ : Type u_5\nN : Type u_7\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M₁\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : AddCommMonoid N\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nQ₃ : QuadraticMap R M₃ N\ng : Q₂.Isometry Q₃\nf : Q₁.Isometry Q₂\nx : M₁\n⊢ Eq ((g.comp f) x) (g (f x))","decl":"/-- The composition of two isometries between quadratic forms. -/\n@[simps]\ndef comp (g : Q₂ →qᵢ Q₃) (f : Q₁ →qᵢ Q₂) : Q₁ →qᵢ Q₃ where\n  toFun x := g (f x)\n  map_app' x := by rw [← f.map_app, ← g.map_app]\n  __ := (g.toLinearMap : M₂ →ₗ[R] M₃) ∘ₗ (f.toLinearMap : M₁ →ₗ[R] M₂)\n\n"}
{"name":"QuadraticMap.Isometry.toLinearMap_comp","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nM₃ : Type u_5\nN : Type u_7\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M₁\ninst✝⁶ : AddCommMonoid M₂\ninst✝⁵ : AddCommMonoid M₃\ninst✝⁴ : AddCommMonoid N\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R M₃\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nQ₃ : QuadraticMap R M₃ N\ng : Q₂.Isometry Q₃\nf : Q₁.Isometry Q₂\n⊢ Eq (g.comp f).toLinearMap (g.comp f.toLinearMap)","decl":"@[simp]\ntheorem toLinearMap_comp (g : Q₂ →qᵢ Q₃) (f : Q₁ →qᵢ Q₂) :\n    (g.comp f).toLinearMap = g.toLinearMap.comp f.toLinearMap :=\n  rfl\n\n"}
{"name":"QuadraticMap.Isometry.id_comp","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf : Q₁.Isometry Q₂\n⊢ Eq ((QuadraticMap.Isometry.id Q₂).comp f) f","decl":"@[simp]\ntheorem id_comp (f : Q₁ →qᵢ Q₂) : (id Q₂).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"QuadraticMap.Isometry.comp_id","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid N\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nf : Q₁.Isometry Q₂\n⊢ Eq (f.comp (QuadraticMap.Isometry.id Q₁)) f","decl":"@[simp]\ntheorem comp_id (f : Q₁ →qᵢ Q₂) : f.comp (id Q₁) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"QuadraticMap.Isometry.comp_assoc","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nM₃ : Type u_5\nM₄ : Type u_6\nN : Type u_7\ninst✝¹⁰ : CommSemiring R\ninst✝⁹ : AddCommMonoid M₁\ninst✝⁸ : AddCommMonoid M₂\ninst✝⁷ : AddCommMonoid M₃\ninst✝⁶ : AddCommMonoid M₄\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R M₁\ninst✝³ : Module R M₂\ninst✝² : Module R M₃\ninst✝¹ : Module R M₄\ninst✝ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\nQ₃ : QuadraticMap R M₃ N\nQ₄ : QuadraticMap R M₄ N\nh : Q₃.Isometry Q₄\ng : Q₂.Isometry Q₃\nf : Q₁.Isometry Q₂\n⊢ Eq ((h.comp g).comp f) (h.comp (g.comp f))","decl":"theorem comp_assoc (h : Q₃ →qᵢ Q₄) (g : Q₂ →qᵢ Q₃) (f : Q₁ →qᵢ Q₂) :\n    (h.comp g).comp f = h.comp (g.comp f) :=\n  ext fun _ => rfl\n\n"}
{"name":"QuadraticMap.Isometry.instSubsingleton","module":"Mathlib.LinearAlgebra.QuadraticForm.Isometry","initialProofState":"R : Type u_1\nM₁ : Type u_3\nM₂ : Type u_4\nN : Type u_7\ninst✝⁷ : CommSemiring R\ninst✝⁶ : AddCommMonoid M₁\ninst✝⁵ : AddCommMonoid M₂\ninst✝⁴ : AddCommMonoid N\ninst✝³ : Module R M₁\ninst✝² : Module R M₂\ninst✝¹ : Module R N\nQ₁ : QuadraticMap R M₁ N\nQ₂ : QuadraticMap R M₂ N\ninst✝ : Subsingleton M₂\n⊢ Subsingleton (Q₁.Isometry Q₂)","decl":"/-- Maps into the zero module are trivial -/\ninstance [Subsingleton M₂] : Subsingleton (Q₁ →qᵢ Q₂) :=\n  ⟨fun _ _ => ext fun _ => Subsingleton.elim _ _⟩\n\n"}
