{"name":"Cardinal.partENatOfENat_toENat","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c : Cardinal.{u_1}\n⊢ Eq (↑(Cardinal.toENat c)) (Cardinal.toPartENat c)","decl":"@[simp]\ntheorem partENatOfENat_toENat (c : Cardinal) : (toENat c : PartENat) = toPartENat c := rfl\n\n"}
{"name":"Cardinal.toPartENat_natCast","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"n : Nat\n⊢ Eq (Cardinal.toPartENat ↑n) ↑n","decl":"@[simp]\ntheorem toPartENat_natCast (n : ℕ) : toPartENat n = n := by\n  simp only [← partENatOfENat_toENat, toENat_nat, PartENat.ofENat_coe]\n\n"}
{"name":"Cardinal.toPartENat_apply_of_lt_aleph0","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c : Cardinal.{u_1}\nh : LT.lt c Cardinal.aleph0\n⊢ Eq (Cardinal.toPartENat c) ↑(Cardinal.toNat c)","decl":"theorem toPartENat_apply_of_lt_aleph0 {c : Cardinal} (h : c < ℵ₀) : toPartENat c = toNat c := by\n  lift c to ℕ using h; simp\n\n"}
{"name":"Cardinal.toPartENat_eq_top","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c : Cardinal.{u_1}\n⊢ Iff (Eq (Cardinal.toPartENat c) Top.top) (LE.le Cardinal.aleph0 c)","decl":"theorem toPartENat_eq_top {c : Cardinal} :\n    toPartENat c = ⊤ ↔ ℵ₀ ≤ c := by\n  rw [← partENatOfENat_toENat, ← PartENat.withTopEquiv_symm_top, ← toENat_eq_top,\n    ← PartENat.withTopEquiv.symm.injective.eq_iff]\n  simp\n\n"}
{"name":"Cardinal.toPartENat_apply_of_aleph0_le","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c : Cardinal.{u_1}\nh : LE.le Cardinal.aleph0 c\n⊢ Eq (Cardinal.toPartENat c) Top.top","decl":"theorem toPartENat_apply_of_aleph0_le {c : Cardinal} (h : ℵ₀ ≤ c) : toPartENat c = ⊤ :=\n  congr_arg PartENat.ofENat (toENat_eq_top.2 h)\n\n"}
{"name":"Cardinal.mk_toPartENat_of_infinite","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"α : Type u\nh : Infinite α\n⊢ Eq (Cardinal.toPartENat (Cardinal.mk α)) Top.top","decl":"@[simp]\ntheorem mk_toPartENat_of_infinite [h : Infinite α] : toPartENat #α = ⊤ :=\n  toPartENat_apply_of_aleph0_le (infinite_iff.1 h)\n\n"}
{"name":"Cardinal.aleph0_toPartENat","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"⊢ Eq (Cardinal.toPartENat Cardinal.aleph0) Top.top","decl":"@[simp]\ntheorem aleph0_toPartENat : toPartENat ℵ₀ = ⊤ :=\n  toPartENat_apply_of_aleph0_le le_rfl\n\n"}
{"name":"Cardinal.toPartENat_surjective","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"⊢ Function.Surjective ⇑Cardinal.toPartENat","decl":"theorem toPartENat_surjective : Surjective toPartENat := fun x =>\n  PartENat.casesOn x ⟨ℵ₀, toPartENat_apply_of_aleph0_le le_rfl⟩ fun n => ⟨n, toPartENat_natCast n⟩\n\n\n"}
{"name":"Cardinal.toPartENat_strictMonoOn","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"⊢ StrictMonoOn (⇑Cardinal.toPartENat) (Set.Iic Cardinal.aleph0)","decl":"theorem toPartENat_strictMonoOn : StrictMonoOn toPartENat (Set.Iic ℵ₀) :=\n  PartENat.withTopOrderIso.symm.strictMono.comp_strictMonoOn toENat_strictMonoOn\n\n"}
{"name":"Cardinal.toPartENat_le_iff_of_le_aleph0","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c c' : Cardinal.{u_1}\nh : LE.le c Cardinal.aleph0\n⊢ Iff (LE.le (Cardinal.toPartENat c) (Cardinal.toPartENat c')) (LE.le c c')","decl":"lemma toPartENat_le_iff_of_le_aleph0 {c c' : Cardinal} (h : c ≤ ℵ₀) :\n    toPartENat c ≤ toPartENat c' ↔ c ≤ c' := by\n  lift c to ℕ∞ using h\n  simp_rw [← partENatOfENat_toENat, toENat_ofENat, enat_gc _,\n   ← PartENat.withTopOrderIso.symm.le_iff_le, PartENat.ofENat_le, map_le_map_iff]\n\n"}
{"name":"Cardinal.toPartENat_le_iff_of_lt_aleph0","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c c' : Cardinal.{u_1}\nhc' : LT.lt c' Cardinal.aleph0\n⊢ Iff (LE.le (Cardinal.toPartENat c) (Cardinal.toPartENat c')) (LE.le c c')","decl":"lemma toPartENat_le_iff_of_lt_aleph0 {c c' : Cardinal} (hc' : c' < ℵ₀) :\n    toPartENat c ≤ toPartENat c' ↔ c ≤ c' := by\n  lift c' to ℕ using hc'\n  simp_rw [← partENatOfENat_toENat, toENat_nat, ← toENat_le_nat,\n   ← PartENat.withTopOrderIso.symm.le_iff_le, PartENat.ofENat_le, map_le_map_iff]\n\n"}
{"name":"Cardinal.toPartENat_inj_of_le_aleph0","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c c' : Cardinal.{u_1}\nhc : LE.le c Cardinal.aleph0\nhc' : LE.le c' Cardinal.aleph0\n⊢ Iff (Eq (Cardinal.toPartENat c) (Cardinal.toPartENat c')) (Eq c c')","decl":"lemma toPartENat_inj_of_le_aleph0 {c c' : Cardinal} (hc : c ≤ ℵ₀) (hc' : c' ≤ ℵ₀) :\n    toPartENat c = toPartENat c' ↔ c = c' :=\n  toPartENat_strictMonoOn.injOn.eq_iff hc hc'\n\n"}
{"name":"Cardinal.toPartENat_eq_iff_of_le_aleph0","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c c' : Cardinal.{u_1}\nhc : LE.le c Cardinal.aleph0\nhc' : LE.le c' Cardinal.aleph0\n⊢ Iff (Eq (Cardinal.toPartENat c) (Cardinal.toPartENat c')) (Eq c c')","decl":"@[deprecated (since := \"2024-12-29\")] alias toPartENat_eq_iff_of_le_aleph0 :=\n  toPartENat_inj_of_le_aleph0\n\n"}
{"name":"Cardinal.toPartENat_mono","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c c' : Cardinal.{u_1}\nh : LE.le c c'\n⊢ LE.le (Cardinal.toPartENat c) (Cardinal.toPartENat c')","decl":"theorem toPartENat_mono {c c' : Cardinal} (h : c ≤ c') :\n    toPartENat c ≤ toPartENat c' :=\n  OrderHomClass.mono _ h\n\n"}
{"name":"Cardinal.toPartENat_lift","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"c : Cardinal.{v}\n⊢ Eq (Cardinal.toPartENat (Cardinal.lift.{u, v} c)) (Cardinal.toPartENat c)","decl":"theorem toPartENat_lift (c : Cardinal.{v}) : toPartENat (lift.{u, v} c) = toPartENat c := by\n  simp only [← partENatOfENat_toENat, toENat_lift]\n\n"}
{"name":"Cardinal.toPartENat_congr","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"α : Type u\nβ : Type v\ne : Equiv α β\n⊢ Eq (Cardinal.toPartENat (Cardinal.mk α)) (Cardinal.toPartENat (Cardinal.mk β))","decl":"theorem toPartENat_congr {β : Type v} (e : α ≃ β) : toPartENat #α = toPartENat #β := by\n  rw [← toPartENat_lift, lift_mk_eq.{_, _,v}.mpr ⟨e⟩, toPartENat_lift]\n\n"}
{"name":"Cardinal.mk_toPartENat_eq_coe_card","module":"Mathlib.Deprecated.Cardinal.PartENat","initialProofState":"α : Type u\ninst✝ : Fintype α\n⊢ Eq (Cardinal.toPartENat (Cardinal.mk α)) ↑(Fintype.card α)","decl":"theorem mk_toPartENat_eq_coe_card [Fintype α] : toPartENat #α = Fintype.card α := by\n  simp\n\n"}
