{"name":"Polynomial.natDegree_le_pred","module":"Mathlib.Algebra.Polynomial.Degree.Monomial","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\nhf : LE.le p.natDegree n\nhn : Eq (p.coeff n) 0\n⊢ LE.le p.natDegree (HSub.hSub n 1)","decl":"lemma natDegree_le_pred (hf : p.natDegree ≤ n) (hn : p.coeff n = 0) : p.natDegree ≤ n - 1 := by\n  obtain _ | n := n\n  · exact hf\n  · refine (Nat.le_succ_iff_eq_or_le.1 hf).resolve_left fun h ↦ ?_\n    rw [← Nat.succ_eq_add_one, ← h, coeff_natDegree, leadingCoeff_eq_zero] at hn\n    aesop\n\n"}
{"name":"Polynomial.monomial_natDegree_leadingCoeff_eq_self","module":"Mathlib.Algebra.Polynomial.Degree.Monomial","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.support.card 1\n⊢ Eq ((Polynomial.monomial p.natDegree) p.leadingCoeff) p","decl":"theorem monomial_natDegree_leadingCoeff_eq_self (h : #p.support ≤ 1) :\n    monomial p.natDegree p.leadingCoeff = p := by\n  classical\n  rcases card_support_le_one_iff_monomial.1 h with ⟨n, a, rfl⟩\n  by_cases ha : a = 0 <;> simp [ha]\n\n"}
{"name":"Polynomial.C_mul_X_pow_eq_self","module":"Mathlib.Algebra.Polynomial.Degree.Monomial","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.support.card 1\n⊢ Eq (HMul.hMul (Polynomial.C p.leadingCoeff) (HPow.hPow Polynomial.X p.natDegree)) p","decl":"theorem C_mul_X_pow_eq_self (h : #p.support ≤ 1) : C p.leadingCoeff * X ^ p.natDegree = p := by\n  rw [C_mul_X_pow_eq_monomial, monomial_natDegree_leadingCoeff_eq_self h]\n\n"}
