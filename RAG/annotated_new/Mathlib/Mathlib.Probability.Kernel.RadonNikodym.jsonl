{"name":"ProbabilityTheory.Kernel.rnDerivAux_nonneg","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nhκη : LE.le κ η\na : α\nx : γ\n⊢ LE.le 0 (κ.rnDerivAux η a x)","decl":"lemma rnDerivAux_nonneg (hκη : κ ≤ η) {a : α} {x : γ} : 0 ≤ rnDerivAux κ η a x := by\n  rw [rnDerivAux]\n  split_ifs with hα\n  · exact ENNReal.toReal_nonneg\n  · have := hαγ.countableOrCountablyGenerated.resolve_left hα\n    exact density_nonneg ((fst_map_id_prod _ measurable_const).trans_le hκη) _ _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDerivAux_le_one","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\nhκη : LE.le κ η\na : α\n⊢ (MeasureTheory.ae (η a)).EventuallyLE (κ.rnDerivAux η a) 1","decl":"lemma rnDerivAux_le_one [IsFiniteKernel η] (hκη : κ ≤ η) {a : α} :\n    rnDerivAux κ η a ≤ᵐ[η a] 1 := by\n  filter_upwards [Measure.rnDeriv_le_one_of_le (hκη a)] with x hx_le_one\n  simp_rw [rnDerivAux]\n  split_ifs with hα\n  · refine ENNReal.toReal_le_of_le_ofReal zero_le_one ?_\n    simp only [Pi.one_apply, ENNReal.ofReal_one]\n    exact hx_le_one\n  · have := hαγ.countableOrCountablyGenerated.resolve_left hα\n    exact density_le_one ((fst_map_id_prod _ measurable_const).trans_le hκη) _ _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_rnDerivAux","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\n⊢ Measurable fun p => κ.rnDerivAux η p.1 p.2","decl":"lemma measurable_rnDerivAux (κ η : Kernel α γ) :\n    Measurable (fun p : α × γ ↦ Kernel.rnDerivAux κ η p.1 p.2) := by\n  simp_rw [rnDerivAux]\n  split_ifs with hα\n  · refine Measurable.ennreal_toReal ?_\n    change Measurable ((fun q : γ × α ↦ (κ q.2).rnDeriv (η q.2) q.1) ∘ Prod.swap)\n    refine (measurable_from_prod_countable' (fun a ↦ ?_) ?_).comp measurable_swap\n    · exact Measure.measurable_rnDeriv (κ a) (η a)\n    · intro a a' c ha'_mem_a\n      have h_eq : ∀ κ : Kernel α γ, κ a' = κ a := fun κ ↦ by\n        ext s hs\n        exact mem_of_mem_measurableAtom ha'_mem_a\n          (Kernel.measurable_coe κ hs (measurableSet_singleton (κ a s))) rfl\n      rw [h_eq κ, h_eq η]\n  · have := hαγ.countableOrCountablyGenerated.resolve_left hα\n    exact measurable_density _ η MeasurableSet.univ\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_rnDerivAux_right","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\n⊢ Measurable fun x => κ.rnDerivAux η a x","decl":"lemma measurable_rnDerivAux_right (κ η : Kernel α γ) (a : α) :\n    Measurable (fun x : γ ↦ rnDerivAux κ η a x) := by\n  change Measurable ((fun p : α × γ ↦ rnDerivAux κ η p.1 p.2) ∘ (fun x ↦ (a, x)))\n  exact (measurable_rnDerivAux _ _).comp measurable_prod_mk_left\n\n"}
{"name":"ProbabilityTheory.Kernel.setLIntegral_rnDerivAux","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\ns : Set γ\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.lintegral (((HAdd.hAdd κ η) a).restrict s) fun x => ENNReal.ofReal (κ.rnDerivAux (HAdd.hAdd κ η) a x)) ((κ a) s)","decl":"lemma setLIntegral_rnDerivAux (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η]\n    (a : α) {s : Set γ} (hs : MeasurableSet s) :\n    ∫⁻ x in s, ENNReal.ofReal (rnDerivAux κ (κ + η) a x) ∂(κ + η) a = κ a s := by\n  have h_le : κ ≤ κ + η := le_add_of_nonneg_right bot_le\n  simp_rw [rnDerivAux]\n  split_ifs with hα\n  · have h_ac : κ a ≪ (κ + η) a := Measure.absolutelyContinuous_of_le (h_le a)\n    rw [← Measure.setLIntegral_rnDeriv h_ac]\n    refine setLIntegral_congr_fun hs ?_\n    filter_upwards [Measure.rnDeriv_lt_top (κ a) ((κ + η) a)] with x hx_lt _\n    rw [ENNReal.ofReal_toReal hx_lt.ne]\n  · have := hαγ.countableOrCountablyGenerated.resolve_left hα\n    rw [setLIntegral_density ((fst_map_id_prod _ measurable_const).trans_le h_le) _\n      MeasurableSet.univ hs, map_apply' _ (by fun_prop) _ (hs.prod MeasurableSet.univ)]\n    congr with x\n    simp\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDerivAux","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ Eq ((HAdd.hAdd κ η).withDensity fun a x => ↑(κ.rnDerivAux (HAdd.hAdd κ η) a x).toNNReal) κ","decl":"lemma withDensity_rnDerivAux (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] :\n    withDensity (κ + η) (fun a x ↦ Real.toNNReal (rnDerivAux κ (κ + η) a x)) = κ := by\n  ext a s hs\n  rw [Kernel.withDensity_apply']\n  swap\n  · exact (measurable_rnDerivAux _ _).ennreal_ofReal\n  simp_rw [ofNNReal_toNNReal]\n  exact setLIntegral_rnDerivAux κ η a hs\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_one_sub_rnDerivAux","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ Eq ((HAdd.hAdd κ η).withDensity fun a x => ↑(HSub.hSub 1 (κ.rnDerivAux (HAdd.hAdd κ η) a x)).toNNReal) η","decl":"lemma withDensity_one_sub_rnDerivAux (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] :\n    withDensity (κ + η) (fun a x ↦ Real.toNNReal (1 - rnDerivAux κ (κ + η) a x)) = η := by\n  have h_le : κ ≤ κ + η := le_add_of_nonneg_right bot_le\n  suffices withDensity (κ + η) (fun a x ↦ Real.toNNReal (1 - rnDerivAux κ (κ + η) a x))\n      + withDensity (κ + η) (fun a x ↦ Real.toNNReal (rnDerivAux κ (κ + η) a x))\n      = κ + η by\n    ext a s\n    have h : (withDensity (κ + η) (fun a x ↦ Real.toNNReal (1 - rnDerivAux κ (κ + η) a x))\n          + withDensity (κ + η) (fun a x ↦ Real.toNNReal (rnDerivAux κ (κ + η) a x))) a s\n        = κ a s + η a s := by\n      rw [this]\n      simp\n    simp only [coe_add, Pi.add_apply, Measure.coe_add] at h\n    rwa [withDensity_rnDerivAux, add_comm, ENNReal.add_right_inj (measure_ne_top _ _)] at h\n  have : ∀ b, (Real.toNNReal b : ℝ≥0∞) = ENNReal.ofReal b := fun _ ↦ rfl\n  simp_rw [this, ENNReal.ofReal_sub _ (rnDerivAux_nonneg h_le), ENNReal.ofReal_one]\n  rw [withDensity_sub_add_cancel]\n  · rw [withDensity_one']\n  · exact measurable_const\n  · exact (measurable_rnDerivAux _ _).ennreal_ofReal\n  · intro a\n    filter_upwards [rnDerivAux_le_one h_le] with x hx\n    simp only [ENNReal.ofReal_le_one]\n    exact hx\n\n"}
{"name":"ProbabilityTheory.Kernel.mem_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\nx : γ\n⊢ Iff (Membership.mem (κ.mutuallySingularSetSlice η a) x) (LE.le 1 (κ.rnDerivAux (HAdd.hAdd κ η) a x))","decl":"lemma mem_mutuallySingularSetSlice (κ η : Kernel α γ) (a : α) (x : γ) :\n    x ∈ mutuallySingularSetSlice κ η a ↔ 1 ≤ rnDerivAux κ (κ + η) a x := by\n  rw [mutuallySingularSetSlice]; rfl\n\n"}
{"name":"ProbabilityTheory.Kernel.not_mem_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\nx : γ\n⊢ Iff (Not (Membership.mem (κ.mutuallySingularSetSlice η a) x)) (LT.lt (κ.rnDerivAux (HAdd.hAdd κ η) a x) 1)","decl":"lemma not_mem_mutuallySingularSetSlice (κ η : Kernel α γ) (a : α) (x : γ) :\n    x ∉ mutuallySingularSetSlice κ η a ↔ rnDerivAux κ (κ + η) a x < 1 := by\n  simp [mutuallySingularSetSlice]\n\n"}
{"name":"ProbabilityTheory.Kernel.measurableSet_mutuallySingularSet","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\n⊢ MeasurableSet (κ.mutuallySingularSet η)","decl":"lemma measurableSet_mutuallySingularSet (κ η : Kernel α γ) :\n    MeasurableSet (mutuallySingularSet κ η) :=\n  measurable_rnDerivAux κ (κ + η) measurableSet_Ici\n\n"}
{"name":"ProbabilityTheory.Kernel.measurableSet_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\n⊢ MeasurableSet (κ.mutuallySingularSetSlice η a)","decl":"lemma measurableSet_mutuallySingularSetSlice (κ η : Kernel α γ) (a : α) :\n    MeasurableSet (mutuallySingularSetSlice κ η a) :=\n  measurable_prod_mk_left (measurableSet_mutuallySingularSet κ η)\n\n"}
{"name":"ProbabilityTheory.Kernel.measure_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Eq ((η a) (κ.mutuallySingularSetSlice η a)) 0","decl":"lemma measure_mutuallySingularSetSlice (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η]\n    (a : α) :\n    η a (mutuallySingularSetSlice κ η a) = 0 := by\n  suffices withDensity (κ + η) (fun a x ↦ Real.toNNReal\n      (1 - rnDerivAux κ (κ + η) a x)) a {x | 1 ≤ rnDerivAux κ (κ + η) a x} = 0 by\n    rwa [withDensity_one_sub_rnDerivAux κ η] at this\n  simp_rw [ofNNReal_toNNReal]\n  rw [Kernel.withDensity_apply', lintegral_eq_zero_iff, EventuallyEq, ae_restrict_iff]\n  rotate_left\n  · exact (measurable_const.sub\n      ((measurable_rnDerivAux _ _).comp measurable_prod_mk_left)).ennreal_ofReal\n      (measurableSet_singleton _)\n  · exact (measurable_const.sub\n      ((measurable_rnDerivAux _ _).comp measurable_prod_mk_left)).ennreal_ofReal\n  · exact (measurable_const.sub (measurable_rnDerivAux _ _)).ennreal_ofReal\n  refine ae_of_all _ (fun x hx ↦ ?_)\n  simp only [mem_setOf_eq] at hx\n  simp [hx]\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_def","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_3\nγ : Type u_4\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\nx : γ\n⊢ Eq (κ.rnDeriv η a x) (HDiv.hDiv (ENNReal.ofReal (κ.rnDerivAux (HAdd.hAdd κ η) a x)) (ENNReal.ofReal (HSub.hSub 1 (κ.rnDerivAux (HAdd.hAdd κ η) a x))))","decl":"/-- Radon-Nikodym derivative of the kernel `κ` with respect to the kernel `η`. -/\nnoncomputable\nirreducible_def rnDeriv (κ η : Kernel α γ) (a : α) (x : γ) : ℝ≥0∞ :=\n  ENNReal.ofReal (rnDerivAux κ (κ + η) a x) / ENNReal.ofReal (1 - rnDerivAux κ (κ + η) a x)\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_def'","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\n⊢ Eq (κ.rnDeriv η) fun a x => HDiv.hDiv (ENNReal.ofReal (κ.rnDerivAux (HAdd.hAdd κ η) a x)) (ENNReal.ofReal (HSub.hSub 1 (κ.rnDerivAux (HAdd.hAdd κ η) a x)))","decl":"lemma rnDeriv_def' (κ η : Kernel α γ) :\n    rnDeriv κ η = fun a x ↦ ENNReal.ofReal (rnDerivAux κ (κ + η) a x)\n      / ENNReal.ofReal (1 - rnDerivAux κ (κ + η) a x) := by ext; rw [rnDeriv_def]\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_rnDeriv","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\n⊢ Measurable fun p => κ.rnDeriv η p.1 p.2","decl":"lemma measurable_rnDeriv (κ η : Kernel α γ) :\n    Measurable (fun p : α × γ ↦ rnDeriv κ η p.1 p.2) := by\n  simp_rw [rnDeriv_def]\n  exact (measurable_rnDerivAux κ _).ennreal_ofReal.div\n    (measurable_const.sub (measurable_rnDerivAux κ _)).ennreal_ofReal\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_rnDeriv_right","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\n⊢ Measurable fun x => κ.rnDeriv η a x","decl":"lemma measurable_rnDeriv_right (κ η : Kernel α γ) (a : α) :\n    Measurable (fun x : γ ↦ rnDeriv κ η a x) := by\n  change Measurable ((fun p : α × γ ↦ rnDeriv κ η p.1 p.2) ∘ (fun x ↦ (a, x)))\n  exact (measurable_rnDeriv _ _).comp measurable_prod_mk_left\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_eq_top_iff","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\nx : γ\n⊢ Iff (Eq (κ.rnDeriv η a x) Top.top) (Membership.mem (κ.mutuallySingularSet η) { fst := a, snd := x })","decl":"lemma rnDeriv_eq_top_iff (κ η : Kernel α γ) (a : α) (x : γ) :\n    rnDeriv κ η a x = ∞ ↔ (a, x) ∈ mutuallySingularSet κ η := by\n  simp only [rnDeriv, ENNReal.div_eq_top, ne_eq, ENNReal.ofReal_eq_zero, not_le,\n    tsub_le_iff_right, zero_add, ENNReal.ofReal_ne_top, not_false_eq_true, and_true, or_false,\n    mutuallySingularSet, mem_setOf_eq, and_iff_right_iff_imp]\n  exact fun h ↦ zero_lt_one.trans_le h\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_eq_top_iff'","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\nx : γ\n⊢ Iff (Eq (κ.rnDeriv η a x) Top.top) (Membership.mem (κ.mutuallySingularSetSlice η a) x)","decl":"lemma rnDeriv_eq_top_iff' (κ η : Kernel α γ) (a : α) (x : γ) :\n    rnDeriv κ η a x = ∞ ↔ x ∈ mutuallySingularSetSlice κ η a := by\n  rw [rnDeriv_eq_top_iff, mutuallySingularSet, mutuallySingularSetSlice, mem_setOf, mem_setOf]\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_def","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_3\nγ : Type u_4\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq (κ.singularPart η) ((HAdd.hAdd κ η).withDensity fun a x => HSub.hSub (↑(κ.rnDerivAux (HAdd.hAdd κ η) a x).toNNReal) (HMul.hMul (↑(HSub.hSub 1 (κ.rnDerivAux (HAdd.hAdd κ η) a x)).toNNReal) (κ.rnDeriv η a x)))","decl":"/-- Singular part of the kernel `κ` with respect to the kernel `η`. -/\nnoncomputable\nirreducible_def singularPart (κ η : Kernel α γ) [IsSFiniteKernel κ] [IsSFiniteKernel η] :\n    Kernel α γ :=\n  withDensity (κ + η) (fun a x ↦ Real.toNNReal (rnDerivAux κ (κ + η) a x)\n    - Real.toNNReal (1 - rnDerivAux κ (κ + η) a x) * rnDeriv κ η a x)\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_singularPart_fun","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\n⊢ Measurable fun p => HSub.hSub (↑(κ.rnDerivAux (HAdd.hAdd κ η) p.1 p.2).toNNReal) (HMul.hMul (↑(HSub.hSub 1 (κ.rnDerivAux (HAdd.hAdd κ η) p.1 p.2)).toNNReal) (κ.rnDeriv η p.1 p.2))","decl":"lemma measurable_singularPart_fun (κ η : Kernel α γ) :\n    Measurable (fun p : α × γ ↦ Real.toNNReal (rnDerivAux κ (κ + η) p.1 p.2)\n      - Real.toNNReal (1 - rnDerivAux κ (κ + η) p.1 p.2) * rnDeriv κ η p.1 p.2) :=\n  (measurable_rnDerivAux _ _).ennreal_ofReal.sub\n    ((measurable_const.sub (measurable_rnDerivAux _ _)).ennreal_ofReal.mul (measurable_rnDeriv _ _))\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_singularPart_fun_right","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\na : α\n⊢ Measurable fun x => HSub.hSub (↑(κ.rnDerivAux (HAdd.hAdd κ η) a x).toNNReal) (HMul.hMul (↑(HSub.hSub 1 (κ.rnDerivAux (HAdd.hAdd κ η) a x)).toNNReal) (κ.rnDeriv η a x))","decl":"lemma measurable_singularPart_fun_right (κ η : Kernel α γ) (a : α) :\n    Measurable (fun x : γ ↦ Real.toNNReal (rnDerivAux κ (κ + η) a x)\n      - Real.toNNReal (1 - rnDerivAux κ (κ + η) a x) * rnDeriv κ η a x) := by\n  change Measurable ((Function.uncurry fun a b ↦\n    ENNReal.ofReal (rnDerivAux κ (κ + η) a b)\n    - ENNReal.ofReal (1 - rnDerivAux κ (κ + η) a b) * rnDeriv κ η a b) ∘ (fun b ↦ (a, b)))\n  exact (measurable_singularPart_fun κ η).comp measurable_prod_mk_left\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_compl_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\na : α\n⊢ Eq (((κ.singularPart η) a) (HasCompl.compl (κ.mutuallySingularSetSlice η a))) 0","decl":"lemma singularPart_compl_mutuallySingularSetSlice (κ η : Kernel α γ) [IsSFiniteKernel κ]\n    [IsSFiniteKernel η] (a : α) :\n    singularPart κ η a (mutuallySingularSetSlice κ η a)ᶜ = 0 := by\n  rw [singularPart, Kernel.withDensity_apply', lintegral_eq_zero_iff, EventuallyEq,\n    ae_restrict_iff]\n  all_goals simp_rw [ofNNReal_toNNReal]\n  rotate_left\n  · exact measurableSet_preimage (measurable_singularPart_fun_right κ η a)\n      (measurableSet_singleton _)\n  · exact measurable_singularPart_fun_right κ η a\n  · exact measurable_singularPart_fun κ η\n  refine ae_of_all _ (fun x hx ↦ ?_)\n  simp only [mem_compl_iff, mutuallySingularSetSlice, mem_setOf, not_le] at hx\n  simp_rw [rnDeriv]\n  rw [← ENNReal.ofReal_div_of_pos, div_eq_inv_mul, ← ENNReal.ofReal_mul, ← mul_assoc,\n    mul_inv_cancel₀, one_mul, tsub_self, Pi.zero_apply]\n  · simp only [ne_eq, sub_eq_zero, hx.ne', not_false_eq_true]\n  · simp only [sub_nonneg, hx.le]\n  · simp only [sub_pos, hx]\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_of_subset_compl_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\ns : Set γ\nhs : HasSubset.Subset s (HasCompl.compl (κ.mutuallySingularSetSlice η a))\n⊢ Eq (((κ.singularPart η) a) s) 0","decl":"lemma singularPart_of_subset_compl_mutuallySingularSetSlice [IsFiniteKernel κ]\n    [IsFiniteKernel η] {a : α} {s : Set γ} (hs : s ⊆ (mutuallySingularSetSlice κ η a)ᶜ) :\n    singularPart κ η a s = 0 :=\n  measure_mono_null hs (singularPart_compl_mutuallySingularSetSlice κ η a)\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_of_subset_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\ns : Set γ\nhsm : MeasurableSet s\nhs : HasSubset.Subset s (κ.mutuallySingularSetSlice η a)\n⊢ Eq (((κ.singularPart η) a) s) ((κ a) s)","decl":"lemma singularPart_of_subset_mutuallySingularSetSlice [IsFiniteKernel κ]\n    [IsFiniteKernel η] {a : α} {s : Set γ} (hsm : MeasurableSet s)\n    (hs : s ⊆ mutuallySingularSetSlice κ η a) :\n    singularPart κ η a s = κ a s := by\n  have hs' : ∀ x ∈ s, 1 ≤ rnDerivAux κ (κ + η) a x := fun _ hx ↦ hs hx\n  rw [singularPart, Kernel.withDensity_apply']\n  swap; · exact measurable_singularPart_fun κ η\n  calc\n    ∫⁻ x in s, ↑(Real.toNNReal (rnDerivAux κ (κ + η) a x)) -\n      ↑(Real.toNNReal (1 - rnDerivAux κ (κ + η) a x)) * rnDeriv κ η a x\n      ∂(κ + η) a\n    = ∫⁻ _ in s, 1 ∂(κ + η) a := by\n        refine setLIntegral_congr_fun hsm ?_\n        have h_le : κ ≤ κ + η := le_add_of_nonneg_right bot_le\n        filter_upwards [rnDerivAux_le_one h_le] with x hx hxs\n        have h_eq_one : rnDerivAux κ (κ + η) a x = 1 := le_antisymm hx (hs' x hxs)\n        simp [h_eq_one]\n  _ = (κ + η) a s := by simp\n  _ = κ a s := by\n        suffices η a s = 0 by simp [this]\n        exact measure_mono_null hs (measure_mutuallySingularSetSlice κ η a)\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Eq (((η.withDensity (κ.rnDeriv η)) a) (κ.mutuallySingularSetSlice η a)) 0","decl":"lemma withDensity_rnDeriv_mutuallySingularSetSlice (κ η : Kernel α γ) [IsFiniteKernel κ]\n    [IsFiniteKernel η] (a : α) :\n    withDensity η (rnDeriv κ η) a (mutuallySingularSetSlice κ η a) = 0 := by\n  rw [Kernel.withDensity_apply']\n  · exact setLIntegral_measure_zero _ _ (measure_mutuallySingularSetSlice κ η a)\n  · exact measurable_rnDeriv κ η\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_of_subset_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\ns : Set γ\nhs : HasSubset.Subset s (κ.mutuallySingularSetSlice η a)\n⊢ Eq (((η.withDensity (κ.rnDeriv η)) a) s) 0","decl":"lemma withDensity_rnDeriv_of_subset_mutuallySingularSetSlice [IsFiniteKernel κ]\n    [IsFiniteKernel η] {a : α} {s : Set γ}\n    (hs : s ⊆ mutuallySingularSetSlice κ η a) :\n    withDensity η (rnDeriv κ η) a s = 0 :=\n  measure_mono_null hs (withDensity_rnDeriv_mutuallySingularSetSlice κ η a)\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_of_subset_compl_mutuallySingularSetSlice","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\ns : Set γ\nhsm : MeasurableSet s\nhs : HasSubset.Subset s (HasCompl.compl (κ.mutuallySingularSetSlice η a))\n⊢ Eq (((η.withDensity (κ.rnDeriv η)) a) s) ((κ a) s)","decl":"lemma withDensity_rnDeriv_of_subset_compl_mutuallySingularSetSlice\n    [IsFiniteKernel κ] [IsFiniteKernel η] {a : α} {s : Set γ} (hsm : MeasurableSet s)\n    (hs : s ⊆ (mutuallySingularSetSlice κ η a)ᶜ) :\n    withDensity η (rnDeriv κ η) a s = κ a s := by\n  have : withDensity η (rnDeriv κ η)\n      = withDensity (withDensity (κ + η)\n        (fun a x ↦ Real.toNNReal (1 - rnDerivAux κ (κ + η) a x))) (rnDeriv κ η) := by\n    rw [rnDeriv_def']\n    congr\n    exact (withDensity_one_sub_rnDerivAux κ η).symm\n  rw [this, ← withDensity_mul, Kernel.withDensity_apply']\n  rotate_left\n  · exact ((measurable_const.sub (measurable_rnDerivAux _ _)).ennreal_ofReal.mul\n    (measurable_rnDeriv _ _))\n  · exact (measurable_const.sub (measurable_rnDerivAux _ _)).real_toNNReal\n  · exact measurable_rnDeriv _ _\n  simp_rw [rnDeriv]\n  have hs' : ∀ x ∈ s, rnDerivAux κ (κ + η) a x < 1 := by\n    simp_rw [← not_mem_mutuallySingularSetSlice]\n    exact fun x hx hx_mem ↦ hs hx hx_mem\n  calc\n    ∫⁻ x in s, ↑(Real.toNNReal (1 - rnDerivAux κ (κ + η) a x)) *\n      (ENNReal.ofReal (rnDerivAux κ (κ + η) a x) /\n        ENNReal.ofReal (1 - rnDerivAux κ (κ + η) a x)) ∂(κ + η) a\n  _ = ∫⁻ x in s, ENNReal.ofReal (rnDerivAux κ (κ + η) a x) ∂(κ + η) a := by\n      refine setLIntegral_congr_fun hsm (ae_of_all _ fun x hx ↦ ?_)\n      rw [ofNNReal_toNNReal, ← ENNReal.ofReal_div_of_pos, div_eq_inv_mul, ← ENNReal.ofReal_mul,\n        ← mul_assoc, mul_inv_cancel₀, one_mul]\n      · rw [ne_eq, sub_eq_zero]\n        exact (hs' x hx).ne'\n      · simp [(hs' x hx).le]\n      · simp [hs' x hx]\n  _ = κ a s := setLIntegral_rnDerivAux κ η a hsm\n\n"}
{"name":"ProbabilityTheory.Kernel.mutuallySingular_singularPart","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ ((κ.singularPart η) a).MutuallySingular (η a)","decl":"/-- The singular part of `κ` with respect to `η` is mutually singular with `η`. -/\nlemma mutuallySingular_singularPart (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η]\n    (a : α) :\n    singularPart κ η a ⟂ₘ η a := by\n  symm\n  exact ⟨mutuallySingularSetSlice κ η a, measurableSet_mutuallySingularSetSlice κ η a,\n    measure_mutuallySingularSetSlice κ η a, singularPart_compl_mutuallySingularSetSlice κ η a⟩\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_add_singularPart","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ Eq (HAdd.hAdd (η.withDensity (κ.rnDeriv η)) (κ.singularPart η)) κ","decl":"/-- Lebesgue decomposition of a finite kernel `κ` with respect to another one `η`.\n`κ` is the sum of an absolutely continuous part `withDensity η (rnDeriv κ η)` and a singular part\n`singularPart κ η`. -/\nlemma rnDeriv_add_singularPart (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] :\n    withDensity η (rnDeriv κ η) + singularPart κ η = κ := by\n  ext a s hs\n  rw [← inter_union_diff s (mutuallySingularSetSlice κ η a)]\n  simp only [coe_add, Pi.add_apply, Measure.coe_add]\n  have hm := measurableSet_mutuallySingularSetSlice κ η a\n  simp only [measure_union (Disjoint.mono inter_subset_right le_rfl disjoint_sdiff_right)\n    (hs.diff hm)]\n  rw [singularPart_of_subset_mutuallySingularSetSlice (hs.inter hm) inter_subset_right,\n    singularPart_of_subset_compl_mutuallySingularSetSlice (diff_subset_iff.mpr (by simp)),\n    add_zero, withDensity_rnDeriv_of_subset_mutuallySingularSetSlice inter_subset_right,\n    zero_add, withDensity_rnDeriv_of_subset_compl_mutuallySingularSetSlice (hs.diff hm)\n      (diff_subset_iff.mpr (by simp)), add_comm]\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_eq_zero_iff_apply_eq_zero","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Iff (Eq ((κ.singularPart η) a) 0) (Eq (((κ.singularPart η) a) (κ.mutuallySingularSetSlice η a)) 0)","decl":"lemma singularPart_eq_zero_iff_apply_eq_zero (κ η : Kernel α γ) [IsFiniteKernel κ]\n    [IsFiniteKernel η] (a : α) :\n    singularPart κ η a = 0 ↔ singularPart κ η a (mutuallySingularSetSlice κ η a) = 0 := by\n  rw [← Measure.measure_univ_eq_zero]\n  have : univ = (mutuallySingularSetSlice κ η a) ∪ (mutuallySingularSetSlice κ η a)ᶜ := by simp\n  rw [this, measure_union disjoint_compl_right (measurableSet_mutuallySingularSetSlice κ η a).compl,\n    singularPart_compl_mutuallySingularSetSlice, add_zero]\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_eq_zero_iff_apply_eq_zero","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Iff (Eq ((η.withDensity (κ.rnDeriv η)) a) 0) (Eq (((η.withDensity (κ.rnDeriv η)) a) (HasCompl.compl (κ.mutuallySingularSetSlice η a))) 0)","decl":"lemma withDensity_rnDeriv_eq_zero_iff_apply_eq_zero (κ η : Kernel α γ) [IsFiniteKernel κ]\n    [IsFiniteKernel η] (a : α) :\n    withDensity η (rnDeriv κ η) a = 0\n      ↔ withDensity η (rnDeriv κ η) a (mutuallySingularSetSlice κ η a)ᶜ = 0 := by\n  rw [← Measure.measure_univ_eq_zero]\n  have : univ = (mutuallySingularSetSlice κ η a) ∪ (mutuallySingularSetSlice κ η a)ᶜ := by simp\n  rw [this, measure_union disjoint_compl_right (measurableSet_mutuallySingularSetSlice κ η a).compl,\n    withDensity_rnDeriv_mutuallySingularSetSlice, zero_add]\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_eq_zero_iff_absolutelyContinuous","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Iff (Eq ((κ.singularPart η) a) 0) ((κ a).AbsolutelyContinuous (η a))","decl":"lemma singularPart_eq_zero_iff_absolutelyContinuous (κ η : Kernel α γ)\n    [IsFiniteKernel κ] [IsFiniteKernel η] (a : α) :\n    singularPart κ η a = 0 ↔ κ a ≪ η a := by\n  conv_rhs => rw [← rnDeriv_add_singularPart κ η, coe_add, Pi.add_apply]\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · rw [h, add_zero]\n    exact withDensity_absolutelyContinuous _ _\n  rw [Measure.AbsolutelyContinuous.add_left_iff] at h\n  exact Measure.eq_zero_of_absolutelyContinuous_of_mutuallySingular h.2\n    (mutuallySingular_singularPart _ _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_eq_zero_iff_mutuallySingular","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Iff (Eq ((η.withDensity (κ.rnDeriv η)) a) 0) ((κ a).MutuallySingular (η a))","decl":"lemma withDensity_rnDeriv_eq_zero_iff_mutuallySingular (κ η : Kernel α γ)\n    [IsFiniteKernel κ] [IsFiniteKernel η] (a : α) :\n    withDensity η (rnDeriv κ η) a = 0 ↔ κ a ⟂ₘ η a := by\n  conv_rhs => rw [← rnDeriv_add_singularPart κ η, coe_add, Pi.add_apply]\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · rw [h, zero_add]\n    exact mutuallySingular_singularPart _ _ _\n  rw [Measure.MutuallySingular.add_left_iff] at h\n  rw [← Measure.MutuallySingular.self_iff]\n  exact h.1.mono_ac Measure.AbsolutelyContinuous.rfl\n    (withDensity_absolutelyContinuous (κ := η) (rnDeriv κ η) a)\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_eq_zero_iff_measure_eq_zero","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Iff (Eq ((κ.singularPart η) a) 0) (Eq ((κ a) (κ.mutuallySingularSetSlice η a)) 0)","decl":"lemma singularPart_eq_zero_iff_measure_eq_zero (κ η : Kernel α γ)\n    [IsFiniteKernel κ] [IsFiniteKernel η] (a : α) :\n    singularPart κ η a = 0 ↔ κ a (mutuallySingularSetSlice κ η a) = 0 := by\n  have h_eq_add := rnDeriv_add_singularPart κ η\n  simp_rw [Kernel.ext_iff, Measure.ext_iff] at h_eq_add\n  specialize h_eq_add a (mutuallySingularSetSlice κ η a)\n    (measurableSet_mutuallySingularSetSlice κ η a)\n  simp only [coe_add, Pi.add_apply, Measure.coe_add,\n    withDensity_rnDeriv_mutuallySingularSetSlice κ η, zero_add] at h_eq_add\n  rw [← h_eq_add]\n  exact singularPart_eq_zero_iff_apply_eq_zero κ η a\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_eq_zero_iff_measure_eq_zero","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Iff (Eq ((η.withDensity (κ.rnDeriv η)) a) 0) (Eq ((κ a) (HasCompl.compl (κ.mutuallySingularSetSlice η a))) 0)","decl":"lemma withDensity_rnDeriv_eq_zero_iff_measure_eq_zero (κ η : Kernel α γ)\n    [IsFiniteKernel κ] [IsFiniteKernel η] (a : α) :\n    withDensity η (rnDeriv κ η) a = 0 ↔ κ a (mutuallySingularSetSlice κ η a)ᶜ = 0 := by\n  have h_eq_add := rnDeriv_add_singularPart κ η\n  simp_rw [Kernel.ext_iff, Measure.ext_iff] at h_eq_add\n  specialize h_eq_add a (mutuallySingularSetSlice κ η a)ᶜ\n    (measurableSet_mutuallySingularSetSlice κ η a).compl\n  simp only [coe_add, Pi.add_apply, Measure.coe_add,\n    singularPart_compl_mutuallySingularSetSlice κ η, add_zero] at h_eq_add\n  rw [← h_eq_add]\n  exact withDensity_rnDeriv_eq_zero_iff_apply_eq_zero κ η a\n\n"}
{"name":"ProbabilityTheory.Kernel.measurableSet_absolutelyContinuous","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ MeasurableSet (setOf fun a => (κ a).AbsolutelyContinuous (η a))","decl":"/-- The set of points `a : α` such that `κ a ≪ η a` is measurable. -/\n@[measurability]\nlemma measurableSet_absolutelyContinuous (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] :\n    MeasurableSet {a | κ a ≪ η a} := by\n  simp_rw [← singularPart_eq_zero_iff_absolutelyContinuous,\n    singularPart_eq_zero_iff_measure_eq_zero]\n  exact measurable_kernel_prod_mk_left (measurableSet_mutuallySingularSet κ η)\n    (measurableSet_singleton 0)\n\n"}
{"name":"ProbabilityTheory.Kernel.measurableSet_mutuallySingular","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ MeasurableSet (setOf fun a => (κ a).MutuallySingular (η a))","decl":"/-- The set of points `a : α` such that `κ a ⟂ₘ η a` is measurable. -/\n@[measurability]\nlemma measurableSet_mutuallySingular (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] :\n    MeasurableSet {a | κ a ⟂ₘ η a} := by\n  simp_rw [← withDensity_rnDeriv_eq_zero_iff_mutuallySingular,\n    withDensity_rnDeriv_eq_zero_iff_measure_eq_zero]\n  exact measurable_kernel_prod_mk_left (measurableSet_mutuallySingularSet κ η).compl\n    (measurableSet_singleton 0)\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_self","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\n⊢ Eq (κ.singularPart κ) 0","decl":"@[simp]\nlemma singularPart_self (κ : Kernel α γ) [IsFiniteKernel κ] : κ.singularPart κ = 0 := by\n  ext : 1; rw [zero_apply, singularPart_eq_zero_iff_absolutelyContinuous]\n\n"}
{"name":"ProbabilityTheory.Kernel.eq_rnDeriv_measure","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η ξ : ProbabilityTheory.Kernel α γ\nf : α → γ → ENNReal\ninst✝ : ProbabilityTheory.IsFiniteKernel η\nh : Eq κ (HAdd.hAdd (η.withDensity f) ξ)\nhf : Measurable (Function.uncurry f)\na : α\nhξ : (ξ a).MutuallySingular (η a)\n⊢ (MeasureTheory.ae (η a)).EventuallyEq (f a) ((κ a).rnDeriv (η a))","decl":"omit hαγ in\nlemma eq_rnDeriv_measure (h : κ = η.withDensity f + ξ)\n    (hf : Measurable (Function.uncurry f)) (a : α) (hξ : ξ a ⟂ₘ η a) :\n    f a =ᵐ[η a] ∂(κ a)/∂(η a) := by\n  have : κ a = ξ a + (η a).withDensity (f a) := by\n    rw [h, coe_add, Pi.add_apply, η.withDensity_apply hf, add_comm]\n  exact (κ a).eq_rnDeriv₀ (hf.comp measurable_prod_mk_left).aemeasurable hξ this\n\n"}
{"name":"ProbabilityTheory.Kernel.eq_singularPart_measure","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η ξ : ProbabilityTheory.Kernel α γ\nf : α → γ → ENNReal\ninst✝ : ProbabilityTheory.IsFiniteKernel η\nh : Eq κ (HAdd.hAdd (η.withDensity f) ξ)\nhf : Measurable (Function.uncurry f)\na : α\nhξ : (ξ a).MutuallySingular (η a)\n⊢ Eq (ξ a) ((κ a).singularPart (η a))","decl":"omit hαγ in\nlemma eq_singularPart_measure (h : κ = η.withDensity f + ξ)\n    (hf : Measurable (Function.uncurry f)) (a : α) (hξ : ξ a ⟂ₘ η a) :\n    ξ a = (κ a).singularPart (η a) := by\n  have : κ a = ξ a + (η a).withDensity (f a) := by\n    rw [h, coe_add, Pi.add_apply, η.withDensity_apply hf, add_comm]\n  exact (κ a).eq_singularPart (hf.comp measurable_prod_mk_left) hξ this\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_eq_rnDeriv_measure","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel η\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\na : α\n⊢ (MeasureTheory.ae (η a)).EventuallyEq (κ.rnDeriv η a) ((κ a).rnDeriv (η a))","decl":"lemma rnDeriv_eq_rnDeriv_measure : rnDeriv κ η a =ᵐ[η a] ∂(κ a)/∂(η a) :=\n  eq_rnDeriv_measure (rnDeriv_add_singularPart κ η).symm (measurable_rnDeriv κ η) a\n    (mutuallySingular_singularPart κ η a)\n\n"}
{"name":"ProbabilityTheory.Kernel.singularPart_eq_singularPart_measure","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel η\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\na : α\n⊢ Eq ((κ.singularPart η) a) ((κ a).singularPart (η a))","decl":"lemma singularPart_eq_singularPart_measure : singularPart κ η a = (κ a).singularPart (η a) :=\n  eq_singularPart_measure (rnDeriv_add_singularPart κ η).symm (measurable_rnDeriv κ η) a\n    (mutuallySingular_singularPart κ η a)\n\n"}
{"name":"ProbabilityTheory.Kernel.eq_rnDeriv","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nξ : ProbabilityTheory.Kernel α γ\nf : α → γ → ENNReal\ninst✝¹ : ProbabilityTheory.IsFiniteKernel η\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nh : Eq κ (HAdd.hAdd (η.withDensity f) ξ)\nhf : Measurable (Function.uncurry f)\na : α\nhξ : (ξ a).MutuallySingular (η a)\n⊢ (MeasureTheory.ae (η a)).EventuallyEq (f a) (κ.rnDeriv η a)","decl":"lemma eq_rnDeriv (h : κ = η.withDensity f + ξ)\n    (hf : Measurable (Function.uncurry f)) (a : α) (hξ : ξ a ⟂ₘ η a) :\n    f a =ᵐ[η a] rnDeriv κ η a :=\n  (eq_rnDeriv_measure h hf a hξ).trans rnDeriv_eq_rnDeriv_measure.symm\n\n"}
{"name":"ProbabilityTheory.Kernel.eq_singularPart","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nξ : ProbabilityTheory.Kernel α γ\nf : α → γ → ENNReal\ninst✝¹ : ProbabilityTheory.IsFiniteKernel η\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\nh : Eq κ (HAdd.hAdd (η.withDensity f) ξ)\nhf : Measurable (Function.uncurry f)\na : α\nhξ : (ξ a).MutuallySingular (η a)\n⊢ Eq (ξ a) ((κ.singularPart η) a)","decl":"lemma eq_singularPart (h : κ = η.withDensity f + ξ)\n    (hf : Measurable (Function.uncurry f)) (a : α) (hξ : ξ a ⟂ₘ η a) :\n    ξ a = singularPart κ η a :=\n  (eq_singularPart_measure h hf a hξ).trans singularPart_eq_singularPart_measure.symm\n\n"}
{"name":"ProbabilityTheory.Kernel.instIsFiniteKernelWithDensityRnDeriv","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nhκ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ ProbabilityTheory.IsFiniteKernel (η.withDensity (κ.rnDeriv η))","decl":"instance [hκ : IsFiniteKernel κ] [IsFiniteKernel η] :\n    IsFiniteKernel (withDensity η (rnDeriv κ η)) := by\n  refine ⟨hκ.bound, hκ.bound_lt_top, fun a ↦ ?_⟩\n  rw [Kernel.withDensity_apply', setLIntegral_univ]\n  swap; · exact measurable_rnDeriv κ η\n  rw [lintegral_congr_ae rnDeriv_eq_rnDeriv_measure]\n  exact Measure.lintegral_rnDeriv_le.trans (measure_le_bound _ _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.instIsFiniteKernelSingularPart","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nhκ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ ProbabilityTheory.IsFiniteKernel (κ.singularPart η)","decl":"instance [hκ : IsFiniteKernel κ] [IsFiniteKernel η] : IsFiniteKernel (singularPart κ η) := by\n  refine ⟨hκ.bound, hκ.bound_lt_top, fun a ↦ ?_⟩\n  have h : withDensity η (rnDeriv κ η) a univ + singularPart κ η a univ = κ a univ := by\n    conv_rhs => rw [← rnDeriv_add_singularPart κ η]\n    simp\n  exact (self_le_add_left _ _).trans (h.le.trans (measure_le_bound _ _ _))\n\n"}
{"name":"ProbabilityTheory.Kernel.measurable_singularPart","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\n⊢ Measurable fun a => (κ a).singularPart (η a)","decl":"/-- For two kernels `κ, η`, the singular part of `κ a` with respect to `η a` is a measurable\nfunction of `a`. -/\nlemma measurable_singularPart (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] :\n    Measurable (fun a ↦ (κ a).singularPart (η a)) := by\n  refine Measure.measurable_of_measurable_coe _ (fun s hs ↦ ?_)\n  simp_rw [← κ.singularPart_eq_singularPart_measure, κ.singularPart_def η]\n  exact Kernel.measurable_coe _ hs\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_self","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\na : α\n⊢ (MeasureTheory.ae (κ a)).EventuallyEq (κ.rnDeriv κ a) 1","decl":"lemma rnDeriv_self (κ : Kernel α γ) [IsFiniteKernel κ] (a : α) : rnDeriv κ κ a =ᵐ[κ a] 1 :=\n  (κ.rnDeriv_eq_rnDeriv_measure).trans (κ a).rnDeriv_self\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_singularPart","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ ν : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel ν\na : α\n⊢ (MeasureTheory.ae (ν a)).EventuallyEq ((κ.singularPart ν).rnDeriv ν a) 0","decl":"lemma rnDeriv_singularPart (κ ν : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel ν] (a : α) :\n    rnDeriv (singularPart κ ν) ν a =ᵐ[ν a] 0 := by\n  filter_upwards [(singularPart κ ν).rnDeriv_eq_rnDeriv_measure,\n    (Measure.rnDeriv_eq_zero _ _).mpr (mutuallySingular_singularPart κ ν a)] with x h1 h2\n  rw [h1, h2]\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_lt_top","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Filter.Eventually (fun x => LT.lt (κ.rnDeriv η a x) Top.top) (MeasureTheory.ae (η a))","decl":"lemma rnDeriv_lt_top (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] {a : α} :\n    ∀ᵐ x ∂(η a), rnDeriv κ η a x < ∞ := by\n  filter_upwards [κ.rnDeriv_eq_rnDeriv_measure, (κ a).rnDeriv_ne_top _]\n    with x heq htop using heq ▸ htop.lt_top\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_ne_top","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ Filter.Eventually (fun x => Ne (κ.rnDeriv η a x) Top.top) (MeasureTheory.ae (η a))","decl":"lemma rnDeriv_ne_top (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] {a : α} :\n    ∀ᵐ x ∂(η a), rnDeriv κ η a x ≠ ∞ := by\n  filter_upwards [κ.rnDeriv_lt_top η] with a h using h.ne\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_pos","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\nha : (κ a).AbsolutelyContinuous (η a)\n⊢ Filter.Eventually (fun x => LT.lt 0 (κ.rnDeriv η a x)) (MeasureTheory.ae (κ a))","decl":"lemma rnDeriv_pos [IsFiniteKernel κ] [IsFiniteKernel η] {a : α} (ha : κ a ≪ η a) :\n    ∀ᵐ x ∂(κ a), 0 < rnDeriv κ η a x := by\n  filter_upwards [ha.ae_le κ.rnDeriv_eq_rnDeriv_measure, Measure.rnDeriv_pos ha]\n    with x heq hpos using heq ▸ hpos\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_toReal_pos","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\nh : (κ a).AbsolutelyContinuous (η a)\n⊢ Filter.Eventually (fun x => LT.lt 0 (κ.rnDeriv η a x).toReal) (MeasureTheory.ae (κ a))","decl":"lemma rnDeriv_toReal_pos [IsFiniteKernel κ] [IsFiniteKernel η] {a : α} (h : κ a ≪ η a) :\n    ∀ᵐ x ∂(κ a), 0 < (rnDeriv κ η a x).toReal := by\n  filter_upwards [rnDeriv_pos h, h.ae_le (rnDeriv_ne_top κ _)] with x h0 htop\n  simp_all only [pos_iff_ne_zero, ne_eq, ENNReal.toReal_pos, not_false_eq_true, and_self]\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_add","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ ν η : ProbabilityTheory.Kernel α γ\ninst✝² : ProbabilityTheory.IsFiniteKernel κ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel ν\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ (MeasureTheory.ae (η a)).EventuallyEq ((HAdd.hAdd κ ν).rnDeriv η a) (HAdd.hAdd (κ.rnDeriv η a) (ν.rnDeriv η a))","decl":"lemma rnDeriv_add (κ ν η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel ν] [IsFiniteKernel η]\n    (a : α) :\n    rnDeriv (κ + ν) η a =ᵐ[η a] rnDeriv κ η a + rnDeriv ν η a := by\n  filter_upwards [(κ + ν).rnDeriv_eq_rnDeriv_measure, κ.rnDeriv_eq_rnDeriv_measure,\n    ν.rnDeriv_eq_rnDeriv_measure, (κ a).rnDeriv_add (ν a) (η a)] with x h1 h2 h3 h4\n  rw [h1, Pi.add_apply, h2, h3, coe_add, Pi.add_apply, h4, Pi.add_apply]\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_le","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\nκ η : ProbabilityTheory.Kernel α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\n⊢ LE.le ((η.withDensity (κ.rnDeriv η)) a) (κ a)","decl":"lemma withDensity_rnDeriv_le (κ η : Kernel α γ) [IsFiniteKernel κ] [IsFiniteKernel η] (a : α) :\n    η.withDensity (κ.rnDeriv η) a ≤ κ a := by\n  refine Measure.le_intro (fun s hs _ ↦ ?_)\n  rw [Kernel.withDensity_apply']\n  swap; · exact κ.measurable_rnDeriv _\n  rw [setLIntegral_congr_fun hs ((κ.rnDeriv_eq_rnDeriv_measure).mono (fun x hx _ ↦ hx)),\n    ← withDensity_apply _ hs]\n  exact (κ a).withDensity_rnDeriv_le _ _\n\n"}
{"name":"ProbabilityTheory.Kernel.withDensity_rnDeriv_eq","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ η : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\ninst✝ : ProbabilityTheory.IsFiniteKernel η\na : α\nh : (κ a).AbsolutelyContinuous (η a)\n⊢ Eq ((η.withDensity (κ.rnDeriv η)) a) (κ a)","decl":"lemma withDensity_rnDeriv_eq [IsFiniteKernel κ] [IsFiniteKernel η] {a : α} (h : κ a ≪ η a) :\n    η.withDensity (κ.rnDeriv η) a = κ a := by\n  rw [Kernel.withDensity_apply]\n  swap; · exact κ.measurable_rnDeriv _\n  have h_ae := κ.rnDeriv_eq_rnDeriv_measure (η := η) (a := a)\n  rw [MeasureTheory.withDensity_congr_ae h_ae, (κ a).withDensity_rnDeriv_eq _ h]\n\n"}
{"name":"ProbabilityTheory.Kernel.rnDeriv_withDensity","module":"Mathlib.Probability.Kernel.RadonNikodym","initialProofState":"α : Type u_1\nγ : Type u_2\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nκ : ProbabilityTheory.Kernel α γ\nhαγ : MeasurableSpace.CountableOrCountablyGenerated α γ\ninst✝¹ : ProbabilityTheory.IsFiniteKernel κ\nf : α → γ → ENNReal\ninst✝ : ProbabilityTheory.IsFiniteKernel (κ.withDensity f)\nhf : Measurable (Function.uncurry f)\na : α\n⊢ (MeasureTheory.ae (κ a)).EventuallyEq ((κ.withDensity f).rnDeriv κ a) (f a)","decl":"lemma rnDeriv_withDensity [IsFiniteKernel κ] {f : α → γ → ℝ≥0∞} [IsFiniteKernel (withDensity κ f)]\n    (hf : Measurable (Function.uncurry f)) (a : α) :\n    (κ.withDensity f).rnDeriv κ a =ᵐ[κ a] f a := by\n  have h_ae := (κ.withDensity f).rnDeriv_eq_rnDeriv_measure (η := κ) (a := a)\n  have hf' : ∀ a, Measurable (f a) := fun _ ↦ hf.of_uncurry_left\n  filter_upwards [h_ae, (κ a).rnDeriv_withDensity (hf' a)] with x hx1 hx2\n  rw [hx1, κ.withDensity_apply hf, hx2]\n\n"}
