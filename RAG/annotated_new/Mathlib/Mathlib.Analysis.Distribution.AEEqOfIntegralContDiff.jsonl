{"name":"ae_eq_zero_of_integral_smooth_smul_eq_zero","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : FiniteDimensional Real E\nF : Type u_2\ninst✝¹⁰ : NormedAddCommGroup F\ninst✝⁹ : NormedSpace Real F\ninst✝⁸ : CompleteSpace F\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ninst✝⁴ : IsManifold I (↑Top.top) M\ninst✝³ : MeasurableSpace M\ninst✝² : BorelSpace M\ninst✝¹ : T2Space M\nf : M → F\nμ : MeasureTheory.Measure M\ninst✝ : SigmaCompactSpace M\nhf : MeasureTheory.LocallyIntegrable f μ\nh : ∀ (g : M → Real), ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) g → HasCompactSupport g → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) 0\n⊢ Filter.Eventually (fun x => Eq (f x) 0) (MeasureTheory.ae μ)","decl":"/-- If a locally integrable function `f` on a finite-dimensional real manifold has zero integral\nwhen multiplied by any smooth compactly supported function, then `f` vanishes almost everywhere. -/\ntheorem ae_eq_zero_of_integral_smooth_smul_eq_zero [SigmaCompactSpace M]\n    (hf : LocallyIntegrable f μ)\n    (h : ∀ g : M → ℝ, ContMDiff I 𝓘(ℝ) ∞ g → HasCompactSupport g → ∫ x, g x • f x ∂μ = 0) :\n    ∀ᵐ x ∂μ, f x = 0 := by\n  -- record topological properties of `M`\n  have := I.locallyCompactSpace\n  have := ChartedSpace.locallyCompactSpace H M\n  have := I.secondCountableTopology\n  have := ChartedSpace.secondCountable_of_sigmaCompact H M\n  have := Manifold.metrizableSpace I M\n  let _ : MetricSpace M := TopologicalSpace.metrizableSpaceMetric M\n  -- it suffices to show that the integral of the function vanishes on any compact set `s`\n  apply ae_eq_zero_of_forall_setIntegral_isCompact_eq_zero' hf (fun s hs ↦ Eq.symm ?_)\n  obtain ⟨δ, δpos, hδ⟩ : ∃ δ, 0 < δ ∧ IsCompact (cthickening δ s) := hs.exists_isCompact_cthickening\n  -- choose a sequence of smooth functions `gₙ` equal to `1` on `s` and vanishing outside of the\n  -- `uₙ`-neighborhood of `s`, where `uₙ` tends to zero. Then each integral `∫ gₙ f` vanishes,\n  -- and by dominated convergence these integrals converge to `∫ x in s, f`.\n  obtain ⟨u, -, u_pos, u_lim⟩ : ∃ u, StrictAnti u ∧ (∀ (n : ℕ), u n ∈ Ioo 0 δ)\n    ∧ Tendsto u atTop (𝓝 0) := exists_seq_strictAnti_tendsto' δpos\n  let v : ℕ → Set M := fun n ↦ thickening (u n) s\n  obtain ⟨K, K_compact, vK⟩ : ∃ K, IsCompact K ∧ ∀ n, v n ⊆ K :=\n    ⟨_, hδ, fun n ↦ thickening_subset_cthickening_of_le (u_pos n).2.le _⟩\n  have : ∀ n, ∃ (g : M → ℝ), support g = v n ∧ ContMDiff I 𝓘(ℝ) ∞ g ∧ Set.range g ⊆ Set.Icc 0 1\n          ∧ ∀ x ∈ s, g x = 1 := by\n    intro n\n    rcases exists_msmooth_support_eq_eq_one_iff I isOpen_thickening hs.isClosed\n      (self_subset_thickening (u_pos n).1 s) with ⟨g, g_smooth, g_range, g_supp, hg⟩\n    exact ⟨g, g_supp, g_smooth, g_range, fun x hx ↦ (hg x).1 hx⟩\n  choose g g_supp g_diff g_range hg using this\n  -- main fact: the integral of `∫ gₙ f` tends to `∫ x in s, f`.\n  have L : Tendsto (fun n ↦ ∫ x, g n x • f x ∂μ) atTop (𝓝 (∫ x in s, f x ∂μ)) := by\n    rw [← integral_indicator hs.measurableSet]\n    let bound : M → ℝ := K.indicator (fun x ↦ ‖f x‖)\n    have A : ∀ n, AEStronglyMeasurable (fun x ↦ g n x • f x) μ :=\n      fun n ↦ (g_diff n).continuous.aestronglyMeasurable.smul hf.aestronglyMeasurable\n    have B : Integrable bound μ := by\n      rw [integrable_indicator_iff K_compact.measurableSet]\n      exact (hf.integrableOn_isCompact K_compact).norm\n    have C : ∀ n, ∀ᵐ x ∂μ, ‖g n x • f x‖ ≤ bound x := by\n      intro n\n      filter_upwards with x\n      rw [norm_smul]\n      refine le_indicator_apply (fun _ ↦ ?_) (fun hxK ↦ ?_)\n      · have : ‖g n x‖ ≤ 1 := by\n          have := g_range n (mem_range_self (f := g n) x)\n          rw [Real.norm_of_nonneg this.1]\n          exact this.2\n        exact mul_le_of_le_one_left (norm_nonneg _) this\n      · have : g n x = 0 := by rw [← nmem_support, g_supp]; contrapose! hxK; exact vK n hxK\n        simp [this]\n    have D : ∀ᵐ x ∂μ, Tendsto (fun n => g n x • f x) atTop (𝓝 (s.indicator f x)) := by\n      filter_upwards with x\n      by_cases hxs : x ∈ s\n      · have : ∀ n, g n x = 1 := fun n ↦ hg n x hxs\n        simp [this, indicator_of_mem hxs f]\n      · simp_rw [indicator_of_not_mem hxs f]\n        apply tendsto_const_nhds.congr'\n        suffices H : ∀ᶠ n in atTop, g n x = 0 by\n          filter_upwards [H] with n hn using by simp [hn]\n        obtain ⟨ε, εpos, hε⟩ : ∃ ε, 0 < ε ∧ x ∉ thickening ε s := by\n          rw [← hs.isClosed.closure_eq, closure_eq_iInter_thickening s] at hxs\n          simpa using hxs\n        filter_upwards [(tendsto_order.1 u_lim).2 _ εpos] with n hn\n        rw [← nmem_support, g_supp]\n        contrapose! hε\n        exact thickening_mono hn.le s hε\n    exact tendsto_integral_of_dominated_convergence bound A B C D\n  -- deduce that `∫ x in s, f = 0` as each integral `∫ gₙ f` vanishes by assumption\n  have : ∀ n, ∫ x, g n x • f x ∂μ = 0 := by\n    refine fun n ↦ h _ (g_diff n) ?_\n    apply HasCompactSupport.of_support_subset_isCompact K_compact\n    simpa [g_supp] using vK n\n  simpa [this] using L\n\n-- An instance with keys containing `Opens`\n"}
{"name":"instBorelSpaceSubtypeMemOpens","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"M : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : MeasurableSpace M\ninst✝ : BorelSpace M\nU : TopologicalSpace.Opens M\n⊢ BorelSpace (Subtype fun x => Membership.mem U x)","decl":"instance (U : Opens M) : BorelSpace U := inferInstanceAs (BorelSpace (U : Set M))\n\n"}
{"name":"IsOpen.ae_eq_zero_of_integral_smooth_smul_eq_zero'","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝¹² : NormedAddCommGroup E\ninst✝¹¹ : NormedSpace Real E\ninst✝¹⁰ : FiniteDimensional Real E\nF : Type u_2\ninst✝⁹ : NormedAddCommGroup F\ninst✝⁸ : NormedSpace Real F\ninst✝⁷ : CompleteSpace F\nH : Type u_3\ninst✝⁶ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_4\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\ninst✝³ : IsManifold I (↑Top.top) M\ninst✝² : MeasurableSpace M\ninst✝¹ : BorelSpace M\ninst✝ : T2Space M\nf : M → F\nμ : MeasureTheory.Measure M\nU : Set M\nhU : IsOpen U\nhSig : IsSigmaCompact U\nhf : MeasureTheory.LocallyIntegrableOn f U μ\nh : ∀ (g : M → Real), ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) g → HasCompactSupport g → HasSubset.Subset (tsupport g) U → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) 0\n⊢ Filter.Eventually (fun x => Membership.mem U x → Eq (f x) 0) (MeasureTheory.ae μ)","decl":"/-- If a function `f` locally integrable on an open subset `U` of a finite-dimensional real\n  manifold has zero integral when multiplied by any smooth function compactly supported\n  in `U`, then `f` vanishes almost everywhere in `U`. -/\nnonrec theorem IsOpen.ae_eq_zero_of_integral_smooth_smul_eq_zero' {U : Set M} (hU : IsOpen U)\n    (hSig : IsSigmaCompact U) (hf : LocallyIntegrableOn f U μ)\n    (h : ∀ g : M → ℝ,\n      ContMDiff I 𝓘(ℝ) ∞ g → HasCompactSupport g → tsupport g ⊆ U → ∫ x, g x • f x ∂μ = 0) :\n    ∀ᵐ x ∂μ, x ∈ U → f x = 0 := by\n  have meas_U := hU.measurableSet\n  rw [← ae_restrict_iff' meas_U, ae_restrict_iff_subtype meas_U]\n  let U : Opens M := ⟨U, hU⟩\n  change ∀ᵐ (x : U) ∂_, _\n  haveI : SigmaCompactSpace U := isSigmaCompact_iff_sigmaCompactSpace.mp hSig\n  refine ae_eq_zero_of_integral_smooth_smul_eq_zero I ?_ fun g g_smth g_supp ↦ ?_\n  · exact (locallyIntegrable_comap meas_U).mpr hf\n  specialize h (Subtype.val.extend g 0) (g_smth.extend_zero g_supp)\n    (g_supp.extend_zero continuous_subtype_val) ((g_supp.tsupport_extend_zero_subset\n      continuous_subtype_val).trans <| Subtype.coe_image_subset _ _)\n  rw [← setIntegral_eq_integral_of_forall_compl_eq_zero (s := U) fun x hx ↦ ?_] at h\n  · rw [← integral_subtype_comap] at h\n    · simp_rw [Subtype.val_injective.extend_apply] at h; exact h\n    · exact meas_U\n  rw [Function.extend_apply' _ _ _ (mt _ hx)]\n  · apply zero_smul\n  · rintro ⟨x, rfl⟩; exact x.2\n\n"}
{"name":"IsOpen.ae_eq_zero_of_integral_smooth_smul_eq_zero","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : FiniteDimensional Real E\nF : Type u_2\ninst✝¹⁰ : NormedAddCommGroup F\ninst✝⁹ : NormedSpace Real F\ninst✝⁸ : CompleteSpace F\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ninst✝⁴ : IsManifold I (↑Top.top) M\ninst✝³ : MeasurableSpace M\ninst✝² : BorelSpace M\ninst✝¹ : T2Space M\nf : M → F\nμ : MeasureTheory.Measure M\ninst✝ : SigmaCompactSpace M\nU : Set M\nhU : IsOpen U\nhf : MeasureTheory.LocallyIntegrableOn f U μ\nh : ∀ (g : M → Real), ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) g → HasCompactSupport g → HasSubset.Subset (tsupport g) U → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) 0\n⊢ Filter.Eventually (fun x => Membership.mem U x → Eq (f x) 0) (MeasureTheory.ae μ)","decl":"theorem IsOpen.ae_eq_zero_of_integral_smooth_smul_eq_zero {U : Set M} (hU : IsOpen U)\n    (hf : LocallyIntegrableOn f U μ)\n    (h : ∀ g : M → ℝ,\n      ContMDiff I 𝓘(ℝ) ∞ g → HasCompactSupport g → tsupport g ⊆ U → ∫ x, g x • f x ∂μ = 0) :\n    ∀ᵐ x ∂μ, x ∈ U → f x = 0 :=\n  haveI := I.locallyCompactSpace\n  haveI := ChartedSpace.locallyCompactSpace H M\n  haveI := hU.locallyCompactSpace\n  haveI := I.secondCountableTopology\n  haveI := ChartedSpace.secondCountable_of_sigmaCompact H M\n  hU.ae_eq_zero_of_integral_smooth_smul_eq_zero' _\n    (isSigmaCompact_iff_sigmaCompactSpace.mpr inferInstance) hf h\n\n"}
{"name":"ae_eq_of_integral_smooth_smul_eq","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝¹³ : NormedAddCommGroup E\ninst✝¹² : NormedSpace Real E\ninst✝¹¹ : FiniteDimensional Real E\nF : Type u_2\ninst✝¹⁰ : NormedAddCommGroup F\ninst✝⁹ : NormedSpace Real F\ninst✝⁸ : CompleteSpace F\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\ninst✝⁴ : IsManifold I (↑Top.top) M\ninst✝³ : MeasurableSpace M\ninst✝² : BorelSpace M\ninst✝¹ : T2Space M\nf f' : M → F\nμ : MeasureTheory.Measure M\ninst✝ : SigmaCompactSpace M\nhf : MeasureTheory.LocallyIntegrable f μ\nhf' : MeasureTheory.LocallyIntegrable f' μ\nh : ∀ (g : M → Real), ContMDiff I (modelWithCornersSelf Real Real) (↑Top.top) g → HasCompactSupport g → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f' x))\n⊢ Filter.Eventually (fun x => Eq (f x) (f' x)) (MeasureTheory.ae μ)","decl":"/-- If two locally integrable functions on a finite-dimensional real manifold have the same integral\nwhen multiplied by any smooth compactly supported function, then they coincide almost everywhere. -/\ntheorem ae_eq_of_integral_smooth_smul_eq\n    (hf : LocallyIntegrable f μ) (hf' : LocallyIntegrable f' μ) (h : ∀ (g : M → ℝ),\n      ContMDiff I 𝓘(ℝ) ∞ g → HasCompactSupport g → ∫ x, g x • f x ∂μ = ∫ x, g x • f' x ∂μ) :\n    ∀ᵐ x ∂μ, f x = f' x := by\n  have : ∀ᵐ x ∂μ, (f - f') x = 0 := by\n    apply ae_eq_zero_of_integral_smooth_smul_eq_zero I (hf.sub hf')\n    intro g g_diff g_supp\n    simp only [Pi.sub_apply, smul_sub]\n    rw [integral_sub, sub_eq_zero]\n    · exact h g g_diff g_supp\n    · exact hf.integrable_smul_left_of_hasCompactSupport g_diff.continuous g_supp\n    · exact hf'.integrable_smul_left_of_hasCompactSupport g_diff.continuous g_supp\n  filter_upwards [this] with x hx\n  simpa [sub_eq_zero] using hx\n\n"}
{"name":"ae_eq_zero_of_integral_contDiff_smul_eq_zero","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : FiniteDimensional Real E\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\ninst✝² : CompleteSpace F\ninst✝¹ : MeasurableSpace E\ninst✝ : BorelSpace E\nf : E → F\nμ : MeasureTheory.Measure E\nhf : MeasureTheory.LocallyIntegrable f μ\nh : ∀ (g : E → Real), ContDiff Real (↑Top.top) g → HasCompactSupport g → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) 0\n⊢ Filter.Eventually (fun x => Eq (f x) 0) (MeasureTheory.ae μ)","decl":"/-- If a locally integrable function `f` on a finite-dimensional real vector space has zero integral\nwhen multiplied by any smooth compactly supported function, then `f` vanishes almost everywhere. -/\ntheorem ae_eq_zero_of_integral_contDiff_smul_eq_zero (hf : LocallyIntegrable f μ)\n    (h : ∀ (g : E → ℝ), ContDiff ℝ ∞ g → HasCompactSupport g → ∫ x, g x • f x ∂μ = 0) :\n    ∀ᵐ x ∂μ, f x = 0 :=\n  ae_eq_zero_of_integral_smooth_smul_eq_zero 𝓘(ℝ, E) hf\n    (fun g g_diff g_supp ↦ h g g_diff.contDiff g_supp)\n\n"}
{"name":"ae_eq_of_integral_contDiff_smul_eq","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : FiniteDimensional Real E\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\ninst✝² : CompleteSpace F\ninst✝¹ : MeasurableSpace E\ninst✝ : BorelSpace E\nf f' : E → F\nμ : MeasureTheory.Measure E\nhf : MeasureTheory.LocallyIntegrable f μ\nhf' : MeasureTheory.LocallyIntegrable f' μ\nh : ∀ (g : E → Real), ContDiff Real (↑Top.top) g → HasCompactSupport g → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f' x))\n⊢ Filter.Eventually (fun x => Eq (f x) (f' x)) (MeasureTheory.ae μ)","decl":"/-- If two locally integrable functions on a finite-dimensional real vector space have the same\nintegral when multiplied by any smooth compactly supported function, then they coincide almost\neverywhere. -/\ntheorem ae_eq_of_integral_contDiff_smul_eq\n    (hf : LocallyIntegrable f μ) (hf' : LocallyIntegrable f' μ) (h : ∀ (g : E → ℝ),\n      ContDiff ℝ ∞ g → HasCompactSupport g → ∫ x, g x • f x ∂μ = ∫ x, g x • f' x ∂μ) :\n    ∀ᵐ x ∂μ, f x = f' x :=\n  ae_eq_of_integral_smooth_smul_eq 𝓘(ℝ, E) hf hf'\n    (fun g g_diff g_supp ↦ h g g_diff.contDiff g_supp)\n\n"}
{"name":"IsOpen.ae_eq_zero_of_integral_contDiff_smul_eq_zero","module":"Mathlib.Analysis.Distribution.AEEqOfIntegralContDiff","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : FiniteDimensional Real E\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace Real F\ninst✝² : CompleteSpace F\ninst✝¹ : MeasurableSpace E\ninst✝ : BorelSpace E\nf : E → F\nμ : MeasureTheory.Measure E\nU : Set E\nhU : IsOpen U\nhf : MeasureTheory.LocallyIntegrableOn f U μ\nh : ∀ (g : E → Real), ContDiff Real (↑Top.top) g → HasCompactSupport g → HasSubset.Subset (tsupport g) U → Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (g x) (f x)) 0\n⊢ Filter.Eventually (fun x => Membership.mem U x → Eq (f x) 0) (MeasureTheory.ae μ)","decl":"/-- If a function `f` locally integrable on an open subset `U` of a finite-dimensional real\n  vector space has zero integral when multiplied by any smooth function compactly supported\n  in `U`, then `f` vanishes almost everywhere in `U`. -/\ntheorem IsOpen.ae_eq_zero_of_integral_contDiff_smul_eq_zero {U : Set E} (hU : IsOpen U)\n    (hf : LocallyIntegrableOn f U μ)\n    (h : ∀ (g : E → ℝ), ContDiff ℝ ∞ g → HasCompactSupport g → tsupport g ⊆ U →\n        ∫ x, g x • f x ∂μ = 0) :\n    ∀ᵐ x ∂μ, x ∈ U → f x = 0 :=\n  hU.ae_eq_zero_of_integral_smooth_smul_eq_zero 𝓘(ℝ, E) hf\n    (fun g g_diff g_supp ↦ h g g_diff.contDiff g_supp)\n\n"}
