{"name":"IsCyclotomicExtension.zeta_spec","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nA : Type w\nB : Type z\ninst✝³ : CommRing A\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) A B\n⊢ IsPrimitiveRoot (IsCyclotomicExtension.zeta n A B) ↑n","decl":"/-- `zeta n A B` is a primitive `n`-th root of unity. -/\n@[simp]\ntheorem zeta_spec : IsPrimitiveRoot (zeta n A B) n :=\n  Classical.choose_spec (exists_prim_root A (Set.mem_singleton n) : ∃ r : B, IsPrimitiveRoot r n)\n\n"}
{"name":"IsCyclotomicExtension.aeval_zeta","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nA : Type w\nB : Type z\ninst✝⁵ : CommRing A\ninst✝⁴ : CommRing B\ninst✝³ : Algebra A B\ninst✝² : IsCyclotomicExtension (Singleton.singleton n) A B\ninst✝¹ : IsDomain B\ninst✝ : NeZero ↑↑n\n⊢ Eq ((Polynomial.aeval (IsCyclotomicExtension.zeta n A B)) (Polynomial.cyclotomic (↑n) A)) 0","decl":"theorem aeval_zeta [IsDomain B] [NeZero ((n : ℕ) : B)] :\n    aeval (zeta n A B) (cyclotomic n A) = 0 := by\n  rw [aeval_def, ← eval_map, ← IsRoot.def, map_cyclotomic, isRoot_cyclotomic_iff]\n  exact zeta_spec n A B\n\n"}
{"name":"IsCyclotomicExtension.zeta_isRoot","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nA : Type w\nB : Type z\ninst✝⁵ : CommRing A\ninst✝⁴ : CommRing B\ninst✝³ : Algebra A B\ninst✝² : IsCyclotomicExtension (Singleton.singleton n) A B\ninst✝¹ : IsDomain B\ninst✝ : NeZero ↑↑n\n⊢ (Polynomial.cyclotomic (↑n) B).IsRoot (IsCyclotomicExtension.zeta n A B)","decl":"theorem zeta_isRoot [IsDomain B] [NeZero ((n : ℕ) : B)] : IsRoot (cyclotomic n B) (zeta n A B) := by\n  convert aeval_zeta n A B using 0\n  rw [IsRoot.def, aeval_def, eval₂_eq_eval_map, map_cyclotomic]\n\n"}
{"name":"IsCyclotomicExtension.zeta_pow","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nA : Type w\nB : Type z\ninst✝³ : CommRing A\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) A B\n⊢ Eq (HPow.hPow (IsCyclotomicExtension.zeta n A B) ↑n) 1","decl":"theorem zeta_pow : zeta n A B ^ (n : ℕ) = 1 :=\n  (zeta_spec n A B).pow_eq_one\n\n"}
{"name":"IsPrimitiveRoot.powerBasis_dim","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\n⊢ Eq (IsPrimitiveRoot.powerBasis K hζ).dim (minpoly K ζ).natDegree","decl":"/-- The `PowerBasis` given by a primitive root `η`. -/\n@[simps!]\nprotected noncomputable def powerBasis : PowerBasis K L :=\n  -- this is purely an optimization\n  letI pb := Algebra.adjoin.powerBasis <| (integral {n} K L).isIntegral ζ\n  pb.map <| (Subalgebra.equivOfEq _ _ (IsCyclotomicExtension.adjoin_primitive_root_eq_top hζ)).trans\n    Subalgebra.topEquiv\n\n"}
{"name":"IsPrimitiveRoot.powerBasis_gen","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\n⊢ Eq (IsPrimitiveRoot.powerBasis K hζ).gen ζ","decl":"/-- The `PowerBasis` given by a primitive root `η`. -/\n@[simps!]\nprotected noncomputable def powerBasis : PowerBasis K L :=\n  -- this is purely an optimization\n  letI pb := Algebra.adjoin.powerBasis <| (integral {n} K L).isIntegral ζ\n  pb.map <| (Subalgebra.equivOfEq _ _ (IsCyclotomicExtension.adjoin_primitive_root_eq_top hζ)).trans\n    Subalgebra.topEquiv\n\n"}
{"name":"IsPrimitiveRoot.powerBasis_gen_mem_adjoin_zeta_sub_one","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\n⊢ Membership.mem (Algebra.adjoin K (Singleton.singleton (HSub.hSub ζ 1))) (IsPrimitiveRoot.powerBasis K hζ).gen","decl":"theorem powerBasis_gen_mem_adjoin_zeta_sub_one :\n    (hζ.powerBasis K).gen ∈ adjoin K ({ζ - 1} : Set L) := by\n  rw [powerBasis_gen, adjoin_singleton_eq_range_aeval, AlgHom.mem_range]\n  exact ⟨X + 1, by simp⟩\n\n"}
{"name":"IsPrimitiveRoot.subOnePowerBasis_gen","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\n⊢ Eq (IsPrimitiveRoot.subOnePowerBasis K hζ).gen (HSub.hSub ζ 1)","decl":"/-- The `PowerBasis` given by `η - 1`. -/\n@[simps!]\nnoncomputable def subOnePowerBasis : PowerBasis K L :=\n  (hζ.powerBasis K).ofGenMemAdjoin\n    (((integral {n} K L).isIntegral ζ).sub isIntegral_one)\n    (hζ.powerBasis_gen_mem_adjoin_zeta_sub_one _)\n\n"}
{"name":"IsPrimitiveRoot.subOnePowerBasis_dim","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\n⊢ Eq (IsPrimitiveRoot.subOnePowerBasis K hζ).dim (minpoly K (HSub.hSub ζ 1)).natDegree","decl":"/-- The `PowerBasis` given by `η - 1`. -/\n@[simps!]\nnoncomputable def subOnePowerBasis : PowerBasis K L :=\n  (hζ.powerBasis K).ofGenMemAdjoin\n    (((integral {n} K L).isIntegral ζ).sub isIntegral_one)\n    (hζ.powerBasis_gen_mem_adjoin_zeta_sub_one _)\n\n"}
{"name":"IsPrimitiveRoot.embeddingsEquivPrimitiveRoots_apply_coe","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁷ : Field K\ninst✝⁶ : CommRing L\ninst✝⁵ : IsDomain L\ninst✝⁴ : Algebra K L\ninst✝³ : IsCyclotomicExtension (Singleton.singleton n) K L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\nC : Type u_1\ninst✝² : CommRing C\ninst✝¹ : IsDomain C\ninst✝ : Algebra K C\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\nφ' : AlgHom K L C\n⊢ Eq (↑((hζ.embeddingsEquivPrimitiveRoots C hirr) φ')) (φ' ζ)","decl":"@[simp]\ntheorem embeddingsEquivPrimitiveRoots_apply_coe (C : Type*) [CommRing C] [IsDomain C] [Algebra K C]\n    (hirr : Irreducible (cyclotomic n K)) (φ' : L →ₐ[K] C) :\n    (hζ.embeddingsEquivPrimitiveRoots C hirr φ' : C) = φ' ζ :=\n  rfl\n\n"}
{"name":"IsCyclotomicExtension.finrank","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\n⊢ Eq (Module.finrank K L) (↑n).totient","decl":"/-- If `Irreducible (cyclotomic n K)` (in particular for `K = ℚ`), then the `finrank` of a\ncyclotomic extension is `n.totient`. -/\ntheorem finrank (hirr : Irreducible (cyclotomic n K)) : finrank K L = (n : ℕ).totient := by\n  haveI := IsCyclotomicExtension.neZero' n K L\n  rw [((zeta_spec n K L).powerBasis K).finrank, IsPrimitiveRoot.powerBasis_dim, ←\n    (zeta_spec n K L).minpoly_eq_cyclotomic_of_irreducible hirr, natDegree_cyclotomic]\n\n"}
{"name":"IsPrimitiveRoot.lcm_totient_le_finrank","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"K : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : CommRing L\ninst✝² : IsDomain L\ninst✝¹ : Algebra K L\ninst✝ : FiniteDimensional K L\np q : Nat\nx y : L\nhx : IsPrimitiveRoot x p\nhy : IsPrimitiveRoot y q\nhirr : Irreducible (Polynomial.cyclotomic (p.lcm q) K)\n⊢ LE.le (p.lcm q).totient (Module.finrank K L)","decl":"variable {L} in\n/-- If `L` contains both a primitive `p`-th root of unity and `q`-th root of unity, and\n`Irreducible (cyclotomic (lcm p q) K)` (in particular for `K = ℚ`), then the `finrank K L` is at\nleast `(lcm p q).totient`. -/\ntheorem _root_.IsPrimitiveRoot.lcm_totient_le_finrank [FiniteDimensional K L] {p q : ℕ} {x y : L}\n    (hx : IsPrimitiveRoot x p) (hy : IsPrimitiveRoot y q)\n    (hirr : Irreducible (cyclotomic (Nat.lcm p q) K)) :\n    (Nat.lcm p q).totient ≤ Module.finrank K L := by\n  rcases Nat.eq_zero_or_pos p with (rfl | hppos)\n  · simp\n  rcases Nat.eq_zero_or_pos q with (rfl | hqpos)\n  · simp\n  let z := x ^ (p / factorizationLCMLeft p q) * y ^ (q / factorizationLCMRight p q)\n  let k := PNat.lcm ⟨p, hppos⟩ ⟨q, hqpos⟩\n  have : IsPrimitiveRoot z k := hx.pow_mul_pow_lcm hy hppos.ne' hqpos.ne'\n  haveI := IsPrimitiveRoot.adjoin_isCyclotomicExtension K this\n  convert Submodule.finrank_le (Subalgebra.toSubmodule (adjoin K {z}))\n  rw [show Nat.lcm p q = (k : ℕ) from rfl] at hirr\n  simpa using (IsCyclotomicExtension.finrank (Algebra.adjoin K {z}) hirr).symm\n\n"}
{"name":"IsPrimitiveRoot.dvd_of_isCyclotomicExtension","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\ninst✝² : Field K\ninst✝¹ : NumberField K\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) Rat K\nζ : K\nl : Nat\nhζ : IsPrimitiveRoot ζ l\nhl : Ne l 0\n⊢ Dvd.dvd l (HMul.hMul 2 ↑n)","decl":"variable (n) in\n/-- If a `n`-th cyclotomic extension of `ℚ` contains a primitive `l`-th root of unity, then\n`l ∣ 2 * n`. -/\ntheorem dvd_of_isCyclotomicExtension [IsCyclotomicExtension {n} ℚ K] {ζ : K}\n    {l : ℕ} (hζ : IsPrimitiveRoot ζ l) (hl : l ≠ 0) : l ∣ 2 * n := by\n  have hl : NeZero l := ⟨hl⟩\n  have hroot := IsCyclotomicExtension.zeta_spec n ℚ K\n  have key := IsPrimitiveRoot.lcm_totient_le_finrank hζ hroot\n    (cyclotomic.irreducible_rat <| Nat.lcm_pos (Nat.pos_of_ne_zero hl.1) n.2)\n  rw [IsCyclotomicExtension.finrank K (cyclotomic.irreducible_rat n.2)] at key\n  rcases _root_.dvd_lcm_right l n with ⟨r, hr⟩\n  have ineq := Nat.totient_super_multiplicative n r\n  rw [← hr] at ineq\n  replace key := (mul_le_iff_le_one_right (Nat.totient_pos.2 n.2)).mp (le_trans ineq key)\n  have rpos : 0 < r := by\n    refine Nat.pos_of_ne_zero (fun h ↦ ?_)\n    simp only [h, mul_zero, _root_.lcm_eq_zero_iff, PNat.ne_zero, or_false] at hr\n    exact hl.1 hr\n  replace key := (Nat.dvd_prime Nat.prime_two).1 (Nat.dvd_two_of_totient_le_one rpos key)\n  rcases key with (key | key)\n  · rw [key, mul_one] at hr\n    rw [← hr]\n    exact dvd_mul_of_dvd_right (_root_.dvd_lcm_left l ↑n) 2\n  · rw [key, mul_comm] at hr\n    simpa [← hr] using _root_.dvd_lcm_left _ _\n\n"}
{"name":"IsPrimitiveRoot.exists_neg_pow_of_isOfFinOrder","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\ninst✝² : Field K\ninst✝¹ : NumberField K\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) Rat K\nhno : Odd ↑n\nζ x : K\nhζ : IsPrimitiveRoot ζ ↑n\nhx : IsOfFinOrder x\n⊢ Exists fun r => Eq x (HPow.hPow (Neg.neg ζ) r)","decl":"/-- If `x` is a root of unity (spelled as `IsOfFinOrder x`) in an `n`-th cyclotomic extension of\n`ℚ`, where `n` is odd, and `ζ` is a primitive `n`-th root of unity, then there exist `r`\nsuch that `x = (-ζ)^r`. -/\ntheorem exists_neg_pow_of_isOfFinOrder [IsCyclotomicExtension {n} ℚ K]\n    (hno : Odd (n : ℕ)) {ζ x : K} (hζ : IsPrimitiveRoot ζ n) (hx : IsOfFinOrder x) :\n    ∃ r : ℕ, x = (-ζ) ^ r :=  by\n  have hnegζ : IsPrimitiveRoot (-ζ) (2 * n) := by\n    convert IsPrimitiveRoot.orderOf (-ζ)\n    rw [neg_eq_neg_one_mul, (Commute.all _ _).orderOf_mul_eq_mul_orderOf_of_coprime]\n    · simp [hζ.eq_orderOf]\n    · simp [← hζ.eq_orderOf, hno]\n  obtain ⟨k, hkpos, hkn⟩ := isOfFinOrder_iff_pow_eq_one.1 hx\n  obtain ⟨l, hl, hlroot⟩ := (isRoot_of_unity_iff hkpos _).1 hkn\n  have hlzero : NeZero l := ⟨fun h ↦ by simp [h] at hl⟩\n  have : NeZero (l : K) := ⟨NeZero.natCast_ne l K⟩\n  rw [isRoot_cyclotomic_iff] at hlroot\n  obtain ⟨a, ha⟩ := hlroot.dvd_of_isCyclotomicExtension n hlzero.1\n  replace hlroot : x ^ (2 * (n : ℕ)) = 1 := by rw [ha, pow_mul, hlroot.pow_eq_one, one_pow]\n  obtain ⟨s, -, hs⟩ := hnegζ.eq_pow_of_pow_eq_one hlroot\n  exact ⟨s, hs.symm⟩\n\n"}
{"name":"IsPrimitiveRoot.exists_pow_or_neg_mul_pow_of_isOfFinOrder","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\ninst✝² : Field K\ninst✝¹ : NumberField K\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) Rat K\nhno : Odd ↑n\nζ x : K\nhζ : IsPrimitiveRoot ζ ↑n\nhx : IsOfFinOrder x\n⊢ Exists fun r => And (LT.lt r ↑n) (Or (Eq x (HPow.hPow ζ r)) (Eq x (Neg.neg (HPow.hPow ζ r))))","decl":"/-- If `x` is a root of unity (spelled as `IsOfFinOrder x`) in an `n`-th cyclotomic extension of\n`ℚ`, where `n` is odd, and `ζ` is a primitive `n`-th root of unity, then there exists `r < n`\nsuch that `x = ζ^r` or `x = -ζ^r`. -/\ntheorem exists_pow_or_neg_mul_pow_of_isOfFinOrder [IsCyclotomicExtension {n} ℚ K]\n    (hno : Odd (n : ℕ)) {ζ x : K} (hζ : IsPrimitiveRoot ζ n) (hx : IsOfFinOrder x) :\n    ∃ r : ℕ, r < n ∧ (x = ζ ^ r ∨ x = -ζ ^ r) :=  by\n  obtain ⟨r, hr⟩ := hζ.exists_neg_pow_of_isOfFinOrder hno hx\n  refine ⟨r % n, Nat.mod_lt _ n.2, ?_⟩\n  rw [show ζ ^ (r % ↑n) = ζ ^ r from (IsPrimitiveRoot.eq_orderOf hζ).symm ▸ pow_mod_orderOf .., hr]\n  rcases Nat.even_or_odd r with (h | h) <;> simp [neg_pow, h.neg_one_pow]\n\n"}
{"name":"IsPrimitiveRoot.norm_eq_neg_one_pow","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"K : Type u\nL : Type v\ninst✝³ : CommRing L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nhζ : IsPrimitiveRoot ζ 2\ninst✝ : IsDomain L\n⊢ Eq ((Algebra.norm K) ζ) (HPow.hPow (-1) (Module.finrank K L))","decl":"/-- This mathematically trivial result is complementary to `norm_eq_one` below. -/\ntheorem norm_eq_neg_one_pow (hζ : IsPrimitiveRoot ζ 2) [IsDomain L] :\n    norm K ζ = (-1 : K) ^ finrank K L := by\n  rw [hζ.eq_neg_one_of_two_right, show -1 = algebraMap K L (-1) by simp, Algebra.norm_algebraMap]\n\n"}
{"name":"IsPrimitiveRoot.norm_eq_one","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : CommRing L\nζ : L\ninst✝³ : Field K\ninst✝² : Algebra K L\nhζ : IsPrimitiveRoot ζ ↑n\ninst✝¹ : IsDomain L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nhn : Ne n 2\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\n⊢ Eq ((Algebra.norm K) ζ) 1","decl":"/-- If `Irreducible (cyclotomic n K)` (in particular for `K = ℚ`), the norm of a primitive root is\n`1` if `n ≠ 2`. -/\ntheorem norm_eq_one [IsDomain L] [IsCyclotomicExtension {n} K L] (hn : n ≠ 2)\n    (hirr : Irreducible (cyclotomic n K)) : norm K ζ = 1 := by\n  haveI := IsCyclotomicExtension.neZero' n K L\n  by_cases h1 : n = 1\n  · rw [h1, one_coe, one_right_iff] at hζ\n    rw [hζ, show 1 = algebraMap K L 1 by simp, Algebra.norm_algebraMap, one_pow]\n  · replace h1 : 2 ≤ n := by\n      by_contra! h\n      exact h1 (PNat.eq_one_of_lt_two h)\n-- Porting note: specifying the type of `cyclotomic_coeff_zero K h1` was not needed.\n    rw [← hζ.powerBasis_gen K, PowerBasis.norm_gen_eq_coeff_zero_minpoly, hζ.powerBasis_gen K, ←\n      hζ.minpoly_eq_cyclotomic_of_irreducible hirr,\n      (cyclotomic_coeff_zero K h1 : coeff (cyclotomic n K) 0 = 1), mul_one,\n      hζ.powerBasis_dim K, ← hζ.minpoly_eq_cyclotomic_of_irreducible hirr, natDegree_cyclotomic]\n    exact (totient_even <| h1.lt_of_ne hn.symm).neg_one_pow\n\n"}
{"name":"IsPrimitiveRoot.norm_eq_one_of_linearly_ordered","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nL : Type v\ninst✝² : CommRing L\nζ : L\nhζ : IsPrimitiveRoot ζ ↑n\nK : Type u_1\ninst✝¹ : LinearOrderedField K\ninst✝ : Algebra K L\nhodd : Odd ↑n\n⊢ Eq ((Algebra.norm K) ζ) 1","decl":"/-- If `K` is linearly ordered, the norm of a primitive root is `1` if `n` is odd. -/\ntheorem norm_eq_one_of_linearly_ordered {K : Type*} [LinearOrderedField K] [Algebra K L]\n    (hodd : Odd (n : ℕ)) : norm K ζ = 1 := by\n  have hz := congr_arg (norm K) ((IsPrimitiveRoot.iff_def _ n).1 hζ).1\n  rw [← (algebraMap K L).map_one, Algebra.norm_algebraMap, one_pow, map_pow, ← one_pow ↑n] at hz\n  exact StrictMono.injective hodd.strictMono_pow hz\n\n"}
{"name":"IsPrimitiveRoot.norm_of_cyclotomic_irreducible","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝⁴ : CommRing L\nζ : L\ninst✝³ : Field K\ninst✝² : Algebra K L\nhζ : IsPrimitiveRoot ζ ↑n\ninst✝¹ : IsDomain L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\n⊢ Eq ((Algebra.norm K) ζ) (ite (Eq n 2) (-1) 1)","decl":"theorem norm_of_cyclotomic_irreducible [IsDomain L] [IsCyclotomicExtension {n} K L]\n    (hirr : Irreducible (cyclotomic n K)) : norm K ζ = ite (n = 2) (-1) 1 := by\n  split_ifs with hn\n  · subst hn\n    convert norm_eq_neg_one_pow (K := K) hζ\n    erw [IsCyclotomicExtension.finrank _ hirr, totient_two, pow_one]\n  · exact hζ.norm_eq_one hn hirr\n\n"}
{"name":"IsPrimitiveRoot.sub_one_norm_eq_eval_cyclotomic","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝³ : Field L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nhζ : IsPrimitiveRoot ζ ↑n\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nh : LT.lt 2 ↑n\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\n⊢ Eq ((Algebra.norm K) (HSub.hSub ζ 1)) ↑(Polynomial.eval 1 (Polynomial.cyclotomic (↑n) Int))","decl":"/-- If `Irreducible (cyclotomic n K)` (in particular for `K = ℚ`), then the norm of\n`ζ - 1` is `eval 1 (cyclotomic n ℤ)`. -/\ntheorem sub_one_norm_eq_eval_cyclotomic [IsCyclotomicExtension {n} K L] (h : 2 < (n : ℕ))\n    (hirr : Irreducible (cyclotomic n K)) : norm K (ζ - 1) = ↑(eval 1 (cyclotomic n ℤ)) := by\n  haveI := IsCyclotomicExtension.neZero' n K L\n  let E := AlgebraicClosure L\n  obtain ⟨z, hz⟩ := IsAlgClosed.exists_root _ (degree_cyclotomic_pos n E n.pos).ne.symm\n  apply (algebraMap K E).injective\n  letI := IsCyclotomicExtension.finiteDimensional {n} K L\n  letI := IsCyclotomicExtension.isGalois n K L\n  rw [norm_eq_prod_embeddings]\n  conv_lhs =>\n    congr\n    rfl\n    ext\n    rw [← neg_sub, map_neg, map_sub, map_one, neg_eq_neg_one_mul]\n  rw [prod_mul_distrib, prod_const, Finset.card_univ, AlgHom.card,\n    IsCyclotomicExtension.finrank L hirr, (totient_even h).neg_one_pow, one_mul]\n  have Hprod : (Finset.univ.prod fun σ : L →ₐ[K] E => 1 - σ ζ) = eval 1 (cyclotomic' n E) := by\n    rw [cyclotomic', eval_prod, ← @Finset.prod_attach E E, ← univ_eq_attach]\n    refine Fintype.prod_equiv (hζ.embeddingsEquivPrimitiveRoots E hirr) _ _ fun σ => ?_\n    simp\n  haveI : NeZero ((n : ℕ) : E) := NeZero.of_noZeroSMulDivisors K _ (n : ℕ)\n  rw [Hprod, cyclotomic', ← cyclotomic_eq_prod_X_sub_primitiveRoots (isRoot_cyclotomic_iff.1 hz),\n    ← map_cyclotomic_int, _root_.map_intCast, ← Int.cast_one, eval_intCast_map, eq_intCast,\n    Int.cast_id]\n\n"}
{"name":"IsPrimitiveRoot.sub_one_norm_isPrimePow","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝³ : Field L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nhζ : IsPrimitiveRoot ζ ↑n\nhn : IsPrimePow ↑n\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\nh : Ne n 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub ζ 1)) ↑(↑n).minFac","decl":"/-- If `IsPrimePow (n : ℕ)`, `n ≠ 2` and `Irreducible (cyclotomic n K)` (in particular for\n`K = ℚ`), then the norm of `ζ - 1` is `(n : ℕ).minFac`. -/\ntheorem sub_one_norm_isPrimePow (hn : IsPrimePow (n : ℕ)) [IsCyclotomicExtension {n} K L]\n    (hirr : Irreducible (cyclotomic (n : ℕ) K)) (h : n ≠ 2) : norm K (ζ - 1) = (n : ℕ).minFac := by\n  have :=\n    (coe_lt_coe 2 _).1\n      (lt_of_le_of_ne (succ_le_of_lt (IsPrimePow.one_lt hn))\n        (Function.Injective.ne PNat.coe_injective h).symm)\n  letI hprime : Fact (n : ℕ).minFac.Prime := ⟨minFac_prime (IsPrimePow.ne_one hn)⟩\n  rw [sub_one_norm_eq_eval_cyclotomic hζ this hirr]\n  nth_rw 1 [← IsPrimePow.minFac_pow_factorization_eq hn]\n  obtain ⟨k, hk⟩ : ∃ k, (n : ℕ).factorization (n : ℕ).minFac = k + 1 :=\n    exists_eq_succ_of_ne_zero\n      (((n : ℕ).factorization.mem_support_toFun (n : ℕ).minFac).1 <|\n        mem_primeFactors_iff_mem_primeFactorsList.2 <|\n          (mem_primeFactorsList (IsPrimePow.ne_zero hn)).2 ⟨hprime.out, minFac_dvd _⟩)\n  simp [hk, sub_one_norm_eq_eval_cyclotomic hζ this hirr]\n\n"}
{"name":"IsPrimitiveRoot.minpoly_sub_one_eq_cyclotomic_comp","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nA : Type w\nK : Type u\ninst✝⁴ : CommRing A\ninst✝³ : Field K\ninst✝² : Algebra K A\ninst✝¹ : IsDomain A\nζ : A\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K A\nhζ : IsPrimitiveRoot ζ ↑n\nh : Irreducible (Polynomial.cyclotomic (↑n) K)\n⊢ Eq (minpoly K (HSub.hSub ζ 1)) ((Polynomial.cyclotomic (↑n) K).comp (HAdd.hAdd Polynomial.X 1))","decl":"theorem minpoly_sub_one_eq_cyclotomic_comp [Algebra K A] [IsDomain A] {ζ : A}\n    [IsCyclotomicExtension {n} K A] (hζ : IsPrimitiveRoot ζ n)\n    (h : Irreducible (Polynomial.cyclotomic n K)) :\n    minpoly K (ζ - 1) = (cyclotomic n K).comp (X + 1) := by\n  haveI := IsCyclotomicExtension.neZero' n K A\n  rw [show ζ - 1 = ζ + algebraMap K A (-1) by simp [sub_eq_add_neg],\n    minpoly.add_algebraMap ζ,\n    hζ.minpoly_eq_cyclotomic_of_irreducible h]\n  simp\n\n"}
{"name":"IsPrimitiveRoot.norm_pow_sub_one_of_prime_pow_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝³ : Field L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nk s : Nat\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhpri : Fact (Nat.Prime ↑p)\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑(HPow.hPow p (HAdd.hAdd k 1))) K)\nhs : LE.le s k\nhtwo : Ne (HPow.hPow p (HAdd.hAdd (HSub.hSub k s) 1)) 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub (HPow.hPow ζ (HPow.hPow (↑p) s)) 1)) (HPow.hPow (↑↑p) (HPow.hPow (↑p) s))","decl":"/-- If `Irreducible (cyclotomic (p ^ (k + 1)) K)` (in particular for `K = ℚ`) and `p` is a prime,\nthen the norm of `ζ ^ (p ^ s) - 1` is `p ^ (p ^ s)` if `p ^ (k - s + 1) ≠ 2`. See the next lemmas\nfor similar results. -/\ntheorem norm_pow_sub_one_of_prime_pow_ne_two {k s : ℕ} (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1)))\n    [hpri : Fact (p : ℕ).Prime] [IsCyclotomicExtension {p ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (↑(p ^ (k + 1)) : ℕ) K)) (hs : s ≤ k)\n    (htwo : p ^ (k - s + 1) ≠ 2) : norm K (ζ ^ (p : ℕ) ^ s - 1) = (p : K) ^ (p : ℕ) ^ s := by\n  have hirr₁ : Irreducible (cyclotomic ((p : ℕ) ^ (k - s + 1)) K) :=\n    cyclotomic_irreducible_pow_of_irreducible_pow hpri.1 (by omega) hirr\n  rw [← PNat.pow_coe] at hirr₁\n  set η := ζ ^ (p : ℕ) ^ s - 1\n  let η₁ : K⟮η⟯ := IntermediateField.AdjoinSimple.gen K η\n  have hη : IsPrimitiveRoot (η + 1) ((p : ℕ) ^ (k + 1 - s)) := by\n    rw [sub_add_cancel]\n    refine IsPrimitiveRoot.pow (p ^ (k + 1)).pos hζ ?_\n    rw [PNat.pow_coe, ← pow_add, add_comm s, Nat.sub_add_cancel (le_trans hs (Nat.le_succ k))]\n  have : IsCyclotomicExtension {p ^ (k - s + 1)} K K⟮η⟯ := by\n    have HKη : K⟮η⟯ = K⟮η + 1⟯ := by\n      refine le_antisymm ?_ ?_\n      all_goals rw [IntermediateField.adjoin_simple_le_iff]\n      · nth_rw 2 [← add_sub_cancel_right η 1]\n        exact sub_mem (IntermediateField.mem_adjoin_simple_self K (η + 1)) (one_mem _)\n      · exact add_mem (IntermediateField.mem_adjoin_simple_self K η) (one_mem _)\n    rw [HKη]\n    have H := IntermediateField.adjoin_simple_toSubalgebra_of_integral\n      ((integral {p ^ (k + 1)} K L).isIntegral (η + 1))\n    refine IsCyclotomicExtension.equiv _ _ _ (h := ?_) (.refl : K⟮η + 1⟯.toSubalgebra ≃ₐ[K] _)\n    rw [H]\n    have hη' : IsPrimitiveRoot (η + 1) ↑(p ^ (k + 1 - s)) := by simpa using hη\n-- Porting note: `using 1` was not needed.\n    convert hη'.adjoin_isCyclotomicExtension K using 1\n    rw [Nat.sub_add_comm hs]\n  replace hη : IsPrimitiveRoot (η₁ + 1) ↑(p ^ (k - s + 1)) := by\n    apply coe_submonoidClass_iff.1\n    convert hη using 1\n    rw [Nat.sub_add_comm hs, pow_coe]\n-- Porting note: the following `have` were not needed because the locale `cyclotomic` set them\n-- as instances.\n  have := IsCyclotomicExtension.finiteDimensional {p ^ (k + 1)} K L\n  have := IsCyclotomicExtension.isGalois (p ^ (k + 1)) K L\n  rw [norm_eq_norm_adjoin K]\n  have H := hη.sub_one_norm_isPrimePow ?_ hirr₁ htwo\n  swap; · rw [PNat.pow_coe]; exact hpri.1.isPrimePow.pow (Nat.succ_ne_zero _)\n  rw [add_sub_cancel_right] at H\n  rw [H]\n  congr\n  · rw [PNat.pow_coe, Nat.pow_minFac, hpri.1.minFac_eq]\n    exact Nat.succ_ne_zero _\n  have := Module.finrank_mul_finrank K K⟮η⟯ L\n  rw [IsCyclotomicExtension.finrank L hirr, IsCyclotomicExtension.finrank K⟮η⟯ hirr₁,\n    PNat.pow_coe, PNat.pow_coe, Nat.totient_prime_pow hpri.out (k - s).succ_pos,\n    Nat.totient_prime_pow hpri.out k.succ_pos, mul_comm _ ((p : ℕ) - 1), mul_assoc,\n    mul_comm ((p : ℕ) ^ (k.succ - 1))] at this\n  replace this := mul_left_cancel₀ (tsub_pos_iff_lt.2 hpri.out.one_lt).ne' this\n  have Hex : k.succ - 1 = (k - s).succ - 1 + s := by\n    simp only [Nat.succ_sub_succ_eq_sub, tsub_zero]\n    exact (Nat.sub_add_cancel hs).symm\n  rw [Hex, pow_add] at this\n  exact mul_left_cancel₀ (pow_ne_zero _ hpri.out.ne_zero) this\n\n"}
{"name":"IsPrimitiveRoot.norm_pow_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝³ : Field L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nk : Nat\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhpri : Fact (Nat.Prime ↑p)\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑(HPow.hPow p (HAdd.hAdd k 1))) K)\ns : Nat\nhs : LE.le s k\nhodd : Ne p 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub (HPow.hPow ζ (HPow.hPow (↑p) s)) 1)) (HPow.hPow (↑↑p) (HPow.hPow (↑p) s))","decl":"/-- If `Irreducible (cyclotomic (p ^ (k + 1)) K)` (in particular for `K = ℚ`) and `p` is a prime,\nthen the norm of `ζ ^ (p ^ s) - 1` is `p ^ (p ^ s)` if `p ≠ 2`. -/\ntheorem norm_pow_sub_one_of_prime_ne_two {k : ℕ} (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1)))\n    [hpri : Fact (p : ℕ).Prime] [IsCyclotomicExtension {p ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (↑(p ^ (k + 1)) : ℕ) K)) {s : ℕ} (hs : s ≤ k) (hodd : p ≠ 2) :\n    norm K (ζ ^ (p : ℕ) ^ s - 1) = (p : K) ^ (p : ℕ) ^ s := by\n  refine hζ.norm_pow_sub_one_of_prime_pow_ne_two hirr hs fun h => ?_\n  have coe_two : ((2 : ℕ+) : ℕ) = 2 := by norm_cast\n  rw [← PNat.coe_inj, coe_two, PNat.pow_coe, ← pow_one 2] at h\n-- Porting note: the proof is slightly different because of coercions.\n  replace h :=\n    eq_of_prime_pow_eq (prime_iff.1 hpri.out) (prime_iff.1 Nat.prime_two) (k - s).succ_pos h\n  exact hodd (PNat.coe_injective h)\n\n"}
{"name":"IsPrimitiveRoot.norm_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝³ : Field L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nk : Nat\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhpri : Fact (Nat.Prime ↑p)\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑(HPow.hPow p (HAdd.hAdd k 1))) K)\nh : Ne p 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub ζ 1)) ↑↑p","decl":"/-- If `Irreducible (cyclotomic (p ^ (k + 1)) K)` (in particular for `K = ℚ`) and `p` is an odd\nprime, then the norm of `ζ - 1` is `p`. -/\ntheorem norm_sub_one_of_prime_ne_two {k : ℕ} (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1)))\n    [hpri : Fact (p : ℕ).Prime] [IsCyclotomicExtension {p ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (↑(p ^ (k + 1)) : ℕ) K)) (h : p ≠ 2) : norm K (ζ - 1) = p := by\n  simpa using hζ.norm_pow_sub_one_of_prime_ne_two hirr k.zero_le h\n\n"}
{"name":"IsPrimitiveRoot.norm_sub_one_of_prime_ne_two'","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝² : Field L\nζ : L\ninst✝¹ : Field K\ninst✝ : Algebra K L\nhpri : Fact (Nat.Prime ↑p)\nhcyc : IsCyclotomicExtension (Singleton.singleton p) K L\nhζ : IsPrimitiveRoot ζ ↑p\nhirr : Irreducible (Polynomial.cyclotomic (↑p) K)\nh : Ne p 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub ζ 1)) ↑↑p","decl":"/-- If `Irreducible (cyclotomic p K)` (in particular for `K = ℚ`) and `p` is an odd prime,\nthen the norm of `ζ - 1` is `p`. -/\ntheorem norm_sub_one_of_prime_ne_two' [hpri : Fact (p : ℕ).Prime]\n    [hcyc : IsCyclotomicExtension {p} K L] (hζ : IsPrimitiveRoot ζ p)\n    (hirr : Irreducible (cyclotomic p K)) (h : p ≠ 2) : norm K (ζ - 1) = p := by\n  replace hirr : Irreducible (cyclotomic (p ^ (0 + 1) : ℕ) K) := by simp [hirr]\n  replace hζ : IsPrimitiveRoot ζ (p ^ (0 + 1) : ℕ) := by simp [hζ]\n  haveI : IsCyclotomicExtension {p ^ (0 + 1)} K L := by simp [hcyc]\n  simpa using norm_sub_one_of_prime_ne_two hζ hirr h\n\n"}
{"name":"IsPrimitiveRoot.norm_pow_sub_one_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"K : Type u\nL : Type v\ninst✝³ : Field L\nζ : L\ninst✝² : Field K\ninst✝¹ : Algebra K L\nk : Nat\nhζ : IsPrimitiveRoot ζ (HPow.hPow 2 (HAdd.hAdd k 1))\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow 2 (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (HPow.hPow 2 (HAdd.hAdd k 1)) K)\n⊢ Eq ((Algebra.norm K) (HSub.hSub (HPow.hPow ζ (HPow.hPow 2 k)) 1)) (HPow.hPow (-2) (HPow.hPow 2 k))","decl":"/-- If `Irreducible (cyclotomic (2 ^ (k + 1)) K)` (in particular for `K = ℚ`), then the norm of\n`ζ ^ (2 ^ k) - 1` is `(-2) ^ (2 ^ k)`. -/\n-- Porting note: writing `(2 : ℕ+)` was not needed (similarly everywhere).\ntheorem norm_pow_sub_one_two {k : ℕ} (hζ : IsPrimitiveRoot ζ (2 ^ (k + 1)))\n    [IsCyclotomicExtension {(2 : ℕ+) ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (2 ^ (k + 1)) K)) :\n    norm K (ζ ^ 2 ^ k - 1) = (-2 : K) ^ 2 ^ k := by\n  have := hζ.pow_of_dvd (fun h => two_ne_zero (pow_eq_zero h)) (pow_dvd_pow 2 (le_succ k))\n  rw [Nat.pow_div (le_succ k) zero_lt_two, Nat.succ_sub (le_refl k), Nat.sub_self, pow_one] at this\n  have H : (-1 : L) - (1 : L) = algebraMap K L (-2) := by\n    simp only [map_neg, map_ofNat]\n    ring\n  replace hirr : Irreducible (cyclotomic ((2 : ℕ+) ^ (k + 1) : ℕ+) K) := by simp [hirr]\n-- Porting note: the proof is slightly different because of coercions.\n  rw [this.eq_neg_one_of_two_right, H, Algebra.norm_algebraMap,\n    IsCyclotomicExtension.finrank L hirr, pow_coe, show ((2 : ℕ+) : ℕ) = 2 from rfl,\n      totient_prime_pow Nat.prime_two (zero_lt_succ k), succ_sub_succ_eq_sub, tsub_zero]\n  simp\n\n"}
{"name":"IsPrimitiveRoot.norm_sub_one_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"K : Type u\nL : Type v\ninst✝² : Field L\nζ : L\ninst✝¹ : Field K\ninst✝ : Algebra K L\nk : Nat\nhζ : IsPrimitiveRoot ζ (HPow.hPow 2 k)\nhk : LE.le 2 k\nH : IsCyclotomicExtension (Singleton.singleton (HPow.hPow 2 k)) K L\nhirr : Irreducible (Polynomial.cyclotomic (HPow.hPow 2 k) K)\n⊢ Eq ((Algebra.norm K) (HSub.hSub ζ 1)) 2","decl":"/-- If `Irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = ℚ`) and `k` is at least `2`,\nthen the norm of `ζ - 1` is `2`. -/\ntheorem norm_sub_one_two {k : ℕ} (hζ : IsPrimitiveRoot ζ (2 ^ k)) (hk : 2 ≤ k)\n    [H : IsCyclotomicExtension {(2 : ℕ+) ^ k} K L] (hirr : Irreducible (cyclotomic (2 ^ k) K)) :\n    norm K (ζ - 1) = 2 := by\n  have : 2 < (2 : ℕ+) ^ k := by\n    simp only [← coe_lt_coe, one_coe, pow_coe]\n    nth_rw 1 [← pow_one 2]\n    exact Nat.pow_lt_pow_right one_lt_two (lt_of_lt_of_le one_lt_two hk)\n  replace hirr : Irreducible (cyclotomic ((2 : ℕ+) ^ k : ℕ+) K) := by simp [hirr]\n  replace hζ : IsPrimitiveRoot ζ (2 ^ k : ℕ+) := by simp [hζ]\n  obtain ⟨k₁, hk₁⟩ := exists_eq_succ_of_ne_zero (lt_of_lt_of_le zero_lt_two hk).ne.symm\n-- Porting note: the proof is slightly different because of coercions.\n  simpa [hk₁, show ((2 : ℕ+) : ℕ) = 2 from rfl] using sub_one_norm_eq_eval_cyclotomic hζ this hirr\n\n"}
{"name":"IsPrimitiveRoot.norm_pow_sub_one_eq_prime_pow_of_ne_zero","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝² : Field L\nζ : L\ninst✝¹ : Field K\ninst✝ : Algebra K L\nk s : Nat\nhζ : IsPrimitiveRoot ζ ↑(HPow.hPow p (HAdd.hAdd k 1))\nhpri : Fact (Nat.Prime ↑p)\nhcycl : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑(HPow.hPow p (HAdd.hAdd k 1))) K)\nhs : LE.le s k\nhk : Ne k 0\n⊢ Eq ((Algebra.norm K) (HSub.hSub (HPow.hPow ζ (HPow.hPow (↑p) s)) 1)) (HPow.hPow (↑↑p) (HPow.hPow (↑p) s))","decl":"/-- If `Irreducible (cyclotomic (p ^ (k + 1)) K)` (in particular for `K = ℚ`) and `p` is a prime,\nthen the norm of `ζ ^ (p ^ s) - 1` is `p ^ (p ^ s)` if `k ≠ 0` and `s ≤ k`. -/\ntheorem norm_pow_sub_one_eq_prime_pow_of_ne_zero {k s : ℕ} (hζ : IsPrimitiveRoot ζ ↑(p ^ (k + 1)))\n    [hpri : Fact (p : ℕ).Prime] [hcycl : IsCyclotomicExtension {p ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (↑(p ^ (k + 1)) : ℕ) K)) (hs : s ≤ k) (hk : k ≠ 0) :\n    norm K (ζ ^ (p : ℕ) ^ s - 1) = (p : K) ^ (p : ℕ) ^ s := by\n  by_cases htwo : p ^ (k - s + 1) = 2\n  · have hp : p = 2 := by\n      rw [← PNat.coe_inj, PNat.pow_coe, ← pow_one 2] at htwo\n      replace htwo :=\n        eq_of_prime_pow_eq (prime_iff.1 hpri.out) (prime_iff.1 Nat.prime_two) (succ_pos _) htwo\n      rwa [show 2 = ((2 : ℕ+) : ℕ) by decide, PNat.coe_inj] at htwo\n    replace hs : s = k := by\n      rw [hp, ← PNat.coe_inj, PNat.pow_coe] at htwo\n      nth_rw 2 [← pow_one 2] at htwo\n      replace htwo := Nat.pow_right_injective rfl.le htwo\n      rw [add_left_eq_self, Nat.sub_eq_zero_iff_le] at htwo\n      exact le_antisymm hs htwo\n    simp only [hs, hp, one_coe, cast_one, pow_coe, show ((2 : ℕ+) : ℕ) = 2 from rfl]\n      at hζ hirr hcycl ⊢\n    obtain ⟨k₁, hk₁⟩ := Nat.exists_eq_succ_of_ne_zero hk\n-- Porting note: the proof is slightly different because of coercions.\n    rw [hζ.norm_pow_sub_one_two hirr, hk₁, _root_.pow_succ', pow_mul, neg_eq_neg_one_mul,\n      mul_pow, neg_one_sq, one_mul, ← pow_mul, ← _root_.pow_succ']\n    simp\n  · exact hζ.norm_pow_sub_one_of_prime_pow_ne_two hirr hs htwo\n\n"}
{"name":"IsCyclotomicExtension.norm_zeta_eq_one","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nhn : Ne n 2\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\n⊢ Eq ((Algebra.norm K) (IsCyclotomicExtension.zeta n K L)) 1","decl":"/-- If `Irreducible (cyclotomic n K)` (in particular for `K = ℚ`), the norm of `zeta n K L` is `1`\nif `n` is odd. -/\ntheorem norm_zeta_eq_one [IsCyclotomicExtension {n} K L] (hn : n ≠ 2)\n    (hirr : Irreducible (cyclotomic n K)) : norm K (zeta n K L) = 1 :=\n  (zeta_spec n K L).norm_eq_one hn hirr\n\n"}
{"name":"IsCyclotomicExtension.norm_zeta_sub_one_of_isPrimePow","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"n : PNat\nK : Type u\nL : Type v\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nhn : IsPrimePow ↑n\ninst✝ : IsCyclotomicExtension (Singleton.singleton n) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑n) K)\nh : Ne n 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub (IsCyclotomicExtension.zeta n K L) 1)) ↑(↑n).minFac","decl":"/-- If `IsPrimePow (n : ℕ)`, `n ≠ 2` and `Irreducible (cyclotomic n K)` (in particular for\n`K = ℚ`), then the norm of `zeta n K L - 1` is `(n : ℕ).minFac`. -/\ntheorem norm_zeta_sub_one_of_isPrimePow (hn : IsPrimePow (n : ℕ)) [IsCyclotomicExtension {n} K L]\n    (hirr : Irreducible (cyclotomic (n : ℕ) K)) (h : n ≠ 2) :\n    norm K (zeta n K L - 1) = (n : ℕ).minFac :=\n  (zeta_spec n K L).sub_one_norm_isPrimePow hn hirr h\n\n"}
{"name":"IsCyclotomicExtension.norm_zeta_pow_sub_one_of_prime_pow_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Algebra K L\nk : Nat\ninst✝¹ : Fact (Nat.Prime ↑p)\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑(HPow.hPow p (HAdd.hAdd k 1))) K)\ns : Nat\nhs : LE.le s k\nhtwo : Ne (HPow.hPow p (HAdd.hAdd (HSub.hSub k s) 1)) 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub (HPow.hPow (IsCyclotomicExtension.zeta (HPow.hPow p (HAdd.hAdd k 1)) K L) (HPow.hPow (↑p) s)) 1)) (HPow.hPow (↑↑p) (HPow.hPow (↑p) s))","decl":"/-- If `Irreducible (cyclotomic (p ^ (k + 1)) K)` (in particular for `K = ℚ`) and `p` is a prime,\nthen the norm of `(zeta (p ^ (k + 1)) K L) ^ (p ^ s) - 1` is `p ^ (p ^ s)`\nif `p ^ (k - s + 1) ≠ 2`. -/\ntheorem norm_zeta_pow_sub_one_of_prime_pow_ne_two {k : ℕ} [Fact (p : ℕ).Prime]\n    [IsCyclotomicExtension {p ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (↑(p ^ (k + 1)) : ℕ) K)) {s : ℕ} (hs : s ≤ k)\n    (htwo : p ^ (k - s + 1) ≠ 2) :\n    norm K (zeta (p ^ (k + 1)) K L ^ (p : ℕ) ^ s - 1) = (p : K) ^ (p : ℕ) ^ s :=\n  (zeta_spec _ K L).norm_pow_sub_one_of_prime_pow_ne_two hirr hs htwo\n\n"}
{"name":"IsCyclotomicExtension.norm_zeta_pow_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Algebra K L\nk : Nat\ninst✝¹ : Fact (Nat.Prime ↑p)\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow p (HAdd.hAdd k 1))) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑(HPow.hPow p (HAdd.hAdd k 1))) K)\nh : Ne p 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub (IsCyclotomicExtension.zeta (HPow.hPow p (HAdd.hAdd k 1)) K L) 1)) ↑↑p","decl":"/-- If `Irreducible (cyclotomic (p ^ (k + 1)) K)` (in particular for `K = ℚ`) and `p` is an odd\nprime, then the norm of `zeta (p ^ (k + 1)) K L - 1` is `p`. -/\ntheorem norm_zeta_pow_sub_one_of_prime_ne_two {k : ℕ} [Fact (p : ℕ).Prime]\n    [IsCyclotomicExtension {p ^ (k + 1)} K L]\n    (hirr : Irreducible (cyclotomic (↑(p ^ (k + 1)) : ℕ) K)) (h : p ≠ 2) :\n    norm K (zeta (p ^ (k + 1)) K L - 1) = p :=\n  (zeta_spec _ K L).norm_sub_one_of_prime_ne_two hirr h\n\n"}
{"name":"IsCyclotomicExtension.norm_zeta_sub_one_of_prime_ne_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"p : PNat\nK : Type u\nL : Type v\ninst✝⁴ : Field K\ninst✝³ : Field L\ninst✝² : Algebra K L\ninst✝¹ : Fact (Nat.Prime ↑p)\ninst✝ : IsCyclotomicExtension (Singleton.singleton p) K L\nhirr : Irreducible (Polynomial.cyclotomic (↑p) K)\nh : Ne p 2\n⊢ Eq ((Algebra.norm K) (HSub.hSub (IsCyclotomicExtension.zeta p K L) 1)) ↑↑p","decl":"/-- If `Irreducible (cyclotomic p K)` (in particular for `K = ℚ`) and `p` is an odd prime,\nthen the norm of `zeta p K L - 1` is `p`. -/\ntheorem norm_zeta_sub_one_of_prime_ne_two [Fact (p : ℕ).Prime]\n    [IsCyclotomicExtension {p} K L] (hirr : Irreducible (cyclotomic p K)) (h : p ≠ 2) :\n    norm K (zeta p K L - 1) = p :=\n  (zeta_spec _ K L).norm_sub_one_of_prime_ne_two' hirr h\n\n"}
{"name":"IsCyclotomicExtension.norm_zeta_pow_sub_one_two","module":"Mathlib.NumberTheory.Cyclotomic.PrimitiveRoots","initialProofState":"K : Type u\nL : Type v\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nk : Nat\nhk : LE.le 2 k\ninst✝ : IsCyclotomicExtension (Singleton.singleton (HPow.hPow 2 k)) K L\nhirr : Irreducible (Polynomial.cyclotomic (HPow.hPow 2 k) K)\n⊢ Eq ((Algebra.norm K) (HSub.hSub (IsCyclotomicExtension.zeta (HPow.hPow 2 k) K L) 1)) 2","decl":"/-- If `Irreducible (cyclotomic (2 ^ k) K)` (in particular for `K = ℚ`) and `k` is at least `2`,\nthen the norm of `zeta (2 ^ k) K L - 1` is `2`. -/\ntheorem norm_zeta_pow_sub_one_two {k : ℕ} (hk : 2 ≤ k)\n    [IsCyclotomicExtension {(2 : ℕ+) ^ k} K L] (hirr : Irreducible (cyclotomic (2 ^ k) K)) :\n    norm K (zeta ((2 : ℕ+) ^ k) K L - 1) = 2 :=\n  norm_sub_one_two (zeta_spec ((2 : ℕ+) ^ k) K L) hk hirr\n\n"}
