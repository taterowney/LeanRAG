{"name":"Nat.periodic_gcd","module":"Mathlib.Data.Nat.Periodic","initialProofState":"a : Nat\n⊢ Function.Periodic a.gcd a","decl":"theorem periodic_gcd (a : ℕ) : Periodic (gcd a) a := by\n  simp only [forall_const, gcd_add_self_right, eq_self_iff_true, Periodic]\n\n"}
{"name":"Nat.periodic_coprime","module":"Mathlib.Data.Nat.Periodic","initialProofState":"a : Nat\n⊢ Function.Periodic a.Coprime a","decl":"theorem periodic_coprime (a : ℕ) : Periodic (Coprime a) a := by\n  simp only [coprime_add_self_right, forall_const, eq_iff_iff, Periodic]\n\n"}
{"name":"Nat.periodic_mod","module":"Mathlib.Data.Nat.Periodic","initialProofState":"a : Nat\n⊢ Function.Periodic (fun n => HMod.hMod n a) a","decl":"theorem periodic_mod (a : ℕ) : Periodic (fun n => n % a) a := by\n  simp only [forall_const, eq_self_iff_true, add_mod_right, Periodic]\n\n"}
{"name":"Function.Periodic.map_mod_nat","module":"Mathlib.Data.Nat.Periodic","initialProofState":"α : Type u_1\nf : Nat → α\na : Nat\nhf : Function.Periodic f a\nn : Nat\n⊢ Eq (f (HMod.hMod n a)) (f n)","decl":"theorem _root_.Function.Periodic.map_mod_nat {α : Type*} {f : ℕ → α} {a : ℕ} (hf : Periodic f a) :\n    ∀ n, f (n % a) = f n := fun n => by\n  conv_rhs => rw [← Nat.mod_add_div n a, mul_comm, ← Nat.nsmul_eq_mul, hf.nsmul]\n\n"}
{"name":"Nat.filter_multiset_Ico_card_eq_of_periodic","module":"Mathlib.Data.Nat.Periodic","initialProofState":"n a : Nat\np : Nat → Prop\ninst✝ : DecidablePred p\npp : Function.Periodic p a\n⊢ Eq (Multiset.filter p (Multiset.Ico n (HAdd.hAdd n a))).card (Nat.count p a)","decl":"/-- An interval of length `a` filtered over a periodic predicate of period `a` has cardinality\nequal to the number naturals below `a` for which `p a` is true. -/\ntheorem filter_multiset_Ico_card_eq_of_periodic (n a : ℕ) (p : ℕ → Prop) [DecidablePred p]\n    (pp : Periodic p a) : card (filter p (Ico n (n + a))) = a.count p := by\n  rw [count_eq_card_filter_range, Finset.card, Finset.filter_val, Finset.range_val, ←\n    multiset_Ico_map_mod n, ← map_count_True_eq_filter_card, ← map_count_True_eq_filter_card,\n    map_map]\n  congr; funext n\n  exact (Function.Periodic.map_mod_nat pp n).symm\n\n"}
{"name":"Nat.filter_Ico_card_eq_of_periodic","module":"Mathlib.Data.Nat.Periodic","initialProofState":"n a : Nat\np : Nat → Prop\ninst✝ : DecidablePred p\npp : Function.Periodic p a\n⊢ Eq (Finset.filter p (Finset.Ico n (HAdd.hAdd n a))).card (Nat.count p a)","decl":"/-- An interval of length `a` filtered over a periodic predicate of period `a` has cardinality\nequal to the number naturals below `a` for which `p a` is true. -/\ntheorem filter_Ico_card_eq_of_periodic (n a : ℕ) (p : ℕ → Prop) [DecidablePred p]\n    (pp : Periodic p a) : ((Ico n (n + a)).filter p).card = a.count p :=\n  filter_multiset_Ico_card_eq_of_periodic n a p pp\n\n"}
