{"name":"ManyOneReducible.mk","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\nf : α → β\nq : β → Prop\nh : Computable f\n⊢ ManyOneReducible (fun a => q (f a)) q","decl":"theorem ManyOneReducible.mk {α β} [Primcodable α] [Primcodable β] {f : α → β} (q : β → Prop)\n    (h : Computable f) : (fun a => q (f a)) ≤₀ q :=\n  ⟨f, h, fun _ => Iff.rfl⟩\n\n"}
{"name":"manyOneReducible_refl","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\np : α → Prop\n⊢ ManyOneReducible p p","decl":"@[refl]\ntheorem manyOneReducible_refl {α} [Primcodable α] (p : α → Prop) : p ≤₀ p :=\n  ⟨id, Computable.id, by simp⟩\n\n"}
{"name":"ManyOneReducible.trans","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\na✝¹ : ManyOneReducible p q\na✝ : ManyOneReducible q r\n⊢ ManyOneReducible p r","decl":"@[trans]\ntheorem ManyOneReducible.trans {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} : p ≤₀ q → q ≤₀ r → p ≤₀ r\n  | ⟨f, c₁, h₁⟩, ⟨g, c₂, h₂⟩ =>\n    ⟨g ∘ f, c₂.comp c₁,\n      fun a => ⟨fun h => by erw [← h₂, ← h₁]; assumption, fun h => by rwa [h₁, h₂]⟩⟩\n\n"}
{"name":"reflexive_manyOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ Reflexive ManyOneReducible","decl":"theorem reflexive_manyOneReducible {α} [Primcodable α] : Reflexive (@ManyOneReducible α α _ _) :=\n  manyOneReducible_refl\n\n"}
{"name":"transitive_manyOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ Transitive ManyOneReducible","decl":"theorem transitive_manyOneReducible {α} [Primcodable α] : Transitive (@ManyOneReducible α α _ _) :=\n  fun _ _ _ => ManyOneReducible.trans\n\n"}
{"name":"OneOneReducible.mk","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\nf : α → β\nq : β → Prop\nh : Computable f\ni : Function.Injective f\n⊢ OneOneReducible (fun a => q (f a)) q","decl":"theorem OneOneReducible.mk {α β} [Primcodable α] [Primcodable β] {f : α → β} (q : β → Prop)\n    (h : Computable f) (i : Injective f) : (fun a => q (f a)) ≤₁ q :=\n  ⟨f, h, i, fun _ => Iff.rfl⟩\n\n"}
{"name":"oneOneReducible_refl","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\np : α → Prop\n⊢ OneOneReducible p p","decl":"@[refl]\ntheorem oneOneReducible_refl {α} [Primcodable α] (p : α → Prop) : p ≤₁ p :=\n  ⟨id, Computable.id, injective_id, by simp⟩\n\n"}
{"name":"OneOneReducible.trans","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\na✝¹ : OneOneReducible p q\na✝ : OneOneReducible q r\n⊢ OneOneReducible p r","decl":"@[trans]\ntheorem OneOneReducible.trans {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop}\n    {q : β → Prop} {r : γ → Prop} : p ≤₁ q → q ≤₁ r → p ≤₁ r\n  | ⟨f, c₁, i₁, h₁⟩, ⟨g, c₂, i₂, h₂⟩ =>\n    ⟨g ∘ f, c₂.comp c₁, i₂.comp i₁, fun a =>\n      ⟨fun h => by erw [← h₂, ← h₁]; assumption, fun h => by rwa [h₁, h₂]⟩⟩\n\n"}
{"name":"OneOneReducible.to_many_one","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\na✝ : OneOneReducible p q\n⊢ ManyOneReducible p q","decl":"theorem OneOneReducible.to_many_one {α β} [Primcodable α] [Primcodable β] {p : α → Prop}\n    {q : β → Prop} : p ≤₁ q → p ≤₀ q\n  | ⟨f, c, _, h⟩ => ⟨f, c, h⟩\n\n"}
{"name":"OneOneReducible.of_equiv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\ne : Equiv α β\nq : β → Prop\nh : Computable ⇑e\n⊢ OneOneReducible (Function.comp q ⇑e) q","decl":"theorem OneOneReducible.of_equiv {α β} [Primcodable α] [Primcodable β] {e : α ≃ β} (q : β → Prop)\n    (h : Computable e) : (q ∘ e) ≤₁ q :=\n  OneOneReducible.mk _ h e.injective\n\n"}
{"name":"OneOneReducible.of_equiv_symm","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\ne : Equiv α β\nq : β → Prop\nh : Computable ⇑e.symm\n⊢ OneOneReducible q (Function.comp q ⇑e)","decl":"theorem OneOneReducible.of_equiv_symm {α β} [Primcodable α] [Primcodable β] {e : α ≃ β}\n    (q : β → Prop) (h : Computable e.symm) : q ≤₁ (q ∘ e) := by\n  convert OneOneReducible.of_equiv _ h; funext; simp\n\n"}
{"name":"reflexive_oneOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ Reflexive OneOneReducible","decl":"theorem reflexive_oneOneReducible {α} [Primcodable α] : Reflexive (@OneOneReducible α α _ _) :=\n  oneOneReducible_refl\n\n"}
{"name":"transitive_oneOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ Transitive OneOneReducible","decl":"theorem transitive_oneOneReducible {α} [Primcodable α] : Transitive (@OneOneReducible α α _ _) :=\n  fun _ _ _ => OneOneReducible.trans\n\n"}
{"name":"ComputablePred.computable_of_manyOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\nh₁ : ManyOneReducible p q\nh₂ : ComputablePred q\n⊢ ComputablePred p","decl":"theorem computable_of_manyOneReducible {p : α → Prop} {q : β → Prop} (h₁ : p ≤₀ q)\n    (h₂ : ComputablePred q) : ComputablePred p := by\n  rcases h₁ with ⟨f, c, hf⟩\n  rw [show p = fun a => q (f a) from Set.ext hf]\n  rcases computable_iff.1 h₂ with ⟨g, hg, rfl⟩\n  exact ⟨by infer_instance, by simpa using hg.comp c⟩\n\n"}
{"name":"ComputablePred.computable_of_oneOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\nh : OneOneReducible p q\na✝ : ComputablePred q\n⊢ ComputablePred p","decl":"theorem computable_of_oneOneReducible {p : α → Prop} {q : β → Prop} (h : p ≤₁ q) :\n    ComputablePred q → ComputablePred p :=\n  computable_of_manyOneReducible h.to_many_one\n\n"}
{"name":"manyOneEquiv_refl","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\np : α → Prop\n⊢ ManyOneEquiv p p","decl":"@[refl]\ntheorem manyOneEquiv_refl {α} [Primcodable α] (p : α → Prop) : ManyOneEquiv p p :=\n  ⟨manyOneReducible_refl _, manyOneReducible_refl _⟩\n\n"}
{"name":"ManyOneEquiv.symm","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\na✝ : ManyOneEquiv p q\n⊢ ManyOneEquiv q p","decl":"@[symm]\ntheorem ManyOneEquiv.symm {α β} [Primcodable α] [Primcodable β] {p : α → Prop} {q : β → Prop} :\n    ManyOneEquiv p q → ManyOneEquiv q p :=\n  And.symm\n\n"}
{"name":"ManyOneEquiv.trans","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\na✝¹ : ManyOneEquiv p q\na✝ : ManyOneEquiv q r\n⊢ ManyOneEquiv p r","decl":"@[trans]\ntheorem ManyOneEquiv.trans {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop}\n    {q : β → Prop} {r : γ → Prop} : ManyOneEquiv p q → ManyOneEquiv q r → ManyOneEquiv p r\n  | ⟨pq, qp⟩, ⟨qr, rq⟩ => ⟨pq.trans qr, rq.trans qp⟩\n\n"}
{"name":"equivalence_of_manyOneEquiv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ Equivalence ManyOneEquiv","decl":"theorem equivalence_of_manyOneEquiv {α} [Primcodable α] : Equivalence (@ManyOneEquiv α α _ _) :=\n  ⟨manyOneEquiv_refl, fun {_ _} => ManyOneEquiv.symm, fun {_ _ _} => ManyOneEquiv.trans⟩\n\n"}
{"name":"oneOneEquiv_refl","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\np : α → Prop\n⊢ OneOneEquiv p p","decl":"@[refl]\ntheorem oneOneEquiv_refl {α} [Primcodable α] (p : α → Prop) : OneOneEquiv p p :=\n  ⟨oneOneReducible_refl _, oneOneReducible_refl _⟩\n\n"}
{"name":"OneOneEquiv.symm","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\na✝ : OneOneEquiv p q\n⊢ OneOneEquiv q p","decl":"@[symm]\ntheorem OneOneEquiv.symm {α β} [Primcodable α] [Primcodable β] {p : α → Prop} {q : β → Prop} :\n    OneOneEquiv p q → OneOneEquiv q p :=\n  And.symm\n\n"}
{"name":"OneOneEquiv.trans","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\na✝¹ : OneOneEquiv p q\na✝ : OneOneEquiv q r\n⊢ OneOneEquiv p r","decl":"@[trans]\ntheorem OneOneEquiv.trans {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop}\n    {q : β → Prop} {r : γ → Prop} : OneOneEquiv p q → OneOneEquiv q r → OneOneEquiv p r\n  | ⟨pq, qp⟩, ⟨qr, rq⟩ => ⟨pq.trans qr, rq.trans qp⟩\n\n"}
{"name":"equivalence_of_oneOneEquiv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ Equivalence OneOneEquiv","decl":"theorem equivalence_of_oneOneEquiv {α} [Primcodable α] : Equivalence (@OneOneEquiv α α _ _) :=\n  ⟨oneOneEquiv_refl, fun {_ _} => OneOneEquiv.symm, fun {_ _ _} => OneOneEquiv.trans⟩\n\n"}
{"name":"OneOneEquiv.to_many_one","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\na✝ : OneOneEquiv p q\n⊢ ManyOneEquiv p q","decl":"theorem OneOneEquiv.to_many_one {α β} [Primcodable α] [Primcodable β] {p : α → Prop}\n    {q : β → Prop} : OneOneEquiv p q → ManyOneEquiv p q\n  | ⟨pq, qp⟩ => ⟨pq.to_many_one, qp.to_many_one⟩\n\n"}
{"name":"Equiv.Computable.symm","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\ne : Equiv α β\na✝ : e.Computable\n⊢ e.symm.Computable","decl":"theorem Equiv.Computable.symm {α β} [Primcodable α] [Primcodable β] {e : α ≃ β} :\n    e.Computable → e.symm.Computable :=\n  And.symm\n\n"}
{"name":"Equiv.Computable.trans","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\ne₁ : Equiv α β\ne₂ : Equiv β γ\na✝¹ : e₁.Computable\na✝ : e₂.Computable\n⊢ (e₁.trans e₂).Computable","decl":"theorem Equiv.Computable.trans {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {e₁ : α ≃ β}\n    {e₂ : β ≃ γ} : e₁.Computable → e₂.Computable → (e₁.trans e₂).Computable\n  | ⟨l₁, r₁⟩, ⟨l₂, r₂⟩ => ⟨l₂.comp l₁, r₁.comp r₂⟩\n\n"}
{"name":"Computable.eqv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Denumerable α\n⊢ (Denumerable.eqv α).Computable","decl":"theorem Computable.eqv (α) [Denumerable α] : (Denumerable.eqv α).Computable :=\n  ⟨Computable.encode, Computable.ofNat _⟩\n\n"}
{"name":"Computable.equiv₂","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Denumerable α\ninst✝ : Denumerable β\n⊢ (Denumerable.equiv₂ α β).Computable","decl":"theorem Computable.equiv₂ (α β) [Denumerable α] [Denumerable β] :\n    (Denumerable.equiv₂ α β).Computable :=\n  (Computable.eqv _).trans (Computable.eqv _).symm\n\n"}
{"name":"OneOneEquiv.of_equiv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\ne : Equiv α β\nh : e.Computable\np : β → Prop\n⊢ OneOneEquiv (Function.comp p ⇑e) p","decl":"theorem OneOneEquiv.of_equiv {α β} [Primcodable α] [Primcodable β] {e : α ≃ β} (h : e.Computable)\n    {p} : OneOneEquiv (p ∘ e) p :=\n  ⟨OneOneReducible.of_equiv _ h.1, OneOneReducible.of_equiv_symm _ h.2⟩\n\n"}
{"name":"ManyOneEquiv.of_equiv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\ne : Equiv α β\nh : e.Computable\np : β → Prop\n⊢ ManyOneEquiv (Function.comp p ⇑e) p","decl":"theorem ManyOneEquiv.of_equiv {α β} [Primcodable α] [Primcodable β] {e : α ≃ β} (h : e.Computable)\n    {p} : ManyOneEquiv (p ∘ e) p :=\n  (OneOneEquiv.of_equiv h).to_many_one\n\n"}
{"name":"ManyOneEquiv.le_congr_left","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : ManyOneEquiv p q\n⊢ Iff (ManyOneReducible p r) (ManyOneReducible q r)","decl":"theorem ManyOneEquiv.le_congr_left {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : ManyOneEquiv p q) : p ≤₀ r ↔ q ≤₀ r :=\n  ⟨h.2.trans, h.1.trans⟩\n\n"}
{"name":"ManyOneEquiv.le_congr_right","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : ManyOneEquiv q r\n⊢ Iff (ManyOneReducible p q) (ManyOneReducible p r)","decl":"theorem ManyOneEquiv.le_congr_right {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : ManyOneEquiv q r) : p ≤₀ q ↔ p ≤₀ r :=\n  ⟨fun h' => h'.trans h.1, fun h' => h'.trans h.2⟩\n\n"}
{"name":"OneOneEquiv.le_congr_left","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : OneOneEquiv p q\n⊢ Iff (OneOneReducible p r) (OneOneReducible q r)","decl":"theorem OneOneEquiv.le_congr_left {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : OneOneEquiv p q) : p ≤₁ r ↔ q ≤₁ r :=\n  ⟨h.2.trans, h.1.trans⟩\n\n"}
{"name":"OneOneEquiv.le_congr_right","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : OneOneEquiv q r\n⊢ Iff (OneOneReducible p q) (OneOneReducible p r)","decl":"theorem OneOneEquiv.le_congr_right {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : OneOneEquiv q r) : p ≤₁ q ↔ p ≤₁ r :=\n  ⟨fun h' => h'.trans h.1, fun h' => h'.trans h.2⟩\n\n"}
{"name":"ManyOneEquiv.congr_left","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : ManyOneEquiv p q\n⊢ Iff (ManyOneEquiv p r) (ManyOneEquiv q r)","decl":"theorem ManyOneEquiv.congr_left {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : ManyOneEquiv p q) :\n    ManyOneEquiv p r ↔ ManyOneEquiv q r :=\n  and_congr h.le_congr_left h.le_congr_right\n\n"}
{"name":"ManyOneEquiv.congr_right","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : ManyOneEquiv q r\n⊢ Iff (ManyOneEquiv p q) (ManyOneEquiv p r)","decl":"theorem ManyOneEquiv.congr_right {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : ManyOneEquiv q r) :\n    ManyOneEquiv p q ↔ ManyOneEquiv p r :=\n  and_congr h.le_congr_right h.le_congr_left\n\n"}
{"name":"OneOneEquiv.congr_left","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : OneOneEquiv p q\n⊢ Iff (OneOneEquiv p r) (OneOneEquiv q r)","decl":"theorem OneOneEquiv.congr_left {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : OneOneEquiv p q) :\n    OneOneEquiv p r ↔ OneOneEquiv q r :=\n  and_congr h.le_congr_left h.le_congr_right\n\n"}
{"name":"OneOneEquiv.congr_right","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\nh : OneOneEquiv q r\n⊢ Iff (OneOneEquiv p q) (OneOneEquiv p r)","decl":"theorem OneOneEquiv.congr_right {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} (h : OneOneEquiv q r) :\n    OneOneEquiv p q ↔ OneOneEquiv p r :=\n  and_congr h.le_congr_right h.le_congr_left\n\n"}
{"name":"ULower.down_computable","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\n⊢ (ULower.equiv α).Computable","decl":"@[simp]\ntheorem ULower.down_computable {α} [Primcodable α] : (ULower.equiv α).Computable :=\n  ⟨Primrec.ulower_down.to_comp, Primrec.ulower_up.to_comp⟩\n\n"}
{"name":"manyOneEquiv_up","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\ninst✝ : Primcodable α\np : α → Prop\n⊢ ManyOneEquiv (Function.comp p ULower.up) p","decl":"theorem manyOneEquiv_up {α} [Primcodable α] {p : α → Prop} : ManyOneEquiv (p ∘ ULower.up) p :=\n  ManyOneEquiv.of_equiv ULower.down_computable.symm\n\n"}
{"name":"OneOneReducible.disjoin_left","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\n⊢ OneOneReducible p (Sum.elim p q)","decl":"theorem OneOneReducible.disjoin_left {α β} [Primcodable α] [Primcodable β] {p : α → Prop}\n    {q : β → Prop} : p ≤₁ p ⊕' q :=\n  ⟨Sum.inl, Computable.sum_inl, fun _ _ => Sum.inl.inj_iff.1, fun _ => Iff.rfl⟩\n\n"}
{"name":"OneOneReducible.disjoin_right","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Primcodable α\ninst✝ : Primcodable β\np : α → Prop\nq : β → Prop\n⊢ OneOneReducible q (Sum.elim p q)","decl":"theorem OneOneReducible.disjoin_right {α β} [Primcodable α] [Primcodable β] {p : α → Prop}\n    {q : β → Prop} : q ≤₁ p ⊕' q :=\n  ⟨Sum.inr, Computable.sum_inr, fun _ _ => Sum.inr.inj_iff.1, fun _ => Iff.rfl⟩\n\n"}
{"name":"disjoin_manyOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\na✝¹ : ManyOneReducible p r\na✝ : ManyOneReducible q r\n⊢ ManyOneReducible (Sum.elim p q) r","decl":"theorem disjoin_manyOneReducible {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ]\n    {p : α → Prop} {q : β → Prop} {r : γ → Prop} : p ≤₀ r → q ≤₀ r → (p ⊕' q) ≤₀ r\n  | ⟨f, c₁, h₁⟩, ⟨g, c₂, h₂⟩ =>\n    ⟨Sum.elim f g,\n      Computable.id.sum_casesOn (c₁.comp Computable.snd).to₂ (c₂.comp Computable.snd).to₂,\n      fun x => by cases x <;> [apply h₁; apply h₂]⟩\n\n"}
{"name":"disjoin_le","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : Primcodable α\ninst✝¹ : Primcodable β\ninst✝ : Primcodable γ\np : α → Prop\nq : β → Prop\nr : γ → Prop\n⊢ Iff (ManyOneReducible (Sum.elim p q) r) (And (ManyOneReducible p r) (ManyOneReducible q r))","decl":"theorem disjoin_le {α β γ} [Primcodable α] [Primcodable β] [Primcodable γ] {p : α → Prop}\n    {q : β → Prop} {r : γ → Prop} : (p ⊕' q) ≤₀ r ↔ p ≤₀ r ∧ q ≤₀ r :=\n  ⟨fun h =>\n    ⟨OneOneReducible.disjoin_left.to_many_one.trans h,\n      OneOneReducible.disjoin_right.to_many_one.trans h⟩,\n    fun ⟨h₁, h₂⟩ => disjoin_manyOneReducible h₁ h₂⟩\n\n"}
{"name":"toNat_manyOneReducible","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝¹ : Primcodable α\ninst✝ : Inhabited α\np : Set α\n⊢ ManyOneReducible (toNat p) p","decl":"@[simp]\ntheorem toNat_manyOneReducible {p : Set α} : toNat p ≤₀ p :=\n  ⟨fun n => (Encodable.decode (α := α) n).getD default,\n    Computable.option_getD Computable.decode (Computable.const _), fun _ => Iff.rfl⟩\n\n"}
{"name":"manyOneReducible_toNat","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝¹ : Primcodable α\ninst✝ : Inhabited α\np : Set α\n⊢ ManyOneReducible p (toNat p)","decl":"@[simp]\ntheorem manyOneReducible_toNat {p : Set α} : p ≤₀ toNat p :=\n  ⟨Encodable.encode, Computable.encode, by simp [toNat, setOf]⟩\n\n"}
{"name":"manyOneReducible_toNat_toNat","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝³ : Primcodable α\ninst✝² : Inhabited α\nβ : Type v\ninst✝¹ : Primcodable β\ninst✝ : Inhabited β\np : Set α\nq : Set β\n⊢ Iff (ManyOneReducible (toNat p) (toNat q)) (ManyOneReducible p q)","decl":"@[simp]\ntheorem manyOneReducible_toNat_toNat {p : Set α} {q : Set β} : toNat p ≤₀ toNat q ↔ p ≤₀ q :=\n  ⟨fun h => manyOneReducible_toNat.trans (h.trans toNat_manyOneReducible), fun h =>\n    toNat_manyOneReducible.trans (h.trans manyOneReducible_toNat)⟩\n\n"}
{"name":"toNat_manyOneEquiv","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝¹ : Primcodable α\ninst✝ : Inhabited α\np : Set α\n⊢ ManyOneEquiv (toNat p) p","decl":"@[simp]\ntheorem toNat_manyOneEquiv {p : Set α} : ManyOneEquiv (toNat p) p := by simp [ManyOneEquiv]\n\n"}
{"name":"manyOneEquiv_toNat","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝³ : Primcodable α\ninst✝² : Inhabited α\nβ : Type v\ninst✝¹ : Primcodable β\ninst✝ : Inhabited β\np : Set α\nq : Set β\n⊢ Iff (ManyOneEquiv (toNat p) (toNat q)) (ManyOneEquiv p q)","decl":"@[simp]\ntheorem manyOneEquiv_toNat (p : Set α) (q : Set β) :\n    ManyOneEquiv (toNat p) (toNat q) ↔ ManyOneEquiv p q := by simp [ManyOneEquiv]\n\n"}
{"name":"ManyOneDegree.ind_on","module":"Mathlib.Computability.Reduce","initialProofState":"C : ManyOneDegree → Prop\nd : ManyOneDegree\nh : ∀ (p : Set Nat), C (ManyOneDegree.of p)\n⊢ C d","decl":"@[elab_as_elim]\nprotected theorem ind_on {C : ManyOneDegree → Prop} (d : ManyOneDegree)\n    (h : ∀ p : Set ℕ, C (of p)) : C d :=\n  Quotient.inductionOn' d h\n\n"}
{"name":"ManyOneDegree.liftOn_eq","module":"Mathlib.Computability.Reduce","initialProofState":"φ : Sort u_1\np : Set Nat\nf : Set Nat → φ\nh : ∀ (p q : Nat → Prop), ManyOneEquiv p q → Eq (f p) (f q)\n⊢ Eq ((ManyOneDegree.of p).liftOn f h) (f p)","decl":"@[simp]\nprotected theorem liftOn_eq {φ} (p : Set ℕ) (f : Set ℕ → φ)\n    (h : ∀ p q, ManyOneEquiv p q → f p = f q) : (of p).liftOn f h = f p :=\n  rfl\n\n"}
{"name":"ManyOneDegree.liftOn₂_eq","module":"Mathlib.Computability.Reduce","initialProofState":"φ : Sort u_1\np q : Set Nat\nf : Set Nat → Set Nat → φ\nh : ∀ (p₁ p₂ q₁ q₂ : Nat → Prop), ManyOneEquiv p₁ p₂ → ManyOneEquiv q₁ q₂ → Eq (f p₁ q₁) (f p₂ q₂)\n⊢ Eq ((ManyOneDegree.of p).liftOn₂ (ManyOneDegree.of q) f h) (f p q)","decl":"@[simp]\nprotected theorem liftOn₂_eq {φ} (p q : Set ℕ) (f : Set ℕ → Set ℕ → φ)\n    (h : ∀ p₁ p₂ q₁ q₂, ManyOneEquiv p₁ p₂ → ManyOneEquiv q₁ q₂ → f p₁ q₁ = f p₂ q₂) :\n    (of p).liftOn₂ (of q) f h = f p q :=\n  rfl\n\n"}
{"name":"ManyOneDegree.of_eq_of","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝³ : Primcodable α\ninst✝² : Inhabited α\nβ : Type v\ninst✝¹ : Primcodable β\ninst✝ : Inhabited β\np : α → Prop\nq : β → Prop\n⊢ Iff (Eq (ManyOneDegree.of p) (ManyOneDegree.of q)) (ManyOneEquiv p q)","decl":"@[simp]\ntheorem of_eq_of {p : α → Prop} {q : β → Prop} : of p = of q ↔ ManyOneEquiv p q := by\n  rw [of, of, Quotient.eq'']\n  simp\n\n"}
{"name":"ManyOneDegree.of_le_of","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝³ : Primcodable α\ninst✝² : Inhabited α\nβ : Type v\ninst✝¹ : Primcodable β\ninst✝ : Inhabited β\np : α → Prop\nq : β → Prop\n⊢ Iff (LE.le (ManyOneDegree.of p) (ManyOneDegree.of q)) (ManyOneReducible p q)","decl":"@[simp]\ntheorem of_le_of {p : α → Prop} {q : β → Prop} : of p ≤ of q ↔ p ≤₀ q :=\n  manyOneReducible_toNat_toNat\n\n"}
{"name":"ManyOneDegree.add_of","module":"Mathlib.Computability.Reduce","initialProofState":"α : Type u\ninst✝³ : Primcodable α\ninst✝² : Inhabited α\nβ : Type v\ninst✝¹ : Primcodable β\ninst✝ : Inhabited β\np : Set α\nq : Set β\n⊢ Eq (ManyOneDegree.of (Sum.elim p q)) (HAdd.hAdd (ManyOneDegree.of p) (ManyOneDegree.of q))","decl":"@[simp]\ntheorem add_of (p : Set α) (q : Set β) : of (p ⊕' q) = of p + of q :=\n  of_eq_of.mpr\n    ⟨disjoin_manyOneReducible\n        (manyOneReducible_toNat.trans OneOneReducible.disjoin_left.to_many_one)\n        (manyOneReducible_toNat.trans OneOneReducible.disjoin_right.to_many_one),\n      disjoin_manyOneReducible\n        (toNat_manyOneReducible.trans OneOneReducible.disjoin_left.to_many_one)\n        (toNat_manyOneReducible.trans OneOneReducible.disjoin_right.to_many_one)⟩\n\n"}
{"name":"ManyOneDegree.add_le","module":"Mathlib.Computability.Reduce","initialProofState":"d₁ d₂ d₃ : ManyOneDegree\n⊢ Iff (LE.le (HAdd.hAdd d₁ d₂) d₃) (And (LE.le d₁ d₃) (LE.le d₂ d₃))","decl":"@[simp]\nprotected theorem add_le {d₁ d₂ d₃ : ManyOneDegree} : d₁ + d₂ ≤ d₃ ↔ d₁ ≤ d₃ ∧ d₂ ≤ d₃ := by\n  induction d₁ using ManyOneDegree.ind_on\n  induction d₂ using ManyOneDegree.ind_on\n  induction d₃ using ManyOneDegree.ind_on\n  simpa only [← add_of, of_le_of] using disjoin_le\n\n"}
{"name":"ManyOneDegree.le_add_left","module":"Mathlib.Computability.Reduce","initialProofState":"d₁ d₂ : ManyOneDegree\n⊢ LE.le d₁ (HAdd.hAdd d₁ d₂)","decl":"@[simp]\nprotected theorem le_add_left (d₁ d₂ : ManyOneDegree) : d₁ ≤ d₁ + d₂ :=\n  (ManyOneDegree.add_le.1 (le_refl _)).1\n\n"}
{"name":"ManyOneDegree.le_add_right","module":"Mathlib.Computability.Reduce","initialProofState":"d₁ d₂ : ManyOneDegree\n⊢ LE.le d₂ (HAdd.hAdd d₁ d₂)","decl":"@[simp]\nprotected theorem le_add_right (d₁ d₂ : ManyOneDegree) : d₂ ≤ d₁ + d₂ :=\n  (ManyOneDegree.add_le.1 (le_refl _)).2\n\n"}
