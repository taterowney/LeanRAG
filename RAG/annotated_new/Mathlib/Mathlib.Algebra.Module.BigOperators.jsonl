{"name":"List.sum_smul","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"R : Type u_5\nM : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nl : List R\nx : M\n⊢ Eq (HSMul.hSMul l.sum x) (List.map (fun r => HSMul.hSMul r x) l).sum","decl":"theorem List.sum_smul {l : List R} {x : M} : l.sum • x = (l.map fun r ↦ r • x).sum :=\n  map_list_sum ((smulAddHom R M).flip x) l\n\n"}
{"name":"Multiset.sum_smul","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"R : Type u_5\nM : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nl : Multiset R\nx : M\n⊢ Eq (HSMul.hSMul l.sum x) (Multiset.map (fun r => HSMul.hSMul r x) l).sum","decl":"theorem Multiset.sum_smul {l : Multiset R} {x : M} : l.sum • x = (l.map fun r ↦ r • x).sum :=\n  ((smulAddHom R M).flip x).map_multiset_sum l\n\n"}
{"name":"Multiset.sum_smul_sum","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"R : Type u_5\nM : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\ns : Multiset R\nt : Multiset M\n⊢ Eq (HSMul.hSMul s.sum t.sum) (Multiset.map (fun p => HSMul.hSMul p.1 p.2) (SProd.sprod s t)).sum","decl":"theorem Multiset.sum_smul_sum {s : Multiset R} {t : Multiset M} :\n    s.sum • t.sum = ((s ×ˢ t).map fun p : R × M ↦ p.fst • p.snd).sum := by\n  induction' s using Multiset.induction with a s ih\n  · simp\n  · simp [add_smul, ih, ← Multiset.smul_sum]\n\n"}
{"name":"Finset.sum_smul","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"ι : Type u_1\nR : Type u_5\nM : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nf : ι → R\ns : Finset ι\nx : M\n⊢ Eq (HSMul.hSMul (s.sum fun i => f i) x) (s.sum fun i => HSMul.hSMul (f i) x)","decl":"theorem Finset.sum_smul {f : ι → R} {s : Finset ι} {x : M} :\n    (∑ i ∈ s, f i) • x = ∑ i ∈ s, f i • x := map_sum ((smulAddHom R M).flip x) f s\n\n"}
{"name":"Finset.sum_smul_sum","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"α : Type u_3\nβ : Type u_4\nR : Type u_5\nM : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\ns : Finset α\nt : Finset β\nf : α → R\ng : β → M\n⊢ Eq (HSMul.hSMul (s.sum fun i => f i) (t.sum fun j => g j)) (s.sum fun i => t.sum fun j => HSMul.hSMul (f i) (g j))","decl":"lemma Finset.sum_smul_sum (s : Finset α) (t : Finset β) {f : α → R} {g : β → M} :\n    (∑ i ∈ s, f i) • ∑ j ∈ t, g j = ∑ i ∈ s, ∑ j ∈ t, f i • g j := by\n  simp_rw [sum_smul, ← smul_sum]\n\n"}
{"name":"Fintype.sum_smul_sum","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"α : Type u_3\nβ : Type u_4\nR : Type u_5\nM : Type u_6\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nf : α → R\ng : β → M\n⊢ Eq (HSMul.hSMul (Finset.univ.sum fun i => f i) (Finset.univ.sum fun j => g j)) (Finset.univ.sum fun i => Finset.univ.sum fun j => HSMul.hSMul (f i) (g j))","decl":"lemma Fintype.sum_smul_sum [Fintype α] [Fintype β] (f : α → R) (g : β → M) :\n    (∑ i, f i) • ∑ j, g j = ∑ i, ∑ j, f i • g j := Finset.sum_smul_sum _ _\n\n"}
{"name":"Finset.cast_card","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"α : Type u_3\nR : Type u_5\ninst✝ : CommSemiring R\ns : Finset α\n⊢ Eq (↑s.card) (s.sum fun x => 1)","decl":"theorem Finset.cast_card [CommSemiring R] (s : Finset α) : (#s : R) = ∑ _ ∈ s, 1 := by\n  rw [Finset.sum_const, Nat.smul_one_eq_cast]\n\n"}
{"name":"Fintype.sum_piFinset_apply","module":"Mathlib.Algebra.Module.BigOperators","initialProofState":"ι : Type u_1\nκ : Type u_2\nα : Type u_3\ninst✝² : DecidableEq ι\ninst✝¹ : Fintype ι\ninst✝ : AddCommMonoid α\nf : κ → α\ns : Finset κ\ni : ι\n⊢ Eq ((Fintype.piFinset fun x => s).sum fun g => f (g i)) (HSMul.hSMul (HPow.hPow s.card (HSub.hSub (Fintype.card ι) 1)) (s.sum fun b => f b))","decl":"lemma sum_piFinset_apply (f : κ → α) (s : Finset κ) (i : ι) :\n    ∑ g ∈ piFinset fun _ : ι ↦ s, f (g i) = #s ^ (card ι - 1) • ∑ b ∈ s, f b := by\n  classical\n  rw [Finset.sum_comp]\n  simp only [eval_image_piFinset_const, card_filter_piFinset_const s, ite_smul, zero_smul, smul_sum,\n    Finset.sum_ite_mem, inter_self]\n\n"}
