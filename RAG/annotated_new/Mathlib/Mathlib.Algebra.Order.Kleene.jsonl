{"name":"IdemSemiring.add_eq_sup","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u\nself : IdemSemiring α\na b : α\n⊢ Eq (HAdd.hAdd a b) (Max.max a b)","decl":"/-- An idempotent semiring is a semiring with the additional property that addition is idempotent.\n-/\nclass IdemSemiring (α : Type u) extends Semiring α, SemilatticeSup α where\n  protected sup := (· + ·)\n  protected add_eq_sup : ∀ a b : α, a + b = a ⊔ b := by\n    intros\n    rfl\n  /-- The bottom element of an idempotent semiring: `0` by default -/\n  protected bot : α := 0\n  protected bot_le : ∀ a, bot ≤ a\n\n"}
{"name":"IdemSemiring.bot_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u\nself : IdemSemiring α\na : α\n⊢ LE.le IdemSemiring.bot a","decl":"/-- An idempotent semiring is a semiring with the additional property that addition is idempotent.\n-/\nclass IdemSemiring (α : Type u) extends Semiring α, SemilatticeSup α where\n  protected sup := (· + ·)\n  protected add_eq_sup : ∀ a b : α, a + b = a ⊔ b := by\n    intros\n    rfl\n  /-- The bottom element of an idempotent semiring: `0` by default -/\n  protected bot : α := 0\n  protected bot_le : ∀ a, bot ≤ a\n\n"}
{"name":"IdemCommSemiring.bot_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u\nself : IdemCommSemiring α\na : α\n⊢ LE.le IdemCommSemiring.bot a","decl":"/-- An idempotent commutative semiring is a commutative semiring with the additional property that\naddition is idempotent. -/\nclass IdemCommSemiring (α : Type u) extends CommSemiring α, IdemSemiring α\n\n"}
{"name":"IdemCommSemiring.add_eq_sup","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u\nself : IdemCommSemiring α\na b : α\n⊢ Eq (HAdd.hAdd a b) (Max.max a b)","decl":"/-- An idempotent commutative semiring is a commutative semiring with the additional property that\naddition is idempotent. -/\nclass IdemCommSemiring (α : Type u) extends CommSemiring α, IdemSemiring α\n\n"}
{"name":"KleeneAlgebra.one_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_5\nself : KleeneAlgebra α\na : α\n⊢ LE.le 1 (KStar.kstar a)","decl":"/-- A Kleene Algebra is an idempotent semiring with an additional unary operator `kstar` (for Kleene\nstar) that satisfies the following properties:\n* `1 + a * a∗ ≤ a∗`\n* `1 + a∗ * a ≤ a∗`\n* If `a * c + b ≤ c`, then `a∗ * b ≤ c`\n* If `c * a + b ≤ c`, then `b * a∗ ≤ c`\n-/\nclass KleeneAlgebra (α : Type*) extends IdemSemiring α, KStar α where\n  protected one_le_kstar : ∀ a : α, 1 ≤ a∗\n  protected mul_kstar_le_kstar : ∀ a : α, a * a∗ ≤ a∗\n  protected kstar_mul_le_kstar : ∀ a : α, a∗ * a ≤ a∗\n  protected mul_kstar_le_self : ∀ a b : α, b * a ≤ b → b * a∗ ≤ b\n  protected kstar_mul_le_self : ∀ a b : α, a * b ≤ b → a∗ * b ≤ b\n\n-- See note [lower instance priority]\n"}
{"name":"KleeneAlgebra.kstar_mul_le_self","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_5\nself : KleeneAlgebra α\na b : α\na✝ : LE.le (HMul.hMul a b) b\n⊢ LE.le (HMul.hMul (KStar.kstar a) b) b","decl":"/-- A Kleene Algebra is an idempotent semiring with an additional unary operator `kstar` (for Kleene\nstar) that satisfies the following properties:\n* `1 + a * a∗ ≤ a∗`\n* `1 + a∗ * a ≤ a∗`\n* If `a * c + b ≤ c`, then `a∗ * b ≤ c`\n* If `c * a + b ≤ c`, then `b * a∗ ≤ c`\n-/\nclass KleeneAlgebra (α : Type*) extends IdemSemiring α, KStar α where\n  protected one_le_kstar : ∀ a : α, 1 ≤ a∗\n  protected mul_kstar_le_kstar : ∀ a : α, a * a∗ ≤ a∗\n  protected kstar_mul_le_kstar : ∀ a : α, a∗ * a ≤ a∗\n  protected mul_kstar_le_self : ∀ a b : α, b * a ≤ b → b * a∗ ≤ b\n  protected kstar_mul_le_self : ∀ a b : α, a * b ≤ b → a∗ * b ≤ b\n\n-- See note [lower instance priority]\n"}
{"name":"KleeneAlgebra.kstar_mul_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_5\nself : KleeneAlgebra α\na : α\n⊢ LE.le (HMul.hMul (KStar.kstar a) a) (KStar.kstar a)","decl":"/-- A Kleene Algebra is an idempotent semiring with an additional unary operator `kstar` (for Kleene\nstar) that satisfies the following properties:\n* `1 + a * a∗ ≤ a∗`\n* `1 + a∗ * a ≤ a∗`\n* If `a * c + b ≤ c`, then `a∗ * b ≤ c`\n* If `c * a + b ≤ c`, then `b * a∗ ≤ c`\n-/\nclass KleeneAlgebra (α : Type*) extends IdemSemiring α, KStar α where\n  protected one_le_kstar : ∀ a : α, 1 ≤ a∗\n  protected mul_kstar_le_kstar : ∀ a : α, a * a∗ ≤ a∗\n  protected kstar_mul_le_kstar : ∀ a : α, a∗ * a ≤ a∗\n  protected mul_kstar_le_self : ∀ a b : α, b * a ≤ b → b * a∗ ≤ b\n  protected kstar_mul_le_self : ∀ a b : α, a * b ≤ b → a∗ * b ≤ b\n\n-- See note [lower instance priority]\n"}
{"name":"KleeneAlgebra.mul_kstar_le_self","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_5\nself : KleeneAlgebra α\na b : α\na✝ : LE.le (HMul.hMul b a) b\n⊢ LE.le (HMul.hMul b (KStar.kstar a)) b","decl":"/-- A Kleene Algebra is an idempotent semiring with an additional unary operator `kstar` (for Kleene\nstar) that satisfies the following properties:\n* `1 + a * a∗ ≤ a∗`\n* `1 + a∗ * a ≤ a∗`\n* If `a * c + b ≤ c`, then `a∗ * b ≤ c`\n* If `c * a + b ≤ c`, then `b * a∗ ≤ c`\n-/\nclass KleeneAlgebra (α : Type*) extends IdemSemiring α, KStar α where\n  protected one_le_kstar : ∀ a : α, 1 ≤ a∗\n  protected mul_kstar_le_kstar : ∀ a : α, a * a∗ ≤ a∗\n  protected kstar_mul_le_kstar : ∀ a : α, a∗ * a ≤ a∗\n  protected mul_kstar_le_self : ∀ a b : α, b * a ≤ b → b * a∗ ≤ b\n  protected kstar_mul_le_self : ∀ a b : α, a * b ≤ b → a∗ * b ≤ b\n\n-- See note [lower instance priority]\n"}
{"name":"KleeneAlgebra.mul_kstar_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_5\nself : KleeneAlgebra α\na : α\n⊢ LE.le (HMul.hMul a (KStar.kstar a)) (KStar.kstar a)","decl":"/-- A Kleene Algebra is an idempotent semiring with an additional unary operator `kstar` (for Kleene\nstar) that satisfies the following properties:\n* `1 + a * a∗ ≤ a∗`\n* `1 + a∗ * a ≤ a∗`\n* If `a * c + b ≤ c`, then `a∗ * b ≤ c`\n* If `c * a + b ≤ c`, then `b * a∗ ≤ c`\n-/\nclass KleeneAlgebra (α : Type*) extends IdemSemiring α, KStar α where\n  protected one_le_kstar : ∀ a : α, 1 ≤ a∗\n  protected mul_kstar_le_kstar : ∀ a : α, a * a∗ ≤ a∗\n  protected kstar_mul_le_kstar : ∀ a : α, a∗ * a ≤ a∗\n  protected mul_kstar_le_self : ∀ a b : α, b * a ≤ b → b * a∗ ≤ b\n  protected kstar_mul_le_self : ∀ a b : α, a * b ≤ b → a∗ * b ≤ b\n\n-- See note [lower instance priority]\n"}
{"name":"add_eq_sup","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b : α\n⊢ Eq (HAdd.hAdd a b) (Max.max a b)","decl":"theorem add_eq_sup (a b : α) : a + b = a ⊔ b :=\n  IdemSemiring.add_eq_sup _ _\n\n-- Porting note: This simp theorem often leads to timeout when `α` has rich structure.\n--               So, this theorem should be scoped.\n"}
{"name":"add_idem","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na : α\n⊢ Eq (HAdd.hAdd a a) a","decl":"theorem add_idem (a : α) : a + a = a := by simp\n\n"}
{"name":"natCast_eq_one","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\nn : Nat\nnezero : Ne n 0\n⊢ Eq (↑n) 1","decl":"lemma natCast_eq_one {n : ℕ} (nezero : n ≠ 0) : (n : α) = 1 := by\n  induction n, Nat.one_le_iff_ne_zero.mpr nezero using Nat.le_induction with\n  | base => exact Nat.cast_one\n  | succ x _ hx => rw [Nat.cast_add, hx, Nat.cast_one, add_idem 1]\n\n"}
{"name":"ofNat_eq_one","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝¹ : IdemSemiring α\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (OfNat.ofNat n) 1","decl":"lemma ofNat_eq_one {n : ℕ} [n.AtLeastTwo] : (ofNat(n) : α) = 1 :=\n  natCast_eq_one <| Nat.not_eq_zero_of_lt Nat.AtLeastTwo.prop\n\n"}
{"name":"nsmul_eq_self","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\nn : Nat\nx✝ : Ne n 0\na : α\n⊢ Eq (HSMul.hSMul n a) a","decl":"theorem nsmul_eq_self : ∀ {n : ℕ} (_ : n ≠ 0) (a : α), n • a = a\n  | 0, h => (h rfl).elim\n  | 1, _ => one_nsmul\n  | n + 2, _ => fun a ↦ by rw [succ_nsmul, nsmul_eq_self n.succ_ne_zero, add_idem]\n\n"}
{"name":"add_eq_left_iff_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b : α\n⊢ Iff (Eq (HAdd.hAdd a b) a) (LE.le b a)","decl":"theorem add_eq_left_iff_le : a + b = a ↔ b ≤ a := by simp\n\n"}
{"name":"add_eq_right_iff_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b : α\n⊢ Iff (Eq (HAdd.hAdd a b) b) (LE.le a b)","decl":"theorem add_eq_right_iff_le : a + b = b ↔ a ≤ b := by simp\n\n"}
{"name":"LE.le.add_eq_left","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b : α\na✝ : LE.le b a\n⊢ Eq (HAdd.hAdd a b) a","decl":"alias ⟨_, LE.le.add_eq_left⟩ := add_eq_left_iff_le\n\n"}
{"name":"LE.le.add_eq_right","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b : α\na✝ : LE.le a b\n⊢ Eq (HAdd.hAdd a b) b","decl":"alias ⟨_, LE.le.add_eq_right⟩ := add_eq_right_iff_le\n\n"}
{"name":"add_le_iff","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b c : α\n⊢ Iff (LE.le (HAdd.hAdd a b) c) (And (LE.le a c) (LE.le b c))","decl":"theorem add_le_iff : a + b ≤ c ↔ a ≤ c ∧ b ≤ c := by simp\n\n"}
{"name":"add_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\na b c : α\nha : LE.le a c\nhb : LE.le b c\n⊢ LE.le (HAdd.hAdd a b) c","decl":"theorem add_le (ha : a ≤ c) (hb : b ≤ c) : a + b ≤ c :=\n  add_le_iff.2 ⟨ha, hb⟩\n\n-- See note [lower instance priority]\n"}
{"name":"IdemSemiring.toCanonicallyOrderedAdd","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\n⊢ CanonicallyOrderedAdd α","decl":"instance (priority := 100) IdemSemiring.toCanonicallyOrderedAdd :\n    CanonicallyOrderedAdd α :=\n  { exists_add_of_le := fun h ↦ ⟨_, h.add_eq_right.symm⟩\n    le_self_add := fun a b ↦ add_eq_right_iff_le.1 <| by rw [← add_assoc, add_idem] }\n\n-- See note [lower instance priority]\n"}
{"name":"IdemSemiring.toMulLeftMono","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\n⊢ MulLeftMono α","decl":"instance (priority := 100) IdemSemiring.toMulLeftMono : MulLeftMono α :=\n  ⟨fun a b c hbc ↦ add_eq_left_iff_le.1 <| by rw [← mul_add, hbc.add_eq_left]⟩\n\n-- See note [lower instance priority]\n"}
{"name":"IdemSemiring.toMulRightMono","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : IdemSemiring α\n⊢ MulRightMono α","decl":"instance (priority := 100) IdemSemiring.toMulRightMono : MulRightMono α :=\n  ⟨fun a b c hbc ↦ add_eq_left_iff_le.1 <| by rw [← add_mul, hbc.add_eq_left]⟩\n\n"}
{"name":"one_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ LE.le 1 (KStar.kstar a)","decl":"@[simp]\ntheorem one_le_kstar : 1 ≤ a∗ :=\n  KleeneAlgebra.one_le_kstar _\n\n"}
{"name":"mul_kstar_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ LE.le (HMul.hMul a (KStar.kstar a)) (KStar.kstar a)","decl":"theorem mul_kstar_le_kstar : a * a∗ ≤ a∗ :=\n  KleeneAlgebra.mul_kstar_le_kstar _\n\n"}
{"name":"kstar_mul_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ LE.le (HMul.hMul (KStar.kstar a) a) (KStar.kstar a)","decl":"theorem kstar_mul_le_kstar : a∗ * a ≤ a∗ :=\n  KleeneAlgebra.kstar_mul_le_kstar _\n\n"}
{"name":"mul_kstar_le_self","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na b : α\na✝ : LE.le (HMul.hMul b a) b\n⊢ LE.le (HMul.hMul b (KStar.kstar a)) b","decl":"theorem mul_kstar_le_self : b * a ≤ b → b * a∗ ≤ b :=\n  KleeneAlgebra.mul_kstar_le_self _ _\n\n"}
{"name":"kstar_mul_le_self","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na b : α\na✝ : LE.le (HMul.hMul a b) b\n⊢ LE.le (HMul.hMul (KStar.kstar a) b) b","decl":"theorem kstar_mul_le_self : a * b ≤ b → a∗ * b ≤ b :=\n  KleeneAlgebra.kstar_mul_le_self _ _\n\n"}
{"name":"mul_kstar_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na b c : α\nhb : LE.le b c\nha : LE.le (HMul.hMul c a) c\n⊢ LE.le (HMul.hMul b (KStar.kstar a)) c","decl":"theorem mul_kstar_le (hb : b ≤ c) (ha : c * a ≤ c) : b * a∗ ≤ c :=\n  (mul_le_mul_right' hb _).trans <| mul_kstar_le_self ha\n\n"}
{"name":"kstar_mul_le","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na b c : α\nhb : LE.le b c\nha : LE.le (HMul.hMul a c) c\n⊢ LE.le (HMul.hMul (KStar.kstar a) b) c","decl":"theorem kstar_mul_le (hb : b ≤ c) (ha : a * c ≤ c) : a∗ * b ≤ c :=\n  (mul_le_mul_left' hb _).trans <| kstar_mul_le_self ha\n\n"}
{"name":"kstar_le_of_mul_le_left","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na b : α\nhb : LE.le 1 b\na✝ : LE.le (HMul.hMul b a) b\n⊢ LE.le (KStar.kstar a) b","decl":"theorem kstar_le_of_mul_le_left (hb : 1 ≤ b) : b * a ≤ b → a∗ ≤ b := by\n  simpa using mul_kstar_le hb\n\n"}
{"name":"kstar_le_of_mul_le_right","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na b : α\nhb : LE.le 1 b\na✝ : LE.le (HMul.hMul a b) b\n⊢ LE.le (KStar.kstar a) b","decl":"theorem kstar_le_of_mul_le_right (hb : 1 ≤ b) : a * b ≤ b → a∗ ≤ b := by\n  simpa using kstar_mul_le hb\n\n"}
{"name":"le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ LE.le a (KStar.kstar a)","decl":"@[simp]\ntheorem le_kstar : a ≤ a∗ :=\n  le_trans (le_mul_of_one_le_left' one_le_kstar) kstar_mul_le_kstar\n\n"}
{"name":"kstar_mono","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\n⊢ Monotone KStar.kstar","decl":"@[mono]\ntheorem kstar_mono : Monotone (KStar.kstar : α → α) :=\n  fun _ _ h ↦\n    kstar_le_of_mul_le_left one_le_kstar <| kstar_mul_le (h.trans le_kstar) <| mul_kstar_le_kstar\n\n"}
{"name":"kstar_eq_one","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ Iff (Eq (KStar.kstar a) 1) (LE.le a 1)","decl":"@[simp]\ntheorem kstar_eq_one : a∗ = 1 ↔ a ≤ 1 :=\n  ⟨le_kstar.trans_eq,\n    fun h ↦ one_le_kstar.antisymm' <| kstar_le_of_mul_le_left le_rfl <| by rwa [one_mul]⟩\n\n"}
{"name":"kstar_zero","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\n⊢ Eq (KStar.kstar 0) 1","decl":"@[simp] lemma kstar_zero : (0 : α)∗ = 1 := kstar_eq_one.2 (zero_le _)\n\n"}
{"name":"kstar_one","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\n⊢ Eq (KStar.kstar 1) 1","decl":"@[simp]\ntheorem kstar_one : (1 : α)∗ = 1 :=\n  kstar_eq_one.2 le_rfl\n\n"}
{"name":"kstar_mul_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ Eq (HMul.hMul (KStar.kstar a) (KStar.kstar a)) (KStar.kstar a)","decl":"@[simp]\ntheorem kstar_mul_kstar (a : α) : a∗ * a∗ = a∗ :=\n  (mul_kstar_le le_rfl <| kstar_mul_le_kstar).antisymm <| le_mul_of_one_le_left' one_le_kstar\n\n"}
{"name":"kstar_eq_self","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ Iff (Eq (KStar.kstar a) a) (And (Eq (HMul.hMul a a) a) (LE.le 1 a))","decl":"@[simp]\ntheorem kstar_eq_self : a∗ = a ↔ a * a = a ∧ 1 ≤ a :=\n  ⟨fun h ↦ ⟨by rw [← h, kstar_mul_kstar], one_le_kstar.trans_eq h⟩,\n    fun h ↦ (kstar_le_of_mul_le_left h.2 h.1.le).antisymm le_kstar⟩\n\n"}
{"name":"kstar_idem","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\n⊢ Eq (KStar.kstar (KStar.kstar a)) (KStar.kstar a)","decl":"@[simp]\ntheorem kstar_idem (a : α) : a∗∗ = a∗ :=\n  kstar_eq_self.2 ⟨kstar_mul_kstar _, one_le_kstar⟩\n\n"}
{"name":"pow_le_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\ninst✝ : KleeneAlgebra α\na : α\nn : Nat\n⊢ LE.le (HPow.hPow a n) (KStar.kstar a)","decl":"@[simp]\ntheorem pow_le_kstar : ∀ {n : ℕ}, a ^ n ≤ a∗\n  | 0 => (pow_zero _).trans_le one_le_kstar\n  | n + 1 => by\n    rw [pow_succ']\n    exact (mul_le_mul_left' pow_le_kstar _).trans mul_kstar_le_kstar\n\n"}
{"name":"Prod.kstar_def","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : KleeneAlgebra α\ninst✝ : KleeneAlgebra β\na : Prod α β\n⊢ Eq (KStar.kstar a) { fst := KStar.kstar a.1, snd := KStar.kstar a.2 }","decl":"theorem kstar_def (a : α × β) : a∗ = (a.1∗, a.2∗) :=\n  rfl\n\n"}
{"name":"Prod.fst_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : KleeneAlgebra α\ninst✝ : KleeneAlgebra β\na : Prod α β\n⊢ Eq (KStar.kstar a).1 (KStar.kstar a.1)","decl":"@[simp]\ntheorem fst_kstar (a : α × β) : a∗.1 = a.1∗ :=\n  rfl\n\n"}
{"name":"Prod.snd_kstar","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : KleeneAlgebra α\ninst✝ : KleeneAlgebra β\na : Prod α β\n⊢ Eq (KStar.kstar a).2 (KStar.kstar a.2)","decl":"@[simp]\ntheorem snd_kstar (a : α × β) : a∗.2 = a.2∗ :=\n  rfl\n\n"}
{"name":"Pi.kstar_def","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"ι : Type u_3\nπ : ι → Type u_4\ninst✝ : (i : ι) → KleeneAlgebra (π i)\na : (i : ι) → π i\n⊢ Eq (KStar.kstar a) fun i => KStar.kstar (a i)","decl":"theorem kstar_def (a : ∀ i, π i) : a∗ = fun i ↦ (a i)∗ :=\n  rfl\n\n"}
{"name":"Pi.kstar_apply","module":"Mathlib.Algebra.Order.Kleene","initialProofState":"ι : Type u_3\nπ : ι → Type u_4\ninst✝ : (i : ι) → KleeneAlgebra (π i)\na : (i : ι) → π i\ni : ι\n⊢ Eq (KStar.kstar a i) (KStar.kstar (a i))","decl":"@[simp]\ntheorem kstar_apply (a : ∀ i, π i) (i : ι) : a∗ i = (a i)∗ :=\n  rfl\n\n"}
