{"name":"CategoryTheory.Adjunction.homEquiv_leftAdjointUniq_hom_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nx : C\n⊢ Eq ((adj1.homEquiv x (F'.obj x)) ((adj1.leftAdjointUniq adj2).hom.app x)) (adj2.unit.app x)","decl":"theorem homEquiv_leftAdjointUniq_hom_app {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (x : C) : adj1.homEquiv _ _ ((leftAdjointUniq adj1 adj2).hom.app x) = adj2.unit.app x := by\n  simp [leftAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.unit_leftAdjointUniq_hom","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\n⊢ Eq (CategoryTheory.CategoryStruct.comp adj1.unit (CategoryTheory.whiskerRight (adj1.leftAdjointUniq adj2).hom G)) adj2.unit","decl":"@[reassoc (attr := simp)]\ntheorem unit_leftAdjointUniq_hom {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) :\n    adj1.unit ≫ whiskerRight (leftAdjointUniq adj1 adj2).hom G = adj2.unit := by\n  ext x\n  rw [NatTrans.comp_app, ← homEquiv_leftAdjointUniq_hom_app adj1 adj2]\n  simp [← G.map_comp]\n\n"}
{"name":"CategoryTheory.Adjunction.unit_leftAdjointUniq_hom_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nZ : CategoryTheory.Functor C C\nh : Quiver.Hom (F'.comp G) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp adj1.unit (CategoryTheory.CategoryStruct.comp (CategoryTheory.whiskerRight (adj1.leftAdjointUniq adj2).hom G) h)) (CategoryTheory.CategoryStruct.comp adj2.unit h)","decl":"@[reassoc (attr := simp)]\ntheorem unit_leftAdjointUniq_hom {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) :\n    adj1.unit ≫ whiskerRight (leftAdjointUniq adj1 adj2).hom G = adj2.unit := by\n  ext x\n  rw [NatTrans.comp_app, ← homEquiv_leftAdjointUniq_hom_app adj1 adj2]\n  simp [← G.map_comp]\n\n"}
{"name":"CategoryTheory.Adjunction.unit_leftAdjointUniq_hom_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nx : C\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.unit.app x) (G.map ((adj1.leftAdjointUniq adj2).hom.app x))) (adj2.unit.app x)","decl":"@[reassoc (attr := simp)]\ntheorem unit_leftAdjointUniq_hom_app\n    {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) (x : C) :\n    adj1.unit.app x ≫ G.map ((leftAdjointUniq adj1 adj2).hom.app x) = adj2.unit.app x := by\n  rw [← unit_leftAdjointUniq_hom adj1 adj2]; rfl\n\n"}
{"name":"CategoryTheory.Adjunction.unit_leftAdjointUniq_hom_app_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nx Z : C\nh : Quiver.Hom (G.obj (F'.obj x)) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.unit.app x) (CategoryTheory.CategoryStruct.comp (G.map ((adj1.leftAdjointUniq adj2).hom.app x)) h)) (CategoryTheory.CategoryStruct.comp (adj2.unit.app x) h)","decl":"@[reassoc (attr := simp)]\ntheorem unit_leftAdjointUniq_hom_app\n    {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) (x : C) :\n    adj1.unit.app x ≫ G.map ((leftAdjointUniq adj1 adj2).hom.app x) = adj2.unit.app x := by\n  rw [← unit_leftAdjointUniq_hom adj1 adj2]; rfl\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_hom_counit","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.whiskerLeft G (adj1.leftAdjointUniq adj2).hom) adj2.counit) adj1.counit","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_hom_counit {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) :\n    whiskerLeft G (leftAdjointUniq adj1 adj2).hom ≫ adj2.counit = adj1.counit := by\n  ext x\n  simp only [Functor.comp_obj, Functor.id_obj, leftAdjointUniq, Iso.symm_hom,\n    conjugateIsoEquiv_symm_apply_inv, Iso.refl_inv, NatTrans.comp_app, whiskerLeft_app,\n    conjugateEquiv_symm_apply_app, NatTrans.id_app, Functor.map_id, Category.id_comp,\n    Category.assoc]\n  rw [← adj1.counit_naturality, ← Category.assoc, ← F.map_comp]\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_hom_counit_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nZ : CategoryTheory.Functor D D\nh : Quiver.Hom (CategoryTheory.Functor.id D) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.whiskerLeft G (adj1.leftAdjointUniq adj2).hom) (CategoryTheory.CategoryStruct.comp adj2.counit h)) (CategoryTheory.CategoryStruct.comp adj1.counit h)","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_hom_counit {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) :\n    whiskerLeft G (leftAdjointUniq adj1 adj2).hom ≫ adj2.counit = adj1.counit := by\n  ext x\n  simp only [Functor.comp_obj, Functor.id_obj, leftAdjointUniq, Iso.symm_hom,\n    conjugateIsoEquiv_symm_apply_inv, Iso.refl_inv, NatTrans.comp_app, whiskerLeft_app,\n    conjugateEquiv_symm_apply_app, NatTrans.id_app, Functor.map_id, Category.id_comp,\n    Category.assoc]\n  rw [← adj1.counit_naturality, ← Category.assoc, ← F.map_comp]\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_hom_app_counit_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nx Z : D\nh : Quiver.Hom x Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((adj1.leftAdjointUniq adj2).hom.app (G.obj x)) (CategoryTheory.CategoryStruct.comp (adj2.counit.app x) h)) (CategoryTheory.CategoryStruct.comp (adj1.counit.app x) h)","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_hom_app_counit {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (x : D) :\n    (leftAdjointUniq adj1 adj2).hom.app (G.obj x) ≫ adj2.counit.app x = adj1.counit.app x := by\n  rw [← leftAdjointUniq_hom_counit adj1 adj2]\n  rfl\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_hom_app_counit","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nx : D\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((adj1.leftAdjointUniq adj2).hom.app (G.obj x)) (adj2.counit.app x)) (adj1.counit.app x)","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_hom_app_counit {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (x : D) :\n    (leftAdjointUniq adj1 adj2).hom.app (G.obj x) ≫ adj2.counit.app x = adj1.counit.app x := by\n  rw [← leftAdjointUniq_hom_counit adj1 adj2]\n  rfl\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_inv_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nx : C\n⊢ Eq ((adj1.leftAdjointUniq adj2).inv.app x) ((adj2.leftAdjointUniq adj1).hom.app x)","decl":"theorem leftAdjointUniq_inv_app {F F' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G) (x : C) :\n    (leftAdjointUniq adj1 adj2).inv.app x = (leftAdjointUniq adj2 adj1).hom.app x :=\n  rfl\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_trans_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' F'' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nadj3 : CategoryTheory.Adjunction F'' G\nZ : CategoryTheory.Functor C D\nh : Quiver.Hom F'' Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.leftAdjointUniq adj2).hom (CategoryTheory.CategoryStruct.comp (adj2.leftAdjointUniq adj3).hom h)) (CategoryTheory.CategoryStruct.comp (adj1.leftAdjointUniq adj3).hom h)","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_trans {F F' F'' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (adj3 : F'' ⊣ G) :\n    (leftAdjointUniq adj1 adj2).hom ≫ (leftAdjointUniq adj2 adj3).hom =\n      (leftAdjointUniq adj1 adj3).hom := by\n  simp [leftAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_trans","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' F'' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nadj3 : CategoryTheory.Adjunction F'' G\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.leftAdjointUniq adj2).hom (adj2.leftAdjointUniq adj3).hom) (adj1.leftAdjointUniq adj3).hom","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_trans {F F' F'' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (adj3 : F'' ⊣ G) :\n    (leftAdjointUniq adj1 adj2).hom ≫ (leftAdjointUniq adj2 adj3).hom =\n      (leftAdjointUniq adj1 adj3).hom := by\n  simp [leftAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_trans_app_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' F'' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nadj3 : CategoryTheory.Adjunction F'' G\nx : C\nZ : D\nh : Quiver.Hom (F''.obj x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((adj1.leftAdjointUniq adj2).hom.app x) (CategoryTheory.CategoryStruct.comp ((adj2.leftAdjointUniq adj3).hom.app x) h)) (CategoryTheory.CategoryStruct.comp ((adj1.leftAdjointUniq adj3).hom.app x) h)","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_trans_app {F F' F'' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (adj3 : F'' ⊣ G) (x : C) :\n    (leftAdjointUniq adj1 adj2).hom.app x ≫ (leftAdjointUniq adj2 adj3).hom.app x =\n      (leftAdjointUniq adj1 adj3).hom.app x := by\n  rw [← leftAdjointUniq_trans adj1 adj2 adj3]\n  rfl\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_trans_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF F' F'' : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F' G\nadj3 : CategoryTheory.Adjunction F'' G\nx : C\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((adj1.leftAdjointUniq adj2).hom.app x) ((adj2.leftAdjointUniq adj3).hom.app x)) ((adj1.leftAdjointUniq adj3).hom.app x)","decl":"@[reassoc (attr := simp)]\ntheorem leftAdjointUniq_trans_app {F F' F'' : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F' ⊣ G)\n    (adj3 : F'' ⊣ G) (x : C) :\n    (leftAdjointUniq adj1 adj2).hom.app x ≫ (leftAdjointUniq adj2 adj3).hom.app x =\n      (leftAdjointUniq adj1 adj3).hom.app x := by\n  rw [← leftAdjointUniq_trans adj1 adj2 adj3]\n  rfl\n\n"}
{"name":"CategoryTheory.Adjunction.leftAdjointUniq_refl","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\n⊢ Eq (adj1.leftAdjointUniq adj1).hom (CategoryTheory.CategoryStruct.id F)","decl":"@[simp]\ntheorem leftAdjointUniq_refl {F : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) :\n    (leftAdjointUniq adj1 adj1).hom = 𝟙 _ := by\n  simp [leftAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.homEquiv_symm_rightAdjointUniq_hom_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nx : D\n⊢ Eq ((adj2.homEquiv (G.obj x) x).symm ((adj1.rightAdjointUniq adj2).hom.app x)) (adj1.counit.app x)","decl":"theorem homEquiv_symm_rightAdjointUniq_hom_app {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G)\n    (adj2 : F ⊣ G') (x : D) :\n    (adj2.homEquiv _ _).symm ((rightAdjointUniq adj1 adj2).hom.app x) = adj1.counit.app x := by\n  simp [rightAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.unit_rightAdjointUniq_hom_app_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nx Z : C\nh : Quiver.Hom (G'.obj (F.obj x)) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.unit.app x) (CategoryTheory.CategoryStruct.comp ((adj1.rightAdjointUniq adj2).hom.app (F.obj x)) h)) (CategoryTheory.CategoryStruct.comp (adj2.unit.app x) h)","decl":"@[reassoc (attr := simp)]\ntheorem unit_rightAdjointUniq_hom_app {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (x : C) : adj1.unit.app x ≫ (rightAdjointUniq adj1 adj2).hom.app (F.obj x) =\n      adj2.unit.app x := by\n  simp only [Functor.id_obj, Functor.comp_obj, rightAdjointUniq, conjugateIsoEquiv_apply_hom,\n    Iso.refl_hom, conjugateEquiv_apply_app, NatTrans.id_app, Functor.map_id, Category.id_comp]\n  rw [← adj2.unit_naturality_assoc, ← G'.map_comp]\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.unit_rightAdjointUniq_hom_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nx : C\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.unit.app x) ((adj1.rightAdjointUniq adj2).hom.app (F.obj x))) (adj2.unit.app x)","decl":"@[reassoc (attr := simp)]\ntheorem unit_rightAdjointUniq_hom_app {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (x : C) : adj1.unit.app x ≫ (rightAdjointUniq adj1 adj2).hom.app (F.obj x) =\n      adj2.unit.app x := by\n  simp only [Functor.id_obj, Functor.comp_obj, rightAdjointUniq, conjugateIsoEquiv_apply_hom,\n    Iso.refl_hom, conjugateEquiv_apply_app, NatTrans.id_app, Functor.map_id, Category.id_comp]\n  rw [← adj2.unit_naturality_assoc, ← G'.map_comp]\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.unit_rightAdjointUniq_hom_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nZ : CategoryTheory.Functor C C\nh : Quiver.Hom (F.comp G') Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp adj1.unit (CategoryTheory.CategoryStruct.comp (CategoryTheory.whiskerLeft F (adj1.rightAdjointUniq adj2).hom) h)) (CategoryTheory.CategoryStruct.comp adj2.unit h)","decl":"@[reassoc (attr := simp)]\ntheorem unit_rightAdjointUniq_hom {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G') :\n    adj1.unit ≫ whiskerLeft F (rightAdjointUniq adj1 adj2).hom = adj2.unit := by\n  ext x\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.unit_rightAdjointUniq_hom","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\n⊢ Eq (CategoryTheory.CategoryStruct.comp adj1.unit (CategoryTheory.whiskerLeft F (adj1.rightAdjointUniq adj2).hom)) adj2.unit","decl":"@[reassoc (attr := simp)]\ntheorem unit_rightAdjointUniq_hom {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G') :\n    adj1.unit ≫ whiskerLeft F (rightAdjointUniq adj1 adj2).hom = adj2.unit := by\n  ext x\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_hom_app_counit_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nx Z : D\nh : Quiver.Hom x Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map ((adj1.rightAdjointUniq adj2).hom.app x)) (CategoryTheory.CategoryStruct.comp (adj2.counit.app x) h)) (CategoryTheory.CategoryStruct.comp (adj1.counit.app x) h)","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_hom_app_counit {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (x : D) :\n    F.map ((rightAdjointUniq adj1 adj2).hom.app x) ≫ adj2.counit.app x = adj1.counit.app x := by\n  simp [rightAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_hom_app_counit","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nx : D\n⊢ Eq (CategoryTheory.CategoryStruct.comp (F.map ((adj1.rightAdjointUniq adj2).hom.app x)) (adj2.counit.app x)) (adj1.counit.app x)","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_hom_app_counit {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (x : D) :\n    F.map ((rightAdjointUniq adj1 adj2).hom.app x) ≫ adj2.counit.app x = adj1.counit.app x := by\n  simp [rightAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_hom_counit","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.whiskerRight (adj1.rightAdjointUniq adj2).hom F) adj2.counit) adj1.counit","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_hom_counit {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G') :\n    whiskerRight (rightAdjointUniq adj1 adj2).hom F ≫ adj2.counit = adj1.counit := by\n  ext\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_hom_counit_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nZ : CategoryTheory.Functor D D\nh : Quiver.Hom (CategoryTheory.Functor.id D) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.whiskerRight (adj1.rightAdjointUniq adj2).hom F) (CategoryTheory.CategoryStruct.comp adj2.counit h)) (CategoryTheory.CategoryStruct.comp adj1.counit h)","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_hom_counit {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G') :\n    whiskerRight (rightAdjointUniq adj1 adj2).hom F ≫ adj2.counit = adj1.counit := by\n  ext\n  simp\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_inv_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nx : D\n⊢ Eq ((adj1.rightAdjointUniq adj2).inv.app x) ((adj2.rightAdjointUniq adj1).hom.app x)","decl":"theorem rightAdjointUniq_inv_app {F : C ⥤ D} {G G' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (x : D) : (rightAdjointUniq adj1 adj2).inv.app x = (rightAdjointUniq adj2 adj1).hom.app x :=\n  rfl\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_trans_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' G'' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nadj3 : CategoryTheory.Adjunction F G''\nZ : CategoryTheory.Functor D C\nh : Quiver.Hom G'' Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.rightAdjointUniq adj2).hom (CategoryTheory.CategoryStruct.comp (adj2.rightAdjointUniq adj3).hom h)) (CategoryTheory.CategoryStruct.comp (adj1.rightAdjointUniq adj3).hom h)","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_trans {F : C ⥤ D} {G G' G'' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (adj3 : F ⊣ G'') :\n    (rightAdjointUniq adj1 adj2).hom ≫ (rightAdjointUniq adj2 adj3).hom =\n      (rightAdjointUniq adj1 adj3).hom := by\n  simp [rightAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_trans","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' G'' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nadj3 : CategoryTheory.Adjunction F G''\n⊢ Eq (CategoryTheory.CategoryStruct.comp (adj1.rightAdjointUniq adj2).hom (adj2.rightAdjointUniq adj3).hom) (adj1.rightAdjointUniq adj3).hom","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_trans {F : C ⥤ D} {G G' G'' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (adj3 : F ⊣ G'') :\n    (rightAdjointUniq adj1 adj2).hom ≫ (rightAdjointUniq adj2 adj3).hom =\n      (rightAdjointUniq adj1 adj3).hom := by\n  simp [rightAdjointUniq]\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_trans_app_assoc","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' G'' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nadj3 : CategoryTheory.Adjunction F G''\nx : D\nZ : C\nh : Quiver.Hom (G''.obj x) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((adj1.rightAdjointUniq adj2).hom.app x) (CategoryTheory.CategoryStruct.comp ((adj2.rightAdjointUniq adj3).hom.app x) h)) (CategoryTheory.CategoryStruct.comp ((adj1.rightAdjointUniq adj3).hom.app x) h)","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_trans_app {F : C ⥤ D} {G G' G'' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (adj3 : F ⊣ G'') (x : D) :\n    (rightAdjointUniq adj1 adj2).hom.app x ≫ (rightAdjointUniq adj2 adj3).hom.app x =\n      (rightAdjointUniq adj1 adj3).hom.app x := by\n  rw [← rightAdjointUniq_trans adj1 adj2 adj3]\n  rfl\n\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_trans_app","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG G' G'' : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\nadj2 : CategoryTheory.Adjunction F G'\nadj3 : CategoryTheory.Adjunction F G''\nx : D\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((adj1.rightAdjointUniq adj2).hom.app x) ((adj2.rightAdjointUniq adj3).hom.app x)) ((adj1.rightAdjointUniq adj3).hom.app x)","decl":"@[reassoc (attr := simp)]\ntheorem rightAdjointUniq_trans_app {F : C ⥤ D} {G G' G'' : D ⥤ C} (adj1 : F ⊣ G) (adj2 : F ⊣ G')\n    (adj3 : F ⊣ G'') (x : D) :\n    (rightAdjointUniq adj1 adj2).hom.app x ≫ (rightAdjointUniq adj2 adj3).hom.app x =\n      (rightAdjointUniq adj1 adj3).hom.app x := by\n  rw [← rightAdjointUniq_trans adj1 adj2 adj3]\n  rfl\n\n\n"}
{"name":"CategoryTheory.Adjunction.rightAdjointUniq_refl","module":"Mathlib.CategoryTheory.Adjunction.Unique","initialProofState":"C : Type u_1\nD : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Category.{u_4, u_2} D\nF : CategoryTheory.Functor C D\nG : CategoryTheory.Functor D C\nadj1 : CategoryTheory.Adjunction F G\n⊢ Eq (adj1.rightAdjointUniq adj1).hom (CategoryTheory.CategoryStruct.id G)","decl":"@[simp]\ntheorem rightAdjointUniq_refl {F : C ⥤ D} {G : D ⥤ C} (adj1 : F ⊣ G) :\n    (rightAdjointUniq adj1 adj1).hom = 𝟙 _ := by\n  delta rightAdjointUniq\n  simp\n\n"}
