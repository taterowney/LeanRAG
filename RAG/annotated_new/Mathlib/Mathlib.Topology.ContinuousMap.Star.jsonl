{"name":"ContinuousMap.coe_star","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : Star β\ninst✝ : ContinuousStar β\nf : ContinuousMap α β\n⊢ Eq (⇑(Star.star f)) (Star.star ⇑f)","decl":"@[simp]\ntheorem coe_star (f : C(α, β)) : ⇑(star f) = star (⇑f) :=\n  rfl\n\n"}
{"name":"ContinuousMap.star_apply","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : Star β\ninst✝ : ContinuousStar β\nf : ContinuousMap α β\nx : α\n⊢ Eq ((Star.star f) x) (Star.star (f x))","decl":"@[simp]\ntheorem star_apply (f : C(α, β)) (x : α) : star f x = star (f x) :=\n  rfl\n\n"}
{"name":"ContinuousMap.instTrivialStar","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : Star β\ninst✝¹ : ContinuousStar β\ninst✝ : TrivialStar β\n⊢ TrivialStar (ContinuousMap α β)","decl":"instance instTrivialStar [TrivialStar β] : TrivialStar C(α, β) where\n  star_trivial _ := ext fun _ => star_trivial _\n\n"}
{"name":"ContinuousMap.instStarModule","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : TopologicalSpace β\ninst✝⁵ : Star R\ninst✝⁴ : Star β\ninst✝³ : SMul R β\ninst✝² : StarModule R β\ninst✝¹ : ContinuousStar β\ninst✝ : ContinuousConstSMul R β\n⊢ StarModule R (ContinuousMap α β)","decl":"instance [Star R] [Star β] [SMul R β] [StarModule R β] [ContinuousStar β]\n    [ContinuousConstSMul R β] : StarModule R C(α, β) where\n  star_smul _ _ := ext fun _ => star_smul _ _\n\n"}
{"name":"ContinuousMap.compStarAlgHom'_apply","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalSpace Y\n𝕜 : Type u_4\ninst✝⁶ : CommSemiring 𝕜\nA : Type u_5\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : TopologicalSemiring A\ninst✝² : Star A\ninst✝¹ : ContinuousStar A\ninst✝ : Algebra 𝕜 A\nf : ContinuousMap X Y\ng : ContinuousMap Y A\n⊢ Eq ((ContinuousMap.compStarAlgHom' 𝕜 A f) g) (g.comp f)","decl":"/-- The functorial map taking `f : C(X, Y)` to `C(Y, A) →⋆ₐ[𝕜] C(X, A)` given by pre-composition\nwith the continuous function `f`. See `ContinuousMap.compMonoidHom'` and\n`ContinuousMap.compAddMonoidHom'`, `ContinuousMap.compRightAlgHom` for bundlings of\npre-composition into a `MonoidHom`, an `AddMonoidHom` and an `AlgHom`, respectively, under\nsuitable assumptions on `A`. -/\n@[simps]\ndef compStarAlgHom' (f : C(X, Y)) : C(Y, A) →⋆ₐ[𝕜] C(X, A) where\n  toFun g := g.comp f\n  map_one' := one_comp _\n  map_mul' _ _ := rfl\n  map_zero' := zero_comp f\n  map_add' _ _ := rfl\n  commutes' _ := rfl\n  map_star' _ := rfl\n\n"}
{"name":"ContinuousMap.compStarAlgHom'_id","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\ninst✝⁷ : TopologicalSpace X\n𝕜 : Type u_4\ninst✝⁶ : CommSemiring 𝕜\nA : Type u_5\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : TopologicalSemiring A\ninst✝² : Star A\ninst✝¹ : ContinuousStar A\ninst✝ : Algebra 𝕜 A\n⊢ Eq (ContinuousMap.compStarAlgHom' 𝕜 A (ContinuousMap.id X)) (StarAlgHom.id 𝕜 (ContinuousMap X A))","decl":"/-- `ContinuousMap.compStarAlgHom'` sends the identity continuous map to the identity\n`StarAlgHom` -/\ntheorem compStarAlgHom'_id : compStarAlgHom' 𝕜 A (ContinuousMap.id X) = StarAlgHom.id 𝕜 C(X, A) :=\n  StarAlgHom.ext fun _ => ContinuousMap.ext fun _ => rfl\n\n"}
{"name":"ContinuousMap.compStarAlgHom'_comp","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\ninst✝⁹ : TopologicalSpace X\ninst✝⁸ : TopologicalSpace Y\ninst✝⁷ : TopologicalSpace Z\n𝕜 : Type u_4\ninst✝⁶ : CommSemiring 𝕜\nA : Type u_5\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : TopologicalSemiring A\ninst✝² : Star A\ninst✝¹ : ContinuousStar A\ninst✝ : Algebra 𝕜 A\ng : ContinuousMap Y Z\nf : ContinuousMap X Y\n⊢ Eq (ContinuousMap.compStarAlgHom' 𝕜 A (g.comp f)) ((ContinuousMap.compStarAlgHom' 𝕜 A f).comp (ContinuousMap.compStarAlgHom' 𝕜 A g))","decl":"/-- `ContinuousMap.compStarAlgHom'` is functorial. -/\ntheorem compStarAlgHom'_comp (g : C(Y, Z)) (f : C(X, Y)) :\n    compStarAlgHom' 𝕜 A (g.comp f) = (compStarAlgHom' 𝕜 A f).comp (compStarAlgHom' 𝕜 A g) :=\n  StarAlgHom.ext fun _ => ContinuousMap.ext fun _ => rfl\n\n"}
{"name":"ContinuousMap.compStarAlgHom_apply","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\nB : Type u_4\ninst✝¹³ : TopologicalSpace X\ninst✝¹² : CommSemiring 𝕜\ninst✝¹¹ : TopologicalSpace A\ninst✝¹⁰ : Semiring A\ninst✝⁹ : TopologicalSemiring A\ninst✝⁸ : Star A\ninst✝⁷ : ContinuousStar A\ninst✝⁶ : Algebra 𝕜 A\ninst✝⁵ : TopologicalSpace B\ninst✝⁴ : Semiring B\ninst✝³ : TopologicalSemiring B\ninst✝² : Star B\ninst✝¹ : ContinuousStar B\ninst✝ : Algebra 𝕜 B\nφ : StarAlgHom 𝕜 A B\nhφ : Continuous ⇑φ\nf : ContinuousMap X A\n⊢ Eq ((ContinuousMap.compStarAlgHom X φ hφ) f) ({ toFun := ⇑φ, continuous_toFun := hφ }.comp f)","decl":"/-- Post-composition with a continuous star algebra homomorphism is a star algebra homomorphism\nbetween spaces of continuous maps. -/\n@[simps]\ndef compStarAlgHom (φ : A →⋆ₐ[𝕜] B) (hφ : Continuous φ) :\n    C(X, A) →⋆ₐ[𝕜] C(X, B) where\n  toFun f := (⟨φ, hφ⟩ : C(A, B)).comp f\n  map_one' := ext fun _ => map_one φ\n  map_mul' f g := ext fun x => map_mul φ (f x) (g x)\n  map_zero' := ext fun _ => map_zero φ\n  map_add' f g := ext fun x => map_add φ (f x) (g x)\n  commutes' r := ext fun _x => AlgHomClass.commutes φ r\n  map_star' f := ext fun x => map_star φ (f x)\n\n"}
{"name":"ContinuousMap.compStarAlgHom_id","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : TopologicalSemiring A\ninst✝² : Star A\ninst✝¹ : ContinuousStar A\ninst✝ : Algebra 𝕜 A\n⊢ Eq (ContinuousMap.compStarAlgHom X (StarAlgHom.id 𝕜 A) ⋯) (StarAlgHom.id 𝕜 (ContinuousMap X A))","decl":"/-- `ContinuousMap.compStarAlgHom` sends the identity `StarAlgHom` on `A` to the identity\n`StarAlgHom` on `C(X, A)`. -/\nlemma compStarAlgHom_id : compStarAlgHom X (.id 𝕜 A) continuous_id = .id 𝕜 C(X, A) := rfl\n\n"}
{"name":"ContinuousMap.compStarAlgHom_comp","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\n𝕜 : Type u_2\nA : Type u_3\nB : Type u_4\nC : Type u_5\ninst✝¹⁹ : TopologicalSpace X\ninst✝¹⁸ : CommSemiring 𝕜\ninst✝¹⁷ : TopologicalSpace A\ninst✝¹⁶ : Semiring A\ninst✝¹⁵ : TopologicalSemiring A\ninst✝¹⁴ : Star A\ninst✝¹³ : ContinuousStar A\ninst✝¹² : Algebra 𝕜 A\ninst✝¹¹ : TopologicalSpace B\ninst✝¹⁰ : Semiring B\ninst✝⁹ : TopologicalSemiring B\ninst✝⁸ : Star B\ninst✝⁷ : ContinuousStar B\ninst✝⁶ : Algebra 𝕜 B\ninst✝⁵ : TopologicalSpace C\ninst✝⁴ : Semiring C\ninst✝³ : TopologicalSemiring C\ninst✝² : Star C\ninst✝¹ : ContinuousStar C\ninst✝ : Algebra 𝕜 C\nφ : StarAlgHom 𝕜 A B\nψ : StarAlgHom 𝕜 B C\nhφ : Continuous ⇑φ\nhψ : Continuous ⇑ψ\n⊢ Eq (ContinuousMap.compStarAlgHom X (ψ.comp φ) ⋯) ((ContinuousMap.compStarAlgHom X ψ hψ).comp (ContinuousMap.compStarAlgHom X φ hφ))","decl":"/-- `ContinuousMap.compStarAlgHom` is functorial. -/\nlemma compStarAlgHom_comp (φ : A →⋆ₐ[𝕜] B) (ψ : B →⋆ₐ[𝕜] C) (hφ : Continuous φ)\n    (hψ : Continuous ψ) : compStarAlgHom X (ψ.comp φ) (hψ.comp hφ) =\n      (compStarAlgHom X ψ hψ).comp (compStarAlgHom X φ hφ) :=\n  rfl\n\n"}
{"name":"Homeomorph.compStarAlgEquiv'_symm_apply","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalSpace Y\n𝕜 : Type u_3\ninst✝⁶ : CommSemiring 𝕜\nA : Type u_4\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : TopologicalSemiring A\ninst✝² : StarRing A\ninst✝¹ : ContinuousStar A\ninst✝ : Algebra 𝕜 A\nf : Homeomorph X Y\na : ContinuousMap X A\n⊢ Eq ((Homeomorph.compStarAlgEquiv' 𝕜 A f).symm a) ((ContinuousMap.compStarAlgHom' 𝕜 A ↑f.symm) a)","decl":"/-- `ContinuousMap.compStarAlgHom'` as a `StarAlgEquiv` when the continuous map `f` is\nactually a homeomorphism. -/\n@[simps]\ndef compStarAlgEquiv' (f : X ≃ₜ Y) : C(Y, A) ≃⋆ₐ[𝕜] C(X, A) :=\n  { (f : C(X, Y)).compStarAlgHom' 𝕜 A with\n    toFun := (f : C(X, Y)).compStarAlgHom' 𝕜 A\n    invFun := (f.symm : C(Y, X)).compStarAlgHom' 𝕜 A\n    left_inv := fun g => by\n      simp only [ContinuousMap.compStarAlgHom'_apply, ContinuousMap.comp_assoc,\n        toContinuousMap_comp_symm, ContinuousMap.comp_id]\n    right_inv := fun g => by\n      simp only [ContinuousMap.compStarAlgHom'_apply, ContinuousMap.comp_assoc,\n        symm_comp_toContinuousMap, ContinuousMap.comp_id]\n    map_smul' := fun k a => map_smul ((f : C(X, Y)).compStarAlgHom' 𝕜 A) k a }\n\n"}
{"name":"Homeomorph.compStarAlgEquiv'_apply","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁸ : TopologicalSpace X\ninst✝⁷ : TopologicalSpace Y\n𝕜 : Type u_3\ninst✝⁶ : CommSemiring 𝕜\nA : Type u_4\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : TopologicalSemiring A\ninst✝² : StarRing A\ninst✝¹ : ContinuousStar A\ninst✝ : Algebra 𝕜 A\nf : Homeomorph X Y\na : ContinuousMap Y A\n⊢ Eq ((Homeomorph.compStarAlgEquiv' 𝕜 A f) a) ((ContinuousMap.compStarAlgHom' 𝕜 A ↑f) a)","decl":"/-- `ContinuousMap.compStarAlgHom'` as a `StarAlgEquiv` when the continuous map `f` is\nactually a homeomorphism. -/\n@[simps]\ndef compStarAlgEquiv' (f : X ≃ₜ Y) : C(Y, A) ≃⋆ₐ[𝕜] C(X, A) :=\n  { (f : C(X, Y)).compStarAlgHom' 𝕜 A with\n    toFun := (f : C(X, Y)).compStarAlgHom' 𝕜 A\n    invFun := (f.symm : C(Y, X)).compStarAlgHom' 𝕜 A\n    left_inv := fun g => by\n      simp only [ContinuousMap.compStarAlgHom'_apply, ContinuousMap.comp_assoc,\n        toContinuousMap_comp_symm, ContinuousMap.comp_id]\n    right_inv := fun g => by\n      simp only [ContinuousMap.compStarAlgHom'_apply, ContinuousMap.comp_assoc,\n        symm_comp_toContinuousMap, ContinuousMap.comp_id]\n    map_smul' := fun k a => map_smul ((f : C(X, Y)).compStarAlgHom' 𝕜 A) k a }\n\n"}
{"name":"ContinuousMap.evalStarAlgHom_apply","module":"Mathlib.Topology.ContinuousMap.Star","initialProofState":"X : Type u_1\nS : Type u_2\nR : Type u_3\ninst✝⁷ : TopologicalSpace X\ninst✝⁶ : CommSemiring S\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Algebra S R\ninst✝³ : TopologicalSpace R\ninst✝² : TopologicalSemiring R\ninst✝¹ : StarRing R\ninst✝ : ContinuousStar R\nx : X\nf : ContinuousMap X R\n⊢ Eq ((ContinuousMap.evalStarAlgHom S R x) f) (f x)","decl":"/-- Evaluation of continuous maps at a point, bundled as a star algebra homomorphism. -/\n@[simps!]\ndef ContinuousMap.evalStarAlgHom [StarRing R] [ContinuousStar R] (x : X) :\n    C(X, R) →⋆ₐ[S] R :=\n  { ContinuousMap.evalAlgHom S R x with\n    map_star' := fun _ => rfl }\n"}
