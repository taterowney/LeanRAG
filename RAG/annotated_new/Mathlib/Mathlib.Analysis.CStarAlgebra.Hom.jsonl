{"name":"IsSelfAdjoint.map_spectrum_real","module":"Mathlib.Analysis.CStarAlgebra.Hom","initialProofState":"F : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : CStarAlgebra A\ninst✝³ : CStarAlgebra B\ninst✝² : FunLike F A B\ninst✝¹ : AlgHomClass F Complex A B\ninst✝ : StarHomClass F A B\na : A\nha : IsSelfAdjoint a\nφ : F\nhφ : Function.Injective ⇑φ\n⊢ Eq (spectrum Real (φ a)) (spectrum Real a)","decl":"open CStarAlgebra in\nlemma IsSelfAdjoint.map_spectrum_real {F A B : Type*} [CStarAlgebra A] [CStarAlgebra B]\n    [FunLike F A B] [AlgHomClass F ℂ A B] [StarHomClass F A B]\n    {a : A} (ha : IsSelfAdjoint a) (φ : F) (hφ : Function.Injective φ) :\n    spectrum ℝ (φ a) = spectrum ℝ a := by\n  have h_spec := AlgHom.spectrum_apply_subset ((φ : A →⋆ₐ[ℂ] B).restrictScalars ℝ) a\n  refine Set.eq_of_subset_of_subset h_spec fun x hx ↦ ?_\n  /- we prove the reverse inclusion by contradiction, so assume that `x ∈ spectrum ℝ a`, but\n  `x ∉ spectrum ℝ (φ a)`. Then by Urysohn's lemma we can get a function for which `f x = 1`, but\n  `f = 0` on `spectrum ℝ a`. -/\n  by_contra hx'\n  obtain ⟨f, h_eqOn, h_eqOn_x, -⟩ := exists_continuous_zero_one_of_isClosed\n    (spectrum.isClosed (𝕜 := ℝ) (φ a)) (isClosed_singleton (x := x)) <| by simpa\n  /- it suffices to show that `φ (f a) = 0`, for if so, then `f a = 0` by injectivity of `φ`, and\n  hence `f = 0` on `spectrum ℝ a`, contradicting the fact that `f x = 1`. -/\n  suffices φ (cfc f a) = 0 by\n    rw [map_eq_zero_iff φ hφ, ← cfc_zero ℝ a, cfc_eq_cfc_iff_eqOn] at this\n    exact zero_ne_one <| calc\n      0 = f x := (this hx).symm\n      _ = 1 := h_eqOn_x <| Set.mem_singleton x\n  /- Finally, `φ (f a) = f (φ a) = 0`, where the last equality follows since `f = 0` on\n  `spectrum ℝ (φ a)`. -/\n  calc φ (cfc f a) = cfc f (φ a) := StarAlgHomClass.map_cfc φ f a\n    _ = cfc (0 : ℝ → ℝ) (φ a) := cfc_congr h_eqOn\n    _ = 0 := by simp\n\n"}
{"name":"NonUnitalStarAlgHom.norm_map","module":"Mathlib.Analysis.CStarAlgebra.Hom","initialProofState":"F : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : NonUnitalCStarAlgebra A\ninst✝³ : NonUnitalCStarAlgebra B\ninst✝² : FunLike F A B\ninst✝¹ : NonUnitalAlgHomClass F Complex A B\ninst✝ : StarHomClass F A B\nφ : F\nhφ : Function.Injective ⇑φ\na : A\n⊢ Eq (Norm.norm (φ a)) (Norm.norm a)","decl":"open CStarAlgebra Unitization in\n/-- A non-unital star algebra monomorphism of complex C⋆-algebras is isometric. -/\nlemma norm_map (φ : F) (hφ : Function.Injective φ) (a : A) : ‖φ a‖ = ‖a‖ := by\n  /- Since passing to the unitization is functorial, and it is an isometric embedding, we may assume\n  that `φ` is a unital star algebra monomorphism and that `A` and `B` are unital C⋆-algebras. -/\n  suffices ∀ {ψ : Unitization ℂ A →⋆ₐ[ℂ] Unitization ℂ B} (_ : Function.Injective ψ)\n      (a : Unitization ℂ A), ‖ψ a‖ = ‖a‖ by\n    simpa [norm_inr] using this (starMap_injective (φ := (φ : A →⋆ₙₐ[ℂ] B)) hφ) a\n  intro ψ hψ a\n  -- to show `‖ψ a‖ = ‖a‖`, by the C⋆-property it suffices to show `‖ψ (star a * a)‖ = ‖star a * a‖`\n  rw [← sq_eq_sq₀ (by positivity) (by positivity)]\n  simp only [sq, ← CStarRing.norm_star_mul_self, ← map_star, ← map_mul]\n  /- since `star a * a` is selfadjoint, it has the same `ℝ`-spectrum as `ψ (star a * a)`.\n  Since the spectral radius over `ℝ` coincides with the norm, `‖ψ (star a * a)‖ = ‖star a * a‖`. -/\n  have ha : IsSelfAdjoint (star a * a) := .star_mul_self a\n  calc ‖ψ (star a * a)‖ = (spectralRadius ℝ (ψ (star a * a))).toReal :=\n      ha.map ψ |>.toReal_spectralRadius_eq_norm.symm\n    _ = (spectralRadius ℝ (star a * a)).toReal := by\n      simp only [spectralRadius, ha.map_spectrum_real ψ hψ]\n    _ = ‖star a * a‖ := ha.toReal_spectralRadius_eq_norm\n\n"}
{"name":"NonUnitalStarAlgHom.nnnorm_map","module":"Mathlib.Analysis.CStarAlgebra.Hom","initialProofState":"F : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : NonUnitalCStarAlgebra A\ninst✝³ : NonUnitalCStarAlgebra B\ninst✝² : FunLike F A B\ninst✝¹ : NonUnitalAlgHomClass F Complex A B\ninst✝ : StarHomClass F A B\nφ : F\nhφ : Function.Injective ⇑φ\na : A\n⊢ Eq (NNNorm.nnnorm (φ a)) (NNNorm.nnnorm a)","decl":"/-- A non-unital star algebra monomorphism of complex C⋆-algebras is isometric. -/\nlemma nnnorm_map (φ : F) (hφ : Function.Injective φ) (a : A) : ‖φ a‖₊ = ‖a‖₊ :=\n  Subtype.ext <| norm_map φ hφ a\n\n"}
{"name":"NonUnitalStarAlgHom.isometry","module":"Mathlib.Analysis.CStarAlgebra.Hom","initialProofState":"F : Type u_1\nA : Type u_2\nB : Type u_3\ninst✝⁴ : NonUnitalCStarAlgebra A\ninst✝³ : NonUnitalCStarAlgebra B\ninst✝² : FunLike F A B\ninst✝¹ : NonUnitalAlgHomClass F Complex A B\ninst✝ : StarHomClass F A B\nφ : F\nhφ : Function.Injective ⇑φ\n⊢ Isometry ⇑φ","decl":"lemma isometry (φ : F) (hφ : Function.Injective φ) : Isometry φ :=\n  AddMonoidHomClass.isometry_of_norm φ (norm_map φ hφ)\n\n"}
