{"name":"TensorProduct.finsuppLeft_apply_tmul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\np : Finsupp ι M\nn : N\n⊢ Eq ((TensorProduct.finsuppLeft R M N ι) (TensorProduct.tmul R p n)) (p.sum fun i m => Finsupp.single i (TensorProduct.tmul R m n))","decl":"lemma finsuppLeft_apply_tmul (p : ι →₀ M) (n : N) :\n    finsuppLeft R M N ι (p ⊗ₜ[R] n) = p.sum fun i m ↦ Finsupp.single i (m ⊗ₜ[R] n) := by\n  apply p.induction_linear\n  · simp\n  · intros f g hf hg; simp [add_tmul, map_add, hf, hg, Finsupp.sum_add_index]\n  · simp [finsuppLeft]\n\n"}
{"name":"TensorProduct.finsuppLeft_apply_tmul_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\np : Finsupp ι M\nn : N\ni : ι\n⊢ Eq (((TensorProduct.finsuppLeft R M N ι) (TensorProduct.tmul R p n)) i) (TensorProduct.tmul R (p i) n)","decl":"@[simp]\nlemma finsuppLeft_apply_tmul_apply (p : ι →₀ M) (n : N) (i : ι) :\n    finsuppLeft R M N ι (p ⊗ₜ[R] n) i = p i ⊗ₜ[R] n := by\n  rw [finsuppLeft_apply_tmul, Finsupp.sum_apply,\n    Finsupp.sum_eq_single i (fun _ _ ↦ Finsupp.single_eq_of_ne) (by simp), Finsupp.single_eq_same]\n\n"}
{"name":"TensorProduct.finsuppLeft_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\nt : TensorProduct R (Finsupp ι M) N\ni : ι\n⊢ Eq (((TensorProduct.finsuppLeft R M N ι) t) i) ((LinearMap.rTensor N (Finsupp.lapply i)) t)","decl":"theorem finsuppLeft_apply (t : (ι →₀ M) ⊗[R] N) (i : ι) :\n    finsuppLeft R M N ι t i = rTensor N (Finsupp.lapply i) t := by\n  induction t with\n  | zero => simp\n  | tmul f n => simp only [finsuppLeft_apply_tmul_apply, rTensor_tmul, Finsupp.lapply_apply]\n  | add x y hx hy => simp [map_add, hx, hy]\n\n"}
{"name":"TensorProduct.finsuppLeft_symm_apply_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\ni : ι\nm : M\nn : N\n⊢ Eq ((TensorProduct.finsuppLeft R M N ι).symm (Finsupp.single i (TensorProduct.tmul R m n))) (TensorProduct.tmul R (Finsupp.single i m) n)","decl":"@[simp]\nlemma finsuppLeft_symm_apply_single (i : ι) (m : M) (n : N) :\n    (finsuppLeft R M N ι).symm (Finsupp.single i (m ⊗ₜ[R] n)) =\n      Finsupp.single i m ⊗ₜ[R] n := by\n  simp [finsuppLeft, Finsupp.lsum]\n\n"}
{"name":"TensorProduct.finsuppRight_apply_tmul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\nm : M\np : Finsupp ι N\n⊢ Eq ((TensorProduct.finsuppRight R M N ι) (TensorProduct.tmul R m p)) (p.sum fun i n => Finsupp.single i (TensorProduct.tmul R m n))","decl":"lemma finsuppRight_apply_tmul (m : M) (p : ι →₀ N) :\n    finsuppRight R M N ι (m ⊗ₜ[R] p) = p.sum fun i n ↦ Finsupp.single i (m ⊗ₜ[R] n) := by\n  apply p.induction_linear\n  · simp\n  · intros f g hf hg; simp [tmul_add, map_add, hf, hg, Finsupp.sum_add_index]\n  · simp [finsuppRight]\n\n"}
{"name":"TensorProduct.finsuppRight_apply_tmul_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\nm : M\np : Finsupp ι N\ni : ι\n⊢ Eq (((TensorProduct.finsuppRight R M N ι) (TensorProduct.tmul R m p)) i) (TensorProduct.tmul R m (p i))","decl":"@[simp]\nlemma finsuppRight_apply_tmul_apply (m : M) (p : ι →₀ N) (i : ι) :\n    finsuppRight R M N ι (m ⊗ₜ[R] p) i = m ⊗ₜ[R] p i := by\n  rw [finsuppRight_apply_tmul, Finsupp.sum_apply,\n    Finsupp.sum_eq_single i (fun _ _ ↦ Finsupp.single_eq_of_ne) (by simp), Finsupp.single_eq_same]\n\n"}
{"name":"TensorProduct.finsuppRight_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\nt : TensorProduct R M (Finsupp ι N)\ni : ι\n⊢ Eq (((TensorProduct.finsuppRight R M N ι) t) i) ((LinearMap.lTensor M (Finsupp.lapply i)) t)","decl":"theorem finsuppRight_apply (t : M ⊗[R] (ι →₀ N)) (i : ι) :\n    finsuppRight R M N ι t i = lTensor M (Finsupp.lapply i) t := by\n  induction t with\n  | zero => simp\n  | tmul m f => simp [finsuppRight_apply_tmul_apply]\n  | add x y hx hy => simp [map_add, hx, hy]\n\n"}
{"name":"TensorProduct.finsuppRight_symm_apply_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nM : Type u_2\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\ni : ι\nm : M\nn : N\n⊢ Eq ((TensorProduct.finsuppRight R M N ι).symm (Finsupp.single i (TensorProduct.tmul R m n))) (TensorProduct.tmul R m (Finsupp.single i n))","decl":"@[simp]\nlemma finsuppRight_symm_apply_single (i : ι) (m : M) (n : N) :\n    (finsuppRight R M N ι).symm (Finsupp.single i (m ⊗ₜ[R] n)) =\n      m ⊗ₜ[R] Finsupp.single i n := by\n  simp [finsuppRight, Finsupp.lsum]\n\n"}
{"name":"TensorProduct.finsuppLeft_smul'","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁹ : CommSemiring R\nM : Type u_2\ninst✝⁸ : AddCommMonoid M\ninst✝⁷ : Module R M\nN : Type u_3\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : Module R N\nι : Type u_4\ninst✝⁴ : DecidableEq ι\nS : Type u_5\ninst✝³ : CommSemiring S\ninst✝² : Algebra R S\ninst✝¹ : Module S M\ninst✝ : IsScalarTower R S M\ns : S\nt : TensorProduct R (Finsupp ι M) N\n⊢ Eq ((TensorProduct.finsuppLeft R M N ι) (HSMul.hSMul s t)) (HSMul.hSMul s ((TensorProduct.finsuppLeft R M N ι) t))","decl":"lemma finsuppLeft_smul' (s : S) (t : (ι →₀ M) ⊗[R] N) :\n    finsuppLeft R M N ι (s • t) = s • finsuppLeft R M N ι t := by\n  induction t with\n  | zero => simp\n  | add x y hx hy => simp [hx, hy]\n  | tmul p n => ext; simp [smul_tmul', finsuppLeft_apply_tmul_apply]\n\n"}
{"name":"TensorProduct.finsuppLeft'_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝⁹ : CommSemiring R\nM : Type u_2\ninst✝⁸ : AddCommMonoid M\ninst✝⁷ : Module R M\nN : Type u_3\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : Module R N\nι : Type u_4\ninst✝⁴ : DecidableEq ι\nS : Type u_5\ninst✝³ : CommSemiring S\ninst✝² : Algebra R S\ninst✝¹ : Module S M\ninst✝ : IsScalarTower R S M\nx : TensorProduct R (Finsupp ι M) N\n⊢ Eq ((TensorProduct.finsuppLeft' R M N ι S) x) ((TensorProduct.finsuppLeft R M N ι) x)","decl":"lemma finsuppLeft'_apply (x : (ι →₀ M) ⊗[R] N) :\n    finsuppLeft' R M N ι S x = finsuppLeft R M N ι x := rfl\n\n/- -- TODO : reprove using the existing heterobasic lemmas\nnoncomputable example :\n    (ι →₀ M) ⊗[R] N ≃ₗ[S] ι →₀ (M ⊗[R] N) := by\n  have f : (⨁ (i₁ : ι), M) ⊗[R] N ≃ₗ[S] ⨁ (i : ι), M ⊗[R] N := sorry\n  exact (AlgebraTensorModule.congr\n    (finsuppLEquivDirectSum S M ι) (.refl R N)).trans\n    (f.trans (finsuppLEquivDirectSum S (M ⊗[R] N) ι).symm) -/\n\n"}
{"name":"TensorProduct.finsuppScalarLeft_apply_tmul_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\np : Finsupp ι R\nn : N\ni : ι\n⊢ Eq (((TensorProduct.finsuppScalarLeft R N ι) (TensorProduct.tmul R p n)) i) (HSMul.hSMul (p i) n)","decl":"@[simp]\nlemma finsuppScalarLeft_apply_tmul_apply (p : ι →₀ R) (n : N) (i : ι) :\n    finsuppScalarLeft R N ι (p ⊗ₜ[R] n) i = p i • n := by\n  simp [finsuppScalarLeft]\n\n"}
{"name":"TensorProduct.finsuppScalarLeft_apply_tmul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\np : Finsupp ι R\nn : N\n⊢ Eq ((TensorProduct.finsuppScalarLeft R N ι) (TensorProduct.tmul R p n)) (p.sum fun i m => Finsupp.single i (HSMul.hSMul m n))","decl":"lemma finsuppScalarLeft_apply_tmul (p : ι →₀ R) (n : N) :\n    finsuppScalarLeft R N ι (p ⊗ₜ[R] n) = p.sum fun i m ↦ Finsupp.single i (m • n) := by\n  ext i\n  rw [finsuppScalarLeft_apply_tmul_apply, Finsupp.sum_apply,\n    Finsupp.sum_eq_single i (fun _ _ ↦ Finsupp.single_eq_of_ne) (by simp), Finsupp.single_eq_same]\n\n"}
{"name":"TensorProduct.finsuppScalarLeft_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\npn : TensorProduct R (Finsupp ι R) N\ni : ι\n⊢ Eq (((TensorProduct.finsuppScalarLeft R N ι) pn) i) ((TensorProduct.lid R N) ((LinearMap.rTensor N (Finsupp.lapply i)) pn))","decl":"lemma finsuppScalarLeft_apply (pn : (ι →₀ R) ⊗[R] N) (i : ι) :\n    finsuppScalarLeft R N ι pn i = TensorProduct.lid R N ((Finsupp.lapply i).rTensor N pn) := by\n  simp [finsuppScalarLeft, finsuppLeft_apply]\n\n"}
{"name":"TensorProduct.finsuppScalarLeft_symm_apply_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nN : Type u_3\ninst✝² : AddCommMonoid N\ninst✝¹ : Module R N\nι : Type u_4\ninst✝ : DecidableEq ι\ni : ι\nn : N\n⊢ Eq ((TensorProduct.finsuppScalarLeft R N ι).symm (Finsupp.single i n)) (TensorProduct.tmul R (Finsupp.single i 1) n)","decl":"@[simp]\nlemma finsuppScalarLeft_symm_apply_single (i : ι) (n : N) :\n    (finsuppScalarLeft R N ι).symm (Finsupp.single i n) =\n      (Finsupp.single i 1) ⊗ₜ[R] n := by\n  simp [finsuppScalarLeft, finsuppLeft_symm_apply_single]\n\n"}
{"name":"TensorProduct.finsuppScalarRight_apply_tmul_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nM : Type u_2\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nι : Type u_4\ninst✝ : DecidableEq ι\nm : M\np : Finsupp ι R\ni : ι\n⊢ Eq (((TensorProduct.finsuppScalarRight R M ι) (TensorProduct.tmul R m p)) i) (HSMul.hSMul (p i) m)","decl":"@[simp]\nlemma finsuppScalarRight_apply_tmul_apply (m : M) (p : ι →₀ R) (i : ι) :\n    finsuppScalarRight R M ι (m ⊗ₜ[R] p) i = p i • m := by\n  simp [finsuppScalarRight]\n\n"}
{"name":"TensorProduct.finsuppScalarRight_apply_tmul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nM : Type u_2\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nι : Type u_4\ninst✝ : DecidableEq ι\nm : M\np : Finsupp ι R\n⊢ Eq ((TensorProduct.finsuppScalarRight R M ι) (TensorProduct.tmul R m p)) (p.sum fun i n => Finsupp.single i (HSMul.hSMul n m))","decl":"lemma finsuppScalarRight_apply_tmul (m : M) (p : ι →₀ R) :\n    finsuppScalarRight R M ι (m ⊗ₜ[R] p) = p.sum fun i n ↦ Finsupp.single i (n • m) := by\n  ext i\n  rw [finsuppScalarRight_apply_tmul_apply, Finsupp.sum_apply,\n    Finsupp.sum_eq_single i (fun _ _ ↦ Finsupp.single_eq_of_ne) (by simp), Finsupp.single_eq_same]\n\n"}
{"name":"TensorProduct.finsuppScalarRight_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nM : Type u_2\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nι : Type u_4\ninst✝ : DecidableEq ι\nt : TensorProduct R M (Finsupp ι R)\ni : ι\n⊢ Eq (((TensorProduct.finsuppScalarRight R M ι) t) i) ((TensorProduct.rid R M) ((LinearMap.lTensor M (Finsupp.lapply i)) t))","decl":"lemma finsuppScalarRight_apply (t : M ⊗[R] (ι →₀ R)) (i : ι) :\n    finsuppScalarRight R M ι t i = TensorProduct.rid R M ((Finsupp.lapply i).lTensor M t) := by\n  simp [finsuppScalarRight, finsuppRight_apply]\n\n"}
{"name":"TensorProduct.finsuppScalarRight_symm_apply_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\ninst✝³ : CommSemiring R\nM : Type u_2\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nι : Type u_4\ninst✝ : DecidableEq ι\ni : ι\nm : M\n⊢ Eq ((TensorProduct.finsuppScalarRight R M ι).symm (Finsupp.single i m)) (TensorProduct.tmul R m (Finsupp.single i 1))","decl":"@[simp]\nlemma finsuppScalarRight_symm_apply_single (i : ι) (m : M) :\n    (finsuppScalarRight R M ι).symm (Finsupp.single i m) =\n      m ⊗ₜ[R] (Finsupp.single i 1) := by\n  simp [finsuppScalarRight, finsuppRight_symm_apply_single]\n\n"}
{"name":"Finsupp.linearCombination_one_tmul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nι : Type u_5\ninst✝⁵ : CommSemiring R\ninst✝⁴ : AddCommMonoid M\ninst✝³ : Module R M\ninst✝² : Semiring S\ninst✝¹ : Algebra R S\ninst✝ : DecidableEq ι\nv : ι → M\n⊢ Eq (↑R (Finsupp.linearCombination S fun x => TensorProduct.tmul R 1 (v x))) ((LinearMap.lTensor S (Finsupp.linearCombination R v)).comp ↑(TensorProduct.finsuppScalarRight R S ι).symm)","decl":"theorem Finsupp.linearCombination_one_tmul [DecidableEq ι] {v : ι → M} :\n    (linearCombination S ((1 : S) ⊗ₜ[R] v ·)).restrictScalars R =\n      (linearCombination R v).lTensor S ∘ₗ (finsuppScalarRight R S ι).symm := by\n  ext; simp [smul_tmul']\n\n"}
{"name":"finsuppTensorFinsupp_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_4\nι : Type u_5\nκ : Type u_6\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : Module R M\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R N\ninst✝³ : Semiring S\ninst✝² : Algebra R S\ninst✝¹ : Module S M\ninst✝ : IsScalarTower R S M\ni : ι\nm : M\nk : κ\nn : N\n⊢ Eq ((finsuppTensorFinsupp R S M N ι κ) (TensorProduct.tmul R (Finsupp.single i m) (Finsupp.single k n))) (Finsupp.single { fst := i, snd := k } (TensorProduct.tmul R m n))","decl":"@[simp]\ntheorem finsuppTensorFinsupp_single (i : ι) (m : M) (k : κ) (n : N) :\n    finsuppTensorFinsupp R S M N ι κ (Finsupp.single i m ⊗ₜ Finsupp.single k n) =\n      Finsupp.single (i, k) (m ⊗ₜ n) := by\n  simp [finsuppTensorFinsupp]\n\n"}
{"name":"finsuppTensorFinsupp_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_4\nι : Type u_5\nκ : Type u_6\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : Module R M\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R N\ninst✝³ : Semiring S\ninst✝² : Algebra R S\ninst✝¹ : Module S M\ninst✝ : IsScalarTower R S M\nf : Finsupp ι M\ng : Finsupp κ N\ni : ι\nk : κ\n⊢ Eq (((finsuppTensorFinsupp R S M N ι κ) (TensorProduct.tmul R f g)) { fst := i, snd := k }) (TensorProduct.tmul R (f i) (g k))","decl":"@[simp]\ntheorem finsuppTensorFinsupp_apply (f : ι →₀ M) (g : κ →₀ N) (i : ι) (k : κ) :\n    finsuppTensorFinsupp R S M N ι κ (f ⊗ₜ g) (i, k) = f i ⊗ₜ g k := by\n  apply Finsupp.induction_linear f\n  · simp\n  · intro f₁ f₂ hf₁ hf₂\n    simp [add_tmul, hf₁, hf₂]\n  intro i' m\n  apply Finsupp.induction_linear g\n  · simp\n  · intro g₁ g₂ hg₁ hg₂\n    simp [tmul_add, hg₁, hg₂]\n  intro k' n\n  classical\n  simp_rw [finsuppTensorFinsupp_single, Finsupp.single_apply, Prod.mk.inj_iff, ite_and]\n  split_ifs <;> simp\n\n"}
{"name":"finsuppTensorFinsupp_symm_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_4\nι : Type u_5\nκ : Type u_6\ninst✝⁸ : CommSemiring R\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : Module R M\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : Module R N\ninst✝³ : Semiring S\ninst✝² : Algebra R S\ninst✝¹ : Module S M\ninst✝ : IsScalarTower R S M\ni : Prod ι κ\nm : M\nn : N\n⊢ Eq ((finsuppTensorFinsupp R S M N ι κ).symm (Finsupp.single i (TensorProduct.tmul R m n))) (TensorProduct.tmul R (Finsupp.single i.1 m) (Finsupp.single i.2 n))","decl":"@[simp]\ntheorem finsuppTensorFinsupp_symm_single (i : ι × κ) (m : M) (n : N) :\n    (finsuppTensorFinsupp R S M N ι κ).symm (Finsupp.single i (m ⊗ₜ n)) =\n      Finsupp.single i.1 m ⊗ₜ Finsupp.single i.2 n :=\n  Prod.casesOn i fun _ _ =>\n    (LinearEquiv.symm_apply_eq _).2 (finsuppTensorFinsupp_single _ _ _ _ _ _ _ _ _ _).symm\n\n"}
{"name":"finsuppTensorFinsuppLid_apply_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nN : Type u_4\nι : Type u_5\nκ : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\nf : Finsupp ι R\ng : Finsupp κ N\na : ι\nb : κ\n⊢ Eq (((finsuppTensorFinsuppLid R N ι κ) (TensorProduct.tmul R f g)) { fst := a, snd := b }) (HSMul.hSMul (f a) (g b))","decl":"@[simp]\ntheorem finsuppTensorFinsuppLid_apply_apply (f : ι →₀ R) (g : κ →₀ N) (a : ι) (b : κ) :\n    finsuppTensorFinsuppLid R N ι κ (f ⊗ₜ[R] g) (a, b) = f a • g b := by\n  simp [finsuppTensorFinsuppLid]\n\n"}
{"name":"finsuppTensorFinsuppLid_single_tmul_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nN : Type u_4\nι : Type u_5\nκ : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\na : ι\nb : κ\nr : R\nn : N\n⊢ Eq ((finsuppTensorFinsuppLid R N ι κ) (TensorProduct.tmul R (Finsupp.single a r) (Finsupp.single b n))) (Finsupp.single { fst := a, snd := b } (HSMul.hSMul r n))","decl":"@[simp]\ntheorem finsuppTensorFinsuppLid_single_tmul_single (a : ι) (b : κ) (r : R) (n : N) :\n    finsuppTensorFinsuppLid R N ι κ (Finsupp.single a r ⊗ₜ[R] Finsupp.single b n) =\n      Finsupp.single (a, b) (r • n) := by\n  simp [finsuppTensorFinsuppLid]\n\n"}
{"name":"finsuppTensorFinsuppLid_symm_single_smul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nN : Type u_4\nι : Type u_5\nκ : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\ni : Prod ι κ\nr : R\nn : N\n⊢ Eq ((finsuppTensorFinsuppLid R N ι κ).symm (Finsupp.single i (HSMul.hSMul r n))) (TensorProduct.tmul R (Finsupp.single i.1 r) (Finsupp.single i.2 n))","decl":"@[simp]\ntheorem finsuppTensorFinsuppLid_symm_single_smul (i : ι × κ) (r : R) (n : N) :\n    (finsuppTensorFinsuppLid R N ι κ).symm (Finsupp.single i (r • n)) =\n      Finsupp.single i.1 r ⊗ₜ Finsupp.single i.2 n :=\n  Prod.casesOn i fun _ _ =>\n    (LinearEquiv.symm_apply_eq _).2 (finsuppTensorFinsuppLid_single_tmul_single ..).symm\n\n"}
{"name":"finsuppTensorFinsuppRid_apply_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nM : Type u_3\nι : Type u_5\nκ : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nf : Finsupp ι M\ng : Finsupp κ R\na : ι\nb : κ\n⊢ Eq (((finsuppTensorFinsuppRid R M ι κ) (TensorProduct.tmul R f g)) { fst := a, snd := b }) (HSMul.hSMul (g b) (f a))","decl":"@[simp]\ntheorem finsuppTensorFinsuppRid_apply_apply (f : ι →₀ M) (g : κ →₀ R) (a : ι) (b : κ) :\n    finsuppTensorFinsuppRid R M ι κ (f ⊗ₜ[R] g) (a, b) = g b • f a := by\n  simp [finsuppTensorFinsuppRid]\n\n"}
{"name":"finsuppTensorFinsuppRid_single_tmul_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nM : Type u_3\nι : Type u_5\nκ : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\na : ι\nb : κ\nm : M\nr : R\n⊢ Eq ((finsuppTensorFinsuppRid R M ι κ) (TensorProduct.tmul R (Finsupp.single a m) (Finsupp.single b r))) (Finsupp.single { fst := a, snd := b } (HSMul.hSMul r m))","decl":"@[simp]\ntheorem finsuppTensorFinsuppRid_single_tmul_single (a : ι) (b : κ) (m : M) (r : R) :\n    finsuppTensorFinsuppRid R M ι κ (Finsupp.single a m ⊗ₜ[R] Finsupp.single b r) =\n      Finsupp.single (a, b) (r • m) := by\n  simp [finsuppTensorFinsuppRid]\n\n"}
{"name":"finsuppTensorFinsuppRid_symm_single_smul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nM : Type u_3\nι : Type u_5\nκ : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\ni : Prod ι κ\nm : M\nr : R\n⊢ Eq ((finsuppTensorFinsuppRid R M ι κ).symm (Finsupp.single i (HSMul.hSMul r m))) (TensorProduct.tmul R (Finsupp.single i.1 m) (Finsupp.single i.2 r))","decl":"@[simp]\ntheorem finsuppTensorFinsuppRid_symm_single_smul (i : ι × κ) (m : M) (r : R) :\n    (finsuppTensorFinsuppRid R M ι κ).symm (Finsupp.single i (r • m)) =\n      Finsupp.single i.1 m ⊗ₜ Finsupp.single i.2 r :=\n  Prod.casesOn i fun _ _ =>\n    (LinearEquiv.symm_apply_eq _).2 (finsuppTensorFinsuppRid_single_tmul_single ..).symm\n\n"}
{"name":"finsuppTensorFinsupp'_apply_apply","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\nf : Finsupp ι R\ng : Finsupp κ R\na : ι\nb : κ\n⊢ Eq (((finsuppTensorFinsupp' R ι κ) (TensorProduct.tmul R f g)) { fst := a, snd := b }) (HMul.hMul (f a) (g b))","decl":"@[simp]\ntheorem finsuppTensorFinsupp'_apply_apply (f : ι →₀ R) (g : κ →₀ R) (a : ι) (b : κ) :\n    finsuppTensorFinsupp' R ι κ (f ⊗ₜ[R] g) (a, b) = f a * g b :=\n  finsuppTensorFinsuppLid_apply_apply R R ι κ f g a b\n\n"}
{"name":"finsuppTensorFinsupp'_single_tmul_single","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\na : ι\nb : κ\nr₁ r₂ : R\n⊢ Eq ((finsuppTensorFinsupp' R ι κ) (TensorProduct.tmul R (Finsupp.single a r₁) (Finsupp.single b r₂))) (Finsupp.single { fst := a, snd := b } (HMul.hMul r₁ r₂))","decl":"@[simp]\ntheorem finsuppTensorFinsupp'_single_tmul_single (a : ι) (b : κ) (r₁ r₂ : R) :\n    finsuppTensorFinsupp' R ι κ (Finsupp.single a r₁ ⊗ₜ[R] Finsupp.single b r₂) =\n      Finsupp.single (a, b) (r₁ * r₂) :=\n  finsuppTensorFinsuppLid_single_tmul_single R R ι κ a b r₁ r₂\n\n"}
{"name":"finsuppTensorFinsupp'_symm_single_mul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\ni : Prod ι κ\nr₁ r₂ : R\n⊢ Eq ((finsuppTensorFinsupp' R ι κ).symm (Finsupp.single i (HMul.hMul r₁ r₂))) (TensorProduct.tmul R (Finsupp.single i.1 r₁) (Finsupp.single i.2 r₂))","decl":"theorem finsuppTensorFinsupp'_symm_single_mul (i : ι × κ) (r₁ r₂ : R) :\n    (finsuppTensorFinsupp' R ι κ).symm (Finsupp.single i (r₁ * r₂)) =\n      Finsupp.single i.1 r₁ ⊗ₜ Finsupp.single i.2 r₂ :=\n  finsuppTensorFinsuppLid_symm_single_smul R R ι κ i r₁ r₂\n\n"}
{"name":"finsuppTensorFinsupp'_symm_single_eq_single_one_tmul","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\ni : Prod ι κ\nr : R\n⊢ Eq ((finsuppTensorFinsupp' R ι κ).symm (Finsupp.single i r)) (TensorProduct.tmul R (Finsupp.single i.1 1) (Finsupp.single i.2 r))","decl":"theorem finsuppTensorFinsupp'_symm_single_eq_single_one_tmul (i : ι × κ) (r : R) :\n    (finsuppTensorFinsupp' R ι κ).symm (Finsupp.single i r) =\n      Finsupp.single i.1 1 ⊗ₜ Finsupp.single i.2 r := by\n  nth_rw 1 [← one_mul r]\n  exact finsuppTensorFinsupp'_symm_single_mul R ι κ i _ _\n\n"}
{"name":"finsuppTensorFinsupp'_symm_single_eq_tmul_single_one","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\ni : Prod ι κ\nr : R\n⊢ Eq ((finsuppTensorFinsupp' R ι κ).symm (Finsupp.single i r)) (TensorProduct.tmul R (Finsupp.single i.1 r) (Finsupp.single i.2 1))","decl":"theorem finsuppTensorFinsupp'_symm_single_eq_tmul_single_one (i : ι × κ) (r : R) :\n    (finsuppTensorFinsupp' R ι κ).symm (Finsupp.single i r) =\n      Finsupp.single i.1 r ⊗ₜ Finsupp.single i.2 1 := by\n  nth_rw 1 [← mul_one r]\n  exact finsuppTensorFinsupp'_symm_single_mul R ι κ i _ _\n\n"}
{"name":"finsuppTensorFinsuppLid_self","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\n⊢ Eq (finsuppTensorFinsuppLid R R ι κ) (finsuppTensorFinsupp' R ι κ)","decl":"theorem finsuppTensorFinsuppLid_self :\n    finsuppTensorFinsuppLid R R ι κ = finsuppTensorFinsupp' R ι κ := rfl\n\n"}
{"name":"finsuppTensorFinsuppRid_self","module":"Mathlib.LinearAlgebra.DirectSum.Finsupp","initialProofState":"R : Type u_1\nι : Type u_5\nκ : Type u_6\ninst✝ : CommSemiring R\n⊢ Eq (finsuppTensorFinsuppRid R R ι κ) (finsuppTensorFinsupp' R ι κ)","decl":"theorem finsuppTensorFinsuppRid_self :\n    finsuppTensorFinsuppRid R R ι κ = finsuppTensorFinsupp' R ι κ := by\n  rw [finsuppTensorFinsupp', finsuppTensorFinsuppLid, finsuppTensorFinsuppRid,\n    TensorProduct.lid_eq_rid]\n\n"}
