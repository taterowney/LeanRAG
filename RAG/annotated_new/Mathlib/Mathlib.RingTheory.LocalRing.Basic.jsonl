{"name":"IsLocalRing.of_isUnit_or_isUnit_of_isUnit_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\nh : ∀ (a b : R), IsUnit (HAdd.hAdd a b) → Or (IsUnit a) (IsUnit b)\n⊢ IsLocalRing R","decl":"theorem of_isUnit_or_isUnit_of_isUnit_add [Nontrivial R]\n    (h : ∀ a b : R, IsUnit (a + b) → IsUnit a ∨ IsUnit b) : IsLocalRing R :=\n  ⟨fun {a b} hab => h a b <| hab.symm ▸ isUnit_one⟩\n\n"}
{"name":"IsLocalRing.of_nonunits_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\nh : ∀ (a b : R), Membership.mem (nonunits R) a → Membership.mem (nonunits R) b → Membership.mem (nonunits R) (HAdd.hAdd a b)\n⊢ IsLocalRing R","decl":"/-- A semiring is local if it is nontrivial and the set of nonunits is closed under the addition. -/\ntheorem of_nonunits_add [Nontrivial R]\n    (h : ∀ a b : R, a ∈ nonunits R → b ∈ nonunits R → a + b ∈ nonunits R) : IsLocalRing R where\n  isUnit_or_isUnit_of_add_one {a b} hab :=\n    or_iff_not_and_not.2 fun H => h a b H.1 H.2 <| hab.symm ▸ isUnit_one\n\n"}
{"name":"IsLocalRing.of_unique_max_ideal","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nh : ExistsUnique fun I => I.IsMaximal\n⊢ IsLocalRing R","decl":"/-- A semiring is local if it has a unique maximal ideal. -/\ntheorem of_unique_max_ideal (h : ∃! I : Ideal R, I.IsMaximal) : IsLocalRing R :=\n  @of_nonunits_add _ _\n    (nontrivial_of_ne (0 : R) 1 <|\n      let ⟨I, Imax, _⟩ := h\n      fun H : 0 = 1 => Imax.1.1 <| I.eq_top_iff_one.2 <| H ▸ I.zero_mem)\n    fun x y hx hy H =>\n    let ⟨I, Imax, Iuniq⟩ := h\n    let ⟨Ix, Ixmax, Hx⟩ := exists_max_ideal_of_mem_nonunits hx\n    let ⟨Iy, Iymax, Hy⟩ := exists_max_ideal_of_mem_nonunits hy\n    have xmemI : x ∈ I := Iuniq Ix Ixmax ▸ Hx\n    have ymemI : y ∈ I := Iuniq Iy Iymax ▸ Hy\n    Imax.1.1 <| I.eq_top_of_isUnit_mem (I.add_mem xmemI ymemI) H\n\n"}
{"name":"IsLocalRing.of_unique_nonzero_prime","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nh : ExistsUnique fun P => And (Ne P Bot.bot) P.IsPrime\n⊢ IsLocalRing R","decl":"theorem of_unique_nonzero_prime (h : ∃! P : Ideal R, P ≠ ⊥ ∧ Ideal.IsPrime P) : IsLocalRing R :=\n  of_unique_max_ideal\n    (by\n      rcases h with ⟨P, ⟨hPnonzero, hPnot_top, _⟩, hPunique⟩\n      refine ⟨P, ⟨⟨hPnot_top, ?_⟩⟩, fun M hM => hPunique _ ⟨?_, Ideal.IsMaximal.isPrime hM⟩⟩\n      · refine Ideal.maximal_of_no_maximal fun M hPM hM => ne_of_lt hPM ?_\n        exact (hPunique _ ⟨ne_bot_of_gt hPM, Ideal.IsMaximal.isPrime hM⟩).symm\n      · rintro rfl\n        exact hPnot_top (hM.1.2 P (bot_lt_iff_ne_bot.2 hPnonzero)))\n\n"}
{"name":"IsLocalRing.isUnit_or_isUnit_of_isUnit_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : IsLocalRing R\na b : R\nh : IsUnit (HAdd.hAdd a b)\n⊢ Or (IsUnit a) (IsUnit b)","decl":"theorem isUnit_or_isUnit_of_isUnit_add {a b : R} (h : IsUnit (a + b)) : IsUnit a ∨ IsUnit b := by\n  rcases h with ⟨u, hu⟩\n  rw [← Units.inv_mul_eq_one, mul_add] at hu\n  apply Or.imp _ _ (isUnit_or_isUnit_of_add_one hu) <;> exact isUnit_of_mul_isUnit_right\n\n"}
{"name":"IsLocalRing.nonunits_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : IsLocalRing R\na b : R\nha : Membership.mem (nonunits R) a\nhb : Membership.mem (nonunits R) b\n⊢ Membership.mem (nonunits R) (HAdd.hAdd a b)","decl":"theorem nonunits_add {a b : R} (ha : a ∈ nonunits R) (hb : b ∈ nonunits R) : a + b ∈ nonunits R :=\n  fun H => not_or_intro ha hb (isUnit_or_isUnit_of_isUnit_add H)\n\n"}
{"name":"IsLocalRing.LocalRing.of_isUnit_or_isUnit_of_isUnit_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\nh : ∀ (a b : R), IsUnit (HAdd.hAdd a b) → Or (IsUnit a) (IsUnit b)\n⊢ IsLocalRing R","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.of_isUnit_or_isUnit_of_isUnit_add := IsLocalRing.of_isUnit_or_isUnit_of_isUnit_add\n\n"}
{"name":"IsLocalRing.LocalRing.of_nonunits_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\nh : ∀ (a b : R), Membership.mem (nonunits R) a → Membership.mem (nonunits R) b → Membership.mem (nonunits R) (HAdd.hAdd a b)\n⊢ IsLocalRing R","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.of_nonunits_add := IsLocalRing.of_nonunits_add\n\n"}
{"name":"IsLocalRing.LocalRing.of_unique_max_ideal","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nh : ExistsUnique fun I => I.IsMaximal\n⊢ IsLocalRing R","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.of_unique_max_ideal := IsLocalRing.of_unique_max_ideal\n\n"}
{"name":"IsLocalRing.LocalRing.of_unique_nonzero_prime","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝ : CommSemiring R\nh : ExistsUnique fun P => And (Ne P Bot.bot) P.IsPrime\n⊢ IsLocalRing R","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.of_unique_nonzero_prime := IsLocalRing.of_unique_nonzero_prime\n\n"}
{"name":"IsLocalRing.LocalRing.isUnit_or_isUnit_of_isUnit_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : IsLocalRing R\na b : R\nh : IsUnit (HAdd.hAdd a b)\n⊢ Or (IsUnit a) (IsUnit b)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.isUnit_or_isUnit_of_isUnit_add := IsLocalRing.isUnit_or_isUnit_of_isUnit_add\n\n"}
{"name":"IsLocalRing.LocalRing.nonunits_add","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : IsLocalRing R\na b : R\nha : Membership.mem (nonunits R) a\nhb : Membership.mem (nonunits R) b\n⊢ Membership.mem (nonunits R) (HAdd.hAdd a b)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.nonunits_add := IsLocalRing.nonunits_add\n\n"}
{"name":"IsLocalRing.of_isUnit_or_isUnit_one_sub_self","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nh : ∀ (a : R), Or (IsUnit a) (IsUnit (HSub.hSub 1 a))\n⊢ IsLocalRing R","decl":"theorem of_isUnit_or_isUnit_one_sub_self [Nontrivial R] (h : ∀ a : R, IsUnit a ∨ IsUnit (1 - a)) :\n    IsLocalRing R :=\n  ⟨fun {a b} hab => add_sub_cancel_left a b ▸ hab.symm ▸ h a⟩\n\n"}
{"name":"IsLocalRing.isUnit_or_isUnit_one_sub_self","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\na : R\n⊢ Or (IsUnit a) (IsUnit (HSub.hSub 1 a))","decl":"theorem isUnit_or_isUnit_one_sub_self (a : R) : IsUnit a ∨ IsUnit (1 - a) :=\n  isUnit_or_isUnit_of_isUnit_add <| (add_sub_cancel a 1).symm ▸ isUnit_one\n\n"}
{"name":"IsLocalRing.isUnit_of_mem_nonunits_one_sub_self","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\na : R\nh : Membership.mem (nonunits R) (HSub.hSub 1 a)\n⊢ IsUnit a","decl":"theorem isUnit_of_mem_nonunits_one_sub_self (a : R) (h : 1 - a ∈ nonunits R) : IsUnit a :=\n  or_iff_not_imp_right.1 (isUnit_or_isUnit_one_sub_self a) h\n\n"}
{"name":"IsLocalRing.isUnit_one_sub_self_of_mem_nonunits","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\na : R\nh : Membership.mem (nonunits R) a\n⊢ IsUnit (HSub.hSub 1 a)","decl":"theorem isUnit_one_sub_self_of_mem_nonunits (a : R) (h : a ∈ nonunits R) : IsUnit (1 - a) :=\n  or_iff_not_imp_left.1 (isUnit_or_isUnit_one_sub_self a) h\n\n"}
{"name":"IsLocalRing.of_surjective'","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : IsLocalRing R\ninst✝¹ : Ring S\ninst✝ : Nontrivial S\nf : RingHom R S\nhf : Function.Surjective ⇑f\n⊢ IsLocalRing S","decl":"theorem of_surjective' [Ring S] [Nontrivial S] (f : R →+* S) (hf : Function.Surjective f) :\n    IsLocalRing S :=\n  of_isUnit_or_isUnit_one_sub_self (by\n    intro b\n    obtain ⟨a, rfl⟩ := hf b\n    apply (isUnit_or_isUnit_one_sub_self a).imp <| RingHom.isUnit_map _\n    rw [← f.map_one, ← f.map_sub]\n    apply f.isUnit_map)\n\n"}
{"name":"IsLocalRing.LocalRing.of_isUnit_or_isUnit_one_sub_self","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nh : ∀ (a : R), Or (IsUnit a) (IsUnit (HSub.hSub 1 a))\n⊢ IsLocalRing R","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.of_isUnit_or_isUnit_one_sub_self := IsLocalRing.of_isUnit_or_isUnit_one_sub_self\n\n"}
{"name":"IsLocalRing.LocalRing.isUnit_or_isUnit_one_sub_self","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\na : R\n⊢ Or (IsUnit a) (IsUnit (HSub.hSub 1 a))","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.isUnit_or_isUnit_one_sub_self := IsLocalRing.isUnit_or_isUnit_one_sub_self\n\n"}
{"name":"IsLocalRing.LocalRing.isUnit_of_mem_nonunits_one_sub_self","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\na : R\nh : Membership.mem (nonunits R) (HSub.hSub 1 a)\n⊢ IsUnit a","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.isUnit_of_mem_nonunits_one_sub_self :=\n  IsLocalRing.isUnit_of_mem_nonunits_one_sub_self\n\n"}
{"name":"IsLocalRing.LocalRing.isUnit_one_sub_self_of_mem_nonunits","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsLocalRing R\na : R\nh : Membership.mem (nonunits R) a\n⊢ IsUnit (HSub.hSub 1 a)","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.isUnit_one_sub_self_of_mem_nonunits :=\n  IsLocalRing.isUnit_one_sub_self_of_mem_nonunits\n\n"}
{"name":"IsLocalRing.LocalRing.of_surjective'","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : IsLocalRing R\ninst✝¹ : Ring S\ninst✝ : Nontrivial S\nf : RingHom R S\nhf : Function.Surjective ⇑f\n⊢ IsLocalRing S","decl":"@[deprecated (since := \"2024-11-11\")]\nalias LocalRing.of_surjective' := IsLocalRing.of_surjective'\n\n"}
{"name":"Field.instIsLocalRing","module":"Mathlib.RingTheory.LocalRing.Basic","initialProofState":"K : Type u_3\ninst✝ : Field K\n⊢ IsLocalRing K","decl":"instance (priority := 100) : IsLocalRing K := by\n  classical exact IsLocalRing.of_isUnit_or_isUnit_one_sub_self fun a =>\n    if h : a = 0 then Or.inr (by rw [h, sub_zero]; exact isUnit_one)\n    else Or.inl <| IsUnit.mk0 a h\n\n"}
