{"name":"Prod.instExistsAddOfLE","module":"Mathlib.Algebra.Order.Monoid.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LE α\ninst✝⁴ : LE β\ninst✝³ : Add α\ninst✝² : Add β\ninst✝¹ : ExistsAddOfLE α\ninst✝ : ExistsAddOfLE β\n⊢ ExistsAddOfLE (Prod α β)","decl":"@[to_additive]\ninstance [LE α] [LE β] [Mul α] [Mul β] [ExistsMulOfLE α] [ExistsMulOfLE β] :\n    ExistsMulOfLE (α × β) :=\n  ⟨fun h =>\n    let ⟨c, hc⟩ := exists_mul_of_le h.1\n    let ⟨d, hd⟩ := exists_mul_of_le h.2\n    ⟨(c, d), Prod.ext hc hd⟩⟩\n\n"}
{"name":"Prod.instExistsMulOfLE","module":"Mathlib.Algebra.Order.Monoid.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : LE α\ninst✝⁴ : LE β\ninst✝³ : Mul α\ninst✝² : Mul β\ninst✝¹ : ExistsMulOfLE α\ninst✝ : ExistsMulOfLE β\n⊢ ExistsMulOfLE (Prod α β)","decl":"@[to_additive]\ninstance [LE α] [LE β] [Mul α] [Mul β] [ExistsMulOfLE α] [ExistsMulOfLE β] :\n    ExistsMulOfLE (α × β) :=\n  ⟨fun h =>\n    let ⟨c, hc⟩ := exists_mul_of_le h.1\n    let ⟨d, hd⟩ := exists_mul_of_le h.2\n    ⟨(c, d), Prod.ext hc hd⟩⟩\n\n"}
{"name":"Prod.instCanonicallyOrderedAdd","module":"Mathlib.Algebra.Order.Monoid.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Add α\ninst✝⁴ : LE α\ninst✝³ : CanonicallyOrderedAdd α\ninst✝² : Add β\ninst✝¹ : LE β\ninst✝ : CanonicallyOrderedAdd β\n⊢ CanonicallyOrderedAdd (Prod α β)","decl":"@[to_additive]\ninstance [Mul α] [LE α] [CanonicallyOrderedMul α]\n    [Mul β] [LE β] [CanonicallyOrderedMul β] :\n    CanonicallyOrderedMul (α × β) :=\n  { (inferInstance : ExistsMulOfLE _) with\n      le_self_mul := fun _ _ ↦ le_def.mpr ⟨le_self_mul, le_self_mul⟩ }\n\n"}
{"name":"Prod.instCanonicallyOrderedMul","module":"Mathlib.Algebra.Order.Monoid.Prod","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : Mul α\ninst✝⁴ : LE α\ninst✝³ : CanonicallyOrderedMul α\ninst✝² : Mul β\ninst✝¹ : LE β\ninst✝ : CanonicallyOrderedMul β\n⊢ CanonicallyOrderedMul (Prod α β)","decl":"@[to_additive]\ninstance [Mul α] [LE α] [CanonicallyOrderedMul α]\n    [Mul β] [LE β] [CanonicallyOrderedMul β] :\n    CanonicallyOrderedMul (α × β) :=\n  { (inferInstance : ExistsMulOfLE _) with\n      le_self_mul := fun _ _ ↦ le_def.mpr ⟨le_self_mul, le_self_mul⟩ }\n\n"}
