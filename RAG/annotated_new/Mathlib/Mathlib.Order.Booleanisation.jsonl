{"name":"Booleanisation.compl_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\na : α\n⊢ Eq (HasCompl.compl (Booleanisation.lift a)) (Booleanisation.comp a)","decl":"@[simp] lemma compl_lift (a : α) : (lift a)ᶜ = comp a := rfl\n"}
{"name":"Booleanisation.compl_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\na : α\n⊢ Eq (HasCompl.compl (Booleanisation.comp a)) (Booleanisation.lift a)","decl":"@[simp] lemma compl_comp (a : α) : (comp a)ᶜ = lift a := rfl\n\n"}
{"name":"Booleanisation.lift_le_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Iff (LE.le (Booleanisation.lift a) (Booleanisation.lift b)) (LE.le a b)","decl":"@[simp] lemma lift_le_lift : lift a ≤ lift b ↔ a ≤ b := ⟨by rintro ⟨_⟩; assumption, LE.lift⟩\n"}
{"name":"Booleanisation.comp_le_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Iff (LE.le (Booleanisation.comp a) (Booleanisation.comp b)) (LE.le b a)","decl":"@[simp] lemma comp_le_comp : comp a ≤ comp b ↔ b ≤ a := ⟨by rintro ⟨_⟩; assumption, LE.comp⟩\n"}
{"name":"Booleanisation.lift_le_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Iff (LE.le (Booleanisation.lift a) (Booleanisation.comp b)) (Disjoint a b)","decl":"@[simp] lemma lift_le_comp : lift a ≤ comp b ↔ Disjoint a b := ⟨by rintro ⟨_⟩; assumption, LE.sep⟩\n"}
{"name":"Booleanisation.not_comp_le_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Not (LE.le (Booleanisation.comp a) (Booleanisation.lift b))","decl":"@[simp] lemma not_comp_le_lift : ¬ comp a ≤ lift b := fun h ↦ nomatch h\n\n"}
{"name":"Booleanisation.lift_lt_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Iff (LT.lt (Booleanisation.lift a) (Booleanisation.lift b)) (LT.lt a b)","decl":"@[simp] lemma lift_lt_lift : lift a < lift b ↔ a < b := ⟨by rintro ⟨_⟩; assumption, LT.lift⟩\n"}
{"name":"Booleanisation.comp_lt_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Iff (LT.lt (Booleanisation.comp a) (Booleanisation.comp b)) (LT.lt b a)","decl":"@[simp] lemma comp_lt_comp : comp a < comp b ↔ b < a := ⟨by rintro ⟨_⟩; assumption, LT.comp⟩\n"}
{"name":"Booleanisation.lift_lt_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Iff (LT.lt (Booleanisation.lift a) (Booleanisation.comp b)) (Disjoint a b)","decl":"@[simp] lemma lift_lt_comp : lift a < comp b ↔ Disjoint a b := ⟨by rintro ⟨_⟩; assumption, LT.sep⟩\n"}
{"name":"Booleanisation.not_comp_lt_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Not (LT.lt (Booleanisation.comp a) (Booleanisation.lift b))","decl":"@[simp] lemma not_comp_lt_lift : ¬ comp a < lift b := fun h ↦ nomatch h\n\n"}
{"name":"Booleanisation.lift_sup_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Max.max (Booleanisation.lift a) (Booleanisation.lift b)) (Booleanisation.lift (Max.max a b))","decl":"@[simp] lemma lift_sup_lift (a b : α) : lift a ⊔ lift b = lift (a ⊔ b) := rfl\n"}
{"name":"Booleanisation.lift_sup_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Max.max (Booleanisation.lift a) (Booleanisation.comp b)) (Booleanisation.comp (SDiff.sdiff b a))","decl":"@[simp] lemma lift_sup_comp (a b : α) : lift a ⊔ comp b = comp (b \\ a) := rfl\n"}
{"name":"Booleanisation.comp_sup_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Max.max (Booleanisation.comp a) (Booleanisation.lift b)) (Booleanisation.comp (SDiff.sdiff a b))","decl":"@[simp] lemma comp_sup_lift (a b : α) : comp a ⊔ lift b = comp (a \\ b) := rfl\n"}
{"name":"Booleanisation.comp_sup_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Max.max (Booleanisation.comp a) (Booleanisation.comp b)) (Booleanisation.comp (Min.min a b))","decl":"@[simp] lemma comp_sup_comp (a b : α) : comp a ⊔ comp b = comp (a ⊓ b) := rfl\n\n"}
{"name":"Booleanisation.lift_inf_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Min.min (Booleanisation.lift a) (Booleanisation.lift b)) (Booleanisation.lift (Min.min a b))","decl":"@[simp] lemma lift_inf_lift (a b : α) : lift a ⊓ lift b = lift (a ⊓ b) := rfl\n"}
{"name":"Booleanisation.lift_inf_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Min.min (Booleanisation.lift a) (Booleanisation.comp b)) (Booleanisation.lift (SDiff.sdiff a b))","decl":"@[simp] lemma lift_inf_comp (a b : α) : lift a ⊓ comp b = lift (a \\ b) := rfl\n"}
{"name":"Booleanisation.comp_inf_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Min.min (Booleanisation.comp a) (Booleanisation.lift b)) (Booleanisation.lift (SDiff.sdiff b a))","decl":"@[simp] lemma comp_inf_lift (a b : α) : comp a ⊓ lift b = lift (b \\ a) := rfl\n"}
{"name":"Booleanisation.comp_inf_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (Min.min (Booleanisation.comp a) (Booleanisation.comp b)) (Booleanisation.comp (Max.max a b))","decl":"@[simp] lemma comp_inf_comp (a b : α) : comp a ⊓ comp b = comp (a ⊔ b) := rfl\n\n"}
{"name":"Booleanisation.lift_bot","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\n⊢ Eq (Booleanisation.lift Bot.bot) Bot.bot","decl":"@[simp] lemma lift_bot : lift (⊥ : α) = ⊥ := rfl\n"}
{"name":"Booleanisation.comp_bot","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\n⊢ Eq (Booleanisation.comp Bot.bot) Top.top","decl":"@[simp] lemma comp_bot : comp (⊥ : α) = ⊤ := rfl\n\n"}
{"name":"Booleanisation.lift_sdiff_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (SDiff.sdiff (Booleanisation.lift a) (Booleanisation.lift b)) (Booleanisation.lift (SDiff.sdiff a b))","decl":"@[simp] lemma lift_sdiff_lift (a b : α) : lift a \\ lift b = lift (a \\ b) := rfl\n"}
{"name":"Booleanisation.lift_sdiff_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (SDiff.sdiff (Booleanisation.lift a) (Booleanisation.comp b)) (Booleanisation.lift (Min.min a b))","decl":"@[simp] lemma lift_sdiff_comp (a b : α) : lift a \\ comp b = lift (a ⊓ b) := rfl\n"}
{"name":"Booleanisation.comp_sdiff_lift","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (SDiff.sdiff (Booleanisation.comp a) (Booleanisation.lift b)) (Booleanisation.comp (Max.max a b))","decl":"@[simp] lemma comp_sdiff_lift (a b : α) : comp a \\ lift b = comp (a ⊔ b) := rfl\n"}
{"name":"Booleanisation.comp_sdiff_comp","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\na b : α\n⊢ Eq (SDiff.sdiff (Booleanisation.comp a) (Booleanisation.comp b)) (Booleanisation.lift (SDiff.sdiff b a))","decl":"@[simp] lemma comp_sdiff_comp (a b : α) : comp a \\ comp b = lift (b \\ a) := rfl\n\n"}
{"name":"Booleanisation.liftLatticeHom_injective","module":"Mathlib.Order.Booleanisation","initialProofState":"α : Type u_1\ninst✝ : GeneralizedBooleanAlgebra α\n⊢ Function.Injective ⇑Booleanisation.liftLatticeHom","decl":"lemma liftLatticeHom_injective : Injective (liftLatticeHom (α := α)) := Sum.inl_injective\n\n"}
