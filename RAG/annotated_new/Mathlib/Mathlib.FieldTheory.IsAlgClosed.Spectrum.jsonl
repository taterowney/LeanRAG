{"name":"spectrum.exists_mem_of_not_isUnit_aeval_prod","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommRing R\ninst✝² : Ring A\ninst✝¹ : Algebra R A\ninst✝ : IsDomain R\np : Polynomial R\na : A\nh : Not (IsUnit ((Polynomial.aeval a) (Multiset.map (fun x => HSub.hSub Polynomial.X (Polynomial.C x)) p.roots).prod))\n⊢ Exists fun k => And (Membership.mem (spectrum R a) k) (Eq (Polynomial.eval k p) 0)","decl":"theorem exists_mem_of_not_isUnit_aeval_prod [IsDomain R] {p : R[X]} {a : A}\n    (h : ¬IsUnit (aeval a (Multiset.map (fun x : R => X - C x) p.roots).prod)) :\n    ∃ k : R, k ∈ σ a ∧ eval k p = 0 := by\n  rw [← Multiset.prod_toList, map_list_prod] at h\n  replace h := mt List.prod_isUnit h\n  simp only [not_forall, exists_prop, aeval_C, Multiset.mem_toList, List.mem_map, aeval_X,\n    exists_exists_and_eq_and, Multiset.mem_map, map_sub] at h\n  rcases h with ⟨r, r_mem, r_nu⟩\n  exact ⟨r, by rwa [mem_iff, ← IsUnit.sub_iff], (mem_roots'.1 r_mem).2⟩\n\n"}
{"name":"spectrum.subset_polynomial_aeval","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝² : Field 𝕜\ninst✝¹ : Ring A\ninst✝ : Algebra 𝕜 A\na : A\np : Polynomial 𝕜\n⊢ HasSubset.Subset (Set.image (fun x => Polynomial.eval x p) (spectrum 𝕜 a)) (spectrum 𝕜 ((Polynomial.aeval a) p))","decl":"/-- Half of the spectral mapping theorem for polynomials. We prove it separately\nbecause it holds over any field, whereas `spectrum.map_polynomial_aeval_of_degree_pos` and\n`spectrum.map_polynomial_aeval_of_nonempty` need the field to be algebraically closed. -/\ntheorem subset_polynomial_aeval (a : A) (p : 𝕜[X]) : (eval · p) '' σ a ⊆ σ (aeval a p) := by\n  rintro _ ⟨k, hk, rfl⟩\n  let q := C (eval k p) - p\n  have hroot : IsRoot q k := by simp only [q, eval_C, eval_sub, sub_self, IsRoot.def]\n  rw [← mul_div_eq_iff_isRoot, ← neg_mul_neg, neg_sub] at hroot\n  have aeval_q_eq : ↑ₐ (eval k p) - aeval a p = aeval a q := by\n    simp only [q, aeval_C, map_sub, sub_left_inj]\n  rw [mem_iff, aeval_q_eq, ← hroot, aeval_mul]\n  have hcomm := (Commute.all (C k - X) (-(q / (X - C k)))).map (aeval a : 𝕜[X] →ₐ[𝕜] A)\n  apply mt fun h => (hcomm.isUnit_mul_iff.mp h).1\n  simpa only [aeval_X, aeval_C, map_sub] using hk\n\n"}
{"name":"spectrum.map_polynomial_aeval_of_degree_pos","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝³ : Field 𝕜\ninst✝² : Ring A\ninst✝¹ : Algebra 𝕜 A\ninst✝ : IsAlgClosed 𝕜\na : A\np : Polynomial 𝕜\nhdeg : LT.lt 0 p.degree\n⊢ Eq (spectrum 𝕜 ((Polynomial.aeval a) p)) (Set.image (fun x => Polynomial.eval x p) (spectrum 𝕜 a))","decl":"/-- The *spectral mapping theorem* for polynomials.  Note: the assumption `degree p > 0`\nis necessary in case `σ a = ∅`, for then the left-hand side is `∅` and the right-hand side,\nassuming `[Nontrivial A]`, is `{k}` where `p = Polynomial.C k`. -/\ntheorem map_polynomial_aeval_of_degree_pos [IsAlgClosed 𝕜] (a : A) (p : 𝕜[X])\n    (hdeg : 0 < degree p) : σ (aeval a p) = (eval · p) '' σ a := by\n  -- handle the easy direction via `spectrum.subset_polynomial_aeval`\n  refine Set.eq_of_subset_of_subset (fun k hk => ?_) (subset_polynomial_aeval a p)\n  -- write `C k - p` product of linear factors and a constant; show `C k - p ≠ 0`.\n  have hprod := eq_prod_roots_of_splits_id (IsAlgClosed.splits (C k - p))\n  have h_ne : C k - p ≠ 0 := ne_zero_of_degree_gt <| by\n    rwa [degree_sub_eq_right_of_degree_lt (lt_of_le_of_lt degree_C_le hdeg)]\n  have lead_ne := leadingCoeff_ne_zero.mpr h_ne\n  have lead_unit := (Units.map ↑ₐ.toMonoidHom (Units.mk0 _ lead_ne)).isUnit\n  /- leading coefficient is a unit so product of linear factors is not a unit;\n    apply `exists_mem_of_not_is_unit_aeval_prod`. -/\n  have p_a_eq : aeval a (C k - p) = ↑ₐ k - aeval a p := by\n    simp only [aeval_C, map_sub, sub_left_inj]\n  rw [mem_iff, ← p_a_eq, hprod, aeval_mul,\n    ((Commute.all _ _).map (aeval a : 𝕜[X] →ₐ[𝕜] A)).isUnit_mul_iff, aeval_C] at hk\n  replace hk := exists_mem_of_not_isUnit_aeval_prod (not_and.mp hk lead_unit)\n  rcases hk with ⟨r, r_mem, r_ev⟩\n  exact ⟨r, r_mem, symm (by simpa [eval_sub, eval_C, sub_eq_zero] using r_ev)⟩\n\n"}
{"name":"spectrum.map_polynomial_aeval_of_nonempty","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝³ : Field 𝕜\ninst✝² : Ring A\ninst✝¹ : Algebra 𝕜 A\ninst✝ : IsAlgClosed 𝕜\na : A\np : Polynomial 𝕜\nhnon : (spectrum 𝕜 a).Nonempty\n⊢ Eq (spectrum 𝕜 ((Polynomial.aeval a) p)) (Set.image (fun k => Polynomial.eval k p) (spectrum 𝕜 a))","decl":"/-- In this version of the spectral mapping theorem, we assume the spectrum\nis nonempty instead of assuming the degree of the polynomial is positive. -/\ntheorem map_polynomial_aeval_of_nonempty [IsAlgClosed 𝕜] (a : A) (p : 𝕜[X])\n    (hnon : (σ a).Nonempty) : σ (aeval a p) = (fun k => eval k p) '' σ a := by\n  nontriviality A\n  refine Or.elim (le_or_gt (degree p) 0) (fun h => ?_) (map_polynomial_aeval_of_degree_pos a p)\n  rw [eq_C_of_degree_le_zero h]\n  simp only [Set.image_congr, eval_C, aeval_C, scalar_eq, Set.Nonempty.image_const hnon]\n\n"}
{"name":"spectrum.pow_image_subset","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝² : Field 𝕜\ninst✝¹ : Ring A\ninst✝ : Algebra 𝕜 A\na : A\nn : Nat\n⊢ HasSubset.Subset (Set.image (fun x => HPow.hPow x n) (spectrum 𝕜 a)) (spectrum 𝕜 (HPow.hPow a n))","decl":"/-- A specialization of `spectrum.subset_polynomial_aeval` to monic monomials for convenience. -/\ntheorem pow_image_subset (a : A) (n : ℕ) : (fun x => x ^ n) '' σ a ⊆ σ (a ^ n) := by\n  simpa only [eval_pow, eval_X, aeval_X_pow] using subset_polynomial_aeval a (X ^ n : 𝕜[X])\n\n"}
{"name":"spectrum.map_pow_of_pos","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝³ : Field 𝕜\ninst✝² : Ring A\ninst✝¹ : Algebra 𝕜 A\ninst✝ : IsAlgClosed 𝕜\na : A\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (spectrum 𝕜 (HPow.hPow a n)) (Set.image (fun x => HPow.hPow x n) (spectrum 𝕜 a))","decl":"/-- A specialization of `spectrum.map_polynomial_aeval_of_nonempty` to monic monomials for\nconvenience. -/\ntheorem map_pow_of_pos [IsAlgClosed 𝕜] (a : A) {n : ℕ} (hn : 0 < n) :\n    σ (a ^ n) = (· ^ n) '' σ a := by\n  simpa only [aeval_X_pow, eval_pow, eval_X]\n    using map_polynomial_aeval_of_degree_pos a (X ^ n : 𝕜[X]) (by rwa [degree_X_pow, Nat.cast_pos])\n\n"}
{"name":"spectrum.map_pow_of_nonempty","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝³ : Field 𝕜\ninst✝² : Ring A\ninst✝¹ : Algebra 𝕜 A\ninst✝ : IsAlgClosed 𝕜\na : A\nha : (spectrum 𝕜 a).Nonempty\nn : Nat\n⊢ Eq (spectrum 𝕜 (HPow.hPow a n)) (Set.image (fun x => HPow.hPow x n) (spectrum 𝕜 a))","decl":"/-- A specialization of `spectrum.map_polynomial_aeval_of_nonempty` to monic monomials for\nconvenience. -/\ntheorem map_pow_of_nonempty [IsAlgClosed 𝕜] {a : A} (ha : (σ a).Nonempty) (n : ℕ) :\n    σ (a ^ n) = (· ^ n) '' σ a := by\n  simpa only [aeval_X_pow, eval_pow, eval_X] using map_polynomial_aeval_of_nonempty a (X ^ n) ha\n\n"}
{"name":"spectrum.nonempty_of_isAlgClosed_of_finiteDimensional","module":"Mathlib.FieldTheory.IsAlgClosed.Spectrum","initialProofState":"𝕜 : Type u\nA : Type v\ninst✝⁴ : Field 𝕜\ninst✝³ : Ring A\ninst✝² : Algebra 𝕜 A\ninst✝¹ : IsAlgClosed 𝕜\ninst✝ : Nontrivial A\nI : FiniteDimensional 𝕜 A\na : A\n⊢ (spectrum 𝕜 a).Nonempty","decl":"/-- Every element `a` in a nontrivial finite-dimensional algebra `A`\nover an algebraically closed field `𝕜` has non-empty spectrum. -/\ntheorem nonempty_of_isAlgClosed_of_finiteDimensional [IsAlgClosed 𝕜] [Nontrivial A]\n    [I : FiniteDimensional 𝕜 A] (a : A) : (σ a).Nonempty := by\n  obtain ⟨p, ⟨h_mon, h_eval_p⟩⟩ := isIntegral_of_noetherian (IsNoetherian.iff_fg.2 I) a\n  have nu : ¬IsUnit (aeval a p) := by rw [← aeval_def] at h_eval_p; rw [h_eval_p]; simp\n  rw [eq_prod_roots_of_monic_of_splits_id h_mon (IsAlgClosed.splits p)] at nu\n  obtain ⟨k, hk, _⟩ := exists_mem_of_not_isUnit_aeval_prod nu\n  exact ⟨k, hk⟩\n\n"}
