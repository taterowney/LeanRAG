{"name":"SchwartzMap.fourierTransformCLM_apply","module":"Mathlib.Analysis.Distribution.FourierSchwartz","initialProofState":"𝕜 : Type u_1\ninst✝⁹ : RCLike 𝕜\nE : Type u_2\ninst✝⁸ : NormedAddCommGroup E\ninst✝⁷ : NormedSpace Complex E\ninst✝⁶ : NormedSpace 𝕜 E\ninst✝⁵ : SMulCommClass Complex 𝕜 E\nV : Type u_3\ninst✝⁴ : NormedAddCommGroup V\ninst✝³ : InnerProductSpace Real V\ninst✝² : FiniteDimensional Real V\ninst✝¹ : MeasurableSpace V\ninst✝ : BorelSpace V\nf : SchwartzMap V E\n⊢ Eq (⇑((SchwartzMap.fourierTransformCLM 𝕜) f)) (Real.fourierIntegral ⇑f)","decl":"@[simp] lemma fourierTransformCLM_apply (f : 𝓢(V, E)) :\n    fourierTransformCLM 𝕜 f = 𝓕 f := rfl\n\n"}
{"name":"SchwartzMap.fourierTransformCLE_apply","module":"Mathlib.Analysis.Distribution.FourierSchwartz","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : RCLike 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Complex E\ninst✝⁷ : NormedSpace 𝕜 E\ninst✝⁶ : SMulCommClass Complex 𝕜 E\nV : Type u_3\ninst✝⁵ : NormedAddCommGroup V\ninst✝⁴ : InnerProductSpace Real V\ninst✝³ : FiniteDimensional Real V\ninst✝² : MeasurableSpace V\ninst✝¹ : BorelSpace V\ninst✝ : CompleteSpace E\nf : SchwartzMap V E\n⊢ Eq (⇑((SchwartzMap.fourierTransformCLE 𝕜) f)) (Real.fourierIntegral ⇑f)","decl":"@[simp] lemma fourierTransformCLE_apply (f : 𝓢(V, E)) :\n    fourierTransformCLE 𝕜 f = 𝓕 f := rfl\n\n"}
{"name":"SchwartzMap.fourierTransformCLE_symm_apply","module":"Mathlib.Analysis.Distribution.FourierSchwartz","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : RCLike 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace Complex E\ninst✝⁷ : NormedSpace 𝕜 E\ninst✝⁶ : SMulCommClass Complex 𝕜 E\nV : Type u_3\ninst✝⁵ : NormedAddCommGroup V\ninst✝⁴ : InnerProductSpace Real V\ninst✝³ : FiniteDimensional Real V\ninst✝² : MeasurableSpace V\ninst✝¹ : BorelSpace V\ninst✝ : CompleteSpace E\nf : SchwartzMap V E\n⊢ Eq (⇑((SchwartzMap.fourierTransformCLE 𝕜).symm f)) (Real.fourierIntegralInv ⇑f)","decl":"@[simp] lemma fourierTransformCLE_symm_apply (f : 𝓢(V, E)) :\n    (fourierTransformCLE 𝕜).symm f = 𝓕⁻ f := by\n  ext x\n  exact (fourierIntegralInv_eq_fourierIntegral_neg f x).symm\n\n"}
