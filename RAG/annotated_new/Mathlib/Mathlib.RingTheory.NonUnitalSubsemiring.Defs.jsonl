{"name":"NonUnitalSubsemiringClass.mul_mem","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"S : Type u_1\nR : outParam (Type u)\ninst✝¹ : NonUnitalNonAssocSemiring R\ninst✝ : SetLike S R\nself : NonUnitalSubsemiringClass S R\ns : S\na b : R\na✝¹ : Membership.mem s a\na✝ : Membership.mem s b\n⊢ Membership.mem s (HMul.hMul a b)","decl":"/-- `NonUnitalSubsemiringClass S R` states that `S` is a type of subsets `s ⊆ R` that\nare both an additive submonoid and also a multiplicative subsemigroup. -/\nclass NonUnitalSubsemiringClass (S : Type*) (R : outParam (Type u)) [NonUnitalNonAssocSemiring R]\n  [SetLike S R] extends AddSubmonoidClass S R : Prop where\n  mul_mem : ∀ {s : S} {a b : R}, a ∈ s → b ∈ s → a * b ∈ s\n\n-- See note [lower instance priority]\n"}
{"name":"NonUnitalSubsemiringClass.toAddSubmonoidClass","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"S : Type u_1\nR : outParam (Type u)\ninst✝¹ : NonUnitalNonAssocSemiring R\ninst✝ : SetLike S R\nself : NonUnitalSubsemiringClass S R\n⊢ AddSubmonoidClass S R","decl":"/-- `NonUnitalSubsemiringClass S R` states that `S` is a type of subsets `s ⊆ R` that\nare both an additive submonoid and also a multiplicative subsemigroup. -/\nclass NonUnitalSubsemiringClass (S : Type*) (R : outParam (Type u)) [NonUnitalNonAssocSemiring R]\n  [SetLike S R] extends AddSubmonoidClass S R : Prop where\n  mul_mem : ∀ {s : S} {a b : R}, a ∈ s → b ∈ s → a * b ∈ s\n\n-- See note [lower instance priority]\n"}
{"name":"NonUnitalSubsemiringClass.mulMemClass","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"S : Type u_1\nR : Type u\ninst✝¹ : NonUnitalNonAssocSemiring R\ninst✝ : SetLike S R\nh : NonUnitalSubsemiringClass S R\n⊢ MulMemClass S R","decl":"instance (priority := 100) NonUnitalSubsemiringClass.mulMemClass (S : Type*) (R : Type u)\n    [NonUnitalNonAssocSemiring R] [SetLike S R] [h : NonUnitalSubsemiringClass S R] :\n    MulMemClass S R :=\n  { h with }\n\n"}
{"name":"NonUnitalSubsemiringClass.noZeroDivisors","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocSemiring R\ninst✝² : SetLike S R\ninst✝¹ : NonUnitalSubsemiringClass S R\ns : S\ninst✝ : NoZeroDivisors R\n⊢ NoZeroDivisors (Subtype fun x => Membership.mem s x)","decl":"instance noZeroDivisors [NoZeroDivisors R] : NoZeroDivisors s :=\n  Subtype.coe_injective.noZeroDivisors Subtype.val rfl fun _ _ => rfl\n\n"}
{"name":"NonUnitalSubsemiringClass.coeSubtype","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝² : NonUnitalNonAssocSemiring R\ninst✝¹ : SetLike S R\ninst✝ : NonUnitalSubsemiringClass S R\ns : S\n⊢ Eq (⇑(NonUnitalSubsemiringClass.subtype s)) Subtype.val","decl":"@[simp]\ntheorem coeSubtype : (subtype s : s → R) = ((↑) : s → R) :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mul_mem'","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nself : NonUnitalSubsemiring R\na b : R\na✝¹ : Membership.mem self.carrier a\na✝ : Membership.mem self.carrier b\n⊢ Membership.mem self.carrier (HMul.hMul a b)","decl":"/-- A non-unital subsemiring of a non-unital semiring `R` is a subset `s` that is both an additive\nsubmonoid and a semigroup. -/\nstructure NonUnitalSubsemiring (R : Type u) [NonUnitalNonAssocSemiring R] extends AddSubmonoid R,\n  Subsemigroup R\n\n"}
{"name":"NonUnitalSubsemiring.mk.inj","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ntoAddSubmonoid✝ : AddSubmonoid R\nmul_mem'✝ : ∀ {a b : R}, Membership.mem toAddSubmonoid✝.carrier a → Membership.mem toAddSubmonoid✝.carrier b → Membership.mem toAddSubmonoid✝.carrier (HMul.hMul a b)\ntoAddSubmonoid : AddSubmonoid R\nmul_mem' : ∀ {a b : R}, Membership.mem toAddSubmonoid.carrier a → Membership.mem toAddSubmonoid.carrier b → Membership.mem toAddSubmonoid.carrier (HMul.hMul a b)\nx✝ : Eq { toAddSubmonoid := toAddSubmonoid✝, mul_mem' := mul_mem'✝ } { toAddSubmonoid := toAddSubmonoid, mul_mem' := mul_mem' }\n⊢ Eq toAddSubmonoid✝ toAddSubmonoid","decl":"/-- A non-unital subsemiring of a non-unital semiring `R` is a subset `s` that is both an additive\nsubmonoid and a semigroup. -/\nstructure NonUnitalSubsemiring (R : Type u) [NonUnitalNonAssocSemiring R] extends AddSubmonoid R,\n  Subsemigroup R\n\n"}
{"name":"NonUnitalSubsemiring.mk.sizeOf_spec","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝¹ : NonUnitalNonAssocSemiring R\ninst✝ : SizeOf R\ntoAddSubmonoid : AddSubmonoid R\nmul_mem' : ∀ {a b : R}, Membership.mem toAddSubmonoid.carrier a → Membership.mem toAddSubmonoid.carrier b → Membership.mem toAddSubmonoid.carrier (HMul.hMul a b)\n⊢ Eq (SizeOf.sizeOf { toAddSubmonoid := toAddSubmonoid, mul_mem' := mul_mem' }) (HAdd.hAdd 1 (SizeOf.sizeOf toAddSubmonoid))","decl":"/-- A non-unital subsemiring of a non-unital semiring `R` is a subset `s` that is both an additive\nsubmonoid and a semigroup. -/\nstructure NonUnitalSubsemiring (R : Type u) [NonUnitalNonAssocSemiring R] extends AddSubmonoid R,\n  Subsemigroup R\n\n"}
{"name":"NonUnitalSubsemiring.mk.injEq","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ntoAddSubmonoid✝ : AddSubmonoid R\nmul_mem'✝ : ∀ {a b : R}, Membership.mem toAddSubmonoid✝.carrier a → Membership.mem toAddSubmonoid✝.carrier b → Membership.mem toAddSubmonoid✝.carrier (HMul.hMul a b)\ntoAddSubmonoid : AddSubmonoid R\nmul_mem' : ∀ {a b : R}, Membership.mem toAddSubmonoid.carrier a → Membership.mem toAddSubmonoid.carrier b → Membership.mem toAddSubmonoid.carrier (HMul.hMul a b)\n⊢ Eq (Eq { toAddSubmonoid := toAddSubmonoid✝, mul_mem' := mul_mem'✝ } { toAddSubmonoid := toAddSubmonoid, mul_mem' := mul_mem' }) (Eq toAddSubmonoid✝ toAddSubmonoid)","decl":"/-- A non-unital subsemiring of a non-unital semiring `R` is a subset `s` that is both an additive\nsubmonoid and a semigroup. -/\nstructure NonUnitalSubsemiring (R : Type u) [NonUnitalNonAssocSemiring R] extends AddSubmonoid R,\n  Subsemigroup R\n\n"}
{"name":"NonUnitalSubsemiring.instNonUnitalSubsemiringClass","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\n⊢ NonUnitalSubsemiringClass (NonUnitalSubsemiring R) R","decl":"instance : NonUnitalSubsemiringClass (NonUnitalSubsemiring R) R where\n  zero_mem {s} := AddSubmonoid.zero_mem' s.toAddSubmonoid\n  add_mem {s} := AddSubsemigroup.add_mem' s.toAddSubmonoid.toAddSubsemigroup\n  mul_mem {s} := mul_mem' s\n\n"}
{"name":"NonUnitalSubsemiring.mem_carrier","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\nx : R\n⊢ Iff (Membership.mem s.carrier x) (Membership.mem s x)","decl":"theorem mem_carrier {s : NonUnitalSubsemiring R} {x : R} : x ∈ s.carrier ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubsemiring.ext","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nS T : NonUnitalSubsemiring R\nh : ∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"/-- Two non-unital subsemirings are equal if they have the same elements. -/\n@[ext]\ntheorem ext {S T : NonUnitalSubsemiring R} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"NonUnitalSubsemiring.ext_iff","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nS T : NonUnitalSubsemiring R\n⊢ Iff (Eq S T) (∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x))","decl":"/-- Two non-unital subsemirings are equal if they have the same elements. -/\n@[ext]\ntheorem ext {S T : NonUnitalSubsemiring R} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"NonUnitalSubsemiring.coe_copy","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nS : NonUnitalSubsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"@[simp]\ntheorem coe_copy (S : NonUnitalSubsemiring R) (s : Set R) (hs : s = ↑S) :\n    (S.copy s hs : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.copy_eq","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nS : NonUnitalSubsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"theorem copy_eq (S : NonUnitalSubsemiring R) (s : Set R) (hs : s = ↑S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
{"name":"NonUnitalSubsemiring.toSubsemigroup_injective","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\n⊢ Function.Injective NonUnitalSubsemiring.toSubsemigroup","decl":"theorem toSubsemigroup_injective :\n    Function.Injective (toSubsemigroup : NonUnitalSubsemiring R → Subsemigroup R)\n  | _, _, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"NonUnitalSubsemiring.toAddSubmonoid_injective","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\n⊢ Function.Injective NonUnitalSubsemiring.toAddSubmonoid","decl":"theorem toAddSubmonoid_injective :\n    Function.Injective (toAddSubmonoid : NonUnitalSubsemiring R → AddSubmonoid R)\n  | _, _, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"NonUnitalSubsemiring.coe_mk'","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : Set R\nsg : Subsemigroup R\nhg : Eq (↑sg) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\n⊢ Eq (↑(NonUnitalSubsemiring.mk' s sg hg sa ha)) s","decl":"@[simp]\ntheorem coe_mk' {s : Set R} {sg : Subsemigroup R} (hg : ↑sg = s) {sa : AddSubmonoid R}\n    (ha : ↑sa = s) : (NonUnitalSubsemiring.mk' s sg hg sa ha : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mem_mk'","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : Set R\nsg : Subsemigroup R\nhg : Eq (↑sg) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\nx : R\n⊢ Iff (Membership.mem (NonUnitalSubsemiring.mk' s sg hg sa ha) x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_mk' {s : Set R} {sg : Subsemigroup R} (hg : ↑sg = s) {sa : AddSubmonoid R}\n    (ha : ↑sa = s) {x : R} : x ∈ NonUnitalSubsemiring.mk' s sg hg sa ha ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubsemiring.mk'_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : Set R\nsg : Subsemigroup R\nhg : Eq (↑sg) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\n⊢ Eq (NonUnitalSubsemiring.mk' s sg hg sa ha).toSubsemigroup sg","decl":"@[simp]\ntheorem mk'_toSubsemigroup {s : Set R} {sg : Subsemigroup R} (hg : ↑sg = s) {sa : AddSubmonoid R}\n    (ha : ↑sa = s) : (NonUnitalSubsemiring.mk' s sg hg sa ha).toSubsemigroup = sg :=\n  SetLike.coe_injective hg.symm\n\n"}
{"name":"NonUnitalSubsemiring.mk'_toAddSubmonoid","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : Set R\nsg : Subsemigroup R\nhg : Eq (↑sg) s\nsa : AddSubmonoid R\nha : Eq (↑sa) s\n⊢ Eq (NonUnitalSubsemiring.mk' s sg hg sa ha).toAddSubmonoid sa","decl":"@[simp]\ntheorem mk'_toAddSubmonoid {s : Set R} {sg : Subsemigroup R} (hg : ↑sg = s) {sa : AddSubmonoid R}\n    (ha : ↑sa = s) : (NonUnitalSubsemiring.mk' s sg hg sa ha).toAddSubmonoid = sa :=\n  SetLike.coe_injective ha.symm\n\n"}
{"name":"NonUnitalSubsemiring.coe_zero","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\n⊢ Eq (↑0) 0","decl":"@[simp, norm_cast]\ntheorem coe_zero : ((0 : s) : R) = (0 : R) :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.coe_add","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\nx y : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(HAdd.hAdd x y)) (HAdd.hAdd ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_add (x y : s) : ((x + y : s) : R) = (x + y : R) :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.coe_mul","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\nx y : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(HMul.hMul x y)) (HMul.hMul ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_mul (x y : s) : ((x * y : s) : R) = (x * y : R) :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mem_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\nx : R\n⊢ Iff (Membership.mem s.toSubsemigroup x) (Membership.mem s x)","decl":"@[simp high]\ntheorem mem_toSubsemigroup {s : NonUnitalSubsemiring R} {x : R} : x ∈ s.toSubsemigroup ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubsemiring.coe_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\n⊢ Eq ↑s.toSubsemigroup ↑s","decl":"@[simp high]\ntheorem coe_toSubsemigroup (s : NonUnitalSubsemiring R) : (s.toSubsemigroup : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mem_toAddSubmonoid","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\nx : R\n⊢ Iff (Membership.mem s.toAddSubmonoid x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_toAddSubmonoid {s : NonUnitalSubsemiring R} {x : R} : x ∈ s.toAddSubmonoid ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubsemiring.coe_toAddSubmonoid","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\ns : NonUnitalSubsemiring R\n⊢ Eq ↑s.toAddSubmonoid ↑s","decl":"@[simp]\ntheorem coe_toAddSubmonoid (s : NonUnitalSubsemiring R) : (s.toAddSubmonoid : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mem_top","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nx : R\n⊢ Membership.mem Top.top x","decl":"@[simp]\ntheorem mem_top (x : R) : x ∈ (⊤ : NonUnitalSubsemiring R) :=\n  Set.mem_univ x\n\n"}
{"name":"NonUnitalSubsemiring.coe_top","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top : ((⊤ : NonUnitalSubsemiring R) : Set R) = Set.univ :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.coe_bot","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\n⊢ Eq (↑Bot.bot) (Singleton.singleton 0)","decl":"theorem coe_bot : ((⊥ : NonUnitalSubsemiring R) : Set R) = {0} :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mem_bot","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\nx : R\n⊢ Iff (Membership.mem Bot.bot x) (Eq x 0)","decl":"theorem mem_bot {x : R} : x ∈ (⊥ : NonUnitalSubsemiring R) ↔ x = 0 :=\n  Set.mem_singleton_iff\n\n"}
{"name":"NonUnitalSubsemiring.coe_inf","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\np p' : NonUnitalSubsemiring R\n⊢ Eq (↑(Min.min p p')) (Inter.inter ↑p ↑p')","decl":"@[simp]\ntheorem coe_inf (p p' : NonUnitalSubsemiring R) :\n    ((p ⊓ p' : NonUnitalSubsemiring R) : Set R) = (p : Set R) ∩ p' :=\n  rfl\n\n"}
{"name":"NonUnitalSubsemiring.mem_inf","module":"Mathlib.RingTheory.NonUnitalSubsemiring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocSemiring R\np p' : NonUnitalSubsemiring R\nx : R\n⊢ Iff (Membership.mem (Min.min p p') x) (And (Membership.mem p x) (Membership.mem p' x))","decl":"@[simp]\ntheorem mem_inf {p p' : NonUnitalSubsemiring R} {x : R} : x ∈ p ⊓ p' ↔ x ∈ p ∧ x ∈ p' :=\n  Iff.rfl\n\n"}
