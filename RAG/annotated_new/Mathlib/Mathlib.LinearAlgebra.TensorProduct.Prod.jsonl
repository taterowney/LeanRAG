{"name":"TensorProduct.prodRight_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Prod","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R M₃\nm₁ : M₁\nm₂ : M₂\nm₃ : M₃\n⊢ Eq ((TensorProduct.prodRight R M₁ M₂ M₃) (TensorProduct.tmul R m₁ { fst := m₂, snd := m₃ })) { fst := TensorProduct.tmul R m₁ m₂, snd := TensorProduct.tmul R m₁ m₃ }","decl":"@[simp] theorem prodRight_tmul (m₁ : M₁) (m₂ : M₂) (m₃ : M₃) :\n    prodRight R M₁ M₂ M₃ (m₁ ⊗ₜ (m₂, m₃)) = (m₁ ⊗ₜ m₂, m₁ ⊗ₜ m₃) :=\n  rfl\n\n"}
{"name":"TensorProduct.prodRight_symm_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Prod","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R M₃\nm₁ : M₁\nm₂ : M₂\nm₃ : M₃\n⊢ Eq ((TensorProduct.prodRight R M₁ M₂ M₃).symm { fst := TensorProduct.tmul R m₁ m₂, snd := TensorProduct.tmul R m₁ m₃ }) (TensorProduct.tmul R m₁ { fst := m₂, snd := m₃ })","decl":"@[simp] theorem prodRight_symm_tmul (m₁ : M₁) (m₂ : M₂) (m₃ : M₃) :\n    (prodRight R M₁ M₂ M₃).symm (m₁ ⊗ₜ m₂, m₁ ⊗ₜ m₃) = (m₁ ⊗ₜ (m₂, m₃)) :=\n  (LinearEquiv.symm_apply_eq _).mpr rfl\n\n"}
{"name":"TensorProduct.prodLeft_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Prod","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R M₃\nm₁ : M₁\nm₂ : M₂\nm₃ : M₃\n⊢ Eq ((TensorProduct.prodLeft R M₁ M₂ M₃) (TensorProduct.tmul R { fst := m₁, snd := m₂ } m₃)) { fst := TensorProduct.tmul R m₁ m₃, snd := TensorProduct.tmul R m₂ m₃ }","decl":"@[simp] theorem prodLeft_tmul (m₁ : M₁) (m₂ : M₂) (m₃ : M₃) :\n    prodLeft R M₁ M₂ M₃ ((m₁, m₂) ⊗ₜ m₃) = (m₁ ⊗ₜ m₃, m₂ ⊗ₜ m₃) :=\n  rfl\n\n"}
{"name":"TensorProduct.prodLeft_symm_tmul","module":"Mathlib.LinearAlgebra.TensorProduct.Prod","initialProofState":"R : Type uR\nM₁ : Type uM₁\nM₂ : Type uM₂\nM₃ : Type uM₃\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M₁\ninst✝⁴ : AddCommMonoid M₂\ninst✝³ : AddCommMonoid M₃\ninst✝² : Module R M₁\ninst✝¹ : Module R M₂\ninst✝ : Module R M₃\nm₁ : M₁\nm₂ : M₂\nm₃ : M₃\n⊢ Eq ((TensorProduct.prodLeft R M₁ M₂ M₃).symm { fst := TensorProduct.tmul R m₁ m₃, snd := TensorProduct.tmul R m₂ m₃ }) (TensorProduct.tmul R { fst := m₁, snd := m₂ } m₃)","decl":"@[simp] theorem prodLeft_symm_tmul (m₁ : M₁) (m₂ : M₂) (m₃ : M₃) :\n    (prodLeft R M₁ M₂ M₃).symm (m₁ ⊗ₜ m₃, m₂ ⊗ₜ m₃) = ((m₁, m₂) ⊗ₜ m₃) :=\n  (LinearEquiv.symm_apply_eq _).mpr rfl\n\n"}
