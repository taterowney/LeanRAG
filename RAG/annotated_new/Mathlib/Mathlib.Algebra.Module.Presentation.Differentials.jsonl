{"name":"Algebra.Presentation.differentialsRelations_G","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ Eq pres.differentialsRelations.G pres.vars","decl":"/-- The shape of the presentation by generators and relations of the `S`-module `Ω[S⁄R]`\nthat is obtained from a presentation of `S` as an `R`-algebra. -/\n@[simps G R]\nnoncomputable def differentialsRelations : Module.Relations S where\n  G := pres.vars\n  R := pres.rels\n  relation r :=\n    Finsupp.mapRange (algebraMap pres.Ring S) (by simp)\n      ((mvPolynomialBasis R pres.vars).repr (D _ _ (pres.relation r)))\n\n"}
{"name":"Algebra.Presentation.differentialsRelations_R","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ Eq pres.differentialsRelations.R pres.rels","decl":"/-- The shape of the presentation by generators and relations of the `S`-module `Ω[S⁄R]`\nthat is obtained from a presentation of `S` as an `R`-algebra. -/\n@[simps G R]\nnoncomputable def differentialsRelations : Module.Relations S where\n  G := pres.vars\n  R := pres.rels\n  relation r :=\n    Finsupp.mapRange (algebraMap pres.Ring S) (by simp)\n      ((mvPolynomialBasis R pres.vars).repr (D _ _ (pres.relation r)))\n\n"}
{"name":"Algebra.Presentation.differentials.comm₂₃'","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ Eq (pres.toExtension.toKaehler.comp ↑pres.cotangentSpaceBasis.repr.symm) (Finsupp.linearCombination S fun g => (KaehlerDifferential.D R S) (pres.val g))","decl":"/-- Same as `comm₂₃` below, but here we have not yet constructed `differentialsSolution`. -/\nlemma comm₂₃' : pres.toExtension.toKaehler.comp pres.cotangentSpaceBasis.repr.symm.toLinearMap =\n    Finsupp.linearCombination S (fun g ↦ D _ _ (pres.val g)) := by\n  ext g\n  dsimp\n  rw [Basis.repr_symm_apply, Finsupp.linearCombination_single,\n    Finsupp.linearCombination_single, one_smul, one_smul,\n    Generators.cotangentSpaceBasis_apply]\n  simp [Generators.toExtension]\n\n"}
{"name":"Algebra.Presentation.differentials.hom₁_single","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\nr : pres.rels\n⊢ Eq ((Algebra.Presentation.differentials.hom₁ pres) (Finsupp.single r 1)) (Algebra.Extension.Cotangent.mk ⟨pres.relation r, ⋯⟩)","decl":"lemma hom₁_single (r : pres.rels) :\n    hom₁ pres (Finsupp.single r 1) = Extension.Cotangent.mk ⟨pres.relation r, by simp⟩ := by\n  simp [hom₁]\n\n"}
{"name":"Algebra.Presentation.differentials.surjective_hom₁","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ Function.Surjective ⇑(Algebra.Presentation.differentials.hom₁ pres)","decl":"lemma surjective_hom₁ : Function.Surjective (hom₁ pres) := by\n  let φ : (pres.rels →₀ S) →ₗ[pres.Ring] pres.toExtension.Cotangent :=\n    { toFun := hom₁ pres\n      map_add' := by simp\n      map_smul' := by simp }\n  change Function.Surjective φ\n  have h₁ := Algebra.Extension.Cotangent.mk_surjective (P := pres.toExtension)\n  have h₂ : Submodule.span pres.Ring\n      (Set.range (fun r ↦ (⟨pres.relation r, by simp⟩ : pres.ker))) = ⊤ := by\n    refine Submodule.map_injective_of_injective (f := Submodule.subtype pres.ker)\n      Subtype.coe_injective ?_\n    rw [Submodule.map_top, Submodule.range_subtype, Submodule.map_span,\n      Submodule.coe_subtype, Ideal.submodule_span_eq]\n    simp only [← pres.span_range_relation_eq_ker]\n    congr\n    aesop\n  rw [← LinearMap.range_eq_top] at h₁ ⊢\n  rw [← top_le_iff, ← h₁, LinearMap.range_eq_map, ← h₂]\n  dsimp\n  rw [Submodule.map_span_le]\n  rintro _ ⟨r, rfl⟩\n  simp only [LinearMap.mem_range]\n  refine ⟨Finsupp.single r 1, ?_⟩\n  simp only [LinearMap.coe_mk, AddHom.coe_mk, hom₁_single, φ]\n  rfl\n\n"}
{"name":"Algebra.Presentation.differentials.comm₁₂_single","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\nr : pres.rels\n⊢ Eq (pres.toExtension.cotangentComplex ((Algebra.Presentation.differentials.hom₁ pres) (Finsupp.single r 1))) (pres.cotangentSpaceBasis.repr.symm (pres.differentialsRelations.relation r))","decl":"lemma comm₁₂_single (r : pres.rels) :\n    pres.toExtension.cotangentComplex (hom₁ pres (Finsupp.single r 1)) =\n      pres.cotangentSpaceBasis.repr.symm ((differentialsRelations pres).relation r) := by\n  simp only [hom₁, Finsupp.linearCombination_single, one_smul, differentialsRelations,\n    Basis.repr_symm_apply, Extension.cotangentComplex_mk]\n  exact pres.cotangentSpaceBasis.repr.injective (by ext; simp)\n\n"}
{"name":"Algebra.Presentation.differentials.comm₁₂","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ Eq (pres.toExtension.cotangentComplex.comp (Algebra.Presentation.differentials.hom₁ pres)) ((↑pres.cotangentSpaceBasis.repr.symm).comp pres.differentialsRelations.map)","decl":"lemma comm₁₂ : pres.toExtension.cotangentComplex.comp (hom₁ pres) =\n    pres.cotangentSpaceBasis.repr.symm.comp (differentialsRelations pres).map := by\n  ext r\n  have := (differentialsRelations pres).map_single\n  dsimp at this ⊢\n  rw [comm₁₂_single, this]\n\n"}
{"name":"Algebra.Presentation.differentials.comm₂₃","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ Eq (pres.toExtension.toKaehler.comp ↑pres.cotangentSpaceBasis.repr.symm) pres.differentialsSolution.π","decl":"lemma differentials.comm₂₃ :\n    pres.toExtension.toKaehler.comp pres.cotangentSpaceBasis.repr.symm.toLinearMap =\n      pres.differentialsSolution.π :=\n  comm₂₃' pres\n\n"}
{"name":"Algebra.Presentation.differentialsSolution_isPresentation","module":"Mathlib.Algebra.Module.Presentation.Differentials","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : CommRing S\ninst✝ : Algebra R S\npres : Algebra.Presentation R S\n⊢ pres.differentialsSolution.IsPresentation","decl":"open differentials in\nlemma differentialsSolution_isPresentation :\n    pres.differentialsSolution.IsPresentation := by\n  rw [Module.Relations.Solution.isPresentation_iff]\n  constructor\n  · rw [← Module.Relations.Solution.surjective_π_iff_span_eq_top, ← comm₂₃]\n    exact Extension.toKaehler_surjective.comp pres.cotangentSpaceBasis.repr.symm.surjective\n  · rw [← Module.Relations.range_map]\n    exact Function.Exact.linearMap_ker_eq\n      ((LinearMap.exact_iff_of_surjective_of_bijective_of_injective\n      _ _ _ _ (hom₁ pres)\n      pres.cotangentSpaceBasis.repr.symm.toLinearMap .id\n      (comm₁₂ pres) (by simpa using comm₂₃ pres) (surjective_hom₁ pres)\n        (LinearEquiv.bijective _) (Equiv.refl _).injective).2\n        pres.toExtension.exact_cotangentComplex_toKaehler)\n\n"}
