{"name":"IsUnifLocDoublingMeasure.vitaliFamily_def","module":"Mathlib.MeasureTheory.Covering.DensityTheorem","initialProofState":"Œ± : Type u_2\ninst‚úù‚Åµ : PseudoMetricSpace Œ±\ninst‚úù‚Å¥ : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù¬≥ : IsUnifLocDoublingMeasure Œº\ninst‚úù¬≤ : SecondCountableTopology Œ±\ninst‚úù¬π : BorelSpace Œ±\ninst‚úù : MeasureTheory.IsLocallyFiniteMeasure Œº\nK : Real\n‚ä¢ Eq (IsUnifLocDoublingMeasure.vitaliFamily Œº K)\n    (let R := IsUnifLocDoublingMeasure.scalingScaleOf Œº (Max.max (HAdd.hAdd (HMul.hMul 4 K) 3) 3);\n    letFun ‚ãØ fun Rpos => letFun ‚ãØ fun A => (Vitali.vitaliFamily Œº (IsUnifLocDoublingMeasure.scalingConstantOf Œº (Max.max (HAdd.hAdd (HMul.hMul 4 K) 3) 3)) A).enlarge (HDiv.hDiv R 4) ‚ãØ)","decl":"/-- A Vitali family in a space with a uniformly locally doubling measure, designed so that the sets\nat `x` contain all `closedBall y r` when `dist x y ‚â§ K * r`. -/\nirreducible_def vitaliFamily (K : ‚Ñù) : VitaliFamily Œº := by\n  /- the Vitali covering theorem gives a family that works well at small scales, thanks to the\n    doubling property. We enlarge this family to add large sets, to make sure that all balls and not\n    only small ones belong to the family, for convenience. -/\n  let R := scalingScaleOf Œº (max (4 * K + 3) 3)\n  have Rpos : 0 < R := scalingScaleOf_pos _ _\n  have A : ‚àÄ x : Œ±, ‚àÉ·∂† r in ùìù[>] (0 : ‚Ñù),\n      Œº (closedBall x (3 * r)) ‚â§ scalingConstantOf Œº (max (4 * K + 3) 3) * Œº (closedBall x r) := by\n    intro x\n    apply frequently_iff.2 fun {U} hU => ?_\n    obtain ‚ü®Œµ, Œµpos, hŒµ‚ü© := mem_nhdsGT_iff_exists_Ioc_subset.1 hU\n    refine ‚ü®min Œµ R, hŒµ ‚ü®lt_min Œµpos Rpos, min_le_left _ _‚ü©, ?_‚ü©\n    exact measure_mul_le_scalingConstantOf_mul Œº\n      ‚ü®zero_lt_three, le_max_right _ _‚ü© (min_le_right _ _)\n  exact (Vitali.vitaliFamily Œº (scalingConstantOf Œº (max (4 * K + 3) 3)) A).enlarge (R / 4)\n    (by linarith)\n\n"}
{"name":"IsUnifLocDoublingMeasure.closedBall_mem_vitaliFamily_of_dist_le_mul","module":"Mathlib.MeasureTheory.Covering.DensityTheorem","initialProofState":"Œ± : Type u_1\ninst‚úù‚Åµ : PseudoMetricSpace Œ±\ninst‚úù‚Å¥ : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù¬≥ : IsUnifLocDoublingMeasure Œº\ninst‚úù¬≤ : SecondCountableTopology Œ±\ninst‚úù¬π : BorelSpace Œ±\ninst‚úù : MeasureTheory.IsLocallyFiniteMeasure Œº\nK : Real\nx y : Œ±\nr : Real\nh : LE.le (Dist.dist x y) (HMul.hMul K r)\nrpos : LT.lt 0 r\n‚ä¢ Membership.mem ((IsUnifLocDoublingMeasure.vitaliFamily Œº K).setsAt x) (Metric.closedBall y r)","decl":"/-- In the Vitali family `IsUnifLocDoublingMeasure.vitaliFamily K`, the sets based at `x`\ncontain all balls `closedBall y r` when `dist x y ‚â§ K * r`. -/\ntheorem closedBall_mem_vitaliFamily_of_dist_le_mul {K : ‚Ñù} {x y : Œ±} {r : ‚Ñù} (h : dist x y ‚â§ K * r)\n    (rpos : 0 < r) : closedBall y r ‚àà (vitaliFamily Œº K).setsAt x := by\n  let R := scalingScaleOf Œº (max (4 * K + 3) 3)\n  simp only [vitaliFamily, VitaliFamily.enlarge, Vitali.vitaliFamily, mem_union, mem_setOf_eq,\n    isClosed_ball, true_and, (nonempty_ball.2 rpos).mono ball_subset_interior_closedBall,\n    measurableSet_closedBall]\n  /- The measure is doubling on scales smaller than `R`. Therefore, we treat differently small\n    and large balls. For large balls, this follows directly from the enlargement we used in the\n    definition. -/\n  by_cases H : closedBall y r ‚äÜ closedBall x (R / 4)\n  swap; ¬∑ exact Or.inr H\n  left\n  /- For small balls, there is the difficulty that `r` could be large but still the ball could be\n    small, if the annulus `{y | Œµ ‚â§ dist y x ‚â§ R/4}` is empty. We split between the cases `r ‚â§ R`\n    and `r > R`, and use the doubling for the former and rough estimates for the latter. -/\n  rcases le_or_lt r R with (hr | hr)\n  ¬∑ refine ‚ü®(K + 1) * r, ?_‚ü©\n    constructor\n    ¬∑ apply closedBall_subset_closedBall'\n      rw [dist_comm]\n      linarith\n    ¬∑ have I1 : closedBall x (3 * ((K + 1) * r)) ‚äÜ closedBall y ((4 * K + 3) * r) := by\n        apply closedBall_subset_closedBall'\n        linarith\n      have I2 : closedBall y ((4 * K + 3) * r) ‚äÜ closedBall y (max (4 * K + 3) 3 * r) := by\n        apply closedBall_subset_closedBall\n        exact mul_le_mul_of_nonneg_right (le_max_left _ _) rpos.le\n      apply (measure_mono (I1.trans I2)).trans\n      exact measure_mul_le_scalingConstantOf_mul _\n        ‚ü®zero_lt_three.trans_le (le_max_right _ _), le_rfl‚ü© hr\n  ¬∑ refine ‚ü®R / 4, H, ?_‚ü©\n    have : closedBall x (3 * (R / 4)) ‚äÜ closedBall y r := by\n      apply closedBall_subset_closedBall'\n      have A : y ‚àà closedBall y r := mem_closedBall_self rpos.le\n      have B := mem_closedBall'.1 (H A)\n      linarith\n    apply (measure_mono this).trans _\n    refine le_mul_of_one_le_left (zero_le _) ?_\n    exact ENNReal.one_le_coe_iff.2 (le_max_right _ _)\n\n"}
{"name":"IsUnifLocDoublingMeasure.tendsto_closedBall_filterAt","module":"Mathlib.MeasureTheory.Covering.DensityTheorem","initialProofState":"Œ± : Type u_1\ninst‚úù‚Åµ : PseudoMetricSpace Œ±\ninst‚úù‚Å¥ : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù¬≥ : IsUnifLocDoublingMeasure Œº\ninst‚úù¬≤ : SecondCountableTopology Œ±\ninst‚úù¬π : BorelSpace Œ±\ninst‚úù : MeasureTheory.IsLocallyFiniteMeasure Œº\nK : Real\nx : Œ±\nŒπ : Type u_2\nl : Filter Œπ\nw : Œπ ‚Üí Œ±\nŒ¥ : Œπ ‚Üí Real\nŒ¥lim : Filter.Tendsto Œ¥ l (nhdsWithin 0 (Set.Ioi 0))\nxmem : Filter.Eventually (fun j => Membership.mem (Metric.closedBall (w j) (HMul.hMul K (Œ¥ j))) x) l\n‚ä¢ Filter.Tendsto (fun j => Metric.closedBall (w j) (Œ¥ j)) l ((IsUnifLocDoublingMeasure.vitaliFamily Œº K).filterAt x)","decl":"theorem tendsto_closedBall_filterAt {K : ‚Ñù} {x : Œ±} {Œπ : Type*} {l : Filter Œπ} (w : Œπ ‚Üí Œ±)\n    (Œ¥ : Œπ ‚Üí ‚Ñù) (Œ¥lim : Tendsto Œ¥ l (ùìù[>] 0)) (xmem : ‚àÄ·∂† j in l, x ‚àà closedBall (w j) (K * Œ¥ j)) :\n    Tendsto (fun j => closedBall (w j) (Œ¥ j)) l ((vitaliFamily Œº K).filterAt x) := by\n  refine (vitaliFamily Œº K).tendsto_filterAt_iff.mpr ‚ü®?_, fun Œµ hŒµ => ?_‚ü©\n  ¬∑ filter_upwards [xmem, Œ¥lim self_mem_nhdsWithin] with j hj h'j\n    exact closedBall_mem_vitaliFamily_of_dist_le_mul Œº hj h'j\n  ¬∑ rcases l.eq_or_neBot with rfl | h\n    ¬∑ simp\n    have hK : 0 ‚â§ K := by\n      rcases (xmem.and (Œ¥lim self_mem_nhdsWithin)).exists with ‚ü®j, hj, h'j‚ü©\n      have : 0 ‚â§ K * Œ¥ j := nonempty_closedBall.1 ‚ü®x, hj‚ü©\n      exact (mul_nonneg_iff_left_nonneg_of_pos (mem_Ioi.1 h'j)).1 this\n    have Œ¥pos := eventually_mem_of_tendsto_nhdsWithin Œ¥lim\n    replace Œ¥lim := tendsto_nhds_of_tendsto_nhdsWithin Œ¥lim\n    replace hK : 0 < K + 1 := by linarith\n    apply (((Metric.tendsto_nhds.mp Œ¥lim _ (div_pos hŒµ hK)).and Œ¥pos).and xmem).mono\n    rintro j ‚ü®‚ü®hjŒµ, hj‚ÇÄ : 0 < Œ¥ j‚ü©, hx‚ü© y hy\n    replace hjŒµ : (K + 1) * Œ¥ j < Œµ := by\n      simpa [abs_eq_self.mpr hj‚ÇÄ.le] using (lt_div_iff‚ÇÄ' hK).mp hjŒµ\n    simp only [mem_closedBall] at hx hy ‚ä¢\n    linarith [dist_triangle_right y x (w j)]\n\n"}
{"name":"IsUnifLocDoublingMeasure.ae_tendsto_measure_inter_div","module":"Mathlib.MeasureTheory.Covering.DensityTheorem","initialProofState":"Œ± : Type u_1\ninst‚úù‚Åµ : PseudoMetricSpace Œ±\ninst‚úù‚Å¥ : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù¬≥ : IsUnifLocDoublingMeasure Œº\ninst‚úù¬≤ : SecondCountableTopology Œ±\ninst‚úù¬π : BorelSpace Œ±\ninst‚úù : MeasureTheory.IsLocallyFiniteMeasure Œº\nS : Set Œ±\nK : Real\n‚ä¢ Filter.Eventually (fun x => ‚àÄ {Œπ : Type u_3} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí Real), Filter.Tendsto Œ¥ l (nhdsWithin 0 (Set.Ioi 0)) ‚Üí Filter.Eventually (fun j => Membership.mem (Metric.closedBall (w j) (HMul.hMul K (Œ¥ j))) x) l ‚Üí Filter.Tendsto (fun j => HDiv.hDiv (Œº (Inter.inter S (Metric.closedBall (w j) (Œ¥ j)))) (Œº (Metric.closedBall (w j) (Œ¥ j)))) l (nhds 1)) (MeasureTheory.ae (Œº.restrict S))","decl":"/-- A version of **Lebesgue's density theorem** for a sequence of closed balls whose centers are\nnot required to be fixed.\n\nSee also `Besicovitch.ae_tendsto_measure_inter_div`. -/\ntheorem ae_tendsto_measure_inter_div (S : Set Œ±) (K : ‚Ñù) : ‚àÄ·µê x ‚àÇŒº.restrict S,\n    ‚àÄ {Œπ : Type*} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù) (_ : Tendsto Œ¥ l (ùìù[>] 0))\n      (_ : ‚àÄ·∂† j in l, x ‚àà closedBall (w j) (K * Œ¥ j)),\n      Tendsto (fun j => Œº (S ‚à© closedBall (w j) (Œ¥ j)) / Œº (closedBall (w j) (Œ¥ j))) l (ùìù 1) := by\n  filter_upwards [(vitaliFamily Œº K).ae_tendsto_measure_inter_div S] with x hx Œπ l w Œ¥ Œ¥lim\n    xmem using hx.comp (tendsto_closedBall_filterAt Œº _ _ Œ¥lim xmem)\n\n"}
{"name":"IsUnifLocDoublingMeasure.ae_tendsto_average_norm_sub","module":"Mathlib.MeasureTheory.Covering.DensityTheorem","initialProofState":"Œ± : Type u_1\ninst‚úù‚Å∂ : PseudoMetricSpace Œ±\ninst‚úù‚Åµ : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù‚Å¥ : IsUnifLocDoublingMeasure Œº\ninst‚úù¬≥ : SecondCountableTopology Œ±\ninst‚úù¬≤ : BorelSpace Œ±\ninst‚úù¬π : MeasureTheory.IsLocallyFiniteMeasure Œº\nE : Type u_2\ninst‚úù : NormedAddCommGroup E\nf : Œ± ‚Üí E\nhf : MeasureTheory.LocallyIntegrable f Œº\nK : Real\n‚ä¢ Filter.Eventually (fun x => ‚àÄ {Œπ : Type u_3} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí Real), Filter.Tendsto Œ¥ l (nhdsWithin 0 (Set.Ioi 0)) ‚Üí Filter.Eventually (fun j => Membership.mem (Metric.closedBall (w j) (HMul.hMul K (Œ¥ j))) x) l ‚Üí Filter.Tendsto (fun j => MeasureTheory.average (Œº.restrict (Metric.closedBall (w j) (Œ¥ j))) fun y => Norm.norm (HSub.hSub (f y) (f x))) l (nhds 0)) (MeasureTheory.ae Œº)","decl":"/-- A version of **Lebesgue differentiation theorem** for a sequence of closed balls whose\ncenters are not required to be fixed. -/\ntheorem ae_tendsto_average_norm_sub {f : Œ± ‚Üí E} (hf : LocallyIntegrable f Œº) (K : ‚Ñù) : ‚àÄ·µê x ‚àÇŒº,\n    ‚àÄ {Œπ : Type*} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù) (_ : Tendsto Œ¥ l (ùìù[>] 0))\n      (_ : ‚àÄ·∂† j in l, x ‚àà closedBall (w j) (K * Œ¥ j)),\n      Tendsto (fun j => ‚®ç y in closedBall (w j) (Œ¥ j), ‚Äñf y - f x‚Äñ ‚àÇŒº) l (ùìù 0) := by\n  filter_upwards [(vitaliFamily Œº K).ae_tendsto_average_norm_sub hf] with x hx Œπ l w Œ¥ Œ¥lim\n    xmem using hx.comp (tendsto_closedBall_filterAt Œº _ _ Œ¥lim xmem)\n\n"}
{"name":"IsUnifLocDoublingMeasure.ae_tendsto_average","module":"Mathlib.MeasureTheory.Covering.DensityTheorem","initialProofState":"Œ± : Type u_1\ninst‚úù‚Å∏ : PseudoMetricSpace Œ±\ninst‚úù‚Å∑ : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\ninst‚úù‚Å∂ : IsUnifLocDoublingMeasure Œº\ninst‚úù‚Åµ : SecondCountableTopology Œ±\ninst‚úù‚Å¥ : BorelSpace Œ±\ninst‚úù¬≥ : MeasureTheory.IsLocallyFiniteMeasure Œº\nE : Type u_2\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : CompleteSpace E\nf : Œ± ‚Üí E\nhf : MeasureTheory.LocallyIntegrable f Œº\nK : Real\n‚ä¢ Filter.Eventually (fun x => ‚àÄ {Œπ : Type u_3} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí Real), Filter.Tendsto Œ¥ l (nhdsWithin 0 (Set.Ioi 0)) ‚Üí Filter.Eventually (fun j => Membership.mem (Metric.closedBall (w j) (HMul.hMul K (Œ¥ j))) x) l ‚Üí Filter.Tendsto (fun j => MeasureTheory.average (Œº.restrict (Metric.closedBall (w j) (Œ¥ j))) fun y => f y) l (nhds (f x))) (MeasureTheory.ae Œº)","decl":"/-- A version of **Lebesgue differentiation theorem** for a sequence of closed balls whose\ncenters are not required to be fixed. -/\ntheorem ae_tendsto_average [NormedSpace ‚Ñù E] [CompleteSpace E]\n    {f : Œ± ‚Üí E} (hf : LocallyIntegrable f Œº) (K : ‚Ñù) : ‚àÄ·µê x ‚àÇŒº,\n      ‚àÄ {Œπ : Type*} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù) (_ : Tendsto Œ¥ l (ùìù[>] 0))\n        (_ : ‚àÄ·∂† j in l, x ‚àà closedBall (w j) (K * Œ¥ j)),\n        Tendsto (fun j => ‚®ç y in closedBall (w j) (Œ¥ j), f y ‚àÇŒº) l (ùìù (f x)) := by\n  filter_upwards [(vitaliFamily Œº K).ae_tendsto_average hf] with x hx Œπ l w Œ¥ Œ¥lim xmem using\n    hx.comp (tendsto_closedBall_filterAt Œº _ _ Œ¥lim xmem)\n\n"}
