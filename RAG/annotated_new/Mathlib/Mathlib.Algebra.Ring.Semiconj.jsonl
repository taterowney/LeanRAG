{"name":"SemiconjBy.add_right","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝ : Distrib R\na x y x' y' : R\nh : SemiconjBy a x y\nh' : SemiconjBy a x' y'\n⊢ SemiconjBy a (HAdd.hAdd x x') (HAdd.hAdd y y')","decl":"@[simp]\ntheorem add_right [Distrib R] {a x y x' y' : R} (h : SemiconjBy a x y) (h' : SemiconjBy a x' y') :\n    SemiconjBy a (x + x') (y + y') := by\n  simp only [SemiconjBy, left_distrib, right_distrib, h.eq, h'.eq]\n\n"}
{"name":"SemiconjBy.add_left","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝ : Distrib R\na b x y : R\nha : SemiconjBy a x y\nhb : SemiconjBy b x y\n⊢ SemiconjBy (HAdd.hAdd a b) x y","decl":"@[simp]\ntheorem add_left [Distrib R] {a b x y : R} (ha : SemiconjBy a x y) (hb : SemiconjBy b x y) :\n    SemiconjBy (a + b) x y := by\n  simp only [SemiconjBy, left_distrib, right_distrib, ha.eq, hb.eq]\n\n"}
{"name":"SemiconjBy.neg_right","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na x y : R\nh : SemiconjBy a x y\n⊢ SemiconjBy a (Neg.neg x) (Neg.neg y)","decl":"theorem neg_right (h : SemiconjBy a x y) : SemiconjBy a (-x) (-y) := by\n  simp only [SemiconjBy, h.eq, neg_mul, mul_neg]\n\n"}
{"name":"SemiconjBy.neg_right_iff","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na x y : R\n⊢ Iff (SemiconjBy a (Neg.neg x) (Neg.neg y)) (SemiconjBy a x y)","decl":"@[simp]\ntheorem neg_right_iff : SemiconjBy a (-x) (-y) ↔ SemiconjBy a x y :=\n  ⟨fun h => neg_neg x ▸ neg_neg y ▸ h.neg_right, SemiconjBy.neg_right⟩\n\n"}
{"name":"SemiconjBy.neg_left","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na x y : R\nh : SemiconjBy a x y\n⊢ SemiconjBy (Neg.neg a) x y","decl":"theorem neg_left (h : SemiconjBy a x y) : SemiconjBy (-a) x y := by\n  simp only [SemiconjBy, h.eq, neg_mul, mul_neg]\n\n"}
{"name":"SemiconjBy.neg_left_iff","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na x y : R\n⊢ Iff (SemiconjBy (Neg.neg a) x y) (SemiconjBy a x y)","decl":"@[simp]\ntheorem neg_left_iff : SemiconjBy (-a) x y ↔ SemiconjBy a x y :=\n  ⟨fun h => neg_neg a ▸ h.neg_left, SemiconjBy.neg_left⟩\n\n"}
{"name":"SemiconjBy.neg_one_right","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝¹ : MulOneClass R\ninst✝ : HasDistribNeg R\na : R\n⊢ SemiconjBy a (-1) (-1)","decl":"theorem neg_one_right (a : R) : SemiconjBy a (-1) (-1) := by simp\n\n"}
{"name":"SemiconjBy.neg_one_left","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝¹ : MulOneClass R\ninst✝ : HasDistribNeg R\nx : R\n⊢ SemiconjBy (-1) x x","decl":"theorem neg_one_left (x : R) : SemiconjBy (-1) x x := by simp\n\n"}
{"name":"SemiconjBy.sub_right","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\na x y x' y' : R\nh : SemiconjBy a x y\nh' : SemiconjBy a x' y'\n⊢ SemiconjBy a (HSub.hSub x x') (HSub.hSub y y')","decl":"@[simp]\ntheorem sub_right (h : SemiconjBy a x y) (h' : SemiconjBy a x' y') :\n    SemiconjBy a (x - x') (y - y') := by\n  simpa only [sub_eq_add_neg] using h.add_right h'.neg_right\n\n"}
{"name":"SemiconjBy.sub_left","module":"Mathlib.Algebra.Ring.Semiconj","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\na b x y : R\nha : SemiconjBy a x y\nhb : SemiconjBy b x y\n⊢ SemiconjBy (HSub.hSub a b) x y","decl":"@[simp]\ntheorem sub_left (ha : SemiconjBy a x y) (hb : SemiconjBy b x y) :\n    SemiconjBy (a - b) x y := by\n  simpa only [sub_eq_add_neg] using ha.add_left hb.neg_left\n\n"}
