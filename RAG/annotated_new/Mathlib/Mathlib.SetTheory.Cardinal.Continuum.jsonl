{"name":"Cardinal.two_power_aleph0","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HPow.hPow 2 Cardinal.aleph0) Cardinal.continuum","decl":"@[simp]\ntheorem two_power_aleph0 : 2 ^ ℵ₀ = 𝔠 :=\n  rfl\n\n"}
{"name":"Cardinal.lift_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (Cardinal.lift.{v, u_1} Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem lift_continuum : lift.{v} 𝔠 = 𝔠 := by\n  rw [← two_power_aleph0, lift_two_power, lift_aleph0, two_power_aleph0]\n\n"}
{"name":"Cardinal.continuum_le_lift","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"c : Cardinal.{u}\n⊢ Iff (LE.le Cardinal.continuum (Cardinal.lift.{v, u} c)) (LE.le Cardinal.continuum c)","decl":"@[simp]\ntheorem continuum_le_lift {c : Cardinal.{u}} : 𝔠 ≤ lift.{v} c ↔ 𝔠 ≤ c := by\n  rw [← lift_continuum.{v, u}, lift_le]\n\n"}
{"name":"Cardinal.lift_le_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"c : Cardinal.{u}\n⊢ Iff (LE.le (Cardinal.lift.{v, u} c) Cardinal.continuum) (LE.le c Cardinal.continuum)","decl":"@[simp]\ntheorem lift_le_continuum {c : Cardinal.{u}} : lift.{v} c ≤ 𝔠 ↔ c ≤ 𝔠 := by\n  rw [← lift_continuum.{v, u}, lift_le]\n\n"}
{"name":"Cardinal.continuum_lt_lift","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"c : Cardinal.{u}\n⊢ Iff (LT.lt Cardinal.continuum (Cardinal.lift.{v, u} c)) (LT.lt Cardinal.continuum c)","decl":"@[simp]\ntheorem continuum_lt_lift {c : Cardinal.{u}} : 𝔠 < lift.{v} c ↔ 𝔠 < c := by\n  rw [← lift_continuum.{v, u}, lift_lt]\n\n"}
{"name":"Cardinal.lift_lt_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"c : Cardinal.{u}\n⊢ Iff (LT.lt (Cardinal.lift.{v, u} c) Cardinal.continuum) (LT.lt c Cardinal.continuum)","decl":"@[simp]\ntheorem lift_lt_continuum {c : Cardinal.{u}} : lift.{v} c < 𝔠 ↔ c < 𝔠 := by\n  rw [← lift_continuum.{v, u}, lift_lt]\n\n"}
{"name":"Cardinal.aleph0_lt_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ LT.lt Cardinal.aleph0 Cardinal.continuum","decl":"theorem aleph0_lt_continuum : ℵ₀ < 𝔠 :=\n  cantor ℵ₀\n\n"}
{"name":"Cardinal.aleph0_le_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ LE.le Cardinal.aleph0 Cardinal.continuum","decl":"theorem aleph0_le_continuum : ℵ₀ ≤ 𝔠 :=\n  aleph0_lt_continuum.le\n\n"}
{"name":"Cardinal.beth_one","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (Cardinal.beth 1) Cardinal.continuum","decl":"@[simp]\ntheorem beth_one : ℶ_ 1 = 𝔠 := by simpa using beth_succ 0\n\n"}
{"name":"Cardinal.nat_lt_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\n⊢ LT.lt (↑n) Cardinal.continuum","decl":"theorem nat_lt_continuum (n : ℕ) : ↑n < 𝔠 :=\n  (nat_lt_aleph0 n).trans aleph0_lt_continuum\n\n"}
{"name":"Cardinal.mk_set_nat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (Cardinal.mk (Set Nat)) Cardinal.continuum","decl":"theorem mk_set_nat : #(Set ℕ) = 𝔠 := by simp\n\n"}
{"name":"Cardinal.continuum_pos","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ LT.lt 0 Cardinal.continuum","decl":"theorem continuum_pos : 0 < 𝔠 :=\n  nat_lt_continuum 0\n\n"}
{"name":"Cardinal.continuum_ne_zero","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Ne Cardinal.continuum 0","decl":"theorem continuum_ne_zero : 𝔠 ≠ 0 :=\n  continuum_pos.ne'\n\n"}
{"name":"Cardinal.aleph_one_le_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ LE.le (Cardinal.aleph 1) Cardinal.continuum","decl":"theorem aleph_one_le_continuum : ℵ₁ ≤ 𝔠 := by\n  rw [← succ_aleph0]\n  exact Order.succ_le_of_lt aleph0_lt_continuum\n\n"}
{"name":"Cardinal.continuum_toNat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (Cardinal.toNat Cardinal.continuum) 0","decl":"@[simp]\ntheorem continuum_toNat : toNat continuum = 0 :=\n  toNat_apply_of_aleph0_le aleph0_le_continuum\n\n"}
{"name":"Cardinal.continuum_toENat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (Cardinal.toENat Cardinal.continuum) Top.top","decl":"@[simp]\ntheorem continuum_toENat : toENat continuum = ⊤ :=\n  (toENat_eq_top.2 aleph0_le_continuum)\n\n"}
{"name":"Cardinal.aleph0_add_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HAdd.hAdd Cardinal.aleph0 Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem aleph0_add_continuum : ℵ₀ + 𝔠 = 𝔠 :=\n  add_eq_right aleph0_le_continuum aleph0_le_continuum\n\n"}
{"name":"Cardinal.continuum_add_aleph0","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HAdd.hAdd Cardinal.continuum Cardinal.aleph0) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_add_aleph0 : 𝔠 + ℵ₀ = 𝔠 :=\n  (add_comm _ _).trans aleph0_add_continuum\n\n"}
{"name":"Cardinal.continuum_add_self","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HAdd.hAdd Cardinal.continuum Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_add_self : 𝔠 + 𝔠 = 𝔠 :=\n  add_eq_self aleph0_le_continuum\n\n"}
{"name":"Cardinal.nat_add_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd (↑n) Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem nat_add_continuum (n : ℕ) : ↑n + 𝔠 = 𝔠 :=\n  nat_add_eq n aleph0_le_continuum\n\n"}
{"name":"Cardinal.continuum_add_nat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd Cardinal.continuum ↑n) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_add_nat (n : ℕ) : 𝔠 + n = 𝔠 :=\n  (add_comm _ _).trans (nat_add_continuum n)\n\n"}
{"name":"Cardinal.ofNat_add_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (HAdd.hAdd (OfNat.ofNat n) Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem ofNat_add_continuum {n : ℕ} [Nat.AtLeastTwo n] : ofNat(n) + 𝔠 = 𝔠 :=\n  nat_add_continuum n\n\n"}
{"name":"Cardinal.continuum_add_ofNat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (HAdd.hAdd Cardinal.continuum (OfNat.ofNat n)) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_add_ofNat {n : ℕ} [Nat.AtLeastTwo n] : 𝔠 + ofNat(n) = 𝔠 :=\n  continuum_add_nat n\n\n"}
{"name":"Cardinal.continuum_mul_self","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HMul.hMul Cardinal.continuum Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_mul_self : 𝔠 * 𝔠 = 𝔠 :=\n  mul_eq_left aleph0_le_continuum le_rfl continuum_ne_zero\n\n"}
{"name":"Cardinal.continuum_mul_aleph0","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HMul.hMul Cardinal.continuum Cardinal.aleph0) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_mul_aleph0 : 𝔠 * ℵ₀ = 𝔠 :=\n  mul_eq_left aleph0_le_continuum aleph0_le_continuum aleph0_ne_zero\n\n"}
{"name":"Cardinal.aleph0_mul_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HMul.hMul Cardinal.aleph0 Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem aleph0_mul_continuum : ℵ₀ * 𝔠 = 𝔠 :=\n  (mul_comm _ _).trans continuum_mul_aleph0\n\n"}
{"name":"Cardinal.nat_mul_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\nhn : Ne n 0\n⊢ Eq (HMul.hMul (↑n) Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem nat_mul_continuum {n : ℕ} (hn : n ≠ 0) : ↑n * 𝔠 = 𝔠 :=\n  mul_eq_right aleph0_le_continuum (nat_lt_continuum n).le (Nat.cast_ne_zero.2 hn)\n\n"}
{"name":"Cardinal.continuum_mul_nat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\nhn : Ne n 0\n⊢ Eq (HMul.hMul Cardinal.continuum ↑n) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_mul_nat {n : ℕ} (hn : n ≠ 0) : 𝔠 * n = 𝔠 :=\n  (mul_comm _ _).trans (nat_mul_continuum hn)\n\n"}
{"name":"Cardinal.ofNat_mul_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (HMul.hMul (OfNat.ofNat n) Cardinal.continuum) Cardinal.continuum","decl":"@[simp]\ntheorem ofNat_mul_continuum {n : ℕ} [Nat.AtLeastTwo n] : ofNat(n) * 𝔠 = 𝔠 :=\n  nat_mul_continuum (OfNat.ofNat_ne_zero n)\n\n"}
{"name":"Cardinal.continuum_mul_ofNat","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (HMul.hMul Cardinal.continuum (OfNat.ofNat n)) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_mul_ofNat {n : ℕ} [Nat.AtLeastTwo n] : 𝔠 * ofNat(n) = 𝔠 :=\n  continuum_mul_nat (OfNat.ofNat_ne_zero n)\n\n"}
{"name":"Cardinal.aleph0_power_aleph0","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HPow.hPow Cardinal.aleph0 Cardinal.aleph0) Cardinal.continuum","decl":"@[simp]\ntheorem aleph0_power_aleph0 : ℵ₀ ^ ℵ₀ = 𝔠 :=\n  power_self_eq le_rfl\n\n"}
{"name":"Cardinal.nat_power_aleph0","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"n : Nat\nhn : LE.le 2 n\n⊢ Eq (HPow.hPow (↑n) Cardinal.aleph0) Cardinal.continuum","decl":"@[simp]\ntheorem nat_power_aleph0 {n : ℕ} (hn : 2 ≤ n) : n ^ ℵ₀ = 𝔠 :=\n  nat_power_eq le_rfl hn\n\n"}
{"name":"Cardinal.continuum_power_aleph0","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"⊢ Eq (HPow.hPow Cardinal.continuum Cardinal.aleph0) Cardinal.continuum","decl":"@[simp]\ntheorem continuum_power_aleph0 : 𝔠 ^ ℵ₀ = 𝔠 := by\n  rw [← two_power_aleph0, ← power_mul, mul_eq_left le_rfl le_rfl aleph0_ne_zero]\n\n"}
{"name":"Cardinal.power_aleph0_of_le_continuum","module":"Mathlib.SetTheory.Cardinal.Continuum","initialProofState":"x : Cardinal.{u_1}\nh₁ : LE.le 2 x\nh₂ : LE.le x Cardinal.continuum\n⊢ Eq (HPow.hPow x Cardinal.aleph0) Cardinal.continuum","decl":"theorem power_aleph0_of_le_continuum {x : Cardinal} (h₁ : 2 ≤ x) (h₂ : x ≤ 𝔠) : x ^ ℵ₀ = 𝔠 := by\n  apply le_antisymm\n  · rw [← continuum_power_aleph0]\n    exact power_le_power_right h₂\n  · rw [← two_power_aleph0]\n    exact power_le_power_right h₁\n\n"}
