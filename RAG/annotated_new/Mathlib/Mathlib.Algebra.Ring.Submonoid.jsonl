{"name":"MulMemClass.mul_right_mem_add_closure","module":"Mathlib.Algebra.Ring.Submonoid","initialProofState":"M : Type u_1\nR : Type u_2\ninst✝² : NonUnitalNonAssocSemiring R\ninst✝¹ : SetLike M R\ninst✝ : MulMemClass M R\nS : M\na b : R\nha : Membership.mem (AddSubmonoid.closure ↑S) a\nhb : Membership.mem S b\n⊢ Membership.mem (AddSubmonoid.closure ↑S) (HMul.hMul a b)","decl":"/-- The product of an element of the additive closure of a multiplicative subsemigroup `M`\nand an element of `M` is contained in the additive closure of `M`. -/\nlemma mul_right_mem_add_closure (ha : a ∈ closure (S : Set R)) (hb : b ∈ S) :\n    a * b ∈ closure (S : Set R) := by\n  induction ha using closure_induction with\n  | mem r hr => exact AddSubmonoid.mem_closure.mpr fun y hy => hy (mul_mem hr hb)\n  | one => simp only [zero_mul, zero_mem _]\n  | mul r s _ _ hr hs => simpa only [add_mul] using add_mem hr hs\n\n"}
{"name":"MulMemClass.mul_mem_add_closure","module":"Mathlib.Algebra.Ring.Submonoid","initialProofState":"M : Type u_1\nR : Type u_2\ninst✝² : NonUnitalNonAssocSemiring R\ninst✝¹ : SetLike M R\ninst✝ : MulMemClass M R\nS : M\na b : R\nha : Membership.mem (AddSubmonoid.closure ↑S) a\nhb : Membership.mem (AddSubmonoid.closure ↑S) b\n⊢ Membership.mem (AddSubmonoid.closure ↑S) (HMul.hMul a b)","decl":"/-- The product of two elements of the additive closure of a submonoid `M` is an element of the\nadditive closure of `M`. -/\nlemma mul_mem_add_closure (ha : a ∈ closure (S : Set R))\n    (hb : b ∈ closure (S : Set R)) : a * b ∈ closure (S : Set R) := by\n  induction hb using closure_induction with\n  | mem r hr => exact MulMemClass.mul_right_mem_add_closure ha hr\n  | one => simp only [mul_zero, zero_mem _]\n  | mul r s _ _ hr hs => simpa only [mul_add] using add_mem hr hs\n\n"}
{"name":"MulMemClass.mul_left_mem_add_closure","module":"Mathlib.Algebra.Ring.Submonoid","initialProofState":"M : Type u_1\nR : Type u_2\ninst✝² : NonUnitalNonAssocSemiring R\ninst✝¹ : SetLike M R\ninst✝ : MulMemClass M R\nS : M\na b : R\nha : Membership.mem S a\nhb : Membership.mem (AddSubmonoid.closure ↑S) b\n⊢ Membership.mem (AddSubmonoid.closure ↑S) (HMul.hMul a b)","decl":"/-- The product of an element of `S` and an element of the additive closure of a multiplicative\nsubmonoid `S` is contained in the additive closure of `S`. -/\nlemma mul_left_mem_add_closure (ha : a ∈ S) (hb : b ∈ closure (S : Set R)) :\n    a * b ∈ closure (S : Set R) :=\n  mul_mem_add_closure (AddSubmonoid.mem_closure.mpr fun _sT hT => hT ha) hb\n\n"}
