{"name":"Int.csSup_eq_greatest_of_bdd","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"s : Set Int\ninst✝ : DecidablePred fun x => Membership.mem s x\nb : Int\nHb : ∀ (z : Int), Membership.mem s z → LE.le z b\nHinh : Exists fun z => Membership.mem s z\n⊢ Eq (SupSet.sSup s) ↑(b.greatestOfBdd Hb Hinh)","decl":"theorem csSup_eq_greatest_of_bdd {s : Set ℤ} [DecidablePred (· ∈ s)] (b : ℤ) (Hb : ∀ z ∈ s, z ≤ b)\n    (Hinh : ∃ z : ℤ, z ∈ s) : sSup s = greatestOfBdd b Hb Hinh := by\n  have : s.Nonempty ∧ BddAbove s := ⟨Hinh, b, Hb⟩\n  simp only [sSup, this, and_self, dite_true]\n  convert (coe_greatestOfBdd_eq Hb (Classical.choose_spec (⟨b, Hb⟩ : BddAbove s)) Hinh).symm\n\n"}
{"name":"Int.csSup_empty","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"⊢ Eq (SupSet.sSup EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem csSup_empty : sSup (∅ : Set ℤ) = 0 :=\n  dif_neg (by simp)\n\n"}
{"name":"Int.csSup_of_not_bdd_above","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"s : Set Int\nh : Not (BddAbove s)\n⊢ Eq (SupSet.sSup s) 0","decl":"theorem csSup_of_not_bdd_above {s : Set ℤ} (h : ¬BddAbove s) : sSup s = 0 :=\n  dif_neg (by simp [h])\n\n-- Porting note: mathlib3 proof uses `convert dif_pos _ using 1`\n"}
{"name":"Int.csInf_eq_least_of_bdd","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"s : Set Int\ninst✝ : DecidablePred fun x => Membership.mem s x\nb : Int\nHb : ∀ (z : Int), Membership.mem s z → LE.le b z\nHinh : Exists fun z => Membership.mem s z\n⊢ Eq (InfSet.sInf s) ↑(b.leastOfBdd Hb Hinh)","decl":"theorem csInf_eq_least_of_bdd {s : Set ℤ} [DecidablePred (· ∈ s)] (b : ℤ) (Hb : ∀ z ∈ s, b ≤ z)\n    (Hinh : ∃ z : ℤ, z ∈ s) : sInf s = leastOfBdd b Hb Hinh := by\n  have : s.Nonempty ∧ BddBelow s := ⟨Hinh, b, Hb⟩\n  simp only [sInf, this, and_self, dite_true]\n  convert (coe_leastOfBdd_eq Hb (Classical.choose_spec (⟨b, Hb⟩ : BddBelow s)) Hinh).symm\n\n"}
{"name":"Int.csInf_empty","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"⊢ Eq (InfSet.sInf EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem csInf_empty : sInf (∅ : Set ℤ) = 0 :=\n  dif_neg (by simp)\n\n"}
{"name":"Int.csInf_of_not_bdd_below","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"s : Set Int\nh : Not (BddBelow s)\n⊢ Eq (InfSet.sInf s) 0","decl":"theorem csInf_of_not_bdd_below {s : Set ℤ} (h : ¬BddBelow s) : sInf s = 0 :=\n  dif_neg (by simp [h])\n\n"}
{"name":"Int.csSup_mem","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"s : Set Int\nh1 : s.Nonempty\nh2 : BddAbove s\n⊢ Membership.mem s (SupSet.sSup s)","decl":"theorem csSup_mem {s : Set ℤ} (h1 : s.Nonempty) (h2 : BddAbove s) : sSup s ∈ s := by\n  convert (greatestOfBdd _ (Classical.choose_spec h2) h1).2.1\n  exact dif_pos ⟨h1, h2⟩\n\n"}
{"name":"Int.csInf_mem","module":"Mathlib.Data.Int.ConditionallyCompleteOrder","initialProofState":"s : Set Int\nh1 : s.Nonempty\nh2 : BddBelow s\n⊢ Membership.mem s (InfSet.sInf s)","decl":"theorem csInf_mem {s : Set ℤ} (h1 : s.Nonempty) (h2 : BddBelow s) : sInf s ∈ s := by\n  convert (leastOfBdd _ (Classical.choose_spec h2) h1).2.1\n  exact dif_pos ⟨h1, h2⟩\n\n"}
