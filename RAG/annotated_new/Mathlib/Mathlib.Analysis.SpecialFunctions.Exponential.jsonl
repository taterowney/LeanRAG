{"name":"hasStrictFDerivAt_exp_zero_of_radius_pos","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nh : LT.lt 0 (NormedSpace.expSeries 𝕂 𝔸).radius\n⊢ HasStrictFDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential in a Banach algebra `𝔸` over a normed field `𝕂` has strict Fréchet derivative\n`1 : 𝔸 →L[𝕂] 𝔸` at zero, as long as it converges on a neighborhood of zero. -/\ntheorem hasStrictFDerivAt_exp_zero_of_radius_pos (h : 0 < (expSeries 𝕂 𝔸).radius) :\n    HasStrictFDerivAt (exp 𝕂) (1 : 𝔸 →L[𝕂] 𝔸) 0 := by\n  convert (hasFPowerSeriesAt_exp_zero_of_radius_pos h).hasStrictFDerivAt\n  ext x\n  change x = expSeries 𝕂 𝔸 1 fun _ => x\n  simp [expSeries_apply_eq, Nat.factorial]\n\n"}
{"name":"hasFDerivAt_exp_zero_of_radius_pos","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nh : LT.lt 0 (NormedSpace.expSeries 𝕂 𝔸).radius\n⊢ HasFDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential in a Banach algebra `𝔸` over a normed field `𝕂` has Fréchet derivative\n`1 : 𝔸 →L[𝕂] 𝔸` at zero, as long as it converges on a neighborhood of zero. -/\ntheorem hasFDerivAt_exp_zero_of_radius_pos (h : 0 < (expSeries 𝕂 𝔸).radius) :\n    HasFDerivAt (exp 𝕂) (1 : 𝔸 →L[𝕂] 𝔸) 0 :=\n  (hasStrictFDerivAt_exp_zero_of_radius_pos h).hasFDerivAt\n\n"}
{"name":"hasFDerivAt_exp_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : NormedCommRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CharZero 𝕂\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ HasFDerivAt (NormedSpace.exp 𝕂) (HSMul.hSMul (NormedSpace.exp 𝕂 x) 1) x","decl":"/-- The exponential map in a commutative Banach algebra `𝔸` over a normed field `𝕂` of\ncharacteristic zero has Fréchet derivative `NormedSpace.exp 𝕂 x • 1 : 𝔸 →L[𝕂] 𝔸`\nat any point `x`in the disk of convergence. -/\ntheorem hasFDerivAt_exp_of_mem_ball [CharZero 𝕂] {x : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasFDerivAt (exp 𝕂) (exp 𝕂 x • (1 : 𝔸 →L[𝕂] 𝔸)) x := by\n  have hpos : 0 < (expSeries 𝕂 𝔸).radius := (zero_le _).trans_lt hx\n  rw [hasFDerivAt_iff_isLittleO_nhds_zero]\n  suffices\n    (fun h => exp 𝕂 x * (exp 𝕂 (0 + h) - exp 𝕂 0 - ContinuousLinearMap.id 𝕂 𝔸 h)) =ᶠ[𝓝 0] fun h =>\n      exp 𝕂 (x + h) - exp 𝕂 x - exp 𝕂 x • ContinuousLinearMap.id 𝕂 𝔸 h by\n    refine (IsLittleO.const_mul_left ?_ _).congr' this (EventuallyEq.refl _ _)\n    rw [← hasFDerivAt_iff_isLittleO_nhds_zero]\n    exact hasFDerivAt_exp_zero_of_radius_pos hpos\n  have : ∀ᶠ h in 𝓝 (0 : 𝔸), h ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius :=\n    EMetric.ball_mem_nhds _ hpos\n  filter_upwards [this] with _ hh\n  rw [exp_add_of_mem_ball hx hh, exp_zero, zero_add, ContinuousLinearMap.id_apply, smul_eq_mul]\n  ring\n\n"}
{"name":"hasStrictFDerivAt_exp_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : NormedCommRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CharZero 𝕂\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ HasStrictFDerivAt (NormedSpace.exp 𝕂) (HSMul.hSMul (NormedSpace.exp 𝕂 x) 1) x","decl":"/-- The exponential map in a commutative Banach algebra `𝔸` over a normed field `𝕂` of\ncharacteristic zero has strict Fréchet derivative `NormedSpace.exp 𝕂 x • 1 : 𝔸 →L[𝕂] 𝔸`\nat any point `x` in the disk of convergence. -/\ntheorem hasStrictFDerivAt_exp_of_mem_ball [CharZero 𝕂] {x : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasStrictFDerivAt (exp 𝕂) (exp 𝕂 x • (1 : 𝔸 →L[𝕂] 𝔸)) x :=\n  let ⟨_, hp⟩ := analyticAt_exp_of_mem_ball x hx\n  hp.hasFDerivAt.unique (hasFDerivAt_exp_of_mem_ball hx) ▸ hp.hasStrictFDerivAt\n\n"}
{"name":"hasStrictDerivAt_exp_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝² : NontriviallyNormedField 𝕂\ninst✝¹ : CompleteSpace 𝕂\ninst✝ : CharZero 𝕂\nx : 𝕂\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝕂).radius) x\n⊢ HasStrictDerivAt (NormedSpace.exp 𝕂) (NormedSpace.exp 𝕂 x) x","decl":"/-- The exponential map in a complete normed field `𝕂` of characteristic zero has strict derivative\n`NormedSpace.exp 𝕂 x` at any point `x` in the disk of convergence. -/\ntheorem hasStrictDerivAt_exp_of_mem_ball [CharZero 𝕂] {x : 𝕂}\n    (hx : x ∈ EMetric.ball (0 : 𝕂) (expSeries 𝕂 𝕂).radius) :\n    HasStrictDerivAt (exp 𝕂) (exp 𝕂 x) x := by\n  simpa using (hasStrictFDerivAt_exp_of_mem_ball hx).hasStrictDerivAt\n\n"}
{"name":"hasDerivAt_exp_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝² : NontriviallyNormedField 𝕂\ninst✝¹ : CompleteSpace 𝕂\ninst✝ : CharZero 𝕂\nx : 𝕂\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝕂).radius) x\n⊢ HasDerivAt (NormedSpace.exp 𝕂) (NormedSpace.exp 𝕂 x) x","decl":"/-- The exponential map in a complete normed field `𝕂` of characteristic zero has derivative\n`NormedSpace.exp 𝕂 x` at any point `x` in the disk of convergence. -/\ntheorem hasDerivAt_exp_of_mem_ball [CharZero 𝕂] {x : 𝕂}\n    (hx : x ∈ EMetric.ball (0 : 𝕂) (expSeries 𝕂 𝕂).radius) : HasDerivAt (exp 𝕂) (exp 𝕂 x) x :=\n  (hasStrictDerivAt_exp_of_mem_ball hx).hasDerivAt\n\n"}
{"name":"hasStrictDerivAt_exp_zero_of_radius_pos","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕂\ninst✝ : CompleteSpace 𝕂\nh : LT.lt 0 (NormedSpace.expSeries 𝕂 𝕂).radius\n⊢ HasStrictDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential map in a complete normed field `𝕂` of characteristic zero has strict derivative\n`1` at zero, as long as it converges on a neighborhood of zero. -/\ntheorem hasStrictDerivAt_exp_zero_of_radius_pos (h : 0 < (expSeries 𝕂 𝕂).radius) :\n    HasStrictDerivAt (exp 𝕂) (1 : 𝕂) 0 :=\n  (hasStrictFDerivAt_exp_zero_of_radius_pos h).hasStrictDerivAt\n\n"}
{"name":"hasDerivAt_exp_zero_of_radius_pos","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕂\ninst✝ : CompleteSpace 𝕂\nh : LT.lt 0 (NormedSpace.expSeries 𝕂 𝕂).radius\n⊢ HasDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential map in a complete normed field `𝕂` of characteristic zero has derivative\n`1` at zero, as long as it converges on a neighborhood of zero. -/\ntheorem hasDerivAt_exp_zero_of_radius_pos (h : 0 < (expSeries 𝕂 𝕂).radius) :\n    HasDerivAt (exp 𝕂) (1 : 𝕂) 0 :=\n  (hasStrictDerivAt_exp_zero_of_radius_pos h).hasDerivAt\n\n"}
{"name":"hasStrictFDerivAt_exp_zero","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\n⊢ HasStrictFDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential in a Banach algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ` has strict Fréchet derivative\n`1 : 𝔸 →L[𝕂] 𝔸` at zero. -/\ntheorem hasStrictFDerivAt_exp_zero : HasStrictFDerivAt (exp 𝕂) (1 : 𝔸 →L[𝕂] 𝔸) 0 :=\n  hasStrictFDerivAt_exp_zero_of_radius_pos (expSeries_radius_pos 𝕂 𝔸)\n\n"}
{"name":"hasFDerivAt_exp_zero","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\n⊢ HasFDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential in a Banach algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ` has Fréchet derivative\n`1 : 𝔸 →L[𝕂] 𝔸` at zero. -/\ntheorem hasFDerivAt_exp_zero : HasFDerivAt (exp 𝕂) (1 : 𝔸 →L[𝕂] 𝔸) 0 :=\n  hasStrictFDerivAt_exp_zero.hasFDerivAt\n\n"}
{"name":"hasStrictFDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedCommRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ HasStrictFDerivAt (NormedSpace.exp 𝕂) (HSMul.hSMul (NormedSpace.exp 𝕂 x) 1) x","decl":"/-- The exponential map in a commutative Banach algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ` has strict\nFréchet derivative `NormedSpace.exp 𝕂 x • 1 : 𝔸 →L[𝕂] 𝔸` at any point `x`. -/\ntheorem hasStrictFDerivAt_exp {x : 𝔸} : HasStrictFDerivAt (exp 𝕂) (exp 𝕂 x • (1 : 𝔸 →L[𝕂] 𝔸)) x :=\n  hasStrictFDerivAt_exp_of_mem_ball ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"hasFDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedCommRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ HasFDerivAt (NormedSpace.exp 𝕂) (HSMul.hSMul (NormedSpace.exp 𝕂 x) 1) x","decl":"/-- The exponential map in a commutative Banach algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ` has\nFréchet derivative `NormedSpace.exp 𝕂 x • 1 : 𝔸 →L[𝕂] 𝔸` at any point `x`. -/\ntheorem hasFDerivAt_exp {x : 𝔸} : HasFDerivAt (exp 𝕂) (exp 𝕂 x • (1 : 𝔸 →L[𝕂] 𝔸)) x :=\n  hasStrictFDerivAt_exp.hasFDerivAt\n\n"}
{"name":"hasStrictDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝ : RCLike 𝕂\nx : 𝕂\n⊢ HasStrictDerivAt (NormedSpace.exp 𝕂) (NormedSpace.exp 𝕂 x) x","decl":"/-- The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has strict derivative `NormedSpace.exp 𝕂 x`\nat any point `x`. -/\ntheorem hasStrictDerivAt_exp {x : 𝕂} : HasStrictDerivAt (exp 𝕂) (exp 𝕂 x) x :=\n  hasStrictDerivAt_exp_of_mem_ball ((expSeries_radius_eq_top 𝕂 𝕂).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"hasDerivAt_exp","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝ : RCLike 𝕂\nx : 𝕂\n⊢ HasDerivAt (NormedSpace.exp 𝕂) (NormedSpace.exp 𝕂 x) x","decl":"/-- The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has derivative `NormedSpace.exp 𝕂 x`\nat any point `x`. -/\ntheorem hasDerivAt_exp {x : 𝕂} : HasDerivAt (exp 𝕂) (exp 𝕂 x) x :=\n  hasStrictDerivAt_exp.hasDerivAt\n\n"}
{"name":"hasStrictDerivAt_exp_zero","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝ : RCLike 𝕂\n⊢ HasStrictDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has strict derivative `1` at zero. -/\ntheorem hasStrictDerivAt_exp_zero : HasStrictDerivAt (exp 𝕂) (1 : 𝕂) 0 :=\n  hasStrictDerivAt_exp_zero_of_radius_pos (expSeries_radius_pos 𝕂 𝕂)\n\n"}
{"name":"hasDerivAt_exp_zero","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝ : RCLike 𝕂\n⊢ HasDerivAt (NormedSpace.exp 𝕂) 1 0","decl":"/-- The exponential map in `𝕂 = ℝ` or `𝕂 = ℂ` has derivative `1` at zero. -/\ntheorem hasDerivAt_exp_zero : HasDerivAt (exp 𝕂) (1 : 𝕂) 0 :=\n  hasStrictDerivAt_exp_zero.hasDerivAt\n\n"}
{"name":"Complex.exp_eq_exp_ℂ","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"⊢ Eq Complex.exp (NormedSpace.exp Complex)","decl":"theorem Complex.exp_eq_exp_ℂ : Complex.exp = NormedSpace.exp ℂ := by\n  refine funext fun x => ?_\n  rw [Complex.exp, exp_eq_tsum_div]\n  have : CauSeq.IsComplete ℂ norm := Complex.instIsComplete\n  exact tendsto_nhds_unique x.exp'.tendsto_limit (expSeries_div_summable ℝ x).hasSum.tendsto_sum_nat\n\n"}
{"name":"Real.exp_eq_exp_ℝ","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"⊢ Eq Real.exp (NormedSpace.exp Real)","decl":"theorem Real.exp_eq_exp_ℝ : Real.exp = NormedSpace.exp ℝ := by\n  ext x; exact mod_cast congr_fun Complex.exp_eq_exp_ℂ x\n\n"}
{"name":"hasFDerivAt_exp_smul_const_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁹ : NontriviallyNormedField 𝕂\ninst✝⁸ : CharZero 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedSpace 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HSMul.hSMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) (ContinuousLinearMap.smulRight 1 x)) t","decl":"theorem hasFDerivAt_exp_smul_const_of_mem_ball (x : 𝔸) (t : 𝕊)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x)) (exp 𝕂 (t • x) • (1 : 𝕊 →L[𝕂] 𝕊).smulRight x) t := by\n  -- TODO: prove this via `hasFDerivAt_exp_of_mem_ball` using the commutative ring\n  -- `Algebra.elementalAlgebra 𝕊 x`. See https://github.com/leanprover-community/mathlib3/pull/19062 for discussion.\n  have hpos : 0 < (expSeries 𝕂 𝔸).radius := (zero_le _).trans_lt htx\n  rw [hasFDerivAt_iff_isLittleO_nhds_zero]\n  suffices (fun (h : 𝕊) => exp 𝕂 (t • x) *\n      (exp 𝕂 ((0 + h) • x) - exp 𝕂 ((0 : 𝕊) • x) - ((1 : 𝕊 →L[𝕂] 𝕊).smulRight x) h)) =ᶠ[𝓝 0]\n        fun h =>\n          exp 𝕂 ((t + h) • x) - exp 𝕂 (t • x) - (exp 𝕂 (t • x) • (1 : 𝕊 →L[𝕂] 𝕊).smulRight x) h by\n    apply (IsLittleO.const_mul_left _ _).congr' this (EventuallyEq.refl _ _)\n    rw [← hasFDerivAt_iff_isLittleO_nhds_zero (f := fun u => exp 𝕂 (u • x))\n      (f' := (1 : 𝕊 →L[𝕂] 𝕊).smulRight x) (x := 0)]\n    have : HasFDerivAt (exp 𝕂) (1 : 𝔸 →L[𝕂] 𝔸) ((1 : 𝕊 →L[𝕂] 𝕊).smulRight x 0) := by\n      rw [ContinuousLinearMap.smulRight_apply, ContinuousLinearMap.one_apply, zero_smul]\n      exact hasFDerivAt_exp_zero_of_radius_pos hpos\n    exact this.comp 0 ((1 : 𝕊 →L[𝕂] 𝕊).smulRight x).hasFDerivAt\n  have : Tendsto (fun h : 𝕊 => h • x) (𝓝 0) (𝓝 0) := by\n    rw [← zero_smul 𝕊 x]\n    exact tendsto_id.smul_const x\n  have : ∀ᶠ h in 𝓝 (0 : 𝕊), h • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius :=\n    this.eventually (EMetric.ball_mem_nhds _ hpos)\n  filter_upwards [this] with h hh\n  have : Commute (t • x) (h • x) := ((Commute.refl x).smul_left t).smul_right h\n  rw [add_smul t h, exp_add_of_commute_of_mem_ball this htx hh, zero_add, zero_smul, exp_zero,\n    ContinuousLinearMap.smulRight_apply, ContinuousLinearMap.one_apply,\n    ContinuousLinearMap.smul_apply, ContinuousLinearMap.smulRight_apply,\n    ContinuousLinearMap.one_apply, smul_eq_mul, mul_sub_left_distrib, mul_sub_left_distrib, mul_one]\n\n"}
{"name":"hasFDerivAt_exp_smul_const_of_mem_ball'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁹ : NontriviallyNormedField 𝕂\ninst✝⁸ : CharZero 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedSpace 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) ((ContinuousLinearMap.smulRight 1 x).smulRight (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasFDerivAt_exp_smul_const_of_mem_ball' (x : 𝔸) (t : 𝕊)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x))\n      (((1 : 𝕊 →L[𝕂] 𝕊).smulRight x).smulRight (exp 𝕂 (t • x))) t := by\n  convert hasFDerivAt_exp_smul_const_of_mem_ball 𝕂 _ _ htx using 1\n  ext t'\n  show Commute (t' • x) (exp 𝕂 (t • x))\n  exact (((Commute.refl x).smul_left t').smul_right t).exp_right 𝕂\n\n"}
{"name":"hasStrictFDerivAt_exp_smul_const_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁹ : NontriviallyNormedField 𝕂\ninst✝⁸ : CharZero 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedSpace 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasStrictFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HSMul.hSMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) (ContinuousLinearMap.smulRight 1 x)) t","decl":"theorem hasStrictFDerivAt_exp_smul_const_of_mem_ball (x : 𝔸) (t : 𝕊)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasStrictFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x))\n      (exp 𝕂 (t • x) • (1 : 𝕊 →L[𝕂] 𝕊).smulRight x) t :=\n  let ⟨_, hp⟩ := analyticAt_exp_of_mem_ball (t • x) htx\n  have deriv₁ : HasStrictFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x)) _ t :=\n    hp.hasStrictFDerivAt.comp t ((ContinuousLinearMap.id 𝕂 𝕊).smulRight x).hasStrictFDerivAt\n  have deriv₂ : HasFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x)) _ t :=\n    hasFDerivAt_exp_smul_const_of_mem_ball 𝕂 x t htx\n  deriv₁.hasFDerivAt.unique deriv₂ ▸ deriv₁\n\n"}
{"name":"hasStrictFDerivAt_exp_smul_const_of_mem_ball'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁹ : NontriviallyNormedField 𝕂\ninst✝⁸ : CharZero 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedSpace 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasStrictFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) ((ContinuousLinearMap.smulRight 1 x).smulRight (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasStrictFDerivAt_exp_smul_const_of_mem_ball' (x : 𝔸) (t : 𝕊)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasStrictFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x))\n      (((1 : 𝕊 →L[𝕂] 𝕊).smulRight x).smulRight (exp 𝕂 (t • x))) t := by\n  let ⟨_, _⟩ := analyticAt_exp_of_mem_ball (t • x) htx\n  convert hasStrictFDerivAt_exp_smul_const_of_mem_ball 𝕂 _ _ htx using 1\n  ext t'\n  show Commute (t' • x) (exp 𝕂 (t • x))\n  exact (((Commute.refl x).smul_left t').smul_right t).exp_right 𝕂\n\n"}
{"name":"hasStrictDerivAt_exp_smul_const_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : CharZero 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasStrictDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) x) t","decl":"theorem hasStrictDerivAt_exp_smul_const_of_mem_ball (x : 𝔸) (t : 𝕂)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasStrictDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (exp 𝕂 (t • x) * x) t := by\n  simpa using (hasStrictFDerivAt_exp_smul_const_of_mem_ball 𝕂 x t htx).hasStrictDerivAt\n\n"}
{"name":"hasStrictDerivAt_exp_smul_const_of_mem_ball'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : CharZero 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasStrictDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul x (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasStrictDerivAt_exp_smul_const_of_mem_ball' (x : 𝔸) (t : 𝕂)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasStrictDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (x * exp 𝕂 (t • x)) t := by\n  simpa using (hasStrictFDerivAt_exp_smul_const_of_mem_ball' 𝕂 x t htx).hasStrictDerivAt\n\n"}
{"name":"hasDerivAt_exp_smul_const_of_mem_ball","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : CharZero 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) x) t","decl":"theorem hasDerivAt_exp_smul_const_of_mem_ball (x : 𝔸) (t : 𝕂)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (exp 𝕂 (t • x) * x) t :=\n  (hasStrictDerivAt_exp_smul_const_of_mem_ball x t htx).hasDerivAt\n\n"}
{"name":"hasDerivAt_exp_smul_const_of_mem_ball'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : CharZero 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\nhtx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) (HSMul.hSMul t x)\n⊢ HasDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul x (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasDerivAt_exp_smul_const_of_mem_ball' (x : 𝔸) (t : 𝕂)\n    (htx : t • x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (x * exp 𝕂 (t • x)) t :=\n  (hasStrictDerivAt_exp_smul_const_of_mem_ball' x t htx).hasDerivAt\n\n"}
{"name":"hasFDerivAt_exp_smul_const","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁸ : RCLike 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedAlgebra 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\n⊢ HasFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HSMul.hSMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) (ContinuousLinearMap.smulRight 1 x)) t","decl":"theorem hasFDerivAt_exp_smul_const (x : 𝔸) (t : 𝕊) :\n    HasFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x)) (exp 𝕂 (t • x) • (1 : 𝕊 →L[𝕂] 𝕊).smulRight x) t :=\n  hasFDerivAt_exp_smul_const_of_mem_ball 𝕂 _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasFDerivAt_exp_smul_const'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁸ : RCLike 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedAlgebra 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\n⊢ HasFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) ((ContinuousLinearMap.smulRight 1 x).smulRight (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasFDerivAt_exp_smul_const' (x : 𝔸) (t : 𝕊) :\n    HasFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x))\n      (((1 : 𝕊 →L[𝕂] 𝕊).smulRight x).smulRight (exp 𝕂 (t • x))) t :=\n  hasFDerivAt_exp_smul_const_of_mem_ball' 𝕂 _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasStrictFDerivAt_exp_smul_const","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁸ : RCLike 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedAlgebra 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\n⊢ HasStrictFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HSMul.hSMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) (ContinuousLinearMap.smulRight 1 x)) t","decl":"theorem hasStrictFDerivAt_exp_smul_const (x : 𝔸) (t : 𝕊) :\n    HasStrictFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x))\n      (exp 𝕂 (t • x) • (1 : 𝕊 →L[𝕂] 𝕊).smulRight x) t :=\n  hasStrictFDerivAt_exp_smul_const_of_mem_ball 𝕂 _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasStrictFDerivAt_exp_smul_const'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝕊 : Type u_2\n𝔸 : Type u_3\ninst✝⁸ : RCLike 𝕂\ninst✝⁷ : NormedCommRing 𝕊\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedAlgebra 𝕂 𝕊\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : Algebra 𝕊 𝔸\ninst✝² : ContinuousSMul 𝕊 𝔸\ninst✝¹ : IsScalarTower 𝕂 𝕊 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕊\n⊢ HasStrictFDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) ((ContinuousLinearMap.smulRight 1 x).smulRight (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasStrictFDerivAt_exp_smul_const' (x : 𝔸) (t : 𝕊) :\n    HasStrictFDerivAt (fun u : 𝕊 => exp 𝕂 (u • x))\n      (((1 : 𝕊 →L[𝕂] 𝕊).smulRight x).smulRight (exp 𝕂 (t • x))) t :=\n  hasStrictFDerivAt_exp_smul_const_of_mem_ball' 𝕂 _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasStrictDerivAt_exp_smul_const","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\n⊢ HasStrictDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) x) t","decl":"theorem hasStrictDerivAt_exp_smul_const (x : 𝔸) (t : 𝕂) :\n    HasStrictDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (exp 𝕂 (t • x) * x) t :=\n  hasStrictDerivAt_exp_smul_const_of_mem_ball _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasStrictDerivAt_exp_smul_const'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\n⊢ HasStrictDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul x (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasStrictDerivAt_exp_smul_const' (x : 𝔸) (t : 𝕂) :\n    HasStrictDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (x * exp 𝕂 (t • x)) t :=\n  hasStrictDerivAt_exp_smul_const_of_mem_ball' _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasDerivAt_exp_smul_const","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\n⊢ HasDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul (NormedSpace.exp 𝕂 (HSMul.hSMul t x)) x) t","decl":"theorem hasDerivAt_exp_smul_const (x : 𝔸) (t : 𝕂) :\n    HasDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (exp 𝕂 (t • x) * x) t :=\n  hasDerivAt_exp_smul_const_of_mem_ball _ _ <| (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"hasDerivAt_exp_smul_const'","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_3\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nt : 𝕂\n⊢ HasDerivAt (fun u => NormedSpace.exp 𝕂 (HSMul.hSMul u x)) (HMul.hMul x (NormedSpace.exp 𝕂 (HSMul.hSMul t x))) t","decl":"theorem hasDerivAt_exp_smul_const' (x : 𝔸) (t : 𝕂) :\n    HasDerivAt (fun u : 𝕂 => exp 𝕂 (u • x)) (x * exp 𝕂 (t • x)) t :=\n  hasDerivAt_exp_smul_const_of_mem_ball' _ _ <|\n    (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"HasSum.exp","module":"Mathlib.Analysis.SpecialFunctions.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedCommRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nι : Type u_3\nf : ι → 𝔸\na : 𝔸\nh : HasSum f a\n⊢ HasProd (Function.comp (NormedSpace.exp 𝕂) f) (NormedSpace.exp 𝕂 a)","decl":"/-- If `f` has sum `a`, then `NormedSpace.exp ∘ f` has product `NormedSpace.exp a`. -/\nlemma HasSum.exp {ι : Type*} {f : ι → 𝔸} {a : 𝔸} (h : HasSum f a) :\n    HasProd (exp 𝕂 ∘ f) (exp 𝕂 a) :=\n  Tendsto.congr (fun s ↦ exp_sum s f) <| Tendsto.exp h\n\n"}
