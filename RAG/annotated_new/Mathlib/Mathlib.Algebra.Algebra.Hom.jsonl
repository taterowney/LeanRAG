{"name":"AlgHom.commutes'","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nself : AlgHom R A B\nr : R\n⊢ Eq ((↑↑self.toRingHom).toFun ((algebraMap R A) r)) ((algebraMap R B) r)","decl":"/-- Defining the homomorphism in the category R-Alg, denoted `A →ₐ[R] B`. -/\nstructure AlgHom (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends RingHom A B where\n  commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgHom.mk.sizeOf_spec","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\ninst✝⁵ : Semiring B\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra R B\ninst✝² : SizeOf R\ninst✝¹ : SizeOf A\ninst✝ : SizeOf B\ntoRingHom : RingHom A B\ncommutes' : ∀ (r : R), Eq ((↑↑toRingHom).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq (SizeOf.sizeOf { toRingHom := toRingHom, commutes' := commutes' }) (HAdd.hAdd 1 (SizeOf.sizeOf toRingHom))","decl":"/-- Defining the homomorphism in the category R-Alg, denoted `A →ₐ[R] B`. -/\nstructure AlgHom (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends RingHom A B where\n  commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgHom.mk.inj","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ntoRingHom✝ : RingHom A B\ncommutes'✝ : ∀ (r : R), Eq ((↑↑toRingHom✝).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\ntoRingHom : RingHom A B\ncommutes' : ∀ (r : R), Eq ((↑↑toRingHom).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\nx✝ : Eq { toRingHom := toRingHom✝, commutes' := commutes'✝ } { toRingHom := toRingHom, commutes' := commutes' }\n⊢ Eq toRingHom✝ toRingHom","decl":"/-- Defining the homomorphism in the category R-Alg, denoted `A →ₐ[R] B`. -/\nstructure AlgHom (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends RingHom A B where\n  commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgHom.mk.injEq","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\ntoRingHom✝ : RingHom A B\ncommutes'✝ : ∀ (r : R), Eq ((↑↑toRingHom✝).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\ntoRingHom : RingHom A B\ncommutes' : ∀ (r : R), Eq ((↑↑toRingHom).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq (Eq { toRingHom := toRingHom✝, commutes' := commutes'✝ } { toRingHom := toRingHom, commutes' := commutes' }) (Eq toRingHom✝ toRingHom)","decl":"/-- Defining the homomorphism in the category R-Alg, denoted `A →ₐ[R] B`. -/\nstructure AlgHom (R : Type u) (A : Type v) (B : Type w) [CommSemiring R] [Semiring A] [Semiring B]\n  [Algebra R A] [Algebra R B] extends RingHom A B where\n  commutes' : ∀ r : R, toFun (algebraMap R A r) = algebraMap R B r\n\n"}
{"name":"AlgHomClass.commutes","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Semiring B\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : FunLike F A B\nself : AlgHomClass F R A B\nf : F\nr : R\n⊢ Eq (f ((algebraMap R A) r)) ((algebraMap R B) r)","decl":"/-- `AlgHomClass F R A B` asserts `F` is a type of bundled algebra homomorphisms\nfrom `A` to `B`. -/\nclass AlgHomClass (F : Type*) (R A B : outParam Type*)\n  [CommSemiring R] [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n  [FunLike F A B] extends RingHomClass F A B : Prop where\n  commutes : ∀ (f : F) (r : R), f (algebraMap R A r) = algebraMap R B r\n\n-- For now, don't replace `AlgHom.commutes` and `AlgHomClass.commutes` with the more generic lemma.\n-- The file `Mathlib.NumberTheory.NumberField.CanonicalEmbedding.FundamentalCone` slows down by\n-- 15% if we would do so (see benchmark on PR https://github.com/leanprover-community/mathlib4/pull/18040).\n-- attribute [simp] AlgHomClass.commutes\n\n"}
{"name":"AlgHomClass.toRingHomClass","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Semiring B\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : FunLike F A B\nself : AlgHomClass F R A B\n⊢ RingHomClass F A B","decl":"/-- `AlgHomClass F R A B` asserts `F` is a type of bundled algebra homomorphisms\nfrom `A` to `B`. -/\nclass AlgHomClass (F : Type*) (R A B : outParam Type*)\n  [CommSemiring R] [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n  [FunLike F A B] extends RingHomClass F A B : Prop where\n  commutes : ∀ (f : F) (r : R), f (algebraMap R A r) = algebraMap R B r\n\n-- For now, don't replace `AlgHom.commutes` and `AlgHomClass.commutes` with the more generic lemma.\n-- The file `Mathlib.NumberTheory.NumberField.CanonicalEmbedding.FundamentalCone` slows down by\n-- 15% if we would do so (see benchmark on PR https://github.com/leanprover-community/mathlib4/pull/18040).\n-- attribute [simp] AlgHomClass.commutes\n\n"}
{"name":"AlgHomClass.linearMapClass","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u_1\nA : Type u_2\nB : Type u_3\nF : Type u_4\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\n⊢ LinearMapClass F R A B","decl":"instance (priority := 100) linearMapClass [AlgHomClass F R A B] : LinearMapClass F R A B :=\n  { ‹AlgHomClass F R A B› with\n    map_smulₛₗ := fun f r x => by\n      simp only [Algebra.smul_def, map_mul, commutes, RingHom.id_apply] }\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11445): A new definition underlying a coercion `↑`.\n"}
{"name":"AlgHom.algHomClass","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\n⊢ AlgHomClass (AlgHom R A B) R A B","decl":"instance algHomClass : AlgHomClass (A →ₐ[R] B) R A B where\n  map_add f := f.map_add'\n  map_zero f := f.map_zero'\n  map_mul f := f.map_mul'\n  map_one f := f.map_one'\n  commutes f := f.commutes'\n\n"}
{"name":"AlgHom.coe_coe","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\nF : Type u_1\ninst✝¹ : FunLike F A B\ninst✝ : AlgHomClass F R A B\nf : F\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp]\nprotected theorem coe_coe {F : Type*} [FunLike F A B] [AlgHomClass F R A B] (f : F) :\n    ⇑(f : A →ₐ[R] B) = f :=\n  rfl\n\n"}
{"name":"AlgHom.toFun_eq_coe","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq (↑↑f.toRingHom).toFun ⇑f","decl":"@[simp]\ntheorem toFun_eq_coe (f : A →ₐ[R] B) : f.toFun = f :=\n  rfl\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11445): A new definition underlying a coercion `↑`.\n"}
{"name":"AlgHom.coe_mk","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : RingHom A B\nh : ∀ (r : R), Eq ((↑↑f).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq ⇑{ toRingHom := f, commutes' := h } ⇑f","decl":"@[simp]\ntheorem coe_mk {f : A →+* B} (h) : ((⟨f, h⟩ : A →ₐ[R] B) : A → B) = f :=\n  rfl\n\n"}
{"name":"AlgHom.coe_mks","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : A → B\nh₁ : Eq (f 1) 1\nh₂ : ∀ (x y : A), Eq ({ toFun := f, map_one' := h₁ }.toFun (HMul.hMul x y)) (HMul.hMul ({ toFun := f, map_one' := h₁ }.toFun x) ({ toFun := f, map_one' := h₁ }.toFun y))\nh₃ : Eq ((↑{ toFun := f, map_one' := h₁, map_mul' := h₂ }).toFun 0) 0\nh₄ : ∀ (x y : A), Eq ((↑{ toFun := f, map_one' := h₁, map_mul' := h₂ }).toFun (HAdd.hAdd x y)) (HAdd.hAdd ((↑{ toFun := f, map_one' := h₁, map_mul' := h₂ }).toFun x) ((↑{ toFun := f, map_one' := h₁, map_mul' := h₂ }).toFun y))\nh₅ : ∀ (r : R), Eq ((↑↑{ toFun := f, map_one' := h₁, map_mul' := h₂, map_zero' := h₃, map_add' := h₄ }).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq (⇑{ toFun := f, map_one' := h₁, map_mul' := h₂, map_zero' := h₃, map_add' := h₄, commutes' := h₅ }) f","decl":"@[norm_cast]\ntheorem coe_mks {f : A → B} (h₁ h₂ h₃ h₄ h₅) : ⇑(⟨⟨⟨⟨f, h₁⟩, h₂⟩, h₃, h₄⟩, h₅⟩ : A →ₐ[R] B) = f :=\n  rfl\n\n-- Porting note: This theorem is new.\n"}
{"name":"AlgHom.coe_ringHom_mk","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : RingHom A B\nh : ∀ (r : R), Eq ((↑↑f).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq (↑{ toRingHom := f, commutes' := h }) f","decl":"@[simp, norm_cast]\ntheorem coe_ringHom_mk {f : A →+* B} (h) : ((⟨f, h⟩ : A →ₐ[R] B) : A →+* B) = f :=\n  rfl\n\n-- make the coercion the simp-normal form\n"}
{"name":"AlgHom.toRingHom_eq_coe","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq f.toRingHom ↑f","decl":"@[simp]\ntheorem toRingHom_eq_coe (f : A →ₐ[R] B) : f.toRingHom = f :=\n  rfl\n\n"}
{"name":"AlgHom.coe_toRingHom","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp, norm_cast]\ntheorem coe_toRingHom (f : A →ₐ[R] B) : ⇑(f : A →+* B) = f :=\n  rfl\n\n"}
{"name":"AlgHom.coe_toMonoidHom","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp, norm_cast]\ntheorem coe_toMonoidHom (f : A →ₐ[R] B) : ⇑(f : A →* B) = f :=\n  rfl\n\n"}
{"name":"AlgHom.coe_toAddMonoidHom","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp, norm_cast]\ntheorem coe_toAddMonoidHom (f : A →ₐ[R] B) : ⇑(f : A →+ B) = f :=\n  rfl\n\n"}
{"name":"AlgHom.coe_fn_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\n⊢ Function.Injective DFunLike.coe","decl":"theorem coe_fn_injective : @Function.Injective (A →ₐ[R] B) (A → B) (↑) :=\n  DFunLike.coe_injective\n\n"}
{"name":"AlgHom.coe_fn_inj","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ₁ φ₂ : AlgHom R A B\n⊢ Iff (Eq ⇑φ₁ ⇑φ₂) (Eq φ₁ φ₂)","decl":"theorem coe_fn_inj {φ₁ φ₂ : A →ₐ[R] B} : (φ₁ : A → B) = φ₂ ↔ φ₁ = φ₂ :=\n  DFunLike.coe_fn_eq\n\n"}
{"name":"AlgHom.coe_ringHom_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\n⊢ Function.Injective RingHomClass.toRingHom","decl":"theorem coe_ringHom_injective : Function.Injective ((↑) : (A →ₐ[R] B) → A →+* B) := fun φ₁ φ₂ H =>\n  coe_fn_injective <| show ((φ₁ : A →+* B) : A → B) = ((φ₂ : A →+* B) : A → B) from congr_arg _ H\n\n"}
{"name":"AlgHom.coe_monoidHom_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\n⊢ Function.Injective MonoidHomClass.toMonoidHom","decl":"theorem coe_monoidHom_injective : Function.Injective ((↑) : (A →ₐ[R] B) → A →* B) :=\n  RingHom.coe_monoidHom_injective.comp coe_ringHom_injective\n\n"}
{"name":"AlgHom.coe_addMonoidHom_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\n⊢ Function.Injective AddMonoidHomClass.toAddMonoidHom","decl":"theorem coe_addMonoidHom_injective : Function.Injective ((↑) : (A →ₐ[R] B) → A →+ B) :=\n  RingHom.coe_addMonoidHom_injective.comp coe_ringHom_injective\n\n"}
{"name":"AlgHom.congr_fun","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ₁ φ₂ : AlgHom R A B\nH : Eq φ₁ φ₂\nx : A\n⊢ Eq (φ₁ x) (φ₂ x)","decl":"protected theorem congr_fun {φ₁ φ₂ : A →ₐ[R] B} (H : φ₁ = φ₂) (x : A) : φ₁ x = φ₂ x :=\n  DFunLike.congr_fun H x\n\n"}
{"name":"AlgHom.congr_arg","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\nx y : A\nh : Eq x y\n⊢ Eq (φ x) (φ y)","decl":"protected theorem congr_arg (φ : A →ₐ[R] B) {x y : A} (h : x = y) : φ x = φ y :=\n  DFunLike.congr_arg φ h\n\n"}
{"name":"AlgHom.ext_iff","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ₁ φ₂ : AlgHom R A B\n⊢ Iff (Eq φ₁ φ₂) (∀ (x : A), Eq (φ₁ x) (φ₂ x))","decl":"@[ext]\ntheorem ext {φ₁ φ₂ : A →ₐ[R] B} (H : ∀ x, φ₁ x = φ₂ x) : φ₁ = φ₂ :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"AlgHom.ext","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ₁ φ₂ : AlgHom R A B\nH : ∀ (x : A), Eq (φ₁ x) (φ₂ x)\n⊢ Eq φ₁ φ₂","decl":"@[ext]\ntheorem ext {φ₁ φ₂ : A →ₐ[R] B} (H : ∀ x, φ₁ x = φ₂ x) : φ₁ = φ₂ :=\n  DFunLike.ext _ _ H\n\n"}
{"name":"AlgHom.mk_coe","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\nh₁ : Eq (f 1) 1\nh₂ : ∀ (x y : A), Eq ({ toFun := ⇑f, map_one' := h₁ }.toFun (HMul.hMul x y)) (HMul.hMul ({ toFun := ⇑f, map_one' := h₁ }.toFun x) ({ toFun := ⇑f, map_one' := h₁ }.toFun y))\nh₃ : Eq ((↑{ toFun := ⇑f, map_one' := h₁, map_mul' := h₂ }).toFun 0) 0\nh₄ : ∀ (x y : A), Eq ((↑{ toFun := ⇑f, map_one' := h₁, map_mul' := h₂ }).toFun (HAdd.hAdd x y)) (HAdd.hAdd ((↑{ toFun := ⇑f, map_one' := h₁, map_mul' := h₂ }).toFun x) ((↑{ toFun := ⇑f, map_one' := h₁, map_mul' := h₂ }).toFun y))\nh₅ : ∀ (r : R), Eq ((↑↑{ toFun := ⇑f, map_one' := h₁, map_mul' := h₂, map_zero' := h₃, map_add' := h₄ }).toFun ((algebraMap R A) r)) ((algebraMap R B) r)\n⊢ Eq { toFun := ⇑f, map_one' := h₁, map_mul' := h₂, map_zero' := h₃, map_add' := h₄, commutes' := h₅ } f","decl":"@[simp]\ntheorem mk_coe {f : A →ₐ[R] B} (h₁ h₂ h₃ h₄ h₅) : (⟨⟨⟨⟨f, h₁⟩, h₂⟩, h₃, h₄⟩, h₅⟩ : A →ₐ[R] B) = f :=\n  rfl\n\n"}
{"name":"AlgHom.commutes","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\nr : R\n⊢ Eq (φ ((algebraMap R A) r)) ((algebraMap R B) r)","decl":"@[simp]\ntheorem commutes (r : R) : φ (algebraMap R A r) = algebraMap R B r :=\n  φ.commutes' r\n\n"}
{"name":"AlgHom.comp_algebraMap","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\n⊢ Eq ((↑φ).comp (algebraMap R A)) (algebraMap R B)","decl":"theorem comp_algebraMap : (φ : A →+* B).comp (algebraMap R A) = algebraMap R B :=\n  RingHom.ext <| φ.commutes\n\n"}
{"name":"AlgHom.coe_mk'","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : RingHom A B\nh : ∀ (c : R) (x : A), Eq (f (HSMul.hSMul c x)) (HSMul.hSMul c (f x))\n⊢ Eq ⇑(AlgHom.mk' f h) ⇑f","decl":"@[simp]\ntheorem coe_mk' (f : A →+* B) (h : ∀ (c : R) (x), f (c • x) = c • f x) : ⇑(mk' f h) = f :=\n  rfl\n\n"}
{"name":"AlgHom.coe_id","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (⇑(AlgHom.id R A)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(AlgHom.id R A) = id :=\n  rfl\n\n"}
{"name":"AlgHom.id_toRingHom","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (↑(AlgHom.id R A)) (RingHom.id A)","decl":"@[simp]\ntheorem id_toRingHom : (AlgHom.id R A : A →+* A) = RingHom.id _ :=\n  rfl\n\n"}
{"name":"AlgHom.id_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\np : A\n⊢ Eq ((AlgHom.id R A) p) p","decl":"theorem id_apply (p : A) : AlgHom.id R A p = p :=\n  rfl\n\n"}
{"name":"AlgHom.coe_comp","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Semiring C\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : Algebra R C\nφ₁ : AlgHom R B C\nφ₂ : AlgHom R A B\n⊢ Eq (⇑(φ₁.comp φ₂)) (Function.comp ⇑φ₁ ⇑φ₂)","decl":"@[simp]\ntheorem coe_comp (φ₁ : B →ₐ[R] C) (φ₂ : A →ₐ[R] B) : ⇑(φ₁.comp φ₂) = φ₁ ∘ φ₂ :=\n  rfl\n\n"}
{"name":"AlgHom.comp_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Semiring C\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : Algebra R C\nφ₁ : AlgHom R B C\nφ₂ : AlgHom R A B\np : A\n⊢ Eq ((φ₁.comp φ₂) p) (φ₁ (φ₂ p))","decl":"theorem comp_apply (φ₁ : B →ₐ[R] C) (φ₂ : A →ₐ[R] B) (p : A) : φ₁.comp φ₂ p = φ₁ (φ₂ p) :=\n  rfl\n\n"}
{"name":"AlgHom.comp_toRingHom","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Semiring C\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : Algebra R C\nφ₁ : AlgHom R B C\nφ₂ : AlgHom R A B\n⊢ Eq (↑(φ₁.comp φ₂)) ((↑φ₁).comp ↑φ₂)","decl":"theorem comp_toRingHom (φ₁ : B →ₐ[R] C) (φ₂ : A →ₐ[R] B) :\n    (φ₁.comp φ₂ : A →+* C) = (φ₁ : B →+* C).comp ↑φ₂ :=\n  rfl\n\n"}
{"name":"AlgHom.comp_id","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\n⊢ Eq (φ.comp (AlgHom.id R A)) φ","decl":"@[simp]\ntheorem comp_id : φ.comp (AlgHom.id R A) = φ :=\n  rfl\n\n"}
{"name":"AlgHom.id_comp","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\n⊢ Eq ((AlgHom.id R B).comp φ) φ","decl":"@[simp]\ntheorem id_comp : (AlgHom.id R B).comp φ = φ :=\n  rfl\n\n"}
{"name":"AlgHom.comp_assoc","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\nD : Type v₁\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A\ninst✝⁶ : Semiring B\ninst✝⁵ : Semiring C\ninst✝⁴ : Semiring D\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : Algebra R C\ninst✝ : Algebra R D\nφ₁ : AlgHom R C D\nφ₂ : AlgHom R B C\nφ₃ : AlgHom R A B\n⊢ Eq ((φ₁.comp φ₂).comp φ₃) (φ₁.comp (φ₂.comp φ₃))","decl":"theorem comp_assoc (φ₁ : C →ₐ[R] D) (φ₂ : B →ₐ[R] C) (φ₃ : A →ₐ[R] B) :\n    (φ₁.comp φ₂).comp φ₃ = φ₁.comp (φ₂.comp φ₃) :=\n  rfl\n\n"}
{"name":"AlgHom.toLinearMap_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\np : A\n⊢ Eq (φ.toLinearMap p) (φ p)","decl":"@[simp]\ntheorem toLinearMap_apply (p : A) : φ.toLinearMap p = φ p :=\n  rfl\n\n"}
{"name":"AlgHom.toLinearMap_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\n⊢ Function.Injective AlgHom.toLinearMap","decl":"theorem toLinearMap_injective :\n    Function.Injective (toLinearMap : _ → A →ₗ[R] B) := fun _φ₁ _φ₂ h =>\n  ext <| LinearMap.congr_fun h\n\n"}
{"name":"AlgHom.comp_toLinearMap","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Semiring C\ninst✝² : Algebra R A\ninst✝¹ : Algebra R B\ninst✝ : Algebra R C\nf : AlgHom R A B\ng : AlgHom R B C\n⊢ Eq (g.comp f).toLinearMap (g.toLinearMap.comp f.toLinearMap)","decl":"@[simp]\ntheorem comp_toLinearMap (f : A →ₐ[R] B) (g : B →ₐ[R] C) :\n    (g.comp f).toLinearMap = g.toLinearMap.comp f.toLinearMap :=\n  rfl\n\n"}
{"name":"AlgHom.toLinearMap_id","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq (AlgHom.id R A).toLinearMap LinearMap.id","decl":"@[simp]\ntheorem toLinearMap_id : toLinearMap (AlgHom.id R A) = LinearMap.id :=\n  rfl\n\n"}
{"name":"AlgHom.ofLinearMap_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : LinearMap (RingHom.id R) A B\nmap_one : Eq (f 1) 1\nmap_mul : ∀ (x y : A), Eq (f (HMul.hMul x y)) (HMul.hMul (f x) (f y))\na : A\n⊢ Eq ((AlgHom.ofLinearMap f map_one map_mul) a) (f a)","decl":"/-- Promote a `LinearMap` to an `AlgHom` by supplying proofs about the behavior on `1` and `*`. -/\n@[simps]\ndef ofLinearMap (f : A →ₗ[R] B) (map_one : f 1 = 1) (map_mul : ∀ x y, f (x * y) = f x * f y) :\n    A →ₐ[R] B :=\n  { f.toAddMonoidHom with\n    toFun := f\n    map_one' := map_one\n    map_mul' := map_mul\n    commutes' := fun c => by simp only [Algebra.algebraMap_eq_smul_one, f.map_smul, map_one] }\n\n"}
{"name":"AlgHom.ofLinearMap_toLinearMap","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nφ : AlgHom R A B\nmap_one : Eq (φ.toLinearMap 1) 1\nmap_mul : ∀ (x y : A), Eq (φ.toLinearMap (HMul.hMul x y)) (HMul.hMul (φ.toLinearMap x) (φ.toLinearMap y))\n⊢ Eq (AlgHom.ofLinearMap φ.toLinearMap map_one map_mul) φ","decl":"@[simp]\ntheorem ofLinearMap_toLinearMap (map_one) (map_mul) :\n    ofLinearMap φ.toLinearMap map_one map_mul = φ :=\n  rfl\n\n"}
{"name":"AlgHom.toLinearMap_ofLinearMap","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : LinearMap (RingHom.id R) A B\nmap_one : Eq (f 1) 1\nmap_mul : ∀ (x y : A), Eq (f (HMul.hMul x y)) (HMul.hMul (f x) (f y))\n⊢ Eq (AlgHom.ofLinearMap f map_one map_mul).toLinearMap f","decl":"@[simp]\ntheorem toLinearMap_ofLinearMap (f : A →ₗ[R] B) (map_one) (map_mul) :\n    toLinearMap (ofLinearMap f map_one map_mul) = f :=\n  rfl\n\n"}
{"name":"AlgHom.ofLinearMap_id","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nmap_one : Eq (LinearMap.id 1) 1\nmap_mul : ∀ (x y : A), Eq (LinearMap.id (HMul.hMul x y)) (HMul.hMul (LinearMap.id x) (LinearMap.id y))\n⊢ Eq (AlgHom.ofLinearMap LinearMap.id map_one map_mul) (AlgHom.id R A)","decl":"@[simp]\ntheorem ofLinearMap_id (map_one) (map_mul) :\n    ofLinearMap LinearMap.id map_one map_mul = AlgHom.id R A :=\n  rfl\n\n"}
{"name":"AlgHom.map_smul_of_tower","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\ninst✝⁵ : Semiring B\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra R B\nφ : AlgHom R A B\nR' : Type u_1\ninst✝² : SMul R' A\ninst✝¹ : SMul R' B\ninst✝ : LinearMap.CompatibleSMul A B R' R\nr : R'\nx : A\n⊢ Eq (φ (HSMul.hSMul r x)) (HSMul.hSMul r (φ x))","decl":"theorem map_smul_of_tower {R'} [SMul R' A] [SMul R' B] [LinearMap.CompatibleSMul A B R' R] (r : R')\n    (x : A) : φ (r • x) = r • φ x :=\n  φ.toLinearMap.map_smul_of_tower r x\n\n"}
{"name":"AlgHom.End_toSemigroup_toMul_mul","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nφ₁ φ₂ : AlgHom R A A\n⊢ Eq (HMul.hMul φ₁ φ₂) (φ₁.comp φ₂)","decl":"@[simps (config := .lemmasOnly) toSemigroup_toMul_mul toOne_one]\ninstance End : Monoid (A →ₐ[R] A) where\n  mul := comp\n  mul_assoc _ _ _ := rfl\n  one := AlgHom.id R A\n  one_mul _ := rfl\n  mul_one _ := rfl\n\n"}
{"name":"AlgHom.End_toOne_one","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Eq 1 (AlgHom.id R A)","decl":"@[simps (config := .lemmasOnly) toSemigroup_toMul_mul toOne_one]\ninstance End : Monoid (A →ₐ[R] A) where\n  mul := comp\n  mul_assoc _ _ _ := rfl\n  one := AlgHom.id R A\n  one_mul _ := rfl\n  mul_one _ := rfl\n\n"}
{"name":"AlgHom.one_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nx : A\n⊢ Eq (1 x) x","decl":"@[simp]\ntheorem one_apply (x : A) : (1 : A →ₐ[R] A) x = x :=\n  rfl\n\n"}
{"name":"AlgHom.mul_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nφ ψ : AlgHom R A A\nx : A\n⊢ Eq ((HMul.hMul φ ψ) x) (φ (ψ x))","decl":"@[simp]\ntheorem mul_apply (φ ψ : A →ₐ[R] A) (x : A) : (φ * ψ) x = φ (ψ x) :=\n  rfl\n\n"}
{"name":"AlgHom.algebraMap_eq_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Semiring B\ninst✝¹ : Algebra R A\ninst✝ : Algebra R B\nf : AlgHom R A B\ny : R\nx : A\nh : Eq ((algebraMap R A) y) x\n⊢ Eq ((algebraMap R B) y) (f x)","decl":"theorem algebraMap_eq_apply (f : A →ₐ[R] B) {y : R} {x : A} (h : algebraMap R A y = x) :\n    algebraMap R B y = f x :=\n  h ▸ (f.commutes _).symm\n\n"}
{"name":"RingHom.toNatAlgHom_coe","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : Semiring R\ninst✝ : Semiring S\nf : RingHom R S\n⊢ Eq ⇑f.toNatAlgHom ⇑f","decl":"@[simp]\nlemma toNatAlgHom_coe [Semiring R] [Semiring S] (f : R →+* S) :\n    ⇑f.toNatAlgHom = ⇑f := rfl\n\n"}
{"name":"RingHom.toNatAlgHom_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : Semiring R\ninst✝ : Semiring S\nf : RingHom R S\nx : R\n⊢ Eq (f.toNatAlgHom x) (f x)","decl":"lemma toNatAlgHom_apply [Semiring R] [Semiring S] (f : R →+* S) (x : R) :\n    f.toNatAlgHom x = f x := rfl\n\n"}
{"name":"RingHom.toIntAlgHom_coe","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : Ring R\ninst✝ : Ring S\nf : RingHom R S\n⊢ Eq ⇑f.toIntAlgHom ⇑f","decl":"@[simp]\nlemma toIntAlgHom_coe [Ring R] [Ring S] (f : R →+* S) :\n    ⇑f.toIntAlgHom = ⇑f := rfl\n\n"}
{"name":"RingHom.toIntAlgHom_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : Ring R\ninst✝ : Ring S\nf : RingHom R S\nx : R\n⊢ Eq (f.toIntAlgHom x) (f x)","decl":"lemma toIntAlgHom_apply [Ring R] [Ring S] (f : R →+* S) (x : R) :\n    f.toIntAlgHom x = f x := rfl\n\n"}
{"name":"RingHom.toIntAlgHom_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝¹ : Ring R\ninst✝ : Ring S\n⊢ Function.Injective RingHom.toIntAlgHom","decl":"lemma toIntAlgHom_injective [Ring R] [Ring S] :\n    Function.Injective (RingHom.toIntAlgHom : (R →+* S) → _) :=\n  fun _ _ e ↦ DFunLike.ext _ _ (fun x ↦ DFunLike.congr_fun e x)\n\n"}
{"name":"Algebra.ofId_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nr : R\n⊢ Eq ((Algebra.ofId R A) r) ((algebraMap R A) r)","decl":"theorem ofId_apply (r) : ofId R A r = algebraMap R A r :=\n  rfl\n\n"}
{"name":"Algebra.subsingleton_id","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\n⊢ Subsingleton (AlgHom R R A)","decl":"/-- This is a special case of a more general instance that we define in a later file. -/\ninstance subsingleton_id : Subsingleton (R →ₐ[R] A) :=\n  ⟨fun f g => AlgHom.ext fun _ => (f.commutes _).trans (g.commutes _).symm⟩\n\n"}
{"name":"Algebra.ext_id","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nf g : AlgHom R R A\n⊢ Eq f g","decl":"/-- This ext lemma closes trivial subgoals create when chaining heterobasic ext lemmas. -/\n@[ext high]\ntheorem ext_id (f g : R →ₐ[R] A) : f = g := Subsingleton.elim _ _\n\n"}
{"name":"Algebra.ext_id_iff","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nf g : AlgHom R R A\n⊢ Iff (Eq f g) True","decl":"/-- This ext lemma closes trivial subgoals create when chaining heterobasic ext lemmas. -/\n@[ext high]\ntheorem ext_id (f g : R →ₐ[R] A) : f = g := Subsingleton.elim _ _\n\n"}
{"name":"Algebra.comp_ofId","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Semiring B\ninst✝ : Algebra R B\nφ : AlgHom R A B\n⊢ Eq (φ.comp (Algebra.ofId R A)) (Algebra.ofId R B)","decl":"@[simp]\ntheorem comp_ofId (φ : A →ₐ[R] B) : φ.comp (Algebra.ofId R A) = Algebra.ofId R B := by ext\n\n"}
{"name":"Algebra.smul_units_def","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nf : AlgHom R A A\nx : Units A\n⊢ Eq (HSMul.hSMul f x) ((Units.map ↑f) x)","decl":"@[simp]\ntheorem smul_units_def (f : A →ₐ[R] A) (x : Aˣ) :\n    f • x = Units.map (f : A →* A) x := rfl\n\n"}
{"name":"Algebra.algebraMapSubmonoid_map_eq","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\nM : Submonoid R\nB : Type w\ninst✝¹ : CommRing B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ Eq (Submonoid.map f (Algebra.algebraMapSubmonoid A M)) (Algebra.algebraMapSubmonoid B M)","decl":"lemma algebraMapSubmonoid_map_eq (f : A →ₐ[R] B) :\n    (algebraMapSubmonoid A M).map f = algebraMapSubmonoid B M := by\n  ext x\n  constructor\n  · rintro ⟨a, ⟨r, hr, rfl⟩, rfl⟩\n    simp only [AlgHom.commutes]\n    use r\n  · rintro ⟨r, hr, rfl⟩\n    simp only [Submonoid.mem_map]\n    use (algebraMap R A r)\n    simp only [AlgHom.commutes, and_true]\n    use r\n\n"}
{"name":"Algebra.algebraMapSubmonoid_le_comap","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"R : Type u\nA : Type v\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\nM : Submonoid R\nB : Type w\ninst✝¹ : CommRing B\ninst✝ : Algebra R B\nf : AlgHom R A B\n⊢ LE.le (Algebra.algebraMapSubmonoid A M) (Submonoid.comap f.toRingHom (Algebra.algebraMapSubmonoid B M))","decl":"lemma algebraMapSubmonoid_le_comap (f : A →ₐ[R] B) :\n    algebraMapSubmonoid A M ≤ (algebraMapSubmonoid B M).comap f.toRingHom := by\n  rw [← algebraMapSubmonoid_map_eq M f]\n  exact Submonoid.le_comap_map (Algebra.algebraMapSubmonoid A M)\n\n"}
{"name":"MulSemiringAction.toAlgHom_apply","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"M : Type u_1\nR : Type u_3\nA : Type u_4\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\ninst✝² : Monoid M\ninst✝¹ : MulSemiringAction M A\ninst✝ : SMulCommClass M R A\nm : M\na : A\n⊢ Eq ((MulSemiringAction.toAlgHom R A m) a) (HSMul.hSMul m a)","decl":"/-- Each element of the monoid defines an algebra homomorphism.\n\nThis is a stronger version of `MulSemiringAction.toRingHom` and\n`DistribMulAction.toLinearMap`. -/\n@[simps]\ndef toAlgHom (m : M) : A →ₐ[R] A :=\n  { MulSemiringAction.toRingHom _ _ m with\n    toFun := fun a => m • a\n    commutes' := smul_algebraMap _ }\n\n"}
{"name":"MulSemiringAction.toAlgHom_injective","module":"Mathlib.Algebra.Algebra.Hom","initialProofState":"M : Type u_1\nR : Type u_3\nA : Type u_4\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Algebra R A\ninst✝³ : Monoid M\ninst✝² : MulSemiringAction M A\ninst✝¹ : SMulCommClass M R A\ninst✝ : FaithfulSMul M A\n⊢ Function.Injective (MulSemiringAction.toAlgHom R A)","decl":"theorem toAlgHom_injective [FaithfulSMul M A] :\n    Function.Injective (MulSemiringAction.toAlgHom R A : M → A →ₐ[R] A) := fun _m₁ _m₂ h =>\n  eq_of_smul_eq_smul fun r => AlgHom.ext_iff.1 h r\n\n"}
