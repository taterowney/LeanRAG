{"name":"corners_theorem","module":"Mathlib.Combinatorics.Additive.Corner.Roth","initialProofState":"G : Type u_1\ninst✝¹ : AddCommGroup G\ninst✝ : Fintype G\nε : Real\nhε : LT.lt 0 ε\nhG : LE.le (cornersTheoremBound ε) (Fintype.card G)\nA : Finset (Prod G G)\nhAε : LE.le (HMul.hMul ε (HPow.hPow (↑(Fintype.card G)) 2)) ↑A.card\n⊢ Not (IsCornerFree ↑A)","decl":"/-- The **corners theorem** for finite abelian groups.\n\nThe maximum density of a corner-free set in `G × G` goes to zero as `|G|` tends to infinity. -/\ntheorem corners_theorem (ε : ℝ) (hε : 0 < ε) (hG : cornersTheoremBound ε ≤ card G)\n    (A : Finset (G × G)) (hAε : ε * card G ^ 2 ≤ #A) : ¬ IsCornerFree (A : Set (G × G)) := by\n  rintro hA\n  rw [cornersTheoremBound, Nat.add_one_le_iff] at hG\n  have hε₁ : ε ≤ 1 := by\n    have := hAε.trans (Nat.cast_le.2 A.card_le_univ)\n    simp only [sq, Nat.cast_mul, Fintype.card_prod, Fintype.card_fin] at this\n    rwa [mul_le_iff_le_one_left] at this\n    positivity\n  have := noAccidental hA\n  rw [Nat.floor_lt' (by positivity), inv_lt_iff_one_lt_mul₀'] at hG\n  swap\n  · have : ε / 9 ≤ 1 := by linarith\n    positivity\n  refine hG.not_le (le_of_mul_le_mul_right ?_ (by positivity : (0 : ℝ) < card G ^ 2))\n  classical\n  have h₁ := (farFromTriangleFree_graph hAε).le_card_cliqueFinset\n  rw [card_triangles, card_triangleIndices] at h₁\n  convert h₁.trans (Nat.cast_le.2 <| card_le_univ _) using 1 <;> simp <;> ring\n\n"}
{"name":"corners_theorem_nat","module":"Mathlib.Combinatorics.Additive.Corner.Roth","initialProofState":"n : Nat\nε : Real\nhε : LT.lt 0 ε\nhn : LE.le (cornersTheoremBound (HDiv.hDiv ε 9)) n\nA : Finset (Prod Nat Nat)\nhAn : HasSubset.Subset A (SProd.sprod (Finset.range n) (Finset.range n))\nhAε : LE.le (HMul.hMul ε (HPow.hPow (↑n) 2)) ↑A.card\n⊢ Not (IsCornerFree ↑A)","decl":"/-- The **corners theorem** for `ℕ`.\n\nThe maximum density of a corner-free set in `{1, ..., n} × {1, ..., n}` goes to zero as `n` tends to\ninfinity. -/\ntheorem corners_theorem_nat (hε : 0 < ε) (hn : cornersTheoremBound (ε / 9) ≤ n)\n    (A : Finset (ℕ × ℕ)) (hAn : A ⊆ range n ×ˢ range n) (hAε : ε * n ^ 2 ≤ #A) :\n    ¬ IsCornerFree (A : Set (ℕ × ℕ)) := by\n  rintro hA\n  rw [← coe_subset, coe_product] at hAn\n  have : A = Prod.map Fin.val Fin.val ''\n      (Prod.map Nat.cast Nat.cast '' A : Set (Fin (2 * n).succ × Fin (2 * n).succ)) := by\n    rw [Set.image_image, Set.image_congr, Set.image_id]\n    simp only [mem_coe, Nat.succ_eq_add_one, Prod.map_apply, Fin.val_natCast, id_eq, Prod.forall,\n      Prod.mk.injEq, Nat.mod_succ_eq_iff_lt]\n    rintro a b hab\n    have := hAn hab\n    simp at this\n    omega\n  rw [this] at hA\n  have := Fin.isAddFreimanIso_Iio two_ne_zero (le_refl (2 * n))\n  have := hA.of_image this.isAddFreimanHom Fin.val_injective.injOn <| by\n    refine Set.image_subset_iff.2 <| hAn.trans fun x hx ↦ ?_\n    simp only [coe_range, Set.mem_prod, Set.mem_Iio] at hx\n    exact ⟨Fin.natCast_strictMono (by omega) hx.1, Fin.natCast_strictMono (by omega) hx.2⟩\n  rw [← coe_image] at this\n  refine corners_theorem (ε / 9) (by positivity) (by simp; omega) _ ?_ this\n  calc\n    _ = ε / 9 * (2 * n + 1) ^ 2 := by simp\n    _ ≤ ε / 9 * (2 * n + n) ^ 2 := by gcongr; simp; unfold cornersTheoremBound at hn; omega\n    _ = ε * n ^ 2 := by ring\n    _ ≤ #A := hAε\n    _ = _ := by\n      rw [card_image_of_injOn]\n      have : Set.InjOn Nat.cast (range n) :=\n        (CharP.natCast_injOn_Iio (Fin (2 * n).succ) (2 * n).succ).mono (by simp; omega)\n      exact (this.prodMap this).mono hAn\n\n"}
{"name":"roth_3ap_theorem","module":"Mathlib.Combinatorics.Additive.Corner.Roth","initialProofState":"G : Type u_1\ninst✝¹ : AddCommGroup G\ninst✝ : Fintype G\nε : Real\nhε : LT.lt 0 ε\nhG : LE.le (cornersTheoremBound ε) (Fintype.card G)\nA : Finset G\nhAε : LE.le (HMul.hMul ε ↑(Fintype.card G)) ↑A.card\n⊢ Not (ThreeAPFree ↑A)","decl":"/-- **Roth's theorem** for finite abelian groups.\n\nThe maximum density of a 3AP-free set in `G` goes to zero as `|G|` tends to infinity. -/\ntheorem roth_3ap_theorem (ε : ℝ) (hε : 0 < ε) (hG : cornersTheoremBound ε ≤ card G)\n    (A : Finset G) (hAε : ε * card G ≤ #A) : ¬ ThreeAPFree (A : Set G) := by\n  rintro hA\n  classical\n  let B : Finset (G × G) := univ.filter fun (x, y) ↦ y - x ∈ A\n  have : ε * card G ^ 2 ≤ #B := by\n    calc\n      _ = card G * (ε * card G) := by ring\n      _ ≤ card G * #A := by gcongr\n      _ = #B := ?_\n    norm_cast\n    rw [← card_univ, ← card_product]\n    exact card_equiv ((Equiv.refl _).prodShear fun a ↦ Equiv.addLeft a) (by simp [B])\n  obtain ⟨x₁, y₁, x₂, y₂, hx₁y₁, hx₁y₂, hx₂y₁, hxy, hx₁x₂⟩ :\n      ∃ x₁ y₁ x₂ y₂, y₁ - x₁ ∈ A ∧ y₂ - x₁ ∈ A ∧ y₁ - x₂ ∈ A ∧ x₁ + y₂ = x₂ + y₁ ∧ x₁ ≠ x₂ := by\n    simpa [IsCornerFree, isCorner_iff, B, -exists_and_left, -exists_and_right]\n      using corners_theorem ε hε hG B this\n  have := hA hx₂y₁ hx₁y₁ hx₁y₂ <| by -- TODO: This really ought to just be `by linear_combination h`\n    rw [sub_add_sub_comm, add_comm, add_sub_add_comm, add_right_cancel_iff,\n      sub_eq_sub_iff_add_eq_add, add_comm, hxy, add_comm]\n  exact hx₁x₂ <| by simpa using this.symm\n\n"}
{"name":"roth_3ap_theorem_nat","module":"Mathlib.Combinatorics.Additive.Corner.Roth","initialProofState":"n : Nat\nε : Real\nhε : LT.lt 0 ε\nhG : LE.le (cornersTheoremBound (HDiv.hDiv ε 3)) n\nA : Finset Nat\nhAn : HasSubset.Subset A (Finset.range n)\nhAε : LE.le (HMul.hMul ε ↑n) ↑A.card\n⊢ Not (ThreeAPFree ↑A)","decl":"/-- **Roth's theorem** for `ℕ`.\n\nThe maximum density of a 3AP-free set in `{1, ..., n}` goes to zero as `n` tends to infinity. -/\ntheorem roth_3ap_theorem_nat (ε : ℝ) (hε : 0 < ε) (hG : cornersTheoremBound (ε / 3) ≤ n)\n    (A : Finset ℕ) (hAn : A ⊆ range n) (hAε : ε * n ≤ #A) : ¬ ThreeAPFree (A : Set ℕ) := by\n  rintro hA\n  rw [← coe_subset, coe_range] at hAn\n  have : A = Fin.val '' (Nat.cast '' A : Set (Fin (2 * n).succ)) := by\n    rw [Set.image_image, Set.image_congr, Set.image_id]\n    simp only [mem_coe, Nat.succ_eq_add_one, Fin.val_natCast, id_eq, Nat.mod_succ_eq_iff_lt]\n    rintro a ha\n    have := hAn ha\n    simp at this\n    omega\n  rw [this] at hA\n  have := Fin.isAddFreimanIso_Iio two_ne_zero (le_refl (2 * n))\n  have := hA.of_image this.isAddFreimanHom Fin.val_injective.injOn <| Set.image_subset_iff.2 <|\n      hAn.trans fun x hx ↦ Fin.natCast_strictMono (by omega) <| by\n        simpa only [coe_range, Set.mem_Iio] using hx\n  rw [← coe_image] at this\n  refine roth_3ap_theorem (ε / 3) (by positivity) (by simp; omega) _ ?_ this\n  calc\n    _ = ε / 3 * (2 * n + 1) := by simp\n    _ ≤ ε / 3 * (2 * n + n) := by gcongr; simp; unfold cornersTheoremBound at hG; omega\n    _ = ε * n := by ring\n    _ ≤ #A := hAε\n    _ = _ := by\n      rw [card_image_of_injOn]\n      exact (CharP.natCast_injOn_Iio (Fin (2 * n).succ) (2 * n).succ).mono <| hAn.trans <| by\n        simp; omega\n\n"}
{"name":"rothNumberNat_isLittleO_id","module":"Mathlib.Combinatorics.Additive.Corner.Roth","initialProofState":"⊢ Asymptotics.IsLittleO Filter.atTop (fun N => ↑(rothNumberNat N)) fun N => ↑N","decl":"/-- **Roth's theorem** for `ℕ` as an asymptotic statement.\n\nThe maximum density of a 3AP-free set in `{1, ..., n}` goes to zero as `n` tends to infinity. -/\ntheorem rothNumberNat_isLittleO_id :\n    IsLittleO atTop (fun N ↦ (rothNumberNat N : ℝ)) (fun N ↦ (N : ℝ)) := by\n  simp only [isLittleO_iff, eventually_atTop, RCLike.norm_natCast]\n  refine fun ε hε ↦ ⟨cornersTheoremBound (ε / 3), fun n hn ↦ ?_⟩\n  obtain ⟨A, hs₁, hs₂, hs₃⟩ := rothNumberNat_spec n\n  rw [← hs₂, ← not_lt]\n  exact fun hδn ↦ roth_3ap_theorem_nat ε hε hn _ hs₁ hδn.le hs₃\n"}
