{"name":"Int.sqrt_eq","module":"Mathlib.Data.Int.Sqrt","initialProofState":"n : Int\n⊢ Eq (Int.sqrt (HMul.hMul n n)) ↑n.natAbs","decl":"theorem sqrt_eq (n : ℤ) : sqrt (n * n) = n.natAbs := by\n  rw [sqrt, ← natAbs_mul_self, toNat_natCast, Nat.sqrt_eq]\n\n"}
{"name":"Int.exists_mul_self","module":"Mathlib.Data.Int.Sqrt","initialProofState":"x : Int\n⊢ Iff (Exists fun n => Eq (HMul.hMul n n) x) (Eq (HMul.hMul (Int.sqrt x) (Int.sqrt x)) x)","decl":"theorem exists_mul_self (x : ℤ) : (∃ n, n * n = x) ↔ sqrt x * sqrt x = x :=\n  ⟨fun ⟨n, hn⟩ => by rw [← hn, sqrt_eq, ← Int.ofNat_mul, natAbs_mul_self], fun h => ⟨sqrt x, h⟩⟩\n\n"}
{"name":"Int.sqrt_nonneg","module":"Mathlib.Data.Int.Sqrt","initialProofState":"n : Int\n⊢ LE.le 0 (Int.sqrt n)","decl":"theorem sqrt_nonneg (n : ℤ) : 0 ≤ sqrt n :=\n  natCast_nonneg _\n\n"}
{"name":"Int.sqrt_natCast","module":"Mathlib.Data.Int.Sqrt","initialProofState":"n : Nat\n⊢ Eq (Int.sqrt ↑n) ↑n.sqrt","decl":"@[simp, norm_cast]\ntheorem sqrt_natCast (n : ℕ) : Int.sqrt (n : ℤ) = Nat.sqrt n := by rw [sqrt, toNat_ofNat]\n\n"}
{"name":"Int.sqrt_ofNat","module":"Mathlib.Data.Int.Sqrt","initialProofState":"n : Nat\n⊢ Eq (Int.sqrt (OfNat.ofNat n)) ↑(OfNat.ofNat n).sqrt","decl":"@[simp]\ntheorem sqrt_ofNat (n : ℕ) : Int.sqrt ofNat(n) = Nat.sqrt ofNat(n) :=\n  sqrt_natCast _\n\n"}
