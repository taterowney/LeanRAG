{"name":"RingCon.mk.injEq","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\ntoCon✝ : Con R\nadd'✝ : ∀ {w x y z : R}, toCon✝.toSetoid w x → toCon✝.toSetoid y z → toCon✝.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)\ntoCon : Con R\nadd' : ∀ {w x y z : R}, toCon.toSetoid w x → toCon.toSetoid y z → toCon.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)\n⊢ Eq (Eq { toCon := toCon✝, add' := add'✝ } { toCon := toCon, add' := add' }) (Eq toCon✝ toCon)","decl":"/-- A congruence relation on a type with an addition and multiplication is an equivalence relation\nwhich preserves both. -/\nstructure RingCon (R : Type*) [Add R] [Mul R] extends Con R, AddCon R where\n\n"}
{"name":"RingCon.mk.inj","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\ntoCon✝ : Con R\nadd'✝ : ∀ {w x y z : R}, toCon✝.toSetoid w x → toCon✝.toSetoid y z → toCon✝.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)\ntoCon : Con R\nadd' : ∀ {w x y z : R}, toCon.toSetoid w x → toCon.toSetoid y z → toCon.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)\nx✝ : Eq { toCon := toCon✝, add' := add'✝ } { toCon := toCon, add' := add' }\n⊢ Eq toCon✝ toCon","decl":"/-- A congruence relation on a type with an addition and multiplication is an equivalence relation\nwhich preserves both. -/\nstructure RingCon (R : Type*) [Add R] [Mul R] extends Con R, AddCon R where\n\n"}
{"name":"RingCon.add'","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nself : RingCon R\nw x y z : R\na✝¹ : self.toSetoid w x\na✝ : self.toSetoid y z\n⊢ self.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)","decl":"/-- A congruence relation on a type with an addition and multiplication is an equivalence relation\nwhich preserves both. -/\nstructure RingCon (R : Type*) [Add R] [Mul R] extends Con R, AddCon R where\n\n"}
{"name":"RingCon.mk.sizeOf_spec","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝² : Add R\ninst✝¹ : Mul R\ninst✝ : SizeOf R\ntoCon : Con R\nadd' : ∀ {w x y z : R}, toCon.toSetoid w x → toCon.toSetoid y z → toCon.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)\n⊢ Eq (SizeOf.sizeOf { toCon := toCon, add' := add' }) (HAdd.hAdd 1 (SizeOf.sizeOf toCon))","decl":"/-- A congruence relation on a type with an addition and multiplication is an equivalence relation\nwhich preserves both. -/\nstructure RingCon (R : Type*) [Add R] [Mul R] extends Con R, AddCon R where\n\n"}
{"name":"RingCon.rel_eq_coe","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\n⊢ Eq ⇑c.toSetoid ⇑c","decl":"theorem rel_eq_coe : c.r = c :=\n  rfl\n\n"}
{"name":"RingCon.toCon_coe_eq_coe","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\n⊢ Eq ⇑c.toCon ⇑c","decl":"@[simp]\ntheorem toCon_coe_eq_coe : (c.toCon : R → R → Prop) = c :=\n  rfl\n\n"}
{"name":"RingCon.refl","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx : R\n⊢ c x x","decl":"protected theorem refl (x) : c x x :=\n  c.refl' x\n\n"}
{"name":"RingCon.symm","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx y : R\na✝ : c x y\n⊢ c y x","decl":"protected theorem symm {x y} : c x y → c y x :=\n  c.symm'\n\n"}
{"name":"RingCon.trans","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx y z : R\na✝¹ : c x y\na✝ : c y z\n⊢ c x z","decl":"protected theorem trans {x y z} : c x y → c y z → c x z :=\n  c.trans'\n\n"}
{"name":"RingCon.add","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nw x y z : R\na✝¹ : c w x\na✝ : c y z\n⊢ c (HAdd.hAdd w y) (HAdd.hAdd x z)","decl":"protected theorem add {w x y z} : c w x → c y z → c (w + y) (x + z) :=\n  c.add'\n\n"}
{"name":"RingCon.mul","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nw x y z : R\na✝¹ : c w x\na✝ : c y z\n⊢ c (HMul.hMul w y) (HMul.hMul x z)","decl":"protected theorem mul {w x y z} : c w x → c y z → c (w * y) (x * z) :=\n  c.mul'\n\n"}
{"name":"RingCon.sub","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"S : Type u_2\ninst✝¹ : AddGroup S\ninst✝ : Mul S\nt : RingCon S\na b c d : S\nh : t a b\nh' : t c d\n⊢ t (HSub.hSub a c) (HSub.hSub b d)","decl":"protected theorem sub {S : Type*} [AddGroup S] [Mul S] (t : RingCon S)\n    {a b c d : S} (h : t a b) (h' : t c d) : t (a - c) (b - d) := t.toAddCon.sub h h'\n\n"}
{"name":"RingCon.neg","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"S : Type u_2\ninst✝¹ : AddGroup S\ninst✝ : Mul S\nt : RingCon S\na b : S\nh : t a b\n⊢ t (Neg.neg a) (Neg.neg b)","decl":"protected theorem neg {S : Type*} [AddGroup S] [Mul S] (t : RingCon S)\n    {a b} (h : t a b) : t (-a) (-b) := t.toAddCon.neg h\n\n"}
{"name":"RingCon.nsmul","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"S : Type u_2\ninst✝¹ : AddGroup S\ninst✝ : Mul S\nt : RingCon S\nm : Nat\nx y : S\nhx : t x y\n⊢ t (HSMul.hSMul m x) (HSMul.hSMul m y)","decl":"protected theorem nsmul {S : Type*} [AddGroup S] [Mul S] (t : RingCon S)\n    (m : ℕ) {x y : S} (hx : t x y) : t (m • x) (m • y) := t.toAddCon.nsmul m hx\n\n"}
{"name":"RingCon.zsmul","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"S : Type u_2\ninst✝¹ : AddGroup S\ninst✝ : Mul S\nt : RingCon S\nz : Int\nx y : S\nhx : t x y\n⊢ t (HSMul.hSMul z x) (HSMul.hSMul z y)","decl":"protected theorem zsmul {S : Type*} [AddGroup S] [Mul S] (t : RingCon S)\n    (z : ℤ) {x y : S} (hx : t x y) : t (z • x) (z • y) := t.toAddCon.zsmul z hx\n\n"}
{"name":"RingCon.rel_mk","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\ns : Con R\nh : ∀ {w x y z : R}, s.toSetoid w x → s.toSetoid y z → s.toSetoid (HAdd.hAdd w y) (HAdd.hAdd x z)\na b : R\n⊢ Iff ({ toCon := s, add' := h } a b) (s a b)","decl":"@[simp]\ntheorem rel_mk {s : Con R} {h a b} : RingCon.mk s h a b ↔ s a b :=\n  Iff.rfl\n\n"}
{"name":"RingCon.ext'","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\nH : Eq ⇑c ⇑d\n⊢ Eq c d","decl":"/-- The map sending a congruence relation to its underlying binary relation is injective. -/\ntheorem ext' {c d : RingCon R} (H : ⇑c = ⇑d) : c = d := DFunLike.coe_injective H\n\n"}
{"name":"RingCon.ext","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc d : RingCon R\nH : ∀ (x y : R), Iff (c x y) (d x y)\n⊢ Eq c d","decl":"/-- Extensionality rule for congruence relations. -/\ntheorem ext {c d : RingCon R} (H : ∀ x y, c x y ↔ d x y) : c = d :=\n  ext' <| by ext; apply H\n\n"}
{"name":"RingCon.quot_mk_eq_coe","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx : R\n⊢ Eq (Quot.mk (⇑c) x) ↑x","decl":"@[simp]\ntheorem quot_mk_eq_coe (x : R) : Quot.mk c x = (x : c.Quotient) :=\n  rfl\n\n"}
{"name":"RingCon.eq","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\na b : R\n⊢ Iff (Eq ↑a ↑b) (c a b)","decl":"/-- Two elements are related by a congruence relation `c` iff they are represented by the same\nelement of the quotient by `c`. -/\n@[simp]\nprotected theorem eq {a b : R} : (a : c.Quotient) = (b : c.Quotient) ↔ c a b :=\n  Quotient.eq''\n\n"}
{"name":"RingCon.coe_add","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx y : R\n⊢ Eq (↑(HAdd.hAdd x y)) (HAdd.hAdd ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_add (x y : R) : (↑(x + y) : c.Quotient) = ↑x + ↑y :=\n  rfl\n\n"}
{"name":"RingCon.coe_mul","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Mul R\nc : RingCon R\nx y : R\n⊢ Eq (↑(HMul.hMul x y)) (HMul.hMul ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_mul (x y : R) : (↑(x * y) : c.Quotient) = ↑x * ↑y :=\n  rfl\n\n"}
{"name":"RingCon.coe_zero","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddZeroClass R\ninst✝ : Mul R\nc : RingCon R\n⊢ Eq (↑0) 0","decl":"@[simp, norm_cast]\ntheorem coe_zero : (↑(0 : R) : c.Quotient) = 0 :=\n  rfl\n\n"}
{"name":"RingCon.coe_one","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : MulOneClass R\nc : RingCon R\n⊢ Eq (↑1) 1","decl":"@[simp, norm_cast]\ntheorem coe_one : (↑(1 : R) : c.Quotient) = 1 :=\n  rfl\n\n"}
{"name":"RingCon.coe_neg","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddGroup R\ninst✝ : Mul R\nc : RingCon R\nx : R\n⊢ Eq (↑(Neg.neg x)) (Neg.neg ↑x)","decl":"@[simp, norm_cast]\ntheorem coe_neg (x : R) : (↑(-x) : c.Quotient) = -x :=\n  rfl\n\n"}
{"name":"RingCon.coe_sub","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddGroup R\ninst✝ : Mul R\nc : RingCon R\nx y : R\n⊢ Eq (↑(HSub.hSub x y)) (HSub.hSub ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem coe_sub (x y : R) : (↑(x - y) : c.Quotient) = x - y :=\n  rfl\n\n"}
{"name":"RingCon.coe_zsmul","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddGroup R\ninst✝ : Mul R\nc : RingCon R\nz : Int\nx : R\n⊢ Eq (↑(HSMul.hSMul z x)) (HSMul.hSMul z ↑x)","decl":"@[simp, norm_cast]\ntheorem coe_zsmul (z : ℤ) (x : R) : (↑(z • x) : c.Quotient) = z • (x : c.Quotient) :=\n  rfl\n\n"}
{"name":"RingCon.coe_nsmul","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoid R\ninst✝ : Mul R\nc : RingCon R\nn : Nat\nx : R\n⊢ Eq (↑(HSMul.hSMul n x)) (HSMul.hSMul n ↑x)","decl":"@[simp, norm_cast]\ntheorem coe_nsmul (n : ℕ) (x : R) : (↑(n • x) : c.Quotient) = n • (x : c.Quotient) :=\n  rfl\n\n"}
{"name":"RingCon.coe_pow","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : Add R\ninst✝ : Monoid R\nc : RingCon R\nx : R\nn : Nat\n⊢ Eq (↑(HPow.hPow x n)) (HPow.hPow (↑x) n)","decl":"@[simp, norm_cast]\ntheorem coe_pow (x : R) (n : ℕ) : (↑(x ^ n) : c.Quotient) = (x : c.Quotient) ^ n :=\n  rfl\n\n"}
{"name":"RingCon.coe_natCast","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : Mul R\nc : RingCon R\nn : Nat\n⊢ Eq ↑↑n ↑n","decl":"@[simp, norm_cast]\ntheorem coe_natCast (n : ℕ) : (↑(n : R) : c.Quotient) = n :=\n  rfl\n\n"}
{"name":"RingCon.coe_intCast","module":"Mathlib.RingTheory.Congruence.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddGroupWithOne R\ninst✝ : Mul R\nc : RingCon R\nn : Nat\n⊢ Eq ↑↑n ↑n","decl":"@[simp, norm_cast]\ntheorem coe_intCast (n : ℕ) : (↑(n : R) : c.Quotient) = n :=\n  rfl\n\n"}
