{"name":"Finset.small_alternating_pow_of_small_tripling","module":"Mathlib.Combinatorics.Additive.SmallTripling","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA : Finset G\nK : Real\nm : Nat\nhm : LE.le 3 m\nhA : LE.le (↑(HPow.hPow A 3).card) (HMul.hMul K ↑A.card)\nε : Fin m → Int\nhε : ∀ (i : Fin m), Eq (abs (ε i)) 1\n⊢ LE.le (↑(List.map (fun i => HPow.hPow A (ε i)) (List.finRange m)).prod.card) (HMul.hMul (HPow.hPow K (HMul.hMul 3 (HSub.hSub m 2))) ↑A.card)","decl":"/-- If `A` has small tripling, say with constant `K`, then `A` has small alternating powers, in the\nsense that `|A^±1 * ... * A^±1|` is at most `|A|` times a constant exponential in the number of\nterms in the product.\n\nWhen `A` is symmetric (`A⁻¹ = A`), the base of the exponential can be lowered from `K ^ 3` to `K`,\nwhere `K` is the tripling constant. See `Finset.small_pow_of_small_tripling`. -/\n@[to_additive\n\"If `A` has small tripling, say with constant `K`, then `A` has small alternating powers, in the\nsense that `|±A ± ... ± A|` is at most `|A|` times a constant exponential in the number of\nterms in the product.\n\nWhen `A` is symmetric (`-A = A`), the base of the exponential can be lowered from `K ^ 3` to `K`,\nwhere `K` is the tripling constant. See `Finset.small_nsmul_of_small_tripling`.\"]\nlemma small_alternating_pow_of_small_tripling (hm : 3 ≤ m) (hA : #(A ^ 3) ≤ K * #A) (ε : Fin m → ℤ)\n    (hε : ∀ i, |ε i| = 1) :\n    #((finRange m).map fun i ↦ A ^ ε i).prod ≤ K ^ (3 * (m - 2)) * #A := by\n  have hm₀ : m ≠ 0 := by positivity\n  have hε₀ i : ε i ≠ 0 := fun h ↦ by simpa [h] using hε i\n  obtain rfl | hA₀ := A.eq_empty_or_nonempty\n  · simp [hm₀, hε₀]\n  have hK₁ : 1 ≤ K :=\n    one_le_of_le_mul_right₀ (by positivity)\n      (hA.trans' <| by norm_cast; exact card_le_card_pow (by norm_num))\n  rw [pow_mul]\n  refine inductive_claim_mul hm (fun δ hδ ↦ ?_) ε hε\n  simp only [finRange_succ_eq_map, Nat.reduceAdd, isValue, finRange_zero, map_nil, List.map_cons,\n    succ_zero_eq_one, succ_one_eq_two, List.prod_cons, prod_nil, mul_one, ← mul_assoc]\n  simp only [zero_le_one, abs_eq, Int.reduceNeg, forall_iff_succ, isValue, succ_zero_eq_one,\n    succ_one_eq_two, IsEmpty.forall_iff, and_true] at hδ\n  have : K ≤ K ^ 3 := le_self_pow₀ hK₁ (by omega)\n  have : K ^ 2 ≤ K ^ 3 := by\n    gcongr\n    · exact hK₁\n    · norm_num\n  obtain ⟨hδ₀ | hδ₀, hδ₁ | hδ₁, hδ₂ | hδ₂⟩ := hδ <;> simp [hδ₀, hδ₁, hδ₂]\n  · simp [pow_succ] at hA\n    nlinarith\n  · nlinarith [small_pos_pos_neg_mul hA]\n  · nlinarith [small_pos_neg_pos_mul hA]\n  · nlinarith [small_pos_neg_neg_mul hA]\n  · nlinarith [small_neg_pos_pos_mul hA]\n  · nlinarith [small_neg_pos_neg_mul hA]\n  · nlinarith [small_neg_neg_pos_mul hA]\n  · simp [*, pow_succ', ← mul_inv_rev] at hA ⊢\n    nlinarith\n\n"}
{"name":"Finset.small_alternating_nsmul_of_small_tripling","module":"Mathlib.Combinatorics.Additive.SmallTripling","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA : Finset G\nK : Real\nm : Nat\nhm : LE.le 3 m\nhA : LE.le (↑(HSMul.hSMul 3 A).card) (HMul.hMul K ↑A.card)\nε : Fin m → Int\nhε : ∀ (i : Fin m), Eq (abs (ε i)) 1\n⊢ LE.le (↑(List.map (fun i => HSMul.hSMul (ε i) A) (List.finRange m)).sum.card) (HMul.hMul (HPow.hPow K (HMul.hMul 3 (HSub.hSub m 2))) ↑A.card)","decl":"/-- If `A` has small tripling, say with constant `K`, then `A` has small alternating powers, in the\nsense that `|A^±1 * ... * A^±1|` is at most `|A|` times a constant exponential in the number of\nterms in the product.\n\nWhen `A` is symmetric (`A⁻¹ = A`), the base of the exponential can be lowered from `K ^ 3` to `K`,\nwhere `K` is the tripling constant. See `Finset.small_pow_of_small_tripling`. -/\n@[to_additive\n\"If `A` has small tripling, say with constant `K`, then `A` has small alternating powers, in the\nsense that `|±A ± ... ± A|` is at most `|A|` times a constant exponential in the number of\nterms in the product.\n\nWhen `A` is symmetric (`-A = A`), the base of the exponential can be lowered from `K ^ 3` to `K`,\nwhere `K` is the tripling constant. See `Finset.small_nsmul_of_small_tripling`.\"]\nlemma small_alternating_pow_of_small_tripling (hm : 3 ≤ m) (hA : #(A ^ 3) ≤ K * #A) (ε : Fin m → ℤ)\n    (hε : ∀ i, |ε i| = 1) :\n    #((finRange m).map fun i ↦ A ^ ε i).prod ≤ K ^ (3 * (m - 2)) * #A := by\n  have hm₀ : m ≠ 0 := by positivity\n  have hε₀ i : ε i ≠ 0 := fun h ↦ by simpa [h] using hε i\n  obtain rfl | hA₀ := A.eq_empty_or_nonempty\n  · simp [hm₀, hε₀]\n  have hK₁ : 1 ≤ K :=\n    one_le_of_le_mul_right₀ (by positivity)\n      (hA.trans' <| by norm_cast; exact card_le_card_pow (by norm_num))\n  rw [pow_mul]\n  refine inductive_claim_mul hm (fun δ hδ ↦ ?_) ε hε\n  simp only [finRange_succ_eq_map, Nat.reduceAdd, isValue, finRange_zero, map_nil, List.map_cons,\n    succ_zero_eq_one, succ_one_eq_two, List.prod_cons, prod_nil, mul_one, ← mul_assoc]\n  simp only [zero_le_one, abs_eq, Int.reduceNeg, forall_iff_succ, isValue, succ_zero_eq_one,\n    succ_one_eq_two, IsEmpty.forall_iff, and_true] at hδ\n  have : K ≤ K ^ 3 := le_self_pow₀ hK₁ (by omega)\n  have : K ^ 2 ≤ K ^ 3 := by\n    gcongr\n    · exact hK₁\n    · norm_num\n  obtain ⟨hδ₀ | hδ₀, hδ₁ | hδ₁, hδ₂ | hδ₂⟩ := hδ <;> simp [hδ₀, hδ₁, hδ₂]\n  · simp [pow_succ] at hA\n    nlinarith\n  · nlinarith [small_pos_pos_neg_mul hA]\n  · nlinarith [small_pos_neg_pos_mul hA]\n  · nlinarith [small_pos_neg_neg_mul hA]\n  · nlinarith [small_neg_pos_pos_mul hA]\n  · nlinarith [small_neg_pos_neg_mul hA]\n  · nlinarith [small_neg_neg_pos_mul hA]\n  · simp [*, pow_succ', ← mul_inv_rev] at hA ⊢\n    nlinarith\n\n"}
{"name":"Finset.small_nsmul_of_small_tripling","module":"Mathlib.Combinatorics.Additive.SmallTripling","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA : Finset G\nK : Real\nm : Nat\nhm : LE.le 3 m\nhA : LE.le (↑(HSMul.hSMul 3 A).card) (HMul.hMul K ↑A.card)\nhAsymm : Eq (Neg.neg A) A\n⊢ LE.le (↑(HSMul.hSMul m A).card) (HMul.hMul (HPow.hPow K (HSub.hSub m 2)) ↑A.card)","decl":"/-- If `A` is symmetric (`A⁻¹ = A`) and has small tripling, then `A` has small powers,\nin the sense that `|A ^ m|` is at most `|A|` times a constant exponential in `m`.\n\nSee also `Finset.small_alternating_pow_of_small_tripling` for a version with a weaker constant but\nwhich encompasses non-symmetric sets. -/\n@[to_additive\n\"If `A` is symmetric (`-A = A`) and has small tripling, then `A` has small powers,\nin the sense that `|m • A|` is at most `|A|` times a constant exponential in `m`.\n\nSee also `Finset.small_alternating_nsmul_of_small_tripling` for a version with a weaker constant but\nwhich encompasses non-symmetric sets.\"]\nlemma small_pow_of_small_tripling (hm : 3 ≤ m) (hA : #(A ^ 3) ≤ K * #A) (hAsymm : A⁻¹ = A) :\n    #(A ^ m) ≤ K ^ (m - 2) * #A := by\n  have (ε : ℤ) (hε : |ε| = 1) : A ^ ε = A := by\n    obtain rfl | rfl := eq_or_eq_neg_of_abs_eq hε <;> simp [hAsymm]\n  calc\n    (#(A ^ m) : ℝ) = #((finRange m).map fun i ↦ A ^ 1).prod := by simp\n    _ ≤ K ^ (m - 2) * #A :=\n      inductive_claim_mul hm (fun δ hδ ↦ by simpa [this _ (hδ _), pow_succ'] using hA) _ (by simp)\n\n"}
{"name":"Finset.small_pow_of_small_tripling","module":"Mathlib.Combinatorics.Additive.SmallTripling","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA : Finset G\nK : Real\nm : Nat\nhm : LE.le 3 m\nhA : LE.le (↑(HPow.hPow A 3).card) (HMul.hMul K ↑A.card)\nhAsymm : Eq (Inv.inv A) A\n⊢ LE.le (↑(HPow.hPow A m).card) (HMul.hMul (HPow.hPow K (HSub.hSub m 2)) ↑A.card)","decl":"/-- If `A` is symmetric (`A⁻¹ = A`) and has small tripling, then `A` has small powers,\nin the sense that `|A ^ m|` is at most `|A|` times a constant exponential in `m`.\n\nSee also `Finset.small_alternating_pow_of_small_tripling` for a version with a weaker constant but\nwhich encompasses non-symmetric sets. -/\n@[to_additive\n\"If `A` is symmetric (`-A = A`) and has small tripling, then `A` has small powers,\nin the sense that `|m • A|` is at most `|A|` times a constant exponential in `m`.\n\nSee also `Finset.small_alternating_nsmul_of_small_tripling` for a version with a weaker constant but\nwhich encompasses non-symmetric sets.\"]\nlemma small_pow_of_small_tripling (hm : 3 ≤ m) (hA : #(A ^ 3) ≤ K * #A) (hAsymm : A⁻¹ = A) :\n    #(A ^ m) ≤ K ^ (m - 2) * #A := by\n  have (ε : ℤ) (hε : |ε| = 1) : A ^ ε = A := by\n    obtain rfl | rfl := eq_or_eq_neg_of_abs_eq hε <;> simp [hAsymm]\n  calc\n    (#(A ^ m) : ℝ) = #((finRange m).map fun i ↦ A ^ 1).prod := by simp\n    _ ≤ K ^ (m - 2) * #A :=\n      inductive_claim_mul hm (fun δ hδ ↦ by simpa [this _ (hδ _), pow_succ'] using hA) _ (by simp)\n\n"}
