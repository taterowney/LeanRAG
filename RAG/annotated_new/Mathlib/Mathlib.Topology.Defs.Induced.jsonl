{"name":"Topology.RestrictGenTopology.isOpen_of_forall_induced","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\ntX : TopologicalSpace X\nS : Set (Set X)\nself : Topology.RestrictGenTopology S\nu : Set X\na✝ : ∀ (s : Set X), Membership.mem S s → IsOpen (Set.preimage Subtype.val u)\n⊢ IsOpen u","decl":"/-- We say that restrictions of the topology on `X` to sets from a family `S`\ngenerates the original topology,\nif either of the following equivalent conditions hold:\n\n- a set which is relatively open in each `s ∈ S` is open;\n- a set which is relatively closed in each `s ∈ S` is closed;\n- for any topological space `Y`, a function `f : X → Y` is continuous\n  provided that it is continuous on each `s ∈ S`.\n-/\nstructure RestrictGenTopology (S : Set (Set X)) : Prop where\n  isOpen_of_forall_induced (u : Set X) : (∀ s ∈ S, IsOpen ((↑) ⁻¹' u : Set s)) → IsOpen u\n\n"}
{"name":"Topology.isInducing_iff","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\n⊢ Iff (Topology.IsInducing f) (Eq tX (TopologicalSpace.induced f tY))","decl":"/-- A function `f : X → Y` between topological spaces is inducing if the topology on `X` is induced\nby the topology on `Y` through `f`, meaning that a set `s : Set X` is open iff it is the preimage\nunder `f` of some open set `t : Set Y`. -/\n@[mk_iff]\nstructure IsInducing (f : X → Y) : Prop where\n  /-- The topology on the domain is equal to the induced topology. -/\n  eq_induced : tX = tY.induced f\n\n"}
{"name":"Topology.IsInducing.eq_induced","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsInducing f\n⊢ Eq tX (TopologicalSpace.induced f tY)","decl":"/-- A function `f : X → Y` between topological spaces is inducing if the topology on `X` is induced\nby the topology on `Y` through `f`, meaning that a set `s : Set X` is open iff it is the preimage\nunder `f` of some open set `t : Set Y`. -/\n@[mk_iff]\nstructure IsInducing (f : X → Y) : Prop where\n  /-- The topology on the domain is equal to the induced topology. -/\n  eq_induced : tX = tY.induced f\n\n"}
{"name":"Topology.IsEmbedding.toIsInducing","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsEmbedding f\n⊢ Topology.IsInducing f","decl":"/-- A function between topological spaces is an embedding if it is injective,\n  and for all `s : Set X`, `s` is open iff it is the preimage of an open set. -/\n@[mk_iff]\nstructure IsEmbedding (f : X → Y) extends IsInducing f : Prop where\n  /-- A topological embedding is injective. -/\n  injective : Function.Injective f\n\n"}
{"name":"Topology.IsEmbedding.injective","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsEmbedding f\n⊢ Function.Injective f","decl":"/-- A function between topological spaces is an embedding if it is injective,\n  and for all `s : Set X`, `s` is open iff it is the preimage of an open set. -/\n@[mk_iff]\nstructure IsEmbedding (f : X → Y) extends IsInducing f : Prop where\n  /-- A topological embedding is injective. -/\n  injective : Function.Injective f\n\n"}
{"name":"Topology.isEmbedding_iff","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\n⊢ Iff (Topology.IsEmbedding f) (And (Topology.IsInducing f) (Function.Injective f))","decl":"/-- A function between topological spaces is an embedding if it is injective,\n  and for all `s : Set X`, `s` is open iff it is the preimage of an open set. -/\n@[mk_iff]\nstructure IsEmbedding (f : X → Y) extends IsInducing f : Prop where\n  /-- A topological embedding is injective. -/\n  injective : Function.Injective f\n\n"}
{"name":"Topology.IsOpenEmbedding.isOpen_range","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsOpenEmbedding f\n⊢ IsOpen (Set.range f)","decl":"/-- An open embedding is an embedding with open range. -/\n@[mk_iff]\nstructure IsOpenEmbedding (f : X → Y) extends IsEmbedding f : Prop where\n  /-- The range of an open embedding is an open set. -/\n  isOpen_range : IsOpen <| range f\n\n"}
{"name":"Topology.isOpenEmbedding_iff","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\n⊢ Iff (Topology.IsOpenEmbedding f) (And (Topology.IsEmbedding f) (IsOpen (Set.range f)))","decl":"/-- An open embedding is an embedding with open range. -/\n@[mk_iff]\nstructure IsOpenEmbedding (f : X → Y) extends IsEmbedding f : Prop where\n  /-- The range of an open embedding is an open set. -/\n  isOpen_range : IsOpen <| range f\n\n"}
{"name":"Topology.IsOpenEmbedding.toIsEmbedding","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsOpenEmbedding f\n⊢ Topology.IsEmbedding f","decl":"/-- An open embedding is an embedding with open range. -/\n@[mk_iff]\nstructure IsOpenEmbedding (f : X → Y) extends IsEmbedding f : Prop where\n  /-- The range of an open embedding is an open set. -/\n  isOpen_range : IsOpen <| range f\n\n"}
{"name":"Topology.IsClosedEmbedding.toIsEmbedding","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsClosedEmbedding f\n⊢ Topology.IsEmbedding f","decl":"/-- A closed embedding is an embedding with closed image. -/\n@[mk_iff]\nstructure IsClosedEmbedding (f : X → Y) extends IsEmbedding f : Prop where\n  /-- The range of a closed embedding is a closed set. -/\n  isClosed_range : IsClosed <| range f\n\n"}
{"name":"Topology.IsClosedEmbedding.isClosed_range","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsClosedEmbedding f\n⊢ IsClosed (Set.range f)","decl":"/-- A closed embedding is an embedding with closed image. -/\n@[mk_iff]\nstructure IsClosedEmbedding (f : X → Y) extends IsEmbedding f : Prop where\n  /-- The range of a closed embedding is a closed set. -/\n  isClosed_range : IsClosed <| range f\n\n"}
{"name":"Topology.isClosedEmbedding_iff","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_1\nY : Type u_2\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\n⊢ Iff (Topology.IsClosedEmbedding f) (And (Topology.IsEmbedding f) (IsClosed (Set.range f)))","decl":"/-- A closed embedding is an embedding with closed image. -/\n@[mk_iff]\nstructure IsClosedEmbedding (f : X → Y) extends IsEmbedding f : Prop where\n  /-- The range of a closed embedding is a closed set. -/\n  isClosed_range : IsClosed <| range f\n\n"}
{"name":"Topology.IsQuotientMap.surjective","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_3\nY : Type u_4\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsQuotientMap f\n⊢ Function.Surjective f","decl":"/-- A function between topological spaces is a quotient map if it is surjective,\n  and for all `s : Set Y`, `s` is open iff its preimage is an open set. -/\n@[mk_iff isQuotientMap_iff']\nstructure IsQuotientMap {X : Type*} {Y : Type*} [tX : TopologicalSpace X] [tY : TopologicalSpace Y]\n    (f : X → Y) : Prop where\n  surjective : Function.Surjective f\n  eq_coinduced : tY = tX.coinduced f\n\n"}
{"name":"Topology.isQuotientMap_iff'","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_3\nY : Type u_4\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\n⊢ Iff (Topology.IsQuotientMap f) (And (Function.Surjective f) (Eq tY (TopologicalSpace.coinduced f tX)))","decl":"/-- A function between topological spaces is a quotient map if it is surjective,\n  and for all `s : Set Y`, `s` is open iff its preimage is an open set. -/\n@[mk_iff isQuotientMap_iff']\nstructure IsQuotientMap {X : Type*} {Y : Type*} [tX : TopologicalSpace X] [tY : TopologicalSpace Y]\n    (f : X → Y) : Prop where\n  surjective : Function.Surjective f\n  eq_coinduced : tY = tX.coinduced f\n\n"}
{"name":"Topology.IsQuotientMap.eq_coinduced","module":"Mathlib.Topology.Defs.Induced","initialProofState":"X : Type u_3\nY : Type u_4\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\nf : X → Y\nself : Topology.IsQuotientMap f\n⊢ Eq tY (TopologicalSpace.coinduced f tX)","decl":"/-- A function between topological spaces is a quotient map if it is surjective,\n  and for all `s : Set Y`, `s` is open iff its preimage is an open set. -/\n@[mk_iff isQuotientMap_iff']\nstructure IsQuotientMap {X : Type*} {Y : Type*} [tX : TopologicalSpace X] [tY : TopologicalSpace Y]\n    (f : X → Y) : Prop where\n  surjective : Function.Surjective f\n  eq_coinduced : tY = tX.coinduced f\n\n"}
