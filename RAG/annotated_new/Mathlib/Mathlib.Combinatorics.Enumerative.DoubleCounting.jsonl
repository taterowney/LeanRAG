{"name":"Finset.bipartiteBelow_swap","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\nt : Finset β\na : α\ninst✝ : DecidablePred (r a)\n⊢ Eq (Finset.bipartiteBelow (Function.swap r) t a) (Finset.bipartiteAbove r t a)","decl":"theorem bipartiteBelow_swap : t.bipartiteBelow (swap r) a = t.bipartiteAbove r a := rfl\n\n"}
{"name":"Finset.bipartiteAbove_swap","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nb : β\ninst✝ : (a : α) → Decidable (r a b)\n⊢ Eq (Finset.bipartiteAbove (Function.swap r) s b) (Finset.bipartiteBelow r s b)","decl":"theorem bipartiteAbove_swap : s.bipartiteAbove (swap r) b = s.bipartiteBelow r b := rfl\n\n"}
{"name":"Finset.coe_bipartiteBelow","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nb : β\ninst✝ : (a : α) → Decidable (r a b)\n⊢ Eq (↑(Finset.bipartiteBelow r s b)) (setOf fun a => And (Membership.mem s a) (r a b))","decl":"@[simp, norm_cast]\ntheorem coe_bipartiteBelow : s.bipartiteBelow r b = ({a ∈ s | r a b} : Set α) := coe_filter _ _\n\n"}
{"name":"Finset.coe_bipartiteAbove","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\nt : Finset β\na : α\ninst✝ : DecidablePred (r a)\n⊢ Eq (↑(Finset.bipartiteAbove r t a)) (setOf fun b => And (Membership.mem t b) (r a b))","decl":"@[simp, norm_cast]\ntheorem coe_bipartiteAbove : t.bipartiteAbove r a = ({b ∈ t | r a b} : Set β) := coe_filter _ _\n\n"}
{"name":"Finset.mem_bipartiteBelow","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nb : β\ninst✝ : (a : α) → Decidable (r a b)\na : α\n⊢ Iff (Membership.mem (Finset.bipartiteBelow r s b) a) (And (Membership.mem s a) (r a b))","decl":"@[simp]\ntheorem mem_bipartiteBelow {a : α} : a ∈ s.bipartiteBelow r b ↔ a ∈ s ∧ r a b := mem_filter\n\n"}
{"name":"Finset.mem_bipartiteAbove","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\nt : Finset β\na : α\ninst✝ : DecidablePred (r a)\nb : β\n⊢ Iff (Membership.mem (Finset.bipartiteAbove r t a) b) (And (Membership.mem t b) (r a b))","decl":"@[simp]\ntheorem mem_bipartiteAbove {b : β} : b ∈ t.bipartiteAbove r a ↔ b ∈ t ∧ r a b := mem_filter\n\n"}
{"name":"Finset.sum_sum_bipartiteAbove_eq_sum_sum_bipartiteBelow","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\ninst✝¹ : AddCommMonoid R\nf : α → β → R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\n⊢ Eq (s.sum fun a => (Finset.bipartiteAbove r t a).sum fun b => f a b) (t.sum fun b => (Finset.bipartiteBelow r s b).sum fun a => f a b)","decl":"@[to_additive]\ntheorem prod_prod_bipartiteAbove_eq_prod_prod_bipartiteBelow\n    [CommMonoid R] (f : α → β → R) [∀ a b, Decidable (r a b)] :\n    ∏ a ∈ s, ∏ b ∈ t.bipartiteAbove r a, f a b = ∏ b ∈ t, ∏ a ∈ s.bipartiteBelow r b, f a b := by\n  simp_rw [bipartiteAbove, bipartiteBelow, prod_filter]\n  exact prod_comm\n\n"}
{"name":"Finset.prod_prod_bipartiteAbove_eq_prod_prod_bipartiteBelow","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\ninst✝¹ : CommMonoid R\nf : α → β → R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\n⊢ Eq (s.prod fun a => (Finset.bipartiteAbove r t a).prod fun b => f a b) (t.prod fun b => (Finset.bipartiteBelow r s b).prod fun a => f a b)","decl":"@[to_additive]\ntheorem prod_prod_bipartiteAbove_eq_prod_prod_bipartiteBelow\n    [CommMonoid R] (f : α → β → R) [∀ a b, Decidable (r a b)] :\n    ∏ a ∈ s, ∏ b ∈ t.bipartiteAbove r a, f a b = ∏ b ∈ t, ∏ a ∈ s.bipartiteBelow r b, f a b := by\n  simp_rw [bipartiteAbove, bipartiteBelow, prod_filter]\n  exact prod_comm\n\n"}
{"name":"Finset.sum_card_bipartiteAbove_eq_sum_card_bipartiteBelow","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\n⊢ Eq (s.sum fun a => (Finset.bipartiteAbove r t a).card) (t.sum fun b => (Finset.bipartiteBelow r s b).card)","decl":"theorem sum_card_bipartiteAbove_eq_sum_card_bipartiteBelow [∀ a b, Decidable (r a b)] :\n    (∑ a ∈ s, #(t.bipartiteAbove r a)) = ∑ b ∈ t, #(s.bipartiteBelow r b) := by\n  simp_rw [card_eq_sum_ones, sum_sum_bipartiteAbove_eq_sum_sum_bipartiteBelow]\n\n"}
{"name":"Finset.card_nsmul_le_card_nsmul","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\ninst✝¹ : OrderedSemiring R\nm n : R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhm : ∀ (a : α), Membership.mem s a → LE.le m ↑(Finset.bipartiteAbove r t a).card\nhn : ∀ (b : β), Membership.mem t b → LE.le (↑(Finset.bipartiteBelow r s b).card) n\n⊢ LE.le (HSMul.hSMul s.card m) (HSMul.hSMul t.card n)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a lower bound on the number of edges while the RHS\nis an upper bound. -/\ntheorem card_nsmul_le_card_nsmul [∀ a b, Decidable (r a b)]\n    (hm : ∀ a ∈ s, m ≤ #(t.bipartiteAbove r a))\n    (hn : ∀ b ∈ t, #(s.bipartiteBelow r b) ≤ n) : #s • m ≤ #t • n :=\n  calc\n    _ ≤ ∑ a ∈ s, (#(t.bipartiteAbove r a) : R) := s.card_nsmul_le_sum _ _ hm\n    _ = ∑ b ∈ t, (#(s.bipartiteBelow r b) : R) := by\n      norm_cast; rw [sum_card_bipartiteAbove_eq_sum_card_bipartiteBelow]\n    _ ≤ _ := t.sum_le_card_nsmul _ _ hn\n\n"}
{"name":"Finset.card_nsmul_le_card_nsmul'","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\ninst✝¹ : OrderedSemiring R\nm n : R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhn : ∀ (b : β), Membership.mem t b → LE.le n ↑(Finset.bipartiteBelow r s b).card\nhm : ∀ (a : α), Membership.mem s a → LE.le (↑(Finset.bipartiteAbove r t a).card) m\n⊢ LE.le (HSMul.hSMul t.card n) (HSMul.hSMul s.card m)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a lower bound on the number of edges while the RHS\nis an upper bound. -/\ntheorem card_nsmul_le_card_nsmul' [∀ a b, Decidable (r a b)]\n    (hn : ∀ b ∈ t, n ≤ #(s.bipartiteBelow r b))\n    (hm : ∀ a ∈ s, #(t.bipartiteAbove r a) ≤ m) : #t • n ≤ #s • m :=\n  card_nsmul_le_card_nsmul (swap r) hn hm\n\n"}
{"name":"Finset.card_nsmul_lt_card_nsmul_of_lt_of_le","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : StrictOrderedSemiring R\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhs : s.Nonempty\nhm : ∀ (a : α), Membership.mem s a → LT.lt m ↑(Finset.bipartiteAbove r t a).card\nhn : ∀ (b : β), Membership.mem t b → LE.le (↑(Finset.bipartiteBelow r s b).card) n\n⊢ LT.lt (HSMul.hSMul s.card m) (HSMul.hSMul t.card n)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a strict lower bound on the number of edges while\nthe RHS is an upper bound. -/\ntheorem card_nsmul_lt_card_nsmul_of_lt_of_le [∀ a b, Decidable (r a b)] (hs : s.Nonempty)\n    (hm : ∀ a ∈ s, m < #(t.bipartiteAbove r a))\n    (hn : ∀ b ∈ t, #(s.bipartiteBelow r b) ≤ n) : #s • m < #t • n :=\n  calc\n    _ = ∑ _a ∈ s, m := by rw [sum_const]\n    _ < ∑ a ∈ s, (#(t.bipartiteAbove r a) : R) := sum_lt_sum_of_nonempty hs hm\n    _ = ∑ b ∈ t, (#(s.bipartiteBelow r b) : R) := by\n      norm_cast; rw [sum_card_bipartiteAbove_eq_sum_card_bipartiteBelow]\n    _ ≤ _ := t.sum_le_card_nsmul _ _ hn\n\n"}
{"name":"Finset.card_nsmul_lt_card_nsmul_of_le_of_lt","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : StrictOrderedSemiring R\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nht : t.Nonempty\nhm : ∀ (a : α), Membership.mem s a → LE.le m ↑(Finset.bipartiteAbove r t a).card\nhn : ∀ (b : β), Membership.mem t b → LT.lt (↑(Finset.bipartiteBelow r s b).card) n\n⊢ LT.lt (HSMul.hSMul s.card m) (HSMul.hSMul t.card n)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a lower bound on the number of edges while the RHS\nis a strict upper bound. -/\ntheorem card_nsmul_lt_card_nsmul_of_le_of_lt [∀ a b, Decidable (r a b)] (ht : t.Nonempty)\n    (hm : ∀ a ∈ s, m ≤ #(t.bipartiteAbove r a))\n    (hn : ∀ b ∈ t, #(s.bipartiteBelow r b) < n) : #s • m < #t • n :=\n  calc\n    _ ≤ ∑ a ∈ s, (#(t.bipartiteAbove r a) : R) := s.card_nsmul_le_sum _ _ hm\n    _ = ∑ b ∈ t, (#(s.bipartiteBelow r b) : R) := by\n      norm_cast; rw [sum_card_bipartiteAbove_eq_sum_card_bipartiteBelow]\n    _ < ∑ _b ∈ t, n := sum_lt_sum_of_nonempty ht hn\n    _ = _ := sum_const _\n\n"}
{"name":"Finset.card_nsmul_lt_card_nsmul_of_lt_of_le'","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : StrictOrderedSemiring R\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nht : t.Nonempty\nhn : ∀ (b : β), Membership.mem t b → LT.lt n ↑(Finset.bipartiteBelow r s b).card\nhm : ∀ (a : α), Membership.mem s a → LE.le (↑(Finset.bipartiteAbove r t a).card) m\n⊢ LT.lt (HSMul.hSMul t.card n) (HSMul.hSMul s.card m)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a strict lower bound on the number of edges while\nthe RHS is an upper bound. -/\ntheorem card_nsmul_lt_card_nsmul_of_lt_of_le' [∀ a b, Decidable (r a b)] (ht : t.Nonempty)\n    (hn : ∀ b ∈ t, n < #(s.bipartiteBelow r b))\n    (hm : ∀ a ∈ s, #(t.bipartiteAbove r a) ≤ m) : #t • n < #s • m :=\n  card_nsmul_lt_card_nsmul_of_lt_of_le (swap r) ht hn hm\n\n"}
{"name":"Finset.card_nsmul_lt_card_nsmul_of_le_of_lt'","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"R : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝¹ : StrictOrderedSemiring R\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : R\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhs : s.Nonempty\nhn : ∀ (b : β), Membership.mem t b → LE.le n ↑(Finset.bipartiteBelow r s b).card\nhm : ∀ (a : α), Membership.mem s a → LT.lt (↑(Finset.bipartiteAbove r t a).card) m\n⊢ LT.lt (HSMul.hSMul t.card n) (HSMul.hSMul s.card m)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a lower bound on the number of edges while the RHS\nis a strict upper bound. -/\ntheorem card_nsmul_lt_card_nsmul_of_le_of_lt' [∀ a b, Decidable (r a b)] (hs : s.Nonempty)\n    (hn : ∀ b ∈ t, n ≤ #(s.bipartiteBelow r b))\n    (hm : ∀ a ∈ s, #(t.bipartiteAbove r a) < m) : #t • n < #s • m :=\n  card_nsmul_lt_card_nsmul_of_le_of_lt (swap r) hs hn hm\n\n"}
{"name":"Finset.card_mul_le_card_mul","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : Nat\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhm : ∀ (a : α), Membership.mem s a → LE.le m (Finset.bipartiteAbove r t a).card\nhn : ∀ (b : β), Membership.mem t b → LE.le (Finset.bipartiteBelow r s b).card n\n⊢ LE.le (HMul.hMul s.card m) (HMul.hMul t.card n)","decl":"/-- **Double counting** argument.\n\nConsidering `r` as a bipartite graph, the LHS is a lower bound on the number of edges while the RHS\nis an upper bound. -/\ntheorem card_mul_le_card_mul [∀ a b, Decidable (r a b)]\n    (hm : ∀ a ∈ s, m ≤ #(t.bipartiteAbove r a))\n    (hn : ∀ b ∈ t, #(s.bipartiteBelow r b) ≤ n) : #s * m ≤ #t * n :=\n  card_nsmul_le_card_nsmul _ hm hn\n\n"}
{"name":"Finset.card_mul_le_card_mul'","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : Nat\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhn : ∀ (b : β), Membership.mem t b → LE.le n (Finset.bipartiteBelow r s b).card\nhm : ∀ (a : α), Membership.mem s a → LE.le (Finset.bipartiteAbove r t a).card m\n⊢ LE.le (HMul.hMul t.card n) (HMul.hMul s.card m)","decl":"theorem card_mul_le_card_mul' [∀ a b, Decidable (r a b)]\n    (hn : ∀ b ∈ t, n ≤ #(s.bipartiteBelow r b))\n    (hm : ∀ a ∈ s, #(t.bipartiteAbove r a) ≤ m) : #t * n ≤ #s * m :=\n  card_nsmul_le_card_nsmul' _ hn hm\n\n"}
{"name":"Finset.card_mul_eq_card_mul","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\nm n : Nat\ninst✝ : (a : α) → (b : β) → Decidable (r a b)\nhm : ∀ (a : α), Membership.mem s a → Eq (Finset.bipartiteAbove r t a).card m\nhn : ∀ (b : β), Membership.mem t b → Eq (Finset.bipartiteBelow r s b).card n\n⊢ Eq (HMul.hMul s.card m) (HMul.hMul t.card n)","decl":"theorem card_mul_eq_card_mul [∀ a b, Decidable (r a b)]\n    (hm : ∀ a ∈ s, #(t.bipartiteAbove r a) = m)\n    (hn : ∀ b ∈ t, #(s.bipartiteBelow r b) = n) : #s * m = #t * n :=\n  (card_mul_le_card_mul _ (fun a ha ↦ (hm a ha).ge) fun b hb ↦ (hn b hb).le).antisymm <|\n    card_mul_le_card_mul' _ (fun a ha ↦ (hn a ha).ge) fun b hb ↦ (hm b hb).le\n\n"}
{"name":"Finset.card_le_card_of_forall_subsingleton","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\nhs : ∀ (a : α), Membership.mem s a → Exists fun b => And (Membership.mem t b) (r a b)\nht : ∀ (b : β), Membership.mem t b → (setOf fun a => And (Membership.mem s a) (r a b)).Subsingleton\n⊢ LE.le s.card t.card","decl":"theorem card_le_card_of_forall_subsingleton (hs : ∀ a ∈ s, ∃ b, b ∈ t ∧ r a b)\n    (ht : ∀ b ∈ t, ({ a ∈ s | r a b } : Set α).Subsingleton) : #s ≤ #t := by\n  classical\n    rw [← mul_one #s, ← mul_one #t]\n    exact card_mul_le_card_mul r\n      (fun a h ↦ card_pos.2 (by\n        rw [← coe_nonempty, coe_bipartiteAbove]\n        exact hs _ h : (t.bipartiteAbove r a).Nonempty))\n      (fun b h ↦ card_le_one.2 (by\n        simp_rw [mem_bipartiteBelow]\n        exact ht _ h))\n\n"}
{"name":"Finset.card_le_card_of_forall_subsingleton'","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\nr : α → β → Prop\ns : Finset α\nt : Finset β\nht : ∀ (b : β), Membership.mem t b → Exists fun a => And (Membership.mem s a) (r a b)\nhs : ∀ (a : α), Membership.mem s a → (setOf fun b => And (Membership.mem t b) (r a b)).Subsingleton\n⊢ LE.le t.card s.card","decl":"theorem card_le_card_of_forall_subsingleton' (ht : ∀ b ∈ t, ∃ a, a ∈ s ∧ r a b)\n    (hs : ∀ a ∈ s, ({ b ∈ t | r a b } : Set β).Subsingleton) : #t ≤ #s :=\n  card_le_card_of_forall_subsingleton (swap r) ht hs\n\n"}
{"name":"Fintype.card_le_card_of_leftTotal_unique","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nr : α → β → Prop\nh₁ : Relator.LeftTotal r\nh₂ : Relator.LeftUnique r\n⊢ LE.le (Fintype.card α) (Fintype.card β)","decl":"theorem card_le_card_of_leftTotal_unique (h₁ : LeftTotal r) (h₂ : LeftUnique r) :\n    Fintype.card α ≤ Fintype.card β :=\n  card_le_card_of_forall_subsingleton r (by simpa using h₁) fun _ _ _ ha₁ _ ha₂ ↦ h₂ ha₁.2 ha₂.2\n\n"}
{"name":"Fintype.card_le_card_of_rightTotal_unique","module":"Mathlib.Combinatorics.Enumerative.DoubleCounting","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nr : α → β → Prop\nh₁ : Relator.RightTotal r\nh₂ : Relator.RightUnique r\n⊢ LE.le (Fintype.card β) (Fintype.card α)","decl":"theorem card_le_card_of_rightTotal_unique (h₁ : RightTotal r) (h₂ : RightUnique r) :\n    Fintype.card β ≤ Fintype.card α :=\n  card_le_card_of_forall_subsingleton' r (by simpa using h₁) fun _ _ _ ha₁ _ ha₂ ↦ h₂ ha₁.2 ha₂.2\n\n"}
