{"name":"OrderedSMul.lt_of_smul_lt_smul_of_pos","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : OrderedSemiring R\ninst✝¹ : OrderedAddCommMonoid M\ninst✝ : SMulWithZero R M\nself : OrderedSMul R M\na b : M\nc : R\na✝¹ : LT.lt (HSMul.hSMul c a) (HSMul.hSMul c b)\na✝ : LT.lt 0 c\n⊢ LT.lt a b","decl":"/-- The ordered scalar product property is when an ordered additive commutative monoid\nwith a partial order has a scalar multiplication which is compatible with the order. Note that this\nis different from `IsOrderedSMul`, which uses `≤`, has no semiring assumption, and has no positivity\nconstraint on the defining conditions.\n-/\nclass OrderedSMul (R M : Type*) [OrderedSemiring R] [OrderedAddCommMonoid M] [SMulWithZero R M] :\n  Prop where\n  /-- Scalar multiplication by positive elements preserves the order. -/\n  protected smul_lt_smul_of_pos : ∀ {a b : M}, ∀ {c : R}, a < b → 0 < c → c • a < c • b\n  /-- If `c • a < c • b` for some positive `c`, then `a < b`. -/\n  protected lt_of_smul_lt_smul_of_pos : ∀ {a b : M}, ∀ {c : R}, c • a < c • b → 0 < c → a < b\n\n"}
{"name":"OrderedSMul.smul_lt_smul_of_pos","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : OrderedSemiring R\ninst✝¹ : OrderedAddCommMonoid M\ninst✝ : SMulWithZero R M\nself : OrderedSMul R M\na b : M\nc : R\na✝¹ : LT.lt a b\na✝ : LT.lt 0 c\n⊢ LT.lt (HSMul.hSMul c a) (HSMul.hSMul c b)","decl":"/-- The ordered scalar product property is when an ordered additive commutative monoid\nwith a partial order has a scalar multiplication which is compatible with the order. Note that this\nis different from `IsOrderedSMul`, which uses `≤`, has no semiring assumption, and has no positivity\nconstraint on the defining conditions.\n-/\nclass OrderedSMul (R M : Type*) [OrderedSemiring R] [OrderedAddCommMonoid M] [SMulWithZero R M] :\n  Prop where\n  /-- Scalar multiplication by positive elements preserves the order. -/\n  protected smul_lt_smul_of_pos : ∀ {a b : M}, ∀ {c : R}, a < b → 0 < c → c • a < c • b\n  /-- If `c • a < c • b` for some positive `c`, then `a < b`. -/\n  protected lt_of_smul_lt_smul_of_pos : ∀ {a b : M}, ∀ {c : R}, c • a < c • b → 0 < c → a < b\n\n"}
{"name":"OrderedSMul.toPosSMulStrictMono","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝³ : OrderedSemiring R\ninst✝² : OrderedAddCommMonoid M\ninst✝¹ : SMulWithZero R M\ninst✝ : OrderedSMul R M\n⊢ PosSMulStrictMono R M","decl":"instance OrderedSMul.toPosSMulStrictMono : PosSMulStrictMono R M where\n  elim _a ha _b₁ _b₂ hb := OrderedSMul.smul_lt_smul_of_pos hb ha\n\n"}
{"name":"OrderedSMul.toPosSMulReflectLT","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝³ : OrderedSemiring R\ninst✝² : OrderedAddCommMonoid M\ninst✝¹ : SMulWithZero R M\ninst✝ : OrderedSMul R M\n⊢ PosSMulReflectLT R M","decl":"instance OrderedSMul.toPosSMulReflectLT : PosSMulReflectLT R M :=\n  PosSMulReflectLT.of_pos fun _a ha _b₁ _b₂ h ↦ OrderedSMul.lt_of_smul_lt_smul_of_pos h ha\n\n"}
{"name":"OrderDual.instOrderedSMul","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝³ : OrderedSemiring R\ninst✝² : OrderedAddCommMonoid M\ninst✝¹ : SMulWithZero R M\ninst✝ : OrderedSMul R M\n⊢ OrderedSMul R (OrderDual M)","decl":"instance OrderDual.instOrderedSMul : OrderedSMul R Mᵒᵈ where\n  smul_lt_smul_of_pos := OrderedSMul.smul_lt_smul_of_pos (M := M)\n  lt_of_smul_lt_smul_of_pos := OrderedSMul.lt_of_smul_lt_smul_of_pos (M := M)\n\n"}
{"name":"OrderedSMul.mk''","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"𝕜 : Type u_2\nM : Type u_4\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : LinearOrderedAddCommMonoid M\ninst✝ : SMulWithZero 𝕜 M\nh : ∀ ⦃c : 𝕜⦄, LT.lt 0 c → StrictMono fun a => HSMul.hSMul c a\n⊢ OrderedSMul 𝕜 M","decl":"/-- To prove that a linear ordered monoid is an ordered module, it suffices to verify only the first\naxiom of `OrderedSMul`. -/\ntheorem OrderedSMul.mk'' [OrderedSemiring 𝕜] [LinearOrderedAddCommMonoid M] [SMulWithZero 𝕜 M]\n    (h : ∀ ⦃c : 𝕜⦄, 0 < c → StrictMono fun a : M => c • a) : OrderedSMul 𝕜 M :=\n  { smul_lt_smul_of_pos := fun hab hc => h hc hab\n    lt_of_smul_lt_smul_of_pos := fun hab hc => (h hc).lt_iff_lt.1 hab }\n\n"}
{"name":"Nat.orderedSMul","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"M : Type u_4\ninst✝ : LinearOrderedCancelAddCommMonoid M\n⊢ OrderedSMul Nat M","decl":"instance Nat.orderedSMul [LinearOrderedCancelAddCommMonoid M] : OrderedSMul ℕ M :=\n  OrderedSMul.mk'' fun n hn a b hab => by\n    cases n with\n    | zero => cases hn\n    | succ n =>\n      induction n with\n      | zero => dsimp; rwa [one_nsmul, one_nsmul]\n      | succ n ih => simp only [succ_nsmul _ n.succ, _root_.add_lt_add (ih n.succ_pos) hab]\n\n"}
{"name":"Int.orderedSMul","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"M : Type u_4\ninst✝ : LinearOrderedAddCommGroup M\n⊢ OrderedSMul Int M","decl":"instance Int.orderedSMul [LinearOrderedAddCommGroup M] : OrderedSMul ℤ M :=\n  OrderedSMul.mk'' fun n hn => by\n    cases n\n    · simp only [Int.ofNat_eq_coe, Int.natCast_pos, natCast_zsmul] at hn ⊢\n      exact strictMono_smul_left_of_pos hn\n    · cases (Int.negSucc_not_pos _).1 hn\n\n"}
{"name":"LinearOrderedSemiring.toOrderedSMul","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"R : Type u_3\ninst✝ : LinearOrderedSemiring R\n⊢ OrderedSMul R R","decl":"instance LinearOrderedSemiring.toOrderedSMul : OrderedSMul R R :=\n  OrderedSMul.mk'' fun _ => strictMono_mul_left_of_pos\n\n"}
{"name":"OrderedSMul.mk'","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"𝕜 : Type u_2\nM : Type u_4\ninst✝² : LinearOrderedSemifield 𝕜\ninst✝¹ : OrderedAddCommMonoid M\ninst✝ : MulActionWithZero 𝕜 M\nh : ∀ ⦃a b : M⦄ ⦃c : 𝕜⦄, LT.lt a b → LT.lt 0 c → LE.le (HSMul.hSMul c a) (HSMul.hSMul c b)\n⊢ OrderedSMul 𝕜 M","decl":"/-- To prove that a vector space over a linear ordered field is ordered, it suffices to verify only\nthe first axiom of `OrderedSMul`. -/\ntheorem OrderedSMul.mk' (h : ∀ ⦃a b : M⦄ ⦃c : 𝕜⦄, a < b → 0 < c → c • a ≤ c • b) :\n    OrderedSMul 𝕜 M := by\n  have hlt' : ∀ (a b : M) (c : 𝕜), a < b → 0 < c → c • a < c • b := by\n    refine fun a b c hab hc => (h hab hc).lt_of_ne ?_\n    rw [Ne, hc.ne'.isUnit.smul_left_cancel]\n    exact hab.ne\n  refine ⟨fun {a b c} => hlt' a b c, fun {a b c hab hc} => ?_⟩\n  obtain ⟨c, rfl⟩ := hc.ne'.isUnit\n  rw [← inv_smul_smul c a, ← inv_smul_smul c b]\n  refine hlt' _ _ _ hab (pos_of_mul_pos_right ?_ hc.le)\n  simp only [c.mul_inv, zero_lt_one]\n\n"}
{"name":"instOrderedSMulProd","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"𝕜 : Type u_2\nM : Type u_4\nN : Type u_5\ninst✝⁶ : LinearOrderedSemifield 𝕜\ninst✝⁵ : OrderedAddCommMonoid M\ninst✝⁴ : OrderedAddCommMonoid N\ninst✝³ : MulActionWithZero 𝕜 M\ninst✝² : MulActionWithZero 𝕜 N\ninst✝¹ : OrderedSMul 𝕜 M\ninst✝ : OrderedSMul 𝕜 N\n⊢ OrderedSMul 𝕜 (Prod M N)","decl":"instance [OrderedSMul 𝕜 M] [OrderedSMul 𝕜 N] : OrderedSMul 𝕜 (M × N) :=\n  OrderedSMul.mk' fun _ _ _ h hc =>\n    ⟨smul_le_smul_of_nonneg_left h.1.1 hc.le, smul_le_smul_of_nonneg_left h.1.2 hc.le⟩\n\n"}
{"name":"Pi.orderedSMul","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"ι : Type u_1\n𝕜 : Type u_2\ninst✝³ : LinearOrderedSemifield 𝕜\nM : ι → Type u_6\ninst✝² : (i : ι) → OrderedAddCommMonoid (M i)\ninst✝¹ : (i : ι) → MulActionWithZero 𝕜 (M i)\ninst✝ : ∀ (i : ι), OrderedSMul 𝕜 (M i)\n⊢ OrderedSMul 𝕜 ((i : ι) → M i)","decl":"instance Pi.orderedSMul {M : ι → Type*} [∀ i, OrderedAddCommMonoid (M i)]\n    [∀ i, MulActionWithZero 𝕜 (M i)] [∀ i, OrderedSMul 𝕜 (M i)] : OrderedSMul 𝕜 (∀ i, M i) :=\n  OrderedSMul.mk' fun _ _ _ h hc i => smul_le_smul_of_nonneg_left (h.le i) hc.le\n\n"}
{"name":"inf_eq_half_smul_add_sub_abs_sub","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝⁵ : Semiring α\ninst✝⁴ : Invertible 2\ninst✝³ : Lattice β\ninst✝² : AddCommGroup β\ninst✝¹ : Module α β\ninst✝ : AddLeftMono β\nx y : β\n⊢ Eq (Min.min x y) (HSMul.hSMul (Invertible.invOf 2) (HSub.hSub (HAdd.hAdd x y) (abs (HSub.hSub y x))))","decl":"lemma inf_eq_half_smul_add_sub_abs_sub (x y : β) : x ⊓ y = (⅟2 : α) • (x + y - |y - x|) := by\n  rw [← two_nsmul_inf_eq_add_sub_abs_sub x y, two_smul, ← two_smul α,\n    smul_smul, invOf_mul_self, one_smul]\n\n"}
{"name":"sup_eq_half_smul_add_add_abs_sub","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝⁵ : Semiring α\ninst✝⁴ : Invertible 2\ninst✝³ : Lattice β\ninst✝² : AddCommGroup β\ninst✝¹ : Module α β\ninst✝ : AddLeftMono β\nx y : β\n⊢ Eq (Max.max x y) (HSMul.hSMul (Invertible.invOf 2) (HAdd.hAdd (HAdd.hAdd x y) (abs (HSub.hSub y x))))","decl":"lemma sup_eq_half_smul_add_add_abs_sub (x y : β) : x ⊔ y = (⅟2 : α) • (x + y + |y - x|) := by\n  rw [← two_nsmul_sup_eq_add_add_abs_sub x y, two_smul, ← two_smul α,\n    smul_smul, invOf_mul_self, one_smul]\n\n"}
{"name":"inf_eq_half_smul_add_sub_abs_sub'","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝⁵ : DivisionSemiring α\ninst✝⁴ : NeZero 2\ninst✝³ : Lattice β\ninst✝² : AddCommGroup β\ninst✝¹ : Module α β\ninst✝ : AddLeftMono β\nx y : β\n⊢ Eq (Min.min x y) (HSMul.hSMul (Inv.inv 2) (HSub.hSub (HAdd.hAdd x y) (abs (HSub.hSub y x))))","decl":"lemma inf_eq_half_smul_add_sub_abs_sub' (x y : β) : x ⊓ y = (2⁻¹ : α) • (x + y - |y - x|) := by\n  letI := invertibleOfNonzero (two_ne_zero' α)\n  exact inf_eq_half_smul_add_sub_abs_sub α x y\n\n"}
{"name":"sup_eq_half_smul_add_add_abs_sub'","module":"Mathlib.Algebra.Order.Module.OrderedSMul","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝⁵ : DivisionSemiring α\ninst✝⁴ : NeZero 2\ninst✝³ : Lattice β\ninst✝² : AddCommGroup β\ninst✝¹ : Module α β\ninst✝ : AddLeftMono β\nx y : β\n⊢ Eq (Max.max x y) (HSMul.hSMul (Inv.inv 2) (HAdd.hAdd (HAdd.hAdd x y) (abs (HSub.hSub y x))))","decl":"lemma sup_eq_half_smul_add_add_abs_sub' (x y : β) : x ⊔ y = (2⁻¹ : α) • (x + y + |y - x|) := by\n  letI := invertibleOfNonzero (two_ne_zero' α)\n  exact sup_eq_half_smul_add_add_abs_sub α x y\n\n"}
