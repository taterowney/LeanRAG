{"name":"contDiffOn_fderiv_coord_change","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nn : WithTop ENat\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I (HAdd.hAdd n 1) M\ni j : ↑(atlas H M)\n⊢ ContDiffOn 𝕜 n (fderivWithin 𝕜 (Function.comp ↑((↑j).extend I) ↑((↑i).extend I).symm) (Set.range ↑I)) (((↑i).extend I).symm.trans ((↑j).extend I)).source","decl":"/-- Auxiliary lemma for tangent spaces: the derivative of a coordinate change between two charts is\n  `C^n` on its source. -/\ntheorem contDiffOn_fderiv_coord_change [IsManifold I (n + 1) M]\n    (i j : atlas H M) :\n    ContDiffOn 𝕜 n (fderivWithin 𝕜 (j.1.extend I ∘ (i.1.extend I).symm) (range I))\n      ((i.1.extend I).symm ≫ j.1.extend I).source := by\n  have h : ((i.1.extend I).symm ≫ j.1.extend I).source ⊆ range I := by\n    rw [i.1.extend_coord_change_source]; apply image_subset_range\n  intro x hx\n  refine (ContDiffWithinAt.fderivWithin_right ?_ I.uniqueDiffOn le_rfl\n    <| h hx).mono h\n  refine (PartialHomeomorph.contDiffOn_extend_coord_change (subset_maximalAtlas j.2)\n    (subset_maximalAtlas i.2) x hx).mono_of_mem_nhdsWithin ?_\n  exact i.1.extend_coord_change_source_mem_nhdsWithin j.1 hx\n\n"}
{"name":"tangentBundleCore_indexAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nx : M\n⊢ Eq ((tangentBundleCore I M).indexAt x) (achart H x)","decl":"variable (I M) in\n/-- Let `M` be a `C^1` manifold with model `I` on `(E, H)`.\nThen `tangentBundleCore I M` is the vector bundle core for the tangent bundle over `M`.\nIt is indexed by the atlas of `M`, with fiber `E` and its change of coordinates from the chart `i`\nto the chart `j` at point `x : M` is the derivative of the composite\n```\n  I.symm   i.symm    j     I\nE -----> H -----> M --> H --> E\n```\nwithin the set `range I ⊆ E` at `I (i x) : E`. -/\n@[simps indexAt coordChange]\ndef tangentBundleCore : VectorBundleCore 𝕜 M E (atlas H M) where\n  baseSet i := i.1.source\n  isOpen_baseSet i := i.1.open_source\n  indexAt := achart H\n  mem_baseSet_at := mem_chart_source H\n  coordChange i j x :=\n    fderivWithin 𝕜 (j.1.extend I ∘ (i.1.extend I).symm) (range I) (i.1.extend I x)\n  coordChange_self i x hx v := by\n    dsimp only\n    rw [Filter.EventuallyEq.fderivWithin_eq, fderivWithin_id', ContinuousLinearMap.id_apply]\n    · exact I.uniqueDiffWithinAt_image\n    · filter_upwards [i.1.extend_target_mem_nhdsWithin hx] with y hy\n      exact (i.1.extend I).right_inv hy\n    · simp_rw [Function.comp_apply, i.1.extend_left_inv hx]\n  continuousOn_coordChange i j := by\n    have : IsManifold I (0 + 1) M := by simp; infer_instance\n    refine (contDiffOn_fderiv_coord_change (n := 0) i j).continuousOn.comp\n      (i.1.continuousOn_extend.mono ?_) ?_\n    · rw [i.1.extend_source]; exact inter_subset_left\n    simp_rw [← i.1.extend_image_source_inter, mapsTo_image]\n  coordChange_comp := by\n    have : IsManifold I (0 + 1) M := by simp; infer_instance\n    rintro i j k x ⟨⟨hxi, hxj⟩, hxk⟩ v\n    rw [fderivWithin_fderivWithin, Filter.EventuallyEq.fderivWithin_eq]\n    · have := i.1.extend_preimage_mem_nhds (I := I) hxi (j.1.extend_source_mem_nhds (I := I) hxj)\n      filter_upwards [nhdsWithin_le_nhds this] with y hy\n      simp_rw [Function.comp_apply, (j.1.extend I).left_inv hy]\n    · simp_rw [Function.comp_apply, i.1.extend_left_inv hxi, j.1.extend_left_inv hxj]\n    · exact (contDiffWithinAt_extend_coord_change' (subset_maximalAtlas k.2)\n        (subset_maximalAtlas j.2) hxk hxj).differentiableWithinAt le_rfl\n    · exact (contDiffWithinAt_extend_coord_change' (subset_maximalAtlas j.2)\n        (subset_maximalAtlas i.2) hxj hxi).differentiableWithinAt le_rfl\n    · intro x _; exact mem_range_self _\n    · exact I.uniqueDiffWithinAt_image\n    · rw [Function.comp_apply, i.1.extend_left_inv hxi]\n\n-- Porting note: moved to a separate `simp high` lemma b/c `simp` can simplify the LHS\n"}
{"name":"tangentBundleCore_coordChange","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\ni j : ↑(atlas H M)\nx : M\n⊢ Eq ((tangentBundleCore I M).coordChange i j x) (fderivWithin 𝕜 (Function.comp ↑((↑j).extend I) ↑((↑i).extend I).symm) (Set.range ↑I) (↑((↑i).extend I) x))","decl":"variable (I M) in\n/-- Let `M` be a `C^1` manifold with model `I` on `(E, H)`.\nThen `tangentBundleCore I M` is the vector bundle core for the tangent bundle over `M`.\nIt is indexed by the atlas of `M`, with fiber `E` and its change of coordinates from the chart `i`\nto the chart `j` at point `x : M` is the derivative of the composite\n```\n  I.symm   i.symm    j     I\nE -----> H -----> M --> H --> E\n```\nwithin the set `range I ⊆ E` at `I (i x) : E`. -/\n@[simps indexAt coordChange]\ndef tangentBundleCore : VectorBundleCore 𝕜 M E (atlas H M) where\n  baseSet i := i.1.source\n  isOpen_baseSet i := i.1.open_source\n  indexAt := achart H\n  mem_baseSet_at := mem_chart_source H\n  coordChange i j x :=\n    fderivWithin 𝕜 (j.1.extend I ∘ (i.1.extend I).symm) (range I) (i.1.extend I x)\n  coordChange_self i x hx v := by\n    dsimp only\n    rw [Filter.EventuallyEq.fderivWithin_eq, fderivWithin_id', ContinuousLinearMap.id_apply]\n    · exact I.uniqueDiffWithinAt_image\n    · filter_upwards [i.1.extend_target_mem_nhdsWithin hx] with y hy\n      exact (i.1.extend I).right_inv hy\n    · simp_rw [Function.comp_apply, i.1.extend_left_inv hx]\n  continuousOn_coordChange i j := by\n    have : IsManifold I (0 + 1) M := by simp; infer_instance\n    refine (contDiffOn_fderiv_coord_change (n := 0) i j).continuousOn.comp\n      (i.1.continuousOn_extend.mono ?_) ?_\n    · rw [i.1.extend_source]; exact inter_subset_left\n    simp_rw [← i.1.extend_image_source_inter, mapsTo_image]\n  coordChange_comp := by\n    have : IsManifold I (0 + 1) M := by simp; infer_instance\n    rintro i j k x ⟨⟨hxi, hxj⟩, hxk⟩ v\n    rw [fderivWithin_fderivWithin, Filter.EventuallyEq.fderivWithin_eq]\n    · have := i.1.extend_preimage_mem_nhds (I := I) hxi (j.1.extend_source_mem_nhds (I := I) hxj)\n      filter_upwards [nhdsWithin_le_nhds this] with y hy\n      simp_rw [Function.comp_apply, (j.1.extend I).left_inv hy]\n    · simp_rw [Function.comp_apply, i.1.extend_left_inv hxi, j.1.extend_left_inv hxj]\n    · exact (contDiffWithinAt_extend_coord_change' (subset_maximalAtlas k.2)\n        (subset_maximalAtlas j.2) hxk hxj).differentiableWithinAt le_rfl\n    · exact (contDiffWithinAt_extend_coord_change' (subset_maximalAtlas j.2)\n        (subset_maximalAtlas i.2) hxj hxi).differentiableWithinAt le_rfl\n    · intro x _; exact mem_range_self _\n    · exact I.uniqueDiffWithinAt_image\n    · rw [Function.comp_apply, i.1.extend_left_inv hxi]\n\n-- Porting note: moved to a separate `simp high` lemma b/c `simp` can simplify the LHS\n"}
{"name":"tangentBundleCore_baseSet","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ni : ↑(atlas H M)\n⊢ Eq ((tangentBundleCore I M).baseSet i) (↑i).source","decl":"@[simp high]\ntheorem tangentBundleCore_baseSet (i) : (tangentBundleCore I M).baseSet i = i.1.source := rfl\n\n"}
{"name":"tangentBundleCore_coordChange_achart","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx x' z : M\n⊢ Eq ((tangentBundleCore I M).coordChange (achart H x) (achart H x') z) (fderivWithin 𝕜 (Function.comp ↑(extChartAt I x') ↑(extChartAt I x).symm) (Set.range ↑I) (↑(extChartAt I x) z))","decl":"theorem tangentBundleCore_coordChange_achart (x x' z : M) :\n    (tangentBundleCore I M).coordChange (achart H x) (achart H x') z =\n      fderivWithin 𝕜 (extChartAt I x' ∘ (extChartAt I x).symm) (range I) (extChartAt I x z) :=\n  rfl\n\n"}
{"name":"tangentCoordChange_def","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y z : M\n⊢ Eq (tangentCoordChange I x y z) (fderivWithin 𝕜 (Function.comp ↑(extChartAt I y) ↑(extChartAt I x).symm) (Set.range ↑I) (↑(extChartAt I x) z))","decl":"lemma tangentCoordChange_def {x y z : M} : tangentCoordChange I x y z =\n    fderivWithin 𝕜 (extChartAt I y ∘ (extChartAt I x).symm) (range I) (extChartAt I x z) := rfl\n\n"}
{"name":"tangentCoordChange_self","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx z : M\nv : E\nh : Membership.mem (extChartAt I x).source z\n⊢ Eq ((tangentCoordChange I x x z) v) v","decl":"lemma tangentCoordChange_self {x z : M} {v : E} (h : z ∈ (extChartAt I x).source) :\n    tangentCoordChange I x x z v = v := by\n  apply (tangentBundleCore I M).coordChange_self\n  rw [tangentBundleCore_baseSet, coe_achart, ← extChartAt_source I]\n  exact h\n\n"}
{"name":"tangentCoordChange_comp","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nw x y z : M\nv : E\nh : Membership.mem (Inter.inter (Inter.inter (extChartAt I w).source (extChartAt I x).source) (extChartAt I y).source) z\n⊢ Eq ((tangentCoordChange I x y z) ((tangentCoordChange I w x z) v)) ((tangentCoordChange I w y z) v)","decl":"lemma tangentCoordChange_comp {w x y z : M} {v : E}\n    (h : z ∈ (extChartAt I w).source ∩ (extChartAt I x).source ∩ (extChartAt I y).source) :\n    tangentCoordChange I x y z (tangentCoordChange I w x z v) = tangentCoordChange I w y z v := by\n  apply (tangentBundleCore I M).coordChange_comp\n  simp only [tangentBundleCore_baseSet, coe_achart, ← extChartAt_source I]\n  exact h\n\n"}
{"name":"hasFDerivWithinAt_tangentCoordChange","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y z : M\nh : Membership.mem (Inter.inter (extChartAt I x).source (extChartAt I y).source) z\n⊢ HasFDerivWithinAt (Function.comp ↑(extChartAt I y) ↑(extChartAt I x).symm) (tangentCoordChange I x y z) (Set.range ↑I) (↑(extChartAt I x) z)","decl":"lemma hasFDerivWithinAt_tangentCoordChange {x y z : M}\n    (h : z ∈ (extChartAt I x).source ∩ (extChartAt I y).source) :\n    HasFDerivWithinAt ((extChartAt I y) ∘ (extChartAt I x).symm) (tangentCoordChange I x y z)\n      (range I) (extChartAt I x z) :=\n  have h' : extChartAt I x z ∈ ((extChartAt I x).symm ≫ (extChartAt I y)).source := by\n    rw [PartialEquiv.trans_source'', PartialEquiv.symm_symm, PartialEquiv.symm_target]\n    exact mem_image_of_mem _ h\n  ((contDiffWithinAt_ext_coord_change y x h').differentiableWithinAt le_rfl).hasFDerivWithinAt\n\n"}
{"name":"continuousOn_tangentCoordChange","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\n⊢ ContinuousOn (tangentCoordChange I x y) (Inter.inter (extChartAt I x).source (extChartAt I y).source)","decl":"lemma continuousOn_tangentCoordChange (x y : M) : ContinuousOn (tangentCoordChange I x y)\n    ((extChartAt I x).source ∩ (extChartAt I y).source) := by\n  convert (tangentBundleCore I M).continuousOn_coordChange (achart H x) (achart H y) <;>\n  simp only [tangentBundleCore_baseSet, coe_achart, ← extChartAt_source I]\n\n"}
{"name":"TangentSpace.vectorBundle","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\n⊢ VectorBundle 𝕜 E (TangentSpace I)","decl":"instance TangentSpace.vectorBundle : VectorBundle 𝕜 E (TangentSpace I : M → Type _) :=\n  (tangentBundleCore I M).vectorBundle\n\n"}
{"name":"TangentBundle.chartAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np : TangentBundle I M\n⊢ Eq (chartAt (ModelProd H E) p) (((tangentBundleCore I M).toFiberBundleCore.localTriv (achart H p.proj)).trans ((chartAt H p.proj).prod (PartialHomeomorph.refl E)))","decl":"protected theorem chartAt (p : TM) :\n    chartAt (ModelProd H E) p =\n      ((tangentBundleCore I M).toFiberBundleCore.localTriv (achart H p.1)).toPartialHomeomorph ≫ₕ\n        (chartAt H p.1).prod (PartialHomeomorph.refl E) :=\n  rfl\n\n"}
{"name":"TangentBundle.chartAt_toPartialEquiv","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np : TangentBundle I M\n⊢ Eq (chartAt (ModelProd H E) p).toPartialEquiv (((tangentBundleCore I M).toFiberBundleCore.localTrivAsPartialEquiv (achart H p.proj)).trans ((chartAt H p.proj).prod (PartialEquiv.refl E)))","decl":"theorem chartAt_toPartialEquiv (p : TM) :\n    (chartAt (ModelProd H E) p).toPartialEquiv =\n      (tangentBundleCore I M).toFiberBundleCore.localTrivAsPartialEquiv (achart H p.1) ≫\n        (chartAt H p.1).toPartialEquiv.prod (PartialEquiv.refl E) :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_eq_localTriv","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ Eq (FiberBundle.trivializationAt E (TangentSpace I) x) ((tangentBundleCore I M).toFiberBundleCore.localTriv (achart H x))","decl":"theorem trivializationAt_eq_localTriv (x : M) :\n    trivializationAt E (TangentSpace I) x =\n      (tangentBundleCore I M).toFiberBundleCore.localTriv (achart H x) :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_source","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ Eq (FiberBundle.trivializationAt E (TangentSpace I) x).source (Set.preimage Bundle.TotalSpace.proj (chartAt H x).source)","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_source (x : M) :\n    (trivializationAt E (TangentSpace I) x).source =\n      π E (TangentSpace I) ⁻¹' (chartAt H x).source :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_target","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ Eq (FiberBundle.trivializationAt E (TangentSpace I) x).target (SProd.sprod (chartAt H x).source Set.univ)","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_target (x : M) :\n    (trivializationAt E (TangentSpace I) x).target = (chartAt H x).source ×ˢ univ :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_baseSet","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ Eq (FiberBundle.trivializationAt E (TangentSpace I) x).baseSet (chartAt H x).source","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_baseSet (x : M) :\n    (trivializationAt E (TangentSpace I) x).baseSet = (chartAt H x).source :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_apply","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\nz : TangentBundle I M\n⊢ Eq (↑(FiberBundle.trivializationAt E (TangentSpace I) x) z) { fst := z.proj, snd := (fderivWithin 𝕜 (Function.comp ↑((chartAt H x).extend I) ↑((chartAt H z.proj).extend I).symm) (Set.range ↑I) (↑((chartAt H z.proj).extend I) z.proj)) z.snd }","decl":"theorem trivializationAt_apply (x : M) (z : TM) :\n    trivializationAt E (TangentSpace I) x z =\n      (z.1, fderivWithin 𝕜 ((chartAt H x).extend I ∘ ((chartAt H z.1).extend I).symm) (range I)\n        ((chartAt H z.1).extend I z.1) z.2) :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_fst","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\nz : TangentBundle I M\n⊢ Eq (↑(FiberBundle.trivializationAt E (TangentSpace I) x) z).1 z.proj","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_fst (x : M) (z : TM) : (trivializationAt E (TangentSpace I) x z).1 = z.1 :=\n  rfl\n\n"}
{"name":"TangentBundle.mem_chart_source_iff","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np q : TangentBundle I M\n⊢ Iff (Membership.mem (chartAt (ModelProd H E) q).source p) (Membership.mem (chartAt H q.proj).source p.proj)","decl":"@[simp, mfld_simps]\ntheorem mem_chart_source_iff (p q : TM) :\n    p ∈ (chartAt (ModelProd H E) q).source ↔ p.1 ∈ (chartAt H q.1).source := by\n  simp only [FiberBundle.chartedSpace_chartAt, mfld_simps]\n\n"}
{"name":"TangentBundle.mem_chart_target_iff","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np : Prod H E\nq : TangentBundle I M\n⊢ Iff (Membership.mem (chartAt (ModelProd H E) q).target p) (Membership.mem (chartAt H q.proj).target p.1)","decl":"@[simp, mfld_simps]\ntheorem mem_chart_target_iff (p : H × E) (q : TM) :\n    p ∈ (chartAt (ModelProd H E) q).target ↔ p.1 ∈ (chartAt H q.1).target := by\n  /- porting note: was\n  simp +contextual only [FiberBundle.chartedSpace_chartAt,\n    and_iff_left_iff_imp, mfld_simps]\n  -/\n  simp only [FiberBundle.chartedSpace_chartAt, mfld_simps]\n  rw [PartialEquiv.prod_symm]\n  simp +contextual only [and_iff_left_iff_imp, mfld_simps]\n\n"}
{"name":"TangentBundle.coe_chartAt_fst","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np q : TangentBundle I M\n⊢ Eq (↑(chartAt (ModelProd H E) q) p).1 (↑(chartAt H q.proj) p.proj)","decl":"@[simp, mfld_simps]\ntheorem coe_chartAt_fst (p q : TM) : ((chartAt (ModelProd H E) q) p).1 = chartAt H q.1 p.1 :=\n  rfl\n\n"}
{"name":"TangentBundle.coe_chartAt_symm_fst","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\np : Prod H E\nq : TangentBundle I M\n⊢ Eq (↑(chartAt (ModelProd H E) q).symm p).proj (↑(chartAt H q.proj).symm p.1)","decl":"@[simp, mfld_simps]\ntheorem coe_chartAt_symm_fst (p : H × E) (q : TM) :\n    ((chartAt (ModelProd H E) q).symm p).1 = ((chartAt H q.1).symm : H → M) p.1 :=\n  rfl\n\n"}
{"name":"TangentBundle.trivializationAt_continuousLinearMapAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nb₀ b : M\nhb : Membership.mem (FiberBundle.trivializationAt E (TangentSpace I) b₀).baseSet b\n⊢ Eq (Trivialization.continuousLinearMapAt 𝕜 (FiberBundle.trivializationAt E (TangentSpace I) b₀) b) ((tangentBundleCore I M).coordChange (achart H b) (achart H b₀) b)","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_continuousLinearMapAt {b₀ b : M}\n    (hb : b ∈ (trivializationAt E (TangentSpace I) b₀).baseSet) :\n    (trivializationAt E (TangentSpace I) b₀).continuousLinearMapAt 𝕜 b =\n      (tangentBundleCore I M).coordChange (achart H b) (achart H b₀) b :=\n  (tangentBundleCore I M).localTriv_continuousLinearMapAt hb\n\n"}
{"name":"TangentBundle.trivializationAt_symmL","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nb₀ b : M\nhb : Membership.mem (FiberBundle.trivializationAt E (TangentSpace I) b₀).baseSet b\n⊢ Eq (Trivialization.symmL 𝕜 (FiberBundle.trivializationAt E (TangentSpace I) b₀) b) ((tangentBundleCore I M).coordChange (achart H b₀) (achart H b) b)","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_symmL {b₀ b : M}\n    (hb : b ∈ (trivializationAt E (TangentSpace I) b₀).baseSet) :\n    (trivializationAt E (TangentSpace I) b₀).symmL 𝕜 b =\n      (tangentBundleCore I M).coordChange (achart H b₀) (achart H b) b :=\n  (tangentBundleCore I M).localTriv_symmL hb\n\n-- Porting note: `simp` simplifies LHS to `.id _ _`\n"}
{"name":"TangentBundle.coordChange_model_space","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nF : Type u_8\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nb b' x : F\n⊢ Eq ((tangentBundleCore (modelWithCornersSelf 𝕜 F) F).coordChange (achart F b) (achart F b') x) 1","decl":"@[simp high, mfld_simps]\ntheorem coordChange_model_space (b b' x : F) :\n    (tangentBundleCore 𝓘(𝕜, F) F).coordChange (achart F b) (achart F b') x = 1 := by\n  simpa only [tangentBundleCore_coordChange, mfld_simps] using\n    fderivWithin_id uniqueDiffWithinAt_univ\n\n-- Porting note: `simp` simplifies LHS to `.id _ _`\n"}
{"name":"TangentBundle.symmL_model_space","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nF : Type u_8\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nb b' : F\n⊢ Eq (Trivialization.symmL 𝕜 (FiberBundle.trivializationAt F (TangentSpace (modelWithCornersSelf 𝕜 F)) b) b') 1","decl":"@[simp high, mfld_simps]\ntheorem symmL_model_space (b b' : F) :\n    (trivializationAt F (TangentSpace 𝓘(𝕜, F)) b).symmL 𝕜 b' = (1 : F →L[𝕜] F) := by\n  rw [TangentBundle.trivializationAt_symmL, coordChange_model_space]\n  apply mem_univ\n\n-- Porting note: `simp` simplifies LHS to `.id _ _`\n"}
{"name":"TangentBundle.continuousLinearMapAt_model_space","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nF : Type u_8\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nb b' : F\n⊢ Eq (Trivialization.continuousLinearMapAt 𝕜 (FiberBundle.trivializationAt F (TangentSpace (modelWithCornersSelf 𝕜 F)) b) b') 1","decl":"@[simp high, mfld_simps]\ntheorem continuousLinearMapAt_model_space (b b' : F) :\n    (trivializationAt F (TangentSpace 𝓘(𝕜, F)) b).continuousLinearMapAt 𝕜 b' = (1 : F →L[𝕜] F) := by\n  rw [TangentBundle.trivializationAt_continuousLinearMapAt, coordChange_model_space]\n  apply mem_univ\n\n"}
{"name":"tangentBundleCore.isContMDiff","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nn : WithTop ENat\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nh : IsManifold I (HAdd.hAdd n 1) M\n⊢ (tangentBundleCore I M).IsContMDiff I n","decl":"omit [IsManifold I 1 M] in\nlemma tangentBundleCore.isContMDiff [h : IsManifold I (n + 1) M] :\n    haveI : IsManifold I 1 M := .of_le (n := n + 1) le_add_self\n    (tangentBundleCore I M).IsContMDiff I n := by\n  have : IsManifold I n M := .of_le (n := n + 1) (le_self_add)\n  refine ⟨fun i j => ?_⟩\n  rw [contMDiffOn_iff_source_of_mem_maximalAtlas (subset_maximalAtlas i.2),\n    contMDiffOn_iff_contDiffOn]\n  · refine ((contDiffOn_fderiv_coord_change (I := I) i j).congr fun x hx => ?_).mono ?_\n    · rw [PartialEquiv.trans_source'] at hx\n      simp_rw [Function.comp_apply, tangentBundleCore_coordChange, (i.1.extend I).right_inv hx.1]\n    · exact (i.1.extend_image_source_inter j.1).subset\n  · apply inter_subset_left\n\n"}
{"name":"tangentBundleCore.isSmooth","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nn : WithTop ENat\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nh : IsManifold I (HAdd.hAdd n 1) M\n⊢ (tangentBundleCore I M).IsContMDiff I n","decl":"@[deprecated (since := \"2025-01-09\")]\nalias tangentBundleCore.isSmooth := tangentBundleCore.isContMDiff\n\n"}
{"name":"TangentBundle.contMDiffVectorBundle","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nn : WithTop ENat\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nh : IsManifold I (HAdd.hAdd n 1) M\n⊢ ContMDiffVectorBundle n E (TangentSpace I) I","decl":"omit [IsManifold I 1 M] in\nlemma TangentBundle.contMDiffVectorBundle [h : IsManifold I (n + 1) M] :\n    haveI : IsManifold I 1 M := .of_le (n := n + 1) le_add_self\n    ContMDiffVectorBundle n E (TangentSpace I : M → Type _) I := by\n  have : IsManifold I 1 M := .of_le (n := n + 1) le_add_self\n  have : (tangentBundleCore I M).IsContMDiff I n := tangentBundleCore.isContMDiff\n  exact (tangentBundleCore I M).instContMDiffVectorBundle\n\n"}
{"name":"TangentBundle.smoothVectorBundle","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nn : WithTop ENat\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nh : IsManifold I (HAdd.hAdd n 1) M\n⊢ ContMDiffVectorBundle n E (TangentSpace I) I","decl":"@[deprecated (since := \"2025-01-09\")]\nalias TangentBundle.smoothVectorBundle := TangentBundle.contMDiffVectorBundle\n\n"}
{"name":"instContMDiffVectorBundleSomeENatTopTangentSpaceOfIsManifold","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nh : IsManifold I (↑Top.top) M\n⊢ ContMDiffVectorBundle (↑Top.top) E (TangentSpace I) I","decl":"omit [IsManifold I 1 M] in\ninstance [h : IsManifold I ∞ M] :\n    ContMDiffVectorBundle ∞ E (TangentSpace I : M → Type _) I := by\n  have : IsManifold I (∞ + 1) M := h\n  exact TangentBundle.contMDiffVectorBundle\n\n"}
{"name":"instContMDiffVectorBundleTopWithTopENatTangentSpaceOfIsManifold","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I Top.top M\n⊢ ContMDiffVectorBundle Top.top E (TangentSpace I) I","decl":"omit [IsManifold I 1 M] in\ninstance [IsManifold I ω M] :\n    ContMDiffVectorBundle ω E (TangentSpace I : M → Type _) I :=\n  TangentBundle.contMDiffVectorBundle\n\n"}
{"name":"instContMDiffVectorBundleOfNatWithTopENatTangentSpaceOfIsManifold","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_6\ninst✝¹ : TopologicalSpace M\ninst✝ : ChartedSpace H M\nh : IsManifold I 2 M\n⊢ ContMDiffVectorBundle 1 E (TangentSpace I) I","decl":"omit [IsManifold I 1 M] in\ninstance [h : IsManifold I 2 M] :\n    ContMDiffVectorBundle 1 E (TangentSpace I : M → Type _) I := by\n  have : IsManifold I (1 + 1) M := h\n  exact TangentBundle.contMDiffVectorBundle\n\n"}
{"name":"trivializationAt_model_space_apply","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\np : TangentBundle I H\nx : H\n⊢ Eq (↑(FiberBundle.trivializationAt E (TangentSpace I) x) p) { fst := p.proj, snd := p.snd }","decl":"@[simp, mfld_simps]\ntheorem trivializationAt_model_space_apply (p : TangentBundle I H) (x : H) :\n    trivializationAt E (TangentSpace I) x p = (p.1, p.2) := by\n  simp [TangentBundle.trivializationAt_apply]\n  have : fderivWithin 𝕜 (↑I ∘ ↑I.symm) (range I) (I p.proj) =\n      fderivWithin 𝕜 id (range I) (I p.proj) :=\n    fderivWithin_congr' (fun y hy ↦ by simp [hy]) (mem_range_self p.proj)\n  simp [this, fderivWithin_id (ModelWithCorners.uniqueDiffWithinAt_image I)]\n\n"}
{"name":"tangentBundle_model_space_chartAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\np : TangentBundle I H\n⊢ Eq (chartAt (ModelProd H E) p).toPartialEquiv (Bundle.TotalSpace.toProd H E).toPartialEquiv","decl":"/-- In the tangent bundle to the model space, the charts are just the canonical identification\nbetween a product type and a sigma type, a.k.a. `TotalSpace.toProd`. -/\n@[simp, mfld_simps]\ntheorem tangentBundle_model_space_chartAt (p : TangentBundle I H) :\n    (chartAt (ModelProd H E) p).toPartialEquiv = (TotalSpace.toProd H E).toPartialEquiv := by\n  ext x : 1\n  · ext; · rfl\n    exact (tangentBundleCore I H).coordChange_self (achart _ x.1) x.1 (mem_achart_source H x.1) x.2\n  · ext; · rfl\n    apply heq_of_eq\n    exact (tangentBundleCore I H).coordChange_self (achart _ x.1) x.1 (mem_achart_source H x.1) x.2\n  simp_rw [TangentBundle.chartAt, FiberBundleCore.localTriv,\n    FiberBundleCore.localTrivAsPartialEquiv, VectorBundleCore.toFiberBundleCore_baseSet,\n    tangentBundleCore_baseSet]\n  simp only [mfld_simps]\n\n"}
{"name":"tangentBundle_model_space_coe_chartAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\np : TangentBundle I H\n⊢ Eq ↑(chartAt (ModelProd H E) p) ⇑(Bundle.TotalSpace.toProd H E)","decl":"@[simp, mfld_simps]\ntheorem tangentBundle_model_space_coe_chartAt (p : TangentBundle I H) :\n    ⇑(chartAt (ModelProd H E) p) = TotalSpace.toProd H E := by\n  rw [← PartialHomeomorph.coe_coe, tangentBundle_model_space_chartAt]; rfl\n\n"}
{"name":"tangentBundle_model_space_coe_chartAt_symm","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\np : TangentBundle I H\n⊢ Eq ↑(chartAt (ModelProd H E) p).symm ⇑(Bundle.TotalSpace.toProd H E).symm","decl":"@[simp, mfld_simps]\ntheorem tangentBundle_model_space_coe_chartAt_symm (p : TangentBundle I H) :\n    ((chartAt (ModelProd H E) p).symm : ModelProd H E → TangentBundle I H) =\n      (TotalSpace.toProd H E).symm := by\n  rw [← PartialHomeomorph.coe_coe, PartialHomeomorph.symm_toPartialEquiv,\n    tangentBundle_model_space_chartAt]; rfl\n\n"}
{"name":"tangentBundleCore_coordChange_model_space","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nx x' z : H\n⊢ Eq ((tangentBundleCore I H).coordChange (achart H x) (achart H x') z) (ContinuousLinearMap.id 𝕜 E)","decl":"theorem tangentBundleCore_coordChange_model_space (x x' z : H) :\n    (tangentBundleCore I H).coordChange (achart H x) (achart H x') z =\n    ContinuousLinearMap.id 𝕜 E := by\n  ext v; exact (tangentBundleCore I H).coordChange_self (achart _ z) z (mem_univ _) v\n\n"}
{"name":"tangentBundleModelSpaceHomeomorph_coe","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\n⊢ Eq ⇑(tangentBundleModelSpaceHomeomorph I) ⇑(Bundle.TotalSpace.toProd H E)","decl":"@[simp, mfld_simps]\ntheorem tangentBundleModelSpaceHomeomorph_coe :\n    (tangentBundleModelSpaceHomeomorph I : TangentBundle I H → ModelProd H E) =\n      TotalSpace.toProd H E :=\n  rfl\n\n"}
{"name":"tangentBundleModelSpaceHomeomorph_coe_symm","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\n⊢ Eq ⇑(tangentBundleModelSpaceHomeomorph I).symm ⇑(Bundle.TotalSpace.toProd H E).symm","decl":"@[simp, mfld_simps]\ntheorem tangentBundleModelSpaceHomeomorph_coe_symm :\n    ((tangentBundleModelSpaceHomeomorph I).symm : ModelProd H E → TangentBundle I H) =\n      (TotalSpace.toProd H E).symm :=\n  rfl\n\n"}
{"name":"contMDiff_tangentBundleModelSpaceHomeomorph","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nn : ENat\n⊢ ContMDiff I.tangent (I.prod (modelWithCornersSelf 𝕜 E)) ↑n ⇑(tangentBundleModelSpaceHomeomorph I)","decl":"theorem contMDiff_tangentBundleModelSpaceHomeomorph {n : ℕ∞} :\n    ContMDiff I.tangent (I.prod 𝓘(𝕜, E)) n\n    (tangentBundleModelSpaceHomeomorph I : TangentBundle I H → ModelProd H E) := by\n  apply contMDiff_iff.2 ⟨Homeomorph.continuous _, fun x y ↦ ?_⟩\n  apply contDiffOn_id.congr\n  simp only [mfld_simps, mem_range, TotalSpace.toProd, Equiv.coe_fn_symm_mk, forall_exists_index,\n    Prod.forall, Prod.mk.injEq]\n  rintro a b x rfl\n  simp [PartialEquiv.prod]\n\n"}
{"name":"contMDiff_tangentBundleModelSpaceHomeomorph_symm","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nn : ENat\n⊢ ContMDiff (I.prod (modelWithCornersSelf 𝕜 E)) I.tangent ↑n ⇑(tangentBundleModelSpaceHomeomorph I).symm","decl":"theorem contMDiff_tangentBundleModelSpaceHomeomorph_symm {n : ℕ∞} :\n    ContMDiff (I.prod 𝓘(𝕜, E)) I.tangent n\n    ((tangentBundleModelSpaceHomeomorph I).symm : ModelProd H E → TangentBundle I H) := by\n  apply contMDiff_iff.2 ⟨Homeomorph.continuous _, fun x y ↦ ?_⟩\n  apply contDiffOn_id.congr\n  simp only [mfld_simps, mem_range, TotalSpace.toProd, Equiv.coe_fn_symm_mk, forall_exists_index,\n    Prod.forall, Prod.mk.injEq]\n  rintro a b x rfl\n  simp [PartialEquiv.prod]\n  exact ⟨rfl, rfl⟩\n\n"}
{"name":"contMDiff_snd_tangentBundle_modelSpace","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_4\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nn : ENat\n⊢ ContMDiff I.tangent (modelWithCornersSelf 𝕜 E) ↑n fun p => p.snd","decl":"variable (H I) in\n/-- In the tangent bundle to the model space, the second projection is `C^n`. -/\nlemma contMDiff_snd_tangentBundle_modelSpace {n : ℕ∞} :\n    ContMDiff I.tangent 𝓘(𝕜, E) n (fun (p : TangentBundle I H) ↦ p.2) := by\n  change ContMDiff I.tangent 𝓘(𝕜, E) n\n    ((id Prod.snd : ModelProd H E → E) ∘ (tangentBundleModelSpaceHomeomorph I))\n  apply ContMDiff.comp (I' := I.prod 𝓘(𝕜, E))\n  · convert contMDiff_snd\n    rw [chartedSpaceSelf_prod]\n    rfl\n  · exact contMDiff_tangentBundleModelSpaceHomeomorph\n\n"}
{"name":"contMDiffWithinAt_vectorSpace_iff_contDiffWithinAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nV : (x : E) → TangentSpace (modelWithCornersSelf 𝕜 E) x\nn : ENat\ns : Set E\nx : E\n⊢ Iff (ContMDiffWithinAt (modelWithCornersSelf 𝕜 E) (modelWithCornersSelf 𝕜 E).tangent (↑n) (fun x => { proj := x, snd := V x }) s x) (ContDiffWithinAt 𝕜 (↑n) V s x)","decl":"/-- A vector field on a vector space is `C^n` in the manifold sense iff it is `C^n` in the vector\nspace sense-/\nlemma contMDiffWithinAt_vectorSpace_iff_contDiffWithinAt\n    {V : Π (x : E), TangentSpace 𝓘(𝕜, E) x} {n : ℕ∞} {s : Set E} {x : E} :\n    ContMDiffWithinAt 𝓘(𝕜, E) 𝓘(𝕜, E).tangent n (fun x ↦ (V x : TangentBundle 𝓘(𝕜, E) E)) s x ↔\n      ContDiffWithinAt 𝕜 n V s x := by\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · exact ContMDiffWithinAt.contDiffWithinAt <|\n      (contMDiff_snd_tangentBundle_modelSpace E 𝓘(𝕜, E)).contMDiffAt.comp_contMDiffWithinAt _ h\n  · apply (Bundle.contMDiffWithinAt_totalSpace _).2\n    refine ⟨contMDiffWithinAt_id, ?_⟩\n    convert h.contMDiffWithinAt with y\n    simp\n\n"}
{"name":"contMDiffAt_vectorSpace_iff_contDiffAt","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nV : (x : E) → TangentSpace (modelWithCornersSelf 𝕜 E) x\nn : ENat\nx : E\n⊢ Iff (ContMDiffAt (modelWithCornersSelf 𝕜 E) (modelWithCornersSelf 𝕜 E).tangent (↑n) (fun x => { proj := x, snd := V x }) x) (ContDiffAt 𝕜 (↑n) V x)","decl":"/-- A vector field on a vector space is `C^n` in the manifold sense iff it is `C^n` in the vector\nspace sense-/\nlemma contMDiffAt_vectorSpace_iff_contDiffAt\n    {V : Π (x : E), TangentSpace 𝓘(𝕜, E) x} {n : ℕ∞} {x : E} :\n    ContMDiffAt 𝓘(𝕜, E) 𝓘(𝕜, E).tangent n (fun x ↦ (V x : TangentBundle 𝓘(𝕜, E) E)) x ↔\n      ContDiffAt 𝕜 n V x := by\n  simp only [← contMDiffWithinAt_univ, ← contDiffWithinAt_univ,\n    contMDiffWithinAt_vectorSpace_iff_contDiffWithinAt]\n\n"}
{"name":"contMDiffOn_vectorSpace_iff_contDiffOn","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nV : (x : E) → TangentSpace (modelWithCornersSelf 𝕜 E) x\nn : ENat\ns : Set E\n⊢ Iff (ContMDiffOn (modelWithCornersSelf 𝕜 E) (modelWithCornersSelf 𝕜 E).tangent (↑n) (fun x => { proj := x, snd := V x }) s) (ContDiffOn 𝕜 (↑n) V s)","decl":"/-- A vector field on a vector space is `C^n` in the manifold sense iff it is `C^n` in the vector\nspace sense-/\nlemma contMDiffOn_vectorSpace_iff_contDiffOn\n    {V : Π (x : E), TangentSpace 𝓘(𝕜, E) x} {n : ℕ∞} {s : Set E} :\n    ContMDiffOn 𝓘(𝕜, E) 𝓘(𝕜, E).tangent n (fun x ↦ (V x : TangentBundle 𝓘(𝕜, E) E)) s ↔\n      ContDiffOn 𝕜 n V s := by\n  simp only [ContMDiffOn, ContDiffOn, contMDiffWithinAt_vectorSpace_iff_contDiffWithinAt ]\n\n"}
{"name":"contMDiff_vectorSpace_iff_contDiff","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nV : (x : E) → TangentSpace (modelWithCornersSelf 𝕜 E) x\nn : ENat\n⊢ Iff (ContMDiff (modelWithCornersSelf 𝕜 E) (modelWithCornersSelf 𝕜 E).tangent ↑n fun x => { proj := x, snd := V x }) (ContDiff 𝕜 (↑n) V)","decl":"/-- A vector field on a vector space is `C^n` in the manifold sense iff it is `C^n` in the vector\nspace sense-/\nlemma contMDiff_vectorSpace_iff_contDiff\n    {V : Π (x : E), TangentSpace 𝓘(𝕜, E) x} {n : ℕ∞} :\n    ContMDiff 𝓘(𝕜, E) 𝓘(𝕜, E).tangent n (fun x ↦ (V x : TangentBundle 𝓘(𝕜, E) E)) ↔\n      ContDiff 𝕜 n V := by\n  simp only [← contMDiffOn_univ, ← contDiffOn_univ, contMDiffOn_vectorSpace_iff_contDiffOn]\n\n"}
{"name":"inCoordinates_tangent_bundle_core_model_space","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nE' : Type u_3\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nH : Type u_4\ninst✝¹ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nH' : Type u_5\ninst✝ : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nx₀ x : H\ny₀ y : H'\nϕ : ContinuousLinearMap (RingHom.id 𝕜) E E'\n⊢ Eq (ContinuousLinearMap.inCoordinates E (TangentSpace I) E' (TangentSpace I') x₀ x y₀ y ϕ) ϕ","decl":"/-- The map `inCoordinates` for the tangent bundle is trivial on the model spaces -/\ntheorem inCoordinates_tangent_bundle_core_model_space (x₀ x : H) (y₀ y : H') (ϕ : E →L[𝕜] E') :\n    inCoordinates E (TangentSpace I) E' (TangentSpace I') x₀ x y₀ y ϕ = ϕ := by\n  erw [VectorBundleCore.inCoordinates_eq] <;> try trivial\n  simp_rw [tangentBundleCore_indexAt, tangentBundleCore_coordChange_model_space,\n    ContinuousLinearMap.id_comp, ContinuousLinearMap.comp_id]\n\n"}
{"name":"inTangentCoordinates_model_space","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nE' : Type u_3\ninst✝³ : NormedAddCommGroup E'\ninst✝² : NormedSpace 𝕜 E'\nH : Type u_4\ninst✝¹ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nH' : Type u_5\ninst✝ : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nN : Type u_9\nf : N → H\ng : N → H'\nϕ : N → ContinuousLinearMap (RingHom.id 𝕜) E E'\nx₀ : N\n⊢ Eq (inTangentCoordinates I I' f g ϕ x₀) ϕ","decl":"theorem inTangentCoordinates_model_space (f : N → H) (g : N → H') (ϕ : N → E →L[𝕜] E') (x₀ : N) :\n    inTangentCoordinates I I' f g ϕ x₀ = ϕ := by\n  simp (config := { unfoldPartialApp := true }) only [inTangentCoordinates,\n    inCoordinates_tangent_bundle_core_model_space]\n\n"}
{"name":"inTangentCoordinates_eq","module":"Mathlib.Geometry.Manifold.VectorBundle.Tangent","initialProofState":"𝕜 : Type u_1\ninst✝¹² : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹¹ : NormedAddCommGroup E\ninst✝¹⁰ : NormedSpace 𝕜 E\nE' : Type u_3\ninst✝⁹ : NormedAddCommGroup E'\ninst✝⁸ : NormedSpace 𝕜 E'\nH : Type u_4\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nH' : Type u_5\ninst✝⁶ : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM : Type u_6\ninst✝⁵ : TopologicalSpace M\ninst✝⁴ : ChartedSpace H M\nM' : Type u_7\ninst✝³ : TopologicalSpace M'\ninst✝² : ChartedSpace H' M'\ninst✝¹ : IsManifold I 1 M\ninst✝ : IsManifold I' 1 M'\nN : Type u_9\nf : N → M\ng : N → M'\nϕ : N → ContinuousLinearMap (RingHom.id 𝕜) E E'\nx₀ x : N\nhx : Membership.mem (chartAt H (f x₀)).source (f x)\nhy : Membership.mem (chartAt H' (g x₀)).source (g x)\n⊢ Eq (inTangentCoordinates I I' f g ϕ x₀ x) (((tangentBundleCore I' M').coordChange (achart H' (g x)) (achart H' (g x₀)) (g x)).comp ((ϕ x).comp ((tangentBundleCore I M).coordChange (achart H (f x₀)) (achart H (f x)) (f x))))","decl":"/-- To write a linear map between tangent spaces in coordinates amounts to precomposing and\npostcomposing it with suitable coordinate changes. For a concrete version expressing the\nchange of coordinates as derivatives of extended charts,\nsee `inTangentCoordinates_eq_mfderiv_comp`. -/\ntheorem inTangentCoordinates_eq (f : N → M) (g : N → M') (ϕ : N → E →L[𝕜] E') {x₀ x : N}\n    (hx : f x ∈ (chartAt H (f x₀)).source) (hy : g x ∈ (chartAt H' (g x₀)).source) :\n    inTangentCoordinates I I' f g ϕ x₀ x =\n      (tangentBundleCore I' M').coordChange (achart H' (g x)) (achart H' (g x₀)) (g x) ∘L\n        ϕ x ∘L (tangentBundleCore I M).coordChange (achart H (f x₀)) (achart H (f x)) (f x) :=\n  (tangentBundleCore I M).inCoordinates_eq (tangentBundleCore I' M') (ϕ x) hx hy\n\n"}
