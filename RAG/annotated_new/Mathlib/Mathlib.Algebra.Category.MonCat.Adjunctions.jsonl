{"name":"MonCat.adjoinOne_obj_coe","module":"Mathlib.Algebra.Category.MonCat.Adjunctions","initialProofState":"S : Semigrp\n⊢ Eq (↑(MonCat.adjoinOne.obj S)) (WithOne ↑S)","decl":"/-- The functor of adjoining a neutral element `one` to a semigroup.\n -/\n@[to_additive (attr := simps) \"The functor of adjoining a neutral element `zero` to a semigroup\"]\ndef adjoinOne : Semigrp.{u} ⥤ MonCat.{u} where\n  obj S := MonCat.of (WithOne S)\n  map f := ofHom (WithOne.map f)\n  map_id _ := MonCat.hom_ext WithOne.map_id\n  map_comp _ _ := MonCat.hom_ext (WithOne.map_comp _ _)\n\n"}
{"name":"AddMonCat.adjoinZero_obj_coe","module":"Mathlib.Algebra.Category.MonCat.Adjunctions","initialProofState":"S : AddSemigrp\n⊢ Eq (↑(AddMonCat.adjoinZero.obj S)) (WithZero ↑S)","decl":"/-- The functor of adjoining a neutral element `one` to a semigroup.\n -/\n@[to_additive (attr := simps) \"The functor of adjoining a neutral element `zero` to a semigroup\"]\ndef adjoinOne : Semigrp.{u} ⥤ MonCat.{u} where\n  obj S := MonCat.of (WithOne S)\n  map f := ofHom (WithOne.map f)\n  map_id _ := MonCat.hom_ext WithOne.map_id\n  map_comp _ _ := MonCat.hom_ext (WithOne.map_comp _ _)\n\n"}
{"name":"AddMonCat.adjoinZero_map","module":"Mathlib.Algebra.Category.MonCat.Adjunctions","initialProofState":"X✝ Y✝ : AddSemigrp\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (AddMonCat.adjoinZero.map f) (AddMonCat.ofHom (WithZero.map f))","decl":"/-- The functor of adjoining a neutral element `one` to a semigroup.\n -/\n@[to_additive (attr := simps) \"The functor of adjoining a neutral element `zero` to a semigroup\"]\ndef adjoinOne : Semigrp.{u} ⥤ MonCat.{u} where\n  obj S := MonCat.of (WithOne S)\n  map f := ofHom (WithOne.map f)\n  map_id _ := MonCat.hom_ext WithOne.map_id\n  map_comp _ _ := MonCat.hom_ext (WithOne.map_comp _ _)\n\n"}
{"name":"MonCat.adjoinOne_map","module":"Mathlib.Algebra.Category.MonCat.Adjunctions","initialProofState":"X✝ Y✝ : Semigrp\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (MonCat.adjoinOne.map f) (MonCat.ofHom (WithOne.map f))","decl":"/-- The functor of adjoining a neutral element `one` to a semigroup.\n -/\n@[to_additive (attr := simps) \"The functor of adjoining a neutral element `zero` to a semigroup\"]\ndef adjoinOne : Semigrp.{u} ⥤ MonCat.{u} where\n  obj S := MonCat.of (WithOne S)\n  map f := ofHom (WithOne.map f)\n  map_id _ := MonCat.hom_ext WithOne.map_id\n  map_comp _ _ := MonCat.hom_ext (WithOne.map_comp _ _)\n\n"}
{"name":"MonCat.instIsRightAdjointForget","module":"Mathlib.Algebra.Category.MonCat.Adjunctions","initialProofState":"⊢ (CategoryTheory.forget MonCat).IsRightAdjoint","decl":"instance : (forget MonCat.{u}).IsRightAdjoint :=\n  ⟨_, ⟨adj⟩⟩\n\n"}
