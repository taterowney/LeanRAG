{"name":"Asymptotics.IsBigO.integrableAtFilter","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : NormedAddCommGroup E\nf : α → E\ng : α → F\nl : Filter α\ninst✝² : MeasurableSpace α\ninst✝¹ : NormedAddCommGroup F\nμ : MeasureTheory.Measure α\ninst✝ : l.IsMeasurablyGenerated\nhf : Asymptotics.IsBigO l f g\nhfm : StronglyMeasurableAtFilter f l μ\nhg : MeasureTheory.IntegrableAtFilter g l μ\n⊢ MeasureTheory.IntegrableAtFilter f l μ","decl":"/-- If `f = O[l] g` on measurably generated `l`, `f` is strongly measurable at `l`,\nand `g` is integrable at `l`, then `f` is integrable at `l`. -/\ntheorem IsBigO.integrableAtFilter [IsMeasurablyGenerated l]\n    (hf : f =O[l] g) (hfm : StronglyMeasurableAtFilter f l μ) (hg : IntegrableAtFilter g l μ) :\n    IntegrableAtFilter f l μ := by\n  obtain ⟨C, hC⟩ := hf.bound\n  obtain ⟨s, hsl, hsm, hfg, hf, hg⟩ :=\n    (hC.smallSets.and <| hfm.eventually.and hg.eventually).exists_measurable_mem_of_smallSets\n  refine ⟨s, hsl, (hg.norm.const_mul C).mono hf ?_⟩\n  refine (ae_restrict_mem hsm).mono fun x hx ↦ ?_\n  exact (hfg x hx).trans (le_abs_self _)\n\n"}
{"name":"Asymptotics.IsBigO.integrable","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝² : NormedAddCommGroup E\nf : α → E\ng : α → F\ninst✝¹ : MeasurableSpace α\ninst✝ : NormedAddCommGroup F\nμ : MeasureTheory.Measure α\nhfm : MeasureTheory.AEStronglyMeasurable f μ\nhf : Asymptotics.IsBigO Top.top f g\nhg : MeasureTheory.Integrable g μ\n⊢ MeasureTheory.Integrable f μ","decl":"/-- Variant of `MeasureTheory.Integrable.mono` taking `f =O[⊤] (g)` instead of `‖f(x)‖ ≤ ‖g(x)‖` -/\ntheorem IsBigO.integrable (hfm : AEStronglyMeasurable f μ)\n    (hf : f =O[⊤] g) (hg : Integrable g μ) : Integrable f μ := by\n  rewrite [← integrableAtFilter_top] at *\n  exact hf.integrableAtFilter ⟨univ, univ_mem, hfm.restrict⟩ hg\n\n"}
{"name":"Asymptotics.IsBigO.eventually_integrableOn","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝² : NormedAddCommGroup E\ng : α → F\nl : Filter α\nι : Type u_4\ninst✝¹ : MeasurableSpace ι\nf : Prod ι α → E\ns : Set ι\nμ : MeasureTheory.Measure ι\ninst✝ : Norm F\nhf : Asymptotics.IsBigO (SProd.sprod (Filter.principal s) l) f (Function.comp g Prod.snd)\nhfm : Filter.Eventually (fun x => MeasureTheory.AEStronglyMeasurable (fun i => f { fst := i, snd := x }) (μ.restrict s)) l\nhs : MeasurableSet s\nhμ : LT.lt (μ s) Top.top\n⊢ Filter.Eventually (fun x => MeasureTheory.IntegrableOn (fun i => f { fst := i, snd := x }) s μ) l","decl":"/-- Let `f : X x Y → Z`. If as `y` tends to `l`, `f(x, y) = O(g(y))` uniformly on `s : Set X`\nof finite measure, then f is eventually (as `y` tends to `l`) integrable along `s`. -/\ntheorem IsBigO.eventually_integrableOn [Norm F]\n    (hf : f =O[𝓟 s ×ˢ l] (g ∘ Prod.snd))\n    (hfm : ∀ᶠ x in l, AEStronglyMeasurable (fun i ↦ f (i, x)) (μ.restrict s))\n    (hs : MeasurableSet s) (hμ : μ s < ⊤) :\n    ∀ᶠ x in l, IntegrableOn (fun i ↦ f (i, x)) s μ := by\n  obtain ⟨C, hC⟩ := hf.bound\n  obtain ⟨t, htl, ht⟩ := hC.exists_mem\n  obtain ⟨u, hu, v, hv, huv⟩ := Filter.mem_prod_iff.mp htl\n  obtain ⟨w, hwl, hw⟩ := hfm.exists_mem\n  refine eventually_iff_exists_mem.mpr ⟨w ∩ v, inter_mem hwl hv, fun x hx ↦ ?_⟩\n  haveI : IsFiniteMeasure (μ.restrict s) := ⟨Measure.restrict_apply_univ s ▸ hμ⟩\n  refine Integrable.mono' (integrable_const (C * ‖g x‖)) (hw x hx.1) ?_\n  filter_upwards [MeasureTheory.self_mem_ae_restrict hs]\n  intro y hy\n  exact ht (y, x) <| huv ⟨hu hy, hx.2⟩\n\n"}
{"name":"Asymptotics.IsBigO.set_integral_isBigO","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝³ : NormedAddCommGroup E\ng : α → F\nl : Filter α\nι : Type u_4\ninst✝² : MeasurableSpace ι\nf : Prod ι α → E\ns : Set ι\nμ : MeasureTheory.Measure ι\ninst✝¹ : NormedSpace Real E\ninst✝ : NormedAddCommGroup F\nhf : Asymptotics.IsBigO (SProd.sprod (Filter.principal s) l) f (Function.comp g Prod.snd)\nhs : MeasurableSet s\nhμ : LT.lt (μ s) Top.top\n⊢ Asymptotics.IsBigO l (fun x => MeasureTheory.integral (μ.restrict s) fun i => f { fst := i, snd := x }) g","decl":"/-- Let `f : X x Y → Z`. If as `y` tends to `l`, `f(x, y) = O(g(y))` uniformly on `s : Set X`\nof finite measure, then the integral of `f` along `s` is `O(g(y))`. -/\ntheorem IsBigO.set_integral_isBigO\n    (hf : f =O[𝓟 s ×ˢ l] (g ∘ Prod.snd)) (hs : MeasurableSet s) (hμ : μ s < ⊤)  :\n    (fun x ↦ ∫ i in s, f (i, x) ∂μ) =O[l] g := by\n  obtain ⟨C, hC⟩ := hf.bound\n  obtain ⟨t, htl, ht⟩ := hC.exists_mem\n  obtain ⟨u, hu, v, hv, huv⟩ := Filter.mem_prod_iff.mp htl\n  refine isBigO_iff.mpr ⟨C * (μ s).toReal, eventually_iff_exists_mem.mpr ⟨v, hv, fun x hx ↦ ?_⟩⟩\n  rw [mul_assoc, ← smul_eq_mul (a' := ‖g x‖), ← MeasureTheory.Measure.restrict_apply_univ,\n    ← integral_const, mul_comm, ← smul_eq_mul, ← integral_smul_const]\n  haveI : IsFiniteMeasure (μ.restrict s) := ⟨by rw [Measure.restrict_apply_univ s]; exact hμ⟩\n  refine (norm_integral_le_integral_norm _).trans <|\n    integral_mono_of_nonneg (univ_mem' fun _ ↦ norm_nonneg _) (integrable_const _) ?_\n  filter_upwards [MeasureTheory.self_mem_ae_restrict hs]\n  intro y hy\n  rw [smul_eq_mul, mul_comm]\n  exact ht (y, x) <| huv ⟨hu hy, hx⟩\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_of_isBigO_cocompact","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup E\nf : α → E\ng : α → F\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SecondCountableTopology α\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : NormedAddCommGroup F\ninst✝ : (Filter.cocompact α).IsMeasurablyGenerated\nhf : MeasureTheory.LocallyIntegrable f μ\nho : Asymptotics.IsBigO (Filter.cocompact α) f g\nhg : MeasureTheory.IntegrableAtFilter g (Filter.cocompact α) μ\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If `f` is locally integrable, and `f =O[cocompact] g` for some `g` integrable at `cocompact`,\nthen `f` is integrable. -/\ntheorem LocallyIntegrable.integrable_of_isBigO_cocompact [IsMeasurablyGenerated (cocompact α)]\n    (hf : LocallyIntegrable f μ) (ho : f =O[cocompact α] g)\n    (hg : IntegrableAtFilter g (cocompact α) μ) : Integrable f μ := by\n  refine integrable_iff_integrableAtFilter_cocompact.mpr ⟨ho.integrableAtFilter ?_ hg, hf⟩\n  exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_of_isBigO_atBot_atTop","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedAddCommGroup E\nf : α → E\ng : α → F\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : SecondCountableTopology α\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : LinearOrder α\ninst✝² : CompactIccSpace α\ng' : α → F\ninst✝¹ : Filter.atBot.IsMeasurablyGenerated\ninst✝ : Filter.atTop.IsMeasurablyGenerated\nhf : MeasureTheory.LocallyIntegrable f μ\nho : Asymptotics.IsBigO Filter.atBot f g\nhg : MeasureTheory.IntegrableAtFilter g Filter.atBot μ\nho' : Asymptotics.IsBigO Filter.atTop f g'\nhg' : MeasureTheory.IntegrableAtFilter g' Filter.atTop μ\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If `f` is locally integrable, and `f =O[atBot] g`, `f =O[atTop] g'` for some\n`g`, `g'` integrable at `atBot` and `atTop` respectively, then `f` is integrable. -/\ntheorem LocallyIntegrable.integrable_of_isBigO_atBot_atTop\n    [IsMeasurablyGenerated (atBot (α := α))] [IsMeasurablyGenerated (atTop (α := α))]\n    (hf : LocallyIntegrable f μ)\n    (ho : f =O[atBot] g) (hg : IntegrableAtFilter g atBot μ)\n    (ho' : f =O[atTop] g') (hg' : IntegrableAtFilter g' atTop μ) : Integrable f μ := by\n  refine integrable_iff_integrableAtFilter_atBot_atTop.mpr\n    ⟨⟨ho.integrableAtFilter ?_ hg, ho'.integrableAtFilter ?_ hg'⟩, hf⟩\n  all_goals exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.integrableOn_of_isBigO_atBot","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup E\nf : α → E\ng : α → F\na : α\ninst✝⁶ : TopologicalSpace α\ninst✝⁵ : SecondCountableTopology α\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup F\ninst✝² : LinearOrder α\ninst✝¹ : CompactIccSpace α\ninst✝ : Filter.atBot.IsMeasurablyGenerated\nhf : MeasureTheory.LocallyIntegrableOn f (Set.Iic a) μ\nho : Asymptotics.IsBigO Filter.atBot f g\nhg : MeasureTheory.IntegrableAtFilter g Filter.atBot μ\n⊢ MeasureTheory.IntegrableOn f (Set.Iic a) μ","decl":"/-- If `f` is locally integrable on `(∞, a]`, and `f =O[atBot] g`, for some\n`g` integrable at `atBot`, then `f` is integrable on `(∞, a]`. -/\ntheorem LocallyIntegrableOn.integrableOn_of_isBigO_atBot [IsMeasurablyGenerated (atBot (α := α))]\n    (hf : LocallyIntegrableOn f (Iic a) μ) (ho : f =O[atBot] g)\n    (hg : IntegrableAtFilter g atBot μ) : IntegrableOn f (Iic a) μ := by\n  refine integrableOn_Iic_iff_integrableAtFilter_atBot.mpr ⟨ho.integrableAtFilter ?_ hg, hf⟩\n  exact ⟨Iic a, Iic_mem_atBot a, hf.aestronglyMeasurable⟩\n\n"}
{"name":"MeasureTheory.LocallyIntegrableOn.integrableOn_of_isBigO_atTop","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup E\nf : α → E\ng : α → F\na : α\ninst✝⁶ : TopologicalSpace α\ninst✝⁵ : SecondCountableTopology α\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup F\ninst✝² : LinearOrder α\ninst✝¹ : CompactIccSpace α\ninst✝ : Filter.atTop.IsMeasurablyGenerated\nhf : MeasureTheory.LocallyIntegrableOn f (Set.Ici a) μ\nho : Asymptotics.IsBigO Filter.atTop f g\nhg : MeasureTheory.IntegrableAtFilter g Filter.atTop μ\n⊢ MeasureTheory.IntegrableOn f (Set.Ici a) μ","decl":"/-- If `f` is locally integrable on `[a, ∞)`, and `f =O[atTop] g`, for some\n`g` integrable at `atTop`, then `f` is integrable on `[a, ∞)`. -/\ntheorem LocallyIntegrableOn.integrableOn_of_isBigO_atTop [IsMeasurablyGenerated (atTop (α := α))]\n    (hf : LocallyIntegrableOn f (Ici a) μ) (ho : f =O[atTop] g)\n    (hg : IntegrableAtFilter g atTop μ) : IntegrableOn f (Ici a) μ := by\n  refine integrableOn_Ici_iff_integrableAtFilter_atTop.mpr ⟨ho.integrableAtFilter ?_ hg, hf⟩\n  exact ⟨Ici a, Ici_mem_atTop a, hf.aestronglyMeasurable⟩\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_of_isBigO_atBot","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedAddCommGroup E\nf : α → E\ng : α → F\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : SecondCountableTopology α\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : LinearOrder α\ninst✝² : CompactIccSpace α\ninst✝¹ : Filter.atBot.IsMeasurablyGenerated\ninst✝ : OrderTop α\nhf : MeasureTheory.LocallyIntegrable f μ\nho : Asymptotics.IsBigO Filter.atBot f g\nhg : MeasureTheory.IntegrableAtFilter g Filter.atBot μ\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If `f` is locally integrable, `f` has a top element, and `f =O[atBot] g`, for some\n`g` integrable at `atBot`, then `f` is integrable. -/\ntheorem LocallyIntegrable.integrable_of_isBigO_atBot [IsMeasurablyGenerated (atBot (α := α))]\n    [OrderTop α] (hf : LocallyIntegrable f μ) (ho : f =O[atBot] g)\n    (hg : IntegrableAtFilter g atBot μ) : Integrable f μ := by\n  refine integrable_iff_integrableAtFilter_atBot.mpr ⟨ho.integrableAtFilter ?_ hg, hf⟩\n  exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_of_isBigO_atTop","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁸ : NormedAddCommGroup E\nf : α → E\ng : α → F\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : SecondCountableTopology α\ninst✝⁵ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : LinearOrder α\ninst✝² : CompactIccSpace α\ninst✝¹ : Filter.atTop.IsMeasurablyGenerated\ninst✝ : OrderBot α\nhf : MeasureTheory.LocallyIntegrable f μ\nho : Asymptotics.IsBigO Filter.atTop f g\nhg : MeasureTheory.IntegrableAtFilter g Filter.atTop μ\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If `f` is locally integrable, `f` has a bottom element, and `f =O[atTop] g`, for some\n`g` integrable at `atTop`, then `f` is integrable. -/\ntheorem LocallyIntegrable.integrable_of_isBigO_atTop [IsMeasurablyGenerated (atTop (α := α))]\n    [OrderBot α] (hf : LocallyIntegrable f μ) (ho : f =O[atTop] g)\n    (hg : IntegrableAtFilter g atTop μ) : Integrable f μ := by\n  refine integrable_iff_integrableAtFilter_atTop.mpr ⟨ho.integrableAtFilter ?_ hg, hf⟩\n  exact hf.aestronglyMeasurable.stronglyMeasurableAtFilter\n\n"}
{"name":"MeasureTheory.LocallyIntegrable.integrable_of_isBigO_atTop_of_norm_isNegInvariant","module":"Mathlib.MeasureTheory.Integral.Asymptotics","initialProofState":"α : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : NormedAddCommGroup E\nf : α → E\ng : α → F\ninst✝⁸ : TopologicalSpace α\ninst✝⁷ : SecondCountableTopology α\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : LinearOrderedAddCommGroup α\ninst✝³ : CompactIccSpace α\ninst✝² : Filter.atTop.IsMeasurablyGenerated\ninst✝¹ : MeasurableNeg α\ninst✝ : μ.IsNegInvariant\nhf : MeasureTheory.LocallyIntegrable f μ\nhsymm : (MeasureTheory.ae μ).EventuallyEq (Function.comp Norm.norm f) (Function.comp Norm.norm (Function.comp f Neg.neg))\nho : Asymptotics.IsBigO Filter.atTop f g\nhg : MeasureTheory.IntegrableAtFilter g Filter.atTop μ\n⊢ MeasureTheory.Integrable f μ","decl":"/-- If `f` is locally integrable, `‖f(-x)‖ = ‖f(x)‖`, and `f =O[atTop] g`, for some\n`g` integrable at `atTop`, then `f` is integrable. -/\ntheorem LocallyIntegrable.integrable_of_isBigO_atTop_of_norm_isNegInvariant\n    [IsMeasurablyGenerated (atTop (α := α))] [MeasurableNeg α] [μ.IsNegInvariant]\n    (hf : LocallyIntegrable f μ) (hsymm : norm ∘ f =ᵐ[μ] norm ∘ f ∘ Neg.neg) (ho : f =O[atTop] g)\n    (hg : IntegrableAtFilter g atTop μ) : Integrable f μ := by\n  have h_int := (hf.locallyIntegrableOn (Ici 0)).integrableOn_of_isBigO_atTop ho hg\n  rw [← integrableOn_univ, ← Iic_union_Ici_of_le le_rfl, integrableOn_union]\n  refine ⟨?_, h_int⟩\n  have h_map_neg : (μ.restrict (Ici 0)).map Neg.neg = μ.restrict (Iic 0) := by\n    conv => rhs; rw [← Measure.map_neg_eq_self μ, measurableEmbedding_neg.restrict_map]\n    simp\n  rw [IntegrableOn, ← h_map_neg, measurableEmbedding_neg.integrable_map_iff]\n  refine h_int.congr' ?_ hsymm.restrict\n  refine AEStronglyMeasurable.comp_aemeasurable ?_ measurable_neg.aemeasurable\n  exact h_map_neg ▸ hf.aestronglyMeasurable.restrict\n\n"}
