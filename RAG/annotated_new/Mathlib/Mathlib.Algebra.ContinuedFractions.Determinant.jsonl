{"name":"SimpContFract.determinant_aux","module":"Mathlib.Algebra.ContinuedFractions.Determinant","initialProofState":"K : Type u_1\ninst✝ : Field K\ns : SimpContFract K\nn : Nat\nhyp : Or (Eq n 0) (Not ((↑s).TerminatedAt (HSub.hSub n 1)))\n⊢ Eq (HSub.hSub (HMul.hMul ((↑s).contsAux n).a ((↑s).contsAux (HAdd.hAdd n 1)).b) (HMul.hMul ((↑s).contsAux n).b ((↑s).contsAux (HAdd.hAdd n 1)).a)) (HPow.hPow (-1) n)","decl":"theorem determinant_aux (hyp : n = 0 ∨ ¬(↑s : GenContFract K).TerminatedAt (n - 1)) :\n    ((↑s : GenContFract K).contsAux n).a * ((↑s : GenContFract K).contsAux (n + 1)).b -\n      ((↑s : GenContFract K).contsAux n).b * ((↑s : GenContFract K).contsAux (n + 1)).a =\n        (-1) ^ n := by\n  induction n with\n  | zero => simp [contsAux]\n  | succ n IH =>\n    -- set up some shorthand notation\n    let g := (↑s : GenContFract K)\n    let conts := contsAux g (n + 2)\n    set pred_conts := contsAux g (n + 1) with pred_conts_eq\n    set ppred_conts := contsAux g n with ppred_conts_eq\n    let pA := pred_conts.a\n    let pB := pred_conts.b\n    let ppA := ppred_conts.a\n    let ppB := ppred_conts.b\n    -- let's change the goal to something more readable\n    change pA * conts.b - pB * conts.a = (-1) ^ (n + 1)\n    have not_terminated_at_n : ¬TerminatedAt g n := Or.resolve_left hyp n.succ_ne_zero\n    obtain ⟨gp, s_nth_eq⟩ : ∃ gp, g.s.get? n = some gp :=\n      Option.ne_none_iff_exists'.1 not_terminated_at_n\n    -- unfold the recurrence relation for `conts` once and simplify to derive the following\n    suffices pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) = (-1) ^ (n + 1) by\n      simp only [conts, contsAux_recurrence s_nth_eq ppred_conts_eq pred_conts_eq]\n      have gp_a_eq_one : gp.a = 1 := s.property _ _ (partNum_eq_s_a s_nth_eq)\n      rw [gp_a_eq_one, this.symm]\n      ring\n    suffices pA * ppB - pB * ppA = (-1) ^ (n + 1) by calc\n      pA * (ppB + gp.b * pB) - pB * (ppA + gp.b * pA) =\n          pA * ppB + pA * gp.b * pB - pB * ppA - pB * gp.b * pA := by ring\n      _ = pA * ppB - pB * ppA := by ring\n      _ = (-1) ^ (n + 1) := by assumption\n    suffices ppA * pB - ppB * pA = (-1) ^ n by\n      have pow_succ_n : (-1 : K) ^ (n + 1) = -1 * (-1) ^ n := pow_succ' (-1) n\n      rw [pow_succ_n, ← this]\n      ring\n    exact IH <| Or.inr <| mt (terminated_stable <| n.sub_le 1) not_terminated_at_n\n\n"}
{"name":"SimpContFract.determinant","module":"Mathlib.Algebra.ContinuedFractions.Determinant","initialProofState":"K : Type u_1\ninst✝ : Field K\ns : SimpContFract K\nn : Nat\nnot_terminatedAt_n : Not ((↑s).TerminatedAt n)\n⊢ Eq (HSub.hSub (HMul.hMul ((↑s).nums n) ((↑s).dens (HAdd.hAdd n 1))) (HMul.hMul ((↑s).dens n) ((↑s).nums (HAdd.hAdd n 1)))) (HPow.hPow (-1) (HAdd.hAdd n 1))","decl":"/-- The determinant formula `Aₙ * Bₙ₊₁ - Bₙ * Aₙ₊₁ = (-1)^(n + 1)`. -/\ntheorem determinant (not_terminatedAt_n : ¬(↑s : GenContFract K).TerminatedAt n) :\n    (↑s : GenContFract K).nums n * (↑s : GenContFract K).dens (n + 1) -\n      (↑s : GenContFract K).dens n * (↑s : GenContFract K).nums (n + 1) = (-1) ^ (n + 1) :=\n  determinant_aux <| Or.inr <| not_terminatedAt_n\n\n"}
