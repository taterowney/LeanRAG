{"name":"MonoidHom.fromMultiplicativeIntEquiv_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Group α\nφ : MonoidHom (Multiplicative Int) α\n⊢ Eq ((MonoidHom.fromMultiplicativeIntEquiv α) φ) (φ (Multiplicative.ofAdd 1))","decl":"/-- The equivalence `(Multiplicative ℤ →* α) ≃ α` for any group `α`. -/\n@[simps]\ndef fromMultiplicativeIntEquiv (α : Type u) [Group α] : (Multiplicative ℤ →* α) ≃ α where\n  toFun φ := φ (Multiplicative.ofAdd 1)\n  invFun x := zpowersHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"MonoidHom.fromMultiplicativeIntEquiv_symm_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Group α\nx : α\n⊢ Eq ((MonoidHom.fromMultiplicativeIntEquiv α).symm x) ((zpowersHom α) x)","decl":"/-- The equivalence `(Multiplicative ℤ →* α) ≃ α` for any group `α`. -/\n@[simps]\ndef fromMultiplicativeIntEquiv (α : Type u) [Group α] : (Multiplicative ℤ →* α) ≃ α where\n  toFun φ := φ (Multiplicative.ofAdd 1)\n  invFun x := zpowersHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"MonoidHom.fromULiftMultiplicativeIntEquiv_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Group α\na✝ : MonoidHom (ULift.{u, 0} (Multiplicative Int)) α\n⊢ Eq ((MonoidHom.fromULiftMultiplicativeIntEquiv α) a✝) (a✝ (MulEquiv.ulift.symm (Multiplicative.ofAdd 1)))","decl":"/-- The equivalence `(ULift (Multiplicative ℤ) →* α) ≃ α` for any group `α`. -/\n@[simps!]\ndef fromULiftMultiplicativeIntEquiv (α : Type u) [Group α] :\n    (ULift.{u} (Multiplicative ℤ) →* α) ≃ α :=\n  (precompEquiv (MulEquiv.ulift.symm) _).trans (fromMultiplicativeIntEquiv α)\n\n"}
{"name":"MonoidHom.fromULiftMultiplicativeIntEquiv_symm_apply_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : Group α\na✝¹ : α\na✝ : ULift.{u, 0} (Multiplicative Int)\n⊢ Eq (((MonoidHom.fromULiftMultiplicativeIntEquiv α).symm a✝¹) a✝) (HPow.hPow a✝¹ (Multiplicative.toAdd (MulEquiv.ulift a✝)))","decl":"/-- The equivalence `(ULift (Multiplicative ℤ) →* α) ≃ α` for any group `α`. -/\n@[simps!]\ndef fromULiftMultiplicativeIntEquiv (α : Type u) [Group α] :\n    (ULift.{u} (Multiplicative ℤ) →* α) ≃ α :=\n  (precompEquiv (MulEquiv.ulift.symm) _).trans (fromMultiplicativeIntEquiv α)\n\n"}
{"name":"AddMonoidHom.fromIntEquiv_symm_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddGroup α\nx : α\n⊢ Eq ((AddMonoidHom.fromIntEquiv α).symm x) ((zmultiplesHom α) x)","decl":"/-- The equivalence `(ℤ →+ α) ≃ α` for any additive group `α`. -/\n@[simps]\ndef fromIntEquiv (α : Type u) [AddGroup α] : (ℤ →+ α) ≃ α where\n  toFun φ := φ 1\n  invFun x := zmultiplesHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"AddMonoidHom.fromIntEquiv_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddGroup α\nφ : AddMonoidHom Int α\n⊢ Eq ((AddMonoidHom.fromIntEquiv α) φ) (φ 1)","decl":"/-- The equivalence `(ℤ →+ α) ≃ α` for any additive group `α`. -/\n@[simps]\ndef fromIntEquiv (α : Type u) [AddGroup α] : (ℤ →+ α) ≃ α where\n  toFun φ := φ 1\n  invFun x := zmultiplesHom α x\n  left_inv φ := by ext; simp\n  right_inv x := by simp\n\n"}
{"name":"AddMonoidHom.fromULiftIntEquiv_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddGroup α\na✝ : AddMonoidHom (ULift.{u, 0} Int) α\n⊢ Eq ((AddMonoidHom.fromULiftIntEquiv α) a✝) (a✝ (AddEquiv.ulift.symm 1))","decl":"/-- The equivalence `(ULift ℤ →+ α) ≃ α` for any additive group `α`. -/\n@[simps!]\ndef fromULiftIntEquiv (α : Type u) [AddGroup α] : (ULift.{u} ℤ →+ α) ≃ α :=\n  (precompEquiv (AddEquiv.ulift.symm) _).trans (fromIntEquiv α)\n\n"}
{"name":"AddMonoidHom.fromULiftIntEquiv_symm_apply_apply","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"α : Type u\ninst✝ : AddGroup α\na✝¹ : α\na✝ : ULift.{u, 0} Int\n⊢ Eq (((AddMonoidHom.fromULiftIntEquiv α).symm a✝¹) a✝) (HSMul.hSMul (AddEquiv.ulift a✝) a✝¹)","decl":"/-- The equivalence `(ULift ℤ →+ α) ≃ α` for any additive group `α`. -/\n@[simps!]\ndef fromULiftIntEquiv (α : Type u) [AddGroup α] : (ULift.{u} ℤ →+ α) ≃ α :=\n  (precompEquiv (AddEquiv.ulift.symm) _).trans (fromIntEquiv α)\n\n"}
{"name":"Grp.forget_isCorepresentable","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget Grp).IsCorepresentable","decl":"instance Grp.forget_isCorepresentable :\n    (forget Grp.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' Grp.coyonedaObjIsoForget\n\n"}
{"name":"CommGrp.forget_isCorepresentable","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget CommGrp).IsCorepresentable","decl":"instance CommGrp.forget_isCorepresentable :\n    (forget CommGrp.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' CommGrp.coyonedaObjIsoForget\n\n"}
{"name":"AddGrp.forget_isCorepresentable","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget AddGrp).IsCorepresentable","decl":"instance AddGrp.forget_isCorepresentable :\n    (forget AddGrp.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' AddGrp.coyonedaObjIsoForget\n\n"}
{"name":"AddCommGrp.forget_isCorepresentable","module":"Mathlib.Algebra.Category.Grp.ForgetCorepresentable","initialProofState":"⊢ (CategoryTheory.forget AddCommGrp).IsCorepresentable","decl":"instance AddCommGrp.forget_isCorepresentable :\n    (forget AddCommGrp.{u}).IsCorepresentable :=\n  Functor.IsCorepresentable.mk' AddCommGrp.coyonedaObjIsoForget\n"}
