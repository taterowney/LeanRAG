{"name":"ContinuousMap.periodic_tsum_comp_add_zsmul","module":"Mathlib.Topology.ContinuousMap.Periodic","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁶ : TopologicalSpace X\ninst✝⁵ : TopologicalSpace Y\ninst✝⁴ : AddCommGroup X\ninst✝³ : TopologicalAddGroup X\ninst✝² : AddCommMonoid Y\ninst✝¹ : ContinuousAdd Y\ninst✝ : T2Space Y\nf : ContinuousMap X Y\np : X\n⊢ Function.Periodic (⇑(tsum fun n => f.comp (ContinuousMap.addRight (HSMul.hSMul n p)))) p","decl":"/-- Summing the translates of `f` by `ℤ • p` gives a map which is periodic with period `p`.\n(This is true without any convergence conditions, since if the sum doesn't converge it is taken to\nbe the zero map, which is periodic.) -/\ntheorem periodic_tsum_comp_add_zsmul [AddCommGroup X] [TopologicalAddGroup X] [AddCommMonoid Y]\n    [ContinuousAdd Y] [T2Space Y] (f : C(X, Y)) (p : X) :\n    Function.Periodic (⇑(∑' n : ℤ, f.comp (ContinuousMap.addRight (n • p)))) p := by\n  intro x\n  by_cases h : Summable fun n : ℤ => f.comp (ContinuousMap.addRight (n • p))\n  · convert congr_arg (fun f : C(X, Y) => f x) ((Equiv.addRight (1 : ℤ)).tsum_eq _) using 1\n    -- Porting note: in mathlib3 the proof from here was:\n    -- simp_rw [← tsum_apply h, ← tsum_apply ((equiv.add_right (1 : ℤ)).summable_iff.mpr h),\n    --   equiv.coe_add_right, comp_apply, coe_add_right, add_one_zsmul, add_comm (_ • p) p,\n    --   ← add_assoc]\n    -- However now the second `← tsum_apply` doesn't fire unless we use `erw`.\n    simp_rw [← tsum_apply h]\n    erw [← tsum_apply ((Equiv.addRight (1 : ℤ)).summable_iff.mpr h)]\n    simp [coe_addRight, add_one_zsmul, add_comm (_ • p) p, ← add_assoc]\n  · rw [tsum_eq_zero_of_not_summable h]\n    simp only [coe_zero, Pi.zero_apply]\n\n"}
