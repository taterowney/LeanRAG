{"name":"MeasureTheory.OuterMeasure.empty","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_2\nself : MeasureTheory.OuterMeasure α\n⊢ Eq (self.measureOf EmptyCollection.emptyCollection) 0","decl":"/-- An outer measure is a countably subadditive monotone function that sends `∅` to `0`. -/\nstructure OuterMeasure (α : Type*) where\n  /-- Outer measure function. Use automatic coercion instead. -/\n  protected measureOf : Set α → ℝ≥0∞\n  protected empty : measureOf ∅ = 0\n  protected mono : ∀ {s₁ s₂}, s₁ ⊆ s₂ → measureOf s₁ ≤ measureOf s₂\n  protected iUnion_nat : ∀ s : ℕ → Set α, Pairwise (Disjoint on s) →\n    measureOf (⋃ i, s i) ≤ ∑' i, measureOf (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasure.mono","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_2\nself : MeasureTheory.OuterMeasure α\ns₁ s₂ : Set α\na✝ : HasSubset.Subset s₁ s₂\n⊢ LE.le (self.measureOf s₁) (self.measureOf s₂)","decl":"/-- An outer measure is a countably subadditive monotone function that sends `∅` to `0`. -/\nstructure OuterMeasure (α : Type*) where\n  /-- Outer measure function. Use automatic coercion instead. -/\n  protected measureOf : Set α → ℝ≥0∞\n  protected empty : measureOf ∅ = 0\n  protected mono : ∀ {s₁ s₂}, s₁ ⊆ s₂ → measureOf s₁ ≤ measureOf s₂\n  protected iUnion_nat : ∀ s : ℕ → Set α, Pairwise (Disjoint on s) →\n    measureOf (⋃ i, s i) ≤ ∑' i, measureOf (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasure.mk.inj","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_2\nmeasureOf✝ : Set α → ENNReal\nempty✝ : Eq (measureOf✝ EmptyCollection.emptyCollection) 0\nmono✝ : ∀ {s₁ s₂ : Set α}, HasSubset.Subset s₁ s₂ → LE.le (measureOf✝ s₁) (measureOf✝ s₂)\niUnion_nat✝ : ∀ (s : Nat → Set α), Pairwise (Function.onFun Disjoint s) → LE.le (measureOf✝ (Set.iUnion fun i => s i)) (tsum fun i => measureOf✝ (s i))\nmeasureOf : Set α → ENNReal\nempty : Eq (measureOf EmptyCollection.emptyCollection) 0\nmono : ∀ {s₁ s₂ : Set α}, HasSubset.Subset s₁ s₂ → LE.le (measureOf s₁) (measureOf s₂)\niUnion_nat : ∀ (s : Nat → Set α), Pairwise (Function.onFun Disjoint s) → LE.le (measureOf (Set.iUnion fun i => s i)) (tsum fun i => measureOf (s i))\nx✝ : Eq { measureOf := measureOf✝, empty := empty✝, mono := mono✝, iUnion_nat := iUnion_nat✝ } { measureOf := measureOf, empty := empty, mono := mono, iUnion_nat := iUnion_nat }\n⊢ Eq measureOf✝ measureOf","decl":"/-- An outer measure is a countably subadditive monotone function that sends `∅` to `0`. -/\nstructure OuterMeasure (α : Type*) where\n  /-- Outer measure function. Use automatic coercion instead. -/\n  protected measureOf : Set α → ℝ≥0∞\n  protected empty : measureOf ∅ = 0\n  protected mono : ∀ {s₁ s₂}, s₁ ⊆ s₂ → measureOf s₁ ≤ measureOf s₂\n  protected iUnion_nat : ∀ s : ℕ → Set α, Pairwise (Disjoint on s) →\n    measureOf (⋃ i, s i) ≤ ∑' i, measureOf (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasure.mk.injEq","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_2\nmeasureOf✝ : Set α → ENNReal\nempty✝ : Eq (measureOf✝ EmptyCollection.emptyCollection) 0\nmono✝ : ∀ {s₁ s₂ : Set α}, HasSubset.Subset s₁ s₂ → LE.le (measureOf✝ s₁) (measureOf✝ s₂)\niUnion_nat✝ : ∀ (s : Nat → Set α), Pairwise (Function.onFun Disjoint s) → LE.le (measureOf✝ (Set.iUnion fun i => s i)) (tsum fun i => measureOf✝ (s i))\nmeasureOf : Set α → ENNReal\nempty : Eq (measureOf EmptyCollection.emptyCollection) 0\nmono : ∀ {s₁ s₂ : Set α}, HasSubset.Subset s₁ s₂ → LE.le (measureOf s₁) (measureOf s₂)\niUnion_nat : ∀ (s : Nat → Set α), Pairwise (Function.onFun Disjoint s) → LE.le (measureOf (Set.iUnion fun i => s i)) (tsum fun i => measureOf (s i))\n⊢ Eq (Eq { measureOf := measureOf✝, empty := empty✝, mono := mono✝, iUnion_nat := iUnion_nat✝ } { measureOf := measureOf, empty := empty, mono := mono, iUnion_nat := iUnion_nat }) (Eq measureOf✝ measureOf)","decl":"/-- An outer measure is a countably subadditive monotone function that sends `∅` to `0`. -/\nstructure OuterMeasure (α : Type*) where\n  /-- Outer measure function. Use automatic coercion instead. -/\n  protected measureOf : Set α → ℝ≥0∞\n  protected empty : measureOf ∅ = 0\n  protected mono : ∀ {s₁ s₂}, s₁ ⊆ s₂ → measureOf s₁ ≤ measureOf s₂\n  protected iUnion_nat : ∀ s : ℕ → Set α, Pairwise (Disjoint on s) →\n    measureOf (⋃ i, s i) ≤ ∑' i, measureOf (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasure.iUnion_nat","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_2\nself : MeasureTheory.OuterMeasure α\ns : Nat → Set α\na✝ : Pairwise (Function.onFun Disjoint s)\n⊢ LE.le (self.measureOf (Set.iUnion fun i => s i)) (tsum fun i => self.measureOf (s i))","decl":"/-- An outer measure is a countably subadditive monotone function that sends `∅` to `0`. -/\nstructure OuterMeasure (α : Type*) where\n  /-- Outer measure function. Use automatic coercion instead. -/\n  protected measureOf : Set α → ℝ≥0∞\n  protected empty : measureOf ∅ = 0\n  protected mono : ∀ {s₁ s₂}, s₁ ⊆ s₂ → measureOf s₁ ≤ measureOf s₂\n  protected iUnion_nat : ∀ s : ℕ → Set α, Pairwise (Disjoint on s) →\n    measureOf (⋃ i, s i) ≤ ∑' i, measureOf (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasure.mk.sizeOf_spec","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_2\ninst✝ : SizeOf α\nmeasureOf : Set α → ENNReal\nempty : Eq (measureOf EmptyCollection.emptyCollection) 0\nmono : ∀ {s₁ s₂ : Set α}, HasSubset.Subset s₁ s₂ → LE.le (measureOf s₁) (measureOf s₂)\niUnion_nat : ∀ (s : Nat → Set α), Pairwise (Function.onFun Disjoint s) → LE.le (measureOf (Set.iUnion fun i => s i)) (tsum fun i => measureOf (s i))\n⊢ Eq (SizeOf.sizeOf { measureOf := measureOf, empty := empty, mono := mono, iUnion_nat := iUnion_nat }) (HAdd.hAdd 1 (SizeOf.sizeOf empty))","decl":"/-- An outer measure is a countably subadditive monotone function that sends `∅` to `0`. -/\nstructure OuterMeasure (α : Type*) where\n  /-- Outer measure function. Use automatic coercion instead. -/\n  protected measureOf : Set α → ℝ≥0∞\n  protected empty : measureOf ∅ = 0\n  protected mono : ∀ {s₁ s₂}, s₁ ⊆ s₂ → measureOf s₁ ≤ measureOf s₂\n  protected iUnion_nat : ∀ s : ℕ → Set α, Pairwise (Disjoint on s) →\n    measureOf (⋃ i, s i) ≤ ∑' i, measureOf (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasureClass.measure_empty","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"F : Type u_2\nα : outParam (Type u_3)\ninst✝ : FunLike F (Set α) ENNReal\nself : MeasureTheory.OuterMeasureClass F α\nf : F\n⊢ Eq (f EmptyCollection.emptyCollection) 0","decl":"/-- A mixin class saying that elements `μ : F` are outer measures on `α`.\n\nThis typeclass is used to unify some API for outer measures and measures. -/\nclass OuterMeasureClass (F : Type*) (α : outParam Type*) [FunLike F (Set α) ℝ≥0∞] : Prop where\n  protected measure_empty (f : F) : f ∅ = 0\n  protected measure_mono (f : F) {s t} : s ⊆ t → f s ≤ f t\n  protected measure_iUnion_nat_le (f : F) (s : ℕ → Set α) : Pairwise (Disjoint on s) →\n    f (⋃ i, s i) ≤ ∑' i, f (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasureClass.measure_iUnion_nat_le","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"F : Type u_2\nα : outParam (Type u_3)\ninst✝ : FunLike F (Set α) ENNReal\nself : MeasureTheory.OuterMeasureClass F α\nf : F\ns : Nat → Set α\na✝ : Pairwise (Function.onFun Disjoint s)\n⊢ LE.le (f (Set.iUnion fun i => s i)) (tsum fun i => f (s i))","decl":"/-- A mixin class saying that elements `μ : F` are outer measures on `α`.\n\nThis typeclass is used to unify some API for outer measures and measures. -/\nclass OuterMeasureClass (F : Type*) (α : outParam Type*) [FunLike F (Set α) ℝ≥0∞] : Prop where\n  protected measure_empty (f : F) : f ∅ = 0\n  protected measure_mono (f : F) {s t} : s ⊆ t → f s ≤ f t\n  protected measure_iUnion_nat_le (f : F) (s : ℕ → Set α) : Pairwise (Disjoint on s) →\n    f (⋃ i, s i) ≤ ∑' i, f (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasureClass.measure_mono","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"F : Type u_2\nα : outParam (Type u_3)\ninst✝ : FunLike F (Set α) ENNReal\nself : MeasureTheory.OuterMeasureClass F α\nf : F\ns t : Set α\na✝ : HasSubset.Subset s t\n⊢ LE.le (f s) (f t)","decl":"/-- A mixin class saying that elements `μ : F` are outer measures on `α`.\n\nThis typeclass is used to unify some API for outer measures and measures. -/\nclass OuterMeasureClass (F : Type*) (α : outParam Type*) [FunLike F (Set α) ℝ≥0∞] : Prop where\n  protected measure_empty (f : F) : f ∅ = 0\n  protected measure_mono (f : F) {s t} : s ⊆ t → f s ≤ f t\n  protected measure_iUnion_nat_le (f : F) (s : ℕ → Set α) : Pairwise (Disjoint on s) →\n    f (⋃ i, s i) ≤ ∑' i, f (s i)\n\n"}
{"name":"MeasureTheory.OuterMeasure.measureOf_eq_coe","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\n⊢ Eq m.measureOf ⇑m","decl":"@[simp] theorem measureOf_eq_coe (m : OuterMeasure α) : m.measureOf = m := rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.instOuterMeasureClass","module":"Mathlib.MeasureTheory.OuterMeasure.Defs","initialProofState":"α : Type u_1\n⊢ MeasureTheory.OuterMeasureClass (MeasureTheory.OuterMeasure α) α","decl":"instance : OuterMeasureClass (OuterMeasure α) α where\n  measure_empty f := f.empty\n  measure_mono f := f.mono\n  measure_iUnion_nat_le f := f.iUnion_nat\n\n"}
