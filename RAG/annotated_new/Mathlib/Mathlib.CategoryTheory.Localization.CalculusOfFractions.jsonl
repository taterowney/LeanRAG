{"name":"CategoryTheory.MorphismProperty.LeftFraction.mk.inj","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y Y'‚úù : C\nf‚úù : Quiver.Hom X Y'‚úù\ns‚úù : Quiver.Hom Y Y'‚úù\nhs‚úù : W s‚úù\nY' : C\nf : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\nx‚úù : Eq (CategoryTheory.MorphismProperty.LeftFraction.mk f‚úù s‚úù hs‚úù) (CategoryTheory.MorphismProperty.LeftFraction.mk f s hs)\n‚ä¢ And (Eq Y'‚úù Y') (And (HEq f‚úù f) (HEq s‚úù s))","decl":"/-- A left fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `Y' : C` and maps `f : X ‚ü∂ Y'` and `s : Y ‚ü∂ Y'` such that `W s`. -/\nstructure LeftFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a left fraction -/\n  {Y' : C}\n  /-- the numerator of a left fraction -/\n  f : X ‚ü∂ Y'\n  /-- the denominator of a left fraction -/\n  s : Y ‚ü∂ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.hs","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nself : W.LeftFraction X Y\n‚ä¢ W self.s","decl":"/-- A left fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `Y' : C` and maps `f : X ‚ü∂ Y'` and `s : Y ‚ü∂ Y'` such that `W s`. -/\nstructure LeftFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a left fraction -/\n  {Y' : C}\n  /-- the numerator of a left fraction -/\n  f : X ‚ü∂ Y'\n  /-- the denominator of a left fraction -/\n  s : Y ‚ü∂ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ninst‚úù¬π : SizeOf C\ninst‚úù : ‚¶ÉX Y : C‚¶Ñ ‚Üí (x : Quiver.Hom X Y) ‚Üí SizeOf (W x)\nY' : C\nf : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n‚ä¢ Eq (SizeOf.sizeOf (CategoryTheory.MorphismProperty.LeftFraction.mk f s hs)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf Y')) (SizeOf.sizeOf f)) (SizeOf.sizeOf s)) (SizeOf.sizeOf hs))","decl":"/-- A left fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `Y' : C` and maps `f : X ‚ü∂ Y'` and `s : Y ‚ü∂ Y'` such that `W s`. -/\nstructure LeftFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a left fraction -/\n  {Y' : C}\n  /-- the numerator of a left fraction -/\n  f : X ‚ü∂ Y'\n  /-- the denominator of a left fraction -/\n  s : Y ‚ü∂ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.mk.injEq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y Y'‚úù : C\nf‚úù : Quiver.Hom X Y'‚úù\ns‚úù : Quiver.Hom Y Y'‚úù\nhs‚úù : W s‚úù\nY' : C\nf : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n‚ä¢ Eq (Eq (CategoryTheory.MorphismProperty.LeftFraction.mk f‚úù s‚úù hs‚úù) (CategoryTheory.MorphismProperty.LeftFraction.mk f s hs)) (And (Eq Y'‚úù Y') (And (HEq f‚úù f) (HEq s‚úù s)))","decl":"/-- A left fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `Y' : C` and maps `f : X ‚ü∂ Y'` and `s : Y ‚ü∂ Y'` such that `W s`. -/\nstructure LeftFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a left fraction -/\n  {Y' : C}\n  /-- the numerator of a left fraction -/\n  f : X ‚ü∂ Y'\n  /-- the denominator of a left fraction -/\n  s : Y ‚ü∂ Y'\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.ofHom_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.ofHom W f).s (CategoryTheory.CategoryStruct.id Y)","decl":"/-- The left fraction from `X` to `Y` given by a morphism `f : X ‚ü∂ Y`. -/\n@[simps]\ndef ofHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :\n    W.LeftFraction X Y := mk f (ùüô Y) (W.id_mem Y)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.ofHom_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.ofHom W f).f f","decl":"/-- The left fraction from `X` to `Y` given by a morphism `f : X ‚ü∂ Y`. -/\n@[simps]\ndef ofHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :\n    W.LeftFraction X Y := mk f (ùüô Y) (W.id_mem Y)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.ofHom_Y'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.ofHom W f).Y' Y","decl":"/-- The left fraction from `X` to `Y` given by a morphism `f : X ‚ü∂ Y`. -/\n@[simps]\ndef ofHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :\n    W.LeftFraction X Y := mk f (ùüô Y) (W.id_mem Y)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.ofInv_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).f (CategoryTheory.CategoryStruct.id X)","decl":"/-- The left fraction from `X` to `Y` given by a morphism `s : Y ‚ü∂ X` such that `W s`. -/\n@[simps]\ndef ofInv (s : Y ‚ü∂ X) (hs : W s) :\n    W.LeftFraction X Y := mk (ùüô X) s hs\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.ofInv_Y'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).Y' X","decl":"/-- The left fraction from `X` to `Y` given by a morphism `s : Y ‚ü∂ X` such that `W s`. -/\n@[simps]\ndef ofInv (s : Y ‚ü∂ X) (hs : W s) :\n    W.LeftFraction X Y := mk (ùüô X) s hs\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.ofInv_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).s s","decl":"/-- The left fraction from `X` to `Y` given by a morphism `s : Y ‚ü∂ X` such that `W s`. -/\n@[simps]\ndef ofInv (s : Y ‚ü∂ X) (hs : W s) :\n    W.LeftFraction X Y := mk (ùüô X) s hs\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_comp_map_s_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\nZ : D\nh : Quiver.Hom (L.obj œÜ.Y') Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (œÜ.map L hL) (CategoryTheory.CategoryStruct.comp (L.map œÜ.s) h)) (CategoryTheory.CategoryStruct.comp (L.map œÜ.f) h)","decl":"@[reassoc (attr := simp)]\nlemma map_comp_map_s (œÜ : W.LeftFraction X Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    œÜ.map L hL ‚â´ L.map œÜ.s = L.map œÜ.f := by\n  letI := hL _ œÜ.hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_comp_map_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (œÜ.map L hL) (L.map œÜ.s)) (L.map œÜ.f)","decl":"@[reassoc (attr := simp)]\nlemma map_comp_map_s (œÜ : W.LeftFraction X Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    œÜ.map L hL ‚â´ L.map œÜ.s = L.map œÜ.f := by\n  letI := hL _ œÜ.hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_ofHom","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.LeftFraction.ofHom W f).map L hL) (L.map f)","decl":"lemma map_ofHom (f : X ‚ü∂ Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) [W.ContainsIdentities] :\n    (ofHom W f).map L hL = L.map f := by\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_ofInv_hom_id_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\nZ : D\nh : Quiver.Hom (L.obj X) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).map L hL) (CategoryTheory.CategoryStruct.comp (L.map s) h)) h","decl":"@[reassoc (attr := simp)]\nlemma map_ofInv_hom_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    (ofInv s hs).map L hL ‚â´ L.map s = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_ofInv_hom_id","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).map L hL) (L.map s)) (CategoryTheory.CategoryStruct.id (L.obj X))","decl":"@[reassoc (attr := simp)]\nlemma map_ofInv_hom_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    (ofInv s hs).map L hL ‚â´ L.map s = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_hom_ofInv_id_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\nZ : D\nh : Quiver.Hom (L.obj Y) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (L.map s) (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).map L hL) h)) h","decl":"@[reassoc (attr := simp)]\nlemma map_hom_ofInv_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    L.map s ‚â´ (ofInv s hs).map L hL = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_hom_ofInv_id","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (L.map s) ((CategoryTheory.MorphismProperty.LeftFraction.ofInv s hs).map L hL)) (CategoryTheory.CategoryStruct.id (L.obj Y))","decl":"@[reassoc (attr := simp)]\nlemma map_hom_ofInv_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    L.map s ‚â´ (ofInv s hs).map L hL = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.cases","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nŒ± : W.LeftFraction X Y\n‚ä¢ Exists fun Y' => Exists fun f => Exists fun s => Exists fun hs => Eq Œ± (CategoryTheory.MorphismProperty.LeftFraction.mk f s hs)","decl":"lemma cases (Œ± : W.LeftFraction X Y) :\n    ‚àÉ (Y' : C) (f : X ‚ü∂ Y') (s : Y ‚ü∂ Y') (hs : W s), Œ± = LeftFraction.mk f s hs :=\n  ‚ü®_, _, _, _, rfl‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ninst‚úù¬π : SizeOf C\ninst‚úù : ‚¶ÉX Y : C‚¶Ñ ‚Üí (x : Quiver.Hom X Y) ‚Üí SizeOf (W x)\nX' : C\ns : Quiver.Hom X' X\nhs : W s\nf : Quiver.Hom X' Y\n‚ä¢ Eq (SizeOf.sizeOf (CategoryTheory.MorphismProperty.RightFraction.mk s hs f)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf X')) (SizeOf.sizeOf s)) (SizeOf.sizeOf hs)) (SizeOf.sizeOf f))","decl":"/-- A right fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `X' : C` and maps `s : X' ‚ü∂ X` and `f : X' ‚ü∂ Y` such that `W s`. -/\nstructure RightFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a right fraction -/\n  {X' : C}\n  /-- the denominator of a right fraction -/\n  s : X' ‚ü∂ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of a right fraction -/\n  f : X' ‚ü∂ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.mk.inj","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y X'‚úù : C\ns‚úù : Quiver.Hom X'‚úù X\nhs‚úù : W s‚úù\nf‚úù : Quiver.Hom X'‚úù Y\nX' : C\ns : Quiver.Hom X' X\nhs : W s\nf : Quiver.Hom X' Y\nx‚úù : Eq (CategoryTheory.MorphismProperty.RightFraction.mk s‚úù hs‚úù f‚úù) (CategoryTheory.MorphismProperty.RightFraction.mk s hs f)\n‚ä¢ And (Eq X'‚úù X') (And (HEq s‚úù s) (HEq f‚úù f))","decl":"/-- A right fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `X' : C` and maps `s : X' ‚ü∂ X` and `f : X' ‚ü∂ Y` such that `W s`. -/\nstructure RightFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a right fraction -/\n  {X' : C}\n  /-- the denominator of a right fraction -/\n  s : X' ‚ü∂ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of a right fraction -/\n  f : X' ‚ü∂ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.mk.injEq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y X'‚úù : C\ns‚úù : Quiver.Hom X'‚úù X\nhs‚úù : W s‚úù\nf‚úù : Quiver.Hom X'‚úù Y\nX' : C\ns : Quiver.Hom X' X\nhs : W s\nf : Quiver.Hom X' Y\n‚ä¢ Eq (Eq (CategoryTheory.MorphismProperty.RightFraction.mk s‚úù hs‚úù f‚úù) (CategoryTheory.MorphismProperty.RightFraction.mk s hs f)) (And (Eq X'‚úù X') (And (HEq s‚úù s) (HEq f‚úù f)))","decl":"/-- A right fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `X' : C` and maps `s : X' ‚ü∂ X` and `f : X' ‚ü∂ Y` such that `W s`. -/\nstructure RightFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a right fraction -/\n  {X' : C}\n  /-- the denominator of a right fraction -/\n  s : X' ‚ü∂ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of a right fraction -/\n  f : X' ‚ü∂ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.hs","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nself : W.RightFraction X Y\n‚ä¢ W self.s","decl":"/-- A right fraction from `X : C` to `Y : C` for `W : MorphismProperty C` consists of the\ndatum of an object `X' : C` and maps `s : X' ‚ü∂ X` and `f : X' ‚ü∂ Y` such that `W s`. -/\nstructure RightFraction (W : MorphismProperty C) (X Y : C) where\n  /-- the auxiliary object of a right fraction -/\n  {X' : C}\n  /-- the denominator of a right fraction -/\n  s : X' ‚ü∂ X\n  /-- the condition that the denominator belongs to the given morphism property -/\n  hs : W s\n  /-- the numerator of a right fraction -/\n  f : X' ‚ü∂ Y\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.ofHom_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq (CategoryTheory.MorphismProperty.RightFraction.ofHom W f).f f","decl":"/-- The right fraction from `X` to `Y` given by a morphism `f : X ‚ü∂ Y`. -/\n@[simps]\ndef ofHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :\n    W.RightFraction X Y := mk (ùüô X) (W.id_mem X) f\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.ofHom_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq (CategoryTheory.MorphismProperty.RightFraction.ofHom W f).s (CategoryTheory.CategoryStruct.id X)","decl":"/-- The right fraction from `X` to `Y` given by a morphism `f : X ‚ü∂ Y`. -/\n@[simps]\ndef ofHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :\n    W.RightFraction X Y := mk (ùüô X) (W.id_mem X) f\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.ofHom_X'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq (CategoryTheory.MorphismProperty.RightFraction.ofHom W f).X' X","decl":"/-- The right fraction from `X` to `Y` given by a morphism `f : X ‚ü∂ Y`. -/\n@[simps]\ndef ofHom (f : X ‚ü∂ Y) [W.ContainsIdentities] :\n    W.RightFraction X Y := mk (ùüô X) (W.id_mem X) f\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.ofInv_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).f (CategoryTheory.CategoryStruct.id Y)","decl":"/-- The right fraction from `X` to `Y` given by a morphism `s : Y ‚ü∂ X` such that `W s`. -/\n@[simps]\ndef ofInv (s : Y ‚ü∂ X) (hs : W s) :\n    W.RightFraction X Y := mk s hs (ùüô Y)\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.ofInv_X'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).X' Y","decl":"/-- The right fraction from `X` to `Y` given by a morphism `s : Y ‚ü∂ X` such that `W s`. -/\n@[simps]\ndef ofInv (s : Y ‚ü∂ X) (hs : W s) :\n    W.RightFraction X Y := mk s hs (ùüô Y)\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.ofInv_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).s s","decl":"/-- The right fraction from `X` to `Y` given by a morphism `s : Y ‚ü∂ X` such that `W s`. -/\n@[simps]\ndef ofInv (s : Y ‚ü∂ X) (hs : W s) :\n    W.RightFraction X Y := mk s hs (ùüô Y)\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_s_comp_map","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.RightFraction X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (L.map œÜ.s) (œÜ.map L hL)) (L.map œÜ.f)","decl":"@[reassoc (attr := simp)]\nlemma map_s_comp_map (œÜ : W.RightFraction X Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    L.map œÜ.s ‚â´ œÜ.map L hL = L.map œÜ.f := by\n  letI := hL _ œÜ.hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_s_comp_map_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.RightFraction X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\nZ : D\nh : Quiver.Hom (L.obj Y) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (L.map œÜ.s) (CategoryTheory.CategoryStruct.comp (œÜ.map L hL) h)) (CategoryTheory.CategoryStruct.comp (L.map œÜ.f) h)","decl":"@[reassoc (attr := simp)]\nlemma map_s_comp_map (œÜ : W.RightFraction X Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    L.map œÜ.s ‚â´ œÜ.map L hL = L.map œÜ.f := by\n  letI := hL _ œÜ.hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_ofHom","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : Quiver.Hom X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\ninst‚úù : W.ContainsIdentities\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.RightFraction.ofHom W f).map L hL) (L.map f)","decl":"@[simp]\nlemma map_ofHom (f : X ‚ü∂ Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) [W.ContainsIdentities] :\n    (ofHom W f).map L hL = L.map f := by\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_ofInv_hom_id_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\nZ : D\nh : Quiver.Hom (L.obj X) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).map L hL) (CategoryTheory.CategoryStruct.comp (L.map s) h)) h","decl":"@[reassoc (attr := simp)]\nlemma map_ofInv_hom_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    (ofInv s hs).map L hL ‚â´ L.map s = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_ofInv_hom_id","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).map L hL) (L.map s)) (CategoryTheory.CategoryStruct.id (L.obj X))","decl":"@[reassoc (attr := simp)]\nlemma map_ofInv_hom_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    (ofInv s hs).map L hL ‚â´ L.map s = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_hom_ofInv_id_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\nZ : D\nh : Quiver.Hom (L.obj Y) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (L.map s) (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).map L hL) h)) h","decl":"@[reassoc (attr := simp)]\nlemma map_hom_ofInv_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    L.map s ‚â´ (ofInv s hs).map L hL = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_hom_ofInv_id","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\ns : Quiver.Hom Y X\nhs : W s\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (L.map s) ((CategoryTheory.MorphismProperty.RightFraction.ofInv s hs).map L hL)) (CategoryTheory.CategoryStruct.id (L.obj Y))","decl":"@[reassoc (attr := simp)]\nlemma map_hom_ofInv_id (s : Y ‚ü∂ X) (hs : W s) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    L.map s ‚â´ (ofInv s hs).map L hL = ùüô _ := by\n  letI := hL _ hs\n  simp [map]\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.cases","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nŒ± : W.RightFraction X Y\n‚ä¢ Exists fun X' => Exists fun s => Exists fun hs => Exists fun f => Eq Œ± (CategoryTheory.MorphismProperty.RightFraction.mk s hs f)","decl":"lemma cases (Œ± : W.RightFraction X Y) :\n    ‚àÉ (X' : C) (s : X' ‚ü∂ X) (hs : W s) (f : X' ‚ü∂ Y) , Œ± = RightFraction.mk s hs f :=\n  ‚ü®_, _, _, _, rfl‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.HasLeftCalculusOfFractions.ext","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nself : W.HasLeftCalculusOfFractions\nX' X Y : C\nf‚ÇÅ f‚ÇÇ : Quiver.Hom X Y\ns : Quiver.Hom X' X\nx‚úù¬π : W s\nx‚úù : Eq (CategoryTheory.CategoryStruct.comp s f‚ÇÅ) (CategoryTheory.CategoryStruct.comp s f‚ÇÇ)\n‚ä¢ Exists fun Y' => Exists fun t => Exists fun x => Eq (CategoryTheory.CategoryStruct.comp f‚ÇÅ t) (CategoryTheory.CategoryStruct.comp f‚ÇÇ t)","decl":"/-- A multiplicative morphism property `W` has left calculus of fractions if\nany right fraction can be turned into a left fraction and that two morphisms\nthat can be equalized by precomposition with a morphism in `W` can also\nbe equalized by postcomposition with a morphism in `W`. -/\nclass HasLeftCalculusOfFractions extends W.IsMultiplicative : Prop where\n  exists_leftFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.RightFraction X Y) :\n    ‚àÉ (œà : W.LeftFraction X Y), œÜ.f ‚â´ œà.s = œÜ.s ‚â´ œà.f\n  ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (_ : W s)\n    (_ : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ), ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (_ : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t\n\n"}
{"name":"CategoryTheory.MorphismProperty.HasLeftCalculusOfFractions.toIsMultiplicative","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nself : W.HasLeftCalculusOfFractions\n‚ä¢ W.IsMultiplicative","decl":"/-- A multiplicative morphism property `W` has left calculus of fractions if\nany right fraction can be turned into a left fraction and that two morphisms\nthat can be equalized by precomposition with a morphism in `W` can also\nbe equalized by postcomposition with a morphism in `W`. -/\nclass HasLeftCalculusOfFractions extends W.IsMultiplicative : Prop where\n  exists_leftFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.RightFraction X Y) :\n    ‚àÉ (œà : W.LeftFraction X Y), œÜ.f ‚â´ œà.s = œÜ.s ‚â´ œà.f\n  ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (_ : W s)\n    (_ : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ), ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (_ : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t\n\n"}
{"name":"CategoryTheory.MorphismProperty.HasLeftCalculusOfFractions.exists_leftFraction","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nself : W.HasLeftCalculusOfFractions\nX Y : C\nœÜ : W.RightFraction X Y\n‚ä¢ Exists fun œà => Eq (CategoryTheory.CategoryStruct.comp œÜ.f œà.s) (CategoryTheory.CategoryStruct.comp œÜ.s œà.f)","decl":"/-- A multiplicative morphism property `W` has left calculus of fractions if\nany right fraction can be turned into a left fraction and that two morphisms\nthat can be equalized by precomposition with a morphism in `W` can also\nbe equalized by postcomposition with a morphism in `W`. -/\nclass HasLeftCalculusOfFractions extends W.IsMultiplicative : Prop where\n  exists_leftFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.RightFraction X Y) :\n    ‚àÉ (œà : W.LeftFraction X Y), œÜ.f ‚â´ œà.s = œÜ.s ‚â´ œà.f\n  ext : ‚àÄ ‚¶ÉX' X Y : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : X' ‚ü∂ X) (_ : W s)\n    (_ : s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ), ‚àÉ (Y' : C) (t : Y ‚ü∂ Y') (_ : W t), f‚ÇÅ ‚â´ t = f‚ÇÇ ‚â´ t\n\n"}
{"name":"CategoryTheory.MorphismProperty.HasRightCalculusOfFractions.ext","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nself : W.HasRightCalculusOfFractions\nX Y Y' : C\nf‚ÇÅ f‚ÇÇ : Quiver.Hom X Y\ns : Quiver.Hom Y Y'\nx‚úù¬π : W s\nx‚úù : Eq (CategoryTheory.CategoryStruct.comp f‚ÇÅ s) (CategoryTheory.CategoryStruct.comp f‚ÇÇ s)\n‚ä¢ Exists fun X' => Exists fun t => Exists fun x => Eq (CategoryTheory.CategoryStruct.comp t f‚ÇÅ) (CategoryTheory.CategoryStruct.comp t f‚ÇÇ)","decl":"/-- A multiplicative morphism property `W` has right calculus of fractions if\nany left fraction can be turned into a right fraction and that two morphisms\nthat can be equalized by postcomposition with a morphism in `W` can also\nbe equalized by precomposition with a morphism in `W`. -/\nclass HasRightCalculusOfFractions extends W.IsMultiplicative : Prop where\n  exists_rightFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.LeftFraction X Y) :\n    ‚àÉ (œà : W.RightFraction X Y), œà.s ‚â´ œÜ.f = œà.f ‚â´ œÜ.s\n  ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (_ : W s)\n    (_ : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s), ‚àÉ (X' : C) (t : X' ‚ü∂ X) (_ : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ\n\n"}
{"name":"CategoryTheory.MorphismProperty.HasRightCalculusOfFractions.toIsMultiplicative","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nself : W.HasRightCalculusOfFractions\n‚ä¢ W.IsMultiplicative","decl":"/-- A multiplicative morphism property `W` has right calculus of fractions if\nany left fraction can be turned into a right fraction and that two morphisms\nthat can be equalized by postcomposition with a morphism in `W` can also\nbe equalized by precomposition with a morphism in `W`. -/\nclass HasRightCalculusOfFractions extends W.IsMultiplicative : Prop where\n  exists_rightFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.LeftFraction X Y) :\n    ‚àÉ (œà : W.RightFraction X Y), œà.s ‚â´ œÜ.f = œà.f ‚â´ œÜ.s\n  ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (_ : W s)\n    (_ : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s), ‚àÉ (X' : C) (t : X' ‚ü∂ X) (_ : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ\n\n"}
{"name":"CategoryTheory.MorphismProperty.HasRightCalculusOfFractions.exists_rightFraction","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nself : W.HasRightCalculusOfFractions\nX Y : C\nœÜ : W.LeftFraction X Y\n‚ä¢ Exists fun œà => Eq (CategoryTheory.CategoryStruct.comp œà.s œÜ.f) (CategoryTheory.CategoryStruct.comp œà.f œÜ.s)","decl":"/-- A multiplicative morphism property `W` has right calculus of fractions if\nany left fraction can be turned into a right fraction and that two morphisms\nthat can be equalized by postcomposition with a morphism in `W` can also\nbe equalized by precomposition with a morphism in `W`. -/\nclass HasRightCalculusOfFractions extends W.IsMultiplicative : Prop where\n  exists_rightFraction ‚¶ÉX Y : C‚¶Ñ (œÜ : W.LeftFraction X Y) :\n    ‚àÉ (œà : W.RightFraction X Y), œà.s ‚â´ œÜ.f = œà.f ‚â´ œÜ.s\n  ext : ‚àÄ ‚¶ÉX Y Y' : C‚¶Ñ (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) (s : Y ‚ü∂ Y') (_ : W s)\n    (_ : f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s), ‚àÉ (X' : C) (t : X' ‚ü∂ X) (_ : W t), t ‚â´ f‚ÇÅ = t ‚â´ f‚ÇÇ\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.exists_leftFraction","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nœÜ : W.RightFraction X Y\n‚ä¢ Exists fun œà => Eq (CategoryTheory.CategoryStruct.comp œÜ.f œà.s) (CategoryTheory.CategoryStruct.comp œÜ.s œà.f)","decl":"lemma RightFraction.exists_leftFraction [W.HasLeftCalculusOfFractions] {X Y : C}\n    (œÜ : W.RightFraction X Y) : ‚àÉ (œà : W.LeftFraction X Y), œÜ.f ‚â´ œà.s = œÜ.s ‚â´ œà.f :=\n  HasLeftCalculusOfFractions.exists_leftFraction œÜ\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.leftFraction_fac_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nœÜ : W.RightFraction X Y\nZ : C\nh : Quiver.Hom œÜ.leftFraction.Y' Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp œÜ.f (CategoryTheory.CategoryStruct.comp œÜ.leftFraction.s h)) (CategoryTheory.CategoryStruct.comp œÜ.s (CategoryTheory.CategoryStruct.comp œÜ.leftFraction.f h))","decl":"@[reassoc]\nlemma RightFraction.leftFraction_fac [W.HasLeftCalculusOfFractions] {X Y : C}\n    (œÜ : W.RightFraction X Y) : œÜ.f ‚â´ œÜ.leftFraction.s = œÜ.s ‚â´ œÜ.leftFraction.f :=\n  œÜ.exists_leftFraction.choose_spec\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.leftFraction_fac","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp œÜ.f œÜ.leftFraction.s) (CategoryTheory.CategoryStruct.comp œÜ.s œÜ.leftFraction.f)","decl":"@[reassoc]\nlemma RightFraction.leftFraction_fac [W.HasLeftCalculusOfFractions] {X Y : C}\n    (œÜ : W.RightFraction X Y) : œÜ.f ‚â´ œÜ.leftFraction.s = œÜ.s ‚â´ œÜ.leftFraction.f :=\n  œÜ.exists_leftFraction.choose_spec\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.exists_rightFraction","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasRightCalculusOfFractions\nX Y : C\nœÜ : W.LeftFraction X Y\n‚ä¢ Exists fun œà => Eq (CategoryTheory.CategoryStruct.comp œà.s œÜ.f) (CategoryTheory.CategoryStruct.comp œà.f œÜ.s)","decl":"lemma LeftFraction.exists_rightFraction [W.HasRightCalculusOfFractions] {X Y : C}\n    (œÜ : W.LeftFraction X Y) : ‚àÉ (œà : W.RightFraction X Y), œà.s ‚â´ œÜ.f = œà.f ‚â´ œÜ.s :=\n  HasRightCalculusOfFractions.exists_rightFraction œÜ\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.rightFraction_fac_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasRightCalculusOfFractions\nX Y : C\nœÜ : W.LeftFraction X Y\nZ : C\nh : Quiver.Hom œÜ.Y' Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp œÜ.rightFraction.s (CategoryTheory.CategoryStruct.comp œÜ.f h)) (CategoryTheory.CategoryStruct.comp œÜ.rightFraction.f (CategoryTheory.CategoryStruct.comp œÜ.s h))","decl":"@[reassoc]\nlemma LeftFraction.rightFraction_fac [W.HasRightCalculusOfFractions] {X Y : C}\n    (œÜ : W.LeftFraction X Y) : œÜ.rightFraction.s ‚â´ œÜ.f = œÜ.rightFraction.f ‚â´ œÜ.s :=\n  œÜ.exists_rightFraction.choose_spec\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.rightFraction_fac","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasRightCalculusOfFractions\nX Y : C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp œÜ.rightFraction.s œÜ.f) (CategoryTheory.CategoryStruct.comp œÜ.rightFraction.f œÜ.s)","decl":"@[reassoc]\nlemma LeftFraction.rightFraction_fac [W.HasRightCalculusOfFractions] {X Y : C}\n    (œÜ : W.LeftFraction X Y) : œÜ.rightFraction.s ‚â´ œÜ.f = œÜ.rightFraction.f ‚â´ œÜ.s :=\n  œÜ.exists_rightFraction.choose_spec\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFractionRel.refl","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz : W.LeftFraction X Y\n‚ä¢ CategoryTheory.MorphismProperty.LeftFractionRel z z","decl":"lemma refl {X Y : C} (z : W.LeftFraction X Y) : LeftFractionRel z z :=\n  ‚ü®z.Y', ùüô _, ùüô _, rfl, rfl, by simpa only [Category.comp_id] using z.hs‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFractionRel.symm","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.LeftFraction X Y\nh : CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÇ z‚ÇÅ","decl":"lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y} (h : LeftFractionRel z‚ÇÅ z‚ÇÇ) :\n    LeftFractionRel z‚ÇÇ z‚ÇÅ := by\n  obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h\n  exact ‚ü®Z, t‚ÇÇ, t‚ÇÅ, hst.symm, hft.symm, by simpa only [‚Üê hst] using ht‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFractionRel.trans","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ z‚ÇÉ : W.LeftFraction X Y\ninst‚úù : W.HasLeftCalculusOfFractions\nh‚ÇÅ‚ÇÇ : CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ\nh‚ÇÇ‚ÇÉ : CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÇ z‚ÇÉ\n‚ä¢ CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÉ","decl":"lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : W.LeftFraction X Y}\n    [HasLeftCalculusOfFractions W]\n    (h‚ÇÅ‚ÇÇ : LeftFractionRel z‚ÇÅ z‚ÇÇ) (h‚ÇÇ‚ÇÉ : LeftFractionRel z‚ÇÇ z‚ÇÉ) :\n    LeftFractionRel z‚ÇÅ z‚ÇÉ := by\n  obtain ‚ü®Z‚ÇÑ, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h‚ÇÅ‚ÇÇ\n  obtain ‚ü®Z‚ÇÖ, u‚ÇÇ, u‚ÇÉ, hsu, hfu, hu‚ü© := h‚ÇÇ‚ÇÉ\n  obtain ‚ü®‚ü®v‚ÇÑ, v‚ÇÖ, hv‚ÇÖ‚ü©, fac‚ü© := HasLeftCalculusOfFractions.exists_leftFraction\n    (RightFraction.mk (z‚ÇÅ.s ‚â´ t‚ÇÅ) ht (z‚ÇÉ.s ‚â´ u‚ÇÉ))\n  simp only [Category.assoc] at fac\n  have eq : z‚ÇÇ.s ‚â´ u‚ÇÇ ‚â´ v‚ÇÖ  = z‚ÇÇ.s ‚â´ t‚ÇÇ ‚â´ v‚ÇÑ := by\n    simpa only [‚Üê reassoc_of% hsu, reassoc_of% hst] using fac\n  obtain ‚ü®Z‚Çá, w, hw, fac'‚ü© := HasLeftCalculusOfFractions.ext _ _ _ z‚ÇÇ.hs eq\n  simp only [Category.assoc] at fac'\n  refine ‚ü®Z‚Çá, t‚ÇÅ ‚â´ v‚ÇÑ ‚â´ w, u‚ÇÉ ‚â´ v‚ÇÖ ‚â´ w, ?_, ?_, ?_‚ü©\n  ¬∑ rw [reassoc_of% fac]\n  ¬∑ rw [reassoc_of% hft, ‚Üê fac', reassoc_of% hfu]\n  ¬∑ rw [‚Üê reassoc_of% fac, ‚Üê reassoc_of% hsu, ‚Üê Category.assoc]\n    exact W.comp_mem _ _ hu (W.comp_mem _ _ hv‚ÇÖ hw)\n\n"}
{"name":"CategoryTheory.MorphismProperty.equivalenceLeftFractionRel","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\n‚ä¢ Equivalence CategoryTheory.MorphismProperty.LeftFractionRel","decl":"lemma equivalenceLeftFractionRel [W.HasLeftCalculusOfFractions] (X Y : C) :\n    @_root_.Equivalence (W.LeftFraction X Y) LeftFractionRel where\n  refl := LeftFractionRel.refl\n  symm := LeftFractionRel.symm\n  trans := LeftFractionRel.trans\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.comp‚ÇÄ_rel","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y Z : C\nz‚ÇÅ : W.LeftFraction X Y\nz‚ÇÇ : W.LeftFraction Y Z\nz‚ÇÉ z‚ÇÉ' : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y'\nh‚ÇÉ : Eq (CategoryTheory.CategoryStruct.comp z‚ÇÇ.f z‚ÇÉ.s) (CategoryTheory.CategoryStruct.comp z‚ÇÅ.s z‚ÇÉ.f)\nh‚ÇÉ' : Eq (CategoryTheory.CategoryStruct.comp z‚ÇÇ.f z‚ÇÉ'.s) (CategoryTheory.CategoryStruct.comp z‚ÇÅ.s z‚ÇÉ'.f)\n‚ä¢ CategoryTheory.MorphismProperty.LeftFractionRel (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ) (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ')","decl":"/-- The equivalence class of `z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ` does not depend on the choice of `z‚ÇÉ` provided\nthey satisfy the compatibility `z‚ÇÇ.f ‚â´ z‚ÇÉ.s = z‚ÇÅ.s ‚â´ z‚ÇÉ.f`. -/\nlemma comp‚ÇÄ_rel [W.HasLeftCalculusOfFractions]\n    {X Y Z : C} (z‚ÇÅ : W.LeftFraction X Y) (z‚ÇÇ : W.LeftFraction Y Z)\n    (z‚ÇÉ z‚ÇÉ' : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y') (h‚ÇÉ : z‚ÇÇ.f ‚â´ z‚ÇÉ.s = z‚ÇÅ.s ‚â´ z‚ÇÉ.f)\n    (h‚ÇÉ' : z‚ÇÇ.f ‚â´ z‚ÇÉ'.s = z‚ÇÅ.s ‚â´ z‚ÇÉ'.f) :\n    LeftFractionRel (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ) (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ') := by\n  obtain ‚ü®z‚ÇÑ, fac‚ü© := exists_leftFraction (RightFraction.mk z‚ÇÉ.s z‚ÇÉ.hs z‚ÇÉ'.s)\n  dsimp at fac\n  have eq : z‚ÇÅ.s ‚â´ z‚ÇÉ.f ‚â´ z‚ÇÑ.f = z‚ÇÅ.s ‚â´ z‚ÇÉ'.f ‚â´ z‚ÇÑ.s := by\n    rw [‚Üê reassoc_of% h‚ÇÉ, ‚Üê reassoc_of% h‚ÇÉ', fac]\n  obtain ‚ü®Y, t, ht, fac'‚ü© := HasLeftCalculusOfFractions.ext _ _ _ z‚ÇÅ.hs eq\n  simp only [assoc] at fac'\n  refine ‚ü®Y, z‚ÇÑ.f ‚â´ t, z‚ÇÑ.s ‚â´ t, ?_, ?_, ?_‚ü©\n  ¬∑ simp only [comp‚ÇÄ, assoc, reassoc_of% fac]\n  ¬∑ simp only [comp‚ÇÄ, assoc, fac']\n  ¬∑ simp only [comp‚ÇÄ, assoc, ‚Üê reassoc_of% fac]\n    exact W.comp_mem _ _ z‚ÇÇ.hs (W.comp_mem _ _ z‚ÇÉ'.hs (W.comp_mem _ _ z‚ÇÑ.hs ht))\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk_surjective","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom W X Y\n‚ä¢ Exists fun z => Eq f (CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk z)","decl":"lemma Localization.Hom.mk_surjective {X Y : C} (f : Localization.Hom W X Y) :\n    ‚àÉ (z : W.LeftFraction X Y), f = mk z := by\n  obtain ‚ü®z‚ü© := f\n  exact ‚ü®z, rfl‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.comp_eq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y Z : C\nz‚ÇÅ : W.LeftFraction X Y\nz‚ÇÇ : W.LeftFraction Y Z\nz‚ÇÉ : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y'\nh‚ÇÉ : Eq (CategoryTheory.CategoryStruct.comp z‚ÇÇ.f z‚ÇÉ.s) (CategoryTheory.CategoryStruct.comp z‚ÇÅ.s z‚ÇÉ.f)\n‚ä¢ Eq (z‚ÇÅ.comp z‚ÇÇ) (CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ))","decl":"lemma comp_eq {X Y Z : C} (z‚ÇÅ : W.LeftFraction X Y) (z‚ÇÇ : W.LeftFraction Y Z)\n    (z‚ÇÉ : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y') (h‚ÇÉ : z‚ÇÇ.f ‚â´ z‚ÇÉ.s = z‚ÇÅ.s ‚â´ z‚ÇÉ.f) :\n    z‚ÇÅ.comp z‚ÇÇ = Localization.Hom.mk (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ) :=\n  Quot.sound (LeftFraction.comp‚ÇÄ_rel _ _ _ _\n    (RightFraction.leftFraction_fac (RightFraction.mk z‚ÇÅ.s z‚ÇÅ.hs z‚ÇÇ.f)) h‚ÇÉ)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.comp_eq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y Z : C\nz‚ÇÅ : W.LeftFraction X Y\nz‚ÇÇ : W.LeftFraction Y Z\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk z‚ÇÅ).comp (CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk z‚ÇÇ)) (z‚ÇÅ.comp z‚ÇÇ)","decl":"lemma Hom.comp_eq {X Y Z : C} (z‚ÇÅ : W.LeftFraction X Y) (z‚ÇÇ : W.LeftFraction Y Z) :\n    Hom.comp (mk z‚ÇÅ) (mk z‚ÇÇ) = z‚ÇÅ.comp z‚ÇÇ := rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Q_obj","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX : C\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).obj X) X","decl":"/-- The localization functor to the constructed localized category for a morphism property\nthat has left calculus of fractions. -/\n@[simps obj]\ndef Q : C ‚•§ Localization W where\n  obj X := X\n  map f := Hom.mk (ofHom W f)\n  map_id _ := rfl\n  map_comp {X Y Z} f g := by\n    change _ = Hom.comp _ _\n    rw [Hom.comp_eq, comp_eq (ofHom W f) (ofHom W g) (ofHom W g) (by simp)]\n    simp only [ofHom, comp‚ÇÄ, comp_id]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk_eq_hom_mk","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nf : W.LeftFraction X Y\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk f) (CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk f)","decl":"lemma homMk_eq_hom_mk {X Y : C} (f : W.LeftFraction X Y) : homMk f = Hom.mk f := rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Q_map","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map f) (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk (CategoryTheory.MorphismProperty.LeftFraction.ofHom W f))","decl":"lemma Q_map {X Y : C} (f : X ‚ü∂ Y) : (Q W).map f = homMk (ofHom W f) := rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk_comp_homMk","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y Z : C\nz‚ÇÅ : W.LeftFraction X Y\nz‚ÇÇ : W.LeftFraction Y Z\nz‚ÇÉ : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y'\nh‚ÇÉ : Eq (CategoryTheory.CategoryStruct.comp z‚ÇÇ.f z‚ÇÉ.s) (CategoryTheory.CategoryStruct.comp z‚ÇÅ.s z‚ÇÉ.f)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk z‚ÇÅ) (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk z‚ÇÇ)) (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ))","decl":"lemma homMk_comp_homMk {X Y Z : C} (z‚ÇÅ : W.LeftFraction X Y) (z‚ÇÇ : W.LeftFraction Y Z)\n    (z‚ÇÉ : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y') (h‚ÇÉ : z‚ÇÇ.f ‚â´ z‚ÇÉ.s = z‚ÇÅ.s ‚â´ z‚ÇÉ.f) :\n    homMk z‚ÇÅ ‚â´ homMk z‚ÇÇ = homMk (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ) := by\n  change Hom.comp _ _ = _\n  rw [Hom.comp_eq, comp_eq z‚ÇÅ z‚ÇÇ z‚ÇÉ h‚ÇÉ]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk_eq_of_leftFractionRel","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.LeftFraction X Y\nh : CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk z‚ÇÅ) (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk z‚ÇÇ)","decl":"lemma homMk_eq_of_leftFractionRel {X Y : C} (z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y)\n    (h : LeftFractionRel z‚ÇÅ z‚ÇÇ) :\n    homMk z‚ÇÅ = homMk z‚ÇÇ :=\n  Quot.sound h\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk_eq_iff_leftFractionRel","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.LeftFraction X Y\n‚ä¢ Iff (Eq (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk z‚ÇÅ) (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk z‚ÇÇ)) (CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ)","decl":"lemma homMk_eq_iff_leftFractionRel {X Y : C} (z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y) :\n    homMk z‚ÇÅ = homMk z‚ÇÇ ‚Üî LeftFractionRel z‚ÇÅ z‚ÇÇ :=\n  @Equivalence.quot_mk_eq_iff _ _ (equivalenceLeftFractionRel W X Y) _ _\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Q_map_comp_Qinv","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y Y' : C\nf : Quiver.Hom X Y'\ns : Quiver.Hom Y Y'\nhs : W s\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map f) (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs)) (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk (CategoryTheory.MorphismProperty.LeftFraction.mk f s hs))","decl":"lemma Q_map_comp_Qinv {X Y Y' : C} (f : X ‚ü∂ Y') (s : Y ‚ü∂ Y') (hs : W s) :\n    (Q W).map f ‚â´ Qinv s hs = homMk (mk f s hs) := by\n  dsimp only [Q_map, Qinv]\n  rw [homMk_comp_homMk (ofHom W f) (ofInv s hs) (ofHom W (ùüô _)) (by simp)]\n  simp\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso_hom","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso s hs).hom ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map s)","decl":"/-- The isomorphism in `Localization W` that is induced by a morphism in `W`. -/\n@[simps]\ndef Qiso {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : (Q W).obj X ‚âÖ (Q W).obj Y where\n  hom := (Q W).map s\n  inv := Qinv s hs\n  hom_inv_id := by\n    rw [Q_map_comp_Qinv]\n    apply homMk_eq_of_leftFractionRel\n    exact ‚ü®_, ùüô Y, s, by simp, by simp, by simpa using hs‚ü©\n  inv_hom_id := by\n    dsimp only [Qinv, Q_map]\n    rw [homMk_comp_homMk (ofInv s hs) (ofHom W s) (ofHom W (ùüô Y)) (by simp)]\n    apply homMk_eq_of_leftFractionRel\n    exact ‚ü®_, ùüô Y, ùüô Y, by simp, by simp, by simpa using W.id_mem Y‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso_inv","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso s hs).inv (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs)","decl":"/-- The isomorphism in `Localization W` that is induced by a morphism in `W`. -/\n@[simps]\ndef Qiso {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : (Q W).obj X ‚âÖ (Q W).obj Y where\n  hom := (Q W).map s\n  inv := Qinv s hs\n  hom_inv_id := by\n    rw [Q_map_comp_Qinv]\n    apply homMk_eq_of_leftFractionRel\n    exact ‚ü®_, ùüô Y, s, by simp, by simp, by simpa using hs‚ü©\n  inv_hom_id := by\n    dsimp only [Qinv, Q_map]\n    rw [homMk_comp_homMk (ofInv s hs) (ofHom W s) (ofHom W (ùüô Y)) (by simp)]\n    apply homMk_eq_of_leftFractionRel\n    exact ‚ü®_, ùüô Y, ùüô Y, by simp, by simp, by simpa using W.id_mem Y‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso_hom_inv_id","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map s) (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs)) (CategoryTheory.CategoryStruct.id ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).obj X))","decl":"@[reassoc (attr := simp)]\nlemma Qiso_hom_inv_id {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :\n    (Q W).map s ‚â´ Qinv s hs = ùüô _ := (Qiso s hs).hom_inv_id\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso_hom_inv_id_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\nZ : CategoryTheory.MorphismProperty.LeftFraction.Localization W\nh : Quiver.Hom ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).obj X) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map s) (CategoryTheory.CategoryStruct.comp (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs) h)) h","decl":"@[reassoc (attr := simp)]\nlemma Qiso_hom_inv_id {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :\n    (Q W).map s ‚â´ Qinv s hs = ùüô _ := (Qiso s hs).hom_inv_id\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso_inv_hom_id","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs) ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map s)) (CategoryTheory.CategoryStruct.id ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).obj Y))","decl":"@[reassoc (attr := simp)]\nlemma Qiso_inv_hom_id {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :\n    Qinv s hs  ‚â´ (Q W).map s = ùüô _ := (Qiso s hs).inv_hom_id\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Qiso_inv_hom_id_assoc","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\nZ : CategoryTheory.MorphismProperty.LeftFraction.Localization W\nh : Quiver.Hom ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).obj Y) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs) (CategoryTheory.CategoryStruct.comp ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).map s) h)) h","decl":"@[reassoc (attr := simp)]\nlemma Qiso_inv_hom_id {X Y : C} (s : X ‚ü∂ Y) (hs : W s) :\n    Qinv s hs  ‚â´ (Q W).map s = ùüô _ := (Qiso s hs).inv_hom_id\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.instIsIsoQinv","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\ns : Quiver.Hom X Y\nhs : W s\n‚ä¢ CategoryTheory.IsIso (CategoryTheory.MorphismProperty.LeftFraction.Localization.Qinv s hs)","decl":"instance {X Y : C} (s : X ‚ü∂ Y) (hs : W s) : IsIso (Qinv s hs) :=\n  (inferInstance : IsIso (Qiso s hs).inv)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.map_mk","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_1} C\nE : Type u_3\ninst‚úù : CategoryTheory.Category.{u_5, u_3} E\nW : CategoryTheory.MorphismProperty C\nX Y : C\nf : W.LeftFraction X Y\nF : CategoryTheory.Functor C E\nhF : W.IsInvertedBy F\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Hom.mk f).map F hF) (f.map F hF)","decl":"@[simp]\nlemma Hom.map_mk {W} {X Y : C} (f : LeftFraction W X Y)\n    (F : C ‚•§ E) (hF : W.IsInvertedBy F) :\n  Hom.map (Hom.mk f) F hF = f.map F hF := rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.StrictUniversalPropertyFixedTarget.inverts","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\n‚ä¢ W.IsInvertedBy (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W)","decl":"lemma inverts : W.IsInvertedBy (Q W) := fun _ _ s hs =>\n  (inferInstance : IsIso (Qiso s hs).hom)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.StrictUniversalPropertyFixedTarget.fac","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : W.HasLeftCalculusOfFractions\nE : Type u_3\ninst‚úù : CategoryTheory.Category.{u_5, u_3} E\nF : CategoryTheory.Functor C E\nhF : W.IsInvertedBy F\n‚ä¢ Eq ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).comp (CategoryTheory.MorphismProperty.LeftFraction.Localization.StrictUniversalPropertyFixedTarget.lift F hF)) F","decl":"lemma fac (F : C ‚•§ E) (hF : W.IsInvertedBy F) : Q W ‚ãô lift F hF = F :=\n  Functor.ext (fun _ => rfl) (fun X Y f => by\n    dsimp [lift]\n    rw [Q_map, Hom.map_mk, id_comp, comp_id, map_ofHom])\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.StrictUniversalPropertyFixedTarget.uniq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : W.HasLeftCalculusOfFractions\nE : Type u_3\ninst‚úù : CategoryTheory.Category.{u_5, u_3} E\nF‚ÇÅ F‚ÇÇ : CategoryTheory.Functor (CategoryTheory.MorphismProperty.LeftFraction.Localization W) E\nh : Eq ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).comp F‚ÇÅ) ((CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).comp F‚ÇÇ)\n‚ä¢ Eq F‚ÇÅ F‚ÇÇ","decl":"lemma uniq (F‚ÇÅ F‚ÇÇ : Localization W ‚•§ E) (h : Q W ‚ãô F‚ÇÅ = Q W ‚ãô F‚ÇÇ) : F‚ÇÅ = F‚ÇÇ :=\n  Functor.ext (fun X => Functor.congr_obj h X) (by\n    rintro (X Y : C) f\n    obtain ‚ü®f, rfl‚ü© := Hom.mk_surjective f\n    rw [show Hom.mk f = homMk (mk f.f f.s f.hs) by rfl,\n      ‚Üê Q_map_comp_Qinv f.f f.s f.hs, F‚ÇÅ.map_comp, F‚ÇÇ.map_comp, assoc]\n    erw [Functor.congr_hom h f.f]\n    rw [assoc, assoc]\n    congr 2\n    have := inverts W _ f.hs\n    rw [‚Üê cancel_epi (F‚ÇÇ.map ((Q W).map f.s)), ‚Üê F‚ÇÇ.map_comp_assoc,\n      Qiso_hom_inv_id, Functor.map_id, id_comp]\n    erw [Functor.congr_hom h.symm f.s]\n    dsimp\n    rw [assoc, assoc, eqToHom_trans_assoc, eqToHom_refl, id_comp, ‚Üê F‚ÇÅ.map_comp,\n      Qiso_hom_inv_id]\n    dsimp\n    rw [F‚ÇÅ.map_id, comp_id])\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.instIsLocalizationQ","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\n‚ä¢ (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W).IsLocalization W","decl":"instance : (Q W).IsLocalization W :=\n  Functor.IsLocalization.mk' _ _\n    (strictUniversalPropertyFixedTarget W _)\n    (strictUniversalPropertyFixedTarget W _)\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk_eq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nf : W.LeftFraction X Y\n‚ä¢ Eq (CategoryTheory.MorphismProperty.LeftFraction.Localization.homMk f) (f.map (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W) ‚ãØ)","decl":"lemma homMk_eq {X Y : C} (f : LeftFraction W X Y) :\n    homMk f = f.map (Q W) (Localization.inverts _ W) := by\n  have := Localization.inverts (Q W) W f.s f.hs\n  rw [‚Üê Q_map_comp_Qinv f.f f.s f.hs, ‚Üê cancel_mono ((Q W).map f.s),\n    assoc, Qiso_inv_hom_id, comp_id, map_comp_map_s]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.Localization.map_eq_iff","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nf g : W.LeftFraction X Y\n‚ä¢ Iff (Eq (f.map (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W) ‚ãØ) (g.map (CategoryTheory.MorphismProperty.LeftFraction.Localization.Q W) ‚ãØ)) (CategoryTheory.MorphismProperty.LeftFractionRel f g)","decl":"lemma map_eq_iff {X Y : C} (f g : LeftFraction W X Y) :\n    f.map (LeftFraction.Localization.Q W) (Localization.inverts _ _) =\n        g.map (LeftFraction.Localization.Q W) (Localization.inverts _ _) ‚Üî\n      LeftFractionRel f g := by\n  simp only [‚Üê Hom.map_mk _ (Q W)]\n  constructor\n  ¬∑ intro h\n    rw [‚Üê homMk_eq_iff_leftFractionRel, homMk_eq, homMk_eq]\n    exact h\n  ¬∑ intro h\n    congr 1\n    exact Quot.sound h\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_eq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬π : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\nL : CategoryTheory.Functor C D\ninst‚úù : L.IsLocalization W\n‚ä¢ Eq (œÜ.map L ‚ãØ) (CategoryTheory.CategoryStruct.comp (L.map œÜ.f) (CategoryTheory.Localization.isoOfHom L W œÜ.s ‚ãØ).inv)","decl":"lemma map_eq {W} {X Y : C} (œÜ : W.LeftFraction X Y) (L : C ‚•§ D) [L.IsLocalization W] :\n    œÜ.map L (Localization.inverts L W) =\n      L.map œÜ.f ‚â´ (Localization.isoOfHom L W œÜ.s œÜ.hs).inv := rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_compatibility","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_4, u_1} C\ninst‚úù¬≥ : CategoryTheory.Category.{u_6, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\nE : Type u_3\ninst‚úù¬≤ : CategoryTheory.Category.{u_5, u_3} E\nL‚ÇÅ : CategoryTheory.Functor C D\nL‚ÇÇ : CategoryTheory.Functor C E\ninst‚úù¬π : L‚ÇÅ.IsLocalization W\ninst‚úù : L‚ÇÇ.IsLocalization W\n‚ä¢ Eq ((CategoryTheory.Localization.uniq L‚ÇÅ L‚ÇÇ W).functor.map (œÜ.map L‚ÇÅ ‚ãØ)) (CategoryTheory.CategoryStruct.comp ((CategoryTheory.Localization.compUniqFunctor L‚ÇÅ L‚ÇÇ W).hom.app X) (CategoryTheory.CategoryStruct.comp (œÜ.map L‚ÇÇ ‚ãØ) ((CategoryTheory.Localization.compUniqFunctor L‚ÇÅ L‚ÇÇ W).inv.app Y)))","decl":"lemma map_compatibility {W} {X Y : C}\n    (œÜ : W.LeftFraction X Y) {E : Type*} [Category E]\n    (L‚ÇÅ : C ‚•§ D) (L‚ÇÇ : C ‚•§ E) [L‚ÇÅ.IsLocalization W] [L‚ÇÇ.IsLocalization W] :\n    (Localization.uniq L‚ÇÅ L‚ÇÇ W).functor.map (œÜ.map L‚ÇÅ (Localization.inverts L‚ÇÅ W)) =\n      (Localization.compUniqFunctor L‚ÇÅ L‚ÇÇ W).hom.app X ‚â´\n        œÜ.map L‚ÇÇ (Localization.inverts L‚ÇÇ W) ‚â´\n        (Localization.compUniqFunctor L‚ÇÅ L‚ÇÇ W).inv.app Y := by\n  let e := Localization.compUniqFunctor L‚ÇÅ L‚ÇÇ W\n  have := Localization.inverts L‚ÇÇ W œÜ.s œÜ.hs\n  rw [‚Üê cancel_mono (e.hom.app Y), assoc, assoc, e.inv_hom_id_app, comp_id,\n    ‚Üê cancel_mono (L‚ÇÇ.map œÜ.s), assoc, assoc, map_comp_map_s, ‚Üê e.hom.naturality]\n  simpa [‚Üê Functor.map_comp_assoc, map_comp_map_s] using e.hom.naturality œÜ.f\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_eq_of_map_eq","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_4, u_1} C\ninst‚úù¬≥ : CategoryTheory.Category.{u_6, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ‚ÇÅ œÜ‚ÇÇ : W.LeftFraction X Y\nE : Type u_3\ninst‚úù¬≤ : CategoryTheory.Category.{u_5, u_3} E\nL‚ÇÅ : CategoryTheory.Functor C D\nL‚ÇÇ : CategoryTheory.Functor C E\ninst‚úù¬π : L‚ÇÅ.IsLocalization W\ninst‚úù : L‚ÇÇ.IsLocalization W\nh : Eq (œÜ‚ÇÅ.map L‚ÇÅ ‚ãØ) (œÜ‚ÇÇ.map L‚ÇÅ ‚ãØ)\n‚ä¢ Eq (œÜ‚ÇÅ.map L‚ÇÇ ‚ãØ) (œÜ‚ÇÇ.map L‚ÇÇ ‚ãØ)","decl":"lemma map_eq_of_map_eq {W} {X Y : C}\n    (œÜ‚ÇÅ œÜ‚ÇÇ : W.LeftFraction X Y) {E : Type*} [Category E]\n    (L‚ÇÅ : C ‚•§ D) (L‚ÇÇ : C ‚•§ E) [L‚ÇÅ.IsLocalization W] [L‚ÇÇ.IsLocalization W]\n    (h : œÜ‚ÇÅ.map L‚ÇÅ (Localization.inverts L‚ÇÅ W) = œÜ‚ÇÇ.map L‚ÇÅ (Localization.inverts L‚ÇÅ W)) :\n    œÜ‚ÇÅ.map L‚ÇÇ (Localization.inverts L‚ÇÇ W) = œÜ‚ÇÇ.map L‚ÇÇ (Localization.inverts L‚ÇÇ W) := by\n  apply (Localization.uniq L‚ÇÇ L‚ÇÅ W).functor.map_injective\n  rw [map_compatibility œÜ‚ÇÅ L‚ÇÇ L‚ÇÅ, map_compatibility œÜ‚ÇÇ L‚ÇÇ L‚ÇÅ, h]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_comp_map_eq_map","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : W.HasLeftCalculusOfFractions\nX Y Z : C\nz‚ÇÅ : W.LeftFraction X Y\nz‚ÇÇ : W.LeftFraction Y Z\nz‚ÇÉ : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y'\nh‚ÇÉ : Eq (CategoryTheory.CategoryStruct.comp z‚ÇÇ.f z‚ÇÉ.s) (CategoryTheory.CategoryStruct.comp z‚ÇÅ.s z‚ÇÉ.f)\nL : CategoryTheory.Functor C D\ninst‚úù : L.IsLocalization W\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (z‚ÇÅ.map L ‚ãØ) (z‚ÇÇ.map L ‚ãØ)) ((z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ).map L ‚ãØ)","decl":"lemma map_comp_map_eq_map {X Y Z : C} (z‚ÇÅ : W.LeftFraction X Y) (z‚ÇÇ : W.LeftFraction Y Z)\n    (z‚ÇÉ : W.LeftFraction z‚ÇÅ.Y' z‚ÇÇ.Y') (h‚ÇÉ : z‚ÇÇ.f ‚â´ z‚ÇÉ.s = z‚ÇÅ.s ‚â´ z‚ÇÉ.f)\n    (L : C ‚•§ D) [L.IsLocalization W] :\n    z‚ÇÅ.map L (Localization.inverts L W) ‚â´ z‚ÇÇ.map L (Localization.inverts L W) =\n      (z‚ÇÅ.comp‚ÇÄ z‚ÇÇ z‚ÇÉ).map L (Localization.inverts L W) := by\n  have := Localization.inverts L W _ z‚ÇÇ.hs\n  have := Localization.inverts L W _ z‚ÇÉ.hs\n  have : IsIso (L.map (z‚ÇÇ.s ‚â´ z‚ÇÉ.s)) := by\n    rw [L.map_comp]\n    infer_instance\n  dsimp [LeftFraction.comp‚ÇÄ]\n  rw [‚Üê cancel_mono (L.map (z‚ÇÇ.s ‚â´ z‚ÇÉ.s)), map_comp_map_s,\n    L.map_comp, assoc, map_comp_map_s_assoc, ‚Üê L.map_comp, h‚ÇÉ,\n    L.map_comp, map_comp_map_s_assoc, L.map_comp]\n\n"}
{"name":"CategoryTheory.Localization.exists_leftFraction","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nf : Quiver.Hom (L.obj X) (L.obj Y)\n‚ä¢ Exists fun œÜ => Eq f (œÜ.map L ‚ãØ)","decl":"lemma Localization.exists_leftFraction {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :\n    ‚àÉ (œÜ : W.LeftFraction X Y), f = œÜ.map L (Localization.inverts L W) := by\n  let E := Localization.uniq (MorphismProperty.LeftFraction.Localization.Q W) L W\n  let e : _ ‚ãô E.functor ‚âÖ L := Localization.compUniqFunctor _ _ _\n  obtain ‚ü®f', rfl‚ü© : ‚àÉ (f' : E.functor.obj X ‚ü∂ E.functor.obj Y),\n      f = e.inv.app _ ‚â´ f' ‚â´ e.hom.app _ := ‚ü®e.hom.app _ ‚â´ f ‚â´ e.inv.app _, by simp‚ü©\n  obtain ‚ü®g, rfl‚ü© := E.functor.map_surjective f'\n  obtain ‚ü®g, rfl‚ü© := MorphismProperty.LeftFraction.Localization.Hom.mk_surjective g\n  refine ‚ü®g, ?_‚ü©\n  rw [‚Üê MorphismProperty.LeftFraction.Localization.homMk_eq_hom_mk,\n    MorphismProperty.LeftFraction.Localization.homMk_eq g,\n    g.map_compatibility (MorphismProperty.LeftFraction.Localization.Q W) L,\n    assoc, assoc, Iso.inv_hom_id_app, comp_id, Iso.inv_hom_id_app_assoc]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.map_eq_iff","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nœÜ œà : W.LeftFraction X Y\n‚ä¢ Iff (Eq (œÜ.map L ‚ãØ) (œà.map L ‚ãØ)) (CategoryTheory.MorphismProperty.LeftFractionRel œÜ œà)","decl":"lemma MorphismProperty.LeftFraction.map_eq_iff\n    {X Y : C} (œÜ œà : W.LeftFraction X Y) :\n    œÜ.map L (Localization.inverts _ _) = œà.map L (Localization.inverts _ _) ‚Üî\n      LeftFractionRel œÜ œà := by\n  constructor\n  ¬∑ intro h\n    rw [‚Üê MorphismProperty.LeftFraction.Localization.map_eq_iff]\n    apply map_eq_of_map_eq _ _ _ _ h\n  ¬∑ intro h\n    simp only [‚Üê Localization.Hom.map_mk _ L (Localization.inverts _ _)]\n    congr 1\n    exact Quot.sound h\n\n"}
{"name":"CategoryTheory.MorphismProperty.map_eq_iff_postcomp","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasLeftCalculusOfFractions\nX Y : C\nf‚ÇÅ f‚ÇÇ : Quiver.Hom X Y\n‚ä¢ Iff (Eq (L.map f‚ÇÅ) (L.map f‚ÇÇ)) (Exists fun Z => Exists fun s => Exists fun x => Eq (CategoryTheory.CategoryStruct.comp f‚ÇÅ s) (CategoryTheory.CategoryStruct.comp f‚ÇÇ s))","decl":"lemma MorphismProperty.map_eq_iff_postcomp {X Y : C} (f‚ÇÅ f‚ÇÇ : X ‚ü∂ Y) :\n    L.map f‚ÇÅ = L.map f‚ÇÇ ‚Üî ‚àÉ (Z : C) (s : Y ‚ü∂ Z) (_ : W s), f‚ÇÅ ‚â´ s = f‚ÇÇ ‚â´ s := by\n  constructor\n  ¬∑ intro h\n    rw [‚Üê LeftFraction.map_ofHom W _ L (Localization.inverts _ _),\n      ‚Üê LeftFraction.map_ofHom W _ L (Localization.inverts _ _),\n      LeftFraction.map_eq_iff] at h\n    obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h\n    dsimp at t‚ÇÅ t‚ÇÇ hst hft ht\n    simp only [id_comp] at hst\n    exact ‚ü®Z, t‚ÇÅ, by simpa using ht, by rw [hft, hst]‚ü©\n  ¬∑ rintro ‚ü®Z, s, hs, fac‚ü©\n    simp only [‚Üê cancel_mono (Localization.isoOfHom L W s hs).hom,\n      Localization.isoOfHom_hom, ‚Üê L.map_comp, fac]\n\n"}
{"name":"CategoryTheory.Localization.essSurj_mapArrow","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasLeftCalculusOfFractions\n‚ä¢ L.mapArrow.EssSurj","decl":"include W in\nlemma Localization.essSurj_mapArrow :\n    L.mapArrow.EssSurj where\n  mem_essImage f := by\n    have := Localization.essSurj L W\n    obtain ‚ü®X, ‚ü®eX‚ü©‚ü© : ‚àÉ (X : C), Nonempty (L.obj X ‚âÖ f.left) :=\n      ‚ü®_, ‚ü®L.objObjPreimageIso f.left‚ü©‚ü©\n    obtain ‚ü®Y, ‚ü®eY‚ü©‚ü© : ‚àÉ (Y : C), Nonempty (L.obj Y ‚âÖ f.right) :=\n      ‚ü®_, ‚ü®L.objObjPreimageIso f.right‚ü©‚ü©\n    obtain ‚ü®œÜ, hœÜ‚ü© := Localization.exists_leftFraction L W (eX.hom ‚â´ f.hom ‚â´ eY.inv)\n    refine ‚ü®Arrow.mk œÜ.f, ‚ü®Iso.symm ?_‚ü©‚ü©\n    refine Arrow.isoMk eX.symm (eY.symm ‚â™‚â´ Localization.isoOfHom L W œÜ.s œÜ.hs) ?_\n    dsimp\n    simp only [‚Üê cancel_epi eX.hom, Iso.hom_inv_id_assoc, reassoc_of% hœÜ,\n      MorphismProperty.LeftFraction.map_comp_map_s]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.op_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq œÜ.op.s œÜ.s.op","decl":"/-- The right fraction in the opposite category corresponding to a left fraction. -/\n@[simps]\ndef LeftFraction.op {X Y : C} (œÜ : W.LeftFraction X Y) :\n    W.op.RightFraction (Opposite.op Y) (Opposite.op X) where\n  X' := Opposite.op œÜ.Y'\n  s := œÜ.s.op\n  hs := œÜ.hs\n  f := œÜ.f.op\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.op_X'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq œÜ.op.X' { unop := œÜ.Y' }","decl":"/-- The right fraction in the opposite category corresponding to a left fraction. -/\n@[simps]\ndef LeftFraction.op {X Y : C} (œÜ : W.LeftFraction X Y) :\n    W.op.RightFraction (Opposite.op Y) (Opposite.op X) where\n  X' := Opposite.op œÜ.Y'\n  s := œÜ.s.op\n  hs := œÜ.hs\n  f := œÜ.f.op\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.op_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq œÜ.op.f œÜ.f.op","decl":"/-- The right fraction in the opposite category corresponding to a left fraction. -/\n@[simps]\ndef LeftFraction.op {X Y : C} (œÜ : W.LeftFraction X Y) :\n    W.op.RightFraction (Opposite.op Y) (Opposite.op X) where\n  X' := Opposite.op œÜ.Y'\n  s := œÜ.s.op\n  hs := œÜ.hs\n  f := œÜ.f.op\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.op_Y'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq œÜ.op.Y' { unop := œÜ.X' }","decl":"/-- The left fraction in the opposite category corresponding to a right fraction. -/\n@[simps]\ndef RightFraction.op {X Y : C} (œÜ : W.RightFraction X Y) :\n    W.op.LeftFraction (Opposite.op Y) (Opposite.op X) where\n  Y' := Opposite.op œÜ.X'\n  s := œÜ.s.op\n  hs := œÜ.hs\n  f := œÜ.f.op\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.op_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq œÜ.op.s œÜ.s.op","decl":"/-- The left fraction in the opposite category corresponding to a right fraction. -/\n@[simps]\ndef RightFraction.op {X Y : C} (œÜ : W.RightFraction X Y) :\n    W.op.LeftFraction (Opposite.op Y) (Opposite.op X) where\n  Y' := Opposite.op œÜ.X'\n  s := œÜ.s.op\n  hs := œÜ.hs\n  f := œÜ.f.op\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.op_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq œÜ.op.f œÜ.f.op","decl":"/-- The left fraction in the opposite category corresponding to a right fraction. -/\n@[simps]\ndef RightFraction.op {X Y : C} (œÜ : W.RightFraction X Y) :\n    W.op.LeftFraction (Opposite.op Y) (Opposite.op X) where\n  Y' := Opposite.op œÜ.X'\n  s := œÜ.s.op\n  hs := œÜ.hs\n  f := œÜ.f.op\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.unop_X'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq œÜ.unop.X' (Opposite.unop œÜ.Y')","decl":"/-- The right fraction corresponding to a left fraction in the opposite category. -/\n@[simps]\ndef LeftFraction.unop {W : MorphismProperty C·µí·µñ}\n    {X Y : C·µí·µñ} (œÜ : W.LeftFraction X Y) :\n    W.unop.RightFraction (Opposite.unop Y) (Opposite.unop X) where\n  X' := Opposite.unop œÜ.Y'\n  s := œÜ.s.unop\n  hs := œÜ.hs\n  f := œÜ.f.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.unop_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq œÜ.unop.s œÜ.s.unop","decl":"/-- The right fraction corresponding to a left fraction in the opposite category. -/\n@[simps]\ndef LeftFraction.unop {W : MorphismProperty C·µí·µñ}\n    {X Y : C·µí·µñ} (œÜ : W.LeftFraction X Y) :\n    W.unop.RightFraction (Opposite.unop Y) (Opposite.unop X) where\n  X' := Opposite.unop œÜ.Y'\n  s := œÜ.s.unop\n  hs := œÜ.hs\n  f := œÜ.f.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.unop_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nœÜ : W.LeftFraction X Y\n‚ä¢ Eq œÜ.unop.f œÜ.f.unop","decl":"/-- The right fraction corresponding to a left fraction in the opposite category. -/\n@[simps]\ndef LeftFraction.unop {W : MorphismProperty C·µí·µñ}\n    {X Y : C·µí·µñ} (œÜ : W.LeftFraction X Y) :\n    W.unop.RightFraction (Opposite.unop Y) (Opposite.unop X) where\n  X' := Opposite.unop œÜ.Y'\n  s := œÜ.s.unop\n  hs := œÜ.hs\n  f := œÜ.f.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.unop_f","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq œÜ.unop.f œÜ.f.unop","decl":"/-- The left fraction corresponding to a right fraction in the opposite category. -/\n@[simps]\ndef RightFraction.unop {W : MorphismProperty C·µí·µñ}\n    {X Y : C·µí·µñ} (œÜ : W.RightFraction X Y) :\n    W.unop.LeftFraction (Opposite.unop Y) (Opposite.unop X) where\n  Y' := Opposite.unop œÜ.X'\n  s := œÜ.s.unop\n  hs := œÜ.hs\n  f := œÜ.f.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.unop_Y'","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq œÜ.unop.Y' (Opposite.unop œÜ.X')","decl":"/-- The left fraction corresponding to a right fraction in the opposite category. -/\n@[simps]\ndef RightFraction.unop {W : MorphismProperty C·µí·µñ}\n    {X Y : C·µí·µñ} (œÜ : W.RightFraction X Y) :\n    W.unop.LeftFraction (Opposite.unop Y) (Opposite.unop X) where\n  Y' := Opposite.unop œÜ.X'\n  s := œÜ.s.unop\n  hs := œÜ.hs\n  f := œÜ.f.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.unop_s","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nœÜ : W.RightFraction X Y\n‚ä¢ Eq œÜ.unop.s œÜ.s.unop","decl":"/-- The left fraction corresponding to a right fraction in the opposite category. -/\n@[simps]\ndef RightFraction.unop {W : MorphismProperty C·µí·µñ}\n    {X Y : C·µí·µñ} (œÜ : W.RightFraction X Y) :\n    W.unop.LeftFraction (Opposite.unop Y) (Opposite.unop X) where\n  Y' := Opposite.unop œÜ.X'\n  s := œÜ.s.unop\n  hs := œÜ.hs\n  f := œÜ.f.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.op_map","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.RightFraction X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (œÜ.map L hL).op (œÜ.op.map L.op ‚ãØ)","decl":"lemma RightFraction.op_map\n    {X Y : C} (œÜ : W.RightFraction X Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    (œÜ.map L hL).op = œÜ.op.map L.op hL.op := by\n  dsimp [map, LeftFraction.map]\n  rw [op_inv]\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFraction.op_map","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù : CategoryTheory.Category.{u_4, u_2} D\nW : CategoryTheory.MorphismProperty C\nX Y : C\nœÜ : W.LeftFraction X Y\nL : CategoryTheory.Functor C D\nhL : W.IsInvertedBy L\n‚ä¢ Eq (œÜ.map L hL).op (œÜ.op.map L.op ‚ãØ)","decl":"lemma LeftFraction.op_map\n    {X Y : C} (œÜ : W.LeftFraction X Y) (L : C ‚•§ D) (hL : W.IsInvertedBy L) :\n    (œÜ.map L hL).op = œÜ.op.map L.op hL.op := by\n  dsimp [map, RightFraction.map]\n  rw [op_inv]\n\n"}
{"name":"CategoryTheory.MorphismProperty.instHasRightCalculusOfFractionsOppositeOpOfHasLeftCalculusOfFractions","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nh : W.HasLeftCalculusOfFractions\n‚ä¢ W.op.HasRightCalculusOfFractions","decl":"instance [h : W.HasLeftCalculusOfFractions] : W.op.HasRightCalculusOfFractions where\n  exists_rightFraction X Y œÜ := by\n    obtain ‚ü®œà, eq‚ü© := h.exists_leftFraction œÜ.unop\n    exact ‚ü®œà.op, Quiver.Hom.unop_inj eq‚ü©\n  ext X Y Y' f‚ÇÅ f‚ÇÇ s hs eq := by\n    obtain ‚ü®X', t, ht, fac‚ü© := h.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs (Quiver.Hom.op_inj eq)\n    exact ‚ü®Opposite.op X', t.op, ht, Quiver.Hom.unop_inj fac‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.instHasLeftCalculusOfFractionsOppositeOpOfHasRightCalculusOfFractions","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nh : W.HasRightCalculusOfFractions\n‚ä¢ W.op.HasLeftCalculusOfFractions","decl":"instance [h : W.HasRightCalculusOfFractions] : W.op.HasLeftCalculusOfFractions where\n  exists_leftFraction X Y œÜ := by\n    obtain ‚ü®œà, eq‚ü© := h.exists_rightFraction œÜ.unop\n    exact ‚ü®œà.op, Quiver.Hom.unop_inj eq‚ü©\n  ext X' X Y f‚ÇÅ f‚ÇÇ s hs eq := by\n    obtain ‚ü®Y', t, ht, fac‚ü© := h.ext f‚ÇÅ.unop f‚ÇÇ.unop s.unop hs (Quiver.Hom.op_inj eq)\n    exact ‚ü®Opposite.op Y', t.op, ht, Quiver.Hom.unop_inj fac‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.instHasRightCalculusOfFractionsUnopOfHasLeftCalculusOfFractionsOpposite","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nh : W.HasLeftCalculusOfFractions\n‚ä¢ W.unop.HasRightCalculusOfFractions","decl":"instance (W : MorphismProperty C·µí·µñ) [h : W.HasLeftCalculusOfFractions] :\n    W.unop.HasRightCalculusOfFractions where\n  exists_rightFraction X Y œÜ := by\n    obtain ‚ü®œà, eq‚ü© := h.exists_leftFraction œÜ.op\n    exact ‚ü®œà.unop, Quiver.Hom.op_inj eq‚ü©\n  ext X Y Y' f‚ÇÅ f‚ÇÇ s hs eq := by\n    obtain ‚ü®X', t, ht, fac‚ü© := h.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs (Quiver.Hom.unop_inj eq)\n    exact ‚ü®Opposite.unop X', t.unop, ht, Quiver.Hom.op_inj fac‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.instHasLeftCalculusOfFractionsUnopOfHasRightCalculusOfFractionsOpposite","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nh : W.HasRightCalculusOfFractions\n‚ä¢ W.unop.HasLeftCalculusOfFractions","decl":"instance (W : MorphismProperty C·µí·µñ) [h : W.HasRightCalculusOfFractions] :\n    W.unop.HasLeftCalculusOfFractions where\n  exists_leftFraction X Y œÜ := by\n    obtain ‚ü®œà, eq‚ü© := h.exists_rightFraction œÜ.op\n    exact ‚ü®œà.unop, Quiver.Hom.op_inj eq‚ü©\n  ext X' X Y f‚ÇÅ f‚ÇÇ s hs eq := by\n    obtain ‚ü®Y', t, ht, fac‚ü© := h.ext f‚ÇÅ.op f‚ÇÇ.op s.op hs (Quiver.Hom.unop_inj eq)\n    exact ‚ü®Opposite.unop Y', t.unop, ht, Quiver.Hom.op_inj fac‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFractionRel.op","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.RightFraction X Y\nh : CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ.op z‚ÇÇ.op","decl":"lemma RightFractionRel.op {X Y : C} {z‚ÇÅ z‚ÇÇ : W.RightFraction X Y}\n    (h : RightFractionRel z‚ÇÅ z‚ÇÇ) : LeftFractionRel z‚ÇÅ.op z‚ÇÇ.op := by\n  obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hs, hf, ht‚ü© := h\n  exact ‚ü®Opposite.op Z, t‚ÇÅ.op, t‚ÇÇ.op, Quiver.Hom.unop_inj hs,\n    Quiver.Hom.unop_inj hf, ht‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFractionRel.unop","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nz‚ÇÅ z‚ÇÇ : W.RightFraction X Y\nh : CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ.unop z‚ÇÇ.unop","decl":"lemma RightFractionRel.unop {W : MorphismProperty C·µí·µñ} {X Y : C·µí·µñ}\n    {z‚ÇÅ z‚ÇÇ : W.RightFraction X Y}\n    (h : RightFractionRel z‚ÇÅ z‚ÇÇ) : LeftFractionRel z‚ÇÅ.unop z‚ÇÇ.unop := by\n  obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hs, hf, ht‚ü© := h\n  exact ‚ü®Opposite.unop Z, t‚ÇÅ.unop, t‚ÇÇ.unop, Quiver.Hom.op_inj hs,\n    Quiver.Hom.op_inj hf, ht‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFractionRel.op","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.LeftFraction X Y\nh : CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ.op z‚ÇÇ.op","decl":"lemma LeftFractionRel.op {X Y : C} {z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y}\n    (h : LeftFractionRel z‚ÇÅ z‚ÇÇ) : RightFractionRel z‚ÇÅ.op z‚ÇÇ.op := by\n  obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hs, hf, ht‚ü© := h\n  exact ‚ü®Opposite.op Z, t‚ÇÅ.op, t‚ÇÇ.op, Quiver.Hom.unop_inj hs,\n    Quiver.Hom.unop_inj hf, ht‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.LeftFractionRel.unop","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty (Opposite C)\nX Y : Opposite C\nz‚ÇÅ z‚ÇÇ : W.LeftFraction X Y\nh : CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ.unop z‚ÇÇ.unop","decl":"lemma LeftFractionRel.unop {W : MorphismProperty C·µí·µñ} {X Y : C·µí·µñ}\n    {z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y}\n    (h : LeftFractionRel z‚ÇÅ z‚ÇÇ) : RightFractionRel z‚ÇÅ.unop z‚ÇÇ.unop := by\n  obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hs, hf, ht‚ü© := h\n  exact ‚ü®Opposite.unop Z, t‚ÇÅ.unop, t‚ÇÇ.unop, Quiver.Hom.op_inj hs,\n    Quiver.Hom.op_inj hf, ht‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.leftFractionRel_op_iff","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.RightFraction X Y\n‚ä¢ Iff (CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ.op z‚ÇÇ.op) (CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ z‚ÇÇ)","decl":"lemma leftFractionRel_op_iff\n    {X Y : C} (z‚ÇÅ z‚ÇÇ : W.RightFraction X Y) :\n    LeftFractionRel z‚ÇÅ.op z‚ÇÇ.op ‚Üî RightFractionRel z‚ÇÅ z‚ÇÇ :=\n  ‚ü®fun h => h.unop, fun h => h.op‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.rightFractionRel_op_iff","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.LeftFraction X Y\n‚ä¢ Iff (CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ.op z‚ÇÇ.op) (CategoryTheory.MorphismProperty.LeftFractionRel z‚ÇÅ z‚ÇÇ)","decl":"lemma rightFractionRel_op_iff\n    {X Y : C} (z‚ÇÅ z‚ÇÇ : W.LeftFraction X Y) :\n    RightFractionRel z‚ÇÅ.op z‚ÇÇ.op ‚Üî LeftFractionRel z‚ÇÅ z‚ÇÇ :=\n  ‚ü®fun h => h.unop, fun h => h.op‚ü©\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFractionRel.refl","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz : W.RightFraction X Y\n‚ä¢ CategoryTheory.MorphismProperty.RightFractionRel z z","decl":"lemma refl {X Y : C} (z : W.RightFraction X Y) : RightFractionRel z z :=\n  (LeftFractionRel.refl z.op).unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFractionRel.symm","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ : W.RightFraction X Y\nh : CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ z‚ÇÇ\n‚ä¢ CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÇ z‚ÇÅ","decl":"lemma symm {X Y : C} {z‚ÇÅ z‚ÇÇ : W.RightFraction X Y} (h : RightFractionRel z‚ÇÅ z‚ÇÇ) :\n    RightFractionRel z‚ÇÇ z‚ÇÅ :=\n  h.op.symm.unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFractionRel.trans","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\nz‚ÇÅ z‚ÇÇ z‚ÇÉ : W.RightFraction X Y\ninst‚úù : W.HasRightCalculusOfFractions\nh‚ÇÅ‚ÇÇ : CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ z‚ÇÇ\nh‚ÇÇ‚ÇÉ : CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÇ z‚ÇÉ\n‚ä¢ CategoryTheory.MorphismProperty.RightFractionRel z‚ÇÅ z‚ÇÉ","decl":"lemma trans {X Y : C} {z‚ÇÅ z‚ÇÇ z‚ÇÉ : W.RightFraction X Y}\n    [HasRightCalculusOfFractions W]\n    (h‚ÇÅ‚ÇÇ : RightFractionRel z‚ÇÅ z‚ÇÇ) (h‚ÇÇ‚ÇÉ : RightFractionRel z‚ÇÇ z‚ÇÉ) :\n    RightFractionRel z‚ÇÅ z‚ÇÉ :=\n  (h‚ÇÅ‚ÇÇ.op.trans h‚ÇÇ‚ÇÉ.op).unop\n\n"}
{"name":"CategoryTheory.MorphismProperty.equivalenceRightFractionRel","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\ninst‚úù¬π : CategoryTheory.Category.{u_3, u_1} C\nW : CategoryTheory.MorphismProperty C\nX Y : C\ninst‚úù : W.HasRightCalculusOfFractions\n‚ä¢ Equivalence CategoryTheory.MorphismProperty.RightFractionRel","decl":"lemma equivalenceRightFractionRel (X Y : C) [HasRightCalculusOfFractions W] :\n    @_root_.Equivalence (W.RightFraction X Y) RightFractionRel where\n  refl := RightFractionRel.refl\n  symm := RightFractionRel.symm\n  trans := RightFractionRel.trans\n\n"}
{"name":"CategoryTheory.Localization.exists_rightFraction","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasRightCalculusOfFractions\nX Y : C\nf : Quiver.Hom (L.obj X) (L.obj Y)\n‚ä¢ Exists fun œÜ => Eq f (œÜ.map L ‚ãØ)","decl":"lemma Localization.exists_rightFraction {X Y : C} (f : L.obj X ‚ü∂ L.obj Y) :\n    ‚àÉ (œÜ : W.RightFraction X Y), f = œÜ.map L (Localization.inverts L W) := by\n  obtain ‚ü®œÜ, eq‚ü© := Localization.exists_leftFraction L.op W.op f.op\n  refine ‚ü®œÜ.unop, Quiver.Hom.op_inj ?_‚ü©\n  rw [eq, MorphismProperty.RightFraction.op_map]\n  rfl\n\n"}
{"name":"CategoryTheory.MorphismProperty.RightFraction.map_eq_iff","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasRightCalculusOfFractions\nX Y : C\nœÜ œà : W.RightFraction X Y\n‚ä¢ Iff (Eq (œÜ.map L ‚ãØ) (œà.map L ‚ãØ)) (CategoryTheory.MorphismProperty.RightFractionRel œÜ œà)","decl":"lemma MorphismProperty.RightFraction.map_eq_iff\n    {X Y : C} (œÜ œà : W.RightFraction X Y) :\n    œÜ.map L (Localization.inverts _ _) = œà.map L (Localization.inverts _ _) ‚Üî\n      RightFractionRel œÜ œà := by\n  rw [‚Üê leftFractionRel_op_iff, ‚Üê LeftFraction.map_eq_iff L.op W.op œÜ.op œà.op,\n    ‚Üê œÜ.op_map L (Localization.inverts _ _), ‚Üê œà.op_map L (Localization.inverts _ _)]\n  constructor\n  ¬∑ apply Quiver.Hom.unop_inj\n  ¬∑ apply Quiver.Hom.op_inj\n\n"}
{"name":"CategoryTheory.MorphismProperty.map_eq_iff_precomp","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasRightCalculusOfFractions\nY Z : C\nf‚ÇÅ f‚ÇÇ : Quiver.Hom Y Z\n‚ä¢ Iff (Eq (L.map f‚ÇÅ) (L.map f‚ÇÇ)) (Exists fun X => Exists fun s => Exists fun x => Eq (CategoryTheory.CategoryStruct.comp s f‚ÇÅ) (CategoryTheory.CategoryStruct.comp s f‚ÇÇ))","decl":"lemma MorphismProperty.map_eq_iff_precomp {Y Z : C} (f‚ÇÅ f‚ÇÇ : Y ‚ü∂ Z) :\n    L.map f‚ÇÅ = L.map f‚ÇÇ ‚Üî ‚àÉ (X : C) (s : X ‚ü∂ Y) (_ : W s), s ‚â´ f‚ÇÅ = s ‚â´ f‚ÇÇ := by\n  constructor\n  ¬∑ intro h\n    rw [‚Üê RightFraction.map_ofHom W _ L (Localization.inverts _ _),\n      ‚Üê RightFraction.map_ofHom W _ L (Localization.inverts _ _),\n      RightFraction.map_eq_iff] at h\n    obtain ‚ü®Z, t‚ÇÅ, t‚ÇÇ, hst, hft, ht‚ü© := h\n    dsimp at t‚ÇÅ t‚ÇÇ hst hft ht\n    simp only [comp_id] at hst\n    exact ‚ü®Z, t‚ÇÅ, by simpa using ht, by rw [hft, hst]‚ü©\n  ¬∑ rintro ‚ü®Z, s, hs, fac‚ü©\n    simp only [‚Üê cancel_epi (Localization.isoOfHom L W s hs).hom,\n      Localization.isoOfHom_hom, ‚Üê L.map_comp, fac]\n\n"}
{"name":"CategoryTheory.Localization.essSurj_mapArrow_of_hasRightCalculusOfFractions","module":"Mathlib.CategoryTheory.Localization.CalculusOfFractions","initialProofState":"C : Type u_1\nD : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_1} C\ninst‚úù¬≤ : CategoryTheory.Category.{u_4, u_2} D\nL : CategoryTheory.Functor C D\nW : CategoryTheory.MorphismProperty C\ninst‚úù¬π : L.IsLocalization W\ninst‚úù : W.HasRightCalculusOfFractions\n‚ä¢ L.mapArrow.EssSurj","decl":"include W in\nlemma Localization.essSurj_mapArrow_of_hasRightCalculusOfFractions :\n    L.mapArrow.EssSurj where\n  mem_essImage f := by\n    have := Localization.essSurj_mapArrow L.op W.op\n    obtain ‚ü®g, ‚ü®e‚ü©‚ü© : ‚àÉ (g : _), Nonempty (L.op.mapArrow.obj g ‚âÖ Arrow.mk f.hom.op) :=\n      ‚ü®_, ‚ü®Functor.objObjPreimageIso _ _‚ü©‚ü©\n    exact ‚ü®Arrow.mk g.hom.unop, ‚ü®Arrow.isoMk (Arrow.rightFunc.mapIso e.symm).unop\n      (Arrow.leftFunc.mapIso e.symm).unop (Quiver.Hom.op_inj e.inv.w.symm)‚ü©‚ü©\n\n"}
