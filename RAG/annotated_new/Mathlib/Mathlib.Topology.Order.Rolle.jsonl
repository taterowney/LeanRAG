{"name":"exists_Ioo_extr_on_Icc","module":"Mathlib.Topology.Order.Rolle","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁶ : ConditionallyCompleteLinearOrder X\ninst✝⁵ : DenselyOrdered X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : OrderTopology X\ninst✝² : LinearOrder Y\ninst✝¹ : TopologicalSpace Y\ninst✝ : OrderTopology Y\nf : X → Y\na b : X\nhab : LT.lt a b\nhfc : ContinuousOn f (Set.Icc a b)\nhfI : Eq (f a) (f b)\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (IsExtrOn f (Set.Icc a b) c)","decl":"/-- A continuous function on a closed interval with `f a = f b`\ntakes either its maximum or its minimum value at a point in the interior of the interval. -/\ntheorem exists_Ioo_extr_on_Icc (hab : a < b) (hfc : ContinuousOn f (Icc a b)) (hfI : f a = f b) :\n    ∃ c ∈ Ioo a b, IsExtrOn f (Icc a b) c := by\n  have ne : (Icc a b).Nonempty := nonempty_Icc.2 (le_of_lt hab)\n  -- Consider absolute min and max points\n  obtain ⟨c, cmem, cle⟩ : ∃ c ∈ Icc a b, ∀ x ∈ Icc a b, f c ≤ f x :=\n    isCompact_Icc.exists_isMinOn ne hfc\n  obtain ⟨C, Cmem, Cge⟩ : ∃ C ∈ Icc a b, ∀ x ∈ Icc a b, f x ≤ f C :=\n    isCompact_Icc.exists_isMaxOn ne hfc\n  by_cases hc : f c = f a\n  · by_cases hC : f C = f a\n    · have : ∀ x ∈ Icc a b, f x = f a := fun x hx => le_antisymm (hC ▸ Cge x hx) (hc ▸ cle x hx)\n      -- `f` is a constant, so we can take any point in `Ioo a b`\n      rcases nonempty_Ioo.2 hab with ⟨c', hc'⟩\n      refine ⟨c', hc', Or.inl fun x hx ↦ ?_⟩\n      simp only [mem_setOf_eq, this x hx, this c' (Ioo_subset_Icc_self hc'), le_rfl]\n    · refine ⟨C, ⟨lt_of_le_of_ne Cmem.1 <| mt ?_ hC, lt_of_le_of_ne Cmem.2 <| mt ?_ hC⟩, Or.inr Cge⟩\n      exacts [fun h => by rw [h], fun h => by rw [h, hfI]]\n  · refine ⟨c, ⟨lt_of_le_of_ne cmem.1 <| mt ?_ hc, lt_of_le_of_ne cmem.2 <| mt ?_ hc⟩, Or.inl cle⟩\n    exacts [fun h => by rw [h], fun h => by rw [h, hfI]]\n\n"}
{"name":"exists_isLocalExtr_Ioo","module":"Mathlib.Topology.Order.Rolle","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁶ : ConditionallyCompleteLinearOrder X\ninst✝⁵ : DenselyOrdered X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : OrderTopology X\ninst✝² : LinearOrder Y\ninst✝¹ : TopologicalSpace Y\ninst✝ : OrderTopology Y\nf : X → Y\na b : X\nhab : LT.lt a b\nhfc : ContinuousOn f (Set.Icc a b)\nhfI : Eq (f a) (f b)\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (IsLocalExtr f c)","decl":"/-- A continuous function on a closed interval with `f a = f b`\nhas a local extremum at some point of the corresponding open interval. -/\ntheorem exists_isLocalExtr_Ioo (hab : a < b) (hfc : ContinuousOn f (Icc a b)) (hfI : f a = f b) :\n    ∃ c ∈ Ioo a b, IsLocalExtr f c :=\n  let ⟨c, cmem, hc⟩ := exists_Ioo_extr_on_Icc hab hfc hfI\n  ⟨c, cmem, hc.isLocalExtr <| Icc_mem_nhds cmem.1 cmem.2⟩\n\n"}
{"name":"exists_isExtrOn_Ioo_of_tendsto","module":"Mathlib.Topology.Order.Rolle","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁶ : ConditionallyCompleteLinearOrder X\ninst✝⁵ : DenselyOrdered X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : OrderTopology X\ninst✝² : LinearOrder Y\ninst✝¹ : TopologicalSpace Y\ninst✝ : OrderTopology Y\nf : X → Y\na b : X\nl : Y\nhab : LT.lt a b\nhfc : ContinuousOn f (Set.Ioo a b)\nha : Filter.Tendsto f (nhdsWithin a (Set.Ioi a)) (nhds l)\nhb : Filter.Tendsto f (nhdsWithin b (Set.Iio b)) (nhds l)\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (IsExtrOn f (Set.Ioo a b) c)","decl":"/-- If a function `f` is continuous on an open interval\nand tends to the same value at its endpoints, then it has an extremum on this open interval. -/\nlemma exists_isExtrOn_Ioo_of_tendsto (hab : a < b) (hfc : ContinuousOn f (Ioo a b))\n    (ha : Tendsto f (𝓝[>] a) (𝓝 l)) (hb : Tendsto f (𝓝[<] b) (𝓝 l)) :\n    ∃ c ∈ Ioo a b, IsExtrOn f (Ioo a b) c := by\n  have h : EqOn (extendFrom (Ioo a b) f) f (Ioo a b) := extendFrom_extends hfc\n  obtain ⟨c, hc, hfc⟩ : ∃ c ∈ Ioo a b, IsExtrOn (extendFrom (Ioo a b) f) (Icc a b) c :=\n    exists_Ioo_extr_on_Icc hab (continuousOn_Icc_extendFrom_Ioo hab.ne hfc ha hb)\n      ((eq_lim_at_left_extendFrom_Ioo hab ha).trans (eq_lim_at_right_extendFrom_Ioo hab hb).symm)\n  exact ⟨c, hc, (hfc.on_subset Ioo_subset_Icc_self).congr h (h hc)⟩\n\n"}
{"name":"exists_isLocalExtr_Ioo_of_tendsto","module":"Mathlib.Topology.Order.Rolle","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁶ : ConditionallyCompleteLinearOrder X\ninst✝⁵ : DenselyOrdered X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : OrderTopology X\ninst✝² : LinearOrder Y\ninst✝¹ : TopologicalSpace Y\ninst✝ : OrderTopology Y\nf : X → Y\na b : X\nl : Y\nhab : LT.lt a b\nhfc : ContinuousOn f (Set.Ioo a b)\nha : Filter.Tendsto f (nhdsWithin a (Set.Ioi a)) (nhds l)\nhb : Filter.Tendsto f (nhdsWithin b (Set.Iio b)) (nhds l)\n⊢ Exists fun c => And (Membership.mem (Set.Ioo a b) c) (IsLocalExtr f c)","decl":"/-- If a function `f` is continuous on an open interval\nand tends to the same value at its endpoints,\nthen it has a local extremum on this open interval. -/\nlemma exists_isLocalExtr_Ioo_of_tendsto (hab : a < b) (hfc : ContinuousOn f (Ioo a b))\n    (ha : Tendsto f (𝓝[>] a) (𝓝 l)) (hb : Tendsto f (𝓝[<] b) (𝓝 l)) :\n    ∃ c ∈ Ioo a b, IsLocalExtr f c :=\n  let ⟨c, cmem, hc⟩ := exists_isExtrOn_Ioo_of_tendsto hab hfc ha hb\n  ⟨c, cmem, hc.isLocalExtr <| Ioo_mem_nhds cmem.1 cmem.2⟩\n"}
