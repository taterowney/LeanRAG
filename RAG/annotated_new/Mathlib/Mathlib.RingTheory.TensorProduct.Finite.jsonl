{"name":"Subalgebra.finite_sup","module":"Mathlib.RingTheory.TensorProduct.Finite","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝⁴ : CommSemiring K\ninst✝³ : CommSemiring L\ninst✝² : Algebra K L\nE1 E2 : Subalgebra K L\ninst✝¹ : Module.Finite K (Subtype fun x => Membership.mem E1 x)\ninst✝ : Module.Finite K (Subtype fun x => Membership.mem E2 x)\n⊢ Module.Finite K (Subtype fun x => Membership.mem (Max.max E1 E2) x)","decl":"theorem Subalgebra.finite_sup {K L : Type*} [CommSemiring K] [CommSemiring L] [Algebra K L]\n    (E1 E2 : Subalgebra K L) [Module.Finite K E1] [Module.Finite K E2] :\n    Module.Finite K ↥(E1 ⊔ E2) := by\n  rw [← E1.range_val, ← E2.range_val, ← Algebra.TensorProduct.productMap_range]\n  exact Module.Finite.range (Algebra.TensorProduct.productMap E1.val E2.val).toLinearMap\n\n"}
{"name":"RingHom.surjective_of_tmul_eq_tmul_of_finite","module":"Mathlib.RingTheory.TensorProduct.Finite","initialProofState":"R : Type u_1\nS : Type u_2\ninst✝³ : CommRing R\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\ninst✝ : Module.Finite R S\nh₁ : ∀ (s : S), Eq (TensorProduct.tmul R s 1) (TensorProduct.tmul R 1 s)\n⊢ Function.Surjective ⇑(algebraMap R S)","decl":"open TensorProduct in\nlemma RingHom.surjective_of_tmul_eq_tmul_of_finite {R S}\n    [CommRing R] [CommRing S] [Algebra R S] [Module.Finite R S]\n    (h₁ : ∀ s : S, s ⊗ₜ[R] 1 = 1 ⊗ₜ s) : Function.Surjective (algebraMap R S) := by\n  let R' := LinearMap.range (Algebra.ofId R S).toLinearMap\n  cases' subsingleton_or_nontrivial (S ⧸ R') with h\n  · rwa [Submodule.subsingleton_quotient_iff_eq_top, LinearMap.range_eq_top] at h\n  have : Subsingleton ((S ⧸ R') ⊗[R] (S ⧸ R')) := by\n    refine subsingleton_of_forall_eq 0 fun y ↦ ?_\n    induction y with\n    | zero => rfl\n    | add a b e₁ e₂ => rwa [e₁, zero_add]\n    | tmul x y =>\n      obtain ⟨x, rfl⟩ := R'.mkQ_surjective x\n      obtain ⟨y, rfl⟩ := R'.mkQ_surjective y\n      obtain ⟨s, hs⟩ : ∃ s, 1 ⊗ₜ[R] s = x ⊗ₜ[R] y := by\n        use x * y\n        trans x ⊗ₜ 1 * 1 ⊗ₜ y\n        · simp [h₁]\n        · simp\n      have : R'.mkQ 1 = 0 := (Submodule.Quotient.mk_eq_zero R').mpr ⟨1, map_one (algebraMap R S)⟩\n      rw [← map_tmul R'.mkQ R'.mkQ, ← hs, map_tmul, this, zero_tmul]\n  cases false_of_nontrivial_of_subsingleton ((S ⧸ R') ⊗[R] (S ⧸ R'))\n"}
