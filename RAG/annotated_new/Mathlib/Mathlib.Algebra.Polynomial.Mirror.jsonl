{"name":"Polynomial.mirror_zero","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Eq (Polynomial.mirror 0) 0","decl":"@[simp]\ntheorem mirror_zero : (0 : R[X]).mirror = 0 := by simp [mirror]\n\n"}
{"name":"Polynomial.mirror_monomial","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\na : R\n⊢ Eq ((Polynomial.monomial n) a).mirror ((Polynomial.monomial n) a)","decl":"theorem mirror_monomial (n : ℕ) (a : R) : (monomial n a).mirror = monomial n a := by\n  classical\n    by_cases ha : a = 0\n    · rw [ha, monomial_zero_right, mirror_zero]\n    · rw [mirror, reverse, natDegree_monomial n a, if_neg ha, natTrailingDegree_monomial ha, ←\n        C_mul_X_pow_eq_monomial, reflect_C_mul_X_pow, revAt_le (le_refl n), tsub_self, pow_zero,\n        mul_one]\n\n"}
{"name":"Polynomial.mirror_C","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\na : R\n⊢ Eq (Polynomial.C a).mirror (Polynomial.C a)","decl":"theorem mirror_C (a : R) : (C a).mirror = C a :=\n  mirror_monomial 0 a\n\n"}
{"name":"Polynomial.mirror_X","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Eq Polynomial.X.mirror Polynomial.X","decl":"theorem mirror_X : X.mirror = (X : R[X]) :=\n  mirror_monomial 1 (1 : R)\n\n"}
{"name":"Polynomial.mirror_natDegree","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p.mirror.natDegree p.natDegree","decl":"theorem mirror_natDegree : p.mirror.natDegree = p.natDegree := by\n  by_cases hp : p = 0\n  · rw [hp, mirror_zero]\n  nontriviality R\n  rw [mirror, natDegree_mul', reverse_natDegree, natDegree_X_pow,\n    tsub_add_cancel_of_le p.natTrailingDegree_le_natDegree]\n  rwa [leadingCoeff_X_pow, mul_one, reverse_leadingCoeff, Ne, trailingCoeff_eq_zero]\n\n"}
{"name":"Polynomial.mirror_natTrailingDegree","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p.mirror.natTrailingDegree p.natTrailingDegree","decl":"theorem mirror_natTrailingDegree : p.mirror.natTrailingDegree = p.natTrailingDegree := by\n  by_cases hp : p = 0\n  · rw [hp, mirror_zero]\n  · rw [mirror, natTrailingDegree_mul_X_pow ((mt reverse_eq_zero.mp) hp),\n      natTrailingDegree_reverse, zero_add]\n\n"}
{"name":"Polynomial.coeff_mirror","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\n⊢ Eq (p.mirror.coeff n) (p.coeff ((Polynomial.revAt (HAdd.hAdd p.natDegree p.natTrailingDegree)) n))","decl":"theorem coeff_mirror (n : ℕ) :\n    p.mirror.coeff n = p.coeff (revAt (p.natDegree + p.natTrailingDegree) n) := by\n  by_cases h2 : p.natDegree < n\n  · rw [coeff_eq_zero_of_natDegree_lt (by rwa [mirror_natDegree])]\n    by_cases h1 : n ≤ p.natDegree + p.natTrailingDegree\n    · rw [revAt_le h1, coeff_eq_zero_of_lt_natTrailingDegree]\n      exact (tsub_lt_iff_left h1).mpr (Nat.add_lt_add_right h2 _)\n    · rw [← revAtFun_eq, revAtFun, if_neg h1, coeff_eq_zero_of_natDegree_lt h2]\n  rw [not_lt] at h2\n  rw [revAt_le (h2.trans (Nat.le_add_right _ _))]\n  by_cases h3 : p.natTrailingDegree ≤ n\n  · rw [← tsub_add_eq_add_tsub h2, ← tsub_tsub_assoc h2 h3, mirror, coeff_mul_X_pow', if_pos h3,\n      coeff_reverse, revAt_le (tsub_le_self.trans h2)]\n  rw [not_le] at h3\n  rw [coeff_eq_zero_of_natDegree_lt (lt_tsub_iff_right.mpr (Nat.add_lt_add_left h3 _))]\n  exact coeff_eq_zero_of_lt_natTrailingDegree (by rwa [mirror_natTrailingDegree])\n\n--TODO: Extract `Finset.sum_range_rev_at` lemma.\n"}
{"name":"Polynomial.mirror_eval_one","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq (Polynomial.eval 1 p.mirror) (Polynomial.eval 1 p)","decl":"theorem mirror_eval_one : p.mirror.eval 1 = p.eval 1 := by\n  simp_rw [eval_eq_sum_range, one_pow, mul_one, mirror_natDegree]\n  refine Finset.sum_bij_ne_zero ?_ ?_ ?_ ?_ ?_\n  · exact fun n _ _ => revAt (p.natDegree + p.natTrailingDegree) n\n  · intro n hn hp\n    rw [Finset.mem_range_succ_iff] at *\n    rw [revAt_le (hn.trans (Nat.le_add_right _ _))]\n    rw [tsub_le_iff_tsub_le, add_comm, add_tsub_cancel_right, ← mirror_natTrailingDegree]\n    exact natTrailingDegree_le_of_ne_zero hp\n  · exact fun n₁ _ _ _ _ _ h => by rw [← @revAt_invol _ n₁, h, revAt_invol]\n  · intro n hn hp\n    use revAt (p.natDegree + p.natTrailingDegree) n\n    refine ⟨?_, ?_, revAt_invol⟩\n    · rw [Finset.mem_range_succ_iff] at *\n      rw [revAt_le (hn.trans (Nat.le_add_right _ _))]\n      rw [tsub_le_iff_tsub_le, add_comm, add_tsub_cancel_right]\n      exact natTrailingDegree_le_of_ne_zero hp\n    · change p.mirror.coeff _ ≠ 0\n      rwa [coeff_mirror, revAt_invol]\n  · exact fun n _ _ => p.coeff_mirror n\n\n"}
{"name":"Polynomial.mirror_mirror","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p.mirror.mirror p","decl":"theorem mirror_mirror : p.mirror.mirror = p :=\n  Polynomial.ext fun n => by\n    rw [coeff_mirror, coeff_mirror, mirror_natDegree, mirror_natTrailingDegree, revAt_invol]\n\n"}
{"name":"Polynomial.mirror_involutive","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\n⊢ Function.Involutive Polynomial.mirror","decl":"theorem mirror_involutive : Function.Involutive (mirror : R[X] → R[X]) :=\n  mirror_mirror\n\n"}
{"name":"Polynomial.mirror_eq_iff","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np q : Polynomial R\n⊢ Iff (Eq p.mirror q) (Eq p q.mirror)","decl":"theorem mirror_eq_iff : p.mirror = q ↔ p = q.mirror :=\n  mirror_involutive.eq_iff\n\n"}
{"name":"Polynomial.mirror_inj","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np q : Polynomial R\n⊢ Iff (Eq p.mirror q.mirror) (Eq p q)","decl":"@[simp]\ntheorem mirror_inj : p.mirror = q.mirror ↔ p = q :=\n  mirror_involutive.injective.eq_iff\n\n"}
{"name":"Polynomial.mirror_eq_zero","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Iff (Eq p.mirror 0) (Eq p 0)","decl":"@[simp]\ntheorem mirror_eq_zero : p.mirror = 0 ↔ p = 0 :=\n  ⟨fun h => by rw [← p.mirror_mirror, h, mirror_zero], fun h => by rw [h, mirror_zero]⟩\n\n"}
{"name":"Polynomial.mirror_trailingCoeff","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p.mirror.trailingCoeff p.leadingCoeff","decl":"@[simp]\ntheorem mirror_trailingCoeff : p.mirror.trailingCoeff = p.leadingCoeff := by\n  rw [leadingCoeff, trailingCoeff, mirror_natTrailingDegree, coeff_mirror,\n    revAt_le (Nat.le_add_left _ _), add_tsub_cancel_right]\n\n"}
{"name":"Polynomial.mirror_leadingCoeff","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p.mirror.leadingCoeff p.trailingCoeff","decl":"@[simp]\ntheorem mirror_leadingCoeff : p.mirror.leadingCoeff = p.trailingCoeff := by\n  rw [← p.mirror_mirror, mirror_trailingCoeff, p.mirror_mirror]\n\n"}
{"name":"Polynomial.coeff_mul_mirror","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq ((HMul.hMul p p.mirror).coeff (HAdd.hAdd p.natDegree p.natTrailingDegree)) (p.sum fun x x => HPow.hPow x 2)","decl":"theorem coeff_mul_mirror :\n    (p * p.mirror).coeff (p.natDegree + p.natTrailingDegree) = p.sum fun _ => (· ^ 2) := by\n  rw [coeff_mul, Finset.Nat.sum_antidiagonal_eq_sum_range_succ_mk]\n  refine\n    (Finset.sum_congr rfl fun n hn => ?_).trans\n      (p.sum_eq_of_subset (fun _ ↦ (· ^ 2)) (fun _ ↦ zero_pow two_ne_zero) fun n hn ↦\n          Finset.mem_range_succ_iff.mpr\n            ((le_natDegree_of_mem_supp n hn).trans (Nat.le_add_right _ _))).symm\n  rw [coeff_mirror, ← revAt_le (Finset.mem_range_succ_iff.mp hn), revAt_invol, ← sq]\n\n"}
{"name":"Polynomial.natDegree_mul_mirror","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\np : Polynomial R\ninst✝ : NoZeroDivisors R\n⊢ Eq (HMul.hMul p p.mirror).natDegree (HMul.hMul 2 p.natDegree)","decl":"theorem natDegree_mul_mirror : (p * p.mirror).natDegree = 2 * p.natDegree := by\n  by_cases hp : p = 0\n  · rw [hp, zero_mul, natDegree_zero, mul_zero]\n  rw [natDegree_mul hp (mt mirror_eq_zero.mp hp), mirror_natDegree, two_mul]\n\n"}
{"name":"Polynomial.natTrailingDegree_mul_mirror","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\np : Polynomial R\ninst✝ : NoZeroDivisors R\n⊢ Eq (HMul.hMul p p.mirror).natTrailingDegree (HMul.hMul 2 p.natTrailingDegree)","decl":"theorem natTrailingDegree_mul_mirror :\n    (p * p.mirror).natTrailingDegree = 2 * p.natTrailingDegree := by\n  by_cases hp : p = 0\n  · rw [hp, zero_mul, natTrailingDegree_zero, mul_zero]\n  rw [natTrailingDegree_mul hp (mt mirror_eq_zero.mp hp), mirror_natTrailingDegree, two_mul]\n\n"}
{"name":"Polynomial.mirror_neg","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝ : Ring R\np : Polynomial R\n⊢ Eq (Neg.neg p).mirror (Neg.neg p.mirror)","decl":"theorem mirror_neg : (-p).mirror = -p.mirror := by\n  rw [mirror, mirror, reverse_neg, natTrailingDegree_neg, neg_mul_eq_neg_mul]\n\n"}
{"name":"Polynomial.mirror_mul_of_domain","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\np q : Polynomial R\ninst✝ : NoZeroDivisors R\n⊢ Eq (HMul.hMul p q).mirror (HMul.hMul p.mirror q.mirror)","decl":"theorem mirror_mul_of_domain : (p * q).mirror = p.mirror * q.mirror := by\n  by_cases hp : p = 0\n  · rw [hp, zero_mul, mirror_zero, zero_mul]\n  by_cases hq : q = 0\n  · rw [hq, mul_zero, mirror_zero, mul_zero]\n  rw [mirror, mirror, mirror, reverse_mul_of_domain, natTrailingDegree_mul hp hq, pow_add]\n  rw [mul_assoc, ← mul_assoc q.reverse, ← X_pow_mul (p := reverse q)]\n  repeat' rw [mul_assoc]\n\n"}
{"name":"Polynomial.mirror_smul","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\np : Polynomial R\ninst✝ : NoZeroDivisors R\na : R\n⊢ Eq (HSMul.hSMul a p).mirror (HSMul.hSMul a p.mirror)","decl":"theorem mirror_smul (a : R) : (a • p).mirror = a • p.mirror := by\n  rw [← C_mul', ← C_mul', mirror_mul_of_domain, mirror_C]\n\n"}
{"name":"Polynomial.irreducible_of_mirror","module":"Mathlib.Algebra.Polynomial.Mirror","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\nf : Polynomial R\nh1 : Not (IsUnit f)\nh2 : ∀ (k : Polynomial R), Eq (HMul.hMul f f.mirror) (HMul.hMul k k.mirror) → Or (Eq k f) (Or (Eq k (Neg.neg f)) (Or (Eq k f.mirror) (Eq k (Neg.neg f.mirror))))\nh3 : IsRelPrime f f.mirror\n⊢ Irreducible f","decl":"theorem irreducible_of_mirror (h1 : ¬IsUnit f)\n    (h2 : ∀ k, f * f.mirror = k * k.mirror → k = f ∨ k = -f ∨ k = f.mirror ∨ k = -f.mirror)\n    (h3 : IsRelPrime f f.mirror) : Irreducible f := by\n  constructor\n  · exact h1\n  · intro g h fgh\n    let k := g * h.mirror\n    have key : f * f.mirror = k * k.mirror := by\n      rw [fgh, mirror_mul_of_domain, mirror_mul_of_domain, mirror_mirror, mul_assoc, mul_comm h,\n        mul_comm g.mirror, mul_assoc, ← mul_assoc]\n    have g_dvd_f : g ∣ f := by\n      rw [fgh]\n      exact dvd_mul_right g h\n    have h_dvd_f : h ∣ f := by\n      rw [fgh]\n      exact dvd_mul_left h g\n    have g_dvd_k : g ∣ k := dvd_mul_right g h.mirror\n    have h_dvd_k_rev : h ∣ k.mirror := by\n      rw [mirror_mul_of_domain, mirror_mirror]\n      exact dvd_mul_left h g.mirror\n    have hk := h2 k key\n    rcases hk with (hk | hk | hk | hk)\n    · exact Or.inr (h3 h_dvd_f (by rwa [← hk]))\n    · exact Or.inr (h3 h_dvd_f (by rwa [← neg_eq_iff_eq_neg.mpr hk, mirror_neg, dvd_neg]))\n    · exact Or.inl (h3 g_dvd_f (by rwa [← hk]))\n    · exact Or.inl (h3 g_dvd_f (by rwa [← neg_eq_iff_eq_neg.mpr hk, dvd_neg]))\n\n"}
