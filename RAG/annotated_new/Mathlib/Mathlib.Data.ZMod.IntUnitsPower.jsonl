{"name":"ZMod.smul_units_def","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"z : ZMod 2\nau : Additive (Units Int)\n⊢ Eq (HSMul.hSMul z au) (HSMul.hSMul z.val au)","decl":"lemma ZMod.smul_units_def (z : ZMod 2) (au : Additive ℤˣ) :\n    z • au = z.val • au := rfl\n\n"}
{"name":"ZMod.natCast_smul_units","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"n : Nat\nau : Additive (Units Int)\n⊢ Eq (HSMul.hSMul (↑n) au) (HSMul.hSMul n au)","decl":"lemma ZMod.natCast_smul_units (n : ℕ) (au : Additive ℤˣ) : (n : ZMod 2) • au = n • au :=\n  (Int.units_pow_eq_pow_mod_two au n).symm\n\n"}
{"name":"ofMul_uzpow","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\nu : Units Int\nr : R\n⊢ Eq (Additive.ofMul (HPow.hPow u r)) (HSMul.hSMul r (Additive.ofMul u))","decl":"@[simp] lemma ofMul_uzpow (u : ℤˣ) (r : R) : Additive.ofMul (u ^ r) = r • Additive.ofMul u := rfl\n\n"}
{"name":"toMul_uzpow","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\nu : Additive (Units Int)\nr : R\n⊢ Eq (Additive.toMul (HSMul.hSMul r u)) (HPow.hPow (Additive.toMul u) r)","decl":"@[simp] lemma toMul_uzpow (u : Additive ℤˣ) (r : R) :\n  (r • u).toMul = u.toMul ^ r := rfl\n\n"}
{"name":"uzpow_natCast","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\nu : Units Int\nn : Nat\n⊢ Eq (HPow.hPow u ↑n) (HPow.hPow u n)","decl":"@[norm_cast] lemma uzpow_natCast (u : ℤˣ) (n : ℕ) : u ^ (n : R) = u ^ n := by\n  change ((n : R) • Additive.ofMul u).toMul = _\n  rw [Nat.cast_smul_eq_nsmul, toMul_nsmul, toMul_ofMul]\n\n"}
{"name":"uzpow_coe_nat","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : Module R (Additive (Units Int))\ns : Units Int\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (HPow.hPow s (OfNat.ofNat n)) (HPow.hPow s (OfNat.ofNat n))","decl":"lemma uzpow_coe_nat (s : ℤˣ) (n : ℕ) [n.AtLeastTwo] :\n    s ^ (ofNat(n) : R) = s ^ (ofNat(n) : ℕ) :=\n  uzpow_natCast _ _\n\n"}
{"name":"one_uzpow","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\nx : R\n⊢ Eq (HPow.hPow 1 x) 1","decl":"@[simp] lemma one_uzpow (x : R) : (1 : ℤˣ) ^ x = 1 :=\n  Additive.ofMul.injective <| smul_zero _\n\n"}
{"name":"mul_uzpow","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\ns₁ s₂ : Units Int\nx : R\n⊢ Eq (HPow.hPow (HMul.hMul s₁ s₂) x) (HMul.hMul (HPow.hPow s₁ x) (HPow.hPow s₂ x))","decl":"lemma mul_uzpow (s₁ s₂ : ℤˣ) (x : R) : (s₁ * s₂) ^ x = s₁ ^ x * s₂ ^ x :=\n  Additive.ofMul.injective <| smul_add x (Additive.ofMul s₁) (Additive.ofMul s₂)\n\n"}
{"name":"uzpow_zero","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\ns : Units Int\n⊢ Eq (HPow.hPow s 0) 1","decl":"@[simp] lemma uzpow_zero (s : ℤˣ) : (s ^ (0 : R) : ℤˣ) = (1 : ℤˣ) :=\n  Additive.ofMul.injective <| zero_smul R (Additive.ofMul s)\n\n"}
{"name":"uzpow_one","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\ns : Units Int\n⊢ Eq (HPow.hPow s 1) s","decl":"@[simp] lemma uzpow_one (s : ℤˣ) : (s ^ (1 : R) : ℤˣ) = s :=\n  Additive.ofMul.injective <| one_smul R (Additive.ofMul s)\n\n"}
{"name":"uzpow_mul","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\ns : Units Int\nx y : R\n⊢ Eq (HPow.hPow s (HMul.hMul x y)) (HPow.hPow (HPow.hPow s x) y)","decl":"lemma uzpow_mul (s : ℤˣ) (x y : R) : s ^ (x * y) = (s ^ x) ^ y :=\n  Additive.ofMul.injective <| mul_comm x y ▸ mul_smul y x (Additive.ofMul s)\n\n"}
{"name":"uzpow_add","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Module R (Additive (Units Int))\ns : Units Int\nx y : R\n⊢ Eq (HPow.hPow s (HAdd.hAdd x y)) (HMul.hMul (HPow.hPow s x) (HPow.hPow s y))","decl":"lemma uzpow_add (s : ℤˣ) (x y : R) : s ^ (x + y) = s ^ x * s ^ y :=\n  Additive.ofMul.injective <| add_smul x y (Additive.ofMul s)\n\n"}
{"name":"uzpow_sub","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : Module R (Additive (Units Int))\ns : Units Int\nx y : R\n⊢ Eq (HPow.hPow s (HSub.hSub x y)) (HDiv.hDiv (HPow.hPow s x) (HPow.hPow s y))","decl":"lemma uzpow_sub (s : ℤˣ) (x y : R) : s ^ (x - y) = s ^ x / s ^ y :=\n  Additive.ofMul.injective <| sub_smul x y (Additive.ofMul s)\n\n"}
{"name":"uzpow_neg","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : Module R (Additive (Units Int))\ns : Units Int\nx : R\n⊢ Eq (HPow.hPow s (Neg.neg x)) (Inv.inv (HPow.hPow s x))","decl":"lemma uzpow_neg (s : ℤˣ) (x : R) : s ^ (-x) = (s ^ x)⁻¹ :=\n  Additive.ofMul.injective <| neg_smul x (Additive.ofMul s)\n\n"}
{"name":"uzpow_intCast","module":"Mathlib.Data.ZMod.IntUnitsPower","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : Module R (Additive (Units Int))\nu : Units Int\nz : Int\n⊢ Eq (HPow.hPow u ↑z) (HPow.hPow u z)","decl":"@[norm_cast] lemma uzpow_intCast (u : ℤˣ) (z : ℤ) : u ^ (z : R) = u ^ z := by\n  change ((z : R) • Additive.ofMul u).toMul = _\n  rw [Int.cast_smul_eq_zsmul, toMul_zsmul, toMul_ofMul]\n\n"}
