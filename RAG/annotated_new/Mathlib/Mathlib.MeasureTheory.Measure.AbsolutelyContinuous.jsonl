{"name":"MeasureTheory.Measure.absolutelyContinuous_of_le","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : LE.le μ ν\n⊢ μ.AbsolutelyContinuous ν","decl":"theorem absolutelyContinuous_of_le (h : μ ≤ ν) : μ ≪ ν := fun s hs =>\n  nonpos_iff_eq_zero.1 <| hs ▸ le_iff'.1 h s\n\n"}
{"name":"LE.le.absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : LE.le μ ν\n⊢ μ.AbsolutelyContinuous ν","decl":"alias _root_.LE.le.absolutelyContinuous := absolutelyContinuous_of_le\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_of_eq","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : Eq μ ν\n⊢ μ.AbsolutelyContinuous ν","decl":"theorem absolutelyContinuous_of_eq (h : μ = ν) : μ ≪ ν :=\n  h.le.absolutelyContinuous\n\n"}
{"name":"Eq.absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : Eq μ ν\n⊢ μ.AbsolutelyContinuous ν","decl":"alias _root_.Eq.absolutelyContinuous := absolutelyContinuous_of_eq\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.mk","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : ∀ ⦃s : Set α⦄, MeasurableSet s → Eq (ν s) 0 → Eq (μ s) 0\n⊢ μ.AbsolutelyContinuous ν","decl":"theorem mk (h : ∀ ⦃s : Set α⦄, MeasurableSet s → ν s = 0 → μ s = 0) : μ ≪ ν := by\n  intro s hs\n  rcases exists_measurable_superset_of_null hs with ⟨t, h1t, h2t, h3t⟩\n  exact measure_mono_null h1t (h h2t h3t)\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.refl","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\n_m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ μ.AbsolutelyContinuous μ","decl":"@[refl]\nprotected theorem refl {_m0 : MeasurableSpace α} (μ : Measure α) : μ ≪ μ :=\n  rfl.absolutelyContinuous\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.rfl","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ μ.AbsolutelyContinuous μ","decl":"protected theorem rfl : μ ≪ μ := fun _s hs => hs\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.instIsRefl","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nx✝ : MeasurableSpace α\n⊢ IsRefl (MeasureTheory.Measure α) fun x1 x2 => x1.AbsolutelyContinuous x2","decl":"instance instIsRefl {_ : MeasurableSpace α} : IsRefl (Measure α) (· ≪ ·) :=\n  ⟨fun _ => AbsolutelyContinuous.rfl⟩\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.zero","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ MeasureTheory.Measure.AbsolutelyContinuous 0 μ","decl":"@[simp]\nprotected lemma zero (μ : Measure α) : 0 ≪ μ := fun _ _ ↦ by simp\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.trans","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ₁ μ₂ μ₃ : MeasureTheory.Measure α\nh1 : μ₁.AbsolutelyContinuous μ₂\nh2 : μ₂.AbsolutelyContinuous μ₃\n⊢ μ₁.AbsolutelyContinuous μ₃","decl":"@[trans]\nprotected theorem trans (h1 : μ₁ ≪ μ₂) (h2 : μ₂ ≪ μ₃) : μ₁ ≪ μ₃ := fun _s hs => h1 <| h2 hs\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.map","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ ν : MeasureTheory.Measure α\nh : μ.AbsolutelyContinuous ν\nf : α → β\nhf : Measurable f\n⊢ (MeasureTheory.Measure.map f μ).AbsolutelyContinuous (MeasureTheory.Measure.map f ν)","decl":"@[mono]\nprotected theorem map (h : μ ≪ ν) {f : α → β} (hf : Measurable f) : μ.map f ≪ ν.map f :=\n  AbsolutelyContinuous.mk fun s hs => by simpa [hf, hs] using @h _\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.smul_left","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nR : Type u_5\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nh : μ.AbsolutelyContinuous ν\nc : R\n⊢ (HSMul.hSMul c μ).AbsolutelyContinuous ν","decl":"protected theorem smul_left [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞] (h : μ ≪ ν) (c : R) :\n    c • μ ≪ ν := fun s hνs => by\n  simp only [h hνs, smul_apply, smul_zero, ← smul_one_smul ℝ≥0∞ c (0 : ℝ≥0∞)]\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.smul","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nR : Type u_5\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nh : μ.AbsolutelyContinuous ν\nc : R\n⊢ (HSMul.hSMul c μ).AbsolutelyContinuous (HSMul.hSMul c ν)","decl":"/-- If `μ ≪ ν`, then `c • μ ≪ c • ν`.\n\nEarlier, this name was used for what's now called `AbsolutelyContinuous.smul_left`. -/\nprotected theorem smul [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞] (h : μ ≪ ν) (c : R) :\n    c • μ ≪ c • ν := by\n  intro s hνs\n  rw [smul_apply, ← smul_one_smul ℝ≥0∞, smul_eq_mul, mul_eq_zero] at hνs ⊢\n  exact hνs.imp_right fun hs ↦ h hs\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.smul_both","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nR : Type u_5\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nh : μ.AbsolutelyContinuous ν\nc : R\n⊢ (HSMul.hSMul c μ).AbsolutelyContinuous (HSMul.hSMul c ν)","decl":"@[deprecated (since := \"2024-11-14\")] protected alias smul_both := AbsolutelyContinuous.smul\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.add","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ₁ μ₂ ν ν' : MeasureTheory.Measure α\nh1 : μ₁.AbsolutelyContinuous ν\nh2 : μ₂.AbsolutelyContinuous ν'\n⊢ (HAdd.hAdd μ₁ μ₂).AbsolutelyContinuous (HAdd.hAdd ν ν')","decl":"protected lemma add (h1 : μ₁ ≪ ν) (h2 : μ₂ ≪ ν') : μ₁ + μ₂ ≪ ν + ν' := by\n  intro s hs\n  simp only [coe_add, Pi.add_apply, add_eq_zero] at hs ⊢\n  exact ⟨h1 hs.1, h2 hs.2⟩\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.add_left_iff","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ₁ μ₂ ν : MeasureTheory.Measure α\n⊢ Iff ((HAdd.hAdd μ₁ μ₂).AbsolutelyContinuous ν) (And (μ₁.AbsolutelyContinuous ν) (μ₂.AbsolutelyContinuous ν))","decl":"lemma add_left_iff {μ₁ μ₂ ν : Measure α} :\n    μ₁ + μ₂ ≪ ν ↔ μ₁ ≪ ν ∧ μ₂ ≪ ν := by\n  refine ⟨fun h ↦ ?_, fun h ↦ (h.1.add h.2).trans ?_⟩\n  · have : ∀ s, ν s = 0 → μ₁ s = 0 ∧ μ₂ s = 0 := by intro s hs0; simpa using h hs0\n    exact ⟨fun s hs0 ↦ (this s hs0).1, fun s hs0 ↦ (this s hs0).2⟩\n  · rw [← two_smul ℝ≥0]\n    exact AbsolutelyContinuous.rfl.smul_left 2\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.add_left","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ₁ μ₂ ν : MeasureTheory.Measure α\nh₁ : μ₁.AbsolutelyContinuous ν\nh₂ : μ₂.AbsolutelyContinuous ν\n⊢ (HAdd.hAdd μ₁ μ₂).AbsolutelyContinuous ν","decl":"lemma add_left {μ₁ μ₂ ν : Measure α} (h₁ : μ₁ ≪ ν) (h₂ : μ₂ ≪ ν) : μ₁ + μ₂ ≪ ν :=\n  Measure.AbsolutelyContinuous.add_left_iff.mpr ⟨h₁, h₂⟩\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.add_right","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh1 : μ.AbsolutelyContinuous ν\nν' : MeasureTheory.Measure α\n⊢ μ.AbsolutelyContinuous (HAdd.hAdd ν ν')","decl":"lemma add_right (h1 : μ ≪ ν) (ν' : Measure α) : μ ≪ ν + ν' := by\n  intro s hs\n  simp only [coe_add, Pi.add_apply, add_eq_zero] at hs ⊢\n  exact h1 hs.1\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_zero_iff","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Iff (μ.AbsolutelyContinuous 0) (Eq μ 0)","decl":"@[simp]\nlemma absolutelyContinuous_zero_iff : μ ≪ 0 ↔ μ = 0 :=\n  ⟨fun h ↦ measure_univ_eq_zero.mp (h rfl), fun h ↦ h.symm ▸ AbsolutelyContinuous.zero _⟩\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_refl","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\n_m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ μ.AbsolutelyContinuous μ","decl":"alias absolutelyContinuous_refl := AbsolutelyContinuous.refl\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_rfl","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ μ.AbsolutelyContinuous μ","decl":"alias absolutelyContinuous_rfl := AbsolutelyContinuous.rfl\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_sum_left","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nι : Type u_4\nmα : MeasurableSpace α\nν : MeasureTheory.Measure α\nμs : ι → MeasureTheory.Measure α\nhμs : ∀ (i : ι), (μs i).AbsolutelyContinuous ν\n⊢ (MeasureTheory.Measure.sum μs).AbsolutelyContinuous ν","decl":"lemma absolutelyContinuous_sum_left {μs : ι → Measure α} (hμs : ∀ i, μs i ≪ ν) :\n    Measure.sum μs ≪ ν :=\n  AbsolutelyContinuous.mk fun s hs hs0 ↦ by simp [sum_apply _ hs, fun i ↦ hμs i hs0]\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_sum_right","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nι : Type u_4\nmα : MeasurableSpace α\nν : MeasureTheory.Measure α\nμs : ι → MeasureTheory.Measure α\ni : ι\nhνμ : ν.AbsolutelyContinuous (μs i)\n⊢ ν.AbsolutelyContinuous (MeasureTheory.Measure.sum μs)","decl":"lemma absolutelyContinuous_sum_right {μs : ι → Measure α} (i : ι) (hνμ : ν ≪ μs i) :\n    ν ≪ Measure.sum μs := by\n  refine AbsolutelyContinuous.mk fun s hs hs0 ↦ ?_\n  simp only [sum_apply _ hs, ENNReal.tsum_eq_zero] at hs0\n  exact hνμ (hs0 i)\n\n"}
{"name":"MeasureTheory.Measure.smul_absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\nc : ENNReal\n⊢ (HSMul.hSMul c μ).AbsolutelyContinuous μ","decl":"lemma smul_absolutelyContinuous {c : ℝ≥0∞} : c • μ ≪ μ := .smul_left .rfl _\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_of_le_smul","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ μ' : MeasureTheory.Measure α\nc : ENNReal\nhμ'_le : LE.le μ' (HSMul.hSMul c μ)\n⊢ μ'.AbsolutelyContinuous μ","decl":"theorem absolutelyContinuous_of_le_smul {μ' : Measure α} {c : ℝ≥0∞} (hμ'_le : μ' ≤ c • μ) :\n    μ' ≪ μ :=\n  (Measure.absolutelyContinuous_of_le hμ'_le).trans smul_absolutelyContinuous\n\n"}
{"name":"MeasureTheory.Measure.absolutelyContinuous_smul","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\nc : ENNReal\nhc : Ne c 0\n⊢ μ.AbsolutelyContinuous (HSMul.hSMul c μ)","decl":"lemma absolutelyContinuous_smul {c : ℝ≥0∞} (hc : c ≠ 0) : μ ≪ c • μ := by\n  simp [AbsolutelyContinuous, hc]\n\n"}
{"name":"MeasureTheory.Measure.ae_le_iff_absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\n⊢ Iff (LE.le (MeasureTheory.ae μ) (MeasureTheory.ae ν)) (μ.AbsolutelyContinuous ν)","decl":"theorem ae_le_iff_absolutelyContinuous : ae μ ≤ ae ν ↔ μ ≪ ν :=\n  ⟨fun h s => by\n    rw [measure_zero_iff_ae_nmem, measure_zero_iff_ae_nmem]\n    exact fun hs => h hs, fun h _ hs => h hs⟩\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.ae_le","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\na✝ : μ.AbsolutelyContinuous ν\n⊢ LE.le (MeasureTheory.ae μ) (MeasureTheory.ae ν)","decl":"alias ⟨_root_.LE.le.absolutelyContinuous_of_ae, AbsolutelyContinuous.ae_le⟩ :=\n  ae_le_iff_absolutelyContinuous\n\n"}
{"name":"LE.le.absolutelyContinuous_of_ae","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\na✝ : LE.le (MeasureTheory.ae μ) (MeasureTheory.ae ν)\n⊢ μ.AbsolutelyContinuous ν","decl":"alias ⟨_root_.LE.le.absolutelyContinuous_of_ae, AbsolutelyContinuous.ae_le⟩ :=\n  ae_le_iff_absolutelyContinuous\n\n"}
{"name":"MeasureTheory.Measure.ae_mono'","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\na✝ : μ.AbsolutelyContinuous ν\n⊢ LE.le (MeasureTheory.ae μ) (MeasureTheory.ae ν)","decl":"alias ae_mono' := AbsolutelyContinuous.ae_le\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.ae_eq","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nδ : Type u_3\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : μ.AbsolutelyContinuous ν\nf g : α → δ\nh' : (MeasureTheory.ae ν).EventuallyEq f g\n⊢ (MeasureTheory.ae μ).EventuallyEq f g","decl":"theorem AbsolutelyContinuous.ae_eq (h : μ ≪ ν) {f g : α → δ} (h' : f =ᵐ[ν] g) : f =ᵐ[μ] g :=\n  h.ae_le h'\n\n"}
{"name":"MeasureTheory.AEDisjoint.of_absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\nν : MeasureTheory.Measure α\nh' : ν.AbsolutelyContinuous μ\n⊢ MeasureTheory.AEDisjoint ν s t","decl":"protected theorem AEDisjoint.of_absolutelyContinuous\n    (h : AEDisjoint μ s t) {ν : Measure α} (h' : ν ≪ μ) :\n    AEDisjoint ν s t := h' h\n\n"}
{"name":"MeasureTheory.AEDisjoint.of_le","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\nν : MeasureTheory.Measure α\nh' : LE.le ν μ\n⊢ MeasureTheory.AEDisjoint ν s t","decl":"protected theorem AEDisjoint.of_le\n    (h : AEDisjoint μ s t) {ν : Measure α} (h' : ν ≤ μ) :\n    AEDisjoint ν s t :=\n  h.of_absolutelyContinuous (Measure.absolutelyContinuous_of_le h')\n\n"}
{"name":"MeasureTheory.ae_mono","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nh : LE.le μ ν\n⊢ LE.le (MeasureTheory.ae μ) (MeasureTheory.ae ν)","decl":"@[mono]\ntheorem ae_mono (h : μ ≤ ν) : ae μ ≤ ae ν :=\n  h.absolutelyContinuous.ae_le\n\n"}
{"name":"MeasurableEmbedding.absolutelyContinuous_map","module":"Mathlib.MeasureTheory.Measure.AbsolutelyContinuous","initialProofState":"α : Type u_1\nβ : Type u_2\nm0 : MeasurableSpace α\nm1 : MeasurableSpace β\nf : α → β\nμ ν : MeasureTheory.Measure α\nhf : MeasurableEmbedding f\nhμν : μ.AbsolutelyContinuous ν\n⊢ (MeasureTheory.Measure.map f μ).AbsolutelyContinuous (MeasureTheory.Measure.map f ν)","decl":"lemma absolutelyContinuous_map (hf : MeasurableEmbedding f) (hμν : μ ≪ ν) :\n    μ.map f ≪ ν.map f := by\n  intro t ht\n  rw [hf.map_apply] at ht ⊢\n  exact hμν ht\n\n"}
