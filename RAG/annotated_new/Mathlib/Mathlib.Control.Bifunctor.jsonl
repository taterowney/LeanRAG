{"name":"LawfulBifunctor.bimap_bimap","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝ : Bifunctor F\nself : LawfulBifunctor F\nα₀ α₁ α₂ : Type u₀\nβ₀ β₁ β₂ : Type u₁\nf : α₀ → α₁\nf' : α₁ → α₂\ng : β₀ → β₁\ng' : β₁ → β₂\nx : F α₀ β₀\n⊢ Eq (Bifunctor.bimap f' g' (Bifunctor.bimap f g x)) (Bifunctor.bimap (Function.comp f' f) (Function.comp g' g) x)","decl":"/-- Bifunctor. This typeclass asserts that a lawless `Bifunctor` is lawful. -/\nclass LawfulBifunctor (F : Type u₀ → Type u₁ → Type u₂) [Bifunctor F] : Prop where\n  id_bimap : ∀ {α β} (x : F α β), bimap id id x = x\n  bimap_bimap :\n    ∀ {α₀ α₁ α₂ β₀ β₁ β₂} (f : α₀ → α₁) (f' : α₁ → α₂) (g : β₀ → β₁) (g' : β₁ → β₂) (x : F α₀ β₀),\n      bimap f' g' (bimap f g x) = bimap (f' ∘ f) (g' ∘ g) x\n\n"}
{"name":"LawfulBifunctor.id_bimap","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝ : Bifunctor F\nself : LawfulBifunctor F\nα : Type u₀\nβ : Type u₁\nx : F α β\n⊢ Eq (Bifunctor.bimap id id x) x","decl":"/-- Bifunctor. This typeclass asserts that a lawless `Bifunctor` is lawful. -/\nclass LawfulBifunctor (F : Type u₀ → Type u₁ → Type u₂) [Bifunctor F] : Prop where\n  id_bimap : ∀ {α β} (x : F α β), bimap id id x = x\n  bimap_bimap :\n    ∀ {α₀ α₁ α₂ β₀ β₁ β₂} (f : α₀ → α₁) (f' : α₁ → α₂) (g : β₀ → β₁) (g' : β₁ → β₂) (x : F α₀ β₀),\n      bimap f' g' (bimap f g x) = bimap (f' ∘ f) (g' ∘ g) x\n\n"}
{"name":"LawfulBifunctor.bimap_id_id","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝ : Bifunctor F\nself : LawfulBifunctor F\nα : Type u₀\nβ : Type u₁\n⊢ Eq (Bifunctor.bimap id id) id","decl":"attribute [higher_order bimap_id_id] id_bimap\n\n"}
{"name":"LawfulBifunctor.bimap_comp_bimap","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝ : Bifunctor F\nself : LawfulBifunctor F\nα₀ α₁ α₂ : Type u₀\nβ₀ β₁ β₂ : Type u₁\nf : α₀ → α₁\nf' : α₁ → α₂\ng : β₀ → β₁\ng' : β₁ → β₂\n⊢ Eq (Function.comp (Bifunctor.bimap f' g') (Bifunctor.bimap f g)) (Bifunctor.bimap (Function.comp f' f) (Function.comp g' g))","decl":"attribute [higher_order bimap_comp_bimap] bimap_bimap\n\n"}
{"name":"Bifunctor.id_fst","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\nβ : Type u₁\nx : F α β\n⊢ Eq (Bifunctor.fst id x) x","decl":"@[higher_order fst_id]\ntheorem id_fst : ∀ {α β} (x : F α β), fst id x = x :=\n  @id_bimap _ _ _\n\n"}
{"name":"Bifunctor.fst_id","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\nβ : Type u₁\n⊢ Eq (Bifunctor.fst id) id","decl":"@[higher_order fst_id]\ntheorem id_fst : ∀ {α β} (x : F α β), fst id x = x :=\n  @id_bimap _ _ _\n\n"}
{"name":"Bifunctor.id_snd","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\nβ : Type u₁\nx : F α β\n⊢ Eq (Bifunctor.snd id x) x","decl":"@[higher_order snd_id]\ntheorem id_snd : ∀ {α β} (x : F α β), snd id x = x :=\n  @id_bimap _ _ _\n\n"}
{"name":"Bifunctor.snd_id","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\nβ : Type u₁\n⊢ Eq (Bifunctor.snd id) id","decl":"@[higher_order snd_id]\ntheorem id_snd : ∀ {α β} (x : F α β), snd id x = x :=\n  @id_bimap _ _ _\n\n"}
{"name":"Bifunctor.fst_comp_fst","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα₀ α₁ α₂ : Type u₀\nβ : Type u₁\nf : α₀ → α₁\nf' : α₁ → α₂\n⊢ Eq (Function.comp (Bifunctor.fst f') (Bifunctor.fst f)) (Bifunctor.fst (Function.comp f' f))","decl":"@[higher_order fst_comp_fst]\ntheorem comp_fst {α₀ α₁ α₂ β} (f : α₀ → α₁) (f' : α₁ → α₂) (x : F α₀ β) :\n    fst f' (fst f x) = fst (f' ∘ f) x := by simp [fst, bimap_bimap]\n\n"}
{"name":"Bifunctor.comp_fst","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα₀ α₁ α₂ : Type u₀\nβ : Type u₁\nf : α₀ → α₁\nf' : α₁ → α₂\nx : F α₀ β\n⊢ Eq (Bifunctor.fst f' (Bifunctor.fst f x)) (Bifunctor.fst (Function.comp f' f) x)","decl":"@[higher_order fst_comp_fst]\ntheorem comp_fst {α₀ α₁ α₂ β} (f : α₀ → α₁) (f' : α₁ → α₂) (x : F α₀ β) :\n    fst f' (fst f x) = fst (f' ∘ f) x := by simp [fst, bimap_bimap]\n\n"}
{"name":"Bifunctor.fst_comp_snd","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα₀ α₁ : Type u₀\nβ₀ β₁ : Type u₁\nf : α₀ → α₁\nf' : β₀ → β₁\n⊢ Eq (Function.comp (Bifunctor.fst f) (Bifunctor.snd f')) (Bifunctor.bimap f f')","decl":"@[higher_order fst_comp_snd]\ntheorem fst_snd {α₀ α₁ β₀ β₁} (f : α₀ → α₁) (f' : β₀ → β₁) (x : F α₀ β₀) :\n    fst f (snd f' x) = bimap f f' x := by simp [fst, bimap_bimap]\n\n"}
{"name":"Bifunctor.fst_snd","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα₀ α₁ : Type u₀\nβ₀ β₁ : Type u₁\nf : α₀ → α₁\nf' : β₀ → β₁\nx : F α₀ β₀\n⊢ Eq (Bifunctor.fst f (Bifunctor.snd f' x)) (Bifunctor.bimap f f' x)","decl":"@[higher_order fst_comp_snd]\ntheorem fst_snd {α₀ α₁ β₀ β₁} (f : α₀ → α₁) (f' : β₀ → β₁) (x : F α₀ β₀) :\n    fst f (snd f' x) = bimap f f' x := by simp [fst, bimap_bimap]\n\n"}
{"name":"Bifunctor.snd_comp_fst","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα₀ α₁ : Type u₀\nβ₀ β₁ : Type u₁\nf : α₀ → α₁\nf' : β₀ → β₁\n⊢ Eq (Function.comp (Bifunctor.snd f') (Bifunctor.fst f)) (Bifunctor.bimap f f')","decl":"@[higher_order snd_comp_fst]\ntheorem snd_fst {α₀ α₁ β₀ β₁} (f : α₀ → α₁) (f' : β₀ → β₁) (x : F α₀ β₀) :\n    snd f' (fst f x) = bimap f f' x := by simp [snd, bimap_bimap]\n\n"}
{"name":"Bifunctor.snd_fst","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα₀ α₁ : Type u₀\nβ₀ β₁ : Type u₁\nf : α₀ → α₁\nf' : β₀ → β₁\nx : F α₀ β₀\n⊢ Eq (Bifunctor.snd f' (Bifunctor.fst f x)) (Bifunctor.bimap f f' x)","decl":"@[higher_order snd_comp_fst]\ntheorem snd_fst {α₀ α₁ β₀ β₁} (f : α₀ → α₁) (f' : β₀ → β₁) (x : F α₀ β₀) :\n    snd f' (fst f x) = bimap f f' x := by simp [snd, bimap_bimap]\n\n"}
{"name":"Bifunctor.comp_snd","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\nβ₀ β₁ β₂ : Type u₁\ng : β₀ → β₁\ng' : β₁ → β₂\nx : F α β₀\n⊢ Eq (Bifunctor.snd g' (Bifunctor.snd g x)) (Bifunctor.snd (Function.comp g' g) x)","decl":"@[higher_order snd_comp_snd]\ntheorem comp_snd {α β₀ β₁ β₂} (g : β₀ → β₁) (g' : β₁ → β₂) (x : F α β₀) :\n    snd g' (snd g x) = snd (g' ∘ g) x := by simp [snd, bimap_bimap]\n\n"}
{"name":"Bifunctor.snd_comp_snd","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\nβ₀ β₁ β₂ : Type u₁\ng : β₀ → β₁\ng' : β₁ → β₂\n⊢ Eq (Function.comp (Bifunctor.snd g') (Bifunctor.snd g)) (Bifunctor.snd (Function.comp g' g))","decl":"@[higher_order snd_comp_snd]\ntheorem comp_snd {α β₀ β₁ β₂} (g : β₀ → β₁) (g' : β₁ → β₂) (x : F α β₀) :\n    snd g' (snd g x) = snd (g' ∘ g) x := by simp [snd, bimap_bimap]\n\n"}
{"name":"Prod.lawfulBifunctor","module":"Mathlib.Control.Bifunctor","initialProofState":"⊢ LawfulBifunctor Prod","decl":"instance Prod.lawfulBifunctor : LawfulBifunctor Prod where\n  id_bimap _ := rfl\n  bimap_bimap _ _ _ _ _ := rfl\n\n"}
{"name":"LawfulBifunctor.const","module":"Mathlib.Control.Bifunctor","initialProofState":"⊢ LawfulBifunctor Functor.Const","decl":"instance LawfulBifunctor.const : LawfulBifunctor Const where\n  id_bimap _ := rfl\n  bimap_bimap _ _ _ _ _ := rfl\n\n"}
{"name":"LawfulBifunctor.flip","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\n⊢ LawfulBifunctor (flip F)","decl":"instance LawfulBifunctor.flip [LawfulBifunctor F] : LawfulBifunctor (flip F) where\n  id_bimap := by simp [bimap, functor_norm]\n  bimap_bimap := by simp [bimap, functor_norm]\n\n"}
{"name":"Sum.lawfulBifunctor","module":"Mathlib.Control.Bifunctor","initialProofState":"⊢ LawfulBifunctor Sum","decl":"instance Sum.lawfulBifunctor : LawfulBifunctor Sum where\n  id_bimap := by aesop\n  bimap_bimap := by aesop\n\n"}
{"name":"Bifunctor.lawfulFunctor","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝¹ : Bifunctor F\ninst✝ : LawfulBifunctor F\nα : Type u₀\n⊢ LawfulFunctor (F α)","decl":"instance (priority := 10) Bifunctor.lawfulFunctor [LawfulBifunctor F] {α} :\n    LawfulFunctor (F α) where\n  -- Porting note: `mapConst` is required to prove new theorem\n  id_map := by simp [Functor.map, functor_norm]\n  comp_map := by simp [Functor.map, functor_norm]\n  map_const := by simp [mapConst, Functor.map]\n\n"}
{"name":"Function.bicompl.lawfulBifunctor","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝⁵ : Bifunctor F\nG : Type u_1 → Type u₀\nH : Type u_2 → Type u₁\ninst✝⁴ : Functor G\ninst✝³ : Functor H\ninst✝² : LawfulFunctor G\ninst✝¹ : LawfulFunctor H\ninst✝ : LawfulBifunctor F\n⊢ LawfulBifunctor (Function.bicompl F G H)","decl":"instance Function.bicompl.lawfulBifunctor [LawfulFunctor G] [LawfulFunctor H] [LawfulBifunctor F] :\n    LawfulBifunctor (bicompl F G H) := by\n  constructor <;> intros <;> simp [bimap, map_id, map_comp_map, functor_norm]\n\n"}
{"name":"Function.bicompr.lawfulBifunctor","module":"Mathlib.Control.Bifunctor","initialProofState":"F : Type u₀ → Type u₁ → Type u₂\ninst✝³ : Bifunctor F\nG : Type u₂ → Type u_1\ninst✝² : Functor G\ninst✝¹ : LawfulFunctor G\ninst✝ : LawfulBifunctor F\n⊢ LawfulBifunctor (Function.bicompr G F)","decl":"instance Function.bicompr.lawfulBifunctor [LawfulFunctor G] [LawfulBifunctor F] :\n    LawfulBifunctor (bicompr G F) := by\n  constructor <;> intros <;> simp [bimap, functor_norm]\n\n"}
