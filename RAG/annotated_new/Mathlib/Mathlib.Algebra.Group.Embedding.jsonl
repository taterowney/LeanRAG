{"name":"mulLeftEmbedding_apply","module":"Mathlib.Algebra.Group.Embedding","initialProofState":"G : Type u_1\ninst✝¹ : Mul G\ninst✝ : IsLeftCancelMul G\ng h : G\n⊢ Eq ((mulLeftEmbedding g) h) (HMul.hMul g h)","decl":"/-- If left-multiplication by any element is cancellative, left-multiplication by `g` is an\nembedding. -/\n@[to_additive (attr := simps)\n      \"If left-addition by any element is cancellative, left-addition by `g` is an\n        embedding.\"]\ndef mulLeftEmbedding [Mul G] [IsLeftCancelMul G] (g : G) : G ↪ G where\n  toFun h := g * h\n  inj' := mul_right_injective g\n\n"}
{"name":"addLeftEmbedding_apply","module":"Mathlib.Algebra.Group.Embedding","initialProofState":"G : Type u_1\ninst✝¹ : Add G\ninst✝ : IsLeftCancelAdd G\ng h : G\n⊢ Eq ((addLeftEmbedding g) h) (HAdd.hAdd g h)","decl":"/-- If left-multiplication by any element is cancellative, left-multiplication by `g` is an\nembedding. -/\n@[to_additive (attr := simps)\n      \"If left-addition by any element is cancellative, left-addition by `g` is an\n        embedding.\"]\ndef mulLeftEmbedding [Mul G] [IsLeftCancelMul G] (g : G) : G ↪ G where\n  toFun h := g * h\n  inj' := mul_right_injective g\n\n"}
{"name":"addRightEmbedding_apply","module":"Mathlib.Algebra.Group.Embedding","initialProofState":"G : Type u_1\ninst✝¹ : Add G\ninst✝ : IsRightCancelAdd G\ng h : G\n⊢ Eq ((addRightEmbedding g) h) (HAdd.hAdd h g)","decl":"/-- If right-multiplication by any element is cancellative, right-multiplication by `g` is an\nembedding. -/\n@[to_additive (attr := simps)\n      \"If right-addition by any element is cancellative, right-addition by `g` is an\n        embedding.\"]\ndef mulRightEmbedding [Mul G] [IsRightCancelMul G] (g : G) : G ↪ G where\n  toFun h := h * g\n  inj' := mul_left_injective g\n\n"}
{"name":"mulRightEmbedding_apply","module":"Mathlib.Algebra.Group.Embedding","initialProofState":"G : Type u_1\ninst✝¹ : Mul G\ninst✝ : IsRightCancelMul G\ng h : G\n⊢ Eq ((mulRightEmbedding g) h) (HMul.hMul h g)","decl":"/-- If right-multiplication by any element is cancellative, right-multiplication by `g` is an\nembedding. -/\n@[to_additive (attr := simps)\n      \"If right-addition by any element is cancellative, right-addition by `g` is an\n        embedding.\"]\ndef mulRightEmbedding [Mul G] [IsRightCancelMul G] (g : G) : G ↪ G where\n  toFun h := h * g\n  inj' := mul_left_injective g\n\n"}
{"name":"mulLeftEmbedding_eq_mulRightEmbedding","module":"Mathlib.Algebra.Group.Embedding","initialProofState":"G : Type u_1\ninst✝¹ : CommSemigroup G\ninst✝ : IsCancelMul G\ng : G\n⊢ Eq (mulLeftEmbedding g) (mulRightEmbedding g)","decl":"@[to_additive]\ntheorem mulLeftEmbedding_eq_mulRightEmbedding [CommSemigroup G] [IsCancelMul G] (g : G) :\n    mulLeftEmbedding g = mulRightEmbedding g := by\n  ext\n  exact mul_comm _ _\n\n"}
{"name":"addLeftEmbedding_eq_addRightEmbedding","module":"Mathlib.Algebra.Group.Embedding","initialProofState":"G : Type u_1\ninst✝¹ : AddCommSemigroup G\ninst✝ : IsCancelAdd G\ng : G\n⊢ Eq (addLeftEmbedding g) (addRightEmbedding g)","decl":"@[to_additive]\ntheorem mulLeftEmbedding_eq_mulRightEmbedding [CommSemigroup G] [IsCancelMul G] (g : G) :\n    mulLeftEmbedding g = mulRightEmbedding g := by\n  ext\n  exact mul_comm _ _\n\n"}
