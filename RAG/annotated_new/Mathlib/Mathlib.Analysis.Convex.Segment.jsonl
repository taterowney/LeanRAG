{"name":"segment_eq_image₂","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx y : E\n⊢ Eq (segment 𝕜 x y) (Set.image (fun p => HAdd.hAdd (HSMul.hSMul p.1 x) (HSMul.hSMul p.2 y)) (setOf fun p => And (LE.le 0 p.1) (And (LE.le 0 p.2) (Eq (HAdd.hAdd p.1 p.2) 1))))","decl":"theorem segment_eq_image₂ (x y : E) :\n    [x -[𝕜] y] =\n      (fun p : 𝕜 × 𝕜 => p.1 • x + p.2 • y) '' { p | 0 ≤ p.1 ∧ 0 ≤ p.2 ∧ p.1 + p.2 = 1 } := by\n  simp only [segment, image, Prod.exists, mem_setOf_eq, exists_prop, and_assoc]\n\n"}
{"name":"openSegment_eq_image₂","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx y : E\n⊢ Eq (openSegment 𝕜 x y) (Set.image (fun p => HAdd.hAdd (HSMul.hSMul p.1 x) (HSMul.hSMul p.2 y)) (setOf fun p => And (LT.lt 0 p.1) (And (LT.lt 0 p.2) (Eq (HAdd.hAdd p.1 p.2) 1))))","decl":"theorem openSegment_eq_image₂ (x y : E) :\n    openSegment 𝕜 x y =\n      (fun p : 𝕜 × 𝕜 => p.1 • x + p.2 • y) '' { p | 0 < p.1 ∧ 0 < p.2 ∧ p.1 + p.2 = 1 } := by\n  simp only [openSegment, image, Prod.exists, mem_setOf_eq, exists_prop, and_assoc]\n\n"}
{"name":"segment_symm","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx y : E\n⊢ Eq (segment 𝕜 x y) (segment 𝕜 y x)","decl":"theorem segment_symm (x y : E) : [x -[𝕜] y] = [y -[𝕜] x] :=\n  Set.ext fun _ =>\n    ⟨fun ⟨a, b, ha, hb, hab, H⟩ => ⟨b, a, hb, ha, (add_comm _ _).trans hab, (add_comm _ _).trans H⟩,\n      fun ⟨a, b, ha, hb, hab, H⟩ =>\n      ⟨b, a, hb, ha, (add_comm _ _).trans hab, (add_comm _ _).trans H⟩⟩\n\n"}
{"name":"openSegment_symm","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx y : E\n⊢ Eq (openSegment 𝕜 x y) (openSegment 𝕜 y x)","decl":"theorem openSegment_symm (x y : E) : openSegment 𝕜 x y = openSegment 𝕜 y x :=\n  Set.ext fun _ =>\n    ⟨fun ⟨a, b, ha, hb, hab, H⟩ => ⟨b, a, hb, ha, (add_comm _ _).trans hab, (add_comm _ _).trans H⟩,\n      fun ⟨a, b, ha, hb, hab, H⟩ =>\n      ⟨b, a, hb, ha, (add_comm _ _).trans hab, (add_comm _ _).trans H⟩⟩\n\n"}
{"name":"openSegment_subset_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx y : E\n⊢ HasSubset.Subset (openSegment 𝕜 x y) (segment 𝕜 x y)","decl":"theorem openSegment_subset_segment (x y : E) : openSegment 𝕜 x y ⊆ [x -[𝕜] y] :=\n  fun _ ⟨a, b, ha, hb, hab, hz⟩ => ⟨a, b, ha.le, hb.le, hab, hz⟩\n\n"}
{"name":"segment_subset_iff","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\ns : Set E\nx y : E\n⊢ Iff (HasSubset.Subset (segment 𝕜 x y) s) (∀ (a b : 𝕜), LE.le 0 a → LE.le 0 b → Eq (HAdd.hAdd a b) 1 → Membership.mem s (HAdd.hAdd (HSMul.hSMul a x) (HSMul.hSMul b y)))","decl":"theorem segment_subset_iff :\n    [x -[𝕜] y] ⊆ s ↔ ∀ a b : 𝕜, 0 ≤ a → 0 ≤ b → a + b = 1 → a • x + b • y ∈ s :=\n  ⟨fun H a b ha hb hab => H ⟨a, b, ha, hb, hab, rfl⟩, fun H _ ⟨a, b, ha, hb, hab, hz⟩ =>\n    hz ▸ H a b ha hb hab⟩\n\n"}
{"name":"openSegment_subset_iff","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\ns : Set E\nx y : E\n⊢ Iff (HasSubset.Subset (openSegment 𝕜 x y) s) (∀ (a b : 𝕜), LT.lt 0 a → LT.lt 0 b → Eq (HAdd.hAdd a b) 1 → Membership.mem s (HAdd.hAdd (HSMul.hSMul a x) (HSMul.hSMul b y)))","decl":"theorem openSegment_subset_iff :\n    openSegment 𝕜 x y ⊆ s ↔ ∀ a b : 𝕜, 0 < a → 0 < b → a + b = 1 → a • x + b • y ∈ s :=\n  ⟨fun H a b ha hb hab => H ⟨a, b, ha, hb, hab, rfl⟩, fun H _ ⟨a, b, ha, hb, hab, hz⟩ =>\n    hz ▸ H a b ha hb hab⟩\n\n"}
{"name":"left_mem_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : MulActionWithZero 𝕜 E\nx y : E\n⊢ Membership.mem (segment 𝕜 x y) x","decl":"theorem left_mem_segment (x y : E) : x ∈ [x -[𝕜] y] :=\n  ⟨1, 0, zero_le_one, le_refl 0, add_zero 1, by rw [zero_smul, one_smul, add_zero]⟩\n\n"}
{"name":"right_mem_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : MulActionWithZero 𝕜 E\nx y : E\n⊢ Membership.mem (segment 𝕜 x y) y","decl":"theorem right_mem_segment (x y : E) : y ∈ [x -[𝕜] y] :=\n  segment_symm 𝕜 y x ▸ left_mem_segment 𝕜 y x\n\n"}
{"name":"segment_same","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\n⊢ Eq (segment 𝕜 x x) (Singleton.singleton x)","decl":"@[simp]\ntheorem segment_same (x : E) : [x -[𝕜] x] = {x} :=\n  Set.ext fun z =>\n    ⟨fun ⟨a, b, _, _, hab, hz⟩ => by\n      simpa only [(add_smul _ _ _).symm, mem_singleton_iff, hab, one_smul, eq_comm] using hz,\n      fun h => mem_singleton_iff.1 h ▸ left_mem_segment 𝕜 z z⟩\n\n"}
{"name":"insert_endpoints_openSegment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (Insert.insert x (Insert.insert y (openSegment 𝕜 x y))) (segment 𝕜 x y)","decl":"theorem insert_endpoints_openSegment (x y : E) :\n    insert x (insert y (openSegment 𝕜 x y)) = [x -[𝕜] y] := by\n  simp only [subset_antisymm_iff, insert_subset_iff, left_mem_segment, right_mem_segment,\n    openSegment_subset_segment, true_and]\n  rintro z ⟨a, b, ha, hb, hab, rfl⟩\n  refine hb.eq_or_gt.imp ?_ fun hb' => ha.eq_or_gt.imp ?_ fun ha' => ?_\n  · rintro rfl\n    rw [← add_zero a, hab, one_smul, zero_smul, add_zero]\n  · rintro rfl\n    rw [← zero_add b, hab, one_smul, zero_smul, zero_add]\n  · exact ⟨a, b, ha', hb', hab, rfl⟩\n\n"}
{"name":"mem_openSegment_of_ne_left_right","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx y z : E\nhx : Ne x z\nhy : Ne y z\nhz : Membership.mem (segment 𝕜 x y) z\n⊢ Membership.mem (openSegment 𝕜 x y) z","decl":"theorem mem_openSegment_of_ne_left_right (hx : x ≠ z) (hy : y ≠ z) (hz : z ∈ [x -[𝕜] y]) :\n    z ∈ openSegment 𝕜 x y := by\n  rw [← insert_endpoints_openSegment] at hz\n  exact (hz.resolve_left hx.symm).resolve_left hy.symm\n\n"}
{"name":"openSegment_subset_iff_segment_subset","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\ns : Set E\nx y : E\nhx : Membership.mem s x\nhy : Membership.mem s y\n⊢ Iff (HasSubset.Subset (openSegment 𝕜 x y) s) (HasSubset.Subset (segment 𝕜 x y) s)","decl":"theorem openSegment_subset_iff_segment_subset (hx : x ∈ s) (hy : y ∈ s) :\n    openSegment 𝕜 x y ⊆ s ↔ [x -[𝕜] y] ⊆ s := by\n  simp only [← insert_endpoints_openSegment, insert_subset_iff, *, true_and]\n\n"}
{"name":"openSegment_same","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : OrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : Nontrivial 𝕜\ninst✝ : DenselyOrdered 𝕜\nx : E\n⊢ Eq (openSegment 𝕜 x x) (Singleton.singleton x)","decl":"@[simp]\ntheorem openSegment_same (x : E) : openSegment 𝕜 x x = {x} :=\n  Set.ext fun z =>\n    ⟨fun ⟨a, b, _, _, hab, hz⟩ => by\n      simpa only [← add_smul, mem_singleton_iff, hab, one_smul, eq_comm] using hz,\n    fun h : z = x => by\n      obtain ⟨a, ha₀, ha₁⟩ := DenselyOrdered.dense (0 : 𝕜) 1 zero_lt_one\n      refine ⟨a, 1 - a, ha₀, sub_pos_of_lt ha₁, add_sub_cancel _ _, ?_⟩\n      rw [← add_smul, add_sub_cancel, one_smul, h]⟩\n\n"}
{"name":"segment_eq_image","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (segment 𝕜 x y) (Set.image (fun θ => HAdd.hAdd (HSMul.hSMul (HSub.hSub 1 θ) x) (HSMul.hSMul θ y)) (Set.Icc 0 1))","decl":"theorem segment_eq_image (x y : E) :\n    [x -[𝕜] y] = (fun θ : 𝕜 => (1 - θ) • x + θ • y) '' Icc (0 : 𝕜) 1 :=\n  Set.ext fun _ =>\n    ⟨fun ⟨a, b, ha, hb, hab, hz⟩ =>\n      ⟨b, ⟨hb, hab ▸ le_add_of_nonneg_left ha⟩, hab ▸ hz ▸ by simp only [add_sub_cancel_right]⟩,\n      fun ⟨θ, ⟨hθ₀, hθ₁⟩, hz⟩ => ⟨1 - θ, θ, sub_nonneg.2 hθ₁, hθ₀, sub_add_cancel _ _, hz⟩⟩\n\n"}
{"name":"openSegment_eq_image","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (openSegment 𝕜 x y) (Set.image (fun θ => HAdd.hAdd (HSMul.hSMul (HSub.hSub 1 θ) x) (HSMul.hSMul θ y)) (Set.Ioo 0 1))","decl":"theorem openSegment_eq_image (x y : E) :\n    openSegment 𝕜 x y = (fun θ : 𝕜 => (1 - θ) • x + θ • y) '' Ioo (0 : 𝕜) 1 :=\n  Set.ext fun _ =>\n    ⟨fun ⟨a, b, ha, hb, hab, hz⟩ =>\n      ⟨b, ⟨hb, hab ▸ lt_add_of_pos_left _ ha⟩, hab ▸ hz ▸ by simp only [add_sub_cancel_right]⟩,\n      fun ⟨θ, ⟨hθ₀, hθ₁⟩, hz⟩ => ⟨1 - θ, θ, sub_pos.2 hθ₁, hθ₀, sub_add_cancel _ _, hz⟩⟩\n\n"}
{"name":"segment_eq_image'","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (segment 𝕜 x y) (Set.image (fun θ => HAdd.hAdd x (HSMul.hSMul θ (HSub.hSub y x))) (Set.Icc 0 1))","decl":"theorem segment_eq_image' (x y : E) :\n    [x -[𝕜] y] = (fun θ : 𝕜 => x + θ • (y - x)) '' Icc (0 : 𝕜) 1 := by\n  convert segment_eq_image 𝕜 x y using 2\n  simp only [smul_sub, sub_smul, one_smul]\n  abel\n\n"}
{"name":"openSegment_eq_image'","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (openSegment 𝕜 x y) (Set.image (fun θ => HAdd.hAdd x (HSMul.hSMul θ (HSub.hSub y x))) (Set.Ioo 0 1))","decl":"theorem openSegment_eq_image' (x y : E) :\n    openSegment 𝕜 x y = (fun θ : 𝕜 => x + θ • (y - x)) '' Ioo (0 : 𝕜) 1 := by\n  convert openSegment_eq_image 𝕜 x y using 2\n  simp only [smul_sub, sub_smul, one_smul]\n  abel\n\n"}
{"name":"segment_eq_image_lineMap","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (segment 𝕜 x y) (Set.image (⇑(AffineMap.lineMap x y)) (Set.Icc 0 1))","decl":"theorem segment_eq_image_lineMap (x y : E) : [x -[𝕜] y] =\n    AffineMap.lineMap x y '' Icc (0 : 𝕜) 1 := by\n  convert segment_eq_image 𝕜 x y using 2\n  exact AffineMap.lineMap_apply_module _ _ _\n\n"}
{"name":"openSegment_eq_image_lineMap","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\n⊢ Eq (openSegment 𝕜 x y) (Set.image (⇑(AffineMap.lineMap x y)) (Set.Ioo 0 1))","decl":"theorem openSegment_eq_image_lineMap (x y : E) :\n    openSegment 𝕜 x y = AffineMap.lineMap x y '' Ioo (0 : 𝕜) 1 := by\n  convert openSegment_eq_image 𝕜 x y using 2\n  exact AffineMap.lineMap_apply_module _ _ _\n\n"}
{"name":"image_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nf : AffineMap 𝕜 E F\na b : E\n⊢ Eq (Set.image (⇑f) (segment 𝕜 a b)) (segment 𝕜 (f a) (f b))","decl":"@[simp]\ntheorem image_segment (f : E →ᵃ[𝕜] F) (a b : E) : f '' [a -[𝕜] b] = [f a -[𝕜] f b] :=\n  Set.ext fun x => by\n    simp_rw [segment_eq_image_lineMap, mem_image, exists_exists_and_eq_and, AffineMap.apply_lineMap]\n\n"}
{"name":"image_openSegment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nf : AffineMap 𝕜 E F\na b : E\n⊢ Eq (Set.image (⇑f) (openSegment 𝕜 a b)) (openSegment 𝕜 (f a) (f b))","decl":"@[simp]\ntheorem image_openSegment (f : E →ᵃ[𝕜] F) (a b : E) :\n    f '' openSegment 𝕜 a b = openSegment 𝕜 (f a) (f b) :=\n  Set.ext fun x => by\n    simp_rw [openSegment_eq_image_lineMap, mem_image, exists_exists_and_eq_and,\n      AffineMap.apply_lineMap]\n\n"}
{"name":"vadd_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nG : Type u_4\ninst✝⁵ : OrderedRing 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : AddCommGroup G\ninst✝² : Module 𝕜 E\ninst✝¹ : AddTorsor G E\ninst✝ : VAddCommClass G E E\na : G\nb c : E\n⊢ Eq (HVAdd.hVAdd a (segment 𝕜 b c)) (segment 𝕜 (HVAdd.hVAdd a b) (HVAdd.hVAdd a c))","decl":"@[simp]\ntheorem vadd_segment [AddTorsor G E] [VAddCommClass G E E] (a : G) (b c : E) :\n    a +ᵥ [b -[𝕜] c] = [a +ᵥ b -[𝕜] a +ᵥ c] :=\n  image_segment 𝕜 ⟨_, LinearMap.id, fun _ _ => vadd_comm _ _ _⟩ b c\n\n"}
{"name":"vadd_openSegment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nG : Type u_4\ninst✝⁵ : OrderedRing 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : AddCommGroup G\ninst✝² : Module 𝕜 E\ninst✝¹ : AddTorsor G E\ninst✝ : VAddCommClass G E E\na : G\nb c : E\n⊢ Eq (HVAdd.hVAdd a (openSegment 𝕜 b c)) (openSegment 𝕜 (HVAdd.hVAdd a b) (HVAdd.hVAdd a c))","decl":"@[simp]\ntheorem vadd_openSegment [AddTorsor G E] [VAddCommClass G E E] (a : G) (b c : E) :\n    a +ᵥ openSegment 𝕜 b c = openSegment 𝕜 (a +ᵥ b) (a +ᵥ c) :=\n  image_openSegment 𝕜 ⟨_, LinearMap.id, fun _ _ => vadd_comm _ _ _⟩ b c\n\n"}
{"name":"mem_segment_translate","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\na x b c : E\n⊢ Iff (Membership.mem (segment 𝕜 (HAdd.hAdd a b) (HAdd.hAdd a c)) (HAdd.hAdd a x)) (Membership.mem (segment 𝕜 b c) x)","decl":"@[simp]\ntheorem mem_segment_translate (a : E) {x b c} : a + x ∈ [a + b -[𝕜] a + c] ↔ x ∈ [b -[𝕜] c] := by\n  simp_rw [← vadd_eq_add, ← vadd_segment, vadd_mem_vadd_set_iff]\n\n"}
{"name":"mem_openSegment_translate","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\na x b c : E\n⊢ Iff (Membership.mem (openSegment 𝕜 (HAdd.hAdd a b) (HAdd.hAdd a c)) (HAdd.hAdd a x)) (Membership.mem (openSegment 𝕜 b c) x)","decl":"@[simp]\ntheorem mem_openSegment_translate (a : E) {x b c : E} :\n    a + x ∈ openSegment 𝕜 (a + b) (a + c) ↔ x ∈ openSegment 𝕜 b c := by\n  simp_rw [← vadd_eq_add, ← vadd_openSegment, vadd_mem_vadd_set_iff]\n\n"}
{"name":"segment_translate_preimage","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\na b c : E\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (segment 𝕜 (HAdd.hAdd a b) (HAdd.hAdd a c))) (segment 𝕜 b c)","decl":"theorem segment_translate_preimage (a b c : E) :\n    (fun x => a + x) ⁻¹' [a + b -[𝕜] a + c] = [b -[𝕜] c] :=\n  Set.ext fun _ => mem_segment_translate 𝕜 a\n\n"}
{"name":"openSegment_translate_preimage","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\na b c : E\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (openSegment 𝕜 (HAdd.hAdd a b) (HAdd.hAdd a c))) (openSegment 𝕜 b c)","decl":"theorem openSegment_translate_preimage (a b c : E) :\n    (fun x => a + x) ⁻¹' openSegment 𝕜 (a + b) (a + c) = openSegment 𝕜 b c :=\n  Set.ext fun _ => mem_openSegment_translate 𝕜 a\n\n"}
{"name":"segment_translate_image","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\na b c : E\n⊢ Eq (Set.image (fun x => HAdd.hAdd a x) (segment 𝕜 b c)) (segment 𝕜 (HAdd.hAdd a b) (HAdd.hAdd a c))","decl":"theorem segment_translate_image (a b c : E) : (fun x => a + x) '' [b -[𝕜] c] = [a + b -[𝕜] a + c] :=\n  segment_translate_preimage 𝕜 a b c ▸ image_preimage_eq _ <| add_left_surjective a\n\n"}
{"name":"openSegment_translate_image","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\na b c : E\n⊢ Eq (Set.image (fun x => HAdd.hAdd a x) (openSegment 𝕜 b c)) (openSegment 𝕜 (HAdd.hAdd a b) (HAdd.hAdd a c))","decl":"theorem openSegment_translate_image (a b c : E) :\n    (fun x => a + x) '' openSegment 𝕜 b c = openSegment 𝕜 (a + b) (a + c) :=\n  openSegment_translate_preimage 𝕜 a b c ▸ image_preimage_eq _ <| add_left_surjective a\n\n"}
{"name":"segment_inter_eq_endpoint_of_linearIndependent_sub","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nc x y : E\nh : LinearIndependent 𝕜 (Matrix.vecCons (HSub.hSub x c) (Matrix.vecCons (HSub.hSub y c) Matrix.vecEmpty))\n⊢ Eq (Inter.inter (segment 𝕜 c x) (segment 𝕜 c y)) (Singleton.singleton c)","decl":"lemma segment_inter_eq_endpoint_of_linearIndependent_sub\n    {c x y : E} (h : LinearIndependent 𝕜 ![x - c, y - c]) :\n    [c -[𝕜] x] ∩ [c -[𝕜] y] = {c} := by\n  apply Subset.antisymm; swap\n  · simp [singleton_subset_iff, left_mem_segment]\n  intro z ⟨hzt, hzs⟩\n  rw [segment_eq_image, mem_image] at hzt hzs\n  rcases hzt with ⟨p, ⟨p0, p1⟩, rfl⟩\n  rcases hzs with ⟨q, ⟨q0, q1⟩, H⟩\n  have Hx : x = (x - c) + c := by abel\n  have Hy : y = (y - c) + c := by abel\n  rw [Hx, Hy, smul_add, smul_add] at H\n  have : c + q • (y - c) = c + p • (x - c) := by\n    convert H using 1 <;> simp [sub_smul]\n  obtain ⟨rfl, rfl⟩ : p = 0 ∧ q = 0 := h.eq_zero_of_pair' ((add_right_inj c).1 this).symm\n  simp\n\n"}
{"name":"sameRay_of_mem_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : StrictOrderedCommRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y z : E\nh : Membership.mem (segment 𝕜 y z) x\n⊢ SameRay 𝕜 (HSub.hSub x y) (HSub.hSub z x)","decl":"theorem sameRay_of_mem_segment [StrictOrderedCommRing 𝕜] [AddCommGroup E] [Module 𝕜 E] {x y z : E}\n    (h : x ∈ [y -[𝕜] z]) : SameRay 𝕜 (x - y) (z - x) := by\n  rw [segment_eq_image'] at h\n  rcases h with ⟨θ, ⟨hθ₀, hθ₁⟩, rfl⟩\n  simpa only [add_sub_cancel_left, ← sub_sub, sub_smul, one_smul] using\n    (SameRay.sameRay_nonneg_smul_left (z - y) hθ₀).nonneg_smul_right (sub_nonneg.2 hθ₁)\n\n"}
{"name":"segment_inter_eq_endpoint_of_linearIndependent_of_ne","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedCommRing 𝕜\ninst✝² : NoZeroDivisors 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\nh : LinearIndependent 𝕜 (Matrix.vecCons x (Matrix.vecCons y Matrix.vecEmpty))\ns t : 𝕜\nhs : Ne s t\nc : E\n⊢ Eq (Inter.inter (segment 𝕜 (HAdd.hAdd c x) (HAdd.hAdd c (HSMul.hSMul t y))) (segment 𝕜 (HAdd.hAdd c x) (HAdd.hAdd c (HSMul.hSMul s y)))) (Singleton.singleton (HAdd.hAdd c x))","decl":"lemma segment_inter_eq_endpoint_of_linearIndependent_of_ne [OrderedCommRing 𝕜] [NoZeroDivisors 𝕜]\n    [AddCommGroup E] [Module 𝕜 E]\n    {x y : E} (h : LinearIndependent 𝕜 ![x, y]) {s t : 𝕜} (hs : s ≠ t) (c : E) :\n    [c + x -[𝕜] c + t • y] ∩ [c + x -[𝕜] c + s • y] = {c + x} := by\n  apply segment_inter_eq_endpoint_of_linearIndependent_sub\n  simp only [add_sub_add_left_eq_sub]\n  suffices H : LinearIndependent 𝕜 ![(-1 : 𝕜) • x + t • y, (-1 : 𝕜) • x + s • y] by\n    convert H using 1; simp only [neg_smul, one_smul]; abel_nf\n  apply h.linear_combination_pair_of_det_ne_zero\n  contrapose! hs\n  apply Eq.symm\n  simpa [neg_mul, one_mul, mul_neg, mul_one, sub_neg_eq_add, add_comm _ t,\n    ← sub_eq_add_neg, sub_eq_zero] using hs\n\n"}
{"name":"midpoint_mem_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : LinearOrderedRing 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Invertible 2\nx y : E\n⊢ Membership.mem (segment 𝕜 x y) (midpoint 𝕜 x y)","decl":"theorem midpoint_mem_segment [Invertible (2 : 𝕜)] (x y : E) : midpoint 𝕜 x y ∈ [x -[𝕜] y] := by\n  rw [segment_eq_image_lineMap]\n  exact ⟨⅟ 2, ⟨invOf_nonneg.mpr zero_le_two, invOf_le_one one_le_two⟩, rfl⟩\n\n"}
{"name":"mem_segment_sub_add","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : LinearOrderedRing 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Invertible 2\nx y : E\n⊢ Membership.mem (segment 𝕜 (HSub.hSub x y) (HAdd.hAdd x y)) x","decl":"theorem mem_segment_sub_add [Invertible (2 : 𝕜)] (x y : E) : x ∈ [x - y -[𝕜] x + y] := by\n  convert @midpoint_mem_segment 𝕜 _ _ _ _ _ (x - y) (x + y)\n  rw [midpoint_sub_add]\n\n"}
{"name":"mem_segment_add_sub","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : LinearOrderedRing 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Invertible 2\nx y : E\n⊢ Membership.mem (segment 𝕜 (HAdd.hAdd x y) (HSub.hSub x y)) x","decl":"theorem mem_segment_add_sub [Invertible (2 : 𝕜)] (x y : E) : x ∈ [x + y -[𝕜] x - y] := by\n  convert @midpoint_mem_segment 𝕜 _ _ _ _ _ (x + y) (x - y)\n  rw [midpoint_add_sub]\n\n"}
{"name":"left_mem_openSegment_iff","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : LinearOrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\nx y : E\ninst✝¹ : DenselyOrdered 𝕜\ninst✝ : NoZeroSMulDivisors 𝕜 E\n⊢ Iff (Membership.mem (openSegment 𝕜 x y) x) (Eq x y)","decl":"@[simp]\ntheorem left_mem_openSegment_iff [DenselyOrdered 𝕜] [NoZeroSMulDivisors 𝕜 E] :\n    x ∈ openSegment 𝕜 x y ↔ x = y := by\n  constructor\n  · rintro ⟨a, b, _, hb, hab, hx⟩\n    refine smul_right_injective _ hb.ne' ((add_right_inj (a • x)).1 ?_)\n    rw [hx, ← add_smul, hab, one_smul]\n  · rintro rfl\n    rw [openSegment_same]\n    exact mem_singleton _\n\n"}
{"name":"right_mem_openSegment_iff","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : LinearOrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\nx y : E\ninst✝¹ : DenselyOrdered 𝕜\ninst✝ : NoZeroSMulDivisors 𝕜 E\n⊢ Iff (Membership.mem (openSegment 𝕜 x y) y) (Eq x y)","decl":"@[simp]\ntheorem right_mem_openSegment_iff [DenselyOrdered 𝕜] [NoZeroSMulDivisors 𝕜 E] :\n    y ∈ openSegment 𝕜 x y ↔ x = y := by rw [openSegment_symm, left_mem_openSegment_iff, eq_comm]\n\n"}
{"name":"mem_segment_iff_div","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedSemifield 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y z : E\n⊢ Iff (Membership.mem (segment 𝕜 y z) x) (Exists fun a => Exists fun b => And (LE.le 0 a) (And (LE.le 0 b) (And (LT.lt 0 (HAdd.hAdd a b)) (Eq (HAdd.hAdd (HSMul.hSMul (HDiv.hDiv a (HAdd.hAdd a b)) y) (HSMul.hSMul (HDiv.hDiv b (HAdd.hAdd a b)) z)) x))))","decl":"theorem mem_segment_iff_div :\n    x ∈ [y -[𝕜] z] ↔\n      ∃ a b : 𝕜, 0 ≤ a ∧ 0 ≤ b ∧ 0 < a + b ∧ (a / (a + b)) • y + (b / (a + b)) • z = x := by\n  constructor\n  · rintro ⟨a, b, ha, hb, hab, rfl⟩\n    use a, b, ha, hb\n    simp [*]\n  · rintro ⟨a, b, ha, hb, hab, rfl⟩\n    refine ⟨a / (a + b), b / (a + b), by positivity, by positivity, ?_, rfl⟩\n    rw [← add_div, div_self hab.ne']\n\n"}
{"name":"mem_openSegment_iff_div","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedSemifield 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y z : E\n⊢ Iff (Membership.mem (openSegment 𝕜 y z) x) (Exists fun a => Exists fun b => And (LT.lt 0 a) (And (LT.lt 0 b) (Eq (HAdd.hAdd (HSMul.hSMul (HDiv.hDiv a (HAdd.hAdd a b)) y) (HSMul.hSMul (HDiv.hDiv b (HAdd.hAdd a b)) z)) x)))","decl":"theorem mem_openSegment_iff_div : x ∈ openSegment 𝕜 y z ↔\n    ∃ a b : 𝕜, 0 < a ∧ 0 < b ∧ (a / (a + b)) • y + (b / (a + b)) • z = x := by\n  constructor\n  · rintro ⟨a, b, ha, hb, hab, rfl⟩\n    use a, b, ha, hb\n    rw [hab, div_one, div_one]\n  · rintro ⟨a, b, ha, hb, rfl⟩\n    have hab : 0 < a + b := add_pos' ha hb\n    refine ⟨a / (a + b), b / (a + b), by positivity, by positivity, ?_, rfl⟩\n    rw [← add_div, div_self hab.ne']\n\n"}
{"name":"mem_segment_iff_sameRay","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y z : E\n⊢ Iff (Membership.mem (segment 𝕜 y z) x) (SameRay 𝕜 (HSub.hSub x y) (HSub.hSub z x))","decl":"theorem mem_segment_iff_sameRay : x ∈ [y -[𝕜] z] ↔ SameRay 𝕜 (x - y) (z - x) := by\n  refine ⟨sameRay_of_mem_segment, fun h => ?_⟩\n  rcases h.exists_eq_smul_add with ⟨a, b, ha, hb, hab, hxy, hzx⟩\n  rw [add_comm, sub_add_sub_cancel] at hxy hzx\n  rw [← mem_segment_translate _ (-x), neg_add_cancel]\n  refine ⟨b, a, hb, ha, add_comm a b ▸ hab, ?_⟩\n  rw [← sub_eq_neg_add, ← neg_sub, hxy, ← sub_eq_neg_add, hzx, smul_neg, smul_comm, neg_add_cancel]\n\n"}
{"name":"openSegment_subset_union","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y z : E\nhz : Membership.mem (Set.range ⇑(AffineMap.lineMap x y)) z\n⊢ HasSubset.Subset (openSegment 𝕜 x y) (Insert.insert z (Union.union (openSegment 𝕜 x z) (openSegment 𝕜 z y)))","decl":"/-- If `z = lineMap x y c` is a point on the line passing through `x` and `y`, then the open\nsegment `openSegment 𝕜 x y` is included in the union of the open segments `openSegment 𝕜 x z`,\n`openSegment 𝕜 z y`, and the point `z`. Informally, `(x, y) ⊆ {z} ∪ (x, z) ∪ (z, y)`. -/\ntheorem openSegment_subset_union (x y : E) {z : E} (hz : z ∈ range (lineMap x y : 𝕜 → E)) :\n    openSegment 𝕜 x y ⊆ insert z (openSegment 𝕜 x z ∪ openSegment 𝕜 z y) := by\n  rcases hz with ⟨c, rfl⟩\n  simp only [openSegment_eq_image_lineMap, ← mapsTo']\n  rintro a ⟨h₀, h₁⟩\n  rcases lt_trichotomy a c with (hac | rfl | hca)\n  · right\n    left\n    have hc : 0 < c := h₀.trans hac\n    refine ⟨a / c, ⟨div_pos h₀ hc, (div_lt_one hc).2 hac⟩, ?_⟩\n    simp only [← homothety_eq_lineMap, ← homothety_mul_apply, div_mul_cancel₀ _ hc.ne']\n  · left\n    rfl\n  · right\n    right\n    have hc : 0 < 1 - c := sub_pos.2 (hca.trans h₁)\n    simp only [← lineMap_apply_one_sub y]\n    refine\n      ⟨(a - c) / (1 - c), ⟨div_pos (sub_pos.2 hca) hc, (div_lt_one hc).2 <| sub_lt_sub_right h₁ _⟩,\n        ?_⟩\n    simp only [← homothety_eq_lineMap, ← homothety_mul_apply, sub_mul, one_mul,\n      div_mul_cancel₀ _ hc.ne', sub_sub_sub_cancel_right]\n\n"}
{"name":"segment_subset_Icc","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : OrderedAddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx y : E\nh : LE.le x y\n⊢ HasSubset.Subset (segment 𝕜 x y) (Set.Icc x y)","decl":"theorem segment_subset_Icc (h : x ≤ y) : [x -[𝕜] y] ⊆ Icc x y := by\n  rintro z ⟨a, b, ha, hb, hab, rfl⟩\n  constructor\n  · calc\n      x = a • x + b • x := (Convex.combo_self hab _).symm\n      _ ≤ a • x + b • y := by gcongr\n  · calc\n      a • x + b • y ≤ a • y + b • y := by gcongr\n      _ = y := Convex.combo_self hab _\n\n"}
{"name":"openSegment_subset_Ioo","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : OrderedCancelAddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx y : E\nh : LT.lt x y\n⊢ HasSubset.Subset (openSegment 𝕜 x y) (Set.Ioo x y)","decl":"theorem openSegment_subset_Ioo (h : x < y) : openSegment 𝕜 x y ⊆ Ioo x y := by\n  rintro z ⟨a, b, ha, hb, hab, rfl⟩\n  constructor\n  · calc\n      x = a • x + b • x := (Convex.combo_self hab _).symm\n      _ < a • x + b • y := by gcongr\n  · calc\n      a • x + b • y < a • y + b • y := by gcongr\n      _ = y := Convex.combo_self hab _\n\n"}
{"name":"segment_subset_uIcc","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : LinearOrderedAddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx y : E\n⊢ HasSubset.Subset (segment 𝕜 x y) (Set.uIcc x y)","decl":"theorem segment_subset_uIcc (x y : E) : [x -[𝕜] y] ⊆ uIcc x y := by\n  rcases le_total x y with h | h\n  · rw [uIcc_of_le h]\n    exact segment_subset_Icc h\n  · rw [uIcc_of_ge h, segment_symm]\n    exact segment_subset_Icc h\n\n"}
{"name":"Convex.min_le_combo","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : LinearOrderedAddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\na b : 𝕜\nx y : E\nha : LE.le 0 a\nhb : LE.le 0 b\nhab : Eq (HAdd.hAdd a b) 1\n⊢ LE.le (Min.min x y) (HAdd.hAdd (HSMul.hSMul a x) (HSMul.hSMul b y))","decl":"theorem Convex.min_le_combo (x y : E) (ha : 0 ≤ a) (hb : 0 ≤ b) (hab : a + b = 1) :\n    min x y ≤ a • x + b • y :=\n  (segment_subset_uIcc x y ⟨_, _, ha, hb, hab, rfl⟩).1\n\n"}
{"name":"Convex.combo_le_max","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : LinearOrderedAddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\na b : 𝕜\nx y : E\nha : LE.le 0 a\nhb : LE.le 0 b\nhab : Eq (HAdd.hAdd a b) 1\n⊢ LE.le (HAdd.hAdd (HSMul.hSMul a x) (HSMul.hSMul b y)) (Max.max x y)","decl":"theorem Convex.combo_le_max (x y : E) (ha : 0 ≤ a) (hb : 0 ≤ b) (hab : a + b = 1) :\n    a • x + b • y ≤ max x y :=\n  (segment_subset_uIcc x y ⟨_, _, ha, hb, hab, rfl⟩).2\n\n"}
{"name":"Icc_subset_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\n⊢ HasSubset.Subset (Set.Icc x y) (segment 𝕜 x y)","decl":"theorem Icc_subset_segment : Icc x y ⊆ [x -[𝕜] y] := by\n  rintro z ⟨hxz, hyz⟩\n  obtain rfl | h := (hxz.trans hyz).eq_or_lt\n  · rw [segment_same]\n    exact hyz.antisymm hxz\n  rw [← sub_nonneg] at hxz hyz\n  rw [← sub_pos] at h\n  refine ⟨(y - z) / (y - x), (z - x) / (y - x), div_nonneg hyz h.le, div_nonneg hxz h.le, ?_, ?_⟩\n  · rw [← add_div, sub_add_sub_cancel, div_self h.ne']\n  · rw [smul_eq_mul, smul_eq_mul, ← mul_div_right_comm, ← mul_div_right_comm, ← add_div,\n      div_eq_iff h.ne', add_comm, sub_mul, sub_mul, mul_comm x, sub_add_sub_cancel, mul_sub]\n\n"}
{"name":"segment_eq_Icc","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\nh : LE.le x y\n⊢ Eq (segment 𝕜 x y) (Set.Icc x y)","decl":"@[simp]\ntheorem segment_eq_Icc (h : x ≤ y) : [x -[𝕜] y] = Icc x y :=\n  (segment_subset_Icc h).antisymm Icc_subset_segment\n\n"}
{"name":"Ioo_subset_openSegment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\n⊢ HasSubset.Subset (Set.Ioo x y) (openSegment 𝕜 x y)","decl":"theorem Ioo_subset_openSegment : Ioo x y ⊆ openSegment 𝕜 x y := fun _ hz =>\n  mem_openSegment_of_ne_left_right hz.1.ne hz.2.ne' <| Icc_subset_segment <| Ioo_subset_Icc_self hz\n\n"}
{"name":"openSegment_eq_Ioo","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\nh : LT.lt x y\n⊢ Eq (openSegment 𝕜 x y) (Set.Ioo x y)","decl":"@[simp]\ntheorem openSegment_eq_Ioo (h : x < y) : openSegment 𝕜 x y = Ioo x y :=\n  (openSegment_subset_Ioo h).antisymm Ioo_subset_openSegment\n\n"}
{"name":"segment_eq_Icc'","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\n⊢ Eq (segment 𝕜 x y) (Set.Icc (Min.min x y) (Max.max x y))","decl":"theorem segment_eq_Icc' (x y : 𝕜) : [x -[𝕜] y] = Icc (min x y) (max x y) := by\n  rcases le_total x y with h | h\n  · rw [segment_eq_Icc h, max_eq_right h, min_eq_left h]\n  · rw [segment_symm, segment_eq_Icc h, max_eq_left h, min_eq_right h]\n\n"}
{"name":"openSegment_eq_Ioo'","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\nhxy : Ne x y\n⊢ Eq (openSegment 𝕜 x y) (Set.Ioo (Min.min x y) (Max.max x y))","decl":"theorem openSegment_eq_Ioo' (hxy : x ≠ y) : openSegment 𝕜 x y = Ioo (min x y) (max x y) := by\n  cases' hxy.lt_or_lt with h h\n  · rw [openSegment_eq_Ioo h, max_eq_right h.le, min_eq_left h.le]\n  · rw [openSegment_symm, openSegment_eq_Ioo h, max_eq_left h.le, min_eq_right h.le]\n\n"}
{"name":"segment_eq_uIcc","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y : 𝕜\n⊢ Eq (segment 𝕜 x y) (Set.uIcc x y)","decl":"theorem segment_eq_uIcc (x y : 𝕜) : [x -[𝕜] y] = uIcc x y :=\n  segment_eq_Icc' _ _\n\n"}
{"name":"Convex.mem_Icc","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y z : 𝕜\nh : LE.le x y\n⊢ Iff (Membership.mem (Set.Icc x y) z) (Exists fun a => Exists fun b => And (LE.le 0 a) (And (LE.le 0 b) (And (Eq (HAdd.hAdd a b) 1) (Eq (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y)) z))))","decl":"/-- A point is in an `Icc` iff it can be expressed as a convex combination of the endpoints. -/\ntheorem Convex.mem_Icc (h : x ≤ y) :\n    z ∈ Icc x y ↔ ∃ a b, 0 ≤ a ∧ 0 ≤ b ∧ a + b = 1 ∧ a * x + b * y = z := by\n  simp only [← segment_eq_Icc h, segment, mem_setOf_eq, smul_eq_mul, exists_and_left]\n\n"}
{"name":"Convex.mem_Ioo","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y z : 𝕜\nh : LT.lt x y\n⊢ Iff (Membership.mem (Set.Ioo x y) z) (Exists fun a => Exists fun b => And (LT.lt 0 a) (And (LT.lt 0 b) (And (Eq (HAdd.hAdd a b) 1) (Eq (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y)) z))))","decl":"/-- A point is in an `Ioo` iff it can be expressed as a strict convex combination of the endpoints.\n-/\ntheorem Convex.mem_Ioo (h : x < y) :\n    z ∈ Ioo x y ↔ ∃ a b, 0 < a ∧ 0 < b ∧ a + b = 1 ∧ a * x + b * y = z := by\n  simp only [← openSegment_eq_Ioo h, openSegment, smul_eq_mul, exists_and_left, mem_setOf_eq]\n\n"}
{"name":"Convex.mem_Ioc","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y z : 𝕜\nh : LT.lt x y\n⊢ Iff (Membership.mem (Set.Ioc x y) z) (Exists fun a => Exists fun b => And (LE.le 0 a) (And (LT.lt 0 b) (And (Eq (HAdd.hAdd a b) 1) (Eq (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y)) z))))","decl":"/-- A point is in an `Ioc` iff it can be expressed as a semistrict convex combination of the\nendpoints. -/\ntheorem Convex.mem_Ioc (h : x < y) :\n    z ∈ Ioc x y ↔ ∃ a b, 0 ≤ a ∧ 0 < b ∧ a + b = 1 ∧ a * x + b * y = z := by\n  refine ⟨fun hz => ?_, ?_⟩\n  · obtain ⟨a, b, ha, hb, hab, rfl⟩ := (Convex.mem_Icc h.le).1 (Ioc_subset_Icc_self hz)\n    obtain rfl | hb' := hb.eq_or_lt\n    · rw [add_zero] at hab\n      rw [hab, one_mul, zero_mul, add_zero] at hz\n      exact (hz.1.ne rfl).elim\n    · exact ⟨a, b, ha, hb', hab, rfl⟩\n  · rintro ⟨a, b, ha, hb, hab, rfl⟩\n    obtain rfl | ha' := ha.eq_or_lt\n    · rw [zero_add] at hab\n      rwa [hab, one_mul, zero_mul, zero_add, right_mem_Ioc]\n    · exact Ioo_subset_Ioc_self ((Convex.mem_Ioo h).2 ⟨a, b, ha', hb, hab, rfl⟩)\n\n"}
{"name":"Convex.mem_Ico","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx y z : 𝕜\nh : LT.lt x y\n⊢ Iff (Membership.mem (Set.Ico x y) z) (Exists fun a => Exists fun b => And (LT.lt 0 a) (And (LE.le 0 b) (And (Eq (HAdd.hAdd a b) 1) (Eq (HAdd.hAdd (HMul.hMul a x) (HMul.hMul b y)) z))))","decl":"/-- A point is in an `Ico` iff it can be expressed as a semistrict convex combination of the\nendpoints. -/\ntheorem Convex.mem_Ico (h : x < y) :\n    z ∈ Ico x y ↔ ∃ a b, 0 < a ∧ 0 ≤ b ∧ a + b = 1 ∧ a * x + b * y = z := by\n  refine ⟨fun hz => ?_, ?_⟩\n  · obtain ⟨a, b, ha, hb, hab, rfl⟩ := (Convex.mem_Icc h.le).1 (Ico_subset_Icc_self hz)\n    obtain rfl | ha' := ha.eq_or_lt\n    · rw [zero_add] at hab\n      rw [hab, one_mul, zero_mul, zero_add] at hz\n      exact (hz.2.ne rfl).elim\n    · exact ⟨a, b, ha', hb, hab, rfl⟩\n  · rintro ⟨a, b, ha, hb, hab, rfl⟩\n    obtain rfl | hb' := hb.eq_or_lt\n    · rw [add_zero] at hab\n      rwa [hab, one_mul, zero_mul, add_zero, left_mem_Ico]\n    · exact Ioo_subset_Ico_self ((Convex.mem_Ioo h).2 ⟨a, b, ha, hb', hab, rfl⟩)\n\n"}
{"name":"Prod.segment_subset","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx y : Prod E F\n⊢ HasSubset.Subset (segment 𝕜 x y) (SProd.sprod (segment 𝕜 x.1 y.1) (segment 𝕜 x.2 y.2))","decl":"theorem segment_subset (x y : E × F) : segment 𝕜 x y ⊆ segment 𝕜 x.1 y.1 ×ˢ segment 𝕜 x.2 y.2 := by\n  rintro z ⟨a, b, ha, hb, hab, hz⟩\n  exact ⟨⟨a, b, ha, hb, hab, congr_arg Prod.fst hz⟩, a, b, ha, hb, hab, congr_arg Prod.snd hz⟩\n\n"}
{"name":"Prod.openSegment_subset","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx y : Prod E F\n⊢ HasSubset.Subset (openSegment 𝕜 x y) (SProd.sprod (openSegment 𝕜 x.1 y.1) (openSegment 𝕜 x.2 y.2))","decl":"theorem openSegment_subset (x y : E × F) :\n    openSegment 𝕜 x y ⊆ openSegment 𝕜 x.1 y.1 ×ˢ openSegment 𝕜 x.2 y.2 := by\n  rintro z ⟨a, b, ha, hb, hab, hz⟩\n  exact ⟨⟨a, b, ha, hb, hab, congr_arg Prod.fst hz⟩, a, b, ha, hb, hab, congr_arg Prod.snd hz⟩\n\n"}
{"name":"Prod.image_mk_segment_left","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx₁ x₂ : E\ny : F\n⊢ Eq (Set.image (fun x => { fst := x, snd := y }) (segment 𝕜 x₁ x₂)) (segment 𝕜 { fst := x₁, snd := y } { fst := x₂, snd := y })","decl":"theorem image_mk_segment_left (x₁ x₂ : E) (y : F) :\n    (fun x => (x, y)) '' [x₁ -[𝕜] x₂] = [(x₁, y) -[𝕜] (x₂, y)] := by\n  rw [segment_eq_image₂, segment_eq_image₂, image_image]\n  refine EqOn.image_eq fun a ha ↦ ?_\n  simp [Convex.combo_self ha.2.2]\n\n"}
{"name":"Prod.image_mk_segment_right","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\ny₁ y₂ : F\n⊢ Eq (Set.image (fun y => { fst := x, snd := y }) (segment 𝕜 y₁ y₂)) (segment 𝕜 { fst := x, snd := y₁ } { fst := x, snd := y₂ })","decl":"theorem image_mk_segment_right (x : E) (y₁ y₂ : F) :\n    (fun y => (x, y)) '' [y₁ -[𝕜] y₂] = [(x, y₁) -[𝕜] (x, y₂)] := by\n  rw [segment_eq_image₂, segment_eq_image₂, image_image]\n  refine EqOn.image_eq fun a ha ↦ ?_\n  simp [Convex.combo_self ha.2.2]\n\n"}
{"name":"Prod.image_mk_openSegment_left","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx₁ x₂ : E\ny : F\n⊢ Eq (Set.image (fun x => { fst := x, snd := y }) (openSegment 𝕜 x₁ x₂)) (openSegment 𝕜 { fst := x₁, snd := y } { fst := x₂, snd := y })","decl":"theorem image_mk_openSegment_left (x₁ x₂ : E) (y : F) :\n    (fun x => (x, y)) '' openSegment 𝕜 x₁ x₂ = openSegment 𝕜 (x₁, y) (x₂, y) := by\n  rw [openSegment_eq_image₂, openSegment_eq_image₂, image_image]\n  refine EqOn.image_eq fun a ha ↦ ?_\n  simp [Convex.combo_self ha.2.2]\n\n"}
{"name":"Prod.image_mk_openSegment_right","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\ny₁ y₂ : F\n⊢ Eq (Set.image (fun y => { fst := x, snd := y }) (openSegment 𝕜 y₁ y₂)) (openSegment 𝕜 { fst := x, snd := y₁ } { fst := x, snd := y₂ })","decl":"@[simp]\ntheorem image_mk_openSegment_right (x : E) (y₁ y₂ : F) :\n    (fun y => (x, y)) '' openSegment 𝕜 y₁ y₂ = openSegment 𝕜 (x, y₁) (x, y₂) := by\n  rw [openSegment_eq_image₂, openSegment_eq_image₂, image_image]\n  refine EqOn.image_eq fun a ha ↦ ?_\n  simp [Convex.combo_self ha.2.2]\n\n"}
{"name":"Pi.segment_subset","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nι : Type u_5\nπ : ι → Type u_6\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : (i : ι) → AddCommMonoid (π i)\ninst✝ : (i : ι) → Module 𝕜 (π i)\ns : Set ι\nx y : (i : ι) → π i\n⊢ HasSubset.Subset (segment 𝕜 x y) (s.pi fun i => segment 𝕜 (x i) (y i))","decl":"theorem segment_subset (x y : ∀ i, π i) : segment 𝕜 x y ⊆ s.pi fun i => segment 𝕜 (x i) (y i) := by\n  rintro z ⟨a, b, ha, hb, hab, hz⟩ i -\n  exact ⟨a, b, ha, hb, hab, congr_fun hz i⟩\n\n"}
{"name":"Pi.openSegment_subset","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nι : Type u_5\nπ : ι → Type u_6\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : (i : ι) → AddCommMonoid (π i)\ninst✝ : (i : ι) → Module 𝕜 (π i)\ns : Set ι\nx y : (i : ι) → π i\n⊢ HasSubset.Subset (openSegment 𝕜 x y) (s.pi fun i => openSegment 𝕜 (x i) (y i))","decl":"theorem openSegment_subset (x y : ∀ i, π i) :\n    openSegment 𝕜 x y ⊆ s.pi fun i => openSegment 𝕜 (x i) (y i) := by\n  rintro z ⟨a, b, ha, hb, hab, hz⟩ i -\n  exact ⟨a, b, ha, hb, hab, congr_fun hz i⟩\n\n"}
{"name":"Pi.image_update_segment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nι : Type u_5\nπ : ι → Type u_6\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : (i : ι) → AddCommMonoid (π i)\ninst✝¹ : (i : ι) → Module 𝕜 (π i)\ninst✝ : DecidableEq ι\ni : ι\nx₁ x₂ : π i\ny : (i : ι) → π i\n⊢ Eq (Set.image (Function.update y i) (segment 𝕜 x₁ x₂)) (segment 𝕜 (Function.update y i x₁) (Function.update y i x₂))","decl":"theorem image_update_segment (i : ι) (x₁ x₂ : π i) (y : ∀ i, π i) :\n    update y i '' [x₁ -[𝕜] x₂] = [update y i x₁ -[𝕜] update y i x₂] := by\n  rw [segment_eq_image₂, segment_eq_image₂, image_image]\n  refine EqOn.image_eq fun a ha ↦ ?_\n  simp only [← update_smul, ← update_add, Convex.combo_self ha.2.2]\n\n"}
{"name":"Pi.image_update_openSegment","module":"Mathlib.Analysis.Convex.Segment","initialProofState":"𝕜 : Type u_1\nι : Type u_5\nπ : ι → Type u_6\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : (i : ι) → AddCommMonoid (π i)\ninst✝¹ : (i : ι) → Module 𝕜 (π i)\ninst✝ : DecidableEq ι\ni : ι\nx₁ x₂ : π i\ny : (i : ι) → π i\n⊢ Eq (Set.image (Function.update y i) (openSegment 𝕜 x₁ x₂)) (openSegment 𝕜 (Function.update y i x₁) (Function.update y i x₂))","decl":"theorem image_update_openSegment (i : ι) (x₁ x₂ : π i) (y : ∀ i, π i) :\n    update y i '' openSegment 𝕜 x₁ x₂ = openSegment 𝕜 (update y i x₁) (update y i x₂) := by\n  rw [openSegment_eq_image₂, openSegment_eq_image₂, image_image]\n  refine EqOn.image_eq fun a ha ↦ ?_\n  simp only [← update_smul, ← update_add, Convex.combo_self ha.2.2]\n\n"}
