{"name":"instHasLimitsOfSizeLightCondSet","module":"Mathlib.Condensed.Light.Limits","initialProofState":"⊢ CategoryTheory.Limits.HasLimitsOfSize.{u, u, u + 1, u + 1} LightCondSet","decl":"instance : HasLimitsOfSize.{u, u} LightCondSet.{u} := by\n  change HasLimitsOfSize (Sheaf _ _)\n  infer_instance\n\n"}
{"name":"instHasFiniteLimitsLightCondSet","module":"Mathlib.Condensed.Light.Limits","initialProofState":"⊢ CategoryTheory.Limits.HasFiniteLimits LightCondSet","decl":"instance : HasFiniteLimits LightCondSet.{u} := hasFiniteLimits_of_hasLimitsOfSize _\n\n"}
{"name":"instHasLimitsOfSizeLightCondMod","module":"Mathlib.Condensed.Light.Limits","initialProofState":"R : Type u\ninst✝ : Ring R\n⊢ CategoryTheory.Limits.HasLimitsOfSize.{u, u, u + 1, u + 1} (LightCondMod R)","decl":"instance : HasLimitsOfSize.{u, u} (LightCondMod.{u} R) :=\n  inferInstanceAs (HasLimitsOfSize (Sheaf _ _))\n\n"}
{"name":"instHasLimitsOfSizeLightCondMod_1","module":"Mathlib.Condensed.Light.Limits","initialProofState":"R : Type u\ninst✝ : Ring R\n⊢ CategoryTheory.Limits.HasLimitsOfSize.{0, 0, u + 1, u + 1} (LightCondMod R)","decl":"instance : HasLimitsOfSize.{0, 0} (LightCondMod.{u} R) :=\n  inferInstanceAs (HasLimitsOfSize (Sheaf _ _))\n\n"}
{"name":"instHasFiniteLimitsLightCondMod","module":"Mathlib.Condensed.Light.Limits","initialProofState":"R : Type u\ninst✝ : Ring R\n⊢ CategoryTheory.Limits.HasFiniteLimits (LightCondMod R)","decl":"instance : HasFiniteLimits (LightCondMod.{u} R) := hasFiniteLimits_of_hasLimitsOfSize _\n"}
