{"name":"Nontrivial.exists_pair_ne","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_3\nself : Nontrivial α\n⊢ Exists fun x => Exists fun y => Ne x y","decl":"/-- Predicate typeclass for expressing that a type is not reduced to a single element. In rings,\nthis is equivalent to `0 ≠ 1`. In vector spaces, this is equivalent to positive dimension. -/\nclass Nontrivial (α : Type*) : Prop where\n  /-- In a nontrivial type, there exists a pair of distinct terms. -/\n  exists_pair_ne : ∃ x y : α, x ≠ y\n\n"}
{"name":"nontrivial_iff","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\n⊢ Iff (Nontrivial α) (Exists fun x => Exists fun y => Ne x y)","decl":"theorem nontrivial_iff : Nontrivial α ↔ ∃ x y : α, x ≠ y :=\n  ⟨fun h ↦ h.exists_pair_ne, fun h ↦ ⟨h⟩⟩\n\n"}
{"name":"exists_pair_ne","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_3\ninst✝ : Nontrivial α\n⊢ Exists fun x => Exists fun y => Ne x y","decl":"theorem exists_pair_ne (α : Type*) [Nontrivial α] : ∃ x y : α, x ≠ y :=\n  Nontrivial.exists_pair_ne\n\n-- See Note [decidable namespace]\n"}
{"name":"Decidable.exists_ne","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\ninst✝¹ : Nontrivial α\ninst✝ : DecidableEq α\nx : α\n⊢ Exists fun y => Ne y x","decl":"protected theorem Decidable.exists_ne [Nontrivial α] [DecidableEq α] (x : α) : ∃ y, y ≠ x := by\n  rcases exists_pair_ne α with ⟨y, y', h⟩\n  by_cases hx : x = y\n  · rw [← hx] at h\n    exact ⟨y', h.symm⟩\n  · exact ⟨y, Ne.symm hx⟩\n\n"}
{"name":"exists_ne","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\ninst✝ : Nontrivial α\nx : α\n⊢ Exists fun y => Ne y x","decl":"open Classical in\ntheorem exists_ne [Nontrivial α] (x : α) : ∃ y, y ≠ x := Decidable.exists_ne x\n\n-- `x` and `y` are explicit here, as they are often needed to guide typechecking of `h`.\n"}
{"name":"nontrivial_of_ne","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\nx y : α\nh : Ne x y\n⊢ Nontrivial α","decl":"theorem nontrivial_of_ne (x y : α) (h : x ≠ y) : Nontrivial α :=\n  ⟨⟨x, y, h⟩⟩\n\n"}
{"name":"nontrivial_iff_exists_ne","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\nx : α\n⊢ Iff (Nontrivial α) (Exists fun y => Ne y x)","decl":"theorem nontrivial_iff_exists_ne (x : α) : Nontrivial α ↔ ∃ y, y ≠ x :=\n  ⟨fun h ↦ @exists_ne α h x, fun ⟨_, hy⟩ ↦ nontrivial_of_ne _ _ hy⟩\n\n"}
{"name":"instNontrivialProp","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"⊢ Nontrivial Prop","decl":"instance : Nontrivial Prop :=\n  ⟨⟨True, False, true_ne_false⟩⟩\n\n"}
{"name":"Nontrivial.to_nonempty","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\ninst✝ : Nontrivial α\n⊢ Nonempty α","decl":"/-- See Note [lower instance priority]\n\nNote that since this and `instNonemptyOfInhabited` are the most \"obvious\" way to find a nonempty\ninstance if no direct instance can be found, we give this a higher priority than the usual `100`.\n-/\ninstance (priority := 500) Nontrivial.to_nonempty [Nontrivial α] : Nonempty α :=\n  let ⟨x, _⟩ := _root_.exists_pair_ne α\n  ⟨x⟩\n\n"}
{"name":"subsingleton_iff","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\n⊢ Iff (Subsingleton α) (∀ (x y : α), Eq x y)","decl":"theorem subsingleton_iff : Subsingleton α ↔ ∀ x y : α, x = y :=\n  ⟨by\n    intro h\n    exact Subsingleton.elim, fun h ↦ ⟨h⟩⟩\n\n"}
{"name":"not_nontrivial_iff_subsingleton","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\n⊢ Iff (Not (Nontrivial α)) (Subsingleton α)","decl":"theorem not_nontrivial_iff_subsingleton : ¬Nontrivial α ↔ Subsingleton α := by\n  simp only [nontrivial_iff, subsingleton_iff, not_exists, Classical.not_not]\n\n"}
{"name":"not_nontrivial","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_3\ninst✝ : Subsingleton α\n⊢ Not (Nontrivial α)","decl":"theorem not_nontrivial (α) [Subsingleton α] : ¬Nontrivial α :=\n  fun ⟨⟨x, y, h⟩⟩ ↦ h <| Subsingleton.elim x y\n\n"}
{"name":"not_subsingleton","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_3\ninst✝ : Nontrivial α\n⊢ Not (Subsingleton α)","decl":"theorem not_subsingleton (α) [Nontrivial α] : ¬Subsingleton α :=\n  fun _ => not_nontrivial _ ‹_›\n\n"}
{"name":"not_subsingleton_iff_nontrivial","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\n⊢ Iff (Not (Subsingleton α)) (Nontrivial α)","decl":"lemma not_subsingleton_iff_nontrivial : ¬ Subsingleton α ↔ Nontrivial α := by\n  rw [← not_nontrivial_iff_subsingleton, Classical.not_not]\n\n"}
{"name":"subsingleton_or_nontrivial","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_3\n⊢ Or (Subsingleton α) (Nontrivial α)","decl":"/-- A type is either a subsingleton or nontrivial. -/\ntheorem subsingleton_or_nontrivial (α : Type*) : Subsingleton α ∨ Nontrivial α := by\n  rw [← not_nontrivial_iff_subsingleton, or_comm]\n  exact Classical.em _\n\n"}
{"name":"false_of_nontrivial_of_subsingleton","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_3\ninst✝¹ : Nontrivial α\ninst✝ : Subsingleton α\n⊢ False","decl":"theorem false_of_nontrivial_of_subsingleton (α : Type*) [Nontrivial α] [Subsingleton α] : False :=\n  not_nontrivial _ ‹_›\n\n"}
{"name":"Function.Surjective.nontrivial","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Nontrivial β\nf : α → β\nhf : Function.Surjective f\n⊢ Nontrivial α","decl":"/-- Pullback a `Nontrivial` instance along a surjective function. -/\nprotected theorem Function.Surjective.nontrivial [Nontrivial β] {f : α → β}\n    (hf : Function.Surjective f) : Nontrivial α := by\n  rcases exists_pair_ne β with ⟨x, y, h⟩\n  rcases hf x with ⟨x', hx'⟩\n  rcases hf y with ⟨y', hy'⟩\n  have : x' ≠ y' := by\n    refine fun H ↦ h ?_\n    rw [← hx', ← hy', H]\n  exact ⟨⟨x', y', this⟩⟩\n\n"}
{"name":"Bool.instNontrivial","module":"Mathlib.Logic.Nontrivial.Defs","initialProofState":"⊢ Nontrivial Bool","decl":"instance : Nontrivial Bool :=\n  ⟨⟨true, false, nofun⟩⟩\n\n"}
