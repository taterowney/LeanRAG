{"name":"CoxeterMatrix.isSymm","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nself : CoxeterMatrix B\n⊢ self.M.IsSymm","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.mk.injEq","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nM✝ : Matrix B B Nat\nisSymm✝ : autoParam M✝.IsSymm _auto✝\ndiagonal✝ : autoParam (∀ (i : B), Eq (M✝ i i) 1) _auto✝\noff_diagonal✝ : autoParam (∀ (i i' : B), Ne i i' → Ne (M✝ i i') 1) _auto✝\nM : Matrix B B Nat\nisSymm : autoParam M.IsSymm _auto✝\ndiagonal : autoParam (∀ (i : B), Eq (M i i) 1) _auto✝\noff_diagonal : autoParam (∀ (i i' : B), Ne i i' → Ne (M i i') 1) _auto✝\n⊢ Eq (Eq { M := M✝, isSymm := isSymm✝, diagonal := diagonal✝, off_diagonal := off_diagonal✝ } { M := M, isSymm := isSymm, diagonal := diagonal, off_diagonal := off_diagonal }) (Eq M✝ M)","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.mk.inj","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nM✝ : Matrix B B Nat\nisSymm✝ : autoParam M✝.IsSymm _auto✝\ndiagonal✝ : autoParam (∀ (i : B), Eq (M✝ i i) 1) _auto✝\noff_diagonal✝ : autoParam (∀ (i i' : B), Ne i i' → Ne (M✝ i i') 1) _auto✝\nM : Matrix B B Nat\nisSymm : autoParam M.IsSymm _auto✝\ndiagonal : autoParam (∀ (i : B), Eq (M i i) 1) _auto✝\noff_diagonal : autoParam (∀ (i i' : B), Ne i i' → Ne (M i i') 1) _auto✝\nx✝ : Eq { M := M✝, isSymm := isSymm✝, diagonal := diagonal✝, off_diagonal := off_diagonal✝ } { M := M, isSymm := isSymm, diagonal := diagonal, off_diagonal := off_diagonal }\n⊢ Eq M✝ M","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.diagonal","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nself : CoxeterMatrix B\ni : B\n⊢ Eq (self.M i i) 1","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.ext_iff","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nx y : CoxeterMatrix B\n⊢ Iff (Eq x y) (Eq x.M y.M)","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.off_diagonal","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nself : CoxeterMatrix B\ni i' : B\na✝ : Ne i i'\n⊢ Ne (self.M i i') 1","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.mk.sizeOf_spec","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\ninst✝ : SizeOf B\nM : Matrix B B Nat\nisSymm : autoParam M.IsSymm _auto✝\ndiagonal : autoParam (∀ (i : B), Eq (M i i) 1) _auto✝\noff_diagonal : autoParam (∀ (i i' : B), Ne i i' → Ne (M i i') 1) _auto✝\n⊢ Eq (SizeOf.sizeOf { M := M, isSymm := isSymm, diagonal := diagonal, off_diagonal := off_diagonal }) (HAdd.hAdd 1 (SizeOf.sizeOf isSymm))","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.ext","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nx y : CoxeterMatrix B\nM : Eq x.M y.M\n⊢ Eq x y","decl":"/-- A *Coxeter matrix* is a symmetric matrix of natural numbers whose diagonal entries are equal to\n1 and whose off-diagonal entries are not equal to 1. -/\n@[ext]\nstructure CoxeterMatrix (B : Type*) where\n  /-- The underlying matrix of the Coxeter matrix. -/\n  M : Matrix B B ℕ\n  isSymm : M.IsSymm := by decide\n  diagonal i : M i i = 1 := by decide\n  off_diagonal i i' : i ≠ i' → M i i' ≠ 1 := by decide\n\n"}
{"name":"CoxeterMatrix.symmetric","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nM : CoxeterMatrix B\ni i' : B\n⊢ Eq (M.M i i') (M.M i' i)","decl":"theorem symmetric (i i' : B) : M i i' = M i' i := M.isSymm.apply i' i\n\n"}
{"name":"CoxeterMatrix.reindex_apply","module":"Mathlib.GroupTheory.Coxeter.Matrix","initialProofState":"B : Type u_1\nB' : Type u_2\ne : Equiv B B'\nM : CoxeterMatrix B\ni i' : B'\n⊢ Eq ((CoxeterMatrix.reindex e M).M i i') (M.M (e.symm i) (e.symm i'))","decl":"theorem reindex_apply (i i' : B') : M.reindex e i i' = M (e.symm i) (e.symm i') := rfl\n\n"}
