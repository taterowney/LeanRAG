{"name":"AddOpposite.instIsScalarTower","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass M N (AddOpposite α)","decl":"@[to_additive]\ninstance instIsScalarTower [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M N αᵐᵒᵖ where\n  smul_assoc _ _ _ := unop_injective <| smul_assoc _ _ _\n\n"}
{"name":"MulOpposite.instIsScalarTower","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M N (MulOpposite α)","decl":"@[to_additive]\ninstance instIsScalarTower [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower M N αᵐᵒᵖ where\n  smul_assoc _ _ _ := unop_injective <| smul_assoc _ _ _\n\n"}
{"name":"AddOpposite.instVAddCommClass","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M N (AddOpposite α)","decl":"@[to_additive]\ninstance instSMulCommClass [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M N αᵐᵒᵖ where\n  smul_comm _ _ _ := unop_injective <| smul_comm _ _ _\n\n"}
{"name":"MulOpposite.instSMulCommClass","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nN : Type u_2\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M N (MulOpposite α)","decl":"@[to_additive]\ninstance instSMulCommClass [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M N αᵐᵒᵖ where\n  smul_comm _ _ _ := unop_injective <| smul_comm _ _ _\n\n"}
{"name":"AddOpposite.instIsCentralVAdd","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd (AddOpposite M) α\ninst✝ : IsCentralVAdd M α\n⊢ IsCentralVAdd M (AddOpposite α)","decl":"@[to_additive]\ninstance instIsCentralScalar [SMul M α] [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] :\n    IsCentralScalar M αᵐᵒᵖ where\n  op_smul_eq_smul _ _ := unop_injective <| op_smul_eq_smul _ _\n\n"}
{"name":"MulOpposite.instIsCentralScalar","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul (MulOpposite M) α\ninst✝ : IsCentralScalar M α\n⊢ IsCentralScalar M (MulOpposite α)","decl":"@[to_additive]\ninstance instIsCentralScalar [SMul M α] [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] :\n    IsCentralScalar M αᵐᵒᵖ where\n  op_smul_eq_smul _ _ := unop_injective <| op_smul_eq_smul _ _\n\n"}
{"name":"AddOpposite.op_vadd_eq_op_vadd_op","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd (AddOpposite M) α\ninst✝ : IsCentralVAdd M α\nr : M\na : α\n⊢ Eq (AddOpposite.op (HVAdd.hVAdd r a)) (HVAdd.hVAdd (AddOpposite.op r) (AddOpposite.op a))","decl":"@[to_additive]\nlemma op_smul_eq_op_smul_op [SMul M α] [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] (r : M) (a : α) :\n    op (r • a) = op r • op a := (op_smul_eq_smul r (op a)).symm\n\n"}
{"name":"MulOpposite.op_smul_eq_op_smul_op","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul (MulOpposite M) α\ninst✝ : IsCentralScalar M α\nr : M\na : α\n⊢ Eq (MulOpposite.op (HSMul.hSMul r a)) (HSMul.hSMul (MulOpposite.op r) (MulOpposite.op a))","decl":"@[to_additive]\nlemma op_smul_eq_op_smul_op [SMul M α] [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] (r : M) (a : α) :\n    op (r • a) = op r • op a := (op_smul_eq_smul r (op a)).symm\n\n"}
{"name":"AddOpposite.unop_vadd_eq_unop_vadd_unop","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : VAdd M α\ninst✝¹ : VAdd (AddOpposite M) α\ninst✝ : IsCentralVAdd M α\nr : AddOpposite M\na : AddOpposite α\n⊢ Eq (AddOpposite.unop (HVAdd.hVAdd r a)) (HVAdd.hVAdd (AddOpposite.unop r) (AddOpposite.unop a))","decl":"@[to_additive]\nlemma unop_smul_eq_unop_smul_unop [SMul M α] [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] (r : Mᵐᵒᵖ)\n    (a : αᵐᵒᵖ) : unop (r • a) = unop r • unop a := (unop_smul_eq_smul r (unop a)).symm\n\n"}
{"name":"MulOpposite.unop_smul_eq_unop_smul_unop","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_1\nα : Type u_3\ninst✝² : SMul M α\ninst✝¹ : SMul (MulOpposite M) α\ninst✝ : IsCentralScalar M α\nr : MulOpposite M\na : MulOpposite α\n⊢ Eq (MulOpposite.unop (HSMul.hSMul r a)) (HSMul.hSMul (MulOpposite.unop r) (MulOpposite.unop a))","decl":"@[to_additive]\nlemma unop_smul_eq_unop_smul_unop [SMul M α] [SMul Mᵐᵒᵖ α] [IsCentralScalar M α] (r : Mᵐᵒᵖ)\n    (a : αᵐᵒᵖ) : unop (r • a) = unop r • unop a := (unop_smul_eq_smul r (unop a)).symm\n\n"}
{"name":"op_vadd_op_vadd","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : AddMonoid α\ninst✝ : AddAction (AddOpposite α) β\nb : β\na₁ a₂ : α\n⊢ Eq (HVAdd.hVAdd (AddOpposite.op a₂) (HVAdd.hVAdd (AddOpposite.op a₁) b)) (HVAdd.hVAdd (AddOpposite.op (HAdd.hAdd a₁ a₂)) b)","decl":"@[to_additive]\nlemma op_smul_op_smul (b : β) (a₁ a₂ : α) : b <• a₁ <• a₂ = b <• (a₁ * a₂) := smul_smul _ _ _\n\n"}
{"name":"op_smul_op_smul","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Monoid α\ninst✝ : MulAction (MulOpposite α) β\nb : β\na₁ a₂ : α\n⊢ Eq (HSMul.hSMul (MulOpposite.op a₂) (HSMul.hSMul (MulOpposite.op a₁) b)) (HSMul.hSMul (MulOpposite.op (HMul.hMul a₁ a₂)) b)","decl":"@[to_additive]\nlemma op_smul_op_smul (b : β) (a₁ a₂ : α) : b <• a₁ <• a₂ = b <• (a₁ * a₂) := smul_smul _ _ _\n\n"}
{"name":"op_vadd_add","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : AddMonoid α\ninst✝ : AddAction (AddOpposite α) β\nb : β\na₁ a₂ : α\n⊢ Eq (HVAdd.hVAdd (AddOpposite.op (HAdd.hAdd a₁ a₂)) b) (HVAdd.hVAdd (AddOpposite.op a₂) (HVAdd.hVAdd (AddOpposite.op a₁) b))","decl":"@[to_additive]\nlemma op_smul_mul (b : β) (a₁ a₂ : α) : b <• (a₁ * a₂) = b <• a₁ <• a₂ := mul_smul _ _ _\n\n"}
{"name":"op_smul_mul","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : Monoid α\ninst✝ : MulAction (MulOpposite α) β\nb : β\na₁ a₂ : α\n⊢ Eq (HSMul.hSMul (MulOpposite.op (HMul.hMul a₁ a₂)) b) (HSMul.hSMul (MulOpposite.op a₂) (HSMul.hSMul (MulOpposite.op a₁) b))","decl":"@[to_additive]\nlemma op_smul_mul (b : β) (a₁ a₂ : α) : b <• (a₁ * a₂) = b <• a₁ <• a₂ := mul_smul _ _ _\n\n"}
{"name":"op_smul_eq_mul","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : Mul α\na a' : α\n⊢ Eq (HSMul.hSMul (MulOpposite.op a) a') (HMul.hMul a' a)","decl":"@[to_additive] lemma op_smul_eq_mul [Mul α] {a a' : α} : op a • a' = a' * a := rfl\n\n"}
{"name":"op_vadd_eq_add","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : Add α\na a' : α\n⊢ Eq (HVAdd.hVAdd (AddOpposite.op a) a') (HAdd.hAdd a' a)","decl":"@[to_additive] lemma op_smul_eq_mul [Mul α] {a a' : α} : op a • a' = a' * a := rfl\n\n"}
{"name":"AddOpposite.vadd_eq_add_unop","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : Add α\na : AddOpposite α\na' : α\n⊢ Eq (HVAdd.hVAdd a a') (HAdd.hAdd a' (AddOpposite.unop a))","decl":"@[to_additive (attr := simp)]\nlemma MulOpposite.smul_eq_mul_unop [Mul α] {a : αᵐᵒᵖ} {a' : α} : a • a' = a' * a.unop := rfl\n\n"}
{"name":"MulOpposite.smul_eq_mul_unop","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : Mul α\na : MulOpposite α\na' : α\n⊢ Eq (HSMul.hSMul a a') (HMul.hMul a' (MulOpposite.unop a))","decl":"@[to_additive (attr := simp)]\nlemma MulOpposite.smul_eq_mul_unop [Mul α] {a : αᵐᵒᵖ} {a' : α} : a • a' = a' * a.unop := rfl\n\n"}
{"name":"AddAction.OppositeRegular.isPretransitive","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"G : Type u_5\ninst✝ : AddGroup G\n⊢ AddAction.IsPretransitive (AddOpposite G) G","decl":"/-- The right regular action of a group on itself is transitive. -/\n@[to_additive \"The right regular action of an additive group on itself is transitive.\"]\ninstance MulAction.OppositeRegular.isPretransitive {G : Type*} [Group G] : IsPretransitive Gᵐᵒᵖ G :=\n  ⟨fun x y => ⟨op (x⁻¹ * y), mul_inv_cancel_left _ _⟩⟩\n\n"}
{"name":"MulAction.OppositeRegular.isPretransitive","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"G : Type u_5\ninst✝ : Group G\n⊢ MulAction.IsPretransitive (MulOpposite G) G","decl":"/-- The right regular action of a group on itself is transitive. -/\n@[to_additive \"The right regular action of an additive group on itself is transitive.\"]\ninstance MulAction.OppositeRegular.isPretransitive {G : Type*} [Group G] : IsPretransitive Gᵐᵒᵖ G :=\n  ⟨fun x y => ⟨op (x⁻¹ * y), mul_inv_cancel_left _ _⟩⟩\n\n"}
{"name":"Semigroup.opposite_smulCommClass","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : Semigroup α\n⊢ SMulCommClass (MulOpposite α) α α","decl":"@[to_additive]\ninstance Semigroup.opposite_smulCommClass [Semigroup α] : SMulCommClass αᵐᵒᵖ α α where\n  smul_comm _ _ _ := mul_assoc _ _ _\n\n"}
{"name":"AddSemigroup.opposite_vaddCommClass","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : AddSemigroup α\n⊢ VAddCommClass (AddOpposite α) α α","decl":"@[to_additive]\ninstance Semigroup.opposite_smulCommClass [Semigroup α] : SMulCommClass αᵐᵒᵖ α α where\n  smul_comm _ _ _ := mul_assoc _ _ _\n\n"}
{"name":"Semigroup.opposite_smulCommClass'","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : Semigroup α\n⊢ SMulCommClass α (MulOpposite α) α","decl":"@[to_additive]\ninstance Semigroup.opposite_smulCommClass' [Semigroup α] : SMulCommClass α αᵐᵒᵖ α :=\n  SMulCommClass.symm _ _ _\n\n"}
{"name":"AddSemigroup.opposite_vaddCommClass'","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : AddSemigroup α\n⊢ VAddCommClass α (AddOpposite α) α","decl":"@[to_additive]\ninstance Semigroup.opposite_smulCommClass' [Semigroup α] : SMulCommClass α αᵐᵒᵖ α :=\n  SMulCommClass.symm _ _ _\n\n"}
{"name":"AddCommSemigroup.isCentralVAdd","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : AddCommSemigroup α\n⊢ IsCentralVAdd α α","decl":"@[to_additive]\ninstance CommSemigroup.isCentralScalar [CommSemigroup α] : IsCentralScalar α α where\n  op_smul_eq_smul _ _ := mul_comm _ _\n\n"}
{"name":"CommSemigroup.isCentralScalar","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : CommSemigroup α\n⊢ IsCentralScalar α α","decl":"@[to_additive]\ninstance CommSemigroup.isCentralScalar [CommSemigroup α] : IsCentralScalar α α where\n  op_smul_eq_smul _ _ := mul_comm _ _\n\n"}
{"name":"IsScalarTower.opposite_mid","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_5\nN : Type u_6\ninst✝² : Mul N\ninst✝¹ : SMul M N\ninst✝ : SMulCommClass M N N\n⊢ IsScalarTower M (MulOpposite N) N","decl":"@[to_additive]\ninstance IsScalarTower.opposite_mid {M N} [Mul N] [SMul M N] [SMulCommClass M N N] :\n    IsScalarTower M Nᵐᵒᵖ N where\n  smul_assoc _ _ _ := mul_smul_comm _ _ _\n\n"}
{"name":"VAddAssocClass.opposite_mid","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_5\nN : Type u_6\ninst✝² : Add N\ninst✝¹ : VAdd M N\ninst✝ : VAddCommClass M N N\n⊢ VAddAssocClass M (AddOpposite N) N","decl":"@[to_additive]\ninstance IsScalarTower.opposite_mid {M N} [Mul N] [SMul M N] [SMulCommClass M N N] :\n    IsScalarTower M Nᵐᵒᵖ N where\n  smul_assoc _ _ _ := mul_smul_comm _ _ _\n\n"}
{"name":"SMulCommClass.opposite_mid","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_5\nN : Type u_6\ninst✝² : Mul N\ninst✝¹ : SMul M N\ninst✝ : IsScalarTower M N N\n⊢ SMulCommClass M (MulOpposite N) N","decl":"@[to_additive]\ninstance SMulCommClass.opposite_mid {M N} [Mul N] [SMul M N] [IsScalarTower M N N] :\n    SMulCommClass M Nᵐᵒᵖ N where\n  smul_comm x y z := by\n    induction y using MulOpposite.rec'\n    simp only [smul_mul_assoc, MulOpposite.smul_eq_mul_unop]\n\n-- The above instance does not create an unwanted diamond, the two paths to\n-- `MulAction αᵐᵒᵖ αᵐᵒᵖ` are defeq.\n"}
{"name":"VAddCommClass.opposite_mid","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"M : Type u_5\nN : Type u_6\ninst✝² : Add N\ninst✝¹ : VAdd M N\ninst✝ : VAddAssocClass M N N\n⊢ VAddCommClass M (AddOpposite N) N","decl":"@[to_additive]\ninstance SMulCommClass.opposite_mid {M N} [Mul N] [SMul M N] [IsScalarTower M N N] :\n    SMulCommClass M Nᵐᵒᵖ N where\n  smul_comm x y z := by\n    induction y using MulOpposite.rec'\n    simp only [smul_mul_assoc, MulOpposite.smul_eq_mul_unop]\n\n-- The above instance does not create an unwanted diamond, the two paths to\n-- `MulAction αᵐᵒᵖ αᵐᵒᵖ` are defeq.\n"}
{"name":"AddLeftCancelMonoid.toFaithfulVAdd_opposite","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : AddLeftCancelMonoid α\n⊢ FaithfulVAdd (AddOpposite α) α","decl":"/-- `Monoid.toOppositeMulAction` is faithful on cancellative monoids. -/\n@[to_additive \"`AddMonoid.toOppositeAddAction` is faithful on cancellative monoids.\"]\ninstance LeftCancelMonoid.toFaithfulSMul_opposite [LeftCancelMonoid α] :\n    FaithfulSMul αᵐᵒᵖ α where\n  eq_of_smul_eq_smul h := unop_injective <| mul_left_cancel (h 1)\n"}
{"name":"LeftCancelMonoid.toFaithfulSMul_opposite","module":"Mathlib.Algebra.Group.Action.Opposite","initialProofState":"α : Type u_3\ninst✝ : LeftCancelMonoid α\n⊢ FaithfulSMul (MulOpposite α) α","decl":"/-- `Monoid.toOppositeMulAction` is faithful on cancellative monoids. -/\n@[to_additive \"`AddMonoid.toOppositeAddAction` is faithful on cancellative monoids.\"]\ninstance LeftCancelMonoid.toFaithfulSMul_opposite [LeftCancelMonoid α] :\n    FaithfulSMul αᵐᵒᵖ α where\n  eq_of_smul_eq_smul h := unop_injective <| mul_left_cancel (h 1)\n"}
