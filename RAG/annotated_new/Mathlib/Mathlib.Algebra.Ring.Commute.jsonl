{"name":"Commute.add_right","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : Distrib R\na b c : R\na✝¹ : Commute a b\na✝ : Commute a c\n⊢ Commute a (HAdd.hAdd b c)","decl":"@[simp]\ntheorem add_right [Distrib R] {a b c : R} : Commute a b → Commute a c → Commute a (b + c) :=\n  SemiconjBy.add_right\n-- for some reason mathport expected `Semiring` instead of `Distrib`?\n\n"}
{"name":"Commute.add_left","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : Distrib R\na b c : R\na✝¹ : Commute a c\na✝ : Commute b c\n⊢ Commute (HAdd.hAdd a b) c","decl":"@[simp]\ntheorem add_left [Distrib R] {a b c : R} : Commute a c → Commute b c → Commute (a + b) c :=\n  SemiconjBy.add_left\n-- for some reason mathport expected `Semiring` instead of `Distrib`?\n\n"}
{"name":"Commute.mul_self_sub_mul_self_eq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\na b : R\nh : Commute a b\n⊢ Eq (HSub.hSub (HMul.hMul a a) (HMul.hMul b b)) (HMul.hMul (HAdd.hAdd a b) (HSub.hSub a b))","decl":"/-- Representation of a difference of two squares of commuting elements as a product. -/\ntheorem mul_self_sub_mul_self_eq [NonUnitalNonAssocRing R] {a b : R} (h : Commute a b) :\n    a * a - b * b = (a + b) * (a - b) := by\n  rw [add_mul, mul_sub, mul_sub, h.eq, sub_add_sub_cancel]\n\n"}
{"name":"Commute.mul_self_sub_mul_self_eq'","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\na b : R\nh : Commute a b\n⊢ Eq (HSub.hSub (HMul.hMul a a) (HMul.hMul b b)) (HMul.hMul (HSub.hSub a b) (HAdd.hAdd a b))","decl":"theorem mul_self_sub_mul_self_eq' [NonUnitalNonAssocRing R] {a b : R} (h : Commute a b) :\n    a * a - b * b = (a - b) * (a + b) := by\n  rw [mul_add, sub_mul, sub_mul, h.eq, sub_add_sub_cancel]\n\n"}
{"name":"Commute.mul_self_eq_mul_self_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NoZeroDivisors R\na b : R\nh : Commute a b\n⊢ Iff (Eq (HMul.hMul a a) (HMul.hMul b b)) (Or (Eq a b) (Eq a (Neg.neg b)))","decl":"theorem mul_self_eq_mul_self_iff [NonUnitalNonAssocRing R] [NoZeroDivisors R] {a b : R}\n    (h : Commute a b) : a * a = b * b ↔ a = b ∨ a = -b := by\n  rw [← sub_eq_zero, h.mul_self_sub_mul_self_eq, mul_eq_zero, or_comm, sub_eq_zero,\n    add_eq_zero_iff_eq_neg]\n\n"}
{"name":"Commute.neg_right","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na b : R\na✝ : Commute a b\n⊢ Commute a (Neg.neg b)","decl":"theorem neg_right : Commute a b → Commute a (-b) :=\n  SemiconjBy.neg_right\n\n"}
{"name":"Commute.neg_right_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na b : R\n⊢ Iff (Commute a (Neg.neg b)) (Commute a b)","decl":"@[simp]\ntheorem neg_right_iff : Commute a (-b) ↔ Commute a b :=\n  SemiconjBy.neg_right_iff\n\n"}
{"name":"Commute.neg_left","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na b : R\na✝ : Commute a b\n⊢ Commute (Neg.neg a) b","decl":"theorem neg_left : Commute a b → Commute (-a) b :=\n  SemiconjBy.neg_left\n\n"}
{"name":"Commute.neg_left_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Mul R\ninst✝ : HasDistribNeg R\na b : R\n⊢ Iff (Commute (Neg.neg a) b) (Commute a b)","decl":"@[simp]\ntheorem neg_left_iff : Commute (-a) b ↔ Commute a b :=\n  SemiconjBy.neg_left_iff\n\n"}
{"name":"Commute.neg_one_right","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : MulOneClass R\ninst✝ : HasDistribNeg R\na : R\n⊢ Commute a (-1)","decl":"theorem neg_one_right (a : R) : Commute a (-1) :=\n  SemiconjBy.neg_one_right a\n\n"}
{"name":"Commute.neg_one_left","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : MulOneClass R\ninst✝ : HasDistribNeg R\na : R\n⊢ Commute (-1) a","decl":"theorem neg_one_left (a : R) : Commute (-1) a :=\n  SemiconjBy.neg_one_left a\n\n"}
{"name":"Commute.sub_right","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\na b c : R\na✝¹ : Commute a b\na✝ : Commute a c\n⊢ Commute a (HSub.hSub b c)","decl":"@[simp]\ntheorem sub_right : Commute a b → Commute a c → Commute a (b - c) :=\n  SemiconjBy.sub_right\n\n"}
{"name":"Commute.sub_left","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\na b c : R\na✝¹ : Commute a c\na✝ : Commute b c\n⊢ Commute (HSub.hSub a b) c","decl":"@[simp]\ntheorem sub_left : Commute a c → Commute b c → Commute (a - b) c :=\n  SemiconjBy.sub_left\n\n"}
{"name":"Commute.sq_sub_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : Ring R\na b : R\nh : Commute a b\n⊢ Eq (HSub.hSub (HPow.hPow a 2) (HPow.hPow b 2)) (HMul.hMul (HAdd.hAdd a b) (HSub.hSub a b))","decl":"protected lemma sq_sub_sq (h : Commute a b) : a ^ 2 - b ^ 2 = (a + b) * (a - b) := by\n  rw [sq, sq, h.mul_self_sub_mul_self_eq]\n\n"}
{"name":"Commute.sq_eq_sq_iff_eq_or_eq_neg","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Ring R\na b : R\ninst✝ : NoZeroDivisors R\nh : Commute a b\n⊢ Iff (Eq (HPow.hPow a 2) (HPow.hPow b 2)) (Or (Eq a b) (Eq a (Neg.neg b)))","decl":"protected lemma sq_eq_sq_iff_eq_or_eq_neg (h : Commute a b) : a ^ 2 = b ^ 2 ↔ a = b ∨ a = -b := by\n  rw [← sub_eq_zero, h.sq_sub_sq, mul_eq_zero, add_eq_zero_iff_eq_neg, sub_eq_zero, or_comm]\n\n"}
{"name":"neg_one_pow_eq_or","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\nn : Nat\n⊢ Or (Eq (HPow.hPow (-1) n) 1) (Eq (HPow.hPow (-1) n) (-1))","decl":"lemma neg_one_pow_eq_or : ∀ n : ℕ, (-1 : R) ^ n = 1 ∨ (-1 : R) ^ n = -1\n  | 0 => Or.inl (pow_zero _)\n  | n + 1 => (neg_one_pow_eq_or n).symm.imp\n    (fun h ↦ by rw [pow_succ, h, neg_one_mul, neg_neg])\n    (fun h ↦ by rw [pow_succ, h, one_mul])\n\n"}
{"name":"neg_pow","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\na : R\nn : Nat\n⊢ Eq (HPow.hPow (Neg.neg a) n) (HMul.hMul (HPow.hPow (-1) n) (HPow.hPow a n))","decl":"lemma neg_pow (a : R) (n : ℕ) : (-a) ^ n = (-1) ^ n * a ^ n :=\n  neg_one_mul a ▸ (Commute.neg_one_left a).mul_pow n\n\n"}
{"name":"neg_pow'","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\na : R\nn : Nat\n⊢ Eq (HPow.hPow (Neg.neg a) n) (HMul.hMul (HPow.hPow a n) (HPow.hPow (-1) n))","decl":"lemma neg_pow' (a : R) (n : ℕ) : (-a) ^ n = a ^ n * (-1) ^ n :=\n  mul_neg_one a ▸ (Commute.neg_one_right a).mul_pow n\n\n"}
{"name":"neg_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\na : R\n⊢ Eq (HPow.hPow (Neg.neg a) 2) (HPow.hPow a 2)","decl":"lemma neg_sq (a : R) : (-a) ^ 2 = a ^ 2 := by simp [sq]\n\n"}
{"name":"neg_one_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\n⊢ Eq (HPow.hPow (-1) 2) 1","decl":"lemma neg_one_sq : (-1 : R) ^ 2 = 1 := by simp [neg_sq, one_pow]\n\n"}
{"name":"neg_pow_two","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\na : R\n⊢ Eq (HPow.hPow (Neg.neg a) 2) (HPow.hPow a 2)","decl":"alias neg_pow_two := neg_sq\n\n"}
{"name":"neg_one_pow_two","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : HasDistribNeg R\n⊢ Eq (HPow.hPow (-1) 2) 1","decl":"alias neg_one_pow_two := neg_one_sq\n\n"}
{"name":"neg_one_pow_mul_eq_zero_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : Ring R\na : R\nn : Nat\n⊢ Iff (Eq (HMul.hMul (HPow.hPow (-1) n) a) 0) (Eq a 0)","decl":"@[simp] lemma neg_one_pow_mul_eq_zero_iff : (-1) ^ n * a = 0 ↔ a = 0 := by\n  rcases neg_one_pow_eq_or R n with h | h <;> simp [h]\n\n"}
{"name":"mul_neg_one_pow_eq_zero_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : Ring R\na : R\nn : Nat\n⊢ Iff (Eq (HMul.hMul a (HPow.hPow (-1) n)) 0) (Eq a 0)","decl":"@[simp] lemma mul_neg_one_pow_eq_zero_iff : a * (-1) ^ n = 0 ↔ a = 0 := by\n  obtain h | h := neg_one_pow_eq_or R n <;> simp [h]\n\n"}
{"name":"neg_one_pow_eq_pow_mod_two","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : Ring R\nn : Nat\n⊢ Eq (HPow.hPow (-1) n) (HPow.hPow (-1) (HMod.hMod n 2))","decl":"lemma neg_one_pow_eq_pow_mod_two (n : ℕ) : (-1 : R) ^ n = (-1) ^ (n % 2) := by\n  rw [← Nat.mod_add_div n 2, pow_add, pow_mul]; simp [sq]\n\n"}
{"name":"sq_eq_one_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Ring R\na : R\ninst✝ : NoZeroDivisors R\n⊢ Iff (Eq (HPow.hPow a 2) 1) (Or (Eq a 1) (Eq a (-1)))","decl":"@[simp] lemma sq_eq_one_iff : a ^ 2 = 1 ↔ a = 1 ∨ a = -1 := by\n  rw [← (Commute.one_right a).sq_eq_sq_iff_eq_or_eq_neg, one_pow]\n\n"}
{"name":"sq_ne_one_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Ring R\na : R\ninst✝ : NoZeroDivisors R\n⊢ Iff (Ne (HPow.hPow a 2) 1) (And (Ne a 1) (Ne a (-1)))","decl":"lemma sq_ne_one_iff : a ^ 2 ≠ 1 ↔ a ≠ 1 ∧ a ≠ -1 := sq_eq_one_iff.not.trans not_or\n\n"}
{"name":"mul_self_sub_mul_self","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : CommRing R\na b : R\n⊢ Eq (HSub.hSub (HMul.hMul a a) (HMul.hMul b b)) (HMul.hMul (HAdd.hAdd a b) (HSub.hSub a b))","decl":"/-- Representation of a difference of two squares in a commutative ring as a product. -/\ntheorem mul_self_sub_mul_self [CommRing R] (a b : R) : a * a - b * b = (a + b) * (a - b) :=\n  (Commute.all a b).mul_self_sub_mul_self_eq\n\n"}
{"name":"mul_self_sub_one","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonAssocRing R\na : R\n⊢ Eq (HSub.hSub (HMul.hMul a a) 1) (HMul.hMul (HAdd.hAdd a 1) (HSub.hSub a 1))","decl":"theorem mul_self_sub_one [NonAssocRing R] (a : R) : a * a - 1 = (a + 1) * (a - 1) := by\n  rw [← (Commute.one_right a).mul_self_sub_mul_self_eq, mul_one]\n\n"}
{"name":"mul_self_eq_mul_self_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : R\n⊢ Iff (Eq (HMul.hMul a a) (HMul.hMul b b)) (Or (Eq a b) (Eq a (Neg.neg b)))","decl":"theorem mul_self_eq_mul_self_iff [CommRing R] [NoZeroDivisors R] {a b : R} :\n    a * a = b * b ↔ a = b ∨ a = -b :=\n  (Commute.all a b).mul_self_eq_mul_self_iff\n\n"}
{"name":"mul_self_eq_one_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : NonAssocRing R\ninst✝ : NoZeroDivisors R\na : R\n⊢ Iff (Eq (HMul.hMul a a) 1) (Or (Eq a 1) (Eq a (-1)))","decl":"theorem mul_self_eq_one_iff [NonAssocRing R] [NoZeroDivisors R] {a : R} :\n    a * a = 1 ↔ a = 1 ∨ a = -1 := by\n  rw [← (Commute.one_right a).mul_self_eq_mul_self_iff, mul_one]\n\n"}
{"name":"sq_sub_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : CommRing R\na b : R\n⊢ Eq (HSub.hSub (HPow.hPow a 2) (HPow.hPow b 2)) (HMul.hMul (HAdd.hAdd a b) (HSub.hSub a b))","decl":"lemma sq_sub_sq (a b : R) : a ^ 2 - b ^ 2 = (a + b) * (a - b) := (Commute.all a b).sq_sub_sq\n\n"}
{"name":"pow_two_sub_pow_two","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : CommRing R\na b : R\n⊢ Eq (HSub.hSub (HPow.hPow a 2) (HPow.hPow b 2)) (HMul.hMul (HAdd.hAdd a b) (HSub.hSub a b))","decl":"alias pow_two_sub_pow_two := sq_sub_sq\n\n"}
{"name":"sub_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : CommRing R\na b : R\n⊢ Eq (HPow.hPow (HSub.hSub a b) 2) (HAdd.hAdd (HSub.hSub (HPow.hPow a 2) (HMul.hMul (HMul.hMul 2 a) b)) (HPow.hPow b 2))","decl":"lemma sub_sq (a b : R) : (a - b) ^ 2 = a ^ 2 - 2 * a * b + b ^ 2 := by\n  rw [sub_eq_add_neg, add_sq, neg_sq, mul_neg, ← sub_eq_add_neg]\n\n"}
{"name":"sub_pow_two","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : CommRing R\na b : R\n⊢ Eq (HPow.hPow (HSub.hSub a b) 2) (HAdd.hAdd (HSub.hSub (HPow.hPow a 2) (HMul.hMul (HMul.hMul 2 a) b)) (HPow.hPow b 2))","decl":"alias sub_pow_two := sub_sq\n\n"}
{"name":"sub_sq'","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : CommRing R\na b : R\n⊢ Eq (HPow.hPow (HSub.hSub a b) 2) (HSub.hSub (HAdd.hAdd (HPow.hPow a 2) (HPow.hPow b 2)) (HMul.hMul (HMul.hMul 2 a) b))","decl":"lemma sub_sq' (a b : R) : (a - b) ^ 2 = a ^ 2 + b ^ 2 - 2 * a * b := by\n  rw [sub_eq_add_neg, add_sq', neg_sq, mul_neg, ← sub_eq_add_neg]\n\n"}
{"name":"sq_eq_sq_iff_eq_or_eq_neg","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : R\n⊢ Iff (Eq (HPow.hPow a 2) (HPow.hPow b 2)) (Or (Eq a b) (Eq a (Neg.neg b)))","decl":"lemma sq_eq_sq_iff_eq_or_eq_neg : a ^ 2 = b ^ 2 ↔ a = b ∨ a = -b :=\n  (Commute.all a b).sq_eq_sq_iff_eq_or_eq_neg\n\n"}
{"name":"eq_or_eq_neg_of_sq_eq_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : R\na✝ : Eq (HPow.hPow a 2) (HPow.hPow b 2)\n⊢ Or (Eq a b) (Eq a (Neg.neg b))","decl":"lemma eq_or_eq_neg_of_sq_eq_sq (a b : R) : a ^ 2 = b ^ 2 → a = b ∨ a = -b :=\n  sq_eq_sq_iff_eq_or_eq_neg.1\n\n-- Copies of the above CommRing lemmas for `Units R`.\n"}
{"name":"Units.sq_eq_sq_iff_eq_or_eq_neg","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : Units R\n⊢ Iff (Eq (HPow.hPow a 2) (HPow.hPow b 2)) (Or (Eq a b) (Eq a (Neg.neg b)))","decl":"protected lemma sq_eq_sq_iff_eq_or_eq_neg {a b : Rˣ} : a ^ 2 = b ^ 2 ↔ a = b ∨ a = -b := by\n  simp_rw [Units.ext_iff, val_pow_eq_pow_val, sq_eq_sq_iff_eq_or_eq_neg, Units.val_neg]\n\n"}
{"name":"Units.eq_or_eq_neg_of_sq_eq_sq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : NoZeroDivisors R\na b : Units R\nh : Eq (HPow.hPow a 2) (HPow.hPow b 2)\n⊢ Or (Eq a b) (Eq a (Neg.neg b))","decl":"protected lemma eq_or_eq_neg_of_sq_eq_sq (a b : Rˣ) (h : a ^ 2 = b ^ 2) : a = b ∨ a = -b :=\n  Units.sq_eq_sq_iff_eq_or_eq_neg.1 h\n\n"}
{"name":"Units.inv_eq_self_iff","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : NoZeroDivisors R\nu : Units R\n⊢ Iff (Eq (Inv.inv u) u) (Or (Eq u 1) (Eq u (-1)))","decl":"/-- In the unit group of an integral domain, a unit is its own inverse iff the unit is one or\n  one's additive inverse. -/\ntheorem inv_eq_self_iff [Ring R] [NoZeroDivisors R] (u : Rˣ) : u⁻¹ = u ↔ u = 1 ∨ u = -1 := by\n  rw [inv_eq_iff_mul_eq_one]\n  simp only [Units.ext_iff]\n  push_cast\n  exact mul_self_eq_one_iff\n\n"}
{"name":"Ring.lie_def","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx y : R\n⊢ Eq (Bracket.bracket x y) (HSub.hSub (HMul.hMul x y) (HMul.hMul y x))","decl":"theorem lie_def (x y : R) : ⁅x, y⁆ = x * y - y * x := rfl\n\n"}
{"name":"commute_iff_lie_eq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx y : R\n⊢ Iff (Commute x y) (Eq (Bracket.bracket x y) 0)","decl":"theorem commute_iff_lie_eq {x y : R} : Commute x y ↔ ⁅x, y⁆ = 0 := sub_eq_zero.symm\n\n"}
{"name":"Commute.lie_eq","module":"Mathlib.Algebra.Ring.Commute","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx y : R\nh : Commute x y\n⊢ Eq (Bracket.bracket x y) 0","decl":"theorem Commute.lie_eq {x y : R} (h : Commute x y) : ⁅x, y⁆ = 0 := sub_eq_zero_of_eq h\n\n"}
