{"name":"Subalgebra.rank_sup_le_of_free","module":"Mathlib.RingTheory.Adjoin.Dimension","initialProofState":"R : Type u\nS : Type v\ninst✝⁵ : CommRing R\ninst✝⁴ : StrongRankCondition R\ninst✝³ : CommRing S\ninst✝² : Algebra R S\nA B : Subalgebra R S\ninst✝¹ : Module.Free R (Subtype fun x => Membership.mem A x)\ninst✝ : Module.Free R (Subtype fun x => Membership.mem B x)\n⊢ LE.le (Module.rank R (Subtype fun x => Membership.mem (Max.max A B) x)) (HMul.hMul (Module.rank R (Subtype fun x => Membership.mem A x)) (Module.rank R (Subtype fun x => Membership.mem B x)))","decl":"/-- If `A` and `B` are subalgebras of a commutative `R`-algebra `S`, both of them are\nfree `R`-algebras, then the rank of the rank of the subalgebra generated by `A` and `B`\nover `R` is less than or equal to the product of that of `A` and `B`. -/\ntheorem rank_sup_le_of_free : Module.rank R ↥(A ⊔ B) ≤ Module.rank R A * Module.rank R B := by\n  obtain ⟨ιA, bA⟩ := Free.exists_basis (R := R) (M := A)\n  obtain ⟨ιB, bB⟩ := Free.exists_basis (R := R) (M := B)\n  have h := Algebra.adjoin_union_coe_submodule R (A : Set S) (B : Set S)\n  rw [A.adjoin_eq_span_basis R bA, B.adjoin_eq_span_basis R bB, ← Algebra.sup_def,\n    Submodule.span_mul_span] at h\n  change Module.rank R ↥(toSubmodule (A ⊔ B)) ≤ _\n  rw [h, ← bA.mk_eq_rank'', ← bB.mk_eq_rank'']\n  refine (rank_span_le _).trans Cardinal.mk_mul_le |>.trans ?_\n  gcongr <;> exact Cardinal.mk_range_le\n\n"}
{"name":"Subalgebra.finrank_sup_le_of_free","module":"Mathlib.RingTheory.Adjoin.Dimension","initialProofState":"R : Type u\nS : Type v\ninst✝⁵ : CommRing R\ninst✝⁴ : StrongRankCondition R\ninst✝³ : CommRing S\ninst✝² : Algebra R S\nA B : Subalgebra R S\ninst✝¹ : Module.Free R (Subtype fun x => Membership.mem A x)\ninst✝ : Module.Free R (Subtype fun x => Membership.mem B x)\n⊢ LE.le (Module.finrank R (Subtype fun x => Membership.mem (Max.max A B) x)) (HMul.hMul (Module.finrank R (Subtype fun x => Membership.mem A x)) (Module.finrank R (Subtype fun x => Membership.mem B x)))","decl":"/-- If `A` and `B` are subalgebras of a commutative `R`-algebra `S`, both of them are\nfree `R`-algebras, then the `Module.finrank` of the rank of the subalgebra generated by `A` and `B`\nover `R` is less than or equal to the product of that of `A` and `B`. -/\ntheorem finrank_sup_le_of_free : finrank R ↥(A ⊔ B) ≤ finrank R A * finrank R B := by\n  by_cases h : Module.Finite R A ∧ Module.Finite R B\n  · obtain ⟨_, _⟩ := h\n    simpa only [map_mul] using Cardinal.toNat_le_toNat (A.rank_sup_le_of_free B)\n      (Cardinal.mul_lt_aleph0 (rank_lt_aleph0 R A) (rank_lt_aleph0 R B))\n  wlog hA : ¬ Module.Finite R A generalizing A B\n  · have := this B A (fun h' ↦ h h'.symm) (not_and.1 h (of_not_not hA))\n    rwa [sup_comm, mul_comm] at this\n  rw [← rank_lt_aleph0_iff, not_lt] at hA\n  have := LinearMap.rank_le_of_injective _ <| Submodule.inclusion_injective <|\n    show toSubmodule A ≤ toSubmodule (A ⊔ B) by simp\n  rw [show finrank R A = 0 from Cardinal.toNat_apply_of_aleph0_le hA,\n    show finrank R ↥(A ⊔ B) = 0 from Cardinal.toNat_apply_of_aleph0_le (hA.trans this), zero_mul]\n\n"}
