{"name":"StarSubsemiring.mk.injEq","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : Star R\ntoSubsemiring✝ : Subsemiring R\nstar_mem'✝ : ∀ {a : R}, Membership.mem toSubsemiring✝.carrier a → Membership.mem toSubsemiring✝.carrier (Star.star a)\ntoSubsemiring : Subsemiring R\nstar_mem' : ∀ {a : R}, Membership.mem toSubsemiring.carrier a → Membership.mem toSubsemiring.carrier (Star.star a)\n⊢ Eq (Eq { toSubsemiring := toSubsemiring✝, star_mem' := star_mem'✝ } { toSubsemiring := toSubsemiring, star_mem' := star_mem' }) (Eq toSubsemiring✝ toSubsemiring)","decl":"/-- A (unital) star subsemiring is a non-associative ring which is closed under the `star`\noperation. -/\nstructure StarSubsemiring (R : Type v) [NonAssocSemiring R] [Star R]\n    extends Subsemiring R : Type v where\n  /-- The `carrier` of a `StarSubsemiring` is closed under the `star` operation. -/\n  star_mem' {a} : a ∈ carrier → star a ∈ carrier\n\n"}
{"name":"StarSubsemiring.mk.inj","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : Star R\ntoSubsemiring✝ : Subsemiring R\nstar_mem'✝ : ∀ {a : R}, Membership.mem toSubsemiring✝.carrier a → Membership.mem toSubsemiring✝.carrier (Star.star a)\ntoSubsemiring : Subsemiring R\nstar_mem' : ∀ {a : R}, Membership.mem toSubsemiring.carrier a → Membership.mem toSubsemiring.carrier (Star.star a)\nx✝ : Eq { toSubsemiring := toSubsemiring✝, star_mem' := star_mem'✝ } { toSubsemiring := toSubsemiring, star_mem' := star_mem' }\n⊢ Eq toSubsemiring✝ toSubsemiring","decl":"/-- A (unital) star subsemiring is a non-associative ring which is closed under the `star`\noperation. -/\nstructure StarSubsemiring (R : Type v) [NonAssocSemiring R] [Star R]\n    extends Subsemiring R : Type v where\n  /-- The `carrier` of a `StarSubsemiring` is closed under the `star` operation. -/\n  star_mem' {a} : a ∈ carrier → star a ∈ carrier\n\n"}
{"name":"StarSubsemiring.star_mem'","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : Star R\nself : StarSubsemiring R\na : R\na✝ : Membership.mem self.carrier a\n⊢ Membership.mem self.carrier (Star.star a)","decl":"/-- A (unital) star subsemiring is a non-associative ring which is closed under the `star`\noperation. -/\nstructure StarSubsemiring (R : Type v) [NonAssocSemiring R] [Star R]\n    extends Subsemiring R : Type v where\n  /-- The `carrier` of a `StarSubsemiring` is closed under the `star` operation. -/\n  star_mem' {a} : a ∈ carrier → star a ∈ carrier\n\n"}
{"name":"StarSubsemiring.mk.sizeOf_spec","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝² : NonAssocSemiring R\ninst✝¹ : Star R\ninst✝ : SizeOf R\ntoSubsemiring : Subsemiring R\nstar_mem' : ∀ {a : R}, Membership.mem toSubsemiring.carrier a → Membership.mem toSubsemiring.carrier (Star.star a)\n⊢ Eq (SizeOf.sizeOf { toSubsemiring := toSubsemiring, star_mem' := star_mem' }) (HAdd.hAdd 1 (SizeOf.sizeOf toSubsemiring))","decl":"/-- A (unital) star subsemiring is a non-associative ring which is closed under the `star`\noperation. -/\nstructure StarSubsemiring (R : Type v) [NonAssocSemiring R] [Star R]\n    extends Subsemiring R : Type v where\n  /-- The `carrier` of a `StarSubsemiring` is closed under the `star` operation. -/\n  star_mem' {a} : a ∈ carrier → star a ∈ carrier\n\n"}
{"name":"StarSubsemiring.starMemClass","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\n⊢ StarMemClass (StarSubsemiring R) R","decl":"instance starMemClass : StarMemClass (StarSubsemiring R) R where\n  star_mem {s} := s.star_mem'\n\n"}
{"name":"StarSubsemiring.subsemiringClass","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\n⊢ SubsemiringClass (StarSubsemiring R) R","decl":"instance subsemiringClass : SubsemiringClass (StarSubsemiring R) R where\n  add_mem {s} := s.add_mem'\n  mul_mem {s} := s.mul_mem'\n  zero_mem {s} := s.zero_mem'\n  one_mem {s} := s.one_mem'\n\n-- this uses the `Star` instance `s` inherits from `StarMemClass (StarSubsemiring R A) A`\n"}
{"name":"StarSubsemiring.mem_carrier","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\ns : StarSubsemiring R\nx : R\n⊢ Iff (Membership.mem s.carrier x) (Membership.mem s x)","decl":"theorem mem_carrier {s : StarSubsemiring R} {x : R} : x ∈ s.carrier ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"StarSubsemiring.ext","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS T : StarSubsemiring R\nh : ∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"@[ext]\ntheorem ext {S T : StarSubsemiring R} (h : ∀ x : R, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"StarSubsemiring.ext_iff","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS T : StarSubsemiring R\n⊢ Iff (Eq S T) (∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x))","decl":"@[ext]\ntheorem ext {S T : StarSubsemiring R} (h : ∀ x : R, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"StarSubsemiring.coe_mk","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS : Subsemiring R\nh : ∀ {a : R}, Membership.mem S.carrier a → Membership.mem S.carrier (Star.star a)\n⊢ Eq ↑{ toSubsemiring := S, star_mem' := h } ↑S","decl":"@[simp]\nlemma coe_mk (S : Subsemiring R) (h) : ((⟨S, h⟩ : StarSubsemiring R) : Set R) = S := rfl\n\n"}
{"name":"StarSubsemiring.mem_toSubsemiring","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS : StarSubsemiring R\nx : R\n⊢ Iff (Membership.mem S.toSubsemiring x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_toSubsemiring {S : StarSubsemiring R} {x} : x ∈ S.toSubsemiring ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"StarSubsemiring.coe_toSubsemiring","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS : StarSubsemiring R\n⊢ Eq ↑S.toSubsemiring ↑S","decl":"@[simp]\ntheorem coe_toSubsemiring (S : StarSubsemiring R) : (S.toSubsemiring : Set R) = S :=\n  rfl\n\n"}
{"name":"StarSubsemiring.toSubsemiring_injective","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\n⊢ Function.Injective StarSubsemiring.toSubsemiring","decl":"theorem toSubsemiring_injective :\n    Function.Injective (toSubsemiring : StarSubsemiring R → Subsemiring R) := fun S T h =>\n  ext fun x => by rw [← mem_toSubsemiring, ← mem_toSubsemiring, h]\n\n"}
{"name":"StarSubsemiring.toSubsemiring_inj","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS U : StarSubsemiring R\n⊢ Iff (Eq S.toSubsemiring U.toSubsemiring) (Eq S U)","decl":"theorem toSubsemiring_inj {S U : StarSubsemiring R} : S.toSubsemiring = U.toSubsemiring ↔ S = U :=\n  toSubsemiring_injective.eq_iff\n\n"}
{"name":"StarSubsemiring.toSubsemiring_le_iff","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS₁ S₂ : StarSubsemiring R\n⊢ Iff (LE.le S₁.toSubsemiring S₂.toSubsemiring) (LE.le S₁ S₂)","decl":"theorem toSubsemiring_le_iff {S₁ S₂ : StarSubsemiring R} :\n    S₁.toSubsemiring ≤ S₂.toSubsemiring ↔ S₁ ≤ S₂ :=\n  Iff.rfl\n\n"}
{"name":"StarSubsemiring.coe_copy","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS : StarSubsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"@[simp]\ntheorem coe_copy (S : StarSubsemiring R) (s : Set R) (hs : s = ↑S) : (S.copy s hs : Set R) = s :=\n  rfl\n\n"}
{"name":"StarSubsemiring.copy_eq","module":"Mathlib.Algebra.Star.Subsemiring","initialProofState":"R : Type v\ninst✝¹ : NonAssocSemiring R\ninst✝ : StarRing R\nS : StarSubsemiring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"theorem copy_eq (S : StarSubsemiring R) (s : Set R) (hs : s = ↑S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
