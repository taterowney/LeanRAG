{"name":"RingHom.surjective_stableUnderComposition","module":"Mathlib.RingTheory.RingHom.Surjective","initialProofState":"⊢ RingHom.StableUnderComposition fun {X Y} [CommRing X] [CommRing Y] f => Function.Surjective ⇑f","decl":"theorem surjective_stableUnderComposition : StableUnderComposition surjective := by\n  introv R hf hg; exact hg.comp hf\n\n"}
{"name":"RingHom.surjective_respectsIso","module":"Mathlib.RingTheory.RingHom.Surjective","initialProofState":"⊢ RingHom.RespectsIso fun {X Y} [CommRing X] [CommRing Y] f => Function.Surjective ⇑f","decl":"theorem surjective_respectsIso : RespectsIso surjective := by\n  apply surjective_stableUnderComposition.respectsIso\n  intros _ _ _ _ e\n  exact e.surjective\n\n"}
{"name":"RingHom.surjective_isStableUnderBaseChange","module":"Mathlib.RingTheory.RingHom.Surjective","initialProofState":"⊢ RingHom.IsStableUnderBaseChange fun {X Y} [CommRing X] [CommRing Y] f => Function.Surjective ⇑f","decl":"theorem surjective_isStableUnderBaseChange : IsStableUnderBaseChange surjective := by\n  refine IsStableUnderBaseChange.mk _ surjective_respectsIso ?_\n  classical\n  introv h x\n  induction x with\n  | zero => exact ⟨0, map_zero _⟩\n  | tmul x y =>\n    obtain ⟨y, rfl⟩ := h y; use y • x; dsimp\n    rw [TensorProduct.smul_tmul, Algebra.algebraMap_eq_smul_one]\n  | add x y ex ey => obtain ⟨⟨x, rfl⟩, ⟨y, rfl⟩⟩ := ex, ey; exact ⟨x + y, map_add _ x y⟩\n\n"}
{"name":"RingHom.surjective_localizationPreserves","module":"Mathlib.RingTheory.RingHom.Surjective","initialProofState":"⊢ RingHom.LocalizationPreserves fun {X Y} [CommRing X] [CommRing Y] f => Function.Surjective ⇑f","decl":"/-- `M⁻¹R →+* M⁻¹S` is surjective if `R →+* S` is surjective. -/\ntheorem surjective_localizationPreserves :\n    LocalizationPreserves surjective := by\n  introv R H x\n  obtain ⟨x, ⟨_, s, hs, rfl⟩, rfl⟩ := IsLocalization.mk'_surjective (M.map f) x\n  obtain ⟨y, rfl⟩ := H x\n  use IsLocalization.mk' R' y ⟨s, hs⟩\n  rw [IsLocalization.map_mk']\n\n"}
{"name":"RingHom.surjective_ofLocalizationSpan","module":"Mathlib.RingTheory.RingHom.Surjective","initialProofState":"⊢ RingHom.OfLocalizationSpan fun {X Y} [CommRing X] [CommRing Y] f => Function.Surjective ⇑f","decl":"/-- `R →+* S` is surjective if there exists a set `{ r }` that spans `R` such that\n  `Rᵣ →+* Sᵣ` is surjective. -/\ntheorem surjective_ofLocalizationSpan : OfLocalizationSpan surjective := by\n  introv R e H\n  rw [← Set.range_eq_univ, Set.eq_univ_iff_forall]\n  letI := f.toAlgebra\n  intro x\n  apply Submodule.mem_of_span_eq_top_of_smul_pow_mem\n    (LinearMap.range (Algebra.linearMap R S)) s e\n  intro r\n  obtain ⟨a, e'⟩ := H r (algebraMap _ _ x)\n  obtain ⟨b, ⟨_, n, rfl⟩, rfl⟩ := IsLocalization.mk'_surjective (Submonoid.powers (r : R)) a\n  erw [IsLocalization.map_mk'] at e'\n  rw [eq_comm, IsLocalization.eq_mk'_iff_mul_eq, Subtype.coe_mk, Subtype.coe_mk, ← map_mul] at e'\n  obtain ⟨⟨_, n', rfl⟩, e''⟩ := (IsLocalization.eq_iff_exists (Submonoid.powers (f r)) _).mp e'\n  dsimp only at e''\n  rw [mul_comm x, ← mul_assoc, ← map_pow, ← map_mul, ← map_mul, ← pow_add] at e''\n  exact ⟨n' + n, _, e''.symm⟩\n\n"}
{"name":"RingHom.surjective_localRingHom_of_surjective","module":"Mathlib.RingTheory.RingHom.Surjective","initialProofState":"R S : Type u\ninst✝² : CommRing R\ninst✝¹ : CommRing S\nf : RingHom R S\nh : Function.Surjective ⇑f\nP : Ideal S\ninst✝ : P.IsPrime\n⊢ Function.Surjective ⇑(Localization.localRingHom (Ideal.comap f P) P f ⋯)","decl":"/-- A surjective ring homomorphism `R →+* S` induces a surjective homomorphism `R_{f⁻¹(P)} →+* S_P`\nfor every prime ideal `P` of `S`. -/\ntheorem surjective_localRingHom_of_surjective {R S : Type u} [CommRing R] [CommRing S]\n    (f : R →+* S) (h : Function.Surjective f) (P : Ideal S) [P.IsPrime] :\n    Function.Surjective (Localization.localRingHom (P.comap f) P f rfl) :=\n  have : IsLocalization (Submonoid.map f (Ideal.comap f P).primeCompl) (Localization.AtPrime P) :=\n    (Submonoid.map_comap_eq_of_surjective h P.primeCompl).symm ▸ Localization.isLocalization\n  surjective_localizationPreserves _ _ _ _ h\n\n"}
