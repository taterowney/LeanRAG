{"name":"Finsupp.instCountableSubtypeMemSubmoduleSpanRange","module":"Mathlib.LinearAlgebra.Countable","initialProofState":"M : Type u_1\nR : Type u_2\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\nι : Type u_3\ninst✝¹ : Countable R\ninst✝ : Countable ι\nv : ι → M\n⊢ Countable (Subtype fun x => Membership.mem (Submodule.span R (Set.range v)) x)","decl":"/-- If `R` is countable, then any `R`-submodule spanned by a countable family of vectors is\ncountable. -/\ninstance {ι : Type*} [Countable R] [Countable ι] (v : ι → M) :\n    Countable (Submodule.span R (Set.range v)) := by\n  refine Set.countable_coe_iff.mpr (Set.Countable.mono ?_ (Set.countable_range\n      (fun c : (ι →₀ R) => c.sum fun i _ => (c i) • v i)))\n  exact fun _ h => Finsupp.mem_span_range_iff_exists_finsupp.mp (SetLike.mem_coe.mp h)\n\n"}
