{"name":"AddSubmonoidClass.coe_list_sum","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\nB : Type u_3\ninst✝² : AddMonoid M\ninst✝¹ : SetLike B M\ninst✝ : AddSubmonoidClass B M\nS : B\nl : List (Subtype fun x => Membership.mem S x)\n⊢ Eq (↑l.sum) (List.map Subtype.val l).sum","decl":"@[to_additive (attr := norm_cast, simp)]\ntheorem coe_list_prod (l : List S) : (l.prod : M) = (l.map (↑)).prod :=\n  map_list_prod (SubmonoidClass.subtype S : _ →* M) l\n\n"}
{"name":"SubmonoidClass.coe_list_prod","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\nB : Type u_3\ninst✝² : Monoid M\ninst✝¹ : SetLike B M\ninst✝ : SubmonoidClass B M\nS : B\nl : List (Subtype fun x => Membership.mem S x)\n⊢ Eq (↑l.prod) (List.map Subtype.val l).prod","decl":"@[to_additive (attr := norm_cast, simp)]\ntheorem coe_list_prod (l : List S) : (l.prod : M) = (l.map (↑)).prod :=\n  map_list_prod (SubmonoidClass.subtype S : _ →* M) l\n\n"}
{"name":"AddSubmonoidClass.coe_multiset_sum","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nM : Type u_4\ninst✝² : AddCommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : AddSubmonoidClass B M\nm : Multiset (Subtype fun x => Membership.mem S x)\n⊢ Eq (↑m.sum) (Multiset.map Subtype.val m).sum","decl":"@[to_additive (attr := norm_cast, simp)]\ntheorem coe_multiset_prod {M} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] (m : Multiset S) :\n    (m.prod : M) = (m.map (↑)).prod :=\n  (SubmonoidClass.subtype S : _ →* M).map_multiset_prod m\n\n"}
{"name":"SubmonoidClass.coe_multiset_prod","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nM : Type u_4\ninst✝² : CommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : SubmonoidClass B M\nm : Multiset (Subtype fun x => Membership.mem S x)\n⊢ Eq (↑m.prod) (Multiset.map Subtype.val m).prod","decl":"@[to_additive (attr := norm_cast, simp)]\ntheorem coe_multiset_prod {M} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] (m : Multiset S) :\n    (m.prod : M) = (m.map (↑)).prod :=\n  (SubmonoidClass.subtype S : _ →* M).map_multiset_prod m\n\n"}
{"name":"AddSubmonoidClass.coe_finset_sum","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nι : Type u_4\nM : Type u_5\ninst✝² : AddCommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : AddSubmonoidClass B M\nf : ι → Subtype fun x => Membership.mem S x\ns : Finset ι\n⊢ Eq (↑(s.sum fun i => f i)) (s.sum fun i => ↑(f i))","decl":"@[to_additive (attr := norm_cast, simp)]\ntheorem coe_finset_prod {ι M} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] (f : ι → S)\n    (s : Finset ι) : ↑(∏ i ∈ s, f i) = (∏ i ∈ s, f i : M) :=\n  map_prod (SubmonoidClass.subtype S) f s\n\n"}
{"name":"SubmonoidClass.coe_finset_prod","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nι : Type u_4\nM : Type u_5\ninst✝² : CommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : SubmonoidClass B M\nf : ι → Subtype fun x => Membership.mem S x\ns : Finset ι\n⊢ Eq (↑(s.prod fun i => f i)) (s.prod fun i => ↑(f i))","decl":"@[to_additive (attr := norm_cast, simp)]\ntheorem coe_finset_prod {ι M} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] (f : ι → S)\n    (s : Finset ι) : ↑(∏ i ∈ s, f i) = (∏ i ∈ s, f i : M) :=\n  map_prod (SubmonoidClass.subtype S) f s\n\n"}
{"name":"list_prod_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\nB : Type u_3\ninst✝² : Monoid M\ninst✝¹ : SetLike B M\ninst✝ : SubmonoidClass B M\nS : B\nl : List M\nhl : ∀ (x : M), Membership.mem l x → Membership.mem S x\n⊢ Membership.mem S l.prod","decl":"/-- Product of a list of elements in a submonoid is in the submonoid. -/\n@[to_additive \"Sum of a list of elements in an `AddSubmonoid` is in the `AddSubmonoid`.\"]\ntheorem list_prod_mem {l : List M} (hl : ∀ x ∈ l, x ∈ S) : l.prod ∈ S := by\n  lift l to List S using hl\n  rw [← coe_list_prod]\n  exact l.prod.coe_prop\n\n"}
{"name":"list_sum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\nB : Type u_3\ninst✝² : AddMonoid M\ninst✝¹ : SetLike B M\ninst✝ : AddSubmonoidClass B M\nS : B\nl : List M\nhl : ∀ (x : M), Membership.mem l x → Membership.mem S x\n⊢ Membership.mem S l.sum","decl":"/-- Product of a list of elements in a submonoid is in the submonoid. -/\n@[to_additive \"Sum of a list of elements in an `AddSubmonoid` is in the `AddSubmonoid`.\"]\ntheorem list_prod_mem {l : List M} (hl : ∀ x ∈ l, x ∈ S) : l.prod ∈ S := by\n  lift l to List S using hl\n  rw [← coe_list_prod]\n  exact l.prod.coe_prop\n\n"}
{"name":"multiset_prod_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nM : Type u_4\ninst✝² : CommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : SubmonoidClass B M\nm : Multiset M\nhm : ∀ (a : M), Membership.mem m a → Membership.mem S a\n⊢ Membership.mem S m.prod","decl":"/-- Product of a multiset of elements in a submonoid of a `CommMonoid` is in the submonoid. -/\n@[to_additive\n      \"Sum of a multiset of elements in an `AddSubmonoid` of an `AddCommMonoid` is\n      in the `AddSubmonoid`.\"]\ntheorem multiset_prod_mem {M} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] (m : Multiset M)\n    (hm : ∀ a ∈ m, a ∈ S) : m.prod ∈ S := by\n  lift m to Multiset S using hm\n  rw [← coe_multiset_prod]\n  exact m.prod.coe_prop\n\n"}
{"name":"multiset_sum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nM : Type u_4\ninst✝² : AddCommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : AddSubmonoidClass B M\nm : Multiset M\nhm : ∀ (a : M), Membership.mem m a → Membership.mem S a\n⊢ Membership.mem S m.sum","decl":"/-- Product of a multiset of elements in a submonoid of a `CommMonoid` is in the submonoid. -/\n@[to_additive\n      \"Sum of a multiset of elements in an `AddSubmonoid` of an `AddCommMonoid` is\n      in the `AddSubmonoid`.\"]\ntheorem multiset_prod_mem {M} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] (m : Multiset M)\n    (hm : ∀ a ∈ m, a ∈ S) : m.prod ∈ S := by\n  lift m to Multiset S using hm\n  rw [← coe_multiset_prod]\n  exact m.prod.coe_prop\n\n"}
{"name":"sum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nM : Type u_4\ninst✝² : AddCommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : AddSubmonoidClass B M\nι : Type u_5\nt : Finset ι\nf : ι → M\nh : ∀ (c : ι), Membership.mem t c → Membership.mem S (f c)\n⊢ Membership.mem S (t.sum fun c => f c)","decl":"/-- Product of elements of a submonoid of a `CommMonoid` indexed by a `Finset` is in the\n    submonoid. -/\n@[to_additive\n      \"Sum of elements in an `AddSubmonoid` of an `AddCommMonoid` indexed by a `Finset`\n      is in the `AddSubmonoid`.\"]\ntheorem prod_mem {M : Type*} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] {ι : Type*}\n    {t : Finset ι} {f : ι → M} (h : ∀ c ∈ t, f c ∈ S) : (∏ c ∈ t, f c) ∈ S :=\n  multiset_prod_mem (t.1.map f) fun _x hx =>\n    let ⟨i, hi, hix⟩ := Multiset.mem_map.1 hx\n    hix ▸ h i hi\n\n"}
{"name":"prod_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"B : Type u_3\nS : B\nM : Type u_4\ninst✝² : CommMonoid M\ninst✝¹ : SetLike B M\ninst✝ : SubmonoidClass B M\nι : Type u_5\nt : Finset ι\nf : ι → M\nh : ∀ (c : ι), Membership.mem t c → Membership.mem S (f c)\n⊢ Membership.mem S (t.prod fun c => f c)","decl":"/-- Product of elements of a submonoid of a `CommMonoid` indexed by a `Finset` is in the\n    submonoid. -/\n@[to_additive\n      \"Sum of elements in an `AddSubmonoid` of an `AddCommMonoid` indexed by a `Finset`\n      is in the `AddSubmonoid`.\"]\ntheorem prod_mem {M : Type*} [CommMonoid M] [SetLike B M] [SubmonoidClass B M] {ι : Type*}\n    {t : Finset ι} {f : ι → M} (h : ∀ c ∈ t, f c ∈ S) : (∏ c ∈ t, f c) ∈ S :=\n  multiset_prod_mem (t.1.map f) fun _x hx =>\n    let ⟨i, hi, hix⟩ := Multiset.mem_map.1 hx\n    hix ▸ h i hi\n\n"}
{"name":"AddSubmonoid.coe_list_sum","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : AddSubmonoid M\nl : List (Subtype fun x => Membership.mem s x)\n⊢ Eq (↑l.sum) (List.map Subtype.val l).sum","decl":"@[to_additive (attr := norm_cast)]\ntheorem coe_list_prod (l : List s) : (l.prod : M) = (l.map (↑)).prod :=\n  map_list_prod s.subtype l\n\n"}
{"name":"Submonoid.coe_list_prod","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Submonoid M\nl : List (Subtype fun x => Membership.mem s x)\n⊢ Eq (↑l.prod) (List.map Subtype.val l).prod","decl":"@[to_additive (attr := norm_cast)]\ntheorem coe_list_prod (l : List s) : (l.prod : M) = (l.map (↑)).prod :=\n  map_list_prod s.subtype l\n\n"}
{"name":"AddSubmonoid.coe_multiset_sum","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_4\ninst✝ : AddCommMonoid M\nS : AddSubmonoid M\nm : Multiset (Subtype fun x => Membership.mem S x)\n⊢ Eq (↑m.sum) (Multiset.map Subtype.val m).sum","decl":"@[to_additive (attr := norm_cast)]\ntheorem coe_multiset_prod {M} [CommMonoid M] (S : Submonoid M) (m : Multiset S) :\n    (m.prod : M) = (m.map (↑)).prod :=\n  S.subtype.map_multiset_prod m\n\n"}
{"name":"Submonoid.coe_multiset_prod","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_4\ninst✝ : CommMonoid M\nS : Submonoid M\nm : Multiset (Subtype fun x => Membership.mem S x)\n⊢ Eq (↑m.prod) (Multiset.map Subtype.val m).prod","decl":"@[to_additive (attr := norm_cast)]\ntheorem coe_multiset_prod {M} [CommMonoid M] (S : Submonoid M) (m : Multiset S) :\n    (m.prod : M) = (m.map (↑)).prod :=\n  S.subtype.map_multiset_prod m\n\n"}
{"name":"Submonoid.coe_finset_prod","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"ι : Type u_4\nM : Type u_5\ninst✝ : CommMonoid M\nS : Submonoid M\nf : ι → Subtype fun x => Membership.mem S x\ns : Finset ι\n⊢ Eq (↑(s.prod fun i => f i)) (s.prod fun i => ↑(f i))","decl":"@[to_additive (attr := norm_cast)]\ntheorem coe_finset_prod {ι M} [CommMonoid M] (S : Submonoid M) (f : ι → S) (s : Finset ι) :\n    ↑(∏ i ∈ s, f i) = (∏ i ∈ s, f i : M) :=\n  map_prod S.subtype f s\n\n"}
{"name":"AddSubmonoid.coe_finset_sum","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"ι : Type u_4\nM : Type u_5\ninst✝ : AddCommMonoid M\nS : AddSubmonoid M\nf : ι → Subtype fun x => Membership.mem S x\ns : Finset ι\n⊢ Eq (↑(s.sum fun i => f i)) (s.sum fun i => ↑(f i))","decl":"@[to_additive (attr := norm_cast)]\ntheorem coe_finset_prod {ι M} [CommMonoid M] (S : Submonoid M) (f : ι → S) (s : Finset ι) :\n    ↑(∏ i ∈ s, f i) = (∏ i ∈ s, f i : M) :=\n  map_prod S.subtype f s\n\n"}
{"name":"AddSubmonoid.list_sum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\ns : AddSubmonoid M\nl : List M\nhl : ∀ (x : M), Membership.mem l x → Membership.mem s x\n⊢ Membership.mem s l.sum","decl":"/-- Product of a list of elements in a submonoid is in the submonoid. -/\n@[to_additive \"Sum of a list of elements in an `AddSubmonoid` is in the `AddSubmonoid`.\"]\ntheorem list_prod_mem {l : List M} (hl : ∀ x ∈ l, x ∈ s) : l.prod ∈ s := by\n  lift l to List s using hl\n  rw [← coe_list_prod]\n  exact l.prod.coe_prop\n\n"}
{"name":"Submonoid.list_prod_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : Monoid M\ns : Submonoid M\nl : List M\nhl : ∀ (x : M), Membership.mem l x → Membership.mem s x\n⊢ Membership.mem s l.prod","decl":"/-- Product of a list of elements in a submonoid is in the submonoid. -/\n@[to_additive \"Sum of a list of elements in an `AddSubmonoid` is in the `AddSubmonoid`.\"]\ntheorem list_prod_mem {l : List M} (hl : ∀ x ∈ l, x ∈ s) : l.prod ∈ s := by\n  lift l to List s using hl\n  rw [← coe_list_prod]\n  exact l.prod.coe_prop\n\n"}
{"name":"AddSubmonoid.multiset_sum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_4\ninst✝ : AddCommMonoid M\nS : AddSubmonoid M\nm : Multiset M\nhm : ∀ (a : M), Membership.mem m a → Membership.mem S a\n⊢ Membership.mem S m.sum","decl":"/-- Product of a multiset of elements in a submonoid of a `CommMonoid` is in the submonoid. -/\n@[to_additive\n      \"Sum of a multiset of elements in an `AddSubmonoid` of an `AddCommMonoid` is\n      in the `AddSubmonoid`.\"]\ntheorem multiset_prod_mem {M} [CommMonoid M] (S : Submonoid M) (m : Multiset M)\n    (hm : ∀ a ∈ m, a ∈ S) : m.prod ∈ S := by\n  lift m to Multiset S using hm\n  rw [← coe_multiset_prod]\n  exact m.prod.coe_prop\n\n"}
{"name":"Submonoid.multiset_prod_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_4\ninst✝ : CommMonoid M\nS : Submonoid M\nm : Multiset M\nhm : ∀ (a : M), Membership.mem m a → Membership.mem S a\n⊢ Membership.mem S m.prod","decl":"/-- Product of a multiset of elements in a submonoid of a `CommMonoid` is in the submonoid. -/\n@[to_additive\n      \"Sum of a multiset of elements in an `AddSubmonoid` of an `AddCommMonoid` is\n      in the `AddSubmonoid`.\"]\ntheorem multiset_prod_mem {M} [CommMonoid M] (S : Submonoid M) (m : Multiset M)\n    (hm : ∀ a ∈ m, a ∈ S) : m.prod ∈ S := by\n  lift m to Multiset S using hm\n  rw [← coe_multiset_prod]\n  exact m.prod.coe_prop\n\n"}
{"name":"Submonoid.multiset_noncommProd_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : Monoid M\nS : Submonoid M\nm : Multiset M\ncomm : (setOf fun x => Membership.mem m x).Pairwise Commute\nh : ∀ (x : M), Membership.mem m x → Membership.mem S x\n⊢ Membership.mem S (m.noncommProd comm)","decl":"@[to_additive]\ntheorem multiset_noncommProd_mem (S : Submonoid M) (m : Multiset M) (comm) (h : ∀ x ∈ m, x ∈ S) :\n    m.noncommProd comm ∈ S := by\n  induction m using Quotient.inductionOn with | h l => ?_\n  simp only [Multiset.quot_mk_to_coe, Multiset.noncommProd_coe]\n  exact Submonoid.list_prod_mem _ h\n\n"}
{"name":"AddSubmonoid.multiset_noncommSum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\nS : AddSubmonoid M\nm : Multiset M\ncomm : (setOf fun x => Membership.mem m x).Pairwise AddCommute\nh : ∀ (x : M), Membership.mem m x → Membership.mem S x\n⊢ Membership.mem S (m.noncommSum comm)","decl":"@[to_additive]\ntheorem multiset_noncommProd_mem (S : Submonoid M) (m : Multiset M) (comm) (h : ∀ x ∈ m, x ∈ S) :\n    m.noncommProd comm ∈ S := by\n  induction m using Quotient.inductionOn with | h l => ?_\n  simp only [Multiset.quot_mk_to_coe, Multiset.noncommProd_coe]\n  exact Submonoid.list_prod_mem _ h\n\n"}
{"name":"Submonoid.prod_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_4\ninst✝ : CommMonoid M\nS : Submonoid M\nι : Type u_5\nt : Finset ι\nf : ι → M\nh : ∀ (c : ι), Membership.mem t c → Membership.mem S (f c)\n⊢ Membership.mem S (t.prod fun c => f c)","decl":"/-- Product of elements of a submonoid of a `CommMonoid` indexed by a `Finset` is in the\n    submonoid. -/\n@[to_additive\n      \"Sum of elements in an `AddSubmonoid` of an `AddCommMonoid` indexed by a `Finset`\n      is in the `AddSubmonoid`.\"]\ntheorem prod_mem {M : Type*} [CommMonoid M] (S : Submonoid M) {ι : Type*} {t : Finset ι}\n    {f : ι → M} (h : ∀ c ∈ t, f c ∈ S) : (∏ c ∈ t, f c) ∈ S :=\n  S.multiset_prod_mem (t.1.map f) fun _ hx =>\n    let ⟨i, hi, hix⟩ := Multiset.mem_map.1 hx\n    hix ▸ h i hi\n\n"}
{"name":"AddSubmonoid.sum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_4\ninst✝ : AddCommMonoid M\nS : AddSubmonoid M\nι : Type u_5\nt : Finset ι\nf : ι → M\nh : ∀ (c : ι), Membership.mem t c → Membership.mem S (f c)\n⊢ Membership.mem S (t.sum fun c => f c)","decl":"/-- Product of elements of a submonoid of a `CommMonoid` indexed by a `Finset` is in the\n    submonoid. -/\n@[to_additive\n      \"Sum of elements in an `AddSubmonoid` of an `AddCommMonoid` indexed by a `Finset`\n      is in the `AddSubmonoid`.\"]\ntheorem prod_mem {M : Type*} [CommMonoid M] (S : Submonoid M) {ι : Type*} {t : Finset ι}\n    {f : ι → M} (h : ∀ c ∈ t, f c ∈ S) : (∏ c ∈ t, f c) ∈ S :=\n  S.multiset_prod_mem (t.1.map f) fun _ hx =>\n    let ⟨i, hi, hix⟩ := Multiset.mem_map.1 hx\n    hix ▸ h i hi\n\n"}
{"name":"Submonoid.noncommProd_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : Monoid M\nS : Submonoid M\nι : Type u_4\nt : Finset ι\nf : ι → M\ncomm : (↑t).Pairwise (Function.onFun Commute f)\nh : ∀ (c : ι), Membership.mem t c → Membership.mem S (f c)\n⊢ Membership.mem S (t.noncommProd f comm)","decl":"@[to_additive]\ntheorem noncommProd_mem (S : Submonoid M) {ι : Type*} (t : Finset ι) (f : ι → M) (comm)\n    (h : ∀ c ∈ t, f c ∈ S) : t.noncommProd f comm ∈ S := by\n  apply multiset_noncommProd_mem\n  intro y\n  rw [Multiset.mem_map]\n  rintro ⟨x, ⟨hx, rfl⟩⟩\n  exact h x hx\n\n"}
{"name":"AddSubmonoid.noncommSum_mem","module":"Mathlib.Algebra.Group.Submonoid.BigOperators","initialProofState":"M : Type u_1\ninst✝ : AddMonoid M\nS : AddSubmonoid M\nι : Type u_4\nt : Finset ι\nf : ι → M\ncomm : (↑t).Pairwise (Function.onFun AddCommute f)\nh : ∀ (c : ι), Membership.mem t c → Membership.mem S (f c)\n⊢ Membership.mem S (t.noncommSum f comm)","decl":"@[to_additive]\ntheorem noncommProd_mem (S : Submonoid M) {ι : Type*} (t : Finset ι) (f : ι → M) (comm)\n    (h : ∀ c ∈ t, f c ∈ S) : t.noncommProd f comm ∈ S := by\n  apply multiset_noncommProd_mem\n  intro y\n  rw [Multiset.mem_map]\n  rintro ⟨x, ⟨hx, rfl⟩⟩\n  exact h x hx\n\n"}
