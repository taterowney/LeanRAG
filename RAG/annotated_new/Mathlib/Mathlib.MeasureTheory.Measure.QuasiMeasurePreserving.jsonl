{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.absolutelyContinuous","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmβ : MeasurableSpace β\nm0 : MeasurableSpace α\nf : α → β\nμa : autoParam (MeasureTheory.Measure α) _auto✝\nμb : autoParam (MeasureTheory.Measure β) _auto✝\nself : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ (MeasureTheory.Measure.map f μa).AbsolutelyContinuous μb","decl":"/-- A map `f : α → β` is said to be *quasi measure preserving* (a.k.a. non-singular) w.r.t. measures\n`μa` and `μb` if it is measurable and `μb s = 0` implies `μa (f ⁻¹' s) = 0`. -/\nstructure QuasiMeasurePreserving {m0 : MeasurableSpace α} (f : α → β)\n  (μa : Measure α := by volume_tac)\n  (μb : Measure β := by volume_tac) : Prop where\n  protected measurable : Measurable f\n  protected absolutelyContinuous : μa.map f ≪ μb\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.measurable","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmβ : MeasurableSpace β\nm0 : MeasurableSpace α\nf : α → β\nμa : autoParam (MeasureTheory.Measure α) _auto✝\nμb : autoParam (MeasureTheory.Measure β) _auto✝\nself : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ Measurable f","decl":"/-- A map `f : α → β` is said to be *quasi measure preserving* (a.k.a. non-singular) w.r.t. measures\n`μa` and `μb` if it is measurable and `μb s = 0` implies `μa (f ⁻¹' s) = 0`. -/\nstructure QuasiMeasurePreserving {m0 : MeasurableSpace α} (f : α → β)\n  (μa : Measure α := by volume_tac)\n  (μb : Measure β := by volume_tac) : Prop where\n  protected measurable : Measurable f\n  protected absolutelyContinuous : μa.map f ≪ μb\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.id","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\n_m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving id μ μ","decl":"protected theorem id {_m0 : MeasurableSpace α} (μ : Measure α) : QuasiMeasurePreserving id μ μ :=\n  ⟨measurable_id, map_id.absolutelyContinuous⟩\n\n"}
{"name":"Measurable.quasiMeasurePreserving","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmβ : MeasurableSpace β\nf : α → β\n_m0 : MeasurableSpace α\nhf : Measurable f\nμ : MeasureTheory.Measure α\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving f μ (MeasureTheory.Measure.map f μ)","decl":"protected theorem _root_.Measurable.quasiMeasurePreserving\n    {_m0 : MeasurableSpace α} (hf : Measurable f) (μ : Measure α) :\n    QuasiMeasurePreserving f μ (μ.map f) :=\n  ⟨hf, AbsolutelyContinuous.rfl⟩\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.mono_left","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa μa' : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\nha : μa'.AbsolutelyContinuous μa\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving f μa' μb","decl":"theorem mono_left (h : QuasiMeasurePreserving f μa μb) (ha : μa' ≪ μa) :\n    QuasiMeasurePreserving f μa' μb :=\n  ⟨h.1, (ha.map h.1).trans h.2⟩\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.mono_right","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb μb' : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\nha : μb.AbsolutelyContinuous μb'\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving f μa μb'","decl":"theorem mono_right (h : QuasiMeasurePreserving f μa μb) (ha : μb ≪ μb') :\n    QuasiMeasurePreserving f μa μb' :=\n  ⟨h.1, h.2.trans ha⟩\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.mono","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa μa' : MeasureTheory.Measure α\nμb μb' : MeasureTheory.Measure β\nf : α → β\nha : μa'.AbsolutelyContinuous μa\nhb : μb.AbsolutelyContinuous μb'\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving f μa' μb'","decl":"@[mono]\ntheorem mono (ha : μa' ≪ μa) (hb : μb ≪ μb') (h : QuasiMeasurePreserving f μa μb) :\n    QuasiMeasurePreserving f μa' μb' :=\n  (h.mono_left ha).mono_right hb\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.comp","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nμc : MeasureTheory.Measure γ\ng : β → γ\nf : α → β\nhg : MeasureTheory.Measure.QuasiMeasurePreserving g μb μc\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving (Function.comp g f) μa μc","decl":"protected theorem comp {g : β → γ} {f : α → β} (hg : QuasiMeasurePreserving g μb μc)\n    (hf : QuasiMeasurePreserving f μa μb) : QuasiMeasurePreserving (g ∘ f) μa μc :=\n  ⟨hg.measurable.comp hf.measurable, by\n    rw [← map_map hg.1 hf.1]\n    exact (hf.2.map hg.1).trans hg.2⟩\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.iterate","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμa : MeasureTheory.Measure α\nf : α → α\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μa\nn : Nat\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving (Nat.iterate f n) μa μa","decl":"protected theorem iterate {f : α → α} (hf : QuasiMeasurePreserving f μa μa) :\n    ∀ n, QuasiMeasurePreserving f^[n] μa μa\n  | 0 => QuasiMeasurePreserving.id μa\n  | n + 1 => (hf.iterate n).comp hf\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.aemeasurable","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ AEMeasurable f μa","decl":"protected theorem aemeasurable (hf : QuasiMeasurePreserving f μa μb) : AEMeasurable f μa :=\n  hf.1.aemeasurable\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.smul_measure","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nR : Type u_5\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\nc : R\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving f (HSMul.hSMul c μa) (HSMul.hSMul c μb)","decl":"theorem smul_measure {R : Type*} [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞]\n    (hf : QuasiMeasurePreserving f μa μb) (c : R) : QuasiMeasurePreserving f (c • μa) (c • μb) :=\n  ⟨hf.1, by rw [Measure.map_smul]; exact hf.2.smul c⟩\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.ae_map_le","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ LE.le (MeasureTheory.ae (MeasureTheory.Measure.map f μa)) (MeasureTheory.ae μb)","decl":"theorem ae_map_le (h : QuasiMeasurePreserving f μa μb) : ae (μa.map f) ≤ ae μb :=\n  h.2.ae_le\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.tendsto_ae","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ Filter.Tendsto f (MeasureTheory.ae μa) (MeasureTheory.ae μb)","decl":"theorem tendsto_ae (h : QuasiMeasurePreserving f μa μb) : Tendsto f (ae μa) (ae μb) :=\n  (tendsto_ae_map h.aemeasurable).mono_right h.ae_map_le\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.ae","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\np : β → Prop\nhg : Filter.Eventually (fun x => p x) (MeasureTheory.ae μb)\n⊢ Filter.Eventually (fun x => p (f x)) (MeasureTheory.ae μa)","decl":"theorem ae (h : QuasiMeasurePreserving f μa μb) {p : β → Prop} (hg : ∀ᵐ x ∂μb, p x) :\n    ∀ᵐ x ∂μa, p (f x) :=\n  h.tendsto_ae hg\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nδ : Type u_4\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\ng₁ g₂ : β → δ\nhg : (MeasureTheory.ae μb).EventuallyEq g₁ g₂\n⊢ (MeasureTheory.ae μa).EventuallyEq (Function.comp g₁ f) (Function.comp g₂ f)","decl":"theorem ae_eq (h : QuasiMeasurePreserving f μa μb) {g₁ g₂ : β → δ} (hg : g₁ =ᵐ[μb] g₂) :\n    g₁ ∘ f =ᵐ[μa] g₂ ∘ f :=\n  h.ae hg\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.preimage_null","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\ns : Set β\nhs : Eq (μb s) 0\n⊢ Eq (μa (Set.preimage f s)) 0","decl":"theorem preimage_null (h : QuasiMeasurePreserving f μa μb) {s : Set β} (hs : μb s = 0) :\n    μa (f ⁻¹' s) = 0 :=\n  preimage_null_of_map_null h.aemeasurable (h.2 hs)\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.preimage_mono_ae","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\ns t : Set β\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\nh : (MeasureTheory.ae μb).EventuallyLE s t\n⊢ (MeasureTheory.ae μa).EventuallyLE (Set.preimage f s) (Set.preimage f t)","decl":"theorem preimage_mono_ae {s t : Set β} (hf : QuasiMeasurePreserving f μa μb) (h : s ≤ᵐ[μb] t) :\n    f ⁻¹' s ≤ᵐ[μa] f ⁻¹' t :=\n  eventually_map.mp <|\n    Eventually.filter_mono (tendsto_ae_map hf.aemeasurable) (Eventually.filter_mono hf.ae_map_le h)\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.preimage_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\ns t : Set β\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\nh : (MeasureTheory.ae μb).EventuallyEq s t\n⊢ (MeasureTheory.ae μa).EventuallyEq (Set.preimage f s) (Set.preimage f t)","decl":"theorem preimage_ae_eq {s t : Set β} (hf : QuasiMeasurePreserving f μa μb) (h : s =ᵐ[μb] t) :\n    f ⁻¹' s =ᵐ[μa] f ⁻¹' t :=\n  EventuallyLE.antisymm (hf.preimage_mono_ae h.le) (hf.preimage_mono_ae h.symm.le)\n\n"}
{"name":"MeasureTheory.NullMeasurableSet.preimage","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμa : MeasureTheory.Measure α\nμb : MeasureTheory.Measure β\nf : α → β\ns : Set β\nhs : MeasureTheory.NullMeasurableSet s μb\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μa μb\n⊢ MeasureTheory.NullMeasurableSet (Set.preimage f s) μa","decl":"/-- The preimage of a null measurable set under a (quasi) measure preserving map is a null\nmeasurable set. -/\ntheorem _root_.MeasureTheory.NullMeasurableSet.preimage {s : Set β} (hs : NullMeasurableSet s μb)\n    (hf : QuasiMeasurePreserving f μa μb) : NullMeasurableSet (f ⁻¹' s) μa :=\n  let ⟨t, htm, hst⟩ := hs\n  ⟨f ⁻¹' t, hf.measurable htm, hf.preimage_ae_eq hst⟩\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.preimage_iterate_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nf : α → α\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ μ\nk : Nat\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ (MeasureTheory.ae μ).EventuallyEq (Set.preimage (Nat.iterate f k) s) s","decl":"theorem preimage_iterate_ae_eq {s : Set α} {f : α → α} (hf : QuasiMeasurePreserving f μ μ) (k : ℕ)\n    (hs : f ⁻¹' s =ᵐ[μ] s) : f^[k] ⁻¹' s =ᵐ[μ] s := by\n  induction' k with k ih; · rfl\n  rw [iterate_succ, preimage_comp]\n  exact EventuallyEq.trans (hf.preimage_ae_eq ih) hs\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.image_zpow_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ne : Equiv α α\nhe : MeasureTheory.Measure.QuasiMeasurePreserving (⇑e) μ μ\nhe' : MeasureTheory.Measure.QuasiMeasurePreserving (⇑e.symm) μ μ\nk : Int\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.image (⇑e) s) s\n⊢ (MeasureTheory.ae μ).EventuallyEq (Set.image (⇑(HPow.hPow e k)) s) s","decl":"theorem image_zpow_ae_eq {s : Set α} {e : α ≃ α} (he : QuasiMeasurePreserving e μ μ)\n    (he' : QuasiMeasurePreserving e.symm μ μ) (k : ℤ) (hs : e '' s =ᵐ[μ] s) :\n    (⇑(e ^ k)) '' s =ᵐ[μ] s := by\n  rw [Equiv.image_eq_preimage]\n  obtain ⟨k, rfl | rfl⟩ := k.eq_nat_or_neg\n  · replace hs : (⇑e⁻¹) ⁻¹' s =ᵐ[μ] s := by rwa [Equiv.image_eq_preimage] at hs\n    replace he' : (⇑e⁻¹)^[k] ⁻¹' s =ᵐ[μ] s := he'.preimage_iterate_ae_eq k hs\n    rwa [Equiv.Perm.iterate_eq_pow e⁻¹ k, inv_pow e k] at he'\n  · rw [zpow_neg, zpow_natCast]\n    replace hs : e ⁻¹' s =ᵐ[μ] s := by\n      convert he.preimage_ae_eq hs.symm\n      rw [Equiv.preimage_image]\n    replace he : (⇑e)^[k] ⁻¹' s =ᵐ[μ] s := he.preimage_iterate_ae_eq k hs\n    rwa [Equiv.Perm.iterate_eq_pow e k] at he\n\n-- Need to specify `α := Set α` below because of diamond; see https://github.com/leanprover-community/mathlib4/issues/10941\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.limsup_preimage_iterate_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nf : α → α\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ μ\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ (MeasureTheory.ae μ).EventuallyEq (Filter.limsup (fun n => Nat.iterate (Set.preimage f) n s) Filter.atTop) s","decl":"theorem limsup_preimage_iterate_ae_eq {f : α → α} (hf : QuasiMeasurePreserving f μ μ)\n    (hs : f ⁻¹' s =ᵐ[μ] s) : limsup (α := Set α) (fun n => (preimage f)^[n] s) atTop =ᵐ[μ] s :=\n  limsup_ae_eq_of_forall_ae_eq (fun n => (preimage f)^[n] s) fun n ↦ by\n    simpa only [Set.preimage_iterate_eq] using hf.preimage_iterate_ae_eq n hs\n\n-- Need to specify `α := Set α` below because of diamond; see https://github.com/leanprover-community/mathlib4/issues/10941\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.liminf_preimage_iterate_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nf : α → α\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ μ\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ (MeasureTheory.ae μ).EventuallyEq (Filter.liminf (fun n => Nat.iterate (Set.preimage f) n s) Filter.atTop) s","decl":"theorem liminf_preimage_iterate_ae_eq {f : α → α} (hf : QuasiMeasurePreserving f μ μ)\n    (hs : f ⁻¹' s =ᵐ[μ] s) : liminf (α := Set α) (fun n => (preimage f)^[n] s) atTop =ᵐ[μ] s :=\n  liminf_ae_eq_of_forall_ae_eq (fun n => (preimage f)^[n] s) fun n ↦ by\n    simpa only [Set.preimage_iterate_eq] using hf.preimage_iterate_ae_eq n hs\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.exists_preimage_eq_of_preimage_ae","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nf : α → α\nh : MeasureTheory.Measure.QuasiMeasurePreserving f μ μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ Exists fun t => And (MeasurableSet t) (And ((MeasureTheory.ae μ).EventuallyEq t s) (Eq (Set.preimage f t) t))","decl":"/-- For a quasi measure preserving self-map `f`, if a null measurable set `s` is a.e. invariant,\nthen it is a.e. equal to a measurable invariant set.\n-/\ntheorem exists_preimage_eq_of_preimage_ae {f : α → α} (h : QuasiMeasurePreserving f μ μ)\n    (hs : NullMeasurableSet s μ) (hs' : f ⁻¹' s =ᵐ[μ] s) :\n    ∃ t : Set α, MeasurableSet t ∧ t =ᵐ[μ] s ∧ f ⁻¹' t = t := by\n  obtain ⟨t, htm, ht⟩ := hs\n  refine ⟨limsup (f^[·] ⁻¹' t) atTop, ?_, ?_, ?_⟩\n  · exact .measurableSet_limsup fun n ↦ h.measurable.iterate n htm\n  · have : f ⁻¹' t =ᵐ[μ] t := (h.preimage_ae_eq ht.symm).trans (hs'.trans ht)\n    exact limsup_ae_eq_of_forall_ae_eq _ fun n ↦ .trans (h.preimage_iterate_ae_eq _ this) ht.symm\n  · simp only [Set.preimage_iterate_eq]\n    exact CompleteLatticeHom.apply_limsup_iterate (CompleteLatticeHom.setPreimage f) t\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.vadd_ae_eq_of_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"G : Type u_5\nα : Type u_6\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\nx✝ : MeasurableSpace α\ns t : Set α\nμ : MeasureTheory.Measure α\ng : G\nh_qmp : MeasureTheory.Measure.QuasiMeasurePreserving (fun x => HVAdd.hVAdd (Neg.neg g) x) μ μ\nh_ae_eq : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ (MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd g s) (HVAdd.hVAdd g t)","decl":"@[to_additive]\ntheorem smul_ae_eq_of_ae_eq {G α : Type*} [Group G] [MulAction G α] {_ : MeasurableSpace α}\n    {s t : Set α} {μ : Measure α} (g : G)\n    (h_qmp : QuasiMeasurePreserving (g⁻¹ • · : α → α) μ μ)\n    (h_ae_eq : s =ᵐ[μ] t) : (g • s : Set α) =ᵐ[μ] (g • t : Set α) := by\n  simpa only [← preimage_smul_inv] using h_qmp.ae_eq h_ae_eq\n\n"}
{"name":"MeasureTheory.Measure.QuasiMeasurePreserving.smul_ae_eq_of_ae_eq","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"G : Type u_5\nα : Type u_6\ninst✝¹ : Group G\ninst✝ : MulAction G α\nx✝ : MeasurableSpace α\ns t : Set α\nμ : MeasureTheory.Measure α\ng : G\nh_qmp : MeasureTheory.Measure.QuasiMeasurePreserving (fun x => HSMul.hSMul (Inv.inv g) x) μ μ\nh_ae_eq : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ (MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul g s) (HSMul.hSMul g t)","decl":"@[to_additive]\ntheorem smul_ae_eq_of_ae_eq {G α : Type*} [Group G] [MulAction G α] {_ : MeasurableSpace α}\n    {s t : Set α} {μ : Measure α} (g : G)\n    (h_qmp : QuasiMeasurePreserving (g⁻¹ • · : α → α) μ μ)\n    (h_ae_eq : s =ᵐ[μ] t) : (g • s : Set α) =ᵐ[μ] (g • t : Set α) := by\n  simpa only [← preimage_smul_inv] using h_qmp.ae_eq h_ae_eq\n\n"}
{"name":"MeasureTheory.Measure.pairwise_aedisjoint_of_aedisjoint_forall_ne_one","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"G : Type u_5\nα : Type u_6\ninst✝¹ : Group G\ninst✝ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nh_ae_disjoint : ∀ (g : G), Ne g 1 → MeasureTheory.AEDisjoint μ (HSMul.hSMul g s) s\nh_qmp : ∀ (g : G), MeasureTheory.Measure.QuasiMeasurePreserving (fun x => HSMul.hSMul g x) μ μ\n⊢ Pairwise (Function.onFun (MeasureTheory.AEDisjoint μ) fun g => HSMul.hSMul g s)","decl":"@[to_additive]\ntheorem pairwise_aedisjoint_of_aedisjoint_forall_ne_one {G α : Type*} [Group G] [MulAction G α]\n    {_ : MeasurableSpace α} {μ : Measure α} {s : Set α}\n    (h_ae_disjoint : ∀ g ≠ (1 : G), AEDisjoint μ (g • s) s)\n    (h_qmp : ∀ g : G, QuasiMeasurePreserving (g • ·) μ μ) :\n    Pairwise (AEDisjoint μ on fun g : G => g • s) := by\n  intro g₁ g₂ hg\n  let g := g₂⁻¹ * g₁\n  replace hg : g ≠ 1 := by\n    rw [Ne, inv_mul_eq_one]\n    exact hg.symm\n  have : (g₂⁻¹ • ·) ⁻¹' (g • s ∩ s) = g₁ • s ∩ g₂ • s := by\n    rw [preimage_eq_iff_eq_image (MulAction.bijective g₂⁻¹), image_smul, smul_set_inter, smul_smul,\n      smul_smul, inv_mul_cancel, one_smul]\n  change μ (g₁ • s ∩ g₂ • s) = 0\n  exact this ▸ (h_qmp g₂⁻¹).preimage_null (h_ae_disjoint g hg)\n\n"}
{"name":"MeasureTheory.Measure.pairwise_aedisjoint_of_aedisjoint_forall_ne_zero","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"G : Type u_5\nα : Type u_6\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nh_ae_disjoint : ∀ (g : G), Ne g 0 → MeasureTheory.AEDisjoint μ (HVAdd.hVAdd g s) s\nh_qmp : ∀ (g : G), MeasureTheory.Measure.QuasiMeasurePreserving (fun x => HVAdd.hVAdd g x) μ μ\n⊢ Pairwise (Function.onFun (MeasureTheory.AEDisjoint μ) fun g => HVAdd.hVAdd g s)","decl":"@[to_additive]\ntheorem pairwise_aedisjoint_of_aedisjoint_forall_ne_one {G α : Type*} [Group G] [MulAction G α]\n    {_ : MeasurableSpace α} {μ : Measure α} {s : Set α}\n    (h_ae_disjoint : ∀ g ≠ (1 : G), AEDisjoint μ (g • s) s)\n    (h_qmp : ∀ g : G, QuasiMeasurePreserving (g • ·) μ μ) :\n    Pairwise (AEDisjoint μ on fun g : G => g • s) := by\n  intro g₁ g₂ hg\n  let g := g₂⁻¹ * g₁\n  replace hg : g ≠ 1 := by\n    rw [Ne, inv_mul_eq_one]\n    exact hg.symm\n  have : (g₂⁻¹ • ·) ⁻¹' (g • s ∩ s) = g₁ • s ∩ g₂ • s := by\n    rw [preimage_eq_iff_eq_image (MulAction.bijective g₂⁻¹), image_smul, smul_set_inter, smul_smul,\n      smul_smul, inv_mul_cancel, one_smul]\n  change μ (g₁ • s ∩ g₂ • s) = 0\n  exact this ▸ (h_qmp g₂⁻¹).preimage_null (h_ae_disjoint g hg)\n\n"}
{"name":"MeasureTheory.NullMeasurableSet.mono_ac","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ns : Set α\nh : MeasureTheory.NullMeasurableSet s μ\nhle : ν.AbsolutelyContinuous μ\n⊢ MeasureTheory.NullMeasurableSet s ν","decl":"theorem NullMeasurableSet.mono_ac (h : NullMeasurableSet s μ) (hle : ν ≪ μ) :\n    NullMeasurableSet s ν :=\n  h.preimage <| (QuasiMeasurePreserving.id μ).mono_left hle\n\n"}
{"name":"MeasureTheory.NullMeasurableSet.mono","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\ns : Set α\nh : MeasureTheory.NullMeasurableSet s μ\nhle : LE.le ν μ\n⊢ MeasureTheory.NullMeasurableSet s ν","decl":"theorem NullMeasurableSet.mono (h : NullMeasurableSet s μ) (hle : ν ≤ μ) : NullMeasurableSet s ν :=\n  h.mono_ac hle.absolutelyContinuous\n\n"}
{"name":"MeasureTheory.AEDisjoint.preimage","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → β\ns t : Set β\nht : MeasureTheory.AEDisjoint ν s t\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ ν\n⊢ MeasureTheory.AEDisjoint μ (Set.preimage f s) (Set.preimage f t)","decl":"theorem AEDisjoint.preimage {ν : Measure β} {f : α → β} {s t : Set β} (ht : AEDisjoint ν s t)\n    (hf : QuasiMeasurePreserving f μ ν) : AEDisjoint μ (f ⁻¹' s) (f ⁻¹' t) :=\n  hf.preimage_null ht\n\n"}
{"name":"MeasurableEquiv.quasiMeasurePreserving_symm","module":"Mathlib.MeasureTheory.Measure.QuasiMeasurePreserving","initialProofState":"α : Type u_1\nβ : Type u_2\nx✝ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ne : MeasurableEquiv α β\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving (⇑e.symm) (MeasureTheory.Measure.map (⇑e) μ) μ","decl":"theorem quasiMeasurePreserving_symm (μ : Measure α) (e : α ≃ᵐ β) :\n    Measure.QuasiMeasurePreserving e.symm (μ.map e) μ :=\n  ⟨e.symm.measurable, by rw [Measure.map_map, e.symm_comp_self, Measure.map_id] <;> measurability⟩\n\n"}
