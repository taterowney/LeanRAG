{"name":"CategoryTheory.Abelian.Ext.hom_comp_singleFunctor_map_shift","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Abelian C\ninst✝¹ : CategoryTheory.HasExt C\ninst✝ : HasDerivedCategory C\nX Y Z : C\nn : Nat\nx : CategoryTheory.Abelian.Ext X Y n\nf : Quiver.Hom Y Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp x.hom ((CategoryTheory.shiftFunctor (DerivedCategory C) ↑n).map ((DerivedCategory.singleFunctor C 0).map f))) (x.comp (CategoryTheory.Abelian.Ext.mk₀ f) ⋯).hom","decl":"lemma hom_comp_singleFunctor_map_shift [HasDerivedCategory.{w'} C]\n    {X Y Z : C} {n : ℕ} (x : Ext X Y n) (f : Y ⟶ Z) :\n    x.hom ≫ ((DerivedCategory.singleFunctor C 0).map f)⟦(n : ℤ)⟧' =\n      (x.comp (mk₀ f) (add_zero n)).hom := by\n  simp only [comp_hom, mk₀_hom, ShiftedHom.comp_mk₀]\n\n"}
{"name":"CategoryTheory.Abelian.Ext.preadditiveCoyoneda_homologySequenceδ_singleTriangle_apply","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Abelian C\ninst✝¹ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\ninst✝ : HasDerivedCategory C\nX : C\nn₀ : Nat\nx : CategoryTheory.Abelian.Ext X S.X₃ n₀\nn₁ : Nat\nh : Eq (HAdd.hAdd n₀ 1) n₁\n⊢ Eq ((CategoryTheory.ConcreteCategory.hom ((CategoryTheory.preadditiveCoyoneda.obj { unop := (DerivedCategory.singleFunctor C 0).obj X }).homologySequenceδ hS.singleTriangle ↑n₀ ↑n₁ ⋯)) x.hom) (x.comp hS.extClass h).hom","decl":"lemma preadditiveCoyoneda_homologySequenceδ_singleTriangle_apply\n    [HasDerivedCategory.{w'} C] {X : C} {n₀ : ℕ} (x : Ext X S.X₃ n₀)\n    {n₁ : ℕ} (h : n₀ + 1 = n₁) :\n    (preadditiveCoyoneda.obj (op ((singleFunctor C 0).obj X))).homologySequenceδ\n      hS.singleTriangle n₀ n₁ (by omega) x.hom =\n        (x.comp hS.extClass h).hom := by\n  rw [Pretriangulated.preadditiveCoyoneda_homologySequenceδ_apply,\n    comp_hom, hS.extClass_hom, ShiftedHom.comp]\n  rfl\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariant_sequence_exact₂'","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn : Nat\n⊢ (CategoryTheory.ShortComplex.mk (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.f).postcomp X ⋯)) (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.g).postcomp X ⋯)) ⋯).Exact","decl":"include hS in\n/-- Alternative formulation of `covariant_sequence_exact₂` -/\nlemma covariant_sequence_exact₂' (n : ℕ) :\n    (ShortComplex.mk (AddCommGrp.ofHom ((mk₀ S.f).postcomp X (add_zero n)))\n      (AddCommGrp.ofHom ((mk₀ S.g).postcomp X (add_zero n))) (by\n        ext x\n        dsimp\n        simp only [comp_assoc_of_third_deg_zero, mk₀_comp_mk₀, ShortComplex.zero, mk₀_zero,\n          comp_zero])).Exact := by\n  letI := HasDerivedCategory.standard C\n  have := (preadditiveCoyoneda.obj (op ((singleFunctor C 0).obj X))).homologySequence_exact₂ _\n    (hS.singleTriangle_distinguished) n\n  rw [ShortComplex.ab_exact_iff_function_exact] at this ⊢\n  apply Function.Exact.of_ladder_addEquiv_of_exact' (e₁ := Ext.homAddEquiv)\n    (e₂ := Ext.homAddEquiv) (e₃ := Ext.homAddEquiv) (H := this)\n  all_goals ext x; apply hom_comp_singleFunctor_map_shift (C := C)\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariant_sequence_exact₃'","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn₀ n₁ : Nat\nh : Eq (HAdd.hAdd n₀ 1) n₁\n⊢ (CategoryTheory.ShortComplex.mk (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.g).postcomp X ⋯)) (AddCommGrp.ofHom (hS.extClass.postcomp X h)) ⋯).Exact","decl":"/-- Alternative formulation of `covariant_sequence_exact₃` -/\nlemma covariant_sequence_exact₃' :\n    (ShortComplex.mk (AddCommGrp.ofHom ((mk₀ S.g).postcomp X (add_zero n₀)))\n      (AddCommGrp.ofHom (hS.extClass.postcomp X h)) (by\n        ext x\n        dsimp\n        simp only [comp_assoc_of_second_deg_zero, ShortComplex.ShortExact.comp_extClass,\n          comp_zero])).Exact := by\n  letI := HasDerivedCategory.standard C\n  have := (preadditiveCoyoneda.obj (op ((singleFunctor C 0).obj X))).homologySequence_exact₃ _\n    (hS.singleTriangle_distinguished) n₀ n₁ (by omega)\n  rw [ShortComplex.ab_exact_iff_function_exact] at this ⊢\n  apply Function.Exact.of_ladder_addEquiv_of_exact' (e₁ := Ext.homAddEquiv)\n    (e₂ := Ext.homAddEquiv) (e₃ := Ext.homAddEquiv) (H := this)\n  · ext x; apply hom_comp_singleFunctor_map_shift (C := C)\n  · ext x\n    exact preadditiveCoyoneda_homologySequenceδ_singleTriangle_apply hS x h\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariant_sequence_exact₁'","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn₀ n₁ : Nat\nh : Eq (HAdd.hAdd n₀ 1) n₁\n⊢ (CategoryTheory.ShortComplex.mk (AddCommGrp.ofHom (hS.extClass.postcomp X h)) (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.f).postcomp X ⋯)) ⋯).Exact","decl":"/-- Alternative formulation of `covariant_sequence_exact₁` -/\nlemma covariant_sequence_exact₁' :\n    (ShortComplex.mk\n      (AddCommGrp.ofHom (hS.extClass.postcomp X h))\n      (AddCommGrp.ofHom ((mk₀ S.f).postcomp X (add_zero n₁))) (by\n        ext x\n        dsimp\n        simp only [comp_assoc_of_third_deg_zero, ShortComplex.ShortExact.extClass_comp,\n          comp_zero])).Exact := by\n  letI := HasDerivedCategory.standard C\n  have := (preadditiveCoyoneda.obj (op ((singleFunctor C 0).obj X))).homologySequence_exact₁ _\n    (hS.singleTriangle_distinguished) n₀ n₁ (by omega)\n  rw [ShortComplex.ab_exact_iff_function_exact] at this ⊢\n  apply Function.Exact.of_ladder_addEquiv_of_exact' (e₁ := Ext.homAddEquiv)\n    (e₂ := Ext.homAddEquiv) (e₃ := Ext.homAddEquiv) (H := this)\n  · ext x\n    exact preadditiveCoyoneda_homologySequenceδ_singleTriangle_apply hS x h\n  · ext x; apply hom_comp_singleFunctor_map_shift (C := C)\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariantSequence_exact","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn₀ n₁ : Nat\nh : Eq (HAdd.hAdd n₀ 1) n₁\n⊢ (CategoryTheory.Abelian.Ext.covariantSequence X hS n₀ n₁ h).Exact","decl":"lemma covariantSequence_exact :\n    (covariantSequence X hS n₀ n₁ h).Exact :=\n  exact_of_δ₀ (covariant_sequence_exact₂' X hS n₀).exact_toComposableArrows\n    (exact_of_δ₀ (covariant_sequence_exact₃' X hS n₀ n₁ h).exact_toComposableArrows\n      (exact_of_δ₀ (covariant_sequence_exact₁' X hS n₀ n₁ h).exact_toComposableArrows\n        (covariant_sequence_exact₂' X hS n₁).exact_toComposableArrows))\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariant_sequence_exact₁","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn₁ : Nat\nx₁ : CategoryTheory.Abelian.Ext X S.X₁ n₁\nhx₁ : Eq (x₁.comp (CategoryTheory.Abelian.Ext.mk₀ S.f) ⋯) 0\nn₀ : Nat\nhn₀ : Eq (HAdd.hAdd n₀ 1) n₁\n⊢ Exists fun x₃ => Eq (x₃.comp hS.extClass hn₀) x₁","decl":"lemma covariant_sequence_exact₁ {n₁ : ℕ} (x₁ : Ext X S.X₁ n₁)\n    (hx₁ : x₁.comp (mk₀ S.f) (add_zero n₁) = 0) {n₀ : ℕ} (hn₀ : n₀ + 1 = n₁) :\n    ∃ (x₃ : Ext X S.X₃ n₀), x₃.comp hS.extClass hn₀ = x₁ := by\n  have := covariant_sequence_exact₁' X hS n₀ n₁ hn₀\n  rw [ShortComplex.ab_exact_iff] at this\n  exact this x₁ hx₁\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariant_sequence_exact₂","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn : Nat\nx₂ : CategoryTheory.Abelian.Ext X S.X₂ n\nhx₂ : Eq (x₂.comp (CategoryTheory.Abelian.Ext.mk₀ S.g) ⋯) 0\n⊢ Exists fun x₁ => Eq (x₁.comp (CategoryTheory.Abelian.Ext.mk₀ S.f) ⋯) x₂","decl":"include hS in\nlemma covariant_sequence_exact₂ {n : ℕ} (x₂ : Ext X S.X₂ n)\n    (hx₂ : x₂.comp (mk₀ S.g) (add_zero n) = 0) :\n    ∃ (x₁ : Ext X S.X₁ n), x₁.comp (mk₀ S.f) (add_zero n) = x₂ := by\n  have := covariant_sequence_exact₂' X hS n\n  rw [ShortComplex.ab_exact_iff] at this\n  exact this x₂ hx₂\n\n"}
{"name":"CategoryTheory.Abelian.Ext.covariant_sequence_exact₃","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nX : C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn₀ : Nat\nx₃ : CategoryTheory.Abelian.Ext X S.X₃ n₀\nn₁ : Nat\nhn₁ : Eq (HAdd.hAdd n₀ 1) n₁\nhx₃ : Eq (x₃.comp hS.extClass hn₁) 0\n⊢ Exists fun x₂ => Eq (x₂.comp (CategoryTheory.Abelian.Ext.mk₀ S.g) ⋯) x₃","decl":"lemma covariant_sequence_exact₃ {n₀ : ℕ} (x₃ : Ext X S.X₃ n₀) {n₁ : ℕ} (hn₁ : n₀ + 1 = n₁)\n    (hx₃ : x₃.comp hS.extClass hn₁ = 0) :\n    ∃ (x₂ : Ext X S.X₂ n₀), x₂.comp (mk₀ S.g) (add_zero n₀) = x₃ := by\n  have := covariant_sequence_exact₃' X hS n₀ n₁ hn₁\n  rw [ShortComplex.ab_exact_iff] at this\n  exact this x₃ hx₃\n\n"}
{"name":"CategoryTheory.Abelian.Ext.singleFunctor_map_comp_hom","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Abelian C\ninst✝¹ : CategoryTheory.HasExt C\ninst✝ : HasDerivedCategory C\nX Y Z : C\nf : Quiver.Hom X Y\nn : Nat\nx : CategoryTheory.Abelian.Ext Y Z n\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((DerivedCategory.singleFunctor C 0).map f) x.hom) ((CategoryTheory.Abelian.Ext.mk₀ f).comp x ⋯).hom","decl":"lemma singleFunctor_map_comp_hom [HasDerivedCategory.{w'} C]\n    {X Y Z : C} (f : X ⟶ Y) {n : ℕ} (x : Ext Y Z n) :\n    (DerivedCategory.singleFunctor C 0).map f ≫ x.hom =\n      ((mk₀ f).comp x (zero_add n)).hom := by\n  simp only [comp_hom, mk₀_hom, ShiftedHom.mk₀_comp]\n\n"}
{"name":"CategoryTheory.Abelian.Ext.preadditiveYoneda_homologySequenceδ_singleTriangle_apply","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝³ : CategoryTheory.Category.{v, u} C\ninst✝² : CategoryTheory.Abelian C\ninst✝¹ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\ninst✝ : HasDerivedCategory C\nY : C\nn₀ : Nat\nx : CategoryTheory.Abelian.Ext S.X₁ Y n₀\nn₁ : Nat\nh : Eq (HAdd.hAdd 1 n₀) n₁\n⊢ Eq ((CategoryTheory.ConcreteCategory.hom ((CategoryTheory.preadditiveYoneda.obj ((DerivedCategory.singleFunctor C 0).obj Y)).homologySequenceδ ((CategoryTheory.Pretriangulated.triangleOpEquivalence (DerivedCategory C)).functor.obj { unop := hS.singleTriangle }) ↑n₀ ↑n₁ ⋯)) x.hom) (hS.extClass.comp x h).hom","decl":"lemma preadditiveYoneda_homologySequenceδ_singleTriangle_apply\n    [HasDerivedCategory.{w'} C] {Y : C} {n₀ : ℕ} (x : Ext S.X₁ Y n₀)\n    {n₁ : ℕ} (h : 1 + n₀ = n₁) :\n    (preadditiveYoneda.obj ((singleFunctor C 0).obj Y)).homologySequenceδ\n      ((triangleOpEquivalence _).functor.obj (op hS.singleTriangle)) n₀ n₁ (by omega) x.hom =\n      (hS.extClass.comp x h).hom := by\n  rw [preadditiveYoneda_homologySequenceδ_apply,\n    comp_hom, hS.extClass_hom, ShiftedHom.comp]\n  rfl\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariant_sequence_exact₂'","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn : Nat\n⊢ (CategoryTheory.ShortComplex.mk (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.g).precomp Y ⋯)) (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.f).precomp Y ⋯)) ⋯).Exact","decl":"include hS in\n/-- Alternative formulation of `contravariant_sequence_exact₂` -/\nlemma contravariant_sequence_exact₂' (n : ℕ) :\n    (ShortComplex.mk (AddCommGrp.ofHom ((mk₀ S.g).precomp Y (zero_add n)))\n      (AddCommGrp.ofHom ((mk₀ S.f).precomp Y (zero_add n))) (by\n        ext\n        dsimp\n        simp only [mk₀_comp_mk₀_assoc, ShortComplex.zero, mk₀_zero, zero_comp])).Exact := by\n  letI := HasDerivedCategory.standard C\n  have := (preadditiveYoneda.obj ((singleFunctor C 0).obj Y)).homologySequence_exact₂ _\n    (op_distinguished _ hS.singleTriangle_distinguished) n\n  rw [ShortComplex.ab_exact_iff_function_exact] at this ⊢\n  apply Function.Exact.of_ladder_addEquiv_of_exact' (e₁ := Ext.homAddEquiv)\n    (e₂ := Ext.homAddEquiv) (e₃ := Ext.homAddEquiv) (H := this)\n  all_goals ext; apply singleFunctor_map_comp_hom (C := C)\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariant_sequence_exact₁'","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn₀ n₁ : Nat\nh : Eq (HAdd.hAdd 1 n₀) n₁\n⊢ (CategoryTheory.ShortComplex.mk (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.f).precomp Y ⋯)) (AddCommGrp.ofHom (hS.extClass.precomp Y h)) ⋯).Exact","decl":"/-- Alternative formulation of `contravariant_sequence_exact₁` -/\nlemma contravariant_sequence_exact₁' :\n    (ShortComplex.mk (AddCommGrp.ofHom (((mk₀ S.f).precomp Y (zero_add n₀))))\n      (AddCommGrp.ofHom (hS.extClass.precomp Y h)) (by\n        ext\n        dsimp\n        simp only [ShortComplex.ShortExact.extClass_comp_assoc])).Exact := by\n  letI := HasDerivedCategory.standard C\n  have := (preadditiveYoneda.obj ((singleFunctor C 0).obj Y)).homologySequence_exact₃ _\n    (op_distinguished _ hS.singleTriangle_distinguished) n₀ n₁ (by omega)\n  rw [ShortComplex.ab_exact_iff_function_exact] at this ⊢\n  apply Function.Exact.of_ladder_addEquiv_of_exact' (e₁ := Ext.homAddEquiv)\n    (e₂ := Ext.homAddEquiv) (e₃ := Ext.homAddEquiv) (H := this)\n  · ext; apply singleFunctor_map_comp_hom (C := C)\n  · ext; dsimp; apply preadditiveYoneda_homologySequenceδ_singleTriangle_apply\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariant_sequence_exact₃'","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn₀ n₁ : Nat\nh : Eq (HAdd.hAdd 1 n₀) n₁\n⊢ (CategoryTheory.ShortComplex.mk (AddCommGrp.ofHom (hS.extClass.precomp Y h)) (AddCommGrp.ofHom ((CategoryTheory.Abelian.Ext.mk₀ S.g).precomp Y ⋯)) ⋯).Exact","decl":"/-- Alternative formulation of `contravariant_sequence_exact₃` -/\nlemma contravariant_sequence_exact₃' :\n    (ShortComplex.mk (AddCommGrp.ofHom (hS.extClass.precomp Y h))\n      (AddCommGrp.ofHom (((mk₀ S.g).precomp Y (zero_add n₁)))) (by\n        ext\n        dsimp\n        simp only [ShortComplex.ShortExact.comp_extClass_assoc])).Exact := by\n  letI := HasDerivedCategory.standard C\n  have := (preadditiveYoneda.obj ((singleFunctor C 0).obj Y)).homologySequence_exact₁ _\n    (op_distinguished _ hS.singleTriangle_distinguished) n₀ n₁ (by omega)\n  rw [ShortComplex.ab_exact_iff_function_exact] at this ⊢\n  apply Function.Exact.of_ladder_addEquiv_of_exact' (e₁ := Ext.homAddEquiv)\n    (e₂ := Ext.homAddEquiv) (e₃ := Ext.homAddEquiv) (H := this)\n  · ext; dsimp; apply preadditiveYoneda_homologySequenceδ_singleTriangle_apply\n  · ext; apply singleFunctor_map_comp_hom (C := C)\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariantSequence_exact","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn₀ n₁ : Nat\nh : Eq (HAdd.hAdd 1 n₀) n₁\n⊢ (CategoryTheory.Abelian.Ext.contravariantSequence hS Y n₀ n₁ h).Exact","decl":"lemma contravariantSequence_exact :\n    (contravariantSequence hS Y n₀ n₁ h).Exact :=\n  exact_of_δ₀ (contravariant_sequence_exact₂' hS Y n₀).exact_toComposableArrows\n    (exact_of_δ₀ (contravariant_sequence_exact₁' hS Y n₀ n₁ h).exact_toComposableArrows\n      (exact_of_δ₀ (contravariant_sequence_exact₃' hS Y n₀ n₁ h).exact_toComposableArrows\n        (contravariant_sequence_exact₂' hS Y n₁).exact_toComposableArrows))\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariant_sequence_exact₁","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn₀ : Nat\nx₁ : CategoryTheory.Abelian.Ext S.X₁ Y n₀\nn₁ : Nat\nhn₁ : Eq (HAdd.hAdd 1 n₀) n₁\nhx₁ : Eq (hS.extClass.comp x₁ hn₁) 0\n⊢ Exists fun x₂ => Eq ((CategoryTheory.Abelian.Ext.mk₀ S.f).comp x₂ ⋯) x₁","decl":"lemma contravariant_sequence_exact₁ {n₀ : ℕ} (x₁ : Ext S.X₁ Y n₀) {n₁ : ℕ} (hn₁ : 1 + n₀ = n₁)\n    (hx₁ : hS.extClass.comp x₁ hn₁ = 0) :\n    ∃ (x₂ : Ext S.X₂ Y n₀), (mk₀ S.f).comp x₂ (zero_add n₀) = x₁ := by\n  have := contravariant_sequence_exact₁' hS Y n₀ n₁ hn₁\n  rw [ShortComplex.ab_exact_iff] at this\n  exact this x₁ hx₁\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariant_sequence_exact₂","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn : Nat\nx₂ : CategoryTheory.Abelian.Ext S.X₂ Y n\nhx₂ : Eq ((CategoryTheory.Abelian.Ext.mk₀ S.f).comp x₂ ⋯) 0\n⊢ Exists fun x₁ => Eq ((CategoryTheory.Abelian.Ext.mk₀ S.g).comp x₁ ⋯) x₂","decl":"include hS in\nlemma contravariant_sequence_exact₂ {n : ℕ} (x₂ : Ext S.X₂ Y n)\n    (hx₂ : (mk₀ S.f).comp x₂ (zero_add n) = 0) :\n    ∃ (x₁ : Ext S.X₃ Y n), (mk₀ S.g).comp x₁ (zero_add n) = x₂ := by\n  have := contravariant_sequence_exact₂' hS Y n\n  rw [ShortComplex.ab_exact_iff] at this\n  exact this x₂ hx₂\n\n"}
{"name":"CategoryTheory.Abelian.Ext.contravariant_sequence_exact₃","module":"Mathlib.Algebra.Homology.DerivedCategory.Ext.ExactSequences","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Abelian C\ninst✝ : CategoryTheory.HasExt C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nY : C\nn₁ : Nat\nx₃ : CategoryTheory.Abelian.Ext S.X₃ Y n₁\nhx₃ : Eq ((CategoryTheory.Abelian.Ext.mk₀ S.g).comp x₃ ⋯) 0\nn₀ : Nat\nhn₀ : Eq (HAdd.hAdd 1 n₀) n₁\n⊢ Exists fun x₁ => Eq (hS.extClass.comp x₁ hn₀) x₃","decl":"lemma contravariant_sequence_exact₃ {n₁ : ℕ} (x₃ : Ext S.X₃ Y n₁)\n    (hx₃ : (mk₀ S.g).comp x₃ (zero_add n₁) = 0) {n₀ : ℕ} (hn₀ : 1 + n₀ = n₁) :\n    ∃ (x₁ : Ext S.X₁ Y n₀), hS.extClass.comp x₁ hn₀ = x₃ := by\n  have := contravariant_sequence_exact₃' hS Y n₀ n₁ hn₀\n  rw [ShortComplex.ab_exact_iff] at this\n  exact this x₃ hx₃\n\n"}
