{"name":"Polynomial.ofReal_eval","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\np : Polynomial Real\nx : Real\n⊢ Eq (↑(Polynomial.eval x p)) ((Polynomial.aeval ↑x) p)","decl":"theorem ofReal_eval (p : ℝ[X]) (x : ℝ) : (↑(p.eval x) : K) = aeval (↑x) p :=\n  (@aeval_algebraMap_apply_eq_algebraMap_eval ℝ K _ _ _ x p).symm\n\n"}
{"name":"RCLike.span_one_I","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ Eq (Submodule.span Real (Insert.insert 1 (Singleton.singleton RCLike.I))) Top.top","decl":"variable (K) in\nlemma RCLike.span_one_I : Submodule.span ℝ (M := K) {1, I} = ⊤ := by\n  suffices ∀ x : K, ∃ a b : ℝ, a • 1 + b • I = x by\n    simpa [Submodule.eq_top_iff', Submodule.mem_span_pair]\n  exact fun x ↦ ⟨re x, im x, by simp [real_smul_eq_coe_mul]⟩\n\n"}
{"name":"RCLike.rank_le_two","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ LE.le (Module.rank Real K) 2","decl":"variable (K) in\nlemma RCLike.rank_le_two : Module.rank ℝ K ≤ 2 :=\n  calc\n    _ = Module.rank ℝ ↥(Submodule.span ℝ ({1, I} : Set K)) := by rw [span_one_I]; simp\n    _ ≤ #({1, I} : Finset K) := by\n      -- TODO: `simp` doesn't rewrite inside the type argument to `Module.rank`, but `rw` does.\n      -- We should introduce `Submodule.rank` to fix this.\n      have := rank_span_finset_le (R := ℝ) (M := K) {1, I}\n      rw [Finset.coe_pair] at this\n      simpa [span_one_I] using this\n    _ ≤ 2 := mod_cast Finset.card_le_two\n\n"}
{"name":"RCLike.finrank_le_two","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ LE.le (Module.finrank Real K) 2","decl":"variable (K) in\nlemma RCLike.finrank_le_two : Module.finrank ℝ K ≤ 2 :=\n  Module.finrank_le_of_rank_le <| rank_le_two _\n\n"}
{"name":"FiniteDimensional.rclike_to_real","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ FiniteDimensional Real K","decl":"/-- An `RCLike` field is finite-dimensional over `ℝ`, since it is spanned by `{1, I}`. -/\ninstance rclike_to_real : FiniteDimensional ℝ K := ⟨{1, I}, by simp [span_one_I]⟩\n\n"}
{"name":"FiniteDimensional.proper_rclike","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\nE : Type u_2\ninst✝³ : RCLike K\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace K E\ninst✝ : FiniteDimensional K E\n⊢ ProperSpace E","decl":"/-- A finite dimensional vector space over an `RCLike` is a proper metric space.\n\nThis is not an instance because it would cause a search for `FiniteDimensional ?x E` before\n`RCLike ?x`. -/\ntheorem proper_rclike [FiniteDimensional K E] : ProperSpace E := by\n  letI : NormedSpace ℝ E := RestrictScalars.normedSpace ℝ K E\n  letI : FiniteDimensional ℝ E := FiniteDimensional.trans ℝ K E\n  infer_instance\n\n"}
{"name":"FiniteDimensional.RCLike.properSpace_submodule","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\nE : Type u_2\ninst✝³ : RCLike K\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace K E\nS : Submodule K E\ninst✝ : FiniteDimensional K (Subtype fun x => Membership.mem S x)\n⊢ ProperSpace (Subtype fun x => Membership.mem S x)","decl":"instance RCLike.properSpace_submodule (S : Submodule K E) [FiniteDimensional K S] :\n    ProperSpace S :=\n  proper_rclike K S\n\n"}
{"name":"RCLike.reCLM_norm","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ Eq (Norm.norm RCLike.reCLM) 1","decl":"@[simp, rclike_simps]\ntheorem reCLM_norm : ‖(reCLM : K →L[ℝ] ℝ)‖ = 1 := by\n  apply le_antisymm (LinearMap.mkContinuous_norm_le _ zero_le_one _)\n  convert ContinuousLinearMap.ratio_le_opNorm (reCLM : K →L[ℝ] ℝ) (1 : K)\n  simp\n\n"}
{"name":"RCLike.conjCLE_norm","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ Eq (Norm.norm ↑RCLike.conjCLE) 1","decl":"@[simp, rclike_simps]\ntheorem conjCLE_norm : ‖(@conjCLE K _ : K →L[ℝ] K)‖ = 1 :=\n  (@conjLIE K _).toLinearIsometry.norm_toContinuousLinearMap\n\n"}
{"name":"RCLike.ofRealCLM_norm","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\n⊢ Eq (Norm.norm RCLike.ofRealCLM) 1","decl":"@[simp, rclike_simps]\ntheorem ofRealCLM_norm : ‖(ofRealCLM : ℝ →L[ℝ] K)‖ = 1 :=\n  -- Porting note: the following timed out\n  -- LinearIsometry.norm_toContinuousLinearMap ofRealLI\n  LinearIsometry.norm_toContinuousLinearMap _\n\n"}
{"name":"Polynomial.aeval_conj","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\np : Polynomial Real\nz : K\n⊢ Eq ((Polynomial.aeval ((starRingEnd K) z)) p) ((starRingEnd K) ((Polynomial.aeval z) p))","decl":"open ComplexConjugate in\nlemma aeval_conj (p : ℝ[X]) (z : K) : aeval (conj z) p = conj (aeval z p) :=\n  aeval_algHom_apply (RCLike.conjAe (K := K)) z p\n\n"}
{"name":"Polynomial.aeval_ofReal","module":"Mathlib.Analysis.RCLike.Lemmas","initialProofState":"K : Type u_1\ninst✝ : RCLike K\np : Polynomial Real\nx : Real\n⊢ Eq ((Polynomial.aeval ↑x) p) ↑(Polynomial.eval x p)","decl":"lemma aeval_ofReal (p : ℝ[X]) (x : ℝ) : aeval (RCLike.ofReal x : K) p = eval x p :=\n  aeval_algHom_apply RCLike.ofRealAm x p\n\n"}
