{"name":"selfAdjoint.expUnitary_coe","module":"Mathlib.Analysis.CStarAlgebra.Exponential","initialProofState":"A : Type u_1\ninst✝⁵ : NormedRing A\ninst✝⁴ : NormedAlgebra Complex A\ninst✝³ : StarRing A\ninst✝² : ContinuousStar A\ninst✝¹ : CompleteSpace A\ninst✝ : StarModule Complex A\na : Subtype fun x => Membership.mem (selfAdjoint A) x\n⊢ Eq (↑(selfAdjoint.expUnitary a)) (NormedSpace.exp Complex (HSMul.hSMul Complex.I ↑a))","decl":"/-- The map from the selfadjoint real subspace to the unitary group. This map only makes sense\nover ℂ. -/\n@[simps]\nnoncomputable def selfAdjoint.expUnitary (a : selfAdjoint A) : unitary A :=\n  ⟨exp ℂ ((I • a.val) : A),\n      exp_mem_unitary_of_mem_skewAdjoint _ (a.prop.smul_mem_skewAdjoint conj_I)⟩\n\n"}
{"name":"Commute.expUnitary_add","module":"Mathlib.Analysis.CStarAlgebra.Exponential","initialProofState":"A : Type u_1\ninst✝⁵ : NormedRing A\ninst✝⁴ : NormedAlgebra Complex A\ninst✝³ : StarRing A\ninst✝² : ContinuousStar A\ninst✝¹ : CompleteSpace A\ninst✝ : StarModule Complex A\na b : Subtype fun x => Membership.mem (selfAdjoint A) x\nh : Commute ↑a ↑b\n⊢ Eq (selfAdjoint.expUnitary (HAdd.hAdd a b)) (HMul.hMul (selfAdjoint.expUnitary a) (selfAdjoint.expUnitary b))","decl":"theorem Commute.expUnitary_add {a b : selfAdjoint A} (h : Commute (a : A) (b : A)) :\n    expUnitary (a + b) = expUnitary a * expUnitary b := by\n  ext\n  have hcomm : Commute (I • (a : A)) (I • (b : A)) := by\n    unfold Commute SemiconjBy\n    simp only [h.eq, Algebra.smul_mul_assoc, Algebra.mul_smul_comm]\n  simpa only [expUnitary_coe, AddSubgroup.coe_add, smul_add] using exp_add_of_commute hcomm\n\n"}
{"name":"Commute.expUnitary","module":"Mathlib.Analysis.CStarAlgebra.Exponential","initialProofState":"A : Type u_1\ninst✝⁵ : NormedRing A\ninst✝⁴ : NormedAlgebra Complex A\ninst✝³ : StarRing A\ninst✝² : ContinuousStar A\ninst✝¹ : CompleteSpace A\ninst✝ : StarModule Complex A\na b : Subtype fun x => Membership.mem (selfAdjoint A) x\nh : Commute ↑a ↑b\n⊢ Commute (selfAdjoint.expUnitary a) (selfAdjoint.expUnitary b)","decl":"theorem Commute.expUnitary {a b : selfAdjoint A} (h : Commute (a : A) (b : A)) :\n    Commute (expUnitary a) (expUnitary b) :=\n  calc\n    selfAdjoint.expUnitary a * selfAdjoint.expUnitary b =\n        selfAdjoint.expUnitary b * selfAdjoint.expUnitary a := by\n      rw [← h.expUnitary_add, ← h.symm.expUnitary_add, add_comm]\n\n"}
