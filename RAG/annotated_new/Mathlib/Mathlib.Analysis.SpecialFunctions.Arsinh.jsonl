{"name":"Real.exp_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.exp (Real.arsinh x)) (HAdd.hAdd x (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt)","decl":"theorem exp_arsinh (x : ℝ) : exp (arsinh x) = x + √(1 + x ^ 2) := by\n  apply exp_log\n  rw [← neg_lt_iff_pos_add']\n  apply lt_sqrt_of_sq_lt\n  simp\n\n"}
{"name":"Real.arsinh_zero","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Eq (Real.arsinh 0) 0","decl":"@[simp]\ntheorem arsinh_zero : arsinh 0 = 0 := by simp [arsinh]\n\n"}
{"name":"Real.arsinh_neg","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.arsinh (Neg.neg x)) (Neg.neg (Real.arsinh x))","decl":"@[simp]\ntheorem arsinh_neg (x : ℝ) : arsinh (-x) = -arsinh x := by\n  rw [← exp_eq_exp, exp_arsinh, exp_neg, exp_arsinh]\n  apply eq_inv_of_mul_eq_one_left\n  rw [neg_sq, neg_add_eq_sub, add_comm x, mul_comm, ← sq_sub_sq, sq_sqrt, add_sub_cancel_right]\n  exact add_nonneg zero_le_one (sq_nonneg _)\n\n"}
{"name":"Real.sinh_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.sinh (Real.arsinh x)) x","decl":"/-- `arsinh` is the right inverse of `sinh`. -/\n@[simp]\ntheorem sinh_arsinh (x : ℝ) : sinh (arsinh x) = x := by\n  rw [sinh_eq, ← arsinh_neg, exp_arsinh, exp_arsinh, neg_sq]; field_simp\n\n"}
{"name":"Real.cosh_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.cosh (Real.arsinh x)) (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt","decl":"@[simp]\ntheorem cosh_arsinh (x : ℝ) : cosh (arsinh x) = √(1 + x ^ 2) := by\n  rw [← sqrt_sq (cosh_pos _).le, cosh_sq', sinh_arsinh]\n\n"}
{"name":"Real.sinh_surjective","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Function.Surjective Real.sinh","decl":"/-- `sinh` is surjective, `∀ b, ∃ a, sinh a = b`. In this case, we use `a = arsinh b`. -/\ntheorem sinh_surjective : Surjective sinh :=\n  LeftInverse.surjective sinh_arsinh\n\n"}
{"name":"Real.sinh_bijective","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Function.Bijective Real.sinh","decl":"/-- `sinh` is bijective, both injective and surjective. -/\ntheorem sinh_bijective : Bijective sinh :=\n  ⟨sinh_injective, sinh_surjective⟩\n\n"}
{"name":"Real.arsinh_sinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.arsinh (Real.sinh x)) x","decl":"/-- `arsinh` is the left inverse of `sinh`. -/\n@[simp]\ntheorem arsinh_sinh (x : ℝ) : arsinh (sinh x) = x :=\n  rightInverse_of_injective_of_leftInverse sinh_injective sinh_arsinh x\n\n"}
{"name":"Real.sinhEquiv_symm_apply","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.sinhEquiv.symm x) (Real.arsinh x)","decl":"/-- `Real.sinh` as an `Equiv`. -/\n@[simps]\ndef sinhEquiv : ℝ ≃ ℝ where\n  toFun := sinh\n  invFun := arsinh\n  left_inv := arsinh_sinh\n  right_inv := sinh_arsinh\n\n"}
{"name":"Real.sinhEquiv_apply","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Eq (Real.sinhEquiv x) (Real.sinh x)","decl":"/-- `Real.sinh` as an `Equiv`. -/\n@[simps]\ndef sinhEquiv : ℝ ≃ ℝ where\n  toFun := sinh\n  invFun := arsinh\n  left_inv := arsinh_sinh\n  right_inv := sinh_arsinh\n\n"}
{"name":"Real.sinhOrderIso_symm_apply","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Eq (⇑(RelIso.symm Real.sinhOrderIso)) Real.arsinh","decl":"/-- `Real.sinh` as an `OrderIso`. -/\n@[simps! (config := .asFn)]\ndef sinhOrderIso : ℝ ≃o ℝ where\n  toEquiv := sinhEquiv\n  map_rel_iff' := @sinh_le_sinh\n\n"}
{"name":"Real.sinhOrderIso_apply","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Eq (⇑Real.sinhOrderIso) Real.sinh","decl":"/-- `Real.sinh` as an `OrderIso`. -/\n@[simps! (config := .asFn)]\ndef sinhOrderIso : ℝ ≃o ℝ where\n  toEquiv := sinhEquiv\n  map_rel_iff' := @sinh_le_sinh\n\n"}
{"name":"Real.sinhHomeomorph_symm_apply","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Eq (⇑Real.sinhHomeomorph.symm) Real.arsinh","decl":"/-- `Real.sinh` as a `Homeomorph`. -/\n@[simps! (config := .asFn)]\ndef sinhHomeomorph : ℝ ≃ₜ ℝ :=\n  sinhOrderIso.toHomeomorph\n\n"}
{"name":"Real.sinhHomeomorph_apply","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Eq (⇑Real.sinhHomeomorph) Real.sinh","decl":"/-- `Real.sinh` as a `Homeomorph`. -/\n@[simps! (config := .asFn)]\ndef sinhHomeomorph : ℝ ≃ₜ ℝ :=\n  sinhOrderIso.toHomeomorph\n\n"}
{"name":"Real.arsinh_bijective","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Function.Bijective Real.arsinh","decl":"theorem arsinh_bijective : Bijective arsinh :=\n  sinhEquiv.symm.bijective\n\n"}
{"name":"Real.arsinh_injective","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Function.Injective Real.arsinh","decl":"theorem arsinh_injective : Injective arsinh :=\n  sinhEquiv.symm.injective\n\n"}
{"name":"Real.arsinh_surjective","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Function.Surjective Real.arsinh","decl":"theorem arsinh_surjective : Surjective arsinh :=\n  sinhEquiv.symm.surjective\n\n"}
{"name":"Real.arsinh_strictMono","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ StrictMono Real.arsinh","decl":"theorem arsinh_strictMono : StrictMono arsinh :=\n  sinhOrderIso.symm.strictMono\n\n"}
{"name":"Real.arsinh_inj","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x y : Real\n⊢ Iff (Eq (Real.arsinh x) (Real.arsinh y)) (Eq x y)","decl":"@[simp]\ntheorem arsinh_inj : arsinh x = arsinh y ↔ x = y :=\n  arsinh_injective.eq_iff\n\n"}
{"name":"Real.arsinh_le_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x y : Real\n⊢ Iff (LE.le (Real.arsinh x) (Real.arsinh y)) (LE.le x y)","decl":"@[simp]\ntheorem arsinh_le_arsinh : arsinh x ≤ arsinh y ↔ x ≤ y :=\n  sinhOrderIso.symm.le_iff_le\n\n"}
{"name":"Real.GCongr.arsinh_le_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x y : Real\na✝ : LE.le x y\n⊢ LE.le (Real.arsinh x) (Real.arsinh y)","decl":"@[gcongr] protected alias ⟨_, GCongr.arsinh_le_arsinh⟩ := arsinh_le_arsinh\n\n"}
{"name":"Real.arsinh_lt_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x y : Real\n⊢ Iff (LT.lt (Real.arsinh x) (Real.arsinh y)) (LT.lt x y)","decl":"@[simp]\ntheorem arsinh_lt_arsinh : arsinh x < arsinh y ↔ x < y :=\n  sinhOrderIso.symm.lt_iff_lt\n\n"}
{"name":"Real.arsinh_eq_zero_iff","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Iff (Eq (Real.arsinh x) 0) (Eq x 0)","decl":"@[simp]\ntheorem arsinh_eq_zero_iff : arsinh x = 0 ↔ x = 0 :=\n  arsinh_injective.eq_iff' arsinh_zero\n\n"}
{"name":"Real.arsinh_nonneg_iff","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Iff (LE.le 0 (Real.arsinh x)) (LE.le 0 x)","decl":"@[simp]\ntheorem arsinh_nonneg_iff : 0 ≤ arsinh x ↔ 0 ≤ x := by rw [← sinh_le_sinh, sinh_zero, sinh_arsinh]\n\n"}
{"name":"Real.arsinh_nonpos_iff","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Iff (LE.le (Real.arsinh x) 0) (LE.le x 0)","decl":"@[simp]\ntheorem arsinh_nonpos_iff : arsinh x ≤ 0 ↔ x ≤ 0 := by rw [← sinh_le_sinh, sinh_zero, sinh_arsinh]\n\n"}
{"name":"Real.arsinh_pos_iff","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Iff (LT.lt 0 (Real.arsinh x)) (LT.lt 0 x)","decl":"@[simp]\ntheorem arsinh_pos_iff : 0 < arsinh x ↔ 0 < x :=\n  lt_iff_lt_of_le_iff_le arsinh_nonpos_iff\n\n"}
{"name":"Real.arsinh_neg_iff","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ Iff (LT.lt (Real.arsinh x) 0) (LT.lt x 0)","decl":"@[simp]\ntheorem arsinh_neg_iff : arsinh x < 0 ↔ x < 0 :=\n  lt_iff_lt_of_le_iff_le arsinh_nonneg_iff\n\n"}
{"name":"Real.hasStrictDerivAt_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ HasStrictDerivAt Real.arsinh (Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt) x","decl":"theorem hasStrictDerivAt_arsinh (x : ℝ) : HasStrictDerivAt arsinh (√(1 + x ^ 2))⁻¹ x := by\n  convert sinhHomeomorph.toPartialHomeomorph.hasStrictDerivAt_symm (mem_univ x) (cosh_pos _).ne'\n    (hasStrictDerivAt_sinh _) using 2\n  exact (cosh_arsinh _).symm\n\n"}
{"name":"Real.hasDerivAt_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"x : Real\n⊢ HasDerivAt Real.arsinh (Inv.inv (HAdd.hAdd 1 (HPow.hPow x 2)).sqrt) x","decl":"theorem hasDerivAt_arsinh (x : ℝ) : HasDerivAt arsinh (√(1 + x ^ 2))⁻¹ x :=\n  (hasStrictDerivAt_arsinh x).hasDerivAt\n\n"}
{"name":"Real.differentiable_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Differentiable Real Real.arsinh","decl":"theorem differentiable_arsinh : Differentiable ℝ arsinh := fun x =>\n  (hasDerivAt_arsinh x).differentiableAt\n\n"}
{"name":"Real.contDiff_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"n : ENat\n⊢ ContDiff Real (↑n) Real.arsinh","decl":"theorem contDiff_arsinh {n : ℕ∞} : ContDiff ℝ n arsinh :=\n  sinhHomeomorph.contDiff_symm_deriv (fun x => (cosh_pos x).ne') hasDerivAt_sinh contDiff_sinh\n\n"}
{"name":"Real.continuous_arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"⊢ Continuous Real.arsinh","decl":"@[continuity]\ntheorem continuous_arsinh : Continuous arsinh :=\n  sinhHomeomorph.symm.continuous\n\n"}
{"name":"Filter.Tendsto.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"α : Type u_1\nl : Filter α\nf : α → Real\na : Real\nh : Filter.Tendsto f l (nhds a)\n⊢ Filter.Tendsto (fun x => Real.arsinh (f x)) l (nhds (Real.arsinh a))","decl":"theorem Filter.Tendsto.arsinh {α : Type*} {l : Filter α} {f : α → ℝ} {a : ℝ}\n    (h : Tendsto f l (𝓝 a)) : Tendsto (fun x => arsinh (f x)) l (𝓝 (arsinh a)) :=\n  (continuous_arsinh.tendsto _).comp h\n\n"}
{"name":"ContinuousAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf : X → Real\na : X\nh : ContinuousAt f a\n⊢ ContinuousAt (fun x => Real.arsinh (f x)) a","decl":"nonrec theorem ContinuousAt.arsinh (h : ContinuousAt f a) :\n    ContinuousAt (fun x => arsinh (f x)) a :=\n  h.arsinh\n\n"}
{"name":"ContinuousWithinAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf : X → Real\ns : Set X\na : X\nh : ContinuousWithinAt f s a\n⊢ ContinuousWithinAt (fun x => Real.arsinh (f x)) s a","decl":"nonrec theorem ContinuousWithinAt.arsinh (h : ContinuousWithinAt f s a) :\n    ContinuousWithinAt (fun x => arsinh (f x)) s a :=\n  h.arsinh\n\n"}
{"name":"ContinuousOn.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf : X → Real\ns : Set X\nh : ContinuousOn f s\n⊢ ContinuousOn (fun x => Real.arsinh (f x)) s","decl":"theorem ContinuousOn.arsinh (h : ContinuousOn f s) : ContinuousOn (fun x => arsinh (f x)) s :=\n  fun x hx => (h x hx).arsinh\n\n"}
{"name":"Continuous.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf : X → Real\nh : Continuous f\n⊢ Continuous fun x => Real.arsinh (f x)","decl":"theorem Continuous.arsinh (h : Continuous f) : Continuous fun x => arsinh (f x) :=\n  continuous_arsinh.comp h\n\n"}
{"name":"HasStrictFDerivAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\na : E\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhf : HasStrictFDerivAt f f' a\n⊢ HasStrictFDerivAt (fun x => Real.arsinh (f x)) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (f a) 2)).sqrt) f') a","decl":"theorem HasStrictFDerivAt.arsinh (hf : HasStrictFDerivAt f f' a) :\n    HasStrictFDerivAt (fun x => arsinh (f x)) ((√(1 + f a ^ 2))⁻¹ • f') a :=\n  (hasStrictDerivAt_arsinh _).comp_hasStrictFDerivAt a hf\n\n"}
{"name":"HasFDerivAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\na : E\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhf : HasFDerivAt f f' a\n⊢ HasFDerivAt (fun x => Real.arsinh (f x)) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (f a) 2)).sqrt) f') a","decl":"theorem HasFDerivAt.arsinh (hf : HasFDerivAt f f' a) :\n    HasFDerivAt (fun x => arsinh (f x)) ((√(1 + f a ^ 2))⁻¹ • f') a :=\n  (hasDerivAt_arsinh _).comp_hasFDerivAt a hf\n\n"}
{"name":"HasFDerivWithinAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\na : E\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhf : HasFDerivWithinAt f f' s a\n⊢ HasFDerivWithinAt (fun x => Real.arsinh (f x)) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (f a) 2)).sqrt) f') s a","decl":"theorem HasFDerivWithinAt.arsinh (hf : HasFDerivWithinAt f f' s a) :\n    HasFDerivWithinAt (fun x => arsinh (f x)) ((√(1 + f a ^ 2))⁻¹ • f') s a :=\n  (hasDerivAt_arsinh _).comp_hasFDerivWithinAt a hf\n\n"}
{"name":"DifferentiableAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\na : E\nh : DifferentiableAt Real f a\n⊢ DifferentiableAt Real (fun x => Real.arsinh (f x)) a","decl":"theorem DifferentiableAt.arsinh (h : DifferentiableAt ℝ f a) :\n    DifferentiableAt ℝ (fun x => arsinh (f x)) a :=\n  (differentiable_arsinh _).comp a h\n\n"}
{"name":"DifferentiableWithinAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\na : E\nh : DifferentiableWithinAt Real f s a\n⊢ DifferentiableWithinAt Real (fun x => Real.arsinh (f x)) s a","decl":"theorem DifferentiableWithinAt.arsinh (h : DifferentiableWithinAt ℝ f s a) :\n    DifferentiableWithinAt ℝ (fun x => arsinh (f x)) s a :=\n  (differentiable_arsinh _).comp_differentiableWithinAt a h\n\n"}
{"name":"DifferentiableOn.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\nh : DifferentiableOn Real f s\n⊢ DifferentiableOn Real (fun x => Real.arsinh (f x)) s","decl":"theorem DifferentiableOn.arsinh (h : DifferentiableOn ℝ f s) :\n    DifferentiableOn ℝ (fun x => arsinh (f x)) s := fun x hx => (h x hx).arsinh\n\n"}
{"name":"Differentiable.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nh : Differentiable Real f\n⊢ Differentiable Real fun x => Real.arsinh (f x)","decl":"theorem Differentiable.arsinh (h : Differentiable ℝ f) : Differentiable ℝ fun x => arsinh (f x) :=\n  differentiable_arsinh.comp h\n\n"}
{"name":"ContDiffAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\na : E\nn : ENat\nh : ContDiffAt Real (↑n) f a\n⊢ ContDiffAt Real (↑n) (fun x => Real.arsinh (f x)) a","decl":"theorem ContDiffAt.arsinh (h : ContDiffAt ℝ n f a) : ContDiffAt ℝ n (fun x => arsinh (f x)) a :=\n  contDiff_arsinh.contDiffAt.comp a h\n\n"}
{"name":"ContDiffWithinAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\na : E\nn : ENat\nh : ContDiffWithinAt Real (↑n) f s a\n⊢ ContDiffWithinAt Real (↑n) (fun x => Real.arsinh (f x)) s a","decl":"theorem ContDiffWithinAt.arsinh (h : ContDiffWithinAt ℝ n f s a) :\n    ContDiffWithinAt ℝ n (fun x => arsinh (f x)) s a :=\n  contDiff_arsinh.contDiffAt.comp_contDiffWithinAt a h\n\n"}
{"name":"ContDiff.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nn : ENat\nh : ContDiff Real (↑n) f\n⊢ ContDiff Real ↑n fun x => Real.arsinh (f x)","decl":"theorem ContDiff.arsinh (h : ContDiff ℝ n f) : ContDiff ℝ n fun x => arsinh (f x) :=\n  contDiff_arsinh.comp h\n\n"}
{"name":"ContDiffOn.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\nn : ENat\nh : ContDiffOn Real (↑n) f s\n⊢ ContDiffOn Real (↑n) (fun x => Real.arsinh (f x)) s","decl":"theorem ContDiffOn.arsinh (h : ContDiffOn ℝ n f s) : ContDiffOn ℝ n (fun x => arsinh (f x)) s :=\n  fun x hx => (h x hx).arsinh\n\n"}
{"name":"HasStrictDerivAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"f : Real → Real\na f' : Real\nhf : HasStrictDerivAt f f' a\n⊢ HasStrictDerivAt (fun x => Real.arsinh (f x)) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (f a) 2)).sqrt) f') a","decl":"theorem HasStrictDerivAt.arsinh (hf : HasStrictDerivAt f f' a) :\n    HasStrictDerivAt (fun x => arsinh (f x)) ((√(1 + f a ^ 2))⁻¹ • f') a :=\n  (hasStrictDerivAt_arsinh _).comp a hf\n\n"}
{"name":"HasDerivAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"f : Real → Real\na f' : Real\nhf : HasDerivAt f f' a\n⊢ HasDerivAt (fun x => Real.arsinh (f x)) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (f a) 2)).sqrt) f') a","decl":"theorem HasDerivAt.arsinh (hf : HasDerivAt f f' a) :\n    HasDerivAt (fun x => arsinh (f x)) ((√(1 + f a ^ 2))⁻¹ • f') a :=\n  (hasDerivAt_arsinh _).comp a hf\n\n"}
{"name":"HasDerivWithinAt.arsinh","module":"Mathlib.Analysis.SpecialFunctions.Arsinh","initialProofState":"f : Real → Real\ns : Set Real\na f' : Real\nhf : HasDerivWithinAt f f' s a\n⊢ HasDerivWithinAt (fun x => Real.arsinh (f x)) (HSMul.hSMul (Inv.inv (HAdd.hAdd 1 (HPow.hPow (f a) 2)).sqrt) f') s a","decl":"theorem HasDerivWithinAt.arsinh (hf : HasDerivWithinAt f f' s a) :\n    HasDerivWithinAt (fun x => arsinh (f x)) ((√(1 + f a ^ 2))⁻¹ • f') s a :=\n  (hasDerivAt_arsinh _).comp_hasDerivWithinAt a hf\n\n"}
