{"name":"GenContFract.Pair.mk.sizeOf_spec","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\ninst✝ : SizeOf α\na b : α\n⊢ Eq (SizeOf.sizeOf { a := a, b := b }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf a)) (SizeOf.sizeOf b))","decl":"/-- We collect a partial numerator `aᵢ` and partial denominator `bᵢ` in a pair `⟨aᵢ, bᵢ⟩`. -/\nstructure GenContFract.Pair where\n  /-- Partial numerator -/\n  a : α\n  /-- Partial denominator -/\n  b : α\n  deriving Inhabited\n\n"}
{"name":"GenContFract.Pair.mk.injEq","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\na✝ b✝ a b : α\n⊢ Eq (Eq { a := a✝, b := b✝ } { a := a, b := b }) (And (Eq a✝ a) (Eq b✝ b))","decl":"/-- We collect a partial numerator `aᵢ` and partial denominator `bᵢ` in a pair `⟨aᵢ, bᵢ⟩`. -/\nstructure GenContFract.Pair where\n  /-- Partial numerator -/\n  a : α\n  /-- Partial denominator -/\n  b : α\n  deriving Inhabited\n\n"}
{"name":"GenContFract.Pair.mk.inj","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\na✝ b✝ a b : α\nx✝ : Eq { a := a✝, b := b✝ } { a := a, b := b }\n⊢ And (Eq a✝ a) (Eq b✝ b)","decl":"/-- We collect a partial numerator `aᵢ` and partial denominator `bᵢ` in a pair `⟨aᵢ, bᵢ⟩`. -/\nstructure GenContFract.Pair where\n  /-- Partial numerator -/\n  a : α\n  /-- Partial denominator -/\n  b : α\n  deriving Inhabited\n\n"}
{"name":"GenContFract.Pair.coe_toPair","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Coe α β\na b : α\n⊢ Eq ↑{ a := a, b := b } { a := Coe.coe a, b := Coe.coe b }","decl":"@[simp, norm_cast]\ntheorem coe_toPair {a b : α} : (↑(Pair.mk a b) : Pair β) = Pair.mk (a : β) (b : β) := rfl\n\n"}
{"name":"GenContFract.ext","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\nx y : GenContFract α\nh : Eq x.h y.h\ns : Eq x.s y.s\n⊢ Eq x y","decl":"/-- A *generalised continued fraction* (gcf) is a potentially infinite expression of the form\n$$\n  h + \\dfrac{a_0}\n            {b_0 + \\dfrac{a_1}\n                         {b_1 + \\dfrac{a_2}\n                                      {b_2 + \\dfrac{a_3}\n                                                   {b_3 + \\dots}}}}\n$$\nwhere `h` is called the *head term* or *integer part*, the `aᵢ` are called the\n*partial numerators* and the `bᵢ` the *partial denominators* of the gcf.\nWe store the sequence of partial numerators and denominators in a sequence of `GenContFract.Pair`s\n`s`.\nFor convenience, one often writes `[h; (a₀, b₀), (a₁, b₁), (a₂, b₂),...]`.\n-/\n@[ext]\nstructure GenContFract where\n  /-- Head term -/\n  h : α\n  /-- Sequence of partial numerator and denominator pairs. -/\n  s : Stream'.Seq <| Pair α\n\n"}
{"name":"GenContFract.mk.injEq","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\nh✝ : α\ns✝ : Stream'.Seq (GenContFract.Pair α)\nh : α\ns : Stream'.Seq (GenContFract.Pair α)\n⊢ Eq (Eq { h := h✝, s := s✝ } { h := h, s := s }) (And (Eq h✝ h) (Eq s✝ s))","decl":"/-- A *generalised continued fraction* (gcf) is a potentially infinite expression of the form\n$$\n  h + \\dfrac{a_0}\n            {b_0 + \\dfrac{a_1}\n                         {b_1 + \\dfrac{a_2}\n                                      {b_2 + \\dfrac{a_3}\n                                                   {b_3 + \\dots}}}}\n$$\nwhere `h` is called the *head term* or *integer part*, the `aᵢ` are called the\n*partial numerators* and the `bᵢ` the *partial denominators* of the gcf.\nWe store the sequence of partial numerators and denominators in a sequence of `GenContFract.Pair`s\n`s`.\nFor convenience, one often writes `[h; (a₀, b₀), (a₁, b₁), (a₂, b₂),...]`.\n-/\n@[ext]\nstructure GenContFract where\n  /-- Head term -/\n  h : α\n  /-- Sequence of partial numerator and denominator pairs. -/\n  s : Stream'.Seq <| Pair α\n\n"}
{"name":"GenContFract.mk.sizeOf_spec","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\ninst✝ : SizeOf α\nh : α\ns : Stream'.Seq (GenContFract.Pair α)\n⊢ Eq (SizeOf.sizeOf { h := h, s := s }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf h)) (SizeOf.sizeOf s))","decl":"/-- A *generalised continued fraction* (gcf) is a potentially infinite expression of the form\n$$\n  h + \\dfrac{a_0}\n            {b_0 + \\dfrac{a_1}\n                         {b_1 + \\dfrac{a_2}\n                                      {b_2 + \\dfrac{a_3}\n                                                   {b_3 + \\dots}}}}\n$$\nwhere `h` is called the *head term* or *integer part*, the `aᵢ` are called the\n*partial numerators* and the `bᵢ` the *partial denominators* of the gcf.\nWe store the sequence of partial numerators and denominators in a sequence of `GenContFract.Pair`s\n`s`.\nFor convenience, one often writes `[h; (a₀, b₀), (a₁, b₁), (a₂, b₂),...]`.\n-/\n@[ext]\nstructure GenContFract where\n  /-- Head term -/\n  h : α\n  /-- Sequence of partial numerator and denominator pairs. -/\n  s : Stream'.Seq <| Pair α\n\n"}
{"name":"GenContFract.mk.inj","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\nh✝ : α\ns✝ : Stream'.Seq (GenContFract.Pair α)\nh : α\ns : Stream'.Seq (GenContFract.Pair α)\nx✝ : Eq { h := h✝, s := s✝ } { h := h, s := s }\n⊢ And (Eq h✝ h) (Eq s✝ s)","decl":"/-- A *generalised continued fraction* (gcf) is a potentially infinite expression of the form\n$$\n  h + \\dfrac{a_0}\n            {b_0 + \\dfrac{a_1}\n                         {b_1 + \\dfrac{a_2}\n                                      {b_2 + \\dfrac{a_3}\n                                                   {b_3 + \\dots}}}}\n$$\nwhere `h` is called the *head term* or *integer part*, the `aᵢ` are called the\n*partial numerators* and the `bᵢ` the *partial denominators* of the gcf.\nWe store the sequence of partial numerators and denominators in a sequence of `GenContFract.Pair`s\n`s`.\nFor convenience, one often writes `[h; (a₀, b₀), (a₁, b₁), (a₂, b₂),...]`.\n-/\n@[ext]\nstructure GenContFract where\n  /-- Head term -/\n  h : α\n  /-- Sequence of partial numerator and denominator pairs. -/\n  s : Stream'.Seq <| Pair α\n\n"}
{"name":"GenContFract.ext_iff","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\nx y : GenContFract α\n⊢ Iff (Eq x y) (And (Eq x.h y.h) (Eq x.s y.s))","decl":"/-- A *generalised continued fraction* (gcf) is a potentially infinite expression of the form\n$$\n  h + \\dfrac{a_0}\n            {b_0 + \\dfrac{a_1}\n                         {b_1 + \\dfrac{a_2}\n                                      {b_2 + \\dfrac{a_3}\n                                                   {b_3 + \\dots}}}}\n$$\nwhere `h` is called the *head term* or *integer part*, the `aᵢ` are called the\n*partial numerators* and the `bᵢ` the *partial denominators* of the gcf.\nWe store the sequence of partial numerators and denominators in a sequence of `GenContFract.Pair`s\n`s`.\nFor convenience, one often writes `[h; (a₀, b₀), (a₁, b₁), (a₂, b₂),...]`.\n-/\n@[ext]\nstructure GenContFract where\n  /-- Head term -/\n  h : α\n  /-- Sequence of partial numerator and denominator pairs. -/\n  s : Stream'.Seq <| Pair α\n\n"}
{"name":"GenContFract.coe_toGenContFract","module":"Mathlib.Algebra.ContinuedFractions.Basic","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Coe α β\ng : GenContFract α\n⊢ Eq ↑g { h := Coe.coe g.h, s := Stream'.Seq.map GenContFract.Pair.coeFn g.s }","decl":"@[simp, norm_cast]\ntheorem coe_toGenContFract {g : GenContFract α} :\n    (g : GenContFract β) =\n      ⟨(g.h : β), (g.s.map (↑) : Stream'.Seq <| Pair β)⟩ := rfl\n\n"}
