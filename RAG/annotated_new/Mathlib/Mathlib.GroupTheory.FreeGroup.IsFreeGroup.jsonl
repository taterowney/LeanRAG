{"name":"FreeGroupBasis.ofRepr.sizeOf_spec","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝² : Group G\ninst✝¹ : SizeOf ι\ninst✝ : SizeOf G\nrepr : MulEquiv G (FreeGroup ι)\n⊢ Eq (SizeOf.sizeOf { repr := repr }) (HAdd.hAdd 1 (SizeOf.sizeOf repr))","decl":"/-- A free group basis `FreeGroupBasis ι G` is a structure recording the isomorphism between a\ngroup `G` and the free group over `ι`. One may think of such a basis as a function from `ι` to `G`\n(which is registered through a `FunLike` instance) together with the fact that the morphism induced\nby this function from `FreeGroup ι` to `G` is an isomorphism. -/\nstructure FreeGroupBasis (ι : Type*) (G : Type*) [Group G] where\n  /-- `FreeGroupBasis.ofRepr` constructs a basis given an equivalence with a free group. -/\n  ofRepr ::\n    /-- `repr` is the isomorphism between the group `G` and the free group generated by `ι`. -/\n    repr : G ≃* FreeGroup ι\n\n"}
{"name":"FreeGroupBasis.ofRepr.inj","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝ : Group G\nrepr✝ repr : MulEquiv G (FreeGroup ι)\nx✝ : Eq { repr := repr✝ } { repr := repr }\n⊢ Eq repr✝ repr","decl":"/-- A free group basis `FreeGroupBasis ι G` is a structure recording the isomorphism between a\ngroup `G` and the free group over `ι`. One may think of such a basis as a function from `ι` to `G`\n(which is registered through a `FunLike` instance) together with the fact that the morphism induced\nby this function from `FreeGroup ι` to `G` is an isomorphism. -/\nstructure FreeGroupBasis (ι : Type*) (G : Type*) [Group G] where\n  /-- `FreeGroupBasis.ofRepr` constructs a basis given an equivalence with a free group. -/\n  ofRepr ::\n    /-- `repr` is the isomorphism between the group `G` and the free group generated by `ι`. -/\n    repr : G ≃* FreeGroup ι\n\n"}
{"name":"FreeGroupBasis.ofRepr.injEq","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_2\ninst✝ : Group G\nrepr✝ repr : MulEquiv G (FreeGroup ι)\n⊢ Eq (Eq { repr := repr✝ } { repr := repr }) (Eq repr✝ repr)","decl":"/-- A free group basis `FreeGroupBasis ι G` is a structure recording the isomorphism between a\ngroup `G` and the free group over `ι`. One may think of such a basis as a function from `ι` to `G`\n(which is registered through a `FunLike` instance) together with the fact that the morphism induced\nby this function from `FreeGroup ι` to `G` is an isomorphism. -/\nstructure FreeGroupBasis (ι : Type*) (G : Type*) [Group G] where\n  /-- `FreeGroupBasis.ofRepr` constructs a basis given an equivalence with a free group. -/\n  ofRepr ::\n    /-- `repr` is the isomorphism between the group `G` and the free group generated by `ι`. -/\n    repr : G ≃* FreeGroup ι\n\n"}
{"name":"IsFreeGroup.nonempty_basis","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u\ninst✝ : Group G\nself : IsFreeGroup G\n⊢ Exists fun ι => Nonempty (FreeGroupBasis ι G)","decl":"/-- A group is free if it admits a free group basis. In the definition, we require the basis to\nbe in the same universe as `G`, although this property follows from the existence of a basis in\nany universe, see `FreeGroupBasis.isFreeGroup`. -/\nclass IsFreeGroup (G : Type u) [Group G] : Prop where\n  nonempty_basis : ∃ (ι : Type u), Nonempty (FreeGroupBasis ι G)\n\n"}
{"name":"FreeGroupBasis.repr_apply_coe","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\ninst✝ : Group G\nb : FreeGroupBasis ι G\ni : ι\n⊢ Eq (b.repr (b i)) (FreeGroup.of i)","decl":"@[simp] lemma repr_apply_coe (b : FreeGroupBasis ι G) (i : ι) : b.repr (b i) = FreeGroup.of i := by\n  change b.repr (b.repr.symm (FreeGroup.of i)) = FreeGroup.of i\n  simp\n\n"}
{"name":"FreeGroupBasis.ofFreeGroup_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"X : Type u_5\nx : X\n⊢ Eq ((FreeGroupBasis.ofFreeGroup X) x) (FreeGroup.of x)","decl":"@[simp] lemma ofFreeGroup_apply {X : Type*} (x : X) :\n    FreeGroupBasis.ofFreeGroup X x = FreeGroup.of x :=\n  rfl\n\n"}
{"name":"FreeGroupBasis.reindex_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nι' : Type u_2\nG : Type u_3\ninst✝ : Group G\nb : FreeGroupBasis ι G\ne : Equiv ι ι'\nx : ι'\n⊢ Eq ((b.reindex e) x) (b (e.symm x))","decl":"@[simp] lemma reindex_apply (b : FreeGroupBasis ι G) (e : ι ≃ ι') (x : ι') :\n    b.reindex e x = b (e.symm x) := rfl\n\n"}
{"name":"FreeGroupBasis.map_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\nH : Type u_4\ninst✝¹ : Group G\ninst✝ : Group H\nb : FreeGroupBasis ι G\ne : MulEquiv G H\nx : ι\n⊢ Eq ((b.map e) x) (e (b x))","decl":"@[simp] lemma map_apply (b : FreeGroupBasis ι G) (e : G ≃* H) (x : ι) :\n    b.map e x = e (b x) := rfl\n\n"}
{"name":"FreeGroupBasis.injective","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\ninst✝ : Group G\nb : FreeGroupBasis ι G\n⊢ Function.Injective ⇑b","decl":"protected lemma injective (b : FreeGroupBasis ι G) : Injective b :=\n  b.repr.symm.injective.comp FreeGroup.of_injective\n\n"}
{"name":"FreeGroupBasis.isFreeGroup","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\ninst✝ : Group G\nb : FreeGroupBasis ι G\n⊢ IsFreeGroup G","decl":"/-- A group admitting a free group basis is a free group. -/\nlemma isFreeGroup (b : FreeGroupBasis ι G) : IsFreeGroup G :=\n  ⟨range b, ⟨b.reindex (Equiv.ofInjective (↑b) b.injective)⟩⟩\n\n"}
{"name":"FreeGroupBasis.instIsFreeGroupFreeGroup","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"X : Type u_5\n⊢ IsFreeGroup (FreeGroup X)","decl":"instance (X : Type*) : IsFreeGroup (FreeGroup X) :=\n  (ofFreeGroup X).isFreeGroup\n\n"}
{"name":"FreeGroupBasis.lift_apply_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\nH : Type u_4\ninst✝¹ : Group G\ninst✝ : Group H\nb : FreeGroupBasis ι G\na✝¹ : ι → H\na✝ : G\n⊢ Eq ((b.lift a✝¹) a✝) ((FreeGroup.lift a✝¹) (b.repr a✝))","decl":"/-- Given a free group basis of `G` over `ι`, there is a canonical bijection between maps from `ι`\nto a group `H` and morphisms from `G` to `H`. -/\n@[simps!]\ndef lift (b : FreeGroupBasis ι G) : (ι → H) ≃ (G →* H) :=\n  FreeGroup.lift.trans\n    { toFun := fun f => f.comp b.repr.toMonoidHom\n      invFun := fun f => f.comp b.repr.symm.toMonoidHom\n      left_inv := fun f => by\n        ext\n        simp\n      right_inv := fun f => by\n        ext\n        simp }\n\n"}
{"name":"FreeGroupBasis.lift_symm_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\nH : Type u_4\ninst✝¹ : Group G\ninst✝ : Group H\nb : FreeGroupBasis ι G\na✝¹ : MonoidHom G H\na✝ : ι\n⊢ Eq (b.lift.symm a✝¹ a✝) (a✝¹ (b.repr.symm (FreeGroup.of a✝)))","decl":"/-- Given a free group basis of `G` over `ι`, there is a canonical bijection between maps from `ι`\nto a group `H` and morphisms from `G` to `H`. -/\n@[simps!]\ndef lift (b : FreeGroupBasis ι G) : (ι → H) ≃ (G →* H) :=\n  FreeGroup.lift.trans\n    { toFun := fun f => f.comp b.repr.toMonoidHom\n      invFun := fun f => f.comp b.repr.symm.toMonoidHom\n      left_inv := fun f => by\n        ext\n        simp\n      right_inv := fun f => by\n        ext\n        simp }\n\n"}
{"name":"FreeGroupBasis.ext_hom","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"ι : Type u_1\nG : Type u_3\nH : Type u_4\ninst✝¹ : Group G\ninst✝ : Group H\nb : FreeGroupBasis ι G\nf g : MonoidHom G H\nh : ∀ (i : ι), Eq (f (b i)) (g (b i))\n⊢ Eq f g","decl":"/-- If two morphisms on `G` coincide on the elements of a basis, then they coincide. -/\nlemma ext_hom (b : FreeGroupBasis ι G) (f g : G →* H) (h : ∀ i, f (b i) = g (b i)) : f = g :=\n  b.lift.symm.injective <| funext h\n\n"}
{"name":"IsFreeGroup.mulEquiv_def","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_2\ninst✝¹ : Group G\ninst✝ : IsFreeGroup G\n⊢ Eq (IsFreeGroup.mulEquiv G) ⋯.some.repr.symm","decl":"/-- Any free group is isomorphic to \"the\" free group. -/\nirreducible_def mulEquiv : FreeGroup (Generators G) ≃* G :=\n  (IsFreeGroup.nonempty_basis (G := G)).choose_spec.some.repr.symm\n\n"}
{"name":"IsFreeGroup.toFreeGroup_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsFreeGroup G\na✝ : G\n⊢ Eq ((IsFreeGroup.toFreeGroup G) a✝) ((IsFreeGroup.mulEquiv G).symm a✝)","decl":"/-- Any free group is isomorphic to \"the\" free group. -/\n@[simps!]\ndef toFreeGroup : G ≃* FreeGroup (Generators G) :=\n  (mulEquiv G).symm\n\n"}
{"name":"IsFreeGroup.toFreeGroup_symm_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsFreeGroup G\na✝ : FreeGroup (IsFreeGroup.Generators G)\n⊢ Eq ((IsFreeGroup.toFreeGroup G).symm a✝) ((IsFreeGroup.mulEquiv G) a✝)","decl":"/-- Any free group is isomorphic to \"the\" free group. -/\n@[simps!]\ndef toFreeGroup : G ≃* FreeGroup (Generators G) :=\n  (mulEquiv G).symm\n\n"}
{"name":"IsFreeGroup.lift_of","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : IsFreeGroup G\nH : Type u_2\ninst✝ : Group H\nf : IsFreeGroup.Generators G → H\na : IsFreeGroup.Generators G\n⊢ Eq ((IsFreeGroup.lift f) (IsFreeGroup.of a)) (f a)","decl":"@[simp]\ntheorem lift_of (f : Generators G → H) (a : Generators G) : lift f (of a) = f a :=\n  congr_fun (lift.symm_apply_apply f) a\n\n"}
{"name":"IsFreeGroup.lift_symm_apply","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : IsFreeGroup G\nH : Type u_2\ninst✝ : Group H\nf : MonoidHom G H\na : IsFreeGroup.Generators G\n⊢ Eq (IsFreeGroup.lift.symm f a) (f (IsFreeGroup.of a))","decl":"@[simp]\ntheorem lift_symm_apply (f : G →* H) (a : Generators G) : (lift.symm f) a = f (of a) :=\n  rfl\n\n/- Do not register this as an ext lemma, as `Generators G` is not canonical. -/\n"}
{"name":"IsFreeGroup.ext_hom","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : IsFreeGroup G\nH : Type u_2\ninst✝ : Group H\nf g : MonoidHom G H\nh : ∀ (a : IsFreeGroup.Generators G), Eq (f (IsFreeGroup.of a)) (g (IsFreeGroup.of a))\n⊢ Eq f g","decl":"theorem ext_hom ⦃f g : G →* H⦄ (h : ∀ a : Generators G, f (of a) = g (of a)) : f = g :=\n  lift.symm.injective (funext h)\n\n"}
{"name":"IsFreeGroup.unique_lift","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : IsFreeGroup G\nH : Type u_2\ninst✝ : Group H\nf : IsFreeGroup.Generators G → H\n⊢ ExistsUnique fun F => ∀ (a : IsFreeGroup.Generators G), Eq (F (IsFreeGroup.of a)) (f a)","decl":"/-- The universal property of a free group: A function from the generators of `G` to another\ngroup extends in a unique way to a homomorphism from `G`.\n\nNote that since `IsFreeGroup.lift` is expressed as a bijection, it already\nexpresses the universal property. -/\ntheorem unique_lift (f : Generators G → H) : ∃! F : G →* H, ∀ a, F (of a) = f a := by\n  simpa only [funext_iff] using lift.symm.bijective.existsUnique f\n\n"}
{"name":"IsFreeGroup.ofLift","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u\ninst✝ : Group G\nX : Type u\nof : X → G\nlift : {H : Type u} → [inst : Group H] → Equiv (X → H) (MonoidHom G H)\nlift_of : ∀ {H : Type u} [inst : Group H] (f : X → H) (a : X), Eq ((lift f) (of a)) (f a)\n⊢ IsFreeGroup G","decl":"/-- If a group satisfies the universal property of a free group with respect to a given type, then\nit is free. Here, the universal property is expressed as in `IsFreeGroup.lift` and its\nproperties. -/\nlemma ofLift {G : Type u} [Group G] (X : Type u) (of : X → G)\n    (lift : ∀ {H : Type u} [Group H], (X → H) ≃ (G →* H))\n    (lift_of : ∀ {H : Type u} [Group H], ∀ (f : X → H) (a), lift f (of a) = f a) :\n    IsFreeGroup G :=\n  (FreeGroupBasis.ofLift X of lift lift_of).isFreeGroup\n\n"}
{"name":"IsFreeGroup.ofUniqueLift","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u\ninst✝ : Group G\nX : Type u\nof : X → G\nh : ∀ {H : Type u} [inst : Group H] (f : X → H), ExistsUnique fun F => ∀ (a : X), Eq (F (of a)) (f a)\n⊢ IsFreeGroup G","decl":"/-- If a group satisfies the universal property of a free group with respect to a given type, then\nit is free. Here the universal property is expressed as in `IsFreeGroup.unique_lift`. -/\nlemma ofUniqueLift {G : Type u} [Group G] (X : Type u) (of : X → G)\n    (h : ∀ {H : Type u} [Group H] (f : X → H), ∃! F : G →* H, ∀ a, F (of a) = f a) :\n    IsFreeGroup G :=\n  (FreeGroupBasis.ofUniqueLift X of h).isFreeGroup\n\n"}
{"name":"IsFreeGroup.ofMulEquiv","module":"Mathlib.GroupTheory.FreeGroup.IsFreeGroup","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : IsFreeGroup G\nH : Type u_2\ninst✝ : Group H\ne : MulEquiv G H\n⊢ IsFreeGroup H","decl":"lemma ofMulEquiv (e : G ≃* H) : IsFreeGroup H :=\n  ((basis G).map e).isFreeGroup\n\n"}
