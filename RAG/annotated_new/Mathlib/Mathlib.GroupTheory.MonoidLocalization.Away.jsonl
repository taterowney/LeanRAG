{"name":"Submonoid.LocalizationMap.AwayMap.lift_eq","module":"Mathlib.GroupTheory.MonoidLocalization.Away","initialProofState":"M : Type u_1\ninst✝² : CommMonoid M\nN : Type u_2\ninst✝¹ : CommMonoid N\nP : Type u_3\ninst✝ : CommMonoid P\ng : MonoidHom M P\nx : M\nF : Submonoid.LocalizationMap.AwayMap x N\nhg : IsUnit (g x)\na : M\n⊢ Eq ((Submonoid.LocalizationMap.AwayMap.lift x F hg) ((Submonoid.LocalizationMap.toMap F) a)) (g a)","decl":"@[simp]\ntheorem AwayMap.lift_eq (hg : IsUnit (g x)) (a : M) : F.lift x hg (F.toMap a) = g a :=\n  Submonoid.LocalizationMap.lift_eq _ _ _\n\n"}
{"name":"Submonoid.LocalizationMap.AwayMap.lift_comp","module":"Mathlib.GroupTheory.MonoidLocalization.Away","initialProofState":"M : Type u_1\ninst✝² : CommMonoid M\nN : Type u_2\ninst✝¹ : CommMonoid N\nP : Type u_3\ninst✝ : CommMonoid P\ng : MonoidHom M P\nx : M\nF : Submonoid.LocalizationMap.AwayMap x N\nhg : IsUnit (g x)\n⊢ Eq ((Submonoid.LocalizationMap.AwayMap.lift x F hg).comp (Submonoid.LocalizationMap.toMap F)) g","decl":"@[simp]\ntheorem AwayMap.lift_comp (hg : IsUnit (g x)) : (F.lift x hg).comp F.toMap = g :=\n  Submonoid.LocalizationMap.lift_comp _ _\n\n"}
{"name":"AddSubmonoid.LocalizationMap.AwayMap.lift_eq","module":"Mathlib.GroupTheory.MonoidLocalization.Away","initialProofState":"A : Type u_4\ninst✝² : AddCommMonoid A\nx : A\nB : Type u_5\ninst✝¹ : AddCommMonoid B\nF : AddSubmonoid.LocalizationMap.AwayMap x B\nC : Type u_6\ninst✝ : AddCommMonoid C\ng : AddMonoidHom A C\nhg : IsAddUnit (g x)\na : A\n⊢ Eq ((AddSubmonoid.LocalizationMap.AwayMap.lift x F hg) ((AddSubmonoid.LocalizationMap.toMap F) a)) (g a)","decl":"@[simp]\ntheorem AwayMap.lift_eq (hg : IsAddUnit (g x)) (a : A) : F.lift x hg (F.toMap a) = g a :=\n  AddSubmonoid.LocalizationMap.lift_eq _ _ _\n\n"}
{"name":"AddSubmonoid.LocalizationMap.AwayMap.lift_comp","module":"Mathlib.GroupTheory.MonoidLocalization.Away","initialProofState":"A : Type u_4\ninst✝² : AddCommMonoid A\nx : A\nB : Type u_5\ninst✝¹ : AddCommMonoid B\nF : AddSubmonoid.LocalizationMap.AwayMap x B\nC : Type u_6\ninst✝ : AddCommMonoid C\ng : AddMonoidHom A C\nhg : IsAddUnit (g x)\n⊢ Eq ((AddSubmonoid.LocalizationMap.AwayMap.lift x F hg).comp (AddSubmonoid.LocalizationMap.toMap F)) g","decl":"@[simp]\ntheorem AwayMap.lift_comp (hg : IsAddUnit (g x)) : (F.lift x hg).comp F.toMap = g :=\n  AddSubmonoid.LocalizationMap.lift_comp _ _\n\n"}
{"name":"AddLocalization.Away.mk_eq_addMonoidOf_mk'","module":"Mathlib.GroupTheory.MonoidLocalization.Away","initialProofState":"M : Type u_1\ninst✝ : AddCommMonoid M\nx : M\n⊢ Eq AddLocalization.mk (AddSubmonoid.LocalizationMap.mk' (AddLocalization.Away.addMonoidOf x))","decl":"@[to_additive]\ntheorem Away.mk_eq_monoidOf_mk' : mk = (Away.monoidOf x).mk' := by\n  simp [Localization.mk_eq_monoidOf_mk']\n\n"}
{"name":"Localization.Away.mk_eq_monoidOf_mk'","module":"Mathlib.GroupTheory.MonoidLocalization.Away","initialProofState":"M : Type u_1\ninst✝ : CommMonoid M\nx : M\n⊢ Eq Localization.mk (Submonoid.LocalizationMap.mk' (Localization.Away.monoidOf x))","decl":"@[to_additive]\ntheorem Away.mk_eq_monoidOf_mk' : mk = (Away.monoidOf x).mk' := by\n  simp [Localization.mk_eq_monoidOf_mk']\n\n"}
