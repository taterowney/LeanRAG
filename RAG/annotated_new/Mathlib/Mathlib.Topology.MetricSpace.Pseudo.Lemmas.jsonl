{"name":"instOrderTopologyReal","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"⊢ OrderTopology Real","decl":"instance : OrderTopology ℝ :=\n  orderTopology_of_nhds_abs fun x => by\n    simp only [nhds_basis_ball.eq_biInf, ball, Real.dist_eq, abs_sub_comm]\n\n"}
{"name":"Real.singleton_eq_inter_Icc","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"b : Real\n⊢ Eq (Singleton.singleton b) (Set.iInter fun r => Set.iInter fun h => Set.Icc (HSub.hSub b r) (HAdd.hAdd b r))","decl":"lemma Real.singleton_eq_inter_Icc (b : ℝ) : {b} = ⋂ (r > 0), Icc (b - r) (b + r) := by\n  simp [Icc_eq_closedBall, biInter_basis_nhds Metric.nhds_basis_closedBall]\n\n"}
{"name":"squeeze_zero'","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_3\nf g : α → Real\nt₀ : Filter α\nhf : Filter.Eventually (fun t => LE.le 0 (f t)) t₀\nhft : Filter.Eventually (fun t => LE.le (f t) (g t)) t₀\ng0 : Filter.Tendsto g t₀ (nhds 0)\n⊢ Filter.Tendsto f t₀ (nhds 0)","decl":"/-- Special case of the sandwich lemma; see `tendsto_of_tendsto_of_tendsto_of_le_of_le'` for the\ngeneral case. -/\nlemma squeeze_zero' {α} {f g : α → ℝ} {t₀ : Filter α} (hf : ∀ᶠ t in t₀, 0 ≤ f t)\n    (hft : ∀ᶠ t in t₀, f t ≤ g t) (g0 : Tendsto g t₀ (𝓝 0)) : Tendsto f t₀ (𝓝 0) :=\n  tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds g0 hf hft\n\n"}
{"name":"squeeze_zero","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_3\nf g : α → Real\nt₀ : Filter α\nhf : ∀ (t : α), LE.le 0 (f t)\nhft : ∀ (t : α), LE.le (f t) (g t)\ng0 : Filter.Tendsto g t₀ (nhds 0)\n⊢ Filter.Tendsto f t₀ (nhds 0)","decl":"/-- Special case of the sandwich lemma; see `tendsto_of_tendsto_of_tendsto_of_le_of_le`\nand `tendsto_of_tendsto_of_tendsto_of_le_of_le'` for the general case. -/\nlemma squeeze_zero {α} {f g : α → ℝ} {t₀ : Filter α} (hf : ∀ t, 0 ≤ f t) (hft : ∀ t, f t ≤ g t)\n    (g0 : Tendsto g t₀ (𝓝 0)) : Tendsto f t₀ (𝓝 0) :=\n  squeeze_zero' (Eventually.of_forall hf) (Eventually.of_forall hft) g0\n\n"}
{"name":"eventually_closedBall_subset","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nu : Set α\nhu : Membership.mem (nhds x) u\n⊢ Filter.Eventually (fun r => HasSubset.Subset (Metric.closedBall x r) u) (nhds 0)","decl":"/-- If `u` is a neighborhood of `x`, then for small enough `r`, the closed ball\n`Metric.closedBall x r` is contained in `u`. -/\nlemma eventually_closedBall_subset {x : α} {u : Set α} (hu : u ∈ 𝓝 x) :\n    ∀ᶠ r in 𝓝 (0 : ℝ), closedBall x r ⊆ u := by\n  obtain ⟨ε, εpos, hε⟩ : ∃ ε, 0 < ε ∧ closedBall x ε ⊆ u := nhds_basis_closedBall.mem_iff.1 hu\n  have : Iic ε ∈ 𝓝 (0 : ℝ) := Iic_mem_nhds εpos\n  filter_upwards [this] with _ hr using Subset.trans (closedBall_subset_closedBall hr) hε\n\n"}
{"name":"tendsto_closedBall_smallSets","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\n⊢ Filter.Tendsto (Metric.closedBall x) (nhds 0) (nhds x).smallSets","decl":"lemma tendsto_closedBall_smallSets (x : α) : Tendsto (closedBall x) (𝓝 0) (𝓝 x).smallSets :=\n  tendsto_smallSets_iff.2 fun _ ↦ eventually_closedBall_subset\n\n"}
{"name":"Metric.isClosed_ball","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ IsClosed (Metric.closedBall x ε)","decl":"lemma isClosed_ball : IsClosed (closedBall x ε) :=\n  isClosed_le (continuous_id.dist continuous_const) continuous_const\n\n"}
{"name":"Metric.isClosed_sphere","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ IsClosed (Metric.sphere x ε)","decl":"lemma isClosed_sphere : IsClosed (sphere x ε) :=\n  isClosed_eq (continuous_id.dist continuous_const) continuous_const\n\n"}
{"name":"Metric.closure_closedBall","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ Eq (closure (Metric.closedBall x ε)) (Metric.closedBall x ε)","decl":"@[simp]\nlemma closure_closedBall : closure (closedBall x ε) = closedBall x ε :=\n  isClosed_ball.closure_eq\n\n"}
{"name":"Metric.closure_sphere","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ Eq (closure (Metric.sphere x ε)) (Metric.sphere x ε)","decl":"@[simp]\nlemma closure_sphere : closure (sphere x ε) = sphere x ε :=\n  isClosed_sphere.closure_eq\n\n"}
{"name":"Metric.closure_ball_subset_closedBall","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ HasSubset.Subset (closure (Metric.ball x ε)) (Metric.closedBall x ε)","decl":"lemma closure_ball_subset_closedBall : closure (ball x ε) ⊆ closedBall x ε :=\n  closure_minimal ball_subset_closedBall isClosed_ball\n\n"}
{"name":"Metric.frontier_ball_subset_sphere","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ HasSubset.Subset (frontier (Metric.ball x ε)) (Metric.sphere x ε)","decl":"lemma frontier_ball_subset_sphere : frontier (ball x ε) ⊆ sphere x ε :=\n  frontier_lt_subset_eq (continuous_id.dist continuous_const) continuous_const\n\n"}
{"name":"Metric.frontier_closedBall_subset_sphere","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nε : Real\n⊢ HasSubset.Subset (frontier (Metric.closedBall x ε)) (Metric.sphere x ε)","decl":"lemma frontier_closedBall_subset_sphere : frontier (closedBall x ε) ⊆ sphere x ε :=\n  frontier_le_subset_eq (continuous_id.dist continuous_const) continuous_const\n\n"}
{"name":"Metric.closedBall_zero'","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\n⊢ Eq (Metric.closedBall x 0) (closure (Singleton.singleton x))","decl":"lemma closedBall_zero' (x : α) : closedBall x 0 = closure {x} :=\n  Subset.antisymm\n    (fun _y hy =>\n      mem_closure_iff.2 fun _ε ε0 => ⟨x, mem_singleton x, (mem_closedBall.1 hy).trans_lt ε0⟩)\n    (closure_minimal (singleton_subset_iff.2 (dist_self x).le) isClosed_ball)\n\n"}
{"name":"Metric.eventually_isCompact_closedBall","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : WeaklyLocallyCompactSpace α\nx : α\n⊢ Filter.Eventually (fun r => IsCompact (Metric.closedBall x r)) (nhds 0)","decl":"lemma eventually_isCompact_closedBall [WeaklyLocallyCompactSpace α] (x : α) :\n    ∀ᶠ r in 𝓝 (0 : ℝ), IsCompact (closedBall x r) := by\n  rcases exists_compact_mem_nhds x with ⟨s, s_compact, hs⟩\n  filter_upwards [eventually_closedBall_subset hs] with r hr\n  exact IsCompact.of_isClosed_subset s_compact isClosed_ball hr\n\n"}
{"name":"Metric.exists_isCompact_closedBall","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝¹ : PseudoMetricSpace α\ninst✝ : WeaklyLocallyCompactSpace α\nx : α\n⊢ Exists fun r => And (LT.lt 0 r) (IsCompact (Metric.closedBall x r))","decl":"lemma exists_isCompact_closedBall [WeaklyLocallyCompactSpace α] (x : α) :\n    ∃ r, 0 < r ∧ IsCompact (closedBall x r) := by\n  have : ∀ᶠ r in 𝓝[>] 0, IsCompact (closedBall x r) :=\n    eventually_nhdsWithin_of_eventually_nhds (eventually_isCompact_closedBall x)\n  simpa only [and_comm] using (this.and self_mem_nhdsWithin).exists\n\n"}
{"name":"Metric.biInter_gt_closedBall","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nr : Real\n⊢ Eq (Set.iInter fun r' => Set.iInter fun h => Metric.closedBall x r') (Metric.closedBall x r)","decl":"theorem biInter_gt_closedBall (x : α) (r : ℝ) : ⋂ r' > r, closedBall x r' = closedBall x r := by\n  ext\n  simp [forall_gt_imp_ge_iff_le_of_dense]\n\n"}
{"name":"Metric.biInter_gt_ball","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nr : Real\n⊢ Eq (Set.iInter fun r' => Set.iInter fun h => Metric.ball x r') (Metric.closedBall x r)","decl":"theorem biInter_gt_ball (x : α) (r : ℝ) : ⋂ r' > r, ball x r' = closedBall x r := by\n  ext\n  simp [forall_lt_iff_le']\n\n"}
{"name":"Metric.biUnion_lt_ball","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nr : Real\n⊢ Eq (Set.iUnion fun r' => Set.iUnion fun h => Metric.ball x r') (Metric.ball x r)","decl":"theorem biUnion_lt_ball (x : α) (r : ℝ) : ⋃ r' < r, ball x r' = ball x r := by\n  ext\n  rw [← not_iff_not]\n  simp [forall_lt_imp_le_iff_le_of_dense]\n\n"}
{"name":"Metric.biUnion_lt_closedBall","module":"Mathlib.Topology.MetricSpace.Pseudo.Lemmas","initialProofState":"α : Type u_2\ninst✝ : PseudoMetricSpace α\nx : α\nr : Real\n⊢ Eq (Set.iUnion fun r' => Set.iUnion fun h => Metric.closedBall x r') (Metric.ball x r)","decl":"theorem biUnion_lt_closedBall (x : α) (r : ℝ) : ⋃ r' < r, closedBall x r' = ball x r := by\n  ext\n  rw [← not_iff_not]\n  simp [forall_lt_iff_le]\n\n"}
