{"name":"ProbabilityTheory.IdentDistrib.aemeasurable_fst","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nf : α → γ\ng : β → γ\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nν : autoParam (MeasureTheory.Measure β) _auto✝\nself : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ AEMeasurable f μ","decl":"/-- Two functions defined on two (possibly different) measure spaces are identically distributed if\ntheir image measures coincide. This only makes sense when the functions are ae measurable\n(as otherwise the image measures are not defined), so we require this as well in the definition. -/\nstructure IdentDistrib (f : α → γ) (g : β → γ)\n    (μ : Measure α := by volume_tac)\n    (ν : Measure β := by volume_tac) : Prop where\n  aemeasurable_fst : AEMeasurable f μ\n  aemeasurable_snd : AEMeasurable g ν\n  map_eq : Measure.map f μ = Measure.map g ν\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.aemeasurable_snd","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nf : α → γ\ng : β → γ\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nν : autoParam (MeasureTheory.Measure β) _auto✝\nself : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ AEMeasurable g ν","decl":"/-- Two functions defined on two (possibly different) measure spaces are identically distributed if\ntheir image measures coincide. This only makes sense when the functions are ae measurable\n(as otherwise the image measures are not defined), so we require this as well in the definition. -/\nstructure IdentDistrib (f : α → γ) (g : β → γ)\n    (μ : Measure α := by volume_tac)\n    (ν : Measure β := by volume_tac) : Prop where\n  aemeasurable_fst : AEMeasurable f μ\n  aemeasurable_snd : AEMeasurable g ν\n  map_eq : Measure.map f μ = Measure.map g ν\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.map_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nf : α → γ\ng : β → γ\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nν : autoParam (MeasureTheory.Measure β) _auto✝\nself : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Eq (MeasureTheory.Measure.map f μ) (MeasureTheory.Measure.map g ν)","decl":"/-- Two functions defined on two (possibly different) measure spaces are identically distributed if\ntheir image measures coincide. This only makes sense when the functions are ae measurable\n(as otherwise the image measures are not defined), so we require this as well in the definition. -/\nstructure IdentDistrib (f : α → γ) (g : β → γ)\n    (μ : Measure α := by volume_tac)\n    (ν : Measure β := by volume_tac) : Prop where\n  aemeasurable_fst : AEMeasurable f μ\n  aemeasurable_snd : AEMeasurable g ν\n  map_eq : Measure.map f μ = Measure.map g ν\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.refl","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nf : α → γ\nhf : AEMeasurable f μ\n⊢ ProbabilityTheory.IdentDistrib f f μ μ","decl":"protected theorem refl (hf : AEMeasurable f μ) : IdentDistrib f f μ μ :=\n  { aemeasurable_fst := hf\n    aemeasurable_snd := hf\n    map_eq := rfl }\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.symm","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib g f ν μ","decl":"protected theorem symm (h : IdentDistrib f g μ ν) : IdentDistrib g f ν μ :=\n  { aemeasurable_fst := h.aemeasurable_snd\n    aemeasurable_snd := h.aemeasurable_fst\n    map_eq := h.map_eq.symm }\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.trans","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : MeasurableSpace γ\ninst✝ : MeasurableSpace δ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nρ : MeasureTheory.Measure δ\nh : δ → γ\nh₁ : ProbabilityTheory.IdentDistrib f g μ ν\nh₂ : ProbabilityTheory.IdentDistrib g h ν ρ\n⊢ ProbabilityTheory.IdentDistrib f h μ ρ","decl":"protected theorem trans {ρ : Measure δ} {h : δ → γ} (h₁ : IdentDistrib f g μ ν)\n    (h₂ : IdentDistrib g h ν ρ) : IdentDistrib f h μ ρ :=\n  { aemeasurable_fst := h₁.aemeasurable_fst\n    aemeasurable_snd := h₂.aemeasurable_snd\n    map_eq := h₁.map_eq.trans h₂.map_eq }\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.comp_of_aemeasurable","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : MeasurableSpace γ\ninst✝ : MeasurableSpace δ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nu : γ → δ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nhu : AEMeasurable u (MeasureTheory.Measure.map f μ)\n⊢ ProbabilityTheory.IdentDistrib (Function.comp u f) (Function.comp u g) μ ν","decl":"protected theorem comp_of_aemeasurable {u : γ → δ} (h : IdentDistrib f g μ ν)\n    (hu : AEMeasurable u (Measure.map f μ)) : IdentDistrib (u ∘ f) (u ∘ g) μ ν :=\n  { aemeasurable_fst := hu.comp_aemeasurable h.aemeasurable_fst\n    aemeasurable_snd := by rw [h.map_eq] at hu; exact hu.comp_aemeasurable h.aemeasurable_snd\n    map_eq := by\n      rw [← AEMeasurable.map_map_of_aemeasurable hu h.aemeasurable_fst, ←\n        AEMeasurable.map_map_of_aemeasurable _ h.aemeasurable_snd, h.map_eq]\n      rwa [← h.map_eq] }\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.comp","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : MeasurableSpace α\ninst✝² : MeasurableSpace β\ninst✝¹ : MeasurableSpace γ\ninst✝ : MeasurableSpace δ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nu : γ → δ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nhu : Measurable u\n⊢ ProbabilityTheory.IdentDistrib (Function.comp u f) (Function.comp u g) μ ν","decl":"protected theorem comp {u : γ → δ} (h : IdentDistrib f g μ ν) (hu : Measurable u) :\n    IdentDistrib (u ∘ f) (u ∘ g) μ ν :=\n  h.comp_of_aemeasurable hu.aemeasurable\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.of_ae_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nf g : α → γ\nhf : AEMeasurable f μ\nheq : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ ProbabilityTheory.IdentDistrib f g μ μ","decl":"protected theorem of_ae_eq {g : α → γ} (hf : AEMeasurable f μ) (heq : f =ᵐ[μ] g) :\n    IdentDistrib f g μ μ :=\n  { aemeasurable_fst := hf\n    aemeasurable_snd := hf.congr heq\n    map_eq := Measure.map_congr heq }\n\n"}
{"name":"MeasureTheory.AEMeasurable.identDistrib_mk","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nf : α → γ\nhf : AEMeasurable f μ\n⊢ ProbabilityTheory.IdentDistrib f (AEMeasurable.mk f hf) μ μ","decl":"lemma _root_.MeasureTheory.AEMeasurable.identDistrib_mk\n    (hf : AEMeasurable f μ) : IdentDistrib f (hf.mk f) μ μ :=\n  IdentDistrib.of_ae_eq hf hf.ae_eq_mk\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.identDistrib_mk","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nf : α → γ\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace γ\ninst✝ : BorelSpace γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ ProbabilityTheory.IdentDistrib f (MeasureTheory.AEStronglyMeasurable.mk f hf) μ μ","decl":"lemma _root_.MeasureTheory.AEStronglyMeasurable.identDistrib_mk\n    [TopologicalSpace γ] [PseudoMetrizableSpace γ] [BorelSpace γ]\n    (hf : AEStronglyMeasurable f μ) : IdentDistrib f (hf.mk f) μ μ :=\n  IdentDistrib.of_ae_eq hf.aemeasurable hf.ae_eq_mk\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.measure_mem_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\ns : Set γ\nhs : MeasurableSet s\n⊢ Eq (μ (Set.preimage f s)) (ν (Set.preimage g s))","decl":"theorem measure_mem_eq (h : IdentDistrib f g μ ν) {s : Set γ} (hs : MeasurableSet s) :\n    μ (f ⁻¹' s) = ν (g ⁻¹' s) := by\n  rw [← Measure.map_apply_of_aemeasurable h.aemeasurable_fst hs, ←\n    Measure.map_apply_of_aemeasurable h.aemeasurable_snd hs, h.map_eq]\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.measure_preimage_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\ns : Set γ\nhs : MeasurableSet s\n⊢ Eq (μ (Set.preimage f s)) (ν (Set.preimage g s))","decl":"alias measure_preimage_eq := measure_mem_eq\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.ae_snd","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\np : γ → Prop\npmeas : MeasurableSet (setOf fun x => p x)\nhp : Filter.Eventually (fun x => p (f x)) (MeasureTheory.ae μ)\n⊢ Filter.Eventually (fun x => p (g x)) (MeasureTheory.ae ν)","decl":"theorem ae_snd (h : IdentDistrib f g μ ν) {p : γ → Prop} (pmeas : MeasurableSet {x | p x})\n    (hp : ∀ᵐ x ∂μ, p (f x)) : ∀ᵐ x ∂ν, p (g x) := by\n  apply (ae_map_iff h.aemeasurable_snd pmeas).1\n  rw [← h.map_eq]\n  exact (ae_map_iff h.aemeasurable_fst pmeas).2 hp\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.ae_mem_snd","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nt : Set γ\ntmeas : MeasurableSet t\nht : Filter.Eventually (fun x => Membership.mem t (f x)) (MeasureTheory.ae μ)\n⊢ Filter.Eventually (fun x => Membership.mem t (g x)) (MeasureTheory.ae ν)","decl":"theorem ae_mem_snd (h : IdentDistrib f g μ ν) {t : Set γ} (tmeas : MeasurableSet t)\n    (ht : ∀ᵐ x ∂μ, f x ∈ t) : ∀ᵐ x ∂ν, g x ∈ t :=\n  h.ae_snd tmeas ht\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.aestronglyMeasurable_fst","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : MeasurableSpace β\ninst✝⁴ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝³ : TopologicalSpace γ\ninst✝² : TopologicalSpace.MetrizableSpace γ\ninst✝¹ : OpensMeasurableSpace γ\ninst✝ : SecondCountableTopology γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"/-- In a second countable topology, the first function in an identically distributed pair is a.e.\nstrongly measurable. So is the second function, but use `h.symm.aestronglyMeasurable_fst` as\n`h.aestronglyMeasurable_snd` has a different meaning. -/\ntheorem aestronglyMeasurable_fst [TopologicalSpace γ] [MetrizableSpace γ] [OpensMeasurableSpace γ]\n    [SecondCountableTopology γ] (h : IdentDistrib f g μ ν) : AEStronglyMeasurable f μ :=\n  h.aemeasurable_fst.aestronglyMeasurable\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.aestronglyMeasurable_snd","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\ninst✝³ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace.MetrizableSpace γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable g ν","decl":"/-- If `f` and `g` are identically distributed and `f` is a.e. strongly measurable, so is `g`. -/\ntheorem aestronglyMeasurable_snd [TopologicalSpace γ] [MetrizableSpace γ] [BorelSpace γ]\n    (h : IdentDistrib f g μ ν) (hf : AEStronglyMeasurable f μ) : AEStronglyMeasurable g ν := by\n  refine aestronglyMeasurable_iff_aemeasurable_separable.2 ⟨h.aemeasurable_snd, ?_⟩\n  rcases (aestronglyMeasurable_iff_aemeasurable_separable.1 hf).2 with ⟨t, t_sep, ht⟩\n  refine ⟨closure t, t_sep.closure, ?_⟩\n  apply h.ae_mem_snd isClosed_closure.measurableSet\n  filter_upwards [ht] with x hx using subset_closure hx\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.aestronglyMeasurable_iff","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\ninst✝³ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace.MetrizableSpace γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f μ) (MeasureTheory.AEStronglyMeasurable g ν)","decl":"theorem aestronglyMeasurable_iff [TopologicalSpace γ] [MetrizableSpace γ] [BorelSpace γ]\n    (h : IdentDistrib f g μ ν) : AEStronglyMeasurable f μ ↔ AEStronglyMeasurable g ν :=\n  ⟨fun hf => h.aestronglyMeasurable_snd hf, fun hg => h.symm.aestronglyMeasurable_snd hg⟩\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.essSup_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : MeasurableSpace β\ninst✝⁴ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝³ : ConditionallyCompleteLinearOrder γ\ninst✝² : TopologicalSpace γ\ninst✝¹ : OpensMeasurableSpace γ\ninst✝ : OrderClosedTopology γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Eq (essSup f μ) (essSup g ν)","decl":"theorem essSup_eq [ConditionallyCompleteLinearOrder γ] [TopologicalSpace γ] [OpensMeasurableSpace γ]\n    [OrderClosedTopology γ] (h : IdentDistrib f g μ ν) : essSup f μ = essSup g ν := by\n  have I : ∀ a, μ {x : α | a < f x} = ν {x : β | a < g x} := fun a =>\n    h.measure_mem_eq measurableSet_Ioi\n  simp_rw [essSup_eq_sInf, I]\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.lintegral_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → ENNReal\ng : β → ENNReal\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Eq (MeasureTheory.lintegral μ fun x => f x) (MeasureTheory.lintegral ν fun x => g x)","decl":"theorem lintegral_eq {f : α → ℝ≥0∞} {g : β → ℝ≥0∞} (h : IdentDistrib f g μ ν) :\n    ∫⁻ x, f x ∂μ = ∫⁻ x, g x ∂ν := by\n  change ∫⁻ x, id (f x) ∂μ = ∫⁻ x, id (g x) ∂ν\n  rw [← lintegral_map' aemeasurable_id h.aemeasurable_fst, ←\n    lintegral_map' aemeasurable_id h.aemeasurable_snd, h.map_eq]\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.integral_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\ninst✝³ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝² : NormedAddCommGroup γ\ninst✝¹ : NormedSpace Real γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Eq (MeasureTheory.integral μ fun x => f x) (MeasureTheory.integral ν fun x => g x)","decl":"theorem integral_eq [NormedAddCommGroup γ] [NormedSpace ℝ γ] [BorelSpace γ]\n    (h : IdentDistrib f g μ ν) : ∫ x, f x ∂μ = ∫ x, g x ∂ν := by\n  by_cases hf : AEStronglyMeasurable f μ\n  · have A : AEStronglyMeasurable id (Measure.map f μ) := by\n      rw [aestronglyMeasurable_iff_aemeasurable_separable]\n      rcases (aestronglyMeasurable_iff_aemeasurable_separable.1 hf).2 with ⟨t, t_sep, ht⟩\n      refine ⟨aemeasurable_id, ⟨closure t, t_sep.closure, ?_⟩⟩\n      rw [ae_map_iff h.aemeasurable_fst]\n      · filter_upwards [ht] with x hx using subset_closure hx\n      · exact isClosed_closure.measurableSet\n    change ∫ x, id (f x) ∂μ = ∫ x, id (g x) ∂ν\n    rw [← integral_map h.aemeasurable_fst A]\n    rw [h.map_eq] at A\n    rw [← integral_map h.aemeasurable_snd A, h.map_eq]\n  · rw [integral_non_aestronglyMeasurable hf]\n    rw [h.aestronglyMeasurable_iff] at hf\n    rw [integral_non_aestronglyMeasurable hf]\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.eLpNorm_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : OpensMeasurableSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\np : ENNReal\n⊢ Eq (MeasureTheory.eLpNorm f p μ) (MeasureTheory.eLpNorm g p ν)","decl":"theorem eLpNorm_eq [NormedAddCommGroup γ] [OpensMeasurableSpace γ] (h : IdentDistrib f g μ ν)\n    (p : ℝ≥0∞) : eLpNorm f p μ = eLpNorm g p ν := by\n  by_cases h0 : p = 0\n  · simp [h0]\n  by_cases h_top : p = ∞\n  · simp only [h_top, eLpNorm, eLpNormEssSup, ENNReal.top_ne_zero, eq_self_iff_true, if_true,\n      if_false]\n    apply essSup_eq\n    exact h.comp (measurable_coe_nnreal_ennreal.comp measurable_nnnorm)\n  simp only [eLpNorm_eq_eLpNorm' h0 h_top, eLpNorm', one_div]\n  congr 1\n  apply lintegral_eq\n  exact h.comp (Measurable.pow_const (measurable_coe_nnreal_ennreal.comp measurable_nnnorm)\n    p.toReal)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.memℒp_snd","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : BorelSpace γ\np : ENNReal\nh : ProbabilityTheory.IdentDistrib f g μ ν\nhf : MeasureTheory.Memℒp f p μ\n⊢ MeasureTheory.Memℒp g p ν","decl":"theorem memℒp_snd [NormedAddCommGroup γ] [BorelSpace γ] {p : ℝ≥0∞} (h : IdentDistrib f g μ ν)\n    (hf : Memℒp f p μ) : Memℒp g p ν := by\n  refine ⟨h.aestronglyMeasurable_snd hf.aestronglyMeasurable, ?_⟩\n  rw [← h.eLpNorm_eq]\n  exact hf.2\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.memℒp_iff","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : BorelSpace γ\np : ENNReal\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Iff (MeasureTheory.Memℒp f p μ) (MeasureTheory.Memℒp g p ν)","decl":"theorem memℒp_iff [NormedAddCommGroup γ] [BorelSpace γ] {p : ℝ≥0∞} (h : IdentDistrib f g μ ν) :\n    Memℒp f p μ ↔ Memℒp g p ν :=\n  ⟨fun hf => h.memℒp_snd hf, fun hg => h.symm.memℒp_snd hg⟩\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.integrable_snd","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nhf : MeasureTheory.Integrable f μ\n⊢ MeasureTheory.Integrable g ν","decl":"theorem integrable_snd [NormedAddCommGroup γ] [BorelSpace γ] (h : IdentDistrib f g μ ν)\n    (hf : Integrable f μ) : Integrable g ν := by\n  rw [← memℒp_one_iff_integrable] at hf ⊢\n  exact h.memℒp_snd hf\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.integrable_iff","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Iff (MeasureTheory.Integrable f μ) (MeasureTheory.Integrable g ν)","decl":"theorem integrable_iff [NormedAddCommGroup γ] [BorelSpace γ] (h : IdentDistrib f g μ ν) :\n    Integrable f μ ↔ Integrable g ν :=\n  ⟨fun hf => h.integrable_snd hf, fun hg => h.symm.integrable_snd hg⟩\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.norm","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib (fun x => Norm.norm (f x)) (fun x => Norm.norm (g x)) μ ν","decl":"protected theorem norm [NormedAddCommGroup γ] [BorelSpace γ] (h : IdentDistrib f g μ ν) :\n    IdentDistrib (fun x => ‖f x‖) (fun x => ‖g x‖) μ ν :=\n  h.comp measurable_norm\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.nnnorm","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : NormedAddCommGroup γ\ninst✝ : BorelSpace γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib (fun x => NNNorm.nnnorm (f x)) (fun x => NNNorm.nnnorm (g x)) μ ν","decl":"protected theorem nnnorm [NormedAddCommGroup γ] [BorelSpace γ] (h : IdentDistrib f g μ ν) :\n    IdentDistrib (fun x => ‖f x‖₊) (fun x => ‖g x‖₊) μ ν :=\n  h.comp measurable_nnnorm\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.pow","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Pow γ Nat\ninst✝ : MeasurablePow γ Nat\nh : ProbabilityTheory.IdentDistrib f g μ ν\nn : Nat\n⊢ ProbabilityTheory.IdentDistrib (fun x => HPow.hPow (f x) n) (fun x => HPow.hPow (g x) n) μ ν","decl":"protected theorem pow [Pow γ ℕ] [MeasurablePow γ ℕ] (h : IdentDistrib f g μ ν) {n : ℕ} :\n    IdentDistrib (fun x => f x ^ n) (fun x => g x ^ n) μ ν :=\n  h.comp (measurable_id.pow_const n)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.sq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Pow γ Nat\ninst✝ : MeasurablePow γ Nat\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib (fun x => HPow.hPow (f x) 2) (fun x => HPow.hPow (g x) 2) μ ν","decl":"protected theorem sq [Pow γ ℕ] [MeasurablePow γ ℕ] (h : IdentDistrib f g μ ν) :\n    IdentDistrib (fun x => f x ^ 2) (fun x => g x ^ 2) μ ν :=\n  h.comp (measurable_id.pow_const 2)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.coe_nnreal_ennreal","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → NNReal\ng : β → NNReal\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib (fun x => ↑(f x)) (fun x => ↑(g x)) μ ν","decl":"protected theorem coe_nnreal_ennreal {f : α → ℝ≥0} {g : β → ℝ≥0} (h : IdentDistrib f g μ ν) :\n    IdentDistrib (fun x => (f x : ℝ≥0∞)) (fun x => (g x : ℝ≥0∞)) μ ν :=\n  h.comp measurable_coe_nnreal_ennreal\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.add_const","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Add γ\ninst✝ : MeasurableAdd γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HAdd.hAdd (f x) c) (fun x => HAdd.hAdd (g x) c) μ ν","decl":"@[to_additive]\ntheorem mul_const [Mul γ] [MeasurableMul γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => f x * c) (fun x => g x * c) μ ν :=\n  h.comp (measurable_mul_const c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.mul_const","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Mul γ\ninst✝ : MeasurableMul γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HMul.hMul (f x) c) (fun x => HMul.hMul (g x) c) μ ν","decl":"@[to_additive]\ntheorem mul_const [Mul γ] [MeasurableMul γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => f x * c) (fun x => g x * c) μ ν :=\n  h.comp (measurable_mul_const c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.const_mul","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Mul γ\ninst✝ : MeasurableMul γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HMul.hMul c (f x)) (fun x => HMul.hMul c (g x)) μ ν","decl":"@[to_additive]\ntheorem const_mul [Mul γ] [MeasurableMul γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => c * f x) (fun x => c * g x) μ ν :=\n  h.comp (measurable_const_mul c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.const_add","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Add γ\ninst✝ : MeasurableAdd γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HAdd.hAdd c (f x)) (fun x => HAdd.hAdd c (g x)) μ ν","decl":"@[to_additive]\ntheorem const_mul [Mul γ] [MeasurableMul γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => c * f x) (fun x => c * g x) μ ν :=\n  h.comp (measurable_const_mul c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.div_const","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Div γ\ninst✝ : MeasurableDiv γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HDiv.hDiv (f x) c) (fun x => HDiv.hDiv (g x) c) μ ν","decl":"@[to_additive]\ntheorem div_const [Div γ] [MeasurableDiv γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => f x / c) (fun x => g x / c) μ ν :=\n  h.comp (MeasurableDiv.measurable_div_const c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.sub_const","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Sub γ\ninst✝ : MeasurableSub γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HSub.hSub (f x) c) (fun x => HSub.hSub (g x) c) μ ν","decl":"@[to_additive]\ntheorem div_const [Div γ] [MeasurableDiv γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => f x / c) (fun x => g x / c) μ ν :=\n  h.comp (MeasurableDiv.measurable_div_const c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.const_div","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Div γ\ninst✝ : MeasurableDiv γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HDiv.hDiv c (f x)) (fun x => HDiv.hDiv c (g x)) μ ν","decl":"@[to_additive]\ntheorem const_div [Div γ] [MeasurableDiv γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => c / f x) (fun x => c / g x) μ ν :=\n  h.comp (MeasurableDiv.measurable_const_div c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.const_sub","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Sub γ\ninst✝ : MeasurableSub γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\nc : γ\n⊢ ProbabilityTheory.IdentDistrib (fun x => HSub.hSub c (f x)) (fun x => HSub.hSub c (g x)) μ ν","decl":"@[to_additive]\ntheorem const_div [Div γ] [MeasurableDiv γ] (h : IdentDistrib f g μ ν) (c : γ) :\n    IdentDistrib (fun x => c / f x) (fun x => c / g x) μ ν :=\n  h.comp (MeasurableDiv.measurable_const_div c)\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.inv","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Inv γ\ninst✝ : MeasurableInv γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib (Inv.inv f) (Inv.inv g) μ ν","decl":"@[to_additive]\nlemma inv [Inv γ] [MeasurableInv γ] (h : IdentDistrib f g μ ν) :\n    IdentDistrib f⁻¹ g⁻¹ μ ν := h.comp measurable_inv\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.neg","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → γ\ng : β → γ\ninst✝¹ : Neg γ\ninst✝ : MeasurableNeg γ\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ ProbabilityTheory.IdentDistrib (Neg.neg f) (Neg.neg g) μ ν","decl":"@[to_additive]\nlemma inv [Inv γ] [MeasurableInv γ] (h : IdentDistrib f g μ ν) :\n    IdentDistrib f⁻¹ g⁻¹ μ ν := h.comp measurable_inv\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.evariance_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → Real\ng : β → Real\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Eq (ProbabilityTheory.evariance f μ) (ProbabilityTheory.evariance g ν)","decl":"theorem evariance_eq {f : α → ℝ} {g : β → ℝ} (h : IdentDistrib f g μ ν) :\n    evariance f μ = evariance g ν := by\n  convert (h.sub_const (∫ x, f x ∂μ)).nnnorm.coe_nnreal_ennreal.sq.lintegral_eq\n  rw [h.integral_eq]\n  rfl\n\n"}
{"name":"ProbabilityTheory.IdentDistrib.variance_eq","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nν : MeasureTheory.Measure β\nf : α → Real\ng : β → Real\nh : ProbabilityTheory.IdentDistrib f g μ ν\n⊢ Eq (ProbabilityTheory.variance f μ) (ProbabilityTheory.variance g ν)","decl":"theorem variance_eq {f : α → ℝ} {g : β → ℝ} (h : IdentDistrib f g μ ν) :\n    variance f μ = variance g ν := by rw [variance, h.evariance_eq]; rfl\n\n"}
{"name":"ProbabilityTheory.Memℒp.uniformIntegrable_of_identDistrib_aux","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nE : Type u_5\ninst✝³ : MeasurableSpace E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : BorelSpace E\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nι : Type u_6\nf : ι → α → E\nj : ι\np : ENNReal\nhp : LE.le 1 p\nhp' : Ne p Top.top\nhℒp : MeasureTheory.Memℒp (f j) p μ\nhfmeas : ∀ (i : ι), MeasureTheory.StronglyMeasurable (f i)\nhf : ∀ (i : ι), ProbabilityTheory.IdentDistrib (f i) (f j) μ μ\n⊢ MeasureTheory.UniformIntegrable f p μ","decl":"/-- This lemma is superseded by `Memℒp.uniformIntegrable_of_identDistrib` which only requires\n`AEStronglyMeasurable`. -/\ntheorem Memℒp.uniformIntegrable_of_identDistrib_aux {ι : Type*} {f : ι → α → E} {j : ι} {p : ℝ≥0∞}\n    (hp : 1 ≤ p) (hp' : p ≠ ∞) (hℒp : Memℒp (f j) p μ) (hfmeas : ∀ i, StronglyMeasurable (f i))\n    (hf : ∀ i, IdentDistrib (f i) (f j) μ μ) : UniformIntegrable f p μ := by\n  refine uniformIntegrable_of' hp hp' hfmeas fun ε hε => ?_\n  by_cases hι : Nonempty ι\n  swap; · exact ⟨0, fun i => False.elim (hι <| Nonempty.intro i)⟩\n  obtain ⟨C, hC₁, hC₂⟩ := hℒp.eLpNorm_indicator_norm_ge_pos_le (hfmeas _) hε\n  refine ⟨⟨C, hC₁.le⟩, fun i => le_trans (le_of_eq ?_) hC₂⟩\n  have : {x | (⟨C, hC₁.le⟩ : ℝ≥0) ≤ ‖f i x‖₊} = {x | C ≤ ‖f i x‖} := by\n    ext x\n    simp_rw [← norm_toNNReal]\n    exact Real.le_toNNReal_iff_coe_le (norm_nonneg _)\n  rw [this, ← eLpNorm_norm, ← eLpNorm_norm (Set.indicator _ _)]\n  simp_rw [norm_indicator_eq_indicator_norm, coe_nnnorm]\n  let F : E → ℝ := (fun x : E => if (⟨C, hC₁.le⟩ : ℝ≥0) ≤ ‖x‖₊ then ‖x‖ else 0)\n  have F_meas : Measurable F := by\n    apply measurable_norm.indicator (measurableSet_le measurable_const measurable_nnnorm)\n  have : ∀ k, (fun x ↦ Set.indicator {x | C ≤ ‖f k x‖} (fun a ↦ ‖f k a‖) x) = F ∘ f k := by\n    intro k\n    ext x\n    simp only [Set.indicator, Set.mem_setOf_eq]; norm_cast\n  rw [this, this, ← eLpNorm_map_measure F_meas.aestronglyMeasurable (hf i).aemeasurable_fst,\n    (hf i).map_eq, eLpNorm_map_measure F_meas.aestronglyMeasurable (hf j).aemeasurable_fst]\n\n"}
{"name":"ProbabilityTheory.Memℒp.uniformIntegrable_of_identDistrib","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\ninst✝⁴ : MeasurableSpace α\nE : Type u_5\ninst✝³ : MeasurableSpace E\ninst✝² : NormedAddCommGroup E\ninst✝¹ : BorelSpace E\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nι : Type u_6\nf : ι → α → E\nj : ι\np : ENNReal\nhp : LE.le 1 p\nhp' : Ne p Top.top\nhℒp : MeasureTheory.Memℒp (f j) p μ\nhf : ∀ (i : ι), ProbabilityTheory.IdentDistrib (f i) (f j) μ μ\n⊢ MeasureTheory.UniformIntegrable f p μ","decl":"/-- A sequence of identically distributed Lᵖ functions is p-uniformly integrable. -/\ntheorem Memℒp.uniformIntegrable_of_identDistrib {ι : Type*} {f : ι → α → E} {j : ι} {p : ℝ≥0∞}\n    (hp : 1 ≤ p) (hp' : p ≠ ∞) (hℒp : Memℒp (f j) p μ) (hf : ∀ i, IdentDistrib (f i) (f j) μ μ) :\n    UniformIntegrable f p μ := by\n  have hfmeas : ∀ i, AEStronglyMeasurable (f i) μ := fun i =>\n    (hf i).aestronglyMeasurable_iff.2 hℒp.1\n  set g : ι → α → E := fun i => (hfmeas i).choose\n  have hgmeas : ∀ i, StronglyMeasurable (g i) := fun i => (Exists.choose_spec <| hfmeas i).1\n  have hgeq : ∀ i, g i =ᵐ[μ] f i := fun i => (Exists.choose_spec <| hfmeas i).2.symm\n  have hgℒp : Memℒp (g j) p μ := hℒp.ae_eq (hgeq j).symm\n  exact UniformIntegrable.ae_eq\n    (Memℒp.uniformIntegrable_of_identDistrib_aux hp hp' hgℒp hgmeas fun i =>\n      (IdentDistrib.of_ae_eq (hgmeas i).aemeasurable (hgeq i)).trans\n        ((hf i).trans <| IdentDistrib.of_ae_eq (hfmeas j).aemeasurable (hgeq j).symm)) hgeq\n\n"}
{"name":"ProbabilityTheory.indepFun_of_identDistrib_pair","module":"Mathlib.Probability.IdentDistrib","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : MeasurableSpace β\ninst✝³ : MeasurableSpace γ\ninst✝² : MeasurableSpace δ\nμ : MeasureTheory.Measure γ\nμ' : MeasureTheory.Measure δ\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : MeasureTheory.IsFiniteMeasure μ'\nX : γ → α\nX' : δ → α\nY : γ → β\nY' : δ → β\nh_indep : ProbabilityTheory.IndepFun X Y μ\nh_ident : ProbabilityTheory.IdentDistrib (fun ω => { fst := X ω, snd := Y ω }) (fun ω => { fst := X' ω, snd := Y' ω }) μ μ'\n⊢ ProbabilityTheory.IndepFun X' Y' μ'","decl":"/-- If `X` and `Y` are independent and `(X, Y)` and `(X', Y')` are identically distributed,\nthen `X'` and `Y'` are independent. -/\nlemma indepFun_of_identDistrib_pair\n    {μ : Measure γ} {μ' : Measure δ} [IsFiniteMeasure μ] [IsFiniteMeasure μ']\n    {X : γ → α} {X' : δ → α} {Y : γ → β} {Y' : δ → β} (h_indep : IndepFun X Y μ)\n    (h_ident : IdentDistrib (fun ω ↦ (X ω, Y ω)) (fun ω ↦ (X' ω, Y' ω)) μ μ') :\n    IndepFun X' Y' μ' := by\n  rw [indepFun_iff_map_prod_eq_prod_map_map _ _, ← h_ident.map_eq,\n    (indepFun_iff_map_prod_eq_prod_map_map _ _).1 h_indep]\n  · exact congr (congrArg Measure.prod <| (h_ident.comp measurable_fst).map_eq)\n      (h_ident.comp measurable_snd).map_eq\n  · exact measurable_fst.aemeasurable.comp_aemeasurable h_ident.aemeasurable_fst\n  · exact measurable_snd.aemeasurable.comp_aemeasurable h_ident.aemeasurable_fst\n  · exact measurable_fst.aemeasurable.comp_aemeasurable h_ident.aemeasurable_snd\n  · exact measurable_snd.aemeasurable.comp_aemeasurable h_ident.aemeasurable_snd\n\n"}
