{"name":"Real.tendsto_sum_pi_div_four","module":"Mathlib.Data.Real.Pi.Leibniz","initialProofState":"⊢ Filter.Tendsto (fun k => (Finset.range k).sum fun i => HDiv.hDiv (HPow.hPow (-1) i) (HAdd.hAdd (HMul.hMul 2 ↑i) 1)) Filter.atTop (nhds (HDiv.hDiv Real.pi 4))","decl":"/-- **Leibniz's series for `π`**. The alternating sum of odd number reciprocals is `π / 4`,\nproved by using Abel's limit theorem to extend the Maclaurin series of `arctan` to 1. -/\ntheorem tendsto_sum_pi_div_four :\n    Tendsto (fun k => ∑ i ∈ range k, (-1 : ℝ) ^ i / (2 * i + 1)) atTop (𝓝 (π / 4)) := by\n  -- The series is alternating with terms of decreasing magnitude, so it converges to some limit\n  obtain ⟨l, h⟩ :\n      ∃ l, Tendsto (fun n ↦ ∑ i ∈ range n, (-1 : ℝ) ^ i / (2 * i + 1)) atTop (𝓝 l) := by\n    apply Antitone.tendsto_alternating_series_of_tendsto_zero\n    · exact antitone_iff_forall_lt.mpr fun _ _ _ ↦ by gcongr\n    · apply Tendsto.inv_tendsto_atTop; apply tendsto_atTop_add_const_right\n      exact tendsto_natCast_atTop_atTop.const_mul_atTop zero_lt_two\n  -- Abel's limit theorem states that the corresponding power series has the same limit as `x → 1⁻`\n  have abel := tendsto_tsum_powerSeries_nhdsWithin_lt h\n  -- Massage the expression to get `x ^ (2 * n + 1)` in the tsum rather than `x ^ n`...\n  have m : 𝓝[<] (1 : ℝ) ≤ 𝓝 1 := tendsto_nhdsWithin_of_tendsto_nhds fun _ a ↦ a\n  have q : Tendsto (fun x : ℝ ↦ x ^ 2) (𝓝[<] 1) (𝓝[<] 1) := by\n    apply tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within\n    · nth_rw 3 [← one_pow 2]\n      exact Tendsto.pow ‹_› _\n    · rw [eventually_iff_exists_mem]\n      use Set.Ioo (-1) 1\n      exact ⟨Ioo_mem_nhdsLT <| by simp,\n        fun _ _ ↦ by rwa [Set.mem_Iio, sq_lt_one_iff_abs_lt_one, abs_lt, ← Set.mem_Ioo]⟩\n  replace abel := (abel.comp q).mul m\n  rw [mul_one] at abel\n  -- ...so that we can replace the tsum with the real arctangent function\n  replace abel : Tendsto arctan (𝓝[<] 1) (𝓝 l) := by\n    apply abel.congr'\n    rw [eventuallyEq_nhdsWithin_iff, Metric.eventually_nhds_iff]\n    use 1, zero_lt_one\n    intro y hy1 hy2\n    rw [dist_eq, abs_sub_lt_iff] at hy1\n    rw [Set.mem_Iio] at hy2\n    have ny : ‖y‖ < 1 := by rw [norm_eq_abs, abs_lt]; constructor <;> linarith\n    rw [← (hasSum_arctan ny).tsum_eq, Function.comp_apply, ← tsum_mul_right]\n    simp_rw [mul_assoc, ← pow_mul, ← pow_succ, div_mul_eq_mul_div]\n    norm_cast\n  -- But `arctan` is continuous everywhere, so the limit is `arctan 1 = π / 4`\n  rwa [tendsto_nhds_unique abel ((continuous_arctan.tendsto 1).mono_left m), arctan_one] at h\n\n"}
