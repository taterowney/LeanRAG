{"name":"mem_nonZeroDivisorsLeft_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\nx : M₀\n⊢ Iff (Membership.mem (nonZeroDivisorsLeft M₀) x) (∀ (y : M₀), Eq (HMul.hMul y x) 0 → Eq y 0)","decl":"@[simp] lemma mem_nonZeroDivisorsLeft_iff {x : M₀} :\n    x ∈ nonZeroDivisorsLeft M₀ ↔ ∀ y, y * x = 0 → y = 0 :=\n  Iff.rfl\n\n"}
{"name":"nmem_nonZeroDivisorsLeft_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\nr : M₀\n⊢ Iff (Not (Membership.mem (nonZeroDivisorsLeft M₀) r)) (setOf fun s => And (Eq (HMul.hMul s r) 0) (Ne s 0)).Nonempty","decl":"lemma nmem_nonZeroDivisorsLeft_iff {r : M₀} :\n    r ∉ nonZeroDivisorsLeft M₀ ↔ {s | s * r = 0 ∧ s ≠ 0}.Nonempty := by\n  simpa [mem_nonZeroDivisorsLeft_iff] using Set.nonempty_def.symm\n\n"}
{"name":"mem_nonZeroDivisorsRight_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\nx : M₀\n⊢ Iff (Membership.mem (nonZeroDivisorsRight M₀) x) (∀ (y : M₀), Eq (HMul.hMul x y) 0 → Eq y 0)","decl":"@[simp] lemma mem_nonZeroDivisorsRight_iff {x : M₀} :\n    x ∈ nonZeroDivisorsRight M₀ ↔ ∀ y, x * y = 0 → y = 0 :=\n  Iff.rfl\n\n"}
{"name":"nmem_nonZeroDivisorsRight_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\nr : M₀\n⊢ Iff (Not (Membership.mem (nonZeroDivisorsRight M₀) r)) (setOf fun s => And (Eq (HMul.hMul r s) 0) (Ne s 0)).Nonempty","decl":"lemma nmem_nonZeroDivisorsRight_iff {r : M₀} :\n    r ∉ nonZeroDivisorsRight M₀ ↔ {s | r * s = 0 ∧ s ≠ 0}.Nonempty := by\n  simpa [mem_nonZeroDivisorsRight_iff] using Set.nonempty_def.symm\n\n"}
{"name":"nonZeroDivisorsLeft_eq_right","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_2\ninst✝ : CommMonoidWithZero M₀\n⊢ Eq (nonZeroDivisorsLeft M₀) (nonZeroDivisorsRight M₀)","decl":"lemma nonZeroDivisorsLeft_eq_right (M₀ : Type*) [CommMonoidWithZero M₀] :\n    nonZeroDivisorsLeft M₀ = nonZeroDivisorsRight M₀ := by\n  ext x; simp [mul_comm x]\n\n"}
{"name":"coe_nonZeroDivisorsLeft_eq","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝² : MonoidWithZero M₀\ninst✝¹ : NoZeroDivisors M₀\ninst✝ : Nontrivial M₀\n⊢ Eq (↑(nonZeroDivisorsLeft M₀)) (setOf fun x => Ne x 0)","decl":"@[simp] lemma coe_nonZeroDivisorsLeft_eq [NoZeroDivisors M₀] [Nontrivial M₀] :\n    nonZeroDivisorsLeft M₀ = {x : M₀ | x ≠ 0} := by\n  ext x\n  simp only [SetLike.mem_coe, mem_nonZeroDivisorsLeft_iff, mul_eq_zero, forall_eq_or_imp, true_and,\n    Set.mem_setOf_eq]\n  refine ⟨fun h ↦ ?_, fun hx y hx' ↦ by contradiction⟩\n  contrapose! h\n  exact ⟨1, h, one_ne_zero⟩\n\n"}
{"name":"coe_nonZeroDivisorsRight_eq","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝² : MonoidWithZero M₀\ninst✝¹ : NoZeroDivisors M₀\ninst✝ : Nontrivial M₀\n⊢ Eq (↑(nonZeroDivisorsRight M₀)) (setOf fun x => Ne x 0)","decl":"@[simp] lemma coe_nonZeroDivisorsRight_eq [NoZeroDivisors M₀] [Nontrivial M₀] :\n    nonZeroDivisorsRight M₀ = {x : M₀ | x ≠ 0} := by\n  ext x\n  simp only [SetLike.mem_coe, mem_nonZeroDivisorsRight_iff, mul_eq_zero, Set.mem_setOf_eq]\n  refine ⟨fun h ↦ ?_, fun hx y hx' ↦ by aesop⟩\n  contrapose! h\n  exact ⟨1, Or.inl h, one_ne_zero⟩\n\n"}
{"name":"mem_nonZeroDivisors_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝ : MonoidWithZero M\nr : M\n⊢ Iff (Membership.mem (nonZeroDivisors M) r) (∀ (x : M), Eq (HMul.hMul x r) 0 → Eq x 0)","decl":"theorem mem_nonZeroDivisors_iff {r : M} : r ∈ M⁰ ↔ ∀ x, x * r = 0 → x = 0 := Iff.rfl\n\n"}
{"name":"nmem_nonZeroDivisors_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝ : MonoidWithZero M\nr : M\n⊢ Iff (Not (Membership.mem (nonZeroDivisors M) r)) (setOf fun s => And (Eq (HMul.hMul s r) 0) (Ne s 0)).Nonempty","decl":"lemma nmem_nonZeroDivisors_iff {r : M} : r ∉ M⁰ ↔ {s | s * r = 0 ∧ s ≠ 0}.Nonempty := by\n  simpa [mem_nonZeroDivisors_iff] using Set.nonempty_def.symm\n\n"}
{"name":"mul_right_mem_nonZeroDivisors_eq_zero_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝ : MonoidWithZero M\nx r : M\nhr : Membership.mem (nonZeroDivisors M) r\n⊢ Iff (Eq (HMul.hMul x r) 0) (Eq x 0)","decl":"theorem mul_right_mem_nonZeroDivisors_eq_zero_iff {x r : M} (hr : r ∈ M⁰) : x * r = 0 ↔ x = 0 :=\n  ⟨hr _, by simp +contextual⟩\n"}
{"name":"mul_right_coe_nonZeroDivisors_eq_zero_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝ : MonoidWithZero M\nx : M\nc : Subtype fun x => Membership.mem (nonZeroDivisors M) x\n⊢ Iff (Eq (HMul.hMul x ↑c) 0) (Eq x 0)","decl":"@[simp]\ntheorem mul_right_coe_nonZeroDivisors_eq_zero_iff {x : M} {c : M⁰} : x * c = 0 ↔ x = 0 :=\n  mul_right_mem_nonZeroDivisors_eq_zero_iff c.prop\n\n"}
{"name":"mul_left_mem_nonZeroDivisors_eq_zero_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₁ : Type u_3\ninst✝ : CommMonoidWithZero M₁\nr x : M₁\nhr : Membership.mem (nonZeroDivisors M₁) r\n⊢ Iff (Eq (HMul.hMul r x) 0) (Eq x 0)","decl":"theorem mul_left_mem_nonZeroDivisors_eq_zero_iff {r x : M₁} (hr : r ∈ M₁⁰) : r * x = 0 ↔ x = 0 := by\n  rw [mul_comm, mul_right_mem_nonZeroDivisors_eq_zero_iff hr]\n\n"}
{"name":"mul_left_coe_nonZeroDivisors_eq_zero_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₁ : Type u_3\ninst✝ : CommMonoidWithZero M₁\nc : Subtype fun x => Membership.mem (nonZeroDivisors M₁) x\nx : M₁\n⊢ Iff (Eq (HMul.hMul (↑c) x) 0) (Eq x 0)","decl":"@[simp]\ntheorem mul_left_coe_nonZeroDivisors_eq_zero_iff {c : M₁⁰} {x : M₁} : (c : M₁) * x = 0 ↔ x = 0 :=\n  mul_left_mem_nonZeroDivisors_eq_zero_iff c.prop\n\n"}
{"name":"zero_not_mem_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : Nontrivial M\n⊢ Not (Membership.mem (nonZeroDivisors M) 0)","decl":"theorem zero_not_mem_nonZeroDivisors [Nontrivial M] : 0 ∉ M⁰ :=\n  fun h ↦ one_ne_zero <| h 1 <| mul_zero _\n\n"}
{"name":"nonZeroDivisors.ne_zero","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : Nontrivial M\nx : M\nhx : Membership.mem (nonZeroDivisors M) x\n⊢ Ne x 0","decl":"theorem nonZeroDivisors.ne_zero [Nontrivial M] {x} (hx : x ∈ M⁰) : x ≠ 0 :=\n  ne_of_mem_of_not_mem hx zero_not_mem_nonZeroDivisors\n\n"}
{"name":"nonZeroDivisors.coe_ne_zero","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : Nontrivial M\nx : Subtype fun x => Membership.mem (nonZeroDivisors M) x\n⊢ Ne (↑x) 0","decl":"@[simp]\ntheorem nonZeroDivisors.coe_ne_zero [Nontrivial M] (x : M⁰) : (x : M) ≠ 0 :=\n  nonZeroDivisors.ne_zero x.2\n\n"}
{"name":"mul_mem_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₁ : Type u_3\ninst✝ : CommMonoidWithZero M₁\na b : M₁\n⊢ Iff (Membership.mem (nonZeroDivisors M₁) (HMul.hMul a b)) (And (Membership.mem (nonZeroDivisors M₁) a) (Membership.mem (nonZeroDivisors M₁) b))","decl":"theorem mul_mem_nonZeroDivisors {a b : M₁} : a * b ∈ M₁⁰ ↔ a ∈ M₁⁰ ∧ b ∈ M₁⁰ := by\n  constructor\n  · intro h\n    constructor <;> intro x h' <;> apply h\n    · rw [← mul_assoc, h', zero_mul]\n    · rw [mul_comm a b, ← mul_assoc, h', zero_mul]\n  · rintro ⟨ha, hb⟩ x hx\n    apply ha\n    apply hb\n    rw [mul_assoc, hx]\n\n"}
{"name":"IsUnit.mem_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝ : MonoidWithZero M\na : M\nha : IsUnit a\n⊢ Membership.mem (nonZeroDivisors M) a","decl":"lemma IsUnit.mem_nonZeroDivisors {a : M} (ha : IsUnit a) : a ∈ M⁰ :=\n  fun _ h ↦ ha.mul_left_eq_zero.mp h\n\n"}
{"name":"eq_zero_of_ne_zero_of_mul_right_eq_zero","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : NoZeroDivisors M\nx y : M\nhnx : Ne x 0\nhxy : Eq (HMul.hMul y x) 0\n⊢ Eq y 0","decl":"theorem eq_zero_of_ne_zero_of_mul_right_eq_zero [NoZeroDivisors M] {x y : M} (hnx : x ≠ 0)\n    (hxy : y * x = 0) : y = 0 :=\n  Or.resolve_right (eq_zero_or_eq_zero_of_mul_eq_zero hxy) hnx\n\n"}
{"name":"eq_zero_of_ne_zero_of_mul_left_eq_zero","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : NoZeroDivisors M\nx y : M\nhnx : Ne x 0\nhxy : Eq (HMul.hMul x y) 0\n⊢ Eq y 0","decl":"theorem eq_zero_of_ne_zero_of_mul_left_eq_zero [NoZeroDivisors M] {x y : M} (hnx : x ≠ 0)\n    (hxy : x * y = 0) : y = 0 :=\n  Or.resolve_left (eq_zero_or_eq_zero_of_mul_eq_zero hxy) hnx\n\n"}
{"name":"mem_nonZeroDivisors_of_ne_zero","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : NoZeroDivisors M\nx : M\nhx : Ne x 0\n⊢ Membership.mem (nonZeroDivisors M) x","decl":"theorem mem_nonZeroDivisors_of_ne_zero [NoZeroDivisors M] {x : M} (hx : x ≠ 0) : x ∈ M⁰ := fun _ ↦\n  eq_zero_of_ne_zero_of_mul_right_eq_zero hx\n\n"}
{"name":"mem_nonZeroDivisors_iff_ne_zero","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝² : MonoidWithZero M\ninst✝¹ : NoZeroDivisors M\ninst✝ : Nontrivial M\nx : M\n⊢ Iff (Membership.mem (nonZeroDivisors M) x) (Ne x 0)","decl":"@[simp] lemma mem_nonZeroDivisors_iff_ne_zero [NoZeroDivisors M] [Nontrivial M] {x : M} :\n    x ∈ M⁰ ↔ x ≠ 0 := ⟨nonZeroDivisors.ne_zero, mem_nonZeroDivisors_of_ne_zero⟩\n\n"}
{"name":"map_ne_zero_of_mem_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\nM' : Type u_2\nF : Type u_6\ninst✝⁴ : MonoidWithZero M\ninst✝³ : MonoidWithZero M'\ninst✝² : FunLike F M M'\ninst✝¹ : Nontrivial M\ninst✝ : ZeroHomClass F M M'\ng : F\nhg : Function.Injective ⇑g\nx : M\nh : Membership.mem (nonZeroDivisors M) x\n⊢ Ne (g x) 0","decl":"theorem map_ne_zero_of_mem_nonZeroDivisors [Nontrivial M] [ZeroHomClass F M M'] (g : F)\n    (hg : Function.Injective (g : M → M')) {x : M} (h : x ∈ M⁰) : g x ≠ 0 := fun h0 ↦\n  one_ne_zero (h 1 ((one_mul x).symm ▸ hg (h0.trans (map_zero g).symm)))\n\n"}
{"name":"map_mem_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\nM' : Type u_2\nF : Type u_6\ninst✝⁵ : MonoidWithZero M\ninst✝⁴ : MonoidWithZero M'\ninst✝³ : FunLike F M M'\ninst✝² : Nontrivial M\ninst✝¹ : NoZeroDivisors M'\ninst✝ : ZeroHomClass F M M'\ng : F\nhg : Function.Injective ⇑g\nx : M\nh : Membership.mem (nonZeroDivisors M) x\n⊢ Membership.mem (nonZeroDivisors M') (g x)","decl":"theorem map_mem_nonZeroDivisors [Nontrivial M] [NoZeroDivisors M'] [ZeroHomClass F M M'] (g : F)\n    (hg : Function.Injective g) {x : M} (h : x ∈ M⁰) : g x ∈ M'⁰ := fun _ hz ↦\n  eq_zero_of_ne_zero_of_mul_right_eq_zero (map_ne_zero_of_mem_nonZeroDivisors g hg h) hz\n\n"}
{"name":"MulEquivClass.map_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"R : Type u_7\nS : Type u_8\nF : Type u_9\ninst✝³ : MonoidWithZero R\ninst✝² : MonoidWithZero S\ninst✝¹ : EquivLike F R S\ninst✝ : MulEquivClass F R S\nh : F\n⊢ Eq (Submonoid.map h (nonZeroDivisors R)) (nonZeroDivisors S)","decl":"theorem MulEquivClass.map_nonZeroDivisors {R S F : Type*} [MonoidWithZero R] [MonoidWithZero S]\n    [EquivLike F R S] [MulEquivClass F R S] (h : F) :\n    Submonoid.map h (nonZeroDivisors R) = nonZeroDivisors S := by\n  let h : R ≃* S := h\n  show Submonoid.map h.toMonoidHom _ = _\n  ext\n  simp_rw [Submonoid.map_equiv_eq_comap_symm, Submonoid.mem_comap, mem_nonZeroDivisors_iff,\n    ← h.symm.forall_congr_right, h.symm.coe_toMonoidHom, h.symm.toEquiv_eq_coe, h.symm.coe_toEquiv,\n    ← map_mul, map_eq_zero_iff _ h.symm.injective]\n\n"}
{"name":"le_nonZeroDivisors_of_noZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : NoZeroDivisors M\nS : Submonoid M\nhS : Not (Membership.mem S 0)\n⊢ LE.le S (nonZeroDivisors M)","decl":"theorem le_nonZeroDivisors_of_noZeroDivisors [NoZeroDivisors M] {S : Submonoid M}\n    (hS : (0 : M) ∉ S) : S ≤ M⁰ := fun _ hx _ hy ↦\n  Or.recOn (eq_zero_or_eq_zero_of_mul_eq_zero hy) id fun h ↦\n    absurd (h ▸ hx : (0 : M) ∈ S) hS\n\n"}
{"name":"powers_le_nonZeroDivisors_of_noZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\ninst✝¹ : MonoidWithZero M\ninst✝ : NoZeroDivisors M\na : M\nha : Ne a 0\n⊢ LE.le (Submonoid.powers a) (nonZeroDivisors M)","decl":"theorem powers_le_nonZeroDivisors_of_noZeroDivisors [NoZeroDivisors M] {a : M} (ha : a ≠ 0) :\n    Submonoid.powers a ≤ M⁰ :=\n  le_nonZeroDivisors_of_noZeroDivisors fun h ↦ absurd (h.recOn fun _ hn ↦ pow_eq_zero hn) ha\n\n"}
{"name":"map_le_nonZeroDivisors_of_injective","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\nM' : Type u_2\nF : Type u_6\ninst✝⁴ : MonoidWithZero M\ninst✝³ : MonoidWithZero M'\ninst✝² : FunLike F M M'\ninst✝¹ : NoZeroDivisors M'\ninst✝ : MonoidWithZeroHomClass F M M'\nf : F\nhf : Function.Injective ⇑f\nS : Submonoid M\nhS : LE.le S (nonZeroDivisors M)\n⊢ LE.le (Submonoid.map f S) (nonZeroDivisors M')","decl":"theorem map_le_nonZeroDivisors_of_injective [NoZeroDivisors M'] [MonoidWithZeroHomClass F M M']\n    (f : F) (hf : Function.Injective f) {S : Submonoid M} (hS : S ≤ M⁰) : S.map f ≤ M'⁰ := by\n  cases subsingleton_or_nontrivial M\n  · simp [Subsingleton.elim S ⊥]\n  · exact le_nonZeroDivisors_of_noZeroDivisors fun h ↦\n      let ⟨x, hx, hx0⟩ := h\n      zero_ne_one (hS (hf (hx0.trans (map_zero f).symm) ▸ hx : 0 ∈ S) 1 (mul_zero 1)).symm\n\n"}
{"name":"nonZeroDivisors_le_comap_nonZeroDivisors_of_injective","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\nM' : Type u_2\nF : Type u_6\ninst✝⁴ : MonoidWithZero M\ninst✝³ : MonoidWithZero M'\ninst✝² : FunLike F M M'\ninst✝¹ : NoZeroDivisors M'\ninst✝ : MonoidWithZeroHomClass F M M'\nf : F\nhf : Function.Injective ⇑f\n⊢ LE.le (nonZeroDivisors M) (Submonoid.comap f (nonZeroDivisors M'))","decl":"theorem nonZeroDivisors_le_comap_nonZeroDivisors_of_injective [NoZeroDivisors M']\n    [MonoidWithZeroHomClass F M M'] (f : F) (hf : Function.Injective f) : M⁰ ≤ M'⁰.comap f :=\n  Submonoid.le_comap_of_map_le _ (map_le_nonZeroDivisors_of_injective _ hf le_rfl)\n\n"}
{"name":"mem_nonZeroDivisor_of_injective","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\nM' : Type u_2\nF : Type u_6\ninst✝³ : MonoidWithZero M\ninst✝² : MonoidWithZero M'\ninst✝¹ : FunLike F M M'\ninst✝ : MonoidWithZeroHomClass F M M'\nf : F\nhf : Function.Injective ⇑f\na : M\nha : Membership.mem (nonZeroDivisors M') (f a)\n⊢ Membership.mem (nonZeroDivisors M) a","decl":"/-- If an element maps to a non-zero-divisor via injective homomorphism,\nthen it is non-zero-divisor. -/\ntheorem mem_nonZeroDivisor_of_injective [MonoidWithZeroHomClass F M M'] {f : F}\n    (hf : Function.Injective f) {a : M} (ha : f a ∈ M'⁰) : a ∈ M⁰ :=\n  fun x hx ↦ hf <| map_zero f ▸ ha (f x) (map_mul f x a ▸ map_zero f ▸ congrArg f hx)\n\n"}
{"name":"comap_nonZeroDivisor_le_of_injective","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M : Type u_1\nM' : Type u_2\nF : Type u_6\ninst✝³ : MonoidWithZero M\ninst✝² : MonoidWithZero M'\ninst✝¹ : FunLike F M M'\ninst✝ : MonoidWithZeroHomClass F M M'\nf : F\nhf : Function.Injective ⇑f\n⊢ LE.le (Submonoid.comap f (nonZeroDivisors M')) (nonZeroDivisors M)","decl":"theorem comap_nonZeroDivisor_le_of_injective [MonoidWithZeroHomClass F M M'] {f : F}\n    (hf : Function.Injective f) : M'⁰.comap f ≤ M⁰ :=\n  fun _ ha ↦ mem_nonZeroDivisor_of_injective hf (Submonoid.mem_comap.mp ha)\n\n"}
{"name":"nonZeroDivisorsEquivUnits_apply","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\nu : Subtype fun x => Membership.mem (nonZeroDivisors G₀) x\n⊢ Eq (nonZeroDivisorsEquivUnits u) (Units.mk0 ↑u ⋯)","decl":"/-- Canonical isomorphism between the non-zero-divisors and units of a group with zero. -/\n@[simps]\nnoncomputable def nonZeroDivisorsEquivUnits : G₀⁰ ≃* G₀ˣ where\n  toFun u := .mk0 _ <| mem_nonZeroDivisors_iff_ne_zero.1 u.2\n  invFun u := ⟨u, u.isUnit.mem_nonZeroDivisors⟩\n  left_inv u := rfl\n  right_inv u := by simp\n  map_mul' u v := by simp\n\n"}
{"name":"nonZeroDivisorsEquivUnits_symm_apply_coe","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\nu : Units G₀\n⊢ Eq ↑(nonZeroDivisorsEquivUnits.symm u) ↑u","decl":"/-- Canonical isomorphism between the non-zero-divisors and units of a group with zero. -/\n@[simps]\nnoncomputable def nonZeroDivisorsEquivUnits : G₀⁰ ≃* G₀ˣ where\n  toFun u := .mk0 _ <| mem_nonZeroDivisors_iff_ne_zero.1 u.2\n  invFun u := ⟨u, u.isUnit.mem_nonZeroDivisors⟩\n  left_inv u := rfl\n  right_inv u := by simp\n  map_mul' u v := by simp\n\n"}
{"name":"isUnit_of_mem_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\nx : G₀\nhx : Membership.mem (nonZeroDivisors G₀) x\n⊢ IsUnit x","decl":"lemma isUnit_of_mem_nonZeroDivisors (hx : x ∈ nonZeroDivisors G₀) : IsUnit x :=\n  (nonZeroDivisorsEquivUnits ⟨x, hx⟩).isUnit\n\n"}
{"name":"mem_nonZeroSMulDivisors_iff","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : MonoidWithZero R\ninst✝¹ : Zero M\ninst✝ : MulAction R M\nx : R\n⊢ Iff (Membership.mem (nonZeroSMulDivisors R M) x) (∀ (m : M), Eq (HSMul.hSMul x m) 0 → Eq m 0)","decl":"lemma mem_nonZeroSMulDivisors_iff {x : R} : x ∈ R⁰[M] ↔ ∀ (m : M), x • m = 0 → m = 0 := Iff.rfl\n\n"}
{"name":"unop_nonZeroSMulDivisors_mulOpposite_eq_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"R : Type u_1\ninst✝ : MonoidWithZero R\n⊢ Eq (nonZeroSMulDivisors (MulOpposite R) R).unop (nonZeroDivisors R)","decl":"@[simp]\nlemma unop_nonZeroSMulDivisors_mulOpposite_eq_nonZeroDivisors :\n    (Rᵐᵒᵖ ⁰[R]).unop = R⁰ := rfl\n\n"}
{"name":"nonZeroSMulDivisors_mulOpposite_eq_op_nonZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"R : Type u_1\ninst✝ : MonoidWithZero R\n⊢ Eq (nonZeroSMulDivisors (MulOpposite R) R) (nonZeroDivisors R).op","decl":"/-- The non-zero `•`-divisors with `•` as right multiplication correspond with the non-zero\ndivisors. Note that the `MulOpposite` is needed because we defined `nonZeroDivisors` with\nmultiplication on the right. -/\nlemma nonZeroSMulDivisors_mulOpposite_eq_op_nonZeroDivisors :\n    Rᵐᵒᵖ ⁰[R] = R⁰.op := rfl\n\n"}
{"name":"unitsNonZeroDivisorsEquiv_apply","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\na✝ : Units (Subtype fun x => Membership.mem (nonZeroDivisors M₀) x)\n⊢ Eq (unitsNonZeroDivisorsEquiv a✝) ((↑(Units.map (nonZeroDivisors M₀).subtype)).toFun a✝)","decl":"/-- The units of the monoid of non-zero divisors of `M₀` are equivalent to the units of `M₀`. -/\n@[simps]\ndef unitsNonZeroDivisorsEquiv : M₀⁰ˣ ≃* M₀ˣ where\n  __ := Units.map M₀⁰.subtype\n  invFun u := ⟨⟨u, u.isUnit.mem_nonZeroDivisors⟩, ⟨(u⁻¹ : M₀ˣ), u⁻¹.isUnit.mem_nonZeroDivisors⟩,\n    by simp, by simp⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"val_inv_unitsNonZeroDivisorsEquiv_symm_apply_coe","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\nu : Units M₀\n⊢ Eq ↑↑(Inv.inv (unitsNonZeroDivisorsEquiv.symm u)) ↑(Inv.inv u)","decl":"/-- The units of the monoid of non-zero divisors of `M₀` are equivalent to the units of `M₀`. -/\n@[simps]\ndef unitsNonZeroDivisorsEquiv : M₀⁰ˣ ≃* M₀ˣ where\n  __ := Units.map M₀⁰.subtype\n  invFun u := ⟨⟨u, u.isUnit.mem_nonZeroDivisors⟩, ⟨(u⁻¹ : M₀ˣ), u⁻¹.isUnit.mem_nonZeroDivisors⟩,\n    by simp, by simp⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"val_unitsNonZeroDivisorsEquiv_symm_apply_coe","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\nu : Units M₀\n⊢ Eq ↑↑(unitsNonZeroDivisorsEquiv.symm u) ↑u","decl":"/-- The units of the monoid of non-zero divisors of `M₀` are equivalent to the units of `M₀`. -/\n@[simps]\ndef unitsNonZeroDivisorsEquiv : M₀⁰ˣ ≃* M₀ˣ where\n  __ := Units.map M₀⁰.subtype\n  invFun u := ⟨⟨u, u.isUnit.mem_nonZeroDivisors⟩, ⟨(u⁻¹ : M₀ˣ), u⁻¹.isUnit.mem_nonZeroDivisors⟩,\n    by simp, by simp⟩\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"nonZeroDivisors.associated_coe","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : MonoidWithZero M₀\na b : Subtype fun x => Membership.mem (nonZeroDivisors M₀) x\n⊢ Iff (Associated ↑a ↑b) (Associated a b)","decl":"@[simp, norm_cast] lemma nonZeroDivisors.associated_coe : Associated (a : M₀) b ↔ Associated a b :=\n  unitsNonZeroDivisorsEquiv.symm.exists_congr_left.trans <| by simp [Associated]; norm_cast\n\n"}
{"name":"mk_mem_nonZeroDivisors_associates","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : CommMonoidWithZero M₀\na : M₀\n⊢ Iff (Membership.mem (nonZeroDivisors (Associates M₀)) (Associates.mk a)) (Membership.mem (nonZeroDivisors M₀) a)","decl":"theorem mk_mem_nonZeroDivisors_associates : Associates.mk a ∈ (Associates M₀)⁰ ↔ a ∈ M₀⁰ := by\n  rw [mem_nonZeroDivisors_iff, mem_nonZeroDivisors_iff, ← not_iff_not]\n  push_neg\n  constructor\n  · rintro ⟨⟨x⟩, hx₁, hx₂⟩\n    refine ⟨x, ?_, ?_⟩\n    · rwa [← Associates.mk_eq_zero, ← Associates.mk_mul_mk, ← Associates.quot_mk_eq_mk]\n    · rwa [← Associates.mk_ne_zero, ← Associates.quot_mk_eq_mk]\n  · refine fun ⟨b, hb₁, hb₂⟩ ↦ ⟨Associates.mk b, ?_, by rwa [Associates.mk_ne_zero]⟩\n    rw [Associates.mk_mul_mk, hb₁, Associates.mk_zero]\n\n"}
{"name":"associatesNonZeroDivisorsEquiv_mk_mk","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : CommMonoidWithZero M₀\na : M₀\nha : Membership.mem (nonZeroDivisors (Associates M₀)) (Quotient.mk (Associated.setoid M₀) a)\n⊢ Eq (associatesNonZeroDivisorsEquiv ⟨Quotient.mk (Associated.setoid M₀) a, ha⟩) (Quotient.mk (Associated.setoid (Subtype fun x => Membership.mem (nonZeroDivisors M₀) x)) ⟨a, ⋯⟩)","decl":"@[simp]\nlemma associatesNonZeroDivisorsEquiv_mk_mk (a : M₀) (ha) :\n    associatesNonZeroDivisorsEquiv ⟨⟦a⟧, ha⟩ = ⟦⟨a, mk_mem_nonZeroDivisors_associates.1 ha⟩⟧ := rfl\n\n"}
{"name":"associatesNonZeroDivisorsEquiv_symm_mk_mk","module":"Mathlib.Algebra.GroupWithZero.NonZeroDivisors","initialProofState":"M₀ : Type u_1\ninst✝ : CommMonoidWithZero M₀\na : M₀\nha : Membership.mem (nonZeroDivisors M₀) a\n⊢ Eq (associatesNonZeroDivisorsEquiv.symm (Quotient.mk (Associated.setoid (Subtype fun x => Membership.mem (nonZeroDivisors M₀) x)) ⟨a, ha⟩)) ⟨Quotient.mk (Associated.setoid M₀) a, ⋯⟩","decl":"@[simp]\nlemma associatesNonZeroDivisorsEquiv_symm_mk_mk (a : M₀) (ha) :\n    associatesNonZeroDivisorsEquiv.symm ⟦⟨a, ha⟩⟧ = ⟨⟦a⟧, mk_mem_nonZeroDivisors_associates.2 ha⟩ :=\n  rfl\n\n"}
