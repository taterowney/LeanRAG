{"name":"IsIrreducible.nonempty","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nh : IsIrreducible s\n⊢ s.Nonempty","decl":"theorem IsIrreducible.nonempty (h : IsIrreducible s) : s.Nonempty :=\n  h.1\n\n"}
{"name":"IsIrreducible.isPreirreducible","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nh : IsIrreducible s\n⊢ IsPreirreducible s","decl":"theorem IsIrreducible.isPreirreducible (h : IsIrreducible s) : IsPreirreducible s :=\n  h.2\n\n"}
{"name":"isPreirreducible_empty","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ IsPreirreducible EmptyCollection.emptyCollection","decl":"theorem isPreirreducible_empty : IsPreirreducible (∅ : Set X) := fun _ _ _ _ _ ⟨_, h1, _⟩ =>\n  h1.elim\n\n"}
{"name":"Set.Subsingleton.isPreirreducible","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : s.Subsingleton\n⊢ IsPreirreducible s","decl":"theorem Set.Subsingleton.isPreirreducible (hs : s.Subsingleton) : IsPreirreducible s :=\n  fun _u _v _ _ ⟨_x, hxs, hxu⟩ ⟨y, hys, hyv⟩ => ⟨y, hys, hs hxs hys ▸ hxu, hyv⟩\n\n"}
{"name":"isPreirreducible_singleton","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ IsPreirreducible (Singleton.singleton x)","decl":"theorem isPreirreducible_singleton {x} : IsPreirreducible ({x} : Set X) :=\n  subsingleton_singleton.isPreirreducible\n\n"}
{"name":"isIrreducible_singleton","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ IsIrreducible (Singleton.singleton x)","decl":"theorem isIrreducible_singleton {x} : IsIrreducible ({x} : Set X) :=\n  ⟨singleton_nonempty x, isPreirreducible_singleton⟩\n\n"}
{"name":"isPreirreducible_iff_closure","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsPreirreducible (closure s)) (IsPreirreducible s)","decl":"theorem isPreirreducible_iff_closure : IsPreirreducible (closure s) ↔ IsPreirreducible s :=\n  forall₄_congr fun u v hu hv => by\n    iterate 3 rw [closure_inter_open_nonempty_iff]\n    exacts [hu.inter hv, hv, hu]\n\n"}
{"name":"isIrreducible_iff_closure","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsIrreducible (closure s)) (IsIrreducible s)","decl":"theorem isIrreducible_iff_closure : IsIrreducible (closure s) ↔ IsIrreducible s :=\n  and_congr closure_nonempty_iff isPreirreducible_iff_closure\n\n"}
{"name":"IsPreirreducible.closure","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\na✝ : IsPreirreducible s\n⊢ IsPreirreducible (closure s)","decl":"protected alias ⟨_, IsPreirreducible.closure⟩ := isPreirreducible_iff_closure\n\n"}
{"name":"IsIrreducible.closure","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\na✝ : IsIrreducible s\n⊢ IsIrreducible (closure s)","decl":"protected alias ⟨_, IsIrreducible.closure⟩ := isIrreducible_iff_closure\n\n"}
{"name":"exists_preirreducible","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nH : IsPreirreducible s\n⊢ Exists fun t => And (IsPreirreducible t) (And (HasSubset.Subset s t) (∀ (u : Set X), IsPreirreducible u → HasSubset.Subset t u → Eq u t))","decl":"theorem exists_preirreducible (s : Set X) (H : IsPreirreducible s) :\n    ∃ t : Set X, IsPreirreducible t ∧ s ⊆ t ∧ ∀ u, IsPreirreducible u → t ⊆ u → u = t :=\n  let ⟨m, hsm, hm⟩ :=\n    zorn_subset_nonempty { t : Set X | IsPreirreducible t }\n      (fun c hc hcc _ =>\n        ⟨⋃₀ c, fun u v hu hv ⟨y, hy, hyu⟩ ⟨x, hx, hxv⟩ =>\n          let ⟨p, hpc, hyp⟩ := mem_sUnion.1 hy\n          let ⟨q, hqc, hxq⟩ := mem_sUnion.1 hx\n          Or.casesOn (hcc.total hpc hqc)\n            (fun hpq : p ⊆ q =>\n              let ⟨x, hxp, hxuv⟩ := hc hqc u v hu hv ⟨y, hpq hyp, hyu⟩ ⟨x, hxq, hxv⟩\n              ⟨x, mem_sUnion_of_mem hxp hqc, hxuv⟩)\n            fun hqp : q ⊆ p =>\n            let ⟨x, hxp, hxuv⟩ := hc hpc u v hu hv ⟨y, hyp, hyu⟩ ⟨x, hqp hxq, hxv⟩\n            ⟨x, mem_sUnion_of_mem hxp hpc, hxuv⟩,\n          fun _ hxc => subset_sUnion_of_mem hxc⟩)\n      s H\n  ⟨m, hm.prop, hsm, fun _u hu hmu => (hm.eq_of_subset hu hmu).symm⟩\n\n"}
{"name":"isClosed_of_mem_irreducibleComponents","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nH : Membership.mem (irreducibleComponents X) s\n⊢ IsClosed s","decl":"theorem isClosed_of_mem_irreducibleComponents (s) (H : s ∈ irreducibleComponents X) :\n    IsClosed s := by\n  rw [← closure_eq_iff_isClosed, eq_comm]\n  exact subset_closure.antisymm (H.2 H.1.closure subset_closure)\n\n"}
{"name":"irreducibleComponents_eq_maximals_closed","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝ : TopologicalSpace X\n⊢ Eq (irreducibleComponents X) (setOf fun s => Maximal (fun x => And (IsClosed x) (IsIrreducible x)) s)","decl":"theorem irreducibleComponents_eq_maximals_closed (X : Type*) [TopologicalSpace X] :\n    irreducibleComponents X = { s | Maximal (fun x ↦ IsClosed x ∧ IsIrreducible x) s} := by\n  ext s\n  constructor\n  · intro H\n    exact ⟨⟨isClosed_of_mem_irreducibleComponents _ H, H.1⟩, fun x h e => H.2 h.2 e⟩\n  · intro H\n    refine ⟨H.1.2, fun x h e => ?_⟩\n    have : closure x ≤ s := H.2 ⟨isClosed_closure, h.closure⟩ (e.trans subset_closure)\n    exact le_trans subset_closure this\n\n"}
{"name":"irreducibleComponent_property","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ And (IsPreirreducible (irreducibleComponent x)) (And (HasSubset.Subset (Singleton.singleton x) (irreducibleComponent x)) (∀ (u : Set X), IsPreirreducible u → HasSubset.Subset (irreducibleComponent x) u → Eq u (irreducibleComponent x)))","decl":"theorem irreducibleComponent_property (x : X) :\n    IsPreirreducible (irreducibleComponent x) ∧\n      {x} ⊆ irreducibleComponent x ∧\n        ∀ u, IsPreirreducible u → irreducibleComponent x ⊆ u → u = irreducibleComponent x :=\n  Classical.choose_spec (exists_preirreducible {x} isPreirreducible_singleton)\n\n"}
{"name":"mem_irreducibleComponent","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ Membership.mem (irreducibleComponent x) x","decl":"theorem mem_irreducibleComponent {x : X} : x ∈ irreducibleComponent x :=\n  singleton_subset_iff.1 (irreducibleComponent_property x).2.1\n\n"}
{"name":"isIrreducible_irreducibleComponent","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ IsIrreducible (irreducibleComponent x)","decl":"theorem isIrreducible_irreducibleComponent {x : X} : IsIrreducible (irreducibleComponent x) :=\n  ⟨⟨x, mem_irreducibleComponent⟩, (irreducibleComponent_property x).1⟩\n\n"}
{"name":"eq_irreducibleComponent","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nx : X\na✝¹ : IsPreirreducible s\na✝ : HasSubset.Subset (irreducibleComponent x) s\n⊢ Eq s (irreducibleComponent x)","decl":"theorem eq_irreducibleComponent {x : X} :\n    IsPreirreducible s → irreducibleComponent x ⊆ s → s = irreducibleComponent x :=\n  (irreducibleComponent_property x).2.2 _\n\n"}
{"name":"irreducibleComponent_mem_irreducibleComponents","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ Membership.mem (irreducibleComponents X) (irreducibleComponent x)","decl":"theorem irreducibleComponent_mem_irreducibleComponents (x : X) :\n    irreducibleComponent x ∈ irreducibleComponents X :=\n  ⟨isIrreducible_irreducibleComponent, fun _ h₁ h₂ => (eq_irreducibleComponent h₁.2 h₂).le⟩\n\n"}
{"name":"isClosed_irreducibleComponent","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nx : X\n⊢ IsClosed (irreducibleComponent x)","decl":"theorem isClosed_irreducibleComponent {x : X} : IsClosed (irreducibleComponent x) :=\n  isClosed_of_mem_irreducibleComponents _ (irreducibleComponent_mem_irreducibleComponents x)\n\n"}
{"name":"PreirreducibleSpace.isPreirreducible_univ","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝ : TopologicalSpace X\nself : PreirreducibleSpace X\n⊢ IsPreirreducible Set.univ","decl":"/-- A preirreducible space is one where there is no non-trivial pair of disjoint opens. -/\nclass PreirreducibleSpace (X : Type*) [TopologicalSpace X] : Prop where\n  /-- In a preirreducible space, `Set.univ` is a preirreducible set. -/\n  isPreirreducible_univ : IsPreirreducible (univ : Set X)\n\n"}
{"name":"IrreducibleSpace.toNonempty","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝ : TopologicalSpace X\nself : IrreducibleSpace X\n⊢ Nonempty X","decl":"/-- An irreducible space is one that is nonempty\nand where there is no non-trivial pair of disjoint opens. -/\nclass IrreducibleSpace (X : Type*) [TopologicalSpace X] extends PreirreducibleSpace X : Prop where\n  toNonempty : Nonempty X\n\n-- see Note [lower instance priority]\n"}
{"name":"IrreducibleSpace.toPreirreducibleSpace","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝ : TopologicalSpace X\nself : IrreducibleSpace X\n⊢ PreirreducibleSpace X","decl":"/-- An irreducible space is one that is nonempty\nand where there is no non-trivial pair of disjoint opens. -/\nclass IrreducibleSpace (X : Type*) [TopologicalSpace X] extends PreirreducibleSpace X : Prop where\n  toNonempty : Nonempty X\n\n-- see Note [lower instance priority]\n"}
{"name":"IrreducibleSpace.isIrreducible_univ","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : IrreducibleSpace X\n⊢ IsIrreducible Set.univ","decl":"theorem IrreducibleSpace.isIrreducible_univ (X : Type*) [TopologicalSpace X] [IrreducibleSpace X] :\n    IsIrreducible (univ : Set X) :=\n  ⟨univ_nonempty, PreirreducibleSpace.isPreirreducible_univ⟩\n\n"}
{"name":"irreducibleSpace_def","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝ : TopologicalSpace X\n⊢ Iff (IrreducibleSpace X) (IsIrreducible Top.top)","decl":"theorem irreducibleSpace_def (X : Type*) [TopologicalSpace X] :\n    IrreducibleSpace X ↔ IsIrreducible (⊤ : Set X) :=\n  ⟨@IrreducibleSpace.isIrreducible_univ X _, fun h =>\n    haveI : PreirreducibleSpace X := ⟨h.2⟩\n    ⟨⟨h.1.some⟩⟩⟩\n\n"}
{"name":"nonempty_preirreducible_inter","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ns t : Set X\ninst✝ : PreirreducibleSpace X\na✝³ : IsOpen s\na✝² : IsOpen t\na✝¹ : s.Nonempty\na✝ : t.Nonempty\n⊢ (Inter.inter s t).Nonempty","decl":"theorem nonempty_preirreducible_inter [PreirreducibleSpace X] :\n    IsOpen s → IsOpen t → s.Nonempty → t.Nonempty → (s ∩ t).Nonempty := by\n  simpa only [univ_inter, univ_subset_iff] using\n    @PreirreducibleSpace.isPreirreducible_univ X _ _ s t\n\n"}
{"name":"IsOpen.dense","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ns : Set X\ninst✝ : PreirreducibleSpace X\nho : IsOpen s\nhne : s.Nonempty\n⊢ Dense s","decl":"/-- In a (pre)irreducible space, a nonempty open set is dense. -/\nprotected theorem IsOpen.dense [PreirreducibleSpace X] (ho : IsOpen s) (hne : s.Nonempty) :\n    Dense s :=\n  dense_iff_inter_open.2 fun _t hto htne => nonempty_preirreducible_inter hto ho htne hne\n\n"}
{"name":"IsPreirreducible.image","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nH : IsPreirreducible s\nf : X → Y\nhf : ContinuousOn f s\n⊢ IsPreirreducible (Set.image f s)","decl":"theorem IsPreirreducible.image (H : IsPreirreducible s) (f : X → Y) (hf : ContinuousOn f s) :\n    IsPreirreducible (f '' s) := by\n  rintro u v hu hv ⟨_, ⟨⟨x, hx, rfl⟩, hxu⟩⟩ ⟨_, ⟨⟨y, hy, rfl⟩, hyv⟩⟩\n  rw [← mem_preimage] at hxu hyv\n  rcases continuousOn_iff'.1 hf u hu with ⟨u', hu', u'_eq⟩\n  rcases continuousOn_iff'.1 hf v hv with ⟨v', hv', v'_eq⟩\n  have := H u' v' hu' hv'\n  rw [inter_comm s u', ← u'_eq] at this\n  rw [inter_comm s v', ← v'_eq] at this\n  rcases this ⟨x, hxu, hx⟩ ⟨y, hyv, hy⟩ with ⟨x, hxs, hxu', hxv'⟩\n  refine ⟨f x, mem_image_of_mem f hxs, ?_, ?_⟩\n  all_goals\n    rw [← mem_preimage]\n    apply mem_of_mem_inter_left\n    show x ∈ _ ∩ s\n    simp [*]\n\n"}
{"name":"IsIrreducible.image","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : Set X\nH : IsIrreducible s\nf : X → Y\nhf : ContinuousOn f s\n⊢ IsIrreducible (Set.image f s)","decl":"theorem IsIrreducible.image (H : IsIrreducible s) (f : X → Y) (hf : ContinuousOn f s) :\n    IsIrreducible (f '' s) :=\n  ⟨H.nonempty.image _, H.isPreirreducible.image f hf⟩\n\n"}
{"name":"Subtype.preirreducibleSpace","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nh : IsPreirreducible s\n⊢ PreirreducibleSpace ↑s","decl":"theorem Subtype.preirreducibleSpace (h : IsPreirreducible s) : PreirreducibleSpace s where\n  isPreirreducible_univ := by\n    rintro _ _ ⟨u, hu, rfl⟩ ⟨v, hv, rfl⟩ ⟨⟨x, hxs⟩, -, hxu⟩ ⟨⟨y, hys⟩, -, hyv⟩\n    rcases h u v hu hv ⟨x, hxs, hxu⟩ ⟨y, hys, hyv⟩ with ⟨x, hxs, ⟨hxu, hxv⟩⟩\n    exact ⟨⟨x, hxs⟩, ⟨Set.mem_univ _, ⟨hxu, hxv⟩⟩⟩\n\n"}
{"name":"Subtype.irreducibleSpace","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nh : IsIrreducible s\n⊢ IrreducibleSpace ↑s","decl":"theorem Subtype.irreducibleSpace (h : IsIrreducible s) : IrreducibleSpace s where\n  isPreirreducible_univ :=\n    (Subtype.preirreducibleSpace h.isPreirreducible).isPreirreducible_univ\n  toNonempty := h.nonempty.to_subtype\n\n"}
{"name":"instIrreducibleSpaceCofiniteTopologyOfInfinite","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_3\ninst✝ : Infinite X\n⊢ IrreducibleSpace (CofiniteTopology X)","decl":"/-- An infinite type with cofinite topology is an irreducible topological space. -/\ninstance (priority := 100) {X} [Infinite X] : IrreducibleSpace (CofiniteTopology X) where\n  isPreirreducible_univ u v := by\n    haveI : Infinite (CofiniteTopology X) := ‹_›\n    simp only [CofiniteTopology.isOpen_iff, univ_inter]\n    intro hu hv hu' hv'\n    simpa only [compl_union, compl_compl] using ((hu hu').union (hv hv')).infinite_compl.nonempty\n  toNonempty := (inferInstance : Nonempty X)\n\n"}
{"name":"irreducibleComponents_eq_singleton","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝¹ : TopologicalSpace X\ninst✝ : IrreducibleSpace X\n⊢ Eq (irreducibleComponents X) (Singleton.singleton Set.univ)","decl":"theorem irreducibleComponents_eq_singleton [IrreducibleSpace X] :\n    irreducibleComponents X = {univ} :=\n  Set.ext fun _ ↦ IsGreatest.maximal_iff (s := IsIrreducible (X := X))\n    ⟨IrreducibleSpace.isIrreducible_univ X, fun _ _ ↦ Set.subset_univ _⟩\n\n"}
{"name":"isIrreducible_iff_sInter","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsIrreducible s) (∀ (U : Finset (Set X)), (∀ (u : Set X), Membership.mem U u → IsOpen u) → (∀ (u : Set X), Membership.mem U u → (Inter.inter s u).Nonempty) → (Inter.inter s (↑U).sInter).Nonempty)","decl":"/-- A set `s` is irreducible if and only if\nfor every finite collection of open sets all of whose members intersect `s`,\n`s` also intersects the intersection of the entire collection\n(i.e., there is an element of `s` contained in every member of the collection). -/\ntheorem isIrreducible_iff_sInter :\n    IsIrreducible s ↔\n      ∀ (U : Finset (Set X)), (∀ u ∈ U, IsOpen u) → (∀ u ∈ U, (s ∩ u).Nonempty) →\n        (s ∩ ⋂₀ ↑U).Nonempty := by\n  classical\n  refine ⟨fun h U hu hU => ?_, fun h => ⟨?_, ?_⟩⟩\n  · induction U using Finset.induction_on with\n    | empty => simpa using h.nonempty\n    | @insert u U _ IH =>\n      rw [Finset.coe_insert, sInter_insert]\n      rw [Finset.forall_mem_insert] at hu hU\n      exact h.2 _ _ hu.1 (U.finite_toSet.isOpen_sInter hu.2) hU.1 (IH hu.2 hU.2)\n  · simpa using h ∅\n  · intro u v hu hv hu' hv'\n    simpa [*] using h {u, v}\n\n"}
{"name":"isPreirreducible_iff_isClosed_union_isClosed","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsPreirreducible s) (∀ (z₁ z₂ : Set X), IsClosed z₁ → IsClosed z₂ → HasSubset.Subset s (Union.union z₁ z₂) → Or (HasSubset.Subset s z₁) (HasSubset.Subset s z₂))","decl":"/-- A set is preirreducible if and only if\nfor every cover by two closed sets, it is contained in one of the two covering sets. -/\ntheorem isPreirreducible_iff_isClosed_union_isClosed :\n    IsPreirreducible s ↔\n      ∀ z₁ z₂ : Set X, IsClosed z₁ → IsClosed z₂ → s ⊆ z₁ ∪ z₂ → s ⊆ z₁ ∨ s ⊆ z₂ := by\n  refine compl_surjective.forall.trans <| forall_congr' fun z₁ => compl_surjective.forall.trans <|\n    forall_congr' fun z₂ => ?_\n  simp only [isOpen_compl_iff, ← compl_union, inter_compl_nonempty_iff]\n  refine forall₂_congr fun _ _ => ?_\n  rw [← and_imp, ← not_or, not_imp_not]\n"}
{"name":"isPreirreducible_iff_closed_union_closed","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsPreirreducible s) (∀ (z₁ z₂ : Set X), IsClosed z₁ → IsClosed z₂ → HasSubset.Subset s (Union.union z₁ z₂) → Or (HasSubset.Subset s z₁) (HasSubset.Subset s z₂))","decl":"@[deprecated (since := \"2024-11-19\")] alias\nisPreirreducible_iff_closed_union_closed := isPreirreducible_iff_isClosed_union_isClosed\n\n"}
{"name":"isIrreducible_iff_sUnion_isClosed","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsIrreducible s) (∀ (t : Finset (Set X)), (∀ (z : Set X), Membership.mem t z → IsClosed z) → HasSubset.Subset s (↑t).sUnion → Exists fun z => And (Membership.mem t z) (HasSubset.Subset s z))","decl":"/-- A set is irreducible if and only if for every cover by a finite collection of closed sets, it is\ncontained in one of the members of the collection. -/\ntheorem isIrreducible_iff_sUnion_isClosed :\n    IsIrreducible s ↔\n      ∀ t : Finset (Set X), (∀ z ∈ t, IsClosed z) → (s ⊆ ⋃₀ ↑t) → ∃ z ∈ t, s ⊆ z := by\n  simp only [isIrreducible_iff_sInter]\n  refine ((@compl_involutive (Set X) _).toPerm _).finsetCongr.forall_congr fun {t} => ?_\n  simp_rw [Equiv.finsetCongr_apply, Finset.forall_mem_map, Finset.mem_map, Finset.coe_map,\n    sUnion_image, Equiv.coe_toEmbedding, Function.Involutive.coe_toPerm, isClosed_compl_iff,\n    exists_exists_and_eq_and]\n  refine forall_congr' fun _ => Iff.trans ?_ not_imp_not\n  simp only [not_exists, not_and, ← compl_iInter₂, ← sInter_eq_biInter,\n    subset_compl_iff_disjoint_right, not_disjoint_iff_nonempty_inter]\n\n"}
{"name":"isIrreducible_iff_sUnion_closed","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\n⊢ Iff (IsIrreducible s) (∀ (t : Finset (Set X)), (∀ (z : Set X), Membership.mem t z → IsClosed z) → HasSubset.Subset s (↑t).sUnion → Exists fun z => And (Membership.mem t z) (HasSubset.Subset s z))","decl":"@[deprecated (since := \"2024-11-19\")] alias\nisIrreducible_iff_sUnion_closed := isIrreducible_iff_sUnion_isClosed\n\n"}
{"name":"subset_closure_inter_of_isPreirreducible_of_isOpen","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nS U : Set X\nhS : IsPreirreducible S\nhU : IsOpen U\nh : (Inter.inter S U).Nonempty\n⊢ HasSubset.Subset S (closure (Inter.inter S U))","decl":"/-- A nonempty open subset of a preirreducible subspace is dense in the subspace. -/\ntheorem subset_closure_inter_of_isPreirreducible_of_isOpen {S U : Set X} (hS : IsPreirreducible S)\n    (hU : IsOpen U) (h : (S ∩ U).Nonempty) : S ⊆ closure (S ∩ U) := by\n  by_contra h'\n  obtain ⟨x, h₁, h₂, h₃⟩ :=\n    hS _ (closure (S ∩ U))ᶜ hU isClosed_closure.isOpen_compl h (inter_compl_nonempty_iff.mpr h')\n  exact h₃ (subset_closure ⟨h₁, h₂⟩)\n\n"}
{"name":"IsPreirreducible.subset_irreducible","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nt S U : Set X\nht : IsPreirreducible t\nhU : U.Nonempty\nhU' : IsOpen U\nh₁ : HasSubset.Subset U S\nh₂ : HasSubset.Subset S t\n⊢ IsIrreducible S","decl":"/-- If `∅ ≠ U ⊆ S ⊆ t` such that `U` is open and `t` is preirreducible, then `S` is irreducible. -/\ntheorem IsPreirreducible.subset_irreducible {S U : Set X} (ht : IsPreirreducible t)\n    (hU : U.Nonempty) (hU' : IsOpen U) (h₁ : U ⊆ S) (h₂ : S ⊆ t) : IsIrreducible S := by\n  obtain ⟨z, hz⟩ := hU\n  replace ht : IsIrreducible t := ⟨⟨z, h₂ (h₁ hz)⟩, ht⟩\n  refine ⟨⟨z, h₁ hz⟩, ?_⟩\n  rintro u v hu hv ⟨x, hx, hx'⟩ ⟨y, hy, hy'⟩\n  classical\n  obtain ⟨x, -, hx'⟩ : Set.Nonempty (t ∩ ⋂₀ ↑({U, u, v} : Finset (Set X))) := by\n    refine isIrreducible_iff_sInter.mp ht {U, u, v} ?_ ?_\n    · simp [*]\n    · intro U H\n      simp only [Finset.mem_insert, Finset.mem_singleton] at H\n      rcases H with (rfl | rfl | rfl)\n      exacts [⟨z, h₂ (h₁ hz), hz⟩, ⟨x, h₂ hx, hx'⟩, ⟨y, h₂ hy, hy'⟩]\n  replace hx' : x ∈ U ∧ x ∈ u ∧ x ∈ v := by simpa using hx'\n  exact ⟨x, h₁ hx'.1, hx'.2⟩\n\n"}
{"name":"IsPreirreducible.open_subset","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nt U : Set X\nht : IsPreirreducible t\nhU : IsOpen U\nhU' : HasSubset.Subset U t\n⊢ IsPreirreducible U","decl":"theorem IsPreirreducible.open_subset {U : Set X} (ht : IsPreirreducible t) (hU : IsOpen U)\n    (hU' : U ⊆ t) : IsPreirreducible U :=\n  U.eq_empty_or_nonempty.elim (fun h => h.symm ▸ isPreirreducible_empty) fun h =>\n    (ht.subset_irreducible h hU (fun _ => id) hU').2\n\n"}
{"name":"IsPreirreducible.interior","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nt : Set X\nht : IsPreirreducible t\n⊢ IsPreirreducible (interior t)","decl":"theorem IsPreirreducible.interior (ht : IsPreirreducible t) : IsPreirreducible (interior t) :=\n  ht.open_subset isOpen_interior interior_subset\n\n"}
{"name":"IsPreirreducible.preimage","module":"Mathlib.Topology.Irreducible","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nt : Set X\nht : IsPreirreducible t\nf : Y → X\nhf : Topology.IsOpenEmbedding f\n⊢ IsPreirreducible (Set.preimage f t)","decl":"theorem IsPreirreducible.preimage (ht : IsPreirreducible t) {f : Y → X}\n    (hf : IsOpenEmbedding f) : IsPreirreducible (f ⁻¹' t) := by\n  rintro U V hU hV ⟨x, hx, hx'⟩ ⟨y, hy, hy'⟩\n  obtain ⟨_, h₁, ⟨y, h₂, rfl⟩, ⟨y', h₃, h₄⟩⟩ :=\n    ht _ _ (hf.isOpenMap _ hU) (hf.isOpenMap _ hV) ⟨f x, hx, Set.mem_image_of_mem f hx'⟩\n      ⟨f y, hy, Set.mem_image_of_mem f hy'⟩\n  cases hf.injective h₄\n  exact ⟨y, h₁, h₂, h₃⟩\n\n"}
