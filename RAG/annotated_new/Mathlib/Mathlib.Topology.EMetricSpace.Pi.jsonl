{"name":"edist_pi_def","module":"Mathlib.Topology.EMetricSpace.Pi","initialProofState":"β : Type v\nπ : β → Type u_2\ninst✝¹ : Fintype β\ninst✝ : (b : β) → EDist (π b)\nf g : (b : β) → π b\n⊢ Eq (EDist.edist f g) (Finset.univ.sup fun b => EDist.edist (f b) (g b))","decl":"theorem edist_pi_def [∀ b, EDist (π b)] (f g : ∀ b, π b) :\n    edist f g = Finset.sup univ fun b => edist (f b) (g b) :=\n  rfl\n\n"}
{"name":"edist_le_pi_edist","module":"Mathlib.Topology.EMetricSpace.Pi","initialProofState":"β : Type v\nπ : β → Type u_2\ninst✝¹ : Fintype β\ninst✝ : (b : β) → EDist (π b)\nf g : (b : β) → π b\nb : β\n⊢ LE.le (EDist.edist (f b) (g b)) (EDist.edist f g)","decl":"theorem edist_le_pi_edist [∀ b, EDist (π b)] (f g : ∀ b, π b) (b : β) :\n    edist (f b) (g b) ≤ edist f g :=\n  le_sup (f := fun b => edist (f b) (g b)) (Finset.mem_univ b)\n\n"}
{"name":"edist_pi_le_iff","module":"Mathlib.Topology.EMetricSpace.Pi","initialProofState":"β : Type v\nπ : β → Type u_2\ninst✝¹ : Fintype β\ninst✝ : (b : β) → EDist (π b)\nf g : (b : β) → π b\nd : ENNReal\n⊢ Iff (LE.le (EDist.edist f g) d) (∀ (b : β), LE.le (EDist.edist (f b) (g b)) d)","decl":"theorem edist_pi_le_iff [∀ b, EDist (π b)] {f g : ∀ b, π b} {d : ℝ≥0∞} :\n    edist f g ≤ d ↔ ∀ b, edist (f b) (g b) ≤ d :=\n  Finset.sup_le_iff.trans <| by simp only [Finset.mem_univ, forall_const]\n\n"}
{"name":"edist_pi_const_le","module":"Mathlib.Topology.EMetricSpace.Pi","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : PseudoEMetricSpace α\ninst✝ : Fintype β\na b : α\n⊢ LE.le (EDist.edist (fun x => a) fun x => b) (EDist.edist a b)","decl":"theorem edist_pi_const_le (a b : α) : (edist (fun _ : β => a) fun _ => b) ≤ edist a b :=\n  edist_pi_le_iff.2 fun _ => le_rfl\n\n"}
{"name":"edist_pi_const","module":"Mathlib.Topology.EMetricSpace.Pi","initialProofState":"α : Type u\nβ : Type v\ninst✝² : PseudoEMetricSpace α\ninst✝¹ : Fintype β\ninst✝ : Nonempty β\na b : α\n⊢ Eq (EDist.edist (fun x => a) fun x => b) (EDist.edist a b)","decl":"@[simp]\ntheorem edist_pi_const [Nonempty β] (a b : α) : (edist (fun _ : β => a) fun _ => b) = edist a b :=\n  Finset.sup_const univ_nonempty (edist a b)\n\n"}
