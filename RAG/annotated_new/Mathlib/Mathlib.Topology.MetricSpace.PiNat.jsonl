{"name":"PiNat.firstDiff_def","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_2\nx y : (n : Nat) → E n\n⊢ Eq (PiNat.firstDiff x y) (dite (Ne x y) (fun h => Nat.find ⋯) fun h => 0)","decl":"open Classical in\n/-- In a product space `Π n, E n`, then `firstDiff x y` is the first index at which `x` and `y`\ndiffer. If `x = y`, then by convention we set `firstDiff x x = 0`. -/\nirreducible_def firstDiff (x y : ∀ n, E n) : ℕ :=\n  if h : x ≠ y then Nat.find (ne_iff.1 h) else 0\n\n"}
{"name":"PiNat.apply_firstDiff_ne","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nh : Ne x y\n⊢ Ne (x (PiNat.firstDiff x y)) (y (PiNat.firstDiff x y))","decl":"theorem apply_firstDiff_ne {x y : ∀ n, E n} (h : x ≠ y) :\n    x (firstDiff x y) ≠ y (firstDiff x y) := by\n  rw [firstDiff_def, dif_pos h]\n  classical\n  exact Nat.find_spec (ne_iff.1 h)\n\n"}
{"name":"PiNat.apply_eq_of_lt_firstDiff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\nhn : LT.lt n (PiNat.firstDiff x y)\n⊢ Eq (x n) (y n)","decl":"theorem apply_eq_of_lt_firstDiff {x y : ∀ n, E n} {n : ℕ} (hn : n < firstDiff x y) : x n = y n := by\n  rw [firstDiff_def] at hn\n  split_ifs at hn with h\n  · convert Nat.find_min (ne_iff.1 h) hn\n    simp\n  · exact (not_lt_zero' hn).elim\n\n"}
{"name":"PiNat.firstDiff_comm","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\n⊢ Eq (PiNat.firstDiff x y) (PiNat.firstDiff y x)","decl":"theorem firstDiff_comm (x y : ∀ n, E n) : firstDiff x y = firstDiff y x := by\n  classical\n  simp only [firstDiff_def, ne_comm]\n\n"}
{"name":"PiNat.min_firstDiff_le","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y z : (n : Nat) → E n\nh : Ne x z\n⊢ LE.le (Min.min (PiNat.firstDiff x y) (PiNat.firstDiff y z)) (PiNat.firstDiff x z)","decl":"theorem min_firstDiff_le (x y z : ∀ n, E n) (h : x ≠ z) :\n    min (firstDiff x y) (firstDiff y z) ≤ firstDiff x z := by\n  by_contra! H\n  rw [lt_min_iff] at H\n  refine apply_firstDiff_ne h ?_\n  calc\n    x (firstDiff x z) = y (firstDiff x z) := apply_eq_of_lt_firstDiff H.1\n    _ = z (firstDiff x z) := apply_eq_of_lt_firstDiff H.2\n\n"}
{"name":"PiNat.cylinder_eq_pi","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\nn : Nat\n⊢ Eq (PiNat.cylinder x n) ((↑(Finset.range n)).pi fun i => Singleton.singleton (x i))","decl":"theorem cylinder_eq_pi (x : ∀ n, E n) (n : ℕ) :\n    cylinder x n = Set.pi (Finset.range n : Set ℕ) fun i : ℕ => {x i} := by\n  ext y\n  simp [cylinder]\n\n"}
{"name":"PiNat.cylinder_zero","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\n⊢ Eq (PiNat.cylinder x 0) Set.univ","decl":"@[simp]\ntheorem cylinder_zero (x : ∀ n, E n) : cylinder x 0 = univ := by simp [cylinder_eq_pi]\n\n"}
{"name":"PiNat.cylinder_anti","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\nm n : Nat\nh : LE.le m n\n⊢ HasSubset.Subset (PiNat.cylinder x n) (PiNat.cylinder x m)","decl":"theorem cylinder_anti (x : ∀ n, E n) {m n : ℕ} (h : m ≤ n) : cylinder x n ⊆ cylinder x m :=\n  fun _y hy i hi => hy i (hi.trans_le h)\n\n"}
{"name":"PiNat.mem_cylinder_iff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\n⊢ Iff (Membership.mem (PiNat.cylinder x n) y) (∀ (i : Nat), LT.lt i n → Eq (y i) (x i))","decl":"@[simp]\ntheorem mem_cylinder_iff {x y : ∀ n, E n} {n : ℕ} : y ∈ cylinder x n ↔ ∀ i < n, y i = x i :=\n  Iff.rfl\n\n"}
{"name":"PiNat.self_mem_cylinder","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\nn : Nat\n⊢ Membership.mem (PiNat.cylinder x n) x","decl":"theorem self_mem_cylinder (x : ∀ n, E n) (n : ℕ) : x ∈ cylinder x n := by simp\n\n"}
{"name":"PiNat.mem_cylinder_iff_eq","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\n⊢ Iff (Membership.mem (PiNat.cylinder x n) y) (Eq (PiNat.cylinder y n) (PiNat.cylinder x n))","decl":"theorem mem_cylinder_iff_eq {x y : ∀ n, E n} {n : ℕ} :\n    y ∈ cylinder x n ↔ cylinder y n = cylinder x n := by\n  constructor\n  · intro hy\n    apply Subset.antisymm\n    · intro z hz i hi\n      rw [← hy i hi]\n      exact hz i hi\n    · intro z hz i hi\n      rw [hy i hi]\n      exact hz i hi\n  · intro h\n    rw [← h]\n    exact self_mem_cylinder _ _\n\n"}
{"name":"PiNat.mem_cylinder_comm","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\n⊢ Iff (Membership.mem (PiNat.cylinder x n) y) (Membership.mem (PiNat.cylinder y n) x)","decl":"theorem mem_cylinder_comm (x y : ∀ n, E n) (n : ℕ) : y ∈ cylinder x n ↔ x ∈ cylinder y n := by\n  simp [mem_cylinder_iff_eq, eq_comm]\n\n"}
{"name":"PiNat.mem_cylinder_iff_le_firstDiff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nhne : Ne x y\ni : Nat\n⊢ Iff (Membership.mem (PiNat.cylinder y i) x) (LE.le i (PiNat.firstDiff x y))","decl":"theorem mem_cylinder_iff_le_firstDiff {x y : ∀ n, E n} (hne : x ≠ y) (i : ℕ) :\n    x ∈ cylinder y i ↔ i ≤ firstDiff x y := by\n  constructor\n  · intro h\n    by_contra!\n    exact apply_firstDiff_ne hne (h _ this)\n  · intro hi j hj\n    exact apply_eq_of_lt_firstDiff (hj.trans_le hi)\n\n"}
{"name":"PiNat.mem_cylinder_firstDiff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\n⊢ Membership.mem (PiNat.cylinder y (PiNat.firstDiff x y)) x","decl":"theorem mem_cylinder_firstDiff (x y : ∀ n, E n) : x ∈ cylinder y (firstDiff x y) := fun _i hi =>\n  apply_eq_of_lt_firstDiff hi\n\n"}
{"name":"PiNat.cylinder_eq_cylinder_of_le_firstDiff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\nhn : LE.le n (PiNat.firstDiff x y)\n⊢ Eq (PiNat.cylinder x n) (PiNat.cylinder y n)","decl":"theorem cylinder_eq_cylinder_of_le_firstDiff (x y : ∀ n, E n) {n : ℕ} (hn : n ≤ firstDiff x y) :\n    cylinder x n = cylinder y n := by\n  rw [← mem_cylinder_iff_eq]\n  intro i hi\n  exact apply_eq_of_lt_firstDiff (hi.trans_le hn)\n\n"}
{"name":"PiNat.iUnion_cylinder_update","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\nn : Nat\n⊢ Eq (Set.iUnion fun k => PiNat.cylinder (Function.update x n k) (HAdd.hAdd n 1)) (PiNat.cylinder x n)","decl":"theorem iUnion_cylinder_update (x : ∀ n, E n) (n : ℕ) :\n    ⋃ k, cylinder (update x n k) (n + 1) = cylinder x n := by\n  ext y\n  simp only [mem_cylinder_iff, mem_iUnion]\n  constructor\n  · rintro ⟨k, hk⟩ i hi\n    simpa [hi.ne] using hk i (Nat.lt_succ_of_lt hi)\n  · intro H\n    refine ⟨y n, fun i hi => ?_⟩\n    rcases Nat.lt_succ_iff_lt_or_eq.1 hi with (h'i | rfl)\n    · simp [H i h'i, h'i.ne]\n    · simp\n\n"}
{"name":"PiNat.update_mem_cylinder","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\nn : Nat\ny : E n\n⊢ Membership.mem (PiNat.cylinder x n) (Function.update x n y)","decl":"theorem update_mem_cylinder (x : ∀ n, E n) (n : ℕ) (y : E n) : update x n y ∈ cylinder x n :=\n  mem_cylinder_iff.2 fun i hi => by simp [hi.ne]\n\n"}
{"name":"PiNat.res_zero","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\nx : Nat → α\n⊢ Eq (PiNat.res x 0) List.nil","decl":"@[simp]\ntheorem res_zero (x : ℕ → α) : res x 0 = @nil α :=\n  rfl\n\n"}
{"name":"PiNat.res_succ","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\nx : Nat → α\nn : Nat\n⊢ Eq (PiNat.res x n.succ) (List.cons (x n) (PiNat.res x n))","decl":"@[simp]\ntheorem res_succ (x : ℕ → α) (n : ℕ) : res x n.succ = x n :: res x n :=\n  rfl\n\n"}
{"name":"PiNat.res_length","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\nx : Nat → α\nn : Nat\n⊢ Eq (PiNat.res x n).length n","decl":"@[simp]\ntheorem res_length (x : ℕ → α) (n : ℕ) : (res x n).length = n := by induction n <;> simp [*]\n\n"}
{"name":"PiNat.res_eq_res","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\nx y : Nat → α\nn : Nat\n⊢ Iff (Eq (PiNat.res x n) (PiNat.res y n)) (∀ ⦃m : Nat⦄, LT.lt m n → Eq (x m) (y m))","decl":"/-- The restrictions of `x` and `y` to `n` are equal if and only if `x m = y m` for all `m < n`. -/\ntheorem res_eq_res {x y : ℕ → α} {n : ℕ} :\n    res x n = res y n ↔ ∀ ⦃m⦄, m < n → x m = y m := by\n  constructor <;> intro h <;> induction' n with n ih; · simp\n  · intro m hm\n    rw [Nat.lt_succ_iff_lt_or_eq] at hm\n    simp only [res_succ, cons.injEq] at h\n    cases' hm with hm hm\n    · exact ih h.2 hm\n    rw [hm]\n    exact h.1\n  · simp\n  simp only [res_succ, cons.injEq]\n  refine ⟨h (Nat.lt_succ_self _), ih fun m hm => ?_⟩\n  exact h (hm.trans (Nat.lt_succ_self _))\n\n"}
{"name":"PiNat.res_injective","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\n⊢ Function.Injective PiNat.res","decl":"theorem res_injective : Injective (@res α) := by\n  intro x y h\n  ext n\n  apply res_eq_res.mp _ (Nat.lt_succ_self _)\n  rw [h]\n\n"}
{"name":"PiNat.cylinder_eq_res","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\nx : Nat → α\nn : Nat\n⊢ Eq (PiNat.cylinder x n) (setOf fun y => Eq (PiNat.res y n) (PiNat.res x n))","decl":"/-- `cylinder x n` is equal to the set of sequences `y` with the same restriction to `n` as `x`. -/\ntheorem cylinder_eq_res (x : ℕ → α) (n : ℕ) :\n    cylinder x n = { y | res y n = res x n } := by\n  ext y\n  dsimp [cylinder]\n  rw [res_eq_res]\n\n"}
{"name":"PiNat.dist_eq_of_ne","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nh : Ne x y\n⊢ Eq (Dist.dist x y) (HPow.hPow (1 / 2) (PiNat.firstDiff x y))","decl":"theorem dist_eq_of_ne {x y : ∀ n, E n} (h : x ≠ y) : dist x y = (1 / 2 : ℝ) ^ firstDiff x y := by\n  simp [dist, h]\n\n"}
{"name":"PiNat.dist_self","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx : (n : Nat) → E n\n⊢ Eq (Dist.dist x x) 0","decl":"protected theorem dist_self (x : ∀ n, E n) : dist x x = 0 := by simp [dist]\n\n"}
{"name":"PiNat.dist_comm","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\n⊢ Eq (Dist.dist x y) (Dist.dist y x)","decl":"protected theorem dist_comm (x y : ∀ n, E n) : dist x y = dist y x := by\n  classical\n  simp [dist, @eq_comm _ x y, firstDiff_comm]\n\n"}
{"name":"PiNat.dist_nonneg","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\n⊢ LE.le 0 (Dist.dist x y)","decl":"protected theorem dist_nonneg (x y : ∀ n, E n) : 0 ≤ dist x y := by\n  rcases eq_or_ne x y with (rfl | h)\n  · simp [dist]\n  · simp [dist, h, zero_le_two]\n\n"}
{"name":"PiNat.dist_triangle_nonarch","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y z : (n : Nat) → E n\n⊢ LE.le (Dist.dist x z) (Max.max (Dist.dist x y) (Dist.dist y z))","decl":"theorem dist_triangle_nonarch (x y z : ∀ n, E n) : dist x z ≤ max (dist x y) (dist y z) := by\n  rcases eq_or_ne x z with (rfl | hxz)\n  · simp [PiNat.dist_self x, PiNat.dist_nonneg]\n  rcases eq_or_ne x y with (rfl | hxy)\n  · simp\n  rcases eq_or_ne y z with (rfl | hyz)\n  · simp\n  simp only [dist_eq_of_ne, hxz, hxy, hyz, inv_le_inv₀, one_div, inv_pow, zero_lt_two, Ne,\n    not_false_iff, le_max_iff, pow_le_pow_iff_right₀, one_lt_two, pow_pos,\n    min_le_iff.1 (min_firstDiff_le x y z hxz)]\n\n"}
{"name":"PiNat.dist_triangle","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y z : (n : Nat) → E n\n⊢ LE.le (Dist.dist x z) (HAdd.hAdd (Dist.dist x y) (Dist.dist y z))","decl":"protected theorem dist_triangle (x y z : ∀ n, E n) : dist x z ≤ dist x y + dist y z :=\n  calc\n    dist x z ≤ max (dist x y) (dist y z) := dist_triangle_nonarch x y z\n    _ ≤ dist x y + dist y z := max_le_add_of_nonneg (PiNat.dist_nonneg _ _) (PiNat.dist_nonneg _ _)\n\n"}
{"name":"PiNat.eq_of_dist_eq_zero","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nhxy : Eq (Dist.dist x y) 0\n⊢ Eq x y","decl":"protected theorem eq_of_dist_eq_zero (x y : ∀ n, E n) (hxy : dist x y = 0) : x = y := by\n  rcases eq_or_ne x y with (rfl | h); · rfl\n  simp [dist_eq_of_ne h] at hxy\n\n"}
{"name":"PiNat.mem_cylinder_iff_dist_le","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\n⊢ Iff (Membership.mem (PiNat.cylinder x n) y) (LE.le (Dist.dist y x) (HPow.hPow (1 / 2) n))","decl":"theorem mem_cylinder_iff_dist_le {x y : ∀ n, E n} {n : ℕ} :\n    y ∈ cylinder x n ↔ dist y x ≤ (1 / 2) ^ n := by\n  rcases eq_or_ne y x with (rfl | hne)\n  · simp [PiNat.dist_self]\n  suffices (∀ i : ℕ, i < n → y i = x i) ↔ n ≤ firstDiff y x by simpa [dist_eq_of_ne hne]\n  constructor\n  · intro hy\n    by_contra! H\n    exact apply_firstDiff_ne hne (hy _ H)\n  · intro h i hi\n    exact apply_eq_of_lt_firstDiff (hi.trans_le h)\n\n"}
{"name":"PiNat.apply_eq_of_dist_lt","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nx y : (n : Nat) → E n\nn : Nat\nh : LT.lt (Dist.dist x y) (HPow.hPow (1 / 2) n)\ni : Nat\nhi : LE.le i n\n⊢ Eq (x i) (y i)","decl":"theorem apply_eq_of_dist_lt {x y : ∀ n, E n} {n : ℕ} (h : dist x y < (1 / 2) ^ n) {i : ℕ}\n    (hi : i ≤ n) : x i = y i := by\n  rcases eq_or_ne x y with (rfl | hne)\n  · rfl\n  have : n < firstDiff x y := by\n    simpa [dist_eq_of_ne hne, inv_lt_inv₀, pow_lt_pow_iff_right₀, one_lt_two] using h\n  exact apply_eq_of_lt_firstDiff (hi.trans_lt this)\n\n"}
{"name":"PiNat.lipschitz_with_one_iff_forall_dist_image_le_of_mem_cylinder","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\nα : Type u_2\ninst✝ : PseudoMetricSpace α\nf : ((n : Nat) → E n) → α\n⊢ Iff (∀ (x y : (n : Nat) → E n), LE.le (Dist.dist (f x) (f y)) (Dist.dist x y)) (∀ (x y : (n : Nat) → E n) (n : Nat), Membership.mem (PiNat.cylinder x n) y → LE.le (Dist.dist (f x) (f y)) (HPow.hPow (1 / 2) n))","decl":"/-- A function to a pseudo-metric-space is `1`-Lipschitz if and only if points in the same cylinder\nof length `n` are sent to points within distance `(1/2)^n`.\nNot expressed using `LipschitzWith` as we don't have a metric space structure -/\ntheorem lipschitz_with_one_iff_forall_dist_image_le_of_mem_cylinder {α : Type*}\n    [PseudoMetricSpace α] {f : (∀ n, E n) → α} :\n    (∀ x y : ∀ n, E n, dist (f x) (f y) ≤ dist x y) ↔\n      ∀ x y n, y ∈ cylinder x n → dist (f x) (f y) ≤ (1 / 2) ^ n := by\n  constructor\n  · intro H x y n hxy\n    apply (H x y).trans\n    rw [PiNat.dist_comm]\n    exact mem_cylinder_iff_dist_le.1 hxy\n  · intro H x y\n    rcases eq_or_ne x y with (rfl | hne)\n    · simp [PiNat.dist_nonneg]\n    rw [dist_eq_of_ne hne]\n    apply H x y (firstDiff x y)\n    rw [firstDiff_comm]\n    exact mem_cylinder_firstDiff _ _\n\n"}
{"name":"PiNat.isOpen_cylinder","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\nx : (n : Nat) → E n\nn : Nat\n⊢ IsOpen (PiNat.cylinder x n)","decl":"theorem isOpen_cylinder (x : ∀ n, E n) (n : ℕ) : IsOpen (cylinder x n) := by\n  rw [PiNat.cylinder_eq_pi]\n  exact isOpen_set_pi (Finset.range n).finite_toSet fun a _ => isOpen_discrete _\n\n"}
{"name":"PiNat.isTopologicalBasis_cylinders","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\n⊢ TopologicalSpace.IsTopologicalBasis (setOf fun s => Exists fun x => Exists fun n => Eq s (PiNat.cylinder x n))","decl":"theorem isTopologicalBasis_cylinders :\n    IsTopologicalBasis { s : Set (∀ n, E n) | ∃ (x : ∀ n, E n) (n : ℕ), s = cylinder x n } := by\n  apply isTopologicalBasis_of_isOpen_of_nhds\n  · rintro u ⟨x, n, rfl⟩\n    apply isOpen_cylinder\n  · intro x u hx u_open\n    obtain ⟨v, ⟨U, F, -, rfl⟩, xU, Uu⟩ :\n        ∃ v ∈ { S : Set (∀ i : ℕ, E i) | ∃ (U : ∀ i : ℕ, Set (E i)) (F : Finset ℕ),\n          (∀ i : ℕ, i ∈ F → U i ∈ { s : Set (E i) | IsOpen s }) ∧ S = (F : Set ℕ).pi U },\n        x ∈ v ∧ v ⊆ u :=\n      (isTopologicalBasis_pi fun n : ℕ => isTopologicalBasis_opens).exists_subset_of_mem_open hx\n        u_open\n    rcases Finset.bddAbove F with ⟨n, hn⟩\n    refine ⟨cylinder x (n + 1), ⟨x, n + 1, rfl⟩, self_mem_cylinder _ _, Subset.trans ?_ Uu⟩\n    intro y hy\n    suffices ∀ i : ℕ, i ∈ F → y i ∈ U i by simpa\n    intro i hi\n    have : y i = x i := mem_cylinder_iff.1 hy i ((hn hi).trans_lt (lt_add_one n))\n    rw [this]\n    simp only [Set.mem_pi, Finset.mem_coe] at xU\n    exact xU i hi\n\n"}
{"name":"PiNat.isOpen_iff_dist","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\n⊢ Iff (IsOpen s) (∀ (x : (n : Nat) → E n), Membership.mem s x → Exists fun ε => And (GT.gt ε 0) (∀ (y : (n : Nat) → E n), LT.lt (Dist.dist x y) ε → Membership.mem s y))","decl":"theorem isOpen_iff_dist (s : Set (∀ n, E n)) :\n    IsOpen s ↔ ∀ x ∈ s, ∃ ε > 0, ∀ y, dist x y < ε → y ∈ s := by\n  constructor\n  · intro hs x hx\n    obtain ⟨v, ⟨y, n, rfl⟩, h'x, h's⟩ :\n        ∃ v ∈ { s | ∃ (x : ∀ n : ℕ, E n) (n : ℕ), s = cylinder x n }, x ∈ v ∧ v ⊆ s :=\n      (isTopologicalBasis_cylinders E).exists_subset_of_mem_open hx hs\n    rw [← mem_cylinder_iff_eq.1 h'x] at h's\n    exact\n      ⟨(1 / 2 : ℝ) ^ n, by simp, fun y hy => h's fun i hi => (apply_eq_of_dist_lt hy hi.le).symm⟩\n  · intro h\n    refine (isTopologicalBasis_cylinders E).isOpen_iff.2 fun x hx => ?_\n    rcases h x hx with ⟨ε, εpos, hε⟩\n    obtain ⟨n, hn⟩ : ∃ n : ℕ, (1 / 2 : ℝ) ^ n < ε := exists_pow_lt_of_lt_one εpos one_half_lt_one\n    refine ⟨cylinder x n, ⟨x, n, rfl⟩, self_mem_cylinder x n, fun y hy => hε y ?_⟩\n    rw [PiNat.dist_comm]\n    exact (mem_cylinder_iff_dist_le.1 hy).trans_lt hn\n\n"}
{"name":"PiNat.completeSpace","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\n⊢ CompleteSpace ((n : Nat) → E n)","decl":"protected theorem completeSpace : CompleteSpace (∀ n, E n) := by\n  refine Metric.complete_of_convergent_controlled_sequences (fun n => (1 / 2) ^ n) (by simp) ?_\n  intro u hu\n  refine ⟨fun n => u n n, tendsto_pi_nhds.2 fun i => ?_⟩\n  refine tendsto_const_nhds.congr' ?_\n  filter_upwards [Filter.Ici_mem_atTop i] with n hn\n  exact apply_eq_of_dist_lt (hu i i n le_rfl hn) le_rfl\n\n"}
{"name":"PiNat.exists_disjoint_cylinder","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nx : (n : Nat) → E n\nhx : Not (Membership.mem s x)\n⊢ Exists fun n => Disjoint s (PiNat.cylinder x n)","decl":"theorem exists_disjoint_cylinder {s : Set (∀ n, E n)} (hs : IsClosed s) {x : ∀ n, E n}\n    (hx : x ∉ s) : ∃ n, Disjoint s (cylinder x n) := by\n  rcases eq_empty_or_nonempty s with (rfl | hne)\n  · exact ⟨0, by simp⟩\n  have A : 0 < infDist x s := (hs.not_mem_iff_infDist_pos hne).1 hx\n  obtain ⟨n, hn⟩ : ∃ n, (1 / 2 : ℝ) ^ n < infDist x s := exists_pow_lt_of_lt_one A one_half_lt_one\n  refine ⟨n, disjoint_left.2 fun y ys hy => ?_⟩\n  apply lt_irrefl (infDist x s)\n  calc\n    infDist x s ≤ dist x y := infDist_le_dist_of_mem ys\n    _ ≤ (1 / 2) ^ n := by\n      rw [mem_cylinder_comm] at hy\n      exact mem_cylinder_iff_dist_le.1 hy\n    _ < infDist x s := hn\n\n"}
{"name":"PiNat.firstDiff_lt_shortestPrefixDiff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nx y : (n : Nat) → E n\nhx : Not (Membership.mem s x)\nhy : Membership.mem s y\n⊢ LT.lt (PiNat.firstDiff x y) (PiNat.shortestPrefixDiff x s)","decl":"theorem firstDiff_lt_shortestPrefixDiff {s : Set (∀ n, E n)} (hs : IsClosed s) {x y : ∀ n, E n}\n    (hx : x ∉ s) (hy : y ∈ s) : firstDiff x y < shortestPrefixDiff x s := by\n  have A := exists_disjoint_cylinder hs hx\n  rw [shortestPrefixDiff, dif_pos A]\n  classical\n  have B := Nat.find_spec A\n  contrapose! B\n  rw [not_disjoint_iff_nonempty_inter]\n  refine ⟨y, hy, ?_⟩\n  rw [mem_cylinder_comm]\n  exact cylinder_anti y B (mem_cylinder_firstDiff x y)\n\n"}
{"name":"PiNat.shortestPrefixDiff_pos","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nhne : s.Nonempty\nx : (n : Nat) → E n\nhx : Not (Membership.mem s x)\n⊢ LT.lt 0 (PiNat.shortestPrefixDiff x s)","decl":"theorem shortestPrefixDiff_pos {s : Set (∀ n, E n)} (hs : IsClosed s) (hne : s.Nonempty)\n    {x : ∀ n, E n} (hx : x ∉ s) : 0 < shortestPrefixDiff x s := by\n  rcases hne with ⟨y, hy⟩\n  exact (zero_le _).trans_lt (firstDiff_lt_shortestPrefixDiff hs hx hy)\n\n"}
{"name":"PiNat.firstDiff_le_longestPrefix","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nx y : (n : Nat) → E n\nhx : Not (Membership.mem s x)\nhy : Membership.mem s y\n⊢ LE.le (PiNat.firstDiff x y) (PiNat.longestPrefix x s)","decl":"theorem firstDiff_le_longestPrefix {s : Set (∀ n, E n)} (hs : IsClosed s) {x y : ∀ n, E n}\n    (hx : x ∉ s) (hy : y ∈ s) : firstDiff x y ≤ longestPrefix x s := by\n  rw [longestPrefix, le_tsub_iff_right]\n  · exact firstDiff_lt_shortestPrefixDiff hs hx hy\n  · exact shortestPrefixDiff_pos hs ⟨y, hy⟩ hx\n\n"}
{"name":"PiNat.inter_cylinder_longestPrefix_nonempty","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nhne : s.Nonempty\nx : (n : Nat) → E n\n⊢ (Inter.inter s (PiNat.cylinder x (PiNat.longestPrefix x s))).Nonempty","decl":"theorem inter_cylinder_longestPrefix_nonempty {s : Set (∀ n, E n)} (hs : IsClosed s)\n    (hne : s.Nonempty) (x : ∀ n, E n) : (s ∩ cylinder x (longestPrefix x s)).Nonempty := by\n  by_cases hx : x ∈ s\n  · exact ⟨x, hx, self_mem_cylinder _ _⟩\n  have A := exists_disjoint_cylinder hs hx\n  have B : longestPrefix x s < shortestPrefixDiff x s :=\n    Nat.pred_lt (shortestPrefixDiff_pos hs hne hx).ne'\n  rw [longestPrefix, shortestPrefixDiff, dif_pos A] at B ⊢\n  classical\n  obtain ⟨y, ys, hy⟩ : ∃ y : ∀ n : ℕ, E n, y ∈ s ∧ x ∈ cylinder y (Nat.find A - 1) := by\n    simpa only [not_disjoint_iff, mem_cylinder_comm] using Nat.find_min A B\n  refine ⟨y, ys, ?_⟩\n  rw [mem_cylinder_iff_eq] at hy ⊢\n  rw [hy]\n\n"}
{"name":"PiNat.disjoint_cylinder_of_longestPrefix_lt","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nx : (n : Nat) → E n\nhx : Not (Membership.mem s x)\nn : Nat\nhn : LT.lt (PiNat.longestPrefix x s) n\n⊢ Disjoint s (PiNat.cylinder x n)","decl":"theorem disjoint_cylinder_of_longestPrefix_lt {s : Set (∀ n, E n)} (hs : IsClosed s) {x : ∀ n, E n}\n    (hx : x ∉ s) {n : ℕ} (hn : longestPrefix x s < n) : Disjoint s (cylinder x n) := by\n  contrapose! hn\n  rcases not_disjoint_iff_nonempty_inter.1 hn with ⟨y, ys, hy⟩\n  apply le_trans _ (firstDiff_le_longestPrefix hs hx ys)\n  apply (mem_cylinder_iff_le_firstDiff (ne_of_mem_of_not_mem ys hx).symm _).1\n  rwa [mem_cylinder_comm]\n\n"}
{"name":"PiNat.cylinder_longestPrefix_eq_of_longestPrefix_lt_firstDiff","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\nx y : (n : Nat) → E n\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nhne : s.Nonempty\nH : LT.lt (PiNat.longestPrefix x s) (PiNat.firstDiff x y)\nxs : Not (Membership.mem s x)\nys : Not (Membership.mem s y)\n⊢ Eq (PiNat.cylinder x (PiNat.longestPrefix x s)) (PiNat.cylinder y (PiNat.longestPrefix y s))","decl":"/-- If two points `x, y` coincide up to length `n`, and the longest common prefix of `x` with `s`\nis strictly shorter than `n`, then the longest common prefix of `y` with `s` is the same, and both\ncylinders of this length based at `x` and `y` coincide. -/\ntheorem cylinder_longestPrefix_eq_of_longestPrefix_lt_firstDiff {x y : ∀ n, E n}\n    {s : Set (∀ n, E n)} (hs : IsClosed s) (hne : s.Nonempty)\n    (H : longestPrefix x s < firstDiff x y) (xs : x ∉ s) (ys : y ∉ s) :\n    cylinder x (longestPrefix x s) = cylinder y (longestPrefix y s) := by\n  have l_eq : longestPrefix y s = longestPrefix x s := by\n    rcases lt_trichotomy (longestPrefix y s) (longestPrefix x s) with (L | L | L)\n    · have Ax : (s ∩ cylinder x (longestPrefix x s)).Nonempty :=\n        inter_cylinder_longestPrefix_nonempty hs hne x\n      have Z := disjoint_cylinder_of_longestPrefix_lt hs ys L\n      rw [firstDiff_comm] at H\n      rw [cylinder_eq_cylinder_of_le_firstDiff _ _ H.le] at Z\n      exact (Ax.not_disjoint Z).elim\n    · exact L\n    · have Ay : (s ∩ cylinder y (longestPrefix y s)).Nonempty :=\n        inter_cylinder_longestPrefix_nonempty hs hne y\n      have A'y : (s ∩ cylinder y (longestPrefix x s).succ).Nonempty :=\n        Ay.mono (inter_subset_inter_right s (cylinder_anti _ L))\n      have Z := disjoint_cylinder_of_longestPrefix_lt hs xs (Nat.lt_succ_self _)\n      rw [cylinder_eq_cylinder_of_le_firstDiff _ _ H] at Z\n      exact (A'y.not_disjoint Z).elim\n  rw [l_eq, ← mem_cylinder_iff_eq]\n  exact cylinder_anti y H.le (mem_cylinder_firstDiff x y)\n\n"}
{"name":"PiNat.exists_lipschitz_retraction_of_isClosed","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nhne : s.Nonempty\n⊢ Exists fun f => And (∀ (x : (n : Nat) → E n), Membership.mem s x → Eq (f x) x) (And (Eq (Set.range f) s) (LipschitzWith 1 f))","decl":"/-- Given a closed nonempty subset `s` of `Π (n : ℕ), E n`, there exists a Lipschitz retraction\nonto this set, i.e., a Lipschitz map with range equal to `s`, equal to the identity on `s`. -/\ntheorem exists_lipschitz_retraction_of_isClosed {s : Set (∀ n, E n)} (hs : IsClosed s)\n    (hne : s.Nonempty) :\n    ∃ f : (∀ n, E n) → ∀ n, E n, (∀ x ∈ s, f x = x) ∧ range f = s ∧ LipschitzWith 1 f := by\n  /- The map `f` is defined as follows. For `x ∈ s`, let `f x = x`. Otherwise, consider the longest\n    prefix `w` that `x` shares with an element of `s`, and let `f x = z_w` where `z_w` is an element\n    of `s` starting with `w`. All the desired properties are clear, except the fact that `f` is\n    `1`-Lipschitz: if two points `x, y` belong to a common cylinder of length `n`, one should show\n    that their images also belong to a common cylinder of length `n`. This is a case analysis:\n    * if both `x, y ∈ s`, then this is clear.\n    * if `x ∈ s` but `y ∉ s`, then the longest prefix `w` of `y` shared by an element of `s` is of\n    length at least `n` (because of `x`), and then `f y` starts with `w` and therefore stays in the\n    same length `n` cylinder.\n    * if `x ∉ s`, `y ∉ s`, let `w` be the longest prefix of `x` shared by an element of `s`. If its\n    length is `< n`, then it is also the longest prefix of `y`, and we get `f x = f y = z_w`.\n    Otherwise, `f x` remains in the same `n`-cylinder as `x`. Similarly for `y`. Finally, `f x` and\n    `f y` are again in the same `n`-cylinder, as desired. -/\n  classical\n  set f := fun x => if x ∈ s then x else (inter_cylinder_longestPrefix_nonempty hs hne x).some\n  have fs : ∀ x ∈ s, f x = x := fun x xs => by simp [f, xs]\n  refine ⟨f, fs, ?_, ?_⟩\n  -- check that the range of `f` is `s`.\n  · apply Subset.antisymm\n    · rintro x ⟨y, rfl⟩\n      by_cases hy : y ∈ s\n      · rwa [fs y hy]\n      simpa [f, if_neg hy] using (inter_cylinder_longestPrefix_nonempty hs hne y).choose_spec.1\n    · intro x hx\n      rw [← fs x hx]\n      exact mem_range_self _\n  -- check that `f` is `1`-Lipschitz, by a case analysis.\n  · refine LipschitzWith.mk_one fun x y => ?_\n    -- exclude the trivial cases where `x = y`, or `f x = f y`.\n    rcases eq_or_ne x y with (rfl | hxy)\n    · simp\n    rcases eq_or_ne (f x) (f y) with (h' | hfxfy)\n    · simp [h', dist_nonneg]\n    have I2 : cylinder x (firstDiff x y) = cylinder y (firstDiff x y) := by\n      rw [← mem_cylinder_iff_eq]\n      apply mem_cylinder_firstDiff\n    suffices firstDiff x y ≤ firstDiff (f x) (f y) by\n      simpa [dist_eq_of_ne hxy, dist_eq_of_ne hfxfy]\n    -- case where `x ∈ s`\n    by_cases xs : x ∈ s\n    · rw [fs x xs] at hfxfy ⊢\n      -- case where `y ∈ s`, trivial\n      by_cases ys : y ∈ s\n      · rw [fs y ys]\n      -- case where `y ∉ s`\n      have A : (s ∩ cylinder y (longestPrefix y s)).Nonempty :=\n        inter_cylinder_longestPrefix_nonempty hs hne y\n      have fy : f y = A.some := by simp_rw [f, if_neg ys]\n      have I : cylinder A.some (firstDiff x y) = cylinder y (firstDiff x y) := by\n        rw [← mem_cylinder_iff_eq, firstDiff_comm]\n        apply cylinder_anti y _ A.some_mem.2\n        exact firstDiff_le_longestPrefix hs ys xs\n      rwa [← fy, ← I2, ← mem_cylinder_iff_eq, mem_cylinder_iff_le_firstDiff hfxfy.symm,\n        firstDiff_comm _ x] at I\n    -- case where `x ∉ s`\n    · by_cases ys : y ∈ s\n      -- case where `y ∈ s` (similar to the above)\n      · have A : (s ∩ cylinder x (longestPrefix x s)).Nonempty :=\n          inter_cylinder_longestPrefix_nonempty hs hne x\n        have fx : f x = A.some := by simp_rw [f, if_neg xs]\n        have I : cylinder A.some (firstDiff x y) = cylinder x (firstDiff x y) := by\n          rw [← mem_cylinder_iff_eq]\n          apply cylinder_anti x _ A.some_mem.2\n          apply firstDiff_le_longestPrefix hs xs ys\n        rw [fs y ys] at hfxfy ⊢\n        rwa [← fx, I2, ← mem_cylinder_iff_eq, mem_cylinder_iff_le_firstDiff hfxfy] at I\n      -- case where `y ∉ s`\n      · have Ax : (s ∩ cylinder x (longestPrefix x s)).Nonempty :=\n          inter_cylinder_longestPrefix_nonempty hs hne x\n        have fx : f x = Ax.some := by simp_rw [f, if_neg xs]\n        have Ay : (s ∩ cylinder y (longestPrefix y s)).Nonempty :=\n          inter_cylinder_longestPrefix_nonempty hs hne y\n        have fy : f y = Ay.some := by simp_rw [f, if_neg ys]\n        -- case where the common prefix to `x` and `s`, or `y` and `s`, is shorter than the\n        -- common part to `x` and `y` -- then `f x = f y`.\n        by_cases H : longestPrefix x s < firstDiff x y ∨ longestPrefix y s < firstDiff x y\n        · have : cylinder x (longestPrefix x s) = cylinder y (longestPrefix y s) := by\n            cases' H with H H\n            · exact cylinder_longestPrefix_eq_of_longestPrefix_lt_firstDiff hs hne H xs ys\n            · symm\n              rw [firstDiff_comm] at H\n              exact cylinder_longestPrefix_eq_of_longestPrefix_lt_firstDiff hs hne H ys xs\n          rw [fx, fy] at hfxfy\n          apply (hfxfy _).elim\n          congr\n        -- case where the common prefix to `x` and `s` is long, as well as the common prefix to\n        -- `y` and `s`. Then all points remain in the same cylinders.\n        · push_neg at H\n          have I1 : cylinder Ax.some (firstDiff x y) = cylinder x (firstDiff x y) := by\n            rw [← mem_cylinder_iff_eq]\n            exact cylinder_anti x H.1 Ax.some_mem.2\n          have I3 : cylinder y (firstDiff x y) = cylinder Ay.some (firstDiff x y) := by\n            rw [eq_comm, ← mem_cylinder_iff_eq]\n            exact cylinder_anti y H.2 Ay.some_mem.2\n          have : cylinder Ax.some (firstDiff x y) = cylinder Ay.some (firstDiff x y) := by\n            rw [I1, I2, I3]\n          rw [← fx, ← fy, ← mem_cylinder_iff_eq, mem_cylinder_iff_le_firstDiff hfxfy] at this\n          exact this\n\n"}
{"name":"PiNat.exists_retraction_of_isClosed","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nhne : s.Nonempty\n⊢ Exists fun f => And (∀ (x : (n : Nat) → E n), Membership.mem s x → Eq (f x) x) (And (Eq (Set.range f) s) (Continuous f))","decl":"/-- Given a closed nonempty subset `s` of `Π (n : ℕ), E n`, there exists a retraction onto this\nset, i.e., a continuous map with range equal to `s`, equal to the identity on `s`. -/\ntheorem exists_retraction_of_isClosed {s : Set (∀ n, E n)} (hs : IsClosed s) (hne : s.Nonempty) :\n    ∃ f : (∀ n, E n) → ∀ n, E n, (∀ x ∈ s, f x = x) ∧ range f = s ∧ Continuous f := by\n  rcases exists_lipschitz_retraction_of_isClosed hs hne with ⟨f, fs, frange, hf⟩\n  exact ⟨f, fs, frange, hf.continuous⟩\n\n"}
{"name":"PiNat.exists_retraction_subtype_of_isClosed","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"E : Nat → Type u_1\ninst✝¹ : (n : Nat) → TopologicalSpace (E n)\ninst✝ : ∀ (n : Nat), DiscreteTopology (E n)\ns : Set ((n : Nat) → E n)\nhs : IsClosed s\nhne : s.Nonempty\n⊢ Exists fun f => And (∀ (x : ↑s), Eq (f ↑x) x) (And (Function.Surjective f) (Continuous f))","decl":"theorem exists_retraction_subtype_of_isClosed {s : Set (∀ n, E n)} (hs : IsClosed s)\n    (hne : s.Nonempty) :\n    ∃ f : (∀ n, E n) → s, (∀ x : s, f x = x) ∧ Surjective f ∧ Continuous f := by\n  obtain ⟨f, fs, rfl, f_cont⟩ :\n    ∃ f : (∀ n, E n) → ∀ n, E n, (∀ x ∈ s, f x = x) ∧ range f = s ∧ Continuous f :=\n    exists_retraction_of_isClosed hs hne\n  have A : ∀ x : range f, rangeFactorization f x = x := fun x ↦ Subtype.eq <| fs x x.2\n  exact ⟨rangeFactorization f, A, fun x => ⟨x, A x⟩, f_cont.subtype_mk _⟩\n\n"}
{"name":"exists_nat_nat_continuous_surjective_of_completeSpace","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"α : Type u_2\ninst✝³ : MetricSpace α\ninst✝² : CompleteSpace α\ninst✝¹ : SecondCountableTopology α\ninst✝ : Nonempty α\n⊢ Exists fun f => And (Continuous f) (Function.Surjective f)","decl":"/-- Any nonempty complete second countable metric space is the continuous image of the\nfundamental space `ℕ → ℕ`. For a version of this theorem in the context of Polish spaces, see\n`exists_nat_nat_continuous_surjective_of_polishSpace`. -/\ntheorem exists_nat_nat_continuous_surjective_of_completeSpace (α : Type*) [MetricSpace α]\n    [CompleteSpace α] [SecondCountableTopology α] [Nonempty α] :\n    ∃ f : (ℕ → ℕ) → α, Continuous f ∧ Surjective f := by\n  /- First, we define a surjective map from a closed subset `s` of `ℕ → ℕ`. Then, we compose\n    this map with a retraction of `ℕ → ℕ` onto `s` to obtain the desired map.\n    Let us consider a dense sequence `u` in `α`. Then `s` is the set of sequences `xₙ` such that the\n    balls `closedBall (u xₙ) (1/2^n)` have a nonempty intersection. This set is closed,\n    and we define `f x` there to be the unique point in the intersection.\n    This function is continuous and surjective by design. -/\n  letI : MetricSpace (ℕ → ℕ) := PiNat.metricSpaceNatNat\n  have I0 : (0 : ℝ) < 1 / 2 := by norm_num\n  have I1 : (1 / 2 : ℝ) < 1 := by norm_num\n  rcases exists_dense_seq α with ⟨u, hu⟩\n  let s : Set (ℕ → ℕ) := { x | (⋂ n : ℕ, closedBall (u (x n)) ((1 / 2) ^ n)).Nonempty }\n  let g : s → α := fun x => x.2.some\n  have A : ∀ (x : s) (n : ℕ), dist (g x) (u ((x : ℕ → ℕ) n)) ≤ (1 / 2) ^ n := fun x n =>\n    (mem_iInter.1 x.2.some_mem n :)\n  have g_cont : Continuous g := by\n    refine continuous_iff_continuousAt.2 fun y => ?_\n    refine continuousAt_of_locally_lipschitz zero_lt_one 4 fun x hxy => ?_\n    rcases eq_or_ne x y with (rfl | hne)\n    · simp\n    have hne' : x.1 ≠ y.1 := Subtype.coe_injective.ne hne\n    have dist' : dist x y = dist x.1 y.1 := rfl\n    let n := firstDiff x.1 y.1 - 1\n    have diff_pos : 0 < firstDiff x.1 y.1 := by\n      by_contra! h\n      apply apply_firstDiff_ne hne'\n      rw [Nat.le_zero.1 h]\n      apply apply_eq_of_dist_lt _ le_rfl\n      rw [pow_zero]\n      exact hxy\n    have hn : firstDiff x.1 y.1 = n + 1 := (Nat.succ_pred_eq_of_pos diff_pos).symm\n    rw [dist', dist_eq_of_ne hne', hn]\n    have B : x.1 n = y.1 n := mem_cylinder_firstDiff x.1 y.1 n (Nat.pred_lt diff_pos.ne')\n    calc\n      dist (g x) (g y) ≤ dist (g x) (u (x.1 n)) + dist (g y) (u (x.1 n)) :=\n        dist_triangle_right _ _ _\n      _ = dist (g x) (u (x.1 n)) + dist (g y) (u (y.1 n)) := by rw [← B]\n      _ ≤ (1 / 2) ^ n + (1 / 2) ^ n := add_le_add (A x n) (A y n)\n      _ = 4 * (1 / 2) ^ (n + 1) := by ring\n  have g_surj : Surjective g := fun y ↦ by\n    have : ∀ n : ℕ, ∃ j, y ∈ closedBall (u j) ((1 / 2) ^ n) := fun n ↦ by\n      rcases hu.exists_dist_lt y (by simp : (0 : ℝ) < (1 / 2) ^ n) with ⟨j, hj⟩\n      exact ⟨j, hj.le⟩\n    choose x hx using this\n    have I : (⋂ n : ℕ, closedBall (u (x n)) ((1 / 2) ^ n)).Nonempty := ⟨y, mem_iInter.2 hx⟩\n    refine ⟨⟨x, I⟩, ?_⟩\n    refine dist_le_zero.1 ?_\n    have J : ∀ n : ℕ, dist (g ⟨x, I⟩) y ≤ (1 / 2) ^ n + (1 / 2) ^ n := fun n =>\n      calc\n        dist (g ⟨x, I⟩) y ≤ dist (g ⟨x, I⟩) (u (x n)) + dist y (u (x n)) :=\n          dist_triangle_right _ _ _\n        _ ≤ (1 / 2) ^ n + (1 / 2) ^ n := add_le_add (A ⟨x, I⟩ n) (hx n)\n    have L : Tendsto (fun n : ℕ => (1 / 2 : ℝ) ^ n + (1 / 2) ^ n) atTop (𝓝 (0 + 0)) :=\n      (tendsto_pow_atTop_nhds_zero_of_lt_one I0.le I1).add\n        (tendsto_pow_atTop_nhds_zero_of_lt_one I0.le I1)\n    rw [add_zero] at L\n    exact ge_of_tendsto' L J\n  have s_closed : IsClosed s := by\n    refine isClosed_iff_clusterPt.mpr fun x hx ↦ ?_\n    have L : Tendsto (fun n : ℕ => diam (closedBall (u (x n)) ((1 / 2) ^ n))) atTop (𝓝 0) := by\n      have : Tendsto (fun n : ℕ => (2 : ℝ) * (1 / 2) ^ n) atTop (𝓝 (2 * 0)) :=\n        (tendsto_pow_atTop_nhds_zero_of_lt_one I0.le I1).const_mul _\n      rw [mul_zero] at this\n      exact\n        squeeze_zero (fun n => diam_nonneg) (fun n => diam_closedBall (pow_nonneg I0.le _)) this\n    refine nonempty_iInter_of_nonempty_biInter (fun n => isClosed_ball)\n      (fun n => isBounded_closedBall) (fun N ↦ ?_) L\n    obtain ⟨y, hxy, ys⟩ : ∃ y, y ∈ ball x ((1 / 2) ^ N) ∩ s :=\n      clusterPt_principal_iff.1 hx _ (ball_mem_nhds x (pow_pos I0 N))\n    have E :\n      ⋂ (n : ℕ) (H : n ≤ N), closedBall (u (x n)) ((1 / 2) ^ n) =\n        ⋂ (n : ℕ) (H : n ≤ N), closedBall (u (y n)) ((1 / 2) ^ n) := by\n      refine iInter_congr fun n ↦ iInter_congr fun hn ↦ ?_\n      have : x n = y n := apply_eq_of_dist_lt (mem_ball'.1 hxy) hn\n      rw [this]\n    rw [E]\n    apply Nonempty.mono _ ys\n    apply iInter_subset_iInter₂\n  obtain ⟨f, -, f_surj, f_cont⟩ :\n    ∃ f : (ℕ → ℕ) → s, (∀ x : s, f x = x) ∧ Surjective f ∧ Continuous f := by\n    apply exists_retraction_subtype_of_isClosed s_closed\n    simpa only [nonempty_coe_sort] using g_surj.nonempty\n  exact ⟨g ∘ f, g_cont.comp f_cont, g_surj.comp f_surj⟩\n\n"}
{"name":"PiCountable.dist_eq_tsum","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"ι : Type u_2\ninst✝¹ : Encodable ι\nF : ι → Type u_3\ninst✝ : (i : ι) → MetricSpace (F i)\nx y : (i : ι) → F i\n⊢ Eq (Dist.dist x y) (tsum fun i => Min.min (HPow.hPow (1 / 2) (Encodable.encode i)) (Dist.dist (x i) (y i)))","decl":"theorem dist_eq_tsum (x y : ∀ i, F i) :\n    dist x y = ∑' i : ι, min ((1 / 2) ^ encode i : ℝ) (dist (x i) (y i)) :=\n  rfl\n\n"}
{"name":"PiCountable.dist_summable","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"ι : Type u_2\ninst✝¹ : Encodable ι\nF : ι → Type u_3\ninst✝ : (i : ι) → MetricSpace (F i)\nx y : (i : ι) → F i\n⊢ Summable fun i => Min.min (HPow.hPow (1 / 2) (Encodable.encode i)) (Dist.dist (x i) (y i))","decl":"theorem dist_summable (x y : ∀ i, F i) :\n    Summable fun i : ι => min ((1 / 2) ^ encode i : ℝ) (dist (x i) (y i)) := by\n  refine .of_nonneg_of_le (fun i => ?_) (fun i => min_le_left _ _)\n    summable_geometric_two_encode\n  exact le_min (pow_nonneg (by norm_num) _) dist_nonneg\n\n"}
{"name":"PiCountable.min_dist_le_dist_pi","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"ι : Type u_2\ninst✝¹ : Encodable ι\nF : ι → Type u_3\ninst✝ : (i : ι) → MetricSpace (F i)\nx y : (i : ι) → F i\ni : ι\n⊢ LE.le (Min.min (HPow.hPow (1 / 2) (Encodable.encode i)) (Dist.dist (x i) (y i))) (Dist.dist x y)","decl":"theorem min_dist_le_dist_pi (x y : ∀ i, F i) (i : ι) :\n    min ((1 / 2) ^ encode i : ℝ) (dist (x i) (y i)) ≤ dist x y :=\n  le_tsum (dist_summable x y) i fun j _ => le_min (by simp) dist_nonneg\n\n"}
{"name":"PiCountable.dist_le_dist_pi_of_dist_lt","module":"Mathlib.Topology.MetricSpace.PiNat","initialProofState":"ι : Type u_2\ninst✝¹ : Encodable ι\nF : ι → Type u_3\ninst✝ : (i : ι) → MetricSpace (F i)\nx y : (i : ι) → F i\ni : ι\nh : LT.lt (Dist.dist x y) (HPow.hPow (1 / 2) (Encodable.encode i))\n⊢ LE.le (Dist.dist (x i) (y i)) (Dist.dist x y)","decl":"theorem dist_le_dist_pi_of_dist_lt {x y : ∀ i, F i} {i : ι} (h : dist x y < (1 / 2) ^ encode i) :\n    dist (x i) (y i) ≤ dist x y := by\n  simpa only [not_le.2 h, false_or] using min_le_iff.1 (min_dist_le_dist_pi x y i)\n\n"}
