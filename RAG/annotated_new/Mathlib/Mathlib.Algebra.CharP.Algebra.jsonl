{"name":"charP_of_injective_ringHom","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : NonAssocSemiring R\ninst✝¹ : NonAssocSemiring A\nf : RingHom R A\nh : Function.Injective ⇑f\np : Nat\ninst✝ : CharP R p\n⊢ CharP A p","decl":"/-- If a ring homomorphism `R →+* A` is injective then `A` has the same characteristic as `R`. -/\ntheorem charP_of_injective_ringHom {R A : Type*} [NonAssocSemiring R] [NonAssocSemiring A]\n    {f : R →+* A} (h : Function.Injective f) (p : ℕ) [CharP R p] : CharP A p where\n  cast_eq_zero_iff' x := by\n    rw [← CharP.cast_eq_zero_iff R p x, ← map_natCast f x, map_eq_zero_iff f h]\n\n"}
{"name":"charP_of_injective_algebraMap","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\nh : Function.Injective ⇑(algebraMap R A)\np : Nat\ninst✝ : CharP R p\n⊢ CharP A p","decl":"/-- If the algebra map `R →+* A` is injective then `A` has the same characteristic as `R`. -/\ntheorem charP_of_injective_algebraMap {R A : Type*} [CommSemiring R] [Semiring A] [Algebra R A]\n    (h : Function.Injective (algebraMap R A)) (p : ℕ) [CharP R p] : CharP A p :=\n  charP_of_injective_ringHom h p\n\n"}
{"name":"charP_of_injective_algebraMap'","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁴ : Field R\ninst✝³ : Semiring A\ninst✝² : Algebra R A\ninst✝¹ : Nontrivial A\np : Nat\ninst✝ : CharP R p\n⊢ CharP A p","decl":"theorem charP_of_injective_algebraMap' (R A : Type*) [Field R] [Semiring A] [Algebra R A]\n    [Nontrivial A] (p : ℕ) [CharP R p] : CharP A p :=\n  charP_of_injective_algebraMap (algebraMap R A).injective p\n\n"}
{"name":"charZero_of_injective_ringHom","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : NonAssocSemiring R\ninst✝¹ : NonAssocSemiring A\nf : RingHom R A\nh : Function.Injective ⇑f\ninst✝ : CharZero R\n⊢ CharZero A","decl":"/-- If a ring homomorphism `R →+* A` is injective and `R` has characteristic zero\nthen so does `A`. -/\ntheorem charZero_of_injective_ringHom {R A : Type*} [NonAssocSemiring R] [NonAssocSemiring A]\n    {f : R →+* A} (h : Function.Injective f) [CharZero R] : CharZero A where\n  cast_injective _ _ _ := CharZero.cast_injective <| h <| by simpa only [map_natCast f]\n\n"}
{"name":"charZero_of_injective_algebraMap","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\nh : Function.Injective ⇑(algebraMap R A)\ninst✝ : CharZero R\n⊢ CharZero A","decl":"/-- If the algebra map `R →+* A` is injective and `R` has characteristic zero then so does `A`. -/\ntheorem charZero_of_injective_algebraMap {R A : Type*} [CommSemiring R] [Semiring A] [Algebra R A]\n    (h : Function.Injective (algebraMap R A)) [CharZero R] : CharZero A :=\n  charZero_of_injective_ringHom h\n\n"}
{"name":"RingHom.charP","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : NonAssocSemiring R\ninst✝¹ : NonAssocSemiring A\nf : RingHom R A\nH : Function.Injective ⇑f\np : Nat\ninst✝ : CharP A p\n⊢ CharP R p","decl":"/-- If `R →+* A` is injective, and `A` is of characteristic `p`, then `R` is also of\ncharacteristic `p`. Similar to `RingHom.charZero`. -/\ntheorem RingHom.charP {R A : Type*} [NonAssocSemiring R] [NonAssocSemiring A] (f : R →+* A)\n    (H : Function.Injective f) (p : ℕ) [CharP A p] : CharP R p := by\n  obtain ⟨q, h⟩ := CharP.exists R\n  exact CharP.eq _ (charP_of_injective_ringHom H q) ‹CharP A p› ▸ h\n\n"}
{"name":"RingHom.charP_iff","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝¹ : NonAssocSemiring R\ninst✝ : NonAssocSemiring A\nf : RingHom R A\nH : Function.Injective ⇑f\np : Nat\n⊢ Iff (CharP R p) (CharP A p)","decl":"/-- If `R →+* A` is injective, then `R` is of characteristic `p` if and only if `A` is also of\ncharacteristic `p`. Similar to `RingHom.charZero_iff`. -/\nprotected theorem RingHom.charP_iff {R A : Type*} [NonAssocSemiring R] [NonAssocSemiring A]\n    (f : R →+* A) (H : Function.Injective f) (p : ℕ) : CharP R p ↔ CharP A p :=\n  ⟨fun _ ↦ charP_of_injective_ringHom H p, fun _ ↦ f.charP H p⟩\n\n"}
{"name":"expChar_of_injective_ringHom","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝¹ : Semiring R\ninst✝ : Semiring A\nf : RingHom R A\nh : Function.Injective ⇑f\nq : Nat\nhR : ExpChar R q\n⊢ ExpChar A q","decl":"/-- If a ring homomorphism `R →+* A` is injective then `A` has the same exponential characteristic\nas `R`. -/\nlemma expChar_of_injective_ringHom {R A : Type*}\n    [Semiring R] [Semiring A] {f : R →+* A} (h : Function.Injective f)\n    (q : ℕ) [hR : ExpChar R q] : ExpChar A q := by\n  rcases hR with _ | hprime\n  · haveI := charZero_of_injective_ringHom h; exact .zero\n  haveI := charP_of_injective_ringHom h q; exact .prime hprime\n\n"}
{"name":"RingHom.expChar","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : Semiring R\ninst✝¹ : Semiring A\nf : RingHom R A\nH : Function.Injective ⇑f\np : Nat\ninst✝ : ExpChar A p\n⊢ ExpChar R p","decl":"/-- If `R →+* A` is injective, and `A` is of exponential characteristic `p`, then `R` is also of\nexponential characteristic `p`. Similar to `RingHom.charZero`. -/\nlemma RingHom.expChar {R A : Type*} [Semiring R] [Semiring A] (f : R →+* A)\n    (H : Function.Injective f) (p : ℕ) [ExpChar A p] : ExpChar R p := by\n  cases ‹ExpChar A p› with\n  | zero => haveI := f.charZero; exact .zero\n  | prime hp => haveI := f.charP H p; exact .prime hp\n\n"}
{"name":"RingHom.expChar_iff","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝¹ : Semiring R\ninst✝ : Semiring A\nf : RingHom R A\nH : Function.Injective ⇑f\np : Nat\n⊢ Iff (ExpChar R p) (ExpChar A p)","decl":"/-- If `R →+* A` is injective, then `R` is of exponential characteristic `p` if and only if `A` is\nalso of exponential characteristic `p`. Similar to `RingHom.charZero_iff`. -/\nlemma RingHom.expChar_iff {R A : Type*} [Semiring R] [Semiring A] (f : R →+* A)\n    (H : Function.Injective f) (p : ℕ) : ExpChar R p ↔ ExpChar A p :=\n  ⟨fun _ ↦ expChar_of_injective_ringHom H p, fun _ ↦ f.expChar H p⟩\n\n"}
{"name":"expChar_of_injective_algebraMap","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\nh : Function.Injective ⇑(algebraMap R A)\nq : Nat\ninst✝ : ExpChar R q\n⊢ ExpChar A q","decl":"/-- If the algebra map `R →+* A` is injective then `A` has the same exponential characteristic\nas `R`. -/\nlemma expChar_of_injective_algebraMap {R A : Type*} [CommSemiring R] [Semiring A] [Algebra R A]\n    (h : Function.Injective (algebraMap R A)) (q : ℕ) [ExpChar R q] : ExpChar A q :=\n  expChar_of_injective_ringHom h q\n\n"}
{"name":"algebraRat.charP_zero","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\ninst✝² : Nontrivial R\ninst✝¹ : Semiring R\ninst✝ : Algebra Rat R\n⊢ CharP R 0","decl":"/-- A nontrivial `ℚ`-algebra has `CharP` equal to zero.\n\nThis cannot be a (local) instance because it would immediately form a loop with the\ninstance `DivisionRing.toRatAlgebra`. It's probably easier to go the other way: prove `CharZero R`\nand automatically receive an `Algebra ℚ R` instance.\n-/\ntheorem algebraRat.charP_zero [Semiring R] [Algebra ℚ R] : CharP R 0 :=\n  charP_of_injective_algebraMap (algebraMap ℚ R).injective 0\n\n"}
{"name":"algebraRat.charZero","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\ninst✝² : Nontrivial R\ninst✝¹ : Ring R\ninst✝ : Algebra Rat R\n⊢ CharZero R","decl":"/-- A nontrivial `ℚ`-algebra has characteristic zero.\n\nThis cannot be a (local) instance because it would immediately form a loop with the\ninstance `DivisionRing.toRatAlgebra`. It's probably easier to go the other way: prove `CharZero R`\nand automatically receive an `Algebra ℚ R` instance.\n-/\ntheorem algebraRat.charZero [Ring R] [Algebra ℚ R] : CharZero R :=\n  @CharP.charP_to_charZero R _ (algebraRat.charP_zero R)\n\n"}
{"name":"RingHom.charP_iff_charP","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝² : DivisionRing K\ninst✝¹ : Semiring L\ninst✝ : Nontrivial L\nf : RingHom K L\np : Nat\n⊢ Iff (CharP K p) (CharP L p)","decl":"lemma RingHom.charP_iff_charP {K L : Type*} [DivisionRing K] [Semiring L] [Nontrivial L]\n    (f : K →+* L) (p : ℕ) : CharP K p ↔ CharP L p := by\n  simp only [charP_iff, ← f.injective.eq_iff, map_natCast f, map_zero f]\n\n"}
{"name":"Algebra.charP_iff","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : CommSemiring L\ninst✝¹ : Nontrivial L\ninst✝ : Algebra K L\np : Nat\n⊢ Iff (CharP K p) (CharP L p)","decl":"protected theorem Algebra.charP_iff (p : ℕ) : CharP K p ↔ CharP L p :=\n  (algebraMap K L).charP_iff_charP p\n\n"}
{"name":"Algebra.ringChar_eq","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"K : Type u_1\nL : Type u_2\ninst✝³ : Field K\ninst✝² : CommSemiring L\ninst✝¹ : Nontrivial L\ninst✝ : Algebra K L\n⊢ Eq (ringChar K) (ringChar L)","decl":"theorem Algebra.ringChar_eq : ringChar K = ringChar L := by\n  rw [ringChar.eq_iff, Algebra.charP_iff K L]\n  apply ringChar.charP\n\n"}
{"name":"FreeAlgebra.charP","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nX : Type u_2\ninst✝¹ : CommSemiring R\np : Nat\ninst✝ : CharP R p\n⊢ CharP (FreeAlgebra R X) p","decl":"/-- If `R` has characteristic `p`, then so does `FreeAlgebra R X`. -/\ninstance charP [CharP R p] : CharP (FreeAlgebra R X) p :=\n  charP_of_injective_algebraMap FreeAlgebra.algebraMap_leftInverse.injective p\n\n"}
{"name":"FreeAlgebra.charZero","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nX : Type u_2\ninst✝¹ : CommSemiring R\ninst✝ : CharZero R\n⊢ CharZero (FreeAlgebra R X)","decl":"/-- If `R` has characteristic `0`, then so does `FreeAlgebra R X`. -/\ninstance charZero [CharZero R] : CharZero (FreeAlgebra R X) :=\n  charZero_of_injective_algebraMap FreeAlgebra.algebraMap_leftInverse.injective\n\n"}
{"name":"IsFractionRing.charP_of_isFractionRing","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nK : Type u_2\ninst✝⁴ : CommRing R\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : IsFractionRing R K\np : Nat\ninst✝ : CharP R p\n⊢ CharP K p","decl":"/-- If `R` has characteristic `p`, then so does Frac(R). -/\ntheorem charP_of_isFractionRing [CharP R p] : CharP K p :=\n  charP_of_injective_algebraMap (IsFractionRing.injective R K) p\n\n"}
{"name":"IsFractionRing.charZero_of_isFractionRing","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\nK : Type u_2\ninst✝⁴ : CommRing R\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : IsFractionRing R K\ninst✝ : CharZero R\n⊢ CharZero K","decl":"/-- If `R` has characteristic `0`, then so does Frac(R). -/\ntheorem charZero_of_isFractionRing [CharZero R] : CharZero K :=\n  @CharP.charP_to_charZero K _ (charP_of_isFractionRing R 0)\n\n"}
{"name":"IsFractionRing.charP","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\ninst✝² : CommRing R\np : Nat\ninst✝¹ : IsDomain R\ninst✝ : CharP R p\n⊢ CharP (FractionRing R) p","decl":"/-- If `R` has characteristic `p`, then so does `FractionRing R`. -/\ninstance charP [CharP R p] : CharP (FractionRing R) p :=\n  charP_of_isFractionRing R p\n\n"}
{"name":"IsFractionRing.charZero","module":"Mathlib.Algebra.CharP.Algebra","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : CharZero R\n⊢ CharZero (FractionRing R)","decl":"/-- If `R` has characteristic `0`, then so does `FractionRing R`. -/\ninstance charZero [CharZero R] : CharZero (FractionRing R) :=\n  charZero_of_isFractionRing R\n\n"}
