{"name":"Subtype.ext_val_iff","module":"Mathlib.Algebra.Category.Grp.Images","initialProofState":"α : Sort u_1\np : α → Prop\na1 a2 : Subtype fun x => p x\n⊢ Iff (Eq a1 a2) (Eq ↑a1 ↑a2)","decl":"attribute [local ext] Subtype.ext_val\n\n"}
{"name":"AddCommGrp.instMonoι","module":"Mathlib.Algebra.Category.Grp.Images","initialProofState":"G H : AddCommGrp\nf : Quiver.Hom G H\n⊢ CategoryTheory.Mono (AddCommGrp.image.ι f)","decl":"instance : Mono (image.ι f) :=\n  ConcreteCategory.mono_of_injective (image.ι f) Subtype.val_injective\n\n"}
{"name":"AddCommGrp.image.fac","module":"Mathlib.Algebra.Category.Grp.Images","initialProofState":"G H : AddCommGrp\nf : Quiver.Hom G H\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AddCommGrp.factorThruImage f) (AddCommGrp.image.ι f)) f","decl":"theorem image.fac : factorThruImage f ≫ image.ι f = f := by\n  ext\n  rfl\n\n"}
{"name":"AddCommGrp.image.lift_fac","module":"Mathlib.Algebra.Category.Grp.Images","initialProofState":"G H : AddCommGrp\nf : Quiver.Hom G H\nF' : CategoryTheory.Limits.MonoFactorisation f\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AddCommGrp.image.lift F') F'.m) (AddCommGrp.image.ι f)","decl":"theorem image.lift_fac (F' : MonoFactorisation f) : image.lift F' ≫ F'.m = image.ι f := by\n  ext x\n  change (F'.e ≫ F'.m) _ = _\n  rw [F'.fac, (Classical.indefiniteDescription _ x.2).2]\n  rfl\n\n"}
