{"name":"Finset.even_sum_iff_even_card_odd","module":"Mathlib.Algebra.BigOperators.Ring.Nat","initialProofState":"ι : Type u_1\ns : Finset ι\nf : ι → Nat\n⊢ Iff (Even (s.sum fun i => f i)) (Even (Finset.filter (fun x => Odd (f x)) s).card)","decl":"lemma even_sum_iff_even_card_odd {s : Finset ι} (f : ι → ℕ) :\n    Even (∑ i ∈ s, f i) ↔ Even (s.filter fun x ↦ Odd (f x)).card := by\n  rw [← Finset.sum_filter_add_sum_filter_not _ (fun x ↦ Even (f x)), Nat.even_add]\n  simp only [Finset.mem_filter, and_imp, imp_self, implies_true, Finset.even_sum, true_iff]\n  rw [Nat.even_iff, Finset.sum_nat_mod, Finset.sum_filter]\n  simp +contextual only [Nat.not_even_iff_odd, Nat.odd_iff.mp]\n  simp_rw [← Finset.sum_filter, ← Nat.even_iff, Finset.card_eq_sum_ones]\n\n"}
{"name":"Finset.odd_sum_iff_odd_card_odd","module":"Mathlib.Algebra.BigOperators.Ring.Nat","initialProofState":"ι : Type u_1\ns : Finset ι\nf : ι → Nat\n⊢ Iff (Odd (s.sum fun i => f i)) (Odd (Finset.filter (fun x => Odd (f x)) s).card)","decl":"lemma odd_sum_iff_odd_card_odd {s : Finset ι} (f : ι → ℕ) :\n    Odd (∑ i ∈ s, f i) ↔ Odd (s.filter fun x ↦ Odd (f x)).card := by\n  simp only [← Nat.not_even_iff_odd, even_sum_iff_even_card_odd]\n\n"}
