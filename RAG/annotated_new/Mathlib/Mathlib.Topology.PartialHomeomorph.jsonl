{"name":"PartialHomeomorph.mk.inj","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ntoPartialEquiv✝ : PartialEquiv X Y\nopen_source✝ : IsOpen toPartialEquiv✝.source\nopen_target✝ : IsOpen toPartialEquiv✝.target\ncontinuousOn_toFun✝ : ContinuousOn (↑toPartialEquiv✝) toPartialEquiv✝.source\ncontinuousOn_invFun✝ : ContinuousOn toPartialEquiv✝.invFun toPartialEquiv✝.target\ntoPartialEquiv : PartialEquiv X Y\nopen_source : IsOpen toPartialEquiv.source\nopen_target : IsOpen toPartialEquiv.target\ncontinuousOn_toFun : ContinuousOn (↑toPartialEquiv) toPartialEquiv.source\ncontinuousOn_invFun : ContinuousOn toPartialEquiv.invFun toPartialEquiv.target\nx✝ : Eq { toPartialEquiv := toPartialEquiv✝, open_source := open_source✝, open_target := open_target✝, continuousOn_toFun := continuousOn_toFun✝, continuousOn_invFun := continuousOn_invFun✝ } { toPartialEquiv := toPartialEquiv, open_source := open_source, open_target := open_target, continuousOn_toFun := continuousOn_toFun, continuousOn_invFun := continuousOn_invFun }\n⊢ Eq toPartialEquiv✝ toPartialEquiv","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.mk.injEq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ntoPartialEquiv✝ : PartialEquiv X Y\nopen_source✝ : IsOpen toPartialEquiv✝.source\nopen_target✝ : IsOpen toPartialEquiv✝.target\ncontinuousOn_toFun✝ : ContinuousOn (↑toPartialEquiv✝) toPartialEquiv✝.source\ncontinuousOn_invFun✝ : ContinuousOn toPartialEquiv✝.invFun toPartialEquiv✝.target\ntoPartialEquiv : PartialEquiv X Y\nopen_source : IsOpen toPartialEquiv.source\nopen_target : IsOpen toPartialEquiv.target\ncontinuousOn_toFun : ContinuousOn (↑toPartialEquiv) toPartialEquiv.source\ncontinuousOn_invFun : ContinuousOn toPartialEquiv.invFun toPartialEquiv.target\n⊢ Eq (Eq { toPartialEquiv := toPartialEquiv✝, open_source := open_source✝, open_target := open_target✝, continuousOn_toFun := continuousOn_toFun✝, continuousOn_invFun := continuousOn_invFun✝ } { toPartialEquiv := toPartialEquiv, open_source := open_source, open_target := open_target, continuousOn_toFun := continuousOn_toFun, continuousOn_invFun := continuousOn_invFun }) (Eq toPartialEquiv✝ toPartialEquiv)","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.open_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : PartialHomeomorph X Y\n⊢ IsOpen self.source","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.continuousOn_toFun","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : PartialHomeomorph X Y\n⊢ ContinuousOn (↑self.toPartialEquiv) self.source","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.continuousOn_invFun","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : PartialHomeomorph X Y\n⊢ ContinuousOn self.invFun self.target","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.open_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : PartialHomeomorph X Y\n⊢ IsOpen self.target","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.mk.sizeOf_spec","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nY : Type u_8\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : SizeOf X\ninst✝ : SizeOf Y\ntoPartialEquiv : PartialEquiv X Y\nopen_source : IsOpen toPartialEquiv.source\nopen_target : IsOpen toPartialEquiv.target\ncontinuousOn_toFun : ContinuousOn (↑toPartialEquiv) toPartialEquiv.source\ncontinuousOn_invFun : ContinuousOn toPartialEquiv.invFun toPartialEquiv.target\n⊢ Eq (SizeOf.sizeOf { toPartialEquiv := toPartialEquiv, open_source := open_source, open_target := open_target, continuousOn_toFun := continuousOn_toFun, continuousOn_invFun := continuousOn_invFun }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toPartialEquiv)) (SizeOf.sizeOf open_source)) (SizeOf.sizeOf open_target))","decl":"/-- Partial homeomorphisms, defined on open subsets of the space -/\nstructure PartialHomeomorph (X : Type*) (Y : Type*) [TopologicalSpace X]\n  [TopologicalSpace Y] extends PartialEquiv X Y where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  continuousOn_toFun : ContinuousOn toFun source\n  continuousOn_invFun : ContinuousOn invFun target\n\n"}
{"name":"PartialHomeomorph.continuousOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ ContinuousOn (↑e) e.source","decl":"protected theorem continuousOn : ContinuousOn e e.source :=\n  e.continuousOn_toFun\n\n"}
{"name":"PartialHomeomorph.continuousOn_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ ContinuousOn (↑e.symm) e.target","decl":"theorem continuousOn_symm : ContinuousOn e.symm e.target :=\n  e.continuousOn_invFun\n\n"}
{"name":"PartialHomeomorph.mk_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialEquiv X Y\na : IsOpen e.source\nb : IsOpen e.target\nc : ContinuousOn (↑e) e.source\nd : ContinuousOn e.invFun e.target\n⊢ Eq ↑{ toPartialEquiv := e, open_source := a, open_target := b, continuousOn_toFun := c, continuousOn_invFun := d } ↑e","decl":"@[simp, mfld_simps]\ntheorem mk_coe (e : PartialEquiv X Y) (a b c d) : (PartialHomeomorph.mk e a b c d : X → Y) = e :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.mk_coe_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialEquiv X Y\na : IsOpen e.source\nb : IsOpen e.target\nc : ContinuousOn (↑e) e.source\nd : ContinuousOn e.invFun e.target\n⊢ Eq ↑{ toPartialEquiv := e, open_source := a, open_target := b, continuousOn_toFun := c, continuousOn_invFun := d }.symm ↑e.symm","decl":"@[simp, mfld_simps]\ntheorem mk_coe_symm (e : PartialEquiv X Y) (a b c d) :\n    ((PartialHomeomorph.mk e a b c d).symm : Y → X) = e.symm :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.toPartialEquiv_injective","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Function.Injective PartialHomeomorph.toPartialEquiv","decl":"theorem toPartialEquiv_injective :\n    Injective (toPartialEquiv : PartialHomeomorph X Y → PartialEquiv X Y)\n  | ⟨_, _, _, _, _⟩, ⟨_, _, _, _, _⟩, rfl => rfl\n\n/- Register a few simp lemmas to make sure that `simp` puts the application of a local\nhomeomorphism in its normal form, i.e., in terms of its coercion to a function. -/\n"}
{"name":"PartialHomeomorph.toFun_eq_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq ↑e.toPartialEquiv ↑e","decl":"@[simp, mfld_simps]\ntheorem toFun_eq_coe (e : PartialHomeomorph X Y) : e.toFun = e :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.invFun_eq_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq e.invFun ↑e.symm","decl":"@[simp, mfld_simps]\ntheorem invFun_eq_coe (e : PartialHomeomorph X Y) : e.invFun = e.symm :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.coe_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq ↑e.toPartialEquiv ↑e","decl":"@[simp, mfld_simps]\ntheorem coe_coe : (e.toPartialEquiv : X → Y) = e :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.coe_coe_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq ↑e.symm ↑e.symm","decl":"@[simp, mfld_simps]\ntheorem coe_coe_symm : (e.toPartialEquiv.symm : Y → X) = e.symm :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.map_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nh : Membership.mem e.source x\n⊢ Membership.mem e.target (↑e x)","decl":"@[simp, mfld_simps]\ntheorem map_source {x : X} (h : x ∈ e.source) : e x ∈ e.target :=\n  e.map_source' h\n\n"}
{"name":"PartialHomeomorph.map_source''","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ HasSubset.Subset (Set.image (↑e) e.source) e.target","decl":"/-- Variant of `map_source`, stated for images of subsets of `source`. -/\nlemma map_source'' : e '' e.source ⊆ e.target :=\n  fun _ ⟨_, hx, hex⟩ ↦ mem_of_eq_of_mem (id hex.symm) (e.map_source' hx)\n\n"}
{"name":"PartialHomeomorph.map_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : Y\nh : Membership.mem e.target x\n⊢ Membership.mem e.source (↑e.symm x)","decl":"@[simp, mfld_simps]\ntheorem map_target {x : Y} (h : x ∈ e.target) : e.symm x ∈ e.source :=\n  e.map_target' h\n\n"}
{"name":"PartialHomeomorph.left_inv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nh : Membership.mem e.source x\n⊢ Eq (↑e.symm (↑e x)) x","decl":"@[simp, mfld_simps]\ntheorem left_inv {x : X} (h : x ∈ e.source) : e.symm (e x) = x :=\n  e.left_inv' h\n\n"}
{"name":"PartialHomeomorph.right_inv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : Y\nh : Membership.mem e.target x\n⊢ Eq (↑e (↑e.symm x)) x","decl":"@[simp, mfld_simps]\ntheorem right_inv {x : Y} (h : x ∈ e.target) : e (e.symm x) = x :=\n  e.right_inv' h\n\n"}
{"name":"PartialHomeomorph.eq_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\ny : Y\nhx : Membership.mem e.source x\nhy : Membership.mem e.target y\n⊢ Iff (Eq x (↑e.symm y)) (Eq (↑e x) y)","decl":"theorem eq_symm_apply {x : X} {y : Y} (hx : x ∈ e.source) (hy : y ∈ e.target) :\n    x = e.symm y ↔ e x = y :=\n  e.toPartialEquiv.eq_symm_apply hx hy\n\n"}
{"name":"PartialHomeomorph.mapsTo","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.MapsTo (↑e) e.source e.target","decl":"protected theorem mapsTo : MapsTo e e.source e.target := fun _ => e.map_source\n\n"}
{"name":"PartialHomeomorph.symm_mapsTo","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.MapsTo (↑e.symm) e.target e.source","decl":"protected theorem symm_mapsTo : MapsTo e.symm e.target e.source :=\n  e.symm.mapsTo\n\n"}
{"name":"PartialHomeomorph.leftInvOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.LeftInvOn (↑e.symm) (↑e) e.source","decl":"protected theorem leftInvOn : LeftInvOn e.symm e e.source := fun _ => e.left_inv\n\n"}
{"name":"PartialHomeomorph.rightInvOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.RightInvOn (↑e.symm) (↑e) e.target","decl":"protected theorem rightInvOn : RightInvOn e.symm e e.target := fun _ => e.right_inv\n\n"}
{"name":"PartialHomeomorph.invOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.InvOn (↑e.symm) (↑e) e.source e.target","decl":"protected theorem invOn : InvOn e.symm e e.source e.target :=\n  ⟨e.leftInvOn, e.rightInvOn⟩\n\n"}
{"name":"PartialHomeomorph.injOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.InjOn (↑e) e.source","decl":"protected theorem injOn : InjOn e e.source :=\n  e.leftInvOn.injOn\n\n"}
{"name":"PartialHomeomorph.bijOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.BijOn (↑e) e.source e.target","decl":"protected theorem bijOn : BijOn e e.source e.target :=\n  e.invOn.bijOn e.mapsTo e.symm_mapsTo\n\n"}
{"name":"PartialHomeomorph.surjOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Set.SurjOn (↑e) e.source e.target","decl":"protected theorem surjOn : SurjOn e e.source e.target :=\n  e.bijOn.surjOn\n\n"}
{"name":"Homeomorph.toPartialHomeomorphOfImageEq_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\nhs : IsOpen s\nt : Set Y\nh : Eq (Set.image (⇑e) s) t\n⊢ Eq (e.toPartialHomeomorphOfImageEq s hs t h).target t","decl":"/-- Interpret a `Homeomorph` as a `PartialHomeomorph` by restricting it\nto an open set `s` in the domain and to `t` in the codomain. -/\n@[simps! (config := .asFn) apply symm_apply toPartialEquiv,\n  simps! (config := .lemmasOnly) source target]\ndef _root_.Homeomorph.toPartialHomeomorphOfImageEq (e : X ≃ₜ Y) (s : Set X) (hs : IsOpen s)\n    (t : Set Y) (h : e '' s = t) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquivOfImageEq s t h\n  open_source := hs\n  open_target := by simpa [← h]\n  continuousOn_toFun := e.continuous.continuousOn\n  continuousOn_invFun := e.symm.continuous.continuousOn\n\n"}
{"name":"Homeomorph.toPartialHomeomorphOfImageEq_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\nhs : IsOpen s\nt : Set Y\nh : Eq (Set.image (⇑e) s) t\n⊢ Eq ↑(e.toPartialHomeomorphOfImageEq s hs t h).symm ⇑e.symm","decl":"/-- Interpret a `Homeomorph` as a `PartialHomeomorph` by restricting it\nto an open set `s` in the domain and to `t` in the codomain. -/\n@[simps! (config := .asFn) apply symm_apply toPartialEquiv,\n  simps! (config := .lemmasOnly) source target]\ndef _root_.Homeomorph.toPartialHomeomorphOfImageEq (e : X ≃ₜ Y) (s : Set X) (hs : IsOpen s)\n    (t : Set Y) (h : e '' s = t) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquivOfImageEq s t h\n  open_source := hs\n  open_target := by simpa [← h]\n  continuousOn_toFun := e.continuous.continuousOn\n  continuousOn_invFun := e.symm.continuous.continuousOn\n\n"}
{"name":"Homeomorph.toPartialHomeomorphOfImageEq_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\nhs : IsOpen s\nt : Set Y\nh : Eq (Set.image (⇑e) s) t\n⊢ Eq (e.toPartialHomeomorphOfImageEq s hs t h).source s","decl":"/-- Interpret a `Homeomorph` as a `PartialHomeomorph` by restricting it\nto an open set `s` in the domain and to `t` in the codomain. -/\n@[simps! (config := .asFn) apply symm_apply toPartialEquiv,\n  simps! (config := .lemmasOnly) source target]\ndef _root_.Homeomorph.toPartialHomeomorphOfImageEq (e : X ≃ₜ Y) (s : Set X) (hs : IsOpen s)\n    (t : Set Y) (h : e '' s = t) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquivOfImageEq s t h\n  open_source := hs\n  open_target := by simpa [← h]\n  continuousOn_toFun := e.continuous.continuousOn\n  continuousOn_invFun := e.symm.continuous.continuousOn\n\n"}
{"name":"Homeomorph.toPartialHomeomorphOfImageEq_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\nhs : IsOpen s\nt : Set Y\nh : Eq (Set.image (⇑e) s) t\n⊢ Eq ↑(e.toPartialHomeomorphOfImageEq s hs t h) ⇑e","decl":"/-- Interpret a `Homeomorph` as a `PartialHomeomorph` by restricting it\nto an open set `s` in the domain and to `t` in the codomain. -/\n@[simps! (config := .asFn) apply symm_apply toPartialEquiv,\n  simps! (config := .lemmasOnly) source target]\ndef _root_.Homeomorph.toPartialHomeomorphOfImageEq (e : X ≃ₜ Y) (s : Set X) (hs : IsOpen s)\n    (t : Set Y) (h : e '' s = t) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquivOfImageEq s t h\n  open_source := hs\n  open_target := by simpa [← h]\n  continuousOn_toFun := e.continuous.continuousOn\n  continuousOn_invFun := e.symm.continuous.continuousOn\n\n"}
{"name":"Homeomorph.toPartialHomeomorphOfImageEq_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\ns : Set X\nhs : IsOpen s\nt : Set Y\nh : Eq (Set.image (⇑e) s) t\n⊢ Eq (e.toPartialHomeomorphOfImageEq s hs t h).toPartialEquiv (e.toPartialEquivOfImageEq s t h)","decl":"/-- Interpret a `Homeomorph` as a `PartialHomeomorph` by restricting it\nto an open set `s` in the domain and to `t` in the codomain. -/\n@[simps! (config := .asFn) apply symm_apply toPartialEquiv,\n  simps! (config := .lemmasOnly) source target]\ndef _root_.Homeomorph.toPartialHomeomorphOfImageEq (e : X ≃ₜ Y) (s : Set X) (hs : IsOpen s)\n    (t : Set Y) (h : e '' s = t) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquivOfImageEq s t h\n  open_source := hs\n  open_target := by simpa [← h]\n  continuousOn_toFun := e.continuous.continuousOn\n  continuousOn_invFun := e.symm.continuous.continuousOn\n\n"}
{"name":"Homeomorph.toPartialHomeomorph_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ Eq e.toPartialHomeomorph.source Set.univ","decl":"/-- A homeomorphism induces a partial homeomorphism on the whole space -/\n@[simps! (config := mfld_cfg)]\ndef _root_.Homeomorph.toPartialHomeomorph (e : X ≃ₜ Y) : PartialHomeomorph X Y :=\n  e.toPartialHomeomorphOfImageEq univ isOpen_univ univ <| by rw [image_univ, e.surjective.range_eq]\n\n"}
{"name":"Homeomorph.toPartialHomeomorph_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ Eq ↑e.toPartialHomeomorph.symm ⇑e.symm","decl":"/-- A homeomorphism induces a partial homeomorphism on the whole space -/\n@[simps! (config := mfld_cfg)]\ndef _root_.Homeomorph.toPartialHomeomorph (e : X ≃ₜ Y) : PartialHomeomorph X Y :=\n  e.toPartialHomeomorphOfImageEq univ isOpen_univ univ <| by rw [image_univ, e.surjective.range_eq]\n\n"}
{"name":"Homeomorph.toPartialHomeomorph_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ Eq ↑e.toPartialHomeomorph ⇑e","decl":"/-- A homeomorphism induces a partial homeomorphism on the whole space -/\n@[simps! (config := mfld_cfg)]\ndef _root_.Homeomorph.toPartialHomeomorph (e : X ≃ₜ Y) : PartialHomeomorph X Y :=\n  e.toPartialHomeomorphOfImageEq univ isOpen_univ univ <| by rw [image_univ, e.surjective.range_eq]\n\n"}
{"name":"Homeomorph.toPartialHomeomorph_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ Eq e.toPartialHomeomorph.target Set.univ","decl":"/-- A homeomorphism induces a partial homeomorphism on the whole space -/\n@[simps! (config := mfld_cfg)]\ndef _root_.Homeomorph.toPartialHomeomorph (e : X ≃ₜ Y) : PartialHomeomorph X Y :=\n  e.toPartialHomeomorphOfImageEq univ isOpen_univ univ <| by rw [image_univ, e.surjective.range_eq]\n\n"}
{"name":"PartialHomeomorph.replaceEquiv_eq_self","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ne' : PartialEquiv X Y\nh : Eq e.toPartialEquiv e'\n⊢ Eq (e.replaceEquiv e' h) e","decl":"theorem replaceEquiv_eq_self (e' : PartialEquiv X Y)\n    (h : e.toPartialEquiv = e') : e.replaceEquiv e' h = e := by\n  cases e\n  subst e'\n  rfl\n\n"}
{"name":"PartialHomeomorph.source_preimage_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ HasSubset.Subset e.source (Set.preimage (↑e) e.target)","decl":"theorem source_preimage_target : e.source ⊆ e ⁻¹' e.target :=\n  e.mapsTo\n\n"}
{"name":"PartialHomeomorph.eventually_left_inverse","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Filter.Eventually (fun y => Eq (↑e.symm (↑e y)) y) (nhds x)","decl":"theorem eventually_left_inverse {x} (hx : x ∈ e.source) :\n    ∀ᶠ y in 𝓝 x, e.symm (e y) = y :=\n  (e.open_source.eventually_mem hx).mono e.left_inv'\n\n"}
{"name":"PartialHomeomorph.eventually_left_inverse'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : Y\nhx : Membership.mem e.target x\n⊢ Filter.Eventually (fun y => Eq (↑e.symm (↑e y)) y) (nhds (↑e.symm x))","decl":"theorem eventually_left_inverse' {x} (hx : x ∈ e.target) :\n    ∀ᶠ y in 𝓝 (e.symm x), e.symm (e y) = y :=\n  e.eventually_left_inverse (e.map_target hx)\n\n"}
{"name":"PartialHomeomorph.eventually_right_inverse","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : Y\nhx : Membership.mem e.target x\n⊢ Filter.Eventually (fun y => Eq (↑e (↑e.symm y)) y) (nhds x)","decl":"theorem eventually_right_inverse {x} (hx : x ∈ e.target) :\n    ∀ᶠ y in 𝓝 x, e (e.symm y) = y :=\n  (e.open_target.eventually_mem hx).mono e.right_inv'\n\n"}
{"name":"PartialHomeomorph.eventually_right_inverse'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Filter.Eventually (fun y => Eq (↑e (↑e.symm y)) y) (nhds (↑e x))","decl":"theorem eventually_right_inverse' {x} (hx : x ∈ e.source) :\n    ∀ᶠ y in 𝓝 (e x), e (e.symm y) = y :=\n  e.eventually_right_inverse (e.map_source hx)\n\n"}
{"name":"PartialHomeomorph.eventually_ne_nhdsWithin","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Filter.Eventually (fun x' => Ne (↑e x') (↑e x)) (nhdsWithin x (HasCompl.compl (Singleton.singleton x)))","decl":"theorem eventually_ne_nhdsWithin {x} (hx : x ∈ e.source) :\n    ∀ᶠ x' in 𝓝[≠] x, e x' ≠ e x :=\n  eventually_nhdsWithin_iff.2 <|\n    (e.eventually_left_inverse hx).mono fun x' hx' =>\n      mt fun h => by rw [mem_singleton_iff, ← e.left_inv hx, ← h, hx']\n\n"}
{"name":"PartialHomeomorph.nhdsWithin_source_inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\ns : Set X\n⊢ Eq (nhdsWithin x (Inter.inter e.source s)) (nhdsWithin x s)","decl":"theorem nhdsWithin_source_inter {x} (hx : x ∈ e.source) (s : Set X) : 𝓝[e.source ∩ s] x = 𝓝[s] x :=\n  nhdsWithin_inter_of_mem (mem_nhdsWithin_of_mem_nhds <| IsOpen.mem_nhds e.open_source hx)\n\n"}
{"name":"PartialHomeomorph.nhdsWithin_target_inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : Y\nhx : Membership.mem e.target x\ns : Set Y\n⊢ Eq (nhdsWithin x (Inter.inter e.target s)) (nhdsWithin x s)","decl":"theorem nhdsWithin_target_inter {x} (hx : x ∈ e.target) (s : Set Y) : 𝓝[e.target ∩ s] x = 𝓝[s] x :=\n  e.symm.nhdsWithin_source_inter hx s\n\n"}
{"name":"PartialHomeomorph.image_eq_target_inter_inv_preimage","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nh : HasSubset.Subset s e.source\n⊢ Eq (Set.image (↑e) s) (Inter.inter e.target (Set.preimage (↑e.symm) s))","decl":"theorem image_eq_target_inter_inv_preimage {s : Set X} (h : s ⊆ e.source) :\n    e '' s = e.target ∩ e.symm ⁻¹' s :=\n  e.toPartialEquiv.image_eq_target_inter_inv_preimage h\n\n"}
{"name":"PartialHomeomorph.image_source_inter_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (Set.image (↑e) (Inter.inter e.source s)) (Inter.inter e.target (Set.preimage (↑e.symm) s))","decl":"theorem image_source_inter_eq' (s : Set X) : e '' (e.source ∩ s) = e.target ∩ e.symm ⁻¹' s :=\n  e.toPartialEquiv.image_source_inter_eq' s\n\n"}
{"name":"PartialHomeomorph.image_source_inter_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (Set.image (↑e) (Inter.inter e.source s)) (Inter.inter e.target (Set.preimage (↑e.symm) (Inter.inter e.source s)))","decl":"theorem image_source_inter_eq (s : Set X) :\n    e '' (e.source ∩ s) = e.target ∩ e.symm ⁻¹' (e.source ∩ s) :=\n  e.toPartialEquiv.image_source_inter_eq s\n\n"}
{"name":"PartialHomeomorph.symm_image_eq_source_inter_preimage","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\nh : HasSubset.Subset s e.target\n⊢ Eq (Set.image (↑e.symm) s) (Inter.inter e.source (Set.preimage (↑e) s))","decl":"theorem symm_image_eq_source_inter_preimage {s : Set Y} (h : s ⊆ e.target) :\n    e.symm '' s = e.source ∩ e ⁻¹' s :=\n  e.symm.image_eq_target_inter_inv_preimage h\n\n"}
{"name":"PartialHomeomorph.symm_image_target_inter_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\n⊢ Eq (Set.image (↑e.symm) (Inter.inter e.target s)) (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target s)))","decl":"theorem symm_image_target_inter_eq (s : Set Y) :\n    e.symm '' (e.target ∩ s) = e.source ∩ e ⁻¹' (e.target ∩ s) :=\n  e.symm.image_source_inter_eq _\n\n"}
{"name":"PartialHomeomorph.source_inter_preimage_inv_preimage","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (Set.preimage (↑e.symm) s))) (Inter.inter e.source s)","decl":"theorem source_inter_preimage_inv_preimage (s : Set X) :\n    e.source ∩ e ⁻¹' (e.symm ⁻¹' s) = e.source ∩ s :=\n  e.toPartialEquiv.source_inter_preimage_inv_preimage s\n\n"}
{"name":"PartialHomeomorph.target_inter_inv_preimage_preimage","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\n⊢ Eq (Inter.inter e.target (Set.preimage (↑e.symm) (Set.preimage (↑e) s))) (Inter.inter e.target s)","decl":"theorem target_inter_inv_preimage_preimage (s : Set Y) :\n    e.target ∩ e.symm ⁻¹' (e ⁻¹' s) = e.target ∩ s :=\n  e.symm.source_inter_preimage_inv_preimage _\n\n"}
{"name":"PartialHomeomorph.source_inter_preimage_target_inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target s))) (Inter.inter e.source (Set.preimage (↑e) s))","decl":"theorem source_inter_preimage_target_inter (s : Set Y) :\n    e.source ∩ e ⁻¹' (e.target ∩ s) = e.source ∩ e ⁻¹' s :=\n  e.toPartialEquiv.source_inter_preimage_target_inter s\n\n"}
{"name":"PartialHomeomorph.image_source_eq_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq (Set.image (↑e) e.source) e.target","decl":"theorem image_source_eq_target : e '' e.source = e.target :=\n  e.toPartialEquiv.image_source_eq_target\n\n"}
{"name":"PartialHomeomorph.symm_image_target_eq_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq (Set.image (↑e.symm) e.target) e.source","decl":"theorem symm_image_target_eq_source : e.symm '' e.target = e.source :=\n  e.symm.image_source_eq_target\n\n"}
{"name":"PartialHomeomorph.ext_iff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\n⊢ Iff (Eq e e') (And (∀ (x : X), Eq (↑e x) (↑e' x)) (And (∀ (x : Y), Eq (↑e.symm x) (↑e'.symm x)) (Eq e.source e'.source)))","decl":"/-- Two partial homeomorphisms are equal when they have equal `toFun`, `invFun` and `source`.\nIt is not sufficient to have equal `toFun` and `source`, as this only determines `invFun` on\nthe target. This would only be true for a weaker notion of equality, arguably the right one,\ncalled `EqOnSource`. -/\n@[ext]\nprotected theorem ext (e' : PartialHomeomorph X Y) (h : ∀ x, e x = e' x)\n    (hinv : ∀ x, e.symm x = e'.symm x) (hs : e.source = e'.source) : e = e' :=\n  toPartialEquiv_injective (PartialEquiv.ext h hinv hs)\n\n"}
{"name":"PartialHomeomorph.ext","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : ∀ (x : X), Eq (↑e x) (↑e' x)\nhinv : ∀ (x : Y), Eq (↑e.symm x) (↑e'.symm x)\nhs : Eq e.source e'.source\n⊢ Eq e e'","decl":"/-- Two partial homeomorphisms are equal when they have equal `toFun`, `invFun` and `source`.\nIt is not sufficient to have equal `toFun` and `source`, as this only determines `invFun` on\nthe target. This would only be true for a weaker notion of equality, arguably the right one,\ncalled `EqOnSource`. -/\n@[ext]\nprotected theorem ext (e' : PartialHomeomorph X Y) (h : ∀ x, e x = e' x)\n    (hinv : ∀ x, e.symm x = e'.symm x) (hs : e.source = e'.source) : e = e' :=\n  toPartialEquiv_injective (PartialEquiv.ext h hinv hs)\n\n"}
{"name":"PartialHomeomorph.symm_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq e.symm.toPartialEquiv e.symm","decl":"@[simp, mfld_simps]\ntheorem symm_toPartialEquiv : e.symm.toPartialEquiv = e.toPartialEquiv.symm :=\n  rfl\n\n-- The following lemmas are already simp via `PartialEquiv`\n"}
{"name":"PartialHomeomorph.symm_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq e.symm.source e.target","decl":"theorem symm_source : e.symm.source = e.target :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.symm_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq e.symm.target e.source","decl":"theorem symm_target : e.symm.target = e.source :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.symm_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq e.symm.symm e","decl":"@[simp, mfld_simps] theorem symm_symm : e.symm.symm = e := rfl\n\n"}
{"name":"PartialHomeomorph.symm_bijective","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Function.Bijective PartialHomeomorph.symm","decl":"theorem symm_bijective : Function.Bijective\n    (PartialHomeomorph.symm : PartialHomeomorph X Y → PartialHomeomorph Y X) :=\n  Function.bijective_iff_has_inverse.mpr ⟨_, symm_symm, symm_symm⟩\n\n"}
{"name":"PartialHomeomorph.continuousAt","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nh : Membership.mem e.source x\n⊢ ContinuousAt (↑e) x","decl":"/-- A partial homeomorphism is continuous at any point of its source -/\nprotected theorem continuousAt {x : X} (h : x ∈ e.source) : ContinuousAt e x :=\n  (e.continuousOn x h).continuousAt (e.open_source.mem_nhds h)\n\n"}
{"name":"PartialHomeomorph.continuousAt_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : Y\nh : Membership.mem e.target x\n⊢ ContinuousAt (↑e.symm) x","decl":"/-- A partial homeomorphism inverse is continuous at any point of its target -/\ntheorem continuousAt_symm {x : Y} (h : x ∈ e.target) : ContinuousAt e.symm x :=\n  e.symm.continuousAt h\n\n"}
{"name":"PartialHomeomorph.tendsto_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Filter.Tendsto (↑e.symm) (nhds (↑e x)) (nhds x)","decl":"theorem tendsto_symm {x} (hx : x ∈ e.source) : Tendsto e.symm (𝓝 (e x)) (𝓝 x) := by\n  simpa only [ContinuousAt, e.left_inv hx] using e.continuousAt_symm (e.map_source hx)\n\n"}
{"name":"PartialHomeomorph.map_nhds_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Eq (Filter.map (↑e) (nhds x)) (nhds (↑e x))","decl":"theorem map_nhds_eq {x} (hx : x ∈ e.source) : map e (𝓝 x) = 𝓝 (e x) :=\n  le_antisymm (e.continuousAt hx) <|\n    le_map_of_right_inverse (e.eventually_right_inverse' hx) (e.tendsto_symm hx)\n\n"}
{"name":"PartialHomeomorph.symm_map_nhds_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Eq (Filter.map (↑e.symm) (nhds (↑e x))) (nhds x)","decl":"theorem symm_map_nhds_eq {x} (hx : x ∈ e.source) : map e.symm (𝓝 (e x)) = 𝓝 x :=\n  (e.symm.map_nhds_eq <| e.map_source hx).trans <| by rw [e.left_inv hx]\n\n"}
{"name":"PartialHomeomorph.image_mem_nhds","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\ns : Set X\nhs : Membership.mem (nhds x) s\n⊢ Membership.mem (nhds (↑e x)) (Set.image (↑e) s)","decl":"theorem image_mem_nhds {x} (hx : x ∈ e.source) {s : Set X} (hs : s ∈ 𝓝 x) : e '' s ∈ 𝓝 (e x) :=\n  e.map_nhds_eq hx ▸ Filter.image_mem_map hs\n\n"}
{"name":"PartialHomeomorph.map_nhdsWithin_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\ns : Set X\n⊢ Eq (Filter.map (↑e) (nhdsWithin x s)) (nhdsWithin (↑e x) (Set.image (↑e) (Inter.inter e.source s)))","decl":"theorem map_nhdsWithin_eq {x} (hx : x ∈ e.source) (s : Set X) :\n    map e (𝓝[s] x) = 𝓝[e '' (e.source ∩ s)] e x :=\n  calc\n    map e (𝓝[s] x) = map e (𝓝[e.source ∩ s] x) :=\n      congr_arg (map e) (e.nhdsWithin_source_inter hx _).symm\n    _ = 𝓝[e '' (e.source ∩ s)] e x :=\n      (e.leftInvOn.mono inter_subset_left).map_nhdsWithin_eq (e.left_inv hx)\n        (e.continuousAt_symm (e.map_source hx)).continuousWithinAt\n        (e.continuousAt hx).continuousWithinAt\n\n"}
{"name":"PartialHomeomorph.map_nhdsWithin_preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\ns : Set Y\n⊢ Eq (Filter.map (↑e) (nhdsWithin x (Set.preimage (↑e) s))) (nhdsWithin (↑e x) s)","decl":"theorem map_nhdsWithin_preimage_eq {x} (hx : x ∈ e.source) (s : Set Y) :\n    map e (𝓝[e ⁻¹' s] x) = 𝓝[s] e x := by\n  rw [e.map_nhdsWithin_eq hx, e.image_source_inter_eq', e.target_inter_inv_preimage_preimage,\n    e.nhdsWithin_target_inter (e.map_source hx)]\n\n"}
{"name":"PartialHomeomorph.eventually_nhds","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\np : Y → Prop\nhx : Membership.mem e.source x\n⊢ Iff (Filter.Eventually (fun y => p y) (nhds (↑e x))) (Filter.Eventually (fun x => p (↑e x)) (nhds x))","decl":"theorem eventually_nhds {x : X} (p : Y → Prop) (hx : x ∈ e.source) :\n    (∀ᶠ y in 𝓝 (e x), p y) ↔ ∀ᶠ x in 𝓝 x, p (e x) :=\n  Iff.trans (by rw [e.map_nhds_eq hx]) eventually_map\n\n"}
{"name":"PartialHomeomorph.eventually_nhds'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\np : X → Prop\nhx : Membership.mem e.source x\n⊢ Iff (Filter.Eventually (fun y => p (↑e.symm y)) (nhds (↑e x))) (Filter.Eventually (fun x => p x) (nhds x))","decl":"theorem eventually_nhds' {x : X} (p : X → Prop) (hx : x ∈ e.source) :\n    (∀ᶠ y in 𝓝 (e x), p (e.symm y)) ↔ ∀ᶠ x in 𝓝 x, p x := by\n  rw [e.eventually_nhds _ hx]\n  refine eventually_congr ((e.eventually_left_inverse hx).mono fun y hy => ?_)\n  rw [hy]\n\n"}
{"name":"PartialHomeomorph.eventually_nhdsWithin","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\np : Y → Prop\ns : Set X\nhx : Membership.mem e.source x\n⊢ Iff (Filter.Eventually (fun y => p y) (nhdsWithin (↑e x) (Set.preimage (↑e.symm) s))) (Filter.Eventually (fun x => p (↑e x)) (nhdsWithin x s))","decl":"theorem eventually_nhdsWithin {x : X} (p : Y → Prop) {s : Set X}\n    (hx : x ∈ e.source) : (∀ᶠ y in 𝓝[e.symm ⁻¹' s] e x, p y) ↔ ∀ᶠ x in 𝓝[s] x, p (e x) := by\n  refine Iff.trans ?_ eventually_map\n  rw [e.map_nhdsWithin_eq hx, e.image_source_inter_eq', e.nhdsWithin_target_inter (e.mapsTo hx)]\n\n"}
{"name":"PartialHomeomorph.eventually_nhdsWithin'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\np : X → Prop\ns : Set X\nhx : Membership.mem e.source x\n⊢ Iff (Filter.Eventually (fun y => p (↑e.symm y)) (nhdsWithin (↑e x) (Set.preimage (↑e.symm) s))) (Filter.Eventually (fun x => p x) (nhdsWithin x s))","decl":"theorem eventually_nhdsWithin' {x : X} (p : X → Prop) {s : Set X}\n    (hx : x ∈ e.source) : (∀ᶠ y in 𝓝[e.symm ⁻¹' s] e x, p (e.symm y)) ↔ ∀ᶠ x in 𝓝[s] x, p x := by\n  rw [e.eventually_nhdsWithin _ hx]\n  refine eventually_congr <|\n    (eventually_nhdsWithin_of_eventually_nhds <| e.eventually_left_inverse hx).mono fun y hy => ?_\n  rw [hy]\n\n"}
{"name":"PartialHomeomorph.preimage_eventuallyEq_target_inter_preimage_inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Z\nx : X\nf : X → Z\nhf : ContinuousWithinAt f s x\nhxe : Membership.mem e.source x\nht : Membership.mem (nhds (f x)) t\n⊢ (nhds (↑e x)).EventuallyEq (Set.preimage (↑e.symm) s) (Inter.inter e.target (Set.preimage (↑e.symm) (Inter.inter s (Set.preimage f t))))","decl":"/-- This lemma is useful in the manifold library in the case that `e` is a chart. It states that\n  locally around `e x` the set `e.symm ⁻¹' s` is the same as the set intersected with the target\n  of `e` and some other neighborhood of `f x` (which will be the source of a chart on `Z`). -/\ntheorem preimage_eventuallyEq_target_inter_preimage_inter {e : PartialHomeomorph X Y} {s : Set X}\n    {t : Set Z} {x : X} {f : X → Z} (hf : ContinuousWithinAt f s x) (hxe : x ∈ e.source)\n    (ht : t ∈ 𝓝 (f x)) :\n    e.symm ⁻¹' s =ᶠ[𝓝 (e x)] (e.target ∩ e.symm ⁻¹' (s ∩ f ⁻¹' t) : Set Y) := by\n  rw [eventuallyEq_set, e.eventually_nhds _ hxe]\n  filter_upwards [e.open_source.mem_nhds hxe,\n    mem_nhdsWithin_iff_eventually.mp (hf.preimage_mem_nhdsWithin ht)]\n  intro y hy hyu\n  simp_rw [mem_inter_iff, mem_preimage, mem_inter_iff, e.mapsTo hy, true_and, iff_self_and,\n    e.left_inv hy, iff_true_intro hyu]\n\n"}
{"name":"PartialHomeomorph.isOpen_inter_preimage","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\nhs : IsOpen s\n⊢ IsOpen (Inter.inter e.source (Set.preimage (↑e) s))","decl":"theorem isOpen_inter_preimage {s : Set Y} (hs : IsOpen s) : IsOpen (e.source ∩ e ⁻¹' s) :=\n  e.continuousOn.isOpen_inter_preimage e.open_source hs\n\n"}
{"name":"PartialHomeomorph.isOpen_inter_preimage_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ IsOpen (Inter.inter e.target (Set.preimage (↑e.symm) s))","decl":"theorem isOpen_inter_preimage_symm {s : Set X} (hs : IsOpen s) : IsOpen (e.target ∩ e.symm ⁻¹' s) :=\n  e.symm.continuousOn.isOpen_inter_preimage e.open_target hs\n\n"}
{"name":"PartialHomeomorph.isOpen_image_of_subset_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\nhse : HasSubset.Subset s e.source\n⊢ IsOpen (Set.image (↑e) s)","decl":"/-- A partial homeomorphism is an open map on its source:\n  the image of an open subset of the source is open. -/\nlemma isOpen_image_of_subset_source {s : Set X} (hs : IsOpen s) (hse : s ⊆ e.source) :\n    IsOpen (e '' s) := by\n  rw [(image_eq_target_inter_inv_preimage (e := e) hse)]\n  exact e.continuousOn_invFun.isOpen_inter_preimage e.open_target hs\n\n"}
{"name":"PartialHomeomorph.isOpen_image_source_inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ IsOpen (Set.image (↑e) (Inter.inter e.source s))","decl":"/-- The image of the restriction of an open set to the source is open. -/\ntheorem isOpen_image_source_inter {s : Set X} (hs : IsOpen s) :\n    IsOpen (e '' (e.source ∩ s)) :=\n  e.isOpen_image_of_subset_source (e.open_source.inter hs) inter_subset_left\n\n"}
{"name":"PartialHomeomorph.isOpen_image_symm_of_subset_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nt : Set Y\nht : IsOpen t\nhte : HasSubset.Subset t e.target\n⊢ IsOpen (Set.image (↑e.symm) t)","decl":"/-- The inverse of a partial homeomorphism `e` is an open map on `e.target`. -/\nlemma isOpen_image_symm_of_subset_target {t : Set Y} (ht : IsOpen t) (hte : t ⊆ e.target) :\n    IsOpen (e.symm '' t) :=\n  isOpen_image_of_subset_source e.symm ht (e.symm_source ▸ hte)\n\n"}
{"name":"PartialHomeomorph.isOpen_symm_image_iff_of_subset_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nt : Set Y\nhs : HasSubset.Subset t e.target\n⊢ Iff (IsOpen (Set.image (↑e.symm) t)) (IsOpen t)","decl":"lemma isOpen_symm_image_iff_of_subset_target {t : Set Y} (hs : t ⊆ e.target) :\n    IsOpen (e.symm '' t) ↔ IsOpen t := by\n  refine ⟨fun h ↦ ?_, fun h ↦ e.symm.isOpen_image_of_subset_source h hs⟩\n  have hs' : e.symm '' t ⊆ e.source := by\n    rw [e.symm_image_eq_source_inter_preimage hs]\n    apply Set.inter_subset_left\n  rw [← e.image_symm_image_of_subset_target hs]\n  exact e.isOpen_image_of_subset_source h hs'\n\n"}
{"name":"PartialHomeomorph.isOpen_image_iff_of_subset_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : HasSubset.Subset s e.source\n⊢ Iff (IsOpen (Set.image (↑e) s)) (IsOpen s)","decl":"theorem isOpen_image_iff_of_subset_source {s : Set X} (hs : s ⊆ e.source) :\n    IsOpen (e '' s) ↔ IsOpen s := by\n  rw [← e.symm.isOpen_symm_image_iff_of_subset_target hs, e.symm_symm]\n\n"}
{"name":"PartialHomeomorph.IsImage.toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ e.IsImage s t","decl":"theorem toPartialEquiv (h : e.IsImage s t) : e.toPartialEquiv.IsImage s t :=\n  h\n\n"}
{"name":"PartialHomeomorph.IsImage.apply_mem_iff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nx : X\nh : e.IsImage s t\nhx : Membership.mem e.source x\n⊢ Iff (Membership.mem t (↑e x)) (Membership.mem s x)","decl":"theorem apply_mem_iff (h : e.IsImage s t) (hx : x ∈ e.source) : e x ∈ t ↔ x ∈ s :=\n  h hx\n\n"}
{"name":"PartialHomeomorph.IsImage.symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ e.symm.IsImage t s","decl":"protected theorem symm (h : e.IsImage s t) : e.symm.IsImage t s :=\n  h.toPartialEquiv.symm\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_apply_mem_iff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ny : Y\nh : e.IsImage s t\nhy : Membership.mem e.target y\n⊢ Iff (Membership.mem s (↑e.symm y)) (Membership.mem t y)","decl":"theorem symm_apply_mem_iff (h : e.IsImage s t) (hy : y ∈ e.target) : e.symm y ∈ s ↔ y ∈ t :=\n  h.symm hy\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_iff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\n⊢ Iff (e.symm.IsImage t s) (e.IsImage s t)","decl":"@[simp]\ntheorem symm_iff : e.symm.IsImage t s ↔ e.IsImage s t :=\n  ⟨fun h => h.symm, fun h => h.symm⟩\n\n"}
{"name":"PartialHomeomorph.IsImage.mapsTo","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ Set.MapsTo (↑e) (Inter.inter e.source s) (Inter.inter e.target t)","decl":"protected theorem mapsTo (h : e.IsImage s t) : MapsTo e (e.source ∩ s) (e.target ∩ t) :=\n  h.toPartialEquiv.mapsTo\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_mapsTo","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ Set.MapsTo (↑e.symm) (Inter.inter e.target t) (Inter.inter e.source s)","decl":"theorem symm_mapsTo (h : e.IsImage s t) : MapsTo e.symm (e.target ∩ t) (e.source ∩ s) :=\n  h.symm.mapsTo\n\n"}
{"name":"PartialHomeomorph.IsImage.image_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ Eq (Set.image (↑e) (Inter.inter e.source s)) (Inter.inter e.target t)","decl":"theorem image_eq (h : e.IsImage s t) : e '' (e.source ∩ s) = e.target ∩ t :=\n  h.toPartialEquiv.image_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_image_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ Eq (Set.image (↑e.symm) (Inter.inter e.target t)) (Inter.inter e.source s)","decl":"theorem symm_image_eq (h : e.IsImage s t) : e.symm '' (e.target ∩ t) = e.source ∩ s :=\n  h.symm.image_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.iff_preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\n⊢ Iff (e.IsImage s t) (Eq (Inter.inter e.source (Set.preimage (↑e) t)) (Inter.inter e.source s))","decl":"theorem iff_preimage_eq : e.IsImage s t ↔ e.source ∩ e ⁻¹' t = e.source ∩ s :=\n  PartialEquiv.IsImage.iff_preimage_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : e.IsImage s t\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) t)) (Inter.inter e.source s)","decl":"alias ⟨preimage_eq, of_preimage_eq⟩ := iff_preimage_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.of_preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : Eq (Inter.inter e.source (Set.preimage (↑e) t)) (Inter.inter e.source s)\n⊢ e.IsImage s t","decl":"alias ⟨preimage_eq, of_preimage_eq⟩ := iff_preimage_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.iff_symm_preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\n⊢ Iff (e.IsImage s t) (Eq (Inter.inter e.target (Set.preimage (↑e.symm) s)) (Inter.inter e.target t))","decl":"theorem iff_symm_preimage_eq : e.IsImage s t ↔ e.target ∩ e.symm ⁻¹' s = e.target ∩ t :=\n  symm_iff.symm.trans iff_preimage_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : e.IsImage s t\n⊢ Eq (Inter.inter e.target (Set.preimage (↑e.symm) s)) (Inter.inter e.target t)","decl":"alias ⟨symm_preimage_eq, of_symm_preimage_eq⟩ := iff_symm_preimage_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.of_symm_preimage_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : Eq (Inter.inter e.target (Set.preimage (↑e.symm) s)) (Inter.inter e.target t)\n⊢ e.IsImage s t","decl":"alias ⟨symm_preimage_eq, of_symm_preimage_eq⟩ := iff_symm_preimage_eq\n\n"}
{"name":"PartialHomeomorph.IsImage.iff_symm_preimage_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\n⊢ Iff (e.IsImage s t) (Eq (Inter.inter e.target (Set.preimage (↑e.symm) (Inter.inter e.source s))) (Inter.inter e.target t))","decl":"theorem iff_symm_preimage_eq' :\n    e.IsImage s t ↔ e.target ∩ e.symm ⁻¹' (e.source ∩ s) = e.target ∩ t := by\n  rw [iff_symm_preimage_eq, ← image_source_inter_eq, ← image_source_inter_eq']\n\n"}
{"name":"PartialHomeomorph.IsImage.of_symm_preimage_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : Eq (Inter.inter e.target (Set.preimage (↑e.symm) (Inter.inter e.source s))) (Inter.inter e.target t)\n⊢ e.IsImage s t","decl":"alias ⟨symm_preimage_eq', of_symm_preimage_eq'⟩ := iff_symm_preimage_eq'\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_preimage_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : e.IsImage s t\n⊢ Eq (Inter.inter e.target (Set.preimage (↑e.symm) (Inter.inter e.source s))) (Inter.inter e.target t)","decl":"alias ⟨symm_preimage_eq', of_symm_preimage_eq'⟩ := iff_symm_preimage_eq'\n\n"}
{"name":"PartialHomeomorph.IsImage.iff_preimage_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\n⊢ Iff (e.IsImage s t) (Eq (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target t))) (Inter.inter e.source s))","decl":"theorem iff_preimage_eq' : e.IsImage s t ↔ e.source ∩ e ⁻¹' (e.target ∩ t) = e.source ∩ s :=\n  symm_iff.symm.trans iff_symm_preimage_eq'\n\n"}
{"name":"PartialHomeomorph.IsImage.of_preimage_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : Eq (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target t))) (Inter.inter e.source s)\n⊢ e.IsImage s t","decl":"alias ⟨preimage_eq', of_preimage_eq'⟩ := iff_preimage_eq'\n\n"}
{"name":"PartialHomeomorph.IsImage.preimage_eq'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\na✝ : e.IsImage s t\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target t))) (Inter.inter e.source s)","decl":"alias ⟨preimage_eq', of_preimage_eq'⟩ := iff_preimage_eq'\n\n"}
{"name":"PartialHomeomorph.IsImage.of_image_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : Eq (Set.image (↑e) (Inter.inter e.source s)) (Inter.inter e.target t)\n⊢ e.IsImage s t","decl":"theorem of_image_eq (h : e '' (e.source ∩ s) = e.target ∩ t) : e.IsImage s t :=\n  PartialEquiv.IsImage.of_image_eq h\n\n"}
{"name":"PartialHomeomorph.IsImage.of_symm_image_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : Eq (Set.image (↑e.symm) (Inter.inter e.target t)) (Inter.inter e.source s)\n⊢ e.IsImage s t","decl":"theorem of_symm_image_eq (h : e.symm '' (e.target ∩ t) = e.source ∩ s) : e.IsImage s t :=\n  PartialEquiv.IsImage.of_symm_image_eq h\n\n"}
{"name":"PartialHomeomorph.IsImage.compl","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ e.IsImage (HasCompl.compl s) (HasCompl.compl t)","decl":"protected theorem compl (h : e.IsImage s t) : e.IsImage sᶜ tᶜ := fun _ hx => (h hx).not\n\n"}
{"name":"PartialHomeomorph.IsImage.inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ns' : Set X\nt' : Set Y\nh : e.IsImage s t\nh' : e.IsImage s' t'\n⊢ e.IsImage (Inter.inter s s') (Inter.inter t t')","decl":"protected theorem inter {s' t'} (h : e.IsImage s t) (h' : e.IsImage s' t') :\n    e.IsImage (s ∩ s') (t ∩ t') := fun _ hx => (h hx).and (h' hx)\n\n"}
{"name":"PartialHomeomorph.IsImage.union","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ns' : Set X\nt' : Set Y\nh : e.IsImage s t\nh' : e.IsImage s' t'\n⊢ e.IsImage (Union.union s s') (Union.union t t')","decl":"protected theorem union {s' t'} (h : e.IsImage s t) (h' : e.IsImage s' t') :\n    e.IsImage (s ∪ s') (t ∪ t') := fun _ hx => (h hx).or (h' hx)\n\n"}
{"name":"PartialHomeomorph.IsImage.diff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ns' : Set X\nt' : Set Y\nh : e.IsImage s t\nh' : e.IsImage s' t'\n⊢ e.IsImage (SDiff.sdiff s s') (SDiff.sdiff t t')","decl":"protected theorem diff {s' t'} (h : e.IsImage s t) (h' : e.IsImage s' t') :\n    e.IsImage (s \\ s') (t \\ t') :=\n  h.inter h'.compl\n\n"}
{"name":"PartialHomeomorph.IsImage.leftInvOn_piecewise","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ne' : PartialHomeomorph X Y\ninst✝¹ : (i : X) → Decidable (Membership.mem s i)\ninst✝ : (i : Y) → Decidable (Membership.mem t i)\nh : e.IsImage s t\nh' : e'.IsImage s t\n⊢ Set.LeftInvOn (t.piecewise ↑e.symm ↑e'.symm) (s.piecewise ↑e ↑e') (s.ite e.source e'.source)","decl":"theorem leftInvOn_piecewise {e' : PartialHomeomorph X Y} [∀ i, Decidable (i ∈ s)]\n    [∀ i, Decidable (i ∈ t)] (h : e.IsImage s t) (h' : e'.IsImage s t) :\n    LeftInvOn (t.piecewise e.symm e'.symm) (s.piecewise e e') (s.ite e.source e'.source) :=\n  h.toPartialEquiv.leftInvOn_piecewise h'\n\n"}
{"name":"PartialHomeomorph.IsImage.inter_eq_of_inter_eq_of_eqOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ne' : PartialHomeomorph X Y\nh : e.IsImage s t\nh' : e'.IsImage s t\nhs : Eq (Inter.inter e.source s) (Inter.inter e'.source s)\nHeq : Set.EqOn (↑e) (↑e') (Inter.inter e.source s)\n⊢ Eq (Inter.inter e.target t) (Inter.inter e'.target t)","decl":"theorem inter_eq_of_inter_eq_of_eqOn {e' : PartialHomeomorph X Y} (h : e.IsImage s t)\n    (h' : e'.IsImage s t) (hs : e.source ∩ s = e'.source ∩ s) (Heq : EqOn e e' (e.source ∩ s)) :\n    e.target ∩ t = e'.target ∩ t :=\n  h.toPartialEquiv.inter_eq_of_inter_eq_of_eqOn h' hs Heq\n\n"}
{"name":"PartialHomeomorph.IsImage.symm_eqOn_of_inter_eq_of_eqOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ne' : PartialHomeomorph X Y\nh : e.IsImage s t\nhs : Eq (Inter.inter e.source s) (Inter.inter e'.source s)\nHeq : Set.EqOn (↑e) (↑e') (Inter.inter e.source s)\n⊢ Set.EqOn (↑e.symm) (↑e'.symm) (Inter.inter e.target t)","decl":"theorem symm_eqOn_of_inter_eq_of_eqOn {e' : PartialHomeomorph X Y} (h : e.IsImage s t)\n    (hs : e.source ∩ s = e'.source ∩ s) (Heq : EqOn e e' (e.source ∩ s)) :\n    EqOn e.symm e'.symm (e.target ∩ t) :=\n  h.toPartialEquiv.symm_eq_on_of_inter_eq_of_eqOn hs Heq\n\n"}
{"name":"PartialHomeomorph.IsImage.map_nhdsWithin_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nx : X\nh : e.IsImage s t\nhx : Membership.mem e.source x\n⊢ Eq (Filter.map (↑e) (nhdsWithin x s)) (nhdsWithin (↑e x) t)","decl":"theorem map_nhdsWithin_eq (h : e.IsImage s t) (hx : x ∈ e.source) : map e (𝓝[s] x) = 𝓝[t] e x := by\n  rw [e.map_nhdsWithin_eq hx, h.image_eq, e.nhdsWithin_target_inter (e.map_source hx)]\n\n"}
{"name":"PartialHomeomorph.IsImage.closure","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ e.IsImage (closure s) (closure t)","decl":"protected theorem closure (h : e.IsImage s t) : e.IsImage (closure s) (closure t) := fun x hx => by\n  simp only [mem_closure_iff_nhdsWithin_neBot, ← h.map_nhdsWithin_eq hx, map_neBot_iff]\n\n"}
{"name":"PartialHomeomorph.IsImage.interior","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ e.IsImage (interior s) (interior t)","decl":"protected theorem interior (h : e.IsImage s t) : e.IsImage (interior s) (interior t) := by\n  simpa only [closure_compl, compl_compl] using h.compl.closure.compl\n\n"}
{"name":"PartialHomeomorph.IsImage.frontier","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ e.IsImage (frontier s) (frontier t)","decl":"protected theorem frontier (h : e.IsImage s t) : e.IsImage (frontier s) (frontier t) :=\n  h.closure.diff h.interior\n\n"}
{"name":"PartialHomeomorph.IsImage.isOpen_iff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\n⊢ Iff (IsOpen (Inter.inter e.source s)) (IsOpen (Inter.inter e.target t))","decl":"theorem isOpen_iff (h : e.IsImage s t) : IsOpen (e.source ∩ s) ↔ IsOpen (e.target ∩ t) :=\n  ⟨fun hs => h.symm_preimage_eq' ▸ e.symm.isOpen_inter_preimage hs, fun hs =>\n    h.preimage_eq' ▸ e.isOpen_inter_preimage hs⟩\n\n"}
{"name":"PartialHomeomorph.IsImage.restr_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nh : e.IsImage s t\nhs : IsOpen (Inter.inter e.source s)\n⊢ Eq (h.restr hs).toPartialEquiv ⋯.restr","decl":"/-- Restrict a `PartialHomeomorph` to a pair of corresponding open sets. -/\n@[simps toPartialEquiv]\ndef restr (h : e.IsImage s t) (hs : IsOpen (e.source ∩ s)) : PartialHomeomorph X Y where\n  toPartialEquiv := h.toPartialEquiv.restr\n  open_source := hs\n  open_target := h.isOpen_iff.1 hs\n  continuousOn_toFun := e.continuousOn.mono inter_subset_left\n  continuousOn_invFun := e.symm.continuousOn.mono inter_subset_left\n\n"}
{"name":"PartialHomeomorph.isImage_source_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ e.IsImage e.source e.target","decl":"theorem isImage_source_target : e.IsImage e.source e.target :=\n  e.toPartialEquiv.isImage_source_target\n\n"}
{"name":"PartialHomeomorph.isImage_source_target_of_disjoint","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nhs : Disjoint e.source e'.source\nht : Disjoint e.target e'.target\n⊢ e.IsImage e'.source e'.target","decl":"theorem isImage_source_target_of_disjoint (e' : PartialHomeomorph X Y)\n    (hs : Disjoint e.source e'.source) (ht : Disjoint e.target e'.target) :\n    e.IsImage e'.source e'.target :=\n  e.toPartialEquiv.isImage_source_target_of_disjoint e'.toPartialEquiv hs ht\n\n"}
{"name":"PartialHomeomorph.preimage_interior","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (interior s))) (Inter.inter e.source (interior (Set.preimage (↑e) s)))","decl":"/-- Preimage of interior or interior of preimage coincide for partial homeomorphisms,\nwhen restricted to the source. -/\ntheorem preimage_interior (s : Set Y) :\n    e.source ∩ e ⁻¹' interior s = e.source ∩ interior (e ⁻¹' s) :=\n  (IsImage.of_preimage_eq rfl).interior.preimage_eq\n\n"}
{"name":"PartialHomeomorph.preimage_closure","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (closure s))) (Inter.inter e.source (closure (Set.preimage (↑e) s)))","decl":"theorem preimage_closure (s : Set Y) : e.source ∩ e ⁻¹' closure s = e.source ∩ closure (e ⁻¹' s) :=\n  (IsImage.of_preimage_eq rfl).closure.preimage_eq\n\n"}
{"name":"PartialHomeomorph.preimage_frontier","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\n⊢ Eq (Inter.inter e.source (Set.preimage (↑e) (frontier s))) (Inter.inter e.source (frontier (Set.preimage (↑e) s)))","decl":"theorem preimage_frontier (s : Set Y) :\n    e.source ∩ e ⁻¹' frontier s = e.source ∩ frontier (e ⁻¹' s) :=\n  (IsImage.of_preimage_eq rfl).frontier.preimage_eq\n\n"}
{"name":"PartialHomeomorph.restrOpen_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ Eq (e.restrOpen s hs).toPartialEquiv (e.restr s)","decl":"@[simp, mfld_simps]\ntheorem restrOpen_toPartialEquiv (s : Set X) (hs : IsOpen s) :\n    (e.restrOpen s hs).toPartialEquiv = e.toPartialEquiv.restr s :=\n  rfl\n\n-- Already simp via `PartialEquiv`\n"}
{"name":"PartialHomeomorph.restrOpen_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ Eq (e.restrOpen s hs).source (Inter.inter e.source s)","decl":"theorem restrOpen_source (s : Set X) (hs : IsOpen s) : (e.restrOpen s hs).source = e.source ∩ s :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.restr_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (e.restr s).target (Inter.inter e.target (Set.preimage (↑e.symm) (interior s)))","decl":"/-- Restricting a partial homeomorphism `e` to `e.source ∩ interior s`. We use the interior to make\nsure that the restriction is well defined whatever the set s, since partial homeomorphisms are by\ndefinition defined on open sets. In applications where `s` is open, this coincides with the\nrestriction of partial equivalences -/\n@[simps! (config := mfld_cfg) apply symm_apply, simps! (config := .lemmasOnly) source target]\nprotected def restr (s : Set X) : PartialHomeomorph X Y :=\n  e.restrOpen (interior s) isOpen_interior\n\n"}
{"name":"PartialHomeomorph.restr_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq ↑(e.restr s).symm ↑e.symm","decl":"/-- Restricting a partial homeomorphism `e` to `e.source ∩ interior s`. We use the interior to make\nsure that the restriction is well defined whatever the set s, since partial homeomorphisms are by\ndefinition defined on open sets. In applications where `s` is open, this coincides with the\nrestriction of partial equivalences -/\n@[simps! (config := mfld_cfg) apply symm_apply, simps! (config := .lemmasOnly) source target]\nprotected def restr (s : Set X) : PartialHomeomorph X Y :=\n  e.restrOpen (interior s) isOpen_interior\n\n"}
{"name":"PartialHomeomorph.restr_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (e.restr s).source (Inter.inter e.source (interior s))","decl":"/-- Restricting a partial homeomorphism `e` to `e.source ∩ interior s`. We use the interior to make\nsure that the restriction is well defined whatever the set s, since partial homeomorphisms are by\ndefinition defined on open sets. In applications where `s` is open, this coincides with the\nrestriction of partial equivalences -/\n@[simps! (config := mfld_cfg) apply symm_apply, simps! (config := .lemmasOnly) source target]\nprotected def restr (s : Set X) : PartialHomeomorph X Y :=\n  e.restrOpen (interior s) isOpen_interior\n\n"}
{"name":"PartialHomeomorph.restr_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq ↑(e.restr s) ↑e","decl":"/-- Restricting a partial homeomorphism `e` to `e.source ∩ interior s`. We use the interior to make\nsure that the restriction is well defined whatever the set s, since partial homeomorphisms are by\ndefinition defined on open sets. In applications where `s` is open, this coincides with the\nrestriction of partial equivalences -/\n@[simps! (config := mfld_cfg) apply symm_apply, simps! (config := .lemmasOnly) source target]\nprotected def restr (s : Set X) : PartialHomeomorph X Y :=\n  e.restrOpen (interior s) isOpen_interior\n\n"}
{"name":"PartialHomeomorph.restr_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (e.restr s).toPartialEquiv (e.restr (interior s))","decl":"@[simp, mfld_simps]\ntheorem restr_toPartialEquiv (s : Set X) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr (interior s) :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.restr_source'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ Eq (e.restr s).source (Inter.inter e.source s)","decl":"theorem restr_source' (s : Set X) (hs : IsOpen s) : (e.restr s).source = e.source ∩ s := by\n  rw [e.restr_source, hs.interior_eq]\n\n"}
{"name":"PartialHomeomorph.restr_toPartialEquiv'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ Eq (e.restr s).toPartialEquiv (e.restr s)","decl":"theorem restr_toPartialEquiv' (s : Set X) (hs : IsOpen s) :\n    (e.restr s).toPartialEquiv = e.toPartialEquiv.restr s := by\n  rw [e.restr_toPartialEquiv, hs.interior_eq]\n\n"}
{"name":"PartialHomeomorph.restr_eq_of_source_subset","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nh : HasSubset.Subset e.source s\n⊢ Eq (e.restr s) e","decl":"theorem restr_eq_of_source_subset {e : PartialHomeomorph X Y} {s : Set X} (h : e.source ⊆ s) :\n    e.restr s = e :=\n  toPartialEquiv_injective <| PartialEquiv.restr_eq_of_source_subset <|\n    interior_maximal h e.open_source\n\n"}
{"name":"PartialHomeomorph.restr_univ","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq (e.restr Set.univ) e","decl":"@[simp, mfld_simps]\ntheorem restr_univ {e : PartialHomeomorph X Y} : e.restr univ = e :=\n  restr_eq_of_source_subset (subset_univ _)\n\n"}
{"name":"PartialHomeomorph.restr_source_inter","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\n⊢ Eq (e.restr (Inter.inter e.source s)) (e.restr s)","decl":"theorem restr_source_inter (s : Set X) : e.restr (e.source ∩ s) = e.restr s := by\n  refine PartialHomeomorph.ext _ _ (fun x => rfl) (fun x => rfl) ?_\n  simp [e.open_source.interior_eq, ← inter_assoc]\n\n"}
{"name":"PartialHomeomorph.refl_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\ninst✝ : TopologicalSpace X\n⊢ Eq (PartialHomeomorph.refl X).source Set.univ","decl":"/-- The identity on the whole space as a partial homeomorphism. -/\n@[simps! (config := mfld_cfg) apply, simps! (config := .lemmasOnly) source target]\nprotected def refl (X : Type*) [TopologicalSpace X] : PartialHomeomorph X X :=\n  (Homeomorph.refl X).toPartialHomeomorph\n\n"}
{"name":"PartialHomeomorph.refl_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\ninst✝ : TopologicalSpace X\n⊢ Eq (PartialHomeomorph.refl X).target Set.univ","decl":"/-- The identity on the whole space as a partial homeomorphism. -/\n@[simps! (config := mfld_cfg) apply, simps! (config := .lemmasOnly) source target]\nprotected def refl (X : Type*) [TopologicalSpace X] : PartialHomeomorph X X :=\n  (Homeomorph.refl X).toPartialHomeomorph\n\n"}
{"name":"PartialHomeomorph.refl_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\ninst✝ : TopologicalSpace X\n⊢ Eq (↑(PartialHomeomorph.refl X)) id","decl":"/-- The identity on the whole space as a partial homeomorphism. -/\n@[simps! (config := mfld_cfg) apply, simps! (config := .lemmasOnly) source target]\nprotected def refl (X : Type*) [TopologicalSpace X] : PartialHomeomorph X X :=\n  (Homeomorph.refl X).toPartialHomeomorph\n\n"}
{"name":"PartialHomeomorph.refl_partialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq (PartialHomeomorph.refl X).toPartialEquiv (PartialEquiv.refl X)","decl":"@[simp, mfld_simps]\ntheorem refl_partialEquiv : (PartialHomeomorph.refl X).toPartialEquiv = PartialEquiv.refl X :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.refl_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq (PartialHomeomorph.refl X).symm (PartialHomeomorph.refl X)","decl":"@[simp, mfld_simps]\ntheorem refl_symm : (PartialHomeomorph.refl X).symm = PartialHomeomorph.refl X :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.ofSet_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsOpen s\n⊢ Eq (PartialHomeomorph.ofSet s hs).target s","decl":"/-- The identity partial equivalence on a set `s` -/\n@[simps! (config := mfld_cfg) apply, simps! (config := .lemmasOnly) source target]\ndef ofSet (s : Set X) (hs : IsOpen s) : PartialHomeomorph X X where\n  toPartialEquiv := PartialEquiv.ofSet s\n  open_source := hs\n  open_target := hs\n  continuousOn_toFun := continuous_id.continuousOn\n  continuousOn_invFun := continuous_id.continuousOn\n\n"}
{"name":"PartialHomeomorph.ofSet_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsOpen s\n⊢ Eq (PartialHomeomorph.ofSet s hs).source s","decl":"/-- The identity partial equivalence on a set `s` -/\n@[simps! (config := mfld_cfg) apply, simps! (config := .lemmasOnly) source target]\ndef ofSet (s : Set X) (hs : IsOpen s) : PartialHomeomorph X X where\n  toPartialEquiv := PartialEquiv.ofSet s\n  open_source := hs\n  open_target := hs\n  continuousOn_toFun := continuous_id.continuousOn\n  continuousOn_invFun := continuous_id.continuousOn\n\n"}
{"name":"PartialHomeomorph.ofSet_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsOpen s\n⊢ Eq (↑(PartialHomeomorph.ofSet s hs)) id","decl":"/-- The identity partial equivalence on a set `s` -/\n@[simps! (config := mfld_cfg) apply, simps! (config := .lemmasOnly) source target]\ndef ofSet (s : Set X) (hs : IsOpen s) : PartialHomeomorph X X where\n  toPartialEquiv := PartialEquiv.ofSet s\n  open_source := hs\n  open_target := hs\n  continuousOn_toFun := continuous_id.continuousOn\n  continuousOn_invFun := continuous_id.continuousOn\n\n"}
{"name":"PartialHomeomorph.ofSet_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsOpen s\n⊢ Eq (PartialHomeomorph.ofSet s hs).toPartialEquiv (PartialEquiv.ofSet s)","decl":"@[simp, mfld_simps]\ntheorem ofSet_toPartialEquiv : (ofSet s hs).toPartialEquiv = PartialEquiv.ofSet s :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.ofSet_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsOpen s\n⊢ Eq (PartialHomeomorph.ofSet s hs).symm (PartialHomeomorph.ofSet s hs)","decl":"@[simp, mfld_simps]\ntheorem ofSet_symm : (ofSet s hs).symm = ofSet s hs :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.ofSet_univ_eq_refl","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq (PartialHomeomorph.ofSet Set.univ ⋯) (PartialHomeomorph.refl X)","decl":"@[simp, mfld_simps]\ntheorem ofSet_univ_eq_refl : ofSet univ isOpen_univ = PartialHomeomorph.refl X := by ext <;> simp\n\n"}
{"name":"PartialHomeomorph.trans'_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nh : Eq e.target e'.source\n⊢ Eq (e.trans' e' h).target e'.target","decl":"/-- Composition of two partial homeomorphisms when the target of the first and the source of\nthe second coincide. -/\n@[simps! apply symm_apply toPartialEquiv, simps! (config := .lemmasOnly) source target]\nprotected def trans' (h : e.target = e'.source) : PartialHomeomorph X Z where\n  toPartialEquiv := PartialEquiv.trans' e.toPartialEquiv e'.toPartialEquiv h\n  open_source := e.open_source\n  open_target := e'.open_target\n  continuousOn_toFun := e'.continuousOn.comp e.continuousOn <| h ▸ e.mapsTo\n  continuousOn_invFun := e.continuousOn_symm.comp e'.continuousOn_symm <| h.symm ▸ e'.symm_mapsTo\n\n"}
{"name":"PartialHomeomorph.trans'_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nh : Eq e.target e'.source\na✝ : X\n⊢ Eq (↑(e.trans' e' h) a✝) (↑e' (↑e a✝))","decl":"/-- Composition of two partial homeomorphisms when the target of the first and the source of\nthe second coincide. -/\n@[simps! apply symm_apply toPartialEquiv, simps! (config := .lemmasOnly) source target]\nprotected def trans' (h : e.target = e'.source) : PartialHomeomorph X Z where\n  toPartialEquiv := PartialEquiv.trans' e.toPartialEquiv e'.toPartialEquiv h\n  open_source := e.open_source\n  open_target := e'.open_target\n  continuousOn_toFun := e'.continuousOn.comp e.continuousOn <| h ▸ e.mapsTo\n  continuousOn_invFun := e.continuousOn_symm.comp e'.continuousOn_symm <| h.symm ▸ e'.symm_mapsTo\n\n"}
{"name":"PartialHomeomorph.trans'_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nh : Eq e.target e'.source\na✝ : Z\n⊢ Eq (↑(e.trans' e' h).symm a✝) (↑e.symm (↑e'.symm a✝))","decl":"/-- Composition of two partial homeomorphisms when the target of the first and the source of\nthe second coincide. -/\n@[simps! apply symm_apply toPartialEquiv, simps! (config := .lemmasOnly) source target]\nprotected def trans' (h : e.target = e'.source) : PartialHomeomorph X Z where\n  toPartialEquiv := PartialEquiv.trans' e.toPartialEquiv e'.toPartialEquiv h\n  open_source := e.open_source\n  open_target := e'.open_target\n  continuousOn_toFun := e'.continuousOn.comp e.continuousOn <| h ▸ e.mapsTo\n  continuousOn_invFun := e.continuousOn_symm.comp e'.continuousOn_symm <| h.symm ▸ e'.symm_mapsTo\n\n"}
{"name":"PartialHomeomorph.trans'_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nh : Eq e.target e'.source\n⊢ Eq (e.trans' e' h).source e.source","decl":"/-- Composition of two partial homeomorphisms when the target of the first and the source of\nthe second coincide. -/\n@[simps! apply symm_apply toPartialEquiv, simps! (config := .lemmasOnly) source target]\nprotected def trans' (h : e.target = e'.source) : PartialHomeomorph X Z where\n  toPartialEquiv := PartialEquiv.trans' e.toPartialEquiv e'.toPartialEquiv h\n  open_source := e.open_source\n  open_target := e'.open_target\n  continuousOn_toFun := e'.continuousOn.comp e.continuousOn <| h ▸ e.mapsTo\n  continuousOn_invFun := e.continuousOn_symm.comp e'.continuousOn_symm <| h.symm ▸ e'.symm_mapsTo\n\n"}
{"name":"PartialHomeomorph.trans'_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nh : Eq e.target e'.source\n⊢ Eq (e.trans' e' h).toPartialEquiv (e.trans' e'.toPartialEquiv h)","decl":"/-- Composition of two partial homeomorphisms when the target of the first and the source of\nthe second coincide. -/\n@[simps! apply symm_apply toPartialEquiv, simps! (config := .lemmasOnly) source target]\nprotected def trans' (h : e.target = e'.source) : PartialHomeomorph X Z where\n  toPartialEquiv := PartialEquiv.trans' e.toPartialEquiv e'.toPartialEquiv h\n  open_source := e.open_source\n  open_target := e'.open_target\n  continuousOn_toFun := e'.continuousOn.comp e.continuousOn <| h ▸ e.mapsTo\n  continuousOn_invFun := e.continuousOn_symm.comp e'.continuousOn_symm <| h.symm ▸ e'.symm_mapsTo\n\n"}
{"name":"PartialHomeomorph.trans_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').toPartialEquiv (e.trans e'.toPartialEquiv)","decl":"@[simp, mfld_simps]\ntheorem trans_toPartialEquiv :\n    (e.trans e').toPartialEquiv = e.toPartialEquiv.trans e'.toPartialEquiv :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.coe_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (↑(e.trans e')) (Function.comp ↑e' ↑e)","decl":"@[simp, mfld_simps]\ntheorem coe_trans : (e.trans e' : X → Z) = e' ∘ e :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.coe_trans_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (↑(e.trans e').symm) (Function.comp ↑e.symm ↑e'.symm)","decl":"@[simp, mfld_simps]\ntheorem coe_trans_symm : ((e.trans e').symm : Z → X) = e.symm ∘ e'.symm :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.trans_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nx : X\n⊢ Eq (↑(e.trans e') x) (↑e' (↑e x))","decl":"theorem trans_apply {x : X} : (e.trans e') x = e' (e x) :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.trans_symm_eq_symm_trans_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').symm (e'.symm.trans e.symm)","decl":"theorem trans_symm_eq_symm_trans_symm : (e.trans e').symm = e'.symm.trans e.symm := rfl\n\n/- This could be considered as a simp lemma, but there are many situations where it makes something\nsimple into something more complicated. -/\n"}
{"name":"PartialHomeomorph.trans_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').source (Inter.inter e.source (Set.preimage (↑e) e'.source))","decl":"theorem trans_source : (e.trans e').source = e.source ∩ e ⁻¹' e'.source :=\n  PartialEquiv.trans_source e.toPartialEquiv e'.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.trans_source'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').source (Inter.inter e.source (Set.preimage (↑e) (Inter.inter e.target e'.source)))","decl":"theorem trans_source' : (e.trans e').source = e.source ∩ e ⁻¹' (e.target ∩ e'.source) :=\n  PartialEquiv.trans_source' e.toPartialEquiv e'.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.trans_source''","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').source (Set.image (↑e.symm) (Inter.inter e.target e'.source))","decl":"theorem trans_source'' : (e.trans e').source = e.symm '' (e.target ∩ e'.source) :=\n  PartialEquiv.trans_source'' e.toPartialEquiv e'.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.image_trans_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (Set.image (↑e) (e.trans e').source) (Inter.inter e.target e'.source)","decl":"theorem image_trans_source : e '' (e.trans e').source = e.target ∩ e'.source :=\n  PartialEquiv.image_trans_source e.toPartialEquiv e'.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.trans_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').target (Inter.inter e'.target (Set.preimage (↑e'.symm) e.target))","decl":"theorem trans_target : (e.trans e').target = e'.target ∩ e'.symm ⁻¹' e.target :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.trans_target'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').target (Inter.inter e'.target (Set.preimage (↑e'.symm) (Inter.inter e'.source e.target)))","decl":"theorem trans_target' : (e.trans e').target = e'.target ∩ e'.symm ⁻¹' (e'.source ∩ e.target) :=\n  trans_source' e'.symm e.symm\n\n"}
{"name":"PartialHomeomorph.trans_target''","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (e.trans e').target (Set.image (↑e') (Inter.inter e'.source e.target))","decl":"theorem trans_target'' : (e.trans e').target = e' '' (e'.source ∩ e.target) :=\n  trans_source'' e'.symm e.symm\n\n"}
{"name":"PartialHomeomorph.inv_image_trans_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\n⊢ Eq (Set.image (↑e'.symm) (e.trans e').target) (Inter.inter e'.source e.target)","decl":"theorem inv_image_trans_target : e'.symm '' (e.trans e').target = e'.source ∩ e.target :=\n  image_trans_source e'.symm e.symm\n\n"}
{"name":"PartialHomeomorph.trans_assoc","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\nZ' : Type u_6\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace Z'\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\ne'' : PartialHomeomorph Z Z'\n⊢ Eq ((e.trans e').trans e'') (e.trans (e'.trans e''))","decl":"theorem trans_assoc (e'' : PartialHomeomorph Z Z') :\n    (e.trans e').trans e'' = e.trans (e'.trans e'') :=\n  toPartialEquiv_injective <| e.1.trans_assoc _ _\n\n"}
{"name":"PartialHomeomorph.trans_refl","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq (e.trans (PartialHomeomorph.refl Y)) e","decl":"@[simp, mfld_simps]\ntheorem trans_refl : e.trans (PartialHomeomorph.refl Y) = e :=\n  toPartialEquiv_injective e.1.trans_refl\n\n"}
{"name":"PartialHomeomorph.refl_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Eq ((PartialHomeomorph.refl X).trans e) e","decl":"@[simp, mfld_simps]\ntheorem refl_trans : (PartialHomeomorph.refl X).trans e = e :=\n  toPartialEquiv_injective e.1.refl_trans\n\n"}
{"name":"PartialHomeomorph.trans_ofSet","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\nhs : IsOpen s\n⊢ Eq (e.trans (PartialHomeomorph.ofSet s hs)) (e.restr (Set.preimage (↑e) s))","decl":"theorem trans_ofSet {s : Set Y} (hs : IsOpen s) : e.trans (ofSet s hs) = e.restr (e ⁻¹' s) :=\n  PartialHomeomorph.ext _ _ (fun _ => rfl) (fun _ => rfl) <| by\n    rw [trans_source, restr_source, ofSet_source, ← preimage_interior, hs.interior_eq]\n\n"}
{"name":"PartialHomeomorph.trans_of_set'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set Y\nhs : IsOpen s\n⊢ Eq (e.trans (PartialHomeomorph.ofSet s hs)) (e.restr (Inter.inter e.source (Set.preimage (↑e) s)))","decl":"theorem trans_of_set' {s : Set Y} (hs : IsOpen s) :\n    e.trans (ofSet s hs) = e.restr (e.source ∩ e ⁻¹' s) := by rw [trans_ofSet, restr_source_inter]\n\n"}
{"name":"PartialHomeomorph.ofSet_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ Eq ((PartialHomeomorph.ofSet s hs).trans e) (e.restr s)","decl":"theorem ofSet_trans {s : Set X} (hs : IsOpen s) : (ofSet s hs).trans e = e.restr s :=\n  PartialHomeomorph.ext _ _ (fun _ => rfl) (fun _ => rfl) <| by simp [hs.interior_eq, inter_comm]\n\n"}
{"name":"PartialHomeomorph.ofSet_trans'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nhs : IsOpen s\n⊢ Eq ((PartialHomeomorph.ofSet s hs).trans e) (e.restr (Inter.inter e.source s))","decl":"theorem ofSet_trans' {s : Set X} (hs : IsOpen s) :\n    (ofSet s hs).trans e = e.restr (e.source ∩ s) := by\n  rw [ofSet_trans, restr_source_inter]\n\n"}
{"name":"PartialHomeomorph.ofSet_trans_ofSet","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : Set X\nhs : IsOpen s\ns' : Set X\nhs' : IsOpen s'\n⊢ Eq ((PartialHomeomorph.ofSet s hs).trans (PartialHomeomorph.ofSet s' hs')) (PartialHomeomorph.ofSet (Inter.inter s s') ⋯)","decl":"@[simp, mfld_simps]\ntheorem ofSet_trans_ofSet {s : Set X} (hs : IsOpen s) {s' : Set X} (hs' : IsOpen s') :\n    (ofSet s hs).trans (ofSet s' hs') = ofSet (s ∩ s') (IsOpen.inter hs hs') := by\n  rw [(ofSet s hs).trans_ofSet hs']\n  ext <;> simp [hs'.interior_eq]\n\n"}
{"name":"PartialHomeomorph.restr_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\ns : Set X\n⊢ Eq ((e.restr s).trans e') ((e.trans e').restr s)","decl":"theorem restr_trans (s : Set X) : (e.restr s).trans e' = (e.trans e').restr s :=\n  toPartialEquiv_injective <|\n    PartialEquiv.restr_trans e.toPartialEquiv e'.toPartialEquiv (interior s)\n\n"}
{"name":"PartialHomeomorph.eqOnSource_iff","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\n⊢ Iff (e.EqOnSource e') (e.EqOnSource e'.toPartialEquiv)","decl":"theorem eqOnSource_iff (e e' : PartialHomeomorph X Y) :\n    EqOnSource e e' ↔ PartialEquiv.EqOnSource e.toPartialEquiv e'.toPartialEquiv :=\n  Iff.rfl\n\n"}
{"name":"PartialHomeomorph.eqOnSource_refl","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ HasEquiv.Equiv e e","decl":"theorem eqOnSource_refl : e ≈ e := Setoid.refl _\n\n"}
{"name":"PartialHomeomorph.EqOnSource.symm'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : HasEquiv.Equiv e e'\n⊢ HasEquiv.Equiv e.symm e'.symm","decl":"/-- If two partial homeomorphisms are equivalent, so are their inverses. -/\ntheorem EqOnSource.symm' {e e' : PartialHomeomorph X Y} (h : e ≈ e') : e.symm ≈ e'.symm :=\n  PartialEquiv.EqOnSource.symm' h\n\n"}
{"name":"PartialHomeomorph.EqOnSource.source_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : HasEquiv.Equiv e e'\n⊢ Eq e.source e'.source","decl":"/-- Two equivalent partial homeomorphisms have the same source. -/\ntheorem EqOnSource.source_eq {e e' : PartialHomeomorph X Y} (h : e ≈ e') : e.source = e'.source :=\n  h.1\n\n"}
{"name":"PartialHomeomorph.EqOnSource.target_eq","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : HasEquiv.Equiv e e'\n⊢ Eq e.target e'.target","decl":"/-- Two equivalent partial homeomorphisms have the same target. -/\ntheorem EqOnSource.target_eq {e e' : PartialHomeomorph X Y} (h : e ≈ e') : e.target = e'.target :=\n  h.symm'.1\n\n"}
{"name":"PartialHomeomorph.EqOnSource.eqOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : HasEquiv.Equiv e e'\n⊢ Set.EqOn (↑e) (↑e') e.source","decl":"/-- Two equivalent partial homeomorphisms have coinciding `toFun` on the source -/\ntheorem EqOnSource.eqOn {e e' : PartialHomeomorph X Y} (h : e ≈ e') : EqOn e e' e.source :=\n  h.2\n\n"}
{"name":"PartialHomeomorph.EqOnSource.symm_eqOn_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : HasEquiv.Equiv e e'\n⊢ Set.EqOn (↑e.symm) (↑e'.symm) e.target","decl":"/-- Two equivalent partial homeomorphisms have coinciding `invFun` on the target -/\ntheorem EqOnSource.symm_eqOn_target {e e' : PartialHomeomorph X Y} (h : e ≈ e') :\n    EqOn e.symm e'.symm e.target :=\n  h.symm'.2\n\n"}
{"name":"PartialHomeomorph.EqOnSource.trans'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne e' : PartialHomeomorph X Y\nf f' : PartialHomeomorph Y Z\nhe : HasEquiv.Equiv e e'\nhf : HasEquiv.Equiv f f'\n⊢ HasEquiv.Equiv (e.trans f) (e'.trans f')","decl":"/-- Composition of partial homeomorphisms respects equivalence. -/\ntheorem EqOnSource.trans' {e e' : PartialHomeomorph X Y} {f f' : PartialHomeomorph Y Z}\n    (he : e ≈ e') (hf : f ≈ f') : e.trans f ≈ e'.trans f' :=\n  PartialEquiv.EqOnSource.trans' he hf\n\n"}
{"name":"PartialHomeomorph.EqOnSource.restr","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nhe : HasEquiv.Equiv e e'\ns : Set X\n⊢ HasEquiv.Equiv (e.restr s) (e'.restr s)","decl":"/-- Restriction of partial homeomorphisms respects equivalence -/\ntheorem EqOnSource.restr {e e' : PartialHomeomorph X Y} (he : e ≈ e') (s : Set X) :\n    e.restr s ≈ e'.restr s :=\n  PartialEquiv.EqOnSource.restr he _\n\n"}
{"name":"PartialHomeomorph.Set.EqOn.restr_eqOn_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : Set.EqOn (↑e) (↑e') (Inter.inter e.source e'.source)\n⊢ HasEquiv.Equiv (e.restr e'.source) (e'.restr e.source)","decl":"/-- Two equivalent partial homeomorphisms are equal when the source and target are `univ`. -/\ntheorem Set.EqOn.restr_eqOn_source {e e' : PartialHomeomorph X Y}\n    (h : EqOn e e' (e.source ∩ e'.source)) : e.restr e'.source ≈ e'.restr e.source := by\n  constructor\n  · rw [e'.restr_source' _ e.open_source]\n    rw [e.restr_source' _ e'.open_source]\n    exact Set.inter_comm _ _\n  · rw [e.restr_source' _ e'.open_source]\n    refine (EqOn.trans ?_ h).trans ?_ <;> simp only [mfld_simps, eqOn_refl]\n\n"}
{"name":"PartialHomeomorph.self_trans_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ HasEquiv.Equiv (e.trans e.symm) (PartialHomeomorph.ofSet e.source ⋯)","decl":"/-- Composition of a partial homeomorphism and its inverse is equivalent to the restriction of the\nidentity to the source -/\ntheorem self_trans_symm : e.trans e.symm ≈ PartialHomeomorph.ofSet e.source e.open_source :=\n  PartialEquiv.self_trans_symm _\n\n"}
{"name":"PartialHomeomorph.symm_trans_self","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ HasEquiv.Equiv (e.symm.trans e) (PartialHomeomorph.ofSet e.target ⋯)","decl":"theorem symm_trans_self : e.symm.trans e ≈ PartialHomeomorph.ofSet e.target e.open_target :=\n  e.symm.self_trans_symm\n\n"}
{"name":"PartialHomeomorph.eq_of_eqOnSource_univ","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\nh : HasEquiv.Equiv e e'\ns : Eq e.source Set.univ\nt : Eq e.target Set.univ\n⊢ Eq e e'","decl":"theorem eq_of_eqOnSource_univ {e e' : PartialHomeomorph X Y} (h : e ≈ e') (s : e.source = univ)\n    (t : e.target = univ) : e = e' :=\n  toPartialEquiv_injective <| PartialEquiv.eq_of_eqOnSource_univ _ _ h s t\n\n"}
{"name":"PartialHomeomorph.prod_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX : PartialHomeomorph X X'\neY : PartialHomeomorph Y Y'\np : Prod X' Y'\n⊢ Eq (↑(eX.prod eY).symm p) { fst := ↑eX.symm p.1, snd := ↑eY.symm p.2 }","decl":"/-- The product of two partial homeomorphisms, as a partial homeomorphism on the product space. -/\n@[simps! (config := mfld_cfg) toPartialEquiv apply,\n  simps! (config := .lemmasOnly) source target symm_apply]\ndef prod (eX : PartialHomeomorph X X') (eY : PartialHomeomorph Y Y') :\n    PartialHomeomorph (X × Y) (X' × Y') where\n  open_source := eX.open_source.prod eY.open_source\n  open_target := eX.open_target.prod eY.open_target\n  continuousOn_toFun := eX.continuousOn.prod_map eY.continuousOn\n  continuousOn_invFun := eX.continuousOn_symm.prod_map eY.continuousOn_symm\n  toPartialEquiv := eX.toPartialEquiv.prod eY.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.prod_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX : PartialHomeomorph X X'\neY : PartialHomeomorph Y Y'\n⊢ Eq (eX.prod eY).target (SProd.sprod eX.target eY.target)","decl":"/-- The product of two partial homeomorphisms, as a partial homeomorphism on the product space. -/\n@[simps! (config := mfld_cfg) toPartialEquiv apply,\n  simps! (config := .lemmasOnly) source target symm_apply]\ndef prod (eX : PartialHomeomorph X X') (eY : PartialHomeomorph Y Y') :\n    PartialHomeomorph (X × Y) (X' × Y') where\n  open_source := eX.open_source.prod eY.open_source\n  open_target := eX.open_target.prod eY.open_target\n  continuousOn_toFun := eX.continuousOn.prod_map eY.continuousOn\n  continuousOn_invFun := eX.continuousOn_symm.prod_map eY.continuousOn_symm\n  toPartialEquiv := eX.toPartialEquiv.prod eY.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.prod_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX : PartialHomeomorph X X'\neY : PartialHomeomorph Y Y'\n⊢ Eq ↑(eX.prod eY) fun p => { fst := ↑eX p.1, snd := ↑eY p.2 }","decl":"/-- The product of two partial homeomorphisms, as a partial homeomorphism on the product space. -/\n@[simps! (config := mfld_cfg) toPartialEquiv apply,\n  simps! (config := .lemmasOnly) source target symm_apply]\ndef prod (eX : PartialHomeomorph X X') (eY : PartialHomeomorph Y Y') :\n    PartialHomeomorph (X × Y) (X' × Y') where\n  open_source := eX.open_source.prod eY.open_source\n  open_target := eX.open_target.prod eY.open_target\n  continuousOn_toFun := eX.continuousOn.prod_map eY.continuousOn\n  continuousOn_invFun := eX.continuousOn_symm.prod_map eY.continuousOn_symm\n  toPartialEquiv := eX.toPartialEquiv.prod eY.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.prod_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX : PartialHomeomorph X X'\neY : PartialHomeomorph Y Y'\n⊢ Eq (eX.prod eY).toPartialEquiv (eX.prod eY.toPartialEquiv)","decl":"/-- The product of two partial homeomorphisms, as a partial homeomorphism on the product space. -/\n@[simps! (config := mfld_cfg) toPartialEquiv apply,\n  simps! (config := .lemmasOnly) source target symm_apply]\ndef prod (eX : PartialHomeomorph X X') (eY : PartialHomeomorph Y Y') :\n    PartialHomeomorph (X × Y) (X' × Y') where\n  open_source := eX.open_source.prod eY.open_source\n  open_target := eX.open_target.prod eY.open_target\n  continuousOn_toFun := eX.continuousOn.prod_map eY.continuousOn\n  continuousOn_invFun := eX.continuousOn_symm.prod_map eY.continuousOn_symm\n  toPartialEquiv := eX.toPartialEquiv.prod eY.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.prod_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX : PartialHomeomorph X X'\neY : PartialHomeomorph Y Y'\n⊢ Eq (eX.prod eY).source (SProd.sprod eX.source eY.source)","decl":"/-- The product of two partial homeomorphisms, as a partial homeomorphism on the product space. -/\n@[simps! (config := mfld_cfg) toPartialEquiv apply,\n  simps! (config := .lemmasOnly) source target symm_apply]\ndef prod (eX : PartialHomeomorph X X') (eY : PartialHomeomorph Y Y') :\n    PartialHomeomorph (X × Y) (X' × Y') where\n  open_source := eX.open_source.prod eY.open_source\n  open_target := eX.open_target.prod eY.open_target\n  continuousOn_toFun := eX.continuousOn.prod_map eY.continuousOn\n  continuousOn_invFun := eX.continuousOn_symm.prod_map eY.continuousOn_symm\n  toPartialEquiv := eX.toPartialEquiv.prod eY.toPartialEquiv\n\n"}
{"name":"PartialHomeomorph.prod_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX : PartialHomeomorph X X'\neY : PartialHomeomorph Y Y'\n⊢ Eq (eX.prod eY).symm (eX.symm.prod eY.symm)","decl":"@[simp, mfld_simps]\ntheorem prod_symm (eX : PartialHomeomorph X X') (eY : PartialHomeomorph Y Y') :\n    (eX.prod eY).symm = eX.symm.prod eY.symm :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.refl_prod_refl","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\n⊢ Eq ((PartialHomeomorph.refl X).prod (PartialHomeomorph.refl Y)) (PartialHomeomorph.refl (Prod X Y))","decl":"@[simp]\ntheorem refl_prod_refl :\n    (PartialHomeomorph.refl X).prod (PartialHomeomorph.refl Y) = PartialHomeomorph.refl (X × Y) :=\n  PartialHomeomorph.ext _ _ (fun _ => rfl) (fun _ => rfl) univ_prod_univ\n\n"}
{"name":"PartialHomeomorph.prod_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\nZ : Type u_5\nZ' : Type u_6\ninst✝⁵ : TopologicalSpace X\ninst✝⁴ : TopologicalSpace X'\ninst✝³ : TopologicalSpace Y\ninst✝² : TopologicalSpace Y'\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace Z'\ne : PartialHomeomorph X Y\nf : PartialHomeomorph Y Z\ne' : PartialHomeomorph X' Y'\nf' : PartialHomeomorph Y' Z'\n⊢ Eq ((e.prod e').trans (f.prod f')) ((e.trans f).prod (e'.trans f'))","decl":"@[simp, mfld_simps]\ntheorem prod_trans (e : PartialHomeomorph X Y) (f : PartialHomeomorph Y Z)\n    (e' : PartialHomeomorph X' Y') (f' : PartialHomeomorph Y' Z') :\n    (e.prod e').trans (f.prod f') = (e.trans f).prod (e'.trans f') :=\n  toPartialEquiv_injective <| e.1.prod_trans ..\n\n"}
{"name":"PartialHomeomorph.prod_eq_prod_of_nonempty","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX eX' : PartialHomeomorph X X'\neY eY' : PartialHomeomorph Y Y'\nh : (eX.prod eY).source.Nonempty\n⊢ Iff (Eq (eX.prod eY) (eX'.prod eY')) (And (Eq eX eX') (Eq eY eY'))","decl":"theorem prod_eq_prod_of_nonempty {eX eX' : PartialHomeomorph X X'} {eY eY' : PartialHomeomorph Y Y'}\n    (h : (eX.prod eY).source.Nonempty) : eX.prod eY = eX'.prod eY' ↔ eX = eX' ∧ eY = eY' := by\n  obtain ⟨⟨x, y⟩, -⟩ := id h\n  haveI : Nonempty X := ⟨x⟩\n  haveI : Nonempty X' := ⟨eX x⟩\n  haveI : Nonempty Y := ⟨y⟩\n  haveI : Nonempty Y' := ⟨eY y⟩\n  simp_rw [PartialHomeomorph.ext_iff, prod_apply, prod_symm_apply, prod_source, Prod.ext_iff,\n    Set.prod_eq_prod_iff_of_nonempty h, forall_and, Prod.forall, forall_const,\n    and_assoc, and_left_comm]\n\n"}
{"name":"PartialHomeomorph.prod_eq_prod_of_nonempty'","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nX' : Type u_2\nY : Type u_3\nY' : Type u_4\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Y'\neX eX' : PartialHomeomorph X X'\neY eY' : PartialHomeomorph Y Y'\nh : (eX'.prod eY').source.Nonempty\n⊢ Iff (Eq (eX.prod eY) (eX'.prod eY')) (And (Eq eX eX') (Eq eY eY'))","decl":"theorem prod_eq_prod_of_nonempty'\n    {eX eX' : PartialHomeomorph X X'} {eY eY' : PartialHomeomorph Y Y'}\n    (h : (eX'.prod eY').source.Nonempty) : eX.prod eY = eX'.prod eY' ↔ eX = eX' ∧ eY = eY' := by\n  rw [eq_comm, prod_eq_prod_of_nonempty h, eq_comm, @eq_comm _ eY']\n\n"}
{"name":"PartialHomeomorph.pi_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"ι : Type u_7\ninst✝² : Finite ι\nX : ι → Type u_8\nY : ι → Type u_9\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : (i : ι) → TopologicalSpace (Y i)\nei : (i : ι) → PartialHomeomorph (X i) (Y i)\n⊢ Eq (PartialHomeomorph.pi ei).toPartialEquiv (PartialEquiv.pi fun i => (ei i).toPartialEquiv)","decl":"/-- The product of a finite family of `PartialHomeomorph`s. -/\n@[simps toPartialEquiv]\ndef pi : PartialHomeomorph (∀ i, X i) (∀ i, Y i) where\n  toPartialEquiv := PartialEquiv.pi fun i => (ei i).toPartialEquiv\n  open_source := isOpen_set_pi finite_univ fun i _ => (ei i).open_source\n  open_target := isOpen_set_pi finite_univ fun i _ => (ei i).open_target\n  continuousOn_toFun := continuousOn_pi.2 fun i =>\n    (ei i).continuousOn.comp (continuous_apply _).continuousOn fun _f hf => hf i trivial\n  continuousOn_invFun := continuousOn_pi.2 fun i =>\n    (ei i).continuousOn_symm.comp (continuous_apply _).continuousOn fun _f hf => hf i trivial\n\n"}
{"name":"PartialHomeomorph.piecewise_toPartialEquiv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ninst✝¹ : (x : X) → Decidable (Membership.mem s x)\ninst✝ : (y : Y) → Decidable (Membership.mem t y)\nH : e.IsImage s t\nH' : e'.IsImage s t\nHs : Eq (Inter.inter e.source (frontier s)) (Inter.inter e'.source (frontier s))\nHeq : Set.EqOn (↑e) (↑e') (Inter.inter e.source (frontier s))\n⊢ Eq (e.piecewise e' s t H H' Hs Heq).toPartialEquiv (e.piecewise e'.toPartialEquiv s t H H')","decl":"/-- Combine two `PartialHomeomorph`s using `Set.piecewise`. The source of the new\n`PartialHomeomorph` is `s.ite e.source e'.source = e.source ∩ s ∪ e'.source \\ s`, and similarly for\ntarget.  The function sends `e.source ∩ s` to `e.target ∩ t` using `e` and\n`e'.source \\ s` to `e'.target \\ t` using `e'`, and similarly for the inverse function.\nTo ensure the maps `toFun` and `invFun` are inverse of each other on the new `source` and `target`,\nthe definition assumes that the sets `s` and `t` are related both by `e.is_image` and `e'.is_image`.\nTo ensure that the new maps are continuous on `source`/`target`, it also assumes that `e.source` and\n`e'.source` meet `frontier s` on the same set and `e x = e' x` on this intersection. -/\n@[simps! (config := .asFn) toPartialEquiv apply]\ndef piecewise (e e' : PartialHomeomorph X Y) (s : Set X) (t : Set Y) [∀ x, Decidable (x ∈ s)]\n    [∀ y, Decidable (y ∈ t)] (H : e.IsImage s t) (H' : e'.IsImage s t)\n    (Hs : e.source ∩ frontier s = e'.source ∩ frontier s)\n    (Heq : EqOn e e' (e.source ∩ frontier s)) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquiv.piecewise e'.toPartialEquiv s t H H'\n  open_source := e.open_source.ite e'.open_source Hs\n  open_target :=\n    e.open_target.ite e'.open_target <| H.frontier.inter_eq_of_inter_eq_of_eqOn H'.frontier Hs Heq\n  continuousOn_toFun := continuousOn_piecewise_ite e.continuousOn e'.continuousOn Hs Heq\n  continuousOn_invFun :=\n    continuousOn_piecewise_ite e.continuousOn_symm e'.continuousOn_symm\n      (H.frontier.inter_eq_of_inter_eq_of_eqOn H'.frontier Hs Heq)\n      (H.frontier.symm_eqOn_of_inter_eq_of_eqOn Hs Heq)\n\n"}
{"name":"PartialHomeomorph.piecewise_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ninst✝¹ : (x : X) → Decidable (Membership.mem s x)\ninst✝ : (y : Y) → Decidable (Membership.mem t y)\nH : e.IsImage s t\nH' : e'.IsImage s t\nHs : Eq (Inter.inter e.source (frontier s)) (Inter.inter e'.source (frontier s))\nHeq : Set.EqOn (↑e) (↑e') (Inter.inter e.source (frontier s))\n⊢ Eq (↑(e.piecewise e' s t H H' Hs Heq)) (s.piecewise ↑e ↑e')","decl":"/-- Combine two `PartialHomeomorph`s using `Set.piecewise`. The source of the new\n`PartialHomeomorph` is `s.ite e.source e'.source = e.source ∩ s ∪ e'.source \\ s`, and similarly for\ntarget.  The function sends `e.source ∩ s` to `e.target ∩ t` using `e` and\n`e'.source \\ s` to `e'.target \\ t` using `e'`, and similarly for the inverse function.\nTo ensure the maps `toFun` and `invFun` are inverse of each other on the new `source` and `target`,\nthe definition assumes that the sets `s` and `t` are related both by `e.is_image` and `e'.is_image`.\nTo ensure that the new maps are continuous on `source`/`target`, it also assumes that `e.source` and\n`e'.source` meet `frontier s` on the same set and `e x = e' x` on this intersection. -/\n@[simps! (config := .asFn) toPartialEquiv apply]\ndef piecewise (e e' : PartialHomeomorph X Y) (s : Set X) (t : Set Y) [∀ x, Decidable (x ∈ s)]\n    [∀ y, Decidable (y ∈ t)] (H : e.IsImage s t) (H' : e'.IsImage s t)\n    (Hs : e.source ∩ frontier s = e'.source ∩ frontier s)\n    (Heq : EqOn e e' (e.source ∩ frontier s)) : PartialHomeomorph X Y where\n  toPartialEquiv := e.toPartialEquiv.piecewise e'.toPartialEquiv s t H H'\n  open_source := e.open_source.ite e'.open_source Hs\n  open_target :=\n    e.open_target.ite e'.open_target <| H.frontier.inter_eq_of_inter_eq_of_eqOn H'.frontier Hs Heq\n  continuousOn_toFun := continuousOn_piecewise_ite e.continuousOn e'.continuousOn Hs Heq\n  continuousOn_invFun :=\n    continuousOn_piecewise_ite e.continuousOn_symm e'.continuousOn_symm\n      (H.frontier.inter_eq_of_inter_eq_of_eqOn H'.frontier Hs Heq)\n      (H.frontier.symm_eqOn_of_inter_eq_of_eqOn Hs Heq)\n\n"}
{"name":"PartialHomeomorph.symm_piecewise","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ne e' : PartialHomeomorph X Y\ns : Set X\nt : Set Y\ninst✝¹ : (x : X) → Decidable (Membership.mem s x)\ninst✝ : (y : Y) → Decidable (Membership.mem t y)\nH : e.IsImage s t\nH' : e'.IsImage s t\nHs : Eq (Inter.inter e.source (frontier s)) (Inter.inter e'.source (frontier s))\nHeq : Set.EqOn (↑e) (↑e') (Inter.inter e.source (frontier s))\n⊢ Eq (e.piecewise e' s t H H' Hs Heq).symm (e.symm.piecewise e'.symm t s ⋯ ⋯ ⋯ ⋯)","decl":"@[simp]\ntheorem symm_piecewise (e e' : PartialHomeomorph X Y) {s : Set X} {t : Set Y}\n    [∀ x, Decidable (x ∈ s)] [∀ y, Decidable (y ∈ t)] (H : e.IsImage s t) (H' : e'.IsImage s t)\n    (Hs : e.source ∩ frontier s = e'.source ∩ frontier s)\n    (Heq : EqOn e e' (e.source ∩ frontier s)) :\n    (e.piecewise e' s t H H' Hs Heq).symm =\n      e.symm.piecewise e'.symm t s H.symm H'.symm\n        (H.frontier.inter_eq_of_inter_eq_of_eqOn H'.frontier Hs Heq)\n        (H.frontier.symm_eqOn_of_inter_eq_of_eqOn Hs Heq) :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.continuousWithinAt_iff_continuousWithinAt_comp_right","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Y → Z\ns : Set Y\nx : Y\nh : Membership.mem e.target x\n⊢ Iff (ContinuousWithinAt f s x) (ContinuousWithinAt (Function.comp f ↑e) (Set.preimage (↑e) s) (↑e.symm x))","decl":"/-- Continuity within a set at a point can be read under right composition with a local\nhomeomorphism, if the point is in its target -/\ntheorem continuousWithinAt_iff_continuousWithinAt_comp_right {f : Y → Z} {s : Set Y} {x : Y}\n    (h : x ∈ e.target) :\n    ContinuousWithinAt f s x ↔ ContinuousWithinAt (f ∘ e) (e ⁻¹' s) (e.symm x) := by\n  simp_rw [ContinuousWithinAt, ← @tendsto_map'_iff _ _ _ _ e,\n    e.map_nhdsWithin_preimage_eq (e.map_target h), (· ∘ ·), e.right_inv h]\n\n"}
{"name":"PartialHomeomorph.continuousAt_iff_continuousAt_comp_right","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Y → Z\nx : Y\nh : Membership.mem e.target x\n⊢ Iff (ContinuousAt f x) (ContinuousAt (Function.comp f ↑e) (↑e.symm x))","decl":"/-- Continuity at a point can be read under right composition with a partial homeomorphism, if the\npoint is in its target -/\ntheorem continuousAt_iff_continuousAt_comp_right {f : Y → Z} {x : Y} (h : x ∈ e.target) :\n    ContinuousAt f x ↔ ContinuousAt (f ∘ e) (e.symm x) := by\n  rw [← continuousWithinAt_univ, e.continuousWithinAt_iff_continuousWithinAt_comp_right h,\n    preimage_univ, continuousWithinAt_univ]\n\n"}
{"name":"PartialHomeomorph.continuousOn_iff_continuousOn_comp_right","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Y → Z\ns : Set Y\nh : HasSubset.Subset s e.target\n⊢ Iff (ContinuousOn f s) (ContinuousOn (Function.comp f ↑e) (Inter.inter e.source (Set.preimage (↑e) s)))","decl":"/-- A function is continuous on a set if and only if its composition with a partial homeomorphism\non the right is continuous on the corresponding set. -/\ntheorem continuousOn_iff_continuousOn_comp_right {f : Y → Z} {s : Set Y} (h : s ⊆ e.target) :\n    ContinuousOn f s ↔ ContinuousOn (f ∘ e) (e.source ∩ e ⁻¹' s) := by\n  simp only [← e.symm_image_eq_source_inter_preimage h, ContinuousOn, forall_mem_image]\n  refine forall₂_congr fun x hx => ?_\n  rw [e.continuousWithinAt_iff_continuousWithinAt_comp_right (h hx),\n    e.symm_image_eq_source_inter_preimage h, inter_comm, continuousWithinAt_inter]\n  exact IsOpen.mem_nhds e.open_source (e.map_target (h hx))\n\n"}
{"name":"PartialHomeomorph.continuousWithinAt_iff_continuousWithinAt_comp_left","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Z → X\ns : Set Z\nx : Z\nhx : Membership.mem e.source (f x)\nh : Membership.mem (nhdsWithin x s) (Set.preimage f e.source)\n⊢ Iff (ContinuousWithinAt f s x) (ContinuousWithinAt (Function.comp (↑e) f) s x)","decl":"/-- Continuity within a set at a point can be read under left composition with a local\nhomeomorphism if a neighborhood of the initial point is sent to the source of the local\nhomeomorphism -/\ntheorem continuousWithinAt_iff_continuousWithinAt_comp_left {f : Z → X} {s : Set Z} {x : Z}\n    (hx : f x ∈ e.source) (h : f ⁻¹' e.source ∈ 𝓝[s] x) :\n    ContinuousWithinAt f s x ↔ ContinuousWithinAt (e ∘ f) s x := by\n  refine ⟨(e.continuousAt hx).comp_continuousWithinAt, fun fe_cont => ?_⟩\n  rw [← continuousWithinAt_inter' h] at fe_cont ⊢\n  have : ContinuousWithinAt (e.symm ∘ e ∘ f) (s ∩ f ⁻¹' e.source) x :=\n    haveI : ContinuousWithinAt e.symm univ (e (f x)) :=\n      (e.continuousAt_symm (e.map_source hx)).continuousWithinAt\n    ContinuousWithinAt.comp this fe_cont (subset_univ _)\n  exact this.congr (fun y hy => by simp [e.left_inv hy.2]) (by simp [e.left_inv hx])\n\n"}
{"name":"PartialHomeomorph.continuousAt_iff_continuousAt_comp_left","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Z → X\nx : Z\nh : Membership.mem (nhds x) (Set.preimage f e.source)\n⊢ Iff (ContinuousAt f x) (ContinuousAt (Function.comp (↑e) f) x)","decl":"/-- Continuity at a point can be read under left composition with a partial homeomorphism if a\nneighborhood of the initial point is sent to the source of the partial homeomorphism -/\ntheorem continuousAt_iff_continuousAt_comp_left {f : Z → X} {x : Z} (h : f ⁻¹' e.source ∈ 𝓝 x) :\n    ContinuousAt f x ↔ ContinuousAt (e ∘ f) x := by\n  have hx : f x ∈ e.source := (mem_of_mem_nhds h :)\n  have h' : f ⁻¹' e.source ∈ 𝓝[univ] x := by rwa [nhdsWithin_univ]\n  rw [← continuousWithinAt_univ, ← continuousWithinAt_univ,\n    e.continuousWithinAt_iff_continuousWithinAt_comp_left hx h']\n\n"}
{"name":"PartialHomeomorph.continuousOn_iff_continuousOn_comp_left","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Z → X\ns : Set Z\nh : HasSubset.Subset s (Set.preimage f e.source)\n⊢ Iff (ContinuousOn f s) (ContinuousOn (Function.comp (↑e) f) s)","decl":"/-- A function is continuous on a set if and only if its composition with a partial homeomorphism\non the left is continuous on the corresponding set. -/\ntheorem continuousOn_iff_continuousOn_comp_left {f : Z → X} {s : Set Z} (h : s ⊆ f ⁻¹' e.source) :\n    ContinuousOn f s ↔ ContinuousOn (e ∘ f) s :=\n  forall₂_congr fun _x hx =>\n    e.continuousWithinAt_iff_continuousWithinAt_comp_left (h hx)\n      (mem_of_superset self_mem_nhdsWithin h)\n\n"}
{"name":"PartialHomeomorph.continuous_iff_continuous_comp_left","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf : Z → X\nh : Eq (Set.preimage f e.source) Set.univ\n⊢ Iff (Continuous f) (Continuous (Function.comp (↑e) f))","decl":"/-- A function is continuous if and only if its composition with a partial homeomorphism\non the left is continuous and its image is contained in the source. -/\ntheorem continuous_iff_continuous_comp_left {f : Z → X} (h : f ⁻¹' e.source = univ) :\n    Continuous f ↔ Continuous (e ∘ f) := by\n  simp only [continuous_iff_continuousOn_univ]\n  exact e.continuousOn_iff_continuousOn_comp_left (Eq.symm h).subset\n\n"}
{"name":"PartialHomeomorph.homeomorphOfImageSubsetSource_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nhs : HasSubset.Subset s e.source\nht : Eq (Set.image (↑e) s) t\na✝ : ↑t\n⊢ Eq ((e.homeomorphOfImageSubsetSource hs ht).symm a✝) (Set.MapsTo.restrict (↑e.symm) t s ⋯ a✝)","decl":"/-- The homeomorphism obtained by restricting a `PartialHomeomorph` to a subset of the source. -/\n@[simps]\ndef homeomorphOfImageSubsetSource {s : Set X} {t : Set Y} (hs : s ⊆ e.source) (ht : e '' s = t) :\n    s ≃ₜ t :=\n  have h₁ : MapsTo e s t := mapsTo'.2 ht.subset\n  have h₂ : t ⊆ e.target := ht ▸ e.image_source_eq_target ▸ image_subset e hs\n  have h₃ : MapsTo e.symm t s := ht ▸ forall_mem_image.2 fun _x hx =>\n      (e.left_inv (hs hx)).symm ▸ hx\n  { toFun := MapsTo.restrict e s t h₁\n    invFun := MapsTo.restrict e.symm t s h₃\n    left_inv := fun a => Subtype.ext (e.left_inv (hs a.2))\n    right_inv := fun b => Subtype.eq <| e.right_inv (h₂ b.2)\n    continuous_toFun := (e.continuousOn.mono hs).restrict_mapsTo h₁\n    continuous_invFun := (e.continuousOn_symm.mono h₂).restrict_mapsTo h₃ }\n\n"}
{"name":"PartialHomeomorph.homeomorphOfImageSubsetSource_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : Set X\nt : Set Y\nhs : HasSubset.Subset s e.source\nht : Eq (Set.image (↑e) s) t\na✝ : ↑s\n⊢ Eq ((e.homeomorphOfImageSubsetSource hs ht) a✝) (Set.MapsTo.restrict (↑e) s t ⋯ a✝)","decl":"/-- The homeomorphism obtained by restricting a `PartialHomeomorph` to a subset of the source. -/\n@[simps]\ndef homeomorphOfImageSubsetSource {s : Set X} {t : Set Y} (hs : s ⊆ e.source) (ht : e '' s = t) :\n    s ≃ₜ t :=\n  have h₁ : MapsTo e s t := mapsTo'.2 ht.subset\n  have h₂ : t ⊆ e.target := ht ▸ e.image_source_eq_target ▸ image_subset e hs\n  have h₃ : MapsTo e.symm t s := ht ▸ forall_mem_image.2 fun _x hx =>\n      (e.left_inv (hs hx)).symm ▸ hx\n  { toFun := MapsTo.restrict e s t h₁\n    invFun := MapsTo.restrict e.symm t s h₃\n    left_inv := fun a => Subtype.ext (e.left_inv (hs a.2))\n    right_inv := fun b => Subtype.eq <| e.right_inv (h₂ b.2)\n    continuous_toFun := (e.continuousOn.mono hs).restrict_mapsTo h₁\n    continuous_invFun := (e.continuousOn_symm.mono h₂).restrict_mapsTo h₃ }\n\n"}
{"name":"PartialHomeomorph.toHomeomorphSourceTarget_apply_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\na✝ : ↑e.source\n⊢ Eq (↑(e.toHomeomorphSourceTarget a✝)) (↑e ↑a✝)","decl":"/-- A partial homeomorphism defines a homeomorphism between its source and target. -/\n@[simps!]\ndef toHomeomorphSourceTarget : e.source ≃ₜ e.target :=\n  e.homeomorphOfImageSubsetSource subset_rfl e.image_source_eq_target\n\n"}
{"name":"PartialHomeomorph.toHomeomorphSourceTarget_symm_apply_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\na✝ : ↑e.target\n⊢ Eq (↑(e.toHomeomorphSourceTarget.symm a✝)) (↑e.symm ↑a✝)","decl":"/-- A partial homeomorphism defines a homeomorphism between its source and target. -/\n@[simps!]\ndef toHomeomorphSourceTarget : e.source ≃ₜ e.target :=\n  e.homeomorphOfImageSubsetSource subset_rfl e.image_source_eq_target\n\n"}
{"name":"PartialHomeomorph.secondCountableTopology_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ninst✝ : SecondCountableTopology Y\n⊢ SecondCountableTopology ↑e.source","decl":"theorem secondCountableTopology_source [SecondCountableTopology Y] :\n    SecondCountableTopology e.source :=\n  e.toHomeomorphSourceTarget.secondCountableTopology\n\n"}
{"name":"PartialHomeomorph.nhds_eq_comap_inf_principal","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nx : X\nhx : Membership.mem e.source x\n⊢ Eq (nhds x) (Min.min (Filter.comap (↑e) (nhds (↑e x))) (Filter.principal e.source))","decl":"theorem nhds_eq_comap_inf_principal {x} (hx : x ∈ e.source) :\n    𝓝 x = comap e (𝓝 (e x)) ⊓ 𝓟 e.source := by\n  lift x to e.source using hx\n  rw [← e.open_source.nhdsWithin_eq x.2, ← map_nhds_subtype_val, ← map_comap_setCoe_val,\n    e.toHomeomorphSourceTarget.nhds_eq_comap, nhds_subtype_eq_comap]\n  simp only [Function.comp_def, toHomeomorphSourceTarget_apply_coe, comap_comap]\n\n"}
{"name":"PartialHomeomorph.toHomeomorphOfSourceEqUnivTargetEqUniv_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nh : Eq e.source Set.univ\nh' : Eq e.target Set.univ\n⊢ Eq ⇑(e.toHomeomorphOfSourceEqUnivTargetEqUniv h h') ↑e","decl":"/-- If a partial homeomorphism has source and target equal to univ, then it induces a homeomorphism\nbetween the whole spaces, expressed in this definition. -/\n@[simps (config := mfld_cfg) apply symm_apply]\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: add a `PartialEquiv` version\ndef toHomeomorphOfSourceEqUnivTargetEqUniv (h : e.source = (univ : Set X)) (h' : e.target = univ) :\n    X ≃ₜ Y where\n  toFun := e\n  invFun := e.symm\n  left_inv x :=\n    e.left_inv <| by\n      rw [h]\n      exact mem_univ _\n  right_inv x :=\n    e.right_inv <| by\n      rw [h']\n      exact mem_univ _\n  continuous_toFun := by\n    simpa only [continuous_iff_continuousOn_univ, h] using e.continuousOn\n  continuous_invFun := by\n    simpa only [continuous_iff_continuousOn_univ, h'] using e.continuousOn_symm\n\n"}
{"name":"PartialHomeomorph.toHomeomorphOfSourceEqUnivTargetEqUniv_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nh : Eq e.source Set.univ\nh' : Eq e.target Set.univ\n⊢ Eq ⇑(e.toHomeomorphOfSourceEqUnivTargetEqUniv h h').symm ↑e.symm","decl":"/-- If a partial homeomorphism has source and target equal to univ, then it induces a homeomorphism\nbetween the whole spaces, expressed in this definition. -/\n@[simps (config := mfld_cfg) apply symm_apply]\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: add a `PartialEquiv` version\ndef toHomeomorphOfSourceEqUnivTargetEqUniv (h : e.source = (univ : Set X)) (h' : e.target = univ) :\n    X ≃ₜ Y where\n  toFun := e\n  invFun := e.symm\n  left_inv x :=\n    e.left_inv <| by\n      rw [h]\n      exact mem_univ _\n  right_inv x :=\n    e.right_inv <| by\n      rw [h']\n      exact mem_univ _\n  continuous_toFun := by\n    simpa only [continuous_iff_continuousOn_univ, h] using e.continuousOn\n  continuous_invFun := by\n    simpa only [continuous_iff_continuousOn_univ, h'] using e.continuousOn_symm\n\n"}
{"name":"PartialHomeomorph.isOpenEmbedding_restrict","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Topology.IsOpenEmbedding (e.source.restrict ↑e)","decl":"theorem isOpenEmbedding_restrict : IsOpenEmbedding (e.source.restrict e) := by\n  refine .of_continuous_injective_isOpenMap (e.continuousOn.comp_continuous\n    continuous_subtype_val Subtype.prop) e.injOn.injective fun V hV ↦ ?_\n  rw [Set.restrict_eq, Set.image_comp]\n  exact e.isOpen_image_of_subset_source (e.open_source.isOpenMap_subtype_val V hV)\n    fun _ ⟨x, _, h⟩ ↦ h ▸ x.2\n\n"}
{"name":"PartialHomeomorph.openEmbedding_restrict","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\n⊢ Topology.IsOpenEmbedding (e.source.restrict ↑e)","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding_restrict := isOpenEmbedding_restrict\n\n"}
{"name":"PartialHomeomorph.to_isOpenEmbedding","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nh : Eq e.source Set.univ\n⊢ Topology.IsOpenEmbedding ↑e","decl":"/-- A partial homeomorphism whose source is all of `X` defines an open embedding of `X` into `Y`.\nThe converse is also true; see `IsOpenEmbedding.toPartialHomeomorph`. -/\ntheorem to_isOpenEmbedding (h : e.source = Set.univ) : IsOpenEmbedding e :=\n  e.isOpenEmbedding_restrict.comp\n    ((Homeomorph.setCongr h).trans <| Homeomorph.Set.univ X).symm.isOpenEmbedding\n\n"}
{"name":"PartialHomeomorph.to_openEmbedding","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nh : Eq e.source Set.univ\n⊢ Topology.IsOpenEmbedding ↑e","decl":"@[deprecated (since := \"2024-10-18\")]\nalias to_openEmbedding := to_isOpenEmbedding\n\n"}
{"name":"Homeomorph.refl_toPartialHomeomorph","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\n⊢ Eq (Homeomorph.refl X).toPartialHomeomorph (PartialHomeomorph.refl X)","decl":"@[simp, mfld_simps]\ntheorem refl_toPartialHomeomorph :\n    (Homeomorph.refl X).toPartialHomeomorph = PartialHomeomorph.refl X :=\n  rfl\n\n"}
{"name":"Homeomorph.symm_toPartialHomeomorph","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : Homeomorph X Y\n⊢ Eq e.symm.toPartialHomeomorph e.toPartialHomeomorph.symm","decl":"@[simp, mfld_simps]\ntheorem symm_toPartialHomeomorph : e.symm.toPartialHomeomorph = e.toPartialHomeomorph.symm :=\n  rfl\n\n"}
{"name":"Homeomorph.trans_toPartialHomeomorph","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Homeomorph X Y\ne' : Homeomorph Y Z\n⊢ Eq (e.trans e').toPartialHomeomorph (e.toPartialHomeomorph.trans e'.toPartialHomeomorph)","decl":"@[simp, mfld_simps]\ntheorem trans_toPartialHomeomorph :\n    (e.trans e').toPartialHomeomorph = e.toPartialHomeomorph.trans e'.toPartialHomeomorph :=\n  PartialHomeomorph.toPartialEquiv_injective <| Equiv.trans_toPartialEquiv _ _\n\n"}
{"name":"Homeomorph.transPartialHomeomorph_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Homeomorph X Y\nf' : PartialHomeomorph Y Z\n⊢ Eq (e.transPartialHomeomorph f').source (Set.preimage (⇑e) f'.source)","decl":"/-- Precompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transPartialHomeomorph (e : X ≃ₜ Y) (f' : PartialHomeomorph Y Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toEquiv.transPartialEquiv f'.toPartialEquiv\n  open_source := f'.open_source.preimage e.continuous\n  open_target := f'.open_target\n  continuousOn_toFun := f'.continuousOn.comp e.continuous.continuousOn fun _ => id\n  continuousOn_invFun := e.symm.continuous.comp_continuousOn f'.symm.continuousOn\n\n"}
{"name":"Homeomorph.transPartialHomeomorph_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Homeomorph X Y\nf' : PartialHomeomorph Y Z\n⊢ Eq (↑(e.transPartialHomeomorph f').symm) (Function.comp ⇑e.symm ↑f'.symm)","decl":"/-- Precompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transPartialHomeomorph (e : X ≃ₜ Y) (f' : PartialHomeomorph Y Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toEquiv.transPartialEquiv f'.toPartialEquiv\n  open_source := f'.open_source.preimage e.continuous\n  open_target := f'.open_target\n  continuousOn_toFun := f'.continuousOn.comp e.continuous.continuousOn fun _ => id\n  continuousOn_invFun := e.symm.continuous.comp_continuousOn f'.symm.continuousOn\n\n"}
{"name":"Homeomorph.transPartialHomeomorph_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Homeomorph X Y\nf' : PartialHomeomorph Y Z\n⊢ Eq (e.transPartialHomeomorph f').target f'.target","decl":"/-- Precompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transPartialHomeomorph (e : X ≃ₜ Y) (f' : PartialHomeomorph Y Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toEquiv.transPartialEquiv f'.toPartialEquiv\n  open_source := f'.open_source.preimage e.continuous\n  open_target := f'.open_target\n  continuousOn_toFun := f'.continuousOn.comp e.continuous.continuousOn fun _ => id\n  continuousOn_invFun := e.symm.continuous.comp_continuousOn f'.symm.continuousOn\n\n"}
{"name":"Homeomorph.transPartialHomeomorph_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Homeomorph X Y\nf' : PartialHomeomorph Y Z\n⊢ Eq (↑(e.transPartialHomeomorph f')) (Function.comp ↑f' ⇑e)","decl":"/-- Precompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transPartialHomeomorph (e : X ≃ₜ Y) (f' : PartialHomeomorph Y Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toEquiv.transPartialEquiv f'.toPartialEquiv\n  open_source := f'.open_source.preimage e.continuous\n  open_target := f'.open_target\n  continuousOn_toFun := f'.continuousOn.comp e.continuous.continuousOn fun _ => id\n  continuousOn_invFun := e.symm.continuous.comp_continuousOn f'.symm.continuousOn\n\n"}
{"name":"Homeomorph.transPartialHomeomorph_eq_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : Homeomorph X Y\nf' : PartialHomeomorph Y Z\n⊢ Eq (e.transPartialHomeomorph f') (e.toPartialHomeomorph.trans f')","decl":"theorem transPartialHomeomorph_eq_trans (e : X ≃ₜ Y) (f' : PartialHomeomorph Y Z) :\n    e.transPartialHomeomorph f' = e.toPartialHomeomorph.trans f' :=\n  PartialHomeomorph.toPartialEquiv_injective <| Equiv.transPartialEquiv_eq_trans _ _\n\n"}
{"name":"Homeomorph.transPartialHomeomorph_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\nZ' : Type u_6\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace Z'\ne : Homeomorph X Y\nf : PartialHomeomorph Y Z\nf' : PartialHomeomorph Z Z'\n⊢ Eq ((e.transPartialHomeomorph f).trans f') (e.transPartialHomeomorph (f.trans f'))","decl":"@[simp, mfld_simps]\ntheorem transPartialHomeomorph_trans (e : X ≃ₜ Y) (f : PartialHomeomorph Y Z)\n    (f' : PartialHomeomorph Z Z') :\n    (e.transPartialHomeomorph f).trans f' = e.transPartialHomeomorph (f.trans f') := by\n  simp only [transPartialHomeomorph_eq_trans, PartialHomeomorph.trans_assoc]\n\n"}
{"name":"Homeomorph.trans_transPartialHomeomorph","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\nZ' : Type u_6\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace Z'\ne : Homeomorph X Y\ne' : Homeomorph Y Z\nf'' : PartialHomeomorph Z Z'\n⊢ Eq ((e.trans e').transPartialHomeomorph f'') (e.transPartialHomeomorph (e'.transPartialHomeomorph f''))","decl":"@[simp, mfld_simps]\ntheorem trans_transPartialHomeomorph (e : X ≃ₜ Y) (e' : Y ≃ₜ Z) (f'' : PartialHomeomorph Z Z') :\n    (e.trans e').transPartialHomeomorph f'' =\n      e.transPartialHomeomorph (e'.transPartialHomeomorph f'') := by\n  simp only [transPartialHomeomorph_eq_trans, PartialHomeomorph.trans_assoc,\n    trans_toPartialHomeomorph]\n\n"}
{"name":"Topology.IsOpenEmbedding.toPartialHomeomorph_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nh : Topology.IsOpenEmbedding f\ninst✝ : Nonempty X\n⊢ Eq (Topology.IsOpenEmbedding.toPartialHomeomorph f h).target (Set.range f)","decl":"/-- An open embedding of `X` into `Y`, with `X` nonempty, defines a partial homeomorphism\nwhose source is all of `X`. The converse is also true; see\n`PartialHomeomorph.to_isOpenEmbedding`. -/\n@[simps! (config := mfld_cfg) apply source target]\nnoncomputable def toPartialHomeomorph [Nonempty X] : PartialHomeomorph X Y :=\n  PartialHomeomorph.ofContinuousOpen (h.isEmbedding.injective.injOn.toPartialEquiv f univ)\n    h.continuous.continuousOn h.isOpenMap isOpen_univ\n\n"}
{"name":"Topology.IsOpenEmbedding.toPartialHomeomorph_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nh : Topology.IsOpenEmbedding f\ninst✝ : Nonempty X\n⊢ Eq (Topology.IsOpenEmbedding.toPartialHomeomorph f h).source Set.univ","decl":"/-- An open embedding of `X` into `Y`, with `X` nonempty, defines a partial homeomorphism\nwhose source is all of `X`. The converse is also true; see\n`PartialHomeomorph.to_isOpenEmbedding`. -/\n@[simps! (config := mfld_cfg) apply source target]\nnoncomputable def toPartialHomeomorph [Nonempty X] : PartialHomeomorph X Y :=\n  PartialHomeomorph.ofContinuousOpen (h.isEmbedding.injective.injOn.toPartialEquiv f univ)\n    h.continuous.continuousOn h.isOpenMap isOpen_univ\n\n"}
{"name":"Topology.IsOpenEmbedding.toPartialHomeomorph_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nh : Topology.IsOpenEmbedding f\ninst✝ : Nonempty X\n⊢ Eq (↑(Topology.IsOpenEmbedding.toPartialHomeomorph f h)) f","decl":"/-- An open embedding of `X` into `Y`, with `X` nonempty, defines a partial homeomorphism\nwhose source is all of `X`. The converse is also true; see\n`PartialHomeomorph.to_isOpenEmbedding`. -/\n@[simps! (config := mfld_cfg) apply source target]\nnoncomputable def toPartialHomeomorph [Nonempty X] : PartialHomeomorph X Y :=\n  PartialHomeomorph.ofContinuousOpen (h.isEmbedding.injective.injOn.toPartialEquiv f univ)\n    h.continuous.continuousOn h.isOpenMap isOpen_univ\n\n"}
{"name":"Topology.IsOpenEmbedding.toPartialHomeomorph_left_inv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nh : Topology.IsOpenEmbedding f\ninst✝ : Nonempty X\nx : X\n⊢ Eq (↑(Topology.IsOpenEmbedding.toPartialHomeomorph f h).symm (f x)) x","decl":"lemma toPartialHomeomorph_left_inv {x : X} : (h.toPartialHomeomorph f).symm (f x) = x := by\n  rw [← congr_fun (h.toPartialHomeomorph_apply f), PartialHomeomorph.left_inv]\n  exact Set.mem_univ _\n\n"}
{"name":"Topology.IsOpenEmbedding.toPartialHomeomorph_right_inv","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nf : X → Y\nh : Topology.IsOpenEmbedding f\ninst✝ : Nonempty X\nx : Y\nhx : Membership.mem (Set.range f) x\n⊢ Eq (f (↑(Topology.IsOpenEmbedding.toPartialHomeomorph f h).symm x)) x","decl":"lemma toPartialHomeomorph_right_inv {x : Y} (hx : x ∈ Set.range f) :\n    f ((h.toPartialHomeomorph f).symm x) = x := by\n  rw [← congr_fun (h.toPartialHomeomorph_apply f), PartialHomeomorph.right_inv]\n  rwa [toPartialHomeomorph_target]\n\n"}
{"name":"TopologicalSpace.Opens.partialHomeomorphSubtypeCoe_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq (↑(s.partialHomeomorphSubtypeCoe hs)) Subtype.val","decl":"@[simp, mfld_simps]\ntheorem partialHomeomorphSubtypeCoe_coe : (s.partialHomeomorphSubtypeCoe hs : s → X) = (↑) :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Opens.partialHomeomorphSubtypeCoe_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq (s.partialHomeomorphSubtypeCoe hs).source Set.univ","decl":"@[simp, mfld_simps]\ntheorem partialHomeomorphSubtypeCoe_source : (s.partialHomeomorphSubtypeCoe hs).source = Set.univ :=\n  rfl\n\n"}
{"name":"TopologicalSpace.Opens.partialHomeomorphSubtypeCoe_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq (s.partialHomeomorphSubtypeCoe hs).target ↑s","decl":"@[simp, mfld_simps]\ntheorem partialHomeomorphSubtypeCoe_target : (s.partialHomeomorphSubtypeCoe hs).target = s := by\n  simp only [partialHomeomorphSubtypeCoe, Subtype.range_coe_subtype, mfld_simps]\n  rfl\n\n"}
{"name":"PartialHomeomorph.transHomeomorph_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf' : Homeomorph Y Z\n⊢ Eq (e.transHomeomorph f').target (Set.preimage (⇑f'.symm) e.target)","decl":"/-- Postcompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transHomeomorph (e : PartialHomeomorph X Y) (f' : Y ≃ₜ Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toPartialEquiv.transEquiv f'.toEquiv\n  open_source := e.open_source\n  open_target := e.open_target.preimage f'.symm.continuous\n  continuousOn_toFun := f'.continuous.comp_continuousOn e.continuousOn\n  continuousOn_invFun := e.symm.continuousOn.comp f'.symm.continuous.continuousOn fun _ => id\n\n"}
{"name":"PartialHomeomorph.transHomeomorph_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf' : Homeomorph Y Z\n⊢ Eq (e.transHomeomorph f').source e.source","decl":"/-- Postcompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transHomeomorph (e : PartialHomeomorph X Y) (f' : Y ≃ₜ Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toPartialEquiv.transEquiv f'.toEquiv\n  open_source := e.open_source\n  open_target := e.open_target.preimage f'.symm.continuous\n  continuousOn_toFun := f'.continuous.comp_continuousOn e.continuousOn\n  continuousOn_invFun := e.symm.continuousOn.comp f'.symm.continuous.continuousOn fun _ => id\n\n"}
{"name":"PartialHomeomorph.transHomeomorph_symm_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf' : Homeomorph Y Z\n⊢ Eq (↑(e.transHomeomorph f').symm) (Function.comp ↑e.symm ⇑f'.symm)","decl":"/-- Postcompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transHomeomorph (e : PartialHomeomorph X Y) (f' : Y ≃ₜ Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toPartialEquiv.transEquiv f'.toEquiv\n  open_source := e.open_source\n  open_target := e.open_target.preimage f'.symm.continuous\n  continuousOn_toFun := f'.continuous.comp_continuousOn e.continuousOn\n  continuousOn_invFun := e.symm.continuousOn.comp f'.symm.continuous.continuousOn fun _ => id\n\n"}
{"name":"PartialHomeomorph.transHomeomorph_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf' : Homeomorph Y Z\n⊢ Eq (↑(e.transHomeomorph f')) (Function.comp ⇑f' ↑e)","decl":"/-- Postcompose a partial homeomorphism with a homeomorphism.\nWe modify the source and target to have better definitional behavior. -/\n@[simps! (config := .asFn)]\ndef transHomeomorph (e : PartialHomeomorph X Y) (f' : Y ≃ₜ Z) : PartialHomeomorph X Z where\n  toPartialEquiv := e.toPartialEquiv.transEquiv f'.toEquiv\n  open_source := e.open_source\n  open_target := e.open_target.preimage f'.symm.continuous\n  continuousOn_toFun := f'.continuous.comp_continuousOn e.continuousOn\n  continuousOn_invFun := e.symm.continuousOn.comp f'.symm.continuous.continuousOn fun _ => id\n\n"}
{"name":"PartialHomeomorph.transHomeomorph_eq_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\ne : PartialHomeomorph X Y\nf' : Homeomorph Y Z\n⊢ Eq (e.transHomeomorph f') (e.trans f'.toPartialHomeomorph)","decl":"theorem transHomeomorph_eq_trans (e : PartialHomeomorph X Y) (f' : Y ≃ₜ Z) :\n    e.transHomeomorph f' = e.trans f'.toPartialHomeomorph :=\n  toPartialEquiv_injective <| PartialEquiv.transEquiv_eq_trans _ _\n\n"}
{"name":"PartialHomeomorph.transHomeomorph_transHomeomorph","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\nZ' : Type u_6\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace Z'\ne : PartialHomeomorph X Y\nf' : Homeomorph Y Z\nf'' : Homeomorph Z Z'\n⊢ Eq ((e.transHomeomorph f').transHomeomorph f'') (e.transHomeomorph (f'.trans f''))","decl":"@[simp, mfld_simps]\ntheorem transHomeomorph_transHomeomorph (e : PartialHomeomorph X Y) (f' : Y ≃ₜ Z) (f'' : Z ≃ₜ Z') :\n    (e.transHomeomorph f').transHomeomorph f'' = e.transHomeomorph (f'.trans f'') := by\n  simp only [transHomeomorph_eq_trans, trans_assoc, Homeomorph.trans_toPartialHomeomorph]\n\n"}
{"name":"PartialHomeomorph.trans_transHomeomorph","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\nZ : Type u_5\nZ' : Type u_6\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : TopologicalSpace Z\ninst✝ : TopologicalSpace Z'\ne : PartialHomeomorph X Y\ne' : PartialHomeomorph Y Z\nf'' : Homeomorph Z Z'\n⊢ Eq ((e.trans e').transHomeomorph f'') (e.trans (e'.transHomeomorph f''))","decl":"@[simp, mfld_simps]\ntheorem trans_transHomeomorph (e : PartialHomeomorph X Y) (e' : PartialHomeomorph Y Z)\n    (f'' : Z ≃ₜ Z') :\n    (e.trans e').transHomeomorph f'' = e.trans (e'.transHomeomorph f'') := by\n  simp only [transHomeomorph_eq_trans, trans_assoc, Homeomorph.trans_toPartialHomeomorph]\n\n"}
{"name":"PartialHomeomorph.subtypeRestr_def","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq (e.subtypeRestr hs) ((s.partialHomeomorphSubtypeCoe hs).trans e)","decl":"theorem subtypeRestr_def : e.subtypeRestr hs = (s.partialHomeomorphSubtypeCoe hs).trans e :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.subtypeRestr_coe","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq (↑(e.subtypeRestr hs)) ((↑s).restrict ↑e)","decl":"@[simp, mfld_simps]\ntheorem subtypeRestr_coe :\n    ((e.subtypeRestr hs : PartialHomeomorph s Y) : s → Y) = Set.restrict ↑s (e : X → Y) :=\n  rfl\n\n"}
{"name":"PartialHomeomorph.subtypeRestr_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\n⊢ Eq (e.subtypeRestr hs).source (Set.preimage Subtype.val e.source)","decl":"@[simp, mfld_simps]\ntheorem subtypeRestr_source : (e.subtypeRestr hs).source = (↑) ⁻¹' e.source := by\n  simp only [subtypeRestr_def, mfld_simps]\n\n"}
{"name":"PartialHomeomorph.map_subtype_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\nx : Subtype fun x => Membership.mem s x\nhxe : Membership.mem e.source ↑x\n⊢ Membership.mem (e.subtypeRestr hs).target (↑e ↑x)","decl":"theorem map_subtype_source {x : s} (hxe : (x : X) ∈ e.source) :\n    e x ∈ (e.subtypeRestr hs).target := by\n  refine ⟨e.map_source hxe, ?_⟩\n  rw [s.partialHomeomorphSubtypeCoe_target, mem_preimage, e.leftInvOn hxe]\n  exact x.prop\n\n"}
{"name":"PartialHomeomorph.subtypeRestr_symm_trans_subtypeRestr","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ns : TopologicalSpace.Opens X\nhs : Nonempty (Subtype fun x => Membership.mem s x)\nf f' : PartialHomeomorph X Y\n⊢ HasEquiv.Equiv ((f.subtypeRestr hs).symm.trans (f'.subtypeRestr hs)) ((f.symm.trans f').restr (Inter.inter f.target (Set.preimage ↑f.symm ↑s)))","decl":"/-- This lemma characterizes the transition functions of an open subset in terms of the transition\nfunctions of the original space. -/\ntheorem subtypeRestr_symm_trans_subtypeRestr (f f' : PartialHomeomorph X Y) :\n    (f.subtypeRestr hs).symm.trans (f'.subtypeRestr hs) ≈\n      (f.symm.trans f').restr (f.target ∩ f.symm ⁻¹' s) := by\n  simp only [subtypeRestr_def, trans_symm_eq_symm_trans_symm]\n  have openness₁ : IsOpen (f.target ∩ f.symm ⁻¹' s) := f.isOpen_inter_preimage_symm s.2\n  rw [← ofSet_trans _ openness₁, ← trans_assoc, ← trans_assoc]\n  refine EqOnSource.trans' ?_ (eqOnSource_refl _)\n  -- f' has been eliminated !!!\n  have set_identity : f.symm.source ∩ (f.target ∩ f.symm ⁻¹' s) = f.symm.source ∩ f.symm ⁻¹' s := by\n    mfld_set_tac\n  have openness₂ : IsOpen (s : Set X) := s.2\n  rw [ofSet_trans', set_identity, ← trans_of_set' _ openness₂, trans_assoc]\n  refine EqOnSource.trans' (eqOnSource_refl _) ?_\n  -- f has been eliminated !!!\n  refine Setoid.trans (symm_trans_self (s.partialHomeomorphSubtypeCoe hs)) ?_\n  simp only [mfld_simps, Setoid.refl]\n\n"}
{"name":"PartialHomeomorph.subtypeRestr_symm_eqOn","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nU : TopologicalSpace.Opens X\nhU : Nonempty (Subtype fun x => Membership.mem U x)\n⊢ Set.EqOn (↑e.symm) (Function.comp Subtype.val ↑(e.subtypeRestr hU).symm) (e.subtypeRestr hU).target","decl":"theorem subtypeRestr_symm_eqOn {U : Opens X} (hU : Nonempty U) :\n    EqOn e.symm (Subtype.val ∘ (e.subtypeRestr hU).symm) (e.subtypeRestr hU).target := by\n  intro y hy\n  rw [eq_comm, eq_symm_apply _ _ hy.1]\n  · change restrict _ e _ = _\n    rw [← subtypeRestr_coe, (e.subtypeRestr hU).right_inv hy]\n  · have := map_target _ hy; rwa [subtypeRestr_source] at this\n\n"}
{"name":"PartialHomeomorph.subtypeRestr_symm_eqOn_of_le","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_1\nY : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ne : PartialHomeomorph X Y\nU V : TopologicalSpace.Opens X\nhU : Nonempty (Subtype fun x => Membership.mem U x)\nhV : Nonempty (Subtype fun x => Membership.mem V x)\nhUV : LE.le U V\n⊢ Set.EqOn (↑(e.subtypeRestr hV).symm) (Function.comp (Set.inclusion hUV) ↑(e.subtypeRestr hU).symm) (e.subtypeRestr hU).target","decl":"theorem subtypeRestr_symm_eqOn_of_le {U V : Opens X} (hU : Nonempty U) (hV : Nonempty V)\n    (hUV : U ≤ V) : EqOn (e.subtypeRestr hV).symm (Set.inclusion hUV ∘ (e.subtypeRestr hU).symm)\n      (e.subtypeRestr hU).target := by\n  set i := Set.inclusion hUV\n  intro y hy\n  dsimp [PartialHomeomorph.subtypeRestr_def] at hy ⊢\n  have hyV : e.symm y ∈ (V.partialHomeomorphSubtypeCoe hV).target := by\n    rw [Opens.partialHomeomorphSubtypeCoe_target] at hy ⊢\n    exact hUV hy.2\n  refine (V.partialHomeomorphSubtypeCoe hV).injOn ?_ trivial ?_\n  · rw [← PartialHomeomorph.symm_target]\n    apply PartialHomeomorph.map_source\n    rw [PartialHomeomorph.symm_source]\n    exact hyV\n  · rw [(V.partialHomeomorphSubtypeCoe hV).right_inv hyV]\n    show _ = U.partialHomeomorphSubtypeCoe hU _\n    rw [(U.partialHomeomorphSubtypeCoe hU).right_inv hy.2]\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_toFun","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq (↑(e.lift_openEmbedding hf)) (Function.extend f ↑e fun x => Classical.arbitrary Z)","decl":"@[simp]\nlemma lift_openEmbedding_toFun (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf) = extend f e (fun _ ↦ (Classical.arbitrary Z)) := rfl\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\nx : X\n⊢ Eq (↑(e.lift_openEmbedding hf) (f x)) (↑e x)","decl":"lemma lift_openEmbedding_apply (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) {x : X} :\n    (lift_openEmbedding e hf) (f x) = e x := by\n  simp_rw [e.lift_openEmbedding_toFun]\n  apply hf.injective.extend_apply\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq (e.lift_openEmbedding hf).source (Set.image f e.source)","decl":"@[simp]\nlemma lift_openEmbedding_source (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf).source = f '' e.source := rfl\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq (e.lift_openEmbedding hf).target e.target","decl":"@[simp]\nlemma lift_openEmbedding_target (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf).target = e.target := rfl\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_symm","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq (↑(e.lift_openEmbedding hf).symm) (Function.comp f ↑e.symm)","decl":"@[simp]\nlemma lift_openEmbedding_symm (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf).symm = f ∘ e.symm := rfl\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_symm_source","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq (e.lift_openEmbedding hf).symm.source e.target","decl":"@[simp]\nlemma lift_openEmbedding_symm_source (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf).symm.source = e.target := rfl\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_symm_target","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq (e.lift_openEmbedding hf).symm.target (Set.image f e.source)","decl":"@[simp]\nlemma lift_openEmbedding_symm_target (e : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf).symm.target = f '' e.source := by\n  rw [PartialHomeomorph.symm_target, e.lift_openEmbedding_source]\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_trans_apply","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne e' : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\nz : Z\n⊢ Eq (↑((e.lift_openEmbedding hf).symm.trans (e'.lift_openEmbedding hf)) z) (↑(e.symm.trans e') z)","decl":"lemma lift_openEmbedding_trans_apply\n    (e e' : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) (z : Z) :\n    (e.lift_openEmbedding hf).symm.trans (e'.lift_openEmbedding hf) z = (e.symm.trans e') z := by\n  simp [hf.injective.extend_apply e']\n\n"}
{"name":"PartialHomeomorph.lift_openEmbedding_trans","module":"Mathlib.Topology.PartialHomeomorph","initialProofState":"X : Type u_7\nX' : Type u_8\nZ : Type u_9\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace X'\ninst✝¹ : TopologicalSpace Z\ninst✝ : Nonempty Z\nf : X → X'\ne e' : PartialHomeomorph X Z\nhf : Topology.IsOpenEmbedding f\n⊢ Eq ((e.lift_openEmbedding hf).symm.trans (e'.lift_openEmbedding hf)) (e.symm.trans e')","decl":"@[simp]\nlemma lift_openEmbedding_trans (e e' : PartialHomeomorph X Z) (hf : IsOpenEmbedding f) :\n    (e.lift_openEmbedding hf).symm.trans (e'.lift_openEmbedding hf) = e.symm.trans e' := by\n  ext z\n  · exact e.lift_openEmbedding_trans_apply e' hf z\n  · simp [hf.injective.extend_apply e]\n  · simp_rw [PartialHomeomorph.trans_source, e.lift_openEmbedding_symm_source, e.symm_source,\n      e.lift_openEmbedding_symm, e'.lift_openEmbedding_source]\n    refine ⟨fun ⟨hx, ⟨y, hy, hxy⟩⟩ ↦ ⟨hx, ?_⟩, fun ⟨hx, hx'⟩ ↦ ⟨hx, mem_image_of_mem f hx'⟩⟩\n    rw [mem_preimage]; rw [comp_apply] at hxy\n    exact (hf.injective hxy) ▸ hy\n\n"}
