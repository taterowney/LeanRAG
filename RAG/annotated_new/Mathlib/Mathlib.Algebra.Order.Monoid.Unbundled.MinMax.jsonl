{"name":"fn_min_mul_fn_max","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : CommSemigroup β\nf : α → β\na b : α\n⊢ Eq (HMul.hMul (f (Min.min a b)) (f (Max.max a b))) (HMul.hMul (f a) (f b))","decl":"@[to_additive]\nlemma fn_min_mul_fn_max (f : α → β) (a b : α) : f (min a b) * f (max a b) = f a * f b := by\n  obtain h | h := le_total a b <;> simp [h, mul_comm]\n\n"}
{"name":"fn_min_add_fn_max","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : AddCommSemigroup β\nf : α → β\na b : α\n⊢ Eq (HAdd.hAdd (f (Min.min a b)) (f (Max.max a b))) (HAdd.hAdd (f a) (f b))","decl":"@[to_additive]\nlemma fn_min_mul_fn_max (f : α → β) (a b : α) : f (min a b) * f (max a b) = f a * f b := by\n  obtain h | h := le_total a b <;> simp [h, mul_comm]\n\n"}
{"name":"fn_max_mul_fn_min","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : CommSemigroup β\nf : α → β\na b : α\n⊢ Eq (HMul.hMul (f (Max.max a b)) (f (Min.min a b))) (HMul.hMul (f a) (f b))","decl":"@[to_additive]\nlemma fn_max_mul_fn_min (f : α → β) (a b : α) : f (max a b) * f (min a b) = f a * f b := by\n  obtain h | h := le_total a b <;> simp [h, mul_comm]\n\n"}
{"name":"fn_max_add_fn_min","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : LinearOrder α\ninst✝ : AddCommSemigroup β\nf : α → β\na b : α\n⊢ Eq (HAdd.hAdd (f (Max.max a b)) (f (Min.min a b))) (HAdd.hAdd (f a) (f b))","decl":"@[to_additive]\nlemma fn_max_mul_fn_min (f : α → β) (a b : α) : f (max a b) * f (min a b) = f a * f b := by\n  obtain h | h := le_total a b <;> simp [h, mul_comm]\n\n"}
{"name":"min_add_max","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : AddCommSemigroup α\na b : α\n⊢ Eq (HAdd.hAdd (Min.min a b) (Max.max a b)) (HAdd.hAdd a b)","decl":"@[to_additive (attr := simp)]\nlemma min_mul_max (a b : α) : min a b * max a b = a * b := fn_min_mul_fn_max id _ _\n\n"}
{"name":"min_mul_max","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : CommSemigroup α\na b : α\n⊢ Eq (HMul.hMul (Min.min a b) (Max.max a b)) (HMul.hMul a b)","decl":"@[to_additive (attr := simp)]\nlemma min_mul_max (a b : α) : min a b * max a b = a * b := fn_min_mul_fn_max id _ _\n\n"}
{"name":"max_add_min","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : AddCommSemigroup α\na b : α\n⊢ Eq (HAdd.hAdd (Max.max a b) (Min.min a b)) (HAdd.hAdd a b)","decl":"@[to_additive (attr := simp)]\nlemma max_mul_min (a b : α) : max a b * min a b = a * b := fn_max_mul_fn_min id _ _\n\n"}
{"name":"max_mul_min","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrder α\ninst✝ : CommSemigroup α\na b : α\n⊢ Eq (HMul.hMul (Max.max a b) (Min.min a b)) (HMul.hMul a b)","decl":"@[to_additive (attr := simp)]\nlemma max_mul_min (a b : α) : max a b * min a b = a * b := fn_max_mul_fn_min id _ _\n\n"}
{"name":"min_add_add_left","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Add α\ninst✝ : AddLeftMono α\na b c : α\n⊢ Eq (Min.min (HAdd.hAdd a b) (HAdd.hAdd a c)) (HAdd.hAdd a (Min.min b c))","decl":"@[to_additive]\ntheorem min_mul_mul_left (a b c : α) : min (a * b) (a * c) = a * min b c :=\n  (monotone_id.const_mul' a).map_min.symm\n\n"}
{"name":"min_mul_mul_left","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Mul α\ninst✝ : MulLeftMono α\na b c : α\n⊢ Eq (Min.min (HMul.hMul a b) (HMul.hMul a c)) (HMul.hMul a (Min.min b c))","decl":"@[to_additive]\ntheorem min_mul_mul_left (a b c : α) : min (a * b) (a * c) = a * min b c :=\n  (monotone_id.const_mul' a).map_min.symm\n\n"}
{"name":"max_add_add_left","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Add α\ninst✝ : AddLeftMono α\na b c : α\n⊢ Eq (Max.max (HAdd.hAdd a b) (HAdd.hAdd a c)) (HAdd.hAdd a (Max.max b c))","decl":"@[to_additive]\ntheorem max_mul_mul_left (a b c : α) : max (a * b) (a * c) = a * max b c :=\n  (monotone_id.const_mul' a).map_max.symm\n\n"}
{"name":"max_mul_mul_left","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Mul α\ninst✝ : MulLeftMono α\na b c : α\n⊢ Eq (Max.max (HMul.hMul a b) (HMul.hMul a c)) (HMul.hMul a (Max.max b c))","decl":"@[to_additive]\ntheorem max_mul_mul_left (a b c : α) : max (a * b) (a * c) = a * max b c :=\n  (monotone_id.const_mul' a).map_max.symm\n\n"}
{"name":"min_mul_mul_right","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Mul α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (Min.min (HMul.hMul a c) (HMul.hMul b c)) (HMul.hMul (Min.min a b) c)","decl":"@[to_additive]\ntheorem min_mul_mul_right (a b c : α) : min (a * c) (b * c) = min a b * c :=\n  (monotone_id.mul_const' c).map_min.symm\n\n"}
{"name":"min_add_add_right","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Add α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (Min.min (HAdd.hAdd a c) (HAdd.hAdd b c)) (HAdd.hAdd (Min.min a b) c)","decl":"@[to_additive]\ntheorem min_mul_mul_right (a b c : α) : min (a * c) (b * c) = min a b * c :=\n  (monotone_id.mul_const' c).map_min.symm\n\n"}
{"name":"max_add_add_right","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Add α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (Max.max (HAdd.hAdd a c) (HAdd.hAdd b c)) (HAdd.hAdd (Max.max a b) c)","decl":"@[to_additive]\ntheorem max_mul_mul_right (a b c : α) : max (a * c) (b * c) = max a b * c :=\n  (monotone_id.mul_const' c).map_max.symm\n\n"}
{"name":"max_mul_mul_right","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : Mul α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (Max.max (HMul.hMul a c) (HMul.hMul b c)) (HMul.hMul (Max.max a b) c)","decl":"@[to_additive]\ntheorem max_mul_mul_right (a b c : α) : max (a * c) (b * c) = max a b * c :=\n  (monotone_id.mul_const' c).map_max.symm\n\n"}
{"name":"lt_or_lt_of_mul_lt_mul","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Mul α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na₁ a₂ b₁ b₂ : α\na✝ : LT.lt (HMul.hMul a₁ b₁) (HMul.hMul a₂ b₂)\n⊢ Or (LT.lt a₁ a₂) (LT.lt b₁ b₂)","decl":"@[to_additive]\ntheorem lt_or_lt_of_mul_lt_mul [MulLeftMono α] [MulRightMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ < a₂ * b₂ → a₁ < a₂ ∨ b₁ < b₂ := by\n  contrapose!\n  exact fun h => mul_le_mul' h.1 h.2\n\n"}
{"name":"lt_or_lt_of_add_lt_add","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Add α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na₁ a₂ b₁ b₂ : α\na✝ : LT.lt (HAdd.hAdd a₁ b₁) (HAdd.hAdd a₂ b₂)\n⊢ Or (LT.lt a₁ a₂) (LT.lt b₁ b₂)","decl":"@[to_additive]\ntheorem lt_or_lt_of_mul_lt_mul [MulLeftMono α] [MulRightMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ < a₂ * b₂ → a₁ < a₂ ∨ b₁ < b₂ := by\n  contrapose!\n  exact fun h => mul_le_mul' h.1 h.2\n\n"}
{"name":"le_or_lt_of_mul_le_mul","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Mul α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightStrictMono α\na₁ a₂ b₁ b₂ : α\na✝ : LE.le (HMul.hMul a₁ b₁) (HMul.hMul a₂ b₂)\n⊢ Or (LE.le a₁ a₂) (LT.lt b₁ b₂)","decl":"@[to_additive]\ntheorem le_or_lt_of_mul_le_mul [MulLeftMono α] [MulRightStrictMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ ≤ a₂ * b₂ → a₁ ≤ a₂ ∨ b₁ < b₂ := by\n  contrapose!\n  exact fun h => mul_lt_mul_of_lt_of_le h.1 h.2\n\n"}
{"name":"le_or_lt_of_add_le_add","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Add α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightStrictMono α\na₁ a₂ b₁ b₂ : α\na✝ : LE.le (HAdd.hAdd a₁ b₁) (HAdd.hAdd a₂ b₂)\n⊢ Or (LE.le a₁ a₂) (LT.lt b₁ b₂)","decl":"@[to_additive]\ntheorem le_or_lt_of_mul_le_mul [MulLeftMono α] [MulRightStrictMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ ≤ a₂ * b₂ → a₁ ≤ a₂ ∨ b₁ < b₂ := by\n  contrapose!\n  exact fun h => mul_lt_mul_of_lt_of_le h.1 h.2\n\n"}
{"name":"lt_or_le_of_mul_le_mul","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Mul α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightMono α\na₁ a₂ b₁ b₂ : α\na✝ : LE.le (HMul.hMul a₁ b₁) (HMul.hMul a₂ b₂)\n⊢ Or (LT.lt a₁ a₂) (LE.le b₁ b₂)","decl":"@[to_additive]\ntheorem lt_or_le_of_mul_le_mul [MulLeftStrictMono α] [MulRightMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ ≤ a₂ * b₂ → a₁ < a₂ ∨ b₁ ≤ b₂ := by\n  contrapose!\n  exact fun h => mul_lt_mul_of_le_of_lt h.1 h.2\n\n"}
{"name":"lt_or_le_of_add_le_add","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Add α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightMono α\na₁ a₂ b₁ b₂ : α\na✝ : LE.le (HAdd.hAdd a₁ b₁) (HAdd.hAdd a₂ b₂)\n⊢ Or (LT.lt a₁ a₂) (LE.le b₁ b₂)","decl":"@[to_additive]\ntheorem lt_or_le_of_mul_le_mul [MulLeftStrictMono α] [MulRightMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ ≤ a₂ * b₂ → a₁ < a₂ ∨ b₁ ≤ b₂ := by\n  contrapose!\n  exact fun h => mul_lt_mul_of_le_of_lt h.1 h.2\n\n"}
{"name":"le_or_le_of_add_le_add","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Add α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na₁ a₂ b₁ b₂ : α\na✝ : LE.le (HAdd.hAdd a₁ b₁) (HAdd.hAdd a₂ b₂)\n⊢ Or (LE.le a₁ a₂) (LE.le b₁ b₂)","decl":"@[to_additive]\ntheorem le_or_le_of_mul_le_mul [MulLeftStrictMono α] [MulRightStrictMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ ≤ a₂ * b₂ → a₁ ≤ a₂ ∨ b₁ ≤ b₂ := by\n  contrapose!\n  exact fun h => mul_lt_mul_of_lt_of_lt h.1 h.2\n\n"}
{"name":"le_or_le_of_mul_le_mul","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : Mul α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na₁ a₂ b₁ b₂ : α\na✝ : LE.le (HMul.hMul a₁ b₁) (HMul.hMul a₂ b₂)\n⊢ Or (LE.le a₁ a₂) (LE.le b₁ b₂)","decl":"@[to_additive]\ntheorem le_or_le_of_mul_le_mul [MulLeftStrictMono α] [MulRightStrictMono α] {a₁ a₂ b₁ b₂ : α} :\n    a₁ * b₁ ≤ a₂ * b₂ → a₁ ≤ a₂ ∨ b₁ ≤ b₂ := by\n  contrapose!\n  exact fun h => mul_lt_mul_of_lt_of_lt h.1 h.2\n\n"}
{"name":"mul_lt_mul_iff_of_le_of_le","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝⁵ : LinearOrder α\ninst✝⁴ : Mul α\ninst✝³ : MulLeftMono α\ninst✝² : MulRightMono α\ninst✝¹ : MulLeftStrictMono α\ninst✝ : MulRightStrictMono α\na₁ a₂ b₁ b₂ : α\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\n⊢ Iff (LT.lt (HMul.hMul a₁ b₁) (HMul.hMul a₂ b₂)) (Or (LT.lt a₁ a₂) (LT.lt b₁ b₂))","decl":"@[to_additive]\ntheorem mul_lt_mul_iff_of_le_of_le [MulLeftMono α]\n    [MulRightMono α] [MulLeftStrictMono α]\n    [MulRightStrictMono α] {a₁ a₂ b₁ b₂ : α} (ha : a₁ ≤ a₂)\n    (hb : b₁ ≤ b₂) : a₁ * b₁ < a₂ * b₂ ↔ a₁ < a₂ ∨ b₁ < b₂ := by\n  refine ⟨lt_or_lt_of_mul_lt_mul, fun h => ?_⟩\n  rcases h with ha' | hb'\n  · exact mul_lt_mul_of_lt_of_le ha' hb\n  · exact mul_lt_mul_of_le_of_lt ha hb'\n\n"}
{"name":"add_lt_add_iff_of_le_of_le","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝⁵ : LinearOrder α\ninst✝⁴ : Add α\ninst✝³ : AddLeftMono α\ninst✝² : AddRightMono α\ninst✝¹ : AddLeftStrictMono α\ninst✝ : AddRightStrictMono α\na₁ a₂ b₁ b₂ : α\nha : LE.le a₁ a₂\nhb : LE.le b₁ b₂\n⊢ Iff (LT.lt (HAdd.hAdd a₁ b₁) (HAdd.hAdd a₂ b₂)) (Or (LT.lt a₁ a₂) (LT.lt b₁ b₂))","decl":"@[to_additive]\ntheorem mul_lt_mul_iff_of_le_of_le [MulLeftMono α]\n    [MulRightMono α] [MulLeftStrictMono α]\n    [MulRightStrictMono α] {a₁ a₂ b₁ b₂ : α} (ha : a₁ ≤ a₂)\n    (hb : b₁ ≤ b₂) : a₁ * b₁ < a₂ * b₂ ↔ a₁ < a₂ ∨ b₁ < b₂ := by\n  refine ⟨lt_or_lt_of_mul_lt_mul, fun h => ?_⟩\n  rcases h with ha' | hb'\n  · exact mul_lt_mul_of_lt_of_le ha' hb\n  · exact mul_lt_mul_of_le_of_lt ha hb'\n\n"}
{"name":"min_le_mul_of_one_le_right","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : MulOneClass α\ninst✝ : MulLeftMono α\na b : α\nhb : LE.le 1 b\n⊢ LE.le (Min.min a b) (HMul.hMul a b)","decl":"@[to_additive]\ntheorem min_le_mul_of_one_le_right [MulLeftMono α] {a b : α} (hb : 1 ≤ b) :\n    min a b ≤ a * b :=\n  min_le_iff.2 <| Or.inl <| le_mul_of_one_le_right' hb\n\n"}
{"name":"min_le_add_of_nonneg_right","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : AddZeroClass α\ninst✝ : AddLeftMono α\na b : α\nhb : LE.le 0 b\n⊢ LE.le (Min.min a b) (HAdd.hAdd a b)","decl":"@[to_additive]\ntheorem min_le_mul_of_one_le_right [MulLeftMono α] {a b : α} (hb : 1 ≤ b) :\n    min a b ≤ a * b :=\n  min_le_iff.2 <| Or.inl <| le_mul_of_one_le_right' hb\n\n"}
{"name":"min_le_mul_of_one_le_left","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : MulOneClass α\ninst✝ : MulRightMono α\na b : α\nha : LE.le 1 a\n⊢ LE.le (Min.min a b) (HMul.hMul a b)","decl":"@[to_additive]\ntheorem min_le_mul_of_one_le_left [MulRightMono α] {a b : α} (ha : 1 ≤ a) :\n    min a b ≤ a * b :=\n  min_le_iff.2 <| Or.inr <| le_mul_of_one_le_left' ha\n\n"}
{"name":"min_le_add_of_nonneg_left","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : AddZeroClass α\ninst✝ : AddRightMono α\na b : α\nha : LE.le 0 a\n⊢ LE.le (Min.min a b) (HAdd.hAdd a b)","decl":"@[to_additive]\ntheorem min_le_mul_of_one_le_left [MulRightMono α] {a b : α} (ha : 1 ≤ a) :\n    min a b ≤ a * b :=\n  min_le_iff.2 <| Or.inr <| le_mul_of_one_le_left' ha\n\n"}
{"name":"max_le_add_of_nonneg","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : AddZeroClass α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b : α\nha : LE.le 0 a\nhb : LE.le 0 b\n⊢ LE.le (Max.max a b) (HAdd.hAdd a b)","decl":"@[to_additive]\ntheorem max_le_mul_of_one_le [MulLeftMono α] [MulRightMono α] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) :\n    max a b ≤ a * b :=\n  max_le_iff.2 ⟨le_mul_of_one_le_right' hb, le_mul_of_one_le_left' ha⟩\n\n"}
{"name":"max_le_mul_of_one_le","module":"Mathlib.Algebra.Order.Monoid.Unbundled.MinMax","initialProofState":"α : Type u_1\ninst✝³ : LinearOrder α\ninst✝² : MulOneClass α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b : α\nha : LE.le 1 a\nhb : LE.le 1 b\n⊢ LE.le (Max.max a b) (HMul.hMul a b)","decl":"@[to_additive]\ntheorem max_le_mul_of_one_le [MulLeftMono α] [MulRightMono α] {a b : α} (ha : 1 ≤ a) (hb : 1 ≤ b) :\n    max a b ≤ a * b :=\n  max_le_iff.2 ⟨le_mul_of_one_le_right' hb, le_mul_of_one_le_left' ha⟩\n\n"}
