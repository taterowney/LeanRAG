{"name":"CategoryTheory.prod.leftUnitor_obj","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : Prod (CategoryTheory.Discrete PUnit.{w + 1}) C\n‚ä¢ Eq ((CategoryTheory.prod.leftUnitor C).obj X) X.2","decl":"/-- The left unitor functor `1 √ó C ‚•§ C` -/\n@[simps]\ndef leftUnitor : Discrete (PUnit : Type w) √ó C ‚•§ C where\n  obj X := X.2\n  map f := f.2\n\n"}
{"name":"CategoryTheory.prod.leftUnitor_map","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX‚úù Y‚úù : Prod (CategoryTheory.Discrete PUnit.{w + 1}) C\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.prod.leftUnitor C).map f) f.2","decl":"/-- The left unitor functor `1 √ó C ‚•§ C` -/\n@[simps]\ndef leftUnitor : Discrete (PUnit : Type w) √ó C ‚•§ C where\n  obj X := X.2\n  map f := f.2\n\n"}
{"name":"CategoryTheory.prod.rightUnitor_map","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX‚úù Y‚úù : Prod C (CategoryTheory.Discrete PUnit.{w + 1})\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.prod.rightUnitor C).map f) f.1","decl":"/-- The right unitor functor `C √ó 1 ‚•§ C` -/\n@[simps]\ndef rightUnitor : C √ó Discrete (PUnit : Type w) ‚•§ C where\n  obj X := X.1\n  map f := f.1\n\n"}
{"name":"CategoryTheory.prod.rightUnitor_obj","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : Prod C (CategoryTheory.Discrete PUnit.{w + 1})\n‚ä¢ Eq ((CategoryTheory.prod.rightUnitor C).obj X) X.1","decl":"/-- The right unitor functor `C √ó 1 ‚•§ C` -/\n@[simps]\ndef rightUnitor : C √ó Discrete (PUnit : Type w) ‚•§ C where\n  obj X := X.1\n  map f := f.1\n\n"}
{"name":"CategoryTheory.prod.leftInverseUnitor_obj","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : C\n‚ä¢ Eq ((CategoryTheory.prod.leftInverseUnitor C).obj X) { fst := { as := PUnit.unit }, snd := X }","decl":"/-- The left inverse unitor `C ‚•§ 1 √ó C` -/\n@[simps]\ndef leftInverseUnitor : C ‚•§ Discrete (PUnit : Type w) √ó C where\n  obj X := ‚ü®‚ü®PUnit.unit‚ü©, X‚ü©\n  map f := ‚ü®ùüô _, f‚ü©\n\n"}
{"name":"CategoryTheory.prod.leftInverseUnitor_map","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX‚úù Y‚úù : C\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.prod.leftInverseUnitor C).map f) { fst := CategoryTheory.CategoryStruct.id ((fun X => { fst := { as := PUnit.unit }, snd := X }) X‚úù).1, snd := f }","decl":"/-- The left inverse unitor `C ‚•§ 1 √ó C` -/\n@[simps]\ndef leftInverseUnitor : C ‚•§ Discrete (PUnit : Type w) √ó C where\n  obj X := ‚ü®‚ü®PUnit.unit‚ü©, X‚ü©\n  map f := ‚ü®ùüô _, f‚ü©\n\n"}
{"name":"CategoryTheory.prod.rightInverseUnitor_map","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX‚úù Y‚úù : C\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.prod.rightInverseUnitor C).map f) { fst := f, snd := CategoryTheory.CategoryStruct.id ((fun X => { fst := X, snd := { as := PUnit.unit } }) X‚úù).2 }","decl":"/-- The right inverse unitor `C ‚•§ C √ó 1` -/\n@[simps]\ndef rightInverseUnitor : C ‚•§ C √ó Discrete (PUnit : Type w) where\n  obj X := ‚ü®X, ‚ü®PUnit.unit‚ü©‚ü©\n  map f := ‚ü®f, ùüô _‚ü©\n\n"}
{"name":"CategoryTheory.prod.rightInverseUnitor_obj","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : C\n‚ä¢ Eq ((CategoryTheory.prod.rightInverseUnitor C).obj X) { fst := X, snd := { as := PUnit.unit } }","decl":"/-- The right inverse unitor `C ‚•§ C √ó 1` -/\n@[simps]\ndef rightInverseUnitor : C ‚•§ C √ó Discrete (PUnit : Type w) where\n  obj X := ‚ü®X, ‚ü®PUnit.unit‚ü©‚ü©\n  map f := ‚ü®f, ùüô _‚ü©\n\n"}
{"name":"CategoryTheory.prod.leftUnitorEquivalence_inverse","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.leftUnitorEquivalence C).inverse (CategoryTheory.prod.leftInverseUnitor C)","decl":"/-- The equivalence of categories expressing left unity of products of categories. -/\n@[simps]\ndef leftUnitorEquivalence : Discrete (PUnit : Type w) √ó C ‚âå C where\n  functor := leftUnitor C\n  inverse := leftInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.leftUnitorEquivalence_unitIso","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.leftUnitorEquivalence C).unitIso (CategoryTheory.Iso.refl (CategoryTheory.Functor.id (Prod (CategoryTheory.Discrete PUnit.{w + 1}) C)))","decl":"/-- The equivalence of categories expressing left unity of products of categories. -/\n@[simps]\ndef leftUnitorEquivalence : Discrete (PUnit : Type w) √ó C ‚âå C where\n  functor := leftUnitor C\n  inverse := leftInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.leftUnitorEquivalence_functor","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.leftUnitorEquivalence C).functor (CategoryTheory.prod.leftUnitor C)","decl":"/-- The equivalence of categories expressing left unity of products of categories. -/\n@[simps]\ndef leftUnitorEquivalence : Discrete (PUnit : Type w) √ó C ‚âå C where\n  functor := leftUnitor C\n  inverse := leftInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.leftUnitorEquivalence_counitIso","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.leftUnitorEquivalence C).counitIso (CategoryTheory.Iso.refl ((CategoryTheory.prod.leftInverseUnitor C).comp (CategoryTheory.prod.leftUnitor C)))","decl":"/-- The equivalence of categories expressing left unity of products of categories. -/\n@[simps]\ndef leftUnitorEquivalence : Discrete (PUnit : Type w) √ó C ‚âå C where\n  functor := leftUnitor C\n  inverse := leftInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.rightUnitorEquivalence_unitIso","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.rightUnitorEquivalence C).unitIso (CategoryTheory.Iso.refl (CategoryTheory.Functor.id (Prod C (CategoryTheory.Discrete PUnit.{w + 1}))))","decl":"/-- The equivalence of categories expressing right unity of products of categories. -/\n@[simps]\ndef rightUnitorEquivalence : C √ó Discrete (PUnit : Type w) ‚âå C where\n  functor := rightUnitor C\n  inverse := rightInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.rightUnitorEquivalence_functor","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.rightUnitorEquivalence C).functor (CategoryTheory.prod.rightUnitor C)","decl":"/-- The equivalence of categories expressing right unity of products of categories. -/\n@[simps]\ndef rightUnitorEquivalence : C √ó Discrete (PUnit : Type w) ‚âå C where\n  functor := rightUnitor C\n  inverse := rightInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.rightUnitorEquivalence_counitIso","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.rightUnitorEquivalence C).counitIso (CategoryTheory.Iso.refl ((CategoryTheory.prod.rightInverseUnitor C).comp (CategoryTheory.prod.rightUnitor C)))","decl":"/-- The equivalence of categories expressing right unity of products of categories. -/\n@[simps]\ndef rightUnitorEquivalence : C √ó Discrete (PUnit : Type w) ‚âå C where\n  functor := rightUnitor C\n  inverse := rightInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.rightUnitorEquivalence_inverse","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ Eq (CategoryTheory.prod.rightUnitorEquivalence C).inverse (CategoryTheory.prod.rightInverseUnitor C)","decl":"/-- The equivalence of categories expressing right unity of products of categories. -/\n@[simps]\ndef rightUnitorEquivalence : C √ó Discrete (PUnit : Type w) ‚âå C where\n  functor := rightUnitor C\n  inverse := rightInverseUnitor C\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.leftUnitor_isEquivalence","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ (CategoryTheory.prod.leftUnitor C).IsEquivalence","decl":"instance leftUnitor_isEquivalence : (leftUnitor C).IsEquivalence :=\n  (leftUnitorEquivalence C).isEquivalence_functor\n\n"}
{"name":"CategoryTheory.prod.rightUnitor_isEquivalence","module":"Mathlib.CategoryTheory.Products.Unitor","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\n‚ä¢ (CategoryTheory.prod.rightUnitor C).IsEquivalence","decl":"instance rightUnitor_isEquivalence : (rightUnitor C).IsEquivalence :=\n  (rightUnitorEquivalence C).isEquivalence_functor\n\n"}
