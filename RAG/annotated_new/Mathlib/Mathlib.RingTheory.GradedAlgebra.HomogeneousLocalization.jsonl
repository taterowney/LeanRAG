{"name":"HomogeneousLocalization.NumDenSameDeg.mk.inj","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ndeg✝ : ι\nnum✝ den✝ : Subtype fun x => Membership.mem (𝒜 deg✝) x\nden_mem✝ : Membership.mem x ↑den✝\ndeg : ι\nnum den : Subtype fun x => Membership.mem (𝒜 deg) x\nden_mem : Membership.mem x ↑den\nx✝ : Eq { deg := deg✝, num := num✝, den := den✝, den_mem := den_mem✝ } { deg := deg, num := num, den := den, den_mem := den_mem }\n⊢ And (Eq deg✝ deg) (And (HEq num✝ num) (HEq den✝ den))","decl":"/-- Let `x` be a submonoid of `A`, then `NumDenSameDeg 𝒜 x` is a structure with a numerator and a\ndenominator with same grading such that the denominator is contained in `x`.\n-/\nstructure NumDenSameDeg where\n  deg : ι\n  (num den : 𝒜 deg)\n  den_mem : (den : A) ∈ x\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.mk.injEq","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ndeg✝ : ι\nnum✝ den✝ : Subtype fun x => Membership.mem (𝒜 deg✝) x\nden_mem✝ : Membership.mem x ↑den✝\ndeg : ι\nnum den : Subtype fun x => Membership.mem (𝒜 deg) x\nden_mem : Membership.mem x ↑den\n⊢ Eq (Eq { deg := deg✝, num := num✝, den := den✝, den_mem := den_mem✝ } { deg := deg, num := num, den := den, den_mem := den_mem }) (And (Eq deg✝ deg) (And (HEq num✝ num) (HEq den✝ den)))","decl":"/-- Let `x` be a submonoid of `A`, then `NumDenSameDeg 𝒜 x` is a structure with a numerator and a\ndenominator with same grading such that the denominator is contained in `x`.\n-/\nstructure NumDenSameDeg where\n  deg : ι\n  (num den : 𝒜 deg)\n  den_mem : (den : A) ∈ x\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_mem","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nself : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Membership.mem x ↑self.den","decl":"/-- Let `x` be a submonoid of `A`, then `NumDenSameDeg 𝒜 x` is a structure with a numerator and a\ndenominator with same grading such that the denominator is contained in `x`.\n-/\nstructure NumDenSameDeg where\n  deg : ι\n  (num den : 𝒜 deg)\n  den_mem : (den : A) ∈ x\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.mk.sizeOf_spec","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : SizeOf ι\ninst✝¹ : SizeOf R\ninst✝ : SizeOf A\ndeg : ι\nnum den : Subtype fun x => Membership.mem (𝒜 deg) x\nden_mem : Membership.mem x ↑den\n⊢ Eq (SizeOf.sizeOf { deg := deg, num := num, den := den, den_mem := den_mem }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf deg)) (SizeOf.sizeOf num)) (SizeOf.sizeOf den)) (SizeOf.sizeOf den_mem))","decl":"/-- Let `x` be a submonoid of `A`, then `NumDenSameDeg 𝒜 x` is a structure with a numerator and a\ndenominator with same grading such that the denominator is contained in `x`.\n-/\nstructure NumDenSameDeg where\n  deg : ι\n  (num den : 𝒜 deg)\n  den_mem : (den : A) ∈ x\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.ext_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Iff (Eq c1 c2) (And (Eq c1.deg c2.deg) (And (Eq ↑c1.num ↑c2.num) (Eq ↑c1.den ↑c2.den)))","decl":"@[ext]\ntheorem ext {c1 c2 : NumDenSameDeg 𝒜 x} (hdeg : c1.deg = c2.deg) (hnum : (c1.num : A) = c2.num)\n    (hden : (c1.den : A) = c2.den) : c1 = c2 := by\n  rcases c1 with ⟨i1, ⟨n1, hn1⟩, ⟨d1, hd1⟩, h1⟩\n  rcases c2 with ⟨i2, ⟨n2, hn2⟩, ⟨d2, hd2⟩, h2⟩\n  dsimp only [Subtype.coe_mk] at *\n  subst hdeg hnum hden\n  congr\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.ext","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nhdeg : Eq c1.deg c2.deg\nhnum : Eq ↑c1.num ↑c2.num\nhden : Eq ↑c1.den ↑c2.den\n⊢ Eq c1 c2","decl":"@[ext]\ntheorem ext {c1 c2 : NumDenSameDeg 𝒜 x} (hdeg : c1.deg = c2.deg) (hnum : (c1.num : A) = c2.num)\n    (hden : (c1.den : A) = c2.den) : c1 = c2 := by\n  rcases c1 with ⟨i1, ⟨n1, hn1⟩, ⟨d1, hd1⟩, h1⟩\n  rcases c2 with ⟨i2, ⟨n2, hn2⟩, ⟨d2, hd2⟩, h2⟩\n  dsimp only [Subtype.coe_mk] at *\n  subst hdeg hnum hden\n  congr\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_neg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (Neg.neg c).deg c.deg","decl":"@[simp]\ntheorem deg_neg (c : NumDenSameDeg 𝒜 x) : (-c).deg = c.deg :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_neg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (↑(Neg.neg c).num) (Neg.neg ↑c.num)","decl":"@[simp]\ntheorem num_neg (c : NumDenSameDeg 𝒜 x) : ((-c).num : A) = -c.num :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_neg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq ↑(Neg.neg c).den ↑c.den","decl":"@[simp]\ntheorem den_neg (c : NumDenSameDeg 𝒜 x) : ((-c).den : A) = c.den :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_smul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nα : Type u_4\ninst✝² : SMul α R\ninst✝¹ : SMul α A\ninst✝ : IsScalarTower α R A\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nm : α\n⊢ Eq (HSMul.hSMul m c).deg c.deg","decl":"@[simp]\ntheorem deg_smul (c : NumDenSameDeg 𝒜 x) (m : α) : (m • c).deg = c.deg :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_smul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nα : Type u_4\ninst✝² : SMul α R\ninst✝¹ : SMul α A\ninst✝ : IsScalarTower α R A\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nm : α\n⊢ Eq (↑(HSMul.hSMul m c).num) (HSMul.hSMul m ↑c.num)","decl":"@[simp]\ntheorem num_smul (c : NumDenSameDeg 𝒜 x) (m : α) : ((m • c).num : A) = m • c.num :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_smul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nα : Type u_4\ninst✝² : SMul α R\ninst✝¹ : SMul α A\ninst✝ : IsScalarTower α R A\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nm : α\n⊢ Eq ↑(HSMul.hSMul m c).den ↑c.den","decl":"@[simp]\ntheorem den_smul (c : NumDenSameDeg 𝒜 x) (m : α) : ((m • c).den : A) = c.den :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_one","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.NumDenSameDeg.deg 1) 0","decl":"@[simp]\ntheorem deg_one : (1 : NumDenSameDeg 𝒜 x).deg = 0 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_one","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (↑(HomogeneousLocalization.NumDenSameDeg.num 1)) 1","decl":"@[simp]\ntheorem num_one : ((1 : NumDenSameDeg 𝒜 x).num : A) = 1 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_one","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (↑(HomogeneousLocalization.NumDenSameDeg.den 1)) 1","decl":"@[simp]\ntheorem den_one : ((1 : NumDenSameDeg 𝒜 x).den : A) = 1 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_zero","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.NumDenSameDeg.deg 0) 0","decl":"@[simp]\ntheorem deg_zero : (0 : NumDenSameDeg 𝒜 x).deg = 0 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_zero","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.NumDenSameDeg.num 0) 0","decl":"@[simp]\ntheorem num_zero : (0 : NumDenSameDeg 𝒜 x).num = 0 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_zero","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (↑(HomogeneousLocalization.NumDenSameDeg.den 0)) 1","decl":"@[simp]\ntheorem den_zero : ((0 : NumDenSameDeg 𝒜 x).den : A) = 1 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (HMul.hMul c1 c2).deg (HAdd.hAdd c1.deg c2.deg)","decl":"@[simp]\ntheorem deg_mul (c1 c2 : NumDenSameDeg 𝒜 x) : (c1 * c2).deg = c1.deg + c2.deg :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (↑(HMul.hMul c1 c2).num) (HMul.hMul ↑c1.num ↑c2.num)","decl":"@[simp]\ntheorem num_mul (c1 c2 : NumDenSameDeg 𝒜 x) : ((c1 * c2).num : A) = c1.num * c2.num :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (↑(HMul.hMul c1 c2).den) (HMul.hMul ↑c1.den ↑c2.den)","decl":"@[simp]\ntheorem den_mul (c1 c2 : NumDenSameDeg 𝒜 x) : ((c1 * c2).den : A) = c1.den * c2.den :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_add","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (HAdd.hAdd c1 c2).deg (HAdd.hAdd c1.deg c2.deg)","decl":"@[simp]\ntheorem deg_add (c1 c2 : NumDenSameDeg 𝒜 x) : (c1 + c2).deg = c1.deg + c2.deg :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_add","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (↑(HAdd.hAdd c1 c2).num) (HAdd.hAdd (HMul.hMul ↑c1.den ↑c2.num) (HMul.hMul ↑c2.den ↑c1.num))","decl":"@[simp]\ntheorem num_add (c1 c2 : NumDenSameDeg 𝒜 x) :\n    ((c1 + c2).num : A) = c1.den * c2.num + c2.den * c1.num :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_add","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc1 c2 : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (↑(HAdd.hAdd c1 c2).den) (HMul.hMul ↑c1.den ↑c2.den)","decl":"@[simp]\ntheorem den_add (c1 c2 : NumDenSameDeg 𝒜 x) : ((c1 + c2).den : A) = c1.den * c2.den :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.deg_pow","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nn : Nat\n⊢ Eq (HPow.hPow c n).deg (HSMul.hSMul n c.deg)","decl":"@[simp]\ntheorem deg_pow (c : NumDenSameDeg 𝒜 x) (n : ℕ) : (c ^ n).deg = n • c.deg :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.num_pow","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nn : Nat\n⊢ Eq (↑(HPow.hPow c n).num) (HPow.hPow (↑c.num) n)","decl":"@[simp]\ntheorem num_pow (c : NumDenSameDeg 𝒜 x) (n : ℕ) : ((c ^ n).num : A) = (c.num : A) ^ n :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.NumDenSameDeg.den_pow","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nc : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nn : Nat\n⊢ Eq (↑(HPow.hPow c n).den) (HPow.hPow (↑c.den) n)","decl":"@[simp]\ntheorem den_pow (c : NumDenSameDeg 𝒜 x) (n : ℕ) : ((c ^ n).den : A) = (c.den : A) ^ n :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.mk_surjective","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\n⊢ Function.Surjective HomogeneousLocalization.mk","decl":"lemma mk_surjective : Function.Surjective (mk (𝒜 := 𝒜) (x := x)) :=\n  Quotient.mk''_surjective\n\n"}
{"name":"HomogeneousLocalization.val_mk","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ni : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (HomogeneousLocalization.mk i).val (Localization.mk ↑i.num ⟨↑i.den, ⋯⟩)","decl":"@[simp]\ntheorem val_mk (i : NumDenSameDeg 𝒜 x) :\n    val (mk i) = Localization.mk (i.num : A) ⟨i.den, i.den_mem⟩ :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.val_injective","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\n⊢ Function.Injective HomogeneousLocalization.val","decl":"@[ext]\ntheorem val_injective : Function.Injective (HomogeneousLocalization.val (𝒜 := 𝒜) (x := x)) :=\n  fun a b => Quotient.recOnSubsingleton₂' a b fun _ _ h => Quotient.sound' h\n\n"}
{"name":"HomogeneousLocalization.val_injective_iff","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\na₁ a₂ : HomogeneousLocalization 𝒜 x\n⊢ Iff (Eq a₁ a₂) (Eq a₁.val a₂.val)","decl":"@[ext]\ntheorem val_injective : Function.Injective (HomogeneousLocalization.val (𝒜 := 𝒜) (x := x)) :=\n  fun a b => Quotient.recOnSubsingleton₂' a b fun _ _ h => Quotient.sound' h\n\n"}
{"name":"HomogeneousLocalization.subsingleton","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nhx : Membership.mem x 0\n⊢ Subsingleton (HomogeneousLocalization 𝒜 x)","decl":"variable (𝒜) {x} in\nlemma subsingleton (hx : 0 ∈ x) : Subsingleton (HomogeneousLocalization 𝒜 x) :=\n  have := IsLocalization.subsingleton (S := at x) hx\n  (HomogeneousLocalization.val_injective (𝒜 := 𝒜) (x := x)).subsingleton\n\n"}
{"name":"HomogeneousLocalization.mk_smul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nα : Type u_4\ninst✝³ : SMul α R\ninst✝² : SMul α A\ninst✝¹ : IsScalarTower α R A\ninst✝ : IsScalarTower α A A\ni : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nm : α\n⊢ Eq (HomogeneousLocalization.mk (HSMul.hSMul m i)) (HSMul.hSMul m (HomogeneousLocalization.mk i))","decl":"@[simp] lemma mk_smul (i : NumDenSameDeg 𝒜 x) (m : α) : mk (m • i) = m • mk i := rfl\n\n"}
{"name":"HomogeneousLocalization.val_smul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nα : Type u_4\ninst✝³ : SMul α R\ninst✝² : SMul α A\ninst✝¹ : IsScalarTower α R A\ninst✝ : IsScalarTower α A A\nn : α\ny : HomogeneousLocalization 𝒜 x\n⊢ Eq (HSMul.hSMul n y).val (HSMul.hSMul n y.val)","decl":"@[simp]\ntheorem val_smul (n : α) : ∀ y : HomogeneousLocalization 𝒜 x, (n • y).val = n • y.val :=\n  Quotient.ind' fun _ ↦ by rw [← mk_smul, val_mk, val_mk, Localization.smul_mk]; rfl\n\n"}
{"name":"HomogeneousLocalization.val_nsmul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nn : Nat\ny : HomogeneousLocalization 𝒜 x\n⊢ Eq (HSMul.hSMul n y).val (HSMul.hSMul n y.val)","decl":"theorem val_nsmul (n : ℕ) (y : HomogeneousLocalization 𝒜 x) : (n • y).val = n • y.val := by\n  rw [val_smul, OreLocalization.nsmul_eq_nsmul]\n\n"}
{"name":"HomogeneousLocalization.val_zsmul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nn : Int\ny : HomogeneousLocalization 𝒜 x\n⊢ Eq (HSMul.hSMul n y).val (HSMul.hSMul n y.val)","decl":"theorem val_zsmul (n : ℤ) (y : HomogeneousLocalization 𝒜 x) : (n • y).val = n • y.val := by\n  rw [val_smul, OreLocalization.zsmul_eq_zsmul]\n\n"}
{"name":"HomogeneousLocalization.mk_neg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ni : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (HomogeneousLocalization.mk (Neg.neg i)) (Neg.neg (HomogeneousLocalization.mk i))","decl":"@[simp] lemma mk_neg (i : NumDenSameDeg 𝒜 x) : mk (-i) = -mk i := rfl\n\n"}
{"name":"HomogeneousLocalization.val_neg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ny : HomogeneousLocalization 𝒜 x\n⊢ Eq (Neg.neg y).val (Neg.neg y.val)","decl":"@[simp]\ntheorem val_neg {x} : ∀ y : HomogeneousLocalization 𝒜 x, (-y).val = -y.val :=\n  Quotient.ind' fun y ↦ by rw [← mk_neg, val_mk, val_mk, Localization.neg_mk]; rfl\n\n"}
{"name":"HomogeneousLocalization.mk_pow","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ni : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nn : Nat\n⊢ Eq (HomogeneousLocalization.mk (HPow.hPow i n)) (HPow.hPow (HomogeneousLocalization.mk i) n)","decl":"@[simp] lemma mk_pow (i : NumDenSameDeg 𝒜 x) (n : ℕ) : mk (i ^ n) = mk i ^ n := rfl\n\n"}
{"name":"HomogeneousLocalization.mk_add","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ni j : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (HomogeneousLocalization.mk (HAdd.hAdd i j)) (HAdd.hAdd (HomogeneousLocalization.mk i) (HomogeneousLocalization.mk j))","decl":"@[simp] lemma mk_add (i j : NumDenSameDeg 𝒜 x) : mk (i + j) = mk i + mk j := rfl\n\n"}
{"name":"HomogeneousLocalization.mk_mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ni j : HomogeneousLocalization.NumDenSameDeg 𝒜 x\n⊢ Eq (HomogeneousLocalization.mk (HMul.hMul i j)) (HMul.hMul (HomogeneousLocalization.mk i) (HomogeneousLocalization.mk j))","decl":"@[simp] lemma mk_mul (i j : NumDenSameDeg 𝒜 x) : mk (i * j) = mk i * mk j := rfl\n\n"}
{"name":"HomogeneousLocalization.mk_one","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.mk 1) 1","decl":"@[simp] lemma mk_one : mk (1 : NumDenSameDeg 𝒜 x) = 1 := rfl\n\n"}
{"name":"HomogeneousLocalization.mk_zero","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.mk 0) 0","decl":"@[simp] lemma mk_zero : mk (0 : NumDenSameDeg 𝒜 x) = 0 := rfl\n\n"}
{"name":"HomogeneousLocalization.zero_eq","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq 0 (Quotient.mk'' 0)","decl":"theorem zero_eq : (0 : HomogeneousLocalization 𝒜 x) = Quotient.mk'' 0 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.one_eq","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq 1 (Quotient.mk'' 1)","decl":"theorem one_eq : (1 : HomogeneousLocalization 𝒜 x) = Quotient.mk'' 1 :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.val_zero","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.val 0) 0","decl":"@[simp]\ntheorem val_zero : (0 : HomogeneousLocalization 𝒜 x).val = 0 :=\n  Localization.mk_zero _\n\n"}
{"name":"HomogeneousLocalization.val_one","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (HomogeneousLocalization.val 1) 1","decl":"@[simp]\ntheorem val_one : (1 : HomogeneousLocalization 𝒜 x).val = 1 :=\n  Localization.mk_one\n\n"}
{"name":"HomogeneousLocalization.val_add","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ny1 y2 : HomogeneousLocalization 𝒜 x\n⊢ Eq (HAdd.hAdd y1 y2).val (HAdd.hAdd y1.val y2.val)","decl":"@[simp]\ntheorem val_add : ∀ y1 y2 : HomogeneousLocalization 𝒜 x, (y1 + y2).val = y1.val + y2.val :=\n  Quotient.ind₂' fun y1 y2 ↦ by rw [← mk_add, val_mk, val_mk, val_mk, Localization.add_mk]; rfl\n\n"}
{"name":"HomogeneousLocalization.val_mul","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ny1 y2 : HomogeneousLocalization 𝒜 x\n⊢ Eq (HMul.hMul y1 y2).val (HMul.hMul y1.val y2.val)","decl":"@[simp]\ntheorem val_mul : ∀ y1 y2 : HomogeneousLocalization 𝒜 x, (y1 * y2).val = y1.val * y2.val :=\n  Quotient.ind₂' fun y1 y2 ↦ by rw [← mk_mul, val_mk, val_mk, val_mk, Localization.mk_mul]; rfl\n\n"}
{"name":"HomogeneousLocalization.val_sub","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ny1 y2 : HomogeneousLocalization 𝒜 x\n⊢ Eq (HSub.hSub y1 y2).val (HSub.hSub y1.val y2.val)","decl":"@[simp]\ntheorem val_sub (y1 y2 : HomogeneousLocalization 𝒜 x) : (y1 - y2).val = y1.val - y2.val := by\n  rw [sub_eq_add_neg, ← val_neg, ← val_add]; rfl\n\n"}
{"name":"HomogeneousLocalization.val_pow","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ny : HomogeneousLocalization 𝒜 x\nn : Nat\n⊢ Eq (HPow.hPow y n).val (HPow.hPow y.val n)","decl":"@[simp]\ntheorem val_pow : ∀ (y : HomogeneousLocalization 𝒜 x) (n : ℕ), (y ^ n).val = y.val ^ n :=\n  Quotient.ind' fun y n ↦ by rw [← mk_pow, val_mk, val_mk, Localization.mk_pow]; rfl\n\n"}
{"name":"HomogeneousLocalization.val_natCast","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nn : Nat\n⊢ Eq (↑n).val ↑n","decl":"@[simp]\ntheorem val_natCast (n : ℕ) : (n : HomogeneousLocalization 𝒜 x).val = n :=\n  show val (Nat.unaryCast n) = _ by induction n <;> simp [Nat.unaryCast, *]\n\n"}
{"name":"HomogeneousLocalization.val_intCast","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nn : Int\n⊢ Eq (↑n).val ↑n","decl":"@[simp]\ntheorem val_intCast (n : ℤ) : (n : HomogeneousLocalization 𝒜 x).val = n :=\n  show val (Int.castDef n) = _ by cases n <;> simp [Int.castDef, *]\n\n"}
{"name":"HomogeneousLocalization.algebraMap_apply","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ny : HomogeneousLocalization 𝒜 x\n⊢ Eq ((algebraMap (HomogeneousLocalization 𝒜 x) (Localization x)) y) y.val","decl":"@[simp] lemma algebraMap_apply (y) :\n    algebraMap (HomogeneousLocalization 𝒜 x) (Localization x) y = y.val := rfl\n\n"}
{"name":"HomogeneousLocalization.mk_eq_zero_of_num","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nf : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nh : Eq f.num 0\n⊢ Eq (HomogeneousLocalization.mk f) 0","decl":"lemma mk_eq_zero_of_num (f : NumDenSameDeg 𝒜 x) (h : f.num = 0) : mk f = 0 := by\n  apply val_injective\n  simp only [val_mk, val_zero, h, ZeroMemClass.coe_zero, Localization.mk_zero]\n\n"}
{"name":"HomogeneousLocalization.mk_eq_zero_of_den","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nf : HomogeneousLocalization.NumDenSameDeg 𝒜 x\nh : Eq f.den 0\n⊢ Eq (HomogeneousLocalization.mk f) 0","decl":"lemma mk_eq_zero_of_den (f : NumDenSameDeg 𝒜 x) (h : f.den = 0) : mk f = 0 := by\n  have := subsingleton 𝒜 (h ▸ f.den_mem)\n  exact Subsingleton.elim _ _\n\n"}
{"name":"HomogeneousLocalization.algebraMap_eq","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\n⊢ Eq (algebraMap (Subtype fun x => Membership.mem (𝒜 0) x) (HomogeneousLocalization 𝒜 x)) (HomogeneousLocalization.fromZeroRingHom 𝒜 x)","decl":"lemma algebraMap_eq : algebraMap (𝒜 0) (HomogeneousLocalization 𝒜 x) = fromZeroRingHom 𝒜 x := rfl\n\n"}
{"name":"HomogeneousLocalization.den_mem","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nf : HomogeneousLocalization 𝒜 x\n⊢ Membership.mem x f.den","decl":"theorem den_mem (f : HomogeneousLocalization 𝒜 x) : f.den ∈ x :=\n  (Quotient.out f).den_mem\n\n"}
{"name":"HomogeneousLocalization.num_mem_deg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nf : HomogeneousLocalization 𝒜 x\n⊢ Membership.mem (𝒜 f.deg) f.num","decl":"theorem num_mem_deg (f : HomogeneousLocalization 𝒜 x) : f.num ∈ 𝒜 f.deg :=\n  (Quotient.out f).num.2\n\n"}
{"name":"HomogeneousLocalization.den_mem_deg","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nf : HomogeneousLocalization 𝒜 x\n⊢ Membership.mem (𝒜 f.deg) f.den","decl":"theorem den_mem_deg (f : HomogeneousLocalization 𝒜 x) : f.den ∈ 𝒜 f.deg :=\n  (Quotient.out f).den.2\n\n"}
{"name":"HomogeneousLocalization.eq_num_div_den","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nf : HomogeneousLocalization 𝒜 x\n⊢ Eq f.val (Localization.mk f.num ⟨f.den, ⋯⟩)","decl":"theorem eq_num_div_den (f : HomogeneousLocalization 𝒜 x) :\n    f.val = Localization.mk f.num ⟨f.den, f.den_mem⟩ :=\n  congr_arg HomogeneousLocalization.val (Quotient.out_eq' f).symm\n\n"}
{"name":"HomogeneousLocalization.den_smul_val","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nf : HomogeneousLocalization 𝒜 x\n⊢ Eq (HSMul.hSMul f.den f.val) ((algebraMap A (Localization x)) f.num)","decl":"theorem den_smul_val (f : HomogeneousLocalization 𝒜 x) :\n    f.den • f.val = algebraMap _ _ f.num := by\n  rw [eq_num_div_den, Localization.mk_eq_mk', IsLocalization.smul_mk']\n  exact IsLocalization.mk'_mul_cancel_left _ ⟨_, _⟩\n\n"}
{"name":"HomogeneousLocalization.ext_iff_val","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝² : CommRing R\ninst✝¹ : CommRing A\ninst✝ : Algebra R A\n𝒜 : ι → Submodule R A\nx : Submonoid A\nf g : HomogeneousLocalization 𝒜 x\n⊢ Iff (Eq f g) (Eq f.val g.val)","decl":"theorem ext_iff_val (f g : HomogeneousLocalization 𝒜 x) : f = g ↔ f.val = g.val :=\n  ⟨congr_arg val, fun e ↦ val_injective x e⟩\n\n"}
{"name":"HomogeneousLocalization.isUnit_iff_isUnit_val","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝³ : AddCommMonoid ι\ninst✝² : DecidableEq ι\ninst✝¹ : GradedAlgebra 𝒜\n𝔭 : Ideal A\ninst✝ : 𝔭.IsPrime\nf : HomogeneousLocalization.AtPrime 𝒜 𝔭\n⊢ Iff (IsUnit (HomogeneousLocalization.val f)) (IsUnit f)","decl":"theorem isUnit_iff_isUnit_val (f : HomogeneousLocalization.AtPrime 𝒜 𝔭) :\n    IsUnit f.val ↔ IsUnit f := by\n  refine ⟨fun h1 ↦ ?_, IsUnit.map (algebraMap _ _)⟩\n  rcases h1 with ⟨⟨a, b, eq0, eq1⟩, rfl : a = f.val⟩\n  obtain ⟨f, rfl⟩ := mk_surjective f\n  obtain ⟨b, s, rfl⟩ := IsLocalization.mk'_surjective 𝔭.primeCompl b\n  rw [val_mk, Localization.mk_eq_mk', ← IsLocalization.mk'_mul, IsLocalization.mk'_eq_iff_eq_mul,\n    one_mul, IsLocalization.eq_iff_exists (M := 𝔭.primeCompl)] at eq0\n  obtain ⟨c, hc : _ = c.1 * (f.den.1 * s.1)⟩ := eq0\n  have : f.num.1 ∉ 𝔭 := by\n    exact fun h ↦ mul_mem c.2 (mul_mem f.den_mem s.2)\n      (hc ▸ Ideal.mul_mem_left _ c.1 (Ideal.mul_mem_right b _ h))\n  refine isUnit_of_mul_eq_one _ (Quotient.mk'' ⟨f.1, f.3, f.2, this⟩) ?_\n  rw [← mk_mul, ext_iff_val, val_mk]\n  simp [mul_comm f.den.1, Localization.mk_eq_monoidOf_mk']\n\n"}
{"name":"HomogeneousLocalization.instNontrivialAtPrime","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝³ : AddCommMonoid ι\ninst✝² : DecidableEq ι\ninst✝¹ : GradedAlgebra 𝒜\n𝔭 : Ideal A\ninst✝ : 𝔭.IsPrime\n⊢ Nontrivial (HomogeneousLocalization.AtPrime 𝒜 𝔭)","decl":"instance : Nontrivial (HomogeneousLocalization.AtPrime 𝒜 𝔭) :=\n  ⟨⟨0, 1, fun r => by simp [ext_iff_val, val_zero, val_one, zero_ne_one] at r⟩⟩\n\n"}
{"name":"HomogeneousLocalization.isLocalRing","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁶ : CommRing R\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝³ : AddCommMonoid ι\ninst✝² : DecidableEq ι\ninst✝¹ : GradedAlgebra 𝒜\n𝔭 : Ideal A\ninst✝ : 𝔭.IsPrime\n⊢ IsLocalRing (HomogeneousLocalization.AtPrime 𝒜 𝔭)","decl":"instance isLocalRing : IsLocalRing (HomogeneousLocalization.AtPrime 𝒜 𝔭) :=\n  IsLocalRing.of_isUnit_or_isUnit_one_sub_self fun a => by\n    simpa only [← isUnit_iff_isUnit_val, val_sub, val_one]\n      using IsLocalRing.isUnit_or_isUnit_one_sub_self _\n\n"}
{"name":"HomogeneousLocalization.Away.eventually_smul_mem","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\nf : A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nm : ι\nhf : Membership.mem (𝒜 m) f\nz : HomogeneousLocalization.Away 𝒜 f\n⊢ Filter.Eventually (fun n => Membership.mem (Set.image ⇑(algebraMap A (Localization (Submonoid.powers f))) ↑(𝒜 (HSMul.hSMul n m))) (HSMul.hSMul (HPow.hPow f n) (HomogeneousLocalization.val z))) Filter.atTop","decl":"theorem Away.eventually_smul_mem {m} (hf : f ∈ 𝒜 m) (z : Away 𝒜 f) :\n    ∀ᶠ n in Filter.atTop, f ^ n • z.val ∈ algebraMap _ _ '' (𝒜 (n • m) : Set A) := by\n  obtain ⟨k, hk : f ^ k = _⟩ := z.den_mem\n  apply Filter.mem_of_superset (Filter.Ici_mem_atTop k)\n  rintro k' (hk' : k ≤ k')\n  simp only [Set.mem_image, SetLike.mem_coe, Set.mem_setOf_eq]\n  by_cases hfk : f ^ k = 0\n  · refine ⟨0, zero_mem _, ?_⟩\n    rw [← tsub_add_cancel_of_le hk', map_zero, pow_add, hfk, mul_zero, zero_smul]\n  rw [← tsub_add_cancel_of_le hk', pow_add, mul_smul, hk, den_smul_val,\n    Algebra.smul_def, ← _root_.map_mul]\n  rw [← smul_eq_mul, add_smul,\n    DirectSum.degree_eq_of_mem_mem 𝒜 (SetLike.pow_mem_graded _ hf) (hk.symm ▸ z.den_mem_deg) hfk]\n  exact ⟨_, SetLike.mul_mem_graded (SetLike.pow_mem_graded _ hf) z.num_mem_deg, rfl⟩\n\n"}
{"name":"HomogeneousLocalization.map_mk","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁸ : CommRing R\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝⁵ : AddCommMonoid ι\ninst✝⁴ : DecidableEq ι\ninst✝³ : GradedAlgebra 𝒜\nB : Type u_4\ninst✝² : CommRing B\ninst✝¹ : Algebra R B\nℬ : ι → Submodule R B\ninst✝ : GradedAlgebra ℬ\nP : Submonoid A\nQ : Submonoid B\ng : RingHom A B\ncomap_le : LE.le P (Submonoid.comap g Q)\nhg : ∀ (i : ι) (a : A), Membership.mem (𝒜 i) a → Membership.mem (ℬ i) (g a)\nx : HomogeneousLocalization.NumDenSameDeg 𝒜 P\n⊢ Eq ((HomogeneousLocalization.map 𝒜 ℬ g comap_le hg) (HomogeneousLocalization.mk x)) (HomogeneousLocalization.mk { deg := x.deg, num := ⟨g ↑x.num, ⋯⟩, den := ⟨g ↑x.den, ⋯⟩, den_mem := ⋯ })","decl":"lemma map_mk (g : A →+* B)\n    (comap_le : P ≤ Q.comap g) (hg : ∀ i, ∀ a ∈ 𝒜 i, g a ∈ ℬ i) (x) :\n    map 𝒜 ℬ g comap_le hg (mk x) =\n    mk ⟨x.1, ⟨_, hg _ _ x.2.2⟩, ⟨_, hg _ _ x.3.2⟩, comap_le x.4⟩ :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.awayMapAux_mk","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nf g x : A\nhx : Eq x (HMul.hMul f g)\nn : ι\na : Subtype fun x => Membership.mem (𝒜 n) x\ni : Nat\nhi : Membership.mem (𝒜 n) (HPow.hPow f i)\n⊢ Eq ((HomogeneousLocalization.awayMapAux 𝒜 ⋯) (HomogeneousLocalization.mk { deg := n, num := a, den := ⟨HPow.hPow f i, hi⟩, den_mem := ⋯ })) (Localization.mk (HMul.hMul (↑a) (HPow.hPow g i)) ⟨HPow.hPow x i, ⋯⟩)","decl":"lemma awayMapAux_mk (n a i hi) :\n    awayMapAux 𝒜 ⟨_, hx⟩ (mk ⟨n, a, ⟨f ^ i, hi⟩, ⟨i, rfl⟩⟩) =\n      Localization.mk (a * g ^ i) ⟨x ^ i, (Submonoid.mem_powers_iff _ _).mpr ⟨i, rfl⟩⟩ := by\n  have : algebraMap A (Localization.Away x) f *\n    (Localization.mk g ⟨f * g, (Submonoid.mem_powers_iff _ _).mpr ⟨1, by simp [hx]⟩⟩) = 1 := by\n    rw [← Algebra.smul_def, Localization.smul_mk]\n    exact Localization.mk_self ⟨f*g, _⟩\n  simp [awayMapAux]\n  rw [Localization.awayLift_mk (hv := this), ← Algebra.smul_def,\n    Localization.mk_pow, Localization.smul_mk]\n  subst hx\n  rfl\n\n"}
{"name":"HomogeneousLocalization.range_awayMapAux_subset","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\n⊢ HasSubset.Subset (Set.range ⇑(HomogeneousLocalization.awayMapAux 𝒜 ⋯)) (Set.range HomogeneousLocalization.val)","decl":"include hg in\nlemma range_awayMapAux_subset :\n    Set.range (awayMapAux 𝒜 (f := f) ⟨_, hx⟩) ⊆ Set.range (val (𝒜 := 𝒜)) := by\n  rintro _ ⟨z, rfl⟩\n  obtain ⟨⟨n, ⟨a, ha⟩, ⟨b, hb'⟩, j, rfl : _ = b⟩, rfl⟩ := mk_surjective z\n  use mk ⟨n+j•e,⟨a*g^j, ?_⟩ ,⟨x^j, ?_⟩, j, rfl⟩\n  · simp [awayMapAux_mk 𝒜 (hx := hx)]\n  · apply SetLike.mul_mem_graded ha\n    exact SetLike.pow_mem_graded _ hg\n  · rw [hx, mul_pow]\n    apply SetLike.mul_mem_graded hb'\n    exact SetLike.pow_mem_graded _ hg\n\n"}
{"name":"HomogeneousLocalization.val_awayMap_eq_aux","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\na : HomogeneousLocalization.Away 𝒜 f\n⊢ Eq (HomogeneousLocalization.val ((HomogeneousLocalization.awayMap 𝒜 hg hx) a)) ((HomogeneousLocalization.awayMapAux 𝒜 ⋯) a)","decl":"lemma val_awayMap_eq_aux (a) : (awayMap 𝒜 hg hx a).val = awayMapAux 𝒜 ⟨_, hx⟩ a := by\n  let e := RingEquiv.ofLeftInverse (f := algebraMap (Away 𝒜 x) (Localization.Away x))\n    (h := (val_injective _).hasLeftInverse.choose_spec)\n  dsimp [awayMap]\n  convert_to (e (e.symm ⟨awayMapAux 𝒜 (f := f) ⟨_, hx⟩ a,\n    range_awayMapAux_subset 𝒜 hg hx ⟨_, rfl⟩⟩)).1 = _\n  rw [e.apply_symm_apply]\n\n"}
{"name":"HomogeneousLocalization.val_awayMap","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\na : HomogeneousLocalization.Away 𝒜 f\n⊢ Eq (HomogeneousLocalization.val ((HomogeneousLocalization.awayMap 𝒜 hg hx) a)) ((Localization.awayLift (algebraMap A (Localization (Submonoid.powers x))) f ⋯) (HomogeneousLocalization.val a))","decl":"lemma val_awayMap (a) : (awayMap 𝒜 hg hx a).val = Localization.awayLift (algebraMap A _) _\n    (isUnit_of_dvd_unit (map_dvd _ ⟨_, hx⟩) (IsLocalization.Away.algebraMap_isUnit x)) a.val := by\n  rw [val_awayMap_eq_aux]\n  rfl\n\n"}
{"name":"HomogeneousLocalization.awayMap_fromZeroRingHom","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\na : Subtype fun x => Membership.mem (𝒜 0) x\n⊢ Eq ((HomogeneousLocalization.awayMap 𝒜 hg hx) ((HomogeneousLocalization.fromZeroRingHom 𝒜 (Submonoid.powers f)) a)) ((HomogeneousLocalization.fromZeroRingHom 𝒜 (Submonoid.powers x)) a)","decl":"lemma awayMap_fromZeroRingHom (a) :\n    awayMap 𝒜 hg hx (fromZeroRingHom 𝒜 _ a) = fromZeroRingHom 𝒜 _ a := by\n  ext\n  simp only [fromZeroRingHom, RingHom.coe_mk, MonoidHom.coe_mk, OneHom.coe_mk,\n    val_awayMap, val_mk, SetLike.GradeZero.coe_one]\n  convert IsLocalization.lift_eq _ _\n\n"}
{"name":"HomogeneousLocalization.val_awayMap_mk","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\nn : ι\na : Subtype fun x => Membership.mem (𝒜 n) x\ni : Nat\nhi : Membership.mem (𝒜 n) (HPow.hPow f i)\n⊢ Eq (HomogeneousLocalization.val ((HomogeneousLocalization.awayMap 𝒜 hg hx) (HomogeneousLocalization.mk { deg := n, num := a, den := ⟨HPow.hPow f i, hi⟩, den_mem := ⋯ }))) (Localization.mk (HMul.hMul (↑a) (HPow.hPow g i)) ⟨HPow.hPow x i, ⋯⟩)","decl":"lemma val_awayMap_mk (n a i hi) : (awayMap 𝒜 hg hx (mk ⟨n, a, ⟨f ^ i, hi⟩, ⟨i, rfl⟩⟩)).val =\n    Localization.mk (a * g ^ i) ⟨x ^ i, (Submonoid.mem_powers_iff _ _).mpr ⟨i, rfl⟩⟩ := by\n  rw [val_awayMap_eq_aux, awayMapAux_mk 𝒜 (hx := hx)]\n\n"}
{"name":"HomogeneousLocalization.awayMapₐ_apply","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\na : HomogeneousLocalization.Away 𝒜 f\n⊢ Eq ((HomogeneousLocalization.awayMapₐ 𝒜 hg hx) a) ((HomogeneousLocalization.awayMap 𝒜 hg hx) a)","decl":"@[simp] lemma awayMapₐ_apply (a) : awayMapₐ 𝒜 hg hx a = awayMap 𝒜 hg hx a := rfl\n\n"}
{"name":"HomogeneousLocalization.Away.val_mk","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nf : A\nd : ι\nn : Nat\nhf : Membership.mem (𝒜 d) f\nx : A\nhx : Membership.mem (𝒜 (HSMul.hSMul n d)) x\n⊢ Eq (HomogeneousLocalization.val (HomogeneousLocalization.Away.mk 𝒜 hf n x hx)) (Localization.mk x ⟨HPow.hPow f n, ⋯⟩)","decl":"@[simp]\nlemma Away.val_mk {d : ι} (n : ℕ) (hf : f ∈ 𝒜 d) (x : A) (hx : x ∈ 𝒜 (n • d)) :\n    (Away.mk 𝒜 hf n x hx).val = Localization.mk x ⟨f ^ n, by use n⟩ :=\n  rfl\n\n"}
{"name":"HomogeneousLocalization.Away.mk_surjective","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\nf : A\nd : ι\nhf : Membership.mem (𝒜 d) f\nx : HomogeneousLocalization.Away 𝒜 f\n⊢ Exists fun n => Exists fun a => Exists fun ha => Eq (HomogeneousLocalization.Away.mk 𝒜 hf n a ha) x","decl":"protected\nlemma Away.mk_surjective {d : ι} (hf : f ∈ 𝒜 d) (x : Away 𝒜 f) :\n    ∃ n a ha, Away.mk 𝒜 hf n a ha = x := by\n  obtain ⟨⟨N, ⟨s, hs⟩, ⟨b, hn⟩, ⟨n, (rfl : _ = b)⟩⟩, rfl⟩ := mk_surjective x\n  by_cases hfn : f ^ n = 0\n  · have := HomogeneousLocalization.subsingleton 𝒜 (x := .powers f) ⟨n, hfn⟩\n    exact ⟨0, 0, zero_mem _, Subsingleton.elim _ _⟩\n  obtain rfl := DirectSum.degree_eq_of_mem_mem 𝒜 hn (SetLike.pow_mem_graded n hf) hfn\n  exact ⟨n, s, hs, by ext; simp⟩\n\n"}
{"name":"HomogeneousLocalization.awayMap_mk","module":"Mathlib.RingTheory.GradedAlgebra.HomogeneousLocalization","initialProofState":"ι : Type u_1\nR : Type u_2\nA : Type u_3\ninst✝⁵ : CommRing R\ninst✝⁴ : CommRing A\ninst✝³ : Algebra R A\n𝒜 : ι → Submodule R A\ninst✝² : AddCommMonoid ι\ninst✝¹ : DecidableEq ι\ninst✝ : GradedAlgebra 𝒜\ne : ι\nf g : A\nhg : Membership.mem (𝒜 e) g\nx : A\nhx : Eq x (HMul.hMul f g)\nd : ι\nn : Nat\nhf : Membership.mem (𝒜 d) f\na : A\nha : Membership.mem (𝒜 (HSMul.hSMul n d)) a\n⊢ Eq ((HomogeneousLocalization.awayMap 𝒜 hg hx) (HomogeneousLocalization.Away.mk 𝒜 hf n a ha)) (HomogeneousLocalization.Away.mk 𝒜 ⋯ n (HMul.hMul a (HPow.hPow g n)) ⋯)","decl":"open SetLike in\n@[simp]\nlemma awayMap_mk {d : ι} (n : ℕ) (hf : f ∈ 𝒜 d) (a : A) (ha : a ∈ 𝒜 (n • d)) :\n    awayMap 𝒜 hg hx (Away.mk 𝒜 hf n a ha) = Away.mk 𝒜 (hx ▸ mul_mem_graded hf hg) n\n      (a * g ^ n) (by rw [smul_add]; exact mul_mem_graded ha (pow_mem_graded n hg)) := by\n  ext\n  exact val_awayMap_mk ..\n\n"}
