{"name":"WType.cardinalMk_eq_sum_lift","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type v\n⊢ Eq (Cardinal.mk (WType β)) (Cardinal.sum fun a => HPow.hPow (Cardinal.mk (WType β)) (Cardinal.lift.{u, v} (Cardinal.mk (β a))))","decl":"theorem cardinalMk_eq_sum_lift : #(WType β) = sum fun a ↦ #(WType β) ^ lift.{u} #(β a) :=\n  (mk_congr <| equivSigma β).trans <| by\n    simp_rw [mk_sigma, mk_arrow]; rw [lift_id'.{v, u}, lift_umax.{v, u}]\n\n"}
{"name":"WType.cardinal_mk_eq_sum'","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type v\n⊢ Eq (Cardinal.mk (WType β)) (Cardinal.sum fun a => HPow.hPow (Cardinal.mk (WType β)) (Cardinal.lift.{u, v} (Cardinal.mk (β a))))","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_eq_sum' := cardinalMk_eq_sum_lift\n\n"}
{"name":"WType.cardinalMk_le_of_le'","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type v\nκ : Cardinal.{max u v}\nhκ : LE.le (Cardinal.sum fun a => HPow.hPow κ (Cardinal.lift.{u, v} (Cardinal.mk (β a)))) κ\n⊢ LE.le (Cardinal.mk (WType β)) κ","decl":"/-- `#(WType β)` is the least cardinal `κ` such that `sum (fun a : α ↦ κ ^ #(β a)) ≤ κ` -/\ntheorem cardinalMk_le_of_le' {κ : Cardinal.{max u v}}\n    (hκ : (sum fun a : α => κ ^ lift.{u} #(β a)) ≤ κ) :\n    #(WType β) ≤ κ := by\n  induction' κ using Cardinal.inductionOn with γ\n  simp_rw [← lift_umax.{v, u}] at hκ\n  nth_rewrite 1 [← lift_id'.{v, u} #γ] at hκ\n  simp_rw [← mk_arrow, ← mk_sigma, le_def] at hκ\n  cases' hκ with hκ\n  exact Cardinal.mk_le_of_injective (elim_injective _ hκ.1 hκ.2)\n\n"}
{"name":"WType.cardinal_mk_le_of_le'","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type v\nκ : Cardinal.{max u v}\nhκ : LE.le (Cardinal.sum fun a => HPow.hPow κ (Cardinal.lift.{u, v} (Cardinal.mk (β a)))) κ\n⊢ LE.le (Cardinal.mk (WType β)) κ","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_le_of_le' := cardinalMk_le_of_le'\n\n"}
{"name":"WType.cardinalMk_le_max_aleph0_of_finite'","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type v\ninst✝ : ∀ (a : α), Finite (β a)\n⊢ LE.le (Cardinal.mk (WType β)) (Max.max (Cardinal.lift.{v, u} (Cardinal.mk α)) Cardinal.aleph0)","decl":"/-- If, for any `a : α`, `β a` is finite, then the cardinality of `WType β`\n  is at most the maximum of the cardinality of `α` and `ℵ₀`  -/\ntheorem cardinalMk_le_max_aleph0_of_finite' [∀ a, Finite (β a)] :\n    #(WType β) ≤ max (lift.{v} #α) ℵ₀ :=\n  (isEmpty_or_nonempty α).elim\n    (by\n      intro h\n      rw [Cardinal.mk_eq_zero (WType β)]\n      exact zero_le _)\n    fun hn =>\n    let m := max (lift.{v} #α) ℵ₀\n    cardinalMk_le_of_le' <|\n      calc\n        (Cardinal.sum fun a => m ^ lift.{u} #(β a)) ≤ lift.{v} #α * ⨆ a, m ^ lift.{u} #(β a) :=\n          Cardinal.sum_le_iSup_lift _\n        _ ≤ m * ⨆ a, m ^ lift.{u} #(β a) := mul_le_mul' (le_max_left _ _) le_rfl\n        _ = m :=\n          mul_eq_left (le_max_right _ _)\n              (ciSup_le' fun _ => pow_le (le_max_right _ _) (lt_aleph0_of_finite _)) <|\n            pos_iff_ne_zero.1 <|\n              Order.succ_le_iff.1\n                (by\n                  rw [succ_zero]\n                  obtain ⟨a⟩ : Nonempty α := hn\n                  refine le_trans ?_ (le_ciSup (bddAbove_range _) a)\n                  rw [← power_zero]\n                  exact\n                    power_le_power_left\n                      (pos_iff_ne_zero.1 (aleph0_pos.trans_le (le_max_right _ _))) (zero_le _))\n\n"}
{"name":"WType.cardinal_mk_le_max_aleph0_of_finite'","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type v\ninst✝ : ∀ (a : α), Finite (β a)\n⊢ LE.le (Cardinal.mk (WType β)) (Max.max (Cardinal.lift.{v, u} (Cardinal.mk α)) Cardinal.aleph0)","decl":"@[deprecated (since := \"2024-11-10\")]\nalias cardinal_mk_le_max_aleph0_of_finite' := cardinalMk_le_max_aleph0_of_finite'\n\n"}
{"name":"WType.cardinalMk_eq_sum","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type u\n⊢ Eq (Cardinal.mk (WType β)) (Cardinal.sum fun a => HPow.hPow (Cardinal.mk (WType β)) (Cardinal.mk (β a)))","decl":"theorem cardinalMk_eq_sum : #(WType β) = sum (fun a : α => #(WType β) ^ #(β a)) :=\n  cardinalMk_eq_sum_lift.trans <| by simp_rw [lift_id]\n\n"}
{"name":"WType.cardinal_mk_eq_sum","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type u\n⊢ Eq (Cardinal.mk (WType β)) (Cardinal.sum fun a => HPow.hPow (Cardinal.mk (WType β)) (Cardinal.mk (β a)))","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_eq_sum := cardinalMk_eq_sum\n\n"}
{"name":"WType.cardinalMk_le_of_le","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type u\nκ : Cardinal.{u}\nhκ : LE.le (Cardinal.sum fun a => HPow.hPow κ (Cardinal.mk (β a))) κ\n⊢ LE.le (Cardinal.mk (WType β)) κ","decl":"/-- `#(WType β)` is the least cardinal `κ` such that `sum (fun a : α ↦ κ ^ #(β a)) ≤ κ` -/\ntheorem cardinalMk_le_of_le {κ : Cardinal.{u}} (hκ : (sum fun a : α => κ ^ #(β a)) ≤ κ) :\n    #(WType β) ≤ κ := cardinalMk_le_of_le' <| by simp_rw [lift_id]; exact hκ\n\n"}
{"name":"WType.cardinal_mk_le_of_le","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type u\nκ : Cardinal.{u}\nhκ : LE.le (Cardinal.sum fun a => HPow.hPow κ (Cardinal.mk (β a))) κ\n⊢ LE.le (Cardinal.mk (WType β)) κ","decl":"@[deprecated (since := \"2024-11-10\")] alias cardinal_mk_le_of_le := cardinalMk_le_of_le\n\n"}
{"name":"WType.cardinalMk_le_max_aleph0_of_finite","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type u\ninst✝ : ∀ (a : α), Finite (β a)\n⊢ LE.le (Cardinal.mk (WType β)) (Max.max (Cardinal.mk α) Cardinal.aleph0)","decl":"/-- If, for any `a : α`, `β a` is finite, then the cardinality of `WType β`\n  is at most the maximum of the cardinality of `α` and `ℵ₀`  -/\ntheorem cardinalMk_le_max_aleph0_of_finite [∀ a, Finite (β a)] : #(WType β) ≤ max #α ℵ₀ :=\n  cardinalMk_le_max_aleph0_of_finite'.trans_eq <| by rw [lift_id]\n\n"}
{"name":"WType.cardinal_mk_le_max_aleph0_of_finite","module":"Mathlib.Data.W.Cardinal","initialProofState":"α : Type u\nβ : α → Type u\ninst✝ : ∀ (a : α), Finite (β a)\n⊢ LE.le (Cardinal.mk (WType β)) (Max.max (Cardinal.mk α) Cardinal.aleph0)","decl":"@[deprecated (since := \"2024-11-10\")]\nalias cardinal_mk_le_max_aleph0_of_finite := cardinalMk_le_max_aleph0_of_finite\n\n"}
