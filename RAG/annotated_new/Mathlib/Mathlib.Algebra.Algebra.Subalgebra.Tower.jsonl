{"name":"Algebra.lmul_algebraMap","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nx : R\n⊢ Eq ((Algebra.lmul R A) ((algebraMap R A) x)) ((Algebra.lsmul R R A) x)","decl":"theorem lmul_algebraMap (x : R) : Algebra.lmul R A (algebraMap R A x) = Algebra.lsmul R R A x :=\n  Eq.symm <| LinearMap.ext <| smul_def x\n\n"}
{"name":"IsScalarTower.subalgebra","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁴ : CommSemiring R\ninst✝³ : CommSemiring S\ninst✝² : Semiring A\ninst✝¹ : Algebra R S\ninst✝ : Algebra S A\nS₀ : Subalgebra R S\n⊢ IsScalarTower (Subtype fun x => Membership.mem S₀ x) S A","decl":"instance subalgebra (S₀ : Subalgebra R S) : IsScalarTower S₀ S A :=\n  of_algebraMap_eq fun _ ↦ rfl\n\n"}
{"name":"IsScalarTower.subalgebra'","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\nS₀ : Subalgebra R S\n⊢ IsScalarTower R (Subtype fun x => Membership.mem S₀ x) A","decl":"instance subalgebra' (S₀ : Subalgebra R S) : IsScalarTower R S₀ A :=\n  @IsScalarTower.of_algebraMap_eq R S₀ A _ _ _ _ _ _ fun _ ↦\n    (IsScalarTower.algebraMap_apply R S A _ :)\n\n"}
{"name":"Subalgebra.coe_restrictScalars","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\nU : Subalgebra S A\n⊢ Eq ↑(Subalgebra.restrictScalars R U) ↑U","decl":"@[simp]\ntheorem coe_restrictScalars {U : Subalgebra S A} : (restrictScalars R U : Set A) = (U : Set A) :=\n  rfl\n\n"}
{"name":"Subalgebra.restrictScalars_top","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\n⊢ Eq (Subalgebra.restrictScalars R Top.top) Top.top","decl":"@[simp]\ntheorem restrictScalars_top : restrictScalars R (⊤ : Subalgebra S A) = ⊤ :=\n  SetLike.coe_injective <| by dsimp -- Porting note: why does `rfl` not work instead of `by dsimp`?\n\n"}
{"name":"Subalgebra.restrictScalars_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\nU : Subalgebra S A\n⊢ Eq (Subalgebra.toSubmodule (Subalgebra.restrictScalars R U)) (Submodule.restrictScalars R (Subalgebra.toSubmodule U))","decl":"@[simp]\ntheorem restrictScalars_toSubmodule {U : Subalgebra S A} :\n    Subalgebra.toSubmodule (U.restrictScalars R) = U.toSubmodule.restrictScalars R :=\n  SetLike.coe_injective rfl\n\n"}
{"name":"Subalgebra.mem_restrictScalars","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\nU : Subalgebra S A\nx : A\n⊢ Iff (Membership.mem (Subalgebra.restrictScalars R U) x) (Membership.mem U x)","decl":"@[simp]\ntheorem mem_restrictScalars {U : Subalgebra S A} {x : A} : x ∈ restrictScalars R U ↔ x ∈ U :=\n  Iff.rfl\n\n"}
{"name":"Subalgebra.restrictScalars_injective","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\n⊢ Function.Injective (Subalgebra.restrictScalars R)","decl":"theorem restrictScalars_injective :\n    Function.Injective (restrictScalars R : Subalgebra S A → Subalgebra R A) := fun U V H ↦\n  ext fun x ↦ by rw [← mem_restrictScalars R, H, mem_restrictScalars]\n\n"}
{"name":"Subalgebra.range_isScalarTower_toAlgHom","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nA : Type w\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Eq (LinearMap.range (IsScalarTower.toAlgHom R (Subtype fun x => Membership.mem S x) A)) (Subalgebra.toSubmodule S)","decl":"@[simp]\nlemma range_isScalarTower_toAlgHom [CommSemiring R] [CommSemiring A]\n    [Algebra R A] (S : Subalgebra R A) :\n    LinearMap.range (IsScalarTower.toAlgHom R S A) = Subalgebra.toSubmodule S := by\n  ext\n  simp only [← Submodule.range_subtype (Subalgebra.toSubmodule S), LinearMap.mem_range,\n    IsScalarTower.coe_toAlgHom', Subalgebra.mem_toSubmodule]\n  rfl\n\n"}
{"name":"IsScalarTower.adjoin_range_toAlgHom","module":"Mathlib.Algebra.Algebra.Subalgebra.Tower","initialProofState":"R : Type u\nS : Type v\nA : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : CommSemiring S\ninst✝⁴ : CommSemiring A\ninst✝³ : Algebra R S\ninst✝² : Algebra S A\ninst✝¹ : Algebra R A\ninst✝ : IsScalarTower R S A\nt : Set A\n⊢ Eq (Subalgebra.restrictScalars R (Algebra.adjoin (Subtype fun x => Membership.mem (IsScalarTower.toAlgHom R S A).range x) t)) (Subalgebra.restrictScalars R (Algebra.adjoin S t))","decl":"theorem adjoin_range_toAlgHom (t : Set A) :\n    (Algebra.adjoin (toAlgHom R S A).range t).restrictScalars R =\n      (Algebra.adjoin S t).restrictScalars R :=\n  Subalgebra.ext fun z ↦\n    show z ∈ Subsemiring.closure (Set.range (algebraMap (toAlgHom R S A).range A) ∪ t : Set A) ↔\n         z ∈ Subsemiring.closure (Set.range (algebraMap S A) ∪ t : Set A) by\n      suffices Set.range (algebraMap (toAlgHom R S A).range A) = Set.range (algebraMap S A) by\n        rw [this]\n      ext z\n      exact ⟨fun ⟨⟨_, y, h1⟩, h2⟩ ↦ ⟨y, h2 ▸ h1⟩, fun ⟨y, hy⟩ ↦ ⟨⟨z, y, hy⟩, rfl⟩⟩\n\n"}
