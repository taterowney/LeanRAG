{"name":"CategoryTheory.LocalizerMorphism.IsRightDerivabilityStructure.guitartExact'","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\nC‚ÇÇ : Type u‚ÇÇ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} C‚ÇÇ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nŒ¶ : CategoryTheory.LocalizerMorphism W‚ÇÅ W‚ÇÇ\nself : Œ¶.IsRightDerivabilityStructure\n‚ä¢ CategoryTheory.TwoSquare.GuitartExact (CategoryTheory.CatCommSq.iso Œ¶.functor W‚ÇÅ.Q W‚ÇÇ.Q (Œ¶.localizedFunctor W‚ÇÅ.Q W‚ÇÇ.Q)).hom","decl":"/-- A localizer morphism `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` is a right derivability\nstructure if it has right resolutions and the 2-square where the left and right functors\nare localizations functors for `W‚ÇÅ` and `W‚ÇÇ` are Guitart exact. -/\nclass IsRightDerivabilityStructure : Prop where\n  hasRightResolutions : Œ¶.HasRightResolutions := by infer_instance\n  guitartExact' : TwoSquare.GuitartExact ((Œ¶.catCommSq W‚ÇÅ.Q W‚ÇÇ.Q).iso).hom\n\n"}
{"name":"CategoryTheory.LocalizerMorphism.IsRightDerivabilityStructure.hasRightResolutions","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\nC‚ÇÇ : Type u‚ÇÇ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\ninst‚úù : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} C‚ÇÇ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nŒ¶ : CategoryTheory.LocalizerMorphism W‚ÇÅ W‚ÇÇ\nself : Œ¶.IsRightDerivabilityStructure\n‚ä¢ Œ¶.HasRightResolutions","decl":"/-- A localizer morphism `Œ¶ : LocalizerMorphism W‚ÇÅ W‚ÇÇ` is a right derivability\nstructure if it has right resolutions and the 2-square where the left and right functors\nare localizations functors for `W‚ÇÅ` and `W‚ÇÇ` are Guitart exact. -/\nclass IsRightDerivabilityStructure : Prop where\n  hasRightResolutions : Œ¶.HasRightResolutions := by infer_instance\n  guitartExact' : TwoSquare.GuitartExact ((Œ¶.catCommSq W‚ÇÅ.Q W‚ÇÇ.Q).iso).hom\n\n"}
{"name":"CategoryTheory.LocalizerMorphism.isRightDerivabilityStructure_iff","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\nC‚ÇÇ : Type u‚ÇÇ\ninst‚úù‚Å∂ : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\ninst‚úù‚Åµ : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} C‚ÇÇ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nŒ¶ : CategoryTheory.LocalizerMorphism W‚ÇÅ W‚ÇÇ\nD‚ÇÅ : Type u_1\nD‚ÇÇ : Type u_2\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_4, u_1} D‚ÇÅ\ninst‚úù¬≥ : CategoryTheory.Category.{u_3, u_2} D‚ÇÇ\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D‚ÇÇ\ninst‚úù¬≤ : L‚ÇÅ.IsLocalization W‚ÇÅ\ninst‚úù¬π : L‚ÇÇ.IsLocalization W‚ÇÇ\nF : CategoryTheory.Functor D‚ÇÅ D‚ÇÇ\ninst‚úù : Œ¶.HasRightResolutions\ne : CategoryTheory.Iso (Œ¶.functor.comp L‚ÇÇ) (L‚ÇÅ.comp F)\n‚ä¢ Iff Œ¶.IsRightDerivabilityStructure (CategoryTheory.TwoSquare.GuitartExact e.hom)","decl":"lemma isRightDerivabilityStructure_iff [Œ¶.HasRightResolutions] (e : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô F) :\n    Œ¶.IsRightDerivabilityStructure ‚Üî TwoSquare.GuitartExact e.hom := by\n  have : Œ¶.IsRightDerivabilityStructure ‚Üî\n      TwoSquare.GuitartExact ((Œ¶.catCommSq W‚ÇÅ.Q W‚ÇÇ.Q).iso).hom :=\n    ‚ü®fun h => h.guitartExact', fun h => ‚ü®inferInstance, h‚ü©‚ü©\n  rw [this]\n  let e' := (Œ¶.catCommSq W‚ÇÅ.Q W‚ÇÇ.Q).iso\n  let E‚ÇÅ := Localization.uniq W‚ÇÅ.Q L‚ÇÅ W‚ÇÅ\n  let E‚ÇÇ := Localization.uniq W‚ÇÇ.Q L‚ÇÇ W‚ÇÇ\n  let e‚ÇÅ : W‚ÇÅ.Q ‚ãô E‚ÇÅ.functor ‚âÖ L‚ÇÅ := compUniqFunctor W‚ÇÅ.Q L‚ÇÅ W‚ÇÅ\n  let e‚ÇÇ : W‚ÇÇ.Q ‚ãô E‚ÇÇ.functor ‚âÖ L‚ÇÇ := compUniqFunctor W‚ÇÇ.Q L‚ÇÇ W‚ÇÇ\n  let e'' : (Œ¶.functor ‚ãô W‚ÇÇ.Q) ‚ãô E‚ÇÇ.functor ‚âÖ (W‚ÇÅ.Q ‚ãô E‚ÇÅ.functor) ‚ãô F :=\n    Functor.associator _ _ _ ‚â™‚â´ isoWhiskerLeft _ e‚ÇÇ ‚â™‚â´ e ‚â™‚â´ isoWhiskerRight e‚ÇÅ.symm F\n  let e''' : Œ¶.localizedFunctor W‚ÇÅ.Q W‚ÇÇ.Q ‚ãô E‚ÇÇ.functor ‚âÖ E‚ÇÅ.functor ‚ãô F :=\n    liftNatIso W‚ÇÅ.Q W‚ÇÅ _ _ _ _ e''\n  have : TwoSquare.vComp' e'.hom e'''.hom e‚ÇÅ e‚ÇÇ = e.hom := by\n    ext X‚ÇÅ\n    rw [TwoSquare.vComp'_app, liftNatIso_hom, liftNatTrans_app]\n    simp only [Functor.comp_obj, Iso.trans_hom, isoWhiskerLeft_hom, isoWhiskerRight_hom,\n      Iso.symm_hom, NatTrans.comp_app, Functor.associator_hom_app, whiskerLeft_app,\n      whiskerRight_app, id_comp, assoc, e'']\n    dsimp [Lifting.iso]\n    rw [F.map_id, id_comp, ‚Üê F.map_comp, Iso.inv_hom_id_app, F.map_id, comp_id,\n      ‚Üê Functor.map_comp_assoc]\n    erw [show (CatCommSq.iso Œ¶.functor W‚ÇÅ.Q W‚ÇÇ.Q (localizedFunctor Œ¶ W‚ÇÅ.Q W‚ÇÇ.Q)).hom =\n      (Lifting.iso W‚ÇÅ.Q W‚ÇÅ _ _).inv by rfl, Iso.inv_hom_id_app]\n    simp\n  rw [‚Üê TwoSquare.GuitartExact.vComp'_iff_of_equivalences e'.hom E‚ÇÅ E‚ÇÇ e''' e‚ÇÅ e‚ÇÇ, this]\n\n"}
{"name":"CategoryTheory.LocalizerMorphism.guitartExact_of_isRightDerivabilityStructure'","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\nC‚ÇÇ : Type u‚ÇÇ\ninst‚úù‚Åµ : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\ninst‚úù‚Å¥ : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} C‚ÇÇ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nŒ¶ : CategoryTheory.LocalizerMorphism W‚ÇÅ W‚ÇÇ\nD‚ÇÅ : Type u_1\nD‚ÇÇ : Type u_2\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_1} D‚ÇÅ\ninst‚úù¬≤ : CategoryTheory.Category.{u_3, u_2} D‚ÇÇ\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D‚ÇÇ\ninst‚úù¬π : L‚ÇÅ.IsLocalization W‚ÇÅ\ninst‚úù : L‚ÇÇ.IsLocalization W‚ÇÇ\nF : CategoryTheory.Functor D‚ÇÅ D‚ÇÇ\nh : Œ¶.IsRightDerivabilityStructure\ne : CategoryTheory.Iso (Œ¶.functor.comp L‚ÇÇ) (L‚ÇÅ.comp F)\n‚ä¢ CategoryTheory.TwoSquare.GuitartExact e.hom","decl":"lemma guitartExact_of_isRightDerivabilityStructure' [h : Œ¶.IsRightDerivabilityStructure]\n    (e : Œ¶.functor ‚ãô L‚ÇÇ ‚âÖ L‚ÇÅ ‚ãô F) : TwoSquare.GuitartExact e.hom := by\n  simpa only [Œ¶.isRightDerivabilityStructure_iff L‚ÇÅ L‚ÇÇ F e] using h\n\n"}
{"name":"CategoryTheory.LocalizerMorphism.guitartExact_of_isRightDerivabilityStructure","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\nC‚ÇÇ : Type u‚ÇÇ\ninst‚úù‚Å∂ : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\ninst‚úù‚Åµ : CategoryTheory.Category.{v‚ÇÇ, u‚ÇÇ} C‚ÇÇ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\nW‚ÇÇ : CategoryTheory.MorphismProperty C‚ÇÇ\nŒ¶ : CategoryTheory.LocalizerMorphism W‚ÇÅ W‚ÇÇ\nD‚ÇÅ : Type u_1\nD‚ÇÇ : Type u_2\ninst‚úù‚Å¥ : CategoryTheory.Category.{u_3, u_1} D‚ÇÅ\ninst‚úù¬≥ : CategoryTheory.Category.{u_4, u_2} D‚ÇÇ\nL‚ÇÅ : CategoryTheory.Functor C‚ÇÅ D‚ÇÅ\nL‚ÇÇ : CategoryTheory.Functor C‚ÇÇ D‚ÇÇ\ninst‚úù¬≤ : L‚ÇÅ.IsLocalization W‚ÇÅ\ninst‚úù¬π : L‚ÇÇ.IsLocalization W‚ÇÇ\ninst‚úù : Œ¶.IsRightDerivabilityStructure\n‚ä¢ CategoryTheory.TwoSquare.GuitartExact (CategoryTheory.CatCommSq.iso Œ¶.functor L‚ÇÅ L‚ÇÇ (Œ¶.localizedFunctor L‚ÇÅ L‚ÇÇ)).hom","decl":"lemma guitartExact_of_isRightDerivabilityStructure [Œ¶.IsRightDerivabilityStructure] :\n    TwoSquare.GuitartExact ((Œ¶.catCommSq L‚ÇÅ L‚ÇÇ).iso).hom :=\n  guitartExact_of_isRightDerivabilityStructure' _ _ _ _ _\n\n"}
{"name":"CategoryTheory.LocalizerMorphism.instHasRightResolutionsIdOfContainsIdentities","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\ninst‚úù : W‚ÇÅ.ContainsIdentities\n‚ä¢ (CategoryTheory.LocalizerMorphism.id W‚ÇÅ).HasRightResolutions","decl":"instance [W‚ÇÅ.ContainsIdentities] : (LocalizerMorphism.id W‚ÇÅ).HasRightResolutions :=\n  fun X‚ÇÇ => ‚ü®RightResolution.mk (ùüô X‚ÇÇ) (W‚ÇÅ.id_mem X‚ÇÇ)‚ü©\n\n"}
{"name":"CategoryTheory.LocalizerMorphism.instIsRightDerivabilityStructureIdOfContainsIdentities","module":"Mathlib.CategoryTheory.Localization.DerivabilityStructure.Basic","initialProofState":"C‚ÇÅ : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} C‚ÇÅ\nW‚ÇÅ : CategoryTheory.MorphismProperty C‚ÇÅ\ninst‚úù : W‚ÇÅ.ContainsIdentities\n‚ä¢ (CategoryTheory.LocalizerMorphism.id W‚ÇÅ).IsRightDerivabilityStructure","decl":"instance [W‚ÇÅ.ContainsIdentities] : (LocalizerMorphism.id W‚ÇÅ).IsRightDerivabilityStructure := by\n  rw [(LocalizerMorphism.id W‚ÇÅ).isRightDerivabilityStructure_iff W‚ÇÅ.Q W‚ÇÅ.Q (ùü≠ W‚ÇÅ.Localization)\n    (Iso.refl _)]\n  dsimp\n  exact TwoSquare.guitartExact_id W‚ÇÅ.Q\n\n"}
