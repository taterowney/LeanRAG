{"name":"Asymptotics.IsEquivalent.isLittleO","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nh : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsLittleO l (HSub.hSub u v) v","decl":"theorem IsEquivalent.isLittleO (h : u ~[l] v) : (u - v) =o[l] v := h\n\n"}
{"name":"Asymptotics.IsEquivalent.isBigO","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nh : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsBigO l u v","decl":"nonrec theorem IsEquivalent.isBigO (h : u ~[l] v) : u =O[l] v :=\n  (IsBigO.congr_of_sub h.isBigO.symm).mp (isBigO_refl _ _)\n\n"}
{"name":"Asymptotics.IsEquivalent.isBigO_symm","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nh : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsBigO l v u","decl":"theorem IsEquivalent.isBigO_symm (h : u ~[l] v) : v =O[l] u := by\n  convert h.isLittleO.right_isBigO_add\n  simp\n\n"}
{"name":"Asymptotics.IsEquivalent.isTheta","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nh : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsTheta l u v","decl":"theorem IsEquivalent.isTheta (h : u ~[l] v) : u =Œò[l] v :=\n  ‚ü®h.isBigO, h.isBigO_symm‚ü©\n\n"}
{"name":"Asymptotics.IsEquivalent.isTheta_symm","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nh : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsTheta l v u","decl":"theorem IsEquivalent.isTheta_symm (h : u ~[l] v) : v =Œò[l] u :=\n  ‚ü®h.isBigO_symm, h.isBigO‚ü©\n\n"}
{"name":"Asymptotics.IsEquivalent.refl","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu : Œ± ‚Üí Œ≤\nl : Filter Œ±\n‚ä¢ Asymptotics.IsEquivalent l u u","decl":"@[refl]\ntheorem IsEquivalent.refl : u ~[l] u := by\n  rw [IsEquivalent, sub_self]\n  exact isLittleO_zero _ _\n\n"}
{"name":"Asymptotics.IsEquivalent.symm","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nh : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsEquivalent l v u","decl":"@[symm]\ntheorem IsEquivalent.symm (h : u ~[l] v) : v ~[l] u :=\n  (h.isLittleO.trans_isBigO h.isBigO_symm).symm\n\n"}
{"name":"Asymptotics.IsEquivalent.trans","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nl : Filter Œ±\nu v w : Œ± ‚Üí Œ≤\nhuv : Asymptotics.IsEquivalent l u v\nhvw : Asymptotics.IsEquivalent l v w\n‚ä¢ Asymptotics.IsEquivalent l u w","decl":"@[trans]\ntheorem IsEquivalent.trans {l : Filter Œ±} {u v w : Œ± ‚Üí Œ≤} (huv : u ~[l] v) (hvw : v ~[l] w) :\n    u ~[l] w :=\n  (huv.isLittleO.trans_isBigO hvw.isBigO).triangle hvw.isLittleO\n\n"}
{"name":"Asymptotics.IsEquivalent.congr_left","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\nhuw : l.EventuallyEq u w\n‚ä¢ Asymptotics.IsEquivalent l w v","decl":"theorem IsEquivalent.congr_left {u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±} (huv : u ~[l] v) (huw : u =·∂†[l] w) :\n    w ~[l] v :=\n  huv.congr' (huw.sub (EventuallyEq.refl _ _)) (EventuallyEq.refl _ _)\n\n"}
{"name":"Asymptotics.IsEquivalent.congr_right","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\nhvw : l.EventuallyEq v w\n‚ä¢ Asymptotics.IsEquivalent l u w","decl":"theorem IsEquivalent.congr_right {u v w : Œ± ‚Üí Œ≤} {l : Filter Œ±} (huv : u ~[l] v) (hvw : v =·∂†[l] w) :\n    u ~[l] w :=\n  (huv.symm.congr_left hvw).symm\n\n"}
{"name":"Asymptotics.isEquivalent_zero_iff_eventually_zero","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu : Œ± ‚Üí Œ≤\nl : Filter Œ±\n‚ä¢ Iff (Asymptotics.IsEquivalent l u 0) (l.EventuallyEq u 0)","decl":"theorem isEquivalent_zero_iff_eventually_zero : u ~[l] 0 ‚Üî u =·∂†[l] 0 := by\n  rw [IsEquivalent, sub_zero]\n  exact isLittleO_zero_right_iff\n\n"}
{"name":"Asymptotics.isEquivalent_zero_iff_isBigO_zero","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu : Œ± ‚Üí Œ≤\nl : Filter Œ±\n‚ä¢ Iff (Asymptotics.IsEquivalent l u 0) (Asymptotics.IsBigO l u 0)","decl":"theorem isEquivalent_zero_iff_isBigO_zero : u ~[l] 0 ‚Üî u =O[l] (0 : Œ± ‚Üí Œ≤) := by\n  refine ‚ü®IsEquivalent.isBigO, fun h ‚Ü¶ ?_‚ü©\n  rw [isEquivalent_zero_iff_eventually_zero, eventuallyEq_iff_exists_mem]\n  exact ‚ü®{ x : Œ± | u x = 0 }, isBigO_zero_right_iff.mp h, fun x hx ‚Ü¶ hx‚ü©\n\n"}
{"name":"Asymptotics.isEquivalent_const_iff_tendsto","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu : Œ± ‚Üí Œ≤\nl : Filter Œ±\nc : Œ≤\nh : Ne c 0\n‚ä¢ Iff (Asymptotics.IsEquivalent l u (Function.const Œ± c)) (Filter.Tendsto u l (nhds c))","decl":"theorem isEquivalent_const_iff_tendsto {c : Œ≤} (h : c ‚â† 0) :\n    u ~[l] const _ c ‚Üî Tendsto u l (ùìù c) := by\n  simp (config := { unfoldPartialApp := true }) only [IsEquivalent, const, isLittleO_const_iff h]\n  constructor <;> intro h\n  ¬∑ have := h.sub (tendsto_const_nhds (x := -c))\n    simp only [Pi.sub_apply, sub_neg_eq_add, sub_add_cancel, zero_add] at this\n    exact this\n  ¬∑ have := h.sub (tendsto_const_nhds (x := c))\n    rwa [sub_self] at this\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_const","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu : Œ± ‚Üí Œ≤\nl : Filter Œ±\nc : Œ≤\nhu : Asymptotics.IsEquivalent l u (Function.const Œ± c)\n‚ä¢ Filter.Tendsto u l (nhds c)","decl":"theorem IsEquivalent.tendsto_const {c : Œ≤} (hu : u ~[l] const _ c) : Tendsto u l (ùìù c) := by\n  rcases em <| c = 0 with rfl | h\n  ¬∑ exact (tendsto_congr' <| isEquivalent_zero_iff_eventually_zero.mp hu).mpr tendsto_const_nhds\n  ¬∑ exact (isEquivalent_const_iff_tendsto h).mp hu\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_nhds","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nc : Œ≤\nhuv : Asymptotics.IsEquivalent l u v\nhu : Filter.Tendsto u l (nhds c)\n‚ä¢ Filter.Tendsto v l (nhds c)","decl":"theorem IsEquivalent.tendsto_nhds {c : Œ≤} (huv : u ~[l] v) (hu : Tendsto u l (ùìù c)) :\n    Tendsto v l (ùìù c) := by\n  by_cases h : c = 0\n  ¬∑ subst c\n    rw [‚Üê isLittleO_one_iff ‚Ñù] at hu ‚ä¢\n    simpa using (huv.symm.isLittleO.trans hu).add hu\n  ¬∑ rw [‚Üê isEquivalent_const_iff_tendsto h] at hu ‚ä¢\n    exact huv.symm.trans hu\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_nhds_iff","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nc : Œ≤\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Iff (Filter.Tendsto u l (nhds c)) (Filter.Tendsto v l (nhds c))","decl":"theorem IsEquivalent.tendsto_nhds_iff {c : Œ≤} (huv : u ~[l] v) :\n    Tendsto u l (ùìù c) ‚Üî Tendsto v l (ùìù c) :=\n  ‚ü®huv.tendsto_nhds, huv.symm.tendsto_nhds‚ü©\n\n"}
{"name":"Asymptotics.IsEquivalent.add_isLittleO","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\nhwv : Asymptotics.IsLittleO l w v\n‚ä¢ Asymptotics.IsEquivalent l (HAdd.hAdd u w) v","decl":"theorem IsEquivalent.add_isLittleO (huv : u ~[l] v) (hwv : w =o[l] v) : u + w ~[l] v := by\n  simpa only [IsEquivalent, add_sub_right_comm] using huv.add hwv\n\n"}
{"name":"Asymptotics.IsEquivalent.sub_isLittleO","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\nhwv : Asymptotics.IsLittleO l w v\n‚ä¢ Asymptotics.IsEquivalent l (HSub.hSub u w) v","decl":"theorem IsEquivalent.sub_isLittleO (huv : u ~[l] v) (hwv : w =o[l] v) : u - w ~[l] v := by\n  simpa only [sub_eq_add_neg] using huv.add_isLittleO hwv.neg_left\n\n"}
{"name":"Asymptotics.IsLittleO.add_isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhu : Asymptotics.IsLittleO l u w\nhv : Asymptotics.IsEquivalent l v w\n‚ä¢ Asymptotics.IsEquivalent l (HAdd.hAdd u v) w","decl":"theorem IsLittleO.add_isEquivalent (hu : u =o[l] w) (hv : v ~[l] w) : u + v ~[l] w :=\n  add_comm v u ‚ñ∏ hv.add_isLittleO hu\n\n"}
{"name":"Asymptotics.IsLittleO.isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsLittleO l (HSub.hSub u v) v\n‚ä¢ Asymptotics.IsEquivalent l u v","decl":"theorem IsLittleO.isEquivalent (huv : (u - v) =o[l] v) : u ~[l] v := huv\n\n"}
{"name":"Asymptotics.IsEquivalent.neg","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsEquivalent l (fun x => Neg.neg (u x)) fun x => Neg.neg (v x)","decl":"theorem IsEquivalent.neg (huv : u ~[l] v) : (fun x ‚Ü¶ -u x) ~[l] fun x ‚Ü¶ -v x := by\n  rw [IsEquivalent]\n  convert huv.isLittleO.neg_left.neg_right\n  simp [neg_add_eq_sub]\n\n"}
{"name":"Asymptotics.isEquivalent_iff_exists_eq_mul","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\n‚ä¢ Iff (Asymptotics.IsEquivalent l u v) (Exists fun œÜ => Exists fun x => l.EventuallyEq u (HMul.hMul œÜ v))","decl":"theorem isEquivalent_iff_exists_eq_mul :\n    u ~[l] v ‚Üî ‚àÉ (œÜ : Œ± ‚Üí Œ≤) (_ : Tendsto œÜ l (ùìù 1)), u =·∂†[l] œÜ * v := by\n  rw [IsEquivalent, isLittleO_iff_exists_eq_mul]\n  constructor <;> rintro ‚ü®œÜ, hœÜ, h‚ü© <;> [refine ‚ü®œÜ + 1, ?_, ?_‚ü©; refine ‚ü®œÜ - 1, ?_, ?_‚ü©]\n  ¬∑ conv in ùìù _ => rw [‚Üê zero_add (1 : Œ≤)]\n    exact hœÜ.add tendsto_const_nhds\n  ¬∑ convert h.add (EventuallyEq.refl l v) <;> simp [add_mul]\n  ¬∑ conv in ùìù _ => rw [‚Üê sub_self (1 : Œ≤)]\n    exact hœÜ.sub tendsto_const_nhds\n  ¬∑ convert h.sub (EventuallyEq.refl l v); simp [sub_mul]\n\n"}
{"name":"Asymptotics.IsEquivalent.exists_eq_mul","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Exists fun œÜ => Exists fun x => l.EventuallyEq u (HMul.hMul œÜ v)","decl":"theorem IsEquivalent.exists_eq_mul (huv : u ~[l] v) :\n    ‚àÉ (œÜ : Œ± ‚Üí Œ≤) (_ : Tendsto œÜ l (ùìù 1)), u =·∂†[l] œÜ * v :=\n  isEquivalent_iff_exists_eq_mul.mp huv\n\n"}
{"name":"Asymptotics.isEquivalent_of_tendsto_one","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhz : Filter.Eventually (fun x => Eq (v x) 0 ‚Üí Eq (u x) 0) l\nhuv : Filter.Tendsto (HDiv.hDiv u v) l (nhds 1)\n‚ä¢ Asymptotics.IsEquivalent l u v","decl":"theorem isEquivalent_of_tendsto_one (hz : ‚àÄ·∂† x in l, v x = 0 ‚Üí u x = 0)\n    (huv : Tendsto (u / v) l (ùìù 1)) : u ~[l] v := by\n  rw [isEquivalent_iff_exists_eq_mul]\n  exact ‚ü®u / v, huv, hz.mono fun x hz' ‚Ü¶ (div_mul_cancel_of_imp hz').symm‚ü©\n\n"}
{"name":"Asymptotics.isEquivalent_of_tendsto_one'","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhz : ‚àÄ (x : Œ±), Eq (v x) 0 ‚Üí Eq (u x) 0\nhuv : Filter.Tendsto (HDiv.hDiv u v) l (nhds 1)\n‚ä¢ Asymptotics.IsEquivalent l u v","decl":"theorem isEquivalent_of_tendsto_one' (hz : ‚àÄ x, v x = 0 ‚Üí u x = 0) (huv : Tendsto (u / v) l (ùìù 1)) :\n    u ~[l] v :=\n  isEquivalent_of_tendsto_one (Eventually.of_forall hz) huv\n\n"}
{"name":"Asymptotics.isEquivalent_iff_tendsto_one","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhz : Filter.Eventually (fun x => Ne (v x) 0) l\n‚ä¢ Iff (Asymptotics.IsEquivalent l u v) (Filter.Tendsto (HDiv.hDiv u v) l (nhds 1))","decl":"theorem isEquivalent_iff_tendsto_one (hz : ‚àÄ·∂† x in l, v x ‚â† 0) :\n    u ~[l] v ‚Üî Tendsto (u / v) l (ùìù 1) := by\n  constructor\n  ¬∑ intro hequiv\n    have := hequiv.isLittleO.tendsto_div_nhds_zero\n    simp only [Pi.sub_apply, sub_div] at this\n    have key : Tendsto (fun x ‚Ü¶ v x / v x) l (ùìù 1) :=\n      (tendsto_congr' <| hz.mono fun x hnz ‚Ü¶ @div_self _ _ (v x) hnz).mpr tendsto_const_nhds\n    convert this.add key\n    ¬∑ simp\n    ¬∑ norm_num\n  ¬∑ exact isEquivalent_of_tendsto_one (hz.mono fun x hnvz hz ‚Ü¶ (hnvz hz).elim)\n\n"}
{"name":"Asymptotics.IsEquivalent.smul","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nE : Type u_2\nùïú : Type u_3\ninst‚úù¬≤ : NormedField ùïú\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\na b : Œ± ‚Üí ùïú\nu v : Œ± ‚Üí E\nl : Filter Œ±\nhab : Asymptotics.IsEquivalent l a b\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsEquivalent l (fun x => HSMul.hSMul (a x) (u x)) fun x => HSMul.hSMul (b x) (v x)","decl":"theorem IsEquivalent.smul {Œ± E ùïú : Type*} [NormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E]\n    {a b : Œ± ‚Üí ùïú} {u v : Œ± ‚Üí E} {l : Filter Œ±} (hab : a ~[l] b) (huv : u ~[l] v) :\n    (fun x ‚Ü¶ a x ‚Ä¢ u x) ~[l] fun x ‚Ü¶ b x ‚Ä¢ v x := by\n  rcases hab.exists_eq_mul with ‚ü®œÜ, hœÜ, habœÜ‚ü©\n  have : ((fun x ‚Ü¶ a x ‚Ä¢ u x) - (fun x ‚Ü¶ b x ‚Ä¢ v x)) =·∂†[l] fun x ‚Ü¶ b x ‚Ä¢ (œÜ x ‚Ä¢ u x - v x) := by\n    -- Porting note: `convert` has become too strong, so we need to specify `using 1`.\n    convert (habœÜ.comp‚ÇÇ (¬∑ ‚Ä¢ ¬∑) <| EventuallyEq.refl _ u).sub\n      (EventuallyEq.refl _ fun x ‚Ü¶ b x ‚Ä¢ v x) using 1\n    ext\n    rw [Pi.mul_apply, mul_comm, mul_smul, ‚Üê smul_sub]\n  refine (isLittleO_congr this.symm <| EventuallyEq.rfl).mp ((isBigO_refl b l).smul_isLittleO ?_)\n  rcases huv.isBigO.exists_pos with ‚ü®C, hC, hCuv‚ü©\n  rw [IsEquivalent] at *\n  rw [isLittleO_iff] at *\n  rw [IsBigOWith] at hCuv\n  simp only [Metric.tendsto_nhds, dist_eq_norm] at hœÜ\n  intro c hc\n  specialize hœÜ (c / 2 / C) (div_pos (div_pos hc zero_lt_two) hC)\n  specialize huv (div_pos hc zero_lt_two)\n  refine hœÜ.mp (huv.mp <| hCuv.mono fun x hCuvx huvx hœÜx ‚Ü¶ ?_)\n  have key :=\n    calc\n      ‚ÄñœÜ x - 1‚Äñ * ‚Äñu x‚Äñ ‚â§ c / 2 / C * ‚Äñu x‚Äñ := by gcongr\n      _ ‚â§ c / 2 / C * (C * ‚Äñv x‚Äñ) := by gcongr\n      _ = c / 2 * ‚Äñv x‚Äñ := by\n        field_simp [hC.ne.symm]\n        ring\n  calc\n    ‚Äñ((fun x : Œ± ‚Ü¶ œÜ x ‚Ä¢ u x) - v) x‚Äñ = ‚Äñ(œÜ x - 1) ‚Ä¢ u x + (u x - v x)‚Äñ := by\n      simp [sub_smul, sub_add]\n    _ ‚â§ ‚Äñ(œÜ x - 1) ‚Ä¢ u x‚Äñ + ‚Äñu x - v x‚Äñ := norm_add_le _ _\n    _ = ‚ÄñœÜ x - 1‚Äñ * ‚Äñu x‚Äñ + ‚Äñu x - v x‚Äñ := by rw [norm_smul]\n    _ ‚â§ c / 2 * ‚Äñv x‚Äñ + ‚Äñu x - v x‚Äñ := by gcongr\n    _ ‚â§ c / 2 * ‚Äñv x‚Äñ + c / 2 * ‚Äñv x‚Äñ := by gcongr; exact huvx\n    _ = c * ‚Äñv x‚Äñ := by ring\n\n"}
{"name":"Asymptotics.IsEquivalent.mul","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_3\ninst‚úù : NormedField Œ≤\nt u v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhtu : Asymptotics.IsEquivalent l t u\nhvw : Asymptotics.IsEquivalent l v w\n‚ä¢ Asymptotics.IsEquivalent l (HMul.hMul t v) (HMul.hMul u w)","decl":"protected theorem IsEquivalent.mul (htu : t ~[l] u) (hvw : v ~[l] w) : t * v ~[l] u * w :=\n  htu.smul hvw\n\n"}
{"name":"Asymptotics.IsEquivalent.listProd","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒπ : Type u_2\nŒ≤ : Type u_3\ninst‚úù : NormedField Œ≤\nl : Filter Œ±\nL : List Œπ\nf g : Œπ ‚Üí Œ± ‚Üí Œ≤\nh : ‚àÄ (i : Œπ), Membership.mem L i ‚Üí Asymptotics.IsEquivalent l (f i) (g i)\n‚ä¢ Asymptotics.IsEquivalent l (fun x => (List.map (fun x_1 => f x_1 x) L).prod) fun x => (List.map (fun x_1 => g x_1 x) L).prod","decl":"theorem IsEquivalent.listProd {L : List Œπ} {f g : Œπ ‚Üí Œ± ‚Üí Œ≤} (h : ‚àÄ i ‚àà L, f i ~[l] g i) :\n    (fun x ‚Ü¶ (L.map (f ¬∑ x)).prod) ~[l] (fun x ‚Ü¶ (L.map (g ¬∑ x)).prod) := by\n  induction L with\n  | nil => simp [IsEquivalent.refl]\n  | cons i L ihL =>\n    simp only [List.forall_mem_cons, List.map_cons, List.prod_cons] at h ‚ä¢\n    exact h.1.mul (ihL h.2)\n\n"}
{"name":"Asymptotics.IsEquivalent.multisetProd","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒπ : Type u_2\nŒ≤ : Type u_3\ninst‚úù : NormedField Œ≤\nl : Filter Œ±\ns : Multiset Œπ\nf g : Œπ ‚Üí Œ± ‚Üí Œ≤\nh : ‚àÄ (i : Œπ), Membership.mem s i ‚Üí Asymptotics.IsEquivalent l (f i) (g i)\n‚ä¢ Asymptotics.IsEquivalent l (fun x => (Multiset.map (fun x_1 => f x_1 x) s).prod) fun x => (Multiset.map (fun x_1 => g x_1 x) s).prod","decl":"theorem IsEquivalent.multisetProd {s : Multiset Œπ} {f g : Œπ ‚Üí Œ± ‚Üí Œ≤} (h : ‚àÄ i ‚àà s, f i ~[l] g i) :\n    (fun x ‚Ü¶ (s.map (f ¬∑ x)).prod) ~[l] (fun x ‚Ü¶ (s.map (g ¬∑ x)).prod) := by\n  obtain ‚ü®l, rfl‚ü© : ‚àÉ l : List Œπ, ‚Üël = s := Quotient.mk_surjective s\n  exact listProd h\n\n"}
{"name":"Asymptotics.IsEquivalent.finsetProd","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒπ : Type u_2\nŒ≤ : Type u_3\ninst‚úù : NormedField Œ≤\nl : Filter Œ±\ns : Finset Œπ\nf g : Œπ ‚Üí Œ± ‚Üí Œ≤\nh : ‚àÄ (i : Œπ), Membership.mem s i ‚Üí Asymptotics.IsEquivalent l (f i) (g i)\n‚ä¢ Asymptotics.IsEquivalent l (fun x => s.prod fun i => f i x) fun x => s.prod fun i => g i x","decl":"theorem IsEquivalent.finsetProd {s : Finset Œπ} {f g : Œπ ‚Üí Œ± ‚Üí Œ≤} (h : ‚àÄ i ‚àà s, f i ~[l] g i) :\n    (‚àè i ‚àà s, f i ¬∑) ~[l] (‚àè i ‚àà s, g i ¬∑) :=\n  multisetProd h\n\n"}
{"name":"Asymptotics.IsEquivalent.inv","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_3\ninst‚úù : NormedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Asymptotics.IsEquivalent l (fun x => Inv.inv (u x)) fun x => Inv.inv (v x)","decl":"protected theorem IsEquivalent.inv (huv : u ~[l] v) : (fun x ‚Ü¶ (u x)‚Åª¬π) ~[l] fun x ‚Ü¶ (v x)‚Åª¬π := by\n  rw [isEquivalent_iff_exists_eq_mul] at *\n  rcases huv with ‚ü®œÜ, hœÜ, h‚ü©\n  rw [‚Üê inv_one]\n  refine ‚ü®fun x ‚Ü¶ (œÜ x)‚Åª¬π, Tendsto.inv‚ÇÄ hœÜ (by norm_num), ?_‚ü©\n  convert h.inv\n  simp [mul_comm]\n\n"}
{"name":"Asymptotics.IsEquivalent.div","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_3\ninst‚úù : NormedField Œ≤\nt u v w : Œ± ‚Üí Œ≤\nl : Filter Œ±\nhtu : Asymptotics.IsEquivalent l t u\nhvw : Asymptotics.IsEquivalent l v w\n‚ä¢ Asymptotics.IsEquivalent l (fun x => HDiv.hDiv (t x) (v x)) fun x => HDiv.hDiv (u x) (w x)","decl":"protected theorem IsEquivalent.div (htu : t ~[l] u) (hvw : v ~[l] w) :\n    (fun x ‚Ü¶ t x / v x) ~[l] fun x ‚Ü¶ u x / w x := by\n  simpa only [div_eq_mul_inv] using htu.mul hvw.inv\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_atTop","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù¬π : NormedLinearOrderedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\ninst‚úù : OrderTopology Œ≤\nhuv : Asymptotics.IsEquivalent l u v\nhu : Filter.Tendsto u l Filter.atTop\n‚ä¢ Filter.Tendsto v l Filter.atTop","decl":"theorem IsEquivalent.tendsto_atTop [OrderTopology Œ≤] (huv : u ~[l] v) (hu : Tendsto u l atTop) :\n    Tendsto v l atTop :=\n  let ‚ü®œÜ, hœÜ, h‚ü© := huv.symm.exists_eq_mul\n  Tendsto.congr' h.symm (mul_comm u œÜ ‚ñ∏ hu.atTop_mul zero_lt_one hœÜ)\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_atTop_iff","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù¬π : NormedLinearOrderedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\ninst‚úù : OrderTopology Œ≤\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Iff (Filter.Tendsto u l Filter.atTop) (Filter.Tendsto v l Filter.atTop)","decl":"theorem IsEquivalent.tendsto_atTop_iff [OrderTopology Œ≤] (huv : u ~[l] v) :\n    Tendsto u l atTop ‚Üî Tendsto v l atTop :=\n  ‚ü®huv.tendsto_atTop, huv.symm.tendsto_atTop‚ü©\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_atBot","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù¬π : NormedLinearOrderedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\ninst‚úù : OrderTopology Œ≤\nhuv : Asymptotics.IsEquivalent l u v\nhu : Filter.Tendsto u l Filter.atBot\n‚ä¢ Filter.Tendsto v l Filter.atBot","decl":"theorem IsEquivalent.tendsto_atBot [OrderTopology Œ≤] (huv : u ~[l] v) (hu : Tendsto u l atBot) :\n    Tendsto v l atBot := by\n  convert tendsto_neg_atTop_atBot.comp (huv.neg.tendsto_atTop <| tendsto_neg_atBot_atTop.comp hu)\n  ext\n  simp\n\n"}
{"name":"Asymptotics.IsEquivalent.tendsto_atBot_iff","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù¬π : NormedLinearOrderedField Œ≤\nu v : Œ± ‚Üí Œ≤\nl : Filter Œ±\ninst‚úù : OrderTopology Œ≤\nhuv : Asymptotics.IsEquivalent l u v\n‚ä¢ Iff (Filter.Tendsto u l Filter.atBot) (Filter.Tendsto v l Filter.atBot)","decl":"theorem IsEquivalent.tendsto_atBot_iff [OrderTopology Œ≤] (huv : u ~[l] v) :\n    Tendsto u l atBot ‚Üî Tendsto v l atBot :=\n  ‚ü®huv.tendsto_atBot, huv.symm.tendsto_atBot‚ü©\n\n"}
{"name":"Filter.EventuallyEq.isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nl : Filter Œ±\nu v : Œ± ‚Üí Œ≤\nh : l.EventuallyEq u v\n‚ä¢ Asymptotics.IsEquivalent l u v","decl":"theorem Filter.EventuallyEq.isEquivalent {u v : Œ± ‚Üí Œ≤} (h : u =·∂†[l] v) : u ~[l] v :=\n  IsEquivalent.congr_right (isLittleO_refl_left _ _) h\n\n"}
{"name":"Filter.EventuallyEq.trans_isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nl : Filter Œ±\nf g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤\nh : l.EventuallyEq f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsEquivalent l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsEquivalent l f g‚ÇÇ","decl":"@[trans]\ntheorem Filter.EventuallyEq.trans_isEquivalent {f g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =·∂†[l] g‚ÇÅ)\n    (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) : f ~[l] g‚ÇÇ :=\n  h.isEquivalent.trans h‚ÇÇ\n\n"}
{"name":"Asymptotics.IsEquivalent.trans_eventuallyEq","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : NormedAddCommGroup Œ≤\nl : Filter Œ±\nf g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤\nh : Asymptotics.IsEquivalent l f g‚ÇÅ\nh‚ÇÇ : l.EventuallyEq g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsEquivalent l f g‚ÇÇ","decl":"@[trans]\ntheorem IsEquivalent.trans_eventuallyEq {f g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f ~[l] g‚ÇÅ)\n    (h‚ÇÇ : g‚ÇÅ =·∂†[l] g‚ÇÇ) : f ~[l] g‚ÇÇ :=\n  h.trans h‚ÇÇ.isEquivalent\n\n"}
{"name":"Asymptotics.IsEquivalent.trans_isBigO","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nŒ≤‚ÇÇ : Type u_3\ninst‚úù¬π : NormedAddCommGroup Œ≤\ninst‚úù : Norm Œ≤‚ÇÇ\nl : Filter Œ±\nf g‚ÇÅ : Œ± ‚Üí Œ≤\ng‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ\nh : Asymptotics.IsEquivalent l f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsBigO l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsBigO l f g‚ÇÇ","decl":"@[trans]\ntheorem IsEquivalent.trans_isBigO {f g‚ÇÅ : Œ± ‚Üí Œ≤} {g‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ} (h : f ~[l] g‚ÇÅ) (h‚ÇÇ : g‚ÇÅ =O[l] g‚ÇÇ) :\n    f =O[l] g‚ÇÇ :=\n  IsBigO.trans h.isBigO h‚ÇÇ\n\n"}
{"name":"Asymptotics.IsBigO.trans_isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nŒ≤‚ÇÇ : Type u_3\ninst‚úù¬π : NormedAddCommGroup Œ≤\ninst‚úù : Norm Œ≤‚ÇÇ\nl : Filter Œ±\nf : Œ± ‚Üí Œ≤‚ÇÇ\ng‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤\nh : Asymptotics.IsBigO l f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsEquivalent l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsBigO l f g‚ÇÇ","decl":"@[trans]\ntheorem IsBigO.trans_isEquivalent {f : Œ± ‚Üí Œ≤‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =O[l] g‚ÇÅ) (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) :\n    f =O[l] g‚ÇÇ :=\n  IsBigO.trans h h‚ÇÇ.isBigO\n\n"}
{"name":"Asymptotics.IsEquivalent.trans_isLittleO","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nŒ≤‚ÇÇ : Type u_3\ninst‚úù¬π : NormedAddCommGroup Œ≤\ninst‚úù : Norm Œ≤‚ÇÇ\nl : Filter Œ±\nf g‚ÇÅ : Œ± ‚Üí Œ≤\ng‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ\nh : Asymptotics.IsEquivalent l f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsLittleO l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsLittleO l f g‚ÇÇ","decl":"@[trans]\ntheorem IsEquivalent.trans_isLittleO {f g‚ÇÅ : Œ± ‚Üí Œ≤} {g‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ} (h : f ~[l] g‚ÇÅ)\n    (h‚ÇÇ : g‚ÇÅ =o[l] g‚ÇÇ) : f =o[l] g‚ÇÇ :=\n  IsBigO.trans_isLittleO h.isBigO h‚ÇÇ\n\n"}
{"name":"Asymptotics.IsLittleO.trans_isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nŒ≤‚ÇÇ : Type u_3\ninst‚úù¬π : NormedAddCommGroup Œ≤\ninst‚úù : Norm Œ≤‚ÇÇ\nl : Filter Œ±\nf : Œ± ‚Üí Œ≤‚ÇÇ\ng‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤\nh : Asymptotics.IsLittleO l f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsEquivalent l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsLittleO l f g‚ÇÇ","decl":"@[trans]\ntheorem IsLittleO.trans_isEquivalent {f : Œ± ‚Üí Œ≤‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =o[l] g‚ÇÅ)\n    (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) : f =o[l] g‚ÇÇ :=\n  IsLittleO.trans_isBigO h h‚ÇÇ.isBigO\n\n"}
{"name":"Asymptotics.IsEquivalent.trans_isTheta","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nŒ≤‚ÇÇ : Type u_3\ninst‚úù¬π : NormedAddCommGroup Œ≤\ninst‚úù : Norm Œ≤‚ÇÇ\nl : Filter Œ±\nf g‚ÇÅ : Œ± ‚Üí Œ≤\ng‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ\nh : Asymptotics.IsEquivalent l f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsTheta l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsTheta l f g‚ÇÇ","decl":"@[trans]\ntheorem IsEquivalent.trans_isTheta {f g‚ÇÅ : Œ± ‚Üí Œ≤} {g‚ÇÇ : Œ± ‚Üí Œ≤‚ÇÇ} (h : f ~[l] g‚ÇÅ)\n    (h‚ÇÇ : g‚ÇÅ =Œò[l] g‚ÇÇ) : f =Œò[l] g‚ÇÇ :=\n  IsTheta.trans h.isTheta h‚ÇÇ\n\n"}
{"name":"Asymptotics.IsTheta.trans_isEquivalent","module":"Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\nŒ≤‚ÇÇ : Type u_3\ninst‚úù¬π : NormedAddCommGroup Œ≤\ninst‚úù : Norm Œ≤‚ÇÇ\nl : Filter Œ±\nf : Œ± ‚Üí Œ≤‚ÇÇ\ng‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤\nh : Asymptotics.IsTheta l f g‚ÇÅ\nh‚ÇÇ : Asymptotics.IsEquivalent l g‚ÇÅ g‚ÇÇ\n‚ä¢ Asymptotics.IsTheta l f g‚ÇÇ","decl":"@[trans]\ntheorem IsTheta.trans_isEquivalent {f : Œ± ‚Üí Œ≤‚ÇÇ} {g‚ÇÅ g‚ÇÇ : Œ± ‚Üí Œ≤} (h : f =Œò[l] g‚ÇÅ)\n    (h‚ÇÇ : g‚ÇÅ ~[l] g‚ÇÇ) : f =Œò[l] g‚ÇÇ :=\n  IsTheta.trans h h‚ÇÇ.isTheta\n\n"}
