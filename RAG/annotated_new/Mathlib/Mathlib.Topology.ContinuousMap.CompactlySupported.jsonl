{"name":"CompactlySupportedContinuousMap.hasCompactSupport'","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_5\nβ : Type u_6\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero β\ninst✝ : TopologicalSpace β\nself : CompactlySupportedContinuousMap α β\n⊢ HasCompactSupport self.toFun","decl":"/-- `C_c(α, β)` is the type of continuous functions `α → β` with compact support from a topological\nspace to a topological space with a zero element.\n\nWhen possible, instead of parametrizing results over `f : C_c(α, β)`,\nyou should parametrize over `{F : Type*} [CompactlySupportedContinuousMapClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `CompactlySupportedContinuousMapClass`. -/\nstructure CompactlySupportedContinuousMap (α β : Type*) [TopologicalSpace α] [Zero β]\n    [TopologicalSpace β] extends ContinuousMap α β where\n  /-- The function has compact support . -/\n  hasCompactSupport' : HasCompactSupport toFun\n\n"}
{"name":"CompactlySupportedContinuousMap.mk.injEq","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_5\nβ : Type u_6\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero β\ninst✝ : TopologicalSpace β\ntoContinuousMap✝ : ContinuousMap α β\nhasCompactSupport'✝ : HasCompactSupport toContinuousMap✝.toFun\ntoContinuousMap : ContinuousMap α β\nhasCompactSupport' : HasCompactSupport toContinuousMap.toFun\n⊢ Eq (Eq { toContinuousMap := toContinuousMap✝, hasCompactSupport' := hasCompactSupport'✝ } { toContinuousMap := toContinuousMap, hasCompactSupport' := hasCompactSupport' }) (Eq toContinuousMap✝ toContinuousMap)","decl":"/-- `C_c(α, β)` is the type of continuous functions `α → β` with compact support from a topological\nspace to a topological space with a zero element.\n\nWhen possible, instead of parametrizing results over `f : C_c(α, β)`,\nyou should parametrize over `{F : Type*} [CompactlySupportedContinuousMapClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `CompactlySupportedContinuousMapClass`. -/\nstructure CompactlySupportedContinuousMap (α β : Type*) [TopologicalSpace α] [Zero β]\n    [TopologicalSpace β] extends ContinuousMap α β where\n  /-- The function has compact support . -/\n  hasCompactSupport' : HasCompactSupport toFun\n\n"}
{"name":"CompactlySupportedContinuousMap.mk.sizeOf_spec","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_5\nβ : Type u_6\ninst✝⁴ : TopologicalSpace α\ninst✝³ : Zero β\ninst✝² : TopologicalSpace β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoContinuousMap : ContinuousMap α β\nhasCompactSupport' : HasCompactSupport toContinuousMap.toFun\n⊢ Eq (SizeOf.sizeOf { toContinuousMap := toContinuousMap, hasCompactSupport' := hasCompactSupport' }) (HAdd.hAdd 1 (SizeOf.sizeOf toContinuousMap))","decl":"/-- `C_c(α, β)` is the type of continuous functions `α → β` with compact support from a topological\nspace to a topological space with a zero element.\n\nWhen possible, instead of parametrizing results over `f : C_c(α, β)`,\nyou should parametrize over `{F : Type*} [CompactlySupportedContinuousMapClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `CompactlySupportedContinuousMapClass`. -/\nstructure CompactlySupportedContinuousMap (α β : Type*) [TopologicalSpace α] [Zero β]\n    [TopologicalSpace β] extends ContinuousMap α β where\n  /-- The function has compact support . -/\n  hasCompactSupport' : HasCompactSupport toFun\n\n"}
{"name":"CompactlySupportedContinuousMap.mk.inj","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_5\nβ : Type u_6\ninst✝² : TopologicalSpace α\ninst✝¹ : Zero β\ninst✝ : TopologicalSpace β\ntoContinuousMap✝ : ContinuousMap α β\nhasCompactSupport'✝ : HasCompactSupport toContinuousMap✝.toFun\ntoContinuousMap : ContinuousMap α β\nhasCompactSupport' : HasCompactSupport toContinuousMap.toFun\nx✝ : Eq { toContinuousMap := toContinuousMap✝, hasCompactSupport' := hasCompactSupport'✝ } { toContinuousMap := toContinuousMap, hasCompactSupport' := hasCompactSupport' }\n⊢ Eq toContinuousMap✝ toContinuousMap","decl":"/-- `C_c(α, β)` is the type of continuous functions `α → β` with compact support from a topological\nspace to a topological space with a zero element.\n\nWhen possible, instead of parametrizing results over `f : C_c(α, β)`,\nyou should parametrize over `{F : Type*} [CompactlySupportedContinuousMapClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `CompactlySupportedContinuousMapClass`. -/\nstructure CompactlySupportedContinuousMap (α β : Type*) [TopologicalSpace α] [Zero β]\n    [TopologicalSpace β] extends ContinuousMap α β where\n  /-- The function has compact support . -/\n  hasCompactSupport' : HasCompactSupport toFun\n\n"}
{"name":"CompactlySupportedContinuousMapClass.hasCompactSupport","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"F : Type u_5\nα : outParam (Type u_6)\nβ : outParam (Type u_7)\ninst✝³ : TopologicalSpace α\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : CompactlySupportedContinuousMapClass F α β\nf : F\n⊢ HasCompactSupport ⇑f","decl":"/-- `CompactlySupportedContinuousMapClass F α β` states that `F` is a type of continuous maps with\ncompact support.\n\nYou should also extend this typeclass when you extend `CompactlySupportedContinuousMap`. -/\nclass CompactlySupportedContinuousMapClass (F : Type*) (α β : outParam <| Type*)\n    [TopologicalSpace α] [Zero β] [TopologicalSpace β] [FunLike F α β]\n    extends ContinuousMapClass F α β : Prop where\n  /-- Each member of the class has compact support. -/\n  hasCompactSupport (f : F) : HasCompactSupport f\n\n"}
{"name":"CompactlySupportedContinuousMapClass.toContinuousMapClass","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"F : Type u_5\nα : outParam (Type u_6)\nβ : outParam (Type u_7)\ninst✝³ : TopologicalSpace α\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : CompactlySupportedContinuousMapClass F α β\n⊢ ContinuousMapClass F α β","decl":"/-- `CompactlySupportedContinuousMapClass F α β` states that `F` is a type of continuous maps with\ncompact support.\n\nYou should also extend this typeclass when you extend `CompactlySupportedContinuousMap`. -/\nclass CompactlySupportedContinuousMapClass (F : Type*) (α β : outParam <| Type*)\n    [TopologicalSpace α] [Zero β] [TopologicalSpace β] [FunLike F α β]\n    extends ContinuousMapClass F α β : Prop where\n  /-- Each member of the class has compact support. -/\n  hasCompactSupport (f : F) : HasCompactSupport f\n\n"}
{"name":"CompactlySupportedContinuousMap.hasCompactSupport","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf : CompactlySupportedContinuousMap α β\n⊢ HasCompactSupport ⇑f","decl":"protected lemma hasCompactSupport (f : C_c(α, β)) : HasCompactSupport f := f.hasCompactSupport'\n\n"}
{"name":"CompactlySupportedContinuousMap.instCompactlySupportedContinuousMapClass","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\n⊢ CompactlySupportedContinuousMapClass (CompactlySupportedContinuousMap α β) α β","decl":"instance : CompactlySupportedContinuousMapClass C_c(α, β) α β where\n  map_continuous f := f.continuous_toFun\n  hasCompactSupport f := f.hasCompactSupport'\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf : CompactlySupportedContinuousMap α β\n⊢ Eq ⇑f.toContinuousMap ⇑f","decl":"@[simp]\ntheorem coe_toContinuousMap (f : C_c(α, β)) : (f.toContinuousMap : α → β) = f :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.ext","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf g : CompactlySupportedContinuousMap α β\nh : ∀ (x : α), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : C_c(α, β)} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"CompactlySupportedContinuousMap.ext_iff","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf g : CompactlySupportedContinuousMap α β\n⊢ Iff (Eq f g) (∀ (x : α), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext {f g : C_c(α, β)} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_mk","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf : ContinuousMap α β\nh : HasCompactSupport ⇑f\n⊢ Eq ⇑{ toContinuousMap := f, hasCompactSupport' := h } ⇑f","decl":"@[simp]\ntheorem coe_mk (f : C(α, β)) (h : HasCompactSupport f) : ⇑(⟨f, h⟩ : C_c(α, β)) = f :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_copy","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf : CompactlySupportedContinuousMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : C_c(α, β)) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.copy_eq","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\nf : CompactlySupportedContinuousMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : C_c(α, β)) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"CompactlySupportedContinuousMap.eq_of_empty","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : Zero β\ninst✝ : IsEmpty α\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq f g","decl":"theorem eq_of_empty [IsEmpty α] (f g : C_c(α, β)) : f = g :=\n  ext <| IsEmpty.elim ‹_›\n\n"}
{"name":"CompactlySupportedContinuousMap.ContinuousMap.liftCompactlySupported_apply_toFun","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : Zero β\ninst✝ : CompactSpace α\nf : ContinuousMap α β\na : α\n⊢ Eq ((CompactlySupportedContinuousMap.ContinuousMap.liftCompactlySupported f) a) (f a)","decl":"/-- A continuous function on a compact space automatically has compact support. -/\n@[simps]\ndef ContinuousMap.liftCompactlySupported [CompactSpace α] : C(α, β) ≃ C_c(α, β) where\n  toFun f :=\n    { toFun := f\n      hasCompactSupport' := HasCompactSupport.of_compactSpace f }\n  invFun f := f\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.ContinuousMap.liftCompactlySupported_symm_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : Zero β\ninst✝ : CompactSpace α\nf : CompactlySupportedContinuousMap α β\n⊢ Eq (CompactlySupportedContinuousMap.ContinuousMap.liftCompactlySupported.symm f) ↑f","decl":"/-- A continuous function on a compact space automatically has compact support. -/\n@[simps]\ndef ContinuousMap.liftCompactlySupported [CompactSpace α] : C(α, β) ≃ C_c(α, β) where\n  toFun f :=\n    { toFun := f\n      hasCompactSupport' := HasCompactSupport.of_compactSpace f }\n  invFun f := f\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.toContinuousMap_compLeft","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : Zero β\nγ : Type u_5\ninst✝¹ : TopologicalSpace γ\ninst✝ : Zero γ\ng : ContinuousMap β γ\nhg : Eq (g 0) 0\nf : CompactlySupportedContinuousMap α β\n⊢ Eq (CompactlySupportedContinuousMap.compLeft g f).toContinuousMap (g.comp ↑f)","decl":"lemma toContinuousMap_compLeft {g : C(β, γ)} (hg : g 0 = 0) (f : C_c(α, β)) :\n    (f.compLeft g).toContinuousMap = g.comp f := if_pos hg\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_compLeft","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : Zero β\nγ : Type u_5\ninst✝¹ : TopologicalSpace γ\ninst✝ : Zero γ\ng : ContinuousMap β γ\nhg : Eq (g 0) 0\nf : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(CompactlySupportedContinuousMap.compLeft g f)) (Function.comp ⇑g ⇑f)","decl":"lemma coe_compLeft {g : C(β, γ)} (hg : g 0 = 0) (f : C_c(α, β)) : f.compLeft g = g ∘ f := by\n  simp [compLeft, if_pos hg]\n\n"}
{"name":"CompactlySupportedContinuousMap.compLeft_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : Zero β\nγ : Type u_5\ninst✝¹ : TopologicalSpace γ\ninst✝ : Zero γ\ng : ContinuousMap β γ\nhg : Eq (g 0) 0\nf : CompactlySupportedContinuousMap α β\na : α\n⊢ Eq ((CompactlySupportedContinuousMap.compLeft g f) a) (g (f a))","decl":"lemma compLeft_apply {g : C(β, γ)} (hg : g 0 = 0) (f : C_c(α, β)) (a : α) :\n    f.compLeft g a = g (f a) := by simp [coe_compLeft hg f]\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_zero","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : Zero β\n⊢ Eq (⇑0) 0","decl":"@[simp]\ntheorem coe_zero [Zero β] : ⇑(0 : C_c(α, β)) = 0 :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.zero_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\nx : α\ninst✝ : Zero β\n⊢ Eq (0 x) 0","decl":"theorem zero_apply [Zero β] : (0 : C_c(α, β)) x = 0 :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_mul","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : MulZeroClass β\ninst✝ : ContinuousMul β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(HMul.hMul f g)) (HMul.hMul ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_mul [MulZeroClass β] [ContinuousMul β] (f g : C_c(α, β)) : ⇑(f * g) = f * g :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.mul_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\nx : α\ninst✝¹ : MulZeroClass β\ninst✝ : ContinuousMul β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq ((HMul.hMul f g) x) (HMul.hMul (f x) (g x))","decl":"theorem mul_apply [MulZeroClass β] [ContinuousMul β] (f g : C_c(α, β)) : (f * g) x = f x * g x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_smulc","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : TopologicalSpace β\ninst✝⁵ : Zero β\ninst✝⁴ : TopologicalSpace γ\ninst✝³ : SMulZeroClass γ β\ninst✝² : ContinuousSMul γ β\nF : Type u_5\ninst✝¹ : FunLike F α γ\ninst✝ : ContinuousMapClass F α γ\nf : F\ng : CompactlySupportedContinuousMap α β\n⊢ Eq ⇑(HSMul.hSMul f g) fun x => HSMul.hSMul (f x) (g x)","decl":"@[simp]\ntheorem coe_smulc [Zero β] [TopologicalSpace γ] [SMulZeroClass γ β] [ContinuousSMul γ β]\n    {F : Type*} [FunLike F α γ] [ContinuousMapClass F α γ] (f : F) (g : C_c(α, β)) :\n    ⇑(f • g) = fun x => f x • g x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.smulc_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : TopologicalSpace β\ninst✝⁵ : Zero β\ninst✝⁴ : TopologicalSpace γ\ninst✝³ : SMulZeroClass γ β\ninst✝² : ContinuousSMul γ β\nF : Type u_5\ninst✝¹ : FunLike F α γ\ninst✝ : ContinuousMapClass F α γ\nf : F\ng : CompactlySupportedContinuousMap α β\nx : α\n⊢ Eq ((HSMul.hSMul f g) x) (HSMul.hSMul (f x) (g x))","decl":"theorem smulc_apply [Zero β] [TopologicalSpace γ] [SMulZeroClass γ β] [ContinuousSMul γ β]\n    {F : Type*} [FunLike F α γ] [ContinuousMapClass F α γ] (f : F) (g : C_c(α, β)) (x : α) :\n    (f • g) x = f x • g x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_add","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : AddZeroClass β\ninst✝ : ContinuousAdd β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_add [AddZeroClass β] [ContinuousAdd β] (f g : C_c(α, β)) : ⇑(f + g) = f + g :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.add_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\nx : α\ninst✝¹ : AddZeroClass β\ninst✝ : ContinuousAdd β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq ((HAdd.hAdd f g) x) (HAdd.hAdd (f x) (g x))","decl":"theorem add_apply [AddZeroClass β] [ContinuousAdd β] (f g : C_c(α, β)) : (f + g) x = f x + g x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_smul","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : Zero β\nR : Type u_5\ninst✝¹ : SMulZeroClass R β\ninst✝ : ContinuousConstSMul R β\nr : R\nf : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(HSMul.hSMul r f)) (HSMul.hSMul r ⇑f)","decl":"@[simp, norm_cast]\ntheorem coe_smul [Zero β] {R : Type*} [SMulZeroClass R β] [ContinuousConstSMul R β] (r : R)\n    (f : C_c(α, β)) : ⇑(r • f) = r • ⇑f :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.smul_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : Zero β\nR : Type u_5\ninst✝¹ : SMulZeroClass R β\ninst✝ : ContinuousConstSMul R β\nr : R\nf : CompactlySupportedContinuousMap α β\nx : α\n⊢ Eq ((HSMul.hSMul r f) x) (HSMul.hSMul r (f x))","decl":"theorem smul_apply [Zero β] {R : Type*} [SMulZeroClass R β] [ContinuousConstSMul R β] (r : R)\n    (f : C_c(α, β)) (x : α) : (r • f) x = r • f x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_sum","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : ContinuousAdd β\nι : Type u_5\ns : Finset ι\nf : ι → CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(s.sum fun i => f i)) (s.sum fun i => ⇑(f i))","decl":"@[simp]\ntheorem coe_sum [AddCommMonoid β] [ContinuousAdd β] {ι : Type*} (s : Finset ι) (f : ι → C_c(α, β)) :\n    ⇑(∑ i ∈ s, f i) = ∑ i ∈ s, (f i : α → β) :=\n  map_sum coeFnMonoidHom f s\n\n"}
{"name":"CompactlySupportedContinuousMap.sum_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : ContinuousAdd β\nι : Type u_5\ns : Finset ι\nf : ι → CompactlySupportedContinuousMap α β\na : α\n⊢ Eq ((s.sum fun i => f i) a) (s.sum fun i => (f i) a)","decl":"theorem sum_apply [AddCommMonoid β] [ContinuousAdd β] {ι : Type*} (s : Finset ι) (f : ι → C_c(α, β))\n    (a : α) : (∑ i ∈ s, f i) a = ∑ i ∈ s, f i a := by simp\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_neg","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nf : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[simp]\ntheorem coe_neg : ⇑(-f) = -f :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.neg_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\nx : α\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nf : CompactlySupportedContinuousMap α β\n⊢ Eq ((Neg.neg f) x) (Neg.neg (f x))","decl":"theorem neg_apply : (-f) x = -f x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_sub","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_sub : ⇑(f - g) = f - g :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.sub_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\nx : α\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq ((HSub.hSub f g) x) (HSub.hSub (f x) (g x))","decl":"theorem sub_apply : (f - g) x = f x - g x :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.instIsCentralScalar","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : TopologicalSpace β\ninst✝⁵ : Zero β\nR : Type u_5\ninst✝⁴ : Zero R\ninst✝³ : SMulWithZero R β\ninst✝² : SMulWithZero (MulOpposite R) β\ninst✝¹ : ContinuousConstSMul R β\ninst✝ : IsCentralScalar R β\n⊢ IsCentralScalar R (CompactlySupportedContinuousMap α β)","decl":"instance [Zero β] {R : Type*} [Zero R] [SMulWithZero R β] [SMulWithZero Rᵐᵒᵖ β]\n    [ContinuousConstSMul R β] [IsCentralScalar R β] : IsCentralScalar R C_c(α, β) :=\n  ⟨fun _ _ => ext fun _ => op_smul_eq_smul _ _⟩\n\n"}
{"name":"CompactlySupportedContinuousMap.instIsScalarTower","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : TopologicalSpace β\nR : Type u_5\ninst✝⁵ : Semiring R\ninst✝⁴ : NonUnitalNonAssocSemiring β\ninst✝³ : TopologicalSemiring β\ninst✝² : Module R β\ninst✝¹ : ContinuousConstSMul R β\ninst✝ : IsScalarTower R β β\n⊢ IsScalarTower R (CompactlySupportedContinuousMap α β) (CompactlySupportedContinuousMap α β)","decl":"instance {R : Type*} [Semiring R] [NonUnitalNonAssocSemiring β]\n    [TopologicalSemiring β] [Module R β] [ContinuousConstSMul R β] [IsScalarTower R β β] :\n    IsScalarTower R C_c(α, β) C_c(α, β) where\n  smul_assoc r f g := by\n    ext\n    simp only [smul_eq_mul, coe_mul, coe_smul, Pi.mul_apply, Pi.smul_apply]\n    rw [← smul_eq_mul, ← smul_eq_mul, smul_assoc]\n\n"}
{"name":"CompactlySupportedContinuousMap.instSMulCommClass","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁷ : TopologicalSpace α\ninst✝⁶ : TopologicalSpace β\nR : Type u_5\ninst✝⁵ : Semiring R\ninst✝⁴ : NonUnitalNonAssocSemiring β\ninst✝³ : TopologicalSemiring β\ninst✝² : Module R β\ninst✝¹ : ContinuousConstSMul R β\ninst✝ : SMulCommClass R β β\n⊢ SMulCommClass R (CompactlySupportedContinuousMap α β) (CompactlySupportedContinuousMap α β)","decl":"instance {R : Type*} [Semiring R] [NonUnitalNonAssocSemiring β]\n    [TopologicalSemiring β] [Module R β] [ContinuousConstSMul R β] [SMulCommClass R β β] :\n    SMulCommClass R C_c(α, β) C_c(α, β) where\n  smul_comm r f g := by\n    ext\n    simp only [smul_eq_mul, coe_smul, coe_mul, Pi.smul_apply, Pi.mul_apply]\n    rw [← smul_eq_mul, ← smul_eq_mul, smul_comm]\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_star","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : AddMonoid β\ninst✝¹ : StarAddMonoid β\ninst✝ : ContinuousStar β\nf : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(Star.star f)) (Star.star ⇑f)","decl":"@[simp]\ntheorem coe_star (f : C_c(α, β)) : ⇑(star f) = star (⇑f) :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.star_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : AddMonoid β\ninst✝¹ : StarAddMonoid β\ninst✝ : ContinuousStar β\nf : CompactlySupportedContinuousMap α β\nx : α\n⊢ Eq ((Star.star f) x) (Star.star (f x))","decl":"theorem star_apply (f : C_c(α, β)) (x : α) : (star f) x = star (f x) :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.instTrivialStar","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : AddMonoid β\ninst✝² : StarAddMonoid β\ninst✝¹ : ContinuousStar β\ninst✝ : TrivialStar β\n⊢ TrivialStar (CompactlySupportedContinuousMap α β)","decl":"instance [TrivialStar β] : TrivialStar C_c(α, β) where\n    star_trivial f := ext fun x => star_trivial (f x)\n\n"}
{"name":"CompactlySupportedContinuousMap.instStarModule","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁹ : TopologicalSpace α\n𝕜 : Type u_5\ninst✝⁸ : Zero 𝕜\ninst✝⁷ : Star 𝕜\ninst✝⁶ : AddMonoid β\ninst✝⁵ : StarAddMonoid β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : ContinuousStar β\ninst✝² : SMulWithZero 𝕜 β\ninst✝¹ : ContinuousConstSMul 𝕜 β\ninst✝ : StarModule 𝕜 β\n⊢ StarModule 𝕜 (CompactlySupportedContinuousMap α β)","decl":"instance : StarModule 𝕜 C_c(α, β) where\n  star_smul k f := ext fun x => star_smul k (f x)\n\n"}
{"name":"CompactlySupportedContinuousMap.le_def","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\ninst✝³ : TopologicalSpace α\nβ : Type u_5\ninst✝² : TopologicalSpace β\ninst✝¹ : Zero β\ninst✝ : PartialOrder β\nf g : CompactlySupportedContinuousMap α β\n⊢ Iff (LE.le f g) (∀ (a : α), LE.le (f a) (g a))","decl":"theorem le_def {f g : C_c(α, β)} : f ≤ g ↔ ∀ a, f a ≤ g a := Pi.le_def\n\n"}
{"name":"CompactlySupportedContinuousMap.lt_def","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\ninst✝³ : TopologicalSpace α\nβ : Type u_5\ninst✝² : TopologicalSpace β\ninst✝¹ : Zero β\ninst✝ : PartialOrder β\nf g : CompactlySupportedContinuousMap α β\n⊢ Iff (LT.lt f g) (And (∀ (a : α), LE.le (f a) (g a)) (Exists fun a => LT.lt (f a) (g a)))","decl":"theorem lt_def {f g : C_c(α, β)} : f < g ↔ (∀ a, f a ≤ g a) ∧ ∃ a, f a < g a := Pi.lt_def\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_sup","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeSup β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousSup β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(Max.max f g)) (Max.max ⇑f ⇑g)","decl":"@[simp, norm_cast] lemma coe_sup (f g : C_c(α, β)) : ⇑(f ⊔ g) = ⇑f ⊔ g := rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.sup_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeSup β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousSup β\nf g : CompactlySupportedContinuousMap α β\na : α\n⊢ Eq ((Max.max f g) a) (Max.max (f a) (g a))","decl":"@[simp] lemma sup_apply (f g : C_c(α, β)) (a : α) : (f ⊔ g) a = f a ⊔ g a := rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.finsetSup'_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeSup β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousSup β\nι : Type u_5\ns : Finset ι\nH : s.Nonempty\nf : ι → CompactlySupportedContinuousMap α β\na : α\n⊢ Eq ((s.sup' H f) a) (s.sup' H fun i => (f i) a)","decl":"lemma finsetSup'_apply {ι : Type*} {s : Finset ι} (H : s.Nonempty) (f : ι → C_c(α, β)) (a : α) :\n    s.sup' H f a = s.sup' H fun i ↦ f i a :=\n  Finset.comp_sup'_eq_sup'_comp H (fun g : C_c(α, β) ↦ g a) fun _ _ ↦ rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_finsetSup'","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeSup β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousSup β\nι : Type u_5\ns : Finset ι\nH : s.Nonempty\nf : ι → CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(s.sup' H f)) (s.sup' H fun i => ⇑(f i))","decl":"@[simp, norm_cast]\nlemma coe_finsetSup' {ι : Type*} {s : Finset ι} (H : s.Nonempty) (f : ι → C_c(α, β)) :\n    ⇑(s.sup' H f) = s.sup' H fun i ↦ ⇑(f i) := by ext; simp [finsetSup'_apply]\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_inf","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeInf β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousInf β\nf g : CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(Min.min f g)) (Min.min ⇑f ⇑g)","decl":"@[simp, norm_cast] lemma coe_inf (f g : C_c(α, β)) : ⇑(f ⊓ g) = ⇑f ⊓ g := rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.inf_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeInf β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousInf β\nf g : CompactlySupportedContinuousMap α β\na : α\n⊢ Eq ((Min.min f g) a) (Min.min (f a) (g a))","decl":"@[simp] lemma inf_apply (f g : C_c(α, β)) (a : α) : (f ⊓ g) a = f a ⊓ g a := rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.finsetInf'_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeInf β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousInf β\nι : Type u_5\ns : Finset ι\nH : s.Nonempty\nf : ι → CompactlySupportedContinuousMap α β\na : α\n⊢ Eq ((s.inf' H f) a) (s.inf' H fun i => (f i) a)","decl":"lemma finsetInf'_apply {ι : Type*} {s : Finset ι} (H : s.Nonempty) (f : ι → C_c(α, β)) (a : α) :\n    s.inf' H f a = s.inf' H fun i ↦ f i a :=\n  Finset.comp_inf'_eq_inf'_comp H (fun g : C_c(α, β) ↦ g a) fun _ _ ↦ rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_finsetInf'","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : TopologicalSpace α\ninst✝³ : SemilatticeInf β\ninst✝² : Zero β\ninst✝¹ : TopologicalSpace β\ninst✝ : ContinuousInf β\nι : Type u_5\ns : Finset ι\nH : s.Nonempty\nf : ι → CompactlySupportedContinuousMap α β\n⊢ Eq (⇑(s.inf' H f)) (s.inf' H fun i => ⇑(f i))","decl":"@[simp, norm_cast]\nlemma coe_finsetInf' {ι : Type*} {s : Finset ι} (H : s.Nonempty) (f : ι → C_c(α, β)) :\n    ⇑(s.inf' H f) = s.inf' H fun i ↦ ⇑(f i) := by ext; simp [finsetInf'_apply]\n\n"}
{"name":"CompactlySupportedContinuousMap.coe_comp_to_continuous_fun","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"β : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace δ\ninst✝ : Zero δ\nf : CompactlySupportedContinuousMap γ δ\ng : CocompactMap β γ\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp_to_continuous_fun (f : C_c(γ, δ)) (g : β →co γ) : ((f.comp g) : β → δ) = f ∘ g :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.comp_id","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"γ : Type u_4\nδ : Type u_5\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace δ\ninst✝ : Zero δ\nf : CompactlySupportedContinuousMap γ δ\n⊢ Eq (f.comp (CocompactMap.id γ)) f","decl":"@[simp]\ntheorem comp_id (f : C_c(γ, δ)) : f.comp (CocompactMap.id γ) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.comp_assoc","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁴ : TopologicalSpace α\nδ : Type u_5\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace δ\ninst✝ : Zero δ\nf : CompactlySupportedContinuousMap γ δ\ng : CocompactMap β γ\nh : CocompactMap α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : C_c(γ, δ)) (g : β →co γ) (h : α →co β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMap.zero_comp","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"β : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace γ\ninst✝¹ : TopologicalSpace δ\ninst✝ : Zero δ\ng : CocompactMap β γ\n⊢ Eq (CompactlySupportedContinuousMap.comp 0 g) 0","decl":"@[simp]\ntheorem zero_comp (g : β →co γ) : (0 : C_c(γ, δ)).comp g = 0 :=\n  rfl\n\n"}
{"name":"CompactlySupportedContinuousMapClass.of_compactSpace","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : Zero β\ninst✝³ : TopologicalSpace β\nG : Type u_5\ninst✝² : FunLike G α β\ninst✝¹ : ContinuousMapClass G α β\ninst✝ : CompactSpace α\n⊢ CompactlySupportedContinuousMapClass G α β","decl":"/-- A continuous function on a compact space has automatically compact support. This is not an\ninstance to avoid type class loops. -/\nlemma of_compactSpace (G : Type*) [FunLike G α β]\n    [ContinuousMapClass G α β] [CompactSpace α] : CompactlySupportedContinuousMapClass G α β where\n  map_continuous := map_continuous\n  hasCompactSupport := by\n    intro f\n    exact HasCompactSupport.of_compactSpace f\n\n"}
{"name":"CompactlySupportedContinuousMapClass.uniformContinuous","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"F : Type u_1\nβ : Type u_3\nγ : Type u_4\ninst✝⁴ : UniformSpace β\ninst✝³ : UniformSpace γ\ninst✝² : Zero γ\ninst✝¹ : FunLike F β γ\ninst✝ : CompactlySupportedContinuousMapClass F β γ\nf : F\n⊢ UniformContinuous ⇑f","decl":"theorem uniformContinuous (f : F) : UniformContinuous (f : β → γ) :=\n  (map_continuous f).uniformContinuous_of_tendsto_cocompact\n  (HasCompactSupport.is_zero_at_infty (hasCompactSupport f))\n\n"}
{"name":"CompactlySupportedContinuousMapClass.instZeroAtInftyContinuousMapClass","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"F : Type u_1\nβ : Type u_3\nγ : Type u_4\ninst✝⁴ : TopologicalSpace β\ninst✝³ : TopologicalSpace γ\ninst✝² : Zero γ\ninst✝¹ : FunLike F β γ\ninst✝ : CompactlySupportedContinuousMapClass F β γ\n⊢ ZeroAtInftyContinuousMapClass F β γ","decl":"instance : ZeroAtInftyContinuousMapClass F β γ where\n  zero_at_infty f := HasCompactSupport.is_zero_at_infty (hasCompactSupport f)\n\n"}
{"name":"CompactlySupportedContinuousMap.nnrealPart_apply","module":"Mathlib.Topology.ContinuousMap.CompactlySupported","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\nf : CompactlySupportedContinuousMap α Real\nx : α\n⊢ Eq (f.nnrealPart x) (f x).toNNReal","decl":"@[simp]\nlemma nnrealPart_apply (f : C_c(α, ℝ)) (x : α) :\n    f.nnrealPart x = Real.toNNReal (f x) := rfl\n\n"}
