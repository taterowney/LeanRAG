{"name":"PriestleySpace.priestley","module":"Mathlib.Topology.Order.Priestley","initialProofState":"α : Type u_2\ninst✝¹ : Preorder α\ninst✝ : TopologicalSpace α\nself : PriestleySpace α\nx y : α\na✝ : Not (LE.le x y)\n⊢ Exists fun U => And (IsClopen U) (And (IsUpperSet U) (And (Membership.mem U x) (Not (Membership.mem U y))))","decl":"/-- A Priestley space is an ordered topological space such that any two distinct points can be\nseparated by a clopen upper set. Compactness is often assumed, but we do not include it here. -/\nclass PriestleySpace (α : Type*) [Preorder α] [TopologicalSpace α] : Prop where\n  priestley {x y : α} : ¬x ≤ y → ∃ U : Set α, IsClopen U ∧ IsUpperSet U ∧ x ∈ U ∧ y ∉ U\n\n"}
{"name":"exists_isClopen_upper_of_not_le","module":"Mathlib.Topology.Order.Priestley","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Preorder α\ninst✝ : PriestleySpace α\nx y : α\na✝ : Not (LE.le x y)\n⊢ Exists fun U => And (IsClopen U) (And (IsUpperSet U) (And (Membership.mem U x) (Not (Membership.mem U y))))","decl":"theorem exists_isClopen_upper_of_not_le :\n    ¬x ≤ y → ∃ U : Set α, IsClopen U ∧ IsUpperSet U ∧ x ∈ U ∧ y ∉ U :=\n  PriestleySpace.priestley\n\n"}
{"name":"exists_isClopen_lower_of_not_le","module":"Mathlib.Topology.Order.Priestley","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Preorder α\ninst✝ : PriestleySpace α\nx y : α\nh : Not (LE.le x y)\n⊢ Exists fun U => And (IsClopen U) (And (IsLowerSet U) (And (Not (Membership.mem U x)) (Membership.mem U y)))","decl":"theorem exists_isClopen_lower_of_not_le (h : ¬x ≤ y) :\n    ∃ U : Set α, IsClopen U ∧ IsLowerSet U ∧ x ∉ U ∧ y ∈ U :=\n  let ⟨U, hU, hU', hx, hy⟩ := exists_isClopen_upper_of_not_le h\n  ⟨Uᶜ, hU.compl, hU'.compl, Classical.not_not.2 hx, hy⟩\n\n"}
{"name":"exists_isClopen_upper_or_lower_of_ne","module":"Mathlib.Topology.Order.Priestley","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : PartialOrder α\ninst✝ : PriestleySpace α\nx y : α\nh : Ne x y\n⊢ Exists fun U => And (IsClopen U) (And (Or (IsUpperSet U) (IsLowerSet U)) (And (Membership.mem U x) (Not (Membership.mem U y))))","decl":"theorem exists_isClopen_upper_or_lower_of_ne (h : x ≠ y) :\n    ∃ U : Set α, IsClopen U ∧ (IsUpperSet U ∨ IsLowerSet U) ∧ x ∈ U ∧ y ∉ U := by\n  obtain h | h := h.not_le_or_not_le\n  · exact (exists_isClopen_upper_of_not_le h).imp fun _ ↦ And.imp_right <| And.imp_left Or.inl\n  · obtain ⟨U, hU, hU', hy, hx⟩ := exists_isClopen_lower_of_not_le h\n    exact ⟨U, hU, Or.inr hU', hx, hy⟩\n\n-- See note [lower instance priority]\n"}
{"name":"PriestleySpace.toT2Space","module":"Mathlib.Topology.Order.Priestley","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : PartialOrder α\ninst✝ : PriestleySpace α\n⊢ T2Space α","decl":"instance (priority := 100) PriestleySpace.toT2Space : T2Space α :=\n  ⟨fun _ _ h ↦\n    let ⟨U, hU, _, hx, hy⟩ := exists_isClopen_upper_or_lower_of_ne h\n    ⟨U, Uᶜ, hU.isOpen, hU.compl.isOpen, hx, hy, disjoint_compl_right⟩⟩\n\n"}
