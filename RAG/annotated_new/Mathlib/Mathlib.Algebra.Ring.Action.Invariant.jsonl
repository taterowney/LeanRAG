{"name":"IsInvariantSubring.smul_mem","module":"Mathlib.Algebra.Ring.Action.Invariant","initialProofState":"M : Type u_1\nR : Type u_2\ninst✝² : Monoid M\ninst✝¹ : Ring R\ninst✝ : MulSemiringAction M R\nS : Subring R\nself : IsInvariantSubring M S\nm : M\nx : R\na✝ : Membership.mem S x\n⊢ Membership.mem S (HSMul.hSMul m x)","decl":"/-- A typeclass for subrings invariant under a `MulSemiringAction`. -/\nclass IsInvariantSubring : Prop where\n  smul_mem : ∀ (m : M) {x : R}, x ∈ S → m • x ∈ S\n\n"}
{"name":"IsInvariantSubring.coe_subtypeHom","module":"Mathlib.Algebra.Ring.Action.Invariant","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\nR' : Type u_2\ninst✝² : Ring R'\ninst✝¹ : MulSemiringAction M R'\nU : Subring R'\ninst✝ : IsInvariantSubring M U\n⊢ Eq (⇑(IsInvariantSubring.subtypeHom M U)) Subtype.val","decl":"@[simp]\ntheorem IsInvariantSubring.coe_subtypeHom :\n    (IsInvariantSubring.subtypeHom M U : U → R') = Subtype.val := rfl\n\n-- Porting note: added `toRingHom`\n"}
{"name":"IsInvariantSubring.coe_subtypeHom'","module":"Mathlib.Algebra.Ring.Action.Invariant","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\nR' : Type u_2\ninst✝² : Ring R'\ninst✝¹ : MulSemiringAction M R'\nU : Subring R'\ninst✝ : IsInvariantSubring M U\n⊢ Eq (IsInvariantSubring.subtypeHom M U).toRingHom U.subtype","decl":"@[simp]\ntheorem IsInvariantSubring.coe_subtypeHom' :\n    ((IsInvariantSubring.subtypeHom M U).toRingHom : U →+* R') = U.subtype := rfl\n\n"}
