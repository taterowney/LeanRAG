{"name":"Subalgebra.le_centralizer_iff","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nA : Type u_2\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Iff (LE.le S (Subalgebra.centralizer R ↑T)) (LE.le T (Subalgebra.centralizer R ↑S))","decl":"lemma le_centralizer_iff (S T : Subalgebra R A) : S ≤ centralizer R T ↔ T ≤ centralizer R S :=\n  ⟨fun h t ht _ hs ↦ (h hs t ht).symm, fun h s hs _ ht ↦ (h ht s hs).symm⟩\n\n"}
{"name":"Subalgebra.centralizer_coe_sup","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nA : Type u_2\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (Subalgebra.centralizer R ↑(Max.max S T)) (Min.min (Subalgebra.centralizer R ↑S) (Subalgebra.centralizer R ↑T))","decl":"lemma centralizer_coe_sup (S T : Subalgebra R A) :\n    centralizer R ((S ⊔ T : Subalgebra R A) : Set A) = centralizer R S ⊓ centralizer R T :=\n  eq_of_forall_le_iff fun K ↦ by\n    simp_rw [le_centralizer_iff, sup_le_iff, le_inf_iff, K.le_centralizer_iff]\n\n"}
{"name":"Subalgebra.centralizer_coe_iSup","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nA : Type u_2\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nι : Sort u_3\nS : ι → Subalgebra R A\n⊢ Eq (Subalgebra.centralizer R ↑(iSup fun i => S i)) (iInf fun i => Subalgebra.centralizer R ↑(S i))","decl":"lemma centralizer_coe_iSup {ι : Sort*} (S : ι → Subalgebra R A) :\n    centralizer R ((⨆ i, S i : Subalgebra R A) : Set A) = ⨅ i, centralizer R (S i) :=\n  eq_of_forall_le_iff fun K ↦ by\n    simp_rw [le_centralizer_iff, iSup_le_iff, le_iInf_iff, K.le_centralizer_iff]\n\n"}
{"name":"Subalgebra.centralizer_coe_image_includeLeft_eq_center_tensorProduct","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\nS : Set A\ninst✝ : Module.Free R B\n⊢ Eq (Subalgebra.centralizer R (Set.image (⇑Algebra.TensorProduct.includeLeft) S)) (Algebra.TensorProduct.map (Subalgebra.centralizer R S).val (AlgHom.id R B)).range","decl":"/--\nLet `R` be a commutative ring and `A, B` be `R`-algebras where `B` is free as `R`-module.\nFor any subset `S ⊆ A`, the centralizer of `S ⊗ 1 ⊆ A ⊗ B` is `C_A(S) ⊗ B` where `C_A(S)` is the\ncentralizer of `S` in `A`.\n-/\nlemma centralizer_coe_image_includeLeft_eq_center_tensorProduct\n    (S : Set A) [Module.Free R B] :\n    Subalgebra.centralizer R\n      (Algebra.TensorProduct.includeLeft (S := R) '' S) =\n    (Algebra.TensorProduct.map (Subalgebra.centralizer R (S : Set A)).val\n      (AlgHom.id R B)).range := by\n  classical\n  ext w\n  constructor\n  · intro hw\n    rw [mem_centralizer_iff] at hw\n    let ℬ := Module.Free.chooseBasis R B\n    obtain ⟨b, rfl⟩ := TensorProduct.eq_repr_basis_right ℬ w\n    refine Subalgebra.sum_mem _ fun j hj => ⟨⟨b j, ?_⟩ ⊗ₜ[R] ℬ j, by simp⟩\n    rw [Subalgebra.mem_centralizer_iff]\n    intro x hx\n    suffices x • b = b.mapRange (· * x) (by simp) from Finsupp.ext_iff.1 this j\n    specialize hw (x ⊗ₜ[R] 1) ⟨x, hx, rfl⟩\n    simp only [Finsupp.sum, Finset.mul_sum, Algebra.TensorProduct.tmul_mul_tmul, one_mul,\n      Finset.sum_mul, mul_one] at hw\n    refine TensorProduct.sum_tmul_basis_right_injective ℬ ?_\n    simp only [Finsupp.coe_lsum]\n    rw [sum_of_support_subset (s := b.support) (hs := Finsupp.support_smul) (h := by aesop),\n      sum_of_support_subset (s := b.support) (hs := support_mapRange) (h := by aesop)]\n    simpa only [Finsupp.coe_smul, Pi.smul_apply, smul_eq_mul, LinearMap.flip_apply,\n      TensorProduct.mk_apply, Finsupp.mapRange_apply] using hw\n\n  · rintro ⟨w, rfl⟩\n    rw [Subalgebra.mem_centralizer_iff]\n    rintro _ ⟨x, hx, rfl⟩\n    induction w using TensorProduct.induction_on with\n    | zero => simp\n    | tmul b c =>\n      simp [Subalgebra.mem_centralizer_iff _ |>.1 b.2 x hx]\n    | add y z hy hz => rw [map_add, mul_add, hy, hz, add_mul]\n\n"}
{"name":"Subalgebra.centralizer_coe_image_includeRight_eq_center_tensorProduct","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\nS : Set B\ninst✝ : Module.Free R A\n⊢ Eq (Subalgebra.centralizer R (Set.image (⇑Algebra.TensorProduct.includeRight) S)) (Algebra.TensorProduct.map (AlgHom.id R A) (Subalgebra.centralizer R S).val).range","decl":"/--\nLet `R` be a commutative ring and `A, B` be `R`-algebras where `B` is free as `R`-module.\nFor any subset `S ⊆ B`, the centralizer of `1 ⊗ S ⊆ A ⊗ B` is `A ⊗ C_B(S)` where `C_B(S)` is the\ncentralizer of `S` in `B`.\n-/\nlemma centralizer_coe_image_includeRight_eq_center_tensorProduct\n    (S : Set B) [Module.Free R A] :\n    Subalgebra.centralizer R\n      (Algebra.TensorProduct.includeRight '' S) =\n    (Algebra.TensorProduct.map (AlgHom.id R A)\n      (Subalgebra.centralizer R (S : Set B)).val).range := by\n  have eq1 := centralizer_coe_image_includeLeft_eq_center_tensorProduct R B A S\n  apply_fun Subalgebra.comap (Algebra.TensorProduct.comm R A B).toAlgHom at eq1\n  convert eq1\n  · ext x\n    simpa [mem_centralizer_iff] using\n      ⟨fun h b hb ↦ (Algebra.TensorProduct.comm R A B).symm.injective <| by aesop, fun h b hb ↦\n        (Algebra.TensorProduct.comm R A B).injective <| by aesop⟩\n  · ext x\n    simp only [AlgHom.mem_range, AlgEquiv.toAlgHom_eq_coe, mem_comap, AlgHom.coe_coe]\n    constructor\n    · rintro ⟨x, rfl⟩\n      exact ⟨(Algebra.TensorProduct.comm R _ _) x,\n        by rw [Algebra.TensorProduct.comm_comp_map_apply]⟩\n    · rintro ⟨y, hy⟩\n      refine ⟨(Algebra.TensorProduct.comm R _ _) y, (Algebra.TensorProduct.comm R A B).injective ?_⟩\n      rw [← hy, comm_comp_map_apply, ← comm_symm, AlgEquiv.symm_apply_apply]\n\n"}
{"name":"Subalgebra.centralizer_coe_map_includeLeft_eq_center_tensorProduct","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\nS : Subalgebra R A\ninst✝ : Module.Free R B\n⊢ Eq (Subalgebra.centralizer R ↑(Subalgebra.map Algebra.TensorProduct.includeLeft S)) (Algebra.TensorProduct.map (Subalgebra.centralizer R ↑S).val (AlgHom.id R B)).range","decl":"/--\nLet `R` be a commutative ring and `A, B` be `R`-algebras where `B` is free as `R`-module.\nFor any subalgebra `S` of `A`, the centralizer of `S ⊗ 1 ⊆ A ⊗ B` is `C_A(S) ⊗ B` where `C_A(S)` is\nthe centralizer of `S` in `A`.\n-/\nlemma centralizer_coe_map_includeLeft_eq_center_tensorProduct\n    (S : Subalgebra R A) [Module.Free R B] :\n    Subalgebra.centralizer R\n      (S.map (Algebra.TensorProduct.includeLeft (R := R) (B := B))) =\n    (Algebra.TensorProduct.map (Subalgebra.centralizer R (S : Set A)).val\n      (AlgHom.id R B)).range :=\n  centralizer_coe_image_includeLeft_eq_center_tensorProduct R A B S\n\n"}
{"name":"Subalgebra.centralizer_coe_map_includeRight_eq_center_tensorProduct","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\nS : Subalgebra R B\ninst✝ : Module.Free R A\n⊢ Eq (Subalgebra.centralizer R ↑(Subalgebra.map Algebra.TensorProduct.includeRight S)) (Algebra.TensorProduct.map (AlgHom.id R A) (Subalgebra.centralizer R ↑S).val).range","decl":"/--\nLet `R` be a commutative ring and `A, B` be `R`-algebras where `A` is free as `R`-module.\nFor any subalgebra `S` of `B`, the centralizer of `1 ⊗ S ⊆ A ⊗ B` is `A ⊗ C_B(S)` where `C_B(S)` is\nthe centralizer of `S` in `B`.\n-/\nlemma centralizer_coe_map_includeRight_eq_center_tensorProduct\n    (S : Subalgebra R B) [Module.Free R A] :\n    Subalgebra.centralizer R\n      (S.map (Algebra.TensorProduct.includeRight (R := R) (A := A))) =\n    (Algebra.TensorProduct.map (AlgHom.id R A)\n      (Subalgebra.centralizer R (S : Set B)).val).range :=\n  centralizer_coe_image_includeRight_eq_center_tensorProduct R A B S\n\n"}
{"name":"Subalgebra.centralizer_coe_range_includeLeft_eq_center_tensorProduct","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Module.Free R B\n⊢ Eq (Subalgebra.centralizer R ↑Algebra.TensorProduct.includeLeft.range) (Algebra.TensorProduct.map (Subalgebra.center R A).val (AlgHom.id R B)).range","decl":"/--\nLet `R` be a commutative ring and `A, B` be `R`-algebras where `B` is free as `R`-module.\nThen the centralizer of `A ⊗ 1 ⊆ A ⊗ B` is `C(A) ⊗ B` where `C(A)` is the center of `A`.\n-/\nlemma centralizer_coe_range_includeLeft_eq_center_tensorProduct [Module.Free R B] :\n    Subalgebra.centralizer R\n      (Algebra.TensorProduct.includeLeft : A →ₐ[R] A ⊗[R] B).range =\n    (Algebra.TensorProduct.map (Subalgebra.center R A).val (AlgHom.id R B)).range := by\n  rw [← centralizer_univ, ← Algebra.coe_top (R := R) (A := A),\n    ← centralizer_coe_map_includeLeft_eq_center_tensorProduct R A B ⊤]\n  ext\n  simp [includeLeft, includeLeftRingHom, Set.range_comp]\n\n"}
{"name":"Subalgebra.centralizer_range_includeRight_eq_center_tensorProduct","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Module.Free R A\n⊢ Eq (Subalgebra.centralizer R ↑Algebra.TensorProduct.includeRight.range) (Algebra.TensorProduct.map (AlgHom.id R A) (Subalgebra.center R B).val).range","decl":"/--\nLet `R` be a commutative ring and `A, B` be `R`-algebras where `A` is free as `R`-module.\nThen the centralizer of `1 ⊗ B ⊆ A ⊗ B` is `A ⊗ C(B)` where `C(B)` is the center of `B`.\n-/\nlemma centralizer_range_includeRight_eq_center_tensorProduct [Module.Free R A] :\n    Subalgebra.centralizer R\n      (Algebra.TensorProduct.includeRight : B →ₐ[R] A ⊗[R] B).range =\n    (Algebra.TensorProduct.map (AlgHom.id R A) (center R B).val).range := by\n  rw [← centralizer_univ, ← Algebra.coe_top (R := R) (A := B),\n    ← centralizer_coe_map_includeRight_eq_center_tensorProduct R A B ⊤]\n  ext\n  simp [includeRight, includeLeftRingHom, Set.range_comp]\n\n"}
{"name":"Subalgebra.centralizer_tensorProduct_eq_center_tensorProduct_left","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Module.Free R B\n⊢ Eq (Subalgebra.centralizer R ↑(Algebra.TensorProduct.map (AlgHom.id R A) (Algebra.ofId R B)).range) (Algebra.TensorProduct.map (Subalgebra.center R A).val (AlgHom.id R B)).range","decl":"lemma centralizer_tensorProduct_eq_center_tensorProduct_left [Module.Free R B] :\n    Subalgebra.centralizer R\n      (Algebra.TensorProduct.map (AlgHom.id R A) (Algebra.ofId R B)).range =\n    (Algebra.TensorProduct.map (Subalgebra.center R A).val (AlgHom.id R B)).range := by\n  rw [← centralizer_coe_range_includeLeft_eq_center_tensorProduct]\n  simp [Algebra.TensorProduct.map_range]\n\n"}
{"name":"Subalgebra.centralizer_tensorProduct_eq_center_tensorProduct_right","module":"Mathlib.Algebra.Algebra.Subalgebra.Centralizer","initialProofState":"R : Type u_1\ninst✝⁵ : CommSemiring R\nA : Type u_2\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra R B\ninst✝ : Module.Free R A\n⊢ Eq (Subalgebra.centralizer R ↑(Algebra.TensorProduct.map (Algebra.ofId R A) (AlgHom.id R B)).range) (Algebra.TensorProduct.map (AlgHom.id R A) (Subalgebra.center R B).val).range","decl":"lemma centralizer_tensorProduct_eq_center_tensorProduct_right [Module.Free R A] :\n    Subalgebra.centralizer R\n      (Algebra.TensorProduct.map (Algebra.ofId R A) (AlgHom.id R B)).range =\n    (Algebra.TensorProduct.map (AlgHom.id R A) (center R B).val).range := by\n  rw [← centralizer_range_includeRight_eq_center_tensorProduct]\n  simp [Algebra.TensorProduct.map_range]\n\n"}
