{"name":"AddUnits.vadd_def","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nα : Type u_5\ninst✝¹ : AddMonoid M\ninst✝ : VAdd M α\nm : AddUnits M\na : α\n⊢ Eq (HVAdd.hVAdd m a) (HVAdd.hVAdd (↑m) a)","decl":"@[to_additive] lemma smul_def [Monoid M] [SMul M α] (m : Mˣ) (a : α) : m • a = (m : M) • a := rfl\n\n"}
{"name":"Units.smul_def","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nα : Type u_5\ninst✝¹ : Monoid M\ninst✝ : SMul M α\nm : Units M\na : α\n⊢ Eq (HSMul.hSMul m a) (HSMul.hSMul (↑m) a)","decl":"@[to_additive] lemma smul_def [Monoid M] [SMul M α] (m : Mˣ) (a : α) : m • a = (m : M) • a := rfl\n\n"}
{"name":"AddUnits.vadd_mk_apply","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_6\nα : Type u_7\ninst✝¹ : AddMonoid M\ninst✝ : VAdd M α\nm n : M\nh₁ : Eq (HAdd.hAdd m n) 0\nh₂ : Eq (HAdd.hAdd n m) 0\na : α\n⊢ Eq (HVAdd.hVAdd { val := m, neg := n, val_neg := h₁, neg_val := h₂ } a) (HVAdd.hVAdd m a)","decl":"@[to_additive, simp]\nlemma smul_mk_apply {M α : Type*} [Monoid M] [SMul M α] (m n : M) (h₁) (h₂) (a : α) :\n    (⟨m, n, h₁, h₂⟩ : Mˣ) • a = m • a := rfl\n\n"}
{"name":"Units.smul_mk_apply","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_6\nα : Type u_7\ninst✝¹ : Monoid M\ninst✝ : SMul M α\nm n : M\nh₁ : Eq (HMul.hMul m n) 1\nh₂ : Eq (HMul.hMul n m) 1\na : α\n⊢ Eq (HSMul.hSMul { val := m, inv := n, val_inv := h₁, inv_val := h₂ } a) (HSMul.hSMul m a)","decl":"@[to_additive, simp]\nlemma smul_mk_apply {M α : Type*} [Monoid M] [SMul M α] (m n : M) (h₁) (h₂) (a : α) :\n    (⟨m, n, h₁, h₂⟩ : Mˣ) • a = m • a := rfl\n\n"}
{"name":"Units.smul_isUnit","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nα : Type u_5\ninst✝¹ : Monoid M\ninst✝ : SMul M α\nm : M\nhm : IsUnit m\na : α\n⊢ Eq (HSMul.hSMul hm.unit a) (HSMul.hSMul m a)","decl":"@[simp]\nlemma smul_isUnit [Monoid M] [SMul M α] {m : M} (hm : IsUnit m) (a : α) : hm.unit • a = m • a := rfl\n\n"}
{"name":"IsAddUnit.neg_vadd","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"α : Type u_5\ninst✝ : AddMonoid α\na : α\nh : IsAddUnit a\n⊢ Eq (HVAdd.hVAdd (Neg.neg h.addUnit) a) 0","decl":"@[to_additive]\nlemma _root_.IsUnit.inv_smul [Monoid α] {a : α} (h : IsUnit a) : h.unit⁻¹ • a = 1 := h.val_inv_mul\n\n"}
{"name":"IsUnit.inv_smul","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"α : Type u_5\ninst✝ : Monoid α\na : α\nh : IsUnit a\n⊢ Eq (HSMul.hSMul (Inv.inv h.unit) a) 1","decl":"@[to_additive]\nlemma _root_.IsUnit.inv_smul [Monoid α] {a : α} (h : IsUnit a) : h.unit⁻¹ • a = 1 := h.val_inv_mul\n\n"}
{"name":"AddUnits.instFaithfulVAdd","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nα : Type u_5\ninst✝² : AddMonoid M\ninst✝¹ : VAdd M α\ninst✝ : FaithfulVAdd M α\n⊢ FaithfulVAdd (AddUnits M) α","decl":"@[to_additive]\ninstance [Monoid M] [SMul M α] [FaithfulSMul M α] : FaithfulSMul Mˣ α where\n  eq_of_smul_eq_smul h := Units.ext <| eq_of_smul_eq_smul h\n\n"}
{"name":"Units.instFaithfulSMul","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nα : Type u_5\ninst✝² : Monoid M\ninst✝¹ : SMul M α\ninst✝ : FaithfulSMul M α\n⊢ FaithfulSMul (Units M) α","decl":"@[to_additive]\ninstance [Monoid M] [SMul M α] [FaithfulSMul M α] : FaithfulSMul Mˣ α where\n  eq_of_smul_eq_smul h := Units.ext <| eq_of_smul_eq_smul h\n\n"}
{"name":"AddUnits.vaddCommClass_left","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nN : Type u_4\nα : Type u_5\ninst✝³ : AddMonoid M\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass (AddUnits M) N α","decl":"@[to_additive]\ninstance smulCommClass_left [Monoid M] [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass Mˣ N α where smul_comm m n := smul_comm (m : M) n\n\n"}
{"name":"Units.smulCommClass_left","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nN : Type u_4\nα : Type u_5\ninst✝³ : Monoid M\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass (Units M) N α","decl":"@[to_additive]\ninstance smulCommClass_left [Monoid M] [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass Mˣ N α where smul_comm m n := smul_comm (m : M) n\n\n"}
{"name":"Units.smulCommClass_right","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nN : Type u_4\nα : Type u_5\ninst✝³ : Monoid N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M (Units N) α","decl":"@[to_additive]\ninstance smulCommClass_right [Monoid N] [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M Nˣ α where smul_comm m n := smul_comm m (n : N)\n\n"}
{"name":"AddUnits.vaddCommClass_right","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nN : Type u_4\nα : Type u_5\ninst✝³ : AddMonoid N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass M (AddUnits N) α","decl":"@[to_additive]\ninstance smulCommClass_right [Monoid N] [SMul M α] [SMul N α] [SMulCommClass M N α] :\n    SMulCommClass M Nˣ α where smul_comm m n := smul_comm m (n : N)\n\n"}
{"name":"Units.instIsScalarTower","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nN : Type u_4\nα : Type u_5\ninst✝⁴ : Monoid M\ninst✝³ : SMul M N\ninst✝² : SMul M α\ninst✝¹ : SMul N α\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower (Units M) N α","decl":"@[to_additive]\ninstance [Monoid M] [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower Mˣ N α where smul_assoc m n := smul_assoc (m : M) n\n\n"}
{"name":"AddUnits.instIsScalarTower","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"M : Type u_3\nN : Type u_4\nα : Type u_5\ninst✝⁴ : AddMonoid M\ninst✝³ : VAdd M N\ninst✝² : VAdd M α\ninst✝¹ : VAdd N α\ninst✝ : VAddAssocClass M N α\n⊢ VAddAssocClass (AddUnits M) N α","decl":"@[to_additive]\ninstance [Monoid M] [SMul M N] [SMul M α] [SMul N α] [IsScalarTower M N α] :\n    IsScalarTower Mˣ N α where smul_assoc m n := smul_assoc (m : M) n\n\n"}
{"name":"Units.val_smul","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\ninst✝⁴ : Group G\ninst✝³ : Monoid M\ninst✝² : MulAction G M\ninst✝¹ : SMulCommClass G M M\ninst✝ : IsScalarTower G M M\ng : G\nm : Units M\n⊢ Eq (↑(HSMul.hSMul g m)) (HSMul.hSMul g ↑m)","decl":"@[to_additive (attr := simp)]\nlemma val_smul [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M]\n    (g : G) (m : Mˣ) : ↑(g • m) = g • (m : M) := rfl\n\n"}
{"name":"AddUnits.val_vadd","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\ninst✝⁴ : AddGroup G\ninst✝³ : AddMonoid M\ninst✝² : AddAction G M\ninst✝¹ : VAddCommClass G M M\ninst✝ : VAddAssocClass G M M\ng : G\nm : AddUnits M\n⊢ Eq (↑(HVAdd.hVAdd g m)) (HVAdd.hVAdd g ↑m)","decl":"@[to_additive (attr := simp)]\nlemma val_smul [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M]\n    (g : G) (m : Mˣ) : ↑(g • m) = g • (m : M) := rfl\n\n"}
{"name":"Units.smul_inv","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\ninst✝⁴ : Group G\ninst✝³ : Monoid M\ninst✝² : MulAction G M\ninst✝¹ : SMulCommClass G M M\ninst✝ : IsScalarTower G M M\ng : G\nm : Units M\n⊢ Eq (Inv.inv (HSMul.hSMul g m)) (HSMul.hSMul (Inv.inv g) (Inv.inv m))","decl":"/-- Note that this lemma exists more generally as the global `smul_inv` -/\n@[to_additive (attr := simp)]\nlemma smul_inv [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M]\n    (g : G) (m : Mˣ) : (g • m)⁻¹ = g⁻¹ • m⁻¹ := ext rfl\n\n"}
{"name":"AddUnits.vadd_neg","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\ninst✝⁴ : AddGroup G\ninst✝³ : AddMonoid M\ninst✝² : AddAction G M\ninst✝¹ : VAddCommClass G M M\ninst✝ : VAddAssocClass G M M\ng : G\nm : AddUnits M\n⊢ Eq (Neg.neg (HVAdd.hVAdd g m)) (HVAdd.hVAdd (Neg.neg g) (Neg.neg m))","decl":"/-- Note that this lemma exists more generally as the global `smul_inv` -/\n@[to_additive (attr := simp)]\nlemma smul_inv [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M]\n    (g : G) (m : Mˣ) : (g • m)⁻¹ = g⁻¹ • m⁻¹ := ext rfl\n\n"}
{"name":"AddUnits.vaddCommClass'","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nH : Type u_2\nM : Type u_3\ninst✝⁹ : AddGroup G\ninst✝⁸ : AddGroup H\ninst✝⁷ : AddMonoid M\ninst✝⁶ : AddAction G M\ninst✝⁵ : VAddCommClass G M M\ninst✝⁴ : AddAction H M\ninst✝³ : VAddCommClass H M M\ninst✝² : VAddAssocClass G M M\ninst✝¹ : VAddAssocClass H M M\ninst✝ : VAddCommClass G H M\n⊢ VAddCommClass G H (AddUnits M)","decl":"/-- Transfer `SMulCommClass G H M` to `SMulCommClass G H Mˣ`. -/\n@[to_additive \"Transfer `VAddCommClass G H M` to `VAddCommClass G H (AddUnits M)`.\"]\ninstance smulCommClass' [Group G] [Group H] [Monoid M] [MulAction G M] [SMulCommClass G M M]\n    [MulAction H M] [SMulCommClass H M M] [IsScalarTower G M M] [IsScalarTower H M M]\n    [SMulCommClass G H M] :\n    SMulCommClass G H Mˣ where smul_comm g h m := Units.ext <| smul_comm g h (m : M)\n\n"}
{"name":"Units.smulCommClass'","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nH : Type u_2\nM : Type u_3\ninst✝⁹ : Group G\ninst✝⁸ : Group H\ninst✝⁷ : Monoid M\ninst✝⁶ : MulAction G M\ninst✝⁵ : SMulCommClass G M M\ninst✝⁴ : MulAction H M\ninst✝³ : SMulCommClass H M M\ninst✝² : IsScalarTower G M M\ninst✝¹ : IsScalarTower H M M\ninst✝ : SMulCommClass G H M\n⊢ SMulCommClass G H (Units M)","decl":"/-- Transfer `SMulCommClass G H M` to `SMulCommClass G H Mˣ`. -/\n@[to_additive \"Transfer `VAddCommClass G H M` to `VAddCommClass G H (AddUnits M)`.\"]\ninstance smulCommClass' [Group G] [Group H] [Monoid M] [MulAction G M] [SMulCommClass G M M]\n    [MulAction H M] [SMulCommClass H M M] [IsScalarTower G M M] [IsScalarTower H M M]\n    [SMulCommClass G H M] :\n    SMulCommClass G H Mˣ where smul_comm g h m := Units.ext <| smul_comm g h (m : M)\n\n"}
{"name":"AddUnits.isScalarTower'","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nH : Type u_2\nM : Type u_3\ninst✝¹⁰ : VAdd G H\ninst✝⁹ : AddGroup G\ninst✝⁸ : AddGroup H\ninst✝⁷ : AddMonoid M\ninst✝⁶ : AddAction G M\ninst✝⁵ : VAddCommClass G M M\ninst✝⁴ : AddAction H M\ninst✝³ : VAddCommClass H M M\ninst✝² : VAddAssocClass G M M\ninst✝¹ : VAddAssocClass H M M\ninst✝ : VAddAssocClass G H M\n⊢ VAddAssocClass G H (AddUnits M)","decl":"/-- Transfer `IsScalarTower G H M` to `IsScalarTower G H Mˣ`. -/\n@[to_additive \"Transfer `VAddAssocClass G H M` to `VAddAssocClass G H (AddUnits M)`.\"]\ninstance isScalarTower' [SMul G H] [Group G] [Group H] [Monoid M] [MulAction G M]\n    [SMulCommClass G M M] [MulAction H M] [SMulCommClass H M M] [IsScalarTower G M M]\n    [IsScalarTower H M M] [IsScalarTower G H M] :\n    IsScalarTower G H Mˣ where smul_assoc g h m := Units.ext <| smul_assoc g h (m : M)\n\n"}
{"name":"Units.isScalarTower'","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nH : Type u_2\nM : Type u_3\ninst✝¹⁰ : SMul G H\ninst✝⁹ : Group G\ninst✝⁸ : Group H\ninst✝⁷ : Monoid M\ninst✝⁶ : MulAction G M\ninst✝⁵ : SMulCommClass G M M\ninst✝⁴ : MulAction H M\ninst✝³ : SMulCommClass H M M\ninst✝² : IsScalarTower G M M\ninst✝¹ : IsScalarTower H M M\ninst✝ : IsScalarTower G H M\n⊢ IsScalarTower G H (Units M)","decl":"/-- Transfer `IsScalarTower G H M` to `IsScalarTower G H Mˣ`. -/\n@[to_additive \"Transfer `VAddAssocClass G H M` to `VAddAssocClass G H (AddUnits M)`.\"]\ninstance isScalarTower' [SMul G H] [Group G] [Group H] [Monoid M] [MulAction G M]\n    [SMulCommClass G M M] [MulAction H M] [SMulCommClass H M M] [IsScalarTower G M M]\n    [IsScalarTower H M M] [IsScalarTower G H M] :\n    IsScalarTower G H Mˣ where smul_assoc g h m := Units.ext <| smul_assoc g h (m : M)\n\n"}
{"name":"Units.isScalarTower'_left","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\nα : Type u_5\ninst✝⁷ : Group G\ninst✝⁶ : Monoid M\ninst✝⁵ : MulAction G M\ninst✝⁴ : SMul M α\ninst✝³ : SMul G α\ninst✝² : SMulCommClass G M M\ninst✝¹ : IsScalarTower G M M\ninst✝ : IsScalarTower G M α\n⊢ IsScalarTower G (Units M) α","decl":"/-- Transfer `IsScalarTower G M α` to `IsScalarTower G Mˣ α`. -/\n@[to_additive \"Transfer `VAddAssocClass G M α` to `VAddAssocClass G (AddUnits M) α`.\"]\ninstance isScalarTower'_left [Group G] [Monoid M] [MulAction G M] [SMul M α] [SMul G α]\n    [SMulCommClass G M M] [IsScalarTower G M M] [IsScalarTower G M α] :\n    IsScalarTower G Mˣ α where smul_assoc g m := smul_assoc g (m : M)\n\n-- Just to prove this transfers a particularly useful instance.\n"}
{"name":"AddUnits.isScalarTower'_left","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\nα : Type u_5\ninst✝⁷ : AddGroup G\ninst✝⁶ : AddMonoid M\ninst✝⁵ : AddAction G M\ninst✝⁴ : VAdd M α\ninst✝³ : VAdd G α\ninst✝² : VAddCommClass G M M\ninst✝¹ : VAddAssocClass G M M\ninst✝ : VAddAssocClass G M α\n⊢ VAddAssocClass G (AddUnits M) α","decl":"/-- Transfer `IsScalarTower G M α` to `IsScalarTower G Mˣ α`. -/\n@[to_additive \"Transfer `VAddAssocClass G M α` to `VAddAssocClass G (AddUnits M) α`.\"]\ninstance isScalarTower'_left [Group G] [Monoid M] [MulAction G M] [SMul M α] [SMul G α]\n    [SMulCommClass G M M] [IsScalarTower G M M] [IsScalarTower G M α] :\n    IsScalarTower G Mˣ α where smul_assoc g m := smul_assoc g (m : M)\n\n-- Just to prove this transfers a particularly useful instance.\n"}
{"name":"IsAddUnit.vadd","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\ninst✝⁴ : AddGroup G\ninst✝³ : AddMonoid M\ninst✝² : AddAction G M\ninst✝¹ : VAddCommClass G M M\ninst✝ : VAddAssocClass G M M\nm : M\ng : G\nh : IsAddUnit m\n⊢ IsAddUnit (HVAdd.hVAdd g m)","decl":"@[to_additive]\nlemma IsUnit.smul [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M]\n    {m : M} (g : G) (h : IsUnit m) : IsUnit (g • m) :=\n  let ⟨u, hu⟩ := h\n  hu ▸ ⟨g • u, Units.val_smul _ _⟩\n"}
{"name":"IsUnit.smul","module":"Mathlib.Algebra.Group.Action.Units","initialProofState":"G : Type u_1\nM : Type u_3\ninst✝⁴ : Group G\ninst✝³ : Monoid M\ninst✝² : MulAction G M\ninst✝¹ : SMulCommClass G M M\ninst✝ : IsScalarTower G M M\nm : M\ng : G\nh : IsUnit m\n⊢ IsUnit (HSMul.hSMul g m)","decl":"@[to_additive]\nlemma IsUnit.smul [Group G] [Monoid M] [MulAction G M] [SMulCommClass G M M] [IsScalarTower G M M]\n    {m : M} (g : G) (h : IsUnit m) : IsUnit (g • m) :=\n  let ⟨u, hu⟩ := h\n  hu ▸ ⟨g • u, Units.val_smul _ _⟩\n"}
