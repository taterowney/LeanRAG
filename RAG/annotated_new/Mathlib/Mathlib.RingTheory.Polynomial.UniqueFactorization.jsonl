{"name":"Polynomial.wfDvdMonoid","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"R : Type u_1\ninst✝ : CommRing R\n⊢ WfDvdMonoid (Polynomial R)","decl":"instance (priority := 100) wfDvdMonoid : WfDvdMonoid R[X] where\n  wf := by\n    classical\n      refine\n        RelHomClass.wellFounded\n          (⟨fun p : R[X] =>\n              ((if p = 0 then ⊤ else ↑p.degree : WithTop (WithBot ℕ)), p.leadingCoeff), ?_⟩ :\n            DvdNotUnit →r Prod.Lex (· < ·) DvdNotUnit)\n          (wellFounded_lt.prod_lex ‹WfDvdMonoid R›.wf)\n      rintro a b ⟨ane0, ⟨c, ⟨not_unit_c, rfl⟩⟩⟩\n      dsimp\n      rw [Polynomial.degree_mul, if_neg ane0]\n      split_ifs with hac\n      · rw [hac, Polynomial.leadingCoeff_zero]\n        apply Prod.Lex.left\n        exact WithTop.coe_lt_top _\n      have cne0 : c ≠ 0 := right_ne_zero_of_mul hac\n      simp only [cne0, ane0, Polynomial.leadingCoeff_mul]\n      by_cases hdeg : c.degree = (0 : ℕ)\n      · simp only [hdeg, Nat.cast_zero, add_zero]\n        refine Prod.Lex.right _ ⟨?_, ⟨c.leadingCoeff, fun unit_c => not_unit_c ?_, rfl⟩⟩\n        · rwa [Ne, Polynomial.leadingCoeff_eq_zero]\n        rw [Polynomial.isUnit_iff, Polynomial.eq_C_of_degree_eq_zero hdeg]\n        use c.leadingCoeff, unit_c\n        rw [Polynomial.leadingCoeff, Polynomial.natDegree_eq_of_degree_eq_some hdeg]\n      · apply Prod.Lex.left\n        rw [Polynomial.degree_eq_natDegree cne0] at *\n        simp only [Nat.cast_inj] at hdeg\n        rw [WithTop.coe_lt_coe, Polynomial.degree_eq_natDegree ane0, ← Nat.cast_add, Nat.cast_lt]\n        exact lt_add_of_pos_right _ (Nat.pos_of_ne_zero hdeg)\n\n"}
{"name":"Polynomial.exists_irreducible_of_degree_pos","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : WfDvdMonoid R\nf : Polynomial R\nhf : LT.lt 0 f.degree\n⊢ Exists fun g => And (Irreducible g) (Dvd.dvd g f)","decl":"theorem exists_irreducible_of_degree_pos (hf : 0 < f.degree) : ∃ g, Irreducible g ∧ g ∣ f :=\n  WfDvdMonoid.exists_irreducible_factor (fun huf => ne_of_gt hf <| degree_eq_zero_of_isUnit huf)\n    fun hf0 => not_lt_of_lt hf <| hf0.symm ▸ (@degree_zero R _).symm ▸ WithBot.bot_lt_coe _\n\n"}
{"name":"Polynomial.exists_irreducible_of_natDegree_pos","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : WfDvdMonoid R\nf : Polynomial R\nhf : LT.lt 0 f.natDegree\n⊢ Exists fun g => And (Irreducible g) (Dvd.dvd g f)","decl":"theorem exists_irreducible_of_natDegree_pos (hf : 0 < f.natDegree) : ∃ g, Irreducible g ∧ g ∣ f :=\n  exists_irreducible_of_degree_pos <| by\n    contrapose! hf\n    exact natDegree_le_of_degree_le hf\n\n"}
{"name":"Polynomial.exists_irreducible_of_natDegree_ne_zero","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"R : Type u_1\ninst✝² : CommRing R\ninst✝¹ : IsDomain R\ninst✝ : WfDvdMonoid R\nf : Polynomial R\nhf : Ne f.natDegree 0\n⊢ Exists fun g => And (Irreducible g) (Dvd.dvd g f)","decl":"theorem exists_irreducible_of_natDegree_ne_zero (hf : f.natDegree ≠ 0) :\n    ∃ g, Irreducible g ∧ g ∣ f :=\n  exists_irreducible_of_natDegree_pos <| Nat.pos_of_ne_zero hf\n\n"}
{"name":"Polynomial.uniqueFactorizationMonoid","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"D : Type u\ninst✝¹ : CommRing D\ninst✝ : IsDomain D\n⊢ UniqueFactorizationMonoid (Polynomial D)","decl":"instance (priority := 100) uniqueFactorizationMonoid : UniqueFactorizationMonoid D[X] := by\n  letI := Classical.arbitrary (NormalizedGCDMonoid D)\n  exact ufm_of_decomposition_of_wfDvdMonoid\n\n"}
{"name":"MvPolynomial.uniqueFactorizationMonoid","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"σ : Type v\nD : Type u\ninst✝¹ : CommRing D\ninst✝ : IsDomain D\n⊢ UniqueFactorizationMonoid (MvPolynomial σ D)","decl":"instance (priority := 100) uniqueFactorizationMonoid :\n    UniqueFactorizationMonoid (MvPolynomial σ D) := by\n  rw [iff_exists_prime_factors]\n  intro a ha; obtain ⟨s, a', rfl⟩ := exists_finset_rename a\n  obtain ⟨w, h, u, hw⟩ :=\n    iff_exists_prime_factors.1 (uniqueFactorizationMonoid_of_fintype s) a' fun h =>\n      ha <| by simp [h]\n  exact\n    ⟨w.map (rename (↑)), fun b hb =>\n      let ⟨b', hb', he⟩ := Multiset.mem_map.1 hb\n      he ▸ (prime_rename_iff (σ := σ) ↑s).2 (h b' hb'),\n      Units.map (@rename s σ D _ (↑)).toRingHom.toMonoidHom u, by\n      erw [Multiset.prod_hom, ← map_mul, hw]⟩\n\n"}
{"name":"Polynomial.exists_monic_irreducible_factor","module":"Mathlib.RingTheory.Polynomial.UniqueFactorization","initialProofState":"F : Type u_1\ninst✝ : Field F\nf : Polynomial F\nhu : Not (IsUnit f)\n⊢ Exists fun g => And g.Monic (And (Irreducible g) (Dvd.dvd g f))","decl":"/-- A polynomial over a field which is not a unit must have a monic irreducible factor.\nSee also `WfDvdMonoid.exists_irreducible_factor`. -/\ntheorem Polynomial.exists_monic_irreducible_factor {F : Type*} [Field F] (f : F[X])\n    (hu : ¬IsUnit f) : ∃ g : F[X], g.Monic ∧ Irreducible g ∧ g ∣ f := by\n  by_cases hf : f = 0\n  · exact ⟨X, monic_X, irreducible_X, hf ▸ dvd_zero X⟩\n  obtain ⟨g, hi, hf⟩ := WfDvdMonoid.exists_irreducible_factor hu hf\n  have ha : Associated g (g * C g.leadingCoeff⁻¹) := associated_mul_unit_right _ _ <|\n    isUnit_C.2 (leadingCoeff_ne_zero.2 hi.ne_zero).isUnit.inv\n  exact ⟨_, monic_mul_leadingCoeff_inv hi.ne_zero, ha.irreducible hi, ha.dvd_iff_dvd_left.1 hf⟩\n"}
