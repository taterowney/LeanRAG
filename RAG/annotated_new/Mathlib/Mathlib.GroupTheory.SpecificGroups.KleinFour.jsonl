{"name":"IsAddKleinFour.card_four","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nself : IsAddKleinFour G\n⊢ Eq (Nat.card G) 4","decl":"/-- An (additive) Klein four-group is an (additive) group of cardinality four and exponent two. -/\nclass IsAddKleinFour (G : Type*) [AddGroup G] : Prop where\n  card_four : Nat.card G = 4\n  exponent_two : AddMonoid.exponent G = 2\n\n"}
{"name":"IsAddKleinFour.exponent_two","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nself : IsAddKleinFour G\n⊢ Eq (AddMonoid.exponent G) 2","decl":"/-- An (additive) Klein four-group is an (additive) group of cardinality four and exponent two. -/\nclass IsAddKleinFour (G : Type*) [AddGroup G] : Prop where\n  card_four : Nat.card G = 4\n  exponent_two : AddMonoid.exponent G = 2\n\n"}
{"name":"IsKleinFour.exponent_two","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝ : Group G\nself : IsKleinFour G\n⊢ Eq (Monoid.exponent G) 2","decl":"/-- A Klein four-group is a group of cardinality four and exponent two. -/\n@[to_additive existing IsAddKleinFour]\nclass IsKleinFour (G : Type*) [Group G] : Prop where\n  card_four : Nat.card G = 4\n  exponent_two : Monoid.exponent G = 2\n\n"}
{"name":"IsKleinFour.card_four","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝ : Group G\nself : IsKleinFour G\n⊢ Eq (Nat.card G) 4","decl":"/-- A Klein four-group is a group of cardinality four and exponent two. -/\n@[to_additive existing IsAddKleinFour]\nclass IsKleinFour (G : Type*) [Group G] : Prop where\n  card_four : Nat.card G = 4\n  exponent_two : Monoid.exponent G = 2\n\n"}
{"name":"instIsAddKleinFourProdZModOfNatNat","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"⊢ IsAddKleinFour (Prod (ZMod 2) (ZMod 2))","decl":"instance : IsAddKleinFour (ZMod 2 × ZMod 2) where\n  card_four := by simp\n  exponent_two := by simp [AddMonoid.exponent_prod]\n\n"}
{"name":"instIsKleinFourDihedralGroupOfNatNat","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"⊢ IsKleinFour (DihedralGroup 2)","decl":"instance : IsKleinFour (DihedralGroup 2) where\n  card_four := by simp only [Nat.card_eq_fintype_card]; rfl\n  exponent_two := by simp [DihedralGroup.exponent]\n\n"}
{"name":"instIsAddKleinFourAdditiveOfIsKleinFour","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsKleinFour G\n⊢ IsAddKleinFour (Additive G)","decl":"instance {G : Type*} [Group G] [IsKleinFour G] :\n    IsAddKleinFour (Additive G) where\n  card_four := by rw [← IsKleinFour.card_four (G := G)]; congr!\n  exponent_two := by simp\n\n"}
{"name":"instIsKleinFourMultiplicativeOfIsAddKleinFour","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsAddKleinFour G\n⊢ IsKleinFour (Multiplicative G)","decl":"instance {G : Type*} [AddGroup G] [IsAddKleinFour G] :\n    IsKleinFour (Multiplicative G) where\n  card_four := by rw [← IsAddKleinFour.card_four (G := G)]; congr!\n  exponent_two := by simp\n\n"}
{"name":"IsAddKleinFour.instFinite","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsAddKleinFour G\n⊢ Finite G","decl":"@[to_additive]\ninstance instFinite {G : Type*} [Group G] [IsKleinFour G] : Finite G :=\n  Nat.finite_of_card_ne_zero <| by norm_num [IsKleinFour.card_four]\n\n"}
{"name":"IsKleinFour.instFinite","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsKleinFour G\n⊢ Finite G","decl":"@[to_additive]\ninstance instFinite {G : Type*} [Group G] [IsKleinFour G] : Finite G :=\n  Nat.finite_of_card_ne_zero <| by norm_num [IsKleinFour.card_four]\n\n"}
{"name":"IsAddKleinFour.card_four'","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝² : AddGroup G\ninst✝¹ : Fintype G\ninst✝ : IsAddKleinFour G\n⊢ Eq (Fintype.card G) 4","decl":"@[to_additive (attr := simp)]\nlemma card_four' {G : Type*} [Group G] [Fintype G] [IsKleinFour G] :\n    Fintype.card G = 4 :=\n  Nat.card_eq_fintype_card (α := G).symm ▸ IsKleinFour.card_four\n\n"}
{"name":"IsKleinFour.card_four'","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝² : Group G\ninst✝¹ : Fintype G\ninst✝ : IsKleinFour G\n⊢ Eq (Fintype.card G) 4","decl":"@[to_additive (attr := simp)]\nlemma card_four' {G : Type*} [Group G] [Fintype G] [IsKleinFour G] :\n    Fintype.card G = 4 :=\n  Nat.card_eq_fintype_card (α := G).symm ▸ IsKleinFour.card_four\n\n"}
{"name":"IsAddKleinFour.not_isAddCyclic","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsAddKleinFour G\n⊢ Not (IsAddCyclic G)","decl":"@[to_additive]\nlemma not_isCyclic : ¬IsCyclic G :=\n  fun h ↦ by simpa using h.exponent_eq_card\n\n"}
{"name":"IsKleinFour.not_isCyclic","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsKleinFour G\n⊢ Not (IsCyclic G)","decl":"@[to_additive]\nlemma not_isCyclic : ¬IsCyclic G :=\n  fun h ↦ by simpa using h.exponent_eq_card\n\n"}
{"name":"IsKleinFour.inv_eq_self","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsKleinFour G\nx : G\n⊢ Eq (Inv.inv x) x","decl":"@[to_additive]\nlemma inv_eq_self (x : G) : x⁻¹ = x := inv_eq_self_of_exponent_two (by simp) x\n\n/- this is not an appropriate global `simp` lemma for a `Prop`-mixin class. Indeed, if it were\nthen every time Lean sees `·⁻¹` it would try to apply `inv_eq_self` which would trigger\ntype class inference to try and synthesize an `IsKleinFour` instance. -/\n"}
{"name":"IsAddKleinFour.neg_eq_self","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsAddKleinFour G\nx : G\n⊢ Eq (Neg.neg x) x","decl":"@[to_additive]\nlemma inv_eq_self (x : G) : x⁻¹ = x := inv_eq_self_of_exponent_two (by simp) x\n\n/- this is not an appropriate global `simp` lemma for a `Prop`-mixin class. Indeed, if it were\nthen every time Lean sees `·⁻¹` it would try to apply `inv_eq_self` which would trigger\ntype class inference to try and synthesize an `IsKleinFour` instance. -/\n"}
{"name":"IsAddKleinFour.add_self","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsAddKleinFour G\nx : G\n⊢ Eq (HAdd.hAdd x x) 0","decl":"@[to_additive]\nlemma mul_self (x : G) : x * x = 1 := by\n  rw [mul_eq_one_iff_eq_inv, inv_eq_self]\n\n"}
{"name":"IsKleinFour.mul_self","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsKleinFour G\nx : G\n⊢ Eq (HMul.hMul x x) 1","decl":"@[to_additive]\nlemma mul_self (x : G) : x * x = 1 := by\n  rw [mul_eq_one_iff_eq_inv, inv_eq_self]\n\n"}
{"name":"IsAddKleinFour.eq_finset_univ","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝³ : AddGroup G\ninst✝² : IsAddKleinFour G\ninst✝¹ : Fintype G\ninst✝ : DecidableEq G\nx y : G\nhx : Ne x 0\nhy : Ne y 0\nhxy : Ne x y\n⊢ Eq (Insert.insert (HAdd.hAdd x y) (Insert.insert x (Insert.insert y (Singleton.singleton 0)))) Finset.univ","decl":"@[to_additive]\nlemma eq_finset_univ [Fintype G] [DecidableEq G]\n    {x y : G} (hx : x ≠ 1) (hy : y ≠ 1) (hxy : x ≠ y) : {x * y, x, y, (1 : G)} = Finset.univ := by\n  apply Finset.eq_univ_of_card\n  rw [card_four']\n  repeat rw [card_insert_of_not_mem]\n  on_goal 4 => simpa using mul_not_mem_of_exponent_two (by simp) hx hy hxy\n  all_goals simp_all\n\n"}
{"name":"IsKleinFour.eq_finset_univ","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : IsKleinFour G\ninst✝¹ : Fintype G\ninst✝ : DecidableEq G\nx y : G\nhx : Ne x 1\nhy : Ne y 1\nhxy : Ne x y\n⊢ Eq (Insert.insert (HMul.hMul x y) (Insert.insert x (Insert.insert y (Singleton.singleton 1)))) Finset.univ","decl":"@[to_additive]\nlemma eq_finset_univ [Fintype G] [DecidableEq G]\n    {x y : G} (hx : x ≠ 1) (hy : y ≠ 1) (hxy : x ≠ y) : {x * y, x, y, (1 : G)} = Finset.univ := by\n  apply Finset.eq_univ_of_card\n  rw [card_four']\n  repeat rw [card_insert_of_not_mem]\n  on_goal 4 => simpa using mul_not_mem_of_exponent_two (by simp) hx hy hxy\n  all_goals simp_all\n\n"}
{"name":"IsAddKleinFour.eq_add_of_ne_all","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\ninst✝ : IsAddKleinFour G\nx y z : G\nhx : Ne x 0\nhy : Ne y 0\nhxy : Ne x y\nhz : Ne z 0\nhzx : Ne z x\nhzy : Ne z y\n⊢ Eq z (HAdd.hAdd x y)","decl":"@[to_additive]\nlemma eq_mul_of_ne_all {x y z : G} (hx : x ≠ 1)\n    (hy : y ≠ 1) (hxy : x ≠ y) (hz : z ≠ 1) (hzx : z ≠ x) (hzy : z ≠ y) : z = x * y := by\n  classical\n  let _ := Fintype.ofFinite G\n  apply eq_of_mem_insert_of_not_mem <| (eq_finset_univ hx hy hxy).symm ▸ mem_univ _\n  simpa only [mem_singleton, mem_insert, not_or] using ⟨hzx, hzy, hz⟩\n\n"}
{"name":"IsKleinFour.eq_mul_of_ne_all","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G : Type u_1\ninst✝¹ : Group G\ninst✝ : IsKleinFour G\nx y z : G\nhx : Ne x 1\nhy : Ne y 1\nhxy : Ne x y\nhz : Ne z 1\nhzx : Ne z x\nhzy : Ne z y\n⊢ Eq z (HMul.hMul x y)","decl":"@[to_additive]\nlemma eq_mul_of_ne_all {x y z : G} (hx : x ≠ 1)\n    (hy : y ≠ 1) (hxy : x ≠ y) (hz : z ≠ 1) (hzx : z ≠ x) (hzy : z ≠ y) : z = x * y := by\n  classical\n  let _ := Fintype.ofFinite G\n  apply eq_of_mem_insert_of_not_mem <| (eq_finset_univ hx hy hxy).symm ▸ mem_univ _\n  simpa only [mem_singleton, mem_insert, not_or] using ⟨hzx, hzy, hz⟩\n\n"}
{"name":"IsAddKleinFour.nonempty_addEquiv","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝³ : AddGroup G₁\ninst✝² : AddGroup G₂\ninst✝¹ : IsAddKleinFour G₁\ninst✝ : IsAddKleinFour G₂\n⊢ Nonempty (AddEquiv G₁ G₂)","decl":"/-- Any two `IsKleinFour` groups are isomorphic. -/\n@[to_additive \"Any two `IsAddKleinFour` groups are isomorphic.\"]\nlemma nonempty_mulEquiv [IsKleinFour G₂] : Nonempty (G₁ ≃* G₂) := by\n  classical\n  let _inst₁ := Fintype.ofFinite G₁\n  let _inst₁ := Fintype.ofFinite G₂\n  exact ⟨mulEquiv ((Fintype.equivOfCardEq <| by simp).setValue 1 1) <| by simp⟩\n\n"}
{"name":"IsKleinFour.nonempty_mulEquiv","module":"Mathlib.GroupTheory.SpecificGroups.KleinFour","initialProofState":"G₁ : Type u_2\nG₂ : Type u_3\ninst✝³ : Group G₁\ninst✝² : Group G₂\ninst✝¹ : IsKleinFour G₁\ninst✝ : IsKleinFour G₂\n⊢ Nonempty (MulEquiv G₁ G₂)","decl":"/-- Any two `IsKleinFour` groups are isomorphic. -/\n@[to_additive \"Any two `IsAddKleinFour` groups are isomorphic.\"]\nlemma nonempty_mulEquiv [IsKleinFour G₂] : Nonempty (G₁ ≃* G₂) := by\n  classical\n  let _inst₁ := Fintype.ofFinite G₁\n  let _inst₁ := Fintype.ofFinite G₂\n  exact ⟨mulEquiv ((Fintype.equivOfCardEq <| by simp).setValue 1 1) <| by simp⟩\n\n"}
