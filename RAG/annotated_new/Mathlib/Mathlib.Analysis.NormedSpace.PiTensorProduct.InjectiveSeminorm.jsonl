{"name":"PiTensorProduct.toDualContinuousMultilinearMap_apply_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : PiTensorProduct 𝕜 fun i => E i\na✝ : ContinuousMultilinearMap 𝕜 E F\n⊢ Eq (((PiTensorProduct.toDualContinuousMultilinearMap F) x) a✝) ((PiTensorProduct.lift a✝.toMultilinearMap) x)","decl":"variable (F) in\n/-- The linear map from `⨂[𝕜] i, Eᵢ` to `ContinuousMultilinearMap 𝕜 E F →L[𝕜] F` sending\n`x` in `⨂[𝕜] i, Eᵢ` to the map `f ↦ f.lift x`.\n-/\n@[simps!]\nnoncomputable def toDualContinuousMultilinearMap : (⨂[𝕜] i, E i) →ₗ[𝕜]\n    ContinuousMultilinearMap 𝕜 E F →L[𝕜] F where\n  toFun x := LinearMap.mkContinuous\n    ((LinearMap.flip (lift (R := 𝕜) (s := E) (E := F)).toLinearMap x) ∘ₗ\n    ContinuousMultilinearMap.toMultilinearMapLinear)\n    (projectiveSeminorm x)\n    (fun _ ↦ by simp only [LinearMap.coe_comp, Function.comp_apply,\n                  ContinuousMultilinearMap.toMultilinearMapLinear_apply, LinearMap.flip_apply,\n                  LinearEquiv.coe_coe]\n                exact norm_eval_le_projectiveSeminorm _ _ _)\n  map_add' x y := by\n    ext _\n    simp only [map_add, LinearMap.mkContinuous_apply, LinearMap.coe_comp, Function.comp_apply,\n      ContinuousMultilinearMap.toMultilinearMapLinear_apply, LinearMap.add_apply,\n      LinearMap.flip_apply, LinearEquiv.coe_coe, ContinuousLinearMap.add_apply]\n  map_smul' a x := by\n    ext _\n    simp only [map_smul, LinearMap.mkContinuous_apply, LinearMap.coe_comp, Function.comp_apply,\n      ContinuousMultilinearMap.toMultilinearMapLinear_apply, LinearMap.smul_apply,\n      LinearMap.flip_apply, LinearEquiv.coe_coe, RingHom.id_apply, ContinuousLinearMap.coe_smul',\n      Pi.smul_apply]\n\n"}
{"name":"PiTensorProduct.toDualContinuousMultilinearMap_le_projectiveSeminorm","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : PiTensorProduct 𝕜 fun i => E i\n⊢ LE.le (Norm.norm ((PiTensorProduct.toDualContinuousMultilinearMap F) x)) (PiTensorProduct.projectiveSeminorm x)","decl":"theorem toDualContinuousMultilinearMap_le_projectiveSeminorm (x : ⨂[𝕜] i, E i) :\n    ‖toDualContinuousMultilinearMap F x‖ ≤ projectiveSeminorm x := by\n  simp only [toDualContinuousMultilinearMap, LinearMap.coe_mk, AddHom.coe_mk]\n  apply LinearMap.mkContinuous_norm_le _ (apply_nonneg _ _)\n\n"}
{"name":"PiTensorProduct.injectiveSeminorm_def","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type u_1\ninst✝³ : Fintype ι\n𝕜 : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type u_3\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ Eq PiTensorProduct.injectiveSeminorm (SupSet.sSup (setOf fun p => Exists fun G => Exists fun x => Exists fun x_1 => Eq p ((normSeminorm 𝕜 (ContinuousLinearMap (RingHom.id 𝕜) (ContinuousMultilinearMap 𝕜 E G) G)).comp (PiTensorProduct.toDualContinuousMultilinearMap G))))","decl":"/-- The injective seminorm on `⨂[𝕜] i, Eᵢ`. Morally, it sends `x` in `⨂[𝕜] i, Eᵢ` to the\n`sup` of the operator norms of the `PiTensorProduct.toDualContinuousMultilinearMap F x`, for all\nnormed vector spaces `F`. In fact, we only take in the same universe as `⨂[𝕜] i, Eᵢ`, and then\nprove in `PiTensorProduct.norm_eval_le_injectiveSeminorm` that this gives the same result.\n-/\nnoncomputable irreducible_def injectiveSeminorm : Seminorm 𝕜 (⨂[𝕜] i, E i) :=\n  sSup {p | ∃ (G : Type (max uι u𝕜 uE)) (_ : SeminormedAddCommGroup G)\n  (_ : NormedSpace 𝕜 G), p = Seminorm.comp (normSeminorm 𝕜 (ContinuousMultilinearMap 𝕜 E G →L[𝕜] G))\n  (toDualContinuousMultilinearMap G (𝕜 := 𝕜) (E := E))}\n\n"}
{"name":"PiTensorProduct.dualSeminorms_bounded","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ BddAbove (setOf fun p => Exists fun G => Exists fun x => Exists fun x_1 => Eq p ((normSeminorm 𝕜 (ContinuousLinearMap (RingHom.id 𝕜) (ContinuousMultilinearMap 𝕜 E G) G)).comp (PiTensorProduct.toDualContinuousMultilinearMap G)))","decl":"lemma dualSeminorms_bounded : BddAbove {p | ∃ (G : Type (max uι u𝕜 uE))\n    (_ : SeminormedAddCommGroup G) (_ : NormedSpace 𝕜 G),\n    p = Seminorm.comp (normSeminorm 𝕜 (ContinuousMultilinearMap 𝕜 E G →L[𝕜] G))\n    (toDualContinuousMultilinearMap G (𝕜 := 𝕜) (E := E))} := by\n  existsi projectiveSeminorm\n  rw [mem_upperBounds]\n  simp only [Set.mem_setOf_eq, forall_exists_index]\n  intro p G _ _ hp\n  rw [hp]\n  intro x\n  simp only [Seminorm.comp_apply, coe_normSeminorm]\n  exact toDualContinuousMultilinearMap_le_projectiveSeminorm _\n\n"}
{"name":"PiTensorProduct.injectiveSeminorm_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nx : PiTensorProduct 𝕜 fun i => E i\n⊢ Eq (PiTensorProduct.injectiveSeminorm x) (iSup fun p => ↑p x)","decl":"theorem injectiveSeminorm_apply (x : ⨂[𝕜] i, E i) :\n    injectiveSeminorm x = ⨆ p : {p | ∃ (G : Type (max uι u𝕜 uE))\n    (_ : SeminormedAddCommGroup G) (_ : NormedSpace 𝕜 G), p = Seminorm.comp (normSeminorm 𝕜\n    (ContinuousMultilinearMap 𝕜 E G →L[𝕜] G))\n    (toDualContinuousMultilinearMap G (𝕜 := 𝕜) (E := E))}, p.1 x := by\n  simpa only [injectiveSeminorm, Set.coe_setOf, Set.mem_setOf_eq]\n    using Seminorm.sSup_apply dualSeminorms_bounded\n\n"}
{"name":"PiTensorProduct.norm_eval_le_injectiveSeminorm","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousMultilinearMap 𝕜 E F\nx : PiTensorProduct 𝕜 fun i => E i\n⊢ LE.le (Norm.norm ((PiTensorProduct.lift f.toMultilinearMap) x)) (HMul.hMul (Norm.norm f) (PiTensorProduct.injectiveSeminorm x))","decl":"theorem norm_eval_le_injectiveSeminorm (f : ContinuousMultilinearMap 𝕜 E F) (x : ⨂[𝕜] i, E i) :\n    ‖lift f.toMultilinearMap x‖ ≤ ‖f‖ * injectiveSeminorm x := by\n    /- If `F` were in `Type (max uι u𝕜 uE)` (which is the type of `⨂[𝕜] i, E i`), then the\n    property that we want to prove would hold by definition of `injectiveSeminorm`. This is\n    not necessarily true, but we will show that there exists a normed vector space `G` in\n    `Type (max uι u𝕜 uE)` and an injective isometry from `G` to `F` such that `f` factors\n    through a continuous multilinear map `f'` from `E = Π i, E i` to `G`, to which we can apply\n    the definition of `injectiveSeminorm`. The desired inequality for `f` then follows\n    immediately.\n    The idea is very simple: the multilinear map `f` corresponds by `PiTensorProduct.lift`\n    to a linear map from `⨂[𝕜] i, E i` to `F`, say `l`. We want to take `G` to be the image of\n    `l`, with the norm induced from that of `F`; to make sure that we are in the correct universe,\n    it is actually more convenient to take `G` equal to the coimage of `l` (i.e. the quotient\n    of `⨂[𝕜] i, E i` by the kernel of `l`), which is canonically isomorphic to its image by\n    `LinearMap.quotKerEquivRange`. -/\n  set G := (⨂[𝕜] i, E i) ⧸ LinearMap.ker (lift f.toMultilinearMap)\n  set G' := LinearMap.range (lift f.toMultilinearMap)\n  set e := LinearMap.quotKerEquivRange (lift f.toMultilinearMap)\n  letI := SeminormedAddCommGroup.induced G G' e\n  letI := NormedSpace.induced 𝕜 G G' e\n  set f'₀ := lift.symm (e.symm.toLinearMap ∘ₗ LinearMap.rangeRestrict (lift f.toMultilinearMap))\n  have hf'₀ : ∀ (x : Π (i : ι), E i), ‖f'₀ x‖ ≤ ‖f‖ * ∏ i, ‖x i‖ := fun x ↦ by\n    change ‖e (f'₀ x)‖ ≤ _\n    simp only [lift_symm, LinearMap.compMultilinearMap_apply, LinearMap.coe_comp,\n        LinearEquiv.coe_coe, Function.comp_apply, LinearEquiv.apply_symm_apply, Submodule.coe_norm,\n        LinearMap.codRestrict_apply, lift.tprod, ContinuousMultilinearMap.coe_coe, e, f'₀]\n    exact f.le_opNorm x\n  set f' := MultilinearMap.mkContinuous f'₀ ‖f‖ hf'₀\n  have hnorm : ‖f'‖ ≤ ‖f‖ := (f'.opNorm_le_iff (norm_nonneg f)).mpr hf'₀\n  have heq : e (lift f'.toMultilinearMap x) = lift f.toMultilinearMap x := by\n    induction x using PiTensorProduct.induction_on with\n    | smul_tprod =>\n      simp only [lift_symm, map_smul, lift.tprod, ContinuousMultilinearMap.coe_coe,\n      MultilinearMap.coe_mkContinuous, LinearMap.compMultilinearMap_apply, LinearMap.coe_comp,\n      LinearEquiv.coe_coe, Function.comp_apply, LinearEquiv.apply_symm_apply, SetLike.val_smul,\n      LinearMap.codRestrict_apply, f', f'₀]\n    | add _ _ hx hy => simp only [map_add, Submodule.coe_add, hx, hy]\n  suffices h : ‖lift f'.toMultilinearMap x‖ ≤ ‖f'‖ * injectiveSeminorm x by\n    change ‖(e (lift f'.toMultilinearMap x)).1‖ ≤ _ at h\n    rw [heq] at h\n    exact le_trans h (mul_le_mul_of_nonneg_right hnorm (apply_nonneg _ _))\n  have hle : Seminorm.comp (normSeminorm 𝕜 (ContinuousMultilinearMap 𝕜 E G →L[𝕜] G))\n      (toDualContinuousMultilinearMap G (𝕜 := 𝕜) (E := E)) ≤ injectiveSeminorm := by\n    simp only [injectiveSeminorm]\n    refine le_csSup dualSeminorms_bounded ?_\n    rw [Set.mem_setOf]\n    existsi G, inferInstance, inferInstance\n    rfl\n  refine le_trans ?_ (mul_le_mul_of_nonneg_left (hle x) (norm_nonneg f'))\n  simp only [Seminorm.comp_apply, coe_normSeminorm, ← toDualContinuousMultilinearMap_apply_apply]\n  rw [mul_comm]\n  exact ContinuousLinearMap.le_opNorm _ _\n\n"}
{"name":"PiTensorProduct.injectiveSeminorm_le_projectiveSeminorm","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ LE.le PiTensorProduct.injectiveSeminorm PiTensorProduct.projectiveSeminorm","decl":"theorem injectiveSeminorm_le_projectiveSeminorm :\n    injectiveSeminorm (𝕜 := 𝕜) (E := E) ≤ projectiveSeminorm := by\n  rw [injectiveSeminorm]\n  refine csSup_le ?_ ?_\n  · existsi 0\n    simp only [Set.mem_setOf_eq]\n    existsi PUnit, inferInstance, inferInstance\n    ext x\n    simp only [Seminorm.zero_apply, Seminorm.comp_apply, coe_normSeminorm]\n    rw [Subsingleton.elim (toDualContinuousMultilinearMap PUnit x) 0, norm_zero]\n  · intro p hp\n    simp only [Set.mem_setOf_eq] at hp\n    obtain ⟨G, _, _, h⟩ := hp\n    rw [h]; intro x; simp only [Seminorm.comp_apply, coe_normSeminorm]\n    exact toDualContinuousMultilinearMap_le_projectiveSeminorm _\n\n"}
{"name":"PiTensorProduct.injectiveSeminorm_tprod_le","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nm : (i : ι) → E i\n⊢ LE.le (PiTensorProduct.injectiveSeminorm ((PiTensorProduct.tprod 𝕜) fun i => m i)) (Finset.univ.prod fun i => Norm.norm (m i))","decl":"theorem injectiveSeminorm_tprod_le (m : Π (i : ι), E i) :\n    injectiveSeminorm (⨂ₜ[𝕜] i, m i) ≤ ∏ i, ‖m i‖ :=\n  le_trans (injectiveSeminorm_le_projectiveSeminorm _) (projectiveSeminorm_tprod_le m)\n\n"}
{"name":"PiTensorProduct.liftEquiv_symm_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nl : ContinuousLinearMap (RingHom.id 𝕜) (PiTensorProduct 𝕜 fun i => E i) F\n⊢ Eq ((PiTensorProduct.liftEquiv 𝕜 E F).symm l) ((PiTensorProduct.lift.symm ↑l).mkContinuous (Norm.norm l) ⋯)","decl":"/-- The linear equivalence between `ContinuousMultilinearMap 𝕜 E F` and `(⨂[𝕜] i, Eᵢ) →L[𝕜] F`\ninduced by `PiTensorProduct.lift`, for every normed space `F`.\n-/\n@[simps]\nnoncomputable def liftEquiv : ContinuousMultilinearMap 𝕜 E F ≃ₗ[𝕜] (⨂[𝕜] i, E i) →L[𝕜] F where\n  toFun f := LinearMap.mkContinuous (lift f.toMultilinearMap) ‖f‖\n    (fun x ↦ norm_eval_le_injectiveSeminorm f x)\n  map_add' f g := by ext _; simp only [ContinuousMultilinearMap.toMultilinearMap_add, map_add,\n    LinearMap.mkContinuous_apply, LinearMap.add_apply, ContinuousLinearMap.add_apply]\n  map_smul' a f := by ext _; simp only [ContinuousMultilinearMap.toMultilinearMap_smul, map_smul,\n    LinearMap.mkContinuous_apply, LinearMap.smul_apply, RingHom.id_apply,\n    ContinuousLinearMap.coe_smul', Pi.smul_apply]\n  invFun l := MultilinearMap.mkContinuous (lift.symm l.toLinearMap) ‖l‖ (fun x ↦ by\n    simp only [lift_symm, LinearMap.compMultilinearMap_apply, ContinuousLinearMap.coe_coe]\n    refine le_trans (ContinuousLinearMap.le_opNorm _ _) (mul_le_mul_of_nonneg_left ?_\n      (norm_nonneg l))\n    exact injectiveSeminorm_tprod_le x)\n  left_inv f := by ext x; simp only [LinearMap.mkContinuous_coe, LinearEquiv.symm_apply_apply,\n      MultilinearMap.coe_mkContinuous, ContinuousMultilinearMap.coe_coe]\n  right_inv l := by\n    rw [← ContinuousLinearMap.coe_inj]\n    apply PiTensorProduct.ext; ext m\n    simp only [lift_symm, LinearMap.mkContinuous_coe, LinearMap.compMultilinearMap_apply,\n      lift.tprod, ContinuousMultilinearMap.coe_coe, MultilinearMap.coe_mkContinuous,\n      ContinuousLinearMap.coe_coe]\n\n"}
{"name":"PiTensorProduct.liftEquiv_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousMultilinearMap 𝕜 E F\n⊢ Eq ((PiTensorProduct.liftEquiv 𝕜 E F) f) ((PiTensorProduct.lift f.toMultilinearMap).mkContinuous (Norm.norm f) ⋯)","decl":"/-- The linear equivalence between `ContinuousMultilinearMap 𝕜 E F` and `(⨂[𝕜] i, Eᵢ) →L[𝕜] F`\ninduced by `PiTensorProduct.lift`, for every normed space `F`.\n-/\n@[simps]\nnoncomputable def liftEquiv : ContinuousMultilinearMap 𝕜 E F ≃ₗ[𝕜] (⨂[𝕜] i, E i) →L[𝕜] F where\n  toFun f := LinearMap.mkContinuous (lift f.toMultilinearMap) ‖f‖\n    (fun x ↦ norm_eval_le_injectiveSeminorm f x)\n  map_add' f g := by ext _; simp only [ContinuousMultilinearMap.toMultilinearMap_add, map_add,\n    LinearMap.mkContinuous_apply, LinearMap.add_apply, ContinuousLinearMap.add_apply]\n  map_smul' a f := by ext _; simp only [ContinuousMultilinearMap.toMultilinearMap_smul, map_smul,\n    LinearMap.mkContinuous_apply, LinearMap.smul_apply, RingHom.id_apply,\n    ContinuousLinearMap.coe_smul', Pi.smul_apply]\n  invFun l := MultilinearMap.mkContinuous (lift.symm l.toLinearMap) ‖l‖ (fun x ↦ by\n    simp only [lift_symm, LinearMap.compMultilinearMap_apply, ContinuousLinearMap.coe_coe]\n    refine le_trans (ContinuousLinearMap.le_opNorm _ _) (mul_le_mul_of_nonneg_left ?_\n      (norm_nonneg l))\n    exact injectiveSeminorm_tprod_le x)\n  left_inv f := by ext x; simp only [LinearMap.mkContinuous_coe, LinearEquiv.symm_apply_apply,\n      MultilinearMap.coe_mkContinuous, ContinuousMultilinearMap.coe_coe]\n  right_inv l := by\n    rw [← ContinuousLinearMap.coe_inj]\n    apply PiTensorProduct.ext; ext m\n    simp only [lift_symm, LinearMap.mkContinuous_coe, LinearMap.compMultilinearMap_apply,\n      lift.tprod, ContinuousMultilinearMap.coe_coe, MultilinearMap.coe_mkContinuous,\n      ContinuousLinearMap.coe_coe]\n\n"}
{"name":"PiTensorProduct.liftIsometry_apply_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousMultilinearMap 𝕜 E F\nx : PiTensorProduct 𝕜 fun i => E i\n⊢ Eq (((PiTensorProduct.liftIsometry 𝕜 E F) f) x) ((PiTensorProduct.lift f.toMultilinearMap) x)","decl":"@[simp]\ntheorem liftIsometry_apply_apply (f : ContinuousMultilinearMap 𝕜 E F) (x : ⨂[𝕜] i, E i) :\n    liftIsometry 𝕜 E F f x = lift f.toMultilinearMap x := by\n  simp only [liftIsometry, LinearIsometryEquiv.coe_mk, liftEquiv_apply,\n    LinearMap.mkContinuous_apply]\n\n"}
{"name":"PiTensorProduct.tprodL_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\na✝ : (i : ι) → E i\n⊢ Eq ((PiTensorProduct.tprodL 𝕜) a✝) ((PiTensorProduct.tprod 𝕜) a✝)","decl":"/-- The canonical continuous multilinear map from `E = Πᵢ Eᵢ` to `⨂[𝕜] i, Eᵢ`.\n-/\n@[simps!]\nnoncomputable def tprodL : ContinuousMultilinearMap 𝕜 E (⨂[𝕜] i, E i) :=\n  (liftIsometry 𝕜 E _).symm (ContinuousLinearMap.id 𝕜 _)\n\n"}
{"name":"PiTensorProduct.tprodL_toFun","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\na✝ : (i : ι) → E i\n⊢ Eq ((PiTensorProduct.tprodL 𝕜) a✝) ((PiTensorProduct.tprod 𝕜) a✝)","decl":"/-- The canonical continuous multilinear map from `E = Πᵢ Eᵢ` to `⨂[𝕜] i, Eᵢ`.\n-/\n@[simps!]\nnoncomputable def tprodL : ContinuousMultilinearMap 𝕜 E (⨂[𝕜] i, E i) :=\n  (liftIsometry 𝕜 E _).symm (ContinuousLinearMap.id 𝕜 _)\n\n"}
{"name":"PiTensorProduct.tprodL_coe","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ Eq (PiTensorProduct.tprodL 𝕜).toMultilinearMap (PiTensorProduct.tprod 𝕜)","decl":"@[simp]\ntheorem tprodL_coe : (tprodL 𝕜).toMultilinearMap = tprod 𝕜 (s := E) := by\n  ext m\n  simp only [ContinuousMultilinearMap.coe_coe, tprodL_toFun]\n\n"}
{"name":"PiTensorProduct.liftIsometry_symm_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝¹ : SeminormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nl : ContinuousLinearMap (RingHom.id 𝕜) (PiTensorProduct 𝕜 fun i => E i) F\n⊢ Eq ((PiTensorProduct.liftIsometry 𝕜 E F).symm l) (l.compContinuousMultilinearMap (PiTensorProduct.tprodL 𝕜))","decl":"@[simp]\ntheorem liftIsometry_symm_apply (l : (⨂[𝕜] i, E i) →L[𝕜] F) :\n    (liftIsometry 𝕜 E F).symm l = l.compContinuousMultilinearMap (tprodL 𝕜) := by\n  ext m\n  change (liftEquiv 𝕜 E F).symm l m = _\n  simp only [liftEquiv_symm_apply, lift_symm, MultilinearMap.coe_mkContinuous,\n    LinearMap.compMultilinearMap_apply, ContinuousLinearMap.coe_coe,\n    ContinuousLinearMap.compContinuousMultilinearMap_coe, Function.comp_apply, tprodL_toFun]\n\n"}
{"name":"PiTensorProduct.liftIsometry_tprodL","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ Eq ((PiTensorProduct.liftIsometry 𝕜 E (PiTensorProduct 𝕜 fun i => E i)) (PiTensorProduct.tprodL 𝕜)) (ContinuousLinearMap.id 𝕜 (PiTensorProduct 𝕜 fun i => E i))","decl":"@[simp]\ntheorem liftIsometry_tprodL :\n    liftIsometry 𝕜 E _ (tprodL 𝕜) = ContinuousLinearMap.id 𝕜 (⨂[𝕜] i, E i) := by\n  ext _\n  simp only [liftIsometry_apply_apply, tprodL_coe, lift_tprod, LinearMap.id_coe, id_eq,\n    ContinuousLinearMap.coe_id']\n\n"}
{"name":"PiTensorProduct.mapL_coe","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\n⊢ Eq (↑(PiTensorProduct.mapL f)) (PiTensorProduct.map fun i => ↑(f i))","decl":"@[simp]\ntheorem mapL_coe : (mapL f).toLinearMap = map (fun i ↦ (f i).toLinearMap) := by\n  ext\n  simp only [mapL, LinearMap.compMultilinearMap_apply, ContinuousLinearMap.coe_coe,\n    liftIsometry_apply_apply, lift.tprod, ContinuousMultilinearMap.coe_coe,\n    ContinuousMultilinearMap.compContinuousLinearMap_apply, tprodL_toFun, map_tprod]\n\n"}
{"name":"PiTensorProduct.mapL_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\nx : PiTensorProduct 𝕜 fun i => E i\n⊢ Eq ((PiTensorProduct.mapL f) x) ((PiTensorProduct.map fun i => ↑(f i)) x)","decl":"@[simp]\ntheorem mapL_apply (x : ⨂[𝕜] i, E i) : mapL f x = map (fun i ↦ (f i).toLinearMap) x := by\n  induction x using PiTensorProduct.induction_on with\n  | smul_tprod =>\n    simp only [mapL, map_smul, liftIsometry_apply_apply, lift.tprod,\n    ContinuousMultilinearMap.coe_coe, ContinuousMultilinearMap.compContinuousLinearMap_apply,\n    tprodL_toFun, map_tprod, ContinuousLinearMap.coe_coe]\n  | add _ _ hx hy => simp only [map_add, hx, hy]\n\n"}
{"name":"PiTensorProduct.mapL_comp","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁷ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝⁵ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝⁴ : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\nE'' : ι → Type u_2\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E' i)\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E'' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E'' i)\ng : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E' i) (E'' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\n⊢ Eq (PiTensorProduct.mapL fun i => (g i).comp (f i)) ((PiTensorProduct.mapL g).comp (PiTensorProduct.mapL f))","decl":"theorem mapL_comp : mapL (fun (i : ι) ↦ g i ∘L f i) = mapL g ∘L mapL f := by\n  apply ContinuousLinearMap.coe_injective\n  ext\n  simp only [mapL_coe, ContinuousLinearMap.coe_comp, LinearMap.compMultilinearMap_apply, map_tprod,\n    LinearMap.coe_comp, ContinuousLinearMap.coe_coe, Function.comp_apply]\n\n"}
{"name":"PiTensorProduct.liftIsometry_comp_mapL","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁷ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝⁵ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝⁴ : (i : ι) → NormedSpace 𝕜 (E i)\nF : Type uF\ninst✝³ : SeminormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\nh : ContinuousMultilinearMap 𝕜 E' F\n⊢ Eq (((PiTensorProduct.liftIsometry 𝕜 E' F) h).comp (PiTensorProduct.mapL f)) ((PiTensorProduct.liftIsometry 𝕜 E F) (h.compContinuousLinearMap f))","decl":"theorem liftIsometry_comp_mapL (h : ContinuousMultilinearMap 𝕜 E' F) :\n    liftIsometry 𝕜 E' F h ∘L mapL f = liftIsometry 𝕜 E F (h.compContinuousLinearMap f) := by\n  apply ContinuousLinearMap.coe_injective\n  ext\n  simp only [ContinuousLinearMap.coe_comp, mapL_coe, LinearMap.compMultilinearMap_apply,\n    LinearMap.coe_comp, ContinuousLinearMap.coe_coe, Function.comp_apply, map_tprod,\n    liftIsometry_apply_apply, lift.tprod, ContinuousMultilinearMap.coe_coe,\n    ContinuousMultilinearMap.compContinuousLinearMap_apply]\n\n"}
{"name":"PiTensorProduct.mapL_id","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ Eq (PiTensorProduct.mapL fun i => ContinuousLinearMap.id 𝕜 (E i)) (ContinuousLinearMap.id 𝕜 (PiTensorProduct 𝕜 fun i => E i))","decl":"@[simp]\ntheorem mapL_id : mapL (fun i ↦ ContinuousLinearMap.id 𝕜 (E i)) = ContinuousLinearMap.id _ _ := by\n  apply ContinuousLinearMap.coe_injective\n  ext\n  simp only [mapL_coe, ContinuousLinearMap.coe_id, map_id, LinearMap.compMultilinearMap_apply,\n    LinearMap.id_coe, id_eq]\n\n"}
{"name":"PiTensorProduct.mapL_one","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\n⊢ Eq (PiTensorProduct.mapL fun i => 1) 1","decl":"@[simp]\ntheorem mapL_one : mapL (fun (i : ι) ↦ (1 : E i →L[𝕜] E i)) = 1 :=\n  mapL_id\n\n"}
{"name":"PiTensorProduct.mapL_mul","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nf₁ f₂ : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E i)\n⊢ Eq (PiTensorProduct.mapL fun i => HMul.hMul (f₁ i) (f₂ i)) (HMul.hMul (PiTensorProduct.mapL f₁) (PiTensorProduct.mapL f₂))","decl":"theorem mapL_mul (f₁ f₂ : Π i, E i →L[𝕜] E i) :\n    mapL (fun i ↦ f₁ i * f₂ i) = mapL f₁ * mapL f₂ :=\n  mapL_comp f₁ f₂\n\n"}
{"name":"PiTensorProduct.mapLMonoidHom_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E i)\n⊢ Eq (PiTensorProduct.mapLMonoidHom f) (PiTensorProduct.mapL f)","decl":"/-- Upgrading `PiTensorProduct.mapL` to a `MonoidHom` when `E = E'`. -/\n@[simps]\nnoncomputable def mapLMonoidHom : (Π i, E i →L[𝕜] E i) →* ((⨂[𝕜] i, E i) →L[𝕜] ⨂[𝕜] i, E i) where\n  toFun := mapL\n  map_one' := mapL_one\n  map_mul' := mapL_mul\n\n"}
{"name":"PiTensorProduct.mapL_pow","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝³ : Fintype ι\n𝕜 : Type u𝕜\ninst✝² : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E i)\nn : Nat\n⊢ Eq (PiTensorProduct.mapL (HPow.hPow f n)) (HPow.hPow (PiTensorProduct.mapL f) n)","decl":"@[simp]\nprotected theorem mapL_pow (f : Π i, E i →L[𝕜] E i) (n : ℕ) :\n    mapL (f ^ n) = mapL f ^ n := MonoidHom.map_pow mapLMonoidHom _ _\n\n-- We redeclare `ι` here, and later dependent arguments,\n-- to avoid the `[Fintype ι]` assumption present throughout the rest of the file.\n"}
{"name":"PiTensorProduct.mapL_add","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁶ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝⁴ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝² : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝¹ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\ninst✝ : DecidableEq ι\ni : ι\nu v : ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\n⊢ Eq (PiTensorProduct.mapL (Function.update f i (HAdd.hAdd u v))) (HAdd.hAdd (PiTensorProduct.mapL (Function.update f i u)) (PiTensorProduct.mapL (Function.update f i v)))","decl":"open Function in\nprotected theorem mapL_add [DecidableEq ι] (i : ι) (u v : E i →L[𝕜] E' i) :\n    mapL (update f i (u + v)) = mapL (update f i u) + mapL (update f i v) := by\n  ext x\n  simp only [mapL_apply, mapL_add_smul_aux, ContinuousLinearMap.coe_add,\n    PiTensorProduct.map_update_add, LinearMap.add_apply, ContinuousLinearMap.add_apply]\n\n"}
{"name":"PiTensorProduct.mapL_smul","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁶ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁵ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝⁴ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝³ : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝² : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝¹ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\ninst✝ : DecidableEq ι\ni : ι\nc : 𝕜\nu : ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\n⊢ Eq (PiTensorProduct.mapL (Function.update f i (HSMul.hSMul c u))) (HSMul.hSMul c (PiTensorProduct.mapL (Function.update f i u)))","decl":"open Function in\nprotected theorem mapL_smul [DecidableEq ι] (i : ι) (c : 𝕜) (u : E i →L[𝕜] E' i) :\n    mapL (update f i (c • u)) = c • mapL (update f i u) := by\n  ext x\n  simp only [mapL_apply, mapL_add_smul_aux, ContinuousLinearMap.coe_smul,\n    PiTensorProduct.map_update_smul, LinearMap.smul_apply, ContinuousLinearMap.coe_smul',\n    Pi.smul_apply]\n\n"}
{"name":"PiTensorProduct.mapL_opNorm","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\n⊢ LE.le (Norm.norm (PiTensorProduct.mapL f)) (Finset.univ.prod fun i => Norm.norm (f i))","decl":"theorem mapL_opNorm : ‖mapL f‖ ≤ ∏ i, ‖f i‖ := by\n  rw [ContinuousLinearMap.opNorm_le_iff (by positivity)]\n  intro x\n  rw [mapL, liftIsometry]\n  simp only [LinearIsometryEquiv.coe_mk, liftEquiv_apply, LinearMap.mkContinuous_apply]\n  refine le_trans (norm_eval_le_injectiveSeminorm _ _)\n    (mul_le_mul_of_nonneg_right ?_ (norm_nonneg x))\n  rw [ContinuousMultilinearMap.opNorm_le_iff (Finset.prod_nonneg (fun _ _ ↦ norm_nonneg _))]\n  intro m\n  simp only [ContinuousMultilinearMap.compContinuousLinearMap_apply]\n  refine le_trans (injectiveSeminorm_tprod_le (fun i ↦ (f i) (m i))) ?_\n  rw [← Finset.prod_mul_distrib]\n  exact Finset.prod_le_prod (fun _ _ ↦ norm_nonneg _) (fun _ _ ↦ ContinuousLinearMap.le_opNorm _ _ )\n\n"}
{"name":"PiTensorProduct.mapLMultilinear_apply_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\na✝ : PiTensorProduct 𝕜 fun i => E i\n⊢ Eq (((PiTensorProduct.mapLMultilinear 𝕜 E E') f) a✝) ((PiTensorProduct.liftAux ((PiTensorProduct.tprodL 𝕜).compContinuousLinearMap f).toMultilinearMap) a✝)","decl":"/-- The tensor of a family of linear maps from `Eᵢ` to `E'ᵢ`, as a continuous multilinear map of\nthe family.\n-/\n@[simps!]\nnoncomputable def mapLMultilinear : ContinuousMultilinearMap 𝕜 (fun (i : ι) ↦ E i →L[𝕜] E' i)\n    ((⨂[𝕜] i, E i) →L[𝕜] ⨂[𝕜] i, E' i) :=\n  MultilinearMap.mkContinuous\n  { toFun := mapL\n    map_update_smul' := fun _ _ _ _ ↦ PiTensorProduct.mapL_smul _ _ _ _\n    map_update_add' := fun _ _ _ _ ↦ PiTensorProduct.mapL_add _ _ _ _ }\n  1 (fun f ↦ by rw [one_mul]; exact mapL_opNorm f)\n\n"}
{"name":"PiTensorProduct.mapLMultilinear_toFun_apply","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\nf : (i : ι) → ContinuousLinearMap (RingHom.id 𝕜) (E i) (E' i)\na✝ : PiTensorProduct 𝕜 fun i => E i\n⊢ Eq (((PiTensorProduct.mapLMultilinear 𝕜 E E') f) a✝) ((PiTensorProduct.liftAux ((PiTensorProduct.tprodL 𝕜).compContinuousLinearMap f).toMultilinearMap) a✝)","decl":"/-- The tensor of a family of linear maps from `Eᵢ` to `E'ᵢ`, as a continuous multilinear map of\nthe family.\n-/\n@[simps!]\nnoncomputable def mapLMultilinear : ContinuousMultilinearMap 𝕜 (fun (i : ι) ↦ E i →L[𝕜] E' i)\n    ((⨂[𝕜] i, E i) →L[𝕜] ⨂[𝕜] i, E' i) :=\n  MultilinearMap.mkContinuous\n  { toFun := mapL\n    map_update_smul' := fun _ _ _ _ ↦ PiTensorProduct.mapL_smul _ _ _ _\n    map_update_add' := fun _ _ _ _ ↦ PiTensorProduct.mapL_add _ _ _ _ }\n  1 (fun f ↦ by rw [one_mul]; exact mapL_opNorm f)\n\n"}
{"name":"PiTensorProduct.mapLMultilinear_opNorm","module":"Mathlib.Analysis.NormedSpace.PiTensorProduct.InjectiveSeminorm","initialProofState":"ι : Type uι\ninst✝⁵ : Fintype ι\n𝕜 : Type u𝕜\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : ι → Type uE\ninst✝³ : (i : ι) → SeminormedAddCommGroup (E i)\ninst✝² : (i : ι) → NormedSpace 𝕜 (E i)\nE' : ι → Type u_1\ninst✝¹ : (i : ι) → SeminormedAddCommGroup (E' i)\ninst✝ : (i : ι) → NormedSpace 𝕜 (E' i)\n⊢ LE.le (Norm.norm (PiTensorProduct.mapLMultilinear 𝕜 E E')) 1","decl":"theorem mapLMultilinear_opNorm : ‖mapLMultilinear 𝕜 E E'‖ ≤ 1 :=\n  MultilinearMap.mkContinuous_norm_le _ zero_le_one _\n\n"}
