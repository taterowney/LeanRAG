{"name":"SnakeLemma.δ_aux","module":"Mathlib.Algebra.Module.SnakeLemma","initialProofState":"R : Type u_3\ninst✝¹² : CommRing R\nM₂ : Type u_4\nM₃ : Type u_5\nN₁ : Type u_2\nN₂ : Type u_1\nN₃ : Type u_7\ninst✝¹¹ : AddCommGroup M₂\ninst✝¹⁰ : Module R M₂\ninst✝⁹ : AddCommGroup M₃\ninst✝⁸ : Module R M₃\ninst✝⁷ : AddCommGroup N₁\ninst✝⁶ : Module R N₁\ninst✝⁵ : AddCommGroup N₂\ninst✝⁴ : Module R N₂\ninst✝³ : AddCommGroup N₃\ninst✝² : Module R N₃\ni₂ : LinearMap (RingHom.id R) M₂ N₂\ni₃ : LinearMap (RingHom.id R) M₃ N₃\nf₂ : LinearMap (RingHom.id R) M₂ M₃\ng₁ : LinearMap (RingHom.id R) N₁ N₂\ng₂ : LinearMap (RingHom.id R) N₂ N₃\nhg : Function.Exact ⇑g₁ ⇑g₂\nh₂ : Eq (g₂.comp i₂) (i₃.comp f₂)\nσ : M₃ → M₂\nhσ : Eq (Function.comp (⇑f₂) σ) id\nρ : N₂ → N₁\nhρ : Eq (Function.comp ρ ⇑g₁) id\nK₃ : Type u_6\ninst✝¹ : AddCommGroup K₃\ninst✝ : Module R K₃\nι₃ : LinearMap (RingHom.id R) K₃ M₃\nhι₃ : Function.Exact ⇑ι₃ ⇑i₃\nx : K₃\n⊢ Eq (g₁ (ρ (i₂ (σ (ι₃ x))))) (i₂ (σ (ι₃ x)))","decl":"include hg hρ h₂ hσ hι₃ in\nlemma SnakeLemma.δ_aux (x : K₃) : g₁ (ρ (i₂ (σ (ι₃ x)))) = i₂ (σ (ι₃ x)) := by\n  obtain ⟨d, hd⟩ : i₂ (σ (ι₃ x)) ∈ range g₁ := by\n    rw [← hg.linearMap_ker_eq, mem_ker, show g₂ (i₂ _) = i₃ (f₂ _) from DFunLike.congr_fun h₂ _,\n      ← @comp_apply _ _ _ f₂ σ, hσ, id_eq, ← i₃.comp_apply,\n      hι₃.linearMap_comp_eq_zero, zero_apply]\n  rw [← hd, ← ρ.comp_apply, hρ, id_eq]\n\n"}
{"name":"SnakeLemma.eq_of_eq","module":"Mathlib.Algebra.Module.SnakeLemma","initialProofState":"R : Type u_3\ninst✝¹⁴ : CommRing R\nM₁ : Type u_8\nM₂ : Type u_2\nM₃ : Type u_1\nN₁ : Type u_6\nN₂ : Type u_5\ninst✝¹³ : AddCommGroup M₁\ninst✝¹² : Module R M₁\ninst✝¹¹ : AddCommGroup M₂\ninst✝¹⁰ : Module R M₂\ninst✝⁹ : AddCommGroup M₃\ninst✝⁸ : Module R M₃\ninst✝⁷ : AddCommGroup N₁\ninst✝⁶ : Module R N₁\ninst✝⁵ : AddCommGroup N₂\ninst✝⁴ : Module R N₂\ni₁ : LinearMap (RingHom.id R) M₁ N₁\ni₂ : LinearMap (RingHom.id R) M₂ N₂\nf₁ : LinearMap (RingHom.id R) M₁ M₂\nf₂ : LinearMap (RingHom.id R) M₂ M₃\nhf : Function.Exact ⇑f₁ ⇑f₂\ng₁ : LinearMap (RingHom.id R) N₁ N₂\nh₁ : Eq (g₁.comp i₁) (i₂.comp f₁)\nρ : N₂ → N₁\nhρ : Eq (Function.comp ρ ⇑g₁) id\nK₃ : Type u_4\nC₁ : Type u_7\ninst✝³ : AddCommGroup K₃\ninst✝² : Module R K₃\ninst✝¹ : AddCommGroup C₁\ninst✝ : Module R C₁\nι₃ : LinearMap (RingHom.id R) K₃ M₃\nπ₁ : LinearMap (RingHom.id R) N₁ C₁\nhπ₁ : Function.Exact ⇑i₁ ⇑π₁\nx : K₃\ny₁ : M₂\nhy₁ : Eq (f₂ y₁) (ι₃ x)\nz₁ : N₁\nhz₁ : Eq (g₁ z₁) (i₂ y₁)\ny₂ : M₂\nhy₂ : Eq (f₂ y₂) (ι₃ x)\nz₂ : N₁\nhz₂ : Eq (g₁ z₂) (i₂ y₂)\n⊢ Eq (π₁ z₁) (π₁ z₂)","decl":"include hf h₁ hρ hπ₁ in\nlemma SnakeLemma.eq_of_eq (x : K₃)\n    (y₁) (hy₁ : f₂ y₁ = ι₃ x) (z₁) (hz₁ : g₁ z₁ = i₂ y₁)\n    (y₂) (hy₂ : f₂ y₂ = ι₃ x) (z₂) (hz₂ : g₁ z₂ = i₂ y₂) : π₁ z₁ = π₁ z₂ := by\n  have := sub_eq_zero.mpr (hy₁.trans hy₂.symm)\n  rw [← map_sub, hf] at this\n  obtain ⟨d, hd⟩ := this\n  rw [← eq_sub_iff_add_eq.mp hd, map_add, ← hz₂, ← sub_eq_iff_eq_add, ← map_sub,\n    ← i₂.comp_apply, ← h₁, LinearMap.comp_apply,\n    (HasLeftInverse.injective ⟨ρ, congr_fun hρ⟩).eq_iff] at hz₁\n  rw [← sub_eq_zero, ← map_sub, hz₁, hπ₁]\n  exact ⟨_, rfl⟩\n\n"}
{"name":"SnakeLemma.δ'_eq","module":"Mathlib.Algebra.Module.SnakeLemma","initialProofState":"R : Type u_3\ninst✝¹² : CommRing R\nM₂ : Type u_1\nM₃ : Type u_2\nN₁ : Type u_4\nN₂ : Type u_5\ninst✝¹¹ : AddCommGroup M₂\ninst✝¹⁰ : Module R M₂\ninst✝⁹ : AddCommGroup M₃\ninst✝⁸ : Module R M₃\ninst✝⁷ : AddCommGroup N₁\ninst✝⁶ : Module R N₁\ninst✝⁵ : AddCommGroup N₂\ninst✝⁴ : Module R N₂\ni₂ : LinearMap (RingHom.id R) M₂ N₂\nf₂ : LinearMap (RingHom.id R) M₂ M₃\ng₁ : LinearMap (RingHom.id R) N₁ N₂\nK₃ : Type u_6\nC₁ : Type u_7\ninst✝³ : AddCommGroup K₃\ninst✝² : Module R K₃\ninst✝¹ : AddCommGroup C₁\ninst✝ : Module R C₁\nι₃ : LinearMap (RingHom.id R) K₃ M₃\nπ₁ : LinearMap (RingHom.id R) N₁ C₁\nhf₂ : Function.Surjective ⇑f₂\nhg₁ : Function.Injective ⇑g₁\nx : K₃\ny : M₂\nhy : Eq (f₂ y) (ι₃ x)\nz : N₁\nhz : Eq (g₁ z) (i₂ y)\n⊢ Eq (sorryAx (Unit → C₁) Bool.true (Function.const Lean.Name Unit.unit ((((((((((Lean.Name.anonymous.num 230).num 4).num 230).num 63).num 4).num 63).str \"_sorry\").str \"_@\").str \"_hyg\").num 2817))) (π₁ z)","decl":"lemma SnakeLemma.δ'_eq (hf₂ : Surjective f₂) (hg₁ : Injective g₁)\n    (x : K₃) (y) (hy : f₂ y = ι₃ x) (z) (hz : g₁ z = i₂ y) :\n    δ' i₁ i₂ i₃ f₁ f₂ hf g₁ g₂ hg h₁ h₂ ι₃ hι₃ π₁ hπ₁ hf₂ hg₁ x = π₁ z :=\n  SnakeLemma.δ_eq _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ‹_› ‹_› _ ‹_›\n\n"}
