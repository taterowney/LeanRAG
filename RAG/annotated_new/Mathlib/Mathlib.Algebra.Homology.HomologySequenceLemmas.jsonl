{"name":"HomologicalComplex.HomologySequence.mapSnakeInput_f₀","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni j : ι\nhij : c.Rel i j\n⊢ Eq (HomologicalComplex.HomologySequence.mapSnakeInput φ hS₁ hS₂ i j hij).f₀ ((HomologicalComplex.homologyFunctor C c i).mapShortComplex.map φ)","decl":"/-- The morphism `snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij` induced by\na morphism `φ : S₁ ⟶ S₂` of short complexes of homological complexes, that\nare short exact (`hS₁ : S₁.ShortExact` and `hS₂ : S₁.ShortExact`). -/\n@[simps]\nnoncomputable def mapSnakeInput (i j : ι) (hij : c.Rel i j) :\n    snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij where\n  f₀ := (homologyFunctor C c i).mapShortComplex.map φ\n  f₁ := (opcyclesFunctor C c i).mapShortComplex.map φ\n  f₂ := (cyclesFunctor C c j).mapShortComplex.map φ\n  f₃ := (homologyFunctor C c j).mapShortComplex.map φ\n\n"}
{"name":"HomologicalComplex.HomologySequence.mapSnakeInput_f₃","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni j : ι\nhij : c.Rel i j\n⊢ Eq (HomologicalComplex.HomologySequence.mapSnakeInput φ hS₁ hS₂ i j hij).f₃ ((HomologicalComplex.homologyFunctor C c j).mapShortComplex.map φ)","decl":"/-- The morphism `snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij` induced by\na morphism `φ : S₁ ⟶ S₂` of short complexes of homological complexes, that\nare short exact (`hS₁ : S₁.ShortExact` and `hS₂ : S₁.ShortExact`). -/\n@[simps]\nnoncomputable def mapSnakeInput (i j : ι) (hij : c.Rel i j) :\n    snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij where\n  f₀ := (homologyFunctor C c i).mapShortComplex.map φ\n  f₁ := (opcyclesFunctor C c i).mapShortComplex.map φ\n  f₂ := (cyclesFunctor C c j).mapShortComplex.map φ\n  f₃ := (homologyFunctor C c j).mapShortComplex.map φ\n\n"}
{"name":"HomologicalComplex.HomologySequence.mapSnakeInput_f₂","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni j : ι\nhij : c.Rel i j\n⊢ Eq (HomologicalComplex.HomologySequence.mapSnakeInput φ hS₁ hS₂ i j hij).f₂ ((HomologicalComplex.cyclesFunctor C c j).mapShortComplex.map φ)","decl":"/-- The morphism `snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij` induced by\na morphism `φ : S₁ ⟶ S₂` of short complexes of homological complexes, that\nare short exact (`hS₁ : S₁.ShortExact` and `hS₂ : S₁.ShortExact`). -/\n@[simps]\nnoncomputable def mapSnakeInput (i j : ι) (hij : c.Rel i j) :\n    snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij where\n  f₀ := (homologyFunctor C c i).mapShortComplex.map φ\n  f₁ := (opcyclesFunctor C c i).mapShortComplex.map φ\n  f₂ := (cyclesFunctor C c j).mapShortComplex.map φ\n  f₃ := (homologyFunctor C c j).mapShortComplex.map φ\n\n"}
{"name":"HomologicalComplex.HomologySequence.mapSnakeInput_f₁","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni j : ι\nhij : c.Rel i j\n⊢ Eq (HomologicalComplex.HomologySequence.mapSnakeInput φ hS₁ hS₂ i j hij).f₁ ((HomologicalComplex.opcyclesFunctor C c i).mapShortComplex.map φ)","decl":"/-- The morphism `snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij` induced by\na morphism `φ : S₁ ⟶ S₂` of short complexes of homological complexes, that\nare short exact (`hS₁ : S₁.ShortExact` and `hS₂ : S₁.ShortExact`). -/\n@[simps]\nnoncomputable def mapSnakeInput (i j : ι) (hij : c.Rel i j) :\n    snakeInput hS₁ i j hij ⟶ snakeInput hS₂ i j hij where\n  f₀ := (homologyFunctor C c i).mapShortComplex.map φ\n  f₁ := (opcyclesFunctor C c i).mapShortComplex.map φ\n  f₂ := (cyclesFunctor C c j).mapShortComplex.map φ\n  f₃ := (homologyFunctor C c j).mapShortComplex.map φ\n\n"}
{"name":"HomologicalComplex.HomologySequence.δ_naturality","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni j : ι\nhij : c.Rel i j\n⊢ Eq (CategoryTheory.CategoryStruct.comp (hS₁.δ i j hij) (HomologicalComplex.homologyMap φ.τ₁ j)) (CategoryTheory.CategoryStruct.comp (HomologicalComplex.homologyMap φ.τ₃ i) (hS₂.δ i j hij))","decl":"@[reassoc]\nlemma δ_naturality (i j : ι) (hij : c.Rel i j) :\n    hS₁.δ i j hij ≫ HomologicalComplex.homologyMap φ.τ₁ _ =\n      HomologicalComplex.homologyMap φ.τ₃ _ ≫ hS₂.δ i j hij :=\n  ShortComplex.SnakeInput.naturality_δ (mapSnakeInput φ hS₁ hS₂ i j hij)\n\n"}
{"name":"HomologicalComplex.HomologySequence.δ_naturality_assoc","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni j : ι\nhij : c.Rel i j\nZ : C\nh : Quiver.Hom (S₂.X₁.homology j) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (hS₁.δ i j hij) (CategoryTheory.CategoryStruct.comp (HomologicalComplex.homologyMap φ.τ₁ j) h)) (CategoryTheory.CategoryStruct.comp (HomologicalComplex.homologyMap φ.τ₃ i) (CategoryTheory.CategoryStruct.comp (hS₂.δ i j hij) h))","decl":"@[reassoc]\nlemma δ_naturality (i j : ι) (hij : c.Rel i j) :\n    hS₁.δ i j hij ≫ HomologicalComplex.homologyMap φ.τ₁ _ =\n      HomologicalComplex.homologyMap φ.τ₃ _ ≫ hS₂.δ i j hij :=\n  ShortComplex.SnakeInput.naturality_δ (mapSnakeInput φ hS₁ hS₂ i j hij)\n\n"}
{"name":"HomologicalComplex.HomologySequence.composableArrows₂_exact","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nhS₁ : S₁.ShortExact\ni : ι\n⊢ (HomologicalComplex.HomologySequence.composableArrows₂ S₁ i).Exact","decl":"lemma composableArrows₂_exact (hS₁ : S₁.ShortExact) (i : ι) :\n    (composableArrows₂ S₁ i).Exact :=\n  (hS₁.homology_exact₂ i).exact_toComposableArrows\n\n"}
{"name":"HomologicalComplex.HomologySequence.composableArrows₅_exact","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nhS₁ : S₁.ShortExact\ni j : ι\nhij : c.Rel i j\n⊢ (HomologicalComplex.HomologySequence.composableArrows₅ hS₁ i j hij).Exact","decl":"lemma composableArrows₅_exact (i j : ι) (hij : c.Rel i j) :\n    (composableArrows₅ hS₁ i j hij).Exact :=\n  exact_of_δ₀ (hS₁.homology_exact₂ i).exact_toComposableArrows\n    (exact_of_δ₀ (hS₁.homology_exact₃ i j hij).exact_toComposableArrows\n      (exact_of_δ₀ (hS₁.homology_exact₁ i j hij).exact_toComposableArrows\n        (hS₁.homology_exact₂ j).exact_toComposableArrows))\n\n"}
{"name":"HomologicalComplex.HomologySequence.mono_homologyMap_τ₃","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni : ι\nh₁ : CategoryTheory.Epi (HomologicalComplex.homologyMap φ.τ₁ i)\nh₂ : CategoryTheory.Mono (HomologicalComplex.homologyMap φ.τ₂ i)\nh₃ : ∀ (j : ι), c.Rel i j → CategoryTheory.Mono (HomologicalComplex.homologyMap φ.τ₁ j)\n⊢ CategoryTheory.Mono (HomologicalComplex.homologyMap φ.τ₃ i)","decl":"lemma mono_homologyMap_τ₃ (i : ι)\n    (h₁ : Epi (homologyMap φ.τ₁ i))\n    (h₂ : Mono (homologyMap φ.τ₂ i))\n    (h₃ : ∀ j, c.Rel i j → Mono (homologyMap φ.τ₁ j)) :\n    Mono (homologyMap φ.τ₃ i) := by\n  by_cases hi : ∃ j, c.Rel i j\n  · obtain ⟨j, hij⟩ := hi\n    apply mono_of_epi_of_mono_of_mono\n      ((δlastFunctor ⋙ δlastFunctor).map (mapComposableArrows₅ φ hS₁ hS₂ i j hij))\n    · exact (composableArrows₅_exact hS₁ i j hij).δlast.δlast\n    · exact (composableArrows₅_exact hS₂ i j hij).δlast.δlast\n    · exact h₁\n    · exact h₂\n    · exact h₃ _ hij\n  · refine mono_of_epi_of_epi_of_mono (mapComposableArrows₂ φ i)\n      (composableArrows₂_exact hS₁ i) (composableArrows₂_exact hS₂ i) ?_ h₁ h₂\n    have := hS₁.epi_g\n    apply epi_homologyMap_of_epi_of_not_rel\n    simpa using hi\n\n"}
{"name":"HomologicalComplex.HomologySequence.epi_homologyMap_τ₃","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni : ι\nh₁ : CategoryTheory.Epi (HomologicalComplex.homologyMap φ.τ₂ i)\nh₂ : ∀ (j : ι), c.Rel i j → CategoryTheory.Epi (HomologicalComplex.homologyMap φ.τ₁ j)\nh₃ : ∀ (j : ι), c.Rel i j → CategoryTheory.Mono (HomologicalComplex.homologyMap φ.τ₂ j)\n⊢ CategoryTheory.Epi (HomologicalComplex.homologyMap φ.τ₃ i)","decl":"lemma epi_homologyMap_τ₃ (i : ι)\n    (h₁ : Epi (homologyMap φ.τ₂ i))\n    (h₂ : ∀ j, c.Rel i j → Epi (homologyMap φ.τ₁ j))\n    (h₃ : ∀ j, c.Rel i j → Mono (homologyMap φ.τ₂ j)) :\n    Epi (homologyMap φ.τ₃ i) := by\n  by_cases hi : ∃ j, c.Rel i j\n  · obtain ⟨j, hij⟩ := hi\n    apply epi_of_epi_of_epi_of_mono\n      ((δ₀Functor ⋙ δlastFunctor).map (mapComposableArrows₅ φ hS₁ hS₂ i j hij))\n    · exact (composableArrows₅_exact hS₁ i j hij).δ₀.δlast\n    · exact (composableArrows₅_exact hS₂ i j hij).δ₀.δlast\n    · exact h₁\n    · exact h₂ j hij\n    · exact h₃ j hij\n  · have := hS₂.epi_g\n    have eq := (homologyFunctor C _ i).congr_map φ.comm₂₃\n    dsimp at eq\n    simp only [homologyMap_comp] at eq\n    have := epi_homologyMap_of_epi_of_not_rel S₂.g i (by simpa using hi)\n    exact epi_of_epi_fac eq.symm\n\n"}
{"name":"HomologicalComplex.HomologySequence.isIso_homologyMap_τ₃","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\ni : ι\nh₁ : CategoryTheory.Epi (HomologicalComplex.homologyMap φ.τ₁ i)\nh₂ : CategoryTheory.IsIso (HomologicalComplex.homologyMap φ.τ₂ i)\nh₃ : ∀ (j : ι), c.Rel i j → CategoryTheory.IsIso (HomologicalComplex.homologyMap φ.τ₁ j)\nh₄ : ∀ (j : ι), c.Rel i j → CategoryTheory.Mono (HomologicalComplex.homologyMap φ.τ₂ j)\n⊢ CategoryTheory.IsIso (HomologicalComplex.homologyMap φ.τ₃ i)","decl":"lemma isIso_homologyMap_τ₃ (i : ι)\n    (h₁ : Epi (homologyMap φ.τ₁ i))\n    (h₂ : IsIso (homologyMap φ.τ₂ i))\n    (h₃ : ∀ j, c.Rel i j → IsIso (homologyMap φ.τ₁ j))\n    (h₄ : ∀ j, c.Rel i j → Mono (homologyMap φ.τ₂ j)) :\n    IsIso (homologyMap φ.τ₃ i) := by\n  have := mono_homologyMap_τ₃ φ hS₁ hS₂ i h₁ (IsIso.mono_of_iso _) (fun j hij => by\n    have := h₃ j hij\n    infer_instance)\n  have := epi_homologyMap_τ₃ φ hS₁ hS₂ i inferInstance (fun j hij => by\n    have := h₃ j hij\n    infer_instance) h₄\n  apply isIso_of_mono_of_epi\n\n"}
{"name":"HomologicalComplex.HomologySequence.quasiIso_τ₃","module":"Mathlib.Algebra.Homology.HomologySequenceLemmas","initialProofState":"C : Type u_1\nι : Type u_2\ninst✝¹ : CategoryTheory.Category.{u_3, u_1} C\ninst✝ : CategoryTheory.Abelian C\nc : ComplexShape ι\nS₁ S₂ : CategoryTheory.ShortComplex (HomologicalComplex C c)\nφ : Quiver.Hom S₁ S₂\nhS₁ : S₁.ShortExact\nhS₂ : S₂.ShortExact\nh₁ : QuasiIso φ.τ₁\nh₂ : QuasiIso φ.τ₂\n⊢ QuasiIso φ.τ₃","decl":"lemma quasiIso_τ₃ (h₁ : QuasiIso φ.τ₁) (h₂ : QuasiIso φ.τ₂) :\n    QuasiIso φ.τ₃ := by\n  rw [quasiIso_iff]\n  intro i\n  rw [quasiIsoAt_iff_isIso_homologyMap]\n  apply isIso_homologyMap_τ₃ φ hS₁ hS₂\n  all_goals infer_instance\n\n"}
