{"name":"SimpleGraph.isClique_universalVerts","module":"Mathlib.Combinatorics.SimpleGraph.UniversalVerts","initialProofState":"V : Type u_1\nG : SimpleGraph V\n⊢ G.IsClique G.universalVerts","decl":"lemma isClique_universalVerts (G : SimpleGraph V) : G.IsClique G.universalVerts :=\n  fun _ _ _ hy hxy ↦ hy hxy.symm\n\n"}
{"name":"SimpleGraph.deleteUniversalVerts_adj","module":"Mathlib.Combinatorics.SimpleGraph.UniversalVerts","initialProofState":"V : Type u_1\nG : SimpleGraph V\nu v : V\n⊢ Eq (G.deleteUniversalVerts.Adj u v) (And (Not (Membership.mem G.universalVerts u)) (And (Not (Membership.mem G.universalVerts v)) (G.Adj u v)))","decl":"/--\nThe subgraph of `G` with the universal vertices removed.\n-/\n@[simps!]\ndef deleteUniversalVerts (G : SimpleGraph V) : Subgraph G :=\n  (⊤ : Subgraph G).deleteVerts G.universalVerts\n\n"}
{"name":"SimpleGraph.deleteUniversalVerts_verts","module":"Mathlib.Combinatorics.SimpleGraph.UniversalVerts","initialProofState":"V : Type u_1\nG : SimpleGraph V\n⊢ Eq G.deleteUniversalVerts.verts (SDiff.sdiff Set.univ G.universalVerts)","decl":"/--\nThe subgraph of `G` with the universal vertices removed.\n-/\n@[simps!]\ndef deleteUniversalVerts (G : SimpleGraph V) : Subgraph G :=\n  (⊤ : Subgraph G).deleteVerts G.universalVerts\n\n"}
{"name":"SimpleGraph.Subgraph.IsMatching.exists_of_universalVerts","module":"Mathlib.Combinatorics.SimpleGraph.UniversalVerts","initialProofState":"V : Type u_1\nG : SimpleGraph V\ninst✝ : Fintype V\ns : Set V\nh : Disjoint G.universalVerts s\nhc : LE.le s.ncard G.universalVerts.ncard\n⊢ Exists fun t => And (HasSubset.Subset t G.universalVerts) (Exists fun M => And (Eq M.verts (Union.union s t)) M.IsMatching)","decl":"lemma Subgraph.IsMatching.exists_of_universalVerts [Fintype V] {s : Set V}\n    (h : Disjoint G.universalVerts s) (hc : s.ncard ≤ G.universalVerts.ncard) :\n    ∃ t ⊆ G.universalVerts, ∃ (M : Subgraph G), M.verts = s ∪ t ∧ M.IsMatching := by\n  obtain ⟨t, ht⟩ := Set.exists_subset_card_eq hc\n  refine ⟨t, ht.1, ?_⟩\n  obtain ⟨f⟩ : Nonempty (s ≃ t) := by\n    rw [← Cardinal.eq, ← t.cast_ncard t.toFinite, ← s.cast_ncard s.toFinite, ht.2]\n  letI hd := Set.disjoint_of_subset_left ht.1 h\n  have hadj (v : s) : G.Adj v (f v) := ht.1 (f v).2 (hd.ne_of_mem (f v).2 v.2)\n  exact Subgraph.IsMatching.exists_of_disjoint_sets_of_equiv hd.symm f hadj\n\n"}
