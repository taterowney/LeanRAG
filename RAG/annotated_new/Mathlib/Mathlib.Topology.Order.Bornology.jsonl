{"name":"orderBornology_isBounded","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns : Set α\ninst✝¹ : Lattice α\ninst✝ : Nonempty α\n⊢ Iff (Bornology.IsBounded s) (And (BddBelow s) (BddAbove s))","decl":"@[simp] lemma orderBornology_isBounded : orderBornology.IsBounded s ↔ BddBelow s ∧ BddAbove s := by\n  simp [IsBounded, IsCobounded, -isCobounded_compl_iff]\n\n"}
{"name":"IsOrderBornology.isBounded_iff_bddBelow_bddAbove","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ninst✝¹ : Bornology α\ninst✝ : Preorder α\nself : IsOrderBornology α\ns : Set α\n⊢ Iff (Bornology.IsBounded s) (And (BddBelow s) (BddAbove s))","decl":"variable (α) [Preorder α] in\n/-- Predicate for a preorder to be equipped with its order-bornology, namely for its bounded sets\nto be the ones that are bounded both above and below. -/\nclass IsOrderBornology : Prop where\n  protected isBounded_iff_bddBelow_bddAbove (s : Set α) : IsBounded s ↔ BddBelow s ∧ BddAbove s\n\n"}
{"name":"isOrderBornology_iff_eq_orderBornology","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ninst✝² : Bornology α\ninst✝¹ : Lattice α\ninst✝ : Nonempty α\n⊢ Iff (IsOrderBornology α) (Eq inst✝² orderBornology)","decl":"lemma isOrderBornology_iff_eq_orderBornology [Lattice α] [Nonempty α] :\n    IsOrderBornology α ↔ ‹Bornology α› = orderBornology := by\n  refine ⟨fun h ↦ ?_, fun h ↦ ⟨fun s ↦ by rw [h, orderBornology_isBounded]⟩⟩\n  ext s\n  exact isBounded_compl_iff.symm.trans (h.1 _)\n\n"}
{"name":"isBounded_iff_bddBelow_bddAbove","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\n⊢ Iff (Bornology.IsBounded s) (And (BddBelow s) (BddAbove s))","decl":"lemma isBounded_iff_bddBelow_bddAbove : IsBounded s ↔ BddBelow s ∧ BddAbove s :=\n  IsOrderBornology.isBounded_iff_bddBelow_bddAbove _\n\n"}
{"name":"Bornology.IsBounded.bddBelow","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\nhs : Bornology.IsBounded s\n⊢ BddBelow s","decl":"protected lemma Bornology.IsBounded.bddBelow (hs : IsBounded s) : BddBelow s :=\n  (isBounded_iff_bddBelow_bddAbove.1 hs).1\n\n"}
{"name":"Bornology.IsBounded.bddAbove","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\nhs : Bornology.IsBounded s\n⊢ BddAbove s","decl":"protected lemma Bornology.IsBounded.bddAbove (hs : IsBounded s) : BddAbove s :=\n  (isBounded_iff_bddBelow_bddAbove.1 hs).2\n\n"}
{"name":"BddBelow.isBounded","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\nhs₀ : BddBelow s\nhs₁ : BddAbove s\n⊢ Bornology.IsBounded s","decl":"protected lemma BddBelow.isBounded (hs₀ : BddBelow s) (hs₁ : BddAbove s) : IsBounded s :=\n  isBounded_iff_bddBelow_bddAbove.2 ⟨hs₀, hs₁⟩\n\n"}
{"name":"BddAbove.isBounded","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\nhs₀ : BddAbove s\nhs₁ : BddBelow s\n⊢ Bornology.IsBounded s","decl":"protected lemma BddAbove.isBounded (hs₀ : BddAbove s) (hs₁ : BddBelow s) : IsBounded s :=\n  isBounded_iff_bddBelow_bddAbove.2 ⟨hs₁, hs₀⟩\n\n"}
{"name":"BddBelow.isBounded_inter","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns t : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\nhs : BddBelow s\nht : BddAbove t\n⊢ Bornology.IsBounded (Inter.inter s t)","decl":"lemma BddBelow.isBounded_inter (hs : BddBelow s) (ht : BddAbove t) : IsBounded (s ∩ t) :=\n  (hs.mono inter_subset_left).isBounded <| ht.mono inter_subset_right\n\n"}
{"name":"BddAbove.isBounded_inter","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ns t : Set α\ninst✝² : Bornology α\ninst✝¹ : Preorder α\ninst✝ : IsOrderBornology α\nhs : BddAbove s\nht : BddBelow t\n⊢ Bornology.IsBounded (Inter.inter s t)","decl":"lemma BddAbove.isBounded_inter (hs : BddAbove s) (ht : BddBelow t) : IsBounded (s ∩ t) :=\n  (hs.mono inter_subset_left).isBounded <| ht.mono inter_subset_right\n\n"}
{"name":"OrderDual.instIsOrderBornology","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ninst✝¹ : Bornology α\ninst✝ : Preorder α\n⊢ IsOrderBornology (OrderDual α)","decl":"instance OrderDual.instIsOrderBornology : IsOrderBornology αᵒᵈ where\n  isBounded_iff_bddBelow_bddAbove s := by\n    rw [← isBounded_preimage_toDual, ← bddBelow_preimage_toDual, ← bddAbove_preimage_toDual,\n      isBounded_iff_bddBelow_bddAbove, and_comm]\n\n"}
{"name":"Prod.instIsOrderBornology","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ninst✝⁴ : Bornology α\ninst✝³ : Preorder α\nβ : Type u_2\ninst✝² : Preorder β\ninst✝¹ : Bornology β\ninst✝ : IsOrderBornology β\n⊢ IsOrderBornology (Prod α β)","decl":"instance Prod.instIsOrderBornology {β : Type*} [Preorder β] [Bornology β] [IsOrderBornology β] :\n    IsOrderBornology (α × β) where\n  isBounded_iff_bddBelow_bddAbove s := by\n    rw [← isBounded_image_fst_and_snd, bddBelow_prod, bddAbove_prod, and_and_and_comm,\n      isBounded_iff_bddBelow_bddAbove, isBounded_iff_bddBelow_bddAbove]\n\n"}
{"name":"Pi.instIsOrderBornology","module":"Mathlib.Topology.Order.Bornology","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝² : (i : ι) → Preorder (α i)\ninst✝¹ : (i : ι) → Bornology (α i)\ninst✝ : ∀ (i : ι), IsOrderBornology (α i)\n⊢ IsOrderBornology ((i : ι) → α i)","decl":"instance Pi.instIsOrderBornology {ι : Type*} {α : ι → Type*} [∀ i, Preorder (α i)]\n    [∀ i, Bornology (α i)] [∀ i, IsOrderBornology (α i)] : IsOrderBornology (∀ i, α i) where\n  isBounded_iff_bddBelow_bddAbove s := by\n    simp_rw [← forall_isBounded_image_eval_iff, bddBelow_pi, bddAbove_pi, ← forall_and,\n      isBounded_iff_bddBelow_bddAbove]\n\n"}
{"name":"Bornology.IsBounded.subset_Icc_sInf_sSup","module":"Mathlib.Topology.Order.Bornology","initialProofState":"α : Type u_1\ninst✝² : Bornology α\ninst✝¹ : ConditionallyCompleteLattice α\ninst✝ : IsOrderBornology α\ns : Set α\nhs : Bornology.IsBounded s\n⊢ HasSubset.Subset s (Set.Icc (InfSet.sInf s) (SupSet.sSup s))","decl":"protected lemma Bornology.IsBounded.subset_Icc_sInf_sSup (hs : IsBounded s) :\n    s ⊆ Icc (sInf s) (sSup s) := subset_Icc_csInf_csSup hs.bddBelow hs.bddAbove\n\n"}
