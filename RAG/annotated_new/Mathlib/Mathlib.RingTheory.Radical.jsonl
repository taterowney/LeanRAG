{"name":"Associated.primeFactors_eq","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na b : M\nh : Associated a b\n⊢ Eq (UniqueFactorizationMonoid.primeFactors a) (UniqueFactorizationMonoid.primeFactors b)","decl":"theorem _root_.Associated.primeFactors_eq {a b : M} (h : Associated a b) :\n    primeFactors a = primeFactors b := by\n  unfold primeFactors\n  rw [h.normalizedFactors_eq]\n\n\n"}
{"name":"UniqueFactorizationMonoid.radical_zero_eq","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\n⊢ Eq (UniqueFactorizationMonoid.radical 0) 1","decl":"@[simp]\ntheorem radical_zero_eq : radical (0 : M) = 1 := by\n  classical\n  rw [radical, primeFactors, normalizedFactors_zero, Multiset.toFinset_zero, Finset.prod_empty]\n\n"}
{"name":"UniqueFactorizationMonoid.radical_one_eq","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\n⊢ Eq (UniqueFactorizationMonoid.radical 1) 1","decl":"@[simp]\ntheorem radical_one_eq : radical (1 : M) = 1 := by\n  classical\n  rw [radical, primeFactors, normalizedFactors_one, Multiset.toFinset_zero, Finset.prod_empty]\n\n"}
{"name":"UniqueFactorizationMonoid.radical_eq_of_associated","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na b : M\nh : Associated a b\n⊢ Eq (UniqueFactorizationMonoid.radical a) (UniqueFactorizationMonoid.radical b)","decl":"theorem radical_eq_of_associated {a b : M} (h : Associated a b) : radical a = radical b := by\n  unfold radical\n  rw [h.primeFactors_eq]\n\n"}
{"name":"UniqueFactorizationMonoid.radical_of_isUnit","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na : M\nh : IsUnit a\n⊢ Eq (UniqueFactorizationMonoid.radical a) 1","decl":"theorem radical_of_isUnit {a : M} (h : IsUnit a) : radical a = 1 :=\n  (radical_eq_of_associated (associated_one_iff_isUnit.mpr h)).trans radical_one_eq\n\n"}
{"name":"UniqueFactorizationMonoid.radical_mul_of_isUnit_left","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na u : M\nh : IsUnit u\n⊢ Eq (UniqueFactorizationMonoid.radical (HMul.hMul u a)) (UniqueFactorizationMonoid.radical a)","decl":"theorem radical_mul_of_isUnit_left {a u : M} (h : IsUnit u) : radical (u * a) = radical a :=\n  radical_eq_of_associated (associated_unit_mul_left _ _ h)\n\n"}
{"name":"UniqueFactorizationMonoid.radical_mul_of_isUnit_right","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na u : M\nh : IsUnit u\n⊢ Eq (UniqueFactorizationMonoid.radical (HMul.hMul a u)) (UniqueFactorizationMonoid.radical a)","decl":"theorem radical_mul_of_isUnit_right {a u : M} (h : IsUnit u) : radical (a * u) = radical a :=\n  radical_eq_of_associated (associated_mul_unit_left _ _ h)\n\n"}
{"name":"UniqueFactorizationMonoid.primeFactors_pow","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na : M\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (UniqueFactorizationMonoid.primeFactors (HPow.hPow a n)) (UniqueFactorizationMonoid.primeFactors a)","decl":"theorem primeFactors_pow (a : M) {n : ℕ} (hn : 0 < n) : primeFactors (a ^ n) = primeFactors a := by\n  simp_rw [primeFactors, normalizedFactors_pow, Multiset.toFinset_nsmul _ _ hn.ne']\n\n"}
{"name":"UniqueFactorizationMonoid.radical_pow","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na : M\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (UniqueFactorizationMonoid.radical (HPow.hPow a n)) (UniqueFactorizationMonoid.radical a)","decl":"theorem radical_pow (a : M) {n : Nat} (hn : 0 < n) : radical (a ^ n) = radical a := by\n  simp_rw [radical, primeFactors_pow a hn]\n\n"}
{"name":"UniqueFactorizationMonoid.radical_dvd_self","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na : M\n⊢ Dvd.dvd (UniqueFactorizationMonoid.radical a) a","decl":"theorem radical_dvd_self (a : M) : radical a ∣ a := by\n  classical\n  by_cases ha : a = 0\n  · rw [ha]\n    apply dvd_zero\n  · rw [radical, ← Finset.prod_val, ← (prod_normalizedFactors ha).dvd_iff_dvd_right]\n    apply Multiset.prod_dvd_prod_of_le\n    rw [primeFactors, Multiset.toFinset_val]\n    apply Multiset.dedup_le\n\n"}
{"name":"UniqueFactorizationMonoid.radical_of_prime","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na : M\nha : Prime a\n⊢ Eq (UniqueFactorizationMonoid.radical a) (normalize a)","decl":"theorem radical_of_prime {a : M} (ha : Prime a) : radical a = normalize a := by\n  rw [radical, primeFactors]\n  rw [normalizedFactors_irreducible ha.irreducible]\n  simp only [Multiset.toFinset_singleton, id, Finset.prod_singleton]\n\n"}
{"name":"UniqueFactorizationMonoid.radical_pow_of_prime","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝² : CancelCommMonoidWithZero M\ninst✝¹ : NormalizationMonoid M\ninst✝ : UniqueFactorizationMonoid M\na : M\nha : Prime a\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (UniqueFactorizationMonoid.radical (HPow.hPow a n)) (normalize a)","decl":"theorem radical_pow_of_prime {a : M} (ha : Prime a) {n : ℕ} (hn : 0 < n) :\n    radical (a ^ n) = normalize a := by\n  rw [radical_pow a hn]\n  exact radical_of_prime ha\n\n"}
{"name":"UniqueFactorizationMonoid.radical_ne_zero","module":"Mathlib.RingTheory.Radical","initialProofState":"M : Type u_1\ninst✝³ : CancelCommMonoidWithZero M\ninst✝² : NormalizationMonoid M\ninst✝¹ : UniqueFactorizationMonoid M\na : M\ninst✝ : Nontrivial M\n⊢ Ne (UniqueFactorizationMonoid.radical a) 0","decl":"theorem radical_ne_zero (a : M) [Nontrivial M] : radical a ≠ 0 := by\n  rw [radical, ← Finset.prod_val]\n  apply Multiset.prod_ne_zero\n  rw [primeFactors]\n  simp only [Multiset.toFinset_val, Multiset.mem_dedup]\n  exact zero_not_mem_normalizedFactors _\n\n"}
{"name":"UniqueFactorizationDomain.disjoint_normalizedFactors","module":"Mathlib.RingTheory.Radical","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\ninst✝² : IsDomain R\ninst✝¹ : NormalizationMonoid R\ninst✝ : UniqueFactorizationMonoid R\na b : R\nhc : IsCoprime a b\n⊢ Disjoint (UniqueFactorizationMonoid.normalizedFactors a) (UniqueFactorizationMonoid.normalizedFactors b)","decl":"/-- Coprime elements have disjoint prime factors (as multisets). -/\ntheorem disjoint_normalizedFactors {a b : R} (hc : IsCoprime a b) :\n    Disjoint (normalizedFactors a) (normalizedFactors b) := by\n  rw [Multiset.disjoint_left]\n  intro x hxa hxb\n  have x_dvd_a := dvd_of_mem_normalizedFactors hxa\n  have x_dvd_b := dvd_of_mem_normalizedFactors hxb\n  have xp := prime_of_normalized_factor x hxa\n  exact xp.not_unit (hc.isUnit_of_dvd' x_dvd_a x_dvd_b)\n\n"}
{"name":"UniqueFactorizationDomain.disjoint_primeFactors","module":"Mathlib.RingTheory.Radical","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\ninst✝² : IsDomain R\ninst✝¹ : NormalizationMonoid R\ninst✝ : UniqueFactorizationMonoid R\na b : R\nhc : IsCoprime a b\n⊢ Disjoint (UniqueFactorizationMonoid.primeFactors a) (UniqueFactorizationMonoid.primeFactors b)","decl":"/-- Coprime elements have disjoint prime factors (as finsets). -/\ntheorem disjoint_primeFactors {a b : R} (hc : IsCoprime a b) :\n    Disjoint (primeFactors a) (primeFactors b) := by\n  classical\n  exact Multiset.disjoint_toFinset.mpr (disjoint_normalizedFactors hc)\n\n"}
{"name":"UniqueFactorizationDomain.mul_primeFactors_disjUnion","module":"Mathlib.RingTheory.Radical","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\ninst✝² : IsDomain R\ninst✝¹ : NormalizationMonoid R\ninst✝ : UniqueFactorizationMonoid R\na b : R\nha : Ne a 0\nhb : Ne b 0\nhc : IsCoprime a b\n⊢ Eq (UniqueFactorizationMonoid.primeFactors (HMul.hMul a b)) ((UniqueFactorizationMonoid.primeFactors a).disjUnion (UniqueFactorizationMonoid.primeFactors b) ⋯)","decl":"theorem mul_primeFactors_disjUnion {a b : R} (ha : a ≠ 0) (hb : b ≠ 0)\n    (hc : IsCoprime a b) :\n    primeFactors (a * b) =\n    (primeFactors a).disjUnion (primeFactors b) (disjoint_primeFactors hc) := by\n  classical\n  rw [Finset.disjUnion_eq_union]\n  simp_rw [primeFactors]\n  rw [normalizedFactors_mul ha hb, Multiset.toFinset_add]\n\n"}
{"name":"UniqueFactorizationDomain.radical_neg_one","module":"Mathlib.RingTheory.Radical","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\ninst✝² : IsDomain R\ninst✝¹ : NormalizationMonoid R\ninst✝ : UniqueFactorizationMonoid R\n⊢ Eq (UniqueFactorizationMonoid.radical (-1)) 1","decl":"@[simp]\ntheorem radical_neg_one : radical (-1 : R) = 1 :=\n  radical_of_isUnit isUnit_one.neg\n\n"}
{"name":"UniqueFactorizationDomain.radical_mul","module":"Mathlib.RingTheory.Radical","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\ninst✝² : IsDomain R\ninst✝¹ : NormalizationMonoid R\ninst✝ : UniqueFactorizationMonoid R\na b : R\nhc : IsCoprime a b\n⊢ Eq (UniqueFactorizationMonoid.radical (HMul.hMul a b)) (HMul.hMul (UniqueFactorizationMonoid.radical a) (UniqueFactorizationMonoid.radical b))","decl":"/-- Radical is multiplicative for coprime elements. -/\ntheorem radical_mul {a b : R} (hc : IsCoprime a b) :\n    radical (a * b) = radical a * radical b := by\n  by_cases ha : a = 0\n  · subst ha; rw [isCoprime_zero_left] at hc\n    simp only [zero_mul, radical_zero_eq, one_mul, radical_of_isUnit hc]\n  by_cases hb : b = 0\n  · subst hb; rw [isCoprime_zero_right] at hc\n    simp only [mul_zero, radical_zero_eq, mul_one, radical_of_isUnit hc]\n  simp_rw [radical]\n  rw [mul_primeFactors_disjUnion ha hb hc]\n  rw [Finset.prod_disjUnion (disjoint_primeFactors hc)]\n\n"}
{"name":"UniqueFactorizationDomain.radical_neg","module":"Mathlib.RingTheory.Radical","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\ninst✝² : IsDomain R\ninst✝¹ : NormalizationMonoid R\ninst✝ : UniqueFactorizationMonoid R\na : R\n⊢ Eq (UniqueFactorizationMonoid.radical (Neg.neg a)) (UniqueFactorizationMonoid.radical a)","decl":"theorem radical_neg {a : R} : radical (-a) = radical a :=\n  radical_eq_of_associated Associated.rfl.neg_left\n\n"}
{"name":"EuclideanDomain.radical_mul_divRadical","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na : E\n⊢ Eq (HMul.hMul (UniqueFactorizationMonoid.radical a) (EuclideanDomain.divRadical a)) a","decl":"theorem radical_mul_divRadical (a : E) : radical a * divRadical a = a := by\n  rw [divRadical, ← EuclideanDomain.mul_div_assoc _ (radical_dvd_self a),\n    mul_div_cancel_left₀ _ (radical_ne_zero a)]\n\n"}
{"name":"EuclideanDomain.divRadical_mul_radical","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na : E\n⊢ Eq (HMul.hMul (EuclideanDomain.divRadical a) (UniqueFactorizationMonoid.radical a)) a","decl":"theorem divRadical_mul_radical (a : E) : divRadical a * radical a = a := by\n  rw [mul_comm]\n  exact radical_mul_divRadical a\n\n"}
{"name":"EuclideanDomain.divRadical_ne_zero","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na : E\nha : Ne a 0\n⊢ Ne (EuclideanDomain.divRadical a) 0","decl":"theorem divRadical_ne_zero {a : E} (ha : a ≠ 0) : divRadical a ≠ 0 := by\n  rw [← radical_mul_divRadical a] at ha\n  exact right_ne_zero_of_mul ha\n\n"}
{"name":"EuclideanDomain.divRadical_isUnit","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\nu : E\nhu : IsUnit u\n⊢ IsUnit (EuclideanDomain.divRadical u)","decl":"theorem divRadical_isUnit {u : E} (hu : IsUnit u) : IsUnit (divRadical u) := by\n  rwa [divRadical, radical_of_isUnit hu, EuclideanDomain.div_one]\n\n"}
{"name":"EuclideanDomain.eq_divRadical","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na x : E\nh : Eq (HMul.hMul (UniqueFactorizationMonoid.radical a) x) a\n⊢ Eq x (EuclideanDomain.divRadical a)","decl":"theorem eq_divRadical {a x : E} (h : radical a * x = a) : x = divRadical a := by\n  apply EuclideanDomain.eq_div_of_mul_eq_left (radical_ne_zero a)\n  rwa [mul_comm]\n\n"}
{"name":"EuclideanDomain.divRadical_mul","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na b : E\nhab : IsCoprime a b\n⊢ Eq (EuclideanDomain.divRadical (HMul.hMul a b)) (HMul.hMul (EuclideanDomain.divRadical a) (EuclideanDomain.divRadical b))","decl":"theorem divRadical_mul {a b : E} (hab : IsCoprime a b) :\n    divRadical (a * b) = divRadical a * divRadical b := by\n  symm; apply eq_divRadical\n  rw [radical_mul hab]\n  rw [mul_mul_mul_comm, radical_mul_divRadical, radical_mul_divRadical]\n\n"}
{"name":"EuclideanDomain.divRadical_dvd_self","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na : E\n⊢ Dvd.dvd (EuclideanDomain.divRadical a) a","decl":"theorem divRadical_dvd_self (a : E) : divRadical a ∣ a := by\n  exact Dvd.intro (radical a) (divRadical_mul_radical a)\n\n"}
{"name":"IsCoprime.divRadical","module":"Mathlib.RingTheory.Radical","initialProofState":"E : Type u_1\ninst✝² : EuclideanDomain E\ninst✝¹ : NormalizationMonoid E\ninst✝ : UniqueFactorizationMonoid E\na b : E\nh : IsCoprime a b\n⊢ IsCoprime (EuclideanDomain.divRadical a) (EuclideanDomain.divRadical b)","decl":"theorem _root_.IsCoprime.divRadical {a b : E} (h : IsCoprime a b) :\n    IsCoprime (divRadical a) (divRadical b) := by\n  rw [← radical_mul_divRadical a] at h\n  rw [← radical_mul_divRadical b] at h\n  exact h.of_mul_left_right.of_mul_right_right\n\n"}
