{"name":"CircleDeg1Lift.mk.injEq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"toOrderHom✝ : OrderHom Real Real\nmap_add_one'✝ : ∀ (x : Real), Eq (toOrderHom✝.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (toOrderHom✝.toFun x) 1)\ntoOrderHom : OrderHom Real Real\nmap_add_one' : ∀ (x : Real), Eq (toOrderHom.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (toOrderHom.toFun x) 1)\n⊢ Eq (Eq { toOrderHom := toOrderHom✝, map_add_one' := map_add_one'✝ } { toOrderHom := toOrderHom, map_add_one' := map_add_one' }) (Eq toOrderHom✝ toOrderHom)","decl":"/-- A lift of a monotone degree one map `S¹ → S¹`. -/\nstructure CircleDeg1Lift extends ℝ →o ℝ : Type where\n  map_add_one' : ∀ x, toFun (x + 1) = toFun x + 1\n\n"}
{"name":"CircleDeg1Lift.mk.inj","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"toOrderHom✝ : OrderHom Real Real\nmap_add_one'✝ : ∀ (x : Real), Eq (toOrderHom✝.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (toOrderHom✝.toFun x) 1)\ntoOrderHom : OrderHom Real Real\nmap_add_one' : ∀ (x : Real), Eq (toOrderHom.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (toOrderHom.toFun x) 1)\nx✝ : Eq { toOrderHom := toOrderHom✝, map_add_one' := map_add_one'✝ } { toOrderHom := toOrderHom, map_add_one' := map_add_one' }\n⊢ Eq toOrderHom✝ toOrderHom","decl":"/-- A lift of a monotone degree one map `S¹ → S¹`. -/\nstructure CircleDeg1Lift extends ℝ →o ℝ : Type where\n  map_add_one' : ∀ x, toFun (x + 1) = toFun x + 1\n\n"}
{"name":"CircleDeg1Lift.map_add_one'","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"self : CircleDeg1Lift\nx : Real\n⊢ Eq (self.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (self.toFun x) 1)","decl":"/-- A lift of a monotone degree one map `S¹ → S¹`. -/\nstructure CircleDeg1Lift extends ℝ →o ℝ : Type where\n  map_add_one' : ∀ x, toFun (x + 1) = toFun x + 1\n\n"}
{"name":"CircleDeg1Lift.mk.sizeOf_spec","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"toOrderHom : OrderHom Real Real\nmap_add_one' : ∀ (x : Real), Eq (toOrderHom.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (toOrderHom.toFun x) 1)\n⊢ Eq (SizeOf.sizeOf { toOrderHom := toOrderHom, map_add_one' := map_add_one' }) (HAdd.hAdd 1 (SizeOf.sizeOf toOrderHom))","decl":"/-- A lift of a monotone degree one map `S¹ → S¹`. -/\nstructure CircleDeg1Lift extends ℝ →o ℝ : Type where\n  map_add_one' : ∀ x, toFun (x + 1) = toFun x + 1\n\n"}
{"name":"CircleDeg1Lift.instOrderHomClassReal","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"⊢ OrderHomClass CircleDeg1Lift Real Real","decl":"instance : OrderHomClass CircleDeg1Lift ℝ ℝ where\n  map_rel f _ _ h := f.monotone' h\n\n"}
{"name":"CircleDeg1Lift.coe_mk","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : OrderHom Real Real\nh : ∀ (x : Real), Eq (f.toFun (HAdd.hAdd x 1)) (HAdd.hAdd (f.toFun x) 1)\n⊢ Eq ⇑{ toOrderHom := f, map_add_one' := h } ⇑f","decl":"@[simp] theorem coe_mk (f h) : ⇑(mk f h) = f := rfl\n\n"}
{"name":"CircleDeg1Lift.coe_toOrderHom","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Eq ⇑f.toOrderHom ⇑f","decl":"@[simp] theorem coe_toOrderHom : ⇑f.toOrderHom = f := rfl\n\n"}
{"name":"CircleDeg1Lift.monotone","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Monotone ⇑f","decl":"protected theorem monotone : Monotone f := f.monotone'\n\n"}
{"name":"CircleDeg1Lift.mono","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx y : Real\nh : LE.le x y\n⊢ LE.le (f x) (f y)","decl":"@[mono] theorem mono {x y} (h : x ≤ y) : f x ≤ f y := f.monotone h\n\n"}
{"name":"CircleDeg1Lift.strictMono_iff_injective","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Iff (StrictMono ⇑f) (Function.Injective ⇑f)","decl":"theorem strictMono_iff_injective : StrictMono f ↔ Injective f :=\n  f.monotone.strictMono_iff_injective\n\n"}
{"name":"CircleDeg1Lift.map_add_one","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ Eq (f (HAdd.hAdd x 1)) (HAdd.hAdd (f x) 1)","decl":"@[simp]\ntheorem map_add_one : ∀ x, f (x + 1) = f x + 1 :=\n  f.map_add_one'\n\n"}
{"name":"CircleDeg1Lift.map_one_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ Eq (f (HAdd.hAdd 1 x)) (HAdd.hAdd 1 (f x))","decl":"@[simp]\ntheorem map_one_add (x : ℝ) : f (1 + x) = 1 + f x := by rw [add_comm, map_add_one, add_comm 1]\n\n"}
{"name":"CircleDeg1Lift.ext_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ Iff (Eq f g) (∀ (x : Real), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext ⦃f g : CircleDeg1Lift⦄ (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CircleDeg1Lift.ext","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nh : ∀ (x : Real), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext ⦃f g : CircleDeg1Lift⦄ (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CircleDeg1Lift.coe_mul","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ Eq (⇑(HMul.hMul f g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_mul : ⇑(f * g) = f ∘ g :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.mul_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nx : Real\n⊢ Eq ((HMul.hMul f g) x) (f (g x))","decl":"theorem mul_apply (x) : (f * g) x = f (g x) :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.coe_one","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"⊢ Eq (⇑1) id","decl":"@[simp]\ntheorem coe_one : ⇑(1 : CircleDeg1Lift) = id :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.units_inv_apply_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\nx : Real\n⊢ Eq (↑(Inv.inv f) (↑f x)) x","decl":"@[simp]\ntheorem units_inv_apply_apply (f : CircleDeg1Liftˣ) (x : ℝ) :\n    (f⁻¹ : CircleDeg1Liftˣ) (f x) = x := by simp only [← mul_apply, f.inv_mul, coe_one, id]\n\n"}
{"name":"CircleDeg1Lift.units_apply_inv_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\nx : Real\n⊢ Eq (↑f (↑(Inv.inv f) x)) x","decl":"@[simp]\ntheorem units_apply_inv_apply (f : CircleDeg1Liftˣ) (x : ℝ) :\n    f ((f⁻¹ : CircleDeg1Liftˣ) x) = x := by simp only [← mul_apply, f.mul_inv, coe_one, id]\n\n"}
{"name":"CircleDeg1Lift.coe_toOrderIso","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\n⊢ Eq ⇑(CircleDeg1Lift.toOrderIso f) ⇑↑f","decl":"@[simp]\ntheorem coe_toOrderIso (f : CircleDeg1Liftˣ) : ⇑(toOrderIso f) = f :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.coe_toOrderIso_symm","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\n⊢ Eq ⇑(CircleDeg1Lift.toOrderIso f).symm ⇑↑(Inv.inv f)","decl":"@[simp]\ntheorem coe_toOrderIso_symm (f : CircleDeg1Liftˣ) :\n    ⇑(toOrderIso f).symm = (f⁻¹ : CircleDeg1Liftˣ) :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.coe_toOrderIso_inv","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\n⊢ Eq ⇑(Inv.inv (CircleDeg1Lift.toOrderIso f)) ⇑↑(Inv.inv f)","decl":"@[simp]\ntheorem coe_toOrderIso_inv (f : CircleDeg1Liftˣ) : ⇑(toOrderIso f)⁻¹ = (f⁻¹ : CircleDeg1Liftˣ) :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.isUnit_iff_bijective","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Iff (IsUnit f) (Function.Bijective ⇑f)","decl":"theorem isUnit_iff_bijective {f : CircleDeg1Lift} : IsUnit f ↔ Bijective f :=\n  ⟨fun ⟨u, h⟩ => h ▸ (toOrderIso u).bijective, fun h =>\n    Units.isUnit\n      { val := f\n        inv :=\n          { toFun := (Equiv.ofBijective f h).symm\n            monotone' := fun x y hxy =>\n              (f.strictMono_iff_injective.2 h.1).le_iff_le.1\n                (by simp only [Equiv.ofBijective_apply_symm_apply f h, hxy])\n            map_add_one' := fun x =>\n              h.1 <| by simp only [Equiv.ofBijective_apply_symm_apply f, f.map_add_one] }\n        val_inv := ext <| Equiv.ofBijective_apply_symm_apply f h\n        inv_val := ext <| Equiv.ofBijective_symm_apply_apply f h }⟩\n\n"}
{"name":"CircleDeg1Lift.coe_pow","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ Eq (⇑(HPow.hPow f n)) (Nat.iterate (⇑f) n)","decl":"theorem coe_pow : ∀ n : ℕ, ⇑(f ^ n) = f^[n]\n  | 0 => rfl\n  | n + 1 => by\n    ext x\n    simp [coe_pow n, pow_succ]\n\n"}
{"name":"CircleDeg1Lift.semiconjBy_iff_semiconj","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g₁ g₂ : CircleDeg1Lift\n⊢ Iff (SemiconjBy f g₁ g₂) (Function.Semiconj ⇑f ⇑g₁ ⇑g₂)","decl":"theorem semiconjBy_iff_semiconj {f g₁ g₂ : CircleDeg1Lift} :\n    SemiconjBy f g₁ g₂ ↔ Semiconj f g₁ g₂ :=\n  CircleDeg1Lift.ext_iff\n\n"}
{"name":"CircleDeg1Lift.commute_iff_commute","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ Iff (Commute f g) (Function.Commute ⇑f ⇑g)","decl":"theorem commute_iff_commute {f g : CircleDeg1Lift} : Commute f g ↔ Function.Commute f g :=\n  CircleDeg1Lift.ext_iff\n\n"}
{"name":"CircleDeg1Lift.translate_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"x y : Real\n⊢ Eq (↑(CircleDeg1Lift.translate (Multiplicative.ofAdd x)) y) (HAdd.hAdd x y)","decl":"@[simp]\ntheorem translate_apply (x y : ℝ) : translate (Multiplicative.ofAdd x) y = x + y :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.translate_inv_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"x y : Real\n⊢ Eq (↑(Inv.inv (CircleDeg1Lift.translate (Multiplicative.ofAdd x))) y) (HAdd.hAdd (Neg.neg x) y)","decl":"@[simp]\ntheorem translate_inv_apply (x y : ℝ) : (translate <| Multiplicative.ofAdd x)⁻¹ y = -x + y :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.translate_zpow","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"x : Real\nn : Int\n⊢ Eq (HPow.hPow (CircleDeg1Lift.translate (Multiplicative.ofAdd x)) n) (CircleDeg1Lift.translate (Multiplicative.ofAdd (HMul.hMul (↑n) x)))","decl":"@[simp]\ntheorem translate_zpow (x : ℝ) (n : ℤ) :\n    translate (Multiplicative.ofAdd x) ^ n = translate (Multiplicative.ofAdd <| ↑n * x) := by\n  simp only [← zsmul_eq_mul, ofAdd_zsmul, MonoidHom.map_zpow]\n\n"}
{"name":"CircleDeg1Lift.translate_pow","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"x : Real\nn : Nat\n⊢ Eq (HPow.hPow (CircleDeg1Lift.translate (Multiplicative.ofAdd x)) n) (CircleDeg1Lift.translate (Multiplicative.ofAdd (HMul.hMul (↑n) x)))","decl":"@[simp]\ntheorem translate_pow (x : ℝ) (n : ℕ) :\n    translate (Multiplicative.ofAdd x) ^ n = translate (Multiplicative.ofAdd <| ↑n * x) :=\n  translate_zpow x n\n\n"}
{"name":"CircleDeg1Lift.translate_iterate","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"x : Real\nn : Nat\n⊢ Eq (Nat.iterate (⇑↑(CircleDeg1Lift.translate (Multiplicative.ofAdd x))) n) ⇑↑(CircleDeg1Lift.translate (Multiplicative.ofAdd (HMul.hMul (↑n) x)))","decl":"@[simp]\ntheorem translate_iterate (x : ℝ) (n : ℕ) :\n    (translate (Multiplicative.ofAdd x))^[n] = translate (Multiplicative.ofAdd <| ↑n * x) := by\n  rw [← coe_pow, ← Units.val_pow_eq_pow_val, translate_pow]\n\n"}
{"name":"CircleDeg1Lift.commute_nat_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ Function.Commute ⇑f fun x => HAdd.hAdd (↑n) x","decl":"theorem commute_nat_add (n : ℕ) : Function.Commute f (n + ·) := by\n  simpa only [nsmul_one, add_left_iterate] using Function.Commute.iterate_right f.map_one_add n\n\n"}
{"name":"CircleDeg1Lift.commute_add_nat","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ Function.Commute ⇑f fun x => HAdd.hAdd x ↑n","decl":"theorem commute_add_nat (n : ℕ) : Function.Commute f (· + n) := by\n  simp only [add_comm _ (n : ℝ), f.commute_nat_add n]\n\n"}
{"name":"CircleDeg1Lift.commute_sub_nat","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ Function.Commute ⇑f fun x => HSub.hSub x ↑n","decl":"theorem commute_sub_nat (n : ℕ) : Function.Commute f (· - n) := by\n  simpa only [sub_eq_add_neg] using\n    (f.commute_add_nat n).inverses_right (Equiv.addRight _).right_inv (Equiv.addRight _).left_inv\n\n"}
{"name":"CircleDeg1Lift.commute_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Int\n⊢ Function.Commute ⇑f fun x => HAdd.hAdd x ↑n","decl":"theorem commute_add_int : ∀ n : ℤ, Function.Commute f (· + n)\n  | (n : ℕ) => f.commute_add_nat n\n  | -[n+1] => by simpa [sub_eq_add_neg] using f.commute_sub_nat (n + 1)\n\n"}
{"name":"CircleDeg1Lift.commute_int_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Int\n⊢ Function.Commute ⇑f fun x => HAdd.hAdd (↑n) x","decl":"theorem commute_int_add (n : ℤ) : Function.Commute f (n + ·) := by\n  simpa only [add_comm _ (n : ℝ)] using f.commute_add_int n\n\n"}
{"name":"CircleDeg1Lift.commute_sub_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Int\n⊢ Function.Commute ⇑f fun x => HSub.hSub x ↑n","decl":"theorem commute_sub_int (n : ℤ) : Function.Commute f (· - n) := by\n  simpa only [sub_eq_add_neg] using\n    (f.commute_add_int n).inverses_right (Equiv.addRight _).right_inv (Equiv.addRight _).left_inv\n\n"}
{"name":"CircleDeg1Lift.map_int_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nm : Int\nx : Real\n⊢ Eq (f (HAdd.hAdd (↑m) x)) (HAdd.hAdd (↑m) (f x))","decl":"@[simp]\ntheorem map_int_add (m : ℤ) (x : ℝ) : f (m + x) = m + f x :=\n  f.commute_int_add m x\n\n"}
{"name":"CircleDeg1Lift.map_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\n⊢ Eq (f (HAdd.hAdd x ↑m)) (HAdd.hAdd (f x) ↑m)","decl":"@[simp]\ntheorem map_add_int (x : ℝ) (m : ℤ) : f (x + m) = f x + m :=\n  f.commute_add_int m x\n\n"}
{"name":"CircleDeg1Lift.map_sub_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nn : Int\n⊢ Eq (f (HSub.hSub x ↑n)) (HSub.hSub (f x) ↑n)","decl":"@[simp]\ntheorem map_sub_int (x : ℝ) (n : ℤ) : f (x - n) = f x - n :=\n  f.commute_sub_int n x\n\n"}
{"name":"CircleDeg1Lift.map_add_nat","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nn : Nat\n⊢ Eq (f (HAdd.hAdd x ↑n)) (HAdd.hAdd (f x) ↑n)","decl":"@[simp]\ntheorem map_add_nat (x : ℝ) (n : ℕ) : f (x + n) = f x + n :=\n  f.map_add_int x n\n\n"}
{"name":"CircleDeg1Lift.map_nat_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\nx : Real\n⊢ Eq (f (HAdd.hAdd (↑n) x)) (HAdd.hAdd (↑n) (f x))","decl":"@[simp]\ntheorem map_nat_add (n : ℕ) (x : ℝ) : f (n + x) = n + f x :=\n  f.map_int_add n x\n\n"}
{"name":"CircleDeg1Lift.map_sub_nat","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nn : Nat\n⊢ Eq (f (HSub.hSub x ↑n)) (HSub.hSub (f x) ↑n)","decl":"@[simp]\ntheorem map_sub_nat (x : ℝ) (n : ℕ) : f (x - n) = f x - n :=\n  f.map_sub_int x n\n\n"}
{"name":"CircleDeg1Lift.map_int_of_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Int\n⊢ Eq (f ↑n) (HAdd.hAdd (f 0) ↑n)","decl":"theorem map_int_of_map_zero (n : ℤ) : f n = f 0 + n := by rw [← f.map_add_int, zero_add]\n\n"}
{"name":"CircleDeg1Lift.map_fract_sub_fract_eq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ Eq (HSub.hSub (f (Int.fract x)) (Int.fract x)) (HSub.hSub (f x) x)","decl":"@[simp]\ntheorem map_fract_sub_fract_eq (x : ℝ) : f (fract x) - fract x = f x - x := by\n  rw [Int.fract, f.map_sub_int, sub_sub_sub_cancel_right]\n\n"}
{"name":"CircleDeg1Lift.sup_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nx : Real\n⊢ Eq ((Max.max f g) x) (Max.max (f x) (g x))","decl":"@[simp]\ntheorem sup_apply (x : ℝ) : (f ⊔ g) x = max (f x) (g x) :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.inf_apply","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nx : Real\n⊢ Eq ((Min.min f g) x) (Min.min (f x) (g x))","decl":"@[simp]\ntheorem inf_apply (x : ℝ) : (f ⊓ g) x = min (f x) (g x) :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.iterate_monotone","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"n : Nat\n⊢ Monotone fun f => Nat.iterate (⇑f) n","decl":"theorem iterate_monotone (n : ℕ) : Monotone fun f : CircleDeg1Lift => f^[n] := fun f _ h =>\n  f.monotone.iterate_le_of_le h _\n\n"}
{"name":"CircleDeg1Lift.iterate_mono","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nh : LE.le f g\nn : Nat\n⊢ LE.le (Nat.iterate (⇑f) n) (Nat.iterate (⇑g) n)","decl":"theorem iterate_mono {f g : CircleDeg1Lift} (h : f ≤ g) (n : ℕ) : f^[n] ≤ g^[n] :=\n  iterate_monotone n h\n\n"}
{"name":"CircleDeg1Lift.pow_mono","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nh : LE.le f g\nn : Nat\n⊢ LE.le (HPow.hPow f n) (HPow.hPow g n)","decl":"theorem pow_mono {f g : CircleDeg1Lift} (h : f ≤ g) (n : ℕ) : f ^ n ≤ g ^ n := fun x => by\n  simp only [coe_pow, iterate_mono h n x]\n\n"}
{"name":"CircleDeg1Lift.pow_monotone","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"n : Nat\n⊢ Monotone fun f => HPow.hPow f n","decl":"theorem pow_monotone (n : ℕ) : Monotone fun f : CircleDeg1Lift => f ^ n := fun _ _ h => pow_mono h n\n\n"}
{"name":"CircleDeg1Lift.map_le_of_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ LE.le (f x) (HAdd.hAdd (f 0) ↑(Int.ceil x))","decl":"theorem map_le_of_map_zero (x : ℝ) : f x ≤ f 0 + ⌈x⌉ :=\n  calc\n    f x ≤ f ⌈x⌉ := f.monotone <| le_ceil _\n    _ = f 0 + ⌈x⌉ := f.map_int_of_map_zero _\n\n"}
{"name":"CircleDeg1Lift.map_map_zero_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LE.le (f (g 0)) (HAdd.hAdd (f 0) ↑(Int.ceil (g 0)))","decl":"theorem map_map_zero_le : f (g 0) ≤ f 0 + ⌈g 0⌉ :=\n  f.map_le_of_map_zero (g 0)\n\n"}
{"name":"CircleDeg1Lift.floor_map_map_zero_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LE.le (Int.floor (f (g 0))) (HAdd.hAdd (Int.floor (f 0)) (Int.ceil (g 0)))","decl":"theorem floor_map_map_zero_le : ⌊f (g 0)⌋ ≤ ⌊f 0⌋ + ⌈g 0⌉ :=\n  calc\n    ⌊f (g 0)⌋ ≤ ⌊f 0 + ⌈g 0⌉⌋ := floor_mono <| f.map_map_zero_le g\n    _ = ⌊f 0⌋ + ⌈g 0⌉ := floor_add_int _ _\n\n"}
{"name":"CircleDeg1Lift.ceil_map_map_zero_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LE.le (Int.ceil (f (g 0))) (HAdd.hAdd (Int.ceil (f 0)) (Int.ceil (g 0)))","decl":"theorem ceil_map_map_zero_le : ⌈f (g 0)⌉ ≤ ⌈f 0⌉ + ⌈g 0⌉ :=\n  calc\n    ⌈f (g 0)⌉ ≤ ⌈f 0 + ⌈g 0⌉⌉ := ceil_mono <| f.map_map_zero_le g\n    _ = ⌈f 0⌉ + ⌈g 0⌉ := ceil_add_int _ _\n\n"}
{"name":"CircleDeg1Lift.map_map_zero_lt","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LT.lt (f (g 0)) (HAdd.hAdd (HAdd.hAdd (f 0) (g 0)) 1)","decl":"theorem map_map_zero_lt : f (g 0) < f 0 + g 0 + 1 :=\n  calc\n    f (g 0) ≤ f 0 + ⌈g 0⌉ := f.map_map_zero_le g\n    _ < f 0 + (g 0 + 1) := add_lt_add_left (ceil_lt_add_one _) _\n    _ = f 0 + g 0 + 1 := (add_assoc _ _ _).symm\n\n"}
{"name":"CircleDeg1Lift.le_map_of_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ LE.le (HAdd.hAdd (f 0) ↑(Int.floor x)) (f x)","decl":"theorem le_map_of_map_zero (x : ℝ) : f 0 + ⌊x⌋ ≤ f x :=\n  calc\n    f 0 + ⌊x⌋ = f ⌊x⌋ := (f.map_int_of_map_zero _).symm\n    _ ≤ f x := f.monotone <| floor_le _\n\n"}
{"name":"CircleDeg1Lift.le_map_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LE.le (HAdd.hAdd (f 0) ↑(Int.floor (g 0))) (f (g 0))","decl":"theorem le_map_map_zero : f 0 + ⌊g 0⌋ ≤ f (g 0) :=\n  f.le_map_of_map_zero (g 0)\n\n"}
{"name":"CircleDeg1Lift.le_floor_map_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LE.le (HAdd.hAdd (Int.floor (f 0)) (Int.floor (g 0))) (Int.floor (f (g 0)))","decl":"theorem le_floor_map_map_zero : ⌊f 0⌋ + ⌊g 0⌋ ≤ ⌊f (g 0)⌋ :=\n  calc\n    ⌊f 0⌋ + ⌊g 0⌋ = ⌊f 0 + ⌊g 0⌋⌋ := (floor_add_int _ _).symm\n    _ ≤ ⌊f (g 0)⌋ := floor_mono <| f.le_map_map_zero g\n\n"}
{"name":"CircleDeg1Lift.le_ceil_map_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LE.le (HAdd.hAdd (Int.ceil (f 0)) (Int.floor (g 0))) (Int.ceil ((HMul.hMul f g) 0))","decl":"theorem le_ceil_map_map_zero : ⌈f 0⌉ + ⌊g 0⌋ ≤ ⌈(f * g) 0⌉ :=\n  calc\n    ⌈f 0⌉ + ⌊g 0⌋ = ⌈f 0 + ⌊g 0⌋⌉ := (ceil_add_int _ _).symm\n    _ ≤ ⌈f (g 0)⌉ := ceil_mono <| f.le_map_map_zero g\n\n"}
{"name":"CircleDeg1Lift.lt_map_map_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LT.lt (HSub.hSub (HAdd.hAdd (f 0) (g 0)) 1) (f (g 0))","decl":"theorem lt_map_map_zero : f 0 + g 0 - 1 < f (g 0) :=\n  calc\n    f 0 + g 0 - 1 = f 0 + (g 0 - 1) := add_sub_assoc _ _ _\n    _ < f 0 + ⌊g 0⌋ := add_lt_add_left (sub_one_lt_floor _) _\n    _ ≤ f (g 0) := f.le_map_map_zero g\n\n"}
{"name":"CircleDeg1Lift.dist_map_map_zero_lt","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\n⊢ LT.lt (Dist.dist (HAdd.hAdd (f 0) (g 0)) (f (g 0))) 1","decl":"theorem dist_map_map_zero_lt : dist (f 0 + g 0) (f (g 0)) < 1 := by\n  rw [dist_comm, Real.dist_eq, abs_lt, lt_sub_iff_add_lt', sub_lt_iff_lt_add', ← sub_eq_add_neg]\n  exact ⟨f.lt_map_map_zero g, f.map_map_zero_lt g⟩\n\n"}
{"name":"CircleDeg1Lift.dist_map_zero_lt_of_semiconj","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g₁ g₂ : CircleDeg1Lift\nh : Function.Semiconj ⇑f ⇑g₁ ⇑g₂\n⊢ LT.lt (Dist.dist (g₁ 0) (g₂ 0)) 2","decl":"theorem dist_map_zero_lt_of_semiconj {f g₁ g₂ : CircleDeg1Lift} (h : Function.Semiconj f g₁ g₂) :\n    dist (g₁ 0) (g₂ 0) < 2 :=\n  calc\n    dist (g₁ 0) (g₂ 0) ≤ dist (g₁ 0) (f (g₁ 0) - f 0) + dist _ (g₂ 0) := dist_triangle _ _ _\n    _ = dist (f 0 + g₁ 0) (f (g₁ 0)) + dist (g₂ 0 + f 0) (g₂ (f 0)) := by\n      simp only [h.eq, Real.dist_eq, sub_sub, add_comm (f 0), sub_sub_eq_add_sub,\n        abs_sub_comm (g₂ (f 0))]\n    _ < 1 + 1 := add_lt_add (f.dist_map_map_zero_lt g₁) (g₂.dist_map_map_zero_lt f)\n    _ = 2 := one_add_one_eq_two\n\n"}
{"name":"CircleDeg1Lift.dist_map_zero_lt_of_semiconjBy","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g₁ g₂ : CircleDeg1Lift\nh : SemiconjBy f g₁ g₂\n⊢ LT.lt (Dist.dist (g₁ 0) (g₂ 0)) 2","decl":"theorem dist_map_zero_lt_of_semiconjBy {f g₁ g₂ : CircleDeg1Lift} (h : SemiconjBy f g₁ g₂) :\n    dist (g₁ 0) (g₂ 0) < 2 :=\n  dist_map_zero_lt_of_semiconj <| semiconjBy_iff_semiconj.1 h\n\n"}
{"name":"CircleDeg1Lift.tendsto_atBot","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Filter.Tendsto (⇑f) Filter.atBot Filter.atBot","decl":"protected theorem tendsto_atBot : Tendsto f atBot atBot :=\n  tendsto_atBot_mono f.map_le_of_map_zero <| tendsto_atBot_add_const_left _ _ <|\n    (tendsto_atBot_mono fun x => (ceil_lt_add_one x).le) <|\n      tendsto_atBot_add_const_right _ _ tendsto_id\n\n"}
{"name":"CircleDeg1Lift.tendsto_atTop","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Filter.Tendsto (⇑f) Filter.atTop Filter.atTop","decl":"protected theorem tendsto_atTop : Tendsto f atTop atTop :=\n  tendsto_atTop_mono f.le_map_of_map_zero <| tendsto_atTop_add_const_left _ _ <|\n    (tendsto_atTop_mono fun x => (sub_one_lt_floor x).le) <| by\n      simpa [sub_eq_add_neg] using tendsto_atTop_add_const_right _ _ tendsto_id\n\n"}
{"name":"CircleDeg1Lift.continuous_iff_surjective","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Iff (Continuous ⇑f) (Function.Surjective ⇑f)","decl":"theorem continuous_iff_surjective : Continuous f ↔ Function.Surjective f :=\n  ⟨fun h => h.surjective f.tendsto_atTop f.tendsto_atBot, f.monotone.continuous_of_surjective⟩\n\n"}
{"name":"CircleDeg1Lift.iterate_le_of_map_le_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nh : LE.le (f x) (HAdd.hAdd x ↑m)\nn : Nat\n⊢ LE.le (Nat.iterate (⇑f) n x) (HAdd.hAdd x (HMul.hMul ↑n ↑m))","decl":"theorem iterate_le_of_map_le_add_int {x : ℝ} {m : ℤ} (h : f x ≤ x + m) (n : ℕ) :\n    f^[n] x ≤ x + n * m := by\n  simpa only [nsmul_eq_mul, add_right_iterate] using\n    (f.commute_add_int m).iterate_le_of_map_le f.monotone (monotone_id.add_const (m : ℝ)) h n\n\n"}
{"name":"CircleDeg1Lift.le_iterate_of_add_int_le_map","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nh : LE.le (HAdd.hAdd x ↑m) (f x)\nn : Nat\n⊢ LE.le (HAdd.hAdd x (HMul.hMul ↑n ↑m)) (Nat.iterate (⇑f) n x)","decl":"theorem le_iterate_of_add_int_le_map {x : ℝ} {m : ℤ} (h : x + m ≤ f x) (n : ℕ) :\n    x + n * m ≤ f^[n] x := by\n  simpa only [nsmul_eq_mul, add_right_iterate] using\n    (f.commute_add_int m).symm.iterate_le_of_map_le (monotone_id.add_const (m : ℝ)) f.monotone h n\n\n"}
{"name":"CircleDeg1Lift.iterate_eq_of_map_eq_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nh : Eq (f x) (HAdd.hAdd x ↑m)\nn : Nat\n⊢ Eq (Nat.iterate (⇑f) n x) (HAdd.hAdd x (HMul.hMul ↑n ↑m))","decl":"theorem iterate_eq_of_map_eq_add_int {x : ℝ} {m : ℤ} (h : f x = x + m) (n : ℕ) :\n    f^[n] x = x + n * m := by\n  simpa only [nsmul_eq_mul, add_right_iterate] using (f.commute_add_int m).iterate_eq_of_map_eq n h\n\n"}
{"name":"CircleDeg1Lift.iterate_pos_le_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (LE.le (Nat.iterate (⇑f) n x) (HAdd.hAdd x (HMul.hMul ↑n ↑m))) (LE.le (f x) (HAdd.hAdd x ↑m))","decl":"theorem iterate_pos_le_iff {x : ℝ} {m : ℤ} {n : ℕ} (hn : 0 < n) :\n    f^[n] x ≤ x + n * m ↔ f x ≤ x + m := by\n  simpa only [nsmul_eq_mul, add_right_iterate] using\n    (f.commute_add_int m).iterate_pos_le_iff_map_le f.monotone (strictMono_id.add_const (m : ℝ)) hn\n\n"}
{"name":"CircleDeg1Lift.iterate_pos_lt_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (LT.lt (Nat.iterate (⇑f) n x) (HAdd.hAdd x (HMul.hMul ↑n ↑m))) (LT.lt (f x) (HAdd.hAdd x ↑m))","decl":"theorem iterate_pos_lt_iff {x : ℝ} {m : ℤ} {n : ℕ} (hn : 0 < n) :\n    f^[n] x < x + n * m ↔ f x < x + m := by\n  simpa only [nsmul_eq_mul, add_right_iterate] using\n    (f.commute_add_int m).iterate_pos_lt_iff_map_lt f.monotone (strictMono_id.add_const (m : ℝ)) hn\n\n"}
{"name":"CircleDeg1Lift.iterate_pos_eq_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (Eq (Nat.iterate (⇑f) n x) (HAdd.hAdd x (HMul.hMul ↑n ↑m))) (Eq (f x) (HAdd.hAdd x ↑m))","decl":"theorem iterate_pos_eq_iff {x : ℝ} {m : ℤ} {n : ℕ} (hn : 0 < n) :\n    f^[n] x = x + n * m ↔ f x = x + m := by\n  simpa only [nsmul_eq_mul, add_right_iterate] using\n    (f.commute_add_int m).iterate_pos_eq_iff_map_eq f.monotone (strictMono_id.add_const (m : ℝ)) hn\n\n"}
{"name":"CircleDeg1Lift.le_iterate_pos_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (LE.le (HAdd.hAdd x (HMul.hMul ↑n ↑m)) (Nat.iterate (⇑f) n x)) (LE.le (HAdd.hAdd x ↑m) (f x))","decl":"theorem le_iterate_pos_iff {x : ℝ} {m : ℤ} {n : ℕ} (hn : 0 < n) :\n    x + n * m ≤ f^[n] x ↔ x + m ≤ f x := by\n  simpa only [not_lt] using not_congr (f.iterate_pos_lt_iff hn)\n\n"}
{"name":"CircleDeg1Lift.lt_iterate_pos_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (LT.lt (HAdd.hAdd x (HMul.hMul ↑n ↑m)) (Nat.iterate (⇑f) n x)) (LT.lt (HAdd.hAdd x ↑m) (f x))","decl":"theorem lt_iterate_pos_iff {x : ℝ} {m : ℤ} {n : ℕ} (hn : 0 < n) :\n    x + n * m < f^[n] x ↔ x + m < f x := by\n  simpa only [not_le] using not_congr (f.iterate_pos_le_iff hn)\n\n"}
{"name":"CircleDeg1Lift.mul_floor_map_zero_le_floor_iterate_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ LE.le (HMul.hMul (↑n) (Int.floor (f 0))) (Int.floor (Nat.iterate (⇑f) n 0))","decl":"theorem mul_floor_map_zero_le_floor_iterate_zero (n : ℕ) : ↑n * ⌊f 0⌋ ≤ ⌊f^[n] 0⌋ := by\n  rw [le_floor, Int.cast_mul, Int.cast_natCast, ← zero_add ((n : ℝ) * _)]\n  apply le_iterate_of_add_int_le_map\n  simp [floor_le]\n\n"}
{"name":"CircleDeg1Lift.transnumAuxSeq_def","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Eq f.transnumAuxSeq fun n => HDiv.hDiv ((HPow.hPow f (HPow.hPow 2 n)) 0) (HPow.hPow 2 n)","decl":"theorem transnumAuxSeq_def : f.transnumAuxSeq = fun n : ℕ => (f ^ (2 ^ n : ℕ)) 0 / 2 ^ n :=\n  rfl\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_of_tendsto_aux","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nτ' : Real\nh : Filter.Tendsto f.transnumAuxSeq Filter.atTop (nhds τ')\n⊢ Eq f.translationNumber τ'","decl":"theorem translationNumber_eq_of_tendsto_aux {τ' : ℝ} (h : Tendsto f.transnumAuxSeq atTop (𝓝 τ')) :\n    τ f = τ' :=\n  h.limUnder_eq\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_of_tendsto₀","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nτ' : Real\nh : Filter.Tendsto (fun n => HDiv.hDiv (Nat.iterate (⇑f) n 0) ↑n) Filter.atTop (nhds τ')\n⊢ Eq f.translationNumber τ'","decl":"theorem translationNumber_eq_of_tendsto₀ {τ' : ℝ}\n    (h : Tendsto (fun n : ℕ => f^[n] 0 / n) atTop (𝓝 τ')) : τ f = τ' :=\n  f.translationNumber_eq_of_tendsto_aux <| by\n    simpa [Function.comp_def, transnumAuxSeq_def, coe_pow] using\n      h.comp (Nat.tendsto_pow_atTop_atTop_of_one_lt one_lt_two)\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_of_tendsto₀'","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nτ' : Real\nh : Filter.Tendsto (fun n => HDiv.hDiv (Nat.iterate (⇑f) (HAdd.hAdd n 1) 0) (HAdd.hAdd (↑n) 1)) Filter.atTop (nhds τ')\n⊢ Eq f.translationNumber τ'","decl":"theorem translationNumber_eq_of_tendsto₀' {τ' : ℝ}\n    (h : Tendsto (fun n : ℕ => f^[n + 1] 0 / (n + 1)) atTop (𝓝 τ')) : τ f = τ' :=\n  f.translationNumber_eq_of_tendsto₀ <| (tendsto_add_atTop_iff_nat 1).1 (mod_cast h)\n\n"}
{"name":"CircleDeg1Lift.transnumAuxSeq_zero","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Eq (f.transnumAuxSeq 0) (f 0)","decl":"theorem transnumAuxSeq_zero : f.transnumAuxSeq 0 = f 0 := by simp [transnumAuxSeq]\n\n"}
{"name":"CircleDeg1Lift.transnumAuxSeq_dist_lt","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ LT.lt (Dist.dist (f.transnumAuxSeq n) (f.transnumAuxSeq (HAdd.hAdd n 1))) (HDiv.hDiv (1 / 2) (HPow.hPow 2 n))","decl":"theorem transnumAuxSeq_dist_lt (n : ℕ) :\n    dist (f.transnumAuxSeq n) (f.transnumAuxSeq (n + 1)) < 1 / 2 / 2 ^ n := by\n  have : 0 < (2 ^ (n + 1) : ℝ) := pow_pos zero_lt_two _\n  rw [div_div, ← pow_succ', ← abs_of_pos this]\n  calc\n    _ = dist ((f ^ 2 ^ n) 0 + (f ^ 2 ^ n) 0) ((f ^ 2 ^ n) ((f ^ 2 ^ n) 0)) / |2 ^ (n + 1)| := by\n      simp_rw [transnumAuxSeq, Real.dist_eq]\n      rw [← abs_div, sub_div, pow_succ, pow_succ', ← two_mul, mul_div_mul_left _ _ (two_ne_zero' ℝ),\n        pow_mul, sq, mul_apply]\n    _ < _ := by gcongr; exact (f ^ 2 ^ n).dist_map_map_zero_lt (f ^ 2 ^ n)\n\n"}
{"name":"CircleDeg1Lift.tendsto_translationNumber_aux","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Filter.Tendsto f.transnumAuxSeq Filter.atTop (nhds f.translationNumber)","decl":"theorem tendsto_translationNumber_aux : Tendsto f.transnumAuxSeq atTop (𝓝 <| τ f) :=\n  (cauchySeq_of_le_geometric_two fun n => le_of_lt <| f.transnumAuxSeq_dist_lt n).tendsto_limUnder\n\n"}
{"name":"CircleDeg1Lift.dist_map_zero_translationNumber_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ LE.le (Dist.dist (f 0) f.translationNumber) 1","decl":"theorem dist_map_zero_translationNumber_le : dist (f 0) (τ f) ≤ 1 :=\n  f.transnumAuxSeq_zero ▸\n    dist_le_of_le_geometric_two_of_tendsto₀ (fun n => le_of_lt <| f.transnumAuxSeq_dist_lt n)\n      f.tendsto_translationNumber_aux\n\n"}
{"name":"CircleDeg1Lift.tendsto_translationNumber_of_dist_bounded_aux","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Nat → Real\nC : Real\nH : ∀ (n : Nat), LE.le (Dist.dist ((HPow.hPow f n) 0) (x n)) C\n⊢ Filter.Tendsto (fun n => HDiv.hDiv (x (HPow.hPow 2 n)) (HPow.hPow 2 n)) Filter.atTop (nhds f.translationNumber)","decl":"theorem tendsto_translationNumber_of_dist_bounded_aux (x : ℕ → ℝ) (C : ℝ)\n    (H : ∀ n : ℕ, dist ((f ^ n) 0) (x n) ≤ C) :\n    Tendsto (fun n : ℕ => x (2 ^ n) / 2 ^ n) atTop (𝓝 <| τ f) := by\n  apply f.tendsto_translationNumber_aux.congr_dist (squeeze_zero (fun _ => dist_nonneg) _ _)\n  · exact fun n => C / 2 ^ n\n  · intro n\n    have : 0 < (2 ^ n : ℝ) := pow_pos zero_lt_two _\n    convert (div_le_div_iff_of_pos_right this).2 (H (2 ^ n)) using 1\n    rw [transnumAuxSeq, Real.dist_eq, ← sub_div, abs_div, abs_of_pos this, Real.dist_eq]\n  · exact mul_zero C ▸ tendsto_const_nhds.mul <| tendsto_inv_atTop_zero.comp <|\n      tendsto_pow_atTop_atTop_of_one_lt one_lt_two\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_of_dist_bounded","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nC : Real\nH : ∀ (n : Nat), LE.le (Dist.dist ((HPow.hPow f n) 0) ((HPow.hPow g n) 0)) C\n⊢ Eq f.translationNumber g.translationNumber","decl":"theorem translationNumber_eq_of_dist_bounded {f g : CircleDeg1Lift} (C : ℝ)\n    (H : ∀ n : ℕ, dist ((f ^ n) 0) ((g ^ n) 0) ≤ C) : τ f = τ g :=\n  Eq.symm <| g.translationNumber_eq_of_tendsto_aux <|\n    f.tendsto_translationNumber_of_dist_bounded_aux (fun n ↦ (g ^ n) 0) C H\n\n"}
{"name":"CircleDeg1Lift.translationNumber_one","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"⊢ Eq (CircleDeg1Lift.translationNumber 1) 0","decl":"@[simp]\ntheorem translationNumber_one : τ 1 = 0 :=\n  translationNumber_eq_of_tendsto₀ _ <| by simp [tendsto_const_nhds]\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_of_semiconjBy","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g₁ g₂ : CircleDeg1Lift\nH : SemiconjBy f g₁ g₂\n⊢ Eq g₁.translationNumber g₂.translationNumber","decl":"theorem translationNumber_eq_of_semiconjBy {f g₁ g₂ : CircleDeg1Lift} (H : SemiconjBy f g₁ g₂) :\n    τ g₁ = τ g₂ :=\n  translationNumber_eq_of_dist_bounded 2 fun n =>\n    le_of_lt <| dist_map_zero_lt_of_semiconjBy <| H.pow_right n\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_of_semiconj","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g₁ g₂ : CircleDeg1Lift\nH : Function.Semiconj ⇑f ⇑g₁ ⇑g₂\n⊢ Eq g₁.translationNumber g₂.translationNumber","decl":"theorem translationNumber_eq_of_semiconj {f g₁ g₂ : CircleDeg1Lift}\n    (H : Function.Semiconj f g₁ g₂) : τ g₁ = τ g₂ :=\n  translationNumber_eq_of_semiconjBy <| semiconjBy_iff_semiconj.2 H\n\n"}
{"name":"CircleDeg1Lift.translationNumber_mul_of_commute","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f g : CircleDeg1Lift\nh : Commute f g\n⊢ Eq (HMul.hMul f g).translationNumber (HAdd.hAdd f.translationNumber g.translationNumber)","decl":"theorem translationNumber_mul_of_commute {f g : CircleDeg1Lift} (h : Commute f g) :\n    τ (f * g) = τ f + τ g := by\n  refine tendsto_nhds_unique ?_\n    (f.tendsto_translationNumber_aux.add g.tendsto_translationNumber_aux)\n  simp only [transnumAuxSeq, ← add_div]\n  refine (f * g).tendsto_translationNumber_of_dist_bounded_aux\n    (fun n ↦ (f ^ n) 0 + (g ^ n) 0) 1 fun n ↦ ?_\n  rw [h.mul_pow, dist_comm]\n  exact le_of_lt ((f ^ n).dist_map_map_zero_lt (g ^ n))\n\n"}
{"name":"CircleDeg1Lift.translationNumber_units_inv","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\n⊢ Eq (↑(Inv.inv f)).translationNumber (Neg.neg (↑f).translationNumber)","decl":"@[simp]\ntheorem translationNumber_units_inv (f : CircleDeg1Liftˣ) : τ ↑f⁻¹ = -τ f :=\n  eq_neg_iff_add_eq_zero.2 <| by\n    simp [← translationNumber_mul_of_commute (Commute.refl _).units_inv_left]\n\n"}
{"name":"CircleDeg1Lift.translationNumber_pow","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ Eq (HPow.hPow f n).translationNumber (HMul.hMul (↑n) f.translationNumber)","decl":"@[simp]\ntheorem translationNumber_pow : ∀ n : ℕ, τ (f ^ n) = n * τ f\n  | 0 => by simp\n  | n + 1 => by\n    rw [pow_succ, translationNumber_mul_of_commute (Commute.pow_self f n),\n      translationNumber_pow n, Nat.cast_add_one, add_mul, one_mul]\n\n"}
{"name":"CircleDeg1Lift.translationNumber_zpow","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\nn : Int\n⊢ Eq (↑(HPow.hPow f n)).translationNumber (HMul.hMul (↑n) (↑f).translationNumber)","decl":"@[simp]\ntheorem translationNumber_zpow (f : CircleDeg1Liftˣ) : ∀ n : ℤ, τ (f ^ n : Units _) = n * τ f\n  | (n : ℕ) => by simp [translationNumber_pow f n]\n  | -[n+1] => by simp; ring\n\n"}
{"name":"CircleDeg1Lift.translationNumber_conj_eq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\ng : CircleDeg1Lift\n⊢ Eq (HMul.hMul (HMul.hMul (↑f) g) ↑(Inv.inv f)).translationNumber g.translationNumber","decl":"@[simp]\ntheorem translationNumber_conj_eq (f : CircleDeg1Liftˣ) (g : CircleDeg1Lift) :\n    τ (↑f * g * ↑f⁻¹) = τ g :=\n  (translationNumber_eq_of_semiconjBy (f.mk_semiconjBy g)).symm\n\n"}
{"name":"CircleDeg1Lift.translationNumber_conj_eq'","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : Units CircleDeg1Lift\ng : CircleDeg1Lift\n⊢ Eq (HMul.hMul (HMul.hMul (↑(Inv.inv f)) g) ↑f).translationNumber g.translationNumber","decl":"@[simp]\ntheorem translationNumber_conj_eq' (f : CircleDeg1Liftˣ) (g : CircleDeg1Lift) :\n    τ (↑f⁻¹ * g * f) = τ g :=\n  translationNumber_conj_eq f⁻¹ g\n\n"}
{"name":"CircleDeg1Lift.dist_pow_map_zero_mul_translationNumber_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\n⊢ LE.le (Dist.dist ((HPow.hPow f n) 0) (HMul.hMul (↑n) f.translationNumber)) 1","decl":"theorem dist_pow_map_zero_mul_translationNumber_le (n : ℕ) :\n    dist ((f ^ n) 0) (n * f.translationNumber) ≤ 1 :=\n  f.translationNumber_pow n ▸ (f ^ n).dist_map_zero_translationNumber_le\n\n"}
{"name":"CircleDeg1Lift.tendsto_translation_number₀'","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Filter.Tendsto (fun n => HDiv.hDiv ((HPow.hPow f (HAdd.hAdd n 1)) 0) (HAdd.hAdd (↑n) 1)) Filter.atTop (nhds f.translationNumber)","decl":"theorem tendsto_translation_number₀' :\n    Tendsto (fun n : ℕ => (f ^ (n + 1) : CircleDeg1Lift) 0 / ((n : ℝ) + 1)) atTop (𝓝 <| τ f) := by\n  refine\n    tendsto_iff_dist_tendsto_zero.2 <|\n      squeeze_zero (fun _ => dist_nonneg) (fun n => ?_)\n        ((tendsto_const_div_atTop_nhds_zero_nat 1).comp (tendsto_add_atTop_nat 1))\n  dsimp\n  have : (0 : ℝ) < n + 1 := n.cast_add_one_pos\n  rw [Real.dist_eq, div_sub' _ _ _ (ne_of_gt this), abs_div, ← Real.dist_eq, abs_of_pos this,\n    Nat.cast_add_one, div_le_div_iff_of_pos_right this, ← Nat.cast_add_one]\n  apply dist_pow_map_zero_mul_translationNumber_le\n\n"}
{"name":"CircleDeg1Lift.tendsto_translation_number₀","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\n⊢ Filter.Tendsto (fun n => HDiv.hDiv ((HPow.hPow f n) 0) ↑n) Filter.atTop (nhds f.translationNumber)","decl":"theorem tendsto_translation_number₀ : Tendsto (fun n : ℕ => (f ^ n) 0 / n) atTop (𝓝 <| τ f) :=\n  (tendsto_add_atTop_iff_nat 1).1 (mod_cast f.tendsto_translation_number₀')\n\n"}
{"name":"CircleDeg1Lift.tendsto_translationNumber","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ Filter.Tendsto (fun n => HDiv.hDiv (HSub.hSub ((HPow.hPow f n) x) x) ↑n) Filter.atTop (nhds f.translationNumber)","decl":"/-- For any `x : ℝ` the sequence $\\frac{f^n(x)-x}{n}$ tends to the translation number of `f`.\nIn particular, this limit does not depend on `x`. -/\ntheorem tendsto_translationNumber (x : ℝ) :\n    Tendsto (fun n : ℕ => ((f ^ n) x - x) / n) atTop (𝓝 <| τ f) := by\n  rw [← translationNumber_conj_eq' (translate <| Multiplicative.ofAdd x)]\n  refine (tendsto_translation_number₀ _).congr fun n ↦ ?_\n  simp [sub_eq_neg_add, Units.conj_pow']\n\n"}
{"name":"CircleDeg1Lift.tendsto_translation_number'","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ Filter.Tendsto (fun n => HDiv.hDiv (HSub.hSub ((HPow.hPow f (HAdd.hAdd n 1)) x) x) (HAdd.hAdd (↑n) 1)) Filter.atTop (nhds f.translationNumber)","decl":"theorem tendsto_translation_number' (x : ℝ) :\n    Tendsto (fun n : ℕ => ((f ^ (n + 1) : CircleDeg1Lift) x - x) / (n + 1)) atTop (𝓝 <| τ f) :=\n  mod_cast (tendsto_add_atTop_iff_nat 1).2 (f.tendsto_translationNumber x)\n\n"}
{"name":"CircleDeg1Lift.translationNumber_mono","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"⊢ Monotone CircleDeg1Lift.translationNumber","decl":"theorem translationNumber_mono : Monotone τ := fun f g h =>\n  le_of_tendsto_of_tendsto' f.tendsto_translation_number₀ g.tendsto_translation_number₀ fun n => by\n    gcongr; exact pow_mono h _ _\n\n"}
{"name":"CircleDeg1Lift.translationNumber_translate","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"x : Real\n⊢ Eq (↑(CircleDeg1Lift.translate (Multiplicative.ofAdd x))).translationNumber x","decl":"theorem translationNumber_translate (x : ℝ) : τ (translate <| Multiplicative.ofAdd x) = x :=\n  translationNumber_eq_of_tendsto₀' _ <| by\n    simp only [translate_iterate, translate_apply, add_zero, Nat.cast_succ,\n      mul_div_cancel_left₀ (M₀ := ℝ) _ (Nat.cast_add_one_ne_zero _), tendsto_const_nhds]\n\n"}
{"name":"CircleDeg1Lift.translationNumber_le_of_le_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nz : Real\nhz : ∀ (x : Real), LE.le (f x) (HAdd.hAdd x z)\n⊢ LE.le f.translationNumber z","decl":"theorem translationNumber_le_of_le_add {z : ℝ} (hz : ∀ x, f x ≤ x + z) : τ f ≤ z :=\n  translationNumber_translate z ▸ translationNumber_mono fun x => (hz x).trans_eq (add_comm _ _)\n\n"}
{"name":"CircleDeg1Lift.le_translationNumber_of_add_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nz : Real\nhz : ∀ (x : Real), LE.le (HAdd.hAdd x z) (f x)\n⊢ LE.le z f.translationNumber","decl":"theorem le_translationNumber_of_add_le {z : ℝ} (hz : ∀ x, x + z ≤ f x) : z ≤ τ f :=\n  translationNumber_translate z ▸ translationNumber_mono fun x => (add_comm _ _).trans_le (hz x)\n\n"}
{"name":"CircleDeg1Lift.translationNumber_le_of_le_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nh : LE.le (f x) (HAdd.hAdd x ↑m)\n⊢ LE.le f.translationNumber ↑m","decl":"theorem translationNumber_le_of_le_add_int {x : ℝ} {m : ℤ} (h : f x ≤ x + m) : τ f ≤ m :=\n  le_of_tendsto' (f.tendsto_translation_number' x) fun n =>\n    (div_le_iff₀' (n.cast_add_one_pos : (0 : ℝ) < _)).mpr <| sub_le_iff_le_add'.2 <|\n      (coe_pow f (n + 1)).symm ▸ @Nat.cast_add_one ℝ _ n ▸ f.iterate_le_of_map_le_add_int h (n + 1)\n\n"}
{"name":"CircleDeg1Lift.translationNumber_le_of_le_add_nat","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Nat\nh : LE.le (f x) (HAdd.hAdd x ↑m)\n⊢ LE.le f.translationNumber ↑m","decl":"theorem translationNumber_le_of_le_add_nat {x : ℝ} {m : ℕ} (h : f x ≤ x + m) : τ f ≤ m :=\n  @translationNumber_le_of_le_add_int f x m h\n\n"}
{"name":"CircleDeg1Lift.le_translationNumber_of_add_int_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nh : LE.le (HAdd.hAdd x ↑m) (f x)\n⊢ LE.le (↑m) f.translationNumber","decl":"theorem le_translationNumber_of_add_int_le {x : ℝ} {m : ℤ} (h : x + m ≤ f x) : ↑m ≤ τ f :=\n  ge_of_tendsto' (f.tendsto_translation_number' x) fun n =>\n    (le_div_iff₀ (n.cast_add_one_pos : (0 : ℝ) < _)).mpr <| le_sub_iff_add_le'.2 <| by\n      simp only [coe_pow, mul_comm (m : ℝ), ← Nat.cast_add_one, f.le_iterate_of_add_int_le_map h]\n\n"}
{"name":"CircleDeg1Lift.le_translationNumber_of_add_nat_le","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Nat\nh : LE.le (HAdd.hAdd x ↑m) (f x)\n⊢ LE.le (↑m) f.translationNumber","decl":"theorem le_translationNumber_of_add_nat_le {x : ℝ} {m : ℕ} (h : x + m ≤ f x) : ↑m ≤ τ f :=\n  @le_translationNumber_of_add_int_le f x m h\n\n"}
{"name":"CircleDeg1Lift.translationNumber_of_eq_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nm : Int\nh : Eq (f x) (HAdd.hAdd x ↑m)\n⊢ Eq f.translationNumber ↑m","decl":"/-- If `f x - x` is an integer number `m` for some point `x`, then `τ f = m`.\nOn the circle this means that a map with a fixed point has rotation number zero. -/\ntheorem translationNumber_of_eq_add_int {x : ℝ} {m : ℤ} (h : f x = x + m) : τ f = m :=\n  le_antisymm (translationNumber_le_of_le_add_int f <| le_of_eq h)\n    (le_translationNumber_of_add_int_le f <| le_of_eq h.symm)\n\n"}
{"name":"CircleDeg1Lift.floor_sub_le_translationNumber","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ LE.le (↑(Int.floor (HSub.hSub (f x) x))) f.translationNumber","decl":"theorem floor_sub_le_translationNumber (x : ℝ) : ↑⌊f x - x⌋ ≤ τ f :=\n  le_translationNumber_of_add_int_le f <| le_sub_iff_add_le'.1 (floor_le <| f x - x)\n\n"}
{"name":"CircleDeg1Lift.translationNumber_le_ceil_sub","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ LE.le f.translationNumber ↑(Int.ceil (HSub.hSub (f x) x))","decl":"theorem translationNumber_le_ceil_sub (x : ℝ) : τ f ≤ ⌈f x - x⌉ :=\n  translationNumber_le_of_le_add_int f <| sub_le_iff_le_add'.1 (le_ceil <| f x - x)\n\n"}
{"name":"CircleDeg1Lift.map_lt_of_translationNumber_lt_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Int\nh : LT.lt f.translationNumber ↑n\nx : Real\n⊢ LT.lt (f x) (HAdd.hAdd x ↑n)","decl":"theorem map_lt_of_translationNumber_lt_int {n : ℤ} (h : τ f < n) (x : ℝ) : f x < x + n :=\n  not_le.1 <| mt f.le_translationNumber_of_add_int_le <| not_le.2 h\n\n"}
{"name":"CircleDeg1Lift.map_lt_of_translationNumber_lt_nat","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\nh : LT.lt f.translationNumber ↑n\nx : Real\n⊢ LT.lt (f x) (HAdd.hAdd x ↑n)","decl":"theorem map_lt_of_translationNumber_lt_nat {n : ℕ} (h : τ f < n) (x : ℝ) : f x < x + n :=\n  @map_lt_of_translationNumber_lt_int f n h x\n\n"}
{"name":"CircleDeg1Lift.map_lt_add_floor_translationNumber_add_one","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ LT.lt (f x) (HAdd.hAdd (HAdd.hAdd x ↑(Int.floor f.translationNumber)) 1)","decl":"theorem map_lt_add_floor_translationNumber_add_one (x : ℝ) : f x < x + ⌊τ f⌋ + 1 := by\n  rw [add_assoc]\n  norm_cast\n  refine map_lt_of_translationNumber_lt_int _ ?_ _\n  push_cast\n  exact lt_floor_add_one _\n\n"}
{"name":"CircleDeg1Lift.map_lt_add_translationNumber_add_one","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\n⊢ LT.lt (f x) (HAdd.hAdd (HAdd.hAdd x f.translationNumber) 1)","decl":"theorem map_lt_add_translationNumber_add_one (x : ℝ) : f x < x + τ f + 1 :=\n  calc\n    f x < x + ⌊τ f⌋ + 1 := f.map_lt_add_floor_translationNumber_add_one x\n    _ ≤ x + τ f + 1 := by gcongr; apply floor_le\n\n"}
{"name":"CircleDeg1Lift.lt_map_of_int_lt_translationNumber","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Int\nh : LT.lt (↑n) f.translationNumber\nx : Real\n⊢ LT.lt (HAdd.hAdd x ↑n) (f x)","decl":"theorem lt_map_of_int_lt_translationNumber {n : ℤ} (h : ↑n < τ f) (x : ℝ) : x + n < f x :=\n  not_le.1 <| mt f.translationNumber_le_of_le_add_int <| not_le.2 h\n\n"}
{"name":"CircleDeg1Lift.lt_map_of_nat_lt_translationNumber","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nn : Nat\nh : LT.lt (↑n) f.translationNumber\nx : Real\n⊢ LT.lt (HAdd.hAdd x ↑n) (f x)","decl":"theorem lt_map_of_nat_lt_translationNumber {n : ℕ} (h : ↑n < τ f) (x : ℝ) : x + n < f x :=\n  @lt_map_of_int_lt_translationNumber f n h x\n\n"}
{"name":"CircleDeg1Lift.translationNumber_of_map_pow_eq_add_int","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nx : Real\nn : Nat\nm : Int\nh : Eq ((HPow.hPow f n) x) (HAdd.hAdd x ↑m)\nhn : LT.lt 0 n\n⊢ Eq f.translationNumber (HDiv.hDiv ↑m ↑n)","decl":"/-- If `f^n x - x`, `n > 0`, is an integer number `m` for some point `x`, then\n`τ f = m / n`. On the circle this means that a map with a periodic orbit has\na rational rotation number. -/\ntheorem translationNumber_of_map_pow_eq_add_int {x : ℝ} {n : ℕ} {m : ℤ} (h : (f ^ n) x = x + m)\n    (hn : 0 < n) : τ f = m / n := by\n  have := (f ^ n).translationNumber_of_eq_add_int h\n  rwa [translationNumber_pow, mul_comm, ← eq_div_iff] at this\n  exact Nat.cast_ne_zero.2 (ne_of_gt hn)\n\n"}
{"name":"CircleDeg1Lift.forall_map_sub_of_Icc","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nP : Real → Prop\nh : ∀ (x : Real), Membership.mem (Set.Icc 0 1) x → P (HSub.hSub (f x) x)\nx : Real\n⊢ P (HSub.hSub (f x) x)","decl":"/-- If a predicate depends only on `f x - x` and holds for all `0 ≤ x ≤ 1`,\nthen it holds for all `x`. -/\ntheorem forall_map_sub_of_Icc (P : ℝ → Prop) (h : ∀ x ∈ Icc (0 : ℝ) 1, P (f x - x)) (x : ℝ) :\n    P (f x - x) :=\n  f.map_fract_sub_fract_eq x ▸ h _ ⟨fract_nonneg _, le_of_lt (fract_lt_one _)⟩\n\n"}
{"name":"CircleDeg1Lift.translationNumber_lt_of_forall_lt_add","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nhf : Continuous ⇑f\nz : Real\nhz : ∀ (x : Real), LT.lt (f x) (HAdd.hAdd x z)\n⊢ LT.lt f.translationNumber z","decl":"theorem translationNumber_lt_of_forall_lt_add (hf : Continuous f) {z : ℝ} (hz : ∀ x, f x < x + z) :\n    τ f < z := by\n  obtain ⟨x, -, hx⟩ : ∃ x ∈ Icc (0 : ℝ) 1, ∀ y ∈ Icc (0 : ℝ) 1, f y - y ≤ f x - x :=\n    isCompact_Icc.exists_isMaxOn (nonempty_Icc.2 zero_le_one)\n      (hf.sub continuous_id).continuousOn\n  refine lt_of_le_of_lt ?_ (sub_lt_iff_lt_add'.2 <| hz x)\n  apply translationNumber_le_of_le_add\n  simp only [← sub_le_iff_le_add']\n  exact f.forall_map_sub_of_Icc (fun a => a ≤ f x - x) hx\n\n"}
{"name":"CircleDeg1Lift.lt_translationNumber_of_forall_add_lt","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nhf : Continuous ⇑f\nz : Real\nhz : ∀ (x : Real), LT.lt (HAdd.hAdd x z) (f x)\n⊢ LT.lt z f.translationNumber","decl":"theorem lt_translationNumber_of_forall_add_lt (hf : Continuous f) {z : ℝ} (hz : ∀ x, x + z < f x) :\n    z < τ f := by\n  obtain ⟨x, -, hx⟩ : ∃ x ∈ Icc (0 : ℝ) 1, ∀ y ∈ Icc (0 : ℝ) 1, f x - x ≤ f y - y :=\n    isCompact_Icc.exists_isMinOn (nonempty_Icc.2 zero_le_one) (hf.sub continuous_id).continuousOn\n  refine lt_of_lt_of_le (lt_sub_iff_add_lt'.2 <| hz x) ?_\n  apply le_translationNumber_of_add_le\n  simp only [← le_sub_iff_add_le']\n  exact f.forall_map_sub_of_Icc _ hx\n\n"}
{"name":"CircleDeg1Lift.exists_eq_add_translationNumber","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nhf : Continuous ⇑f\n⊢ Exists fun x => Eq (f x) (HAdd.hAdd x f.translationNumber)","decl":"/-- If `f` is a continuous monotone map `ℝ → ℝ`, `f (x + 1) = f x + 1`, then there exists `x`\nsuch that `f x = x + τ f`. -/\ntheorem exists_eq_add_translationNumber (hf : Continuous f) : ∃ x, f x = x + τ f := by\n  obtain ⟨a, ha⟩ : ∃ x, f x ≤ x + τ f := by\n    by_contra! H\n    exact lt_irrefl _ (f.lt_translationNumber_of_forall_add_lt hf H)\n  obtain ⟨b, hb⟩ : ∃ x, x + τ f ≤ f x := by\n    by_contra! H\n    exact lt_irrefl _ (f.translationNumber_lt_of_forall_lt_add hf H)\n  exact intermediate_value_univ₂ hf (continuous_id.add continuous_const) ha hb\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_int_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nhf : Continuous ⇑f\nm : Int\n⊢ Iff (Eq f.translationNumber ↑m) (Exists fun x => Eq (f x) (HAdd.hAdd x ↑m))","decl":"theorem translationNumber_eq_int_iff (hf : Continuous f) {m : ℤ} :\n    τ f = m ↔ ∃ x : ℝ, f x = x + m := by\n  constructor\n  · intro h\n    simp only [← h]\n    exact f.exists_eq_add_translationNumber hf\n  · rintro ⟨x, hx⟩\n    exact f.translationNumber_of_eq_add_int hx\n\n"}
{"name":"CircleDeg1Lift.continuous_pow","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nhf : Continuous ⇑f\nn : Nat\n⊢ Continuous ⇑(HPow.hPow f n)","decl":"theorem continuous_pow (hf : Continuous f) (n : ℕ) : Continuous (f ^ n : CircleDeg1Lift) := by\n  rw [coe_pow]\n  exact hf.iterate n\n\n"}
{"name":"CircleDeg1Lift.translationNumber_eq_rat_iff","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f : CircleDeg1Lift\nhf : Continuous ⇑f\nm : Int\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (Eq f.translationNumber (HDiv.hDiv ↑m ↑n)) (Exists fun x => Eq ((HPow.hPow f n) x) (HAdd.hAdd x ↑m))","decl":"theorem translationNumber_eq_rat_iff (hf : Continuous f) {m : ℤ} {n : ℕ} (hn : 0 < n) :\n    τ f = m / n ↔ ∃ x, (f ^ n) x = x + m := by\n  rw [eq_div_iff, mul_comm, ← translationNumber_pow] <;> [skip; exact ne_of_gt (Nat.cast_pos.2 hn)]\n  exact (f ^ n).translationNumber_eq_int_iff (f.continuous_pow hf n)\n\n"}
{"name":"CircleDeg1Lift.semiconj_of_group_action_of_forall_translationNumber_eq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"G : Type u_1\ninst✝ : Group G\nf₁ f₂ : MonoidHom G CircleDeg1Lift\nh : ∀ (g : G), Eq (f₁ g).translationNumber (f₂ g).translationNumber\n⊢ Exists fun F => ∀ (g : G), Function.Semiconj ⇑F ⇑(f₁ g) ⇑(f₂ g)","decl":"/-- Consider two actions `f₁ f₂ : G →* CircleDeg1Lift` of a group on the real line by lifts of\norientation preserving circle homeomorphisms. Suppose that for each `g : G` the homeomorphisms\n`f₁ g` and `f₂ g` have equal rotation numbers. Then there exists `F : CircleDeg1Lift` such that\n`F * f₁ g = f₂ g * F` for all `g : G`.\n\nThis is a version of Proposition 5.4 from [Étienne Ghys, Groupes d'homeomorphismes du cercle et\ncohomologie bornee][ghys87:groupes]. -/\ntheorem semiconj_of_group_action_of_forall_translationNumber_eq {G : Type*} [Group G]\n    (f₁ f₂ : G →* CircleDeg1Lift) (h : ∀ g, τ (f₁ g) = τ (f₂ g)) :\n    ∃ F : CircleDeg1Lift, ∀ g, Semiconj F (f₁ g) (f₂ g) := by\n  -- Equality of translation number guarantees that for each `x`\n  -- the set `{f₂ g⁻¹ (f₁ g x) | g : G}` is bounded above.\n  have : ∀ x, BddAbove (range fun g => f₂ g⁻¹ (f₁ g x)) := by\n    refine fun x => ⟨x + 2, ?_⟩\n    rintro _ ⟨g, rfl⟩\n    have : τ (f₂ g⁻¹) = -τ (f₂ g) := by\n      rw [← MonoidHom.coe_toHomUnits, MonoidHom.map_inv, translationNumber_units_inv,\n        MonoidHom.coe_toHomUnits]\n    calc\n      f₂ g⁻¹ (f₁ g x) ≤ f₂ g⁻¹ (x + τ (f₁ g) + 1) :=\n        mono _ (map_lt_add_translationNumber_add_one _ _).le\n      _ = f₂ g⁻¹ (x + τ (f₂ g)) + 1 := by rw [h, map_add_one]\n      _ ≤ x + τ (f₂ g) + τ (f₂ g⁻¹) + 1 + 1 :=\n        add_le_add_right (map_lt_add_translationNumber_add_one _ _).le _\n      _ = x + 2 := by simp [this, add_assoc, one_add_one_eq_two]\n  -- We have a theorem about actions by `OrderIso`, so we introduce auxiliary maps\n  -- to `ℝ ≃o ℝ`.\n  set F₁ := toOrderIso.comp f₁.toHomUnits\n  set F₂ := toOrderIso.comp f₂.toHomUnits\n  have hF₁ : ∀ g, ⇑(F₁ g) = f₁ g := fun _ => rfl\n  have hF₂ : ∀ g, ⇑(F₂ g) = f₂ g := fun _ => rfl\n  -- Now we apply `csSup_div_semiconj` and go back to `f₁` and `f₂`.\n  refine ⟨⟨⟨fun x ↦ ⨆ g', (F₂ g')⁻¹ (F₁ g' x), fun x y hxy => ?_⟩, fun x => ?_⟩,\n    csSup_div_semiconj F₂ F₁ fun x => ?_⟩ <;> simp only [hF₁, hF₂, ← map_inv, coe_mk]\n  · exact ciSup_mono (this y) fun g => mono _ (mono _ hxy)\n  · simp only [map_add_one]\n    exact (Monotone.map_ciSup_of_continuousAt (continuousAt_id.add continuousAt_const)\n      (monotone_id.add_const (1 : ℝ)) (this x)).symm\n  · exact this x\n\n"}
{"name":"CircleDeg1Lift.units_semiconj_of_translationNumber_eq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f₁ f₂ : Units CircleDeg1Lift\nh : Eq (↑f₁).translationNumber (↑f₂).translationNumber\n⊢ Exists fun F => Function.Semiconj ⇑F ⇑↑f₁ ⇑↑f₂","decl":"/-- If two lifts of circle homeomorphisms have the same translation number, then they are\nsemiconjugate by a `CircleDeg1Lift`. This version uses arguments `f₁ f₂ : CircleDeg1Liftˣ`\nto assume that `f₁` and `f₂` are homeomorphisms. -/\ntheorem units_semiconj_of_translationNumber_eq {f₁ f₂ : CircleDeg1Liftˣ} (h : τ f₁ = τ f₂) :\n    ∃ F : CircleDeg1Lift, Semiconj F f₁ f₂ :=\n  have : ∀ n : Multiplicative ℤ,\n      τ ((Units.coeHom _).comp (zpowersHom _ f₁) n) =\n        τ ((Units.coeHom _).comp (zpowersHom _ f₂) n) := fun n ↦ by\n    simp [h]\n  (semiconj_of_group_action_of_forall_translationNumber_eq _ _ this).imp fun F hF => by\n    simpa using hF (Multiplicative.ofAdd 1)\n\n"}
{"name":"CircleDeg1Lift.semiconj_of_isUnit_of_translationNumber_eq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f₁ f₂ : CircleDeg1Lift\nh₁ : IsUnit f₁\nh₂ : IsUnit f₂\nh : Eq f₁.translationNumber f₂.translationNumber\n⊢ Exists fun F => Function.Semiconj ⇑F ⇑f₁ ⇑f₂","decl":"/-- If two lifts of circle homeomorphisms have the same translation number, then they are\nsemiconjugate by a `CircleDeg1Lift`. This version uses assumptions `IsUnit f₁` and `IsUnit f₂`\nto assume that `f₁` and `f₂` are homeomorphisms. -/\ntheorem semiconj_of_isUnit_of_translationNumber_eq {f₁ f₂ : CircleDeg1Lift} (h₁ : IsUnit f₁)\n    (h₂ : IsUnit f₂) (h : τ f₁ = τ f₂) : ∃ F : CircleDeg1Lift, Semiconj F f₁ f₂ := by\n  rcases h₁, h₂ with ⟨⟨f₁, rfl⟩, ⟨f₂, rfl⟩⟩\n  exact units_semiconj_of_translationNumber_eq h\n\n"}
{"name":"CircleDeg1Lift.semiconj_of_bijective_of_translationNumber_eq","module":"Mathlib.Dynamics.Circle.RotationNumber.TranslationNumber","initialProofState":"f₁ f₂ : CircleDeg1Lift\nh₁ : Function.Bijective ⇑f₁\nh₂ : Function.Bijective ⇑f₂\nh : Eq f₁.translationNumber f₂.translationNumber\n⊢ Exists fun F => Function.Semiconj ⇑F ⇑f₁ ⇑f₂","decl":"/-- If two lifts of circle homeomorphisms have the same translation number, then they are\nsemiconjugate by a `CircleDeg1Lift`. This version uses assumptions `bijective f₁` and\n`bijective f₂` to assume that `f₁` and `f₂` are homeomorphisms. -/\ntheorem semiconj_of_bijective_of_translationNumber_eq {f₁ f₂ : CircleDeg1Lift} (h₁ : Bijective f₁)\n    (h₂ : Bijective f₂) (h : τ f₁ = τ f₂) : ∃ F : CircleDeg1Lift, Semiconj F f₁ f₂ :=\n  semiconj_of_isUnit_of_translationNumber_eq (isUnit_iff_bijective.2 h₁) (isUnit_iff_bijective.2 h₂)\n    h\n\n"}
