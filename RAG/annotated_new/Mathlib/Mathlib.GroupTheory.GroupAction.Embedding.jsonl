{"name":"Function.Embedding.vadd_def","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : AddGroup G\ninst✝ : AddAction G β\ng : G\nf : Function.Embedding α β\n⊢ Eq (HVAdd.hVAdd g f) (f.trans (Equiv.toEmbedding (AddAction.toPerm g)))","decl":"@[to_additive]\ntheorem smul_def [Group G] [MulAction G β] (g : G) (f : α ↪ β) :\n    g • f = f.trans (MulAction.toPerm g).toEmbedding :=\n  rfl\n\n"}
{"name":"Function.Embedding.smul_def","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : Group G\ninst✝ : MulAction G β\ng : G\nf : Function.Embedding α β\n⊢ Eq (HSMul.hSMul g f) (f.trans (Equiv.toEmbedding (MulAction.toPerm g)))","decl":"@[to_additive]\ntheorem smul_def [Group G] [MulAction G β] (g : G) (f : α ↪ β) :\n    g • f = f.trans (MulAction.toPerm g).toEmbedding :=\n  rfl\n\n"}
{"name":"Function.Embedding.smul_apply","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : Group G\ninst✝ : MulAction G β\ng : G\nf : Function.Embedding α β\na : α\n⊢ Eq ((HSMul.hSMul g f) a) (HSMul.hSMul g (f a))","decl":"@[to_additive (attr := simp)]\ntheorem smul_apply [Group G] [MulAction G β] (g : G) (f : α ↪ β) (a : α) : (g • f) a = g • f a :=\n  rfl\n\n"}
{"name":"Function.Embedding.vadd_apply","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : AddGroup G\ninst✝ : AddAction G β\ng : G\nf : Function.Embedding α β\na : α\n⊢ Eq ((HVAdd.hVAdd g f) a) (HVAdd.hVAdd g (f a))","decl":"@[to_additive (attr := simp)]\ntheorem smul_apply [Group G] [MulAction G β] (g : G) (f : α ↪ β) (a : α) : (g • f) a = g • f a :=\n  rfl\n\n"}
{"name":"Function.Embedding.coe_smul","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : Group G\ninst✝ : MulAction G β\ng : G\nf : Function.Embedding α β\n⊢ Eq (⇑(HSMul.hSMul g f)) (HSMul.hSMul g ⇑f)","decl":"@[to_additive]\ntheorem coe_smul [Group G] [MulAction G β] (g : G) (f : α ↪ β) : ⇑(g • f) = g • ⇑f :=\n  rfl\n\n"}
{"name":"Function.Embedding.coe_vadd","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝¹ : AddGroup G\ninst✝ : AddAction G β\ng : G\nf : Function.Embedding α β\n⊢ Eq (⇑(HVAdd.hVAdd g f)) (HVAdd.hVAdd g ⇑f)","decl":"@[to_additive]\ntheorem coe_smul [Group G] [MulAction G β] (g : G) (f : α ↪ β) : ⇑(g • f) = g • ⇑f :=\n  rfl\n\n"}
{"name":"Function.Embedding.instIsScalarTower","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nG' : Type u_2\nα : Type u_3\nβ : Type u_4\ninst✝⁵ : Group G\ninst✝⁴ : Group G'\ninst✝³ : SMul G G'\ninst✝² : MulAction G β\ninst✝¹ : MulAction G' β\ninst✝ : IsScalarTower G G' β\n⊢ IsScalarTower G G' (Function.Embedding α β)","decl":"instance [Group G] [Group G'] [SMul G G'] [MulAction G β] [MulAction G' β]\n    [IsScalarTower G G' β] : IsScalarTower G G' (α ↪ β) :=\n  ⟨fun x y z => Function.Embedding.ext fun i => smul_assoc x y (z i)⟩\n\n"}
{"name":"Function.Embedding.instVAddCommClass","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nG' : Type u_2\nα : Type u_3\nβ : Type u_4\ninst✝⁴ : AddGroup G\ninst✝³ : AddGroup G'\ninst✝² : AddAction G β\ninst✝¹ : AddAction G' β\ninst✝ : VAddCommClass G G' β\n⊢ VAddCommClass G G' (Function.Embedding α β)","decl":"@[to_additive]\ninstance [Group G] [Group G'] [MulAction G β] [MulAction G' β] [SMulCommClass G G' β] :\n    SMulCommClass G G' (α ↪ β) :=\n  ⟨fun x y z => Function.Embedding.ext fun i => smul_comm x y (z i)⟩\n\n"}
{"name":"Function.Embedding.instSMulCommClass","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nG' : Type u_2\nα : Type u_3\nβ : Type u_4\ninst✝⁴ : Group G\ninst✝³ : Group G'\ninst✝² : MulAction G β\ninst✝¹ : MulAction G' β\ninst✝ : SMulCommClass G G' β\n⊢ SMulCommClass G G' (Function.Embedding α β)","decl":"@[to_additive]\ninstance [Group G] [Group G'] [MulAction G β] [MulAction G' β] [SMulCommClass G G' β] :\n    SMulCommClass G G' (α ↪ β) :=\n  ⟨fun x y z => Function.Embedding.ext fun i => smul_comm x y (z i)⟩\n\n"}
{"name":"Function.Embedding.instIsCentralScalar","module":"Mathlib.GroupTheory.GroupAction.Embedding","initialProofState":"G : Type u_1\nα : Type u_3\nβ : Type u_4\ninst✝³ : Group G\ninst✝² : MulAction G β\ninst✝¹ : MulAction (MulOpposite G) β\ninst✝ : IsCentralScalar G β\n⊢ IsCentralScalar G (Function.Embedding α β)","decl":"instance [Group G] [MulAction G β] [MulAction Gᵐᵒᵖ β] [IsCentralScalar G β] :\n    IsCentralScalar G (α ↪ β) :=\n  ⟨fun _ _ => Function.Embedding.ext fun _ => op_smul_eq_smul _ _⟩\n\n"}
