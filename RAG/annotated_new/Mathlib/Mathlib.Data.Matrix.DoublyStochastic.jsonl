{"name":"mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\n⊢ Iff (Membership.mem (doublyStochastic R n) M) (And (∀ (i j : n), LE.le 0 (M i j)) (And (Eq (M.mulVec 1) 1) (Eq (Matrix.vecMul 1 M) 1)))","decl":"lemma mem_doublyStochastic :\n    M ∈ doublyStochastic R n ↔ (∀ i j, 0 ≤ M i j) ∧ M *ᵥ 1 = 1 ∧ 1 ᵥ* M = 1 :=\n  Iff.rfl\n\n"}
{"name":"mem_doublyStochastic_iff_sum","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\n⊢ Iff (Membership.mem (doublyStochastic R n) M) (And (∀ (i j : n), LE.le 0 (M i j)) (And (∀ (i : n), Eq (Finset.univ.sum fun j => M i j) 1) (∀ (j : n), Eq (Finset.univ.sum fun i => M i j) 1)))","decl":"lemma mem_doublyStochastic_iff_sum :\n    M ∈ doublyStochastic R n ↔\n      (∀ i j, 0 ≤ M i j) ∧ (∀ i, ∑ j, M i j = 1) ∧ ∀ j, ∑ i, M i j = 1 := by\n  simp [funext_iff, doublyStochastic, mulVec, vecMul, dotProduct]\n\n"}
{"name":"nonneg_of_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\ni j : n\n⊢ LE.le 0 (M i j)","decl":"/-- Every entry of a doubly stochastic matrix is nonnegative. -/\nlemma nonneg_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) {i j : n} : 0 ≤ M i j :=\n  hM.1 _ _\n\n"}
{"name":"sum_row_of_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\ni : n\n⊢ Eq (Finset.univ.sum fun j => M i j) 1","decl":"/-- Each row sum of a doubly stochastic matrix is 1. -/\nlemma sum_row_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) (i : n) : ∑ j, M i j = 1 :=\n  (mem_doublyStochastic_iff_sum.1 hM).2.1 _\n\n"}
{"name":"sum_col_of_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\nj : n\n⊢ Eq (Finset.univ.sum fun i => M i j) 1","decl":"/-- Each column sum of a doubly stochastic matrix is 1. -/\nlemma sum_col_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) (j : n) : ∑ i, M i j = 1 :=\n  (mem_doublyStochastic_iff_sum.1 hM).2.2 _\n\n"}
{"name":"mulVec_one_of_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\n⊢ Eq (M.mulVec 1) 1","decl":"/-- A doubly stochastic matrix multiplied with the all-ones column vector is 1. -/\nlemma mulVec_one_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) : M *ᵥ 1 = 1 :=\n  (mem_doublyStochastic.1 hM).2.1\n\n"}
{"name":"one_vecMul_of_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\n⊢ Eq (Matrix.vecMul 1 M) 1","decl":"/-- The all-ones row vector multiplied with a doubly stochastic matrix is 1. -/\nlemma one_vecMul_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) : 1 ᵥ* M = 1 :=\n  (mem_doublyStochastic.1 hM).2.2\n\n"}
{"name":"le_one_of_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\ni j : n\n⊢ LE.le (M i j) 1","decl":"/-- Every entry of a doubly stochastic matrix is less than or equal to 1. -/\nlemma le_one_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) {i j : n} :\n    M i j ≤ 1 := by\n  rw [← sum_row_of_mem_doublyStochastic hM i]\n  exact single_le_sum (fun k _ => hM.1 _ k) (mem_univ j)\n\n"}
{"name":"convex_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\n⊢ Convex R ↑(doublyStochastic R n)","decl":"/-- The set of doubly stochastic matrices is convex. -/\nlemma convex_doublyStochastic : Convex R (doublyStochastic R n : Set (Matrix n n R)) := by\n  intro x hx y hy a b ha hb h\n  simp only [SetLike.mem_coe, mem_doublyStochastic_iff_sum] at hx hy ⊢\n  simp [add_nonneg, ha, hb, mul_nonneg, hx, hy, sum_add_distrib, ← mul_sum, h]\n\n"}
{"name":"permMatrix_mem_doublyStochastic","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : OrderedSemiring R\nσ : Equiv.Perm n\n⊢ Membership.mem (doublyStochastic R n) (Equiv.Perm.permMatrix R σ)","decl":"/-- Any permutation matrix is doubly stochastic. -/\nlemma permMatrix_mem_doublyStochastic {σ : Equiv.Perm n} :\n    σ.permMatrix R ∈ doublyStochastic R n := by\n  rw [mem_doublyStochastic_iff_sum]\n  refine ⟨fun i j => ?g1, ?g2, ?g3⟩\n  case g1 => aesop\n  case g2 => simp [Equiv.toPEquiv_apply]\n  case g3 => simp [Equiv.toPEquiv_apply, ← Equiv.eq_symm_apply]\n\n"}
{"name":"exists_mem_doublyStochastic_eq_smul_iff","module":"Mathlib.Data.Matrix.DoublyStochastic","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : LinearOrderedSemifield R\nM : Matrix n n R\ns : R\nhs : LE.le 0 s\n⊢ Iff (Exists fun M' => And (Membership.mem (doublyStochastic R n) M') (Eq M (HSMul.hSMul s M'))) (And (∀ (i j : n), LE.le 0 (M i j)) (And (∀ (i : n), Eq (Finset.univ.sum fun j => M i j) s) (∀ (j : n), Eq (Finset.univ.sum fun i => M i j) s)))","decl":"/--\nA matrix is `s` times a doubly stochastic matrix iff all entries are nonnegative, and all row and\ncolumn sums are equal to `s`.\n\nThis lemma is useful for the proof of Birkhoff's theorem - in particular because it allows scaling\nby nonnegative factors rather than positive ones only.\n-/\nlemma exists_mem_doublyStochastic_eq_smul_iff {M : Matrix n n R} {s : R} (hs : 0 ≤ s) :\n    (∃ M' ∈ doublyStochastic R n, M = s • M') ↔\n      (∀ i j, 0 ≤ M i j) ∧ (∀ i, ∑ j, M i j = s) ∧ (∀ j, ∑ i, M i j = s) := by\n  classical\n  constructor\n  case mp =>\n    rintro ⟨M', hM', rfl⟩\n    rw [mem_doublyStochastic_iff_sum] at hM'\n    simp only [smul_apply, smul_eq_mul, ← mul_sum]\n    exact ⟨fun i j => mul_nonneg hs (hM'.1 _ _), by simp [hM']⟩\n  rcases eq_or_lt_of_le hs with rfl | hs\n  case inl =>\n    simp only [zero_smul, exists_and_right, and_imp]\n    intro h₁ h₂ _\n    refine ⟨⟨1, Submonoid.one_mem _⟩, ?_⟩\n    ext i j\n    specialize h₂ i\n    rw [sum_eq_zero_iff_of_nonneg (by simp [h₁ i])] at h₂\n    exact h₂ _ (by simp)\n  rintro ⟨hM₁, hM₂, hM₃⟩\n  exact ⟨s⁻¹ • M, by simp [mem_doublyStochastic_iff_sum, ← mul_sum, hs.ne', inv_mul_cancel₀, *]⟩\n\n"}
