{"name":"Real.punctured_nhds_module_neBot","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù‚Åµ : AddCommGroup E\ninst‚úù‚Å¥ : TopologicalSpace E\ninst‚úù¬≥ : ContinuousAdd E\ninst‚úù¬≤ : Nontrivial E\ninst‚úù¬π : Module Real E\ninst‚úù : ContinuousSMul Real E\nx : E\n‚ä¢ (nhdsWithin x (HasCompl.compl (Singleton.singleton x))).NeBot","decl":"/-- If `E` is a nontrivial topological module over `‚Ñù`, then `E` has no isolated points.\nThis is a particular case of `Module.punctured_nhds_neBot`. -/\ninstance Real.punctured_nhds_module_neBot {E : Type*} [AddCommGroup E] [TopologicalSpace E]\n    [ContinuousAdd E] [Nontrivial E] [Module ‚Ñù E] [ContinuousSMul ‚Ñù E] (x : E) : NeBot (ùìù[‚â†] x) :=\n  Module.punctured_nhds_neBot ‚Ñù E x\n\n"}
{"name":"inv_norm_smul_mem_unitClosedBall","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\n‚ä¢ Membership.mem (Metric.closedBall 0 1) (HSMul.hSMul (Inv.inv (Norm.norm x)) x)","decl":"theorem inv_norm_smul_mem_unitClosedBall (x : E) :\n    ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x ‚àà closedBall (0 : E) 1 := by\n  simp only [mem_closedBall_zero_iff, norm_smul, norm_inv, norm_norm, ‚Üê div_eq_inv_mul,\n    div_self_le_one]\n\n"}
{"name":"inv_norm_smul_mem_closed_unit_ball","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\n‚ä¢ Membership.mem (Metric.closedBall 0 1) (HSMul.hSMul (Inv.inv (Norm.norm x)) x)","decl":"@[deprecated (since := \"2024-12-01\")]\nalias inv_norm_smul_mem_closed_unit_ball := inv_norm_smul_mem_unitClosedBall\n\n"}
{"name":"norm_smul_of_nonneg","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nt : Real\nht : LE.le 0 t\nx : E\n‚ä¢ Eq (Norm.norm (HSMul.hSMul t x)) (HMul.hMul t (Norm.norm x))","decl":"theorem norm_smul_of_nonneg {t : ‚Ñù} (ht : 0 ‚â§ t) (x : E) : ‚Äñt ‚Ä¢ x‚Äñ = t * ‚Äñx‚Äñ := by\n  rw [norm_smul, Real.norm_eq_abs, abs_of_nonneg ht]\n\n"}
{"name":"dist_smul_add_one_sub_smul_le","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nr : Real\nx y : E\nh : Membership.mem (Set.Icc 0 1) r\n‚ä¢ LE.le (Dist.dist (HAdd.hAdd (HSMul.hSMul r x) (HSMul.hSMul (HSub.hSub 1 r) y)) x) (Dist.dist y x)","decl":"theorem dist_smul_add_one_sub_smul_le {r : ‚Ñù} {x y : E} (h : r ‚àà Icc 0 1) :\n    dist (r ‚Ä¢ x + (1 - r) ‚Ä¢ y) x ‚â§ dist y x :=\n  calc\n    dist (r ‚Ä¢ x + (1 - r) ‚Ä¢ y) x = ‚Äñ1 - r‚Äñ * ‚Äñx - y‚Äñ := by\n      simp_rw [dist_eq_norm', ‚Üê norm_smul, sub_smul, one_smul, smul_sub, ‚Üê sub_sub, ‚Üê sub_add,\n        sub_right_comm]\n    _ = (1 - r) * dist y x := by\n      rw [Real.norm_eq_abs, abs_eq_self.mpr (sub_nonneg.mpr h.2), dist_eq_norm']\n    _ ‚â§ (1 - 0) * dist y x := by gcongr; exact h.1\n    _ = dist y x := by rw [sub_zero, one_mul]\n\n"}
{"name":"closure_ball","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\nr : Real\nhr : Ne r 0\n‚ä¢ Eq (closure (Metric.ball x r)) (Metric.closedBall x r)","decl":"theorem closure_ball (x : E) {r : ‚Ñù} (hr : r ‚â† 0) : closure (ball x r) = closedBall x r := by\n  refine Subset.antisymm closure_ball_subset_closedBall fun y hy => ?_\n  have : ContinuousWithinAt (fun c : ‚Ñù => c ‚Ä¢ (y - x) + x) (Ico 0 1) 1 :=\n    ((continuous_id.smul continuous_const).add continuous_const).continuousWithinAt\n  convert this.mem_closure _ _\n  ¬∑ rw [one_smul, sub_add_cancel]\n  ¬∑ simp [closure_Ico zero_ne_one, zero_le_one]\n  ¬∑ rintro c ‚ü®hc0, hc1‚ü©\n    rw [mem_ball, dist_eq_norm, add_sub_cancel_right, norm_smul, Real.norm_eq_abs,\n      abs_of_nonneg hc0, mul_comm, ‚Üê mul_one r]\n    rw [mem_closedBall, dist_eq_norm] at hy\n    replace hr : 0 < r := ((norm_nonneg _).trans hy).lt_of_ne hr.symm\n    apply mul_lt_mul' <;> assumption\n\n"}
{"name":"frontier_ball","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\nr : Real\nhr : Ne r 0\n‚ä¢ Eq (frontier (Metric.ball x r)) (Metric.sphere x r)","decl":"theorem frontier_ball (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :\n    frontier (ball x r) = sphere x r := by\n  rw [frontier, closure_ball x hr, isOpen_ball.interior_eq, closedBall_diff_ball]\n\n"}
{"name":"interior_closedBall","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\nr : Real\nhr : Ne r 0\n‚ä¢ Eq (interior (Metric.closedBall x r)) (Metric.ball x r)","decl":"theorem interior_closedBall (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :\n    interior (closedBall x r) = ball x r := by\n  cases' hr.lt_or_lt with hr hr\n  ¬∑ rw [closedBall_eq_empty.2 hr, ball_eq_empty.2 hr.le, interior_empty]\n  refine Subset.antisymm ?_ ball_subset_interior_closedBall\n  intro y hy\n  rcases (mem_closedBall.1 <| interior_subset hy).lt_or_eq with (hr | rfl)\n  ¬∑ exact hr\n  set f : ‚Ñù ‚Üí E := fun c : ‚Ñù => c ‚Ä¢ (y - x) + x\n  suffices f ‚Åª¬π' closedBall x (dist y x) ‚äÜ Icc (-1) 1 by\n    have hfc : Continuous f := (continuous_id.smul continuous_const).add continuous_const\n    have hf1 : (1 : ‚Ñù) ‚àà f ‚Åª¬π' interior (closedBall x <| dist y x) := by simpa [f]\n    have h1 : (1 : ‚Ñù) ‚àà interior (Icc (-1 : ‚Ñù) 1) :=\n      interior_mono this (preimage_interior_subset_interior_preimage hfc hf1)\n    simp at h1\n  intro c hc\n  rw [mem_Icc, ‚Üê abs_le, ‚Üê Real.norm_eq_abs, ‚Üê mul_le_mul_right hr]\n  simpa [f, dist_eq_norm, norm_smul] using hc\n\n"}
{"name":"frontier_closedBall","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\nr : Real\nhr : Ne r 0\n‚ä¢ Eq (frontier (Metric.closedBall x r)) (Metric.sphere x r)","decl":"theorem frontier_closedBall (x : E) {r : ‚Ñù} (hr : r ‚â† 0) :\n    frontier (closedBall x r) = sphere x r := by\n  rw [frontier, closure_closedBall, interior_closedBall x hr, closedBall_diff_ball]\n\n"}
{"name":"interior_sphere","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\nr : Real\nhr : Ne r 0\n‚ä¢ Eq (interior (Metric.sphere x r)) EmptyCollection.emptyCollection","decl":"theorem interior_sphere (x : E) {r : ‚Ñù} (hr : r ‚â† 0) : interior (sphere x r) = ‚àÖ := by\n  rw [‚Üê frontier_closedBall x hr, interior_frontier isClosed_ball]\n\n"}
{"name":"frontier_sphere","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬π : SeminormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nx : E\nr : Real\nhr : Ne r 0\n‚ä¢ Eq (frontier (Metric.sphere x r)) (Metric.sphere x r)","decl":"theorem frontier_sphere (x : E) {r : ‚Ñù} (hr : r ‚â† 0) : frontier (sphere x r) = sphere x r := by\n  rw [isClosed_sphere.frontier_eq, interior_sphere x hr, diff_empty]\n\n"}
{"name":"exists_norm_eq","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\nc : Real\nhc : LE.le 0 c\n‚ä¢ Exists fun x => Eq (Norm.norm x) c","decl":"theorem exists_norm_eq {c : ‚Ñù} (hc : 0 ‚â§ c) : ‚àÉ x : E, ‚Äñx‚Äñ = c := by\n  rcases exists_ne (0 : E) with ‚ü®x, hx‚ü©\n  rw [‚Üê norm_ne_zero_iff] at hx\n  use c ‚Ä¢ ‚Äñx‚Äñ‚Åª¬π ‚Ä¢ x\n  simp [norm_smul, Real.norm_of_nonneg hc, abs_of_nonneg hc, inv_mul_cancel‚ÇÄ hx]\n\n"}
{"name":"range_norm","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\n‚ä¢ Eq (Set.range Norm.norm) (Set.Ici 0)","decl":"@[simp]\ntheorem range_norm : range (norm : E ‚Üí ‚Ñù) = Ici 0 :=\n  Subset.antisymm (range_subset_iff.2 norm_nonneg) fun _ => exists_norm_eq E\n\n"}
{"name":"nnnorm_surjective","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\n‚ä¢ Function.Surjective NNNorm.nnnorm","decl":"theorem nnnorm_surjective : Surjective (nnnorm : E ‚Üí ‚Ñù‚â•0) := fun c =>\n  (exists_norm_eq E c.coe_nonneg).imp fun _ h => NNReal.eq h\n\n"}
{"name":"range_nnnorm","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\n‚ä¢ Eq (Set.range NNNorm.nnnorm) Set.univ","decl":"@[simp]\ntheorem range_nnnorm : range (nnnorm : E ‚Üí ‚Ñù‚â•0) = univ :=\n  (nnnorm_surjective E).range_eq\n\n"}
{"name":"interior_closedBall'","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\nx : E\nr : Real\n‚ä¢ Eq (interior (Metric.closedBall x r)) (Metric.ball x r)","decl":"theorem interior_closedBall' (x : E) (r : ‚Ñù) : interior (closedBall x r) = ball x r := by\n  rcases eq_or_ne r 0 with (rfl | hr)\n  ¬∑ rw [closedBall_zero, ball_zero, interior_singleton]\n  ¬∑ exact interior_closedBall x hr\n\n"}
{"name":"frontier_closedBall'","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\nx : E\nr : Real\n‚ä¢ Eq (frontier (Metric.closedBall x r)) (Metric.sphere x r)","decl":"theorem frontier_closedBall' (x : E) (r : ‚Ñù) : frontier (closedBall x r) = sphere x r := by\n  rw [frontier, closure_closedBall, interior_closedBall' x r, closedBall_diff_ball]\n\n"}
{"name":"interior_sphere'","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\nx : E\nr : Real\n‚ä¢ Eq (interior (Metric.sphere x r)) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem interior_sphere' (x : E) (r : ‚Ñù) : interior (sphere x r) = ‚àÖ := by\n  rw [‚Üê frontier_closedBall' x, interior_frontier isClosed_ball]\n\n"}
{"name":"frontier_sphere'","module":"Mathlib.Analysis.NormedSpace.Real","initialProofState":"E : Type u_1\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : Nontrivial E\nx : E\nr : Real\n‚ä¢ Eq (frontier (Metric.sphere x r)) (Metric.sphere x r)","decl":"@[simp]\ntheorem frontier_sphere' (x : E) (r : ‚Ñù) : frontier (sphere x r) = sphere x r := by\n  rw [isClosed_sphere.frontier_eq, interior_sphere' x, diff_empty]\n\n"}
