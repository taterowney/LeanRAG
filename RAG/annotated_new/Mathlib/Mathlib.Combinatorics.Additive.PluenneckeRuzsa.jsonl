{"name":"Finset.ruzsa_triangle_inequality_div_div_div","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HDiv.hDiv A C).card B.card) (HMul.hMul (HDiv.hDiv A B).card (HDiv.hDiv C B).card)","decl":"/-- **Ruzsa's triangle inequality**. Division version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Subtraction version.\"]\ntheorem ruzsa_triangle_inequality_div_div_div (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A / B) * #(C / B) := by\n  rw [← card_product (A / B), ← mul_one #((A / B) ×ˢ (C / B))]\n  refine card_mul_le_card_mul (fun b (a, c) ↦ a / c = b) (fun x hx ↦ ?_)\n    fun x _ ↦ card_le_one_iff.2 fun hu hv ↦\n      ((mem_bipartiteBelow _).1 hu).2.symm.trans ?_\n  · obtain ⟨a, ha, c, hc, rfl⟩ := mem_div.1 hx\n    refine card_le_card_of_injOn (fun b ↦ (a / b, c / b)) (fun b hb ↦ ?_) fun b₁ _ b₂ _ h ↦ ?_\n    · rw [mem_bipartiteAbove]\n      exact ⟨mk_mem_product (div_mem_div ha hb) (div_mem_div hc hb), div_div_div_cancel_right ..⟩\n    · exact div_right_injective (Prod.ext_iff.1 h).1\n  · exact ((mem_bipartiteBelow _).1 hv).2\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_sub_sub_sub","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HSub.hSub A C).card B.card) (HMul.hMul (HSub.hSub A B).card (HSub.hSub C B).card)","decl":"/-- **Ruzsa's triangle inequality**. Division version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Subtraction version.\"]\ntheorem ruzsa_triangle_inequality_div_div_div (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A / B) * #(C / B) := by\n  rw [← card_product (A / B), ← mul_one #((A / B) ×ˢ (C / B))]\n  refine card_mul_le_card_mul (fun b (a, c) ↦ a / c = b) (fun x hx ↦ ?_)\n    fun x _ ↦ card_le_one_iff.2 fun hu hv ↦\n      ((mem_bipartiteBelow _).1 hu).2.symm.trans ?_\n  · obtain ⟨a, ha, c, hc, rfl⟩ := mem_div.1 hx\n    refine card_le_card_of_injOn (fun b ↦ (a / b, c / b)) (fun b hb ↦ ?_) fun b₁ _ b₂ _ h ↦ ?_\n    · rw [mem_bipartiteAbove]\n      exact ⟨mk_mem_product (div_mem_div ha hb) (div_mem_div hc hb), div_div_div_cancel_right ..⟩\n    · exact div_right_injective (Prod.ext_iff.1 h).1\n  · exact ((mem_bipartiteBelow _).1 hv).2\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mulInv_mulInv_mulInv","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HMul.hMul A (Inv.inv C)).card B.card) (HMul.hMul (HMul.hMul A (Inv.inv B)).card (HMul.hMul C (Inv.inv B)).card)","decl":"/-- **Ruzsa's triangle inequality**. Mulinv-mulinv-mulinv version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Addneg-addneg-addneg version.\"]\ntheorem ruzsa_triangle_inequality_mulInv_mulInv_mulInv (A B C : Finset G) :\n    #(A * C⁻¹) * #B ≤ #(A * B⁻¹) * #(C * B⁻¹) := by\n  simpa [div_eq_mul_inv] using ruzsa_triangle_inequality_div_div_div A B C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_addNeg_addNeg_addNeg","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HAdd.hAdd A (Neg.neg C)).card B.card) (HMul.hMul (HAdd.hAdd A (Neg.neg B)).card (HAdd.hAdd C (Neg.neg B)).card)","decl":"/-- **Ruzsa's triangle inequality**. Mulinv-mulinv-mulinv version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Addneg-addneg-addneg version.\"]\ntheorem ruzsa_triangle_inequality_mulInv_mulInv_mulInv (A B C : Finset G) :\n    #(A * C⁻¹) * #B ≤ #(A * B⁻¹) * #(C * B⁻¹) := by\n  simpa [div_eq_mul_inv] using ruzsa_triangle_inequality_div_div_div A B C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_invMul_invMul_invMul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HMul.hMul (Inv.inv A) C).card) (HMul.hMul (HMul.hMul (Inv.inv B) A).card (HMul.hMul (Inv.inv B) C).card)","decl":"/-- **Ruzsa's triangle inequality**. Invmul-invmul-invmul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Negadd-negadd-negadd version.\"]\ntheorem ruzsa_triangle_inequality_invMul_invMul_invMul (A B C : Finset G) :\n    #B * #(A⁻¹ * C) ≤ #(B⁻¹ * A) * #(B⁻¹ * C) := by\n  simpa [mul_comm, div_eq_mul_inv, ← map_op_mul, ← map_op_inv] using\n    ruzsa_triangle_inequality_div_div_div (G := Gᵐᵒᵖ) (C.map opEquiv.toEmbedding)\n      (B.map opEquiv.toEmbedding) (A.map opEquiv.toEmbedding)\n\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_negAdd_negAdd_negAdd","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HAdd.hAdd (Neg.neg A) C).card) (HMul.hMul (HAdd.hAdd (Neg.neg B) A).card (HAdd.hAdd (Neg.neg B) C).card)","decl":"/-- **Ruzsa's triangle inequality**. Invmul-invmul-invmul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Negadd-negadd-negadd version.\"]\ntheorem ruzsa_triangle_inequality_invMul_invMul_invMul (A B C : Finset G) :\n    #B * #(A⁻¹ * C) ≤ #(B⁻¹ * A) * #(B⁻¹ * C) := by\n  simpa [mul_comm, div_eq_mul_inv, ← map_op_mul, ← map_op_inv] using\n    ruzsa_triangle_inequality_div_div_div (G := Gᵐᵒᵖ) (C.map opEquiv.toEmbedding)\n      (B.map opEquiv.toEmbedding) (A.map opEquiv.toEmbedding)\n\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_div_mul_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HDiv.hDiv A C).card B.card) (HMul.hMul (HMul.hMul A B).card (HMul.hMul C B).card)","decl":"/-- **Ruzsa's triangle inequality**. Div-mul-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Sub-add-add version.\"]\ntheorem ruzsa_triangle_inequality_div_mul_mul (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A * B) * #(C * B) := by\n  simpa using ruzsa_triangle_inequality_div_div_div A B⁻¹ C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_sub_add_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HSub.hSub A C).card B.card) (HMul.hMul (HAdd.hAdd A B).card (HAdd.hAdd C B).card)","decl":"/-- **Ruzsa's triangle inequality**. Div-mul-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Sub-add-add version.\"]\ntheorem ruzsa_triangle_inequality_div_mul_mul (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A * B) * #(C * B) := by\n  simpa using ruzsa_triangle_inequality_div_div_div A B⁻¹ C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_addNeg_add_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HAdd.hAdd A (Neg.neg C)).card B.card) (HMul.hMul (HAdd.hAdd A B).card (HAdd.hAdd C B).card)","decl":"/-- **Ruzsa's triangle inequality**. Mulinv-mul-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Addneg-add-add version.\"]\ntheorem ruzsa_triangle_inequality_mulInv_mul_mul (A B C : Finset G) :\n    #(A * C⁻¹) * #B ≤ #(A * B) * #(C * B) := by\n  simpa using ruzsa_triangle_inequality_mulInv_mulInv_mulInv A B⁻¹ C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mulInv_mul_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HMul.hMul A (Inv.inv C)).card B.card) (HMul.hMul (HMul.hMul A B).card (HMul.hMul C B).card)","decl":"/-- **Ruzsa's triangle inequality**. Mulinv-mul-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Addneg-add-add version.\"]\ntheorem ruzsa_triangle_inequality_mulInv_mul_mul (A B C : Finset G) :\n    #(A * C⁻¹) * #B ≤ #(A * B) * #(C * B) := by\n  simpa using ruzsa_triangle_inequality_mulInv_mulInv_mulInv A B⁻¹ C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_invMul_mul_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HMul.hMul (Inv.inv A) C).card) (HMul.hMul (HMul.hMul B A).card (HMul.hMul B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Invmul-mul-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Negadd-add-add version.\"]\ntheorem ruzsa_triangle_inequality_invMul_mul_mul (A B C : Finset G) :\n    #B * #(A⁻¹ * C) ≤ #(B * A) * #(B * C) := by\n  simpa using ruzsa_triangle_inequality_invMul_invMul_invMul A B⁻¹ C\n\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_negAdd_add_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HAdd.hAdd (Neg.neg A) C).card) (HMul.hMul (HAdd.hAdd B A).card (HAdd.hAdd B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Invmul-mul-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Negadd-add-add version.\"]\ntheorem ruzsa_triangle_inequality_invMul_mul_mul (A B C : Finset G) :\n    #B * #(A⁻¹ * C) ≤ #(B * A) * #(B * C) := by\n  simpa using ruzsa_triangle_inequality_invMul_invMul_invMul A B⁻¹ C\n\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mul_div_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HMul.hMul A C).card) (HMul.hMul (HDiv.hDiv B A).card (HMul.hMul B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-div-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-sub-add version.\"]\ntheorem ruzsa_triangle_inequality_mul_div_mul (A B C : Finset G) :\n    #B * #(A * C) ≤ #(B / A) * #(B * C) := by\n  simpa [div_eq_mul_inv] using ruzsa_triangle_inequality_invMul_mul_mul A⁻¹ B C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_add_sub_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HAdd.hAdd A C).card) (HMul.hMul (HSub.hSub B A).card (HAdd.hAdd B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-div-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-sub-add version.\"]\ntheorem ruzsa_triangle_inequality_mul_div_mul (A B C : Finset G) :\n    #B * #(A * C) ≤ #(B / A) * #(B * C) := by\n  simpa [div_eq_mul_inv] using ruzsa_triangle_inequality_invMul_mul_mul A⁻¹ B C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_add_addNeg_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HAdd.hAdd A C).card) (HMul.hMul (HAdd.hAdd B (Neg.neg A)).card (HAdd.hAdd B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-mulinv-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-addneg-add version.\"]\ntheorem ruzsa_triangle_inequality_mul_mulInv_mul (A B C : Finset G) :\n    #B * #(A * C) ≤ #(B * A⁻¹) * #(B * C) := by\n  simpa [div_eq_mul_inv] using ruzsa_triangle_inequality_mul_div_mul A B C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mul_mulInv_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul B.card (HMul.hMul A C).card) (HMul.hMul (HMul.hMul B (Inv.inv A)).card (HMul.hMul B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-mulinv-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-addneg-add version.\"]\ntheorem ruzsa_triangle_inequality_mul_mulInv_mul (A B C : Finset G) :\n    #B * #(A * C) ≤ #(B * A⁻¹) * #(B * C) := by\n  simpa [div_eq_mul_inv] using ruzsa_triangle_inequality_mul_div_mul A B C\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_add_add_negAdd","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HAdd.hAdd A C).card B.card) (HMul.hMul (HAdd.hAdd A B).card (HAdd.hAdd (Neg.neg C) B).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-mul-invmul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-add-negadd version.\"]\ntheorem ruzsa_triangle_inequality_mul_mul_invMul (A B C : Finset G) :\n    #(A * C) * #B ≤ #(A * B) * #(C⁻¹ * B) := by\n  simpa using ruzsa_triangle_inequality_mulInv_mul_mul A B C⁻¹\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mul_mul_invMul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : Group G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HMul.hMul A C).card B.card) (HMul.hMul (HMul.hMul A B).card (HMul.hMul (Inv.inv C) B).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-mul-invmul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-add-negadd version.\"]\ntheorem ruzsa_triangle_inequality_mul_mul_invMul (A B C : Finset G) :\n    #(A * C) * #B ≤ #(A * B) * #(C⁻¹ * B) := by\n  simpa using ruzsa_triangle_inequality_mulInv_mul_mul A B C⁻¹\n\n"}
{"name":"Finset.pluennecke_petridis_inequality_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA B C : Finset G\nhA : ∀ (A' : Finset G), HasSubset.Subset A' A → LE.le (HMul.hMul (HAdd.hAdd A B).card A'.card) (HMul.hMul (HAdd.hAdd A' B).card A.card)\n⊢ LE.le (HMul.hMul (HAdd.hAdd (HAdd.hAdd A B) C).card A.card) (HMul.hMul (HAdd.hAdd A B).card (HAdd.hAdd A C).card)","decl":"@[to_additive]\ntheorem pluennecke_petridis_inequality_mul (C : Finset G)\n    (hA : ∀ A' ⊆ A, #(A * B) * #A' ≤ #(A' * B) * #A) :\n    #(A * B * C) * #A ≤ #(A * B) * #(A * C) := by\n  induction' C using Finset.induction_on with x C _ ih\n  · simp\n  set A' := A ∩ (A * C / {x}) with hA'\n  set C' := insert x C with hC'\n  have h₀ : A' * {x} = A * {x} ∩ (A * C) := by\n    rw [hA', inter_mul_singleton, (isUnit_singleton x).div_mul_cancel]\n  have h₁ : A * B * C' = A * B * C ∪ (A * B * {x}) \\ (A' * B * {x}) := by\n    rw [hC', insert_eq, union_comm, mul_union]\n    refine (sup_sdiff_eq_sup ?_).symm\n    rw [mul_right_comm, mul_right_comm A, h₀]\n    exact mul_subset_mul_right inter_subset_right\n  have h₂ : A' * B * {x} ⊆ A * B * {x} :=\n    mul_subset_mul_right (mul_subset_mul_right inter_subset_left)\n  have h₃ : #(A * B * C') ≤ #(A * B * C) + #(A * B) - #(A' * B) := by\n    rw [h₁]\n    refine (card_union_le _ _).trans_eq ?_\n    rw [card_sdiff h₂, ← add_tsub_assoc_of_le (card_le_card h₂), card_mul_singleton,\n      card_mul_singleton]\n  refine (mul_le_mul_right' h₃ _).trans ?_\n  rw [tsub_mul, add_mul]\n  refine (tsub_le_tsub (add_le_add_right ih _) <| hA _ inter_subset_left).trans_eq ?_\n  rw [← mul_add, ← mul_tsub, ← hA', hC', insert_eq, mul_union, ← card_mul_singleton A x, ←\n    card_mul_singleton A' x, add_comm #_, h₀,\n    eq_tsub_of_add_eq (card_union_add_card_inter _ _)]\n\n"}
{"name":"Finset.pluennecke_petridis_inequality_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA B C : Finset G\nhA : ∀ (A' : Finset G), HasSubset.Subset A' A → LE.le (HMul.hMul (HMul.hMul A B).card A'.card) (HMul.hMul (HMul.hMul A' B).card A.card)\n⊢ LE.le (HMul.hMul (HMul.hMul (HMul.hMul A B) C).card A.card) (HMul.hMul (HMul.hMul A B).card (HMul.hMul A C).card)","decl":"@[to_additive]\ntheorem pluennecke_petridis_inequality_mul (C : Finset G)\n    (hA : ∀ A' ⊆ A, #(A * B) * #A' ≤ #(A' * B) * #A) :\n    #(A * B * C) * #A ≤ #(A * B) * #(A * C) := by\n  induction' C using Finset.induction_on with x C _ ih\n  · simp\n  set A' := A ∩ (A * C / {x}) with hA'\n  set C' := insert x C with hC'\n  have h₀ : A' * {x} = A * {x} ∩ (A * C) := by\n    rw [hA', inter_mul_singleton, (isUnit_singleton x).div_mul_cancel]\n  have h₁ : A * B * C' = A * B * C ∪ (A * B * {x}) \\ (A' * B * {x}) := by\n    rw [hC', insert_eq, union_comm, mul_union]\n    refine (sup_sdiff_eq_sup ?_).symm\n    rw [mul_right_comm, mul_right_comm A, h₀]\n    exact mul_subset_mul_right inter_subset_right\n  have h₂ : A' * B * {x} ⊆ A * B * {x} :=\n    mul_subset_mul_right (mul_subset_mul_right inter_subset_left)\n  have h₃ : #(A * B * C') ≤ #(A * B * C) + #(A * B) - #(A' * B) := by\n    rw [h₁]\n    refine (card_union_le _ _).trans_eq ?_\n    rw [card_sdiff h₂, ← add_tsub_assoc_of_le (card_le_card h₂), card_mul_singleton,\n      card_mul_singleton]\n  refine (mul_le_mul_right' h₃ _).trans ?_\n  rw [tsub_mul, add_mul]\n  refine (tsub_le_tsub (add_le_add_right ih _) <| hA _ inter_subset_left).trans_eq ?_\n  rw [← mul_add, ← mul_tsub, ← hA', hC', insert_eq, mul_union, ← card_mul_singleton A x, ←\n    card_mul_singleton A' x, add_comm #_, h₀,\n    eq_tsub_of_add_eq (card_union_add_card_inter _ _)]\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mul_mul_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HMul.hMul A C).card B.card) (HMul.hMul (HMul.hMul A B).card (HMul.hMul B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Multiplication version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Addition version.\"]\ntheorem ruzsa_triangle_inequality_mul_mul_mul (A B C : Finset G) :\n    #(A * C) * #B ≤ #(A * B) * #(B * C) := by\n  obtain rfl | hB := B.eq_empty_or_nonempty\n  · simp\n  have hB' : B ∈ B.powerset.erase ∅ := mem_erase_of_ne_of_mem hB.ne_empty (mem_powerset_self _)\n  obtain ⟨U, hU, hUA⟩ :=\n    exists_min_image (B.powerset.erase ∅) (fun U ↦ #(U * A) / #U : _ → ℚ≥0) ⟨B, hB'⟩\n  rw [mem_erase, mem_powerset, ← nonempty_iff_ne_empty] at hU\n  refine cast_le.1 (?_ : (_ : ℚ≥0) ≤ _)\n  push_cast\n  rw [← le_div_iff₀ (cast_pos.2 hB.card_pos), mul_div_right_comm, mul_comm _ B]\n  refine (Nat.cast_le.2 <| card_le_card_mul_left hU.1).trans ?_\n  refine le_trans ?_\n    (mul_le_mul (hUA _ hB') (cast_le.2 <| card_le_card <| mul_subset_mul_right hU.2)\n      (zero_le _) (zero_le _))\n  #adaptation_note /-- 2024-11-01\n  `le_div_iff₀` is synthesizing wrong `GroupWithZero` without `@` -/\n  rw [← mul_div_right_comm, ← mul_assoc,\n    @le_div_iff₀ _ (_) _ _ _ _ _ _ _ (cast_pos.2 hU.1.card_pos)]\n  exact mod_cast pluennecke_petridis_inequality_mul C (mul_aux hU.1 hU.2 hUA)\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_add_add_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HAdd.hAdd A C).card B.card) (HMul.hMul (HAdd.hAdd A B).card (HAdd.hAdd B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Multiplication version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Addition version.\"]\ntheorem ruzsa_triangle_inequality_mul_mul_mul (A B C : Finset G) :\n    #(A * C) * #B ≤ #(A * B) * #(B * C) := by\n  obtain rfl | hB := B.eq_empty_or_nonempty\n  · simp\n  have hB' : B ∈ B.powerset.erase ∅ := mem_erase_of_ne_of_mem hB.ne_empty (mem_powerset_self _)\n  obtain ⟨U, hU, hUA⟩ :=\n    exists_min_image (B.powerset.erase ∅) (fun U ↦ #(U * A) / #U : _ → ℚ≥0) ⟨B, hB'⟩\n  rw [mem_erase, mem_powerset, ← nonempty_iff_ne_empty] at hU\n  refine cast_le.1 (?_ : (_ : ℚ≥0) ≤ _)\n  push_cast\n  rw [← le_div_iff₀ (cast_pos.2 hB.card_pos), mul_div_right_comm, mul_comm _ B]\n  refine (Nat.cast_le.2 <| card_le_card_mul_left hU.1).trans ?_\n  refine le_trans ?_\n    (mul_le_mul (hUA _ hB') (cast_le.2 <| card_le_card <| mul_subset_mul_right hU.2)\n      (zero_le _) (zero_le _))\n  #adaptation_note /-- 2024-11-01\n  `le_div_iff₀` is synthesizing wrong `GroupWithZero` without `@` -/\n  rw [← mul_div_right_comm, ← mul_assoc,\n    @le_div_iff₀ _ (_) _ _ _ _ _ _ _ (cast_pos.2 hU.1.card_pos)]\n  exact mod_cast pluennecke_petridis_inequality_mul C (mul_aux hU.1 hU.2 hUA)\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_add_sub_sub","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HAdd.hAdd A C).card B.card) (HMul.hMul (HSub.hSub A B).card (HSub.hSub B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-div-div version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-sub-sub version.\"]\ntheorem ruzsa_triangle_inequality_mul_div_div (A B C : Finset G) :\n    #(A * C) * #B ≤ #(A / B) * #(B / C) := by\n  rw [div_eq_mul_inv, ← card_inv B, ← card_inv (B / C), inv_div', div_inv_eq_mul]\n  exact ruzsa_triangle_inequality_mul_mul_mul _ _ _\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_mul_div_div","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HMul.hMul A C).card B.card) (HMul.hMul (HDiv.hDiv A B).card (HDiv.hDiv B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Mul-div-div version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Add-sub-sub version.\"]\ntheorem ruzsa_triangle_inequality_mul_div_div (A B C : Finset G) :\n    #(A * C) * #B ≤ #(A / B) * #(B / C) := by\n  rw [div_eq_mul_inv, ← card_inv B, ← card_inv (B / C), inv_div', div_inv_eq_mul]\n  exact ruzsa_triangle_inequality_mul_mul_mul _ _ _\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_div_mul_div","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HDiv.hDiv A C).card B.card) (HMul.hMul (HMul.hMul A B).card (HDiv.hDiv B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Div-mul-div version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Sub-add-sub version.\"]\ntheorem ruzsa_triangle_inequality_div_mul_div (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A * B) * #(B / C) := by\n  rw [div_eq_mul_inv, div_eq_mul_inv]\n  exact ruzsa_triangle_inequality_mul_mul_mul _ _ _\n\n"}
{"name":"Finset.ruzsa_triangle_inequality_sub_add_sub","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HSub.hSub A C).card B.card) (HMul.hMul (HAdd.hAdd A B).card (HSub.hSub B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Div-mul-div version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Sub-add-sub version.\"]\ntheorem ruzsa_triangle_inequality_div_mul_div (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A * B) * #(B / C) := by\n  rw [div_eq_mul_inv, div_eq_mul_inv]\n  exact ruzsa_triangle_inequality_mul_mul_mul _ _ _\n\n"}
{"name":"Finset.card_div_mul_le_card_div_mul_card_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HDiv.hDiv A C).card B.card) (HMul.hMul (HDiv.hDiv A B).card (HMul.hMul B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Div-div-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Sub-sub-add version.\"]\ntheorem card_div_mul_le_card_div_mul_card_mul (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A / B) * #(B * C) := by\n  rw [← div_inv_eq_mul, div_eq_mul_inv]\n  exact ruzsa_triangle_inequality_mul_div_div _ _ _\n\n-- Auxiliary lemma towards the Plünnecke-Ruzsa inequality\n"}
{"name":"Finset.card_sub_add_le_card_sub_add_card_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA B C : Finset G\n⊢ LE.le (HMul.hMul (HSub.hSub A C).card B.card) (HMul.hMul (HSub.hSub A B).card (HAdd.hAdd B C).card)","decl":"/-- **Ruzsa's triangle inequality**. Div-div-mul version. -/\n@[to_additive \"**Ruzsa's triangle inequality**. Sub-sub-add version.\"]\ntheorem card_div_mul_le_card_div_mul_card_mul (A B C : Finset G) :\n    #(A / C) * #B ≤ #(A / B) * #(B * C) := by\n  rw [← div_inv_eq_mul, div_eq_mul_inv]\n  exact ruzsa_triangle_inequality_mul_div_div _ _ _\n\n-- Auxiliary lemma towards the Plünnecke-Ruzsa inequality\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_pow_div_pow_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nm n : Nat\n⊢ LE.le (↑(HDiv.hDiv (HPow.hPow B m) (HPow.hPow B n)).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HMul.hMul A B).card ↑A.card) (HAdd.hAdd m n)) ↑A.card)","decl":"/-- The **Plünnecke-Ruzsa inequality**. Multiplication version. Note that this is genuinely harder\nthan the division version because we cannot use a double counting argument. -/\n@[to_additive \"The **Plünnecke-Ruzsa inequality**. Addition version. Note that this is genuinely\nharder than the subtraction version because we cannot use a double counting argument.\"]\ntheorem pluennecke_ruzsa_inequality_pow_div_pow_mul (hA : A.Nonempty) (B : Finset G) (m n : ℕ) :\n    #(B ^ m / B ^ n) ≤ (#(A * B) / #A : ℚ≥0) ^ (m + n) * #A := by\n  have hA' : A ∈ A.powerset.erase ∅ := mem_erase_of_ne_of_mem hA.ne_empty (mem_powerset_self _)\n  obtain ⟨C, hC, hCmin⟩ :=\n    exists_min_image (A.powerset.erase ∅) (fun C ↦ #(C * B) / #C : _ → ℚ≥0) ⟨A, hA'⟩\n  rw [mem_erase, mem_powerset, ← nonempty_iff_ne_empty] at hC\n  obtain ⟨hC, hCA⟩ := hC\n  refine le_of_mul_le_mul_right ?_ (by positivity : (0 : ℚ≥0) < #C)\n  calc\n    (#(B ^ m / B ^ n) * #C : ℚ≥0)\n      ≤ #(B ^ m * C) * #(B ^ n * C) := mod_cast ruzsa_triangle_inequality_div_mul_mul ..\n    _ = #(C * B ^ m) * #(C * B ^ n) := by simp_rw [mul_comm]\n    _ ≤ ((#(C * B) / #C) ^ m * #C) * ((#(C * B) / #C : ℚ≥0) ^ n * #C) := by\n      gcongr <;> exact card_mul_pow_le (mul_aux hC hCA hCmin) _\n    _ = (#(C * B) / #C) ^ (m + n) * #C * #C := by ring\n    _ ≤ (#(A * B) / #A) ^ (m + n) * #A * #C := by gcongr (?_ ^ _) * #?_ * _; exact hCmin _ hA'\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_nsmul_sub_nsmul_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nm n : Nat\n⊢ LE.le (↑(HSub.hSub (HSMul.hSMul m B) (HSMul.hSMul n B)).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HAdd.hAdd A B).card ↑A.card) (HAdd.hAdd m n)) ↑A.card)","decl":"/-- The **Plünnecke-Ruzsa inequality**. Multiplication version. Note that this is genuinely harder\nthan the division version because we cannot use a double counting argument. -/\n@[to_additive \"The **Plünnecke-Ruzsa inequality**. Addition version. Note that this is genuinely\nharder than the subtraction version because we cannot use a double counting argument.\"]\ntheorem pluennecke_ruzsa_inequality_pow_div_pow_mul (hA : A.Nonempty) (B : Finset G) (m n : ℕ) :\n    #(B ^ m / B ^ n) ≤ (#(A * B) / #A : ℚ≥0) ^ (m + n) * #A := by\n  have hA' : A ∈ A.powerset.erase ∅ := mem_erase_of_ne_of_mem hA.ne_empty (mem_powerset_self _)\n  obtain ⟨C, hC, hCmin⟩ :=\n    exists_min_image (A.powerset.erase ∅) (fun C ↦ #(C * B) / #C : _ → ℚ≥0) ⟨A, hA'⟩\n  rw [mem_erase, mem_powerset, ← nonempty_iff_ne_empty] at hC\n  obtain ⟨hC, hCA⟩ := hC\n  refine le_of_mul_le_mul_right ?_ (by positivity : (0 : ℚ≥0) < #C)\n  calc\n    (#(B ^ m / B ^ n) * #C : ℚ≥0)\n      ≤ #(B ^ m * C) * #(B ^ n * C) := mod_cast ruzsa_triangle_inequality_div_mul_mul ..\n    _ = #(C * B ^ m) * #(C * B ^ n) := by simp_rw [mul_comm]\n    _ ≤ ((#(C * B) / #C) ^ m * #C) * ((#(C * B) / #C : ℚ≥0) ^ n * #C) := by\n      gcongr <;> exact card_mul_pow_le (mul_aux hC hCA hCmin) _\n    _ = (#(C * B) / #C) ^ (m + n) * #C * #C := by ring\n    _ ≤ (#(A * B) / #A) ^ (m + n) * #A * #C := by gcongr (?_ ^ _) * #?_ * _; exact hCmin _ hA'\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_pow_div_pow_div","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nm n : Nat\n⊢ LE.le (↑(HDiv.hDiv (HPow.hPow B m) (HPow.hPow B n)).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HDiv.hDiv A B).card ↑A.card) (HAdd.hAdd m n)) ↑A.card)","decl":"/-- The **Plünnecke-Ruzsa inequality**. Division version. -/\n@[to_additive \"The **Plünnecke-Ruzsa inequality**. Subtraction version.\"]\ntheorem pluennecke_ruzsa_inequality_pow_div_pow_div (hA : A.Nonempty) (B : Finset G) (m n : ℕ) :\n    #(B ^ m / B ^ n) ≤ (#(A / B) / #A : ℚ≥0) ^ (m + n) * #A := by\n  rw [← card_inv, inv_div', ← inv_pow, ← inv_pow, div_eq_mul_inv A]\n  exact pluennecke_ruzsa_inequality_pow_div_pow_mul hA _ _ _\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_nsmul_sub_nsmul_sub","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nm n : Nat\n⊢ LE.le (↑(HSub.hSub (HSMul.hSMul m B) (HSMul.hSMul n B)).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HSub.hSub A B).card ↑A.card) (HAdd.hAdd m n)) ↑A.card)","decl":"/-- The **Plünnecke-Ruzsa inequality**. Division version. -/\n@[to_additive \"The **Plünnecke-Ruzsa inequality**. Subtraction version.\"]\ntheorem pluennecke_ruzsa_inequality_pow_div_pow_div (hA : A.Nonempty) (B : Finset G) (m n : ℕ) :\n    #(B ^ m / B ^ n) ≤ (#(A / B) / #A : ℚ≥0) ^ (m + n) * #A := by\n  rw [← card_inv, inv_div', ← inv_pow, ← inv_pow, div_eq_mul_inv A]\n  exact pluennecke_ruzsa_inequality_pow_div_pow_mul hA _ _ _\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_pow_mul","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nn : Nat\n⊢ LE.le (↑(HPow.hPow B n).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HMul.hMul A B).card ↑A.card) n) ↑A.card)","decl":"/-- Special case of the **Plünnecke-Ruzsa inequality**. Multiplication version. -/\n@[to_additive \"Special case of the **Plünnecke-Ruzsa inequality**. Addition version.\"]\ntheorem pluennecke_ruzsa_inequality_pow_mul (hA : A.Nonempty) (B : Finset G) (n : ℕ) :\n    #(B ^ n) ≤ (#(A * B) / #A : ℚ≥0) ^ n * #A := by\n  simpa only [_root_.pow_zero, div_one] using pluennecke_ruzsa_inequality_pow_div_pow_mul hA _ _ 0\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_nsmul_add","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nn : Nat\n⊢ LE.le (↑(HSMul.hSMul n B).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HAdd.hAdd A B).card ↑A.card) n) ↑A.card)","decl":"/-- Special case of the **Plünnecke-Ruzsa inequality**. Multiplication version. -/\n@[to_additive \"Special case of the **Plünnecke-Ruzsa inequality**. Addition version.\"]\ntheorem pluennecke_ruzsa_inequality_pow_mul (hA : A.Nonempty) (B : Finset G) (n : ℕ) :\n    #(B ^ n) ≤ (#(A * B) / #A : ℚ≥0) ^ n * #A := by\n  simpa only [_root_.pow_zero, div_one] using pluennecke_ruzsa_inequality_pow_div_pow_mul hA _ _ 0\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_pow_div","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : CommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nn : Nat\n⊢ LE.le (↑(HPow.hPow B n).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HDiv.hDiv A B).card ↑A.card) n) ↑A.card)","decl":"/-- Special case of the **Plünnecke-Ruzsa inequality**. Division version. -/\n@[to_additive \"Special case of the **Plünnecke-Ruzsa inequality**. Subtraction version.\"]\ntheorem pluennecke_ruzsa_inequality_pow_div (hA : A.Nonempty) (B : Finset G) (n : ℕ) :\n    #(B ^ n) ≤ (#(A / B) / #A : ℚ≥0) ^ n * #A := by\n  simpa only [_root_.pow_zero, div_one] using pluennecke_ruzsa_inequality_pow_div_pow_div hA _ _ 0\n\n"}
{"name":"Finset.pluennecke_ruzsa_inequality_nsmul_sub","module":"Mathlib.Combinatorics.Additive.PluenneckeRuzsa","initialProofState":"G : Type u_1\ninst✝¹ : DecidableEq G\ninst✝ : AddCommGroup G\nA : Finset G\nhA : A.Nonempty\nB : Finset G\nn : Nat\n⊢ LE.le (↑(HSMul.hSMul n B).card) (HMul.hMul (HPow.hPow (HDiv.hDiv ↑(HSub.hSub A B).card ↑A.card) n) ↑A.card)","decl":"/-- Special case of the **Plünnecke-Ruzsa inequality**. Division version. -/\n@[to_additive \"Special case of the **Plünnecke-Ruzsa inequality**. Subtraction version.\"]\ntheorem pluennecke_ruzsa_inequality_pow_div (hA : A.Nonempty) (B : Finset G) (n : ℕ) :\n    #(B ^ n) ≤ (#(A / B) / #A : ℚ≥0) ^ n * #A := by\n  simpa only [_root_.pow_zero, div_one] using pluennecke_ruzsa_inequality_pow_div_pow_div hA _ _ 0\n\n"}
