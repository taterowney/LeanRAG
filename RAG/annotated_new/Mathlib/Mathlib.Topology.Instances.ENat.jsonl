{"name":"ENat.instOrderTopology","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ OrderTopology ENat","decl":"instance : OrderTopology ℕ∞ := ⟨rfl⟩\n\n"}
{"name":"ENat.range_natCast","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ Eq (Set.range Nat.cast) (Set.Iio Top.top)","decl":"@[simp] theorem range_natCast : range ((↑) : ℕ → ℕ∞) = Iio ⊤ :=\n  WithTop.range_coe\n\n"}
{"name":"ENat.isEmbedding_natCast","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ Topology.IsEmbedding Nat.cast","decl":"theorem isEmbedding_natCast : IsEmbedding ((↑) : ℕ → ℕ∞) :=\n  Nat.strictMono_cast.isEmbedding_of_ordConnected <| range_natCast ▸ ordConnected_Iio\n\n"}
{"name":"ENat.embedding_natCast","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ Topology.IsEmbedding Nat.cast","decl":"@[deprecated (since := \"2024-10-26\")]\nalias embedding_natCast := isEmbedding_natCast\n\n"}
{"name":"ENat.isOpenEmbedding_natCast","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ Topology.IsOpenEmbedding Nat.cast","decl":"theorem isOpenEmbedding_natCast : IsOpenEmbedding ((↑) : ℕ → ℕ∞) :=\n  ⟨isEmbedding_natCast, range_natCast ▸ isOpen_Iio⟩\n\n"}
{"name":"ENat.openEmbedding_natCast","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ Topology.IsOpenEmbedding Nat.cast","decl":"@[deprecated (since := \"2024-10-18\")]\nalias openEmbedding_natCast := isOpenEmbedding_natCast\n\n"}
{"name":"ENat.nhds_natCast","module":"Mathlib.Topology.Instances.ENat","initialProofState":"n : Nat\n⊢ Eq (nhds ↑n) (Pure.pure ↑n)","decl":"theorem nhds_natCast (n : ℕ) : 𝓝 (n : ℕ∞) = pure (n : ℕ∞) := by\n  simp [← isOpenEmbedding_natCast.map_nhds_eq]\n\n"}
{"name":"ENat.nhds_eq_pure","module":"Mathlib.Topology.Instances.ENat","initialProofState":"n : ENat\nh : Ne n Top.top\n⊢ Eq (nhds n) (Pure.pure n)","decl":"@[simp]\nprotected theorem nhds_eq_pure {n : ℕ∞} (h : n ≠ ⊤) : 𝓝 n = pure n := by\n  lift n to ℕ using h\n  simp [nhds_natCast]\n\n"}
{"name":"ENat.isOpen_singleton","module":"Mathlib.Topology.Instances.ENat","initialProofState":"x : ENat\nhx : Ne x Top.top\n⊢ IsOpen (Singleton.singleton x)","decl":"theorem isOpen_singleton {x : ℕ∞} (hx : x ≠ ⊤) : IsOpen {x} := by\n  rw [isOpen_singleton_iff_nhds_eq_pure, ENat.nhds_eq_pure hx]\n\n"}
{"name":"ENat.mem_nhds_iff","module":"Mathlib.Topology.Instances.ENat","initialProofState":"x : ENat\ns : Set ENat\nhx : Ne x Top.top\n⊢ Iff (Membership.mem (nhds x) s) (Membership.mem s x)","decl":"theorem mem_nhds_iff {x : ℕ∞} {s : Set ℕ∞} (hx : x ≠ ⊤) : s ∈ 𝓝 x ↔ x ∈ s := by\n  simp [hx]\n\n"}
{"name":"ENat.mem_nhds_natCast_iff","module":"Mathlib.Topology.Instances.ENat","initialProofState":"n : Nat\ns : Set ENat\n⊢ Iff (Membership.mem (nhds ↑n) s) (Membership.mem s ↑n)","decl":"theorem mem_nhds_natCast_iff (n : ℕ) {s : Set ℕ∞} : s ∈ 𝓝 (n : ℕ∞) ↔ (n : ℕ∞) ∈ s :=\n  mem_nhds_iff (coe_ne_top _)\n\n"}
{"name":"ENat.tendsto_nhds_top_iff_natCast_lt","module":"Mathlib.Topology.Instances.ENat","initialProofState":"α : Type u_1\nl : Filter α\nf : α → ENat\n⊢ Iff (Filter.Tendsto f l (nhds Top.top)) (∀ (n : Nat), Filter.Eventually (fun a => LT.lt (↑n) (f a)) l)","decl":"theorem tendsto_nhds_top_iff_natCast_lt {α : Type*} {l : Filter α} {f : α → ℕ∞} :\n    Tendsto f l (𝓝 ⊤) ↔ ∀ n : ℕ, ∀ᶠ a in l, n < f a := by\n  simp_rw [nhds_top_order, lt_top_iff_ne_top, tendsto_iInf, tendsto_principal]\n  exact Option.ball_ne_none\n\n"}
{"name":"ENat.instContinuousAdd","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ ContinuousAdd ENat","decl":"instance : ContinuousAdd ℕ∞ := by\n  refine ⟨continuous_iff_continuousAt.2 fun (a, b) ↦ ?_⟩\n  match a, b with\n  | ⊤, _ => exact tendsto_nhds_top_mono' continuousAt_fst fun p ↦ le_add_right le_rfl\n  | (a : ℕ), ⊤ => exact tendsto_nhds_top_mono' continuousAt_snd fun p ↦ le_add_left le_rfl\n  | (a : ℕ), (b : ℕ) => simp [ContinuousAt, nhds_prod_eq, tendsto_pure_nhds]\n\n"}
{"name":"ENat.instContinuousMul","module":"Mathlib.Topology.Instances.ENat","initialProofState":"⊢ ContinuousMul ENat","decl":"instance : ContinuousMul ℕ∞ where\n  continuous_mul :=\n    have key (a : ℕ∞) : ContinuousAt (· * ·).uncurry (a, ⊤) := by\n      rcases (zero_le a).eq_or_gt with rfl | ha\n      · simp [ContinuousAt, nhds_prod_eq]\n      · simp only [ContinuousAt, Function.uncurry, mul_top ha.ne']\n        refine tendsto_nhds_top_mono continuousAt_snd ?_\n        filter_upwards [continuousAt_fst (lt_mem_nhds ha)] with (x, y) (hx : 0 < x)\n        exact le_mul_of_one_le_left (zero_le y) (Order.one_le_iff_pos.2 hx)\n    continuous_iff_continuousAt.2 <| Prod.forall.2 fun\n      | (a : ℕ∞), ⊤ => key a\n      | ⊤, (b : ℕ∞) =>\n        ((key b).comp_of_eq (continuous_swap.tendsto (⊤, b)) rfl).congr <|\n          .of_forall fun _ ↦ mul_comm ..\n      | (a : ℕ), (b : ℕ) => by\n        simp [ContinuousAt, nhds_prod_eq, tendsto_pure_nhds]\n\n"}
{"name":"ENat.continuousAt_sub","module":"Mathlib.Topology.Instances.ENat","initialProofState":"a b : ENat\nh : Or (Ne a Top.top) (Ne b Top.top)\n⊢ ContinuousAt (Function.uncurry fun x1 x2 => HSub.hSub x1 x2) { fst := a, snd := b }","decl":"protected theorem continuousAt_sub {a b : ℕ∞} (h : a ≠ ⊤ ∨ b ≠ ⊤) :\n    ContinuousAt (· - ·).uncurry (a, b) := by\n  match a, b, h with\n  | (a : ℕ), (b : ℕ), _ => simp [ContinuousAt, nhds_prod_eq]\n  | (a : ℕ), ⊤, _ =>\n    suffices ∀ᶠ b in 𝓝 ⊤, (a - b : ℕ∞) = 0 by\n      simpa [ContinuousAt, nhds_prod_eq, tsub_eq_zero_of_le]\n    filter_upwards [le_mem_nhds (WithTop.coe_lt_top a)] with b using tsub_eq_zero_of_le\n  | ⊤, (b : ℕ), _ =>\n    suffices ∀ n : ℕ, ∀ᶠ a : ℕ∞ in 𝓝 ⊤, b + n < a by\n      simpa [ContinuousAt, nhds_prod_eq, (· ∘ ·), lt_tsub_iff_left, tendsto_nhds_top_iff_natCast_lt]\n    exact fun n ↦ lt_mem_nhds <| WithTop.coe_lt_top (b + n)\n\n"}
{"name":"Filter.Tendsto.enatSub","module":"Mathlib.Topology.Instances.ENat","initialProofState":"α : Type u_1\nl : Filter α\nf g : α → ENat\na b : ENat\nhf : Filter.Tendsto f l (nhds a)\nhg : Filter.Tendsto g l (nhds b)\nh : Or (Ne a Top.top) (Ne b Top.top)\n⊢ Filter.Tendsto (fun x => HSub.hSub (f x) (g x)) l (nhds (HSub.hSub a b))","decl":"theorem Filter.Tendsto.enatSub {α : Type*} {l : Filter α} {f g : α → ℕ∞} {a b : ℕ∞}\n    (hf : Tendsto f l (𝓝 a)) (hg : Tendsto g l (𝓝 b)) (h : a ≠ ⊤ ∨ b ≠ ⊤) :\n    Tendsto (fun x ↦ f x - g x) l (𝓝 (a - b)) :=\n  (ENat.continuousAt_sub h).tendsto.comp (hf.prod_mk_nhds hg)\n\n"}
{"name":"ContinuousWithinAt.enatSub","module":"Mathlib.Topology.Instances.ENat","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf g : X → ENat\ns : Set X\nx : X\nhf : ContinuousWithinAt f s x\nhg : ContinuousWithinAt g s x\nh : Or (Ne (f x) Top.top) (Ne (g x) Top.top)\n⊢ ContinuousWithinAt (fun x => HSub.hSub (f x) (g x)) s x","decl":"nonrec theorem ContinuousWithinAt.enatSub\n    (hf : ContinuousWithinAt f s x) (hg : ContinuousWithinAt g s x) (h : f x ≠ ⊤ ∨ g x ≠ ⊤) :\n    ContinuousWithinAt (fun x ↦ f x - g x) s x :=\n  hf.enatSub hg h\n\n"}
{"name":"ContinuousAt.enatSub","module":"Mathlib.Topology.Instances.ENat","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf g : X → ENat\nx : X\nhf : ContinuousAt f x\nhg : ContinuousAt g x\nh : Or (Ne (f x) Top.top) (Ne (g x) Top.top)\n⊢ ContinuousAt (fun x => HSub.hSub (f x) (g x)) x","decl":"nonrec theorem ContinuousAt.enatSub\n    (hf : ContinuousAt f x) (hg : ContinuousAt g x) (h : f x ≠ ⊤ ∨ g x ≠ ⊤) :\n    ContinuousAt (fun x ↦ f x - g x) x :=\n  hf.enatSub hg h\n\n"}
{"name":"ContinuousOn.enatSub","module":"Mathlib.Topology.Instances.ENat","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf g : X → ENat\ns : Set X\nhf : ContinuousOn f s\nhg : ContinuousOn g s\nh : ∀ (x : X), Membership.mem s x → Or (Ne (f x) Top.top) (Ne (g x) Top.top)\n⊢ ContinuousOn (fun x => HSub.hSub (f x) (g x)) s","decl":"nonrec theorem ContinuousOn.enatSub\n    (hf : ContinuousOn f s) (hg : ContinuousOn g s) (h : ∀ x ∈ s, f x ≠ ⊤ ∨ g x ≠ ⊤) :\n    ContinuousOn (fun x ↦ f x - g x) s := fun x hx ↦\n  (hf x hx).enatSub (hg x hx) (h x hx)\n\n"}
{"name":"Continuous.enatSub","module":"Mathlib.Topology.Instances.ENat","initialProofState":"X : Type u_1\ninst✝ : TopologicalSpace X\nf g : X → ENat\nhf : Continuous f\nhg : Continuous g\nh : ∀ (x : X), Or (Ne (f x) Top.top) (Ne (g x) Top.top)\n⊢ Continuous fun x => HSub.hSub (f x) (g x)","decl":"nonrec theorem Continuous.enatSub\n    (hf : Continuous f) (hg : Continuous g) (h : ∀ x, f x ≠ ⊤ ∨ g x ≠ ⊤) :\n    Continuous (fun x ↦ f x - g x) :=\n  continuous_iff_continuousAt.2 fun x ↦ hf.continuousAt.enatSub hg.continuousAt (h x)\n"}
