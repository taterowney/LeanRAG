{"name":"ConvexOn.smul'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : LinearOrderedCommRing 𝕜\ninst✝⁸ : LinearOrderedCommRing E\ninst✝⁷ : LinearOrderedAddCommGroup F\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : Module E F\ninst✝³ : IsScalarTower 𝕜 E F\ninst✝² : SMulCommClass 𝕜 E F\ninst✝¹ : OrderedSMul 𝕜 F\ninst✝ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\nhf : ConvexOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConvexOn.smul' (hf : ConvexOn 𝕜 s f) (hg : ConvexOn 𝕜 s g) (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x)\n    (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : MonovaryOn f g s) : ConvexOn 𝕜 s (f • g) := by\n  refine ⟨hf.1, fun x hx y hy a b ha hb hab ↦ ?_⟩\n  dsimp\n  refine\n    (smul_le_smul (hf.2 hx hy ha hb hab) (hg.2 hx hy ha hb hab) (hf₀ <| hf.1 hx hy ha hb hab) <|\n      add_nonneg (smul_nonneg ha <| hg₀ hx) <| smul_nonneg hb <| hg₀ hy).trans ?_\n  calc\n      _ = (a * a) • (f x • g x) + (b * b) • (f y • g y) + (a * b) • (f x • g y + f y • g x) := ?_\n    _ ≤ (a * a) • (f x • g x) + (b * b) • (f y • g y) + (a * b) • (f x • g x + f y • g y) := by\n        gcongr _ + (a * b) • ?_; exact hfg.smul_add_smul_le_smul_add_smul hx hy\n    _ = (a * (a + b)) • (f x • g x) + (b * (a + b)) • (f y • g y) := by\n        simp only [mul_add, add_smul, smul_add, mul_comm _ a]; abel\n    _ = _ := by simp_rw [hab, mul_one]\n  simp only [mul_add, add_smul, smul_add]\n  rw [← smul_smul_smul_comm a, ← smul_smul_smul_comm b, ← smul_smul_smul_comm a b,\n    ← smul_smul_smul_comm b b, smul_eq_mul, smul_eq_mul, smul_eq_mul, smul_eq_mul, mul_comm b,\n    add_comm _ ((b * b) • f y • g y), add_add_add_comm, add_comm ((a * b) • f y • g x)]\n\n"}
{"name":"ConcaveOn.smul'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹⁰ : LinearOrderedCommRing 𝕜\ninst✝⁹ : LinearOrderedCommRing E\ninst✝⁸ : LinearOrderedAddCommGroup F\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : Module E F\ninst✝⁴ : IsScalarTower 𝕜 E F\ninst✝³ : SMulCommClass 𝕜 E F\ninst✝² : OrderedSMul 𝕜 F\ninst✝¹ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\ninst✝ : OrderedSMul 𝕜 E\nhf : ConcaveOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConcaveOn.smul' [OrderedSMul 𝕜 E] (hf : ConcaveOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f • g) := by\n  refine ⟨hf.1, fun x hx y hy a b ha hb hab ↦ ?_⟩\n  dsimp\n  refine (smul_le_smul (hf.2 hx hy ha hb hab) (hg.2 hx hy ha hb hab)\n    (add_nonneg (smul_nonneg ha <| hf₀ hx) <| smul_nonneg hb <| hf₀ hy)\n    (hg₀ <| hf.1 hx hy ha hb hab)).trans' ?_\n  calc a • f x • g x + b • f y • g y\n        = (a * (a + b)) • (f x • g x) + (b * (a + b)) • (f y • g y) := by simp_rw [hab, mul_one]\n    _ = (a * a) • (f x • g x) + (b * b) • (f y • g y) + (a * b) • (f x • g x + f y • g y) := by\n        simp only [mul_add, add_smul, smul_add, mul_comm _ a]; abel\n    _ ≤ (a * a) • (f x • g x) + (b * b) • (f y • g y) + (a * b) • (f x • g y + f y • g x) := by\n        gcongr _ + (a * b) • ?_; exact hfg.smul_add_smul_le_smul_add_smul hx hy\n    _ = _ := ?_\n  simp only [mul_add, add_smul, smul_add]\n  rw [← smul_smul_smul_comm a, ← smul_smul_smul_comm b, ← smul_smul_smul_comm a b,\n    ← smul_smul_smul_comm b b, smul_eq_mul, smul_eq_mul, smul_eq_mul, smul_eq_mul, mul_comm b a,\n    add_comm ((a * b) • f x • g y), add_comm ((a * b) • f x • g y), add_add_add_comm]\n\n"}
{"name":"ConvexOn.smul''","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹⁰ : LinearOrderedCommRing 𝕜\ninst✝⁹ : LinearOrderedCommRing E\ninst✝⁸ : LinearOrderedAddCommGroup F\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : Module E F\ninst✝⁴ : IsScalarTower 𝕜 E F\ninst✝³ : SMulCommClass 𝕜 E F\ninst✝² : OrderedSMul 𝕜 F\ninst✝¹ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\ninst✝ : OrderedSMul 𝕜 E\nhf : ConvexOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConvexOn.smul'' [OrderedSMul 𝕜 E] (hf : ConvexOn 𝕜 s f) (hg : ConvexOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0) (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f • g) := by\n  rw [← neg_smul_neg]\n  exact hf.neg.smul' hg.neg (fun x hx ↦ neg_nonneg.2 <| hf₀ hx) (fun x hx ↦ neg_nonneg.2 <| hg₀ hx)\n    hfg.neg\n\n"}
{"name":"ConcaveOn.smul''","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : LinearOrderedCommRing 𝕜\ninst✝⁸ : LinearOrderedCommRing E\ninst✝⁷ : LinearOrderedAddCommGroup F\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : Module E F\ninst✝³ : IsScalarTower 𝕜 E F\ninst✝² : SMulCommClass 𝕜 E F\ninst✝¹ : OrderedSMul 𝕜 F\ninst✝ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\nhf : ConcaveOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConcaveOn.smul'' (hf : ConcaveOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g) (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0)\n    (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : MonovaryOn f g s) : ConvexOn 𝕜 s (f • g) := by\n  rw [← neg_smul_neg]\n  exact hf.neg.smul' hg.neg (fun x hx ↦ neg_nonneg.2 <| hf₀ hx) (fun x hx ↦ neg_nonneg.2 <| hg₀ hx)\n    hfg.neg\n\n"}
{"name":"ConvexOn.smul_concaveOn","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : LinearOrderedCommRing 𝕜\ninst✝⁸ : LinearOrderedCommRing E\ninst✝⁷ : LinearOrderedAddCommGroup F\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : Module E F\ninst✝³ : IsScalarTower 𝕜 E F\ninst✝² : SMulCommClass 𝕜 E F\ninst✝¹ : OrderedSMul 𝕜 F\ninst✝ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\nhf : ConvexOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConvexOn.smul_concaveOn (hf : ConvexOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f • g) := by\n  rw [← neg_convexOn_iff, ← smul_neg]\n  exact hf.smul' hg.neg hf₀ (fun x hx ↦ neg_nonneg.2 <| hg₀ hx) hfg.neg_right\n\n"}
{"name":"ConcaveOn.smul_convexOn","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹⁰ : LinearOrderedCommRing 𝕜\ninst✝⁹ : LinearOrderedCommRing E\ninst✝⁸ : LinearOrderedAddCommGroup F\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : Module E F\ninst✝⁴ : IsScalarTower 𝕜 E F\ninst✝³ : SMulCommClass 𝕜 E F\ninst✝² : OrderedSMul 𝕜 F\ninst✝¹ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\ninst✝ : OrderedSMul 𝕜 E\nhf : ConcaveOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConcaveOn.smul_convexOn [OrderedSMul 𝕜 E] (hf : ConcaveOn 𝕜 s f) (hg : ConvexOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : MonovaryOn f g s) :\n    ConvexOn 𝕜 s (f • g) := by\n  rw [← neg_concaveOn_iff, ← smul_neg]\n  exact hf.smul' hg.neg hf₀ (fun x hx ↦ neg_nonneg.2 <| hg₀ hx) hfg.neg_right\n\n"}
{"name":"ConvexOn.smul_concaveOn'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹⁰ : LinearOrderedCommRing 𝕜\ninst✝⁹ : LinearOrderedCommRing E\ninst✝⁸ : LinearOrderedAddCommGroup F\ninst✝⁷ : Module 𝕜 E\ninst✝⁶ : Module 𝕜 F\ninst✝⁵ : Module E F\ninst✝⁴ : IsScalarTower 𝕜 E F\ninst✝³ : SMulCommClass 𝕜 E F\ninst✝² : OrderedSMul 𝕜 F\ninst✝¹ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\ninst✝ : OrderedSMul 𝕜 E\nhf : ConvexOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConvexOn.smul_concaveOn' [OrderedSMul 𝕜 E] (hf : ConvexOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0) (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : MonovaryOn f g s) :\n    ConvexOn 𝕜 s (f • g) := by\n  rw [← neg_concaveOn_iff, ← smul_neg]\n  exact hf.smul'' hg.neg hf₀ (fun x hx ↦ neg_nonpos.2 <| hg₀ hx) hfg.neg_right\n\n"}
{"name":"ConcaveOn.smul_convexOn'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁹ : LinearOrderedCommRing 𝕜\ninst✝⁸ : LinearOrderedCommRing E\ninst✝⁷ : LinearOrderedAddCommGroup F\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : Module 𝕜 F\ninst✝⁴ : Module E F\ninst✝³ : IsScalarTower 𝕜 E F\ninst✝² : SMulCommClass 𝕜 E F\ninst✝¹ : OrderedSMul 𝕜 F\ninst✝ : OrderedSMul E F\ns : Set 𝕜\nf : 𝕜 → E\ng : 𝕜 → F\nhf : ConcaveOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConcaveOn.smul_convexOn' (hf : ConcaveOn 𝕜 s f) (hg : ConvexOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0) (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f • g) := by\n  rw [← neg_convexOn_iff, ← smul_neg]\n  exact hf.smul'' hg.neg hf₀ (fun x hx ↦ neg_nonpos.2 <| hg₀ hx) hfg.neg_right\n\n"}
{"name":"ConvexOn.mul","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConvexOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConvexOn.mul (hf : ConvexOn 𝕜 s f) (hg : ConvexOn 𝕜 s g) (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x)\n    (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : MonovaryOn f g s) :\n    ConvexOn 𝕜 s (f * g) := hf.smul' hg hf₀ hg₀ hfg\n\n"}
{"name":"ConcaveOn.mul","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConcaveOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConcaveOn.mul (hf : ConcaveOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f * g) := hf.smul' hg hf₀ hg₀ hfg\n\n"}
{"name":"ConvexOn.mul'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConvexOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConvexOn.mul' (hf : ConvexOn 𝕜 s f) (hg : ConvexOn 𝕜 s g) (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0)\n    (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f * g) := hf.smul'' hg hf₀ hg₀ hfg\n\n"}
{"name":"ConcaveOn.mul'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConcaveOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConcaveOn.mul' (hf : ConcaveOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g) (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0)\n    (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : MonovaryOn f g s) :\n    ConvexOn 𝕜 s (f * g) := hf.smul'' hg hf₀ hg₀ hfg\n\n"}
{"name":"ConvexOn.mul_concaveOn","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConvexOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConvexOn.mul_concaveOn (hf : ConvexOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f * g) := hf.smul_concaveOn hg hf₀ hg₀ hfg\n\n"}
{"name":"ConcaveOn.mul_convexOn","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConcaveOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (g x) 0\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConcaveOn.mul_convexOn (hf : ConcaveOn 𝕜 s f) (hg : ConvexOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) (hg₀ : ∀ ⦃x⦄, x ∈ s → g x ≤ 0) (hfg : MonovaryOn f g s) :\n    ConvexOn 𝕜 s (f * g) := hf.smul_convexOn hg hf₀ hg₀ hfg\n\n"}
{"name":"ConvexOn.mul_concaveOn'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConvexOn 𝕜 s f\nhg : ConcaveOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : MonovaryOn f g s\n⊢ ConvexOn 𝕜 s (HMul.hMul f g)","decl":"lemma ConvexOn.mul_concaveOn' (hf : ConvexOn 𝕜 s f) (hg : ConcaveOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0) (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : MonovaryOn f g s) :\n    ConvexOn 𝕜 s (f * g) := hf.smul_concaveOn' hg hf₀ hg₀ hfg\n\n"}
{"name":"ConcaveOn.mul_convexOn'","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf g : 𝕜 → E\nhf : ConcaveOn 𝕜 s f\nhg : ConvexOn 𝕜 s g\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le (f x) 0\nhg₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (g x)\nhfg : AntivaryOn f g s\n⊢ ConcaveOn 𝕜 s (HSMul.hSMul f g)","decl":"lemma ConcaveOn.mul_convexOn' (hf : ConcaveOn 𝕜 s f) (hg : ConvexOn 𝕜 s g)\n    (hf₀ : ∀ ⦃x⦄, x ∈ s → f x ≤ 0) (hg₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ g x) (hfg : AntivaryOn f g s) :\n    ConcaveOn 𝕜 s (f • g) := hf.smul_convexOn' hg hf₀ hg₀ hfg\n\n"}
{"name":"ConvexOn.pow","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁵ : LinearOrderedCommRing 𝕜\ninst✝⁴ : LinearOrderedCommRing E\ninst✝³ : Module 𝕜 E\ns : Set 𝕜\ninst✝² : OrderedSMul 𝕜 E\ninst✝¹ : IsScalarTower 𝕜 E E\ninst✝ : SMulCommClass 𝕜 E E\nf : 𝕜 → E\nhf : ConvexOn 𝕜 s f\nhf₀ : ∀ ⦃x : 𝕜⦄, Membership.mem s x → LE.le 0 (f x)\nn : Nat\n⊢ ConvexOn 𝕜 s (HPow.hPow f n)","decl":"lemma ConvexOn.pow (hf : ConvexOn 𝕜 s f) (hf₀ : ∀ ⦃x⦄, x ∈ s → 0 ≤ f x) :\n    ∀ n, ConvexOn 𝕜 s (f ^ n)\n  | 0 => by simpa using convexOn_const 1 hf.1\n  | n + 1 => by\n    rw [pow_succ']\n    exact hf.mul (hf.pow hf₀ _) hf₀ (fun x hx ↦ pow_nonneg (hf₀ hx) _) <|\n      (monovaryOn_self f s).pow_right₀ hf₀ n\n\n"}
{"name":"convexOn_pow","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedCommRing 𝕜\nn : Nat\n⊢ ConvexOn 𝕜 (Set.Ici 0) fun x => HPow.hPow x n","decl":"/-- `x^n`, `n : ℕ` is convex on `[0, +∞)` for all `n`. -/\nlemma convexOn_pow : ∀ n, ConvexOn 𝕜 (Ici 0) fun x : 𝕜 ↦ x ^ n :=\n  (convexOn_id <| convex_Ici _).pow fun _ ↦ id\n\n"}
{"name":"Even.convexOn_pow","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedCommRing 𝕜\nn : Nat\nhn : Even n\n⊢ ConvexOn 𝕜 Set.univ fun x => HPow.hPow x n","decl":"/-- `x^n`, `n : ℕ` is convex on the whole real line whenever `n` is even. -/\nprotected lemma Even.convexOn_pow {n : ℕ} (hn : Even n) : ConvexOn 𝕜 univ fun x : 𝕜 ↦ x ^ n := by\n  obtain ⟨n, rfl⟩ := hn\n  simp_rw [← two_mul, pow_mul]\n  refine ConvexOn.pow ⟨convex_univ, fun x _ y _ a b ha hb hab ↦ sub_nonneg.1 ?_⟩\n    (fun _ _ ↦ by positivity) _\n  calc\n    (0 : 𝕜) ≤ (a * b) * (x - y) ^ 2 := by positivity\n    _ = _ := by obtain rfl := eq_sub_of_add_eq hab; simp only [smul_eq_mul]; ring\n\n"}
{"name":"convexOn_zpow","module":"Mathlib.Analysis.Convex.Mul","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nn : Int\n⊢ ConvexOn 𝕜 (Set.Ioi 0) fun x => HPow.hPow x n","decl":"open Int in\n/-- `x^m`, `m : ℤ` is convex on `(0, +∞)` for all `m`. -/\nlemma convexOn_zpow : ∀ n : ℤ, ConvexOn 𝕜 (Ioi 0) fun x : 𝕜 ↦ x ^ n\n  | (n : ℕ) => by\n    simp_rw [zpow_natCast]\n    exact (convexOn_pow n).subset Ioi_subset_Ici_self (convex_Ioi _)\n  | -[n+1] => by\n    simp_rw [zpow_negSucc, ← inv_pow]\n    refine (convexOn_iff_forall_pos.2 ⟨convex_Ioi _, ?_⟩).pow (fun x (hx : 0 < x) ↦ by positivity) _\n    rintro x (hx : 0 < x) y (hy : 0 < y) a b ha hb hab\n    field_simp\n    rw [div_le_div_iff₀, ← sub_nonneg]\n    · calc\n        0 ≤ a * b * (x - y) ^ 2 := by positivity\n        _ = _ := by obtain rfl := eq_sub_of_add_eq hab; ring\n    all_goals positivity\n\n"}
