{"name":"Polynomial.hasStrictDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\np : Polynomial 𝕜\nx : 𝕜\n⊢ HasStrictDerivAt (fun x => Polynomial.eval x p) (Polynomial.eval x (Polynomial.derivative p)) x","decl":"/-- The derivative (in the analysis sense) of a polynomial `p` is given by `p.derivative`. -/\nprotected theorem hasStrictDerivAt (x : 𝕜) :\n    HasStrictDerivAt (fun x => p.eval x) (p.derivative.eval x) x := by\n  induction p using Polynomial.induction_on' with\n  | h_add p q hp hq => simpa using hp.add hq\n  | h_monomial n a => simpa [mul_assoc] using (hasStrictDerivAt_pow n x).const_mul a\n\n"}
{"name":"Polynomial.hasStrictDerivAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nx : 𝕜\n⊢ HasStrictDerivAt (fun x => (Polynomial.aeval x) q) ((Polynomial.aeval x) (Polynomial.derivative q)) x","decl":"protected theorem hasStrictDerivAt_aeval (x : 𝕜) :\n    HasStrictDerivAt (fun x => aeval x q) (aeval x (derivative q)) x := by\n  simpa only [aeval_def, eval₂_eq_eval_map, derivative_map] using\n    (q.map (algebraMap R 𝕜)).hasStrictDerivAt x\n\n"}
{"name":"Polynomial.hasDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\np : Polynomial 𝕜\nx : 𝕜\n⊢ HasDerivAt (fun x => Polynomial.eval x p) (Polynomial.eval x (Polynomial.derivative p)) x","decl":"/-- The derivative (in the analysis sense) of a polynomial `p` is given by `p.derivative`. -/\nprotected theorem hasDerivAt (x : 𝕜) : HasDerivAt (fun x => p.eval x) (p.derivative.eval x) x :=\n  (p.hasStrictDerivAt x).hasDerivAt\n\n"}
{"name":"Polynomial.hasDerivAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nx : 𝕜\n⊢ HasDerivAt (fun x => (Polynomial.aeval x) q) ((Polynomial.aeval x) (Polynomial.derivative q)) x","decl":"protected theorem hasDerivAt_aeval (x : 𝕜) :\n    HasDerivAt (fun x => aeval x q) (aeval x (derivative q)) x :=\n  (q.hasStrictDerivAt_aeval x).hasDerivAt\n\n"}
{"name":"Polynomial.hasDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\np : Polynomial 𝕜\nx : 𝕜\ns : Set 𝕜\n⊢ HasDerivWithinAt (fun x => Polynomial.eval x p) (Polynomial.eval x (Polynomial.derivative p)) s x","decl":"protected theorem hasDerivWithinAt (x : 𝕜) (s : Set 𝕜) :\n    HasDerivWithinAt (fun x => p.eval x) (p.derivative.eval x) s x :=\n  (p.hasDerivAt x).hasDerivWithinAt\n\n"}
{"name":"Polynomial.hasDerivWithinAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nx : 𝕜\ns : Set 𝕜\n⊢ HasDerivWithinAt (fun x => (Polynomial.aeval x) q) ((Polynomial.aeval x) (Polynomial.derivative q)) s x","decl":"protected theorem hasDerivWithinAt_aeval (x : 𝕜) (s : Set 𝕜) :\n    HasDerivWithinAt (fun x => aeval x q) (aeval x (derivative q)) s x :=\n  (q.hasDerivAt_aeval x).hasDerivWithinAt\n\n"}
{"name":"Polynomial.differentiableAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\np : Polynomial 𝕜\n⊢ DifferentiableAt 𝕜 (fun x => Polynomial.eval x p) x","decl":"protected theorem differentiableAt : DifferentiableAt 𝕜 (fun x => p.eval x) x :=\n  (p.hasDerivAt x).differentiableAt\n\n"}
{"name":"Polynomial.differentiableAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\n⊢ DifferentiableAt 𝕜 (fun x => (Polynomial.aeval x) q) x","decl":"protected theorem differentiableAt_aeval : DifferentiableAt 𝕜 (fun x => aeval x q) x :=\n  (q.hasDerivAt_aeval x).differentiableAt\n\n"}
{"name":"Polynomial.differentiableWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\np : Polynomial 𝕜\n⊢ DifferentiableWithinAt 𝕜 (fun x => Polynomial.eval x p) s x","decl":"protected theorem differentiableWithinAt : DifferentiableWithinAt 𝕜 (fun x => p.eval x) s x :=\n  p.differentiableAt.differentiableWithinAt\n\n"}
{"name":"Polynomial.differentiableWithinAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\n⊢ DifferentiableWithinAt 𝕜 (fun x => (Polynomial.aeval x) q) s x","decl":"protected theorem differentiableWithinAt_aeval :\n    DifferentiableWithinAt 𝕜 (fun x => aeval x q) s x :=\n  q.differentiableAt_aeval.differentiableWithinAt\n\n"}
{"name":"Polynomial.differentiable","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\np : Polynomial 𝕜\n⊢ Differentiable 𝕜 fun x => Polynomial.eval x p","decl":"protected theorem differentiable : Differentiable 𝕜 fun x => p.eval x := fun _ => p.differentiableAt\n\n"}
{"name":"Polynomial.differentiable_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\n⊢ Differentiable 𝕜 fun x => (Polynomial.aeval x) q","decl":"protected theorem differentiable_aeval : Differentiable 𝕜 fun x : 𝕜 => aeval x q := fun _ =>\n  q.differentiableAt_aeval\n\n"}
{"name":"Polynomial.differentiableOn","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\ns : Set 𝕜\np : Polynomial 𝕜\n⊢ DifferentiableOn 𝕜 (fun x => Polynomial.eval x p) s","decl":"protected theorem differentiableOn : DifferentiableOn 𝕜 (fun x => p.eval x) s :=\n  p.differentiable.differentiableOn\n\n"}
{"name":"Polynomial.differentiableOn_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\ns : Set 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\n⊢ DifferentiableOn 𝕜 (fun x => (Polynomial.aeval x) q) s","decl":"protected theorem differentiableOn_aeval : DifferentiableOn 𝕜 (fun x => aeval x q) s :=\n  q.differentiable_aeval.differentiableOn\n\n"}
{"name":"Polynomial.deriv","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\np : Polynomial 𝕜\n⊢ Eq (deriv (fun x => Polynomial.eval x p) x) (Polynomial.eval x (Polynomial.derivative p))","decl":"@[simp]\nprotected theorem deriv : deriv (fun x => p.eval x) x = p.derivative.eval x :=\n  (p.hasDerivAt x).deriv\n\n"}
{"name":"Polynomial.deriv_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\n⊢ Eq (deriv (fun x => (Polynomial.aeval x) q) x) ((Polynomial.aeval x) (Polynomial.derivative q))","decl":"@[simp]\nprotected theorem deriv_aeval : deriv (fun x => aeval x q) x = aeval x (derivative q) :=\n  (q.hasDerivAt_aeval x).deriv\n\n"}
{"name":"Polynomial.derivWithin","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\np : Polynomial 𝕜\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (derivWithin (fun x => Polynomial.eval x p) s x) (Polynomial.eval x (Polynomial.derivative p))","decl":"protected theorem derivWithin (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    derivWithin (fun x => p.eval x) s x = p.derivative.eval x := by\n  rw [DifferentiableAt.derivWithin p.differentiableAt hxs]\n  exact p.deriv\n\n"}
{"name":"Polynomial.derivWithin_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (derivWithin (fun x => (Polynomial.aeval x) q) s x) ((Polynomial.aeval x) (Polynomial.derivative q))","decl":"protected theorem derivWithin_aeval (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    derivWithin (fun x => aeval x q) s x = aeval x (derivative q) := by\n  simpa only [aeval_def, eval₂_eq_eval_map, derivative_map] using\n    (q.map (algebraMap R 𝕜)).derivWithin hxs\n\n"}
{"name":"Polynomial.hasFDerivAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\np : Polynomial 𝕜\nx : 𝕜\n⊢ HasFDerivAt (fun x => Polynomial.eval x p) (ContinuousLinearMap.smulRight 1 (Polynomial.eval x (Polynomial.derivative p))) x","decl":"protected theorem hasFDerivAt (x : 𝕜) :\n    HasFDerivAt (fun x => p.eval x) (smulRight (1 : 𝕜 →L[𝕜] 𝕜) (p.derivative.eval x)) x :=\n  p.hasDerivAt x\n\n"}
{"name":"Polynomial.hasFDerivAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nx : 𝕜\n⊢ HasFDerivAt (fun x => (Polynomial.aeval x) q) (ContinuousLinearMap.smulRight 1 ((Polynomial.aeval x) (Polynomial.derivative q))) x","decl":"protected theorem hasFDerivAt_aeval (x : 𝕜) :\n    HasFDerivAt (fun x => aeval x q) (smulRight (1 : 𝕜 →L[𝕜] 𝕜) (aeval x (derivative q))) x :=\n  q.hasDerivAt_aeval x\n\n"}
{"name":"Polynomial.hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\ns : Set 𝕜\np : Polynomial 𝕜\nx : 𝕜\n⊢ HasFDerivWithinAt (fun x => Polynomial.eval x p) (ContinuousLinearMap.smulRight 1 (Polynomial.eval x (Polynomial.derivative p))) s x","decl":"protected theorem hasFDerivWithinAt (x : 𝕜) :\n    HasFDerivWithinAt (fun x => p.eval x) (smulRight (1 : 𝕜 →L[𝕜] 𝕜) (p.derivative.eval x)) s x :=\n  (p.hasFDerivAt x).hasFDerivWithinAt\n\n"}
{"name":"Polynomial.hasFDerivWithinAt_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\ns : Set 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nx : 𝕜\n⊢ HasFDerivWithinAt (fun x => (Polynomial.aeval x) q) (ContinuousLinearMap.smulRight 1 ((Polynomial.aeval x) (Polynomial.derivative q))) s x","decl":"protected theorem hasFDerivWithinAt_aeval (x : 𝕜) :\n    HasFDerivWithinAt (fun x => aeval x q) (smulRight (1 : 𝕜 →L[𝕜] 𝕜)\n      (aeval x (derivative q))) s x :=\n  (q.hasFDerivAt_aeval x).hasFDerivWithinAt\n\n"}
{"name":"Polynomial.fderiv","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\np : Polynomial 𝕜\n⊢ Eq (fderiv 𝕜 (fun x => Polynomial.eval x p) x) (ContinuousLinearMap.smulRight 1 (Polynomial.eval x (Polynomial.derivative p)))","decl":"@[simp]\nprotected theorem fderiv :\n    fderiv 𝕜 (fun x => p.eval x) x = smulRight (1 : 𝕜 →L[𝕜] 𝕜) (p.derivative.eval x) :=\n  (p.hasFDerivAt x).fderiv\n\n"}
{"name":"Polynomial.fderiv_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\n⊢ Eq (fderiv 𝕜 (fun x => (Polynomial.aeval x) q) x) (ContinuousLinearMap.smulRight 1 ((Polynomial.aeval x) (Polynomial.derivative q)))","decl":"@[simp]\nprotected theorem fderiv_aeval :\n    fderiv 𝕜 (fun x => aeval x q) x = smulRight (1 : 𝕜 →L[𝕜] 𝕜) (aeval x (derivative q)) :=\n  (q.hasFDerivAt_aeval x).fderiv\n\n"}
{"name":"Polynomial.fderivWithin","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝ : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\np : Polynomial 𝕜\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (fun x => Polynomial.eval x p) s x) (ContinuousLinearMap.smulRight 1 (Polynomial.eval x (Polynomial.derivative p)))","decl":"protected theorem fderivWithin (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (fun x => p.eval x) s x = smulRight (1 : 𝕜 →L[𝕜] 𝕜) (p.derivative.eval x) :=\n  (p.hasFDerivWithinAt x).fderivWithin hxs\n\n"}
{"name":"Polynomial.fderivWithin_aeval","module":"Mathlib.Analysis.Calculus.Deriv.Polynomial","initialProofState":"𝕜 : Type u\ninst✝² : NontriviallyNormedField 𝕜\nx : 𝕜\ns : Set 𝕜\nR : Type u_1\ninst✝¹ : CommSemiring R\ninst✝ : Algebra R 𝕜\nq : Polynomial R\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (fun x => (Polynomial.aeval x) q) s x) (ContinuousLinearMap.smulRight 1 ((Polynomial.aeval x) (Polynomial.derivative q)))","decl":"protected theorem fderivWithin_aeval (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (fun x => aeval x q) s x = smulRight (1 : 𝕜 →L[𝕜] 𝕜) (aeval x (derivative q)) :=\n  (q.hasFDerivWithinAt_aeval x).fderivWithin hxs\n\n"}
