{"name":"Complex.subfield_eq_of_closed","module":"Mathlib.Topology.Instances.Complex","initialProofState":"K : Subfield Complex\nhc : IsClosed ↑K\n⊢ Or (Eq K Complex.ofRealHom.fieldRange) (Eq K Top.top)","decl":"/-- The only closed subfields of `ℂ` are `ℝ` and `ℂ`. -/\ntheorem Complex.subfield_eq_of_closed {K : Subfield ℂ} (hc : IsClosed (K : Set ℂ)) :\n    K = ofRealHom.fieldRange ∨ K = ⊤ := by\n  suffices range (ofReal : ℝ → ℂ) ⊆ K by\n    rw [range_subset_iff, ← coe_algebraMap] at this\n    have :=\n      (Subalgebra.isSimpleOrder_of_finrank finrank_real_complex).eq_bot_or_eq_top\n        (Subfield.toIntermediateField K this).toSubalgebra\n    simp_rw [← SetLike.coe_set_eq, IntermediateField.coe_toSubalgebra] at this ⊢\n    exact this\n  suffices range (ofReal : ℝ → ℂ) ⊆ closure (Set.range ((ofReal : ℝ → ℂ) ∘ ((↑) : ℚ → ℝ))) by\n    refine subset_trans this ?_\n    rw [← IsClosed.closure_eq hc]\n    apply closure_mono\n    rintro _ ⟨_, rfl⟩\n    simp only [Function.comp_apply, ofReal_ratCast, SetLike.mem_coe, SubfieldClass.ratCast_mem]\n  nth_rw 1 [range_comp]\n  refine subset_trans ?_ (image_closure_subset_closure_image continuous_ofReal)\n  rw [DenseRange.closure_range Rat.isDenseEmbedding_coe_real.dense]\n  simp only [image_univ]\n  rfl\n\n"}
{"name":"Complex.uniformContinuous_ringHom_eq_id_or_conj","module":"Mathlib.Topology.Instances.Complex","initialProofState":"K : Subfield Complex\nψ : RingHom (Subtype fun x => Membership.mem K x) Complex\nhc : UniformContinuous ⇑ψ\n⊢ Or (Eq (↑↑ψ).toFun ⇑K.subtype) (Eq (↑↑ψ).toFun (Function.comp ⇑(starRingEnd Complex) ⇑K.subtype))","decl":"/-- Let `K` a subfield of `ℂ` and let `ψ : K →+* ℂ` a ring homomorphism. Assume that `ψ` is uniform\ncontinuous, then `ψ` is either the inclusion map or the composition of the inclusion map with the\ncomplex conjugation. -/\ntheorem Complex.uniformContinuous_ringHom_eq_id_or_conj (K : Subfield ℂ) {ψ : K →+* ℂ}\n    (hc : UniformContinuous ψ) : ψ.toFun = K.subtype ∨ ψ.toFun = conj ∘ K.subtype := by\n  letI : TopologicalDivisionRing ℂ := TopologicalDivisionRing.mk\n  letI : TopologicalRing K.topologicalClosure :=\n    Subring.instTopologicalRing K.topologicalClosure.toSubring\n  set ι : K → K.topologicalClosure := ⇑(Subfield.inclusion K.le_topologicalClosure)\n  have ui : IsUniformInducing ι :=\n    ⟨by\n      rw [uniformity_subtype, uniformity_subtype, Filter.comap_comap]\n      congr ⟩\n  let di := ui.isDenseInducing (?_ : DenseRange ι)\n  · -- extψ : closure(K) →+* ℂ is the extension of ψ : K →+* ℂ\n    let extψ := IsDenseInducing.extendRingHom ui di.dense hc\n    haveI hψ := (uniformContinuous_uniformly_extend ui di.dense hc).continuous\n    cases' Complex.subfield_eq_of_closed (Subfield.isClosed_topologicalClosure K) with h h\n    · left\n      let j := RingEquiv.subfieldCongr h\n      -- ψ₁ is the continuous ring hom `ℝ →+* ℂ` constructed from `j : closure (K) ≃+* ℝ`\n      -- and `extψ : closure (K) →+* ℂ`\n      let ψ₁ := RingHom.comp extψ (RingHom.comp j.symm.toRingHom ofRealHom.rangeRestrict)\n      -- Porting note: was `by continuity!` and was used inline\n      have hψ₁ : Continuous ψ₁ := by\n        simpa only [RingHom.coe_comp] using hψ.comp ((continuous_algebraMap ℝ ℂ).subtype_mk _)\n      ext1 x\n      rsuffices ⟨r, hr⟩ : ∃ r : ℝ, ofRealHom.rangeRestrict r = j (ι x)\n      · have :=\n          RingHom.congr_fun (ringHom_eq_ofReal_of_continuous hψ₁) r\n        -- This used to be `rw`, but we need `erw` after https://github.com/leanprover/lean4/pull/2644\n        erw [RingHom.comp_apply, RingHom.comp_apply, hr, RingEquiv.toRingHom_eq_coe] at this\n        convert this using 1\n        · exact (IsDenseInducing.extend_eq di hc.continuous _).symm\n        · rw [← ofRealHom.coe_rangeRestrict, hr]\n          rfl\n      obtain ⟨r, hr⟩ := SetLike.coe_mem (j (ι x))\n      exact ⟨r, Subtype.ext hr⟩\n    · -- ψ₁ is the continuous ring hom `ℂ →+* ℂ` constructed from `closure (K) ≃+* ℂ`\n      -- and `extψ : closure (K) →+* ℂ`\n      let ψ₁ :=\n        RingHom.comp extψ\n          (RingHom.comp (RingEquiv.subfieldCongr h).symm.toRingHom\n            (@Subfield.topEquiv ℂ _).symm.toRingHom)\n      -- Porting note: was `by continuity!` and was used inline\n      have hψ₁ : Continuous ψ₁ := by\n        simpa only [RingHom.coe_comp] using hψ.comp (continuous_id.subtype_mk _)\n      cases' ringHom_eq_id_or_conj_of_continuous hψ₁ with h h\n      · left\n        ext1 z\n        convert RingHom.congr_fun h z using 1\n        exact (IsDenseInducing.extend_eq di hc.continuous z).symm\n      · right\n        ext1 z\n        convert RingHom.congr_fun h z using 1\n        exact (IsDenseInducing.extend_eq di hc.continuous z).symm\n  · let j : { x // x ∈ closure (id '' { x | (K : Set ℂ) x }) } → (K.topologicalClosure : Set ℂ) :=\n      fun x =>\n      ⟨x, by\n        convert x.prop\n        simp only [id, Set.image_id']\n        rfl ⟩\n    convert DenseRange.comp (Function.Surjective.denseRange _)\n      (IsDenseEmbedding.id.subtype (K : Set ℂ)).dense (by continuity : Continuous j)\n    rintro ⟨y, hy⟩\n    use\n      ⟨y, by\n        convert hy\n        simp only [id, Set.image_id']\n        rfl ⟩\n\n"}
