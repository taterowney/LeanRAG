{"name":"translate_apply","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\na : G\nf : G → α\nx : G\n⊢ Eq (translate a f x) (f (HSub.hSub x a))","decl":"@[simp] lemma translate_apply (a : G) (f : G → α) (x : G) : τ a f x = f (x - a) := rfl\n"}
{"name":"translate_zero","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\nf : G → α\n⊢ Eq (translate 0 f) f","decl":"@[simp] lemma translate_zero (f : G → α) : τ 0 f = f := by ext; simp\n\n"}
{"name":"translate_translate","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\na b : G\nf : G → α\n⊢ Eq (translate a (translate b f)) (translate (HAdd.hAdd a b) f)","decl":"lemma translate_translate (a b : G) (f : G → α) : τ a (τ b f) = τ (a + b) f := by\n  ext; simp [sub_sub]\n\n"}
{"name":"translate_add","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\na b : G\nf : G → α\n⊢ Eq (translate (HAdd.hAdd a b) f) (translate a (translate b f))","decl":"lemma translate_add (a b : G) (f : G → α) : τ (a + b) f = τ a (τ b f) := by ext; simp [sub_sub]\n\n"}
{"name":"translate_add'","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\na b : G\nf : G → α\n⊢ Eq (translate (HAdd.hAdd a b) f) (translate b (translate a f))","decl":"/-- See `translate_add`-/\nlemma translate_add' (a b : G) (f : G → α) : τ (a + b) f = τ b (τ a f) := by\n  rw [add_comm, translate_add]\n\n"}
{"name":"translate_comm","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\na b : G\nf : G → α\n⊢ Eq (translate a (translate b f)) (translate b (translate a f))","decl":"lemma translate_comm (a b : G) (f : G → α) : τ a (τ b f) = τ b (τ a f) := by\n  rw [← translate_add, translate_add']\n\n-- We make `simp` push the `τ` outside\n"}
{"name":"comp_translate","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nβ : Type u_3\nG : Type u_5\ninst✝ : AddCommGroup G\na : G\nf : G → α\ng : α → β\n⊢ Eq (Function.comp g (translate a f)) (translate a (Function.comp g f))","decl":"@[simp] lemma comp_translate (a : G) (f : G → α) (g : α → β) : g ∘ τ a f = τ a (g ∘ f) := rfl\n\n"}
{"name":"translate_eq_domAddActMk_vadd","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝ : AddCommGroup G\na : G\nf : G → α\n⊢ Eq (translate a f) (HVAdd.hVAdd (DomAddAct.mk (Neg.neg a)) f)","decl":"lemma translate_eq_domAddActMk_vadd (a : G) (f : G → α) : τ a f = DomAddAct.mk (-a) +ᵥ f := by\n  ext; simp [DomAddAct.vadd_apply, sub_eq_neg_add]\n\n"}
{"name":"translate_smul_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\nH : Type u_6\ninst✝¹ : AddCommGroup G\ninst✝ : SMul H α\na : G\nf : G → α\nc : H\n⊢ Eq (translate a (HSMul.hSMul c f)) (HSMul.hSMul c (translate a f))","decl":"@[simp]\nlemma translate_smul_right [SMul H α] (a : G) (f : G → α) (c : H) : τ a (c • f) = c • τ a f := rfl\n\n"}
{"name":"translate_zero_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝¹ : AddCommGroup G\ninst✝ : Zero α\na : G\n⊢ Eq (translate a 0) 0","decl":"@[simp] lemma translate_zero_right [Zero α] (a : G) : τ a (0 : G → α) = 0 := rfl\n"}
{"name":"translate_add_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝¹ : AddCommGroup G\ninst✝ : Add α\na : G\nf g : G → α\n⊢ Eq (translate a (HAdd.hAdd f g)) (HAdd.hAdd (translate a f) (translate a g))","decl":"lemma translate_add_right [Add α] (a : G) (f g : G → α) : τ a (f + g) = τ a f + τ a g := rfl\n"}
{"name":"translate_sub_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝¹ : AddCommGroup G\ninst✝ : Sub α\na : G\nf g : G → α\n⊢ Eq (translate a (HSub.hSub f g)) (HSub.hSub (translate a f) (translate a g))","decl":"lemma translate_sub_right [Sub α] (a : G) (f g : G → α) : τ a (f - g) = τ a f - τ a g := rfl\n"}
{"name":"translate_neg_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"α : Type u_2\nG : Type u_5\ninst✝¹ : AddCommGroup G\ninst✝ : Neg α\na : G\nf : G → α\n⊢ Eq (translate a (Neg.neg f)) (Neg.neg (translate a f))","decl":"lemma translate_neg_right [Neg α] (a : G) (f : G → α) : τ a (-f) = -τ a f := rfl\n\n"}
{"name":"translate_sum_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"ι : Type u_1\nM : Type u_4\nG : Type u_5\ninst✝¹ : AddCommGroup G\ninst✝ : AddCommMonoid M\na : G\nf : ι → G → M\ns : Finset ι\n⊢ Eq (translate a (s.sum fun i => f i)) (s.sum fun i => translate a (f i))","decl":"lemma translate_sum_right (a : G) (f : ι → G → M) (s : Finset ι) :\n    τ a (∑ i ∈ s, f i) = ∑ i ∈ s, τ a (f i) := by ext; simp\n\n"}
{"name":"sum_translate","module":"Mathlib.Algebra.Group.Translate","initialProofState":"M : Type u_4\nG : Type u_5\ninst✝² : AddCommGroup G\ninst✝¹ : AddCommMonoid M\ninst✝ : Fintype G\na : G\nf : G → M\n⊢ Eq (Finset.univ.sum fun b => translate a f b) (Finset.univ.sum fun b => f b)","decl":"lemma sum_translate [Fintype G] (a : G) (f : G → M) : ∑ b, τ a f b = ∑ b, f b :=\n  Fintype.sum_equiv (Equiv.subRight _) _ _ fun _ ↦ rfl\n\n"}
{"name":"support_translate","module":"Mathlib.Algebra.Group.Translate","initialProofState":"G : Type u_5\nH : Type u_6\ninst✝¹ : AddCommGroup G\ninst✝ : AddCommGroup H\na : G\nf : G → H\n⊢ Eq (Function.support (translate a f)) (HVAdd.hVAdd a (Function.support f))","decl":"@[simp] lemma support_translate (a : G) (f : G → H) : support (τ a f) = a +ᵥ support f := by\n  ext; simp [mem_vadd_set_iff_neg_vadd_mem, sub_eq_neg_add]\n\n"}
{"name":"translate_prod_right","module":"Mathlib.Algebra.Group.Translate","initialProofState":"ι : Type u_1\nM : Type u_4\nG : Type u_5\ninst✝¹ : AddCommGroup G\ninst✝ : CommMonoid M\na : G\nf : ι → G → M\ns : Finset ι\n⊢ Eq (translate a (s.prod fun i => f i)) (s.prod fun i => translate a (f i))","decl":"lemma translate_prod_right (a : G) (f : ι → G → M) (s : Finset ι) :\n    τ a (∏ i ∈ s, f i) = ∏ i ∈ s, τ a (f i) := by ext; simp\n"}
