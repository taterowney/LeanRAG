{"name":"CSA.mk.inj","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\ntoAlgebraCat✝ : AlgebraCat K\nisCentral✝ : Algebra.IsCentral K ↑toAlgebraCat✝\nisSimple✝ : IsSimpleRing ↑toAlgebraCat✝\nfin_dim✝ : FiniteDimensional K ↑toAlgebraCat✝\ntoAlgebraCat : AlgebraCat K\nisCentral : Algebra.IsCentral K ↑toAlgebraCat\nisSimple : IsSimpleRing ↑toAlgebraCat\nfin_dim : FiniteDimensional K ↑toAlgebraCat\nx✝ : Eq (CSA.mk toAlgebraCat✝) (CSA.mk toAlgebraCat)\n⊢ Eq toAlgebraCat✝ toAlgebraCat","decl":"/-- `CSA` is the set of all finite dimensional central simple algebras over field `K`, for its\n  generalisation over a `CommRing` please find `IsAzumaya` in `Mathlib.Algebra.Azumaya.Defs`. -/\nstructure CSA (K : Type u) [Field K] extends AlgebraCat.{v} K where\n  /-- Any member of `CSA` is central. -/\n  [isCentral : Algebra.IsCentral K carrier]\n  /-- Any member of `CSA` is simple. -/\n  [isSimple : IsSimpleRing carrier]\n  /-- Any member of `CSA` is finite-dimensional. -/\n  [fin_dim : FiniteDimensional K carrier]\n\n"}
{"name":"CSA.fin_dim","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\nself : CSA K\n⊢ FiniteDimensional K ↑self.toAlgebraCat","decl":"/-- `CSA` is the set of all finite dimensional central simple algebras over field `K`, for its\n  generalisation over a `CommRing` please find `IsAzumaya` in `Mathlib.Algebra.Azumaya.Defs`. -/\nstructure CSA (K : Type u) [Field K] extends AlgebraCat.{v} K where\n  /-- Any member of `CSA` is central. -/\n  [isCentral : Algebra.IsCentral K carrier]\n  /-- Any member of `CSA` is simple. -/\n  [isSimple : IsSimpleRing carrier]\n  /-- Any member of `CSA` is finite-dimensional. -/\n  [fin_dim : FiniteDimensional K carrier]\n\n"}
{"name":"CSA.isCentral","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\nself : CSA K\n⊢ Algebra.IsCentral K ↑self.toAlgebraCat","decl":"/-- `CSA` is the set of all finite dimensional central simple algebras over field `K`, for its\n  generalisation over a `CommRing` please find `IsAzumaya` in `Mathlib.Algebra.Azumaya.Defs`. -/\nstructure CSA (K : Type u) [Field K] extends AlgebraCat.{v} K where\n  /-- Any member of `CSA` is central. -/\n  [isCentral : Algebra.IsCentral K carrier]\n  /-- Any member of `CSA` is simple. -/\n  [isSimple : IsSimpleRing carrier]\n  /-- Any member of `CSA` is finite-dimensional. -/\n  [fin_dim : FiniteDimensional K carrier]\n\n"}
{"name":"CSA.isSimple","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\nself : CSA K\n⊢ IsSimpleRing ↑self.toAlgebraCat","decl":"/-- `CSA` is the set of all finite dimensional central simple algebras over field `K`, for its\n  generalisation over a `CommRing` please find `IsAzumaya` in `Mathlib.Algebra.Azumaya.Defs`. -/\nstructure CSA (K : Type u) [Field K] extends AlgebraCat.{v} K where\n  /-- Any member of `CSA` is central. -/\n  [isCentral : Algebra.IsCentral K carrier]\n  /-- Any member of `CSA` is simple. -/\n  [isSimple : IsSimpleRing carrier]\n  /-- Any member of `CSA` is finite-dimensional. -/\n  [fin_dim : FiniteDimensional K carrier]\n\n"}
{"name":"CSA.mk.injEq","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\ntoAlgebraCat✝ : AlgebraCat K\nisCentral✝ : Algebra.IsCentral K ↑toAlgebraCat✝\nisSimple✝ : IsSimpleRing ↑toAlgebraCat✝\nfin_dim✝ : FiniteDimensional K ↑toAlgebraCat✝\ntoAlgebraCat : AlgebraCat K\nisCentral : Algebra.IsCentral K ↑toAlgebraCat\nisSimple : IsSimpleRing ↑toAlgebraCat\nfin_dim : FiniteDimensional K ↑toAlgebraCat\n⊢ Eq (Eq (CSA.mk toAlgebraCat✝) (CSA.mk toAlgebraCat)) (Eq toAlgebraCat✝ toAlgebraCat)","decl":"/-- `CSA` is the set of all finite dimensional central simple algebras over field `K`, for its\n  generalisation over a `CommRing` please find `IsAzumaya` in `Mathlib.Algebra.Azumaya.Defs`. -/\nstructure CSA (K : Type u) [Field K] extends AlgebraCat.{v} K where\n  /-- Any member of `CSA` is central. -/\n  [isCentral : Algebra.IsCentral K carrier]\n  /-- Any member of `CSA` is simple. -/\n  [isSimple : IsSimpleRing carrier]\n  /-- Any member of `CSA` is finite-dimensional. -/\n  [fin_dim : FiniteDimensional K carrier]\n\n"}
{"name":"CSA.mk.sizeOf_spec","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝¹ : Field K\ninst✝ : SizeOf K\ntoAlgebraCat : AlgebraCat K\nisCentral : Algebra.IsCentral K ↑toAlgebraCat\nisSimple : IsSimpleRing ↑toAlgebraCat\nfin_dim : FiniteDimensional K ↑toAlgebraCat\n⊢ Eq (SizeOf.sizeOf (CSA.mk toAlgebraCat)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toAlgebraCat)) (SizeOf.sizeOf isCentral)) (SizeOf.sizeOf isSimple)) (SizeOf.sizeOf fin_dim))","decl":"/-- `CSA` is the set of all finite dimensional central simple algebras over field `K`, for its\n  generalisation over a `CommRing` please find `IsAzumaya` in `Mathlib.Algebra.Azumaya.Defs`. -/\nstructure CSA (K : Type u) [Field K] extends AlgebraCat.{v} K where\n  /-- Any member of `CSA` is central. -/\n  [isCentral : Algebra.IsCentral K carrier]\n  /-- Any member of `CSA` is simple. -/\n  [isSimple : IsSimpleRing carrier]\n  /-- Any member of `CSA` is finite-dimensional. -/\n  [fin_dim : FiniteDimensional K carrier]\n\n"}
{"name":"IsBrauerEquivalent.refl","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\nA : CSA K\n⊢ IsBrauerEquivalent A A","decl":"@[refl]\nlemma refl (A : CSA K) : IsBrauerEquivalent A A :=\n    ⟨1, 1, one_ne_zero, one_ne_zero, ⟨AlgEquiv.refl⟩⟩\n\n"}
{"name":"IsBrauerEquivalent.symm","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\nA : CSA K\nB : CSA K\nh : IsBrauerEquivalent A B\n⊢ IsBrauerEquivalent B A","decl":"@[symm]\nlemma symm {A B : CSA K} (h : IsBrauerEquivalent A B) : IsBrauerEquivalent B A :=\n    let ⟨n, m, hn, hm, ⟨iso⟩⟩ := h\n    ⟨m, n, hm, hn, ⟨iso.symm⟩⟩\n\n"}
{"name":"IsBrauerEquivalent.trans","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\nA : CSA K\nB : CSA K\nC : CSA K\nhAB : IsBrauerEquivalent A B\nhBC : IsBrauerEquivalent B C\n⊢ IsBrauerEquivalent A C","decl":"open Matrix in\n@[trans]\nlemma trans {A B C : CSA K} (hAB : IsBrauerEquivalent A B) (hBC : IsBrauerEquivalent B C) :\n    IsBrauerEquivalent A C := by\n  obtain ⟨n, m, hn, hm, ⟨iso1⟩⟩ := hAB\n  obtain ⟨p, q, hp, hq, ⟨iso2⟩⟩ := hBC\n  exact ⟨p * n, m * q, by simp_all, by simp_all,\n    ⟨reindexAlgEquiv _ _ finProdFinEquiv |>.symm.trans <| compAlgEquiv _ _ _ _|>.symm.trans <|\n    iso1.mapMatrix (m := Fin p)|>.trans <| compAlgEquiv _ _ _ _|>.trans <|\n    reindexAlgEquiv K B (.prodComm (Fin p) (Fin m))|>.trans <| compAlgEquiv _ _ _ _|>.symm.trans <|\n    iso2.mapMatrix.trans <| compAlgEquiv _ _ _ _|>.trans <| reindexAlgEquiv _ _ finProdFinEquiv⟩⟩\n\n"}
{"name":"IsBrauerEquivalent.is_eqv","module":"Mathlib.Algebra.BrauerGroup.Defs","initialProofState":"K : Type u\ninst✝ : Field K\n⊢ Equivalence IsBrauerEquivalent","decl":"lemma is_eqv : Equivalence (IsBrauerEquivalent (K := K)) where\n  refl := refl\n  symm := symm\n  trans := trans\n\n"}
