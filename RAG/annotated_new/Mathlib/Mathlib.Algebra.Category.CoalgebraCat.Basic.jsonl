{"name":"CoalgebraCat.mk.inj","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\ntoModuleCat✝ : ModuleCat R\ninstCoalgebra✝ : Coalgebra R ↑toModuleCat✝\ntoModuleCat : ModuleCat R\ninstCoalgebra : Coalgebra R ↑toModuleCat\nx✝ : Eq { toModuleCat := toModuleCat✝, instCoalgebra := instCoalgebra✝ } { toModuleCat := toModuleCat, instCoalgebra := instCoalgebra }\n⊢ And (Eq toModuleCat✝ toModuleCat) (HEq instCoalgebra✝ instCoalgebra)","decl":"/-- The category of `R`-coalgebras. -/\nstructure CoalgebraCat extends ModuleCat.{v} R where\n  instCoalgebra : Coalgebra R carrier\n\n"}
{"name":"CoalgebraCat.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝¹ : CommRing R\ninst✝ : SizeOf R\ntoModuleCat : ModuleCat R\ninstCoalgebra : Coalgebra R ↑toModuleCat\n⊢ Eq (SizeOf.sizeOf { toModuleCat := toModuleCat, instCoalgebra := instCoalgebra }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toModuleCat)) (SizeOf.sizeOf instCoalgebra))","decl":"/-- The category of `R`-coalgebras. -/\nstructure CoalgebraCat extends ModuleCat.{v} R where\n  instCoalgebra : Coalgebra R carrier\n\n"}
{"name":"CoalgebraCat.mk.injEq","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\ntoModuleCat✝ : ModuleCat R\ninstCoalgebra✝ : Coalgebra R ↑toModuleCat✝\ntoModuleCat : ModuleCat R\ninstCoalgebra : Coalgebra R ↑toModuleCat\n⊢ Eq (Eq { toModuleCat := toModuleCat✝, instCoalgebra := instCoalgebra✝ } { toModuleCat := toModuleCat, instCoalgebra := instCoalgebra }) (And (Eq toModuleCat✝ toModuleCat) (HEq instCoalgebra✝ instCoalgebra))","decl":"/-- The category of `R`-coalgebras. -/\nstructure CoalgebraCat extends ModuleCat.{v} R where\n  instCoalgebra : Coalgebra R carrier\n\n"}
{"name":"CoalgebraCat.moduleCat_of_toModuleCat","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX : CoalgebraCat R\n⊢ Eq (ModuleCat.of R ↑X.toModuleCat) X.toModuleCat","decl":"@[simp] theorem moduleCat_of_toModuleCat (X : CoalgebraCat.{v} R) :\n    ModuleCat.of R X.toModuleCat = X.toModuleCat :=\n  rfl\n\n"}
{"name":"CoalgebraCat.of_isAddCommGroup","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq (CoalgebraCat.of R X).isAddCommGroup inst✝²","decl":"/-- The object in the category of `R`-coalgebras associated to an `R`-coalgebra. -/\n@[simps]\ndef of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] :\n    CoalgebraCat R :=\n  { ModuleCat.of R X with\n    instCoalgebra := (inferInstance : Coalgebra R X) }\n\n"}
{"name":"CoalgebraCat.of_isModule","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq (CoalgebraCat.of R X).isModule inst✝¹","decl":"/-- The object in the category of `R`-coalgebras associated to an `R`-coalgebra. -/\n@[simps]\ndef of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] :\n    CoalgebraCat R :=\n  { ModuleCat.of R X with\n    instCoalgebra := (inferInstance : Coalgebra R X) }\n\n"}
{"name":"CoalgebraCat.of_carrier","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq (↑(CoalgebraCat.of R X).toModuleCat) X","decl":"/-- The object in the category of `R`-coalgebras associated to an `R`-coalgebra. -/\n@[simps]\ndef of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] :\n    CoalgebraCat R :=\n  { ModuleCat.of R X with\n    instCoalgebra := (inferInstance : Coalgebra R X) }\n\n"}
{"name":"CoalgebraCat.of_instCoalgebra","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq (CoalgebraCat.of R X).instCoalgebra inferInstance","decl":"/-- The object in the category of `R`-coalgebras associated to an `R`-coalgebra. -/\n@[simps]\ndef of (X : Type v) [AddCommGroup X] [Module R X] [Coalgebra R X] :\n    CoalgebraCat R :=\n  { ModuleCat.of R X with\n    instCoalgebra := (inferInstance : Coalgebra R X) }\n\n"}
{"name":"CoalgebraCat.of_comul","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq CoalgebraStruct.comul CoalgebraStruct.comul","decl":"@[simp]\nlemma of_comul {X : Type v} [AddCommGroup X] [Module R X] [Coalgebra R X] :\n    Coalgebra.comul (A := of R X) = Coalgebra.comul (R := R) (A := X) := rfl\n\n"}
{"name":"CoalgebraCat.of_counit","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq CoalgebraStruct.counit CoalgebraStruct.counit","decl":"@[simp]\nlemma of_counit {X : Type v} [AddCommGroup X] [Module R X] [Coalgebra R X] :\n    Coalgebra.counit (A := of R X) = Coalgebra.counit (R := R) (A := X) := rfl\n\n"}
{"name":"CoalgebraCat.Hom.ext","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nV W : CoalgebraCat R\nx y : V.Hom W\ntoCoalgHom : Eq x.toCoalgHom y.toCoalgHom\n⊢ Eq x y","decl":"/-- A type alias for `CoalgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : CoalgebraCat.{v} R) where\n  /-- The underlying `CoalgHom` -/\n  toCoalgHom : V →ₗc[R] W\n\n"}
{"name":"CoalgebraCat.Hom.mk.inj","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nV W : CoalgebraCat R\ntoCoalgHom✝ toCoalgHom : CoalgHom R ↑V.toModuleCat ↑W.toModuleCat\nx✝ : Eq { toCoalgHom := toCoalgHom✝ } { toCoalgHom := toCoalgHom }\n⊢ Eq toCoalgHom✝ toCoalgHom","decl":"/-- A type alias for `CoalgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : CoalgebraCat.{v} R) where\n  /-- The underlying `CoalgHom` -/\n  toCoalgHom : V →ₗc[R] W\n\n"}
{"name":"CoalgebraCat.Hom.mk.sizeOf_spec","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nV W : CoalgebraCat R\ninst✝ : SizeOf R\ntoCoalgHom : CoalgHom R ↑V.toModuleCat ↑W.toModuleCat\n⊢ Eq (SizeOf.sizeOf { toCoalgHom := toCoalgHom }) (HAdd.hAdd 1 (SizeOf.sizeOf toCoalgHom))","decl":"/-- A type alias for `CoalgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : CoalgebraCat.{v} R) where\n  /-- The underlying `CoalgHom` -/\n  toCoalgHom : V →ₗc[R] W\n\n"}
{"name":"CoalgebraCat.Hom.mk.injEq","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nV W : CoalgebraCat R\ntoCoalgHom✝ toCoalgHom : CoalgHom R ↑V.toModuleCat ↑W.toModuleCat\n⊢ Eq (Eq { toCoalgHom := toCoalgHom✝ } { toCoalgHom := toCoalgHom }) (Eq toCoalgHom✝ toCoalgHom)","decl":"/-- A type alias for `CoalgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : CoalgebraCat.{v} R) where\n  /-- The underlying `CoalgHom` -/\n  toCoalgHom : V →ₗc[R] W\n\n"}
{"name":"CoalgebraCat.Hom.ext_iff","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nV W : CoalgebraCat R\nx y : V.Hom W\n⊢ Iff (Eq x y) (Eq x.toCoalgHom y.toCoalgHom)","decl":"/-- A type alias for `CoalgHom` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : CoalgebraCat.{v} R) where\n  /-- The underlying `CoalgHom` -/\n  toCoalgHom : V →ₗc[R] W\n\n"}
{"name":"CoalgebraCat.Hom.toCoalgHom_injective","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nV W : CoalgebraCat R\n⊢ Function.Injective CoalgebraCat.Hom.toCoalgHom","decl":"lemma Hom.toCoalgHom_injective (V W : CoalgebraCat.{v} R) :\n    Function.Injective (Hom.toCoalgHom : Hom V W → _) :=\n  fun ⟨f⟩ ⟨g⟩ _ => by congr\n\n"}
{"name":"CoalgebraCat.hom_ext","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nM N : CoalgebraCat R\nf g : Quiver.Hom M N\nh : Eq f.toCoalgHom g.toCoalgHom\n⊢ Eq f g","decl":"@[ext]\nlemma hom_ext {M N : CoalgebraCat.{v} R} (f g : M ⟶ N) (h : f.toCoalgHom = g.toCoalgHom) :\n    f = g :=\n  Hom.ext h\n\n"}
{"name":"CoalgebraCat.hom_ext_iff","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nM N : CoalgebraCat R\nf g : Quiver.Hom M N\n⊢ Iff (Eq f g) (Eq f.toCoalgHom g.toCoalgHom)","decl":"@[ext]\nlemma hom_ext {M N : CoalgebraCat.{v} R} (f g : M ⟶ N) (h : f.toCoalgHom = g.toCoalgHom) :\n    f = g :=\n  Hom.ext h\n\n"}
{"name":"CoalgebraCat.toCoalgHom_comp","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nM N U : CoalgebraCat R\nf : Quiver.Hom M N\ng : Quiver.Hom N U\n⊢ Eq (CategoryTheory.CategoryStruct.comp f g).toCoalgHom (g.toCoalgHom.comp f.toCoalgHom)","decl":"@[simp] theorem toCoalgHom_comp {M N U : CoalgebraCat.{v} R} (f : M ⟶ N) (g : N ⟶ U) :\n    (f ≫ g).toCoalgHom = g.toCoalgHom.comp f.toCoalgHom :=\n  rfl\n\n"}
{"name":"CoalgebraCat.toCoalgHom_id","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nM : CoalgebraCat R\n⊢ Eq (CategoryTheory.CategoryStruct.id M).toCoalgHom (CoalgHom.id R ↑M.toModuleCat)","decl":"@[simp] theorem toCoalgHom_id {M : CoalgebraCat.{v} R} :\n    Hom.toCoalgHom (𝟙 M) = CoalgHom.id _ _ :=\n  rfl\n\n"}
{"name":"CoalgebraCat.forget₂_obj","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX : CoalgebraCat R\n⊢ Eq ((CategoryTheory.forget₂ (CoalgebraCat R) (ModuleCat R)).obj X) (ModuleCat.of R ↑X.toModuleCat)","decl":"@[simp]\ntheorem forget₂_obj (X : CoalgebraCat R) :\n    (forget₂ (CoalgebraCat R) (ModuleCat R)).obj X = ModuleCat.of R X :=\n  rfl\n\n"}
{"name":"CoalgebraCat.forget₂_map","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX Y : CoalgebraCat R\nf : Quiver.Hom X Y\n⊢ Eq ((CategoryTheory.forget₂ (CoalgebraCat R) (ModuleCat R)).map f) (ModuleCat.ofHom ↑f.toCoalgHom)","decl":"@[simp]\ntheorem forget₂_map (X Y : CoalgebraCat R) (f : X ⟶ Y) :\n    (forget₂ (CoalgebraCat R) (ModuleCat R)).map f = ModuleCat.ofHom (f.toCoalgHom : X →ₗ[R] Y) :=\n  rfl\n\n"}
{"name":"CoalgEquiv.toCoalgebraCatIso_inv_toCoalgHom","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝⁶ : CommRing R\nX Y : Type v\ninst✝⁵ : AddCommGroup X\ninst✝⁴ : Module R X\ninst✝³ : AddCommGroup Y\ninst✝² : Module R Y\ninst✝¹ : Coalgebra R X\ninst✝ : Coalgebra R Y\ne : CoalgEquiv R X Y\n⊢ Eq e.toCoalgebraCatIso.inv.toCoalgHom ↑e.symm","decl":"/-- Build an isomorphism in the category `CoalgebraCat R` from a\n`CoalgEquiv`. -/\n@[simps]\ndef toCoalgebraCatIso (e : X ≃ₗc[R] Y) : CoalgebraCat.of R X ≅ CoalgebraCat.of R Y where\n  hom := CoalgebraCat.ofHom e\n  inv := CoalgebraCat.ofHom e.symm\n  hom_inv_id := Hom.ext <| DFunLike.ext _ _ e.left_inv\n  inv_hom_id := Hom.ext <| DFunLike.ext _ _ e.right_inv\n\n"}
{"name":"CoalgEquiv.toCoalgebraCatIso_hom_toCoalgHom","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝⁶ : CommRing R\nX Y : Type v\ninst✝⁵ : AddCommGroup X\ninst✝⁴ : Module R X\ninst✝³ : AddCommGroup Y\ninst✝² : Module R Y\ninst✝¹ : Coalgebra R X\ninst✝ : Coalgebra R Y\ne : CoalgEquiv R X Y\n⊢ Eq e.toCoalgebraCatIso.hom.toCoalgHom ↑e","decl":"/-- Build an isomorphism in the category `CoalgebraCat R` from a\n`CoalgEquiv`. -/\n@[simps]\ndef toCoalgebraCatIso (e : X ≃ₗc[R] Y) : CoalgebraCat.of R X ≅ CoalgebraCat.of R Y where\n  hom := CoalgebraCat.ofHom e\n  inv := CoalgebraCat.ofHom e.symm\n  hom_inv_id := Hom.ext <| DFunLike.ext _ _ e.left_inv\n  inv_hom_id := Hom.ext <| DFunLike.ext _ _ e.right_inv\n\n"}
{"name":"CoalgEquiv.toCoalgebraCatIso_refl","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝³ : CommRing R\nX : Type v\ninst✝² : AddCommGroup X\ninst✝¹ : Module R X\ninst✝ : Coalgebra R X\n⊢ Eq (CoalgEquiv.refl R X).toCoalgebraCatIso (CategoryTheory.Iso.refl (CoalgebraCat.of R X))","decl":"@[simp] theorem toCoalgebraCatIso_refl :\n    toCoalgebraCatIso (CoalgEquiv.refl R X) = .refl _ :=\n  rfl\n\n"}
{"name":"CoalgEquiv.toCoalgebraCatIso_symm","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝⁶ : CommRing R\nX Y : Type v\ninst✝⁵ : AddCommGroup X\ninst✝⁴ : Module R X\ninst✝³ : AddCommGroup Y\ninst✝² : Module R Y\ninst✝¹ : Coalgebra R X\ninst✝ : Coalgebra R Y\ne : CoalgEquiv R X Y\n⊢ Eq e.symm.toCoalgebraCatIso e.toCoalgebraCatIso.symm","decl":"@[simp] theorem toCoalgebraCatIso_symm (e : X ≃ₗc[R] Y) :\n    toCoalgebraCatIso e.symm = (toCoalgebraCatIso e).symm :=\n  rfl\n\n"}
{"name":"CoalgEquiv.toCoalgebraCatIso_trans","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝⁹ : CommRing R\nX Y Z : Type v\ninst✝⁸ : AddCommGroup X\ninst✝⁷ : Module R X\ninst✝⁶ : AddCommGroup Y\ninst✝⁵ : Module R Y\ninst✝⁴ : AddCommGroup Z\ninst✝³ : Module R Z\ninst✝² : Coalgebra R X\ninst✝¹ : Coalgebra R Y\ninst✝ : Coalgebra R Z\ne : CoalgEquiv R X Y\nf : CoalgEquiv R Y Z\n⊢ Eq (e.trans f).toCoalgebraCatIso (e.toCoalgebraCatIso.trans f.toCoalgebraCatIso)","decl":"@[simp] theorem toCoalgebraCatIso_trans (e : X ≃ₗc[R] Y) (f : Y ≃ₗc[R] Z) :\n    toCoalgebraCatIso (e.trans f) = toCoalgebraCatIso e ≪≫ toCoalgebraCatIso f :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toCoalgEquiv_toCoalgHom","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX Y : CoalgebraCat R\ni : CategoryTheory.Iso X Y\n⊢ Eq (↑i.toCoalgEquiv) i.hom.toCoalgHom","decl":"@[simp] theorem toCoalgEquiv_toCoalgHom (i : X ≅ Y) :\n    i.toCoalgEquiv = i.hom.toCoalgHom := rfl\n\n"}
{"name":"CategoryTheory.Iso.toCoalgEquiv_refl","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX : CoalgebraCat R\n⊢ Eq (CategoryTheory.Iso.refl X).toCoalgEquiv (CoalgEquiv.refl R ↑X.toModuleCat)","decl":"@[simp] theorem toCoalgEquiv_refl : toCoalgEquiv (.refl X) = .refl _ _ :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toCoalgEquiv_symm","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX Y : CoalgebraCat R\ne : CategoryTheory.Iso X Y\n⊢ Eq e.symm.toCoalgEquiv e.toCoalgEquiv.symm","decl":"@[simp] theorem toCoalgEquiv_symm (e : X ≅ Y) :\n    toCoalgEquiv e.symm = (toCoalgEquiv e).symm :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toCoalgEquiv_trans","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\nX Y Z : CoalgebraCat R\ne : CategoryTheory.Iso X Y\nf : CategoryTheory.Iso Y Z\n⊢ Eq (e.trans f).toCoalgEquiv (e.toCoalgEquiv.trans f.toCoalgEquiv)","decl":"@[simp] theorem toCoalgEquiv_trans (e : X ≅ Y) (f : Y ≅ Z) :\n    toCoalgEquiv (e ≪≫ f) = e.toCoalgEquiv.trans f.toCoalgEquiv :=\n  rfl\n\n"}
{"name":"CoalgebraCat.forget_reflects_isos","module":"Mathlib.Algebra.Category.CoalgebraCat.Basic","initialProofState":"R : Type u\ninst✝ : CommRing R\n⊢ (CategoryTheory.forget (CoalgebraCat R)).ReflectsIsomorphisms","decl":"instance CoalgebraCat.forget_reflects_isos :\n    (forget (CoalgebraCat.{v} R)).ReflectsIsomorphisms where\n  reflects {X Y} f _ := by\n    let i := asIso ((forget (CoalgebraCat.{v} R)).map f)\n    let e : X ≃ₗc[R] Y := { f.toCoalgHom, i.toEquiv with }\n    exact ⟨e.toCoalgebraCatIso.isIso_hom.1⟩\n"}
