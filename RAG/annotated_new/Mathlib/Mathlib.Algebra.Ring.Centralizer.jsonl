{"name":"Set.add_mem_centralizer","module":"Mathlib.Algebra.Ring.Centralizer","initialProofState":"M : Type u_1\nS : Set M\na b : M\ninst✝ : Distrib M\nha : Membership.mem S.centralizer a\nhb : Membership.mem S.centralizer b\n⊢ Membership.mem S.centralizer (HAdd.hAdd a b)","decl":"@[simp]\ntheorem add_mem_centralizer [Distrib M] (ha : a ∈ centralizer S) (hb : b ∈ centralizer S) :\n    a + b ∈ centralizer S := fun c hc => by rw [add_mul, mul_add, ha c hc, hb c hc]\n\n"}
{"name":"Set.neg_mem_centralizer","module":"Mathlib.Algebra.Ring.Centralizer","initialProofState":"M : Type u_1\nS : Set M\na : M\ninst✝¹ : Mul M\ninst✝ : HasDistribNeg M\nha : Membership.mem S.centralizer a\n⊢ Membership.mem S.centralizer (Neg.neg a)","decl":"@[simp]\ntheorem neg_mem_centralizer [Mul M] [HasDistribNeg M] (ha : a ∈ centralizer S) :\n    -a ∈ centralizer S := fun c hc => by rw [mul_neg, ha c hc, neg_mul]\n\n"}
