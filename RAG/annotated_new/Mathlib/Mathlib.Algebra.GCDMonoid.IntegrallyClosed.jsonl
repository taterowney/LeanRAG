{"name":"IsLocalization.surj_of_gcd_domain","module":"Mathlib.Algebra.GCDMonoid.IntegrallyClosed","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : IsDomain R\ninst✝³ : CommRing A\ninst✝² : Algebra R A\ninst✝¹ : GCDMonoid R\nM : Submonoid R\ninst✝ : IsLocalization M A\nz : A\n⊢ Exists fun a => Exists fun b => And (IsUnit (GCDMonoid.gcd a b)) (Eq (HMul.hMul z ((algebraMap R A) b)) ((algebraMap R A) a))","decl":"theorem IsLocalization.surj_of_gcd_domain [GCDMonoid R] (M : Submonoid R) [IsLocalization M A]\n    (z : A) : ∃ a b : R, IsUnit (gcd a b) ∧ z * algebraMap R A b = algebraMap R A a := by\n  obtain ⟨x, ⟨y, hy⟩, rfl⟩ := IsLocalization.mk'_surjective M z\n  obtain ⟨x', y', hx', hy', hu⟩ := extract_gcd x y\n  use x', y', hu\n  rw [mul_comm, IsLocalization.mul_mk'_eq_mk'_of_mul]\n  convert IsLocalization.mk'_mul_cancel_left (M := M) (S := A) _ _ using 2\n  rw [Subtype.coe_mk, hy', ← mul_comm y', mul_assoc]; conv_lhs => rw [hx']\n\n"}
{"name":"GCDMonoid.toIsIntegrallyClosed","module":"Mathlib.Algebra.GCDMonoid.IntegrallyClosed","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\ninst✝ : IsDomain R\nh : Nonempty (GCDMonoid R)\n⊢ IsIntegrallyClosed R","decl":"instance (priority := 100) GCDMonoid.toIsIntegrallyClosed\n    [h : Nonempty (GCDMonoid R)] : IsIntegrallyClosed R :=\n  (isIntegrallyClosed_iff (FractionRing R)).mpr fun {X} ⟨p, hp₁, hp₂⟩ => by\n    cases h\n    obtain ⟨x, y, hg, he⟩ := IsLocalization.surj_of_gcd_domain (nonZeroDivisors R) X\n    have :=\n      Polynomial.dvd_pow_natDegree_of_eval₂_eq_zero (IsFractionRing.injective R <| FractionRing R)\n        hp₁ y x _ hp₂ (by rw [mul_comm, he])\n    have : IsUnit y := by\n      rw [isUnit_iff_dvd_one, ← one_pow]\n      exact\n        (dvd_gcd this <| dvd_refl y).trans\n          (gcd_pow_left_dvd_pow_gcd.trans <| pow_dvd_pow_of_dvd (isUnit_iff_dvd_one.1 hg) _)\n    use x * (this.unit⁻¹ :)\n    erw [map_mul, ← Units.coe_map_inv, eq_comm, Units.eq_mul_inv_iff_mul_eq]\n    exact he\n"}
