{"name":"NNRat.floor_coe","module":"Mathlib.Data.NNRat.Floor","initialProofState":"q : NNRat\n⊢ Eq (Nat.floor ↑q) (Nat.floor q)","decl":"@[simp, norm_cast]\ntheorem floor_coe (q : ℚ≥0) : ⌊(q : ℚ)⌋₊ = ⌊q⌋₊ := rfl\n\n"}
{"name":"NNRat.ceil_coe","module":"Mathlib.Data.NNRat.Floor","initialProofState":"q : NNRat\n⊢ Eq (Nat.ceil ↑q) (Nat.ceil q)","decl":"@[simp, norm_cast]\ntheorem ceil_coe (q : ℚ≥0) : ⌈(q : ℚ)⌉₊ = ⌈q⌉₊ := rfl\n\n"}
{"name":"NNRat.coe_floor","module":"Mathlib.Data.NNRat.Floor","initialProofState":"q : NNRat\n⊢ Eq (↑(Nat.floor q)) (Int.floor ↑q)","decl":"@[simp, norm_cast]\ntheorem coe_floor (q : ℚ≥0) : ↑⌊q⌋₊ = ⌊(q : ℚ)⌋ := Int.natCast_floor_eq_floor q.coe_nonneg\n\n"}
{"name":"NNRat.coe_ceil","module":"Mathlib.Data.NNRat.Floor","initialProofState":"q : NNRat\n⊢ Eq (↑(Nat.ceil q)) (Int.ceil ↑q)","decl":"@[simp, norm_cast]\ntheorem coe_ceil (q : ℚ≥0) : ↑⌈q⌉₊ = ⌈(q : ℚ)⌉ := Int.natCast_ceil_eq_ceil q.coe_nonneg\n\n"}
{"name":"NNRat.floor_def","module":"Mathlib.Data.NNRat.Floor","initialProofState":"q : NNRat\n⊢ Eq (Nat.floor q) (HDiv.hDiv q.num q.den)","decl":"protected theorem floor_def (q : ℚ≥0) : ⌊q⌋₊ = q.num / q.den := by\n  rw [← Int.natCast_inj, NNRat.coe_floor, Rat.floor_def, Int.ofNat_ediv, den_coe, num_coe]\n\n"}
{"name":"NNRat.floor_cast","module":"Mathlib.Data.NNRat.Floor","initialProofState":"K : Type u_1\ninst✝¹ : LinearOrderedSemifield K\ninst✝ : FloorSemiring K\nx : NNRat\n⊢ Eq (Nat.floor ↑x) (Nat.floor x)","decl":"@[simp, norm_cast]\ntheorem floor_cast (x : ℚ≥0) : ⌊(x : K)⌋₊ = ⌊x⌋₊ :=\n  (Nat.floor_eq_iff x.cast_nonneg).2 (mod_cast (Nat.floor_eq_iff x.cast_nonneg).1 (Eq.refl ⌊x⌋₊))\n\n"}
{"name":"NNRat.ceil_cast","module":"Mathlib.Data.NNRat.Floor","initialProofState":"K : Type u_1\ninst✝¹ : LinearOrderedSemifield K\ninst✝ : FloorSemiring K\nx : NNRat\n⊢ Eq (Nat.ceil ↑x) (Nat.ceil x)","decl":"@[simp, norm_cast]\ntheorem ceil_cast (x : ℚ≥0) : ⌈(x : K)⌉₊ = ⌈x⌉₊ := by\n  obtain rfl | hx := eq_or_ne x 0\n  · simp\n  · refine (Nat.ceil_eq_iff ?_).2 (mod_cast (Nat.ceil_eq_iff ?_).1 (Eq.refl ⌈x⌉₊)) <;> simpa\n\n"}
{"name":"NNRat.intFloor_cast","module":"Mathlib.Data.NNRat.Floor","initialProofState":"K : Type u_1\ninst✝¹ : LinearOrderedField K\ninst✝ : FloorRing K\nx : NNRat\n⊢ Eq (Int.floor ↑x) (Int.floor ↑x)","decl":"@[simp, norm_cast]\ntheorem intFloor_cast (x : ℚ≥0) : ⌊(x : K)⌋ = ⌊(x : ℚ)⌋ := by\n  rw [Int.floor_eq_iff (α := K), ← coe_floor]\n  norm_cast\n  norm_cast\n  rw [Nat.cast_add_one, ← Nat.floor_eq_iff (zero_le _)]\n\n"}
{"name":"NNRat.intCeil_cast","module":"Mathlib.Data.NNRat.Floor","initialProofState":"K : Type u_1\ninst✝¹ : LinearOrderedField K\ninst✝ : FloorRing K\nx : NNRat\n⊢ Eq (Int.ceil ↑x) (Int.ceil ↑x)","decl":"@[simp, norm_cast]\ntheorem intCeil_cast (x : ℚ≥0) : ⌈(x : K)⌉ = ⌈(x : ℚ)⌉ := by\n  rw [Int.ceil_eq_iff, ← coe_ceil, sub_lt_iff_lt_add]\n  constructor\n  · have := NNRat.cast_strictMono (K := K) <| Nat.ceil_lt_add_one <| zero_le x\n    rw [NNRat.cast_add, NNRat.cast_one] at this\n    refine Eq.trans_lt ?_ this\n    norm_cast\n  · rw [Int.cast_natCast, NNRat.cast_le_natCast]\n    exact Nat.le_ceil _\n\n"}
{"name":"NNRat.floor_natCast_div_natCast","module":"Mathlib.Data.NNRat.Floor","initialProofState":"n d : Nat\n⊢ Eq (Nat.floor (HDiv.hDiv ↑n ↑d)) (HDiv.hDiv n d)","decl":"@[norm_cast]\ntheorem floor_natCast_div_natCast (n d : ℕ) : ⌊(↑n / ↑d : ℚ≥0)⌋₊ = n / d :=\n  Rat.natFloor_natCast_div_natCast n d\n\n"}
