{"name":"Finite.Set.finite_range","module":"Mathlib.Data.Set.Finite.Range","initialProofState":"α : Type u\nι : Sort w\nf : ι → α\ninst✝ : Finite ι\n⊢ Finite ↑(Set.range f)","decl":"instance finite_range (f : ι → α) [Finite ι] : Finite (range f) := by\n  classical\n  haveI := Fintype.ofFinite (PLift ι)\n  infer_instance\n\n"}
{"name":"Finite.Set.finite_replacement","module":"Mathlib.Data.Set.Finite.Range","initialProofState":"α : Type u\nβ : Type v\ninst✝ : Finite α\nf : α → β\n⊢ Finite ↑(setOf fun x => Exists fun x_1 => Eq (f x_1) x)","decl":"instance finite_replacement [Finite α] (f : α → β) :\n    Finite {f x | x : α} :=\n  Finite.Set.finite_range f\n\n"}
{"name":"Set.finite_range","module":"Mathlib.Data.Set.Finite.Range","initialProofState":"α : Type u\nι : Sort w\nf : ι → α\ninst✝ : Finite ι\n⊢ (Set.range f).Finite","decl":"theorem finite_range (f : ι → α) [Finite ι] : (range f).Finite :=\n  toFinite _\n\n"}
{"name":"Set.Finite.dependent_image","module":"Mathlib.Data.Set.Finite.Range","initialProofState":"α : Type u\nβ : Type v\ns : Set α\nhs : s.Finite\nF : (i : α) → Membership.mem s i → β\n⊢ (setOf fun y => Exists fun x => Exists fun hx => Eq (F x hx) y).Finite","decl":"theorem Finite.dependent_image {s : Set α} (hs : s.Finite) (F : ∀ i ∈ s, β) :\n    {y : β | ∃ x hx, F x hx = y}.Finite := by\n  have := hs.to_subtype\n  simpa [range] using finite_range fun x : s => F x x.2\n\n"}
