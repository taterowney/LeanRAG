{"name":"QuadraticModuleCat.mk.inj","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\ntoModuleCat‚úù : ModuleCat R\nform‚úù : QuadraticForm R ‚ÜëtoModuleCat‚úù\ntoModuleCat : ModuleCat R\nform : QuadraticForm R ‚ÜëtoModuleCat\nx‚úù : Eq { toModuleCat := toModuleCat‚úù, form := form‚úù } { toModuleCat := toModuleCat, form := form }\n‚ä¢ And (Eq toModuleCat‚úù toModuleCat) (HEq form‚úù form)","decl":"/-- The category of quadratic modules; modules with an associated quadratic form -/\nstructure QuadraticModuleCat extends ModuleCat.{v} R where\n  /-- The quadratic form associated with the module. -/\n  form : QuadraticForm R carrier\n\n"}
{"name":"QuadraticModuleCat.mk.sizeOf_spec","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù¬π : CommRing R\ninst‚úù : SizeOf R\ntoModuleCat : ModuleCat R\nform : QuadraticForm R ‚ÜëtoModuleCat\n‚ä¢ Eq (SizeOf.sizeOf { toModuleCat := toModuleCat, form := form }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toModuleCat)) (SizeOf.sizeOf form))","decl":"/-- The category of quadratic modules; modules with an associated quadratic form -/\nstructure QuadraticModuleCat extends ModuleCat.{v} R where\n  /-- The quadratic form associated with the module. -/\n  form : QuadraticForm R carrier\n\n"}
{"name":"QuadraticModuleCat.mk.injEq","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\ntoModuleCat‚úù : ModuleCat R\nform‚úù : QuadraticForm R ‚ÜëtoModuleCat‚úù\ntoModuleCat : ModuleCat R\nform : QuadraticForm R ‚ÜëtoModuleCat\n‚ä¢ Eq (Eq { toModuleCat := toModuleCat‚úù, form := form‚úù } { toModuleCat := toModuleCat, form := form }) (And (Eq toModuleCat‚úù toModuleCat) (HEq form‚úù form))","decl":"/-- The category of quadratic modules; modules with an associated quadratic form -/\nstructure QuadraticModuleCat extends ModuleCat.{v} R where\n  /-- The quadratic form associated with the module. -/\n  form : QuadraticForm R carrier\n\n"}
{"name":"QuadraticModuleCat.moduleCat_of_toModuleCat","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : QuadraticModuleCat R\n‚ä¢ Eq (ModuleCat.of R ‚ÜëX.toModuleCat) X.toModuleCat","decl":"@[simp] theorem moduleCat_of_toModuleCat (X : QuadraticModuleCat.{v} R) :\n    ModuleCat.of R X.toModuleCat = X.toModuleCat :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.of_form","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : AddCommGroup X\ninst‚úù : Module R X\nQ : QuadraticForm R X\n‚ä¢ Eq (QuadraticModuleCat.of Q).form Q","decl":"/-- The object in the category of quadratic R-modules associated to a quadratic R-module. -/\n@[simps form]\ndef of {X : Type v} [AddCommGroup X] [Module R X] (Q : QuadraticForm R X) :\n    QuadraticModuleCat R :=\n  { ModuleCat.of R X with\n    form := Q }\n\n"}
{"name":"QuadraticModuleCat.Hom.ext","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : QuadraticModuleCat R\nx y : V.Hom W\ntoIsometry : Eq x.toIsometry y.toIsometry\n‚ä¢ Eq x y","decl":"/-- A type alias for `QuadraticForm.LinearIsometry` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : QuadraticModuleCat.{v} R) where\n  /-- The underlying isometry -/\n  toIsometry : V.form ‚Üíq·µ¢ W.form\n\n"}
{"name":"QuadraticModuleCat.Hom.mk.inj","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : QuadraticModuleCat R\ntoIsometry‚úù toIsometry : QuadraticMap.Isometry V.form W.form\nx‚úù : Eq { toIsometry := toIsometry‚úù } { toIsometry := toIsometry }\n‚ä¢ Eq toIsometry‚úù toIsometry","decl":"/-- A type alias for `QuadraticForm.LinearIsometry` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : QuadraticModuleCat.{v} R) where\n  /-- The underlying isometry -/\n  toIsometry : V.form ‚Üíq·µ¢ W.form\n\n"}
{"name":"QuadraticModuleCat.Hom.mk.sizeOf_spec","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù¬π : CommRing R\nV W : QuadraticModuleCat R\ninst‚úù : SizeOf R\ntoIsometry : QuadraticMap.Isometry V.form W.form\n‚ä¢ Eq (SizeOf.sizeOf { toIsometry := toIsometry }) (HAdd.hAdd 1 (SizeOf.sizeOf toIsometry))","decl":"/-- A type alias for `QuadraticForm.LinearIsometry` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : QuadraticModuleCat.{v} R) where\n  /-- The underlying isometry -/\n  toIsometry : V.form ‚Üíq·µ¢ W.form\n\n"}
{"name":"QuadraticModuleCat.Hom.mk.injEq","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : QuadraticModuleCat R\ntoIsometry‚úù toIsometry : QuadraticMap.Isometry V.form W.form\n‚ä¢ Eq (Eq { toIsometry := toIsometry‚úù } { toIsometry := toIsometry }) (Eq toIsometry‚úù toIsometry)","decl":"/-- A type alias for `QuadraticForm.LinearIsometry` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : QuadraticModuleCat.{v} R) where\n  /-- The underlying isometry -/\n  toIsometry : V.form ‚Üíq·µ¢ W.form\n\n"}
{"name":"QuadraticModuleCat.Hom.ext_iff","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : QuadraticModuleCat R\nx y : V.Hom W\n‚ä¢ Iff (Eq x y) (Eq x.toIsometry y.toIsometry)","decl":"/-- A type alias for `QuadraticForm.LinearIsometry` to avoid confusion between the categorical and\nalgebraic spellings of composition. -/\n@[ext]\nstructure Hom (V W : QuadraticModuleCat.{v} R) where\n  /-- The underlying isometry -/\n  toIsometry : V.form ‚Üíq·µ¢ W.form\n\n"}
{"name":"QuadraticModuleCat.Hom.toIsometry_injective","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nV W : QuadraticModuleCat R\n‚ä¢ Function.Injective QuadraticModuleCat.Hom.toIsometry","decl":"lemma Hom.toIsometry_injective (V W : QuadraticModuleCat.{v} R) :\n    Function.Injective (Hom.toIsometry : Hom V W ‚Üí _) :=\n  fun ‚ü®f‚ü© ‚ü®g‚ü© _ => by congr\n\n"}
{"name":"QuadraticModuleCat.hom_ext","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : QuadraticModuleCat R\nf g : Quiver.Hom M N\nh : Eq f.toIsometry g.toIsometry\n‚ä¢ Eq f g","decl":"@[ext]\nlemma hom_ext {M N : QuadraticModuleCat.{v} R} (f g : M ‚ü∂ N) (h : f.toIsometry = g.toIsometry) :\n    f = g :=\n  Hom.ext h\n\n"}
{"name":"QuadraticModuleCat.hom_ext_iff","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N : QuadraticModuleCat R\nf g : Quiver.Hom M N\n‚ä¢ Iff (Eq f g) (Eq f.toIsometry g.toIsometry)","decl":"@[ext]\nlemma hom_ext {M N : QuadraticModuleCat.{v} R} (f g : M ‚ü∂ N) (h : f.toIsometry = g.toIsometry) :\n    f = g :=\n  Hom.ext h\n\n"}
{"name":"QuadraticModuleCat.toIsometry_comp","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM N U : QuadraticModuleCat R\nf : Quiver.Hom M N\ng : Quiver.Hom N U\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp f g).toIsometry (g.toIsometry.comp f.toIsometry)","decl":"@[simp] theorem toIsometry_comp {M N U : QuadraticModuleCat.{v} R} (f : M ‚ü∂ N) (g : N ‚ü∂ U) :\n    (f ‚â´ g).toIsometry = g.toIsometry.comp f.toIsometry :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.toIsometry_id","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nM : QuadraticModuleCat R\n‚ä¢ Eq (CategoryTheory.CategoryStruct.id M).toIsometry (QuadraticMap.Isometry.id M.form)","decl":"@[simp] theorem toIsometry_id {M : QuadraticModuleCat.{v} R} :\n    Hom.toIsometry (ùüô M) = Isometry.id _ :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.forget‚ÇÇ_obj","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : QuadraticModuleCat R\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (QuadraticModuleCat R) (ModuleCat R)).obj X) (ModuleCat.of R ‚ÜëX.toModuleCat)","decl":"@[simp]\ntheorem forget‚ÇÇ_obj (X : QuadraticModuleCat R) :\n    (forget‚ÇÇ (QuadraticModuleCat R) (ModuleCat R)).obj X = ModuleCat.of R X :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.forget‚ÇÇ_map","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : QuadraticModuleCat R\nf : Quiver.Hom X Y\n‚ä¢ Eq ((CategoryTheory.forget‚ÇÇ (QuadraticModuleCat R) (ModuleCat R)).map f) (ModuleCat.ofHom f.toIsometry.toLinearMap)","decl":"@[simp]\ntheorem forget‚ÇÇ_map (X Y : QuadraticModuleCat R) (f : X ‚ü∂ Y) :\n    (forget‚ÇÇ (QuadraticModuleCat R) (ModuleCat R)).map f =\n      ModuleCat.ofHom f.toIsometry.toLinearMap :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.ofIso_hom_toIsometry","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : AddCommGroup X\ninst‚úù¬≤ : Module R X\ninst‚úù¬π : AddCommGroup Y\ninst‚úù : Module R Y\nQ‚ÇÅ : QuadraticForm R X\nQ‚ÇÇ : QuadraticForm R Y\ne : QuadraticMap.IsometryEquiv Q‚ÇÅ Q‚ÇÇ\n‚ä¢ Eq (QuadraticModuleCat.ofIso e).hom.toIsometry e.toIsometry","decl":"/-- Build an isomorphism in the category `QuadraticModuleCat R` from a\n`QuadraticForm.IsometryEquiv`. -/\n@[simps]\ndef ofIso (e : Q‚ÇÅ.IsometryEquiv Q‚ÇÇ) : QuadraticModuleCat.of Q‚ÇÅ ‚âÖ QuadraticModuleCat.of Q‚ÇÇ where\n  hom := ‚ü®e.toIsometry‚ü©\n  inv := ‚ü®e.symm.toIsometry‚ü©\n  hom_inv_id := Hom.ext <| DFunLike.ext _ _ e.left_inv\n  inv_hom_id := Hom.ext <| DFunLike.ext _ _ e.right_inv\n\n"}
{"name":"QuadraticModuleCat.ofIso_inv_toIsometry","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : AddCommGroup X\ninst‚úù¬≤ : Module R X\ninst‚úù¬π : AddCommGroup Y\ninst‚úù : Module R Y\nQ‚ÇÅ : QuadraticForm R X\nQ‚ÇÇ : QuadraticForm R Y\ne : QuadraticMap.IsometryEquiv Q‚ÇÅ Q‚ÇÇ\n‚ä¢ Eq (QuadraticModuleCat.ofIso e).inv.toIsometry e.symm.toIsometry","decl":"/-- Build an isomorphism in the category `QuadraticModuleCat R` from a\n`QuadraticForm.IsometryEquiv`. -/\n@[simps]\ndef ofIso (e : Q‚ÇÅ.IsometryEquiv Q‚ÇÇ) : QuadraticModuleCat.of Q‚ÇÅ ‚âÖ QuadraticModuleCat.of Q‚ÇÇ where\n  hom := ‚ü®e.toIsometry‚ü©\n  inv := ‚ü®e.symm.toIsometry‚ü©\n  hom_inv_id := Hom.ext <| DFunLike.ext _ _ e.left_inv\n  inv_hom_id := Hom.ext <| DFunLike.ext _ _ e.right_inv\n\n"}
{"name":"QuadraticModuleCat.ofIso_refl","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù¬≤ : CommRing R\nX : Type v\ninst‚úù¬π : AddCommGroup X\ninst‚úù : Module R X\nQ‚ÇÅ : QuadraticForm R X\n‚ä¢ Eq (QuadraticModuleCat.ofIso (QuadraticMap.IsometryEquiv.refl Q‚ÇÅ)) (CategoryTheory.Iso.refl (QuadraticModuleCat.of Q‚ÇÅ))","decl":"@[simp] theorem ofIso_refl : ofIso (IsometryEquiv.refl Q‚ÇÅ) = .refl _ :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.ofIso_symm","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù‚Å¥ : CommRing R\nX Y : Type v\ninst‚úù¬≥ : AddCommGroup X\ninst‚úù¬≤ : Module R X\ninst‚úù¬π : AddCommGroup Y\ninst‚úù : Module R Y\nQ‚ÇÅ : QuadraticForm R X\nQ‚ÇÇ : QuadraticForm R Y\ne : QuadraticMap.IsometryEquiv Q‚ÇÅ Q‚ÇÇ\n‚ä¢ Eq (QuadraticModuleCat.ofIso e.symm) (QuadraticModuleCat.ofIso e).symm","decl":"@[simp] theorem ofIso_symm (e : Q‚ÇÅ.IsometryEquiv Q‚ÇÇ) : ofIso e.symm = (ofIso e).symm :=\n  rfl\n\n"}
{"name":"QuadraticModuleCat.ofIso_trans","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù‚Å∂ : CommRing R\nX Y Z : Type v\ninst‚úù‚Åµ : AddCommGroup X\ninst‚úù‚Å¥ : Module R X\ninst‚úù¬≥ : AddCommGroup Y\ninst‚úù¬≤ : Module R Y\ninst‚úù¬π : AddCommGroup Z\ninst‚úù : Module R Z\nQ‚ÇÅ : QuadraticForm R X\nQ‚ÇÇ : QuadraticForm R Y\nQ‚ÇÉ : QuadraticForm R Z\ne : QuadraticMap.IsometryEquiv Q‚ÇÅ Q‚ÇÇ\nf : QuadraticMap.IsometryEquiv Q‚ÇÇ Q‚ÇÉ\n‚ä¢ Eq (QuadraticModuleCat.ofIso (e.trans f)) ((QuadraticModuleCat.ofIso e).trans (QuadraticModuleCat.ofIso f))","decl":"@[simp] theorem ofIso_trans (e : Q‚ÇÅ.IsometryEquiv Q‚ÇÇ) (f : Q‚ÇÇ.IsometryEquiv Q‚ÇÉ) :\n    ofIso (e.trans f) = ofIso e ‚â™‚â´ ofIso f :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toIsometryEquiv_toFun","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : QuadraticModuleCat R\ni : CategoryTheory.Iso X Y\na : ‚ÜëX.toModuleCat\n‚ä¢ Eq (i.toIsometryEquiv a) (i.hom.toIsometry a)","decl":"/-- Build a `QuadraticForm.IsometryEquiv` from an isomorphism in the category\n`QuadraticModuleCat R`. -/\n@[simps]\ndef toIsometryEquiv (i : X ‚âÖ Y) : X.form.IsometryEquiv Y.form where\n  toFun := i.hom.toIsometry\n  invFun := i.inv.toIsometry\n  left_inv x := by\n    change (i.hom ‚â´ i.inv).toIsometry x = x\n    simp\n  right_inv x := by\n    change (i.inv ‚â´ i.hom).toIsometry x = x\n    simp\n  map_add' := map_add _\n  map_smul' := map_smul _\n  map_app' := QuadraticMap.Isometry.map_app _\n\n"}
{"name":"CategoryTheory.Iso.toIsometryEquiv_invFun","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : QuadraticModuleCat R\ni : CategoryTheory.Iso X Y\na : ‚ÜëY.toModuleCat\n‚ä¢ Eq (i.toIsometryEquiv.invFun a) (i.inv.toIsometry a)","decl":"/-- Build a `QuadraticForm.IsometryEquiv` from an isomorphism in the category\n`QuadraticModuleCat R`. -/\n@[simps]\ndef toIsometryEquiv (i : X ‚âÖ Y) : X.form.IsometryEquiv Y.form where\n  toFun := i.hom.toIsometry\n  invFun := i.inv.toIsometry\n  left_inv x := by\n    change (i.hom ‚â´ i.inv).toIsometry x = x\n    simp\n  right_inv x := by\n    change (i.inv ‚â´ i.hom).toIsometry x = x\n    simp\n  map_add' := map_add _\n  map_smul' := map_smul _\n  map_app' := QuadraticMap.Isometry.map_app _\n\n"}
{"name":"CategoryTheory.Iso.toIsometryEquiv_refl","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX : QuadraticModuleCat R\n‚ä¢ Eq (CategoryTheory.Iso.refl X).toIsometryEquiv (QuadraticMap.IsometryEquiv.refl X.form)","decl":"@[simp] theorem toIsometryEquiv_refl : toIsometryEquiv (.refl X) = .refl _ :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toIsometryEquiv_symm","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y : QuadraticModuleCat R\ne : CategoryTheory.Iso X Y\n‚ä¢ Eq e.symm.toIsometryEquiv e.toIsometryEquiv.symm","decl":"@[simp] theorem toIsometryEquiv_symm (e : X ‚âÖ Y) :\n    toIsometryEquiv e.symm = (toIsometryEquiv e).symm :=\n  rfl\n\n"}
{"name":"CategoryTheory.Iso.toIsometryEquiv_trans","module":"Mathlib.LinearAlgebra.QuadraticForm.QuadraticModuleCat","initialProofState":"R : Type u\ninst‚úù : CommRing R\nX Y Z : QuadraticModuleCat R\ne : CategoryTheory.Iso X Y\nf : CategoryTheory.Iso Y Z\n‚ä¢ Eq (e.trans f).toIsometryEquiv (e.toIsometryEquiv.trans f.toIsometryEquiv)","decl":"@[simp] theorem toIsometryEquiv_trans (e : X ‚âÖ Y) (f : Y ‚âÖ Z) :\n    toIsometryEquiv (e ‚â™‚â´ f) = e.toIsometryEquiv.trans f.toIsometryEquiv :=\n  rfl\n\n"}
