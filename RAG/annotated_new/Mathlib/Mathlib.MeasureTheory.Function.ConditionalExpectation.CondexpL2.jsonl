{"name":"MeasureTheory.aestronglyMeasurable_condExpL2","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) μ","decl":"theorem aestronglyMeasurable_condExpL2 (hm : m ≤ m0) (f : α →₂[μ] E) :\n    AEStronglyMeasurable[m] (condExpL2 E 𝕜 hm f : α → E) μ :=\n  lpMeas.aeStronglyMeasurable _\n\n"}
{"name":"MeasureTheory.aeStronglyMeasurable'_condExpL2","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aeStronglyMeasurable'_condExpL2 := aestronglyMeasurable_condExpL2\n\n"}
{"name":"MeasureTheory.aeStronglyMeasurable'_condexpL2","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aeStronglyMeasurable'_condexpL2 := aestronglyMeasurable_condExpL2\n\n"}
{"name":"MeasureTheory.integrableOn_condExpL2_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhμs : Ne (μ s) Top.top\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.IntegrableOn (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) s μ","decl":"theorem integrableOn_condExpL2_of_measure_ne_top (hm : m ≤ m0) (hμs : μ s ≠ ∞) (f : α →₂[μ] E) :\n    IntegrableOn (ε := E) (condExpL2 E 𝕜 hm f) s μ :=\n  integrableOn_Lp_of_measure_ne_top (condExpL2 E 𝕜 hm f : α →₂[μ] E) fact_one_le_two_ennreal.elim\n    hμs\n\n"}
{"name":"MeasureTheory.integrableOn_condexpL2_of_measure_ne_top","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhμs : Ne (μ s) Top.top\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.IntegrableOn (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) s μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias integrableOn_condexpL2_of_measure_ne_top := integrableOn_condExpL2_of_measure_ne_top\n\n"}
{"name":"MeasureTheory.integrable_condExpL2_of_isFiniteMeasure","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\ninst✝¹ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.Integrable (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) μ","decl":"theorem integrable_condExpL2_of_isFiniteMeasure (hm : m ≤ m0) [IsFiniteMeasure μ] {f : α →₂[μ] E} :\n    Integrable (ε := E) (condExpL2 E 𝕜 hm f) μ :=\n  integrableOn_univ.mp <| integrableOn_condExpL2_of_measure_ne_top hm (measure_ne_top _ _) f\n\n"}
{"name":"MeasureTheory.integrable_condexpL2_of_isFiniteMeasure","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\ninst✝¹ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ MeasureTheory.Integrable (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias integrable_condexpL2_of_isFiniteMeasure := integrable_condExpL2_of_isFiniteMeasure\n\n"}
{"name":"MeasureTheory.norm_condExpL2_le_one","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\n⊢ LE.le (Norm.norm (MeasureTheory.condExpL2 E 𝕜 hm)) 1","decl":"theorem norm_condExpL2_le_one (hm : m ≤ m0) : ‖@condExpL2 α E 𝕜 _ _ _ _ _ _ μ hm‖ ≤ 1 :=\n  haveI : Fact (m ≤ m0) := ⟨hm⟩\n  orthogonalProjection_norm_le _\n\n"}
{"name":"MeasureTheory.norm_condexpL2_le_one","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\n⊢ LE.le (Norm.norm (MeasureTheory.condExpL2 E 𝕜 hm)) 1","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpL2_le_one := norm_condExpL2_le_one\n\n"}
{"name":"MeasureTheory.norm_condExpL2_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ LE.le (Norm.norm ((MeasureTheory.condExpL2 E 𝕜 hm) f)) (Norm.norm f)","decl":"theorem norm_condExpL2_le (hm : m ≤ m0) (f : α →₂[μ] E) : ‖condExpL2 E 𝕜 hm f‖ ≤ ‖f‖ :=\n  ((@condExpL2 _ E 𝕜 _ _ _ _ _ _ μ hm).le_opNorm f).trans\n    (mul_le_of_le_one_left (norm_nonneg _) (norm_condExpL2_le_one hm))\n\n"}
{"name":"MeasureTheory.norm_condexpL2_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ LE.le (Norm.norm ((MeasureTheory.condExpL2 E 𝕜 hm) f)) (Norm.norm f)","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpL2_le := norm_condExpL2_le\n\n"}
{"name":"MeasureTheory.eLpNorm_condExpL2_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ LE.le (MeasureTheory.eLpNorm (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) 2 μ) (MeasureTheory.eLpNorm (↑↑f) 2 μ)","decl":"theorem eLpNorm_condExpL2_le (hm : m ≤ m0) (f : α →₂[μ] E) :\n    eLpNorm (ε := E) (condExpL2 E 𝕜 hm f) 2 μ ≤ eLpNorm f 2 μ := by\n  rw [lpMeas_coe, ← ENNReal.toReal_le_toReal (Lp.eLpNorm_ne_top _) (Lp.eLpNorm_ne_top _), ←\n    Lp.norm_def, ← Lp.norm_def, Submodule.norm_coe]\n  exact norm_condExpL2_le hm f\n\n"}
{"name":"MeasureTheory.eLpNorm_condexpL2_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ LE.le (MeasureTheory.eLpNorm (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) 2 μ) (MeasureTheory.eLpNorm (↑↑f) 2 μ)","decl":"@[deprecated (since := \"2025-01-21\")] alias eLpNorm_condexpL2_le := eLpNorm_condExpL2_le\n\n"}
{"name":"MeasureTheory.norm_condExpL2_coe_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ LE.le (Norm.norm ↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) (Norm.norm f)","decl":"theorem norm_condExpL2_coe_le (hm : m ≤ m0) (f : α →₂[μ] E) :\n    ‖(condExpL2 E 𝕜 hm f : α →₂[μ] E)‖ ≤ ‖f‖ := by\n  rw [Lp.norm_def, Lp.norm_def, ← lpMeas_coe]\n  exact ENNReal.toReal_mono (Lp.eLpNorm_ne_top _) (eLpNorm_condExpL2_le hm f)\n\n"}
{"name":"MeasureTheory.norm_condexpL2_coe_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ LE.le (Norm.norm ↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) (Norm.norm f)","decl":"@[deprecated (since := \"2025-01-21\")] alias norm_condexpL2_coe_le := norm_condExpL2_coe_le\n\n"}
{"name":"MeasureTheory.inner_condExpL2_left_eq_right","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ Eq (Inner.inner (↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) g) (Inner.inner f ↑((MeasureTheory.condExpL2 E 𝕜 hm) g))","decl":"theorem inner_condExpL2_left_eq_right (hm : m ≤ m0) {f g : α →₂[μ] E} :\n    ⟪(condExpL2 E 𝕜 hm f : α →₂[μ] E), g⟫₂ = ⟪f, (condExpL2 E 𝕜 hm g : α →₂[μ] E)⟫₂ :=\n  haveI : Fact (m ≤ m0) := ⟨hm⟩\n  inner_orthogonalProjection_left_eq_right _ f g\n\n"}
{"name":"MeasureTheory.inner_condexpL2_left_eq_right","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\n⊢ Eq (Inner.inner (↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) g) (Inner.inner f ↑((MeasureTheory.condExpL2 E 𝕜 hm) g))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias inner_condexpL2_left_eq_right := inner_condExpL2_left_eq_right\n\n"}
{"name":"MeasureTheory.condExpL2_indicator_of_measurable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : E\n⊢ Eq (↑((MeasureTheory.condExpL2 E 𝕜 hm) (MeasureTheory.indicatorConstLp 2 ⋯ hμs c))) (MeasureTheory.indicatorConstLp 2 ⋯ hμs c)","decl":"theorem condExpL2_indicator_of_measurable (hm : m ≤ m0) (hs : MeasurableSet[m] s) (hμs : μ s ≠ ∞)\n    (c : E) :\n    (condExpL2 E 𝕜 hm (indicatorConstLp 2 (hm s hs) hμs c) : α →₂[μ] E) =\n      indicatorConstLp 2 (hm s hs) hμs c := by\n  rw [condExpL2]\n  haveI : Fact (m ≤ m0) := ⟨hm⟩\n  have h_mem : indicatorConstLp 2 (hm s hs) hμs c ∈ lpMeas E 𝕜 m 2 μ :=\n    mem_lpMeas_indicatorConstLp hm hs hμs\n  let ind := (⟨indicatorConstLp 2 (hm s hs) hμs c, h_mem⟩ : lpMeas E 𝕜 m 2 μ)\n  have h_coe_ind : (ind : α →₂[μ] E) = indicatorConstLp 2 (hm s hs) hμs c := rfl\n  have h_orth_mem := orthogonalProjection_mem_subspace_eq_self ind\n  rw [← h_coe_ind, h_orth_mem]\n\n"}
{"name":"MeasureTheory.condexpL2_indicator_of_measurable","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : E\n⊢ Eq (↑((MeasureTheory.condExpL2 E 𝕜 hm) (MeasureTheory.indicatorConstLp 2 ⋯ hμs c))) (MeasureTheory.indicatorConstLp 2 ⋯ hμs c)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL2_indicator_of_measurable := condExpL2_indicator_of_measurable\n\n"}
{"name":"MeasureTheory.inner_condExpL2_eq_inner_fun","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\nhg : MeasureTheory.AEStronglyMeasurable (↑↑g) μ\n⊢ Eq (Inner.inner (↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) g) (Inner.inner f g)","decl":"theorem inner_condExpL2_eq_inner_fun (hm : m ≤ m0) (f g : α →₂[μ] E)\n    (hg : AEStronglyMeasurable[m] g μ) :\n    ⟪(condExpL2 E 𝕜 hm f : α →₂[μ] E), g⟫₂ = ⟪f, g⟫₂ := by\n  symm\n  rw [← sub_eq_zero, ← inner_sub_left, condExpL2]\n  simp only [mem_lpMeas_iff_aeStronglyMeasurable.mpr hg, orthogonalProjection_inner_eq_zero f g]\n\n"}
{"name":"MeasureTheory.inner_condexpL2_eq_inner_fun","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\nhg : MeasureTheory.AEStronglyMeasurable (↑↑g) μ\n⊢ Eq (Inner.inner (↑((MeasureTheory.condExpL2 E 𝕜 hm) f)) g) (Inner.inner f g)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias inner_condexpL2_eq_inner_fun := inner_condExpL2_eq_inner_fun\n\n"}
{"name":"MeasureTheory.integral_condExpL2_eq_of_fin_meas_real","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\n𝕜 : Type u_7\ninst✝ : RCLike 𝕜\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp 𝕜 2 μ) x\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑↑((MeasureTheory.condExpL2 𝕜 𝕜 hm) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"theorem integral_condExpL2_eq_of_fin_meas_real (f : Lp 𝕜 2 μ) (hs : MeasurableSet[m] s)\n    (hμs : μ s ≠ ∞) : ∫ x in s, (condExpL2 𝕜 𝕜 hm f : α → 𝕜) x ∂μ = ∫ x in s, f x ∂μ := by\n  rw [← L2.inner_indicatorConstLp_one (𝕜 := 𝕜) (hm s hs) hμs f]\n  have h_eq_inner : ∫ x in s, (condExpL2 𝕜 𝕜 hm f : α → 𝕜) x ∂μ =\n      inner (indicatorConstLp 2 (hm s hs) hμs (1 : 𝕜)) (condExpL2 𝕜 𝕜 hm f) := by\n    rw [L2.inner_indicatorConstLp_one (hm s hs) hμs]\n  rw [h_eq_inner, ← inner_condExpL2_left_eq_right, condExpL2_indicator_of_measurable hm hs hμs]\n\n"}
{"name":"MeasureTheory.integral_condexpL2_eq_of_fin_meas_real","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\n𝕜 : Type u_7\ninst✝ : RCLike 𝕜\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp 𝕜 2 μ) x\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑↑((MeasureTheory.condExpL2 𝕜 𝕜 hm) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"@[deprecated (since := \"2025-01-21\")]\nalias integral_condexpL2_eq_of_fin_meas_real := integral_condExpL2_eq_of_fin_meas_real\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condExpL2_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp Real 2 μ) x\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict s) fun x => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 Real Real hm) f) x))) (MeasureTheory.lintegral (μ.restrict s) fun x => ↑(NNNorm.nnnorm (↑↑f x)))","decl":"theorem lintegral_nnnorm_condExpL2_le (hs : MeasurableSet[m] s) (hμs : μ s ≠ ∞) (f : Lp ℝ 2 μ) :\n    ∫⁻ x in s, ‖(condExpL2 ℝ ℝ hm f : α → ℝ) x‖₊ ∂μ ≤ ∫⁻ x in s, ‖f x‖₊ ∂μ := by\n  let h_meas := lpMeas.aeStronglyMeasurable (condExpL2 ℝ ℝ hm f)\n  let g := h_meas.choose\n  have hg_meas : StronglyMeasurable[m] g := h_meas.choose_spec.1\n  have hg_eq : g =ᵐ[μ] condExpL2 ℝ ℝ hm f := h_meas.choose_spec.2.symm\n  have hg_eq_restrict : g =ᵐ[μ.restrict s] condExpL2 ℝ ℝ hm f := ae_restrict_of_ae hg_eq\n  have hg_nnnorm_eq : (fun x => (‖g x‖₊ : ℝ≥0∞)) =ᵐ[μ.restrict s] fun x =>\n      (‖(condExpL2 ℝ ℝ hm f : α → ℝ) x‖₊ : ℝ≥0∞) := by\n    refine hg_eq_restrict.mono fun x hx => ?_\n    dsimp only\n    simp_rw [hx]\n  rw [lintegral_congr_ae hg_nnnorm_eq.symm]\n  refine lintegral_enorm_le_of_forall_fin_meas_integral_eq\n    hm (Lp.stronglyMeasurable f) ?_ ?_ ?_ ?_ hs hμs\n  · exact integrableOn_Lp_of_measure_ne_top f fact_one_le_two_ennreal.elim hμs\n  · exact hg_meas\n  · rw [IntegrableOn, integrable_congr hg_eq_restrict]\n    exact integrableOn_condExpL2_of_measure_ne_top hm hμs f\n  · intro t ht hμt\n    rw [← integral_condExpL2_eq_of_fin_meas_real f ht hμt.ne]\n    exact setIntegral_congr_ae (hm t ht) (hg_eq.mono fun x hx _ => hx)\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condexpL2_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp Real 2 μ) x\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict s) fun x => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 Real Real hm) f) x))) (MeasureTheory.lintegral (μ.restrict s) fun x => ↑(NNNorm.nnnorm (↑↑f x)))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias lintegral_nnnorm_condexpL2_le := lintegral_nnnorm_condExpL2_le\n\n"}
{"name":"MeasureTheory.condExpL2_ae_eq_zero_of_ae_eq_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp Real 2 μ) x\nhf : (MeasureTheory.ae (μ.restrict s)).EventuallyEq (↑↑f) 0\n⊢ (MeasureTheory.ae (μ.restrict s)).EventuallyEq (↑↑↑((MeasureTheory.condExpL2 Real Real hm) f)) 0","decl":"theorem condExpL2_ae_eq_zero_of_ae_eq_zero (hs : MeasurableSet[m] s) (hμs : μ s ≠ ∞) {f : Lp ℝ 2 μ}\n    (hf : f =ᵐ[μ.restrict s] 0) : condExpL2 ℝ ℝ hm f =ᵐ[μ.restrict s] (0 : α → ℝ) := by\n  suffices h_nnnorm_eq_zero : ∫⁻ x in s, ‖(condExpL2 ℝ ℝ hm f : α → ℝ) x‖₊ ∂μ = 0 by\n    rw [lintegral_eq_zero_iff] at h_nnnorm_eq_zero\n    · refine h_nnnorm_eq_zero.mono fun x hx => ?_\n      dsimp only at hx\n      rw [Pi.zero_apply] at hx ⊢\n      · rwa [ENNReal.coe_eq_zero, nnnorm_eq_zero] at hx\n    · refine Measurable.coe_nnreal_ennreal (Measurable.nnnorm ?_)\n      rw [lpMeas_coe]\n      exact (Lp.stronglyMeasurable _).measurable\n  refine le_antisymm ?_ (zero_le _)\n  refine (lintegral_nnnorm_condExpL2_le hs hμs f).trans (le_of_eq ?_)\n  rw [lintegral_eq_zero_iff]\n  · refine hf.mono fun x hx => ?_\n    dsimp only\n    rw [hx]\n    simp\n  · exact (Lp.stronglyMeasurable _).enorm\n\n"}
{"name":"MeasureTheory.condexpL2_ae_eq_zero_of_ae_eq_zero","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp Real 2 μ) x\nhf : (MeasureTheory.ae (μ.restrict s)).EventuallyEq (↑↑f) 0\n⊢ (MeasureTheory.ae (μ.restrict s)).EventuallyEq (↑↑↑((MeasureTheory.condExpL2 Real Real hm) f)) 0","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL2_ae_eq_zero_of_ae_eq_zero := condExpL2_ae_eq_zero_of_ae_eq_zero\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condExpL2_indicator_le_real","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict t) fun a => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)) a))) (μ (Inter.inter s t))","decl":"theorem lintegral_nnnorm_condExpL2_indicator_le_real (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (ht : MeasurableSet[m] t) (hμt : μ t ≠ ∞) :\n    ∫⁻ a in t, ‖(condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) a‖₊ ∂μ ≤ μ (s ∩ t) := by\n  refine (lintegral_nnnorm_condExpL2_le ht hμt _).trans (le_of_eq ?_)\n  have h_eq :\n    ∫⁻ x in t, ‖(indicatorConstLp 2 hs hμs (1 : ℝ)) x‖₊ ∂μ =\n      ∫⁻ x in t, s.indicator (fun _ => (1 : ℝ≥0∞)) x ∂μ := by\n    refine lintegral_congr_ae (ae_restrict_of_ae ?_)\n    refine (@indicatorConstLp_coeFn _ _ _ 2 _ _ _ hs hμs (1 : ℝ)).mono fun x hx => ?_\n    dsimp only\n    rw [hx]\n    classical\n    simp_rw [Set.indicator_apply]\n    split_ifs <;> simp\n  rw [h_eq, lintegral_indicator hs, lintegral_const, Measure.restrict_restrict hs]\n  simp only [one_mul, Set.univ_inter, MeasurableSet.univ, Measure.restrict_apply]\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condexpL2_indicator_le_real","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict t) fun a => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)) a))) (μ (Inter.inter s t))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias lintegral_nnnorm_condexpL2_indicator_le_real := lintegral_nnnorm_condExpL2_indicator_le_real\n\n"}
{"name":"MeasureTheory.condExpL2_const_inner","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\nc : E\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑↑((MeasureTheory.condExpL2 𝕜 𝕜 hm) (MeasureTheory.Memℒp.toLp (fun a => Inner.inner c (↑↑f a)) ⋯)) fun a => Inner.inner c (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f) a)","decl":"/-- `condExpL2` commutes with taking inner products with constants. See the lemma\n`condExpL2_comp_continuousLinearMap` for a more general result about commuting with continuous\nlinear maps. -/\ntheorem condExpL2_const_inner (hm : m ≤ m0) (f : Lp E 2 μ) (c : E) :\n    condExpL2 𝕜 𝕜 hm (((Lp.memℒp f).const_inner c).toLp fun a => ⟪c, f a⟫) =ᵐ[μ]\n    fun a => ⟪c, (condExpL2 E 𝕜 hm f : α → E) a⟫ := by\n  rw [lpMeas_coe]\n  have h_mem_Lp : Memℒp (fun a => ⟪c, (condExpL2 E 𝕜 hm f : α → E) a⟫) 2 μ := by\n    refine Memℒp.const_inner _ ?_; rw [lpMeas_coe]; exact Lp.memℒp _\n  have h_eq : h_mem_Lp.toLp _ =ᵐ[μ] fun a => ⟪c, (condExpL2 E 𝕜 hm f : α → E) a⟫ :=\n    h_mem_Lp.coeFn_toLp\n  refine EventuallyEq.trans ?_ h_eq\n  refine Lp.ae_eq_of_forall_setIntegral_eq' 𝕜 hm _ _ two_ne_zero ENNReal.coe_ne_top\n    (fun s _ hμs => integrableOn_condExpL2_of_measure_ne_top hm hμs.ne _) ?_ ?_ ?_ ?_\n  · intro s _ hμs\n    rw [IntegrableOn, integrable_congr (ae_restrict_of_ae h_eq)]\n    exact (integrableOn_condExpL2_of_measure_ne_top hm hμs.ne _).const_inner _\n  · intro s hs hμs\n    rw [← lpMeas_coe, integral_condExpL2_eq_of_fin_meas_real _ hs hμs.ne,\n      integral_congr_ae (ae_restrict_of_ae h_eq), lpMeas_coe, ←\n      L2.inner_indicatorConstLp_eq_setIntegral_inner 𝕜 (↑(condExpL2 E 𝕜 hm f)) (hm s hs) c hμs.ne,\n      ← inner_condExpL2_left_eq_right, condExpL2_indicator_of_measurable _ hs,\n      L2.inner_indicatorConstLp_eq_setIntegral_inner 𝕜 f (hm s hs) c hμs.ne,\n      setIntegral_congr_ae (hm s hs)\n        ((Memℒp.coeFn_toLp ((Lp.memℒp f).const_inner c)).mono fun x hx _ => hx)]\n  · rw [← lpMeas_coe]; exact lpMeas.aeStronglyMeasurable _\n  · refine AEStronglyMeasurable.congr ?_ h_eq.symm\n    exact (lpMeas.aeStronglyMeasurable _).const_inner\n\n"}
{"name":"MeasureTheory.condexpL2_const_inner","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_7\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : CompleteSpace E\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E 2 μ) x\nc : E\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑↑((MeasureTheory.condExpL2 𝕜 𝕜 hm) (MeasureTheory.Memℒp.toLp (fun a => Inner.inner c (↑↑f a)) ⋯)) fun a => Inner.inner c (↑↑↑((MeasureTheory.condExpL2 E 𝕜 hm) f) a)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL2_const_inner := condExpL2_const_inner\n\n"}
{"name":"MeasureTheory.integral_condExpL2_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E' 2 μ) x\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"/-- `condExpL2` verifies the equality of integrals defining the conditional expectation. -/\ntheorem integral_condExpL2_eq (hm : m ≤ m0) (f : Lp E' 2 μ) (hs : MeasurableSet[m] s)\n    (hμs : μ s ≠ ∞) : ∫ x in s, (condExpL2 E' 𝕜 hm f : α → E') x ∂μ = ∫ x in s, f x ∂μ := by\n  rw [← sub_eq_zero, lpMeas_coe, ←\n    integral_sub' (integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs)\n      (integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs)]\n  refine integral_eq_zero_of_forall_integral_inner_eq_zero 𝕜 _ ?_ ?_\n  · rw [integrable_congr (ae_restrict_of_ae (Lp.coeFn_sub (↑(condExpL2 E' 𝕜 hm f)) f).symm)]\n    exact integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs\n  intro c\n  simp_rw [Pi.sub_apply, inner_sub_right]\n  rw [integral_sub\n      ((integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs).const_inner c)\n      ((integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs).const_inner c)]\n  have h_ae_eq_f := Memℒp.coeFn_toLp (E := 𝕜) ((Lp.memℒp f).const_inner c)\n  rw [← lpMeas_coe, sub_eq_zero, ←\n    setIntegral_congr_ae (hm s hs) ((condExpL2_const_inner hm f c).mono fun x hx _ => hx), ←\n    setIntegral_congr_ae (hm s hs) (h_ae_eq_f.mono fun x hx _ => hx)]\n  exact integral_condExpL2_eq_of_fin_meas_real _ hs hμs\n\n"}
{"name":"MeasureTheory.integral_condexpL2_eq","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E' 2 μ) x\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) f) x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x)","decl":"@[deprecated (since := \"2025-01-21\")] alias integral_condexpL2_eq := integral_condExpL2_eq\n\n"}
{"name":"MeasureTheory.condExpL2_comp_continuousLinearMap","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁹ : RCLike 𝕜\ninst✝⁸ : NormedAddCommGroup E'\ninst✝⁷ : InnerProductSpace 𝕜 E'\ninst✝⁶ : CompleteSpace E'\ninst✝⁵ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE'' : Type u_8\n𝕜' : Type u_9\ninst✝⁴ : RCLike 𝕜'\ninst✝³ : NormedAddCommGroup E''\ninst✝² : InnerProductSpace 𝕜' E''\ninst✝¹ : CompleteSpace E''\ninst✝ : NormedSpace Real E''\nhm : LE.le m m0\nT : ContinuousLinearMap (RingHom.id Real) E' E''\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E' 2 μ) x\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑↑((MeasureTheory.condExpL2 E'' 𝕜' hm) (T.compLp f)) ↑↑(T.compLp ↑((MeasureTheory.condExpL2 E' 𝕜 hm) f))","decl":"theorem condExpL2_comp_continuousLinearMap (hm : m ≤ m0) (T : E' →L[ℝ] E'') (f : α →₂[μ] E') :\n    (condExpL2 E'' 𝕜' hm (T.compLp f) : α →₂[μ] E'') =ᵐ[μ]\n    T.compLp (condExpL2 E' 𝕜 hm f : α →₂[μ] E') := by\n  refine Lp.ae_eq_of_forall_setIntegral_eq' 𝕜' hm _ _ two_ne_zero ENNReal.coe_ne_top\n    (fun s _ hμs => integrableOn_condExpL2_of_measure_ne_top hm hμs.ne _) (fun s _ hμs =>\n      integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs.ne) ?_ ?_ ?_\n  · intro s hs hμs\n    rw [T.setIntegral_compLp _ (hm s hs),\n      T.integral_comp_comm\n        (integrableOn_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hμs.ne),\n      ← lpMeas_coe, ← lpMeas_coe, integral_condExpL2_eq hm f hs hμs.ne,\n      integral_condExpL2_eq hm (T.compLp f) hs hμs.ne, T.setIntegral_compLp _ (hm s hs),\n      T.integral_comp_comm\n        (integrableOn_Lp_of_measure_ne_top f fact_one_le_two_ennreal.elim hμs.ne)]\n  · rw [← lpMeas_coe]; exact lpMeas.aeStronglyMeasurable _\n  · have h_coe := T.coeFn_compLp (condExpL2 E' 𝕜 hm f : α →₂[μ] E')\n    rw [← EventuallyEq] at h_coe\n    refine AEStronglyMeasurable.congr ?_ h_coe.symm\n    exact T.continuous.comp_aestronglyMeasurable (lpMeas.aeStronglyMeasurable (condExpL2 E' 𝕜 hm f))\n\n"}
{"name":"MeasureTheory.condexpL2_comp_continuousLinearMap","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁹ : RCLike 𝕜\ninst✝⁸ : NormedAddCommGroup E'\ninst✝⁷ : InnerProductSpace 𝕜 E'\ninst✝⁶ : CompleteSpace E'\ninst✝⁵ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE'' : Type u_8\n𝕜' : Type u_9\ninst✝⁴ : RCLike 𝕜'\ninst✝³ : NormedAddCommGroup E''\ninst✝² : InnerProductSpace 𝕜' E''\ninst✝¹ : CompleteSpace E''\ninst✝ : NormedSpace Real E''\nhm : LE.le m m0\nT : ContinuousLinearMap (RingHom.id Real) E' E''\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E' 2 μ) x\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑↑((MeasureTheory.condExpL2 E'' 𝕜' hm) (T.compLp f)) ↑↑(T.compLp ↑((MeasureTheory.condExpL2 E' 𝕜 hm) f))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL2_comp_continuousLinearMap := condExpL2_comp_continuousLinearMap\n\n"}
{"name":"MeasureTheory.condExpL2_indicator_ae_eq_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x)) fun a => HSMul.hSMul (↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)) a) x","decl":"theorem condExpL2_indicator_ae_eq_smul (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (x : E') :\n    condExpL2 E' 𝕜 hm (indicatorConstLp 2 hs hμs x) =ᵐ[μ] fun a =>\n      (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs (1 : ℝ)) : α → ℝ) a • x := by\n  rw [indicatorConstLp_eq_toSpanSingleton_compLp hs hμs x]\n  have h_comp :=\n    condExpL2_comp_continuousLinearMap ℝ 𝕜 hm (toSpanSingleton ℝ x)\n      (indicatorConstLp 2 hs hμs (1 : ℝ))\n  rw [← lpMeas_coe] at h_comp\n  refine h_comp.trans ?_\n  exact (toSpanSingleton ℝ x).coeFn_compLp _\n\n"}
{"name":"MeasureTheory.condexpL2_indicator_ae_eq_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x)) fun a => HSMul.hSMul (↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)) a) x","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL2_indicator_ae_eq_smul := condExpL2_indicator_ae_eq_smul\n\n"}
{"name":"MeasureTheory.condExpL2_indicator_eq_toSpanSingleton_comp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\n⊢ Eq (↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x))) ((ContinuousLinearMap.toSpanSingleton Real x).compLp ↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)))","decl":"theorem condExpL2_indicator_eq_toSpanSingleton_comp (hm : m ≤ m0) (hs : MeasurableSet s)\n    (hμs : μ s ≠ ∞) (x : E') : (condExpL2 E' 𝕜 hm (indicatorConstLp 2 hs hμs x) : α →₂[μ] E') =\n    (toSpanSingleton ℝ x).compLp (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1)) := by\n  ext1\n  rw [← lpMeas_coe]\n  refine (condExpL2_indicator_ae_eq_smul 𝕜 hm hs hμs x).trans ?_\n  have h_comp := (toSpanSingleton ℝ x).coeFn_compLp\n    (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α →₂[μ] ℝ)\n  rw [← EventuallyEq] at h_comp\n  refine EventuallyEq.trans ?_ h_comp.symm\n  filter_upwards with y using rfl\n\n"}
{"name":"MeasureTheory.condexpL2_indicator_eq_toSpanSingleton_comp","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\n⊢ Eq (↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x))) ((ContinuousLinearMap.toSpanSingleton Real x).compLp ↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias condexpL2_indicator_eq_toSpanSingleton_comp := condExpL2_indicator_eq_toSpanSingleton_comp\n\n"}
{"name":"MeasureTheory.setLIntegral_nnnorm_condExpL2_indicator_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict t) fun a => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x)) a))) (HMul.hMul (μ (Inter.inter s t)) ↑(NNNorm.nnnorm x))","decl":"theorem setLIntegral_nnnorm_condExpL2_indicator_le (hm : m ≤ m0) (hs : MeasurableSet s)\n    (hμs : μ s ≠ ∞) (x : E') {t : Set α} (ht : MeasurableSet[m] t) (hμt : μ t ≠ ∞) :\n    ∫⁻ a in t, ‖(condExpL2 E' 𝕜 hm (indicatorConstLp 2 hs hμs x) : α → E') a‖₊ ∂μ ≤\n    μ (s ∩ t) * ‖x‖₊ :=\n  calc\n    ∫⁻ a in t, ‖(condExpL2 E' 𝕜 hm (indicatorConstLp 2 hs hμs x) : α → E') a‖₊ ∂μ =\n        ∫⁻ a in t, ‖(condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) a • x‖₊ ∂μ :=\n      setLIntegral_congr_fun (hm t ht)\n        ((condExpL2_indicator_ae_eq_smul 𝕜 hm hs hμs x).mono fun a ha _ => by rw [ha])\n    _ = (∫⁻ a in t, ‖(condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) a‖₊ ∂μ) * ‖x‖₊ := by\n      simp_rw [nnnorm_smul, ENNReal.coe_mul]\n      rw [lintegral_mul_const, lpMeas_coe]\n      exact (Lp.stronglyMeasurable _).enorm\n    _ ≤ μ (s ∩ t) * ‖x‖₊ :=\n      mul_le_mul_right' (lintegral_nnnorm_condExpL2_indicator_le_real hs hμs ht hμt) _\n\n"}
{"name":"MeasureTheory.setLIntegral_nnnorm_condexpL2_indicator_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E'\ninst✝² : InnerProductSpace 𝕜 E'\ninst✝¹ : CompleteSpace E'\ninst✝ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict t) fun a => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x)) a))) (HMul.hMul (μ (Inter.inter s t)) ↑(NNNorm.nnnorm x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias setLIntegral_nnnorm_condexpL2_indicator_le := setLIntegral_nnnorm_condExpL2_indicator_le\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condExpL2_indicator_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : InnerProductSpace 𝕜 E'\ninst✝² : CompleteSpace E'\ninst✝¹ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ LE.le (MeasureTheory.lintegral μ fun a => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x)) a))) (HMul.hMul (μ s) ↑(NNNorm.nnnorm x))","decl":"theorem lintegral_nnnorm_condExpL2_indicator_le (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (x : E') [SigmaFinite (μ.trim hm)] :\n    ∫⁻ a, ‖(condExpL2 E' 𝕜 hm (indicatorConstLp 2 hs hμs x) : α → E') a‖₊ ∂μ ≤ μ s * ‖x‖₊ := by\n  refine lintegral_le_of_forall_fin_meas_trim_le hm (μ s * ‖x‖₊) fun t ht hμt => ?_\n  refine (setLIntegral_nnnorm_condExpL2_indicator_le hm hs hμs x ht hμt).trans ?_\n  gcongr\n  apply Set.inter_subset_left\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condexpL2_indicator_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : InnerProductSpace 𝕜 E'\ninst✝² : CompleteSpace E'\ninst✝¹ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ LE.le (MeasureTheory.lintegral μ fun a => ↑(NNNorm.nnnorm (↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x)) a))) (HMul.hMul (μ s) ↑(NNNorm.nnnorm x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias lintegral_nnnorm_condexpL2_indicator_le := lintegral_nnnorm_condExpL2_indicator_le\n\n"}
{"name":"MeasureTheory.integrable_condExpL2_indicator","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : InnerProductSpace 𝕜 E'\ninst✝² : CompleteSpace E'\ninst✝¹ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\n⊢ MeasureTheory.Integrable (↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x))) μ","decl":"/-- If the measure `μ.trim hm` is sigma-finite, then the conditional expectation of a measurable set\nwith finite measure is integrable. -/\ntheorem integrable_condExpL2_indicator (hm : m ≤ m0) [SigmaFinite (μ.trim hm)]\n    (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : E') :\n    Integrable (ε := E') (condExpL2 E' 𝕜 hm (indicatorConstLp 2 hs hμs x)) μ := by\n  refine integrable_of_forall_fin_meas_le' hm (μ s * ‖x‖₊)\n    (ENNReal.mul_lt_top hμs.lt_top ENNReal.coe_lt_top) ?_ ?_\n  · rw [lpMeas_coe]; exact Lp.aestronglyMeasurable _\n  · refine fun t ht hμt =>\n      (setLIntegral_nnnorm_condExpL2_indicator_le hm hs hμs x ht hμt).trans ?_\n    gcongr\n    apply Set.inter_subset_left\n\n"}
{"name":"MeasureTheory.integrable_condexpL2_indicator","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nE' : Type u_3\n𝕜 : Type u_7\ninst✝⁵ : RCLike 𝕜\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : InnerProductSpace 𝕜 E'\ninst✝² : CompleteSpace E'\ninst✝¹ : NormedSpace Real E'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E'\n⊢ MeasureTheory.Integrable (↑↑↑((MeasureTheory.condExpL2 E' 𝕜 hm) (MeasureTheory.indicatorConstLp 2 hs hμs x))) μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias integrable_condexpL2_indicator := integrable_condExpL2_indicator\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_condExpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)) μ","decl":"theorem aestronglyMeasurable_condExpIndSMul (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (x : G) : AEStronglyMeasurable[m] (condExpIndSMul hm hs hμs x) μ := by\n  have h : AEStronglyMeasurable[m] (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) μ :=\n    aestronglyMeasurable_condExpL2 _ _\n  rw [condExpIndSMul]\n  exact ((toSpanSingleton ℝ x).continuous.comp_aestronglyMeasurable h).congr\n    (coeFn_compLpL _ _).symm\n\n"}
{"name":"MeasureTheory.aeStronglyMeasurable'_condExpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)) μ","decl":"@[deprecated (since := \"2025-01-24\")]\nalias aeStronglyMeasurable'_condExpIndSMul := aestronglyMeasurable_condExpIndSMul\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable'_condexpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)) μ","decl":"@[deprecated (since := \"2025-01-21\")]\nalias aestronglyMeasurable'_condexpIndSMul := aestronglyMeasurable_condExpIndSMul\n\n"}
{"name":"MeasureTheory.condExpIndSMul_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx y : G\n⊢ Eq (MeasureTheory.condExpIndSMul hm hs hμs (HAdd.hAdd x y)) (HAdd.hAdd (MeasureTheory.condExpIndSMul hm hs hμs x) (MeasureTheory.condExpIndSMul hm hs hμs y))","decl":"theorem condExpIndSMul_add (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x y : G) :\n    condExpIndSMul hm hs hμs (x + y) = condExpIndSMul hm hs hμs x + condExpIndSMul hm hs hμs y := by\n  simp_rw [condExpIndSMul]; rw [toSpanSingleton_add, add_compLpL, add_apply]\n\n"}
{"name":"MeasureTheory.condexpIndSMul_add","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx y : G\n⊢ Eq (MeasureTheory.condExpIndSMul hm hs hμs (HAdd.hAdd x y)) (HAdd.hAdd (MeasureTheory.condExpIndSMul hm hs hμs x) (MeasureTheory.condExpIndSMul hm hs hμs y))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndSMul_add := condExpIndSMul_add\n\n"}
{"name":"MeasureTheory.condExpIndSMul_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : Real\nx : G\n⊢ Eq (MeasureTheory.condExpIndSMul hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndSMul hm hs hμs x))","decl":"theorem condExpIndSMul_smul (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (c : ℝ) (x : G) :\n    condExpIndSMul hm hs hμs (c • x) = c • condExpIndSMul hm hs hμs x := by\n  simp_rw [condExpIndSMul]; rw [toSpanSingleton_smul, smul_compLpL, smul_apply]\n\n"}
{"name":"MeasureTheory.condexpIndSMul_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : Real\nx : G\n⊢ Eq (MeasureTheory.condExpIndSMul hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndSMul hm hs hμs x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndSMul_smul := condExpIndSMul_smul\n\n"}
{"name":"MeasureTheory.condExpIndSMul_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nF : Type u_4\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : 𝕜\nx : F\n⊢ Eq (MeasureTheory.condExpIndSMul hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndSMul hm hs hμs x))","decl":"theorem condExpIndSMul_smul' [NormedSpace ℝ F] [SMulCommClass ℝ 𝕜 F] (hs : MeasurableSet s)\n    (hμs : μ s ≠ ∞) (c : 𝕜) (x : F) :\n    condExpIndSMul hm hs hμs (c • x) = c • condExpIndSMul hm hs hμs x := by\n  rw [condExpIndSMul, condExpIndSMul, toSpanSingleton_smul',\n    (toSpanSingleton ℝ x).smul_compLpL c, smul_apply]\n\n"}
{"name":"MeasureTheory.condexpIndSMul_smul'","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nF : Type u_4\n𝕜 : Type u_7\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\ninst✝¹ : NormedSpace Real F\ninst✝ : SMulCommClass Real 𝕜 F\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nc : 𝕜\nx : F\n⊢ Eq (MeasureTheory.condExpIndSMul hm hs hμs (HSMul.hSMul c x)) (HSMul.hSMul c (MeasureTheory.condExpIndSMul hm hs hμs x))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndSMul_smul' := condExpIndSMul_smul'\n\n"}
{"name":"MeasureTheory.condExpIndSMul_ae_eq_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x) fun a => HSMul.hSMul (↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)) a) x","decl":"theorem condExpIndSMul_ae_eq_smul (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : G) :\n    condExpIndSMul hm hs hμs x =ᵐ[μ] fun a =>\n      (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) a • x :=\n  (toSpanSingleton ℝ x).coeFn_compLpL _\n\n"}
{"name":"MeasureTheory.condexpIndSMul_ae_eq_smul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x) fun a => HSMul.hSMul (↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1)) a) x","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndSMul_ae_eq_smul := condExpIndSMul_ae_eq_smul\n\n"}
{"name":"MeasureTheory.setLIntegral_nnnorm_condExpIndSMul_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict t) fun a => ↑(NNNorm.nnnorm (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x) a))) (HMul.hMul (μ (Inter.inter s t)) ↑(NNNorm.nnnorm x))","decl":"theorem setLIntegral_nnnorm_condExpIndSMul_le (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (x : G) {t : Set α} (ht : MeasurableSet[m] t) (hμt : μ t ≠ ∞) :\n    (∫⁻ a in t, ‖condExpIndSMul hm hs hμs x a‖₊ ∂μ) ≤ μ (s ∩ t) * ‖x‖₊ :=\n  calc\n    ∫⁻ a in t, ‖condExpIndSMul hm hs hμs x a‖₊ ∂μ =\n        ∫⁻ a in t, ‖(condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) a • x‖₊ ∂μ :=\n      setLIntegral_congr_fun (hm t ht)\n        ((condExpIndSMul_ae_eq_smul hm hs hμs x).mono fun a ha _ => by rw [ha])\n    _ = (∫⁻ a in t, ‖(condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) a‖₊ ∂μ) * ‖x‖₊ := by\n      simp_rw [nnnorm_smul, ENNReal.coe_mul]\n      rw [lintegral_mul_const, lpMeas_coe]\n      exact (Lp.stronglyMeasurable _).enorm\n    _ ≤ μ (s ∩ t) * ‖x‖₊ :=\n      mul_le_mul_right' (lintegral_nnnorm_condExpL2_indicator_le_real hs hμs ht hμt) _\n\n"}
{"name":"MeasureTheory.setLIntegral_nnnorm_condexpIndSMul_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ LE.le (MeasureTheory.lintegral (μ.restrict t) fun a => ↑(NNNorm.nnnorm (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x) a))) (HMul.hMul (μ (Inter.inter s t)) ↑(NNNorm.nnnorm x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias setLIntegral_nnnorm_condexpIndSMul_le := setLIntegral_nnnorm_condExpIndSMul_le\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condExpIndSMul_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ LE.le (MeasureTheory.lintegral μ fun a => ↑(NNNorm.nnnorm (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x) a))) (HMul.hMul (μ s) ↑(NNNorm.nnnorm x))","decl":"theorem lintegral_nnnorm_condExpIndSMul_le (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    (x : G) [SigmaFinite (μ.trim hm)] : ∫⁻ a, ‖condExpIndSMul hm hs hμs x a‖₊ ∂μ ≤ μ s * ‖x‖₊ := by\n  refine lintegral_le_of_forall_fin_meas_trim_le hm (μ s * ‖x‖₊) fun t ht hμt => ?_\n  refine (setLIntegral_nnnorm_condExpIndSMul_le hm hs hμs x ht hμt).trans ?_\n  gcongr\n  apply Set.inter_subset_left\n\n"}
{"name":"MeasureTheory.lintegral_nnnorm_condexpIndSMul_le","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ LE.le (MeasureTheory.lintegral μ fun a => ↑(NNNorm.nnnorm (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x) a))) (HMul.hMul (μ s) ↑(NNNorm.nnnorm x))","decl":"@[deprecated (since := \"2025-01-21\")]\nalias lintegral_nnnorm_condexpIndSMul_le := lintegral_nnnorm_condExpIndSMul_le\n\n"}
{"name":"MeasureTheory.integrable_condExpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.Integrable (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)) μ","decl":"/-- If the measure `μ.trim hm` is sigma-finite, then the conditional expectation of a measurable set\nwith finite measure is integrable. -/\ntheorem integrable_condExpIndSMul (hm : m ≤ m0) [SigmaFinite (μ.trim hm)] (hs : MeasurableSet s)\n    (hμs : μ s ≠ ∞) (x : G) : Integrable (condExpIndSMul hm hs hμs x) μ := by\n  refine integrable_of_forall_fin_meas_le' hm (μ s * ‖x‖₊)\n    (ENNReal.mul_lt_top hμs.lt_top ENNReal.coe_lt_top) ?_ ?_\n  · exact Lp.aestronglyMeasurable _\n  · refine fun t ht hμt => (setLIntegral_nnnorm_condExpIndSMul_le hm hs hμs x ht hμt).trans ?_\n    gcongr\n    apply Set.inter_subset_left\n\n"}
{"name":"MeasureTheory.integrable_condexpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝² : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\ninst✝¹ : NormedSpace Real G\nhm : LE.le m m0\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : G\n⊢ MeasureTheory.Integrable (↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)) μ","decl":"@[deprecated (since := \"2025-01-21\")] alias integrable_condexpIndSMul := integrable_condExpIndSMul\n\n"}
{"name":"MeasureTheory.condExpIndSMul_empty","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nx : G\n⊢ Eq (MeasureTheory.condExpIndSMul hm ⋯ ⋯ x) 0","decl":"theorem condExpIndSMul_empty {x : G} : condExpIndSMul hm MeasurableSet.empty\n    ((measure_empty (μ := μ)).le.trans_lt ENNReal.coe_lt_top).ne x = 0 := by\n  rw [condExpIndSMul, indicatorConstLp_empty]\n  simp only [Submodule.coe_zero, ContinuousLinearMap.map_zero]\n\n"}
{"name":"MeasureTheory.condexpIndSMul_empty","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝¹ : NormedAddCommGroup G\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedSpace Real G\nhm : LE.le m m0\nx : G\n⊢ Eq (MeasureTheory.condExpIndSMul hm ⋯ ⋯ x) 0","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndSMul_empty := condExpIndSMul_empty\n\n"}
{"name":"MeasureTheory.setIntegral_condExpL2_indicator","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 ht hμt 1)) x) (μ (Inter.inter t s)).toReal","decl":"theorem setIntegral_condExpL2_indicator (hs : MeasurableSet[m] s) (ht : MeasurableSet t)\n    (hμs : μ s ≠ ∞) (hμt : μ t ≠ ∞) :\n    ∫ x in s, (condExpL2 ℝ ℝ hm (indicatorConstLp 2 ht hμt 1) : α → ℝ) x ∂μ = (μ (t ∩ s)).toReal :=\n  calc\n    ∫ x in s, (condExpL2 ℝ ℝ hm (indicatorConstLp 2 ht hμt 1) : α → ℝ) x ∂μ =\n        ∫ x in s, indicatorConstLp 2 ht hμt (1 : ℝ) x ∂μ :=\n      @integral_condExpL2_eq α _ ℝ _ _ _ _ _ _ _ _ _ hm (indicatorConstLp 2 ht hμt (1 : ℝ)) hs hμs\n    _ = (μ (t ∩ s)).toReal • (1 : ℝ) := setIntegral_indicatorConstLp (hm s hs) ht hμt 1\n    _ = (μ (t ∩ s)).toReal := by rw [smul_eq_mul, mul_one]\n\n"}
{"name":"MeasureTheory.setIntegral_condexpL2_indicator","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 ht hμt 1)) x) (μ (Inter.inter t s)).toReal","decl":"@[deprecated (since := \"2025-01-21\")]\nalias setIntegral_condexpL2_indicator := setIntegral_condExpL2_indicator\n\n"}
{"name":"MeasureTheory.setIntegral_condExpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG' : Type u_6\ninst✝² : NormedAddCommGroup G'\ninst✝¹ : NormedSpace Real G'\ninst✝ : CompleteSpace G'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nx : G'\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun a => ↑↑(MeasureTheory.condExpIndSMul hm ht hμt x) a) (HSMul.hSMul (μ (Inter.inter t s)).toReal x)","decl":"theorem setIntegral_condExpIndSMul (hs : MeasurableSet[m] s) (ht : MeasurableSet t)\n    (hμs : μ s ≠ ∞) (hμt : μ t ≠ ∞) (x : G') :\n    ∫ a in s, (condExpIndSMul hm ht hμt x) a ∂μ = (μ (t ∩ s)).toReal • x :=\n  calc\n    ∫ a in s, (condExpIndSMul hm ht hμt x) a ∂μ =\n        ∫ a in s, (condExpL2 ℝ ℝ hm (indicatorConstLp 2 ht hμt 1) : α → ℝ) a • x ∂μ :=\n      setIntegral_congr_ae (hm s hs)\n        ((condExpIndSMul_ae_eq_smul hm ht hμt x).mono fun _ hx _ => hx)\n    _ = (∫ a in s, (condExpL2 ℝ ℝ hm (indicatorConstLp 2 ht hμt 1) : α → ℝ) a ∂μ) • x :=\n      (integral_smul_const _ x)\n    _ = (μ (t ∩ s)).toReal • x := by rw [setIntegral_condExpL2_indicator hs ht hμs hμt]\n\n"}
{"name":"MeasureTheory.setIntegral_condexpIndSMul","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nG' : Type u_6\ninst✝² : NormedAddCommGroup G'\ninst✝¹ : NormedSpace Real G'\ninst✝ : CompleteSpace G'\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nht : MeasurableSet t\nhμs : Ne (μ s) Top.top\nhμt : Ne (μ t) Top.top\nx : G'\n⊢ Eq (MeasureTheory.integral (μ.restrict s) fun a => ↑↑(MeasureTheory.condExpIndSMul hm ht hμt x) a) (HSMul.hSMul (μ (Inter.inter t s)).toReal x)","decl":"@[deprecated (since := \"2025-01-21\")] alias setIntegral_condexpIndSMul := setIntegral_condExpIndSMul\n\n"}
{"name":"MeasureTheory.condExpL2_indicator_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 ↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1))","decl":"theorem condExpL2_indicator_nonneg (hm : m ≤ m0) (hs : MeasurableSet s) (hμs : μ s ≠ ∞)\n    [SigmaFinite (μ.trim hm)] : (0 : α → ℝ) ≤ᵐ[μ]\n    condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) := by\n  have h : AEStronglyMeasurable[m] (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) μ :=\n    aestronglyMeasurable_condExpL2 _ _\n  refine EventuallyLE.trans_eq ?_ h.ae_eq_mk.symm\n  refine @ae_le_of_ae_le_trim _ _ _ _ _ _ hm (0 : α → ℝ) _ ?_\n  refine ae_nonneg_of_forall_setIntegral_nonneg_of_sigmaFinite ?_ ?_\n  · rintro t - -\n    refine @Integrable.integrableOn _ _ m _ _ _ _ ?_\n    refine Integrable.trim hm ?_ ?_\n    · rw [integrable_congr h.ae_eq_mk.symm]\n      exact integrable_condExpL2_indicator hm hs hμs _\n    · exact h.stronglyMeasurable_mk\n  · intro t ht hμt\n    rw [← setIntegral_trim hm h.stronglyMeasurable_mk ht]\n    have h_ae :\n      ∀ᵐ x ∂μ, x ∈ t → h.mk _ x = (condExpL2 ℝ ℝ hm (indicatorConstLp 2 hs hμs 1) : α → ℝ) x := by\n      filter_upwards [h.ae_eq_mk] with x hx\n      exact fun _ => hx.symm\n    rw [setIntegral_congr_ae (hm t ht) h_ae,\n      setIntegral_condExpL2_indicator ht hs ((le_trim hm).trans_lt hμt).ne hμs]\n    exact ENNReal.toReal_nonneg\n\n"}
{"name":"MeasureTheory.condexpL2_indicator_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 ↑↑↑((MeasureTheory.condExpL2 Real Real hm) (MeasureTheory.indicatorConstLp 2 hs hμs 1))","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpL2_indicator_nonneg := condExpL2_indicator_nonneg\n\n"}
{"name":"MeasureTheory.condExpIndSMul_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nE : Type u_10\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : OrderedSMul Real E\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E\nhx : LE.le 0 x\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)","decl":"theorem condExpIndSMul_nonneg {E} [NormedLatticeAddCommGroup E] [NormedSpace ℝ E] [OrderedSMul ℝ E]\n    [SigmaFinite (μ.trim hm)] (hs : MeasurableSet s) (hμs : μ s ≠ ∞) (x : E) (hx : 0 ≤ x) :\n    (0 : α → E) ≤ᵐ[μ] condExpIndSMul hm hs hμs x := by\n  refine EventuallyLE.trans_eq ?_ (condExpIndSMul_ae_eq_smul hm hs hμs x).symm\n  filter_upwards [condExpL2_indicator_nonneg hm hs hμs] with a ha\n  exact smul_nonneg ha hx\n\n"}
{"name":"MeasureTheory.condexpIndSMul_nonneg","module":"Mathlib.MeasureTheory.Function.ConditionalExpectation.CondexpL2","initialProofState":"α : Type u_1\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nhm : LE.le m m0\nE : Type u_10\ninst✝³ : NormedLatticeAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : OrderedSMul Real E\ninst✝ : MeasureTheory.SigmaFinite (μ.trim hm)\nhs : MeasurableSet s\nhμs : Ne (μ s) Top.top\nx : E\nhx : LE.le 0 x\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 ↑↑(MeasureTheory.condExpIndSMul hm hs hμs x)","decl":"@[deprecated (since := \"2025-01-21\")] alias condexpIndSMul_nonneg := condExpIndSMul_nonneg\n\n"}
