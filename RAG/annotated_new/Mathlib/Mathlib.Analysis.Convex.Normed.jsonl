{"name":"convexOn_norm","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\nhs : Convex Real s\n⊢ ConvexOn Real s Norm.norm","decl":"/-- The norm on a real normed space is convex on any convex set. See also `Seminorm.convexOn`\nand `convexOn_univ_norm`. -/\ntheorem convexOn_norm (hs : Convex ℝ s) : ConvexOn ℝ s norm :=\n  ⟨hs, fun x _ y _ a b ha hb _ =>\n    calc\n      ‖a • x + b • y‖ ≤ ‖a • x‖ + ‖b • y‖ := norm_add_le _ _\n      _ = a * ‖x‖ + b * ‖y‖ := by\n        rw [norm_smul, norm_smul, Real.norm_of_nonneg ha, Real.norm_of_nonneg hb]⟩\n\n"}
{"name":"convexOn_univ_norm","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ ConvexOn Real Set.univ Norm.norm","decl":"/-- The norm on a real normed space is convex on the whole space. See also `Seminorm.convexOn`\nand `convexOn_norm`. -/\ntheorem convexOn_univ_norm : ConvexOn ℝ univ (norm : E → ℝ) :=\n  convexOn_norm convex_univ\n\n"}
{"name":"convexOn_dist","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\nz : E\nhs : Convex Real s\n⊢ ConvexOn Real s fun z' => Dist.dist z' z","decl":"theorem convexOn_dist (z : E) (hs : Convex ℝ s) : ConvexOn ℝ s fun z' => dist z' z := by\n  simpa [dist_eq_norm, preimage_preimage] using\n    (convexOn_norm (hs.translate (-z))).comp_affineMap (AffineMap.id ℝ E - AffineMap.const ℝ E z)\n\n"}
{"name":"convexOn_univ_dist","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nz : E\n⊢ ConvexOn Real Set.univ fun z' => Dist.dist z' z","decl":"theorem convexOn_univ_dist (z : E) : ConvexOn ℝ univ fun z' => dist z' z :=\n  convexOn_dist z convex_univ\n\n"}
{"name":"convex_ball","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\na : E\nr : Real\n⊢ Convex Real (Metric.ball a r)","decl":"theorem convex_ball (a : E) (r : ℝ) : Convex ℝ (Metric.ball a r) := by\n  simpa only [Metric.ball, sep_univ] using (convexOn_univ_dist a).convex_lt r\n\n"}
{"name":"convex_closedBall","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\na : E\nr : Real\n⊢ Convex Real (Metric.closedBall a r)","decl":"theorem convex_closedBall (a : E) (r : ℝ) : Convex ℝ (Metric.closedBall a r) := by\n  simpa only [Metric.closedBall, sep_univ] using (convexOn_univ_dist a).convex_le r\n\n"}
{"name":"Convex.thickening","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\nhs : Convex Real s\nδ : Real\n⊢ Convex Real (Metric.thickening δ s)","decl":"theorem Convex.thickening (hs : Convex ℝ s) (δ : ℝ) : Convex ℝ (thickening δ s) := by\n  rw [← add_ball_zero]\n  exact hs.add (convex_ball 0 _)\n\n"}
{"name":"Convex.cthickening","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\nhs : Convex Real s\nδ : Real\n⊢ Convex Real (Metric.cthickening δ s)","decl":"theorem Convex.cthickening (hs : Convex ℝ s) (δ : ℝ) : Convex ℝ (cthickening δ s) := by\n  obtain hδ | hδ := le_total 0 δ\n  · rw [cthickening_eq_iInter_thickening hδ]\n    exact convex_iInter₂ fun _ _ => hs.thickening _\n  · rw [cthickening_of_nonpos hδ]\n    exact hs.closure\n\n"}
{"name":"convexHull_exists_dist_ge","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\nx : E\nhx : Membership.mem ((convexHull Real) s) x\ny : E\n⊢ Exists fun x' => And (Membership.mem s x') (LE.le (Dist.dist x y) (Dist.dist x' y))","decl":"/-- Given a point `x` in the convex hull of `s` and a point `y`, there exists a point\nof `s` at distance at least `dist x y` from `y`. -/\ntheorem convexHull_exists_dist_ge {s : Set E} {x : E} (hx : x ∈ convexHull ℝ s) (y : E) :\n    ∃ x' ∈ s, dist x y ≤ dist x' y :=\n  (convexOn_dist y (convex_convexHull ℝ _)).exists_ge_of_mem_convexHull (subset_convexHull ..) hx\n\n"}
{"name":"convexHull_exists_dist_ge2","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns t : Set E\nx y : E\nhx : Membership.mem ((convexHull Real) s) x\nhy : Membership.mem ((convexHull Real) t) y\n⊢ Exists fun x' => And (Membership.mem s x') (Exists fun y' => And (Membership.mem t y') (LE.le (Dist.dist x y) (Dist.dist x' y')))","decl":"/-- Given a point `x` in the convex hull of `s` and a point `y` in the convex hull of `t`,\nthere exist points `x' ∈ s` and `y' ∈ t` at distance at least `dist x y`. -/\ntheorem convexHull_exists_dist_ge2 {s t : Set E} {x y : E} (hx : x ∈ convexHull ℝ s)\n    (hy : y ∈ convexHull ℝ t) : ∃ x' ∈ s, ∃ y' ∈ t, dist x y ≤ dist x' y' := by\n  rcases convexHull_exists_dist_ge hx y with ⟨x', hx', Hx'⟩\n  rcases convexHull_exists_dist_ge hy x' with ⟨y', hy', Hy'⟩\n  use x', hx', y', hy'\n  exact le_trans Hx' (dist_comm y x' ▸ dist_comm y' x' ▸ Hy')\n\n"}
{"name":"convexHull_ediam","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\n⊢ Eq (EMetric.diam ((convexHull Real) s)) (EMetric.diam s)","decl":"/-- Emetric diameter of the convex hull of a set `s` equals the emetric diameter of `s`. -/\n@[simp]\ntheorem convexHull_ediam (s : Set E) : EMetric.diam (convexHull ℝ s) = EMetric.diam s := by\n  refine (EMetric.diam_le fun x hx y hy => ?_).antisymm (EMetric.diam_mono <| subset_convexHull ℝ s)\n  rcases convexHull_exists_dist_ge2 hx hy with ⟨x', hx', y', hy', H⟩\n  rw [edist_dist]\n  apply le_trans (ENNReal.ofReal_le_ofReal H)\n  rw [← edist_dist]\n  exact EMetric.edist_le_diam_of_mem hx' hy'\n\n"}
{"name":"convexHull_diam","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\n⊢ Eq (Metric.diam ((convexHull Real) s)) (Metric.diam s)","decl":"/-- Diameter of the convex hull of a set `s` equals the emetric diameter of `s`. -/\n@[simp]\ntheorem convexHull_diam (s : Set E) : Metric.diam (convexHull ℝ s) = Metric.diam s := by\n  simp only [Metric.diam, convexHull_ediam]\n\n"}
{"name":"isBounded_convexHull","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\ns : Set E\n⊢ Iff (Bornology.IsBounded ((convexHull Real) s)) (Bornology.IsBounded s)","decl":"/-- Convex hull of `s` is bounded if and only if `s` is bounded. -/\n@[simp]\ntheorem isBounded_convexHull {s : Set E} :\n    Bornology.IsBounded (convexHull ℝ s) ↔ Bornology.IsBounded s := by\n  simp only [Metric.isBounded_iff_ediam_ne_top, convexHull_ediam]\n\n"}
{"name":"NormedSpace.instPathConnectedSpace","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\n⊢ PathConnectedSpace E","decl":"instance (priority := 100) NormedSpace.instPathConnectedSpace : PathConnectedSpace E :=\n  TopologicalAddGroup.pathConnectedSpace\n\n"}
{"name":"Wbtw.dist_add_dist","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\nP : Type u_2\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor E P\nx y z : P\nh : Wbtw Real x y z\n⊢ Eq (HAdd.hAdd (Dist.dist x y) (Dist.dist y z)) (Dist.dist x z)","decl":"theorem Wbtw.dist_add_dist {x y z : P} (h : Wbtw ℝ x y z) :\n    dist x y + dist y z = dist x z := by\n  obtain ⟨a, ⟨ha₀, ha₁⟩, rfl⟩ := h\n  simp [abs_of_nonneg, ha₀, ha₁, sub_mul]\n\n"}
{"name":"dist_add_dist_of_mem_segment","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y z : E\nh : Membership.mem (segment Real x z) y\n⊢ Eq (HAdd.hAdd (Dist.dist x y) (Dist.dist y z)) (Dist.dist x z)","decl":"theorem dist_add_dist_of_mem_segment {x y z : E} (h : y ∈ [x -[ℝ] z]) :\n    dist x y + dist y z = dist x z :=\n  (mem_segment_iff_wbtw.1 h).dist_add_dist\n\n"}
{"name":"isConnected_setOf_sameRay","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx : E\n⊢ IsConnected (setOf fun y => SameRay Real x y)","decl":"/-- The set of vectors in the same ray as `x` is connected. -/\ntheorem isConnected_setOf_sameRay (x : E) : IsConnected { y | SameRay ℝ x y } := by\n  by_cases hx : x = 0; · simpa [hx] using isConnected_univ (α := E)\n  simp_rw [← exists_nonneg_left_iff_sameRay hx]\n  exact isConnected_Ici.image _ (continuous_id.smul continuous_const).continuousOn\n\n"}
{"name":"isConnected_setOf_sameRay_and_ne_zero","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx : E\nhx : Ne x 0\n⊢ IsConnected (setOf fun y => And (SameRay Real x y) (Ne y 0))","decl":"/-- The set of nonzero vectors in the same ray as the nonzero vector `x` is connected. -/\ntheorem isConnected_setOf_sameRay_and_ne_zero {x : E} (hx : x ≠ 0) :\n    IsConnected { y | SameRay ℝ x y ∧ y ≠ 0 } := by\n  simp_rw [← exists_pos_left_iff_sameRay_and_ne_zero hx]\n  exact isConnected_Ioi.image _ (continuous_id.smul continuous_const).continuousOn\n\n"}
{"name":"exists_mem_interior_convexHull_affineBasis","module":"Mathlib.Analysis.Convex.Normed","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : FiniteDimensional Real E\ns : Set E\nx : E\nhs : Membership.mem (nhds x) s\n⊢ Exists fun b => And (Membership.mem (interior ((convexHull Real) (Set.range ⇑b))) x) (HasSubset.Subset ((convexHull Real) (Set.range ⇑b)) s)","decl":"/-- We can intercalate a simplex between a point and one of its neighborhoods. -/\nlemma exists_mem_interior_convexHull_affineBasis (hs : s ∈ 𝓝 x) :\n    ∃ b : AffineBasis (Fin (finrank ℝ E + 1)) ℝ E,\n      x ∈ interior (convexHull ℝ (range b)) ∧ convexHull ℝ (range b) ⊆ s := by\n  classical\n  -- By translating, WLOG `x` is the origin.\n  wlog hx : x = 0\n  · obtain ⟨b, hb⟩ := this (s := -x +ᵥ s) (by simpa using vadd_mem_nhds_vadd (-x) hs) rfl\n    use x +ᵥ b\n    simpa [subset_vadd_set_iff, mem_vadd_set_iff_neg_vadd_mem, convexHull_vadd, interior_vadd,\n      Pi.vadd_def, -vadd_eq_add, vadd_eq_add (a := -x), ← Set.vadd_set_range] using hb\n  subst hx\n  -- The strategy is now to find an arbitrary maximal spanning simplex (aka an affine basis)...\n  obtain ⟨b⟩ := exists_affineBasis_of_finiteDimensional\n    (ι := Fin (finrank ℝ E + 1)) (k := ℝ) (P := E) (by simp)\n  -- ... translate it to contain the origin...\n  set c : AffineBasis (Fin (finrank ℝ E + 1)) ℝ E := -Finset.univ.centroid ℝ b +ᵥ b\n  have hc₀ : 0 ∈ interior (convexHull ℝ (range c) : Set E) := by\n    simpa [c, convexHull_vadd, interior_vadd, range_add, Pi.vadd_def, mem_vadd_set_iff_neg_vadd_mem]\n      using b.centroid_mem_interior_convexHull\n  set cnorm := Finset.univ.sup' Finset.univ_nonempty (fun i ↦ ‖c i‖)\n  have hcnorm : range c ⊆ closedBall 0 (cnorm + 1) := by\n    simpa only [cnorm, subset_def, Finset.mem_coe, mem_closedBall, dist_zero_right,\n      ← sub_le_iff_le_add, Finset.le_sup'_iff, forall_mem_range] using fun i ↦ ⟨i, by simp⟩\n  -- ... and finally scale it to fit inside the neighborhood `s`.\n  obtain ⟨ε, hε, hεs⟩ := Metric.mem_nhds_iff.1 hs\n  set ε' : ℝ := ε / 2 / (cnorm + 1)\n  have hc' : 0 < cnorm + 1 := by\n    have : 0 ≤ cnorm := Finset.le_sup'_of_le _ (Finset.mem_univ 0) (norm_nonneg _)\n    positivity\n  have hε' : 0 < ε' := by positivity\n  set d : AffineBasis (Fin (finrank ℝ E + 1)) ℝ E := Units.mk0 ε' hε'.ne' • c\n  have hε₀ : 0 < ε / 2 := by positivity\n  have hdnorm : (range d : Set E) ⊆ closedBall 0 (ε / 2) := by\n    simp [d, Set.smul_set_subset_iff₀ hε'.ne', hε₀.le, _root_.smul_closedBall, abs_of_nonneg hε'.le,\n      range_subset_iff, norm_smul]\n    simpa [ε', hε₀.ne', range_subset_iff, ← mul_div_right_comm (ε / 2), div_le_iff₀ hc',\n      mul_le_mul_left hε₀] using hcnorm\n  refine ⟨d, ?_, ?_⟩\n  · simpa [d, Pi.smul_def, range_smul, interior_smul₀, convexHull_smul, zero_mem_smul_set_iff,\n      hε'.ne']\n  · calc\n      convexHull ℝ (range d) ⊆ closedBall 0 (ε / 2) := convexHull_min hdnorm (convex_closedBall ..)\n      _ ⊆ ball 0 ε := closedBall_subset_ball (by linarith)\n      _ ⊆ s := hεs\n\n"}
