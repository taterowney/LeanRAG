{"name":"continuous_thickenedIndicatorAux","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\n‚ä¢ Continuous (thickenedIndicatorAux Œ¥ E)","decl":"theorem continuous_thickenedIndicatorAux {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :\n    Continuous (thickenedIndicatorAux Œ¥ E) := by\n  unfold thickenedIndicatorAux\n  let f := fun x : Œ± => (‚ü®1, infEdist x E / ENNReal.ofReal Œ¥‚ü© : ‚Ñù‚â•0 √ó ‚Ñù‚â•0‚àû)\n  let sub := fun p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0‚àû => (p.1 : ‚Ñù‚â•0‚àû) - p.2\n  rw [show (fun x : Œ± => (1 : ‚Ñù‚â•0‚àû) - infEdist x E / ENNReal.ofReal Œ¥) = sub ‚àò f by rfl]\n  apply (@ENNReal.continuous_nnreal_sub 1).comp\n  apply (ENNReal.continuous_div_const (ENNReal.ofReal Œ¥) _).comp continuous_infEdist\n  norm_num [Œ¥_pos]\n\n"}
{"name":"thickenedIndicatorAux_le_one","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nx : Œ±\n‚ä¢ LE.le (thickenedIndicatorAux Œ¥ E x) 1","decl":"theorem thickenedIndicatorAux_le_one (Œ¥ : ‚Ñù) (E : Set Œ±) (x : Œ±) :\n    thickenedIndicatorAux Œ¥ E x ‚â§ 1 := by\n  apply tsub_le_self (Œ± := ‚Ñù‚â•0‚àû)\n\n"}
{"name":"thickenedIndicatorAux_lt_top","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nx : Œ±\n‚ä¢ LT.lt (thickenedIndicatorAux Œ¥ E x) Top.top","decl":"theorem thickenedIndicatorAux_lt_top {Œ¥ : ‚Ñù} {E : Set Œ±} {x : Œ±} :\n    thickenedIndicatorAux Œ¥ E x < ‚àû :=\n  lt_of_le_of_lt (thickenedIndicatorAux_le_one _ _ _) one_lt_top\n\n"}
{"name":"thickenedIndicatorAux_closure_eq","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ Eq (thickenedIndicatorAux Œ¥ (closure E)) (thickenedIndicatorAux Œ¥ E)","decl":"theorem thickenedIndicatorAux_closure_eq (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    thickenedIndicatorAux Œ¥ (closure E) = thickenedIndicatorAux Œ¥ E := by\n  simp (config := { unfoldPartialApp := true }) only [thickenedIndicatorAux, infEdist_closure]\n\n"}
{"name":"thickenedIndicatorAux_one","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nx : Œ±\nx_in_E : Membership.mem E x\n‚ä¢ Eq (thickenedIndicatorAux Œ¥ E x) 1","decl":"theorem thickenedIndicatorAux_one (Œ¥ : ‚Ñù) (E : Set Œ±) {x : Œ±} (x_in_E : x ‚àà E) :\n    thickenedIndicatorAux Œ¥ E x = 1 := by\n  simp [thickenedIndicatorAux, infEdist_zero_of_mem x_in_E, tsub_zero]\n\n"}
{"name":"thickenedIndicatorAux_one_of_mem_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\nx : Œ±\nx_mem : Membership.mem (closure E) x\n‚ä¢ Eq (thickenedIndicatorAux Œ¥ E x) 1","decl":"theorem thickenedIndicatorAux_one_of_mem_closure (Œ¥ : ‚Ñù) (E : Set Œ±) {x : Œ±}\n    (x_mem : x ‚àà closure E) : thickenedIndicatorAux Œ¥ E x = 1 := by\n  rw [‚Üê thickenedIndicatorAux_closure_eq, thickenedIndicatorAux_one Œ¥ (closure E) x_mem]\n\n"}
{"name":"thickenedIndicatorAux_zero","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\nx : Œ±\nx_out : Not (Membership.mem (Metric.thickening Œ¥ E) x)\n‚ä¢ Eq (thickenedIndicatorAux Œ¥ E x) 0","decl":"theorem thickenedIndicatorAux_zero {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±}\n    (x_out : x ‚àâ thickening Œ¥ E) : thickenedIndicatorAux Œ¥ E x = 0 := by\n  rw [thickening, mem_setOf_eq, not_lt] at x_out\n  unfold thickenedIndicatorAux\n  apply le_antisymm _ bot_le\n  have key := tsub_le_tsub\n    (@rfl _ (1 : ‚Ñù‚â•0‚àû)).le (ENNReal.div_le_div x_out (@rfl _ (ENNReal.ofReal Œ¥ : ‚Ñù‚â•0‚àû)).le)\n  rw [ENNReal.div_self (ne_of_gt (ENNReal.ofReal_pos.mpr Œ¥_pos)) ofReal_ne_top] at key\n  simpa [tsub_self] using key\n\n"}
{"name":"thickenedIndicatorAux_mono","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ Œ¥‚ÇÇ : Real\nhle : LE.le Œ¥‚ÇÅ Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ LE.le (thickenedIndicatorAux Œ¥‚ÇÅ E) (thickenedIndicatorAux Œ¥‚ÇÇ E)","decl":"theorem thickenedIndicatorAux_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ) (E : Set Œ±) :\n    thickenedIndicatorAux Œ¥‚ÇÅ E ‚â§ thickenedIndicatorAux Œ¥‚ÇÇ E :=\n  fun _ => tsub_le_tsub (@rfl ‚Ñù‚â•0‚àû 1).le (ENNReal.div_le_div rfl.le (ofReal_le_ofReal hle))\n\n"}
{"name":"indicator_le_thickenedIndicatorAux","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE : Set Œ±\n‚ä¢ LE.le (E.indicator fun x => 1) (thickenedIndicatorAux Œ¥ E)","decl":"theorem indicator_le_thickenedIndicatorAux (Œ¥ : ‚Ñù) (E : Set Œ±) :\n    (E.indicator fun _ => (1 : ‚Ñù‚â•0‚àû)) ‚â§ thickenedIndicatorAux Œ¥ E := by\n  intro a\n  by_cases h : a ‚àà E\n  ¬∑ simp only [h, indicator_of_mem, thickenedIndicatorAux_one Œ¥ E h, le_refl]\n  ¬∑ simp only [h, indicator_of_not_mem, not_false_iff, zero_le]\n\n"}
{"name":"thickenedIndicatorAux_subset","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nE‚ÇÅ E‚ÇÇ : Set Œ±\nsubset : HasSubset.Subset E‚ÇÅ E‚ÇÇ\n‚ä¢ LE.le (thickenedIndicatorAux Œ¥ E‚ÇÅ) (thickenedIndicatorAux Œ¥ E‚ÇÇ)","decl":"theorem thickenedIndicatorAux_subset (Œ¥ : ‚Ñù) {E‚ÇÅ E‚ÇÇ : Set Œ±} (subset : E‚ÇÅ ‚äÜ E‚ÇÇ) :\n    thickenedIndicatorAux Œ¥ E‚ÇÅ ‚â§ thickenedIndicatorAux Œ¥ E‚ÇÇ :=\n  fun _ => tsub_le_tsub (@rfl ‚Ñù‚â•0‚àû 1).le (ENNReal.div_le_div (infEdist_anti subset) rfl.le)\n\n"}
{"name":"thickenedIndicatorAux_tendsto_indicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥seq : Nat ‚Üí Real\nŒ¥seq_lim : Filter.Tendsto Œ¥seq Filter.atTop (nhds 0)\nE : Set Œ±\n‚ä¢ Filter.Tendsto (fun n => thickenedIndicatorAux (Œ¥seq n) E) Filter.atTop (nhds ((closure E).indicator fun x => 1))","decl":"/-- As the thickening radius Œ¥ tends to 0, the Œ¥-thickened indicator of a set E (in Œ±) tends\npointwise (i.e., w.r.t. the product topology on `Œ± ‚Üí ‚Ñù‚â•0‚àû`) to the indicator function of the\nclosure of E.\n\nThis statement is for the unbundled `‚Ñù‚â•0‚àû`-valued functions `thickenedIndicatorAux Œ¥ E`, see\n`thickenedIndicator_tendsto_indicator_closure` for the version for bundled `‚Ñù‚â•0`-valued\nbounded continuous functions. -/\ntheorem thickenedIndicatorAux_tendsto_indicator_closure {Œ¥seq : ‚Ñï ‚Üí ‚Ñù}\n    (Œ¥seq_lim : Tendsto Œ¥seq atTop (ùìù 0)) (E : Set Œ±) :\n    Tendsto (fun n => thickenedIndicatorAux (Œ¥seq n) E) atTop\n      (ùìù (indicator (closure E) fun _ => (1 : ‚Ñù‚â•0‚àû))) := by\n  rw [tendsto_pi_nhds]\n  intro x\n  by_cases x_mem_closure : x ‚àà closure E\n  ¬∑ simp_rw [thickenedIndicatorAux_one_of_mem_closure _ E x_mem_closure]\n    rw [show (indicator (closure E) fun _ => (1 : ‚Ñù‚â•0‚àû)) x = 1 by\n        simp only [x_mem_closure, indicator_of_mem]]\n    exact tendsto_const_nhds\n  ¬∑ rw [show (closure E).indicator (fun _ => (1 : ‚Ñù‚â•0‚àû)) x = 0 by\n        simp only [x_mem_closure, indicator_of_not_mem, not_false_iff]]\n    rcases exists_real_pos_lt_infEdist_of_not_mem_closure x_mem_closure with ‚ü®Œµ, ‚ü®Œµ_pos, Œµ_lt‚ü©‚ü©\n    rw [Metric.tendsto_nhds] at Œ¥seq_lim\n    specialize Œ¥seq_lim Œµ Œµ_pos\n    simp only [dist_zero_right, Real.norm_eq_abs, eventually_atTop] at Œ¥seq_lim\n    rcases Œ¥seq_lim with ‚ü®N, hN‚ü©\n    apply tendsto_atTop_of_eventually_const (i‚ÇÄ := N)\n    intro n n_large\n    have key : x ‚àâ thickening Œµ E := by simpa only [thickening, mem_setOf_eq, not_lt] using Œµ_lt.le\n    refine le_antisymm ?_ bot_le\n    apply (thickenedIndicatorAux_mono (lt_of_abs_lt (hN n n_large)).le E x).trans\n    exact (thickenedIndicatorAux_zero Œµ_pos E key).le\n\n"}
{"name":"thickenedIndicator_apply","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\nx : Œ±\n‚ä¢ Eq ((thickenedIndicator Œ¥_pos E) x) (thickenedIndicatorAux Œ¥ E x).toNNReal","decl":"/-- The `Œ¥`-thickened indicator of a set `E` is the function that equals `1` on `E`\nand `0` outside a `Œ¥`-thickening of `E` and interpolates (continuously) between\nthese values using `infEdist _ E`.\n\n`thickenedIndicator` is the (bundled) bounded continuous function with `‚Ñù‚â•0`-values.\nSee `thickenedIndicatorAux` for the unbundled `‚Ñù‚â•0‚àû`-valued function. -/\n@[simps]\ndef thickenedIndicator {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) : Œ± ‚Üí·µá ‚Ñù‚â•0 where\n  toFun := fun x : Œ± => (thickenedIndicatorAux Œ¥ E x).toNNReal\n  continuous_toFun := by\n    apply ContinuousOn.comp_continuous continuousOn_toNNReal\n      (continuous_thickenedIndicatorAux Œ¥_pos E)\n    intro x\n    exact (lt_of_le_of_lt (@thickenedIndicatorAux_le_one _ _ Œ¥ E x) one_lt_top).ne\n  map_bounded' := by\n    use 2\n    intro x y\n    rw [NNReal.dist_eq]\n    apply (abs_sub _ _).trans\n    rw [NNReal.abs_eq, NNReal.abs_eq, ‚Üê one_add_one_eq_two]\n    have key := @thickenedIndicatorAux_le_one _ _ Œ¥ E\n    apply add_le_add <;>\n      ¬∑ norm_cast\n        exact (toNNReal_le_toNNReal (lt_of_le_of_lt (key _) one_lt_top).ne one_ne_top).mpr (key _)\n\n"}
{"name":"thickenedIndicator.coeFn_eq_comp","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\n‚ä¢ Eq (‚áë(thickenedIndicator Œ¥_pos E)) (Function.comp ENNReal.toNNReal (thickenedIndicatorAux Œ¥ E))","decl":"theorem thickenedIndicator.coeFn_eq_comp {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :\n    ‚áë(thickenedIndicator Œ¥_pos E) = ENNReal.toNNReal ‚àò thickenedIndicatorAux Œ¥ E :=\n  rfl\n\n"}
{"name":"thickenedIndicator_le_one","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\nx : Œ±\n‚ä¢ LE.le ((thickenedIndicator Œ¥_pos E) x) 1","decl":"theorem thickenedIndicator_le_one {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) (x : Œ±) :\n    thickenedIndicator Œ¥_pos E x ‚â§ 1 := by\n  rw [thickenedIndicator.coeFn_eq_comp]\n  simpa using (toNNReal_le_toNNReal thickenedIndicatorAux_lt_top.ne one_ne_top).mpr\n    (thickenedIndicatorAux_le_one Œ¥ E x)\n\n"}
{"name":"thickenedIndicator_one_of_mem_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\nx : Œ±\nx_mem : Membership.mem (closure E) x\n‚ä¢ Eq ((thickenedIndicator Œ¥_pos E) x) 1","decl":"theorem thickenedIndicator_one_of_mem_closure {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±}\n    (x_mem : x ‚àà closure E) : thickenedIndicator Œ¥_pos E x = 1 := by\n  rw [thickenedIndicator_apply, thickenedIndicatorAux_one_of_mem_closure Œ¥ E x_mem, one_toNNReal]\n\n"}
{"name":"one_le_thickenedIndicator_apply'","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"X : Type u_2\ninst‚úù : PseudoEMetricSpace X\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nF : Set X\nx : X\nhxF : Membership.mem (closure F) x\n‚ä¢ LE.le 1 ((thickenedIndicator Œ¥_pos F) x)","decl":"lemma one_le_thickenedIndicator_apply' {X : Type _} [PseudoEMetricSpace X]\n    {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) {F : Set X} {x : X} (hxF : x ‚àà closure F) :\n    1 ‚â§ thickenedIndicator Œ¥_pos F x := by\n  rw [thickenedIndicator_one_of_mem_closure Œ¥_pos F hxF]\n\n"}
{"name":"one_le_thickenedIndicator_apply","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"X : Type u_2\ninst‚úù : PseudoEMetricSpace X\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nF : Set X\nx : X\nhxF : Membership.mem F x\n‚ä¢ LE.le 1 ((thickenedIndicator Œ¥_pos F) x)","decl":"lemma one_le_thickenedIndicator_apply (X : Type _) [PseudoEMetricSpace X]\n    {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) {F : Set X} {x : X} (hxF : x ‚àà F) :\n    1 ‚â§ thickenedIndicator Œ¥_pos F x :=\n  one_le_thickenedIndicator_apply' Œ¥_pos (subset_closure hxF)\n\n"}
{"name":"thickenedIndicator_one","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\nx : Œ±\nx_in_E : Membership.mem E x\n‚ä¢ Eq ((thickenedIndicator Œ¥_pos E) x) 1","decl":"theorem thickenedIndicator_one {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±} (x_in_E : x ‚àà E) :\n    thickenedIndicator Œ¥_pos E x = 1 :=\n  thickenedIndicator_one_of_mem_closure _ _ (subset_closure x_in_E)\n\n"}
{"name":"thickenedIndicator_zero","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\nx : Œ±\nx_out : Not (Membership.mem (Metric.thickening Œ¥ E) x)\n‚ä¢ Eq ((thickenedIndicator Œ¥_pos E) x) 0","decl":"theorem thickenedIndicator_zero {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) {x : Œ±}\n    (x_out : x ‚àâ thickening Œ¥ E) : thickenedIndicator Œ¥_pos E x = 0 := by\n  rw [thickenedIndicator_apply, thickenedIndicatorAux_zero Œ¥_pos E x_out, zero_toNNReal]\n\n"}
{"name":"indicator_le_thickenedIndicator","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE : Set Œ±\n‚ä¢ LE.le (E.indicator fun x => 1) ‚áë(thickenedIndicator Œ¥_pos E)","decl":"theorem indicator_le_thickenedIndicator {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) (E : Set Œ±) :\n    (E.indicator fun _ => (1 : ‚Ñù‚â•0)) ‚â§ thickenedIndicator Œ¥_pos E := by\n  intro a\n  by_cases h : a ‚àà E\n  ¬∑ simp only [h, indicator_of_mem, thickenedIndicator_one Œ¥_pos E h, le_refl]\n  ¬∑ simp only [h, indicator_of_not_mem, not_false_iff, zero_le]\n\n"}
{"name":"thickenedIndicator_mono","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥‚ÇÅ Œ¥‚ÇÇ : Real\nŒ¥‚ÇÅ_pos : LT.lt 0 Œ¥‚ÇÅ\nŒ¥‚ÇÇ_pos : LT.lt 0 Œ¥‚ÇÇ\nhle : LE.le Œ¥‚ÇÅ Œ¥‚ÇÇ\nE : Set Œ±\n‚ä¢ LE.le ‚áë(thickenedIndicator Œ¥‚ÇÅ_pos E) ‚áë(thickenedIndicator Œ¥‚ÇÇ_pos E)","decl":"theorem thickenedIndicator_mono {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚Ñù} (Œ¥‚ÇÅ_pos : 0 < Œ¥‚ÇÅ) (Œ¥‚ÇÇ_pos : 0 < Œ¥‚ÇÇ) (hle : Œ¥‚ÇÅ ‚â§ Œ¥‚ÇÇ)\n    (E : Set Œ±) : ‚áë(thickenedIndicator Œ¥‚ÇÅ_pos E) ‚â§ thickenedIndicator Œ¥‚ÇÇ_pos E := by\n  intro x\n  apply (toNNReal_le_toNNReal thickenedIndicatorAux_lt_top.ne thickenedIndicatorAux_lt_top.ne).mpr\n  apply thickenedIndicatorAux_mono hle\n\n"}
{"name":"thickenedIndicator_subset","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥ : Real\nŒ¥_pos : LT.lt 0 Œ¥\nE‚ÇÅ E‚ÇÇ : Set Œ±\nsubset : HasSubset.Subset E‚ÇÅ E‚ÇÇ\n‚ä¢ LE.le ‚áë(thickenedIndicator Œ¥_pos E‚ÇÅ) ‚áë(thickenedIndicator Œ¥_pos E‚ÇÇ)","decl":"theorem thickenedIndicator_subset {Œ¥ : ‚Ñù} (Œ¥_pos : 0 < Œ¥) {E‚ÇÅ E‚ÇÇ : Set Œ±} (subset : E‚ÇÅ ‚äÜ E‚ÇÇ) :\n    ‚áë(thickenedIndicator Œ¥_pos E‚ÇÅ) ‚â§ thickenedIndicator Œ¥_pos E‚ÇÇ := fun x =>\n  (toNNReal_le_toNNReal thickenedIndicatorAux_lt_top.ne thickenedIndicatorAux_lt_top.ne).mpr\n    (thickenedIndicatorAux_subset Œ¥ subset x)\n\n"}
{"name":"thickenedIndicator_tendsto_indicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù : PseudoEMetricSpace Œ±\nŒ¥seq : Nat ‚Üí Real\nŒ¥seq_pos : ‚àÄ (n : Nat), LT.lt 0 (Œ¥seq n)\nŒ¥seq_lim : Filter.Tendsto Œ¥seq Filter.atTop (nhds 0)\nE : Set Œ±\n‚ä¢ Filter.Tendsto (fun n => ‚áë(thickenedIndicator ‚ãØ E)) Filter.atTop (nhds ((closure E).indicator fun x => 1))","decl":"/-- As the thickening radius Œ¥ tends to 0, the Œ¥-thickened indicator of a set E (in Œ±) tends\npointwise to the indicator function of the closure of E.\n\nNote: This version is for the bundled bounded continuous functions, but the topology is not\nthe topology on `Œ± ‚Üí·µá ‚Ñù‚â•0`. Coercions to functions `Œ± ‚Üí ‚Ñù‚â•0` are done first, so the topology\ninstance is the product topology (the topology of pointwise convergence). -/\ntheorem thickenedIndicator_tendsto_indicator_closure {Œ¥seq : ‚Ñï ‚Üí ‚Ñù} (Œ¥seq_pos : ‚àÄ n, 0 < Œ¥seq n)\n    (Œ¥seq_lim : Tendsto Œ¥seq atTop (ùìù 0)) (E : Set Œ±) :\n    Tendsto (fun n : ‚Ñï => ((‚Üë) : (Œ± ‚Üí·µá ‚Ñù‚â•0) ‚Üí Œ± ‚Üí ‚Ñù‚â•0) (thickenedIndicator (Œ¥seq_pos n) E)) atTop\n      (ùìù (indicator (closure E) fun _ => (1 : ‚Ñù‚â•0))) := by\n  have key := thickenedIndicatorAux_tendsto_indicator_closure Œ¥seq_lim E\n  rw [tendsto_pi_nhds] at *\n  intro x\n  rw [show indicator (closure E) (fun _ => (1 : ‚Ñù‚â•0)) x =\n        (indicator (closure E) (fun _ => (1 : ‚Ñù‚â•0‚àû)) x).toNNReal\n      by refine (congr_fun (comp_indicator_const 1 ENNReal.toNNReal zero_toNNReal) x).symm]\n  refine Tendsto.comp (tendsto_toNNReal ?_) (key x)\n  by_cases x_mem : x ‚àà closure E <;> simp [x_mem]\n\n"}
{"name":"indicator_thickening_eventually_eq_indicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬π : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù : Zero Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\nx : Œ±\n‚ä¢ Filter.Eventually (fun Œ¥ => Eq ((Metric.thickening Œ¥ E).indicator f x) ((closure E).indicator f x)) (nhdsWithin 0 (Set.Ioi 0))","decl":"/-- Pointwise, the multiplicative indicators of Œ¥-thickenings of a set eventually coincide\nwith the multiplicative indicator of the set as Œ¥>0 tends to zero. -/\n@[to_additive \"Pointwise, the indicators of Œ¥-thickenings of a set eventually coincide\nwith the indicator of the set as Œ¥>0 tends to zero.\"]\nlemma mulIndicator_thickening_eventually_eq_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) (x : Œ±) :\n    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù),\n      (Metric.thickening Œ¥ E).mulIndicator f x = (closure E).mulIndicator f x := by\n  by_cases x_mem_closure : x ‚àà closure E\n  ¬∑ filter_upwards [self_mem_nhdsWithin] with Œ¥ Œ¥_pos\n    simp only [closure_subset_thickening Œ¥_pos E x_mem_closure, mulIndicator_of_mem, x_mem_closure]\n  ¬∑ have obs := eventually_not_mem_thickening_of_infEdist_pos x_mem_closure\n    filter_upwards [mem_nhdsWithin_of_mem_nhds obs, self_mem_nhdsWithin]\n      with Œ¥ x_notin_thE _\n    simp only [x_notin_thE, not_false_eq_true, mulIndicator_of_not_mem, x_mem_closure]\n\n"}
{"name":"mulIndicator_thickening_eventually_eq_mulIndicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬π : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù : One Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\nx : Œ±\n‚ä¢ Filter.Eventually (fun Œ¥ => Eq ((Metric.thickening Œ¥ E).mulIndicator f x) ((closure E).mulIndicator f x)) (nhdsWithin 0 (Set.Ioi 0))","decl":"/-- Pointwise, the multiplicative indicators of Œ¥-thickenings of a set eventually coincide\nwith the multiplicative indicator of the set as Œ¥>0 tends to zero. -/\n@[to_additive \"Pointwise, the indicators of Œ¥-thickenings of a set eventually coincide\nwith the indicator of the set as Œ¥>0 tends to zero.\"]\nlemma mulIndicator_thickening_eventually_eq_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) (x : Œ±) :\n    ‚àÄ·∂† Œ¥ in ùìù[>] (0 : ‚Ñù),\n      (Metric.thickening Œ¥ E).mulIndicator f x = (closure E).mulIndicator f x := by\n  by_cases x_mem_closure : x ‚àà closure E\n  ¬∑ filter_upwards [self_mem_nhdsWithin] with Œ¥ Œ¥_pos\n    simp only [closure_subset_thickening Œ¥_pos E x_mem_closure, mulIndicator_of_mem, x_mem_closure]\n  ¬∑ have obs := eventually_not_mem_thickening_of_infEdist_pos x_mem_closure\n    filter_upwards [mem_nhdsWithin_of_mem_nhds obs, self_mem_nhdsWithin]\n      with Œ¥ x_notin_thE _\n    simp only [x_notin_thE, not_false_eq_true, mulIndicator_of_not_mem, x_mem_closure]\n\n"}
{"name":"mulIndicator_cthickening_eventually_eq_mulIndicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬π : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù : One Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\nx : Œ±\n‚ä¢ Filter.Eventually (fun Œ¥ => Eq ((Metric.cthickening Œ¥ E).mulIndicator f x) ((closure E).mulIndicator f x)) (nhds 0)","decl":"/-- Pointwise, the multiplicative indicators of closed Œ¥-thickenings of a set eventually coincide\nwith the multiplicative indicator of the set as Œ¥ tends to zero. -/\n@[to_additive \"Pointwise, the indicators of closed Œ¥-thickenings of a set eventually coincide\nwith the indicator of the set as Œ¥ tends to zero.\"]\nlemma mulIndicator_cthickening_eventually_eq_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) (x : Œ±) :\n    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù),\n      (Metric.cthickening Œ¥ E).mulIndicator f x = (closure E).mulIndicator f x := by\n  by_cases x_mem_closure : x ‚àà closure E\n  ¬∑ filter_upwards [univ_mem] with Œ¥ _\n    have obs : x ‚àà cthickening Œ¥ E := closure_subset_cthickening Œ¥ E x_mem_closure\n    rw [mulIndicator_of_mem obs f, mulIndicator_of_mem x_mem_closure f]\n  ¬∑ filter_upwards [eventually_not_mem_cthickening_of_infEdist_pos x_mem_closure] with Œ¥ hŒ¥\n    simp only [hŒ¥, not_false_eq_true, mulIndicator_of_not_mem, x_mem_closure]\n\n"}
{"name":"indicator_cthickening_eventually_eq_indicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬π : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù : Zero Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\nx : Œ±\n‚ä¢ Filter.Eventually (fun Œ¥ => Eq ((Metric.cthickening Œ¥ E).indicator f x) ((closure E).indicator f x)) (nhds 0)","decl":"/-- Pointwise, the multiplicative indicators of closed Œ¥-thickenings of a set eventually coincide\nwith the multiplicative indicator of the set as Œ¥ tends to zero. -/\n@[to_additive \"Pointwise, the indicators of closed Œ¥-thickenings of a set eventually coincide\nwith the indicator of the set as Œ¥ tends to zero.\"]\nlemma mulIndicator_cthickening_eventually_eq_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) (x : Œ±) :\n    ‚àÄ·∂† Œ¥ in ùìù (0 : ‚Ñù),\n      (Metric.cthickening Œ¥ E).mulIndicator f x = (closure E).mulIndicator f x := by\n  by_cases x_mem_closure : x ‚àà closure E\n  ¬∑ filter_upwards [univ_mem] with Œ¥ _\n    have obs : x ‚àà cthickening Œ¥ E := closure_subset_cthickening Œ¥ E x_mem_closure\n    rw [mulIndicator_of_mem obs f, mulIndicator_of_mem x_mem_closure f]\n  ¬∑ filter_upwards [eventually_not_mem_cthickening_of_infEdist_pos x_mem_closure] with Œ¥ hŒ¥\n    simp only [hŒ¥, not_false_eq_true, mulIndicator_of_not_mem, x_mem_closure]\n\n"}
{"name":"tendsto_indicator_thickening_indicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬≤ : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù¬π : Zero Œ≤\ninst‚úù : TopologicalSpace Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\n‚ä¢ Filter.Tendsto (fun Œ¥ => (Metric.thickening Œ¥ E).indicator f) (nhdsWithin 0 (Set.Ioi 0)) (nhds ((closure E).indicator f))","decl":"/-- The multiplicative indicators of Œ¥-thickenings of a set tend pointwise to the multiplicative\nindicator of the set, as Œ¥>0 tends to zero. -/\n@[to_additive \"The indicators of Œ¥-thickenings of a set tend pointwise to the indicator of the\nset, as Œ¥>0 tends to zero.\"]\nlemma tendsto_mulIndicator_thickening_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) :\n    Tendsto (fun Œ¥ ‚Ü¶ (Metric.thickening Œ¥ E).mulIndicator f) (ùìù[>] 0)\n      (ùìù ((closure E).mulIndicator f)) := by\n  rw [tendsto_pi_nhds]\n  intro x\n  rw [tendsto_congr' (mulIndicator_thickening_eventually_eq_mulIndicator_closure f E x)]\n  apply tendsto_const_nhds\n\n"}
{"name":"tendsto_mulIndicator_thickening_mulIndicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬≤ : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù¬π : One Œ≤\ninst‚úù : TopologicalSpace Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\n‚ä¢ Filter.Tendsto (fun Œ¥ => (Metric.thickening Œ¥ E).mulIndicator f) (nhdsWithin 0 (Set.Ioi 0)) (nhds ((closure E).mulIndicator f))","decl":"/-- The multiplicative indicators of Œ¥-thickenings of a set tend pointwise to the multiplicative\nindicator of the set, as Œ¥>0 tends to zero. -/\n@[to_additive \"The indicators of Œ¥-thickenings of a set tend pointwise to the indicator of the\nset, as Œ¥>0 tends to zero.\"]\nlemma tendsto_mulIndicator_thickening_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) :\n    Tendsto (fun Œ¥ ‚Ü¶ (Metric.thickening Œ¥ E).mulIndicator f) (ùìù[>] 0)\n      (ùìù ((closure E).mulIndicator f)) := by\n  rw [tendsto_pi_nhds]\n  intro x\n  rw [tendsto_congr' (mulIndicator_thickening_eventually_eq_mulIndicator_closure f E x)]\n  apply tendsto_const_nhds\n\n"}
{"name":"tendsto_indicator_cthickening_indicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬≤ : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù¬π : Zero Œ≤\ninst‚úù : TopologicalSpace Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\n‚ä¢ Filter.Tendsto (fun Œ¥ => (Metric.cthickening Œ¥ E).indicator f) (nhds 0) (nhds ((closure E).indicator f))","decl":"/-- The multiplicative indicators of closed Œ¥-thickenings of a set tend pointwise to the\nmultiplicative indicator of the set, as Œ¥ tends to zero. -/\n@[to_additive \"The indicators of closed Œ¥-thickenings of a set tend pointwise to the indicator\nof the set, as Œ¥ tends to zero.\"]\nlemma tendsto_mulIndicator_cthickening_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) :\n    Tendsto (fun Œ¥ ‚Ü¶ (Metric.cthickening Œ¥ E).mulIndicator f) (ùìù 0)\n      (ùìù ((closure E).mulIndicator f)) := by\n  rw [tendsto_pi_nhds]\n  intro x\n  rw [tendsto_congr' (mulIndicator_cthickening_eventually_eq_mulIndicator_closure f E x)]\n  apply tendsto_const_nhds\n\n"}
{"name":"tendsto_mulIndicator_cthickening_mulIndicator_closure","module":"Mathlib.Topology.MetricSpace.ThickenedIndicator","initialProofState":"Œ± : Type u_1\ninst‚úù¬≤ : PseudoEMetricSpace Œ±\nŒ≤ : Type u_2\ninst‚úù¬π : One Œ≤\ninst‚úù : TopologicalSpace Œ≤\nf : Œ± ‚Üí Œ≤\nE : Set Œ±\n‚ä¢ Filter.Tendsto (fun Œ¥ => (Metric.cthickening Œ¥ E).mulIndicator f) (nhds 0) (nhds ((closure E).mulIndicator f))","decl":"/-- The multiplicative indicators of closed Œ¥-thickenings of a set tend pointwise to the\nmultiplicative indicator of the set, as Œ¥ tends to zero. -/\n@[to_additive \"The indicators of closed Œ¥-thickenings of a set tend pointwise to the indicator\nof the set, as Œ¥ tends to zero.\"]\nlemma tendsto_mulIndicator_cthickening_mulIndicator_closure (f : Œ± ‚Üí Œ≤) (E : Set Œ±) :\n    Tendsto (fun Œ¥ ‚Ü¶ (Metric.cthickening Œ¥ E).mulIndicator f) (ùìù 0)\n      (ùìù ((closure E).mulIndicator f)) := by\n  rw [tendsto_pi_nhds]\n  intro x\n  rw [tendsto_congr' (mulIndicator_cthickening_eventually_eq_mulIndicator_closure f E x)]\n  apply tendsto_const_nhds\n\n"}
