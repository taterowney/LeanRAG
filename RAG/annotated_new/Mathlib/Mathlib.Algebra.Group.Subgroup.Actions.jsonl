{"name":"Subgroup.smul_def","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝¹ : Group G\ninst✝ : MulAction G α\nS : Subgroup G\ng : Subtype fun x => Membership.mem S x\nm : α\n⊢ Eq (HSMul.hSMul g m) (HSMul.hSMul (↑g) m)","decl":"@[to_additive] lemma smul_def (g : S) (m : α) : g • m = (g : G) • m := rfl\n\n"}
{"name":"AddSubgroup.vadd_def","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\nS : AddSubgroup G\ng : Subtype fun x => Membership.mem S x\nm : α\n⊢ Eq (HVAdd.hVAdd g m) (HVAdd.hVAdd (↑g) m)","decl":"@[to_additive] lemma smul_def (g : S) (m : α) : g • m = (g : G) • m := rfl\n\n"}
{"name":"AddSubgroup.mk_vadd","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\nS : AddSubgroup G\ng : G\nhg : Membership.mem S g\na : α\n⊢ Eq (HVAdd.hVAdd ⟨g, hg⟩ a) (HVAdd.hVAdd g a)","decl":"@[to_additive (attr := simp)]\nlemma mk_smul (g : G) (hg : g ∈ S) (a : α) : (⟨g, hg⟩ : S) • a = g • a := rfl\n\n"}
{"name":"Subgroup.mk_smul","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝¹ : Group G\ninst✝ : MulAction G α\nS : Subgroup G\ng : G\nhg : Membership.mem S g\na : α\n⊢ Eq (HSMul.hSMul ⟨g, hg⟩ a) (HSMul.hSMul g a)","decl":"@[to_additive (attr := simp)]\nlemma mk_smul (g : G) (hg : g ∈ S) (a : α) : (⟨g, hg⟩ : S) • a = g • a := rfl\n\n"}
{"name":"AddSubgroup.vaddCommClass_left","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : AddGroup G\ninst✝² : AddAction G β\ninst✝¹ : VAdd α β\ninst✝ : VAddCommClass G α β\nS : AddSubgroup G\n⊢ VAddCommClass (Subtype fun x => Membership.mem S x) α β","decl":"@[to_additive]\ninstance smulCommClass_left [MulAction G β] [SMul α β] [SMulCommClass G α β] (S : Subgroup G) :\n    SMulCommClass S α β :=\n  S.toSubmonoid.smulCommClass_left\n\n"}
{"name":"Subgroup.smulCommClass_left","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : Group G\ninst✝² : MulAction G β\ninst✝¹ : SMul α β\ninst✝ : SMulCommClass G α β\nS : Subgroup G\n⊢ SMulCommClass (Subtype fun x => Membership.mem S x) α β","decl":"@[to_additive]\ninstance smulCommClass_left [MulAction G β] [SMul α β] [SMulCommClass G α β] (S : Subgroup G) :\n    SMulCommClass S α β :=\n  S.toSubmonoid.smulCommClass_left\n\n"}
{"name":"AddSubgroup.vaddCommClass_right","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : AddGroup G\ninst✝² : VAdd α β\ninst✝¹ : AddAction G β\ninst✝ : VAddCommClass α G β\nS : AddSubgroup G\n⊢ VAddCommClass α (Subtype fun x => Membership.mem S x) β","decl":"@[to_additive]\ninstance smulCommClass_right [SMul α β] [MulAction G β] [SMulCommClass α G β] (S : Subgroup G) :\n    SMulCommClass α S β :=\n  S.toSubmonoid.smulCommClass_right\n\n"}
{"name":"Subgroup.smulCommClass_right","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : Group G\ninst✝² : SMul α β\ninst✝¹ : MulAction G β\ninst✝ : SMulCommClass α G β\nS : Subgroup G\n⊢ SMulCommClass α (Subtype fun x => Membership.mem S x) β","decl":"@[to_additive]\ninstance smulCommClass_right [SMul α β] [MulAction G β] [SMulCommClass α G β] (S : Subgroup G) :\n    SMulCommClass α S β :=\n  S.toSubmonoid.smulCommClass_right\n\n"}
{"name":"Subgroup.instIsScalarTowerSubtypeMem","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁴ : Group G\ninst✝³ : SMul α β\ninst✝² : MulAction G α\ninst✝¹ : MulAction G β\ninst✝ : IsScalarTower G α β\nS : Subgroup G\n⊢ IsScalarTower (Subtype fun x => Membership.mem S x) α β","decl":"/-- Note that this provides `IsScalarTower S G G` which is needed by `smul_mul_assoc`. -/\ninstance [SMul α β] [MulAction G α] [MulAction G β] [IsScalarTower G α β] (S : Subgroup G) :\n    IsScalarTower S α β :=\n  inferInstanceAs (IsScalarTower S.toSubmonoid α β)\n\n"}
{"name":"Subgroup.instFaithfulSMulSubtypeMem","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\ninst✝ : FaithfulSMul G α\nS : Subgroup G\n⊢ FaithfulSMul (Subtype fun x => Membership.mem S x) α","decl":"instance [MulAction G α] [FaithfulSMul G α] (S : Subgroup G) : FaithfulSMul S α :=\n  inferInstanceAs (FaithfulSMul S.toSubmonoid α)\n\n"}
{"name":"Subgroup.center.smulCommClass_left","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ SMulCommClass (Subtype fun x => Membership.mem (Subgroup.center G) x) G G","decl":"/-- The center of a group acts commutatively on that group. -/\ninstance center.smulCommClass_left : SMulCommClass (center G) G G :=\n  Submonoid.center.smulCommClass_left\n\n"}
{"name":"Subgroup.center.smulCommClass_right","module":"Mathlib.Algebra.Group.Subgroup.Actions","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ SMulCommClass G (Subtype fun x => Membership.mem (Subgroup.center G) x) G","decl":"/-- The center of a group acts commutatively on that group. -/\ninstance center.smulCommClass_right : SMulCommClass G (center G) G :=\n  Submonoid.center.smulCommClass_right\n\n"}
