{"name":"MeasureTheory.AEEqFun.integrable_mk","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Iff (MeasureTheory.AEEqFun.mk f hf).Integrable (MeasureTheory.Integrable f μ)","decl":"theorem integrable_mk {f : α → β} (hf : AEStronglyMeasurable f μ) :\n    Integrable (mk f hf : α →ₘ[μ] β) ↔ MeasureTheory.Integrable f μ := by\n  simp only [Integrable]\n  apply integrable_congr\n  exact coeFn_mk f hf\n\n"}
{"name":"MeasureTheory.AEEqFun.integrable_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : MeasureTheory.AEEqFun α β μ\n⊢ Iff (MeasureTheory.Integrable (↑f) μ) f.Integrable","decl":"theorem integrable_coeFn {f : α →ₘ[μ] β} : MeasureTheory.Integrable f μ ↔ Integrable f := by\n  rw [← integrable_mk, mk_coeFn]\n\n"}
{"name":"MeasureTheory.AEEqFun.integrable_zero","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\n⊢ MeasureTheory.AEEqFun.Integrable 0","decl":"theorem integrable_zero : Integrable (0 : α →ₘ[μ] β) :=\n  (MeasureTheory.integrable_zero α β μ).congr (coeFn_mk _ _).symm\n\n"}
{"name":"MeasureTheory.AEEqFun.Integrable.neg","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : MeasureTheory.AEEqFun α β μ\na✝ : f.Integrable\n⊢ (Neg.neg f).Integrable","decl":"theorem Integrable.neg {f : α →ₘ[μ] β} : Integrable f → Integrable (-f) :=\n  induction_on f fun _f hfm hfi => (integrable_mk _).2 ((integrable_mk hfm).1 hfi).neg\n\n"}
{"name":"MeasureTheory.AEEqFun.integrable_iff_mem_L1","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : MeasureTheory.AEEqFun α β μ\n⊢ Iff f.Integrable (Membership.mem (MeasureTheory.Lp β 1 μ) f)","decl":"theorem integrable_iff_mem_L1 {f : α →ₘ[μ] β} : Integrable f ↔ f ∈ (α →₁[μ] β) := by\n  rw [← integrable_coeFn, ← memℒp_one_iff_integrable, Lp.mem_Lp_iff_memℒp]\n\n"}
{"name":"MeasureTheory.AEEqFun.Integrable.add","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : MeasureTheory.AEEqFun α β μ\na✝¹ : f.Integrable\na✝ : g.Integrable\n⊢ (HAdd.hAdd f g).Integrable","decl":"theorem Integrable.add {f g : α →ₘ[μ] β} : Integrable f → Integrable g → Integrable (f + g) := by\n  refine induction_on₂ f g fun f hf g hg hfi hgi => ?_\n  simp only [integrable_mk, mk_add_mk] at hfi hgi ⊢\n  exact hfi.add hgi\n\n"}
{"name":"MeasureTheory.AEEqFun.Integrable.sub","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : MeasureTheory.AEEqFun α β μ\nhf : f.Integrable\nhg : g.Integrable\n⊢ (HSub.hSub f g).Integrable","decl":"theorem Integrable.sub {f g : α →ₘ[μ] β} (hf : Integrable f) (hg : Integrable g) :\n    Integrable (f - g) :=\n  (sub_eq_add_neg f g).symm ▸ hf.add hg.neg\n\n"}
{"name":"MeasureTheory.AEEqFun.Integrable.smul","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup β\n𝕜 : Type u_3\ninst✝² : NormedRing 𝕜\ninst✝¹ : Module 𝕜 β\ninst✝ : BoundedSMul 𝕜 β\nc : 𝕜\nf : MeasureTheory.AEEqFun α β μ\na✝ : f.Integrable\n⊢ (HSMul.hSMul c f).Integrable","decl":"theorem Integrable.smul {c : 𝕜} {f : α →ₘ[μ] β} : Integrable f → Integrable (c • f) :=\n  induction_on f fun _f hfm hfi => (integrable_mk _).2 <|\n    by simpa using ((integrable_mk hfm).1 hfi).smul c\n\n"}
{"name":"MeasureTheory.L1.integrable_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ MeasureTheory.Integrable (↑↑f) μ","decl":"theorem integrable_coeFn (f : α →₁[μ] β) : Integrable f μ := by\n  rw [← memℒp_one_iff_integrable]\n  exact Lp.memℒp f\n\n"}
{"name":"MeasureTheory.L1.hasFiniteIntegral_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ MeasureTheory.HasFiniteIntegral (↑↑f) μ","decl":"theorem hasFiniteIntegral_coeFn (f : α →₁[μ] β) : HasFiniteIntegral f μ :=\n  (integrable_coeFn f).hasFiniteIntegral\n\n"}
{"name":"MeasureTheory.L1.stronglyMeasurable_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ MeasureTheory.StronglyMeasurable ↑↑f","decl":"theorem stronglyMeasurable_coeFn (f : α →₁[μ] β) : StronglyMeasurable f :=\n  Lp.stronglyMeasurable f\n\n"}
{"name":"MeasureTheory.L1.measurable_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Measurable ↑↑f","decl":"theorem measurable_coeFn [MeasurableSpace β] [BorelSpace β] (f : α →₁[μ] β) : Measurable f :=\n  (Lp.stronglyMeasurable f).measurable\n\n"}
{"name":"MeasureTheory.L1.aestronglyMeasurable_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ MeasureTheory.AEStronglyMeasurable (↑↑f) μ","decl":"theorem aestronglyMeasurable_coeFn (f : α →₁[μ] β) : AEStronglyMeasurable f μ :=\n  Lp.aestronglyMeasurable f\n\n"}
{"name":"MeasureTheory.L1.aemeasurable_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ AEMeasurable (↑↑f) μ","decl":"theorem aemeasurable_coeFn [MeasurableSpace β] [BorelSpace β] (f : α →₁[μ] β) : AEMeasurable f μ :=\n  (Lp.stronglyMeasurable f).measurable.aemeasurable\n\n"}
{"name":"MeasureTheory.L1.edist_def","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Eq (EDist.edist f g) (MeasureTheory.lintegral μ fun a => EDist.edist (↑↑f a) (↑↑g a))","decl":"theorem edist_def (f g : α →₁[μ] β) : edist f g = ∫⁻ a, edist (f a) (g a) ∂μ := by\n  simp only [Lp.edist_def, eLpNorm, one_ne_zero, eLpNorm'_eq_lintegral_enorm, Pi.sub_apply,\n    one_toReal, ENNReal.rpow_one, ne_eq, not_false_eq_true, div_self, ite_false]\n  simp [edist_eq_enorm_sub]\n\n"}
{"name":"MeasureTheory.L1.dist_def","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Eq (Dist.dist f g) (MeasureTheory.lintegral μ fun a => EDist.edist (↑↑f a) (↑↑g a)).toReal","decl":"theorem dist_def (f g : α →₁[μ] β) : dist f g = (∫⁻ a, edist (f a) (g a) ∂μ).toReal := by\n  simp_rw [dist_edist, edist_def]\n\n"}
{"name":"MeasureTheory.L1.norm_def","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Eq (Norm.norm f) (MeasureTheory.lintegral μ fun a => ENorm.enorm (↑↑f a)).toReal","decl":"theorem norm_def (f : α →₁[μ] β) : ‖f‖ = (∫⁻ a, ‖f a‖ₑ ∂μ).toReal := by\n  simp [Lp.norm_def, eLpNorm, eLpNorm'_eq_lintegral_enorm]\n\n"}
{"name":"MeasureTheory.L1.norm_sub_eq_lintegral","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Eq (Norm.norm (HSub.hSub f g)) (MeasureTheory.lintegral μ fun x => ENorm.enorm (HSub.hSub (↑↑f x) (↑↑g x))).toReal","decl":"/-- Computing the norm of a difference between two L¹-functions. Note that this is not a\n  special case of `norm_def` since `(f - g) x` and `f x - g x` are not equal\n  (but only a.e.-equal). -/\ntheorem norm_sub_eq_lintegral (f g : α →₁[μ] β) : ‖f - g‖ = (∫⁻ x, ‖f x - g x‖ₑ ∂μ).toReal := by\n  rw [norm_def]\n  congr 1\n  rw [lintegral_congr_ae]\n  filter_upwards [Lp.coeFn_sub f g] with _ ha\n  simp only [ha, Pi.sub_apply]\n\n"}
{"name":"MeasureTheory.L1.ofReal_norm_eq_lintegral","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Eq (ENNReal.ofReal (Norm.norm f)) (MeasureTheory.lintegral μ fun x => ENorm.enorm (↑↑f x))","decl":"theorem ofReal_norm_eq_lintegral (f : α →₁[μ] β) : ENNReal.ofReal ‖f‖ = ∫⁻ x, ‖f x‖ₑ ∂μ := by\n  rw [norm_def, ENNReal.ofReal_toReal]\n  exact ne_of_lt (hasFiniteIntegral_coeFn f)\n\n"}
{"name":"MeasureTheory.L1.ofReal_norm_sub_eq_lintegral","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\n⊢ Eq (ENNReal.ofReal (Norm.norm (HSub.hSub f g))) (MeasureTheory.lintegral μ fun x => ENorm.enorm (HSub.hSub (↑↑f x) (↑↑g x)))","decl":"/-- Computing the norm of a difference between two L¹-functions. Note that this is not a\n  special case of `ofReal_norm_eq_lintegral` since `(f - g) x` and `f x - g x` are not equal\n  (but only a.e.-equal). -/\ntheorem ofReal_norm_sub_eq_lintegral (f g : α →₁[μ] β) :\n    ENNReal.ofReal ‖f - g‖ = ∫⁻ x, ‖f x - g x‖ₑ ∂μ := by\n  simp_rw [ofReal_norm_eq_lintegral, ← edist_zero_eq_enorm]\n  apply lintegral_congr_ae\n  filter_upwards [Lp.coeFn_sub f g] with _ ha\n  simp only [ha, Pi.sub_apply]\n\n"}
{"name":"MeasureTheory.Integrable.toL1_coeFn","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp β 1 μ) x\nhf : MeasureTheory.Integrable (↑↑f) μ\n⊢ Eq (MeasureTheory.Integrable.toL1 (↑↑f) hf) f","decl":"@[simp]\ntheorem toL1_coeFn (f : α →₁[μ] β) (hf : Integrable f μ) : hf.toL1 f = f := by\n  simp [Integrable.toL1]\n\n"}
{"name":"MeasureTheory.Integrable.coeFn_toL1","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑↑(MeasureTheory.Integrable.toL1 f hf)) f","decl":"theorem coeFn_toL1 {f : α → β} (hf : Integrable f μ) : hf.toL1 f =ᵐ[μ] f :=\n  AEEqFun.coeFn_mk _ _\n\n"}
{"name":"MeasureTheory.Integrable.toL1_zero","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nh : MeasureTheory.Integrable 0 μ\n⊢ Eq (MeasureTheory.Integrable.toL1 0 h) 0","decl":"@[simp]\ntheorem toL1_zero (h : Integrable (0 : α → β) μ) : h.toL1 0 = 0 :=\n  rfl\n\n"}
{"name":"MeasureTheory.Integrable.toL1_eq_mk","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (↑(MeasureTheory.Integrable.toL1 f hf)) (MeasureTheory.AEEqFun.mk f ⋯)","decl":"@[simp]\ntheorem toL1_eq_mk (f : α → β) (hf : Integrable f μ) :\n    (hf.toL1 f : α →ₘ[μ] β) = AEEqFun.mk f hf.aestronglyMeasurable :=\n  rfl\n\n"}
{"name":"MeasureTheory.Integrable.toL1_eq_toL1_iff","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : α → β\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Iff (Eq (MeasureTheory.Integrable.toL1 f hf) (MeasureTheory.Integrable.toL1 g hg)) ((MeasureTheory.ae μ).EventuallyEq f g)","decl":"@[simp]\ntheorem toL1_eq_toL1_iff (f g : α → β) (hf : Integrable f μ) (hg : Integrable g μ) :\n    toL1 f hf = toL1 g hg ↔ f =ᵐ[μ] g :=\n  Memℒp.toLp_eq_toLp_iff _ _\n\n"}
{"name":"MeasureTheory.Integrable.toL1_add","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : α → β\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (MeasureTheory.Integrable.toL1 (HAdd.hAdd f g) ⋯) (HAdd.hAdd (MeasureTheory.Integrable.toL1 f hf) (MeasureTheory.Integrable.toL1 g hg))","decl":"theorem toL1_add (f g : α → β) (hf : Integrable f μ) (hg : Integrable g μ) :\n    toL1 (f + g) (hf.add hg) = toL1 f hf + toL1 g hg :=\n  rfl\n\n"}
{"name":"MeasureTheory.Integrable.toL1_neg","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (MeasureTheory.Integrable.toL1 (Neg.neg f) ⋯) (Neg.neg (MeasureTheory.Integrable.toL1 f hf))","decl":"theorem toL1_neg (f : α → β) (hf : Integrable f μ) : toL1 (-f) (Integrable.neg hf) = -toL1 f hf :=\n  rfl\n\n"}
{"name":"MeasureTheory.Integrable.toL1_sub","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : α → β\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (MeasureTheory.Integrable.toL1 (HSub.hSub f g) ⋯) (HSub.hSub (MeasureTheory.Integrable.toL1 f hf) (MeasureTheory.Integrable.toL1 g hg))","decl":"theorem toL1_sub (f g : α → β) (hf : Integrable f μ) (hg : Integrable g μ) :\n    toL1 (f - g) (hf.sub hg) = toL1 f hf - toL1 g hg :=\n  rfl\n\n"}
{"name":"MeasureTheory.Integrable.norm_toL1","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (Norm.norm (MeasureTheory.Integrable.toL1 f hf)) (MeasureTheory.lintegral μ fun a => EDist.edist (f a) 0).toReal","decl":"theorem norm_toL1 (f : α → β) (hf : Integrable f μ) :\n    ‖hf.toL1 f‖ = (∫⁻ a, edist (f a) 0 ∂μ).toReal := by\n  simp [toL1, Lp.norm_toLp, eLpNorm, eLpNorm'_eq_lintegral_enorm]\n\n"}
{"name":"MeasureTheory.Integrable.enorm_toL1","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (ENorm.enorm (MeasureTheory.Integrable.toL1 f hf)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a))","decl":"theorem enorm_toL1 {f : α → β} (hf : Integrable f μ) : ‖hf.toL1 f‖ₑ = ∫⁻ a, ‖f a‖ₑ ∂μ := by\n  simpa [Integrable.toL1, eLpNorm, eLpNorm', enorm] using ENNReal.coe_toNNReal hf.2.ne\n\n"}
{"name":"MeasureTheory.Integrable.nnnorm_toL1","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (ENorm.enorm (MeasureTheory.Integrable.toL1 f hf)) (MeasureTheory.lintegral μ fun a => ENorm.enorm (f a))","decl":"@[deprecated (since := \"2025-01-20\")] alias nnnorm_toL1 := enorm_toL1\n\n"}
{"name":"MeasureTheory.Integrable.norm_toL1_eq_lintegral_norm","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (Norm.norm (MeasureTheory.Integrable.toL1 f hf)) (MeasureTheory.lintegral μ fun a => ENNReal.ofReal (Norm.norm (f a))).toReal","decl":"theorem norm_toL1_eq_lintegral_norm (f : α → β) (hf : Integrable f μ) :\n    ‖hf.toL1 f‖ = ENNReal.toReal (∫⁻ a, ENNReal.ofReal ‖f a‖ ∂μ) := by\n  rw [norm_toL1, lintegral_norm_eq_lintegral_edist]\n\n"}
{"name":"MeasureTheory.Integrable.edist_toL1_toL1","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf g : α → β\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\n⊢ Eq (EDist.edist (MeasureTheory.Integrable.toL1 f hf) (MeasureTheory.Integrable.toL1 g hg)) (MeasureTheory.lintegral μ fun a => EDist.edist (f a) (g a))","decl":"@[simp]\ntheorem edist_toL1_toL1 (f g : α → β) (hf : Integrable f μ) (hg : Integrable g μ) :\n    edist (hf.toL1 f) (hg.toL1 g) = ∫⁻ a, edist (f a) (g a) ∂μ := by\n  simp only [toL1, Lp.edist_toLp_toLp, eLpNorm, one_ne_zero, eLpNorm'_eq_lintegral_enorm,\n    Pi.sub_apply, one_toReal, ENNReal.rpow_one, ne_eq, not_false_eq_true, div_self, ite_false]\n  simp [edist_eq_enorm_sub]\n\n"}
{"name":"MeasureTheory.Integrable.edist_toL1_zero","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.Integrable f μ\n⊢ Eq (EDist.edist (MeasureTheory.Integrable.toL1 f hf) 0) (MeasureTheory.lintegral μ fun a => EDist.edist (f a) 0)","decl":"theorem edist_toL1_zero (f : α → β) (hf : Integrable f μ) :\n    edist (hf.toL1 f) 0 = ∫⁻ a, edist (f a) 0 ∂μ := by\n  simp only [edist_zero_right, Lp.enorm_def, toL1_eq_mk, eLpNorm_aeeqFun]\n  apply eLpNorm_one_eq_lintegral_enorm\n\n"}
{"name":"MeasureTheory.Integrable.toL1_smul","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup β\n𝕜 : Type u_3\ninst✝² : NormedRing 𝕜\ninst✝¹ : Module 𝕜 β\ninst✝ : BoundedSMul 𝕜 β\nf : α → β\nhf : MeasureTheory.Integrable f μ\nk : 𝕜\n⊢ Eq (MeasureTheory.Integrable.toL1 (fun a => HSMul.hSMul k (f a)) ⋯) (HSMul.hSMul k (MeasureTheory.Integrable.toL1 f hf))","decl":"theorem toL1_smul (f : α → β) (hf : Integrable f μ) (k : 𝕜) :\n    toL1 (fun a => k • f a) (hf.smul k) = k • toL1 f hf :=\n  rfl\n\n"}
{"name":"MeasureTheory.Integrable.toL1_smul'","module":"Mathlib.MeasureTheory.Function.L1Space.AEEqFun","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup β\n𝕜 : Type u_3\ninst✝² : NormedRing 𝕜\ninst✝¹ : Module 𝕜 β\ninst✝ : BoundedSMul 𝕜 β\nf : α → β\nhf : MeasureTheory.Integrable f μ\nk : 𝕜\n⊢ Eq (MeasureTheory.Integrable.toL1 (HSMul.hSMul k f) ⋯) (HSMul.hSMul k (MeasureTheory.Integrable.toL1 f hf))","decl":"theorem toL1_smul' (f : α → β) (hf : Integrable f μ) (k : 𝕜) :\n    toL1 (k • f) (hf.smul k) = k • toL1 f hf :=\n  rfl\n\n"}
