{"name":"SemiconjBy.map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Mul M\ninst✝² : Mul N\na x y : M\ninst✝¹ : FunLike F M N\ninst✝ : MulHomClass F M N\nh : SemiconjBy a x y\nf : F\n⊢ SemiconjBy (f a) (f x) (f y)","decl":"@[to_additive (attr := simp)]\nprotected theorem SemiconjBy.map [MulHomClass F M N] (h : SemiconjBy a x y) (f : F) :\n    SemiconjBy (f a) (f x) (f y) := by simpa only [SemiconjBy, map_mul] using congr_arg f h\n\n"}
{"name":"AddSemiconjBy.map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Add M\ninst✝² : Add N\na x y : M\ninst✝¹ : FunLike F M N\ninst✝ : AddHomClass F M N\nh : AddSemiconjBy a x y\nf : F\n⊢ AddSemiconjBy (f a) (f x) (f y)","decl":"@[to_additive (attr := simp)]\nprotected theorem SemiconjBy.map [MulHomClass F M N] (h : SemiconjBy a x y) (f : F) :\n    SemiconjBy (f a) (f x) (f y) := by simpa only [SemiconjBy, map_mul] using congr_arg f h\n\n"}
{"name":"Commute.map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Mul M\ninst✝² : Mul N\nx y : M\ninst✝¹ : FunLike F M N\ninst✝ : MulHomClass F M N\nh : Commute x y\nf : F\n⊢ Commute (f x) (f y)","decl":"@[to_additive (attr := simp)]\nprotected theorem Commute.map [MulHomClass F M N] (h : Commute x y) (f : F) : Commute (f x) (f y) :=\n  SemiconjBy.map h f\n\n"}
{"name":"AddCommute.map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Add M\ninst✝² : Add N\nx y : M\ninst✝¹ : FunLike F M N\ninst✝ : AddHomClass F M N\nh : AddCommute x y\nf : F\n⊢ AddCommute (f x) (f y)","decl":"@[to_additive (attr := simp)]\nprotected theorem Commute.map [MulHomClass F M N] (h : Commute x y) (f : F) : Commute (f x) (f y) :=\n  SemiconjBy.map h f\n\n"}
{"name":"SemiconjBy.of_map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Mul M\ninst✝² : Mul N\na x y : M\ninst✝¹ : FunLike F M N\ninst✝ : MulHomClass F M N\nf : F\nhf : Function.Injective ⇑f\nh : SemiconjBy (f a) (f x) (f y)\n⊢ SemiconjBy a x y","decl":"@[to_additive (attr := simp)]\nprotected theorem SemiconjBy.of_map [MulHomClass F M N] (f : F) (hf : Function.Injective f)\n    (h : SemiconjBy (f a) (f x) (f y)) : SemiconjBy a x y :=\n  hf (by simpa only [SemiconjBy, map_mul] using h)\n\n"}
{"name":"AddSemiconjBy.of_map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Add M\ninst✝² : Add N\na x y : M\ninst✝¹ : FunLike F M N\ninst✝ : AddHomClass F M N\nf : F\nhf : Function.Injective ⇑f\nh : AddSemiconjBy (f a) (f x) (f y)\n⊢ AddSemiconjBy a x y","decl":"@[to_additive (attr := simp)]\nprotected theorem SemiconjBy.of_map [MulHomClass F M N] (f : F) (hf : Function.Injective f)\n    (h : SemiconjBy (f a) (f x) (f y)) : SemiconjBy a x y :=\n  hf (by simpa only [SemiconjBy, map_mul] using h)\n\n"}
{"name":"Commute.of_map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Mul M\ninst✝² : Mul N\nx y : M\ninst✝¹ : FunLike F M N\ninst✝ : MulHomClass F M N\nf : F\nhf : Function.Injective ⇑f\nh : Commute (f x) (f y)\n⊢ Commute x y","decl":"@[to_additive (attr := simp)]\ntheorem Commute.of_map [MulHomClass F M N] {f : F} (hf : Function.Injective f)\n    (h : Commute (f x) (f y)) : Commute x y :=\n  hf (by simpa only [map_mul] using h.eq)\n\n"}
{"name":"AddCommute.of_map","module":"Mathlib.Algebra.Group.Commute.Hom","initialProofState":"F : Type u_1\nM : Type u_2\nN : Type u_3\ninst✝³ : Add M\ninst✝² : Add N\nx y : M\ninst✝¹ : FunLike F M N\ninst✝ : AddHomClass F M N\nf : F\nhf : Function.Injective ⇑f\nh : AddCommute (f x) (f y)\n⊢ AddCommute x y","decl":"@[to_additive (attr := simp)]\ntheorem Commute.of_map [MulHomClass F M N] {f : F} (hf : Function.Injective f)\n    (h : Commute (f x) (f y)) : Commute x y :=\n  hf (by simpa only [map_mul] using h.eq)\n\n"}
