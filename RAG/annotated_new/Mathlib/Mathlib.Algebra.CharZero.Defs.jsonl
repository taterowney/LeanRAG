{"name":"CharZero.cast_injective","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝ : AddMonoidWithOne R\nself : CharZero R\n⊢ Function.Injective Nat.cast","decl":"/-- Typeclass for monoids with characteristic zero.\n  (This is usually stated on fields but it makes sense for any additive monoid with 1.)\n\n*Warning*: for a semiring `R`, `CharZero R` and `CharP R 0` need not coincide.\n* `CharZero R` requires an injection `ℕ ↪ R`;\n* `CharP R 0` asks that only `0 : ℕ` maps to `0 : R` under the map `ℕ → R`.\nFor instance, endowing `{0, 1}` with addition given by `max` (i.e. `1` is absorbing), shows that\n`CharZero {0, 1}` does not hold and yet `CharP {0, 1} 0` does.\nThis example is formalized in `Counterexamples/CharPZeroNeCharZero.lean`.\n-/\nclass CharZero (R) [AddMonoidWithOne R] : Prop where\n  /-- An additive monoid with one has characteristic zero if the canonical map `ℕ → R` is\n  injective. -/\n  cast_injective : Function.Injective (Nat.cast : ℕ → R)\n\n"}
{"name":"charZero_of_inj_zero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝ : AddGroupWithOne R\nH : ∀ (n : Nat), Eq (↑n) 0 → Eq n 0\n⊢ CharZero R","decl":"theorem charZero_of_inj_zero [AddGroupWithOne R] (H : ∀ n : ℕ, (n : R) = 0 → n = 0) :\n    CharZero R :=\n  ⟨@fun m n h => by\n    induction m generalizing n with\n    | zero => rw [H n]; rw [← h, Nat.cast_zero]\n    | succ m ih =>\n      cases n\n      · apply H; rw [h, Nat.cast_zero]\n      · simp only [Nat.cast_succ, add_right_cancel_iff] at h; rwa [ih]⟩\n\n"}
{"name":"Nat.cast_injective","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\n⊢ Function.Injective Nat.cast","decl":"theorem cast_injective : Function.Injective (Nat.cast : ℕ → R) :=\n  CharZero.cast_injective\n\n"}
{"name":"Nat.cast_inj","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\nm n : Nat\n⊢ Iff (Eq ↑m ↑n) (Eq m n)","decl":"@[simp, norm_cast]\ntheorem cast_inj {m n : ℕ} : (m : R) = n ↔ m = n :=\n  cast_injective.eq_iff\n\n"}
{"name":"Nat.cast_eq_zero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\nn : Nat\n⊢ Iff (Eq (↑n) 0) (Eq n 0)","decl":"@[simp, norm_cast]\ntheorem cast_eq_zero {n : ℕ} : (n : R) = 0 ↔ n = 0 := by rw [← cast_zero, cast_inj]\n\n"}
{"name":"Nat.cast_ne_zero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\nn : Nat\n⊢ Iff (Ne (↑n) 0) (Ne n 0)","decl":"@[norm_cast]\ntheorem cast_ne_zero {n : ℕ} : (n : R) ≠ 0 ↔ n ≠ 0 :=\n  not_congr cast_eq_zero\n\n"}
{"name":"Nat.cast_add_one_ne_zero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\nn : Nat\n⊢ Ne (HAdd.hAdd (↑n) 1) 0","decl":"theorem cast_add_one_ne_zero (n : ℕ) : (n + 1 : R) ≠ 0 :=\n  mod_cast n.succ_ne_zero\n\n"}
{"name":"Nat.cast_eq_one","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\nn : Nat\n⊢ Iff (Eq (↑n) 1) (Eq n 1)","decl":"@[simp, norm_cast]\ntheorem cast_eq_one {n : ℕ} : (n : R) = 1 ↔ n = 1 := by rw [← cast_one, cast_inj]\n\n"}
{"name":"Nat.cast_ne_one","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\ninst✝ : CharZero R\nn : Nat\n⊢ Iff (Ne (↑n) 1) (Ne n 1)","decl":"@[norm_cast]\ntheorem cast_ne_one {n : ℕ} : (n : R) ≠ 1 ↔ n ≠ 1 :=\n  cast_eq_one.not\n\n"}
{"name":"Nat.AtLeastTwo.toNeZero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ NeZero n","decl":"instance (priority := 100) AtLeastTwo.toNeZero (n : ℕ) [n.AtLeastTwo] : NeZero n :=\n  ⟨Nat.ne_of_gt (Nat.le_of_lt one_lt)⟩\n\n"}
{"name":"OfNat.ofNat_ne_zero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝² : AddMonoidWithOne R\ninst✝¹ : CharZero R\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Ne (OfNat.ofNat n) 0","decl":"@[simp] lemma ofNat_ne_zero (n : ℕ) [n.AtLeastTwo] : (ofNat(n) : R) ≠ 0 :=\n  Nat.cast_ne_zero.2 (NeZero.ne n)\n\n"}
{"name":"OfNat.zero_ne_ofNat","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝² : AddMonoidWithOne R\ninst✝¹ : CharZero R\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Ne 0 (OfNat.ofNat n)","decl":"@[simp] lemma zero_ne_ofNat (n : ℕ) [n.AtLeastTwo] : 0 ≠ (ofNat(n) : R) :=\n  (ofNat_ne_zero n).symm\n\n"}
{"name":"OfNat.ofNat_ne_one","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝² : AddMonoidWithOne R\ninst✝¹ : CharZero R\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Ne (OfNat.ofNat n) 1","decl":"@[simp] lemma ofNat_ne_one (n : ℕ) [n.AtLeastTwo] : (ofNat(n) : R) ≠ 1 :=\n  Nat.cast_ne_one.2 (Nat.AtLeastTwo.ne_one)\n\n"}
{"name":"OfNat.one_ne_ofNat","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝² : AddMonoidWithOne R\ninst✝¹ : CharZero R\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Ne 1 (OfNat.ofNat n)","decl":"@[simp] lemma one_ne_ofNat (n : ℕ) [n.AtLeastTwo] : (1 : R) ≠ ofNat(n) :=\n  (ofNat_ne_one n).symm\n\n"}
{"name":"OfNat.ofNat_eq_ofNat","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"R : Type u_1\ninst✝³ : AddMonoidWithOne R\ninst✝² : CharZero R\nm n : Nat\ninst✝¹ : m.AtLeastTwo\ninst✝ : n.AtLeastTwo\n⊢ Iff (Eq (OfNat.ofNat m) (OfNat.ofNat n)) (Eq (OfNat.ofNat m) (OfNat.ofNat n))","decl":"@[simp] lemma ofNat_eq_ofNat {m n : ℕ} [m.AtLeastTwo] [n.AtLeastTwo] :\n    (ofNat(m) : R) = ofNat(n) ↔ (ofNat m : ℕ) = ofNat n :=\n  Nat.cast_inj\n\n"}
{"name":"NeZero.charZero","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"M : Type u_2\nn : Nat\ninst✝² : NeZero n\ninst✝¹ : AddMonoidWithOne M\ninst✝ : CharZero M\n⊢ NeZero ↑n","decl":"instance charZero {M} {n : ℕ} [NeZero n] [AddMonoidWithOne M] [CharZero M] : NeZero (n : M) :=\n  ⟨Nat.cast_ne_zero.mpr out⟩\n\n"}
{"name":"NeZero.charZero_one","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"M : Type u_2\ninst✝¹ : AddMonoidWithOne M\ninst✝ : CharZero M\n⊢ NeZero 1","decl":"instance charZero_one {M} [AddMonoidWithOne M] [CharZero M] : NeZero (1 : M) where\n  out := by\n    rw [← Nat.cast_one, Nat.cast_ne_zero]\n    trivial\n\n"}
{"name":"NeZero.charZero_ofNat","module":"Mathlib.Algebra.CharZero.Defs","initialProofState":"M : Type u_2\nn : Nat\ninst✝² : n.AtLeastTwo\ninst✝¹ : AddMonoidWithOne M\ninst✝ : CharZero M\n⊢ NeZero (OfNat.ofNat n)","decl":"instance charZero_ofNat {M} {n : ℕ} [n.AtLeastTwo] [AddMonoidWithOne M] [CharZero M] :\n    NeZero (OfNat.ofNat n : M) :=\n  ⟨OfNat.ofNat_ne_zero n⟩\n\n"}
