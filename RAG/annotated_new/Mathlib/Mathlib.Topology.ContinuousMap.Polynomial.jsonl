{"name":"Polynomial.toContinuousMap_apply","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : TopologicalSpace R\np : Polynomial R\nx : R\n⊢ Eq (p.toContinuousMap x) (Polynomial.eval x p)","decl":"/--\nEvery polynomial with coefficients in a topological semiring gives a (bundled) continuous function.\n-/\n@[simps]\ndef toContinuousMap (p : R[X]) : C(R, R) :=\n  ⟨fun x : R => p.eval x, by fun_prop⟩\n\n"}
{"name":"Polynomial.toContinuousMap_X_eq_id","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : Semiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\n⊢ Eq Polynomial.X.toContinuousMap (ContinuousMap.id R)","decl":"open ContinuousMap in\nlemma toContinuousMap_X_eq_id : X.toContinuousMap = .id R := by\n  ext; simp\n\n"}
{"name":"Polynomial.toContinuousMapOn_apply","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝¹ : Semiring R\ninst✝ : TopologicalSpace R\np : Polynomial R\nX : Set R\nx : ↑X\n⊢ Eq ((p.toContinuousMapOn X) x) (p.toContinuousMap ↑x)","decl":"/-- A polynomial as a continuous function,\nwith domain restricted to some subset of the semiring of coefficients.\n\n(This is particularly useful when restricting to compact sets, e.g. `[0,1]`.)\n-/\n@[simps]\ndef toContinuousMapOn (p : R[X]) (X : Set R) : C(X, R) :=\n  ⟨fun x : X => p.toContinuousMap x, by fun_prop⟩\n\n"}
{"name":"Polynomial.toContinuousMapOn_X_eq_restrict_id","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : Semiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\ns : Set R\n⊢ Eq (Polynomial.X.toContinuousMapOn s) (ContinuousMap.restrict s (ContinuousMap.id R))","decl":"open ContinuousMap in\nlemma toContinuousMapOn_X_eq_restrict_id (s : Set R) :\n    X.toContinuousMapOn s = restrict s (.id R) := by\n  ext; simp\n\n\n-- TODO some lemmas about when `toContinuousMapOn` is injective?\n"}
{"name":"Polynomial.aeval_continuousMap_apply","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\nα : Type u_2\ninst✝³ : TopologicalSpace α\ninst✝² : CommSemiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\ng : Polynomial R\nf : ContinuousMap α R\nx : α\n⊢ Eq (((Polynomial.aeval f) g) x) (Polynomial.eval (f x) g)","decl":"@[simp]\ntheorem aeval_continuousMap_apply (g : R[X]) (f : C(α, R)) (x : α) :\n    ((Polynomial.aeval f) g) x = g.eval (f x) := by\n  refine Polynomial.induction_on' g ?_ ?_\n  · intro p q hp hq\n    simp [hp, hq]\n  · intro n a\n    simp [Pi.pow_apply]\n\n"}
{"name":"Polynomial.toContinuousMapAlgHom_apply","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\np : Polynomial R\n⊢ Eq (Polynomial.toContinuousMapAlgHom p) p.toContinuousMap","decl":"/-- The algebra map from `R[X]` to continuous functions `C(R, R)`.\n-/\n@[simps]\ndef toContinuousMapAlgHom : R[X] →ₐ[R] C(R, R) where\n  toFun p := p.toContinuousMap\n  map_zero' := by\n    ext\n    simp\n  map_add' _ _ := by\n    ext\n    simp\n  map_one' := by\n    ext\n    simp\n  map_mul' _ _ := by\n    ext\n    simp\n  commutes' _ := by\n    ext\n    simp [Algebra.algebraMap_eq_smul_one]\n\n"}
{"name":"Polynomial.toContinuousMapOnAlgHom_apply","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\nX : Set R\np : Polynomial R\n⊢ Eq ((Polynomial.toContinuousMapOnAlgHom X) p) (p.toContinuousMapOn X)","decl":"/-- The algebra map from `R[X]` to continuous functions `C(X, R)`, for any subset `X` of `R`.\n-/\n@[simps]\ndef toContinuousMapOnAlgHom (X : Set R) : R[X] →ₐ[R] C(X, R) where\n  toFun p := p.toContinuousMapOn X\n  map_zero' := by\n    ext\n    simp\n  map_add' _ _ := by\n    ext\n    simp\n  map_one' := by\n    ext\n    simp\n  map_mul' _ _ := by\n    ext\n    simp\n  commutes' _ := by\n    ext\n    simp [Algebra.algebraMap_eq_smul_one]\n\n"}
{"name":"polynomialFunctions_coe","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\nX : Set R\n⊢ Eq (↑(polynomialFunctions X)) (Set.range ⇑(Polynomial.toContinuousMapOnAlgHom X))","decl":"@[simp]\ntheorem polynomialFunctions_coe (X : Set R) :\n    (polynomialFunctions X : Set C(X, R)) = Set.range (Polynomial.toContinuousMapOnAlgHom X) := by\n  ext\n  simp [polynomialFunctions]\n\n-- TODO:\n-- if `f : R → R` is an affine equivalence, then pulling back along `f`\n-- induces a normed algebra isomorphism between `polynomialFunctions X` and\n-- `polynomialFunctions (f ⁻¹' X)`, intertwining the pullback along `f` of `C(R, R)` to itself.\n"}
{"name":"polynomialFunctions_separatesPoints","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\nX : Set R\n⊢ (polynomialFunctions X).SeparatesPoints","decl":"theorem polynomialFunctions_separatesPoints (X : Set R) : (polynomialFunctions X).SeparatesPoints :=\n  fun x y h => by\n  -- We use `Polynomial.X`, then clean up.\n  refine ⟨_, ⟨⟨_, ⟨⟨Polynomial.X, ⟨Algebra.mem_top, rfl⟩⟩, rfl⟩⟩, ?_⟩⟩\n  dsimp; simp only [Polynomial.eval_X]\n  exact fun h' => h (Subtype.ext h')\n\n"}
{"name":"polynomialFunctions.comap_compRightAlgHom_iccHomeoI","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"a b : Real\nh : LT.lt a b\n⊢ Eq (Subalgebra.comap (ContinuousMap.compRightAlgHom Real Real ↑(iccHomeoI a b h).symm) (polynomialFunctions unitInterval)) (polynomialFunctions (Set.Icc a b))","decl":"/-- The preimage of polynomials on `[0,1]` under the pullback map by `x ↦ (b-a) * x + a`\nis the polynomials on `[a,b]`. -/\ntheorem polynomialFunctions.comap_compRightAlgHom_iccHomeoI (a b : ℝ) (h : a < b) :\n    (polynomialFunctions I).comap (compRightAlgHom ℝ ℝ (iccHomeoI a b h).symm) =\n      polynomialFunctions (Set.Icc a b) := by\n  ext f\n  fconstructor\n  · rintro ⟨p, ⟨-, w⟩⟩\n    rw [DFunLike.ext_iff] at w\n    dsimp at w\n    let q := p.comp ((b - a)⁻¹ • Polynomial.X + Polynomial.C (-a * (b - a)⁻¹))\n    refine ⟨q, ⟨?_, ?_⟩⟩\n    · simp\n    · ext x\n      simp only [q, neg_mul, RingHom.map_neg, RingHom.map_mul, AlgHom.coe_toRingHom,\n        Polynomial.eval_X, Polynomial.eval_neg, Polynomial.eval_C, Polynomial.eval_smul,\n        smul_eq_mul, Polynomial.eval_mul, Polynomial.eval_add, Polynomial.coe_aeval_eq_eval,\n        Polynomial.eval_comp, Polynomial.toContinuousMapOnAlgHom_apply,\n        Polynomial.toContinuousMapOn_apply, Polynomial.toContinuousMap_apply]\n      convert w ⟨_, _⟩\n      · ext\n        simp only [iccHomeoI_symm_apply_coe, Subtype.coe_mk]\n        replace h : b - a ≠ 0 := sub_ne_zero_of_ne h.ne.symm\n        simp only [mul_add]\n        field_simp\n        ring\n      · change _ + _ ∈ I\n        rw [mul_comm (b - a)⁻¹, ← neg_mul, ← add_mul, ← sub_eq_add_neg]\n        have w₁ : 0 < (b - a)⁻¹ := inv_pos.mpr (sub_pos.mpr h)\n        have w₂ : 0 ≤ (x : ℝ) - a := sub_nonneg.mpr x.2.1\n        have w₃ : (x : ℝ) - a ≤ b - a := sub_le_sub_right x.2.2 a\n        fconstructor\n        · exact mul_nonneg w₂ (le_of_lt w₁)\n        · rw [← div_eq_mul_inv, div_le_one (sub_pos.mpr h)]\n          exact w₃\n  · rintro ⟨p, ⟨-, rfl⟩⟩\n    let q := p.comp ((b - a) • Polynomial.X + Polynomial.C a)\n    refine ⟨q, ⟨?_, ?_⟩⟩\n    · simp\n    · ext x\n      simp [q, mul_comm]\n\n"}
{"name":"polynomialFunctions.eq_adjoin_X","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\ninst✝¹ : TopologicalSpace R\ninst✝ : TopologicalSemiring R\ns : Set R\n⊢ Eq (polynomialFunctions s) (Algebra.adjoin R (Singleton.singleton ((Polynomial.toContinuousMapOnAlgHom s) Polynomial.X)))","decl":"theorem polynomialFunctions.eq_adjoin_X (s : Set R) :\n    polynomialFunctions s = Algebra.adjoin R {toContinuousMapOnAlgHom s X} := by\n  refine le_antisymm ?_\n    (Algebra.adjoin_le fun _ h => ⟨X, trivial, (Set.mem_singleton_iff.1 h).symm⟩)\n  rintro - ⟨p, -, rfl⟩\n  rw [AlgHom.coe_toRingHom]\n  refine p.induction_on (fun r => ?_) (fun f g hf hg => ?_) fun n r hn => ?_\n  · rw [Polynomial.C_eq_algebraMap, AlgHomClass.commutes]\n    exact Subalgebra.algebraMap_mem _ r\n  · rw [map_add]\n    exact add_mem hf hg\n  · rw [pow_succ, ← mul_assoc, map_mul]\n    exact mul_mem hn (Algebra.subset_adjoin <| Set.mem_singleton _)\n\n"}
{"name":"polynomialFunctions.le_equalizer","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSpace R\ninst✝² : TopologicalSemiring R\nA : Type u_2\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\ns : Set R\nφ ψ : AlgHom R (ContinuousMap (↑s) R) A\nh : Eq (φ ((Polynomial.toContinuousMapOnAlgHom s) Polynomial.X)) (ψ ((Polynomial.toContinuousMapOnAlgHom s) Polynomial.X))\n⊢ LE.le (polynomialFunctions s) (AlgHom.equalizer φ ψ)","decl":"theorem polynomialFunctions.le_equalizer {A : Type*} [Semiring A] [Algebra R A] (s : Set R)\n    (φ ψ : C(s, R) →ₐ[R] A)\n    (h : φ (toContinuousMapOnAlgHom s X) = ψ (toContinuousMapOnAlgHom s X)) :\n    polynomialFunctions s ≤ AlgHom.equalizer φ ψ := by\n  rw [polynomialFunctions.eq_adjoin_X s]\n  exact φ.adjoin_le_equalizer ψ fun x hx => (Set.mem_singleton_iff.1 hx).symm ▸ h\n\n"}
{"name":"polynomialFunctions.starClosure_eq_adjoin_X","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝⁴ : CommSemiring R\ninst✝³ : TopologicalSpace R\ninst✝² : TopologicalSemiring R\ninst✝¹ : StarRing R\ninst✝ : ContinuousStar R\ns : Set R\n⊢ Eq (polynomialFunctions s).starClosure (StarAlgebra.adjoin R (Singleton.singleton ((Polynomial.toContinuousMapOnAlgHom s) Polynomial.X)))","decl":"theorem polynomialFunctions.starClosure_eq_adjoin_X [StarRing R] [ContinuousStar R] (s : Set R) :\n    (polynomialFunctions s).starClosure = adjoin R {toContinuousMapOnAlgHom s X} := by\n  rw [polynomialFunctions.eq_adjoin_X s, adjoin_eq_starClosure_adjoin]\n\n"}
{"name":"polynomialFunctions.starClosure_le_equalizer","module":"Mathlib.Topology.ContinuousMap.Polynomial","initialProofState":"R : Type u_1\ninst✝⁷ : CommSemiring R\ninst✝⁶ : TopologicalSpace R\ninst✝⁵ : TopologicalSemiring R\nA : Type u_2\ninst✝⁴ : StarRing R\ninst✝³ : ContinuousStar R\ninst✝² : Semiring A\ninst✝¹ : StarRing A\ninst✝ : Algebra R A\ns : Set R\nφ ψ : StarAlgHom R (ContinuousMap (↑s) R) A\nh : Eq (φ ((Polynomial.toContinuousMapOnAlgHom s) Polynomial.X)) (ψ ((Polynomial.toContinuousMapOnAlgHom s) Polynomial.X))\n⊢ LE.le (polynomialFunctions s).starClosure (StarAlgHom.equalizer φ ψ)","decl":"theorem polynomialFunctions.starClosure_le_equalizer {A : Type*} [StarRing R] [ContinuousStar R]\n    [Semiring A] [StarRing A] [Algebra R A] (s : Set R) (φ ψ : C(s, R) →⋆ₐ[R] A)\n    (h : φ (toContinuousMapOnAlgHom s X) = ψ (toContinuousMapOnAlgHom s X)) :\n    (polynomialFunctions s).starClosure ≤ StarAlgHom.equalizer φ ψ := by\n  rw [polynomialFunctions.starClosure_eq_adjoin_X s]\n  exact StarAlgHom.adjoin_le_equalizer φ ψ fun x hx => (Set.mem_singleton_iff.1 hx).symm ▸ h\n\n"}
