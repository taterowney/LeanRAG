{"name":"nhds_list","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nas : List α\n⊢ Eq (nhds as) (Traversable.traverse nhds as)","decl":"theorem nhds_list (as : List α) : 𝓝 as = traverse 𝓝 as := by\n  refine nhds_mkOfNhds _ _ ?_ ?_\n  · intro l\n    induction l with\n    | nil => exact le_rfl\n    | cons a l ih =>\n      suffices List.cons <$> pure a <*> pure l ≤ List.cons <$> 𝓝 a <*> traverse 𝓝 l by\n        simpa only [functor_norm] using this\n      exact Filter.seq_mono (Filter.map_mono <| pure_le_nhds a) ih\n  · intro l s hs\n    rcases (mem_traverse_iff _ _).1 hs with ⟨u, hu, hus⟩\n    clear as hs\n    have : ∃ v : List (Set α), l.Forall₂ (fun a s => IsOpen s ∧ a ∈ s) v ∧ sequence v ⊆ s := by\n      induction hu generalizing s with\n      | nil =>\n        exists []\n        simp only [List.forall₂_nil_left_iff, exists_eq_left]\n        exact ⟨trivial, hus⟩\n      -- porting note -- renamed reordered variables based on previous types\n      | cons ht _ ih =>\n        rcases mem_nhds_iff.1 ht with ⟨u, hut, hu⟩\n        rcases ih _ Subset.rfl with ⟨v, hv, hvss⟩\n        exact\n          ⟨u::v, List.Forall₂.cons hu hv,\n            Subset.trans (Set.seq_mono (Set.image_subset _ hut) hvss) hus⟩\n    rcases this with ⟨v, hv, hvs⟩\n    have : sequence v ∈ traverse 𝓝 l :=\n      mem_traverse _ _ <| hv.imp fun a s ⟨hs, ha⟩ => IsOpen.mem_nhds hs ha\n    refine mem_of_superset this fun u hu ↦ ?_\n    have hu := (List.mem_traverse _ _).1 hu\n    have : List.Forall₂ (fun a s => IsOpen s ∧ a ∈ s) u v := by\n      refine List.Forall₂.flip ?_\n      replace hv := hv.flip\n      simp only [List.forall₂_and_left, Function.flip_def] at hv ⊢\n      exact ⟨hv.1, hu.flip⟩\n    refine mem_of_superset ?_ hvs\n    exact mem_traverse _ _ (this.imp fun a s ⟨hs, ha⟩ => IsOpen.mem_nhds hs ha)\n\n"}
{"name":"nhds_nil","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Eq (nhds List.nil) (Pure.pure List.nil)","decl":"@[simp]\ntheorem nhds_nil : 𝓝 ([] : List α) = pure [] := by\n  rw [nhds_list, List.traverse_nil _]\n\n"}
{"name":"nhds_cons","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na : α\nl : List α\n⊢ Eq (nhds (List.cons a l)) (Seq.seq (Functor.map List.cons (nhds a)) fun x => nhds l)","decl":"theorem nhds_cons (a : α) (l : List α) : 𝓝 (a::l) = List.cons <$> 𝓝 a <*> 𝓝 l := by\n  rw [nhds_list, List.traverse_cons _, ← nhds_list]\n\n"}
{"name":"List.tendsto_cons","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na : α\nl : List α\n⊢ Filter.Tendsto (fun p => List.cons p.1 p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.cons a l))","decl":"theorem List.tendsto_cons {a : α} {l : List α} :\n    Tendsto (fun p : α × List α => List.cons p.1 p.2) (𝓝 a ×ˢ 𝓝 l) (𝓝 (a::l)) := by\n  rw [nhds_cons, Tendsto, Filter.map_prod]; exact le_rfl\n\n"}
{"name":"Filter.Tendsto.cons","module":"Mathlib.Topology.List","initialProofState":"β : Type u_2\ninst✝ : TopologicalSpace β\nα : Type u_3\nf : α → β\ng : α → List β\na : Filter α\nb : β\nl : List β\nhf : Filter.Tendsto f a (nhds b)\nhg : Filter.Tendsto g a (nhds l)\n⊢ Filter.Tendsto (fun a => List.cons (f a) (g a)) a (nhds (List.cons b l))","decl":"theorem Filter.Tendsto.cons {α : Type*} {f : α → β} {g : α → List β} {a : Filter α} {b : β}\n    {l : List β} (hf : Tendsto f a (𝓝 b)) (hg : Tendsto g a (𝓝 l)) :\n    Tendsto (fun a => List.cons (f a) (g a)) a (𝓝 (b::l)) :=\n  List.tendsto_cons.comp (Tendsto.prod_mk hf hg)\n\n"}
{"name":"List.tendsto_cons_iff","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nβ : Type u_3\nf : List α → β\nb : Filter β\na : α\nl : List α\n⊢ Iff (Filter.Tendsto f (nhds (List.cons a l)) b) (Filter.Tendsto (fun p => f (List.cons p.1 p.2)) (SProd.sprod (nhds a) (nhds l)) b)","decl":"theorem tendsto_cons_iff {β : Type*} {f : List α → β} {b : Filter β} {a : α} {l : List α} :\n    Tendsto f (𝓝 (a::l)) b ↔ Tendsto (fun p : α × List α => f (p.1::p.2)) (𝓝 a ×ˢ 𝓝 l) b := by\n  have : 𝓝 (a::l) = (𝓝 a ×ˢ 𝓝 l).map fun p : α × List α => p.1::p.2 := by\n    simp only [nhds_cons, Filter.prod_eq, (Filter.map_def _ _).symm,\n      (Filter.seq_eq_filter_seq _ _).symm]\n    simp [-Filter.map_def, Function.comp_def, functor_norm]\n  rw [this, Filter.tendsto_map'_iff]; rfl\n\n"}
{"name":"List.continuous_cons","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Continuous fun x => List.cons x.1 x.2","decl":"theorem continuous_cons : Continuous fun x : α × List α => (x.1::x.2 : List α) :=\n  continuous_iff_continuousAt.mpr fun ⟨_x, _y⟩ => continuousAt_fst.cons continuousAt_snd\n\n"}
{"name":"List.tendsto_nhds","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nβ : Type u_3\nf : List α → β\nr : List α → Filter β\nh_nil : Filter.Tendsto f (Pure.pure List.nil) (r List.nil)\nh_cons : ∀ (l : List α) (a : α), Filter.Tendsto f (nhds l) (r l) → Filter.Tendsto (fun p => f (List.cons p.1 p.2)) (SProd.sprod (nhds a) (nhds l)) (r (List.cons a l))\nl : List α\n⊢ Filter.Tendsto f (nhds l) (r l)","decl":"theorem tendsto_nhds {β : Type*} {f : List α → β} {r : List α → Filter β}\n    (h_nil : Tendsto f (pure []) (r []))\n    (h_cons :\n      ∀ l a,\n        Tendsto f (𝓝 l) (r l) →\n          Tendsto (fun p : α × List α => f (p.1::p.2)) (𝓝 a ×ˢ 𝓝 l) (r (a::l))) :\n    ∀ l, Tendsto f (𝓝 l) (r l)\n  | [] => by rwa [nhds_nil]\n  | a::l => by\n    rw [tendsto_cons_iff]; exact h_cons l a (@tendsto_nhds _ _ _ h_nil h_cons l)\n\n"}
{"name":"List.instDiscreteTopology","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : DiscreteTopology α\n⊢ DiscreteTopology (List α)","decl":"instance [DiscreteTopology α] : DiscreteTopology (List α) := by\n  rw [discreteTopology_iff_nhds]; intro l; induction l <;> simp [*, nhds_cons]\n\n"}
{"name":"List.continuousAt_length","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nl : List α\n⊢ ContinuousAt List.length l","decl":"theorem continuousAt_length : ∀ l : List α, ContinuousAt List.length l := by\n  simp only [ContinuousAt, nhds_discrete]\n  refine tendsto_nhds ?_ ?_\n  · exact tendsto_pure_pure _ _\n  · intro l a ih\n    dsimp only [List.length]\n    refine Tendsto.comp (tendsto_pure_pure (fun x => x + 1) _) ?_\n    exact Tendsto.comp ih tendsto_snd\n\n"}
{"name":"List.tendsto_insertIdx'","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na : α\nn : Nat\nl : List α\n⊢ Filter.Tendsto (fun p => List.insertIdx n p.1 p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.insertIdx n a l))","decl":"/-- Continuity of `insertIdx` in terms of `Tendsto`. -/\ntheorem tendsto_insertIdx' {a : α} :\n    ∀ {n : ℕ} {l : List α},\n      Tendsto (fun p : α × List α => insertIdx n p.1 p.2) (𝓝 a ×ˢ 𝓝 l) (𝓝 (insertIdx n a l))\n  | 0, _ => tendsto_cons\n  | n + 1, [] => by simp\n  | n + 1, a'::l => by\n    have : 𝓝 a ×ˢ 𝓝 (a'::l) =\n        (𝓝 a ×ˢ (𝓝 a' ×ˢ 𝓝 l)).map fun p : α × α × List α => (p.1, p.2.1::p.2.2) := by\n      simp only [nhds_cons, Filter.prod_eq, ← Filter.map_def, ← Filter.seq_eq_filter_seq]\n      simp [-Filter.map_def, Function.comp_def, functor_norm]\n    rw [this, tendsto_map'_iff]\n    exact\n      (tendsto_fst.comp tendsto_snd).cons\n        ((@tendsto_insertIdx' _ n l).comp <| tendsto_fst.prod_mk <| tendsto_snd.comp tendsto_snd)\n\n"}
{"name":"List.tendsto_insertNth'","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na : α\nn : Nat\nl : List α\n⊢ Filter.Tendsto (fun p => List.insertIdx n p.1 p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.insertIdx n a l))","decl":"@[deprecated (since := \"2024-10-21\")] alias tendsto_insertNth' := tendsto_insertIdx'\n\n"}
{"name":"List.tendsto_insertIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nβ : Type u_3\nn : Nat\na : α\nl : List α\nf : β → α\ng : β → List α\nb : Filter β\nhf : Filter.Tendsto f b (nhds a)\nhg : Filter.Tendsto g b (nhds l)\n⊢ Filter.Tendsto (fun b => List.insertIdx n (f b) (g b)) b (nhds (List.insertIdx n a l))","decl":"theorem tendsto_insertIdx {β} {n : ℕ} {a : α} {l : List α} {f : β → α} {g : β → List α}\n    {b : Filter β} (hf : Tendsto f b (𝓝 a)) (hg : Tendsto g b (𝓝 l)) :\n    Tendsto (fun b : β => insertIdx n (f b) (g b)) b (𝓝 (insertIdx n a l)) :=\n  tendsto_insertIdx'.comp (Tendsto.prod_mk hf hg)\n\n"}
{"name":"List.tendsto_insertNth","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na : α\nn : Nat\nl : List α\n⊢ Filter.Tendsto (fun p => List.insertIdx n p.1 p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.insertIdx n a l))","decl":"@[deprecated (since := \"2024-10-21\")] alias tendsto_insertNth := tendsto_insertIdx'\n\n"}
{"name":"List.continuous_insertIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\n⊢ Continuous fun p => List.insertIdx n p.1 p.2","decl":"theorem continuous_insertIdx {n : ℕ} : Continuous fun p : α × List α => insertIdx n p.1 p.2 :=\n  continuous_iff_continuousAt.mpr fun ⟨a, l⟩ => by\n    rw [ContinuousAt, nhds_prod_eq]; exact tendsto_insertIdx'\n\n"}
{"name":"List.continuous_insertNth","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\n⊢ Continuous fun p => List.insertIdx n p.1 p.2","decl":"@[deprecated (since := \"2024-10-21\")] alias continuous_insertNth := continuous_insertIdx\n\n"}
{"name":"List.tendsto_eraseIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\nl : List α\n⊢ Filter.Tendsto (fun x => x.eraseIdx n) (nhds l) (nhds (l.eraseIdx n))","decl":"theorem tendsto_eraseIdx :\n    ∀ {n : ℕ} {l : List α}, Tendsto (eraseIdx · n) (𝓝 l) (𝓝 (eraseIdx l n))\n  | _, [] => by rw [nhds_nil]; exact tendsto_pure_nhds _ _\n  | 0, a::l => by rw [tendsto_cons_iff]; exact tendsto_snd\n  | n + 1, a::l => by\n    rw [tendsto_cons_iff]\n    dsimp [eraseIdx]\n    exact tendsto_fst.cons ((@tendsto_eraseIdx n l).comp tendsto_snd)\n\n"}
{"name":"List.continuous_eraseIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\n⊢ Continuous fun l => l.eraseIdx n","decl":"theorem continuous_eraseIdx {n : ℕ} : Continuous fun l : List α => eraseIdx l n :=\n  continuous_iff_continuousAt.mpr fun _a => tendsto_eraseIdx\n\n"}
{"name":"List.tendsto_sum","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : AddMonoid α\ninst✝ : ContinuousAdd α\nl : List α\n⊢ Filter.Tendsto List.sum (nhds l) (nhds l.sum)","decl":"@[to_additive]\ntheorem tendsto_prod [Monoid α] [ContinuousMul α] {l : List α} :\n    Tendsto List.prod (𝓝 l) (𝓝 l.prod) := by\n  induction' l with x l ih\n  · simp +contextual [nhds_nil, mem_of_mem_nhds, tendsto_pure_left]\n  simp_rw [tendsto_cons_iff, prod_cons]\n  have := continuous_iff_continuousAt.mp continuous_mul (x, l.prod)\n  rw [ContinuousAt, nhds_prod_eq] at this\n  exact this.comp (tendsto_id.prod_map ih)\n\n"}
{"name":"List.tendsto_prod","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Monoid α\ninst✝ : ContinuousMul α\nl : List α\n⊢ Filter.Tendsto List.prod (nhds l) (nhds l.prod)","decl":"@[to_additive]\ntheorem tendsto_prod [Monoid α] [ContinuousMul α] {l : List α} :\n    Tendsto List.prod (𝓝 l) (𝓝 l.prod) := by\n  induction' l with x l ih\n  · simp +contextual [nhds_nil, mem_of_mem_nhds, tendsto_pure_left]\n  simp_rw [tendsto_cons_iff, prod_cons]\n  have := continuous_iff_continuousAt.mp continuous_mul (x, l.prod)\n  rw [ContinuousAt, nhds_prod_eq] at this\n  exact this.comp (tendsto_id.prod_map ih)\n\n"}
{"name":"List.continuous_sum","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : AddMonoid α\ninst✝ : ContinuousAdd α\n⊢ Continuous List.sum","decl":"@[to_additive]\ntheorem continuous_prod [Monoid α] [ContinuousMul α] : Continuous (prod : List α → α) :=\n  continuous_iff_continuousAt.mpr fun _l => tendsto_prod\n\n"}
{"name":"List.continuous_prod","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Monoid α\ninst✝ : ContinuousMul α\n⊢ Continuous List.prod","decl":"@[to_additive]\ntheorem continuous_prod [Monoid α] [ContinuousMul α] : Continuous (prod : List α → α) :=\n  continuous_iff_continuousAt.mpr fun _l => tendsto_prod\n\n"}
{"name":"Vector.tendsto_cons","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\na : α\nl : List.Vector α n\n⊢ Filter.Tendsto (fun p => List.Vector.cons p.1 p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.Vector.cons a l))","decl":"theorem tendsto_cons {n : ℕ} {a : α} {l : List.Vector α n} :\n    Tendsto (fun p : α × List.Vector α n => p.1 ::ᵥ p.2) (𝓝 a ×ˢ 𝓝 l) (𝓝 (a ::ᵥ l)) := by\n  rw [tendsto_subtype_rng, Vector.cons_val]\n  exact tendsto_fst.cons (Tendsto.comp continuousAt_subtype_val tendsto_snd)\n\n"}
{"name":"Vector.tendsto_insertIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\ni : Fin (HAdd.hAdd n 1)\na : α\nl : List.Vector α n\n⊢ Filter.Tendsto (fun p => List.Vector.insertIdx p.1 i p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.Vector.insertIdx a i l))","decl":"theorem tendsto_insertIdx {n : ℕ} {i : Fin (n + 1)} {a : α} :\n    ∀ {l : List.Vector α n},\n      Tendsto (fun p : α × List.Vector α n => Vector.insertIdx p.1 i p.2) (𝓝 a ×ˢ 𝓝 l)\n        (𝓝 (Vector.insertIdx a i l))\n  | ⟨l, hl⟩ => by\n    rw [Vector.insertIdx, tendsto_subtype_rng]\n    simp only [Vector.insertIdx_val]\n    exact List.tendsto_insertIdx tendsto_fst (Tendsto.comp continuousAt_subtype_val tendsto_snd : _)\n\n"}
{"name":"Vector.tendsto_insertNth","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\na : α\nn : Nat\nl : List α\n⊢ Filter.Tendsto (fun p => List.insertIdx n p.1 p.2) (SProd.sprod (nhds a) (nhds l)) (nhds (List.insertIdx n a l))","decl":"@[deprecated (since := \"2024-10-21\")] alias tendsto_insertNth := tendsto_insertIdx'\n\n"}
{"name":"Vector.continuous_insertIdx'","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\ni : Fin (HAdd.hAdd n 1)\n⊢ Continuous fun p => List.Vector.insertIdx p.1 i p.2","decl":"/-- Continuity of `Vector.insertIdx`. -/\ntheorem continuous_insertIdx' {n : ℕ} {i : Fin (n + 1)} :\n    Continuous fun p : α × List.Vector α n => Vector.insertIdx p.1 i p.2 :=\n  continuous_iff_continuousAt.mpr fun ⟨a, l⟩ => by\n    rw [ContinuousAt, nhds_prod_eq]; exact tendsto_insertIdx\n\n"}
{"name":"Vector.continuous_insertNth'","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\ni : Fin (HAdd.hAdd n 1)\n⊢ Continuous fun p => List.Vector.insertIdx p.1 i p.2","decl":"@[deprecated (since := \"2024-10-21\")] alias continuous_insertNth' := continuous_insertIdx'\n\n"}
{"name":"Vector.continuous_insertIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nf : β → α\ng : β → List.Vector α n\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun b => List.Vector.insertIdx (f b) i (g b)","decl":"theorem continuous_insertIdx {n : ℕ} {i : Fin (n + 1)} {f : β → α} {g : β → List.Vector α n}\n    (hf : Continuous f) (hg : Continuous g) : Continuous fun b => Vector.insertIdx (f b) i (g b) :=\n  continuous_insertIdx'.comp (hf.prod_mk hg)\n\n"}
{"name":"Vector.continuous_insertNth","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nf : β → α\ng : β → List.Vector α n\nhf : Continuous f\nhg : Continuous g\n⊢ Continuous fun b => List.Vector.insertIdx (f b) i (g b)","decl":"@[deprecated (since := \"2024-10-21\")] alias continuous_insertNth := continuous_insertIdx\n\n"}
{"name":"Vector.continuousAt_eraseIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nl : List.Vector α (HAdd.hAdd n 1)\n⊢ ContinuousAt (List.Vector.eraseIdx i) l","decl":"theorem continuousAt_eraseIdx {n : ℕ} {i : Fin (n + 1)} :\n    ∀ {l : List.Vector α (n + 1)}, ContinuousAt (List.Vector.eraseIdx i) l\n  | ⟨l, hl⟩ => by\n    rw [ContinuousAt, List.Vector.eraseIdx, tendsto_subtype_rng]\n    simp only [Vector.eraseIdx_val]\n    exact Tendsto.comp List.tendsto_eraseIdx continuousAt_subtype_val\n\n"}
{"name":"Vector.continuous_eraseIdx","module":"Mathlib.Topology.List","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nn : Nat\ni : Fin (HAdd.hAdd n 1)\n⊢ Continuous (List.Vector.eraseIdx i)","decl":"theorem continuous_eraseIdx {n : ℕ} {i : Fin (n + 1)} :\n    Continuous (List.Vector.eraseIdx i : List.Vector α (n + 1) → List.Vector α n) :=\n  continuous_iff_continuousAt.mpr fun ⟨_a, _l⟩ => continuousAt_eraseIdx\n\n"}
