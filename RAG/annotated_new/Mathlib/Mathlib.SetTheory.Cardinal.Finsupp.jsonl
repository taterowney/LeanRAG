{"name":"Cardinal.mk_finsupp_lift_of_fintype","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : Fintype α\ninst✝ : Zero β\n⊢ Eq (Cardinal.mk (Finsupp α β)) (HPow.hPow (Cardinal.lift.{u, v} (Cardinal.mk β)) (Fintype.card α))","decl":"@[simp]\ntheorem mk_finsupp_lift_of_fintype (α : Type u) (β : Type v) [Fintype α] [Zero β] :\n    #(α →₀ β) = lift.{u} #β ^ Fintype.card α := by\n  simpa using (@Finsupp.equivFunOnFinite α β _ _).cardinal_eq\n\n"}
{"name":"Cardinal.mk_finsupp_of_fintype","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α β : Type u\ninst✝¹ : Fintype α\ninst✝ : Zero β\n⊢ Eq (Cardinal.mk (Finsupp α β)) (HPow.hPow (Cardinal.mk β) (Fintype.card α))","decl":"theorem mk_finsupp_of_fintype (α β : Type u) [Fintype α] [Zero β] :\n    #(α →₀ β) = #β ^ Fintype.card α := by simp\n\n"}
{"name":"Cardinal.mk_finsupp_lift_of_infinite","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\nβ : Type v\ninst✝² : Infinite α\ninst✝¹ : Zero β\ninst✝ : Nontrivial β\n⊢ Eq (Cardinal.mk (Finsupp α β)) (Max.max (Cardinal.lift.{v, u} (Cardinal.mk α)) (Cardinal.lift.{u, v} (Cardinal.mk β)))","decl":"@[simp]\ntheorem mk_finsupp_lift_of_infinite (α : Type u) (β : Type v) [Infinite α] [Zero β] [Nontrivial β] :\n    #(α →₀ β) = max (lift.{v} #α) (lift.{u} #β) := by\n  apply le_antisymm\n  · calc\n      #(α →₀ β) ≤ #(Finset (α × β)) := mk_le_of_injective (Finsupp.graph_injective α β)\n      _ = #(α × β) := mk_finset_of_infinite _\n      _ = max (lift.{v} #α) (lift.{u} #β) := by\n        rw [mk_prod, mul_eq_max_of_aleph0_le_left] <;> simp\n\n  · apply max_le <;> rw [← lift_id #(α →₀ β), ← lift_umax]\n    · cases' exists_ne (0 : β) with b hb\n      exact lift_mk_le.{v}.2 ⟨⟨_, Finsupp.single_left_injective hb⟩⟩\n    · inhabit α\n      exact lift_mk_le.{u}.2 ⟨⟨_, Finsupp.single_injective default⟩⟩\n\n"}
{"name":"Cardinal.mk_finsupp_of_infinite","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α β : Type u\ninst✝² : Infinite α\ninst✝¹ : Zero β\ninst✝ : Nontrivial β\n⊢ Eq (Cardinal.mk (Finsupp α β)) (Max.max (Cardinal.mk α) (Cardinal.mk β))","decl":"theorem mk_finsupp_of_infinite (α β : Type u) [Infinite α] [Zero β] [Nontrivial β] :\n    #(α →₀ β) = max #α #β := by simp\n\n"}
{"name":"Cardinal.mk_finsupp_lift_of_infinite'","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\nβ : Type v\ninst✝² : Nonempty α\ninst✝¹ : Zero β\ninst✝ : Infinite β\n⊢ Eq (Cardinal.mk (Finsupp α β)) (Max.max (Cardinal.lift.{v, u} (Cardinal.mk α)) (Cardinal.lift.{u, v} (Cardinal.mk β)))","decl":"@[simp]\ntheorem mk_finsupp_lift_of_infinite' (α : Type u) (β : Type v) [Nonempty α] [Zero β] [Infinite β] :\n    #(α →₀ β) = max (lift.{v} #α) (lift.{u} #β) := by\n  cases fintypeOrInfinite α\n  · rw [mk_finsupp_lift_of_fintype]\n    have : ℵ₀ ≤ (#β).lift := aleph0_le_lift.2 (aleph0_le_mk β)\n    rw [max_eq_right (le_trans _ this), power_nat_eq this]\n    exacts [Fintype.card_pos, lift_le_aleph0.2 (lt_aleph0_of_finite _).le]\n  · apply mk_finsupp_lift_of_infinite\n\n"}
{"name":"Cardinal.mk_finsupp_of_infinite'","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α β : Type u\ninst✝² : Nonempty α\ninst✝¹ : Zero β\ninst✝ : Infinite β\n⊢ Eq (Cardinal.mk (Finsupp α β)) (Max.max (Cardinal.mk α) (Cardinal.mk β))","decl":"theorem mk_finsupp_of_infinite' (α β : Type u) [Nonempty α] [Zero β] [Infinite β] :\n    #(α →₀ β) = max #α #β := by simp\n\n"}
{"name":"Cardinal.mk_finsupp_nat","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\ninst✝ : Nonempty α\n⊢ Eq (Cardinal.mk (Finsupp α Nat)) (Max.max (Cardinal.mk α) Cardinal.aleph0)","decl":"theorem mk_finsupp_nat (α : Type u) [Nonempty α] : #(α →₀ ℕ) = max #α ℵ₀ := by simp\n\n"}
{"name":"Cardinal.mk_multiset_of_isEmpty","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\ninst✝ : IsEmpty α\n⊢ Eq (Cardinal.mk (Multiset α)) 1","decl":"theorem mk_multiset_of_isEmpty (α : Type u) [IsEmpty α] : #(Multiset α) = 1 :=\n  Multiset.toFinsupp.toEquiv.cardinal_eq.trans (by simp)\n\n"}
{"name":"Cardinal.mk_multiset_of_nonempty","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\ninst✝ : Nonempty α\n⊢ Eq (Cardinal.mk (Multiset α)) (Max.max (Cardinal.mk α) Cardinal.aleph0)","decl":"@[simp]\ntheorem mk_multiset_of_nonempty (α : Type u) [Nonempty α] : #(Multiset α) = max #α ℵ₀ := by\n  classical\n  exact Multiset.toFinsupp.toEquiv.cardinal_eq.trans (mk_finsupp_nat α)\n\n"}
{"name":"Cardinal.mk_multiset_of_infinite","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\ninst✝ : Infinite α\n⊢ Eq (Cardinal.mk (Multiset α)) (Cardinal.mk α)","decl":"theorem mk_multiset_of_infinite (α : Type u) [Infinite α] : #(Multiset α) = #α := by simp\n\n"}
{"name":"Cardinal.mk_multiset_of_countable","module":"Mathlib.SetTheory.Cardinal.Finsupp","initialProofState":"α : Type u\ninst✝¹ : Countable α\ninst✝ : Nonempty α\n⊢ Eq (Cardinal.mk (Multiset α)) Cardinal.aleph0","decl":"theorem mk_multiset_of_countable (α : Type u) [Countable α] [Nonempty α] : #(Multiset α) = ℵ₀ := by\n  classical\n  exact Multiset.toFinsupp.toEquiv.cardinal_eq.trans (by simp)\n\n"}
