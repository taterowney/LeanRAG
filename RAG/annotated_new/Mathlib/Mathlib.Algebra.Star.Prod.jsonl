{"name":"Prod.fst_star","module":"Mathlib.Algebra.Star.Prod","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Star R\ninst✝ : Star S\nx : Prod R S\n⊢ Eq (Star.star x).1 (Star.star x.1)","decl":"@[simp]\ntheorem fst_star [Star R] [Star S] (x : R × S) : (star x).1 = star x.1 :=\n  rfl\n\n"}
{"name":"Prod.snd_star","module":"Mathlib.Algebra.Star.Prod","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Star R\ninst✝ : Star S\nx : Prod R S\n⊢ Eq (Star.star x).2 (Star.star x.2)","decl":"@[simp]\ntheorem snd_star [Star R] [Star S] (x : R × S) : (star x).2 = star x.2 :=\n  rfl\n\n"}
{"name":"Prod.star_def","module":"Mathlib.Algebra.Star.Prod","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Star R\ninst✝ : Star S\nx : Prod R S\n⊢ Eq (Star.star x) { fst := Star.star x.1, snd := Star.star x.2 }","decl":"theorem star_def [Star R] [Star S] (x : R × S) : star x = (star x.1, star x.2) :=\n  rfl\n\n"}
{"name":"Prod.instTrivialStar","module":"Mathlib.Algebra.Star.Prod","initialProofState":"R : Type u\nS : Type v\ninst✝³ : Star R\ninst✝² : Star S\ninst✝¹ : TrivialStar R\ninst✝ : TrivialStar S\n⊢ TrivialStar (Prod R S)","decl":"instance [Star R] [Star S] [TrivialStar R] [TrivialStar S] : TrivialStar (R × S) where\n  star_trivial _ := Prod.ext (star_trivial _) (star_trivial _)\n\n"}
{"name":"Prod.instStarModule","module":"Mathlib.Algebra.Star.Prod","initialProofState":"R : Type u\nS : Type v\nα : Type w\ninst✝⁶ : SMul α R\ninst✝⁵ : SMul α S\ninst✝⁴ : Star α\ninst✝³ : Star R\ninst✝² : Star S\ninst✝¹ : StarModule α R\ninst✝ : StarModule α S\n⊢ StarModule α (Prod R S)","decl":"instance {α : Type w} [SMul α R] [SMul α S] [Star α] [Star R] [Star S]\n    [StarModule α R] [StarModule α S] : StarModule α (R × S) where\n  star_smul _ _ := Prod.ext (star_smul _ _) (star_smul _ _)\n\n"}
{"name":"Units.embed_product_star","module":"Mathlib.Algebra.Star.Prod","initialProofState":"R : Type u\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nu : Units R\n⊢ Eq ((Units.embedProduct R) (Star.star u)) (Star.star ((Units.embedProduct R) u))","decl":"theorem Units.embed_product_star [Monoid R] [StarMul R] (u : Rˣ) :\n    Units.embedProduct R (star u) = star (Units.embedProduct R u) :=\n  rfl\n"}
