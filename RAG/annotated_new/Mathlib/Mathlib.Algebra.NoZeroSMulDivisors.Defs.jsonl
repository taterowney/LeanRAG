{"name":"noZeroSMulDivisors_iff","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝² : Zero R\ninst✝¹ : Zero M\ninst✝ : SMul R M\n⊢ Iff (NoZeroSMulDivisors R M) (∀ {c : R} {x : M}, Eq (HSMul.hSMul c x) 0 → Or (Eq c 0) (Eq x 0))","decl":"/-- `NoZeroSMulDivisors R M` states that a scalar multiple is `0` only if either argument is `0`.\nThis is a version of saying that `M` is torsion free, without assuming `R` is zero-divisor free.\n\nThe main application of `NoZeroSMulDivisors R M`, when `M` is a module,\nis the result `smul_eq_zero`: a scalar multiple is `0` iff either argument is `0`.\n\nIt is a generalization of the `NoZeroDivisors` class to heterogeneous multiplication.\n-/\n@[mk_iff]\nclass NoZeroSMulDivisors (R M : Type*) [Zero R] [Zero M] [SMul R M] : Prop where\n  /-- If scalar multiplication yields zero, either the scalar or the vector was zero. -/\n  eq_zero_or_eq_zero_of_smul_eq_zero : ∀ {c : R} {x : M}, c • x = 0 → c = 0 ∨ x = 0\n\n"}
{"name":"NoZeroSMulDivisors.eq_zero_or_eq_zero_of_smul_eq_zero","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_3\nM : Type u_4\ninst✝² : Zero R\ninst✝¹ : Zero M\ninst✝ : SMul R M\nself : NoZeroSMulDivisors R M\nc : R\nx : M\na✝ : Eq (HSMul.hSMul c x) 0\n⊢ Or (Eq c 0) (Eq x 0)","decl":"/-- `NoZeroSMulDivisors R M` states that a scalar multiple is `0` only if either argument is `0`.\nThis is a version of saying that `M` is torsion free, without assuming `R` is zero-divisor free.\n\nThe main application of `NoZeroSMulDivisors R M`, when `M` is a module,\nis the result `smul_eq_zero`: a scalar multiple is `0` iff either argument is `0`.\n\nIt is a generalization of the `NoZeroDivisors` class to heterogeneous multiplication.\n-/\n@[mk_iff]\nclass NoZeroSMulDivisors (R M : Type*) [Zero R] [Zero M] [SMul R M] : Prop where\n  /-- If scalar multiplication yields zero, either the scalar or the vector was zero. -/\n  eq_zero_or_eq_zero_of_smul_eq_zero : ∀ {c : R} {x : M}, c • x = 0 → c = 0 ∨ x = 0\n\n"}
{"name":"Function.Injective.noZeroSMulDivisors","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_3\nM : Type u_4\nN : Type u_5\ninst✝⁵ : Zero R\ninst✝⁴ : Zero M\ninst✝³ : Zero N\ninst✝² : SMul R M\ninst✝¹ : SMul R N\ninst✝ : NoZeroSMulDivisors R N\nf : M → N\nhf : Function.Injective f\nh0 : Eq (f 0) 0\nhs : ∀ (c : R) (x : M), Eq (f (HSMul.hSMul c x)) (HSMul.hSMul c (f x))\n⊢ NoZeroSMulDivisors R M","decl":"/-- Pullback a `NoZeroSMulDivisors` instance along an injective function. -/\ntheorem Function.Injective.noZeroSMulDivisors {R M N : Type*} [Zero R] [Zero M] [Zero N]\n    [SMul R M] [SMul R N] [NoZeroSMulDivisors R N] (f : M → N) (hf : Function.Injective f)\n    (h0 : f 0 = 0) (hs : ∀ (c : R) (x : M), f (c • x) = c • f x) : NoZeroSMulDivisors R M :=\n  ⟨fun {_ _} h =>\n    Or.imp_right (@hf _ _) <| h0.symm ▸ eq_zero_or_eq_zero_of_smul_eq_zero (by rw [← hs, h, h0])⟩\n\n-- See note [lower instance priority]\n"}
{"name":"NoZeroDivisors.toNoZeroSMulDivisors","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\ninst✝² : Zero R\ninst✝¹ : Mul R\ninst✝ : NoZeroDivisors R\n⊢ NoZeroSMulDivisors R R","decl":"instance (priority := 100) NoZeroDivisors.toNoZeroSMulDivisors [Zero R] [Mul R]\n    [NoZeroDivisors R] : NoZeroSMulDivisors R R :=\n  ⟨fun {_ _} => eq_zero_or_eq_zero_of_mul_eq_zero⟩\n\n"}
{"name":"smul_ne_zero","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMul R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\nhc : Ne c 0\nhx : Ne x 0\n⊢ Ne (HSMul.hSMul c x) 0","decl":"theorem smul_ne_zero [Zero R] [Zero M] [SMul R M] [NoZeroSMulDivisors R M] {c : R} {x : M}\n    (hc : c ≠ 0) (hx : x ≠ 0) : c • x ≠ 0 := fun h =>\n  (eq_zero_or_eq_zero_of_smul_eq_zero h).elim hc hx\n\n"}
{"name":"smul_eq_zero","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMulWithZero R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\n⊢ Iff (Eq (HSMul.hSMul c x) 0) (Or (Eq c 0) (Eq x 0))","decl":"@[simp]\ntheorem smul_eq_zero : c • x = 0 ↔ c = 0 ∨ x = 0 :=\n  ⟨eq_zero_or_eq_zero_of_smul_eq_zero, fun h =>\n    h.elim (fun h => h.symm ▸ zero_smul R x) fun h => h.symm ▸ smul_zero c⟩\n\n"}
{"name":"smul_ne_zero_iff","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMulWithZero R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\n⊢ Iff (Ne (HSMul.hSMul c x) 0) (And (Ne c 0) (Ne x 0))","decl":"theorem smul_ne_zero_iff : c • x ≠ 0 ↔ c ≠ 0 ∧ x ≠ 0 := by rw [Ne, smul_eq_zero, not_or]\n\n"}
{"name":"smul_eq_zero_iff_left","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMulWithZero R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\nhx : Ne x 0\n⊢ Iff (Eq (HSMul.hSMul c x) 0) (Eq c 0)","decl":"lemma smul_eq_zero_iff_left (hx : x ≠ 0) : c • x = 0 ↔ c = 0 := by simp [hx]\n"}
{"name":"smul_eq_zero_iff_right","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMulWithZero R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\nhc : Ne c 0\n⊢ Iff (Eq (HSMul.hSMul c x) 0) (Eq x 0)","decl":"lemma smul_eq_zero_iff_right (hc : c ≠ 0) : c • x = 0 ↔ x = 0 := by simp [hc]\n"}
{"name":"smul_ne_zero_iff_left","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMulWithZero R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\nhx : Ne x 0\n⊢ Iff (Ne (HSMul.hSMul c x) 0) (Ne c 0)","decl":"lemma smul_ne_zero_iff_left (hx : x ≠ 0) : c • x ≠ 0 ↔ c ≠ 0 := by simp [hx]\n"}
{"name":"smul_ne_zero_iff_right","module":"Mathlib.Algebra.NoZeroSMulDivisors.Defs","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : Zero R\ninst✝² : Zero M\ninst✝¹ : SMulWithZero R M\ninst✝ : NoZeroSMulDivisors R M\nc : R\nx : M\nhc : Ne c 0\n⊢ Iff (Ne (HSMul.hSMul c x) 0) (Ne x 0)","decl":"lemma smul_ne_zero_iff_right (hc : c ≠ 0) : c • x ≠ 0 ↔ x ≠ 0 := by simp [hc]\n\n"}
