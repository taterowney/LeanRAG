{"name":"NNReal.isOpen_Ico_zero","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"x : NNReal\n⊢ IsOpen (Set.Ico 0 x)","decl":"lemma isOpen_Ico_zero {x : NNReal} : IsOpen (Set.Ico 0 x) :=\n  Ico_bot (a := x) ▸ isOpen_Iio\n\n"}
{"name":"continuous_real_toNNReal","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Continuous Real.toNNReal","decl":"theorem _root_.continuous_real_toNNReal : Continuous Real.toNNReal :=\n  (continuous_id.max continuous_const).subtype_mk _\n\n"}
{"name":"ContinuousMap.realToNNReal_apply","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Eq (⇑ContinuousMap.realToNNReal) Real.toNNReal","decl":"/-- `Real.toNNReal` bundled as a continuous map for convenience. -/\n@[simps (config := .asFn)]\nnoncomputable def _root_.ContinuousMap.realToNNReal : C(ℝ, ℝ≥0) :=\n  .mk Real.toNNReal continuous_real_toNNReal\n\n"}
{"name":"ContinuousOn.ofReal_map_toNNReal","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : NNReal → NNReal\ns : Set Real\nt : Set NNReal\nhf : ContinuousOn f t\nh : Set.MapsTo Real.toNNReal s t\n⊢ ContinuousOn (fun x => ↑(f x.toNNReal)) s","decl":"lemma _root_.ContinuousOn.ofReal_map_toNNReal {f : ℝ≥0 → ℝ≥0} {s : Set ℝ} {t : Set ℝ≥0}\n    (hf : ContinuousOn f t) (h : Set.MapsTo Real.toNNReal s t) :\n    ContinuousOn (fun x ↦ f x.toNNReal : ℝ → ℝ) s :=\n  continuous_subtype_val.comp_continuousOn <| hf.comp continuous_real_toNNReal.continuousOn h\n\n"}
{"name":"NNReal.tendsto_coe","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : Filter α\nm : α → NNReal\nx : NNReal\n⊢ Iff (Filter.Tendsto (fun a => ↑(m a)) f (nhds ↑x)) (Filter.Tendsto m f (nhds x))","decl":"@[simp, norm_cast]\ntheorem tendsto_coe {f : Filter α} {m : α → ℝ≥0} {x : ℝ≥0} :\n    Tendsto (fun a => (m a : ℝ)) f (𝓝 (x : ℝ)) ↔ Tendsto m f (𝓝 x) :=\n  tendsto_subtype_rng.symm\n\n"}
{"name":"NNReal.tendsto_coe'","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : Filter α\ninst✝ : f.NeBot\nm : α → NNReal\nx : Real\n⊢ Iff (Filter.Tendsto (fun a => ↑(m a)) f (nhds x)) (Exists fun hx => Filter.Tendsto m f (nhds ⟨x, hx⟩))","decl":"theorem tendsto_coe' {f : Filter α} [NeBot f] {m : α → ℝ≥0} {x : ℝ} :\n    Tendsto (fun a => m a : α → ℝ) f (𝓝 x) ↔ ∃ hx : 0 ≤ x, Tendsto m f (𝓝 ⟨x, hx⟩) :=\n  ⟨fun h => ⟨ge_of_tendsto' h fun c => (m c).2, tendsto_coe.1 h⟩, fun ⟨_, hm⟩ => tendsto_coe.2 hm⟩\n\n"}
{"name":"NNReal.map_coe_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Eq (Filter.map NNReal.toReal Filter.atTop) Filter.atTop","decl":"@[simp] theorem map_coe_atTop : map toReal atTop = atTop := map_val_Ici_atTop 0\n\n"}
{"name":"NNReal.comap_coe_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Eq (Filter.comap NNReal.toReal Filter.atTop) Filter.atTop","decl":"@[simp]\ntheorem comap_coe_atTop : comap toReal atTop = atTop := (atTop_Ici_eq 0).symm\n\n"}
{"name":"NNReal.tendsto_coe_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : Filter α\nm : α → NNReal\n⊢ Iff (Filter.Tendsto (fun a => ↑(m a)) f Filter.atTop) (Filter.Tendsto m f Filter.atTop)","decl":"@[simp, norm_cast]\ntheorem tendsto_coe_atTop {f : Filter α} {m : α → ℝ≥0} :\n    Tendsto (fun a => (m a : ℝ)) f atTop ↔ Tendsto m f atTop :=\n  tendsto_Ici_atTop.symm\n\n"}
{"name":"tendsto_real_toNNReal","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : Filter α\nm : α → Real\nx : Real\nh : Filter.Tendsto m f (nhds x)\n⊢ Filter.Tendsto (fun a => (m a).toNNReal) f (nhds x.toNNReal)","decl":"theorem _root_.tendsto_real_toNNReal {f : Filter α} {m : α → ℝ} {x : ℝ} (h : Tendsto m f (𝓝 x)) :\n    Tendsto (fun a => Real.toNNReal (m a)) f (𝓝 (Real.toNNReal x)) :=\n  (continuous_real_toNNReal.tendsto _).comp h\n\n"}
{"name":"Real.map_toNNReal_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Eq (Filter.map Real.toNNReal Filter.atTop) Filter.atTop","decl":"@[simp]\ntheorem _root_.Real.map_toNNReal_atTop : map Real.toNNReal atTop = atTop := by\n  rw [← map_coe_atTop, Function.LeftInverse.filter_map @Real.toNNReal_coe]\n\n"}
{"name":"tendsto_real_toNNReal_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Filter.Tendsto Real.toNNReal Filter.atTop Filter.atTop","decl":"theorem _root_.tendsto_real_toNNReal_atTop : Tendsto Real.toNNReal atTop atTop :=\n  Real.map_toNNReal_atTop.le\n\n"}
{"name":"Real.comap_toNNReal_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Eq (Filter.comap Real.toNNReal Filter.atTop) Filter.atTop","decl":"@[simp]\ntheorem _root_.Real.comap_toNNReal_atTop : comap Real.toNNReal atTop = atTop := by\n  refine le_antisymm ?_ tendsto_real_toNNReal_atTop.le_comap\n  refine (atTop_basis_Ioi' 0).ge_iff.2 fun a ha ↦ ?_\n  filter_upwards [preimage_mem_comap (Ioi_mem_atTop a.toNNReal)] with x hx\n  exact (Real.toNNReal_lt_toNNReal_iff_of_nonneg ha.le).1 hx\n\n"}
{"name":"Real.tendsto_toNNReal_atTop_iff","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nl : Filter α\nf : α → Real\n⊢ Iff (Filter.Tendsto (fun x => (f x).toNNReal) l Filter.atTop) (Filter.Tendsto f l Filter.atTop)","decl":"@[simp]\ntheorem _root_.Real.tendsto_toNNReal_atTop_iff {l : Filter α} {f : α → ℝ} :\n    Tendsto (fun x ↦ (f x).toNNReal) l atTop ↔ Tendsto f l atTop := by\n  rw [← Real.comap_toNNReal_atTop, tendsto_comap_iff, Function.comp_def]\n\n"}
{"name":"Real.tendsto_toNNReal_atTop","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Filter.Tendsto Real.toNNReal Filter.atTop Filter.atTop","decl":"theorem _root_.Real.tendsto_toNNReal_atTop : Tendsto Real.toNNReal atTop atTop :=\n  Real.tendsto_toNNReal_atTop_iff.2 tendsto_id\n\n"}
{"name":"NNReal.nhds_zero","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ Eq (nhds 0) (iInf fun a => iInf fun x => Filter.principal (Set.Iio a))","decl":"theorem nhds_zero : 𝓝 (0 : ℝ≥0) = ⨅ (a : ℝ≥0) (_ : a ≠ 0), 𝓟 (Iio a) :=\n  nhds_bot_order.trans <| by simp only [bot_lt_iff_ne_bot]; rfl\n\n"}
{"name":"NNReal.nhds_zero_basis","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"⊢ (nhds 0).HasBasis (fun a => LT.lt 0 a) fun a => Set.Iio a","decl":"theorem nhds_zero_basis : (𝓝 (0 : ℝ≥0)).HasBasis (fun a : ℝ≥0 => 0 < a) fun a => Iio a :=\n  nhds_bot_basis\n\n\n"}
{"name":"NNReal.hasSum_coe","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → NNReal\nr : NNReal\n⊢ Iff (HasSum (fun a => ↑(f a)) ↑r) (HasSum f r)","decl":"@[norm_cast]\ntheorem hasSum_coe {f : α → ℝ≥0} {r : ℝ≥0} : HasSum (fun a => (f a : ℝ)) (r : ℝ) ↔ HasSum f r := by\n  simp only [HasSum, ← coe_sum, tendsto_coe]\n\n"}
{"name":"HasSum.toNNReal","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → Real\ny : Real\nhf₀ : ∀ (n : α), LE.le 0 (f n)\nhy : HasSum f y\n⊢ HasSum (fun x => (f x).toNNReal) y.toNNReal","decl":"protected theorem _root_.HasSum.toNNReal {f : α → ℝ} {y : ℝ} (hf₀ : ∀ n, 0 ≤ f n)\n    (hy : HasSum f y) : HasSum (fun x => Real.toNNReal (f x)) y.toNNReal := by\n  lift y to ℝ≥0 using hy.nonneg hf₀\n  lift f to α → ℝ≥0 using hf₀\n  simpa [hasSum_coe] using hy\n\n"}
{"name":"NNReal.hasSum_real_toNNReal_of_nonneg","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → Real\nhf_nonneg : ∀ (n : α), LE.le 0 (f n)\nhf : Summable f\n⊢ HasSum (fun n => (f n).toNNReal) (tsum fun n => f n).toNNReal","decl":"theorem hasSum_real_toNNReal_of_nonneg {f : α → ℝ} (hf_nonneg : ∀ n, 0 ≤ f n) (hf : Summable f) :\n    HasSum (fun n => Real.toNNReal (f n)) (Real.toNNReal (∑' n, f n)) :=\n  hf.hasSum.toNNReal hf_nonneg\n\n"}
{"name":"NNReal.summable_coe","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → NNReal\n⊢ Iff (Summable fun a => ↑(f a)) (Summable f)","decl":"@[norm_cast]\ntheorem summable_coe {f : α → ℝ≥0} : (Summable fun a => (f a : ℝ)) ↔ Summable f := by\n  constructor\n  · exact fun ⟨a, ha⟩ => ⟨⟨a, ha.nonneg fun x => (f x).2⟩, hasSum_coe.1 ha⟩\n  · exact fun ⟨a, ha⟩ => ⟨a.1, hasSum_coe.2 ha⟩\n\n"}
{"name":"NNReal.summable_mk","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → Real\nhf : ∀ (n : α), LE.le 0 (f n)\n⊢ Iff (Summable fun n => ⟨f n, ⋯⟩) (Summable f)","decl":"theorem summable_mk {f : α → ℝ} (hf : ∀ n, 0 ≤ f n) :\n    (@Summable ℝ≥0 _ _ _ fun n => ⟨f n, hf n⟩) ↔ Summable f :=\n  Iff.symm <| summable_coe (f := fun x => ⟨f x, hf x⟩)\n\n"}
{"name":"NNReal.coe_tsum","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → NNReal\n⊢ Eq (↑(tsum fun a => f a)) (tsum fun a => ↑(f a))","decl":"@[norm_cast]\ntheorem coe_tsum {f : α → ℝ≥0} : ↑(∑' a, f a) = ∑' a, (f a : ℝ) := by\n  classical\n  exact if hf : Summable f then Eq.symm <| (hasSum_coe.2 <| hf.hasSum).tsum_eq\n  else by simp [tsum_def, hf, mt summable_coe.1 hf]\n\n"}
{"name":"NNReal.coe_tsum_of_nonneg","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → Real\nhf₁ : ∀ (n : α), LE.le 0 (f n)\n⊢ Eq ⟨tsum fun n => f n, ⋯⟩ (tsum fun n => ⟨f n, ⋯⟩)","decl":"theorem coe_tsum_of_nonneg {f : α → ℝ} (hf₁ : ∀ n, 0 ≤ f n) :\n    (⟨∑' n, f n, tsum_nonneg hf₁⟩ : ℝ≥0) = (∑' n, ⟨f n, hf₁ n⟩ : ℝ≥0) :=\n  NNReal.eq <| Eq.symm <| coe_tsum (f := fun x => ⟨f x, hf₁ x⟩)\n\n"}
{"name":"NNReal.tsum_mul_left","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\na : NNReal\nf : α → NNReal\n⊢ Eq (tsum fun x => HMul.hMul a (f x)) (HMul.hMul a (tsum fun x => f x))","decl":"nonrec theorem tsum_mul_left (a : ℝ≥0) (f : α → ℝ≥0) : ∑' x, a * f x = a * ∑' x, f x :=\n  NNReal.eq <| by simp only [coe_tsum, NNReal.coe_mul, tsum_mul_left]\n\n"}
{"name":"NNReal.tsum_mul_right","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nf : α → NNReal\na : NNReal\n⊢ Eq (tsum fun x => HMul.hMul (f x) a) (HMul.hMul (tsum fun x => f x) a)","decl":"nonrec theorem tsum_mul_right (f : α → ℝ≥0) (a : ℝ≥0) : ∑' x, f x * a = (∑' x, f x) * a :=\n  NNReal.eq <| by simp only [coe_tsum, NNReal.coe_mul, tsum_mul_right]\n\n"}
{"name":"NNReal.summable_comp_injective","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\nβ : Type u_2\nf : α → NNReal\nhf : Summable f\ni : β → α\nhi : Function.Injective i\n⊢ Summable (Function.comp f i)","decl":"theorem summable_comp_injective {β : Type*} {f : α → ℝ≥0} (hf : Summable f) {i : β → α}\n    (hi : Function.Injective i) : Summable (f ∘ i) := by\n  rw [← summable_coe] at hf ⊢\n  exact hf.comp_injective hi\n\n"}
{"name":"NNReal.summable_nat_add","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → NNReal\nhf : Summable f\nk : Nat\n⊢ Summable fun i => f (HAdd.hAdd i k)","decl":"theorem summable_nat_add (f : ℕ → ℝ≥0) (hf : Summable f) (k : ℕ) : Summable fun i => f (i + k) :=\n  summable_comp_injective hf <| add_left_injective k\n\n"}
{"name":"NNReal.summable_nat_add_iff","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → NNReal\nk : Nat\n⊢ Iff (Summable fun i => f (HAdd.hAdd i k)) (Summable f)","decl":"nonrec theorem summable_nat_add_iff {f : ℕ → ℝ≥0} (k : ℕ) :\n    (Summable fun i => f (i + k)) ↔ Summable f := by\n  rw [← summable_coe, ← summable_coe]\n  exact @summable_nat_add_iff ℝ _ _ _ (fun i => (f i : ℝ)) k\n\n"}
{"name":"NNReal.hasSum_nat_add_iff","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → NNReal\nk : Nat\na : NNReal\n⊢ Iff (HasSum (fun n => f (HAdd.hAdd n k)) a) (HasSum f (HAdd.hAdd a ((Finset.range k).sum fun i => f i)))","decl":"nonrec theorem hasSum_nat_add_iff {f : ℕ → ℝ≥0} (k : ℕ) {a : ℝ≥0} :\n    HasSum (fun n => f (n + k)) a ↔ HasSum f (a + ∑ i ∈ range k, f i) := by\n  rw [← hasSum_coe, hasSum_nat_add_iff (f := fun n => toReal (f n)) k]; norm_cast\n\n"}
{"name":"NNReal.sum_add_tsum_nat_add","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → NNReal\nk : Nat\nhf : Summable f\n⊢ Eq (tsum fun i => f i) (HAdd.hAdd ((Finset.range k).sum fun i => f i) (tsum fun i => f (HAdd.hAdd i k)))","decl":"theorem sum_add_tsum_nat_add {f : ℕ → ℝ≥0} (k : ℕ) (hf : Summable f) :\n    ∑' i, f i = (∑ i ∈ range k, f i) + ∑' i, f (i + k) :=\n  (sum_add_tsum_nat_add' <| (summable_nat_add_iff k).2 hf).symm\n\n"}
{"name":"NNReal.iInf_real_pos_eq_iInf_nnreal_pos","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_1\ninst✝ : CompleteLattice α\nf : Real → α\n⊢ Eq (iInf fun n => iInf fun x => f n) (iInf fun n => iInf fun x => f ↑n)","decl":"theorem iInf_real_pos_eq_iInf_nnreal_pos [CompleteLattice α] {f : ℝ → α} :\n    ⨅ (n : ℝ) (_ : 0 < n), f n = ⨅ (n : ℝ≥0) (_ : 0 < n), f n :=\n  le_antisymm (iInf_mono' fun r => ⟨r, le_rfl⟩) (iInf₂_mono' fun r hr => ⟨⟨r, hr.le⟩, hr, le_rfl⟩)\n\n"}
{"name":"NNReal.tendsto_cofinite_zero_of_summable","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_2\nf : α → NNReal\nhf : Summable f\n⊢ Filter.Tendsto f Filter.cofinite (nhds 0)","decl":"theorem tendsto_cofinite_zero_of_summable {α} {f : α → ℝ≥0} (hf : Summable f) :\n    Tendsto f cofinite (𝓝 0) := by\n  simp only [← summable_coe, ← tendsto_coe] at hf ⊢\n  exact hf.tendsto_cofinite_zero\n\n"}
{"name":"NNReal.tendsto_atTop_zero_of_summable","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → NNReal\nhf : Summable f\n⊢ Filter.Tendsto f Filter.atTop (nhds 0)","decl":"theorem tendsto_atTop_zero_of_summable {f : ℕ → ℝ≥0} (hf : Summable f) : Tendsto f atTop (𝓝 0) := by\n  rw [← Nat.cofinite_eq_atTop]\n  exact tendsto_cofinite_zero_of_summable hf\n\n"}
{"name":"NNReal.tendsto_tsum_compl_atTop_zero","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"α : Type u_2\nf : α → NNReal\n⊢ Filter.Tendsto (fun s => tsum fun b => f ↑b) Filter.atTop (nhds 0)","decl":"/-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole\nspace. This does not need a summability assumption, as otherwise all sums are zero. -/\nnonrec theorem tendsto_tsum_compl_atTop_zero {α : Type*} (f : α → ℝ≥0) :\n    Tendsto (fun s : Finset α => ∑' b : { x // x ∉ s }, f b) atTop (𝓝 0) := by\n  simp_rw [← tendsto_coe, coe_tsum, NNReal.coe_zero]\n  exact tendsto_tsum_compl_atTop_zero fun a : α => (f a : ℝ)\n\n"}
{"name":"Real.tendsto_of_bddAbove_monotone","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → Real\nh_bdd : BddAbove (Set.range f)\nh_mon : Monotone f\n⊢ Exists fun r => Filter.Tendsto f Filter.atTop (nhds r)","decl":"/-- A monotone, bounded above sequence `f : ℕ → ℝ` has a finite limit. -/\ntheorem _root_.Real.tendsto_of_bddAbove_monotone {f : ℕ → ℝ} (h_bdd : BddAbove (Set.range f))\n    (h_mon : Monotone f) : ∃ r : ℝ, Tendsto f atTop (𝓝 r) := by\n  obtain ⟨B, hB⟩ := Real.exists_isLUB (Set.range_nonempty f) h_bdd\n  exact ⟨B, tendsto_atTop_isLUB h_mon hB⟩\n\n"}
{"name":"Real.tendsto_of_bddBelow_antitone","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → Real\nh_bdd : BddBelow (Set.range f)\nh_ant : Antitone f\n⊢ Exists fun r => Filter.Tendsto f Filter.atTop (nhds r)","decl":"/-- An antitone, bounded below sequence `f : ℕ → ℝ` has a finite limit. -/\ntheorem _root_.Real.tendsto_of_bddBelow_antitone {f : ℕ → ℝ} (h_bdd : BddBelow (Set.range f))\n    (h_ant : Antitone f) : ∃ r : ℝ, Tendsto f atTop (𝓝 r) := by\n  obtain ⟨B, hB⟩ := Real.exists_isGLB (Set.range_nonempty f) h_bdd\n  exact ⟨B, tendsto_atTop_isGLB h_ant hB⟩\n\n"}
{"name":"NNReal.tendsto_of_antitone","module":"Mathlib.Topology.Instances.NNReal.Lemmas","initialProofState":"f : Nat → NNReal\nh_ant : Antitone f\n⊢ Exists fun r => Filter.Tendsto f Filter.atTop (nhds r)","decl":"/-- An antitone sequence `f : ℕ → ℝ≥0` has a finite limit. -/\ntheorem tendsto_of_antitone {f : ℕ → ℝ≥0} (h_ant : Antitone f) :\n    ∃ r : ℝ≥0, Tendsto f atTop (𝓝 r) := by\n  have h_bdd_0 : (0 : ℝ) ∈ lowerBounds (Set.range fun n : ℕ => (f n : ℝ)) := by\n    rintro r ⟨n, hn⟩\n    simp_rw [← hn]\n    exact NNReal.coe_nonneg _\n  obtain ⟨L, hL⟩ := Real.tendsto_of_bddBelow_antitone ⟨0, h_bdd_0⟩ h_ant\n  have hL0 : 0 ≤ L :=\n    haveI h_glb : IsGLB (Set.range fun n => (f n : ℝ)) L := isGLB_of_tendsto_atTop h_ant hL\n    (le_isGLB_iff h_glb).mpr h_bdd_0\n  exact ⟨⟨L, hL0⟩, NNReal.tendsto_coe.mp hL⟩\n\n"}
