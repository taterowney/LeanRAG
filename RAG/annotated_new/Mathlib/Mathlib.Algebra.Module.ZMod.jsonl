{"name":"ZMod.map_smul","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\nM₁ : Type u_2\nF : Type u_3\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : AddCommGroup M₁\ninst✝³ : FunLike F M M₁\ninst✝² : AddMonoidHomClass F M M₁\ninst✝¹ : Module (ZMod n) M\ninst✝ : Module (ZMod n) M₁\nf : F\nc : ZMod n\nx : M\n⊢ Eq (f (HSMul.hSMul c x)) (HSMul.hSMul c (f x))","decl":"theorem map_smul (f : F) (c : ZMod n) (x : M) : f (c • x) = c • f x := by\n  rw [← ZMod.intCast_zmod_cast c]\n  exact map_intCast_smul f _ _ (cast c) x\n\n"}
{"name":"ZMod.smul_mem","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\nS : Type u_4\ninst✝³ : AddCommGroup M\ninst✝² : Module (ZMod n) M\ninst✝¹ : SetLike S M\ninst✝ : AddSubgroupClass S M\nx : M\nK : S\nhx : Membership.mem K x\nc : ZMod n\n⊢ Membership.mem K (HSMul.hSMul c x)","decl":"theorem smul_mem (hx : x ∈ K) (c : ZMod n) : c • x ∈ K := by\n  rw [← ZMod.intCast_zmod_cast c, Int.cast_smul_eq_zsmul]\n  exact zsmul_mem hx (cast c)\n\n"}
{"name":"AddMonoidHom.toZModLinearMap_injective","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\nM₁ : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module (ZMod n) M\ninst✝ : Module (ZMod n) M₁\n⊢ Function.Injective (AddMonoidHom.toZModLinearMap n)","decl":"theorem toZModLinearMap_injective : Function.Injective <| toZModLinearMap n (M := M) (M₁ := M₁) :=\n  fun _ _ h ↦ ext fun x ↦ congr($h x)\n\n"}
{"name":"AddMonoidHom.coe_toZModLinearMap","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\nM₁ : Type u_2\ninst✝³ : AddCommGroup M\ninst✝² : AddCommGroup M₁\ninst✝¹ : Module (ZMod n) M\ninst✝ : Module (ZMod n) M₁\nf : AddMonoidHom M M₁\n⊢ Eq ⇑(AddMonoidHom.toZModLinearMap n f) ⇑f","decl":"@[simp]\ntheorem coe_toZModLinearMap (f : M →+ M₁) : ⇑(f.toZModLinearMap n) = f := rfl\n\n"}
{"name":"AddSubgroup.toZModSubmodule_symm","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\ninst✝¹ : AddCommGroup M\ninst✝ : Module (ZMod n) M\n⊢ Eq (⇑(AddSubgroup.toZModSubmodule n).symm) Submodule.toAddSubgroup","decl":"@[simp]\ntheorem toZModSubmodule_symm :\n    ⇑((toZModSubmodule n).symm : _ ≃o AddSubgroup M) = Submodule.toAddSubgroup :=\n  rfl\n\n"}
{"name":"AddSubgroup.coe_toZModSubmodule","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\ninst✝¹ : AddCommGroup M\ninst✝ : Module (ZMod n) M\nS : AddSubgroup M\n⊢ Eq ↑((AddSubgroup.toZModSubmodule n) S) ↑S","decl":"@[simp] lemma coe_toZModSubmodule (S : AddSubgroup M) : (toZModSubmodule n S : Set M) = S := rfl\n"}
{"name":"AddSubgroup.mem_toZModSubmodule","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\ninst✝¹ : AddCommGroup M\ninst✝ : Module (ZMod n) M\nx : M\nS : AddSubgroup M\n⊢ Iff (Membership.mem ((AddSubgroup.toZModSubmodule n) S) x) (Membership.mem S x)","decl":"@[simp] lemma mem_toZModSubmodule {S : AddSubgroup M} : x ∈ toZModSubmodule n S ↔ x ∈ S := .rfl\n\n"}
{"name":"AddSubgroup.toZModSubmodule_toAddSubgroup","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\ninst✝¹ : AddCommGroup M\ninst✝ : Module (ZMod n) M\nS : AddSubgroup M\n⊢ Eq ((AddSubgroup.toZModSubmodule n) S).toAddSubgroup S","decl":"@[simp]\ntheorem toZModSubmodule_toAddSubgroup (S : AddSubgroup M) :\n    (toZModSubmodule n S).toAddSubgroup = S :=\n  rfl\n\n"}
{"name":"Submodule.toAddSubgroup_toZModSubmodule","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"n : Nat\nM : Type u_1\ninst✝¹ : AddCommGroup M\ninst✝ : Module (ZMod n) M\nS : Submodule (ZMod n) M\n⊢ Eq ((AddSubgroup.toZModSubmodule n) S.toAddSubgroup) S","decl":"@[simp]\ntheorem _root_.Submodule.toAddSubgroup_toZModSubmodule (S : Submodule (ZMod n) M) :\n    toZModSubmodule n S.toAddSubgroup = S :=\n  rfl\n\n"}
{"name":"ZModModule.exists_submodule_subset_card_le","module":"Mathlib.Algebra.Module.ZMod","initialProofState":"p : Nat\nG : Type u_5\ninst✝¹ : AddCommGroup G\nhp : Nat.Prime p\ninst✝ : Module (ZMod p) G\nH : Submodule (ZMod p) G\nk : Nat\nhk : LE.le k (Nat.card (Subtype fun x => Membership.mem H x))\nh'k : Ne k 0\n⊢ Exists fun H' => And (LE.le (Nat.card (Subtype fun x => Membership.mem H' x)) k) (And (LT.lt k (HMul.hMul p (Nat.card (Subtype fun x => Membership.mem H' x)))) (LE.le H' H))","decl":"/-- In an elementary abelian `p`-group, every finite subgroup `H` contains a further subgroup of\ncardinality between `k` and `p * k`, if `k ≤ |H|`. -/\nlemma exists_submodule_subset_card_le (hp : p.Prime) [Module (ZMod p) G]\n    (H : Submodule (ZMod p) G) {k : ℕ} (hk : k ≤ Nat.card H) (h'k : k ≠ 0) :\n    ∃ H' : Submodule (ZMod p) G, Nat.card H' ≤ k ∧ k < p * Nat.card H' ∧ H' ≤ H := by\n  obtain ⟨H'm, H'mHm, H'mk, kH'm⟩ := Sylow.exists_subgroup_le_card_le\n    (H := AddSubgroup.toSubgroup ((AddSubgroup.toZModSubmodule _).symm H)) hp\n      isPGroup_multiplicative hk h'k\n  exact ⟨AddSubgroup.toZModSubmodule _ (AddSubgroup.toSubgroup.symm H'm), H'mk, kH'm, H'mHm⟩\n\n"}
