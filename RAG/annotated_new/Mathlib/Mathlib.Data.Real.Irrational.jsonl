{"name":"irrational_iff_ne_rational","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\n⊢ Iff (Irrational x) (∀ (a b : Int), Ne x (HDiv.hDiv ↑a ↑b))","decl":"theorem irrational_iff_ne_rational (x : ℝ) : Irrational x ↔ ∀ a b : ℤ, x ≠ a / b := by\n  simp only [Irrational, Rat.forall, cast_mk, not_exists, Set.mem_range, cast_intCast, cast_div,\n    eq_comm]\n\n"}
{"name":"Transcendental.irrational","module":"Mathlib.Data.Real.Irrational","initialProofState":"r : Real\ntr : Transcendental Rat r\n⊢ Irrational r","decl":"/-- A transcendental real number is irrational. -/\ntheorem Transcendental.irrational {r : ℝ} (tr : Transcendental ℚ r) : Irrational r := by\n  rintro ⟨a, rfl⟩\n  exact tr (isAlgebraic_algebraMap a)\n\n"}
{"name":"irrational_nrt_of_notint_nrt","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nn : Nat\nm : Int\nhxr : Eq (HPow.hPow x n) ↑m\nhv : Not (Exists fun y => Eq x ↑y)\nhnpos : LT.lt 0 n\n⊢ Irrational x","decl":"/-- If `x^n`, `n > 0`, is integer and is not the `n`-th power of an integer, then\n`x` is irrational. -/\ntheorem irrational_nrt_of_notint_nrt {x : ℝ} (n : ℕ) (m : ℤ) (hxr : x ^ n = m)\n    (hv : ¬∃ y : ℤ, x = y) (hnpos : 0 < n) : Irrational x := by\n  rintro ⟨⟨N, D, P, C⟩, rfl⟩\n  rw [← cast_pow] at hxr\n  have c1 : ((D : ℤ) : ℝ) ≠ 0 := by\n    rw [Int.cast_ne_zero, Int.natCast_ne_zero]\n    exact P\n  have c2 : ((D : ℤ) : ℝ) ^ n ≠ 0 := pow_ne_zero _ c1\n  rw [mk'_eq_divInt, cast_pow, cast_mk, div_pow, div_eq_iff_mul_eq c2, ← Int.cast_pow,\n    ← Int.cast_pow, ← Int.cast_mul, Int.cast_inj] at hxr\n  have hdivn : (D : ℤ) ^ n ∣ N ^ n := Dvd.intro_left m hxr\n  rw [← Int.dvd_natAbs, ← Int.natCast_pow, Int.natCast_dvd_natCast, Int.natAbs_pow,\n    Nat.pow_dvd_pow_iff hnpos.ne'] at hdivn\n  obtain rfl : D = 1 := by rw [← Nat.gcd_eq_right hdivn, C.gcd_eq_one]\n  refine hv ⟨N, ?_⟩\n  rw [mk'_eq_divInt, Int.ofNat_one, divInt_one, cast_intCast]\n\n"}
{"name":"irrational_nrt_of_n_not_dvd_multiplicity","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nn : Nat\nm : Int\nhm : Ne m 0\np : Nat\nhp : Fact (Nat.Prime p)\nhxr : Eq (HPow.hPow x n) ↑m\nhv : Ne (HMod.hMod (multiplicity (↑p) m) n) 0\n⊢ Irrational x","decl":"/-- If `x^n = m` is an integer and `n` does not divide the `multiplicity p m`, then `x`\nis irrational. -/\ntheorem irrational_nrt_of_n_not_dvd_multiplicity {x : ℝ} (n : ℕ) {m : ℤ} (hm : m ≠ 0) (p : ℕ)\n    [hp : Fact p.Prime] (hxr : x ^ n = m)\n    (hv : multiplicity (p : ℤ) m % n ≠ 0) :\n    Irrational x := by\n  rcases Nat.eq_zero_or_pos n with (rfl | hnpos)\n  · rw [eq_comm, pow_zero, ← Int.cast_one, Int.cast_inj] at hxr\n    simp [hxr, multiplicity_of_one_right (mt isUnit_iff_dvd_one.1\n      (mt Int.natCast_dvd_natCast.1 hp.1.not_dvd_one)), Nat.zero_mod] at hv\n  refine irrational_nrt_of_notint_nrt _ _ hxr ?_ hnpos\n  rintro ⟨y, rfl⟩\n  rw [← Int.cast_pow, Int.cast_inj] at hxr\n  subst m\n  have : y ≠ 0 := by rintro rfl; rw [zero_pow hnpos.ne'] at hm; exact hm rfl\n  rw [(Int.finiteMultiplicity_iff.2 ⟨by simp [hp.1.ne_one], this⟩).multiplicity_pow\n    (Nat.prime_iff_prime_int.1 hp.1), Nat.mul_mod_right] at hv\n  exact hv rfl\n\n"}
{"name":"irrational_sqrt_of_multiplicity_odd","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nhm : LT.lt 0 m\np : Nat\nhp : Fact (Nat.Prime p)\nHpv : Eq (HMod.hMod (multiplicity (↑p) m) 2) 1\n⊢ Irrational (↑m).sqrt","decl":"theorem irrational_sqrt_of_multiplicity_odd (m : ℤ) (hm : 0 < m) (p : ℕ) [hp : Fact p.Prime]\n    (Hpv : multiplicity (p : ℤ) m % 2 = 1) :\n    Irrational (√m) :=\n  @irrational_nrt_of_n_not_dvd_multiplicity _ 2 _ (Ne.symm (ne_of_lt hm)) p hp\n    (sq_sqrt (Int.cast_nonneg.2 <| le_of_lt hm)) (by rw [Hpv]; exact one_ne_zero)\n\n"}
{"name":"not_irrational_zero","module":"Mathlib.Data.Real.Irrational","initialProofState":"⊢ Not (Irrational 0)","decl":"@[simp] theorem not_irrational_zero : ¬Irrational 0 := not_not_intro ⟨0, Rat.cast_zero⟩\n"}
{"name":"not_irrational_one","module":"Mathlib.Data.Real.Irrational","initialProofState":"⊢ Not (Irrational 1)","decl":"@[simp] theorem not_irrational_one : ¬Irrational 1 := not_not_intro ⟨1, Rat.cast_one⟩\n\n"}
{"name":"irrational_sqrt_ratCast_iff_of_nonneg","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nhq : LE.le 0 q\n⊢ Iff (Irrational (↑q).sqrt) (Not (IsSquare q))","decl":"theorem irrational_sqrt_ratCast_iff_of_nonneg {q : ℚ} (hq : 0 ≤ q) :\n    Irrational (√q) ↔ ¬IsSquare q := by\n  refine Iff.not (?_ : Exists _ ↔ Exists _)\n  constructor\n  · rintro ⟨y, hy⟩\n    refine ⟨y, Rat.cast_injective (α := ℝ) ?_⟩\n    rw [Rat.cast_mul, hy, mul_self_sqrt (Rat.cast_nonneg.2 hq)]\n  · rintro ⟨q', rfl⟩\n    exact ⟨|q'|, mod_cast (sqrt_mul_self_eq_abs q').symm⟩\n\n"}
{"name":"irrational_sqrt_ratCast_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\n⊢ Iff (Irrational (↑q).sqrt) (And (Not (IsSquare q)) (LE.le 0 q))","decl":"theorem irrational_sqrt_ratCast_iff {q : ℚ} :\n    Irrational (√q) ↔ ¬IsSquare q ∧ 0 ≤ q := by\n  obtain hq | hq := le_or_lt 0 q\n  · simp_rw [irrational_sqrt_ratCast_iff_of_nonneg hq, and_iff_left hq]\n  · rw [sqrt_eq_zero_of_nonpos (Rat.cast_nonpos.2 hq.le)]\n    simp_rw [not_irrational_zero, false_iff, not_and, not_le, hq, implies_true]\n\n"}
{"name":"irrational_sqrt_intCast_iff_of_nonneg","module":"Mathlib.Data.Real.Irrational","initialProofState":"z : Int\nhz : LE.le 0 z\n⊢ Iff (Irrational (↑z).sqrt) (Not (IsSquare z))","decl":"theorem irrational_sqrt_intCast_iff_of_nonneg {z : ℤ} (hz : 0 ≤ z) :\n    Irrational (√z) ↔ ¬IsSquare z := by\n  rw [← Rat.isSquare_intCast_iff, ← irrational_sqrt_ratCast_iff_of_nonneg (mod_cast hz),\n    Rat.cast_intCast]\n\n"}
{"name":"irrational_sqrt_intCast_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"z : Int\n⊢ Iff (Irrational (↑z).sqrt) (And (Not (IsSquare z)) (LE.le 0 z))","decl":"theorem irrational_sqrt_intCast_iff {z : ℤ} :\n    Irrational (√z) ↔ ¬IsSquare z ∧ 0 ≤ z := by\n  rw [← Rat.cast_intCast, irrational_sqrt_ratCast_iff, Rat.isSquare_intCast_iff, Int.cast_nonneg]\n\n"}
{"name":"irrational_sqrt_natCast_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\n⊢ Iff (Irrational (↑n).sqrt) (Not (IsSquare n))","decl":"theorem irrational_sqrt_natCast_iff {n : ℕ} : Irrational (√n) ↔ ¬IsSquare n := by\n  rw [← Rat.isSquare_natCast_iff, ← irrational_sqrt_ratCast_iff_of_nonneg n.cast_nonneg,\n    Rat.cast_natCast]\n\n"}
{"name":"irrational_sqrt_ofNat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Iff (Irrational (OfNat.ofNat n).sqrt) (Not (IsSquare (OfNat.ofNat n)))","decl":"theorem irrational_sqrt_ofNat_iff {n : ℕ} [n.AtLeastTwo] :\n    Irrational √(ofNat(n)) ↔ ¬IsSquare ofNat(n) :=\n  irrational_sqrt_natCast_iff\n\n"}
{"name":"Nat.Prime.irrational_sqrt","module":"Mathlib.Data.Real.Irrational","initialProofState":"p : Nat\nhp : Nat.Prime p\n⊢ Irrational (↑p).sqrt","decl":"theorem Nat.Prime.irrational_sqrt {p : ℕ} (hp : Nat.Prime p) : Irrational (√p) :=\n  irrational_sqrt_natCast_iff.mpr hp.not_square\n\n"}
{"name":"irrational_sqrt_two","module":"Mathlib.Data.Real.Irrational","initialProofState":"⊢ Irrational (Real.sqrt 2)","decl":"/-- **Irrationality of the Square Root of 2** -/\ntheorem irrational_sqrt_two : Irrational (√2) := by\n  simpa using Nat.prime_two.irrational_sqrt\n\n"}
{"name":"Irrational.ne_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nq : Rat\n⊢ Ne x ↑q","decl":"theorem ne_rat (h : Irrational x) (q : ℚ) : x ≠ q := fun hq => h ⟨q, hq.symm⟩\n\n"}
{"name":"Irrational.ne_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\n⊢ Ne x ↑m","decl":"theorem ne_int (h : Irrational x) (m : ℤ) : x ≠ m := by\n  rw [← Rat.cast_intCast]\n  exact h.ne_rat _\n\n"}
{"name":"Irrational.ne_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\n⊢ Ne x ↑m","decl":"theorem ne_nat (h : Irrational x) (m : ℕ) : x ≠ m :=\n  h.ne_int m\n\n"}
{"name":"Irrational.ne_zero","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\n⊢ Ne x 0","decl":"theorem ne_zero (h : Irrational x) : x ≠ 0 := mod_cast h.ne_nat 0\n\n"}
{"name":"Irrational.ne_one","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\n⊢ Ne x 1","decl":"theorem ne_one (h : Irrational x) : x ≠ 1 := by simpa only [Nat.cast_one] using h.ne_nat 1\n\n"}
{"name":"Irrational.ne_ofNat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Ne x (OfNat.ofNat n)","decl":"@[simp] theorem ne_ofNat (h : Irrational x) (n : ℕ) [n.AtLeastTwo] : x ≠ ofNat(n) :=\n  h.ne_nat n\n\n"}
{"name":"Rat.not_irrational","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\n⊢ Not (Irrational ↑q)","decl":"@[simp]\ntheorem Rat.not_irrational (q : ℚ) : ¬Irrational q := fun h => h ⟨q, rfl⟩\n\n"}
{"name":"Int.not_irrational","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\n⊢ Not (Irrational ↑m)","decl":"@[simp]\ntheorem Int.not_irrational (m : ℤ) : ¬Irrational m := fun h => h.ne_int m rfl\n\n"}
{"name":"Nat.not_irrational","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Nat\n⊢ Not (Irrational ↑m)","decl":"@[simp]\ntheorem Nat.not_irrational (m : ℕ) : ¬Irrational m := fun h => h.ne_nat m rfl\n\n"}
{"name":"not_irrational_ofNat","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Not (Irrational (OfNat.ofNat n))","decl":"@[simp] theorem not_irrational_ofNat (n : ℕ) [n.AtLeastTwo] : ¬Irrational ofNat(n) :=\n  n.not_irrational\n"}
{"name":"Irrational.add_cases","module":"Mathlib.Data.Real.Irrational","initialProofState":"x y : Real\na✝ : Irrational (HAdd.hAdd x y)\n⊢ Or (Irrational x) (Irrational y)","decl":"/-- If `x + y` is irrational, then at least one of `x` and `y` is irrational. -/\ntheorem add_cases : Irrational (x + y) → Irrational x ∨ Irrational y := by\n  delta Irrational\n  contrapose!\n  rintro ⟨⟨rx, rfl⟩, ⟨ry, rfl⟩⟩\n  exact ⟨rx + ry, cast_add rx ry⟩\n\n"}
{"name":"Irrational.of_rat_add","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational (HAdd.hAdd (↑q) x)\n⊢ Irrational x","decl":"theorem of_rat_add (h : Irrational (q + x)) : Irrational x :=\n  h.add_cases.resolve_left q.not_irrational\n\n"}
{"name":"Irrational.rat_add","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational x\n⊢ Irrational (HAdd.hAdd (↑q) x)","decl":"theorem rat_add (h : Irrational x) : Irrational (q + x) :=\n  of_rat_add (-q) <| by rwa [cast_neg, neg_add_cancel_left]\n\n"}
{"name":"Irrational.of_add_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\na✝ : Irrational (HAdd.hAdd x ↑q)\n⊢ Irrational x","decl":"theorem of_add_rat : Irrational (x + q) → Irrational x :=\n  add_comm (↑q) x ▸ of_rat_add q\n\n"}
{"name":"Irrational.add_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational x\n⊢ Irrational (HAdd.hAdd x ↑q)","decl":"theorem add_rat (h : Irrational x) : Irrational (x + q) :=\n  add_comm (↑q) x ▸ h.rat_add q\n\n"}
{"name":"Irrational.of_int_add","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HAdd.hAdd (↑m) x)\n⊢ Irrational x","decl":"theorem of_int_add (m : ℤ) (h : Irrational (m + x)) : Irrational x := by\n  rw [← cast_intCast] at h\n  exact h.of_rat_add m\n\n"}
{"name":"Irrational.of_add_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HAdd.hAdd x ↑m)\n⊢ Irrational x","decl":"theorem of_add_int (m : ℤ) (h : Irrational (x + m)) : Irrational x :=\n  of_int_add m <| add_comm x m ▸ h\n\n"}
{"name":"Irrational.int_add","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\n⊢ Irrational (HAdd.hAdd (↑m) x)","decl":"theorem int_add (h : Irrational x) (m : ℤ) : Irrational (m + x) := by\n  rw [← cast_intCast]\n  exact h.rat_add m\n\n"}
{"name":"Irrational.add_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\n⊢ Irrational (HAdd.hAdd x ↑m)","decl":"theorem add_int (h : Irrational x) (m : ℤ) : Irrational (x + m) :=\n  add_comm (↑m) x ▸ h.int_add m\n\n"}
{"name":"Irrational.of_nat_add","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HAdd.hAdd (↑m) x)\n⊢ Irrational x","decl":"theorem of_nat_add (m : ℕ) (h : Irrational (m + x)) : Irrational x :=\n  h.of_int_add m\n\n"}
{"name":"Irrational.of_add_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HAdd.hAdd x ↑m)\n⊢ Irrational x","decl":"theorem of_add_nat (m : ℕ) (h : Irrational (x + m)) : Irrational x :=\n  h.of_add_int m\n\n"}
{"name":"Irrational.nat_add","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\n⊢ Irrational (HAdd.hAdd (↑m) x)","decl":"theorem nat_add (h : Irrational x) (m : ℕ) : Irrational (m + x) :=\n  h.int_add m\n\n"}
{"name":"Irrational.add_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\n⊢ Irrational (HAdd.hAdd x ↑m)","decl":"theorem add_nat (h : Irrational x) (m : ℕ) : Irrational (x + m) :=\n  h.add_int m\n\n"}
{"name":"Irrational.of_neg","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational (Neg.neg x)\n⊢ Irrational x","decl":"theorem of_neg (h : Irrational (-x)) : Irrational x := fun ⟨q, hx⟩ => h ⟨-q, by rw [cast_neg, hx]⟩\n\n"}
{"name":"Irrational.neg","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\n⊢ Irrational (Neg.neg x)","decl":"protected theorem neg (h : Irrational x) : Irrational (-x) :=\n  of_neg <| by rwa [neg_neg]\n\n"}
{"name":"Irrational.sub_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational x\n⊢ Irrational (HSub.hSub x ↑q)","decl":"theorem sub_rat (h : Irrational x) : Irrational (x - q) := by\n  simpa only [sub_eq_add_neg, cast_neg] using h.add_rat (-q)\n\n"}
{"name":"Irrational.rat_sub","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational x\n⊢ Irrational (HSub.hSub (↑q) x)","decl":"theorem rat_sub (h : Irrational x) : Irrational (q - x) := by\n  simpa only [sub_eq_add_neg] using h.neg.rat_add q\n\n"}
{"name":"Irrational.of_sub_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational (HSub.hSub x ↑q)\n⊢ Irrational x","decl":"theorem of_sub_rat (h : Irrational (x - q)) : Irrational x :=\n  of_add_rat (-q) <| by simpa only [cast_neg, sub_eq_add_neg] using h\n\n"}
{"name":"Irrational.of_rat_sub","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational (HSub.hSub (↑q) x)\n⊢ Irrational x","decl":"theorem of_rat_sub (h : Irrational (q - x)) : Irrational x :=\n  of_neg (of_rat_add q (by simpa only [sub_eq_add_neg] using h))\n\n"}
{"name":"Irrational.sub_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\n⊢ Irrational (HSub.hSub x ↑m)","decl":"theorem sub_int (h : Irrational x) (m : ℤ) : Irrational (x - m) := by\n  simpa only [Rat.cast_intCast] using h.sub_rat m\n\n"}
{"name":"Irrational.int_sub","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\n⊢ Irrational (HSub.hSub (↑m) x)","decl":"theorem int_sub (h : Irrational x) (m : ℤ) : Irrational (m - x) := by\n  simpa only [Rat.cast_intCast] using h.rat_sub m\n\n"}
{"name":"Irrational.of_sub_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HSub.hSub x ↑m)\n⊢ Irrational x","decl":"theorem of_sub_int (m : ℤ) (h : Irrational (x - m)) : Irrational x :=\n  of_sub_rat m <| by rwa [Rat.cast_intCast]\n\n"}
{"name":"Irrational.of_int_sub","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HSub.hSub (↑m) x)\n⊢ Irrational x","decl":"theorem of_int_sub (m : ℤ) (h : Irrational (m - x)) : Irrational x :=\n  of_rat_sub m <| by rwa [Rat.cast_intCast]\n\n"}
{"name":"Irrational.sub_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\n⊢ Irrational (HSub.hSub x ↑m)","decl":"theorem sub_nat (h : Irrational x) (m : ℕ) : Irrational (x - m) :=\n  h.sub_int m\n\n"}
{"name":"Irrational.nat_sub","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\n⊢ Irrational (HSub.hSub (↑m) x)","decl":"theorem nat_sub (h : Irrational x) (m : ℕ) : Irrational (m - x) :=\n  h.int_sub m\n\n"}
{"name":"Irrational.of_sub_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HSub.hSub x ↑m)\n⊢ Irrational x","decl":"theorem of_sub_nat (m : ℕ) (h : Irrational (x - m)) : Irrational x :=\n  h.of_sub_int m\n\n"}
{"name":"Irrational.of_nat_sub","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HSub.hSub (↑m) x)\n⊢ Irrational x","decl":"theorem of_nat_sub (m : ℕ) (h : Irrational (m - x)) : Irrational x :=\n  h.of_int_sub m\n\n"}
{"name":"Irrational.mul_cases","module":"Mathlib.Data.Real.Irrational","initialProofState":"x y : Real\na✝ : Irrational (HMul.hMul x y)\n⊢ Or (Irrational x) (Irrational y)","decl":"theorem mul_cases : Irrational (x * y) → Irrational x ∨ Irrational y := by\n  delta Irrational\n  contrapose!\n  rintro ⟨⟨rx, rfl⟩, ⟨ry, rfl⟩⟩\n  exact ⟨rx * ry, cast_mul rx ry⟩\n\n"}
{"name":"Irrational.of_mul_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational (HMul.hMul x ↑q)\n⊢ Irrational x","decl":"theorem of_mul_rat (h : Irrational (x * q)) : Irrational x :=\n  h.mul_cases.resolve_right q.not_irrational\n\n"}
{"name":"Irrational.mul_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nq : Rat\nhq : Ne q 0\n⊢ Irrational (HMul.hMul x ↑q)","decl":"theorem mul_rat (h : Irrational x) {q : ℚ} (hq : q ≠ 0) : Irrational (x * q) :=\n  of_mul_rat q⁻¹ <| by rwa [mul_assoc, ← cast_mul, mul_inv_cancel₀ hq, cast_one, mul_one]\n\n"}
{"name":"Irrational.of_rat_mul","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\na✝ : Irrational (HMul.hMul (↑q) x)\n⊢ Irrational x","decl":"theorem of_rat_mul : Irrational (q * x) → Irrational x :=\n  mul_comm x q ▸ of_mul_rat q\n\n"}
{"name":"Irrational.rat_mul","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nq : Rat\nhq : Ne q 0\n⊢ Irrational (HMul.hMul (↑q) x)","decl":"theorem rat_mul (h : Irrational x) {q : ℚ} (hq : q ≠ 0) : Irrational (q * x) :=\n  mul_comm x q ▸ h.mul_rat hq\n\n"}
{"name":"Irrational.of_mul_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HMul.hMul x ↑m)\n⊢ Irrational x","decl":"theorem of_mul_int (m : ℤ) (h : Irrational (x * m)) : Irrational x :=\n  of_mul_rat m <| by rwa [cast_intCast]\n\n"}
{"name":"Irrational.of_int_mul","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HMul.hMul (↑m) x)\n⊢ Irrational x","decl":"theorem of_int_mul (m : ℤ) (h : Irrational (m * x)) : Irrational x :=\n  of_rat_mul m <| by rwa [cast_intCast]\n\n"}
{"name":"Irrational.mul_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\nhm : Ne m 0\n⊢ Irrational (HMul.hMul x ↑m)","decl":"theorem mul_int (h : Irrational x) {m : ℤ} (hm : m ≠ 0) : Irrational (x * m) := by\n  rw [← cast_intCast]\n  refine h.mul_rat ?_\n  rwa [Int.cast_ne_zero]\n\n"}
{"name":"Irrational.int_mul","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\nhm : Ne m 0\n⊢ Irrational (HMul.hMul (↑m) x)","decl":"theorem int_mul (h : Irrational x) {m : ℤ} (hm : m ≠ 0) : Irrational (m * x) :=\n  mul_comm x m ▸ h.mul_int hm\n\n"}
{"name":"Irrational.of_mul_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HMul.hMul x ↑m)\n⊢ Irrational x","decl":"theorem of_mul_nat (m : ℕ) (h : Irrational (x * m)) : Irrational x :=\n  h.of_mul_int m\n\n"}
{"name":"Irrational.of_nat_mul","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HMul.hMul (↑m) x)\n⊢ Irrational x","decl":"theorem of_nat_mul (m : ℕ) (h : Irrational (m * x)) : Irrational x :=\n  h.of_int_mul m\n\n"}
{"name":"Irrational.mul_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\nhm : Ne m 0\n⊢ Irrational (HMul.hMul x ↑m)","decl":"theorem mul_nat (h : Irrational x) {m : ℕ} (hm : m ≠ 0) : Irrational (x * m) :=\n  h.mul_int <| Int.natCast_ne_zero.2 hm\n\n"}
{"name":"Irrational.nat_mul","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\nhm : Ne m 0\n⊢ Irrational (HMul.hMul (↑m) x)","decl":"theorem nat_mul (h : Irrational x) {m : ℕ} (hm : m ≠ 0) : Irrational (m * x) :=\n  h.int_mul <| Int.natCast_ne_zero.2 hm\n\n"}
{"name":"Irrational.of_inv","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational (Inv.inv x)\n⊢ Irrational x","decl":"theorem of_inv (h : Irrational x⁻¹) : Irrational x := fun ⟨q, hq⟩ => h <| hq ▸ ⟨q⁻¹, q.cast_inv⟩\n\n"}
{"name":"Irrational.inv","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\n⊢ Irrational (Inv.inv x)","decl":"protected theorem inv (h : Irrational x) : Irrational x⁻¹ :=\n  of_inv <| by rwa [inv_inv]\n\n"}
{"name":"Irrational.div_cases","module":"Mathlib.Data.Real.Irrational","initialProofState":"x y : Real\nh : Irrational (HDiv.hDiv x y)\n⊢ Or (Irrational x) (Irrational y)","decl":"theorem div_cases (h : Irrational (x / y)) : Irrational x ∨ Irrational y :=\n  h.mul_cases.imp id of_inv\n\n"}
{"name":"Irrational.of_rat_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational (HDiv.hDiv (↑q) x)\n⊢ Irrational x","decl":"theorem of_rat_div (h : Irrational (q / x)) : Irrational x :=\n  (h.of_rat_mul q).of_inv\n\n"}
{"name":"Irrational.of_div_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\nh : Irrational (HDiv.hDiv x ↑q)\n⊢ Irrational x","decl":"theorem of_div_rat (h : Irrational (x / q)) : Irrational x :=\n  h.div_cases.resolve_right q.not_irrational\n\n"}
{"name":"Irrational.rat_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nq : Rat\nhq : Ne q 0\n⊢ Irrational (HDiv.hDiv (↑q) x)","decl":"theorem rat_div (h : Irrational x) {q : ℚ} (hq : q ≠ 0) : Irrational (q / x) :=\n  h.inv.rat_mul hq\n\n"}
{"name":"Irrational.div_rat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nq : Rat\nhq : Ne q 0\n⊢ Irrational (HDiv.hDiv x ↑q)","decl":"theorem div_rat (h : Irrational x) {q : ℚ} (hq : q ≠ 0) : Irrational (x / q) := by\n  rw [div_eq_mul_inv, ← cast_inv]\n  exact h.mul_rat (inv_ne_zero hq)\n\n"}
{"name":"Irrational.of_int_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HDiv.hDiv (↑m) x)\n⊢ Irrational x","decl":"theorem of_int_div (m : ℤ) (h : Irrational (m / x)) : Irrational x :=\n  h.div_cases.resolve_left m.not_irrational\n\n"}
{"name":"Irrational.of_div_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\nh : Irrational (HDiv.hDiv x ↑m)\n⊢ Irrational x","decl":"theorem of_div_int (m : ℤ) (h : Irrational (x / m)) : Irrational x :=\n  h.div_cases.resolve_right m.not_irrational\n\n"}
{"name":"Irrational.int_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\nhm : Ne m 0\n⊢ Irrational (HDiv.hDiv (↑m) x)","decl":"theorem int_div (h : Irrational x) {m : ℤ} (hm : m ≠ 0) : Irrational (m / x) :=\n  h.inv.int_mul hm\n\n"}
{"name":"Irrational.div_int","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Int\nhm : Ne m 0\n⊢ Irrational (HDiv.hDiv x ↑m)","decl":"theorem div_int (h : Irrational x) {m : ℤ} (hm : m ≠ 0) : Irrational (x / m) := by\n  rw [← cast_intCast]\n  refine h.div_rat ?_\n  rwa [Int.cast_ne_zero]\n\n"}
{"name":"Irrational.of_nat_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HDiv.hDiv (↑m) x)\n⊢ Irrational x","decl":"theorem of_nat_div (m : ℕ) (h : Irrational (m / x)) : Irrational x :=\n  h.of_int_div m\n\n"}
{"name":"Irrational.of_div_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Nat\nh : Irrational (HDiv.hDiv x ↑m)\n⊢ Irrational x","decl":"theorem of_div_nat (m : ℕ) (h : Irrational (x / m)) : Irrational x :=\n  h.of_div_int m\n\n"}
{"name":"Irrational.nat_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\nhm : Ne m 0\n⊢ Irrational (HDiv.hDiv (↑m) x)","decl":"theorem nat_div (h : Irrational x) {m : ℕ} (hm : m ≠ 0) : Irrational (m / x) :=\n  h.inv.nat_mul hm\n\n"}
{"name":"Irrational.div_nat","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational x\nm : Nat\nhm : Ne m 0\n⊢ Irrational (HDiv.hDiv x ↑m)","decl":"theorem div_nat (h : Irrational x) {m : ℕ} (hm : m ≠ 0) : Irrational (x / m) :=\n  h.div_int <| by rwa [Int.natCast_ne_zero]\n\n"}
{"name":"Irrational.of_one_div","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational (HDiv.hDiv 1 x)\n⊢ Irrational x","decl":"theorem of_one_div (h : Irrational (1 / x)) : Irrational x :=\n  of_rat_div 1 <| by rwa [cast_one]\n\n"}
{"name":"Irrational.of_mul_self","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nh : Irrational (HMul.hMul x x)\n⊢ Irrational x","decl":"theorem of_mul_self (h : Irrational (x * x)) : Irrational x :=\n  h.mul_cases.elim id id\n\n"}
{"name":"Irrational.of_pow","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nn : Nat\na✝ : Irrational (HPow.hPow x n)\n⊢ Irrational x","decl":"theorem of_pow : ∀ n : ℕ, Irrational (x ^ n) → Irrational x\n  | 0 => fun h => by\n    rw [pow_zero] at h\n    exact (h ⟨1, cast_one⟩).elim\n  | n + 1 => fun h => by\n    rw [pow_succ] at h\n    exact h.mul_cases.elim (of_pow n) id\n\n"}
{"name":"Irrational.of_zpow","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\nm : Int\na✝ : Irrational (HPow.hPow x m)\n⊢ Irrational x","decl":"open Int in\ntheorem of_zpow : ∀ m : ℤ, Irrational (x ^ m) → Irrational x\n  | (n : ℕ) => fun h => by\n    rw [zpow_natCast] at h\n    exact h.of_pow _\n  | -[n+1] => fun h => by\n    rw [zpow_negSucc] at h\n    exact h.of_inv.of_pow _\n\n"}
{"name":"one_lt_natDegree_of_irrational_root","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\np : Polynomial Int\nhx : Irrational x\np_nonzero : Ne p 0\nx_is_root : Eq ((Polynomial.aeval x) p) 0\n⊢ LT.lt 1 p.natDegree","decl":"theorem one_lt_natDegree_of_irrational_root (hx : Irrational x) (p_nonzero : p ≠ 0)\n    (x_is_root : aeval x p = 0) : 1 < p.natDegree := by\n  by_contra rid\n  rcases exists_eq_X_add_C_of_natDegree_le_one (not_lt.1 rid) with ⟨a, b, rfl⟩\n  clear rid\n  have : (a : ℝ) * x = -b := by simpa [eq_neg_iff_add_eq_zero] using x_is_root\n  rcases em (a = 0) with (rfl | ha)\n  · obtain rfl : b = 0 := by simpa\n    simp at p_nonzero\n  · rw [mul_comm, ← eq_div_iff_mul_eq, eq_comm] at this\n    · refine hx ⟨-b / a, ?_⟩\n      assumption_mod_cast\n    · assumption_mod_cast\n\n"}
{"name":"irrational_rat_add_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HAdd.hAdd (↑q) x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_rat_add_iff : Irrational (q + x) ↔ Irrational x :=\n  ⟨of_rat_add q, rat_add q⟩\n\n"}
{"name":"irrational_int_add_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HAdd.hAdd (↑m) x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_int_add_iff : Irrational (m + x) ↔ Irrational x :=\n  ⟨of_int_add m, fun h => h.int_add m⟩\n\n"}
{"name":"irrational_nat_add_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HAdd.hAdd (↑n) x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_nat_add_iff : Irrational (n + x) ↔ Irrational x :=\n  ⟨of_nat_add n, fun h => h.nat_add n⟩\n\n"}
{"name":"irrational_add_rat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HAdd.hAdd x ↑q)) (Irrational x)","decl":"@[simp]\ntheorem irrational_add_rat_iff : Irrational (x + q) ↔ Irrational x :=\n  ⟨of_add_rat q, add_rat q⟩\n\n"}
{"name":"irrational_add_int_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HAdd.hAdd x ↑m)) (Irrational x)","decl":"@[simp]\ntheorem irrational_add_int_iff : Irrational (x + m) ↔ Irrational x :=\n  ⟨of_add_int m, fun h => h.add_int m⟩\n\n"}
{"name":"irrational_add_nat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HAdd.hAdd x ↑n)) (Irrational x)","decl":"@[simp]\ntheorem irrational_add_nat_iff : Irrational (x + n) ↔ Irrational x :=\n  ⟨of_add_nat n, fun h => h.add_nat n⟩\n\n"}
{"name":"irrational_rat_sub_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HSub.hSub (↑q) x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_rat_sub_iff : Irrational (q - x) ↔ Irrational x :=\n  ⟨of_rat_sub q, rat_sub q⟩\n\n"}
{"name":"irrational_int_sub_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HSub.hSub (↑m) x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_int_sub_iff : Irrational (m - x) ↔ Irrational x :=\n  ⟨of_int_sub m, fun h => h.int_sub m⟩\n\n"}
{"name":"irrational_nat_sub_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HSub.hSub (↑n) x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_nat_sub_iff : Irrational (n - x) ↔ Irrational x :=\n  ⟨of_nat_sub n, fun h => h.nat_sub n⟩\n\n"}
{"name":"irrational_sub_rat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HSub.hSub x ↑q)) (Irrational x)","decl":"@[simp]\ntheorem irrational_sub_rat_iff : Irrational (x - q) ↔ Irrational x :=\n  ⟨of_sub_rat q, sub_rat q⟩\n\n"}
{"name":"irrational_sub_int_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HSub.hSub x ↑m)) (Irrational x)","decl":"@[simp]\ntheorem irrational_sub_int_iff : Irrational (x - m) ↔ Irrational x :=\n  ⟨of_sub_int m, fun h => h.sub_int m⟩\n\n"}
{"name":"irrational_sub_nat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HSub.hSub x ↑n)) (Irrational x)","decl":"@[simp]\ntheorem irrational_sub_nat_iff : Irrational (x - n) ↔ Irrational x :=\n  ⟨of_sub_nat n, fun h => h.sub_nat n⟩\n\n"}
{"name":"irrational_neg_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\n⊢ Iff (Irrational (Neg.neg x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_neg_iff : Irrational (-x) ↔ Irrational x :=\n  ⟨of_neg, Irrational.neg⟩\n\n"}
{"name":"irrational_inv_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"x : Real\n⊢ Iff (Irrational (Inv.inv x)) (Irrational x)","decl":"@[simp]\ntheorem irrational_inv_iff : Irrational x⁻¹ ↔ Irrational x :=\n  ⟨of_inv, Irrational.inv⟩\n\n"}
{"name":"irrational_rat_mul_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HMul.hMul (↑q) x)) (And (Ne q 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_rat_mul_iff : Irrational (q * x) ↔ q ≠ 0 ∧ Irrational x :=\n  ⟨fun h => ⟨Rat.cast_ne_zero.1 <| left_ne_zero_of_mul h.ne_zero, h.of_rat_mul q⟩, fun h =>\n    h.2.rat_mul h.1⟩\n\n"}
{"name":"irrational_mul_rat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HMul.hMul x ↑q)) (And (Ne q 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_mul_rat_iff : Irrational (x * q) ↔ q ≠ 0 ∧ Irrational x := by\n  rw [mul_comm, irrational_rat_mul_iff]\n\n"}
{"name":"irrational_int_mul_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HMul.hMul (↑m) x)) (And (Ne m 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_int_mul_iff : Irrational (m * x) ↔ m ≠ 0 ∧ Irrational x := by\n  rw [← cast_intCast, irrational_rat_mul_iff, Int.cast_ne_zero]\n\n"}
{"name":"irrational_mul_int_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HMul.hMul x ↑m)) (And (Ne m 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_mul_int_iff : Irrational (x * m) ↔ m ≠ 0 ∧ Irrational x := by\n  rw [← cast_intCast, irrational_mul_rat_iff, Int.cast_ne_zero]\n\n"}
{"name":"irrational_nat_mul_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HMul.hMul (↑n) x)) (And (Ne n 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_nat_mul_iff : Irrational (n * x) ↔ n ≠ 0 ∧ Irrational x := by\n  rw [← cast_natCast, irrational_rat_mul_iff, Nat.cast_ne_zero]\n\n"}
{"name":"irrational_mul_nat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HMul.hMul x ↑n)) (And (Ne n 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_mul_nat_iff : Irrational (x * n) ↔ n ≠ 0 ∧ Irrational x := by\n  rw [← cast_natCast, irrational_mul_rat_iff, Nat.cast_ne_zero]\n\n"}
{"name":"irrational_rat_div_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HDiv.hDiv (↑q) x)) (And (Ne q 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_rat_div_iff : Irrational (q / x) ↔ q ≠ 0 ∧ Irrational x := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"irrational_div_rat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"q : Rat\nx : Real\n⊢ Iff (Irrational (HDiv.hDiv x ↑q)) (And (Ne q 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_div_rat_iff : Irrational (x / q) ↔ q ≠ 0 ∧ Irrational x := by\n  rw [div_eq_mul_inv, ← cast_inv, irrational_mul_rat_iff, Ne, inv_eq_zero]\n\n"}
{"name":"irrational_int_div_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HDiv.hDiv (↑m) x)) (And (Ne m 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_int_div_iff : Irrational (m / x) ↔ m ≠ 0 ∧ Irrational x := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"irrational_div_int_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"m : Int\nx : Real\n⊢ Iff (Irrational (HDiv.hDiv x ↑m)) (And (Ne m 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_div_int_iff : Irrational (x / m) ↔ m ≠ 0 ∧ Irrational x := by\n  rw [← cast_intCast, irrational_div_rat_iff, Int.cast_ne_zero]\n\n"}
{"name":"irrational_nat_div_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HDiv.hDiv (↑n) x)) (And (Ne n 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_nat_div_iff : Irrational (n / x) ↔ n ≠ 0 ∧ Irrational x := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"irrational_div_nat_iff","module":"Mathlib.Data.Real.Irrational","initialProofState":"n : Nat\nx : Real\n⊢ Iff (Irrational (HDiv.hDiv x ↑n)) (And (Ne n 0) (Irrational x))","decl":"@[simp]\ntheorem irrational_div_nat_iff : Irrational (x / n) ↔ n ≠ 0 ∧ Irrational x := by\n  rw [← cast_natCast, irrational_div_rat_iff, Nat.cast_ne_zero]\n\n"}
{"name":"exists_irrational_btwn","module":"Mathlib.Data.Real.Irrational","initialProofState":"x y : Real\nh : LT.lt x y\n⊢ Exists fun r => And (Irrational r) (And (LT.lt x r) (LT.lt r y))","decl":"/-- There is an irrational number `r` between any two reals `x < r < y`. -/\ntheorem exists_irrational_btwn {x y : ℝ} (h : x < y) : ∃ r, Irrational r ∧ x < r ∧ r < y :=\n  let ⟨q, ⟨hq1, hq2⟩⟩ := exists_rat_btwn ((sub_lt_sub_iff_right (√2)).mpr h)\n  ⟨q + √2, irrational_sqrt_two.rat_add _, sub_lt_iff_lt_add.mp hq1, lt_sub_iff_add_lt.mp hq2⟩\n\n"}
