{"name":"Function.Fiber.eq_fiber_image","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nf : Y → Z\na : Function.Fiber f\n⊢ Eq (↑a) (Set.preimage f (Singleton.singleton (Function.Fiber.image f a)))","decl":"lemma eq_fiber_image  (f : Y → Z) (a : Fiber f) : a.1 = f ⁻¹' {a.image} := a.2.choose_spec.symm\n\n"}
{"name":"Function.Fiber.map_eq_image","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nf : Y → Z\na : Function.Fiber f\nx : ↑↑a\n⊢ Eq (f ↑x) (Function.Fiber.image f a)","decl":"lemma map_eq_image (f : Y → Z) (a : Fiber f) (x : a.1) : f x = a.image := by\n  have := a.2.choose_spec\n  rw [← Set.mem_singleton_iff, ← Set.mem_preimage]\n  convert x.prop\n\n"}
{"name":"Function.Fiber.mk_image","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nf : Y → Z\ny : Y\n⊢ Eq (Function.Fiber.image f (Function.Fiber.mk f y)) (f y)","decl":"lemma mk_image (f : Y → Z) (y : Y) : (Fiber.mk f y).image = f y :=\n  (map_eq_image (x := mkSelf f y)).symm\n\n"}
{"name":"Function.Fiber.mem_iff_eq_image","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nf : Y → Z\ny : Y\na : Function.Fiber f\n⊢ Iff (Membership.mem (↑a) y) (Eq (f y) (Function.Fiber.image f a))","decl":"lemma mem_iff_eq_image (f : Y → Z) (y : Y) (a : Fiber f) : y ∈ a.val ↔ f y = a.image :=\n  ⟨fun h ↦ a.map_eq_image _ ⟨y, h⟩, fun h ↦ by rw [a.eq_fiber_image]; exact h⟩\n\n"}
{"name":"Function.Fiber.map_preimage_eq_image","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nf : Y → Z\na : Function.Fiber f\n⊢ Eq (f (Function.Fiber.preimage f a)) (Function.Fiber.image f a)","decl":"lemma map_preimage_eq_image (f : Y → Z) (a : Fiber f) : f a.preimage = a.image :=\n  a.2.choose.2.choose_spec\n\n"}
{"name":"Function.Fiber.fiber_nonempty","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nf : Y → Z\na : Function.Fiber f\n⊢ (↑a).Nonempty","decl":"lemma fiber_nonempty (f : Y → Z) (a : Fiber f) : Set.Nonempty a.val := by\n  refine ⟨preimage f a, ?_⟩\n  rw [mem_iff_eq_image, ← map_preimage_eq_image]\n\n"}
{"name":"Function.Fiber.map_preimage_eq_image_map","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"Y : Type u_2\nZ : Type u_3\nW : Type u_4\nf : Y → Z\ng : Z → W\na : Function.Fiber (Function.comp g f)\n⊢ Eq (g (f (Function.Fiber.preimage (Function.comp g f) a))) (Function.Fiber.image (Function.comp g f) a)","decl":"lemma map_preimage_eq_image_map {W : Type*} (f : Y → Z) (g : Z → W) (a : Fiber (g ∘ f)) :\n    g (f a.preimage) = a.image := by rw [← map_preimage_eq_image, comp_apply]\n\n"}
{"name":"Function.Fiber.image_eq_image_mk","module":"Mathlib.Logic.Function.FiberPartition","initialProofState":"X : Type u_1\nY : Type u_2\nZ : Type u_3\nf : Y → Z\ng : X → Y\na : Function.Fiber (Function.comp f g)\n⊢ Eq (Function.Fiber.image (Function.comp f g) a) (Function.Fiber.image f (Function.Fiber.mk f (g (Function.Fiber.preimage (Function.comp f g) a))))","decl":"lemma image_eq_image_mk (f : Y → Z) (g : X → Y) (a : Fiber (f ∘ g)) :\n    a.image = (Fiber.mk f (g (a.preimage _))).image := by\n  rw [← map_preimage_eq_image_map _ _ a, mk_image]\n\n"}
