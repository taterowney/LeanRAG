{"name":"RingHomId.eq_id","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R : Type u_4\ninst✝ : Semiring R\nσ : RingHom R R\nself : RingHomId σ\n⊢ Eq σ (RingHom.id R)","decl":"/-- Class that expresses that a ring homomorphism is in fact the identity. -/\n-- This at first seems not very useful. However we need this when considering\n-- modules over some diagram in the category of rings,\n-- e.g. when defining presheaves over a presheaf of rings.\n-- See `Mathlib.Algebra.Category.ModuleCat.Presheaf`.\nclass RingHomId {R : Type*} [Semiring R] (σ : R →+* R) : Prop where\n  eq_id : σ = RingHom.id R\n\n"}
{"name":"instRingHomIdId","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R : Type u_4\ninst✝ : Semiring R\n⊢ RingHomId (RingHom.id R)","decl":"instance {R : Type*} [Semiring R] : RingHomId (RingHom.id R) where\n  eq_id := rfl\n\n"}
{"name":"RingHomCompTriple.comp_eq","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\ninst✝ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : outParam (RingHom R₁ R₃)\nself : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\n⊢ Eq (σ₂₃.comp σ₁₂) σ₁₃","decl":"/-- Class that expresses the fact that three ring homomorphisms form a composition triple. This is\nused to handle composition of semilinear maps. -/\nclass RingHomCompTriple (σ₁₂ : R₁ →+* R₂) (σ₂₃ : R₂ →+* R₃) (σ₁₃ : outParam (R₁ →+* R₃)) :\n  Prop where\n  /-- The morphisms form a commutative triangle -/\n  comp_eq : σ₂₃.comp σ₁₂ = σ₁₃\n\n"}
{"name":"RingHomCompTriple.comp_apply","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝³ : Semiring R₁\ninst✝² : Semiring R₂\ninst✝¹ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nx : R₁\n⊢ Eq (σ₂₃ (σ₁₂ x)) (σ₁₃ x)","decl":"@[simp]\ntheorem comp_apply [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] {x : R₁} : σ₂₃ (σ₁₂ x) = σ₁₃ x :=\n  RingHom.congr_fun comp_eq x\n\n"}
{"name":"RingHomInvPair.comp_eq","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ : RingHom R₁ R₂\nσ' : outParam (RingHom R₂ R₁)\nself : RingHomInvPair σ σ'\n⊢ Eq (RingHom.comp σ' σ) (RingHom.id R₁)","decl":"/-- Class that expresses the fact that two ring homomorphisms are inverses of each other. This is\nused to handle `symm` for semilinear equivalences. -/\nclass RingHomInvPair (σ : R₁ →+* R₂) (σ' : outParam (R₂ →+* R₁)) : Prop where\n  /-- `σ'` is a left inverse of `σ` -/\n  comp_eq : σ'.comp σ = RingHom.id R₁\n  /-- `σ'` is a left inverse of `σ'` -/\n  comp_eq₂ : σ.comp σ' = RingHom.id R₂\n\n"}
{"name":"RingHomInvPair.comp_eq₂","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ : RingHom R₁ R₂\nσ' : outParam (RingHom R₂ R₁)\nself : RingHomInvPair σ σ'\n⊢ Eq (σ.comp σ') (RingHom.id R₂)","decl":"/-- Class that expresses the fact that two ring homomorphisms are inverses of each other. This is\nused to handle `symm` for semilinear equivalences. -/\nclass RingHomInvPair (σ : R₁ →+* R₂) (σ' : outParam (R₂ →+* R₁)) : Prop where\n  /-- `σ'` is a left inverse of `σ` -/\n  comp_eq : σ'.comp σ = RingHom.id R₁\n  /-- `σ'` is a left inverse of `σ'` -/\n  comp_eq₂ : σ.comp σ' = RingHom.id R₂\n\n"}
{"name":"RingHomInvPair.comp_apply_eq","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\nσ : RingHom R₁ R₂\nσ' : RingHom R₂ R₁\ninst✝ : RingHomInvPair σ σ'\nx : R₁\n⊢ Eq (σ' (σ x)) x","decl":"theorem comp_apply_eq {x : R₁} : σ' (σ x) = x := by\n  rw [← RingHom.comp_apply, comp_eq]\n  simp\n\n"}
{"name":"RingHomInvPair.comp_apply_eq₂","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\nσ : RingHom R₁ R₂\nσ' : RingHom R₂ R₁\ninst✝ : RingHomInvPair σ σ'\nx : R₂\n⊢ Eq (σ (σ' x)) x","decl":"theorem comp_apply_eq₂ {x : R₂} : σ (σ' x) = x := by\n  rw [← RingHom.comp_apply, comp_eq₂]\n  simp\n\n"}
{"name":"RingHomInvPair.ids","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\ninst✝ : Semiring R₁\n⊢ RingHomInvPair (RingHom.id R₁) (RingHom.id R₁)","decl":"instance ids : RingHomInvPair (RingHom.id R₁) (RingHom.id R₁) :=\n  ⟨rfl, rfl⟩\n\n"}
{"name":"RingHomInvPair.triples","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝ : RingHomInvPair σ₁₂ σ₂₁\n⊢ RingHomCompTriple σ₁₂ σ₂₁ (RingHom.id R₁)","decl":"instance triples {σ₂₁ : R₂ →+* R₁} [RingHomInvPair σ₁₂ σ₂₁] :\n    RingHomCompTriple σ₁₂ σ₂₁ (RingHom.id R₁) :=\n  ⟨by simp only [comp_eq]⟩\n\n"}
{"name":"RingHomInvPair.triples₂","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝ : RingHomInvPair σ₁₂ σ₂₁\n⊢ RingHomCompTriple σ₂₁ σ₁₂ (RingHom.id R₂)","decl":"instance triples₂ {σ₂₁ : R₂ →+* R₁} [RingHomInvPair σ₁₂ σ₂₁] :\n    RingHomCompTriple σ₂₁ σ₁₂ (RingHom.id R₂) :=\n  ⟨by simp only [comp_eq₂]⟩\n\n"}
{"name":"RingHomInvPair.of_ringEquiv","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\ne : RingEquiv R₁ R₂\n⊢ RingHomInvPair ↑e ↑e.symm","decl":"/-- Construct a `RingHomInvPair` from both directions of a ring equiv.\n\nThis is not an instance, as for equivalences that are involutions, a better instance\nwould be `RingHomInvPair e e`. Indeed, this declaration is not currently used in mathlib.\n-/\ntheorem of_ringEquiv (e : R₁ ≃+* R₂) : RingHomInvPair (↑e : R₁ →+* R₂) ↑e.symm :=\n  ⟨e.symm_toRingHom_comp_toRingHom, e.symm.symm_toRingHom_comp_toRingHom⟩\n\n"}
{"name":"RingHomInvPair.symm","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\nσ₂₁ : RingHom R₂ R₁\ninst✝ : RingHomInvPair σ₁₂ σ₂₁\n⊢ RingHomInvPair σ₂₁ σ₁₂","decl":"/--\nSwap the direction of a `RingHomInvPair`. This is not an instance as it would loop, and better\ninstances are often available and may often be preferable to using this one. Indeed, this\ndeclaration is not currently used in mathlib.\n-/\ntheorem symm (σ₁₂ : R₁ →+* R₂) (σ₂₁ : R₂ →+* R₁) [RingHomInvPair σ₁₂ σ₂₁] :\n    RingHomInvPair σ₂₁ σ₁₂ :=\n  ⟨RingHomInvPair.comp_eq₂, RingHomInvPair.comp_eq⟩\n\n"}
{"name":"RingHomCompTriple.ids","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\n⊢ RingHomCompTriple (RingHom.id R₁) σ₁₂ σ₁₂","decl":"instance ids : RingHomCompTriple (RingHom.id R₁) σ₁₂ σ₁₂ :=\n  ⟨by\n    ext\n    simp⟩\n\n"}
{"name":"RingHomCompTriple.right_ids","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ₁₂ : RingHom R₁ R₂\n⊢ RingHomCompTriple σ₁₂ (RingHom.id R₂) σ₁₂","decl":"instance right_ids : RingHomCompTriple σ₁₂ (RingHom.id R₂) σ₁₂ :=\n  ⟨by\n    ext\n    simp⟩\n\n"}
{"name":"RingHomSurjective.is_surjective","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ : RingHom R₁ R₂\nself : RingHomSurjective σ\n⊢ Function.Surjective ⇑σ","decl":"/-- Class expressing the fact that a `RingHom` is surjective. This is needed in the context\nof semilinear maps, where some lemmas require this. -/\nclass RingHomSurjective (σ : R₁ →+* R₂) : Prop where\n  /-- The ring homomorphism is surjective -/\n  is_surjective : Function.Surjective σ\n\n"}
{"name":"RingHom.surjective","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ : RingHom R₁ R₂\nt : RingHomSurjective σ\n⊢ Function.Surjective ⇑σ","decl":"theorem RingHom.surjective (σ : R₁ →+* R₂) [t : RingHomSurjective σ] : Function.Surjective σ :=\n  t.is_surjective\n\n"}
{"name":"RingHomSurjective.invPair","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝² : Semiring R₁\ninst✝¹ : Semiring R₂\nσ₁ : RingHom R₁ R₂\nσ₂ : RingHom R₂ R₁\ninst✝ : RingHomInvPair σ₁ σ₂\n⊢ RingHomSurjective σ₁","decl":"instance (priority := 100) invPair {σ₁ : R₁ →+* R₂} {σ₂ : R₂ →+* R₁} [RingHomInvPair σ₁ σ₂] :\n    RingHomSurjective σ₁ :=\n  ⟨fun x => ⟨σ₂ x, RingHomInvPair.comp_apply_eq₂⟩⟩\n\n"}
{"name":"RingHomSurjective.ids","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\ninst✝ : Semiring R₁\n⊢ RingHomSurjective (RingHom.id R₁)","decl":"instance ids : RingHomSurjective (RingHom.id R₁) :=\n  ⟨is_surjective⟩\n\n"}
{"name":"RingHomSurjective.comp","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\nR₃ : Type u_3\ninst✝⁵ : Semiring R₁\ninst✝⁴ : Semiring R₂\ninst✝³ : Semiring R₃\nσ₁₂ : RingHom R₁ R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R₁ R₃\ninst✝² : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\ninst✝¹ : RingHomSurjective σ₁₂\ninst✝ : RingHomSurjective σ₂₃\n⊢ RingHomSurjective σ₁₃","decl":"/-- This cannot be an instance as there is no way to infer `σ₁₂` and `σ₂₃`. -/\ntheorem comp [RingHomCompTriple σ₁₂ σ₂₃ σ₁₃] [RingHomSurjective σ₁₂] [RingHomSurjective σ₂₃] :\n    RingHomSurjective σ₁₃ :=\n  { is_surjective := by\n      have := σ₂₃.surjective.comp σ₁₂.surjective\n      rwa [← RingHom.coe_comp, RingHomCompTriple.comp_eq] at this }\n\n"}
{"name":"RingHomSurjective.instToRingHomRingEquiv","module":"Mathlib.Algebra.Ring.CompTypeclasses","initialProofState":"R₁ : Type u_1\nR₂ : Type u_2\ninst✝¹ : Semiring R₁\ninst✝ : Semiring R₂\nσ : RingEquiv R₁ R₂\n⊢ RingHomSurjective ↑σ","decl":"instance (σ : R₁ ≃+* R₂) : RingHomSurjective (σ : R₁ →+* R₂) := ⟨σ.surjective⟩\n\n"}
