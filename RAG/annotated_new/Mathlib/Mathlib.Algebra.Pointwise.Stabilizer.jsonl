{"name":"AddAction.stabilizer_empty","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\n⊢ Eq (AddAction.stabilizer G EmptyCollection.emptyCollection) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_empty : stabilizer G (∅ : Set α) = ⊤ :=\n  Subgroup.coe_eq_univ.1 <| eq_univ_of_forall fun _a ↦ smul_set_empty\n\n"}
{"name":"MulAction.stabilizer_empty","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\n⊢ Eq (MulAction.stabilizer G EmptyCollection.emptyCollection) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_empty : stabilizer G (∅ : Set α) = ⊤ :=\n  Subgroup.coe_eq_univ.1 <| eq_univ_of_forall fun _a ↦ smul_set_empty\n\n"}
{"name":"AddAction.stabilizer_univ","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\n⊢ Eq (AddAction.stabilizer G Set.univ) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_univ : stabilizer G (Set.univ : Set α) = ⊤ := by\n  ext\n  simp\n\n"}
{"name":"MulAction.stabilizer_univ","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\n⊢ Eq (MulAction.stabilizer G Set.univ) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_univ : stabilizer G (Set.univ : Set α) = ⊤ := by\n  ext\n  simp\n\n"}
{"name":"AddAction.stabilizer_singleton","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\nb : α\n⊢ Eq (AddAction.stabilizer G (Singleton.singleton b)) (AddAction.stabilizer G b)","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_singleton (b : α) : stabilizer G ({b} : Set α) = stabilizer G b := by ext; simp\n\n"}
{"name":"MulAction.stabilizer_singleton","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\nb : α\n⊢ Eq (MulAction.stabilizer G (Singleton.singleton b)) (MulAction.stabilizer G b)","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_singleton (b : α) : stabilizer G ({b} : Set α) = stabilizer G b := by ext; simp\n\n"}
{"name":"MulAction.mem_stabilizer_set","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\na : G\ns : Set α\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (∀ (b : α), Iff (Membership.mem s (HSMul.hSMul a b)) (Membership.mem s b))","decl":"@[to_additive]\nlemma mem_stabilizer_set {s : Set α} : a ∈ stabilizer G s ↔ ∀ b, a • b ∈ s ↔ b ∈ s := by\n  refine mem_stabilizer_iff.trans ⟨fun h b ↦ ?_, fun h ↦ ?_⟩\n  · rw [← (smul_mem_smul_set_iff : a • b ∈ _ ↔ _), h]\n  simp_rw [Set.ext_iff, mem_smul_set_iff_inv_smul_mem]\n  exact ((MulAction.toPerm a).forall_congr' <| by simp [Iff.comm]).1 h\n\n"}
{"name":"AddAction.mem_stabilizer_set","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\na : G\ns : Set α\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (∀ (b : α), Iff (Membership.mem s (HVAdd.hVAdd a b)) (Membership.mem s b))","decl":"@[to_additive]\nlemma mem_stabilizer_set {s : Set α} : a ∈ stabilizer G s ↔ ∀ b, a • b ∈ s ↔ b ∈ s := by\n  refine mem_stabilizer_iff.trans ⟨fun h b ↦ ?_, fun h ↦ ?_⟩\n  · rw [← (smul_mem_smul_set_iff : a • b ∈ _ ↔ _), h]\n  simp_rw [Set.ext_iff, mem_smul_set_iff_inv_smul_mem]\n  exact ((MulAction.toPerm a).forall_congr' <| by simp [Iff.comm]).1 h\n\n"}
{"name":"AddAction.map_stabilizer_le","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝¹ : AddGroup G\ninst✝ : AddGroup H\nf : AddMonoidHom G H\ns : Set G\n⊢ LE.le (AddSubgroup.map f (AddAction.stabilizer G s)) (AddAction.stabilizer H (Set.image (⇑f) s))","decl":"@[to_additive]\nlemma map_stabilizer_le (f : G →* H) (s : Set G) :\n    (stabilizer G s).map f ≤ stabilizer H (f '' s) := by\n  rintro a\n  simp only [Subgroup.mem_map, mem_stabilizer_iff, exists_prop, forall_exists_index, and_imp]\n  rintro a ha rfl\n  rw [← image_smul_distrib, ha]\n\n"}
{"name":"MulAction.map_stabilizer_le","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nH : Type u_2\ninst✝¹ : Group G\ninst✝ : Group H\nf : MonoidHom G H\ns : Set G\n⊢ LE.le (Subgroup.map f (MulAction.stabilizer G s)) (MulAction.stabilizer H (Set.image (⇑f) s))","decl":"@[to_additive]\nlemma map_stabilizer_le (f : G →* H) (s : Set G) :\n    (stabilizer G s).map f ≤ stabilizer H (f '' s) := by\n  rintro a\n  simp only [Subgroup.mem_map, mem_stabilizer_iff, exists_prop, forall_exists_index, and_imp]\n  rintro a ha rfl\n  rw [← image_smul_distrib, ha]\n\n"}
{"name":"MulAction.stabilizer_mul_self","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Set G\n⊢ Eq (HMul.hMul (↑(MulAction.stabilizer G s)) s) s","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_mul_self (s : Set G) : (stabilizer G s : Set G) * s = s := by\n  ext\n  refine ⟨?_, fun h ↦ ⟨_, (stabilizer G s).one_mem, _, h, one_mul _⟩⟩\n  rintro ⟨a, ha, b, hb, rfl⟩\n  rw [← mem_stabilizer_iff.1 ha]\n  exact smul_mem_smul_set hb\n\n"}
{"name":"AddAction.stabilizer_add_self","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : Set G\n⊢ Eq (HAdd.hAdd (↑(AddAction.stabilizer G s)) s) s","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_mul_self (s : Set G) : (stabilizer G s : Set G) * s = s := by\n  ext\n  refine ⟨?_, fun h ↦ ⟨_, (stabilizer G s).one_mem, _, h, one_mul _⟩⟩\n  rintro ⟨a, ha, b, hb, rfl⟩\n  rw [← mem_stabilizer_iff.1 ha]\n  exact smul_mem_smul_set hb\n\n"}
{"name":"AddAction.stabilizer_inf_stabilizer_le_stabilizer_apply₂","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\ns t : Set α\nf : Set α → Set α → Set α\nhf : ∀ (a : G), Eq (HVAdd.hVAdd a (f s t)) (f (HVAdd.hVAdd a s) (HVAdd.hVAdd a t))\n⊢ LE.le (Min.min (AddAction.stabilizer G s) (AddAction.stabilizer G t)) (AddAction.stabilizer G (f s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_apply₂ {f : Set α → Set α → Set α}\n    (hf : ∀ a : G, a • f s t = f (a • s) (a • t)) :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (f s t) := by aesop (add simp [SetLike.le_def])\n\n"}
{"name":"MulAction.stabilizer_inf_stabilizer_le_stabilizer_apply₂","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\ns t : Set α\nf : Set α → Set α → Set α\nhf : ∀ (a : G), Eq (HSMul.hSMul a (f s t)) (f (HSMul.hSMul a s) (HSMul.hSMul a t))\n⊢ LE.le (Min.min (MulAction.stabilizer G s) (MulAction.stabilizer G t)) (MulAction.stabilizer G (f s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_apply₂ {f : Set α → Set α → Set α}\n    (hf : ∀ a : G, a • f s t = f (a • s) (a • t)) :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (f s t) := by aesop (add simp [SetLike.le_def])\n\n"}
{"name":"MulAction.stabilizer_inf_stabilizer_le_stabilizer_union","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\ns t : Set α\n⊢ LE.le (Min.min (MulAction.stabilizer G s) (MulAction.stabilizer G t)) (MulAction.stabilizer G (Union.union s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_union :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (s ∪ t) :=\n  stabilizer_inf_stabilizer_le_stabilizer_apply₂ fun _ ↦ smul_set_union\n\n"}
{"name":"AddAction.stabilizer_inf_stabilizer_le_stabilizer_union","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\ns t : Set α\n⊢ LE.le (Min.min (AddAction.stabilizer G s) (AddAction.stabilizer G t)) (AddAction.stabilizer G (Union.union s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_union :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (s ∪ t) :=\n  stabilizer_inf_stabilizer_le_stabilizer_apply₂ fun _ ↦ smul_set_union\n\n"}
{"name":"MulAction.stabilizer_inf_stabilizer_le_stabilizer_inter","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\ns t : Set α\n⊢ LE.le (Min.min (MulAction.stabilizer G s) (MulAction.stabilizer G t)) (MulAction.stabilizer G (Inter.inter s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_inter :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (s ∩ t) :=\n  stabilizer_inf_stabilizer_le_stabilizer_apply₂ fun _ ↦ smul_set_inter\n\n"}
{"name":"AddAction.stabilizer_inf_stabilizer_le_stabilizer_inter","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\ns t : Set α\n⊢ LE.le (Min.min (AddAction.stabilizer G s) (AddAction.stabilizer G t)) (AddAction.stabilizer G (Inter.inter s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_inter :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (s ∩ t) :=\n  stabilizer_inf_stabilizer_le_stabilizer_apply₂ fun _ ↦ smul_set_inter\n\n"}
{"name":"MulAction.stabilizer_inf_stabilizer_le_stabilizer_sdiff","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\ns t : Set α\n⊢ LE.le (Min.min (MulAction.stabilizer G s) (MulAction.stabilizer G t)) (MulAction.stabilizer G (SDiff.sdiff s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_sdiff :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (s \\ t) :=\n  stabilizer_inf_stabilizer_le_stabilizer_apply₂ fun _ ↦ smul_set_sdiff\n\n"}
{"name":"AddAction.stabilizer_inf_stabilizer_le_stabilizer_sdiff","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\ns t : Set α\n⊢ LE.le (Min.min (AddAction.stabilizer G s) (AddAction.stabilizer G t)) (AddAction.stabilizer G (SDiff.sdiff s t))","decl":"@[to_additive]\nlemma stabilizer_inf_stabilizer_le_stabilizer_sdiff :\n    stabilizer G s ⊓ stabilizer G t ≤ stabilizer G (s \\ t) :=\n  stabilizer_inf_stabilizer_le_stabilizer_apply₂ fun _ ↦ smul_set_sdiff\n\n"}
{"name":"MulAction.stabilizer_union_eq_left","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\ns t : Set α\nhdisj : Disjoint s t\nhstab : LE.le (MulAction.stabilizer G s) (MulAction.stabilizer G t)\nhstab_union : LE.le (MulAction.stabilizer G (Union.union s t)) (MulAction.stabilizer G t)\n⊢ Eq (MulAction.stabilizer G (Union.union s t)) (MulAction.stabilizer G s)","decl":"@[to_additive]\nlemma stabilizer_union_eq_left (hdisj : Disjoint s t) (hstab : stabilizer G s ≤ stabilizer G t)\n    (hstab_union : stabilizer G (s ∪ t) ≤ stabilizer G t) :\n    stabilizer G (s ∪ t) = stabilizer G s := by\n  refine le_antisymm ?_ ?_\n  · calc\n      stabilizer G (s ∪ t)\n        ≤ stabilizer G (s ∪ t) ⊓ stabilizer G t := by simpa\n      _ ≤ stabilizer G ((s ∪ t) \\ t) := stabilizer_inf_stabilizer_le_stabilizer_sdiff\n      _ = stabilizer G s := by rw [union_diff_cancel_right]; simpa [← disjoint_iff_inter_eq_empty]\n  · calc\n      stabilizer G s\n        ≤ stabilizer G s ⊓ stabilizer G t := by simpa\n      _ ≤ stabilizer G (s ∪ t) := stabilizer_inf_stabilizer_le_stabilizer_union\n\n"}
{"name":"AddAction.stabilizer_union_eq_left","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\ns t : Set α\nhdisj : Disjoint s t\nhstab : LE.le (AddAction.stabilizer G s) (AddAction.stabilizer G t)\nhstab_union : LE.le (AddAction.stabilizer G (Union.union s t)) (AddAction.stabilizer G t)\n⊢ Eq (AddAction.stabilizer G (Union.union s t)) (AddAction.stabilizer G s)","decl":"@[to_additive]\nlemma stabilizer_union_eq_left (hdisj : Disjoint s t) (hstab : stabilizer G s ≤ stabilizer G t)\n    (hstab_union : stabilizer G (s ∪ t) ≤ stabilizer G t) :\n    stabilizer G (s ∪ t) = stabilizer G s := by\n  refine le_antisymm ?_ ?_\n  · calc\n      stabilizer G (s ∪ t)\n        ≤ stabilizer G (s ∪ t) ⊓ stabilizer G t := by simpa\n      _ ≤ stabilizer G ((s ∪ t) \\ t) := stabilizer_inf_stabilizer_le_stabilizer_sdiff\n      _ = stabilizer G s := by rw [union_diff_cancel_right]; simpa [← disjoint_iff_inter_eq_empty]\n  · calc\n      stabilizer G s\n        ≤ stabilizer G s ⊓ stabilizer G t := by simpa\n      _ ≤ stabilizer G (s ∪ t) := stabilizer_inf_stabilizer_le_stabilizer_union\n\n"}
{"name":"MulAction.stabilizer_union_eq_right","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\ns t : Set α\nhdisj : Disjoint s t\nhstab : LE.le (MulAction.stabilizer G t) (MulAction.stabilizer G s)\nhstab_union : LE.le (MulAction.stabilizer G (Union.union s t)) (MulAction.stabilizer G s)\n⊢ Eq (MulAction.stabilizer G (Union.union s t)) (MulAction.stabilizer G t)","decl":"@[to_additive]\nlemma stabilizer_union_eq_right (hdisj : Disjoint s t) (hstab : stabilizer G t ≤ stabilizer G s)\n    (hstab_union : stabilizer G (s ∪ t) ≤ stabilizer G s)  :\n    stabilizer G (s ∪ t) = stabilizer G t := by\n  rw [union_comm, stabilizer_union_eq_left hdisj.symm hstab (union_comm .. ▸ hstab_union)]\n\n"}
{"name":"AddAction.stabilizer_union_eq_right","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\ns t : Set α\nhdisj : Disjoint s t\nhstab : LE.le (AddAction.stabilizer G t) (AddAction.stabilizer G s)\nhstab_union : LE.le (AddAction.stabilizer G (Union.union s t)) (AddAction.stabilizer G s)\n⊢ Eq (AddAction.stabilizer G (Union.union s t)) (AddAction.stabilizer G t)","decl":"@[to_additive]\nlemma stabilizer_union_eq_right (hdisj : Disjoint s t) (hstab : stabilizer G t ≤ stabilizer G s)\n    (hstab_union : stabilizer G (s ∪ t) ≤ stabilizer G s)  :\n    stabilizer G (s ∪ t) = stabilizer G t := by\n  rw [union_comm, stabilizer_union_eq_left hdisj.symm hstab (union_comm .. ▸ hstab_union)]\n\n"}
{"name":"MulAction.op_smul_set_stabilizer_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\na : G\ns : Set G\nha : Membership.mem s a\n⊢ HasSubset.Subset (HSMul.hSMul (MulOpposite.op a) ↑(MulAction.stabilizer G s)) s","decl":"open scoped RightActions in\n@[to_additive]\nlemma op_smul_set_stabilizer_subset (ha : a ∈ s) : (stabilizer G s : Set G) <• a ⊆ s :=\n  smul_set_subset_iff.2 fun b hb ↦ by rw [← hb]; exact smul_mem_smul_set ha\n\n"}
{"name":"AddAction.op_vadd_set_stabilizer_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na : G\ns : Set G\nha : Membership.mem s a\n⊢ HasSubset.Subset (HVAdd.hVAdd (AddOpposite.op a) ↑(AddAction.stabilizer G s)) s","decl":"open scoped RightActions in\n@[to_additive]\nlemma op_smul_set_stabilizer_subset (ha : a ∈ s) : (stabilizer G s : Set G) <• a ⊆ s :=\n  smul_set_subset_iff.2 fun b hb ↦ by rw [← hb]; exact smul_mem_smul_set ha\n\n"}
{"name":"MulAction.stabilizer_subset_div_right","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\na : G\ns : Set G\nha : Membership.mem s a\n⊢ HasSubset.Subset (↑(MulAction.stabilizer G s)) (HDiv.hDiv s (Singleton.singleton a))","decl":"@[to_additive]\nlemma stabilizer_subset_div_right (ha : a ∈ s) : ↑(stabilizer G s) ⊆ s / {a} := fun b hb ↦\n  ⟨_, by rwa [← smul_eq_mul, mem_stabilizer_set.1 hb], _, mem_singleton _, mul_div_cancel_right _ _⟩\n\n"}
{"name":"AddAction.stabilizer_subset_sub_right","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na : G\ns : Set G\nha : Membership.mem s a\n⊢ HasSubset.Subset (↑(AddAction.stabilizer G s)) (HSub.hSub s (Singleton.singleton a))","decl":"@[to_additive]\nlemma stabilizer_subset_div_right (ha : a ∈ s) : ↑(stabilizer G s) ⊆ s / {a} := fun b hb ↦\n  ⟨_, by rwa [← smul_eq_mul, mem_stabilizer_set.1 hb], _, mem_singleton _, mul_div_cancel_right _ _⟩\n\n"}
{"name":"AddAction.stabilizer_finite","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : Set G\nhs₀ : s.Nonempty\nhs : s.Finite\n⊢ (↑(AddAction.stabilizer G s)).Finite","decl":"@[to_additive]\nlemma stabilizer_finite (hs₀ : s.Nonempty) (hs : s.Finite) : (stabilizer G s : Set G).Finite := by\n  obtain ⟨a, ha⟩ := hs₀\n  exact (hs.div <| finite_singleton _).subset <| stabilizer_subset_div_right ha\n\n"}
{"name":"MulAction.stabilizer_finite","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Set G\nhs₀ : s.Nonempty\nhs : s.Finite\n⊢ (↑(MulAction.stabilizer G s)).Finite","decl":"@[to_additive]\nlemma stabilizer_finite (hs₀ : s.Nonempty) (hs : s.Finite) : (stabilizer G s : Set G).Finite := by\n  obtain ⟨a, ha⟩ := hs₀\n  exact (hs.div <| finite_singleton _).subset <| stabilizer_subset_div_right ha\n\n"}
{"name":"AddAction.vadd_set_stabilizer_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddCommGroup G\ns : Set G\na : G\nha : Membership.mem s a\n⊢ HasSubset.Subset (HVAdd.hVAdd a ↑(AddAction.stabilizer G s)) s","decl":"@[to_additive]\nlemma smul_set_stabilizer_subset (ha : a ∈ s) : a • (stabilizer G s : Set G) ⊆ s := by\n  simpa using op_smul_set_stabilizer_subset ha\n\n"}
{"name":"MulAction.smul_set_stabilizer_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : CommGroup G\ns : Set G\na : G\nha : Membership.mem s a\n⊢ HasSubset.Subset (HSMul.hSMul a ↑(MulAction.stabilizer G s)) s","decl":"@[to_additive]\nlemma smul_set_stabilizer_subset (ha : a ∈ s) : a • (stabilizer G s : Set G) ⊆ s := by\n  simpa using op_smul_set_stabilizer_subset ha\n\n"}
{"name":"MulAction.stabilizer_subgroup","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Subgroup G\n⊢ Eq (MulAction.stabilizer G ↑s) s","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_subgroup (s : Subgroup G) : stabilizer G (s : Set G) = s := by\n  simp_rw [SetLike.ext_iff, mem_stabilizer_set]\n  refine fun a ↦ ⟨fun h ↦ ?_, fun ha b ↦ s.mul_mem_cancel_left ha⟩\n  simpa only [smul_eq_mul, SetLike.mem_coe, mul_one] using (h 1).2 s.one_mem\n\n"}
{"name":"AddAction.stabilizer_addSubgroup","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : AddSubgroup G\n⊢ Eq (AddAction.stabilizer G ↑s) s","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_subgroup (s : Subgroup G) : stabilizer G (s : Set G) = s := by\n  simp_rw [SetLike.ext_iff, mem_stabilizer_set]\n  refine fun a ↦ ⟨fun h ↦ ?_, fun ha b ↦ s.mul_mem_cancel_left ha⟩\n  simpa only [smul_eq_mul, SetLike.mem_coe, mul_one] using (h 1).2 s.one_mem\n\n"}
{"name":"MulAction.stabilizer_op_subgroup","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Subgroup G\n⊢ Eq (MulAction.stabilizer (MulOpposite G) ↑s) s.op","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_op_subgroup (s : Subgroup G) : stabilizer Gᵐᵒᵖ (s : Set G) = s.op := by\n  simp_rw [SetLike.ext_iff, mem_stabilizer_set]\n  simp only [smul_eq_mul_unop, SetLike.mem_coe, Subgroup.mem_op, «forall», unop_op]\n  refine fun a ↦ ⟨fun h ↦ ?_, fun ha b ↦ s.mul_mem_cancel_right ha⟩\n  simpa only [op_smul_eq_mul, SetLike.mem_coe, one_mul] using (h 1).2 s.one_mem\n\n"}
{"name":"AddAction.stabilizer_op_addSubgroup","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : AddSubgroup G\n⊢ Eq (AddAction.stabilizer (AddOpposite G) ↑s) s.op","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_op_subgroup (s : Subgroup G) : stabilizer Gᵐᵒᵖ (s : Set G) = s.op := by\n  simp_rw [SetLike.ext_iff, mem_stabilizer_set]\n  simp only [smul_eq_mul_unop, SetLike.mem_coe, Subgroup.mem_op, «forall», unop_op]\n  refine fun a ↦ ⟨fun h ↦ ?_, fun ha b ↦ s.mul_mem_cancel_right ha⟩\n  simpa only [op_smul_eq_mul, SetLike.mem_coe, one_mul] using (h 1).2 s.one_mem\n\n"}
{"name":"MulAction.stabilizer_subgroup_op","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : Group G\ns : Subgroup (MulOpposite G)\n⊢ Eq (MulAction.stabilizer G ↑s) s.unop","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_subgroup_op (s : Subgroup Gᵐᵒᵖ) : stabilizer G (s : Set Gᵐᵒᵖ) = s.unop := by\n  simp_rw [SetLike.ext_iff, mem_stabilizer_set]\n  refine fun a ↦ ⟨fun h ↦ ?_, fun ha b ↦ s.mul_mem_cancel_right ha⟩\n  have : 1 * MulOpposite.op a ∈ s := (h 1).2 s.one_mem\n  simpa only [op_smul_eq_mul, SetLike.mem_coe, one_mul] using this\n\n"}
{"name":"AddAction.stabilizer_addSubgroup_op","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\ns : AddSubgroup (AddOpposite G)\n⊢ Eq (AddAction.stabilizer G ↑s) s.unop","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_subgroup_op (s : Subgroup Gᵐᵒᵖ) : stabilizer G (s : Set Gᵐᵒᵖ) = s.unop := by\n  simp_rw [SetLike.ext_iff, mem_stabilizer_set]\n  refine fun a ↦ ⟨fun h ↦ ?_, fun ha b ↦ s.mul_mem_cancel_right ha⟩\n  have : 1 * MulOpposite.op a ∈ s := (h 1).2 s.one_mem\n  simpa only [op_smul_eq_mul, SetLike.mem_coe, one_mul] using this\n\n"}
{"name":"AddAction.stabilizer_coe_finset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Eq (AddAction.stabilizer G ↑s) (AddAction.stabilizer G s)","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma stabilizer_coe_finset (s : Finset α) : stabilizer G (s : Set α) = stabilizer G s := by\n  ext; simp [← Finset.coe_inj]\n\n"}
{"name":"MulAction.stabilizer_coe_finset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Eq (MulAction.stabilizer G ↑s) (MulAction.stabilizer G s)","decl":"@[to_additive (attr := simp, norm_cast)]\nlemma stabilizer_coe_finset (s : Finset α) : stabilizer G (s : Set α) = stabilizer G s := by\n  ext; simp [← Finset.coe_inj]\n\n"}
{"name":"AddAction.stabilizer_finset_empty","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\ninst✝ : DecidableEq α\n⊢ Eq (AddAction.stabilizer G EmptyCollection.emptyCollection) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_finset_empty : stabilizer G (∅ : Finset α) = ⊤ :=\n  Subgroup.coe_eq_univ.1 <| eq_univ_of_forall Finset.smul_finset_empty\n\n"}
{"name":"MulAction.stabilizer_finset_empty","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\ninst✝ : DecidableEq α\n⊢ Eq (MulAction.stabilizer G EmptyCollection.emptyCollection) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_finset_empty : stabilizer G (∅ : Finset α) = ⊤ :=\n  Subgroup.coe_eq_univ.1 <| eq_univ_of_forall Finset.smul_finset_empty\n\n"}
{"name":"MulAction.stabilizer_finset_univ","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝³ : Group G\ninst✝² : MulAction G α\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\n⊢ Eq (MulAction.stabilizer G Finset.univ) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_finset_univ [Fintype α] : stabilizer G (Finset.univ : Finset α) = ⊤ := by\n  ext\n  simp\n\n"}
{"name":"AddAction.stabilizer_finset_univ","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝³ : AddGroup G\ninst✝² : AddAction G α\ninst✝¹ : DecidableEq α\ninst✝ : Fintype α\n⊢ Eq (AddAction.stabilizer G Finset.univ) Top.top","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_finset_univ [Fintype α] : stabilizer G (Finset.univ : Finset α) = ⊤ := by\n  ext\n  simp\n\n"}
{"name":"MulAction.stabilizer_finset_singleton","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\ninst✝ : DecidableEq α\nb : α\n⊢ Eq (MulAction.stabilizer G (Singleton.singleton b)) (MulAction.stabilizer G b)","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_finset_singleton (b : α) : stabilizer G ({b} : Finset α) = stabilizer G b := by\n  ext; simp\n\n"}
{"name":"AddAction.stabilizer_finset_singleton","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\ninst✝ : DecidableEq α\nb : α\n⊢ Eq (AddAction.stabilizer G (Singleton.singleton b)) (AddAction.stabilizer G b)","decl":"@[to_additive (attr := simp)]\nlemma stabilizer_finset_singleton (b : α) : stabilizer G ({b} : Finset α) = stabilizer G b := by\n  ext; simp\n\n"}
{"name":"MulAction.mem_stabilizer_finset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (∀ (b : α), Iff (Membership.mem s (HSMul.hSMul a b)) (Membership.mem s b))","decl":"@[to_additive]\nlemma mem_stabilizer_finset {s : Finset α} : a ∈ stabilizer G s ↔ ∀ b, a • b ∈ s ↔ b ∈ s := by\n  simp_rw [← stabilizer_coe_finset, mem_stabilizer_set, Finset.mem_coe]\n\n"}
{"name":"AddAction.mem_stabilizer_finset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (∀ (b : α), Iff (Membership.mem s (HVAdd.hVAdd a b)) (Membership.mem s b))","decl":"@[to_additive]\nlemma mem_stabilizer_finset {s : Finset α} : a ∈ stabilizer G s ↔ ∀ b, a • b ∈ s ↔ b ∈ s := by\n  simp_rw [← stabilizer_coe_finset, mem_stabilizer_set, Finset.mem_coe]\n\n"}
{"name":"MulAction.mem_stabilizer_finset_iff_subset_smul_finset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (HasSubset.Subset s (HSMul.hSMul a s))","decl":"@[to_additive]\nlemma mem_stabilizer_finset_iff_subset_smul_finset {s : Finset α} :\n    a ∈ stabilizer G s ↔ s ⊆ a • s := by\n  rw [mem_stabilizer_iff, Finset.subset_iff_eq_of_card_le (Finset.card_smul_finset _ _).le, eq_comm]\n\n"}
{"name":"AddAction.mem_stabilizer_finset_iff_subset_vadd_finset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (HasSubset.Subset s (HVAdd.hVAdd a s))","decl":"@[to_additive]\nlemma mem_stabilizer_finset_iff_subset_smul_finset {s : Finset α} :\n    a ∈ stabilizer G s ↔ s ⊆ a • s := by\n  rw [mem_stabilizer_iff, Finset.subset_iff_eq_of_card_le (Finset.card_smul_finset _ _).le, eq_comm]\n\n"}
{"name":"MulAction.mem_stabilizer_finset_iff_smul_finset_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (HasSubset.Subset (HSMul.hSMul a s) s)","decl":"@[to_additive]\nlemma mem_stabilizer_finset_iff_smul_finset_subset {s : Finset α} :\n    a ∈ stabilizer G s ↔ a • s ⊆ s := by\n  rw [mem_stabilizer_iff, Finset.subset_iff_eq_of_card_le (Finset.card_smul_finset _ _).ge]\n\n"}
{"name":"AddAction.mem_stabilizer_finset_iff_vadd_finset_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (HasSubset.Subset (HVAdd.hVAdd a s) s)","decl":"@[to_additive]\nlemma mem_stabilizer_finset_iff_smul_finset_subset {s : Finset α} :\n    a ∈ stabilizer G s ↔ a • s ⊆ s := by\n  rw [mem_stabilizer_iff, Finset.subset_iff_eq_of_card_le (Finset.card_smul_finset _ _).ge]\n\n"}
{"name":"MulAction.mem_stabilizer_finset'","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : Group G\ninst✝¹ : MulAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (∀ ⦃b : α⦄, Membership.mem s b → Membership.mem s (HSMul.hSMul a b))","decl":"@[to_additive]\nlemma mem_stabilizer_finset' {s : Finset α} : a ∈ stabilizer G s ↔ ∀ ⦃b⦄, b ∈ s → a • b ∈ s := by\n  rw [← Subgroup.inv_mem_iff, mem_stabilizer_finset_iff_subset_smul_finset]\n  simp_rw [← Finset.mem_inv_smul_finset_iff, Finset.subset_iff]\n\n"}
{"name":"AddAction.mem_stabilizer_finset'","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\na : G\ninst✝ : DecidableEq α\ns : Finset α\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (∀ ⦃b : α⦄, Membership.mem s b → Membership.mem s (HVAdd.hVAdd a b))","decl":"@[to_additive]\nlemma mem_stabilizer_finset' {s : Finset α} : a ∈ stabilizer G s ↔ ∀ ⦃b⦄, b ∈ s → a • b ∈ s := by\n  rw [← Subgroup.inv_mem_iff, mem_stabilizer_finset_iff_subset_smul_finset]\n  simp_rw [← Finset.mem_inv_smul_finset_iff, Finset.subset_iff]\n\n"}
{"name":"AddAction.mem_stabilizer_set_iff_subset_vadd_set","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (HasSubset.Subset s (HVAdd.hVAdd a s))","decl":"@[to_additive]\nlemma mem_stabilizer_set_iff_subset_smul_set {s : Set α} (hs : s.Finite) :\n    a ∈ stabilizer G s ↔ s ⊆ a • s := by\n  lift s to Finset α using hs\n  classical\n  rw [stabilizer_coe_finset, mem_stabilizer_finset_iff_subset_smul_finset, ← Finset.coe_smul_finset,\n    Finset.coe_subset]\n\n"}
{"name":"MulAction.mem_stabilizer_set_iff_subset_smul_set","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (HasSubset.Subset s (HSMul.hSMul a s))","decl":"@[to_additive]\nlemma mem_stabilizer_set_iff_subset_smul_set {s : Set α} (hs : s.Finite) :\n    a ∈ stabilizer G s ↔ s ⊆ a • s := by\n  lift s to Finset α using hs\n  classical\n  rw [stabilizer_coe_finset, mem_stabilizer_finset_iff_subset_smul_finset, ← Finset.coe_smul_finset,\n    Finset.coe_subset]\n\n"}
{"name":"MulAction.mem_stabilizer_set_iff_smul_set_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (HasSubset.Subset (HSMul.hSMul a s) s)","decl":"@[to_additive]\nlemma mem_stabilizer_set_iff_smul_set_subset {s : Set α} (hs : s.Finite) :\n    a ∈ stabilizer G s ↔ a • s ⊆ s := by\n  lift s to Finset α using hs\n  classical\n  rw [stabilizer_coe_finset, mem_stabilizer_finset_iff_smul_finset_subset, ← Finset.coe_smul_finset,\n    Finset.coe_subset]\n\n"}
{"name":"AddAction.mem_stabilizer_set_iff_vadd_set_subset","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (HasSubset.Subset (HVAdd.hVAdd a s) s)","decl":"@[to_additive]\nlemma mem_stabilizer_set_iff_smul_set_subset {s : Set α} (hs : s.Finite) :\n    a ∈ stabilizer G s ↔ a • s ⊆ s := by\n  lift s to Finset α using hs\n  classical\n  rw [stabilizer_coe_finset, mem_stabilizer_finset_iff_smul_finset_subset, ← Finset.coe_smul_finset,\n    Finset.coe_subset]\n\n"}
{"name":"MulAction.mem_stabilizer_of_finite_iff_smul_le","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (HasSubset.Subset s (HSMul.hSMul a s))","decl":"@[deprecated (since := \"2024-11-25\")]\nalias mem_stabilizer_of_finite_iff_smul_le := mem_stabilizer_set_iff_subset_smul_set\n\n"}
{"name":"MulAction.mem_stabilizer_of_finite_iff_le_smul","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (HasSubset.Subset (HSMul.hSMul a s) s)","decl":"@[deprecated (since := \"2024-11-25\")]\nalias mem_stabilizer_of_finite_iff_le_smul := mem_stabilizer_set_iff_smul_set_subset\n\n"}
{"name":"AddAction.mem_stabilizer_set'","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (AddAction.stabilizer G s) a) (∀ ⦃b : α⦄, Membership.mem s b → Membership.mem s (HVAdd.hVAdd a b))","decl":"@[to_additive]\nlemma mem_stabilizer_set' {s : Set α} (hs : s.Finite) :\n    a ∈ stabilizer G s ↔ ∀ ⦃b⦄, b ∈ s → a • b ∈ s := by\n  lift s to Finset α using hs\n  classical simp [-mem_stabilizer_iff, mem_stabilizer_finset']\n\n"}
{"name":"MulAction.mem_stabilizer_set'","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\nα : Type u_3\ninst✝¹ : Group G\ninst✝ : MulAction G α\na : G\ns : Set α\nhs : s.Finite\n⊢ Iff (Membership.mem (MulAction.stabilizer G s) a) (∀ ⦃b : α⦄, Membership.mem s b → Membership.mem s (HSMul.hSMul a b))","decl":"@[to_additive]\nlemma mem_stabilizer_set' {s : Set α} (hs : s.Finite) :\n    a ∈ stabilizer G s ↔ ∀ ⦃b⦄, b ∈ s → a • b ∈ s := by\n  lift s to Finset α using hs\n  classical simp [-mem_stabilizer_iff, mem_stabilizer_finset']\n\n"}
{"name":"MulAction.mul_stabilizer_self","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : CommGroup G\ns : Set G\n⊢ Eq (HMul.hMul s ↑(MulAction.stabilizer G s)) s","decl":"@[to_additive (attr := simp)]\nlemma mul_stabilizer_self : s * stabilizer G s = s := by rw [mul_comm, stabilizer_mul_self]\n\n"}
{"name":"AddAction.add_stabilizer_self","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddCommGroup G\ns : Set G\n⊢ Eq (HAdd.hAdd s ↑(AddAction.stabilizer G s)) s","decl":"@[to_additive (attr := simp)]\nlemma mul_stabilizer_self : s * stabilizer G s = s := by rw [mul_comm, stabilizer_mul_self]\n\n"}
{"name":"MulAction.stabilizer_image_coe_quotient","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : CommGroup G\ns : Set G\n⊢ Eq (MulAction.stabilizer (HasQuotient.Quotient G (MulAction.stabilizer G s)) (Set.image QuotientGroup.mk s)) Bot.bot","decl":"@[to_additive]\nlemma stabilizer_image_coe_quotient : stabilizer Q (q '' s) = ⊥ := by\n  ext a\n  induction' a using QuotientGroup.induction_on with a\n  simp only [mem_stabilizer_iff, Subgroup.mem_bot, QuotientGroup.eq_one_iff]\n  have : q a • q '' s = q '' (a • s) :=\n    (image_smul_distrib (QuotientGroup.mk' <| stabilizer G s) _ _).symm\n  rw [this]\n  refine ⟨fun h ↦ ?_, fun h ↦ by rw [h]⟩\n  rwa [QuotientGroup.image_coe_inj, mul_smul_comm, stabilizer_mul_self] at h\n\n"}
{"name":"AddAction.stabilizer_image_coe_quotient","module":"Mathlib.Algebra.Pointwise.Stabilizer","initialProofState":"G : Type u_1\ninst✝ : AddCommGroup G\ns : Set G\n⊢ Eq (AddAction.stabilizer (HasQuotient.Quotient G (AddAction.stabilizer G s)) (Set.image QuotientAddGroup.mk s)) Bot.bot","decl":"@[to_additive]\nlemma stabilizer_image_coe_quotient : stabilizer Q (q '' s) = ⊥ := by\n  ext a\n  induction' a using QuotientGroup.induction_on with a\n  simp only [mem_stabilizer_iff, Subgroup.mem_bot, QuotientGroup.eq_one_iff]\n  have : q a • q '' s = q '' (a • s) :=\n    (image_smul_distrib (QuotientGroup.mk' <| stabilizer G s) _ _).symm\n  rw [this]\n  refine ⟨fun h ↦ ?_, fun h ↦ by rw [h]⟩\n  rwa [QuotientGroup.image_coe_inj, mul_smul_comm, stabilizer_mul_self] at h\n\n"}
