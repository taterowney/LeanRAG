{"name":"SlashInvariantForm.exists_one_half_le_im_and_norm_le","module":"Mathlib.NumberTheory.ModularForms.LevelOne","initialProofState":"F : Type u_1\ninst✝¹ : FunLike F UpperHalfPlane Complex\nk : Int\ninst✝ : SlashInvariantFormClass F (CongruenceSubgroup.Gamma 1) k\nhk : LE.le k 0\nf : F\nτ : UpperHalfPlane\n⊢ Exists fun ξ => And (LE.le (1 / 2) ξ.im) (LE.le (Norm.norm (f τ)) (Norm.norm (f ξ)))","decl":"lemma exists_one_half_le_im_and_norm_le (hk : k ≤ 0) (f : F) (τ : ℍ) :\n    ∃ ξ : ℍ, 1 / 2 ≤ ξ.im ∧ ‖f τ‖ ≤ ‖f ξ‖ :=\n  let ⟨γ, hγ, hdenom⟩ := exists_one_half_le_im_smul_and_norm_denom_le τ\n  ⟨γ • τ, hγ, by simpa only [slash_action_eqn'' _ (mem_Gamma_one γ),\n    norm_mul, norm_zpow] using le_mul_of_one_le_left (norm_nonneg _) <|\n      one_le_zpow_of_nonpos₀ (norm_pos_iff.2 (denom_ne_zero _ _)) hdenom hk⟩\n\n"}
{"name":"SlashInvariantForm.wt_eq_zero_of_eq_const","module":"Mathlib.NumberTheory.ModularForms.LevelOne","initialProofState":"F : Type u_1\ninst✝¹ : FunLike F UpperHalfPlane Complex\nk : Int\ninst✝ : SlashInvariantFormClass F (CongruenceSubgroup.Gamma 1) k\nf : F\nc : Complex\nhf : Eq (⇑f) (Function.const UpperHalfPlane c)\n⊢ Or (Eq k 0) (Eq c 0)","decl":"variable (k) in\n/-- If a constant function is modular of weight `k`, then either `k = 0`, or the constant is `0`. -/\nlemma wt_eq_zero_of_eq_const {f : F} {c : ℂ} (hf : ⇑f = Function.const _ c) :\n    k = 0 ∨ c = 0 := by\n  have hI := slash_action_eqn'' f (mem_Gamma_one S) I\n  have h2I2 := slash_action_eqn'' f (mem_Gamma_one S) ⟨2 * Complex.I, by norm_num⟩\n  simp only [sl_moeb, hf, Function.const, denom_S, coe_mk_subtype] at hI h2I2\n  nth_rw 1 [h2I2] at hI\n  simp only [mul_zpow, coe_I, mul_eq_mul_right_iff, mul_left_eq_self₀] at hI\n  refine hI.imp_left (Or.casesOn · (fun H ↦ ?_) (False.elim ∘ zpow_ne_zero k I_ne_zero))\n  rwa [← ofReal_ofNat, ← ofReal_zpow, ← ofReal_one, ofReal_inj,\n    zpow_eq_one_iff_right₀ (by norm_num) (by norm_num)] at H\n\n"}
{"name":"ModularFormClass.levelOne_neg_weight_eq_zero","module":"Mathlib.NumberTheory.ModularForms.LevelOne","initialProofState":"F : Type u_1\ninst✝¹ : FunLike F UpperHalfPlane Complex\nk : Int\ninst✝ : ModularFormClass F (CongruenceSubgroup.Gamma 1) k\nhk : LT.lt k 0\nf : F\n⊢ Eq (⇑f) 0","decl":"lemma levelOne_neg_weight_eq_zero (hk : k < 0) (f : F) : ⇑f = 0 := by\n  have hf := levelOne_nonpos_wt_const hk.le f\n  rcases wt_eq_zero_of_eq_const k hf with rfl | hf₀\n  · exact (lt_irrefl _ hk).elim\n  · rw [hf, hf₀, const_zero]\n\n"}
{"name":"ModularFormClass.levelOne_weight_zero_const","module":"Mathlib.NumberTheory.ModularForms.LevelOne","initialProofState":"F : Type u_1\ninst✝¹ : FunLike F UpperHalfPlane Complex\ninst✝ : ModularFormClass F (CongruenceSubgroup.Gamma 1) 0\nf : F\n⊢ Exists fun c => Eq (⇑f) (Function.const UpperHalfPlane c)","decl":"lemma levelOne_weight_zero_const [ModularFormClass F Γ(1) 0] (f : F) :\n    ∃ c, ⇑f = Function.const _ c :=\n  ⟨_, levelOne_nonpos_wt_const le_rfl f⟩\n\n"}
{"name":"ModularForm.levelOne_weight_zero_rank_one","module":"Mathlib.NumberTheory.ModularForms.LevelOne","initialProofState":"⊢ Eq (Module.rank Complex (ModularForm (CongruenceSubgroup.Gamma 1) 0)) 1","decl":"lemma ModularForm.levelOne_weight_zero_rank_one : Module.rank ℂ (ModularForm Γ(1) 0) = 1 := by\n  refine rank_eq_one (const 1) (by simp [DFunLike.ne_iff]) fun g ↦ ?_\n  obtain ⟨c', hc'⟩ := levelOne_weight_zero_const g\n  aesop\n\n"}
{"name":"ModularForm.levelOne_neg_weight_rank_zero","module":"Mathlib.NumberTheory.ModularForms.LevelOne","initialProofState":"k : Int\nhk : LT.lt k 0\n⊢ Eq (Module.rank Complex (ModularForm (CongruenceSubgroup.Gamma 1) k)) 0","decl":"lemma ModularForm.levelOne_neg_weight_rank_zero (hk : k < 0) :\n    Module.rank ℂ (ModularForm Γ(1) k) = 0 := by\n  refine rank_eq_zero_iff.mpr fun f ↦ ⟨_, one_ne_zero, ?_⟩\n  simpa only [one_smul, ← DFunLike.coe_injective.eq_iff] using levelOne_neg_weight_eq_zero hk f\n"}
