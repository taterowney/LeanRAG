{"name":"WithCStarModule.instNontrivial","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝ : Nontrivial E\n⊢ Nontrivial (WithCStarModule E)","decl":"instance instNontrivial [Nontrivial E] : Nontrivial (WithCStarModule E) := ‹Nontrivial E›\n"}
{"name":"WithCStarModule.instNonempty","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝ : Nonempty E\n⊢ Nonempty (WithCStarModule E)","decl":"instance instNonempty [Nonempty E] : Nonempty (WithCStarModule E) := ‹Nonempty E›\n"}
{"name":"WithCStarModule.instIsScalarTower","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nR' : Type u_2\nE : Type u_3\ninst✝³ : SMul R R'\ninst✝² : SMul R E\ninst✝¹ : SMul R' E\ninst✝ : IsScalarTower R R' E\n⊢ IsScalarTower R R' (WithCStarModule E)","decl":"instance instIsScalarTower [SMul R R'] [SMul R E] [SMul R' E]\n    [IsScalarTower R R' E] : IsScalarTower R R' (WithCStarModule E) :=\n  ‹IsScalarTower R R' E›\n\n"}
{"name":"WithCStarModule.instSMulCommClass","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nR' : Type u_2\nE : Type u_3\ninst✝² : SMul R E\ninst✝¹ : SMul R' E\ninst✝ : SMulCommClass R R' E\n⊢ SMulCommClass R R' (WithCStarModule E)","decl":"instance instSMulCommClass [SMul R E] [SMul R' E] [SMulCommClass R R' E] :\n    SMulCommClass R R' (WithCStarModule E) :=\n  ‹SMulCommClass R R' E›\n\n"}
{"name":"WithCStarModule.equiv_zero","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E) 0) 0","decl":"@[simp]\ntheorem equiv_zero : equiv E 0 = 0 :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_zero","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E).symm 0) 0","decl":"@[simp]\ntheorem equiv_symm_zero : (equiv E).symm 0 = 0 :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_add","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nx y : WithCStarModule E\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E) (HAdd.hAdd x y)) (HAdd.hAdd ((WithCStarModule.equiv E) x) ((WithCStarModule.equiv E) y))","decl":"@[simp]\ntheorem equiv_add : equiv E (x + y) = equiv E x + equiv E y :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_add","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nx' y' : E\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E).symm (HAdd.hAdd x' y')) (HAdd.hAdd ((WithCStarModule.equiv E).symm x') ((WithCStarModule.equiv E).symm y'))","decl":"@[simp]\ntheorem equiv_symm_add :\n    (equiv E).symm (x' + y') = (equiv E).symm x' + (equiv E).symm y' :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_sub","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nx y : WithCStarModule E\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E) (HSub.hSub x y)) (HSub.hSub ((WithCStarModule.equiv E) x) ((WithCStarModule.equiv E) y))","decl":"@[simp]\ntheorem equiv_sub : equiv E (x - y) = equiv E x - equiv E y :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_sub","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nx' y' : E\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E).symm (HSub.hSub x' y')) (HSub.hSub ((WithCStarModule.equiv E).symm x') ((WithCStarModule.equiv E).symm y'))","decl":"@[simp]\ntheorem equiv_symm_sub :\n    (equiv E).symm (x' - y') = (equiv E).symm x' - (equiv E).symm y' :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_neg","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nx : WithCStarModule E\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E) (Neg.neg x)) (Neg.neg ((WithCStarModule.equiv E) x))","decl":"@[simp]\ntheorem equiv_neg : equiv E (-x) = -equiv E x :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_neg","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nx' : E\ninst✝ : AddCommGroup E\n⊢ Eq ((WithCStarModule.equiv E).symm (Neg.neg x')) (Neg.neg ((WithCStarModule.equiv E).symm x'))","decl":"@[simp]\ntheorem equiv_symm_neg : (equiv E).symm (-x') = -(equiv E).symm x' :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_smul","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝ : SMul R E\nc : R\nx : WithCStarModule E\n⊢ Eq ((WithCStarModule.equiv E) (HSMul.hSMul c x)) (HSMul.hSMul c ((WithCStarModule.equiv E) x))","decl":"@[simp]\ntheorem equiv_smul : equiv E (c • x) = c • equiv E x :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_smul","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝ : SMul R E\nc : R\nx' : E\n⊢ Eq ((WithCStarModule.equiv E).symm (HSMul.hSMul c x')) (HSMul.hSMul c ((WithCStarModule.equiv E).symm x'))","decl":"@[simp]\ntheorem equiv_symm_smul : (equiv E).symm (c • x') = c • (equiv E).symm x' :=\n  rfl\n\n"}
{"name":"WithCStarModule.linearEquiv_symm_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝² : Semiring R\ninst✝¹ : AddCommGroup E\ninst✝ : Module R E\n⊢ Eq ⇑(WithCStarModule.linearEquiv R E).symm ⇑(WithCStarModule.equiv E).symm","decl":"/-- `WithCStarModule.equiv` as a linear equivalence. -/\n@[simps (config := .asFn)]\ndef linearEquiv [Semiring R] [AddCommGroup E] [Module R E] : C⋆ᵐᵒᵈ E ≃ₗ[R] E :=\n  { LinearEquiv.refl _ _ with\n    toFun := equiv _\n    invFun := (equiv _).symm }\n\n"}
{"name":"WithCStarModule.linearEquiv_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝² : Semiring R\ninst✝¹ : AddCommGroup E\ninst✝ : Module R E\n⊢ Eq ⇑(WithCStarModule.linearEquiv R E) ⇑(WithCStarModule.equiv E)","decl":"/-- `WithCStarModule.equiv` as a linear equivalence. -/\n@[simps (config := .asFn)]\ndef linearEquiv [Semiring R] [AddCommGroup E] [Module R E] : C⋆ᵐᵒᵈ E ≃ₗ[R] E :=\n  { LinearEquiv.refl _ _ with\n    toFun := equiv _\n    invFun := (equiv _).symm }\n\n"}
{"name":"WithCStarModule.map_top_submodule","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\nR : Type u_4\ninst✝² : Semiring R\ninst✝¹ : AddCommGroup E\ninst✝ : Module R E\n⊢ Eq (Submodule.map (WithCStarModule.linearEquiv R E).symm Top.top) Top.top","decl":"lemma map_top_submodule {R : Type*} [Semiring R] [AddCommGroup E] [Module R E] :\n    (⊤ : Submodule R E).map (linearEquiv R E).symm = ⊤ := by\n  ext x\n  refine ⟨fun _  => trivial, fun _ => ?_⟩\n  rw [Submodule.mem_map]\n  exact ⟨linearEquiv R E x, by simp⟩\n\n"}
{"name":"WithCStarModule.instModuleFinite","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommGroup E\ninst✝¹ : Module R E\ninst✝ : Module.Finite R E\n⊢ Module.Finite R (WithCStarModule E)","decl":"instance instModuleFinite [Semiring R] [AddCommGroup E] [Module R E] [Module.Finite R E] :\n    Module.Finite R (WithCStarModule E) := inferInstanceAs (Module.Finite R E)\n\n"}
{"name":"WithCStarModule.equivL_symm_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommGroup E\ninst✝¹ : UniformSpace E\ninst✝ : Module R E\na : E\n⊢ Eq ((WithCStarModule.equivL R).symm a) ((WithCStarModule.equiv E).symm a)","decl":"/-- `WithCStarModule.equiv` as a continuous linear equivalence between `C⋆ᵐᵒᵈ E` and `E`. -/\n@[simps! apply symm_apply]\ndef equivL [Semiring R] [AddCommGroup E] [UniformSpace E] [Module R E] : C⋆ᵐᵒᵈ E ≃L[R] E :=\n  { linearEquiv R E with\n    continuous_toFun := UniformEquiv.continuous uniformEquiv\n    continuous_invFun := UniformEquiv.continuous uniformEquiv.symm }\n\n"}
{"name":"WithCStarModule.equivL_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommGroup E\ninst✝¹ : UniformSpace E\ninst✝ : Module R E\na : WithCStarModule E\n⊢ Eq ((WithCStarModule.equivL R) a) ((WithCStarModule.equiv E) a)","decl":"/-- `WithCStarModule.equiv` as a continuous linear equivalence between `C⋆ᵐᵒᵈ E` and `E`. -/\n@[simps! apply symm_apply]\ndef equivL [Semiring R] [AddCommGroup E] [UniformSpace E] [Module R E] : C⋆ᵐᵒᵈ E ≃L[R] E :=\n  { linearEquiv R E with\n    continuous_toFun := UniformEquiv.continuous uniformEquiv\n    continuous_invFun := UniformEquiv.continuous uniformEquiv.symm }\n\n"}
{"name":"WithCStarModule.instCompleteSpace","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝¹ : UniformSpace E\ninst✝ : CompleteSpace E\n⊢ CompleteSpace (WithCStarModule E)","decl":"instance [UniformSpace E] [CompleteSpace E] : CompleteSpace (C⋆ᵐᵒᵈ E) :=\n  uniformEquiv.completeSpace_iff.mpr inferInstance\n\n"}
{"name":"WithCStarModule.instContinuousAdd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝² : AddCommGroup E\ninst✝¹ : UniformSpace E\ninst✝ : ContinuousAdd E\n⊢ ContinuousAdd (WithCStarModule E)","decl":"instance [AddCommGroup E] [UniformSpace E] [ContinuousAdd E] : ContinuousAdd (C⋆ᵐᵒᵈ E) :=\n  ContinuousAdd.induced (addEquiv E)\n\n"}
{"name":"WithCStarModule.instUniformAddGroup","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_3\ninst✝² : AddCommGroup E\ninst✝¹ : UniformSpace E\ninst✝ : UniformAddGroup E\n⊢ UniformAddGroup (WithCStarModule E)","decl":"instance [AddCommGroup E] [UniformSpace E] [UniformAddGroup E] : UniformAddGroup (C⋆ᵐᵒᵈ E) :=\n  UniformAddGroup.comap (addEquiv E)\n\n"}
{"name":"WithCStarModule.instContinuousSMul","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_3\ninst✝⁵ : Semiring R\ninst✝⁴ : TopologicalSpace R\ninst✝³ : AddCommGroup E\ninst✝² : UniformSpace E\ninst✝¹ : Module R E\ninst✝ : ContinuousSMul R E\n⊢ ContinuousSMul R (WithCStarModule E)","decl":"instance [Semiring R] [TopologicalSpace R] [AddCommGroup E] [UniformSpace E] [Module R E]\n    [ContinuousSMul R E] : ContinuousSMul R (C⋆ᵐᵒᵈ E) :=\n  ContinuousSMul.induced (linearEquiv R E)\n\n"}
{"name":"WithCStarModule.zero_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq 0.1 0","decl":"@[simp]\ntheorem zero_fst : (0 : C⋆ᵐᵒᵈ (E × F)).fst = 0 :=\n  rfl\n\n"}
{"name":"WithCStarModule.zero_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq 0.2 0","decl":"@[simp]\ntheorem zero_snd : (0 : C⋆ᵐᵒᵈ (E × F)).snd = 0 :=\n  rfl\n\n"}
{"name":"WithCStarModule.add_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx y : WithCStarModule (Prod E F)\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq (HAdd.hAdd x y).1 (HAdd.hAdd x.1 y.1)","decl":"@[simp]\ntheorem add_fst : (x + y).fst = x.fst + y.fst :=\n  rfl\n\n"}
{"name":"WithCStarModule.add_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx y : WithCStarModule (Prod E F)\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq (HAdd.hAdd x y).2 (HAdd.hAdd x.2 y.2)","decl":"@[simp]\ntheorem add_snd : (x + y).snd = x.snd + y.snd :=\n  rfl\n\n"}
{"name":"WithCStarModule.sub_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx y : WithCStarModule (Prod E F)\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq (HSub.hSub x y).1 (HSub.hSub x.1 y.1)","decl":"@[simp]\ntheorem sub_fst : (x - y).fst = x.fst - y.fst :=\n  rfl\n\n"}
{"name":"WithCStarModule.sub_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx y : WithCStarModule (Prod E F)\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq (HSub.hSub x y).2 (HSub.hSub x.2 y.2)","decl":"@[simp]\ntheorem sub_snd : (x - y).snd = x.snd - y.snd :=\n  rfl\n\n"}
{"name":"WithCStarModule.neg_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx : WithCStarModule (Prod E F)\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq (Neg.neg x).1 (Neg.neg x.1)","decl":"@[simp]\ntheorem neg_fst : (-x).fst = -x.fst :=\n  rfl\n\n"}
{"name":"WithCStarModule.neg_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx : WithCStarModule (Prod E F)\ninst✝¹ : AddCommGroup E\ninst✝ : AddCommGroup F\n⊢ Eq (Neg.neg x).2 (Neg.neg x.2)","decl":"@[simp]\ntheorem neg_snd : (-x).snd = -x.snd :=\n  rfl\n\n"}
{"name":"WithCStarModule.smul_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹ : SMul R E\ninst✝ : SMul R F\nx : WithCStarModule (Prod E F)\nc : R\n⊢ Eq (HSMul.hSMul c x).1 (HSMul.hSMul c x.1)","decl":"@[simp]\ntheorem smul_fst : (c • x).fst = c • x.fst :=\n  rfl\n\n"}
{"name":"WithCStarModule.smul_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝¹ : SMul R E\ninst✝ : SMul R F\nx : WithCStarModule (Prod E F)\nc : R\n⊢ Eq (HSMul.hSMul c x).2 (HSMul.hSMul c x.2)","decl":"@[simp]\ntheorem smul_snd : (c • x).snd = c • x.snd :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx : WithCStarModule (Prod E F)\n⊢ Eq ((WithCStarModule.equiv (Prod E F)) x).1 x.1","decl":"@[simp]\ntheorem equiv_fst (x : C⋆ᵐᵒᵈ (E × F)) : (equiv (E × F) x).fst = x.fst :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx : WithCStarModule (Prod E F)\n⊢ Eq ((WithCStarModule.equiv (Prod E F)) x).2 x.2","decl":"@[simp]\ntheorem equiv_snd (x : C⋆ᵐᵒᵈ (E × F)) : (equiv (E × F) x).snd = x.snd :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_fst","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx : Prod E F\n⊢ Eq ((WithCStarModule.equiv (Prod E F)).symm x).1 x.1","decl":"@[simp]\ntheorem equiv_symm_fst (x : E × F) : ((equiv (E × F)).symm x).fst = x.fst :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_snd","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"E : Type u_2\nF : Type u_3\nx : Prod E F\n⊢ Eq ((WithCStarModule.equiv (Prod E F)).symm x).2 x.2","decl":"@[simp]\ntheorem equiv_symm_snd (x : E × F) : ((equiv (E × F)).symm x).snd = x.snd :=\n  rfl\n\n"}
{"name":"WithCStarModule.ext_iff","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_1\nE : ι → Type u_2\nx y : WithCStarModule ((i : ι) → E i)\n⊢ Iff (Eq x y) (∀ (i : ι), Eq (x i) (y i))","decl":"@[ext]\nprotected theorem ext {ι : Type*} {E : ι → Type*} {x y : C⋆ᵐᵒᵈ (Π i, E i)}\n    (h : ∀ i, x i = y i) : x = y :=\n  funext h\n\n"}
{"name":"WithCStarModule.ext","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_1\nE : ι → Type u_2\nx y : WithCStarModule ((i : ι) → E i)\nh : ∀ (i : ι), Eq (x i) (y i)\n⊢ Eq x y","decl":"@[ext]\nprotected theorem ext {ι : Type*} {E : ι → Type*} {x y : C⋆ᵐᵒᵈ (Π i, E i)}\n    (h : ∀ i, x i = y i) : x = y :=\n  funext h\n\n"}
{"name":"WithCStarModule.zero_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_2\nE : ι → Type u_3\ni : ι\ninst✝ : (i : ι) → AddCommGroup (E i)\n⊢ Eq (0 i) 0","decl":"@[simp]\ntheorem zero_apply : (0 : C⋆ᵐᵒᵈ (Π i, E i)) i = 0 :=\n  rfl\n\n"}
{"name":"WithCStarModule.add_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_2\nE : ι → Type u_3\nx y : WithCStarModule ((i : ι) → E i)\ni : ι\ninst✝ : (i : ι) → AddCommGroup (E i)\n⊢ Eq (HAdd.hAdd x y i) (HAdd.hAdd (x i) (y i))","decl":"@[simp]\ntheorem add_apply : (x + y) i = x i + y i :=\n  rfl\n\n"}
{"name":"WithCStarModule.sub_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_2\nE : ι → Type u_3\nx y : WithCStarModule ((i : ι) → E i)\ni : ι\ninst✝ : (i : ι) → AddCommGroup (E i)\n⊢ Eq (HSub.hSub x y i) (HSub.hSub (x i) (y i))","decl":"@[simp]\ntheorem sub_apply : (x - y) i = x i - y i :=\n  rfl\n\n"}
{"name":"WithCStarModule.neg_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_2\nE : ι → Type u_3\nx : WithCStarModule ((i : ι) → E i)\ni : ι\ninst✝ : (i : ι) → AddCommGroup (E i)\n⊢ Eq (Neg.neg x i) (Neg.neg (x i))","decl":"@[simp]\ntheorem neg_apply : (-x) i = -x i :=\n  rfl\n\n"}
{"name":"WithCStarModule.smul_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"R : Type u_1\nι : Type u_2\nE : ι → Type u_3\ninst✝ : (i : ι) → SMul R (E i)\nc : R\nx : WithCStarModule ((i : ι) → E i)\ni : ι\n⊢ Eq (HSMul.hSMul c x i) (HSMul.hSMul c (x i))","decl":"@[simp]\ntheorem smul_apply : (c • x) i = c • x i :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_pi_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_2\nE : ι → Type u_3\nx : WithCStarModule ((i : ι) → E i)\ni : ι\n⊢ Eq ((WithCStarModule.equiv ((i : ι) → E i)) x i) (x i)","decl":"@[simp]\ntheorem equiv_pi_apply (i : ι) : equiv _ x i = x i :=\n  rfl\n\n"}
{"name":"WithCStarModule.equiv_symm_pi_apply","module":"Mathlib.Analysis.CStarAlgebra.Module.Synonym","initialProofState":"ι : Type u_2\nE : ι → Type u_3\nx : (i : ι) → E i\ni : ι\n⊢ Eq ((WithCStarModule.equiv ((i : ι) → E i)).symm x i) (x i)","decl":"@[simp]\ntheorem equiv_symm_pi_apply (x : ∀ i, E i) (i : ι) :\n    (WithCStarModule.equiv _).symm x i = x i :=\n  rfl\n\n"}
