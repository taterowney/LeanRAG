{"name":"Multiset.map_add_left_Icc","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd c x) (Multiset.Icc a b)) (Multiset.Icc (HAdd.hAdd c a) (HAdd.hAdd c b))","decl":"lemma map_add_left_Icc (a b c : α) : (Icc a b).map (c + ·) = Icc (c + a) (c + b) := by\n  classical rw [Icc, Icc, ← Finset.image_add_left_Icc, Finset.image_val,\n      ((Finset.nodup _).map <| add_right_injective c).dedup]\n\n"}
{"name":"Multiset.map_add_left_Ico","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd c x) (Multiset.Ico a b)) (Multiset.Ico (HAdd.hAdd c a) (HAdd.hAdd c b))","decl":"lemma map_add_left_Ico (a b c : α) : (Ico a b).map (c + ·) = Ico (c + a) (c + b) := by\n  classical rw [Ico, Ico, ← Finset.image_add_left_Ico, Finset.image_val,\n      ((Finset.nodup _).map <| add_right_injective c).dedup]\n\n"}
{"name":"Multiset.map_add_left_Ioc","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd c x) (Multiset.Ioc a b)) (Multiset.Ioc (HAdd.hAdd c a) (HAdd.hAdd c b))","decl":"lemma map_add_left_Ioc (a b c : α) : (Ioc a b).map (c + ·) = Ioc (c + a) (c + b) := by\n  classical rw [Ioc, Ioc, ← Finset.image_add_left_Ioc, Finset.image_val,\n      ((Finset.nodup _).map <| add_right_injective c).dedup]\n\n"}
{"name":"Multiset.map_add_left_Ioo","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd c x) (Multiset.Ioo a b)) (Multiset.Ioo (HAdd.hAdd c a) (HAdd.hAdd c b))","decl":"lemma map_add_left_Ioo (a b c : α) : (Ioo a b).map (c + ·) = Ioo (c + a) (c + b) := by\n  classical rw [Ioo, Ioo, ← Finset.image_add_left_Ioo, Finset.image_val,\n      ((Finset.nodup _).map <| add_right_injective c).dedup]\n\n"}
{"name":"Multiset.map_add_right_Icc","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd x c) (Multiset.Icc a b)) (Multiset.Icc (HAdd.hAdd a c) (HAdd.hAdd b c))","decl":"lemma map_add_right_Icc (a b c : α) : ((Icc a b).map fun x => x + c) = Icc (a + c) (b + c) := by\n  simp_rw [add_comm _ c]\n  exact map_add_left_Icc _ _ _\n\n"}
{"name":"Multiset.map_add_right_Ico","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd x c) (Multiset.Ico a b)) (Multiset.Ico (HAdd.hAdd a c) (HAdd.hAdd b c))","decl":"lemma map_add_right_Ico (a b c : α) : ((Ico a b).map fun x => x + c) = Ico (a + c) (b + c) := by\n  simp_rw [add_comm _ c]\n  exact map_add_left_Ico _ _ _\n\n"}
{"name":"Multiset.map_add_right_Ioc","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd x c) (Multiset.Ioc a b)) (Multiset.Ioc (HAdd.hAdd a c) (HAdd.hAdd b c))","decl":"lemma map_add_right_Ioc (a b c : α) : ((Ioc a b).map fun x => x + c) = Ioc (a + c) (b + c) := by\n  simp_rw [add_comm _ c]\n  exact map_add_left_Ioc _ _ _\n\n"}
{"name":"Multiset.map_add_right_Ioo","module":"Mathlib.Algebra.Order.Interval.Multiset","initialProofState":"α : Type u_1\ninst✝² : OrderedCancelAddCommMonoid α\ninst✝¹ : ExistsAddOfLE α\ninst✝ : LocallyFiniteOrder α\na b c : α\n⊢ Eq (Multiset.map (fun x => HAdd.hAdd x c) (Multiset.Ioo a b)) (Multiset.Ioo (HAdd.hAdd a c) (HAdd.hAdd b c))","decl":"lemma map_add_right_Ioo (a b c : α) : ((Ioo a b).map fun x => x + c) = Ioo (a + c) (b + c) := by\n  simp_rw [add_comm _ c]\n  exact map_add_left_Ioo _ _ _\n\n"}
