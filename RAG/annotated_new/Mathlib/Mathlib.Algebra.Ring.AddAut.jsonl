{"name":"AddAut.mulLeft_apply_symm_apply","module":"Mathlib.Algebra.Ring.AddAut","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nx : Units R\na✝ : R\n⊢ Eq ((AddEquiv.symm (AddAut.mulLeft x)) a✝) (HSMul.hSMul (Inv.inv x) a✝)","decl":"/-- Left multiplication by a unit of a semiring as an additive automorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef mulLeft : Rˣ →* AddAut R :=\n  DistribMulAction.toAddAut _ _\n\n"}
{"name":"AddAut.mulLeft_apply_apply","module":"Mathlib.Algebra.Ring.AddAut","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nx : Units R\na✝ : R\n⊢ Eq ((AddAut.mulLeft x) a✝) (HSMul.hSMul x a✝)","decl":"/-- Left multiplication by a unit of a semiring as an additive automorphism. -/\n@[simps! (config := { simpRhs := true })]\ndef mulLeft : Rˣ →* AddAut R :=\n  DistribMulAction.toAddAut _ _\n\n"}
{"name":"AddAut.mulRight_apply","module":"Mathlib.Algebra.Ring.AddAut","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nu : Units R\nx : R\n⊢ Eq ((AddAut.mulRight u) x) (HMul.hMul x ↑u)","decl":"@[simp]\ntheorem mulRight_apply (u : Rˣ) (x : R) : mulRight u x = x * u :=\n  rfl\n\n"}
{"name":"AddAut.mulRight_symm_apply","module":"Mathlib.Algebra.Ring.AddAut","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nu : Units R\nx : R\n⊢ Eq ((AddEquiv.symm (AddAut.mulRight u)) x) (HMul.hMul x ↑(Inv.inv u))","decl":"@[simp]\ntheorem mulRight_symm_apply (u : Rˣ) (x : R) : (mulRight u).symm x = x * u⁻¹ :=\n  rfl\n\n"}
