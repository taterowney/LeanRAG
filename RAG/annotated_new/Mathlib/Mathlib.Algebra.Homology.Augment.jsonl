{"name":"ChainComplex.truncate_map_f","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nX‚úù Y‚úù : ChainComplex V Nat\nf : Quiver.Hom X‚úù Y‚úù\ni : Nat\n‚ä¢ Eq ((ChainComplex.truncate.map f).f i) (f.f (HAdd.hAdd i 1))","decl":"/-- The truncation of an `‚Ñï`-indexed chain complex,\ndeleting the object at `0` and shifting everything else down.\n-/\n@[simps]\ndef truncate [HasZeroMorphisms V] : ChainComplex V ‚Ñï ‚•§ ChainComplex V ‚Ñï where\n  obj C :=\n    { X := fun i => C.X (i + 1)\n      d := fun i j => C.d (i + 1) (j + 1)\n      shape := fun i j w => C.shape _ _ <| by simpa }\n  map f := { f := fun i => f.f (i + 1) }\n\n"}
{"name":"ChainComplex.truncate_obj_X","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\ni : Nat\n‚ä¢ Eq ((ChainComplex.truncate.obj C).X i) (C.X (HAdd.hAdd i 1))","decl":"/-- The truncation of an `‚Ñï`-indexed chain complex,\ndeleting the object at `0` and shifting everything else down.\n-/\n@[simps]\ndef truncate [HasZeroMorphisms V] : ChainComplex V ‚Ñï ‚•§ ChainComplex V ‚Ñï where\n  obj C :=\n    { X := fun i => C.X (i + 1)\n      d := fun i j => C.d (i + 1) (j + 1)\n      shape := fun i j w => C.shape _ _ <| by simpa }\n  map f := { f := fun i => f.f (i + 1) }\n\n"}
{"name":"ChainComplex.truncate_obj_d","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\ni j : Nat\n‚ä¢ Eq ((ChainComplex.truncate.obj C).d i j) (C.d (HAdd.hAdd i 1) (HAdd.hAdd j 1))","decl":"/-- The truncation of an `‚Ñï`-indexed chain complex,\ndeleting the object at `0` and shifting everything else down.\n-/\n@[simps]\ndef truncate [HasZeroMorphisms V] : ChainComplex V ‚Ñï ‚•§ ChainComplex V ‚Ñï where\n  obj C :=\n    { X := fun i => C.X (i + 1)\n      d := fun i j => C.d (i + 1) (j + 1)\n      shape := fun i j w => C.shape _ _ <| by simpa }\n  map f := { f := fun i => f.f (i + 1) }\n\n"}
{"name":"ChainComplex.augment_X_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\nX : V\nf : Quiver.Hom (C.X 0) X\nw : Eq (CategoryTheory.CategoryStruct.comp (C.d 1 0) f) 0\n‚ä¢ Eq ((C.augment f w).X 0) X","decl":"@[simp]\ntheorem augment_X_zero (C : ChainComplex V ‚Ñï) {X : V} (f : C.X 0 ‚ü∂ X) (w : C.d 1 0 ‚â´ f = 0) :\n    (augment C f w).X 0 = X :=\n  rfl\n\n"}
{"name":"ChainComplex.augment_X_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\nX : V\nf : Quiver.Hom (C.X 0) X\nw : Eq (CategoryTheory.CategoryStruct.comp (C.d 1 0) f) 0\ni : Nat\n‚ä¢ Eq ((C.augment f w).X (HAdd.hAdd i 1)) (C.X i)","decl":"@[simp]\ntheorem augment_X_succ (C : ChainComplex V ‚Ñï) {X : V} (f : C.X 0 ‚ü∂ X) (w : C.d 1 0 ‚â´ f = 0)\n    (i : ‚Ñï) : (augment C f w).X (i + 1) = C.X i :=\n  rfl\n\n"}
{"name":"ChainComplex.augment_d_one_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\nX : V\nf : Quiver.Hom (C.X 0) X\nw : Eq (CategoryTheory.CategoryStruct.comp (C.d 1 0) f) 0\n‚ä¢ Eq ((C.augment f w).d 1 0) f","decl":"@[simp]\ntheorem augment_d_one_zero (C : ChainComplex V ‚Ñï) {X : V} (f : C.X 0 ‚ü∂ X) (w : C.d 1 0 ‚â´ f = 0) :\n    (augment C f w).d 1 0 = f :=\n  rfl\n\n"}
{"name":"ChainComplex.augment_d_succ_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\nX : V\nf : Quiver.Hom (C.X 0) X\nw : Eq (CategoryTheory.CategoryStruct.comp (C.d 1 0) f) 0\ni j : Nat\n‚ä¢ Eq ((C.augment f w).d (HAdd.hAdd i 1) (HAdd.hAdd j 1)) (C.d i j)","decl":"@[simp]\ntheorem augment_d_succ_succ (C : ChainComplex V ‚Ñï) {X : V} (f : C.X 0 ‚ü∂ X) (w : C.d 1 0 ‚â´ f = 0)\n    (i j : ‚Ñï) : (augment C f w).d (i + 1) (j + 1) = C.d i j := by\n  cases i <;> rfl\n\n"}
{"name":"ChainComplex.truncateAugment_hom_f","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\nX : V\nf : Quiver.Hom (C.X 0) X\nw : Eq (CategoryTheory.CategoryStruct.comp (C.d 1 0) f) 0\ni : Nat\n‚ä¢ Eq ((C.truncateAugment f w).hom.f i) (CategoryTheory.CategoryStruct.id (C.X i))","decl":"@[simp]\ntheorem truncateAugment_hom_f (C : ChainComplex V ‚Ñï) {X : V} (f : C.X 0 ‚ü∂ X) (w : C.d 1 0 ‚â´ f = 0)\n    (i : ‚Ñï) : (truncateAugment C f w).hom.f i = ùüô (C.X i) :=\n  rfl\n\n"}
{"name":"ChainComplex.truncateAugment_inv_f","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\nX : V\nf : Quiver.Hom (C.X 0) X\nw : Eq (CategoryTheory.CategoryStruct.comp (C.d 1 0) f) 0\ni : Nat\n‚ä¢ Eq ((C.truncateAugment f w).inv.f i) (CategoryTheory.CategoryStruct.id ((ChainComplex.truncate.obj (C.augment f w)).X i))","decl":"@[simp]\ntheorem truncateAugment_inv_f (C : ChainComplex V ‚Ñï) {X : V} (f : C.X 0 ‚ü∂ X) (w : C.d 1 0 ‚â´ f = 0)\n    (i : ‚Ñï) : (truncateAugment C f w).inv.f i = ùüô ((truncate.obj (augment C f w)).X i) :=\n  rfl\n\n"}
{"name":"ChainComplex.chainComplex_d_succ_succ_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\ni : Nat\n‚ä¢ Eq (C.d (HAdd.hAdd i 2) 0) 0","decl":"@[simp]\ntheorem chainComplex_d_succ_succ_zero (C : ChainComplex V ‚Ñï) (i : ‚Ñï) : C.d (i + 2) 0 = 0 := by\n  rw [C.shape]\n  exact i.succ_succ_ne_one.symm\n\n"}
{"name":"ChainComplex.augmentTruncate_hom_f_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\n‚ä¢ Eq (C.augmentTruncate.hom.f 0) (CategoryTheory.CategoryStruct.id (C.X 0))","decl":"@[simp]\ntheorem augmentTruncate_hom_f_zero (C : ChainComplex V ‚Ñï) :\n    (augmentTruncate C).hom.f 0 = ùüô (C.X 0) :=\n  rfl\n\n"}
{"name":"ChainComplex.augmentTruncate_hom_f_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\ni : Nat\n‚ä¢ Eq (C.augmentTruncate.hom.f (HAdd.hAdd i 1)) (CategoryTheory.CategoryStruct.id (C.X (HAdd.hAdd i 1)))","decl":"@[simp]\ntheorem augmentTruncate_hom_f_succ (C : ChainComplex V ‚Ñï) (i : ‚Ñï) :\n    (augmentTruncate C).hom.f (i + 1) = ùüô (C.X (i + 1)) :=\n  rfl\n\n"}
{"name":"ChainComplex.augmentTruncate_inv_f_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\n‚ä¢ Eq (C.augmentTruncate.inv.f 0) (CategoryTheory.CategoryStruct.id (C.X 0))","decl":"@[simp]\ntheorem augmentTruncate_inv_f_zero (C : ChainComplex V ‚Ñï) :\n    (augmentTruncate C).inv.f 0 = ùüô (C.X 0) :=\n  rfl\n\n"}
{"name":"ChainComplex.augmentTruncate_inv_f_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : ChainComplex V Nat\ni : Nat\n‚ä¢ Eq (C.augmentTruncate.inv.f (HAdd.hAdd i 1)) (CategoryTheory.CategoryStruct.id (C.X (HAdd.hAdd i 1)))","decl":"@[simp]\ntheorem augmentTruncate_inv_f_succ (C : ChainComplex V ‚Ñï) (i : ‚Ñï) :\n    (augmentTruncate C).inv.f (i + 1) = ùüô (C.X (i + 1)) :=\n  rfl\n\n"}
{"name":"CochainComplex.truncate_obj_d","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\ni j : Nat\n‚ä¢ Eq ((CochainComplex.truncate.obj C).d i j) (C.d (HAdd.hAdd i 1) (HAdd.hAdd j 1))","decl":"/-- The truncation of an `‚Ñï`-indexed cochain complex,\ndeleting the object at `0` and shifting everything else down.\n-/\n@[simps]\ndef truncate [HasZeroMorphisms V] : CochainComplex V ‚Ñï ‚•§ CochainComplex V ‚Ñï where\n  obj C :=\n    { X := fun i => C.X (i + 1)\n      d := fun i j => C.d (i + 1) (j + 1)\n      shape := fun i j w => by\n        apply C.shape\n        simpa }\n  map f := { f := fun i => f.f (i + 1) }\n\n"}
{"name":"CochainComplex.truncate_obj_X","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\ni : Nat\n‚ä¢ Eq ((CochainComplex.truncate.obj C).X i) (C.X (HAdd.hAdd i 1))","decl":"/-- The truncation of an `‚Ñï`-indexed cochain complex,\ndeleting the object at `0` and shifting everything else down.\n-/\n@[simps]\ndef truncate [HasZeroMorphisms V] : CochainComplex V ‚Ñï ‚•§ CochainComplex V ‚Ñï where\n  obj C :=\n    { X := fun i => C.X (i + 1)\n      d := fun i j => C.d (i + 1) (j + 1)\n      shape := fun i j w => by\n        apply C.shape\n        simpa }\n  map f := { f := fun i => f.f (i + 1) }\n\n"}
{"name":"CochainComplex.truncate_map_f","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nX‚úù Y‚úù : CochainComplex V Nat\nf : Quiver.Hom X‚úù Y‚úù\ni : Nat\n‚ä¢ Eq ((CochainComplex.truncate.map f).f i) (f.f (HAdd.hAdd i 1))","decl":"/-- The truncation of an `‚Ñï`-indexed cochain complex,\ndeleting the object at `0` and shifting everything else down.\n-/\n@[simps]\ndef truncate [HasZeroMorphisms V] : CochainComplex V ‚Ñï ‚•§ CochainComplex V ‚Ñï where\n  obj C :=\n    { X := fun i => C.X (i + 1)\n      d := fun i j => C.d (i + 1) (j + 1)\n      shape := fun i j w => by\n        apply C.shape\n        simpa }\n  map f := { f := fun i => f.f (i + 1) }\n\n"}
{"name":"CochainComplex.augment_X_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\nX : V\nf : Quiver.Hom X (C.X 0)\nw : Eq (CategoryTheory.CategoryStruct.comp f (C.d 0 1)) 0\n‚ä¢ Eq ((C.augment f w).X 0) X","decl":"@[simp]\ntheorem augment_X_zero (C : CochainComplex V ‚Ñï) {X : V} (f : X ‚ü∂ C.X 0) (w : f ‚â´ C.d 0 1 = 0) :\n    (augment C f w).X 0 = X :=\n  rfl\n\n"}
{"name":"CochainComplex.augment_X_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\nX : V\nf : Quiver.Hom X (C.X 0)\nw : Eq (CategoryTheory.CategoryStruct.comp f (C.d 0 1)) 0\ni : Nat\n‚ä¢ Eq ((C.augment f w).X (HAdd.hAdd i 1)) (C.X i)","decl":"@[simp]\ntheorem augment_X_succ (C : CochainComplex V ‚Ñï) {X : V} (f : X ‚ü∂ C.X 0) (w : f ‚â´ C.d 0 1 = 0)\n    (i : ‚Ñï) : (augment C f w).X (i + 1) = C.X i :=\n  rfl\n\n"}
{"name":"CochainComplex.augment_d_zero_one","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\nX : V\nf : Quiver.Hom X (C.X 0)\nw : Eq (CategoryTheory.CategoryStruct.comp f (C.d 0 1)) 0\n‚ä¢ Eq ((C.augment f w).d 0 1) f","decl":"@[simp]\ntheorem augment_d_zero_one (C : CochainComplex V ‚Ñï) {X : V} (f : X ‚ü∂ C.X 0) (w : f ‚â´ C.d 0 1 = 0) :\n    (augment C f w).d 0 1 = f :=\n  rfl\n\n"}
{"name":"CochainComplex.augment_d_succ_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\nX : V\nf : Quiver.Hom X (C.X 0)\nw : Eq (CategoryTheory.CategoryStruct.comp f (C.d 0 1)) 0\ni j : Nat\n‚ä¢ Eq ((C.augment f w).d (HAdd.hAdd i 1) (HAdd.hAdd j 1)) (C.d i j)","decl":"@[simp]\ntheorem augment_d_succ_succ (C : CochainComplex V ‚Ñï) {X : V} (f : X ‚ü∂ C.X 0) (w : f ‚â´ C.d 0 1 = 0)\n    (i j : ‚Ñï) : (augment C f w).d (i + 1) (j + 1) = C.d i j :=\n  rfl\n\n"}
{"name":"CochainComplex.truncateAugment_hom_f","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\nX : V\nf : Quiver.Hom X (C.X 0)\nw : Eq (CategoryTheory.CategoryStruct.comp f (C.d 0 1)) 0\ni : Nat\n‚ä¢ Eq ((C.truncateAugment f w).hom.f i) (CategoryTheory.CategoryStruct.id (C.X i))","decl":"@[simp]\ntheorem truncateAugment_hom_f (C : CochainComplex V ‚Ñï) {X : V} (f : X ‚ü∂ C.X 0)\n    (w : f ‚â´ C.d 0 1 = 0) (i : ‚Ñï) : (truncateAugment C f w).hom.f i = ùüô (C.X i) :=\n  rfl\n\n"}
{"name":"CochainComplex.truncateAugment_inv_f","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\nX : V\nf : Quiver.Hom X (C.X 0)\nw : Eq (CategoryTheory.CategoryStruct.comp f (C.d 0 1)) 0\ni : Nat\n‚ä¢ Eq ((C.truncateAugment f w).inv.f i) (CategoryTheory.CategoryStruct.id ((CochainComplex.truncate.obj (C.augment f w)).X i))","decl":"@[simp]\ntheorem truncateAugment_inv_f (C : CochainComplex V ‚Ñï) {X : V} (f : X ‚ü∂ C.X 0)\n    (w : f ‚â´ C.d 0 1 = 0) (i : ‚Ñï) :\n    (truncateAugment C f w).inv.f i = ùüô ((truncate.obj (augment C f w)).X i) :=\n  rfl\n\n"}
{"name":"CochainComplex.cochainComplex_d_succ_succ_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\ni : Nat\n‚ä¢ Eq (C.d 0 (HAdd.hAdd i 2)) 0","decl":"@[simp]\ntheorem cochainComplex_d_succ_succ_zero (C : CochainComplex V ‚Ñï) (i : ‚Ñï) : C.d 0 (i + 2) = 0 := by\n  rw [C.shape]\n  simp only [ComplexShape.up_Rel, zero_add]\n  exact (Nat.one_lt_succ_succ _).ne\n\n"}
{"name":"CochainComplex.augmentTruncate_hom_f_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\n‚ä¢ Eq (C.augmentTruncate.hom.f 0) (CategoryTheory.CategoryStruct.id (C.X 0))","decl":"@[simp]\ntheorem augmentTruncate_hom_f_zero (C : CochainComplex V ‚Ñï) :\n    (augmentTruncate C).hom.f 0 = ùüô (C.X 0) :=\n  rfl\n\n"}
{"name":"CochainComplex.augmentTruncate_hom_f_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\ni : Nat\n‚ä¢ Eq (C.augmentTruncate.hom.f (HAdd.hAdd i 1)) (CategoryTheory.CategoryStruct.id (C.X (HAdd.hAdd i 1)))","decl":"@[simp]\ntheorem augmentTruncate_hom_f_succ (C : CochainComplex V ‚Ñï) (i : ‚Ñï) :\n    (augmentTruncate C).hom.f (i + 1) = ùüô (C.X (i + 1)) :=\n  rfl\n\n"}
{"name":"CochainComplex.augmentTruncate_inv_f_zero","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\n‚ä¢ Eq (C.augmentTruncate.inv.f 0) (CategoryTheory.CategoryStruct.id (C.X 0))","decl":"@[simp]\ntheorem augmentTruncate_inv_f_zero (C : CochainComplex V ‚Ñï) :\n    (augmentTruncate C).inv.f 0 = ùüô (C.X 0) :=\n  rfl\n\n"}
{"name":"CochainComplex.augmentTruncate_inv_f_succ","module":"Mathlib.Algebra.Homology.Augment","initialProofState":"V : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} V\ninst‚úù : CategoryTheory.Limits.HasZeroMorphisms V\nC : CochainComplex V Nat\ni : Nat\n‚ä¢ Eq (C.augmentTruncate.inv.f (HAdd.hAdd i 1)) (CategoryTheory.CategoryStruct.id (C.X (HAdd.hAdd i 1)))","decl":"@[simp]\ntheorem augmentTruncate_inv_f_succ (C : CochainComplex V ‚Ñï) (i : ‚Ñï) :\n    (augmentTruncate C).inv.f (i + 1) = ùüô (C.X (i + 1)) :=\n  rfl\n\n"}
