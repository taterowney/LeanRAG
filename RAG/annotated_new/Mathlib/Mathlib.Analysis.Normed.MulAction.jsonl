{"name":"norm_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\nr : α\nx : β\n⊢ LE.le (Norm.norm (HSMul.hSMul r x)) (HMul.hMul (Norm.norm r) (Norm.norm x))","decl":"@[bound]\ntheorem norm_smul_le (r : α) (x : β) : ‖r • x‖ ≤ ‖r‖ * ‖x‖ := by\n  simpa [smul_zero] using dist_smul_pair r 0 x\n\n"}
{"name":"nnnorm_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\nr : α\nx : β\n⊢ LE.le (NNNorm.nnnorm (HSMul.hSMul r x)) (HMul.hMul (NNNorm.nnnorm r) (NNNorm.nnnorm x))","decl":"@[bound]\ntheorem nnnorm_smul_le (r : α) (x : β) : ‖r • x‖₊ ≤ ‖r‖₊ * ‖x‖₊ :=\n  norm_smul_le _ _\n\n"}
{"name":"enorm_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\nr : α\nx : β\n⊢ LE.le (ENorm.enorm (HSMul.hSMul r x)) (HMul.hMul (ENorm.enorm r) (ENorm.enorm x))","decl":"@[bound]\nlemma enorm_smul_le : ‖r • x‖ₑ ≤ ‖r‖ₑ * ‖x‖ₑ := by\n  simpa [enorm, ← ENNReal.coe_mul] using nnnorm_smul_le ..\n\n"}
{"name":"dist_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\ns : α\nx y : β\n⊢ LE.le (Dist.dist (HSMul.hSMul s x) (HSMul.hSMul s y)) (HMul.hMul (Norm.norm s) (Dist.dist x y))","decl":"theorem dist_smul_le (s : α) (x y : β) : dist (s • x) (s • y) ≤ ‖s‖ * dist x y := by\n  simpa only [dist_eq_norm, sub_zero] using dist_smul_pair s x y\n\n"}
{"name":"nndist_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\ns : α\nx y : β\n⊢ LE.le (NNDist.nndist (HSMul.hSMul s x) (HSMul.hSMul s y)) (HMul.hMul (NNNorm.nnnorm s) (NNDist.nndist x y))","decl":"theorem nndist_smul_le (s : α) (x y : β) : nndist (s • x) (s • y) ≤ ‖s‖₊ * nndist x y :=\n  dist_smul_le s x y\n\n"}
{"name":"lipschitzWith_smul","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\ns : α\n⊢ LipschitzWith (NNNorm.nnnorm s) fun x => HSMul.hSMul s x","decl":"theorem lipschitzWith_smul (s : α) : LipschitzWith ‖s‖₊ (s • · : β → β) :=\n  lipschitzWith_iff_dist_le_mul.2 <| dist_smul_le _\n\n"}
{"name":"edist_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : SeminormedAddGroup α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : SMulZeroClass α β\ninst✝ : BoundedSMul α β\ns : α\nx y : β\n⊢ LE.le (EDist.edist (HSMul.hSMul s x) (HSMul.hSMul s y)) (HSMul.hSMul (NNNorm.nnnorm s) (EDist.edist x y))","decl":"theorem edist_smul_le (s : α) (x y : β) : edist (s • x) (s • y) ≤ ‖s‖₊ • edist x y :=\n  lipschitzWith_smul s x y\n\n"}
{"name":"NonUnitalSeminormedRing.to_boundedSMul","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\ninst✝ : NonUnitalSeminormedRing α\n⊢ BoundedSMul α α","decl":"/-- Left multiplication is bounded. -/\ninstance NonUnitalSeminormedRing.to_boundedSMul [NonUnitalSeminormedRing α] : BoundedSMul α α where\n  dist_smul_pair' x y₁ y₂ := by simpa [mul_sub, dist_eq_norm] using norm_mul_le x (y₁ - y₂)\n  dist_pair_smul' x₁ x₂ y := by simpa [sub_mul, dist_eq_norm] using norm_mul_le (x₁ - x₂) y\n\n"}
{"name":"NonUnitalSeminormedRing.to_has_bounded_op_smul","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\ninst✝ : NonUnitalSeminormedRing α\n⊢ BoundedSMul (MulOpposite α) α","decl":"/-- Right multiplication is bounded. -/\ninstance NonUnitalSeminormedRing.to_has_bounded_op_smul [NonUnitalSeminormedRing α] :\n    BoundedSMul αᵐᵒᵖ α where\n  dist_smul_pair' x y₁ y₂ := by\n    simpa [sub_mul, dist_eq_norm, mul_comm] using norm_mul_le (y₁ - y₂) x.unop\n  dist_pair_smul' x₁ x₂ y := by\n    simpa [mul_sub, dist_eq_norm, mul_comm] using norm_mul_le y (x₁ - x₂).unop\n\n"}
{"name":"BoundedSMul.of_norm_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : SeminormedRing α\ninst✝¹ : SeminormedAddCommGroup β\ninst✝ : Module α β\nh : ∀ (r : α) (x : β), LE.le (Norm.norm (HSMul.hSMul r x)) (HMul.hMul (Norm.norm r) (Norm.norm x))\n⊢ BoundedSMul α β","decl":"theorem BoundedSMul.of_norm_smul_le (h : ∀ (r : α) (x : β), ‖r • x‖ ≤ ‖r‖ * ‖x‖) :\n    BoundedSMul α β :=\n  { dist_smul_pair' := fun a b₁ b₂ => by simpa [smul_sub, dist_eq_norm] using h a (b₁ - b₂)\n    dist_pair_smul' := fun a₁ a₂ b => by simpa [sub_smul, dist_eq_norm] using h (a₁ - a₂) b }\n\n"}
{"name":"BoundedSMul.of_nnnorm_smul_le","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : SeminormedRing α\ninst✝¹ : SeminormedAddCommGroup β\ninst✝ : Module α β\nh : ∀ (r : α) (x : β), LE.le (NNNorm.nnnorm (HSMul.hSMul r x)) (HMul.hMul (NNNorm.nnnorm r) (NNNorm.nnnorm x))\n⊢ BoundedSMul α β","decl":"theorem BoundedSMul.of_nnnorm_smul_le (h : ∀ (r : α) (x : β), ‖r • x‖₊ ≤ ‖r‖₊ * ‖x‖₊) :\n    BoundedSMul α β := .of_norm_smul_le h\n\n"}
{"name":"norm_smul","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : NormedDivisionRing α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : MulActionWithZero α β\ninst✝ : BoundedSMul α β\nr : α\nx : β\n⊢ Eq (Norm.norm (HSMul.hSMul r x)) (HMul.hMul (Norm.norm r) (Norm.norm x))","decl":"theorem norm_smul (r : α) (x : β) : ‖r • x‖ = ‖r‖ * ‖x‖ := by\n  by_cases h : r = 0\n  · simp [h, zero_smul α x]\n  · refine le_antisymm (norm_smul_le r x) ?_\n    calc\n      ‖r‖ * ‖x‖ = ‖r‖ * ‖r⁻¹ • r • x‖ := by rw [inv_smul_smul₀ h]\n      _ ≤ ‖r‖ * (‖r⁻¹‖ * ‖r • x‖) := by gcongr; apply norm_smul_le\n      _ = ‖r • x‖ := by rw [norm_inv, ← mul_assoc, mul_inv_cancel₀ (mt norm_eq_zero.1 h), one_mul]\n\n"}
{"name":"nnnorm_smul","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : NormedDivisionRing α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : MulActionWithZero α β\ninst✝ : BoundedSMul α β\nr : α\nx : β\n⊢ Eq (NNNorm.nnnorm (HSMul.hSMul r x)) (HMul.hMul (NNNorm.nnnorm r) (NNNorm.nnnorm x))","decl":"theorem nnnorm_smul (r : α) (x : β) : ‖r • x‖₊ = ‖r‖₊ * ‖x‖₊ :=\n  NNReal.eq <| norm_smul r x\n\n"}
{"name":"enorm_smul","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : NormedDivisionRing α\ninst✝² : SeminormedAddGroup β\ninst✝¹ : MulActionWithZero α β\ninst✝ : BoundedSMul α β\nr : α\nx : β\n⊢ Eq (ENorm.enorm (HSMul.hSMul r x)) (HMul.hMul (ENorm.enorm r) (ENorm.enorm x))","decl":"lemma enorm_smul (r : α) (x : β) : ‖r • x‖ₑ = ‖r‖ₑ * ‖x‖ₑ := by simp [enorm, nnnorm_smul]\n\n"}
{"name":"dist_smul₀","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : NormedDivisionRing α\ninst✝² : SeminormedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : BoundedSMul α β\ns : α\nx y : β\n⊢ Eq (Dist.dist (HSMul.hSMul s x) (HSMul.hSMul s y)) (HMul.hMul (Norm.norm s) (Dist.dist x y))","decl":"theorem dist_smul₀ (s : α) (x y : β) : dist (s • x) (s • y) = ‖s‖ * dist x y := by\n  simp_rw [dist_eq_norm, (norm_smul s (x - y)).symm, smul_sub]\n\n"}
{"name":"nndist_smul₀","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : NormedDivisionRing α\ninst✝² : SeminormedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : BoundedSMul α β\ns : α\nx y : β\n⊢ Eq (NNDist.nndist (HSMul.hSMul s x) (HSMul.hSMul s y)) (HMul.hMul (NNNorm.nnnorm s) (NNDist.nndist x y))","decl":"theorem nndist_smul₀ (s : α) (x y : β) : nndist (s • x) (s • y) = ‖s‖₊ * nndist x y :=\n  NNReal.eq <| dist_smul₀ s x y\n\n"}
{"name":"edist_smul₀","module":"Mathlib.Analysis.Normed.MulAction","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : NormedDivisionRing α\ninst✝² : SeminormedAddCommGroup β\ninst✝¹ : Module α β\ninst✝ : BoundedSMul α β\ns : α\nx y : β\n⊢ Eq (EDist.edist (HSMul.hSMul s x) (HSMul.hSMul s y)) (HSMul.hSMul (NNNorm.nnnorm s) (EDist.edist x y))","decl":"theorem edist_smul₀ (s : α) (x y : β) : edist (s • x) (s • y) = ‖s‖₊ • edist x y := by\n  simp only [edist_nndist, nndist_smul₀, ENNReal.coe_mul, ENNReal.smul_def, smul_eq_mul]\n\n"}
