{"name":"LinearMap.mk₂'ₛₗ_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : M → N → P\nH1 : ∀ (m₁ m₂ : M) (n : N), Eq (f (HAdd.hAdd m₁ m₂) n) (HAdd.hAdd (f m₁ n) (f m₂ n))\nH2 : ∀ (c : R) (m : M) (n : N), Eq (f (HSMul.hSMul c m) n) (HSMul.hSMul (ρ₁₂ c) (f m n))\nH3 : ∀ (m : M) (n₁ n₂ : N), Eq (f m (HAdd.hAdd n₁ n₂)) (HAdd.hAdd (f m n₁) (f m n₂))\nH4 : ∀ (c : S) (m : M) (n : N), Eq (f m (HSMul.hSMul c n)) (HSMul.hSMul (σ₁₂ c) (f m n))\nm : M\nn : N\n⊢ Eq (((LinearMap.mk₂'ₛₗ ρ₁₂ σ₁₂ f H1 H2 H3 H4) m) n) (f m n)","decl":"@[simp]\ntheorem mk₂'ₛₗ_apply (f : M → N → P) {H1 H2 H3 H4} (m : M) (n : N) :\n    (mk₂'ₛₗ ρ₁₂ σ₁₂ f H1 H2 H3 H4 : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) m n = f m n := rfl\n\n"}
{"name":"LinearMap.mk₂'_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁹ : Semiring R\nS : Type u_2\ninst✝⁸ : Semiring S\nM : Type u_5\nN : Type u_6\nPₗ : Type u_11\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid Pₗ\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R Pₗ\ninst✝¹ : Module S Pₗ\ninst✝ : SMulCommClass S R Pₗ\nf : M → N → Pₗ\nH1 : ∀ (m₁ m₂ : M) (n : N), Eq (f (HAdd.hAdd m₁ m₂) n) (HAdd.hAdd (f m₁ n) (f m₂ n))\nH2 : ∀ (c : R) (m : M) (n : N), Eq (f (HSMul.hSMul c m) n) (HSMul.hSMul c (f m n))\nH3 : ∀ (m : M) (n₁ n₂ : N), Eq (f m (HAdd.hAdd n₁ n₂)) (HAdd.hAdd (f m n₁) (f m n₂))\nH4 : ∀ (c : S) (m : M) (n : N), Eq (f m (HSMul.hSMul c n)) (HSMul.hSMul c (f m n))\nm : M\nn : N\n⊢ Eq (((LinearMap.mk₂' R S f H1 H2 H3 H4) m) n) (f m n)","decl":"@[simp]\ntheorem mk₂'_apply (f : M → N → Pₗ) {H1 H2 H3 H4} (m : M) (n : N) :\n    (mk₂' R S f H1 H2 H3 H4 : M →ₗ[R] N →ₗ[S] Pₗ) m n = f m n := rfl\n\n"}
{"name":"LinearMap.ext₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf g : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nH : ∀ (m : M) (n : N), Eq ((f m) n) ((g m) n)\n⊢ Eq f g","decl":"theorem ext₂ {f g : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P} (H : ∀ m n, f m n = g m n) : f = g :=\n  LinearMap.ext fun m => LinearMap.ext fun n => H m n\n\n"}
{"name":"LinearMap.congr_fun₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf g : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nh : Eq f g\nx : M\ny : N\n⊢ Eq ((f x) y) ((g x) y)","decl":"theorem congr_fun₂ {f g : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P} (h : f = g) (x y) : f x y = g x y :=\n  LinearMap.congr_fun (LinearMap.congr_fun h x) y\n\n"}
{"name":"LinearMap.ext_iff₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf g : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\n⊢ Iff (Eq f g) (∀ (m : M) (n : N), Eq ((f m) n) ((g m) n))","decl":"theorem ext_iff₂ {f g : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P} : f = g ↔ ∀ m n, f m n = g m n :=\n  ⟨congr_fun₂, ext₂⟩\n\n"}
{"name":"LinearMap.flip_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nm : M\nn : N\n⊢ Eq ((f.flip n) m) ((f m) n)","decl":"@[simp]\ntheorem flip_apply (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (m : M) (n : N) : flip f n m = f m n := rfl\n\n"}
{"name":"LinearMap.flip_flip","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\n⊢ Eq f.flip.flip f","decl":"@[simp]\ntheorem flip_flip (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) : f.flip.flip = f :=\n  LinearMap.ext₂ fun _x _y => (f.flip.flip_apply _ _).trans (f.flip_apply _ _)\n\n"}
{"name":"LinearMap.flip_inj","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf g : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nH : Eq f.flip g.flip\n⊢ Eq f g","decl":"theorem flip_inj {f g : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P} (H : flip f = flip g) : f = g :=\n  ext₂ fun m n => show flip f n m = flip g n m by rw [H]\n\n"}
{"name":"LinearMap.map_zero₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\ny : N\n⊢ Eq ((f 0) y) 0","decl":"theorem map_zero₂ (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (y) : f 0 y = 0 :=\n  (flip f y).map_zero\n\n"}
{"name":"LinearMap.map_neg₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nN : Type u_6\nM' : Type u_12\nP' : Type u_13\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : AddCommGroup M'\ninst✝⁵ : AddCommGroup P'\ninst✝⁴ : Module S N\ninst✝³ : Module R M'\ninst✝² : Module R₂ P'\ninst✝¹ : Module S₂ P'\ninst✝ : SMulCommClass S₂ R₂ P'\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M' (LinearMap σ₁₂ N P')\nx : M'\ny : N\n⊢ Eq ((f (Neg.neg x)) y) (Neg.neg ((f x) y))","decl":"theorem map_neg₂ (f : M' →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P') (x y) : f (-x) y = -f x y :=\n  (flip f y).map_neg _\n\n"}
{"name":"LinearMap.map_sub₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nN : Type u_6\nM' : Type u_12\nP' : Type u_13\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : AddCommGroup M'\ninst✝⁵ : AddCommGroup P'\ninst✝⁴ : Module S N\ninst✝³ : Module R M'\ninst✝² : Module R₂ P'\ninst✝¹ : Module S₂ P'\ninst✝ : SMulCommClass S₂ R₂ P'\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M' (LinearMap σ₁₂ N P')\nx y : M'\nz : N\n⊢ Eq ((f (HSub.hSub x y)) z) (HSub.hSub ((f x) z) ((f y) z))","decl":"theorem map_sub₂ (f : M' →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P') (x y z) : f (x - y) z = f x z - f y z :=\n  (flip f z).map_sub _ _\n\n"}
{"name":"LinearMap.map_add₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nx₁ x₂ : M\ny : N\n⊢ Eq ((f (HAdd.hAdd x₁ x₂)) y) (HAdd.hAdd ((f x₁) y) ((f x₂) y))","decl":"theorem map_add₂ (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (x₁ x₂ y) : f (x₁ + x₂) y = f x₁ y + f x₂ y :=\n  (flip f y).map_add _ _\n\n"}
{"name":"LinearMap.map_smul₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹⁰ : Semiring R\nS : Type u_2\ninst✝⁹ : Semiring S\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM₂ : Type u_8\nN₂ : Type u_9\nP₂ : Type u_10\ninst✝⁷ : AddCommMonoid M₂\ninst✝⁶ : AddCommMonoid N₂\ninst✝⁵ : AddCommMonoid P₂\ninst✝⁴ : Module R M₂\ninst✝³ : Module S N₂\ninst✝² : Module R P₂\ninst✝¹ : Module S₂ P₂\ninst✝ : SMulCommClass S₂ R P₂\nσ₁₂ : RingHom S S₂\nf : LinearMap (RingHom.id R) M₂ (LinearMap σ₁₂ N₂ P₂)\nr : R\nx : M₂\ny : N₂\n⊢ Eq ((f (HSMul.hSMul r x)) y) (HSMul.hSMul r ((f x) y))","decl":"theorem map_smul₂ (f : M₂ →ₗ[R] N₂ →ₛₗ[σ₁₂] P₂) (r : R) (x y) : f (r • x) y = r • f x y :=\n  (flip f y).map_smul _ _\n\n"}
{"name":"LinearMap.map_smulₛₗ₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nr : R\nx : M\ny : N\n⊢ Eq ((f (HSMul.hSMul r x)) y) (HSMul.hSMul (ρ₁₂ r) ((f x) y))","decl":"theorem map_smulₛₗ₂ (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (r : R) (x y) : f (r • x) y = ρ₁₂ r • f x y :=\n  (flip f y).map_smulₛₗ _ _\n\n"}
{"name":"LinearMap.map_sum₂","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nι : Type u_14\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nt : Finset ι\nx : ι → M\ny : N\n⊢ Eq ((f (t.sum fun i => x i)) y) (t.sum fun i => (f (x i)) y)","decl":"theorem map_sum₂ {ι : Type*} (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (t : Finset ι) (x : ι → M) (y) :\n    f (∑ i ∈ t, x i) y = ∑ i ∈ t, f (x i) y :=\n  _root_.map_sum (flip f y) _ _\n\n"}
{"name":"LinearMap.domRestrict₂_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\nq : Submodule S N\nx : M\ny : Subtype fun x => Membership.mem q x\n⊢ Eq (((f.domRestrict₂ q) x) y) ((f x) ↑y)","decl":"theorem domRestrict₂_apply (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (q : Submodule S N) (x : M) (y : q) :\n    f.domRestrict₂ q x y = f x y := rfl\n\n"}
{"name":"LinearMap.domRestrict₁₂_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹¹ : Semiring R\nS : Type u_2\ninst✝¹⁰ : Semiring S\nR₂ : Type u_3\ninst✝⁹ : Semiring R₂\nS₂ : Type u_4\ninst✝⁸ : Semiring S₂\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid N\ninst✝⁵ : AddCommMonoid P\ninst✝⁴ : Module R M\ninst✝³ : Module S N\ninst✝² : Module R₂ P\ninst✝¹ : Module S₂ P\ninst✝ : SMulCommClass S₂ R₂ P\nρ₁₂ : RingHom R R₂\nσ₁₂ : RingHom S S₂\nf : LinearMap ρ₁₂ M (LinearMap σ₁₂ N P)\np : Submodule R M\nq : Submodule S N\nx : Subtype fun x => Membership.mem p x\ny : Subtype fun x => Membership.mem q x\n⊢ Eq (((f.domRestrict₁₂ p q) x) y) ((f ↑x) ↑y)","decl":"theorem domRestrict₁₂_apply (f : M →ₛₗ[ρ₁₂] N →ₛₗ[σ₁₂] P) (p : Submodule R M) (q : Submodule S N)\n    (x : p) (y : q) : f.domRestrict₁₂ p q x y = f x y := rfl\n\n"}
{"name":"LinearMap.restrictScalars₁₂_apply_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹⁹ : Semiring R\nS : Type u_2\ninst✝¹⁸ : Semiring S\nM : Type u_5\nN : Type u_6\nPₗ : Type u_11\ninst✝¹⁷ : AddCommMonoid M\ninst✝¹⁶ : AddCommMonoid N\ninst✝¹⁵ : AddCommMonoid Pₗ\ninst✝¹⁴ : Module R M\ninst✝¹³ : Module S N\ninst✝¹² : Module R Pₗ\ninst✝¹¹ : Module S Pₗ\ninst✝¹⁰ : SMulCommClass S R Pₗ\nR' : Type u_14\nS' : Type u_15\ninst✝⁹ : Semiring R'\ninst✝⁸ : Semiring S'\ninst✝⁷ : Module R' M\ninst✝⁶ : Module S' N\ninst✝⁵ : Module R' Pₗ\ninst✝⁴ : Module S' Pₗ\ninst✝³ : SMulCommClass S' R' Pₗ\ninst✝² : SMul S' S\ninst✝¹ : IsScalarTower S' S N\ninst✝ : IsScalarTower S' S Pₗ\nB : LinearMap (RingHom.id R) M (LinearMap (RingHom.id S) N Pₗ)\nm : M\nx2✝ : N\n⊢ Eq (((LinearMap.restrictScalars₁₂ R' S' B) m) x2✝) ((B m) x2✝)","decl":"/-- If `B : M → N → Pₗ` is `R`-`S` bilinear and `R'` and `S'` are compatible scalar multiplications,\nthen the restriction of scalars is a `R'`-`S'` bilinear map. -/\n@[simps!]\ndef restrictScalars₁₂ (B : M →ₗ[R] N →ₗ[S] Pₗ) : M →ₗ[R'] N →ₗ[S'] Pₗ :=\n  LinearMap.mk₂' R' S'\n    (B · ·)\n    B.map_add₂\n    (fun r' m _ ↦ by\n      dsimp only\n      rw [← smul_one_smul R r' m, map_smul₂, smul_one_smul])\n    (fun _ ↦ map_add _)\n    (fun _ x ↦ (B x).map_smul_of_tower _)\n\n"}
{"name":"LinearMap.restrictScalars₁₂_injective","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝²² : Semiring R\nS : Type u_2\ninst✝²¹ : Semiring S\nM : Type u_5\nN : Type u_6\nPₗ : Type u_11\ninst✝²⁰ : AddCommMonoid M\ninst✝¹⁹ : AddCommMonoid N\ninst✝¹⁸ : AddCommMonoid Pₗ\ninst✝¹⁷ : Module R M\ninst✝¹⁶ : Module S N\ninst✝¹⁵ : Module R Pₗ\ninst✝¹⁴ : Module S Pₗ\ninst✝¹³ : SMulCommClass S R Pₗ\nR' : Type u_14\nS' : Type u_15\ninst✝¹² : Semiring R'\ninst✝¹¹ : Semiring S'\ninst✝¹⁰ : Module R' M\ninst✝⁹ : Module S' N\ninst✝⁸ : Module R' Pₗ\ninst✝⁷ : Module S' Pₗ\ninst✝⁶ : SMulCommClass S' R' Pₗ\ninst✝⁵ : SMul S' S\ninst✝⁴ : IsScalarTower S' S N\ninst✝³ : IsScalarTower S' S Pₗ\ninst✝² : SMul R' R\ninst✝¹ : IsScalarTower R' R M\ninst✝ : IsScalarTower R' R Pₗ\n⊢ Function.Injective (LinearMap.restrictScalars₁₂ R' S')","decl":"theorem restrictScalars₁₂_injective : Function.Injective\n    (LinearMap.restrictScalars₁₂ R' S' : (M →ₗ[R] N →ₗ[S] Pₗ) → (M →ₗ[R'] N →ₗ[S'] Pₗ)) :=\n  fun _ _ h ↦ ext₂ (congr_fun₂ h :)\n\n"}
{"name":"LinearMap.restrictScalars₁₂_inj","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝²² : Semiring R\nS : Type u_2\ninst✝²¹ : Semiring S\nM : Type u_5\nN : Type u_6\nPₗ : Type u_11\ninst✝²⁰ : AddCommMonoid M\ninst✝¹⁹ : AddCommMonoid N\ninst✝¹⁸ : AddCommMonoid Pₗ\ninst✝¹⁷ : Module R M\ninst✝¹⁶ : Module S N\ninst✝¹⁵ : Module R Pₗ\ninst✝¹⁴ : Module S Pₗ\ninst✝¹³ : SMulCommClass S R Pₗ\nR' : Type u_14\nS' : Type u_15\ninst✝¹² : Semiring R'\ninst✝¹¹ : Semiring S'\ninst✝¹⁰ : Module R' M\ninst✝⁹ : Module S' N\ninst✝⁸ : Module R' Pₗ\ninst✝⁷ : Module S' Pₗ\ninst✝⁶ : SMulCommClass S' R' Pₗ\ninst✝⁵ : SMul S' S\ninst✝⁴ : IsScalarTower S' S N\ninst✝³ : IsScalarTower S' S Pₗ\ninst✝² : SMul R' R\ninst✝¹ : IsScalarTower R' R M\ninst✝ : IsScalarTower R' R Pₗ\nB B' : LinearMap (RingHom.id R) M (LinearMap (RingHom.id S) N Pₗ)\n⊢ Iff (Eq (LinearMap.restrictScalars₁₂ R' S' B) (LinearMap.restrictScalars₁₂ R' S' B')) (Eq B B')","decl":"@[simp]\ntheorem restrictScalars₁₂_inj {B B' : M →ₗ[R] N →ₗ[S] Pₗ} :\n    B.restrictScalars₁₂ R' S' = B'.restrictScalars₁₂ R' S' ↔ B = B' :=\n  (restrictScalars₁₂_injective R' S').eq_iff\n\n"}
{"name":"LinearMap.mk₂_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nM : Type u_5\nNₗ : Type u_10\nPₗ : Type u_11\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid Nₗ\ninst✝³ : AddCommMonoid Pₗ\ninst✝² : Module R M\ninst✝¹ : Module R Nₗ\ninst✝ : Module R Pₗ\nf : M → Nₗ → Pₗ\nH1 : ∀ (m₁ m₂ : M) (n : Nₗ), Eq (f (HAdd.hAdd m₁ m₂) n) (HAdd.hAdd (f m₁ n) (f m₂ n))\nH2 : ∀ (c : R) (m : M) (n : Nₗ), Eq (f (HSMul.hSMul c m) n) (HSMul.hSMul c (f m n))\nH3 : ∀ (m : M) (n₁ n₂ : Nₗ), Eq (f m (HAdd.hAdd n₁ n₂)) (HAdd.hAdd (f m n₁) (f m n₂))\nH4 : ∀ (c : R) (m : M) (n : Nₗ), Eq (f m (HSMul.hSMul c n)) (HSMul.hSMul c (f m n))\nm : M\nn : Nₗ\n⊢ Eq (((LinearMap.mk₂ R f H1 H2 H3 H4) m) n) (f m n)","decl":"@[simp]\ntheorem mk₂_apply (f : M → Nₗ → Pₗ) {H1 H2 H3 H4} (m : M) (n : Nₗ) :\n    (mk₂ R f H1 H2 H3 H4 : M →ₗ[R] Nₗ →ₗ[R] Pₗ) m n = f m n := rfl\n\n"}
{"name":"LinearMap.lflip_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : CommSemiring R\nR₂ : Type u_2\ninst✝⁷ : CommSemiring R₂\nR₃ : Type u_3\ninst✝⁶ : CommSemiring R₃\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid N\ninst✝³ : AddCommMonoid P\ninst✝² : Module R M\ninst✝¹ : Module R₂ N\ninst✝ : Module R₃ P\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\nf : LinearMap σ₁₃ M (LinearMap σ₂₃ N P)\nm : M\nn : N\n⊢ Eq (((LinearMap.lflip f) n) m) ((f m) n)","decl":"@[simp]\ntheorem lflip_apply (m : M) (n : N) : lflip f n m = f m n := rfl\n\n"}
{"name":"LinearMap.lcomp_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nM : Type u_5\nNₗ : Type u_10\nPₗ : Type u_11\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid Nₗ\ninst✝³ : AddCommMonoid Pₗ\ninst✝² : Module R M\ninst✝¹ : Module R Nₗ\ninst✝ : Module R Pₗ\nf : LinearMap (RingHom.id R) M Nₗ\ng : LinearMap (RingHom.id R) Nₗ Pₗ\nx : M\n⊢ Eq (((LinearMap.lcomp R Pₗ f) g) x) (g (f x))","decl":"@[simp]\ntheorem lcomp_apply (f : M →ₗ[R] Nₗ) (g : Nₗ →ₗ[R] Pₗ) (x : M) : lcomp _ _ f g x = g (f x) := rfl\n\n"}
{"name":"LinearMap.lcomp_apply'","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nM : Type u_5\nNₗ : Type u_10\nPₗ : Type u_11\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid Nₗ\ninst✝³ : AddCommMonoid Pₗ\ninst✝² : Module R M\ninst✝¹ : Module R Nₗ\ninst✝ : Module R Pₗ\nf : LinearMap (RingHom.id R) M Nₗ\ng : LinearMap (RingHom.id R) Nₗ Pₗ\n⊢ Eq ((LinearMap.lcomp R Pₗ f) g) (g.comp f)","decl":"theorem lcomp_apply' (f : M →ₗ[R] Nₗ) (g : Nₗ →ₗ[R] Pₗ) : lcomp R Pₗ f g = g ∘ₗ f := rfl\n\n"}
{"name":"LinearMap.lcompₛₗ_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁹ : CommSemiring R\nR₂ : Type u_2\ninst✝⁸ : CommSemiring R₂\nR₃ : Type u_3\ninst✝⁷ : CommSemiring R₃\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁶ : AddCommMonoid M\ninst✝⁵ : AddCommMonoid N\ninst✝⁴ : AddCommMonoid P\ninst✝³ : Module R M\ninst✝² : Module R₂ N\ninst✝¹ : Module R₃ P\nσ₁₂ : RingHom R R₂\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\ninst✝ : RingHomCompTriple σ₁₂ σ₂₃ σ₁₃\nf : LinearMap σ₁₂ M N\ng : LinearMap σ₂₃ N P\nx : M\n⊢ Eq (((LinearMap.lcompₛₗ P σ₂₃ f) g) x) (g (f x))","decl":"@[simp]\ntheorem lcompₛₗ_apply (f : M →ₛₗ[σ₁₂] N) (g : N →ₛₗ[σ₂₃] P) (x : M) :\n    lcompₛₗ P σ₂₃ f g x = g (f x) := rfl\n\n"}
{"name":"LinearMap.llcomp_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nM : Type u_5\nNₗ : Type u_10\nPₗ : Type u_11\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid Nₗ\ninst✝³ : AddCommMonoid Pₗ\ninst✝² : Module R M\ninst✝¹ : Module R Nₗ\ninst✝ : Module R Pₗ\nf : LinearMap (RingHom.id R) Nₗ Pₗ\ng : LinearMap (RingHom.id R) M Nₗ\nx : M\n⊢ Eq ((((LinearMap.llcomp R M Nₗ Pₗ) f) g) x) (f (g x))","decl":"@[simp]\ntheorem llcomp_apply (f : Nₗ →ₗ[R] Pₗ) (g : M →ₗ[R] Nₗ) (x : M) :\n    llcomp R M Nₗ Pₗ f g x = f (g x) := rfl\n\n"}
{"name":"LinearMap.llcomp_apply'","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nM : Type u_5\nNₗ : Type u_10\nPₗ : Type u_11\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid Nₗ\ninst✝³ : AddCommMonoid Pₗ\ninst✝² : Module R M\ninst✝¹ : Module R Nₗ\ninst✝ : Module R Pₗ\nf : LinearMap (RingHom.id R) Nₗ Pₗ\ng : LinearMap (RingHom.id R) M Nₗ\n⊢ Eq (((LinearMap.llcomp R M Nₗ Pₗ) f) g) (f.comp g)","decl":"theorem llcomp_apply' (f : Nₗ →ₗ[R] Pₗ) (g : M →ₗ[R] Nₗ) : llcomp R M Nₗ Pₗ f g = f ∘ₗ g := rfl\n\n"}
{"name":"LinearMap.compl₂_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹² : CommSemiring R\nR₂ : Type u_2\ninst✝¹¹ : CommSemiring R₂\nR₃ : Type u_3\ninst✝¹⁰ : CommSemiring R₃\nR₄ : Type u_4\ninst✝⁹ : CommSemiring R₄\nM : Type u_5\nN : Type u_6\nP : Type u_7\nQ : Type u_8\ninst✝⁸ : AddCommMonoid M\ninst✝⁷ : AddCommMonoid N\ninst✝⁶ : AddCommMonoid P\ninst✝⁵ : AddCommMonoid Q\ninst✝⁴ : Module R M\ninst✝³ : Module R₂ N\ninst✝² : Module R₃ P\ninst✝¹ : Module R₄ Q\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\nσ₄₂ : RingHom R₄ R₂\nσ₄₃ : RingHom R₄ R₃\ninst✝ : RingHomCompTriple σ₄₂ σ₂₃ σ₄₃\nf : LinearMap σ₁₃ M (LinearMap σ₂₃ N P)\ng : LinearMap σ₄₂ Q N\nm : M\nq : Q\n⊢ Eq (((f.compl₂ g) m) q) ((f m) (g q))","decl":"@[simp]\ntheorem compl₂_apply (g : Q →ₛₗ[σ₄₂] N) (m : M) (q : Q) : f.compl₂ g m q = f m (g q) := rfl\n\n"}
{"name":"LinearMap.compl₂_id","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : CommSemiring R\nR₂ : Type u_2\ninst✝⁷ : CommSemiring R₂\nR₃ : Type u_3\ninst✝⁶ : CommSemiring R₃\nM : Type u_5\nN : Type u_6\nP : Type u_7\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : AddCommMonoid N\ninst✝³ : AddCommMonoid P\ninst✝² : Module R M\ninst✝¹ : Module R₂ N\ninst✝ : Module R₃ P\nσ₂₃ : RingHom R₂ R₃\nσ₁₃ : RingHom R R₃\nf : LinearMap σ₁₃ M (LinearMap σ₂₃ N P)\n⊢ Eq (f.compl₂ LinearMap.id) f","decl":"@[simp]\ntheorem compl₂_id : f.compl₂ LinearMap.id = f := by\n  ext\n  rw [compl₂_apply, id_coe, _root_.id]\n\n"}
{"name":"LinearMap.compl₁₂_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹⁰ : CommSemiring R\nMₗ : Type u_9\nNₗ : Type u_10\nPₗ : Type u_11\nQₗ : Type u_12\nQₗ' : Type u_13\ninst✝⁹ : AddCommMonoid Mₗ\ninst✝⁸ : AddCommMonoid Nₗ\ninst✝⁷ : AddCommMonoid Pₗ\ninst✝⁶ : AddCommMonoid Qₗ\ninst✝⁵ : AddCommMonoid Qₗ'\ninst✝⁴ : Module R Mₗ\ninst✝³ : Module R Nₗ\ninst✝² : Module R Pₗ\ninst✝¹ : Module R Qₗ\ninst✝ : Module R Qₗ'\nf : LinearMap (RingHom.id R) Mₗ (LinearMap (RingHom.id R) Nₗ Pₗ)\ng : LinearMap (RingHom.id R) Qₗ Mₗ\ng' : LinearMap (RingHom.id R) Qₗ' Nₗ\nx : Qₗ\ny : Qₗ'\n⊢ Eq (((f.compl₁₂ g g') x) y) ((f (g x)) (g' y))","decl":"@[simp]\ntheorem compl₁₂_apply (f : Mₗ →ₗ[R] Nₗ →ₗ[R] Pₗ) (g : Qₗ →ₗ[R] Mₗ) (g' : Qₗ' →ₗ[R] Nₗ) (x : Qₗ)\n    (y : Qₗ') : f.compl₁₂ g g' x y = f (g x) (g' y) := rfl\n\n"}
{"name":"LinearMap.compl₁₂_id_id","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁶ : CommSemiring R\nMₗ : Type u_9\nNₗ : Type u_10\nPₗ : Type u_11\ninst✝⁵ : AddCommMonoid Mₗ\ninst✝⁴ : AddCommMonoid Nₗ\ninst✝³ : AddCommMonoid Pₗ\ninst✝² : Module R Mₗ\ninst✝¹ : Module R Nₗ\ninst✝ : Module R Pₗ\nf : LinearMap (RingHom.id R) Mₗ (LinearMap (RingHom.id R) Nₗ Pₗ)\n⊢ Eq (f.compl₁₂ LinearMap.id LinearMap.id) f","decl":"@[simp]\ntheorem compl₁₂_id_id (f : Mₗ →ₗ[R] Nₗ →ₗ[R] Pₗ) : f.compl₁₂ LinearMap.id LinearMap.id = f := by\n  ext\n  simp_rw [compl₁₂_apply, id_coe, _root_.id]\n\n"}
{"name":"LinearMap.compl₁₂_inj","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝¹⁰ : CommSemiring R\nMₗ : Type u_9\nNₗ : Type u_10\nPₗ : Type u_11\nQₗ : Type u_12\nQₗ' : Type u_13\ninst✝⁹ : AddCommMonoid Mₗ\ninst✝⁸ : AddCommMonoid Nₗ\ninst✝⁷ : AddCommMonoid Pₗ\ninst✝⁶ : AddCommMonoid Qₗ\ninst✝⁵ : AddCommMonoid Qₗ'\ninst✝⁴ : Module R Mₗ\ninst✝³ : Module R Nₗ\ninst✝² : Module R Pₗ\ninst✝¹ : Module R Qₗ\ninst✝ : Module R Qₗ'\nf₁ f₂ : LinearMap (RingHom.id R) Mₗ (LinearMap (RingHom.id R) Nₗ Pₗ)\ng : LinearMap (RingHom.id R) Qₗ Mₗ\ng' : LinearMap (RingHom.id R) Qₗ' Nₗ\nhₗ : Function.Surjective ⇑g\nhᵣ : Function.Surjective ⇑g'\n⊢ Iff (Eq (f₁.compl₁₂ g g') (f₂.compl₁₂ g g')) (Eq f₁ f₂)","decl":"theorem compl₁₂_inj {f₁ f₂ : Mₗ →ₗ[R] Nₗ →ₗ[R] Pₗ} {g : Qₗ →ₗ[R] Mₗ} {g' : Qₗ' →ₗ[R] Nₗ}\n    (hₗ : Function.Surjective g) (hᵣ : Function.Surjective g') :\n    f₁.compl₁₂ g g' = f₂.compl₁₂ g g' ↔ f₁ = f₂ := by\n  constructor <;> intro h\n  · -- B₁.comp l r = B₂.comp l r → B₁ = B₂\n    ext x y\n    cases' hₗ x with x' hx\n    subst hx\n    cases' hᵣ y with y' hy\n    subst hy\n    convert LinearMap.congr_fun₂ h x' y' using 0\n  · -- B₁ = B₂ → B₁.comp l r = B₂.comp l r\n    subst h; rfl\n\n"}
{"name":"LinearMap.compr₂_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝⁸ : CommSemiring R\nM : Type u_5\nNₗ : Type u_10\nPₗ : Type u_11\nQₗ : Type u_12\ninst✝⁷ : AddCommMonoid M\ninst✝⁶ : AddCommMonoid Nₗ\ninst✝⁵ : AddCommMonoid Pₗ\ninst✝⁴ : AddCommMonoid Qₗ\ninst✝³ : Module R M\ninst✝² : Module R Nₗ\ninst✝¹ : Module R Pₗ\ninst✝ : Module R Qₗ\nf : LinearMap (RingHom.id R) M (LinearMap (RingHom.id R) Nₗ Pₗ)\ng : LinearMap (RingHom.id R) Pₗ Qₗ\nm : M\nn : Nₗ\n⊢ Eq (((f.compr₂ g) m) n) (g ((f m) n))","decl":"@[simp]\ntheorem compr₂_apply (f : M →ₗ[R] Nₗ →ₗ[R] Pₗ) (g : Pₗ →ₗ[R] Qₗ) (m : M) (n : Nₗ) :\n    f.compr₂ g m n = g (f m n) := rfl\n\n"}
{"name":"LinearMap.lsmul_eq_DistribMulAction_toLinearMap","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nM : Type u_5\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nr : R\n⊢ Eq ((LinearMap.lsmul R M) r) (DistribMulAction.toLinearMap R M r)","decl":"lemma lsmul_eq_DistribMulAction_toLinearMap (r : R) :\n    lsmul R M r = DistribMulAction.toLinearMap R M r := rfl\n\n"}
{"name":"LinearMap.lsmul_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\ninst✝² : CommSemiring R\nM : Type u_5\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nr : R\nm : M\n⊢ Eq (((LinearMap.lsmul R M) r) m) (HSMul.hSMul r m)","decl":"@[simp]\ntheorem lsmul_apply (r : R) (m : M) : lsmul R M r m = r • m := rfl\n\n"}
{"name":"LinearMap.lsmul_injective","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : NoZeroSMulDivisors R M\nx : R\nhx : Ne x 0\n⊢ Function.Injective ⇑((LinearMap.lsmul R M) x)","decl":"theorem lsmul_injective [NoZeroSMulDivisors R M] {x : R} (hx : x ≠ 0) :\n    Function.Injective (lsmul R M x) :=\n  smul_right_injective _ hx\n\n"}
{"name":"LinearMap.ker_lsmul","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝³ : CommRing R\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : NoZeroSMulDivisors R M\na : R\nha : Ne a 0\n⊢ Eq (LinearMap.ker ((LinearMap.lsmul R M) a)) Bot.bot","decl":"theorem ker_lsmul [NoZeroSMulDivisors R M] {a : R} (ha : a ≠ 0) :\n    LinearMap.ker (LinearMap.lsmul R M a) = ⊥ :=\n  LinearMap.ker_eq_bot_of_injective (LinearMap.lsmul_injective ha)\n\n"}
{"name":"LinearMap.restrictScalarsRange_apply","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_4\nP : Type u_5\nM' : Type u_6\nN' : Type u_7\nP' : Type u_8\ninst✝²¹ : CommSemiring R\ninst✝²⁰ : CommSemiring S\ninst✝¹⁹ : SMul S R\ninst✝¹⁸ : AddCommMonoid M\ninst✝¹⁷ : Module R M\ninst✝¹⁶ : AddCommMonoid N\ninst✝¹⁵ : Module R N\ninst✝¹⁴ : AddCommMonoid P\ninst✝¹³ : Module R P\ninst✝¹² : Module S M\ninst✝¹¹ : Module S N\ninst✝¹⁰ : Module S P\ninst✝⁹ : IsScalarTower S R M\ninst✝⁸ : IsScalarTower S R N\ninst✝⁷ : IsScalarTower S R P\ninst✝⁶ : AddCommMonoid M'\ninst✝⁵ : Module S M'\ninst✝⁴ : AddCommMonoid N'\ninst✝³ : Module S N'\ninst✝² : AddCommMonoid P'\ninst✝¹ : Module S P'\ninst✝ : SMulCommClass R S P\ni : LinearMap (RingHom.id S) M' M\nj : LinearMap (RingHom.id S) N' N\nk : LinearMap (RingHom.id S) P' P\nhk : Function.Injective ⇑k\nB : LinearMap (RingHom.id R) M (LinearMap (RingHom.id R) N P)\nhB : ∀ (m : M') (n : N'), Membership.mem (LinearMap.range k) ((B (i m)) (j n))\nm : M'\nn : N'\n⊢ Eq (k (((i.restrictScalarsRange j k hk B hB) m) n)) ((B (i m)) (j n))","decl":"@[simp] lemma restrictScalarsRange_apply (m : M') (n : N') :\n    k (restrictScalarsRange i j k hk B hB m n) = B (i m) (j n) := by\n  simp [restrictScalarsRange]\n\n"}
{"name":"LinearMap.restrictScalarsRange_apply_eq_zero_iff","module":"Mathlib.LinearAlgebra.BilinearMap","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_4\nP : Type u_5\nM' : Type u_6\nN' : Type u_7\nP' : Type u_8\ninst✝²¹ : CommSemiring R\ninst✝²⁰ : CommSemiring S\ninst✝¹⁹ : SMul S R\ninst✝¹⁸ : AddCommMonoid M\ninst✝¹⁷ : Module R M\ninst✝¹⁶ : AddCommMonoid N\ninst✝¹⁵ : Module R N\ninst✝¹⁴ : AddCommMonoid P\ninst✝¹³ : Module R P\ninst✝¹² : Module S M\ninst✝¹¹ : Module S N\ninst✝¹⁰ : Module S P\ninst✝⁹ : IsScalarTower S R M\ninst✝⁸ : IsScalarTower S R N\ninst✝⁷ : IsScalarTower S R P\ninst✝⁶ : AddCommMonoid M'\ninst✝⁵ : Module S M'\ninst✝⁴ : AddCommMonoid N'\ninst✝³ : Module S N'\ninst✝² : AddCommMonoid P'\ninst✝¹ : Module S P'\ninst✝ : SMulCommClass R S P\ni : LinearMap (RingHom.id S) M' M\nj : LinearMap (RingHom.id S) N' N\nk : LinearMap (RingHom.id S) P' P\nhk : Function.Injective ⇑k\nB : LinearMap (RingHom.id R) M (LinearMap (RingHom.id R) N P)\nhB : ∀ (m : M') (n : N'), Membership.mem (LinearMap.range k) ((B (i m)) (j n))\nm : M'\nn : N'\n⊢ Iff (Eq (((i.restrictScalarsRange j k hk B hB) m) n) 0) (Eq ((B (i m)) (j n)) 0)","decl":"@[simp]\nlemma restrictScalarsRange_apply_eq_zero_iff (m : M') (n : N') :\n    restrictScalarsRange i j k hk B hB m n = 0 ↔ B (i m) (j n) = 0 := by\n  rw [← hk.eq_iff, restrictScalarsRange_apply, map_zero]\n\n"}
