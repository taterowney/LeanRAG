{"name":"MeasureTheory.FinStronglyMeasurable.aefinStronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Zero β\ninst✝ : TopologicalSpace β\nhf : MeasureTheory.FinStronglyMeasurable f μ\n⊢ MeasureTheory.AEFinStronglyMeasurable f μ","decl":"theorem aefinStronglyMeasurable [Zero β] [TopologicalSpace β] (hf : FinStronglyMeasurable f μ) :\n    AEFinStronglyMeasurable f μ :=\n  ⟨f, hf, ae_eq_refl f⟩\n\n"}
{"name":"MeasureTheory.aefinStronglyMeasurable_zero","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_5\nβ : Type u_6\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : Zero β\ninst✝ : TopologicalSpace β\n⊢ MeasureTheory.AEFinStronglyMeasurable 0 μ","decl":"theorem aefinStronglyMeasurable_zero {α β} {_ : MeasurableSpace α} (μ : Measure α) [Zero β]\n    [TopologicalSpace β] : AEFinStronglyMeasurable (0 : α → β) μ :=\n  ⟨0, finStronglyMeasurable_zero, EventuallyEq.rfl⟩\n\n"}
{"name":"MeasureTheory.StronglyMeasurable.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nhf : MeasureTheory.StronglyMeasurable f\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"@[aesop 30% apply (rule_sets := [Measurable])]\nprotected theorem StronglyMeasurable.aestronglyMeasurable (hf : StronglyMeasurable[m] f) :\n    AEStronglyMeasurable[m] f μ := ⟨f, hf, EventuallyEq.refl _ _⟩\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_const","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nb : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => b) μ","decl":"@[measurability]\ntheorem aestronglyMeasurable_const {b : β} : AEStronglyMeasurable[m] (fun _ : α => b) μ :=\n  stronglyMeasurable_const.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_one","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : One β\n⊢ MeasureTheory.AEStronglyMeasurable 1 μ","decl":"@[to_additive (attr := measurability)]\ntheorem aestronglyMeasurable_one [One β] : AEStronglyMeasurable[m] (1 : α → β) μ :=\n  stronglyMeasurable_one.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_zero","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Zero β\n⊢ MeasureTheory.AEStronglyMeasurable 0 μ","decl":"@[to_additive (attr := measurability)]\ntheorem aestronglyMeasurable_one [One β] : AEStronglyMeasurable[m] (1 : α → β) μ :=\n  stronglyMeasurable_one.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.of_subsingleton_dom","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : Subsingleton α\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"@[simp]\nlemma AEStronglyMeasurable.of_subsingleton_dom [Subsingleton α] : AEStronglyMeasurable[m] f μ :=\n  (Subsingleton.stronglyMeasurable' f).aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.of_subsingleton_cod","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : Subsingleton β\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"@[simp]\nlemma AEStronglyMeasurable.of_subsingleton_cod [Subsingleton β] : AEStronglyMeasurable[m] f μ :=\n  (Subsingleton.stronglyMeasurable f).aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.Subsingleton.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Subsingleton β\nf : α → β\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"theorem Subsingleton.aestronglyMeasurable [Subsingleton β] (f : α → β) : AEStronglyMeasurable f μ :=\n  .of_subsingleton_cod\n\n"}
{"name":"MeasureTheory.Subsingleton.aestronglyMeasurable'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Subsingleton α\nf : α → β\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"lemma Subsingleton.aestronglyMeasurable' [Subsingleton α] (f : α → β) : AEStronglyMeasurable f μ :=\n  .of_subsingleton_dom\n\n"}
{"name":"MeasureTheory.aestronglyMeasurable_zero_measure","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nf : α → β\n⊢ MeasureTheory.AEStronglyMeasurable f 0","decl":"@[simp]\ntheorem aestronglyMeasurable_zero_measure (f : α → β) :\n    AEStronglyMeasurable[m] f (0 : Measure[m₀] α) := by\n  nontriviality α\n  inhabit α\n  exact ⟨fun _ => f default, stronglyMeasurable_const, rfl⟩\n\n"}
{"name":"MeasureTheory.SimpleFunc.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : MeasureTheory.SimpleFunc α β\n⊢ MeasureTheory.AEStronglyMeasurable (⇑f) μ","decl":"@[measurability]\ntheorem SimpleFunc.aestronglyMeasurable (f : α →ₛ β) : AEStronglyMeasurable f μ :=\n  f.stronglyMeasurable.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.of_finite","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : DiscreteMeasurableSpace α\ninst✝ : Finite α\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"lemma of_finite [DiscreteMeasurableSpace α] [Finite α] : AEStronglyMeasurable f μ :=\n  ⟨_, .of_finite, ae_eq_rfl⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.stronglyMeasurable_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.StronglyMeasurable (MeasureTheory.AEStronglyMeasurable.mk f hf)","decl":"lemma stronglyMeasurable_mk (hf : AEStronglyMeasurable[m] f μ) : StronglyMeasurable[m] (hf.mk f) :=\n  hf.choose_spec.1\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.measurable_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Measurable (MeasureTheory.AEStronglyMeasurable.mk f hf)","decl":"theorem measurable_mk [PseudoMetrizableSpace β] [MeasurableSpace β] [BorelSpace β]\n    (hf : AEStronglyMeasurable[m] f μ) : Measurable[m] (hf.mk f) :=\n  hf.stronglyMeasurable_mk.measurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.ae_eq_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq f (MeasureTheory.AEStronglyMeasurable.mk f hf)","decl":"theorem ae_eq_mk (hf : AEStronglyMeasurable[m] f μ) : f =ᵐ[μ] hf.mk f :=\n  hf.choose_spec.2\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.aemeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : BorelSpace β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ AEMeasurable f μ","decl":"@[aesop 5% apply (rule_sets := [Measurable])]\nprotected theorem aemeasurable {β} [MeasurableSpace β] [TopologicalSpace β]\n    [PseudoMetrizableSpace β] [BorelSpace β] {f : α → β} (hf : AEStronglyMeasurable f μ) :\n    AEMeasurable f μ :=\n  ⟨hf.mk f, hf.stronglyMeasurable_mk.measurable, hf.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.congr","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ MeasureTheory.AEStronglyMeasurable g μ","decl":"theorem congr (hf : AEStronglyMeasurable[m] f μ) (h : f =ᵐ[μ] g) : AEStronglyMeasurable[m] g μ :=\n  ⟨hf.mk f, hf.stronglyMeasurable_mk, h.symm.trans hf.ae_eq_mk⟩\n\n"}
{"name":"aestronglyMeasurable_congr","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\nh : (MeasureTheory.ae μ).EventuallyEq f g\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f μ) (MeasureTheory.AEStronglyMeasurable g μ)","decl":"theorem _root_.aestronglyMeasurable_congr (h : f =ᵐ[μ] g) :\n    AEStronglyMeasurable[m] f μ ↔ AEStronglyMeasurable[m] g μ :=\n  ⟨fun hf => hf.congr h, fun hg => hg.congr h.symm⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mono_measure","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nν : MeasureTheory.Measure α\nhf : MeasureTheory.AEStronglyMeasurable f μ\nh : LE.le ν μ\n⊢ MeasureTheory.AEStronglyMeasurable f ν","decl":"theorem mono_measure {ν : Measure α} (hf : AEStronglyMeasurable[m] f μ) (h : ν ≤ μ) :\n    AEStronglyMeasurable[m] f ν :=\n  ⟨hf.mk f, hf.stronglyMeasurable_mk, Eventually.filter_mono (ae_mono h) hf.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mono_ac","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ ν : MeasureTheory.Measure α\nf : α → β\nh : ν.AbsolutelyContinuous μ\nhμ : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable f ν","decl":"protected lemma mono_ac (h : ν ≪ μ) (hμ : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] f ν := let ⟨g, hg, hg'⟩ := hμ; ⟨g, hg, h.ae_eq hg'⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mono_set","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ns t : Set α\nh : HasSubset.Subset s t\nht : MeasureTheory.AEStronglyMeasurable f (μ.restrict t)\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict s)","decl":"theorem mono_set {s t} (h : s ⊆ t) (ht : AEStronglyMeasurable[m] f (μ.restrict t)) :\n    AEStronglyMeasurable[m] f (μ.restrict s) :=\n  ht.mono_measure (restrict_mono h le_rfl)\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mono","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nm' : MeasurableSpace α\nhm : LE.le m m'\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"lemma mono {m'} (hm : m ≤ m') (hf : AEStronglyMeasurable[m] f μ) : AEStronglyMeasurable[m'] f μ :=\n  let ⟨f', hf'_meas, hff'⟩ := hf; ⟨f', hf'_meas.mono hm, hff'⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.of_trim","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nm₀' : MeasurableSpace α\nhm₀ : LE.le m₀' m₀\nhf : MeasureTheory.AEStronglyMeasurable f (μ.trim hm₀)\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"lemma of_trim {m₀' : MeasurableSpace α} (hm₀ : m₀' ≤ m₀)\n    (hf : AEStronglyMeasurable[m] f (μ.trim hm₀)) : AEStronglyMeasurable[m] f μ := by\n  obtain ⟨g, hg_meas, hfg⟩ := hf; exact ⟨g, hg_meas, ae_eq_of_ae_eq_trim hfg⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.restrict","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nhfm : MeasureTheory.AEStronglyMeasurable f μ\ns : Set α\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict s)","decl":"protected theorem restrict (hfm : AEStronglyMeasurable[m] f μ) {s} :\n    AEStronglyMeasurable[m] f (μ.restrict s) :=\n  hfm.mono_measure Measure.restrict_le_self\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.ae_mem_imp_eq_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ns : Set α\nh : MeasureTheory.AEStronglyMeasurable f (μ.restrict s)\n⊢ Filter.Eventually (fun x => Membership.mem s x → Eq (f x) (MeasureTheory.AEStronglyMeasurable.mk f h x)) (MeasureTheory.ae μ)","decl":"theorem ae_mem_imp_eq_mk {s} (h : AEStronglyMeasurable[m] f (μ.restrict s)) :\n    ∀ᵐ x ∂μ, x ∈ s → f x = h.mk f x :=\n  ae_imp_of_ae_restrict h.ae_eq_mk\n\n"}
{"name":"Continuous.comp_aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ng : β → γ\nf : α → β\nhg : Continuous g\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => g (f x)) μ","decl":"/-- The composition of a continuous function and an ae strongly measurable function is ae strongly\nmeasurable. -/\ntheorem _root_.Continuous.comp_aestronglyMeasurable {g : β → γ} {f : α → β} (hg : Continuous g)\n    (hf : AEStronglyMeasurable[m] f μ) : AEStronglyMeasurable[m] (fun x => g (f x)) μ :=\n  ⟨_, hg.comp_stronglyMeasurable hf.stronglyMeasurable_mk, EventuallyEq.fun_comp hf.ae_eq_mk g⟩\n\n"}
{"name":"Continuous.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝³ : TopologicalSpace α\ninst✝² : OpensMeasurableSpace α\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : SecondCountableTopologyEither α β\nhf : Continuous f\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"/-- A continuous function from `α` to `β` is ae strongly measurable when one of the two spaces is\nsecond countable. -/\ntheorem _root_.Continuous.aestronglyMeasurable [TopologicalSpace α] [OpensMeasurableSpace α]\n    [PseudoMetrizableSpace β] [SecondCountableTopologyEither α β] (hf : Continuous f) :\n    AEStronglyMeasurable f μ :=\n  hf.stronglyMeasurable.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.prod_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ng : α → γ\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => { fst := f x, snd := g x }) μ","decl":"protected theorem prod_mk {f : α → β} {g : α → γ} (hf : AEStronglyMeasurable[m] f μ)\n    (hg : AEStronglyMeasurable[m] g μ) : AEStronglyMeasurable[m] (fun x => (f x, g x)) μ :=\n  ⟨fun x => (hf.mk f x, hg.mk g x), hf.stronglyMeasurable_mk.prod_mk hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.prod_mk hg.ae_eq_mk⟩\n\n"}
{"name":"Continuous.comp_aestronglyMeasurable₂","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace γ\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ' : Type u_5\ninst✝ : TopologicalSpace β'\ng : β → β' → γ\nf : α → β\nf' : α → β'\nhg : Continuous (Function.uncurry g)\nhf : MeasureTheory.AEStronglyMeasurable f μ\nh'f : MeasureTheory.AEStronglyMeasurable f' μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => g (f x) (f' x)) μ","decl":"/-- The composition of a continuous function of two variables and two ae strongly measurable\nfunctions is ae strongly measurable. -/\ntheorem _root_.Continuous.comp_aestronglyMeasurable₂\n    {β' : Type*} [TopologicalSpace β']\n    {g : β → β' → γ} {f : α → β} {f' : α → β'} (hg : Continuous g.uncurry)\n    (hf : AEStronglyMeasurable[m] f μ) (h'f : AEStronglyMeasurable[m] f' μ) :\n    AEStronglyMeasurable[m] (fun x => g (f x) (f' x)) μ :=\n  hg.comp_aestronglyMeasurable (hf.prod_mk h'f)\n\n"}
{"name":"Measurable.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : SecondCountableTopology β\ninst✝ : OpensMeasurableSpace β\nhf : Measurable f\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"/-- In a space with second countable topology, measurable implies ae strongly measurable. -/\n@[fun_prop, aesop unsafe 30% apply (rule_sets := [Measurable])]\ntheorem _root_.Measurable.aestronglyMeasurable\n    [MeasurableSpace β] [PseudoMetrizableSpace β] [SecondCountableTopology β]\n    [OpensMeasurableSpace β] (hf : Measurable[m] f) : AEStronglyMeasurable[m] f μ :=\n  hf.stronglyMeasurable.aestronglyMeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.of_measurableSpace_le_on","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm : MeasurableSpace α\nf : α → β\nm' m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Zero β\nhm : LE.le m m₀\ns : Set α\nhs_m : MeasurableSet s\nhs : ∀ (t : Set α), MeasurableSet (Inter.inter s t) → MeasurableSet (Inter.inter s t)\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhf_zero : (MeasureTheory.ae (μ.restrict (HasCompl.compl s))).EventuallyEq f 0\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"/-- If the restriction to a set `s` of a σ-algebra `m` is included in the restriction to `s` of\nanother σ-algebra `m₂` (hypothesis `hs`), the set `s` is `m` measurable and a function `f` almost\neverywhere supported on `s` is `m`-ae-strongly-measurable, then `f` is also\n`m₂`-ae-strongly-measurable. -/\nlemma of_measurableSpace_le_on {m' m₀ : MeasurableSpace α} {μ : Measure[m₀] α} [Zero β]\n    (hm : m ≤ m₀) {s : Set α} (hs_m : MeasurableSet[m] s)\n    (hs : ∀ t, MeasurableSet[m] (s ∩ t) → MeasurableSet[m'] (s ∩ t))\n    (hf : AEStronglyMeasurable[m] f μ) (hf_zero : f =ᵐ[μ.restrict sᶜ] 0) :\n    AEStronglyMeasurable[m'] f μ := by\n  have h_ind_eq : s.indicator (hf.mk f) =ᵐ[μ] f := by\n    refine Filter.EventuallyEq.trans ?_ <|\n      indicator_ae_eq_of_restrict_compl_ae_eq_zero (hm _ hs_m) hf_zero\n    filter_upwards [hf.ae_eq_mk] with x hx\n    by_cases hxs : x ∈ s\n    · simp [hxs, hx]\n    · simp [hxs]\n  suffices StronglyMeasurable[m'] (s.indicator (hf.mk f)) from\n    this.aestronglyMeasurable.congr h_ind_eq\n  exact (hf.stronglyMeasurable_mk.indicator hs_m).stronglyMeasurable_of_measurableSpace_le_on hs_m\n    hs fun x hxs => Set.indicator_of_not_mem hxs _\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : Mul β\ninst✝ : ContinuousMul β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (HMul.hMul f g) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable]))]\nprotected theorem mul [Mul β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ)\n    (hg : AEStronglyMeasurable[m] g μ) : AEStronglyMeasurable[m] (f * g) μ :=\n  ⟨hf.mk f * hg.mk g, hf.stronglyMeasurable_mk.mul hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.mul hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.add","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : Add β\ninst✝ : ContinuousAdd β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (HAdd.hAdd f g) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable]))]\nprotected theorem mul [Mul β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ)\n    (hg : AEStronglyMeasurable[m] g μ) : AEStronglyMeasurable[m] (f * g) μ :=\n  ⟨hf.mk f * hg.mk g, hf.stronglyMeasurable_mk.mul hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.mul hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mul_const","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Mul β\ninst✝ : ContinuousMul β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HMul.hMul (f x) c) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem mul_const [Mul β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ) (c : β) :\n    AEStronglyMeasurable[m] (fun x => f x * c) μ :=\n  hf.mul aestronglyMeasurable_const\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.add_const","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Add β\ninst✝ : ContinuousAdd β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HAdd.hAdd (f x) c) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem mul_const [Mul β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ) (c : β) :\n    AEStronglyMeasurable[m] (fun x => f x * c) μ :=\n  hf.mul aestronglyMeasurable_const\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_add","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Add β\ninst✝ : ContinuousAdd β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HAdd.hAdd c (f x)) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem const_mul [Mul β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ) (c : β) :\n    AEStronglyMeasurable[m] (fun x => c * f x) μ :=\n  aestronglyMeasurable_const.mul hf\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_mul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Mul β\ninst✝ : ContinuousMul β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HMul.hMul c (f x)) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem const_mul [Mul β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ) (c : β) :\n    AEStronglyMeasurable[m] (fun x => c * f x) μ :=\n  aestronglyMeasurable_const.mul hf\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.inv","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Inv β\ninst✝ : ContinuousInv β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (Inv.inv f) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem inv [Inv β] [ContinuousInv β] (hf : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] f⁻¹ μ :=\n  ⟨(hf.mk f)⁻¹, hf.stronglyMeasurable_mk.inv, hf.ae_eq_mk.inv⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.neg","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Neg β\ninst✝ : ContinuousNeg β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (Neg.neg f) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem inv [Inv β] [ContinuousInv β] (hf : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] f⁻¹ μ :=\n  ⟨(hf.mk f)⁻¹, hf.stronglyMeasurable_mk.inv, hf.ae_eq_mk.inv⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.sub","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (HSub.hSub f g) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable]))]\nprotected theorem div [Group β] [TopologicalGroup β] (hf : AEStronglyMeasurable[m] f μ)\n    (hg : AEStronglyMeasurable[m] g μ) : AEStronglyMeasurable[m] (f / g) μ :=\n  ⟨hf.mk f / hg.mk g, hf.stronglyMeasurable_mk.div hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.div hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.div","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : Group β\ninst✝ : TopologicalGroup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (HDiv.hDiv f g) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable]))]\nprotected theorem div [Group β] [TopologicalGroup β] (hf : AEStronglyMeasurable[m] f μ)\n    (hg : AEStronglyMeasurable[m] g μ) : AEStronglyMeasurable[m] (f / g) μ :=\n  ⟨hf.mk f / hg.mk g, hf.stronglyMeasurable_mk.div hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.div hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.add_iff_right","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : AddCommGroup β\ninst✝ : TopologicalAddGroup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (HAdd.hAdd f g) μ) (MeasureTheory.AEStronglyMeasurable g μ)","decl":"@[to_additive]\ntheorem mul_iff_right [CommGroup β] [TopologicalGroup β] (hf : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] (f * g) μ ↔ AEStronglyMeasurable[m] g μ :=\n  ⟨fun h ↦ show g = f * g * f⁻¹ by simp only [mul_inv_cancel_comm] ▸ h.mul hf.inv,\n    fun h ↦ hf.mul h⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mul_iff_right","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : CommGroup β\ninst✝ : TopologicalGroup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (HMul.hMul f g) μ) (MeasureTheory.AEStronglyMeasurable g μ)","decl":"@[to_additive]\ntheorem mul_iff_right [CommGroup β] [TopologicalGroup β] (hf : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] (f * g) μ ↔ AEStronglyMeasurable[m] g μ :=\n  ⟨fun h ↦ show g = f * g * f⁻¹ by simp only [mul_inv_cancel_comm] ▸ h.mul hf.inv,\n    fun h ↦ hf.mul h⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.add_iff_left","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : AddCommGroup β\ninst✝ : TopologicalAddGroup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (HAdd.hAdd g f) μ) (MeasureTheory.AEStronglyMeasurable g μ)","decl":"@[to_additive]\ntheorem mul_iff_left [CommGroup β] [TopologicalGroup β] (hf : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] (g * f) μ ↔ AEStronglyMeasurable[m] g μ :=\n  mul_comm g f ▸ AEStronglyMeasurable.mul_iff_right hf\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.mul_iff_left","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : CommGroup β\ninst✝ : TopologicalGroup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (HMul.hMul g f) μ) (MeasureTheory.AEStronglyMeasurable g μ)","decl":"@[to_additive]\ntheorem mul_iff_left [CommGroup β] [TopologicalGroup β] (hf : AEStronglyMeasurable[m] f μ) :\n    AEStronglyMeasurable[m] (g * f) μ ↔ AEStronglyMeasurable[m] g μ :=\n  mul_comm g f ▸ AEStronglyMeasurable.mul_iff_right hf\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.smul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_5\ninst✝² : TopologicalSpace 𝕜\ninst✝¹ : SMul 𝕜 β\ninst✝ : ContinuousSMul 𝕜 β\nf : α → 𝕜\ng : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul (f x) (g x)) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable]))]\nprotected theorem smul {𝕜} [TopologicalSpace 𝕜] [SMul 𝕜 β] [ContinuousSMul 𝕜 β] {f : α → 𝕜}\n    {g : α → β} (hf : AEStronglyMeasurable[m] f μ) (hg : AEStronglyMeasurable[m] g μ) :\n    AEStronglyMeasurable[m] (fun x => f x • g x) μ :=\n  continuous_smul.comp_aestronglyMeasurable (hf.prod_mk hg)\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.vadd","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_5\ninst✝² : TopologicalSpace 𝕜\ninst✝¹ : VAdd 𝕜 β\ninst✝ : ContinuousVAdd 𝕜 β\nf : α → 𝕜\ng : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HVAdd.hVAdd (f x) (g x)) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable]))]\nprotected theorem smul {𝕜} [TopologicalSpace 𝕜] [SMul 𝕜 β] [ContinuousSMul 𝕜 β] {f : α → 𝕜}\n    {g : α → β} (hf : AEStronglyMeasurable[m] f μ) (hg : AEStronglyMeasurable[m] g μ) :\n    AEStronglyMeasurable[m] (fun x => f x • g x) μ :=\n  continuous_smul.comp_aestronglyMeasurable (hf.prod_mk hg)\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_nsmul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : AddMonoid β\ninst✝ : ContinuousAdd β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nn : Nat\n⊢ MeasureTheory.AEStronglyMeasurable (HSMul.hSMul n f) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable])) const_nsmul]\nprotected theorem pow [Monoid β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ) (n : ℕ) :\n    AEStronglyMeasurable[m] (f ^ n) μ :=\n  ⟨hf.mk f ^ n, hf.stronglyMeasurable_mk.pow _, hf.ae_eq_mk.pow_const _⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.pow","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝¹ : Monoid β\ninst✝ : ContinuousMul β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nn : Nat\n⊢ MeasureTheory.AEStronglyMeasurable (HPow.hPow f n) μ","decl":"@[to_additive (attr := aesop safe 20 apply (rule_sets := [Measurable])) const_nsmul]\nprotected theorem pow [Monoid β] [ContinuousMul β] (hf : AEStronglyMeasurable[m] f μ) (n : ℕ) :\n    AEStronglyMeasurable[m] (f ^ n) μ :=\n  ⟨hf.mk f ^ n, hf.stronglyMeasurable_mk.pow _, hf.ae_eq_mk.pow_const _⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_smul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\n𝕜 : Type u_5\ninst✝¹ : SMul 𝕜 β\ninst✝ : ContinuousConstSMul 𝕜 β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : 𝕜\n⊢ MeasureTheory.AEStronglyMeasurable (HSMul.hSMul c f) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem const_smul {𝕜} [SMul 𝕜 β] [ContinuousConstSMul 𝕜 β]\n    (hf : AEStronglyMeasurable[m] f μ) (c : 𝕜) : AEStronglyMeasurable[m] (c • f) μ :=\n  ⟨c • hf.mk f, hf.stronglyMeasurable_mk.const_smul c, hf.ae_eq_mk.const_smul c⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_vadd","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\n𝕜 : Type u_5\ninst✝¹ : VAdd 𝕜 β\ninst✝ : ContinuousConstVAdd 𝕜 β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : 𝕜\n⊢ MeasureTheory.AEStronglyMeasurable (HVAdd.hVAdd c f) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem const_smul {𝕜} [SMul 𝕜 β] [ContinuousConstSMul 𝕜 β]\n    (hf : AEStronglyMeasurable[m] f μ) (c : 𝕜) : AEStronglyMeasurable[m] (c • f) μ :=\n  ⟨c • hf.mk f, hf.stronglyMeasurable_mk.const_smul c, hf.ae_eq_mk.const_smul c⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_smul'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\n𝕜 : Type u_5\ninst✝¹ : SMul 𝕜 β\ninst✝ : ContinuousConstSMul 𝕜 β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : 𝕜\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul c (f x)) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem const_smul' {𝕜} [SMul 𝕜 β] [ContinuousConstSMul 𝕜 β]\n    (hf : AEStronglyMeasurable[m] f μ) (c : 𝕜) : AEStronglyMeasurable[m] (fun x => c • f x) μ :=\n  hf.const_smul c\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.const_vadd'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\n𝕜 : Type u_5\ninst✝¹ : VAdd 𝕜 β\ninst✝ : ContinuousConstVAdd 𝕜 β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : 𝕜\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HVAdd.hVAdd c (f x)) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem const_smul' {𝕜} [SMul 𝕜 β] [ContinuousConstSMul 𝕜 β]\n    (hf : AEStronglyMeasurable[m] f μ) (c : 𝕜) : AEStronglyMeasurable[m] (fun x => c • f x) μ :=\n  hf.const_smul c\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.vadd_const","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_5\ninst✝² : TopologicalSpace 𝕜\ninst✝¹ : VAdd 𝕜 β\ninst✝ : ContinuousVAdd 𝕜 β\nf : α → 𝕜\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HVAdd.hVAdd (f x) c) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem smul_const {𝕜} [TopologicalSpace 𝕜] [SMul 𝕜 β] [ContinuousSMul 𝕜 β] {f : α → 𝕜}\n    (hf : AEStronglyMeasurable[m] f μ) (c : β) : AEStronglyMeasurable[m] (fun x => f x • c) μ :=\n  continuous_smul.comp_aestronglyMeasurable (hf.prod_mk aestronglyMeasurable_const)\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.smul_const","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm m₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\n𝕜 : Type u_5\ninst✝² : TopologicalSpace 𝕜\ninst✝¹ : SMul 𝕜 β\ninst✝ : ContinuousSMul 𝕜 β\nf : α → 𝕜\nhf : MeasureTheory.AEStronglyMeasurable f μ\nc : β\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul (f x) c) μ","decl":"@[to_additive (attr := measurability)]\nprotected theorem smul_const {𝕜} [TopologicalSpace 𝕜] [SMul 𝕜 β] [ContinuousSMul 𝕜 β] {f : α → 𝕜}\n    (hf : AEStronglyMeasurable[m] f μ) (c : β) : AEStronglyMeasurable[m] (fun x => f x • c) μ :=\n  continuous_smul.comp_aestronglyMeasurable (hf.prod_mk aestronglyMeasurable_const)\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.sup","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : SemilatticeSup β\ninst✝ : ContinuousSup β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (Max.max f g) μ","decl":"@[aesop safe 20 apply (rule_sets := [Measurable])]\nprotected theorem sup [SemilatticeSup β] [ContinuousSup β] (hf : AEStronglyMeasurable f μ)\n    (hg : AEStronglyMeasurable g μ) : AEStronglyMeasurable (f ⊔ g) μ :=\n  ⟨hf.mk f ⊔ hg.mk g, hf.stronglyMeasurable_mk.sup hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.sup hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.inf","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ninst✝¹ : SemilatticeInf β\ninst✝ : ContinuousInf β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (Min.min f g) μ","decl":"@[aesop safe 20 apply (rule_sets := [Measurable])]\nprotected theorem inf [SemilatticeInf β] [ContinuousInf β] (hf : AEStronglyMeasurable f μ)\n    (hg : AEStronglyMeasurable g μ) : AEStronglyMeasurable (f ⊓ g) μ :=\n  ⟨hf.mk f ⊓ hg.mk g, hf.stronglyMeasurable_mk.inf hg.stronglyMeasurable_mk,\n    hf.ae_eq_mk.inf hg.ae_eq_mk⟩\n\n"}
{"name":"List.aestronglyMeasurable_sum'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : AddMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousAdd M\nl : List (α → M)\nhl : ∀ (f : α → M), Membership.mem l f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable l.sum μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.List.aestronglyMeasurable_prod' (l : List (α → M))\n    (hl : ∀ f ∈ l, AEStronglyMeasurable f μ) : AEStronglyMeasurable l.prod μ := by\n  induction' l with f l ihl; · exact aestronglyMeasurable_one\n  rw [List.forall_mem_cons] at hl\n  rw [List.prod_cons]\n  exact hl.1.mul (ihl hl.2)\n\n"}
{"name":"List.aestronglyMeasurable_prod'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : Monoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\nl : List (α → M)\nhl : ∀ (f : α → M), Membership.mem l f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable l.prod μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.List.aestronglyMeasurable_prod' (l : List (α → M))\n    (hl : ∀ f ∈ l, AEStronglyMeasurable f μ) : AEStronglyMeasurable l.prod μ := by\n  induction' l with f l ihl; · exact aestronglyMeasurable_one\n  rw [List.forall_mem_cons] at hl\n  rw [List.prod_cons]\n  exact hl.1.mul (ihl hl.2)\n\n"}
{"name":"List.aestronglyMeasurable_sum","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : AddMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousAdd M\nl : List (α → M)\nhl : ∀ (f : α → M), Membership.mem l f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => (List.map (fun f => f x) l).sum) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.List.aestronglyMeasurable_prod\n    (l : List (α → M)) (hl : ∀ f ∈ l, AEStronglyMeasurable f μ) :\n    AEStronglyMeasurable (fun x => (l.map fun f : α → M => f x).prod) μ := by\n  simpa only [← Pi.list_prod_apply] using l.aestronglyMeasurable_prod' hl\n\n"}
{"name":"List.aestronglyMeasurable_prod","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : Monoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\nl : List (α → M)\nhl : ∀ (f : α → M), Membership.mem l f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => (List.map (fun f => f x) l).prod) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.List.aestronglyMeasurable_prod\n    (l : List (α → M)) (hl : ∀ f ∈ l, AEStronglyMeasurable f μ) :\n    AEStronglyMeasurable (fun x => (l.map fun f : α → M => f x).prod) μ := by\n  simpa only [← Pi.list_prod_apply] using l.aestronglyMeasurable_prod' hl\n\n"}
{"name":"Multiset.aestronglyMeasurable_prod'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : CommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\nl : Multiset (α → M)\nhl : ∀ (f : α → M), Membership.mem l f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable l.prod μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Multiset.aestronglyMeasurable_prod' (l : Multiset (α → M))\n    (hl : ∀ f ∈ l, AEStronglyMeasurable f μ) : AEStronglyMeasurable l.prod μ := by\n  rcases l with ⟨l⟩\n  simpa using l.aestronglyMeasurable_prod' (by simpa using hl)\n\n"}
{"name":"Multiset.aestronglyMeasurable_sum'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : AddCommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousAdd M\nl : Multiset (α → M)\nhl : ∀ (f : α → M), Membership.mem l f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable l.sum μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Multiset.aestronglyMeasurable_prod' (l : Multiset (α → M))\n    (hl : ∀ f ∈ l, AEStronglyMeasurable f μ) : AEStronglyMeasurable l.prod μ := by\n  rcases l with ⟨l⟩\n  simpa using l.aestronglyMeasurable_prod' (by simpa using hl)\n\n"}
{"name":"Multiset.aestronglyMeasurable_prod","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : CommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\ns : Multiset (α → M)\nhs : ∀ (f : α → M), Membership.mem s f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => (Multiset.map (fun f => f x) s).prod) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Multiset.aestronglyMeasurable_prod (s : Multiset (α → M))\n    (hs : ∀ f ∈ s, AEStronglyMeasurable f μ) :\n    AEStronglyMeasurable (fun x => (s.map fun f : α → M => f x).prod) μ := by\n  simpa only [← Pi.multiset_prod_apply] using s.aestronglyMeasurable_prod' hs\n\n"}
{"name":"Multiset.aestronglyMeasurable_sum","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : AddCommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousAdd M\ns : Multiset (α → M)\nhs : ∀ (f : α → M), Membership.mem s f → MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => (Multiset.map (fun f => f x) s).sum) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Multiset.aestronglyMeasurable_prod (s : Multiset (α → M))\n    (hs : ∀ f ∈ s, AEStronglyMeasurable f μ) :\n    AEStronglyMeasurable (fun x => (s.map fun f : α → M => f x).prod) μ := by\n  simpa only [← Pi.multiset_prod_apply] using s.aestronglyMeasurable_prod' hs\n\n"}
{"name":"Finset.aestronglyMeasurable_sum'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : AddCommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousAdd M\nι : Type u_6\nf : ι → α → M\ns : Finset ι\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.AEStronglyMeasurable (f i) μ\n⊢ MeasureTheory.AEStronglyMeasurable (s.sum fun i => f i) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Finset.aestronglyMeasurable_prod' {ι : Type*} {f : ι → α → M} (s : Finset ι)\n    (hf : ∀ i ∈ s, AEStronglyMeasurable (f i) μ) : AEStronglyMeasurable (∏ i ∈ s, f i) μ :=\n  Multiset.aestronglyMeasurable_prod' _ fun _g hg =>\n    let ⟨_i, hi, hg⟩ := Multiset.mem_map.1 hg\n    hg ▸ hf _ hi\n\n"}
{"name":"Finset.aestronglyMeasurable_prod'","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : CommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\nι : Type u_6\nf : ι → α → M\ns : Finset ι\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.AEStronglyMeasurable (f i) μ\n⊢ MeasureTheory.AEStronglyMeasurable (s.prod fun i => f i) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Finset.aestronglyMeasurable_prod' {ι : Type*} {f : ι → α → M} (s : Finset ι)\n    (hf : ∀ i ∈ s, AEStronglyMeasurable (f i) μ) : AEStronglyMeasurable (∏ i ∈ s, f i) μ :=\n  Multiset.aestronglyMeasurable_prod' _ fun _g hg =>\n    let ⟨_i, hi, hg⟩ := Multiset.mem_map.1 hg\n    hg ▸ hf _ hi\n\n"}
{"name":"Finset.aestronglyMeasurable_prod","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : CommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousMul M\nι : Type u_6\nf : ι → α → M\ns : Finset ι\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.AEStronglyMeasurable (f i) μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun a => s.prod fun i => f i a) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Finset.aestronglyMeasurable_prod {ι : Type*} {f : ι → α → M} (s : Finset ι)\n    (hf : ∀ i ∈ s, AEStronglyMeasurable (f i) μ) :\n    AEStronglyMeasurable (fun a => ∏ i ∈ s, f i a) μ := by\n  simpa only [← Finset.prod_apply] using s.aestronglyMeasurable_prod' hf\n\n"}
{"name":"Finset.aestronglyMeasurable_sum","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nM : Type u_5\ninst✝² : AddCommMonoid M\ninst✝¹ : TopologicalSpace M\ninst✝ : ContinuousAdd M\nι : Type u_6\nf : ι → α → M\ns : Finset ι\nhf : ∀ (i : ι), Membership.mem s i → MeasureTheory.AEStronglyMeasurable (f i) μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun a => s.sum fun i => f i a) μ","decl":"@[to_additive (attr := measurability)]\ntheorem _root_.Finset.aestronglyMeasurable_prod {ι : Type*} {f : ι → α → M} (s : Finset ι)\n    (hf : ∀ i ∈ s, AEStronglyMeasurable (f i) μ) :\n    AEStronglyMeasurable (fun a => ∏ i ∈ s, f i a) μ := by\n  simpa only [← Finset.prod_apply] using s.aestronglyMeasurable_prod' hf\n\n"}
{"name":"AEMeasurable.aestronglyMeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : OpensMeasurableSpace β\ninst✝ : SecondCountableTopology β\nhf : AEMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"/-- In a space with second countable topology, measurable implies strongly measurable. -/\n@[aesop 90% apply (rule_sets := [Measurable])]\ntheorem _root_.AEMeasurable.aestronglyMeasurable [PseudoMetrizableSpace β] [OpensMeasurableSpace β]\n    [SecondCountableTopology β] (hf : AEMeasurable f μ) : AEStronglyMeasurable f μ :=\n  ⟨hf.mk f, hf.measurable_mk.stronglyMeasurable, hf.ae_eq_mk⟩\n\n"}
{"name":"aestronglyMeasurable_id","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_5\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace.PseudoMetrizableSpace α\nx✝ : MeasurableSpace α\ninst✝¹ : OpensMeasurableSpace α\ninst✝ : SecondCountableTopology α\nμ : MeasureTheory.Measure α\n⊢ MeasureTheory.AEStronglyMeasurable id μ","decl":"@[measurability]\ntheorem _root_.aestronglyMeasurable_id {α : Type*} [TopologicalSpace α] [PseudoMetrizableSpace α]\n    {_ : MeasurableSpace α} [OpensMeasurableSpace α] [SecondCountableTopology α] {μ : Measure α} :\n    AEStronglyMeasurable (id : α → α) μ :=\n  aemeasurable_id.aestronglyMeasurable\n\n"}
{"name":"aestronglyMeasurable_iff_aemeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : BorelSpace β\ninst✝ : SecondCountableTopology β\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f μ) (AEMeasurable f μ)","decl":"/-- In a space with second countable topology, strongly measurable and measurable are equivalent. -/\ntheorem _root_.aestronglyMeasurable_iff_aemeasurable [PseudoMetrizableSpace β] [BorelSpace β]\n    [SecondCountableTopology β] : AEStronglyMeasurable f μ ↔ AEMeasurable f μ :=\n  ⟨fun h => h.aemeasurable, fun h => h.aestronglyMeasurable⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.dist","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝ : PseudoMetricSpace β\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => Dist.dist (f x) (g x)) μ","decl":"@[aesop safe 20 apply (rule_sets := [Measurable])]\nprotected theorem dist {β : Type*} [PseudoMetricSpace β] {f g : α → β}\n    (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    AEStronglyMeasurable (fun x => dist (f x) (g x)) μ :=\n  continuous_dist.comp_aestronglyMeasurable (hf.prod_mk hg)\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.norm","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝ : SeminormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => Norm.norm (f x)) μ","decl":"@[measurability]\nprotected theorem norm {β : Type*} [SeminormedAddCommGroup β] {f : α → β}\n    (hf : AEStronglyMeasurable f μ) : AEStronglyMeasurable (fun x => ‖f x‖) μ :=\n  continuous_norm.comp_aestronglyMeasurable hf\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.nnnorm","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝ : SeminormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => NNNorm.nnnorm (f x)) μ","decl":"@[measurability]\nprotected theorem nnnorm {β : Type*} [SeminormedAddCommGroup β] {f : α → β}\n    (hf : AEStronglyMeasurable f μ) : AEStronglyMeasurable (fun x => ‖f x‖₊) μ :=\n  continuous_nnnorm.comp_aestronglyMeasurable hf\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.enorm","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝ : SeminormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ AEMeasurable (fun x => ENorm.enorm (f x)) μ","decl":"@[measurability]\nprotected theorem enorm {β : Type*} [SeminormedAddCommGroup β] {f : α → β}\n    (hf : AEStronglyMeasurable f μ) : AEMeasurable (‖f ·‖ₑ) μ :=\n  (ENNReal.continuous_coe.comp_aestronglyMeasurable hf.nnnorm).aemeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.ennnorm","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝ : SeminormedAddCommGroup β\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ AEMeasurable (fun x => ENorm.enorm (f x)) μ","decl":"@[deprecated (since := \"2025-01-20\")] alias ennnorm := AEStronglyMeasurable.enorm\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.edist","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝ : SeminormedAddCommGroup β\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ AEMeasurable (fun a => EDist.edist (f a) (g a)) μ","decl":"@[aesop safe 20 apply (rule_sets := [Measurable])]\nprotected theorem edist {β : Type*} [SeminormedAddCommGroup β] {f g : α → β}\n    (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    AEMeasurable (fun a => edist (f a) (g a)) μ :=\n  (continuous_edist.comp_aestronglyMeasurable (hf.prod_mk hg)).aemeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.real_toNNReal","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (fun x => (f x).toNNReal) μ","decl":"@[measurability]\nprotected theorem real_toNNReal {f : α → ℝ} (hf : AEStronglyMeasurable f μ) :\n    AEStronglyMeasurable (fun x => (f x).toNNReal) μ :=\n  continuous_real_toNNReal.comp_aestronglyMeasurable hf\n\n"}
{"name":"aestronglyMeasurable_indicator_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : Zero β\ns : Set α\nhs : MeasurableSet s\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (s.indicator f) μ) (MeasureTheory.AEStronglyMeasurable f (μ.restrict s))","decl":"theorem _root_.aestronglyMeasurable_indicator_iff [Zero β] {s : Set α} (hs : MeasurableSet s) :\n    AEStronglyMeasurable (indicator s f) μ ↔ AEStronglyMeasurable f (μ.restrict s) := by\n  constructor\n  · intro h\n    exact (h.mono_measure Measure.restrict_le_self).congr (indicator_ae_eq_restrict hs)\n  · intro h\n    refine ⟨indicator s (h.mk f), h.stronglyMeasurable_mk.indicator hs, ?_⟩\n    have A : s.indicator f =ᵐ[μ.restrict s] s.indicator (h.mk f) :=\n      (indicator_ae_eq_restrict hs).trans (h.ae_eq_mk.trans <| (indicator_ae_eq_restrict hs).symm)\n    have B : s.indicator f =ᵐ[μ.restrict sᶜ] s.indicator (h.mk f) :=\n      (indicator_ae_eq_restrict_compl hs).trans (indicator_ae_eq_restrict_compl hs).symm\n    exact ae_of_ae_restrict_of_ae_restrict_compl _ A B\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.indicator","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : Zero β\nhfm : MeasureTheory.AEStronglyMeasurable f μ\ns : Set α\nhs : MeasurableSet s\n⊢ MeasureTheory.AEStronglyMeasurable (s.indicator f) μ","decl":"@[measurability]\nprotected theorem indicator [Zero β] (hfm : AEStronglyMeasurable f μ) {s : Set α}\n    (hs : MeasurableSet s) : AEStronglyMeasurable (s.indicator f) μ :=\n  (aestronglyMeasurable_indicator_iff hs).mpr hfm.restrict\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.nullMeasurableSet_eq_fun","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_5\ninst✝¹ : TopologicalSpace E\ninst✝ : TopologicalSpace.MetrizableSpace E\nf g : α → E\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.NullMeasurableSet (setOf fun x => Eq (f x) (g x)) μ","decl":"theorem nullMeasurableSet_eq_fun {E} [TopologicalSpace E] [MetrizableSpace E] {f g : α → E}\n    (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    NullMeasurableSet { x | f x = g x } μ := by\n  apply\n    (hf.stronglyMeasurable_mk.measurableSet_eq_fun\n          hg.stronglyMeasurable_mk).nullMeasurableSet.congr\n  filter_upwards [hf.ae_eq_mk, hg.ae_eq_mk] with x hfx hgx\n  change (hf.mk f x = hg.mk g x) = (f x = g x)\n  simp only [hfx, hgx]\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.nullMeasurableSet_mulSupport","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_5\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace.MetrizableSpace E\ninst✝ : One E\nf : α → E\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.NullMeasurableSet (Function.mulSupport f) μ","decl":"@[to_additive]\nlemma nullMeasurableSet_mulSupport {E} [TopologicalSpace E] [MetrizableSpace E] [One E] {f : α → E}\n    (hf : AEStronglyMeasurable f μ) : NullMeasurableSet (mulSupport f) μ :=\n  (hf.nullMeasurableSet_eq_fun stronglyMeasurable_const.aestronglyMeasurable).compl\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.nullMeasurableSet_support","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_5\ninst✝² : TopologicalSpace E\ninst✝¹ : TopologicalSpace.MetrizableSpace E\ninst✝ : Zero E\nf : α → E\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ MeasureTheory.NullMeasurableSet (Function.support f) μ","decl":"@[to_additive]\nlemma nullMeasurableSet_mulSupport {E} [TopologicalSpace E] [MetrizableSpace E] [One E] {f : α → E}\n    (hf : AEStronglyMeasurable f μ) : NullMeasurableSet (mulSupport f) μ :=\n  (hf.nullMeasurableSet_eq_fun stronglyMeasurable_const.aestronglyMeasurable).compl\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.nullMeasurableSet_lt","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : LinearOrder β\ninst✝¹ : OrderClosedTopology β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.NullMeasurableSet (setOf fun a => LT.lt (f a) (g a)) μ","decl":"theorem nullMeasurableSet_lt [LinearOrder β] [OrderClosedTopology β] [PseudoMetrizableSpace β]\n    {f g : α → β} (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    NullMeasurableSet { a | f a < g a } μ := by\n  apply\n    (hf.stronglyMeasurable_mk.measurableSet_lt hg.stronglyMeasurable_mk).nullMeasurableSet.congr\n  filter_upwards [hf.ae_eq_mk, hg.ae_eq_mk] with x hfx hgx\n  change (hf.mk f x < hg.mk g x) = (f x < g x)\n  simp only [hfx, hgx]\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.nullMeasurableSet_le","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : Preorder β\ninst✝¹ : OrderClosedTopology β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf g : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\n⊢ MeasureTheory.NullMeasurableSet (setOf fun a => LE.le (f a) (g a)) μ","decl":"theorem nullMeasurableSet_le [Preorder β] [OrderClosedTopology β] [PseudoMetrizableSpace β]\n    {f g : α → β} (hf : AEStronglyMeasurable f μ) (hg : AEStronglyMeasurable g μ) :\n    NullMeasurableSet { a | f a ≤ g a } μ := by\n  apply\n    (hf.stronglyMeasurable_mk.measurableSet_le hg.stronglyMeasurable_mk).nullMeasurableSet.congr\n  filter_upwards [hf.ae_eq_mk, hg.ae_eq_mk] with x hfx hgx\n  change (hf.mk f x ≤ hg.mk g x) = (f x ≤ g x)\n  simp only [hfx, hgx]\n\n"}
{"name":"aestronglyMeasurable_of_aestronglyMeasurable_trim","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"β : Type u_2\ninst✝ : TopologicalSpace β\nα : Type u_5\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nhm : LE.le m m0\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f (μ.trim hm)\n⊢ MeasureTheory.AEStronglyMeasurable f μ","decl":"theorem _root_.aestronglyMeasurable_of_aestronglyMeasurable_trim {α} {m m0 : MeasurableSpace α}\n    {μ : Measure α} (hm : m ≤ m0) {f : α → β} (hf : AEStronglyMeasurable[m] f (μ.trim hm)) :\n    AEStronglyMeasurable f μ :=\n  ⟨hf.mk f, StronglyMeasurable.mono hf.stronglyMeasurable_mk hm, ae_eq_of_ae_eq_trim hf.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.comp_aemeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\ng : α → β\nγ : Type u_5\nx✝¹ : MeasurableSpace γ\nx✝ : MeasurableSpace α\nf : γ → α\nμ : MeasureTheory.Measure γ\nhg : MeasureTheory.AEStronglyMeasurable g (MeasureTheory.Measure.map f μ)\nhf : AEMeasurable f μ\n⊢ MeasureTheory.AEStronglyMeasurable (Function.comp g f) μ","decl":"theorem comp_aemeasurable {γ : Type*} {_ : MeasurableSpace γ} {_ : MeasurableSpace α} {f : γ → α}\n    {μ : Measure γ} (hg : AEStronglyMeasurable g (Measure.map f μ)) (hf : AEMeasurable f μ) :\n    AEStronglyMeasurable (g ∘ f) μ :=\n  ⟨hg.mk g ∘ hf.mk f, hg.stronglyMeasurable_mk.comp_measurable hf.measurable_mk,\n    (ae_eq_comp hf hg.ae_eq_mk).trans (hf.ae_eq_mk.fun_comp (hg.mk g))⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.comp_measurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\ng : α → β\nγ : Type u_5\nx✝¹ : MeasurableSpace γ\nx✝ : MeasurableSpace α\nf : γ → α\nμ : MeasureTheory.Measure γ\nhg : MeasureTheory.AEStronglyMeasurable g (MeasureTheory.Measure.map f μ)\nhf : Measurable f\n⊢ MeasureTheory.AEStronglyMeasurable (Function.comp g f) μ","decl":"theorem comp_measurable {γ : Type*} {_ : MeasurableSpace γ} {_ : MeasurableSpace α} {f : γ → α}\n    {μ : Measure γ} (hg : AEStronglyMeasurable g (Measure.map f μ)) (hf : Measurable f) :\n    AEStronglyMeasurable (g ∘ f) μ :=\n  hg.comp_aemeasurable hf.aemeasurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.comp_quasiMeasurePreserving","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\ng : α → β\nγ : Type u_5\nx✝¹ : MeasurableSpace γ\nx✝ : MeasurableSpace α\nf : γ → α\nμ : MeasureTheory.Measure γ\nν : MeasureTheory.Measure α\nhg : MeasureTheory.AEStronglyMeasurable g ν\nhf : MeasureTheory.Measure.QuasiMeasurePreserving f μ ν\n⊢ MeasureTheory.AEStronglyMeasurable (Function.comp g f) μ","decl":"theorem comp_quasiMeasurePreserving {γ : Type*} {_ : MeasurableSpace γ} {_ : MeasurableSpace α}\n    {f : γ → α} {μ : Measure γ} {ν : Measure α} (hg : AEStronglyMeasurable g ν)\n    (hf : QuasiMeasurePreserving f μ ν) : AEStronglyMeasurable (g ∘ f) μ :=\n  (hg.mono_ac hf.absolutelyContinuous).comp_measurable hf.measurable\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.isSeparable_ae_range","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Exists fun t => And (TopologicalSpace.IsSeparable t) (Filter.Eventually (fun x => Membership.mem t (f x)) (MeasureTheory.ae μ))","decl":"theorem isSeparable_ae_range (hf : AEStronglyMeasurable f μ) :\n    ∃ t : Set β, IsSeparable t ∧ ∀ᵐ x ∂μ, f x ∈ t := by\n  refine ⟨range (hf.mk f), hf.stronglyMeasurable_mk.isSeparable_range, ?_⟩\n  filter_upwards [hf.ae_eq_mk] with x hx\n  simp [hx]\n\n"}
{"name":"aestronglyMeasurable_iff_aemeasurable_separable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f μ) (And (AEMeasurable f μ) (Exists fun t => And (TopologicalSpace.IsSeparable t) (Filter.Eventually (fun x => Membership.mem t (f x)) (MeasureTheory.ae μ))))","decl":"/-- A function is almost everywhere strongly measurable if and only if it is almost everywhere\nmeasurable, and up to a zero measure set its range is contained in a separable set. -/\ntheorem _root_.aestronglyMeasurable_iff_aemeasurable_separable [PseudoMetrizableSpace β]\n    [MeasurableSpace β] [BorelSpace β] :\n    AEStronglyMeasurable f μ ↔\n      AEMeasurable f μ ∧ ∃ t : Set β, IsSeparable t ∧ ∀ᵐ x ∂μ, f x ∈ t := by\n  refine ⟨fun H => ⟨H.aemeasurable, H.isSeparable_ae_range⟩, ?_⟩\n  rintro ⟨H, ⟨t, t_sep, ht⟩⟩\n  rcases eq_empty_or_nonempty t with (rfl | h₀)\n  · simp only [mem_empty_iff_false, eventually_false_iff_eq_bot, ae_eq_bot] at ht\n    rw [ht]\n    exact aestronglyMeasurable_zero_measure f\n  · obtain ⟨g, g_meas, gt, fg⟩ : ∃ g : α → β, Measurable g ∧ range g ⊆ t ∧ f =ᵐ[μ] g :=\n      H.exists_ae_eq_range_subset ht h₀\n    refine ⟨g, ?_, fg⟩\n    exact stronglyMeasurable_iff_measurable_separable.2 ⟨g_meas, t_sep.mono gt⟩\n\n"}
{"name":"aestronglyMeasurable_iff_nullMeasurable_separable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f μ) (And (MeasureTheory.NullMeasurable f μ) (Exists fun t => And (TopologicalSpace.IsSeparable t) (Filter.Eventually (fun x => Membership.mem t (f x)) (MeasureTheory.ae μ))))","decl":"theorem _root_.aestronglyMeasurable_iff_nullMeasurable_separable [PseudoMetrizableSpace β]\n    [MeasurableSpace β] [BorelSpace β] :\n    AEStronglyMeasurable f μ ↔\n      NullMeasurable f μ ∧ ∃ t : Set β, IsSeparable t ∧ ∀ᵐ x ∂μ, f x ∈ t :=\n  aestronglyMeasurable_iff_aemeasurable_separable.trans <| and_congr_left fun ⟨_, hsep, h⟩ ↦\n    have := hsep.secondCountableTopology\n    ⟨AEMeasurable.nullMeasurable, fun hf ↦ hf.aemeasurable_of_aerange h⟩\n\n"}
{"name":"MeasurableEmbedding.aestronglyMeasurable_map_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : TopologicalSpace β\nγ : Type u_5\nmγ : MeasurableSpace γ\nmα : MeasurableSpace α\nf : γ → α\nμ : MeasureTheory.Measure γ\nhf : MeasurableEmbedding f\ng : α → β\n⊢ Iff (MeasureTheory.AEStronglyMeasurable g (MeasureTheory.Measure.map f μ)) (MeasureTheory.AEStronglyMeasurable (Function.comp g f) μ)","decl":"theorem _root_.MeasurableEmbedding.aestronglyMeasurable_map_iff {γ : Type*}\n    {mγ : MeasurableSpace γ} {mα : MeasurableSpace α} {f : γ → α} {μ : Measure γ}\n    (hf : MeasurableEmbedding f) {g : α → β} :\n    AEStronglyMeasurable g (Measure.map f μ) ↔ AEStronglyMeasurable (g ∘ f) μ := by\n  refine ⟨fun H => H.comp_measurable hf.measurable, ?_⟩\n  rintro ⟨g₁, hgm₁, heq⟩\n  rcases hf.exists_stronglyMeasurable_extend hgm₁ fun x => ⟨g x⟩ with ⟨g₂, hgm₂, rfl⟩\n  exact ⟨g₂, hgm₂, hf.ae_map_iff.2 heq⟩\n\n"}
{"name":"Topology.IsEmbedding.aestronglyMeasurable_comp_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace γ\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace γ\ng : β → γ\nf : α → β\nhg : Topology.IsEmbedding g\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (fun x => g (f x)) μ) (MeasureTheory.AEStronglyMeasurable f μ)","decl":"theorem _root_.Topology.IsEmbedding.aestronglyMeasurable_comp_iff [PseudoMetrizableSpace β]\n    [PseudoMetrizableSpace γ] {g : β → γ} {f : α → β} (hg : IsEmbedding g) :\n    AEStronglyMeasurable (fun x => g (f x)) μ ↔ AEStronglyMeasurable f μ := by\n  letI := pseudoMetrizableSpacePseudoMetric γ\n  borelize β γ\n  refine\n    ⟨fun H => aestronglyMeasurable_iff_aemeasurable_separable.2 ⟨?_, ?_⟩, fun H =>\n      hg.continuous.comp_aestronglyMeasurable H⟩\n  · let G : β → range g := rangeFactorization g\n    have hG : IsClosedEmbedding G :=\n      { hg.codRestrict _ _ with\n        isClosed_range := by rw [surjective_onto_range.range_eq]; exact isClosed_univ }\n    have : AEMeasurable (G ∘ f) μ := AEMeasurable.subtype_mk H.aemeasurable\n    exact hG.measurableEmbedding.aemeasurable_comp_iff.1 this\n  · rcases (aestronglyMeasurable_iff_aemeasurable_separable.1 H).2 with ⟨t, ht, h't⟩\n    exact ⟨g ⁻¹' t, hg.isSeparable_preimage ht, h't⟩\n\n"}
{"name":"Embedding.aestronglyMeasurable_comp_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace γ\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace γ\ng : β → γ\nf : α → β\nhg : Topology.IsEmbedding g\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (fun x => g (f x)) μ) (MeasureTheory.AEStronglyMeasurable f μ)","decl":"@[deprecated (since := \"2024-10-26\")]\nalias _root_.Embedding.aestronglyMeasurable_comp_iff := IsEmbedding.aestronglyMeasurable_comp_iff\n\n"}
{"name":"aestronglyMeasurable_of_tendsto_ae","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nι : Type u_5\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\nu : Filter ι\ninst✝¹ : u.NeBot\ninst✝ : u.IsCountablyGenerated\nf : ι → α → β\ng : α → β\nhf : ∀ (i : ι), MeasureTheory.AEStronglyMeasurable (f i) μ\nlim : Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) u (nhds (g x))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.AEStronglyMeasurable g μ","decl":"/-- An almost everywhere sequential limit of almost everywhere strongly measurable functions is\nalmost everywhere strongly measurable. -/\ntheorem _root_.aestronglyMeasurable_of_tendsto_ae {ι : Type*} [PseudoMetrizableSpace β]\n    (u : Filter ι) [NeBot u] [IsCountablyGenerated u] {f : ι → α → β} {g : α → β}\n    (hf : ∀ i, AEStronglyMeasurable (f i) μ) (lim : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) u (𝓝 (g x))) :\n    AEStronglyMeasurable g μ := by\n  borelize β\n  refine aestronglyMeasurable_iff_aemeasurable_separable.2 ⟨?_, ?_⟩\n  · exact aemeasurable_of_tendsto_metrizable_ae _ (fun n => (hf n).aemeasurable) lim\n  · rcases u.exists_seq_tendsto with ⟨v, hv⟩\n    have : ∀ n : ℕ, ∃ t : Set β, IsSeparable t ∧ f (v n) ⁻¹' t ∈ ae μ := fun n =>\n      (aestronglyMeasurable_iff_aemeasurable_separable.1 (hf (v n))).2\n    choose t t_sep ht using this\n    refine ⟨closure (⋃ i, t i), .closure <| .iUnion t_sep, ?_⟩\n    filter_upwards [ae_all_iff.2 ht, lim] with x hx h'x\n    apply mem_closure_of_tendsto (h'x.comp hv)\n    filter_upwards with n using mem_iUnion_of_mem n (hx n)\n\n"}
{"name":"exists_stronglyMeasurable_limit_of_tendsto_ae","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf : Nat → α → β\nhf : ∀ (n : Nat), MeasureTheory.AEStronglyMeasurable (f n) μ\nh_ae_tendsto : Filter.Eventually (fun x => Exists fun l => Filter.Tendsto (fun n => f n x) Filter.atTop (nhds l)) (MeasureTheory.ae μ)\n⊢ Exists fun f_lim => And (MeasureTheory.StronglyMeasurable f_lim) (Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (f_lim x))) (MeasureTheory.ae μ))","decl":"/-- If a sequence of almost everywhere strongly measurable functions converges almost everywhere,\none can select a strongly measurable function as the almost everywhere limit. -/\ntheorem _root_.exists_stronglyMeasurable_limit_of_tendsto_ae [PseudoMetrizableSpace β]\n    {f : ℕ → α → β} (hf : ∀ n, AEStronglyMeasurable (f n) μ)\n    (h_ae_tendsto : ∀ᵐ x ∂μ, ∃ l : β, Tendsto (fun n => f n x) atTop (𝓝 l)) :\n    ∃ f_lim : α → β, StronglyMeasurable f_lim ∧\n      ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (f_lim x)) := by\n  borelize β\n  obtain ⟨g, _, hg⟩ :\n    ∃ g : α → β, Measurable g ∧ ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (g x)) :=\n    measurable_limit_of_tendsto_metrizable_ae (fun n => (hf n).aemeasurable) h_ae_tendsto\n  have Hg : AEStronglyMeasurable g μ := aestronglyMeasurable_of_tendsto_ae _ hf hg\n  refine ⟨Hg.mk g, Hg.stronglyMeasurable_mk, ?_⟩\n  filter_upwards [hg, Hg.ae_eq_mk] with x hx h'x\n  rwa [h'x] at hx\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.piecewise","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → β\ns : Set α\ninst✝ : DecidablePred fun x => Membership.mem s x\nhs : MeasurableSet s\nhf : MeasureTheory.AEStronglyMeasurable f (μ.restrict s)\nhg : MeasureTheory.AEStronglyMeasurable g (μ.restrict (HasCompl.compl s))\n⊢ MeasureTheory.AEStronglyMeasurable (s.piecewise f g) μ","decl":"theorem piecewise {s : Set α} [DecidablePred (· ∈ s)]\n    (hs : MeasurableSet s) (hf : AEStronglyMeasurable f (μ.restrict s))\n    (hg : AEStronglyMeasurable g (μ.restrict sᶜ)) :\n    AEStronglyMeasurable (s.piecewise f g) μ := by\n  refine ⟨s.piecewise (hf.mk f) (hg.mk g),\n    StronglyMeasurable.piecewise hs hf.stronglyMeasurable_mk hg.stronglyMeasurable_mk, ?_⟩\n  refine ae_of_ae_restrict_of_ae_restrict_compl s ?_ ?_\n  · have h := hf.ae_eq_mk\n    rw [Filter.EventuallyEq, ae_restrict_iff' hs] at h\n    rw [ae_restrict_iff' hs]\n    filter_upwards [h] with x hx\n    intro hx_mem\n    simp only [hx_mem, Set.piecewise_eq_of_mem, hx hx_mem]\n  · have h := hg.ae_eq_mk\n    rw [Filter.EventuallyEq, ae_restrict_iff' hs.compl] at h\n    rw [ae_restrict_iff' hs.compl]\n    filter_upwards [h] with x hx\n    intro hx_mem\n    rw [Set.mem_compl_iff] at hx_mem\n    simp only [hx_mem, not_false_eq_true, Set.piecewise_eq_of_not_mem, hx hx_mem]\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.sum_measure","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nι : Type u_4\ninst✝² : Countable ι\ninst✝¹ : TopologicalSpace β\nf : α → β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nm : MeasurableSpace α\nμ : ι → MeasureTheory.Measure α\nh : ∀ (i : ι), MeasureTheory.AEStronglyMeasurable f (μ i)\n⊢ MeasureTheory.AEStronglyMeasurable f (MeasureTheory.Measure.sum μ)","decl":"theorem sum_measure [PseudoMetrizableSpace β] {m : MeasurableSpace α} {μ : ι → Measure α}\n    (h : ∀ i, AEStronglyMeasurable f (μ i)) : AEStronglyMeasurable f (Measure.sum μ) := by\n  borelize β\n  refine\n    aestronglyMeasurable_iff_aemeasurable_separable.2\n      ⟨AEMeasurable.sum_measure fun i => (h i).aemeasurable, ?_⟩\n  have A : ∀ i : ι, ∃ t : Set β, IsSeparable t ∧ f ⁻¹' t ∈ ae (μ i) := fun i =>\n    (aestronglyMeasurable_iff_aemeasurable_separable.1 (h i)).2\n  choose t t_sep ht using A\n  refine ⟨⋃ i, t i, .iUnion t_sep, ?_⟩\n  simp only [Measure.ae_sum_eq, mem_iUnion, eventually_iSup]\n  intro i\n  filter_upwards [ht i] with x hx\n  exact ⟨i, hx⟩\n\n"}
{"name":"aestronglyMeasurable_sum_measure_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nι : Type u_4\ninst✝² : Countable ι\ninst✝¹ : TopologicalSpace β\nf : α → β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\n_m : MeasurableSpace α\nμ : ι → MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f (MeasureTheory.Measure.sum μ)) (∀ (i : ι), MeasureTheory.AEStronglyMeasurable f (μ i))","decl":"@[simp]\ntheorem _root_.aestronglyMeasurable_sum_measure_iff [PseudoMetrizableSpace β]\n    {_m : MeasurableSpace α} {μ : ι → Measure α} :\n    AEStronglyMeasurable f (sum μ) ↔ ∀ i, AEStronglyMeasurable f (μ i) :=\n  ⟨fun h _ => h.mono_measure (Measure.le_sum _ _), sum_measure⟩\n\n"}
{"name":"aestronglyMeasurable_add_measure_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nν : MeasureTheory.Measure α\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f (HAdd.hAdd μ ν)) (And (MeasureTheory.AEStronglyMeasurable f μ) (MeasureTheory.AEStronglyMeasurable f ν))","decl":"@[simp]\ntheorem _root_.aestronglyMeasurable_add_measure_iff [PseudoMetrizableSpace β] {ν : Measure α} :\n    AEStronglyMeasurable f (μ + ν) ↔ AEStronglyMeasurable f μ ∧ AEStronglyMeasurable f ν := by\n  rw [← sum_cond, aestronglyMeasurable_sum_measure_iff, Bool.forall_bool, and_comm]\n  rfl\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.add_measure","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nν : MeasureTheory.Measure α\nf : α → β\nhμ : MeasureTheory.AEStronglyMeasurable f μ\nhν : MeasureTheory.AEStronglyMeasurable f ν\n⊢ MeasureTheory.AEStronglyMeasurable f (HAdd.hAdd μ ν)","decl":"@[measurability]\ntheorem add_measure [PseudoMetrizableSpace β] {ν : Measure α} {f : α → β}\n    (hμ : AEStronglyMeasurable f μ) (hν : AEStronglyMeasurable f ν) :\n    AEStronglyMeasurable f (μ + ν) :=\n  aestronglyMeasurable_add_measure_iff.2 ⟨hμ, hν⟩\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.iUnion","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nι : Type u_4\ninst✝² : Countable ι\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\ns : ι → Set α\nh : ∀ (i : ι), MeasureTheory.AEStronglyMeasurable f (μ.restrict (s i))\n⊢ MeasureTheory.AEStronglyMeasurable f (μ.restrict (Set.iUnion fun i => s i))","decl":"@[measurability]\nprotected theorem iUnion [PseudoMetrizableSpace β] {s : ι → Set α}\n    (h : ∀ i, AEStronglyMeasurable f (μ.restrict (s i))) :\n    AEStronglyMeasurable f (μ.restrict (⋃ i, s i)) :=\n  (sum_measure h).mono_measure <| restrict_iUnion_le\n\n"}
{"name":"aestronglyMeasurable_iUnion_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nι : Type u_4\ninst✝² : Countable ι\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\ns : ι → Set α\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f (μ.restrict (Set.iUnion fun i => s i))) (∀ (i : ι), MeasureTheory.AEStronglyMeasurable f (μ.restrict (s i)))","decl":"@[simp]\ntheorem _root_.aestronglyMeasurable_iUnion_iff [PseudoMetrizableSpace β] {s : ι → Set α} :\n    AEStronglyMeasurable f (μ.restrict (⋃ i, s i)) ↔\n      ∀ i, AEStronglyMeasurable f (μ.restrict (s i)) :=\n  ⟨fun h _ => h.mono_measure <| restrict_mono (subset_iUnion _ _) le_rfl,\n    AEStronglyMeasurable.iUnion⟩\n\n"}
{"name":"aestronglyMeasurable_union_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\ns t : Set α\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f (μ.restrict (Union.union s t))) (And (MeasureTheory.AEStronglyMeasurable f (μ.restrict s)) (MeasureTheory.AEStronglyMeasurable f (μ.restrict t)))","decl":"@[simp]\ntheorem _root_.aestronglyMeasurable_union_iff [PseudoMetrizableSpace β] {s t : Set α} :\n    AEStronglyMeasurable f (μ.restrict (s ∪ t)) ↔\n      AEStronglyMeasurable f (μ.restrict s) ∧ AEStronglyMeasurable f (μ.restrict t) := by\n  simp only [union_eq_iUnion, aestronglyMeasurable_iUnion_iff, Bool.forall_bool, cond, and_comm]\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.aestronglyMeasurable_uIoc_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : LinearOrder α\ninst✝ : TopologicalSpace.PseudoMetrizableSpace β\nf : α → β\na b : α\n⊢ Iff (MeasureTheory.AEStronglyMeasurable f (μ.restrict (Set.uIoc a b))) (And (MeasureTheory.AEStronglyMeasurable f (μ.restrict (Set.Ioc a b))) (MeasureTheory.AEStronglyMeasurable f (μ.restrict (Set.Ioc b a))))","decl":"theorem aestronglyMeasurable_uIoc_iff [LinearOrder α] [PseudoMetrizableSpace β] {f : α → β}\n    {a b : α} :\n    AEStronglyMeasurable f (μ.restrict <| uIoc a b) ↔\n      AEStronglyMeasurable f (μ.restrict <| Ioc a b) ∧\n        AEStronglyMeasurable f (μ.restrict <| Ioc b a) := by\n  rw [uIoc_eq_union, aestronglyMeasurable_union_iff]\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.smul_measure","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nR : Type u_5\ninst✝² : Monoid R\ninst✝¹ : DistribMulAction R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nh : MeasureTheory.AEStronglyMeasurable f μ\nc : R\n⊢ MeasureTheory.AEStronglyMeasurable f (HSMul.hSMul c μ)","decl":"@[measurability]\ntheorem smul_measure {R : Type*} [Monoid R] [DistribMulAction R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞]\n    (h : AEStronglyMeasurable f μ) (c : R) : AEStronglyMeasurable f (c • μ) :=\n  ⟨h.mk f, h.stronglyMeasurable_mk, ae_smul_measure h.ae_eq_mk c⟩\n\n"}
{"name":"aestronglyMeasurable_const_smul_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nG : Type u_6\ninst✝² : Group G\ninst✝¹ : MulAction G β\ninst✝ : ContinuousConstSMul G β\nc : G\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul c (f x)) μ) (MeasureTheory.AEStronglyMeasurable f μ)","decl":"theorem _root_.aestronglyMeasurable_const_smul_iff (c : G) :\n    AEStronglyMeasurable (fun x => c • f x) μ ↔ AEStronglyMeasurable f μ :=\n  ⟨fun h => by simpa only [inv_smul_smul] using h.const_smul' c⁻¹, fun h => h.const_smul c⟩\n\n"}
{"name":"IsUnit.aestronglyMeasurable_const_smul_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nM : Type u_5\ninst✝² : Monoid M\ninst✝¹ : MulAction M β\ninst✝ : ContinuousConstSMul M β\nc : M\nhc : IsUnit c\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul c (f x)) μ) (MeasureTheory.AEStronglyMeasurable f μ)","decl":"nonrec theorem _root_.IsUnit.aestronglyMeasurable_const_smul_iff {c : M} (hc : IsUnit c) :\n    AEStronglyMeasurable (fun x => c • f x) μ ↔ AEStronglyMeasurable f μ :=\n  let ⟨u, hu⟩ := hc\n  hu ▸ aestronglyMeasurable_const_smul_iff u\n\n"}
{"name":"aestronglyMeasurable_const_smul_iff₀","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝³ : TopologicalSpace β\nm₀ : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → β\nG₀ : Type u_7\ninst✝² : GroupWithZero G₀\ninst✝¹ : MulAction G₀ β\ninst✝ : ContinuousConstSMul G₀ β\nc : G₀\nhc : Ne c 0\n⊢ Iff (MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul c (f x)) μ) (MeasureTheory.AEStronglyMeasurable f μ)","decl":"theorem _root_.aestronglyMeasurable_const_smul_iff₀ {c : G₀} (hc : c ≠ 0) :\n    AEStronglyMeasurable (fun x => c • f x) μ ↔ AEStronglyMeasurable f μ :=\n  (IsUnit.mk0 _ hc).aestronglyMeasurable_const_smul_iff\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.finStronglyMeasurable_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\nf : α → β\ninst✝ : Zero β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ MeasureTheory.FinStronglyMeasurable (MeasureTheory.AEFinStronglyMeasurable.mk f hf) μ","decl":"theorem finStronglyMeasurable_mk (hf : AEFinStronglyMeasurable f μ) :\n    FinStronglyMeasurable (hf.mk f) μ :=\n  hf.choose_spec.1\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.ae_eq_mk","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : TopologicalSpace β\nf : α → β\ninst✝ : Zero β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq f (MeasureTheory.AEFinStronglyMeasurable.mk f hf)","decl":"theorem ae_eq_mk (hf : AEFinStronglyMeasurable f μ) : f =ᵐ[μ] hf.mk f :=\n  hf.choose_spec.2\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.aemeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nβ : Type u_5\ninst✝⁴ : Zero β\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝ : BorelSpace β\nf : α → β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ AEMeasurable f μ","decl":"@[aesop 10% apply (rule_sets := [Measurable])]\nprotected theorem aemeasurable {β} [Zero β] [MeasurableSpace β] [TopologicalSpace β]\n    [PseudoMetrizableSpace β] [BorelSpace β] {f : α → β} (hf : AEFinStronglyMeasurable f μ) :\n    AEMeasurable f μ :=\n  ⟨hf.mk f, hf.finStronglyMeasurable_mk.measurable, hf.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.mul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf g : α → β\ninst✝¹ : MonoidWithZero β\ninst✝ : ContinuousMul β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhg : MeasureTheory.AEFinStronglyMeasurable g μ\n⊢ MeasureTheory.AEFinStronglyMeasurable (HMul.hMul f g) μ","decl":"@[aesop safe 20 (rule_sets := [Measurable])]\nprotected theorem mul [MonoidWithZero β] [ContinuousMul β] (hf : AEFinStronglyMeasurable f μ)\n    (hg : AEFinStronglyMeasurable g μ) : AEFinStronglyMeasurable (f * g) μ :=\n  ⟨hf.mk f * hg.mk g, hf.finStronglyMeasurable_mk.mul hg.finStronglyMeasurable_mk,\n    hf.ae_eq_mk.mul hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.add","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf g : α → β\ninst✝¹ : AddMonoid β\ninst✝ : ContinuousAdd β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhg : MeasureTheory.AEFinStronglyMeasurable g μ\n⊢ MeasureTheory.AEFinStronglyMeasurable (HAdd.hAdd f g) μ","decl":"@[aesop safe 20 (rule_sets := [Measurable])]\nprotected theorem add [AddMonoid β] [ContinuousAdd β] (hf : AEFinStronglyMeasurable f μ)\n    (hg : AEFinStronglyMeasurable g μ) : AEFinStronglyMeasurable (f + g) μ :=\n  ⟨hf.mk f + hg.mk g, hf.finStronglyMeasurable_mk.add hg.finStronglyMeasurable_mk,\n    hf.ae_eq_mk.add hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.neg","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf : α → β\ninst✝¹ : AddGroup β\ninst✝ : TopologicalAddGroup β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ MeasureTheory.AEFinStronglyMeasurable (Neg.neg f) μ","decl":"@[measurability]\nprotected theorem neg [AddGroup β] [TopologicalAddGroup β] (hf : AEFinStronglyMeasurable f μ) :\n    AEFinStronglyMeasurable (-f) μ :=\n  ⟨-hf.mk f, hf.finStronglyMeasurable_mk.neg, hf.ae_eq_mk.neg⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.sub","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf g : α → β\ninst✝¹ : AddGroup β\ninst✝ : ContinuousSub β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhg : MeasureTheory.AEFinStronglyMeasurable g μ\n⊢ MeasureTheory.AEFinStronglyMeasurable (HSub.hSub f g) μ","decl":"@[measurability]\nprotected theorem sub [AddGroup β] [ContinuousSub β] (hf : AEFinStronglyMeasurable f μ)\n    (hg : AEFinStronglyMeasurable g μ) : AEFinStronglyMeasurable (f - g) μ :=\n  ⟨hf.mk f - hg.mk g, hf.finStronglyMeasurable_mk.sub hg.finStronglyMeasurable_mk,\n    hf.ae_eq_mk.sub hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.const_smul","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : TopologicalSpace β\nf : α → β\n𝕜 : Type u_5\ninst✝⁴ : TopologicalSpace 𝕜\ninst✝³ : AddMonoid β\ninst✝² : Monoid 𝕜\ninst✝¹ : DistribMulAction 𝕜 β\ninst✝ : ContinuousSMul 𝕜 β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nc : 𝕜\n⊢ MeasureTheory.AEFinStronglyMeasurable (HSMul.hSMul c f) μ","decl":"@[measurability]\nprotected theorem const_smul {𝕜} [TopologicalSpace 𝕜] [AddMonoid β] [Monoid 𝕜]\n    [DistribMulAction 𝕜 β] [ContinuousSMul 𝕜 β] (hf : AEFinStronglyMeasurable f μ) (c : 𝕜) :\n    AEFinStronglyMeasurable (c • f) μ :=\n  ⟨c • hf.mk f, hf.finStronglyMeasurable_mk.const_smul c, hf.ae_eq_mk.const_smul c⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.sup","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\nf g : α → β\ninst✝² : Zero β\ninst✝¹ : SemilatticeSup β\ninst✝ : ContinuousSup β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhg : MeasureTheory.AEFinStronglyMeasurable g μ\n⊢ MeasureTheory.AEFinStronglyMeasurable (Max.max f g) μ","decl":"@[aesop safe 20 (rule_sets := [Measurable])]\nprotected theorem sup [SemilatticeSup β] [ContinuousSup β] (hf : AEFinStronglyMeasurable f μ)\n    (hg : AEFinStronglyMeasurable g μ) : AEFinStronglyMeasurable (f ⊔ g) μ :=\n  ⟨hf.mk f ⊔ hg.mk g, hf.finStronglyMeasurable_mk.sup hg.finStronglyMeasurable_mk,\n    hf.ae_eq_mk.sup hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.inf","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\nf g : α → β\ninst✝² : Zero β\ninst✝¹ : SemilatticeInf β\ninst✝ : ContinuousInf β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhg : MeasureTheory.AEFinStronglyMeasurable g μ\n⊢ MeasureTheory.AEFinStronglyMeasurable (Min.min f g) μ","decl":"@[aesop safe 20 (rule_sets := [Measurable])]\nprotected theorem inf [SemilatticeInf β] [ContinuousInf β] (hf : AEFinStronglyMeasurable f μ)\n    (hg : AEFinStronglyMeasurable g μ) : AEFinStronglyMeasurable (f ⊓ g) μ :=\n  ⟨hf.mk f ⊓ hg.mk g, hf.finStronglyMeasurable_mk.inf hg.finStronglyMeasurable_mk,\n    hf.ae_eq_mk.inf hg.ae_eq_mk⟩\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.exists_set_sigmaFinite","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf : α → β\ninst✝¹ : Zero β\ninst✝ : T2Space β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ Exists fun t => And (MeasurableSet t) (And ((MeasureTheory.ae (μ.restrict (HasCompl.compl t))).EventuallyEq f 0) (MeasureTheory.SigmaFinite (μ.restrict t)))","decl":"theorem exists_set_sigmaFinite (hf : AEFinStronglyMeasurable f μ) :\n    ∃ t, MeasurableSet t ∧ f =ᵐ[μ.restrict tᶜ] 0 ∧ SigmaFinite (μ.restrict t) := by\n  rcases hf with ⟨g, hg, hfg⟩\n  obtain ⟨t, ht, hgt_zero, htμ⟩ := hg.exists_set_sigmaFinite\n  refine ⟨t, ht, ?_, htμ⟩\n  refine EventuallyEq.trans (ae_restrict_of_ae hfg) ?_\n  rw [EventuallyEq, ae_restrict_iff' ht.compl]\n  exact Eventually.of_forall hgt_zero\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.measurableSet","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf : α → β\ninst✝¹ : Zero β\ninst✝ : T2Space β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ MeasurableSet hf.sigmaFiniteSet","decl":"protected theorem measurableSet (hf : AEFinStronglyMeasurable f μ) :\n    MeasurableSet hf.sigmaFiniteSet :=\n  hf.exists_set_sigmaFinite.choose_spec.1\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.ae_eq_zero_compl","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf : α → β\ninst✝¹ : Zero β\ninst✝ : T2Space β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ (MeasureTheory.ae (μ.restrict (HasCompl.compl hf.sigmaFiniteSet))).EventuallyEq f 0","decl":"theorem ae_eq_zero_compl (hf : AEFinStronglyMeasurable f μ) :\n    f =ᵐ[μ.restrict hf.sigmaFiniteSetᶜ] 0 :=\n  hf.exists_set_sigmaFinite.choose_spec.2.1\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.sigmaFinite_restrict","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nβ : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : TopologicalSpace β\nf : α → β\ninst✝¹ : Zero β\ninst✝ : T2Space β\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ MeasureTheory.SigmaFinite (μ.restrict hf.sigmaFiniteSet)","decl":"instance sigmaFinite_restrict (hf : AEFinStronglyMeasurable f μ) :\n    SigmaFinite (μ.restrict hf.sigmaFiniteSet) :=\n  hf.exists_set_sigmaFinite.choose_spec.2.2\n\n"}
{"name":"MeasureTheory.aefinStronglyMeasurable_iff_aemeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝⁴ : SeminormedAddCommGroup G\ninst✝³ : MeasurableSpace G\ninst✝² : BorelSpace G\ninst✝¹ : SecondCountableTopology G\nf : α → G\n_m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite μ\n⊢ Iff (MeasureTheory.AEFinStronglyMeasurable f μ) (AEMeasurable f μ)","decl":"/-- In a space with second countable topology and a sigma-finite measure,\n  `AEFinStronglyMeasurable` and `AEMeasurable` are equivalent. -/\ntheorem aefinStronglyMeasurable_iff_aemeasurable {_m0 : MeasurableSpace α} (μ : Measure α)\n    [SigmaFinite μ] : AEFinStronglyMeasurable f μ ↔ AEMeasurable f μ := by\n  simp_rw [AEFinStronglyMeasurable, AEMeasurable, finStronglyMeasurable_iff_measurable]\n\n"}
{"name":"MeasureTheory.aefinStronglyMeasurable_of_aemeasurable","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.AEStronglyMeasurable","initialProofState":"α : Type u_1\nG : Type u_5\ninst✝⁴ : SeminormedAddCommGroup G\ninst✝³ : MeasurableSpace G\ninst✝² : BorelSpace G\ninst✝¹ : SecondCountableTopology G\nf : α → G\n_m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite μ\nhf : AEMeasurable f μ\n⊢ MeasureTheory.AEFinStronglyMeasurable f μ","decl":"/-- In a space with second countable topology and a sigma-finite measure,\n  an `AEMeasurable` function is `AEFinStronglyMeasurable`. -/\n@[aesop 90% apply (rule_sets := [Measurable])]\ntheorem aefinStronglyMeasurable_of_aemeasurable {_m0 : MeasurableSpace α} (μ : Measure α)\n    [SigmaFinite μ] (hf : AEMeasurable f μ) : AEFinStronglyMeasurable f μ :=\n  (aefinStronglyMeasurable_iff_aemeasurable μ).mpr hf\n\n"}
