{"name":"AlgebraicGeometry.germ_injective_of_isIntegral","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝ : AlgebraicGeometry.IsIntegral X\nU : X.Opens\nx : ↑↑X.toPresheafedSpace\nhx : Membership.mem U x\n⊢ Function.Injective ⇑(CategoryTheory.ConcreteCategory.hom (X.presheaf.germ U x hx))","decl":"theorem germ_injective_of_isIntegral [IsIntegral X] {U : X.Opens} (x : X) (hx : x ∈ U) :\n    Function.Injective (X.presheaf.germ U x hx) := by\n  rw [injective_iff_map_eq_zero]\n  intro y hy\n  rw [← (X.presheaf.germ U x hx).hom.map_zero] at hy\n  obtain ⟨W, hW, iU, iV, e⟩ := X.presheaf.germ_eq _ hx hx _ _ hy\n  cases Subsingleton.elim iU iV\n  haveI : Nonempty W := ⟨⟨_, hW⟩⟩\n  exact map_injective_of_isIntegral X iU e\n\n"}
{"name":"AlgebraicGeometry.Scheme.germToFunctionField_injective","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝¹ : AlgebraicGeometry.IsIntegral X\nU : X.Opens\ninst✝ : Nonempty ↑↑(↑U).toPresheafedSpace\n⊢ Function.Injective ⇑(CategoryTheory.ConcreteCategory.hom (X.germToFunctionField U))","decl":"theorem Scheme.germToFunctionField_injective [IsIntegral X] (U : X.Opens) [Nonempty U] :\n    Function.Injective (X.germToFunctionField U) :=\n  germ_injective_of_isIntegral _ _ _\n\n"}
{"name":"AlgebraicGeometry.genericPoint_eq_of_isOpenImmersion","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.IsOpenImmersion f\nhX : IrreducibleSpace ↑↑X.toPresheafedSpace\ninst✝ : IrreducibleSpace ↑↑Y.toPresheafedSpace\n⊢ Eq (f.base (genericPoint ↑↑X.toPresheafedSpace)) (genericPoint ↑↑Y.toPresheafedSpace)","decl":"theorem genericPoint_eq_of_isOpenImmersion {X Y : Scheme} (f : X ⟶ Y) [H : IsOpenImmersion f]\n    [hX : IrreducibleSpace X] [IrreducibleSpace Y] :\n    f.base (genericPoint X) = genericPoint Y := by\n  apply ((genericPoint_spec Y).eq _).symm\n  convert (genericPoint_spec X).image (show Continuous f.base by fun_prop)\n  symm\n  rw [← Set.univ_subset_iff]\n  convert subset_closure_inter_of_isPreirreducible_of_isOpen _ H.base_open.isOpen_range _\n  · rw [Set.univ_inter, Set.image_univ]\n  · apply PreirreducibleSpace.isPreirreducible_univ (X := Y)\n  · exact ⟨_, trivial, Set.mem_range_self hX.2.some⟩\n\n"}
{"name":"AlgebraicGeometry.functionField_isScalarTower","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝¹ : IrreducibleSpace ↑↑X.toPresheafedSpace\nU : X.Opens\nx : Subtype fun x => Membership.mem U x\ninst✝ : Nonempty ↑↑(↑U).toPresheafedSpace\n⊢ IsScalarTower ↑(X.presheaf.obj { unop := U }) ↑(X.presheaf.stalk ↑x) ↑X.functionField","decl":"instance functionField_isScalarTower [IrreducibleSpace X] (U : X.Opens) (x : U)\n    [Nonempty U] : IsScalarTower Γ(X, U) (X.presheaf.stalk x) X.functionField := by\n  apply IsScalarTower.of_algebraMap_eq'\n  simp_rw [RingHom.algebraMap_toAlgebra]\n  change _ = (X.presheaf.germ U x x.2 ≫ _).hom\n  rw [X.presheaf.germ_stalkSpecializes]\n\n"}
{"name":"AlgebraicGeometry.genericPoint_eq_bot_of_affine","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"R : CommRingCat\ninst✝ : IsDomain ↑R\n⊢ Eq (genericPoint ↑↑(AlgebraicGeometry.Spec R).toPresheafedSpace) Bot.bot","decl":"@[simp]\ntheorem genericPoint_eq_bot_of_affine (R : CommRingCat) [IsDomain R] :\n    genericPoint (Spec R) = (⊥ : PrimeSpectrum R) := by\n  apply (genericPoint_spec (Spec R)).eq\n  rw [isGenericPoint_def]\n  rw [← PrimeSpectrum.zeroLocus_vanishingIdeal_eq_closure, PrimeSpectrum.vanishingIdeal_singleton]\n  rw [← PrimeSpectrum.zeroLocus_singleton_zero]\n  rfl\n\n"}
{"name":"AlgebraicGeometry.functionField_isFractionRing_of_affine","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"R : CommRingCat\ninst✝ : IsDomain ↑R\n⊢ IsFractionRing ↑R ↑(AlgebraicGeometry.Spec R).functionField","decl":"instance functionField_isFractionRing_of_affine (R : CommRingCat.{u}) [IsDomain R] :\n    IsFractionRing R (Spec R).functionField := by\n  convert StructureSheaf.IsLocalization.to_stalk R (genericPoint (Spec R))\n  delta IsFractionRing IsLocalization.AtPrime\n  -- Porting note: `congr` does not work for `Iff`\n  apply Eq.to_iff\n  congr 1\n  rw [genericPoint_eq_bot_of_affine]\n  ext\n  exact mem_nonZeroDivisors_iff_ne_zero\n\n"}
{"name":"AlgebraicGeometry.instIsIntegralToSchemeOfNonemptyαTopologicalSpaceCarrierCommRingCat","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝¹ : AlgebraicGeometry.IsIntegral X\nU : X.Opens\ninst✝ : Nonempty ↑↑(↑U).toPresheafedSpace\n⊢ AlgebraicGeometry.IsIntegral ↑U","decl":"instance {X : Scheme} [IsIntegral X] {U : X.Opens} [Nonempty U] :\n    IsIntegral U :=\n  isIntegral_of_isOpenImmersion U.ι\n\n"}
{"name":"AlgebraicGeometry.IsAffineOpen.primeIdealOf_genericPoint","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝ : AlgebraicGeometry.IsIntegral X\nU : X.Opens\nhU : AlgebraicGeometry.IsAffineOpen U\nh : Nonempty ↑↑(↑U).toPresheafedSpace\n⊢ Eq (hU.primeIdealOf ⟨genericPoint ↑↑X.toPresheafedSpace, ⋯⟩) (genericPoint ↑↑(AlgebraicGeometry.Spec (X.presheaf.obj { unop := U })).toPresheafedSpace)","decl":"theorem IsAffineOpen.primeIdealOf_genericPoint {X : Scheme} [IsIntegral X] {U : X.Opens}\n    (hU : IsAffineOpen U) [h : Nonempty U] :\n    hU.primeIdealOf\n        ⟨genericPoint X,\n          ((genericPoint_spec X).mem_open_set_iff U.isOpen).mpr (by simpa using h)⟩ =\n      genericPoint (Spec Γ(X, U)) := by\n  haveI : IsAffine _ := hU\n  delta IsAffineOpen.primeIdealOf\n  convert\n    genericPoint_eq_of_isOpenImmersion\n      (U.toScheme.isoSpec.hom ≫ Spec.map (X.presheaf.map (eqToHom U.isOpenEmbedding_obj_top).op))\n  -- Porting note: this was `ext1`\n  apply Subtype.ext\n  exact (genericPoint_eq_of_isOpenImmersion U.ι).symm\n\n"}
{"name":"AlgebraicGeometry.functionField_isFractionRing_of_isAffineOpen","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝¹ : AlgebraicGeometry.IsIntegral X\nU : X.Opens\nhU : AlgebraicGeometry.IsAffineOpen U\ninst✝ : Nonempty ↑↑(↑U).toPresheafedSpace\n⊢ IsFractionRing ↑(X.presheaf.obj { unop := U }) ↑X.functionField","decl":"theorem functionField_isFractionRing_of_isAffineOpen [IsIntegral X] (U : X.Opens)\n    (hU : IsAffineOpen U) [Nonempty U] :\n    IsFractionRing Γ(X, U) X.functionField := by\n  haveI : IsAffine _ := hU\n  haveI : IsIntegral U :=\n    @isIntegral_of_isAffine_of_isDomain _ _ _\n      (by rw [Scheme.Opens.toScheme_presheaf_obj, Opens.isOpenEmbedding_obj_top]; infer_instance)\n  delta IsFractionRing Scheme.functionField\n  convert hU.isLocalization_stalk ⟨genericPoint X,\n    (((genericPoint_spec X).mem_open_set_iff U.isOpen).mpr (by simpa using ‹Nonempty U›))⟩ using 1\n  rw [hU.primeIdealOf_genericPoint, genericPoint_eq_bot_of_affine]\n  ext; exact mem_nonZeroDivisors_iff_ne_zero\n\n"}
{"name":"AlgebraicGeometry.instIsAffineObjIsOpenImmersionAffineCover","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\nx : ↑↑X.toPresheafedSpace\n⊢ AlgebraicGeometry.IsAffine (X.affineCover.obj x)","decl":"instance (x : X) : IsAffine (X.affineCover.obj x) :=\n  AlgebraicGeometry.isAffine_Spec _\n\n"}
{"name":"AlgebraicGeometry.instIsFractionRingCarrierStalkCommRingCatPresheafFunctionField","module":"Mathlib.AlgebraicGeometry.FunctionField","initialProofState":"X : AlgebraicGeometry.Scheme\ninst✝ : AlgebraicGeometry.IsIntegral X\nx : ↑↑X.toPresheafedSpace\n⊢ IsFractionRing ↑(X.presheaf.stalk x) ↑X.functionField","decl":"instance [IsIntegral X] (x : X) :\n    IsFractionRing (X.presheaf.stalk x) X.functionField :=\n  let U : X.Opens := (X.affineCover.map x).opensRange\n  have hU : IsAffineOpen U := isAffineOpen_opensRange (X.affineCover.map x)\n  let x : U := ⟨x, X.affineCover.covers x⟩\n  have : Nonempty U := ⟨x⟩\n  let M := (hU.primeIdealOf x).asIdeal.primeCompl\n  have := hU.isLocalization_stalk x\n  have := functionField_isFractionRing_of_isAffineOpen X U hU\n  -- Porting note: the following two lines were not needed.\n  let _hA := Presheaf.algebra_section_stalk X.presheaf x\n  have := functionField_isScalarTower X U x\n  .isFractionRing_of_isDomain_of_isLocalization M ↑(Presheaf.stalk X.presheaf x)\n    (Scheme.functionField X)\n\n"}
