{"name":"Ideal.IsPrime.ne_top'","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\nself : I.IsPrime\n⊢ Ne I Top.top","decl":"/-- An ideal `P` of a ring `R` is prime if `P ≠ R` and `xy ∈ P → x ∈ P ∨ y ∈ P` -/\nclass IsPrime (I : Ideal α) : Prop where\n  /-- The prime ideal is not the entire ring. -/\n  ne_top' : I ≠ ⊤\n  /-- If a product lies in the prime ideal, then at least one element lies in the prime ideal. -/\n  mem_or_mem' : ∀ {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I\n\n"}
{"name":"Ideal.IsPrime.mem_or_mem'","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\nself : I.IsPrime\nx y : α\na✝ : Membership.mem I (HMul.hMul x y)\n⊢ Or (Membership.mem I x) (Membership.mem I y)","decl":"/-- An ideal `P` of a ring `R` is prime if `P ≠ R` and `xy ∈ P → x ∈ P ∨ y ∈ P` -/\nclass IsPrime (I : Ideal α) : Prop where\n  /-- The prime ideal is not the entire ring. -/\n  ne_top' : I ≠ ⊤\n  /-- If a product lies in the prime ideal, then at least one element lies in the prime ideal. -/\n  mem_or_mem' : ∀ {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I\n\n"}
{"name":"Ideal.isPrime_iff","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\n⊢ Iff I.IsPrime (And (Ne I Top.top) (∀ {x y : α}, Membership.mem I (HMul.hMul x y) → Or (Membership.mem I x) (Membership.mem I y)))","decl":"theorem isPrime_iff {I : Ideal α} : IsPrime I ↔ I ≠ ⊤ ∧ ∀ {x y : α}, x * y ∈ I → x ∈ I ∨ y ∈ I :=\n  ⟨fun h => ⟨h.1, h.2⟩, fun h => ⟨h.1, h.2⟩⟩\n\n"}
{"name":"Ideal.IsPrime.ne_top","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\nhI : I.IsPrime\n⊢ Ne I Top.top","decl":"theorem IsPrime.ne_top {I : Ideal α} (hI : I.IsPrime) : I ≠ ⊤ :=\n  hI.1\n\n"}
{"name":"Ideal.IsPrime.mem_or_mem","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\nhI : I.IsPrime\nx y : α\na✝ : Membership.mem I (HMul.hMul x y)\n⊢ Or (Membership.mem I x) (Membership.mem I y)","decl":"theorem IsPrime.mem_or_mem {I : Ideal α} (hI : I.IsPrime) {x y : α} : x * y ∈ I → x ∈ I ∨ y ∈ I :=\n  hI.2\n\n"}
{"name":"Ideal.IsPrime.mem_or_mem_of_mul_eq_zero","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\nhI : I.IsPrime\nx y : α\nh : Eq (HMul.hMul x y) 0\n⊢ Or (Membership.mem I x) (Membership.mem I y)","decl":"theorem IsPrime.mem_or_mem_of_mul_eq_zero {I : Ideal α} (hI : I.IsPrime) {x y : α} (h : x * y = 0) :\n    x ∈ I ∨ y ∈ I :=\n  hI.mem_or_mem (h.symm ▸ I.zero_mem)\n\n"}
{"name":"Ideal.IsPrime.mem_of_pow_mem","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\nhI : I.IsPrime\nr : α\nn : Nat\nH : Membership.mem I (HPow.hPow r n)\n⊢ Membership.mem I r","decl":"theorem IsPrime.mem_of_pow_mem {I : Ideal α} (hI : I.IsPrime) {r : α} (n : ℕ) (H : r ^ n ∈ I) :\n    r ∈ I := by\n  induction n with\n  | zero =>\n    rw [pow_zero] at H\n    exact (mt (eq_top_iff_one _).2 hI.1).elim H\n  | succ n ih =>\n    rw [pow_succ] at H\n    exact Or.casesOn (hI.mem_or_mem H) ih id\n\n"}
{"name":"Ideal.not_isPrime_iff","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : Semiring α\nI : Ideal α\n⊢ Iff (Not I.IsPrime) (Or (Eq I Top.top) (Exists fun x => Exists fun _hx => Exists fun y => Exists fun _hy => Membership.mem I (HMul.hMul x y)))","decl":"theorem not_isPrime_iff {I : Ideal α} :\n    ¬I.IsPrime ↔ I = ⊤ ∨ ∃ (x : α) (_hx : x ∉ I) (y : α) (_hy : y ∉ I), x * y ∈ I := by\n  simp_rw [Ideal.isPrime_iff, not_and_or, Ne, Classical.not_not, not_forall, not_or]\n  exact\n    or_congr Iff.rfl\n      ⟨fun ⟨x, y, hxy, hx, hy⟩ => ⟨x, hx, y, hy, hxy⟩, fun ⟨x, hx, y, hy, hxy⟩ =>\n        ⟨x, y, hxy, hx, hy⟩⟩\n\n"}
{"name":"Ideal.bot_prime","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝¹ : Semiring α\ninst✝ : IsDomain α\n⊢ Bot.bot.IsPrime","decl":"theorem bot_prime [IsDomain α] : (⊥ : Ideal α).IsPrime :=\n  ⟨fun h => one_ne_zero (α := α) (by rwa [Ideal.eq_top_iff_one, Submodule.mem_bot] at h), fun h =>\n    mul_eq_zero.mp (by simpa only [Submodule.mem_bot] using h)⟩\n\n"}
{"name":"Ideal.IsPrime.mul_mem_iff_mem_or_mem","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : CommSemiring α\nI : Ideal α\nhI : I.IsPrime\nx y : α\n⊢ Iff (Membership.mem I (HMul.hMul x y)) (Or (Membership.mem I x) (Membership.mem I y))","decl":"theorem IsPrime.mul_mem_iff_mem_or_mem {I : Ideal α} (hI : I.IsPrime) :\n    ∀ {x y : α}, x * y ∈ I ↔ x ∈ I ∨ y ∈ I := @fun x y =>\n  ⟨hI.mem_or_mem, by\n    rintro (h | h)\n    exacts [I.mul_mem_right y h, I.mul_mem_left x h]⟩\n\n"}
{"name":"Ideal.IsPrime.pow_mem_iff_mem","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"α : Type u\ninst✝ : CommSemiring α\nI : Ideal α\nhI : I.IsPrime\nr : α\nn : Nat\nhn : LT.lt 0 n\n⊢ Iff (Membership.mem I (HPow.hPow r n)) (Membership.mem I r)","decl":"theorem IsPrime.pow_mem_iff_mem {I : Ideal α} (hI : I.IsPrime) {r : α} (n : ℕ) (hn : 0 < n) :\n    r ^ n ∈ I ↔ r ∈ I :=\n  ⟨hI.mem_of_pow_mem n, fun hr => I.pow_mem_of_mem hr n hn⟩\n\n"}
{"name":"IsDomain.of_bot_isPrime","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"A : Type u_1\ninst✝ : Ring A\nhbp : Bot.bot.IsPrime\n⊢ IsDomain A","decl":"theorem IsDomain.of_bot_isPrime (A : Type*) [Ring A] [hbp : (⊥ : Ideal A).IsPrime] : IsDomain A :=\n  @NoZeroDivisors.to_isDomain A _\n    ⟨1, 0, fun h => hbp.ne_top ((Ideal.eq_top_iff_one ⊥).mpr h)⟩ ⟨fun h => hbp.2 h⟩\n\n"}
{"name":"Ideal.eq_bot_of_prime","module":"Mathlib.RingTheory.Ideal.Prime","initialProofState":"K : Type u\ninst✝ : DivisionSemiring K\nI : Ideal K\nh : I.IsPrime\n⊢ Eq I Bot.bot","decl":"theorem eq_bot_of_prime [h : I.IsPrime] : I = ⊥ :=\n  or_iff_not_imp_right.mp I.eq_bot_or_top h.1\n\n"}
