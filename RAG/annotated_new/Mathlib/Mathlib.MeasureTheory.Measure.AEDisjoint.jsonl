{"name":"MeasureTheory.exists_null_pairwise_disjoint_diff","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"ι : Type u_1\nα : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Countable ι\ns : ι → Set α\nhd : Pairwise (Function.onFun (MeasureTheory.AEDisjoint μ) s)\n⊢ Exists fun t => And (∀ (i : ι), MeasurableSet (t i)) (And (∀ (i : ι), Eq (μ (t i)) 0) (Pairwise (Function.onFun Disjoint fun i => SDiff.sdiff (s i) (t i))))","decl":"/-- If `s : ι → Set α` is a countable family of pairwise a.e. disjoint sets, then there exists a\nfamily of measurable null sets `t i` such that `s i \\ t i` are pairwise disjoint. -/\ntheorem exists_null_pairwise_disjoint_diff [Countable ι] {s : ι → Set α}\n    (hd : Pairwise (AEDisjoint μ on s)) : ∃ t : ι → Set α, (∀ i, MeasurableSet (t i)) ∧\n    (∀ i, μ (t i) = 0) ∧ Pairwise (Disjoint on fun i => s i \\ t i) := by\n  refine ⟨fun i => toMeasurable μ (s i ∩ ⋃ j ∈ ({i}ᶜ : Set ι), s j), fun i =>\n    measurableSet_toMeasurable _ _, fun i => ?_, ?_⟩\n  · simp only [measure_toMeasurable, inter_iUnion]\n    exact (measure_biUnion_null_iff <| to_countable _).2 fun j hj => hd (Ne.symm hj)\n  · simp only [Pairwise, disjoint_left, onFun, mem_diff, not_and, and_imp, Classical.not_not]\n    intro i j hne x hi hU hj\n    replace hU : x ∉ s i ∩ iUnion fun j ↦ iUnion fun _ ↦ s j :=\n      fun h ↦ hU (subset_toMeasurable _ _ h)\n    simp only [mem_inter_iff, mem_iUnion, not_and, not_exists] at hU\n    exact (hU hi j hne.symm hj).elim\n\n"}
{"name":"MeasureTheory.AEDisjoint.eq","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ Eq (μ (Inter.inter s t)) 0","decl":"protected theorem eq (h : AEDisjoint μ s t) : μ (s ∩ t) = 0 :=\n  h\n\n"}
{"name":"MeasureTheory.AEDisjoint.symm","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ MeasureTheory.AEDisjoint μ t s","decl":"@[symm]\nprotected theorem symm (h : AEDisjoint μ s t) : AEDisjoint μ t s := by rwa [AEDisjoint, inter_comm]\n\n"}
{"name":"MeasureTheory.AEDisjoint.symmetric","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\n⊢ Symmetric (MeasureTheory.AEDisjoint μ)","decl":"protected theorem symmetric : Symmetric (AEDisjoint μ) := fun _ _ => AEDisjoint.symm\n\n"}
{"name":"MeasureTheory.AEDisjoint.comm","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\n⊢ Iff (MeasureTheory.AEDisjoint μ s t) (MeasureTheory.AEDisjoint μ t s)","decl":"protected theorem comm : AEDisjoint μ s t ↔ AEDisjoint μ t s :=\n  ⟨AEDisjoint.symm, AEDisjoint.symm⟩\n\n"}
{"name":"Disjoint.aedisjoint","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : Disjoint s t\n⊢ MeasureTheory.AEDisjoint μ s t","decl":"protected theorem _root_.Disjoint.aedisjoint (h : Disjoint s t) : AEDisjoint μ s t := by\n  rw [AEDisjoint, disjoint_iff_inter_eq_empty.1 h, measure_empty]\n\n"}
{"name":"Pairwise.aedisjoint","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"ι : Type u_1\nα : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : ι → Set α\nhf : Pairwise (Function.onFun Disjoint f)\n⊢ Pairwise (Function.onFun (MeasureTheory.AEDisjoint μ) f)","decl":"protected theorem _root_.Pairwise.aedisjoint {f : ι → Set α} (hf : Pairwise (Disjoint on f)) :\n    Pairwise (AEDisjoint μ on f) :=\n  hf.mono fun _i _j h => h.aedisjoint\n\n"}
{"name":"Set.PairwiseDisjoint.aedisjoint","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"ι : Type u_1\nα : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : ι → Set α\ns : Set ι\nhf : s.PairwiseDisjoint f\n⊢ s.Pairwise (Function.onFun (MeasureTheory.AEDisjoint μ) f)","decl":"protected theorem _root_.Set.PairwiseDisjoint.aedisjoint {f : ι → Set α} {s : Set ι}\n    (hf : s.PairwiseDisjoint f) : s.Pairwise (AEDisjoint μ on f) :=\n  hf.mono' fun _i _j h => h.aedisjoint\n\n"}
{"name":"MeasureTheory.AEDisjoint.mono_ae","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u v : Set α\nh : MeasureTheory.AEDisjoint μ s t\nhu : (MeasureTheory.ae μ).EventuallyLE u s\nhv : (MeasureTheory.ae μ).EventuallyLE v t\n⊢ MeasureTheory.AEDisjoint μ u v","decl":"theorem mono_ae (h : AEDisjoint μ s t) (hu : u ≤ᵐ[μ] s) (hv : v ≤ᵐ[μ] t) : AEDisjoint μ u v :=\n  measure_mono_null_ae (hu.inter hv) h\n\n"}
{"name":"MeasureTheory.AEDisjoint.mono","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u v : Set α\nh : MeasureTheory.AEDisjoint μ s t\nhu : HasSubset.Subset u s\nhv : HasSubset.Subset v t\n⊢ MeasureTheory.AEDisjoint μ u v","decl":"protected theorem mono (h : AEDisjoint μ s t) (hu : u ⊆ s) (hv : v ⊆ t) : AEDisjoint μ u v :=\n  mono_ae h (HasSubset.Subset.eventuallyLE hu) (HasSubset.Subset.eventuallyLE hv)\n\n"}
{"name":"MeasureTheory.AEDisjoint.congr","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u v : Set α\nh : MeasureTheory.AEDisjoint μ s t\nhu : (MeasureTheory.ae μ).EventuallyEq u s\nhv : (MeasureTheory.ae μ).EventuallyEq v t\n⊢ MeasureTheory.AEDisjoint μ u v","decl":"protected theorem congr (h : AEDisjoint μ s t) (hu : u =ᵐ[μ] s) (hv : v =ᵐ[μ] t) :\n    AEDisjoint μ u v :=\n  mono_ae h (Filter.EventuallyEq.le hu) (Filter.EventuallyEq.le hv)\n\n"}
{"name":"MeasureTheory.AEDisjoint.iUnion_left_iff","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nt : Set α\nι : Sort u_3\ninst✝ : Countable ι\ns : ι → Set α\n⊢ Iff (MeasureTheory.AEDisjoint μ (Set.iUnion fun i => s i) t) (∀ (i : ι), MeasureTheory.AEDisjoint μ (s i) t)","decl":"@[simp]\ntheorem iUnion_left_iff {ι : Sort*} [Countable ι] {s : ι → Set α} :\n    AEDisjoint μ (⋃ i, s i) t ↔ ∀ i, AEDisjoint μ (s i) t := by\n  simp only [AEDisjoint, iUnion_inter, measure_iUnion_null_iff]\n\n"}
{"name":"MeasureTheory.AEDisjoint.iUnion_right_iff","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\nι : Sort u_3\ninst✝ : Countable ι\nt : ι → Set α\n⊢ Iff (MeasureTheory.AEDisjoint μ s (Set.iUnion fun i => t i)) (∀ (i : ι), MeasureTheory.AEDisjoint μ s (t i))","decl":"@[simp]\ntheorem iUnion_right_iff {ι : Sort*} [Countable ι] {t : ι → Set α} :\n    AEDisjoint μ s (⋃ i, t i) ↔ ∀ i, AEDisjoint μ s (t i) := by\n  simp only [AEDisjoint, inter_iUnion, measure_iUnion_null_iff]\n\n"}
{"name":"MeasureTheory.AEDisjoint.union_left_iff","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u : Set α\n⊢ Iff (MeasureTheory.AEDisjoint μ (Union.union s t) u) (And (MeasureTheory.AEDisjoint μ s u) (MeasureTheory.AEDisjoint μ t u))","decl":"@[simp]\ntheorem union_left_iff : AEDisjoint μ (s ∪ t) u ↔ AEDisjoint μ s u ∧ AEDisjoint μ t u := by\n  simp [union_eq_iUnion, and_comm]\n\n"}
{"name":"MeasureTheory.AEDisjoint.union_right_iff","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u : Set α\n⊢ Iff (MeasureTheory.AEDisjoint μ s (Union.union t u)) (And (MeasureTheory.AEDisjoint μ s t) (MeasureTheory.AEDisjoint μ s u))","decl":"@[simp]\ntheorem union_right_iff : AEDisjoint μ s (t ∪ u) ↔ AEDisjoint μ s t ∧ AEDisjoint μ s u := by\n  simp [union_eq_iUnion, and_comm]\n\n"}
{"name":"MeasureTheory.AEDisjoint.union_left","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u : Set α\nhs : MeasureTheory.AEDisjoint μ s u\nht : MeasureTheory.AEDisjoint μ t u\n⊢ MeasureTheory.AEDisjoint μ (Union.union s t) u","decl":"theorem union_left (hs : AEDisjoint μ s u) (ht : AEDisjoint μ t u) : AEDisjoint μ (s ∪ t) u :=\n  union_left_iff.mpr ⟨hs, ht⟩\n\n"}
{"name":"MeasureTheory.AEDisjoint.union_right","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t u : Set α\nht : MeasureTheory.AEDisjoint μ s t\nhu : MeasureTheory.AEDisjoint μ s u\n⊢ MeasureTheory.AEDisjoint μ s (Union.union t u)","decl":"theorem union_right (ht : AEDisjoint μ s t) (hu : AEDisjoint μ s u) : AEDisjoint μ s (t ∪ u) :=\n  union_right_iff.2 ⟨ht, hu⟩\n\n"}
{"name":"MeasureTheory.AEDisjoint.diff_ae_eq_left","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ (MeasureTheory.ae μ).EventuallyEq (SDiff.sdiff s t) s","decl":"theorem diff_ae_eq_left (h : AEDisjoint μ s t) : (s \\ t : Set α) =ᵐ[μ] s :=\n  @diff_self_inter _ s t ▸ diff_null_ae_eq_self h\n\n"}
{"name":"MeasureTheory.AEDisjoint.diff_ae_eq_right","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ (MeasureTheory.ae μ).EventuallyEq (SDiff.sdiff t s) t","decl":"theorem diff_ae_eq_right (h : AEDisjoint μ s t) : (t \\ s : Set α) =ᵐ[μ] t :=\n  diff_ae_eq_left <| AEDisjoint.symm h\n\n"}
{"name":"MeasureTheory.AEDisjoint.measure_diff_left","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ Eq (μ (SDiff.sdiff s t)) (μ s)","decl":"theorem measure_diff_left (h : AEDisjoint μ s t) : μ (s \\ t) = μ s :=\n  measure_congr <| AEDisjoint.diff_ae_eq_left h\n\n"}
{"name":"MeasureTheory.AEDisjoint.measure_diff_right","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ Eq (μ (SDiff.sdiff t s)) (μ t)","decl":"theorem measure_diff_right (h : AEDisjoint μ s t) : μ (t \\ s) = μ t :=\n  measure_congr <| AEDisjoint.diff_ae_eq_right h\n\n"}
{"name":"MeasureTheory.AEDisjoint.exists_disjoint_diff","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : MeasureTheory.AEDisjoint μ s t\n⊢ Exists fun u => And (MeasurableSet u) (And (Eq (μ u) 0) (Disjoint (SDiff.sdiff s u) t))","decl":"/-- If `s` and `t` are `μ`-a.e. disjoint, then `s \\ u` and `t` are disjoint for some measurable null\nset `u`. -/\ntheorem exists_disjoint_diff (h : AEDisjoint μ s t) :\n    ∃ u, MeasurableSet u ∧ μ u = 0 ∧ Disjoint (s \\ u) t :=\n  ⟨toMeasurable μ (s ∩ t), measurableSet_toMeasurable _ _, (measure_toMeasurable _).trans h,\n    disjoint_sdiff_self_left.mono_left (b := s \\ t) fun x hx => by\n      simpa using ⟨hx.1, fun hxt => hx.2 <| subset_toMeasurable _ _ ⟨hx.1, hxt⟩⟩⟩\n\n"}
{"name":"MeasureTheory.AEDisjoint.of_null_right","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : Eq (μ t) 0\n⊢ MeasureTheory.AEDisjoint μ s t","decl":"theorem of_null_right (h : μ t = 0) : AEDisjoint μ s t :=\n  measure_mono_null inter_subset_right h\n\n"}
{"name":"MeasureTheory.AEDisjoint.of_null_left","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns t : Set α\nh : Eq (μ s) 0\n⊢ MeasureTheory.AEDisjoint μ s t","decl":"theorem of_null_left (h : μ s = 0) : AEDisjoint μ s t :=\n  AEDisjoint.symm (of_null_right h)\n\n"}
{"name":"MeasureTheory.aedisjoint_compl_left","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\n⊢ MeasureTheory.AEDisjoint μ (HasCompl.compl s) s","decl":"theorem aedisjoint_compl_left : AEDisjoint μ sᶜ s :=\n  (@disjoint_compl_left _ _ s).aedisjoint\n\n"}
{"name":"MeasureTheory.aedisjoint_compl_right","module":"Mathlib.MeasureTheory.Measure.AEDisjoint","initialProofState":"α : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\n⊢ MeasureTheory.AEDisjoint μ s (HasCompl.compl s)","decl":"theorem aedisjoint_compl_right : AEDisjoint μ s sᶜ :=\n  (@disjoint_compl_right _ _ s).aedisjoint\n\n"}
