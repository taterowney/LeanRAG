{"name":"Polynomial.neg_cancelLeads","module":"Mathlib.Algebra.Polynomial.CancelLeads","initialProofState":"R : Type u_1\ninst✝ : Ring R\np q : Polynomial R\n⊢ Eq (Neg.neg (p.cancelLeads q)) (q.cancelLeads p)","decl":"@[simp]\ntheorem neg_cancelLeads : -p.cancelLeads q = q.cancelLeads p :=\n  neg_sub _ _\n\n"}
{"name":"Polynomial.natDegree_cancelLeads_lt_of_natDegree_le_natDegree_of_comm","module":"Mathlib.Algebra.Polynomial.CancelLeads","initialProofState":"R : Type u_1\ninst✝ : Ring R\np q : Polynomial R\ncomm : Eq (HMul.hMul p.leadingCoeff q.leadingCoeff) (HMul.hMul q.leadingCoeff p.leadingCoeff)\nh : LE.le p.natDegree q.natDegree\nhq : LT.lt 0 q.natDegree\n⊢ LT.lt (p.cancelLeads q).natDegree q.natDegree","decl":"theorem natDegree_cancelLeads_lt_of_natDegree_le_natDegree_of_comm\n    (comm : p.leadingCoeff * q.leadingCoeff = q.leadingCoeff * p.leadingCoeff)\n    (h : p.natDegree ≤ q.natDegree) (hq : 0 < q.natDegree) :\n    (p.cancelLeads q).natDegree < q.natDegree := by\n  by_cases hp : p = 0\n  · convert hq\n    simp [hp, cancelLeads]\n  rw [cancelLeads, sub_eq_add_neg, tsub_eq_zero_iff_le.mpr h, pow_zero, mul_one]\n  by_cases h0 :\n    C p.leadingCoeff * q + -(C q.leadingCoeff * X ^ (q.natDegree - p.natDegree) * p) = 0\n  · exact (le_of_eq (by simp only [h0, natDegree_zero])).trans_lt hq\n  apply lt_of_le_of_ne\n  · compute_degree!\n    rwa [Nat.sub_add_cancel]\n  · contrapose! h0\n    rw [← leadingCoeff_eq_zero, leadingCoeff, h0, mul_assoc, X_pow_mul, ← tsub_add_cancel_of_le h,\n      add_comm _ p.natDegree]\n    simp only [coeff_mul_X_pow, coeff_neg, coeff_C_mul, add_tsub_cancel_left, coeff_add]\n    rw [add_comm p.natDegree, tsub_add_cancel_of_le h, ← leadingCoeff, ← leadingCoeff, comm,\n      add_neg_cancel]\n\n"}
{"name":"Polynomial.dvd_cancelLeads_of_dvd_of_dvd","module":"Mathlib.Algebra.Polynomial.CancelLeads","initialProofState":"R : Type u_1\ninst✝ : CommRing R\np q r : Polynomial R\npq : Dvd.dvd p q\npr : Dvd.dvd p r\n⊢ Dvd.dvd p (q.cancelLeads r)","decl":"theorem dvd_cancelLeads_of_dvd_of_dvd {r : R[X]} (pq : p ∣ q) (pr : p ∣ r) : p ∣ q.cancelLeads r :=\n  dvd_sub (pr.trans (Dvd.intro_left _ rfl)) (pq.trans (Dvd.intro_left _ rfl))\n\n"}
{"name":"Polynomial.natDegree_cancelLeads_lt_of_natDegree_le_natDegree","module":"Mathlib.Algebra.Polynomial.CancelLeads","initialProofState":"R : Type u_1\ninst✝ : CommRing R\np q : Polynomial R\nh : LE.le p.natDegree q.natDegree\nhq : LT.lt 0 q.natDegree\n⊢ LT.lt (p.cancelLeads q).natDegree q.natDegree","decl":"theorem natDegree_cancelLeads_lt_of_natDegree_le_natDegree (h : p.natDegree ≤ q.natDegree)\n    (hq : 0 < q.natDegree) : (p.cancelLeads q).natDegree < q.natDegree :=\n  natDegree_cancelLeads_lt_of_natDegree_le_natDegree_of_comm (mul_comm _ _) h hq\n\n"}
