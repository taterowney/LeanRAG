{"name":"Real.deriv_sqrt_aux","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"x : Real\nhx : Ne x 0\n⊢ And (HasStrictDerivAt (fun x => x.sqrt) (HDiv.hDiv 1 (HMul.hMul 2 x.sqrt)) x) (∀ (n : WithTop ENat), ContDiffAt Real n (fun x => x.sqrt) x)","decl":"theorem deriv_sqrt_aux {x : ℝ} (hx : x ≠ 0) :\n    HasStrictDerivAt (√·) (1 / (2 * √x)) x ∧ ∀ n, ContDiffAt ℝ n (√·) x := by\n  cases' hx.lt_or_lt with hx hx\n  · rw [sqrt_eq_zero_of_nonpos hx.le, mul_zero, div_zero]\n    have : (√·) =ᶠ[𝓝 x] fun _ => 0 := (gt_mem_nhds hx).mono fun x hx => sqrt_eq_zero_of_nonpos hx.le\n    exact\n      ⟨(hasStrictDerivAt_const x (0 : ℝ)).congr_of_eventuallyEq this.symm, fun n =>\n        contDiffAt_const.congr_of_eventuallyEq this⟩\n  · have : ↑2 * √x ^ (2 - 1) ≠ 0 := by simp [(sqrt_pos.2 hx).ne', @two_ne_zero ℝ]\n    constructor\n    · simpa using sqPartialHomeomorph.hasStrictDerivAt_symm hx this (hasStrictDerivAt_pow 2 _)\n    · exact fun n => sqPartialHomeomorph.contDiffAt_symm_deriv this hx (hasDerivAt_pow 2 (√x))\n        (contDiffAt_id.pow 2)\n\n"}
{"name":"Real.hasStrictDerivAt_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"x : Real\nhx : Ne x 0\n⊢ HasStrictDerivAt (fun x => x.sqrt) (HDiv.hDiv 1 (HMul.hMul 2 x.sqrt)) x","decl":"theorem hasStrictDerivAt_sqrt {x : ℝ} (hx : x ≠ 0) : HasStrictDerivAt (√·) (1 / (2 * √x)) x :=\n  (deriv_sqrt_aux hx).1\n\n"}
{"name":"Real.contDiffAt_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"x : Real\nn : WithTop ENat\nhx : Ne x 0\n⊢ ContDiffAt Real n (fun x => x.sqrt) x","decl":"theorem contDiffAt_sqrt {x : ℝ} {n : WithTop ℕ∞} (hx : x ≠ 0) : ContDiffAt ℝ n (√·) x :=\n  (deriv_sqrt_aux hx).2 n\n\n"}
{"name":"Real.hasDerivAt_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"x : Real\nhx : Ne x 0\n⊢ HasDerivAt (fun x => x.sqrt) (HDiv.hDiv 1 (HMul.hMul 2 x.sqrt)) x","decl":"theorem hasDerivAt_sqrt {x : ℝ} (hx : x ≠ 0) : HasDerivAt (√·) (1 / (2 * √x)) x :=\n  (hasStrictDerivAt_sqrt hx).hasDerivAt\n\n"}
{"name":"HasDerivWithinAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"f : Real → Real\ns : Set Real\nf' x : Real\nhf : HasDerivWithinAt f f' s x\nhx : Ne (f x) 0\n⊢ HasDerivWithinAt (fun y => (f y).sqrt) (HDiv.hDiv f' (HMul.hMul 2 (f x).sqrt)) s x","decl":"theorem HasDerivWithinAt.sqrt (hf : HasDerivWithinAt f f' s x) (hx : f x ≠ 0) :\n    HasDerivWithinAt (fun y => √(f y)) (f' / (2 * √(f x))) s x := by\n  simpa only [(· ∘ ·), div_eq_inv_mul, mul_one] using\n    (hasDerivAt_sqrt hx).comp_hasDerivWithinAt x hf\n\n"}
{"name":"HasDerivAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"f : Real → Real\nf' x : Real\nhf : HasDerivAt f f' x\nhx : Ne (f x) 0\n⊢ HasDerivAt (fun y => (f y).sqrt) (HDiv.hDiv f' (HMul.hMul 2 (f x).sqrt)) x","decl":"theorem HasDerivAt.sqrt (hf : HasDerivAt f f' x) (hx : f x ≠ 0) :\n    HasDerivAt (fun y => √(f y)) (f' / (2 * √(f x))) x := by\n  simpa only [(· ∘ ·), div_eq_inv_mul, mul_one] using (hasDerivAt_sqrt hx).comp x hf\n\n"}
{"name":"HasStrictDerivAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"f : Real → Real\nf' x : Real\nhf : HasStrictDerivAt f f' x\nhx : Ne (f x) 0\n⊢ HasStrictDerivAt (fun t => (f t).sqrt) (HDiv.hDiv f' (HMul.hMul 2 (f x).sqrt)) x","decl":"theorem HasStrictDerivAt.sqrt (hf : HasStrictDerivAt f f' x) (hx : f x ≠ 0) :\n    HasStrictDerivAt (fun t => √(f t)) (f' / (2 * √(f x))) x := by\n  simpa only [(· ∘ ·), div_eq_inv_mul, mul_one] using (hasStrictDerivAt_sqrt hx).comp x hf\n\n"}
{"name":"derivWithin_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"f : Real → Real\ns : Set Real\nx : Real\nhf : DifferentiableWithinAt Real f s x\nhx : Ne (f x) 0\nhxs : UniqueDiffWithinAt Real s x\n⊢ Eq (derivWithin (fun x => (f x).sqrt) s x) (HDiv.hDiv (derivWithin f s x) (HMul.hMul 2 (f x).sqrt))","decl":"theorem derivWithin_sqrt (hf : DifferentiableWithinAt ℝ f s x) (hx : f x ≠ 0)\n    (hxs : UniqueDiffWithinAt ℝ s x) :\n    derivWithin (fun x => √(f x)) s x = derivWithin f s x / (2 * √(f x)) :=\n  (hf.hasDerivWithinAt.sqrt hx).derivWithin hxs\n\n"}
{"name":"deriv_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"f : Real → Real\nx : Real\nhf : DifferentiableAt Real f x\nhx : Ne (f x) 0\n⊢ Eq (deriv (fun x => (f x).sqrt) x) (HDiv.hDiv (deriv f x) (HMul.hMul 2 (f x).sqrt))","decl":"@[simp]\ntheorem deriv_sqrt (hf : DifferentiableAt ℝ f x) (hx : f x ≠ 0) :\n    deriv (fun x => √(f x)) x = deriv f x / (2 * √(f x)) :=\n  (hf.hasDerivAt.sqrt hx).deriv\n\n"}
{"name":"HasFDerivAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nx : E\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhf : HasFDerivAt f f' x\nhx : Ne (f x) 0\n⊢ HasFDerivAt (fun y => (f y).sqrt) (HSMul.hSMul (HDiv.hDiv 1 (HMul.hMul 2 (f x).sqrt)) f') x","decl":"theorem HasFDerivAt.sqrt (hf : HasFDerivAt f f' x) (hx : f x ≠ 0) :\n    HasFDerivAt (fun y => √(f y)) ((1 / (2 * √(f x))) • f') x :=\n  (hasDerivAt_sqrt hx).comp_hasFDerivAt x hf\n\n"}
{"name":"HasStrictFDerivAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nx : E\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhf : HasStrictFDerivAt f f' x\nhx : Ne (f x) 0\n⊢ HasStrictFDerivAt (fun y => (f y).sqrt) (HSMul.hSMul (HDiv.hDiv 1 (HMul.hMul 2 (f x).sqrt)) f') x","decl":"theorem HasStrictFDerivAt.sqrt (hf : HasStrictFDerivAt f f' x) (hx : f x ≠ 0) :\n    HasStrictFDerivAt (fun y => √(f y)) ((1 / (2 * √(f x))) • f') x :=\n  (hasStrictDerivAt_sqrt hx).comp_hasStrictFDerivAt x hf\n\n"}
{"name":"HasFDerivWithinAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\nx : E\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhf : HasFDerivWithinAt f f' s x\nhx : Ne (f x) 0\n⊢ HasFDerivWithinAt (fun y => (f y).sqrt) (HSMul.hSMul (HDiv.hDiv 1 (HMul.hMul 2 (f x).sqrt)) f') s x","decl":"theorem HasFDerivWithinAt.sqrt (hf : HasFDerivWithinAt f f' s x) (hx : f x ≠ 0) :\n    HasFDerivWithinAt (fun y => √(f y)) ((1 / (2 * √(f x))) • f') s x :=\n  (hasDerivAt_sqrt hx).comp_hasFDerivWithinAt x hf\n\n"}
{"name":"DifferentiableWithinAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\nx : E\nhf : DifferentiableWithinAt Real f s x\nhx : Ne (f x) 0\n⊢ DifferentiableWithinAt Real (fun y => (f y).sqrt) s x","decl":"theorem DifferentiableWithinAt.sqrt (hf : DifferentiableWithinAt ℝ f s x) (hx : f x ≠ 0) :\n    DifferentiableWithinAt ℝ (fun y => √(f y)) s x :=\n  (hf.hasFDerivWithinAt.sqrt hx).differentiableWithinAt\n\n"}
{"name":"DifferentiableAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nx : E\nhf : DifferentiableAt Real f x\nhx : Ne (f x) 0\n⊢ DifferentiableAt Real (fun y => (f y).sqrt) x","decl":"theorem DifferentiableAt.sqrt (hf : DifferentiableAt ℝ f x) (hx : f x ≠ 0) :\n    DifferentiableAt ℝ (fun y => √(f y)) x :=\n  (hf.hasFDerivAt.sqrt hx).differentiableAt\n\n"}
{"name":"DifferentiableOn.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\nhf : DifferentiableOn Real f s\nhs : ∀ (x : E), Membership.mem s x → Ne (f x) 0\n⊢ DifferentiableOn Real (fun y => (f y).sqrt) s","decl":"theorem DifferentiableOn.sqrt (hf : DifferentiableOn ℝ f s) (hs : ∀ x ∈ s, f x ≠ 0) :\n    DifferentiableOn ℝ (fun y => √(f y)) s := fun x hx => (hf x hx).sqrt (hs x hx)\n\n"}
{"name":"Differentiable.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nhf : Differentiable Real f\nhs : ∀ (x : E), Ne (f x) 0\n⊢ Differentiable Real fun y => (f y).sqrt","decl":"theorem Differentiable.sqrt (hf : Differentiable ℝ f) (hs : ∀ x, f x ≠ 0) :\n    Differentiable ℝ fun y => √(f y) := fun x => (hf x).sqrt (hs x)\n\n"}
{"name":"fderivWithin_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\ns : Set E\nx : E\nhf : DifferentiableWithinAt Real f s x\nhx : Ne (f x) 0\nhxs : UniqueDiffWithinAt Real s x\n⊢ Eq (fderivWithin Real (fun x => (f x).sqrt) s x) (HSMul.hSMul (HDiv.hDiv 1 (HMul.hMul 2 (f x).sqrt)) (fderivWithin Real f s x))","decl":"theorem fderivWithin_sqrt (hf : DifferentiableWithinAt ℝ f s x) (hx : f x ≠ 0)\n    (hxs : UniqueDiffWithinAt ℝ s x) :\n    fderivWithin ℝ (fun x => √(f x)) s x = (1 / (2 * √(f x))) • fderivWithin ℝ f s x :=\n  (hf.hasFDerivWithinAt.sqrt hx).fderivWithin hxs\n\n"}
{"name":"fderiv_sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nx : E\nhf : DifferentiableAt Real f x\nhx : Ne (f x) 0\n⊢ Eq (fderiv Real (fun x => (f x).sqrt) x) (HSMul.hSMul (HDiv.hDiv 1 (HMul.hMul 2 (f x).sqrt)) (fderiv Real f x))","decl":"@[simp]\ntheorem fderiv_sqrt (hf : DifferentiableAt ℝ f x) (hx : f x ≠ 0) :\n    fderiv ℝ (fun x => √(f x)) x = (1 / (2 * √(f x))) • fderiv ℝ f x :=\n  (hf.hasFDerivAt.sqrt hx).fderiv\n\n"}
{"name":"ContDiffAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nn : WithTop ENat\nx : E\nhf : ContDiffAt Real n f x\nhx : Ne (f x) 0\n⊢ ContDiffAt Real n (fun y => (f y).sqrt) x","decl":"theorem ContDiffAt.sqrt (hf : ContDiffAt ℝ n f x) (hx : f x ≠ 0) :\n    ContDiffAt ℝ n (fun y => √(f y)) x :=\n  (contDiffAt_sqrt hx).comp x hf\n\n"}
{"name":"ContDiffWithinAt.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nn : WithTop ENat\ns : Set E\nx : E\nhf : ContDiffWithinAt Real n f s x\nhx : Ne (f x) 0\n⊢ ContDiffWithinAt Real n (fun y => (f y).sqrt) s x","decl":"theorem ContDiffWithinAt.sqrt (hf : ContDiffWithinAt ℝ n f s x) (hx : f x ≠ 0) :\n    ContDiffWithinAt ℝ n (fun y => √(f y)) s x :=\n  (contDiffAt_sqrt hx).comp_contDiffWithinAt x hf\n\n"}
{"name":"ContDiffOn.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nn : WithTop ENat\ns : Set E\nhf : ContDiffOn Real n f s\nhs : ∀ (x : E), Membership.mem s x → Ne (f x) 0\n⊢ ContDiffOn Real n (fun y => (f y).sqrt) s","decl":"theorem ContDiffOn.sqrt (hf : ContDiffOn ℝ n f s) (hs : ∀ x ∈ s, f x ≠ 0) :\n    ContDiffOn ℝ n (fun y => √(f y)) s := fun x hx => (hf x hx).sqrt (hs x hx)\n\n"}
{"name":"ContDiff.sqrt","module":"Mathlib.Analysis.SpecialFunctions.Sqrt","initialProofState":"E : Type u_1\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : E → Real\nn : WithTop ENat\nhf : ContDiff Real n f\nh : ∀ (x : E), Ne (f x) 0\n⊢ ContDiff Real n fun y => (f y).sqrt","decl":"theorem ContDiff.sqrt (hf : ContDiff ℝ n f) (h : ∀ x, f x ≠ 0) : ContDiff ℝ n fun y => √(f y) :=\n  contDiff_iff_contDiffAt.2 fun x => hf.contDiffAt.sqrt (h x)\n\n"}
