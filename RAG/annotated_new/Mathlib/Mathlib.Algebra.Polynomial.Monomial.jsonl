{"name":"Polynomial.monomial_one_eq_iff","module":"Mathlib.Algebra.Polynomial.Monomial","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\ni j : Nat\n⊢ Iff (Eq ((Polynomial.monomial i) 1) ((Polynomial.monomial j) 1)) (Eq i j)","decl":"theorem monomial_one_eq_iff [Nontrivial R] {i j : ℕ} :\n    (monomial i 1 : R[X]) = monomial j 1 ↔ i = j := by\n  -- Porting note: `ofFinsupp.injEq` is required.\n  simp_rw [← ofFinsupp_single, ofFinsupp.injEq]\n  exact AddMonoidAlgebra.of_injective.eq_iff\n\n"}
{"name":"Polynomial.infinite","module":"Mathlib.Algebra.Polynomial.Monomial","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\n⊢ Infinite (Polynomial R)","decl":"instance infinite [Nontrivial R] : Infinite R[X] :=\n  Infinite.of_injective (fun i => monomial i 1) fun m n h => by simpa [monomial_one_eq_iff] using h\n\n"}
{"name":"Polynomial.card_support_le_one_iff_monomial","module":"Mathlib.Algebra.Polynomial.Monomial","initialProofState":"R : Type u\ninst✝ : Semiring R\nf : Polynomial R\n⊢ Iff (LE.le f.support.card 1) (Exists fun n => Exists fun a => Eq f ((Polynomial.monomial n) a))","decl":"theorem card_support_le_one_iff_monomial {f : R[X]} :\n    Finset.card f.support ≤ 1 ↔ ∃ n a, f = monomial n a := by\n  constructor\n  · intro H\n    rw [Finset.card_le_one_iff_subset_singleton] at H\n    rcases H with ⟨n, hn⟩\n    refine ⟨n, f.coeff n, ?_⟩\n    ext i\n    by_cases hi : i = n\n    · simp [hi, coeff_monomial]\n    · have : f.coeff i = 0 := by\n        rw [← not_mem_support_iff]\n        exact fun hi' => hi (Finset.mem_singleton.1 (hn hi'))\n      simp [this, Ne.symm hi, coeff_monomial]\n  · rintro ⟨n, a, rfl⟩\n    rw [← Finset.card_singleton n]\n    apply Finset.card_le_card\n    exact support_monomial' _ _\n\n"}
{"name":"Polynomial.ringHom_ext","module":"Mathlib.Algebra.Polynomial.Monomial","initialProofState":"R : Type u\ninst✝¹ : Semiring R\nS : Type u_1\ninst✝ : Semiring S\nf g : RingHom (Polynomial R) S\nh₁ : ∀ (a : R), Eq (f (Polynomial.C a)) (g (Polynomial.C a))\nh₂ : Eq (f Polynomial.X) (g Polynomial.X)\n⊢ Eq f g","decl":"theorem ringHom_ext {S} [Semiring S] {f g : R[X] →+* S} (h₁ : ∀ a, f (C a) = g (C a))\n    (h₂ : f X = g X) : f = g := by\n  set f' := f.comp (toFinsuppIso R).symm.toRingHom with hf'\n  set g' := g.comp (toFinsuppIso R).symm.toRingHom with hg'\n  have A : f' = g' := by\n    ext\n    simp [f', g', h₁, RingEquiv.toRingHom_eq_coe]\n    simpa using h₂\n  have B : f = f'.comp (toFinsuppIso R) := by\n    rw [hf', RingHom.comp_assoc]\n    ext x\n    simp only [RingEquiv.toRingHom_eq_coe, RingEquiv.symm_apply_apply, Function.comp_apply,\n      RingHom.coe_comp, RingEquiv.coe_toRingHom]\n  have C' : g = g'.comp (toFinsuppIso R) := by\n    rw [hg', RingHom.comp_assoc]\n    ext x\n    simp only [RingEquiv.toRingHom_eq_coe, RingEquiv.symm_apply_apply, Function.comp_apply,\n      RingHom.coe_comp, RingEquiv.coe_toRingHom]\n  rw [B, C', A]\n\n"}
{"name":"Polynomial.ringHom_ext'_iff","module":"Mathlib.Algebra.Polynomial.Monomial","initialProofState":"R : Type u\ninst✝¹ : Semiring R\nS : Type u_1\ninst✝ : Semiring S\nf g : RingHom (Polynomial R) S\n⊢ Iff (Eq f g) (And (Eq (f.comp Polynomial.C) (g.comp Polynomial.C)) (Eq (f Polynomial.X) (g Polynomial.X)))","decl":"@[ext high]\ntheorem ringHom_ext' {S} [Semiring S] {f g : R[X] →+* S} (h₁ : f.comp C = g.comp C)\n    (h₂ : f X = g X) : f = g :=\n  ringHom_ext (RingHom.congr_fun h₁) h₂\n\n"}
{"name":"Polynomial.ringHom_ext'","module":"Mathlib.Algebra.Polynomial.Monomial","initialProofState":"R : Type u\ninst✝¹ : Semiring R\nS : Type u_1\ninst✝ : Semiring S\nf g : RingHom (Polynomial R) S\nh₁ : Eq (f.comp Polynomial.C) (g.comp Polynomial.C)\nh₂ : Eq (f Polynomial.X) (g Polynomial.X)\n⊢ Eq f g","decl":"@[ext high]\ntheorem ringHom_ext' {S} [Semiring S] {f g : R[X] →+* S} (h₁ : f.comp C = g.comp C)\n    (h₂ : f X = g X) : f = g :=\n  ringHom_ext (RingHom.congr_fun h₁) h₂\n\n"}
