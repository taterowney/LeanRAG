{"name":"mul_mem_upperBounds_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\na b : M\nha : Membership.mem (upperBounds s) a\nhb : Membership.mem (upperBounds t) b\n⊢ Membership.mem (upperBounds (HMul.hMul s t)) (HMul.hMul a b)","decl":"@[to_additive]\nlemma mul_mem_upperBounds_mul (ha : a ∈ upperBounds s) (hb : b ∈ upperBounds t) :\n    a * b ∈ upperBounds (s * t) := forall_mem_image2.2 fun _ hx _ hy => mul_le_mul' (ha hx) (hb hy)\n\n"}
{"name":"add_mem_upperBounds_add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\na b : M\nha : Membership.mem (upperBounds s) a\nhb : Membership.mem (upperBounds t) b\n⊢ Membership.mem (upperBounds (HAdd.hAdd s t)) (HAdd.hAdd a b)","decl":"@[to_additive]\nlemma mul_mem_upperBounds_mul (ha : a ∈ upperBounds s) (hb : b ∈ upperBounds t) :\n    a * b ∈ upperBounds (s * t) := forall_mem_image2.2 fun _ hx _ hy => mul_le_mul' (ha hx) (hb hy)\n\n"}
{"name":"subset_upperBounds_add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\n⊢ HasSubset.Subset (HAdd.hAdd (upperBounds s) (upperBounds t)) (upperBounds (HAdd.hAdd s t))","decl":"@[to_additive]\nlemma subset_upperBounds_mul (s t : Set M) : upperBounds s * upperBounds t ⊆ upperBounds (s * t) :=\n  image2_subset_iff.2 fun _ hx _ hy => mul_mem_upperBounds_mul hx hy\n\n"}
{"name":"subset_upperBounds_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\n⊢ HasSubset.Subset (HMul.hMul (upperBounds s) (upperBounds t)) (upperBounds (HMul.hMul s t))","decl":"@[to_additive]\nlemma subset_upperBounds_mul (s t : Set M) : upperBounds s * upperBounds t ⊆ upperBounds (s * t) :=\n  image2_subset_iff.2 fun _ hx _ hy => mul_mem_upperBounds_mul hx hy\n\n"}
{"name":"mul_mem_lowerBounds_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\na b : M\nha : Membership.mem (lowerBounds s) a\nhb : Membership.mem (lowerBounds t) b\n⊢ Membership.mem (lowerBounds (HMul.hMul s t)) (HMul.hMul a b)","decl":"@[to_additive]\nlemma mul_mem_lowerBounds_mul (ha : a ∈ lowerBounds s) (hb : b ∈ lowerBounds t) :\n    a * b ∈ lowerBounds (s * t) := mul_mem_upperBounds_mul (M := Mᵒᵈ) ha hb\n\n"}
{"name":"add_mem_lowerBounds_add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\na b : M\nha : Membership.mem (lowerBounds s) a\nhb : Membership.mem (lowerBounds t) b\n⊢ Membership.mem (lowerBounds (HAdd.hAdd s t)) (HAdd.hAdd a b)","decl":"@[to_additive]\nlemma mul_mem_lowerBounds_mul (ha : a ∈ lowerBounds s) (hb : b ∈ lowerBounds t) :\n    a * b ∈ lowerBounds (s * t) := mul_mem_upperBounds_mul (M := Mᵒᵈ) ha hb\n\n"}
{"name":"subset_lowerBounds_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\n⊢ HasSubset.Subset (HMul.hMul (lowerBounds s) (lowerBounds t)) (lowerBounds (HMul.hMul s t))","decl":"@[to_additive]\nlemma subset_lowerBounds_mul (s t : Set M) : lowerBounds s * lowerBounds t ⊆ lowerBounds (s * t) :=\n  subset_upperBounds_mul (M := Mᵒᵈ) _ _\n\n"}
{"name":"subset_lowerBounds_add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\n⊢ HasSubset.Subset (HAdd.hAdd (lowerBounds s) (lowerBounds t)) (lowerBounds (HAdd.hAdd s t))","decl":"@[to_additive]\nlemma subset_lowerBounds_mul (s t : Set M) : lowerBounds s * lowerBounds t ⊆ lowerBounds (s * t) :=\n  subset_upperBounds_mul (M := Mᵒᵈ) _ _\n\n"}
{"name":"BddAbove.mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs : BddAbove s\nht : BddAbove t\n⊢ BddAbove (HMul.hMul s t)","decl":"@[to_additive]\nlemma BddAbove.mul (hs : BddAbove s) (ht : BddAbove t) : BddAbove (s * t) :=\n  (Nonempty.mul hs ht).mono (subset_upperBounds_mul s t)\n\n"}
{"name":"BddAbove.add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs : BddAbove s\nht : BddAbove t\n⊢ BddAbove (HAdd.hAdd s t)","decl":"@[to_additive]\nlemma BddAbove.mul (hs : BddAbove s) (ht : BddAbove t) : BddAbove (s * t) :=\n  (Nonempty.mul hs ht).mono (subset_upperBounds_mul s t)\n\n"}
{"name":"BddBelow.mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs : BddBelow s\nht : BddBelow t\n⊢ BddBelow (HMul.hMul s t)","decl":"@[to_additive]\nlemma BddBelow.mul (hs : BddBelow s) (ht : BddBelow t) : BddBelow (s * t) :=\n  (Nonempty.mul hs ht).mono (subset_lowerBounds_mul s t)\n\n"}
{"name":"BddBelow.add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs : BddBelow s\nht : BddBelow t\n⊢ BddBelow (HAdd.hAdd s t)","decl":"@[to_additive]\nlemma BddBelow.mul (hs : BddBelow s) (ht : BddBelow t) : BddBelow (s * t) :=\n  (Nonempty.mul hs ht).mono (subset_lowerBounds_mul s t)\n\n"}
{"name":"Set.BddAbove.mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\ns t : Set M\nhs : BddAbove s\nht : BddAbove t\n⊢ BddAbove (HMul.hMul s t)","decl":"@[to_additive] alias Set.BddAbove.mul := BddAbove.mul\n\n-- `alias` doesn't add the deprecation suggestion to the `to_additive` version\n-- see https://github.com/leanprover-community/mathlib4/issues/19424\n"}
{"name":"Set.BddAbove.add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"M : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\ns t : Set M\nhs : BddAbove s\nht : BddAbove t\n⊢ BddAbove (HAdd.hAdd s t)","decl":"@[to_additive] alias Set.BddAbove.mul := BddAbove.mul\n\n-- `alias` doesn't add the deprecation suggestion to the `to_additive` version\n-- see https://github.com/leanprover-community/mathlib4/issues/19424\n"}
{"name":"BddAbove.range_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\nf g : ι → M\nhf : BddAbove (Set.range f)\nhg : BddAbove (Set.range g)\n⊢ BddAbove (Set.range fun i => HMul.hMul (f i) (g i))","decl":"@[to_additive]\nlemma BddAbove.range_mul (hf : BddAbove (range f)) (hg : BddAbove (range g)) :\n    BddAbove (range fun i ↦ f i * g i) :=\n  .range_comp (f := fun i ↦ (f i, g i)) (bddAbove_range_prod.2 ⟨hf, hg⟩)\n    (monotone_fst.mul' monotone_snd)\n\n"}
{"name":"BddAbove.range_add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\nf g : ι → M\nhf : BddAbove (Set.range f)\nhg : BddAbove (Set.range g)\n⊢ BddAbove (Set.range fun i => HAdd.hAdd (f i) (g i))","decl":"@[to_additive]\nlemma BddAbove.range_mul (hf : BddAbove (range f)) (hg : BddAbove (range g)) :\n    BddAbove (range fun i ↦ f i * g i) :=\n  .range_comp (f := fun i ↦ (f i, g i)) (bddAbove_range_prod.2 ⟨hf, hg⟩)\n    (monotone_fst.mul' monotone_snd)\n\n"}
{"name":"BddBelow.range_mul","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : Mul M\ninst✝² : Preorder M\ninst✝¹ : MulLeftMono M\ninst✝ : MulRightMono M\nf g : ι → M\nhf : BddBelow (Set.range f)\nhg : BddBelow (Set.range g)\n⊢ BddBelow (Set.range fun i => HMul.hMul (f i) (g i))","decl":"@[to_additive]\nlemma BddBelow.range_mul (hf : BddBelow (range f)) (hg : BddBelow (range g)) :\n    BddBelow (range fun i ↦ f i * g i) := BddAbove.range_mul (M := Mᵒᵈ) hf hg\n\n"}
{"name":"BddBelow.range_add","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"ι : Type u_1\nM : Type u_3\ninst✝³ : Add M\ninst✝² : Preorder M\ninst✝¹ : AddLeftMono M\ninst✝ : AddRightMono M\nf g : ι → M\nhf : BddBelow (Set.range f)\nhg : BddBelow (Set.range g)\n⊢ BddBelow (Set.range fun i => HAdd.hAdd (f i) (g i))","decl":"@[to_additive]\nlemma BddBelow.range_mul (hf : BddBelow (range f)) (hg : BddBelow (range g)) :\n    BddBelow (range fun i ↦ f i * g i) := BddAbove.range_mul (M := Mᵒᵈ) hf hg\n\n"}
{"name":"bddAbove_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\n⊢ Iff (BddAbove (Neg.neg s)) (BddBelow s)","decl":"@[to_additive (attr := simp)]\ntheorem bddAbove_inv : BddAbove s⁻¹ ↔ BddBelow s :=\n  (OrderIso.inv G).bddAbove_preimage\n\n"}
{"name":"bddAbove_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\n⊢ Iff (BddAbove (Inv.inv s)) (BddBelow s)","decl":"@[to_additive (attr := simp)]\ntheorem bddAbove_inv : BddAbove s⁻¹ ↔ BddBelow s :=\n  (OrderIso.inv G).bddAbove_preimage\n\n"}
{"name":"bddBelow_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\n⊢ Iff (BddBelow (Neg.neg s)) (BddAbove s)","decl":"@[to_additive (attr := simp)]\ntheorem bddBelow_inv : BddBelow s⁻¹ ↔ BddAbove s :=\n  (OrderIso.inv G).bddBelow_preimage\n\n"}
{"name":"bddBelow_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\n⊢ Iff (BddBelow (Inv.inv s)) (BddAbove s)","decl":"@[to_additive (attr := simp)]\ntheorem bddBelow_inv : BddBelow s⁻¹ ↔ BddAbove s :=\n  (OrderIso.inv G).bddBelow_preimage\n\n"}
{"name":"BddAbove.inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\nh : BddAbove s\n⊢ BddBelow (Inv.inv s)","decl":"@[to_additive]\ntheorem BddAbove.inv (h : BddAbove s) : BddBelow s⁻¹ :=\n  bddBelow_inv.2 h\n\n"}
{"name":"BddAbove.neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\nh : BddAbove s\n⊢ BddBelow (Neg.neg s)","decl":"@[to_additive]\ntheorem BddAbove.inv (h : BddAbove s) : BddBelow s⁻¹ :=\n  bddBelow_inv.2 h\n\n"}
{"name":"BddBelow.inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\nh : BddBelow s\n⊢ BddAbove (Inv.inv s)","decl":"@[to_additive]\ntheorem BddBelow.inv (h : BddBelow s) : BddAbove s⁻¹ :=\n  bddAbove_inv.2 h\n\n"}
{"name":"BddBelow.neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\nh : BddBelow s\n⊢ BddAbove (Neg.neg s)","decl":"@[to_additive]\ntheorem BddBelow.inv (h : BddBelow s) : BddAbove s⁻¹ :=\n  bddAbove_inv.2 h\n\n"}
{"name":"isLUB_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\na : G\n⊢ Iff (IsLUB (Inv.inv s) a) (IsGLB s (Inv.inv a))","decl":"@[to_additive (attr := simp)]\ntheorem isLUB_inv : IsLUB s⁻¹ a ↔ IsGLB s a⁻¹ :=\n  (OrderIso.inv G).isLUB_preimage\n\n"}
{"name":"isLUB_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\na : G\n⊢ Iff (IsLUB (Neg.neg s) a) (IsGLB s (Neg.neg a))","decl":"@[to_additive (attr := simp)]\ntheorem isLUB_inv : IsLUB s⁻¹ a ↔ IsGLB s a⁻¹ :=\n  (OrderIso.inv G).isLUB_preimage\n\n"}
{"name":"isLUB_inv'","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\na : G\n⊢ Iff (IsLUB (Inv.inv s) (Inv.inv a)) (IsGLB s a)","decl":"@[to_additive]\ntheorem isLUB_inv' : IsLUB s⁻¹ a⁻¹ ↔ IsGLB s a :=\n  (OrderIso.inv G).isLUB_preimage'\n\n"}
{"name":"isLUB_neg'","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\na : G\n⊢ Iff (IsLUB (Neg.neg s) (Neg.neg a)) (IsGLB s a)","decl":"@[to_additive]\ntheorem isLUB_inv' : IsLUB s⁻¹ a⁻¹ ↔ IsGLB s a :=\n  (OrderIso.inv G).isLUB_preimage'\n\n"}
{"name":"IsGLB.inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\na : G\nh : IsGLB s a\n⊢ IsLUB (Inv.inv s) (Inv.inv a)","decl":"@[to_additive]\ntheorem IsGLB.inv (h : IsGLB s a) : IsLUB s⁻¹ a⁻¹ :=\n  isLUB_inv'.2 h\n\n"}
{"name":"IsGLB.neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\na : G\nh : IsGLB s a\n⊢ IsLUB (Neg.neg s) (Neg.neg a)","decl":"@[to_additive]\ntheorem IsGLB.inv (h : IsGLB s a) : IsLUB s⁻¹ a⁻¹ :=\n  isLUB_inv'.2 h\n\n"}
{"name":"isGLB_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\na : G\n⊢ Iff (IsGLB (Inv.inv s) a) (IsLUB s (Inv.inv a))","decl":"@[to_additive (attr := simp)]\ntheorem isGLB_inv : IsGLB s⁻¹ a ↔ IsLUB s a⁻¹ :=\n  (OrderIso.inv G).isGLB_preimage\n\n"}
{"name":"isGLB_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\na : G\n⊢ Iff (IsGLB (Neg.neg s) a) (IsLUB s (Neg.neg a))","decl":"@[to_additive (attr := simp)]\ntheorem isGLB_inv : IsGLB s⁻¹ a ↔ IsLUB s a⁻¹ :=\n  (OrderIso.inv G).isGLB_preimage\n\n"}
{"name":"isGLB_inv'","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\na : G\n⊢ Iff (IsGLB (Inv.inv s) (Inv.inv a)) (IsLUB s a)","decl":"@[to_additive]\ntheorem isGLB_inv' : IsGLB s⁻¹ a⁻¹ ↔ IsLUB s a :=\n  (OrderIso.inv G).isGLB_preimage'\n\n"}
{"name":"isGLB_neg'","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\na : G\n⊢ Iff (IsGLB (Neg.neg s) (Neg.neg a)) (IsLUB s a)","decl":"@[to_additive]\ntheorem isGLB_inv' : IsGLB s⁻¹ a⁻¹ ↔ IsLUB s a :=\n  (OrderIso.inv G).isGLB_preimage'\n\n"}
{"name":"IsLUB.inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\ns : Set G\na : G\nh : IsLUB s a\n⊢ IsGLB (Inv.inv s) (Inv.inv a)","decl":"@[to_additive]\ntheorem IsLUB.inv (h : IsLUB s a) : IsGLB s⁻¹ a⁻¹ :=\n  isGLB_inv'.2 h\n\n"}
{"name":"IsLUB.neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\ns : Set G\na : G\nh : IsLUB s a\n⊢ IsGLB (Neg.neg s) (Neg.neg a)","decl":"@[to_additive]\ntheorem IsLUB.inv (h : IsLUB s a) : IsGLB s⁻¹ a⁻¹ :=\n  isGLB_inv'.2 h\n\n"}
{"name":"BddBelow.range_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\nα : Type u_4\nf : α → G\nhf : BddBelow (Set.range f)\n⊢ BddAbove (Set.range fun x => Inv.inv (f x))","decl":"@[to_additive]\nlemma BddBelow.range_inv {α : Type*} {f : α → G} (hf : BddBelow (range f)) :\n    BddAbove (range (fun x => (f x)⁻¹)) :=\n  hf.range_comp (OrderIso.inv G).monotone\n\n"}
{"name":"BddBelow.range_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\nα : Type u_4\nf : α → G\nhf : BddBelow (Set.range f)\n⊢ BddAbove (Set.range fun x => Neg.neg (f x))","decl":"@[to_additive]\nlemma BddBelow.range_inv {α : Type*} {f : α → G} (hf : BddBelow (range f)) :\n    BddAbove (range (fun x => (f x)⁻¹)) :=\n  hf.range_comp (OrderIso.inv G).monotone\n\n"}
{"name":"BddAbove.range_neg","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : AddGroup G\ninst✝² : Preorder G\ninst✝¹ : AddLeftMono G\ninst✝ : AddRightMono G\nα : Type u_4\nf : α → G\nhf : BddAbove (Set.range f)\n⊢ BddBelow (Set.range fun x => Neg.neg (f x))","decl":"@[to_additive]\nlemma BddAbove.range_inv {α : Type*} {f : α → G} (hf : BddAbove (range f)) :\n    BddBelow (range (fun x => (f x)⁻¹)) :=\n  BddBelow.range_inv (G := Gᵒᵈ) hf\n\n"}
{"name":"BddAbove.range_inv","module":"Mathlib.Algebra.Order.Group.Pointwise.Bounds","initialProofState":"G : Type u_2\ninst✝³ : Group G\ninst✝² : Preorder G\ninst✝¹ : MulLeftMono G\ninst✝ : MulRightMono G\nα : Type u_4\nf : α → G\nhf : BddAbove (Set.range f)\n⊢ BddBelow (Set.range fun x => Inv.inv (f x))","decl":"@[to_additive]\nlemma BddAbove.range_inv {α : Type*} {f : α → G} (hf : BddAbove (range f)) :\n    BddBelow (range (fun x => (f x)⁻¹)) :=\n  BddBelow.range_inv (G := Gᵒᵈ) hf\n\n"}
