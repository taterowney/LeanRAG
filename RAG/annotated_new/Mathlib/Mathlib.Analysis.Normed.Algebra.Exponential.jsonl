{"name":"NormedSpace.expSeries_eq_ofScalars","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\n⊢ Eq (NormedSpace.expSeries 𝕂 𝔸) (FormalMultilinearSeries.ofScalars 𝔸 fun n => Inv.inv ↑n.factorial)","decl":"/-- The exponential series as an `ofScalars` series. -/\ntheorem expSeries_eq_ofScalars : expSeries 𝕂 𝔸 = ofScalars 𝔸 fun n ↦ (n !⁻¹ : 𝕂) := by\n  simp_rw [FormalMultilinearSeries.ext_iff, expSeries, ofScalars, implies_true]\n\n"}
{"name":"NormedSpace.expSeries_apply_eq","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nx : 𝔸\nn : Nat\n⊢ Eq ((NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) (HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n))","decl":"theorem expSeries_apply_eq (x : 𝔸) (n : ℕ) :\n    (expSeries 𝕂 𝔸 n fun _ => x) = (n !⁻¹ : 𝕂) • x ^ n := by simp [expSeries]\n\n"}
{"name":"NormedSpace.expSeries_apply_eq'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nx : 𝔸\n⊢ Eq (fun n => (NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n)","decl":"theorem expSeries_apply_eq' (x : 𝔸) :\n    (fun n => expSeries 𝕂 𝔸 n fun _ => x) = fun n => (n !⁻¹ : 𝕂) • x ^ n :=\n  funext (expSeries_apply_eq x)\n\n"}
{"name":"NormedSpace.expSeries_sum_eq","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nx : 𝔸\n⊢ Eq ((NormedSpace.expSeries 𝕂 𝔸).sum x) (tsum fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n))","decl":"theorem expSeries_sum_eq (x : 𝔸) : (expSeries 𝕂 𝔸).sum x = ∑' n : ℕ, (n !⁻¹ : 𝕂) • x ^ n :=\n  tsum_congr fun n => expSeries_apply_eq x n\n\n"}
{"name":"NormedSpace.exp_eq_tsum","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\n⊢ Eq (NormedSpace.exp 𝕂) fun x => tsum fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n)","decl":"theorem exp_eq_tsum : exp 𝕂 = fun x : 𝔸 => ∑' n : ℕ, (n !⁻¹ : 𝕂) • x ^ n :=\n  funext expSeries_sum_eq\n\n"}
{"name":"NormedSpace.exp_eq_ofScalarsSum","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\n⊢ Eq (NormedSpace.exp 𝕂) (FormalMultilinearSeries.ofScalarsSum fun n => Inv.inv ↑n.factorial)","decl":"/-- The exponential sum as an `ofScalarsSum`. -/\ntheorem exp_eq_ofScalarsSum : exp 𝕂 = ofScalarsSum (E := 𝔸) fun n ↦ (n !⁻¹ : 𝕂) := by\n  rw [exp_eq_tsum, ofScalarsSum_eq_tsum]\n\n"}
{"name":"NormedSpace.expSeries_apply_zero","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nn : Nat\n⊢ Eq ((NormedSpace.expSeries 𝕂 𝔸 n) fun x => 0) (Pi.single 0 1 n)","decl":"theorem expSeries_apply_zero (n : ℕ) :\n    (expSeries 𝕂 𝔸 n fun _ => (0 : 𝔸)) = Pi.single (f := fun _ => 𝔸) 0 1 n := by\n  rw [expSeries_apply_eq]\n  cases' n with n\n  · rw [pow_zero, Nat.factorial_zero, Nat.cast_one, inv_one, one_smul, Pi.single_eq_same]\n  · rw [zero_pow (Nat.succ_ne_zero _), smul_zero, Pi.single_eq_of_ne n.succ_ne_zero]\n\n"}
{"name":"NormedSpace.exp_zero","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 0) 1","decl":"@[simp]\ntheorem exp_zero : exp 𝕂 (0 : 𝔸) = 1 := by\n  simp_rw [exp_eq_tsum, ← expSeries_apply_eq, expSeries_apply_zero, tsum_pi_single]\n\n"}
{"name":"NormedSpace.exp_op","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : Field 𝕂\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : TopologicalSpace 𝔸\ninst✝¹ : TopologicalRing 𝔸\ninst✝ : T2Space 𝔸\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (MulOpposite.op x)) (MulOpposite.op (NormedSpace.exp 𝕂 x))","decl":"@[simp]\ntheorem exp_op [T2Space 𝔸] (x : 𝔸) : exp 𝕂 (MulOpposite.op x) = MulOpposite.op (exp 𝕂 x) := by\n  simp_rw [exp, expSeries_sum_eq, ← MulOpposite.op_pow, ← MulOpposite.op_smul, tsum_op]\n\n"}
{"name":"NormedSpace.exp_unop","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : Field 𝕂\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : TopologicalSpace 𝔸\ninst✝¹ : TopologicalRing 𝔸\ninst✝ : T2Space 𝔸\nx : MulOpposite 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (MulOpposite.unop x)) (MulOpposite.unop (NormedSpace.exp 𝕂 x))","decl":"@[simp]\ntheorem exp_unop [T2Space 𝔸] (x : 𝔸ᵐᵒᵖ) :\n    exp 𝕂 (MulOpposite.unop x) = MulOpposite.unop (exp 𝕂 x) := by\n  simp_rw [exp, expSeries_sum_eq, ← MulOpposite.unop_pow, ← MulOpposite.unop_smul, tsum_unop]\n\n"}
{"name":"NormedSpace.star_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁷ : Field 𝕂\ninst✝⁶ : Ring 𝔸\ninst✝⁵ : Algebra 𝕂 𝔸\ninst✝⁴ : TopologicalSpace 𝔸\ninst✝³ : TopologicalRing 𝔸\ninst✝² : T2Space 𝔸\ninst✝¹ : StarRing 𝔸\ninst✝ : ContinuousStar 𝔸\nx : 𝔸\n⊢ Eq (Star.star (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 (Star.star x))","decl":"theorem star_exp [T2Space 𝔸] [StarRing 𝔸] [ContinuousStar 𝔸] (x : 𝔸) :\n    star (exp 𝕂 x) = exp 𝕂 (star x) := by\n  simp_rw [exp_eq_tsum, ← star_pow, ← star_inv_natCast_smul, ← tsum_star]\n\n"}
{"name":"IsSelfAdjoint.exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁷ : Field 𝕂\ninst✝⁶ : Ring 𝔸\ninst✝⁵ : Algebra 𝕂 𝔸\ninst✝⁴ : TopologicalSpace 𝔸\ninst✝³ : TopologicalRing 𝔸\ninst✝² : T2Space 𝔸\ninst✝¹ : StarRing 𝔸\ninst✝ : ContinuousStar 𝔸\nx : 𝔸\nh : IsSelfAdjoint x\n⊢ IsSelfAdjoint (NormedSpace.exp 𝕂 x)","decl":"@[aesop safe apply]\ntheorem _root_.IsSelfAdjoint.exp [T2Space 𝔸] [StarRing 𝔸] [ContinuousStar 𝔸] {x : 𝔸}\n    (h : IsSelfAdjoint x) : IsSelfAdjoint (exp 𝕂 x) :=\n  (star_exp x).trans <| h.symm ▸ rfl\n\n"}
{"name":"Commute.exp_right","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : Field 𝕂\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : TopologicalSpace 𝔸\ninst✝¹ : TopologicalRing 𝔸\ninst✝ : T2Space 𝔸\nx y : 𝔸\nh : Commute x y\n⊢ Commute x (NormedSpace.exp 𝕂 y)","decl":"theorem _root_.Commute.exp_right [T2Space 𝔸] {x y : 𝔸} (h : Commute x y) :\n    Commute x (exp 𝕂 y) := by\n  rw [exp_eq_tsum]\n  exact Commute.tsum_right x fun n => (h.pow_right n).smul_right _\n\n"}
{"name":"Commute.exp_left","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : Field 𝕂\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : TopologicalSpace 𝔸\ninst✝¹ : TopologicalRing 𝔸\ninst✝ : T2Space 𝔸\nx y : 𝔸\nh : Commute x y\n⊢ Commute (NormedSpace.exp 𝕂 x) y","decl":"theorem _root_.Commute.exp_left [T2Space 𝔸] {x y : 𝔸} (h : Commute x y) : Commute (exp 𝕂 x) y :=\n  (h.symm.exp_right 𝕂).symm\n\n"}
{"name":"Commute.exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : Field 𝕂\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : TopologicalSpace 𝔸\ninst✝¹ : TopologicalRing 𝔸\ninst✝ : T2Space 𝔸\nx y : 𝔸\nh : Commute x y\n⊢ Commute (NormedSpace.exp 𝕂 x) (NormedSpace.exp 𝕂 y)","decl":"theorem _root_.Commute.exp [T2Space 𝔸] {x y : 𝔸} (h : Commute x y) : Commute (exp 𝕂 x) (exp 𝕂 y) :=\n  (h.exp_left _).exp_right _\n\n"}
{"name":"NormedSpace.expSeries_apply_eq_div","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : DivisionRing 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nx : 𝔸\nn : Nat\n⊢ Eq ((NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) (HDiv.hDiv (HPow.hPow x n) ↑n.factorial)","decl":"theorem expSeries_apply_eq_div (x : 𝔸) (n : ℕ) : (expSeries 𝕂 𝔸 n fun _ => x) = x ^ n / n ! := by\n  rw [div_eq_mul_inv, ← (Nat.cast_commute n ! (x ^ n)).inv_left₀.eq, ← smul_eq_mul,\n    expSeries_apply_eq, inv_natCast_smul_eq 𝕂 𝔸]\n\n"}
{"name":"NormedSpace.expSeries_apply_eq_div'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : DivisionRing 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nx : 𝔸\n⊢ Eq (fun n => (NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial","decl":"theorem expSeries_apply_eq_div' (x : 𝔸) :\n    (fun n => expSeries 𝕂 𝔸 n fun _ => x) = fun n => x ^ n / n ! :=\n  funext (expSeries_apply_eq_div x)\n\n"}
{"name":"NormedSpace.expSeries_sum_eq_div","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : DivisionRing 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nx : 𝔸\n⊢ Eq ((NormedSpace.expSeries 𝕂 𝔸).sum x) (tsum fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial)","decl":"theorem expSeries_sum_eq_div (x : 𝔸) : (expSeries 𝕂 𝔸).sum x = ∑' n : ℕ, x ^ n / n ! :=\n  tsum_congr (expSeries_apply_eq_div x)\n\n"}
{"name":"NormedSpace.exp_eq_tsum_div","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : DivisionRing 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\n⊢ Eq (NormedSpace.exp 𝕂) fun x => tsum fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial","decl":"theorem exp_eq_tsum_div : exp 𝕂 = fun x : 𝔸 => ∑' n : ℕ, x ^ n / n ! :=\n  funext expSeries_sum_eq_div\n\n"}
{"name":"NormedSpace.norm_expSeries_summable_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : NontriviallyNormedField 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Summable fun n => Norm.norm ((NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x)","decl":"theorem norm_expSeries_summable_of_mem_ball (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    Summable fun n => ‖expSeries 𝕂 𝔸 n fun _ => x‖ :=\n  (expSeries 𝕂 𝔸).summable_norm_apply hx\n\n"}
{"name":"NormedSpace.norm_expSeries_summable_of_mem_ball'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : NontriviallyNormedField 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Summable fun n => Norm.norm (HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n))","decl":"theorem norm_expSeries_summable_of_mem_ball' (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    Summable fun n => ‖(n !⁻¹ : 𝕂) • x ^ n‖ := by\n  change Summable (norm ∘ _)\n  rw [← expSeries_apply_eq']\n  exact norm_expSeries_summable_of_mem_ball x hx\n\n"}
{"name":"NormedSpace.expSeries_summable_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Summable fun n => (NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x","decl":"theorem expSeries_summable_of_mem_ball (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    Summable fun n => expSeries 𝕂 𝔸 n fun _ => x :=\n  (norm_expSeries_summable_of_mem_ball x hx).of_norm\n\n"}
{"name":"NormedSpace.expSeries_summable_of_mem_ball'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Summable fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n)","decl":"theorem expSeries_summable_of_mem_ball' (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    Summable fun n => (n !⁻¹ : 𝕂) • x ^ n :=\n  (norm_expSeries_summable_of_mem_ball' x hx).of_norm\n\n"}
{"name":"NormedSpace.expSeries_hasSum_exp_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ HasSum (fun n => (NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) (NormedSpace.exp 𝕂 x)","decl":"theorem expSeries_hasSum_exp_of_mem_ball (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasSum (fun n => expSeries 𝕂 𝔸 n fun _ => x) (exp 𝕂 x) :=\n  FormalMultilinearSeries.hasSum (expSeries 𝕂 𝔸) hx\n\n"}
{"name":"NormedSpace.expSeries_hasSum_exp_of_mem_ball'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ HasSum (fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n)) (NormedSpace.exp 𝕂 x)","decl":"theorem expSeries_hasSum_exp_of_mem_ball' (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasSum (fun n => (n !⁻¹ : 𝕂) • x ^ n) (exp 𝕂 x) := by\n  rw [← expSeries_apply_eq']\n  exact expSeries_hasSum_exp_of_mem_ball x hx\n\n"}
{"name":"NormedSpace.hasFPowerSeriesOnBall_exp_of_radius_pos","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nh : LT.lt 0 (NormedSpace.expSeries 𝕂 𝔸).radius\n⊢ HasFPowerSeriesOnBall (NormedSpace.exp 𝕂) (NormedSpace.expSeries 𝕂 𝔸) 0 (NormedSpace.expSeries 𝕂 𝔸).radius","decl":"theorem hasFPowerSeriesOnBall_exp_of_radius_pos (h : 0 < (expSeries 𝕂 𝔸).radius) :\n    HasFPowerSeriesOnBall (exp 𝕂) (expSeries 𝕂 𝔸) 0 (expSeries 𝕂 𝔸).radius :=\n  (expSeries 𝕂 𝔸).hasFPowerSeriesOnBall h\n\n"}
{"name":"NormedSpace.hasFPowerSeriesAt_exp_zero_of_radius_pos","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nh : LT.lt 0 (NormedSpace.expSeries 𝕂 𝔸).radius\n⊢ HasFPowerSeriesAt (NormedSpace.exp 𝕂) (NormedSpace.expSeries 𝕂 𝔸) 0","decl":"theorem hasFPowerSeriesAt_exp_zero_of_radius_pos (h : 0 < (expSeries 𝕂 𝔸).radius) :\n    HasFPowerSeriesAt (exp 𝕂) (expSeries 𝕂 𝔸) 0 :=\n  (hasFPowerSeriesOnBall_exp_of_radius_pos h).hasFPowerSeriesAt\n\n"}
{"name":"NormedSpace.continuousOn_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\n⊢ ContinuousOn (NormedSpace.exp 𝕂) (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius)","decl":"theorem continuousOn_exp : ContinuousOn (exp 𝕂 : 𝔸 → 𝔸) (EMetric.ball 0 (expSeries 𝕂 𝔸).radius) :=\n  FormalMultilinearSeries.continuousOn\n\n"}
{"name":"NormedSpace.analyticAt_exp_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ AnalyticAt 𝕂 (NormedSpace.exp 𝕂) x","decl":"theorem analyticAt_exp_of_mem_ball (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    AnalyticAt 𝕂 (exp 𝕂) x := by\n  by_cases h : (expSeries 𝕂 𝔸).radius = 0\n  · rw [h] at hx; exact (ENNReal.not_lt_zero hx).elim\n  · have h := pos_iff_ne_zero.mpr h\n    exact (hasFPowerSeriesOnBall_exp_of_radius_pos h).analyticAt_of_mem hx\n\n"}
{"name":"NormedSpace.exp_add_of_commute_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : NormedRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CharZero 𝕂\nx y : 𝔸\nhxy : Commute x y\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\nhy : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) y\n⊢ Eq (NormedSpace.exp 𝕂 (HAdd.hAdd x y)) (HMul.hMul (NormedSpace.exp 𝕂 x) (NormedSpace.exp 𝕂 y))","decl":"/-- In a Banach-algebra `𝔸` over a normed field `𝕂` of characteristic zero, if `x` and `y` are\nin the disk of convergence and commute, then\n`NormedSpace.exp 𝕂 (x + y) = (NormedSpace.exp 𝕂 x) * (NormedSpace.exp 𝕂 y)`. -/\ntheorem exp_add_of_commute_of_mem_ball [CharZero 𝕂] {x y : 𝔸} (hxy : Commute x y)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius)\n    (hy : y ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y := by\n  rw [exp_eq_tsum,\n    tsum_mul_tsum_eq_tsum_sum_antidiagonal_of_summable_norm\n      (norm_expSeries_summable_of_mem_ball' x hx) (norm_expSeries_summable_of_mem_ball' y hy)]\n  dsimp only\n  conv_lhs =>\n    congr\n    ext\n    rw [hxy.add_pow' _, Finset.smul_sum]\n  refine tsum_congr fun n => Finset.sum_congr rfl fun kl hkl => ?_\n  rw [← Nat.cast_smul_eq_nsmul 𝕂, smul_smul, smul_mul_smul_comm, ← Finset.mem_antidiagonal.mp hkl,\n    Nat.cast_add_choose, Finset.mem_antidiagonal.mp hkl]\n  congr 1\n  have : (n ! : 𝕂) ≠ 0 := Nat.cast_ne_zero.mpr n.factorial_ne_zero\n  field_simp [this]\n\n"}
{"name":"NormedSpace.isUnit_exp_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : NormedRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CharZero 𝕂\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ IsUnit (NormedSpace.exp 𝕂 x)","decl":"theorem isUnit_exp_of_mem_ball [CharZero 𝕂] {x : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) : IsUnit (exp 𝕂 x) :=\n  @isUnit_of_invertible _ _ _ (invertibleExpOfMemBall hx)\n\n"}
{"name":"NormedSpace.invOf_exp_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : NontriviallyNormedField 𝕂\ninst✝⁴ : NormedRing 𝔸\ninst✝³ : NormedAlgebra 𝕂 𝔸\ninst✝² : CompleteSpace 𝔸\ninst✝¹ : CharZero 𝕂\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\ninst✝ : Invertible (NormedSpace.exp 𝕂 x)\n⊢ Eq (Invertible.invOf (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 (Neg.neg x))","decl":"theorem invOf_exp_of_mem_ball [CharZero 𝕂] {x : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) [Invertible (exp 𝕂 x)] :\n    ⅟ (exp 𝕂 x) = exp 𝕂 (-x) := by\n  letI := invertibleExpOfMemBall hx; convert (rfl : ⅟ (exp 𝕂 x) = _)\n\n"}
{"name":"NormedSpace.map_exp_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\n𝔹 : Type u_3\ninst✝⁷ : NontriviallyNormedField 𝕂\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedRing 𝔹\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : NormedAlgebra 𝕂 𝔹\ninst✝² : CompleteSpace 𝔸\nF : Type u_4\ninst✝¹ : FunLike F 𝔸 𝔹\ninst✝ : RingHomClass F 𝔸 𝔹\nf : F\nhf : Continuous ⇑f\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Eq (f (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 (f x))","decl":"/-- Any continuous ring homomorphism commutes with `NormedSpace.exp`. -/\ntheorem map_exp_of_mem_ball {F} [FunLike F 𝔸 𝔹] [RingHomClass F 𝔸 𝔹] (f : F) (hf : Continuous f)\n    (x : 𝔸) (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    f (exp 𝕂 x) = exp 𝕂 (f x) := by\n  rw [exp_eq_tsum, exp_eq_tsum]\n  refine ((expSeries_summable_of_mem_ball' _ hx).hasSum.map f hf).tsum_eq.symm.trans ?_\n  dsimp only [Function.comp_def]\n  simp_rw [map_inv_natCast_smul f 𝕂 𝕂, map_pow]\n\n"}
{"name":"NormedSpace.algebraMap_exp_comm_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝕂\nx : 𝕂\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝕂).radius) x\n⊢ Eq ((algebraMap 𝕂 𝔸) (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 ((algebraMap 𝕂 𝔸) x))","decl":"theorem algebraMap_exp_comm_of_mem_ball [CompleteSpace 𝕂] (x : 𝕂)\n    (hx : x ∈ EMetric.ball (0 : 𝕂) (expSeries 𝕂 𝕂).radius) :\n    algebraMap 𝕂 𝔸 (exp 𝕂 x) = exp 𝕂 (algebraMap 𝕂 𝔸 x) :=\n  map_exp_of_mem_ball _ (continuous_algebraMap 𝕂 𝔸) _ hx\n\n"}
{"name":"NormedSpace.norm_expSeries_div_summable_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : NontriviallyNormedField 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Summable fun n => Norm.norm (HDiv.hDiv (HPow.hPow x n) ↑n.factorial)","decl":"theorem norm_expSeries_div_summable_of_mem_ball (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    Summable fun n => ‖x ^ n / (n ! : 𝔸)‖ := by\n  change Summable (norm ∘ _)\n  rw [← expSeries_apply_eq_div' (𝕂 := 𝕂) x]\n  exact norm_expSeries_summable_of_mem_ball x hx\n\n"}
{"name":"NormedSpace.expSeries_div_summable_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Summable fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial","decl":"theorem expSeries_div_summable_of_mem_ball [CompleteSpace 𝔸] (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) : Summable fun n => x ^ n / n ! :=\n  (norm_expSeries_div_summable_of_mem_ball 𝕂 x hx).of_norm\n\n"}
{"name":"NormedSpace.expSeries_div_hasSum_exp_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : NontriviallyNormedField 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ HasSum (fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial) (NormedSpace.exp 𝕂 x)","decl":"theorem expSeries_div_hasSum_exp_of_mem_ball [CompleteSpace 𝔸] (x : 𝔸)\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) :\n    HasSum (fun n => x ^ n / n !) (exp 𝕂 x) := by\n  rw [← expSeries_apply_eq_div' (𝕂 := 𝕂) x]\n  exact expSeries_hasSum_exp_of_mem_ball x hx\n\n"}
{"name":"NormedSpace.exp_neg_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : NormedDivisionRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CharZero 𝕂\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\n⊢ Eq (NormedSpace.exp 𝕂 (Neg.neg x)) (Inv.inv (NormedSpace.exp 𝕂 x))","decl":"theorem exp_neg_of_mem_ball [CharZero 𝕂] [CompleteSpace 𝔸] {x : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) : exp 𝕂 (-x) = (exp 𝕂 x)⁻¹ :=\n  letI := invertibleExpOfMemBall hx\n  invOf_eq_inv (exp 𝕂 x)\n\n"}
{"name":"NormedSpace.exp_add_of_mem_ball","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕂\ninst✝³ : NormedCommRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CharZero 𝕂\nx y : 𝔸\nhx : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) x\nhy : Membership.mem (EMetric.ball 0 (NormedSpace.expSeries 𝕂 𝔸).radius) y\n⊢ Eq (NormedSpace.exp 𝕂 (HAdd.hAdd x y)) (HMul.hMul (NormedSpace.exp 𝕂 x) (NormedSpace.exp 𝕂 y))","decl":"/-- In a commutative Banach-algebra `𝔸` over a normed field `𝕂` of characteristic zero,\n`NormedSpace.exp 𝕂 (x+y) = (NormedSpace.exp 𝕂 x) * (NormedSpace.exp 𝕂 y)`\nfor all `x`, `y` in the disk of convergence. -/\ntheorem exp_add_of_mem_ball [CharZero 𝕂] {x y : 𝔸}\n    (hx : x ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius)\n    (hy : y ∈ EMetric.ball (0 : 𝔸) (expSeries 𝕂 𝔸).radius) : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  exp_add_of_commute_of_mem_ball (Commute.all x y) hx hy\n\n"}
{"name":"NormedSpace.expSeries_radius_eq_top","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\n⊢ Eq (NormedSpace.expSeries 𝕂 𝔸).radius Top.top","decl":"/-- In a normed algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`, the series defining the exponential map\nhas an infinite radius of convergence. -/\ntheorem expSeries_radius_eq_top : (expSeries 𝕂 𝔸).radius = ∞ := by\n  have {n : ℕ} : (Nat.factorial n : 𝕂) ≠ 0 := Nat.cast_ne_zero.mpr (Nat.factorial_ne_zero n)\n  apply expSeries_eq_ofScalars 𝕂 𝔸 ▸\n    ofScalars_radius_eq_top_of_tendsto 𝔸 _ (Eventually.of_forall fun n => ?_)\n  · simp_rw [← norm_div, Nat.factorial_succ, Nat.cast_mul, mul_inv_rev, mul_div_right_comm,\n      inv_div_inv, norm_mul, div_self this, norm_one, one_mul]\n    apply norm_zero (E := 𝕂) ▸ Filter.Tendsto.norm\n    apply (Filter.tendsto_add_atTop_iff_nat (f := fun n => (n : 𝕂)⁻¹) 1).mpr\n    exact RCLike.tendsto_inverse_atTop_nhds_zero_nat 𝕂\n  · simp [this]\n\n"}
{"name":"NormedSpace.expSeries_radius_pos","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\n⊢ LT.lt 0 (NormedSpace.expSeries 𝕂 𝔸).radius","decl":"theorem expSeries_radius_pos : 0 < (expSeries 𝕂 𝔸).radius := by\n  rw [expSeries_radius_eq_top]\n  exact WithTop.top_pos\n\n"}
{"name":"NormedSpace.norm_expSeries_summable","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝔸\n⊢ Summable fun n => Norm.norm ((NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x)","decl":"theorem norm_expSeries_summable (x : 𝔸) : Summable fun n => ‖expSeries 𝕂 𝔸 n fun _ => x‖ :=\n  norm_expSeries_summable_of_mem_ball x ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.norm_expSeries_summable'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝔸\n⊢ Summable fun n => Norm.norm (HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n))","decl":"theorem norm_expSeries_summable' (x : 𝔸) : Summable fun n => ‖(n !⁻¹ : 𝕂) • x ^ n‖ :=\n  norm_expSeries_summable_of_mem_ball' x ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.expSeries_summable","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ Summable fun n => (NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x","decl":"theorem expSeries_summable (x : 𝔸) : Summable fun n => expSeries 𝕂 𝔸 n fun _ => x :=\n  (norm_expSeries_summable x).of_norm\n\n"}
{"name":"NormedSpace.expSeries_summable'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ Summable fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n)","decl":"theorem expSeries_summable' (x : 𝔸) : Summable fun n => (n !⁻¹ : 𝕂) • x ^ n :=\n  (norm_expSeries_summable' x).of_norm\n\n"}
{"name":"NormedSpace.expSeries_hasSum_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ HasSum (fun n => (NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) (NormedSpace.exp 𝕂 x)","decl":"theorem expSeries_hasSum_exp (x : 𝔸) : HasSum (fun n => expSeries 𝕂 𝔸 n fun _ => x) (exp 𝕂 x) :=\n  expSeries_hasSum_exp_of_mem_ball x ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.exp_series_hasSum_exp'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ HasSum (fun n => HSMul.hSMul (Inv.inv ↑n.factorial) (HPow.hPow x n)) (NormedSpace.exp 𝕂 x)","decl":"theorem exp_series_hasSum_exp' (x : 𝔸) : HasSum (fun n => (n !⁻¹ : 𝕂) • x ^ n) (exp 𝕂 x) :=\n  expSeries_hasSum_exp_of_mem_ball' x ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.exp_hasFPowerSeriesOnBall","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\n⊢ HasFPowerSeriesOnBall (NormedSpace.exp 𝕂) (NormedSpace.expSeries 𝕂 𝔸) 0 Top.top","decl":"theorem exp_hasFPowerSeriesOnBall : HasFPowerSeriesOnBall (exp 𝕂) (expSeries 𝕂 𝔸) 0 ∞ :=\n  expSeries_radius_eq_top 𝕂 𝔸 ▸ hasFPowerSeriesOnBall_exp_of_radius_pos (expSeries_radius_pos _ _)\n\n"}
{"name":"NormedSpace.exp_hasFPowerSeriesAt_zero","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\n⊢ HasFPowerSeriesAt (NormedSpace.exp 𝕂) (NormedSpace.expSeries 𝕂 𝔸) 0","decl":"theorem exp_hasFPowerSeriesAt_zero : HasFPowerSeriesAt (exp 𝕂) (expSeries 𝕂 𝔸) 0 :=\n  exp_hasFPowerSeriesOnBall.hasFPowerSeriesAt\n\n"}
{"name":"NormedSpace.exp_continuous","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\n⊢ Continuous (NormedSpace.exp 𝕂)","decl":"@[continuity]\ntheorem exp_continuous : Continuous (exp 𝕂 : 𝔸 → 𝔸) := by\n  rw [continuous_iff_continuousOn_univ, ← Metric.eball_top_eq_univ (0 : 𝔸), ←\n    expSeries_radius_eq_top 𝕂 𝔸]\n  exact continuousOn_exp\n\n"}
{"name":"Filter.Tendsto.exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nα : Type u_4\nl : Filter α\nf : α → 𝔸\na : 𝔸\nhf : Filter.Tendsto f l (nhds a)\n⊢ Filter.Tendsto (fun x => NormedSpace.exp 𝕂 (f x)) l (nhds (NormedSpace.exp 𝕂 a))","decl":"open Topology in\nlemma _root_.Filter.Tendsto.exp {α : Type*} {l : Filter α} {f : α → 𝔸} {a : 𝔸}\n    (hf : Tendsto f l (𝓝 a)) :\n    Tendsto (fun x => exp 𝕂 (f x)) l (𝓝 (exp 𝕂 a)) :=\n  (exp_continuous.tendsto _).comp hf\n\n"}
{"name":"NormedSpace.exp_analytic","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ AnalyticAt 𝕂 (NormedSpace.exp 𝕂) x","decl":"theorem exp_analytic (x : 𝔸) : AnalyticAt 𝕂 (exp 𝕂) x :=\n  analyticAt_exp_of_mem_ball x ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.exp_add_of_commute","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx y : 𝔸\nhxy : Commute x y\n⊢ Eq (NormedSpace.exp 𝕂 (HAdd.hAdd x y)) (HMul.hMul (NormedSpace.exp 𝕂 x) (NormedSpace.exp 𝕂 y))","decl":"/-- In a Banach-algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`, if `x` and `y` commute, then\n`NormedSpace.exp 𝕂 (x+y) = (NormedSpace.exp 𝕂 x) * (NormedSpace.exp 𝕂 y)`. -/\ntheorem exp_add_of_commute {x y : 𝔸} (hxy : Commute x y) : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  exp_add_of_commute_of_mem_ball hxy ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n    ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.isUnit_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ IsUnit (NormedSpace.exp 𝕂 x)","decl":"theorem isUnit_exp (x : 𝔸) : IsUnit (exp 𝕂 x) :=\n  isUnit_exp_of_mem_ball <| (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"NormedSpace.invOf_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : RCLike 𝕂\ninst✝³ : NormedRing 𝔸\ninst✝² : NormedAlgebra 𝕂 𝔸\ninst✝¹ : CompleteSpace 𝔸\nx : 𝔸\ninst✝ : Invertible (NormedSpace.exp 𝕂 x)\n⊢ Eq (Invertible.invOf (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 (Neg.neg x))","decl":"theorem invOf_exp (x : 𝔸) [Invertible (exp 𝕂 x)] : ⅟ (exp 𝕂 x) = exp 𝕂 (-x) :=\n  invOf_exp_of_mem_ball <| (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"Ring.inverse_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ Eq (Ring.inverse (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 (Neg.neg x))","decl":"theorem _root_.Ring.inverse_exp (x : 𝔸) : Ring.inverse (exp 𝕂 x) = exp 𝕂 (-x) :=\n  letI := invertibleExp 𝕂 x\n  Ring.inverse_invertible _\n\n"}
{"name":"NormedSpace.exp_mem_unitary_of_mem_skewAdjoint","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁵ : RCLike 𝕂\ninst✝⁴ : NormedRing 𝔸\ninst✝³ : NormedAlgebra 𝕂 𝔸\ninst✝² : CompleteSpace 𝔸\ninst✝¹ : StarRing 𝔸\ninst✝ : ContinuousStar 𝔸\nx : 𝔸\nh : Membership.mem (skewAdjoint 𝔸) x\n⊢ Membership.mem (unitary 𝔸) (NormedSpace.exp 𝕂 x)","decl":"theorem exp_mem_unitary_of_mem_skewAdjoint [StarRing 𝔸] [ContinuousStar 𝔸] {x : 𝔸}\n    (h : x ∈ skewAdjoint 𝔸) : exp 𝕂 x ∈ unitary 𝔸 := by\n  rw [unitary.mem_iff, star_exp, skewAdjoint.mem_iff.mp h, ←\n    exp_add_of_commute (Commute.refl x).neg_left, ← exp_add_of_commute (Commute.refl x).neg_right,\n    neg_add_cancel, add_neg_cancel, exp_zero, and_self_iff]\n\n"}
{"name":"NormedSpace.exp_sum_of_commute","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nι : Type u_4\ns : Finset ι\nf : ι → 𝔸\nh : (↑s).Pairwise (Function.onFun Commute f)\n⊢ Eq (NormedSpace.exp 𝕂 (s.sum fun i => f i)) (s.noncommProd (fun i => NormedSpace.exp 𝕂 (f i)) ⋯)","decl":"open scoped Function in -- required for scoped `on` notation\n/-- In a Banach-algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`, if a family of elements `f i` mutually\ncommute then `NormedSpace.exp 𝕂 (∑ i, f i) = ∏ i, NormedSpace.exp 𝕂 (f i)`. -/\ntheorem exp_sum_of_commute {ι} (s : Finset ι) (f : ι → 𝔸)\n    (h : (s : Set ι).Pairwise (Commute on f)) :\n    exp 𝕂 (∑ i ∈ s, f i) =\n      s.noncommProd (fun i => exp 𝕂 (f i)) fun _ hi _ hj _ => (h.of_refl hi hj).exp 𝕂 := by\n  classical\n    induction' s using Finset.induction_on with a s ha ih\n    · simp\n    rw [Finset.noncommProd_insert_of_not_mem _ _ _ _ ha, Finset.sum_insert ha, exp_add_of_commute,\n      ih (h.mono <| Finset.subset_insert _ _)]\n    refine Commute.sum_right _ _ _ fun i hi => ?_\n    exact h.of_refl (Finset.mem_insert_self _ _) (Finset.mem_insert_of_mem hi)\n\n"}
{"name":"NormedSpace.exp_nsmul","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nn : Nat\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (HSMul.hSMul n x)) (HPow.hPow (NormedSpace.exp 𝕂 x) n)","decl":"theorem exp_nsmul (n : ℕ) (x : 𝔸) : exp 𝕂 (n • x) = exp 𝕂 x ^ n := by\n  induction n with\n  | zero => rw [zero_smul, pow_zero, exp_zero]\n  | succ n ih => rw [succ_nsmul, pow_succ, exp_add_of_commute ((Commute.refl x).smul_left n), ih]\n\n"}
{"name":"NormedSpace.map_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\n𝔹 : Type u_3\ninst✝⁷ : RCLike 𝕂\ninst✝⁶ : NormedRing 𝔸\ninst✝⁵ : NormedAlgebra 𝕂 𝔸\ninst✝⁴ : NormedRing 𝔹\ninst✝³ : NormedAlgebra 𝕂 𝔹\ninst✝² : CompleteSpace 𝔸\nF : Type u_4\ninst✝¹ : FunLike F 𝔸 𝔹\ninst✝ : RingHomClass F 𝔸 𝔹\nf : F\nhf : Continuous ⇑f\nx : 𝔸\n⊢ Eq (f (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 (f x))","decl":"/-- Any continuous ring homomorphism commutes with `NormedSpace.exp`. -/\ntheorem map_exp {F} [FunLike F 𝔸 𝔹] [RingHomClass F 𝔸 𝔹] (f : F) (hf : Continuous f) (x : 𝔸) :\n    f (exp 𝕂 x) = exp 𝕂 (f x) :=\n  map_exp_of_mem_ball f hf x <| (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"NormedSpace.exp_smul","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁶ : RCLike 𝕂\ninst✝⁵ : NormedRing 𝔸\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : CompleteSpace 𝔸\nG : Type u_4\ninst✝² : Monoid G\ninst✝¹ : MulSemiringAction G 𝔸\ninst✝ : ContinuousConstSMul G 𝔸\ng : G\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (HSMul.hSMul g x)) (HSMul.hSMul g (NormedSpace.exp 𝕂 x))","decl":"theorem exp_smul {G} [Monoid G] [MulSemiringAction G 𝔸] [ContinuousConstSMul G 𝔸] (g : G) (x : 𝔸) :\n    exp 𝕂 (g • x) = g • exp 𝕂 x :=\n  (map_exp 𝕂 (MulSemiringAction.toRingHom G 𝔸 g) (continuous_const_smul g) x).symm\n\n"}
{"name":"NormedSpace.exp_units_conj","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\ny : Units 𝔸\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (HMul.hMul (HMul.hMul (↑y) x) ↑(Inv.inv y))) (HMul.hMul (HMul.hMul (↑y) (NormedSpace.exp 𝕂 x)) ↑(Inv.inv y))","decl":"theorem exp_units_conj (y : 𝔸ˣ) (x : 𝔸) : exp 𝕂 (y * x * ↑y⁻¹ : 𝔸) = y * exp 𝕂 x * ↑y⁻¹ :=\n  exp_smul _ (ConjAct.toConjAct y) x\n\n"}
{"name":"NormedSpace.exp_units_conj'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\ny : Units 𝔸\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (HMul.hMul (HMul.hMul (↑(Inv.inv y)) x) ↑y)) (HMul.hMul (HMul.hMul (↑(Inv.inv y)) (NormedSpace.exp 𝕂 x)) ↑y)","decl":"theorem exp_units_conj' (y : 𝔸ˣ) (x : 𝔸) : exp 𝕂 (↑y⁻¹ * x * y) = ↑y⁻¹ * exp 𝕂 x * y :=\n  exp_units_conj _ _ _\n\n"}
{"name":"Prod.fst_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\n𝔹 : Type u_3\ninst✝⁶ : RCLike 𝕂\ninst✝⁵ : NormedRing 𝔸\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : NormedRing 𝔹\ninst✝² : NormedAlgebra 𝕂 𝔹\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CompleteSpace 𝔹\nx : Prod 𝔸 𝔹\n⊢ Eq (NormedSpace.exp 𝕂 x).1 (NormedSpace.exp 𝕂 x.1)","decl":"@[simp]\ntheorem _root_.Prod.fst_exp [CompleteSpace 𝔹] (x : 𝔸 × 𝔹) : (exp 𝕂 x).fst = exp 𝕂 x.fst :=\n  map_exp _ (RingHom.fst 𝔸 𝔹) continuous_fst x\n\n"}
{"name":"Prod.snd_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\n𝔹 : Type u_3\ninst✝⁶ : RCLike 𝕂\ninst✝⁵ : NormedRing 𝔸\ninst✝⁴ : NormedAlgebra 𝕂 𝔸\ninst✝³ : NormedRing 𝔹\ninst✝² : NormedAlgebra 𝕂 𝔹\ninst✝¹ : CompleteSpace 𝔸\ninst✝ : CompleteSpace 𝔹\nx : Prod 𝔸 𝔹\n⊢ Eq (NormedSpace.exp 𝕂 x).2 (NormedSpace.exp 𝕂 x.2)","decl":"@[simp]\ntheorem _root_.Prod.snd_exp [CompleteSpace 𝔹] (x : 𝔸 × 𝔹) : (exp 𝕂 x).snd = exp 𝕂 x.snd :=\n  map_exp _ (RingHom.snd 𝔸 𝔹) continuous_snd x\n\n"}
{"name":"Pi.coe_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nι : Type u_4\n𝔸 : ι → Type u_5\ninst✝³ : Finite ι\ninst✝² : (i : ι) → NormedRing (𝔸 i)\ninst✝¹ : (i : ι) → NormedAlgebra 𝕂 (𝔸 i)\ninst✝ : ∀ (i : ι), CompleteSpace (𝔸 i)\nx : (i : ι) → 𝔸 i\ni : ι\n⊢ Eq (NormedSpace.exp 𝕂 x i) (NormedSpace.exp 𝕂 (x i))","decl":"@[simp]\ntheorem _root_.Pi.coe_exp {ι : Type*} {𝔸 : ι → Type*} [Finite ι] [∀ i, NormedRing (𝔸 i)]\n    [∀ i, NormedAlgebra 𝕂 (𝔸 i)] [∀ i, CompleteSpace (𝔸 i)] (x : ∀ i, 𝔸 i) (i : ι) :\n    exp 𝕂 x i = exp 𝕂 (x i) :=\n  let ⟨_⟩ := nonempty_fintype ι\n  map_exp _ (Pi.evalRingHom 𝔸 i) (continuous_apply _) x\n\n"}
{"name":"Pi.exp_def","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝⁴ : RCLike 𝕂\nι : Type u_4\n𝔸 : ι → Type u_5\ninst✝³ : Finite ι\ninst✝² : (i : ι) → NormedRing (𝔸 i)\ninst✝¹ : (i : ι) → NormedAlgebra 𝕂 (𝔸 i)\ninst✝ : ∀ (i : ι), CompleteSpace (𝔸 i)\nx : (i : ι) → 𝔸 i\n⊢ Eq (NormedSpace.exp 𝕂 x) fun i => NormedSpace.exp 𝕂 (x i)","decl":"theorem _root_.Pi.exp_def {ι : Type*} {𝔸 : ι → Type*} [Finite ι] [∀ i, NormedRing (𝔸 i)]\n    [∀ i, NormedAlgebra 𝕂 (𝔸 i)] [∀ i, CompleteSpace (𝔸 i)] (x : ∀ i, 𝔸 i) :\n    exp 𝕂 x = fun i => exp 𝕂 (x i) :=\n  funext <| Pi.coe_exp 𝕂 x\n\n"}
{"name":"Function.update_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\ninst✝⁵ : RCLike 𝕂\nι : Type u_4\n𝔸 : ι → Type u_5\ninst✝⁴ : Finite ι\ninst✝³ : DecidableEq ι\ninst✝² : (i : ι) → NormedRing (𝔸 i)\ninst✝¹ : (i : ι) → NormedAlgebra 𝕂 (𝔸 i)\ninst✝ : ∀ (i : ι), CompleteSpace (𝔸 i)\nx : (i : ι) → 𝔸 i\nj : ι\nxj : 𝔸 j\n⊢ Eq (Function.update (NormedSpace.exp 𝕂 x) j (NormedSpace.exp 𝕂 xj)) (NormedSpace.exp 𝕂 (Function.update x j xj))","decl":"theorem _root_.Function.update_exp {ι : Type*} {𝔸 : ι → Type*} [Finite ι] [DecidableEq ι]\n    [∀ i, NormedRing (𝔸 i)] [∀ i, NormedAlgebra 𝕂 (𝔸 i)] [∀ i, CompleteSpace (𝔸 i)] (x : ∀ i, 𝔸 i)\n    (j : ι) (xj : 𝔸 j) :\n    Function.update (exp 𝕂 x) j (exp 𝕂 xj) = exp 𝕂 (Function.update x j xj) := by\n  ext i\n  simp_rw [Pi.exp_def]\n  exact (Function.apply_update (fun i => exp 𝕂) x j xj i).symm\n\n"}
{"name":"NormedSpace.algebraMap_exp_comm","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝕂\n⊢ Eq ((algebraMap 𝕂 𝔸) (NormedSpace.exp 𝕂 x)) (NormedSpace.exp 𝕂 ((algebraMap 𝕂 𝔸) x))","decl":"theorem algebraMap_exp_comm (x : 𝕂) : algebraMap 𝕂 𝔸 (exp 𝕂 x) = exp 𝕂 (algebraMap 𝕂 𝔸 x) :=\n  algebraMap_exp_comm_of_mem_ball x <| (expSeries_radius_eq_top 𝕂 𝕂).symm ▸ edist_lt_top _ _\n\n"}
{"name":"NormedSpace.norm_expSeries_div_summable","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nx : 𝔸\n⊢ Summable fun n => Norm.norm (HDiv.hDiv (HPow.hPow x n) ↑n.factorial)","decl":"theorem norm_expSeries_div_summable (x : 𝔸) : Summable fun n => ‖(x ^ n / n ! : 𝔸)‖ :=\n  norm_expSeries_div_summable_of_mem_ball 𝕂 x\n    ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.expSeries_div_summable","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ Summable fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial","decl":"theorem expSeries_div_summable (x : 𝔸) : Summable fun n => x ^ n / n ! :=\n  (norm_expSeries_div_summable 𝕂 x).of_norm\n\n"}
{"name":"NormedSpace.expSeries_div_hasSum_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ HasSum (fun n => HDiv.hDiv (HPow.hPow x n) ↑n.factorial) (NormedSpace.exp 𝕂 x)","decl":"theorem expSeries_div_hasSum_exp (x : 𝔸) : HasSum (fun n => x ^ n / n !) (exp 𝕂 x) :=\n  expSeries_div_hasSum_exp_of_mem_ball 𝕂 x ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.exp_neg","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (Neg.neg x)) (Inv.inv (NormedSpace.exp 𝕂 x))","decl":"theorem exp_neg (x : 𝔸) : exp 𝕂 (-x) = (exp 𝕂 x)⁻¹ :=\n  exp_neg_of_mem_ball <| (expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _\n\n"}
{"name":"NormedSpace.exp_zsmul","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nz : Int\nx : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (HSMul.hSMul z x)) (HPow.hPow (NormedSpace.exp 𝕂 x) z)","decl":"theorem exp_zsmul (z : ℤ) (x : 𝔸) : exp 𝕂 (z • x) = exp 𝕂 x ^ z := by\n  obtain ⟨n, rfl | rfl⟩ := z.eq_nat_or_neg\n  · rw [zpow_natCast, natCast_zsmul, exp_nsmul]\n  · rw [zpow_neg, zpow_natCast, neg_smul, exp_neg, natCast_zsmul, exp_nsmul]\n\n"}
{"name":"NormedSpace.exp_conj","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\ny x : 𝔸\nhy : Ne y 0\n⊢ Eq (NormedSpace.exp 𝕂 (HMul.hMul (HMul.hMul y x) (Inv.inv y))) (HMul.hMul (HMul.hMul y (NormedSpace.exp 𝕂 x)) (Inv.inv y))","decl":"theorem exp_conj (y : 𝔸) (x : 𝔸) (hy : y ≠ 0) : exp 𝕂 (y * x * y⁻¹) = y * exp 𝕂 x * y⁻¹ :=\n  exp_units_conj _ (Units.mk0 y hy) x\n\n"}
{"name":"NormedSpace.exp_conj'","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedDivisionRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\ny x : 𝔸\nhy : Ne y 0\n⊢ Eq (NormedSpace.exp 𝕂 (HMul.hMul (HMul.hMul (Inv.inv y) x) y)) (HMul.hMul (HMul.hMul (Inv.inv y) (NormedSpace.exp 𝕂 x)) y)","decl":"theorem exp_conj' (y : 𝔸) (x : 𝔸) (hy : y ≠ 0) : exp 𝕂 (y⁻¹ * x * y) = y⁻¹ * exp 𝕂 x * y :=\n  exp_units_conj' _ (Units.mk0 y hy) x\n\n"}
{"name":"NormedSpace.exp_add","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedCommRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nx y : 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (HAdd.hAdd x y)) (HMul.hMul (NormedSpace.exp 𝕂 x) (NormedSpace.exp 𝕂 y))","decl":"/-- In a commutative Banach-algebra `𝔸` over `𝕂 = ℝ` or `𝕂 = ℂ`,\n`NormedSpace.exp 𝕂 (x+y) = (NormedSpace.exp 𝕂 x) * (NormedSpace.exp 𝕂 y)`. -/\ntheorem exp_add {x y : 𝔸} : exp 𝕂 (x + y) = exp 𝕂 x * exp 𝕂 y :=\n  exp_add_of_mem_ball ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n    ((expSeries_radius_eq_top 𝕂 𝔸).symm ▸ edist_lt_top _ _)\n\n"}
{"name":"NormedSpace.exp_sum","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝³ : RCLike 𝕂\ninst✝² : NormedCommRing 𝔸\ninst✝¹ : NormedAlgebra 𝕂 𝔸\ninst✝ : CompleteSpace 𝔸\nι : Type u_3\ns : Finset ι\nf : ι → 𝔸\n⊢ Eq (NormedSpace.exp 𝕂 (s.sum fun i => f i)) (s.prod fun i => NormedSpace.exp 𝕂 (f i))","decl":"/-- A version of `NormedSpace.exp_sum_of_commute` for a commutative Banach-algebra. -/\ntheorem exp_sum {ι} (s : Finset ι) (f : ι → 𝔸) : exp 𝕂 (∑ i ∈ s, f i) = ∏ i ∈ s, exp 𝕂 (f i) := by\n  rw [exp_sum_of_commute, Finset.noncommProd_eq_prod]\n  exact fun i _hi j _hj _ => Commute.all _ _\n\n"}
{"name":"NormedSpace.expSeries_eq_expSeries","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝕂' : Type u_2\n𝔸 : Type u_3\ninst✝⁶ : Field 𝕂\ninst✝⁵ : Field 𝕂'\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : Algebra 𝕂' 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\nn : Nat\nx : 𝔸\n⊢ Eq ((NormedSpace.expSeries 𝕂 𝔸 n) fun x_1 => x) ((NormedSpace.expSeries 𝕂' 𝔸 n) fun x_1 => x)","decl":"/-- If a normed ring `𝔸` is a normed algebra over two fields, then they define the same\n`expSeries` on `𝔸`. -/\ntheorem expSeries_eq_expSeries (n : ℕ) (x : 𝔸) :\n    (expSeries 𝕂 𝔸 n fun _ => x) = expSeries 𝕂' 𝔸 n fun _ => x := by\n  rw [expSeries_apply_eq, expSeries_apply_eq, inv_natCast_smul_eq 𝕂 𝕂']\n\n"}
{"name":"NormedSpace.exp_eq_exp","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"𝕂 : Type u_1\n𝕂' : Type u_2\n𝔸 : Type u_3\ninst✝⁶ : Field 𝕂\ninst✝⁵ : Field 𝕂'\ninst✝⁴ : Ring 𝔸\ninst✝³ : Algebra 𝕂 𝔸\ninst✝² : Algebra 𝕂' 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\n⊢ Eq (NormedSpace.exp 𝕂) (NormedSpace.exp 𝕂')","decl":"/-- If a normed ring `𝔸` is a normed algebra over two fields, then they define the same\nexponential function on `𝔸`. -/\ntheorem exp_eq_exp : (exp 𝕂 : 𝔸 → 𝔸) = exp 𝕂' := by\n  ext x\n  rw [exp, exp]\n  refine tsum_congr fun n => ?_\n  rw [expSeries_eq_expSeries 𝕂 𝕂' 𝔸 n x]\n\n"}
{"name":"NormedSpace.exp_ℝ_ℂ_eq_exp_ℂ_ℂ","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"⊢ Eq (NormedSpace.exp Real) (NormedSpace.exp Complex)","decl":"theorem exp_ℝ_ℂ_eq_exp_ℂ_ℂ : (exp ℝ : ℂ → ℂ) = exp ℂ :=\n  exp_eq_exp ℝ ℂ ℂ\n\n"}
{"name":"NormedSpace.of_real_exp_ℝ_ℝ","module":"Mathlib.Analysis.Normed.Algebra.Exponential","initialProofState":"r : Real\n⊢ Eq (↑(NormedSpace.exp Real r)) (NormedSpace.exp Complex ↑r)","decl":"/-- A version of `Complex.ofReal_exp` for `NormedSpace.exp` instead of `Complex.exp` -/\n@[simp, norm_cast]\ntheorem of_real_exp_ℝ_ℝ (r : ℝ) : ↑(exp ℝ r) = exp ℂ (r : ℂ) :=\n  (map_exp ℝ (algebraMap ℝ ℂ) (continuous_algebraMap _ _) r).trans (congr_fun exp_ℝ_ℂ_eq_exp_ℂ_ℂ _)\n\n"}
