{"name":"LocallyConstant.coe_one","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : One Y\n⊢ Eq (⇑1) 1","decl":"@[to_additive (attr := simp)]\ntheorem coe_one [One Y] : ⇑(1 : LocallyConstant X Y) = (1 : X → Y) :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_zero","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Zero Y\n⊢ Eq (⇑0) 0","decl":"@[to_additive (attr := simp)]\ntheorem coe_one [One Y] : ⇑(1 : LocallyConstant X Y) = (1 : X → Y) :=\n  rfl\n\n"}
{"name":"LocallyConstant.zero_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Zero Y\nx : X\n⊢ Eq (0 x) 0","decl":"@[to_additive]\ntheorem one_apply [One Y] (x : X) : (1 : LocallyConstant X Y) x = 1 :=\n  rfl\n\n"}
{"name":"LocallyConstant.one_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : One Y\nx : X\n⊢ Eq (1 x) 1","decl":"@[to_additive]\ntheorem one_apply [One Y] (x : X) : (1 : LocallyConstant X Y) x = 1 :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_inv","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Inv Y\nf : LocallyConstant X Y\n⊢ Eq (⇑(Inv.inv f)) (Inv.inv ⇑f)","decl":"@[to_additive (attr := simp)]\ntheorem coe_inv [Inv Y] (f : LocallyConstant X Y) : ⇑(f⁻¹ : LocallyConstant X Y) = (f : X → Y)⁻¹ :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_neg","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Neg Y\nf : LocallyConstant X Y\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[to_additive (attr := simp)]\ntheorem coe_inv [Inv Y] (f : LocallyConstant X Y) : ⇑(f⁻¹ : LocallyConstant X Y) = (f : X → Y)⁻¹ :=\n  rfl\n\n"}
{"name":"LocallyConstant.inv_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Inv Y\nf : LocallyConstant X Y\nx : X\n⊢ Eq ((Inv.inv f) x) (Inv.inv (f x))","decl":"@[to_additive]\ntheorem inv_apply [Inv Y] (f : LocallyConstant X Y) (x : X) : f⁻¹ x = (f x)⁻¹ :=\n  rfl\n\n"}
{"name":"LocallyConstant.neg_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Neg Y\nf : LocallyConstant X Y\nx : X\n⊢ Eq ((Neg.neg f) x) (Neg.neg (f x))","decl":"@[to_additive]\ntheorem inv_apply [Inv Y] (f : LocallyConstant X Y) (x : X) : f⁻¹ x = (f x)⁻¹ :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_add","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Add Y\nf g : LocallyConstant X Y\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[to_additive (attr := simp)]\ntheorem coe_mul [Mul Y] (f g : LocallyConstant X Y) : ⇑(f * g) = f * g :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_mul","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Mul Y\nf g : LocallyConstant X Y\n⊢ Eq (⇑(HMul.hMul f g)) (HMul.hMul ⇑f ⇑g)","decl":"@[to_additive (attr := simp)]\ntheorem coe_mul [Mul Y] (f g : LocallyConstant X Y) : ⇑(f * g) = f * g :=\n  rfl\n\n"}
{"name":"LocallyConstant.mul_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Mul Y\nf g : LocallyConstant X Y\nx : X\n⊢ Eq ((HMul.hMul f g) x) (HMul.hMul (f x) (g x))","decl":"@[to_additive]\ntheorem mul_apply [Mul Y] (f g : LocallyConstant X Y) (x : X) : (f * g) x = f x * g x :=\n  rfl\n\n"}
{"name":"LocallyConstant.add_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Add Y\nf g : LocallyConstant X Y\nx : X\n⊢ Eq ((HAdd.hAdd f g) x) (HAdd.hAdd (f x) (g x))","decl":"@[to_additive]\ntheorem mul_apply [Mul Y] (f g : LocallyConstant X Y) (x : X) : (f * g) x = f x * g x :=\n  rfl\n\n"}
{"name":"LocallyConstant.coeFnAddMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : AddZeroClass Y\na✝ : LocallyConstant X Y\na : X\n⊢ Eq (LocallyConstant.coeFnAddMonoidHom a✝ a) (a✝ a)","decl":"/-- `DFunLike.coe` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`DFunLike.coe` as an `AddMonoidHom`.\"]\ndef coeFnMonoidHom [MulOneClass Y] : LocallyConstant X Y →* X → Y where\n  toFun := DFunLike.coe\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.coeFnMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : MulOneClass Y\na✝ : LocallyConstant X Y\na : X\n⊢ Eq (LocallyConstant.coeFnMonoidHom a✝ a) (a✝ a)","decl":"/-- `DFunLike.coe` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`DFunLike.coe` as an `AddMonoidHom`.\"]\ndef coeFnMonoidHom [MulOneClass Y] : LocallyConstant X Y →* X → Y where\n  toFun := DFunLike.coe\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.constMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : MulOneClass Y\ny : Y\n⊢ Eq (LocallyConstant.constMonoidHom y) (LocallyConstant.const X y)","decl":"/-- The constant-function embedding, as a multiplicative monoid hom. -/\n@[to_additive (attr := simps) \"The constant-function embedding, as an additive monoid hom.\"]\ndef constMonoidHom [MulOneClass Y] : Y →* LocallyConstant X Y where\n  toFun := const X\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.constAddMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : AddZeroClass Y\ny : Y\n⊢ Eq (LocallyConstant.constAddMonoidHom y) (LocallyConstant.const X y)","decl":"/-- The constant-function embedding, as a multiplicative monoid hom. -/\n@[to_additive (attr := simps) \"The constant-function embedding, as an additive monoid hom.\"]\ndef constMonoidHom [MulOneClass Y] : Y →* LocallyConstant X Y where\n  toFun := const X\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.coe_charFn","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : MulZeroOneClass Y\nU : Set X\nhU : IsClopen U\n⊢ Eq (⇑(LocallyConstant.charFn Y hU)) (U.indicator 1)","decl":"theorem coe_charFn (hU : IsClopen U) : (charFn Y hU : X → Y) = Set.indicator U 1 :=\n  rfl\n\n"}
{"name":"LocallyConstant.charFn_eq_one","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : MulZeroOneClass Y\nU : Set X\ninst✝ : Nontrivial Y\nx : X\nhU : IsClopen U\n⊢ Iff (Eq ((LocallyConstant.charFn Y hU) x) 1) (Membership.mem U x)","decl":"theorem charFn_eq_one [Nontrivial Y] (x : X) (hU : IsClopen U) : charFn Y hU x = (1 : Y) ↔ x ∈ U :=\n  Set.indicator_eq_one_iff_mem _\n\n"}
{"name":"LocallyConstant.charFn_eq_zero","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : MulZeroOneClass Y\nU : Set X\ninst✝ : Nontrivial Y\nx : X\nhU : IsClopen U\n⊢ Iff (Eq ((LocallyConstant.charFn Y hU) x) 0) (Not (Membership.mem U x))","decl":"theorem charFn_eq_zero [Nontrivial Y] (x : X) (hU : IsClopen U) : charFn Y hU x = (0 : Y) ↔ x ∉ U :=\n  Set.indicator_eq_zero_iff_not_mem _\n\n"}
{"name":"LocallyConstant.charFn_inj","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : MulZeroOneClass Y\nU V : Set X\ninst✝ : Nontrivial Y\nhU : IsClopen U\nhV : IsClopen V\nh : Eq (LocallyConstant.charFn Y hU) (LocallyConstant.charFn Y hV)\n⊢ Eq U V","decl":"theorem charFn_inj [Nontrivial Y] (hU : IsClopen U) (hV : IsClopen V)\n    (h : charFn Y hU = charFn Y hV) : U = V :=\n  Set.indicator_one_inj Y <| coe_inj.mpr h\n\n"}
{"name":"LocallyConstant.coe_div","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Div Y\nf g : LocallyConstant X Y\n⊢ Eq (⇑(HDiv.hDiv f g)) (HDiv.hDiv ⇑f ⇑g)","decl":"@[to_additive]\ntheorem coe_div [Div Y] (f g : LocallyConstant X Y) : ⇑(f / g) = f / g :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_sub","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Sub Y\nf g : LocallyConstant X Y\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[to_additive]\ntheorem coe_div [Div Y] (f g : LocallyConstant X Y) : ⇑(f / g) = f / g :=\n  rfl\n\n"}
{"name":"LocallyConstant.div_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Div Y\nf g : LocallyConstant X Y\nx : X\n⊢ Eq ((HDiv.hDiv f g) x) (HDiv.hDiv (f x) (g x))","decl":"@[to_additive]\ntheorem div_apply [Div Y] (f g : LocallyConstant X Y) (x : X) : (f / g) x = f x / g x :=\n  rfl\n\n"}
{"name":"LocallyConstant.sub_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Sub Y\nf g : LocallyConstant X Y\nx : X\n⊢ Eq ((HSub.hSub f g) x) (HSub.hSub (f x) (g x))","decl":"@[to_additive]\ntheorem div_apply [Div Y] (f g : LocallyConstant X Y) (x : X) : (f / g) x = f x / g x :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_vadd","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\nR : Type u_4\ninst✝ : VAdd R Y\nr : R\nf : LocallyConstant X Y\n⊢ Eq (⇑(HVAdd.hVAdd r f)) (HVAdd.hVAdd r ⇑f)","decl":"@[to_additive (attr := simp)]\ntheorem coe_smul [SMul R Y] (r : R) (f : LocallyConstant X Y) : ⇑(r • f) = r • (f : X → Y) :=\n  rfl\n\n"}
{"name":"LocallyConstant.coe_smul","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\nR : Type u_4\ninst✝ : SMul R Y\nr : R\nf : LocallyConstant X Y\n⊢ Eq (⇑(HSMul.hSMul r f)) (HSMul.hSMul r ⇑f)","decl":"@[to_additive (attr := simp)]\ntheorem coe_smul [SMul R Y] (r : R) (f : LocallyConstant X Y) : ⇑(r • f) = r • (f : X → Y) :=\n  rfl\n\n"}
{"name":"LocallyConstant.smul_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\nR : Type u_4\ninst✝ : SMul R Y\nr : R\nf : LocallyConstant X Y\nx : X\n⊢ Eq ((HSMul.hSMul r f) x) (HSMul.hSMul r (f x))","decl":"@[to_additive]\ntheorem smul_apply [SMul R Y] (r : R) (f : LocallyConstant X Y) (x : X) : (r • f) x = r • f x :=\n  rfl\n\n"}
{"name":"LocallyConstant.vadd_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\nR : Type u_4\ninst✝ : VAdd R Y\nr : R\nf : LocallyConstant X Y\nx : X\n⊢ Eq ((HVAdd.hVAdd r f) x) (HVAdd.hVAdd r (f x))","decl":"@[to_additive]\ntheorem smul_apply [SMul R Y] (r : R) (f : LocallyConstant X Y) (x : X) : (r • f) x = r • f x :=\n  rfl\n\n"}
{"name":"LocallyConstant.constRingHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : NonAssocSemiring Y\ny : Y\n⊢ Eq (LocallyConstant.constRingHom y) (LocallyConstant.const X y)","decl":"/-- The constant-function embedding, as a ring hom. -/\n@[simps]\ndef constRingHom [NonAssocSemiring Y] : Y →+* LocallyConstant X Y :=\n  { constMonoidHom, constAddMonoidHom with toFun := const X }\n\n"}
{"name":"LocallyConstant.coe_algebraMap","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_5\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Y\ninst✝ : Algebra R Y\nr : R\n⊢ Eq (⇑((algebraMap R (LocallyConstant X Y)) r)) ((algebraMap R (X → Y)) r)","decl":"@[simp]\ntheorem coe_algebraMap (r : R) : ⇑(algebraMap R (LocallyConstant X Y) r) = algebraMap R (X → Y) r :=\n  rfl\n\n"}
{"name":"LocallyConstant.coeFnRingHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Semiring Y\na✝ : LocallyConstant X Y\na : X\n⊢ Eq (LocallyConstant.coeFnRingHom a✝ a) (a✝ a)","decl":"/-- `DFunLike.coe` as a `RingHom`. -/\n@[simps!] def coeFnRingHom [Semiring Y] : LocallyConstant X Y →+* X → Y where\n  toMonoidHom := coeFnMonoidHom\n  __ := coeFnAddMonoidHom\n\n"}
{"name":"LocallyConstant.coeFnₗ_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Y\ninst✝ : Module R Y\na✝¹ : LocallyConstant X Y\na✝ : X\n⊢ Eq ((LocallyConstant.coeFnₗ R) a✝¹ a✝) (a✝¹ a✝)","decl":"/-- `DFunLike.coe` as a linear map. -/\n@[simps!] def coeFnₗ (R : Type*) [Semiring R] [AddCommMonoid Y]\n    [Module R Y] : LocallyConstant X Y →ₗ[R] X → Y where\n  toAddHom := coeFnAddMonoidHom.toAddHom\n  map_smul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.coeFnAlgHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Y\ninst✝ : Algebra R Y\na✝ : LocallyConstant X Y\na : X\n⊢ Eq ((LocallyConstant.coeFnAlgHom R) a✝ a) (a✝ a)","decl":"/-- `DFunLike.coe` as an `AlgHom`. -/\n@[simps!] def coeFnAlgHom (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y] :\n    LocallyConstant X Y →ₐ[R] X → Y where\n  toRingHom := coeFnRingHom\n  commutes' _ := rfl\n\n"}
{"name":"LocallyConstant.evalMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : MulOneClass Y\nx : X\na✝ : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.evalMonoidHom x) a✝) (a✝ x)","decl":"/-- Evaluation as a `MonoidHom` -/\n@[to_additive (attr := simps!) \"Evaluation as an `AddMonoidHom`\"]\ndef evalMonoidHom [MulOneClass Y] (x : X) : LocallyConstant X Y →* Y :=\n  (Pi.evalMonoidHom _ x).comp coeFnMonoidHom\n\n"}
{"name":"LocallyConstant.evalAddMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : AddZeroClass Y\nx : X\na✝ : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.evalAddMonoidHom x) a✝) (a✝ x)","decl":"/-- Evaluation as a `MonoidHom` -/\n@[to_additive (attr := simps!) \"Evaluation as an `AddMonoidHom`\"]\ndef evalMonoidHom [MulOneClass Y] (x : X) : LocallyConstant X Y →* Y :=\n  (Pi.evalMonoidHom _ x).comp coeFnMonoidHom\n\n"}
{"name":"LocallyConstant.evalₗ_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Y\ninst✝ : Module R Y\nx : X\na✝ : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.evalₗ R x) a✝) (a✝ x)","decl":"/-- Evaluation as a linear map -/\n@[simps!] def evalₗ (R : Type*) [Semiring R] [AddCommMonoid Y]\n    [Module R Y] (x : X) : LocallyConstant X Y →ₗ[R] Y :=\n  (LinearMap.proj x).comp (coeFnₗ R)\n\n"}
{"name":"LocallyConstant.evalRingHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : Semiring Y\nx : X\na✝ : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.evalRingHom x) a✝) (a✝ x)","decl":"/-- Evaluation as a `RingHom` -/\n@[simps!] def evalRingHom [Semiring Y] (x : X) : LocallyConstant X Y →+* Y :=\n  (Pi.evalRingHom _ x).comp coeFnRingHom\n\n"}
{"name":"LocallyConstant.evalₐ_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Y\ninst✝ : Algebra R Y\nx : X\na✝ : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.evalₐ R x) a✝) (a✝ x)","decl":"/-- Evaluation as an `AlgHom` -/\n@[simps!]\ndef evalₐ (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y] (x : X) :\n    LocallyConstant X Y →ₐ[R] Y :=\n  (Pi.evalAlgHom _ _ x).comp (coeFnAlgHom R)\n\n"}
{"name":"LocallyConstant.comapAddMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nZ : Type u_6\ninst✝ : AddZeroClass Z\nf : ContinuousMap X Y\ng : LocallyConstant Y Z\n⊢ Eq ((LocallyConstant.comapAddMonoidHom f) g) (LocallyConstant.comap f g)","decl":"/-- `LocallyConstant.comap` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`LocallyConstant.comap` as an `AddMonoidHom`.\"]\ndef comapMonoidHom [MulOneClass Z]  (f : C(X, Y)) :\n    LocallyConstant Y Z →* LocallyConstant X Z where\n  toFun := comap f\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.comapMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nZ : Type u_6\ninst✝ : MulOneClass Z\nf : ContinuousMap X Y\ng : LocallyConstant Y Z\n⊢ Eq ((LocallyConstant.comapMonoidHom f) g) (LocallyConstant.comap f g)","decl":"/-- `LocallyConstant.comap` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`LocallyConstant.comap` as an `AddMonoidHom`.\"]\ndef comapMonoidHom [MulOneClass Z]  (f : C(X, Y)) :\n    LocallyConstant Y Z →* LocallyConstant X Z where\n  toFun := comap f\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.comapₗ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\nR : Type u_7\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\nf : ContinuousMap X Y\ng : LocallyConstant Y Z\na✝ : X\n⊢ Eq (((LocallyConstant.comapₗ R f) g) a✝) (g (f a✝))","decl":"/-- `LocallyConstant.comap` as a linear map. -/\n@[simps!]\ndef comapₗ (R : Type*) [Semiring R] [AddCommMonoid Z] [Module R Z] (f : C(X, Y)) :\n    LocallyConstant Y Z →ₗ[R] LocallyConstant X Z where\n  toFun := comap f\n  map_add' := map_add (comapAddMonoidHom f)\n  map_smul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.comapRingHom_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nZ : Type u_6\ninst✝ : Semiring Z\nf : ContinuousMap X Y\ng : LocallyConstant Y Z\na✝ : X\n⊢ Eq (((LocallyConstant.comapRingHom f) g) a✝) (g (f a✝))","decl":"/-- `LocallyConstant.comap` as a `RingHom`. -/\n@[simps!]\ndef comapRingHom [Semiring Z] (f : C(X, Y)) :\n    LocallyConstant Y Z →+* LocallyConstant X Z where\n  toMonoidHom := comapMonoidHom f\n  __ := (comapAddMonoidHom f)\n\n"}
{"name":"LocallyConstant.comapₐ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\nR : Type u_7\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Z\ninst✝ : Algebra R Z\nf : ContinuousMap X Y\ng : LocallyConstant Y Z\na✝ : X\n⊢ Eq (((LocallyConstant.comapₐ R f) g) a✝) (g (f a✝))","decl":"/-- `LocallyConstant.comap` as an `AlgHom` -/\n@[simps!]\ndef comapₐ (R : Type*) [CommSemiring R] [Semiring Z] [Algebra R Z]\n    (f : C(X, Y)) : LocallyConstant Y Z →ₐ[R] LocallyConstant X Z where\n  toRingHom := comapRingHom f\n  commutes' _ := rfl\n\n"}
{"name":"LocallyConstant.ker_comapₗ","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\nR : Type u_5\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\nf : ContinuousMap X Y\nhfs : Function.Surjective ⇑f\n⊢ Eq (LinearMap.ker (LocallyConstant.comapₗ R f)) Bot.bot","decl":"lemma ker_comapₗ [Semiring R] [AddCommMonoid Z] [Module R Z] (f : C(X, Y))\n    (hfs : Function.Surjective f) :\n    LinearMap.ker (comapₗ R f : LocallyConstant Y Z →ₗ[R] LocallyConstant X Z) = ⊥ :=\n  LinearMap.ker_eq_bot_of_injective <| comap_injective _ hfs\n\n"}
{"name":"LocallyConstant.congrLeftₗ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\nR : Type u_7\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\ne : Homeomorph X Y\ng : LocallyConstant X Z\na✝ : Y\n⊢ Eq (((LocallyConstant.congrLeftₗ R e) g) a✝) (g (e.symm a✝))","decl":"/-- `LocallyConstant.congrLeft` as a linear equivalence. -/\n@[simps!]\ndef congrLeftₗ (R : Type*) [Semiring R] [AddCommMonoid Z] [Module R Z] (e : X ≃ₜ Y) :\n    LocallyConstant X Z ≃ₗ[R] LocallyConstant Y Z where\n  toLinearMap := comapₗ R ⟨_, e.symm.continuous⟩\n  __ := congrLeft e\n\n"}
{"name":"LocallyConstant.congrLeftₗ_symm_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\nR : Type u_7\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\ne : Homeomorph X Y\na✝¹ : LocallyConstant Y Z\na✝ : X\n⊢ Eq (((LocallyConstant.congrLeftₗ R e).symm a✝¹) a✝) (a✝¹ (e a✝))","decl":"/-- `LocallyConstant.congrLeft` as a linear equivalence. -/\n@[simps!]\ndef congrLeftₗ (R : Type*) [Semiring R] [AddCommMonoid Z] [Module R Z] (e : X ≃ₜ Y) :\n    LocallyConstant X Z ≃ₗ[R] LocallyConstant Y Z where\n  toLinearMap := comapₗ R ⟨_, e.symm.continuous⟩\n  __ := congrLeft e\n\n"}
{"name":"LocallyConstant.congrLeftRingEquiv_symm_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nZ : Type u_6\ninst✝ : Semiring Z\ne : Homeomorph X Y\ng : LocallyConstant Y Z\na✝ : X\n⊢ Eq (((LocallyConstant.congrLeftRingEquiv e).symm g) a✝) (g (e a✝))","decl":"/-- `LocallyConstant.congrLeft` as a `RingEquiv`. -/\n@[simps!]\ndef congrLeftRingEquiv [Semiring Z] (e : X ≃ₜ Y) :\n    LocallyConstant X Z ≃+* LocallyConstant Y Z where\n  toEquiv := congrLeft e\n  __ := comapMonoidHom ⟨_, e.symm.continuous⟩\n  __ := comapAddMonoidHom ⟨_, e.symm.continuous⟩\n\n"}
{"name":"LocallyConstant.congrLeftRingEquiv_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\nZ : Type u_6\ninst✝ : Semiring Z\ne : Homeomorph X Y\ng : LocallyConstant X Z\na✝ : Y\n⊢ Eq (((LocallyConstant.congrLeftRingEquiv e) g) a✝) (g (e.symm a✝))","decl":"/-- `LocallyConstant.congrLeft` as a `RingEquiv`. -/\n@[simps!]\ndef congrLeftRingEquiv [Semiring Z] (e : X ≃ₜ Y) :\n    LocallyConstant X Z ≃+* LocallyConstant Y Z where\n  toEquiv := congrLeft e\n  __ := comapMonoidHom ⟨_, e.symm.continuous⟩\n  __ := comapAddMonoidHom ⟨_, e.symm.continuous⟩\n\n"}
{"name":"LocallyConstant.congrLeftₐ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\nR : Type u_7\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Z\ninst✝ : Algebra R Z\ne : Homeomorph X Y\ng : LocallyConstant X Z\na✝ : Y\n⊢ Eq (((LocallyConstant.congrLeftₐ R e) g) a✝) (g (e.symm a✝))","decl":"/-- `LocallyConstant.congrLeft` as an `AlgEquiv`. -/\n@[simps!]\ndef congrLeftₐ (R : Type*) [CommSemiring R] [Semiring Z] [Algebra R Z] (e : X ≃ₜ Y) :\n    LocallyConstant X Z ≃ₐ[R] LocallyConstant Y Z where\n  toEquiv := congrLeft e\n  __ := comapₐ R ⟨_, e.symm.continuous⟩\n\n"}
{"name":"LocallyConstant.congrLeftₐ_symm_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁴ : TopologicalSpace X\ninst✝³ : TopologicalSpace Y\nZ : Type u_6\nR : Type u_7\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Z\ninst✝ : Algebra R Z\ne : Homeomorph X Y\ng : LocallyConstant Y Z\na✝ : X\n⊢ Eq (((LocallyConstant.congrLeftₐ R e).symm g) a✝) (g (e a✝))","decl":"/-- `LocallyConstant.congrLeft` as an `AlgEquiv`. -/\n@[simps!]\ndef congrLeftₐ (R : Type*) [CommSemiring R] [Semiring Z] [Algebra R Z] (e : X ≃ₜ Y) :\n    LocallyConstant X Z ≃ₐ[R] LocallyConstant Y Z where\n  toEquiv := congrLeft e\n  __ := comapₐ R ⟨_, e.symm.continuous⟩\n\n"}
{"name":"LocallyConstant.mapMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\nZ : Type u_6\ninst✝¹ : MulOneClass Y\ninst✝ : MulOneClass Z\nf : MonoidHom Y Z\ng : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.mapMonoidHom f) g) (LocallyConstant.map (⇑f) g)","decl":"/-- `LocallyConstant.map` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`LocallyConstant.map` as an `AddMonoidHom`.\"]\ndef mapMonoidHom [MulOneClass Y] [MulOneClass Z] (f : Y →* Z) :\n    LocallyConstant X Y →* LocallyConstant X Z where\n  toFun := map f\n  map_one' := by aesop\n  map_mul' := by aesop\n\n"}
{"name":"LocallyConstant.mapAddMonoidHom_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\nZ : Type u_6\ninst✝¹ : AddZeroClass Y\ninst✝ : AddZeroClass Z\nf : AddMonoidHom Y Z\ng : LocallyConstant X Y\n⊢ Eq ((LocallyConstant.mapAddMonoidHom f) g) (LocallyConstant.map (⇑f) g)","decl":"/-- `LocallyConstant.map` as a `MonoidHom`. -/\n@[to_additive (attr := simps) \"`LocallyConstant.map` as an `AddMonoidHom`.\"]\ndef mapMonoidHom [MulOneClass Y] [MulOneClass Z] (f : Y →* Z) :\n    LocallyConstant X Y →* LocallyConstant X Z where\n  toFun := map f\n  map_one' := by aesop\n  map_mul' := by aesop\n\n"}
{"name":"LocallyConstant.mapₗ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\nZ : Type u_6\nR : Type u_7\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid Y\ninst✝² : Module R Y\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\nf : LinearMap (RingHom.id R) Y Z\ng : LocallyConstant X Y\na✝ : X\n⊢ Eq (((LocallyConstant.mapₗ R f) g) a✝) (f (g a✝))","decl":"/-- `LocallyConstant.map` as a linear map. -/\n@[simps!]\ndef mapₗ (R : Type*) [Semiring R] [AddCommMonoid Y] [Module R Y]\n    [AddCommMonoid Z] [Module R Z] (f : Y →ₗ[R] Z) :\n    LocallyConstant X Y →ₗ[R] LocallyConstant X Z where\n  toFun := map f\n  map_add' := by aesop\n  map_smul' := by aesop\n\n"}
{"name":"LocallyConstant.mapRingHom_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\nZ : Type u_6\ninst✝¹ : Semiring Y\ninst✝ : Semiring Z\nf : RingHom Y Z\ng : LocallyConstant X Y\na✝ : X\n⊢ Eq (((LocallyConstant.mapRingHom f) g) a✝) (f (g a✝))","decl":"/-- `LocallyConstant.map` as a `RingHom`. -/\n@[simps!]\ndef mapRingHom [Semiring Y] [Semiring Z] (f : Y →+* Z) :\n    LocallyConstant X Y →+* LocallyConstant X Z where\n  toMonoidHom := mapMonoidHom f\n  __ := (mapAddMonoidHom f.toAddMonoidHom)\n\n"}
{"name":"LocallyConstant.mapₐ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\nZ : Type u_6\nR : Type u_7\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring Y\ninst✝² : Algebra R Y\ninst✝¹ : Semiring Z\ninst✝ : Algebra R Z\nf : AlgHom R Y Z\ng : LocallyConstant X Y\na✝ : X\n⊢ Eq (((LocallyConstant.mapₐ R f) g) a✝) (f (g a✝))","decl":"/-- `LocallyConstant.map` as an `AlgHom` -/\n@[simps!]\ndef mapₐ (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y] [Semiring Z] [Algebra R Z]\n    (f : Y →ₐ[R] Z) : LocallyConstant X Y →ₐ[R] LocallyConstant X Z where\n  toRingHom := mapRingHom f\n  commutes' _ := by aesop\n\n"}
{"name":"LocallyConstant.congrRightₗ_symm_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\nZ : Type u_6\nR : Type u_7\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid Y\ninst✝² : Module R Y\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\ne : LinearEquiv (RingHom.id R) Y Z\na✝¹ : LocallyConstant X Z\na✝ : X\n⊢ Eq (((LocallyConstant.congrRightₗ R e).symm a✝¹) a✝) (e.symm (a✝¹ a✝))","decl":"/-- `LocallyConstant.congrRight` as a linear equivalence. -/\n@[simps!]\ndef congrRightₗ (R : Type*) [Semiring R] [AddCommMonoid Y] [Module R Y]\n    [AddCommMonoid Z] [Module R Z] (e : Y ≃ₗ[R] Z) :\n    LocallyConstant X Y ≃ₗ[R] LocallyConstant X Z where\n  toLinearMap := mapₗ R e\n  __ := congrRight e.toEquiv\n\n"}
{"name":"LocallyConstant.congrRightₗ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\nZ : Type u_6\nR : Type u_7\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid Y\ninst✝² : Module R Y\ninst✝¹ : AddCommMonoid Z\ninst✝ : Module R Z\ne : LinearEquiv (RingHom.id R) Y Z\ng : LocallyConstant X Y\na✝ : X\n⊢ Eq (((LocallyConstant.congrRightₗ R e) g) a✝) (e (g a✝))","decl":"/-- `LocallyConstant.congrRight` as a linear equivalence. -/\n@[simps!]\ndef congrRightₗ (R : Type*) [Semiring R] [AddCommMonoid Y] [Module R Y]\n    [AddCommMonoid Z] [Module R Z] (e : Y ≃ₗ[R] Z) :\n    LocallyConstant X Y ≃ₗ[R] LocallyConstant X Z where\n  toLinearMap := mapₗ R e\n  __ := congrRight e.toEquiv\n\n"}
{"name":"LocallyConstant.congrRightRingEquiv_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\nZ : Type u_6\ninst✝¹ : Semiring Y\ninst✝ : Semiring Z\ne : RingEquiv Y Z\ng : LocallyConstant X Y\na✝ : X\n⊢ Eq (((LocallyConstant.congrRightRingEquiv e) g) a✝) (e (g a✝))","decl":"/-- `LocallyConstant.congrRight` as a `RingEquiv`. -/\n@[simps!]\ndef congrRightRingEquiv [Semiring Y] [Semiring Z] (e : Y ≃+* Z) :\n    LocallyConstant X Y ≃+* LocallyConstant X Z where\n  toEquiv := congrRight e\n  __ := mapMonoidHom e.toMonoidHom\n  __ := mapAddMonoidHom e.toAddMonoidHom\n\n"}
{"name":"LocallyConstant.congrRightRingEquiv_symm_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\nZ : Type u_6\ninst✝¹ : Semiring Y\ninst✝ : Semiring Z\ne : RingEquiv Y Z\ng : LocallyConstant X Z\na✝ : X\n⊢ Eq (((LocallyConstant.congrRightRingEquiv e).symm g) a✝) ((↑e).symm (g a✝))","decl":"/-- `LocallyConstant.congrRight` as a `RingEquiv`. -/\n@[simps!]\ndef congrRightRingEquiv [Semiring Y] [Semiring Z] (e : Y ≃+* Z) :\n    LocallyConstant X Y ≃+* LocallyConstant X Z where\n  toEquiv := congrRight e\n  __ := mapMonoidHom e.toMonoidHom\n  __ := mapAddMonoidHom e.toAddMonoidHom\n\n"}
{"name":"LocallyConstant.congrRightₐ_symm_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\nZ : Type u_6\nR : Type u_7\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring Y\ninst✝² : Algebra R Y\ninst✝¹ : Semiring Z\ninst✝ : Algebra R Z\ne : AlgEquiv R Y Z\ng : LocallyConstant X Z\na✝ : X\n⊢ Eq (((LocallyConstant.congrRightₐ R e).symm g) a✝) (e.symm (g a✝))","decl":"/-- `LocallyConstant.congrRight` as an `AlgEquiv`. -/\n@[simps!]\ndef congrRightₐ (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y] [Semiring Z] [Algebra R Z]\n    (e : Y ≃ₐ[R] Z) : LocallyConstant X Y ≃ₐ[R] LocallyConstant X Z where\n  toEquiv := congrRight e\n  __ := mapₐ R e.toAlgHom\n\n"}
{"name":"LocallyConstant.congrRightₐ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝⁵ : TopologicalSpace X\nZ : Type u_6\nR : Type u_7\ninst✝⁴ : CommSemiring R\ninst✝³ : Semiring Y\ninst✝² : Algebra R Y\ninst✝¹ : Semiring Z\ninst✝ : Algebra R Z\ne : AlgEquiv R Y Z\ng : LocallyConstant X Y\na✝ : X\n⊢ Eq (((LocallyConstant.congrRightₐ R e) g) a✝) (e (g a✝))","decl":"/-- `LocallyConstant.congrRight` as an `AlgEquiv`. -/\n@[simps!]\ndef congrRightₐ (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y] [Semiring Z] [Algebra R Z]\n    (e : Y ≃ₐ[R] Z) : LocallyConstant X Y ≃ₐ[R] LocallyConstant X Z where\n  toEquiv := congrRight e\n  __ := mapₐ R e.toAlgHom\n\n"}
{"name":"LocallyConstant.constₗ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_6\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid Y\ninst✝ : Module R Y\ny : Y\na✝ : X\n⊢ Eq (((LocallyConstant.constₗ R) y) a✝) y","decl":"/-- `LocallyConstant.const` as a linear map. -/\n@[simps!]\ndef constₗ (R : Type*) [Semiring R] [AddCommMonoid Y] [Module R Y] :\n    Y →ₗ[R] LocallyConstant X Y where\n  toFun := const X\n  map_add' _ _ := rfl\n  map_smul' _ _ := rfl\n\n"}
{"name":"LocallyConstant.constₐ_apply_apply","module":"Mathlib.Topology.LocallyConstant.Algebra","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝³ : TopologicalSpace X\nR : Type u_6\ninst✝² : CommSemiring R\ninst✝¹ : Semiring Y\ninst✝ : Algebra R Y\ny : Y\na✝ : X\n⊢ Eq (((LocallyConstant.constₐ R) y) a✝) y","decl":"/-- `LocallyConstant.const` as an `AlgHom` -/\n@[simps!]\ndef constₐ (R : Type*) [CommSemiring R] [Semiring Y] [Algebra R Y] :\n    Y →ₐ[R] LocallyConstant X Y where\n  toRingHom := constRingHom\n  commutes' _ := rfl\n\n"}
