{"name":"CompactIccSpace.isCompact_Icc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : Preorder α\nself : CompactIccSpace α\na b : α\n⊢ IsCompact (Set.Icc a b)","decl":"/-- This typeclass says that all closed intervals in `α` are compact. This is true for all\nconditionally complete linear orders with order topology and products (finite or infinite)\nof such spaces. -/\nclass CompactIccSpace (α : Type*) [TopologicalSpace α] [Preorder α] : Prop where\n  /-- A closed interval `Set.Icc a b` is a compact set for all `a` and `b`. -/\n  isCompact_Icc : ∀ {a b : α}, IsCompact (Icc a b)\n\n"}
{"name":"CompactIccSpace.mk'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : Preorder α\nh : ∀ {a b : α}, LE.le a b → IsCompact (Set.Icc a b)\n⊢ CompactIccSpace α","decl":"lemma CompactIccSpace.mk' [TopologicalSpace α] [Preorder α]\n    (h : ∀ {a b : α}, a ≤ b → IsCompact (Icc a b)) : CompactIccSpace α where\n  isCompact_Icc {a b} := by_cases h fun hab => by rw [Icc_eq_empty hab]; exact isCompact_empty\n\n-- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: drop one `'`\n"}
{"name":"CompactIccSpace.mk''","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : PartialOrder α\nh : ∀ {a b : α}, LT.lt a b → IsCompact (Set.Icc a b)\n⊢ CompactIccSpace α","decl":"lemma CompactIccSpace.mk'' [TopologicalSpace α] [PartialOrder α]\n    (h : ∀ {a b : α}, a < b → IsCompact (Icc a b)) : CompactIccSpace α :=\n  .mk' fun hab => hab.eq_or_lt.elim (by rintro rfl; simp) h\n\n"}
{"name":"instCompactIccSpaceOrderDual","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_1\ninst✝² : TopologicalSpace α\ninst✝¹ : Preorder α\ninst✝ : CompactIccSpace α\n⊢ CompactIccSpace (OrderDual α)","decl":"instance [TopologicalSpace α] [Preorder α] [CompactIccSpace α] : CompactIccSpace (αᵒᵈ) where\n  isCompact_Icc := by\n    intro a b\n    convert isCompact_Icc (α := α) (a := b) (b := a) using 1\n    exact dual_Icc (α := α)\n\n"}
{"name":"ConditionallyCompleteLinearOrder.toCompactIccSpace","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ CompactIccSpace α","decl":"/-- A closed interval in a conditionally complete linear order is compact. -/\ninstance (priority := 100) ConditionallyCompleteLinearOrder.toCompactIccSpace (α : Type*)\n    [ConditionallyCompleteLinearOrder α] [TopologicalSpace α] [OrderTopology α] :\n    CompactIccSpace α := by\n  refine .mk'' fun {a b} hlt => ?_\n  rcases le_or_lt a b with hab | hab\n  swap\n  · simp [hab]\n  refine isCompact_iff_ultrafilter_le_nhds.2 fun f hf => ?_\n  contrapose! hf\n  rw [le_principal_iff]\n  have hpt : ∀ x ∈ Icc a b, {x} ∉ f := fun x hx hxf =>\n    hf x hx ((le_pure_iff.2 hxf).trans (pure_le_nhds x))\n  set s := { x ∈ Icc a b | Icc a x ∉ f }\n  have hsb : b ∈ upperBounds s := fun x hx => hx.1.2\n  have sbd : BddAbove s := ⟨b, hsb⟩\n  have ha : a ∈ s := by simp [s, hpt, hab]\n  rcases hab.eq_or_lt with (rfl | _hlt)\n  · exact ha.2\n  -- Porting note: the `obtain` below was instead\n  -- `set c := Sup s`\n  -- `have hsc : IsLUB s c := isLUB_csSup ⟨a, ha⟩ sbd`\n  obtain ⟨c, hsc⟩ : ∃ c, IsLUB s c := ⟨sSup s, isLUB_csSup ⟨a, ha⟩ ⟨b, hsb⟩⟩\n  have hc : c ∈ Icc a b := ⟨hsc.1 ha, hsc.2 hsb⟩\n  specialize hf c hc\n  have hcs : c ∈ s := by\n    rcases hc.1.eq_or_lt with (rfl | hlt); · assumption\n    refine ⟨hc, fun hcf => hf fun U hU => ?_⟩\n    rcases (mem_nhdsLE_iff_exists_Ioc_subset' hlt).1 (mem_nhdsWithin_of_mem_nhds hU)\n      with ⟨x, hxc, hxU⟩\n    rcases ((hsc.frequently_mem ⟨a, ha⟩).and_eventually (Ioc_mem_nhdsLE hxc)).exists\n      with ⟨y, ⟨_hyab, hyf⟩, hy⟩\n    refine mem_of_superset (f.diff_mem_iff.2 ⟨hcf, hyf⟩) (Subset.trans ?_ hxU)\n    rw [diff_subset_iff]\n    exact Subset.trans Icc_subset_Icc_union_Ioc <| union_subset_union Subset.rfl <|\n      Ioc_subset_Ioc_left hy.1.le\n  rcases hc.2.eq_or_lt with (rfl | hlt)\n  · exact hcs.2\n  exfalso\n  refine hf fun U hU => ?_\n  rcases (mem_nhdsGE_iff_exists_mem_Ioc_Ico_subset hlt).1 (mem_nhdsWithin_of_mem_nhds hU)\n    with ⟨y, hxy, hyU⟩\n  refine mem_of_superset ?_ hyU; clear! U\n  have hy : y ∈ Icc a b := ⟨hc.1.trans hxy.1.le, hxy.2⟩\n  by_cases hay : Icc a y ∈ f\n  · refine mem_of_superset (f.diff_mem_iff.2 ⟨f.diff_mem_iff.2 ⟨hay, hcs.2⟩, hpt y hy⟩) ?_\n    rw [diff_subset_iff, union_comm, Ico_union_right hxy.1.le, diff_subset_iff]\n    exact Icc_subset_Icc_union_Icc\n  · exact ((hsc.1 ⟨hy, hay⟩).not_lt hxy.1).elim\n\n"}
{"name":"instCompactIccSpaceForall","module":"Mathlib.Topology.Order.Compact","initialProofState":"ι : Type u_2\nα : ι → Type u_3\ninst✝² : (i : ι) → Preorder (α i)\ninst✝¹ : (i : ι) → TopologicalSpace (α i)\ninst✝ : ∀ (i : ι), CompactIccSpace (α i)\n⊢ CompactIccSpace ((i : ι) → α i)","decl":"instance {ι : Type*} {α : ι → Type*} [∀ i, Preorder (α i)] [∀ i, TopologicalSpace (α i)]\n    [∀ i, CompactIccSpace (α i)] : CompactIccSpace (∀ i, α i) :=\n  ⟨fun {a b} => (pi_univ_Icc a b ▸ isCompact_univ_pi) fun _ => isCompact_Icc⟩\n\n"}
{"name":"Pi.compact_Icc_space'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace β\ninst✝ : CompactIccSpace β\n⊢ CompactIccSpace (α → β)","decl":"instance Pi.compact_Icc_space' {α β : Type*} [Preorder β] [TopologicalSpace β]\n    [CompactIccSpace β] : CompactIccSpace (α → β) :=\n  inferInstance\n\n"}
{"name":"instCompactIccSpaceProd","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : Preorder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : CompactIccSpace α\ninst✝² : Preorder β\ninst✝¹ : TopologicalSpace β\ninst✝ : CompactIccSpace β\n⊢ CompactIccSpace (Prod α β)","decl":"instance {α β : Type*} [Preorder α] [TopologicalSpace α] [CompactIccSpace α] [Preorder β]\n    [TopologicalSpace β] [CompactIccSpace β] : CompactIccSpace (α × β) :=\n  ⟨fun {a b} => (Icc_prod_eq a b).symm ▸ isCompact_Icc.prod isCompact_Icc⟩\n\n"}
{"name":"isCompact_uIcc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : CompactIccSpace α\na b : α\n⊢ IsCompact (Set.uIcc a b)","decl":"/-- An unordered closed interval is compact. -/\ntheorem isCompact_uIcc {α : Type*} [LinearOrder α] [TopologicalSpace α] [CompactIccSpace α]\n    {a b : α} : IsCompact (uIcc a b) :=\n  isCompact_Icc\n\n-- See note [lower instance priority]\n"}
{"name":"compactSpace_of_completeLinearOrder","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : CompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\n⊢ CompactSpace α","decl":"/-- A complete linear order is a compact space.\n\nWe do not register an instance for a `[CompactIccSpace α]` because this would only add instances\nfor products (indexed or not) of complete linear orders, and we have instances with higher priority\nthat cover these cases. -/\ninstance (priority := 100) compactSpace_of_completeLinearOrder {α : Type*} [CompleteLinearOrder α]\n    [TopologicalSpace α] [OrderTopology α] : CompactSpace α :=\n  ⟨by simp only [← Icc_bot_top, isCompact_Icc]⟩\n\n"}
{"name":"compactSpace_Icc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : Preorder α\ninst✝¹ : TopologicalSpace α\ninst✝ : CompactIccSpace α\na b : α\n⊢ CompactSpace ↑(Set.Icc a b)","decl":"instance compactSpace_Icc (a b : α) : CompactSpace (Icc a b) :=\n  isCompact_iff_compactSpace.mp isCompact_Icc\n\n"}
{"name":"isCompact_Ico_iff","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : DenselyOrdered α\na b : α\n⊢ Iff (IsCompact (Set.Ico a b)) (LE.le b a)","decl":"/-- `Set.Ico a b` is only compact if it is empty. -/\n@[simp]\ntheorem isCompact_Ico_iff {a b : α} : IsCompact (Set.Ico a b) ↔ b ≤ a :=\n  ⟨fun h => isClosed_Ico_iff.mp h.isClosed, by simp_all⟩\n\n"}
{"name":"isCompact_Ioc_iff","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : DenselyOrdered α\na b : α\n⊢ Iff (IsCompact (Set.Ioc a b)) (LE.le b a)","decl":"/-- `Set.Ioc a b` is only compact if it is empty. -/\n@[simp]\ntheorem isCompact_Ioc_iff {a b : α} : IsCompact (Set.Ioc a b) ↔ b ≤ a :=\n  ⟨fun h => isClosed_Ioc_iff.mp h.isClosed, by simp_all⟩\n\n"}
{"name":"isCompact_Ioo_iff","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTopology α\ninst✝ : DenselyOrdered α\na b : α\n⊢ Iff (IsCompact (Set.Ioo a b)) (LE.le b a)","decl":"/-- `Set.Ioo a b` is only compact if it is empty. -/\n@[simp]\ntheorem isCompact_Ioo_iff {a b : α} : IsCompact (Set.Ioo a b) ↔ b ≤ a :=\n  ⟨fun h => isClosed_Ioo_iff.mp h.isClosed, by simp_all⟩\n\n"}
{"name":"IsCompact.exists_isLeast","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIicTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ Exists fun x => IsLeast s x","decl":"theorem IsCompact.exists_isLeast [ClosedIicTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : ∃ x, IsLeast s x := by\n  haveI : Nonempty s := ne_s.to_subtype\n  suffices (s ∩ ⋂ x ∈ s, Iic x).Nonempty from\n    ⟨this.choose, this.choose_spec.1, mem_iInter₂.mp this.choose_spec.2⟩\n  rw [biInter_eq_iInter]\n  by_contra H\n  rw [not_nonempty_iff_eq_empty] at H\n  rcases hs.elim_directed_family_closed (fun x : s => Iic ↑x) (fun x => isClosed_Iic) H\n      (Monotone.directed_ge fun _ _ h => Iic_subset_Iic.mpr h) with ⟨x, hx⟩\n  exact not_nonempty_iff_eq_empty.mpr hx ⟨x, x.2, le_rfl⟩\n\n"}
{"name":"IsCompact.exists_isGreatest","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIciTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ Exists fun x => IsGreatest s x","decl":"theorem IsCompact.exists_isGreatest [ClosedIciTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : ∃ x, IsGreatest s x :=\n  IsCompact.exists_isLeast (α := αᵒᵈ) hs ne_s\n\n"}
{"name":"IsCompact.exists_isGLB","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIicTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ Exists fun x => And (Membership.mem s x) (IsGLB s x)","decl":"theorem IsCompact.exists_isGLB [ClosedIicTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : ∃ x ∈ s, IsGLB s x :=\n  (hs.exists_isLeast ne_s).imp (fun x (hx : IsLeast s x) => ⟨hx.1, hx.isGLB⟩)\n\n"}
{"name":"IsCompact.exists_isLUB","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIciTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ Exists fun x => And (Membership.mem s x) (IsLUB s x)","decl":"theorem IsCompact.exists_isLUB [ClosedIciTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : ∃ x ∈ s, IsLUB s x :=\n  IsCompact.exists_isGLB (α := αᵒᵈ) hs ne_s\n\n"}
{"name":"cocompact_le_atBot_atTop","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : LinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : CompactIccSpace α\n⊢ LE.le (Filter.cocompact α) (Max.max Filter.atBot Filter.atTop)","decl":"theorem cocompact_le_atBot_atTop [CompactIccSpace α] :\n    cocompact α ≤ atBot ⊔ atTop := by\n  refine fun s hs ↦ mem_cocompact.mpr <| (isEmpty_or_nonempty α).casesOn ?_ ?_ <;> intro\n  · exact ⟨∅, isCompact_empty, fun x _ ↦ (IsEmpty.false x).elim⟩\n  · obtain ⟨t, ht⟩ := mem_atBot_sets.mp hs.1\n    obtain ⟨u, hu⟩ := mem_atTop_sets.mp hs.2\n    refine ⟨Icc t u, isCompact_Icc, fun x hx ↦ ?_⟩\n    exact (not_and_or.mp hx).casesOn (fun h ↦ ht x (le_of_not_le h)) fun h ↦ hu x (le_of_not_le h)\n\n"}
{"name":"cocompact_le_atBot","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderTop α\ninst✝ : CompactIccSpace α\n⊢ LE.le (Filter.cocompact α) Filter.atBot","decl":"theorem cocompact_le_atBot [OrderTop α] [CompactIccSpace α] :\n    cocompact α ≤ atBot := by\n  refine fun _ hs ↦ mem_cocompact.mpr <| (isEmpty_or_nonempty α).casesOn ?_ ?_ <;> intro\n  · exact ⟨∅, isCompact_empty, fun x _ ↦ (IsEmpty.false x).elim⟩\n  · obtain ⟨t, ht⟩ := mem_atBot_sets.mp hs\n    refine ⟨Icc t ⊤, isCompact_Icc, fun _ hx ↦ ?_⟩\n    exact (not_and_or.mp hx).casesOn (fun h ↦ ht _ (le_of_not_le h)) (fun h ↦ (h le_top).elim)\n\n"}
{"name":"cocompact_le_atTop","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : OrderBot α\ninst✝ : CompactIccSpace α\n⊢ LE.le (Filter.cocompact α) Filter.atTop","decl":"theorem cocompact_le_atTop [OrderBot α] [CompactIccSpace α] :\n    cocompact α ≤ atTop :=\n  cocompact_le_atBot (α := αᵒᵈ)\n\n"}
{"name":"atBot_le_cocompact","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : NoMinOrder α\ninst✝ : ClosedIicTopology α\n⊢ LE.le Filter.atBot (Filter.cocompact α)","decl":"theorem atBot_le_cocompact [NoMinOrder α] [ClosedIicTopology α] :\n    atBot ≤ cocompact α := by\n  refine fun s hs ↦ ?_\n  obtain ⟨t, ht, hts⟩ := mem_cocompact.mp hs\n  refine (Set.eq_empty_or_nonempty t).casesOn (fun h_empty ↦ ?_) (fun h_nonempty ↦ ?_)\n  · rewrite [compl_univ_iff.mpr h_empty, univ_subset_iff] at hts\n    convert univ_mem\n  · haveI := h_nonempty.nonempty\n    obtain ⟨a, ha⟩ := ht.exists_isLeast h_nonempty\n    obtain ⟨b, hb⟩ := exists_lt a\n    exact Filter.mem_atBot_sets.mpr ⟨b, fun b' hb' ↦ hts <| Classical.byContradiction\n      fun hc ↦ LT.lt.false <| hb'.trans_lt <| hb.trans_le <| ha.2 (not_not_mem.mp hc)⟩\n\n"}
{"name":"atTop_le_cocompact","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : NoMaxOrder α\ninst✝ : ClosedIciTopology α\n⊢ LE.le Filter.atTop (Filter.cocompact α)","decl":"theorem atTop_le_cocompact [NoMaxOrder α] [ClosedIciTopology α] :\n    atTop ≤ cocompact α :=\n  atBot_le_cocompact (α := αᵒᵈ)\n\n"}
{"name":"atBot_atTop_le_cocompact","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : NoMinOrder α\ninst✝¹ : NoMaxOrder α\ninst✝ : OrderClosedTopology α\n⊢ LE.le (Max.max Filter.atBot Filter.atTop) (Filter.cocompact α)","decl":"theorem atBot_atTop_le_cocompact [NoMinOrder α] [NoMaxOrder α]\n    [OrderClosedTopology α] : atBot ⊔ atTop ≤ cocompact α :=\n  sup_le atBot_le_cocompact atTop_le_cocompact\n\n"}
{"name":"cocompact_eq_atBot_atTop","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : NoMaxOrder α\ninst✝² : NoMinOrder α\ninst✝¹ : OrderClosedTopology α\ninst✝ : CompactIccSpace α\n⊢ Eq (Filter.cocompact α) (Max.max Filter.atBot Filter.atTop)","decl":"@[simp 900]\ntheorem cocompact_eq_atBot_atTop [NoMaxOrder α] [NoMinOrder α]\n    [OrderClosedTopology α] [CompactIccSpace α] : cocompact α = atBot ⊔ atTop :=\n  cocompact_le_atBot_atTop.antisymm atBot_atTop_le_cocompact\n\n"}
{"name":"cocompact_eq_atBot","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : NoMinOrder α\ninst✝² : OrderTop α\ninst✝¹ : ClosedIicTopology α\ninst✝ : CompactIccSpace α\n⊢ Eq (Filter.cocompact α) Filter.atBot","decl":"@[simp]\ntheorem cocompact_eq_atBot [NoMinOrder α] [OrderTop α]\n    [ClosedIicTopology α] [CompactIccSpace α] : cocompact α = atBot :=\n  cocompact_le_atBot.antisymm atBot_le_cocompact\n\n"}
{"name":"cocompact_eq_atTop","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : NoMaxOrder α\ninst✝² : OrderBot α\ninst✝¹ : ClosedIciTopology α\ninst✝ : CompactIccSpace α\n⊢ Eq (Filter.cocompact α) Filter.atTop","decl":"@[simp]\ntheorem cocompact_eq_atTop [NoMaxOrder α] [OrderBot α]\n    [ClosedIciTopology α] [CompactIccSpace α] : cocompact α = atTop :=\n  cocompact_le_atTop.antisymm atTop_le_cocompact\n\n"}
{"name":"IsCompact.exists_isMinOn","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\ns : Set β\nhs : IsCompact s\nne_s : s.Nonempty\nf : β → α\nhf : ContinuousOn f s\n⊢ Exists fun x => And (Membership.mem s x) (IsMinOn f s x)","decl":"/-- The **extreme value theorem**: a continuous function realizes its minimum on a compact set. -/\ntheorem IsCompact.exists_isMinOn [ClosedIicTopology α] {s : Set β} (hs : IsCompact s)\n    (ne_s : s.Nonempty) {f : β → α} (hf : ContinuousOn f s) : ∃ x ∈ s, IsMinOn f s x := by\n  rcases (hs.image_of_continuousOn hf).exists_isLeast (ne_s.image f) with ⟨_, ⟨x, hxs, rfl⟩, hx⟩\n  refine ⟨x, hxs, forall_mem_image.1 (fun _ hb => hx <| mem_image_of_mem f ?_)⟩\n  rwa [(image_id' s).symm]\n\n"}
{"name":"IsCompact.exists_forall_le'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIicTopology α\ninst✝ : NoMaxOrder α\nf : β → α\ns : Set β\nhs : IsCompact s\nhf : ContinuousOn f s\na : α\nhf' : ∀ (b : β), Membership.mem s b → LT.lt a (f b)\n⊢ Exists fun a' => And (LT.lt a a') (∀ (b : β), Membership.mem s b → LE.le a' (f b))","decl":"/-- If a continuous function lies strictly above `a` on a compact set,\n  it has a lower bound strictly above `a`. -/\ntheorem IsCompact.exists_forall_le' [ClosedIicTopology α] [NoMaxOrder α] {f : β → α}\n    {s : Set β} (hs : IsCompact s) (hf : ContinuousOn f s) {a : α} (hf' : ∀ b ∈ s, a < f b) :\n    ∃ a', a < a' ∧ ∀ b ∈ s, a' ≤ f b := by\n  rcases s.eq_empty_or_nonempty with (rfl | hs')\n  · obtain ⟨a', ha'⟩ := exists_gt a\n    exact ⟨a', ha', fun _ a ↦ a.elim⟩\n  · obtain ⟨x, hx, hx'⟩ := hs.exists_isMinOn hs' hf\n    exact ⟨f x, hf' x hx, hx'⟩\n\n"}
{"name":"IsCompact.exists_isMaxOn","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\ns : Set β\nhs : IsCompact s\nne_s : s.Nonempty\nf : β → α\nhf : ContinuousOn f s\n⊢ Exists fun x => And (Membership.mem s x) (IsMaxOn f s x)","decl":"/-- The **extreme value theorem**: a continuous function realizes its maximum on a compact set. -/\ntheorem IsCompact.exists_isMaxOn [ClosedIciTopology α] {s : Set β} (hs : IsCompact s)\n    (ne_s : s.Nonempty) {f : β → α} (hf : ContinuousOn f s) : ∃ x ∈ s, IsMaxOn f s x :=\n  IsCompact.exists_isMinOn (α := αᵒᵈ) hs ne_s hf\n\n"}
{"name":"ContinuousOn.exists_isMinOn'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\ns : Set β\nf : β → α\nhf : ContinuousOn f s\nhsc : IsClosed s\nx₀ : β\nh₀ : Membership.mem s x₀\nhc : Filter.Eventually (fun x => LE.le (f x₀) (f x)) (Min.min (Filter.cocompact β) (Filter.principal s))\n⊢ Exists fun x => And (Membership.mem s x) (IsMinOn f s x)","decl":"/-- The **extreme value theorem**: if a function `f` is continuous on a closed set `s` and it is\nlarger than a value in its image away from compact sets, then it has a minimum on this set. -/\ntheorem ContinuousOn.exists_isMinOn' [ClosedIicTopology α] {s : Set β} {f : β → α}\n    (hf : ContinuousOn f s) (hsc : IsClosed s) {x₀ : β} (h₀ : x₀ ∈ s)\n    (hc : ∀ᶠ x in cocompact β ⊓ 𝓟 s, f x₀ ≤ f x) : ∃ x ∈ s, IsMinOn f s x := by\n  rcases (hasBasis_cocompact.inf_principal _).eventually_iff.1 hc with ⟨K, hK, hKf⟩\n  have hsub : insert x₀ (K ∩ s) ⊆ s := insert_subset_iff.2 ⟨h₀, inter_subset_right⟩\n  obtain ⟨x, hx, hxf⟩ : ∃ x ∈ insert x₀ (K ∩ s), ∀ y ∈ insert x₀ (K ∩ s), f x ≤ f y :=\n    ((hK.inter_right hsc).insert x₀).exists_isMinOn (insert_nonempty _ _) (hf.mono hsub)\n  refine ⟨x, hsub hx, fun y hy => ?_⟩\n  by_cases hyK : y ∈ K\n  exacts [hxf _ (Or.inr ⟨hyK, hy⟩), (hxf _ (Or.inl rfl)).trans (hKf ⟨hyK, hy⟩)]\n\n"}
{"name":"ContinuousOn.exists_isMaxOn'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\ns : Set β\nf : β → α\nhf : ContinuousOn f s\nhsc : IsClosed s\nx₀ : β\nh₀ : Membership.mem s x₀\nhc : Filter.Eventually (fun x => LE.le (f x) (f x₀)) (Min.min (Filter.cocompact β) (Filter.principal s))\n⊢ Exists fun x => And (Membership.mem s x) (IsMaxOn f s x)","decl":"/-- The **extreme value theorem**: if a function `f` is continuous on a closed set `s` and it is\nsmaller than a value in its image away from compact sets, then it has a maximum on this set. -/\ntheorem ContinuousOn.exists_isMaxOn' [ClosedIciTopology α] {s : Set β} {f : β → α}\n    (hf : ContinuousOn f s) (hsc : IsClosed s) {x₀ : β} (h₀ : x₀ ∈ s)\n    (hc : ∀ᶠ x in cocompact β ⊓ 𝓟 s, f x ≤ f x₀) : ∃ x ∈ s, IsMaxOn f s x :=\n  ContinuousOn.exists_isMinOn' (α := αᵒᵈ) hf hsc h₀ hc\n\n"}
{"name":"Continuous.exists_forall_le'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\nf : β → α\nhf : Continuous f\nx₀ : β\nh : Filter.Eventually (fun x => LE.le (f x₀) (f x)) (Filter.cocompact β)\n⊢ Exists fun x => ∀ (y : β), LE.le (f x) (f y)","decl":"/-- The **extreme value theorem**: if a continuous function `f` is larger than a value in its range\naway from compact sets, then it has a global minimum. -/\ntheorem Continuous.exists_forall_le' [ClosedIicTopology α] {f : β → α} (hf : Continuous f)\n    (x₀ : β) (h : ∀ᶠ x in cocompact β, f x₀ ≤ f x) : ∃ x : β, ∀ y : β, f x ≤ f y :=\n  let ⟨x, _, hx⟩ := hf.continuousOn.exists_isMinOn' isClosed_univ (mem_univ x₀)\n    (by rwa [principal_univ, inf_top_eq])\n  ⟨x, fun y => hx (mem_univ y)⟩\n\n"}
{"name":"Continuous.exists_forall_ge'","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\nf : β → α\nhf : Continuous f\nx₀ : β\nh : Filter.Eventually (fun x => LE.le (f x) (f x₀)) (Filter.cocompact β)\n⊢ Exists fun x => ∀ (y : β), LE.le (f y) (f x)","decl":"/-- The **extreme value theorem**: if a continuous function `f` is smaller than a value in its range\naway from compact sets, then it has a global maximum. -/\ntheorem Continuous.exists_forall_ge' [ClosedIciTopology α] {f : β → α} (hf : Continuous f)\n    (x₀ : β) (h : ∀ᶠ x in cocompact β, f x ≤ f x₀) : ∃ x : β, ∀ y : β, f y ≤ f x :=\n  Continuous.exists_forall_le' (α := αᵒᵈ) hf x₀ h\n\n"}
{"name":"Continuous.exists_forall_le","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIicTopology α\ninst✝ : Nonempty β\nf : β → α\nhf : Continuous f\nhlim : Filter.Tendsto f (Filter.cocompact β) Filter.atTop\n⊢ Exists fun x => ∀ (y : β), LE.le (f x) (f y)","decl":"/-- The **extreme value theorem**: if a continuous function `f` tends to infinity away from compact\nsets, then it has a global minimum. -/\ntheorem Continuous.exists_forall_le [ClosedIicTopology α] [Nonempty β] {f : β → α}\n    (hf : Continuous f) (hlim : Tendsto f (cocompact β) atTop) : ∃ x, ∀ y, f x ≤ f y := by\n  inhabit β\n  exact hf.exists_forall_le' default (hlim.eventually <| eventually_ge_atTop _)\n\n"}
{"name":"Continuous.exists_forall_ge","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIciTopology α\ninst✝ : Nonempty β\nf : β → α\nhf : Continuous f\nhlim : Filter.Tendsto f (Filter.cocompact β) Filter.atBot\n⊢ Exists fun x => ∀ (y : β), LE.le (f y) (f x)","decl":"/-- The **extreme value theorem**: if a continuous function `f` tends to negative infinity away from\ncompact sets, then it has a global maximum. -/\ntheorem Continuous.exists_forall_ge [ClosedIciTopology α] [Nonempty β] {f : β → α}\n    (hf : Continuous f) (hlim : Tendsto f (cocompact β) atBot) : ∃ x, ∀ y, f y ≤ f x :=\n  Continuous.exists_forall_le (α := αᵒᵈ) hf hlim\n\n"}
{"name":"Continuous.exists_forall_le_of_hasCompactMulSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : ClosedIicTopology α\ninst✝¹ : Nonempty β\ninst✝ : One α\nf : β → α\nhf : Continuous f\nh : HasCompactMulSupport f\n⊢ Exists fun x => ∀ (y : β), LE.le (f x) (f y)","decl":"/-- A continuous function with compact support has a global minimum. -/\n@[to_additive \"A continuous function with compact support has a global minimum.\"]\ntheorem Continuous.exists_forall_le_of_hasCompactMulSupport [ClosedIicTopology α] [Nonempty β]\n    [One α] {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) :\n    ∃ x : β, ∀ y : β, f x ≤ f y := by\n  obtain ⟨_, ⟨x, rfl⟩, hx⟩ := (h.isCompact_range hf).exists_isLeast (range_nonempty _)\n  rw [mem_lowerBounds, forall_mem_range] at hx\n  exact ⟨x, hx⟩\n\n"}
{"name":"Continuous.exists_forall_le_of_hasCompactSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : ClosedIicTopology α\ninst✝¹ : Nonempty β\ninst✝ : Zero α\nf : β → α\nhf : Continuous f\nh : HasCompactSupport f\n⊢ Exists fun x => ∀ (y : β), LE.le (f x) (f y)","decl":"/-- A continuous function with compact support has a global minimum. -/\n@[to_additive \"A continuous function with compact support has a global minimum.\"]\ntheorem Continuous.exists_forall_le_of_hasCompactMulSupport [ClosedIicTopology α] [Nonempty β]\n    [One α] {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) :\n    ∃ x : β, ∀ y : β, f x ≤ f y := by\n  obtain ⟨_, ⟨x, rfl⟩, hx⟩ := (h.isCompact_range hf).exists_isLeast (range_nonempty _)\n  rw [mem_lowerBounds, forall_mem_range] at hx\n  exact ⟨x, hx⟩\n\n"}
{"name":"Continuous.exists_forall_ge_of_hasCompactMulSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : ClosedIciTopology α\ninst✝¹ : Nonempty β\ninst✝ : One α\nf : β → α\nhf : Continuous f\nh : HasCompactMulSupport f\n⊢ Exists fun x => ∀ (y : β), LE.le (f y) (f x)","decl":"/-- A continuous function with compact support has a global maximum. -/\n@[to_additive \"A continuous function with compact support has a global maximum.\"]\ntheorem Continuous.exists_forall_ge_of_hasCompactMulSupport [ClosedIciTopology α] [Nonempty β]\n    [One α] {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) :\n    ∃ x : β, ∀ y : β, f y ≤ f x :=\n  Continuous.exists_forall_le_of_hasCompactMulSupport (α := αᵒᵈ) hf h\n\n"}
{"name":"Continuous.exists_forall_ge_of_hasCompactSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁵ : LinearOrder α\ninst✝⁴ : TopologicalSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : ClosedIciTopology α\ninst✝¹ : Nonempty β\ninst✝ : Zero α\nf : β → α\nhf : Continuous f\nh : HasCompactSupport f\n⊢ Exists fun x => ∀ (y : β), LE.le (f y) (f x)","decl":"/-- A continuous function with compact support has a global maximum. -/\n@[to_additive \"A continuous function with compact support has a global maximum.\"]\ntheorem Continuous.exists_forall_ge_of_hasCompactMulSupport [ClosedIciTopology α] [Nonempty β]\n    [One α] {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) :\n    ∃ x : β, ∀ y : β, f y ≤ f x :=\n  Continuous.exists_forall_le_of_hasCompactMulSupport (α := αᵒᵈ) hf h\n\n"}
{"name":"IsCompact.bddBelow","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : ClosedIicTopology α\ninst✝ : Nonempty α\ns : Set α\nhs : IsCompact s\n⊢ BddBelow s","decl":"/-- A compact set is bounded below -/\ntheorem IsCompact.bddBelow [ClosedIicTopology α] [Nonempty α] {s : Set α} (hs : IsCompact s) :\n    BddBelow s := by\n  rcases s.eq_empty_or_nonempty with rfl | hne\n  · exact bddBelow_empty\n  · obtain ⟨a, -, has⟩ := hs.exists_isLeast hne\n    exact ⟨a, has⟩\n\n"}
{"name":"IsCompact.bddAbove","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : ClosedIciTopology α\ninst✝ : Nonempty α\ns : Set α\nhs : IsCompact s\n⊢ BddAbove s","decl":"/-- A compact set is bounded above -/\ntheorem IsCompact.bddAbove [ClosedIciTopology α] [Nonempty α] {s : Set α} (hs : IsCompact s) :\n    BddAbove s :=\n  IsCompact.bddBelow (α := αᵒᵈ) hs\n\n"}
{"name":"IsCompact.bddBelow_image","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIicTopology α\ninst✝ : Nonempty α\nf : β → α\nK : Set β\nhK : IsCompact K\nhf : ContinuousOn f K\n⊢ BddBelow (Set.image f K)","decl":"/-- A continuous function is bounded below on a compact set. -/\ntheorem IsCompact.bddBelow_image [ClosedIicTopology α] [Nonempty α] {f : β → α} {K : Set β}\n    (hK : IsCompact K) (hf : ContinuousOn f K) : BddBelow (f '' K) :=\n  (hK.image_of_continuousOn hf).bddBelow\n\n"}
{"name":"IsCompact.bddAbove_image","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIciTopology α\ninst✝ : Nonempty α\nf : β → α\nK : Set β\nhK : IsCompact K\nhf : ContinuousOn f K\n⊢ BddAbove (Set.image f K)","decl":"/-- A continuous function is bounded above on a compact set. -/\ntheorem IsCompact.bddAbove_image [ClosedIciTopology α] [Nonempty α] {f : β → α} {K : Set β}\n    (hK : IsCompact K) (hf : ContinuousOn f K) : BddAbove (f '' K) :=\n  IsCompact.bddBelow_image (α := αᵒᵈ) hK hf\n\n"}
{"name":"Continuous.bddBelow_range_of_hasCompactSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIicTopology α\ninst✝ : Zero α\nf : β → α\nhf : Continuous f\nh : HasCompactSupport f\n⊢ BddBelow (Set.range f)","decl":"/-- A continuous function with compact support is bounded below. -/\n@[to_additive \" A continuous function with compact support is bounded below. \"]\ntheorem Continuous.bddBelow_range_of_hasCompactMulSupport [ClosedIicTopology α] [One α]\n    {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) : BddBelow (range f) :=\n  (h.isCompact_range hf).bddBelow\n\n"}
{"name":"Continuous.bddBelow_range_of_hasCompactMulSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIicTopology α\ninst✝ : One α\nf : β → α\nhf : Continuous f\nh : HasCompactMulSupport f\n⊢ BddBelow (Set.range f)","decl":"/-- A continuous function with compact support is bounded below. -/\n@[to_additive \" A continuous function with compact support is bounded below. \"]\ntheorem Continuous.bddBelow_range_of_hasCompactMulSupport [ClosedIicTopology α] [One α]\n    {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) : BddBelow (range f) :=\n  (h.isCompact_range hf).bddBelow\n\n"}
{"name":"Continuous.bddAbove_range_of_hasCompactMulSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIciTopology α\ninst✝ : One α\nf : β → α\nhf : Continuous f\nh : HasCompactMulSupport f\n⊢ BddAbove (Set.range f)","decl":"/-- A continuous function with compact support is bounded above. -/\n@[to_additive \" A continuous function with compact support is bounded above. \"]\ntheorem Continuous.bddAbove_range_of_hasCompactMulSupport [ClosedIciTopology α] [One α]\n    {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) : BddAbove (range f) :=\n  Continuous.bddBelow_range_of_hasCompactMulSupport (α := αᵒᵈ) hf h\n\n"}
{"name":"Continuous.bddAbove_range_of_hasCompactSupport","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁴ : LinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : ClosedIciTopology α\ninst✝ : Zero α\nf : β → α\nhf : Continuous f\nh : HasCompactSupport f\n⊢ BddAbove (Set.range f)","decl":"/-- A continuous function with compact support is bounded above. -/\n@[to_additive \" A continuous function with compact support is bounded above. \"]\ntheorem Continuous.bddAbove_range_of_hasCompactMulSupport [ClosedIciTopology α] [One α]\n    {f : β → α} (hf : Continuous f) (h : HasCompactMulSupport f) : BddAbove (range f) :=\n  Continuous.bddBelow_range_of_hasCompactMulSupport (α := αᵒᵈ) hf h\n\n"}
{"name":"IsCompact.sSup_lt_iff_of_continuous","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : ConditionallyCompleteLinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\nf : β → α\nK : Set β\nhK : IsCompact K\nh0K : K.Nonempty\nhf : ContinuousOn f K\ny : α\n⊢ Iff (LT.lt (SupSet.sSup (Set.image f K)) y) (∀ (x : β), Membership.mem K x → LT.lt (f x) y)","decl":"theorem IsCompact.sSup_lt_iff_of_continuous [ClosedIciTopology α] {f : β → α} {K : Set β}\n    (hK : IsCompact K) (h0K : K.Nonempty) (hf : ContinuousOn f K) (y : α) :\n    sSup (f '' K) < y ↔ ∀ x ∈ K, f x < y := by\n  refine ⟨fun h x hx => (le_csSup (hK.bddAbove_image hf) <| mem_image_of_mem f hx).trans_lt h,\n    fun h => ?_⟩\n  obtain ⟨x, hx, h2x⟩ := hK.exists_isMaxOn h0K hf\n  refine (csSup_le (h0K.image f) ?_).trans_lt (h x hx)\n  rintro _ ⟨x', hx', rfl⟩; exact h2x hx'\n\n"}
{"name":"IsCompact.lt_sInf_iff_of_continuous","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : ConditionallyCompleteLinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\nf : β → α\nK : Set β\nhK : IsCompact K\nh0K : K.Nonempty\nhf : ContinuousOn f K\ny : α\n⊢ Iff (LT.lt y (InfSet.sInf (Set.image f K))) (∀ (x : β), Membership.mem K x → LT.lt y (f x))","decl":"theorem IsCompact.lt_sInf_iff_of_continuous [ClosedIicTopology α] {f : β → α} {K : Set β}\n    (hK : IsCompact K) (h0K : K.Nonempty) (hf : ContinuousOn f K) (y : α) :\n    y < sInf (f '' K) ↔ ∀ x ∈ K, y < f x :=\n  IsCompact.sSup_lt_iff_of_continuous (α := αᵒᵈ) hK h0K hf y\n\n"}
{"name":"IsCompact.sInf_mem","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIicTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ Membership.mem s (InfSet.sInf s)","decl":"theorem IsCompact.sInf_mem [ClosedIicTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : sInf s ∈ s :=\n  let ⟨_a, ha⟩ := hs.exists_isLeast ne_s\n  ha.csInf_mem\n\n"}
{"name":"IsCompact.sSup_mem","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIciTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ Membership.mem s (SupSet.sSup s)","decl":"theorem IsCompact.sSup_mem [ClosedIciTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : sSup s ∈ s :=\n  IsCompact.sInf_mem (α := αᵒᵈ) hs ne_s\n\n"}
{"name":"IsCompact.isGLB_sInf","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIicTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ IsGLB s (InfSet.sInf s)","decl":"theorem IsCompact.isGLB_sInf [ClosedIicTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : IsGLB s (sInf s) :=\n  isGLB_csInf ne_s hs.bddBelow\n\n"}
{"name":"IsCompact.isLUB_sSup","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIciTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ IsLUB s (SupSet.sSup s)","decl":"theorem IsCompact.isLUB_sSup [ClosedIciTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : IsLUB s (sSup s) :=\n  IsCompact.isGLB_sInf (α := αᵒᵈ) hs ne_s\n\n"}
{"name":"IsCompact.isLeast_sInf","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIicTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ IsLeast s (InfSet.sInf s)","decl":"theorem IsCompact.isLeast_sInf [ClosedIicTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : IsLeast s (sInf s) :=\n  ⟨hs.sInf_mem ne_s, (hs.isGLB_sInf ne_s).1⟩\n\n"}
{"name":"IsCompact.isGreatest_sSup","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : ClosedIciTopology α\ns : Set α\nhs : IsCompact s\nne_s : s.Nonempty\n⊢ IsGreatest s (SupSet.sSup s)","decl":"theorem IsCompact.isGreatest_sSup [ClosedIciTopology α] {s : Set α} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : IsGreatest s (sSup s) :=\n  IsCompact.isLeast_sInf (α := αᵒᵈ) hs ne_s\n\n"}
{"name":"IsCompact.exists_sInf_image_eq_and_le","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : ConditionallyCompleteLinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\ns : Set β\nhs : IsCompact s\nne_s : s.Nonempty\nf : β → α\nhf : ContinuousOn f s\n⊢ Exists fun x => And (Membership.mem s x) (And (Eq (InfSet.sInf (Set.image f s)) (f x)) (∀ (y : β), Membership.mem s y → LE.le (f x) (f y)))","decl":"theorem IsCompact.exists_sInf_image_eq_and_le [ClosedIicTopology α] {s : Set β}\n    (hs : IsCompact s) (ne_s : s.Nonempty) {f : β → α} (hf : ContinuousOn f s) :\n    ∃ x ∈ s, sInf (f '' s) = f x ∧ ∀ y ∈ s, f x ≤ f y :=\n  let ⟨x, hxs, hx⟩ := (hs.image_of_continuousOn hf).sInf_mem (ne_s.image f)\n  ⟨x, hxs, hx.symm, fun _y hy =>\n    hx.trans_le <| csInf_le (hs.image_of_continuousOn hf).bddBelow <| mem_image_of_mem f hy⟩\n\n"}
{"name":"IsCompact.exists_sSup_image_eq_and_ge","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : ConditionallyCompleteLinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\ns : Set β\nhs : IsCompact s\nne_s : s.Nonempty\nf : β → α\nhf : ContinuousOn f s\n⊢ Exists fun x => And (Membership.mem s x) (And (Eq (SupSet.sSup (Set.image f s)) (f x)) (∀ (y : β), Membership.mem s y → LE.le (f y) (f x)))","decl":"theorem IsCompact.exists_sSup_image_eq_and_ge [ClosedIciTopology α] {s : Set β}\n    (hs : IsCompact s) (ne_s : s.Nonempty) {f : β → α} (hf : ContinuousOn f s) :\n    ∃ x ∈ s, sSup (f '' s) = f x ∧ ∀ y ∈ s, f y ≤ f x :=\n  IsCompact.exists_sInf_image_eq_and_le (α := αᵒᵈ) hs ne_s hf\n\n"}
{"name":"IsCompact.exists_sInf_image_eq","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : ConditionallyCompleteLinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\ns : Set β\nhs : IsCompact s\nne_s : s.Nonempty\nf : β → α\nhf : ContinuousOn f s\n⊢ Exists fun x => And (Membership.mem s x) (Eq (InfSet.sInf (Set.image f s)) (f x))","decl":"theorem IsCompact.exists_sInf_image_eq [ClosedIicTopology α] {s : Set β} (hs : IsCompact s)\n    (ne_s : s.Nonempty) {f : β → α} (hf : ContinuousOn f s) : ∃ x ∈ s, sInf (f '' s) = f x :=\n  let ⟨x, hxs, hx, _⟩ := hs.exists_sInf_image_eq_and_le ne_s hf\n  ⟨x, hxs, hx⟩\n\n"}
{"name":"IsCompact.exists_sSup_image_eq","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : ConditionallyCompleteLinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\ns : Set β\nhs : IsCompact s\nne_s : s.Nonempty\nf : β → α\na✝ : ContinuousOn f s\n⊢ Exists fun x => And (Membership.mem s x) (Eq (SupSet.sSup (Set.image f s)) (f x))","decl":"theorem IsCompact.exists_sSup_image_eq [ClosedIciTopology α] {s : Set β} (hs : IsCompact s)\n    (ne_s : s.Nonempty) : ∀ {f : β → α}, ContinuousOn f s → ∃ x ∈ s, sSup (f '' s) = f x :=\n  IsCompact.exists_sInf_image_eq (α := αᵒᵈ) hs ne_s\n\n"}
{"name":"IsCompact.exists_isMinOn_mem_subset","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\nf : β → α\ns t : Set β\nz : β\nht : IsCompact t\nhf : ContinuousOn f t\nhz : Membership.mem t z\nhfz : ∀ (z' : β), Membership.mem (SDiff.sdiff t s) z' → LT.lt (f z) (f z')\n⊢ Exists fun x => And (Membership.mem s x) (IsMinOn f t x)","decl":"theorem IsCompact.exists_isMinOn_mem_subset [ClosedIicTopology α] {f : β → α} {s t : Set β}\n    {z : β} (ht : IsCompact t) (hf : ContinuousOn f t) (hz : z ∈ t)\n    (hfz : ∀ z' ∈ t \\ s, f z < f z') : ∃ x ∈ s, IsMinOn f t x :=\n  let ⟨x, hxt, hfx⟩ := ht.exists_isMinOn ⟨z, hz⟩ hf\n  ⟨x, by_contra fun hxs => (hfz x ⟨hxt, hxs⟩).not_le (hfx hz), hfx⟩\n\n"}
{"name":"IsCompact.exists_isMaxOn_mem_subset","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\nf : β → α\ns t : Set β\nz : β\nht : IsCompact t\nhf : ContinuousOn f t\nhz : Membership.mem t z\nhfz : ∀ (z' : β), Membership.mem (SDiff.sdiff t s) z' → LT.lt (f z') (f z)\n⊢ Exists fun x => And (Membership.mem s x) (IsMaxOn f t x)","decl":"theorem IsCompact.exists_isMaxOn_mem_subset [ClosedIciTopology α] {f : β → α} {s t : Set β}\n    {z : β} (ht : IsCompact t) (hf : ContinuousOn f t) (hz : z ∈ t)\n    (hfz : ∀ z' ∈ t \\ s, f z' < f z) : ∃ x ∈ s, IsMaxOn f t x :=\n  let ⟨x, hxt, hfx⟩ := ht.exists_isMaxOn ⟨z, hz⟩ hf\n  ⟨x, by_contra fun hxs => (hfz x ⟨hxt, hxs⟩).not_le (hfx hz), hfx⟩\n\n-- Porting note: rfc: assume `t ∈ 𝓝ˢ s` (a.k.a. `s ⊆ interior t`) instead of `s ⊆ t` and\n-- `IsOpen s`?\n"}
{"name":"IsCompact.exists_isLocalMin_mem_open","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIicTopology α\nf : β → α\ns t : Set β\nz : β\nht : IsCompact t\nhst : HasSubset.Subset s t\nhf : ContinuousOn f t\nhz : Membership.mem t z\nhfz : ∀ (z' : β), Membership.mem (SDiff.sdiff t s) z' → LT.lt (f z) (f z')\nhs : IsOpen s\n⊢ Exists fun x => And (Membership.mem s x) (IsLocalMin f x)","decl":"theorem IsCompact.exists_isLocalMin_mem_open [ClosedIicTopology α] {f : β → α} {s t : Set β}\n    {z : β} (ht : IsCompact t) (hst : s ⊆ t) (hf : ContinuousOn f t) (hz : z ∈ t)\n    (hfz : ∀ z' ∈ t \\ s, f z < f z') (hs : IsOpen s) : ∃ x ∈ s, IsLocalMin f x :=\n  let ⟨x, hxs, h⟩ := ht.exists_isMinOn_mem_subset hf hz hfz\n  ⟨x, hxs, h.isLocalMin <| mem_nhds_iff.2 ⟨s, hst, hs, hxs⟩⟩\n\n"}
{"name":"IsCompact.exists_isLocalMax_mem_open","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝³ : LinearOrder α\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : ClosedIciTopology α\nf : β → α\ns t : Set β\nz : β\nht : IsCompact t\nhst : HasSubset.Subset s t\nhf : ContinuousOn f t\nhz : Membership.mem t z\nhfz : ∀ (z' : β), Membership.mem (SDiff.sdiff t s) z' → LT.lt (f z') (f z)\nhs : IsOpen s\n⊢ Exists fun x => And (Membership.mem s x) (IsLocalMax f x)","decl":"theorem IsCompact.exists_isLocalMax_mem_open [ClosedIciTopology α] {f : β → α} {s t : Set β}\n    {z : β} (ht : IsCompact t) (hst : s ⊆ t) (hf : ContinuousOn f t) (hz : z ∈ t)\n    (hfz : ∀ z' ∈ t \\ s, f z' < f z) (hs : IsOpen s) : ∃ x ∈ s, IsLocalMax f x :=\n  let ⟨x, hxs, h⟩ := ht.exists_isMaxOn_mem_subset hf hz hfz\n  ⟨x, hxs, h.isLocalMax <| mem_nhds_iff.2 ⟨s, hst, hs, hxs⟩⟩\n\n"}
{"name":"eq_Icc_of_connected_compact","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\ninst✝² : ConditionallyCompleteLinearOrder α\ninst✝¹ : TopologicalSpace α\ninst✝ : OrderTopology α\ns : Set α\nh₁ : IsConnected s\nh₂ : IsCompact s\n⊢ Eq s (Set.Icc (InfSet.sInf s) (SupSet.sSup s))","decl":"theorem eq_Icc_of_connected_compact {s : Set α} (h₁ : IsConnected s) (h₂ : IsCompact s) :\n    s = Icc (sInf s) (sSup s) :=\n  eq_Icc_csInf_csSup_of_connected_bdd_closed h₁ h₂.bddBelow h₂.bddAbove h₂.isClosed\n\n"}
{"name":"IsCompact.continuous_sSup","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁴ : ConditionallyCompleteLinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : OrderTopology α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : γ → β → α\nK : Set β\nhK : IsCompact K\nhf : Continuous (Function.HasUncurry.uncurry f)\n⊢ Continuous fun x => SupSet.sSup (Set.image (f x) K)","decl":"/-- If `f : γ → β → α` is a function that is continuous as a function on `γ × β`, `α` is a\nconditionally complete linear order, and `K : Set β` is a compact set, then\n`fun x ↦ sSup (f x '' K)` is a continuous function. -/\n/- Porting note (https://github.com/leanprover-community/mathlib4/issues/11215): TODO: generalize. The following version seems to be true:\n```\ntheorem IsCompact.tendsto_sSup {f : γ → β → α} {g : β → α} {K : Set β} {l : Filter γ}\n    (hK : IsCompact K) (hf : ∀ y ∈ K, Tendsto ↿f (l ×ˢ 𝓝[K] y) (𝓝 (g y)))\n    (hgc : ContinuousOn g K) :\n    Tendsto (fun x => sSup (f x '' K)) l (𝓝 (sSup (g '' K))) := _\n```\nMoreover, it seems that `hgc` follows from `hf` (Yury Kudryashov). -/\ntheorem IsCompact.continuous_sSup {f : γ → β → α} {K : Set β} (hK : IsCompact K)\n    (hf : Continuous ↿f) : Continuous fun x => sSup (f x '' K) := by\n  rcases eq_empty_or_nonempty K with (rfl | h0K)\n  · simp_rw [image_empty]\n    exact continuous_const\n  rw [continuous_iff_continuousAt]\n  intro x\n  obtain ⟨y, hyK, h2y, hy⟩ :=\n    hK.exists_sSup_image_eq_and_ge h0K\n      (show Continuous fun y => f x y from hf.comp <| Continuous.Prod.mk x).continuousOn\n  rw [ContinuousAt, h2y, tendsto_order]\n  have := tendsto_order.mp ((show Continuous fun x => f x y\n    from hf.comp <| continuous_id.prod_mk continuous_const).tendsto x)\n  refine ⟨fun z hz => ?_, fun z hz => ?_⟩\n  · refine (this.1 z hz).mono fun x' hx' =>\n      hx'.trans_le <| le_csSup ?_ <| mem_image_of_mem (f x') hyK\n    exact hK.bddAbove_image (hf.comp <| Continuous.Prod.mk x').continuousOn\n  · have h : ({x} : Set γ) ×ˢ K ⊆ ↿f ⁻¹' Iio z := by\n      rintro ⟨x', y'⟩ ⟨(rfl : x' = x), hy'⟩\n      exact (hy y' hy').trans_lt hz\n    obtain ⟨u, v, hu, _, hxu, hKv, huv⟩ :=\n      generalized_tube_lemma isCompact_singleton hK (isOpen_Iio.preimage hf) h\n    refine eventually_of_mem (hu.mem_nhds (singleton_subset_iff.mp hxu)) fun x' hx' => ?_\n    rw [hK.sSup_lt_iff_of_continuous h0K\n        (show Continuous (f x') from hf.comp <| Continuous.Prod.mk x').continuousOn]\n    exact fun y' hy' => huv (mk_mem_prod hx' (hKv hy'))\n\n"}
{"name":"IsCompact.continuous_sInf","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝⁴ : ConditionallyCompleteLinearOrder α\ninst✝³ : TopologicalSpace α\ninst✝² : OrderTopology α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : γ → β → α\nK : Set β\nhK : IsCompact K\nhf : Continuous (Function.HasUncurry.uncurry f)\n⊢ Continuous fun x => InfSet.sInf (Set.image (f x) K)","decl":"theorem IsCompact.continuous_sInf {f : γ → β → α} {K : Set β} (hK : IsCompact K)\n    (hf : Continuous ↿f) : Continuous fun x => sInf (f x '' K) :=\n  IsCompact.continuous_sSup (α := αᵒᵈ) hK hf\n\n"}
{"name":"ContinuousOn.image_Icc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁶ : ConditionallyCompleteLinearOrder α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : OrderTopology α\ninst✝³ : TopologicalSpace β\ninst✝² : DenselyOrdered α\ninst✝¹ : ConditionallyCompleteLinearOrder β\ninst✝ : OrderTopology β\nf : α → β\na b : α\nhab : LE.le a b\nh : ContinuousOn f (Set.Icc a b)\n⊢ Eq (Set.image f (Set.Icc a b)) (Set.Icc (InfSet.sInf (Set.image f (Set.Icc a b))) (SupSet.sSup (Set.image f (Set.Icc a b))))","decl":"theorem image_Icc (hab : a ≤ b) (h : ContinuousOn f <| Icc a b) :\n    f '' Icc a b = Icc (sInf <| f '' Icc a b) (sSup <| f '' Icc a b) :=\n  eq_Icc_of_connected_compact ⟨(nonempty_Icc.2 hab).image f, isPreconnected_Icc.image f h⟩\n    (isCompact_Icc.image_of_continuousOn h)\n\n"}
{"name":"ContinuousOn.image_uIcc_eq_Icc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁶ : ConditionallyCompleteLinearOrder α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : OrderTopology α\ninst✝³ : TopologicalSpace β\ninst✝² : DenselyOrdered α\ninst✝¹ : ConditionallyCompleteLinearOrder β\ninst✝ : OrderTopology β\nf : α → β\na b : α\nh : ContinuousOn f (Set.uIcc a b)\n⊢ Eq (Set.image f (Set.uIcc a b)) (Set.Icc (InfSet.sInf (Set.image f (Set.uIcc a b))) (SupSet.sSup (Set.image f (Set.uIcc a b))))","decl":"theorem image_uIcc_eq_Icc (h : ContinuousOn f [[a, b]]) :\n    f '' [[a, b]] = Icc (sInf (f '' [[a, b]])) (sSup (f '' [[a, b]])) :=\n  image_Icc min_le_max h\n\n"}
{"name":"ContinuousOn.image_uIcc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁶ : ConditionallyCompleteLinearOrder α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : OrderTopology α\ninst✝³ : TopologicalSpace β\ninst✝² : DenselyOrdered α\ninst✝¹ : ConditionallyCompleteLinearOrder β\ninst✝ : OrderTopology β\nf : α → β\na b : α\nh : ContinuousOn f (Set.uIcc a b)\n⊢ Eq (Set.image f (Set.uIcc a b)) (Set.uIcc (InfSet.sInf (Set.image f (Set.uIcc a b))) (SupSet.sSup (Set.image f (Set.uIcc a b))))","decl":"theorem image_uIcc (h : ContinuousOn f <| [[a, b]]) :\n    f '' [[a, b]] = [[sInf (f '' [[a, b]]), sSup (f '' [[a, b]])]] := by\n  refine h.image_uIcc_eq_Icc.trans (uIcc_of_le ?_).symm\n  refine csInf_le_csSup ?_ ?_ (nonempty_uIcc.image _) <;> rw [h.image_uIcc_eq_Icc]\n  exacts [bddBelow_Icc, bddAbove_Icc]\n\n"}
{"name":"ContinuousOn.sInf_image_Icc_le","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁶ : ConditionallyCompleteLinearOrder α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : OrderTopology α\ninst✝³ : TopologicalSpace β\ninst✝² : DenselyOrdered α\ninst✝¹ : ConditionallyCompleteLinearOrder β\ninst✝ : OrderTopology β\nf : α → β\na b c : α\nh : ContinuousOn f (Set.Icc a b)\nhc : Membership.mem (Set.Icc a b) c\n⊢ LE.le (InfSet.sInf (Set.image f (Set.Icc a b))) (f c)","decl":"theorem sInf_image_Icc_le (h : ContinuousOn f <| Icc a b) (hc : c ∈ Icc a b) :\n    sInf (f '' Icc a b) ≤ f c := by\n  have := mem_image_of_mem f hc\n  rw [h.image_Icc (hc.1.trans hc.2)] at this\n  exact this.1\n\n"}
{"name":"ContinuousOn.le_sSup_image_Icc","module":"Mathlib.Topology.Order.Compact","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝⁶ : ConditionallyCompleteLinearOrder α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : OrderTopology α\ninst✝³ : TopologicalSpace β\ninst✝² : DenselyOrdered α\ninst✝¹ : ConditionallyCompleteLinearOrder β\ninst✝ : OrderTopology β\nf : α → β\na b c : α\nh : ContinuousOn f (Set.Icc a b)\nhc : Membership.mem (Set.Icc a b) c\n⊢ LE.le (f c) (SupSet.sSup (Set.image f (Set.Icc a b)))","decl":"theorem le_sSup_image_Icc (h : ContinuousOn f <| Icc a b) (hc : c ∈ Icc a b) :\n    f c ≤ sSup (f '' Icc a b) := by\n  have := mem_image_of_mem f hc\n  rw [h.image_Icc (hc.1.trans hc.2)] at this\n  exact this.2\n\n"}
