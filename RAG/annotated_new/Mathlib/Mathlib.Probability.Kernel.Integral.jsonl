{"name":"ProbabilityTheory.Kernel.IsFiniteKernel.integrable","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\nκ : ProbabilityTheory.Kernel α β\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Integrable (fun x => ((κ x) s).toReal) μ","decl":"lemma IsFiniteKernel.integrable (μ : Measure α) [IsFiniteMeasure μ]\n    (κ : Kernel α β) [IsFiniteKernel κ] {s : Set β} (hs : MeasurableSet s) :\n    Integrable (fun x ↦ (κ x s).toReal) μ := by\n  refine Integrable.mono' (integrable_const (IsFiniteKernel.bound κ).toReal)\n    ((κ.measurable_coe hs).ennreal_toReal.aestronglyMeasurable)\n    (ae_of_all μ fun x ↦ ?_)\n  rw [Real.norm_eq_abs, abs_of_nonneg ENNReal.toReal_nonneg]\n  exact ENNReal.toReal_mono (IsFiniteKernel.bound_ne_top _) (Kernel.measure_le_bound _ _ _)\n\n"}
{"name":"ProbabilityTheory.Kernel.IsMarkovKernel.integrable","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\nκ : ProbabilityTheory.Kernel α β\ninst✝ : ProbabilityTheory.IsMarkovKernel κ\ns : Set β\nhs : MeasurableSet s\n⊢ MeasureTheory.Integrable (fun x => ((κ x) s).toReal) μ","decl":"lemma IsMarkovKernel.integrable (μ : Measure α) [IsFiniteMeasure μ]\n    (κ : Kernel α β) [IsMarkovKernel κ] {s : Set β} (hs : MeasurableSet s) :\n    Integrable (fun x => (κ x s).toReal) μ :=\n  IsFiniteKernel.integrable μ κ hs\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_congr_ae₂","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nκ : ProbabilityTheory.Kernel α β\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf g : α → β → E\nμ : MeasureTheory.Measure α\nh : Filter.Eventually (fun a => (MeasureTheory.ae (κ a)).EventuallyEq (f a) (g a)) (MeasureTheory.ae μ)\n⊢ Eq (MeasureTheory.integral μ fun a => MeasureTheory.integral (κ a) fun b => f a b) (MeasureTheory.integral μ fun a => MeasureTheory.integral (κ a) fun b => g a b)","decl":"lemma integral_congr_ae₂ {f g : α → β → E} {μ : Measure α} (h : ∀ᵐ a ∂μ, f a =ᵐ[κ a] g a) :\n    ∫ a, ∫ b, f a b ∂(κ a) ∂μ = ∫ a, ∫ b, g a b ∂(κ a) ∂μ := by\n  apply integral_congr_ae\n  filter_upwards [h] with _ ha\n  apply integral_congr_ae\n  filter_upwards [ha] with _ hb using hb\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_deterministic'","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nE : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nf : β → E\na : α\ninst✝ : CompleteSpace E\ng : α → β\nhg : Measurable g\nhf : MeasureTheory.StronglyMeasurable f\n⊢ Eq (MeasureTheory.integral ((ProbabilityTheory.Kernel.deterministic g hg) a) fun x => f x) (f (g a))","decl":"theorem integral_deterministic' (hg : Measurable g) (hf : StronglyMeasurable f) :\n    ∫ x, f x ∂deterministic g hg a = f (g a) := by\n  rw [deterministic_apply, integral_dirac' _ _ hf]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_deterministic","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nf : β → E\na : α\ninst✝¹ : CompleteSpace E\ng : α → β\ninst✝ : MeasurableSingletonClass β\nhg : Measurable g\n⊢ Eq (MeasureTheory.integral ((ProbabilityTheory.Kernel.deterministic g hg) a) fun x => f x) (f (g a))","decl":"@[simp]\ntheorem integral_deterministic [MeasurableSingletonClass β] (hg : Measurable g) :\n    ∫ x, f x ∂deterministic g hg a = f (g a) := by\n  rw [deterministic_apply, integral_dirac _ (g a)]\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_deterministic'","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nE : Type u_3\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\nf : β → E\na : α\ninst✝¹ : CompleteSpace E\ng : α → β\nhg : Measurable g\nhf : MeasureTheory.StronglyMeasurable f\ns : Set β\nhs : MeasurableSet s\ninst✝ : Decidable (Membership.mem s (g a))\n⊢ Eq (MeasureTheory.integral (((ProbabilityTheory.Kernel.deterministic g hg) a).restrict s) fun x => f x) (ite (Membership.mem s (g a)) (f (g a)) 0)","decl":"theorem setIntegral_deterministic' (hg : Measurable g)\n    (hf : StronglyMeasurable f) {s : Set β} (hs : MeasurableSet s) [Decidable (g a ∈ s)] :\n    ∫ x in s, f x ∂deterministic g hg a = if g a ∈ s then f (g a) else 0 := by\n  rw [deterministic_apply, setIntegral_dirac' hf _ hs]\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_deterministic","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nE : Type u_3\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\nf : β → E\na : α\ninst✝² : CompleteSpace E\ng : α → β\ninst✝¹ : MeasurableSingletonClass β\nhg : Measurable g\ns : Set β\ninst✝ : Decidable (Membership.mem s (g a))\n⊢ Eq (MeasureTheory.integral (((ProbabilityTheory.Kernel.deterministic g hg) a).restrict s) fun x => f x) (ite (Membership.mem s (g a)) (f (g a)) 0)","decl":"@[simp]\ntheorem setIntegral_deterministic [MeasurableSingletonClass β] (hg : Measurable g)\n    (s : Set β) [Decidable (g a ∈ s)] :\n    ∫ x in s, f x ∂deterministic g hg a = if g a ∈ s then f (g a) else 0 := by\n  rw [deterministic_apply, setIntegral_dirac f _ s]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_const","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : β → E\na : α\nμ : MeasureTheory.Measure β\n⊢ Eq (MeasureTheory.integral ((ProbabilityTheory.Kernel.const α μ) a) fun x => f x) (MeasureTheory.integral μ fun x => f x)","decl":"@[simp]\ntheorem integral_const {μ : Measure β} : ∫ x, f x ∂const α μ a = ∫ x, f x ∂μ := by\n  rw [const_apply]\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_const","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : β → E\na : α\nμ : MeasureTheory.Measure β\ns : Set β\n⊢ Eq (MeasureTheory.integral (((ProbabilityTheory.Kernel.const α μ) a).restrict s) fun x => f x) (MeasureTheory.integral (μ.restrict s) fun x => f x)","decl":"@[simp]\ntheorem setIntegral_const {μ : Measure β} {s : Set β} :\n    ∫ x in s, f x ∂const α μ a = ∫ x in s, f x ∂μ := by rw [const_apply]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_restrict","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nκ : ProbabilityTheory.Kernel α β\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : β → E\na : α\ns : Set β\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral ((κ.restrict hs) a) fun x => f x) (MeasureTheory.integral ((κ a).restrict s) fun x => f x)","decl":"@[simp]\ntheorem integral_restrict (hs : MeasurableSet s) :\n    ∫ x, f x ∂κ.restrict hs a = ∫ x in s, f x ∂κ a := by\n  rw [restrict_apply]\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_restrict","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nκ : ProbabilityTheory.Kernel α β\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Real E\nf : β → E\na : α\ns : Set β\nhs : MeasurableSet s\nt : Set β\n⊢ Eq (MeasureTheory.integral (((κ.restrict hs) a).restrict t) fun x => f x) (MeasureTheory.integral ((κ a).restrict (Inter.inter t s)) fun x => f x)","decl":"@[simp]\ntheorem setIntegral_restrict (hs : MeasurableSet s) (t : Set β) :\n    ∫ x in t, f x ∂κ.restrict hs a = ∫ x in t ∩ s, f x ∂κ a := by\n  rw [restrict_apply, Measure.restrict_restrict' hs]\n\n"}
{"name":"ProbabilityTheory.Kernel.integral_piecewise","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nκ : ProbabilityTheory.Kernel α β\nE : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nη : ProbabilityTheory.Kernel α β\ns : Set α\nhs : MeasurableSet s\ninst✝ : DecidablePred fun x => Membership.mem s x\na : α\ng : β → E\n⊢ Eq (MeasureTheory.integral ((ProbabilityTheory.Kernel.piecewise hs κ η) a) fun b => g b) (ite (Membership.mem s a) (MeasureTheory.integral (κ a) fun b => g b) (MeasureTheory.integral (η a) fun b => g b))","decl":"theorem integral_piecewise (a : α) (g : β → E) :\n    ∫ b, g b ∂piecewise hs κ η a = if a ∈ s then ∫ b, g b ∂κ a else ∫ b, g b ∂η a := by\n  simp_rw [piecewise_apply]; split_ifs <;> rfl\n\n"}
{"name":"ProbabilityTheory.Kernel.setIntegral_piecewise","module":"Mathlib.Probability.Kernel.Integral","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nκ : ProbabilityTheory.Kernel α β\nE : Type u_3\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\nη : ProbabilityTheory.Kernel α β\ns : Set α\nhs : MeasurableSet s\ninst✝ : DecidablePred fun x => Membership.mem s x\na : α\ng : β → E\nt : Set β\n⊢ Eq (MeasureTheory.integral (((ProbabilityTheory.Kernel.piecewise hs κ η) a).restrict t) fun b => g b) (ite (Membership.mem s a) (MeasureTheory.integral ((κ a).restrict t) fun b => g b) (MeasureTheory.integral ((η a).restrict t) fun b => g b))","decl":"theorem setIntegral_piecewise (a : α) (g : β → E) (t : Set β) :\n    ∫ b in t, g b ∂piecewise hs κ η a =\n      if a ∈ s then ∫ b in t, g b ∂κ a else ∫ b in t, g b ∂η a := by\n  simp_rw [piecewise_apply]; split_ifs <;> rfl\n\n"}
