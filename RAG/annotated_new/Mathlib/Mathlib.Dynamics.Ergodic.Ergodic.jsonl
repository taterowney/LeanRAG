{"name":"PreErgodic.aeconst_set","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nself : PreErgodic f μ\ns : Set α\na✝¹ : MeasurableSet s\na✝ : Eq (Set.preimage f s) s\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"/-- A map `f : α → α` is said to be pre-ergodic with respect to a measure `μ` if any measurable\nstrictly invariant set is either almost empty or full. -/\nstructure PreErgodic (f : α → α) (μ : Measure α := by volume_tac) : Prop where\n  aeconst_set ⦃s⦄ : MeasurableSet s → f ⁻¹' s = s → EventuallyConst s (ae μ)\n\n"}
{"name":"Ergodic.toMeasurePreserving","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nself : Ergodic f μ\n⊢ MeasureTheory.MeasurePreserving f μ μ","decl":"/-- A map `f : α → α` is said to be ergodic with respect to a measure `μ` if it is measure\npreserving and pre-ergodic. -/\nstructure Ergodic (f : α → α) (μ : Measure α := by volume_tac) extends\n  MeasurePreserving f μ μ, PreErgodic f μ : Prop\n\n"}
{"name":"Ergodic.toPreErgodic","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nself : Ergodic f μ\n⊢ PreErgodic f μ","decl":"/-- A map `f : α → α` is said to be ergodic with respect to a measure `μ` if it is measure\npreserving and pre-ergodic. -/\nstructure Ergodic (f : α → α) (μ : Measure α := by volume_tac) extends\n  MeasurePreserving f μ μ, PreErgodic f μ : Prop\n\n"}
{"name":"QuasiErgodic.toQuasiMeasurePreserving","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nself : QuasiErgodic f μ\n⊢ MeasureTheory.Measure.QuasiMeasurePreserving f μ μ","decl":"/-- A map `f : α → α` is said to be quasi ergodic with respect to a measure `μ` if it is quasi\nmeasure preserving and pre-ergodic. -/\nstructure QuasiErgodic (f : α → α) (μ : Measure α := by volume_tac) extends\n  QuasiMeasurePreserving f μ μ, PreErgodic f μ : Prop\n\n"}
{"name":"QuasiErgodic.toPreErgodic","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : autoParam (MeasureTheory.Measure α) _auto✝\nself : QuasiErgodic f μ\n⊢ PreErgodic f μ","decl":"/-- A map `f : α → α` is said to be quasi ergodic with respect to a measure `μ` if it is quasi\nmeasure preserving and pre-ergodic. -/\nstructure QuasiErgodic (f : α → α) (μ : Measure α := by volume_tac) extends\n  QuasiMeasurePreserving f μ μ, PreErgodic f μ : Prop\n\n"}
{"name":"PreErgodic.ae_empty_or_univ","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : PreErgodic f μ\nhs : MeasurableSet s\nhfs : Eq (Set.preimage f s) s\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"theorem ae_empty_or_univ (hf : PreErgodic f μ) (hs : MeasurableSet s) (hfs : f ⁻¹' s = s) :\n    s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ := by\n  simpa only [eventuallyConst_set'] using hf.aeconst_set hs hfs\n\n"}
{"name":"PreErgodic.measure_self_or_compl_eq_zero","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : PreErgodic f μ\nhs : MeasurableSet s\nhs' : Eq (Set.preimage f s) s\n⊢ Or (Eq (μ s) 0) (Eq (μ (HasCompl.compl s)) 0)","decl":"theorem measure_self_or_compl_eq_zero (hf : PreErgodic f μ) (hs : MeasurableSet s)\n    (hs' : f ⁻¹' s = s) : μ s = 0 ∨ μ sᶜ = 0 := by\n  simpa using hf.ae_empty_or_univ hs hs'\n\n"}
{"name":"PreErgodic.ae_mem_or_ae_nmem","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : PreErgodic f μ\nhsm : MeasurableSet s\nhs : Eq (Set.preimage f s) s\n⊢ Or (Filter.Eventually (fun x => Membership.mem s x) (MeasureTheory.ae μ)) (Filter.Eventually (fun x => Not (Membership.mem s x)) (MeasureTheory.ae μ))","decl":"theorem ae_mem_or_ae_nmem (hf : PreErgodic f μ) (hsm : MeasurableSet s) (hs : f ⁻¹' s = s) :\n    (∀ᵐ x ∂μ, x ∈ s) ∨ ∀ᵐ x ∂μ, x ∉ s :=\n  eventuallyConst_set.1 <| hf.aeconst_set hsm hs\n\n"}
{"name":"PreErgodic.prob_eq_zero_or_one","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\nhf : PreErgodic f μ\nhs : MeasurableSet s\nhs' : Eq (Set.preimage f s) s\n⊢ Or (Eq (μ s) 0) (Eq (μ s) 1)","decl":"/-- On a probability space, the (pre)ergodicity condition is a zero one law. -/\ntheorem prob_eq_zero_or_one [IsProbabilityMeasure μ] (hf : PreErgodic f μ) (hs : MeasurableSet s)\n    (hs' : f ⁻¹' s = s) : μ s = 0 ∨ μ s = 1 := by\n  simpa [hs] using hf.measure_self_or_compl_eq_zero hs hs'\n\n"}
{"name":"PreErgodic.of_iterate","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nn : Nat\nhf : PreErgodic (Nat.iterate f n) μ\n⊢ PreErgodic f μ","decl":"theorem of_iterate (n : ℕ) (hf : PreErgodic f^[n] μ) : PreErgodic f μ :=\n  ⟨fun _ hs hs' => hf.aeconst_set hs <| IsFixedPt.preimage_iterate hs' n⟩\n\n"}
{"name":"PreErgodic.smul_measure","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nR : Type u_2\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nhf : PreErgodic f μ\nc : R\n⊢ PreErgodic f (HSMul.hSMul c μ)","decl":"theorem smul_measure {R : Type*} [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞]\n    (hf : PreErgodic f μ) (c : R) : PreErgodic f (c • μ) where\n  aeconst_set _s hs hfs := (hf.aeconst_set hs hfs).anti <| ae_smul_measure_le _\n\n"}
{"name":"PreErgodic.zero_measure","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\n⊢ PreErgodic f 0","decl":"theorem zero_measure (f : α → α) : @PreErgodic α m f 0 where\n  aeconst_set _ _ _ := by simp\n\n"}
{"name":"MeasureTheory.MeasurePreserving.preErgodic_of_preErgodic_conjugate","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nβ : Type u_2\nm' : MeasurableSpace β\nμ' : MeasureTheory.Measure β\ng : α → β\nhg : MeasureTheory.MeasurePreserving g μ μ'\nhf : PreErgodic f μ\nf' : β → β\nh_comm : Function.Semiconj g f f'\n⊢ PreErgodic f' μ'","decl":"theorem preErgodic_of_preErgodic_conjugate (hg : MeasurePreserving g μ μ') (hf : PreErgodic f μ)\n    {f' : β → β} (h_comm : Semiconj g f f') : PreErgodic f' μ' where\n  aeconst_set s hs₀ hs₁ := by\n    rw [← hg.aeconst_preimage hs₀.nullMeasurableSet]\n    apply hf.aeconst_set (hg.measurable hs₀)\n    rw [← preimage_comp, h_comm.comp_eq, preimage_comp, hs₁]\n\n"}
{"name":"MeasureTheory.MeasurePreserving.preErgodic_conjugate_iff","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nβ : Type u_2\nm' : MeasurableSpace β\nμ' : MeasureTheory.Measure β\ne : MeasurableEquiv α β\nh : MeasureTheory.MeasurePreserving (⇑e) μ μ'\n⊢ Iff (PreErgodic (Function.comp (⇑e) (Function.comp f ⇑e.symm)) μ') (PreErgodic f μ)","decl":"theorem preErgodic_conjugate_iff {e : α ≃ᵐ β} (h : MeasurePreserving e μ μ') :\n    PreErgodic (e ∘ f ∘ e.symm) μ' ↔ PreErgodic f μ := by\n  refine ⟨fun hf => preErgodic_of_preErgodic_conjugate (h.symm e) hf ?_,\n      fun hf => preErgodic_of_preErgodic_conjugate h hf ?_⟩\n  · simp [Semiconj]\n  · simp [Semiconj]\n\n"}
{"name":"MeasureTheory.MeasurePreserving.ergodic_conjugate_iff","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nβ : Type u_2\nm' : MeasurableSpace β\nμ' : MeasureTheory.Measure β\ne : MeasurableEquiv α β\nh : MeasureTheory.MeasurePreserving (⇑e) μ μ'\n⊢ Iff (Ergodic (Function.comp (⇑e) (Function.comp f ⇑e.symm)) μ') (Ergodic f μ)","decl":"theorem ergodic_conjugate_iff {e : α ≃ᵐ β} (h : MeasurePreserving e μ μ') :\n    Ergodic (e ∘ f ∘ e.symm) μ' ↔ Ergodic f μ := by\n  have : MeasurePreserving (e ∘ f ∘ e.symm) μ' μ' ↔ MeasurePreserving f μ μ := by\n    rw [h.comp_left_iff, (MeasurePreserving.symm e h).comp_right_iff]\n  replace h : PreErgodic (e ∘ f ∘ e.symm) μ' ↔ PreErgodic f μ := h.preErgodic_conjugate_iff\n  exact ⟨fun hf => { this.mp hf.toMeasurePreserving, h.mp hf.toPreErgodic with },\n    fun hf => { this.mpr hf.toMeasurePreserving, h.mpr hf.toPreErgodic with }⟩\n\n"}
{"name":"QuasiErgodic.aeconst_set₀","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : QuasiErgodic f μ\nhsm : MeasureTheory.NullMeasurableSet s μ\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ Filter.EventuallyConst s (MeasureTheory.ae μ)","decl":"theorem aeconst_set₀ (hf : QuasiErgodic f μ) (hsm : NullMeasurableSet s μ) (hs : f ⁻¹' s =ᵐ[μ] s) :\n    EventuallyConst s (ae μ) :=\n  let ⟨_t, h₀, h₁, h₂⟩ := hf.toQuasiMeasurePreserving.exists_preimage_eq_of_preimage_ae hsm hs\n  (hf.aeconst_set h₀ h₂).congr h₁\n\n"}
{"name":"QuasiErgodic.ae_empty_or_univ₀","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : QuasiErgodic f μ\nhsm : MeasureTheory.NullMeasurableSet s μ\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"/-- For a quasi ergodic map, sets that are almost invariant (rather than strictly invariant) are\nstill either almost empty or full. -/\ntheorem ae_empty_or_univ₀ (hf : QuasiErgodic f μ) (hsm : NullMeasurableSet s μ)\n    (hs : f ⁻¹' s =ᵐ[μ] s) :\n    s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ :=\n  eventuallyConst_set'.mp <| hf.aeconst_set₀ hsm hs\n\n"}
{"name":"QuasiErgodic.ae_mem_or_ae_nmem₀","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : QuasiErgodic f μ\nhsm : MeasureTheory.NullMeasurableSet s μ\nhs : (MeasureTheory.ae μ).EventuallyEq (Set.preimage f s) s\n⊢ Or (Filter.Eventually (fun x => Membership.mem s x) (MeasureTheory.ae μ)) (Filter.Eventually (fun x => Not (Membership.mem s x)) (MeasureTheory.ae μ))","decl":"/-- For a quasi ergodic map, sets that are almost invariant (rather than strictly invariant) are\nstill either almost empty or full. -/\ntheorem ae_mem_or_ae_nmem₀ (hf : QuasiErgodic f μ) (hsm : NullMeasurableSet s μ)\n    (hs : f ⁻¹' s =ᵐ[μ] s) :\n    (∀ᵐ x ∂μ, x ∈ s) ∨ ∀ᵐ x ∂μ, x ∉ s :=\n  eventuallyConst_set.mp <| hf.aeconst_set₀ hsm hs\n\n"}
{"name":"QuasiErgodic.smul_measure","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nR : Type u_2\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nhf : QuasiErgodic f μ\nc : R\n⊢ QuasiErgodic f (HSMul.hSMul c μ)","decl":"theorem smul_measure {R : Type*} [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞]\n    (hf : QuasiErgodic f μ) (c : R) : QuasiErgodic f (c • μ) :=\n  ⟨hf.1.smul_measure _, hf.2.smul_measure _⟩\n\n"}
{"name":"QuasiErgodic.zero_measure","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nhf : Measurable f\n⊢ QuasiErgodic f 0","decl":"theorem zero_measure {f : α → α} (hf : Measurable f) : @QuasiErgodic α m f 0 where\n  measurable := hf\n  absolutelyContinuous := by simp\n  toPreErgodic := .zero_measure f\n\n"}
{"name":"Ergodic.quasiErgodic","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : Ergodic f μ\n⊢ QuasiErgodic f μ","decl":"/-- An ergodic map is quasi ergodic. -/\ntheorem quasiErgodic (hf : Ergodic f μ) : QuasiErgodic f μ :=\n  { hf.toPreErgodic, hf.toMeasurePreserving.quasiMeasurePreserving with }\n\n"}
{"name":"Ergodic.ae_empty_or_univ_of_preimage_ae_le'","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : Ergodic f μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyLE (Set.preimage f s) s\nh_fin : Ne (μ s) Top.top\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"/-- See also `Ergodic.ae_empty_or_univ_of_preimage_ae_le`. -/\ntheorem ae_empty_or_univ_of_preimage_ae_le' (hf : Ergodic f μ) (hs : NullMeasurableSet s μ)\n    (hs' : f ⁻¹' s ≤ᵐ[μ] s) (h_fin : μ s ≠ ∞) : s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ := by\n  refine hf.quasiErgodic.ae_empty_or_univ₀ hs ?_\n  refine ae_eq_of_ae_subset_of_measure_ge hs' (hf.measure_preimage hs).ge ?_ h_fin\n  exact hs.preimage hf.quasiMeasurePreserving\n\n"}
{"name":"Ergodic.ae_empty_or_univ_of_ae_le_preimage'","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : Ergodic f μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyLE s (Set.preimage f s)\nh_fin : Ne (μ s) Top.top\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"/-- See also `Ergodic.ae_empty_or_univ_of_ae_le_preimage`. -/\ntheorem ae_empty_or_univ_of_ae_le_preimage' (hf : Ergodic f μ) (hs : NullMeasurableSet s μ)\n    (hs' : s ≤ᵐ[μ] f ⁻¹' s) (h_fin : μ s ≠ ∞) : s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ := by\n  replace h_fin : μ (f ⁻¹' s) ≠ ∞ := by rwa [hf.measure_preimage hs]\n  refine hf.quasiErgodic.ae_empty_or_univ₀ hs ?_\n  exact (ae_eq_of_ae_subset_of_measure_ge hs' (hf.measure_preimage hs).le hs h_fin).symm\n\n"}
{"name":"Ergodic.ae_empty_or_univ_of_image_ae_le'","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\nhf : Ergodic f μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyLE (Set.image f s) s\nh_fin : Ne (μ s) Top.top\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"/-- See also `Ergodic.ae_empty_or_univ_of_image_ae_le`. -/\ntheorem ae_empty_or_univ_of_image_ae_le' (hf : Ergodic f μ) (hs : NullMeasurableSet s μ)\n    (hs' : f '' s ≤ᵐ[μ] s) (h_fin : μ s ≠ ∞) : s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ := by\n  replace hs' : s ≤ᵐ[μ] f ⁻¹' s :=\n    (HasSubset.Subset.eventuallyLE (subset_preimage_image f s)).trans\n      (hf.quasiMeasurePreserving.preimage_mono_ae hs')\n  exact ae_empty_or_univ_of_ae_le_preimage' hf hs hs' h_fin\n\n"}
{"name":"Ergodic.smul_measure","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nμ : MeasureTheory.Measure α\nR : Type u_2\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nhf : Ergodic f μ\nc : R\n⊢ Ergodic f (HSMul.hSMul c μ)","decl":"theorem smul_measure {R : Type*} [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞]\n    (hf : Ergodic f μ) (c : R) : Ergodic f (c • μ) :=\n  ⟨hf.1.smul_measure _, hf.2.smul_measure _⟩\n\n"}
{"name":"Ergodic.zero_measure","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nf : α → α\nhf : Measurable f\n⊢ Ergodic f 0","decl":"theorem zero_measure {f : α → α} (hf : Measurable f) : @Ergodic α m f 0 where\n  measurable := hf\n  map_eq := by simp\n  toPreErgodic := .zero_measure f\n\n"}
{"name":"Ergodic.ae_empty_or_univ_of_preimage_ae_le","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhf : Ergodic f μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyLE (Set.preimage f s) s\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"theorem ae_empty_or_univ_of_preimage_ae_le (hf : Ergodic f μ) (hs : NullMeasurableSet s μ)\n    (hs' : f ⁻¹' s ≤ᵐ[μ] s) : s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ :=\n  ae_empty_or_univ_of_preimage_ae_le' hf hs hs' <| measure_ne_top μ s\n\n"}
{"name":"Ergodic.ae_empty_or_univ_of_ae_le_preimage","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhf : Ergodic f μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyLE s (Set.preimage f s)\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"theorem ae_empty_or_univ_of_ae_le_preimage (hf : Ergodic f μ) (hs : NullMeasurableSet s μ)\n    (hs' : s ≤ᵐ[μ] f ⁻¹' s) : s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ :=\n  ae_empty_or_univ_of_ae_le_preimage' hf hs hs' <| measure_ne_top μ s\n\n"}
{"name":"Ergodic.ae_empty_or_univ_of_image_ae_le","module":"Mathlib.Dynamics.Ergodic.Ergodic","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nf : α → α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhf : Ergodic f μ\nhs : MeasureTheory.NullMeasurableSet s μ\nhs' : (MeasureTheory.ae μ).EventuallyLE (Set.image f s) s\n⊢ Or ((MeasureTheory.ae μ).EventuallyEq s EmptyCollection.emptyCollection) ((MeasureTheory.ae μ).EventuallyEq s Set.univ)","decl":"theorem ae_empty_or_univ_of_image_ae_le (hf : Ergodic f μ) (hs : NullMeasurableSet s μ)\n    (hs' : f '' s ≤ᵐ[μ] s) : s =ᵐ[μ] (∅ : Set α) ∨ s =ᵐ[μ] univ :=\n  ae_empty_or_univ_of_image_ae_le' hf hs hs' <| measure_ne_top μ s\n\n"}
