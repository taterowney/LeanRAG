{"name":"CategoryTheory.HasProjectiveDimensionLT.subsingleton'","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\nX : C\nn : Nat\nself : CategoryTheory.HasProjectiveDimensionLT X n\ni : Nat\nhi : LE.le n i\nY : C\n‚ä¢ Subsingleton (CategoryTheory.Abelian.Ext X Y i)","decl":"/-- An object `X` in an abelian category has projective dimension `< n` if\nall `Ext X Y i` vanish when `n ‚â§ i`. See also `HasProjectiveDimensionLE`.\n(Do not use the `subsingleton'` field directly. Use the constructor\n`HasProjectiveDimensionLT.mk`, and the lemmas `hasProjectiveDimensionLT_iff` and\n`Ext.eq_zero_of_hasProjectiveDimensionLT`.) -/\nclass HasProjectiveDimensionLT (X : C) (n : ‚Ñï) : Prop where mk' ::\n  subsingleton' (i : ‚Ñï) (hi : n ‚â§ i) ‚¶ÉY : C‚¶Ñ :\n    letI := HasExt.standard C\n    Subsingleton (Ext.{max u v} X Y i)\n\n"}
{"name":"CategoryTheory.HasProjectiveDimensionLT.subsingleton","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\ninst‚úù : CategoryTheory.HasExt C\nX : C\nn : Nat\nhX : CategoryTheory.HasProjectiveDimensionLT X n\ni : Nat\nhi : LE.le n i\nY : C\n‚ä¢ Subsingleton (CategoryTheory.Abelian.Ext X Y i)","decl":"lemma subsingleton [hX : HasProjectiveDimensionLT X n] (i : ‚Ñï) (hi : n ‚â§ i) (Y : C) :\n    Subsingleton (Ext.{w} X Y i) := by\n  letI := HasExt.standard C\n  have := hX.subsingleton' i hi\n  exact Ext.chgUniv.{w, max u v}.symm.subsingleton\n\n"}
{"name":"CategoryTheory.HasProjectiveDimensionLT.mk","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\ninst‚úù : CategoryTheory.HasExt C\nX : C\nn : Nat\nhX : ‚àÄ (i : Nat), LE.le n i ‚Üí ‚àÄ ‚¶ÉY : C‚¶Ñ (e : CategoryTheory.Abelian.Ext X Y i), Eq e 0\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X n","decl":"variable {X n} in\nlemma mk (hX : ‚àÄ (i : ‚Ñï) (_ : n ‚â§ i) ‚¶ÉY : C‚¶Ñ, ‚àÄ (e : Ext X Y i), e = 0) :\n    HasProjectiveDimensionLT X n where\n  subsingleton' i hi Y := by\n    have : Subsingleton (Ext X Y i) := ‚ü®fun e‚ÇÅ e‚ÇÇ ‚Ü¶ by simp only [hX i hi]‚ü©\n    letI := HasExt.standard C\n    exact Ext.chgUniv.{max u v, w}.symm.subsingleton\n\n"}
{"name":"CategoryTheory.Abelian.Ext.eq_zero_of_hasProjectiveDimensionLT","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≥ : CategoryTheory.Category.{v, u} C\ninst‚úù¬≤ : CategoryTheory.Abelian C\ninst‚úù¬π : CategoryTheory.HasExt C\nX Y : C\ni : Nat\ne : CategoryTheory.Abelian.Ext X Y i\nn : Nat\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT X n\nhi : LE.le n i\n‚ä¢ Eq e 0","decl":"lemma Abelian.Ext.eq_zero_of_hasProjectiveDimensionLT [HasExt.{w} C]\n    {X Y : C} {i : ‚Ñï} (e : Ext X Y i) (n : ‚Ñï) [HasProjectiveDimensionLT X n]\n    (hi : n ‚â§ i) : e = 0 :=\n  (HasProjectiveDimensionLT.subsingleton X n i hi Y).elim _ _\n\n"}
{"name":"CategoryTheory.hasProjectiveDimensionLT_iff","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX : C\nn : Nat\ninst‚úù : CategoryTheory.HasExt C\n‚ä¢ Iff (CategoryTheory.HasProjectiveDimensionLT X n) (‚àÄ (i : Nat), LE.le n i ‚Üí ‚àÄ ‚¶ÉY : C‚¶Ñ (e : CategoryTheory.Abelian.Ext X Y i), Eq e 0)","decl":"lemma hasProjectiveDimensionLT_iff [HasExt.{w} C] :\n    HasProjectiveDimensionLT X n ‚Üî\n      ‚àÄ (i : ‚Ñï) (_ : n ‚â§ i) ‚¶ÉY : C‚¶Ñ, ‚àÄ (e : Ext X Y i), e = 0 :=\n  ‚ü®fun _ _ hi _ e ‚Ü¶ e.eq_zero_of_hasProjectiveDimensionLT n hi,\n    HasProjectiveDimensionLT.mk‚ü©\n\n"}
{"name":"CategoryTheory.Limits.IsZero.hasProjectiveDimensionLT_zero","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\nX : C\nhX : CategoryTheory.Limits.IsZero X\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X 0","decl":"variable {X} in\nlemma Limits.IsZero.hasProjectiveDimensionLT_zero (hX : IsZero X) :\n    HasProjectiveDimensionLT X 0 := by\n  letI := HasExt.standard C\n  rw [hasProjectiveDimensionLT_iff]\n  intro i hi Y e\n  rw [‚Üê e.mk‚ÇÄ_id_comp, hX.eq_of_src (ùüô X) 0, Ext.mk‚ÇÄ_zero, Ext.zero_comp]\n\n"}
{"name":"CategoryTheory.instHasProjectiveDimensionLTOfNatNat","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT 0 0","decl":"instance : HasProjectiveDimensionLT (0 : C) 0 :=\n  (isZero_zero C).hasProjectiveDimensionLT_zero\n\n"}
{"name":"CategoryTheory.hasProjectiveDimensionLT_of_ge","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX : C\nn m : Nat\nh : LE.le n m\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT X n\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X m","decl":"lemma hasProjectiveDimensionLT_of_ge (m : ‚Ñï) (h : n ‚â§ m)\n    [HasProjectiveDimensionLT X n] :\n    HasProjectiveDimensionLT X m := by\n  letI := HasExt.standard C\n  rw [hasProjectiveDimensionLT_iff]\n  intro i hi Y e\n  exact e.eq_zero_of_hasProjectiveDimensionLT n (by omega)\n\n"}
{"name":"CategoryTheory.instHasProjectiveDimensionLTHAddNat","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX : C\nn : Nat\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT X n\nk : Nat\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X (HAdd.hAdd n k)","decl":"instance [HasProjectiveDimensionLT X n] (k : ‚Ñï) :\n    HasProjectiveDimensionLT X (n + k) :=\n  hasProjectiveDimensionLT_of_ge X n (n + k) (by omega)\n\n"}
{"name":"CategoryTheory.instHasProjectiveDimensionLTHAddNat_1","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX : C\nn : Nat\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT X n\nk : Nat\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X (HAdd.hAdd k n)","decl":"instance [HasProjectiveDimensionLT X n] (k : ‚Ñï) :\n    HasProjectiveDimensionLT X (k + n) :=\n  hasProjectiveDimensionLT_of_ge X n (k + n) (by omega)\n\n"}
{"name":"CategoryTheory.instHasProjectiveDimensionLTSucc","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX : C\nn : Nat\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT X n\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X n.succ","decl":"instance [HasProjectiveDimensionLT X n] :\n    HasProjectiveDimensionLT X n.succ :=\n  inferInstanceAs (HasProjectiveDimensionLT X (n + 1))\n\n"}
{"name":"CategoryTheory.Retract.hasProjectiveDimensionLT","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX Y : C\nh : CategoryTheory.Retract X Y\nn : Nat\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT Y n\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X n","decl":"lemma Retract.hasProjectiveDimensionLT {X Y : C} (h : Retract X Y) (n : ‚Ñï)\n    [HasProjectiveDimensionLT Y n] :\n    HasProjectiveDimensionLT X n := by\n  letI := HasExt.standard C\n  rw [hasProjectiveDimensionLT_iff]\n  intro i hi T x\n  rw [‚Üê x.mk‚ÇÄ_id_comp, ‚Üê h.retract, ‚Üê Ext.mk‚ÇÄ_comp_mk‚ÇÄ,\n    Ext.comp_assoc_of_second_deg_zero,\n    ((Ext.mk‚ÇÄ h.r).comp x (zero_add i)).eq_zero_of_hasProjectiveDimensionLT n hi,\n    Ext.comp_zero]\n\n"}
{"name":"CategoryTheory.hasProjectiveDimensionLT_of_iso","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Abelian C\nX X' : C\ne : CategoryTheory.Iso X X'\nn : Nat\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT X n\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT X' n","decl":"lemma hasProjectiveDimensionLT_of_iso {X X' : C} (e : X ‚âÖ X') (n : ‚Ñï)\n    [HasProjectiveDimensionLT X n] :\n    HasProjectiveDimensionLT X' n :=\n  e.symm.retract.hasProjectiveDimensionLT n\n\n"}
{"name":"CategoryTheory.ShortComplex.ShortExact.hasProjectiveDimensionLT_X‚ÇÇ","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn : Nat\nh‚ÇÅ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÅ n\nh‚ÇÉ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÉ n\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÇ n","decl":"lemma hasProjectiveDimensionLT_X‚ÇÇ (h‚ÇÅ : HasProjectiveDimensionLT S.X‚ÇÅ n)\n    (h‚ÇÉ : HasProjectiveDimensionLT S.X‚ÇÉ n) :\n    HasProjectiveDimensionLT S.X‚ÇÇ n := by\n  letI := HasExt.standard C\n  rw [hasProjectiveDimensionLT_iff]\n  intro i hi Y x‚ÇÇ\n  obtain ‚ü®x‚ÇÉ, rfl‚ü© := Ext.contravariant_sequence_exact‚ÇÇ hS _ x‚ÇÇ\n    (Ext.eq_zero_of_hasProjectiveDimensionLT _ n hi)\n  rw [x‚ÇÉ.eq_zero_of_hasProjectiveDimensionLT n hi, Ext.comp_zero]\n\n"}
{"name":"CategoryTheory.ShortComplex.ShortExact.hasProjectiveDimensionLT_X‚ÇÉ","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn : Nat\nh‚ÇÅ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÅ n\nh‚ÇÇ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÇ (HAdd.hAdd n 1)\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÉ (HAdd.hAdd n 1)","decl":"lemma hasProjectiveDimensionLT_X‚ÇÉ (h‚ÇÅ : HasProjectiveDimensionLT S.X‚ÇÅ n)\n    (h‚ÇÇ : HasProjectiveDimensionLT S.X‚ÇÇ (n + 1)) :\n    HasProjectiveDimensionLT S.X‚ÇÉ (n + 1) := by\n  letI := HasExt.standard C\n  rw [hasProjectiveDimensionLT_iff]\n  rintro (_ | i) hi Y x‚ÇÉ\n  ¬∑ simp at hi\n  ¬∑ obtain ‚ü®x‚ÇÅ, rfl‚ü© := Ext.contravariant_sequence_exact‚ÇÉ hS _ x‚ÇÉ\n      (Ext.eq_zero_of_hasProjectiveDimensionLT _ (n + 1) hi) (add_comm _ _)\n    rw [x‚ÇÅ.eq_zero_of_hasProjectiveDimensionLT n (by omega), Ext.comp_zero]\n\n"}
{"name":"CategoryTheory.ShortComplex.ShortExact.hasProjectiveDimensionLT_X‚ÇÅ","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn : Nat\nh‚ÇÇ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÇ n\nh‚ÇÉ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÉ (HAdd.hAdd n 1)\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÅ n","decl":"lemma hasProjectiveDimensionLT_X‚ÇÅ (h‚ÇÇ : HasProjectiveDimensionLT S.X‚ÇÇ n)\n    (h‚ÇÉ : HasProjectiveDimensionLT S.X‚ÇÉ (n + 1)) :\n    HasProjectiveDimensionLT S.X‚ÇÅ n := by\n  letI := HasExt.standard C\n  rw [hasProjectiveDimensionLT_iff]\n  intro i hi Y x‚ÇÅ\n  obtain ‚ü®x‚ÇÇ, rfl‚ü© := Ext.contravariant_sequence_exact‚ÇÅ hS _ x‚ÇÅ (add_comm _ _)\n    (Ext.eq_zero_of_hasProjectiveDimensionLT _ (n + 1) (by omega))\n  rw [x‚ÇÇ.eq_zero_of_hasProjectiveDimensionLT n (by omega), Ext.comp_zero]\n\n-- When we know `HasProjectiveDimensionLT S.X‚ÇÇ 1` is equivalent to `Projective S.X‚ÇÇ`,\n-- the assumption `h‚ÇÇ` can be changed to `h‚ÇÇ : Projective S.X‚ÇÇ`.\n"}
{"name":"CategoryTheory.ShortComplex.ShortExact.hasProjectiveDimensionLT_X‚ÇÉ_iff","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\ninst‚úù : CategoryTheory.Abelian C\nS : CategoryTheory.ShortComplex C\nhS : S.ShortExact\nn : Nat\nh‚ÇÇ : CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÇ 1\n‚ä¢ Iff (CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÉ (HAdd.hAdd n 2)) (CategoryTheory.HasProjectiveDimensionLT S.X‚ÇÅ (HAdd.hAdd n 1))","decl":"lemma hasProjectiveDimensionLT_X‚ÇÉ_iff (n : ‚Ñï) (h‚ÇÇ : HasProjectiveDimensionLT S.X‚ÇÇ 1) :\n    HasProjectiveDimensionLT S.X‚ÇÉ (n + 2) ‚Üî HasProjectiveDimensionLT S.X‚ÇÅ (n + 1) :=\n  ‚ü®fun _ ‚Ü¶ hS.hasProjectiveDimensionLT_X‚ÇÅ (n + 1) inferInstance inferInstance,\n    fun _ ‚Ü¶ hS.hasProjectiveDimensionLT_X‚ÇÉ (n + 1) inferInstance inferInstance‚ü©\n\n"}
{"name":"CategoryTheory.instHasProjectiveDimensionLTBiprod","module":"Mathlib.CategoryTheory.Abelian.ProjectiveDimension","initialProofState":"C : Type u\ninst‚úù¬≥ : CategoryTheory.Category.{v, u} C\ninst‚úù¬≤ : CategoryTheory.Abelian C\nX Y : C\nn : Nat\ninst‚úù¬π : CategoryTheory.HasProjectiveDimensionLT X n\ninst‚úù : CategoryTheory.HasProjectiveDimensionLT Y n\n‚ä¢ CategoryTheory.HasProjectiveDimensionLT (CategoryTheory.Limits.biprod X Y) n","decl":"instance (X Y : C) (n : ‚Ñï) [HasProjectiveDimensionLT X n]\n    [HasProjectiveDimensionLT Y n] :\n    HasProjectiveDimensionLT (X ‚äû Y) n :=\n  (ShortComplex.Splitting.ofHasBinaryBiproduct X Y).shortExact.hasProjectiveDimensionLT_X‚ÇÇ n\n    (by assumption) (by assumption)\n\n"}
