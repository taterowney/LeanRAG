{"name":"CompHausLike.mk.injEq","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\ntoTop‚úù : TopCat\nis_compact‚úù : CompactSpace ‚ÜëtoTop‚úù\nis_hausdorff‚úù : T2Space ‚ÜëtoTop‚úù\nprop‚úù : P toTop‚úù\ntoTop : TopCat\nis_compact : CompactSpace ‚ÜëtoTop\nis_hausdorff : T2Space ‚ÜëtoTop\nprop : P toTop\n‚ä¢ Eq (Eq (CompHausLike.mk toTop‚úù prop‚úù) (CompHausLike.mk toTop prop)) (Eq toTop‚úù toTop)","decl":"/-- The type of Compact Hausdorff topological spaces satisfying an additional property `P`. -/\nstructure CompHausLike where\n  /-- The underlying topological space of an object of `CompHausLike P`. -/\n  toTop : TopCat\n  /-- The underlying topological space is compact. -/\n  [is_compact : CompactSpace toTop]\n  /-- The underlying topological space is T2. -/\n  [is_hausdorff : T2Space toTop]\n  /-- The underlying topological space satisfies P. -/\n  prop : P toTop\n\n"}
{"name":"CompHausLike.is_compact","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nself : CompHausLike P\n‚ä¢ CompactSpace ‚Üëself.toTop","decl":"/-- The type of Compact Hausdorff topological spaces satisfying an additional property `P`. -/\nstructure CompHausLike where\n  /-- The underlying topological space of an object of `CompHausLike P`. -/\n  toTop : TopCat\n  /-- The underlying topological space is compact. -/\n  [is_compact : CompactSpace toTop]\n  /-- The underlying topological space is T2. -/\n  [is_hausdorff : T2Space toTop]\n  /-- The underlying topological space satisfies P. -/\n  prop : P toTop\n\n"}
{"name":"CompHausLike.mk.inj","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\ntoTop‚úù : TopCat\nis_compact‚úù : CompactSpace ‚ÜëtoTop‚úù\nis_hausdorff‚úù : T2Space ‚ÜëtoTop‚úù\nprop‚úù : P toTop‚úù\ntoTop : TopCat\nis_compact : CompactSpace ‚ÜëtoTop\nis_hausdorff : T2Space ‚ÜëtoTop\nprop : P toTop\nx‚úù : Eq (CompHausLike.mk toTop‚úù prop‚úù) (CompHausLike.mk toTop prop)\n‚ä¢ Eq toTop‚úù toTop","decl":"/-- The type of Compact Hausdorff topological spaces satisfying an additional property `P`. -/\nstructure CompHausLike where\n  /-- The underlying topological space of an object of `CompHausLike P`. -/\n  toTop : TopCat\n  /-- The underlying topological space is compact. -/\n  [is_compact : CompactSpace toTop]\n  /-- The underlying topological space is T2. -/\n  [is_hausdorff : T2Space toTop]\n  /-- The underlying topological space satisfies P. -/\n  prop : P toTop\n\n"}
{"name":"CompHausLike.mk.sizeOf_spec","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\ninst‚úù : (a : TopCat) ‚Üí SizeOf (P a)\ntoTop : TopCat\nis_compact : CompactSpace ‚ÜëtoTop\nis_hausdorff : T2Space ‚ÜëtoTop\nprop : P toTop\n‚ä¢ Eq (SizeOf.sizeOf (CompHausLike.mk toTop prop)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toTop)) (SizeOf.sizeOf is_compact)) (SizeOf.sizeOf is_hausdorff)) (SizeOf.sizeOf prop))","decl":"/-- The type of Compact Hausdorff topological spaces satisfying an additional property `P`. -/\nstructure CompHausLike where\n  /-- The underlying topological space of an object of `CompHausLike P`. -/\n  toTop : TopCat\n  /-- The underlying topological space is compact. -/\n  [is_compact : CompactSpace toTop]\n  /-- The underlying topological space is T2. -/\n  [is_hausdorff : T2Space toTop]\n  /-- The underlying topological space satisfies P. -/\n  prop : P toTop\n\n"}
{"name":"CompHausLike.is_hausdorff","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nself : CompHausLike P\n‚ä¢ T2Space ‚Üëself.toTop","decl":"/-- The type of Compact Hausdorff topological spaces satisfying an additional property `P`. -/\nstructure CompHausLike where\n  /-- The underlying topological space of an object of `CompHausLike P`. -/\n  toTop : TopCat\n  /-- The underlying topological space is compact. -/\n  [is_compact : CompactSpace toTop]\n  /-- The underlying topological space is T2. -/\n  [is_hausdorff : T2Space toTop]\n  /-- The underlying topological space satisfies P. -/\n  prop : P toTop\n\n"}
{"name":"CompHausLike.prop","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nself : CompHausLike P\n‚ä¢ P self.toTop","decl":"/-- The type of Compact Hausdorff topological spaces satisfying an additional property `P`. -/\nstructure CompHausLike where\n  /-- The underlying topological space of an object of `CompHausLike P`. -/\n  toTop : TopCat\n  /-- The underlying topological space is compact. -/\n  [is_compact : CompactSpace toTop]\n  /-- The underlying topological space is T2. -/\n  [is_hausdorff : T2Space toTop]\n  /-- The underlying topological space satisfies P. -/\n  prop : P toTop\n\n"}
{"name":"CompHausLike.HasProp.hasProp","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : Type u\ninst‚úù : TopologicalSpace X\nself : CompHausLike.HasProp P X\n‚ä¢ P (TopCat.of X)","decl":"/-- This wraps the predicate `P : TopCat ‚Üí Prop` in a typeclass. -/\nclass HasProp : Prop where\n  hasProp : P (TopCat.of X)\n\n"}
{"name":"CompHausLike.coe_of","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : Type u\ninst‚úù¬≥ : TopologicalSpace X\ninst‚úù¬≤ : CompactSpace X\ninst‚úù¬π : T2Space X\ninst‚úù : CompHausLike.HasProp P X\n‚ä¢ Eq (‚Üë(CompHausLike.of P X).toTop) X","decl":"@[simp]\ntheorem coe_of : (CompHausLike.of P X : Type _) = X :=\n  rfl\n\n"}
{"name":"CompHausLike.coe_id","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : CompHausLike P\n‚ä¢ Eq (CategoryTheory.CategoryStruct.id ((CategoryTheory.forget (CompHausLike P)).obj X)) id","decl":"@[simp]\ntheorem coe_id (X : CompHausLike P) : (ùüô ((forget (CompHausLike P)).obj X)) = id :=\n  rfl\n\n"}
{"name":"CompHausLike.coe_comp","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y Z : CompHausLike P\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp ((CategoryTheory.forget (CompHausLike P)).map f) ((CategoryTheory.forget (CompHausLike P)).map g)) (Function.comp ‚áëg ‚áëf)","decl":"@[simp]\ntheorem coe_comp {X Y Z : CompHausLike P} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :\n    ((forget (CompHausLike P)).map f ‚â´ (forget (CompHausLike P)).map g) = g ‚àò f :=\n  rfl\n\n-- Note (https://github.com/leanprover-community/mathlib4/issues/10754): Lean does not see through the forgetful functor here\n"}
{"name":"CompHausLike.instCompactSpaceObjForget","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : CompHausLike P\n‚ä¢ CompactSpace ((CategoryTheory.forget (CompHausLike P)).obj X)","decl":"instance (X : CompHausLike.{u} P) : CompactSpace ((forget (CompHausLike P)).obj X) :=\n  inferInstanceAs (CompactSpace X.toTop)\n\n-- Note (https://github.com/leanprover-community/mathlib4/issues/10754): Lean does not see through the forgetful functor here\n"}
{"name":"CompHausLike.instT2SpaceObjForget","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : CompHausLike P\n‚ä¢ T2Space ((CategoryTheory.forget (CompHausLike P)).obj X)","decl":"instance (X : CompHausLike.{u} P) : T2Space ((forget (CompHausLike P)).obj X) :=\n  inferInstanceAs (T2Space X.toTop)\n\n"}
{"name":"CompHausLike.toCompHausLike_map","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P P' : TopCat ‚Üí Prop\nh : ‚àÄ (X : CompHausLike P), P X.toTop ‚Üí P' X.toTop\nX‚úù Y‚úù : CompHausLike P\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CompHausLike.toCompHausLike h).map f) f","decl":"/-- If `P` imples `P'`, then there is a functor from `CompHausLike P` to `CompHausLike P'`. -/\n@[simps]\ndef toCompHausLike {P P' : TopCat ‚Üí Prop} (h : ‚àÄ (X : CompHausLike P), P X.toTop ‚Üí P' X.toTop) :\n    CompHausLike P ‚•§ CompHausLike P' where\n  obj X :=\n    have : HasProp P' X := ‚ü®(h _ X.prop)‚ü©\n    CompHausLike.of _ X\n  map f := f\n\n"}
{"name":"CompHausLike.toCompHausLike_obj","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P P' : TopCat ‚Üí Prop\nh : ‚àÄ (X : CompHausLike P), P X.toTop ‚Üí P' X.toTop\nX : CompHausLike P\n‚ä¢ Eq ((CompHausLike.toCompHausLike h).obj X) (letFun ‚ãØ fun this => CompHausLike.of P' ‚ÜëX.toTop)","decl":"/-- If `P` imples `P'`, then there is a functor from `CompHausLike P` to `CompHausLike P'`. -/\n@[simps]\ndef toCompHausLike {P P' : TopCat ‚Üí Prop} (h : ‚àÄ (X : CompHausLike P), P X.toTop ‚Üí P' X.toTop) :\n    CompHausLike P ‚•§ CompHausLike P' where\n  obj X :=\n    have : HasProp P' X := ‚ü®(h _ X.prop)‚ü©\n    CompHausLike.of _ X\n  map f := f\n\n"}
{"name":"CompHausLike.instFullToCompHausLike","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P P' : TopCat ‚Üí Prop\nh : ‚àÄ (X : CompHausLike P), P X.toTop ‚Üí P' X.toTop\n‚ä¢ (CompHausLike.toCompHausLike h).Full","decl":"instance : (toCompHausLike h).Full := (fullyFaithfulToCompHausLike h).full\n\n"}
{"name":"CompHausLike.instFaithfulToCompHausLike","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P P' : TopCat ‚Üí Prop\nh : ‚àÄ (X : CompHausLike P), P X.toTop ‚Üí P' X.toTop\n‚ä¢ (CompHausLike.toCompHausLike h).Faithful","decl":"instance : (toCompHausLike h).Faithful := (fullyFaithfulToCompHausLike h).faithful\n\n"}
{"name":"CompHausLike.compHausLikeToTop_map","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX‚úù Y‚úù : CategoryTheory.InducedCategory TopCat CompHausLike.toTop\nf : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CompHausLike.compHausLikeToTop P).map f) f","decl":"/-- The fully faithful embedding of `CompHausLike P` in `TopCat`. -/\n@[simps!]\ndef compHausLikeToTop : CompHausLike.{u} P ‚•§ TopCat.{u} :=\n  inducedFunctor _ -- deriving Full, Faithful -- Porting note: deriving fails, adding manually.\n\n"}
{"name":"CompHausLike.compHausLikeToTop_obj","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nself : CompHausLike P\n‚ä¢ Eq ((CompHausLike.compHausLikeToTop P).obj self) self.toTop","decl":"/-- The fully faithful embedding of `CompHausLike P` in `TopCat`. -/\n@[simps!]\ndef compHausLikeToTop : CompHausLike.{u} P ‚•§ TopCat.{u} :=\n  inducedFunctor _ -- deriving Full, Faithful -- Porting note: deriving fails, adding manually.\n\n"}
{"name":"CompHausLike.instFullTopCatCompHausLikeToTop","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\n‚ä¢ (CompHausLike.compHausLikeToTop P).Full","decl":"instance : (compHausLikeToTop P).Full  :=\n  inferInstanceAs (inducedFunctor _).Full\n\n"}
{"name":"CompHausLike.instFaithfulTopCatCompHausLikeToTop","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\n‚ä¢ (CompHausLike.compHausLikeToTop P).Faithful","decl":"instance : (compHausLikeToTop P).Faithful :=\n  inferInstanceAs (inducedFunctor _).Faithful\n\n"}
{"name":"CompHausLike.instCompactSpaceŒ±TopologicalSpaceObjTopCatCompHausLikeToTop","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : CompHausLike P\n‚ä¢ CompactSpace ‚Üë((CompHausLike.compHausLikeToTop P).obj X)","decl":"instance (X : CompHausLike P) : CompactSpace ((compHausLikeToTop P).obj X) :=\n  inferInstanceAs (CompactSpace X.toTop)\n\n"}
{"name":"CompHausLike.instT2SpaceŒ±TopologicalSpaceObjTopCatCompHausLikeToTop","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX : CompHausLike P\n‚ä¢ T2Space ‚Üë((CompHausLike.compHausLikeToTop P).obj X)","decl":"instance (X : CompHausLike P) : T2Space ((compHausLikeToTop P).obj X) :=\n  inferInstanceAs (T2Space X.toTop)\n\n"}
{"name":"CompHausLike.epi_of_surjective","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Quiver.Hom X Y\nhf : Function.Surjective ‚áëf\n‚ä¢ CategoryTheory.Epi f","decl":"theorem epi_of_surjective {X Y : CompHausLike.{u} P} (f : X ‚ü∂ Y) (hf : Function.Surjective f) :\n    Epi f := by\n  rw [‚Üê CategoryTheory.epi_iff_surjective] at hf\n  exact (forget (CompHausLike P)).epi_of_epi_map hf\n\n"}
{"name":"CompHausLike.mono_iff_injective","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Quiver.Hom X Y\n‚ä¢ Iff (CategoryTheory.Mono f) (Function.Injective ‚áëf)","decl":"theorem mono_iff_injective {X Y : CompHausLike.{u} P} (f : X ‚ü∂ Y) :\n    Mono f ‚Üî Function.Injective f := by\n  constructor\n  ¬∑ intro hf x‚ÇÅ x‚ÇÇ h\n    let g‚ÇÅ : X ‚ü∂ X := ‚ü®fun _ => x‚ÇÅ, continuous_const‚ü©\n    let g‚ÇÇ : X ‚ü∂ X := ‚ü®fun _ => x‚ÇÇ, continuous_const‚ü©\n    have : g‚ÇÅ ‚â´ f = g‚ÇÇ ‚â´ f := by ext; exact h\n    exact ContinuousMap.congr_fun ((cancel_mono _).mp this) x‚ÇÅ\n  ¬∑ rw [‚Üê CategoryTheory.mono_iff_injective]\n    apply (forget (CompHausLike P)).mono_of_mono_map\n\n"}
{"name":"CompHausLike.isClosedMap","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Quiver.Hom X Y\n‚ä¢ IsClosedMap ‚áëf","decl":"/-- Any continuous function on compact Hausdorff spaces is a closed map. -/\ntheorem isClosedMap {X Y : CompHausLike.{u} P} (f : X ‚ü∂ Y) : IsClosedMap f := fun _ hC =>\n  (hC.isCompact.image f.continuous).isClosed\n\n"}
{"name":"CompHausLike.isIso_of_bijective","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Quiver.Hom X Y\nbij : Function.Bijective ‚áëf\n‚ä¢ CategoryTheory.IsIso f","decl":"/-- Any continuous bijection of compact Hausdorff spaces is an isomorphism. -/\ntheorem isIso_of_bijective {X Y : CompHausLike.{u} P} (f : X ‚ü∂ Y) (bij : Function.Bijective f) :\n    IsIso f := by\n  let E := Equiv.ofBijective _ bij\n  have hE : Continuous E.symm := by\n    rw [continuous_iff_isClosed]\n    intro S hS\n    rw [‚Üê E.image_eq_preimage]\n    exact isClosedMap f S hS\n  refine ‚ü®‚ü®‚ü®E.symm, hE‚ü©, ?_, ?_‚ü©‚ü©\n  ¬∑ ext x\n    apply E.symm_apply_apply\n  ¬∑ ext x\n    apply E.apply_symm_apply\n\n"}
{"name":"CompHausLike.forget_reflectsIsomorphisms","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\n‚ä¢ (CategoryTheory.forget (CompHausLike P)).ReflectsIsomorphisms","decl":"instance forget_reflectsIsomorphisms :\n    (forget (CompHausLike.{u} P)).ReflectsIsomorphisms :=\n  ‚ü®by intro A B f hf; rw [isIso_iff_bijective] at hf; exact isIso_of_bijective _ hf‚ü©\n\n"}
{"name":"CompHausLike.isoOfHomeo_inv_apply","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Homeomorph ‚ÜëX.toTop ‚ÜëY.toTop\na : ‚Üë((CompHausLike.compHausLikeToTop P).obj Y)\n‚ä¢ Eq ((CompHausLike.isoOfHomeo f).inv a) (f.symm a)","decl":"/-- Construct an isomorphism from a homeomorphism. -/\n@[simps!]\ndef isoOfHomeo {X Y : CompHausLike.{u} P} (f : X ‚âÉ‚Çú Y) : X ‚âÖ Y :=\n  (fullyFaithfulCompHausLikeToTop P).preimageIso (TopCat.isoOfHomeo f)\n\n"}
{"name":"CompHausLike.isoOfHomeo_hom_apply","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Homeomorph ‚ÜëX.toTop ‚ÜëY.toTop\na : ‚Üë((CompHausLike.compHausLikeToTop P).obj X)\n‚ä¢ Eq ((CompHausLike.isoOfHomeo f).hom a) (f a)","decl":"/-- Construct an isomorphism from a homeomorphism. -/\n@[simps!]\ndef isoOfHomeo {X Y : CompHausLike.{u} P} (f : X ‚âÉ‚Çú Y) : X ‚âÖ Y :=\n  (fullyFaithfulCompHausLikeToTop P).preimageIso (TopCat.isoOfHomeo f)\n\n"}
{"name":"CompHausLike.homeoOfIso_symm_apply","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : CategoryTheory.Iso X Y\na : ‚ÜëY.toTop\n‚ä¢ Eq ((CompHausLike.homeoOfIso f).symm a) (f.inv a)","decl":"/-- Construct a homeomorphism from an isomorphism. -/\n@[simps!]\ndef homeoOfIso {X Y : CompHausLike.{u} P} (f : X ‚âÖ Y) : X ‚âÉ‚Çú Y :=\n  TopCat.homeoOfIso <| (compHausLikeToTop P).mapIso f\n\n"}
{"name":"CompHausLike.homeoOfIso_apply","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : CategoryTheory.Iso X Y\na : ‚ÜëX.toTop\n‚ä¢ Eq ((CompHausLike.homeoOfIso f) a) (f.hom a)","decl":"/-- Construct a homeomorphism from an isomorphism. -/\n@[simps!]\ndef homeoOfIso {X Y : CompHausLike.{u} P} (f : X ‚âÖ Y) : X ‚âÉ‚Çú Y :=\n  TopCat.homeoOfIso <| (compHausLikeToTop P).mapIso f\n\n"}
{"name":"CompHausLike.isoEquivHomeo_symm_apply","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : Homeomorph ‚ÜëX.toTop ‚ÜëY.toTop\n‚ä¢ Eq (CompHausLike.isoEquivHomeo.symm f) (CompHausLike.isoOfHomeo f)","decl":"/-- The equivalence between isomorphisms in `CompHaus` and homeomorphisms\nof topological spaces. -/\n@[simps]\ndef isoEquivHomeo {X Y : CompHausLike.{u} P} : (X ‚âÖ Y) ‚âÉ (X ‚âÉ‚Çú Y) where\n  toFun := homeoOfIso\n  invFun := isoOfHomeo\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"CompHausLike.isoEquivHomeo_apply","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nX Y : CompHausLike P\nf : CategoryTheory.Iso X Y\n‚ä¢ Eq (CompHausLike.isoEquivHomeo f) (CompHausLike.homeoOfIso f)","decl":"/-- The equivalence between isomorphisms in `CompHaus` and homeomorphisms\nof topological spaces. -/\n@[simps]\ndef isoEquivHomeo {X Y : CompHausLike.{u} P} : (X ‚âÖ Y) ‚âÉ (X ‚âÉ‚Çú Y) where\n  toFun := homeoOfIso\n  invFun := isoOfHomeo\n  left_inv _ := rfl\n  right_inv _ := rfl\n\n"}
{"name":"CompHausLike.const_comp","module":"Mathlib.Topology.Category.CompHausLike.Basic","initialProofState":"P : TopCat ‚Üí Prop\nS T U : CompHausLike P\ns : ‚ÜëS.toTop\ng : Quiver.Hom S U\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (T.const s) g) (T.const (g s))","decl":"lemma const_comp {P : TopCat.{u} ‚Üí Prop} {S T U : CompHausLike.{u} P}\n    (s : S) (g : S ‚ü∂ U) : T.const s ‚â´ g = T.const (g s) :=\n  rfl\n\n"}
