{"name":"Sequential.mk.inj","module":"Mathlib.Topology.Category.Sequential","initialProofState":"toTop✝ : TopCat\nis_sequential✝ : SequentialSpace ↑toTop✝\ntoTop : TopCat\nis_sequential : SequentialSpace ↑toTop\nx✝ : Eq (Sequential.mk toTop✝) (Sequential.mk toTop)\n⊢ Eq toTop✝ toTop","decl":"/-- The type sequential topological spaces. -/\nstructure Sequential where\n  /-- The underlying topological space of an object of `Sequential`. -/\n  toTop : TopCat.{u}\n  /-- The underlying topological space is sequential. -/\n  [is_sequential : SequentialSpace toTop]\n\n"}
{"name":"Sequential.mk.injEq","module":"Mathlib.Topology.Category.Sequential","initialProofState":"toTop✝ : TopCat\nis_sequential✝ : SequentialSpace ↑toTop✝\ntoTop : TopCat\nis_sequential : SequentialSpace ↑toTop\n⊢ Eq (Eq (Sequential.mk toTop✝) (Sequential.mk toTop)) (Eq toTop✝ toTop)","decl":"/-- The type sequential topological spaces. -/\nstructure Sequential where\n  /-- The underlying topological space of an object of `Sequential`. -/\n  toTop : TopCat.{u}\n  /-- The underlying topological space is sequential. -/\n  [is_sequential : SequentialSpace toTop]\n\n"}
{"name":"Sequential.mk.sizeOf_spec","module":"Mathlib.Topology.Category.Sequential","initialProofState":"toTop : TopCat\nis_sequential : SequentialSpace ↑toTop\n⊢ Eq (SizeOf.sizeOf (Sequential.mk toTop)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toTop)) (SizeOf.sizeOf is_sequential))","decl":"/-- The type sequential topological spaces. -/\nstructure Sequential where\n  /-- The underlying topological space of an object of `Sequential`. -/\n  toTop : TopCat.{u}\n  /-- The underlying topological space is sequential. -/\n  [is_sequential : SequentialSpace toTop]\n\n"}
{"name":"Sequential.is_sequential","module":"Mathlib.Topology.Category.Sequential","initialProofState":"self : Sequential\n⊢ SequentialSpace ↑self.toTop","decl":"/-- The type sequential topological spaces. -/\nstructure Sequential where\n  /-- The underlying topological space of an object of `Sequential`. -/\n  toTop : TopCat.{u}\n  /-- The underlying topological space is sequential. -/\n  [is_sequential : SequentialSpace toTop]\n\n"}
{"name":"Sequential.sequentialToTop_obj","module":"Mathlib.Topology.Category.Sequential","initialProofState":"self : Sequential\n⊢ Eq (Sequential.sequentialToTop.obj self) self.toTop","decl":"/-- The fully faithful embedding of `Sequential` in `TopCat`. -/\n@[simps!]\ndef sequentialToTop : Sequential.{u} ⥤ TopCat.{u} :=\n  inducedFunctor _\n\n"}
{"name":"Sequential.sequentialToTop_map","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X✝ Y✝ : CategoryTheory.InducedCategory TopCat Sequential.toTop\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (Sequential.sequentialToTop.map f) f","decl":"/-- The fully faithful embedding of `Sequential` in `TopCat`. -/\n@[simps!]\ndef sequentialToTop : Sequential.{u} ⥤ TopCat.{u} :=\n  inducedFunctor _\n\n"}
{"name":"Sequential.instFullTopCatSequentialToTop","module":"Mathlib.Topology.Category.Sequential","initialProofState":"⊢ Sequential.sequentialToTop.Full","decl":"instance : sequentialToTop.{u}.Full  :=\n  inferInstanceAs (inducedFunctor _).Full\n\n"}
{"name":"Sequential.instFaithfulTopCatSequentialToTop","module":"Mathlib.Topology.Category.Sequential","initialProofState":"⊢ Sequential.sequentialToTop.Faithful","decl":"instance : sequentialToTop.{u}.Faithful :=\n  inferInstanceAs (inducedFunctor _).Faithful\n\n"}
{"name":"Sequential.isoOfHomeo_inv","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X Y : Sequential\nf : Homeomorph ↑X.toTop ↑Y.toTop\n⊢ Eq (Sequential.isoOfHomeo f).inv { toFun := ⇑f.symm, continuous_toFun := ⋯ }","decl":"/-- Construct an isomorphism from a homeomorphism. -/\n@[simps hom inv]\ndef isoOfHomeo {X Y : Sequential.{u}} (f : X ≃ₜ Y) : X ≅ Y where\n  hom := ⟨f, f.continuous⟩\n  inv := ⟨f.symm, f.symm.continuous⟩\n  hom_inv_id := by\n    ext x\n    exact f.symm_apply_apply x\n  inv_hom_id := by\n    ext x\n    exact f.apply_symm_apply x\n\n"}
{"name":"Sequential.isoOfHomeo_hom","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X Y : Sequential\nf : Homeomorph ↑X.toTop ↑Y.toTop\n⊢ Eq (Sequential.isoOfHomeo f).hom { toFun := ⇑f, continuous_toFun := ⋯ }","decl":"/-- Construct an isomorphism from a homeomorphism. -/\n@[simps hom inv]\ndef isoOfHomeo {X Y : Sequential.{u}} (f : X ≃ₜ Y) : X ≅ Y where\n  hom := ⟨f, f.continuous⟩\n  inv := ⟨f.symm, f.symm.continuous⟩\n  hom_inv_id := by\n    ext x\n    exact f.symm_apply_apply x\n  inv_hom_id := by\n    ext x\n    exact f.apply_symm_apply x\n\n"}
{"name":"Sequential.homeoOfIso_symm_apply","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X Y : Sequential\nf : CategoryTheory.Iso X Y\na : (CategoryTheory.forget Sequential).obj Y\n⊢ Eq ((Sequential.homeoOfIso f).symm a) (f.inv a)","decl":"/-- Construct a homeomorphism from an isomorphism. -/\n@[simps]\ndef homeoOfIso {X Y : Sequential.{u}} (f : X ≅ Y) : X ≃ₜ Y where\n  toFun := f.hom\n  invFun := f.inv\n  left_inv x := by simp\n  right_inv x := by simp\n  continuous_toFun := f.hom.continuous\n  continuous_invFun := f.inv.continuous\n\n"}
{"name":"Sequential.homeoOfIso_apply","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X Y : Sequential\nf : CategoryTheory.Iso X Y\na : (CategoryTheory.forget Sequential).obj X\n⊢ Eq ((Sequential.homeoOfIso f) a) (f.hom a)","decl":"/-- Construct a homeomorphism from an isomorphism. -/\n@[simps]\ndef homeoOfIso {X Y : Sequential.{u}} (f : X ≅ Y) : X ≃ₜ Y where\n  toFun := f.hom\n  invFun := f.inv\n  left_inv x := by simp\n  right_inv x := by simp\n  continuous_toFun := f.hom.continuous\n  continuous_invFun := f.inv.continuous\n\n"}
{"name":"Sequential.isoEquivHomeo_apply","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X Y : Sequential\nf : CategoryTheory.Iso X Y\n⊢ Eq (Sequential.isoEquivHomeo f) (Sequential.homeoOfIso f)","decl":"/-- The equivalence between isomorphisms in `Sequential` and homeomorphisms\nof topological spaces. -/\n@[simps]\ndef isoEquivHomeo {X Y : Sequential.{u}} : (X ≅ Y) ≃ (X ≃ₜ Y) where\n  toFun := homeoOfIso\n  invFun := isoOfHomeo\n  left_inv f := by\n    ext\n    rfl\n  right_inv f := by\n    ext\n    rfl\n\n"}
{"name":"Sequential.isoEquivHomeo_symm_apply","module":"Mathlib.Topology.Category.Sequential","initialProofState":"X Y : Sequential\nf : Homeomorph ↑X.toTop ↑Y.toTop\n⊢ Eq (Sequential.isoEquivHomeo.symm f) (Sequential.isoOfHomeo f)","decl":"/-- The equivalence between isomorphisms in `Sequential` and homeomorphisms\nof topological spaces. -/\n@[simps]\ndef isoEquivHomeo {X Y : Sequential.{u}} : (X ≅ Y) ≃ (X ≃ₜ Y) where\n  toFun := homeoOfIso\n  invFun := isoOfHomeo\n  left_inv f := by\n    ext\n    rfl\n  right_inv f := by\n    ext\n    rfl\n\n"}
