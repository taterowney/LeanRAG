{"name":"Polynomial.supDegree_eq_degree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq (AddMonoidAlgebra.supDegree WithBot.some p.toFinsupp) p.degree","decl":"theorem supDegree_eq_degree (p : R[X]) : p.toFinsupp.supDegree WithBot.some = p.degree :=\n  max_eq_sup_coe\n\n"}
{"name":"Polynomial.degree_lt_wf","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\n⊢ WellFounded fun p q => LT.lt p.degree q.degree","decl":"theorem degree_lt_wf : WellFounded fun p q : R[X] => degree p < degree q :=\n  InvImage.wf degree wellFounded_lt\n\n"}
{"name":"Polynomial.monic_of_subsingleton","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Subsingleton R\np : Polynomial R\n⊢ p.Monic","decl":"@[nontriviality]\ntheorem monic_of_subsingleton [Subsingleton R] (p : R[X]) : Monic p :=\n  Subsingleton.elim _ _\n\n"}
{"name":"Polynomial.degree_of_subsingleton","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\np : Polynomial R\ninst✝ : Subsingleton R\n⊢ Eq p.degree Bot.bot","decl":"@[nontriviality]\ntheorem degree_of_subsingleton [Subsingleton R] : degree p = ⊥ := by\n  rw [Subsingleton.elim p 0, degree_zero]\n\n"}
{"name":"Polynomial.natDegree_of_subsingleton","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\np : Polynomial R\ninst✝ : Subsingleton R\n⊢ Eq p.natDegree 0","decl":"@[nontriviality]\ntheorem natDegree_of_subsingleton [Subsingleton R] : natDegree p = 0 := by\n  rw [Subsingleton.elim p 0, natDegree_zero]\n\n"}
{"name":"Polynomial.le_natDegree_of_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\nh : Ne (p.coeff n) 0\n⊢ LE.le n p.natDegree","decl":"theorem le_natDegree_of_ne_zero (h : coeff p n ≠ 0) : n ≤ natDegree p := by\n  rw [← Nat.cast_le (α := WithBot ℕ), ← degree_eq_natDegree]\n  · exact le_degree_of_ne_zero h\n  · rintro rfl\n    exact h rfl\n\n"}
{"name":"Polynomial.degree_eq_of_le_of_coeff_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\npn : LE.le p.degree ↑n\np1 : Ne (p.coeff n) 0\n⊢ Eq p.degree ↑n","decl":"theorem degree_eq_of_le_of_coeff_ne_zero (pn : p.degree ≤ n) (p1 : p.coeff n ≠ 0) : p.degree = n :=\n  pn.antisymm (le_degree_of_ne_zero p1)\n\n"}
{"name":"Polynomial.natDegree_eq_of_le_of_coeff_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\npn : LE.le p.natDegree n\np1 : Ne (p.coeff n) 0\n⊢ Eq p.natDegree n","decl":"theorem natDegree_eq_of_le_of_coeff_ne_zero (pn : p.natDegree ≤ n) (p1 : p.coeff n ≠ 0) :\n    p.natDegree = n :=\n  pn.antisymm (le_natDegree_of_ne_zero p1)\n\n"}
{"name":"Polynomial.natDegree_lt_natDegree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : Semiring S\np : Polynomial R\nq : Polynomial S\nhp : Ne p 0\nhpq : LT.lt p.degree q.degree\n⊢ LT.lt p.natDegree q.natDegree","decl":"theorem natDegree_lt_natDegree {q : S[X]} (hp : p ≠ 0) (hpq : p.degree < q.degree) :\n    p.natDegree < q.natDegree := by\n  by_cases hq : q = 0\n  · exact (not_lt_bot <| hq ▸ hpq).elim\n  rwa [degree_eq_natDegree hp, degree_eq_natDegree hq, Nat.cast_lt] at hpq\n\n"}
{"name":"Polynomial.natDegree_eq_natDegree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : Semiring S\np : Polynomial R\nq : Polynomial S\nhpq : Eq p.degree q.degree\n⊢ Eq p.natDegree q.natDegree","decl":"lemma natDegree_eq_natDegree {q : S[X]} (hpq : p.degree = q.degree) :\n    p.natDegree = q.natDegree := by simp [natDegree, hpq]\n\n"}
{"name":"Polynomial.coeff_eq_zero_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\nh : LT.lt p.degree ↑n\n⊢ Eq (p.coeff n) 0","decl":"theorem coeff_eq_zero_of_degree_lt (h : degree p < n) : coeff p n = 0 :=\n  Classical.not_not.1 (mt le_degree_of_ne_zero (not_le_of_gt h))\n\n"}
{"name":"Polynomial.coeff_eq_zero_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\nh : LT.lt p.natDegree n\n⊢ Eq (p.coeff n) 0","decl":"theorem coeff_eq_zero_of_natDegree_lt {p : R[X]} {n : ℕ} (h : p.natDegree < n) :\n    p.coeff n = 0 := by\n  apply coeff_eq_zero_of_degree_lt\n  by_cases hp : p = 0\n  · subst hp\n    exact WithBot.bot_lt_coe n\n  · rwa [degree_eq_natDegree hp, Nat.cast_lt]\n\n"}
{"name":"Polynomial.ext_iff_natDegree_le","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nn : Nat\nhp : LE.le p.natDegree n\nhq : LE.le q.natDegree n\n⊢ Iff (Eq p q) (∀ (i : Nat), LE.le i n → Eq (p.coeff i) (q.coeff i))","decl":"theorem ext_iff_natDegree_le {p q : R[X]} {n : ℕ} (hp : p.natDegree ≤ n) (hq : q.natDegree ≤ n) :\n    p = q ↔ ∀ i ≤ n, p.coeff i = q.coeff i := by\n  refine Iff.trans Polynomial.ext_iff ?_\n  refine forall_congr' fun i => ⟨fun h _ => h, fun h => ?_⟩\n  refine (le_or_lt i n).elim h fun k => ?_\n  exact\n    (coeff_eq_zero_of_natDegree_lt (hp.trans_lt k)).trans\n      (coeff_eq_zero_of_natDegree_lt (hq.trans_lt k)).symm\n\n"}
{"name":"Polynomial.ext_iff_degree_le","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nn : Nat\nhp : LE.le p.degree ↑n\nhq : LE.le q.degree ↑n\n⊢ Iff (Eq p q) (∀ (i : Nat), LE.le i n → Eq (p.coeff i) (q.coeff i))","decl":"theorem ext_iff_degree_le {p q : R[X]} {n : ℕ} (hp : p.degree ≤ n) (hq : q.degree ≤ n) :\n    p = q ↔ ∀ i ≤ n, p.coeff i = q.coeff i :=\n  ext_iff_natDegree_le (natDegree_le_of_degree_le hp) (natDegree_le_of_degree_le hq)\n\n"}
{"name":"Polynomial.coeff_natDegree_succ_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq (p.coeff (HAdd.hAdd p.natDegree 1)) 0","decl":"@[simp]\ntheorem coeff_natDegree_succ_eq_zero {p : R[X]} : p.coeff (p.natDegree + 1) = 0 :=\n  coeff_eq_zero_of_natDegree_lt (lt_add_one _)\n\n-- We need the explicit `Decidable` argument here because an exotic one shows up in a moment!\n"}
{"name":"Polynomial.ite_le_natDegree_coeff","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\nI : Decidable (LT.lt n (HAdd.hAdd 1 p.natDegree))\n⊢ Eq (ite (LT.lt n (HAdd.hAdd 1 p.natDegree)) (p.coeff n) 0) (p.coeff n)","decl":"theorem ite_le_natDegree_coeff (p : R[X]) (n : ℕ) (I : Decidable (n < 1 + natDegree p)) :\n    @ite _ (n < 1 + natDegree p) I (coeff p n) 0 = coeff p n := by\n  split_ifs with h\n  · rfl\n  · exact (coeff_eq_zero_of_natDegree_lt (not_le.1 fun w => h (Nat.lt_one_add_iff.2 w))).symm\n\n"}
{"name":"Polynomial.coeff_mul_X_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np : Polynomial R\nr : R\na : Nat\n⊢ Eq ((HMul.hMul p (HSub.hSub Polynomial.X (Polynomial.C r))).coeff (HAdd.hAdd a 1)) (HSub.hSub (p.coeff a) (HMul.hMul (p.coeff (HAdd.hAdd a 1)) r))","decl":"theorem coeff_mul_X_sub_C {p : R[X]} {r : R} {a : ℕ} :\n    coeff (p * (X - C r)) (a + 1) = coeff p a - coeff p (a + 1) * r := by simp [mul_sub]\n\n"}
{"name":"Polynomial.coeff_natDegree_eq_zero_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt p.degree q.degree\n⊢ Eq (p.coeff q.natDegree) 0","decl":"theorem coeff_natDegree_eq_zero_of_degree_lt (h : degree p < degree q) :\n    coeff p (natDegree q) = 0 :=\n  coeff_eq_zero_of_degree_lt (lt_of_lt_of_le h degree_le_natDegree)\n\n"}
{"name":"Polynomial.ne_zero_of_degree_gt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : WithBot Nat\nh : LT.lt n p.degree\n⊢ Ne p 0","decl":"theorem ne_zero_of_degree_gt {n : WithBot ℕ} (h : n < degree p) : p ≠ 0 :=\n  mt degree_eq_bot.2 h.ne_bot\n\n"}
{"name":"Polynomial.ne_zero_of_degree_ge_degree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nhpq : LE.le p.degree q.degree\nhp : Ne p 0\n⊢ Ne q 0","decl":"theorem ne_zero_of_degree_ge_degree (hpq : p.degree ≤ q.degree) (hp : p ≠ 0) : q ≠ 0 :=\n  Polynomial.ne_zero_of_degree_gt\n    (lt_of_lt_of_le (bot_lt_iff_ne_bot.mpr (by rwa [Ne, Polynomial.degree_eq_bot])) hpq :\n      q.degree > ⊥)\n\n"}
{"name":"Polynomial.ne_zero_of_natDegree_gt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\nh : LT.lt n p.natDegree\n⊢ Ne p 0","decl":"theorem ne_zero_of_natDegree_gt {n : ℕ} (h : n < natDegree p) : p ≠ 0 := fun H => by\n  simp [H, Nat.not_lt_zero] at h\n\n"}
{"name":"Polynomial.degree_lt_degree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt p.natDegree q.natDegree\n⊢ LT.lt p.degree q.degree","decl":"theorem degree_lt_degree (h : natDegree p < natDegree q) : degree p < degree q := by\n  by_cases hp : p = 0\n  · simp only [hp, degree_zero]\n    rw [bot_lt_iff_ne_bot]\n    intro hq\n    simp [hp, degree_eq_bot.mp hq, lt_irrefl] at h\n  · rwa [degree_eq_natDegree hp, degree_eq_natDegree <| ne_zero_of_natDegree_gt h, Nat.cast_lt]\n\n"}
{"name":"Polynomial.natDegree_lt_natDegree_iff","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nhp : Ne p 0\n⊢ Iff (LT.lt p.natDegree q.natDegree) (LT.lt p.degree q.degree)","decl":"theorem natDegree_lt_natDegree_iff (hp : p ≠ 0) : natDegree p < natDegree q ↔ degree p < degree q :=\n  ⟨degree_lt_degree, fun h ↦ by\n    have hq : q ≠ 0 := ne_zero_of_degree_gt h\n    rwa [degree_eq_natDegree hp, degree_eq_natDegree hq, Nat.cast_lt] at h⟩\n\n"}
{"name":"Polynomial.eq_C_of_degree_le_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.degree 0\n⊢ Eq p (Polynomial.C (p.coeff 0))","decl":"theorem eq_C_of_degree_le_zero (h : degree p ≤ 0) : p = C (coeff p 0) := by\n  ext (_ | n)\n  · simp\n  rw [coeff_C, if_neg (Nat.succ_ne_zero _), coeff_eq_zero_of_degree_lt]\n  exact h.trans_lt (WithBot.coe_lt_coe.2 n.succ_pos)\n\n"}
{"name":"Polynomial.eq_C_of_degree_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : Eq p.degree 0\n⊢ Eq p (Polynomial.C (p.coeff 0))","decl":"theorem eq_C_of_degree_eq_zero (h : degree p = 0) : p = C (coeff p 0) :=\n  eq_C_of_degree_le_zero h.le\n\n"}
{"name":"Polynomial.degree_le_zero_iff","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Iff (LE.le p.degree 0) (Eq p (Polynomial.C (p.coeff 0)))","decl":"theorem degree_le_zero_iff : degree p ≤ 0 ↔ p = C (coeff p 0) :=\n  ⟨eq_C_of_degree_le_zero, fun h => h.symm ▸ degree_C_le⟩\n\n"}
{"name":"Polynomial.degree_add_eq_left_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt q.degree p.degree\n⊢ Eq (HAdd.hAdd p q).degree p.degree","decl":"theorem degree_add_eq_left_of_degree_lt (h : degree q < degree p) : degree (p + q) = degree p :=\n  le_antisymm (max_eq_left_of_lt h ▸ degree_add_le _ _) <|\n    degree_le_degree <| by\n      rw [coeff_add, coeff_natDegree_eq_zero_of_degree_lt h, add_zero]\n      exact mt leadingCoeff_eq_zero.1 (ne_zero_of_degree_gt h)\n\n"}
{"name":"Polynomial.degree_add_eq_right_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt p.degree q.degree\n⊢ Eq (HAdd.hAdd p q).degree q.degree","decl":"theorem degree_add_eq_right_of_degree_lt (h : degree p < degree q) : degree (p + q) = degree q := by\n  rw [add_comm, degree_add_eq_left_of_degree_lt h]\n\n"}
{"name":"Polynomial.natDegree_add_eq_left_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt q.degree p.degree\n⊢ Eq (HAdd.hAdd p q).natDegree p.natDegree","decl":"theorem natDegree_add_eq_left_of_degree_lt (h : degree q < degree p) :\n    natDegree (p + q) = natDegree p :=\n  natDegree_eq_of_degree_eq (degree_add_eq_left_of_degree_lt h)\n\n"}
{"name":"Polynomial.natDegree_add_eq_left_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt q.natDegree p.natDegree\n⊢ Eq (HAdd.hAdd p q).natDegree p.natDegree","decl":"theorem natDegree_add_eq_left_of_natDegree_lt (h : natDegree q < natDegree p) :\n    natDegree (p + q) = natDegree p :=\n  natDegree_add_eq_left_of_degree_lt (degree_lt_degree h)\n\n"}
{"name":"Polynomial.natDegree_add_eq_right_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt p.degree q.degree\n⊢ Eq (HAdd.hAdd p q).natDegree q.natDegree","decl":"theorem natDegree_add_eq_right_of_degree_lt (h : degree p < degree q) :\n    natDegree (p + q) = natDegree q :=\n  natDegree_eq_of_degree_eq (degree_add_eq_right_of_degree_lt h)\n\n"}
{"name":"Polynomial.natDegree_add_eq_right_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt p.natDegree q.natDegree\n⊢ Eq (HAdd.hAdd p q).natDegree q.natDegree","decl":"theorem natDegree_add_eq_right_of_natDegree_lt (h : natDegree p < natDegree q) :\n    natDegree (p + q) = natDegree q :=\n  natDegree_add_eq_right_of_degree_lt (degree_lt_degree h)\n\n"}
{"name":"Polynomial.degree_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\np : Polynomial R\nhp : LT.lt 0 p.degree\n⊢ Eq (HAdd.hAdd p (Polynomial.C a)).degree p.degree","decl":"theorem degree_add_C (hp : 0 < degree p) : degree (p + C a) = degree p :=\n  add_comm (C a) p ▸ degree_add_eq_right_of_degree_lt <| lt_of_le_of_lt degree_C_le hp\n\n"}
{"name":"Polynomial.natDegree_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na : R\n⊢ Eq (HAdd.hAdd p (Polynomial.C a)).natDegree p.natDegree","decl":"@[simp] theorem natDegree_add_C {a : R} : (p + C a).natDegree = p.natDegree := by\n  rcases eq_or_ne p 0 with rfl | hp\n  · simp\n  by_cases hpd : p.degree ≤ 0\n  · rw [eq_C_of_degree_le_zero hpd, ← C_add, natDegree_C, natDegree_C]\n  · rw [not_le, degree_eq_natDegree hp, Nat.cast_pos, ← natDegree_C a] at hpd\n    exact natDegree_add_eq_left_of_natDegree_lt hpd\n\n"}
{"name":"Polynomial.natDegree_C_add","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na : R\n⊢ Eq (HAdd.hAdd (Polynomial.C a) p).natDegree p.natDegree","decl":"@[simp] theorem natDegree_C_add {a : R} : (C a + p).natDegree = p.natDegree := by\n  simp [add_comm _ p]\n\n"}
{"name":"Polynomial.degree_add_eq_of_leadingCoeff_add_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : Ne (HAdd.hAdd p.leadingCoeff q.leadingCoeff) 0\n⊢ Eq (HAdd.hAdd p q).degree (Max.max p.degree q.degree)","decl":"theorem degree_add_eq_of_leadingCoeff_add_ne_zero (h : leadingCoeff p + leadingCoeff q ≠ 0) :\n    degree (p + q) = max p.degree q.degree :=\n  le_antisymm (degree_add_le _ _) <|\n    match lt_trichotomy (degree p) (degree q) with\n    | Or.inl hlt => by\n      rw [degree_add_eq_right_of_degree_lt hlt, max_eq_right_of_lt hlt]\n    | Or.inr (Or.inl HEq) =>\n      le_of_not_gt fun hlt : max (degree p) (degree q) > degree (p + q) =>\n        h <|\n          show leadingCoeff p + leadingCoeff q = 0 by\n            rw [HEq, max_self] at hlt\n            rw [leadingCoeff, leadingCoeff, natDegree_eq_of_degree_eq HEq, ← coeff_add]\n            exact coeff_natDegree_eq_zero_of_degree_lt hlt\n    | Or.inr (Or.inr hlt) => by\n      rw [degree_add_eq_left_of_degree_lt hlt, max_eq_left_of_lt hlt]\n\n"}
{"name":"Polynomial.natDegree_eq_of_natDegree_add_lt_left","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nH : LT.lt (HAdd.hAdd p q).natDegree p.natDegree\n⊢ Eq p.natDegree q.natDegree","decl":"lemma natDegree_eq_of_natDegree_add_lt_left (p q : R[X])\n    (H : natDegree (p + q) < natDegree p) : natDegree p = natDegree q := by\n  by_contra h\n  cases Nat.lt_or_lt_of_ne h with\n  | inl h => exact lt_asymm h (by rwa [natDegree_add_eq_right_of_natDegree_lt h] at H)\n  | inr h =>\n    rw [natDegree_add_eq_left_of_natDegree_lt h] at H\n    exact LT.lt.false H\n\n"}
{"name":"Polynomial.natDegree_eq_of_natDegree_add_lt_right","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nH : LT.lt (HAdd.hAdd p q).natDegree q.natDegree\n⊢ Eq p.natDegree q.natDegree","decl":"lemma natDegree_eq_of_natDegree_add_lt_right (p q : R[X])\n    (H : natDegree (p + q) < natDegree q) : natDegree p = natDegree q :=\n  (natDegree_eq_of_natDegree_add_lt_left q p (add_comm p q ▸ H)).symm\n\n"}
{"name":"Polynomial.natDegree_eq_of_natDegree_add_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nH : Eq (HAdd.hAdd p q).natDegree 0\n⊢ Eq p.natDegree q.natDegree","decl":"lemma natDegree_eq_of_natDegree_add_eq_zero (p q : R[X])\n    (H : natDegree (p + q) = 0) : natDegree p = natDegree q := by\n  by_cases h₁ : natDegree p = 0; on_goal 1 => by_cases h₂ : natDegree q = 0\n  · exact h₁.trans h₂.symm\n  · apply natDegree_eq_of_natDegree_add_lt_right; rwa [H, Nat.pos_iff_ne_zero]\n  · apply natDegree_eq_of_natDegree_add_lt_left; rwa [H, Nat.pos_iff_ne_zero]\n\n"}
{"name":"Polynomial.monic_of_natDegree_le_of_coeff_eq_one","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\npn : LE.le p.natDegree n\np1 : Eq (p.coeff n) 1\n⊢ p.Monic","decl":"theorem monic_of_natDegree_le_of_coeff_eq_one (n : ℕ) (pn : p.natDegree ≤ n) (p1 : p.coeff n = 1) :\n    Monic p := by\n  unfold Monic\n  nontriviality\n  refine (congr_arg _ <| natDegree_eq_of_le_of_coeff_ne_zero pn ?_).trans p1\n  exact ne_of_eq_of_ne p1 one_ne_zero\n\n"}
{"name":"Polynomial.monic_of_degree_le_of_coeff_eq_one","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\npn : LE.le p.degree ↑n\np1 : Eq (p.coeff n) 1\n⊢ p.Monic","decl":"theorem monic_of_degree_le_of_coeff_eq_one (n : ℕ) (pn : p.degree ≤ n) (p1 : p.coeff n = 1) :\n    Monic p :=\n  monic_of_natDegree_le_of_coeff_eq_one n (natDegree_le_of_degree_le pn) p1\n\n"}
{"name":"Polynomial.leadingCoeff_add_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt p.degree q.degree\n⊢ Eq (HAdd.hAdd p q).leadingCoeff q.leadingCoeff","decl":"theorem leadingCoeff_add_of_degree_lt (h : degree p < degree q) :\n    leadingCoeff (p + q) = leadingCoeff q := by\n  have : coeff p (natDegree q) = 0 := coeff_natDegree_eq_zero_of_degree_lt h\n  simp only [leadingCoeff, natDegree_eq_of_degree_eq (degree_add_eq_right_of_degree_lt h), this,\n    coeff_add, zero_add]\n\n"}
{"name":"Polynomial.leadingCoeff_add_of_degree_lt'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : LT.lt q.degree p.degree\n⊢ Eq (HAdd.hAdd p q).leadingCoeff p.leadingCoeff","decl":"theorem leadingCoeff_add_of_degree_lt' (h : degree q < degree p) :\n    leadingCoeff (p + q) = leadingCoeff p := by\n  rw [add_comm]\n  exact leadingCoeff_add_of_degree_lt h\n\n"}
{"name":"Polynomial.leadingCoeff_add_of_degree_eq","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : Eq p.degree q.degree\nhlc : Ne (HAdd.hAdd p.leadingCoeff q.leadingCoeff) 0\n⊢ Eq (HAdd.hAdd p q).leadingCoeff (HAdd.hAdd p.leadingCoeff q.leadingCoeff)","decl":"theorem leadingCoeff_add_of_degree_eq (h : degree p = degree q)\n    (hlc : leadingCoeff p + leadingCoeff q ≠ 0) :\n    leadingCoeff (p + q) = leadingCoeff p + leadingCoeff q := by\n  have : natDegree (p + q) = natDegree p := by\n    apply natDegree_eq_of_degree_eq\n    rw [degree_add_eq_of_leadingCoeff_add_ne_zero hlc, h, max_self]\n  simp only [leadingCoeff, this, natDegree_eq_of_degree_eq h, coeff_add]\n\n"}
{"name":"Polynomial.coeff_mul_degree_add_degree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\n⊢ Eq ((HMul.hMul p q).coeff (HAdd.hAdd p.natDegree q.natDegree)) (HMul.hMul p.leadingCoeff q.leadingCoeff)","decl":"@[simp]\ntheorem coeff_mul_degree_add_degree (p q : R[X]) :\n    coeff (p * q) (natDegree p + natDegree q) = leadingCoeff p * leadingCoeff q :=\n  calc\n    coeff (p * q) (natDegree p + natDegree q) =\n        ∑ x ∈ antidiagonal (natDegree p + natDegree q), coeff p x.1 * coeff q x.2 :=\n      coeff_mul _ _ _\n    _ = coeff p (natDegree p) * coeff q (natDegree q) := by\n      refine Finset.sum_eq_single (natDegree p, natDegree q) ?_ ?_\n      · rintro ⟨i, j⟩ h₁ h₂\n        rw [mem_antidiagonal] at h₁\n        by_cases H : natDegree p < i\n        · rw [coeff_eq_zero_of_degree_lt\n              (lt_of_le_of_lt degree_le_natDegree (WithBot.coe_lt_coe.2 H)),\n            zero_mul]\n        · rw [not_lt_iff_eq_or_lt] at H\n          cases' H with H H\n          · subst H\n            rw [add_left_cancel_iff] at h₁\n            dsimp at h₁\n            subst h₁\n            exact (h₂ rfl).elim\n          · suffices natDegree q < j by\n              rw [coeff_eq_zero_of_degree_lt\n                  (lt_of_le_of_lt degree_le_natDegree (WithBot.coe_lt_coe.2 this)),\n                mul_zero]\n            by_contra! H'\n            exact\n              ne_of_lt (Nat.lt_of_lt_of_le (Nat.add_lt_add_right H j) (Nat.add_le_add_left H' _))\n                h₁\n      · intro H\n        exfalso\n        apply H\n        rw [mem_antidiagonal]\n\n"}
{"name":"Polynomial.degree_mul'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : Ne (HMul.hMul p.leadingCoeff q.leadingCoeff) 0\n⊢ Eq (HMul.hMul p q).degree (HAdd.hAdd p.degree q.degree)","decl":"theorem degree_mul' (h : leadingCoeff p * leadingCoeff q ≠ 0) :\n    degree (p * q) = degree p + degree q :=\n  have hp : p ≠ 0 := by refine mt ?_ h; exact fun hp => by rw [hp, leadingCoeff_zero, zero_mul]\n  have hq : q ≠ 0 := by refine mt ?_ h; exact fun hq => by rw [hq, leadingCoeff_zero, mul_zero]\n  le_antisymm (degree_mul_le _ _)\n    (by\n      rw [degree_eq_natDegree hp, degree_eq_natDegree hq]\n      refine le_degree_of_ne_zero (n := natDegree p + natDegree q) ?_\n      rwa [coeff_mul_degree_add_degree])\n\n"}
{"name":"Polynomial.Monic.degree_mul","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nhq : q.Monic\n⊢ Eq (HMul.hMul p q).degree (HAdd.hAdd p.degree q.degree)","decl":"theorem Monic.degree_mul (hq : Monic q) : degree (p * q) = degree p + degree q :=\n  letI := Classical.decEq R\n  if hp : p = 0 then by simp [hp]\n  else degree_mul' <| by rwa [hq.leadingCoeff, mul_one, Ne, leadingCoeff_eq_zero]\n\n"}
{"name":"Polynomial.natDegree_mul'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : Ne (HMul.hMul p.leadingCoeff q.leadingCoeff) 0\n⊢ Eq (HMul.hMul p q).natDegree (HAdd.hAdd p.natDegree q.natDegree)","decl":"theorem natDegree_mul' (h : leadingCoeff p * leadingCoeff q ≠ 0) :\n    natDegree (p * q) = natDegree p + natDegree q :=\n  have hp : p ≠ 0 := mt leadingCoeff_eq_zero.2 fun h₁ => h <| by rw [h₁, zero_mul]\n  have hq : q ≠ 0 := mt leadingCoeff_eq_zero.2 fun h₁ => h <| by rw [h₁, mul_zero]\n  natDegree_eq_of_degree_eq_some <| by\n    rw [degree_mul' h, Nat.cast_add, degree_eq_natDegree hp, degree_eq_natDegree hq]\n\n"}
{"name":"Polynomial.leadingCoeff_mul'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nh : Ne (HMul.hMul p.leadingCoeff q.leadingCoeff) 0\n⊢ Eq (HMul.hMul p q).leadingCoeff (HMul.hMul p.leadingCoeff q.leadingCoeff)","decl":"theorem leadingCoeff_mul' (h : leadingCoeff p * leadingCoeff q ≠ 0) :\n    leadingCoeff (p * q) = leadingCoeff p * leadingCoeff q := by\n  unfold leadingCoeff\n  rw [natDegree_mul' h, coeff_mul_degree_add_degree]\n  rfl\n\n"}
{"name":"Polynomial.leadingCoeff_pow'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\nn : Nat\ninst✝ : Semiring R\np : Polynomial R\na✝ : Ne (HPow.hPow p.leadingCoeff n) 0\n⊢ Eq (HPow.hPow p n).leadingCoeff (HPow.hPow p.leadingCoeff n)","decl":"theorem leadingCoeff_pow' : leadingCoeff p ^ n ≠ 0 → leadingCoeff (p ^ n) = leadingCoeff p ^ n :=\n  Nat.recOn n (by simp) fun n ih h => by\n    have h₁ : leadingCoeff p ^ n ≠ 0 := fun h₁ => h <| by rw [pow_succ, h₁, zero_mul]\n    have h₂ : leadingCoeff p * leadingCoeff (p ^ n) ≠ 0 := by rwa [pow_succ', ← ih h₁] at h\n    rw [pow_succ', pow_succ', leadingCoeff_mul' h₂, ih h₁]\n\n"}
{"name":"Polynomial.degree_pow'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\na✝ : Ne (HPow.hPow p.leadingCoeff n) 0\n⊢ Eq (HPow.hPow p n).degree (HSMul.hSMul n p.degree)","decl":"theorem degree_pow' : ∀ {n : ℕ}, leadingCoeff p ^ n ≠ 0 → degree (p ^ n) = n • degree p\n  | 0 => fun h => by rw [pow_zero, ← C_1] at *; rw [degree_C h, zero_nsmul]\n  | n + 1 => fun h => by\n    have h₁ : leadingCoeff p ^ n ≠ 0 := fun h₁ => h <| by rw [pow_succ, h₁, zero_mul]\n    have h₂ : leadingCoeff (p ^ n) * leadingCoeff p ≠ 0 := by\n      rwa [pow_succ, ← leadingCoeff_pow' h₁] at h\n    rw [pow_succ, degree_mul' h₂, succ_nsmul, degree_pow' h₁]\n\n"}
{"name":"Polynomial.natDegree_pow'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\nh : Ne (HPow.hPow p.leadingCoeff n) 0\n⊢ Eq (HPow.hPow p n).natDegree (HMul.hMul n p.natDegree)","decl":"theorem natDegree_pow' {n : ℕ} (h : leadingCoeff p ^ n ≠ 0) : natDegree (p ^ n) = n * natDegree p :=\n  letI := Classical.decEq R\n  if hp0 : p = 0 then\n    if hn0 : n = 0 then by simp [*] else by rw [hp0, zero_pow hn0]; simp\n  else\n    have hpn : p ^ n ≠ 0 := fun hpn0 => by\n      have h1 := h\n      rw [← leadingCoeff_pow' h1, hpn0, leadingCoeff_zero] at h; exact h rfl\n    Option.some_inj.1 <|\n      show (natDegree (p ^ n) : WithBot ℕ) = (n * natDegree p : ℕ) by\n        rw [← degree_eq_natDegree hpn, degree_pow' h, degree_eq_natDegree hp0]; simp\n\n"}
{"name":"Polynomial.leadingCoeff_monic_mul","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nhp : p.Monic\n⊢ Eq (HMul.hMul p q).leadingCoeff q.leadingCoeff","decl":"theorem leadingCoeff_monic_mul {p q : R[X]} (hp : Monic p) :\n    leadingCoeff (p * q) = leadingCoeff q := by\n  rcases eq_or_ne q 0 with (rfl | H)\n  · simp\n  · rw [leadingCoeff_mul', hp.leadingCoeff, one_mul]\n    rwa [hp.leadingCoeff, one_mul, Ne, leadingCoeff_eq_zero]\n\n"}
{"name":"Polynomial.leadingCoeff_mul_monic","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np q : Polynomial R\nhq : q.Monic\n⊢ Eq (HMul.hMul p q).leadingCoeff p.leadingCoeff","decl":"theorem leadingCoeff_mul_monic {p q : R[X]} (hq : Monic q) :\n    leadingCoeff (p * q) = leadingCoeff p :=\n  letI := Classical.decEq R\n  Decidable.byCases\n    (fun H : leadingCoeff p = 0 => by\n      rw [H, leadingCoeff_eq_zero.1 H, zero_mul, leadingCoeff_zero])\n    fun H : leadingCoeff p ≠ 0 => by\n      rw [leadingCoeff_mul', hq.leadingCoeff, mul_one]\n      rwa [hq.leadingCoeff, mul_one]\n\n"}
{"name":"Polynomial.degree_C_mul_of_isUnit","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\nha : IsUnit a\np : Polynomial R\n⊢ Eq (HMul.hMul (Polynomial.C a) p).degree p.degree","decl":"lemma degree_C_mul_of_isUnit (ha : IsUnit a) (p : R[X]) : (C a * p).degree = p.degree := by\n  obtain rfl | hp := eq_or_ne p 0\n  · simp\n  nontriviality R\n  rw [degree_mul', degree_C ha.ne_zero]\n  · simp\n  · simpa [ha.mul_right_eq_zero]\n\n"}
{"name":"Polynomial.degree_mul_C_of_isUnit","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\nha : IsUnit a\np : Polynomial R\n⊢ Eq (HMul.hMul p (Polynomial.C a)).degree p.degree","decl":"lemma degree_mul_C_of_isUnit (ha : IsUnit a) (p : R[X]) : (p * C a).degree = p.degree := by\n  obtain rfl | hp := eq_or_ne p 0\n  · simp\n  nontriviality R\n  rw [degree_mul', degree_C ha.ne_zero]\n  · simp\n  · simpa [ha.mul_left_eq_zero]\n\n"}
{"name":"Polynomial.natDegree_C_mul_of_isUnit","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\nha : IsUnit a\np : Polynomial R\n⊢ Eq (HMul.hMul (Polynomial.C a) p).natDegree p.natDegree","decl":"lemma natDegree_C_mul_of_isUnit (ha : IsUnit a) (p : R[X]) : (C a * p).natDegree = p.natDegree := by\n  simp [natDegree, degree_C_mul_of_isUnit ha]\n\n"}
{"name":"Polynomial.natDegree_mul_C_of_isUnit","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\nha : IsUnit a\np : Polynomial R\n⊢ Eq (HMul.hMul p (Polynomial.C a)).natDegree p.natDegree","decl":"lemma natDegree_mul_C_of_isUnit (ha : IsUnit a) (p : R[X]) : (p * C a).natDegree = p.natDegree := by\n  simp [natDegree, degree_mul_C_of_isUnit ha]\n\n"}
{"name":"Polynomial.leadingCoeff_C_mul_of_isUnit","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\nha : IsUnit a\np : Polynomial R\n⊢ Eq (HMul.hMul (Polynomial.C a) p).leadingCoeff (HMul.hMul a p.leadingCoeff)","decl":"lemma leadingCoeff_C_mul_of_isUnit (ha : IsUnit a) (p : R[X]) :\n    (C a * p).leadingCoeff = a * p.leadingCoeff := by\n  rwa [leadingCoeff, coeff_C_mul, natDegree_C_mul_of_isUnit, leadingCoeff]\n\n"}
{"name":"Polynomial.leadingCoeff_mul_C_of_isUnit","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Semiring R\nha : IsUnit a\np : Polynomial R\n⊢ Eq (HMul.hMul p (Polynomial.C a)).leadingCoeff (HMul.hMul p.leadingCoeff a)","decl":"lemma leadingCoeff_mul_C_of_isUnit (ha : IsUnit a) (p : R[X]) :\n    (p * C a).leadingCoeff = p.leadingCoeff * a := by\n  rwa [leadingCoeff, coeff_mul_C, natDegree_mul_C_of_isUnit, leadingCoeff]\n\n"}
{"name":"Polynomial.leadingCoeff_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\n⊢ Eq (HMul.hMul p (HPow.hPow Polynomial.X n)).leadingCoeff p.leadingCoeff","decl":"@[simp]\ntheorem leadingCoeff_mul_X_pow {p : R[X]} {n : ℕ} : leadingCoeff (p * X ^ n) = leadingCoeff p :=\n  leadingCoeff_mul_monic (monic_X_pow n)\n\n"}
{"name":"Polynomial.leadingCoeff_mul_X","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq (HMul.hMul p Polynomial.X).leadingCoeff p.leadingCoeff","decl":"@[simp]\ntheorem leadingCoeff_mul_X {p : R[X]} : leadingCoeff (p * X) = leadingCoeff p :=\n  leadingCoeff_mul_monic monic_X\n\n"}
{"name":"Polynomial.coeff_pow_mul_natDegree","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\n⊢ Eq ((HPow.hPow p n).coeff (HMul.hMul n p.natDegree)) (HPow.hPow p.leadingCoeff n)","decl":"@[simp]\ntheorem coeff_pow_mul_natDegree (p : R[X]) (n : ℕ) :\n    (p ^ n).coeff (n * p.natDegree) = p.leadingCoeff ^ n := by\n  induction n with\n  | zero => simp\n  | succ i hi =>\n    rw [pow_succ, pow_succ, Nat.succ_mul]\n    by_cases hp1 : p.leadingCoeff ^ i = 0\n    · rw [hp1, zero_mul]\n      by_cases hp2 : p ^ i = 0\n      · rw [hp2, zero_mul, coeff_zero]\n      · apply coeff_eq_zero_of_natDegree_lt\n        have h1 : (p ^ i).natDegree < i * p.natDegree := by\n          refine lt_of_le_of_ne natDegree_pow_le fun h => hp2 ?_\n          rw [← h, hp1] at hi\n          exact leadingCoeff_eq_zero.mp hi\n        calc\n          (p ^ i * p).natDegree ≤ (p ^ i).natDegree + p.natDegree := natDegree_mul_le\n          _ < i * p.natDegree + p.natDegree := add_lt_add_right h1 _\n\n    · rw [← natDegree_pow' hp1, ← leadingCoeff_pow' hp1]\n      exact coeff_mul_degree_add_degree _ _\n\n"}
{"name":"Polynomial.coeff_mul_add_eq_of_natDegree_le","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\ndf dg : Nat\nf g : Polynomial R\nhdf : LE.le f.natDegree df\nhdg : LE.le g.natDegree dg\n⊢ Eq ((HMul.hMul f g).coeff (HAdd.hAdd df dg)) (HMul.hMul (f.coeff df) (g.coeff dg))","decl":"theorem coeff_mul_add_eq_of_natDegree_le {df dg : ℕ} {f g : R[X]}\n    (hdf : natDegree f ≤ df) (hdg : natDegree g ≤ dg) :\n    (f * g).coeff (df + dg) = f.coeff df * g.coeff dg := by\n  rw [coeff_mul, Finset.sum_eq_single_of_mem (df, dg)]\n  · rw [mem_antidiagonal]\n  rintro ⟨df', dg'⟩ hmem hne\n  obtain h | hdf' := lt_or_le df df'\n  · rw [coeff_eq_zero_of_natDegree_lt (hdf.trans_lt h), zero_mul]\n  obtain h | hdg' := lt_or_le dg dg'\n  · rw [coeff_eq_zero_of_natDegree_lt (hdg.trans_lt h), mul_zero]\n  obtain ⟨rfl, rfl⟩ :=\n    (add_eq_add_iff_eq_and_eq hdf' hdg').mp (mem_antidiagonal.1 hmem)\n  exact (hne rfl).elim\n\n"}
{"name":"Polynomial.degree_smul_le","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\na : R\np : Polynomial R\n⊢ LE.le (HSMul.hSMul a p).degree p.degree","decl":"theorem degree_smul_le (a : R) (p : R[X]) : degree (a • p) ≤ degree p := by\n  refine (degree_le_iff_coeff_zero _ _).2 fun m hm => ?_\n  rw [degree_lt_iff_coeff_zero] at hm\n  simp [hm m le_rfl]\n\n"}
{"name":"Polynomial.natDegree_smul_le","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\na : R\np : Polynomial R\n⊢ LE.le (HSMul.hSMul a p).natDegree p.natDegree","decl":"theorem natDegree_smul_le (a : R) (p : R[X]) : natDegree (a • p) ≤ natDegree p :=\n  natDegree_le_natDegree (degree_smul_le a p)\n\n"}
{"name":"Polynomial.degree_lt_degree_mul_X","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nhp : Ne p 0\n⊢ LT.lt p.degree (HMul.hMul p Polynomial.X).degree","decl":"theorem degree_lt_degree_mul_X (hp : p ≠ 0) : p.degree < (p * X).degree := by\n  haveI := Nontrivial.of_polynomial_ne hp\n  have : leadingCoeff p * leadingCoeff X ≠ 0 := by simpa\n  erw [degree_mul' this, degree_eq_natDegree hp, degree_X, ← WithBot.coe_one,\n    ← WithBot.coe_add, WithBot.coe_lt_coe]; exact Nat.lt_succ_self _\n\n"}
{"name":"Polynomial.eq_C_of_natDegree_le_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : LE.le p.natDegree 0\n⊢ Eq p (Polynomial.C (p.coeff 0))","decl":"theorem eq_C_of_natDegree_le_zero (h : natDegree p ≤ 0) : p = C (coeff p 0) :=\n  eq_C_of_degree_le_zero <| degree_le_of_natDegree_le h\n\n"}
{"name":"Polynomial.eq_C_of_natDegree_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : Eq p.natDegree 0\n⊢ Eq p (Polynomial.C (p.coeff 0))","decl":"theorem eq_C_of_natDegree_eq_zero (h : natDegree p = 0) : p = C (coeff p 0) :=\n  eq_C_of_natDegree_le_zero h.le\n\n"}
{"name":"Polynomial.natDegree_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Iff (Eq p.natDegree 0) (Exists fun x => Eq (Polynomial.C x) p)","decl":"lemma natDegree_eq_zero {p : R[X]} : p.natDegree = 0 ↔ ∃ x, C x = p :=\n  ⟨fun h ↦ ⟨_, (eq_C_of_natDegree_eq_zero h).symm⟩, by aesop⟩\n\n"}
{"name":"Polynomial.eq_C_coeff_zero_iff_natDegree_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Iff (Eq p (Polynomial.C (p.coeff 0))) (Eq p.natDegree 0)","decl":"theorem eq_C_coeff_zero_iff_natDegree_eq_zero : p = C (p.coeff 0) ↔ p.natDegree = 0 :=\n  ⟨fun h ↦ by rw [h, natDegree_C], eq_C_of_natDegree_eq_zero⟩\n\n"}
{"name":"Polynomial.eq_one_of_monic_natDegree_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nhf : p.Monic\nhfd : Eq p.natDegree 0\n⊢ Eq p 1","decl":"theorem eq_one_of_monic_natDegree_zero (hf : p.Monic) (hfd : p.natDegree = 0) : p = 1 := by\n  rw [Monic.def, leadingCoeff, hfd] at hf\n  rw [eq_C_of_natDegree_eq_zero hfd, hf, map_one]\n\n"}
{"name":"Polynomial.Monic.natDegree_eq_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nhf : p.Monic\n⊢ Iff (Eq p.natDegree 0) (Eq p 1)","decl":"theorem Monic.natDegree_eq_zero (hf : p.Monic) : p.natDegree = 0 ↔ p = 1 :=\n  ⟨eq_one_of_monic_natDegree_zero hf, by rintro rfl; simp⟩\n\n"}
{"name":"Polynomial.degree_sum_fin_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\nn : Nat\nf : Fin n → R\n⊢ LT.lt (Finset.univ.sum fun i => HMul.hMul (Polynomial.C (f i)) (HPow.hPow Polynomial.X ↑i)).degree ↑n","decl":"theorem degree_sum_fin_lt {n : ℕ} (f : Fin n → R) :\n    degree (∑ i : Fin n, C (f i) * X ^ (i : ℕ)) < n :=\n  (degree_sum_le _ _).trans_lt <|\n    (Finset.sup_lt_iff <| WithBot.bot_lt_coe n).2 fun k _hk =>\n      (degree_C_mul_X_pow_le _ _).trans_lt <| WithBot.coe_lt_coe.2 k.is_lt\n\n"}
{"name":"Polynomial.degree_C_lt_degree_C_mul_X","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na b : R\ninst✝ : Semiring R\nha : Ne a 0\n⊢ LT.lt (Polynomial.C b).degree (HMul.hMul (Polynomial.C a) Polynomial.X).degree","decl":"theorem degree_C_lt_degree_C_mul_X (ha : a ≠ 0) : degree (C b) < degree (C a * X) := by\n  simpa only [degree_C_mul_X ha] using degree_C_lt\n\n"}
{"name":"Polynomial.natDegree_mul_X","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\np : Polynomial R\nhp : Ne p 0\n⊢ Eq (HMul.hMul p Polynomial.X).natDegree (HAdd.hAdd p.natDegree 1)","decl":"@[simp] lemma natDegree_mul_X (hp : p ≠ 0) : natDegree (p * X) = natDegree p + 1 := by\n  rw [natDegree_mul' (by simpa), natDegree_X]\n\n"}
{"name":"Polynomial.natDegree_X_mul","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\np : Polynomial R\nhp : Ne p 0\n⊢ Eq (HMul.hMul Polynomial.X p).natDegree (HAdd.hAdd p.natDegree 1)","decl":"@[simp] lemma natDegree_X_mul (hp : p ≠ 0) : natDegree (X * p) = natDegree p + 1 := by\n  rw [commute_X p, natDegree_mul_X hp]\n\n"}
{"name":"Polynomial.natDegree_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\np : Polynomial R\nn : Nat\nhp : Ne p 0\n⊢ Eq (HMul.hMul p (HPow.hPow Polynomial.X n)).natDegree (HAdd.hAdd p.natDegree n)","decl":"@[simp] lemma natDegree_mul_X_pow (hp : p ≠ 0) : natDegree (p * X ^ n) = natDegree p + n := by\n  rw [natDegree_mul' (by simpa), natDegree_X_pow]\n\n"}
{"name":"Polynomial.natDegree_X_pow_mul","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\np : Polynomial R\nn : Nat\nhp : Ne p 0\n⊢ Eq (HMul.hMul (HPow.hPow Polynomial.X n) p).natDegree (HAdd.hAdd p.natDegree n)","decl":"@[simp] lemma natDegree_X_pow_mul (hp : p ≠ 0) : natDegree (X ^ n * p) = natDegree p + n := by\n  rw [commute_X_pow, natDegree_mul_X_pow n hp]\n\n--  This lemma explicitly does not require the `Nontrivial R` assumption.\n"}
{"name":"Polynomial.natDegree_X_pow_le","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u_1\ninst✝ : Semiring R\nn : Nat\n⊢ LE.le (HPow.hPow Polynomial.X n).natDegree n","decl":"theorem natDegree_X_pow_le {R : Type*} [Semiring R] (n : ℕ) : (X ^ n : R[X]).natDegree ≤ n := by\n  nontriviality R\n  rw [Polynomial.natDegree_X_pow]\n\n"}
{"name":"Polynomial.not_isUnit_X","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\n⊢ Not (IsUnit Polynomial.X)","decl":"theorem not_isUnit_X : ¬IsUnit (X : R[X]) := fun ⟨⟨_, g, _hfg, hgf⟩, rfl⟩ =>\n  zero_ne_one' R <| by\n    rw [← coeff_one_zero, ← hgf]\n    simp\n\n"}
{"name":"Polynomial.degree_mul_X","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\np : Polynomial R\n⊢ Eq (HMul.hMul p Polynomial.X).degree (HAdd.hAdd p.degree 1)","decl":"@[simp]\ntheorem degree_mul_X : degree (p * X) = degree p + 1 := by simp [monic_X.degree_mul]\n\n"}
{"name":"Polynomial.degree_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : Nontrivial R\np : Polynomial R\nn : Nat\n⊢ Eq (HMul.hMul p (HPow.hPow Polynomial.X n)).degree (HAdd.hAdd p.degree ↑n)","decl":"@[simp]\ntheorem degree_mul_X_pow : degree (p * X ^ n) = degree p + n := by simp [(monic_X_pow n).degree_mul]\n\n"}
{"name":"Polynomial.degree_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\na : R\ninst✝ : Ring R\np : Polynomial R\nhp : LT.lt 0 p.degree\n⊢ Eq (HSub.hSub p (Polynomial.C a)).degree p.degree","decl":"theorem degree_sub_C (hp : 0 < degree p) : degree (p - C a) = degree p := by\n  rw [sub_eq_add_neg, ← C_neg, degree_add_C hp]\n\n"}
{"name":"Polynomial.natDegree_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np : Polynomial R\na : R\n⊢ Eq (HSub.hSub p (Polynomial.C a)).natDegree p.natDegree","decl":"@[simp]\ntheorem natDegree_sub_C {a : R} : natDegree (p - C a) = natDegree p := by\n  rw [sub_eq_add_neg, ← C_neg, natDegree_add_C]\n\n"}
{"name":"Polynomial.leadingCoeff_sub_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : LT.lt q.degree p.degree\n⊢ Eq (HSub.hSub p q).leadingCoeff p.leadingCoeff","decl":"theorem leadingCoeff_sub_of_degree_lt (h : Polynomial.degree q < Polynomial.degree p) :\n    (p - q).leadingCoeff = p.leadingCoeff := by\n  rw [← q.degree_neg] at h\n  rw [sub_eq_add_neg, leadingCoeff_add_of_degree_lt' h]\n\n"}
{"name":"Polynomial.leadingCoeff_sub_of_degree_lt'","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : LT.lt p.degree q.degree\n⊢ Eq (HSub.hSub p q).leadingCoeff (Neg.neg q.leadingCoeff)","decl":"theorem leadingCoeff_sub_of_degree_lt' (h : Polynomial.degree p < Polynomial.degree q) :\n    (p - q).leadingCoeff = -q.leadingCoeff := by\n  rw [← q.degree_neg] at h\n  rw [sub_eq_add_neg, leadingCoeff_add_of_degree_lt h, leadingCoeff_neg]\n\n"}
{"name":"Polynomial.leadingCoeff_sub_of_degree_eq","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : Eq p.degree q.degree\nhlc : Ne p.leadingCoeff q.leadingCoeff\n⊢ Eq (HSub.hSub p q).leadingCoeff (HSub.hSub p.leadingCoeff q.leadingCoeff)","decl":"theorem leadingCoeff_sub_of_degree_eq (h : degree p = degree q)\n    (hlc : leadingCoeff p ≠ leadingCoeff q) :\n    leadingCoeff (p - q) = leadingCoeff p - leadingCoeff q := by\n  replace h : degree p = degree (-q) := by rwa [q.degree_neg]\n  replace hlc : leadingCoeff p + leadingCoeff (-q) ≠ 0 := by\n    rwa [← sub_ne_zero, sub_eq_add_neg, ← q.leadingCoeff_neg] at hlc\n  rw [sub_eq_add_neg, leadingCoeff_add_of_degree_eq h hlc, leadingCoeff_neg, sub_eq_add_neg]\n\n"}
{"name":"Polynomial.degree_sub_eq_left_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : LT.lt q.degree p.degree\n⊢ Eq (HSub.hSub p q).degree p.degree","decl":"theorem degree_sub_eq_left_of_degree_lt (h : degree q < degree p) : degree (p - q) = degree p := by\n  rw [← degree_neg q] at h\n  rw [sub_eq_add_neg, degree_add_eq_left_of_degree_lt h]\n\n"}
{"name":"Polynomial.degree_sub_eq_right_of_degree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : LT.lt p.degree q.degree\n⊢ Eq (HSub.hSub p q).degree q.degree","decl":"theorem degree_sub_eq_right_of_degree_lt (h : degree p < degree q) : degree (p - q) = degree q := by\n  rw [← degree_neg q] at h\n  rw [sub_eq_add_neg, degree_add_eq_right_of_degree_lt h, degree_neg]\n\n"}
{"name":"Polynomial.natDegree_sub_eq_left_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : LT.lt q.natDegree p.natDegree\n⊢ Eq (HSub.hSub p q).natDegree p.natDegree","decl":"theorem natDegree_sub_eq_left_of_natDegree_lt (h : natDegree q < natDegree p) :\n    natDegree (p - q) = natDegree p :=\n  natDegree_eq_of_degree_eq (degree_sub_eq_left_of_degree_lt (degree_lt_degree h))\n\n"}
{"name":"Polynomial.natDegree_sub_eq_right_of_natDegree_lt","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\np q : Polynomial R\nh : LT.lt p.natDegree q.natDegree\n⊢ Eq (HSub.hSub p q).natDegree q.natDegree","decl":"theorem natDegree_sub_eq_right_of_natDegree_lt (h : natDegree p < natDegree q) :\n    natDegree (p - q) = natDegree q :=\n  natDegree_eq_of_degree_eq (degree_sub_eq_right_of_degree_lt (degree_lt_degree h))\n\n"}
{"name":"Polynomial.degree_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\na : R\n⊢ Eq (HAdd.hAdd Polynomial.X (Polynomial.C a)).degree 1","decl":"@[simp]\ntheorem degree_X_add_C (a : R) : degree (X + C a) = 1 := by\n  have : degree (C a) < degree (X : R[X]) :=\n    calc\n      degree (C a) ≤ 0 := degree_C_le\n      _ < 1 := WithBot.coe_lt_coe.mpr zero_lt_one\n      _ = degree X := degree_X.symm\n  rw [degree_add_eq_left_of_degree_lt this, degree_X]\n\n"}
{"name":"Polynomial.natDegree_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nx : R\n⊢ Eq (HAdd.hAdd Polynomial.X (Polynomial.C x)).natDegree 1","decl":"theorem natDegree_X_add_C (x : R) : (X + C x).natDegree = 1 :=\n  natDegree_eq_of_degree_eq_some <| degree_X_add_C x\n\n"}
{"name":"Polynomial.nextCoeff_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"S : Type v\ninst✝ : Semiring S\nc : S\n⊢ Eq (HAdd.hAdd Polynomial.X (Polynomial.C c)).nextCoeff c","decl":"@[simp]\ntheorem nextCoeff_X_add_C [Semiring S] (c : S) : nextCoeff (X + C c) = c := by\n  nontriviality S\n  simp [nextCoeff_of_natDegree_pos]\n\n"}
{"name":"Polynomial.degree_X_pow_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nn : Nat\nhn : LT.lt 0 n\na : R\n⊢ Eq (HAdd.hAdd (HPow.hPow Polynomial.X n) (Polynomial.C a)).degree ↑n","decl":"theorem degree_X_pow_add_C {n : ℕ} (hn : 0 < n) (a : R) : degree ((X : R[X]) ^ n + C a) = n := by\n  have : degree (C a) < degree ((X : R[X]) ^ n) := degree_C_le.trans_lt <| by\n    rwa [degree_X_pow, Nat.cast_pos]\n  rw [degree_add_eq_left_of_degree_lt this, degree_X_pow]\n\n"}
{"name":"Polynomial.X_pow_add_C_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nn : Nat\nhn : LT.lt 0 n\na : R\n⊢ Ne (HAdd.hAdd (HPow.hPow Polynomial.X n) (Polynomial.C a)) 0","decl":"theorem X_pow_add_C_ne_zero {n : ℕ} (hn : 0 < n) (a : R) : (X : R[X]) ^ n + C a ≠ 0 :=\n  mt degree_eq_bot.2\n    (show degree ((X : R[X]) ^ n + C a) ≠ ⊥ by\n      rw [degree_X_pow_add_C hn a]; exact WithBot.coe_ne_bot)\n\n"}
{"name":"Polynomial.X_add_C_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nr : R\n⊢ Ne (HAdd.hAdd Polynomial.X (Polynomial.C r)) 0","decl":"theorem X_add_C_ne_zero (r : R) : X + C r ≠ 0 :=\n  pow_one (X : R[X]) ▸ X_pow_add_C_ne_zero zero_lt_one r\n\n"}
{"name":"Polynomial.zero_nmem_multiset_map_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nα : Type u_1\nm : Multiset α\nf : α → R\n⊢ Not (Membership.mem (Multiset.map (fun a => HAdd.hAdd Polynomial.X (Polynomial.C (f a))) m) 0)","decl":"theorem zero_nmem_multiset_map_X_add_C {α : Type*} (m : Multiset α) (f : α → R) :\n    (0 : R[X]) ∉ m.map fun a => X + C (f a) := fun mem =>\n  let ⟨_a, _, ha⟩ := Multiset.mem_map.mp mem\n  X_add_C_ne_zero _ ha\n\n"}
{"name":"Polynomial.natDegree_X_pow_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nn : Nat\nr : R\n⊢ Eq (HAdd.hAdd (HPow.hPow Polynomial.X n) (Polynomial.C r)).natDegree n","decl":"theorem natDegree_X_pow_add_C {n : ℕ} {r : R} : (X ^ n + C r).natDegree = n := by\n  by_cases hn : n = 0\n  · rw [hn, pow_zero, ← C_1, ← RingHom.map_add, natDegree_C]\n  · exact natDegree_eq_of_degree_eq_some (degree_X_pow_add_C (pos_iff_ne_zero.mpr hn) r)\n\n"}
{"name":"Polynomial.X_pow_add_C_ne_one","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nn : Nat\nhn : LT.lt 0 n\na : R\n⊢ Ne (HAdd.hAdd (HPow.hPow Polynomial.X n) (Polynomial.C a)) 1","decl":"theorem X_pow_add_C_ne_one {n : ℕ} (hn : 0 < n) (a : R) : (X : R[X]) ^ n + C a ≠ 1 := fun h =>\n  hn.ne' <| by simpa only [natDegree_X_pow_add_C, natDegree_one] using congr_arg natDegree h\n\n"}
{"name":"Polynomial.X_add_C_ne_one","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Nontrivial R\ninst✝ : Semiring R\nr : R\n⊢ Ne (HAdd.hAdd Polynomial.X (Polynomial.C r)) 1","decl":"theorem X_add_C_ne_one (r : R) : X + C r ≠ 1 :=\n  pow_one (X : R[X]) ▸ X_pow_add_C_ne_one zero_lt_one r\n\n"}
{"name":"Polynomial.leadingCoeff_X_pow_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\nn : Nat\nhn : LT.lt 0 n\nr : R\n⊢ Eq (HAdd.hAdd (HPow.hPow Polynomial.X n) (Polynomial.C r)).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_X_pow_add_C {n : ℕ} (hn : 0 < n) {r : R} :\n    (X ^ n + C r).leadingCoeff = 1 := by\n  nontriviality R\n  rw [leadingCoeff, natDegree_X_pow_add_C, coeff_add, coeff_X_pow_self, coeff_C,\n    if_neg (pos_iff_ne_zero.mp hn), add_zero]\n\n"}
{"name":"Polynomial.leadingCoeff_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"S : Type v\ninst✝ : Semiring S\nr : S\n⊢ Eq (HAdd.hAdd Polynomial.X (Polynomial.C r)).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_X_add_C [Semiring S] (r : S) : (X + C r).leadingCoeff = 1 := by\n  rw [← pow_one (X : S[X]), leadingCoeff_X_pow_add_C zero_lt_one]\n\n"}
{"name":"Polynomial.leadingCoeff_X_pow_add_one","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (HAdd.hAdd (HPow.hPow Polynomial.X n) 1).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_X_pow_add_one {n : ℕ} (hn : 0 < n) : (X ^ n + 1 : R[X]).leadingCoeff = 1 :=\n  leadingCoeff_X_pow_add_C hn\n\n"}
{"name":"Polynomial.leadingCoeff_pow_X_add_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Semiring R\nr : R\ni : Nat\n⊢ Eq (HPow.hPow (HAdd.hAdd Polynomial.X (Polynomial.C r)) i).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_pow_X_add_C (r : R) (i : ℕ) : leadingCoeff ((X + C r) ^ i) = 1 := by\n  nontriviality\n  rw [leadingCoeff_pow'] <;> simp\n\n"}
{"name":"Polynomial.degree_mul","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\n⊢ Eq (HMul.hMul p q).degree (HAdd.hAdd p.degree q.degree)","decl":"@[simp]\nlemma degree_mul : degree (p * q) = degree p + degree q :=\n  letI := Classical.decEq R\n  if hp0 : p = 0 then by simp only [hp0, degree_zero, zero_mul, WithBot.bot_add]\n  else\n    if hq0 : q = 0 then by simp only [hq0, degree_zero, mul_zero, WithBot.add_bot]\n    else degree_mul' <| mul_ne_zero (mt leadingCoeff_eq_zero.1 hp0) (mt leadingCoeff_eq_zero.1 hq0)\n\n"}
{"name":"Polynomial.degree_pow","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝² : Semiring R\ninst✝¹ : NoZeroDivisors R\ninst✝ : Nontrivial R\np : Polynomial R\nn : Nat\n⊢ Eq (HPow.hPow p n).degree (HSMul.hSMul n p.degree)","decl":"@[simp]\nlemma degree_pow [Nontrivial R] (p : R[X]) (n : ℕ) : degree (p ^ n) = n • degree p :=\n  map_pow (@degreeMonoidHom R _ _ _) _ _\n\n"}
{"name":"Polynomial.leadingCoeff_mul","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np q : Polynomial R\n⊢ Eq (HMul.hMul p q).leadingCoeff (HMul.hMul p.leadingCoeff q.leadingCoeff)","decl":"@[simp]\nlemma leadingCoeff_mul (p q : R[X]) : leadingCoeff (p * q) = leadingCoeff p * leadingCoeff q := by\n  by_cases hp : p = 0\n  · simp only [hp, zero_mul, leadingCoeff_zero]\n  · by_cases hq : q = 0\n    · simp only [hq, mul_zero, leadingCoeff_zero]\n    · rw [leadingCoeff_mul']\n      exact mul_ne_zero (mt leadingCoeff_eq_zero.1 hp) (mt leadingCoeff_eq_zero.1 hq)\n\n"}
{"name":"Polynomial.leadingCoeffHom_apply","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np : Polynomial R\n⊢ Eq (Polynomial.leadingCoeffHom p) p.leadingCoeff","decl":"@[simp]\nlemma leadingCoeffHom_apply (p : R[X]) : leadingCoeffHom p = leadingCoeff p :=\n  rfl\n\n"}
{"name":"Polynomial.leadingCoeff_pow","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\np : Polynomial R\nn : Nat\n⊢ Eq (HPow.hPow p n).leadingCoeff (HPow.hPow p.leadingCoeff n)","decl":"@[simp]\nlemma leadingCoeff_pow (p : R[X]) (n : ℕ) : leadingCoeff (p ^ n) = leadingCoeff p ^ n :=\n  (leadingCoeffHom : R[X] →* R).map_pow p n\n\n"}
{"name":"Polynomial.leadingCoeff_dvd_leadingCoeff","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\na p : Polynomial R\nhap : Dvd.dvd a p\n⊢ Dvd.dvd a.leadingCoeff p.leadingCoeff","decl":"lemma leadingCoeff_dvd_leadingCoeff {a p : R[X]} (hap : a ∣ p) :\n    a.leadingCoeff ∣ p.leadingCoeff :=\n  map_dvd leadingCoeffHom hap\n\n"}
{"name":"Polynomial.degree_le_mul_left","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\nq p : Polynomial R\nhq : Ne q 0\n⊢ LE.le p.degree (HMul.hMul p q).degree","decl":"lemma degree_le_mul_left (p : R[X]) (hq : q ≠ 0) : degree p ≤ degree (p * q) := by\n  classical\n  obtain rfl | hp := eq_or_ne p 0\n  · simp\n  · rw [degree_mul, degree_eq_natDegree hp, degree_eq_natDegree hq]\n    exact WithBot.coe_le_coe.2 (Nat.le_add_right _ _)\n\n"}
{"name":"Polynomial.Monic.natDegree_pos","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : CommSemiring R\np : Polynomial R\nhp : p.Monic\n⊢ Iff (LT.lt 0 p.natDegree) (Ne p 1)","decl":"lemma Monic.natDegree_pos : 0 < natDegree p ↔ p ≠ 1 :=\n  Nat.pos_iff_ne_zero.trans hp.natDegree_eq_zero.not\n\n"}
{"name":"Polynomial.Monic.degree_pos","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : CommSemiring R\np : Polynomial R\nhp : p.Monic\n⊢ Iff (LT.lt 0 p.degree) (Ne p 1)","decl":"lemma Monic.degree_pos : 0 < degree p ↔ p ≠ 1 :=\n  natDegree_pos_iff_degree_pos.symm.trans hp.natDegree_pos\n\n"}
{"name":"Polynomial.leadingCoeff_X_pow_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\nn : Nat\nhn : LT.lt 0 n\nr : R\n⊢ Eq (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C r)).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_X_pow_sub_C {n : ℕ} (hn : 0 < n) {r : R} :\n    (X ^ n - C r).leadingCoeff = 1 := by\n  rw [sub_eq_add_neg, ← map_neg C r, leadingCoeff_X_pow_add_C hn]\n\n"}
{"name":"Polynomial.leadingCoeff_X_pow_sub_one","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝ : Ring R\nn : Nat\nhn : LT.lt 0 n\n⊢ Eq (HSub.hSub (HPow.hPow Polynomial.X n) 1).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_X_pow_sub_one {n : ℕ} (hn : 0 < n) : (X ^ n - 1 : R[X]).leadingCoeff = 1 :=\n  leadingCoeff_X_pow_sub_C hn\n\n"}
{"name":"Polynomial.degree_X_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\na : R\n⊢ Eq (HSub.hSub Polynomial.X (Polynomial.C a)).degree 1","decl":"@[simp]\ntheorem degree_X_sub_C (a : R) : degree (X - C a) = 1 := by\n  rw [sub_eq_add_neg, ← map_neg C a, degree_X_add_C]\n\n"}
{"name":"Polynomial.natDegree_X_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nx : R\n⊢ Eq (HSub.hSub Polynomial.X (Polynomial.C x)).natDegree 1","decl":"theorem natDegree_X_sub_C (x : R) : (X - C x).natDegree = 1 := by\n  rw [natDegree_sub_C, natDegree_X]\n\n"}
{"name":"Polynomial.nextCoeff_X_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"S : Type v\ninst✝ : Ring S\nc : S\n⊢ Eq (HSub.hSub Polynomial.X (Polynomial.C c)).nextCoeff (Neg.neg c)","decl":"@[simp]\ntheorem nextCoeff_X_sub_C [Ring S] (c : S) : nextCoeff (X - C c) = -c := by\n  rw [sub_eq_add_neg, ← map_neg C c, nextCoeff_X_add_C]\n\n"}
{"name":"Polynomial.degree_X_pow_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : Nat\nhn : LT.lt 0 n\na : R\n⊢ Eq (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)).degree ↑n","decl":"theorem degree_X_pow_sub_C {n : ℕ} (hn : 0 < n) (a : R) : degree ((X : R[X]) ^ n - C a) = n := by\n  rw [sub_eq_add_neg, ← map_neg C a, degree_X_pow_add_C hn]\n\n"}
{"name":"Polynomial.X_pow_sub_C_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : Nat\nhn : LT.lt 0 n\na : R\n⊢ Ne (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C a)) 0","decl":"theorem X_pow_sub_C_ne_zero {n : ℕ} (hn : 0 < n) (a : R) : (X : R[X]) ^ n - C a ≠ 0 := by\n  rw [sub_eq_add_neg, ← map_neg C a]\n  exact X_pow_add_C_ne_zero hn _\n\n"}
{"name":"Polynomial.X_sub_C_ne_zero","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nr : R\n⊢ Ne (HSub.hSub Polynomial.X (Polynomial.C r)) 0","decl":"theorem X_sub_C_ne_zero (r : R) : X - C r ≠ 0 :=\n  pow_one (X : R[X]) ▸ X_pow_sub_C_ne_zero zero_lt_one r\n\n"}
{"name":"Polynomial.zero_nmem_multiset_map_X_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nα : Type u_1\nm : Multiset α\nf : α → R\n⊢ Not (Membership.mem (Multiset.map (fun a => HSub.hSub Polynomial.X (Polynomial.C (f a))) m) 0)","decl":"theorem zero_nmem_multiset_map_X_sub_C {α : Type*} (m : Multiset α) (f : α → R) :\n    (0 : R[X]) ∉ m.map fun a => X - C (f a) := fun mem =>\n  let ⟨_a, _, ha⟩ := Multiset.mem_map.mp mem\n  X_sub_C_ne_zero _ ha\n\n"}
{"name":"Polynomial.natDegree_X_pow_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"R : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : Nat\nr : R\n⊢ Eq (HSub.hSub (HPow.hPow Polynomial.X n) (Polynomial.C r)).natDegree n","decl":"theorem natDegree_X_pow_sub_C {n : ℕ} {r : R} : (X ^ n - C r).natDegree = n := by\n  rw [sub_eq_add_neg, ← map_neg C r, natDegree_X_pow_add_C]\n\n"}
{"name":"Polynomial.leadingCoeff_X_sub_C","module":"Mathlib.Algebra.Polynomial.Degree.Operations","initialProofState":"S : Type v\ninst✝ : Ring S\nr : S\n⊢ Eq (HSub.hSub Polynomial.X (Polynomial.C r)).leadingCoeff 1","decl":"@[simp]\ntheorem leadingCoeff_X_sub_C [Ring S] (r : S) : (X - C r).leadingCoeff = 1 := by\n  rw [sub_eq_add_neg, ← map_neg C r, leadingCoeff_X_add_C]\n\n"}
