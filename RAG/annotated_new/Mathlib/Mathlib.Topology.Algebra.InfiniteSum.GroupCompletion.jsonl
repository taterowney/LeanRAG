{"name":"hasSum_iff_hasSum_compl","module":"Mathlib.Topology.Algebra.InfiniteSum.GroupCompletion","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : AddCommGroup α\ninst✝¹ : UniformSpace α\ninst✝ : UniformAddGroup α\nf : β → α\na : α\n⊢ Iff (HasSum (Function.comp (⇑UniformSpace.Completion.toCompl) f) ↑a) (HasSum f a)","decl":"/-- A function `f` has a sum in an uniform additive group `α` if and only if it has that sum in the\ncompletion of `α`. -/\ntheorem hasSum_iff_hasSum_compl (f : β → α) (a : α) :\n    HasSum (toCompl ∘ f) a ↔ HasSum f a := (isDenseInducing_toCompl α).hasSum_iff f a\n\n"}
{"name":"summable_iff_summable_compl_and_tsum_mem","module":"Mathlib.Topology.Algebra.InfiniteSum.GroupCompletion","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : AddCommGroup α\ninst✝¹ : UniformSpace α\ninst✝ : UniformAddGroup α\nf : β → α\n⊢ Iff (Summable f) (And (Summable (Function.comp (⇑UniformSpace.Completion.toCompl) f)) (Membership.mem (Set.range ⇑UniformSpace.Completion.toCompl) (tsum fun i => UniformSpace.Completion.toCompl (f i))))","decl":"/-- A function `f` is summable in a uniform additive group `α` if and only if it is summable in\n`Completion α` and its sum in `Completion α` lies in the range of `toCompl : α →+ Completion α`. -/\ntheorem summable_iff_summable_compl_and_tsum_mem (f : β → α) :\n    Summable f ↔ Summable (toCompl ∘ f) ∧ ∑' i, toCompl (f i) ∈ Set.range toCompl :=\n  (isDenseInducing_toCompl α).summable_iff_tsum_comp_mem_range f\n\n"}
{"name":"summable_iff_cauchySeq_finset_and_tsum_mem","module":"Mathlib.Topology.Algebra.InfiniteSum.GroupCompletion","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : AddCommGroup α\ninst✝¹ : UniformSpace α\ninst✝ : UniformAddGroup α\nf : β → α\n⊢ Iff (Summable f) (And (CauchySeq fun s => s.sum fun b => f b) (Membership.mem (Set.range ⇑UniformSpace.Completion.toCompl) (tsum fun i => UniformSpace.Completion.toCompl (f i))))","decl":"/-- A function `f` is summable in a uniform additive group `α` if and only if the net of its partial\nsums is Cauchy and its sum in `Completion α` lies in the range of `toCompl : α →+ Completion α`.\n(The condition that the net of partial sums is Cauchy can be checked using\n`cauchySeq_finset_iff_sum_vanishing` or `cauchySeq_finset_iff_tsum_vanishing`.) -/\ntheorem summable_iff_cauchySeq_finset_and_tsum_mem (f : β → α) :\n    Summable f ↔ CauchySeq (fun s : Finset β ↦ ∑ b ∈ s, f b) ∧\n      ∑' i, toCompl (f i) ∈ Set.range toCompl := by\n  classical\n  constructor\n  · rintro ⟨a, ha⟩\n    exact ⟨ha.cauchySeq, ((summable_iff_summable_compl_and_tsum_mem f).mp ⟨a, ha⟩).2⟩\n  · rintro ⟨h_cauchy, h_tsum⟩\n    apply (summable_iff_summable_compl_and_tsum_mem f).mpr\n    constructor\n    · apply summable_iff_cauchySeq_finset.mpr\n      simp_rw [Function.comp_apply, ← map_sum]\n      exact h_cauchy.map (uniformContinuous_coe α)\n    · exact h_tsum\n\n"}
{"name":"Summable.toCompl_tsum","module":"Mathlib.Topology.Algebra.InfiniteSum.GroupCompletion","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : AddCommGroup α\ninst✝¹ : UniformSpace α\ninst✝ : UniformAddGroup α\nf : β → α\nhf : Summable f\n⊢ Eq (tsum fun i => UniformSpace.Completion.toCompl (f i)) ↑(tsum fun i => f i)","decl":"/-- If a function `f` is summable in a uniform additive group `α`, then its sum in `α` is the same\nas its sum in `Completion α`. -/\ntheorem Summable.toCompl_tsum {f : β → α} (hf : Summable f) : ∑' i, toCompl (f i) = ∑' i, f i :=\n  (hf.map_tsum toCompl (continuous_coe α)).symm\n"}
