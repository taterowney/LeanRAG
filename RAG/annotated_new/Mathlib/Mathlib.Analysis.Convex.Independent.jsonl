{"name":"Subsingleton.convexIndependent","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Subsingleton ι\np : ι → E\n⊢ ConvexIndependent 𝕜 p","decl":"/-- A family with at most one point is convex independent. -/\ntheorem Subsingleton.convexIndependent [Subsingleton ι] (p : ι → E) : ConvexIndependent 𝕜 p := by\n  intro s x hx\n  have : (convexHull 𝕜 (p '' s)).Nonempty := ⟨p x, hx⟩\n  rw [convexHull_nonempty_iff, Set.image_nonempty] at this\n  rwa [Subsingleton.mem_iff_nonempty]\n\n"}
{"name":"ConvexIndependent.injective","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\nhc : ConvexIndependent 𝕜 p\n⊢ Function.Injective p","decl":"/-- A convex independent family is injective. -/\nprotected theorem ConvexIndependent.injective {p : ι → E} (hc : ConvexIndependent 𝕜 p) :\n    Function.Injective p := by\n  refine fun i j hij => hc {j} i ?_\n  rw [hij, Set.image_singleton, convexHull_singleton]\n  exact Set.mem_singleton _\n\n"}
{"name":"ConvexIndependent.comp_embedding","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nι' : Type u_4\nf : Function.Embedding ι' ι\np : ι → E\nhc : ConvexIndependent 𝕜 p\n⊢ ConvexIndependent 𝕜 (Function.comp p ⇑f)","decl":"/-- If a family is convex independent, so is any subfamily given by composition of an embedding into\nindex type with the original family. -/\ntheorem ConvexIndependent.comp_embedding {ι' : Type*} (f : ι' ↪ ι) {p : ι → E}\n    (hc : ConvexIndependent 𝕜 p) : ConvexIndependent 𝕜 (p ∘ f) := by\n  intro s x hx\n  rw [← f.injective.mem_set_image]\n  exact hc _ _ (by rwa [Set.image_image])\n\n"}
{"name":"ConvexIndependent.subtype","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\nhc : ConvexIndependent 𝕜 p\ns : Set ι\n⊢ ConvexIndependent 𝕜 fun i => p ↑i","decl":"/-- If a family is convex independent, so is any subfamily indexed by a subtype of the index type.\n-/\nprotected theorem ConvexIndependent.subtype {p : ι → E} (hc : ConvexIndependent 𝕜 p) (s : Set ι) :\n    ConvexIndependent 𝕜 fun i : s => p i :=\n  hc.comp_embedding (Embedding.subtype _)\n\n"}
{"name":"ConvexIndependent.range","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\nhc : ConvexIndependent 𝕜 p\n⊢ ConvexIndependent 𝕜 Subtype.val","decl":"/-- If an indexed family of points is convex independent, so is the corresponding set of points. -/\nprotected theorem ConvexIndependent.range {p : ι → E} (hc : ConvexIndependent 𝕜 p) :\n    ConvexIndependent 𝕜 ((↑) : Set.range p → E) := by\n  let f : Set.range p → ι := fun x => x.property.choose\n  have hf : ∀ x, p (f x) = x := fun x => x.property.choose_spec\n  let fe : Set.range p ↪ ι := ⟨f, fun x₁ x₂ he => Subtype.ext (hf x₁ ▸ hf x₂ ▸ he ▸ rfl)⟩\n  convert hc.comp_embedding fe\n  ext\n  rw [Embedding.coeFn_mk, comp_apply, hf]\n\n"}
{"name":"ConvexIndependent.mono","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\ns t : Set E\nhc : ConvexIndependent 𝕜 Subtype.val\nhs : HasSubset.Subset s t\n⊢ ConvexIndependent 𝕜 Subtype.val","decl":"/-- A subset of a convex independent set of points is convex independent as well. -/\nprotected theorem ConvexIndependent.mono {s t : Set E} (hc : ConvexIndependent 𝕜 ((↑) : t → E))\n    (hs : s ⊆ t) : ConvexIndependent 𝕜 ((↑) : s → E) :=\n  hc.comp_embedding (s.embeddingOfSubset t hs)\n\n"}
{"name":"Function.Injective.convexIndependent_iff_set","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\nhi : Function.Injective p\n⊢ Iff (ConvexIndependent 𝕜 Subtype.val) (ConvexIndependent 𝕜 p)","decl":"/-- The range of an injective indexed family of points is convex independent iff that family is. -/\ntheorem Function.Injective.convexIndependent_iff_set {p : ι → E} (hi : Function.Injective p) :\n    ConvexIndependent 𝕜 ((↑) : Set.range p → E) ↔ ConvexIndependent 𝕜 p :=\n  ⟨fun hc =>\n    hc.comp_embedding\n      (⟨fun i => ⟨p i, Set.mem_range_self _⟩, fun _ _ h => hi (Subtype.mk_eq_mk.1 h)⟩ :\n        ι ↪ Set.range p),\n    ConvexIndependent.range⟩\n\n"}
{"name":"ConvexIndependent.mem_convexHull_iff","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\nhc : ConvexIndependent 𝕜 p\ns : Set ι\ni : ι\n⊢ Iff (Membership.mem ((convexHull 𝕜) (Set.image p s)) (p i)) (Membership.mem s i)","decl":"/-- If a family is convex independent, a point in the family is in the convex hull of some of the\npoints given by a subset of the index type if and only if the point's index is in this subset. -/\n@[simp]\nprotected theorem ConvexIndependent.mem_convexHull_iff {p : ι → E} (hc : ConvexIndependent 𝕜 p)\n    (s : Set ι) (i : ι) : p i ∈ convexHull 𝕜 (p '' s) ↔ i ∈ s :=\n  ⟨hc _ _, fun hi => subset_convexHull 𝕜 _ (Set.mem_image_of_mem p hi)⟩\n\n"}
{"name":"convexIndependent_iff_not_mem_convexHull_diff","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\n⊢ Iff (ConvexIndependent 𝕜 p) (∀ (i : ι) (s : Set ι), Not (Membership.mem ((convexHull 𝕜) (Set.image p (SDiff.sdiff s (Singleton.singleton i)))) (p i)))","decl":"/-- If a family is convex independent, a point in the family is not in the convex hull of the other\npoints. See `convexIndependent_set_iff_not_mem_convexHull_diff` for the `Set` version. -/\ntheorem convexIndependent_iff_not_mem_convexHull_diff {p : ι → E} :\n    ConvexIndependent 𝕜 p ↔ ∀ i s, p i ∉ convexHull 𝕜 (p '' (s \\ {i})) := by\n  refine ⟨fun hc i s h => ?_, fun h s i hi => ?_⟩\n  · rw [hc.mem_convexHull_iff] at h\n    exact h.2 (Set.mem_singleton _)\n  · by_contra H\n    refine h i s ?_\n    rw [Set.diff_singleton_eq_self H]\n    exact hi\n\n"}
{"name":"convexIndependent_set_iff_inter_convexHull_subset","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\ns : Set E\n⊢ Iff (ConvexIndependent 𝕜 Subtype.val) (∀ (t : Set E), HasSubset.Subset t s → HasSubset.Subset (Inter.inter s ((convexHull 𝕜) t)) t)","decl":"theorem convexIndependent_set_iff_inter_convexHull_subset {s : Set E} :\n    ConvexIndependent 𝕜 ((↑) : s → E) ↔ ∀ t, t ⊆ s → s ∩ convexHull 𝕜 t ⊆ t := by\n  constructor\n  · rintro hc t h x ⟨hxs, hxt⟩\n    refine hc { x | ↑x ∈ t } ⟨x, hxs⟩ ?_\n    rw [Subtype.coe_image_of_subset h]\n    exact hxt\n  · intro hc t x h\n    rw [← Subtype.coe_injective.mem_set_image]\n    exact hc (t.image ((↑) : s → E)) (Subtype.coe_image_subset s t) ⟨x.prop, h⟩\n\n"}
{"name":"convexIndependent_set_iff_not_mem_convexHull_diff","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\ns : Set E\n⊢ Iff (ConvexIndependent 𝕜 Subtype.val) (∀ (x : E), Membership.mem s x → Not (Membership.mem ((convexHull 𝕜) (SDiff.sdiff s (Singleton.singleton x))) x))","decl":"/-- If a set is convex independent, a point in the set is not in the convex hull of the other\npoints. See `convexIndependent_iff_not_mem_convexHull_diff` for the indexed family version. -/\ntheorem convexIndependent_set_iff_not_mem_convexHull_diff {s : Set E} :\n    ConvexIndependent 𝕜 ((↑) : s → E) ↔ ∀ x ∈ s, x ∉ convexHull 𝕜 (s \\ {x}) := by\n  rw [convexIndependent_set_iff_inter_convexHull_subset]\n  constructor\n  · rintro hs x hxs hx\n    exact (hs _ Set.diff_subset ⟨hxs, hx⟩).2 (Set.mem_singleton _)\n  · rintro hs t ht x ⟨hxs, hxt⟩\n    by_contra h\n    exact hs _ hxs (convexHull_mono (Set.subset_diff_singleton ht h) hxt)\n\n"}
{"name":"convexIndependent_iff_finset","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nι : Type u_3\ninst✝² : LinearOrderedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\np : ι → E\n⊢ Iff (ConvexIndependent 𝕜 p) (∀ (s : Finset ι) (x : ι), Membership.mem ((convexHull 𝕜) ↑(Finset.image p s)) (p x) → Membership.mem s x)","decl":"open scoped Classical in\n/-- To check convex independence, one only has to check finsets thanks to Carathéodory's theorem. -/\ntheorem convexIndependent_iff_finset {p : ι → E} :\n    ConvexIndependent 𝕜 p ↔\n      ∀ (s : Finset ι) (x : ι), p x ∈ convexHull 𝕜 (s.image p : Set E) → x ∈ s := by\n  refine ⟨fun hc s x hx => hc s x ?_, fun h s x hx => ?_⟩\n  · rwa [Finset.coe_image] at hx\n  have hp : Injective p := by\n    rintro a b hab\n    rw [← mem_singleton]\n    refine h {b} a ?_\n    rw [hab, image_singleton, coe_singleton, convexHull_singleton]\n    exact Set.mem_singleton _\n  rw [convexHull_eq_union_convexHull_finite_subsets] at hx\n  simp_rw [Set.mem_iUnion] at hx\n  obtain ⟨t, ht, hx⟩ := hx\n  rw [← hp.mem_set_image]\n  refine ht ?_\n  suffices x ∈ t.preimage p hp.injOn by rwa [mem_preimage, ← mem_coe] at this\n  refine h _ x ?_\n  rwa [t.image_preimage p hp.injOn, filter_true_of_mem]\n  exact fun y hy => s.image_subset_range p (ht <| mem_coe.2 hy)\n\n"}
{"name":"Convex.convexIndependent_extremePoints","module":"Mathlib.Analysis.Convex.Independent","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\ns : Set E\nhs : Convex 𝕜 s\n⊢ ConvexIndependent 𝕜 Subtype.val","decl":"theorem Convex.convexIndependent_extremePoints (hs : Convex 𝕜 s) :\n    ConvexIndependent 𝕜 ((↑) : s.extremePoints 𝕜 → E) :=\n  convexIndependent_set_iff_not_mem_convexHull_diff.2 fun _ hx h =>\n    (extremePoints_convexHull_subset\n          (inter_extremePoints_subset_extremePoints_of_subset\n            (convexHull_min (Set.diff_subset.trans extremePoints_subset) hs) ⟨h, hx⟩)).2\n      (Set.mem_singleton _)\n\n"}
