{"name":"EuclideanQuadrant.ext_iff","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\nx y : EuclideanQuadrant n\n‚ä¢ Iff (Eq x y) (Eq ‚Üëx ‚Üëy)","decl":"@[ext]\ntheorem EuclideanQuadrant.ext (x y : EuclideanQuadrant n) (h : x.1 = y.1) : x = y :=\n  Subtype.eq h\n\n"}
{"name":"EuclideanQuadrant.ext","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\nx y : EuclideanQuadrant n\nh : Eq ‚Üëx ‚Üëy\n‚ä¢ Eq x y","decl":"@[ext]\ntheorem EuclideanQuadrant.ext (x y : EuclideanQuadrant n) (h : x.1 = y.1) : x = y :=\n  Subtype.eq h\n\n"}
{"name":"EuclideanHalfSpace.ext_iff","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\nx y : EuclideanHalfSpace n\n‚ä¢ Iff (Eq x y) (Eq ‚Üëx ‚Üëy)","decl":"@[ext]\ntheorem EuclideanHalfSpace.ext [NeZero n] (x y : EuclideanHalfSpace n)\n    (h : x.1 = y.1) : x = y :=\n  Subtype.eq h\n\n"}
{"name":"EuclideanHalfSpace.ext","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\nx y : EuclideanHalfSpace n\nh : Eq ‚Üëx ‚Üëy\n‚ä¢ Eq x y","decl":"@[ext]\ntheorem EuclideanHalfSpace.ext [NeZero n] (x y : EuclideanHalfSpace n)\n    (h : x.1 = y.1) : x = y :=\n  Subtype.eq h\n\n"}
{"name":"EuclideanHalfSpace.convex","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ Convex Real (setOf fun x => LE.le 0 (x 0))","decl":"theorem EuclideanHalfSpace.convex [NeZero n] :\n    Convex ‚Ñù { x : EuclideanSpace ‚Ñù (Fin n) | 0 ‚â§ x 0 } :=\n  fun _ hx _ hy _ _ _ _ _ ‚Ü¶ by dsimp at hx hy ‚ä¢; positivity\n\n"}
{"name":"EuclideanQuadrant.convex","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\n‚ä¢ Convex Real (setOf fun x => ‚àÄ (i : Fin n), LE.le 0 (x i))","decl":"theorem EuclideanQuadrant.convex :\n    Convex ‚Ñù { x : EuclideanSpace ‚Ñù (Fin n) | ‚àÄ i, 0 ‚â§ x i } :=\n  fun _ hx _ hy _ _ _ _ _ i ‚Ü¶ by dsimp at hx hy ‚ä¢; specialize hx i; specialize hy i; positivity\n\n"}
{"name":"EuclideanHalfSpace.pathConnectedSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ PathConnectedSpace (EuclideanHalfSpace n)","decl":"instance EuclideanHalfSpace.pathConnectedSpace [NeZero n] :\n    PathConnectedSpace (EuclideanHalfSpace n) :=\n  isPathConnected_iff_pathConnectedSpace.mp <| convex.isPathConnected ‚ü®0, by simp‚ü©\n\n"}
{"name":"EuclideanQuadrant.pathConnectedSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\n‚ä¢ PathConnectedSpace (EuclideanQuadrant n)","decl":"instance EuclideanQuadrant.pathConnectedSpace : PathConnectedSpace (EuclideanQuadrant n) :=\n  isPathConnected_iff_pathConnectedSpace.mp <| convex.isPathConnected ‚ü®0, by simp‚ü©\n\n"}
{"name":"instLocPathConnectedSpaceEuclideanHalfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ LocPathConnectedSpace (EuclideanHalfSpace n)","decl":"instance [NeZero n] : LocPathConnectedSpace (EuclideanHalfSpace n) :=\n  EuclideanHalfSpace.convex.locPathConnectedSpace\n\n"}
{"name":"instLocPathConnectedSpaceEuclideanQuadrant","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\n‚ä¢ LocPathConnectedSpace (EuclideanQuadrant n)","decl":"instance : LocPathConnectedSpace (EuclideanQuadrant n) :=\n  EuclideanQuadrant.convex.locPathConnectedSpace\n\n"}
{"name":"range_euclideanHalfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ Eq (Set.range fun x => ‚Üëx) (setOf fun y => LE.le 0 (y 0))","decl":"theorem range_euclideanHalfSpace (n : ‚Ñï) [NeZero n] :\n    (range fun x : EuclideanHalfSpace n => x.val) = { y | 0 ‚â§ y 0 } :=\n  Subtype.range_val\n\n"}
{"name":"interior_halfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (interior (setOf fun y => LE.le a (y i))) (setOf fun y => LT.lt a (y i))","decl":"open ENNReal in\n@[simp]\ntheorem interior_halfSpace {n : ‚Ñï} (p : ‚Ñù‚â•0‚àû) (a : ‚Ñù) (i : Fin n) :\n    interior { y : PiLp p (fun _ : Fin n ‚Ü¶ ‚Ñù) | a ‚â§ y i } = { y | a < y i } := by\n  let f : (Œ† _ : Fin n, ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù := ContinuousLinearMap.proj i\n  change interior (f ‚Åª¬π' Ici a) = f ‚Åª¬π' Ioi a\n  rw [f.interior_preimage, interior_Ici]\n  apply Function.surjective_eval\n\n"}
{"name":"interior_halfspace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (interior (setOf fun y => LE.le a (y i))) (setOf fun y => LT.lt a (y i))","decl":"@[deprecated (since := \"2024-11-12\")] alias interior_halfspace := interior_halfSpace\n\n"}
{"name":"closure_halfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (closure (setOf fun y => LE.le a (y i))) (setOf fun y => LE.le a (y i))","decl":"open ENNReal in\n@[simp]\ntheorem closure_halfSpace {n : ‚Ñï} (p : ‚Ñù‚â•0‚àû) (a : ‚Ñù) (i : Fin n) :\n    closure { y : PiLp p (fun _ : Fin n ‚Ü¶ ‚Ñù) | a ‚â§ y i } = { y | a ‚â§ y i } := by\n  let f : (Œ† _ : Fin n, ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù := ContinuousLinearMap.proj i\n  change closure (f ‚Åª¬π' Ici a) = f ‚Åª¬π' Ici a\n  rw [f.closure_preimage, closure_Ici]\n  apply Function.surjective_eval\n\n"}
{"name":"closure_halfspace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (closure (setOf fun y => LE.le a (y i))) (setOf fun y => LE.le a (y i))","decl":"@[deprecated (since := \"2024-11-12\")] alias closure_halfspace := closure_halfSpace\n\n"}
{"name":"closure_open_halfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (closure (setOf fun y => LT.lt a (y i))) (setOf fun y => LE.le a (y i))","decl":"open ENNReal in\n@[simp]\ntheorem closure_open_halfSpace {n : ‚Ñï} (p : ‚Ñù‚â•0‚àû) (a : ‚Ñù) (i : Fin n) :\n    closure { y : PiLp p (fun _ : Fin n ‚Ü¶ ‚Ñù) | a < y i } = { y | a ‚â§ y i } := by\n  let f : (Œ† _ : Fin n, ‚Ñù) ‚ÜíL[‚Ñù] ‚Ñù := ContinuousLinearMap.proj i\n  change closure (f ‚Åª¬π' Ioi a) = f ‚Åª¬π' Ici a\n  rw [f.closure_preimage, closure_Ioi]\n  apply Function.surjective_eval\n\n"}
{"name":"closure_open_halfspace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (closure (setOf fun y => LT.lt a (y i))) (setOf fun y => LE.le a (y i))","decl":"@[deprecated (since := \"2024-11-12\")] alias closure_open_halfspace := closure_open_halfSpace\n\n"}
{"name":"frontier_halfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (frontier (setOf fun y => LE.le a (y i))) (setOf fun y => Eq a (y i))","decl":"open ENNReal in\n@[simp]\ntheorem frontier_halfSpace {n : ‚Ñï} (p : ‚Ñù‚â•0‚àû) (a : ‚Ñù) (i : Fin n) :\n    frontier { y : PiLp p (fun _ : Fin n ‚Ü¶ ‚Ñù) | a ‚â§ y i } = { y | a = y i } := by\n  rw [frontier, closure_halfSpace, interior_halfSpace]\n  ext y\n  simpa only [mem_diff, mem_setOf_eq, not_lt] using antisymm_iff\n"}
{"name":"frontier_halfspace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\np : ENNReal\na : Real\ni : Fin n\n‚ä¢ Eq (frontier (setOf fun y => LE.le a (y i))) (setOf fun y => Eq a (y i))","decl":"@[deprecated (since := \"2024-11-12\")] alias frontier_halfspace := frontier_halfSpace\n\n"}
{"name":"range_euclideanQuadrant","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\n‚ä¢ Eq (Set.range fun x => ‚Üëx) (setOf fun y => ‚àÄ (i : Fin n), LE.le 0 (y i))","decl":"theorem range_euclideanQuadrant (n : ‚Ñï) :\n    (range fun x : EuclideanQuadrant n => x.val) = { y | ‚àÄ i : Fin n, 0 ‚â§ y i } :=\n  Subtype.range_val\n\n"}
{"name":"modelWithCornersEuclideanHalfSpace_zero","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ Eq (‚Üë(modelWithCornersEuclideanHalfSpace n) 0) 0","decl":"lemma modelWithCornersEuclideanHalfSpace_zero {n : ‚Ñï} [NeZero n] : (ùì°‚àÇ n) 0 = 0 := rfl\n\n"}
{"name":"range_modelWithCornersEuclideanHalfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ Eq (Set.range ‚Üë(modelWithCornersEuclideanHalfSpace n)) (setOf fun y => LE.le 0 (y 0))","decl":"lemma range_modelWithCornersEuclideanHalfSpace (n : ‚Ñï) [NeZero n] :\n    range (ùì°‚àÇ n) = { y | 0 ‚â§ y 0 } := range_euclideanHalfSpace n\n\n"}
{"name":"interior_range_modelWithCornersEuclideanHalfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ Eq (interior (Set.range ‚Üë(modelWithCornersEuclideanHalfSpace n))) (setOf fun y => LT.lt 0 (y 0))","decl":"lemma interior_range_modelWithCornersEuclideanHalfSpace (n : ‚Ñï) [NeZero n] :\n    interior (range (ùì°‚àÇ n)) = { y | 0 < y 0 } := by\n  calc interior (range (ùì°‚àÇ n))\n    _ = interior ({ y | 0 ‚â§ y 0}) := by\n      congr!\n      apply range_euclideanHalfSpace\n    _ = { y | 0 < y 0 } := interior_halfSpace _ _ _\n\n"}
{"name":"frontier_range_modelWithCornersEuclideanHalfSpace","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : Nat\ninst‚úù : NeZero n\n‚ä¢ Eq (frontier (Set.range ‚Üë(modelWithCornersEuclideanHalfSpace n))) (setOf fun y => Eq 0 (y 0))","decl":"lemma frontier_range_modelWithCornersEuclideanHalfSpace (n : ‚Ñï) [NeZero n] :\n    frontier (range (ùì°‚àÇ n)) = { y | 0 = y 0 } := by\n  calc frontier (range (ùì°‚àÇ n))\n    _ = frontier ({ y | 0 ‚â§ y 0 }) := by\n      congr!\n      apply range_euclideanHalfSpace\n    _ = { y | 0 = y 0 } := frontier_halfSpace 2 _ _\n\n"}
{"name":"Fact.Manifold.instLeReal","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Fact (LE.le x y)","decl":"scoped instance : Fact (x ‚â§ y) := Fact.mk hxy.out.le\n\n"}
{"name":"IccLeftChart_extend_bot","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Eq (‚Üë((IccLeftChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) Bot.bot) 0","decl":"lemma IccLeftChart_extend_bot : (IccLeftChart x y).extend (ùì°‚àÇ 1) ‚ä• = 0 := by\n  norm_num [IccLeftChart, modelWithCornersEuclideanHalfSpace_zero]\n  congr\n\n"}
{"name":"iccLeftChart_extend_zero","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\np : ‚Üë(Set.Icc x y)\n‚ä¢ Eq (‚Üë((IccLeftChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) p 0) (HSub.hSub (‚Üëp) x)","decl":"lemma iccLeftChart_extend_zero {p : Set.Icc x y} :\n    (IccLeftChart x y).extend (ùì°‚àÇ 1) p 0 = p.val - x := rfl\n\n"}
{"name":"IccLeftChart_extend_interior_pos","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\np : ‚Üë(Set.Icc x y)\nhp : And (LT.lt x ‚Üëp) (LT.lt (‚Üëp) y)\n‚ä¢ LT.lt 0 (‚Üë((IccLeftChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) p 0)","decl":"lemma IccLeftChart_extend_interior_pos {p : Set.Icc x y} (hp : x < p.val ‚àß p.val < y) :\n    0 < (IccLeftChart x y).extend (ùì°‚àÇ 1) p 0 := by\n  simp_rw [iccLeftChart_extend_zero]\n  norm_num [hp.1]\n\n"}
{"name":"IccLeftChart_extend_bot_mem_frontier","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Membership.mem (frontier (Set.range ‚Üë(modelWithCornersEuclideanHalfSpace 1))) (‚Üë((IccLeftChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) Bot.bot)","decl":"lemma IccLeftChart_extend_bot_mem_frontier :\n    (IccLeftChart x y).extend (ùì°‚àÇ 1) ‚ä• ‚àà frontier (range (ùì°‚àÇ 1)) := by\n  rw [IccLeftChart_extend_bot, frontier_range_modelWithCornersEuclideanHalfSpace,\n    mem_setOf, PiLp.zero_apply]\n\n"}
{"name":"IccRightChart_extend_top","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Eq (‚Üë((IccRightChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) Top.top) 0","decl":"lemma IccRightChart_extend_top :\n    (IccRightChart x y).extend (ùì°‚àÇ 1) ‚ä§ = 0 := by\n  norm_num [IccRightChart, modelWithCornersEuclideanHalfSpace_zero]\n  congr\n\n"}
{"name":"IccRightChart_extend_top_mem_frontier","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Membership.mem (frontier (Set.range ‚Üë(modelWithCornersEuclideanHalfSpace 1))) (‚Üë((IccRightChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) Top.top)","decl":"lemma IccRightChart_extend_top_mem_frontier :\n    (IccRightChart x y).extend (ùì°‚àÇ 1) ‚ä§ ‚àà frontier (range (ùì°‚àÇ 1)) := by\n  rw [IccRightChart_extend_top, frontier_range_modelWithCornersEuclideanHalfSpace,\n    mem_setOf, PiLp.zero_apply]\n\n"}
{"name":"IccRightChart_extend_right_mem_frontier","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Membership.mem (frontier (Set.range ‚Üë(modelWithCornersEuclideanHalfSpace 1))) (‚Üë((IccRightChart x y).extend (modelWithCornersEuclideanHalfSpace 1)) Top.top)","decl":"@[deprecated (since := \"2025-01-25\")]\nalias IccRightChart_extend_right_mem_frontier := IccRightChart_extend_top_mem_frontier\n\n"}
{"name":"Icc_chartedSpaceChartAt","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\nz : ‚Üë(Set.Icc x y)\n‚ä¢ Eq (chartAt (EuclideanHalfSpace 1) z) (ite (LT.lt (‚Üëz) y) (IccLeftChart x y) (IccRightChart x y))","decl":"@[simp]\nlemma Icc_chartedSpaceChartAt {z : Set.Icc x y} :\n    chartAt _ z = if z.val < y then IccLeftChart x y else IccRightChart x y := rfl\n\n"}
{"name":"Icc_chartedSpaceChartAt_of_le_top","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\nz : ‚Üë(Set.Icc x y)\nh : LT.lt (‚Üëz) y\n‚ä¢ Eq (chartAt (EuclideanHalfSpace 1) z) (IccLeftChart x y)","decl":"lemma Icc_chartedSpaceChartAt_of_le_top {z : Set.Icc x y} (h : z.val < y) :\n    chartAt _ z = IccLeftChart x y := by\n  simp [Icc_chartedSpaceChartAt, h]\n\n"}
{"name":"Icc_chartedSpaceChartAt_of_top_le","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\nz : ‚Üë(Set.Icc x y)\nh : LE.le y ‚Üëz\n‚ä¢ Eq (chartAt (EuclideanHalfSpace 1) z) (IccRightChart x y)","decl":"lemma Icc_chartedSpaceChartAt_of_top_le {z : Set.Icc x y} (h : y ‚â§ z.val) :\n    chartAt _ z = IccRightChart x y := by\n  simp [Icc_chartedSpaceChartAt, reduceIte, not_lt.mpr h]\n\n"}
{"name":"Icc_isBoundaryPoint_bot","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ (modelWithCornersEuclideanHalfSpace 1).IsBoundaryPoint Bot.bot","decl":"lemma Icc_isBoundaryPoint_bot : (ùì°‚àÇ 1).IsBoundaryPoint (‚ä• : Set.Icc x y) := by\n  rw [ModelWithCorners.isBoundaryPoint_iff, extChartAt,\n    Icc_chartedSpaceChartAt_of_le_top (by norm_num [hxy.out])]\n  exact IccLeftChart_extend_bot_mem_frontier\n\n"}
{"name":"Icc_isBoundaryPoint_top","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ (modelWithCornersEuclideanHalfSpace 1).IsBoundaryPoint Top.top","decl":"lemma Icc_isBoundaryPoint_top : (ùì°‚àÇ 1).IsBoundaryPoint (‚ä§ : Set.Icc x y) := by\n  rw [ModelWithCorners.isBoundaryPoint_iff, extChartAt,\n    Icc_chartedSpaceChartAt_of_top_le (by norm_num)]\n  exact IccRightChart_extend_top_mem_frontier\n\n"}
{"name":"Icc_isInteriorPoint_interior","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\np : ‚Üë(Set.Icc x y)\nhp : And (LT.lt x ‚Üëp) (LT.lt (‚Üëp) y)\n‚ä¢ (modelWithCornersEuclideanHalfSpace 1).IsInteriorPoint p","decl":"lemma Icc_isInteriorPoint_interior {p : Set.Icc x y} (hp : x < p.val ‚àß p.val < y) :\n    (ùì°‚àÇ 1).IsInteriorPoint p := by\n  rw [ModelWithCorners.IsInteriorPoint, extChartAt, Icc_chartedSpaceChartAt_of_le_top hp.2,\n    interior_range_modelWithCornersEuclideanHalfSpace]\n  exact IccLeftChart_extend_interior_pos hp\n\n"}
{"name":"boundary_Icc","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\n‚ä¢ Eq (ModelWithCorners.boundary ‚Üë(Set.Icc x y)) (Insert.insert Bot.bot (Singleton.singleton Top.top))","decl":"lemma boundary_Icc : (ùì°‚àÇ 1).boundary (Icc x y) = {‚ä•, ‚ä§} := by\n  ext p\n  rcases Set.eq_endpoints_or_mem_Ioo_of_mem_Icc p.2 with (hp | hp | hp)\n  ¬∑ have : p = ‚ä• := SetCoe.ext hp\n    rw [this]\n    apply iff_of_true Icc_isBoundaryPoint_bot (mem_insert ‚ä• {‚ä§})\n  ¬∑ have : p = ‚ä§ := SetCoe.ext hp\n    rw [this]\n    apply iff_of_true Icc_isBoundaryPoint_top (mem_insert_of_mem ‚ä• rfl)\n  ¬∑ apply iff_of_false\n    ¬∑ simpa [‚Üê mem_compl_iff, ModelWithCorners.compl_boundary] using\n        Icc_isInteriorPoint_interior hp\n    ¬∑ rw [mem_insert_iff, mem_singleton_iff]\n      push_neg\n      constructor <;> by_contra h <;> rw [congrArg Subtype.val h] at hp\n      exacts [left_mem_Ioo.mp hp, right_mem_Ioo.mp hp]\n\n"}
{"name":"boundary_product","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\nhxy : Fact (LT.lt x y)\nE : Type u_1\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace Real E\nH : Type u_2\ninst‚úù¬≥ : TopologicalSpace H\nI : ModelWithCorners Real E H\nM : Type u_3\ninst‚úù¬≤ : TopologicalSpace M\ninst‚úù¬π : ChartedSpace H M\ninst‚úù : I.Boundaryless\n‚ä¢ Eq (ModelWithCorners.boundary (Prod M ‚Üë(Set.Icc x y))) (Set.univ.prod (Insert.insert Bot.bot (Singleton.singleton Top.top)))","decl":"/-- A product `M √ó [x,y]` for `M` boundaryless has boundary `M √ó {x, y}`. -/\nlemma boundary_product [I.Boundaryless] :\n    (I.prod (ùì°‚àÇ 1)).boundary (M √ó Icc x y) = Set.prod univ {‚ä•, ‚ä§} := by\n  rw [I.boundary_of_boundaryless_left, boundary_Icc]\n\n"}
{"name":"instIsManifoldIcc","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"x y : Real\ninst‚úù : Fact (LT.lt x y)\nn : WithTop ENat\n‚ä¢ IsManifold (modelWithCornersEuclideanHalfSpace 1) n ‚Üë(Set.Icc x y)","decl":"/-- The manifold structure on `[x, y]` is smooth. -/\ninstance instIsManifoldIcc (x y : ‚Ñù) [Fact (x < y)] {n : WithTop ‚Ñï‚àû} :\n    IsManifold (ùì°‚àÇ 1) n (Icc x y) := by\n  have M : ContDiff ‚Ñù n (show EuclideanSpace ‚Ñù (Fin 1) ‚Üí EuclideanSpace ‚Ñù (Fin 1)\n      from fun z i => -z i + (y - x)) :=\n    contDiff_id.neg.add contDiff_const\n  apply isManifold_of_contDiffOn\n  intro e e' he he'\n  simp only [atlas, mem_singleton_iff, mem_insert_iff] at he he'\n  /- We need to check that any composition of two charts gives a `C^‚àû` function. Each chart can be\n  either the left chart or the right chart, leaving 4 possibilities that we handle successively. -/\n  rcases he with (rfl | rfl) <;> rcases he' with (rfl | rfl)\n  ¬∑ -- `e = left chart`, `e' = left chart`\n    exact (mem_groupoid_of_pregroupoid.mpr (symm_trans_mem_contDiffGroupoid _)).1\n  ¬∑ -- `e = left chart`, `e' = right chart`\n    apply M.contDiffOn.congr\n    rintro _ ‚ü®‚ü®hz‚ÇÅ, hz‚ÇÇ‚ü©, ‚ü®‚ü®z, hz‚ÇÄ‚ü©, rfl‚ü©‚ü©\n    simp only [modelWithCornersEuclideanHalfSpace, IccLeftChart, IccRightChart, update_self,\n      max_eq_left, hz‚ÇÄ, lt_sub_iff_add_lt, mfld_simps] at hz‚ÇÅ hz‚ÇÇ\n    rw [min_eq_left hz‚ÇÅ.le, lt_add_iff_pos_left] at hz‚ÇÇ\n    ext i\n    rw [Subsingleton.elim i 0]\n    simp only [modelWithCornersEuclideanHalfSpace, IccLeftChart, IccRightChart, *, PiLp.add_apply,\n      PiLp.neg_apply, max_eq_left, min_eq_left hz‚ÇÅ.le, update_self, mfld_simps]\n    abel\n  ¬∑ -- `e = right chart`, `e' = left chart`\n    apply M.contDiffOn.congr\n    rintro _ ‚ü®‚ü®hz‚ÇÅ, hz‚ÇÇ‚ü©, ‚ü®z, hz‚ÇÄ‚ü©, rfl‚ü©\n    simp only [modelWithCornersEuclideanHalfSpace, IccLeftChart, IccRightChart, max_lt_iff,\n      update_self, max_eq_left hz‚ÇÄ, mfld_simps] at hz‚ÇÅ hz‚ÇÇ\n    rw [lt_sub_comm] at hz‚ÇÅ\n    ext i\n    rw [Subsingleton.elim i 0]\n    simp only [modelWithCornersEuclideanHalfSpace, IccLeftChart, IccRightChart, PiLp.add_apply,\n      PiLp.neg_apply, update_self, max_eq_left, hz‚ÇÄ, hz‚ÇÅ.le, mfld_simps]\n    abel\n  ¬∑-- `e = right chart`, `e' = right chart`\n    exact (mem_groupoid_of_pregroupoid.mpr (symm_trans_mem_contDiffGroupoid _)).1\n\n"}
{"name":"instIsManifoldRealEuclideanSpaceFinOfNatNatEuclideanHalfSpaceModelWithCornersEuclideanHalfSpaceElemIcc","module":"Mathlib.Geometry.Manifold.Instances.Real","initialProofState":"n : WithTop ENat\n‚ä¢ IsManifold (modelWithCornersEuclideanHalfSpace 1) n ‚Üë(Set.Icc 0 1)","decl":"instance {n : WithTop ‚Ñï‚àû} : IsManifold (ùì°‚àÇ 1) n (Icc (0 : ‚Ñù) 1) := by\n  infer_instance\n\n"}
