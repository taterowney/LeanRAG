{"name":"Ideal.height_eq_primeHeight","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.IsPrime\n⊢ Eq I.height I.primeHeight","decl":"/-- For a prime ideal, its height equals its prime height. -/\nlemma Ideal.height_eq_primeHeight [I.IsPrime] : I.height = I.primeHeight := by\n  unfold height primeHeight\n  simp_rw [Ideal.minimalPrimes_eq_subsingleton_self]\n  simp\n\n"}
{"name":"Ideal.FiniteHeight.eq_top_or_height_ne_top","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nI : Ideal R\nself : I.FiniteHeight\n⊢ Or (Eq I Top.top) (Ne I.height Top.top)","decl":"/-- An ideal has finite height if it is either the unit ideal or its height is finite.\nWe include the unit ideal in order to have the instance `IsNoetherianRing R → FiniteHeight I`. -/\nclass Ideal.FiniteHeight : Prop where\n  eq_top_or_height_ne_top : I = ⊤ ∨ I.height ≠ ⊤\n\n"}
{"name":"Ideal.finiteHeight_iff_lt","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nI : Ideal R\n⊢ Iff I.FiniteHeight (Or (Eq I Top.top) (LT.lt I.height Top.top))","decl":"lemma Ideal.finiteHeight_iff_lt {I : Ideal R} :\n    Ideal.FiniteHeight I ↔ I = ⊤ ∨ I.height < ⊤ := by\n  constructor\n  · intro h\n    cases h.eq_top_or_height_ne_top with\n    | inl h => exact Or.inl h\n    | inr h => exact Or.inr (lt_of_le_of_ne le_top h)\n  · intro h\n    constructor\n    cases h with\n    | inl h => exact Or.inl h\n    | inr h => exact Or.inr (ne_top_of_lt h)\n\n"}
{"name":"Ideal.height_ne_top","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nI : Ideal R\nhI : Ne I Top.top\nh : I.FiniteHeight\n⊢ Ne I.height Top.top","decl":"lemma Ideal.height_ne_top {I : Ideal R} (hI : I ≠ ⊤) [h : I.FiniteHeight] :\n    I.height ≠ ⊤ :=\n  (h.eq_top_or_height_ne_top).resolve_left hI\n\n"}
{"name":"Ideal.height_lt_top","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nI : Ideal R\nhI : Ne I Top.top\nh : I.FiniteHeight\n⊢ LT.lt I.height Top.top","decl":"lemma Ideal.height_lt_top {I : Ideal R} (hI : I ≠ ⊤) [h : I.FiniteHeight] :\n    I.height < ⊤ :=\n  lt_of_le_of_ne le_top (Ideal.height_ne_top hI)\n\n"}
{"name":"Ideal.primeHeight_ne_top","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.FiniteHeight\nh : I.IsPrime\n⊢ Ne I.primeHeight Top.top","decl":"lemma Ideal.primeHeight_ne_top (I : Ideal R) [I.FiniteHeight] [h : I.IsPrime] :\n    I.primeHeight ≠ ⊤ := by\n  rw [← I.height_eq_primeHeight]\n  exact Ideal.height_ne_top (by exact h.ne_top)\n\n"}
{"name":"Ideal.primeHeight_lt_top","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nI : Ideal R\ninst✝ : I.FiniteHeight\nh : I.IsPrime\n⊢ LT.lt I.primeHeight Top.top","decl":"lemma Ideal.primeHeight_lt_top (I : Ideal R) [I.FiniteHeight] [h : I.IsPrime] :\n    I.primeHeight < ⊤ := by\n  rw [← I.height_eq_primeHeight]\n  exact Ideal.height_lt_top (by exact h.ne_top)\n\n"}
{"name":"Ideal.primeHeight_mono","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nI J : Ideal R\ninst✝¹ : I.IsPrime\ninst✝ : J.IsPrime\nh : LE.le I J\n⊢ LE.le I.primeHeight J.primeHeight","decl":"@[gcongr]\nlemma Ideal.primeHeight_mono {I J : Ideal R} [I.IsPrime] [J.IsPrime] (h : I ≤ J) :\n    I.primeHeight ≤ J.primeHeight := by\n  unfold primeHeight\n  gcongr\n  exact h\n\n"}
{"name":"Ideal.primeHeight_add_one_le_of_lt","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nI J : Ideal R\ninst✝¹ : I.IsPrime\ninst✝ : J.IsPrime\nh : LT.lt I J\n⊢ LE.le (HAdd.hAdd I.primeHeight 1) J.primeHeight","decl":"lemma Ideal.primeHeight_add_one_le_of_lt {I J : Ideal R} [I.IsPrime] [J.IsPrime] (h : I < J) :\n    I.primeHeight + 1 ≤ J.primeHeight := by\n  unfold primeHeight\n  exact Order.height_add_one_le h\n\n"}
{"name":"Ideal.primeHeight_strict_mono","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nI J : Ideal R\ninst✝² : I.IsPrime\ninst✝¹ : J.IsPrime\nh : LT.lt I J\ninst✝ : I.FiniteHeight\n⊢ LT.lt I.primeHeight J.primeHeight","decl":"@[gcongr]\nlemma Ideal.primeHeight_strict_mono {I J : Ideal R} [I.IsPrime] [J.IsPrime]\n    (h : I < J) [I.FiniteHeight] :\n    I.primeHeight < J.primeHeight := by\n  unfold primeHeight\n  gcongr\n  · exact I.primeHeight_ne_top.lt_top\n  · exact h\n\n"}
{"name":"Ideal.height_top","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝ : CommRing R\n⊢ Eq Top.top.height Top.top","decl":"@[simp]\ntheorem Ideal.height_top : (⊤ : Ideal R).height = ⊤ := by\n  simp only [height, minimalPrimes_top]\n  rw [iInf₂_eq_top]; intro i hi; exact False.elim hi\n\n"}
{"name":"Ideal.height_mono","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nI J : Ideal R\nh : LE.le I J\n⊢ LE.le I.height J.height","decl":"@[gcongr]\ntheorem Ideal.height_mono {I J : Ideal R} (h : I ≤ J) : I.height ≤ J.height := by\n  simp only [height]\n  apply le_iInf₂; intro p hp; haveI := hp.1.1\n  obtain ⟨q, hq, e⟩ := Ideal.exists_minimalPrimes_le (h.trans hp.1.2)\n  haveI := hq.1.1\n  exact (iInf₂_le q hq).trans (Ideal.primeHeight_mono e)\n\n"}
{"name":"Ideal.height_strict_mono_of_is_prime","module":"Mathlib.RingTheory.Ideal.Height","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nI J : Ideal R\ninst✝¹ : I.IsPrime\nh : LT.lt I J\ninst✝ : I.FiniteHeight\n⊢ LT.lt I.height J.height","decl":"@[gcongr]\nlemma Ideal.height_strict_mono_of_is_prime {I J : Ideal R} [I.IsPrime]\n    (h : I < J) [I.FiniteHeight] : I.height < J.height := by\n  rw [Ideal.height_eq_primeHeight I]\n  by_cases hJ : J = ⊤\n  · rw [hJ, height_top]; exact I.primeHeight_lt_top\n  · rw [← ENat.add_one_le_iff I.primeHeight_ne_top, Ideal.height]\n    apply le_iInf₂; intro K hK; haveI := hK.1.1\n    have : I < K := lt_of_lt_of_le h hK.1.2\n    exact Ideal.primeHeight_add_one_le_of_lt this\n"}
