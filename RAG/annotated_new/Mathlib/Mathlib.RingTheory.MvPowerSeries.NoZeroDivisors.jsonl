{"name":"MvPowerSeries.mem_nonZeroDivisors_of_constantCoeff","module":"Mathlib.RingTheory.MvPowerSeries.NoZeroDivisors","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝ : Semiring R\nφ : MvPowerSeries σ R\nhφ : Membership.mem (nonZeroDivisors R) ((MvPowerSeries.constantCoeff σ R) φ)\n⊢ Membership.mem (nonZeroDivisors (MvPowerSeries σ R)) φ","decl":"/-- A multivariate power series is not a zero divisor\n  when its constant coefficient is not a zero divisor -/\ntheorem mem_nonZeroDivisors_of_constantCoeff {φ : MvPowerSeries σ R}\n    (hφ : constantCoeff σ R φ ∈ nonZeroDivisors R) :\n    φ ∈ nonZeroDivisors (MvPowerSeries σ R) := by\n  classical\n  intro x hx\n  ext d\n  apply WellFoundedLT.induction d\n  intro e he\n  rw [map_zero, ← mul_right_mem_nonZeroDivisors_eq_zero_iff hφ, ← map_zero (f := coeff R e), ← hx]\n  convert (coeff_mul e x φ).symm\n  rw [Finset.sum_eq_single (e,0), coeff_zero_eq_constantCoeff]\n  · rintro ⟨u, _⟩ huv _\n    suffices u < e by simp only [he u this, zero_mul, map_zero]\n    apply lt_of_le_of_ne\n    · simp only [← mem_antidiagonal.mp huv, le_add_iff_nonneg_right, zero_le]\n    · rintro rfl\n      simp_all\n  · simp only [mem_antidiagonal, add_zero, not_true_eq_false, coeff_zero_eq_constantCoeff,\n      false_implies]\n\n"}
{"name":"MvPowerSeries.instNoZeroDivisors","module":"Mathlib.RingTheory.MvPowerSeries.NoZeroDivisors","initialProofState":"σ : Type u_3\nR : Type u_4\ninst✝¹ : Semiring R\ninst✝ : NoZeroDivisors R\n⊢ NoZeroDivisors (MvPowerSeries σ R)","decl":"instance {σ R : Type*} [Semiring R] [NoZeroDivisors R] :\n    NoZeroDivisors (MvPowerSeries σ R) where\n  eq_zero_or_eq_zero_of_mul_eq_zero {φ ψ} h := by\n    letI : LinearOrder σ := LinearOrder.swap σ WellOrderingRel.isWellOrder.linearOrder\n    letI : WellFoundedGT σ := by\n      change IsWellFounded σ fun x y ↦ WellOrderingRel x y\n      exact IsWellOrder.toIsWellFounded\n    simpa only [← lexOrder_eq_top_iff_eq_zero, lexOrder_mul, WithTop.add_eq_top] using h\n\n"}
