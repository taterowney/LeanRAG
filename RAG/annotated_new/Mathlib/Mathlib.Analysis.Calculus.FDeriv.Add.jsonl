{"name":"HasStrictFDerivAt.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : HasStrictFDerivAt f f' x\nc : R\n⊢ HasStrictFDerivAt (fun x => HSMul.hSMul c (f x)) (HSMul.hSMul c f') x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.const_smul (h : HasStrictFDerivAt f f' x) (c : R) :\n    HasStrictFDerivAt (fun x => c • f x) (c • f') x :=\n  (c • (1 : F →L[𝕜] F)).hasStrictFDerivAt.comp x h\n\n"}
{"name":"HasFDerivAtFilter.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : HasFDerivAtFilter f f' x L\nc : R\n⊢ HasFDerivAtFilter (fun x => HSMul.hSMul c (f x)) (HSMul.hSMul c f') x L","decl":"theorem HasFDerivAtFilter.const_smul (h : HasFDerivAtFilter f f' x L) (c : R) :\n    HasFDerivAtFilter (fun x => c • f x) (c • f') x L :=\n  (c • (1 : F →L[𝕜] F)).hasFDerivAtFilter.comp x h tendsto_map\n\n"}
{"name":"HasFDerivWithinAt.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : HasFDerivWithinAt f f' s x\nc : R\n⊢ HasFDerivWithinAt (fun x => HSMul.hSMul c (f x)) (HSMul.hSMul c f') s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.const_smul (h : HasFDerivWithinAt f f' s x) (c : R) :\n    HasFDerivWithinAt (fun x => c • f x) (c • f') s x :=\n  h.const_smul c\n\n"}
{"name":"HasFDerivAt.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : HasFDerivAt f f' x\nc : R\n⊢ HasFDerivAt (fun x => HSMul.hSMul c (f x)) (HSMul.hSMul c f') x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.const_smul (h : HasFDerivAt f f' x) (c : R) :\n    HasFDerivAt (fun x => c • f x) (c • f') x :=\n  h.const_smul c\n\n"}
{"name":"DifferentiableWithinAt.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : DifferentiableWithinAt 𝕜 f s x\nc : R\n⊢ DifferentiableWithinAt 𝕜 (fun y => HSMul.hSMul c (f y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.const_smul (h : DifferentiableWithinAt 𝕜 f s x) (c : R) :\n    DifferentiableWithinAt 𝕜 (fun y => c • f y) s x :=\n  (h.hasFDerivWithinAt.const_smul c).differentiableWithinAt\n\n"}
{"name":"DifferentiableAt.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nx : E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : DifferentiableAt 𝕜 f x\nc : R\n⊢ DifferentiableAt 𝕜 (fun y => HSMul.hSMul c (f y)) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.const_smul (h : DifferentiableAt 𝕜 f x) (c : R) :\n    DifferentiableAt 𝕜 (fun y => c • f y) x :=\n  (h.hasFDerivAt.const_smul c).differentiableAt\n\n"}
{"name":"DifferentiableOn.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : DifferentiableOn 𝕜 f s\nc : R\n⊢ DifferentiableOn 𝕜 (fun y => HSMul.hSMul c (f y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.const_smul (h : DifferentiableOn 𝕜 f s) (c : R) :\n    DifferentiableOn 𝕜 (fun y => c • f y) s := fun x hx => (h x hx).const_smul c\n\n"}
{"name":"Differentiable.const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : Differentiable 𝕜 f\nc : R\n⊢ Differentiable 𝕜 fun y => HSMul.hSMul c (f y)","decl":"@[fun_prop]\ntheorem Differentiable.const_smul (h : Differentiable 𝕜 f) (c : R) :\n    Differentiable 𝕜 fun y => c • f y := fun x => (h x).const_smul c\n\n"}
{"name":"fderivWithin_const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nhxs : UniqueDiffWithinAt 𝕜 s x\nh : DifferentiableWithinAt 𝕜 f s x\nc : R\n⊢ Eq (fderivWithin 𝕜 (fun y => HSMul.hSMul c (f y)) s x) (HSMul.hSMul c (fderivWithin 𝕜 f s x))","decl":"theorem fderivWithin_const_smul (hxs : UniqueDiffWithinAt 𝕜 s x)\n    (h : DifferentiableWithinAt 𝕜 f s x) (c : R) :\n    fderivWithin 𝕜 (fun y => c • f y) s x = c • fderivWithin 𝕜 f s x :=\n  (h.hasFDerivWithinAt.const_smul c).fderivWithin hxs\n\n"}
{"name":"fderivWithin_const_smul'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nhxs : UniqueDiffWithinAt 𝕜 s x\nh : DifferentiableWithinAt 𝕜 f s x\nc : R\n⊢ Eq (fderivWithin 𝕜 (HSMul.hSMul c f) s x) (HSMul.hSMul c (fderivWithin 𝕜 f s x))","decl":"/-- Version of `fderivWithin_const_smul` written with `c • f` instead of `fun y ↦ c • f y`. -/\ntheorem fderivWithin_const_smul' (hxs : UniqueDiffWithinAt 𝕜 s x)\n    (h : DifferentiableWithinAt 𝕜 f s x) (c : R) :\n    fderivWithin 𝕜 (c • f) s x = c • fderivWithin 𝕜 f s x :=\n  fderivWithin_const_smul hxs h c\n\n"}
{"name":"fderiv_const_smul","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nx : E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : DifferentiableAt 𝕜 f x\nc : R\n⊢ Eq (fderiv 𝕜 (fun y => HSMul.hSMul c (f y)) x) (HSMul.hSMul c (fderiv 𝕜 f x))","decl":"theorem fderiv_const_smul (h : DifferentiableAt 𝕜 f x) (c : R) :\n    fderiv 𝕜 (fun y => c • f y) x = c • fderiv 𝕜 f x :=\n  (h.hasFDerivAt.const_smul c).fderiv\n\n"}
{"name":"fderiv_const_smul'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nf : E → F\nx : E\nR : Type u_4\ninst✝³ : Semiring R\ninst✝² : Module R F\ninst✝¹ : SMulCommClass 𝕜 R F\ninst✝ : ContinuousConstSMul R F\nh : DifferentiableAt 𝕜 f x\nc : R\n⊢ Eq (fderiv 𝕜 (HSMul.hSMul c f) x) (HSMul.hSMul c (fderiv 𝕜 f x))","decl":"/-- Version of `fderiv_const_smul` written with `c • f` instead of `fun y ↦ c • f y`. -/\ntheorem fderiv_const_smul' (h : DifferentiableAt 𝕜 f x) (c : R) :\n    fderiv 𝕜 (c • f) x = c • fderiv 𝕜 f x :=\n  (h.hasFDerivAt.const_smul c).fderiv\n\n"}
{"name":"HasStrictFDerivAt.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasStrictFDerivAt f f' x\nhg : HasStrictFDerivAt g g' x\n⊢ HasStrictFDerivAt (fun y => HAdd.hAdd (f y) (g y)) (HAdd.hAdd f' g') x","decl":"@[fun_prop]\nnonrec theorem HasStrictFDerivAt.add (hf : HasStrictFDerivAt f f' x)\n    (hg : HasStrictFDerivAt g g' x) : HasStrictFDerivAt (fun y => f y + g y) (f' + g') x :=\n   .of_isLittleO <| (hf.isLittleO.add hg.isLittleO).congr_left fun y => by\n    simp only [LinearMap.sub_apply, LinearMap.add_apply, map_sub, map_add, add_apply]\n    abel\n\n"}
{"name":"HasFDerivAtFilter.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nhf : HasFDerivAtFilter f f' x L\nhg : HasFDerivAtFilter g g' x L\n⊢ HasFDerivAtFilter (fun y => HAdd.hAdd (f y) (g y)) (HAdd.hAdd f' g') x L","decl":"theorem HasFDerivAtFilter.add (hf : HasFDerivAtFilter f f' x L)\n    (hg : HasFDerivAtFilter g g' x L) : HasFDerivAtFilter (fun y => f y + g y) (f' + g') x L :=\n  .of_isLittleO <| (hf.isLittleO.add hg.isLittleO).congr_left fun _ => by\n    simp only [LinearMap.sub_apply, LinearMap.add_apply, map_sub, map_add, add_apply]\n    abel\n\n"}
{"name":"HasFDerivWithinAt.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\nhg : HasFDerivWithinAt g g' s x\n⊢ HasFDerivWithinAt (fun y => HAdd.hAdd (f y) (g y)) (HAdd.hAdd f' g') s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.add (hf : HasFDerivWithinAt f f' s x)\n    (hg : HasFDerivWithinAt g g' s x) : HasFDerivWithinAt (fun y => f y + g y) (f' + g') s x :=\n  hf.add hg\n\n"}
{"name":"HasFDerivAt.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasFDerivAt f f' x\nhg : HasFDerivAt g g' x\n⊢ HasFDerivAt (fun x => HAdd.hAdd (f x) (g x)) (HAdd.hAdd f' g') x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.add (hf : HasFDerivAt f f' x) (hg : HasFDerivAt g g' x) :\n    HasFDerivAt (fun x => f x + g x) (f' + g') x :=\n  hf.add hg\n\n"}
{"name":"DifferentiableWithinAt.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\ns : Set E\nhf : DifferentiableWithinAt 𝕜 f s x\nhg : DifferentiableWithinAt 𝕜 g s x\n⊢ DifferentiableWithinAt 𝕜 (fun y => HAdd.hAdd (f y) (g y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.add (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hg : DifferentiableWithinAt 𝕜 g s x) : DifferentiableWithinAt 𝕜 (fun y => f y + g y) s x :=\n  (hf.hasFDerivWithinAt.add hg.hasFDerivWithinAt).differentiableWithinAt\n\n"}
{"name":"DifferentiableAt.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nhg : DifferentiableAt 𝕜 g x\n⊢ DifferentiableAt 𝕜 (fun y => HAdd.hAdd (f y) (g y)) x","decl":"@[simp, fun_prop]\ntheorem DifferentiableAt.add (hf : DifferentiableAt 𝕜 f x) (hg : DifferentiableAt 𝕜 g x) :\n    DifferentiableAt 𝕜 (fun y => f y + g y) x :=\n  (hf.hasFDerivAt.add hg.hasFDerivAt).differentiableAt\n\n"}
{"name":"DifferentiableOn.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\ns : Set E\nhf : DifferentiableOn 𝕜 f s\nhg : DifferentiableOn 𝕜 g s\n⊢ DifferentiableOn 𝕜 (fun y => HAdd.hAdd (f y) (g y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.add (hf : DifferentiableOn 𝕜 f s) (hg : DifferentiableOn 𝕜 g s) :\n    DifferentiableOn 𝕜 (fun y => f y + g y) s := fun x hx => (hf x hx).add (hg x hx)\n\n"}
{"name":"Differentiable.add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nhf : Differentiable 𝕜 f\nhg : Differentiable 𝕜 g\n⊢ Differentiable 𝕜 fun y => HAdd.hAdd (f y) (g y)","decl":"@[simp, fun_prop]\ntheorem Differentiable.add (hf : Differentiable 𝕜 f) (hg : Differentiable 𝕜 g) :\n    Differentiable 𝕜 fun y => f y + g y := fun x => (hf x).add (hg x)\n\n"}
{"name":"fderivWithin_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nhf : DifferentiableWithinAt 𝕜 f s x\nhg : DifferentiableWithinAt 𝕜 g s x\n⊢ Eq (fderivWithin 𝕜 (fun y => HAdd.hAdd (f y) (g y)) s x) (HAdd.hAdd (fderivWithin 𝕜 f s x) (fderivWithin 𝕜 g s x))","decl":"theorem fderivWithin_add (hxs : UniqueDiffWithinAt 𝕜 s x) (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hg : DifferentiableWithinAt 𝕜 g s x) :\n    fderivWithin 𝕜 (fun y => f y + g y) s x = fderivWithin 𝕜 f s x + fderivWithin 𝕜 g s x :=\n  (hf.hasFDerivWithinAt.add hg.hasFDerivWithinAt).fderivWithin hxs\n\n"}
{"name":"fderivWithin_add'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nhf : DifferentiableWithinAt 𝕜 f s x\nhg : DifferentiableWithinAt 𝕜 g s x\n⊢ Eq (fderivWithin 𝕜 (HAdd.hAdd f g) s x) (HAdd.hAdd (fderivWithin 𝕜 f s x) (fderivWithin 𝕜 g s x))","decl":"/-- Version of `fderivWithin_add` where the function is written as `f + g` instead\nof `fun y ↦ f y + g y`. -/\ntheorem fderivWithin_add' (hxs : UniqueDiffWithinAt 𝕜 s x) (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hg : DifferentiableWithinAt 𝕜 g s x) :\n    fderivWithin 𝕜 (f + g) s x = fderivWithin 𝕜 f s x + fderivWithin 𝕜 g s x :=\n  fderivWithin_add hxs hf hg\n\n"}
{"name":"fderiv_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nhg : DifferentiableAt 𝕜 g x\n⊢ Eq (fderiv 𝕜 (fun y => HAdd.hAdd (f y) (g y)) x) (HAdd.hAdd (fderiv 𝕜 f x) (fderiv 𝕜 g x))","decl":"theorem fderiv_add (hf : DifferentiableAt 𝕜 f x) (hg : DifferentiableAt 𝕜 g x) :\n    fderiv 𝕜 (fun y => f y + g y) x = fderiv 𝕜 f x + fderiv 𝕜 g x :=\n  (hf.hasFDerivAt.add hg.hasFDerivAt).fderiv\n\n"}
{"name":"fderiv_add'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nhg : DifferentiableAt 𝕜 g x\n⊢ Eq (fderiv 𝕜 (HAdd.hAdd f g) x) (HAdd.hAdd (fderiv 𝕜 f x) (fderiv 𝕜 g x))","decl":"/-- Version of `fderiv_add` where the function is written as `f + g` instead\nof `fun y ↦ f y + g y`. -/\ntheorem fderiv_add' (hf : DifferentiableAt 𝕜 f x) (hg : DifferentiableAt 𝕜 g x) :\n    fderiv 𝕜 (f + g) x = fderiv 𝕜 f x + fderiv 𝕜 g x :=\n  fderiv_add hf hg\n\n"}
{"name":"HasStrictFDerivAt.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasStrictFDerivAt f f' x\nc : F\n⊢ HasStrictFDerivAt (fun y => HAdd.hAdd (f y) c) f' x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.add_const (hf : HasStrictFDerivAt f f' x) (c : F) :\n    HasStrictFDerivAt (fun y => f y + c) f' x :=\n  add_zero f' ▸ hf.add (hasStrictFDerivAt_const _ _)\n\n"}
{"name":"HasFDerivAtFilter.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nhf : HasFDerivAtFilter f f' x L\nc : F\n⊢ HasFDerivAtFilter (fun y => HAdd.hAdd (f y) c) f' x L","decl":"theorem HasFDerivAtFilter.add_const (hf : HasFDerivAtFilter f f' x L) (c : F) :\n    HasFDerivAtFilter (fun y => f y + c) f' x L :=\n  add_zero f' ▸ hf.add (hasFDerivAtFilter_const _ _ _)\n\n"}
{"name":"HasFDerivWithinAt.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\nc : F\n⊢ HasFDerivWithinAt (fun y => HAdd.hAdd (f y) c) f' s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.add_const (hf : HasFDerivWithinAt f f' s x) (c : F) :\n    HasFDerivWithinAt (fun y => f y + c) f' s x :=\n  hf.add_const c\n\n"}
{"name":"HasFDerivAt.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasFDerivAt f f' x\nc : F\n⊢ HasFDerivAt (fun x => HAdd.hAdd (f x) c) f' x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.add_const (hf : HasFDerivAt f f' x) (c : F) :\n    HasFDerivAt (fun x => f x + c) f' x :=\n  hf.add_const c\n\n"}
{"name":"DifferentiableWithinAt.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhf : DifferentiableWithinAt 𝕜 f s x\nc : F\n⊢ DifferentiableWithinAt 𝕜 (fun y => HAdd.hAdd (f y) c) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.add_const (hf : DifferentiableWithinAt 𝕜 f s x) (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => f y + c) s x :=\n  (hf.hasFDerivWithinAt.add_const c).differentiableWithinAt\n\n"}
{"name":"differentiableWithinAt_add_const_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nc : F\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun y => HAdd.hAdd (f y) c) s x) (DifferentiableWithinAt 𝕜 f s x)","decl":"@[simp]\ntheorem differentiableWithinAt_add_const_iff (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => f y + c) s x ↔ DifferentiableWithinAt 𝕜 f s x :=\n  ⟨fun h => by simpa using h.add_const (-c), fun h => h.add_const c⟩\n\n"}
{"name":"DifferentiableAt.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nc : F\n⊢ DifferentiableAt 𝕜 (fun y => HAdd.hAdd (f y) c) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.add_const (hf : DifferentiableAt 𝕜 f x) (c : F) :\n    DifferentiableAt 𝕜 (fun y => f y + c) x :=\n  (hf.hasFDerivAt.add_const c).differentiableAt\n\n"}
{"name":"differentiableAt_add_const_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nc : F\n⊢ Iff (DifferentiableAt 𝕜 (fun y => HAdd.hAdd (f y) c) x) (DifferentiableAt 𝕜 f x)","decl":"@[simp]\ntheorem differentiableAt_add_const_iff (c : F) :\n    DifferentiableAt 𝕜 (fun y => f y + c) x ↔ DifferentiableAt 𝕜 f x :=\n  ⟨fun h => by simpa using h.add_const (-c), fun h => h.add_const c⟩\n\n"}
{"name":"DifferentiableOn.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nhf : DifferentiableOn 𝕜 f s\nc : F\n⊢ DifferentiableOn 𝕜 (fun y => HAdd.hAdd (f y) c) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.add_const (hf : DifferentiableOn 𝕜 f s) (c : F) :\n    DifferentiableOn 𝕜 (fun y => f y + c) s := fun x hx => (hf x hx).add_const c\n\n"}
{"name":"differentiableOn_add_const_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nc : F\n⊢ Iff (DifferentiableOn 𝕜 (fun y => HAdd.hAdd (f y) c) s) (DifferentiableOn 𝕜 f s)","decl":"@[simp]\ntheorem differentiableOn_add_const_iff (c : F) :\n    DifferentiableOn 𝕜 (fun y => f y + c) s ↔ DifferentiableOn 𝕜 f s :=\n  ⟨fun h => by simpa using h.add_const (-c), fun h => h.add_const c⟩\n\n"}
{"name":"Differentiable.add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nhf : Differentiable 𝕜 f\nc : F\n⊢ Differentiable 𝕜 fun y => HAdd.hAdd (f y) c","decl":"@[fun_prop]\ntheorem Differentiable.add_const (hf : Differentiable 𝕜 f) (c : F) :\n    Differentiable 𝕜 fun y => f y + c := fun x => (hf x).add_const c\n\n"}
{"name":"differentiable_add_const_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nc : F\n⊢ Iff (Differentiable 𝕜 fun y => HAdd.hAdd (f y) c) (Differentiable 𝕜 f)","decl":"@[simp]\ntheorem differentiable_add_const_iff (c : F) :\n    (Differentiable 𝕜 fun y => f y + c) ↔ Differentiable 𝕜 f :=\n  ⟨fun h => by simpa using h.add_const (-c), fun h => h.add_const c⟩\n\n"}
{"name":"fderivWithin_add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nc : F\n⊢ Eq (fderivWithin 𝕜 (fun y => HAdd.hAdd (f y) c) s x) (fderivWithin 𝕜 f s x)","decl":"theorem fderivWithin_add_const (hxs : UniqueDiffWithinAt 𝕜 s x) (c : F) :\n    fderivWithin 𝕜 (fun y => f y + c) s x = fderivWithin 𝕜 f s x := by\n  classical\n  by_cases hf : DifferentiableWithinAt 𝕜 f s x\n  · exact (hf.hasFDerivWithinAt.add_const c).fderivWithin hxs\n  · rw [fderivWithin_zero_of_not_differentiableWithinAt hf,\n      fderivWithin_zero_of_not_differentiableWithinAt]\n    simpa\n\n"}
{"name":"fderiv_add_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nc : F\n⊢ Eq (fderiv 𝕜 (fun y => HAdd.hAdd (f y) c) x) (fderiv 𝕜 f x)","decl":"theorem fderiv_add_const (c : F) : fderiv 𝕜 (fun y => f y + c) x = fderiv 𝕜 f x := by\n  simp only [← fderivWithin_univ, fderivWithin_add_const uniqueDiffWithinAt_univ]\n\n"}
{"name":"HasStrictFDerivAt.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasStrictFDerivAt f f' x\nc : F\n⊢ HasStrictFDerivAt (fun y => HAdd.hAdd c (f y)) f' x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.const_add (hf : HasStrictFDerivAt f f' x) (c : F) :\n    HasStrictFDerivAt (fun y => c + f y) f' x :=\n  zero_add f' ▸ (hasStrictFDerivAt_const _ _).add hf\n\n"}
{"name":"HasFDerivAtFilter.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nhf : HasFDerivAtFilter f f' x L\nc : F\n⊢ HasFDerivAtFilter (fun y => HAdd.hAdd c (f y)) f' x L","decl":"theorem HasFDerivAtFilter.const_add (hf : HasFDerivAtFilter f f' x L) (c : F) :\n    HasFDerivAtFilter (fun y => c + f y) f' x L :=\n  zero_add f' ▸ (hasFDerivAtFilter_const _ _ _).add hf\n\n"}
{"name":"HasFDerivWithinAt.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\nc : F\n⊢ HasFDerivWithinAt (fun y => HAdd.hAdd c (f y)) f' s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.const_add (hf : HasFDerivWithinAt f f' s x) (c : F) :\n    HasFDerivWithinAt (fun y => c + f y) f' s x :=\n  hf.const_add c\n\n"}
{"name":"HasFDerivAt.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasFDerivAt f f' x\nc : F\n⊢ HasFDerivAt (fun x => HAdd.hAdd c (f x)) f' x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.const_add (hf : HasFDerivAt f f' x) (c : F) :\n    HasFDerivAt (fun x => c + f x) f' x :=\n  hf.const_add c\n\n"}
{"name":"DifferentiableWithinAt.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhf : DifferentiableWithinAt 𝕜 f s x\nc : F\n⊢ DifferentiableWithinAt 𝕜 (fun y => HAdd.hAdd c (f y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.const_add (hf : DifferentiableWithinAt 𝕜 f s x) (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => c + f y) s x :=\n  (hf.hasFDerivWithinAt.const_add c).differentiableWithinAt\n\n"}
{"name":"differentiableWithinAt_const_add_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nc : F\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun y => HAdd.hAdd c (f y)) s x) (DifferentiableWithinAt 𝕜 f s x)","decl":"@[simp]\ntheorem differentiableWithinAt_const_add_iff (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => c + f y) s x ↔ DifferentiableWithinAt 𝕜 f s x :=\n  ⟨fun h => by simpa using h.const_add (-c), fun h => h.const_add c⟩\n\n"}
{"name":"DifferentiableAt.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nc : F\n⊢ DifferentiableAt 𝕜 (fun y => HAdd.hAdd c (f y)) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.const_add (hf : DifferentiableAt 𝕜 f x) (c : F) :\n    DifferentiableAt 𝕜 (fun y => c + f y) x :=\n  (hf.hasFDerivAt.const_add c).differentiableAt\n\n"}
{"name":"differentiableAt_const_add_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nc : F\n⊢ Iff (DifferentiableAt 𝕜 (fun y => HAdd.hAdd c (f y)) x) (DifferentiableAt 𝕜 f x)","decl":"@[simp]\ntheorem differentiableAt_const_add_iff (c : F) :\n    DifferentiableAt 𝕜 (fun y => c + f y) x ↔ DifferentiableAt 𝕜 f x :=\n  ⟨fun h => by simpa using h.const_add (-c), fun h => h.const_add c⟩\n\n"}
{"name":"DifferentiableOn.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nhf : DifferentiableOn 𝕜 f s\nc : F\n⊢ DifferentiableOn 𝕜 (fun y => HAdd.hAdd c (f y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.const_add (hf : DifferentiableOn 𝕜 f s) (c : F) :\n    DifferentiableOn 𝕜 (fun y => c + f y) s := fun x hx => (hf x hx).const_add c\n\n"}
{"name":"differentiableOn_const_add_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nc : F\n⊢ Iff (DifferentiableOn 𝕜 (fun y => HAdd.hAdd c (f y)) s) (DifferentiableOn 𝕜 f s)","decl":"@[simp]\ntheorem differentiableOn_const_add_iff (c : F) :\n    DifferentiableOn 𝕜 (fun y => c + f y) s ↔ DifferentiableOn 𝕜 f s :=\n  ⟨fun h => by simpa using h.const_add (-c), fun h => h.const_add c⟩\n\n"}
{"name":"Differentiable.const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nhf : Differentiable 𝕜 f\nc : F\n⊢ Differentiable 𝕜 fun y => HAdd.hAdd c (f y)","decl":"@[fun_prop]\ntheorem Differentiable.const_add (hf : Differentiable 𝕜 f) (c : F) :\n    Differentiable 𝕜 fun y => c + f y := fun x => (hf x).const_add c\n\n"}
{"name":"differentiable_const_add_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nc : F\n⊢ Iff (Differentiable 𝕜 fun y => HAdd.hAdd c (f y)) (Differentiable 𝕜 f)","decl":"@[simp]\ntheorem differentiable_const_add_iff (c : F) :\n    (Differentiable 𝕜 fun y => c + f y) ↔ Differentiable 𝕜 f :=\n  ⟨fun h => by simpa using h.const_add (-c), fun h => h.const_add c⟩\n\n"}
{"name":"fderivWithin_const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nc : F\n⊢ Eq (fderivWithin 𝕜 (fun y => HAdd.hAdd c (f y)) s x) (fderivWithin 𝕜 f s x)","decl":"theorem fderivWithin_const_add (hxs : UniqueDiffWithinAt 𝕜 s x) (c : F) :\n    fderivWithin 𝕜 (fun y => c + f y) s x = fderivWithin 𝕜 f s x := by\n  simpa only [add_comm] using fderivWithin_add_const hxs c\n\n"}
{"name":"fderiv_const_add","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nc : F\n⊢ Eq (fderiv 𝕜 (fun y => HAdd.hAdd c (f y)) x) (fderiv 𝕜 f x)","decl":"theorem fderiv_const_add (c : F) : fderiv 𝕜 (fun y => c + f y) x = fderiv 𝕜 f x := by\n  simp only [add_comm c, fderiv_add_const]\n\n"}
{"name":"HasStrictFDerivAt.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nA' : ι → ContinuousLinearMap (RingHom.id 𝕜) E F\nh : ∀ (i : ι), Membership.mem u i → HasStrictFDerivAt (A i) (A' i) x\n⊢ HasStrictFDerivAt (fun y => u.sum fun i => A i y) (u.sum fun i => A' i) x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.sum (h : ∀ i ∈ u, HasStrictFDerivAt (A i) (A' i) x) :\n    HasStrictFDerivAt (fun y => ∑ i ∈ u, A i y) (∑ i ∈ u, A' i) x := by\n  simp only [hasStrictFDerivAt_iff_isLittleO] at *\n  convert IsLittleO.sum h\n  simp [Finset.sum_sub_distrib, ContinuousLinearMap.sum_apply]\n\n"}
{"name":"HasFDerivAtFilter.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\nL : Filter E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nA' : ι → ContinuousLinearMap (RingHom.id 𝕜) E F\nh : ∀ (i : ι), Membership.mem u i → HasFDerivAtFilter (A i) (A' i) x L\n⊢ HasFDerivAtFilter (fun y => u.sum fun i => A i y) (u.sum fun i => A' i) x L","decl":"theorem HasFDerivAtFilter.sum (h : ∀ i ∈ u, HasFDerivAtFilter (A i) (A' i) x L) :\n    HasFDerivAtFilter (fun y => ∑ i ∈ u, A i y) (∑ i ∈ u, A' i) x L := by\n  simp only [hasFDerivAtFilter_iff_isLittleO] at *\n  convert IsLittleO.sum h\n  simp [ContinuousLinearMap.sum_apply]\n\n"}
{"name":"HasFDerivWithinAt.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\ns : Set E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nA' : ι → ContinuousLinearMap (RingHom.id 𝕜) E F\nh : ∀ (i : ι), Membership.mem u i → HasFDerivWithinAt (A i) (A' i) s x\n⊢ HasFDerivWithinAt (fun y => u.sum fun i => A i y) (u.sum fun i => A' i) s x","decl":"@[fun_prop]\ntheorem HasFDerivWithinAt.sum (h : ∀ i ∈ u, HasFDerivWithinAt (A i) (A' i) s x) :\n    HasFDerivWithinAt (fun y => ∑ i ∈ u, A i y) (∑ i ∈ u, A' i) s x :=\n  HasFDerivAtFilter.sum h\n\n"}
{"name":"HasFDerivAt.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nA' : ι → ContinuousLinearMap (RingHom.id 𝕜) E F\nh : ∀ (i : ι), Membership.mem u i → HasFDerivAt (A i) (A' i) x\n⊢ HasFDerivAt (fun y => u.sum fun i => A i y) (u.sum fun i => A' i) x","decl":"@[fun_prop]\ntheorem HasFDerivAt.sum (h : ∀ i ∈ u, HasFDerivAt (A i) (A' i) x) :\n    HasFDerivAt (fun y => ∑ i ∈ u, A i y) (∑ i ∈ u, A' i) x :=\n  HasFDerivAtFilter.sum h\n\n"}
{"name":"DifferentiableWithinAt.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\ns : Set E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nh : ∀ (i : ι), Membership.mem u i → DifferentiableWithinAt 𝕜 (A i) s x\n⊢ DifferentiableWithinAt 𝕜 (fun y => u.sum fun i => A i y) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.sum (h : ∀ i ∈ u, DifferentiableWithinAt 𝕜 (A i) s x) :\n    DifferentiableWithinAt 𝕜 (fun y => ∑ i ∈ u, A i y) s x :=\n  HasFDerivWithinAt.differentiableWithinAt <|\n    HasFDerivWithinAt.sum fun i hi => (h i hi).hasFDerivWithinAt\n\n"}
{"name":"DifferentiableAt.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nh : ∀ (i : ι), Membership.mem u i → DifferentiableAt 𝕜 (A i) x\n⊢ DifferentiableAt 𝕜 (fun y => u.sum fun i => A i y) x","decl":"@[simp, fun_prop]\ntheorem DifferentiableAt.sum (h : ∀ i ∈ u, DifferentiableAt 𝕜 (A i) x) :\n    DifferentiableAt 𝕜 (fun y => ∑ i ∈ u, A i y) x :=\n  HasFDerivAt.differentiableAt <| HasFDerivAt.sum fun i hi => (h i hi).hasFDerivAt\n\n"}
{"name":"DifferentiableOn.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nh : ∀ (i : ι), Membership.mem u i → DifferentiableOn 𝕜 (A i) s\n⊢ DifferentiableOn 𝕜 (fun y => u.sum fun i => A i y) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.sum (h : ∀ i ∈ u, DifferentiableOn 𝕜 (A i) s) :\n    DifferentiableOn 𝕜 (fun y => ∑ i ∈ u, A i y) s := fun x hx =>\n  DifferentiableWithinAt.sum fun i hi => h i hi x hx\n\n"}
{"name":"Differentiable.sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nh : ∀ (i : ι), Membership.mem u i → Differentiable 𝕜 (A i)\n⊢ Differentiable 𝕜 fun y => u.sum fun i => A i y","decl":"@[simp, fun_prop]\ntheorem Differentiable.sum (h : ∀ i ∈ u, Differentiable 𝕜 (A i)) :\n    Differentiable 𝕜 fun y => ∑ i ∈ u, A i y := fun x => DifferentiableAt.sum fun i hi => h i hi x\n\n"}
{"name":"fderivWithin_sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\ns : Set E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nhxs : UniqueDiffWithinAt 𝕜 s x\nh : ∀ (i : ι), Membership.mem u i → DifferentiableWithinAt 𝕜 (A i) s x\n⊢ Eq (fderivWithin 𝕜 (fun y => u.sum fun i => A i y) s x) (u.sum fun i => fderivWithin 𝕜 (A i) s x)","decl":"theorem fderivWithin_sum (hxs : UniqueDiffWithinAt 𝕜 s x)\n    (h : ∀ i ∈ u, DifferentiableWithinAt 𝕜 (A i) s x) :\n    fderivWithin 𝕜 (fun y => ∑ i ∈ u, A i y) s x = ∑ i ∈ u, fderivWithin 𝕜 (A i) s x :=\n  (HasFDerivWithinAt.sum fun i hi => (h i hi).hasFDerivWithinAt).fderivWithin hxs\n\n"}
{"name":"fderiv_sum","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx : E\nι : Type u_4\nu : Finset ι\nA : ι → E → F\nh : ∀ (i : ι), Membership.mem u i → DifferentiableAt 𝕜 (A i) x\n⊢ Eq (fderiv 𝕜 (fun y => u.sum fun i => A i y) x) (u.sum fun i => fderiv 𝕜 (A i) x)","decl":"theorem fderiv_sum (h : ∀ i ∈ u, DifferentiableAt 𝕜 (A i) x) :\n    fderiv 𝕜 (fun y => ∑ i ∈ u, A i y) x = ∑ i ∈ u, fderiv 𝕜 (A i) x :=\n  (HasFDerivAt.sum fun i hi => (h i hi).hasFDerivAt).fderiv\n\n"}
{"name":"HasStrictFDerivAt.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nh : HasStrictFDerivAt f f' x\n⊢ HasStrictFDerivAt (fun x => Neg.neg (f x)) (Neg.neg f') x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.neg (h : HasStrictFDerivAt f f' x) :\n    HasStrictFDerivAt (fun x => -f x) (-f') x :=\n  (-1 : F →L[𝕜] F).hasStrictFDerivAt.comp x h\n\n"}
{"name":"HasFDerivAtFilter.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nh : HasFDerivAtFilter f f' x L\n⊢ HasFDerivAtFilter (fun x => Neg.neg (f x)) (Neg.neg f') x L","decl":"theorem HasFDerivAtFilter.neg (h : HasFDerivAtFilter f f' x L) :\n    HasFDerivAtFilter (fun x => -f x) (-f') x L :=\n  (-1 : F →L[𝕜] F).hasFDerivAtFilter.comp x h tendsto_map\n\n"}
{"name":"HasFDerivWithinAt.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nh : HasFDerivWithinAt f f' s x\n⊢ HasFDerivWithinAt (fun x => Neg.neg (f x)) (Neg.neg f') s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.neg (h : HasFDerivWithinAt f f' s x) :\n    HasFDerivWithinAt (fun x => -f x) (-f') s x :=\n  h.neg\n\n"}
{"name":"HasFDerivAt.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nh : HasFDerivAt f f' x\n⊢ HasFDerivAt (fun x => Neg.neg (f x)) (Neg.neg f') x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.neg (h : HasFDerivAt f f' x) : HasFDerivAt (fun x => -f x) (-f') x :=\n  h.neg\n\n"}
{"name":"DifferentiableWithinAt.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nh : DifferentiableWithinAt 𝕜 f s x\n⊢ DifferentiableWithinAt 𝕜 (fun y => Neg.neg (f y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.neg (h : DifferentiableWithinAt 𝕜 f s x) :\n    DifferentiableWithinAt 𝕜 (fun y => -f y) s x :=\n  h.hasFDerivWithinAt.neg.differentiableWithinAt\n\n"}
{"name":"differentiableWithinAt_neg_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun y => Neg.neg (f y)) s x) (DifferentiableWithinAt 𝕜 f s x)","decl":"@[simp]\ntheorem differentiableWithinAt_neg_iff :\n    DifferentiableWithinAt 𝕜 (fun y => -f y) s x ↔ DifferentiableWithinAt 𝕜 f s x :=\n  ⟨fun h => by simpa only [neg_neg] using h.neg, fun h => h.neg⟩\n\n"}
{"name":"DifferentiableAt.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nh : DifferentiableAt 𝕜 f x\n⊢ DifferentiableAt 𝕜 (fun y => Neg.neg (f y)) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.neg (h : DifferentiableAt 𝕜 f x) : DifferentiableAt 𝕜 (fun y => -f y) x :=\n  h.hasFDerivAt.neg.differentiableAt\n\n"}
{"name":"differentiableAt_neg_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\n⊢ Iff (DifferentiableAt 𝕜 (fun y => Neg.neg (f y)) x) (DifferentiableAt 𝕜 f x)","decl":"@[simp]\ntheorem differentiableAt_neg_iff : DifferentiableAt 𝕜 (fun y => -f y) x ↔ DifferentiableAt 𝕜 f x :=\n  ⟨fun h => by simpa only [neg_neg] using h.neg, fun h => h.neg⟩\n\n"}
{"name":"DifferentiableOn.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nh : DifferentiableOn 𝕜 f s\n⊢ DifferentiableOn 𝕜 (fun y => Neg.neg (f y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.neg (h : DifferentiableOn 𝕜 f s) : DifferentiableOn 𝕜 (fun y => -f y) s :=\n  fun x hx => (h x hx).neg\n\n"}
{"name":"differentiableOn_neg_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\n⊢ Iff (DifferentiableOn 𝕜 (fun y => Neg.neg (f y)) s) (DifferentiableOn 𝕜 f s)","decl":"@[simp]\ntheorem differentiableOn_neg_iff : DifferentiableOn 𝕜 (fun y => -f y) s ↔ DifferentiableOn 𝕜 f s :=\n  ⟨fun h => by simpa only [neg_neg] using h.neg, fun h => h.neg⟩\n\n"}
{"name":"Differentiable.neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nh : Differentiable 𝕜 f\n⊢ Differentiable 𝕜 fun y => Neg.neg (f y)","decl":"@[fun_prop]\ntheorem Differentiable.neg (h : Differentiable 𝕜 f) : Differentiable 𝕜 fun y => -f y := fun x =>\n  (h x).neg\n\n"}
{"name":"differentiable_neg_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\n⊢ Iff (Differentiable 𝕜 fun y => Neg.neg (f y)) (Differentiable 𝕜 f)","decl":"@[simp]\ntheorem differentiable_neg_iff : (Differentiable 𝕜 fun y => -f y) ↔ Differentiable 𝕜 f :=\n  ⟨fun h => by simpa only [neg_neg] using h.neg, fun h => h.neg⟩\n\n"}
{"name":"fderivWithin_neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (fun y => Neg.neg (f y)) s x) (Neg.neg (fderivWithin 𝕜 f s x))","decl":"theorem fderivWithin_neg (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (fun y => -f y) s x = -fderivWithin 𝕜 f s x := by\n  classical\n  by_cases h : DifferentiableWithinAt 𝕜 f s x\n  · exact h.hasFDerivWithinAt.neg.fderivWithin hxs\n  · rw [fderivWithin_zero_of_not_differentiableWithinAt h,\n      fderivWithin_zero_of_not_differentiableWithinAt, neg_zero]\n    simpa\n\n"}
{"name":"fderivWithin_neg'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (fderivWithin 𝕜 (Neg.neg f) s x) (Neg.neg (fderivWithin 𝕜 f s x))","decl":"/-- Version of `fderivWithin_neg` where the function is written `-f` instead of `fun y ↦ - f y`. -/\ntheorem fderivWithin_neg' (hxs : UniqueDiffWithinAt 𝕜 s x) :\n    fderivWithin 𝕜 (-f) s x = -fderivWithin 𝕜 f s x :=\n  fderivWithin_neg hxs\n\n"}
{"name":"fderiv_neg","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\n⊢ Eq (fderiv 𝕜 (fun y => Neg.neg (f y)) x) (Neg.neg (fderiv 𝕜 f x))","decl":"@[simp]\ntheorem fderiv_neg : fderiv 𝕜 (fun y => -f y) x = -fderiv 𝕜 f x := by\n  simp only [← fderivWithin_univ, fderivWithin_neg uniqueDiffWithinAt_univ]\n\n"}
{"name":"fderiv_neg'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\n⊢ Eq (fderiv 𝕜 (Neg.neg f) x) (Neg.neg (fderiv 𝕜 f x))","decl":"/-- Version of `fderiv_neg` where the function is written `-f` instead of `fun y ↦ - f y`. -/\ntheorem fderiv_neg' : fderiv 𝕜 (-f) x = -fderiv 𝕜 f x :=\n  fderiv_neg\n\n"}
{"name":"HasStrictFDerivAt.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasStrictFDerivAt f f' x\nhg : HasStrictFDerivAt g g' x\n⊢ HasStrictFDerivAt (fun x => HSub.hSub (f x) (g x)) (HSub.hSub f' g') x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.sub (hf : HasStrictFDerivAt f f' x) (hg : HasStrictFDerivAt g g' x) :\n    HasStrictFDerivAt (fun x => f x - g x) (f' - g') x := by\n  simpa only [sub_eq_add_neg] using hf.add hg.neg\n\n"}
{"name":"HasFDerivAtFilter.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nhf : HasFDerivAtFilter f f' x L\nhg : HasFDerivAtFilter g g' x L\n⊢ HasFDerivAtFilter (fun x => HSub.hSub (f x) (g x)) (HSub.hSub f' g') x L","decl":"theorem HasFDerivAtFilter.sub (hf : HasFDerivAtFilter f f' x L) (hg : HasFDerivAtFilter g g' x L) :\n    HasFDerivAtFilter (fun x => f x - g x) (f' - g') x L := by\n  simpa only [sub_eq_add_neg] using hf.add hg.neg\n\n"}
{"name":"HasFDerivWithinAt.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\nhg : HasFDerivWithinAt g g' s x\n⊢ HasFDerivWithinAt (fun x => HSub.hSub (f x) (g x)) (HSub.hSub f' g') s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.sub (hf : HasFDerivWithinAt f f' s x)\n    (hg : HasFDerivWithinAt g g' s x) : HasFDerivWithinAt (fun x => f x - g x) (f' - g') s x :=\n  hf.sub hg\n\n"}
{"name":"HasFDerivAt.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nf' g' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasFDerivAt f f' x\nhg : HasFDerivAt g g' x\n⊢ HasFDerivAt (fun x => HSub.hSub (f x) (g x)) (HSub.hSub f' g') x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.sub (hf : HasFDerivAt f f' x) (hg : HasFDerivAt g g' x) :\n    HasFDerivAt (fun x => f x - g x) (f' - g') x :=\n  hf.sub hg\n\n"}
{"name":"DifferentiableWithinAt.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\ns : Set E\nhf : DifferentiableWithinAt 𝕜 f s x\nhg : DifferentiableWithinAt 𝕜 g s x\n⊢ DifferentiableWithinAt 𝕜 (fun y => HSub.hSub (f y) (g y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.sub (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hg : DifferentiableWithinAt 𝕜 g s x) : DifferentiableWithinAt 𝕜 (fun y => f y - g y) s x :=\n  (hf.hasFDerivWithinAt.sub hg.hasFDerivWithinAt).differentiableWithinAt\n\n"}
{"name":"DifferentiableAt.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nhg : DifferentiableAt 𝕜 g x\n⊢ DifferentiableAt 𝕜 (fun y => HSub.hSub (f y) (g y)) x","decl":"@[simp, fun_prop]\ntheorem DifferentiableAt.sub (hf : DifferentiableAt 𝕜 f x) (hg : DifferentiableAt 𝕜 g x) :\n    DifferentiableAt 𝕜 (fun y => f y - g y) x :=\n  (hf.hasFDerivAt.sub hg.hasFDerivAt).differentiableAt\n\n"}
{"name":"DifferentiableAt.add_iff_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhg : DifferentiableAt 𝕜 g x\n⊢ Iff (DifferentiableAt 𝕜 (fun y => HAdd.hAdd (f y) (g y)) x) (DifferentiableAt 𝕜 f x)","decl":"@[simp]\nlemma DifferentiableAt.add_iff_left (hg : DifferentiableAt 𝕜 g x) :\n    DifferentiableAt 𝕜 (fun y => f y + g y) x ↔ DifferentiableAt 𝕜 f x := by\n  refine ⟨fun h ↦ ?_, fun hf ↦ hf.add hg⟩\n  simpa only [add_sub_cancel_right] using h.sub hg\n\n"}
{"name":"DifferentiableAt.add_iff_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhg : DifferentiableAt 𝕜 f x\n⊢ Iff (DifferentiableAt 𝕜 (fun y => HAdd.hAdd (f y) (g y)) x) (DifferentiableAt 𝕜 g x)","decl":"@[simp]\nlemma DifferentiableAt.add_iff_right (hg : DifferentiableAt 𝕜 f x) :\n    DifferentiableAt 𝕜 (fun y => f y + g y) x ↔ DifferentiableAt 𝕜 g x := by\n  simp only [add_comm (f _), hg.add_iff_left]\n\n"}
{"name":"DifferentiableAt.sub_iff_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhg : DifferentiableAt 𝕜 g x\n⊢ Iff (DifferentiableAt 𝕜 (fun y => HSub.hSub (f y) (g y)) x) (DifferentiableAt 𝕜 f x)","decl":"@[simp]\nlemma DifferentiableAt.sub_iff_left (hg : DifferentiableAt 𝕜 g x) :\n    DifferentiableAt 𝕜 (fun y => f y - g y) x ↔ DifferentiableAt 𝕜 f x := by\n  simp only [sub_eq_add_neg, differentiableAt_neg_iff, hg, add_iff_left]\n\n"}
{"name":"DifferentiableAt.sub_iff_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhg : DifferentiableAt 𝕜 f x\n⊢ Iff (DifferentiableAt 𝕜 (fun y => HSub.hSub (f y) (g y)) x) (DifferentiableAt 𝕜 g x)","decl":"@[simp]\nlemma DifferentiableAt.sub_iff_right (hg : DifferentiableAt 𝕜 f x) :\n    DifferentiableAt 𝕜 (fun y => f y - g y) x ↔ DifferentiableAt 𝕜 g x := by\n  simp only [sub_eq_add_neg, hg, add_iff_right, differentiableAt_neg_iff]\n\n"}
{"name":"DifferentiableOn.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\ns : Set E\nhf : DifferentiableOn 𝕜 f s\nhg : DifferentiableOn 𝕜 g s\n⊢ DifferentiableOn 𝕜 (fun y => HSub.hSub (f y) (g y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.sub (hf : DifferentiableOn 𝕜 f s) (hg : DifferentiableOn 𝕜 g s) :\n    DifferentiableOn 𝕜 (fun y => f y - g y) s := fun x hx => (hf x hx).sub (hg x hx)\n\n"}
{"name":"DifferentiableOn.add_iff_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\ns : Set E\nhg : DifferentiableOn 𝕜 g s\n⊢ Iff (DifferentiableOn 𝕜 (fun y => HAdd.hAdd (f y) (g y)) s) (DifferentiableOn 𝕜 f s)","decl":"@[simp]\nlemma DifferentiableOn.add_iff_left (hg : DifferentiableOn 𝕜 g s) :\n    DifferentiableOn 𝕜 (fun y => f y + g y) s ↔ DifferentiableOn 𝕜 f s := by\n  refine ⟨fun h ↦ ?_, fun hf ↦ hf.add hg⟩\n  simpa only [add_sub_cancel_right] using h.sub hg\n\n"}
{"name":"DifferentiableOn.add_iff_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\ns : Set E\nhg : DifferentiableOn 𝕜 f s\n⊢ Iff (DifferentiableOn 𝕜 (fun y => HAdd.hAdd (f y) (g y)) s) (DifferentiableOn 𝕜 g s)","decl":"@[simp]\nlemma DifferentiableOn.add_iff_right (hg : DifferentiableOn 𝕜 f s) :\n    DifferentiableOn 𝕜 (fun y => f y + g y) s ↔ DifferentiableOn 𝕜 g s := by\n  simp only [add_comm (f _), hg.add_iff_left]\n\n"}
{"name":"DifferentiableOn.sub_iff_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\ns : Set E\nhg : DifferentiableOn 𝕜 g s\n⊢ Iff (DifferentiableOn 𝕜 (fun y => HSub.hSub (f y) (g y)) s) (DifferentiableOn 𝕜 f s)","decl":"@[simp]\nlemma DifferentiableOn.sub_iff_left (hg : DifferentiableOn 𝕜 g s) :\n    DifferentiableOn 𝕜 (fun y => f y - g y) s ↔ DifferentiableOn 𝕜 f s := by\n  simp only [sub_eq_add_neg, differentiableOn_neg_iff, hg, add_iff_left]\n\n"}
{"name":"DifferentiableOn.sub_iff_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\ns : Set E\nhg : DifferentiableOn 𝕜 f s\n⊢ Iff (DifferentiableOn 𝕜 (fun y => HSub.hSub (f y) (g y)) s) (DifferentiableOn 𝕜 g s)","decl":"@[simp]\nlemma DifferentiableOn.sub_iff_right (hg : DifferentiableOn 𝕜 f s) :\n    DifferentiableOn 𝕜 (fun y => f y - g y) s ↔ DifferentiableOn 𝕜 g s := by\n  simp only [sub_eq_add_neg, differentiableOn_neg_iff, hg, add_iff_right]\n\n"}
{"name":"Differentiable.sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nhf : Differentiable 𝕜 f\nhg : Differentiable 𝕜 g\n⊢ Differentiable 𝕜 fun y => HSub.hSub (f y) (g y)","decl":"@[simp, fun_prop]\ntheorem Differentiable.sub (hf : Differentiable 𝕜 f) (hg : Differentiable 𝕜 g) :\n    Differentiable 𝕜 fun y => f y - g y := fun x => (hf x).sub (hg x)\n\n"}
{"name":"Differentiable.add_iff_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nhg : Differentiable 𝕜 g\n⊢ Iff (Differentiable 𝕜 fun y => HAdd.hAdd (f y) (g y)) (Differentiable 𝕜 f)","decl":"@[simp]\nlemma Differentiable.add_iff_left (hg : Differentiable 𝕜 g) :\n    Differentiable 𝕜 (fun y => f y + g y) ↔ Differentiable 𝕜 f := by\n  refine ⟨fun h ↦ ?_, fun hf ↦ hf.add hg⟩\n  simpa only [add_sub_cancel_right] using h.sub hg\n\n"}
{"name":"Differentiable.add_iff_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nhg : Differentiable 𝕜 f\n⊢ Iff (Differentiable 𝕜 fun y => HAdd.hAdd (f y) (g y)) (Differentiable 𝕜 g)","decl":"@[simp]\nlemma Differentiable.add_iff_right (hg : Differentiable 𝕜 f) :\n    Differentiable 𝕜 (fun y => f y + g y) ↔ Differentiable 𝕜 g := by\n  simp only [add_comm (f _), hg.add_iff_left]\n\n"}
{"name":"Differentiable.sub_iff_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nhg : Differentiable 𝕜 g\n⊢ Iff (Differentiable 𝕜 fun y => HSub.hSub (f y) (g y)) (Differentiable 𝕜 f)","decl":"@[simp]\nlemma Differentiable.sub_iff_left (hg : Differentiable 𝕜 g) :\n    Differentiable 𝕜 (fun y => f y - g y) ↔ Differentiable 𝕜 f := by\n  simp only [sub_eq_add_neg, differentiable_neg_iff, hg, add_iff_left]\n\n"}
{"name":"Differentiable.sub_iff_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nhg : Differentiable 𝕜 f\n⊢ Iff (Differentiable 𝕜 fun y => HSub.hSub (f y) (g y)) (Differentiable 𝕜 g)","decl":"@[simp]\nlemma Differentiable.sub_iff_right (hg : Differentiable 𝕜 f) :\n    Differentiable 𝕜 (fun y => f y - g y) ↔ Differentiable 𝕜 g := by\n  simp only [sub_eq_add_neg, differentiable_neg_iff, hg, add_iff_right]\n\n"}
{"name":"fderivWithin_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nhf : DifferentiableWithinAt 𝕜 f s x\nhg : DifferentiableWithinAt 𝕜 g s x\n⊢ Eq (fderivWithin 𝕜 (fun y => HSub.hSub (f y) (g y)) s x) (HSub.hSub (fderivWithin 𝕜 f s x) (fderivWithin 𝕜 g s x))","decl":"theorem fderivWithin_sub (hxs : UniqueDiffWithinAt 𝕜 s x) (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hg : DifferentiableWithinAt 𝕜 g s x) :\n    fderivWithin 𝕜 (fun y => f y - g y) s x = fderivWithin 𝕜 f s x - fderivWithin 𝕜 g s x :=\n  (hf.hasFDerivWithinAt.sub hg.hasFDerivWithinAt).fderivWithin hxs\n\n"}
{"name":"fderivWithin_sub'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nhf : DifferentiableWithinAt 𝕜 f s x\nhg : DifferentiableWithinAt 𝕜 g s x\n⊢ Eq (fderivWithin 𝕜 (HSub.hSub f g) s x) (HSub.hSub (fderivWithin 𝕜 f s x) (fderivWithin 𝕜 g s x))","decl":"/-- Version of `fderivWithin_sub` where the function is written as `f - g` instead\nof `fun y ↦ f y - g y`. -/\ntheorem fderivWithin_sub' (hxs : UniqueDiffWithinAt 𝕜 s x) (hf : DifferentiableWithinAt 𝕜 f s x)\n    (hg : DifferentiableWithinAt 𝕜 g s x) :\n    fderivWithin 𝕜 (f - g) s x = fderivWithin 𝕜 f s x - fderivWithin 𝕜 g s x :=\n  fderivWithin_sub hxs hf hg\n\n"}
{"name":"fderiv_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nhg : DifferentiableAt 𝕜 g x\n⊢ Eq (fderiv 𝕜 (fun y => HSub.hSub (f y) (g y)) x) (HSub.hSub (fderiv 𝕜 f x) (fderiv 𝕜 g x))","decl":"theorem fderiv_sub (hf : DifferentiableAt 𝕜 f x) (hg : DifferentiableAt 𝕜 g x) :\n    fderiv 𝕜 (fun y => f y - g y) x = fderiv 𝕜 f x - fderiv 𝕜 g x :=\n  (hf.hasFDerivAt.sub hg.hasFDerivAt).fderiv\n\n"}
{"name":"fderiv_sub'","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf g : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nhg : DifferentiableAt 𝕜 g x\n⊢ Eq (fderiv 𝕜 (HSub.hSub f g) x) (HSub.hSub (fderiv 𝕜 f x) (fderiv 𝕜 g x))","decl":"/-- Version of `fderiv_sub` where the function is written as `f - g` instead\nof `fun y ↦ f y - g y`. -/\ntheorem fderiv_sub' (hf : DifferentiableAt 𝕜 f x) (hg : DifferentiableAt 𝕜 g x) :\n    fderiv 𝕜 (f - g) x = fderiv 𝕜 f x - fderiv 𝕜 g x :=\n  fderiv_sub hf hg\n\n"}
{"name":"HasStrictFDerivAt.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasStrictFDerivAt f f' x\nc : F\n⊢ HasStrictFDerivAt (fun x => HSub.hSub (f x) c) f' x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.sub_const (hf : HasStrictFDerivAt f f' x) (c : F) :\n    HasStrictFDerivAt (fun x => f x - c) f' x := by\n  simpa only [sub_eq_add_neg] using hf.add_const (-c)\n\n"}
{"name":"HasFDerivAtFilter.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nhf : HasFDerivAtFilter f f' x L\nc : F\n⊢ HasFDerivAtFilter (fun x => HSub.hSub (f x) c) f' x L","decl":"theorem HasFDerivAtFilter.sub_const (hf : HasFDerivAtFilter f f' x L) (c : F) :\n    HasFDerivAtFilter (fun x => f x - c) f' x L := by\n  simpa only [sub_eq_add_neg] using hf.add_const (-c)\n\n"}
{"name":"HasFDerivWithinAt.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\nc : F\n⊢ HasFDerivWithinAt (fun x => HSub.hSub (f x) c) f' s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.sub_const (hf : HasFDerivWithinAt f f' s x) (c : F) :\n    HasFDerivWithinAt (fun x => f x - c) f' s x :=\n  hf.sub_const c\n\n"}
{"name":"HasFDerivAt.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasFDerivAt f f' x\nc : F\n⊢ HasFDerivAt (fun x => HSub.hSub (f x) c) f' x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.sub_const (hf : HasFDerivAt f f' x) (c : F) :\n    HasFDerivAt (fun x => f x - c) f' x :=\n  hf.sub_const c\n\n"}
{"name":"hasStrictFDerivAt_sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx c : F\n⊢ HasStrictFDerivAt (fun x => HSub.hSub x c) (ContinuousLinearMap.id 𝕜 F) x","decl":"@[fun_prop]\ntheorem hasStrictFDerivAt_sub_const {x : F} (c : F) : HasStrictFDerivAt (· - c) (id 𝕜 F) x :=\n  (hasStrictFDerivAt_id x).sub_const c\n\n"}
{"name":"hasFDerivAt_sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝² : NontriviallyNormedField 𝕜\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nx c : F\n⊢ HasFDerivAt (fun x => HSub.hSub x c) (ContinuousLinearMap.id 𝕜 F) x","decl":"@[fun_prop]\ntheorem hasFDerivAt_sub_const {x : F} (c : F) : HasFDerivAt (· - c) (id 𝕜 F) x :=\n  (hasFDerivAt_id x).sub_const c\n\n"}
{"name":"DifferentiableWithinAt.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhf : DifferentiableWithinAt 𝕜 f s x\nc : F\n⊢ DifferentiableWithinAt 𝕜 (fun y => HSub.hSub (f y) c) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.sub_const (hf : DifferentiableWithinAt 𝕜 f s x) (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => f y - c) s x :=\n  (hf.hasFDerivWithinAt.sub_const c).differentiableWithinAt\n\n"}
{"name":"differentiableWithinAt_sub_const_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nc : F\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun y => HSub.hSub (f y) c) s x) (DifferentiableWithinAt 𝕜 f s x)","decl":"@[simp]\ntheorem differentiableWithinAt_sub_const_iff (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => f y - c) s x ↔ DifferentiableWithinAt 𝕜 f s x := by\n  simp only [sub_eq_add_neg, differentiableWithinAt_add_const_iff]\n\n"}
{"name":"DifferentiableAt.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nc : F\n⊢ DifferentiableAt 𝕜 (fun y => HSub.hSub (f y) c) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.sub_const (hf : DifferentiableAt 𝕜 f x) (c : F) :\n    DifferentiableAt 𝕜 (fun y => f y - c) x :=\n  (hf.hasFDerivAt.sub_const c).differentiableAt\n\n"}
{"name":"DifferentiableOn.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nhf : DifferentiableOn 𝕜 f s\nc : F\n⊢ DifferentiableOn 𝕜 (fun y => HSub.hSub (f y) c) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.sub_const (hf : DifferentiableOn 𝕜 f s) (c : F) :\n    DifferentiableOn 𝕜 (fun y => f y - c) s := fun x hx => (hf x hx).sub_const c\n\n"}
{"name":"Differentiable.sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nhf : Differentiable 𝕜 f\nc : F\n⊢ Differentiable 𝕜 fun y => HSub.hSub (f y) c","decl":"@[fun_prop]\ntheorem Differentiable.sub_const (hf : Differentiable 𝕜 f) (c : F) :\n    Differentiable 𝕜 fun y => f y - c := fun x => (hf x).sub_const c\n\n"}
{"name":"fderivWithin_sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nc : F\n⊢ Eq (fderivWithin 𝕜 (fun y => HSub.hSub (f y) c) s x) (fderivWithin 𝕜 f s x)","decl":"theorem fderivWithin_sub_const (hxs : UniqueDiffWithinAt 𝕜 s x) (c : F) :\n    fderivWithin 𝕜 (fun y => f y - c) s x = fderivWithin 𝕜 f s x := by\n  simp only [sub_eq_add_neg, fderivWithin_add_const hxs]\n\n"}
{"name":"fderiv_sub_const","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nc : F\n⊢ Eq (fderiv 𝕜 (fun y => HSub.hSub (f y) c) x) (fderiv 𝕜 f x)","decl":"theorem fderiv_sub_const (c : F) : fderiv 𝕜 (fun y => f y - c) x = fderiv 𝕜 f x := by\n  simp only [sub_eq_add_neg, fderiv_add_const]\n\n"}
{"name":"HasStrictFDerivAt.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasStrictFDerivAt f f' x\nc : F\n⊢ HasStrictFDerivAt (fun x => HSub.hSub c (f x)) (Neg.neg f') x","decl":"@[fun_prop]\ntheorem HasStrictFDerivAt.const_sub (hf : HasStrictFDerivAt f f' x) (c : F) :\n    HasStrictFDerivAt (fun x => c - f x) (-f') x := by\n  simpa only [sub_eq_add_neg] using hf.neg.const_add c\n\n"}
{"name":"HasFDerivAtFilter.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nL : Filter E\nhf : HasFDerivAtFilter f f' x L\nc : F\n⊢ HasFDerivAtFilter (fun x => HSub.hSub c (f x)) (Neg.neg f') x L","decl":"theorem HasFDerivAtFilter.const_sub (hf : HasFDerivAtFilter f f' x L) (c : F) :\n    HasFDerivAtFilter (fun x => c - f x) (-f') x L := by\n  simpa only [sub_eq_add_neg] using hf.neg.const_add c\n\n"}
{"name":"HasFDerivWithinAt.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\nhf : HasFDerivWithinAt f f' s x\nc : F\n⊢ HasFDerivWithinAt (fun x => HSub.hSub c (f x)) (Neg.neg f') s x","decl":"@[fun_prop]\nnonrec theorem HasFDerivWithinAt.const_sub (hf : HasFDerivWithinAt f f' s x) (c : F) :\n    HasFDerivWithinAt (fun x => c - f x) (-f') s x :=\n  hf.const_sub c\n\n"}
{"name":"HasFDerivAt.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\nhf : HasFDerivAt f f' x\nc : F\n⊢ HasFDerivAt (fun x => HSub.hSub c (f x)) (Neg.neg f') x","decl":"@[fun_prop]\nnonrec theorem HasFDerivAt.const_sub (hf : HasFDerivAt f f' x) (c : F) :\n    HasFDerivAt (fun x => c - f x) (-f') x :=\n  hf.const_sub c\n\n"}
{"name":"DifferentiableWithinAt.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhf : DifferentiableWithinAt 𝕜 f s x\nc : F\n⊢ DifferentiableWithinAt 𝕜 (fun y => HSub.hSub c (f y)) s x","decl":"@[fun_prop]\ntheorem DifferentiableWithinAt.const_sub (hf : DifferentiableWithinAt 𝕜 f s x) (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => c - f y) s x :=\n  (hf.hasFDerivWithinAt.const_sub c).differentiableWithinAt\n\n"}
{"name":"differentiableWithinAt_const_sub_iff","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nc : F\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun y => HSub.hSub c (f y)) s x) (DifferentiableWithinAt 𝕜 f s x)","decl":"@[simp]\ntheorem differentiableWithinAt_const_sub_iff (c : F) :\n    DifferentiableWithinAt 𝕜 (fun y => c - f y) s x ↔ DifferentiableWithinAt 𝕜 f s x := by\n  simp [sub_eq_add_neg]\n\n"}
{"name":"DifferentiableAt.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nhf : DifferentiableAt 𝕜 f x\nc : F\n⊢ DifferentiableAt 𝕜 (fun y => HSub.hSub c (f y)) x","decl":"@[fun_prop]\ntheorem DifferentiableAt.const_sub (hf : DifferentiableAt 𝕜 f x) (c : F) :\n    DifferentiableAt 𝕜 (fun y => c - f y) x :=\n  (hf.hasFDerivAt.const_sub c).differentiableAt\n\n"}
{"name":"DifferentiableOn.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nhf : DifferentiableOn 𝕜 f s\nc : F\n⊢ DifferentiableOn 𝕜 (fun y => HSub.hSub c (f y)) s","decl":"@[fun_prop]\ntheorem DifferentiableOn.const_sub (hf : DifferentiableOn 𝕜 f s) (c : F) :\n    DifferentiableOn 𝕜 (fun y => c - f y) s := fun x hx => (hf x hx).const_sub c\n\n"}
{"name":"Differentiable.const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nhf : Differentiable 𝕜 f\nc : F\n⊢ Differentiable 𝕜 fun y => HSub.hSub c (f y)","decl":"@[fun_prop]\ntheorem Differentiable.const_sub (hf : Differentiable 𝕜 f) (c : F) :\n    Differentiable 𝕜 fun y => c - f y := fun x => (hf x).const_sub c\n\n"}
{"name":"fderivWithin_const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\nhxs : UniqueDiffWithinAt 𝕜 s x\nc : F\n⊢ Eq (fderivWithin 𝕜 (fun y => HSub.hSub c (f y)) s x) (Neg.neg (fderivWithin 𝕜 f s x))","decl":"theorem fderivWithin_const_sub (hxs : UniqueDiffWithinAt 𝕜 s x) (c : F) :\n    fderivWithin 𝕜 (fun y => c - f y) s x = -fderivWithin 𝕜 f s x := by\n  simp only [sub_eq_add_neg, fderivWithin_const_add, fderivWithin_neg, hxs]\n\n"}
{"name":"fderiv_const_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nc : F\n⊢ Eq (fderiv 𝕜 (fun y => HSub.hSub c (f y)) x) (Neg.neg (fderiv 𝕜 f x))","decl":"theorem fderiv_const_sub (c : F) : fderiv 𝕜 (fun y => c - f y) x = -fderiv 𝕜 f x := by\n  simp only [← fderivWithin_univ, fderivWithin_const_sub uniqueDiffWithinAt_univ]\n\n"}
{"name":"hasFDerivWithinAt_comp_add_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\na : E\n⊢ Iff (HasFDerivWithinAt (fun x => f (HAdd.hAdd x a)) f' s x) (HasFDerivWithinAt f f' (HVAdd.hVAdd a s) (HAdd.hAdd x a))","decl":"theorem hasFDerivWithinAt_comp_add_right (a : E) :\n    HasFDerivWithinAt (fun x ↦ f (x + a)) f' s x ↔ HasFDerivWithinAt f f' (a +ᵥ s) (x + a) := by\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · have A : f = (fun x ↦ f (x + a)) ∘ (fun x ↦ x - a) := by ext; simp\n    rw [show x = (x + a) - a by abel] at h\n    rw [A]\n    have : HasFDerivWithinAt (fun x ↦ x - a) (ContinuousLinearMap.id 𝕜 E) (a +ᵥ s) (x + a) := by\n      simpa using (hasFDerivWithinAt_id (x + a) _).sub (hasFDerivWithinAt_const _ _ _)\n    apply h.comp (x + a) this (fun y hy ↦ ?_)\n    simpa [Set.mem_vadd_set_iff_neg_vadd_mem, add_comm, ← sub_eq_add_neg] using hy\n  · have : HasFDerivWithinAt (fun x ↦ x + a) (ContinuousLinearMap.id 𝕜 E) s x := by\n      simpa using (hasFDerivWithinAt_id x s (𝕜 := 𝕜)).add (hasFDerivWithinAt_const a x s (𝕜 := 𝕜))\n    apply h.comp x this (fun y hy ↦ ?_)\n    simp [Set.mem_vadd_set_iff_neg_vadd_mem, hy]\n\n"}
{"name":"differentiableWithinAt_comp_add_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\na : E\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun x => f (HAdd.hAdd x a)) s x) (DifferentiableWithinAt 𝕜 f (HVAdd.hVAdd a s) (HAdd.hAdd x a))","decl":"theorem differentiableWithinAt_comp_add_right (a : E) :\n    DifferentiableWithinAt 𝕜 (fun x ↦ f (x + a)) s x ↔\n      DifferentiableWithinAt 𝕜 f (a +ᵥ s) (x + a) := by\n  simp [DifferentiableWithinAt, hasFDerivWithinAt_comp_add_right]\n\n"}
{"name":"fderivWithin_comp_add_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\na : E\n⊢ Eq (fderivWithin 𝕜 (fun x => f (HAdd.hAdd x a)) s x) (fderivWithin 𝕜 f (HVAdd.hVAdd a s) (HAdd.hAdd x a))","decl":"theorem fderivWithin_comp_add_right (a : E) :\n    fderivWithin 𝕜 (fun x ↦ f (x + a)) s x = fderivWithin 𝕜 f (a +ᵥ s) (x + a) := by\n  classical\n  simp only [fderivWithin, hasFDerivWithinAt_comp_add_right, DifferentiableWithinAt]\n\n"}
{"name":"hasFDerivWithinAt_comp_add_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\na : E\n⊢ Iff (HasFDerivWithinAt (fun x => f (HAdd.hAdd a x)) f' s x) (HasFDerivWithinAt f f' (HVAdd.hVAdd a s) (HAdd.hAdd a x))","decl":"theorem hasFDerivWithinAt_comp_add_left (a : E) :\n    HasFDerivWithinAt (fun x ↦ f (a + x)) f' s x ↔ HasFDerivWithinAt f f' (a +ᵥ s) (a + x) := by\n  simpa [add_comm a] using hasFDerivWithinAt_comp_add_right a\n\n"}
{"name":"differentiableWithinAt_comp_add_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\na : E\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun x => f (HAdd.hAdd a x)) s x) (DifferentiableWithinAt 𝕜 f (HVAdd.hVAdd a s) (HAdd.hAdd a x))","decl":"theorem differentiableWithinAt_comp_add_left (a : E) :\n    DifferentiableWithinAt 𝕜 (fun x ↦ f (a + x)) s x ↔\n      DifferentiableWithinAt 𝕜 f (a +ᵥ s) (a + x) := by\n  simp [DifferentiableWithinAt, hasFDerivWithinAt_comp_add_left]\n\n"}
{"name":"fderivWithin_comp_add_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\na : E\n⊢ Eq (fderivWithin 𝕜 (fun x => f (HAdd.hAdd a x)) s x) (fderivWithin 𝕜 f (HVAdd.hVAdd a s) (HAdd.hAdd a x))","decl":"theorem fderivWithin_comp_add_left (a : E) :\n    fderivWithin 𝕜 (fun x ↦ f (a + x)) s x = fderivWithin 𝕜 f (a +ᵥ s) (a + x) := by\n  simpa [add_comm a] using fderivWithin_comp_add_right a\n\n"}
{"name":"hasFDerivAt_comp_add_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx a : E\n⊢ Iff (HasFDerivAt (fun x => f (HAdd.hAdd x a)) f' x) (HasFDerivAt f f' (HAdd.hAdd x a))","decl":"theorem hasFDerivAt_comp_add_right (a : E) :\n    HasFDerivAt (fun x ↦ f (x + a)) f' x ↔ HasFDerivAt f f' (x + a) := by\n  simp [← hasFDerivWithinAt_univ, hasFDerivWithinAt_comp_add_right]\n\n"}
{"name":"differentiableAt_comp_add_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx a : E\n⊢ Iff (DifferentiableAt 𝕜 (fun x => f (HAdd.hAdd x a)) x) (DifferentiableAt 𝕜 f (HAdd.hAdd x a))","decl":"theorem differentiableAt_comp_add_right (a : E) :\n    DifferentiableAt 𝕜 (fun x ↦ f (x + a)) x ↔ DifferentiableAt 𝕜 f (x + a) := by\n  simp [DifferentiableAt, hasFDerivAt_comp_add_right]\n\n"}
{"name":"fderiv_comp_add_right","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx a : E\n⊢ Eq (fderiv 𝕜 (fun x => f (HAdd.hAdd x a)) x) (fderiv 𝕜 f (HAdd.hAdd x a))","decl":"theorem fderiv_comp_add_right (a : E) :\n    fderiv 𝕜 (fun x ↦ f (x + a)) x = fderiv 𝕜 f (x + a) := by\n  simp [← fderivWithin_univ, fderivWithin_comp_add_right]\n\n"}
{"name":"hasFDerivAt_comp_add_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx a : E\n⊢ Iff (HasFDerivAt (fun x => f (HAdd.hAdd a x)) f' x) (HasFDerivAt f f' (HAdd.hAdd a x))","decl":"theorem hasFDerivAt_comp_add_left (a : E) :\n    HasFDerivAt (fun x ↦ f (a + x)) f' x ↔ HasFDerivAt f f' (a + x) := by\n  simpa [add_comm a] using hasFDerivAt_comp_add_right a\n\n"}
{"name":"differentiableAt_comp_add_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx a : E\n⊢ Iff (DifferentiableAt 𝕜 (fun x => f (HAdd.hAdd a x)) x) (DifferentiableAt 𝕜 f (HAdd.hAdd a x))","decl":"theorem differentiableAt_comp_add_left (a : E) :\n    DifferentiableAt 𝕜 (fun x ↦ f (a + x)) x ↔ DifferentiableAt 𝕜 f (a + x) := by\n  simp [DifferentiableAt, hasFDerivAt_comp_add_left]\n\n"}
{"name":"fderiv_comp_add_left","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx a : E\n⊢ Eq (fderiv 𝕜 (fun x => f (HAdd.hAdd a x)) x) (fderiv 𝕜 f (HAdd.hAdd a x))","decl":"theorem fderiv_comp_add_left (a : E) :\n    fderiv 𝕜 (fun x ↦ f (a + x)) x = fderiv 𝕜 f (a + x) := by\n  simpa [add_comm a] using fderiv_comp_add_right a\n\n"}
{"name":"hasFDerivWithinAt_comp_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx : E\ns : Set E\na : E\n⊢ Iff (HasFDerivWithinAt (fun x => f (HSub.hSub x a)) f' s x) (HasFDerivWithinAt f f' (HVAdd.hVAdd (Neg.neg a) s) (HSub.hSub x a))","decl":"theorem hasFDerivWithinAt_comp_sub (a : E) :\n    HasFDerivWithinAt (fun x ↦ f (x - a)) f' s x ↔ HasFDerivWithinAt f f' (-a +ᵥ s) (x - a) := by\n  simpa [sub_eq_add_neg] using hasFDerivWithinAt_comp_add_right (-a)\n\n"}
{"name":"differentiableWithinAt_comp_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\na : E\n⊢ Iff (DifferentiableWithinAt 𝕜 (fun x => f (HSub.hSub x a)) s x) (DifferentiableWithinAt 𝕜 f (HVAdd.hVAdd (Neg.neg a) s) (HSub.hSub x a))","decl":"theorem differentiableWithinAt_comp_sub (a : E) :\n    DifferentiableWithinAt 𝕜 (fun x ↦ f (x - a)) s x ↔\n      DifferentiableWithinAt 𝕜 f (-a +ᵥ s) (x - a) := by\n  simp [DifferentiableWithinAt, hasFDerivWithinAt_comp_sub]\n\n"}
{"name":"fderivWithin_comp_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\ns : Set E\na : E\n⊢ Eq (fderivWithin 𝕜 (fun x => f (HSub.hSub x a)) s x) (fderivWithin 𝕜 f (HVAdd.hVAdd (Neg.neg a) s) (HSub.hSub x a))","decl":"theorem fderivWithin_comp_sub (a : E) :\n    fderivWithin 𝕜 (fun x ↦ f (x - a)) s x = fderivWithin 𝕜 f (-a +ᵥ s) (x - a) := by\n  simpa [sub_eq_add_neg] using fderivWithin_comp_add_right (-a)\n\n"}
{"name":"hasFDerivAt_comp_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nf' : ContinuousLinearMap (RingHom.id 𝕜) E F\nx a : E\n⊢ Iff (HasFDerivAt (fun x => f (HSub.hSub x a)) f' x) (HasFDerivAt f f' (HSub.hSub x a))","decl":"theorem hasFDerivAt_comp_sub (a : E) :\n    HasFDerivAt (fun x ↦ f (x - a)) f' x ↔ HasFDerivAt f f' (x - a) := by\n  simp [← hasFDerivWithinAt_univ, hasFDerivWithinAt_comp_sub]\n\n"}
{"name":"differentiableAt_comp_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx a : E\n⊢ Iff (DifferentiableAt 𝕜 (fun x => f (HSub.hSub x a)) x) (DifferentiableAt 𝕜 f (HSub.hSub x a))","decl":"theorem differentiableAt_comp_sub (a : E) :\n    DifferentiableAt 𝕜 (fun x ↦ f (x - a)) x ↔ DifferentiableAt 𝕜 f (x - a) := by\n  simp [DifferentiableAt, hasFDerivAt_comp_sub]\n\n"}
{"name":"fderiv_comp_sub","module":"Mathlib.Analysis.Calculus.FDeriv.Add","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx a : E\n⊢ Eq (fderiv 𝕜 (fun x => f (HSub.hSub x a)) x) (fderiv 𝕜 f (HSub.hSub x a))","decl":"theorem fderiv_comp_sub (a : E) :\n    fderiv 𝕜 (fun x ↦ f (x - a)) x = fderiv 𝕜 f (x - a) := by\n  simp [← fderivWithin_univ, fderivWithin_comp_sub]\n\n"}
