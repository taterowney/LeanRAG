{"name":"MeasureTheory.AEStronglyMeasurable.comp_measurePreserving","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nŒ≤ : Type u_2\ninst‚úù : TopologicalSpace Œ≤\ng : Œ± ‚Üí Œ≤\nŒ≥ : Type u_4\nx‚úù¬π : MeasurableSpace Œ≥\nx‚úù : MeasurableSpace Œ±\nf : Œ≥ ‚Üí Œ±\nŒº : MeasureTheory.Measure Œ≥\nŒΩ : MeasureTheory.Measure Œ±\nhg : MeasureTheory.AEStronglyMeasurable g ŒΩ\nhf : MeasureTheory.MeasurePreserving f Œº ŒΩ\n‚ä¢ MeasureTheory.AEStronglyMeasurable (Function.comp g f) Œº","decl":"theorem MeasureTheory.AEStronglyMeasurable.comp_measurePreserving\n    {Œ≥ : Type*} {_ : MeasurableSpace Œ≥} {_ : MeasurableSpace Œ±} {f : Œ≥ ‚Üí Œ±} {Œº : Measure Œ≥}\n    {ŒΩ : Measure Œ±} (hg : AEStronglyMeasurable g ŒΩ) (hf : MeasurePreserving f Œº ŒΩ) :\n    AEStronglyMeasurable (g ‚àò f) Œº :=\n  hg.comp_quasiMeasurePreserving hf.quasiMeasurePreserving\n\n"}
{"name":"MeasureTheory.MeasurePreserving.aestronglyMeasurable_comp_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nŒ≥ : Type u_3\ninst‚úù : TopologicalSpace Œ≥\nŒ≤ : Type u_4\nf : Œ± ‚Üí Œ≤\nmŒ± : MeasurableSpace Œ±\nŒºa : MeasureTheory.Measure Œ±\nmŒ≤ : MeasurableSpace Œ≤\nŒºb : MeasureTheory.Measure Œ≤\nhf : MeasureTheory.MeasurePreserving f Œºa Œºb\nh‚ÇÇ : MeasurableEmbedding f\ng : Œ≤ ‚Üí Œ≥\n‚ä¢ Iff (MeasureTheory.AEStronglyMeasurable (Function.comp g f) Œºa) (MeasureTheory.AEStronglyMeasurable g Œºb)","decl":"theorem MeasureTheory.MeasurePreserving.aestronglyMeasurable_comp_iff {Œ≤ : Type*}\n    {f : Œ± ‚Üí Œ≤} {mŒ± : MeasurableSpace Œ±} {Œºa : Measure Œ±} {mŒ≤ : MeasurableSpace Œ≤} {Œºb : Measure Œ≤}\n    (hf : MeasurePreserving f Œºa Œºb) (h‚ÇÇ : MeasurableEmbedding f) {g : Œ≤ ‚Üí Œ≥} :\n    AEStronglyMeasurable (g ‚àò f) Œºa ‚Üî AEStronglyMeasurable g Œºb := by\n  rw [‚Üê hf.map_eq, h‚ÇÇ.aestronglyMeasurable_map_iff]\n\n"}
{"name":"aestronglyMeasurable_smul_const_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nùïú : Type u_4\ninst‚úù¬≥ : NontriviallyNormedField ùïú\ninst‚úù¬≤ : CompleteSpace ùïú\nE : Type u_5\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace ùïú E\nf : Œ± ‚Üí ùïú\nc : E\nhc : Ne c 0\n‚ä¢ Iff (MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul (f x) c) Œº) (MeasureTheory.AEStronglyMeasurable f Œº)","decl":"theorem aestronglyMeasurable_smul_const_iff {f : Œ± ‚Üí ùïú} {c : E} (hc : c ‚â† 0) :\n    AEStronglyMeasurable (fun x => f x ‚Ä¢ c) Œº ‚Üî AEStronglyMeasurable f Œº :=\n  (isClosedEmbedding_smul_left hc).isEmbedding.aestronglyMeasurable_comp_iff\n\n"}
{"name":"StronglyMeasurable.apply_continuousLinearMap","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nùïú : Type u_4\ninst‚úù‚Å¥ : NontriviallyNormedField ùïú\nE : Type u_5\ninst‚úù¬≥ : NormedAddCommGroup E\ninst‚úù¬≤ : NormedSpace ùïú E\nF : Type u_6\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace ùïú F\n_m : MeasurableSpace Œ±\nœÜ : Œ± ‚Üí ContinuousLinearMap (RingHom.id ùïú) F E\nhœÜ : MeasureTheory.StronglyMeasurable œÜ\nv : F\n‚ä¢ MeasureTheory.StronglyMeasurable fun a => (œÜ a) v","decl":"theorem StronglyMeasurable.apply_continuousLinearMap\n    {_m : MeasurableSpace Œ±} {œÜ : Œ± ‚Üí F ‚ÜíL[ùïú] E} (hœÜ : StronglyMeasurable œÜ) (v : F) :\n    StronglyMeasurable fun a => œÜ a v :=\n  (ContinuousLinearMap.apply ùïú E v).continuous.comp_stronglyMeasurable hœÜ\n\n"}
{"name":"MeasureTheory.AEStronglyMeasurable.apply_continuousLinearMap","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nùïú : Type u_4\ninst‚úù‚Å¥ : NontriviallyNormedField ùïú\nE : Type u_5\ninst‚úù¬≥ : NormedAddCommGroup E\ninst‚úù¬≤ : NormedSpace ùïú E\nF : Type u_6\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace ùïú F\nœÜ : Œ± ‚Üí ContinuousLinearMap (RingHom.id ùïú) F E\nhœÜ : MeasureTheory.AEStronglyMeasurable œÜ Œº\nv : F\n‚ä¢ MeasureTheory.AEStronglyMeasurable (fun a => (œÜ a) v) Œº","decl":"@[measurability]\ntheorem MeasureTheory.AEStronglyMeasurable.apply_continuousLinearMap {œÜ : Œ± ‚Üí F ‚ÜíL[ùïú] E}\n    (hœÜ : AEStronglyMeasurable œÜ Œº) (v : F) :\n    AEStronglyMeasurable (fun a => œÜ a v) Œº :=\n  (ContinuousLinearMap.apply ùïú E v).continuous.comp_aestronglyMeasurable hœÜ\n\n"}
{"name":"ContinuousLinearMap.aestronglyMeasurable_comp‚ÇÇ","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nùïú : Type u_4\ninst‚úù‚Å∂ : NontriviallyNormedField ùïú\nE : Type u_5\ninst‚úù‚Åµ : NormedAddCommGroup E\ninst‚úù‚Å¥ : NormedSpace ùïú E\nF : Type u_6\ninst‚úù¬≥ : NormedAddCommGroup F\ninst‚úù¬≤ : NormedSpace ùïú F\nG : Type u_7\ninst‚úù¬π : NormedAddCommGroup G\ninst‚úù : NormedSpace ùïú G\nL : ContinuousLinearMap (RingHom.id ùïú) E (ContinuousLinearMap (RingHom.id ùïú) F G)\nf : Œ± ‚Üí E\ng : Œ± ‚Üí F\nhf : MeasureTheory.AEStronglyMeasurable f Œº\nhg : MeasureTheory.AEStronglyMeasurable g Œº\n‚ä¢ MeasureTheory.AEStronglyMeasurable (fun x => (L (f x)) (g x)) Œº","decl":"theorem ContinuousLinearMap.aestronglyMeasurable_comp‚ÇÇ (L : E ‚ÜíL[ùïú] F ‚ÜíL[ùïú] G) {f : Œ± ‚Üí E}\n    {g : Œ± ‚Üí F} (hf : AEStronglyMeasurable f Œº) (hg : AEStronglyMeasurable g Œº) :\n    AEStronglyMeasurable (fun x => L (f x) (g x)) Œº :=\n  L.continuous‚ÇÇ.comp_aestronglyMeasurable‚ÇÇ hf hg\n\n"}
{"name":"aestronglyMeasurable_withDensity_iff","module":"Mathlib.MeasureTheory.Function.StronglyMeasurable.Lemmas","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_4\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí NNReal\nhf : Measurable f\ng : Œ± ‚Üí E\n‚ä¢ Iff (MeasureTheory.AEStronglyMeasurable g (Œº.withDensity fun x => ‚Üë(f x))) (MeasureTheory.AEStronglyMeasurable (fun x => HSMul.hSMul (‚Üë(f x)) (g x)) Œº)","decl":"theorem aestronglyMeasurable_withDensity_iff {E : Type*} [NormedAddCommGroup E]\n    [NormedSpace ‚Ñù E] {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : Measurable f) {g : Œ± ‚Üí E} :\n    AEStronglyMeasurable g (Œº.withDensity fun x => (f x : ‚Ñù‚â•0‚àû)) ‚Üî\n      AEStronglyMeasurable (fun x => (f x : ‚Ñù) ‚Ä¢ g x) Œº := by\n  constructor\n  ¬∑ rintro ‚ü®g', g'meas, hg'‚ü©\n    have A : MeasurableSet { x : Œ± | f x ‚â† 0 } := (hf (measurableSet_singleton 0)).compl\n    refine ‚ü®fun x => (f x : ‚Ñù) ‚Ä¢ g' x, hf.coe_nnreal_real.stronglyMeasurable.smul g'meas, ?_‚ü©\n    apply @ae_of_ae_restrict_of_ae_restrict_compl _ _ _ { x | f x ‚â† 0 }\n    ¬∑ rw [EventuallyEq, ae_withDensity_iff hf.coe_nnreal_ennreal] at hg'\n      rw [ae_restrict_iff' A]\n      filter_upwards [hg'] with a ha h'a\n      have : (f a : ‚Ñù‚â•0‚àû) ‚â† 0 := by simpa only [Ne, ENNReal.coe_eq_zero] using h'a\n      rw [ha this]\n    ¬∑ filter_upwards [ae_restrict_mem A.compl] with x hx\n      simp only [Classical.not_not, mem_setOf_eq, mem_compl_iff] at hx\n      simp [hx]\n  ¬∑ rintro ‚ü®g', g'meas, hg'‚ü©\n    refine ‚ü®fun x => (f x : ‚Ñù)‚Åª¬π ‚Ä¢ g' x, hf.coe_nnreal_real.inv.stronglyMeasurable.smul g'meas, ?_‚ü©\n    rw [EventuallyEq, ae_withDensity_iff hf.coe_nnreal_ennreal]\n    filter_upwards [hg'] with x hx h'x\n    rw [‚Üê hx, smul_smul, inv_mul_cancel‚ÇÄ, one_smul]\n    simp only [Ne, ENNReal.coe_eq_zero] at h'x\n    simpa only [NNReal.coe_eq_zero, Ne] using h'x\n"}
