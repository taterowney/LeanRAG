{"name":"BaireSpace.of_pseudoEMetricSpace_completeSpace","module":"Mathlib.Topology.Baire.CompleteMetrizable","initialProofState":"X : Type u_1\ninst✝ : UniformSpace X\n⊢ BaireSpace X","decl":"/-- **First Baire theorem**: a completely metrizable topological space has Baire property.\n\nSince `Mathlib` does not have the notion of a completely metrizable topological space yet,\nwe state it for a complete uniform space with countably generated uniformity filter. -/\ninstance (priority := 100) BaireSpace.of_pseudoEMetricSpace_completeSpace : BaireSpace X := by\n  let _ := UniformSpace.pseudoMetricSpace X\n  refine ⟨fun f ho hd => ?_⟩\n  let B : ℕ → ℝ≥0∞ := fun n => 1 / 2 ^ n\n  have Bpos : ∀ n, 0 < B n := fun n ↦\n    ENNReal.div_pos one_ne_zero <| ENNReal.pow_ne_top ENNReal.coe_ne_top\n  /- Translate the density assumption into two functions `center` and `radius` associating\n    to any n, x, δ, δpos a center and a positive radius such that\n    `closedBall center radius` is included both in `f n` and in `closedBall x δ`.\n    We can also require `radius ≤ (1/2)^(n+1)`, to ensure we get a Cauchy sequence later. -/\n  have : ∀ n x δ, δ ≠ 0 → ∃ y r, 0 < r ∧ r ≤ B (n + 1) ∧ closedBall y r ⊆ closedBall x δ ∩ f n := by\n    intro n x δ δpos\n    have : x ∈ closure (f n) := hd n x\n    rcases EMetric.mem_closure_iff.1 this (δ / 2) (ENNReal.half_pos δpos) with ⟨y, ys, xy⟩\n    rw [edist_comm] at xy\n    obtain ⟨r, rpos, hr⟩ : ∃ r > 0, closedBall y r ⊆ f n :=\n      nhds_basis_closed_eball.mem_iff.1 (isOpen_iff_mem_nhds.1 (ho n) y ys)\n    refine ⟨y, min (min (δ / 2) r) (B (n + 1)), ?_, ?_, fun z hz => ⟨?_, ?_⟩⟩\n    · show 0 < min (min (δ / 2) r) (B (n + 1))\n      exact lt_min (lt_min (ENNReal.half_pos δpos) rpos) (Bpos (n + 1))\n    · show min (min (δ / 2) r) (B (n + 1)) ≤ B (n + 1)\n      exact min_le_right _ _\n    · show z ∈ closedBall x δ\n      calc\n        edist z x ≤ edist z y + edist y x := edist_triangle _ _ _\n        _ ≤ min (min (δ / 2) r) (B (n + 1)) + δ / 2 := add_le_add hz (le_of_lt xy)\n        _ ≤ δ / 2 + δ / 2 := (add_le_add (le_trans (min_le_left _ _) (min_le_left _ _)) le_rfl)\n        _ = δ := ENNReal.add_halves δ\n    show z ∈ f n\n    exact hr (calc\n      edist z y ≤ min (min (δ / 2) r) (B (n + 1)) := hz\n      _ ≤ r := le_trans (min_le_left _ _) (min_le_right _ _))\n  choose! center radius Hpos HB Hball using this\n  refine fun x => (mem_closure_iff_nhds_basis nhds_basis_closed_eball).2 fun ε εpos => ?_\n  /- `ε` is positive. We have to find a point in the ball of radius `ε` around `x` belonging to all\n    `f n`. For this, we construct inductively a sequence `F n = (c n, r n)` such that the closed\n    ball `closedBall (c n) (r n)` is included in the previous ball and in `f n`, and such that\n    `r n` is small enough to ensure that `c n` is a Cauchy sequence. Then `c n` converges to a\n    limit which belongs to all the `f n`. -/\n  let F : ℕ → X × ℝ≥0∞ := fun n =>\n    Nat.recOn n (Prod.mk x (min ε (B 0))) fun n p => Prod.mk (center n p.1 p.2) (radius n p.1 p.2)\n  let c : ℕ → X := fun n => (F n).1\n  let r : ℕ → ℝ≥0∞ := fun n => (F n).2\n  have rpos : ∀ n, 0 < r n := by\n    intro n\n    induction n with\n    | zero => exact lt_min εpos (Bpos 0)\n    | succ n hn => exact Hpos n (c n) (r n) hn.ne'\n  have r0 : ∀ n, r n ≠ 0 := fun n => (rpos n).ne'\n  have rB : ∀ n, r n ≤ B n := by\n    intro n\n    cases n with\n    | zero => exact min_le_right _ _\n    | succ n => exact HB n (c n) (r n) (r0 n)\n  have incl : ∀ n, closedBall (c (n + 1)) (r (n + 1)) ⊆ closedBall (c n) (r n) ∩ f n :=\n    fun n => Hball n (c n) (r n) (r0 n)\n  have cdist : ∀ n, edist (c n) (c (n + 1)) ≤ B n := by\n    intro n\n    rw [edist_comm]\n    have A : c (n + 1) ∈ closedBall (c (n + 1)) (r (n + 1)) := mem_closedBall_self\n    have I :=\n      calc\n        closedBall (c (n + 1)) (r (n + 1)) ⊆ closedBall (c n) (r n) :=\n          Subset.trans (incl n) inter_subset_left\n        _ ⊆ closedBall (c n) (B n) := closedBall_subset_closedBall (rB n)\n    exact I A\n  have : CauchySeq c := cauchySeq_of_edist_le_geometric_two _ ENNReal.one_ne_top cdist\n  -- as the sequence `c n` is Cauchy in a complete space, it converges to a limit `y`.\n  rcases cauchySeq_tendsto_of_complete this with ⟨y, ylim⟩\n  -- this point `y` will be the desired point. We will check that it belongs to all\n  -- `f n` and to `ball x ε`.\n  use y\n  simp only [exists_prop, Set.mem_iInter]\n  have I : ∀ n, ∀ m ≥ n, closedBall (c m) (r m) ⊆ closedBall (c n) (r n) := by\n    intro n\n    refine Nat.le_induction ?_ fun m _ h => ?_\n    · exact Subset.refl _\n    · exact Subset.trans (incl m) (Subset.trans inter_subset_left h)\n  have yball : ∀ n, y ∈ closedBall (c n) (r n) := by\n    intro n\n    refine isClosed_ball.mem_of_tendsto ylim ?_\n    refine (Filter.eventually_ge_atTop n).mono fun m hm => ?_\n    exact I n m hm mem_closedBall_self\n  constructor\n  · show ∀ n, y ∈ f n\n    intro n\n    have : closedBall (c (n + 1)) (r (n + 1)) ⊆ f n :=\n      Subset.trans (incl n) inter_subset_right\n    exact this (yball (n + 1))\n  show edist y x ≤ ε\n  exact le_trans (yball 0) (min_le_left _ _)\n"}
