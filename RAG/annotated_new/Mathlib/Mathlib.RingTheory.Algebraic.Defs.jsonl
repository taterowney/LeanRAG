{"name":"transcendental_iff","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nx : A\n⊢ Iff (Transcendental R x) (∀ (p : Polynomial R), Eq ((Polynomial.aeval x) p) 0 → Eq p 0)","decl":"/-- An element `x` is transcendental over `R` if and only if for any polynomial `p`,\n`Polynomial.aeval x p = 0` implies `p = 0`. This is similar to `algebraicIndependent_iff`. -/\ntheorem transcendental_iff {x : A} :\n    Transcendental R x ↔ ∀ p : R[X], aeval x p = 0 → p = 0 := by\n  rw [Transcendental, IsAlgebraic, not_exists]\n  congr! 1; tauto\n\n"}
{"name":"Algebra.IsAlgebraic.isAlgebraic","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nself : Algebra.IsAlgebraic R A\nx : A\n⊢ IsAlgebraic R x","decl":"/-- An algebra is algebraic if all its elements are algebraic. -/\n@[stacks 09GC \"Algebraic extensions\"]\nprotected class Algebra.IsAlgebraic : Prop where\n  isAlgebraic : ∀ x : A, IsAlgebraic R x\n\n"}
{"name":"Algebra.Transcendental.transcendental","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nself : Algebra.Transcendental R A\n⊢ Exists fun x => Transcendental R x","decl":"/-- An algebra is transcendental if some element is transcendental. -/\nprotected class Algebra.Transcendental : Prop where\n  transcendental : ∃ x : A, Transcendental R x\n\n"}
{"name":"Algebra.isAlgebraic_def","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Iff (Algebra.IsAlgebraic R A) (∀ (x : A), IsAlgebraic R x)","decl":"lemma Algebra.isAlgebraic_def : Algebra.IsAlgebraic R A ↔ ∀ x : A, IsAlgebraic R x :=\n  ⟨fun ⟨h⟩ ↦ h, fun h ↦ ⟨h⟩⟩\n\n"}
{"name":"Algebra.transcendental_def","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Iff (Algebra.Transcendental R A) (Exists fun x => Transcendental R x)","decl":"lemma Algebra.transcendental_def : Algebra.Transcendental R A ↔ ∃ x : A, Transcendental R x :=\n  ⟨fun ⟨h⟩ ↦ h, fun h ↦ ⟨h⟩⟩\n\n"}
{"name":"Algebra.transcendental_iff_not_isAlgebraic","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Iff (Algebra.Transcendental R A) (Not (Algebra.IsAlgebraic R A))","decl":"theorem Algebra.transcendental_iff_not_isAlgebraic :\n    Algebra.Transcendental R A ↔ ¬ Algebra.IsAlgebraic R A := by\n  simp [isAlgebraic_def, transcendental_def, Transcendental]\n\n"}
{"name":"Subalgebra.isAlgebraic_iff","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ Iff S.IsAlgebraic (Algebra.IsAlgebraic R (Subtype fun x => Membership.mem S x))","decl":"/-- A subalgebra is algebraic if and only if it is algebraic as an algebra. -/\ntheorem Subalgebra.isAlgebraic_iff (S : Subalgebra R A) :\n    S.IsAlgebraic ↔ Algebra.IsAlgebraic R S := by\n  delta Subalgebra.IsAlgebraic\n  rw [Subtype.forall', Algebra.isAlgebraic_def]\n  refine forall_congr' fun x => exists_congr fun p => and_congr Iff.rfl ?_\n  have h : Function.Injective S.val := Subtype.val_injective\n  conv_rhs => rw [← h.eq_iff, map_zero]\n  rw [← aeval_algHom_apply, S.val_apply]\n\n"}
{"name":"Algebra.isAlgebraic_iff","module":"Mathlib.RingTheory.Algebraic.Defs","initialProofState":"R : Type u\nA : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring A\ninst✝ : Algebra R A\n⊢ Iff (Algebra.IsAlgebraic R A) Top.top.IsAlgebraic","decl":"/-- An algebra is algebraic if and only if it is algebraic as a subalgebra. -/\ntheorem Algebra.isAlgebraic_iff : Algebra.IsAlgebraic R A ↔ (⊤ : Subalgebra R A).IsAlgebraic := by\n  delta Subalgebra.IsAlgebraic\n  simp only [Algebra.isAlgebraic_def, Algebra.mem_top, forall_prop_of_true]\n\n"}
