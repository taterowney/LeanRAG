{"name":"ContDiffBump.normed_def","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : HasContDiffBump E\ninst✝ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\nx : E\n⊢ Eq (f.normed μ x) (HDiv.hDiv (↑f x) (MeasureTheory.integral μ fun x => ↑f x))","decl":"theorem normed_def {μ : Measure E} (x : E) : f.normed μ x = f x / ∫ x, f x ∂μ :=\n  rfl\n\n"}
{"name":"ContDiffBump.nonneg_normed","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : HasContDiffBump E\ninst✝ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\nx : E\n⊢ LE.le 0 (f.normed μ x)","decl":"theorem nonneg_normed (x : E) : 0 ≤ f.normed μ x :=\n  div_nonneg f.nonneg <| integral_nonneg f.nonneg'\n\n"}
{"name":"ContDiffBump.contDiff_normed","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : HasContDiffBump E\ninst✝ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\nn : ENat\n⊢ ContDiff Real (↑n) (f.normed μ)","decl":"theorem contDiff_normed {n : ℕ∞} : ContDiff ℝ n (f.normed μ) :=\n  f.contDiff.div_const _\n\n"}
{"name":"ContDiffBump.continuous_normed","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : HasContDiffBump E\ninst✝ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\n⊢ Continuous (f.normed μ)","decl":"theorem continuous_normed : Continuous (f.normed μ) :=\n  f.continuous.div_const _\n\n"}
{"name":"ContDiffBump.normed_sub","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : HasContDiffBump E\ninst✝ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\nx : E\n⊢ Eq (f.normed μ (HSub.hSub c x)) (f.normed μ (HAdd.hAdd c x))","decl":"theorem normed_sub (x : E) : f.normed μ (c - x) = f.normed μ (c + x) := by\n  simp_rw [f.normed_def, f.sub]\n\n"}
{"name":"ContDiffBump.normed_neg","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : HasContDiffBump E\ninst✝ : MeasurableSpace E\nμ : MeasureTheory.Measure E\nf : ContDiffBump 0\nx : E\n⊢ Eq (f.normed μ (Neg.neg x)) (f.normed μ x)","decl":"theorem normed_neg (f : ContDiffBump (0 : E)) (x : E) : f.normed μ (-x) = f.normed μ x := by\n  simp_rw [f.normed_def, f.neg]\n\n"}
{"name":"ContDiffBump.integrable","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\ninst✝⁴ : HasContDiffBump E\ninst✝³ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝² : BorelSpace E\ninst✝¹ : FiniteDimensional Real E\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ MeasureTheory.Integrable (↑f) μ","decl":"protected theorem integrable : Integrable f μ :=\n  f.continuous.integrable_of_hasCompactSupport f.hasCompactSupport\n\n"}
{"name":"ContDiffBump.integrable_normed","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\ninst✝⁴ : HasContDiffBump E\ninst✝³ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝² : BorelSpace E\ninst✝¹ : FiniteDimensional Real E\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ MeasureTheory.Integrable (f.normed μ) μ","decl":"protected theorem integrable_normed : Integrable (f.normed μ) μ :=\n  f.integrable.div_const _\n\n"}
{"name":"ContDiffBump.integral_pos","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\n⊢ LT.lt 0 (MeasureTheory.integral μ fun x => ↑f x)","decl":"theorem integral_pos : 0 < ∫ x, f x ∂μ := by\n  refine (integral_pos_iff_support_of_nonneg f.nonneg' f.integrable).mpr ?_\n  rw [f.support_eq]\n  exact measure_ball_pos μ c f.rOut_pos\n\n"}
{"name":"ContDiffBump.integral_normed","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\n⊢ Eq (MeasureTheory.integral μ fun x => f.normed μ x) 1","decl":"theorem integral_normed : ∫ x, f.normed μ x ∂μ = 1 := by\n  simp_rw [ContDiffBump.normed, div_eq_mul_inv, mul_comm (f _), ← smul_eq_mul, integral_smul]\n  exact inv_mul_cancel₀ f.integral_pos.ne'\n\n"}
{"name":"ContDiffBump.support_normed_eq","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\n⊢ Eq (Function.support (f.normed μ)) (Metric.ball c f.rOut)","decl":"theorem support_normed_eq : Function.support (f.normed μ) = Metric.ball c f.rOut := by\n  unfold ContDiffBump.normed\n  rw [support_div, f.support_eq, support_const f.integral_pos.ne', inter_univ]\n\n"}
{"name":"ContDiffBump.tsupport_normed_eq","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\n⊢ Eq (tsupport (f.normed μ)) (Metric.closedBall c f.rOut)","decl":"theorem tsupport_normed_eq : tsupport (f.normed μ) = Metric.closedBall c f.rOut := by\n  rw [tsupport, f.support_normed_eq, closure_ball _ f.rOut_pos.ne']\n\n"}
{"name":"ContDiffBump.hasCompactSupport_normed","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\n⊢ HasCompactSupport (f.normed μ)","decl":"theorem hasCompactSupport_normed : HasCompactSupport (f.normed μ) := by\n  simp only [HasCompactSupport, f.tsupport_normed_eq (μ := μ), isCompact_closedBall]\n\n"}
{"name":"ContDiffBump.tendsto_support_normed_smallSets","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\nι : Type u_2\nφ : ι → ContDiffBump c\nl : Filter ι\nhφ : Filter.Tendsto (fun i => (φ i).rOut) l (nhds 0)\n⊢ Filter.Tendsto (fun i => Function.support fun x => (φ i).normed μ x) l (nhds c).smallSets","decl":"theorem tendsto_support_normed_smallSets {ι} {φ : ι → ContDiffBump c} {l : Filter ι}\n    (hφ : Tendsto (fun i => (φ i).rOut) l (𝓝 0)) :\n    Tendsto (fun i => Function.support fun x => (φ i).normed μ x) l (𝓝 c).smallSets := by\n  simp_rw [NormedAddCommGroup.tendsto_nhds_zero, Real.norm_eq_abs,\n    abs_eq_self.mpr (φ _).rOut_pos.le] at hφ\n  rw [nhds_basis_ball.smallSets.tendsto_right_iff]\n  refine fun ε hε ↦ (hφ ε hε).mono fun i hi ↦ ?_\n  rw [(φ i).support_normed_eq]\n  exact ball_subset_ball hi.le\n\n"}
{"name":"ContDiffBump.integral_normed_smul","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝¹⁰ : NormedAddCommGroup E\ninst✝⁹ : NormedSpace Real E\ninst✝⁸ : HasContDiffBump E\ninst✝⁷ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝⁶ : BorelSpace E\ninst✝⁵ : FiniteDimensional Real E\ninst✝⁴ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝³ : μ.IsOpenPosMeasure\nX : Type u_2\ninst✝² : NormedAddCommGroup X\ninst✝¹ : NormedSpace Real X\ninst✝ : CompleteSpace X\nz : X\n⊢ Eq (MeasureTheory.integral μ fun x => HSMul.hSMul (f.normed μ x) z) z","decl":"theorem integral_normed_smul {X} [NormedAddCommGroup X] [NormedSpace ℝ X]\n    [CompleteSpace X] (z : X) : ∫ x, f.normed μ x • z ∂μ = z := by\n  simp_rw [integral_smul_const, f.integral_normed (μ := μ), one_smul]\n\n"}
{"name":"ContDiffBump.measure_closedBall_le_integral","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\ninst✝⁴ : HasContDiffBump E\ninst✝³ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝² : BorelSpace E\ninst✝¹ : FiniteDimensional Real E\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ LE.le (μ (Metric.closedBall c f.rIn)).toReal (MeasureTheory.integral μ fun x => ↑f x)","decl":"theorem measure_closedBall_le_integral : (μ (closedBall c f.rIn)).toReal ≤ ∫ x, f x ∂μ := by calc\n  (μ (closedBall c f.rIn)).toReal = ∫ x in closedBall c f.rIn, 1 ∂μ := by simp\n  _ = ∫ x in closedBall c f.rIn, f x ∂μ := setIntegral_congr_fun measurableSet_closedBall\n        (fun x hx ↦ (one_of_mem_closedBall f hx).symm)\n  _ ≤ ∫ x, f x ∂μ := setIntegral_le_integral f.integrable (Eventually.of_forall (fun x ↦ f.nonneg))\n\n"}
{"name":"ContDiffBump.normed_le_div_measure_closedBall_rIn","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsOpenPosMeasure\nx : E\n⊢ LE.le (f.normed μ x) (HDiv.hDiv 1 (μ (Metric.closedBall c f.rIn)).toReal)","decl":"theorem normed_le_div_measure_closedBall_rIn [μ.IsOpenPosMeasure] (x : E) :\n    f.normed μ x ≤ 1 / (μ (closedBall c f.rIn)).toReal := by\n  rw [normed_def]\n  gcongr\n  · exact ENNReal.toReal_pos (measure_closedBall_pos _ _ f.rIn_pos).ne' measure_closedBall_lt_top.ne\n  · exact f.le_one\n  · exact f.measure_closedBall_le_integral μ\n\n"}
{"name":"ContDiffBump.integral_le_measure_closedBall","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁶ : NormedAddCommGroup E\ninst✝⁵ : NormedSpace Real E\ninst✝⁴ : HasContDiffBump E\ninst✝³ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝² : BorelSpace E\ninst✝¹ : FiniteDimensional Real E\ninst✝ : MeasureTheory.IsLocallyFiniteMeasure μ\n⊢ LE.le (MeasureTheory.integral μ fun x => ↑f x) (μ (Metric.closedBall c f.rOut)).toReal","decl":"theorem integral_le_measure_closedBall : ∫ x, f x ∂μ ≤ (μ (closedBall c f.rOut)).toReal := by calc\n  ∫ x, f x ∂μ = ∫ x in closedBall c f.rOut, f x ∂μ := by\n    apply (setIntegral_eq_integral_of_forall_compl_eq_zero (fun x hx ↦ ?_)).symm\n    apply f.zero_of_le_dist (le_of_lt _)\n    simpa using hx\n  _ ≤ ∫ x in closedBall c f.rOut, 1 ∂μ := by\n    apply setIntegral_mono f.integrable.integrableOn _ (fun x ↦ f.le_one)\n    simp [measure_closedBall_lt_top]\n  _ = (μ (closedBall c f.rOut)).toReal := by simp\n\n"}
{"name":"ContDiffBump.measure_closedBall_div_le_integral","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsAddHaarMeasure\nK : Real\nh : LE.le f.rOut (HMul.hMul K f.rIn)\n⊢ LE.le (HDiv.hDiv (μ (Metric.closedBall c f.rOut)).toReal (HPow.hPow K (Module.finrank Real E))) (MeasureTheory.integral μ fun x => ↑f x)","decl":"theorem measure_closedBall_div_le_integral [IsAddHaarMeasure μ] (K : ℝ) (h : f.rOut ≤ K * f.rIn) :\n    (μ (closedBall c f.rOut)).toReal / K ^ finrank ℝ E ≤ ∫ x, f x ∂μ := by\n  have K_pos : 0 < K := by\n    simpa [f.rIn_pos, not_lt.2 f.rIn_pos.le] using mul_pos_iff.1 (f.rOut_pos.trans_le h)\n  apply le_trans _ (f.measure_closedBall_le_integral μ)\n  rw [div_le_iff₀ (pow_pos K_pos _), addHaar_closedBall' _ _ f.rIn_pos.le,\n    addHaar_closedBall' _ _ f.rOut_pos.le, ENNReal.toReal_mul, ENNReal.toReal_mul,\n    ENNReal.toReal_ofReal (pow_nonneg f.rOut_pos.le _),\n    ENNReal.toReal_ofReal (pow_nonneg f.rIn_pos.le _), mul_assoc, mul_comm _ (K ^ _), ← mul_assoc,\n    ← mul_pow, mul_comm _ K]\n  gcongr\n  exact f.rOut_pos.le\n\n"}
{"name":"ContDiffBump.normed_le_div_measure_closedBall_rOut","module":"Mathlib.Analysis.Calculus.BumpFunction.Normed","initialProofState":"E : Type u_1\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : HasContDiffBump E\ninst✝⁴ : MeasurableSpace E\nc : E\nf : ContDiffBump c\nμ : MeasureTheory.Measure E\ninst✝³ : BorelSpace E\ninst✝² : FiniteDimensional Real E\ninst✝¹ : MeasureTheory.IsLocallyFiniteMeasure μ\ninst✝ : μ.IsAddHaarMeasure\nK : Real\nh : LE.le f.rOut (HMul.hMul K f.rIn)\nx : E\n⊢ LE.le (f.normed μ x) (HDiv.hDiv (HPow.hPow K (Module.finrank Real E)) (μ (Metric.closedBall c f.rOut)).toReal)","decl":"theorem normed_le_div_measure_closedBall_rOut [IsAddHaarMeasure μ] (K : ℝ) (h : f.rOut ≤ K * f.rIn)\n    (x : E) :\n    f.normed μ x ≤ K ^ finrank ℝ E / (μ (closedBall c f.rOut)).toReal := by\n  have K_pos : 0 < K := by\n    simpa [f.rIn_pos, not_lt.2 f.rIn_pos.le] using mul_pos_iff.1 (f.rOut_pos.trans_le h)\n  have : f x / ∫ y, f y ∂μ ≤ 1 / ∫ y, f y ∂μ := by\n    gcongr\n    · exact f.integral_pos.le\n    · exact f.le_one\n  apply this.trans\n  rw [div_le_div_iff₀ f.integral_pos, one_mul, ← div_le_iff₀' (pow_pos K_pos _)]\n  · exact f.measure_closedBall_div_le_integral μ K h\n  · exact ENNReal.toReal_pos (measure_closedBall_pos _ _ f.rOut_pos).ne'\n      measure_closedBall_lt_top.ne\n\n"}
