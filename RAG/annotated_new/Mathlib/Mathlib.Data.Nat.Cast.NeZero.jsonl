{"name":"NeZero.one_le","module":"Mathlib.Data.Nat.Cast.NeZero","initialProofState":"n : Nat\ninst✝ : NeZero n\n⊢ LE.le 1 n","decl":"theorem one_le {n : ℕ} [NeZero n] : 1 ≤ n := by have := NeZero.ne n; omega\n\n"}
{"name":"NeZero.natCast_ne","module":"Mathlib.Data.Nat.Cast.NeZero","initialProofState":"n : Nat\nR : Type u_1\ninst✝ : AddMonoidWithOne R\nh : NeZero ↑n\n⊢ Ne (↑n) 0","decl":"lemma natCast_ne (n : ℕ) (R) [AddMonoidWithOne R] [h : NeZero (n : R)] : (n : R) ≠ 0 := h.out\n\n"}
{"name":"NeZero.of_neZero_natCast","module":"Mathlib.Data.Nat.Cast.NeZero","initialProofState":"R : Type u_1\ninst✝ : AddMonoidWithOne R\nn : Nat\nh : NeZero ↑n\n⊢ NeZero n","decl":"lemma of_neZero_natCast (R) [AddMonoidWithOne R] {n : ℕ} [h : NeZero (n : R)] : NeZero n :=\n  ⟨by rintro rfl; exact h.out Nat.cast_zero⟩\n\n"}
{"name":"NeZero.pos_of_neZero_natCast","module":"Mathlib.Data.Nat.Cast.NeZero","initialProofState":"R : Type u_1\ninst✝¹ : AddMonoidWithOne R\nn : Nat\ninst✝ : NeZero ↑n\n⊢ LT.lt 0 n","decl":"lemma pos_of_neZero_natCast (R) [AddMonoidWithOne R] {n : ℕ} [NeZero (n : R)] : 0 < n :=\n  Nat.pos_of_ne_zero (of_neZero_natCast R).out\n\n"}
