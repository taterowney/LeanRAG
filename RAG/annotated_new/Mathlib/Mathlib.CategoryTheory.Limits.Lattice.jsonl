{"name":"CategoryTheory.Limits.CompleteLattice.hasFiniteLimits_of_semilatticeInf_orderTop","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeInf α\ninst✝ : OrderTop α\n⊢ CategoryTheory.Limits.HasFiniteLimits α","decl":"instance (priority := 100) hasFiniteLimits_of_semilatticeInf_orderTop [SemilatticeInf α]\n    [OrderTop α] : HasFiniteLimits α := ⟨by\n  intro J 𝒥₁ 𝒥₂\n  exact { has_limit := fun F => HasLimit.mk (finiteLimitCone F) }⟩\n\n-- see Note [lower instance priority]\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.hasFiniteColimits_of_semilatticeSup_orderBot","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeSup α\ninst✝ : OrderBot α\n⊢ CategoryTheory.Limits.HasFiniteColimits α","decl":"instance (priority := 100) hasFiniteColimits_of_semilatticeSup_orderBot [SemilatticeSup α]\n    [OrderBot α] : HasFiniteColimits α := ⟨by\n  intro J 𝒥₁ 𝒥₂\n  exact { has_colimit := fun F => HasColimit.mk (finiteColimitCocone F) }⟩\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.finite_limit_eq_finset_univ_inf","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\nJ : Type w\ninst✝³ : CategoryTheory.SmallCategory J\ninst✝² : CategoryTheory.FinCategory J\ninst✝¹ : SemilatticeInf α\ninst✝ : OrderTop α\nF : CategoryTheory.Functor J α\n⊢ Eq (CategoryTheory.Limits.limit F) (Finset.univ.inf F.obj)","decl":"/-- The limit of a functor from a finite diagram into a `SemilatticeInf` with `OrderTop` is the\ninfimum of the objects in the image.\n-/\ntheorem finite_limit_eq_finset_univ_inf [SemilatticeInf α] [OrderTop α] (F : J ⥤ α) :\n    limit F = Finset.univ.inf F.obj :=\n  (IsLimit.conePointUniqueUpToIso (limit.isLimit F) (finiteLimitCone F).isLimit).to_eq\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.finite_colimit_eq_finset_univ_sup","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\nJ : Type w\ninst✝³ : CategoryTheory.SmallCategory J\ninst✝² : CategoryTheory.FinCategory J\ninst✝¹ : SemilatticeSup α\ninst✝ : OrderBot α\nF : CategoryTheory.Functor J α\n⊢ Eq (CategoryTheory.Limits.colimit F) (Finset.univ.sup F.obj)","decl":"/-- The colimit of a functor from a finite diagram into a `SemilatticeSup` with `OrderBot`\nis the supremum of the objects in the image.\n-/\ntheorem finite_colimit_eq_finset_univ_sup [SemilatticeSup α] [OrderBot α] (F : J ⥤ α) :\n    colimit F = Finset.univ.sup F.obj :=\n  (IsColimit.coconePointUniqueUpToIso (colimit.isColimit F) (finiteColimitCocone F).isColimit).to_eq\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.finite_product_eq_finset_inf","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝² : SemilatticeInf α\ninst✝¹ : OrderTop α\nι : Type u\ninst✝ : Fintype ι\nf : ι → α\n⊢ Eq (CategoryTheory.Limits.piObj f) (Fintype.elems.inf f)","decl":"/--\nA finite product in the category of a `SemilatticeInf` with `OrderTop` is the same as the infimum.\n-/\ntheorem finite_product_eq_finset_inf [SemilatticeInf α] [OrderTop α] {ι : Type u} [Fintype ι]\n    (f : ι → α) : ∏ᶜ f = Fintype.elems.inf f := by\n  trans\n  · exact\n      (IsLimit.conePointUniqueUpToIso (limit.isLimit _)\n          (finiteLimitCone (Discrete.functor f)).isLimit).to_eq\n  change Finset.univ.inf (f ∘ discreteEquiv.toEmbedding) = Fintype.elems.inf f\n  simp only [← Finset.inf_map, Finset.univ_map_equiv_to_embedding]\n  rfl\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.finite_coproduct_eq_finset_sup","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝² : SemilatticeSup α\ninst✝¹ : OrderBot α\nι : Type u\ninst✝ : Fintype ι\nf : ι → α\n⊢ Eq (CategoryTheory.Limits.sigmaObj f) (Fintype.elems.sup f)","decl":"/-- A finite coproduct in the category of a `SemilatticeSup` with `OrderBot` is the same as the\nsupremum.\n-/\ntheorem finite_coproduct_eq_finset_sup [SemilatticeSup α] [OrderBot α] {ι : Type u} [Fintype ι]\n    (f : ι → α) : ∐ f = Fintype.elems.sup f := by\n  trans\n  · exact\n      (IsColimit.coconePointUniqueUpToIso (colimit.isColimit _)\n          (finiteColimitCocone (Discrete.functor f)).isColimit).to_eq\n  change Finset.univ.sup (f ∘ discreteEquiv.toEmbedding) = Fintype.elems.sup f\n  simp only [← Finset.sup_map, Finset.univ_map_equiv_to_embedding]\n  rfl\n\n-- see Note [lower instance priority]\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.instHasBinaryProductsOfOrderTop","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeInf α\ninst✝ : OrderTop α\n⊢ CategoryTheory.Limits.HasBinaryProducts α","decl":"instance (priority := 100) [SemilatticeInf α] [OrderTop α] : HasBinaryProducts α := by\n  have : ∀ x y : α, HasLimit (pair x y) := by\n    letI := hasFiniteLimits_of_hasFiniteLimits_of_size.{u} α\n    infer_instance\n  apply hasBinaryProducts_of_hasLimit_pair\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.prod_eq_inf","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeInf α\ninst✝ : OrderTop α\nx y : α\n⊢ Eq (CategoryTheory.Limits.prod x y) (Min.min x y)","decl":"/-- The binary product in the category of a `SemilatticeInf` with `OrderTop` is the same as the\ninfimum.\n-/\n@[simp]\ntheorem prod_eq_inf [SemilatticeInf α] [OrderTop α] (x y : α) : Limits.prod x y = x ⊓ y :=\n  calc\n    Limits.prod x y = limit (pair x y) := rfl\n    _ = Finset.univ.inf (pair x y).obj := by rw [finite_limit_eq_finset_univ_inf (pair.{u} x y)]\n    _ = x ⊓ (y ⊓ ⊤) := rfl\n    -- Note: finset.inf is realized as a fold, hence the definitional equality\n    _ = x ⊓ y := by rw [inf_top_eq]\n\n-- see Note [lower instance priority]\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.instHasBinaryCoproductsOfOrderBot","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeSup α\ninst✝ : OrderBot α\n⊢ CategoryTheory.Limits.HasBinaryCoproducts α","decl":"instance (priority := 100) [SemilatticeSup α] [OrderBot α] : HasBinaryCoproducts α := by\n  have : ∀ x y : α, HasColimit (pair x y) := by\n    letI := hasFiniteColimits_of_hasFiniteColimits_of_size.{u} α\n    infer_instance\n  apply hasBinaryCoproducts_of_hasColimit_pair\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.coprod_eq_sup","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeSup α\ninst✝ : OrderBot α\nx y : α\n⊢ Eq (CategoryTheory.Limits.coprod x y) (Max.max x y)","decl":"/-- The binary coproduct in the category of a `SemilatticeSup` with `OrderBot` is the same as the\nsupremum.\n-/\n@[simp]\ntheorem coprod_eq_sup [SemilatticeSup α] [OrderBot α] (x y : α) : Limits.coprod x y = x ⊔ y :=\n  calc\n    Limits.coprod x y = colimit (pair x y) := rfl\n    _ = Finset.univ.sup (pair x y).obj := by rw [finite_colimit_eq_finset_univ_sup (pair x y)]\n    _ = x ⊔ (y ⊔ ⊥) := rfl\n    -- Note: Finset.sup is realized as a fold, hence the definitional equality\n    _ = x ⊔ y := by rw [sup_bot_eq]\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.pullback_eq_inf","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeInf α\ninst✝ : OrderTop α\nx y z : α\nf : Quiver.Hom x z\ng : Quiver.Hom y z\n⊢ Eq (CategoryTheory.Limits.pullback f g) (Min.min x y)","decl":"/-- The pullback in the category of a `SemilatticeInf` with `OrderTop` is the same as the infimum\nover the objects.\n-/\n@[simp]\ntheorem pullback_eq_inf [SemilatticeInf α] [OrderTop α] {x y z : α} (f : x ⟶ z) (g : y ⟶ z) :\n    pullback f g = x ⊓ y :=\n  calc\n    pullback f g = limit (cospan f g) := rfl\n    _ = Finset.univ.inf (cospan f g).obj := by rw [finite_limit_eq_finset_univ_inf]\n    _ = z ⊓ (x ⊓ (y ⊓ ⊤)) := rfl\n    _ = z ⊓ (x ⊓ y) := by rw [inf_top_eq]\n    _ = x ⊓ y := inf_eq_right.mpr (inf_le_of_left_le f.le)\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.pushout_eq_sup","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : SemilatticeSup α\ninst✝ : OrderBot α\nx y z : α\nf : Quiver.Hom z x\ng : Quiver.Hom z y\n⊢ Eq (CategoryTheory.Limits.pushout f g) (Max.max x y)","decl":"/-- The pushout in the category of a `SemilatticeSup` with `OrderBot` is the same as the supremum\nover the objects.\n-/\n@[simp]\ntheorem pushout_eq_sup [SemilatticeSup α] [OrderBot α] (x y z : α) (f : z ⟶ x) (g : z ⟶ y) :\n    pushout f g = x ⊔ y :=\n  calc\n    pushout f g = colimit (span f g) := rfl\n    _ = Finset.univ.sup (span f g).obj := by rw [finite_colimit_eq_finset_univ_sup]\n    _ = z ⊔ (x ⊔ (y ⊔ ⊥)) := rfl\n    _ = z ⊔ (x ⊔ y) := by rw [sup_bot_eq]\n    _ = x ⊔ y := sup_eq_right.mpr (le_sup_of_le_left f.le)\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.hasLimits_of_completeLattice","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\n⊢ CategoryTheory.Limits.HasLimits α","decl":"instance (priority := 100) hasLimits_of_completeLattice : HasLimits α where\n  has_limits_of_shape _ := { has_limit := fun F => HasLimit.mk (limitCone F) }\n\n-- see Note [lower instance priority]\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.hasColimits_of_completeLattice","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝ : CompleteLattice α\n⊢ CategoryTheory.Limits.HasColimits α","decl":"instance (priority := 100) hasColimits_of_completeLattice : HasColimits α where\n  has_colimits_of_shape _ := { has_colimit := fun F => HasColimit.mk (colimitCocone F) }\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.limit_eq_iInf","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : CompleteLattice α\nJ : Type u\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J α\n⊢ Eq (CategoryTheory.Limits.limit F) (iInf F.obj)","decl":"/-- The limit of a functor into a complete lattice is the infimum of the objects in the image.\n-/\ntheorem limit_eq_iInf (F : J ⥤ α) : limit F = iInf F.obj :=\n  (IsLimit.conePointUniqueUpToIso (limit.isLimit F) (limitCone F).isLimit).to_eq\n\n"}
{"name":"CategoryTheory.Limits.CompleteLattice.colimit_eq_iSup","module":"Mathlib.CategoryTheory.Limits.Lattice","initialProofState":"α : Type u\ninst✝¹ : CompleteLattice α\nJ : Type u\ninst✝ : CategoryTheory.SmallCategory J\nF : CategoryTheory.Functor J α\n⊢ Eq (CategoryTheory.Limits.colimit F) (iSup F.obj)","decl":"/-- The colimit of a functor into a complete lattice is the supremum of the objects in the image.\n-/\ntheorem colimit_eq_iSup (F : J ⥤ α) : colimit F = iSup F.obj :=\n  (IsColimit.coconePointUniqueUpToIso (colimit.isColimit F) (colimitCocone F).isColimit).to_eq\n\n"}
