{"name":"MeasureTheory.tendstoInMeasure_iff_norm","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : SeminormedAddCommGroup E\nl : Filter ι\nf : ι → α → E\ng : α → E\n⊢ Iff (MeasureTheory.TendstoInMeasure μ f l g) (∀ (ε : Real), LT.lt 0 ε → Filter.Tendsto (fun i => μ (setOf fun x => LE.le ε (Norm.norm (HSub.hSub (f i x) (g x))))) l (nhds 0))","decl":"theorem tendstoInMeasure_iff_norm [SeminormedAddCommGroup E] {l : Filter ι} {f : ι → α → E}\n    {g : α → E} :\n    TendstoInMeasure μ f l g ↔\n      ∀ ε, 0 < ε → Tendsto (fun i => μ { x | ε ≤ ‖f i x - g x‖ }) l (𝓝 0) := by\n  simp_rw [TendstoInMeasure, dist_eq_norm]\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.congr'","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Dist E\nl : Filter ι\nf f' : ι → α → E\ng g' : α → E\nh_left : Filter.Eventually (fun i => (MeasureTheory.ae μ).EventuallyEq (f i) (f' i)) l\nh_right : (MeasureTheory.ae μ).EventuallyEq g g'\nh_tendsto : MeasureTheory.TendstoInMeasure μ f l g\n⊢ MeasureTheory.TendstoInMeasure μ f' l g'","decl":"protected theorem congr' (h_left : ∀ᶠ i in l, f i =ᵐ[μ] f' i) (h_right : g =ᵐ[μ] g')\n    (h_tendsto : TendstoInMeasure μ f l g) : TendstoInMeasure μ f' l g' := by\n  intro ε hε\n  suffices\n    (fun i => μ { x | ε ≤ dist (f' i x) (g' x) }) =ᶠ[l] fun i => μ { x | ε ≤ dist (f i x) (g x) } by\n    rw [tendsto_congr' this]\n    exact h_tendsto ε hε\n  filter_upwards [h_left] with i h_ae_eq\n  refine measure_congr ?_\n  filter_upwards [h_ae_eq, h_right] with x hxf hxg\n  rw [eq_iff_iff]\n  change ε ≤ dist (f' i x) (g' x) ↔ ε ≤ dist (f i x) (g x)\n  rw [hxg, hxf]\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.congr","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Dist E\nl : Filter ι\nf f' : ι → α → E\ng g' : α → E\nh_left : ∀ (i : ι), (MeasureTheory.ae μ).EventuallyEq (f i) (f' i)\nh_right : (MeasureTheory.ae μ).EventuallyEq g g'\nh_tendsto : MeasureTheory.TendstoInMeasure μ f l g\n⊢ MeasureTheory.TendstoInMeasure μ f' l g'","decl":"protected theorem congr (h_left : ∀ i, f i =ᵐ[μ] f' i) (h_right : g =ᵐ[μ] g')\n    (h_tendsto : TendstoInMeasure μ f l g) : TendstoInMeasure μ f' l g' :=\n  TendstoInMeasure.congr' (Eventually.of_forall h_left) h_right h_tendsto\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.congr_left","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Dist E\nl : Filter ι\nf f' : ι → α → E\ng : α → E\nh : ∀ (i : ι), (MeasureTheory.ae μ).EventuallyEq (f i) (f' i)\nh_tendsto : MeasureTheory.TendstoInMeasure μ f l g\n⊢ MeasureTheory.TendstoInMeasure μ f' l g","decl":"theorem congr_left (h : ∀ i, f i =ᵐ[μ] f' i) (h_tendsto : TendstoInMeasure μ f l g) :\n    TendstoInMeasure μ f' l g :=\n  h_tendsto.congr h EventuallyEq.rfl\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.congr_right","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : Dist E\nl : Filter ι\nf : ι → α → E\ng g' : α → E\nh : (MeasureTheory.ae μ).EventuallyEq g g'\nh_tendsto : MeasureTheory.TendstoInMeasure μ f l g\n⊢ MeasureTheory.TendstoInMeasure μ f l g'","decl":"theorem congr_right (h : g =ᵐ[μ] g') (h_tendsto : TendstoInMeasure μ f l g) :\n    TendstoInMeasure μ f l g' :=\n  h_tendsto.congr (fun _ => EventuallyEq.rfl) h\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_ae_of_stronglyMeasurable","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : MetricSpace E\nf : Nat → α → E\ng : α → E\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhf : ∀ (n : Nat), MeasureTheory.StronglyMeasurable (f n)\nhg : MeasureTheory.StronglyMeasurable g\nhfg : Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.TendstoInMeasure μ f Filter.atTop g","decl":"/-- Auxiliary lemma for `tendstoInMeasure_of_tendsto_ae`. -/\ntheorem tendstoInMeasure_of_tendsto_ae_of_stronglyMeasurable [IsFiniteMeasure μ]\n    (hf : ∀ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g)\n    (hfg : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (g x))) : TendstoInMeasure μ f atTop g := by\n  refine fun ε hε => ENNReal.tendsto_atTop_zero.mpr fun δ hδ => ?_\n  by_cases hδi : δ = ∞\n  · simp only [hδi, imp_true_iff, le_top, exists_const]\n  lift δ to ℝ≥0 using hδi\n  rw [gt_iff_lt, ENNReal.coe_pos, ← NNReal.coe_pos] at hδ\n  obtain ⟨t, _, ht, hunif⟩ := tendstoUniformlyOn_of_ae_tendsto' hf hg hfg hδ\n  rw [ENNReal.ofReal_coe_nnreal] at ht\n  rw [Metric.tendstoUniformlyOn_iff] at hunif\n  obtain ⟨N, hN⟩ := eventually_atTop.1 (hunif ε hε)\n  refine ⟨N, fun n hn => ?_⟩\n  suffices { x : α | ε ≤ dist (f n x) (g x) } ⊆ t from (measure_mono this).trans ht\n  rw [← Set.compl_subset_compl]\n  intro x hx\n  rw [Set.mem_compl_iff, Set.nmem_setOf_iff, dist_comm, not_le]\n  exact hN n hn x hx\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_ae","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : MetricSpace E\nf : Nat → α → E\ng : α → E\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nhf : ∀ (n : Nat), MeasureTheory.AEStronglyMeasurable (f n) μ\nhfg : Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)\n⊢ MeasureTheory.TendstoInMeasure μ f Filter.atTop g","decl":"/-- Convergence a.e. implies convergence in measure in a finite measure space. -/\ntheorem tendstoInMeasure_of_tendsto_ae [IsFiniteMeasure μ] (hf : ∀ n, AEStronglyMeasurable (f n) μ)\n    (hfg : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (g x))) : TendstoInMeasure μ f atTop g := by\n  have hg : AEStronglyMeasurable g μ := aestronglyMeasurable_of_tendsto_ae _ hf hfg\n  refine TendstoInMeasure.congr (fun i => (hf i).ae_eq_mk.symm) hg.ae_eq_mk.symm ?_\n  refine tendstoInMeasure_of_tendsto_ae_of_stronglyMeasurable\n    (fun i => (hf i).stronglyMeasurable_mk) hg.stronglyMeasurable_mk ?_\n  have hf_eq_ae : ∀ᵐ x ∂μ, ∀ n, (hf n).mk (f n) x = f n x :=\n    ae_all_iff.mpr fun n => (hf n).ae_eq_mk.symm\n  filter_upwards [hf_eq_ae, hg.ae_eq_mk, hfg] with x hxf hxg hxfg\n  rw [← hxg, funext fun n => hxf n]\n  exact hxfg\n\n"}
{"name":"MeasureTheory.ExistsSeqTendstoAe.exists_nat_measure_lt_two_inv","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MetricSpace E\nf : Nat → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f Filter.atTop g\nn : Nat\n⊢ Exists fun N => ∀ (m_1 : Nat), GE.ge m_1 N → LE.le (μ (setOf fun x => LE.le (HPow.hPow (Inv.inv 2) n) (Dist.dist (f m_1 x) (g x)))) (HPow.hPow (Inv.inv 2) n)","decl":"theorem exists_nat_measure_lt_two_inv (hfg : TendstoInMeasure μ f atTop g) (n : ℕ) :\n    ∃ N, ∀ m ≥ N, μ { x | (2 : ℝ)⁻¹ ^ n ≤ dist (f m x) (g x) } ≤ (2⁻¹ : ℝ≥0∞) ^ n := by\n  specialize hfg ((2⁻¹ : ℝ) ^ n) (by simp only [Real.rpow_natCast, inv_pos, zero_lt_two, pow_pos])\n  rw [ENNReal.tendsto_atTop_zero] at hfg\n  exact hfg ((2 : ℝ≥0∞)⁻¹ ^ n) (pos_iff_ne_zero.mpr fun h_zero => by simpa using pow_eq_zero h_zero)\n\n"}
{"name":"MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq_succ","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MetricSpace E\nf : Nat → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f Filter.atTop g\nn : Nat\n⊢ Eq (MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq hfg (HAdd.hAdd n 1)) (Max.max (MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeqAux hfg (HAdd.hAdd n 1)) (HAdd.hAdd (MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq hfg n) 1))","decl":"theorem seqTendstoAeSeq_succ (hfg : TendstoInMeasure μ f atTop g) {n : ℕ} :\n    seqTendstoAeSeq hfg (n + 1) =\n      max (seqTendstoAeSeqAux hfg (n + 1)) (seqTendstoAeSeq hfg n + 1) := by\n  rw [seqTendstoAeSeq]\n\n"}
{"name":"MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq_spec","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MetricSpace E\nf : Nat → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f Filter.atTop g\nn k : Nat\nhn : LE.le (MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq hfg n) k\n⊢ LE.le (μ (setOf fun x => LE.le (HPow.hPow (Inv.inv 2) n) (Dist.dist (f k x) (g x)))) (HPow.hPow (Inv.inv 2) n)","decl":"theorem seqTendstoAeSeq_spec (hfg : TendstoInMeasure μ f atTop g) (n k : ℕ)\n    (hn : seqTendstoAeSeq hfg n ≤ k) :\n    μ { x | (2 : ℝ)⁻¹ ^ n ≤ dist (f k x) (g x) } ≤ (2 : ℝ≥0∞)⁻¹ ^ n := by\n  cases n\n  · exact Classical.choose_spec (exists_nat_measure_lt_two_inv hfg 0) k hn\n  · exact Classical.choose_spec\n      (exists_nat_measure_lt_two_inv hfg _) _ (le_trans (le_max_left _ _) hn)\n\n"}
{"name":"MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq_strictMono","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MetricSpace E\nf : Nat → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f Filter.atTop g\n⊢ StrictMono (MeasureTheory.ExistsSeqTendstoAe.seqTendstoAeSeq hfg)","decl":"theorem seqTendstoAeSeq_strictMono (hfg : TendstoInMeasure μ f atTop g) :\n    StrictMono (seqTendstoAeSeq hfg) := by\n  refine strictMono_nat_of_lt_succ fun n => ?_\n  rw [seqTendstoAeSeq_succ]\n  exact lt_of_lt_of_le (lt_add_one <| seqTendstoAeSeq hfg n) (le_max_right _ _)\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.exists_seq_tendsto_ae","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MetricSpace E\nf : Nat → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f Filter.atTop g\n⊢ Exists fun ns => And (StrictMono ns) (Filter.Eventually (fun x => Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ))","decl":"/-- If `f` is a sequence of functions which converges in measure to `g`, then there exists a\nsubsequence of `f` which converges a.e. to `g`. -/\ntheorem TendstoInMeasure.exists_seq_tendsto_ae (hfg : TendstoInMeasure μ f atTop g) :\n    ∃ ns : ℕ → ℕ, StrictMono ns ∧ ∀ᵐ x ∂μ, Tendsto (fun i => f (ns i) x) atTop (𝓝 (g x)) := by\n  /- Since `f` tends to `g` in measure, it has a subsequence `k ↦ f (ns k)` such that\n    `μ {|f (ns k) - g| ≥ 2⁻ᵏ} ≤ 2⁻ᵏ` for all `k`. Defining\n    `s := ⋂ k, ⋃ i ≥ k, {|f (ns k) - g| ≥ 2⁻ᵏ}`, we see that `μ s = 0` by the\n    first Borel-Cantelli lemma.\n\n    On the other hand, as `s` is precisely the set for which `f (ns k)`\n    doesn't converge to `g`, `f (ns k)` converges almost everywhere to `g` as required. -/\n  have h_lt_ε_real : ∀ (ε : ℝ) (_ : 0 < ε), ∃ k : ℕ, 2 * (2 : ℝ)⁻¹ ^ k < ε := by\n    intro ε hε\n    obtain ⟨k, h_k⟩ : ∃ k : ℕ, (2 : ℝ)⁻¹ ^ k < ε := exists_pow_lt_of_lt_one hε (by norm_num)\n    refine ⟨k + 1, (le_of_eq ?_).trans_lt h_k⟩\n    rw [pow_add]; ring\n  set ns := ExistsSeqTendstoAe.seqTendstoAeSeq hfg\n  use ns\n  let S := fun k => { x | (2 : ℝ)⁻¹ ^ k ≤ dist (f (ns k) x) (g x) }\n  have hμS_le : ∀ k, μ (S k) ≤ (2 : ℝ≥0∞)⁻¹ ^ k :=\n    fun k => ExistsSeqTendstoAe.seqTendstoAeSeq_spec hfg k (ns k) le_rfl\n  set s := Filter.atTop.limsup S with hs\n  have hμs : μ s = 0 := by\n    refine measure_limsup_atTop_eq_zero (ne_top_of_le_ne_top ?_ (ENNReal.tsum_le_tsum hμS_le))\n    simpa only [ENNReal.tsum_geometric, ENNReal.one_sub_inv_two, inv_inv] using ENNReal.ofNat_ne_top\n  have h_tendsto : ∀ x ∈ sᶜ, Tendsto (fun i => f (ns i) x) atTop (𝓝 (g x)) := by\n    refine fun x hx => Metric.tendsto_atTop.mpr fun ε hε => ?_\n    rw [hs, limsup_eq_iInf_iSup_of_nat] at hx\n    simp only [S, Set.iSup_eq_iUnion, Set.iInf_eq_iInter, Set.compl_iInter, Set.compl_iUnion,\n      Set.mem_iUnion, Set.mem_iInter, Set.mem_compl_iff, Set.mem_setOf_eq, not_le] at hx\n    obtain ⟨N, hNx⟩ := hx\n    obtain ⟨k, hk_lt_ε⟩ := h_lt_ε_real ε hε\n    refine ⟨max N (k - 1), fun n hn_ge => lt_of_le_of_lt ?_ hk_lt_ε⟩\n    specialize hNx n ((le_max_left _ _).trans hn_ge)\n    have h_inv_n_le_k : (2 : ℝ)⁻¹ ^ n ≤ 2 * (2 : ℝ)⁻¹ ^ k := by\n      rw [mul_comm, ← inv_mul_le_iff₀' (zero_lt_two' ℝ)]\n      conv_lhs =>\n        congr\n        rw [← pow_one (2 : ℝ)⁻¹]\n      rw [← pow_add, add_comm]\n      exact pow_le_pow_of_le_one (one_div (2 : ℝ) ▸ one_half_pos.le)\n        (inv_le_one_of_one_le₀ one_le_two)\n        ((le_tsub_add.trans (add_le_add_right (le_max_right _ _) 1)).trans\n          (add_le_add_right hn_ge 1))\n    exact le_trans hNx.le h_inv_n_le_k\n  rw [ae_iff]\n  refine ⟨ExistsSeqTendstoAe.seqTendstoAeSeq_strictMono hfg, measure_mono_null (fun x => ?_) hμs⟩\n  rw [Set.mem_setOf_eq, ← @Classical.not_not (x ∈ s), not_imp_not]\n  exact h_tendsto x\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.exists_seq_tendstoInMeasure_atTop","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : MetricSpace E\nu : Filter ι\ninst✝¹ : u.NeBot\ninst✝ : u.IsCountablyGenerated\nf : ι → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f u g\n⊢ Exists fun ns => MeasureTheory.TendstoInMeasure μ (fun n => f (ns n)) Filter.atTop g","decl":"theorem TendstoInMeasure.exists_seq_tendstoInMeasure_atTop {u : Filter ι} [NeBot u]\n    [IsCountablyGenerated u] {f : ι → α → E} {g : α → E} (hfg : TendstoInMeasure μ f u g) :\n    ∃ ns : ℕ → ι, TendstoInMeasure μ (fun n => f (ns n)) atTop g := by\n  obtain ⟨ns, h_tendsto_ns⟩ : ∃ ns : ℕ → ι, Tendsto ns atTop u := exists_seq_tendsto u\n  exact ⟨ns, fun ε hε => (hfg ε hε).comp h_tendsto_ns⟩\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.exists_seq_tendsto_ae'","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : MetricSpace E\nu : Filter ι\ninst✝¹ : u.NeBot\ninst✝ : u.IsCountablyGenerated\nf : ι → α → E\ng : α → E\nhfg : MeasureTheory.TendstoInMeasure μ f u g\n⊢ Exists fun ns => Filter.Eventually (fun x => Filter.Tendsto (fun i => f (ns i) x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)","decl":"theorem TendstoInMeasure.exists_seq_tendsto_ae' {u : Filter ι} [NeBot u] [IsCountablyGenerated u]\n    {f : ι → α → E} {g : α → E} (hfg : TendstoInMeasure μ f u g) :\n    ∃ ns : ℕ → ι, ∀ᵐ x ∂μ, Tendsto (fun i => f (ns i) x) atTop (𝓝 (g x)) := by\n  obtain ⟨ms, hms⟩ := hfg.exists_seq_tendstoInMeasure_atTop\n  obtain ⟨ns, -, hns⟩ := hms.exists_seq_tendsto_ae\n  exact ⟨ms ∘ ns, hns⟩\n\n"}
{"name":"MeasureTheory.TendstoInMeasure.aemeasurable","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁴ : MeasurableSpace E\ninst✝³ : NormedAddCommGroup E\ninst✝² : BorelSpace E\nu : Filter ι\ninst✝¹ : u.NeBot\ninst✝ : u.IsCountablyGenerated\nf : ι → α → E\ng : α → E\nhf : ∀ (n : ι), AEMeasurable (f n) μ\nh_tendsto : MeasureTheory.TendstoInMeasure μ f u g\n⊢ AEMeasurable g μ","decl":"theorem TendstoInMeasure.aemeasurable {u : Filter ι} [NeBot u] [IsCountablyGenerated u]\n    {f : ι → α → E} {g : α → E} (hf : ∀ n, AEMeasurable (f n) μ)\n    (h_tendsto : TendstoInMeasure μ f u g) : AEMeasurable g μ := by\n  obtain ⟨ns, hns⟩ := h_tendsto.exists_seq_tendsto_ae'\n  exact aemeasurable_of_tendsto_metrizable_ae atTop (fun n => hf (ns n)) hns\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm_of_stronglyMeasurable","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup E\np : ENNReal\nf : ι → α → E\ng : α → E\nhp_ne_zero : Ne p 0\nhp_ne_top : Ne p Top.top\nhf : ∀ (n : ι), MeasureTheory.StronglyMeasurable (f n)\nhg : MeasureTheory.StronglyMeasurable g\nl : Filter ι\nhfg : Filter.Tendsto (fun n => MeasureTheory.eLpNorm (HSub.hSub (f n) g) p μ) l (nhds 0)\n⊢ MeasureTheory.TendstoInMeasure μ f l g","decl":"/-- This lemma is superseded by `MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm` where we\nallow `p = ∞` and only require `AEStronglyMeasurable`. -/\ntheorem tendstoInMeasure_of_tendsto_eLpNorm_of_stronglyMeasurable (hp_ne_zero : p ≠ 0)\n    (hp_ne_top : p ≠ ∞) (hf : ∀ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g)\n    {l : Filter ι} (hfg : Tendsto (fun n => eLpNorm (f n - g) p μ) l (𝓝 0)) :\n    TendstoInMeasure μ f l g := by\n  intro ε hε\n  replace hfg := ENNReal.Tendsto.const_mul\n    (Tendsto.ennrpow_const p.toReal hfg) (Or.inr <| @ENNReal.ofReal_ne_top (1 / ε ^ p.toReal))\n  simp only [mul_zero,\n    ENNReal.zero_rpow_of_pos (ENNReal.toReal_pos hp_ne_zero hp_ne_top)] at hfg\n  rw [ENNReal.tendsto_nhds_zero] at hfg ⊢\n  intro δ hδ\n  refine (hfg δ hδ).mono fun n hn => ?_\n  refine le_trans ?_ hn\n  rw [ENNReal.ofReal_div_of_pos (Real.rpow_pos_of_pos hε _), ENNReal.ofReal_one, mul_comm,\n    mul_one_div, ENNReal.le_div_iff_mul_le _ (Or.inl ENNReal.ofReal_ne_top), mul_comm]\n  · rw [← ENNReal.ofReal_rpow_of_pos hε]\n    convert mul_meas_ge_le_pow_eLpNorm' μ hp_ne_zero hp_ne_top ((hf n).sub hg).aestronglyMeasurable\n        (ENNReal.ofReal ε)\n    rw [dist_eq_norm, ← ENNReal.ofReal_le_ofReal_iff (norm_nonneg _), ofReal_norm_eq_enorm]\n    exact Iff.rfl\n  · rw [Ne, ENNReal.ofReal_eq_zero, not_le]\n    exact Or.inl (Real.rpow_pos_of_pos hε _)\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm_of_ne_top","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup E\np : ENNReal\nf : ι → α → E\ng : α → E\nhp_ne_zero : Ne p 0\nhp_ne_top : Ne p Top.top\nhf : ∀ (n : ι), MeasureTheory.AEStronglyMeasurable (f n) μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\nl : Filter ι\nhfg : Filter.Tendsto (fun n => MeasureTheory.eLpNorm (HSub.hSub (f n) g) p μ) l (nhds 0)\n⊢ MeasureTheory.TendstoInMeasure μ f l g","decl":"/-- This lemma is superseded by `MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm` where we\nallow `p = ∞`. -/\ntheorem tendstoInMeasure_of_tendsto_eLpNorm_of_ne_top (hp_ne_zero : p ≠ 0) (hp_ne_top : p ≠ ∞)\n    (hf : ∀ n, AEStronglyMeasurable (f n) μ) (hg : AEStronglyMeasurable g μ) {l : Filter ι}\n    (hfg : Tendsto (fun n => eLpNorm (f n - g) p μ) l (𝓝 0)) : TendstoInMeasure μ f l g := by\n  refine TendstoInMeasure.congr (fun i => (hf i).ae_eq_mk.symm) hg.ae_eq_mk.symm ?_\n  refine tendstoInMeasure_of_tendsto_eLpNorm_of_stronglyMeasurable\n    hp_ne_zero hp_ne_top (fun i => (hf i).stronglyMeasurable_mk) hg.stronglyMeasurable_mk ?_\n  have : (fun n => eLpNorm ((hf n).mk (f n) - hg.mk g) p μ) = fun n => eLpNorm (f n - g) p μ := by\n    ext1 n; refine eLpNorm_congr_ae (EventuallyEq.sub (hf n).ae_eq_mk.symm hg.ae_eq_mk.symm)\n  rw [this]\n  exact hfg\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm_top","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_4\ninst✝ : NormedAddCommGroup E\nf : ι → α → E\ng : α → E\nl : Filter ι\nhfg : Filter.Tendsto (fun n => MeasureTheory.eLpNorm (HSub.hSub (f n) g) Top.top μ) l (nhds 0)\n⊢ MeasureTheory.TendstoInMeasure μ f l g","decl":"/-- See also `MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm` which work for general\nLp-convergence for all `p ≠ 0`. -/\ntheorem tendstoInMeasure_of_tendsto_eLpNorm_top {E} [NormedAddCommGroup E] {f : ι → α → E}\n    {g : α → E} {l : Filter ι} (hfg : Tendsto (fun n => eLpNorm (f n - g) ∞ μ) l (𝓝 0)) :\n    TendstoInMeasure μ f l g := by\n  intro δ hδ\n  simp only [eLpNorm_exponent_top, eLpNormEssSup] at hfg\n  rw [ENNReal.tendsto_nhds_zero] at hfg ⊢\n  intro ε hε\n  specialize hfg (ENNReal.ofReal δ / 2)\n      (ENNReal.div_pos_iff.2 ⟨(ENNReal.ofReal_pos.2 hδ).ne.symm, ENNReal.ofNat_ne_top⟩)\n  refine hfg.mono fun n hn => ?_\n  simp only [gt_iff_lt, zero_tsub, zero_le, zero_add, Set.mem_Icc,\n    Pi.sub_apply] at *\n  have : essSup (fun x : α => (‖f n x - g x‖₊ : ℝ≥0∞)) μ < ENNReal.ofReal δ :=\n    lt_of_le_of_lt hn\n      (ENNReal.half_lt_self (ENNReal.ofReal_pos.2 hδ).ne.symm ENNReal.ofReal_lt_top.ne)\n  refine ((le_of_eq ?_).trans (ae_lt_of_essSup_lt this).le).trans hε.le\n  congr with x\n  simp only [ENNReal.ofReal_le_iff_le_toReal ENNReal.coe_lt_top.ne, ENNReal.coe_toReal, not_lt,\n    coe_nnnorm, Set.mem_setOf_eq, Set.mem_compl_iff]\n  rw [← dist_eq_norm (f n x) (g x)]\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_eLpNorm","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup E\np : ENNReal\nf : ι → α → E\ng : α → E\nl : Filter ι\nhp_ne_zero : Ne p 0\nhf : ∀ (n : ι), MeasureTheory.AEStronglyMeasurable (f n) μ\nhg : MeasureTheory.AEStronglyMeasurable g μ\nhfg : Filter.Tendsto (fun n => MeasureTheory.eLpNorm (HSub.hSub (f n) g) p μ) l (nhds 0)\n⊢ MeasureTheory.TendstoInMeasure μ f l g","decl":"/-- Convergence in Lp implies convergence in measure. -/\ntheorem tendstoInMeasure_of_tendsto_eLpNorm {l : Filter ι} (hp_ne_zero : p ≠ 0)\n    (hf : ∀ n, AEStronglyMeasurable (f n) μ) (hg : AEStronglyMeasurable g μ)\n    (hfg : Tendsto (fun n => eLpNorm (f n - g) p μ) l (𝓝 0)) : TendstoInMeasure μ f l g := by\n  by_cases hp_ne_top : p = ∞\n  · subst hp_ne_top\n    exact tendstoInMeasure_of_tendsto_eLpNorm_top hfg\n  · exact tendstoInMeasure_of_tendsto_eLpNorm_of_ne_top hp_ne_zero hp_ne_top hf hg hfg\n\n"}
{"name":"MeasureTheory.tendstoInMeasure_of_tendsto_Lp","module":"Mathlib.MeasureTheory.Function.ConvergenceInMeasure","initialProofState":"α : Type u_1\nι : Type u_2\nE : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : NormedAddCommGroup E\np : ENNReal\nhp : Fact (LE.le 1 p)\nf : ι → Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\ng : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\nl : Filter ι\nhfg : Filter.Tendsto f l (nhds g)\n⊢ MeasureTheory.TendstoInMeasure μ (fun n => ↑↑(f n)) l ↑↑g","decl":"/-- Convergence in Lp implies convergence in measure. -/\ntheorem tendstoInMeasure_of_tendsto_Lp [hp : Fact (1 ≤ p)] {f : ι → Lp E p μ} {g : Lp E p μ}\n    {l : Filter ι} (hfg : Tendsto f l (𝓝 g)) : TendstoInMeasure μ (fun n => f n) l g :=\n  tendstoInMeasure_of_tendsto_eLpNorm (zero_lt_one.trans_le hp.elim).ne.symm\n    (fun _ => Lp.aestronglyMeasurable _) (Lp.aestronglyMeasurable _)\n    ((Lp.tendsto_Lp_iff_tendsto_ℒp' _ _).mp hfg)\n\n"}
