{"name":"CauSeq.Completion.mk_eq_mk","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf : CauSeq β abv\n⊢ Eq (Quotient.mk CauSeq.equiv f) (CauSeq.Completion.mk f)","decl":"@[simp]\ntheorem mk_eq_mk (f : CauSeq _ abv) : @Eq (Cauchy abv) ⟦f⟧ (mk f) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_eq","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf g : CauSeq β abv\n⊢ Iff (Eq (CauSeq.Completion.mk f) (CauSeq.Completion.mk g)) (HasEquiv.Equiv f g)","decl":"theorem mk_eq {f g : CauSeq _ abv} : mk f = mk g ↔ f ≈ g :=\n  Quotient.eq\n\n"}
{"name":"CauSeq.Completion.ofRat_zero","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\n⊢ Eq (CauSeq.Completion.ofRat 0) 0","decl":"theorem ofRat_zero : (ofRat 0 : Cauchy abv) = 0 :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.ofRat_one","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\n⊢ Eq (CauSeq.Completion.ofRat 1) 1","decl":"theorem ofRat_one : (ofRat 1 : Cauchy abv) = 1 :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_eq_zero","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf : CauSeq β abv\n⊢ Iff (Eq (CauSeq.Completion.mk f) 0) f.LimZero","decl":"@[simp]\ntheorem mk_eq_zero {f : CauSeq _ abv} : mk f = 0 ↔ LimZero f := by\n  have : mk f = 0 ↔ LimZero (f - 0) := Quotient.eq\n  rwa [sub_zero] at this\n\n"}
{"name":"CauSeq.Completion.mk_add","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf g : CauSeq β abv\n⊢ Eq (HAdd.hAdd (CauSeq.Completion.mk f) (CauSeq.Completion.mk g)) (CauSeq.Completion.mk (HAdd.hAdd f g))","decl":"@[simp]\ntheorem mk_add (f g : CauSeq β abv) : mk f + mk g = mk (f + g) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_neg","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf : CauSeq β abv\n⊢ Eq (Neg.neg (CauSeq.Completion.mk f)) (CauSeq.Completion.mk (Neg.neg f))","decl":"@[simp]\ntheorem mk_neg (f : CauSeq β abv) : -mk f = mk (-f) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_mul","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf g : CauSeq β abv\n⊢ Eq (HMul.hMul (CauSeq.Completion.mk f) (CauSeq.Completion.mk g)) (CauSeq.Completion.mk (HMul.hMul f g))","decl":"@[simp]\ntheorem mk_mul (f g : CauSeq β abv) : mk f * mk g = mk (f * g) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_sub","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf g : CauSeq β abv\n⊢ Eq (HSub.hSub (CauSeq.Completion.mk f) (CauSeq.Completion.mk g)) (CauSeq.Completion.mk (HSub.hSub f g))","decl":"@[simp]\ntheorem mk_sub (f g : CauSeq β abv) : mk f - mk g = mk (f - g) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_smul","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝⁴ : LinearOrderedField α\nβ : Type u_2\ninst✝³ : Ring β\nabv : β → α\ninst✝² : IsAbsoluteValue abv\nγ : Type u_3\ninst✝¹ : SMul γ β\ninst✝ : IsScalarTower γ β β\nc : γ\nf : CauSeq β abv\n⊢ Eq (HSMul.hSMul c (CauSeq.Completion.mk f)) (CauSeq.Completion.mk (HSMul.hSMul c f))","decl":"@[simp]\ntheorem mk_smul {γ : Type*} [SMul γ β] [IsScalarTower γ β β] (c : γ) (f : CauSeq β abv) :\n    c • mk f = mk (c • f) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.mk_pow","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nn : Nat\nf : CauSeq β abv\n⊢ Eq (HPow.hPow (CauSeq.Completion.mk f) n) (CauSeq.Completion.mk (HPow.hPow f n))","decl":"@[simp]\ntheorem mk_pow (n : ℕ) (f : CauSeq β abv) : mk f ^ n = mk (f ^ n) :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.ofRat_natCast","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nn : Nat\n⊢ Eq (CauSeq.Completion.ofRat ↑n) ↑n","decl":"@[simp]\ntheorem ofRat_natCast (n : ℕ) : (ofRat n : Cauchy abv) = n :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.ofRat_intCast","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nz : Int\n⊢ Eq (CauSeq.Completion.ofRat ↑z) ↑z","decl":"@[simp]\ntheorem ofRat_intCast (z : ℤ) : (ofRat z : Cauchy abv) = z :=\n  rfl\n\n"}
{"name":"CauSeq.Completion.ofRat_add","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx y : β\n⊢ Eq (CauSeq.Completion.ofRat (HAdd.hAdd x y)) (HAdd.hAdd (CauSeq.Completion.ofRat x) (CauSeq.Completion.ofRat y))","decl":"theorem ofRat_add (x y : β) :\n    ofRat (x + y) = (ofRat x + ofRat y : Cauchy abv) :=\n  congr_arg mk (const_add _ _)\n\n"}
{"name":"CauSeq.Completion.ofRat_neg","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx : β\n⊢ Eq (CauSeq.Completion.ofRat (Neg.neg x)) (Neg.neg (CauSeq.Completion.ofRat x))","decl":"theorem ofRat_neg (x : β) : ofRat (-x) = (-ofRat x : Cauchy abv) :=\n  congr_arg mk (const_neg _)\n\n"}
{"name":"CauSeq.Completion.ofRat_mul","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx y : β\n⊢ Eq (CauSeq.Completion.ofRat (HMul.hMul x y)) (HMul.hMul (CauSeq.Completion.ofRat x) (CauSeq.Completion.ofRat y))","decl":"theorem ofRat_mul (x y : β) :\n    ofRat (x * y) = (ofRat x * ofRat y : Cauchy abv) :=\n  congr_arg mk (const_mul _ _)\n\n"}
{"name":"CauSeq.Completion.ofRatRingHom_apply","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx : β\n⊢ Eq (CauSeq.Completion.ofRatRingHom x) (CauSeq.Completion.ofRat x)","decl":"/-- `CauSeq.Completion.ofRat` as a `RingHom` -/\n@[simps]\ndef ofRatRingHom : β →+* (Cauchy abv) where\n  toFun := ofRat\n  map_zero' := ofRat_zero\n  map_one' := ofRat_one\n  map_add' := ofRat_add\n  map_mul' := ofRat_mul\n\n"}
{"name":"CauSeq.Completion.ofRat_sub","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx y : β\n⊢ Eq (CauSeq.Completion.ofRat (HSub.hSub x y)) (HSub.hSub (CauSeq.Completion.ofRat x) (CauSeq.Completion.ofRat y))","decl":"theorem ofRat_sub (x y : β) : ofRat (x - y) = (ofRat x - ofRat y : Cauchy abv) :=\n  congr_arg mk (const_sub _ _)\n\n"}
{"name":"CauSeq.Completion.ofRat_nnratCast","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nq : NNRat\n⊢ Eq (CauSeq.Completion.ofRat ↑q) ↑q","decl":"@[simp, norm_cast] lemma ofRat_nnratCast (q : ℚ≥0) : ofRat (q : β) = (q : Cauchy abv) := rfl\n"}
{"name":"CauSeq.Completion.ofRat_ratCast","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nq : Rat\n⊢ Eq (CauSeq.Completion.ofRat ↑q) ↑q","decl":"@[simp, norm_cast] lemma ofRat_ratCast (q : ℚ) : ofRat (q : β) = (q : Cauchy abv) := rfl\n\n"}
{"name":"CauSeq.Completion.inv_zero","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\n⊢ Eq (Inv.inv 0) 0","decl":"theorem inv_zero : (0 : (Cauchy abv))⁻¹ = 0 :=\n  congr_arg mk <| by rw [dif_pos] <;> [rfl; exact zero_limZero]\n\n"}
{"name":"CauSeq.Completion.inv_mk","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nf : CauSeq β abv\nhf : Not f.LimZero\n⊢ Eq (Inv.inv (CauSeq.Completion.mk f)) (CauSeq.Completion.mk (f.inv hf))","decl":"@[simp]\ntheorem inv_mk {f} (hf) : (mk (abv := abv) f)⁻¹ = mk (inv f hf) :=\n  congr_arg mk <| by rw [dif_neg]\n\n"}
{"name":"CauSeq.Completion.cau_seq_zero_ne_one","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\n⊢ Not (HasEquiv.Equiv 0 1)","decl":"theorem cau_seq_zero_ne_one : ¬(0 : CauSeq _ abv) ≈ 1 := fun h =>\n  have : LimZero (1 - 0 : CauSeq _ abv) := Setoid.symm h\n  have : LimZero (1 : CauSeq _ abv) := by simpa\n  by apply one_ne_zero <| const_limZero.1 this\n\n"}
{"name":"CauSeq.Completion.zero_ne_one","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\n⊢ Ne 0 1","decl":"theorem zero_ne_one : (0 : (Cauchy abv)) ≠ 1 := fun h => cau_seq_zero_ne_one <| mk_eq.1 h\n\n"}
{"name":"CauSeq.Completion.inv_mul_cancel","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx : CauSeq.Completion.Cauchy abv\na✝ : Ne x 0\n⊢ Eq (HMul.hMul (Inv.inv x) x) 1","decl":"protected theorem inv_mul_cancel {x : (Cauchy abv)} : x ≠ 0 → x⁻¹ * x = 1 :=\n  Quotient.inductionOn x fun f hf => by\n    simp only [mk_eq_mk, ne_eq, mk_eq_zero] at hf\n    simp only [mk_eq_mk, hf, not_false_eq_true, inv_mk, mk_mul]\n    exact Quotient.sound (CauSeq.inv_mul_cancel hf)\n\n"}
{"name":"CauSeq.Completion.mul_inv_cancel","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx : CauSeq.Completion.Cauchy abv\na✝ : Ne x 0\n⊢ Eq (HMul.hMul x (Inv.inv x)) 1","decl":"protected theorem mul_inv_cancel {x : (Cauchy abv)} : x ≠ 0 → x * x⁻¹ = 1 :=\n  Quotient.inductionOn x fun f hf => by\n    simp only [mk_eq_mk, ne_eq, mk_eq_zero] at hf\n    simp only [mk_eq_mk, hf, not_false_eq_true, inv_mk, mk_mul]\n    exact Quotient.sound (CauSeq.mul_inv_cancel hf)\n\n"}
{"name":"CauSeq.Completion.ofRat_inv","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx : β\n⊢ Eq (CauSeq.Completion.ofRat (Inv.inv x)) (Inv.inv (CauSeq.Completion.ofRat x))","decl":"theorem ofRat_inv (x : β) : ofRat x⁻¹ = ((ofRat x)⁻¹ : (Cauchy abv)) :=\n  congr_arg mk <| by split_ifs with h <;>\n    [simp only [const_limZero.1 h, GroupWithZero.inv_zero, const_zero]; rfl]\n\n"}
{"name":"CauSeq.Completion.ofRat_div","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : DivisionRing β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nx y : β\n⊢ Eq (CauSeq.Completion.ofRat (HDiv.hDiv x y)) (HDiv.hDiv (CauSeq.Completion.ofRat x) (CauSeq.Completion.ofRat y))","decl":"lemma ofRat_div (x y : β) : ofRat (x / y) = (ofRat x / ofRat y : Cauchy abv) := by\n  simp only [div_eq_mul_inv, ofRat_inv, ofRat_mul]\n\n"}
{"name":"CauSeq.IsComplete.isComplete","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝² : LinearOrderedField α\nβ : Type u_2\ninst✝¹ : Ring β\nabv : β → α\ninst✝ : IsAbsoluteValue abv\nself : CauSeq.IsComplete β abv\ns : CauSeq β abv\n⊢ Exists fun b => HasEquiv.Equiv s (CauSeq.const abv b)","decl":"/-- A class stating that a ring with an absolute value is complete, i.e. every Cauchy\nsequence has a limit. -/\nclass IsComplete : Prop where\n  /-- Every Cauchy sequence has a limit. -/\n  isComplete : ∀ s : CauSeq β abv, ∃ b : β, s ≈ const abv b\n\n"}
{"name":"CauSeq.complete","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\ns : CauSeq β abv\n⊢ Exists fun b => HasEquiv.Equiv s (CauSeq.const abv b)","decl":"theorem complete : ∀ s : CauSeq β abv, ∃ b : β, s ≈ const abv b :=\n  IsComplete.isComplete\n\n"}
{"name":"CauSeq.equiv_lim","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\ns : CauSeq β abv\n⊢ HasEquiv.Equiv s (CauSeq.const abv s.lim)","decl":"theorem equiv_lim (s : CauSeq β abv) : s ≈ const abv (lim s) :=\n  Classical.choose_spec (complete s)\n\n"}
{"name":"CauSeq.eq_lim_of_const_equiv","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf : CauSeq β abv\nx : β\nh : HasEquiv.Equiv (CauSeq.const abv x) f\n⊢ Eq x f.lim","decl":"theorem eq_lim_of_const_equiv {f : CauSeq β abv} {x : β} (h : CauSeq.const abv x ≈ f) : x = lim f :=\n  const_equiv.mp <| Setoid.trans h <| equiv_lim f\n\n"}
{"name":"CauSeq.lim_eq_of_equiv_const","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf : CauSeq β abv\nx : β\nh : HasEquiv.Equiv f (CauSeq.const abv x)\n⊢ Eq f.lim x","decl":"theorem lim_eq_of_equiv_const {f : CauSeq β abv} {x : β} (h : f ≈ CauSeq.const abv x) : lim f = x :=\n  (eq_lim_of_const_equiv <| Setoid.symm h).symm\n\n"}
{"name":"CauSeq.lim_eq_lim_of_equiv","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf g : CauSeq β abv\nh : HasEquiv.Equiv f g\n⊢ Eq f.lim g.lim","decl":"theorem lim_eq_lim_of_equiv {f g : CauSeq β abv} (h : f ≈ g) : lim f = lim g :=\n  lim_eq_of_equiv_const <| Setoid.trans h <| equiv_lim g\n\n"}
{"name":"CauSeq.lim_const","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nx : β\n⊢ Eq (CauSeq.const abv x).lim x","decl":"@[simp]\ntheorem lim_const (x : β) : lim (const abv x) = x :=\n  lim_eq_of_equiv_const <| Setoid.refl _\n\n"}
{"name":"CauSeq.lim_add","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf g : CauSeq β abv\n⊢ Eq (HAdd.hAdd f.lim g.lim) (HAdd.hAdd f g).lim","decl":"theorem lim_add (f g : CauSeq β abv) : lim f + lim g = lim (f + g) :=\n  eq_lim_of_const_equiv <|\n    show LimZero (const abv (lim f + lim g) - (f + g)) by\n      rw [const_add, add_sub_add_comm]\n      exact add_limZero (Setoid.symm (equiv_lim f)) (Setoid.symm (equiv_lim g))\n\n"}
{"name":"CauSeq.lim_mul_lim","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf g : CauSeq β abv\n⊢ Eq (HMul.hMul f.lim g.lim) (HMul.hMul f g).lim","decl":"theorem lim_mul_lim (f g : CauSeq β abv) : lim f * lim g = lim (f * g) :=\n  eq_lim_of_const_equiv <|\n    show LimZero (const abv (lim f * lim g) - f * g) by\n      have h :\n        const abv (lim f * lim g) - f * g =\n          (const abv (lim f) - f) * g + const abv (lim f) * (const abv (lim g) - g) := by\n              apply Subtype.ext\n              rw [coe_add]\n              simp [sub_mul, mul_sub]\n      rw [h]\n      exact\n        add_limZero (mul_limZero_left _ (Setoid.symm (equiv_lim _)))\n          (mul_limZero_right _ (Setoid.symm (equiv_lim _)))\n\n"}
{"name":"CauSeq.lim_mul","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf : CauSeq β abv\nx : β\n⊢ Eq (HMul.hMul f.lim x) (HMul.hMul f (CauSeq.const abv x)).lim","decl":"theorem lim_mul (f : CauSeq β abv) (x : β) : lim f * x = lim (f * const abv x) := by\n  rw [← lim_mul_lim, lim_const]\n\n"}
{"name":"CauSeq.lim_neg","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf : CauSeq β abv\n⊢ Eq (Neg.neg f).lim (Neg.neg f.lim)","decl":"theorem lim_neg (f : CauSeq β abv) : lim (-f) = -lim f :=\n  lim_eq_of_equiv_const\n    (show LimZero (-f - const abv (-lim f)) by\n      rw [const_neg, sub_neg_eq_add, add_comm, ← sub_eq_add_neg]\n      exact Setoid.symm (equiv_lim f))\n\n"}
{"name":"CauSeq.lim_eq_zero_iff","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Ring β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf : CauSeq β abv\n⊢ Iff (Eq f.lim 0) f.LimZero","decl":"theorem lim_eq_zero_iff (f : CauSeq β abv) : lim f = 0 ↔ LimZero f :=\n  ⟨fun h => by\n    have hf := equiv_lim f\n    rw [h] at hf\n    exact (limZero_congr hf).mpr (const_limZero.mpr rfl),\n   fun h => by\n    have h₁ : f = f - const abv 0 := ext fun n => by simp [sub_apply, const_apply]\n    rw [h₁] at h\n    exact lim_eq_of_equiv_const h⟩\n\n"}
{"name":"CauSeq.lim_inv","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝³ : LinearOrderedField α\nβ : Type u_2\ninst✝² : Field β\nabv : β → α\ninst✝¹ : IsAbsoluteValue abv\ninst✝ : CauSeq.IsComplete β abv\nf : CauSeq β abv\nhf : Not f.LimZero\n⊢ Eq (f.inv hf).lim (Inv.inv f.lim)","decl":"theorem lim_inv {f : CauSeq β abv} (hf : ¬LimZero f) : lim (inv f hf) = (lim f)⁻¹ :=\n  have hl : lim f ≠ 0 := by rwa [← lim_eq_zero_iff] at hf\n  lim_eq_of_equiv_const <|\n    show LimZero (inv f hf - const abv (lim f)⁻¹) from\n      have h₁ : ∀ (g f : CauSeq β abv) (hf : ¬LimZero f), LimZero (g - f * inv f hf * g) :=\n        fun g f hf => by\n          have h₂ : g - f * inv f hf * g = 1 * g - f * inv f hf * g := by rw [one_mul g]\n          have h₃ : f * inv f hf * g = (f * inv f hf) * g := by simp [mul_assoc]\n          have h₄ : g - f * inv f hf * g = (1 - f * inv f hf) * g := by rw [h₂, h₃, ← sub_mul]\n          have h₅ : g - f * inv f hf * g = g * (1 - f * inv f hf) := by rw [h₄, mul_comm]\n          have h₆ : g - f * inv f hf * g = g * (1 - inv f hf * f) := by rw [h₅, mul_comm f]\n          rw [h₆]; exact mul_limZero_right _ (Setoid.symm (CauSeq.inv_mul_cancel _))\n      have h₂ :\n        LimZero\n          (inv f hf - const abv (lim f)⁻¹ -\n            (const abv (lim f) - f) * (inv f hf * const abv (lim f)⁻¹)) := by\n              rw [sub_mul, ← sub_add, sub_sub, sub_add_eq_sub_sub, sub_right_comm, sub_add]\n              show LimZero\n                (inv f hf - const abv (lim f) * (inv f hf * const abv (lim f)⁻¹) -\n                  (const abv (lim f)⁻¹ - f * (inv f hf * const abv (lim f)⁻¹)))\n              exact sub_limZero\n                (by rw [← mul_assoc, mul_right_comm, const_inv hl]; exact h₁ _ _ _)\n                (by rw [← mul_assoc]; exact h₁ _ _ _)\n      (limZero_congr h₂).mpr <| mul_limZero_left _ (Setoid.symm (equiv_lim f))\n\n"}
{"name":"CauSeq.lim_le","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : CauSeq.IsComplete α abs\nf : CauSeq α abs\nx : α\nh : LE.le f (CauSeq.const abs x)\n⊢ LE.le f.lim x","decl":"theorem lim_le {f : CauSeq α abs} {x : α} (h : f ≤ CauSeq.const abs x) : lim f ≤ x :=\n  CauSeq.const_le.1 <| CauSeq.le_of_eq_of_le (Setoid.symm (equiv_lim f)) h\n\n"}
{"name":"CauSeq.le_lim","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : CauSeq.IsComplete α abs\nf : CauSeq α abs\nx : α\nh : LE.le (CauSeq.const abs x) f\n⊢ LE.le x f.lim","decl":"theorem le_lim {f : CauSeq α abs} {x : α} (h : CauSeq.const abs x ≤ f) : x ≤ lim f :=\n  CauSeq.const_le.1 <| CauSeq.le_of_le_of_eq h (equiv_lim f)\n\n"}
{"name":"CauSeq.lt_lim","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : CauSeq.IsComplete α abs\nf : CauSeq α abs\nx : α\nh : LT.lt (CauSeq.const abs x) f\n⊢ LT.lt x f.lim","decl":"theorem lt_lim {f : CauSeq α abs} {x : α} (h : CauSeq.const abs x < f) : x < lim f :=\n  CauSeq.const_lt.1 <| CauSeq.lt_of_lt_of_eq h (equiv_lim f)\n\n"}
{"name":"CauSeq.lim_lt","module":"Mathlib.Algebra.Order.CauSeq.Completion","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : CauSeq.IsComplete α abs\nf : CauSeq α abs\nx : α\nh : LT.lt f (CauSeq.const abs x)\n⊢ LT.lt f.lim x","decl":"theorem lim_lt {f : CauSeq α abs} {x : α} (h : f < CauSeq.const abs x) : lim f < x :=\n  CauSeq.const_lt.1 <| CauSeq.lt_of_eq_of_lt (Setoid.symm (equiv_lim f)) h\n\n"}
