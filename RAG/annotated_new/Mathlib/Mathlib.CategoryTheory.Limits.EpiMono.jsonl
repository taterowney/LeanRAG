{"name":"CategoryTheory.mono_iff_fst_eq_snd","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\nc : CategoryTheory.Limits.PullbackCone f f\nhc : CategoryTheory.Limits.IsLimit c\n⊢ Iff (CategoryTheory.Mono f) (Eq c.fst c.snd)","decl":"lemma mono_iff_fst_eq_snd (hc : IsLimit c) : Mono f ↔ c.fst = c.snd := by\n  constructor\n  · intro hf\n    simpa only [← cancel_mono f] using c.condition\n  · intro hf\n    constructor\n    intro Z g g' h\n    obtain ⟨φ, rfl, rfl⟩ := PullbackCone.IsLimit.lift' hc g g' h\n    rw [hf]\n\n"}
{"name":"CategoryTheory.mono_iff_isIso_fst","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\nc : CategoryTheory.Limits.PullbackCone f f\nhc : CategoryTheory.Limits.IsLimit c\n⊢ Iff (CategoryTheory.Mono f) (CategoryTheory.IsIso c.fst)","decl":"lemma mono_iff_isIso_fst (hc : IsLimit c) : Mono f ↔ IsIso c.fst := by\n  rw [mono_iff_fst_eq_snd hc]\n  constructor\n  · intro h\n    obtain ⟨φ, hφ₁, hφ₂⟩ := PullbackCone.IsLimit.lift' hc (𝟙 X) (𝟙 X) (by simp)\n    refine ⟨φ, PullbackCone.IsLimit.hom_ext hc ?_ ?_, hφ₁⟩\n    · dsimp\n      simp only [assoc, hφ₁, id_comp, comp_id]\n    · dsimp\n      simp only [assoc, hφ₂, id_comp, comp_id, h]\n  · intro\n    obtain ⟨φ, hφ₁, hφ₂⟩ := PullbackCone.IsLimit.lift' hc (𝟙 X) (𝟙 X) (by simp)\n    have : IsSplitEpi φ := IsSplitEpi.mk ⟨SplitEpi.mk c.fst (by\n      rw [← cancel_mono c.fst, assoc, id_comp, hφ₁, comp_id])⟩\n    rw [← cancel_epi φ, hφ₁, hφ₂]\n\n"}
{"name":"CategoryTheory.mono_iff_isIso_snd","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\nc : CategoryTheory.Limits.PullbackCone f f\nhc : CategoryTheory.Limits.IsLimit c\n⊢ Iff (CategoryTheory.Mono f) (CategoryTheory.IsIso c.snd)","decl":"lemma mono_iff_isIso_snd (hc : IsLimit c) : Mono f ↔ IsIso c.snd :=\n  mono_iff_isIso_fst (PullbackCone.flipIsLimit hc)\n\n"}
{"name":"CategoryTheory.mono_iff_isPullback","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\n⊢ Iff (CategoryTheory.Mono f) (CategoryTheory.IsPullback (CategoryTheory.CategoryStruct.id X) (CategoryTheory.CategoryStruct.id X) f f)","decl":"lemma mono_iff_isPullback : Mono f ↔ IsPullback (𝟙 X) (𝟙 X) f f := by\n  constructor\n  · intro\n    exact IsPullback.of_isLimit (PullbackCone.isLimitMkIdId f)\n  · intro hf\n    exact (mono_iff_fst_eq_snd hf.isLimit).2 rfl\n\n"}
{"name":"CategoryTheory.epi_iff_inl_eq_inr","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\nc : CategoryTheory.Limits.PushoutCocone f f\nhc : CategoryTheory.Limits.IsColimit c\n⊢ Iff (CategoryTheory.Epi f) (Eq c.inl c.inr)","decl":"lemma epi_iff_inl_eq_inr (hc : IsColimit c) : Epi f ↔ c.inl = c.inr := by\n  constructor\n  · intro hf\n    simpa only [← cancel_epi f] using c.condition\n  · intro hf\n    constructor\n    intro Z g g' h\n    obtain ⟨φ, rfl, rfl⟩ := PushoutCocone.IsColimit.desc' hc g g' h\n    rw [hf]\n\n"}
{"name":"CategoryTheory.epi_iff_isIso_inl","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\nc : CategoryTheory.Limits.PushoutCocone f f\nhc : CategoryTheory.Limits.IsColimit c\n⊢ Iff (CategoryTheory.Epi f) (CategoryTheory.IsIso c.inl)","decl":"lemma epi_iff_isIso_inl (hc : IsColimit c) : Epi f ↔ IsIso c.inl := by\n  rw [epi_iff_inl_eq_inr hc]\n  constructor\n  · intro h\n    obtain ⟨φ, hφ₁, hφ₂⟩ := PushoutCocone.IsColimit.desc' hc (𝟙 Y) (𝟙 Y) (by simp)\n    refine ⟨φ, hφ₁, PushoutCocone.IsColimit.hom_ext hc ?_ ?_⟩\n    · dsimp\n      simp only [comp_id, reassoc_of% hφ₁]\n    · dsimp\n      simp only [comp_id, h, reassoc_of% hφ₂]\n  · intro\n    obtain ⟨φ, hφ₁, hφ₂⟩ := PushoutCocone.IsColimit.desc' hc (𝟙 Y) (𝟙 Y) (by simp)\n    have : IsSplitMono φ := IsSplitMono.mk ⟨SplitMono.mk c.inl (by\n      rw [← cancel_epi c.inl, reassoc_of% hφ₁, comp_id])⟩\n    rw [← cancel_mono φ, hφ₁, hφ₂]\n\n"}
{"name":"CategoryTheory.epi_iff_isIso_inr","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\nc : CategoryTheory.Limits.PushoutCocone f f\nhc : CategoryTheory.Limits.IsColimit c\n⊢ Iff (CategoryTheory.Epi f) (CategoryTheory.IsIso c.inr)","decl":"lemma epi_iff_isIso_inr (hc : IsColimit c) : Epi f ↔ IsIso c.inr :=\n  epi_iff_isIso_inl (PushoutCocone.flipIsColimit hc)\n\n"}
{"name":"CategoryTheory.epi_iff_isPushout","module":"Mathlib.CategoryTheory.Limits.EpiMono","initialProofState":"C : Type u_1\ninst✝ : CategoryTheory.Category.{u_2, u_1} C\nX Y : C\nf : Quiver.Hom X Y\n⊢ Iff (CategoryTheory.Epi f) (CategoryTheory.IsPushout f f (CategoryTheory.CategoryStruct.id Y) (CategoryTheory.CategoryStruct.id Y))","decl":"lemma epi_iff_isPushout : Epi f ↔ IsPushout f f (𝟙 Y) (𝟙 Y) := by\n  constructor\n  · intro\n    exact IsPushout.of_isColimit (PushoutCocone.isColimitMkIdId f)\n  · intro hf\n    exact (epi_iff_inl_eq_inr hf.isColimit).2 rfl\n\n"}
