{"name":"OrderedSub.tsub_le_iff_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_2\ninst✝² : LE α\ninst✝¹ : Add α\ninst✝ : Sub α\nself : OrderedSub α\na b c : α\n⊢ Iff (LE.le (HSub.hSub a b) c) (LE.le a (HAdd.hAdd c b))","decl":"/-- `OrderedSub α` means that `α` has a subtraction characterized by `a - b ≤ c ↔ a ≤ c + b`.\nIn other words, `a - b` is the least `c` such that `a ≤ b + c`.\n\nThis is satisfied both by the subtraction in additive ordered groups and by truncated subtraction\nin canonically ordered monoids on many specific types.\n-/\nclass OrderedSub (α : Type*) [LE α] [Add α] [Sub α] : Prop where\n  /-- `a - b` provides a lower bound on `c` such that `a ≤ c + b`. -/\n  tsub_le_iff_right : ∀ a b c : α, a - b ≤ c ↔ a ≤ c + b\n\n"}
{"name":"tsub_le_iff_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : LE α\ninst✝² : Add α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\n⊢ Iff (LE.le (HSub.hSub a b) c) (LE.le a (HAdd.hAdd c b))","decl":"@[simp]\ntheorem tsub_le_iff_right [LE α] [Add α] [Sub α] [OrderedSub α] {a b c : α} :\n    a - b ≤ c ↔ a ≤ c + b :=\n  OrderedSub.tsub_le_iff_right a b c\n\n"}
{"name":"add_tsub_le_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : Add α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a b) b) a","decl":"/-- See `add_tsub_cancel_right` for the equality if `AddLeftReflectLE α`. -/\ntheorem add_tsub_le_right : a + b - b ≤ a :=\n  tsub_le_iff_right.mpr le_rfl\n\n"}
{"name":"le_tsub_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : Add α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ LE.le b (HAdd.hAdd (HSub.hSub b a) a)","decl":"theorem le_tsub_add : b ≤ b - a + a :=\n  tsub_le_iff_right.mp le_rfl\n\n"}
{"name":"tsub_le_iff_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\n⊢ Iff (LE.le (HSub.hSub a b) c) (LE.le a (HAdd.hAdd b c))","decl":"theorem tsub_le_iff_left : a - b ≤ c ↔ a ≤ b + c := by rw [tsub_le_iff_right, add_comm]\n\n"}
{"name":"le_add_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ LE.le a (HAdd.hAdd b (HSub.hSub a b))","decl":"theorem le_add_tsub : a ≤ b + (a - b) :=\n  tsub_le_iff_left.mp le_rfl\n\n"}
{"name":"add_tsub_le_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a b) a) b","decl":"/-- See `add_tsub_cancel_left` for the equality if `AddLeftReflectLE α`. -/\ntheorem add_tsub_le_left : a + b - a ≤ b :=\n  tsub_le_iff_left.mpr le_rfl\n\n"}
{"name":"tsub_le_tsub_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nh : LE.le a b\nc : α\n⊢ LE.le (HSub.hSub a c) (HSub.hSub b c)","decl":"@[gcongr] theorem tsub_le_tsub_right (h : a ≤ b) (c : α) : a - c ≤ b - c :=\n  tsub_le_iff_left.mpr <| h.trans le_add_tsub\n\n"}
{"name":"tsub_le_iff_tsub_le","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\n⊢ Iff (LE.le (HSub.hSub a b) c) (LE.le (HSub.hSub a c) b)","decl":"theorem tsub_le_iff_tsub_le : a - b ≤ c ↔ a - c ≤ b := by rw [tsub_le_iff_left, tsub_le_iff_right]\n\n"}
{"name":"tsub_tsub_le","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ LE.le (HSub.hSub b (HSub.hSub b a)) a","decl":"/-- See `tsub_tsub_cancel_of_le` for the equality. -/\ntheorem tsub_tsub_le : b - (b - a) ≤ a :=\n  tsub_le_iff_right.mpr le_add_tsub\n\n"}
{"name":"tsub_le_tsub_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b : α\ninst✝ : AddLeftMono α\nh : LE.le a b\nc : α\n⊢ LE.le (HSub.hSub c b) (HSub.hSub c a)","decl":"@[gcongr] theorem tsub_le_tsub_left (h : a ≤ b) (c : α) : c - b ≤ c - a :=\n  tsub_le_iff_left.mpr <| le_add_tsub.trans <| add_le_add_right h _\n\n"}
{"name":"tsub_le_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c d : α\ninst✝ : AddLeftMono α\nhab : LE.le a b\nhcd : LE.le c d\n⊢ LE.le (HSub.hSub a d) (HSub.hSub b c)","decl":"@[gcongr] theorem tsub_le_tsub (hab : a ≤ b) (hcd : c ≤ d) : a - d ≤ b - c :=\n  (tsub_le_tsub_right hab _).trans <| tsub_le_tsub_left hcd _\n\n"}
{"name":"antitone_const_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\nc : α\ninst✝ : AddLeftMono α\n⊢ Antitone fun x => HSub.hSub c x","decl":"theorem antitone_const_tsub : Antitone fun x => c - x := fun _ _ hxy => tsub_le_tsub rfl.le hxy\n\n"}
{"name":"add_tsub_le_assoc","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a b) c) (HAdd.hAdd a (HSub.hSub b c))","decl":"/-- See `add_tsub_assoc_of_le` for the equality. -/\ntheorem add_tsub_le_assoc : a + b - c ≤ a + (b - c) := by\n  rw [tsub_le_iff_left, add_left_comm]\n  exact add_le_add_left le_add_tsub a\n\n"}
{"name":"add_tsub_le_tsub_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a b) c) (HAdd.hAdd (HSub.hSub a c) b)","decl":"/-- See `tsub_add_eq_add_tsub` for the equality. -/\ntheorem add_tsub_le_tsub_add : a + b - c ≤ a - c + b := by\n  rw [add_comm, add_comm _ b]\n  exact add_tsub_le_assoc\n\n"}
{"name":"add_le_add_add_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HAdd.hAdd a b) (HAdd.hAdd (HAdd.hAdd a c) (HSub.hSub b c))","decl":"theorem add_le_add_add_tsub : a + b ≤ a + c + (b - c) := by\n  rw [add_assoc]\n  exact add_le_add_left le_add_tsub a\n\n"}
{"name":"le_tsub_add_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HAdd.hAdd a b) (HAdd.hAdd (HSub.hSub a c) (HAdd.hAdd b c))","decl":"theorem le_tsub_add_add : a + b ≤ a - c + (b + c) := by\n  rw [add_comm a, add_comm (a - c)]\n  exact add_le_add_add_tsub\n\n"}
{"name":"tsub_le_tsub_add_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub a c) (HAdd.hAdd (HSub.hSub a b) (HSub.hSub b c))","decl":"theorem tsub_le_tsub_add_tsub : a - c ≤ a - b + (b - c) := by\n  rw [tsub_le_iff_left, ← add_assoc, add_right_comm]\n  exact le_add_tsub.trans (add_le_add_right le_add_tsub _)\n\n"}
{"name":"tsub_tsub_tsub_le_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub (HSub.hSub c a) (HSub.hSub c b)) (HSub.hSub b a)","decl":"theorem tsub_tsub_tsub_le_tsub : c - a - (c - b) ≤ b - a := by\n  rw [tsub_le_iff_left, tsub_le_iff_left, add_left_comm]\n  exact le_tsub_add.trans (add_le_add_left le_add_tsub _)\n\n"}
{"name":"tsub_tsub_le_tsub_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\ninst✝ : AddLeftMono α\na b c : α\n⊢ LE.le (HSub.hSub a (HSub.hSub b c)) (HAdd.hAdd (HSub.hSub a b) c)","decl":"theorem tsub_tsub_le_tsub_add {a b c : α} : a - (b - c) ≤ a - b + c :=\n  tsub_le_iff_right.2 <|\n    calc\n      a ≤ a - b + b := le_tsub_add\n      _ ≤ a - b + (c + (b - c)) := add_le_add_left le_add_tsub _\n      _ = a - b + c + (b - c) := (add_assoc _ _ _).symm\n\n"}
{"name":"add_tsub_add_le_tsub_add_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c d : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a b) (HAdd.hAdd c d)) (HAdd.hAdd (HSub.hSub a c) (HSub.hSub b d))","decl":"/-- See `tsub_add_tsub_comm` for the equality. -/\ntheorem add_tsub_add_le_tsub_add_tsub : a + b - (c + d) ≤ a - c + (b - d) := by\n  rw [add_comm c, tsub_le_iff_left, add_assoc, ← tsub_le_iff_left, ← tsub_le_iff_left]\n  refine (tsub_le_tsub_right add_tsub_le_assoc c).trans ?_\n  rw [add_comm a, add_comm (a - c)]\n  exact add_tsub_le_assoc\n\n"}
{"name":"add_tsub_add_le_tsub_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a b) (HAdd.hAdd a c)) (HSub.hSub b c)","decl":"/-- See `add_tsub_add_eq_tsub_left` for the equality. -/\ntheorem add_tsub_add_le_tsub_left : a + b - (a + c) ≤ b - c := by\n  rw [tsub_le_iff_left, add_assoc]\n  exact add_le_add_left le_add_tsub _\n\n"}
{"name":"add_tsub_add_le_tsub_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\n⊢ LE.le (HSub.hSub (HAdd.hAdd a c) (HAdd.hAdd b c)) (HSub.hSub a b)","decl":"/-- See `add_tsub_add_eq_tsub_right` for the equality. -/\ntheorem add_tsub_add_le_tsub_right : a + c - (b + c) ≤ a - b := by\n  rw [tsub_le_iff_left, add_right_comm]\n  exact add_le_add_right le_add_tsub c\n\n"}
{"name":"AddLECancellable.le_add_tsub_swap","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nhb : AddLECancellable b\n⊢ LE.le a (HSub.hSub (HAdd.hAdd b a) b)","decl":"protected theorem le_add_tsub_swap (hb : AddLECancellable b) : a ≤ b + a - b :=\n  hb le_add_tsub\n\n"}
{"name":"AddLECancellable.le_add_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nhb : AddLECancellable b\n⊢ LE.le a (HSub.hSub (HAdd.hAdd a b) b)","decl":"protected theorem le_add_tsub (hb : AddLECancellable b) : a ≤ a + b - b := by\n  rw [add_comm]\n  exact hb.le_add_tsub_swap\n\n"}
{"name":"AddLECancellable.le_tsub_of_add_le_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nha : AddLECancellable a\nh : LE.le (HAdd.hAdd a b) c\n⊢ LE.le b (HSub.hSub c a)","decl":"protected theorem le_tsub_of_add_le_left (ha : AddLECancellable a) (h : a + b ≤ c) : b ≤ c - a :=\n  ha <| h.trans le_add_tsub\n\n"}
{"name":"AddLECancellable.le_tsub_of_add_le_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhb : AddLECancellable b\nh : LE.le (HAdd.hAdd a b) c\n⊢ LE.le a (HSub.hSub c b)","decl":"protected theorem le_tsub_of_add_le_right (hb : AddLECancellable b) (h : a + b ≤ c) : a ≤ c - b :=\n  hb.le_tsub_of_add_le_left <| by rwa [add_comm]\n\n"}
{"name":"le_add_tsub_swap","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b : α\ninst✝ : AddLeftReflectLE α\n⊢ LE.le a (HSub.hSub (HAdd.hAdd b a) b)","decl":"theorem le_add_tsub_swap : a ≤ b + a - b :=\n  Contravariant.AddLECancellable.le_add_tsub_swap\n\n"}
{"name":"le_add_tsub'","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b : α\ninst✝ : AddLeftReflectLE α\n⊢ LE.le a (HSub.hSub (HAdd.hAdd a b) b)","decl":"theorem le_add_tsub' : a ≤ a + b - b :=\n  Contravariant.AddLECancellable.le_add_tsub\n\n"}
{"name":"le_tsub_of_add_le_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LE.le (HAdd.hAdd a b) c\n⊢ LE.le b (HSub.hSub c a)","decl":"theorem le_tsub_of_add_le_left (h : a + b ≤ c) : b ≤ c - a :=\n  Contravariant.AddLECancellable.le_tsub_of_add_le_left h\n\n"}
{"name":"le_tsub_of_add_le_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : Preorder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LE.le (HAdd.hAdd a b) c\n⊢ LE.le a (HSub.hSub c b)","decl":"theorem le_tsub_of_add_le_right (h : a + b ≤ c) : a ≤ c - b :=\n  Contravariant.AddLECancellable.le_tsub_of_add_le_right h\n\n"}
{"name":"tsub_nonpos","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommMonoid α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\n⊢ Iff (LE.le (HSub.hSub a b) 0) (LE.le a b)","decl":"theorem tsub_nonpos : a - b ≤ 0 ↔ a ≤ b := by rw [tsub_le_iff_left, add_zero]\n\n"}
{"name":"tsub_nonpos_of_le","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : Preorder α\ninst✝² : AddCommMonoid α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\na✝ : LE.le a b\n⊢ LE.le (HSub.hSub a b) 0","decl":"alias ⟨_, tsub_nonpos_of_le⟩ := tsub_nonpos\n\n"}
{"name":"tsub_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\nb a c : α\n⊢ Eq (HSub.hSub (HSub.hSub b a) c) (HSub.hSub b (HAdd.hAdd a c))","decl":"theorem tsub_tsub (b a c : α) : b - a - c = b - (a + c) := by\n  apply le_antisymm\n  · rw [tsub_le_iff_left, tsub_le_iff_left, ← add_assoc, ← tsub_le_iff_left]\n  · rw [tsub_le_iff_left, add_assoc, ← tsub_le_iff_left, ← tsub_le_iff_left]\n\n"}
{"name":"tsub_add_eq_tsub_tsub","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\n⊢ Eq (HSub.hSub a (HAdd.hAdd b c)) (HSub.hSub (HSub.hSub a b) c)","decl":"theorem tsub_add_eq_tsub_tsub (a b c : α) : a - (b + c) = a - b - c :=\n  (tsub_tsub _ _ _).symm\n\n"}
{"name":"tsub_add_eq_tsub_tsub_swap","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\n⊢ Eq (HSub.hSub a (HAdd.hAdd b c)) (HSub.hSub (HSub.hSub a c) b)","decl":"theorem tsub_add_eq_tsub_tsub_swap (a b c : α) : a - (b + c) = a - c - b := by\n  rw [add_comm]\n  apply tsub_add_eq_tsub_tsub\n\n"}
{"name":"tsub_right_comm","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\n⊢ Eq (HSub.hSub (HSub.hSub a b) c) (HSub.hSub (HSub.hSub a c) b)","decl":"theorem tsub_right_comm : a - b - c = a - c - b := by\n  rw [← tsub_add_eq_tsub_tsub, tsub_add_eq_tsub_tsub_swap]\n\n"}
{"name":"AddLECancellable.tsub_eq_of_eq_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhb : AddLECancellable b\nh : Eq a (HAdd.hAdd c b)\n⊢ Eq (HSub.hSub a b) c","decl":"/-- See `AddLECancellable.tsub_eq_of_eq_add'` for a version assuming that `a = c + b` itself is\ncancellable rather than `b`. -/\nprotected theorem tsub_eq_of_eq_add (hb : AddLECancellable b) (h : a = c + b) : a - b = c :=\n  le_antisymm (tsub_le_iff_right.mpr h.le) <| by\n    rw [h]\n    exact hb.le_add_tsub\n\n"}
{"name":"AddLECancellable.tsub_eq_of_eq_add'","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\nha : AddLECancellable a\nh : Eq a (HAdd.hAdd c b)\n⊢ Eq (HSub.hSub a b) c","decl":"/-- Weaker version of `AddLECancellable.tsub_eq_of_eq_add` assuming that `a = c + b` itself is\ncancellable rather than `b`. -/\nprotected lemma tsub_eq_of_eq_add' [AddLeftMono α] (ha : AddLECancellable a)\n    (h : a = c + b) : a - b = c := (h ▸ ha).of_add_right.tsub_eq_of_eq_add h\n\n"}
{"name":"AddLECancellable.eq_tsub_of_add_eq","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhc : AddLECancellable c\nh : Eq (HAdd.hAdd a c) b\n⊢ Eq a (HSub.hSub b c)","decl":"/-- See `AddLECancellable.eq_tsub_of_add_eq'` for a version assuming that `b = a + c` itself is\ncancellable rather than `c`. -/\nprotected theorem eq_tsub_of_add_eq (hc : AddLECancellable c) (h : a + c = b) : a = b - c :=\n  (hc.tsub_eq_of_eq_add h.symm).symm\n\n"}
{"name":"AddLECancellable.eq_tsub_of_add_eq'","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\nhb : AddLECancellable b\nh : Eq (HAdd.hAdd a c) b\n⊢ Eq a (HSub.hSub b c)","decl":"/-- Weaker version of `AddLECancellable.eq_tsub_of_add_eq` assuming that `b = a + c` itself is\ncancellable rather than `c`. -/\nprotected lemma eq_tsub_of_add_eq' [AddLeftMono α] (hb : AddLECancellable b)\n    (h : a + c = b) : a = b - c := (hb.tsub_eq_of_eq_add' h.symm).symm\n\n"}
{"name":"AddLECancellable.tsub_eq_of_eq_add_rev","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhb : AddLECancellable b\nh : Eq a (HAdd.hAdd b c)\n⊢ Eq (HSub.hSub a b) c","decl":"/-- See `AddLECancellable.tsub_eq_of_eq_add_rev'` for a version assuming that `a = b + c` itself is\ncancellable rather than `b`. -/\nprotected theorem tsub_eq_of_eq_add_rev (hb : AddLECancellable b) (h : a = b + c) : a - b = c :=\n  hb.tsub_eq_of_eq_add <| by rw [add_comm, h]\n\n"}
{"name":"AddLECancellable.tsub_eq_of_eq_add_rev'","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftMono α\nha : AddLECancellable a\nh : Eq a (HAdd.hAdd b c)\n⊢ Eq (HSub.hSub a b) c","decl":"/-- Weaker version of `AddLECancellable.tsub_eq_of_eq_add_rev` assuming that `a = b + c` itself is\ncancellable rather than `b`. -/\nprotected lemma tsub_eq_of_eq_add_rev' [AddLeftMono α]\n    (ha : AddLECancellable a) (h : a = b + c) : a - b = c :=\n  ha.tsub_eq_of_eq_add' <| by rw [add_comm, h]\n\n"}
{"name":"AddLECancellable.add_tsub_cancel_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nhb : AddLECancellable b\n⊢ Eq (HSub.hSub (HAdd.hAdd a b) b) a","decl":"@[simp]\nprotected theorem add_tsub_cancel_right (hb : AddLECancellable b) : a + b - b = a :=\n  hb.tsub_eq_of_eq_add <| by rw [add_comm]\n\n"}
{"name":"AddLECancellable.add_tsub_cancel_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b : α\nha : AddLECancellable a\n⊢ Eq (HSub.hSub (HAdd.hAdd a b) a) b","decl":"@[simp]\nprotected theorem add_tsub_cancel_left (ha : AddLECancellable a) : a + b - a = b :=\n  ha.tsub_eq_of_eq_add <| add_comm a b\n\n"}
{"name":"AddLECancellable.lt_add_of_tsub_lt_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhb : AddLECancellable b\nh : LT.lt (HSub.hSub a b) c\n⊢ LT.lt a (HAdd.hAdd b c)","decl":"protected theorem lt_add_of_tsub_lt_left (hb : AddLECancellable b) (h : a - b < c) : a < b + c := by\n  rw [lt_iff_le_and_ne, ← tsub_le_iff_left]\n  refine ⟨h.le, ?_⟩\n  rintro rfl\n  simp [hb] at h\n\n"}
{"name":"AddLECancellable.lt_add_of_tsub_lt_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhc : AddLECancellable c\nh : LT.lt (HSub.hSub a c) b\n⊢ LT.lt a (HAdd.hAdd b c)","decl":"protected theorem lt_add_of_tsub_lt_right (hc : AddLECancellable c) (h : a - c < b) :\n    a < b + c := by\n  rw [lt_iff_le_and_ne, ← tsub_le_iff_right]\n  refine ⟨h.le, ?_⟩\n  rintro rfl\n  simp [hc] at h\n\n"}
{"name":"AddLECancellable.lt_tsub_of_add_lt_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nhc : AddLECancellable c\nh : LT.lt (HAdd.hAdd a c) b\n⊢ LT.lt a (HSub.hSub b c)","decl":"protected theorem lt_tsub_of_add_lt_right (hc : AddLECancellable c) (h : a + c < b) : a < b - c :=\n  (hc.le_tsub_of_add_le_right h.le).lt_of_ne <| by\n    rintro rfl\n    exact h.not_le le_tsub_add\n\n"}
{"name":"AddLECancellable.lt_tsub_of_add_lt_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na b c : α\nha : AddLECancellable a\nh : LT.lt (HAdd.hAdd a c) b\n⊢ LT.lt c (HSub.hSub b a)","decl":"protected theorem lt_tsub_of_add_lt_left (ha : AddLECancellable a) (h : a + c < b) : c < b - a :=\n  ha.lt_tsub_of_add_lt_right <| by rwa [add_comm]\n\n"}
{"name":"tsub_eq_of_eq_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : Eq a (HAdd.hAdd c b)\n⊢ Eq (HSub.hSub a b) c","decl":"theorem tsub_eq_of_eq_add (h : a = c + b) : a - b = c :=\n  Contravariant.AddLECancellable.tsub_eq_of_eq_add h\n\n"}
{"name":"eq_tsub_of_add_eq","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : Eq (HAdd.hAdd a c) b\n⊢ Eq a (HSub.hSub b c)","decl":"theorem eq_tsub_of_add_eq (h : a + c = b) : a = b - c :=\n  Contravariant.AddLECancellable.eq_tsub_of_add_eq h\n\n"}
{"name":"tsub_eq_of_eq_add_rev","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : Eq a (HAdd.hAdd b c)\n⊢ Eq (HSub.hSub a b) c","decl":"theorem tsub_eq_of_eq_add_rev (h : a = b + c) : a - b = c :=\n  Contravariant.AddLECancellable.tsub_eq_of_eq_add_rev h\n\n"}
{"name":"add_tsub_cancel_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\ninst✝ : AddLeftReflectLE α\na b : α\n⊢ Eq (HSub.hSub (HAdd.hAdd a b) b) a","decl":"@[simp]\ntheorem add_tsub_cancel_right (a b : α) : a + b - b = a :=\n  Contravariant.AddLECancellable.add_tsub_cancel_right\n\n"}
{"name":"add_tsub_cancel_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\ninst✝ : AddLeftReflectLE α\na b : α\n⊢ Eq (HSub.hSub (HAdd.hAdd a b) a) b","decl":"@[simp]\ntheorem add_tsub_cancel_left (a b : α) : a + b - a = b :=\n  Contravariant.AddLECancellable.add_tsub_cancel_left\n\n"}
{"name":"tsub_eq_tsub_of_add_eq_add","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c d : α\ninst✝ : AddLeftReflectLE α\nh : Eq (HAdd.hAdd a d) (HAdd.hAdd c b)\n⊢ Eq (HSub.hSub a b) (HSub.hSub c d)","decl":"/-- A more general version of the reverse direction of `sub_eq_sub_iff_add_eq_add` -/\ntheorem tsub_eq_tsub_of_add_eq_add (h : a + d = c + b) : a - b = c - d := by\n  calc a - b = a + d - d - b := by rw [add_tsub_cancel_right]\n           _ = c + b - b - d := by rw [h, tsub_right_comm]\n           _ = c - d := by rw [add_tsub_cancel_right]\n\n"}
{"name":"lt_add_of_tsub_lt_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LT.lt (HSub.hSub a b) c\n⊢ LT.lt a (HAdd.hAdd b c)","decl":"theorem lt_add_of_tsub_lt_left (h : a - b < c) : a < b + c :=\n  Contravariant.AddLECancellable.lt_add_of_tsub_lt_left h\n\n"}
{"name":"lt_add_of_tsub_lt_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\nh : LT.lt (HSub.hSub a c) b\n⊢ LT.lt a (HAdd.hAdd b c)","decl":"theorem lt_add_of_tsub_lt_right (h : a - c < b) : a < b + c :=\n  Contravariant.AddLECancellable.lt_add_of_tsub_lt_right h\n\n"}
{"name":"lt_tsub_of_add_lt_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\na✝ : LT.lt (HAdd.hAdd a c) b\n⊢ LT.lt c (HSub.hSub b a)","decl":"/-- This lemma (and some of its corollaries) also holds for `ENNReal`, but this proof doesn't work\nfor it. Maybe we should add this lemma as field to `OrderedSub`? -/\ntheorem lt_tsub_of_add_lt_left : a + c < b → c < b - a :=\n  Contravariant.AddLECancellable.lt_tsub_of_add_lt_left\n\n"}
{"name":"lt_tsub_of_add_lt_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁴ : PartialOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\na b c : α\ninst✝ : AddLeftReflectLE α\na✝ : LT.lt (HAdd.hAdd a c) b\n⊢ LT.lt a (HSub.hSub b c)","decl":"theorem lt_tsub_of_add_lt_right : a + c < b → a < b - c :=\n  Contravariant.AddLECancellable.lt_tsub_of_add_lt_right\n\n"}
{"name":"add_tsub_add_eq_tsub_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁵ : PartialOrder α\ninst✝⁴ : AddCommSemigroup α\ninst✝³ : Sub α\ninst✝² : OrderedSub α\ninst✝¹ : AddLeftMono α\ninst✝ : AddLeftReflectLE α\na c b : α\n⊢ Eq (HSub.hSub (HAdd.hAdd a c) (HAdd.hAdd b c)) (HSub.hSub a b)","decl":"theorem add_tsub_add_eq_tsub_right (a c b : α) : a + c - (b + c) = a - b := by\n  refine add_tsub_add_le_tsub_right.antisymm (tsub_le_iff_right.2 <| ?_)\n  apply le_of_add_le_add_right\n  rw [add_assoc]\n  exact le_tsub_add\n\n"}
{"name":"add_tsub_add_eq_tsub_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝⁵ : PartialOrder α\ninst✝⁴ : AddCommSemigroup α\ninst✝³ : Sub α\ninst✝² : OrderedSub α\ninst✝¹ : AddLeftMono α\ninst✝ : AddLeftReflectLE α\na b c : α\n⊢ Eq (HSub.hSub (HAdd.hAdd a b) (HAdd.hAdd a c)) (HSub.hSub b c)","decl":"theorem add_tsub_add_eq_tsub_left (a b c : α) : a + b - (a + c) = b - c := by\n  rw [add_comm a b, add_comm a c, add_tsub_add_eq_tsub_right]\n\n"}
{"name":"lt_of_tsub_lt_tsub_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\na b c : α\ninst✝³ : LinearOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\nh : LT.lt (HSub.hSub a c) (HSub.hSub b c)\n⊢ LT.lt a b","decl":"/-- See `lt_of_tsub_lt_tsub_right_of_le` for a weaker statement in a partial order. -/\ntheorem lt_of_tsub_lt_tsub_right (h : a - c < b - c) : a < b :=\n  lt_imp_lt_of_le_imp_le (fun h => tsub_le_tsub_right h c) h\n\n"}
{"name":"lt_tsub_iff_right","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\na b c : α\ninst✝³ : LinearOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\n⊢ Iff (LT.lt a (HSub.hSub b c)) (LT.lt (HAdd.hAdd a c) b)","decl":"/-- See `lt_tsub_iff_right_of_le` for a weaker statement in a partial order. -/\ntheorem lt_tsub_iff_right : a < b - c ↔ a + c < b :=\n  lt_iff_lt_of_le_iff_le tsub_le_iff_right\n\n"}
{"name":"lt_tsub_iff_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\na b c : α\ninst✝³ : LinearOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\n⊢ Iff (LT.lt a (HSub.hSub b c)) (LT.lt (HAdd.hAdd c a) b)","decl":"/-- See `lt_tsub_iff_left_of_le` for a weaker statement in a partial order. -/\ntheorem lt_tsub_iff_left : a < b - c ↔ c + a < b :=\n  lt_iff_lt_of_le_iff_le tsub_le_iff_left\n\n"}
{"name":"lt_tsub_comm","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\na b c : α\ninst✝³ : LinearOrder α\ninst✝² : AddCommSemigroup α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\n⊢ Iff (LT.lt a (HSub.hSub b c)) (LT.lt c (HSub.hSub b a))","decl":"theorem lt_tsub_comm : a < b - c ↔ c < b - a :=\n  lt_tsub_iff_left.trans lt_tsub_iff_right.symm\n\n"}
{"name":"lt_of_tsub_lt_tsub_left","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\na b c : α\ninst✝⁴ : LinearOrder α\ninst✝³ : AddCommSemigroup α\ninst✝² : Sub α\ninst✝¹ : OrderedSub α\ninst✝ : AddLeftMono α\nh : LT.lt (HSub.hSub a b) (HSub.hSub a c)\n⊢ LT.lt c b","decl":"/-- See `lt_of_tsub_lt_tsub_left_of_le` for a weaker statement in a partial order. -/\ntheorem lt_of_tsub_lt_tsub_left (h : a - b < a - c) : c < b :=\n  lt_imp_lt_of_le_imp_le (fun h => tsub_le_tsub_left h a) h\n\n"}
{"name":"tsub_zero","module":"Mathlib.Algebra.Order.Sub.Defs","initialProofState":"α : Type u_1\ninst✝³ : PartialOrder α\ninst✝² : AddCommMonoid α\ninst✝¹ : Sub α\ninst✝ : OrderedSub α\na : α\n⊢ Eq (HSub.hSub a 0) a","decl":"@[simp]\ntheorem tsub_zero (a : α) : a - 0 = a :=\n  AddLECancellable.tsub_eq_of_eq_add addLECancellable_zero (add_zero _).symm\n\n"}
