{"name":"BialgEquiv.mk.sizeOf_spec","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\ninst✝⁹ : CommSemiring R\nA : Type v\nB : Type w\ninst✝⁸ : Semiring A\ninst✝⁷ : Semiring B\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra R B\ninst✝⁴ : CoalgebraStruct R A\ninst✝³ : CoalgebraStruct R B\ninst✝² : SizeOf R\ninst✝¹ : SizeOf A\ninst✝ : SizeOf B\ntoCoalgEquiv : CoalgEquiv R A B\nmap_mul' : ∀ (x y : A), Eq (toCoalgEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toCoalgEquiv.toFun x) (toCoalgEquiv.toFun y))\n⊢ Eq (SizeOf.sizeOf { toCoalgEquiv := toCoalgEquiv, map_mul' := map_mul' }) (HAdd.hAdd 1 (SizeOf.sizeOf toCoalgEquiv))","decl":"/-- An equivalence of bialgebras is an invertible bialgebra homomorphism. -/\nstructure BialgEquiv (R : Type u) [CommSemiring R] (A : Type v) (B : Type w)\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A ≃ₗc[R] B, A ≃* B where\n\n"}
{"name":"BialgEquiv.mk.injEq","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\ninst✝⁶ : CommSemiring R\nA : Type v\nB : Type w\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ntoCoalgEquiv✝ : CoalgEquiv R A B\nmap_mul'✝ : ∀ (x y : A), Eq (toCoalgEquiv✝.toFun (HMul.hMul x y)) (HMul.hMul (toCoalgEquiv✝.toFun x) (toCoalgEquiv✝.toFun y))\ntoCoalgEquiv : CoalgEquiv R A B\nmap_mul' : ∀ (x y : A), Eq (toCoalgEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toCoalgEquiv.toFun x) (toCoalgEquiv.toFun y))\n⊢ Eq (Eq { toCoalgEquiv := toCoalgEquiv✝, map_mul' := map_mul'✝ } { toCoalgEquiv := toCoalgEquiv, map_mul' := map_mul' }) (Eq toCoalgEquiv✝ toCoalgEquiv)","decl":"/-- An equivalence of bialgebras is an invertible bialgebra homomorphism. -/\nstructure BialgEquiv (R : Type u) [CommSemiring R] (A : Type v) (B : Type w)\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A ≃ₗc[R] B, A ≃* B where\n\n"}
{"name":"BialgEquiv.map_mul'","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\ninst✝⁶ : CommSemiring R\nA : Type v\nB : Type w\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nself : BialgEquiv R A B\nx y : A\n⊢ Eq (self.toFun (HMul.hMul x y)) (HMul.hMul (self.toFun x) (self.toFun y))","decl":"/-- An equivalence of bialgebras is an invertible bialgebra homomorphism. -/\nstructure BialgEquiv (R : Type u) [CommSemiring R] (A : Type v) (B : Type w)\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A ≃ₗc[R] B, A ≃* B where\n\n"}
{"name":"BialgEquiv.mk.inj","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\ninst✝⁶ : CommSemiring R\nA : Type v\nB : Type w\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ntoCoalgEquiv✝ : CoalgEquiv R A B\nmap_mul'✝ : ∀ (x y : A), Eq (toCoalgEquiv✝.toFun (HMul.hMul x y)) (HMul.hMul (toCoalgEquiv✝.toFun x) (toCoalgEquiv✝.toFun y))\ntoCoalgEquiv : CoalgEquiv R A B\nmap_mul' : ∀ (x y : A), Eq (toCoalgEquiv.toFun (HMul.hMul x y)) (HMul.hMul (toCoalgEquiv.toFun x) (toCoalgEquiv.toFun y))\nx✝ : Eq { toCoalgEquiv := toCoalgEquiv✝, map_mul' := map_mul'✝ } { toCoalgEquiv := toCoalgEquiv, map_mul' := map_mul' }\n⊢ Eq toCoalgEquiv✝ toCoalgEquiv","decl":"/-- An equivalence of bialgebras is an invertible bialgebra homomorphism. -/\nstructure BialgEquiv (R : Type u) [CommSemiring R] (A : Type v) (B : Type w)\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] extends A ≃ₗc[R] B, A ≃* B where\n\n"}
{"name":"BialgEquivClass.toMulEquivClass","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\ninst✝⁵ : Semiring B\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : EquivLike F A B\nself : BialgEquivClass F R A B\n⊢ MulEquivClass F A B","decl":"/-- `BialgEquivClass F R A B` asserts `F` is a type of bundled bialgebra equivalences\nfrom `A` to `B`. -/\nclass BialgEquivClass (F : Type*) (R A B : outParam Type*) [CommSemiring R]\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [EquivLike F A B]\n    extends CoalgEquivClass F R A B, MulEquivClass F A B : Prop\n\n"}
{"name":"BialgEquivClass.toCoalgEquivClass","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"F : Type u_1\nR : outParam (Type u_2)\nA : outParam (Type u_3)\nB : outParam (Type u_4)\ninst✝⁷ : CommSemiring R\ninst✝⁶ : Semiring A\ninst✝⁵ : Semiring B\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra R B\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : EquivLike F A B\nself : BialgEquivClass F R A B\n⊢ CoalgEquivClass F R A B","decl":"/-- `BialgEquivClass F R A B` asserts `F` is a type of bundled bialgebra equivalences\nfrom `A` to `B`. -/\nclass BialgEquivClass (F : Type*) (R A B : outParam Type*) [CommSemiring R]\n    [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]\n    [CoalgebraStruct R A] [CoalgebraStruct R B] [EquivLike F A B]\n    extends CoalgEquivClass F R A B, MulEquivClass F A B : Prop\n\n"}
{"name":"BialgEquivClass.toBialgHomClass","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"F : Type u_1\nR : Type u_2\nA : Type u_3\nB : Type u_4\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A\ninst✝⁶ : Semiring B\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : CoalgebraStruct R A\ninst✝² : CoalgebraStruct R B\ninst✝¹ : EquivLike F A B\ninst✝ : BialgEquivClass F R A B\n⊢ BialgHomClass F R A B","decl":"instance (priority := 100) toBialgHomClass : BialgHomClass F R A B where\n  map_add := map_add\n  map_smulₛₗ := map_smul\n  counit_comp := CoalgHomClass.counit_comp\n  map_comp_comul := CoalgHomClass.map_comp_comul\n  map_mul := map_mul\n  map_one := map_one\n\n"}
{"name":"BialgEquivClass.toAlgEquivClass","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"F : Type u_1\nR : Type u_2\nA : Type u_3\nB : Type u_4\ninst✝⁸ : CommSemiring R\ninst✝⁷ : Semiring A\ninst✝⁶ : Semiring B\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : CoalgebraStruct R A\ninst✝² : CoalgebraStruct R B\ninst✝¹ : EquivLike F A B\ninst✝ : BialgEquivClass F R A B\n⊢ AlgEquivClass F R A B","decl":"instance (priority := 100) toAlgEquivClass : AlgEquivClass F R A B where\n  map_mul := map_mul\n  map_add := map_add\n  commutes := AlgHomClass.commutes\n\n"}
{"name":"BialgEquiv.toEquiv_injective","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective BialgEquiv.toEquiv","decl":"theorem toEquiv_injective : Function.Injective (toEquiv : (A ≃ₐc[R] B) → A ≃ B) :=\n  fun ⟨_, _⟩ ⟨_, _⟩ h =>\n    (BialgEquiv.mk.injEq _ _ _ _).mpr (CoalgEquiv.toEquiv_injective h)\n\n"}
{"name":"BialgEquiv.toEquiv_inj","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne₁ e₂ : BialgEquiv R A B\n⊢ Iff (Eq e₁.toEquiv e₂.toEquiv) (Eq e₁ e₂)","decl":"@[simp]\ntheorem toEquiv_inj {e₁ e₂ : A ≃ₐc[R] B} : e₁.toEquiv = e₂.toEquiv ↔ e₁ = e₂ :=\n  toEquiv_injective.eq_iff\n\n"}
{"name":"BialgEquiv.toBialgHom_injective","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ Function.Injective BialgEquiv.toBialgHom","decl":"theorem toBialgHom_injective : Function.Injective (toBialgHom : (A ≃ₐc[R] B) → A →ₐc[R] B) :=\n  fun _ _ H => toEquiv_injective <| Equiv.ext <| BialgHom.congr_fun H\n\n"}
{"name":"BialgEquiv.instBialgEquivClass","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\n⊢ BialgEquivClass (BialgEquiv R A B) R A B","decl":"instance : BialgEquivClass (A ≃ₐc[R] B) R A B where\n  map_add := (·.map_add')\n  map_smulₛₗ := (·.map_smul')\n  counit_comp := (·.counit_comp)\n  map_comp_comul := (·.map_comp_comul)\n  map_mul := (·.map_mul')\n\n"}
{"name":"BialgEquiv.toBialgHom_inj","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne₁ e₂ : BialgEquiv R A B\n⊢ Iff (Eq ↑e₁ ↑e₂) (Eq e₁ e₂)","decl":"@[simp, norm_cast]\ntheorem toBialgHom_inj {e₁ e₂ : A ≃ₐc[R] B} : (↑e₁ : A →ₐc[R] B) = e₂ ↔ e₁ = e₂ :=\n  toBialgHom_injective.eq_iff\n\n"}
{"name":"BialgEquiv.coe_mk","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : A → B\nh : ∀ (x y : A), Eq (f (HAdd.hAdd x y)) (HAdd.hAdd (f x) (f y))\nh₀ : ∀ (m : R) (x : A), Eq ({ toFun := f, map_add' := h }.toFun (HSMul.hSMul m x)) (HSMul.hSMul ((RingHom.id R) m) ({ toFun := f, map_add' := h }.toFun x))\nh₁ : Eq (CoalgebraStruct.counit.comp { toFun := f, map_add' := h, map_smul' := h₀ }) CoalgebraStruct.counit\nh₂ : Eq ((TensorProduct.map { toFun := f, map_add' := h, map_smul' := h₀ } { toFun := f, map_add' := h, map_smul' := h₀ }).comp CoalgebraStruct.comul) (CoalgebraStruct.comul.comp { toFun := f, map_add' := h, map_smul' := h₀ })\nh₃ : B → A\nh₄ : Function.LeftInverse h₃ { toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂ }.toFun\nh₅ : Function.RightInverse h₃ { toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂ }.toFun\nh₆ : ∀ (x y : A), Eq ({ toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂, invFun := h₃, left_inv := h₄, right_inv := h₅ }.toFun (HMul.hMul x y)) (HMul.hMul ({ toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂, invFun := h₃, left_inv := h₄, right_inv := h₅ }.toFun x) ({ toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂, invFun := h₃, left_inv := h₄, right_inv := h₅ }.toFun y))\n⊢ Eq (⇑{ toFun := f, map_add' := h, map_smul' := h₀, counit_comp := h₁, map_comp_comul := h₂, invFun := h₃, left_inv := h₄, right_inv := h₅, map_mul' := h₆ }) f","decl":"@[simp]\ntheorem coe_mk {f h h₀ h₁ h₂ h₃ h₄ h₅ h₆} :\n    (⟨⟨⟨⟨⟨f, h⟩, h₀⟩, h₁, h₂⟩, h₃, h₄, h₅⟩, h₆⟩ : A ≃ₐc[R] B) = f := rfl\n\n"}
{"name":"BialgEquiv.coe_coe","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp, norm_cast]\ntheorem coe_coe : ⇑(e : A →ₐc[R] B) = e :=\n  rfl\n\n"}
{"name":"BialgEquiv.toCoalgEquiv_eq_coe","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : BialgEquiv R A B\n⊢ Eq f.toCoalgEquiv ↑f","decl":"@[simp]\ntheorem toCoalgEquiv_eq_coe (f : A ≃ₐc[R] B) : f.toCoalgEquiv = f :=\n  rfl\n\n"}
{"name":"BialgEquiv.toBialgHom_eq_coe","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : BialgEquiv R A B\n⊢ Eq f.toBialgHom ↑f","decl":"@[simp]\ntheorem toBialgHom_eq_coe (f : A ≃ₐc[R] B) : f.toBialgHom = f :=\n  rfl\n\n"}
{"name":"BialgEquiv.toAlgEquiv_eq_coe","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\nf : BialgEquiv R A B\n⊢ Eq f.toAlgEquiv ↑f","decl":"@[simp]\ntheorem toAlgEquiv_eq_coe (f : A ≃ₐc[R] B) : f.toAlgEquiv = f :=\n  rfl\n\n"}
{"name":"BialgEquiv.coe_toCoalgEquiv","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp]\ntheorem coe_toCoalgEquiv : ⇑(e : A ≃ₐ[R] B) = e :=\n  rfl\n\n"}
{"name":"BialgEquiv.coe_toBialgHom","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp]\ntheorem coe_toBialgHom : ⇑(e : A →ₐc[R] B) = e :=\n  rfl\n\n"}
{"name":"BialgEquiv.coe_toAlgEquiv","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq ⇑↑e ⇑e","decl":"@[simp]\ntheorem coe_toAlgEquiv : ⇑(e : A ≃ₐ[R] B) = e :=\n  rfl\n\n"}
{"name":"BialgEquiv.toCoalgEquiv_toCoalgHom","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq ↑e ↑↑e","decl":"theorem toCoalgEquiv_toCoalgHom : ((e : A ≃ₐc[R] B) : A →ₗc[R] B) = (e : A →ₐc[R] B) :=\n  rfl\n\n"}
{"name":"BialgEquiv.toBialgHom_toAlgHom","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq ↑↑e ↑e","decl":"theorem toBialgHom_toAlgHom : ((e : A →ₐc[R] B) : A →ₐ[R] B) = e := rfl\n\n"}
{"name":"BialgEquiv.ext","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne e' : BialgEquiv R A B\nh : ∀ (x : A), Eq (e x) (e' x)\n⊢ Eq e e'","decl":"@[ext]\ntheorem ext (h : ∀ x, e x = e' x) : e = e' :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"BialgEquiv.ext_iff","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne e' : BialgEquiv R A B\n⊢ Iff (Eq e e') (∀ (x : A), Eq (e x) (e' x))","decl":"@[ext]\ntheorem ext (h : ∀ x, e x = e' x) : e = e' :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"BialgEquiv.congr_arg","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\nx x' : A\na✝ : Eq x x'\n⊢ Eq (e x) (e x')","decl":"protected theorem congr_arg {x x'} : x = x' → e x = e x' :=\n  DFunLike.congr_arg e\n\n"}
{"name":"BialgEquiv.congr_fun","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne e' : BialgEquiv R A B\nh : Eq e e'\nx : A\n⊢ Eq (e x) (e' x)","decl":"protected theorem congr_fun (h : e = e') (x : A) : e x = e' x :=\n  DFunLike.congr_fun h x\n\n"}
{"name":"BialgEquiv.refl_invFun","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : CoalgebraStruct R A\na✝ : A\n⊢ Eq ((BialgEquiv.refl R A).invFun a✝) a✝","decl":"/-- The identity map is a bialgebra equivalence. -/\n@[refl, simps!]\ndef refl : A ≃ₐc[R] A :=\n  { CoalgEquiv.refl R A, BialgHom.id R A with }\n\n"}
{"name":"BialgEquiv.refl_apply","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : CoalgebraStruct R A\na : A\n⊢ Eq ((BialgEquiv.refl R A) a) a","decl":"/-- The identity map is a bialgebra equivalence. -/\n@[refl, simps!]\ndef refl : A ≃ₐc[R] A :=\n  { CoalgEquiv.refl R A, BialgHom.id R A with }\n\n"}
{"name":"BialgEquiv.refl_toCoalgEquiv","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq (↑(BialgEquiv.refl R A)) (CoalgEquiv.refl R A)","decl":"@[simp]\ntheorem refl_toCoalgEquiv : refl R A = CoalgEquiv.refl R A := rfl\n\n"}
{"name":"BialgEquiv.refl_toBialgHom","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\ninst✝³ : CommSemiring R\ninst✝² : Semiring A\ninst✝¹ : Algebra R A\ninst✝ : CoalgebraStruct R A\n⊢ Eq (↑(BialgEquiv.refl R A)) (BialgHom.id R A)","decl":"@[simp]\ntheorem refl_toBialgHom : refl R A = BialgHom.id R A :=\n  rfl\n\n"}
{"name":"BialgEquiv.symm_toCoalgEquiv","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq (↑e.symm) (↑e).symm","decl":"@[simp]\ntheorem symm_toCoalgEquiv (e : A ≃ₐc[R] B) :\n    e.symm = (e : A ≃ₗc[R] B).symm := rfl\n\n"}
{"name":"BialgEquiv.invFun_eq_symm","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq e.invFun ⇑e.symm","decl":"theorem invFun_eq_symm : e.invFun = e.symm :=\n  rfl\n\n"}
{"name":"BialgEquiv.coe_toEquiv_symm","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\ninst✝⁶ : CommSemiring R\ninst✝⁵ : Semiring A\ninst✝⁴ : Semiring B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : CoalgebraStruct R A\ninst✝ : CoalgebraStruct R B\ne : BialgEquiv R A B\n⊢ Eq e.toEquiv.symm ↑e.symm","decl":"@[simp]\ntheorem coe_toEquiv_symm : e.toEquiv.symm = e.symm :=\n  rfl\n\n"}
{"name":"BialgEquiv.trans_apply","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁹ : CommSemiring R\ninst✝⁸ : Semiring A\ninst✝⁷ : Semiring B\ninst✝⁶ : Semiring C\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : BialgEquiv R A B\ne₂₃ : BialgEquiv R B C\na✝ : A\n⊢ Eq ((e₁₂.trans e₂₃) a✝) (↑e₂₃ (↑e₁₂ a✝))","decl":"/-- Bialgebra equivalences are transitive. -/\n@[trans, simps!]\ndef trans (e₁₂ : A ≃ₐc[R] B) (e₂₃ : B ≃ₐc[R] C) : A ≃ₐc[R] C :=\n  { (e₁₂ : A ≃ₗc[R] B).trans (e₂₃ : B ≃ₗc[R] C), (e₁₂ : A ≃* B).trans (e₂₃ : B ≃* C) with }\n\n"}
{"name":"BialgEquiv.trans_invFun","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁹ : CommSemiring R\ninst✝⁸ : Semiring A\ninst✝⁷ : Semiring B\ninst✝⁶ : Semiring C\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : BialgEquiv R A B\ne₂₃ : BialgEquiv R B C\na✝ : C\n⊢ Eq ((e₁₂.trans e₂₃).invFun a✝) ((↑↑e₁₂).symm ((↑↑e₂₃).symm a✝))","decl":"/-- Bialgebra equivalences are transitive. -/\n@[trans, simps!]\ndef trans (e₁₂ : A ≃ₐc[R] B) (e₂₃ : B ≃ₐc[R] C) : A ≃ₐc[R] C :=\n  { (e₁₂ : A ≃ₗc[R] B).trans (e₂₃ : B ≃ₗc[R] C), (e₁₂ : A ≃* B).trans (e₂₃ : B ≃* C) with }\n\n"}
{"name":"BialgEquiv.trans_toCoalgEquiv","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁹ : CommSemiring R\ninst✝⁸ : Semiring A\ninst✝⁷ : Semiring B\ninst✝⁶ : Semiring C\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : BialgEquiv R A B\ne₂₃ : BialgEquiv R B C\n⊢ Eq (↑(e₁₂.trans e₂₃)) ((↑e₁₂).trans ↑e₂₃)","decl":"@[simp]\ntheorem trans_toCoalgEquiv :\n    (e₁₂.trans e₂₃ : A ≃ₗc[R] C) = (e₁₂ : A ≃ₗc[R] B).trans (e₂₃ : B ≃ₗc[R] C) := rfl\n\n"}
{"name":"BialgEquiv.trans_toBialgHom","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁹ : CommSemiring R\ninst✝⁸ : Semiring A\ninst✝⁷ : Semiring B\ninst✝⁶ : Semiring C\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : BialgEquiv R A B\ne₂₃ : BialgEquiv R B C\n⊢ Eq (↑(e₁₂.trans e₂₃)) ((↑e₂₃).comp ↑e₁₂)","decl":"@[simp]\ntheorem trans_toBialgHom :\n    (e₁₂.trans e₂₃ : A →ₐc[R] C) = (e₂₃ : B →ₐc[R] C).comp e₁₂ := rfl\n\n"}
{"name":"BialgEquiv.coe_toEquiv_trans","module":"Mathlib.RingTheory.Bialgebra.Equiv","initialProofState":"R : Type u\nA : Type v\nB : Type w\nC : Type u₁\ninst✝⁹ : CommSemiring R\ninst✝⁸ : Semiring A\ninst✝⁷ : Semiring B\ninst✝⁶ : Semiring C\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra R B\ninst✝³ : Algebra R C\ninst✝² : CoalgebraStruct R A\ninst✝¹ : CoalgebraStruct R B\ninst✝ : CoalgebraStruct R C\ne₁₂ : BialgEquiv R A B\ne₂₃ : BialgEquiv R B C\n⊢ Eq ((↑e₁₂).trans ↑e₂₃) ↑(e₁₂.trans e₂₃)","decl":"@[simp]\ntheorem coe_toEquiv_trans : (e₁₂ : A ≃ B).trans e₂₃ = (e₁₂.trans e₂₃ : A ≃ C) :=\n  rfl\n\n"}
