{"name":"Set.zero_mem_center","module":"Mathlib.Algebra.GroupWithZero.Center","initialProofState":"M₀ : Type u_1\ninst✝ : MulZeroClass M₀\n⊢ Membership.mem (Set.center M₀) 0","decl":"@[simp] lemma zero_mem_center : (0 : M₀) ∈ center M₀ where\n  comm _ := by rw [zero_mul, mul_zero]\n  left_assoc _ _ := by rw [zero_mul, zero_mul, zero_mul]\n  mid_assoc _ _ := by rw [mul_zero, zero_mul, mul_zero]\n  right_assoc _ _ := by rw [mul_zero, mul_zero, mul_zero]\n\n"}
{"name":"Set.zero_mem_centralizer","module":"Mathlib.Algebra.GroupWithZero.Center","initialProofState":"M₀ : Type u_1\ninst✝ : MulZeroClass M₀\ns : Set M₀\n⊢ Membership.mem s.centralizer 0","decl":"@[simp] lemma zero_mem_centralizer : (0 : M₀) ∈ centralizer s := by simp [mem_centralizer_iff]\n\n"}
{"name":"Set.center_units_subset","module":"Mathlib.Algebra.GroupWithZero.Center","initialProofState":"G₀ : Type u_2\ninst✝ : GroupWithZero G₀\n⊢ HasSubset.Subset (Set.center (Units G₀)) (Set.preimage Units.val (Set.center G₀))","decl":"lemma center_units_subset : center G₀ˣ ⊆ ((↑) : G₀ˣ → G₀) ⁻¹' center G₀ := by\n  simp_rw [subset_def, mem_preimage, _root_.Semigroup.mem_center_iff]\n  intro u hu a\n  obtain rfl | ha := eq_or_ne a 0\n  · rw [zero_mul, mul_zero]\n  · exact congr_arg Units.val <| hu <| Units.mk0 a ha\n\n"}
{"name":"Set.center_units_eq","module":"Mathlib.Algebra.GroupWithZero.Center","initialProofState":"G₀ : Type u_2\ninst✝ : GroupWithZero G₀\n⊢ Eq (Set.center (Units G₀)) (Set.preimage Units.val (Set.center G₀))","decl":"/-- In a group with zero, the center of the units is the preimage of the center. -/\nlemma center_units_eq : center G₀ˣ = ((↑) : G₀ˣ → G₀) ⁻¹' center G₀ :=\n  center_units_subset.antisymm subset_center_units\n\n"}
{"name":"Set.inv_mem_centralizer₀","module":"Mathlib.Algebra.GroupWithZero.Center","initialProofState":"G₀ : Type u_2\ninst✝ : GroupWithZero G₀\ns : Set G₀\na : G₀\nha : Membership.mem s.centralizer a\n⊢ Membership.mem s.centralizer (Inv.inv a)","decl":"@[simp] lemma inv_mem_centralizer₀ (ha : a ∈ centralizer s) : a⁻¹ ∈ centralizer s := by\n  obtain rfl | ha₀ := eq_or_ne a 0\n  · rw [inv_zero]\n    exact zero_mem_centralizer\n  · rintro c hc\n    rw [mul_inv_eq_iff_eq_mul₀ ha₀, mul_assoc, eq_inv_mul_iff_mul_eq₀ ha₀, ha c hc]\n\n"}
{"name":"Set.div_mem_centralizer₀","module":"Mathlib.Algebra.GroupWithZero.Center","initialProofState":"G₀ : Type u_2\ninst✝ : GroupWithZero G₀\ns : Set G₀\na b : G₀\nha : Membership.mem s.centralizer a\nhb : Membership.mem s.centralizer b\n⊢ Membership.mem s.centralizer (HDiv.hDiv a b)","decl":"@[simp] lemma div_mem_centralizer₀ (ha : a ∈ centralizer s) (hb : b ∈ centralizer s) :\n    a / b ∈ centralizer s := by\n  simpa only [div_eq_mul_inv] using mul_mem_centralizer ha (inv_mem_centralizer₀ hb)\n\n"}
