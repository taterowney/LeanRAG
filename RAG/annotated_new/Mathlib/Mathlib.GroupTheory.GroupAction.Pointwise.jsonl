{"name":"MulAction.smul_bijective_of_is_unit","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nα : Type u_2\ninst✝ : MulAction M α\nm : M\nhm : IsUnit m\n⊢ Function.Bijective fun a => HSMul.hSMul m a","decl":"@[to_additive]\ntheorem MulAction.smul_bijective_of_is_unit\n    {M : Type*} [Monoid M] {α : Type*} [MulAction M α] {m : M} (hm : IsUnit m) :\n    Function.Bijective (fun (a : α) ↦ m • a) := by\n  lift m to Mˣ using hm\n  rw [Function.bijective_iff_has_inverse]\n  use fun a ↦ m⁻¹ • a\n  constructor\n  · intro x; simp [← Units.smul_def]\n  · intro x; simp [← Units.smul_def]\n\n"}
{"name":"AddAction.vadd_bijective_of_is_addUnit","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"M : Type u_1\ninst✝¹ : AddMonoid M\nα : Type u_2\ninst✝ : AddAction M α\nm : M\nhm : IsAddUnit m\n⊢ Function.Bijective fun a => HVAdd.hVAdd m a","decl":"@[to_additive]\ntheorem MulAction.smul_bijective_of_is_unit\n    {M : Type*} [Monoid M] {α : Type*} [MulAction M α] {m : M} (hm : IsUnit m) :\n    Function.Bijective (fun (a : α) ↦ m • a) := by\n  lift m to Mˣ using hm\n  rw [Function.bijective_iff_has_inverse]\n  use fun a ↦ m⁻¹ • a\n  constructor\n  · intro x; simp [← Units.smul_def]\n  · intro x; simp [← Units.smul_def]\n\n"}
{"name":"image_vadd_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : AddMonoid R\ninst✝⁴ : AddMonoid S\nσ : R → S\ninst✝³ : AddAction R M\ninst✝² : AddAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F σ M N\nc : R\ns : Set M\n⊢ Eq (Set.image (⇑h) (HVAdd.hVAdd c s)) (HVAdd.hVAdd (σ c) (Set.image (⇑h) s))","decl":"@[to_additive]\ntheorem image_smul_setₛₗ :\n    h '' (c • s) = σ c • h '' s := by\n  simp only [← image_smul, image_image, map_smulₛₗ h]\n\n"}
{"name":"image_smul_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : Monoid R\ninst✝⁴ : Monoid S\nσ : R → S\ninst✝³ : MulAction R M\ninst✝² : MulAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F σ M N\nc : R\ns : Set M\n⊢ Eq (Set.image (⇑h) (HSMul.hSMul c s)) (HSMul.hSMul (σ c) (Set.image (⇑h) s))","decl":"@[to_additive]\ntheorem image_smul_setₛₗ :\n    h '' (c • s) = σ c • h '' s := by\n  simp only [← image_smul, image_image, map_smulₛₗ h]\n\n"}
{"name":"vadd_preimage_set_leₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : AddMonoid R\ninst✝⁴ : AddMonoid S\nσ : R → S\ninst✝³ : AddAction R M\ninst✝² : AddAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F σ M N\nc : R\nt : Set N\n⊢ HasSubset.Subset (HVAdd.hVAdd c (Set.preimage (⇑h) t)) (Set.preimage (⇑h) (HVAdd.hVAdd (σ c) t))","decl":"/-- Translation of preimage is contained in preimage of translation -/\n@[to_additive]\ntheorem smul_preimage_set_leₛₗ :\n    c • h ⁻¹' t ⊆ h ⁻¹' (σ c • t) := by\n  rintro x ⟨y, hy, rfl⟩\n  exact ⟨h y, hy, by rw [map_smulₛₗ]⟩\n\n"}
{"name":"smul_preimage_set_leₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : Monoid R\ninst✝⁴ : Monoid S\nσ : R → S\ninst✝³ : MulAction R M\ninst✝² : MulAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F σ M N\nc : R\nt : Set N\n⊢ HasSubset.Subset (HSMul.hSMul c (Set.preimage (⇑h) t)) (Set.preimage (⇑h) (HSMul.hSMul (σ c) t))","decl":"/-- Translation of preimage is contained in preimage of translation -/\n@[to_additive]\ntheorem smul_preimage_set_leₛₗ :\n    c • h ⁻¹' t ⊆ h ⁻¹' (σ c • t) := by\n  rintro x ⟨y, hy, rfl⟩\n  exact ⟨h y, hy, by rw [map_smulₛₗ]⟩\n\n"}
{"name":"preimage_smul_setₛₗ'","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : Monoid R\ninst✝⁴ : Monoid S\nσ : R → S\ninst✝³ : MulAction R M\ninst✝² : MulAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F σ M N\nc : R\nt : Set N\nhc : Function.Surjective fun m => HSMul.hSMul c m\nhc' : Function.Injective fun n => HSMul.hSMul (σ c) n\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul (σ c) t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"/-- General version of `preimage_smul_setₛₗ` -/\n@[to_additive]\ntheorem preimage_smul_setₛₗ'\n    (hc : Function.Surjective (fun (m : M) ↦ c • m))\n    (hc' : Function.Injective (fun (n : N) ↦ σ c • n)) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t := by\n  apply le_antisymm\n  · intro m\n    obtain ⟨m', rfl⟩ := hc m\n    rintro ⟨n, hn, hn'⟩\n    refine ⟨m', ?_, rfl⟩\n    rw [map_smulₛₗ] at hn'\n    rw [mem_preimage, ← hc' hn']\n    exact hn\n  · exact smul_preimage_set_leₛₗ M N σ h c t\n\n"}
{"name":"preimage_vadd_setₛₗ'","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : AddMonoid R\ninst✝⁴ : AddMonoid S\nσ : R → S\ninst✝³ : AddAction R M\ninst✝² : AddAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F σ M N\nc : R\nt : Set N\nhc : Function.Surjective fun m => HVAdd.hVAdd c m\nhc' : Function.Injective fun n => HVAdd.hVAdd (σ c) n\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd (σ c) t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"/-- General version of `preimage_smul_setₛₗ` -/\n@[to_additive]\ntheorem preimage_smul_setₛₗ'\n    (hc : Function.Surjective (fun (m : M) ↦ c • m))\n    (hc' : Function.Injective (fun (n : N) ↦ σ c • n)) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t := by\n  apply le_antisymm\n  · intro m\n    obtain ⟨m', rfl⟩ := hc m\n    rintro ⟨n, hn, hn'⟩\n    refine ⟨m', ?_, rfl⟩\n    rw [map_smulₛₗ] at hn'\n    rw [mem_preimage, ← hc' hn']\n    exact hn\n  · exact smul_preimage_set_leₛₗ M N σ h c t\n\n"}
{"name":"preimage_smul_setₛₗ_of_units","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : Monoid R\ninst✝⁴ : Monoid S\nσ : R → S\ninst✝³ : MulAction R M\ninst✝² : MulAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F σ M N\nc : R\nt : Set N\nhc : IsUnit c\nhc' : IsUnit (σ c)\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul (σ c) t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` when both scalars act by unit -/\n@[to_additive]\ntheorem preimage_smul_setₛₗ_of_units (hc : IsUnit c) (hc' : IsUnit (σ c)) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t := by\n  apply preimage_smul_setₛₗ'\n  · exact (MulAction.smul_bijective_of_is_unit hc).surjective\n  · exact (MulAction.smul_bijective_of_is_unit hc').injective\n\n\n"}
{"name":"preimage_vadd_setₛₗ_of_addUnits","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : AddMonoid R\ninst✝⁴ : AddMonoid S\nσ : R → S\ninst✝³ : AddAction R M\ninst✝² : AddAction S N\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F σ M N\nc : R\nt : Set N\nhc : IsAddUnit c\nhc' : IsAddUnit (σ c)\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd (σ c) t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` when both scalars act by unit -/\n@[to_additive]\ntheorem preimage_smul_setₛₗ_of_units (hc : IsUnit c) (hc' : IsUnit (σ c)) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t := by\n  apply preimage_smul_setₛₗ'\n  · exact (MulAction.smul_bijective_of_is_unit hc).surjective\n  · exact (MulAction.smul_bijective_of_is_unit hc').injective\n\n\n"}
{"name":"MonoidHom.preimage_smul_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : Monoid R\ninst✝⁴ : Monoid S\ninst✝³ : MulAction R M\ninst✝² : MulAction S N\nσ : MonoidHom R S\nF : Type u_8\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F (⇑σ) M N\nh : F\nc : R\nhc : IsUnit c\nt : Set N\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul (σ c) t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` in the context of a `MonoidHom` -/\n@[to_additive]\ntheorem MonoidHom.preimage_smul_setₛₗ (σ : R →* S)\n    {F : Type*} [FunLike F M N] [MulActionSemiHomClass F ⇑σ M N] (h : F)\n    {c : R} (hc : IsUnit c) (t : Set N) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t :=\n  preimage_smul_setₛₗ_of_units M N σ h t hc (IsUnit.map σ hc)\n\n"}
{"name":"AddMonoidHom.preimage_vadd_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁵ : AddMonoid R\ninst✝⁴ : AddMonoid S\ninst✝³ : AddAction R M\ninst✝² : AddAction S N\nσ : AddMonoidHom R S\nF : Type u_8\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F (⇑σ) M N\nh : F\nc : R\nhc : IsAddUnit c\nt : Set N\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd (σ c) t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` in the context of a `MonoidHom` -/\n@[to_additive]\ntheorem MonoidHom.preimage_smul_setₛₗ (σ : R →* S)\n    {F : Type*} [FunLike F M N] [MulActionSemiHomClass F ⇑σ M N] (h : F)\n    {c : R} (hc : IsUnit c) (t : Set N) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t :=\n  preimage_smul_setₛₗ_of_units M N σ h t hc (IsUnit.map σ hc)\n\n"}
{"name":"preimage_smul_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁷ : Monoid R\ninst✝⁶ : Monoid S\ninst✝⁵ : MulAction R M\ninst✝⁴ : MulAction S N\nG : Type u_8\ninst✝³ : FunLike G R S\ninst✝² : MonoidHomClass G R S\nσ : G\nF : Type u_9\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F (⇑σ) M N\nh : F\nc : R\nhc : IsUnit c\nt : Set N\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul (σ c) t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` in the context of a `MonoidHomClass` -/\n@[to_additive]\ntheorem preimage_smul_setₛₗ\n    {G : Type*} [FunLike G R S] [MonoidHomClass G R S] (σ : G)\n    {F : Type*} [FunLike F M N] [MulActionSemiHomClass F σ M N] (h : F)\n    {c : R} (hc : IsUnit c) (t : Set N) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t :=\n MonoidHom.preimage_smul_setₛₗ M N (σ : R →* S) h hc t\n\n"}
{"name":"preimage_vadd_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nS : Type u_2\nM : Type u_3\nN : Type u_6\ninst✝⁷ : AddMonoid R\ninst✝⁶ : AddMonoid S\ninst✝⁵ : AddAction R M\ninst✝⁴ : AddAction S N\nG : Type u_8\ninst✝³ : FunLike G R S\ninst✝² : AddMonoidHomClass G R S\nσ : G\nF : Type u_9\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F (⇑σ) M N\nh : F\nc : R\nhc : IsAddUnit c\nt : Set N\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd (σ c) t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` in the context of a `MonoidHomClass` -/\n@[to_additive]\ntheorem preimage_smul_setₛₗ\n    {G : Type*} [FunLike G R S] [MonoidHomClass G R S] (σ : G)\n    {F : Type*} [FunLike F M N] [MulActionSemiHomClass F σ M N] (h : F)\n    {c : R} (hc : IsUnit c) (t : Set N) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t :=\n MonoidHom.preimage_smul_setₛₗ M N (σ : R →* S) h hc t\n\n"}
{"name":"Group.preimage_smul_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"M : Type u_3\nN : Type u_6\nR : Type u_8\nS : Type u_9\ninst✝⁵ : Group R\ninst✝⁴ : Group S\nσ : R → S\ninst✝³ : MulAction R M\ninst✝² : MulAction S N\nF : Type u_10\ninst✝¹ : FunLike F M N\ninst✝ : MulActionSemiHomClass F σ M N\nh : F\nc : R\nt : Set N\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul (σ c) t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` in the context of a groups -/\n@[to_additive]\ntheorem Group.preimage_smul_setₛₗ\n    {R S : Type*} [Group R] [Group S] (σ : R → S)\n    [MulAction R M] [MulAction S N]\n    {F : Type*} [FunLike F M N] [MulActionSemiHomClass F σ M N] (h : F)\n    (c : R) (t : Set N) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t :=\n  preimage_smul_setₛₗ_of_units M N σ h t (Group.isUnit _) (Group.isUnit _)\n\n"}
{"name":"AddGroup.preimage_vadd_setₛₗ","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"M : Type u_3\nN : Type u_6\nR : Type u_8\nS : Type u_9\ninst✝⁵ : AddGroup R\ninst✝⁴ : AddGroup S\nσ : R → S\ninst✝³ : AddAction R M\ninst✝² : AddAction S N\nF : Type u_10\ninst✝¹ : FunLike F M N\ninst✝ : AddActionSemiHomClass F σ M N\nh : F\nc : R\nt : Set N\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd (σ c) t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"/-- `preimage_smul_setₛₗ` in the context of a groups -/\n@[to_additive]\ntheorem Group.preimage_smul_setₛₗ\n    {R S : Type*} [Group R] [Group S] (σ : R → S)\n    [MulAction R M] [MulAction S N]\n    {F : Type*} [FunLike F M N] [MulActionSemiHomClass F σ M N] (h : F)\n    (c : R) (t : Set N) :\n    h ⁻¹' (σ c • t) = c • h ⁻¹' t :=\n  preimage_smul_setₛₗ_of_units M N σ h t (Group.isUnit _) (Group.isUnit _)\n\n"}
{"name":"image_smul_set","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nM₁ : Type u_4\nM₂ : Type u_5\ninst✝⁴ : Monoid R\ninst✝³ : MulAction R M₁\ninst✝² : MulAction R M₂\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : MulActionHomClass F R M₁ M₂\nc : R\ns : Set M₁\n⊢ Eq (Set.image (⇑h) (HSMul.hSMul c s)) (HSMul.hSMul c (Set.image (⇑h) s))","decl":"@[to_additive (attr := simp)]\ntheorem image_smul_set :\n    h '' (c • s) = c • h '' s :=\n  image_smul_setₛₗ _ _ _ h c s\n\n"}
{"name":"image_vadd_set","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nM₁ : Type u_4\nM₂ : Type u_5\ninst✝⁴ : AddMonoid R\ninst✝³ : AddAction R M₁\ninst✝² : AddAction R M₂\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : AddActionHomClass F R M₁ M₂\nc : R\ns : Set M₁\n⊢ Eq (Set.image (⇑h) (HVAdd.hVAdd c s)) (HVAdd.hVAdd c (Set.image (⇑h) s))","decl":"@[to_additive (attr := simp)]\ntheorem image_smul_set :\n    h '' (c • s) = c • h '' s :=\n  image_smul_setₛₗ _ _ _ h c s\n\n"}
{"name":"smul_preimage_set_le","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nM₁ : Type u_4\nM₂ : Type u_5\ninst✝⁴ : Monoid R\ninst✝³ : MulAction R M₁\ninst✝² : MulAction R M₂\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : MulActionHomClass F R M₁ M₂\nc : R\nt : Set M₂\n⊢ HasSubset.Subset (HSMul.hSMul c (Set.preimage (⇑h) t)) (Set.preimage (⇑h) (HSMul.hSMul c t))","decl":"@[to_additive]\ntheorem smul_preimage_set_le :\n    c • h ⁻¹' t ⊆ h ⁻¹' (c • t) :=\n  smul_preimage_set_leₛₗ _ _ _ h c t\n\n"}
{"name":"vadd_preimage_set_le","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nM₁ : Type u_4\nM₂ : Type u_5\ninst✝⁴ : AddMonoid R\ninst✝³ : AddAction R M₁\ninst✝² : AddAction R M₂\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : AddActionHomClass F R M₁ M₂\nc : R\nt : Set M₂\n⊢ HasSubset.Subset (HVAdd.hVAdd c (Set.preimage (⇑h) t)) (Set.preimage (⇑h) (HVAdd.hVAdd c t))","decl":"@[to_additive]\ntheorem smul_preimage_set_le :\n    c • h ⁻¹' t ⊆ h ⁻¹' (c • t) :=\n  smul_preimage_set_leₛₗ _ _ _ h c t\n\n"}
{"name":"preimage_smul_set","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nM₁ : Type u_4\nM₂ : Type u_5\ninst✝⁴ : Monoid R\ninst✝³ : MulAction R M₁\ninst✝² : MulAction R M₂\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : MulActionHomClass F R M₁ M₂\nc : R\nt : Set M₂\nhc : IsUnit c\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul c t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"@[to_additive]\ntheorem preimage_smul_set (hc : IsUnit c) :\n    h ⁻¹' (c • t) = c • h ⁻¹' t :=\n  preimage_smul_setₛₗ_of_units _ _ _ h t hc hc\n\n"}
{"name":"preimage_vadd_set","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_1\nM₁ : Type u_4\nM₂ : Type u_5\ninst✝⁴ : AddMonoid R\ninst✝³ : AddAction R M₁\ninst✝² : AddAction R M₂\nF : Type u_7\nh : F\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : AddActionHomClass F R M₁ M₂\nc : R\nt : Set M₂\nhc : IsAddUnit c\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd c t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"@[to_additive]\ntheorem preimage_smul_set (hc : IsUnit c) :\n    h ⁻¹' (c • t) = c • h ⁻¹' t :=\n  preimage_smul_setₛₗ_of_units _ _ _ h t hc hc\n\n"}
{"name":"AddGroup.preimage_vadd_set","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_8\ninst✝⁴ : AddGroup R\nM₁ : Type u_9\nM₂ : Type u_10\ninst✝³ : AddAction R M₁\ninst✝² : AddAction R M₂\nF : Type u_11\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : AddActionHomClass F R M₁ M₂\nh : F\nc : R\nt : Set M₂\n⊢ Eq (Set.preimage (⇑h) (HVAdd.hVAdd c t)) (HVAdd.hVAdd c (Set.preimage (⇑h) t))","decl":"@[to_additive]\ntheorem Group.preimage_smul_set\n    {R : Type*} [Group R] (M₁ M₂ : Type*)\n    [MulAction R M₁] [MulAction R M₂]\n    {F : Type*} [FunLike F M₁ M₂] [MulActionHomClass F R M₁ M₂] (h : F)\n    (c : R) (t : Set M₂) :\n    h ⁻¹' (c • t) = c • h ⁻¹' t :=\n  _root_.preimage_smul_set R M₁ M₂ h t (Group.isUnit c)\n\n"}
{"name":"Group.preimage_smul_set","module":"Mathlib.GroupTheory.GroupAction.Pointwise","initialProofState":"R : Type u_8\ninst✝⁴ : Group R\nM₁ : Type u_9\nM₂ : Type u_10\ninst✝³ : MulAction R M₁\ninst✝² : MulAction R M₂\nF : Type u_11\ninst✝¹ : FunLike F M₁ M₂\ninst✝ : MulActionHomClass F R M₁ M₂\nh : F\nc : R\nt : Set M₂\n⊢ Eq (Set.preimage (⇑h) (HSMul.hSMul c t)) (HSMul.hSMul c (Set.preimage (⇑h) t))","decl":"@[to_additive]\ntheorem Group.preimage_smul_set\n    {R : Type*} [Group R] (M₁ M₂ : Type*)\n    [MulAction R M₁] [MulAction R M₂]\n    {F : Type*} [FunLike F M₁ M₂] [MulActionHomClass F R M₁ M₂] (h : F)\n    (c : R) (t : Set M₂) :\n    h ⁻¹' (c • t) = c • h ⁻¹' t :=\n  _root_.preimage_smul_set R M₁ M₂ h t (Group.isUnit c)\n\n"}
