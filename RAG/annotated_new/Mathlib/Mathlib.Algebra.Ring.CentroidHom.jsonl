{"name":"CentroidHom.map_mul_left'","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_6\ninst✝ : NonUnitalNonAssocSemiring α\nself : CentroidHom α\na b : α\n⊢ Eq ((↑self.toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul a ((↑self.toAddMonoidHom).toFun b))","decl":"/-- The type of centroid homomorphisms from `α` to `α`. -/\nstructure CentroidHom (α : Type*) [NonUnitalNonAssocSemiring α] extends α →+ α where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left' (a b : α) : toFun (a * b) = a * toFun b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right' (a b : α) : toFun (a * b) = toFun a * b\n\n"}
{"name":"CentroidHom.mk.injEq","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_6\ninst✝ : NonUnitalNonAssocSemiring α\ntoAddMonoidHom✝ : AddMonoidHom α α\nmap_mul_left'✝ : ∀ (a b : α), Eq ((↑toAddMonoidHom✝).toFun (HMul.hMul a b)) (HMul.hMul a ((↑toAddMonoidHom✝).toFun b))\nmap_mul_right'✝ : ∀ (a b : α), Eq ((↑toAddMonoidHom✝).toFun (HMul.hMul a b)) (HMul.hMul ((↑toAddMonoidHom✝).toFun a) b)\ntoAddMonoidHom : AddMonoidHom α α\nmap_mul_left' : ∀ (a b : α), Eq ((↑toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul a ((↑toAddMonoidHom).toFun b))\nmap_mul_right' : ∀ (a b : α), Eq ((↑toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul ((↑toAddMonoidHom).toFun a) b)\n⊢ Eq (Eq { toAddMonoidHom := toAddMonoidHom✝, map_mul_left' := map_mul_left'✝, map_mul_right' := map_mul_right'✝ } { toAddMonoidHom := toAddMonoidHom, map_mul_left' := map_mul_left', map_mul_right' := map_mul_right' }) (Eq toAddMonoidHom✝ toAddMonoidHom)","decl":"/-- The type of centroid homomorphisms from `α` to `α`. -/\nstructure CentroidHom (α : Type*) [NonUnitalNonAssocSemiring α] extends α →+ α where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left' (a b : α) : toFun (a * b) = a * toFun b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right' (a b : α) : toFun (a * b) = toFun a * b\n\n"}
{"name":"CentroidHom.mk.inj","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_6\ninst✝ : NonUnitalNonAssocSemiring α\ntoAddMonoidHom✝ : AddMonoidHom α α\nmap_mul_left'✝ : ∀ (a b : α), Eq ((↑toAddMonoidHom✝).toFun (HMul.hMul a b)) (HMul.hMul a ((↑toAddMonoidHom✝).toFun b))\nmap_mul_right'✝ : ∀ (a b : α), Eq ((↑toAddMonoidHom✝).toFun (HMul.hMul a b)) (HMul.hMul ((↑toAddMonoidHom✝).toFun a) b)\ntoAddMonoidHom : AddMonoidHom α α\nmap_mul_left' : ∀ (a b : α), Eq ((↑toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul a ((↑toAddMonoidHom).toFun b))\nmap_mul_right' : ∀ (a b : α), Eq ((↑toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul ((↑toAddMonoidHom).toFun a) b)\nx✝ : Eq { toAddMonoidHom := toAddMonoidHom✝, map_mul_left' := map_mul_left'✝, map_mul_right' := map_mul_right'✝ } { toAddMonoidHom := toAddMonoidHom, map_mul_left' := map_mul_left', map_mul_right' := map_mul_right' }\n⊢ Eq toAddMonoidHom✝ toAddMonoidHom","decl":"/-- The type of centroid homomorphisms from `α` to `α`. -/\nstructure CentroidHom (α : Type*) [NonUnitalNonAssocSemiring α] extends α →+ α where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left' (a b : α) : toFun (a * b) = a * toFun b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right' (a b : α) : toFun (a * b) = toFun a * b\n\n"}
{"name":"CentroidHom.mk.sizeOf_spec","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_6\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : SizeOf α\ntoAddMonoidHom : AddMonoidHom α α\nmap_mul_left' : ∀ (a b : α), Eq ((↑toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul a ((↑toAddMonoidHom).toFun b))\nmap_mul_right' : ∀ (a b : α), Eq ((↑toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul ((↑toAddMonoidHom).toFun a) b)\n⊢ Eq (SizeOf.sizeOf { toAddMonoidHom := toAddMonoidHom, map_mul_left' := map_mul_left', map_mul_right' := map_mul_right' }) (HAdd.hAdd 1 (SizeOf.sizeOf toAddMonoidHom))","decl":"/-- The type of centroid homomorphisms from `α` to `α`. -/\nstructure CentroidHom (α : Type*) [NonUnitalNonAssocSemiring α] extends α →+ α where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left' (a b : α) : toFun (a * b) = a * toFun b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right' (a b : α) : toFun (a * b) = toFun a * b\n\n"}
{"name":"CentroidHom.map_mul_right'","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_6\ninst✝ : NonUnitalNonAssocSemiring α\nself : CentroidHom α\na b : α\n⊢ Eq ((↑self.toAddMonoidHom).toFun (HMul.hMul a b)) (HMul.hMul ((↑self.toAddMonoidHom).toFun a) b)","decl":"/-- The type of centroid homomorphisms from `α` to `α`. -/\nstructure CentroidHom (α : Type*) [NonUnitalNonAssocSemiring α] extends α →+ α where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left' (a b : α) : toFun (a * b) = a * toFun b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right' (a b : α) : toFun (a * b) = toFun a * b\n\n"}
{"name":"CentroidHomClass.toAddMonoidHomClass","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"F : Type u_6\nα : outParam (Type u_7)\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : FunLike F α α\nself : CentroidHomClass F α\n⊢ AddMonoidHomClass F α α","decl":"/-- `CentroidHomClass F α` states that `F` is a type of centroid homomorphisms.\n\nYou should extend this class when you extend `CentroidHom`. -/\nclass CentroidHomClass (F : Type*) (α : outParam Type*)\n    [NonUnitalNonAssocSemiring α] [FunLike F α α] extends AddMonoidHomClass F α α : Prop where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left (f : F) (a b : α) : f (a * b) = a * f b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right (f : F) (a b : α) : f (a * b) = f a * b\n\n\n"}
{"name":"CentroidHomClass.map_mul_right","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"F : Type u_6\nα : outParam (Type u_7)\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : FunLike F α α\nself : CentroidHomClass F α\nf : F\na b : α\n⊢ Eq (f (HMul.hMul a b)) (HMul.hMul (f a) b)","decl":"/-- `CentroidHomClass F α` states that `F` is a type of centroid homomorphisms.\n\nYou should extend this class when you extend `CentroidHom`. -/\nclass CentroidHomClass (F : Type*) (α : outParam Type*)\n    [NonUnitalNonAssocSemiring α] [FunLike F α α] extends AddMonoidHomClass F α α : Prop where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left (f : F) (a b : α) : f (a * b) = a * f b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right (f : F) (a b : α) : f (a * b) = f a * b\n\n\n"}
{"name":"CentroidHomClass.map_mul_left","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"F : Type u_6\nα : outParam (Type u_7)\ninst✝¹ : NonUnitalNonAssocSemiring α\ninst✝ : FunLike F α α\nself : CentroidHomClass F α\nf : F\na b : α\n⊢ Eq (f (HMul.hMul a b)) (HMul.hMul a (f b))","decl":"/-- `CentroidHomClass F α` states that `F` is a type of centroid homomorphisms.\n\nYou should extend this class when you extend `CentroidHom`. -/\nclass CentroidHomClass (F : Type*) (α : outParam Type*)\n    [NonUnitalNonAssocSemiring α] [FunLike F α α] extends AddMonoidHomClass F α α : Prop where\n  /-- Commutativity of centroid homomorphims with left multiplication. -/\n  map_mul_left (f : F) (a b : α) : f (a * b) = a * f b\n  /-- Commutativity of centroid homomorphims with right multiplication. -/\n  map_mul_right (f : F) (a b : α) : f (a * b) = f a * b\n\n\n"}
{"name":"CentroidHom.instCentroidHomClass","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ CentroidHomClass (CentroidHom α) α","decl":"instance : CentroidHomClass (CentroidHom α) α where\n  map_zero f := f.map_zero'\n  map_add f := f.map_add'\n  map_mul_left f := f.map_mul_left'\n  map_mul_right f := f.map_mul_right'\n\n\n-- Porting note: removed @[simp]; not in normal form. (`toAddMonoidHom_eq_coe` below ensures that\n-- the LHS simplifies to the RHS anyway.)\n"}
{"name":"CentroidHom.toFun_eq_coe","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\n⊢ Eq (↑f.toAddMonoidHom).toFun ⇑f","decl":"theorem toFun_eq_coe {f : CentroidHom α} : f.toFun = f := rfl\n\n"}
{"name":"CentroidHom.ext_iff","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf g : CentroidHom α\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : CentroidHom α} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CentroidHom.ext","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf g : CentroidHom α\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : CentroidHom α} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CentroidHom.coe_toAddMonoidHom","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp, norm_cast]\ntheorem coe_toAddMonoidHom (f : CentroidHom α) : ⇑(f : α →+ α) = f :=\n  rfl\n\n"}
{"name":"CentroidHom.toAddMonoidHom_eq_coe","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\n⊢ Eq f.toAddMonoidHom ↑f","decl":"@[simp]\ntheorem toAddMonoidHom_eq_coe (f : CentroidHom α) : f.toAddMonoidHom = f :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_toAddMonoidHom_injective","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Function.Injective AddMonoidHomClass.toAddMonoidHom","decl":"theorem coe_toAddMonoidHom_injective : Injective ((↑) : CentroidHom α → α →+ α) :=\n  fun _f _g h => ext fun a ↦\n    haveI := DFunLike.congr_fun h a\n    this\n\n"}
{"name":"CentroidHom.toEnd_injective","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Function.Injective CentroidHom.toEnd","decl":"theorem toEnd_injective : Injective (CentroidHom.toEnd : CentroidHom α → AddMonoid.End α) :=\n  coe_toAddMonoidHom_injective\n\n"}
{"name":"CentroidHom.coe_copy","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\nf' : α → α\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : CentroidHom α) (f' : α → α) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"CentroidHom.copy_eq","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\nf' : α → α\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : CentroidHom α) (f' : α → α) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"CentroidHom.coe_id","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (⇑(CentroidHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(CentroidHom.id α) = id :=\n  rfl\n\n"}
{"name":"CentroidHom.toAddMonoidHom_id","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (↑(CentroidHom.id α)) (AddMonoidHom.id α)","decl":"@[simp, norm_cast]\ntheorem toAddMonoidHom_id : (CentroidHom.id α : α →+ α) = AddMonoidHom.id α :=\n  rfl\n\n"}
{"name":"CentroidHom.id_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\na : α\n⊢ Eq ((CentroidHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : CentroidHom.id α a = a :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_comp","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\ng f : CentroidHom α\n⊢ Eq (⇑(g.comp f)) (Function.comp ⇑g ⇑f)","decl":"@[simp, norm_cast]\ntheorem coe_comp (g f : CentroidHom α) : ⇑(g.comp f) = g ∘ f :=\n  rfl\n\n"}
{"name":"CentroidHom.comp_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\ng f : CentroidHom α\na : α\n⊢ Eq ((g.comp f) a) (g (f a))","decl":"@[simp]\ntheorem comp_apply (g f : CentroidHom α) (a : α) : g.comp f a = g (f a) :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_comp_addMonoidHom","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\ng f : CentroidHom α\n⊢ Eq (↑(g.comp f)) ((↑g).comp ↑f)","decl":"@[simp, norm_cast]\ntheorem coe_comp_addMonoidHom (g f : CentroidHom α) : (g.comp f : α →+ α) = (g : α →+ α).comp f :=\n  rfl\n\n"}
{"name":"CentroidHom.comp_assoc","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nh g f : CentroidHom α\n⊢ Eq ((h.comp g).comp f) (h.comp (g.comp f))","decl":"@[simp]\ntheorem comp_assoc (h g f : CentroidHom α) : (h.comp g).comp f = h.comp (g.comp f) :=\n  rfl\n\n"}
{"name":"CentroidHom.comp_id","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\n⊢ Eq (f.comp (CentroidHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : CentroidHom α) : f.comp (CentroidHom.id α) = f :=\n  rfl\n\n"}
{"name":"CentroidHom.id_comp","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\n⊢ Eq ((CentroidHom.id α).comp f) f","decl":"@[simp]\ntheorem id_comp (f : CentroidHom α) : (CentroidHom.id α).comp f = f :=\n  rfl\n\n"}
{"name":"CentroidHom.cancel_right","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\ng₁ g₂ f : CentroidHom α\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ f : CentroidHom α} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h ↦ ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, fun a ↦ congrFun (congrArg comp a) f⟩\n\n"}
{"name":"CentroidHom.cancel_left","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\ng f₁ f₂ : CentroidHom α\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g f₁ f₂ : CentroidHom α} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h ↦ ext fun a ↦ hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"CentroidHom.instIsScalarTower","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nN : Type u_3\nα : Type u_5\ninst✝⁶ : NonUnitalNonAssocSemiring α\ninst✝⁵ : Monoid M\ninst✝⁴ : Monoid N\ninst✝³ : DistribMulAction M α\ninst✝² : DistribMulAction N α\ninst✝¹ : SMul M N\ninst✝ : IsScalarTower M N α\n⊢ IsScalarTower M N (CentroidHom α)","decl":"instance [SMul M N] [IsScalarTower M N α] : IsScalarTower M N (CentroidHom α) where\n  smul_assoc _ _ _ := ext fun _ => smul_assoc _ _ _\n\n"}
{"name":"CentroidHom.instSMulCommClass","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nN : Type u_3\nα : Type u_5\ninst✝⁵ : NonUnitalNonAssocSemiring α\ninst✝⁴ : Monoid M\ninst✝³ : Monoid N\ninst✝² : DistribMulAction M α\ninst✝¹ : DistribMulAction N α\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass M N (CentroidHom α)","decl":"instance [SMulCommClass M N α] : SMulCommClass M N (CentroidHom α) where\n  smul_comm _ _ _ := ext fun _ => smul_comm _ _ _\n\n"}
{"name":"CentroidHom.instIsCentralScalar","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nα : Type u_5\ninst✝⁴ : NonUnitalNonAssocSemiring α\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M α\ninst✝¹ : DistribMulAction (MulOpposite M) α\ninst✝ : IsCentralScalar M α\n⊢ IsCentralScalar M (CentroidHom α)","decl":"instance [DistribMulAction Mᵐᵒᵖ α] [IsCentralScalar M α] : IsCentralScalar M (CentroidHom α) where\n  op_smul_eq_smul _ _ := ext fun _ => op_smul_eq_smul _ _\n\n"}
{"name":"CentroidHom.isScalarTowerRight","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nα : Type u_5\ninst✝² : NonUnitalNonAssocSemiring α\ninst✝¹ : Monoid M\ninst✝ : DistribMulAction M α\n⊢ IsScalarTower M (CentroidHom α) (CentroidHom α)","decl":"instance isScalarTowerRight : IsScalarTower M (CentroidHom α) (CentroidHom α) where\n  smul_assoc _ _ _ := rfl\n\n"}
{"name":"CentroidHom.coe_zero","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (⇑0) 0","decl":"@[simp, norm_cast]\ntheorem coe_zero : ⇑(0 : CentroidHom α) = 0 :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_one","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (⇑1) id","decl":"@[simp, norm_cast]\ntheorem coe_one : ⇑(1 : CentroidHom α) = id :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_add","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf g : CentroidHom α\n⊢ Eq (⇑(HAdd.hAdd f g)) (HAdd.hAdd ⇑f ⇑g)","decl":"@[simp, norm_cast]\ntheorem coe_add (f g : CentroidHom α) : ⇑(f + g) = f + g :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_mul","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf g : CentroidHom α\n⊢ Eq (⇑(HMul.hMul f g)) (Function.comp ⇑f ⇑g)","decl":"@[simp, norm_cast]\ntheorem coe_mul (f g : CentroidHom α) : ⇑(f * g) = f ∘ g :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_smul","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nα : Type u_5\ninst✝⁴ : NonUnitalNonAssocSemiring α\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M α\ninst✝¹ : SMulCommClass M α α\ninst✝ : IsScalarTower M α α\nn : M\nf : CentroidHom α\n⊢ Eq (⇑(HSMul.hSMul n f)) (HSMul.hSMul n ⇑f)","decl":"@[simp, norm_cast]\ntheorem coe_smul (n : M) (f : CentroidHom α) : ⇑(n • f) = n • ⇑f :=\n  rfl\n\n"}
{"name":"CentroidHom.zero_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\na : α\n⊢ Eq (0 a) 0","decl":"@[simp]\ntheorem zero_apply (a : α) : (0 : CentroidHom α) a = 0 :=\n  rfl\n\n"}
{"name":"CentroidHom.one_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\na : α\n⊢ Eq (1 a) a","decl":"@[simp]\ntheorem one_apply (a : α) : (1 : CentroidHom α) a = a :=\n  rfl\n\n"}
{"name":"CentroidHom.add_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf g : CentroidHom α\na : α\n⊢ Eq ((HAdd.hAdd f g) a) (HAdd.hAdd (f a) (g a))","decl":"@[simp]\ntheorem add_apply (f g : CentroidHom α) (a : α) : (f + g) a = f a + g a :=\n  rfl\n\n"}
{"name":"CentroidHom.mul_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf g : CentroidHom α\na : α\n⊢ Eq ((HMul.hMul f g) a) (f (g a))","decl":"@[simp]\ntheorem mul_apply (f g : CentroidHom α) (a : α) : (f * g) a = f (g a) :=\n  rfl\n\n"}
{"name":"CentroidHom.smul_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nα : Type u_5\ninst✝⁴ : NonUnitalNonAssocSemiring α\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M α\ninst✝¹ : SMulCommClass M α α\ninst✝ : IsScalarTower M α α\nn : M\nf : CentroidHom α\na : α\n⊢ Eq ((HSMul.hSMul n f) a) (HSMul.hSMul n (f a))","decl":"@[simp]\ntheorem smul_apply (n : M) (f : CentroidHom α) (a : α) : (n • f) a = n • f a :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_zero","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (CentroidHom.toEnd 0) 0","decl":"@[simp]\ntheorem toEnd_zero : (0 : CentroidHom α).toEnd = 0 :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_add","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nx y : CentroidHom α\n⊢ Eq (HAdd.hAdd x y).toEnd (HAdd.hAdd x.toEnd y.toEnd)","decl":"@[simp]\ntheorem toEnd_add (x y : CentroidHom α) : (x + y).toEnd = x.toEnd + y.toEnd :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_smul","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"M : Type u_2\nα : Type u_5\ninst✝⁴ : NonUnitalNonAssocSemiring α\ninst✝³ : Monoid M\ninst✝² : DistribMulAction M α\ninst✝¹ : SMulCommClass M α α\ninst✝ : IsScalarTower M α α\nm : M\nx : CentroidHom α\n⊢ Eq (HSMul.hSMul m x).toEnd (HSMul.hSMul m x.toEnd)","decl":"theorem toEnd_smul (m : M) (x : CentroidHom α) : (m • x).toEnd = m • x.toEnd :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_natCast","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nn : Nat\n⊢ Eq (⇑↑n) (HSMul.hSMul n ⇑(CentroidHom.id α))","decl":"@[simp, norm_cast]\ntheorem coe_natCast (n : ℕ) : ⇑(n : CentroidHom α) = n • (CentroidHom.id α) :=\n  rfl\n\n"}
{"name":"CentroidHom.natCast_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nn : Nat\nm : α\n⊢ Eq (↑n m) (HSMul.hSMul n m)","decl":"theorem natCast_apply (n : ℕ) (m : α) : (n : CentroidHom α) m = n • m :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_one","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (CentroidHom.toEnd 1) 1","decl":"@[simp]\ntheorem toEnd_one : (1 : CentroidHom α).toEnd = 1 :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_mul","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nx y : CentroidHom α\n⊢ Eq (HMul.hMul x y).toEnd (HMul.hMul x.toEnd y.toEnd)","decl":"@[simp]\ntheorem toEnd_mul (x y : CentroidHom α) : (x * y).toEnd = x.toEnd * y.toEnd :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_pow","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nx : CentroidHom α\nn : Nat\n⊢ Eq (HPow.hPow x n).toEnd (HPow.hPow x.toEnd n)","decl":"@[simp]\ntheorem toEnd_pow (x : CentroidHom α) (n : ℕ) : (x ^ n).toEnd = x.toEnd ^ n :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_natCast","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nn : Nat\n⊢ Eq (↑n).toEnd ↑n","decl":"@[simp, norm_cast]\ntheorem toEnd_natCast (n : ℕ) : (n : CentroidHom α).toEnd = ↑n :=\n  rfl\n\n-- cf `add_monoid.End.semiring`\n"}
{"name":"CentroidHom.toEndRingHom_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nf : CentroidHom α\n⊢ Eq ((CentroidHom.toEndRingHom α) f) f.toEnd","decl":"variable (α) in\n/-- `CentroidHom.toEnd` as a `RingHom`. -/\n@[simps]\ndef toEndRingHom : CentroidHom α →+* AddMonoid.End α where\n  toFun := toEnd\n  map_zero' := toEnd_zero\n  map_one' := toEnd_one\n  map_add' := toEnd_add\n  map_mul' := toEnd_mul\n\n"}
{"name":"CentroidHom.comp_mul_comm","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nT S : CentroidHom α\na b : α\n⊢ Eq (Function.comp (⇑T) (⇑S) (HMul.hMul a b)) (Function.comp (⇑S) (⇑T) (HMul.hMul a b))","decl":"theorem comp_mul_comm (T S : CentroidHom α) (a b : α) : (T ∘ S) (a * b) = (S ∘ T) (a * b) := by\n  simp only [Function.comp_apply]\n  rw [map_mul_right, map_mul_left, ← map_mul_right, ← map_mul_left]\n\n"}
{"name":"CentroidHom.smul_def","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nT : CentroidHom α\na : α\n⊢ Eq (HSMul.hSMul T a) (T a)","decl":"@[simp]\nlemma smul_def (T : CentroidHom α) (a : α) : T • a = T a := rfl\n\n"}
{"name":"CentroidHom.instSMulCommClass_1","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ SMulCommClass (CentroidHom α) α α","decl":"instance : SMulCommClass (CentroidHom α) α α where\n  smul_comm _ _ _ := map_mul_left _ _ _\n\n"}
{"name":"CentroidHom.instSMulCommClass_2","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ SMulCommClass α (CentroidHom α) α","decl":"instance : SMulCommClass α (CentroidHom α) α := SMulCommClass.symm _ _ _\n\n"}
{"name":"CentroidHom.instIsScalarTower_1","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ IsScalarTower (CentroidHom α) α α","decl":"instance : IsScalarTower (CentroidHom α) α α where\n  smul_assoc _ _ _ := (map_mul_right _ _ _).symm\n\n"}
{"name":"Module.toCentroidHom_apply_toFun","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝⁴ : NonUnitalNonAssocSemiring α\nR : Type u_6\ninst✝³ : CommSemiring R\ninst✝² : Module R α\ninst✝¹ : SMulCommClass R α α\ninst✝ : IsScalarTower R α α\nx : R\na : α\n⊢ Eq ((Module.toCentroidHom x) a) (HSMul.hSMul x a)","decl":"/-- The natural ring homomorphism from `R` into `CentroidHom α`.\n\nThis is a stronger version of `Module.toAddMonoidEnd`. -/\n@[simps! apply_toFun]\ndef _root_.Module.toCentroidHom : R →+* CentroidHom α := RingHom.smulOneHom\n\n"}
{"name":"CentroidHom.centroid_eq_centralizer_mulLeftRight","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\n⊢ Eq (CentroidHom.toEndRingHom α).rangeS (Subsemiring.centralizer (Union.union (Set.range ⇑AddMonoid.End.mulLeft) (Set.range ⇑AddMonoid.End.mulRight)))","decl":"lemma centroid_eq_centralizer_mulLeftRight :\n    RingHom.rangeS (toEndRingHom α) = Subsemiring.centralizer (Set.range L ∪ Set.range R) := by\n  ext T\n  refine ⟨?_, fun h ↦ ?_⟩\n  · rintro ⟨f, rfl⟩ S (⟨a, rfl⟩ | ⟨b, rfl⟩)\n    · exact AddMonoidHom.ext fun b ↦ (map_mul_left f a b).symm\n    · exact AddMonoidHom.ext fun a ↦ (map_mul_right f a b).symm\n  · rw [Subsemiring.mem_centralizer_iff] at h\n    refine ⟨⟨T, fun a b ↦ ?_, fun a b ↦ ?_⟩, rfl⟩\n    · exact congr($(h (L a) (.inl ⟨a, rfl⟩)) b).symm\n    · exact congr($(h (R b) (.inr ⟨b, rfl⟩)) a).symm\n\n"}
{"name":"CentroidHom.centerToCentroidCenter_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nz : Subtype fun x => Membership.mem (NonUnitalSubsemiring.center α) x\na : α\n⊢ Eq ((CentroidHom.centerToCentroidCenter z) a) (HMul.hMul (↑z) a)","decl":"lemma centerToCentroidCenter_apply (z : NonUnitalSubsemiring.center α) (a : α) :\n    (centerToCentroidCenter z) a = z * a := rfl\n\n"}
{"name":"CentroidHom.centerToCentroid_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\nz : Subtype fun x => Membership.mem (NonUnitalSubsemiring.center α) x\na : α\n⊢ Eq ((CentroidHom.centerToCentroid z) a) (HMul.hMul (↑z) a)","decl":"lemma centerToCentroid_apply (z : NonUnitalSubsemiring.center α) (a : α) :\n    (centerToCentroid z) a = z * a := rfl\n\n"}
{"name":"NonUnitalNonAssocSemiring.mem_center_iff","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocSemiring α\na : α\n⊢ Iff (Membership.mem (NonUnitalSubsemiring.center α) a) (And (Eq (AddMonoid.End.mulRight a) (AddMonoid.End.mulLeft a)) (Membership.mem (CentroidHom.toEndRingHom α).rangeS (AddMonoid.End.mulLeft a)))","decl":"lemma _root_.NonUnitalNonAssocSemiring.mem_center_iff (a : α) :\n    a ∈ NonUnitalSubsemiring.center α ↔ R a = L a ∧ (L a) ∈ RingHom.rangeS (toEndRingHom α) := by\n  constructor\n  · exact fun ha ↦ ⟨AddMonoidHom.ext <| fun _ => (IsMulCentral.comm ha _).symm,\n      ⟨centerToCentroid ⟨a, ha⟩, rfl⟩⟩\n  · rintro ⟨hc, ⟨T, hT⟩⟩\n    have e1 (d : α) : T d = a * d := congr($hT d)\n    have e2 (d : α) : T d = d * a := congr($(hT.trans hc.symm) d)\n    constructor\n    case comm => exact (congr($hc.symm ·))\n    case left_assoc => simpa [e1] using (map_mul_right T · ·)\n    case mid_assoc => exact fun b c ↦ by simpa [e1 c, e2 b] using\n      (map_mul_right T b c).symm.trans <| map_mul_left T b c\n    case right_assoc => simpa [e2] using (map_mul_left T · ·)\n\n"}
{"name":"NonUnitalNonAssocCommSemiring.mem_center_iff","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocCommSemiring α\na : α\n⊢ Iff (Membership.mem (NonUnitalSubsemiring.center α) a) (∀ (b : α), Commute (AddMonoid.End.mulLeft b) (AddMonoid.End.mulLeft a))","decl":"lemma _root_.NonUnitalNonAssocCommSemiring.mem_center_iff (a : α) :\n    a ∈ NonUnitalSubsemiring.center α ↔ ∀ b : α, Commute (L b) (L a) := by\n  rw [NonUnitalNonAssocSemiring.mem_center_iff, CentroidHom.centroid_eq_centralizer_mulLeftRight,\n    Subsemiring.mem_centralizer_iff, AddMonoid.End.mulRight_eq_mulLeft, Set.union_self]\n  aesop\n\n"}
{"name":"CentroidHom.coe_intCast","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nz : Int\n⊢ Eq (⇑↑z) (HSMul.hSMul z ⇑(CentroidHom.id α))","decl":"@[simp, norm_cast]\ntheorem coe_intCast (z : ℤ) : ⇑(z : CentroidHom α) = z • (CentroidHom.id α) :=\n  rfl\n\n"}
{"name":"CentroidHom.intCast_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nz : Int\nm : α\n⊢ Eq (↑z m) (HSMul.hSMul z m)","decl":"theorem intCast_apply (z : ℤ) (m : α) : (z : CentroidHom α) m = z • m :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_neg","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nx : CentroidHom α\n⊢ Eq (Neg.neg x).toEnd (Neg.neg x.toEnd)","decl":"@[simp]\ntheorem toEnd_neg (x : CentroidHom α) : (-x).toEnd = -x.toEnd :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_sub","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nx y : CentroidHom α\n⊢ Eq (HSub.hSub x y).toEnd (HSub.hSub x.toEnd y.toEnd)","decl":"@[simp]\ntheorem toEnd_sub (x y : CentroidHom α) : (x - y).toEnd = x.toEnd - y.toEnd :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_neg","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nf : CentroidHom α\n⊢ Eq (⇑(Neg.neg f)) (Neg.neg ⇑f)","decl":"@[simp, norm_cast]\ntheorem coe_neg (f : CentroidHom α) : ⇑(-f) = -f :=\n  rfl\n\n"}
{"name":"CentroidHom.coe_sub","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nf g : CentroidHom α\n⊢ Eq (⇑(HSub.hSub f g)) (HSub.hSub ⇑f ⇑g)","decl":"@[simp, norm_cast]\ntheorem coe_sub (f g : CentroidHom α) : ⇑(f - g) = f - g :=\n  rfl\n\n"}
{"name":"CentroidHom.neg_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nf : CentroidHom α\na : α\n⊢ Eq ((Neg.neg f) a) (Neg.neg (f a))","decl":"@[simp]\ntheorem neg_apply (f : CentroidHom α) (a : α) : (-f) a = -f a :=\n  rfl\n\n"}
{"name":"CentroidHom.sub_apply","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nf g : CentroidHom α\na : α\n⊢ Eq ((HSub.hSub f g) a) (HSub.hSub (f a) (g a))","decl":"@[simp]\ntheorem sub_apply (f g : CentroidHom α) (a : α) : (f - g) a = f a - g a :=\n  rfl\n\n"}
{"name":"CentroidHom.toEnd_intCast","module":"Mathlib.Algebra.Ring.CentroidHom","initialProofState":"α : Type u_5\ninst✝ : NonUnitalNonAssocRing α\nz : Int\n⊢ Eq (↑z).toEnd ↑z","decl":"@[simp, norm_cast]\ntheorem toEnd_intCast (z : ℤ) : (z : CentroidHom α).toEnd = ↑z :=\n  rfl\n\n"}
