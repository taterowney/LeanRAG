{"name":"SL_reduction_mod_hom_val","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\ni j : Fin 2\n⊢ Eq (↑((Matrix.SpecialLinearGroup.map (Int.castRingHom (ZMod N))) γ) i j) ↑(↑γ i j)","decl":"@[simp]\ntheorem SL_reduction_mod_hom_val (γ : SL(2, ℤ)) (i j : Fin 2):\n    SLMOD(N) γ i j = (γ i j : ZMod N) :=\n  rfl\n\n"}
{"name":"CongruenceSubgroup.Gamma_mem'","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ Iff (Membership.mem (CongruenceSubgroup.Gamma N) γ) (Eq ((Matrix.SpecialLinearGroup.map (Int.castRingHom (ZMod N))) γ) 1)","decl":"theorem Gamma_mem' {N} {γ : SL(2, ℤ)} : γ ∈ Gamma N ↔ SLMOD(N) γ = 1 :=\n  Iff.rfl\n\n"}
{"name":"CongruenceSubgroup.Gamma_mem","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nγ : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ Iff (Membership.mem (CongruenceSubgroup.Gamma N) γ) (And (Eq (↑(↑γ 0 0)) 1) (And (Eq (↑(↑γ 0 1)) 0) (And (Eq (↑(↑γ 1 0)) 0) (Eq (↑(↑γ 1 1)) 1))))","decl":"@[simp]\ntheorem Gamma_mem {N} {γ : SL(2, ℤ)} : γ ∈ Gamma N ↔ (γ 0 0 : ZMod N) = 1 ∧\n    (γ 0 1 : ZMod N) = 0 ∧ (γ 1 0 : ZMod N) = 0 ∧ (γ 1 1 : ZMod N) = 1 := by\n  rw [Gamma_mem']\n  constructor\n  · intro h\n    simp [← SL_reduction_mod_hom_val N γ, h]\n  · intro h\n    ext i j\n    rw [SL_reduction_mod_hom_val N γ]\n    fin_cases i <;> fin_cases j <;> simp only [h]\n    exacts [h.1, h.2.1, h.2.2.1, h.2.2.2]\n\n"}
{"name":"CongruenceSubgroup.Gamma_normal","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\n⊢ (CongruenceSubgroup.Gamma N).Normal","decl":"theorem Gamma_normal : Subgroup.Normal (Gamma N) :=\n  SLMOD(N).normal_ker\n\n"}
{"name":"CongruenceSubgroup.Gamma_one_top","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"⊢ Eq (CongruenceSubgroup.Gamma 1) Top.top","decl":"theorem Gamma_one_top : Gamma 1 = ⊤ := by\n  ext\n  simp [eq_iff_true_of_subsingleton]\n\n"}
{"name":"CongruenceSubgroup.mem_Gamma_one","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"γ : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ Membership.mem (CongruenceSubgroup.Gamma 1) γ","decl":"lemma mem_Gamma_one (γ : SL(2, ℤ)) : γ ∈ Γ(1) := by\n  simp only [Gamma_one_top, Subgroup.mem_top]\n\n"}
{"name":"CongruenceSubgroup.Gamma_zero_bot","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"⊢ Eq (CongruenceSubgroup.Gamma 0) Bot.bot","decl":"theorem Gamma_zero_bot : Gamma 0 = ⊥ := rfl\n\n"}
{"name":"CongruenceSubgroup.ModularGroup_T_pow_mem_Gamma","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N M : Int\nhNM : Dvd.dvd N M\n⊢ Membership.mem (CongruenceSubgroup.Gamma N.natAbs) (HPow.hPow ModularGroup.T M)","decl":"lemma ModularGroup_T_pow_mem_Gamma (N M : ℤ) (hNM : N ∣ M) :\n    (ModularGroup.T ^ M) ∈ Gamma (Int.natAbs N) := by\n  simp only [Gamma_mem, Fin.isValue, ModularGroup.coe_T_zpow, of_apply, cons_val', cons_val_zero,\n    empty_val', cons_val_fin_one, Int.cast_one, cons_val_one, head_cons, head_fin_const,\n    Int.cast_zero, and_self, and_true, true_and]\n  refine Iff.mpr (ZMod.intCast_zmod_eq_zero_iff_dvd M (Int.natAbs N)) ?_\n  simp only [Int.natCast_natAbs, abs_dvd, hNM]\n\n"}
{"name":"CongruenceSubgroup.Gamma0_mem","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nA : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ Iff (Membership.mem (CongruenceSubgroup.Gamma0 N) A) (Eq (↑(↑A 1 0)) 0)","decl":"@[simp]\ntheorem Gamma0_mem {N} {A : SL(2, ℤ)} : A ∈ Gamma0 N ↔ (A 1 0 : ZMod N) = 0 :=\n  Iff.rfl\n\n"}
{"name":"CongruenceSubgroup.Gamma1_mem'","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nγ : Subtype fun x => Membership.mem (CongruenceSubgroup.Gamma0 N) x\n⊢ Iff (Membership.mem (CongruenceSubgroup.Gamma1' N) γ) (Eq ((CongruenceSubgroup.Gamma0Map N) γ) 1)","decl":"@[simp]\ntheorem Gamma1_mem' {N} {γ : Gamma0 N} : γ ∈ Gamma1' N ↔ Gamma0Map N γ = 1 :=\n  Iff.rfl\n\n"}
{"name":"CongruenceSubgroup.Gamma1_to_Gamma0_mem","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nA : Subtype fun x => Membership.mem (CongruenceSubgroup.Gamma0 N) x\n⊢ Iff (Membership.mem (CongruenceSubgroup.Gamma1' N) A) (And (Eq (↑(↑↑A 0 0)) 1) (And (Eq (↑(↑↑A 1 1)) 1) (Eq (↑(↑↑A 1 0)) 0)))","decl":"theorem Gamma1_to_Gamma0_mem {N} (A : Gamma0 N) :\n    A ∈ Gamma1' N ↔\n    ((A.1 0 0 : ℤ) : ZMod N) = 1 ∧ ((A.1 1 1 : ℤ) : ZMod N) = 1\n      ∧ ((A.1 1 0 : ℤ) : ZMod N) = 0 := by\n  constructor\n  · intro ha\n    have adet : (A.1.1.det : ZMod N) = 1 := by simp only [A.1.property, Int.cast_one]\n    rw [Matrix.det_fin_two] at adet\n    simp only [Gamma1_mem', Gamma0Map, MonoidHom.coe_mk, OneHom.coe_mk, Int.cast_sub,\n      Int.cast_mul] at *\n    simpa only [Gamma1_mem', Gamma0Map, MonoidHom.coe_mk, OneHom.coe_mk, Int.cast_sub,\n      Int.cast_mul, ha, Gamma0_mem.mp A.property, and_self_iff, and_true, mul_one, mul_zero,\n      sub_zero] using adet\n  · intro ha\n    simp only [Gamma1_mem', Gamma0Map, MonoidHom.coe_mk, coe_matrix_coe,\n      Int.coe_castRingHom, map_apply]\n    exact ha.2.1\n\n"}
{"name":"CongruenceSubgroup.Gamma1_mem","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\nA : Matrix.SpecialLinearGroup (Fin 2) Int\n⊢ Iff (Membership.mem (CongruenceSubgroup.Gamma1 N) A) (And (Eq (↑(↑A 0 0)) 1) (And (Eq (↑(↑A 1 1)) 1) (Eq (↑(↑A 1 0)) 0)))","decl":"@[simp]\ntheorem Gamma1_mem (N : ℕ) (A : SL(2, ℤ)) : A ∈ Gamma1 N ↔\n    (A 0 0 : ZMod N) = 1 ∧ (A 1 1 : ZMod N) = 1 ∧ (A 1 0 : ZMod N) = 0 := by\n  constructor\n  · intro ha\n    simp_rw [Gamma1, Subgroup.mem_map] at ha\n    obtain ⟨⟨x, hx⟩, hxx⟩ := ha\n    rw [Gamma1_to_Gamma0_mem] at hx\n    simp only [Subgroup.mem_top, true_and] at hxx\n    rw [← hxx]\n    convert hx\n  · intro ha\n    simp_rw [Gamma1, Subgroup.mem_map]\n    have hA : A ∈ Gamma0 N := by simp [ha.right.right, Gamma0_mem]\n    have HA : (⟨A, hA⟩ : Gamma0 N) ∈ Gamma1' N := by\n      simp only [Gamma1_to_Gamma0_mem, Subgroup.coe_mk, coe_matrix_coe,\n        Int.coe_castRingHom, map_apply]\n      exact ha\n    refine ⟨(⟨(⟨A, hA⟩ : Gamma0 N), HA⟩ : (Gamma1' N : Subgroup (Gamma0 N))), ?_⟩\n    simp\n\n"}
{"name":"CongruenceSubgroup.Gamma1_in_Gamma0","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\n⊢ LE.le (CongruenceSubgroup.Gamma1 N) (CongruenceSubgroup.Gamma0 N)","decl":"theorem Gamma1_in_Gamma0 (N : ℕ) : Gamma1 N ≤ Gamma0 N := by\n  intro x HA\n  simp only [Gamma0_mem, Gamma1_mem, coe_matrix_coe, Int.coe_castRingHom, map_apply] at *\n  exact HA.2.2\n\n"}
{"name":"CongruenceSubgroup.isCongruenceSubgroup_trans","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"H K : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nh : LE.le H K\nh2 : CongruenceSubgroup.IsCongruenceSubgroup H\n⊢ CongruenceSubgroup.IsCongruenceSubgroup K","decl":"theorem isCongruenceSubgroup_trans (H K : Subgroup SL(2, ℤ)) (h : H ≤ K)\n    (h2 : IsCongruenceSubgroup H) : IsCongruenceSubgroup K := by\n  obtain ⟨N, hN⟩ := h2\n  exact ⟨N, le_trans hN h⟩\n\n"}
{"name":"CongruenceSubgroup.Gamma_is_cong_sub","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : PNat\n⊢ CongruenceSubgroup.IsCongruenceSubgroup (CongruenceSubgroup.Gamma ↑N)","decl":"theorem Gamma_is_cong_sub (N : ℕ+) : IsCongruenceSubgroup (Gamma N) :=\n  ⟨N, by simp only [le_refl]⟩\n\n"}
{"name":"CongruenceSubgroup.Gamma1_is_congruence","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : PNat\n⊢ CongruenceSubgroup.IsCongruenceSubgroup (CongruenceSubgroup.Gamma1 ↑N)","decl":"theorem Gamma1_is_congruence (N : ℕ+) : IsCongruenceSubgroup (Gamma1 N) := by\n  refine ⟨N, ?_⟩\n  intro A hA\n  simp only [Gamma1_mem, Gamma_mem] at *\n  simp only [hA, eq_self_iff_true, and_self_iff]\n\n"}
{"name":"CongruenceSubgroup.Gamma0_is_congruence","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : PNat\n⊢ CongruenceSubgroup.IsCongruenceSubgroup (CongruenceSubgroup.Gamma0 ↑N)","decl":"theorem Gamma0_is_congruence (N : ℕ+) : IsCongruenceSubgroup (Gamma0 N) :=\n  isCongruenceSubgroup_trans _ _ (Gamma1_in_Gamma0 N) (Gamma1_is_congruence N)\n\n"}
{"name":"CongruenceSubgroup.Gamma_cong_eq_self","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"N : Nat\ng : ConjAct (Matrix.SpecialLinearGroup (Fin 2) Int)\n⊢ Eq (HSMul.hSMul g (CongruenceSubgroup.Gamma N)) (CongruenceSubgroup.Gamma N)","decl":"theorem Gamma_cong_eq_self (N : ℕ) (g : ConjAct SL(2, ℤ)) : g • Gamma N = Gamma N := by\n  apply Subgroup.Normal.conjAct (Gamma_normal N)\n\n"}
{"name":"CongruenceSubgroup.conj_cong_is_cong","module":"Mathlib.NumberTheory.ModularForms.CongruenceSubgroups","initialProofState":"g : ConjAct (Matrix.SpecialLinearGroup (Fin 2) Int)\nΓ : Subgroup (Matrix.SpecialLinearGroup (Fin 2) Int)\nh : CongruenceSubgroup.IsCongruenceSubgroup Γ\n⊢ CongruenceSubgroup.IsCongruenceSubgroup (HSMul.hSMul g Γ)","decl":"theorem conj_cong_is_cong (g : ConjAct SL(2, ℤ)) (Γ : Subgroup SL(2, ℤ))\n    (h : IsCongruenceSubgroup Γ) : IsCongruenceSubgroup (g • Γ) := by\n  obtain ⟨N, HN⟩ := h\n  refine ⟨N, ?_⟩\n  rw [← Gamma_cong_eq_self N g, Subgroup.pointwise_smul_le_pointwise_smul_iff]\n  exact HN\n\n"}
