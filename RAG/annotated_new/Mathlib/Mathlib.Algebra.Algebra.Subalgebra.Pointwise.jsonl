{"name":"Subalgebra.mul_toSubmodule_le","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ LE.le (HMul.hMul (Subalgebra.toSubmodule S) (Subalgebra.toSubmodule T)) (Subalgebra.toSubmodule (Max.max S T))","decl":"theorem mul_toSubmodule_le (S T : Subalgebra R A) :\n    (Subalgebra.toSubmodule S)* (Subalgebra.toSubmodule T) ≤ Subalgebra.toSubmodule (S ⊔ T) := by\n  rw [Submodule.mul_le]\n  intro y hy z hz\n  show y * z ∈ S ⊔ T\n  exact mul_mem (Algebra.mem_sup_left hy) (Algebra.mem_sup_right hz)\n\n"}
{"name":"Subalgebra.isIdempotentElem_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ IsIdempotentElem (Subalgebra.toSubmodule S)","decl":"/-- As submodules, subalgebras are idempotent. -/\n@[simp]\ntheorem isIdempotentElem_toSubmodule (S : Subalgebra R A) :\n    IsIdempotentElem S.toSubmodule := by\n  apply le_antisymm\n  · refine (mul_toSubmodule_le _ _).trans_eq ?_\n    rw [sup_idem]\n  · intro x hx1\n    rw [← mul_one x]\n    exact Submodule.mul_mem_mul hx1 (show (1 : A) ∈ S from one_mem S)\n\n"}
{"name":"Subalgebra.mul_self","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : Semiring A\ninst✝ : Algebra R A\nS : Subalgebra R A\n⊢ IsIdempotentElem (Subalgebra.toSubmodule S)","decl":"@[deprecated (since := \"2025-01-12\")] alias mul_self := isIdempotentElem_toSubmodule\n\n"}
{"name":"Subalgebra.mul_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_3\nA : Type u_4\ninst✝² : CommSemiring R\ninst✝¹ : CommSemiring A\ninst✝ : Algebra R A\nS T : Subalgebra R A\n⊢ Eq (HMul.hMul (Subalgebra.toSubmodule S) (Subalgebra.toSubmodule T)) (Subalgebra.toSubmodule (Max.max S T))","decl":"/-- When `A` is commutative, `Subalgebra.mul_toSubmodule_le` is strict. -/\ntheorem mul_toSubmodule {R : Type*} {A : Type*} [CommSemiring R] [CommSemiring A] [Algebra R A]\n    (S T : Subalgebra R A) : (Subalgebra.toSubmodule S) * (Subalgebra.toSubmodule T)\n        = Subalgebra.toSubmodule (S ⊔ T) := by\n  refine le_antisymm (mul_toSubmodule_le _ _) ?_\n  rintro x (hx : x ∈ Algebra.adjoin R (S ∪ T : Set A))\n  refine\n    Algebra.adjoin_induction (fun x hx => ?_) (fun r => ?_) (fun _ _ _ _ => Submodule.add_mem _)\n      (fun x y _ _ hx hy => ?_) hx\n  · rcases hx with hxS | hxT\n    · rw [← mul_one x]\n      exact Submodule.mul_mem_mul hxS (show (1 : A) ∈ T from one_mem T)\n    · rw [← one_mul x]\n      exact Submodule.mul_mem_mul (show (1 : A) ∈ S from one_mem S) hxT\n  · rw [← one_mul (algebraMap _ _ _)]\n    exact Submodule.mul_mem_mul (show (1 : A) ∈ S from one_mem S) (algebraMap_mem T _)\n  have := Submodule.mul_mem_mul hx hy\n  rwa [mul_assoc, mul_comm _ (Subalgebra.toSubmodule T), ← mul_assoc _ _ (Subalgebra.toSubmodule S),\n    isIdempotentElem_toSubmodule, mul_comm T.toSubmodule, ← mul_assoc,\n    isIdempotentElem_toSubmodule] at this\n\n"}
{"name":"Subalgebra.coe_pointwise_smul","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nR' : Type u_3\ninst✝² : Semiring R'\ninst✝¹ : MulSemiringAction R' A\ninst✝ : SMulCommClass R' R A\nm : R'\nS : Subalgebra R A\n⊢ Eq (↑(HSMul.hSMul m S)) (HSMul.hSMul m ↑S)","decl":"@[simp]\ntheorem coe_pointwise_smul (m : R') (S : Subalgebra R A) : ↑(m • S) = m • (S : Set A) :=\n  rfl\n\n"}
{"name":"Subalgebra.pointwise_smul_toSubsemiring","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nR' : Type u_3\ninst✝² : Semiring R'\ninst✝¹ : MulSemiringAction R' A\ninst✝ : SMulCommClass R' R A\nm : R'\nS : Subalgebra R A\n⊢ Eq (HSMul.hSMul m S).toSubsemiring (HSMul.hSMul m S.toSubsemiring)","decl":"@[simp]\ntheorem pointwise_smul_toSubsemiring (m : R') (S : Subalgebra R A) :\n    (m • S).toSubsemiring = m • S.toSubsemiring :=\n  rfl\n\n"}
{"name":"Subalgebra.pointwise_smul_toSubmodule","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nR' : Type u_3\ninst✝² : Semiring R'\ninst✝¹ : MulSemiringAction R' A\ninst✝ : SMulCommClass R' R A\nm : R'\nS : Subalgebra R A\n⊢ Eq (Subalgebra.toSubmodule (HSMul.hSMul m S)) (HSMul.hSMul m (Subalgebra.toSubmodule S))","decl":"@[simp]\ntheorem pointwise_smul_toSubmodule (m : R') (S : Subalgebra R A) :\n    Subalgebra.toSubmodule (m • S) = m • Subalgebra.toSubmodule S :=\n  rfl\n\n"}
{"name":"Subalgebra.pointwise_smul_toSubring","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R' : Type u_4\nR : Type u_5\nA : Type u_6\ninst✝⁵ : Semiring R'\ninst✝⁴ : CommRing R\ninst✝³ : Ring A\ninst✝² : MulSemiringAction R' A\ninst✝¹ : Algebra R A\ninst✝ : SMulCommClass R' R A\nm : R'\nS : Subalgebra R A\n⊢ Eq (HSMul.hSMul m S).toSubring (HSMul.hSMul m S.toSubring)","decl":"@[simp]\ntheorem pointwise_smul_toSubring {R' R A : Type*} [Semiring R'] [CommRing R] [Ring A]\n    [MulSemiringAction R' A] [Algebra R A] [SMulCommClass R' R A] (m : R') (S : Subalgebra R A) :\n    (m • S).toSubring = m • S.toSubring :=\n  rfl\n\n"}
{"name":"Subalgebra.smul_mem_pointwise_smul","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nR' : Type u_3\ninst✝² : Semiring R'\ninst✝¹ : MulSemiringAction R' A\ninst✝ : SMulCommClass R' R A\nm : R'\nr : A\nS : Subalgebra R A\na✝ : Membership.mem S r\n⊢ Membership.mem (HSMul.hSMul m S) (HSMul.hSMul m r)","decl":"theorem smul_mem_pointwise_smul (m : R') (r : A) (S : Subalgebra R A) : r ∈ S → m • r ∈ m • S :=\n  (Set.smul_mem_smul_set : _ → _ ∈ m • (S : Set A))\n\n"}
{"name":"Subalgebra.instCovariantClassHSMulLe","module":"Mathlib.Algebra.Algebra.Subalgebra.Pointwise","initialProofState":"R : Type u_1\nA : Type u_2\ninst✝⁵ : CommSemiring R\ninst✝⁴ : Semiring A\ninst✝³ : Algebra R A\nR' : Type u_3\ninst✝² : Semiring R'\ninst✝¹ : MulSemiringAction R' A\ninst✝ : SMulCommClass R' R A\n⊢ CovariantClass R' (Subalgebra R A) HSMul.hSMul LE.le","decl":"instance : CovariantClass R' (Subalgebra R A) HSMul.hSMul LE.le :=\n  ⟨fun _ _ => map_mono⟩\n\n"}
