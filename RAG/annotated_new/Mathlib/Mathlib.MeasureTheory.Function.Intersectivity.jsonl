{"name":"bergelson'","module":"Mathlib.MeasureTheory.Function.Intersectivity","initialProofState":"α : Type u_2\ninst✝¹ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsFiniteMeasure μ\nr : ENNReal\ns : Nat → Set α\nhs : ∀ (n : Nat), MeasurableSet (s n)\nhr₀ : Ne r 0\nhr : ∀ (n : Nat), LE.le r (μ (s n))\n⊢ Exists fun t => And t.Infinite (∀ ⦃u : Set Nat⦄, HasSubset.Subset u t → u.Finite → LT.lt 0 (μ (Set.iInter fun n => Set.iInter fun h => s n)))","decl":"/-- **Bergelson Intersectivity Lemma**: In a finite measure space, a sequence of events that have\nmeasure at least `r` has an infinite subset whose finite intersections all have positive volume.\n\nTODO: The infinity of `t` should be strengthened to `t` having positive natural density. -/\nlemma bergelson' {s : ℕ → Set α} (hs : ∀ n, MeasurableSet (s n)) (hr₀ : r ≠ 0)\n    (hr : ∀ n, r ≤ μ (s n)) :\n    ∃ t : Set ℕ, t.Infinite ∧ ∀ ⦃u⦄, u ⊆ t → u.Finite → 0 < μ (⋂ n ∈ u, s n) := by\n  -- We let `M f` be the set on which the norm of `f` exceeds its essential supremum, and `N` be the\n  -- union of `M` of the finite products of the indicators of the `s n`.\n  let M (f : α → ℝ) : Set α := {x | eLpNormEssSup f μ < ‖f x‖₊}\n  let N : Set α := ⋃ u : Finset ℕ, M (Set.indicator (⋂ n ∈ u, s n) 1)\n  -- `N` is a null set since `M f` is a null set for each `f`.\n  have hN₀ : μ N = 0 := measure_iUnion_null fun u ↦ meas_eLpNormEssSup_lt\n  -- The important thing about `N` is that if we remove `N` from our space, then finite unions of\n  -- the `s n` are null iff they are empty.\n  have hN₁ (u : Finset ℕ) : ((⋂ n ∈ u, s n) \\ N).Nonempty → 0 < μ (⋂ n ∈ u, s n) := by\n    simp_rw [pos_iff_ne_zero]\n    rintro ⟨x, hx⟩ hu\n    refine hx.2 (mem_iUnion.2 ⟨u, ?_⟩)\n    rw [mem_setOf, indicator_of_mem hx.1, eLpNormEssSup_eq_zero_iff.2]\n    · simp\n    · rwa [indicator_ae_eq_zero, Function.support_one, inter_univ]\n  -- Define `f n` to be the average of the first `n + 1` indicators of the `s k`.\n  let f (n : ℕ) : α → ℝ≥0∞ := (↑(n + 1) : ℝ≥0∞)⁻¹ • ∑ k ∈ Finset.range (n + 1), (s k).indicator 1\n  -- We gather a few simple properties of `f`.\n  have hfapp : ∀ n a, f n a = (↑(n + 1))⁻¹ * ∑ k ∈ Finset.range (n + 1), (s k).indicator 1 a := by\n    simp only [f, Pi.natCast_def, Pi.smul_apply, Pi.inv_apply, Finset.sum_apply, eq_self_iff_true,\n    forall_const, imp_true_iff, smul_eq_mul]\n  have hf n : Measurable (f n) := by fun_prop (disch := exact hs _)\n  have hf₁ n : f n ≤ 1 := by\n    rintro a\n    rw [hfapp, ← ENNReal.div_eq_inv_mul]\n    refine (ENNReal.div_le_iff_le_mul (Or.inl <| Nat.cast_ne_zero.2 n.succ_ne_zero) <|\n      Or.inr one_ne_zero).2 ?_\n    rw [mul_comm, ← nsmul_eq_mul, ← Finset.card_range n.succ]\n    exact Finset.sum_le_card_nsmul _ _ _ fun _ _ ↦ indicator_le (fun _ _ ↦ le_rfl) _\n  -- By assumption, `f n` has integral at least `r`.\n  have hrf n : r ≤ ∫⁻ a, f n a ∂μ := by\n    simp_rw [hfapp]\n    rw [lintegral_const_mul _ (Finset.measurable_sum _ fun _ _ ↦ measurable_one.indicator <| hs _),\n      lintegral_finset_sum _ fun _ _ ↦ measurable_one.indicator (hs _)]\n    simp only [lintegral_indicator_one (hs _)]\n    rw [← ENNReal.div_eq_inv_mul, ENNReal.le_div_iff_mul_le (by simp) (by simp), ← nsmul_eq_mul']\n    simpa using Finset.card_nsmul_le_sum (Finset.range (n + 1)) _ _ fun _ _ ↦ hr _\n  -- Collect some basic fact\n  have hμ : μ ≠ 0 := by rintro rfl; exact hr₀ <| le_bot_iff.1 <| hr 0\n  have : ∫⁻ x, limsup (f · x) atTop ∂μ ≤ μ univ := by\n    rw [← lintegral_one]\n    exact lintegral_mono fun a ↦ limsup_le_of_le ⟨0, fun R _ ↦ bot_le⟩ <|\n      Eventually.of_forall fun n ↦ hf₁ _ _\n  -- By the first moment method, there exists some `x ∉ N` such that `limsup f n x` is at least `r`.\n  obtain ⟨x, hxN, hx⟩ := exists_not_mem_null_laverage_le hμ\n    (ne_top_of_le_ne_top (measure_ne_top μ univ) this) hN₀\n  replace hx : r / μ univ ≤ limsup (f · x) atTop :=\n    calc\n      _ ≤ limsup (⨍⁻ x, f · x ∂μ) atTop := le_limsup_of_le ⟨1, eventually_map.2 ?_⟩ fun b hb ↦ ?_\n      _ ≤ ⨍⁻ x, limsup (f · x) atTop ∂μ := limsup_lintegral_le 1 hf (ae_of_all _ <| hf₁ ·) (by simp)\n      _ ≤ limsup (f · x) atTop := hx\n  -- This exactly means that the `s n` containing `x` have all their finite intersection non-null.\n  · refine ⟨{n | x ∈ s n}, fun hxs ↦ ?_, fun u hux hu ↦ ?_⟩\n    -- This next block proves that a set of strictly positive natural density is infinite, mixed\n    -- with the fact that `{n | x ∈ s n}` has strictly positive natural density.\n    -- TODO: Separate it out to a lemma once we have a natural density API.\n    · refine ENNReal.div_ne_zero.2 ⟨hr₀, measure_ne_top _ _⟩ <| eq_bot_mono hx <|\n        Tendsto.limsup_eq <| tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_const_nhds\n        (h := fun n ↦ (n.succ : ℝ≥0∞)⁻¹ * hxs.toFinset.card) ?_ bot_le fun n ↦ mul_le_mul_left' ?_ _\n      · simpa using ENNReal.Tendsto.mul_const (ENNReal.tendsto_inv_nat_nhds_zero.comp <|\n          tendsto_add_atTop_nat 1) (.inr <| ENNReal.natCast_ne_top _)\n      · classical\n        simpa only [Finset.sum_apply, indicator_apply, Pi.one_apply, Finset.sum_boole, Nat.cast_le]\n          using Finset.card_le_card fun m hm ↦ hxs.mem_toFinset.2 (Finset.mem_filter.1 hm).2\n    · simp_rw [← hu.mem_toFinset]\n      exact hN₁ _ ⟨x, mem_iInter₂.2 fun n hn ↦ hux <| hu.mem_toFinset.1 hn, hxN⟩\n  · refine Eventually.of_forall fun n ↦ ?_\n    obtain rfl | _ := eq_zero_or_neZero μ\n    · simp\n    · rw [← laverage_const μ 1]\n      exact lintegral_mono (hf₁ _)\n  · obtain ⟨n, hn⟩ := hb.exists\n    rw [laverage_eq] at hn\n    exact (ENNReal.div_le_div_right (hrf _) _).trans hn\n\n"}
{"name":"bergelson","module":"Mathlib.MeasureTheory.Function.Intersectivity","initialProofState":"ι : Type u_1\nα : Type u_2\ninst✝² : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\nr : ENNReal\ninst✝ : Infinite ι\ns : ι → Set α\nhs : ∀ (i : ι), MeasurableSet (s i)\nhr₀ : Ne r 0\nhr : ∀ (i : ι), LE.le r (μ (s i))\n⊢ Exists fun t => And t.Infinite (∀ ⦃u : Set ι⦄, HasSubset.Subset u t → u.Finite → LT.lt 0 (μ (Set.iInter fun i => Set.iInter fun h => s i)))","decl":"/-- **Bergelson Intersectivity Lemma**: In a finite measure space, a sequence of events that have\nmeasure at least `r` has an infinite subset whose finite intersections all have positive volume. -/\nlemma bergelson [Infinite ι] {s : ι → Set α} (hs : ∀ i, MeasurableSet (s i)) (hr₀ : r ≠ 0)\n    (hr : ∀ i, r ≤ μ (s i)) :\n    ∃ t : Set ι, t.Infinite ∧ ∀ ⦃u⦄, u ⊆ t → u.Finite → 0 < μ (⋂ i ∈ u, s i) := by\n  obtain ⟨t, ht, h⟩ := bergelson' (fun n ↦ hs <| Infinite.natEmbedding _ n) hr₀ (fun n ↦ hr _)\n  refine ⟨_, ht.image <| (Infinite.natEmbedding _).injective.injOn, fun u hut hu ↦\n    (h (preimage_subset_of_surjOn (Infinite.natEmbedding _).injective hut) <| hu.preimage\n    (Embedding.injective _).injOn).trans_le <| measure_mono <| subset_iInter₂ fun i hi ↦ ?_⟩\n  obtain ⟨n, -, rfl⟩ := hut hi\n  exact iInter₂_subset n hi\n"}
