{"name":"instIsAddLeftCancelOrderDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\nh : IsLeftCancelAdd α\n⊢ IsLeftCancelAdd (OrderDual α)","decl":"@[to_additive]\ninstance [Mul α] [h : IsLeftCancelMul α] : IsLeftCancelMul αᵒᵈ := h\n\n"}
{"name":"instIsLeftCancelMulOrderDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\nh : IsLeftCancelMul α\n⊢ IsLeftCancelMul (OrderDual α)","decl":"@[to_additive]\ninstance [Mul α] [h : IsLeftCancelMul α] : IsLeftCancelMul αᵒᵈ := h\n\n"}
{"name":"instIsAddRightCancelOrderDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\nh : IsRightCancelAdd α\n⊢ IsRightCancelAdd (OrderDual α)","decl":"@[to_additive]\ninstance [Mul α] [h : IsRightCancelMul α] : IsRightCancelMul αᵒᵈ := h\n\n"}
{"name":"instIsRightCancelMulOrderDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\nh : IsRightCancelMul α\n⊢ IsRightCancelMul (OrderDual α)","decl":"@[to_additive]\ninstance [Mul α] [h : IsRightCancelMul α] : IsRightCancelMul αᵒᵈ := h\n\n"}
{"name":"instIsAddCancelOrderDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\nh : IsCancelAdd α\n⊢ IsCancelAdd (OrderDual α)","decl":"@[to_additive]\ninstance [Mul α] [h : IsCancelMul α] : IsCancelMul αᵒᵈ := h\n\n"}
{"name":"instIsCancelMulOrderDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\nh : IsCancelMul α\n⊢ IsCancelMul (OrderDual α)","decl":"@[to_additive]\ninstance [Mul α] [h : IsCancelMul α] : IsCancelMul αᵒᵈ := h\n\n"}
{"name":"toDual_zero","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Zero α\n⊢ Eq (OrderDual.toDual 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem toDual_one [One α] : toDual (1 : α) = 1 := rfl\n\n"}
{"name":"toDual_one","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : One α\n⊢ Eq (OrderDual.toDual 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem toDual_one [One α] : toDual (1 : α) = 1 := rfl\n\n"}
{"name":"ofDual_one","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : One α\n⊢ Eq (OrderDual.ofDual 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_one [One α] : (ofDual 1 : α) = 1 := rfl\n\n"}
{"name":"ofDual_zero","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Zero α\n⊢ Eq (OrderDual.ofDual 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_one [One α] : (ofDual 1 : α) = 1 := rfl\n\n"}
{"name":"toDual_mul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\na b : α\n⊢ Eq (OrderDual.toDual (HMul.hMul a b)) (HMul.hMul (OrderDual.toDual a) (OrderDual.toDual b))","decl":"@[to_additive (attr := simp)]\ntheorem toDual_mul [Mul α] (a b : α) : toDual (a * b) = toDual a * toDual b := rfl\n\n"}
{"name":"toDual_add","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\na b : α\n⊢ Eq (OrderDual.toDual (HAdd.hAdd a b)) (HAdd.hAdd (OrderDual.toDual a) (OrderDual.toDual b))","decl":"@[to_additive (attr := simp)]\ntheorem toDual_mul [Mul α] (a b : α) : toDual (a * b) = toDual a * toDual b := rfl\n\n"}
{"name":"ofDual_add","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\na b : OrderDual α\n⊢ Eq (OrderDual.ofDual (HAdd.hAdd a b)) (HAdd.hAdd (OrderDual.ofDual a) (OrderDual.ofDual b))","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_mul [Mul α] (a b : αᵒᵈ) : ofDual (a * b) = ofDual a * ofDual b := rfl\n\n"}
{"name":"ofDual_mul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\na b : OrderDual α\n⊢ Eq (OrderDual.ofDual (HMul.hMul a b)) (HMul.hMul (OrderDual.ofDual a) (OrderDual.ofDual b))","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_mul [Mul α] (a b : αᵒᵈ) : ofDual (a * b) = ofDual a * ofDual b := rfl\n\n"}
{"name":"toDual_inv","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Inv α\na : α\n⊢ Eq (OrderDual.toDual (Inv.inv a)) (Inv.inv (OrderDual.toDual a))","decl":"@[to_additive (attr := simp)]\ntheorem toDual_inv [Inv α] (a : α) : toDual a⁻¹ = (toDual a)⁻¹ := rfl\n\n"}
{"name":"toDual_neg","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Neg α\na : α\n⊢ Eq (OrderDual.toDual (Neg.neg a)) (Neg.neg (OrderDual.toDual a))","decl":"@[to_additive (attr := simp)]\ntheorem toDual_inv [Inv α] (a : α) : toDual a⁻¹ = (toDual a)⁻¹ := rfl\n\n"}
{"name":"ofDual_inv","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Inv α\na : OrderDual α\n⊢ Eq (OrderDual.ofDual (Inv.inv a)) (Inv.inv (OrderDual.ofDual a))","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_inv [Inv α] (a : αᵒᵈ) : ofDual a⁻¹ = (ofDual a)⁻¹ := rfl\n\n"}
{"name":"ofDual_neg","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Neg α\na : OrderDual α\n⊢ Eq (OrderDual.ofDual (Neg.neg a)) (Neg.neg (OrderDual.ofDual a))","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_inv [Inv α] (a : αᵒᵈ) : ofDual a⁻¹ = (ofDual a)⁻¹ := rfl\n\n"}
{"name":"toDual_div","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Div α\na b : α\n⊢ Eq (OrderDual.toDual (HDiv.hDiv a b)) (HDiv.hDiv (OrderDual.toDual a) (OrderDual.toDual b))","decl":"@[to_additive (attr := simp)]\ntheorem toDual_div [Div α] (a b : α) : toDual (a / b) = toDual a / toDual b := rfl\n\n"}
{"name":"toDual_sub","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Sub α\na b : α\n⊢ Eq (OrderDual.toDual (HSub.hSub a b)) (HSub.hSub (OrderDual.toDual a) (OrderDual.toDual b))","decl":"@[to_additive (attr := simp)]\ntheorem toDual_div [Div α] (a b : α) : toDual (a / b) = toDual a / toDual b := rfl\n\n"}
{"name":"ofDual_div","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Div α\na b : OrderDual α\n⊢ Eq (OrderDual.ofDual (HDiv.hDiv a b)) (HDiv.hDiv (OrderDual.ofDual a) (OrderDual.ofDual b))","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_div [Div α] (a b : αᵒᵈ) : ofDual (a / b) = ofDual a / ofDual b := rfl\n\n"}
{"name":"ofDual_sub","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Sub α\na b : OrderDual α\n⊢ Eq (OrderDual.ofDual (HSub.hSub a b)) (HSub.hSub (OrderDual.ofDual a) (OrderDual.ofDual b))","decl":"@[to_additive (attr := simp)]\ntheorem ofDual_div [Div α] (a b : αᵒᵈ) : ofDual (a / b) = ofDual a / ofDual b := rfl\n\n"}
{"name":"toDual_pow","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : α\nb : β\n⊢ Eq (OrderDual.toDual (HPow.hPow a b)) (HPow.hPow (OrderDual.toDual a) b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toDual_smul]\ntheorem toDual_pow [Pow α β] (a : α) (b : β) : toDual (a ^ b) = toDual a ^ b := rfl\n\n"}
{"name":"toDual_vadd","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : β\na : α\n⊢ Eq (OrderDual.toDual (HVAdd.hVAdd b a)) (HVAdd.hVAdd b (OrderDual.toDual a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toDual_smul]\ntheorem toDual_pow [Pow α β] (a : α) (b : β) : toDual (a ^ b) = toDual a ^ b := rfl\n\n"}
{"name":"toDual_smul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : β\na : α\n⊢ Eq (OrderDual.toDual (HSMul.hSMul b a)) (HSMul.hSMul b (OrderDual.toDual a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toDual_smul]\ntheorem toDual_pow [Pow α β] (a : α) (b : β) : toDual (a ^ b) = toDual a ^ b := rfl\n\n"}
{"name":"ofDual_pow","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : OrderDual α\nb : β\n⊢ Eq (OrderDual.ofDual (HPow.hPow a b)) (HPow.hPow (OrderDual.ofDual a) b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofDual_smul]\ntheorem ofDual_pow [Pow α β] (a : αᵒᵈ) (b : β) : ofDual (a ^ b) = ofDual a ^ b := rfl\n\n"}
{"name":"ofDual_smul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : β\na : OrderDual α\n⊢ Eq (OrderDual.ofDual (HSMul.hSMul b a)) (HSMul.hSMul b (OrderDual.ofDual a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofDual_smul]\ntheorem ofDual_pow [Pow α β] (a : αᵒᵈ) (b : β) : ofDual (a ^ b) = ofDual a ^ b := rfl\n\n"}
{"name":"ofDual_vadd","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : β\na : OrderDual α\n⊢ Eq (OrderDual.ofDual (HVAdd.hVAdd b a)) (HVAdd.hVAdd b (OrderDual.ofDual a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofDual_smul]\ntheorem ofDual_pow [Pow α β] (a : αᵒᵈ) (b : β) : ofDual (a ^ b) = ofDual a ^ b := rfl\n\n"}
{"name":"pow_toDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : α\nb : β\n⊢ Eq (HPow.hPow a (OrderDual.toDual b)) (HPow.hPow a b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toDual_smul']\ntheorem pow_toDual [Pow α β] (a : α) (b : β) : a ^ toDual b = a ^ b := rfl\n\n"}
{"name":"toDual_vadd'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : β\na : α\n⊢ Eq (HVAdd.hVAdd (OrderDual.toDual b) a) (HVAdd.hVAdd b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toDual_smul']\ntheorem pow_toDual [Pow α β] (a : α) (b : β) : a ^ toDual b = a ^ b := rfl\n\n"}
{"name":"toDual_smul'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : β\na : α\n⊢ Eq (HSMul.hSMul (OrderDual.toDual b) a) (HSMul.hSMul b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toDual_smul']\ntheorem pow_toDual [Pow α β] (a : α) (b : β) : a ^ toDual b = a ^ b := rfl\n\n"}
{"name":"pow_ofDual","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : α\nb : OrderDual β\n⊢ Eq (HPow.hPow a (OrderDual.ofDual b)) (HPow.hPow a b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofDual_smul']\ntheorem pow_ofDual [Pow α β] (a : α) (b : βᵒᵈ) : a ^ ofDual b = a ^ b := rfl\n\n"}
{"name":"ofDual_vadd'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : OrderDual β\na : α\n⊢ Eq (HVAdd.hVAdd (OrderDual.ofDual b) a) (HVAdd.hVAdd b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofDual_smul']\ntheorem pow_ofDual [Pow α β] (a : α) (b : βᵒᵈ) : a ^ ofDual b = a ^ b := rfl\n\n"}
{"name":"ofDual_smul'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : OrderDual β\na : α\n⊢ Eq (HSMul.hSMul (OrderDual.ofDual b) a) (HSMul.hSMul b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofDual_smul']\ntheorem pow_ofDual [Pow α β] (a : α) (b : βᵒᵈ) : a ^ ofDual b = a ^ b := rfl\n\n"}
{"name":"toLex_zero","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Zero α\n⊢ Eq (toLex 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem toLex_one [One α] : toLex (1 : α) = 1 := rfl\n\n"}
{"name":"toLex_one","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : One α\n⊢ Eq (toLex 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem toLex_one [One α] : toLex (1 : α) = 1 := rfl\n\n"}
{"name":"ofLex_one","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : One α\n⊢ Eq (ofLex 1) 1","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_one [One α] : (ofLex 1 : α) = 1 := rfl\n\n"}
{"name":"ofLex_zero","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Zero α\n⊢ Eq (ofLex 0) 0","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_one [One α] : (ofLex 1 : α) = 1 := rfl\n\n"}
{"name":"toLex_mul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\na b : α\n⊢ Eq (toLex (HMul.hMul a b)) (HMul.hMul (toLex a) (toLex b))","decl":"@[to_additive (attr := simp)]\ntheorem toLex_mul [Mul α] (a b : α) : toLex (a * b) = toLex a * toLex b := rfl\n\n"}
{"name":"toLex_add","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\na b : α\n⊢ Eq (toLex (HAdd.hAdd a b)) (HAdd.hAdd (toLex a) (toLex b))","decl":"@[to_additive (attr := simp)]\ntheorem toLex_mul [Mul α] (a b : α) : toLex (a * b) = toLex a * toLex b := rfl\n\n"}
{"name":"ofLex_add","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Add α\na b : Lex α\n⊢ Eq (ofLex (HAdd.hAdd a b)) (HAdd.hAdd (ofLex a) (ofLex b))","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_mul [Mul α] (a b : Lex α) : ofLex (a * b) = ofLex a * ofLex b := rfl\n\n"}
{"name":"ofLex_mul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Mul α\na b : Lex α\n⊢ Eq (ofLex (HMul.hMul a b)) (HMul.hMul (ofLex a) (ofLex b))","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_mul [Mul α] (a b : Lex α) : ofLex (a * b) = ofLex a * ofLex b := rfl\n\n"}
{"name":"toLex_neg","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Neg α\na : α\n⊢ Eq (toLex (Neg.neg a)) (Neg.neg (toLex a))","decl":"@[to_additive (attr := simp)]\ntheorem toLex_inv [Inv α] (a : α) : toLex a⁻¹ = (toLex a)⁻¹ := rfl\n\n"}
{"name":"toLex_inv","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Inv α\na : α\n⊢ Eq (toLex (Inv.inv a)) (Inv.inv (toLex a))","decl":"@[to_additive (attr := simp)]\ntheorem toLex_inv [Inv α] (a : α) : toLex a⁻¹ = (toLex a)⁻¹ := rfl\n\n"}
{"name":"ofLex_neg","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Neg α\na : Lex α\n⊢ Eq (ofLex (Neg.neg a)) (Neg.neg (ofLex a))","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_inv [Inv α] (a : Lex α) : ofLex a⁻¹ = (ofLex a)⁻¹ := rfl\n\n"}
{"name":"ofLex_inv","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Inv α\na : Lex α\n⊢ Eq (ofLex (Inv.inv a)) (Inv.inv (ofLex a))","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_inv [Inv α] (a : Lex α) : ofLex a⁻¹ = (ofLex a)⁻¹ := rfl\n\n"}
{"name":"toLex_sub","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Sub α\na b : α\n⊢ Eq (toLex (HSub.hSub a b)) (HSub.hSub (toLex a) (toLex b))","decl":"@[to_additive (attr := simp)]\ntheorem toLex_div [Div α] (a b : α) : toLex (a / b) = toLex a / toLex b := rfl\n\n"}
{"name":"toLex_div","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Div α\na b : α\n⊢ Eq (toLex (HDiv.hDiv a b)) (HDiv.hDiv (toLex a) (toLex b))","decl":"@[to_additive (attr := simp)]\ntheorem toLex_div [Div α] (a b : α) : toLex (a / b) = toLex a / toLex b := rfl\n\n"}
{"name":"ofLex_sub","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Sub α\na b : Lex α\n⊢ Eq (ofLex (HSub.hSub a b)) (HSub.hSub (ofLex a) (ofLex b))","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_div [Div α] (a b : Lex α) : ofLex (a / b) = ofLex a / ofLex b := rfl\n\n"}
{"name":"ofLex_div","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\ninst✝ : Div α\na b : Lex α\n⊢ Eq (ofLex (HDiv.hDiv a b)) (HDiv.hDiv (ofLex a) (ofLex b))","decl":"@[to_additive (attr := simp)]\ntheorem ofLex_div [Div α] (a b : Lex α) : ofLex (a / b) = ofLex a / ofLex b := rfl\n\n"}
{"name":"toLex_vadd","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : β\na : α\n⊢ Eq (toLex (HVAdd.hVAdd b a)) (HVAdd.hVAdd b (toLex a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toLex_smul]\ntheorem toLex_pow [Pow α β] (a : α) (b : β) : toLex (a ^ b) = toLex a ^ b := rfl\n\n"}
{"name":"toLex_pow","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : α\nb : β\n⊢ Eq (toLex (HPow.hPow a b)) (HPow.hPow (toLex a) b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toLex_smul]\ntheorem toLex_pow [Pow α β] (a : α) (b : β) : toLex (a ^ b) = toLex a ^ b := rfl\n\n"}
{"name":"toLex_smul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : β\na : α\n⊢ Eq (toLex (HSMul.hSMul b a)) (HSMul.hSMul b (toLex a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toLex_smul]\ntheorem toLex_pow [Pow α β] (a : α) (b : β) : toLex (a ^ b) = toLex a ^ b := rfl\n\n"}
{"name":"ofLex_smul","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : β\na : Lex α\n⊢ Eq (ofLex (HSMul.hSMul b a)) (HSMul.hSMul b (ofLex a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofLex_smul]\ntheorem ofLex_pow [Pow α β] (a : Lex α) (b : β) : ofLex (a ^ b) = ofLex a ^ b := rfl\n\n"}
{"name":"ofLex_vadd","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : β\na : Lex α\n⊢ Eq (ofLex (HVAdd.hVAdd b a)) (HVAdd.hVAdd b (ofLex a))","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofLex_smul]\ntheorem ofLex_pow [Pow α β] (a : Lex α) (b : β) : ofLex (a ^ b) = ofLex a ^ b := rfl\n\n"}
{"name":"ofLex_pow","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : Lex α\nb : β\n⊢ Eq (ofLex (HPow.hPow a b)) (HPow.hPow (ofLex a) b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofLex_smul]\ntheorem ofLex_pow [Pow α β] (a : Lex α) (b : β) : ofLex (a ^ b) = ofLex a ^ b := rfl\n\n"}
{"name":"toLex_vadd'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : β\na : α\n⊢ Eq (HVAdd.hVAdd (toLex b) a) (HVAdd.hVAdd b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toLex_smul']\ntheorem pow_toLex [Pow α β] (a : α) (b : β) : a ^ toLex b = a ^ b := rfl\n\n"}
{"name":"toLex_smul'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : β\na : α\n⊢ Eq (HSMul.hSMul (toLex b) a) (HSMul.hSMul b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toLex_smul']\ntheorem pow_toLex [Pow α β] (a : α) (b : β) : a ^ toLex b = a ^ b := rfl\n\n"}
{"name":"pow_toLex","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : α\nb : β\n⊢ Eq (HPow.hPow a (toLex b)) (HPow.hPow a b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) toLex_smul']\ntheorem pow_toLex [Pow α β] (a : α) (b : β) : a ^ toLex b = a ^ b := rfl\n\n"}
{"name":"ofLex_vadd'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : VAdd β α\nb : Lex β\na : α\n⊢ Eq (HVAdd.hVAdd (ofLex b) a) (HVAdd.hVAdd b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofLex_smul']\ntheorem pow_ofLex [Pow α β] (a : α) (b : Lex β) : a ^ ofLex b = a ^ b := rfl\n"}
{"name":"pow_ofLex","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝ : Pow α β\na : α\nb : Lex β\n⊢ Eq (HPow.hPow a (ofLex b)) (HPow.hPow a b)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofLex_smul']\ntheorem pow_ofLex [Pow α β] (a : α) (b : Lex β) : a ^ ofLex b = a ^ b := rfl\n"}
{"name":"ofLex_smul'","module":"Mathlib.Algebra.Order.Group.Synonym","initialProofState":"β : Type u_2\nα : Type u_1\ninst✝ : SMul β α\nb : Lex β\na : α\n⊢ Eq (HSMul.hSMul (ofLex b) a) (HSMul.hSMul b a)","decl":"@[to_additive (attr := simp, to_additive) (reorder := 1 2, 4 5) ofLex_smul']\ntheorem pow_ofLex [Pow α β] (a : α) (b : Lex β) : a ^ ofLex b = a ^ b := rfl\n"}
