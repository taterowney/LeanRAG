{"name":"HasFTaylorSeriesUpToOn.fderivWithin","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nn : WithTop ENat\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\ns : Set E\nself : HasFTaylorSeriesUpToOn n f p s\nm : Nat\na✝¹ : LT.lt (↑m) n\nx : E\na✝ : Membership.mem s x\n⊢ HasFDerivWithinAt (fun x => p x m) (p x m.succ).curryLeft s x","decl":"/-- `HasFTaylorSeriesUpToOn n f p s` registers the fact that `p 0 = f` and `p (m+1)` is a\nderivative of `p m` for `m < n`, and is continuous for `m ≤ n`. This is a predicate analogous to\n`HasFDerivWithinAt` but for higher order derivatives.\n\nNotice that `p` does not sum up to `f` on the diagonal (`FormalMultilinearSeries.sum`), even if\n`f` is analytic and `n = ∞`: an additional `1/m!` factor on the `m`th term is necessary for that. -/\nstructure HasFTaylorSeriesUpToOn\n  (n : WithTop ℕ∞) (f : E → F) (p : E → FormalMultilinearSeries 𝕜 E F) (s : Set E) : Prop where\n  zero_eq : ∀ x ∈ s, (p x 0).curry0 = f x\n  protected fderivWithin : ∀ m : ℕ, m < n → ∀ x ∈ s,\n    HasFDerivWithinAt (p · m) (p x m.succ).curryLeft s x\n  cont : ∀ m : ℕ, m ≤ n → ContinuousOn (p · m) s\n\n"}
{"name":"HasFTaylorSeriesUpToOn.zero_eq","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nn : WithTop ENat\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\ns : Set E\nself : HasFTaylorSeriesUpToOn n f p s\nx : E\na✝ : Membership.mem s x\n⊢ Eq (p x 0).curry0 (f x)","decl":"/-- `HasFTaylorSeriesUpToOn n f p s` registers the fact that `p 0 = f` and `p (m+1)` is a\nderivative of `p m` for `m < n`, and is continuous for `m ≤ n`. This is a predicate analogous to\n`HasFDerivWithinAt` but for higher order derivatives.\n\nNotice that `p` does not sum up to `f` on the diagonal (`FormalMultilinearSeries.sum`), even if\n`f` is analytic and `n = ∞`: an additional `1/m!` factor on the `m`th term is necessary for that. -/\nstructure HasFTaylorSeriesUpToOn\n  (n : WithTop ℕ∞) (f : E → F) (p : E → FormalMultilinearSeries 𝕜 E F) (s : Set E) : Prop where\n  zero_eq : ∀ x ∈ s, (p x 0).curry0 = f x\n  protected fderivWithin : ∀ m : ℕ, m < n → ∀ x ∈ s,\n    HasFDerivWithinAt (p · m) (p x m.succ).curryLeft s x\n  cont : ∀ m : ℕ, m ≤ n → ContinuousOn (p · m) s\n\n"}
{"name":"HasFTaylorSeriesUpToOn.cont","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nn : WithTop ENat\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\ns : Set E\nself : HasFTaylorSeriesUpToOn n f p s\nm : Nat\na✝ : LE.le (↑m) n\n⊢ ContinuousOn (fun x => p x m) s","decl":"/-- `HasFTaylorSeriesUpToOn n f p s` registers the fact that `p 0 = f` and `p (m+1)` is a\nderivative of `p m` for `m < n`, and is continuous for `m ≤ n`. This is a predicate analogous to\n`HasFDerivWithinAt` but for higher order derivatives.\n\nNotice that `p` does not sum up to `f` on the diagonal (`FormalMultilinearSeries.sum`), even if\n`f` is analytic and `n = ∞`: an additional `1/m!` factor on the `m`th term is necessary for that. -/\nstructure HasFTaylorSeriesUpToOn\n  (n : WithTop ℕ∞) (f : E → F) (p : E → FormalMultilinearSeries 𝕜 E F) (s : Set E) : Prop where\n  zero_eq : ∀ x ∈ s, (p x 0).curry0 = f x\n  protected fderivWithin : ∀ m : ℕ, m < n → ∀ x ∈ s,\n    HasFDerivWithinAt (p · m) (p x m.succ).curryLeft s x\n  cont : ∀ m : ℕ, m ≤ n → ContinuousOn (p · m) s\n\n"}
{"name":"HasFTaylorSeriesUpToOn.zero_eq'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nx : E\nhx : Membership.mem s x\n⊢ Eq (p x 0) ((continuousMultilinearCurryFin0 𝕜 E F).symm (f x))","decl":"theorem HasFTaylorSeriesUpToOn.zero_eq' (h : HasFTaylorSeriesUpToOn n f p s) {x : E} (hx : x ∈ s) :\n    p x 0 = (continuousMultilinearCurryFin0 𝕜 E F).symm (f x) := by\n  rw [← h.zero_eq x hx]\n  exact (p x 0).uncurry0_curry0.symm\n\n"}
{"name":"HasFTaylorSeriesUpToOn.congr","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf f₁ : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nh₁ : ∀ (x : E), Membership.mem s x → Eq (f₁ x) (f x)\n⊢ HasFTaylorSeriesUpToOn n f₁ p s","decl":"/-- If two functions coincide on a set `s`, then a Taylor series for the first one is as well a\nTaylor series for the second one. -/\ntheorem HasFTaylorSeriesUpToOn.congr (h : HasFTaylorSeriesUpToOn n f p s)\n    (h₁ : ∀ x ∈ s, f₁ x = f x) : HasFTaylorSeriesUpToOn n f₁ p s := by\n  refine ⟨fun x hx => ?_, h.fderivWithin, h.cont⟩\n  rw [h₁ x hx]\n  exact h.zero_eq x hx\n\n"}
{"name":"HasFTaylorSeriesUpToOn.congr_series","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : WithTop ENat\np q : E → FormalMultilinearSeries 𝕜 E F\nhp : HasFTaylorSeriesUpToOn n f p s\nhpq : ∀ (m : Nat), LE.le (↑m) n → Set.EqOn (fun x => p x m) (fun x => q x m) s\n⊢ HasFTaylorSeriesUpToOn n f q s","decl":"theorem HasFTaylorSeriesUpToOn.congr_series {q} (hp : HasFTaylorSeriesUpToOn n f p s)\n    (hpq : ∀ m : ℕ, m ≤ n → EqOn (p · m) (q · m) s) :\n    HasFTaylorSeriesUpToOn n f q s where\n  zero_eq x hx := by simp only [← (hpq 0 (zero_le n) hx), hp.zero_eq x hx]\n  fderivWithin m hm x hx := by\n    refine ((hp.fderivWithin m hm x hx).congr' (hpq m hm.le).symm hx).congr_fderiv ?_\n    refine congrArg _ (hpq (m + 1) ?_ hx)\n    exact ENat.add_one_natCast_le_withTop_of_lt hm\n  cont m hm := (hp.cont m hm).congr (hpq m hm).symm\n\n"}
{"name":"HasFTaylorSeriesUpToOn.mono","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nt : Set E\nhst : HasSubset.Subset t s\n⊢ HasFTaylorSeriesUpToOn n f p t","decl":"theorem HasFTaylorSeriesUpToOn.mono (h : HasFTaylorSeriesUpToOn n f p s) {t : Set E} (hst : t ⊆ s) :\n    HasFTaylorSeriesUpToOn n f p t :=\n  ⟨fun x hx => h.zero_eq x (hst hx), fun m hm x hx => (h.fderivWithin m hm x (hst hx)).mono hst,\n    fun m hm => (h.cont m hm).mono hst⟩\n\n"}
{"name":"HasFTaylorSeriesUpToOn.of_le","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nm n : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nhmn : LE.le m n\n⊢ HasFTaylorSeriesUpToOn m f p s","decl":"theorem HasFTaylorSeriesUpToOn.of_le (h : HasFTaylorSeriesUpToOn n f p s) (hmn : m ≤ n) :\n    HasFTaylorSeriesUpToOn m f p s :=\n  ⟨h.zero_eq, fun k hk x hx => h.fderivWithin k (lt_of_lt_of_le hk hmn) x hx, fun k hk =>\n    h.cont k (le_trans hk hmn)⟩\n\n"}
{"name":"HasFTaylorSeriesUpToOn.continuousOn","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\n⊢ ContinuousOn f s","decl":"theorem HasFTaylorSeriesUpToOn.continuousOn (h : HasFTaylorSeriesUpToOn n f p s) :\n    ContinuousOn f s := by\n  have := (h.cont 0 bot_le).congr fun x hx => (h.zero_eq' hx).symm\n  rwa [← (continuousMultilinearCurryFin0 𝕜 E F).symm.comp_continuousOn_iff]\n\n"}
{"name":"hasFTaylorSeriesUpToOn_zero_iff","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\n⊢ Iff (HasFTaylorSeriesUpToOn 0 f p s) (And (ContinuousOn f s) (∀ (x : E), Membership.mem s x → Eq (p x 0).curry0 (f x)))","decl":"theorem hasFTaylorSeriesUpToOn_zero_iff :\n    HasFTaylorSeriesUpToOn 0 f p s ↔ ContinuousOn f s ∧ ∀ x ∈ s, (p x 0).curry0 = f x := by\n  refine ⟨fun H => ⟨H.continuousOn, H.zero_eq⟩, fun H =>\n      ⟨H.2, fun m hm => False.elim (not_le.2 hm bot_le), fun m hm ↦ ?_⟩⟩\n  obtain rfl : m = 0 := mod_cast hm.antisymm (zero_le _)\n  have : EqOn (p · 0) ((continuousMultilinearCurryFin0 𝕜 E F).symm ∘ f) s := fun x hx ↦\n    (continuousMultilinearCurryFin0 𝕜 E F).eq_symm_apply.2 (H.2 x hx)\n  rw [continuousOn_congr this, LinearIsometryEquiv.comp_continuousOn_iff]\n  exact H.1\n\n"}
{"name":"hasFTaylorSeriesUpToOn_top_iff_add","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nN : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nhN : LE.le (↑Top.top) N\nk : Nat\n⊢ Iff (HasFTaylorSeriesUpToOn N f p s) (∀ (n : Nat), HasFTaylorSeriesUpToOn (↑(HAdd.hAdd n k)) f p s)","decl":"theorem hasFTaylorSeriesUpToOn_top_iff_add (hN : ∞ ≤ N) (k : ℕ) :\n    HasFTaylorSeriesUpToOn N f p s ↔ ∀ n : ℕ, HasFTaylorSeriesUpToOn (n + k : ℕ) f p s := by\n  constructor\n  · intro H n\n    apply H.of_le (natCast_le_of_coe_top_le_withTop hN _)\n  · intro H\n    constructor\n    · exact (H 0).zero_eq\n    · intro m _\n      apply (H m.succ).fderivWithin m (by norm_cast; omega)\n    · intro m _\n      apply (H m).cont m (by simp)\n\n"}
{"name":"hasFTaylorSeriesUpToOn_top_iff","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nN : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nhN : LE.le (↑Top.top) N\n⊢ Iff (HasFTaylorSeriesUpToOn N f p s) (∀ (n : Nat), HasFTaylorSeriesUpToOn (↑n) f p s)","decl":"theorem hasFTaylorSeriesUpToOn_top_iff (hN : ∞ ≤ N) :\n    HasFTaylorSeriesUpToOn N f p s ↔ ∀ n : ℕ, HasFTaylorSeriesUpToOn n f p s := by\n  simpa using hasFTaylorSeriesUpToOn_top_iff_add hN 0\n\n"}
{"name":"hasFTaylorSeriesUpToOn_top_iff'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nN : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nhN : LE.le (↑Top.top) N\n⊢ Iff (HasFTaylorSeriesUpToOn N f p s) (And (∀ (x : E), Membership.mem s x → Eq (p x 0).curry0 (f x)) (∀ (m : Nat) (x : E), Membership.mem s x → HasFDerivWithinAt (fun y => p y m) (p x m.succ).curryLeft s x))","decl":"/-- In the case that `n = ∞` we don't need the continuity assumption in\n`HasFTaylorSeriesUpToOn`. -/\ntheorem hasFTaylorSeriesUpToOn_top_iff' (hN : ∞ ≤ N) :\n    HasFTaylorSeriesUpToOn N f p s ↔\n      (∀ x ∈ s, (p x 0).curry0 = f x) ∧\n        ∀ m : ℕ, ∀ x ∈ s, HasFDerivWithinAt (fun y => p y m) (p x m.succ).curryLeft s x := by\n  -- Everything except for the continuity is trivial:\n  refine ⟨fun h => ⟨h.1, fun m => h.2 m (natCast_lt_of_coe_top_le_withTop hN _)⟩, fun h =>\n    ⟨h.1, fun m _ => h.2 m, fun m _ x hx =>\n      -- The continuity follows from the existence of a derivative:\n      (h.2 m x hx).continuousWithinAt⟩⟩\n\n"}
{"name":"HasFTaylorSeriesUpToOn.hasFDerivWithinAt","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nhn : LE.le 1 n\nhx : Membership.mem s x\n⊢ HasFDerivWithinAt f ((continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) s x","decl":"/-- If a function has a Taylor series at order at least `1`, then the term of order `1` of this\nseries is a derivative of `f`. -/\ntheorem HasFTaylorSeriesUpToOn.hasFDerivWithinAt (h : HasFTaylorSeriesUpToOn n f p s) (hn : 1 ≤ n)\n    (hx : x ∈ s) : HasFDerivWithinAt f (continuousMultilinearCurryFin1 𝕜 E F (p x 1)) s x := by\n  have A : ∀ y ∈ s, f y = (continuousMultilinearCurryFin0 𝕜 E F) (p y 0) := fun y hy ↦\n    (h.zero_eq y hy).symm\n  suffices H : HasFDerivWithinAt (continuousMultilinearCurryFin0 𝕜 E F ∘ (p · 0))\n    (continuousMultilinearCurryFin1 𝕜 E F (p x 1)) s x from H.congr A (A x hx)\n  rw [LinearIsometryEquiv.comp_hasFDerivWithinAt_iff']\n  have : ((0 : ℕ) : ℕ∞) < n := zero_lt_one.trans_le hn\n  convert h.fderivWithin _ this x hx\n  ext y v\n  change (p x 1) (snoc 0 y) = (p x 1) (cons y v)\n  congr with i\n  rw [Unique.eq_default (α := Fin 1) i]\n  rfl\n\n"}
{"name":"HasFTaylorSeriesUpToOn.differentiableOn","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nhn : LE.le 1 n\n⊢ DifferentiableOn 𝕜 f s","decl":"theorem HasFTaylorSeriesUpToOn.differentiableOn (h : HasFTaylorSeriesUpToOn n f p s) (hn : 1 ≤ n) :\n    DifferentiableOn 𝕜 f s := fun _x hx => (h.hasFDerivWithinAt hn hx).differentiableWithinAt\n\n"}
{"name":"HasFTaylorSeriesUpToOn.hasFDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nhn : LE.le 1 n\nhx : Membership.mem (nhds x) s\n⊢ HasFDerivAt f ((continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) x","decl":"/-- If a function has a Taylor series at order at least `1` on a neighborhood of `x`, then the term\nof order `1` of this series is a derivative of `f` at `x`. -/\ntheorem HasFTaylorSeriesUpToOn.hasFDerivAt (h : HasFTaylorSeriesUpToOn n f p s) (hn : 1 ≤ n)\n    (hx : s ∈ 𝓝 x) : HasFDerivAt f (continuousMultilinearCurryFin1 𝕜 E F (p x 1)) x :=\n  (h.hasFDerivWithinAt hn (mem_of_mem_nhds hx)).hasFDerivAt hx\n\n"}
{"name":"HasFTaylorSeriesUpToOn.eventually_hasFDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nhn : LE.le 1 n\nhx : Membership.mem (nhds x) s\n⊢ Filter.Eventually (fun y => HasFDerivAt f ((continuousMultilinearCurryFin1 𝕜 E F) (p y 1)) y) (nhds x)","decl":"/-- If a function has a Taylor series at order at least `1` on a neighborhood of `x`, then\nin a neighborhood of `x`, the term of order `1` of this series is a derivative of `f`. -/\ntheorem HasFTaylorSeriesUpToOn.eventually_hasFDerivAt (h : HasFTaylorSeriesUpToOn n f p s)\n    (hn : 1 ≤ n) (hx : s ∈ 𝓝 x) :\n    ∀ᶠ y in 𝓝 x, HasFDerivAt f (continuousMultilinearCurryFin1 𝕜 E F (p y 1)) y :=\n  (eventually_eventually_nhds.2 hx).mono fun _y hy => h.hasFDerivAt hn hy\n\n"}
{"name":"HasFTaylorSeriesUpToOn.differentiableAt","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nhn : LE.le 1 n\nhx : Membership.mem (nhds x) s\n⊢ DifferentiableAt 𝕜 f x","decl":"/-- If a function has a Taylor series at order at least `1` on a neighborhood of `x`, then\nit is differentiable at `x`. -/\ntheorem HasFTaylorSeriesUpToOn.differentiableAt (h : HasFTaylorSeriesUpToOn n f p s) (hn : 1 ≤ n)\n    (hx : s ∈ 𝓝 x) : DifferentiableAt 𝕜 f x :=\n  (h.hasFDerivAt hn hx).differentiableAt\n\n"}
{"name":"hasFTaylorSeriesUpToOn_succ_iff_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Iff (HasFTaylorSeriesUpToOn (HAdd.hAdd (↑n) 1) f p s) (And (HasFTaylorSeriesUpToOn (↑n) f p s) (And (∀ (x : E), Membership.mem s x → HasFDerivWithinAt (fun y => p y n) (p x n.succ).curryLeft s x) (ContinuousOn (fun x => p x (HAdd.hAdd n 1)) s)))","decl":"/-- `p` is a Taylor series of `f` up to `n+1` if and only if `p` is a Taylor series up to `n`, and\n`p (n + 1)` is a derivative of `p n`. -/\ntheorem hasFTaylorSeriesUpToOn_succ_iff_left {n : ℕ} :\n    HasFTaylorSeriesUpToOn (n + 1) f p s ↔\n      HasFTaylorSeriesUpToOn n f p s ∧\n        (∀ x ∈ s, HasFDerivWithinAt (fun y => p y n) (p x n.succ).curryLeft s x) ∧\n          ContinuousOn (fun x => p x (n + 1)) s := by\n  constructor\n  · exact fun h ↦ ⟨h.of_le (mod_cast Nat.le_succ n),\n      h.fderivWithin _ (mod_cast lt_add_one n), h.cont (n + 1) le_rfl⟩\n  · intro h\n    constructor\n    · exact h.1.zero_eq\n    · intro m hm\n      by_cases h' : m < n\n      · exact h.1.fderivWithin m (mod_cast h')\n      · have : m = n := Nat.eq_of_lt_succ_of_not_lt (mod_cast hm) h'\n        rw [this]\n        exact h.2.1\n    · intro m hm\n      by_cases h' : m ≤ n\n      · apply h.1.cont m (mod_cast h')\n      · have : m = n + 1 := le_antisymm (mod_cast hm) (not_le.1 h')\n        rw [this]\n        exact h.2.2\n\n"}
{"name":"HasFTaylorSeriesUpToOn.shift_of_succ","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nn : Nat\nH : HasFTaylorSeriesUpToOn (↑(HAdd.hAdd n 1)) f p s\n⊢ HasFTaylorSeriesUpToOn (↑n) (fun x => (continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) (fun x => (p x).shift) s","decl":"set_option maxSynthPendingDepth 2 in\n-- Porting note: this was split out from `hasFTaylorSeriesUpToOn_succ_iff_right` to avoid a timeout.\ntheorem HasFTaylorSeriesUpToOn.shift_of_succ\n    {n : ℕ} (H : HasFTaylorSeriesUpToOn (n + 1 : ℕ) f p s) :\n    (HasFTaylorSeriesUpToOn n (fun x => continuousMultilinearCurryFin1 𝕜 E F (p x 1))\n      (fun x => (p x).shift)) s := by\n  constructor\n  · intro x _\n    rfl\n  · intro m (hm : (m : WithTop ℕ∞) < n) x (hx : x ∈ s)\n    have A : (m.succ : WithTop ℕ∞) < n.succ := by\n      rw [Nat.cast_lt] at hm ⊢\n      exact Nat.succ_lt_succ hm\n    change HasFDerivWithinAt (continuousMultilinearCurryRightEquiv' 𝕜 m E F ∘ (p · m.succ))\n      (p x m.succ.succ).curryRight.curryLeft s x\n    rw [(continuousMultilinearCurryRightEquiv' 𝕜 m E F).comp_hasFDerivWithinAt_iff']\n    convert H.fderivWithin _ A x hx\n    ext y v\n    change p x (m + 2) (snoc (cons y (init v)) (v (last _))) = p x (m + 2) (cons y v)\n    rw [← cons_snoc_eq_snoc_cons, snoc_init_self]\n  · intro m (hm : (m : WithTop ℕ∞) ≤ n)\n    suffices A : ContinuousOn (p · (m + 1)) s from\n      (continuousMultilinearCurryRightEquiv' 𝕜 m E F).continuous.comp_continuousOn A\n    refine H.cont _ ?_\n    rw [Nat.cast_le] at hm ⊢\n    exact Nat.succ_le_succ hm\n\n"}
{"name":"hasFTaylorSeriesUpToOn_succ_nat_iff_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Iff (HasFTaylorSeriesUpToOn (↑(HAdd.hAdd n 1)) f p s) (And (∀ (x : E), Membership.mem s x → Eq (p x 0).curry0 (f x)) (And (∀ (x : E), Membership.mem s x → HasFDerivWithinAt (fun y => p y 0) (p x 1).curryLeft s x) (HasFTaylorSeriesUpToOn (↑n) (fun x => (continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) (fun x => (p x).shift) s)))","decl":"/-- `p` is a Taylor series of `f` up to `n+1` if and only if `p.shift` is a Taylor series up to `n`\nfor `p 1`, which is a derivative of `f`. Version for `n : ℕ`. -/\ntheorem hasFTaylorSeriesUpToOn_succ_nat_iff_right {n : ℕ} :\n    HasFTaylorSeriesUpToOn (n + 1 : ℕ) f p s ↔\n      (∀ x ∈ s, (p x 0).curry0 = f x) ∧\n        (∀ x ∈ s, HasFDerivWithinAt (fun y => p y 0) (p x 1).curryLeft s x) ∧\n          HasFTaylorSeriesUpToOn n (fun x => continuousMultilinearCurryFin1 𝕜 E F (p x 1))\n            (fun x => (p x).shift) s := by\n  constructor\n  · intro H\n    refine ⟨H.zero_eq, H.fderivWithin 0 (Nat.cast_lt.2 (Nat.succ_pos n)), ?_⟩\n    exact H.shift_of_succ\n  · rintro ⟨Hzero_eq, Hfderiv_zero, Htaylor⟩\n    constructor\n    · exact Hzero_eq\n    · intro m (hm : (m : WithTop ℕ∞) < n.succ) x (hx : x ∈ s)\n      cases' m with m\n      · exact Hfderiv_zero x hx\n      · have A : (m : WithTop ℕ∞) < n := by\n          rw [Nat.cast_lt] at hm ⊢\n          exact Nat.lt_of_succ_lt_succ hm\n        have :\n          HasFDerivWithinAt (𝕜 := 𝕜) (continuousMultilinearCurryRightEquiv' 𝕜 m E F ∘ (p · m.succ))\n            ((p x).shift m.succ).curryLeft s x := Htaylor.fderivWithin _ A x hx\n        rw [LinearIsometryEquiv.comp_hasFDerivWithinAt_iff'\n            (f' := ((p x).shift m.succ).curryLeft)] at this\n        convert this\n        ext y v\n        change\n          (p x (Nat.succ (Nat.succ m))) (cons y v) =\n            (p x m.succ.succ) (snoc (cons y (init v)) (v (last _)))\n        rw [← cons_snoc_eq_snoc_cons, snoc_init_self]\n    · intro m (hm : (m : WithTop ℕ∞) ≤ n.succ)\n      cases' m with m\n      · have : DifferentiableOn 𝕜 (fun x => p x 0) s := fun x hx =>\n          (Hfderiv_zero x hx).differentiableWithinAt\n        exact this.continuousOn\n      · refine (continuousMultilinearCurryRightEquiv' 𝕜 m E F).comp_continuousOn_iff.mp ?_\n        refine Htaylor.cont _ ?_\n        rw [Nat.cast_le] at hm ⊢\n        exact Nat.lt_succ_iff.mp hm\n\n"}
{"name":"hasFTaylorSeriesUpToOn_top_iff_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nN : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nhN : LE.le (↑Top.top) N\n⊢ Iff (HasFTaylorSeriesUpToOn N f p s) (And (∀ (x : E), Membership.mem s x → Eq (p x 0).curry0 (f x)) (And (∀ (x : E), Membership.mem s x → HasFDerivWithinAt (fun y => p y 0) (p x 1).curryLeft s x) (HasFTaylorSeriesUpToOn N (fun x => (continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) (fun x => (p x).shift) s)))","decl":"/-- `p` is a Taylor series of `f` up to `⊤` if and only if `p.shift` is a Taylor series up to `⊤`\nfor `p 1`, which is a derivative of `f`. -/\ntheorem hasFTaylorSeriesUpToOn_top_iff_right (hN : ∞ ≤ N) :\n    HasFTaylorSeriesUpToOn N f p s ↔\n      (∀ x ∈ s, (p x 0).curry0 = f x) ∧\n        (∀ x ∈ s, HasFDerivWithinAt (fun y => p y 0) (p x 1).curryLeft s x) ∧\n          HasFTaylorSeriesUpToOn N (fun x => continuousMultilinearCurryFin1 𝕜 E F (p x 1))\n            (fun x => (p x).shift) s := by\n  refine ⟨fun h ↦ ?_, fun h ↦ ?_⟩\n  · rw [hasFTaylorSeriesUpToOn_top_iff_add hN 1] at h\n    rw [hasFTaylorSeriesUpToOn_top_iff hN]\n    exact ⟨(hasFTaylorSeriesUpToOn_succ_nat_iff_right.1 (h 1)).1,\n      (hasFTaylorSeriesUpToOn_succ_nat_iff_right.1 (h 1)).2.1,\n      fun n ↦ (hasFTaylorSeriesUpToOn_succ_nat_iff_right.1 (h n)).2.2⟩\n  · apply (hasFTaylorSeriesUpToOn_top_iff_add hN 1).2 (fun n ↦ ?_)\n    rw [hasFTaylorSeriesUpToOn_succ_nat_iff_right]\n    exact ⟨h.1, h.2.1, (h.2.2).of_le (m := n) (natCast_le_of_coe_top_le_withTop hN n)⟩\n\n"}
{"name":"hasFTaylorSeriesUpToOn_succ_iff_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\n⊢ Iff (HasFTaylorSeriesUpToOn (HAdd.hAdd n 1) f p s) (And (∀ (x : E), Membership.mem s x → Eq (p x 0).curry0 (f x)) (And (∀ (x : E), Membership.mem s x → HasFDerivWithinAt (fun y => p y 0) (p x 1).curryLeft s x) (HasFTaylorSeriesUpToOn n (fun x => (continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) (fun x => (p x).shift) s)))","decl":"/-- `p` is a Taylor series of `f` up to `n+1` if and only if `p.shift` is a Taylor series up to `n`\nfor `p 1`, which is a derivative of `f`. Version for `n : WithTop ℕ∞`. -/\ntheorem hasFTaylorSeriesUpToOn_succ_iff_right :\n    HasFTaylorSeriesUpToOn (n + 1) f p s ↔\n      (∀ x ∈ s, (p x 0).curry0 = f x) ∧\n        (∀ x ∈ s, HasFDerivWithinAt (fun y => p y 0) (p x 1).curryLeft s x) ∧\n          HasFTaylorSeriesUpToOn n (fun x => continuousMultilinearCurryFin1 𝕜 E F (p x 1))\n            (fun x => (p x).shift) s := by\n  match n with\n  | ⊤ => exact hasFTaylorSeriesUpToOn_top_iff_right (by simp)\n  | (⊤ : ℕ∞) => exact hasFTaylorSeriesUpToOn_top_iff_right (by simp)\n  | (n : ℕ) => exact hasFTaylorSeriesUpToOn_succ_nat_iff_right\n\n"}
{"name":"iteratedFDerivWithin_zero_apply","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nm : Fin 0 → E\n⊢ Eq ((iteratedFDerivWithin 𝕜 0 f s x) m) (f x)","decl":"@[simp]\ntheorem iteratedFDerivWithin_zero_apply (m : Fin 0 → E) :\n    (iteratedFDerivWithin 𝕜 0 f s x : (Fin 0 → E) → F) m = f x :=\n  rfl\n\n"}
{"name":"iteratedFDerivWithin_zero_eq_comp","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\n⊢ Eq (iteratedFDerivWithin 𝕜 0 f s) (Function.comp (⇑(continuousMultilinearCurryFin0 𝕜 E F).symm) f)","decl":"theorem iteratedFDerivWithin_zero_eq_comp :\n    iteratedFDerivWithin 𝕜 0 f s = (continuousMultilinearCurryFin0 𝕜 E F).symm ∘ f :=\n  rfl\n\n"}
{"name":"dist_iteratedFDerivWithin_zero","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nx : E\ng : E → F\nt : Set E\ny : E\n⊢ Eq (Dist.dist (iteratedFDerivWithin 𝕜 0 f s x) (iteratedFDerivWithin 𝕜 0 g t y)) (Dist.dist (f x) (g y))","decl":"@[simp]\ntheorem dist_iteratedFDerivWithin_zero (f : E → F) (s : Set E) (x : E)\n    (g : E → F) (t : Set E) (y : E) :\n    dist (iteratedFDerivWithin 𝕜 0 f s x) (iteratedFDerivWithin 𝕜 0 g t y) = dist (f x) (g y) := by\n  simp only [iteratedFDerivWithin_zero_eq_comp, comp_apply, LinearIsometryEquiv.dist_map]\n\n"}
{"name":"norm_iteratedFDerivWithin_zero","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\n⊢ Eq (Norm.norm (iteratedFDerivWithin 𝕜 0 f s x)) (Norm.norm (f x))","decl":"@[simp]\ntheorem norm_iteratedFDerivWithin_zero : ‖iteratedFDerivWithin 𝕜 0 f s x‖ = ‖f x‖ := by\n  rw [iteratedFDerivWithin_zero_eq_comp, comp_apply, LinearIsometryEquiv.norm_map]\n\n"}
{"name":"iteratedFDerivWithin_succ_apply_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\nm : Fin (HAdd.hAdd n 1) → E\n⊢ Eq ((iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s x) m) (((fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s x) (m 0)) (Fin.tail m))","decl":"theorem iteratedFDerivWithin_succ_apply_left {n : ℕ} (m : Fin (n + 1) → E) :\n    (iteratedFDerivWithin 𝕜 (n + 1) f s x : (Fin (n + 1) → E) → F) m =\n      (fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s x : E → E[×n]→L[𝕜] F) (m 0) (tail m) :=\n  rfl\n\n"}
{"name":"iteratedFDerivWithin_succ_eq_comp_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\n⊢ Eq (iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s) (Function.comp (⇑(continuousMultilinearCurryLeftEquiv 𝕜 (fun x => E) F).symm) (fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s))","decl":"/-- Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv,\nand the derivative of the `n`-th derivative. -/\ntheorem iteratedFDerivWithin_succ_eq_comp_left {n : ℕ} :\n    iteratedFDerivWithin 𝕜 (n + 1) f s =\n      (continuousMultilinearCurryLeftEquiv 𝕜 (fun _ : Fin (n + 1) => E) F).symm ∘\n        fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s :=\n  rfl\n\n"}
{"name":"fderivWithin_iteratedFDerivWithin","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\ns : Set E\nn : Nat\n⊢ Eq (fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s) (Function.comp (⇑(continuousMultilinearCurryLeftEquiv 𝕜 (fun x => E) F)) (iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s))","decl":"theorem fderivWithin_iteratedFDerivWithin {s : Set E} {n : ℕ} :\n    fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s =\n      (continuousMultilinearCurryLeftEquiv 𝕜 (fun _ : Fin (n + 1) => E) F) ∘\n        iteratedFDerivWithin 𝕜 (n + 1) f s :=\n  rfl\n\n"}
{"name":"norm_fderivWithin_iteratedFDerivWithin","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\n⊢ Eq (Norm.norm (fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s x)) (Norm.norm (iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s x))","decl":"theorem norm_fderivWithin_iteratedFDerivWithin {n : ℕ} :\n    ‖fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n f s) s x‖ =\n      ‖iteratedFDerivWithin 𝕜 (n + 1) f s x‖ := by\n  -- Porting note: added `comp_apply`.\n  rw [iteratedFDerivWithin_succ_eq_comp_left, comp_apply, LinearIsometryEquiv.norm_map]\n\n"}
{"name":"dist_iteratedFDerivWithin_one","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns t : Set E\nx : E\nf g : E → F\ny : E\nhsx : UniqueDiffWithinAt 𝕜 s x\nhyt : UniqueDiffWithinAt 𝕜 t y\n⊢ Eq (Dist.dist (iteratedFDerivWithin 𝕜 1 f s x) (iteratedFDerivWithin 𝕜 1 g t y)) (Dist.dist (fderivWithin 𝕜 f s x) (fderivWithin 𝕜 g t y))","decl":"@[simp]\ntheorem dist_iteratedFDerivWithin_one (f g : E → F) {y}\n    (hsx : UniqueDiffWithinAt 𝕜 s x) (hyt : UniqueDiffWithinAt 𝕜 t y) :\n    dist (iteratedFDerivWithin 𝕜 1 f s x) (iteratedFDerivWithin 𝕜 1 g t y)\n      = dist (fderivWithin 𝕜 f s x) (fderivWithin 𝕜 g t y) := by\n  simp only [iteratedFDerivWithin_succ_eq_comp_left, comp_apply,\n    LinearIsometryEquiv.dist_map, iteratedFDerivWithin_zero_eq_comp,\n    LinearIsometryEquiv.comp_fderivWithin, hsx, hyt]\n  apply (continuousMultilinearCurryFin0 𝕜 E F).symm.toLinearIsometry.postcomp.dist_map\n\n"}
{"name":"norm_iteratedFDerivWithin_one","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nx : E\nf : E → F\nh : UniqueDiffWithinAt 𝕜 s x\n⊢ Eq (Norm.norm (iteratedFDerivWithin 𝕜 1 f s x)) (Norm.norm (fderivWithin 𝕜 f s x))","decl":"@[simp]\ntheorem norm_iteratedFDerivWithin_one (f : E → F) (h : UniqueDiffWithinAt 𝕜 s x) :\n    ‖iteratedFDerivWithin 𝕜 1 f s x‖ = ‖fderivWithin 𝕜 f s x‖ := by\n  simp only [← norm_fderivWithin_iteratedFDerivWithin,\n    iteratedFDerivWithin_zero_eq_comp, LinearIsometryEquiv.comp_fderivWithin _ h]\n  apply (continuousMultilinearCurryFin0 𝕜 E F).symm.toLinearIsometry.norm_toContinuousLinearMap_comp\n\n"}
{"name":"iteratedFDerivWithin_succ_apply_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\nhs : UniqueDiffOn 𝕜 s\nhx : Membership.mem s x\nm : Fin (HAdd.hAdd n 1) → E\n⊢ Eq ((iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s x) m) (((iteratedFDerivWithin 𝕜 n (fun y => fderivWithin 𝕜 f s y) s x) (Fin.init m)) (m (Fin.last n)))","decl":"theorem iteratedFDerivWithin_succ_apply_right {n : ℕ} (hs : UniqueDiffOn 𝕜 s) (hx : x ∈ s)\n    (m : Fin (n + 1) → E) :\n    (iteratedFDerivWithin 𝕜 (n + 1) f s x : (Fin (n + 1) → E) → F) m =\n      iteratedFDerivWithin 𝕜 n (fun y => fderivWithin 𝕜 f s y) s x (init m) (m (last n)) := by\n  induction' n with n IH generalizing x\n  · rw [iteratedFDerivWithin_succ_eq_comp_left, iteratedFDerivWithin_zero_eq_comp,\n      iteratedFDerivWithin_zero_apply, Function.comp_apply,\n      LinearIsometryEquiv.comp_fderivWithin _ (hs x hx)]\n    rfl\n  · let I := (continuousMultilinearCurryRightEquiv' 𝕜 n E F).symm\n    have A : ∀ y ∈ s, iteratedFDerivWithin 𝕜 n.succ f s y =\n        (I ∘ iteratedFDerivWithin 𝕜 n (fun y => fderivWithin 𝕜 f s y) s) y := fun y hy ↦ by\n      ext m\n      rw [@IH y hy m]\n      rfl\n    calc\n      (iteratedFDerivWithin 𝕜 (n + 2) f s x : (Fin (n + 2) → E) → F) m =\n          (fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n.succ f s) s x : E → E[×n + 1]→L[𝕜] F) (m 0)\n            (tail m) :=\n        rfl\n      _ = (fderivWithin 𝕜 (I ∘ iteratedFDerivWithin 𝕜 n (fderivWithin 𝕜 f s) s) s x :\n              E → E[×n + 1]→L[𝕜] F) (m 0) (tail m) := by\n        rw [fderivWithin_congr A (A x hx)]\n      _ = (I ∘ fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n (fderivWithin 𝕜 f s) s) s x :\n              E → E[×n + 1]→L[𝕜] F) (m 0) (tail m) := by\n        #adaptation_note /-- https://github.com/leanprover/lean4/pull/4119\n        we need to either use\n        `set_option maxSynthPendingDepth 2 in`\n        or fill in an explicit argument as\n        ```\n        simp only [LinearIsometryEquiv.comp_fderivWithin _\n          (f := iteratedFDerivWithin 𝕜 n (fderivWithin 𝕜 f s) s) (hs x hx)]\n        ```\n        -/\n        set_option maxSynthPendingDepth 2 in\n          simp only [LinearIsometryEquiv.comp_fderivWithin _ (hs x hx)]\n        rfl\n      _ = (fderivWithin 𝕜 (iteratedFDerivWithin 𝕜 n (fun y => fderivWithin 𝕜 f s y) s) s x :\n              E → E[×n]→L[𝕜] E →L[𝕜] F) (m 0) (init (tail m)) ((tail m) (last n)) := rfl\n      _ = iteratedFDerivWithin 𝕜 (Nat.succ n) (fun y => fderivWithin 𝕜 f s y) s x (init m)\n            (m (last (n + 1))) := by\n        rw [iteratedFDerivWithin_succ_apply_left, tail_init_eq_init_tail]\n        rfl\n\n"}
{"name":"iteratedFDerivWithin_succ_eq_comp_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\nhs : UniqueDiffOn 𝕜 s\nhx : Membership.mem s x\n⊢ Eq (iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s x) (Function.comp (⇑(continuousMultilinearCurryRightEquiv' 𝕜 n E F).symm) (iteratedFDerivWithin 𝕜 n (fun y => fderivWithin 𝕜 f s y) s) x)","decl":"/-- Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv,\nand the `n`-th derivative of the derivative. -/\ntheorem iteratedFDerivWithin_succ_eq_comp_right {n : ℕ} (hs : UniqueDiffOn 𝕜 s) (hx : x ∈ s) :\n    iteratedFDerivWithin 𝕜 (n + 1) f s x =\n      ((continuousMultilinearCurryRightEquiv' 𝕜 n E F).symm ∘\n          iteratedFDerivWithin 𝕜 n (fun y => fderivWithin 𝕜 f s y) s)\n        x := by\n  ext m; rw [iteratedFDerivWithin_succ_apply_right hs hx]; rfl\n\n"}
{"name":"norm_iteratedFDerivWithin_fderivWithin","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\nhs : UniqueDiffOn 𝕜 s\nhx : Membership.mem s x\n⊢ Eq (Norm.norm (iteratedFDerivWithin 𝕜 n (fderivWithin 𝕜 f s) s x)) (Norm.norm (iteratedFDerivWithin 𝕜 (HAdd.hAdd n 1) f s x))","decl":"theorem norm_iteratedFDerivWithin_fderivWithin {n : ℕ} (hs : UniqueDiffOn 𝕜 s) (hx : x ∈ s) :\n    ‖iteratedFDerivWithin 𝕜 n (fderivWithin 𝕜 f s) s x‖ =\n      ‖iteratedFDerivWithin 𝕜 (n + 1) f s x‖ := by\n  -- Porting note: added `comp_apply`.\n  rw [iteratedFDerivWithin_succ_eq_comp_right hs hx, comp_apply, LinearIsometryEquiv.norm_map]\n\n"}
{"name":"iteratedFDerivWithin_one_apply","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nh : UniqueDiffWithinAt 𝕜 s x\nm : Fin 1 → E\n⊢ Eq ((iteratedFDerivWithin 𝕜 1 f s x) m) ((fderivWithin 𝕜 f s x) (m 0))","decl":"@[simp]\ntheorem iteratedFDerivWithin_one_apply (h : UniqueDiffWithinAt 𝕜 s x) (m : Fin 1 → E) :\n    iteratedFDerivWithin 𝕜 1 f s x m = fderivWithin 𝕜 f s x (m 0) := by\n  simp only [iteratedFDerivWithin_succ_apply_left, iteratedFDerivWithin_zero_eq_comp,\n    (continuousMultilinearCurryFin0 𝕜 E F).symm.comp_fderivWithin h]\n  rfl\n\n"}
{"name":"iteratedFDerivWithin_two_apply","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nz : E\nhs : UniqueDiffOn 𝕜 s\nhz : Membership.mem s z\nm : Fin 2 → E\n⊢ Eq ((iteratedFDerivWithin 𝕜 2 f s z) m) (((fderivWithin 𝕜 (fderivWithin 𝕜 f s) s z) (m 0)) (m 1))","decl":"/-- On a set of unique differentiability, the second derivative is obtained by taking the\nderivative of the derivative. -/\nlemma iteratedFDerivWithin_two_apply (f : E → F) {z : E} (hs : UniqueDiffOn 𝕜 s) (hz : z ∈ s)\n    (m : Fin 2 → E) :\n    iteratedFDerivWithin 𝕜 2 f s z m = fderivWithin 𝕜 (fderivWithin 𝕜 f s) s z (m 0) (m 1) := by\n  simp only [iteratedFDerivWithin_succ_apply_right hs hz]\n  rfl\n\n"}
{"name":"iteratedFDerivWithin_two_apply'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nz : E\nhs : UniqueDiffOn 𝕜 s\nhz : Membership.mem s z\nv w : E\n⊢ Eq ((iteratedFDerivWithin 𝕜 2 f s z) (Matrix.vecCons v (Matrix.vecCons w Matrix.vecEmpty))) (((fderivWithin 𝕜 (fderivWithin 𝕜 f s) s z) v) w)","decl":"/-- On a set of unique differentiability, the second derivative is obtained by taking the\nderivative of the derivative. -/\nlemma iteratedFDerivWithin_two_apply' (f : E → F) {z : E} (hs : UniqueDiffOn 𝕜 s) (hz : z ∈ s)\n    (v w : E) :\n    iteratedFDerivWithin 𝕜 2 f s z ![v, w] = fderivWithin 𝕜 (fderivWithin 𝕜 f s) s z v w :=\n  iteratedFDerivWithin_two_apply f hs hz _\n\n"}
{"name":"Filter.EventuallyEq.iteratedFDerivWithin'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns t : Set E\nf f₁ : E → F\nx : E\nh : (nhdsWithin x s).EventuallyEq f₁ f\nht : HasSubset.Subset t s\nn : Nat\n⊢ (nhdsWithin x s).EventuallyEq (iteratedFDerivWithin 𝕜 n f₁ t) (iteratedFDerivWithin 𝕜 n f t)","decl":"theorem Filter.EventuallyEq.iteratedFDerivWithin' (h : f₁ =ᶠ[𝓝[s] x] f) (ht : t ⊆ s) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f₁ t =ᶠ[𝓝[s] x] iteratedFDerivWithin 𝕜 n f t := by\n  induction n with\n  | zero => exact h.mono fun y hy => DFunLike.ext _ _ fun _ => hy\n  | succ n ihn =>\n    have : fderivWithin 𝕜 _ t =ᶠ[𝓝[s] x] fderivWithin 𝕜 _ t := ihn.fderivWithin' ht\n    refine this.mono fun y hy => ?_\n    simp only [iteratedFDerivWithin_succ_eq_comp_left, hy, (· ∘ ·)]\n\n"}
{"name":"Filter.EventuallyEq.iteratedFDerivWithin","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf f₁ : E → F\nx : E\nh : (nhdsWithin x s).EventuallyEq f₁ f\nn : Nat\n⊢ (nhdsWithin x s).EventuallyEq (iteratedFDerivWithin 𝕜 n f₁ s) (iteratedFDerivWithin 𝕜 n f s)","decl":"protected theorem Filter.EventuallyEq.iteratedFDerivWithin (h : f₁ =ᶠ[𝓝[s] x] f) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f₁ s =ᶠ[𝓝[s] x] iteratedFDerivWithin 𝕜 n f s :=\n  h.iteratedFDerivWithin' Subset.rfl n\n\n"}
{"name":"Filter.EventuallyEq.iteratedFDerivWithin_eq","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf f₁ : E → F\nx : E\nh : (nhdsWithin x s).EventuallyEq f₁ f\nhx : Eq (f₁ x) (f x)\nn : Nat\n⊢ Eq (iteratedFDerivWithin 𝕜 n f₁ s x) (iteratedFDerivWithin 𝕜 n f s x)","decl":"/-- If two functions coincide in a neighborhood of `x` within a set `s` and at `x`, then their\niterated differentials within this set at `x` coincide. -/\ntheorem Filter.EventuallyEq.iteratedFDerivWithin_eq (h : f₁ =ᶠ[𝓝[s] x] f) (hx : f₁ x = f x)\n    (n : ℕ) : iteratedFDerivWithin 𝕜 n f₁ s x = iteratedFDerivWithin 𝕜 n f s x :=\n  have : f₁ =ᶠ[𝓝[insert x s] x] f := by simpa [EventuallyEq, hx]\n  (this.iteratedFDerivWithin' (subset_insert _ _) n).self_of_nhdsWithin (mem_insert _ _)\n\n"}
{"name":"iteratedFDerivWithin_congr","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf f₁ : E → F\nx : E\nhs : Set.EqOn f₁ f s\nhx : Membership.mem s x\nn : Nat\n⊢ Eq (iteratedFDerivWithin 𝕜 n f₁ s x) (iteratedFDerivWithin 𝕜 n f s x)","decl":"/-- If two functions coincide on a set `s`, then their iterated differentials within this set\ncoincide. See also `Filter.EventuallyEq.iteratedFDerivWithin_eq` and\n`Filter.EventuallyEq.iteratedFDerivWithin`. -/\ntheorem iteratedFDerivWithin_congr (hs : EqOn f₁ f s) (hx : x ∈ s) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f₁ s x = iteratedFDerivWithin 𝕜 n f s x :=\n  (hs.eventuallyEq.filter_mono inf_le_right).iteratedFDerivWithin_eq (hs hx) _\n\n"}
{"name":"Set.EqOn.iteratedFDerivWithin","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf f₁ : E → F\nhs : Set.EqOn f₁ f s\nn : Nat\n⊢ Set.EqOn (iteratedFDerivWithin 𝕜 n f₁ s) (iteratedFDerivWithin 𝕜 n f s) s","decl":"/-- If two functions coincide on a set `s`, then their iterated differentials within this set\ncoincide. See also `Filter.EventuallyEq.iteratedFDerivWithin_eq` and\n`Filter.EventuallyEq.iteratedFDerivWithin`. -/\nprotected theorem Set.EqOn.iteratedFDerivWithin (hs : EqOn f₁ f s) (n : ℕ) :\n    EqOn (iteratedFDerivWithin 𝕜 n f₁ s) (iteratedFDerivWithin 𝕜 n f s) s := fun _x hx =>\n  iteratedFDerivWithin_congr hs hx n\n\n"}
{"name":"iteratedFDerivWithin_eventually_congr_set'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns t : Set E\nf : E → F\nx y : E\nh : (nhdsWithin x (HasCompl.compl (Singleton.singleton y))).EventuallyEq s t\nn : Nat\n⊢ (nhds x).EventuallyEq (iteratedFDerivWithin 𝕜 n f s) (iteratedFDerivWithin 𝕜 n f t)","decl":"theorem iteratedFDerivWithin_eventually_congr_set' (y : E) (h : s =ᶠ[𝓝[{y}ᶜ] x] t) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f s =ᶠ[𝓝 x] iteratedFDerivWithin 𝕜 n f t := by\n  induction n generalizing x with\n  | zero => rfl\n  | succ n ihn =>\n    refine (eventually_nhds_nhdsWithin.2 h).mono fun y hy => ?_\n    simp only [iteratedFDerivWithin_succ_eq_comp_left, (· ∘ ·)]\n    rw [(ihn hy).fderivWithin_eq_nhds, fderivWithin_congr_set' _ hy]\n\n"}
{"name":"iteratedFDerivWithin_eventually_congr_set","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns t : Set E\nf : E → F\nx : E\nh : (nhds x).EventuallyEq s t\nn : Nat\n⊢ (nhds x).EventuallyEq (iteratedFDerivWithin 𝕜 n f s) (iteratedFDerivWithin 𝕜 n f t)","decl":"theorem iteratedFDerivWithin_eventually_congr_set (h : s =ᶠ[𝓝 x] t) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f s =ᶠ[𝓝 x] iteratedFDerivWithin 𝕜 n f t :=\n  iteratedFDerivWithin_eventually_congr_set' x (h.filter_mono inf_le_left) n\n\n"}
{"name":"iteratedFDerivWithin_congr_set'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns t : Set E\nf : E → F\nx y : E\nh : (nhdsWithin x (HasCompl.compl (Singleton.singleton y))).EventuallyEq s t\nn : Nat\n⊢ Eq (iteratedFDerivWithin 𝕜 n f s x) (iteratedFDerivWithin 𝕜 n f t x)","decl":"/-- If two sets coincide in a punctured neighborhood of `x`,\nthen the corresponding iterated derivatives are equal.\n\nNote that we also allow to puncture the neighborhood of `x` at `y`.\nIf `y ≠ x`, then this is a no-op. -/\ntheorem iteratedFDerivWithin_congr_set' {y} (h : s =ᶠ[𝓝[{y}ᶜ] x] t) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f s x = iteratedFDerivWithin 𝕜 n f t x :=\n  (iteratedFDerivWithin_eventually_congr_set' y h n).self_of_nhds\n\n"}
{"name":"iteratedFDerivWithin_insert","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\ny : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n f (Insert.insert x s) y) (iteratedFDerivWithin 𝕜 n f s y)","decl":"@[simp]\ntheorem iteratedFDerivWithin_insert {n y} :\n    iteratedFDerivWithin 𝕜 n f (insert x s) y = iteratedFDerivWithin 𝕜 n f s y :=\n  iteratedFDerivWithin_congr_set' (y := x)\n    (eventually_mem_nhdsWithin.mono <| by intros; simp_all).set_eq _\n\n"}
{"name":"iteratedFDerivWithin_congr_set","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns t : Set E\nf : E → F\nx : E\nh : (nhds x).EventuallyEq s t\nn : Nat\n⊢ Eq (iteratedFDerivWithin 𝕜 n f s x) (iteratedFDerivWithin 𝕜 n f t x)","decl":"theorem iteratedFDerivWithin_congr_set (h : s =ᶠ[𝓝 x] t) (n : ℕ) :\n    iteratedFDerivWithin 𝕜 n f s x = iteratedFDerivWithin 𝕜 n f t x :=\n  (iteratedFDerivWithin_eventually_congr_set h n).self_of_nhds\n\n"}
{"name":"ftaylorSeriesWithin_insert","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\n⊢ Eq (ftaylorSeriesWithin 𝕜 f (Insert.insert x s)) (ftaylorSeriesWithin 𝕜 f s)","decl":"@[simp]\ntheorem ftaylorSeriesWithin_insert :\n    ftaylorSeriesWithin 𝕜 f (insert x s) = ftaylorSeriesWithin 𝕜 f s := by\n  ext y n : 2\n  apply iteratedFDerivWithin_insert\n\n"}
{"name":"iteratedFDerivWithin_inter'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns u : Set E\nf : E → F\nx : E\nn : Nat\nhu : Membership.mem (nhdsWithin x s) u\n⊢ Eq (iteratedFDerivWithin 𝕜 n f (Inter.inter s u) x) (iteratedFDerivWithin 𝕜 n f s x)","decl":"/-- The iterated differential within a set `s` at a point `x` is not modified if one intersects\n`s` with a neighborhood of `x` within `s`. -/\ntheorem iteratedFDerivWithin_inter' {n : ℕ} (hu : u ∈ 𝓝[s] x) :\n    iteratedFDerivWithin 𝕜 n f (s ∩ u) x = iteratedFDerivWithin 𝕜 n f s x :=\n  iteratedFDerivWithin_congr_set (nhdsWithin_eq_iff_eventuallyEq.1 <| nhdsWithin_inter_of_mem' hu) _\n\n"}
{"name":"iteratedFDerivWithin_inter","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns u : Set E\nf : E → F\nx : E\nn : Nat\nhu : Membership.mem (nhds x) u\n⊢ Eq (iteratedFDerivWithin 𝕜 n f (Inter.inter s u) x) (iteratedFDerivWithin 𝕜 n f s x)","decl":"/-- The iterated differential within a set `s` at a point `x` is not modified if one intersects\n`s` with a neighborhood of `x`. -/\ntheorem iteratedFDerivWithin_inter {n : ℕ} (hu : u ∈ 𝓝 x) :\n    iteratedFDerivWithin 𝕜 n f (s ∩ u) x = iteratedFDerivWithin 𝕜 n f s x :=\n  iteratedFDerivWithin_inter' (mem_nhdsWithin_of_mem_nhds hu)\n\n"}
{"name":"iteratedFDerivWithin_inter_open","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns u : Set E\nf : E → F\nx : E\nn : Nat\nhu : IsOpen u\nhx : Membership.mem u x\n⊢ Eq (iteratedFDerivWithin 𝕜 n f (Inter.inter s u) x) (iteratedFDerivWithin 𝕜 n f s x)","decl":"/-- The iterated differential within a set `s` at a point `x` is not modified if one intersects\n`s` with an open set containing `x`. -/\ntheorem iteratedFDerivWithin_inter_open {n : ℕ} (hu : IsOpen u) (hx : x ∈ u) :\n    iteratedFDerivWithin 𝕜 n f (s ∩ u) x = iteratedFDerivWithin 𝕜 n f s x :=\n  iteratedFDerivWithin_inter (hu.mem_nhds hx)\n\n"}
{"name":"HasFTaylorSeriesUpToOn.eq_iteratedFDerivWithin_of_uniqueDiffOn","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpToOn n f p s\nm : Nat\nhmn : LE.le (↑m) n\nhs : UniqueDiffOn 𝕜 s\nhx : Membership.mem s x\n⊢ Eq (p x m) (iteratedFDerivWithin 𝕜 m f s x)","decl":"/-- On a set with unique differentiability, any choice of iterated differential has to coincide\nwith the one we have chosen in `iteratedFDerivWithin 𝕜 m f s`. -/\ntheorem HasFTaylorSeriesUpToOn.eq_iteratedFDerivWithin_of_uniqueDiffOn\n    (h : HasFTaylorSeriesUpToOn n f p s) {m : ℕ} (hmn : m ≤ n) (hs : UniqueDiffOn 𝕜 s)\n    (hx : x ∈ s) : p x m = iteratedFDerivWithin 𝕜 m f s x := by\n  induction' m with m IH generalizing x\n  · rw [h.zero_eq' hx, iteratedFDerivWithin_zero_eq_comp]; rfl\n  · have A : m < n := lt_of_lt_of_le (mod_cast lt_add_one m) hmn\n    have :\n      HasFDerivWithinAt (fun y : E => iteratedFDerivWithin 𝕜 m f s y)\n        (ContinuousMultilinearMap.curryLeft (p x (Nat.succ m))) s x :=\n      (h.fderivWithin m A x hx).congr (fun y hy => (IH (le_of_lt A) hy).symm)\n        (IH (le_of_lt A) hx).symm\n    rw [iteratedFDerivWithin_succ_eq_comp_left, Function.comp_apply, this.fderivWithin (hs x hx)]\n    exact (ContinuousMultilinearMap.uncurry_curryLeft _).symm\n\n"}
{"name":"iteratedFDerivWithin_comp_add_left'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\na : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n (fun z => f (HAdd.hAdd a z)) s) fun x => iteratedFDerivWithin 𝕜 n f (HVAdd.hVAdd a s) (HAdd.hAdd a x)","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the left. -/\nlemma iteratedFDerivWithin_comp_add_left' (n : ℕ) (a : E) :\n    iteratedFDerivWithin 𝕜 n (fun z ↦ f (a + z)) s =\n      fun x ↦ iteratedFDerivWithin 𝕜 n f (a +ᵥ s) (a + x) := by\n  induction n with\n  | zero => simp [iteratedFDerivWithin]\n  | succ n IH =>\n    ext v\n    rw [iteratedFDerivWithin_succ_eq_comp_left, iteratedFDerivWithin_succ_eq_comp_left]\n    simp only [Nat.succ_eq_add_one, IH, comp_apply, continuousMultilinearCurryLeftEquiv_symm_apply]\n    congr 2\n    rw [fderivWithin_comp_add_left]\n\n"}
{"name":"iteratedFDerivWithin_comp_add_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\na x : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n (fun z => f (HAdd.hAdd a z)) s x) (iteratedFDerivWithin 𝕜 n f (HVAdd.hVAdd a s) (HAdd.hAdd a x))","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the left. -/\nlemma iteratedFDerivWithin_comp_add_left (n : ℕ) (a : E) (x : E) :\n    iteratedFDerivWithin 𝕜 n (fun z ↦ f (a + z)) s x =\n      iteratedFDerivWithin 𝕜 n f (a +ᵥ s) (a + x) := by\n  simp [iteratedFDerivWithin_comp_add_left']\n\n"}
{"name":"iteratedFDerivWithin_comp_add_right'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\na : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n (fun z => f (HAdd.hAdd z a)) s) fun x => iteratedFDerivWithin 𝕜 n f (HVAdd.hVAdd a s) (HAdd.hAdd x a)","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the right. -/\nlemma iteratedFDerivWithin_comp_add_right' (n : ℕ) (a : E) :\n    iteratedFDerivWithin 𝕜 n (fun z ↦ f (z + a)) s =\n      fun x ↦ iteratedFDerivWithin 𝕜 n f (a +ᵥ s) (x + a) := by\n  simpa [add_comm a] using iteratedFDerivWithin_comp_add_left' n a\n\n"}
{"name":"iteratedFDerivWithin_comp_add_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\na x : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n (fun z => f (HAdd.hAdd z a)) s x) (iteratedFDerivWithin 𝕜 n f (HVAdd.hVAdd a s) (HAdd.hAdd x a))","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the right. -/\nlemma iteratedFDerivWithin_comp_add_right (n : ℕ) (a : E) (x : E) :\n    iteratedFDerivWithin 𝕜 n (fun z ↦ f (z + a)) s x =\n      iteratedFDerivWithin 𝕜 n f (a +ᵥ s) (x + a) := by\n  simp [iteratedFDerivWithin_comp_add_right']\n\n"}
{"name":"iteratedFDerivWithin_comp_sub'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\na : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n (fun z => f (HSub.hSub z a)) s) fun x => iteratedFDerivWithin 𝕜 n f (HVAdd.hVAdd (Neg.neg a) s) (HSub.hSub x a)","decl":"/-- The iterated derivative commutes with subtracting a constant. -/\nlemma iteratedFDerivWithin_comp_sub' (n : ℕ) (a : E) :\n    iteratedFDerivWithin 𝕜 n (fun z ↦ f (z - a)) s =\n      fun x ↦ iteratedFDerivWithin 𝕜 n f (-a +ᵥ s) (x - a) := by\n  simpa [sub_eq_add_neg] using iteratedFDerivWithin_comp_add_right' n (-a)\n\n"}
{"name":"iteratedFDerivWithin_comp_sub","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nx : E\nn : Nat\na : E\n⊢ Eq (iteratedFDerivWithin 𝕜 n (fun z => f (HSub.hSub z a)) s x) (iteratedFDerivWithin 𝕜 n f (HVAdd.hVAdd (Neg.neg a) s) (HSub.hSub x a))","decl":"/-- The iterated derivative commutes with subtracting a constant. -/\nlemma iteratedFDerivWithin_comp_sub (n : ℕ) (a : E) :\n    iteratedFDerivWithin 𝕜 n (fun z ↦ f (z - a)) s x =\n      iteratedFDerivWithin 𝕜 n f (-a +ᵥ s) (x - a) := by\n  simp [iteratedFDerivWithin_comp_sub']\n\n"}
{"name":"HasFTaylorSeriesUpTo.cont","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nn : WithTop ENat\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nself : HasFTaylorSeriesUpTo n f p\nm : Nat\na✝ : LE.le (↑m) n\n⊢ Continuous fun x => p x m","decl":"/-- `HasFTaylorSeriesUpTo n f p` registers the fact that `p 0 = f` and `p (m+1)` is a\nderivative of `p m` for `m < n`, and is continuous for `m ≤ n`. This is a predicate analogous to\n`HasFDerivAt` but for higher order derivatives.\n\nNotice that `p` does not sum up to `f` on the diagonal (`FormalMultilinearSeries.sum`), even if\n`f` is analytic and `n = ∞`: an addition `1/m!` factor on the `m`th term is necessary for that. -/\nstructure HasFTaylorSeriesUpTo\n  (n : WithTop ℕ∞) (f : E → F) (p : E → FormalMultilinearSeries 𝕜 E F) : Prop where\n  zero_eq : ∀ x, (p x 0).curry0 = f x\n  fderiv : ∀ m : ℕ, m < n → ∀ x, HasFDerivAt (fun y => p y m) (p x m.succ).curryLeft x\n  cont : ∀ m : ℕ, m ≤ n → Continuous fun x => p x m\n\n"}
{"name":"HasFTaylorSeriesUpTo.zero_eq","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nn : WithTop ENat\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nself : HasFTaylorSeriesUpTo n f p\nx : E\n⊢ Eq (p x 0).curry0 (f x)","decl":"/-- `HasFTaylorSeriesUpTo n f p` registers the fact that `p 0 = f` and `p (m+1)` is a\nderivative of `p m` for `m < n`, and is continuous for `m ≤ n`. This is a predicate analogous to\n`HasFDerivAt` but for higher order derivatives.\n\nNotice that `p` does not sum up to `f` on the diagonal (`FormalMultilinearSeries.sum`), even if\n`f` is analytic and `n = ∞`: an addition `1/m!` factor on the `m`th term is necessary for that. -/\nstructure HasFTaylorSeriesUpTo\n  (n : WithTop ℕ∞) (f : E → F) (p : E → FormalMultilinearSeries 𝕜 E F) : Prop where\n  zero_eq : ∀ x, (p x 0).curry0 = f x\n  fderiv : ∀ m : ℕ, m < n → ∀ x, HasFDerivAt (fun y => p y m) (p x m.succ).curryLeft x\n  cont : ∀ m : ℕ, m ≤ n → Continuous fun x => p x m\n\n"}
{"name":"HasFTaylorSeriesUpTo.fderiv","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nn : WithTop ENat\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nself : HasFTaylorSeriesUpTo n f p\nm : Nat\na✝ : LT.lt (↑m) n\nx : E\n⊢ HasFDerivAt (fun y => p y m) (p x m.succ).curryLeft x","decl":"/-- `HasFTaylorSeriesUpTo n f p` registers the fact that `p 0 = f` and `p (m+1)` is a\nderivative of `p m` for `m < n`, and is continuous for `m ≤ n`. This is a predicate analogous to\n`HasFDerivAt` but for higher order derivatives.\n\nNotice that `p` does not sum up to `f` on the diagonal (`FormalMultilinearSeries.sum`), even if\n`f` is analytic and `n = ∞`: an addition `1/m!` factor on the `m`th term is necessary for that. -/\nstructure HasFTaylorSeriesUpTo\n  (n : WithTop ℕ∞) (f : E → F) (p : E → FormalMultilinearSeries 𝕜 E F) : Prop where\n  zero_eq : ∀ x, (p x 0).curry0 = f x\n  fderiv : ∀ m : ℕ, m < n → ∀ x, HasFDerivAt (fun y => p y m) (p x m.succ).curryLeft x\n  cont : ∀ m : ℕ, m ≤ n → Continuous fun x => p x m\n\n"}
{"name":"HasFTaylorSeriesUpTo.zero_eq'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\nx : E\n⊢ Eq (p x 0) ((continuousMultilinearCurryFin0 𝕜 E F).symm (f x))","decl":"theorem HasFTaylorSeriesUpTo.zero_eq' (h : HasFTaylorSeriesUpTo n f p) (x : E) :\n    p x 0 = (continuousMultilinearCurryFin0 𝕜 E F).symm (f x) := by\n  rw [← h.zero_eq x]\n  exact (p x 0).uncurry0_curry0.symm\n\n"}
{"name":"hasFTaylorSeriesUpToOn_univ_iff","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\n⊢ Iff (HasFTaylorSeriesUpToOn n f p Set.univ) (HasFTaylorSeriesUpTo n f p)","decl":"theorem hasFTaylorSeriesUpToOn_univ_iff :\n    HasFTaylorSeriesUpToOn n f p univ ↔ HasFTaylorSeriesUpTo n f p := by\n  constructor\n  · intro H\n    constructor\n    · exact fun x => H.zero_eq x (mem_univ x)\n    · intro m hm x\n      rw [← hasFDerivWithinAt_univ]\n      exact H.fderivWithin m hm x (mem_univ x)\n    · intro m hm\n      rw [continuous_iff_continuousOn_univ]\n      exact H.cont m hm\n  · intro H\n    constructor\n    · exact fun x _ => H.zero_eq x\n    · intro m hm x _\n      rw [hasFDerivWithinAt_univ]\n      exact H.fderiv m hm x\n    · intro m hm\n      rw [← continuous_iff_continuousOn_univ]\n      exact H.cont m hm\n\n"}
{"name":"HasFTaylorSeriesUpTo.hasFTaylorSeriesUpToOn","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\ns : Set E\n⊢ HasFTaylorSeriesUpToOn n f p s","decl":"theorem HasFTaylorSeriesUpTo.hasFTaylorSeriesUpToOn (h : HasFTaylorSeriesUpTo n f p) (s : Set E) :\n    HasFTaylorSeriesUpToOn n f p s :=\n  (hasFTaylorSeriesUpToOn_univ_iff.2 h).mono (subset_univ _)\n\n"}
{"name":"HasFTaylorSeriesUpTo.of_le","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nm n : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\nhmn : LE.le m n\n⊢ HasFTaylorSeriesUpTo m f p","decl":"theorem HasFTaylorSeriesUpTo.of_le (h : HasFTaylorSeriesUpTo n f p) (hmn : m ≤ n) :\n    HasFTaylorSeriesUpTo m f p := by\n  rw [← hasFTaylorSeriesUpToOn_univ_iff] at h ⊢; exact h.of_le hmn\n\n"}
{"name":"HasFTaylorSeriesUpTo.ofLe","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nm n : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\nhmn : LE.le m n\n⊢ HasFTaylorSeriesUpTo m f p","decl":"@[deprecated (since := \"2024-11-07\")]\nalias HasFTaylorSeriesUpTo.ofLe := HasFTaylorSeriesUpTo.of_le\n\n"}
{"name":"HasFTaylorSeriesUpTo.continuous","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\n⊢ Continuous f","decl":"theorem HasFTaylorSeriesUpTo.continuous (h : HasFTaylorSeriesUpTo n f p) : Continuous f := by\n  rw [← hasFTaylorSeriesUpToOn_univ_iff] at h\n  rw [continuous_iff_continuousOn_univ]\n  exact h.continuousOn\n\n"}
{"name":"hasFTaylorSeriesUpTo_zero_iff","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\n⊢ Iff (HasFTaylorSeriesUpTo 0 f p) (And (Continuous f) (∀ (x : E), Eq (p x 0).curry0 (f x)))","decl":"theorem hasFTaylorSeriesUpTo_zero_iff :\n    HasFTaylorSeriesUpTo 0 f p ↔ Continuous f ∧ ∀ x, (p x 0).curry0 = f x := by\n  simp [hasFTaylorSeriesUpToOn_univ_iff.symm, continuous_iff_continuousOn_univ,\n    hasFTaylorSeriesUpToOn_zero_iff]\n\n"}
{"name":"hasFTaylorSeriesUpTo_top_iff","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nN : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nhN : LE.le (↑Top.top) N\n⊢ Iff (HasFTaylorSeriesUpTo N f p) (∀ (n : Nat), HasFTaylorSeriesUpTo (↑n) f p)","decl":"theorem hasFTaylorSeriesUpTo_top_iff (hN : ∞ ≤ N) :\n    HasFTaylorSeriesUpTo N f p ↔ ∀ n : ℕ, HasFTaylorSeriesUpTo n f p := by\n  simp only [← hasFTaylorSeriesUpToOn_univ_iff, hasFTaylorSeriesUpToOn_top_iff hN]\n\n"}
{"name":"hasFTaylorSeriesUpTo_top_iff'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nN : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nhN : LE.le (↑Top.top) N\n⊢ Iff (HasFTaylorSeriesUpTo N f p) (And (∀ (x : E), Eq (p x 0).curry0 (f x)) (∀ (m : Nat) (x : E), HasFDerivAt (fun y => p y m) (p x m.succ).curryLeft x))","decl":"/-- In the case that `n = ∞` we don't need the continuity assumption in\n`HasFTaylorSeriesUpTo`. -/\ntheorem hasFTaylorSeriesUpTo_top_iff' (hN : ∞ ≤ N) :\n    HasFTaylorSeriesUpTo N f p ↔\n      (∀ x, (p x 0).curry0 = f x) ∧\n        ∀ (m : ℕ) (x), HasFDerivAt (fun y => p y m) (p x m.succ).curryLeft x := by\n  simp only [← hasFTaylorSeriesUpToOn_univ_iff, hasFTaylorSeriesUpToOn_top_iff' hN, mem_univ,\n    forall_true_left, hasFDerivWithinAt_univ]\n\n"}
{"name":"HasFTaylorSeriesUpTo.hasFDerivAt","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\nhn : LE.le 1 n\nx : E\n⊢ HasFDerivAt f ((continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) x","decl":"/-- If a function has a Taylor series at order at least `1`, then the term of order `1` of this\nseries is a derivative of `f`. -/\ntheorem HasFTaylorSeriesUpTo.hasFDerivAt (h : HasFTaylorSeriesUpTo n f p) (hn : 1 ≤ n) (x : E) :\n    HasFDerivAt f (continuousMultilinearCurryFin1 𝕜 E F (p x 1)) x := by\n  rw [← hasFDerivWithinAt_univ]\n  exact (hasFTaylorSeriesUpToOn_univ_iff.2 h).hasFDerivWithinAt hn (mem_univ _)\n\n"}
{"name":"HasFTaylorSeriesUpTo.differentiable","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\nhn : LE.le 1 n\n⊢ Differentiable 𝕜 f","decl":"theorem HasFTaylorSeriesUpTo.differentiable (h : HasFTaylorSeriesUpTo n f p) (hn : 1 ≤ n) :\n    Differentiable 𝕜 f := fun x => (h.hasFDerivAt hn x).differentiableAt\n\n"}
{"name":"hasFTaylorSeriesUpTo_succ_nat_iff_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Iff (HasFTaylorSeriesUpTo (↑(HAdd.hAdd n 1)) f p) (And (∀ (x : E), Eq (p x 0).curry0 (f x)) (And (∀ (x : E), HasFDerivAt (fun y => p y 0) (p x 1).curryLeft x) (HasFTaylorSeriesUpTo (↑n) (fun x => (continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) fun x => (p x).shift)))","decl":"/-- `p` is a Taylor series of `f` up to `n+1` if and only if `p.shift` is a Taylor series up to `n`\nfor `p 1`, which is a derivative of `f`. -/\ntheorem hasFTaylorSeriesUpTo_succ_nat_iff_right {n : ℕ} :\n    HasFTaylorSeriesUpTo (n + 1 : ℕ) f p ↔\n      (∀ x, (p x 0).curry0 = f x) ∧\n        (∀ x, HasFDerivAt (fun y => p y 0) (p x 1).curryLeft x) ∧\n          HasFTaylorSeriesUpTo n (fun x => continuousMultilinearCurryFin1 𝕜 E F (p x 1)) fun x =>\n            (p x).shift := by\n  simp only [hasFTaylorSeriesUpToOn_succ_nat_iff_right, ← hasFTaylorSeriesUpToOn_univ_iff, mem_univ,\n    forall_true_left, hasFDerivWithinAt_univ]\n\n"}
{"name":"hasFTaylorSeriesUpTo_succ_iff_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\np : E → FormalMultilinearSeries 𝕜 E F\nn : Nat\n⊢ Iff (HasFTaylorSeriesUpTo (↑(HAdd.hAdd n 1)) f p) (And (∀ (x : E), Eq (p x 0).curry0 (f x)) (And (∀ (x : E), HasFDerivAt (fun y => p y 0) (p x 1).curryLeft x) (HasFTaylorSeriesUpTo (↑n) (fun x => (continuousMultilinearCurryFin1 𝕜 E F) (p x 1)) fun x => (p x).shift)))","decl":"@[deprecated (since := \"2024-11-07\")]\nalias hasFTaylorSeriesUpTo_succ_iff_right := hasFTaylorSeriesUpTo_succ_nat_iff_right\n\n"}
{"name":"iteratedFDeriv_zero_apply","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nm : Fin 0 → E\n⊢ Eq ((iteratedFDeriv 𝕜 0 f x) m) (f x)","decl":"@[simp]\ntheorem iteratedFDeriv_zero_apply (m : Fin 0 → E) :\n    (iteratedFDeriv 𝕜 0 f x : (Fin 0 → E) → F) m = f x :=\n  rfl\n\n"}
{"name":"iteratedFDeriv_zero_eq_comp","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\n⊢ Eq (iteratedFDeriv 𝕜 0 f) (Function.comp (⇑(continuousMultilinearCurryFin0 𝕜 E F).symm) f)","decl":"theorem iteratedFDeriv_zero_eq_comp :\n    iteratedFDeriv 𝕜 0 f = (continuousMultilinearCurryFin0 𝕜 E F).symm ∘ f :=\n  rfl\n\n"}
{"name":"norm_iteratedFDeriv_zero","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\n⊢ Eq (Norm.norm (iteratedFDeriv 𝕜 0 f x)) (Norm.norm (f x))","decl":"@[simp]\ntheorem norm_iteratedFDeriv_zero : ‖iteratedFDeriv 𝕜 0 f x‖ = ‖f x‖ := by\n  -- Porting note: added `comp_apply`.\n  rw [iteratedFDeriv_zero_eq_comp, comp_apply, LinearIsometryEquiv.norm_map]\n\n"}
{"name":"iteratedFDerivWithin_zero_eq","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\n⊢ Eq (iteratedFDerivWithin 𝕜 0 f s) (iteratedFDeriv 𝕜 0 f)","decl":"theorem iteratedFDerivWithin_zero_eq : iteratedFDerivWithin 𝕜 0 f s = iteratedFDeriv 𝕜 0 f := rfl\n\n"}
{"name":"iteratedFDeriv_succ_apply_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nn : Nat\nm : Fin (HAdd.hAdd n 1) → E\n⊢ Eq ((iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f x) m) (((fderiv 𝕜 (iteratedFDeriv 𝕜 n f) x) (m 0)) (Fin.tail m))","decl":"theorem iteratedFDeriv_succ_apply_left {n : ℕ} (m : Fin (n + 1) → E) :\n    (iteratedFDeriv 𝕜 (n + 1) f x : (Fin (n + 1) → E) → F) m =\n      (fderiv 𝕜 (iteratedFDeriv 𝕜 n f) x : E → E[×n]→L[𝕜] F) (m 0) (tail m) :=\n  rfl\n\n"}
{"name":"iteratedFDeriv_succ_eq_comp_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\n⊢ Eq (iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f) (Function.comp (⇑(continuousMultilinearCurryLeftEquiv 𝕜 (fun x => E) F).symm) (fderiv 𝕜 (iteratedFDeriv 𝕜 n f)))","decl":"/-- Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv,\nand the derivative of the `n`-th derivative. -/\ntheorem iteratedFDeriv_succ_eq_comp_left {n : ℕ} :\n    iteratedFDeriv 𝕜 (n + 1) f =\n      (continuousMultilinearCurryLeftEquiv 𝕜 (fun _ : Fin (n + 1) => E) F).symm ∘\n        fderiv 𝕜 (iteratedFDeriv 𝕜 n f) :=\n  rfl\n\n"}
{"name":"fderiv_iteratedFDeriv","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\n⊢ Eq (fderiv 𝕜 (iteratedFDeriv 𝕜 n f)) (Function.comp (⇑(continuousMultilinearCurryLeftEquiv 𝕜 (fun x => E) F)) (iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f))","decl":"/-- Writing explicitly the derivative of the `n`-th derivative as the composition of a currying\nlinear equiv, and the `n + 1`-th derivative. -/\ntheorem fderiv_iteratedFDeriv {n : ℕ} :\n    fderiv 𝕜 (iteratedFDeriv 𝕜 n f) =\n      continuousMultilinearCurryLeftEquiv 𝕜 (fun _ : Fin (n + 1) => E) F ∘\n        iteratedFDeriv 𝕜 (n + 1) f :=\n  rfl\n\n"}
{"name":"tsupport_iteratedFDeriv_subset","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\n⊢ HasSubset.Subset (tsupport (iteratedFDeriv 𝕜 n f)) (tsupport f)","decl":"theorem tsupport_iteratedFDeriv_subset (n : ℕ) : tsupport (iteratedFDeriv 𝕜 n f) ⊆ tsupport f := by\n  induction n with\n  | zero =>\n    rw [iteratedFDeriv_zero_eq_comp]\n    exact closure_minimal ((support_comp_subset (LinearIsometryEquiv.map_zero _) _).trans\n      subset_closure) isClosed_closure\n  | succ n IH =>\n    rw [iteratedFDeriv_succ_eq_comp_left]\n    exact closure_minimal ((support_comp_subset (LinearIsometryEquiv.map_zero _) _).trans\n      ((support_fderiv_subset 𝕜).trans IH)) isClosed_closure\n\n"}
{"name":"support_iteratedFDeriv_subset","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\n⊢ HasSubset.Subset (Function.support (iteratedFDeriv 𝕜 n f)) (tsupport f)","decl":"theorem support_iteratedFDeriv_subset (n : ℕ) : support (iteratedFDeriv 𝕜 n f) ⊆ tsupport f :=\n  subset_closure.trans (tsupport_iteratedFDeriv_subset n)\n\n"}
{"name":"HasCompactSupport.iteratedFDeriv","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nhf : HasCompactSupport f\nn : Nat\n⊢ HasCompactSupport (iteratedFDeriv 𝕜 n f)","decl":"theorem HasCompactSupport.iteratedFDeriv (hf : HasCompactSupport f) (n : ℕ) :\n    HasCompactSupport (iteratedFDeriv 𝕜 n f) :=\n  hf.of_isClosed_subset isClosed_closure (tsupport_iteratedFDeriv_subset n)\n\n"}
{"name":"norm_fderiv_iteratedFDeriv","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nn : Nat\n⊢ Eq (Norm.norm (fderiv 𝕜 (iteratedFDeriv 𝕜 n f) x)) (Norm.norm (iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f x))","decl":"theorem norm_fderiv_iteratedFDeriv {n : ℕ} :\n    ‖fderiv 𝕜 (iteratedFDeriv 𝕜 n f) x‖ = ‖iteratedFDeriv 𝕜 (n + 1) f x‖ := by\n  -- Porting note: added `comp_apply`.\n  rw [iteratedFDeriv_succ_eq_comp_left, comp_apply, LinearIsometryEquiv.norm_map]\n\n"}
{"name":"iteratedFDerivWithin_univ","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\n⊢ Eq (iteratedFDerivWithin 𝕜 n f Set.univ) (iteratedFDeriv 𝕜 n f)","decl":"theorem iteratedFDerivWithin_univ {n : ℕ} :\n    iteratedFDerivWithin 𝕜 n f univ = iteratedFDeriv 𝕜 n f := by\n  induction n with\n  | zero => ext x; simp\n  | succ n IH =>\n    ext x m\n    rw [iteratedFDeriv_succ_apply_left, iteratedFDerivWithin_succ_apply_left, IH, fderivWithin_univ]\n\n"}
{"name":"HasFTaylorSeriesUpTo.eq_iteratedFDeriv","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : WithTop ENat\np : E → FormalMultilinearSeries 𝕜 E F\nh : HasFTaylorSeriesUpTo n f p\nm : Nat\nhmn : LE.le (↑m) n\nx : E\n⊢ Eq (p x m) (iteratedFDeriv 𝕜 m f x)","decl":"theorem HasFTaylorSeriesUpTo.eq_iteratedFDeriv\n    (h : HasFTaylorSeriesUpTo n f p) {m : ℕ} (hmn : m ≤ n) (x : E) :\n    p x m = iteratedFDeriv 𝕜 m f x := by\n  rw [← iteratedFDerivWithin_univ]\n  rw [← hasFTaylorSeriesUpToOn_univ_iff] at h\n  exact h.eq_iteratedFDerivWithin_of_uniqueDiffOn hmn uniqueDiffOn_univ (mem_univ _)\n\n"}
{"name":"iteratedFDerivWithin_of_isOpen","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\ns : Set E\nf : E → F\nn : Nat\nhs : IsOpen s\n⊢ Set.EqOn (iteratedFDerivWithin 𝕜 n f s) (iteratedFDeriv 𝕜 n f) s","decl":"/-- In an open set, the iterated derivative within this set coincides with the global iterated\nderivative. -/\ntheorem iteratedFDerivWithin_of_isOpen (n : ℕ) (hs : IsOpen s) :\n    EqOn (iteratedFDerivWithin 𝕜 n f s) (iteratedFDeriv 𝕜 n f) s := by\n  induction n with\n  | zero =>\n    intro x _\n    ext1\n    simp only [iteratedFDerivWithin_zero_apply, iteratedFDeriv_zero_apply]\n  | succ n IH =>\n    intro x hx\n    rw [iteratedFDeriv_succ_eq_comp_left, iteratedFDerivWithin_succ_eq_comp_left]\n    dsimp\n    congr 1\n    rw [fderivWithin_of_isOpen hs hx]\n    apply Filter.EventuallyEq.fderiv_eq\n    filter_upwards [hs.mem_nhds hx]\n    exact IH\n\n"}
{"name":"ftaylorSeriesWithin_univ","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\n⊢ Eq (ftaylorSeriesWithin 𝕜 f Set.univ) (ftaylorSeries 𝕜 f)","decl":"theorem ftaylorSeriesWithin_univ : ftaylorSeriesWithin 𝕜 f univ = ftaylorSeries 𝕜 f := by\n  ext1 x; ext1 n\n  change iteratedFDerivWithin 𝕜 n f univ x = iteratedFDeriv 𝕜 n f x\n  rw [iteratedFDerivWithin_univ]\n\n"}
{"name":"iteratedFDeriv_succ_apply_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nn : Nat\nm : Fin (HAdd.hAdd n 1) → E\n⊢ Eq ((iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f x) m) (((iteratedFDeriv 𝕜 n (fun y => fderiv 𝕜 f y) x) (Fin.init m)) (m (Fin.last n)))","decl":"theorem iteratedFDeriv_succ_apply_right {n : ℕ} (m : Fin (n + 1) → E) :\n    (iteratedFDeriv 𝕜 (n + 1) f x : (Fin (n + 1) → E) → F) m =\n      iteratedFDeriv 𝕜 n (fun y => fderiv 𝕜 f y) x (init m) (m (last n)) := by\n  rw [← iteratedFDerivWithin_univ, ← iteratedFDerivWithin_univ, ← fderivWithin_univ]\n  exact iteratedFDerivWithin_succ_apply_right uniqueDiffOn_univ (mem_univ _) _\n\n"}
{"name":"iteratedFDeriv_succ_eq_comp_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nn : Nat\n⊢ Eq (iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f x) (Function.comp (⇑(continuousMultilinearCurryRightEquiv' 𝕜 n E F).symm) (iteratedFDeriv 𝕜 n fun y => fderiv 𝕜 f y) x)","decl":"/-- Writing explicitly the `n+1`-th derivative as the composition of a currying linear equiv,\nand the `n`-th derivative of the derivative. -/\ntheorem iteratedFDeriv_succ_eq_comp_right {n : ℕ} :\n    iteratedFDeriv 𝕜 (n + 1) f x =\n      ((continuousMultilinearCurryRightEquiv' 𝕜 n E F).symm ∘\n          iteratedFDeriv 𝕜 n fun y => fderiv 𝕜 f y) x := by\n  ext m; rw [iteratedFDeriv_succ_apply_right]; rfl\n\n"}
{"name":"norm_iteratedFDeriv_fderiv","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nn : Nat\n⊢ Eq (Norm.norm (iteratedFDeriv 𝕜 n (fderiv 𝕜 f) x)) (Norm.norm (iteratedFDeriv 𝕜 (HAdd.hAdd n 1) f x))","decl":"theorem norm_iteratedFDeriv_fderiv {n : ℕ} :\n    ‖iteratedFDeriv 𝕜 n (fderiv 𝕜 f) x‖ = ‖iteratedFDeriv 𝕜 (n + 1) f x‖ := by\n  -- Porting note: added `comp_apply`.\n  rw [iteratedFDeriv_succ_eq_comp_right, comp_apply, LinearIsometryEquiv.norm_map]\n\n"}
{"name":"iteratedFDeriv_one_apply","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nx : E\nm : Fin 1 → E\n⊢ Eq ((iteratedFDeriv 𝕜 1 f x) m) ((fderiv 𝕜 f x) (m 0))","decl":"@[simp]\ntheorem iteratedFDeriv_one_apply (m : Fin 1 → E) :\n    iteratedFDeriv 𝕜 1 f x m = fderiv 𝕜 f x (m 0) := by\n  rw [iteratedFDeriv_succ_apply_right, iteratedFDeriv_zero_apply]; rfl\n\n"}
{"name":"iteratedFDeriv_two_apply","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nz : E\nm : Fin 2 → E\n⊢ Eq ((iteratedFDeriv 𝕜 2 f z) m) (((fderiv 𝕜 (fderiv 𝕜 f) z) (m 0)) (m 1))","decl":"lemma iteratedFDeriv_two_apply (f : E → F) (z : E) (m : Fin 2 → E) :\n    iteratedFDeriv 𝕜 2 f z m = fderiv 𝕜 (fderiv 𝕜 f) z (m 0) (m 1) := by\n  simp only [iteratedFDeriv_succ_apply_right]\n  rfl\n\n"}
{"name":"iteratedFDeriv_comp_add_left'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\na : E\n⊢ Eq (iteratedFDeriv 𝕜 n fun z => f (HAdd.hAdd a z)) fun x => iteratedFDeriv 𝕜 n f (HAdd.hAdd a x)","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the left. -/\nlemma iteratedFDeriv_comp_add_left' (n : ℕ) (a : E) :\n    iteratedFDeriv 𝕜 n (fun z ↦ f (a + z)) = fun x ↦ iteratedFDeriv 𝕜 n f (a + x) := by\n  simpa [← iteratedFDerivWithin_univ] using iteratedFDerivWithin_comp_add_left' n a (s := univ)\n\n"}
{"name":"iteratedFDeriv_comp_add_left","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\na x : E\n⊢ Eq (iteratedFDeriv 𝕜 n (fun z => f (HAdd.hAdd a z)) x) (iteratedFDeriv 𝕜 n f (HAdd.hAdd a x))","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the left. -/\nlemma iteratedFDeriv_comp_add_left (n : ℕ) (a : E) (x : E) :\n    iteratedFDeriv 𝕜 n (fun z ↦ f (a + z)) x = iteratedFDeriv 𝕜 n f (a + x) := by\n  simp [iteratedFDeriv_comp_add_left']\n\n"}
{"name":"iteratedFDeriv_comp_add_right'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\na : E\n⊢ Eq (iteratedFDeriv 𝕜 n fun z => f (HAdd.hAdd z a)) fun x => iteratedFDeriv 𝕜 n f (HAdd.hAdd x a)","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the right. -/\nlemma iteratedFDeriv_comp_add_right' (n : ℕ) (a : E) :\n    iteratedFDeriv 𝕜 n (fun z ↦ f (z + a)) = fun x ↦ iteratedFDeriv 𝕜 n f (x + a) := by\n  simpa [add_comm a] using iteratedFDeriv_comp_add_left' n a\n\n"}
{"name":"iteratedFDeriv_comp_add_right","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\na x : E\n⊢ Eq (iteratedFDeriv 𝕜 n (fun z => f (HAdd.hAdd z a)) x) (iteratedFDeriv 𝕜 n f (HAdd.hAdd x a))","decl":"/-- The iterated derivative commutes with shifting the function by a constant on the right. -/\nlemma iteratedFDeriv_comp_add_right (n : ℕ) (a : E) (x : E) :\n    iteratedFDeriv 𝕜 n (fun z ↦ f (z + a)) x = iteratedFDeriv 𝕜 n f (x + a) := by\n  simp [iteratedFDeriv_comp_add_right']\n\n"}
{"name":"iteratedFDeriv_comp_sub'","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\na : E\n⊢ Eq (iteratedFDeriv 𝕜 n fun z => f (HSub.hSub z a)) fun x => iteratedFDeriv 𝕜 n f (HSub.hSub x a)","decl":"/-- The iterated derivative commutes with subtracting a constant. -/\nlemma iteratedFDeriv_comp_sub' (n : ℕ) (a : E) :\n    iteratedFDeriv 𝕜 n (fun z ↦ f (z - a)) = fun x ↦ iteratedFDeriv 𝕜 n f (x - a) := by\n  simpa [sub_eq_add_neg] using iteratedFDeriv_comp_add_right' n (-a)\n\n"}
{"name":"iteratedFDeriv_comp_sub","module":"Mathlib.Analysis.Calculus.ContDiff.FTaylorSeries","initialProofState":"𝕜 : Type u\ninst✝⁴ : NontriviallyNormedField 𝕜\nE : Type uE\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type uF\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : E → F\nn : Nat\na x : E\n⊢ Eq (iteratedFDeriv 𝕜 n (fun z => f (HSub.hSub z a)) x) (iteratedFDeriv 𝕜 n f (HSub.hSub x a))","decl":"/-- The iterated derivative commutes with subtracting a constant. -/\nlemma iteratedFDeriv_comp_sub (n : ℕ) (a : E) (x : E) :\n    iteratedFDeriv 𝕜 n (fun z ↦ f (z - a)) x = iteratedFDeriv 𝕜 n f (x - a) := by\n  simp [iteratedFDeriv_comp_sub']\n"}
