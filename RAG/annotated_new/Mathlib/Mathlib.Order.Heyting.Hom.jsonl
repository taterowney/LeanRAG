{"name":"HeytingHom.mk.inj","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\ntoLatticeHom✝ : LatticeHom α β\nmap_bot'✝ : Eq (toLatticeHom✝.toFun Bot.bot) Bot.bot\nmap_himp'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\ntoLatticeHom : LatticeHom α β\nmap_bot' : Eq (toLatticeHom.toFun Bot.bot) Bot.bot\nmap_himp' : ∀ (a b : α), Eq (toLatticeHom.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom.toFun a) (toLatticeHom.toFun b))\nx✝ : Eq { toLatticeHom := toLatticeHom✝, map_bot' := map_bot'✝, map_himp' := map_himp'✝ } { toLatticeHom := toLatticeHom, map_bot' := map_bot', map_himp' := map_himp' }\n⊢ Eq toLatticeHom✝ toLatticeHom","decl":"/-- The type of Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that preserve\nHeyting implication. -/\nstructure HeytingHom (α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  protected map_bot' : toFun ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n\n"}
{"name":"HeytingHom.map_himp'","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nself : HeytingHom α β\na b : α\n⊢ Eq (self.toFun (HImp.himp a b)) (HImp.himp (self.toFun a) (self.toFun b))","decl":"/-- The type of Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that preserve\nHeyting implication. -/\nstructure HeytingHom (α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  protected map_bot' : toFun ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n\n"}
{"name":"HeytingHom.map_bot'","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nself : HeytingHom α β\n⊢ Eq (self.toFun Bot.bot) Bot.bot","decl":"/-- The type of Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that preserve\nHeyting implication. -/\nstructure HeytingHom (α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  protected map_bot' : toFun ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n\n"}
{"name":"HeytingHom.mk.injEq","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\ntoLatticeHom✝ : LatticeHom α β\nmap_bot'✝ : Eq (toLatticeHom✝.toFun Bot.bot) Bot.bot\nmap_himp'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\ntoLatticeHom : LatticeHom α β\nmap_bot' : Eq (toLatticeHom.toFun Bot.bot) Bot.bot\nmap_himp' : ∀ (a b : α), Eq (toLatticeHom.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom.toFun a) (toLatticeHom.toFun b))\n⊢ Eq (Eq { toLatticeHom := toLatticeHom✝, map_bot' := map_bot'✝, map_himp' := map_himp'✝ } { toLatticeHom := toLatticeHom, map_bot' := map_bot', map_himp' := map_himp' }) (Eq toLatticeHom✝ toLatticeHom)","decl":"/-- The type of Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that preserve\nHeyting implication. -/\nstructure HeytingHom (α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  protected map_bot' : toFun ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n\n"}
{"name":"HeytingHom.mk.sizeOf_spec","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : HeytingAlgebra α\ninst✝² : HeytingAlgebra β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoLatticeHom : LatticeHom α β\nmap_bot' : Eq (toLatticeHom.toFun Bot.bot) Bot.bot\nmap_himp' : ∀ (a b : α), Eq (toLatticeHom.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom.toFun a) (toLatticeHom.toFun b))\n⊢ Eq (SizeOf.sizeOf { toLatticeHom := toLatticeHom, map_bot' := map_bot', map_himp' := map_himp' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLatticeHom)) (SizeOf.sizeOf map_bot'))","decl":"/-- The type of Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that preserve\nHeyting implication. -/\nstructure HeytingHom (α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  protected map_bot' : toFun ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n\n"}
{"name":"CoheytingHom.mk.sizeOf_spec","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : CoheytingAlgebra α\ninst✝² : CoheytingAlgebra β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoLatticeHom : LatticeHom α β\nmap_top' : Eq (toLatticeHom.toFun Top.top) Top.top\nmap_sdiff' : ∀ (a b : α), Eq (toLatticeHom.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom.toFun a) (toLatticeHom.toFun b))\n⊢ Eq (SizeOf.sizeOf { toLatticeHom := toLatticeHom, map_top' := map_top', map_sdiff' := map_sdiff' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toLatticeHom)) (SizeOf.sizeOf map_top'))","decl":"/-- The type of co-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve difference. -/\nstructure CoheytingHom (α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  protected map_top' : toFun ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"CoheytingHom.map_top'","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nself : CoheytingHom α β\n⊢ Eq (self.toFun Top.top) Top.top","decl":"/-- The type of co-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve difference. -/\nstructure CoheytingHom (α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  protected map_top' : toFun ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"CoheytingHom.mk.injEq","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\ntoLatticeHom✝ : LatticeHom α β\nmap_top'✝ : Eq (toLatticeHom✝.toFun Top.top) Top.top\nmap_sdiff'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\ntoLatticeHom : LatticeHom α β\nmap_top' : Eq (toLatticeHom.toFun Top.top) Top.top\nmap_sdiff' : ∀ (a b : α), Eq (toLatticeHom.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom.toFun a) (toLatticeHom.toFun b))\n⊢ Eq (Eq { toLatticeHom := toLatticeHom✝, map_top' := map_top'✝, map_sdiff' := map_sdiff'✝ } { toLatticeHom := toLatticeHom, map_top' := map_top', map_sdiff' := map_sdiff' }) (Eq toLatticeHom✝ toLatticeHom)","decl":"/-- The type of co-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve difference. -/\nstructure CoheytingHom (α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  protected map_top' : toFun ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"CoheytingHom.mk.inj","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\ntoLatticeHom✝ : LatticeHom α β\nmap_top'✝ : Eq (toLatticeHom✝.toFun Top.top) Top.top\nmap_sdiff'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\ntoLatticeHom : LatticeHom α β\nmap_top' : Eq (toLatticeHom.toFun Top.top) Top.top\nmap_sdiff' : ∀ (a b : α), Eq (toLatticeHom.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom.toFun a) (toLatticeHom.toFun b))\nx✝ : Eq { toLatticeHom := toLatticeHom✝, map_top' := map_top'✝, map_sdiff' := map_sdiff'✝ } { toLatticeHom := toLatticeHom, map_top' := map_top', map_sdiff' := map_sdiff' }\n⊢ Eq toLatticeHom✝ toLatticeHom","decl":"/-- The type of co-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve difference. -/\nstructure CoheytingHom (α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  protected map_top' : toFun ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"CoheytingHom.map_sdiff'","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nself : CoheytingHom α β\na b : α\n⊢ Eq (self.toFun (SDiff.sdiff a b)) (SDiff.sdiff (self.toFun a) (self.toFun b))","decl":"/-- The type of co-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve difference. -/\nstructure CoheytingHom (α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  protected map_top' : toFun ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"BiheytingHom.map_sdiff'","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nself : BiheytingHom α β\na b : α\n⊢ Eq (self.toFun (SDiff.sdiff a b)) (SDiff.sdiff (self.toFun a) (self.toFun b))","decl":"/-- The type of bi-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve Heyting implication and difference. -/\nstructure BiheytingHom (α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"BiheytingHom.map_himp'","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nself : BiheytingHom α β\na b : α\n⊢ Eq (self.toFun (HImp.himp a b)) (HImp.himp (self.toFun a) (self.toFun b))","decl":"/-- The type of bi-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve Heyting implication and difference. -/\nstructure BiheytingHom (α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"BiheytingHom.mk.injEq","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\ntoLatticeHom✝ : LatticeHom α β\nmap_himp'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\nmap_sdiff'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\ntoLatticeHom : LatticeHom α β\nmap_himp' : ∀ (a b : α), Eq (toLatticeHom.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom.toFun a) (toLatticeHom.toFun b))\nmap_sdiff' : ∀ (a b : α), Eq (toLatticeHom.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom.toFun a) (toLatticeHom.toFun b))\n⊢ Eq (Eq { toLatticeHom := toLatticeHom✝, map_himp' := map_himp'✝, map_sdiff' := map_sdiff'✝ } { toLatticeHom := toLatticeHom, map_himp' := map_himp', map_sdiff' := map_sdiff' }) (Eq toLatticeHom✝ toLatticeHom)","decl":"/-- The type of bi-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve Heyting implication and difference. -/\nstructure BiheytingHom (α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"BiheytingHom.mk.inj","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\ntoLatticeHom✝ : LatticeHom α β\nmap_himp'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\nmap_sdiff'✝ : ∀ (a b : α), Eq (toLatticeHom✝.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom✝.toFun a) (toLatticeHom✝.toFun b))\ntoLatticeHom : LatticeHom α β\nmap_himp' : ∀ (a b : α), Eq (toLatticeHom.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom.toFun a) (toLatticeHom.toFun b))\nmap_sdiff' : ∀ (a b : α), Eq (toLatticeHom.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom.toFun a) (toLatticeHom.toFun b))\nx✝ : Eq { toLatticeHom := toLatticeHom✝, map_himp' := map_himp'✝, map_sdiff' := map_sdiff'✝ } { toLatticeHom := toLatticeHom, map_himp' := map_himp', map_sdiff' := map_sdiff' }\n⊢ Eq toLatticeHom✝ toLatticeHom","decl":"/-- The type of bi-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve Heyting implication and difference. -/\nstructure BiheytingHom (α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"BiheytingHom.mk.sizeOf_spec","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : BiheytingAlgebra α\ninst✝² : BiheytingAlgebra β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoLatticeHom : LatticeHom α β\nmap_himp' : ∀ (a b : α), Eq (toLatticeHom.toFun (HImp.himp a b)) (HImp.himp (toLatticeHom.toFun a) (toLatticeHom.toFun b))\nmap_sdiff' : ∀ (a b : α), Eq (toLatticeHom.toFun (SDiff.sdiff a b)) (SDiff.sdiff (toLatticeHom.toFun a) (toLatticeHom.toFun b))\n⊢ Eq (SizeOf.sizeOf { toLatticeHom := toLatticeHom, map_himp' := map_himp', map_sdiff' := map_sdiff' }) (HAdd.hAdd 1 (SizeOf.sizeOf toLatticeHom))","decl":"/-- The type of bi-Heyting homomorphisms from `α` to `β`. Bounded lattice homomorphisms that\npreserve Heyting implication and difference. -/\nstructure BiheytingHom (α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] extends\n  LatticeHom α β where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  protected map_himp' : ∀ a b, toFun (a ⇨ b) = toFun a ⇨ toFun b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  protected map_sdiff' : ∀ a b, toFun (a \\ b) = toFun a \\ toFun b\n\n"}
{"name":"HeytingHomClass.map_himp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : FunLike F α β\nself : HeytingHomClass F α β\nf : F\na b : α\n⊢ Eq (f (HImp.himp a b)) (HImp.himp (f a) (f b))","decl":"/-- `HeytingHomClass F α β` states that `F` is a type of Heyting homomorphisms.\n\nYou should extend this class when you extend `HeytingHom`. -/\nclass HeytingHomClass (F α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  map_himp (f : F) : ∀ a b, f (a ⇨ b) = f a ⇨ f b\n\n"}
{"name":"HeytingHomClass.toLatticeHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : FunLike F α β\nself : HeytingHomClass F α β\n⊢ LatticeHomClass F α β","decl":"/-- `HeytingHomClass F α β` states that `F` is a type of Heyting homomorphisms.\n\nYou should extend this class when you extend `HeytingHom`. -/\nclass HeytingHomClass (F α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  map_himp (f : F) : ∀ a b, f (a ⇨ b) = f a ⇨ f b\n\n"}
{"name":"HeytingHomClass.map_bot","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : FunLike F α β\nself : HeytingHomClass F α β\nf : F\n⊢ Eq (f Bot.bot) Bot.bot","decl":"/-- `HeytingHomClass F α β` states that `F` is a type of Heyting homomorphisms.\n\nYou should extend this class when you extend `HeytingHom`. -/\nclass HeytingHomClass (F α β : Type*) [HeytingAlgebra α] [HeytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a Heyting homomorphism preserves the bottom element. -/\n  map_bot (f : F) : f ⊥ = ⊥\n  /-- The proposition that a Heyting homomorphism preserves the Heyting implication. -/\n  map_himp (f : F) : ∀ a b, f (a ⇨ b) = f a ⇨ f b\n\n"}
{"name":"CoheytingHomClass.map_sdiff","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : FunLike F α β\nself : CoheytingHomClass F α β\nf : F\na b : α\n⊢ Eq (f (SDiff.sdiff a b)) (SDiff.sdiff (f a) (f b))","decl":"/-- `CoheytingHomClass F α β` states that `F` is a type of co-Heyting homomorphisms.\n\nYou should extend this class when you extend `CoheytingHom`. -/\nclass CoheytingHomClass (F α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  map_sdiff (f : F) : ∀ a b, f (a \\ b) = f a \\ f b\n\n"}
{"name":"CoheytingHomClass.map_top","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : FunLike F α β\nself : CoheytingHomClass F α β\nf : F\n⊢ Eq (f Top.top) Top.top","decl":"/-- `CoheytingHomClass F α β` states that `F` is a type of co-Heyting homomorphisms.\n\nYou should extend this class when you extend `CoheytingHom`. -/\nclass CoheytingHomClass (F α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  map_sdiff (f : F) : ∀ a b, f (a \\ b) = f a \\ f b\n\n"}
{"name":"CoheytingHomClass.toLatticeHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : FunLike F α β\nself : CoheytingHomClass F α β\n⊢ LatticeHomClass F α β","decl":"/-- `CoheytingHomClass F α β` states that `F` is a type of co-Heyting homomorphisms.\n\nYou should extend this class when you extend `CoheytingHom`. -/\nclass CoheytingHomClass (F α β : Type*) [CoheytingAlgebra α] [CoheytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a co-Heyting homomorphism preserves the top element. -/\n  map_top (f : F) : f ⊤ = ⊤\n  /-- The proposition that a co-Heyting homomorphism preserves the difference operation. -/\n  map_sdiff (f : F) : ∀ a b, f (a \\ b) = f a \\ f b\n\n"}
{"name":"BiheytingHomClass.map_himp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : FunLike F α β\nself : BiheytingHomClass F α β\nf : F\na b : α\n⊢ Eq (f (HImp.himp a b)) (HImp.himp (f a) (f b))","decl":"/-- `BiheytingHomClass F α β` states that `F` is a type of bi-Heyting homomorphisms.\n\nYou should extend this class when you extend `BiheytingHom`. -/\nclass BiheytingHomClass (F α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  map_himp (f : F) : ∀ a b, f (a ⇨ b) = f a ⇨ f b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  map_sdiff (f : F) : ∀ a b, f (a \\ b) = f a \\ f b\n\n"}
{"name":"BiheytingHomClass.map_sdiff","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : FunLike F α β\nself : BiheytingHomClass F α β\nf : F\na b : α\n⊢ Eq (f (SDiff.sdiff a b)) (SDiff.sdiff (f a) (f b))","decl":"/-- `BiheytingHomClass F α β` states that `F` is a type of bi-Heyting homomorphisms.\n\nYou should extend this class when you extend `BiheytingHom`. -/\nclass BiheytingHomClass (F α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  map_himp (f : F) : ∀ a b, f (a ⇨ b) = f a ⇨ f b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  map_sdiff (f : F) : ∀ a b, f (a \\ b) = f a \\ f b\n\n"}
{"name":"BiheytingHomClass.toLatticeHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : FunLike F α β\nself : BiheytingHomClass F α β\n⊢ LatticeHomClass F α β","decl":"/-- `BiheytingHomClass F α β` states that `F` is a type of bi-Heyting homomorphisms.\n\nYou should extend this class when you extend `BiheytingHom`. -/\nclass BiheytingHomClass (F α β : Type*) [BiheytingAlgebra α] [BiheytingAlgebra β] [FunLike F α β]\n  extends LatticeHomClass F α β : Prop where\n  /-- The proposition that a bi-Heyting homomorphism preserves the Heyting implication. -/\n  map_himp (f : F) : ∀ a b, f (a ⇨ b) = f a ⇨ f b\n  /-- The proposition that a bi-Heyting homomorphism preserves the difference operation. -/\n  map_sdiff (f : F) : ∀ a b, f (a \\ b) = f a \\ f b\n\n"}
{"name":"HeytingHomClass.toBoundedLatticeHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : FunLike F α β\ninst✝¹ : HeytingAlgebra α\nx✝ : HeytingAlgebra β\ninst✝ : HeytingHomClass F α β\n⊢ BoundedLatticeHomClass F α β","decl":"instance (priority := 100) HeytingHomClass.toBoundedLatticeHomClass [HeytingAlgebra α]\n    { _ : HeytingAlgebra β} [HeytingHomClass F α β] : BoundedLatticeHomClass F α β :=\n  { ‹HeytingHomClass F α β› with\n    map_top := fun f => by rw [← @himp_self α _ ⊥, ← himp_self, map_himp] }\n\n-- See note [lower instance priority]\n"}
{"name":"CoheytingHomClass.toBoundedLatticeHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : FunLike F α β\ninst✝¹ : CoheytingAlgebra α\nx✝ : CoheytingAlgebra β\ninst✝ : CoheytingHomClass F α β\n⊢ BoundedLatticeHomClass F α β","decl":"instance (priority := 100) CoheytingHomClass.toBoundedLatticeHomClass [CoheytingAlgebra α]\n    { _ : CoheytingAlgebra β} [CoheytingHomClass F α β] : BoundedLatticeHomClass F α β :=\n  { ‹CoheytingHomClass F α β› with\n    map_bot := fun f => by rw [← @sdiff_self α _ ⊤, ← sdiff_self, map_sdiff] }\n\n-- See note [lower instance priority]\n"}
{"name":"BiheytingHomClass.toHeytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : FunLike F α β\ninst✝¹ : BiheytingAlgebra α\nx✝ : BiheytingAlgebra β\ninst✝ : BiheytingHomClass F α β\n⊢ HeytingHomClass F α β","decl":"instance (priority := 100) BiheytingHomClass.toHeytingHomClass [BiheytingAlgebra α]\n    { _ : BiheytingAlgebra β} [BiheytingHomClass F α β] : HeytingHomClass F α β :=\n  { ‹BiheytingHomClass F α β› with\n    map_bot := fun f => by rw [← @sdiff_self α _ ⊤, ← sdiff_self, BiheytingHomClass.map_sdiff] }\n\n-- See note [lower instance priority]\n"}
{"name":"BiheytingHomClass.toCoheytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : FunLike F α β\ninst✝¹ : BiheytingAlgebra α\nx✝ : BiheytingAlgebra β\ninst✝ : BiheytingHomClass F α β\n⊢ CoheytingHomClass F α β","decl":"instance (priority := 100) BiheytingHomClass.toCoheytingHomClass [BiheytingAlgebra α]\n    { _ : BiheytingAlgebra β} [BiheytingHomClass F α β] : CoheytingHomClass F α β :=\n  { ‹BiheytingHomClass F α β› with\n    map_top := fun f => by rw [← @himp_self α _ ⊥, ← himp_self, map_himp] }\n\n"}
{"name":"OrderIsoClass.toHeytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : EquivLike F α β\ninst✝¹ : HeytingAlgebra α\nx✝ : HeytingAlgebra β\ninst✝ : OrderIsoClass F α β\n⊢ HeytingHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toHeytingHomClass [HeytingAlgebra α]\n    { _ : HeytingAlgebra β} [OrderIsoClass F α β] : HeytingHomClass F α β :=\n  { OrderIsoClass.toBoundedLatticeHomClass with\n    map_himp := fun f a b =>\n      eq_of_forall_le_iff fun c => by\n        simp only [← map_inv_le_iff, le_himp_iff]\n        rw [← OrderIsoClass.map_le_map_iff f]\n        simp }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toCoheytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : EquivLike F α β\ninst✝¹ : CoheytingAlgebra α\nx✝ : CoheytingAlgebra β\ninst✝ : OrderIsoClass F α β\n⊢ CoheytingHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toCoheytingHomClass [CoheytingAlgebra α]\n    { _ : CoheytingAlgebra β} [OrderIsoClass F α β] : CoheytingHomClass F α β :=\n  { OrderIsoClass.toBoundedLatticeHomClass with\n    map_sdiff := fun f a b =>\n      eq_of_forall_ge_iff fun c => by\n        simp only [← le_map_inv_iff, sdiff_le_iff]\n        rw [← OrderIsoClass.map_le_map_iff f]\n        simp }\n\n-- See note [lower instance priority]\n"}
{"name":"OrderIsoClass.toBiheytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝² : EquivLike F α β\ninst✝¹ : BiheytingAlgebra α\nx✝ : BiheytingAlgebra β\ninst✝ : OrderIsoClass F α β\n⊢ BiheytingHomClass F α β","decl":"instance (priority := 100) OrderIsoClass.toBiheytingHomClass [BiheytingAlgebra α]\n    { _ : BiheytingAlgebra β} [OrderIsoClass F α β] : BiheytingHomClass F α β :=\n  { OrderIsoClass.toLatticeHomClass with\n    map_himp := fun f a b =>\n      eq_of_forall_le_iff fun c => by\n        simp only [← map_inv_le_iff, le_himp_iff]\n        rw [← OrderIsoClass.map_le_map_iff f]\n        simp\n    map_sdiff := fun f a b =>\n      eq_of_forall_ge_iff fun c => by\n        simp only [← le_map_inv_iff, sdiff_le_iff]\n        rw [← OrderIsoClass.map_le_map_iff f]\n        simp }\n\n"}
{"name":"BoundedLatticeHomClass.toBiheytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : BooleanAlgebra α\ninst✝¹ : BooleanAlgebra β\ninst✝ : BoundedLatticeHomClass F α β\n⊢ BiheytingHomClass F α β","decl":"/-- This can't be an instance because of typeclass loops. -/\nlemma BoundedLatticeHomClass.toBiheytingHomClass [BooleanAlgebra α] [BooleanAlgebra β]\n    [BoundedLatticeHomClass F α β] : BiheytingHomClass F α β :=\n  { ‹BoundedLatticeHomClass F α β› with\n    map_himp := fun f a b => by rw [himp_eq, himp_eq, map_sup, (isCompl_compl.map _).compl_eq]\n    map_sdiff := fun f a b => by rw [sdiff_eq, sdiff_eq, map_inf, (isCompl_compl.map _).compl_eq] }\n\n"}
{"name":"map_compl","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : HeytingHomClass F α β\nf : F\na : α\n⊢ Eq (f (HasCompl.compl a)) (HasCompl.compl (f a))","decl":"@[simp]\ntheorem map_compl (a : α) : f aᶜ = (f a)ᶜ := by rw [← himp_bot, ← himp_bot, map_himp, map_bot]\n\n"}
{"name":"map_bihimp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : HeytingHomClass F α β\nf : F\na b : α\n⊢ Eq (f (bihimp a b)) (bihimp (f a) (f b))","decl":"@[simp]\ntheorem map_bihimp (a b : α) : f (a ⇔ b) = f a ⇔ f b := by simp_rw [bihimp, map_inf, map_himp]\n\n"}
{"name":"map_hnot","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : CoheytingHomClass F α β\nf : F\na : α\n⊢ Eq (f (HNot.hnot a)) (HNot.hnot (f a))","decl":"@[simp]\ntheorem map_hnot (a : α) : f (￢a) = ￢f a := by rw [← top_sdiff', ← top_sdiff', map_sdiff, map_top]\n\n"}
{"name":"map_symmDiff","module":"Mathlib.Order.Heyting.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : CoheytingHomClass F α β\nf : F\na b : α\n⊢ Eq (f (symmDiff a b)) (symmDiff (f a) (f b))","decl":"@[simp]\ntheorem map_symmDiff (a b : α) : f (a ∆ b) = f a ∆ f b := by simp_rw [symmDiff, map_sup, map_sdiff]\n\n"}
{"name":"HeytingHom.instHeytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\n⊢ HeytingHomClass (HeytingHom α β) α β","decl":"instance instHeytingHomClass : HeytingHomClass (HeytingHom α β) α β where\n  map_sup f := f.map_sup'\n  map_inf f := f.map_inf'\n  map_bot f := f.map_bot'\n  map_himp := HeytingHom.map_himp'\n\n-- @[simp] -- Porting note: not in simp-nf, simp can simplify lhs. Added aux simp lemma\n"}
{"name":"HeytingHom.toFun_eq_coe","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf : HeytingHom α β\n⊢ Eq f.toFun ⇑f","decl":"theorem toFun_eq_coe {f : HeytingHom α β} : f.toFun = ⇑f :=\n  rfl\n\n"}
{"name":"HeytingHom.toFun_eq_coe_aux","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf : HeytingHom α β\n⊢ Eq ⇑f.toLatticeHom ⇑f","decl":"@[simp]\ntheorem toFun_eq_coe_aux {f : HeytingHom α β} : (↑f.toLatticeHom) = ⇑f :=\n  rfl\n\n"}
{"name":"HeytingHom.ext","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf g : HeytingHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : HeytingHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"HeytingHom.ext_iff","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf g : HeytingHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : HeytingHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"HeytingHom.coe_copy","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf : HeytingHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : HeytingHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"HeytingHom.copy_eq","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf : HeytingHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : HeytingHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"HeytingHom.coe_id","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\ninst✝ : HeytingAlgebra α\n⊢ Eq (⇑(HeytingHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(HeytingHom.id α) = id :=\n  rfl\n\n"}
{"name":"HeytingHom.id_apply","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\ninst✝ : HeytingAlgebra α\na : α\n⊢ Eq ((HeytingHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : HeytingHom.id α a = a :=\n  rfl\n\n"}
{"name":"HeytingHom.coe_comp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : HeytingAlgebra γ\nf : HeytingHom β γ\ng : HeytingHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : HeytingHom β γ) (g : HeytingHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"HeytingHom.comp_apply","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : HeytingAlgebra γ\nf : HeytingHom β γ\ng : HeytingHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : HeytingHom β γ) (g : HeytingHom α β) (a : α) : f.comp g a = f (g a) :=\n  rfl\n\n"}
{"name":"HeytingHom.comp_assoc","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : HeytingAlgebra α\ninst✝² : HeytingAlgebra β\ninst✝¹ : HeytingAlgebra γ\ninst✝ : HeytingAlgebra δ\nf : HeytingHom γ δ\ng : HeytingHom β γ\nh : HeytingHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : HeytingHom γ δ) (g : HeytingHom β γ) (h : HeytingHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"HeytingHom.comp_id","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf : HeytingHom α β\n⊢ Eq (f.comp (HeytingHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : HeytingHom α β) : f.comp (HeytingHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"HeytingHom.id_comp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : HeytingAlgebra α\ninst✝ : HeytingAlgebra β\nf : HeytingHom α β\n⊢ Eq ((HeytingHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : HeytingHom α β) : (HeytingHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"HeytingHom.cancel_right","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : HeytingAlgebra γ\nf : HeytingHom α β\ng₁ g₂ : HeytingHom β γ\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right (hf : Surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"HeytingHom.cancel_left","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : HeytingAlgebra α\ninst✝¹ : HeytingAlgebra β\ninst✝ : HeytingAlgebra γ\nf₁ f₂ : HeytingHom α β\ng : HeytingHom β γ\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left (hg : Injective g) : g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => HeytingHom.ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"CoheytingHom.instCoheytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\n⊢ CoheytingHomClass (CoheytingHom α β) α β","decl":"instance : CoheytingHomClass (CoheytingHom α β) α β where\n  map_sup f := f.map_sup'\n  map_inf f := f.map_inf'\n  map_top f := f.map_top'\n  map_sdiff := CoheytingHom.map_sdiff'\n\n-- @[simp] -- Porting note: not in simp-nf, simp can simplify lhs. Added aux simp lemma\n"}
{"name":"CoheytingHom.toFun_eq_coe","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf : CoheytingHom α β\n⊢ Eq f.toFun ⇑f","decl":"theorem toFun_eq_coe {f : CoheytingHom α β} : f.toFun = (f : α → β) :=\n  rfl\n\n"}
{"name":"CoheytingHom.toFun_eq_coe_aux","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf : CoheytingHom α β\n⊢ Eq ⇑f.toLatticeHom ⇑f","decl":"@[simp]\ntheorem toFun_eq_coe_aux {f : CoheytingHom α β} : (↑f.toLatticeHom) = ⇑f :=\n  rfl\n\n"}
{"name":"CoheytingHom.ext_iff","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf g : CoheytingHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : CoheytingHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CoheytingHom.ext","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf g : CoheytingHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : CoheytingHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"CoheytingHom.coe_copy","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf : CoheytingHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : CoheytingHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"CoheytingHom.copy_eq","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf : CoheytingHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : CoheytingHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"CoheytingHom.coe_id","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\ninst✝ : CoheytingAlgebra α\n⊢ Eq (⇑(CoheytingHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(CoheytingHom.id α) = id :=\n  rfl\n\n"}
{"name":"CoheytingHom.id_apply","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\ninst✝ : CoheytingAlgebra α\na : α\n⊢ Eq ((CoheytingHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : CoheytingHom.id α a = a :=\n  rfl\n\n"}
{"name":"CoheytingHom.coe_comp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : CoheytingAlgebra γ\nf : CoheytingHom β γ\ng : CoheytingHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : CoheytingHom β γ) (g : CoheytingHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"CoheytingHom.comp_apply","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : CoheytingAlgebra γ\nf : CoheytingHom β γ\ng : CoheytingHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : CoheytingHom β γ) (g : CoheytingHom α β) (a : α) : f.comp g a = f (g a) :=\n  rfl\n\n"}
{"name":"CoheytingHom.comp_assoc","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : CoheytingAlgebra α\ninst✝² : CoheytingAlgebra β\ninst✝¹ : CoheytingAlgebra γ\ninst✝ : CoheytingAlgebra δ\nf : CoheytingHom γ δ\ng : CoheytingHom β γ\nh : CoheytingHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : CoheytingHom γ δ) (g : CoheytingHom β γ) (h : CoheytingHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"CoheytingHom.comp_id","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf : CoheytingHom α β\n⊢ Eq (f.comp (CoheytingHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : CoheytingHom α β) : f.comp (CoheytingHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CoheytingHom.id_comp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : CoheytingAlgebra α\ninst✝ : CoheytingAlgebra β\nf : CoheytingHom α β\n⊢ Eq ((CoheytingHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : CoheytingHom α β) : (CoheytingHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CoheytingHom.cancel_right","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : CoheytingAlgebra γ\nf : CoheytingHom α β\ng₁ g₂ : CoheytingHom β γ\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right (hf : Surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"CoheytingHom.cancel_left","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : CoheytingAlgebra α\ninst✝¹ : CoheytingAlgebra β\ninst✝ : CoheytingAlgebra γ\nf₁ f₂ : CoheytingHom α β\ng : CoheytingHom β γ\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left (hg : Injective g) : g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => CoheytingHom.ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
{"name":"BiheytingHom.instBiheytingHomClass","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\n⊢ BiheytingHomClass (BiheytingHom α β) α β","decl":"instance : BiheytingHomClass (BiheytingHom α β) α β where\n  map_sup f := f.map_sup'\n  map_inf f := f.map_inf'\n  map_himp f := f.map_himp'\n  map_sdiff f := f.map_sdiff'\n\n-- @[simp] -- Porting note: not in simp-nf, simp can simplify lhs. Added aux simp lemma\n"}
{"name":"BiheytingHom.toFun_eq_coe","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf : BiheytingHom α β\n⊢ Eq f.toFun ⇑f","decl":"theorem toFun_eq_coe {f : BiheytingHom α β} : f.toFun = (f : α → β) :=\n  rfl\n\n"}
{"name":"BiheytingHom.toFun_eq_coe_aux","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf : BiheytingHom α β\n⊢ Eq ⇑f.toLatticeHom ⇑f","decl":"@[simp]\ntheorem toFun_eq_coe_aux {f : BiheytingHom α β} : (↑f.toLatticeHom) = ⇑f :=\n  rfl\n\n"}
{"name":"BiheytingHom.ext_iff","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf g : BiheytingHom α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : BiheytingHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"BiheytingHom.ext","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf g : BiheytingHom α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : BiheytingHom α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"BiheytingHom.coe_copy","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf : BiheytingHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : BiheytingHom α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"BiheytingHom.copy_eq","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf : BiheytingHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : BiheytingHom α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"BiheytingHom.coe_id","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\ninst✝ : BiheytingAlgebra α\n⊢ Eq (⇑(BiheytingHom.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(BiheytingHom.id α) = id :=\n  rfl\n\n"}
{"name":"BiheytingHom.id_apply","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\ninst✝ : BiheytingAlgebra α\na : α\n⊢ Eq ((BiheytingHom.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : BiheytingHom.id α a = a :=\n  rfl\n\n"}
{"name":"BiheytingHom.coe_comp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : BiheytingAlgebra γ\nf : BiheytingHom β γ\ng : BiheytingHom α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : BiheytingHom β γ) (g : BiheytingHom α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"BiheytingHom.comp_apply","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : BiheytingAlgebra γ\nf : BiheytingHom β γ\ng : BiheytingHom α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : BiheytingHom β γ) (g : BiheytingHom α β) (a : α) : f.comp g a = f (g a) :=\n  rfl\n\n"}
{"name":"BiheytingHom.comp_assoc","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : BiheytingAlgebra α\ninst✝² : BiheytingAlgebra β\ninst✝¹ : BiheytingAlgebra γ\ninst✝ : BiheytingAlgebra δ\nf : BiheytingHom γ δ\ng : BiheytingHom β γ\nh : BiheytingHom α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : BiheytingHom γ δ) (g : BiheytingHom β γ) (h : BiheytingHom α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"BiheytingHom.comp_id","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf : BiheytingHom α β\n⊢ Eq (f.comp (BiheytingHom.id α)) f","decl":"@[simp]\ntheorem comp_id (f : BiheytingHom α β) : f.comp (BiheytingHom.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"BiheytingHom.id_comp","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : BiheytingAlgebra α\ninst✝ : BiheytingAlgebra β\nf : BiheytingHom α β\n⊢ Eq ((BiheytingHom.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : BiheytingHom α β) : (BiheytingHom.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"BiheytingHom.cancel_right","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : BiheytingAlgebra γ\nf : BiheytingHom α β\ng₁ g₂ : BiheytingHom β γ\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right (hf : Surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congr_arg (fun a ↦ comp a f)⟩\n\n"}
{"name":"BiheytingHom.cancel_left","module":"Mathlib.Order.Heyting.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : BiheytingAlgebra α\ninst✝¹ : BiheytingAlgebra β\ninst✝ : BiheytingAlgebra γ\nf₁ f₂ : BiheytingHom α β\ng : BiheytingHom β γ\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left (hg : Injective g) : g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => BiheytingHom.ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
