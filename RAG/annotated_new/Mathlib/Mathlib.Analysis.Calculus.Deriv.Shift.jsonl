{"name":"HasDerivAt.comp_const_add","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\nf' : F\na x : 𝕜\nhf : HasDerivAt f f' (HAdd.hAdd a x)\n⊢ HasDerivAt (fun x => f (HAdd.hAdd a x)) f' x","decl":"/-- Translation in the domain does not change the derivative. -/\nlemma HasDerivAt.comp_const_add (a x : 𝕜) (hf : HasDerivAt f f' (a + x)) :\n    HasDerivAt (fun x ↦ f (a + x)) f' x := by\n  simpa [Function.comp_def] using HasDerivAt.scomp (𝕜 := 𝕜) x hf <| hasDerivAt_id' x |>.const_add a\n\n"}
{"name":"HasDerivAt.comp_add_const","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\nf' : F\nx a : 𝕜\nhf : HasDerivAt f f' (HAdd.hAdd x a)\n⊢ HasDerivAt (fun x => f (HAdd.hAdd x a)) f' x","decl":"/-- Translation in the domain does not change the derivative. -/\nlemma HasDerivAt.comp_add_const (x a : 𝕜) (hf : HasDerivAt f f' (x + a)) :\n    HasDerivAt (fun x ↦ f (x + a)) f' x := by\n  simpa [Function.comp_def] using HasDerivAt.scomp (𝕜 := 𝕜) x hf <| hasDerivAt_id' x |>.add_const a\n\n"}
{"name":"HasDerivAt.comp_const_sub","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\nf' : F\na x : 𝕜\nhf : HasDerivAt f f' (HSub.hSub a x)\n⊢ HasDerivAt (fun x => f (HSub.hSub a x)) (Neg.neg f') x","decl":"/-- Translation in the domain does not change the derivative. -/\nlemma HasDerivAt.comp_const_sub (a x : 𝕜) (hf : HasDerivAt f f' (a - x)) :\n    HasDerivAt (fun x ↦ f (a - x)) (-f') x := by\n  simpa [Function.comp_def] using HasDerivAt.scomp (𝕜 := 𝕜) x hf <| hasDerivAt_id' x |>.const_sub a\n\n"}
{"name":"HasDerivAt.comp_sub_const","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\nf' : F\nx a : 𝕜\nhf : HasDerivAt f f' (HSub.hSub x a)\n⊢ HasDerivAt (fun x => f (HSub.hSub x a)) f' x","decl":"/-- Translation in the domain does not change the derivative. -/\nlemma HasDerivAt.comp_sub_const (x a : 𝕜) (hf : HasDerivAt f f' (x - a)) :\n    HasDerivAt (fun x ↦ f (x - a)) f' x := by\n  simpa [Function.comp_def] using HasDerivAt.scomp (𝕜 := 𝕜) x hf <| hasDerivAt_id' x |>.sub_const a\n\n"}
{"name":"deriv_comp_neg","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\nx : 𝕜\n⊢ Eq (deriv (fun x => f (Neg.neg x)) x) (Neg.neg (deriv f (Neg.neg x)))","decl":"/-- The derivative of `x ↦ f (-x)` at `a` is the negative of the derivative of `f` at `-a`. -/\nlemma deriv_comp_neg : deriv (fun x ↦ f (-x)) x = -deriv f (-x) := by\n  by_cases f : DifferentiableAt 𝕜 f (-x)\n  · simpa only [deriv_neg, neg_one_smul] using deriv.scomp _ f (differentiable_neg _)\n  · rw [deriv_zero_of_not_differentiableAt (differentiableAt_comp_neg.not.2 f),\n      deriv_zero_of_not_differentiableAt f, neg_zero]\n\n"}
{"name":"deriv_comp_const_add","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\na x : 𝕜\n⊢ Eq (deriv (fun x => f (HAdd.hAdd a x)) x) (deriv f (HAdd.hAdd a x))","decl":"/-- Translation in the domain does not change the derivative. -/\nlemma deriv_comp_const_add : deriv (fun x ↦ f (a + x)) x = deriv f (a + x) := by\n  by_cases hf : DifferentiableAt 𝕜 f (a + x)\n  · exact HasDerivAt.deriv hf.hasDerivAt.comp_const_add\n  · rw [deriv_zero_of_not_differentiableAt (differentiableAt_comp_const_add.not.2 hf),\n      deriv_zero_of_not_differentiableAt hf]\n\n"}
{"name":"deriv_comp_add_const","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\na x : 𝕜\n⊢ Eq (deriv (fun x => f (HAdd.hAdd x a)) x) (deriv f (HAdd.hAdd x a))","decl":"/-- Translation in the domain does not change the derivative. -/\nlemma deriv_comp_add_const : deriv (fun x ↦ f (x + a)) x = deriv f (x + a) := by\n  simpa [add_comm] using deriv_comp_const_add f a x\n\n"}
{"name":"deriv_comp_const_sub","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\na x : 𝕜\n⊢ Eq (deriv (fun x => f (HSub.hSub a x)) x) (Neg.neg (deriv f (HSub.hSub a x)))","decl":"lemma deriv_comp_const_sub : deriv (fun x ↦ f (a - x)) x = -deriv f (a - x) := by\n  simp_rw [sub_eq_add_neg, deriv_comp_neg (f <| a + ·), deriv_comp_const_add]\n\n"}
{"name":"deriv_comp_sub_const","module":"Mathlib.Analysis.Calculus.Deriv.Shift","initialProofState":"𝕜 : Type u_1\nF : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : 𝕜 → F\na x : 𝕜\n⊢ Eq (deriv (fun x => f (HSub.hSub x a)) x) (deriv f (HSub.hSub x a))","decl":"lemma deriv_comp_sub_const : deriv (fun x ↦ f (x - a)) x = deriv f (x - a) := by\n  simp_rw [sub_eq_add_neg, deriv_comp_add_const]\n"}
