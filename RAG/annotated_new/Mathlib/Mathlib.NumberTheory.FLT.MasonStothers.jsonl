{"name":"Polynomial.abc","module":"Mathlib.NumberTheory.FLT.MasonStothers","initialProofState":"k : Type u_1\ninst✝¹ : Field k\ninst✝ : DecidableEq k\na b c : Polynomial k\nha : Ne a 0\nhb : Ne b 0\nhc : Ne c 0\nhab : IsCoprime a b\nhsum : Eq (HAdd.hAdd (HAdd.hAdd a b) c) 0\n⊢ Or (And (LE.le (HAdd.hAdd a.natDegree 1) (UniqueFactorizationMonoid.radical (HMul.hMul (HMul.hMul a b) c)).natDegree) (And (LE.le (HAdd.hAdd b.natDegree 1) (UniqueFactorizationMonoid.radical (HMul.hMul (HMul.hMul a b) c)).natDegree) (LE.le (HAdd.hAdd c.natDegree 1) (UniqueFactorizationMonoid.radical (HMul.hMul (HMul.hMul a b) c)).natDegree))) (And (Eq (Polynomial.derivative a) 0) (And (Eq (Polynomial.derivative b) 0) (Eq (Polynomial.derivative c) 0)))","decl":"/-- **Polynomial ABC theorem.** -/\nprotected theorem Polynomial.abc\n    {a b c : k[X]} (ha : a ≠ 0) (hb : b ≠ 0) (hc : c ≠ 0)\n    (hab : IsCoprime a b) (hsum : a + b + c = 0) :\n    ( natDegree a + 1 ≤ (radical (a * b * c)).natDegree ∧\n      natDegree b + 1 ≤ (radical (a * b * c)).natDegree ∧\n      natDegree c + 1 ≤ (radical (a * b * c)).natDegree ) ∨\n      derivative a = 0 ∧ derivative b = 0 ∧ derivative c = 0 := by\n  set w := wronskian a b with wab\n  have hbc : IsCoprime b c := by\n    rw [add_eq_zero_iff_neg_eq] at hsum\n    rw [← hsum, IsCoprime.neg_right_iff]\n    convert IsCoprime.add_mul_left_right hab.symm 1\n    rw [mul_one]\n  have hsum' : b + c + a = 0 := by rwa [add_rotate] at hsum\n  have hca : IsCoprime c a := by\n    rw [add_eq_zero_iff_neg_eq] at hsum'\n    rw [← hsum', IsCoprime.neg_right_iff]\n    convert IsCoprime.add_mul_left_right hbc.symm 1\n    rw [mul_one]\n  have wbc : w = wronskian b c := wronskian_eq_of_sum_zero hsum\n  have wca : w = wronskian c a := by\n    rw [add_rotate] at hsum\n    simpa only [← wbc] using wronskian_eq_of_sum_zero hsum\n  -- have `divRadical x` dividing `w` for `x = a, b, c`, and use coprimality\n  have abc_dr_dvd_w : divRadical (a * b * c) ∣ w := by\n    have adr_dvd_w := divRadical_dvd_wronskian_left a b\n    have bdr_dvd_w := divRadical_dvd_wronskian_right a b\n    have cdr_dvd_w := divRadical_dvd_wronskian_right b c\n    rw [← wab] at adr_dvd_w bdr_dvd_w\n    rw [← wbc] at cdr_dvd_w\n    rw [divRadical_mul (hca.symm.mul_left hbc), divRadical_mul hab]\n    exact (hca.divRadical.symm.mul_left hbc.divRadical).mul_dvd\n      (hab.divRadical.mul_dvd adr_dvd_w bdr_dvd_w) cdr_dvd_w\n  by_cases hw : w = 0\n  · right\n    rw [hw] at wab wbc\n    cases' hab.wronskian_eq_zero_iff.mp wab.symm with ga gb\n    cases' hbc.wronskian_eq_zero_iff.mp wbc.symm with _ gc\n    exact ⟨ga, gb, gc⟩\n  · left\n    -- use the subcall three times, using the symmetry in `a, b, c`\n    refine ⟨?_, ?_, ?_⟩\n    · rw [mul_rotate] at abc_dr_dvd_w ⊢\n      apply abc_subcall wbc <;> assumption\n    · rw [← mul_rotate] at abc_dr_dvd_w ⊢\n      apply abc_subcall wca <;> assumption\n    · apply abc_subcall wab <;> assumption\n"}
