{"name":"MeasureTheory.ae_eq_zero_of_forall_inner","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\ninst✝ : SecondCountableTopology E\nf : α → E\nhf : ∀ (c : E), (MeasureTheory.ae μ).EventuallyEq (fun x => Inner.inner c (f x)) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem ae_eq_zero_of_forall_inner [NormedAddCommGroup E] [InnerProductSpace 𝕜 E]\n    [SecondCountableTopology E] {f : α → E} (hf : ∀ c : E, (fun x => (inner c (f x) : 𝕜)) =ᵐ[μ] 0) :\n    f =ᵐ[μ] 0 := by\n  let s := denseSeq E\n  have hs : DenseRange s := denseRange_denseSeq E\n  have hf' : ∀ᵐ x ∂μ, ∀ n : ℕ, inner (s n) (f x) = (0 : 𝕜) := ae_all_iff.mpr fun n => hf (s n)\n  refine hf'.mono fun x hx => ?_\n  rw [Pi.zero_apply, ← @inner_self_eq_zero 𝕜]\n  have h_closed : IsClosed {c : E | inner c (f x) = (0 : 𝕜)} :=\n    isClosed_eq (continuous_id.inner continuous_const) continuous_const\n  exact @isClosed_property ℕ E _ s (fun c => inner c (f x) = (0 : 𝕜)) hs h_closed hx _\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_dual_of_isSeparable","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nt : Set E\nht : TopologicalSpace.IsSeparable t\nf : α → E\nhf : ∀ (c : NormedSpace.Dual 𝕜 E), (MeasureTheory.ae μ).EventuallyEq (fun x => c (f x)) 0\nh't : Filter.Eventually (fun x => Membership.mem t (f x)) (MeasureTheory.ae μ)\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem ae_eq_zero_of_forall_dual_of_isSeparable [NormedAddCommGroup E] [NormedSpace 𝕜 E]\n    {t : Set E} (ht : TopologicalSpace.IsSeparable t) {f : α → E}\n    (hf : ∀ c : Dual 𝕜 E, (fun x => ⟪f x, c⟫) =ᵐ[μ] 0) (h't : ∀ᵐ x ∂μ, f x ∈ t) : f =ᵐ[μ] 0 := by\n  rcases ht with ⟨d, d_count, hd⟩\n  haveI : Encodable d := d_count.toEncodable\n  have : ∀ x : d, ∃ g : E →L[𝕜] 𝕜, ‖g‖ ≤ 1 ∧ g x = ‖(x : E)‖ :=\n    fun x => exists_dual_vector'' 𝕜 (x : E)\n  choose s hs using this\n  have A : ∀ a : E, a ∈ t → (∀ x, ⟪a, s x⟫ = (0 : 𝕜)) → a = 0 := by\n    intro a hat ha\n    contrapose! ha\n    have a_pos : 0 < ‖a‖ := by simp only [ha, norm_pos_iff, Ne, not_false_iff]\n    have a_mem : a ∈ closure d := hd hat\n    obtain ⟨x, hx⟩ : ∃ x : d, dist a x < ‖a‖ / 2 := by\n      rcases Metric.mem_closure_iff.1 a_mem (‖a‖ / 2) (half_pos a_pos) with ⟨x, h'x, hx⟩\n      exact ⟨⟨x, h'x⟩, hx⟩\n    use x\n    have I : ‖a‖ / 2 < ‖(x : E)‖ := by\n      have : ‖a‖ ≤ ‖(x : E)‖ + ‖a - x‖ := norm_le_insert' _ _\n      have : ‖a - x‖ < ‖a‖ / 2 := by rwa [dist_eq_norm] at hx\n      linarith\n    intro h\n    apply lt_irrefl ‖s x x‖\n    calc\n      ‖s x x‖ = ‖s x (x - a)‖ := by simp only [h, sub_zero, ContinuousLinearMap.map_sub]\n      _ ≤ 1 * ‖(x : E) - a‖ := ContinuousLinearMap.le_of_opNorm_le _ (hs x).1 _\n      _ < ‖a‖ / 2 := by rw [one_mul]; rwa [dist_eq_norm'] at hx\n      _ < ‖(x : E)‖ := I\n      _ = ‖s x x‖ := by rw [(hs x).2, RCLike.norm_coe_norm]\n  have hfs : ∀ y : d, ∀ᵐ x ∂μ, ⟪f x, s y⟫ = (0 : 𝕜) := fun y => hf (s y)\n  have hf' : ∀ᵐ x ∂μ, ∀ y : d, ⟪f x, s y⟫ = (0 : 𝕜) := by rwa [ae_all_iff]\n  filter_upwards [hf', h't] with x hx h'x\n  exact A (f x) h'x hx\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_dual","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\n𝕜 : Type u_3\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : SecondCountableTopology E\nf : α → E\nhf : ∀ (c : NormedSpace.Dual 𝕜 E), (MeasureTheory.ae μ).EventuallyEq (fun x => c (f x)) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem ae_eq_zero_of_forall_dual [NormedAddCommGroup E] [NormedSpace 𝕜 E]\n    [SecondCountableTopology E] {f : α → E} (hf : ∀ c : Dual 𝕜 E, (fun x => ⟪f x, c⟫) =ᵐ[μ] 0) :\n    f =ᵐ[μ] 0 :=\n  ae_eq_zero_of_forall_dual_of_isSeparable 𝕜 (.of_separableSpace Set.univ) hf\n    (Eventually.of_forall fun _ => Set.mem_univ _)\n\n"}
{"name":"MeasureTheory.ae_nonneg_of_forall_setIntegral_nonneg","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf : MeasureTheory.Integrable f μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → LE.le 0 (MeasureTheory.integral (μ.restrict s) fun x => f x)\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 f","decl":"theorem ae_nonneg_of_forall_setIntegral_nonneg (hf : Integrable f μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ s < ∞ → 0 ≤ ∫ x in s, f x ∂μ) : 0 ≤ᵐ[μ] f := by\n  simp_rw [EventuallyLE, Pi.zero_apply]\n  rw [ae_const_le_iff_forall_lt_measure_zero]\n  intro b hb_neg\n  let s := {x | f x ≤ b}\n  have hs : NullMeasurableSet s μ := nullMeasurableSet_le hf.1.aemeasurable aemeasurable_const\n  have mus : μ s < ∞ := Integrable.measure_le_lt_top hf hb_neg\n  have h_int_gt : (∫ x in s, f x ∂μ) ≤ b * (μ s).toReal := by\n    have h_const_le : (∫ x in s, f x ∂μ) ≤ ∫ _ in s, b ∂μ := by\n      refine setIntegral_mono_ae_restrict hf.integrableOn (integrableOn_const.mpr (Or.inr mus)) ?_\n      rw [EventuallyLE, ae_restrict_iff₀ (hs.mono μ.restrict_le_self)]\n      exact Eventually.of_forall fun x hxs => hxs\n    rwa [setIntegral_const, smul_eq_mul, mul_comm] at h_const_le\n  contrapose! h_int_gt with H\n  calc\n    b * (μ s).toReal < 0 := mul_neg_of_neg_of_pos hb_neg <| ENNReal.toReal_pos H mus.ne\n    _ ≤ ∫ x in s, f x ∂μ := by\n      rw [← μ.restrict_toMeasurable mus.ne]\n      exact hf_zero _ (measurableSet_toMeasurable ..) (by rwa [measure_toMeasurable])\n\n"}
{"name":"MeasureTheory.ae_le_of_forall_setIntegral_le","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf g : α → Real\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nhf_le : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → LE.le (MeasureTheory.integral (μ.restrict s) fun x => f x) (MeasureTheory.integral (μ.restrict s) fun x => g x)\n⊢ (MeasureTheory.ae μ).EventuallyLE f g","decl":"theorem ae_le_of_forall_setIntegral_le {f g : α → ℝ} (hf : Integrable f μ) (hg : Integrable g μ)\n    (hf_le : ∀ s, MeasurableSet s → μ s < ∞ → (∫ x in s, f x ∂μ) ≤ ∫ x in s, g x ∂μ) :\n    f ≤ᵐ[μ] g := by\n  rw [← eventually_sub_nonneg]\n  refine ae_nonneg_of_forall_setIntegral_nonneg (hg.sub hf) fun s hs => ?_\n  rw [integral_sub' hg.integrableOn hf.integrableOn, sub_nonneg]\n  exact hf_le s hs\n\n"}
{"name":"MeasureTheory.ae_nonneg_restrict_of_forall_setIntegral_nonneg_inter","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nt : Set α\nhf : MeasureTheory.IntegrableOn f t μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ (Inter.inter s t)) Top.top → LE.le 0 (MeasureTheory.integral (μ.restrict (Inter.inter s t)) fun x => f x)\n⊢ (MeasureTheory.ae (μ.restrict t)).EventuallyLE 0 f","decl":"theorem ae_nonneg_restrict_of_forall_setIntegral_nonneg_inter {f : α → ℝ} {t : Set α}\n    (hf : IntegrableOn f t μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ (s ∩ t) < ∞ → 0 ≤ ∫ x in s ∩ t, f x ∂μ) :\n    0 ≤ᵐ[μ.restrict t] f := by\n  refine ae_nonneg_of_forall_setIntegral_nonneg hf fun s hs h's => ?_\n  simp_rw [Measure.restrict_restrict hs]\n  apply hf_zero s hs\n  rwa [Measure.restrict_apply hs] at h's\n\n"}
{"name":"MeasureTheory.ae_nonneg_of_forall_setIntegral_nonneg_of_sigmaFinite","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SigmaFinite μ\nf : α → Real\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → LE.le 0 (MeasureTheory.integral (μ.restrict s) fun x => f x)\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 f","decl":"theorem ae_nonneg_of_forall_setIntegral_nonneg_of_sigmaFinite [SigmaFinite μ] {f : α → ℝ}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ s < ∞ → 0 ≤ ∫ x in s, f x ∂μ) : 0 ≤ᵐ[μ] f := by\n  apply ae_of_forall_measure_lt_top_ae_restrict\n  intro t t_meas t_lt_top\n  apply ae_nonneg_restrict_of_forall_setIntegral_nonneg_inter (hf_int_finite t t_meas t_lt_top)\n  intro s s_meas _\n  exact\n    hf_zero _ (s_meas.inter t_meas)\n      (lt_of_le_of_lt (measure_mono (Set.inter_subset_right)) t_lt_top)\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.ae_nonneg_of_forall_setIntegral_nonneg","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → LE.le 0 (MeasureTheory.integral (μ.restrict s) fun x => f x)\n⊢ (MeasureTheory.ae μ).EventuallyLE 0 f","decl":"theorem AEFinStronglyMeasurable.ae_nonneg_of_forall_setIntegral_nonneg {f : α → ℝ}\n    (hf : AEFinStronglyMeasurable f μ)\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ s < ∞ → 0 ≤ ∫ x in s, f x ∂μ) : 0 ≤ᵐ[μ] f := by\n  let t := hf.sigmaFiniteSet\n  suffices 0 ≤ᵐ[μ.restrict t] f from\n    ae_of_ae_restrict_of_ae_restrict_compl _ this hf.ae_eq_zero_compl.symm.le\n  haveI : SigmaFinite (μ.restrict t) := hf.sigmaFinite_restrict\n  refine\n    ae_nonneg_of_forall_setIntegral_nonneg_of_sigmaFinite (fun s hs hμts => ?_) fun s hs hμts => ?_\n  · rw [IntegrableOn, Measure.restrict_restrict hs]\n    rw [Measure.restrict_apply hs] at hμts\n    exact hf_int_finite (s ∩ t) (hs.inter hf.measurableSet) hμts\n  · rw [Measure.restrict_restrict hs]\n    rw [Measure.restrict_apply hs] at hμts\n    exact hf_zero (s ∩ t) (hs.inter hf.measurableSet) hμts\n\n"}
{"name":"MeasureTheory.ae_nonneg_restrict_of_forall_setIntegral_nonneg","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → LE.le 0 (MeasureTheory.integral (μ.restrict s) fun x => f x)\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ (MeasureTheory.ae (μ.restrict t)).EventuallyLE 0 f","decl":"theorem ae_nonneg_restrict_of_forall_setIntegral_nonneg {f : α → ℝ}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ s < ∞ → 0 ≤ ∫ x in s, f x ∂μ) {t : Set α}\n    (ht : MeasurableSet t) (hμt : μ t ≠ ∞) : 0 ≤ᵐ[μ.restrict t] f := by\n  refine\n    ae_nonneg_restrict_of_forall_setIntegral_nonneg_inter\n      (hf_int_finite t ht (lt_top_iff_ne_top.mpr hμt)) fun s hs _ => ?_\n  refine hf_zero (s ∩ t) (hs.inter ht) ?_\n  exact (measure_mono Set.inter_subset_right).trans_lt (lt_top_iff_ne_top.mpr hμt)\n\n"}
{"name":"MeasureTheory.ae_eq_zero_restrict_of_forall_setIntegral_eq_zero_real","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\nf : α → Real\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ (MeasureTheory.ae (μ.restrict t)).EventuallyEq f 0","decl":"theorem ae_eq_zero_restrict_of_forall_setIntegral_eq_zero_real {f : α → ℝ}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = 0) {t : Set α}\n    (ht : MeasurableSet t) (hμt : μ t ≠ ∞) : f =ᵐ[μ.restrict t] 0 := by\n  suffices h_and : f ≤ᵐ[μ.restrict t] 0 ∧ 0 ≤ᵐ[μ.restrict t] f from\n    h_and.1.mp (h_and.2.mono fun x hx1 hx2 => le_antisymm hx2 hx1)\n  refine\n    ⟨?_,\n      ae_nonneg_restrict_of_forall_setIntegral_nonneg hf_int_finite\n        (fun s hs hμs => (hf_zero s hs hμs).symm.le) ht hμt⟩\n  suffices h_neg : 0 ≤ᵐ[μ.restrict t] -f by\n    refine h_neg.mono fun x hx => ?_\n    rw [Pi.neg_apply] at hx\n    simpa using hx\n  refine\n    ae_nonneg_restrict_of_forall_setIntegral_nonneg (fun s hs hμs => (hf_int_finite s hs hμs).neg)\n      (fun s hs hμs => ?_) ht hμt\n  simp_rw [Pi.neg_apply]\n  rw [integral_neg, neg_nonneg]\n  exact (hf_zero s hs hμs).le\n\n"}
{"name":"MeasureTheory.ae_eq_zero_restrict_of_forall_setIntegral_eq_zero","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ (MeasureTheory.ae (μ.restrict t)).EventuallyEq f 0","decl":"theorem ae_eq_zero_restrict_of_forall_setIntegral_eq_zero {f : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = 0) {t : Set α}\n    (ht : MeasurableSet t) (hμt : μ t ≠ ∞) : f =ᵐ[μ.restrict t] 0 := by\n  rcases (hf_int_finite t ht hμt.lt_top).aestronglyMeasurable.isSeparable_ae_range with\n    ⟨u, u_sep, hu⟩\n  refine ae_eq_zero_of_forall_dual_of_isSeparable ℝ u_sep (fun c => ?_) hu\n  refine ae_eq_zero_restrict_of_forall_setIntegral_eq_zero_real ?_ ?_ ht hμt\n  · intro s hs hμs\n    exact ContinuousLinearMap.integrable_comp c (hf_int_finite s hs hμs)\n  · intro s hs hμs\n    rw [ContinuousLinearMap.integral_comp_comm c (hf_int_finite s hs hμs), hf_zero s hs hμs]\n    exact ContinuousLinearMap.map_zero _\n\n"}
{"name":"MeasureTheory.ae_eq_restrict_of_forall_setIntegral_eq","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf g : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhg_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn g s μ\nhfg_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) (MeasureTheory.integral (μ.restrict s) fun x => g x)\nt : Set α\nht : MeasurableSet t\nhμt : Ne (μ t) Top.top\n⊢ (MeasureTheory.ae (μ.restrict t)).EventuallyEq f g","decl":"theorem ae_eq_restrict_of_forall_setIntegral_eq {f g : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hg_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn g s μ)\n    (hfg_zero : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = ∫ x in s, g x ∂μ)\n    {t : Set α} (ht : MeasurableSet t) (hμt : μ t ≠ ∞) : f =ᵐ[μ.restrict t] g := by\n  rw [← sub_ae_eq_zero]\n  have hfg' : ∀ s : Set α, MeasurableSet s → μ s < ∞ → (∫ x in s, (f - g) x ∂μ) = 0 := by\n    intro s hs hμs\n    rw [integral_sub' (hf_int_finite s hs hμs) (hg_int_finite s hs hμs)]\n    exact sub_eq_zero.mpr (hfg_zero s hs hμs)\n  have hfg_int : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn (f - g) s μ := fun s hs hμs =>\n    (hf_int_finite s hs hμs).sub (hg_int_finite s hs hμs)\n  exact ae_eq_zero_restrict_of_forall_setIntegral_eq_zero hfg_int hfg' ht hμt\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_setIntegral_eq_of_sigmaFinite","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : MeasureTheory.SigmaFinite μ\nf : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem ae_eq_zero_of_forall_setIntegral_eq_of_sigmaFinite [SigmaFinite μ] {f : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = 0) : f =ᵐ[μ] 0 := by\n  let S := spanningSets μ\n  rw [← @Measure.restrict_univ _ _ μ, ← iUnion_spanningSets μ, EventuallyEq, ae_iff,\n    Measure.restrict_apply' (MeasurableSet.iUnion (measurableSet_spanningSets μ))]\n  rw [Set.inter_iUnion, measure_iUnion_null_iff]\n  intro n\n  have h_meas_n : MeasurableSet (S n) := measurableSet_spanningSets μ n\n  have hμn : μ (S n) < ∞ := measure_spanningSets_lt_top μ n\n  rw [← Measure.restrict_apply' h_meas_n]\n  exact ae_eq_zero_restrict_of_forall_setIntegral_eq_zero hf_int_finite hf_zero h_meas_n hμn.ne\n\n"}
{"name":"MeasureTheory.ae_eq_of_forall_setIntegral_eq_of_sigmaFinite","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\ninst✝ : MeasureTheory.SigmaFinite μ\nf g : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhg_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn g s μ\nhfg_eq : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) (MeasureTheory.integral (μ.restrict s) fun x => g x)\n⊢ (MeasureTheory.ae μ).EventuallyEq f g","decl":"theorem ae_eq_of_forall_setIntegral_eq_of_sigmaFinite [SigmaFinite μ] {f g : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hg_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn g s μ)\n    (hfg_eq : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = ∫ x in s, g x ∂μ) :\n    f =ᵐ[μ] g := by\n  rw [← sub_ae_eq_zero]\n  have hfg : ∀ s : Set α, MeasurableSet s → μ s < ∞ → (∫ x in s, (f - g) x ∂μ) = 0 := by\n    intro s hs hμs\n    rw [integral_sub' (hf_int_finite s hs hμs) (hg_int_finite s hs hμs),\n      sub_eq_zero.mpr (hfg_eq s hs hμs)]\n  have hfg_int : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn (f - g) s μ := fun s hs hμs =>\n    (hf_int_finite s hs hμs).sub (hg_int_finite s hs hμs)\n  exact ae_eq_zero_of_forall_setIntegral_eq_of_sigmaFinite hfg_int hfg\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.ae_eq_zero_of_forall_setIntegral_eq_zero","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem AEFinStronglyMeasurable.ae_eq_zero_of_forall_setIntegral_eq_zero {f : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = 0)\n    (hf : AEFinStronglyMeasurable f μ) : f =ᵐ[μ] 0 := by\n  let t := hf.sigmaFiniteSet\n  suffices f =ᵐ[μ.restrict t] 0 from\n    ae_of_ae_restrict_of_ae_restrict_compl _ this hf.ae_eq_zero_compl\n  haveI : SigmaFinite (μ.restrict t) := hf.sigmaFinite_restrict\n  refine ae_eq_zero_of_forall_setIntegral_eq_of_sigmaFinite ?_ ?_\n  · intro s hs hμs\n    rw [IntegrableOn, Measure.restrict_restrict hs]\n    rw [Measure.restrict_apply hs] at hμs\n    exact hf_int_finite _ (hs.inter hf.measurableSet) hμs\n  · intro s hs hμs\n    rw [Measure.restrict_restrict hs]\n    rw [Measure.restrict_apply hs] at hμs\n    exact hf_zero _ (hs.inter hf.measurableSet) hμs\n\n"}
{"name":"MeasureTheory.AEFinStronglyMeasurable.ae_eq_of_forall_setIntegral_eq","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf g : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhg_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn g s μ\nhfg_eq : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) (MeasureTheory.integral (μ.restrict s) fun x => g x)\nhf : MeasureTheory.AEFinStronglyMeasurable f μ\nhg : MeasureTheory.AEFinStronglyMeasurable g μ\n⊢ (MeasureTheory.ae μ).EventuallyEq f g","decl":"theorem AEFinStronglyMeasurable.ae_eq_of_forall_setIntegral_eq {f g : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hg_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn g s μ)\n    (hfg_eq : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = ∫ x in s, g x ∂μ)\n    (hf : AEFinStronglyMeasurable f μ) (hg : AEFinStronglyMeasurable g μ) : f =ᵐ[μ] g := by\n  rw [← sub_ae_eq_zero]\n  have hfg : ∀ s : Set α, MeasurableSet s → μ s < ∞ → (∫ x in s, (f - g) x ∂μ) = 0 := by\n    intro s hs hμs\n    rw [integral_sub' (hf_int_finite s hs hμs) (hg_int_finite s hs hμs),\n      sub_eq_zero.mpr (hfg_eq s hs hμs)]\n  have hfg_int : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn (f - g) s μ := fun s hs hμs =>\n    (hf_int_finite s hs hμs).sub (hg_int_finite s hs hμs)\n  exact (hf.sub hg).ae_eq_zero_of_forall_setIntegral_eq_zero hfg_int hfg\n\n"}
{"name":"MeasureTheory.Lp.ae_eq_zero_of_forall_setIntegral_eq_zero","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\np : ENNReal\nf : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\nhp_ne_zero : Ne p 0\nhp_ne_top : Ne p Top.top\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn (↑↑f) s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq (↑↑f) 0","decl":"theorem Lp.ae_eq_zero_of_forall_setIntegral_eq_zero (f : Lp E p μ) (hp_ne_zero : p ≠ 0)\n    (hp_ne_top : p ≠ ∞) (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = 0) : f =ᵐ[μ] 0 :=\n  AEFinStronglyMeasurable.ae_eq_zero_of_forall_setIntegral_eq_zero hf_int_finite hf_zero\n    (Lp.finStronglyMeasurable _ hp_ne_zero hp_ne_top).aefinStronglyMeasurable\n\n"}
{"name":"MeasureTheory.Lp.ae_eq_of_forall_setIntegral_eq","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\np : ENNReal\nf g : Subtype fun x => Membership.mem (MeasureTheory.Lp E p μ) x\nhp_ne_zero : Ne p 0\nhp_ne_top : Ne p Top.top\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn (↑↑f) s μ\nhg_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn (↑↑g) s μ\nhfg : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => ↑↑f x) (MeasureTheory.integral (μ.restrict s) fun x => ↑↑g x)\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑↑f ↑↑g","decl":"theorem Lp.ae_eq_of_forall_setIntegral_eq (f g : Lp E p μ) (hp_ne_zero : p ≠ 0) (hp_ne_top : p ≠ ∞)\n    (hf_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn f s μ)\n    (hg_int_finite : ∀ s, MeasurableSet s → μ s < ∞ → IntegrableOn g s μ)\n    (hfg : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = ∫ x in s, g x ∂μ) :\n    f =ᵐ[μ] g :=\n  AEFinStronglyMeasurable.ae_eq_of_forall_setIntegral_eq hf_int_finite hg_int_finite hfg\n    (Lp.finStronglyMeasurable _ hp_ne_zero hp_ne_top).aefinStronglyMeasurable\n    (Lp.finStronglyMeasurable _ hp_ne_zero hp_ne_top).aefinStronglyMeasurable\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_setIntegral_eq_of_finStronglyMeasurable_trim","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm m0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nhm : LE.le m m0\nf : α → E\nhf_int_finite : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → MeasureTheory.IntegrableOn f s μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\nhf : MeasureTheory.FinStronglyMeasurable f (μ.trim hm)\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem ae_eq_zero_of_forall_setIntegral_eq_of_finStronglyMeasurable_trim (hm : m ≤ m0) {f : α → E}\n    (hf_int_finite : ∀ s, MeasurableSet[m] s → μ s < ∞ → IntegrableOn f s μ)\n    (hf_zero : ∀ s : Set α, MeasurableSet[m] s → μ s < ∞ → ∫ x in s, f x ∂μ = 0)\n    (hf : FinStronglyMeasurable f (μ.trim hm)) : f =ᵐ[μ] 0 := by\n  obtain ⟨t, ht_meas, htf_zero, htμ⟩ := hf.exists_set_sigmaFinite\n  haveI : SigmaFinite ((μ.restrict t).trim hm) := by rwa [restrict_trim hm μ ht_meas] at htμ\n  have htf_zero : f =ᵐ[μ.restrict tᶜ] 0 := by\n    rw [EventuallyEq, ae_restrict_iff' (MeasurableSet.compl (hm _ ht_meas))]\n    exact Eventually.of_forall htf_zero\n  have hf_meas_m : StronglyMeasurable[m] f := hf.stronglyMeasurable\n  suffices f =ᵐ[μ.restrict t] 0 from\n    ae_of_ae_restrict_of_ae_restrict_compl _ this htf_zero\n  refine measure_eq_zero_of_trim_eq_zero hm ?_\n  refine ae_eq_zero_of_forall_setIntegral_eq_of_sigmaFinite ?_ ?_\n  · intro s hs hμs\n    unfold IntegrableOn\n    rw [restrict_trim hm (μ.restrict t) hs, Measure.restrict_restrict (hm s hs)]\n    rw [← restrict_trim hm μ ht_meas, Measure.restrict_apply hs,\n      trim_measurableSet_eq hm (hs.inter ht_meas)] at hμs\n    refine Integrable.trim hm ?_ hf_meas_m\n    exact hf_int_finite _ (hs.inter ht_meas) hμs\n  · intro s hs hμs\n    rw [restrict_trim hm (μ.restrict t) hs, Measure.restrict_restrict (hm s hs)]\n    rw [← restrict_trim hm μ ht_meas, Measure.restrict_apply hs,\n      trim_measurableSet_eq hm (hs.inter ht_meas)] at hμs\n    rw [← integral_trim hm hf_meas_m]\n    exact hf_zero _ (hs.inter ht_meas) hμs\n\n"}
{"name":"MeasureTheory.Integrable.ae_eq_zero_of_forall_setIntegral_eq_zero","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf : α → E\nhf : MeasureTheory.Integrable f μ\nhf_zero : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"theorem Integrable.ae_eq_zero_of_forall_setIntegral_eq_zero {f : α → E} (hf : Integrable f μ)\n    (hf_zero : ∀ s, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = 0) : f =ᵐ[μ] 0 := by\n  have hf_Lp : Memℒp f 1 μ := memℒp_one_iff_integrable.mpr hf\n  let f_Lp := hf_Lp.toLp f\n  have hf_f_Lp : f =ᵐ[μ] f_Lp := (Memℒp.coeFn_toLp hf_Lp).symm\n  refine hf_f_Lp.trans ?_\n  refine Lp.ae_eq_zero_of_forall_setIntegral_eq_zero f_Lp one_ne_zero ENNReal.coe_ne_top ?_ ?_\n  · exact fun s _ _ => Integrable.integrableOn (L1.integrable_coeFn _)\n  · intro s hs hμs\n    rw [integral_congr_ae (ae_restrict_of_ae hf_f_Lp.symm)]\n    exact hf_zero s hs hμs\n\n"}
{"name":"MeasureTheory.Integrable.ae_eq_of_forall_setIntegral_eq","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"α : Type u_1\nE : Type u_2\nm0 : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nf g : α → E\nhf : MeasureTheory.Integrable f μ\nhg : MeasureTheory.Integrable g μ\nhfg : ∀ (s : Set α), MeasurableSet s → LT.lt (μ s) Top.top → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) (MeasureTheory.integral (μ.restrict s) fun x => g x)\n⊢ (MeasureTheory.ae μ).EventuallyEq f g","decl":"theorem Integrable.ae_eq_of_forall_setIntegral_eq (f g : α → E) (hf : Integrable f μ)\n    (hg : Integrable g μ)\n    (hfg : ∀ s : Set α, MeasurableSet s → μ s < ∞ → ∫ x in s, f x ∂μ = ∫ x in s, g x ∂μ) :\n    f =ᵐ[μ] g := by\n  rw [← sub_ae_eq_zero]\n  have hfg' : ∀ s : Set α, MeasurableSet s → μ s < ∞ → (∫ x in s, (f - g) x ∂μ) = 0 := by\n    intro s hs hμs\n    rw [integral_sub' hf.integrableOn hg.integrableOn]\n    exact sub_eq_zero.mpr (hfg s hs hμs)\n  exact Integrable.ae_eq_zero_of_forall_setIntegral_eq_zero (hf.sub hg) hfg'\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_setIntegral_isClosed_eq_zero","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"E : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : CompleteSpace E\nβ : Type u_3\ninst✝² : TopologicalSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nμ : MeasureTheory.Measure β\nf : β → E\nhf : MeasureTheory.Integrable f μ\nh'f : ∀ (s : Set β), IsClosed s → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"/-- If an integrable function has zero integral on all closed sets, then it is zero\nalmost everywhere. -/\nlemma ae_eq_zero_of_forall_setIntegral_isClosed_eq_zero {μ : Measure β} {f : β → E}\n    (hf : Integrable f μ) (h'f : ∀ (s : Set β), IsClosed s → ∫ x in s, f x ∂μ = 0) :\n    f =ᵐ[μ] 0 := by\n  suffices ∀ s, MeasurableSet s → ∫ x in s, f x ∂μ = 0 from\n    hf.ae_eq_zero_of_forall_setIntegral_eq_zero (fun s hs _ ↦ this s hs)\n  have A : ∀ (t : Set β), MeasurableSet t → ∫ (x : β) in t, f x ∂μ = 0\n      → ∫ (x : β) in tᶜ, f x ∂μ = 0 := by\n    intro t t_meas ht\n    have I : ∫ x, f x ∂μ = 0 := by rw [← setIntegral_univ]; exact h'f _ isClosed_univ\n    simpa [ht, I] using integral_add_compl t_meas hf\n  intro s hs\n  induction s, hs using MeasurableSet.induction_on_open with\n  | isOpen U hU => exact compl_compl U ▸ A _ hU.measurableSet.compl (h'f _ hU.isClosed_compl)\n  | compl s hs ihs => exact A s hs ihs\n  | iUnion g g_disj g_meas hg => simp [integral_iUnion g_meas g_disj hf.integrableOn, hg]\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_setIntegral_isCompact_eq_zero","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"E : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : CompleteSpace E\nβ : Type u_3\ninst✝⁴ : TopologicalSpace β\ninst✝³ : MeasurableSpace β\ninst✝² : BorelSpace β\ninst✝¹ : SigmaCompactSpace β\ninst✝ : R1Space β\nμ : MeasureTheory.Measure β\nf : β → E\nhf : MeasureTheory.Integrable f μ\nh'f : ∀ (s : Set β), IsCompact s → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"/-- If an integrable function has zero integral on all compact sets in a sigma-compact space, then\nit is zero almost everywhere. -/\nlemma ae_eq_zero_of_forall_setIntegral_isCompact_eq_zero\n    [SigmaCompactSpace β] [R1Space β] {μ : Measure β} {f : β → E} (hf : Integrable f μ)\n    (h'f : ∀ (s : Set β), IsCompact s → ∫ x in s, f x ∂μ = 0) :\n    f =ᵐ[μ] 0 := by\n  apply ae_eq_zero_of_forall_setIntegral_isClosed_eq_zero hf (fun s hs ↦ ?_)\n  let t : ℕ → Set β := fun n ↦ closure (compactCovering β n) ∩ s\n  suffices H : Tendsto (fun n ↦ ∫ x in t n, f x ∂μ) atTop (𝓝 (∫ x in s, f x ∂μ)) by\n    have A : ∀ n, ∫ x in t n, f x ∂μ = 0 :=\n      fun n ↦ h'f _ ((isCompact_compactCovering β n).closure.inter_right hs)\n    simp_rw [A, tendsto_const_nhds_iff] at H\n    exact H.symm\n  have B : s = ⋃ n, t n := by\n    rw [← Set.iUnion_inter, iUnion_closure_compactCovering, Set.univ_inter]\n  rw [B]\n  apply tendsto_setIntegral_of_monotone\n  · intros n\n    exact (isClosed_closure.inter hs).measurableSet\n  · intros m n hmn\n    simp only [t, Set.le_iff_subset]\n    gcongr\n  · exact hf.integrableOn\n\n"}
{"name":"MeasureTheory.ae_eq_zero_of_forall_setIntegral_isCompact_eq_zero'","module":"Mathlib.MeasureTheory.Function.AEEqOfIntegral","initialProofState":"E : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace Real E\ninst✝⁵ : CompleteSpace E\nβ : Type u_3\ninst✝⁴ : TopologicalSpace β\ninst✝³ : MeasurableSpace β\ninst✝² : BorelSpace β\ninst✝¹ : SigmaCompactSpace β\ninst✝ : R1Space β\nμ : MeasureTheory.Measure β\nf : β → E\nhf : MeasureTheory.LocallyIntegrable f μ\nh'f : ∀ (s : Set β), IsCompact s → Eq (MeasureTheory.integral (μ.restrict s) fun x => f x) 0\n⊢ (MeasureTheory.ae μ).EventuallyEq f 0","decl":"/-- If a locally integrable function has zero integral on all compact sets in a sigma-compact space,\nthen it is zero almost everywhere. -/\nlemma ae_eq_zero_of_forall_setIntegral_isCompact_eq_zero'\n    [SigmaCompactSpace β] [R1Space β] {μ : Measure β} {f : β → E} (hf : LocallyIntegrable f μ)\n    (h'f : ∀ (s : Set β), IsCompact s → ∫ x in s, f x ∂μ = 0) :\n    f =ᵐ[μ] 0 := by\n  rw [← μ.restrict_univ, ← iUnion_closure_compactCovering]\n  apply (ae_restrict_iUnion_iff _ _).2 (fun n ↦ ?_)\n  apply ae_eq_zero_of_forall_setIntegral_isCompact_eq_zero\n  · exact hf.integrableOn_isCompact (isCompact_compactCovering β n).closure\n  · intro s hs\n    rw [Measure.restrict_restrict' measurableSet_closure]\n    exact h'f _ (hs.inter_right isClosed_closure)\n\n"}
