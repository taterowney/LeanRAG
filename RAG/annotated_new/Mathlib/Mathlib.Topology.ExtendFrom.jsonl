{"name":"tendsto_extendFrom","module":"Mathlib.Topology.ExtendFrom","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nA : Set X\nf : X → Y\nx : X\nh : Exists fun y => Filter.Tendsto f (nhdsWithin x A) (nhds y)\n⊢ Filter.Tendsto f (nhdsWithin x A) (nhds (extendFrom A f x))","decl":"/-- If `f` converges to some `y` as `x` tends to `x₀` within `A`,\nthen `f` tends to `extendFrom A f x` as `x` tends to `x₀`. -/\ntheorem tendsto_extendFrom {A : Set X} {f : X → Y} {x : X} (h : ∃ y, Tendsto f (𝓝[A] x) (𝓝 y)) :\n    Tendsto f (𝓝[A] x) (𝓝 <| extendFrom A f x) :=\n  tendsto_nhds_limUnder h\n\n"}
{"name":"extendFrom_eq","module":"Mathlib.Topology.ExtendFrom","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T2Space Y\nA : Set X\nf : X → Y\nx : X\ny : Y\nhx : Membership.mem (closure A) x\nhf : Filter.Tendsto f (nhdsWithin x A) (nhds y)\n⊢ Eq (extendFrom A f x) y","decl":"theorem extendFrom_eq [T2Space Y] {A : Set X} {f : X → Y} {x : X} {y : Y} (hx : x ∈ closure A)\n    (hf : Tendsto f (𝓝[A] x) (𝓝 y)) : extendFrom A f x = y :=\n  haveI := mem_closure_iff_nhdsWithin_neBot.mp hx\n  tendsto_nhds_unique (tendsto_nhds_limUnder ⟨y, hf⟩) hf\n\n"}
{"name":"extendFrom_extends","module":"Mathlib.Topology.ExtendFrom","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : T2Space Y\nf : X → Y\nA : Set X\nhf : ContinuousOn f A\nx : X\na✝ : Membership.mem A x\n⊢ Eq (extendFrom A f x) (f x)","decl":"theorem extendFrom_extends [T2Space Y] {f : X → Y} {A : Set X} (hf : ContinuousOn f A) :\n    ∀ x ∈ A, extendFrom A f x = f x :=\n  fun x x_in ↦ extendFrom_eq (subset_closure x_in) (hf x x_in)\n\n"}
{"name":"continuousOn_extendFrom","module":"Mathlib.Topology.ExtendFrom","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : RegularSpace Y\nf : X → Y\nA B : Set X\nhB : HasSubset.Subset B (closure A)\nhf : ∀ (x : X), Membership.mem B x → Exists fun y => Filter.Tendsto f (nhdsWithin x A) (nhds y)\n⊢ ContinuousOn (extendFrom A f) B","decl":"/-- If `f` is a function to a T₃ space `Y` which has a limit within `A` at any\npoint of a set `B ⊆ closure A`, then `extendFrom A f` is continuous on `B`. -/\ntheorem continuousOn_extendFrom [RegularSpace Y] {f : X → Y} {A B : Set X} (hB : B ⊆ closure A)\n    (hf : ∀ x ∈ B, ∃ y, Tendsto f (𝓝[A] x) (𝓝 y)) : ContinuousOn (extendFrom A f) B := by\n  set φ := extendFrom A f\n  intro x x_in\n  suffices ∀ V' ∈ 𝓝 (φ x), IsClosed V' → φ ⁻¹' V' ∈ 𝓝[B] x by\n    simpa [ContinuousWithinAt, (closed_nhds_basis (φ x)).tendsto_right_iff]\n  intro V' V'_in V'_closed\n  obtain ⟨V, V_in, V_op, hV⟩ : ∃ V ∈ 𝓝 x, IsOpen V ∧ V ∩ A ⊆ f ⁻¹' V' := by\n    have := tendsto_extendFrom (hf x x_in)\n    rcases (nhdsWithin_basis_open x A).tendsto_left_iff.mp this V' V'_in with ⟨V, ⟨hxV, V_op⟩, hV⟩\n    exact ⟨V, IsOpen.mem_nhds V_op hxV, V_op, hV⟩\n  suffices ∀ y ∈ V ∩ B, φ y ∈ V' from\n    mem_of_superset (inter_mem_inf V_in <| mem_principal_self B) this\n  rintro y ⟨hyV, hyB⟩\n  haveI := mem_closure_iff_nhdsWithin_neBot.mp (hB hyB)\n  have limy : Tendsto f (𝓝[A] y) (𝓝 <| φ y) := tendsto_extendFrom (hf y hyB)\n  have hVy : V ∈ 𝓝 y := IsOpen.mem_nhds V_op hyV\n  have : V ∩ A ∈ 𝓝[A] y := by simpa only [inter_comm] using inter_mem_nhdsWithin A hVy\n  exact V'_closed.mem_of_tendsto limy (mem_of_superset this hV)\n\n"}
{"name":"continuous_extendFrom","module":"Mathlib.Topology.ExtendFrom","initialProofState":"X : Type u_1\nY : Type u_2\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : RegularSpace Y\nf : X → Y\nA : Set X\nhA : Dense A\nhf : ∀ (x : X), Exists fun y => Filter.Tendsto f (nhdsWithin x A) (nhds y)\n⊢ Continuous (extendFrom A f)","decl":"/-- If a function `f` to a T₃ space `Y` has a limit within a\ndense set `A` for any `x`, then `extendFrom A f` is continuous. -/\ntheorem continuous_extendFrom [RegularSpace Y] {f : X → Y} {A : Set X} (hA : Dense A)\n    (hf : ∀ x, ∃ y, Tendsto f (𝓝[A] x) (𝓝 y)) : Continuous (extendFrom A f) := by\n  rw [continuous_iff_continuousOn_univ]\n  exact continuousOn_extendFrom (fun x _ ↦ hA x) (by simpa using hf)\n"}
