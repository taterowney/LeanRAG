{"name":"MeasureTheory.Measure.IicSnd_apply","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Real\ns : Set α\nhs : MeasurableSet s\n⊢ Eq ((ρ.IicSnd r) s) (ρ (SProd.sprod s (Set.Iic r)))","decl":"theorem IicSnd_apply (r : ℝ) {s : Set α} (hs : MeasurableSet s) :\n    ρ.IicSnd r s = ρ (s ×ˢ Iic r) := by\n  rw [IicSnd, fst_apply hs, restrict_apply' (MeasurableSet.univ.prod measurableSet_Iic),\n    univ_prod, Set.prod_eq]\n\n"}
{"name":"MeasureTheory.Measure.IicSnd_univ","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Real\n⊢ Eq ((ρ.IicSnd r) Set.univ) (ρ (SProd.sprod Set.univ (Set.Iic r)))","decl":"theorem IicSnd_univ (r : ℝ) : ρ.IicSnd r univ = ρ (univ ×ˢ Iic r) :=\n  IicSnd_apply ρ r MeasurableSet.univ\n\n"}
{"name":"MeasureTheory.Measure.IicSnd_mono","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr r' : Real\nh_le : LE.le r r'\n⊢ LE.le (ρ.IicSnd r) (ρ.IicSnd r')","decl":"@[gcongr]\ntheorem IicSnd_mono {r r' : ℝ} (h_le : r ≤ r') : ρ.IicSnd r ≤ ρ.IicSnd r' := by\n  unfold IicSnd; gcongr\n\n"}
{"name":"MeasureTheory.Measure.IicSnd_le_fst","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Real\n⊢ LE.le (ρ.IicSnd r) ρ.fst","decl":"theorem IicSnd_le_fst (r : ℝ) : ρ.IicSnd r ≤ ρ.fst :=\n  fst_mono restrict_le_self\n\n"}
{"name":"MeasureTheory.Measure.IicSnd_ac_fst","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Real\n⊢ (ρ.IicSnd r).AbsolutelyContinuous ρ.fst","decl":"theorem IicSnd_ac_fst (r : ℝ) : ρ.IicSnd r ≪ ρ.fst :=\n  Measure.absolutelyContinuous_of_le (IicSnd_le_fst ρ r)\n\n"}
{"name":"MeasureTheory.Measure.IsFiniteMeasure.IicSnd","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nr : Real\n⊢ MeasureTheory.IsFiniteMeasure (ρ.IicSnd r)","decl":"theorem IsFiniteMeasure.IicSnd {ρ : Measure (α × ℝ)} [IsFiniteMeasure ρ] (r : ℝ) :\n    IsFiniteMeasure (ρ.IicSnd r) :=\n  isFiniteMeasure_of_le _ (IicSnd_le_fst ρ _)\n\n"}
{"name":"MeasureTheory.Measure.iInf_IicSnd_gt","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nt : Rat\ns : Set α\nhs : MeasurableSet s\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Eq (iInf fun r => (ρ.IicSnd ↑↑r) s) ((ρ.IicSnd ↑t) s)","decl":"theorem iInf_IicSnd_gt (t : ℚ) {s : Set α} (hs : MeasurableSet s) [IsFiniteMeasure ρ] :\n    ⨅ r : { r' : ℚ // t < r' }, ρ.IicSnd r s = ρ.IicSnd t s := by\n  simp_rw [ρ.IicSnd_apply _ hs, Measure.iInf_rat_gt_prod_Iic hs]\n\n"}
{"name":"MeasureTheory.Measure.tendsto_IicSnd_atTop","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ns : Set α\nhs : MeasurableSet s\n⊢ Filter.Tendsto (fun r => (ρ.IicSnd ↑r) s) Filter.atTop (nhds (ρ.fst s))","decl":"theorem tendsto_IicSnd_atTop {s : Set α} (hs : MeasurableSet s) :\n    Tendsto (fun r : ℚ ↦ ρ.IicSnd r s) atTop (𝓝 (ρ.fst s)) := by\n  simp_rw [ρ.IicSnd_apply _ hs, fst_apply hs, ← prod_univ]\n  rw [← Real.iUnion_Iic_rat, prod_iUnion]\n  apply tendsto_measure_iUnion_atTop\n  exact monotone_const.set_prod Rat.cast_mono.Iic\n\n"}
{"name":"MeasureTheory.Measure.tendsto_IicSnd_atBot","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\ns : Set α\nhs : MeasurableSet s\n⊢ Filter.Tendsto (fun r => (ρ.IicSnd ↑r) s) Filter.atBot (nhds 0)","decl":"theorem tendsto_IicSnd_atBot [IsFiniteMeasure ρ] {s : Set α} (hs : MeasurableSet s) :\n    Tendsto (fun r : ℚ ↦ ρ.IicSnd r s) atBot (𝓝 0) := by\n  simp_rw [ρ.IicSnd_apply _ hs]\n  have h_empty : ρ (s ×ˢ ∅) = 0 := by simp only [prod_empty, measure_empty]\n  rw [← h_empty, ← Real.iInter_Iic_rat, prod_iInter]\n  suffices h_neg :\n      Tendsto (fun r : ℚ ↦ ρ (s ×ˢ Iic ↑(-r))) atTop (𝓝 (ρ (⋂ r : ℚ, s ×ˢ Iic ↑(-r)))) by\n    have h_inter_eq : ⋂ r : ℚ, s ×ˢ Iic ↑(-r) = ⋂ r : ℚ, s ×ˢ Iic (r : ℝ) := by\n      ext1 x\n      simp only [Rat.cast_eq_id, id, mem_iInter, mem_prod, mem_Iic]\n      refine ⟨fun h i ↦ ⟨(h i).1, ?_⟩, fun h i ↦ ⟨(h i).1, ?_⟩⟩ <;> have h' := h (-i)\n      · rw [neg_neg] at h'; exact h'.2\n      · exact h'.2\n    rw [h_inter_eq] at h_neg\n    have h_fun_eq : (fun r : ℚ ↦ ρ (s ×ˢ Iic (r : ℝ))) = fun r : ℚ ↦ ρ (s ×ˢ Iic ↑(- -r)) := by\n      simp_rw [neg_neg]\n    rw [h_fun_eq]\n    exact h_neg.comp tendsto_neg_atBot_atTop\n  refine tendsto_measure_iInter_atTop (fun q ↦ (hs.prod measurableSet_Iic).nullMeasurableSet)\n    ?_ ⟨0, measure_ne_top ρ _⟩\n  refine fun q r hqr ↦ Set.prod_mono subset_rfl fun x hx ↦ ?_\n  simp only [Rat.cast_neg, mem_Iic] at hx ⊢\n  refine hx.trans (neg_le_neg ?_)\n  exact mod_cast hqr\n\n"}
{"name":"ProbabilityTheory.measurable_preCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Rat\n⊢ Measurable (ProbabilityTheory.preCDF ρ r)","decl":"theorem measurable_preCDF {ρ : Measure (α × ℝ)} {r : ℚ} : Measurable (preCDF ρ r) :=\n  Measure.measurable_rnDeriv _ _\n\n"}
{"name":"ProbabilityTheory.measurable_preCDF'","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\n⊢ Measurable fun a r => (ProbabilityTheory.preCDF ρ r a).toReal","decl":"lemma measurable_preCDF' {ρ : Measure (α × ℝ)} :\n    Measurable fun a r ↦ (preCDF ρ r a).toReal := by\n  rw [measurable_pi_iff]\n  exact fun _ ↦ measurable_preCDF.ennreal_toReal\n\n"}
{"name":"ProbabilityTheory.withDensity_preCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Rat\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Eq (ρ.fst.withDensity (ProbabilityTheory.preCDF ρ r)) (ρ.IicSnd ↑r)","decl":"theorem withDensity_preCDF (ρ : Measure (α × ℝ)) (r : ℚ) [IsFiniteMeasure ρ] :\n    ρ.fst.withDensity (preCDF ρ r) = ρ.IicSnd r :=\n  Measure.absolutelyContinuous_iff_withDensity_rnDeriv_eq.mp (Measure.IicSnd_ac_fst ρ r)\n\n"}
{"name":"ProbabilityTheory.setLIntegral_preCDF_fst","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Rat\ns : Set α\nhs : MeasurableSet s\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Eq (MeasureTheory.lintegral (ρ.fst.restrict s) fun x => ProbabilityTheory.preCDF ρ r x) ((ρ.IicSnd ↑r) s)","decl":"theorem setLIntegral_preCDF_fst (ρ : Measure (α × ℝ)) (r : ℚ) {s : Set α} (hs : MeasurableSet s)\n    [IsFiniteMeasure ρ] : ∫⁻ x in s, preCDF ρ r x ∂ρ.fst = ρ.IicSnd r s := by\n  have : ∀ r, ∫⁻ x in s, preCDF ρ r x ∂ρ.fst = ∫⁻ x in s, (preCDF ρ r * 1) x ∂ρ.fst := by\n    simp only [mul_one, eq_self_iff_true, forall_const]\n  rw [this, ← setLIntegral_withDensity_eq_setLIntegral_mul _ measurable_preCDF _ hs]\n  · simp only [withDensity_preCDF ρ r, Pi.one_apply, lintegral_one, Measure.restrict_apply,\n      MeasurableSet.univ, univ_inter]\n  · rw [(_ : (1 : α → ℝ≥0∞) = fun _ ↦ 1)]\n    exacts [measurable_const, rfl]\n\n"}
{"name":"ProbabilityTheory.lintegral_preCDF_fst","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Rat\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Eq (MeasureTheory.lintegral ρ.fst fun x => ProbabilityTheory.preCDF ρ r x) ((ρ.IicSnd ↑r) Set.univ)","decl":"lemma lintegral_preCDF_fst (ρ : Measure (α × ℝ)) (r : ℚ) [IsFiniteMeasure ρ] :\n    ∫⁻ x, preCDF ρ r x ∂ρ.fst = ρ.IicSnd r univ := by\n  rw [← setLIntegral_univ, setLIntegral_preCDF_fst ρ r MeasurableSet.univ]\n\n"}
{"name":"ProbabilityTheory.monotone_preCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Filter.Eventually (fun a => Monotone fun r => ProbabilityTheory.preCDF ρ r a) (MeasureTheory.ae ρ.fst)","decl":"theorem monotone_preCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] :\n    ∀ᵐ a ∂ρ.fst, Monotone fun r ↦ preCDF ρ r a := by\n  simp_rw [Monotone, ae_all_iff]\n  refine fun r r' hrr' ↦ ae_le_of_forall_setLIntegral_le_of_sigmaFinite measurable_preCDF\n    fun s hs _ ↦ ?_\n  rw [setLIntegral_preCDF_fst ρ r hs, setLIntegral_preCDF_fst ρ r' hs]\n  exact Measure.IicSnd_mono ρ (mod_cast hrr') s\n\n"}
{"name":"ProbabilityTheory.preCDF_le_one","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Filter.Eventually (fun a => ∀ (r : Rat), LE.le (ProbabilityTheory.preCDF ρ r a) 1) (MeasureTheory.ae ρ.fst)","decl":"theorem preCDF_le_one (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] :\n    ∀ᵐ a ∂ρ.fst, ∀ r, preCDF ρ r a ≤ 1 := by\n  rw [ae_all_iff]\n  refine fun r ↦ ae_le_of_forall_setLIntegral_le_of_sigmaFinite measurable_preCDF fun s hs _ ↦ ?_\n  rw [setLIntegral_preCDF_fst ρ r hs]\n  simp only [Pi.one_apply, lintegral_one, Measure.restrict_apply, MeasurableSet.univ, univ_inter]\n  exact Measure.IicSnd_le_fst ρ r s\n\n"}
{"name":"ProbabilityTheory.setIntegral_preCDF_fst","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Rat\ns : Set α\nhs : MeasurableSet s\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Eq (MeasureTheory.integral (ρ.fst.restrict s) fun x => (ProbabilityTheory.preCDF ρ r x).toReal) ((ρ.IicSnd ↑r) s).toReal","decl":"lemma setIntegral_preCDF_fst (ρ : Measure (α × ℝ)) (r : ℚ) {s : Set α} (hs : MeasurableSet s)\n    [IsFiniteMeasure ρ] :\n    ∫ x in s, (preCDF ρ r x).toReal ∂ρ.fst = (ρ.IicSnd r s).toReal := by\n  rw [integral_toReal]\n  · rw [setLIntegral_preCDF_fst _ _ hs]\n  · exact measurable_preCDF.aemeasurable\n  · refine ae_restrict_of_ae ?_\n    filter_upwards [preCDF_le_one ρ] with a ha\n    exact (ha r).trans_lt ENNReal.one_lt_top\n\n"}
{"name":"ProbabilityTheory.integral_preCDF_fst","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nr : Rat\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ Eq (MeasureTheory.integral ρ.fst fun x => (ProbabilityTheory.preCDF ρ r x).toReal) ((ρ.IicSnd ↑r) Set.univ).toReal","decl":"lemma integral_preCDF_fst (ρ : Measure (α × ℝ)) (r : ℚ) [IsFiniteMeasure ρ] :\n    ∫ x, (preCDF ρ r x).toReal ∂ρ.fst = (ρ.IicSnd r univ).toReal := by\n  rw [← setIntegral_univ, setIntegral_preCDF_fst ρ _ MeasurableSet.univ]\n\n"}
{"name":"ProbabilityTheory.integrable_preCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nx : Rat\n⊢ MeasureTheory.Integrable (fun a => (ProbabilityTheory.preCDF ρ x a).toReal) ρ.fst","decl":"lemma integrable_preCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (x : ℚ) :\n    Integrable (fun a ↦ (preCDF ρ x a).toReal) ρ.fst := by\n  refine integrable_of_forall_fin_meas_le _ (measure_lt_top ρ.fst univ) ?_ fun t _ _ ↦ ?_\n  · exact measurable_preCDF.ennreal_toReal.aestronglyMeasurable\n  · simp_rw [← ofReal_norm_eq_enorm, Real.norm_of_nonneg ENNReal.toReal_nonneg]\n    rw [← lintegral_one]\n    refine (setLIntegral_le_lintegral _ _).trans (lintegral_mono_ae ?_)\n    filter_upwards [preCDF_le_one ρ] with a ha using ENNReal.ofReal_toReal_le.trans (ha _)\n\n"}
{"name":"ProbabilityTheory.isRatCondKernelCDFAux_preCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ ProbabilityTheory.IsRatCondKernelCDFAux (fun p r => (ProbabilityTheory.preCDF ρ r p.2).toReal) (ProbabilityTheory.Kernel.const Unit ρ) (ProbabilityTheory.Kernel.const Unit ρ.fst)","decl":"lemma isRatCondKernelCDFAux_preCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] :\n    IsRatCondKernelCDFAux (fun p r ↦ (preCDF ρ r p.2).toReal)\n      (Kernel.const Unit ρ) (Kernel.const Unit ρ.fst) where\n  measurable := measurable_preCDF'.comp measurable_snd\n  mono' a r r' hrr' := by\n    filter_upwards [monotone_preCDF ρ, preCDF_le_one ρ] with a h₁ h₂\n    exact ENNReal.toReal_mono ((h₂ _).trans_lt ENNReal.one_lt_top).ne (h₁ hrr')\n  nonneg' _ q := by simp\n  le_one' a q := by\n    simp only [Kernel.const_apply, forall_const]\n    filter_upwards [preCDF_le_one ρ] with a ha\n    refine ENNReal.toReal_le_of_le_ofReal zero_le_one ?_\n    simp [ha]\n  tendsto_integral_of_antitone a s _ hs_tendsto := by\n    simp_rw [Kernel.const_apply, integral_preCDF_fst ρ]\n    have h := ρ.tendsto_IicSnd_atBot MeasurableSet.univ\n    rw [← ENNReal.zero_toReal]\n    have h0 : Tendsto ENNReal.toReal (𝓝 0) (𝓝 0) :=\n      ENNReal.continuousAt_toReal ENNReal.zero_ne_top\n    exact h0.comp (h.comp hs_tendsto)\n  tendsto_integral_of_monotone a s _ hs_tendsto := by\n    simp_rw [Kernel.const_apply, integral_preCDF_fst ρ]\n    have h := ρ.tendsto_IicSnd_atTop MeasurableSet.univ\n    have h0 : Tendsto ENNReal.toReal (𝓝 (ρ.fst univ)) (𝓝 (ρ.fst univ).toReal) :=\n      ENNReal.continuousAt_toReal (measure_ne_top _ _)\n    exact h0.comp (h.comp hs_tendsto)\n  integrable _ q := integrable_preCDF ρ q\n  setIntegral a s hs q := by rw [Kernel.const_apply, Kernel.const_apply,\n    setIntegral_preCDF_fst _ _ hs, Measure.IicSnd_apply _ _ hs]\n\n"}
{"name":"ProbabilityTheory.isRatCondKernelCDF_preCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ ProbabilityTheory.IsRatCondKernelCDF (fun p r => (ProbabilityTheory.preCDF ρ r p.2).toReal) (ProbabilityTheory.Kernel.const Unit ρ) (ProbabilityTheory.Kernel.const Unit ρ.fst)","decl":"lemma isRatCondKernelCDF_preCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] :\n    IsRatCondKernelCDF (fun p r ↦ (preCDF ρ r p.2).toReal)\n      (Kernel.const Unit ρ) (Kernel.const Unit ρ.fst) :=\n  (isRatCondKernelCDFAux_preCDF ρ).isRatCondKernelCDF\n\n"}
{"name":"ProbabilityTheory.condCDF_eq_stieltjesOfMeasurableRat_unit_prod","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\n⊢ Eq (ProbabilityTheory.condCDF ρ a) (ProbabilityTheory.stieltjesOfMeasurableRat (fun p r => (ProbabilityTheory.preCDF ρ r p.2).toReal) ⋯ { fst := Unit.unit, snd := a })","decl":"lemma condCDF_eq_stieltjesOfMeasurableRat_unit_prod (ρ : Measure (α × ℝ)) (a : α) :\n    condCDF ρ a = stieltjesOfMeasurableRat (fun (p : Unit × α) r ↦ (preCDF ρ r p.2).toReal)\n      (measurable_preCDF'.comp measurable_snd) ((), a) := by\n  ext x\n  rw [condCDF, ← stieltjesOfMeasurableRat_unit_prod]\n\n"}
{"name":"ProbabilityTheory.isCondKernelCDF_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\n⊢ ProbabilityTheory.IsCondKernelCDF (fun p => ProbabilityTheory.condCDF ρ p.2) (ProbabilityTheory.Kernel.const Unit ρ) (ProbabilityTheory.Kernel.const Unit ρ.fst)","decl":"lemma isCondKernelCDF_condCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] :\n    IsCondKernelCDF (fun p : Unit × α ↦ condCDF ρ p.2) (Kernel.const Unit ρ)\n      (Kernel.const Unit ρ.fst) := by\n  simp_rw [condCDF_eq_stieltjesOfMeasurableRat_unit_prod ρ]\n  exact isCondKernelCDF_stieltjesOfMeasurableRat (isRatCondKernelCDF_preCDF ρ)\n\n"}
{"name":"ProbabilityTheory.condCDF_nonneg","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\nr : Real\n⊢ LE.le 0 (↑(ProbabilityTheory.condCDF ρ a) r)","decl":"/-- The conditional cdf is non-negative for all `a : α`. -/\ntheorem condCDF_nonneg (ρ : Measure (α × ℝ)) (a : α) (r : ℝ) : 0 ≤ condCDF ρ a r :=\n  stieltjesOfMeasurableRat_nonneg _ a r\n\n"}
{"name":"ProbabilityTheory.condCDF_le_one","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\nx : Real\n⊢ LE.le (↑(ProbabilityTheory.condCDF ρ a) x) 1","decl":"/-- The conditional cdf is lower or equal to 1 for all `a : α`. -/\ntheorem condCDF_le_one (ρ : Measure (α × ℝ)) (a : α) (x : ℝ) : condCDF ρ a x ≤ 1 :=\n  stieltjesOfMeasurableRat_le_one _ _ _\n\n"}
{"name":"ProbabilityTheory.tendsto_condCDF_atBot","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\n⊢ Filter.Tendsto (↑(ProbabilityTheory.condCDF ρ a)) Filter.atBot (nhds 0)","decl":"/-- The conditional cdf tends to 0 at -∞ for all `a : α`. -/\ntheorem tendsto_condCDF_atBot (ρ : Measure (α × ℝ)) (a : α) :\n    Tendsto (condCDF ρ a) atBot (𝓝 0) := tendsto_stieltjesOfMeasurableRat_atBot _ _\n\n"}
{"name":"ProbabilityTheory.tendsto_condCDF_atTop","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\n⊢ Filter.Tendsto (↑(ProbabilityTheory.condCDF ρ a)) Filter.atTop (nhds 1)","decl":"/-- The conditional cdf tends to 1 at +∞ for all `a : α`. -/\ntheorem tendsto_condCDF_atTop (ρ : Measure (α × ℝ)) (a : α) :\n    Tendsto (condCDF ρ a) atTop (𝓝 1) := tendsto_stieltjesOfMeasurableRat_atTop _ _\n\n"}
{"name":"ProbabilityTheory.condCDF_ae_eq","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nr : Rat\n⊢ (MeasureTheory.ae ρ.fst).EventuallyEq (fun a => ↑(ProbabilityTheory.condCDF ρ a) ↑r) fun a => (ProbabilityTheory.preCDF ρ r a).toReal","decl":"theorem condCDF_ae_eq (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (r : ℚ) :\n    (fun a ↦ condCDF ρ a r) =ᵐ[ρ.fst] fun a ↦ (preCDF ρ r a).toReal := by\n  simp_rw [condCDF_eq_stieltjesOfMeasurableRat_unit_prod ρ]\n  exact stieltjesOfMeasurableRat_ae_eq (isRatCondKernelCDF_preCDF ρ) () r\n\n"}
{"name":"ProbabilityTheory.ofReal_condCDF_ae_eq","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nr : Rat\n⊢ (MeasureTheory.ae ρ.fst).EventuallyEq (fun a => ENNReal.ofReal (↑(ProbabilityTheory.condCDF ρ a) ↑r)) (ProbabilityTheory.preCDF ρ r)","decl":"theorem ofReal_condCDF_ae_eq (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (r : ℚ) :\n    (fun a ↦ ENNReal.ofReal (condCDF ρ a r)) =ᵐ[ρ.fst] preCDF ρ r := by\n  filter_upwards [condCDF_ae_eq ρ r, preCDF_le_one ρ] with a ha ha_le_one\n  rw [ha, ENNReal.ofReal_toReal]\n  exact ((ha_le_one r).trans_lt ENNReal.one_lt_top).ne\n\n"}
{"name":"ProbabilityTheory.measurable_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nx : Real\n⊢ Measurable fun a => ↑(ProbabilityTheory.condCDF ρ a) x","decl":"/-- The conditional cdf is a measurable function of `a : α` for all `x : ℝ`. -/\ntheorem measurable_condCDF (ρ : Measure (α × ℝ)) (x : ℝ) : Measurable fun a ↦ condCDF ρ a x :=\n  measurable_stieltjesOfMeasurableRat _ _\n\n"}
{"name":"ProbabilityTheory.stronglyMeasurable_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\nx : Real\n⊢ MeasureTheory.StronglyMeasurable fun a => ↑(ProbabilityTheory.condCDF ρ a) x","decl":"/-- The conditional cdf is a strongly measurable function of `a : α` for all `x : ℝ`. -/\ntheorem stronglyMeasurable_condCDF (ρ : Measure (α × ℝ)) (x : ℝ) :\n    StronglyMeasurable fun a ↦ condCDF ρ a x := stronglyMeasurable_stieltjesOfMeasurableRat _ _\n\n"}
{"name":"ProbabilityTheory.setLIntegral_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nx : Real\ns : Set α\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.lintegral (ρ.fst.restrict s) fun a => ENNReal.ofReal (↑(ProbabilityTheory.condCDF ρ a) x)) (ρ (SProd.sprod s (Set.Iic x)))","decl":"theorem setLIntegral_condCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (x : ℝ) {s : Set α}\n    (hs : MeasurableSet s) :\n    ∫⁻ a in s, ENNReal.ofReal (condCDF ρ a x) ∂ρ.fst = ρ (s ×ˢ Iic x) :=\n  (isCondKernelCDF_condCDF ρ).setLIntegral () hs x\n\n"}
{"name":"ProbabilityTheory.lintegral_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nx : Real\n⊢ Eq (MeasureTheory.lintegral ρ.fst fun a => ENNReal.ofReal (↑(ProbabilityTheory.condCDF ρ a) x)) (ρ (SProd.sprod Set.univ (Set.Iic x)))","decl":"theorem lintegral_condCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (x : ℝ) :\n    ∫⁻ a, ENNReal.ofReal (condCDF ρ a x) ∂ρ.fst = ρ (univ ×ˢ Iic x) :=\n  (isCondKernelCDF_condCDF ρ).lintegral () x\n\n"}
{"name":"ProbabilityTheory.integrable_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nx : Real\n⊢ MeasureTheory.Integrable (fun a => ↑(ProbabilityTheory.condCDF ρ a) x) ρ.fst","decl":"theorem integrable_condCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (x : ℝ) :\n    Integrable (fun a ↦ condCDF ρ a x) ρ.fst :=\n  (isCondKernelCDF_condCDF ρ).integrable () x\n\n"}
{"name":"ProbabilityTheory.setIntegral_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nx : Real\ns : Set α\nhs : MeasurableSet s\n⊢ Eq (MeasureTheory.integral (ρ.fst.restrict s) fun a => ↑(ProbabilityTheory.condCDF ρ a) x) (ρ (SProd.sprod s (Set.Iic x))).toReal","decl":"theorem setIntegral_condCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (x : ℝ) {s : Set α}\n    (hs : MeasurableSet s) : ∫ a in s, condCDF ρ a x ∂ρ.fst = (ρ (s ×ˢ Iic x)).toReal :=\n  (isCondKernelCDF_condCDF ρ).setIntegral () hs x\n\n"}
{"name":"ProbabilityTheory.integral_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\ninst✝ : MeasureTheory.IsFiniteMeasure ρ\nx : Real\n⊢ Eq (MeasureTheory.integral ρ.fst fun a => ↑(ProbabilityTheory.condCDF ρ a) x) (ρ (SProd.sprod Set.univ (Set.Iic x))).toReal","decl":"theorem integral_condCDF (ρ : Measure (α × ℝ)) [IsFiniteMeasure ρ] (x : ℝ) :\n    ∫ a, condCDF ρ a x ∂ρ.fst = (ρ (univ ×ˢ Iic x)).toReal :=\n  (isCondKernelCDF_condCDF ρ).integral () x\n\n"}
{"name":"ProbabilityTheory.measure_condCDF_Iic","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\nx : Real\n⊢ Eq ((ProbabilityTheory.condCDF ρ a).measure (Set.Iic x)) (ENNReal.ofReal (↑(ProbabilityTheory.condCDF ρ a) x))","decl":"theorem measure_condCDF_Iic (ρ : Measure (α × ℝ)) (a : α) (x : ℝ) :\n    (condCDF ρ a).measure (Iic x) = ENNReal.ofReal (condCDF ρ a x) := by\n  rw [← sub_zero (condCDF ρ a x)]\n  exact (condCDF ρ a).measure_Iic (tendsto_condCDF_atBot ρ a) _\n\n"}
{"name":"ProbabilityTheory.measure_condCDF_univ","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\n⊢ Eq ((ProbabilityTheory.condCDF ρ a).measure Set.univ) 1","decl":"theorem measure_condCDF_univ (ρ : Measure (α × ℝ)) (a : α) : (condCDF ρ a).measure univ = 1 := by\n  rw [← ENNReal.ofReal_one, ← sub_zero (1 : ℝ)]\n  exact StieltjesFunction.measure_univ _ (tendsto_condCDF_atBot ρ a) (tendsto_condCDF_atTop ρ a)\n\n"}
{"name":"ProbabilityTheory.instIsProbabilityMeasureCondCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\na : α\n⊢ MeasureTheory.IsProbabilityMeasure (ProbabilityTheory.condCDF ρ a).measure","decl":"instance instIsProbabilityMeasureCondCDF (ρ : Measure (α × ℝ)) (a : α) :\n    IsProbabilityMeasure (condCDF ρ a).measure :=\n  ⟨measure_condCDF_univ ρ a⟩\n\n"}
{"name":"ProbabilityTheory.measurable_measure_condCDF","module":"Mathlib.Probability.Kernel.Disintegration.CondCDF","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nρ : MeasureTheory.Measure (Prod α Real)\n⊢ Measurable fun a => (ProbabilityTheory.condCDF ρ a).measure","decl":"/-- The function `a ↦ (condCDF ρ a).measure` is measurable. -/\ntheorem measurable_measure_condCDF (ρ : Measure (α × ℝ)) :\n    Measurable fun a => (condCDF ρ a).measure :=\n  .measure_of_isPiSystem_of_isProbabilityMeasure (borel_eq_generateFrom_Iic ℝ) isPiSystem_Iic <| by\n    simp_rw [forall_mem_range, measure_condCDF_Iic]\n    exact fun u ↦ (measurable_condCDF ρ u).ennreal_ofReal\n\n"}
