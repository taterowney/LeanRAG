{"name":"exists_eq_sum_perm_of_mem_doublyStochastic","module":"Mathlib.Analysis.Convex.Birkhoff","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : LinearOrderedField R\nM : Matrix n n R\nhM : Membership.mem (doublyStochastic R n) M\n⊢ Exists fun w => And (∀ (σ : Equiv.Perm n), LE.le 0 (w σ)) (And (Eq (Finset.univ.sum fun σ => w σ) 1) (Eq (Finset.univ.sum fun σ => HSMul.hSMul (w σ) (Equiv.Perm.permMatrix R σ)) M))","decl":"/--\nIf M is a doubly stochastic matrix, then it is an convex combination of permutation matrices. Note\n`doublyStochastic_eq_convexHull_permMatrix` shows `doublyStochastic n` is exactly the convex hull of\nthe permutation matrices, and this lemma is instead most useful for accessing the coefficients of\neach permutation matrices directly.\n-/\nlemma exists_eq_sum_perm_of_mem_doublyStochastic (hM : M ∈ doublyStochastic R n) :\n    ∃ w : Equiv.Perm n → R, (∀ σ, 0 ≤ w σ) ∧ ∑ σ, w σ = 1 ∧ ∑ σ, w σ • σ.permMatrix R = M := by\n  rcases isEmpty_or_nonempty n\n  case inl => exact ⟨fun _ => 1, by simp, by simp, Subsingleton.elim _ _⟩\n  obtain ⟨w, hw1, hw3⟩ := doublyStochastic_sum_perm_aux M 1 (by simp) ⟨M, hM, by simp⟩\n  refine ⟨w, hw1, ?_, hw3⟩\n  inhabit n\n  have : ∑ j, ∑ σ : Equiv.Perm n, w σ • σ.permMatrix R default j = 1 := by\n    simp only [← smul_apply (m := n), ← Finset.sum_apply, hw3]\n    rw [sum_row_of_mem_doublyStochastic hM]\n  simpa [sum_comm (γ := n), Equiv.toPEquiv_apply] using this\n\n"}
{"name":"doublyStochastic_eq_convexHull_permMatrix","module":"Mathlib.Analysis.Convex.Birkhoff","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : LinearOrderedField R\n⊢ Eq (↑(doublyStochastic R n)) ((convexHull R) (setOf fun x => Exists fun σ => Eq (Equiv.Perm.permMatrix R σ) x))","decl":"/--\n**Birkhoff's theorem**\nThe set of doubly stochastic matrices is the convex hull of the permutation matrices.  Note\n`exists_eq_sum_perm_of_mem_doublyStochastic` gives a convex weighting of each permutation matrix\ndirectly.  To show `doublyStochastic n` is convex, use `convex_doublyStochastic`.\n-/\ntheorem doublyStochastic_eq_convexHull_permMatrix :\n    doublyStochastic R n = convexHull R {σ.permMatrix R | σ : Equiv.Perm n} := by\n  refine (convexHull_min ?g1 convex_doublyStochastic).antisymm' fun M hM => ?g2\n  case g1 =>\n    rintro x ⟨h, rfl⟩\n    exact permMatrix_mem_doublyStochastic\n  case g2 =>\n    obtain ⟨w, hw1, hw2, hw3⟩ := exists_eq_sum_perm_of_mem_doublyStochastic hM\n    exact mem_convexHull_of_exists_fintype w (·.permMatrix R) hw1 hw2 (by simp) hw3\n\n"}
{"name":"extremePoints_doublyStochastic","module":"Mathlib.Analysis.Convex.Birkhoff","initialProofState":"R : Type u_1\nn : Type u_2\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\ninst✝ : LinearOrderedField R\n⊢ Eq (Set.extremePoints R ↑(doublyStochastic R n)) (setOf fun x => Exists fun σ => Eq (Equiv.Perm.permMatrix R σ) x)","decl":"/--\nThe set of extreme points of the doubly stochastic matrices is the set of permutation matrices.\n-/\ntheorem extremePoints_doublyStochastic :\n    Set.extremePoints R (doublyStochastic R n) = {σ.permMatrix R | σ : Equiv.Perm n} := by\n  refine subset_antisymm ?_ ?_\n  · rw [doublyStochastic_eq_convexHull_permMatrix]\n    exact extremePoints_convexHull_subset\n  rintro _ ⟨σ, rfl⟩\n  refine ⟨permMatrix_mem_doublyStochastic, fun x₁ hx₁ x₂ hx₂ hσ ↦ ?_⟩\n  suffices ∀ i j : n, x₁ i j = x₂ i j by\n    obtain rfl : x₁ = x₂ := by simpa [← Matrix.ext_iff]\n    simp_all\n  intro i j\n  have h₁ : σ.permMatrix R i j ∈ openSegment R (x₁ i j) (x₂ i j) :=\n    image_openSegment _ (entryLinearMap R R i j).toAffineMap x₁ x₂ ▸ ⟨_, hσ, rfl⟩\n  by_contra! h\n  have h₂ : openSegment R (x₁ i j) (x₂ i j) ⊆ Set.Ioo 0 1 := by\n    rw [openSegment_eq_Ioo' h]\n    apply Set.Ioo_subset_Ioo <;>\n    simp_all [nonneg_of_mem_doublyStochastic, le_one_of_mem_doublyStochastic]\n  specialize h₂ h₁\n  aesop\n\n"}
