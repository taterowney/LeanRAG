{"name":"CategoryTheory.Oplax.Modification.ext","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nx y : CategoryTheory.Oplax.Modification Œ∑ Œ∏\napp : Eq x.app y.app\n‚ä¢ Eq x y","decl":"/-- A modification `Œì` between oplax natural transformations `Œ∑` and `Œ∏` consists of a family of\n2-morphisms `Œì.app a : Œ∑.app a ‚ü∂ Œ∏.app a`, which satisfies the equation\n`(F.map f ‚óÅ app b) ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a ‚ñ∑ G.map f)`\nfor each 1-morphism `f : a ‚ü∂ b`.\n-/\n@[ext]\nstructure Modification (Œ∑ Œ∏ : F ‚ü∂ G) where\n  /-- The underlying family of 2-morphism. -/\n  app (a : B) : Œ∑.app a ‚ü∂ Œ∏.app a\n  /-- The naturality condition. -/\n  naturality :\n    ‚àÄ {a b : B} (f : a ‚ü∂ b),\n      F.map f ‚óÅ app b ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ app a ‚ñ∑ G.map f := by\n    aesop_cat\n\n"}
{"name":"CategoryTheory.Oplax.Modification.mk.injEq","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\napp‚úù : (a : B) ‚Üí Quiver.Hom (Œ∑.app a) (Œ∏.app a)\nnaturality‚úù : autoParam (‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app‚úù b)) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app‚úù a) (G.map f)))) _auto‚úù\napp : (a : B) ‚Üí Quiver.Hom (Œ∑.app a) (Œ∏.app a)\nnaturality : autoParam (‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app b)) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app a) (G.map f)))) _auto‚úù\n‚ä¢ Eq (Eq { app := app‚úù, naturality := naturality‚úù } { app := app, naturality := naturality }) (Eq app‚úù app)","decl":"/-- A modification `Œì` between oplax natural transformations `Œ∑` and `Œ∏` consists of a family of\n2-morphisms `Œì.app a : Œ∑.app a ‚ü∂ Œ∏.app a`, which satisfies the equation\n`(F.map f ‚óÅ app b) ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a ‚ñ∑ G.map f)`\nfor each 1-morphism `f : a ‚ü∂ b`.\n-/\n@[ext]\nstructure Modification (Œ∑ Œ∏ : F ‚ü∂ G) where\n  /-- The underlying family of 2-morphism. -/\n  app (a : B) : Œ∑.app a ‚ü∂ Œ∏.app a\n  /-- The naturality condition. -/\n  naturality :\n    ‚àÄ {a b : B} (f : a ‚ü∂ b),\n      F.map f ‚óÅ app b ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ app a ‚ñ∑ G.map f := by\n    aesop_cat\n\n"}
{"name":"CategoryTheory.Oplax.Modification.mk.sizeOf_spec","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬≥ : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù¬≤ : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\ninst‚úù¬π : SizeOf B\ninst‚úù : SizeOf C\napp : (a : B) ‚Üí Quiver.Hom (Œ∑.app a) (Œ∏.app a)\nnaturality : autoParam (‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app b)) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app a) (G.map f)))) _auto‚úù\n‚ä¢ Eq (SizeOf.sizeOf { app := app, naturality := naturality }) 1","decl":"/-- A modification `Œì` between oplax natural transformations `Œ∑` and `Œ∏` consists of a family of\n2-morphisms `Œì.app a : Œ∑.app a ‚ü∂ Œ∏.app a`, which satisfies the equation\n`(F.map f ‚óÅ app b) ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a ‚ñ∑ G.map f)`\nfor each 1-morphism `f : a ‚ü∂ b`.\n-/\n@[ext]\nstructure Modification (Œ∑ Œ∏ : F ‚ü∂ G) where\n  /-- The underlying family of 2-morphism. -/\n  app (a : B) : Œ∑.app a ‚ü∂ Œ∏.app a\n  /-- The naturality condition. -/\n  naturality :\n    ‚àÄ {a b : B} (f : a ‚ü∂ b),\n      F.map f ‚óÅ app b ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ app a ‚ñ∑ G.map f := by\n    aesop_cat\n\n"}
{"name":"CategoryTheory.Oplax.Modification.naturality","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nself : CategoryTheory.Oplax.Modification Œ∑ Œ∏\na b : B\nf : Quiver.Hom a b\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (self.app b)) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (self.app a) (G.map f)))","decl":"/-- A modification `Œì` between oplax natural transformations `Œ∑` and `Œ∏` consists of a family of\n2-morphisms `Œì.app a : Œ∑.app a ‚ü∂ Œ∏.app a`, which satisfies the equation\n`(F.map f ‚óÅ app b) ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a ‚ñ∑ G.map f)`\nfor each 1-morphism `f : a ‚ü∂ b`.\n-/\n@[ext]\nstructure Modification (Œ∑ Œ∏ : F ‚ü∂ G) where\n  /-- The underlying family of 2-morphism. -/\n  app (a : B) : Œ∑.app a ‚ü∂ Œ∏.app a\n  /-- The naturality condition. -/\n  naturality :\n    ‚àÄ {a b : B} (f : a ‚ü∂ b),\n      F.map f ‚óÅ app b ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ app a ‚ñ∑ G.map f := by\n    aesop_cat\n\n"}
{"name":"CategoryTheory.Oplax.Modification.ext_iff","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nx y : CategoryTheory.Oplax.Modification Œ∑ Œ∏\n‚ä¢ Iff (Eq x y) (Eq x.app y.app)","decl":"/-- A modification `Œì` between oplax natural transformations `Œ∑` and `Œ∏` consists of a family of\n2-morphisms `Œì.app a : Œ∑.app a ‚ü∂ Œ∏.app a`, which satisfies the equation\n`(F.map f ‚óÅ app b) ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a ‚ñ∑ G.map f)`\nfor each 1-morphism `f : a ‚ü∂ b`.\n-/\n@[ext]\nstructure Modification (Œ∑ Œ∏ : F ‚ü∂ G) where\n  /-- The underlying family of 2-morphism. -/\n  app (a : B) : Œ∑.app a ‚ü∂ Œ∏.app a\n  /-- The naturality condition. -/\n  naturality :\n    ‚àÄ {a b : B} (f : a ‚ü∂ b),\n      F.map f ‚óÅ app b ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ app a ‚ñ∑ G.map f := by\n    aesop_cat\n\n"}
{"name":"CategoryTheory.Oplax.Modification.mk.inj","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\napp‚úù : (a : B) ‚Üí Quiver.Hom (Œ∑.app a) (Œ∏.app a)\nnaturality‚úù : autoParam (‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app‚úù b)) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app‚úù a) (G.map f)))) _auto‚úù\napp : (a : B) ‚Üí Quiver.Hom (Œ∑.app a) (Œ∏.app a)\nnaturality : autoParam (‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app b)) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app a) (G.map f)))) _auto‚úù\nx‚úù : Eq { app := app‚úù, naturality := naturality‚úù } { app := app, naturality := naturality }\n‚ä¢ Eq app‚úù app","decl":"/-- A modification `Œì` between oplax natural transformations `Œ∑` and `Œ∏` consists of a family of\n2-morphisms `Œì.app a : Œ∑.app a ‚ü∂ Œ∏.app a`, which satisfies the equation\n`(F.map f ‚óÅ app b) ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a ‚ñ∑ G.map f)`\nfor each 1-morphism `f : a ‚ü∂ b`.\n-/\n@[ext]\nstructure Modification (Œ∑ Œ∏ : F ‚ü∂ G) where\n  /-- The underlying family of 2-morphism. -/\n  app (a : B) : Œ∑.app a ‚ü∂ Œ∏.app a\n  /-- The naturality condition. -/\n  naturality :\n    ‚àÄ {a b : B} (f : a ‚ü∂ b),\n      F.map f ‚óÅ app b ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ app a ‚ñ∑ G.map f := by\n    aesop_cat\n\n"}
{"name":"CategoryTheory.Oplax.Modification.naturality_assoc","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nself : CategoryTheory.Oplax.Modification Œ∑ Œ∏\na b : B\nf : Quiver.Hom a b\nZ : Quiver.Hom (F.obj a) (G.obj b)\nh : Quiver.Hom (CategoryTheory.CategoryStruct.comp (Œ∏.app a) (G.map f)) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (self.app b)) (CategoryTheory.CategoryStruct.comp (Œ∏.naturality f) h)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight (self.app a) (G.map f)) h))","decl":"attribute [reassoc (attr := simp)] Modification.naturality\n\n"}
{"name":"CategoryTheory.Oplax.Modification.id_app","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ : Quiver.Hom F G\na : B\n‚ä¢ Eq ((CategoryTheory.Oplax.Modification.id Œ∑).app a) (CategoryTheory.CategoryStruct.id (Œ∑.app a))","decl":"/-- The identity modification. -/\n@[simps]\ndef id : Modification Œ∑ Œ∑ where app a := ùüô (Œ∑.app a)\n\n"}
{"name":"CategoryTheory.Oplax.Modification.whiskerLeft_naturality_assoc","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nŒì : CategoryTheory.Oplax.Modification Œ∑ Œ∏\nb c : B\na' : C\nf : Quiver.Hom a' (F.obj b)\ng : Quiver.Hom b c\nZ : Quiver.Hom a' (G.obj c)\nh : Quiver.Hom (CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.comp (Œ∏.app b) (G.map g))) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f (CategoryTheory.Bicategory.whiskerLeft (F.map g) (Œì.app c))) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f (Œ∏.naturality g)) h)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f (Œ∑.naturality g)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f (CategoryTheory.Bicategory.whiskerRight (Œì.app b) (G.map g))) h))","decl":"@[reassoc (attr := simp)]\ntheorem whiskerLeft_naturality (f : a' ‚ü∂ F.obj b) (g : b ‚ü∂ c) :\n    f ‚óÅ F.map g ‚óÅ Œì.app c ‚â´ f ‚óÅ Œ∏.naturality g = f ‚óÅ Œ∑.naturality g ‚â´ f ‚óÅ Œì.app b ‚ñ∑ G.map g := by\n  simp_rw [‚Üê Bicategory.whiskerLeft_comp, naturality]\n\n"}
{"name":"CategoryTheory.Oplax.Modification.whiskerLeft_naturality","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nŒì : CategoryTheory.Oplax.Modification Œ∑ Œ∏\nb c : B\na' : C\nf : Quiver.Hom a' (F.obj b)\ng : Quiver.Hom b c\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f (CategoryTheory.Bicategory.whiskerLeft (F.map g) (Œì.app c))) (CategoryTheory.Bicategory.whiskerLeft f (Œ∏.naturality g))) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f (Œ∑.naturality g)) (CategoryTheory.Bicategory.whiskerLeft f (CategoryTheory.Bicategory.whiskerRight (Œì.app b) (G.map g))))","decl":"@[reassoc (attr := simp)]\ntheorem whiskerLeft_naturality (f : a' ‚ü∂ F.obj b) (g : b ‚ü∂ c) :\n    f ‚óÅ F.map g ‚óÅ Œì.app c ‚â´ f ‚óÅ Œ∏.naturality g = f ‚óÅ Œ∑.naturality g ‚â´ f ‚óÅ Œì.app b ‚ñ∑ G.map g := by\n  simp_rw [‚Üê Bicategory.whiskerLeft_comp, naturality]\n\n"}
{"name":"CategoryTheory.Oplax.Modification.whiskerRight_naturality","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nŒì : CategoryTheory.Oplax.Modification Œ∑ Œ∏\na b : B\na' : C\nf : Quiver.Hom a b\ng : Quiver.Hom (G.obj b) a'\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (CategoryTheory.Bicategory.whiskerRight (Œì.app b) g)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator (F.map f) (Œ∏.app b) g).inv (CategoryTheory.Bicategory.whiskerRight (Œ∏.naturality f) g))) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator (F.map f) (Œ∑.app b) g).inv (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight (Œ∑.naturality f) g) (CategoryTheory.Bicategory.whiskerRight (CategoryTheory.Bicategory.whiskerRight (Œì.app a) (G.map f)) g)))","decl":"@[reassoc (attr := simp)]\ntheorem whiskerRight_naturality (f : a ‚ü∂ b) (g : G.obj b ‚ü∂ a') :\n    F.map f ‚óÅ Œì.app b ‚ñ∑ g ‚â´ (Œ±_ _ _ _).inv ‚â´ Œ∏.naturality f ‚ñ∑ g =\n      (Œ±_ _ _ _).inv ‚â´ Œ∑.naturality f ‚ñ∑ g ‚â´ Œì.app a ‚ñ∑ G.map f ‚ñ∑ g := by\n  simp_rw [associator_inv_naturality_middle_assoc, ‚Üê comp_whiskerRight, naturality]\n\n"}
{"name":"CategoryTheory.Oplax.Modification.whiskerRight_naturality_assoc","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\nŒì : CategoryTheory.Oplax.Modification Œ∑ Œ∏\na b : B\na' : C\nf : Quiver.Hom a b\ng : Quiver.Hom (G.obj b) a'\nZ : Quiver.Hom (F.obj a) a'\nh : Quiver.Hom (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.comp (Œ∏.app a) (G.map f)) g) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (CategoryTheory.Bicategory.whiskerRight (Œì.app b) g)) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator (F.map f) (Œ∏.app b) g).inv (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight (Œ∏.naturality f) g) h))) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.associator (F.map f) (Œ∑.app b) g).inv (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight (Œ∑.naturality f) g) (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight (CategoryTheory.Bicategory.whiskerRight (Œì.app a) (G.map f)) g) h)))","decl":"@[reassoc (attr := simp)]\ntheorem whiskerRight_naturality (f : a ‚ü∂ b) (g : G.obj b ‚ü∂ a') :\n    F.map f ‚óÅ Œì.app b ‚ñ∑ g ‚â´ (Œ±_ _ _ _).inv ‚â´ Œ∏.naturality f ‚ñ∑ g =\n      (Œ±_ _ _ _).inv ‚â´ Œ∑.naturality f ‚ñ∑ g ‚â´ Œì.app a ‚ñ∑ G.map f ‚ñ∑ g := by\n  simp_rw [associator_inv_naturality_middle_assoc, ‚Üê comp_whiskerRight, naturality]\n\n"}
{"name":"CategoryTheory.Oplax.Modification.vcomp_app","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ Œπ : Quiver.Hom F G\nŒì : CategoryTheory.Oplax.Modification Œ∑ Œ∏\nŒî : CategoryTheory.Oplax.Modification Œ∏ Œπ\na : B\n‚ä¢ Eq ((Œì.vcomp Œî).app a) (CategoryTheory.CategoryStruct.comp (Œì.app a) (Œî.app a))","decl":"/-- Vertical composition of modifications. -/\n@[simps]\ndef vcomp (Œì : Modification Œ∑ Œ∏) (Œî : Modification Œ∏ Œπ) : Modification Œ∑ Œπ where\n  app a := Œì.app a ‚â´ Œî.app a\n\n"}
{"name":"CategoryTheory.Oplax.category_id","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ : Quiver.Hom F G\n‚ä¢ Eq (CategoryTheory.CategoryStruct.id Œ∑) (CategoryTheory.Oplax.Modification.id Œ∑)","decl":"/-- Category structure on the oplax natural transformations between OplaxFunctors. -/\n@[simps]\ninstance category (F G : OplaxFunctor B C) : Category (F ‚ü∂ G) where\n  Hom := Modification\n  id := Modification.id\n  comp := Modification.vcomp\n\n"}
{"name":"CategoryTheory.Oplax.category_comp","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nX‚úù Y‚úù Z‚úù : Quiver.Hom F G\nŒì : CategoryTheory.Oplax.Modification X‚úù Y‚úù\nŒî : CategoryTheory.Oplax.Modification Y‚úù Z‚úù\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp Œì Œî) (Œì.vcomp Œî)","decl":"/-- Category structure on the oplax natural transformations between OplaxFunctors. -/\n@[simps]\ninstance category (F G : OplaxFunctor B C) : Category (F ‚ü∂ G) where\n  Hom := Modification\n  id := Modification.id\n  comp := Modification.vcomp\n\n"}
{"name":"CategoryTheory.Oplax.ext","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ± Œ≤ : Quiver.Hom F G\nm n : Quiver.Hom Œ± Œ≤\nw : ‚àÄ (b : B), Eq (m.app b) (n.app b)\n‚ä¢ Eq m n","decl":"@[ext]\nlemma ext {F G : OplaxFunctor B C} {Œ± Œ≤ : F ‚ü∂ G} {m n : Œ± ‚ü∂ Œ≤} (w : ‚àÄ b, m.app b = n.app b) :\n    m = n := by\n  apply Modification.ext\n  ext\n  apply w\n\n"}
{"name":"CategoryTheory.Oplax.ext_iff","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ± Œ≤ : Quiver.Hom F G\nm n : Quiver.Hom Œ± Œ≤\n‚ä¢ Iff (Eq m n) (‚àÄ (b : B), Eq (m.app b) (n.app b))","decl":"@[ext]\nlemma ext {F G : OplaxFunctor B C} {Œ± Œ≤ : F ‚ü∂ G} {m n : Œ± ‚ü∂ Œ≤} (w : ‚àÄ b, m.app b = n.app b) :\n    m = n := by\n  apply Modification.ext\n  ext\n  apply w\n\n"}
{"name":"CategoryTheory.Oplax.Modification.id_app'","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nX : B\nF G : CategoryTheory.OplaxFunctor B C\nŒ± : Quiver.Hom F G\n‚ä¢ Eq ((CategoryTheory.CategoryStruct.id Œ±).app X) (CategoryTheory.CategoryStruct.id (Œ±.app X))","decl":"/-- Version of `Modification.id_app` using category notation -/\n@[simp]\nlemma Modification.id_app' {X : B} {F G : OplaxFunctor B C} (Œ± : F ‚ü∂ G) :\n    Modification.app (ùüô Œ±) X = ùüô (Œ±.app X) := rfl\n\n"}
{"name":"CategoryTheory.Oplax.Modification.comp_app'","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nX : B\nF G : CategoryTheory.OplaxFunctor B C\nŒ± Œ≤ Œ≥ : Quiver.Hom F G\nm : Quiver.Hom Œ± Œ≤\nn : Quiver.Hom Œ≤ Œ≥\n‚ä¢ Eq ((CategoryTheory.CategoryStruct.comp m n).app X) (CategoryTheory.CategoryStruct.comp (m.app X) (n.app X))","decl":"/-- Version of `Modification.comp_app` using category notation -/\n@[simp]\nlemma Modification.comp_app' {X : B} {F G : OplaxFunctor B C} {Œ± Œ≤ Œ≥ : F ‚ü∂ G}\n    (m : Œ± ‚ü∂ Œ≤) (n : Œ≤ ‚ü∂ Œ≥) : (m ‚â´ n).app X = m.app X ‚â´ n.app X :=\n  rfl\n\n"}
{"name":"CategoryTheory.Oplax.ModificationIso.ofComponents_hom_app","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\napp : (a : B) ‚Üí CategoryTheory.Iso (Œ∑.app a) (Œ∏.app a)\nnaturality : ‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app b).hom) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app a).hom (G.map f)))\na : B\n‚ä¢ Eq ((CategoryTheory.Oplax.ModificationIso.ofComponents app naturality).hom.app a) (app a).hom","decl":"/-- Construct a modification isomorphism between oplax natural transformations\nby giving object level isomorphisms, and checking naturality only in the forward direction.\n-/\n@[simps]\ndef ModificationIso.ofComponents (app : ‚àÄ a, Œ∑.app a ‚âÖ Œ∏.app a)\n    (naturality :\n      ‚àÄ {a b} (f : a ‚ü∂ b),\n        F.map f ‚óÅ (app b).hom ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a).hom ‚ñ∑ G.map f) :\n    Œ∑ ‚âÖ Œ∏ where\n  hom := { app := fun a => (app a).hom }\n  inv :=\n    { app := fun a => (app a).inv\n      naturality := fun {a b} f => by\n        simpa using congr_arg (fun f => _ ‚óÅ (app b).inv ‚â´ f ‚â´ (app a).inv ‚ñ∑ _) (naturality f).symm }\n\n"}
{"name":"CategoryTheory.Oplax.ModificationIso.ofComponents_inv_app","module":"Mathlib.CategoryTheory.Bicategory.Modification.Oplax","initialProofState":"B : Type u‚ÇÅ\ninst‚úù¬π : CategoryTheory.Bicategory B\nC : Type u‚ÇÇ\ninst‚úù : CategoryTheory.Bicategory C\nF G : CategoryTheory.OplaxFunctor B C\nŒ∑ Œ∏ : Quiver.Hom F G\napp : (a : B) ‚Üí CategoryTheory.Iso (Œ∑.app a) (Œ∏.app a)\nnaturality : ‚àÄ {a b : B} (f : Quiver.Hom a b), Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft (F.map f) (app b).hom) (Œ∏.naturality f)) (CategoryTheory.CategoryStruct.comp (Œ∑.naturality f) (CategoryTheory.Bicategory.whiskerRight (app a).hom (G.map f)))\na : B\n‚ä¢ Eq ((CategoryTheory.Oplax.ModificationIso.ofComponents app naturality).inv.app a) (app a).inv","decl":"/-- Construct a modification isomorphism between oplax natural transformations\nby giving object level isomorphisms, and checking naturality only in the forward direction.\n-/\n@[simps]\ndef ModificationIso.ofComponents (app : ‚àÄ a, Œ∑.app a ‚âÖ Œ∏.app a)\n    (naturality :\n      ‚àÄ {a b} (f : a ‚ü∂ b),\n        F.map f ‚óÅ (app b).hom ‚â´ Œ∏.naturality f = Œ∑.naturality f ‚â´ (app a).hom ‚ñ∑ G.map f) :\n    Œ∑ ‚âÖ Œ∏ where\n  hom := { app := fun a => (app a).hom }\n  inv :=\n    { app := fun a => (app a).inv\n      naturality := fun {a b} f => by\n        simpa using congr_arg (fun f => _ ‚óÅ (app b).inv ‚â´ f ‚â´ (app a).inv ‚ñ∑ _) (naturality f).symm }\n\n"}
