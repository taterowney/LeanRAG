{"name":"dslope_same","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\n⊢ Eq (dslope f a a) (deriv f a)","decl":"@[simp]\ntheorem dslope_same (f : 𝕜 → E) (a : 𝕜) : dslope f a a = deriv f a := by\n  classical\n  exact update_self ..\n\n"}
{"name":"dslope_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\na b : 𝕜\nf : 𝕜 → E\nh : Ne b a\n⊢ Eq (dslope f a b) (slope f a b)","decl":"theorem dslope_of_ne (f : 𝕜 → E) (h : b ≠ a) : dslope f a b = slope f a b := by\n  classical\n  exact update_of_ne h ..\n\n"}
{"name":"ContinuousLinearMap.dslope_comp","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace 𝕜 F\nf : ContinuousLinearMap (RingHom.id 𝕜) E F\ng : 𝕜 → E\na b : 𝕜\nH : Eq a b → DifferentiableAt 𝕜 g a\n⊢ Eq (dslope (Function.comp (⇑f) g) a b) (f (dslope g a b))","decl":"theorem ContinuousLinearMap.dslope_comp {F : Type*} [NormedAddCommGroup F] [NormedSpace 𝕜 F]\n    (f : E →L[𝕜] F) (g : 𝕜 → E) (a b : 𝕜) (H : a = b → DifferentiableAt 𝕜 g a) :\n    dslope (f ∘ g) a b = f (dslope g a b) := by\n  rcases eq_or_ne b a with (rfl | hne)\n  · simp only [dslope_same]\n    exact (f.hasFDerivAt.comp_hasDerivAt b (H rfl).hasDerivAt).deriv\n  · simpa only [dslope_of_ne _ hne] using f.toLinearMap.slope_comp g a b\n\n"}
{"name":"eqOn_dslope_slope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\n⊢ Set.EqOn (dslope f a) (slope f a) (HasCompl.compl (Singleton.singleton a))","decl":"theorem eqOn_dslope_slope (f : 𝕜 → E) (a : 𝕜) : EqOn (dslope f a) (slope f a) {a}ᶜ := fun _ =>\n  dslope_of_ne f\n\n"}
{"name":"dslope_eventuallyEq_slope_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\na b : 𝕜\nf : 𝕜 → E\nh : Ne b a\n⊢ (nhds b).EventuallyEq (dslope f a) (slope f a)","decl":"theorem dslope_eventuallyEq_slope_of_ne (f : 𝕜 → E) (h : b ≠ a) : dslope f a =ᶠ[𝓝 b] slope f a :=\n  (eqOn_dslope_slope f a).eventuallyEq_of_mem (isOpen_ne.mem_nhds h)\n\n"}
{"name":"dslope_eventuallyEq_slope_punctured_nhds","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\na : 𝕜\nf : 𝕜 → E\n⊢ (nhdsWithin a (HasCompl.compl (Singleton.singleton a))).EventuallyEq (dslope f a) (slope f a)","decl":"theorem dslope_eventuallyEq_slope_punctured_nhds (f : 𝕜 → E) : dslope f a =ᶠ[𝓝[≠] a] slope f a :=\n  (eqOn_dslope_slope f a).eventuallyEq_of_mem self_mem_nhdsWithin\n\n"}
{"name":"sub_smul_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\n⊢ Eq (HSMul.hSMul (HSub.hSub b a) (dslope f a b)) (HSub.hSub (f b) (f a))","decl":"@[simp]\ntheorem sub_smul_dslope (f : 𝕜 → E) (a b : 𝕜) : (b - a) • dslope f a b = f b - f a := by\n  rcases eq_or_ne b a with (rfl | hne) <;> simp [dslope_of_ne, *]\n\n"}
{"name":"dslope_sub_smul_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\na b : 𝕜\nf : 𝕜 → E\nh : Ne b a\n⊢ Eq (dslope (fun x => HSMul.hSMul (HSub.hSub x a) (f x)) a b) (f b)","decl":"theorem dslope_sub_smul_of_ne (f : 𝕜 → E) (h : b ≠ a) :\n    dslope (fun x => (x - a) • f x) a b = f b := by\n  rw [dslope_of_ne _ h, slope_sub_smul _ h.symm]\n\n"}
{"name":"eqOn_dslope_sub_smul","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\n⊢ Set.EqOn (dslope (fun x => HSMul.hSMul (HSub.hSub x a) (f x)) a) f (HasCompl.compl (Singleton.singleton a))","decl":"theorem eqOn_dslope_sub_smul (f : 𝕜 → E) (a : 𝕜) :\n    EqOn (dslope (fun x => (x - a) • f x) a) f {a}ᶜ := fun _ => dslope_sub_smul_of_ne f\n\n"}
{"name":"dslope_sub_smul","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : NontriviallyNormedField 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\ninst✝ : DecidableEq 𝕜\nf : 𝕜 → E\na : 𝕜\n⊢ Eq (dslope (fun x => HSMul.hSMul (HSub.hSub x a) (f x)) a) (Function.update f a (deriv (fun x => HSMul.hSMul (HSub.hSub x a) (f x)) a))","decl":"theorem dslope_sub_smul [DecidableEq 𝕜] (f : 𝕜 → E) (a : 𝕜) :\n    dslope (fun x => (x - a) • f x) a = update f a (deriv (fun x => (x - a) • f x) a) :=\n  eq_update_iff.2 ⟨dslope_same _ _, eqOn_dslope_sub_smul f a⟩\n\n"}
{"name":"continuousAt_dslope_same","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\n⊢ Iff (ContinuousAt (dslope f a) a) (DifferentiableAt 𝕜 f a)","decl":"@[simp]\ntheorem continuousAt_dslope_same : ContinuousAt (dslope f a) a ↔ DifferentiableAt 𝕜 f a := by\n  simp only [dslope, continuousAt_update_same, ← hasDerivAt_deriv_iff, hasDerivAt_iff_tendsto_slope]\n\n"}
{"name":"ContinuousWithinAt.of_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\ns : Set 𝕜\nh : ContinuousWithinAt (dslope f a) s b\n⊢ ContinuousWithinAt f s b","decl":"theorem ContinuousWithinAt.of_dslope (h : ContinuousWithinAt (dslope f a) s b) :\n    ContinuousWithinAt f s b := by\n  have : ContinuousWithinAt (fun x => (x - a) • dslope f a x + f a) s b :=\n    ((continuousWithinAt_id.sub continuousWithinAt_const).smul h).add continuousWithinAt_const\n  simpa only [sub_smul_dslope, sub_add_cancel] using this\n\n"}
{"name":"ContinuousAt.of_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\nh : ContinuousAt (dslope f a) b\n⊢ ContinuousAt f b","decl":"theorem ContinuousAt.of_dslope (h : ContinuousAt (dslope f a) b) : ContinuousAt f b :=\n  (continuousWithinAt_univ _ _).1 h.continuousWithinAt.of_dslope\n\n"}
{"name":"ContinuousOn.of_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\ns : Set 𝕜\nh : ContinuousOn (dslope f a) s\n⊢ ContinuousOn f s","decl":"theorem ContinuousOn.of_dslope (h : ContinuousOn (dslope f a) s) : ContinuousOn f s := fun x hx =>\n  (h x hx).of_dslope\n\n"}
{"name":"continuousWithinAt_dslope_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\ns : Set 𝕜\nh : Ne b a\n⊢ Iff (ContinuousWithinAt (dslope f a) s b) (ContinuousWithinAt f s b)","decl":"theorem continuousWithinAt_dslope_of_ne (h : b ≠ a) :\n    ContinuousWithinAt (dslope f a) s b ↔ ContinuousWithinAt f s b := by\n  refine ⟨ContinuousWithinAt.of_dslope, fun hc => ?_⟩\n  classical\n  simp only [dslope, continuousWithinAt_update_of_ne h]\n  exact ((continuousWithinAt_id.sub continuousWithinAt_const).inv₀ (sub_ne_zero.2 h)).smul\n    (hc.sub continuousWithinAt_const)\n\n"}
{"name":"continuousAt_dslope_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\nh : Ne b a\n⊢ Iff (ContinuousAt (dslope f a) b) (ContinuousAt f b)","decl":"theorem continuousAt_dslope_of_ne (h : b ≠ a) : ContinuousAt (dslope f a) b ↔ ContinuousAt f b := by\n  simp only [← continuousWithinAt_univ, continuousWithinAt_dslope_of_ne h]\n\n"}
{"name":"continuousOn_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\ns : Set 𝕜\nh : Membership.mem (nhds a) s\n⊢ Iff (ContinuousOn (dslope f a) s) (And (ContinuousOn f s) (DifferentiableAt 𝕜 f a))","decl":"theorem continuousOn_dslope (h : s ∈ 𝓝 a) :\n    ContinuousOn (dslope f a) s ↔ ContinuousOn f s ∧ DifferentiableAt 𝕜 f a := by\n  refine ⟨fun hc => ⟨hc.of_dslope, continuousAt_dslope_same.1 <| hc.continuousAt h⟩, ?_⟩\n  rintro ⟨hc, hd⟩ x hx\n  rcases eq_or_ne x a with (rfl | hne)\n  exacts [(continuousAt_dslope_same.2 hd).continuousWithinAt,\n    (continuousWithinAt_dslope_of_ne hne).2 (hc x hx)]\n\n"}
{"name":"DifferentiableWithinAt.of_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\ns : Set 𝕜\nh : DifferentiableWithinAt 𝕜 (dslope f a) s b\n⊢ DifferentiableWithinAt 𝕜 f s b","decl":"theorem DifferentiableWithinAt.of_dslope (h : DifferentiableWithinAt 𝕜 (dslope f a) s b) :\n    DifferentiableWithinAt 𝕜 f s b := by\n  simpa only [id, sub_smul_dslope f a, sub_add_cancel] using\n    ((differentiableWithinAt_id.sub_const a).smul h).add_const (f a)\n\n"}
{"name":"DifferentiableAt.of_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\nh : DifferentiableAt 𝕜 (dslope f a) b\n⊢ DifferentiableAt 𝕜 f b","decl":"theorem DifferentiableAt.of_dslope (h : DifferentiableAt 𝕜 (dslope f a) b) :\n    DifferentiableAt 𝕜 f b :=\n  differentiableWithinAt_univ.1 h.differentiableWithinAt.of_dslope\n\n"}
{"name":"DifferentiableOn.of_dslope","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\ns : Set 𝕜\nh : DifferentiableOn 𝕜 (dslope f a) s\n⊢ DifferentiableOn 𝕜 f s","decl":"theorem DifferentiableOn.of_dslope (h : DifferentiableOn 𝕜 (dslope f a) s) :\n    DifferentiableOn 𝕜 f s := fun x hx => (h x hx).of_dslope\n\n"}
{"name":"differentiableWithinAt_dslope_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\ns : Set 𝕜\nh : Ne b a\n⊢ Iff (DifferentiableWithinAt 𝕜 (dslope f a) s b) (DifferentiableWithinAt 𝕜 f s b)","decl":"theorem differentiableWithinAt_dslope_of_ne (h : b ≠ a) :\n    DifferentiableWithinAt 𝕜 (dslope f a) s b ↔ DifferentiableWithinAt 𝕜 f s b := by\n  refine ⟨DifferentiableWithinAt.of_dslope, fun hd => ?_⟩\n  refine (((differentiableWithinAt_id.sub_const a).inv (sub_ne_zero.2 h)).smul\n    (hd.sub_const (f a))).congr_of_eventuallyEq ?_ (dslope_of_ne _ h)\n  refine (eqOn_dslope_slope _ _).eventuallyEq_of_mem ?_\n  exact mem_nhdsWithin_of_mem_nhds (isOpen_ne.mem_nhds h)\n\n"}
{"name":"differentiableOn_dslope_of_nmem","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na : 𝕜\ns : Set 𝕜\nh : Not (Membership.mem s a)\n⊢ Iff (DifferentiableOn 𝕜 (dslope f a) s) (DifferentiableOn 𝕜 f s)","decl":"theorem differentiableOn_dslope_of_nmem (h : a ∉ s) :\n    DifferentiableOn 𝕜 (dslope f a) s ↔ DifferentiableOn 𝕜 f s :=\n  forall_congr' fun _ =>\n    forall_congr' fun hx => differentiableWithinAt_dslope_of_ne <| ne_of_mem_of_not_mem hx h\n\n"}
{"name":"differentiableAt_dslope_of_ne","module":"Mathlib.Analysis.Calculus.DSlope","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : NontriviallyNormedField 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : 𝕜 → E\na b : 𝕜\nh : Ne b a\n⊢ Iff (DifferentiableAt 𝕜 (dslope f a) b) (DifferentiableAt 𝕜 f b)","decl":"theorem differentiableAt_dslope_of_ne (h : b ≠ a) :\n    DifferentiableAt 𝕜 (dslope f a) b ↔ DifferentiableAt 𝕜 f b := by\n  simp only [← differentiableWithinAt_univ, differentiableWithinAt_dslope_of_ne h]\n"}
