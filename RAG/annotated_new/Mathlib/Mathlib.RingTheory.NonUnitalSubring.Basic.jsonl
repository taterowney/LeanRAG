{"name":"NonUnitalSubring.list_sum_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nl : List R\na✝ : ∀ (x : R), Membership.mem l x → Membership.mem s x\n⊢ Membership.mem s l.sum","decl":"/-- Sum of a list of elements in a non-unital subring is in the non-unital subring. -/\nprotected theorem list_sum_mem {l : List R} : (∀ x ∈ l, x ∈ s) → l.sum ∈ s :=\n  list_sum_mem\n\n"}
{"name":"NonUnitalSubring.multiset_sum_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u_1\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nm : Multiset R\na✝ : ∀ (a : R), Membership.mem m a → Membership.mem s a\n⊢ Membership.mem s m.sum","decl":"/-- Sum of a multiset of elements in a `NonUnitalSubring` of a `NonUnitalRing` is\nin the `NonUnitalSubring`. -/\nprotected theorem multiset_sum_mem {R} [NonUnitalNonAssocRing R] (s : NonUnitalSubring R)\n    (m : Multiset R) : (∀ a ∈ m, a ∈ s) → m.sum ∈ s :=\n  multiset_sum_mem _\n\n"}
{"name":"NonUnitalSubring.sum_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u_1\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nι : Type u_2\nt : Finset ι\nf : ι → R\nh : ∀ (c : ι), Membership.mem t c → Membership.mem s (f c)\n⊢ Membership.mem s (t.sum fun i => f i)","decl":"/-- Sum of elements in a `NonUnitalSubring` of a `NonUnitalRing` indexed by a `Finset`\nis in the `NonUnitalSubring`. -/\nprotected theorem sum_mem {R : Type*} [NonUnitalNonAssocRing R] (s : NonUnitalSubring R)\n    {ι : Type*} {t : Finset ι} {f : ι → R} (h : ∀ c ∈ t, f c ∈ s) : (∑ i ∈ t, f i) ∈ s :=\n  sum_mem h\n\n"}
{"name":"NonUnitalSubring.mem_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx : R\n⊢ Membership.mem Top.top x","decl":"@[simp]\ntheorem mem_top (x : R) : x ∈ (⊤ : NonUnitalSubring R) :=\n  Set.mem_univ x\n\n"}
{"name":"NonUnitalSubring.coe_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Eq (↑Top.top) Set.univ","decl":"@[simp]\ntheorem coe_top : ((⊤ : NonUnitalSubring R) : Set R) = Set.univ :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.topEquiv_apply","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx : Subtype fun x => Membership.mem Top.top x\n⊢ Eq (NonUnitalSubring.topEquiv x) ↑x","decl":"/-- The ring equiv between the top element of `NonUnitalSubring R` and `R`. -/\n@[simps!]\ndef topEquiv : (⊤ : NonUnitalSubring R) ≃+* R := NonUnitalSubsemiring.topEquiv\n\n"}
{"name":"NonUnitalSubring.topEquiv_symm_apply_coe","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx : R\n⊢ Eq (↑(NonUnitalSubring.topEquiv.symm x)) x","decl":"/-- The ring equiv between the top element of `NonUnitalSubring R` and `R`. -/\n@[simps!]\ndef topEquiv : (⊤ : NonUnitalSubring R) ≃+* R := NonUnitalSubsemiring.topEquiv\n\n"}
{"name":"NonUnitalSubring.coe_comap","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\ns : NonUnitalSubring S\nf : F\n⊢ Eq (↑(NonUnitalSubring.comap f s)) (Set.preimage ⇑f ↑s)","decl":"@[simp]\ntheorem coe_comap (s : NonUnitalSubring S) (f : F) : (s.comap f : Set R) = f ⁻¹' s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_comap","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\ns : NonUnitalSubring S\nf : F\nx : R\n⊢ Iff (Membership.mem (NonUnitalSubring.comap f s) x) (Membership.mem s (f x))","decl":"@[simp]\ntheorem mem_comap {s : NonUnitalSubring S} {f : F} {x : R} : x ∈ s.comap f ↔ f x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.comap_comap","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\nT : Type u_1\ninst✝² : NonUnitalNonAssocRing R\ninst✝¹ : NonUnitalNonAssocRing S\ninst✝ : NonUnitalNonAssocRing T\ns : NonUnitalSubring T\ng : NonUnitalRingHom S T\nf : NonUnitalRingHom R S\n⊢ Eq (NonUnitalSubring.comap f (NonUnitalSubring.comap g s)) (NonUnitalSubring.comap (g.comp f) s)","decl":"theorem comap_comap (s : NonUnitalSubring T) (g : S →ₙ+* T) (f : R →ₙ+* S) :\n    (s.comap g).comap f = s.comap (g.comp f) :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.coe_map","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nf : F\ns : NonUnitalSubring R\n⊢ Eq (↑(NonUnitalSubring.map f s)) (Set.image ⇑f ↑s)","decl":"@[simp]\ntheorem coe_map (f : F) (s : NonUnitalSubring R) : (s.map f : Set S) = f '' s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_map","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nf : F\ns : NonUnitalSubring R\ny : S\n⊢ Iff (Membership.mem (NonUnitalSubring.map f s) y) (Exists fun x => And (Membership.mem s x) (Eq (f x) y))","decl":"@[simp]\ntheorem mem_map {f : F} {s : NonUnitalSubring R} {y : S} : y ∈ s.map f ↔ ∃ x ∈ s, f x = y :=\n  Set.mem_image _ _ _\n\n"}
{"name":"NonUnitalSubring.map_id","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq (NonUnitalSubring.map (NonUnitalRingHom.id R) s) s","decl":"@[simp]\ntheorem map_id : s.map (NonUnitalRingHom.id R) = s :=\n  SetLike.coe_injective <| Set.image_id _\n\n"}
{"name":"NonUnitalSubring.map_map","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\nT : Type u_1\ninst✝² : NonUnitalNonAssocRing R\ninst✝¹ : NonUnitalNonAssocRing S\ninst✝ : NonUnitalNonAssocRing T\ns : NonUnitalSubring R\ng : NonUnitalRingHom S T\nf : NonUnitalRingHom R S\n⊢ Eq (NonUnitalSubring.map g (NonUnitalSubring.map f s)) (NonUnitalSubring.map (g.comp f) s)","decl":"theorem map_map (g : S →ₙ+* T) (f : R →ₙ+* S) : (s.map f).map g = s.map (g.comp f) :=\n  SetLike.coe_injective <| Set.image_image _ _ _\n\n"}
{"name":"NonUnitalSubring.map_le_iff_le_comap","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nf : F\ns : NonUnitalSubring R\nt : NonUnitalSubring S\n⊢ Iff (LE.le (NonUnitalSubring.map f s) t) (LE.le s (NonUnitalSubring.comap f t))","decl":"theorem map_le_iff_le_comap {f : F} {s : NonUnitalSubring R} {t : NonUnitalSubring S} :\n    s.map f ≤ t ↔ s ≤ t.comap f :=\n  Set.image_subset_iff\n\n"}
{"name":"NonUnitalSubring.gc_map_comap","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nf : F\n⊢ GaloisConnection (NonUnitalSubring.map f) (NonUnitalSubring.comap f)","decl":"theorem gc_map_comap (f : F) :\n    GaloisConnection (map f : NonUnitalSubring R → NonUnitalSubring S) (comap f) := fun _S _T =>\n  map_le_iff_le_comap\n\n"}
{"name":"NonUnitalSubring.coe_equivMapOfInjective_apply","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\ns : NonUnitalSubring R\nf : F\nhf : Function.Injective ⇑f\nx : Subtype fun x => Membership.mem s x\n⊢ Eq (↑((s.equivMapOfInjective f hf) x)) (f ↑x)","decl":"@[simp]\ntheorem coe_equivMapOfInjective_apply (f : F) (hf : Function.Injective f) (x : s) :\n    (equivMapOfInjective s f hf x : S) = f x :=\n  rfl\n\n"}
{"name":"NonUnitalRingHom.coe_range","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Eq (↑f.range) (Set.range ⇑f)","decl":"@[simp]\ntheorem coe_range : (f.range : Set S) = Set.range f :=\n  rfl\n\n"}
{"name":"NonUnitalRingHom.mem_range","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\ny : S\n⊢ Iff (Membership.mem f.range y) (Exists fun x => Eq (f x) y)","decl":"@[simp]\ntheorem mem_range {f : R →ₙ+* S} {y : S} : y ∈ f.range ↔ ∃ x, f x = y :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalRingHom.range_eq_map","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Eq f.range (NonUnitalSubring.map f Top.top)","decl":"theorem range_eq_map (f : R →ₙ+* S) : f.range = NonUnitalSubring.map f ⊤ := by ext; simp\n\n"}
{"name":"NonUnitalRingHom.mem_range_self","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\nx : R\n⊢ Membership.mem f.range (f x)","decl":"theorem mem_range_self (f : R →ₙ+* S) (x : R) : f x ∈ f.range :=\n  mem_range.mpr ⟨x, rfl⟩\n\n"}
{"name":"NonUnitalRingHom.map_range","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\nT : Type u_1\ninst✝² : NonUnitalNonAssocRing R\ninst✝¹ : NonUnitalNonAssocRing S\ninst✝ : NonUnitalNonAssocRing T\ng : NonUnitalRingHom S T\nf : NonUnitalRingHom R S\n⊢ Eq (NonUnitalSubring.map g f.range) (g.comp f).range","decl":"theorem map_range : f.range.map g = (g.comp f).range := by\n  simpa only [range_eq_map] using (⊤ : NonUnitalSubring R).map_map g f\n\n"}
{"name":"NonUnitalSubring.coe_bot","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Eq (↑Bot.bot) (Singleton.singleton 0)","decl":"theorem coe_bot : ((⊥ : NonUnitalSubring R) : Set R) = {0} :=\n  (NonUnitalRingHom.coe_range (0 : R →ₙ+* R)).trans (@Set.range_const R R _ 0)\n\n"}
{"name":"NonUnitalSubring.mem_bot","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx : R\n⊢ Iff (Membership.mem Bot.bot x) (Eq x 0)","decl":"theorem mem_bot {x : R} : x ∈ (⊥ : NonUnitalSubring R) ↔ x = 0 :=\n  show x ∈ ((⊥ : NonUnitalSubring R) : Set R) ↔ x = 0 by rw [coe_bot, Set.mem_singleton_iff]\n\n"}
{"name":"NonUnitalSubring.coe_inf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\np p' : NonUnitalSubring R\n⊢ Eq (↑(Min.min p p')) (Inter.inter ↑p ↑p')","decl":"@[simp]\ntheorem coe_inf (p p' : NonUnitalSubring R) :\n    ((p ⊓ p' : NonUnitalSubring R) : Set R) = (p : Set R) ∩ p' :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_inf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\np p' : NonUnitalSubring R\nx : R\n⊢ Iff (Membership.mem (Min.min p p') x) (And (Membership.mem p x) (Membership.mem p' x))","decl":"@[simp]\ntheorem mem_inf {p p' : NonUnitalSubring R} {x : R} : x ∈ p ⊓ p' ↔ x ∈ p ∧ x ∈ p' :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.coe_sInf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : Set (NonUnitalSubring R)\n⊢ Eq (↑(InfSet.sInf S)) (Set.iInter fun s => Set.iInter fun h => ↑s)","decl":"@[simp, norm_cast]\ntheorem coe_sInf (S : Set (NonUnitalSubring R)) :\n    ((sInf S : NonUnitalSubring R) : Set R) = ⋂ s ∈ S, ↑s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_sInf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : Set (NonUnitalSubring R)\nx : R\n⊢ Iff (Membership.mem (InfSet.sInf S) x) (∀ (p : NonUnitalSubring R), Membership.mem S p → Membership.mem p x)","decl":"theorem mem_sInf {S : Set (NonUnitalSubring R)} {x : R} : x ∈ sInf S ↔ ∀ p ∈ S, x ∈ p :=\n  Set.mem_iInter₂\n\n"}
{"name":"NonUnitalSubring.coe_iInf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nι : Sort u_1\nS : ι → NonUnitalSubring R\n⊢ Eq (↑(iInf fun i => S i)) (Set.iInter fun i => ↑(S i))","decl":"@[simp, norm_cast]\ntheorem coe_iInf {ι : Sort*} {S : ι → NonUnitalSubring R} : (↑(⨅ i, S i) : Set R) = ⋂ i, S i := by\n  simp only [iInf, coe_sInf, Set.biInter_range]\n\n"}
{"name":"NonUnitalSubring.mem_iInf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nι : Sort u_1\nS : ι → NonUnitalSubring R\nx : R\n⊢ Iff (Membership.mem (iInf fun i => S i) x) (∀ (i : ι), Membership.mem (S i) x)","decl":"theorem mem_iInf {ι : Sort*} {S : ι → NonUnitalSubring R} {x : R} :\n    (x ∈ ⨅ i, S i) ↔ ∀ i, x ∈ S i := by simp only [iInf, mem_sInf, Set.forall_mem_range]\n\n"}
{"name":"NonUnitalSubring.sInf_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set (NonUnitalSubring R)\n⊢ Eq (InfSet.sInf s).toSubsemigroup (iInf fun t => iInf fun h => t.toSubsemigroup)","decl":"@[simp]\ntheorem sInf_toSubsemigroup (s : Set (NonUnitalSubring R)) :\n    (sInf s).toSubsemigroup = ⨅ t ∈ s, NonUnitalSubring.toSubsemigroup t :=\n  mk'_toSubsemigroup _ _\n\n"}
{"name":"NonUnitalSubring.sInf_toAddSubgroup","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set (NonUnitalSubring R)\n⊢ Eq (InfSet.sInf s).toAddSubgroup (iInf fun t => iInf fun h => t.toAddSubgroup)","decl":"@[simp]\ntheorem sInf_toAddSubgroup (s : Set (NonUnitalSubring R)) :\n    (sInf s).toAddSubgroup = ⨅ t ∈ s, NonUnitalSubring.toAddSubgroup t :=\n  mk'_toAddSubgroup _ _\n\n"}
{"name":"NonUnitalSubring.eq_top_iff'","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nA : NonUnitalSubring R\n⊢ Iff (Eq A Top.top) (∀ (x : R), Membership.mem A x)","decl":"theorem eq_top_iff' (A : NonUnitalSubring R) : A = ⊤ ↔ ∀ x : R, x ∈ A :=\n  eq_top_iff.trans ⟨fun h m => h <| mem_top m, fun h m _ => h m⟩\n\n"}
{"name":"NonUnitalSubring.coe_center","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Eq (↑(NonUnitalSubring.center R)) (Set.center R)","decl":"theorem coe_center : ↑(center R) = Set.center R :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.center_toNonUnitalSubsemiring","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Eq (NonUnitalSubring.center R).toNonUnitalSubsemiring (NonUnitalSubsemiring.center R)","decl":"@[simp]\ntheorem center_toNonUnitalSubsemiring :\n    (center R).toNonUnitalSubsemiring = NonUnitalSubsemiring.center R :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.centerCongr_symm_apply_coe","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝¹ : NonUnitalNonAssocRing R\nS : Type u_1\ninst✝ : NonUnitalNonAssocRing S\ne : RingEquiv R S\ns : Subtype fun x => Membership.mem (Subsemigroup.center S) x\n⊢ Eq (↑((NonUnitalSubring.centerCongr e).symm s)) ((↑e).symm ↑s)","decl":"/-- The center of isomorphic (not necessarily unital or associative) rings are isomorphic. -/\n@[simps!] def centerCongr {S} [NonUnitalNonAssocRing S] (e : R ≃+* S) : center R ≃+* center S :=\n  NonUnitalSubsemiring.centerCongr e\n\n"}
{"name":"NonUnitalSubring.centerCongr_apply_coe","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝¹ : NonUnitalNonAssocRing R\nS : Type u_1\ninst✝ : NonUnitalNonAssocRing S\ne : RingEquiv R S\nr : Subtype fun x => Membership.mem (Subsemigroup.center R) x\n⊢ Eq (↑((NonUnitalSubring.centerCongr e) r)) (e ↑r)","decl":"/-- The center of isomorphic (not necessarily unital or associative) rings are isomorphic. -/\n@[simps!] def centerCongr {S} [NonUnitalNonAssocRing S] (e : R ≃+* S) : center R ≃+* center S :=\n  NonUnitalSubsemiring.centerCongr e\n\n"}
{"name":"NonUnitalSubring.centerToMulOpposite_apply_coe","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nr : Subtype fun x => Membership.mem (Subsemigroup.center R) x\n⊢ Eq (↑(NonUnitalSubring.centerToMulOpposite r)) (MulOpposite.op ↑r)","decl":"/-- The center of a (not necessarily uintal or associative) ring\nis isomorphic to the center of its opposite. -/\n@[simps!] def centerToMulOpposite : center R ≃+* center Rᵐᵒᵖ :=\n  NonUnitalSubsemiring.centerToMulOpposite\n\n"}
{"name":"NonUnitalSubring.centerToMulOpposite_symm_apply_coe","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nr : Subtype fun x => Membership.mem (Subsemigroup.center (MulOpposite R)) x\n⊢ Eq (↑(NonUnitalSubring.centerToMulOpposite.symm r)) (MulOpposite.unop ↑r)","decl":"/-- The center of a (not necessarily uintal or associative) ring\nis isomorphic to the center of its opposite. -/\n@[simps!] def centerToMulOpposite : center R ≃+* center Rᵐᵒᵖ :=\n  NonUnitalSubsemiring.centerToMulOpposite\n\n"}
{"name":"NonUnitalSubring.mem_center_iff","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalRing R\nz : R\n⊢ Iff (Membership.mem (NonUnitalSubring.center R) z) (∀ (g : R), Eq (HMul.hMul g z) (HMul.hMul z g))","decl":"theorem mem_center_iff {z : R} : z ∈ center R ↔ ∀ g, g * z = z * g := Subsemigroup.mem_center_iff\n\n"}
{"name":"NonUnitalSubring.center_eq_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u_1\ninst✝ : NonUnitalCommRing R\n⊢ Eq (NonUnitalSubring.center R) Top.top","decl":"@[simp]\ntheorem center_eq_top (R) [NonUnitalCommRing R] : center R = ⊤ :=\n  SetLike.coe_injective (Set.center_eq_univ R)\n\n"}
{"name":"NonUnitalSubring.mem_closure","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nx : R\ns : Set R\n⊢ Iff (Membership.mem (NonUnitalSubring.closure s) x) (∀ (S : NonUnitalSubring R), HasSubset.Subset s ↑S → Membership.mem S x)","decl":"theorem mem_closure {x : R} {s : Set R} : x ∈ closure s ↔ ∀ S : NonUnitalSubring R, s ⊆ S → x ∈ S :=\n  mem_sInf\n\n"}
{"name":"NonUnitalSubring.subset_closure","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\n⊢ HasSubset.Subset s ↑(NonUnitalSubring.closure s)","decl":"/-- The `NonUnitalSubring` generated by a set includes the set. -/\n@[simp, aesop safe 20 apply (rule_sets := [SetLike])]\ntheorem subset_closure {s : Set R} : s ⊆ closure s := fun _x hx => mem_closure.2 fun _S hS => hS hx\n\n"}
{"name":"NonUnitalSubring.not_mem_of_not_mem_closure","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nP : R\nhP : Not (Membership.mem (NonUnitalSubring.closure s) P)\n⊢ Not (Membership.mem s P)","decl":"theorem not_mem_of_not_mem_closure {s : Set R} {P : R} (hP : P ∉ closure s) : P ∉ s := fun h =>\n  hP (subset_closure h)\n\n"}
{"name":"NonUnitalSubring.closure_le","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nt : NonUnitalSubring R\n⊢ Iff (LE.le (NonUnitalSubring.closure s) t) (HasSubset.Subset s ↑t)","decl":"/-- A `NonUnitalSubring` `t` includes `closure s` if and only if it includes `s`. -/\n@[simp]\ntheorem closure_le {s : Set R} {t : NonUnitalSubring R} : closure s ≤ t ↔ s ⊆ t :=\n  ⟨Set.Subset.trans subset_closure, fun h => sInf_le h⟩\n\n"}
{"name":"NonUnitalSubring.closure_mono","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns t : Set R\nh : HasSubset.Subset s t\n⊢ LE.le (NonUnitalSubring.closure s) (NonUnitalSubring.closure t)","decl":"/-- `NonUnitalSubring` closure of a set is monotone in its argument: if `s ⊆ t`,\nthen `closure s ≤ closure t`. -/\n@[gcongr]\ntheorem closure_mono ⦃s t : Set R⦄ (h : s ⊆ t) : closure s ≤ closure t :=\n  closure_le.2 <| Set.Subset.trans h subset_closure\n\n"}
{"name":"NonUnitalSubring.closure_eq_of_le","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nt : NonUnitalSubring R\nh₁ : HasSubset.Subset s ↑t\nh₂ : LE.le t (NonUnitalSubring.closure s)\n⊢ Eq (NonUnitalSubring.closure s) t","decl":"theorem closure_eq_of_le {s : Set R} {t : NonUnitalSubring R} (h₁ : s ⊆ t) (h₂ : t ≤ closure s) :\n    closure s = t :=\n  le_antisymm (closure_le.2 h₁) h₂\n\n"}
{"name":"NonUnitalSubring.closure_induction","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\np : (x : R) → Membership.mem (NonUnitalSubring.closure s) x → Prop\nmem : ∀ (x : R) (hx : Membership.mem s x), p x ⋯\nzero : p 0 ⋯\nadd : ∀ (x y : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y), p x hx → p y hy → p (HAdd.hAdd x y) ⋯\nneg : ∀ (x : R) (hx : Membership.mem (NonUnitalSubring.closure s) x), p x hx → p (Neg.neg x) ⋯\nmul : ∀ (x y : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y), p x hx → p y hy → p (HMul.hMul x y) ⋯\nx : R\nhx : Membership.mem (NonUnitalSubring.closure s) x\n⊢ p x hx","decl":"/-- An induction principle for closure membership. If `p` holds for `0`, `1`, and all elements\nof `s`, and is preserved under addition, negation, and multiplication, then `p` holds for all\nelements of the closure of `s`. -/\n@[elab_as_elim]\ntheorem closure_induction {s : Set R} {p : (x : R) → x ∈ closure s → Prop}\n    (mem : ∀ (x) (hx : x ∈ s), p x (subset_closure hx)) (zero : p 0 (zero_mem _))\n    (add : ∀ x y hx hy, p x hx → p y hy → p (x + y) (add_mem hx hy))\n    (neg : ∀ x hx, p x hx → p (-x) (neg_mem hx))\n    (mul : ∀ x y hx hy, p x hx → p y hy → p (x * y) (mul_mem hx hy))\n    {x} (hx : x ∈ closure s)  : p x hx :=\n  let K : NonUnitalSubring R :=\n    { carrier := { x | ∃ hx, p x hx }\n      mul_mem' := fun ⟨_, hpx⟩ ⟨_, hpy⟩ ↦ ⟨_, mul _ _ _ _ hpx hpy⟩\n      add_mem' := fun ⟨_, hpx⟩ ⟨_, hpy⟩ ↦ ⟨_, add _ _ _ _ hpx hpy⟩\n      neg_mem' := fun ⟨_, hpx⟩ ↦ ⟨_, neg _ _ hpx⟩\n      zero_mem' := ⟨_, zero⟩ }\n  closure_le (t := K) |>.mpr (fun y hy ↦ ⟨subset_closure hy, mem y hy⟩) hx |>.elim fun _ ↦ id\n\n"}
{"name":"NonUnitalSubring.closure_induction'","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\np : (Subtype fun x => Membership.mem (NonUnitalSubring.closure s) x) → Prop\na : Subtype fun x => Membership.mem (NonUnitalSubring.closure s) x\nmem : ∀ (x : R) (hx : Membership.mem s x), p ⟨x, ⋯⟩\nzero : p 0\nadd : ∀ (x y : Subtype fun x => Membership.mem (NonUnitalSubring.closure s) x), p x → p y → p (HAdd.hAdd x y)\nneg : ∀ (x : Subtype fun x => Membership.mem (NonUnitalSubring.closure s) x), p x → p (Neg.neg x)\nmul : ∀ (x y : Subtype fun x => Membership.mem (NonUnitalSubring.closure s) x), p x → p y → p (HMul.hMul x y)\n⊢ p a","decl":"/-- The difference with `NonUnitalSubring.closure_induction` is that this acts on the\nsubtype. -/\n@[elab_as_elim, deprecated closure_induction (since := \"2024-10-11\")]\ntheorem closure_induction' {s : Set R} {p : closure s → Prop} (a : closure s)\n    (mem : ∀ (x) (hx : x ∈ s), p ⟨x, subset_closure hx⟩) (zero : p 0)\n    (add : ∀ x y, p x → p y → p (x + y)) (neg : ∀ x, p x → p (-x))\n    (mul : ∀ x y, p x → p y → p (x * y)) : p a :=\n  Subtype.recOn a fun b hb => by\n    induction hb using closure_induction with\n    | mem x hx => exact mem x hx\n    | zero => exact zero\n    | add x y hx hy h₁ h₂ => exact add _ _ h₁ h₂\n    | neg x hx h => exact neg _ h\n    | mul x y hx hy h₁ h₂ => exact mul _ _ h₁ h₂\n\n"}
{"name":"NonUnitalSubring.closure_induction₂","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\np : (x y : R) → Membership.mem (NonUnitalSubring.closure s) x → Membership.mem (NonUnitalSubring.closure s) y → Prop\nmem_mem : ∀ (x y : R) (hx : Membership.mem s x) (hy : Membership.mem s y), p x y ⋯ ⋯\nzero_left : ∀ (x : R) (hx : Membership.mem (NonUnitalSubring.closure s) x), p 0 x ⋯ hx\nzero_right : ∀ (x : R) (hx : Membership.mem (NonUnitalSubring.closure s) x), p x 0 hx ⋯\nneg_left : ∀ (x y : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y), p x y hx hy → p (Neg.neg x) y ⋯ hy\nneg_right : ∀ (x y : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y), p x y hx hy → p x (Neg.neg y) hx ⋯\nadd_left : ∀ (x y z : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y) (hz : Membership.mem (NonUnitalSubring.closure s) z), p x z hx hz → p y z hy hz → p (HAdd.hAdd x y) z ⋯ hz\nadd_right : ∀ (x y z : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y) (hz : Membership.mem (NonUnitalSubring.closure s) z), p x y hx hy → p x z hx hz → p x (HAdd.hAdd y z) hx ⋯\nmul_left : ∀ (x y z : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y) (hz : Membership.mem (NonUnitalSubring.closure s) z), p x z hx hz → p y z hy hz → p (HMul.hMul x y) z ⋯ hz\nmul_right : ∀ (x y z : R) (hx : Membership.mem (NonUnitalSubring.closure s) x) (hy : Membership.mem (NonUnitalSubring.closure s) y) (hz : Membership.mem (NonUnitalSubring.closure s) z), p x y hx hy → p x z hx hz → p x (HMul.hMul y z) hx ⋯\nx y : R\nhx : Membership.mem (NonUnitalSubring.closure s) x\nhy : Membership.mem (NonUnitalSubring.closure s) y\n⊢ p x y hx hy","decl":"/-- An induction principle for closure membership, for predicates with two arguments. -/\n@[elab_as_elim]\ntheorem closure_induction₂ {s : Set R} {p : (x y : R) → x ∈ closure s → y ∈ closure s → Prop}\n    (mem_mem : ∀ (x) (y) (hx : x ∈ s) (hy : y ∈ s), p x y (subset_closure hx) (subset_closure hy))\n    (zero_left : ∀ x hx, p 0 x (zero_mem _) hx) (zero_right : ∀ x hx, p x 0 hx (zero_mem _))\n    (neg_left : ∀ x y hx hy, p x y hx hy → p (-x) y (neg_mem hx) hy)\n    (neg_right : ∀ x y hx hy, p x y hx hy → p x (-y) hx (neg_mem hy))\n    (add_left : ∀ x y z hx hy hz, p x z hx hz → p y z hy hz → p (x + y) z (add_mem hx hy) hz)\n    (add_right : ∀ x y z hx hy hz, p x y hx hy → p x z hx hz → p x (y + z) hx (add_mem hy hz))\n    (mul_left : ∀ x y z hx hy hz, p x z hx hz → p y z hy hz → p (x * y) z (mul_mem hx hy) hz)\n    (mul_right : ∀ x y z hx hy hz, p x y hx hy → p x z hx hz → p x (y * z) hx (mul_mem hy hz))\n    {x y : R} (hx : x ∈ closure s) (hy : y ∈ closure s) :\n    p x y hx hy := by\n  induction hy using closure_induction with\n  | mem z hz => induction hx using closure_induction with\n    | mem _ h => exact mem_mem _ _ h hz\n    | zero => exact zero_left _ _\n    | mul _ _ _ _ h₁ h₂ => exact mul_left _ _ _ _ _ _ h₁ h₂\n    | add _ _ _ _ h₁ h₂ => exact add_left _ _ _ _ _ _ h₁ h₂\n    | neg _ _ h => exact neg_left _ _ _ _ h\n  | zero => exact zero_right x hx\n  | mul _ _ _ _ h₁ h₂ => exact mul_right _ _ _ _ _ _ h₁ h₂\n  | add _ _ _ _ h₁ h₂ => exact add_right _ _ _ _ _ _ h₁ h₂\n  | neg _ _ h => exact neg_right _ _ _ _ h\n\n"}
{"name":"NonUnitalSubring.mem_closure_iff","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nx : R\n⊢ Iff (Membership.mem (NonUnitalSubring.closure s) x) (Membership.mem (AddSubgroup.closure ↑(Subsemigroup.closure s)) x)","decl":"theorem mem_closure_iff {s : Set R} {x} :\n    x ∈ closure s ↔ x ∈ AddSubgroup.closure (Subsemigroup.closure s : Set R) :=\n  ⟨fun h => by\n    induction h using closure_induction with\n    | mem _ hx => exact AddSubgroup.subset_closure (Subsemigroup.subset_closure hx)\n    | zero => exact zero_mem _\n    | add _ _ _ _ hx hy => exact add_mem hx hy\n    | neg x _ hx => exact neg_mem hx\n    | mul _ _ _hx _hy hx hy =>\n      clear _hx _hy\n      induction hx, hy using AddSubgroup.closure_induction₂ with\n      | mem _ _ hx hy => exact AddSubgroup.subset_closure (mul_mem hx hy)\n      | one_left => simpa using zero_mem _\n      | one_right => simpa using zero_mem _\n      | mul_left _ _ _ _ _ _ h₁ h₂ => simpa [add_mul] using add_mem h₁ h₂\n      | mul_right _ _ _ _ _ _ h₁ h₂ => simpa [mul_add] using add_mem h₁ h₂\n      | inv_left _ _ _ _ h => simpa [neg_mul] using neg_mem h\n      | inv_right _ _ _ _ h => simpa [mul_neg] using neg_mem h,\n  fun h => by\n    induction h using AddSubgroup.closure_induction with\n    | mem _ hx => induction hx using Subsemigroup.closure_induction with\n      | mem _ h => exact subset_closure h\n      | mul _ _ _ _ h₁ h₂ => exact mul_mem h₁ h₂\n    | one => exact zero_mem _\n    | mul _ _ _ _ h₁ h₂ => exact add_mem h₁ h₂\n    | inv _ _ h => exact neg_mem h⟩\n\n"}
{"name":"NonUnitalSubring.closure_eq","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq (NonUnitalSubring.closure ↑s) s","decl":"/-- Closure of a `NonUnitalSubring` `S` equals `S`. -/\n@[simp]\ntheorem closure_eq (s : NonUnitalSubring R) : closure (s : Set R) = s :=\n  (NonUnitalSubring.gi R).l_u_eq s\n\n"}
{"name":"NonUnitalSubring.closure_empty","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Eq (NonUnitalSubring.closure EmptyCollection.emptyCollection) Bot.bot","decl":"@[simp]\ntheorem closure_empty : closure (∅ : Set R) = ⊥ :=\n  (NonUnitalSubring.gi R).gc.l_bot\n\n"}
{"name":"NonUnitalSubring.closure_univ","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Eq (NonUnitalSubring.closure Set.univ) Top.top","decl":"@[simp]\ntheorem closure_univ : closure (Set.univ : Set R) = ⊤ :=\n  @coe_top R _ ▸ closure_eq ⊤\n\n"}
{"name":"NonUnitalSubring.closure_union","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns t : Set R\n⊢ Eq (NonUnitalSubring.closure (Union.union s t)) (Max.max (NonUnitalSubring.closure s) (NonUnitalSubring.closure t))","decl":"theorem closure_union (s t : Set R) : closure (s ∪ t) = closure s ⊔ closure t :=\n  (NonUnitalSubring.gi R).gc.l_sup\n\n"}
{"name":"NonUnitalSubring.closure_iUnion","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nι : Sort u_1\ns : ι → Set R\n⊢ Eq (NonUnitalSubring.closure (Set.iUnion fun i => s i)) (iSup fun i => NonUnitalSubring.closure (s i))","decl":"theorem closure_iUnion {ι} (s : ι → Set R) : closure (⋃ i, s i) = ⨆ i, closure (s i) :=\n  (NonUnitalSubring.gi R).gc.l_iSup\n\n"}
{"name":"NonUnitalSubring.closure_sUnion","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set (Set R)\n⊢ Eq (NonUnitalSubring.closure s.sUnion) (iSup fun t => iSup fun h => NonUnitalSubring.closure t)","decl":"theorem closure_sUnion (s : Set (Set R)) : closure (⋃₀ s) = ⨆ t ∈ s, closure t :=\n  (NonUnitalSubring.gi R).gc.l_sSup\n\n"}
{"name":"NonUnitalSubring.map_sup","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\ns t : NonUnitalSubring R\nf : F\n⊢ Eq (NonUnitalSubring.map f (Max.max s t)) (Max.max (NonUnitalSubring.map f s) (NonUnitalSubring.map f t))","decl":"theorem map_sup (s t : NonUnitalSubring R) (f : F) : (s ⊔ t).map f = s.map f ⊔ t.map f :=\n  (gc_map_comap f).l_sup\n\n"}
{"name":"NonUnitalSubring.map_iSup","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nι : Sort u_1\nf : F\ns : ι → NonUnitalSubring R\n⊢ Eq (NonUnitalSubring.map f (iSup s)) (iSup fun i => NonUnitalSubring.map f (s i))","decl":"theorem map_iSup {ι : Sort*} (f : F) (s : ι → NonUnitalSubring R) :\n    (iSup s).map f = ⨆ i, (s i).map f :=\n  (gc_map_comap f).l_iSup\n\n"}
{"name":"NonUnitalSubring.map_inf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\ns t : NonUnitalSubring R\nf : F\nhf : Function.Injective ⇑f\n⊢ Eq (NonUnitalSubring.map f (Min.min s t)) (Min.min (NonUnitalSubring.map f s) (NonUnitalSubring.map f t))","decl":"theorem map_inf (s t : NonUnitalSubring R) (f : F) (hf : Function.Injective f) :\n    (s ⊓ t).map f = s.map f ⊓ t.map f := SetLike.coe_injective (Set.image_inter hf)\n\n"}
{"name":"NonUnitalSubring.map_iInf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝⁴ : NonUnitalNonAssocRing R\ninst✝³ : NonUnitalNonAssocRing S\ninst✝² : FunLike F R S\ninst✝¹ : NonUnitalRingHomClass F R S\nι : Sort u_1\ninst✝ : Nonempty ι\nf : F\nhf : Function.Injective ⇑f\ns : ι → NonUnitalSubring R\n⊢ Eq (NonUnitalSubring.map f (iInf s)) (iInf fun i => NonUnitalSubring.map f (s i))","decl":"theorem map_iInf {ι : Sort*} [Nonempty ι] (f : F) (hf : Function.Injective f)\n    (s : ι → NonUnitalSubring R) : (iInf s).map f = ⨅ i, (s i).map f := by\n  apply SetLike.coe_injective\n  simpa using (Set.injOn_of_injective hf).image_iInter_eq (s := SetLike.coe ∘ s)\n\n"}
{"name":"NonUnitalSubring.comap_inf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\ns t : NonUnitalSubring S\nf : F\n⊢ Eq (NonUnitalSubring.comap f (Min.min s t)) (Min.min (NonUnitalSubring.comap f s) (NonUnitalSubring.comap f t))","decl":"theorem comap_inf (s t : NonUnitalSubring S) (f : F) : (s ⊓ t).comap f = s.comap f ⊓ t.comap f :=\n  (gc_map_comap f).u_inf\n\n"}
{"name":"NonUnitalSubring.comap_iInf","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nι : Sort u_1\nf : F\ns : ι → NonUnitalSubring S\n⊢ Eq (NonUnitalSubring.comap f (iInf s)) (iInf fun i => NonUnitalSubring.comap f (s i))","decl":"theorem comap_iInf {ι : Sort*} (f : F) (s : ι → NonUnitalSubring S) :\n    (iInf s).comap f = ⨅ i, (s i).comap f :=\n  (gc_map_comap f).u_iInf\n\n"}
{"name":"NonUnitalSubring.map_bot","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Eq (NonUnitalSubring.map f Bot.bot) Bot.bot","decl":"@[simp]\ntheorem map_bot (f : R →ₙ+* S) : (⊥ : NonUnitalSubring R).map f = ⊥ :=\n  (gc_map_comap f).l_bot\n\n"}
{"name":"NonUnitalSubring.comap_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Eq (NonUnitalSubring.comap f Top.top) Top.top","decl":"@[simp]\ntheorem comap_top (f : R →ₙ+* S) : (⊤ : NonUnitalSubring S).comap f = ⊤ :=\n  (gc_map_comap f).u_top\n\n"}
{"name":"NonUnitalSubring.coe_prod","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns : NonUnitalSubring R\nt : NonUnitalSubring S\n⊢ Eq (↑(s.prod t)) (SProd.sprod ↑s ↑t)","decl":"@[norm_cast]\ntheorem coe_prod (s : NonUnitalSubring R) (t : NonUnitalSubring S) :\n    (s.prod t : Set (R × S)) = (s : Set R) ×ˢ t :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_prod","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns : NonUnitalSubring R\nt : NonUnitalSubring S\np : Prod R S\n⊢ Iff (Membership.mem (s.prod t) p) (And (Membership.mem s p.1) (Membership.mem t p.2))","decl":"theorem mem_prod {s : NonUnitalSubring R} {t : NonUnitalSubring S} {p : R × S} :\n    p ∈ s.prod t ↔ p.1 ∈ s ∧ p.2 ∈ t :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.prod_mono","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns₁ s₂ : NonUnitalSubring R\nhs : LE.le s₁ s₂\nt₁ t₂ : NonUnitalSubring S\nht : LE.le t₁ t₂\n⊢ LE.le (s₁.prod t₁) (s₂.prod t₂)","decl":"@[mono]\ntheorem prod_mono ⦃s₁ s₂ : NonUnitalSubring R⦄ (hs : s₁ ≤ s₂) ⦃t₁ t₂ : NonUnitalSubring S⦄\n    (ht : t₁ ≤ t₂) : s₁.prod t₁ ≤ s₂.prod t₂ :=\n  Set.prod_mono hs ht\n\n"}
{"name":"NonUnitalSubring.prod_mono_right","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns : NonUnitalSubring R\n⊢ Monotone fun t => s.prod t","decl":"theorem prod_mono_right (s : NonUnitalSubring R) :\n    Monotone fun t : NonUnitalSubring S => s.prod t :=\n  prod_mono (le_refl s)\n\n"}
{"name":"NonUnitalSubring.prod_mono_left","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nt : NonUnitalSubring S\n⊢ Monotone fun s => s.prod t","decl":"theorem prod_mono_left (t : NonUnitalSubring S) : Monotone fun s : NonUnitalSubring R => s.prod t :=\n  fun _s₁ _s₂ hs => prod_mono hs (le_refl t)\n\n"}
{"name":"NonUnitalSubring.prod_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns : NonUnitalSubring R\n⊢ Eq (s.prod Top.top) (NonUnitalSubring.comap (NonUnitalRingHom.fst R S) s)","decl":"theorem prod_top (s : NonUnitalSubring R) :\n    s.prod (⊤ : NonUnitalSubring S) = s.comap (NonUnitalRingHom.fst R S) :=\n  ext fun x => by simp [mem_prod, MonoidHom.coe_fst]\n\n"}
{"name":"NonUnitalSubring.top_prod","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns : NonUnitalSubring S\n⊢ Eq (Top.top.prod s) (NonUnitalSubring.comap (NonUnitalRingHom.snd R S) s)","decl":"theorem top_prod (s : NonUnitalSubring S) :\n    (⊤ : NonUnitalSubring R).prod s = s.comap (NonUnitalRingHom.snd R S) :=\n  ext fun x => by simp [mem_prod, MonoidHom.coe_snd]\n\n"}
{"name":"NonUnitalSubring.top_prod_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\n⊢ Eq (Top.top.prod Top.top) Top.top","decl":"@[simp]\ntheorem top_prod_top : (⊤ : NonUnitalSubring R).prod (⊤ : NonUnitalSubring S) = ⊤ :=\n  (top_prod _).trans <| comap_top _\n\n"}
{"name":"NonUnitalSubring.mem_iSup_of_directed","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nι : Sort u_1\nhι : Nonempty ι\nS : ι → NonUnitalSubring R\nhS : Directed (fun x1 x2 => LE.le x1 x2) S\nx : R\n⊢ Iff (Membership.mem (iSup fun i => S i) x) (Exists fun i => Membership.mem (S i) x)","decl":"/-- The underlying set of a non-empty directed Sup of `NonUnitalSubring`s is just a union of the\n`NonUnitalSubring`s. Note that this fails without the directedness assumption (the union of two\n`NonUnitalSubring`s is typically not a `NonUnitalSubring`) -/\ntheorem mem_iSup_of_directed {ι} [hι : Nonempty ι] {S : ι → NonUnitalSubring R}\n    (hS : Directed (· ≤ ·) S) {x : R} : (x ∈ ⨆ i, S i) ↔ ∃ i, x ∈ S i := by\n  refine ⟨?_, fun ⟨i, hi⟩ ↦ le_iSup S i hi⟩\n  let U : NonUnitalSubring R :=\n    NonUnitalSubring.mk' (⋃ i, (S i : Set R)) (⨆ i, (S i).toSubsemigroup) (⨆ i, (S i).toAddSubgroup)\n      (Subsemigroup.coe_iSup_of_directed hS) (AddSubgroup.coe_iSup_of_directed hS)\n  suffices ⨆ i, S i ≤ U by simpa [U] using @this x\n  exact iSup_le fun i x hx ↦ Set.mem_iUnion.2 ⟨i, hx⟩\n\n"}
{"name":"NonUnitalSubring.coe_iSup_of_directed","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝¹ : NonUnitalNonAssocRing R\nι : Sort u_1\ninst✝ : Nonempty ι\nS : ι → NonUnitalSubring R\nhS : Directed (fun x1 x2 => LE.le x1 x2) S\n⊢ Eq (↑(iSup fun i => S i)) (Set.iUnion fun i => ↑(S i))","decl":"theorem coe_iSup_of_directed {ι} [Nonempty ι] {S : ι → NonUnitalSubring R}\n    (hS : Directed (· ≤ ·) S) : ((⨆ i, S i : NonUnitalSubring R) : Set R) = ⋃ i, S i :=\n  Set.ext fun x ↦ by simp [mem_iSup_of_directed hS]\n\n"}
{"name":"NonUnitalSubring.mem_sSup_of_directedOn","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : Set (NonUnitalSubring R)\nSne : S.Nonempty\nhS : DirectedOn (fun x1 x2 => LE.le x1 x2) S\nx : R\n⊢ Iff (Membership.mem (SupSet.sSup S) x) (Exists fun s => And (Membership.mem S s) (Membership.mem s x))","decl":"theorem mem_sSup_of_directedOn {S : Set (NonUnitalSubring R)} (Sne : S.Nonempty)\n    (hS : DirectedOn (· ≤ ·) S) {x : R} : x ∈ sSup S ↔ ∃ s ∈ S, x ∈ s := by\n  haveI : Nonempty S := Sne.to_subtype\n  simp only [sSup_eq_iSup', mem_iSup_of_directed hS.directed_val, SetCoe.exists, Subtype.coe_mk,\n    exists_prop]\n\n"}
{"name":"NonUnitalSubring.coe_sSup_of_directedOn","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : Set (NonUnitalSubring R)\nSne : S.Nonempty\nhS : DirectedOn (fun x1 x2 => LE.le x1 x2) S\n⊢ Eq (↑(SupSet.sSup S)) (Set.iUnion fun s => Set.iUnion fun h => ↑s)","decl":"theorem coe_sSup_of_directedOn {S : Set (NonUnitalSubring R)} (Sne : S.Nonempty)\n    (hS : DirectedOn (· ≤ ·) S) : (↑(sSup S) : Set R) = ⋃ s ∈ S, ↑s :=\n  Set.ext fun x => by simp [mem_sSup_of_directedOn Sne hS]\n\n"}
{"name":"NonUnitalSubring.mem_map_equiv","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : RingEquiv R S\nK : NonUnitalSubring R\nx : S\n⊢ Iff (Membership.mem (NonUnitalSubring.map (↑f) K) x) (Membership.mem K (f.symm x))","decl":"theorem mem_map_equiv {f : R ≃+* S} {K : NonUnitalSubring R} {x : S} :\n    x ∈ K.map (f : R →ₙ+* S) ↔ f.symm x ∈ K :=\n  @Set.mem_image_equiv _ _ (K : Set R) f.toEquiv x\n\n"}
{"name":"NonUnitalSubring.map_equiv_eq_comap_symm","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : RingEquiv R S\nK : NonUnitalSubring R\n⊢ Eq (NonUnitalSubring.map (↑f) K) (NonUnitalSubring.comap f.symm K)","decl":"theorem map_equiv_eq_comap_symm (f : R ≃+* S) (K : NonUnitalSubring R) :\n    K.map (f : R →ₙ+* S) = K.comap f.symm :=\n  SetLike.coe_injective (f.toEquiv.image_eq_preimage K)\n\n"}
{"name":"NonUnitalSubring.comap_equiv_eq_map_symm","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : RingEquiv R S\nK : NonUnitalSubring S\n⊢ Eq (NonUnitalSubring.comap (↑f) K) (NonUnitalSubring.map f.symm K)","decl":"theorem comap_equiv_eq_map_symm (f : R ≃+* S) (K : NonUnitalSubring S) :\n    K.comap (f : R →ₙ+* S) = K.map f.symm :=\n  (map_equiv_eq_comap_symm f.symm K).symm\n\n"}
{"name":"NonUnitalRingHom.coe_rangeRestrict","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\nx : R\n⊢ Eq (↑(f.rangeRestrict x)) (f x)","decl":"@[simp]\ntheorem coe_rangeRestrict (f : R →ₙ+* S) (x : R) : (f.rangeRestrict x : S) = f x :=\n  rfl\n\n"}
{"name":"NonUnitalRingHom.rangeRestrict_surjective","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Function.Surjective ⇑f.rangeRestrict","decl":"theorem rangeRestrict_surjective (f : R →ₙ+* S) : Function.Surjective f.rangeRestrict :=\n  fun ⟨_y, hy⟩ =>\n  let ⟨x, hx⟩ := mem_range.mp hy\n  ⟨x, Subtype.ext hx⟩\n\n"}
{"name":"NonUnitalRingHom.range_eq_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Iff (Eq f.range Top.top) (Function.Surjective ⇑f)","decl":"theorem range_eq_top {f : R →ₙ+* S} :\n    f.range = (⊤ : NonUnitalSubring S) ↔ Function.Surjective f :=\n  SetLike.ext'_iff.trans <| Iff.trans (by rw [coe_range, coe_top]) Set.range_eq_univ\n\n"}
{"name":"NonUnitalRingHom.range_top_iff_surjective","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Iff (Eq f.range Top.top) (Function.Surjective ⇑f)","decl":"@[deprecated (since := \"2024-11-11\")] alias range_top_iff_surjective := range_eq_top\n\n"}
{"name":"NonUnitalRingHom.range_eq_top_of_surjective","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\nhf : Function.Surjective ⇑f\n⊢ Eq f.range Top.top","decl":"/-- The range of a surjective ring homomorphism is the whole of the codomain. -/\n@[simp]\ntheorem range_eq_top_of_surjective (f : R →ₙ+* S) (hf : Function.Surjective f) :\n    f.range = (⊤ : NonUnitalSubring S) :=\n  range_eq_top.2 hf\n\n"}
{"name":"NonUnitalRingHom.range_top_of_surjective","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\nhf : Function.Surjective ⇑f\n⊢ Eq f.range Top.top","decl":"@[deprecated (since := \"2024-11-11\")] alias range_top_of_surjective := range_eq_top_of_surjective\n\n"}
{"name":"NonUnitalRingHom.eqLocus_same","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\n⊢ Eq (f.eqLocus f) Top.top","decl":"@[simp]\ntheorem eqLocus_same (f : R →ₙ+* S) : f.eqLocus f = ⊤ :=\n  SetLike.ext fun _ => eq_self_iff_true _\n\n"}
{"name":"NonUnitalRingHom.eqOn_set_closure","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf g : NonUnitalRingHom R S\ns : Set R\nh : Set.EqOn (⇑f) (⇑g) s\n⊢ Set.EqOn ⇑f ⇑g ↑(NonUnitalSubring.closure s)","decl":"/-- If two ring homomorphisms are equal on a set, then they are equal on its\n`NonUnitalSubring` closure. -/\ntheorem eqOn_set_closure {f g : R →ₙ+* S} {s : Set R} (h : Set.EqOn f g s) :\n    Set.EqOn f g (closure s) :=\n  show closure s ≤ f.eqLocus g from closure_le.2 h\n\n"}
{"name":"NonUnitalRingHom.eq_of_eqOn_set_top","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf g : NonUnitalRingHom R S\nh : Set.EqOn ⇑f ⇑g ↑Top.top\n⊢ Eq f g","decl":"theorem eq_of_eqOn_set_top {f g : R →ₙ+* S} (h : Set.EqOn f g (⊤ : NonUnitalSubring R)) : f = g :=\n  ext fun _x => h trivial\n\n"}
{"name":"NonUnitalRingHom.eq_of_eqOn_set_dense","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\ns : Set R\nhs : Eq (NonUnitalSubring.closure s) Top.top\nf g : NonUnitalRingHom R S\nh : Set.EqOn (⇑f) (⇑g) s\n⊢ Eq f g","decl":"theorem eq_of_eqOn_set_dense {s : Set R} (hs : closure s = ⊤) {f g : R →ₙ+* S} (h : s.EqOn f g) :\n    f = g :=\n  eq_of_eqOn_set_top <| hs ▸ eqOn_set_closure h\n\n"}
{"name":"NonUnitalRingHom.closure_preimage_le","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\ns : Set S\n⊢ LE.le (NonUnitalSubring.closure (Set.preimage (⇑f) s)) (NonUnitalSubring.comap f (NonUnitalSubring.closure s))","decl":"theorem closure_preimage_le (f : R →ₙ+* S) (s : Set S) : closure (f ⁻¹' s) ≤ (closure s).comap f :=\n  closure_le.2 fun _x hx => SetLike.mem_coe.2 <| mem_comap.2 <| subset_closure hx\n\n"}
{"name":"NonUnitalRingHom.map_closure","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\nf : NonUnitalRingHom R S\ns : Set R\n⊢ Eq (NonUnitalSubring.map f (NonUnitalSubring.closure s)) (NonUnitalSubring.closure (Set.image (⇑f) s))","decl":"/-- The image under a ring homomorphism of the `NonUnitalSubring` generated by a set equals\nthe `NonUnitalSubring` generated by the image of the set. -/\ntheorem map_closure (f : R →ₙ+* S) (s : Set R) : (closure s).map f = closure (f '' s) :=\n  Set.image_preimage.l_comm_of_u_comm (gc_map_comap f) (NonUnitalSubring.gi S).gc\n    (NonUnitalSubring.gi R).gc fun _ ↦ rfl\n\n"}
{"name":"NonUnitalSubring.range_subtype","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq (NonUnitalSubringClass.subtype s).range s","decl":"@[simp]\ntheorem range_subtype (s : NonUnitalSubring R) : (NonUnitalSubringClass.subtype s).range = s :=\n  SetLike.coe_injective <| (coe_srange _).trans Subtype.range_coe\n\n"}
{"name":"NonUnitalSubring.range_fst","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\n⊢ Eq (NonUnitalRingHom.srange (NonUnitalRingHom.fst R S)) Top.top","decl":"theorem range_fst : NonUnitalRingHom.srange (fst R S) = ⊤ :=\n  NonUnitalSubsemiring.range_fst\n\n"}
{"name":"NonUnitalSubring.range_snd","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : NonUnitalNonAssocRing S\n⊢ Eq (NonUnitalRingHom.srange (NonUnitalRingHom.snd R S)) Top.top","decl":"theorem range_snd : NonUnitalRingHom.srange (snd R S) = ⊤ :=\n  NonUnitalSubsemiring.range_snd\n\n"}
{"name":"RingEquiv.ofLeftInverse'_apply","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalRing R\ninst✝ : NonUnitalRing S\ng : S → R\nf : NonUnitalRingHom R S\nh : Function.LeftInverse g ⇑f\nx : R\n⊢ Eq (↑((RingEquiv.ofLeftInverse' h) x)) (f x)","decl":"@[simp]\ntheorem ofLeftInverse'_apply {g : S → R} {f : R →ₙ+* S} (h : Function.LeftInverse g f) (x : R) :\n    ↑(ofLeftInverse' h x) = f x :=\n  rfl\n\n"}
{"name":"RingEquiv.ofLeftInverse'_symm_apply","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalRing R\ninst✝ : NonUnitalRing S\ng : S → R\nf : NonUnitalRingHom R S\nh : Function.LeftInverse g ⇑f\nx : Subtype fun x => Membership.mem f.range x\n⊢ Eq ((RingEquiv.ofLeftInverse' h).symm x) (g ↑x)","decl":"@[simp]\ntheorem ofLeftInverse'_symm_apply {g : S → R} {f : R →ₙ+* S} (h : Function.LeftInverse g f)\n    (x : f.range) : (ofLeftInverse' h).symm x = g x :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.closure_preimage_le","module":"Mathlib.RingTheory.NonUnitalSubring.Basic","initialProofState":"F : Type w\nR : Type u\nS : Type v\ninst✝³ : NonUnitalNonAssocRing R\ninst✝² : NonUnitalNonAssocRing S\ninst✝¹ : FunLike F R S\ninst✝ : NonUnitalRingHomClass F R S\nf : F\ns : Set S\n⊢ LE.le (NonUnitalSubring.closure (Set.preimage (⇑f) s)) (NonUnitalSubring.comap f (NonUnitalSubring.closure s))","decl":"theorem closure_preimage_le (f : F) (s : Set S) :\n    closure ((f : R → S) ⁻¹' s) ≤ (closure s).comap f :=\n  closure_le.2 fun _x hx => SetLike.mem_coe.2 <| mem_comap.2 <| subset_closure hx\n\n"}
