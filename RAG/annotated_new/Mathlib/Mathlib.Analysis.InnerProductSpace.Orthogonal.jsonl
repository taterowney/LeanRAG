{"name":"Submodule.mem_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\nv : E\n⊢ Iff (Membership.mem K.orthogonal v) (∀ (u : E), Membership.mem K u → Eq (Inner.inner u v) 0)","decl":"/-- When a vector is in `Kᗮ`. -/\ntheorem mem_orthogonal (v : E) : v ∈ Kᗮ ↔ ∀ u ∈ K, ⟪u, v⟫ = 0 :=\n  Iff.rfl\n\n"}
{"name":"Submodule.mem_orthogonal'","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\nv : E\n⊢ Iff (Membership.mem K.orthogonal v) (∀ (u : E), Membership.mem K u → Eq (Inner.inner v u) 0)","decl":"/-- When a vector is in `Kᗮ`, with the inner product the\nother way round. -/\ntheorem mem_orthogonal' (v : E) : v ∈ Kᗮ ↔ ∀ u ∈ K, ⟪v, u⟫ = 0 := by\n  simp_rw [mem_orthogonal, inner_eq_zero_symm]\n\n"}
{"name":"Submodule.inner_right_of_mem_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\nu v : E\nhu : Membership.mem K u\nhv : Membership.mem K.orthogonal v\n⊢ Eq (Inner.inner u v) 0","decl":"/-- A vector in `K` is orthogonal to one in `Kᗮ`. -/\ntheorem inner_right_of_mem_orthogonal {u v : E} (hu : u ∈ K) (hv : v ∈ Kᗮ) : ⟪u, v⟫ = 0 :=\n  (K.mem_orthogonal v).1 hv u hu\n\n"}
{"name":"Submodule.inner_left_of_mem_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\nu v : E\nhu : Membership.mem K u\nhv : Membership.mem K.orthogonal v\n⊢ Eq (Inner.inner v u) 0","decl":"/-- A vector in `Kᗮ` is orthogonal to one in `K`. -/\ntheorem inner_left_of_mem_orthogonal {u v : E} (hu : u ∈ K) (hv : v ∈ Kᗮ) : ⟪v, u⟫ = 0 := by\n  rw [inner_eq_zero_symm]; exact inner_right_of_mem_orthogonal hu hv\n\n"}
{"name":"Submodule.mem_orthogonal_singleton_iff_inner_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nu v : E\n⊢ Iff (Membership.mem (Submodule.span 𝕜 (Singleton.singleton u)).orthogonal v) (Eq (Inner.inner u v) 0)","decl":"/-- A vector is in `(𝕜 ∙ u)ᗮ` iff it is orthogonal to `u`. -/\ntheorem mem_orthogonal_singleton_iff_inner_right {u v : E} : v ∈ (𝕜 ∙ u)ᗮ ↔ ⟪u, v⟫ = 0 := by\n  refine ⟨inner_right_of_mem_orthogonal (mem_span_singleton_self u), ?_⟩\n  intro hv w hw\n  rw [mem_span_singleton] at hw\n  obtain ⟨c, rfl⟩ := hw\n  simp [inner_smul_left, hv]\n\n"}
{"name":"Submodule.mem_orthogonal_singleton_iff_inner_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nu v : E\n⊢ Iff (Membership.mem (Submodule.span 𝕜 (Singleton.singleton u)).orthogonal v) (Eq (Inner.inner v u) 0)","decl":"/-- A vector in `(𝕜 ∙ u)ᗮ` is orthogonal to `u`. -/\ntheorem mem_orthogonal_singleton_iff_inner_left {u v : E} : v ∈ (𝕜 ∙ u)ᗮ ↔ ⟪v, u⟫ = 0 := by\n  rw [mem_orthogonal_singleton_iff_inner_right, inner_eq_zero_symm]\n\n"}
{"name":"Submodule.sub_mem_orthogonal_of_inner_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\nx y : E\nh : ∀ (v : Subtype fun x => Membership.mem K x), Eq (Inner.inner x ↑v) (Inner.inner y ↑v)\n⊢ Membership.mem K.orthogonal (HSub.hSub x y)","decl":"theorem sub_mem_orthogonal_of_inner_left {x y : E} (h : ∀ v : K, ⟪x, v⟫ = ⟪y, v⟫) : x - y ∈ Kᗮ := by\n  rw [mem_orthogonal']\n  intro u hu\n  rw [inner_sub_left, sub_eq_zero]\n  exact h ⟨u, hu⟩\n\n"}
{"name":"Submodule.sub_mem_orthogonal_of_inner_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\nx y : E\nh : ∀ (v : Subtype fun x => Membership.mem K x), Eq (Inner.inner (↑v) x) (Inner.inner (↑v) y)\n⊢ Membership.mem K.orthogonal (HSub.hSub x y)","decl":"theorem sub_mem_orthogonal_of_inner_right {x y : E} (h : ∀ v : K, ⟪(v : E), x⟫ = ⟪(v : E), y⟫) :\n    x - y ∈ Kᗮ := by\n  intro u hu\n  rw [inner_sub_right, sub_eq_zero]\n  exact h ⟨u, hu⟩\n\n"}
{"name":"Submodule.inf_orthogonal_eq_bot","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ Eq (Min.min K K.orthogonal) Bot.bot","decl":"/-- `K` and `Kᗮ` have trivial intersection. -/\ntheorem inf_orthogonal_eq_bot : K ⊓ Kᗮ = ⊥ := by\n  rw [eq_bot_iff]\n  intro x\n  rw [mem_inf]\n  exact fun ⟨hx, ho⟩ => inner_self_eq_zero.1 (ho x hx)\n\n"}
{"name":"Submodule.orthogonal_disjoint","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ Disjoint K K.orthogonal","decl":"/-- `K` and `Kᗮ` have trivial intersection. -/\ntheorem orthogonal_disjoint : Disjoint K Kᗮ := by simp [disjoint_iff, K.inf_orthogonal_eq_bot]\n\n"}
{"name":"Submodule.orthogonal_eq_inter","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ Eq K.orthogonal (iInf fun v => LinearMap.ker ((innerSL 𝕜) ↑v))","decl":"/-- `Kᗮ` can be characterized as the intersection of the kernels of the operations of\ninner product with each of the elements of `K`. -/\ntheorem orthogonal_eq_inter : Kᗮ = ⨅ v : K, LinearMap.ker (innerSL 𝕜 (v : E)) := by\n  apply le_antisymm\n  · rw [le_iInf_iff]\n    rintro ⟨v, hv⟩ w hw\n    simpa using hw _ hv\n  · intro v hv w hw\n    simp only [mem_iInf] at hv\n    exact hv ⟨w, hw⟩\n\n"}
{"name":"Submodule.isClosed_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ IsClosed ↑K.orthogonal","decl":"/-- The orthogonal complement of any submodule `K` is closed. -/\ntheorem isClosed_orthogonal : IsClosed (Kᗮ : Set E) := by\n  rw [orthogonal_eq_inter K]\n  convert isClosed_iInter <| fun v : K => ContinuousLinearMap.isClosed_ker (innerSL 𝕜 (v : E))\n  simp only [iInf_coe]\n\n"}
{"name":"Submodule.instOrthogonalCompleteSpace","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : RCLike 𝕜\ninst✝² : NormedAddCommGroup E\ninst✝¹ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\ninst✝ : CompleteSpace E\n⊢ CompleteSpace (Subtype fun x => Membership.mem K.orthogonal x)","decl":"/-- In a complete space, the orthogonal complement of any submodule `K` is complete. -/\ninstance instOrthogonalCompleteSpace [CompleteSpace E] : CompleteSpace Kᗮ :=\n  K.isClosed_orthogonal.completeSpace_coe\n\n"}
{"name":"Submodule.orthogonal_gc","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ GaloisConnection Submodule.orthogonal Submodule.orthogonal","decl":"/-- `orthogonal` gives a `GaloisConnection` between\n`Submodule 𝕜 E` and its `OrderDual`. -/\ntheorem orthogonal_gc :\n    @GaloisConnection (Submodule 𝕜 E) (Submodule 𝕜 E)ᵒᵈ _ _ orthogonal orthogonal := fun _K₁ _K₂ =>\n  ⟨fun h _v hv _u hu => inner_left_of_mem_orthogonal hv (h hu), fun h _v hv _u hu =>\n    inner_left_of_mem_orthogonal hv (h hu)⟩\n\n"}
{"name":"Submodule.orthogonal_le","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK₁ K₂ : Submodule 𝕜 E\nh : LE.le K₁ K₂\n⊢ LE.le K₂.orthogonal K₁.orthogonal","decl":"/-- `orthogonal` reverses the `≤` ordering of two\nsubspaces. -/\ntheorem orthogonal_le {K₁ K₂ : Submodule 𝕜 E} (h : K₁ ≤ K₂) : K₂ᗮ ≤ K₁ᗮ :=\n  (orthogonal_gc 𝕜 E).monotone_l h\n\n"}
{"name":"Submodule.orthogonal_orthogonal_monotone","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK₁ K₂ : Submodule 𝕜 E\nh : LE.le K₁ K₂\n⊢ LE.le K₁.orthogonal.orthogonal K₂.orthogonal.orthogonal","decl":"/-- `orthogonal.orthogonal` preserves the `≤` ordering of two\nsubspaces. -/\ntheorem orthogonal_orthogonal_monotone {K₁ K₂ : Submodule 𝕜 E} (h : K₁ ≤ K₂) : K₁ᗮᗮ ≤ K₂ᗮᗮ :=\n  orthogonal_le (orthogonal_le h)\n\n"}
{"name":"Submodule.le_orthogonal_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ LE.le K K.orthogonal.orthogonal","decl":"/-- `K` is contained in `Kᗮᗮ`. -/\ntheorem le_orthogonal_orthogonal : K ≤ Kᗮᗮ :=\n  (orthogonal_gc 𝕜 E).le_u_l _\n\n"}
{"name":"Submodule.inf_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK₁ K₂ : Submodule 𝕜 E\n⊢ Eq (Min.min K₁.orthogonal K₂.orthogonal) (Max.max K₁ K₂).orthogonal","decl":"/-- The inf of two orthogonal subspaces equals the subspace orthogonal\nto the sup. -/\ntheorem inf_orthogonal (K₁ K₂ : Submodule 𝕜 E) : K₁ᗮ ⊓ K₂ᗮ = (K₁ ⊔ K₂)ᗮ :=\n  (orthogonal_gc 𝕜 E).l_sup.symm\n\n"}
{"name":"Submodule.iInf_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Type u_4\nK : ι → Submodule 𝕜 E\n⊢ Eq (iInf fun i => (K i).orthogonal) (iSup K).orthogonal","decl":"/-- The inf of an indexed family of orthogonal subspaces equals the\nsubspace orthogonal to the sup. -/\ntheorem iInf_orthogonal {ι : Type*} (K : ι → Submodule 𝕜 E) : ⨅ i, (K i)ᗮ = (iSup K)ᗮ :=\n  (orthogonal_gc 𝕜 E).l_iSup.symm\n\n"}
{"name":"Submodule.sInf_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\ns : Set (Submodule 𝕜 E)\n⊢ Eq (iInf fun K => iInf fun h => K.orthogonal) (SupSet.sSup s).orthogonal","decl":"/-- The inf of a set of orthogonal subspaces equals the subspace orthogonal to the sup. -/\ntheorem sInf_orthogonal (s : Set <| Submodule 𝕜 E) : ⨅ K ∈ s, Kᗮ = (sSup s)ᗮ :=\n  (orthogonal_gc 𝕜 E).l_sSup.symm\n\n"}
{"name":"Submodule.top_orthogonal_eq_bot","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ Eq Top.top.orthogonal Bot.bot","decl":"@[simp]\ntheorem top_orthogonal_eq_bot : (⊤ : Submodule 𝕜 E)ᗮ = ⊥ := by\n  ext x\n  rw [mem_bot, mem_orthogonal]\n  exact\n    ⟨fun h => inner_self_eq_zero.mp (h x mem_top), by\n      rintro rfl\n      simp⟩\n\n"}
{"name":"Submodule.bot_orthogonal_eq_top","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ Eq Bot.bot.orthogonal Top.top","decl":"@[simp]\ntheorem bot_orthogonal_eq_top : (⊥ : Submodule 𝕜 E)ᗮ = ⊤ := by\n  rw [← top_orthogonal_eq_bot, eq_top_iff]\n  exact le_orthogonal_orthogonal ⊤\n\n"}
{"name":"Submodule.orthogonal_eq_top_iff","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ Iff (Eq K.orthogonal Top.top) (Eq K Bot.bot)","decl":"@[simp]\ntheorem orthogonal_eq_top_iff : Kᗮ = ⊤ ↔ K = ⊥ := by\n  refine\n    ⟨?_, by\n      rintro rfl\n      exact bot_orthogonal_eq_top⟩\n  intro h\n  have : K ⊓ Kᗮ = ⊥ := K.orthogonal_disjoint.eq_bot\n  rwa [h, inf_comm, top_inf_eq] at this\n\n"}
{"name":"Submodule.orthogonalFamily_self","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nK : Submodule 𝕜 E\n⊢ OrthogonalFamily 𝕜 (fun b => Subtype fun x => Membership.mem (cond b K K.orthogonal) x) fun b => (cond b K K.orthogonal).subtypeₗᵢ","decl":"theorem orthogonalFamily_self :\n    OrthogonalFamily 𝕜 (fun b => ↥(cond b K Kᗮ)) fun b => (cond b K Kᗮ).subtypeₗᵢ\n  | true, true => absurd rfl\n  | true, false => fun _ x y => inner_right_of_mem_orthogonal x.prop y.prop\n  | false, true => fun _ x y => inner_left_of_mem_orthogonal y.prop x.prop\n  | false, false => absurd rfl\n\n"}
{"name":"bilinFormOfRealInner_orthogonal","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"E : Type u_4\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace Real E\nK : Submodule Real E\n⊢ Eq (K.orthogonalBilin bilinFormOfRealInner) K.orthogonal","decl":"@[simp]\ntheorem bilinFormOfRealInner_orthogonal {E} [NormedAddCommGroup E] [InnerProductSpace ℝ E]\n    (K : Submodule ℝ E) : K.orthogonalBilin bilinFormOfRealInner = Kᗮ :=\n  rfl\n\n"}
{"name":"Submodule.isOrtho_iff_le","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\n⊢ Iff (U.IsOrtho V) (LE.le U V.orthogonal)","decl":"theorem isOrtho_iff_le {U V : Submodule 𝕜 E} : U ⟂ V ↔ U ≤ Vᗮ :=\n  Iff.rfl\n\n"}
{"name":"Submodule.IsOrtho.symm","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\nh : U.IsOrtho V\n⊢ V.IsOrtho U","decl":"@[symm]\ntheorem IsOrtho.symm {U V : Submodule 𝕜 E} (h : U ⟂ V) : V ⟂ U :=\n  (le_orthogonal_orthogonal _).trans (orthogonal_le h)\n\n"}
{"name":"Submodule.isOrtho_comm","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\n⊢ Iff (U.IsOrtho V) (V.IsOrtho U)","decl":"theorem isOrtho_comm {U V : Submodule 𝕜 E} : U ⟂ V ↔ V ⟂ U :=\n  ⟨IsOrtho.symm, IsOrtho.symm⟩\n\n"}
{"name":"Submodule.symmetric_isOrtho","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\n⊢ Symmetric Submodule.IsOrtho","decl":"theorem symmetric_isOrtho : Symmetric (IsOrtho : Submodule 𝕜 E → Submodule 𝕜 E → Prop) := fun _ _ =>\n  IsOrtho.symm\n\n"}
{"name":"Submodule.IsOrtho.inner_eq","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\nh : U.IsOrtho V\nu v : E\nhu : Membership.mem U u\nhv : Membership.mem V v\n⊢ Eq (Inner.inner u v) 0","decl":"theorem IsOrtho.inner_eq {U V : Submodule 𝕜 E} (h : U ⟂ V) {u v : E} (hu : u ∈ U) (hv : v ∈ V) :\n    ⟪u, v⟫ = 0 :=\n  h.symm hv _ hu\n\n"}
{"name":"Submodule.isOrtho_iff_inner_eq","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\n⊢ Iff (U.IsOrtho V) (∀ (u : E), Membership.mem U u → ∀ (v : E), Membership.mem V v → Eq (Inner.inner u v) 0)","decl":"theorem isOrtho_iff_inner_eq {U V : Submodule 𝕜 E} : U ⟂ V ↔ ∀ u ∈ U, ∀ v ∈ V, ⟪u, v⟫ = 0 :=\n  forall₄_congr fun _u _hu _v _hv => inner_eq_zero_symm\n\n/- TODO: generalize `Submodule.map₂` to semilinear maps, so that we can state\n`U ⟂ V ↔ Submodule.map₂ (innerₛₗ 𝕜) U V ≤ ⊥`. -/\n"}
{"name":"Submodule.isOrtho_bot_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nV : Submodule 𝕜 E\n⊢ Bot.bot.IsOrtho V","decl":"@[simp]\ntheorem isOrtho_bot_left {V : Submodule 𝕜 E} : ⊥ ⟂ V :=\n  bot_le\n\n"}
{"name":"Submodule.isOrtho_bot_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Submodule 𝕜 E\n⊢ U.IsOrtho Bot.bot","decl":"@[simp]\ntheorem isOrtho_bot_right {U : Submodule 𝕜 E} : U ⟂ ⊥ :=\n  isOrtho_bot_left.symm\n\n"}
{"name":"Submodule.IsOrtho.mono_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU₁ U₂ V : Submodule 𝕜 E\nhU : LE.le U₂ U₁\nh : U₁.IsOrtho V\n⊢ U₂.IsOrtho V","decl":"theorem IsOrtho.mono_left {U₁ U₂ V : Submodule 𝕜 E} (hU : U₂ ≤ U₁) (h : U₁ ⟂ V) : U₂ ⟂ V :=\n  hU.trans h\n\n"}
{"name":"Submodule.IsOrtho.mono_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V₁ V₂ : Submodule 𝕜 E\nhV : LE.le V₂ V₁\nh : U.IsOrtho V₁\n⊢ U.IsOrtho V₂","decl":"theorem IsOrtho.mono_right {U V₁ V₂ : Submodule 𝕜 E} (hV : V₂ ≤ V₁) (h : U ⟂ V₁) : U ⟂ V₂ :=\n  (h.symm.mono_left hV).symm\n\n"}
{"name":"Submodule.IsOrtho.mono","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU₁ V₁ U₂ V₂ : Submodule 𝕜 E\nhU : LE.le U₂ U₁\nhV : LE.le V₂ V₁\nh : U₁.IsOrtho V₁\n⊢ U₂.IsOrtho V₂","decl":"theorem IsOrtho.mono {U₁ V₁ U₂ V₂ : Submodule 𝕜 E} (hU : U₂ ≤ U₁) (hV : V₂ ≤ V₁) (h : U₁ ⟂ V₁) :\n    U₂ ⟂ V₂ :=\n  (h.mono_right hV).mono_left hU\n\n"}
{"name":"Submodule.isOrtho_self","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Submodule 𝕜 E\n⊢ Iff (U.IsOrtho U) (Eq U Bot.bot)","decl":"@[simp]\ntheorem isOrtho_self {U : Submodule 𝕜 E} : U ⟂ U ↔ U = ⊥ :=\n  ⟨fun h => eq_bot_iff.mpr fun x hx => inner_self_eq_zero.mp (h hx x hx), fun h =>\n    h.symm ▸ isOrtho_bot_left⟩\n\n"}
{"name":"Submodule.isOrtho_orthogonal_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Submodule 𝕜 E\n⊢ U.IsOrtho U.orthogonal","decl":"@[simp]\ntheorem isOrtho_orthogonal_right (U : Submodule 𝕜 E) : U ⟂ Uᗮ :=\n  le_orthogonal_orthogonal _\n\n"}
{"name":"Submodule.isOrtho_orthogonal_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Submodule 𝕜 E\n⊢ U.orthogonal.IsOrtho U","decl":"@[simp]\ntheorem isOrtho_orthogonal_left (U : Submodule 𝕜 E) : Uᗮ ⟂ U :=\n  (isOrtho_orthogonal_right U).symm\n\n"}
{"name":"Submodule.IsOrtho.le","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\nh : U.IsOrtho V\n⊢ LE.le U V.orthogonal","decl":"theorem IsOrtho.le {U V : Submodule 𝕜 E} (h : U ⟂ V) : U ≤ Vᗮ :=\n  h\n\n"}
{"name":"Submodule.IsOrtho.ge","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\nh : U.IsOrtho V\n⊢ LE.le V U.orthogonal","decl":"theorem IsOrtho.ge {U V : Submodule 𝕜 E} (h : U ⟂ V) : V ≤ Uᗮ :=\n  h.symm\n\n"}
{"name":"Submodule.isOrtho_top_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Submodule 𝕜 E\n⊢ Iff (U.IsOrtho Top.top) (Eq U Bot.bot)","decl":"@[simp]\ntheorem isOrtho_top_right {U : Submodule 𝕜 E} : U ⟂ ⊤ ↔ U = ⊥ :=\n  ⟨fun h => eq_bot_iff.mpr fun _x hx => inner_self_eq_zero.mp (h hx _ mem_top), fun h =>\n    h.symm ▸ isOrtho_bot_left⟩\n\n"}
{"name":"Submodule.isOrtho_top_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nV : Submodule 𝕜 E\n⊢ Iff (Top.top.IsOrtho V) (Eq V Bot.bot)","decl":"@[simp]\ntheorem isOrtho_top_left {V : Submodule 𝕜 E} : ⊤ ⟂ V ↔ V = ⊥ :=\n  isOrtho_comm.trans isOrtho_top_right\n\n"}
{"name":"Submodule.IsOrtho.disjoint","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V : Submodule 𝕜 E\nh : U.IsOrtho V\n⊢ Disjoint U V","decl":"/-- Orthogonal submodules are disjoint. -/\ntheorem IsOrtho.disjoint {U V : Submodule 𝕜 E} (h : U ⟂ V) : Disjoint U V :=\n  (Submodule.orthogonal_disjoint _).mono_right h.symm\n\n"}
{"name":"Submodule.isOrtho_sup_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU₁ U₂ V : Submodule 𝕜 E\n⊢ Iff ((Max.max U₁ U₂).IsOrtho V) (And (U₁.IsOrtho V) (U₂.IsOrtho V))","decl":"@[simp]\ntheorem isOrtho_sup_left {U₁ U₂ V : Submodule 𝕜 E} : U₁ ⊔ U₂ ⟂ V ↔ U₁ ⟂ V ∧ U₂ ⟂ V :=\n  sup_le_iff\n\n"}
{"name":"Submodule.isOrtho_sup_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU V₁ V₂ : Submodule 𝕜 E\n⊢ Iff (U.IsOrtho (Max.max V₁ V₂)) (And (U.IsOrtho V₁) (U.IsOrtho V₂))","decl":"@[simp]\ntheorem isOrtho_sup_right {U V₁ V₂ : Submodule 𝕜 E} : U ⟂ V₁ ⊔ V₂ ↔ U ⟂ V₁ ∧ U ⟂ V₂ :=\n  isOrtho_comm.trans <| isOrtho_sup_left.trans <| isOrtho_comm.and isOrtho_comm\n\n"}
{"name":"Submodule.isOrtho_sSup_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Set (Submodule 𝕜 E)\nV : Submodule 𝕜 E\n⊢ Iff ((SupSet.sSup U).IsOrtho V) (∀ (Uᵢ : Submodule 𝕜 E), Membership.mem U Uᵢ → Uᵢ.IsOrtho V)","decl":"@[simp]\ntheorem isOrtho_sSup_left {U : Set (Submodule 𝕜 E)} {V : Submodule 𝕜 E} :\n    sSup U ⟂ V ↔ ∀ Uᵢ ∈ U, Uᵢ ⟂ V :=\n  sSup_le_iff\n\n"}
{"name":"Submodule.isOrtho_sSup_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nU : Submodule 𝕜 E\nV : Set (Submodule 𝕜 E)\n⊢ Iff (U.IsOrtho (SupSet.sSup V)) (∀ (Vᵢ : Submodule 𝕜 E), Membership.mem V Vᵢ → U.IsOrtho Vᵢ)","decl":"@[simp]\ntheorem isOrtho_sSup_right {U : Submodule 𝕜 E} {V : Set (Submodule 𝕜 E)} :\n    U ⟂ sSup V ↔ ∀ Vᵢ ∈ V, U ⟂ Vᵢ :=\n  isOrtho_comm.trans <| isOrtho_sSup_left.trans <| by simp_rw [isOrtho_comm]\n\n"}
{"name":"Submodule.isOrtho_iSup_left","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Sort u_4\nU : ι → Submodule 𝕜 E\nV : Submodule 𝕜 E\n⊢ Iff ((iSup U).IsOrtho V) (∀ (i : ι), (U i).IsOrtho V)","decl":"@[simp]\ntheorem isOrtho_iSup_left {ι : Sort*} {U : ι → Submodule 𝕜 E} {V : Submodule 𝕜 E} :\n    iSup U ⟂ V ↔ ∀ i, U i ⟂ V :=\n  iSup_le_iff\n\n"}
{"name":"Submodule.isOrtho_iSup_right","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Sort u_4\nU : Submodule 𝕜 E\nV : ι → Submodule 𝕜 E\n⊢ Iff (U.IsOrtho (iSup V)) (∀ (i : ι), U.IsOrtho (V i))","decl":"@[simp]\ntheorem isOrtho_iSup_right {ι : Sort*} {U : Submodule 𝕜 E} {V : ι → Submodule 𝕜 E} :\n    U ⟂ iSup V ↔ ∀ i, U ⟂ V i :=\n  isOrtho_comm.trans <| isOrtho_iSup_left.trans <| by simp_rw [isOrtho_comm]\n\n"}
{"name":"Submodule.isOrtho_span","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\ns t : Set E\n⊢ Iff ((Submodule.span 𝕜 s).IsOrtho (Submodule.span 𝕜 t)) (∀ ⦃u : E⦄, Membership.mem s u → ∀ ⦃v : E⦄, Membership.mem t v → Eq (Inner.inner u v) 0)","decl":"@[simp]\ntheorem isOrtho_span {s t : Set E} :\n    span 𝕜 s ⟂ span 𝕜 t ↔ ∀ ⦃u⦄, u ∈ s → ∀ ⦃v⦄, v ∈ t → ⟪u, v⟫ = 0 := by\n  simp_rw [span_eq_iSup_of_singleton_spans s, span_eq_iSup_of_singleton_spans t, isOrtho_iSup_left,\n    isOrtho_iSup_right, isOrtho_iff_le, span_le, Set.subset_def, SetLike.mem_coe,\n    mem_orthogonal_singleton_iff_inner_left, Set.mem_singleton_iff, forall_eq]\n\n"}
{"name":"Submodule.IsOrtho.map","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : InnerProductSpace 𝕜 F\nf : LinearIsometry (RingHom.id 𝕜) E F\nU V : Submodule 𝕜 E\nh : U.IsOrtho V\n⊢ (Submodule.map f U).IsOrtho (Submodule.map f V)","decl":"theorem IsOrtho.map (f : E →ₗᵢ[𝕜] F) {U V : Submodule 𝕜 E} (h : U ⟂ V) : U.map f ⟂ V.map f := by\n  rw [isOrtho_iff_inner_eq] at *\n  simp_rw [mem_map, forall_exists_index, and_imp, forall_apply_eq_imp_iff₂,\n    LinearIsometry.inner_map_map]\n  exact h\n\n"}
{"name":"Submodule.IsOrtho.comap","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : InnerProductSpace 𝕜 F\nf : LinearIsometry (RingHom.id 𝕜) E F\nU V : Submodule 𝕜 F\nh : U.IsOrtho V\n⊢ (Submodule.comap f U).IsOrtho (Submodule.comap f V)","decl":"theorem IsOrtho.comap (f : E →ₗᵢ[𝕜] F) {U V : Submodule 𝕜 F} (h : U ⟂ V) :\n    U.comap f ⟂ V.comap f := by\n  rw [isOrtho_iff_inner_eq] at *\n  simp_rw [mem_comap, ← f.inner_map_map]\n  intro u hu v hv\n  exact h _ hu _ hv\n\n"}
{"name":"Submodule.IsOrtho.map_iff","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : InnerProductSpace 𝕜 F\nf : LinearIsometryEquiv (RingHom.id 𝕜) E F\nU V : Submodule 𝕜 E\n⊢ Iff ((Submodule.map f U).IsOrtho (Submodule.map f V)) (U.IsOrtho V)","decl":"@[simp]\ntheorem IsOrtho.map_iff (f : E ≃ₗᵢ[𝕜] F) {U V : Submodule 𝕜 E} : U.map f ⟂ V.map f ↔ U ⟂ V :=\n  ⟨fun h => by\n    have hf : ∀ p : Submodule 𝕜 E, (p.map f).comap f.toLinearIsometry = p :=\n      comap_map_eq_of_injective f.injective\n    simpa only [hf] using h.comap f.toLinearIsometry, IsOrtho.map f.toLinearIsometry⟩\n\n"}
{"name":"Submodule.IsOrtho.comap_iff","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : RCLike 𝕜\ninst✝³ : NormedAddCommGroup E\ninst✝² : InnerProductSpace 𝕜 E\ninst✝¹ : NormedAddCommGroup F\ninst✝ : InnerProductSpace 𝕜 F\nf : LinearIsometryEquiv (RingHom.id 𝕜) E F\nU V : Submodule 𝕜 F\n⊢ Iff ((Submodule.comap f U).IsOrtho (Submodule.comap f V)) (U.IsOrtho V)","decl":"@[simp]\ntheorem IsOrtho.comap_iff (f : E ≃ₗᵢ[𝕜] F) {U V : Submodule 𝕜 F} : U.comap f ⟂ V.comap f ↔ U ⟂ V :=\n  ⟨fun h => by\n    have hf : ∀ p : Submodule 𝕜 F, (p.comap f).map f.toLinearIsometry = p :=\n      map_comap_eq_of_surjective f.surjective\n    simpa only [hf] using h.map f.toLinearIsometry, IsOrtho.comap f.toLinearIsometry⟩\n\n"}
{"name":"orthogonalFamily_iff_pairwise","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Type u_4\nV : ι → Submodule 𝕜 E\n⊢ Iff (OrthogonalFamily 𝕜 (fun i => Subtype fun x => Membership.mem (V i) x) fun i => (V i).subtypeₗᵢ) (Pairwise (Function.onFun (fun x1 x2 => x1.IsOrtho x2) V))","decl":"open scoped Function in -- required for scoped `on` notation\ntheorem orthogonalFamily_iff_pairwise {ι} {V : ι → Submodule 𝕜 E} :\n    (OrthogonalFamily 𝕜 (fun i => V i) fun i => (V i).subtypeₗᵢ) ↔ Pairwise ((· ⟂ ·) on V) :=\n  forall₃_congr fun _i _j _hij =>\n    Subtype.forall.trans <|\n      forall₂_congr fun _x _hx => Subtype.forall.trans <|\n        forall₂_congr fun _y _hy => inner_eq_zero_symm\n\n"}
{"name":"OrthogonalFamily.of_pairwise","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Type u_4\nV : ι → Submodule 𝕜 E\na✝ : Pairwise (Function.onFun (fun x1 x2 => x1.IsOrtho x2) V)\n⊢ OrthogonalFamily 𝕜 (fun i => Subtype fun x => Membership.mem (V i) x) fun i => (V i).subtypeₗᵢ","decl":"alias ⟨OrthogonalFamily.pairwise, OrthogonalFamily.of_pairwise⟩ := orthogonalFamily_iff_pairwise\n\n"}
{"name":"OrthogonalFamily.pairwise","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Type u_4\nV : ι → Submodule 𝕜 E\na✝ : OrthogonalFamily 𝕜 (fun i => Subtype fun x => Membership.mem (V i) x) fun i => (V i).subtypeₗᵢ\n⊢ Pairwise (Function.onFun (fun x1 x2 => x1.IsOrtho x2) V)","decl":"alias ⟨OrthogonalFamily.pairwise, OrthogonalFamily.of_pairwise⟩ := orthogonalFamily_iff_pairwise\n\n"}
{"name":"OrthogonalFamily.isOrtho","module":"Mathlib.Analysis.InnerProductSpace.Orthogonal","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : RCLike 𝕜\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace 𝕜 E\nι : Type u_4\nV : ι → Submodule 𝕜 E\nhV : OrthogonalFamily 𝕜 (fun i => Subtype fun x => Membership.mem (V i) x) fun i => (V i).subtypeₗᵢ\ni j : ι\nhij : Ne i j\n⊢ (V i).IsOrtho (V j)","decl":"/-- Two submodules in an orthogonal family with different indices are orthogonal. -/\ntheorem OrthogonalFamily.isOrtho {ι} {V : ι → Submodule 𝕜 E}\n    (hV : OrthogonalFamily 𝕜 (fun i => V i) fun i => (V i).subtypeₗᵢ) {i j : ι} (hij : i ≠ j) :\n    V i ⟂ V j :=\n  hV.pairwise hij\n"}
