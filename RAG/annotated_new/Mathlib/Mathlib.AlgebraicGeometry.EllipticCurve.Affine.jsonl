{"name":"WeierstrassCurve.Affine.polynomial_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq W.polynomial { a := 0, b := 1, c := { a := 0, b := 0, c := W.a₁, d := W.a₃ }.toPoly, d := { a := -1, b := Neg.neg W.a₂, c := Neg.neg W.a₄, d := Neg.neg W.a₆ }.toPoly }.toPoly","decl":"lemma polynomial_eq : W.polynomial =\n    Cubic.toPoly\n      ⟨0, 1, Cubic.toPoly ⟨0, 0, W.a₁, W.a₃⟩, Cubic.toPoly ⟨-1, -W.a₂, -W.a₄, -W.a₆⟩⟩ := by\n  simp only [polynomial, Cubic.toPoly]\n  C_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.polynomial_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\ninst✝ : Nontrivial R\n⊢ Ne W.polynomial 0","decl":"lemma polynomial_ne_zero [Nontrivial R] : W.polynomial ≠ 0 := by\n  rw [polynomial_eq]\n  exact Cubic.ne_zero_of_b_ne_zero one_ne_zero\n\n"}
{"name":"WeierstrassCurve.Affine.degree_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\ninst✝ : Nontrivial R\n⊢ Eq W.polynomial.degree 2","decl":"@[simp]\nlemma degree_polynomial [Nontrivial R] : W.polynomial.degree = 2 := by\n  rw [polynomial_eq]\n  exact Cubic.degree_of_b_ne_zero' one_ne_zero\n\n"}
{"name":"WeierstrassCurve.Affine.natDegree_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\ninst✝ : Nontrivial R\n⊢ Eq W.polynomial.natDegree 2","decl":"@[simp]\nlemma natDegree_polynomial [Nontrivial R] : W.polynomial.natDegree = 2 := by\n  rw [polynomial_eq]\n  exact Cubic.natDegree_of_b_ne_zero' one_ne_zero\n\n"}
{"name":"WeierstrassCurve.Affine.monic_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ W.polynomial.Monic","decl":"lemma monic_polynomial : W.polynomial.Monic := by\n  nontriviality R\n  simpa only [polynomial_eq] using Cubic.monic_of_b_eq_one'\n\n"}
{"name":"WeierstrassCurve.Affine.irreducible_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\ninst✝ : IsDomain R\n⊢ Irreducible W.polynomial","decl":"lemma irreducible_polynomial [IsDomain R] : Irreducible W.polynomial := by\n  by_contra h\n  rcases (W.monic_polynomial.not_irreducible_iff_exists_add_mul_eq_coeff W.natDegree_polynomial).mp\n    h with ⟨f, g, h0, h1⟩\n  simp only [polynomial_eq, Cubic.coeff_eq_c, Cubic.coeff_eq_d] at h0 h1\n  apply_fun degree at h0 h1\n  rw [Cubic.degree_of_a_ne_zero' <| neg_ne_zero.mpr <| one_ne_zero' R, degree_mul] at h0\n  apply (h1.symm.le.trans Cubic.degree_of_b_eq_zero').not_lt\n  rcases Nat.WithBot.add_eq_three_iff.mp h0.symm with h | h | h | h\n  -- Porting note: replaced two `any_goals` proofs with two `iterate 2` proofs\n  iterate 2 rw [degree_add_eq_right_of_degree_lt] <;> simp only [h] <;> decide\n  iterate 2 rw [degree_add_eq_left_of_degree_lt] <;> simp only [h] <;> decide\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Eq (Polynomial.evalEval x y W.polynomial) (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HPow.hPow y 2) (HMul.hMul (HMul.hMul W.a₁ x) y)) (HMul.hMul W.a₃ y)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HPow.hPow x 3) (HMul.hMul W.a₂ (HPow.hPow x 2))) (HMul.hMul W.a₄ x)) W.a₆))","decl":"lemma evalEval_polynomial (x y : R) : W.polynomial.evalEval x y =\n    y ^ 2 + W.a₁ * x * y + W.a₃ * y - (x ^ 3 + W.a₂ * x ^ 2 + W.a₄ * x + W.a₆) := by\n  simp only [polynomial]\n  eval_simp\n  rw [add_mul, ← add_assoc]\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_polynomial_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (Polynomial.evalEval 0 0 W.polynomial) (Neg.neg W.a₆)","decl":"@[simp]\nlemma evalEval_polynomial_zero : W.polynomial.evalEval 0 0 = -W.a₆ := by\n  simp only [evalEval_polynomial, zero_add, zero_sub, mul_zero, zero_pow <| Nat.succ_ne_zero _]\n\n"}
{"name":"WeierstrassCurve.Affine.equation_iff'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Equation x y) (Eq (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HPow.hPow y 2) (HMul.hMul (HMul.hMul W.a₁ x) y)) (HMul.hMul W.a₃ y)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HPow.hPow x 3) (HMul.hMul W.a₂ (HPow.hPow x 2))) (HMul.hMul W.a₄ x)) W.a₆)) 0)","decl":"lemma equation_iff' (x y : R) : W.Equation x y ↔\n    y ^ 2 + W.a₁ * x * y + W.a₃ * y - (x ^ 3 + W.a₂ * x ^ 2 + W.a₄ * x + W.a₆) = 0 := by\n  rw [Equation, evalEval_polynomial]\n\n"}
{"name":"WeierstrassCurve.Affine.equation_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Equation x y) (Eq (HAdd.hAdd (HAdd.hAdd (HPow.hPow y 2) (HMul.hMul (HMul.hMul W.a₁ x) y)) (HMul.hMul W.a₃ y)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HPow.hPow x 3) (HMul.hMul W.a₂ (HPow.hPow x 2))) (HMul.hMul W.a₄ x)) W.a₆))","decl":"lemma equation_iff (x y : R) :\n    W.Equation x y ↔ y ^ 2 + W.a₁ * x * y + W.a₃ * y = x ^ 3 + W.a₂ * x ^ 2 + W.a₄ * x + W.a₆ := by\n  rw [equation_iff', sub_eq_zero]\n\n"}
{"name":"WeierstrassCurve.Affine.equation_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Iff (W.Equation 0 0) (Eq W.a₆ 0)","decl":"@[simp]\nlemma equation_zero : W.Equation 0 0 ↔ W.a₆ = 0 := by\n  rw [Equation, evalEval_polynomial_zero, neg_eq_zero]\n\n"}
{"name":"WeierstrassCurve.Affine.equation_iff_variableChange","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Equation x y) ((WeierstrassCurve.variableChange W { u := 1, r := x, s := 0, t := y }).toAffine.Equation 0 0)","decl":"lemma equation_iff_variableChange (x y : R) :\n    W.Equation x y ↔ (W.variableChange ⟨1, x, 0, y⟩).toAffine.Equation 0 0 := by\n  rw [equation_iff', ← neg_eq_zero, equation_zero, variableChange_a₆, inv_one, Units.val_one]\n  congr! 1\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_polynomialX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Eq (Polynomial.evalEval x y W.polynomialX) (HSub.hSub (HMul.hMul W.a₁ y) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow x 2)) (HMul.hMul (HMul.hMul 2 W.a₂) x)) W.a₄))","decl":"lemma evalEval_polynomialX (x y : R) :\n    W.polynomialX.evalEval x y = W.a₁ * y - (3 * x ^ 2 + 2 * W.a₂ * x + W.a₄) := by\n  simp only [polynomialX]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_polynomialX_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (Polynomial.evalEval 0 0 W.polynomialX) (Neg.neg W.a₄)","decl":"@[simp]\nlemma evalEval_polynomialX_zero : W.polynomialX.evalEval 0 0 = -W.a₄ := by\n  simp only [evalEval_polynomialX, zero_add, zero_sub, mul_zero, zero_pow <| Nat.succ_ne_zero _]\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Eq (Polynomial.evalEval x y W.polynomialY) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 2 y) (HMul.hMul W.a₁ x)) W.a₃)","decl":"lemma evalEval_polynomialY (x y : R) :\n    W.polynomialY.evalEval x y = 2 * y + W.a₁ * x + W.a₃ := by\n  simp only [polynomialY]\n  eval_simp\n  rw [← add_assoc]\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_polynomialY_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (Polynomial.evalEval 0 0 W.polynomialY) W.a₃","decl":"@[simp]\nlemma evalEval_polynomialY_zero : W.polynomialY.evalEval 0 0 = W.a₃ := by\n  simp only [evalEval_polynomialY, zero_add, mul_zero]\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_iff'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Nonsingular x y) (And (W.Equation x y) (Or (Ne (HSub.hSub (HMul.hMul W.a₁ y) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow x 2)) (HMul.hMul (HMul.hMul 2 W.a₂) x)) W.a₄)) 0) (Ne (HAdd.hAdd (HAdd.hAdd (HMul.hMul 2 y) (HMul.hMul W.a₁ x)) W.a₃) 0)))","decl":"lemma nonsingular_iff' (x y : R) : W.Nonsingular x y ↔ W.Equation x y ∧\n    (W.a₁ * y - (3 * x ^ 2 + 2 * W.a₂ * x + W.a₄) ≠ 0 ∨ 2 * y + W.a₁ * x + W.a₃ ≠ 0) := by\n  rw [Nonsingular, equation_iff', evalEval_polynomialX, evalEval_polynomialY]\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Nonsingular x y) (And (W.Equation x y) (Or (Ne (HMul.hMul W.a₁ y) (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow x 2)) (HMul.hMul (HMul.hMul 2 W.a₂) x)) W.a₄)) (Ne y (HSub.hSub (HSub.hSub (Neg.neg y) (HMul.hMul W.a₁ x)) W.a₃))))","decl":"lemma nonsingular_iff (x y : R) : W.Nonsingular x y ↔\n    W.Equation x y ∧ (W.a₁ * y ≠ 3 * x ^ 2 + 2 * W.a₂ * x + W.a₄ ∨ y ≠ -y - W.a₁ * x - W.a₃) := by\n  rw [nonsingular_iff', sub_ne_zero, ← sub_ne_zero (a := y)]\n  congr! 3\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Iff (W.Nonsingular 0 0) (And (Eq W.a₆ 0) (Or (Ne W.a₃ 0) (Ne W.a₄ 0)))","decl":"@[simp]\nlemma nonsingular_zero : W.Nonsingular 0 0 ↔ W.a₆ = 0 ∧ (W.a₃ ≠ 0 ∨ W.a₄ ≠ 0) := by\n  rw [Nonsingular, equation_zero, evalEval_polynomialX_zero, neg_ne_zero, evalEval_polynomialY_zero,\n    or_comm]\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_iff_variableChange","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Nonsingular x y) ((WeierstrassCurve.variableChange W { u := 1, r := x, s := 0, t := y }).toAffine.Nonsingular 0 0)","decl":"lemma nonsingular_iff_variableChange (x y : R) :\n    W.Nonsingular x y ↔ (W.variableChange ⟨1, x, 0, y⟩).toAffine.Nonsingular 0 0 := by\n  rw [nonsingular_iff', equation_iff_variableChange, equation_zero, ← neg_ne_zero, or_comm,\n    nonsingular_zero, variableChange_a₃, variableChange_a₄, inv_one, Units.val_one]\n  simp only [variableChange]\n  congr! 3 <;> ring1\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_zero_of_Δ_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nh : W.Equation 0 0\nhΔ : Ne (WeierstrassCurve.Δ W) 0\n⊢ W.Nonsingular 0 0","decl":"lemma nonsingular_zero_of_Δ_ne_zero (h : W.Equation 0 0) (hΔ : W.Δ ≠ 0) : W.Nonsingular 0 0 := by\n  simp only [equation_zero, nonsingular_zero] at *\n  contrapose! hΔ\n  simp only [b₂, b₄, b₆, b₈, Δ, h, hΔ]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_of_Δ_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Equation x y\nhΔ : Ne (WeierstrassCurve.Δ W) 0\n⊢ W.Nonsingular x y","decl":"/-- A Weierstrass curve is nonsingular at every point if its discriminant is non-zero. -/\nlemma nonsingular_of_Δ_ne_zero {x y : R} (h : W.Equation x y) (hΔ : W.Δ ≠ 0) : W.Nonsingular x y :=\n  (W.nonsingular_iff_variableChange x y).mpr <|\n    nonsingular_zero_of_Δ_ne_zero _ ((W.equation_iff_variableChange x y).mp h) <| by\n      rwa [variableChange_Δ, inv_one, Units.val_one, one_pow, one_mul]\n\n"}
{"name":"WeierstrassCurve.Affine.Y_sub_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (HSub.hSub Polynomial.X W.polynomialY) W.negPolynomial","decl":"lemma Y_sub_polynomialY : Y - W.polynomialY = W.negPolynomial := by\n  rw [polynomialY, negPolynomial]; C_simp; ring\n\n"}
{"name":"WeierstrassCurve.Affine.Y_sub_negPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (HSub.hSub Polynomial.X W.negPolynomial) W.polynomialY","decl":"lemma Y_sub_negPolynomial : Y - W.negPolynomial = W.polynomialY := by\n  rw [← Y_sub_polynomialY, sub_sub_cancel]\n\n"}
{"name":"WeierstrassCurve.Affine.negY_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Eq (W.negY x (W.negY x y)) y","decl":"lemma negY_negY (x y : R) : W.negY x (W.negY x y) = y := by\n  simp only [negY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.eval_negPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Eq (Polynomial.evalEval x y W.negPolynomial) (W.negY x y)","decl":"lemma eval_negPolynomial (x y : R) : W.negPolynomial.evalEval x y = W.negY x y := by\n  rw [negY, sub_sub, negPolynomial]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Affine.C_addPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y L : R\n⊢ Eq (Polynomial.C (W.addPolynomial x y L)) (HAdd.hAdd (HMul.hMul (HSub.hSub Polynomial.X (Polynomial.C (WeierstrassCurve.Affine.linePolynomial x y L))) (HSub.hSub W.negPolynomial (Polynomial.C (WeierstrassCurve.Affine.linePolynomial x y L)))) W.polynomial)","decl":"lemma C_addPolynomial (x y L : R) : C (W.addPolynomial x y L) =\n    (Y - C (linePolynomial x y L)) * (W.negPolynomial - C (linePolynomial x y L)) +\n      W.polynomial := by\n  rw [addPolynomial, linePolynomial, polynomial, negPolynomial]\n  eval_simp\n  C_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.addPolynomial_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y L : R\n⊢ Eq (W.addPolynomial x y L) (Neg.neg { a := 1, b := HAdd.hAdd (HSub.hSub (Neg.neg (HPow.hPow L 2)) (HMul.hMul W.a₁ L)) W.a₂, c := HAdd.hAdd (HAdd.hAdd (HMul.hMul (HMul.hMul 2 x) (HPow.hPow L 2)) (HMul.hMul (HSub.hSub (HSub.hSub (HMul.hMul W.a₁ x) (HMul.hMul 2 y)) W.a₃) L)) (HAdd.hAdd (HMul.hMul (Neg.neg W.a₁) y) W.a₄), d := HSub.hSub (HAdd.hAdd (HMul.hMul (Neg.neg (HPow.hPow x 2)) (HPow.hPow L 2)) (HMul.hMul (HAdd.hAdd (HMul.hMul (HMul.hMul 2 x) y) (HMul.hMul W.a₃ x)) L)) (HSub.hSub (HAdd.hAdd (HPow.hPow y 2) (HMul.hMul W.a₃ y)) W.a₆) }.toPoly)","decl":"lemma addPolynomial_eq (x y L : R) : W.addPolynomial x y L = -Cubic.toPoly\n    ⟨1, -L ^ 2 - W.a₁ * L + W.a₂,\n      2 * x * L ^ 2 + (W.a₁ * x - 2 * y - W.a₃) * L + (-W.a₁ * y + W.a₄),\n      -x ^ 2 * L ^ 2 + (2 * x * y + W.a₃ * x) * L - (y ^ 2 + W.a₃ * y - W.a₆)⟩ := by\n  rw [addPolynomial, linePolynomial, polynomial, Cubic.toPoly]\n  eval_simp\n  C_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.equation_neg_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Equation x (W.negY x y)) (W.Equation x y)","decl":"lemma equation_neg_iff (x y : R) : W.Equation x (W.negY x y) ↔ W.Equation x y := by\n  rw [equation_iff, equation_iff, negY]\n  congr! 1\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_neg_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\n⊢ Iff (W.Nonsingular x (W.negY x y)) (W.Nonsingular x y)","decl":"lemma nonsingular_neg_iff (x y : R) : W.Nonsingular x (W.negY x y) ↔ W.Nonsingular x y := by\n  rw [nonsingular_iff, equation_neg_iff, ← negY, negY_negY, ← @ne_comm _ y, nonsingular_iff]\n  exact and_congr_right' <| (iff_congr not_and_or.symm not_and_or.symm).mpr <|\n    not_congr <| and_congr_left fun h => by rw [← h]\n\n"}
{"name":"WeierstrassCurve.Affine.equation_add_iff","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx₁ x₂ y₁ L : R\n⊢ Iff (W.Equation (W.addX x₁ x₂ L) (W.negAddY x₁ x₂ y₁ L)) (Eq (Polynomial.eval (W.addX x₁ x₂ L) (W.addPolynomial x₁ y₁ L)) 0)","decl":"lemma equation_add_iff (x₁ x₂ y₁ L : R) :\n    W.Equation (W.addX x₁ x₂ L) (W.negAddY x₁ x₂ y₁ L) ↔\n      (W.addPolynomial x₁ y₁ L).eval (W.addX x₁ x₂ L) = 0 := by\n  rw [Equation, negAddY, addPolynomial, linePolynomial, polynomial]\n  eval_simp\n\n"}
{"name":"WeierstrassCurve.Affine.equation_neg_of","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Equation x (W.negY x y)\n⊢ W.Equation x y","decl":"lemma equation_neg_of {x y : R} (h : W.Equation x <| W.negY x y) : W.Equation x y :=\n  (W.equation_neg_iff ..).mp h\n\n"}
{"name":"WeierstrassCurve.Affine.equation_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Equation x y\n⊢ W.Equation x (W.negY x y)","decl":"/-- The negation of an affine point in `W` lies in `W`. -/\nlemma equation_neg {x y : R} (h : W.Equation x y) : W.Equation x <| W.negY x y :=\n  (W.equation_neg_iff ..).mpr h\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_neg_of","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Nonsingular x (W.negY x y)\n⊢ W.Nonsingular x y","decl":"lemma nonsingular_neg_of {x y : R} (h : W.Nonsingular x <| W.negY x y) : W.Nonsingular x y :=\n  (W.nonsingular_neg_iff ..).mp h\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_neg","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Nonsingular x y\n⊢ W.Nonsingular x (W.negY x y)","decl":"/-- The negation of a nonsingular affine point in `W` is nonsingular. -/\nlemma nonsingular_neg {x y : R} (h : W.Nonsingular x y) : W.Nonsingular x <| W.negY x y :=\n  (W.nonsingular_neg_iff ..).mpr h\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_negAdd_of_eval_derivative_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx₁ x₂ y₁ L : R\nhx' : W.Equation (W.addX x₁ x₂ L) (W.negAddY x₁ x₂ y₁ L)\nhx : Ne (Polynomial.eval (W.addX x₁ x₂ L) (Polynomial.derivative (W.addPolynomial x₁ y₁ L))) 0\n⊢ W.Nonsingular (W.addX x₁ x₂ L) (W.negAddY x₁ x₂ y₁ L)","decl":"lemma nonsingular_negAdd_of_eval_derivative_ne_zero {x₁ x₂ y₁ L : R}\n    (hx' : W.Equation (W.addX x₁ x₂ L) (W.negAddY x₁ x₂ y₁ L))\n    (hx : (W.addPolynomial x₁ y₁ L).derivative.eval (W.addX x₁ x₂ L) ≠ 0) :\n    W.Nonsingular (W.addX x₁ x₂ L) (W.negAddY x₁ x₂ y₁ L) := by\n  rw [Nonsingular, and_iff_right hx', negAddY, polynomialX, polynomialY]\n  eval_simp\n  contrapose! hx\n  rw [addPolynomial, linePolynomial, polynomial]\n  eval_simp\n  derivative_simp\n  simp only [zero_add, add_zero, sub_zero, zero_mul, mul_one]\n  eval_simp\n  linear_combination (norm := (norm_num1; ring1)) hx.left + L * hx.right\n\n"}
{"name":"WeierstrassCurve.Affine.slope_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Eq x₁ x₂\nhy : Eq y₁ (W.negY x₂ y₂)\n⊢ Eq (W.slope x₁ x₂ y₁ y₂) 0","decl":"@[simp]\nlemma slope_of_Y_eq {x₁ x₂ y₁ y₂ : F} (hx : x₁ = x₂) (hy : y₁ = W.negY x₂ y₂) :\n    W.slope x₁ x₂ y₁ y₂ = 0 := by\n  rw [slope, if_pos hx, if_pos hy]\n\n"}
{"name":"WeierstrassCurve.Affine.slope_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Eq x₁ x₂\nhy : Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (W.slope x₁ x₂ y₁ y₂) (HDiv.hDiv (HSub.hSub (HAdd.hAdd (HAdd.hAdd (HMul.hMul 3 (HPow.hPow x₁ 2)) (HMul.hMul (HMul.hMul 2 W.a₂) x₁)) W.a₄) (HMul.hMul W.a₁ y₁)) (HSub.hSub y₁ (W.negY x₁ y₁)))","decl":"@[simp]\nlemma slope_of_Y_ne {x₁ x₂ y₁ y₂ : F} (hx : x₁ = x₂) (hy : y₁ ≠ W.negY x₂ y₂) :\n    W.slope x₁ x₂ y₁ y₂ =\n      (3 * x₁ ^ 2 + 2 * W.a₂ * x₁ + W.a₄ - W.a₁ * y₁) / (y₁ - W.negY x₁ y₁) := by\n  rw [slope, if_pos hx, if_neg hy]\n\n"}
{"name":"WeierstrassCurve.Affine.slope_of_X_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Ne x₁ x₂\n⊢ Eq (W.slope x₁ x₂ y₁ y₂) (HDiv.hDiv (HSub.hSub y₁ y₂) (HSub.hSub x₁ x₂))","decl":"@[simp]\nlemma slope_of_X_ne {x₁ x₂ y₁ y₂ : F} (hx : x₁ ≠ x₂) :\n    W.slope x₁ x₂ y₁ y₂ = (y₁ - y₂) / (x₁ - x₂) := by\n  rw [slope, if_neg hx]\n\n"}
{"name":"WeierstrassCurve.Affine.slope_of_Y_ne_eq_eval","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Eq x₁ x₂\nhy : Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (W.slope x₁ x₂ y₁ y₂) (HDiv.hDiv (Neg.neg (Polynomial.evalEval x₁ y₁ W.polynomialX)) (Polynomial.evalEval x₁ y₁ W.polynomialY))","decl":"lemma slope_of_Y_ne_eq_eval {x₁ x₂ y₁ y₂ : F} (hx : x₁ = x₂) (hy : y₁ ≠ W.negY x₂ y₂) :\n    W.slope x₁ x₂ y₁ y₂ = -W.polynomialX.evalEval x₁ y₁ / W.polynomialY.evalEval x₁ y₁ := by\n  rw [slope_of_Y_ne hx hy, evalEval_polynomialX, neg_sub]\n  congr 1\n  rw [negY, evalEval_polynomialY]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.Y_eq_of_X_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Equation x₁ y₁\nh₂ : W.Equation x₂ y₂\nhx : Eq x₁ x₂\n⊢ Or (Eq y₁ y₂) (Eq y₁ (W.negY x₂ y₂))","decl":"lemma Y_eq_of_X_eq {x₁ x₂ y₁ y₂ : F} (h₁ : W.Equation x₁ y₁) (h₂ : W.Equation x₂ y₂)\n    (hx : x₁ = x₂) : y₁ = y₂ ∨ y₁ = W.negY x₂ y₂ := by\n  rw [equation_iff] at h₁ h₂\n  rw [← sub_eq_zero, ← sub_eq_zero (a := y₁), ← mul_eq_zero, negY]\n  linear_combination (norm := (rw [hx]; ring1)) h₁ - h₂\n\n"}
{"name":"WeierstrassCurve.Affine.Y_eq_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Equation x₁ y₁\nh₂ : W.Equation x₂ y₂\nhx : Eq x₁ x₂\nhy : Ne y₁ (W.negY x₂ y₂)\n⊢ Eq y₁ y₂","decl":"lemma Y_eq_of_Y_ne {x₁ x₂ y₁ y₂ : F} (h₁ : W.Equation x₁ y₁) (h₂ : W.Equation x₂ y₂) (hx : x₁ = x₂)\n    (hy : y₁ ≠ W.negY x₂ y₂) : y₁ = y₂ :=\n  (Y_eq_of_X_eq h₁ h₂ hx).resolve_right hy\n\n"}
{"name":"WeierstrassCurve.Affine.addPolynomial_slope","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Equation x₁ y₁\nh₂ : W.Equation x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (W.addPolynomial x₁ y₁ (W.slope x₁ x₂ y₁ y₂)) (Neg.neg (HMul.hMul (HMul.hMul (HSub.hSub Polynomial.X (Polynomial.C x₁)) (HSub.hSub Polynomial.X (Polynomial.C x₂))) (HSub.hSub Polynomial.X (Polynomial.C (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂))))))","decl":"lemma addPolynomial_slope {x₁ x₂ y₁ y₂ : F} (h₁ : W.Equation x₁ y₁) (h₂ : W.Equation x₂ y₂)\n    (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) : W.addPolynomial x₁ y₁ (W.slope x₁ x₂ y₁ y₂) =\n      -((X - C x₁) * (X - C x₂) * (X - C (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂))) := by\n  rw [addPolynomial_eq, neg_inj, Cubic.prod_X_sub_C_eq, Cubic.toPoly_injective]\n  by_cases hx : x₁ = x₂\n  · rcases hx, Y_eq_of_Y_ne h₁ h₂ hx (hxy hx) with ⟨rfl, rfl⟩\n    rw [equation_iff] at h₁ h₂\n    rw [slope_of_Y_ne rfl <| hxy rfl]\n    rw [negY, ← sub_ne_zero] at hxy\n    ext\n    · rfl\n    · simp only [addX]\n      ring1\n    · field_simp [hxy rfl]\n      ring1\n    · linear_combination (norm := (field_simp [hxy rfl]; ring1)) -h₁\n  · rw [equation_iff] at h₁ h₂\n    rw [slope_of_X_ne hx]\n    rw [← sub_eq_zero] at hx\n    ext\n    · rfl\n    · simp only [addX]\n      ring1\n    · apply mul_right_injective₀ hx\n      linear_combination (norm := (field_simp [hx]; ring1)) h₂ - h₁\n    · apply mul_right_injective₀ hx\n      linear_combination (norm := (field_simp [hx]; ring1)) x₂ * h₁ - x₁ * h₂\n\n"}
{"name":"WeierstrassCurve.Affine.equation_negAdd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Equation x₁ y₁\nh₂ : W.Equation x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ W.Equation (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) (W.negAddY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂))","decl":"/-- The negated addition of two affine points in `W` on a sloped line lies in `W`. -/\nlemma equation_negAdd {x₁ x₂ y₁ y₂ : F} (h₁ : W.Equation x₁ y₁) (h₂ : W.Equation x₂ y₂)\n    (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) : W.Equation\n      (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.negAddY x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) := by\n  rw [equation_add_iff, addPolynomial_slope h₁ h₂ hxy]\n  eval_simp\n  rw [neg_eq_zero, sub_self, mul_zero]\n\n"}
{"name":"WeierstrassCurve.Affine.equation_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Equation x₁ y₁\nh₂ : W.Equation x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ W.Equation (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) (W.addY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂))","decl":"/-- The addition of two affine points in `W` on a sloped line lies in `W`. -/\nlemma equation_add {x₁ x₂ y₁ y₂ : F} (h₁ : W.Equation x₁ y₁) (h₂ : W.Equation x₂ y₂)\n    (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) :\n    W.Equation (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.addY x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) :=\n  equation_neg <| equation_negAdd h₁ h₂ hxy\n\n"}
{"name":"WeierstrassCurve.Affine.derivative_addPolynomial_slope","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Equation x₁ y₁\nh₂ : W.Equation x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (Polynomial.derivative (W.addPolynomial x₁ y₁ (W.slope x₁ x₂ y₁ y₂))) (Neg.neg (HAdd.hAdd (HAdd.hAdd (HMul.hMul (HSub.hSub Polynomial.X (Polynomial.C x₁)) (HSub.hSub Polynomial.X (Polynomial.C x₂))) (HMul.hMul (HSub.hSub Polynomial.X (Polynomial.C x₁)) (HSub.hSub Polynomial.X (Polynomial.C (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)))))) (HMul.hMul (HSub.hSub Polynomial.X (Polynomial.C x₂)) (HSub.hSub Polynomial.X (Polynomial.C (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)))))))","decl":"lemma derivative_addPolynomial_slope {x₁ x₂ y₁ y₂ : F} (h₁ : W.Equation x₁ y₁)\n    (h₂ : W.Equation x₂ y₂) (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) :\n    derivative (W.addPolynomial x₁ y₁ <| W.slope x₁ x₂ y₁ y₂) =\n      -((X - C x₁) * (X - C x₂) + (X - C x₁) * (X - C (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂)) +\n          (X - C x₂) * (X - C (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂))) := by\n  rw [addPolynomial_slope h₁ h₂ hxy]\n  derivative_simp\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_negAdd","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ W.Nonsingular (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) (W.negAddY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂))","decl":"/-- The negated addition of two nonsingular affine points in `W` on a sloped line is nonsingular. -/\nlemma nonsingular_negAdd {x₁ x₂ y₁ y₂ : F} (h₁ : W.Nonsingular x₁ y₁) (h₂ : W.Nonsingular x₂ y₂)\n    (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) : W.Nonsingular\n      (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.negAddY x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) := by\n  by_cases hx₁ : W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂) = x₁\n  · rwa [negAddY, hx₁, sub_self, mul_zero, zero_add]\n  · by_cases hx₂ : W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂) = x₂\n    · by_cases hx : x₁ = x₂\n      · subst hx\n        contradiction\n      · rwa [negAddY, ← neg_sub, mul_neg, hx₂, slope_of_X_ne hx,\n          div_mul_cancel₀ _ <| sub_ne_zero_of_ne hx, neg_sub, sub_add_cancel]\n    · apply nonsingular_negAdd_of_eval_derivative_ne_zero <| equation_negAdd h₁.1 h₂.1 hxy\n      rw [derivative_addPolynomial_slope h₁.left h₂.left hxy]\n      eval_simp\n      simpa only [neg_ne_zero, sub_self, mul_zero, add_zero] using\n        mul_ne_zero (sub_ne_zero_of_ne hx₁) (sub_ne_zero_of_ne hx₂)\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular_add","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ W.Nonsingular (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) (W.addY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂))","decl":"/-- The addition of two nonsingular affine points in `W` on a sloped line is nonsingular. -/\nlemma nonsingular_add {x₁ x₂ y₁ y₂ : F} (h₁ : W.Nonsingular x₁ y₁) (h₂ : W.Nonsingular x₂ y₂)\n    (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) :\n    W.Nonsingular (W.addX x₁ x₂ <| W.slope x₁ x₂ y₁ y₂) (W.addY x₁ x₂ y₁ <| W.slope x₁ x₂ y₁ y₂) :=\n  nonsingular_neg <| nonsingular_negAdd h₁ h₂ hxy\n\n"}
{"name":"WeierstrassCurve.Affine.addX_eq_addX_negY_sub","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Ne x₁ x₂\n⊢ Eq (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) (HSub.hSub (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ (W.negY x₂ y₂))) (HDiv.hDiv (HMul.hMul (HSub.hSub y₁ (W.negY x₁ y₁)) (HSub.hSub y₂ (W.negY x₂ y₂))) (HPow.hPow (HSub.hSub x₂ x₁) 2)))","decl":"/-- The formula x(P₁ + P₂) = x(P₁ - P₂) - ψ(P₁)ψ(P₂) / (x(P₂) - x(P₁))²,\nwhere ψ(x,y) = 2y + a₁x + a₃. -/\nlemma addX_eq_addX_negY_sub (hx : x₁ ≠ x₂) :\n    W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂) = W.addX x₁ x₂ (W.slope x₁ x₂ y₁ (W.negY x₂ y₂))\n      - (y₁ - W.negY x₁ y₁) * (y₂ - W.negY x₂ y₂) / (x₂ - x₁) ^ 2 := by\n  simp_rw [slope_of_X_ne hx, addX, negY, ← neg_sub x₁, neg_sq]\n  field_simp [sub_ne_zero.mpr hx]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.cyclic_sum_Y_mul_X_sub_X","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Ne x₁ x₂\n⊢ Eq (HAdd.hAdd (HAdd.hAdd (HMul.hMul y₁ (HSub.hSub x₂ (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)))) (HMul.hMul y₂ (HSub.hSub (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) x₁))) (HMul.hMul (W.negAddY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂)) (HSub.hSub x₁ x₂))) 0","decl":"/-- The formula y(P₁)(x(P₂) - x(P₃)) + y(P₂)(x(P₃) - x(P₁)) + y(P₃)(x(P₁) - x(P₂)) = 0,\nassuming that P₁ + P₂ + P₃ = O. -/\nlemma cyclic_sum_Y_mul_X_sub_X (hx : x₁ ≠ x₂) :\n    letI x₃ := W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)\n    y₁ * (x₂ - x₃) + y₂ * (x₃ - x₁) + W.negAddY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂) * (x₁ - x₂) = 0 := by\n  simp_rw [slope_of_X_ne hx, negAddY, addX]\n  field_simp [sub_ne_zero.mpr hx]\n  ring1\n\n"}
{"name":"WeierstrassCurve.Affine.addY_sub_negY_addY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nhx : Ne x₁ x₂\n⊢ Eq (HSub.hSub (W.addY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂)) (W.negY (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)) (W.addY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂)))) (HDiv.hDiv (HSub.hSub (HMul.hMul (HSub.hSub y₂ (W.negY x₂ y₂)) (HSub.hSub x₁ (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)))) (HMul.hMul (HSub.hSub y₁ (W.negY x₁ y₁)) (HSub.hSub x₂ (W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂))))) (HSub.hSub x₂ x₁))","decl":"/-- The formula\nψ(P₁ + P₂) = (ψ(P₂)(x(P₁) - x(P₃)) - ψ(P₁)(x(P₂) - x(P₃))) / (x(P₂) - x(P₁)),\nwhere ψ(x,y) = 2y + a₁x + a₃. -/\nlemma addY_sub_negY_addY (hx : x₁ ≠ x₂) :\n    letI x₃ := W.addX x₁ x₂ (W.slope x₁ x₂ y₁ y₂)\n    letI y₃ := W.addY x₁ x₂ y₁ (W.slope x₁ x₂ y₁ y₂)\n    y₃ - W.negY x₃ y₃ =\n      ((y₂ - W.negY x₂ y₂) * (x₁ - x₃) - (y₁ - W.negY x₁ y₁) * (x₂ - x₃)) / (x₂ - x₁) := by\n  simp_rw [addY, negY, eq_div_iff (sub_ne_zero.mpr hx.symm)]\n  linear_combination 2 * cyclic_sum_Y_mul_X_sub_X y₁ y₂ hx\n\n"}
{"name":"WeierstrassCurve.Affine.Point.some.sizeOf_spec","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\ninst✝ : SizeOf R\nx y : R\nh : W.Nonsingular x y\n⊢ Eq (SizeOf.sizeOf (WeierstrassCurve.Affine.Point.some h)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf x)) (SizeOf.sizeOf y)) (SizeOf.sizeOf h))","decl":"/-- A nonsingular rational point on a Weierstrass curve `W` in affine coordinates. This is either\nthe unique point at infinity `WeierstrassCurve.Affine.Point.zero` or the nonsingular affine points\n`WeierstrassCurve.Affine.Point.some` $(x, y)$ satisfying the Weierstrass equation of `W`. -/\ninductive Point\n  | zero\n  | some {x y : R} (h : W.Nonsingular x y)\n\n"}
{"name":"WeierstrassCurve.Affine.Point.some.inj","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx✝¹ y✝ : R\nh✝ : W.Nonsingular x✝¹ y✝\nx y : R\nh : W.Nonsingular x y\nx✝ : Eq (WeierstrassCurve.Affine.Point.some h✝) (WeierstrassCurve.Affine.Point.some h)\n⊢ And (Eq x✝¹ x) (Eq y✝ y)","decl":"/-- A nonsingular rational point on a Weierstrass curve `W` in affine coordinates. This is either\nthe unique point at infinity `WeierstrassCurve.Affine.Point.zero` or the nonsingular affine points\n`WeierstrassCurve.Affine.Point.some` $(x, y)$ satisfying the Weierstrass equation of `W`. -/\ninductive Point\n  | zero\n  | some {x y : R} (h : W.Nonsingular x y)\n\n"}
{"name":"WeierstrassCurve.Affine.Point.some.injEq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx✝ y✝ : R\nh✝ : W.Nonsingular x✝ y✝\nx y : R\nh : W.Nonsingular x y\n⊢ Eq (Eq (WeierstrassCurve.Affine.Point.some h✝) (WeierstrassCurve.Affine.Point.some h)) (And (Eq x✝ x) (Eq y✝ y))","decl":"/-- A nonsingular rational point on a Weierstrass curve `W` in affine coordinates. This is either\nthe unique point at infinity `WeierstrassCurve.Affine.Point.zero` or the nonsingular affine points\n`WeierstrassCurve.Affine.Point.some` $(x, y)$ satisfying the Weierstrass equation of `W`. -/\ninductive Point\n  | zero\n  | some {x y : R} (h : W.Nonsingular x y)\n\n"}
{"name":"WeierstrassCurve.Affine.Point.zero.sizeOf_spec","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\ninst✝ : SizeOf R\n⊢ Eq (SizeOf.sizeOf WeierstrassCurve.Affine.Point.zero) 1","decl":"/-- A nonsingular rational point on a Weierstrass curve `W` in affine coordinates. This is either\nthe unique point at infinity `WeierstrassCurve.Affine.Point.zero` or the nonsingular affine points\n`WeierstrassCurve.Affine.Point.some` $(x, y)$ satisfying the Weierstrass equation of `W`. -/\ninductive Point\n  | zero\n  | some {x y : R} (h : W.Nonsingular x y)\n\n"}
{"name":"WeierstrassCurve.Affine.Point.zero_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq WeierstrassCurve.Affine.Point.zero 0","decl":"lemma zero_def : (zero : W.Point) = 0 :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.some_ne_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Nonsingular x y\n⊢ Ne (WeierstrassCurve.Affine.Point.some h) 0","decl":"lemma some_ne_zero {x y : R} (h : W.Nonsingular x y) : some h ≠ 0 := by rintro (_|_)\n\n"}
{"name":"WeierstrassCurve.Affine.Point.neg_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nP : W.Point\n⊢ Eq P.neg (Neg.neg P)","decl":"lemma neg_def (P : W.Point) : P.neg = -P :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.neg_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (-0) 0","decl":"@[simp]\nlemma neg_zero : (-0 : W.Point) = 0 :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.neg_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\nx y : R\nh : W.Nonsingular x y\n⊢ Eq (Neg.neg (WeierstrassCurve.Affine.Point.some h)) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"@[simp]\nlemma neg_some {x y : R} (h : W.Nonsingular x y) : -some h = some (nonsingular_neg h) :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_def","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nP Q : W.Point\n⊢ Eq (P.add Q) (HAdd.hAdd P Q)","decl":"lemma add_def (P Q : W.Point) : P.add Q = P + Q :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhx : Eq x₁ x₂\nhy : Eq y₁ (W.negY x₂ y₂)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₂)) 0","decl":"@[simp]\nlemma add_of_Y_eq {x₁ x₂ y₁ y₂ : F} {h₁ : W.Nonsingular x₁ y₁} {h₂ : W.Nonsingular x₂ y₂}\n    (hx : x₁ = x₂) (hy : y₁ = W.negY x₂ y₂) : some h₁ + some h₂ = 0 := by\n  simp_rw [← add_def, add]; exact dif_pos ⟨hx, hy⟩\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_self_of_Y_eq","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ y₁ : F\nh₁ : W.Nonsingular x₁ y₁\nhy : Eq y₁ (W.negY x₁ y₁)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₁)) 0","decl":"@[simp]\nlemma add_self_of_Y_eq {x₁ y₁ : F} {h₁ : W.Nonsingular x₁ y₁} (hy : y₁ = W.negY x₁ y₁) :\n    some h₁ + some h₁ = 0 :=\n  add_of_Y_eq rfl hy\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_of_imp","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhxy : Eq x₁ x₂ → Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₂)) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"@[simp]\nlemma add_of_imp {x₁ x₂ y₁ y₂ : F} {h₁ : W.Nonsingular x₁ y₁} {h₂ : W.Nonsingular x₂ y₂}\n    (hxy : x₁ = x₂ → y₁ ≠ W.negY x₂ y₂) : some h₁ + some h₂ = some (nonsingular_add h₁ h₂ hxy) :=\n  dif_neg fun hn ↦ hxy hn.1 hn.2\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhy : Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₂)) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"@[simp]\nlemma add_of_Y_ne {x₁ x₂ y₁ y₂ : F} {h₁ : W.Nonsingular x₁ y₁} {h₂ : W.Nonsingular x₂ y₂}\n    (hy : y₁ ≠ W.negY x₂ y₂) :\n    some h₁ + some h₂ = some (nonsingular_add h₁ h₂ fun _ ↦ hy) :=\n  add_of_imp fun _ ↦ hy\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhy : Ne y₁ (W.negY x₂ y₂)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₂)) (Neg.neg (WeierstrassCurve.Affine.Point.some ⋯))","decl":"lemma add_of_Y_ne' {x₁ x₂ y₁ y₂ : F} {h₁ : W.Nonsingular x₁ y₁} {h₂ : W.Nonsingular x₂ y₂}\n    (hy : y₁ ≠ W.negY x₂ y₂) :\n    some h₁ + some h₂ = -some (nonsingular_negAdd h₁ h₂ fun _ ↦ hy) :=\n  add_of_Y_ne hy\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_self_of_Y_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ y₁ : F\nh₁ : W.Nonsingular x₁ y₁\nhy : Ne y₁ (W.negY x₁ y₁)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₁)) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"@[simp]\nlemma add_self_of_Y_ne {x₁ y₁ : F} {h₁ : W.Nonsingular x₁ y₁} (hy : y₁ ≠ W.negY x₁ y₁) :\n    some h₁ + some h₁ = some (nonsingular_add h₁ h₁ fun _ => hy) :=\n  add_of_Y_ne hy\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_self_of_Y_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ y₁ : F\nh₁ : W.Nonsingular x₁ y₁\nhy : Ne y₁ (W.negY x₁ y₁)\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₁)) (Neg.neg (WeierstrassCurve.Affine.Point.some ⋯))","decl":"lemma add_self_of_Y_ne' {x₁ y₁ : F} {h₁ : W.Nonsingular x₁ y₁} (hy : y₁ ≠ W.negY x₁ y₁) :\n    some h₁ + some h₁ = -some (nonsingular_negAdd h₁ h₁ fun _ => hy) :=\n  add_of_Y_ne hy\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_of_X_ne","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhx : Ne x₁ x₂\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₂)) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"@[simp]\nlemma add_of_X_ne {x₁ x₂ y₁ y₂ : F} {h₁ : W.Nonsingular x₁ y₁} {h₂ : W.Nonsingular x₂ y₂}\n    (hx : x₁ ≠ x₂) : some h₁ + some h₂ = some (nonsingular_add h₁ h₂ fun h => (hx h).elim) :=\n  add_of_imp fun h ↦ (hx h).elim\n\n"}
{"name":"WeierstrassCurve.Affine.Point.add_of_X_ne'","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝ : Field F\nW : WeierstrassCurve.Affine F\nx₁ x₂ y₁ y₂ : F\nh₁ : W.Nonsingular x₁ y₁\nh₂ : W.Nonsingular x₂ y₂\nhx : Ne x₁ x₂\n⊢ Eq (HAdd.hAdd (WeierstrassCurve.Affine.Point.some h₁) (WeierstrassCurve.Affine.Point.some h₂)) (Neg.neg (WeierstrassCurve.Affine.Point.some ⋯))","decl":"lemma add_of_X_ne' {x₁ x₂ y₁ y₂ : F} {h₁ : W.Nonsingular x₁ y₁} {h₂ : W.Nonsingular x₂ y₂}\n    (hx : x₁ ≠ x₂) : some h₁ + some h₂ = -some (nonsingular_negAdd h₁ h₂ fun h => (hx h).elim) :=\n  add_of_X_ne hx\n\n"}
{"name":"WeierstrassCurve.Affine.map_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W f).toAffine.polynomial (Polynomial.map (Polynomial.mapRingHom f) W.polynomial)","decl":"lemma map_polynomial : (W.map f).toAffine.polynomial = W.polynomial.map (mapRingHom f) := by\n  simp only [polynomial]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.evalEval_baseChange_polynomial_X_Y","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝ : CommRing R\nW : WeierstrassCurve.Affine R\n⊢ Eq (Polynomial.evalEval (Polynomial.C Polynomial.X) Polynomial.X (WeierstrassCurve.baseChange W (Polynomial (Polynomial R))).toAffine.polynomial) W.polynomial","decl":"lemma evalEval_baseChange_polynomial_X_Y :\n    (W.baseChange R[X][Y]).toAffine.polynomial.evalEval (C X) Y = W.polynomial := by\n  rw [baseChange, toAffine, map_polynomial, evalEval, eval_map, eval_C_X_eval₂_map_C_X]\n\n"}
{"name":"WeierstrassCurve.Affine.Equation.map","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx y : R\nh : W.Equation x y\n⊢ WeierstrassCurve.Affine.Equation (WeierstrassCurve.map W f) (f x) (f y)","decl":"variable {W} in\nlemma Equation.map {x y : R} (h : W.Equation x y) : Equation (W.map f) (f x) (f y) := by\n  rw [Equation, map_polynomial, map_mapRingHom_evalEval, ← f.map_zero]; exact congr_arg f h\n\n"}
{"name":"WeierstrassCurve.Affine.map_equation","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nhf : Function.Injective ⇑f\nx y : R\n⊢ Iff ((WeierstrassCurve.map W f).toAffine.Equation (f x) (f y)) (W.Equation x y)","decl":"variable {f} in\nlemma map_equation (hf : Function.Injective f) (x y : R) :\n    (W.map f).toAffine.Equation (f x) (f y) ↔ W.Equation x y := by\n  simp only [Equation, map_polynomial, map_mapRingHom_evalEval, map_eq_zero_iff f hf]\n\n"}
{"name":"WeierstrassCurve.Affine.map_polynomialX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W f).toAffine.polynomialX (Polynomial.map (Polynomial.mapRingHom f) W.polynomialX)","decl":"lemma map_polynomialX : (W.map f).toAffine.polynomialX = W.polynomialX.map (mapRingHom f) := by\n  simp only [polynomialX]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W f).toAffine.polynomialY (Polynomial.map (Polynomial.mapRingHom f) W.polynomialY)","decl":"lemma map_polynomialY : (W.map f).toAffine.polynomialY = W.polynomialY.map (mapRingHom f) := by\n  simp only [polynomialY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_nonsingular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nhf : Function.Injective ⇑f\nx y : R\n⊢ Iff ((WeierstrassCurve.map W f).toAffine.Nonsingular (f x) (f y)) (W.Nonsingular x y)","decl":"variable {f} in\nlemma map_nonsingular (hf : Function.Injective f) (x y : R) :\n    (W.map f).toAffine.Nonsingular (f x) (f y) ↔ W.Nonsingular x y := by\n  simp only [Nonsingular, evalEval, W.map_equation hf, map_polynomialX,\n    map_polynomialY, map_mapRingHom_evalEval, map_ne_zero_iff f hf]\n\n"}
{"name":"WeierstrassCurve.Affine.map_negPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\n⊢ Eq (WeierstrassCurve.map W f).toAffine.negPolynomial (Polynomial.map (Polynomial.mapRingHom f) W.negPolynomial)","decl":"lemma map_negPolynomial :\n    (W.map f).toAffine.negPolynomial = W.negPolynomial.map (mapRingHom f) := by\n  simp only [negPolynomial]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx y : R\n⊢ Eq ((WeierstrassCurve.map W f).toAffine.negY (f x) (f y)) (f (W.negY x y))","decl":"lemma map_negY (x y : R) : (W.map f).toAffine.negY (f x) (f y) = f (W.negY x y) := by\n  simp only [negY]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_linePolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx y L : R\n⊢ Eq (WeierstrassCurve.Affine.linePolynomial (f x) (f y) (f L)) (Polynomial.map f (WeierstrassCurve.Affine.linePolynomial x y L))","decl":"lemma map_linePolynomial (x y L : R) :\n    linePolynomial (f x) (f y) (f L) = (linePolynomial x y L).map f := by\n  simp only [linePolynomial]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_addPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx y L : R\n⊢ Eq ((WeierstrassCurve.map W f).toAffine.addPolynomial (f x) (f y) (f L)) (Polynomial.map f (W.addPolynomial x y L))","decl":"lemma map_addPolynomial (x y L : R) :\n    (W.map f).toAffine.addPolynomial (f x) (f y) (f L) = (W.addPolynomial x y L).map f := by\n  rw [addPolynomial, map_polynomial, eval_map, linePolynomial, addPolynomial, ← coe_mapRingHom,\n    ← eval₂_hom, linePolynomial]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_addX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx₁ x₂ L : R\n⊢ Eq ((WeierstrassCurve.map W f).toAffine.addX (f x₁) (f x₂) (f L)) (f (W.addX x₁ x₂ L))","decl":"lemma map_addX (x₁ x₂ L : R) :\n    (W.map f).toAffine.addX (f x₁) (f x₂) (f L) = f (W.addX x₁ x₂ L) := by\n  simp only [addX]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_negAddY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx₁ x₂ y₁ L : R\n⊢ Eq ((WeierstrassCurve.map W f).toAffine.negAddY (f x₁) (f x₂) (f y₁) (f L)) (f (W.negAddY x₁ x₂ y₁ L))","decl":"lemma map_negAddY (x₁ x₂ y₁ L : R) :\n    (W.map f).toAffine.negAddY (f x₁) (f x₂) (f y₁) (f L) = f (W.negAddY x₁ x₂ y₁ L) := by\n  simp only [negAddY, map_addX]\n  map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.map_addY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝¹ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type v\ninst✝ : CommRing S\nf : RingHom R S\nx₁ x₂ y₁ L : R\n⊢ Eq ((WeierstrassCurve.map W f).toAffine.addY (f x₁) (f x₂) (f y₁) (f L)) (f ((WeierstrassCurve.toAffine W).addY x₁ x₂ y₁ L))","decl":"lemma map_addY (x₁ x₂ y₁ L : R) :\n    (W.map f).toAffine.addY (f x₁) (f x₂) (f y₁) (f L) = f (W.toAffine.addY x₁ x₂ y₁ L) := by\n  simp only [addY, map_negAddY, map_addX, map_negY]\n\n"}
{"name":"WeierstrassCurve.Affine.map_slope","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"F : Type u\ninst✝¹ : Field F\nW : WeierstrassCurve.Affine F\nK : Type v\ninst✝ : Field K\nf : RingHom F K\nx₁ x₂ y₁ y₂ : F\n⊢ Eq ((WeierstrassCurve.map W f).toAffine.slope (f x₁) (f x₂) (f y₁) (f y₂)) (f (W.slope x₁ x₂ y₁ y₂))","decl":"lemma map_slope {F : Type u} [Field F] (W : Affine F) {K : Type v} [Field K] (f : F →+* K)\n    (x₁ x₂ y₁ y₂ : F) : (W.map f).toAffine.slope (f x₁) (f x₂) (f y₁) (f y₂) =\n      f (W.slope x₁ x₂ y₁ y₂) := by\n  by_cases hx : x₁ = x₂\n  · by_cases hy : y₁ = W.negY x₂ y₂\n    · rw [slope_of_Y_eq (congr_arg f hx) <| by rw [hy, map_negY], slope_of_Y_eq hx hy, map_zero]\n    · rw [slope_of_Y_ne (congr_arg f hx) <| W.map_negY f x₂ y₂ ▸ fun h => hy <| f.injective h,\n        map_negY, slope_of_Y_ne hx hy]\n      map_simp\n  · rw [slope_of_X_ne fun h => hx <| f.injective h, slope_of_X_ne hx]\n    map_simp\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_polynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W B).toAffine.polynomial (Polynomial.map (Polynomial.mapRingHom ↑f) (WeierstrassCurve.baseChange W A).toAffine.polynomial)","decl":"lemma baseChange_polynomial : (W.baseChange B).toAffine.polynomial =\n    (W.baseChange A).toAffine.polynomial.map (mapRingHom f) := by\n  rw [← map_polynomial, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_equation","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nhf : Function.Injective ⇑f\nx y : A\n⊢ Iff ((WeierstrassCurve.baseChange W B).toAffine.Equation (f x) (f y)) ((WeierstrassCurve.baseChange W A).toAffine.Equation x y)","decl":"lemma baseChange_equation (hf : Function.Injective f) (x y : A) :\n    (W.baseChange B).toAffine.Equation (f x) (f y) ↔ (W.baseChange A).toAffine.Equation x y := by\n  erw [← map_equation _ hf, map_baseChange]\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_polynomialX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W B).toAffine.polynomialX (Polynomial.map (Polynomial.mapRingHom ↑f) (WeierstrassCurve.baseChange W A).toAffine.polynomialX)","decl":"lemma baseChange_polynomialX : (W.baseChange B).toAffine.polynomialX =\n    (W.baseChange A).toAffine.polynomialX.map (mapRingHom f) := by\n  rw [← map_polynomialX, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_polynomialY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W B).toAffine.polynomialY (Polynomial.map (Polynomial.mapRingHom ↑f) (WeierstrassCurve.baseChange W A).toAffine.polynomialY)","decl":"lemma baseChange_polynomialY : (W.baseChange B).toAffine.polynomialY =\n    (W.baseChange A).toAffine.polynomialY.map (mapRingHom f) := by\n  rw [← map_polynomialY, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_nonsingular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nhf : Function.Injective ⇑f\nx y : A\n⊢ Iff ((WeierstrassCurve.baseChange W B).toAffine.Nonsingular (f x) (f y)) ((WeierstrassCurve.baseChange W A).toAffine.Nonsingular x y)","decl":"variable {f} in\nlemma baseChange_nonsingular (hf : Function.Injective f) (x y : A) :\n    (W.baseChange B).toAffine.Nonsingular (f x) (f y) ↔\n      (W.baseChange A).toAffine.Nonsingular x y := by\n  erw [← map_nonsingular _ hf, map_baseChange]\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_negPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\n⊢ Eq (WeierstrassCurve.baseChange W B).toAffine.negPolynomial (Polynomial.map (Polynomial.mapRingHom ↑f) (WeierstrassCurve.baseChange W A).toAffine.negPolynomial)","decl":"lemma baseChange_negPolynomial :\n    (W.baseChange B).toAffine.negPolynomial =\n      (W.baseChange A).toAffine.negPolynomial.map (mapRingHom f) := by\n  rw [← map_negPolynomial, map_baseChange]\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_negY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nx y : A\n⊢ Eq ((WeierstrassCurve.baseChange W B).toAffine.negY (f x) (f y)) (f ((WeierstrassCurve.baseChange W A).toAffine.negY x y))","decl":"lemma baseChange_negY (x y : A) :\n    (W.baseChange B).toAffine.negY (f x) (f y) = f ((W.baseChange A).toAffine.negY x y) := by simp\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_addPolynomial","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nx y L : A\n⊢ Eq ((WeierstrassCurve.baseChange W B).toAffine.addPolynomial (f x) (f y) (f L)) (Polynomial.map (↑f) ((WeierstrassCurve.baseChange W A).toAffine.addPolynomial x y L))","decl":"lemma baseChange_addPolynomial (x y L : A) :\n    (W.baseChange B).toAffine.addPolynomial (f x) (f y) (f L) =\n      ((W.baseChange A).toAffine.addPolynomial x y L).map f := by\n  rw [← map_addPolynomial, map_baseChange]\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_addX","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nx₁ x₂ L : A\n⊢ Eq ((WeierstrassCurve.baseChange W B).toAffine.addX (f x₁) (f x₂) (f L)) (f ((WeierstrassCurve.baseChange W A).toAffine.addX x₁ x₂ L))","decl":"lemma baseChange_addX (x₁ x₂ L : A) :\n    (W.baseChange B).toAffine.addX (f x₁) (f x₂) (f L) =\n      f ((W.baseChange A).toAffine.addX x₁ x₂ L) := by simp\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_negAddY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nx₁ x₂ y₁ L : A\n⊢ Eq ((WeierstrassCurve.baseChange W B).toAffine.negAddY (f x₁) (f x₂) (f y₁) (f L)) (f ((WeierstrassCurve.baseChange W A).toAffine.negAddY x₁ x₂ y₁ L))","decl":"lemma baseChange_negAddY (x₁ x₂ y₁ L : A) :\n    (W.baseChange B).toAffine.negAddY (f x₁) (f x₂) (f y₁) (f L) =\n      f ((W.baseChange A).toAffine.negAddY x₁ x₂ y₁ L) := by simp\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_addY","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nA : Type u\ninst✝⁷ : CommRing A\ninst✝⁶ : Algebra R A\ninst✝⁵ : Algebra S A\ninst✝⁴ : IsScalarTower R S A\nB : Type v\ninst✝³ : CommRing B\ninst✝² : Algebra R B\ninst✝¹ : Algebra S B\ninst✝ : IsScalarTower R S B\nf : AlgHom S A B\nx₁ x₂ y₁ L : A\n⊢ Eq ((WeierstrassCurve.baseChange W B).toAffine.addY (f x₁) (f x₂) (f y₁) (f L)) (f ((WeierstrassCurve.baseChange W A).toAffine.addY x₁ x₂ y₁ L))","decl":"lemma baseChange_addY (x₁ x₂ y₁ L : A) :\n    (W.baseChange B).toAffine.addY (f x₁) (f x₂) (f y₁) (f L) =\n      f ((W.baseChange A).toAffine.addY x₁ x₂ y₁ L) := by simp\n\n"}
{"name":"WeierstrassCurve.Affine.baseChange_slope","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nF : Type u\ninst✝⁷ : Field F\ninst✝⁶ : Algebra R F\ninst✝⁵ : Algebra S F\ninst✝⁴ : IsScalarTower R S F\nK : Type v\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : Algebra S K\ninst✝ : IsScalarTower R S K\nf : AlgHom S F K\nx₁ x₂ y₁ y₂ : F\n⊢ Eq ((WeierstrassCurve.baseChange W K).toAffine.slope (f x₁) (f x₂) (f y₁) (f y₂)) (f ((WeierstrassCurve.baseChange W F).toAffine.slope x₁ x₂ y₁ y₂))","decl":"lemma baseChange_slope (x₁ x₂ y₁ y₂ : F) :\n    (W.baseChange K).toAffine.slope (f x₁) (f x₂) (f y₁) (f y₂) =\n      f ((W.baseChange F).toAffine.slope x₁ x₂ y₁ y₂) := by\n  erw [← map_slope, map_baseChange]\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.map_zero","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nF : Type u\ninst✝⁷ : Field F\ninst✝⁶ : Algebra R F\ninst✝⁵ : Algebra S F\ninst✝⁴ : IsScalarTower R S F\nK : Type v\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : Algebra S K\ninst✝ : IsScalarTower R S K\nf : AlgHom S F K\n⊢ Eq ((WeierstrassCurve.Affine.Point.map W f) 0) 0","decl":"lemma map_zero : map W f (0 : W⟮F⟯) = 0 :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.map_some","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nF : Type u\ninst✝⁷ : Field F\ninst✝⁶ : Algebra R F\ninst✝⁵ : Algebra S F\ninst✝⁴ : IsScalarTower R S F\nK : Type v\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : Algebra S K\ninst✝ : IsScalarTower R S K\nf : AlgHom S F K\nx y : F\nh : (WeierstrassCurve.baseChange W F).toAffine.Nonsingular x y\n⊢ Eq ((WeierstrassCurve.Affine.Point.map W f) (WeierstrassCurve.Affine.Point.some h)) (WeierstrassCurve.Affine.Point.some ⋯)","decl":"lemma map_some {x y : F} (h : (W.baseChange F).toAffine.Nonsingular x y) :\n    map W f (some h) = some ((W.baseChange_nonsingular f.injective ..).mpr h) :=\n  rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.map_id","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝² : CommRing R\nW : WeierstrassCurve.Affine R\nF : Type u\ninst✝¹ : Field F\ninst✝ : Algebra R F\nP : WeierstrassCurve.Affine.Point (WeierstrassCurve.baseChange W F)\n⊢ Eq ((WeierstrassCurve.Affine.Point.map W (Algebra.ofId F F)) P) P","decl":"lemma map_id (P : W⟮F⟯) : map W (Algebra.ofId F F) P = P := by\n  cases P <;> rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.map_map","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁴ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝¹³ : CommRing S\ninst✝¹² : Algebra R S\nF : Type u\ninst✝¹¹ : Field F\ninst✝¹⁰ : Algebra R F\ninst✝⁹ : Algebra S F\ninst✝⁸ : IsScalarTower R S F\nK : Type v\ninst✝⁷ : Field K\ninst✝⁶ : Algebra R K\ninst✝⁵ : Algebra S K\ninst✝⁴ : IsScalarTower R S K\nf : AlgHom S F K\nL : Type w\ninst✝³ : Field L\ninst✝² : Algebra R L\ninst✝¹ : Algebra S L\ninst✝ : IsScalarTower R S L\ng : AlgHom S K L\nP : WeierstrassCurve.Affine.Point (WeierstrassCurve.baseChange W F)\n⊢ Eq ((WeierstrassCurve.Affine.Point.map W g) ((WeierstrassCurve.Affine.Point.map W f) P)) ((WeierstrassCurve.Affine.Point.map W (g.comp f)) P)","decl":"lemma map_map (P : W⟮F⟯) : map W g (map W f P) = map W (g.comp f) P := by\n  cases P <;> rfl\n\n"}
{"name":"WeierstrassCurve.Affine.Point.map_injective","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nS : Type s\ninst✝⁹ : CommRing S\ninst✝⁸ : Algebra R S\nF : Type u\ninst✝⁷ : Field F\ninst✝⁶ : Algebra R F\ninst✝⁵ : Algebra S F\ninst✝⁴ : IsScalarTower R S F\nK : Type v\ninst✝³ : Field K\ninst✝² : Algebra R K\ninst✝¹ : Algebra S K\ninst✝ : IsScalarTower R S K\nf : AlgHom S F K\n⊢ Function.Injective ⇑(WeierstrassCurve.Affine.Point.map W f)","decl":"lemma map_injective : Function.Injective <| map W f := by\n  rintro (_ | _) (_ | _) h\n  any_goals contradiction\n  · rfl\n  · simpa only [some.injEq] using ⟨f.injective (some.inj h).left, f.injective (some.inj h).right⟩\n\n"}
{"name":"WeierstrassCurve.Affine.Point.map_baseChange","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type r\ninst✝¹⁰ : CommRing R\nW : WeierstrassCurve.Affine R\nF : Type u\ninst✝⁹ : Field F\ninst✝⁸ : Algebra R F\nK : Type v\ninst✝⁷ : Field K\ninst✝⁶ : Algebra R K\nL : Type w\ninst✝⁵ : Field L\ninst✝⁴ : Algebra R L\ninst✝³ : Algebra F K\ninst✝² : IsScalarTower R F K\ninst✝¹ : Algebra F L\ninst✝ : IsScalarTower R F L\nf : AlgHom F K L\nP : WeierstrassCurve.Affine.Point (WeierstrassCurve.baseChange W F)\n⊢ Eq ((WeierstrassCurve.Affine.Point.map W f) ((WeierstrassCurve.Affine.Point.baseChange W F K) P)) ((WeierstrassCurve.Affine.Point.baseChange W F L) P)","decl":"lemma map_baseChange [Algebra F K] [IsScalarTower R F K] [Algebra F L] [IsScalarTower R F L]\n    (f : K →ₐ[F] L) (P : W⟮F⟯) : map W f (baseChange W F K P) = baseChange W F L P := by\n  have : Subsingleton (F →ₐ[F] L) := inferInstance\n  convert map_map W (Algebra.ofId F K) f P\n\n"}
{"name":"WeierstrassCurve.Affine.nonsingular","module":"Mathlib.AlgebraicGeometry.EllipticCurve.Affine","initialProofState":"R : Type u\ninst✝² : CommRing R\nE : WeierstrassCurve R\ninst✝¹ : E.IsElliptic\ninst✝ : Nontrivial R\nx y : R\nh : E.toAffine.Equation x y\n⊢ E.toAffine.Nonsingular x y","decl":"lemma nonsingular [Nontrivial R] {x y : R} (h : E.toAffine.Equation x y) :\n    E.toAffine.Nonsingular x y :=\n  E.toAffine.nonsingular_of_Δ_ne_zero h <| E.coe_Δ' ▸ E.Δ'.ne_zero\n\n"}
