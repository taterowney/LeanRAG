{"name":"MulSemiringAction.smul_mul","module":"Mathlib.Algebra.Ring.Action.Basic","initialProofState":"M : Type u\nR : Type v\ninst✝¹ : Monoid M\ninst✝ : Semiring R\nself : MulSemiringAction M R\ng : M\nx y : R\n⊢ Eq (HSMul.hSMul g (HMul.hMul x y)) (HMul.hMul (HSMul.hSMul g x) (HSMul.hSMul g y))","decl":"/-- Typeclass for multiplicative actions by monoids on semirings.\n\nThis combines `DistribMulAction` with `MulDistribMulAction`. -/\nclass MulSemiringAction (M : Type u) (R : Type v) [Monoid M] [Semiring R] extends\n  DistribMulAction M R where\n  /-- Multipliying `1` by a scalar gives `1` -/\n  smul_one : ∀ g : M, (g • (1 : R) : R) = 1\n  /-- Scalar multiplication distributes across multiplication -/\n  smul_mul : ∀ (g : M) (x y : R), g • (x * y) = g • x * g • y\n\n"}
{"name":"MulSemiringAction.smul_one","module":"Mathlib.Algebra.Ring.Action.Basic","initialProofState":"M : Type u\nR : Type v\ninst✝¹ : Monoid M\ninst✝ : Semiring R\nself : MulSemiringAction M R\ng : M\n⊢ Eq (HSMul.hSMul g 1) 1","decl":"/-- Typeclass for multiplicative actions by monoids on semirings.\n\nThis combines `DistribMulAction` with `MulDistribMulAction`. -/\nclass MulSemiringAction (M : Type u) (R : Type v) [Monoid M] [Semiring R] extends\n  DistribMulAction M R where\n  /-- Multipliying `1` by a scalar gives `1` -/\n  smul_one : ∀ g : M, (g • (1 : R) : R) = 1\n  /-- Scalar multiplication distributes across multiplication -/\n  smul_mul : ∀ (g : M) (x y : R), g • (x * y) = g • x * g • y\n\n"}
{"name":"MulSemiringAction.toRingHom_apply","module":"Mathlib.Algebra.Ring.Action.Basic","initialProofState":"M : Type u_1\ninst✝² : Monoid M\nR : Type v\ninst✝¹ : Semiring R\ninst✝ : MulSemiringAction M R\nx : M\nx✝ : R\n⊢ Eq ((MulSemiringAction.toRingHom M R x) x✝) (HSMul.hSMul x x✝)","decl":"/-- Each element of the monoid defines a semiring homomorphism. -/\n@[simps!]\ndef MulSemiringAction.toRingHom [MulSemiringAction M R] (x : M) : R →+* R :=\n  { MulDistribMulAction.toMonoidHom R x, DistribMulAction.toAddMonoidHom R x with }\n\n"}
{"name":"toRingHom_injective","module":"Mathlib.Algebra.Ring.Action.Basic","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\nR : Type v\ninst✝² : Semiring R\ninst✝¹ : MulSemiringAction M R\ninst✝ : FaithfulSMul M R\n⊢ Function.Injective (MulSemiringAction.toRingHom M R)","decl":"theorem toRingHom_injective [MulSemiringAction M R] [FaithfulSMul M R] :\n    Function.Injective (MulSemiringAction.toRingHom M R) := fun _ _ h =>\n  eq_of_smul_eq_smul fun r => RingHom.ext_iff.1 h r\n\n"}
{"name":"RingHom.smul_def","module":"Mathlib.Algebra.Ring.Action.Basic","initialProofState":"R : Type v\ninst✝ : Semiring R\nf : RingHom R R\na : R\n⊢ Eq (HSMul.hSMul f a) (f a)","decl":"@[simp]\nprotected theorem RingHom.smul_def (f : R →+* R) (a : R) : f • a = f a :=\n  rfl\n\n"}
{"name":"RingHom.applyFaithfulSMul","module":"Mathlib.Algebra.Ring.Action.Basic","initialProofState":"R : Type v\ninst✝ : Semiring R\n⊢ FaithfulSMul (RingHom R R) R","decl":"/-- `RingHom.applyMulSemiringAction` is faithful. -/\ninstance RingHom.applyFaithfulSMul : FaithfulSMul (R →+* R) R :=\n  ⟨fun {_ _} h => RingHom.ext h⟩\n\n"}
