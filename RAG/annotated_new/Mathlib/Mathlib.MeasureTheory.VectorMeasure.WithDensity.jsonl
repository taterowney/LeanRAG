{"name":"MeasureTheory.withDensity·µ•_apply","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\ns : Set Œ±\nhs : MeasurableSet s\n‚ä¢ Eq (‚Üë(Œº.withDensity·µ• f) s) (MeasureTheory.integral (Œº.restrict s) fun x => f x)","decl":"theorem withDensity·µ•_apply (hf : Integrable f Œº) {s : Set Œ±} (hs : MeasurableSet s) :\n    Œº.withDensity·µ• f s = ‚à´ x in s, f x ‚àÇŒº := by rw [withDensity·µ•, dif_pos hf]; exact dif_pos hs\n\n"}
{"name":"MeasureTheory.withDensity·µ•_zero","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\n‚ä¢ Eq (Œº.withDensity·µ• 0) 0","decl":"@[simp]\ntheorem withDensity·µ•_zero : Œº.withDensity·µ• (0 : Œ± ‚Üí E) = 0 := by\n  ext1 s hs; erw [withDensity·µ•_apply (integrable_zero Œ± E Œº) hs]; simp\n\n"}
{"name":"MeasureTheory.withDensity·µ•_neg","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí E\n‚ä¢ Eq (Œº.withDensity·µ• (Neg.neg f)) (Neg.neg (Œº.withDensity·µ• f))","decl":"@[simp]\ntheorem withDensity·µ•_neg : Œº.withDensity·µ• (-f) = -Œº.withDensity·µ• f := by\n  by_cases hf : Integrable f Œº\n  ¬∑ ext1 i hi\n    rw [VectorMeasure.neg_apply, withDensity·µ•_apply hf hi, ‚Üê integral_neg,\n      withDensity·µ•_apply hf.neg hi]\n    simp only [Pi.neg_apply]\n  ¬∑ rw [withDensity·µ•, withDensity·µ•, dif_neg hf, dif_neg, neg_zero]\n    rwa [integrable_neg_iff]\n\n"}
{"name":"MeasureTheory.withDensity·µ•_neg'","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí E\n‚ä¢ Eq (Œº.withDensity·µ• fun x => Neg.neg (f x)) (Neg.neg (Œº.withDensity·µ• f))","decl":"theorem withDensity·µ•_neg' : (Œº.withDensity·µ• fun x => -f x) = -Œº.withDensity·µ• f :=\n  withDensity·µ•_neg\n\n"}
{"name":"MeasureTheory.withDensity·µ•_add","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf g : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\nhg : MeasureTheory.Integrable g Œº\n‚ä¢ Eq (Œº.withDensity·µ• (HAdd.hAdd f g)) (HAdd.hAdd (Œº.withDensity·µ• f) (Œº.withDensity·µ• g))","decl":"@[simp]\ntheorem withDensity·µ•_add (hf : Integrable f Œº) (hg : Integrable g Œº) :\n    Œº.withDensity·µ• (f + g) = Œº.withDensity·µ• f + Œº.withDensity·µ• g := by\n  ext1 i hi\n  rw [withDensity·µ•_apply (hf.add hg) hi, VectorMeasure.add_apply, withDensity·µ•_apply hf hi,\n    withDensity·µ•_apply hg hi]\n  simp_rw [Pi.add_apply]\n  rw [integral_add] <;> rw [‚Üê integrableOn_univ]\n  ¬∑ exact hf.integrableOn.restrict MeasurableSet.univ\n  ¬∑ exact hg.integrableOn.restrict MeasurableSet.univ\n\n"}
{"name":"MeasureTheory.withDensity·µ•_add'","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf g : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\nhg : MeasureTheory.Integrable g Œº\n‚ä¢ Eq (Œº.withDensity·µ• fun x => HAdd.hAdd (f x) (g x)) (HAdd.hAdd (Œº.withDensity·µ• f) (Œº.withDensity·µ• g))","decl":"theorem withDensity·µ•_add' (hf : Integrable f Œº) (hg : Integrable g Œº) :\n    (Œº.withDensity·µ• fun x => f x + g x) = Œº.withDensity·µ• f + Œº.withDensity·µ• g :=\n  withDensity·µ•_add hf hg\n\n"}
{"name":"MeasureTheory.withDensity·µ•_sub","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf g : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\nhg : MeasureTheory.Integrable g Œº\n‚ä¢ Eq (Œº.withDensity·µ• (HSub.hSub f g)) (HSub.hSub (Œº.withDensity·µ• f) (Œº.withDensity·µ• g))","decl":"@[simp]\ntheorem withDensity·µ•_sub (hf : Integrable f Œº) (hg : Integrable g Œº) :\n    Œº.withDensity·µ• (f - g) = Œº.withDensity·µ• f - Œº.withDensity·µ• g := by\n  rw [sub_eq_add_neg, sub_eq_add_neg, withDensity·µ•_add hf hg.neg, withDensity·µ•_neg]\n\n"}
{"name":"MeasureTheory.withDensity·µ•_sub'","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf g : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\nhg : MeasureTheory.Integrable g Œº\n‚ä¢ Eq (Œº.withDensity·µ• fun x => HSub.hSub (f x) (g x)) (HSub.hSub (Œº.withDensity·µ• f) (Œº.withDensity·µ• g))","decl":"theorem withDensity·µ•_sub' (hf : Integrable f Œº) (hg : Integrable g Œº) :\n    (Œº.withDensity·µ• fun x => f x - g x) = Œº.withDensity·µ• f - Œº.withDensity·µ• g :=\n  withDensity·µ•_sub hf hg\n\n"}
{"name":"MeasureTheory.withDensity·µ•_smul","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù‚Å¥ : NormedAddCommGroup E\ninst‚úù¬≥ : NormedSpace Real E\nùïú : Type u_3\ninst‚úù¬≤ : NontriviallyNormedField ùïú\ninst‚úù¬π : NormedSpace ùïú E\ninst‚úù : SMulCommClass Real ùïú E\nf : Œ± ‚Üí E\nr : ùïú\n‚ä¢ Eq (Œº.withDensity·µ• (HSMul.hSMul r f)) (HSMul.hSMul r (Œº.withDensity·µ• f))","decl":"@[simp]\ntheorem withDensity·µ•_smul {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E]\n    [SMulCommClass ‚Ñù ùïú E] (f : Œ± ‚Üí E) (r : ùïú) : Œº.withDensity·µ• (r ‚Ä¢ f) = r ‚Ä¢ Œº.withDensity·µ• f := by\n  by_cases hf : Integrable f Œº\n  ¬∑ ext1 i hi\n    rw [withDensity·µ•_apply (hf.smul r) hi, VectorMeasure.smul_apply, withDensity·µ•_apply hf hi, ‚Üê\n      integral_smul r f]\n    simp only [Pi.smul_apply]\n  ¬∑ by_cases hr : r = 0\n    ¬∑ rw [hr, zero_smul, zero_smul, withDensity·µ•_zero]\n    ¬∑ rw [withDensity·µ•, withDensity·µ•, dif_neg hf, dif_neg, smul_zero]\n      rwa [integrable_smul_iff hr f]\n\n"}
{"name":"MeasureTheory.withDensity·µ•_smul'","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù‚Å¥ : NormedAddCommGroup E\ninst‚úù¬≥ : NormedSpace Real E\nùïú : Type u_3\ninst‚úù¬≤ : NontriviallyNormedField ùïú\ninst‚úù¬π : NormedSpace ùïú E\ninst‚úù : SMulCommClass Real ùïú E\nf : Œ± ‚Üí E\nr : ùïú\n‚ä¢ Eq (Œº.withDensity·µ• fun x => HSMul.hSMul r (f x)) (HSMul.hSMul r (Œº.withDensity·µ• f))","decl":"theorem withDensity·µ•_smul' {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú E]\n    [SMulCommClass ‚Ñù ùïú E] (f : Œ± ‚Üí E) (r : ùïú) :\n    (Œº.withDensity·µ• fun x => r ‚Ä¢ f x) = r ‚Ä¢ Œº.withDensity·µ• f :=\n  withDensity·µ•_smul f r\n\n"}
{"name":"MeasureTheory.withDensity·µ•_smul_eq_withDensity·µ•_withDensity","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí NNReal\ng : Œ± ‚Üí E\nhf : AEMeasurable f Œº\nhfg : MeasureTheory.Integrable (HSMul.hSMul f g) Œº\n‚ä¢ Eq (Œº.withDensity·µ• (HSMul.hSMul f g)) ((Œº.withDensity fun x => ‚Üë(f x)).withDensity·µ• g)","decl":"theorem withDensity·µ•_smul_eq_withDensity·µ•_withDensity {f : Œ± ‚Üí ‚Ñù‚â•0} {g : Œ± ‚Üí E}\n    (hf : AEMeasurable f Œº) (hfg : Integrable (f ‚Ä¢ g) Œº) :\n    Œº.withDensity·µ• (f ‚Ä¢ g) = (Œº.withDensity (fun x ‚Ü¶ f x)).withDensity·µ• g := by\n  ext s hs\n  rw [withDensity·µ•_apply hfg hs,\n    withDensity·µ•_apply ((integrable_withDensity_iff_integrable_smul‚ÇÄ hf).mpr hfg) hs,\n    setIntegral_withDensity_eq_setIntegral_smul‚ÇÄ hf.restrict _ hs]\n  simp only [Pi.smul_apply']\n\n"}
{"name":"MeasureTheory.withDensity·µ•_smul_eq_withDensity·µ•_withDensity'","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí ENNReal\ng : Œ± ‚Üí E\nhf : AEMeasurable f Œº\nhflt : Filter.Eventually (fun x => LT.lt (f x) Top.top) (MeasureTheory.ae Œº)\nhfg : MeasureTheory.Integrable (fun x => HSMul.hSMul (f x).toReal (g x)) Œº\n‚ä¢ Eq (Œº.withDensity·µ• fun x => HSMul.hSMul (f x).toReal (g x)) ((Œº.withDensity f).withDensity·µ• g)","decl":"theorem withDensity·µ•_smul_eq_withDensity·µ•_withDensity' {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} {g : Œ± ‚Üí E}\n    (hf : AEMeasurable f Œº) (hflt : ‚àÄ·µê x ‚àÇŒº, f x < ‚àû)\n    (hfg : Integrable (fun x ‚Ü¶ (f x).toReal ‚Ä¢ g x) Œº) :\n    Œº.withDensity·µ• (fun x ‚Ü¶ (f x).toReal ‚Ä¢ g x) = (Œº.withDensity f).withDensity·µ• g := by\n  rw [‚Üê withDensity_congr_ae (coe_toNNReal_ae_eq hflt),\n    ‚Üê withDensity·µ•_smul_eq_withDensity·µ•_withDensity hf.ennreal_toNNReal hfg]\n  apply congr_arg\n  ext\n  simp [NNReal.smul_def, ENNReal.coe_toNNReal_eq_toReal]\n\n"}
{"name":"MeasureTheory.Measure.withDensity·µ•_absolutelyContinuous","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nf : Œ± ‚Üí Real\n‚ä¢ (Œº.withDensity·µ• f).AbsolutelyContinuous Œº.toENNRealVectorMeasure","decl":"theorem Measure.withDensity·µ•_absolutelyContinuous (Œº : Measure Œ±) (f : Œ± ‚Üí ‚Ñù) :\n    Œº.withDensity·µ• f ‚â™·µ• Œº.toENNRealVectorMeasure := by\n  by_cases hf : Integrable f Œº\n  ¬∑ refine VectorMeasure.AbsolutelyContinuous.mk fun i hi‚ÇÅ hi‚ÇÇ => ?_\n    rw [toENNRealVectorMeasure_apply_measurable hi‚ÇÅ] at hi‚ÇÇ\n    rw [withDensity·µ•_apply hf hi‚ÇÅ, Measure.restrict_zero_set hi‚ÇÇ, integral_zero_measure]\n  ¬∑ rw [withDensity·µ•, dif_neg hf]\n    exact VectorMeasure.AbsolutelyContinuous.zero _\n\n"}
{"name":"MeasureTheory.Integrable.ae_eq_of_withDensity·µ•_eq","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : CompleteSpace E\nf g : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\nhg : MeasureTheory.Integrable g Œº\nhfg : Eq (Œº.withDensity·µ• f) (Œº.withDensity·µ• g)\n‚ä¢ (MeasureTheory.ae Œº).EventuallyEq f g","decl":"/-- Having the same density implies the underlying functions are equal almost everywhere. -/\ntheorem Integrable.ae_eq_of_withDensity·µ•_eq [CompleteSpace E] {f g : Œ± ‚Üí E} (hf : Integrable f Œº)\n    (hg : Integrable g Œº) (hfg : Œº.withDensity·µ• f = Œº.withDensity·µ• g) : f =·µê[Œº] g := by\n  refine hf.ae_eq_of_forall_setIntegral_eq f g hg fun i hi _ => ?_\n  rw [‚Üê withDensity·µ•_apply hf hi, hfg, withDensity·µ•_apply hg hi]\n\n"}
{"name":"MeasureTheory.WithDensity·µ•Eq.congr_ae","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf g : Œ± ‚Üí E\nh : (MeasureTheory.ae Œº).EventuallyEq f g\n‚ä¢ Eq (Œº.withDensity·µ• f) (Œº.withDensity·µ• g)","decl":"theorem WithDensity·µ•Eq.congr_ae {f g : Œ± ‚Üí E} (h : f =·µê[Œº] g) :\n    Œº.withDensity·µ• f = Œº.withDensity·µ• g := by\n  by_cases hf : Integrable f Œº\n  ¬∑ ext i hi\n    rw [withDensity·µ•_apply hf hi, withDensity·µ•_apply (hf.congr h) hi]\n    exact integral_congr_ae (ae_restrict_of_ae h)\n  ¬∑ have hg : ¬¨Integrable g Œº := by intro hg; exact hf (hg.congr h.symm)\n    rw [withDensity·µ•, withDensity·µ•, dif_neg hf, dif_neg hg]\n\n"}
{"name":"MeasureTheory.Integrable.withDensity·µ•_eq_iff","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nE : Type u_2\ninst‚úù¬≤ : NormedAddCommGroup E\ninst‚úù¬π : NormedSpace Real E\ninst‚úù : CompleteSpace E\nf g : Œ± ‚Üí E\nhf : MeasureTheory.Integrable f Œº\nhg : MeasureTheory.Integrable g Œº\n‚ä¢ Iff (Eq (Œº.withDensity·µ• f) (Œº.withDensity·µ• g)) ((MeasureTheory.ae Œº).EventuallyEq f g)","decl":"theorem Integrable.withDensity·µ•_eq_iff [CompleteSpace E]\n    {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº) :\n    Œº.withDensity·µ• f = Œº.withDensity·µ• g ‚Üî f =·µê[Œº] g :=\n  ‚ü®fun hfg => hf.ae_eq_of_withDensity·µ•_eq hg hfg, fun h => WithDensity·µ•Eq.congr_ae h‚ü©\n\n"}
{"name":"MeasureTheory.withDensity·µ•_toReal","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nf : Œ± ‚Üí ENNReal\nhfm : AEMeasurable f Œº\nhf : Ne (MeasureTheory.lintegral Œº fun x => f x) Top.top\n‚ä¢ Eq (Œº.withDensity·µ• fun x => (f x).toReal) (Œº.withDensity f).toSignedMeasure","decl":"theorem withDensity·µ•_toReal {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hfm : AEMeasurable f Œº) (hf : (‚à´‚Åª x, f x ‚àÇŒº) ‚â† ‚àû) :\n    (Œº.withDensity·µ• fun x => (f x).toReal) =\n      @toSignedMeasure Œ± _ (Œº.withDensity f) (isFiniteMeasure_withDensity hf) := by\n  have hfi := integrable_toReal_of_lintegral_ne_top hfm hf\n  haveI := isFiniteMeasure_withDensity hf\n  ext i hi\n  rw [withDensity·µ•_apply hfi hi, toSignedMeasure_apply_measurable hi, withDensity_apply _ hi,\n    integral_toReal hfm.restrict]\n  refine ae_lt_top' hfm.restrict (ne_top_of_le_ne_top hf ?_)\n  conv_rhs => rw [‚Üê setLIntegral_univ]\n  exact lintegral_mono_set (Set.subset_univ _)\n\n"}
{"name":"MeasureTheory.withDensity·µ•_eq_withDensity_pos_part_sub_withDensity_neg_part","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nf : Œ± ‚Üí Real\nhfi : MeasureTheory.Integrable f Œº\n‚ä¢ Eq (Œº.withDensity·µ• f) (HSub.hSub (Œº.withDensity fun x => ENNReal.ofReal (f x)).toSignedMeasure (Œº.withDensity fun x => ENNReal.ofReal (Neg.neg (f x))).toSignedMeasure)","decl":"theorem withDensity·µ•_eq_withDensity_pos_part_sub_withDensity_neg_part {f : Œ± ‚Üí ‚Ñù}\n    (hfi : Integrable f Œº) :\n    Œº.withDensity·µ• f =\n      @toSignedMeasure Œ± _ (Œº.withDensity fun x => ENNReal.ofReal <| f x)\n          (isFiniteMeasure_withDensity_ofReal hfi.2) -\n        @toSignedMeasure Œ± _ (Œº.withDensity fun x => ENNReal.ofReal <| -f x)\n          (isFiniteMeasure_withDensity_ofReal hfi.neg.2) := by\n  haveI := isFiniteMeasure_withDensity_ofReal hfi.2\n  haveI := isFiniteMeasure_withDensity_ofReal hfi.neg.2\n  ext i hi\n  rw [withDensity·µ•_apply hfi hi,\n    integral_eq_lintegral_pos_part_sub_lintegral_neg_part hfi.integrableOn,\n    VectorMeasure.sub_apply, toSignedMeasure_apply_measurable hi,\n    toSignedMeasure_apply_measurable hi, withDensity_apply _ hi, withDensity_apply _ hi]\n\n"}
{"name":"MeasureTheory.Integrable.withDensity·µ•_trim_eq_integral","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nm m0 : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nhm : LE.le m m0\nf : Œ± ‚Üí Real\nhf : MeasureTheory.Integrable f Œº\ni : Set Œ±\nhi : MeasurableSet i\n‚ä¢ Eq (‚Üë((Œº.withDensity·µ• f).trim hm) i) (MeasureTheory.integral (Œº.restrict i) fun x => f x)","decl":"theorem Integrable.withDensity·µ•_trim_eq_integral {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}\n    (hm : m ‚â§ m0) {f : Œ± ‚Üí ‚Ñù} (hf : Integrable f Œº) {i : Set Œ±} (hi : MeasurableSet[m] i) :\n    (Œº.withDensity·µ• f).trim hm i = ‚à´ x in i, f x ‚àÇŒº := by\n  rw [VectorMeasure.trim_measurableSet_eq hm hi, withDensity·µ•_apply hf (hm _ hi)]\n\n"}
{"name":"MeasureTheory.Integrable.withDensity·µ•_trim_absolutelyContinuous","module":"Mathlib.MeasureTheory.VectorMeasure.WithDensity","initialProofState":"Œ± : Type u_1\nE : Type u_2\ninst‚úù¬π : NormedAddCommGroup E\ninst‚úù : NormedSpace Real E\nf : Œ± ‚Üí E\nm m0 : MeasurableSpace Œ±\nŒº : MeasureTheory.Measure Œ±\nhm : LE.le m m0\nhfi : MeasureTheory.Integrable f Œº\n‚ä¢ ((Œº.withDensity·µ• f).trim hm).AbsolutelyContinuous (Œº.trim hm).toENNRealVectorMeasure","decl":"theorem Integrable.withDensity·µ•_trim_absolutelyContinuous {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}\n    (hm : m ‚â§ m0) (hfi : Integrable f Œº) :\n    (Œº.withDensity·µ• f).trim hm ‚â™·µ• (Œº.trim hm).toENNRealVectorMeasure := by\n  refine VectorMeasure.AbsolutelyContinuous.mk fun j hj‚ÇÅ hj‚ÇÇ => ?_\n  rw [Measure.toENNRealVectorMeasure_apply_measurable hj‚ÇÅ, trim_measurableSet_eq hm hj‚ÇÅ] at hj‚ÇÇ\n  rw [VectorMeasure.trim_measurableSet_eq hm hj‚ÇÅ, withDensity·µ•_apply hfi (hm _ hj‚ÇÅ)]\n  simp only [Measure.restrict_eq_zero.mpr hj‚ÇÇ, integral_zero_measure]\n\n"}
