{"name":"NeZero.of_map","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : Zero α\ninst✝² : Zero β\ninst✝¹ : FunLike F α β\ninst✝ : ZeroHomClass F α β\na : α\nf : F\nneZero : NeZero (f a)\n⊢ NeZero a","decl":"lemma of_map (f : F) [neZero : NeZero (f a)] : NeZero a :=\n  ⟨fun h ↦ ne (f a) <| by rw [h]; exact ZeroHomClass.map_zero f⟩\n\n"}
{"name":"NeZero.of_injective","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁴ : Zero α\ninst✝³ : Zero β\ninst✝² : FunLike F α β\ninst✝¹ : ZeroHomClass F α β\na : α\nf : F\nhf : Function.Injective ⇑f\ninst✝ : NeZero a\n⊢ NeZero (f a)","decl":"lemma of_injective {f : F} (hf : Injective f) [NeZero a] : NeZero (f a) :=\n  ⟨by rw [← ZeroHomClass.map_zero f]; exact hf.ne NeZero.out⟩\n\n"}
{"name":"MonoidWithZeroHomClass.toZeroHomClass","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_7\nα : outParam (Type u_8)\nβ : outParam (Type u_9)\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : FunLike F α β\nself : MonoidWithZeroHomClass F α β\n⊢ ZeroHomClass F α β","decl":"/-- `MonoidWithZeroHomClass F α β` states that `F` is a type of\n`MonoidWithZero`-preserving homomorphisms.\n\nYou should also extend this typeclass when you extend `MonoidWithZeroHom`. -/\nclass MonoidWithZeroHomClass (F : Type*) (α β : outParam Type*) [MulZeroOneClass α]\n  [MulZeroOneClass β] [FunLike F α β] extends MonoidHomClass F α β, ZeroHomClass F α β : Prop\n\n"}
{"name":"MonoidWithZeroHomClass.toMonoidHomClass","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_7\nα : outParam (Type u_8)\nβ : outParam (Type u_9)\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : FunLike F α β\nself : MonoidWithZeroHomClass F α β\n⊢ MonoidHomClass F α β","decl":"/-- `MonoidWithZeroHomClass F α β` states that `F` is a type of\n`MonoidWithZero`-preserving homomorphisms.\n\nYou should also extend this typeclass when you extend `MonoidWithZeroHom`. -/\nclass MonoidWithZeroHomClass (F : Type*) (α β : outParam Type*) [MulZeroOneClass α]\n  [MulZeroOneClass β] [FunLike F α β] extends MonoidHomClass F α β, ZeroHomClass F α β : Prop\n\n"}
{"name":"MonoidWithZeroHom.mk.injEq","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\ntoZeroHom✝ : ZeroHom α β\nmap_one'✝ : Eq (toZeroHom✝.toFun 1) 1\nmap_mul'✝ : ∀ (x y : α), Eq (toZeroHom✝.toFun (HMul.hMul x y)) (HMul.hMul (toZeroHom✝.toFun x) (toZeroHom✝.toFun y))\ntoZeroHom : ZeroHom α β\nmap_one' : Eq (toZeroHom.toFun 1) 1\nmap_mul' : ∀ (x y : α), Eq (toZeroHom.toFun (HMul.hMul x y)) (HMul.hMul (toZeroHom.toFun x) (toZeroHom.toFun y))\n⊢ Eq (Eq { toZeroHom := toZeroHom✝, map_one' := map_one'✝, map_mul' := map_mul'✝ } { toZeroHom := toZeroHom, map_one' := map_one', map_mul' := map_mul' }) (Eq toZeroHom✝ toZeroHom)","decl":"/-- `α →*₀ β` is the type of functions `α → β` that preserve\nthe `MonoidWithZero` structure.\n\n`MonoidWithZeroHom` is also used for group homomorphisms.\n\nWhen possible, instead of parametrizing results over `(f : α →*₀ β)`,\nyou should parametrize over `(F : Type*) [MonoidWithZeroHomClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `MonoidWithZeroHomClass`. -/\nstructure MonoidWithZeroHom (α β : Type*) [MulZeroOneClass α] [MulZeroOneClass β]\n  extends ZeroHom α β, MonoidHom α β\n\n"}
{"name":"MonoidWithZeroHom.mk.inj","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\ntoZeroHom✝ : ZeroHom α β\nmap_one'✝ : Eq (toZeroHom✝.toFun 1) 1\nmap_mul'✝ : ∀ (x y : α), Eq (toZeroHom✝.toFun (HMul.hMul x y)) (HMul.hMul (toZeroHom✝.toFun x) (toZeroHom✝.toFun y))\ntoZeroHom : ZeroHom α β\nmap_one' : Eq (toZeroHom.toFun 1) 1\nmap_mul' : ∀ (x y : α), Eq (toZeroHom.toFun (HMul.hMul x y)) (HMul.hMul (toZeroHom.toFun x) (toZeroHom.toFun y))\nx✝ : Eq { toZeroHom := toZeroHom✝, map_one' := map_one'✝, map_mul' := map_mul'✝ } { toZeroHom := toZeroHom, map_one' := map_one', map_mul' := map_mul' }\n⊢ Eq toZeroHom✝ toZeroHom","decl":"/-- `α →*₀ β` is the type of functions `α → β` that preserve\nthe `MonoidWithZero` structure.\n\n`MonoidWithZeroHom` is also used for group homomorphisms.\n\nWhen possible, instead of parametrizing results over `(f : α →*₀ β)`,\nyou should parametrize over `(F : Type*) [MonoidWithZeroHomClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `MonoidWithZeroHomClass`. -/\nstructure MonoidWithZeroHom (α β : Type*) [MulZeroOneClass α] [MulZeroOneClass β]\n  extends ZeroHom α β, MonoidHom α β\n\n"}
{"name":"MonoidWithZeroHom.mk.sizeOf_spec","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝³ : MulZeroOneClass α\ninst✝² : MulZeroOneClass β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoZeroHom : ZeroHom α β\nmap_one' : Eq (toZeroHom.toFun 1) 1\nmap_mul' : ∀ (x y : α), Eq (toZeroHom.toFun (HMul.hMul x y)) (HMul.hMul (toZeroHom.toFun x) (toZeroHom.toFun y))\n⊢ Eq (SizeOf.sizeOf { toZeroHom := toZeroHom, map_one' := map_one', map_mul' := map_mul' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toZeroHom)) (SizeOf.sizeOf map_one'))","decl":"/-- `α →*₀ β` is the type of functions `α → β` that preserve\nthe `MonoidWithZero` structure.\n\n`MonoidWithZeroHom` is also used for group homomorphisms.\n\nWhen possible, instead of parametrizing results over `(f : α →*₀ β)`,\nyou should parametrize over `(F : Type*) [MonoidWithZeroHomClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `MonoidWithZeroHomClass`. -/\nstructure MonoidWithZeroHom (α β : Type*) [MulZeroOneClass α] [MulZeroOneClass β]\n  extends ZeroHom α β, MonoidHom α β\n\n"}
{"name":"MonoidWithZeroHom.map_mul'","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nself : MonoidWithZeroHom α β\nx y : α\n⊢ Eq (self.toFun (HMul.hMul x y)) (HMul.hMul (self.toFun x) (self.toFun y))","decl":"/-- `α →*₀ β` is the type of functions `α → β` that preserve\nthe `MonoidWithZero` structure.\n\n`MonoidWithZeroHom` is also used for group homomorphisms.\n\nWhen possible, instead of parametrizing results over `(f : α →*₀ β)`,\nyou should parametrize over `(F : Type*) [MonoidWithZeroHomClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `MonoidWithZeroHomClass`. -/\nstructure MonoidWithZeroHom (α β : Type*) [MulZeroOneClass α] [MulZeroOneClass β]\n  extends ZeroHom α β, MonoidHom α β\n\n"}
{"name":"MonoidWithZeroHom.map_one'","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_7\nβ : Type u_8\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nself : MonoidWithZeroHom α β\n⊢ Eq (self.toFun 1) 1","decl":"/-- `α →*₀ β` is the type of functions `α → β` that preserve\nthe `MonoidWithZero` structure.\n\n`MonoidWithZeroHom` is also used for group homomorphisms.\n\nWhen possible, instead of parametrizing results over `(f : α →*₀ β)`,\nyou should parametrize over `(F : Type*) [MonoidWithZeroHomClass F α β] (f : F)`.\n\nWhen you extend this structure, make sure to extend `MonoidWithZeroHomClass`. -/\nstructure MonoidWithZeroHom (α β : Type*) [MulZeroOneClass α] [MulZeroOneClass β]\n  extends ZeroHom α β, MonoidHom α β\n\n"}
{"name":"MonoidWithZeroHom.monoidWithZeroHomClass","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\n⊢ MonoidWithZeroHomClass (MonoidWithZeroHom α β) α β","decl":"instance monoidWithZeroHomClass : MonoidWithZeroHomClass (α →*₀ β) α β where\n  map_mul := MonoidWithZeroHom.map_mul'\n  map_one := MonoidWithZeroHom.map_one'\n  map_zero f := f.map_zero'\n\n"}
{"name":"MonoidWithZeroHom.instSubsingleton","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : Subsingleton α\n⊢ Subsingleton (MonoidWithZeroHom α β)","decl":"instance [Subsingleton α] : Subsingleton (α →*₀ β) := .of_oneHomClass\n\n"}
{"name":"MonoidWithZeroHom.coe_coe","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : MulZeroOneClass α\ninst✝² : MulZeroOneClass β\ninst✝¹ : FunLike F α β\ninst✝ : MonoidWithZeroHomClass F α β\nf : F\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp] lemma coe_coe [MonoidWithZeroHomClass F α β] (f : F) : ((f : α →*₀ β) : α → β) = f := rfl\n\n-- Completely uninteresting lemmas about coercion to function, that all homs need\n"}
{"name":"MonoidWithZeroHom.coe_mk","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : ZeroHom α β\nh1 : Eq (f.toFun 1) 1\nhmul : ∀ (x y : α), Eq (f.toFun (HMul.hMul x y)) (HMul.hMul (f.toFun x) (f.toFun y))\n⊢ Eq ⇑{ toZeroHom := f, map_one' := h1, map_mul' := hmul } ⇑f","decl":"@[simp] lemma coe_mk (f h1 hmul) : (mk f h1 hmul : α → β) = (f : α → β) := rfl\n\n"}
{"name":"MonoidWithZeroHom.toZeroHom_coe","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\n⊢ Eq ⇑↑f ⇑f","decl":"@[simp] lemma toZeroHom_coe (f : α →*₀ β) : (f.toZeroHom : α → β) = f := rfl\n\n"}
{"name":"MonoidWithZeroHom.toMonoidHom_coe","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\n⊢ Eq (↑↑f).toFun ⇑f","decl":"lemma toMonoidHom_coe (f : α →*₀ β) : f.toMonoidHom.toFun = f := rfl\n\n"}
{"name":"MonoidWithZeroHom.ext","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf g : MonoidWithZeroHom α β\nh : ∀ (x : α), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext] lemma ext ⦃f g : α →*₀ β⦄ (h : ∀ x, f x = g x) : f = g := DFunLike.ext _ _ h\n\n"}
{"name":"MonoidWithZeroHom.ext_iff","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf g : MonoidWithZeroHom α β\n⊢ Iff (Eq f g) (∀ (x : α), Eq (f x) (g x))","decl":"@[ext] lemma ext ⦃f g : α →*₀ β⦄ (h : ∀ x, f x = g x) : f = g := DFunLike.ext _ _ h\n\n"}
{"name":"MonoidWithZeroHom.mk_coe","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\nh1 : Eq ((↑f).toFun 1) 1\nhmul : ∀ (x y : α), Eq ((↑f).toFun (HMul.hMul x y)) (HMul.hMul ((↑f).toFun x) ((↑f).toFun y))\n⊢ Eq { toZeroHom := ↑f, map_one' := h1, map_mul' := hmul } f","decl":"@[simp] lemma mk_coe (f : α →*₀ β) (h1 hmul) : mk f h1 hmul = f := ext fun _ ↦ rfl\n\n"}
{"name":"MonoidWithZeroHom.coe_copy","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\nlemma coe_copy (f : α →*₀ β) (f' : α → β) (h) : (f.copy f' h) = f' := rfl\n\n"}
{"name":"MonoidWithZeroHom.copy_eq","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) ↑f","decl":"lemma copy_eq (f : α →*₀ β) (f' : α → β) (h) : f.copy f' h = f := DFunLike.ext' h\n\n"}
{"name":"MonoidWithZeroHom.map_one","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\n⊢ Eq (f 1) 1","decl":"protected lemma map_one (f : α →*₀ β) : f 1 = 1 := f.map_one'\n\n"}
{"name":"MonoidWithZeroHom.map_zero","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\n⊢ Eq (f 0) 0","decl":"protected lemma map_zero (f : α →*₀ β) : f 0 = 0 := f.map_zero'\n\n"}
{"name":"MonoidWithZeroHom.map_mul","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\na b : α\n⊢ Eq (f (HMul.hMul a b)) (HMul.hMul (f a) (f b))","decl":"protected lemma map_mul (f : α →*₀ β) (a b : α) : f (a * b) = f a * f b := f.map_mul' a b\n\n"}
{"name":"MonoidWithZeroHom.id_apply","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_7\ninst✝ : MulZeroOneClass α\nx : α\n⊢ Eq ((MonoidWithZeroHom.id α) x) x","decl":"/-- The identity map from a `MonoidWithZero` to itself. -/\n@[simps]\ndef id (α : Type*) [MulZeroOneClass α] : α →*₀ α where\n  toFun x := x\n  map_zero' := rfl\n  map_one' := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"MonoidWithZeroHom.coe_comp","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : MulZeroOneClass γ\ng : MonoidWithZeroHom β γ\nf : MonoidWithZeroHom α β\n⊢ Eq (⇑(g.comp f)) (Function.comp ⇑g ⇑f)","decl":"@[simp] lemma coe_comp (g : β →*₀ γ) (f : α →*₀ β) : ↑(g.comp f) = g ∘ f := rfl\n\n"}
{"name":"MonoidWithZeroHom.comp_apply","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : MulZeroOneClass γ\ng : MonoidWithZeroHom β γ\nf : MonoidWithZeroHom α β\nx : α\n⊢ Eq ((g.comp f) x) (g (f x))","decl":"lemma comp_apply (g : β →*₀ γ) (f : α →*₀ β) (x : α) : g.comp f x = g (f x) := rfl\n\n"}
{"name":"MonoidWithZeroHom.comp_assoc","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : MulZeroOneClass α\ninst✝² : MulZeroOneClass β\ninst✝¹ : MulZeroOneClass γ\ninst✝ : MulZeroOneClass δ\nf : MonoidWithZeroHom α β\ng : MonoidWithZeroHom β γ\nh : MonoidWithZeroHom γ δ\n⊢ Eq ((h.comp g).comp f) (h.comp (g.comp f))","decl":"lemma comp_assoc (f : α →*₀ β) (g : β →*₀ γ) (h : γ →*₀ δ) :\n    (h.comp g).comp f = h.comp (g.comp f) := rfl\n\n"}
{"name":"MonoidWithZeroHom.cancel_right","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : MulZeroOneClass γ\ng₁ g₂ : MonoidWithZeroHom β γ\nf : MonoidWithZeroHom α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"lemma cancel_right {g₁ g₂ : β →*₀ γ} {f : α →*₀ β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h ↦ ext <| hf.forall.2 (DFunLike.ext_iff.1 h), fun h ↦ h ▸ rfl⟩\n\n"}
{"name":"MonoidWithZeroHom.cancel_left","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : MulZeroOneClass γ\ng : MonoidWithZeroHom β γ\nf₁ f₂ : MonoidWithZeroHom α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"lemma cancel_left {g : β →*₀ γ} {f₁ f₂ : α →*₀ β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h ↦ ext fun x ↦ hg <| by rw [← comp_apply, h,\n    comp_apply], fun h ↦ h ▸ rfl⟩\n\n"}
{"name":"MonoidWithZeroHom.toMonoidHom_injective","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\n⊢ Function.Injective MonoidWithZeroHom.toMonoidHom","decl":"lemma toMonoidHom_injective : Injective (toMonoidHom : (α →*₀ β) → α →* β) :=\n  Injective.of_comp (f := DFunLike.coe) DFunLike.coe_injective\n\n"}
{"name":"MonoidWithZeroHom.toZeroHom_injective","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\n⊢ Function.Injective MonoidWithZeroHom.toZeroHom","decl":"lemma toZeroHom_injective : Injective (toZeroHom : (α →*₀ β) → ZeroHom α β) :=\n  Injective.of_comp (f := DFunLike.coe) DFunLike.coe_injective\n\n"}
{"name":"MonoidWithZeroHom.comp_id","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\n⊢ Eq (f.comp (MonoidWithZeroHom.id α)) f","decl":"@[simp] lemma comp_id (f : α →*₀ β) : f.comp (id α) = f := ext fun _ ↦ rfl\n\n"}
{"name":"MonoidWithZeroHom.id_comp","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : MulZeroOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom α β\n⊢ Eq ((MonoidWithZeroHom.id β).comp f) f","decl":"@[simp] lemma id_comp (f : α →*₀ β) : (id β).comp f = f := ext fun _ ↦ rfl\n\n-- Unlike the other homs, `MonoidWithZeroHom` does not have a `1` or `0`\n"}
{"name":"coe_powMonoidWithZeroHom","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"M₀ : Type u_6\ninst✝ : CommMonoidWithZero M₀\nn : Nat\nhn : Ne n 0\n⊢ Eq ⇑(powMonoidWithZeroHom hn) fun x => HPow.hPow x n","decl":"@[simp] lemma coe_powMonoidWithZeroHom : (powMonoidWithZeroHom hn : M₀ → M₀) = fun x ↦ x ^ n := rfl\n\n"}
{"name":"powMonoidWithZeroHom_apply","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"M₀ : Type u_6\ninst✝ : CommMonoidWithZero M₀\nn : Nat\nhn : Ne n 0\na : M₀\n⊢ Eq ((powMonoidWithZeroHom hn) a) (HPow.hPow a n)","decl":"@[simp] lemma powMonoidWithZeroHom_apply (a : M₀) : powMonoidWithZeroHom hn a = a ^ n := rfl\n\n"}
{"name":"MulEquivClass.toZeroHomClass","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝³ : EquivLike F α β\ninst✝² : MulZeroClass α\ninst✝¹ : MulZeroClass β\ninst✝ : MulEquivClass F α β\n⊢ ZeroHomClass F α β","decl":"instance (priority := 100) toZeroHomClass [MulZeroClass α] [MulZeroClass β] [MulEquivClass F α β] :\n    ZeroHomClass F α β where\n  map_zero f :=\n    calc\n      f 0 = f 0 * f (EquivLike.inv f 0) := by rw [← map_mul, zero_mul]\n        _ = 0 := by simp\n\n-- See note [lower instance priority]\n"}
{"name":"MulEquivClass.toMonoidWithZeroHomClass","module":"Mathlib.Algebra.GroupWithZero.Hom","initialProofState":"F : Type u_7\nα : Type u_8\nβ : Type u_9\ninst✝³ : EquivLike F α β\ninst✝² : MulZeroOneClass α\ninst✝¹ : MulZeroOneClass β\ninst✝ : MulEquivClass F α β\n⊢ MonoidWithZeroHomClass F α β","decl":"instance (priority := 100) toMonoidWithZeroHomClass\n    [MulZeroOneClass α] [MulZeroOneClass β] [MulEquivClass F α β] :\n    MonoidWithZeroHomClass F α β :=\n  { MulEquivClass.instMonoidHomClass F, MulEquivClass.toZeroHomClass with }\n\n"}
