{"name":"ModelWithCorners.hasMFDerivAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nx : H\n⊢ HasMFDerivAt I (modelWithCornersSelf 𝕜 E) (↑I) x (ContinuousLinearMap.id 𝕜 (TangentSpace I x))","decl":"protected theorem hasMFDerivAt {x} : HasMFDerivAt I 𝓘(𝕜, E) I x (ContinuousLinearMap.id _ _) :=\n  ⟨I.continuousAt, (hasFDerivWithinAt_id _ _).congr' I.rightInvOn (mem_range_self _)⟩\n\n"}
{"name":"ModelWithCorners.hasMFDerivWithinAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\ns : Set H\nx : H\n⊢ HasMFDerivWithinAt I (modelWithCornersSelf 𝕜 E) (↑I) s x (ContinuousLinearMap.id 𝕜 (TangentSpace I x))","decl":"protected theorem hasMFDerivWithinAt {s x} :\n    HasMFDerivWithinAt I 𝓘(𝕜, E) I s x (ContinuousLinearMap.id _ _) :=\n  I.hasMFDerivAt.hasMFDerivWithinAt\n\n"}
{"name":"ModelWithCorners.mdifferentiableWithinAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\ns : Set H\nx : H\n⊢ MDifferentiableWithinAt I (modelWithCornersSelf 𝕜 E) (↑I) s x","decl":"protected theorem mdifferentiableWithinAt {s x} : MDifferentiableWithinAt I 𝓘(𝕜, E) I s x :=\n  I.hasMFDerivWithinAt.mdifferentiableWithinAt\n\n"}
{"name":"ModelWithCorners.mdifferentiableAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nx : H\n⊢ MDifferentiableAt I (modelWithCornersSelf 𝕜 E) (↑I) x","decl":"protected theorem mdifferentiableAt {x} : MDifferentiableAt I 𝓘(𝕜, E) I x :=\n  I.hasMFDerivAt.mdifferentiableAt\n\n"}
{"name":"ModelWithCorners.mdifferentiableOn","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\ns : Set H\n⊢ MDifferentiableOn I (modelWithCornersSelf 𝕜 E) (↑I) s","decl":"protected theorem mdifferentiableOn {s} : MDifferentiableOn I 𝓘(𝕜, E) I s := fun _ _ =>\n  I.mdifferentiableWithinAt\n\n"}
{"name":"ModelWithCorners.mdifferentiable","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\n⊢ MDifferentiable I (modelWithCornersSelf 𝕜 E) ↑I","decl":"protected theorem mdifferentiable : MDifferentiable I 𝓘(𝕜, E) I := fun _ => I.mdifferentiableAt\n\n"}
{"name":"ModelWithCorners.hasMFDerivWithinAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nx : E\nhx : Membership.mem (Set.range ↑I) x\n⊢ HasMFDerivWithinAt (modelWithCornersSelf 𝕜 E) I (↑I.symm) (Set.range ↑I) x (ContinuousLinearMap.id 𝕜 (TangentSpace (modelWithCornersSelf 𝕜 E) x))","decl":"theorem hasMFDerivWithinAt_symm {x} (hx : x ∈ range I) :\n    HasMFDerivWithinAt 𝓘(𝕜, E) I I.symm (range I) x (ContinuousLinearMap.id _ _) :=\n  ⟨I.continuousWithinAt_symm,\n    (hasFDerivWithinAt_id _ _).congr' (fun _y hy => I.rightInvOn hy.1) ⟨hx, mem_range_self _⟩⟩\n\n"}
{"name":"ModelWithCorners.mdifferentiableOn_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\n⊢ MDifferentiableOn (modelWithCornersSelf 𝕜 E) I (↑I.symm) (Set.range ↑I)","decl":"theorem mdifferentiableOn_symm : MDifferentiableOn 𝓘(𝕜, E) I I.symm (range I) := fun _x hx =>\n  (I.hasMFDerivWithinAt_symm hx).mdifferentiableWithinAt\n\n"}
{"name":"ModelWithCorners.mdifferentiableWithinAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nz : E\nhz : Membership.mem (Set.range ↑I) z\n⊢ MDifferentiableWithinAt (modelWithCornersSelf 𝕜 E) I (↑I.symm) (Set.range ↑I) z","decl":"theorem mdifferentiableWithinAt_symm {z : E} (hz : z ∈ range I) :\n    MDifferentiableWithinAt 𝓘(𝕜, E) I I.symm (range I) z :=\n  I.mdifferentiableOn_symm z hz\n\n"}
{"name":"mdifferentiableAt_atlas","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ne : PartialHomeomorph M H\nh : Membership.mem (atlas H M) e\nx : M\nhx : Membership.mem e.source x\n⊢ MDifferentiableAt I I (↑e) x","decl":"theorem mdifferentiableAt_atlas (h : e ∈ atlas H M) {x : M} (hx : x ∈ e.source) :\n    MDifferentiableAt I I e x := by\n  rw [mdifferentiableAt_iff]\n  refine ⟨(e.continuousOn x hx).continuousAt (e.open_source.mem_nhds hx), ?_⟩\n  have mem :\n    I ((chartAt H x : M → H) x) ∈ I.symm ⁻¹' ((chartAt H x).symm ≫ₕ e).source ∩ range I := by\n    simp only [hx, mfld_simps]\n  have : (chartAt H x).symm.trans e ∈ contDiffGroupoid 1 I :=\n    HasGroupoid.compatible (chart_mem_atlas H x) h\n  have A :\n    ContDiffOn 𝕜 1 (I ∘ (chartAt H x).symm.trans e ∘ I.symm)\n      (I.symm ⁻¹' ((chartAt H x).symm.trans e).source ∩ range I) :=\n    this.1\n  have B := A.differentiableOn le_rfl (I ((chartAt H x : M → H) x)) mem\n  simp only [mfld_simps] at B\n  rw [inter_comm, differentiableWithinAt_inter] at B\n  · simpa only [mfld_simps]\n  · apply IsOpen.mem_nhds ((PartialHomeomorph.open_source _).preimage I.continuous_symm) mem.1\n\n"}
{"name":"mdifferentiableOn_atlas","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ne : PartialHomeomorph M H\nh : Membership.mem (atlas H M) e\n⊢ MDifferentiableOn I I (↑e) e.source","decl":"theorem mdifferentiableOn_atlas (h : e ∈ atlas H M) : MDifferentiableOn I I e e.source :=\n  fun _x hx => (mdifferentiableAt_atlas h hx).mdifferentiableWithinAt\n\n"}
{"name":"mdifferentiableAt_atlas_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ne : PartialHomeomorph M H\nh : Membership.mem (atlas H M) e\nx : H\nhx : Membership.mem e.target x\n⊢ MDifferentiableAt I I (↑e.symm) x","decl":"theorem mdifferentiableAt_atlas_symm (h : e ∈ atlas H M) {x : H} (hx : x ∈ e.target) :\n    MDifferentiableAt I I e.symm x := by\n  rw [mdifferentiableAt_iff]\n  refine ⟨(e.continuousOn_symm x hx).continuousAt (e.open_target.mem_nhds hx), ?_⟩\n  have mem : I x ∈ I.symm ⁻¹' (e.symm ≫ₕ chartAt H (e.symm x)).source ∩ range I := by\n    simp only [hx, mfld_simps]\n  have : e.symm.trans (chartAt H (e.symm x)) ∈ contDiffGroupoid 1 I :=\n    HasGroupoid.compatible h (chart_mem_atlas H _)\n  have A :\n    ContDiffOn 𝕜 1 (I ∘ e.symm.trans (chartAt H (e.symm x)) ∘ I.symm)\n      (I.symm ⁻¹' (e.symm.trans (chartAt H (e.symm x))).source ∩ range I) :=\n    this.1\n  have B := A.differentiableOn le_rfl (I x) mem\n  simp only [mfld_simps] at B\n  rw [inter_comm, differentiableWithinAt_inter] at B\n  · simpa only [mfld_simps]\n  · apply IsOpen.mem_nhds ((PartialHomeomorph.open_source _).preimage I.continuous_symm) mem.1\n\n"}
{"name":"mdifferentiableOn_atlas_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ne : PartialHomeomorph M H\nh : Membership.mem (atlas H M) e\n⊢ MDifferentiableOn I I (↑e.symm) e.target","decl":"theorem mdifferentiableOn_atlas_symm (h : e ∈ atlas H M) : MDifferentiableOn I I e.symm e.target :=\n  fun _x hx => (mdifferentiableAt_atlas_symm h hx).mdifferentiableWithinAt\n\n"}
{"name":"mdifferentiable_of_mem_atlas","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ne : PartialHomeomorph M H\nh : Membership.mem (atlas H M) e\n⊢ PartialHomeomorph.MDifferentiable I I e","decl":"theorem mdifferentiable_of_mem_atlas (h : e ∈ atlas H M) : e.MDifferentiable I I :=\n  ⟨mdifferentiableOn_atlas h, mdifferentiableOn_atlas_symm h⟩\n\n"}
{"name":"mdifferentiable_chart","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ PartialHomeomorph.MDifferentiable I I (chartAt H x)","decl":"theorem mdifferentiable_chart (x : M) : (chartAt H x).MDifferentiable I I :=\n  mdifferentiable_of_mem_atlas (chart_mem_atlas _ _)\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\n⊢ PartialHomeomorph.MDifferentiable I' I e.symm","decl":"nonrec theorem symm : e.symm.MDifferentiable I' I := he.symm\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.mdifferentiableAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ MDifferentiableAt I I' (↑e) x","decl":"protected theorem mdifferentiableAt {x : M} (hx : x ∈ e.source) : MDifferentiableAt I I' e x :=\n  (he.1 x hx).mdifferentiableAt (e.open_source.mem_nhds hx)\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.mdifferentiableAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M'\nhx : Membership.mem e.target x\n⊢ MDifferentiableAt I' I (↑e.symm) x","decl":"theorem mdifferentiableAt_symm {x : M'} (hx : x ∈ e.target) : MDifferentiableAt I' I e.symm x :=\n  (he.2 x hx).mdifferentiableAt (e.open_target.mem_nhds hx)\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.symm_comp_deriv","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Eq ((mfderiv I' I (↑e.symm) (↑e x)).comp (mfderiv I I' (↑e) x)) (ContinuousLinearMap.id 𝕜 (TangentSpace I x))","decl":"theorem symm_comp_deriv {x : M} (hx : x ∈ e.source) :\n    (mfderiv I' I e.symm (e x)).comp (mfderiv I I' e x) =\n      ContinuousLinearMap.id 𝕜 (TangentSpace I x) := by\n  have : mfderiv I I (e.symm ∘ e) x = (mfderiv I' I e.symm (e x)).comp (mfderiv I I' e x) :=\n    mfderiv_comp x (he.mdifferentiableAt_symm (e.map_source hx)) (he.mdifferentiableAt hx)\n  rw [← this]\n  have : mfderiv I I (_root_.id : M → M) x = ContinuousLinearMap.id _ _ := mfderiv_id\n  rw [← this]\n  apply Filter.EventuallyEq.mfderiv_eq\n  have : e.source ∈ 𝓝 x := e.open_source.mem_nhds hx\n  exact Filter.mem_of_superset this (by mfld_set_tac)\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.comp_symm_deriv","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M'\nhx : Membership.mem e.target x\n⊢ Eq ((mfderiv I I' (↑e) (↑e.symm x)).comp (mfderiv I' I (↑e.symm) x)) (ContinuousLinearMap.id 𝕜 (TangentSpace I' x))","decl":"theorem comp_symm_deriv {x : M'} (hx : x ∈ e.target) :\n    (mfderiv I I' e (e.symm x)).comp (mfderiv I' I e.symm x) =\n      ContinuousLinearMap.id 𝕜 (TangentSpace I' x) :=\n  he.symm.symm_comp_deriv hx\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.mfderiv_bijective","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Function.Bijective ⇑(mfderiv I I' (↑e) x)","decl":"theorem mfderiv_bijective {x : M} (hx : x ∈ e.source) : Function.Bijective (mfderiv I I' e x) :=\n  (he.mfderiv hx).bijective\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.mfderiv_injective","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Function.Injective ⇑(mfderiv I I' (↑e) x)","decl":"theorem mfderiv_injective {x : M} (hx : x ∈ e.source) : Function.Injective (mfderiv I I' e x) :=\n  (he.mfderiv hx).injective\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.mfderiv_surjective","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Function.Surjective ⇑(mfderiv I I' (↑e) x)","decl":"theorem mfderiv_surjective {x : M} (hx : x ∈ e.source) : Function.Surjective (mfderiv I I' e x) :=\n  (he.mfderiv hx).surjective\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.ker_mfderiv_eq_bot","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Eq (LinearMap.ker (mfderiv I I' (↑e) x)) Bot.bot","decl":"theorem ker_mfderiv_eq_bot {x : M} (hx : x ∈ e.source) : LinearMap.ker (mfderiv I I' e x) = ⊥ :=\n  (he.mfderiv hx).toLinearEquiv.ker\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.range_mfderiv_eq_top","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Eq (LinearMap.range (mfderiv I I' (↑e) x)) Top.top","decl":"theorem range_mfderiv_eq_top {x : M} (hx : x ∈ e.source) : LinearMap.range (mfderiv I I' e x) = ⊤ :=\n  (he.mfderiv hx).toLinearEquiv.range\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.range_mfderiv_eq_univ","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁷ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁶ : TopologicalSpace M\ninst✝⁵ : ChartedSpace H M\nE' : Type u_5\ninst✝⁴ : NormedAddCommGroup E'\ninst✝³ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝² : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H' M'\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\nx : M\nhx : Membership.mem e.source x\n⊢ Eq (Set.range ⇑(mfderiv I I' (↑e) x)) Set.univ","decl":"theorem range_mfderiv_eq_univ {x : M} (hx : x ∈ e.source) : range (mfderiv I I' e x) = univ :=\n  (he.mfderiv_surjective hx).range_eq\n\n"}
{"name":"PartialHomeomorph.MDifferentiable.trans","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝¹⁵ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹⁴ : NormedAddCommGroup E\ninst✝¹³ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝¹² : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝¹¹ : TopologicalSpace M\ninst✝¹⁰ : ChartedSpace H M\nE' : Type u_5\ninst✝⁹ : NormedAddCommGroup E'\ninst✝⁸ : NormedSpace 𝕜 E'\nH' : Type u_6\ninst✝⁷ : TopologicalSpace H'\nI' : ModelWithCorners 𝕜 E' H'\nM' : Type u_7\ninst✝⁶ : TopologicalSpace M'\ninst✝⁵ : ChartedSpace H' M'\nE'' : Type u_8\ninst✝⁴ : NormedAddCommGroup E''\ninst✝³ : NormedSpace 𝕜 E''\nH'' : Type u_9\ninst✝² : TopologicalSpace H''\nI'' : ModelWithCorners 𝕜 E'' H''\nM'' : Type u_10\ninst✝¹ : TopologicalSpace M''\ninst✝ : ChartedSpace H'' M''\ne : PartialHomeomorph M M'\nhe : PartialHomeomorph.MDifferentiable I I' e\ne' : PartialHomeomorph M' M''\nhe' : PartialHomeomorph.MDifferentiable I' I'' e'\n⊢ PartialHomeomorph.MDifferentiable I I'' (e.trans e')","decl":"theorem trans (he' : e'.MDifferentiable I' I'') : (e.trans e').MDifferentiable I I'' := by\n  constructor\n  · intro x hx\n    simp only [mfld_simps] at hx\n    exact\n      ((he'.mdifferentiableAt hx.2).comp _ (he.mdifferentiableAt hx.1)).mdifferentiableWithinAt\n  · intro x hx\n    simp only [mfld_simps] at hx\n    exact\n      ((he.symm.mdifferentiableAt hx.2).comp _\n          (he'.symm.mdifferentiableAt hx.1)).mdifferentiableWithinAt\n\n"}
{"name":"hasMFDerivAt_extChartAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\nh : Membership.mem (chartAt H x).source y\n⊢ HasMFDerivAt I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) y (mfderiv I I (↑(chartAt H x)) y)","decl":"theorem hasMFDerivAt_extChartAt (h : y ∈ (chartAt H x).source) :\n    HasMFDerivAt I 𝓘(𝕜, E) (extChartAt I x) y (mfderiv I I (chartAt H x) y :) :=\n  I.hasMFDerivAt.comp y ((mdifferentiable_chart x).mdifferentiableAt h).hasMFDerivAt\n\n"}
{"name":"hasMFDerivWithinAt_extChartAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\ns : Set M\nx y : M\nh : Membership.mem (chartAt H x).source y\n⊢ HasMFDerivWithinAt I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) s y (mfderiv I I (↑(chartAt H x)) y)","decl":"theorem hasMFDerivWithinAt_extChartAt (h : y ∈ (chartAt H x).source) :\n    HasMFDerivWithinAt I 𝓘(𝕜, E) (extChartAt I x) s y (mfderiv I I (chartAt H x) y :) :=\n  (hasMFDerivAt_extChartAt h).hasMFDerivWithinAt\n\n"}
{"name":"mdifferentiableAt_extChartAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\nh : Membership.mem (chartAt H x).source y\n⊢ MDifferentiableAt I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) y","decl":"theorem mdifferentiableAt_extChartAt (h : y ∈ (chartAt H x).source) :\n    MDifferentiableAt I 𝓘(𝕜, E) (extChartAt I x) y :=\n  (hasMFDerivAt_extChartAt h).mdifferentiableAt\n\n"}
{"name":"mdifferentiableOn_extChartAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ MDifferentiableOn I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) (chartAt H x).source","decl":"theorem mdifferentiableOn_extChartAt :\n    MDifferentiableOn I 𝓘(𝕜, E) (extChartAt I x) (chartAt H x).source := fun _y hy =>\n  (hasMFDerivWithinAt_extChartAt hy).mdifferentiableWithinAt\n\n"}
{"name":"mdifferentiableWithinAt_extChartAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\nz : E\nh : Membership.mem (extChartAt I x).target z\n⊢ MDifferentiableWithinAt (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (Set.range ↑I) z","decl":"theorem mdifferentiableWithinAt_extChartAt_symm (h : z ∈ (extChartAt I x).target) :\n    MDifferentiableWithinAt 𝓘(𝕜, E) I (extChartAt I x).symm (range I) z := by\n  have Z := I.mdifferentiableWithinAt_symm (extChartAt_target_subset_range x h)\n  apply MDifferentiableAt.comp_mdifferentiableWithinAt (I' := I) _ _ Z\n  apply mdifferentiableAt_atlas_symm (ChartedSpace.chart_mem_atlas x)\n  simp only [extChartAt, PartialHomeomorph.extend, PartialEquiv.trans_target,\n    ModelWithCorners.target_eq, ModelWithCorners.toPartialEquiv_coe_symm, mem_inter_iff, mem_range,\n    mem_preimage] at h\n  exact h.2\n\n"}
{"name":"mdifferentiableOn_extChartAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\n⊢ MDifferentiableOn (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (extChartAt I x).target","decl":"theorem mdifferentiableOn_extChartAt_symm :\n    MDifferentiableOn 𝓘(𝕜, E) I (extChartAt I x).symm (extChartAt I x).target := by\n  intro y hy\n  exact (mdifferentiableWithinAt_extChartAt_symm hy).mono (extChartAt_target_subset_range x)\n\n"}
{"name":"mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\ny : E\nhy : Membership.mem (extChartAt I x).target y\n⊢ Eq ((mfderiv I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) (↑(extChartAt I x).symm y)).comp (mfderivWithin (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (Set.range ↑I) y)) (ContinuousLinearMap.id 𝕜 (TangentSpace (modelWithCornersSelf 𝕜 E) y))","decl":"/-- The composition of the derivative of `extChartAt` with the derivative of the inverse of\n`extChartAt` gives the identity.\nVersion where the basepoint belongs to `(extChartAt I x).target`. -/\nlemma mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm {x : M}\n    {y : E} (hy : y ∈ (extChartAt I x).target) :\n    (mfderiv I 𝓘(𝕜, E) (extChartAt I x) ((extChartAt I x).symm y)) ∘L\n      (mfderivWithin 𝓘(𝕜, E) I (extChartAt I x).symm (range I) y) = ContinuousLinearMap.id _ _ := by\n  have U : UniqueMDiffWithinAt 𝓘(𝕜, E) (range ↑I) y := by\n    apply I.uniqueMDiffOn\n    exact extChartAt_target_subset_range x hy\n  have h'y : (extChartAt I x).symm y ∈ (extChartAt I x).source := (extChartAt I x).map_target hy\n  have h''y : (extChartAt I x).symm y ∈ (chartAt H x).source := by\n    rwa [← extChartAt_source (I := I)]\n  rw [← mfderiv_comp_mfderivWithin]; rotate_left\n  · apply mdifferentiableAt_extChartAt h''y\n  · exact mdifferentiableWithinAt_extChartAt_symm hy\n  · exact U\n  rw [← mfderivWithin_id U]\n  apply Filter.EventuallyEq.mfderivWithin_eq U\n  · filter_upwards [extChartAt_target_mem_nhdsWithin_of_mem hy] with z hz\n    simp only [Function.comp_def, PartialEquiv.right_inv (extChartAt I x) hz, id_eq]\n  · simp only [Function.comp_def, PartialEquiv.right_inv (extChartAt I x) hy, id_eq]\n\n"}
{"name":"mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm'","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\nhy : Membership.mem (extChartAt I x).source y\n⊢ Eq ((mfderiv I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) y).comp (mfderivWithin (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (Set.range ↑I) (↑(extChartAt I x) y))) (ContinuousLinearMap.id 𝕜 (TangentSpace (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x) y)))","decl":"/-- The composition of the derivative of `extChartAt` with the derivative of the inverse of\n`extChartAt` gives the identity.\nVersion where the basepoint belongs to `(extChartAt I x).source`. -/\nlemma mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm' {x : M}\n    {y : M} (hy : y ∈ (extChartAt I x).source) :\n    (mfderiv I 𝓘(𝕜, E) (extChartAt I x) y) ∘L\n      (mfderivWithin 𝓘(𝕜, E) I (extChartAt I x).symm (range I) (extChartAt I x y))\n    = ContinuousLinearMap.id _ _ := by\n  have : y = (extChartAt I x).symm (extChartAt I x y) := ((extChartAt I x).left_inv hy).symm\n  convert mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm ((extChartAt I x).map_source hy)\n\n"}
{"name":"mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\ny : E\nhy : Membership.mem (extChartAt I x).target y\n⊢ Eq ((mfderivWithin (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (Set.range ↑I) y).comp (mfderiv I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) (↑(extChartAt I x).symm y))) (ContinuousLinearMap.id 𝕜 (TangentSpace I (↑(extChartAt I x).symm y)))","decl":"/-- The composition of the derivative of the inverse of `extChartAt` with the derivative of\n`extChartAt` gives the identity.\nVersion where the basepoint belongs to `(extChartAt I x).target`. -/\nlemma mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt\n    {y : E} (hy : y ∈ (extChartAt I x).target) :\n    (mfderivWithin 𝓘(𝕜, E) I (extChartAt I x).symm (range I) y) ∘L\n      (mfderiv I 𝓘(𝕜, E) (extChartAt I x) ((extChartAt I x).symm y))\n      = ContinuousLinearMap.id _ _ := by\n  have h'y : (extChartAt I x).symm y ∈ (extChartAt I x).source := (extChartAt I x).map_target hy\n  have h''y : (extChartAt I x).symm y ∈ (chartAt H x).source := by\n    rwa [← extChartAt_source (I := I)]\n  have U' : UniqueMDiffWithinAt I (extChartAt I x).source ((extChartAt I x).symm y) :=\n    (isOpen_extChartAt_source x).uniqueMDiffWithinAt h'y\n  have : mfderiv I 𝓘(𝕜, E) (extChartAt I x) ((extChartAt I x).symm y)\n      = mfderivWithin I 𝓘(𝕜, E) (extChartAt I x) (extChartAt I x).source\n      ((extChartAt I x).symm y) := by\n    rw [mfderivWithin_eq_mfderiv U']\n    exact mdifferentiableAt_extChartAt h''y\n  rw [this, ← mfderivWithin_comp_of_eq]; rotate_left\n  · exact mdifferentiableWithinAt_extChartAt_symm hy\n  · exact (mdifferentiableAt_extChartAt h''y).mdifferentiableWithinAt\n  · intro z hz\n    apply extChartAt_target_subset_range x\n    exact PartialEquiv.map_source (extChartAt I x) hz\n  · exact U'\n  · exact PartialEquiv.right_inv (extChartAt I x) hy\n  rw [← mfderivWithin_id U']\n  apply Filter.EventuallyEq.mfderivWithin_eq U'\n  · filter_upwards [extChartAt_source_mem_nhdsWithin' h'y] with z hz\n    simp only [Function.comp_def, PartialEquiv.left_inv (extChartAt I x) hz, id_eq]\n  · simp only [Function.comp_def, PartialEquiv.right_inv (extChartAt I x) hy, id_eq]\n\n"}
{"name":"mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt'","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\nhy : Membership.mem (extChartAt I x).source y\n⊢ Eq ((mfderivWithin (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (Set.range ↑I) (↑(extChartAt I x) y)).comp (mfderiv I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) y)) (ContinuousLinearMap.id 𝕜 (TangentSpace I y))","decl":"/-- The composition of the derivative of the inverse of `extChartAt` with the derivative of\n`extChartAt` gives the identity.\nVersion where the basepoint belongs to `(extChartAt I x).source`. -/\nlemma mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt'\n    {y : M} (hy : y ∈ (extChartAt I x).source) :\n    (mfderivWithin 𝓘(𝕜, E) I (extChartAt I x).symm (range I) (extChartAt I x y)) ∘L\n      (mfderiv I 𝓘(𝕜, E) (extChartAt I x) y)\n      = ContinuousLinearMap.id _ _ := by\n  have : y = (extChartAt I x).symm (extChartAt I x y) := ((extChartAt I x).left_inv hy).symm\n  convert mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt ((extChartAt I x).map_source hy)\n\n"}
{"name":"isInvertible_mfderivWithin_extChartAt_symm","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx : M\ny : E\nhy : Membership.mem (extChartAt I x).target y\n⊢ (mfderivWithin (modelWithCornersSelf 𝕜 E) I (↑(extChartAt I x).symm) (Set.range ↑I) y).IsInvertible","decl":"lemma isInvertible_mfderivWithin_extChartAt_symm {y : E} (hy : y ∈ (extChartAt I x).target) :\n    (mfderivWithin 𝓘(𝕜, E) I (extChartAt I x).symm (range I) y).IsInvertible :=\n  ContinuousLinearMap.IsInvertible.of_inverse\n    (mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt hy)\n    (mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm hy)\n\n"}
{"name":"isInvertible_mfderiv_extChartAt","module":"Mathlib.Geometry.Manifold.MFDeriv.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\ninst✝ : IsManifold I 1 M\nx y : M\nhy : Membership.mem (extChartAt I x).source y\n⊢ (mfderiv I (modelWithCornersSelf 𝕜 E) (↑(extChartAt I x)) y).IsInvertible","decl":"lemma isInvertible_mfderiv_extChartAt {y : M} (hy : y ∈ (extChartAt I x).source) :\n    (mfderiv I 𝓘(𝕜, E) (extChartAt I x) y).IsInvertible := by\n  have h'y : extChartAt I x y ∈ (extChartAt I x).target := (extChartAt I x).map_source hy\n  have Z := ContinuousLinearMap.IsInvertible.of_inverse\n    (mfderiv_extChartAt_comp_mfderivWithin_extChartAt_symm h'y)\n    (mfderivWithin_extChartAt_symm_comp_mfderiv_extChartAt h'y)\n  have : (extChartAt I x).symm ((extChartAt I x) y) = y := (extChartAt I x).left_inv hy\n  rwa [this] at Z\n\n"}
