{"name":"CategoryTheory.Bicategory.LeftExtension.w_assoc","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\ns t : CategoryTheory.Bicategory.LeftExtension f g\nŒ∑ : Quiver.Hom s t\nZ : Quiver.Hom a c\nh : Quiver.Hom (CategoryTheory.CategoryStruct.comp f t.right) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp s.unit (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f Œ∑.right) h)) (CategoryTheory.CategoryStruct.comp t.unit h)","decl":"@[reassoc (attr := simp)]\ntheorem w (Œ∑ : s ‚ü∂ t) : s.unit ‚â´ f ‚óÅ Œ∑.right = t.unit :=\n  StructuredArrow.w Œ∑\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.w","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\ns t : CategoryTheory.Bicategory.LeftExtension f g\nŒ∑ : Quiver.Hom s t\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp s.unit (CategoryTheory.Bicategory.whiskerLeft f Œ∑.right)) t.unit","decl":"@[reassoc (attr := simp)]\ntheorem w (Œ∑ : s ‚ü∂ t) : s.unit ‚â´ f ‚óÅ Œ∑.right = t.unit :=\n  StructuredArrow.w Œ∑\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.ofCompId_hom","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f (CategoryTheory.CategoryStruct.comp g (CategoryTheory.CategoryStruct.id c))\n‚ä¢ Eq t.ofCompId.hom (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.rightUnitor g).inv t.unit)","decl":"/-- Construct a left extension of `g : a ‚ü∂ c` from a left extension of `g ‚â´ ùüô c`. -/\n@[simps!]\ndef ofCompId (t : LeftExtension f (g ‚â´ ùüô c)) : LeftExtension f g :=\n  mk (extension t) ((œÅ_ g).inv ‚â´ unit t)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.ofCompId_left_as","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f (CategoryTheory.CategoryStruct.comp g (CategoryTheory.CategoryStruct.id c))\n‚ä¢ Eq t.ofCompId.left.as PUnit.unit","decl":"/-- Construct a left extension of `g : a ‚ü∂ c` from a left extension of `g ‚â´ ùüô c`. -/\n@[simps!]\ndef ofCompId (t : LeftExtension f (g ‚â´ ùüô c)) : LeftExtension f g :=\n  mk (extension t) ((œÅ_ g).inv ‚â´ unit t)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.ofCompId_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f (CategoryTheory.CategoryStruct.comp g (CategoryTheory.CategoryStruct.id c))\n‚ä¢ Eq t.ofCompId.right t.extension","decl":"/-- Construct a left extension of `g : a ‚ü∂ c` from a left extension of `g ‚â´ ùüô c`. -/\n@[simps!]\ndef ofCompId (t : LeftExtension f (g ‚â´ ùüô c)) : LeftExtension f g :=\n  mk (extension t) ((œÅ_ g).inv ‚â´ unit t)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whisker_extension","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f g\nx : B\nh : Quiver.Hom c x\n‚ä¢ Eq (t.whisker h).extension (CategoryTheory.CategoryStruct.comp t.extension h)","decl":"@[simp]\ntheorem whisker_extension (t : LeftExtension f g) {x : B} (h : c ‚ü∂ x) :\n    (t.whisker h).extension = t.extension ‚â´ h :=\n  rfl\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whisker_unit","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f g\nx : B\nh : Quiver.Hom c x\n‚ä¢ Eq (t.whisker h).unit (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight t.unit h) (CategoryTheory.Bicategory.associator f t.extension h).hom)","decl":"@[simp]\ntheorem whisker_unit (t : LeftExtension f g) {x : B} (h : c ‚ü∂ x) :\n    (t.whisker h).unit = t.unit ‚ñ∑ h ‚â´ (Œ±_ f t.extension h).hom :=\n  rfl\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whiskering_map","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nx : B\nh : Quiver.Hom c x\nX‚úù Y‚úù : CategoryTheory.Bicategory.LeftExtension f g\nŒ∑ : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.Bicategory.LeftExtension.whiskering h).map Œ∑) (CategoryTheory.Bicategory.LeftExtension.homMk (CategoryTheory.Bicategory.whiskerRight Œ∑.right h) ‚ãØ)","decl":"/-- Whiskering a 1-morphism is a functor. -/\n@[simps]\ndef whiskering {x : B} (h : c ‚ü∂ x) : LeftExtension f g ‚•§ LeftExtension f (g ‚â´ h) where\n  obj t := t.whisker h\n  map Œ∑ := LeftExtension.homMk (Œ∑.right ‚ñ∑ h) <| by\n    simp [- LeftExtension.w, ‚Üê LeftExtension.w Œ∑]\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whiskering_obj","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nx : B\nh : Quiver.Hom c x\nt : CategoryTheory.Bicategory.LeftExtension f g\n‚ä¢ Eq ((CategoryTheory.Bicategory.LeftExtension.whiskering h).obj t) (t.whisker h)","decl":"/-- Whiskering a 1-morphism is a functor. -/\n@[simps]\ndef whiskering {x : B} (h : c ‚ü∂ x) : LeftExtension f g ‚•§ LeftExtension f (g ‚â´ h) where\n  obj t := t.whisker h\n  map Œ∑ := LeftExtension.homMk (Œ∑.right ‚ñ∑ h) <| by\n    simp [- LeftExtension.w, ‚Üê LeftExtension.w Œ∑]\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whiskerIdCancel_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\ns : CategoryTheory.Bicategory.LeftExtension f (CategoryTheory.CategoryStruct.comp g (CategoryTheory.CategoryStruct.id c))\nt : CategoryTheory.Bicategory.LeftExtension f g\nœÑ : Quiver.Hom s (t.whisker (CategoryTheory.CategoryStruct.id c))\n‚ä¢ Eq (s.whiskerIdCancel œÑ).right (CategoryTheory.CategoryStruct.comp œÑ.right (CategoryTheory.Bicategory.rightUnitor t.extension).hom)","decl":"/-- Define a morphism between left extensions by cancelling the whiskered identities. -/\n@[simps! right]\ndef whiskerIdCancel\n    (s : LeftExtension f (g ‚â´ ùüô c)) {t : LeftExtension f g} (œÑ : s ‚ü∂ t.whisker (ùüô c)) :\n    s.ofCompId ‚ü∂ t :=\n  LeftExtension.homMk (œÑ.right ‚â´ (œÅ_ _).hom)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whiskerHom_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\ns t : CategoryTheory.Bicategory.LeftExtension f g\ni : Quiver.Hom s t\nx : B\nh : Quiver.Hom c x\n‚ä¢ Eq (CategoryTheory.Bicategory.LeftExtension.whiskerHom i h).right (CategoryTheory.Bicategory.whiskerRight i.right h)","decl":"/-- Construct a morphism between whiskered extensions. -/\n@[simps! right]\ndef whiskerHom (i : s ‚ü∂ t) {x : B} (h : c ‚ü∂ x) :\n    s.whisker h ‚ü∂ t.whisker h :=\n  StructuredArrow.homMk (i.right ‚ñ∑ h) <| by\n    rw [‚Üê cancel_mono (Œ±_ _ _ _).inv]\n    calc\n      _ = (unit s ‚â´ f ‚óÅ i.right) ‚ñ∑ h := by simp [- LeftExtension.w]\n      _ = unit t ‚ñ∑ h := congrArg (¬∑ ‚ñ∑ h) (LeftExtension.w i)\n      _ = _ := by simp\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whiskerOfCompIdIsoSelf_inv_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f g\n‚ä¢ Eq t.whiskerOfCompIdIsoSelf.inv.right (CategoryTheory.Bicategory.rightUnitor t.extension).inv","decl":"/-- The isomorphism between left extensions induced by a right unitor. -/\n@[simps! hom_right inv_right]\ndef whiskerOfCompIdIsoSelf (t : LeftExtension f g) : (t.whisker (ùüô c)).ofCompId ‚âÖ t :=\n  StructuredArrow.isoMk (œÅ_ (t.extension))\n\n"}
{"name":"CategoryTheory.Bicategory.LeftExtension.whiskerOfCompIdIsoSelf_hom_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\nt : CategoryTheory.Bicategory.LeftExtension f g\n‚ä¢ Eq t.whiskerOfCompIdIsoSelf.hom.right (CategoryTheory.Bicategory.rightUnitor t.extension).hom","decl":"/-- The isomorphism between left extensions induced by a right unitor. -/\n@[simps! hom_right inv_right]\ndef whiskerOfCompIdIsoSelf (t : LeftExtension f g) : (t.whisker (ùüô c)).ofCompId ‚âÖ t :=\n  StructuredArrow.isoMk (œÅ_ (t.extension))\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.w","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\ns t : CategoryTheory.Bicategory.LeftLift f g\nh : Quiver.Hom s t\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp s.unit (CategoryTheory.Bicategory.whiskerRight h.right f)) t.unit","decl":"@[reassoc (attr := simp)]\ntheorem w (h : s ‚ü∂ t) : s.unit ‚â´ h.right ‚ñ∑ f = t.unit :=\n  StructuredArrow.w h\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.w_assoc","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\ns t : CategoryTheory.Bicategory.LeftLift f g\nh‚úù : Quiver.Hom s t\nZ : Quiver.Hom c a\nh : Quiver.Hom (CategoryTheory.CategoryStruct.comp t.right f) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp s.unit (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight h‚úù.right f) h)) (CategoryTheory.CategoryStruct.comp t.unit h)","decl":"@[reassoc (attr := simp)]\ntheorem w (h : s ‚ü∂ t) : s.unit ‚â´ h.right ‚ñ∑ f = t.unit :=\n  StructuredArrow.w h\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.ofIdComp_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id c) g)\n‚ä¢ Eq t.ofIdComp.right t.lift","decl":"/-- Construct a left lift along `g : c ‚ü∂ a` from a left lift along `ùüô c ‚â´ g`. -/\n@[simps!]\ndef ofIdComp (t : LeftLift f (ùüô c ‚â´ g)) : LeftLift f g :=\n  mk (lift t) ((Œª_ _).inv ‚â´ unit t)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.ofIdComp_left_as","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id c) g)\n‚ä¢ Eq t.ofIdComp.left.as PUnit.unit","decl":"/-- Construct a left lift along `g : c ‚ü∂ a` from a left lift along `ùüô c ‚â´ g`. -/\n@[simps!]\ndef ofIdComp (t : LeftLift f (ùüô c ‚â´ g)) : LeftLift f g :=\n  mk (lift t) ((Œª_ _).inv ‚â´ unit t)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.ofIdComp_hom","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id c) g)\n‚ä¢ Eq t.ofIdComp.hom (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.leftUnitor g).inv t.unit)","decl":"/-- Construct a left lift along `g : c ‚ü∂ a` from a left lift along `ùüô c ‚â´ g`. -/\n@[simps!]\ndef ofIdComp (t : LeftLift f (ùüô c ‚â´ g)) : LeftLift f g :=\n  mk (lift t) ((Œª_ _).inv ‚â´ unit t)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whisker_lift","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f g\nx : B\nh : Quiver.Hom x c\n‚ä¢ Eq (t.whisker h).lift (CategoryTheory.CategoryStruct.comp h t.lift)","decl":"@[simp]\ntheorem whisker_lift (t : LeftLift f g) {x : B} (h : x ‚ü∂ c) :\n    (t.whisker h).lift = h ‚â´ t.lift :=\n  rfl\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whisker_unit","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f g\nx : B\nh : Quiver.Hom x c\n‚ä¢ Eq (t.whisker h).unit (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft h t.unit) (CategoryTheory.Bicategory.associator h t.lift f).inv)","decl":"@[simp]\ntheorem whisker_unit (t : LeftLift f g) {x : B} (h : x ‚ü∂ c) :\n    (t.whisker h).unit = h ‚óÅ t.unit ‚â´ (Œ±_ h t.lift f).inv :=\n  rfl\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whiskering_obj","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nx : B\nh : Quiver.Hom x c\nt : CategoryTheory.Bicategory.LeftLift f g\n‚ä¢ Eq ((CategoryTheory.Bicategory.LeftLift.whiskering h).obj t) (t.whisker h)","decl":"/-- Whiskering a 1-morphism is a functor. -/\n@[simps]\ndef whiskering {x : B} (h : x ‚ü∂ c) : LeftLift f g ‚•§ LeftLift f (h ‚â´ g) where\n  obj t := t.whisker h\n  map Œ∑ := LeftLift.homMk (h ‚óÅ Œ∑.right) <| by\n    dsimp only [whisker_lift, whisker_unit]\n    rw [‚Üê LeftLift.w Œ∑]\n    simp [- LeftLift.w]\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whiskering_map","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nx : B\nh : Quiver.Hom x c\nX‚úù Y‚úù : CategoryTheory.Bicategory.LeftLift f g\nŒ∑ : Quiver.Hom X‚úù Y‚úù\n‚ä¢ Eq ((CategoryTheory.Bicategory.LeftLift.whiskering h).map Œ∑) (CategoryTheory.Bicategory.LeftLift.homMk (CategoryTheory.Bicategory.whiskerLeft h Œ∑.right) ‚ãØ)","decl":"/-- Whiskering a 1-morphism is a functor. -/\n@[simps]\ndef whiskering {x : B} (h : x ‚ü∂ c) : LeftLift f g ‚•§ LeftLift f (h ‚â´ g) where\n  obj t := t.whisker h\n  map Œ∑ := LeftLift.homMk (h ‚óÅ Œ∑.right) <| by\n    dsimp only [whisker_lift, whisker_unit]\n    rw [‚Üê LeftLift.w Œ∑]\n    simp [- LeftLift.w]\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whiskerIdCancel_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\ns : CategoryTheory.Bicategory.LeftLift f (CategoryTheory.CategoryStruct.comp (CategoryTheory.CategoryStruct.id c) g)\nt : CategoryTheory.Bicategory.LeftLift f g\nœÑ : Quiver.Hom s (t.whisker (CategoryTheory.CategoryStruct.id c))\n‚ä¢ Eq (s.whiskerIdCancel œÑ).right (CategoryTheory.CategoryStruct.comp œÑ.right (CategoryTheory.Bicategory.leftUnitor t.lift).hom)","decl":"/-- Define a morphism between left lifts by cancelling the whiskered identities. -/\n@[simps! right]\ndef whiskerIdCancel\n    (s : LeftLift f (ùüô c ‚â´ g)) {t : LeftLift f g} (œÑ : s ‚ü∂ t.whisker (ùüô c)) :\n    s.ofIdComp ‚ü∂ t :=\n  LeftLift.homMk (œÑ.right ‚â´ (Œª_ _).hom)\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whiskerHom_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\ns t : CategoryTheory.Bicategory.LeftLift f g\ni : Quiver.Hom s t\nx : B\nh : Quiver.Hom x c\n‚ä¢ Eq (CategoryTheory.Bicategory.LeftLift.whiskerHom i h).right (CategoryTheory.Bicategory.whiskerLeft h i.right)","decl":"/-- Construct a morphism between whiskered lifts. -/\n@[simps! right]\ndef whiskerHom (i : s ‚ü∂ t) {x : B} (h : x ‚ü∂ c) :\n    s.whisker h ‚ü∂ t.whisker h :=\n  StructuredArrow.homMk (h ‚óÅ i.right) <| by\n    rw [‚Üê cancel_mono (Œ±_ h _ _).hom]\n    calc\n      _ = h ‚óÅ (unit s ‚â´ i.right ‚ñ∑ f) := by simp [- LeftLift.w]\n      _ = h ‚óÅ unit t := congrArg (h ‚óÅ ¬∑) (LeftLift.w i)\n      _ = _ := by simp\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whiskerOfIdCompIsoSelf_inv_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f g\n‚ä¢ Eq t.whiskerOfIdCompIsoSelf.inv.right (CategoryTheory.Bicategory.leftUnitor t.lift).inv","decl":"/-- The isomorphism between left lifts induced by a left unitor. -/\n@[simps! hom_right inv_right]\ndef whiskerOfIdCompIsoSelf (t : LeftLift f g) : (t.whisker (ùüô c)).ofIdComp ‚âÖ t :=\n  StructuredArrow.isoMk (Œª_ (lift t))\n\n"}
{"name":"CategoryTheory.Bicategory.LeftLift.whiskerOfIdCompIsoSelf_hom_right","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\nt : CategoryTheory.Bicategory.LeftLift f g\n‚ä¢ Eq t.whiskerOfIdCompIsoSelf.hom.right (CategoryTheory.Bicategory.leftUnitor t.lift).hom","decl":"/-- The isomorphism between left lifts induced by a left unitor. -/\n@[simps! hom_right inv_right]\ndef whiskerOfIdCompIsoSelf (t : LeftLift f g) : (t.whisker (ùüô c)).ofIdComp ‚âÖ t :=\n  StructuredArrow.isoMk (Œª_ (lift t))\n\n"}
{"name":"CategoryTheory.Bicategory.RightExtension.w_assoc","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\ns t : CategoryTheory.Bicategory.RightExtension f g\nŒ∑ : Quiver.Hom s t\nZ : Quiver.Hom a c\nh : Quiver.Hom g Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f Œ∑.left) (CategoryTheory.CategoryStruct.comp t.counit h)) (CategoryTheory.CategoryStruct.comp s.counit h)","decl":"@[reassoc (attr := simp)]\ntheorem w {s t : RightExtension f g} (Œ∑ : s ‚ü∂ t) :\n    f ‚óÅ Œ∑.left ‚â´ t.counit = s.counit :=\n  CostructuredArrow.w Œ∑\n\n"}
{"name":"CategoryTheory.Bicategory.RightExtension.w","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom a b\ng : Quiver.Hom a c\ns t : CategoryTheory.Bicategory.RightExtension f g\nŒ∑ : Quiver.Hom s t\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerLeft f Œ∑.left) t.counit) s.counit","decl":"@[reassoc (attr := simp)]\ntheorem w {s t : RightExtension f g} (Œ∑ : s ‚ü∂ t) :\n    f ‚óÅ Œ∑.left ‚â´ t.counit = s.counit :=\n  CostructuredArrow.w Œ∑\n\n"}
{"name":"CategoryTheory.Bicategory.RightLift.w","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\ns t : CategoryTheory.Bicategory.RightLift f g\nh : Quiver.Hom s t\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight h.left f) t.counit) s.counit","decl":"@[reassoc (attr := simp)]\ntheorem w {s t : RightLift f g} (h : s ‚ü∂ t) :\n    h.left ‚ñ∑ f ‚â´ t.counit = s.counit :=\n  CostructuredArrow.w h\n\n"}
{"name":"CategoryTheory.Bicategory.RightLift.w_assoc","module":"Mathlib.CategoryTheory.Bicategory.Extension","initialProofState":"B : Type u\ninst‚úù : CategoryTheory.Bicategory B\na b c : B\nf : Quiver.Hom b a\ng : Quiver.Hom c a\ns t : CategoryTheory.Bicategory.RightLift f g\nh‚úù : Quiver.Hom s t\nZ : Quiver.Hom c a\nh : Quiver.Hom g Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (CategoryTheory.Bicategory.whiskerRight h‚úù.left f) (CategoryTheory.CategoryStruct.comp t.counit h)) (CategoryTheory.CategoryStruct.comp s.counit h)","decl":"@[reassoc (attr := simp)]\ntheorem w {s t : RightLift f g} (h : s ‚ü∂ t) :\n    h.left ‚ñ∑ f ‚â´ t.counit = s.counit :=\n  CostructuredArrow.w h\n\n"}
