{"name":"Sublattice.ext_mem_iff","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\n‚ä¢ Iff (Eq S T) (‚àÄ (x : X), Iff (Membership.mem S x) (Membership.mem T x))","decl":"@[ext] lemma ext_mem (h : ‚àÄ x, x ‚àà S ‚Üî x ‚àà T) : S = T := SetLike.ext h\n\n"}
{"name":"Sublattice.ext_mem","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\nh : ‚àÄ (x : X), Iff (Membership.mem S x) (Membership.mem T x)\n‚ä¢ Eq S T","decl":"@[ext] lemma ext_mem (h : ‚àÄ x, x ‚àà S ‚Üî x ‚àà T) : S = T := SetLike.ext h\n\n"}
{"name":"Sublattice.mem_subtype","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nT : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (L.subtype T) x) (Membership.mem T x)","decl":"lemma mem_subtype : x ‚àà L.subtype T ‚Üî x ‚àà T := Iff.rfl\n\n"}
{"name":"Sublattice.setLike_mem_inf","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (Min.min S T) x) (And (Membership.mem S x) (Membership.mem T x))","decl":"@[simp] lemma setLike_mem_inf : x ‚àà S ‚äì T ‚Üî x ‚àà S ‚àß x ‚àà T := by simp [‚Üê mem_subtype]\n"}
{"name":"Sublattice.setLike_mem_sup","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (Max.max S T) x) (Or (Membership.mem S x) (Membership.mem T x))","decl":"@[simp] lemma setLike_mem_sup : x ‚àà S ‚äî T ‚Üî x ‚àà S ‚à® x ‚àà T := by simp [‚Üê mem_subtype]\n\n"}
{"name":"Sublattice.setLike_mem_coe","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nT : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (‚ÜëT) x) (Membership.mem T x)","decl":"@[simp] lemma setLike_mem_coe : x ‚àà T.val ‚Üî x ‚àà T := Iff.rfl\n"}
{"name":"Sublattice.setLike_mem_mk","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : Sublattice (Set X)\nx : X\nU : Set X\nh : Membership.mem L U\n‚ä¢ Iff (Membership.mem ‚ü®U, h‚ü© x) (Membership.mem U x)","decl":"@[simp] lemma setLike_mem_mk (U : Set X) (h : U ‚àà L) : x ‚àà (‚ü®U, h‚ü© : L) ‚Üî x ‚àà U := Iff.rfl\n\n"}
{"name":"CompleteSublattice.ext_iff","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\n‚ä¢ Iff (Eq S T) (‚àÄ (x : X), Iff (Membership.mem S x) (Membership.mem T x))","decl":"@[ext] lemma ext (h : ‚àÄ x, x ‚àà S ‚Üî x ‚àà T) : S = T := SetLike.ext h\n\n"}
{"name":"CompleteSublattice.ext","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\nh : ‚àÄ (x : X), Iff (Membership.mem S x) (Membership.mem T x)\n‚ä¢ Eq S T","decl":"@[ext] lemma ext (h : ‚àÄ x, x ‚àà S ‚Üî x ‚àà T) : S = T := SetLike.ext h\n\n"}
{"name":"CompleteSublattice.mem_subtype","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nT : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (L.subtype T) x) (Membership.mem T x)","decl":"lemma mem_subtype : x ‚àà L.subtype T ‚Üî x ‚àà T := Iff.rfl\n\n"}
{"name":"CompleteSublattice.mem_inf","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (Min.min S T) x) (And (Membership.mem S x) (Membership.mem T x))","decl":"@[simp] lemma mem_inf : x ‚àà S ‚äì T ‚Üî x ‚àà S ‚àß x ‚àà T := by simp [‚Üê mem_subtype]\n"}
{"name":"CompleteSublattice.mem_sInf","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nùíÆ : Set (Subtype fun x => Membership.mem L x)\nx : X\n‚ä¢ Iff (Membership.mem (InfSet.sInf ùíÆ) x) (‚àÄ (T : Subtype fun x => Membership.mem L x), Membership.mem ùíÆ T ‚Üí Membership.mem T x)","decl":"@[simp] lemma mem_sInf : x ‚àà sInf ùíÆ ‚Üî ‚àÄ T ‚àà ùíÆ, x ‚àà T := by simp [‚Üê mem_subtype]\n"}
{"name":"CompleteSublattice.mem_iInf","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nI : Sort u_2\nf : I ‚Üí Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (iInf fun i => f i) x) (‚àÄ (i : I), Membership.mem (f i) x)","decl":"@[simp] lemma mem_iInf : x ‚àà ‚®Ö i : I, f i ‚Üî ‚àÄ i : I, x ‚àà f i := by simp [‚Üê mem_subtype]\n"}
{"name":"CompleteSublattice.mem_top","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nx : X\n‚ä¢ Membership.mem Top.top x","decl":"@[simp] lemma mem_top : x ‚àà (‚ä§ : L) := by simp [‚Üê mem_subtype]\n\n"}
{"name":"CompleteSublattice.mem_sup","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nS T : Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (Max.max S T) x) (Or (Membership.mem S x) (Membership.mem T x))","decl":"@[simp] lemma mem_sup : x ‚àà S ‚äî T ‚Üî x ‚àà S ‚à® x ‚àà T := by simp [‚Üê mem_subtype]\n"}
{"name":"CompleteSublattice.mem_sSup","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nùíÆ : Set (Subtype fun x => Membership.mem L x)\nx : X\n‚ä¢ Iff (Membership.mem (SupSet.sSup ùíÆ) x) (Exists fun T => And (Membership.mem ùíÆ T) (Membership.mem T x))","decl":"@[simp] lemma mem_sSup : x ‚àà sSup ùíÆ ‚Üî ‚àÉ T ‚àà ùíÆ, x ‚àà T := by simp [‚Üê mem_subtype]\n"}
{"name":"CompleteSublattice.mem_iSup","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nI : Sort u_2\nf : I ‚Üí Subtype fun x => Membership.mem L x\nx : X\n‚ä¢ Iff (Membership.mem (iSup fun i => f i) x) (Exists fun i => Membership.mem (f i) x)","decl":"@[simp] lemma mem_iSup : x ‚àà ‚®Ü i : I, f i ‚Üî ‚àÉ i : I, x ‚àà f i := by simp [‚Üê mem_subtype]\n"}
{"name":"CompleteSublattice.not_mem_bot","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nx : X\n‚ä¢ Not (Membership.mem Bot.bot x)","decl":"@[simp] lemma not_mem_bot : ¬¨ x ‚àà (‚ä• : L) := by simp [‚Üê mem_subtype]\n\n"}
{"name":"CompleteSublattice.mem_mk","module":"Mathlib.Order.CompleteLattice.SetLike","initialProofState":"X : Type u_1\nL : CompleteSublattice (Set X)\nx : X\nU : Set X\nh : Membership.mem L U\n‚ä¢ Iff (Membership.mem ‚ü®U, h‚ü© x) (Membership.mem U x)","decl":"@[simp] lemma mem_mk (U : Set X) (h : U ‚àà L) : x ‚àà (‚ü®U, h‚ü© : L) ‚Üî x ‚àà U := Iff.rfl\n\n"}
