{"name":"List.pairwise_iff","module":"Mathlib.Data.List.Pairwise","initialProofState":"α : Type u\nR : α → α → Prop\na✝ : List α\n⊢ Iff (List.Pairwise R a✝) (Or (Eq a✝ List.nil) (Exists fun a => Exists fun l => And (∀ (a' : α), Membership.mem l a' → R a a') (And (List.Pairwise R l) (Eq a✝ (List.cons a l)))))","decl":"mk_iff_of_inductive_prop List.Pairwise List.pairwise_iff\n\n"}
{"name":"List.Pairwise.forall_of_forall","module":"Mathlib.Data.List.Pairwise","initialProofState":"α : Type u_1\nR : α → α → Prop\nl : List α\nH : Symmetric R\nH₁ : ∀ (x : α), Membership.mem l x → R x x\nH₂ : List.Pairwise R l\nx : α\na✝¹ : Membership.mem l x\ny : α\na✝ : Membership.mem l y\n⊢ R x y","decl":"theorem Pairwise.forall_of_forall (H : Symmetric R) (H₁ : ∀ x ∈ l, R x x) (H₂ : l.Pairwise R) :\n    ∀ ⦃x⦄, x ∈ l → ∀ ⦃y⦄, y ∈ l → R x y :=\n  H₂.forall_of_forall_of_flip H₁ <| by rwa [H.flip_eq]\n\n"}
{"name":"List.Pairwise.forall","module":"Mathlib.Data.List.Pairwise","initialProofState":"α : Type u_1\nR : α → α → Prop\nl : List α\nhR : Symmetric R\nhl : List.Pairwise R l\na : α\na✝² : Membership.mem l a\nb : α\na✝¹ : Membership.mem l b\na✝ : Ne a b\n⊢ R a b","decl":"theorem Pairwise.forall (hR : Symmetric R) (hl : l.Pairwise R) :\n    ∀ ⦃a⦄, a ∈ l → ∀ ⦃b⦄, b ∈ l → a ≠ b → R a b := by\n  apply Pairwise.forall_of_forall\n  · exact fun a b h hne => hR (h hne.symm)\n  · exact fun _ _ hx => (hx rfl).elim\n  · exact hl.imp (@fun a b h _ => by exact h)\n\n"}
{"name":"List.Pairwise.set_pairwise","module":"Mathlib.Data.List.Pairwise","initialProofState":"α : Type u_1\nR : α → α → Prop\nl : List α\nhl : List.Pairwise R l\nhr : Symmetric R\n⊢ (setOf fun x => Membership.mem l x).Pairwise R","decl":"theorem Pairwise.set_pairwise (hl : Pairwise R l) (hr : Symmetric R) : { x | x ∈ l }.Pairwise R :=\n  hl.forall hr\n\n"}
{"name":"List.pairwise_of_reflexive_of_forall_ne","module":"Mathlib.Data.List.Pairwise","initialProofState":"α : Type u_1\nl : List α\nr : α → α → Prop\nhr : Reflexive r\nh : ∀ (a : α), Membership.mem l a → ∀ (b : α), Membership.mem l b → Ne a b → r a b\n⊢ List.Pairwise r l","decl":"theorem pairwise_of_reflexive_of_forall_ne {l : List α} {r : α → α → Prop} (hr : Reflexive r)\n    (h : ∀ a ∈ l, ∀ b ∈ l, a ≠ b → r a b) : l.Pairwise r := by\n  rw [pairwise_iff_forall_sublist]\n  intro a b hab\n  if heq : a = b then\n    cases heq; apply hr\n  else\n    apply h <;> try (apply hab.subset; simp)\n    exact heq\n\n"}
{"name":"List.Pairwise.pwFilter","module":"Mathlib.Data.List.Pairwise","initialProofState":"α : Type u_1\nR : α → α → Prop\ninst✝ : DecidableRel R\nl : List α\na✝ : List.Pairwise R l\n⊢ Eq (List.pwFilter R l) l","decl":"protected alias ⟨_, Pairwise.pwFilter⟩ := pwFilter_eq_self\n\n"}
