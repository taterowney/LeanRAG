{"name":"IsSpectralMap.isCompact_preimage_of_isOpen","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nself : IsSpectralMap f\ns : Set β\na✝¹ : IsOpen s\na✝ : IsCompact s\n⊢ IsCompact (Set.preimage f s)","decl":"/-- A function between topological spaces is spectral if it is continuous and the preimage of every\ncompact open set is compact open. -/\n@[stacks 005A, stacks 08YG]\nstructure IsSpectralMap (f : α → β) extends Continuous f : Prop where\n  /-- A function between topological spaces is spectral if it is continuous and the preimage of\n   every compact open set is compact open. -/\n  isCompact_preimage_of_isOpen ⦃s : Set β⦄ : IsOpen s → IsCompact s → IsCompact (f ⁻¹' s)\n\n"}
{"name":"IsSpectralMap.toContinuous","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nself : IsSpectralMap f\n⊢ Continuous f","decl":"/-- A function between topological spaces is spectral if it is continuous and the preimage of every\ncompact open set is compact open. -/\n@[stacks 005A, stacks 08YG]\nstructure IsSpectralMap (f : α → β) extends Continuous f : Prop where\n  /-- A function between topological spaces is spectral if it is continuous and the preimage of\n   every compact open set is compact open. -/\n  isCompact_preimage_of_isOpen ⦃s : Set β⦄ : IsOpen s → IsCompact s → IsCompact (f ⁻¹' s)\n\n"}
{"name":"IsCompact.preimage_of_isOpen","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\ns : Set β\nhf : IsSpectralMap f\nh₀ : IsCompact s\nh₁ : IsOpen s\n⊢ IsCompact (Set.preimage f s)","decl":"theorem IsCompact.preimage_of_isOpen (hf : IsSpectralMap f) (h₀ : IsCompact s) (h₁ : IsOpen s) :\n    IsCompact (f ⁻¹' s) :=\n  hf.isCompact_preimage_of_isOpen h₁ h₀\n\n"}
{"name":"IsSpectralMap.continuous","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nhf : IsSpectralMap f\n⊢ Continuous f","decl":"theorem IsSpectralMap.continuous {f : α → β} (hf : IsSpectralMap f) : Continuous f :=\n  hf.toContinuous\n\n"}
{"name":"isSpectralMap_id","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ IsSpectralMap id","decl":"theorem isSpectralMap_id : IsSpectralMap (@id α) :=\n  ⟨continuous_id, fun _s _ => id⟩\n\n"}
{"name":"IsSpectralMap.comp","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : β → γ\ng : α → β\nhf : IsSpectralMap f\nhg : IsSpectralMap g\n⊢ IsSpectralMap (Function.comp f g)","decl":"@[stacks 005B]\ntheorem IsSpectralMap.comp {f : β → γ} {g : α → β} (hf : IsSpectralMap f) (hg : IsSpectralMap g) :\n    IsSpectralMap (f ∘ g) :=\n  ⟨hf.continuous.comp hg.continuous, fun _s hs₀ hs₁ =>\n    ((hs₁.preimage_of_isOpen hf hs₀).preimage_of_isOpen hg) (hs₀.preimage hf.continuous)⟩\n\n"}
{"name":"SpectralMap.mk.sizeOf_spec","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoFun : α → β\nspectral' : IsSpectralMap toFun\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, spectral' := spectral' }) (HAdd.hAdd 1 (SizeOf.sizeOf spectral'))","decl":"/-- The type of spectral maps from `α` to `β`. -/\nstructure SpectralMap (α β : Type*) [TopologicalSpace α] [TopologicalSpace β] where\n  /-- function between topological spaces -/\n  toFun : α → β\n  /-- proof that `toFun` is a spectral map -/\n  spectral' : IsSpectralMap toFun\n\n"}
{"name":"SpectralMap.mk.inj","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ntoFun✝ : α → β\nspectral'✝ : IsSpectralMap toFun✝\ntoFun : α → β\nspectral' : IsSpectralMap toFun\nx✝ : Eq { toFun := toFun✝, spectral' := spectral'✝ } { toFun := toFun, spectral' := spectral' }\n⊢ Eq toFun✝ toFun","decl":"/-- The type of spectral maps from `α` to `β`. -/\nstructure SpectralMap (α β : Type*) [TopologicalSpace α] [TopologicalSpace β] where\n  /-- function between topological spaces -/\n  toFun : α → β\n  /-- proof that `toFun` is a spectral map -/\n  spectral' : IsSpectralMap toFun\n\n"}
{"name":"SpectralMap.mk.injEq","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ntoFun✝ : α → β\nspectral'✝ : IsSpectralMap toFun✝\ntoFun : α → β\nspectral' : IsSpectralMap toFun\n⊢ Eq (Eq { toFun := toFun✝, spectral' := spectral'✝ } { toFun := toFun, spectral' := spectral' }) (Eq toFun✝ toFun)","decl":"/-- The type of spectral maps from `α` to `β`. -/\nstructure SpectralMap (α β : Type*) [TopologicalSpace α] [TopologicalSpace β] where\n  /-- function between topological spaces -/\n  toFun : α → β\n  /-- proof that `toFun` is a spectral map -/\n  spectral' : IsSpectralMap toFun\n\n"}
{"name":"SpectralMap.spectral'","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nself : SpectralMap α β\n⊢ IsSpectralMap self.toFun","decl":"/-- The type of spectral maps from `α` to `β`. -/\nstructure SpectralMap (α β : Type*) [TopologicalSpace α] [TopologicalSpace β] where\n  /-- function between topological spaces -/\n  toFun : α → β\n  /-- proof that `toFun` is a spectral map -/\n  spectral' : IsSpectralMap toFun\n\n"}
{"name":"SpectralMapClass.map_spectral","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"F : Type u_6\nα : Type u_7\nβ : Type u_8\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : SpectralMapClass F α β\nf : F\n⊢ IsSpectralMap ⇑f","decl":"/-- `SpectralMapClass F α β` states that `F` is a type of spectral maps.\n\nYou should extend this class when you extend `SpectralMap`. -/\nclass SpectralMapClass (F α β : Type*) [TopologicalSpace α] [TopologicalSpace β]\n    [FunLike F α β] : Prop where\n  /-- statement that `F` is a type of spectral maps -/\n  map_spectral (f : F) : IsSpectralMap f\n\n"}
{"name":"SpectralMapClass.toContinuousMapClass","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : FunLike F α β\ninst✝ : SpectralMapClass F α β\n⊢ ContinuousMapClass F α β","decl":"instance (priority := 100) SpectralMapClass.toContinuousMapClass [TopologicalSpace α]\n    [TopologicalSpace β] [FunLike F α β] [SpectralMapClass F α β] : ContinuousMapClass F α β :=\n  { ‹SpectralMapClass F α β› with map_continuous := fun f => (map_spectral f).continuous }\n\n"}
{"name":"SpectralMap.instSpectralMapClass","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\n⊢ SpectralMapClass (SpectralMap α β) α β","decl":"instance : SpectralMapClass (SpectralMap α β) α β where\n  map_spectral f := f.spectral'\n\n"}
{"name":"SpectralMap.toFun_eq_coe","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : SpectralMap α β\n⊢ Eq f.toFun ⇑f","decl":"@[simp]\ntheorem toFun_eq_coe {f : SpectralMap α β} : f.toFun = (f : α → β) :=\n  rfl\n\n"}
{"name":"SpectralMap.ext_iff","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf g : SpectralMap α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : SpectralMap α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SpectralMap.ext","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf g : SpectralMap α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : SpectralMap α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"SpectralMap.coe_copy","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : SpectralMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : SpectralMap α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"SpectralMap.copy_eq","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : SpectralMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : SpectralMap α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"SpectralMap.coe_id","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\n⊢ Eq (⇑(SpectralMap.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(SpectralMap.id α) = id :=\n  rfl\n\n"}
{"name":"SpectralMap.id_apply","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\ninst✝ : TopologicalSpace α\na : α\n⊢ Eq ((SpectralMap.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : SpectralMap.id α a = a :=\n  rfl\n\n"}
{"name":"SpectralMap.coe_comp","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : SpectralMap β γ\ng : SpectralMap α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : SpectralMap β γ) (g : SpectralMap α β) : (f.comp g : α → γ) = f ∘ g :=\n  rfl\n\n"}
{"name":"SpectralMap.comp_apply","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : SpectralMap β γ\ng : SpectralMap α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : SpectralMap β γ) (g : SpectralMap α β) (a : α) : (f.comp g) a = f (g a) :=\n  rfl\n\n"}
{"name":"SpectralMap.coe_comp_continuousMap","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : SpectralMap β γ\ng : SpectralMap α β\n⊢ Eq (Function.comp ⇑f ⇑g) (Function.comp ⇑↑f ⇑↑g)","decl":"theorem coe_comp_continuousMap (f : SpectralMap β γ) (g : SpectralMap α β) :\n    f ∘ g = (f : ContinuousMap β γ) ∘ (g : ContinuousMap α β) :=\n   rfl\n\n"}
{"name":"SpectralMap.coe_comp_continuousMap'","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : SpectralMap β γ\ng : SpectralMap α β\n⊢ Eq (↑(f.comp g)) ((↑f).comp ↑g)","decl":"@[simp]\ntheorem coe_comp_continuousMap' (f : SpectralMap β γ) (g : SpectralMap α β) :\n    (f.comp g : ContinuousMap α γ) = (f : ContinuousMap β γ).comp g :=\n  rfl\n\n"}
{"name":"SpectralMap.comp_assoc","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace γ\ninst✝ : TopologicalSpace δ\nf : SpectralMap γ δ\ng : SpectralMap β γ\nh : SpectralMap α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : SpectralMap γ δ) (g : SpectralMap β γ) (h : SpectralMap α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"SpectralMap.comp_id","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : SpectralMap α β\n⊢ Eq (f.comp (SpectralMap.id α)) f","decl":"@[simp]\ntheorem comp_id (f : SpectralMap α β) : f.comp (SpectralMap.id α) = f :=\n  ext fun _a => rfl\n\n"}
{"name":"SpectralMap.id_comp","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : SpectralMap α β\n⊢ Eq ((SpectralMap.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : SpectralMap α β) : (SpectralMap.id β).comp f = f :=\n  ext fun _a => rfl\n\n"}
{"name":"SpectralMap.cancel_right","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng₁ g₂ : SpectralMap β γ\nf : SpectralMap α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : SpectralMap β γ} {f : SpectralMap α β} (hf : Surjective f) :\n    g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h,\n   fun a => of_eq (congrFun (congrArg comp a) f)⟩\n\n"}
{"name":"SpectralMap.cancel_left","module":"Mathlib.Topology.Spectral.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\ng : SpectralMap β γ\nf₁ f₂ : SpectralMap α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : SpectralMap β γ} {f₁ f₂ : SpectralMap α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
