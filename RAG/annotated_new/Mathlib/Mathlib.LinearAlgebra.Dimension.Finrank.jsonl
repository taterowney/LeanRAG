{"name":"Module.finrank_eq_of_rank_eq","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nn : Nat\nh : Eq (Module.rank R M) ↑n\n⊢ Eq (Module.finrank R M) n","decl":"theorem finrank_eq_of_rank_eq {n : ℕ} (h : Module.rank R M = ↑n) : finrank R M = n := by\n  apply_fun toNat at h\n  rw [toNat_natCast] at h\n  exact mod_cast h\n\n"}
{"name":"Module.rank_eq_one_iff_finrank_eq_one","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Iff (Eq (Module.rank R M) 1) (Eq (Module.finrank R M) 1)","decl":"lemma rank_eq_one_iff_finrank_eq_one : Module.rank R M = 1 ↔ finrank R M = 1 :=\n  Cardinal.toNat_eq_one.symm\n\n"}
{"name":"Module.rank_eq_ofNat_iff_finrank_eq_ofNat","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\nn : Nat\ninst✝ : n.AtLeastTwo\n⊢ Iff (Eq (Module.rank R M) (OfNat.ofNat n)) (Eq (Module.finrank R M) (OfNat.ofNat n))","decl":"/-- This is like `rank_eq_one_iff_finrank_eq_one` but works for `2`, `3`, `4`, ... -/\nlemma rank_eq_ofNat_iff_finrank_eq_ofNat (n : ℕ) [Nat.AtLeastTwo n] :\n    Module.rank R M = OfNat.ofNat n ↔ finrank R M = OfNat.ofNat n :=\n  Cardinal.toNat_eq_ofNat.symm\n\n"}
{"name":"Module.finrank_le_of_rank_le","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nn : Nat\nh : LE.le (Module.rank R M) ↑n\n⊢ LE.le (Module.finrank R M) n","decl":"theorem finrank_le_of_rank_le {n : ℕ} (h : Module.rank R M ≤ ↑n) : finrank R M ≤ n := by\n  rwa [← Cardinal.toNat_le_iff_le_of_lt_aleph0, toNat_natCast] at h\n  · exact h.trans_lt (nat_lt_aleph0 n)\n  · exact nat_lt_aleph0 n\n\n"}
{"name":"Module.finrank_lt_of_rank_lt","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nn : Nat\nh : LT.lt (Module.rank R M) ↑n\n⊢ LT.lt (Module.finrank R M) n","decl":"theorem finrank_lt_of_rank_lt {n : ℕ} (h : Module.rank R M < ↑n) : finrank R M < n := by\n  rwa [← Cardinal.toNat_lt_iff_lt_of_lt_aleph0, toNat_natCast] at h\n  · exact h.trans (nat_lt_aleph0 n)\n  · exact nat_lt_aleph0 n\n\n"}
{"name":"Module.lt_rank_of_lt_finrank","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nn : Nat\nh : LT.lt n (Module.finrank R M)\n⊢ LT.lt (↑n) (Module.rank R M)","decl":"theorem lt_rank_of_lt_finrank {n : ℕ} (h : n < finrank R M) : ↑n < Module.rank R M := by\n  rwa [← Cardinal.toNat_lt_iff_lt_of_lt_aleph0, toNat_natCast]\n  · exact nat_lt_aleph0 n\n  · contrapose! h\n    rw [finrank, Cardinal.toNat_apply_of_aleph0_le h]\n    exact n.zero_le\n\n"}
{"name":"Module.one_lt_rank_of_one_lt_finrank","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nh : LT.lt 1 (Module.finrank R M)\n⊢ LT.lt 1 (Module.rank R M)","decl":"theorem one_lt_rank_of_one_lt_finrank (h : 1 < finrank R M) : 1 < Module.rank R M := by\n  simpa using lt_rank_of_lt_finrank h\n\n"}
{"name":"Module.finrank_le_finrank_of_rank_le_rank","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\nN : Type w\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\nh : LE.le (Cardinal.lift.{w, v} (Module.rank R M)) (Cardinal.lift.{v, w} (Module.rank R N))\nh' : LT.lt (Module.rank R N) Cardinal.aleph0\n⊢ LE.le (Module.finrank R M) (Module.finrank R N)","decl":"theorem finrank_le_finrank_of_rank_le_rank\n    (h : lift.{w} (Module.rank R M) ≤ Cardinal.lift.{v} (Module.rank R N))\n    (h' : Module.rank R N < ℵ₀) : finrank R M ≤ finrank R N := by\n  simpa only [toNat_lift] using toNat_le_toNat h (lift_lt_aleph0.mpr h')\n\n"}
{"name":"LinearEquiv.finrank_eq","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module R M₂\nf : LinearEquiv (RingHom.id R) M M₂\n⊢ Eq (Module.finrank R M) (Module.finrank R M₂)","decl":"/-- The dimension of a finite dimensional space is preserved under linear equivalence. -/\ntheorem finrank_eq (f : M ≃ₗ[R] M₂) : finrank R M = finrank R M₂ := by\n  unfold finrank\n  rw [← Cardinal.toNat_lift, f.lift_rank_eq, Cardinal.toNat_lift]\n\n"}
{"name":"LinearEquiv.finrank_map_eq","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u_1\nM : Type u_2\nM₂ : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : AddCommMonoid M₂\ninst✝¹ : Module R M\ninst✝ : Module R M₂\nf : LinearEquiv (RingHom.id R) M M₂\np : Submodule R M\n⊢ Eq (Module.finrank R (Subtype fun x => Membership.mem (Submodule.map (↑f) p) x)) (Module.finrank R (Subtype fun x => Membership.mem p x))","decl":"/-- Pushforwards of finite-dimensional submodules along a `LinearEquiv` have the same finrank. -/\ntheorem finrank_map_eq (f : M ≃ₗ[R] M₂) (p : Submodule R M) :\n    finrank R (p.map (f : M →ₗ[R] M₂)) = finrank R p :=\n  (f.submoduleMap p).finrank_eq.symm\n\n"}
{"name":"LinearMap.finrank_range_of_inj","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\nN : Type w\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : AddCommMonoid N\ninst✝ : Module R N\nf : LinearMap (RingHom.id R) M N\nhf : Function.Injective ⇑f\n⊢ Eq (Module.finrank R (Subtype fun x => Membership.mem (LinearMap.range f) x)) (Module.finrank R M)","decl":"/-- The dimensions of the domain and range of an injective linear map are equal. -/\ntheorem LinearMap.finrank_range_of_inj {f : M →ₗ[R] N} (hf : Function.Injective f) :\n    finrank R (LinearMap.range f) = finrank R M := by rw [(LinearEquiv.ofInjective f hf).finrank_eq]\n\n"}
{"name":"Submodule.finrank_map_subtype_eq","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\np : Submodule R M\nq : Submodule R (Subtype fun x => Membership.mem p x)\n⊢ Eq (Module.finrank R (Subtype fun x => Membership.mem (Submodule.map p.subtype q) x)) (Module.finrank R (Subtype fun x => Membership.mem q x))","decl":"@[simp]\ntheorem Submodule.finrank_map_subtype_eq (p : Submodule R M) (q : Submodule R p) :\n    finrank R (q.map p.subtype) = finrank R q :=\n  (Submodule.equivSubtypeMap p q).symm.finrank_eq\n\n"}
{"name":"finrank_top","module":"Mathlib.LinearAlgebra.Dimension.Finrank","initialProofState":"R : Type u\nM : Type v\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (Module.finrank R (Subtype fun x => Membership.mem Top.top x)) (Module.finrank R M)","decl":"@[simp]\ntheorem finrank_top : finrank R (⊤ : Submodule R M) = finrank R M := by\n  unfold finrank\n  simp [rank_top]\n"}
