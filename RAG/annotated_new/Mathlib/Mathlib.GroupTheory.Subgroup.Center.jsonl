{"name":"AddSubgroup.coe_center","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\n⊢ Eq (↑(AddSubgroup.center G)) (Set.addCenter G)","decl":"@[to_additive]\ntheorem coe_center : ↑(center G) = Set.center G :=\n  rfl\n\n"}
{"name":"Subgroup.coe_center","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ Eq (↑(Subgroup.center G)) (Set.center G)","decl":"@[to_additive]\ntheorem coe_center : ↑(center G) = Set.center G :=\n  rfl\n\n"}
{"name":"AddSubgroup.center_toAddSubmonoid","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\n⊢ Eq (AddSubgroup.center G).toAddSubmonoid (AddSubmonoid.center G)","decl":"@[to_additive (attr := simp)]\ntheorem center_toSubmonoid : (center G).toSubmonoid = Submonoid.center G :=\n  rfl\n\n"}
{"name":"Subgroup.center_toSubmonoid","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ Eq (Subgroup.center G).toSubmonoid (Submonoid.center G)","decl":"@[to_additive (attr := simp)]\ntheorem center_toSubmonoid : (center G).toSubmonoid = Submonoid.center G :=\n  rfl\n\n"}
{"name":"Subgroup.center.isCommutative","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ (Subgroup.center G).IsCommutative","decl":"instance center.isCommutative : (center G).IsCommutative :=\n  ⟨⟨fun a b => Subtype.ext (b.2.comm a).symm⟩⟩\n\n"}
{"name":"Subgroup.centerCongr_symm_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nH : Type u_2\ninst✝ : Group H\ne : MulEquiv G H\ns : Subtype fun x => Membership.mem (Subsemigroup.center H) x\n⊢ Eq (↑((Subgroup.centerCongr e).symm s)) (e.symm ↑s)","decl":"variable {G} in\n/-- The center of isomorphic groups are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive groups are isomorphic.\"]\ndef centerCongr {H} [Group H] (e : G ≃* H) : center G ≃* center H := Submonoid.centerCongr e\n\n"}
{"name":"AddSubgroup.centerCongr_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\nH : Type u_2\ninst✝ : AddGroup H\ne : AddEquiv G H\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center G) x\n⊢ Eq (↑((AddSubgroup.centerCongr e) r)) (e ↑r)","decl":"variable {G} in\n/-- The center of isomorphic groups are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive groups are isomorphic.\"]\ndef centerCongr {H} [Group H] (e : G ≃* H) : center G ≃* center H := Submonoid.centerCongr e\n\n"}
{"name":"Subgroup.centerCongr_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nH : Type u_2\ninst✝ : Group H\ne : MulEquiv G H\nr : Subtype fun x => Membership.mem (Subsemigroup.center G) x\n⊢ Eq (↑((Subgroup.centerCongr e) r)) (e ↑r)","decl":"variable {G} in\n/-- The center of isomorphic groups are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive groups are isomorphic.\"]\ndef centerCongr {H} [Group H] (e : G ≃* H) : center G ≃* center H := Submonoid.centerCongr e\n\n"}
{"name":"AddSubgroup.centerCongr_symm_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝¹ : AddGroup G\nH : Type u_2\ninst✝ : AddGroup H\ne : AddEquiv G H\ns : Subtype fun x => Membership.mem (AddSubsemigroup.center H) x\n⊢ Eq (↑((AddSubgroup.centerCongr e).symm s)) (e.symm ↑s)","decl":"variable {G} in\n/-- The center of isomorphic groups are isomorphic. -/\n@[to_additive (attr := simps!) \"The center of isomorphic additive groups are isomorphic.\"]\ndef centerCongr {H} [Group H] (e : G ≃* H) : center G ≃* center H := Submonoid.centerCongr e\n\n"}
{"name":"Subgroup.centerToMulOpposite_symm_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\nr : Subtype fun x => Membership.mem (Subsemigroup.center (MulOpposite G)) x\n⊢ Eq (↑((Subgroup.centerToMulOpposite G).symm r)) (MulOpposite.unop ↑r)","decl":"/-- The center of a group is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive group is isomorphic to the center of its opposite.\"]\ndef centerToMulOpposite : center G ≃* center Gᵐᵒᵖ := Submonoid.centerToMulOpposite\n\n"}
{"name":"AddSubgroup.centerToAddOpposite_symm_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center (AddOpposite G)) x\n⊢ Eq (↑((AddSubgroup.centerToAddOpposite G).symm r)) (AddOpposite.unop ↑r)","decl":"/-- The center of a group is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive group is isomorphic to the center of its opposite.\"]\ndef centerToMulOpposite : center G ≃* center Gᵐᵒᵖ := Submonoid.centerToMulOpposite\n\n"}
{"name":"AddSubgroup.centerToAddOpposite_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nr : Subtype fun x => Membership.mem (AddSubsemigroup.center G) x\n⊢ Eq (↑((AddSubgroup.centerToAddOpposite G) r)) (AddOpposite.op ↑r)","decl":"/-- The center of a group is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive group is isomorphic to the center of its opposite.\"]\ndef centerToMulOpposite : center G ≃* center Gᵐᵒᵖ := Submonoid.centerToMulOpposite\n\n"}
{"name":"Subgroup.centerToMulOpposite_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\nr : Subtype fun x => Membership.mem (Subsemigroup.center G) x\n⊢ Eq (↑((Subgroup.centerToMulOpposite G) r)) (MulOpposite.op ↑r)","decl":"/-- The center of a group is isomorphic to the center of its opposite. -/\n@[to_additive (attr := simps!)\n\"The center of an additive group is isomorphic to the center of its opposite.\"]\ndef centerToMulOpposite : center G ≃* center Gᵐᵒᵖ := Submonoid.centerToMulOpposite\n\n"}
{"name":"Subgroup.val_centerUnitsEquivUnitsCenter_symm_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G₀ : Type u_2\ninst✝ : GroupWithZero G₀\nu : Units (Subtype fun x => Membership.mem (Submonoid.center G₀) x)\n⊢ Eq ↑↑((Subgroup.centerUnitsEquivUnitsCenter G₀).symm u) ↑↑u","decl":"/-- For a group with zero, the center of the units is the same as the units of the center. -/\n@[simps! apply_val_coe symm_apply_coe_val]\ndef centerUnitsEquivUnitsCenter (G₀ : Type*) [GroupWithZero G₀] :\n    Subgroup.center (G₀ˣ) ≃* (Submonoid.center G₀)ˣ where\n  toFun := MonoidHom.toHomUnits <|\n    { toFun := fun u ↦ ⟨(u : G₀ˣ),\n      (Submonoid.mem_center_iff.mpr (fun r ↦ by\n          rcases eq_or_ne r 0 with (rfl | hr)\n          · rw [mul_zero, zero_mul]\n          exact congrArg Units.val <| (u.2.comm <| Units.mk0 r hr).symm))⟩\n      map_one' := rfl\n      map_mul' := fun _ _ ↦ rfl }\n  invFun u := unitsCenterToCenterUnits G₀ u\n  left_inv _ := by ext; rfl\n  right_inv _ := by ext; rfl\n  map_mul' := map_mul _\n\n"}
{"name":"Subgroup.val_centerUnitsEquivUnitsCenter_apply_coe","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G₀ : Type u_2\ninst✝ : GroupWithZero G₀\na : Subtype fun x => Membership.mem (Subgroup.center (Units G₀)) x\n⊢ Eq ↑↑((Subgroup.centerUnitsEquivUnitsCenter G₀) a) ↑↑a","decl":"/-- For a group with zero, the center of the units is the same as the units of the center. -/\n@[simps! apply_val_coe symm_apply_coe_val]\ndef centerUnitsEquivUnitsCenter (G₀ : Type*) [GroupWithZero G₀] :\n    Subgroup.center (G₀ˣ) ≃* (Submonoid.center G₀)ˣ where\n  toFun := MonoidHom.toHomUnits <|\n    { toFun := fun u ↦ ⟨(u : G₀ˣ),\n      (Submonoid.mem_center_iff.mpr (fun r ↦ by\n          rcases eq_or_ne r 0 with (rfl | hr)\n          · rw [mul_zero, zero_mul]\n          exact congrArg Units.val <| (u.2.comm <| Units.mk0 r hr).symm))⟩\n      map_one' := rfl\n      map_mul' := fun _ _ ↦ rfl }\n  invFun u := unitsCenterToCenterUnits G₀ u\n  left_inv _ := by ext; rfl\n  right_inv _ := by ext; rfl\n  map_mul' := map_mul _\n\n"}
{"name":"Subgroup.mem_center_iff","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\nz : G\n⊢ Iff (Membership.mem (Subgroup.center G) z) (∀ (g : G), Eq (HMul.hMul g z) (HMul.hMul z g))","decl":"@[to_additive]\ntheorem mem_center_iff {z : G} : z ∈ center G ↔ ∀ g, g * z = z * g := by\n  rw [← Semigroup.mem_center_iff]\n  exact Iff.rfl\n\n"}
{"name":"AddSubgroup.mem_center_iff","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nz : G\n⊢ Iff (Membership.mem (AddSubgroup.center G) z) (∀ (g : G), Eq (HAdd.hAdd g z) (HAdd.hAdd z g))","decl":"@[to_additive]\ntheorem mem_center_iff {z : G} : z ∈ center G ↔ ∀ g, g * z = z * g := by\n  rw [← Semigroup.mem_center_iff]\n  exact Iff.rfl\n\n"}
{"name":"AddSubgroup.centerCharacteristic","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\n⊢ (AddSubgroup.center G).Characteristic","decl":"@[to_additive]\ninstance centerCharacteristic : (center G).Characteristic := by\n  refine characteristic_iff_comap_le.mpr fun ϕ g hg => ?_\n  rw [mem_center_iff]\n  intro h\n  rw [← ϕ.injective.eq_iff, map_mul, map_mul]\n  exact (hg.comm (ϕ h)).symm\n\n"}
{"name":"Subgroup.centerCharacteristic","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\n⊢ (Subgroup.center G).Characteristic","decl":"@[to_additive]\ninstance centerCharacteristic : (center G).Characteristic := by\n  refine characteristic_iff_comap_le.mpr fun ϕ g hg => ?_\n  rw [mem_center_iff]\n  intro h\n  rw [← ϕ.injective.eq_iff, map_mul, map_mul]\n  exact (hg.comm (ϕ h)).symm\n\n"}
{"name":"CommGroup.center_eq_top","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_2\ninst✝ : CommGroup G\n⊢ Eq (Subgroup.center G) Top.top","decl":"theorem _root_.CommGroup.center_eq_top {G : Type*} [CommGroup G] : center G = ⊤ := by\n  rw [eq_top_iff']\n  intro x\n  rw [Subgroup.mem_center_iff]\n  intro y\n  exact mul_comm y x\n\n"}
{"name":"Subgroup.center_le_normalizer","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\n⊢ LE.le (Subgroup.center G) H.normalizer","decl":"@[to_additive]\ntheorem center_le_normalizer : center G ≤ H.normalizer := fun x hx y => by\n  simp [← mem_center_iff.mp hx y, mul_assoc]\n\n"}
{"name":"AddSubgroup.center_le_normalizer","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ LE.le (AddSubgroup.center G) H.normalizer","decl":"@[to_additive]\ntheorem center_le_normalizer : center G ≤ H.normalizer := fun x hx y => by\n  simp [← mem_center_iff.mp hx y, mul_assoc]\n\n"}
{"name":"IsConj.eq_of_left_mem_center","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"M : Type u_2\ninst✝ : Monoid M\ng h : M\nH : IsConj g h\nHg : Membership.mem (Set.center M) g\n⊢ Eq g h","decl":"theorem eq_of_left_mem_center {g h : M} (H : IsConj g h) (Hg : g ∈ Set.center M) : g = h := by\n  rcases H with ⟨u, hu⟩; rwa [← u.mul_left_inj, Hg.comm u]\n\n"}
{"name":"IsConj.eq_of_right_mem_center","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"M : Type u_2\ninst✝ : Monoid M\ng h : M\nH : IsConj g h\nHh : Membership.mem (Set.center M) h\n⊢ Eq g h","decl":"theorem eq_of_right_mem_center {g h : M} (H : IsConj g h) (Hh : h ∈ Set.center M) : g = h :=\n  (H.symm.eq_of_left_mem_center Hh).symm\n\n"}
{"name":"ConjClasses.mk_bijOn","module":"Mathlib.GroupTheory.Subgroup.Center","initialProofState":"G : Type u_2\ninst✝ : Group G\n⊢ Set.BijOn ConjClasses.mk (↑(Subgroup.center G)) (HasCompl.compl (ConjClasses.noncenter G))","decl":"theorem mk_bijOn (G : Type*) [Group G] :\n    Set.BijOn ConjClasses.mk (↑(Subgroup.center G)) (noncenter G)ᶜ := by\n  refine ⟨fun g hg ↦ ?_, fun x hx y _ H ↦ ?_, ?_⟩\n  · simp only [mem_noncenter, Set.compl_def, Set.mem_setOf, Set.not_nontrivial_iff]\n    intro x hx y hy\n    simp only [mem_carrier_iff_mk_eq, mk_eq_mk_iff_isConj] at hx hy\n    rw [hx.eq_of_right_mem_center hg, hy.eq_of_right_mem_center hg]\n  · rw [mk_eq_mk_iff_isConj] at H\n    exact H.eq_of_left_mem_center hx\n  · rintro ⟨g⟩ hg\n    refine ⟨g, ?_, rfl⟩\n    simp only [mem_noncenter, Set.compl_def, Set.mem_setOf, Set.not_nontrivial_iff] at hg\n    rw [SetLike.mem_coe, Subgroup.mem_center_iff]\n    intro h\n    rw [← mul_inv_eq_iff_eq_mul]\n    refine hg ?_ mem_carrier_mk\n    rw [mem_carrier_iff_mk_eq]\n    apply mk_eq_mk_iff_isConj.mpr\n    rw [isConj_comm, isConj_iff]\n    exact ⟨h, rfl⟩\n\n"}
