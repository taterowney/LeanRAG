{"name":"Matrix.fromRows_apply_inl","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\ni : m₁\nj : n\n⊢ Eq (A₁.fromRows A₂ (Sum.inl i) j) (A₁ i j)","decl":"@[simp]\nlemma fromRows_apply_inl (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) (i : m₁) (j : n) :\n    (fromRows A₁ A₂) (Sum.inl i) j = A₁ i j := rfl\n\n"}
{"name":"Matrix.fromRows_apply_inr","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\ni : m₂\nj : n\n⊢ Eq (A₁.fromRows A₂ (Sum.inr i) j) (A₂ i j)","decl":"@[simp]\nlemma fromRows_apply_inr (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) (i : m₂) (j : n) :\n    (fromRows A₁ A₂) (Sum.inr i) j = A₂ i j := rfl\n\n"}
{"name":"Matrix.fromCols_apply_inl","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\ni : m\nj : n₁\n⊢ Eq (A₁.fromCols A₂ i (Sum.inl j)) (A₁ i j)","decl":"@[simp]\nlemma fromCols_apply_inl (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) (i : m) (j : n₁) :\n    (fromCols A₁ A₂) i (Sum.inl j) = A₁ i j := rfl\n\n"}
{"name":"Matrix.fromColumns_apply_inl","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\ni : m\nj : n₁\n⊢ Eq (A₁.fromCols A₂ i (Sum.inl j)) (A₁ i j)","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_apply_inl := fromCols_apply_inl\n\n"}
{"name":"Matrix.fromCols_apply_inr","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\ni : m\nj : n₂\n⊢ Eq (A₁.fromCols A₂ i (Sum.inr j)) (A₂ i j)","decl":"@[simp]\nlemma fromCols_apply_inr (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) (i : m) (j : n₂) :\n    (fromCols A₁ A₂) i (Sum.inr j) = A₂ i j := rfl\n\n"}
{"name":"Matrix.fromColumns_apply_inr","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\ni : m\nj : n₂\n⊢ Eq (A₁.fromCols A₂ i (Sum.inr j)) (A₂ i j)","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_apply_inr := fromCols_apply_inr\n\n"}
{"name":"Matrix.toRows₁_apply","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA : Matrix (Sum m₁ m₂) n R\ni : m₁\nj : n\n⊢ Eq (A.toRows₁ i j) (A (Sum.inl i) j)","decl":"@[simp]\nlemma toRows₁_apply (A : Matrix (m₁ ⊕ m₂) n R) (i : m₁) (j : n) :\n    (toRows₁ A) i j = A (Sum.inl i) j := rfl\n\n"}
{"name":"Matrix.toRows₂_apply","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA : Matrix (Sum m₁ m₂) n R\ni : m₂\nj : n\n⊢ Eq (A.toRows₂ i j) (A (Sum.inr i) j)","decl":"@[simp]\nlemma toRows₂_apply (A : Matrix (m₁ ⊕ m₂) n R) (i : m₂) (j : n) :\n    (toRows₂ A) i j = A (Sum.inr i) j := rfl\n\n"}
{"name":"Matrix.toRows₁_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\n⊢ Eq (A₁.fromRows A₂).toRows₁ A₁","decl":"@[simp]\nlemma toRows₁_fromRows (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) :\n    toRows₁ (fromRows A₁ A₂) = A₁ := rfl\n\n"}
{"name":"Matrix.toRows₂_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\n⊢ Eq (A₁.fromRows A₂).toRows₂ A₂","decl":"@[simp]\nlemma toRows₂_fromRows (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) :\n    toRows₂ (fromRows A₁ A₂) = A₂ := rfl\n\n"}
{"name":"Matrix.toCols₁_apply","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA : Matrix m (Sum n₁ n₂) R\ni : m\nj : n₁\n⊢ Eq (A.toCols₁ i j) (A i (Sum.inl j))","decl":"@[simp]\nlemma toCols₁_apply (A : Matrix m (n₁ ⊕ n₂) R) (i : m) (j : n₁) :\n    (toCols₁ A) i j = A i (Sum.inl j) := rfl\n\n"}
{"name":"Matrix.toColumns₁_apply","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA : Matrix m (Sum n₁ n₂) R\ni : m\nj : n₁\n⊢ Eq (A.toCols₁ i j) (A i (Sum.inl j))","decl":"@[deprecated (since := \"2024-12-11\")] alias toColumns₁_apply := toCols₁_apply\n\n"}
{"name":"Matrix.toCols₂_apply","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA : Matrix m (Sum n₁ n₂) R\ni : m\nj : n₂\n⊢ Eq (A.toCols₂ i j) (A i (Sum.inr j))","decl":"@[simp]\nlemma toCols₂_apply (A : Matrix m (n₁ ⊕ n₂) R) (i : m) (j : n₂) :\n    (toCols₂ A) i j = A i (Sum.inr j) := rfl\n\n"}
{"name":"Matrix.toColumns₂_apply","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA : Matrix m (Sum n₁ n₂) R\ni : m\nj : n₂\n⊢ Eq (A.toCols₂ i j) (A i (Sum.inr j))","decl":"@[deprecated (since := \"2024-12-11\")] alias toColumns₂_apply := toCols₂_apply\n\n"}
{"name":"Matrix.toCols₁_fromCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).toCols₁ A₁","decl":"@[simp]\nlemma toCols₁_fromCols (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) :\n    toCols₁ (fromCols A₁ A₂) = A₁ := rfl\n\n"}
{"name":"Matrix.toColumns₁_fromColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).toCols₁ A₁","decl":"@[deprecated (since := \"2024-12-11\")] alias toColumns₁_fromColumns := toCols₁_fromCols\n\n"}
{"name":"Matrix.toCols₂_fromCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).toCols₂ A₂","decl":"@[simp]\nlemma toCols₂_fromCols (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) :\n    toCols₂ (fromCols A₁ A₂) = A₂ := rfl\n\n"}
{"name":"Matrix.toColumns₂_fromColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).toCols₂ A₂","decl":"@[deprecated (since := \"2024-12-11\")] alias toColumns₂_fromColumns := toCols₂_fromCols\n\n"}
{"name":"Matrix.fromCols_toCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA : Matrix m (Sum n₁ n₂) R\n⊢ Eq (A.toCols₁.fromCols A.toCols₂) A","decl":"@[simp]\nlemma fromCols_toCols (A : Matrix m (n₁ ⊕ n₂) R) :\n    fromCols A.toCols₁ A.toCols₂ = A := by\n  ext i (j | j) <;> simp\n\n"}
{"name":"Matrix.fromColumns_toColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA : Matrix m (Sum n₁ n₂) R\n⊢ Eq (A.toCols₁.fromCols A.toCols₂) A","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_toColumns := fromCols_toCols\n\n"}
{"name":"Matrix.fromRows_toRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA : Matrix (Sum m₁ m₂) n R\n⊢ Eq (A.toRows₁.fromRows A.toRows₂) A","decl":"@[simp]\nlemma fromRows_toRows (A : Matrix (m₁ ⊕ m₂) n R) : fromRows A.toRows₁ A.toRows₂ = A := by\n  ext (i | i) j <;> simp\n\n"}
{"name":"Matrix.fromRows_inj","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\n⊢ Function.Injective2 Matrix.fromRows","decl":"lemma fromRows_inj : Function.Injective2 (@fromRows R m₁ m₂ n) := by\n  intros x1 x2 y1 y2\n  simp [← Matrix.ext_iff]\n\n"}
{"name":"Matrix.fromCols_inj","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\n⊢ Function.Injective2 Matrix.fromCols","decl":"lemma fromCols_inj : Function.Injective2 (@fromCols R m n₁ n₂) := by\n  intros x1 x2 y1 y2\n  simp only [funext_iff, ← Matrix.ext_iff]\n  aesop\n\n"}
{"name":"Matrix.fromColumns_inj","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\n⊢ Function.Injective2 Matrix.fromCols","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_inj := fromCols_inj\n\n"}
{"name":"Matrix.fromCols_ext_iff","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\nB₁ : Matrix m n₁ R\nB₂ : Matrix m n₂ R\n⊢ Iff (Eq (A₁.fromCols A₂) (B₁.fromCols B₂)) (And (Eq A₁ B₁) (Eq A₂ B₂))","decl":"lemma fromCols_ext_iff (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) (B₁ : Matrix m n₁ R)\n    (B₂ : Matrix m n₂ R) :\n    fromCols A₁ A₂ = fromCols B₁ B₂ ↔ A₁ = B₁ ∧ A₂ = B₂ := fromCols_inj.eq_iff\n\n"}
{"name":"Matrix.fromColumns_ext_iff","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\nB₁ : Matrix m n₁ R\nB₂ : Matrix m n₂ R\n⊢ Iff (Eq (A₁.fromCols A₂) (B₁.fromCols B₂)) (And (Eq A₁ B₁) (Eq A₂ B₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_ext_iff := fromCols_ext_iff\n\n"}
{"name":"Matrix.fromRows_ext_iff","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\nB₁ : Matrix m₁ n R\nB₂ : Matrix m₂ n R\n⊢ Iff (Eq (A₁.fromRows A₂) (B₁.fromRows B₂)) (And (Eq A₁ B₁) (Eq A₂ B₂))","decl":"lemma fromRows_ext_iff (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) (B₁ : Matrix m₁ n R)\n    (B₂ : Matrix m₂ n R) :\n    fromRows A₁ A₂ = fromRows B₁ B₂ ↔ A₁ = B₁ ∧ A₂ = B₂ := fromRows_inj.eq_iff\n\n"}
{"name":"Matrix.transpose_fromCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).transpose (A₁.transpose.fromRows A₂.transpose)","decl":"/-- A column partitioned matrix when transposed gives a row partitioned matrix with columns of the\ninitial matrix transposed to become rows. -/\nlemma transpose_fromCols (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) :\n    transpose (fromCols A₁ A₂) = fromRows (transpose A₁) (transpose A₂) := by\n  ext (i | i) j <;> simp\n\n"}
{"name":"Matrix.transpose_fromColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).transpose (A₁.transpose.fromRows A₂.transpose)","decl":"@[deprecated (since := \"2024-12-11\")] alias transpose_fromColumns := transpose_fromCols\n\n"}
{"name":"Matrix.transpose_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\n⊢ Eq (A₁.fromRows A₂).transpose (A₁.transpose.fromCols A₂.transpose)","decl":"/-- A row partitioned matrix when transposed gives a column partitioned matrix with rows of the\ninitial matrix transposed to become columns. -/\nlemma transpose_fromRows (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) :\n    transpose (fromRows A₁ A₂) = fromCols (transpose A₁) (transpose A₂) := by\n  ext i (j | j) <;> simp\n\n"}
{"name":"Matrix.fromRows_neg","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝ : Neg R\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\n⊢ Eq (Neg.neg (A₁.fromRows A₂)) ((Neg.neg A₁).fromRows (Neg.neg A₂))","decl":"/-- Negating a matrix partitioned by rows is equivalent to negating each of the rows. -/\n@[simp]\nlemma fromRows_neg (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) :\n    -fromRows A₁ A₂ = fromRows (-A₁) (-A₂) := by\n  ext (i | i) j <;> simp\n\n"}
{"name":"Matrix.fromCols_neg","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝ : Neg R\nA₁ : Matrix n m₁ R\nA₂ : Matrix n m₂ R\n⊢ Eq (Neg.neg (A₁.fromCols A₂)) ((Neg.neg A₁).fromCols (Neg.neg A₂))","decl":"/-- Negating a matrix partitioned by columns is equivalent to negating each of the columns. -/\n@[simp]\nlemma fromCols_neg (A₁ : Matrix n m₁ R) (A₂ : Matrix n m₂ R) :\n    -fromCols A₁ A₂ = fromCols (-A₁) (-A₂) := by\n  ext i (j | j) <;> simp\n\n"}
{"name":"Matrix.fromColumns_neg","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝ : Neg R\nA₁ : Matrix n m₁ R\nA₂ : Matrix n m₂ R\n⊢ Eq (Neg.neg (A₁.fromCols A₂)) ((Neg.neg A₁).fromCols (Neg.neg A₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_neg := fromCols_neg\n\n"}
{"name":"Matrix.fromCols_fromRows_eq_fromBlocks","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn₁ : Type u_6\nn₂ : Type u_7\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq ((B₁₁.fromRows B₂₁).fromCols (B₁₂.fromRows B₂₂)) (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂)","decl":"@[simp]\nlemma fromCols_fromRows_eq_fromBlocks (B₁₁ : Matrix m₁ n₁ R) (B₁₂ : Matrix m₁ n₂ R)\n    (B₂₁ : Matrix m₂ n₁ R) (B₂₂ : Matrix m₂ n₂ R) :\n    fromCols (fromRows B₁₁ B₂₁) (fromRows B₁₂ B₂₂) = fromBlocks B₁₁ B₁₂ B₂₁ B₂₂ := by\n  ext (_ | _) (_ | _) <;> simp\n\n"}
{"name":"Matrix.fromColumns_fromRows_eq_fromBlocks","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn₁ : Type u_6\nn₂ : Type u_7\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq ((B₁₁.fromRows B₂₁).fromCols (B₁₂.fromRows B₂₂)) (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂)","decl":"@[deprecated (since := \"2024-12-11\")]\nalias fromColumns_fromRows_eq_fromBlocks := fromCols_fromRows_eq_fromBlocks\n\n"}
{"name":"Matrix.fromRows_fromCols_eq_fromBlocks","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn₁ : Type u_6\nn₂ : Type u_7\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq ((B₁₁.fromCols B₁₂).fromRows (B₂₁.fromCols B₂₂)) (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂)","decl":"@[simp]\nlemma fromRows_fromCols_eq_fromBlocks (B₁₁ : Matrix m₁ n₁ R) (B₁₂ : Matrix m₁ n₂ R)\n    (B₂₁ : Matrix m₂ n₁ R) (B₂₂ : Matrix m₂ n₂ R) :\n    fromRows (fromCols B₁₁ B₁₂) (fromCols B₂₁ B₂₂) = fromBlocks B₁₁ B₁₂ B₂₁ B₂₂ := by\n  ext (_ | _) (_ | _) <;> simp\n\n"}
{"name":"Matrix.fromRows_fromColumn_eq_fromBlocks","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn₁ : Type u_6\nn₂ : Type u_7\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq ((B₁₁.fromCols B₁₂).fromRows (B₂₁.fromCols B₂₂)) (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂)","decl":"@[deprecated (since := \"2024-12-11\")]\nalias fromRows_fromColumn_eq_fromBlocks := fromRows_fromCols_eq_fromBlocks\n\n"}
{"name":"Matrix.fromRows_mulVec","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝¹ : Semiring R\ninst✝ : Fintype n\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\nv : n → R\n⊢ Eq ((A₁.fromRows A₂).mulVec v) (Sum.elim (A₁.mulVec v) (A₂.mulVec v))","decl":"@[simp]\nlemma fromRows_mulVec [Fintype n] (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) (v : n → R) :\n    fromRows A₁ A₂ *ᵥ v = Sum.elim (A₁ *ᵥ v) (A₂ *ᵥ v) := by\n  ext (_ | _) <;> rfl\n\n"}
{"name":"Matrix.vecMul_fromCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝¹ : Semiring R\ninst✝ : Fintype m\nB₁ : Matrix m n₁ R\nB₂ : Matrix m n₂ R\nv : m → R\n⊢ Eq (Matrix.vecMul v (B₁.fromCols B₂)) (Sum.elim (Matrix.vecMul v B₁) (Matrix.vecMul v B₂))","decl":"@[simp]\nlemma vecMul_fromCols [Fintype m] (B₁ : Matrix m n₁ R) (B₂ : Matrix m n₂ R) (v : m → R) :\n    v ᵥ* fromCols B₁ B₂ = Sum.elim (v ᵥ* B₁) (v ᵥ* B₂) := by\n  ext (_ | _) <;> rfl\n\n"}
{"name":"Matrix.vecMul_fromColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝¹ : Semiring R\ninst✝ : Fintype m\nB₁ : Matrix m n₁ R\nB₂ : Matrix m n₂ R\nv : m → R\n⊢ Eq (Matrix.vecMul v (B₁.fromCols B₂)) (Sum.elim (Matrix.vecMul v B₁) (Matrix.vecMul v B₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias vecMul_fromColumns := vecMul_fromCols\n\n"}
{"name":"Matrix.sum_elim_vecMul_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝² : Semiring R\ninst✝¹ : Fintype m₁\ninst✝ : Fintype m₂\nB₁ : Matrix m₁ n R\nB₂ : Matrix m₂ n R\nv₁ : m₁ → R\nv₂ : m₂ → R\n⊢ Eq (Matrix.vecMul (Sum.elim v₁ v₂) (B₁.fromRows B₂)) (HAdd.hAdd (Matrix.vecMul v₁ B₁) (Matrix.vecMul v₂ B₂))","decl":"@[simp]\nlemma sum_elim_vecMul_fromRows [Fintype m₁] [Fintype m₂] (B₁ : Matrix m₁ n R) (B₂ : Matrix m₂ n R)\n    (v₁ : m₁ → R) (v₂ : m₂ → R) :\n    Sum.elim v₁ v₂ ᵥ* fromRows B₁ B₂ = v₁ ᵥ* B₁ + v₂ ᵥ* B₂ := by\n  ext\n  simp [Matrix.vecMul, fromRows, dotProduct]\n\n"}
{"name":"Matrix.fromCols_mulVec_sum_elim","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype n₁\ninst✝ : Fintype n₂\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\nv₁ : n₁ → R\nv₂ : n₂ → R\n⊢ Eq ((A₁.fromCols A₂).mulVec (Sum.elim v₁ v₂)) (HAdd.hAdd (A₁.mulVec v₁) (A₂.mulVec v₂))","decl":"@[simp]\nlemma fromCols_mulVec_sum_elim [Fintype n₁] [Fintype n₂]\n    (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R) (v₁ : n₁ → R) (v₂ : n₂ → R) :\n    fromCols A₁ A₂ *ᵥ Sum.elim v₁ v₂ = A₁ *ᵥ v₁ + A₂ *ᵥ v₂ := by\n  ext\n  simp [Matrix.mulVec, fromCols]\n\n"}
{"name":"Matrix.fromColumns_mulVec_sum_elim","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype n₁\ninst✝ : Fintype n₂\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\nv₁ : n₁ → R\nv₂ : n₂ → R\n⊢ Eq ((A₁.fromCols A₂).mulVec (Sum.elim v₁ v₂)) (HAdd.hAdd (A₁.mulVec v₁) (A₂.mulVec v₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_mulVec_sum_elim := fromCols_mulVec_sum_elim\n\n"}
{"name":"Matrix.fromRows_mul","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝¹ : Semiring R\ninst✝ : Fintype n\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\nB : Matrix n m R\n⊢ Eq (HMul.hMul (A₁.fromRows A₂) B) ((HMul.hMul A₁ B).fromRows (HMul.hMul A₂ B))","decl":"@[simp]\nlemma fromRows_mul [Fintype n] (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R) (B : Matrix n m R) :\n    fromRows A₁ A₂ * B = fromRows (A₁ * B) (A₂ * B) := by\n  ext (_ | _) _ <;> simp [mul_apply]\n\n"}
{"name":"Matrix.mul_fromCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝¹ : Semiring R\ninst✝ : Fintype n\nA : Matrix m n R\nB₁ : Matrix n n₁ R\nB₂ : Matrix n n₂ R\n⊢ Eq (HMul.hMul A (B₁.fromCols B₂)) ((HMul.hMul A B₁).fromCols (HMul.hMul A B₂))","decl":"@[simp]\nlemma mul_fromCols [Fintype n] (A : Matrix m n R) (B₁ : Matrix n n₁ R) (B₂ : Matrix n n₂ R) :\n    A * fromCols B₁ B₂ = fromCols (A * B₁) (A * B₂) := by\n  ext _ (_ | _) <;> simp [mul_apply]\n\n"}
{"name":"Matrix.mul_fromColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝¹ : Semiring R\ninst✝ : Fintype n\nA : Matrix m n R\nB₁ : Matrix n n₁ R\nB₂ : Matrix n n₂ R\n⊢ Eq (HMul.hMul A (B₁.fromCols B₂)) ((HMul.hMul A B₁).fromCols (HMul.hMul A B₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias mul_fromColumns := mul_fromCols\n\n"}
{"name":"Matrix.fromRows_zero","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝ : Semiring R\n⊢ Eq (Matrix.fromRows 0 0) 0","decl":"@[simp]\nlemma fromRows_zero : fromRows (0 : Matrix m₁ n R) (0 : Matrix m₂ n R) = 0 := by\n  ext (_ | _) _ <;> simp\n\n"}
{"name":"Matrix.fromCols_zero","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝ : Semiring R\n⊢ Eq (Matrix.fromCols 0 0) 0","decl":"@[simp]\nlemma fromCols_zero : fromCols (0 : Matrix m n₁ R) (0 : Matrix m n₂ R) = 0 := by\n  ext _ (_ | _) <;> simp\n\n"}
{"name":"Matrix.fromColumns_zero","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝ : Semiring R\n⊢ Eq (Matrix.fromCols 0 0) 0","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_zero := fromCols_zero\n\n"}
{"name":"Matrix.fromRows_mul_fromCols","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝¹ : Semiring R\ninst✝ : Fintype n\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\nB₁ : Matrix n n₁ R\nB₂ : Matrix n n₂ R\n⊢ Eq (HMul.hMul (A₁.fromRows A₂) (B₁.fromCols B₂)) (Matrix.fromBlocks (HMul.hMul A₁ B₁) (HMul.hMul A₁ B₂) (HMul.hMul A₂ B₁) (HMul.hMul A₂ B₂))","decl":"/-- A row partitioned matrix multiplied by a column partitioned matrix gives a 2 by 2 block\nmatrix. -/\nlemma fromRows_mul_fromCols [Fintype n] (A₁ : Matrix m₁ n R) (A₂ : Matrix m₂ n R)\n    (B₁ : Matrix n n₁ R) (B₂ : Matrix n n₂ R) :\n    (fromRows A₁ A₂) * (fromCols B₁ B₂) =\n      fromBlocks (A₁ * B₁) (A₁ * B₂) (A₂ * B₁) (A₂ * B₂) := by\n  ext (_ | _) (_ | _) <;> simp\n\n"}
{"name":"Matrix.fromRows_mul_fromColumns","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝¹ : Semiring R\ninst✝ : Fintype n\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\nB₁ : Matrix n n₁ R\nB₂ : Matrix n n₂ R\n⊢ Eq (HMul.hMul (A₁.fromRows A₂) (B₁.fromCols B₂)) (Matrix.fromBlocks (HMul.hMul A₁ B₁) (HMul.hMul A₁ B₂) (HMul.hMul A₂ B₁) (HMul.hMul A₂ B₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias fromRows_mul_fromColumns := fromRows_mul_fromCols\n\n"}
{"name":"Matrix.fromCols_mul_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype n₁\ninst✝ : Fintype n₂\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\nB₁ : Matrix n₁ n R\nB₂ : Matrix n₂ n R\n⊢ Eq (HMul.hMul (A₁.fromCols A₂) (B₁.fromRows B₂)) (HAdd.hAdd (HMul.hMul A₁ B₁) (HMul.hMul A₂ B₂))","decl":"/-- A column partitioned matrix multiplied by a row partitioned matrix gives the sum of the \"outer\"\nproducts of the block matrices. -/\nlemma fromCols_mul_fromRows [Fintype n₁] [Fintype n₂] (A₁ : Matrix m n₁ R) (A₂ : Matrix m n₂ R)\n    (B₁ : Matrix n₁ n R) (B₂ : Matrix n₂ n R) :\n    fromCols A₁ A₂ * fromRows B₁ B₂ = (A₁ * B₁ + A₂ * B₂) := by\n  ext\n  simp [mul_apply]\n\n"}
{"name":"Matrix.fromColumns_mul_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype n₁\ninst✝ : Fintype n₂\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\nB₁ : Matrix n₁ n R\nB₂ : Matrix n₂ n R\n⊢ Eq (HMul.hMul (A₁.fromCols A₂) (B₁.fromRows B₂)) (HAdd.hAdd (HMul.hMul A₁ B₁) (HMul.hMul A₂ B₂))","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_mul_fromRows := fromCols_mul_fromRows\n\n"}
{"name":"Matrix.fromCols_mul_fromBlocks","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nm₁ : Type u_3\nm₂ : Type u_4\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype m₁\ninst✝ : Fintype m₂\nA₁ : Matrix m m₁ R\nA₂ : Matrix m m₂ R\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq (HMul.hMul (A₁.fromCols A₂) (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂)) ((HAdd.hAdd (HMul.hMul A₁ B₁₁) (HMul.hMul A₂ B₂₁)).fromCols (HAdd.hAdd (HMul.hMul A₁ B₁₂) (HMul.hMul A₂ B₂₂)))","decl":"/-- A column partitioned matrix multipiled by a block matrix results in a column partitioned\nmatrix. -/\nlemma fromCols_mul_fromBlocks [Fintype m₁] [Fintype m₂] (A₁ : Matrix m m₁ R) (A₂ : Matrix m m₂ R)\n    (B₁₁ : Matrix m₁ n₁ R) (B₁₂ : Matrix m₁ n₂ R) (B₂₁ : Matrix m₂ n₁ R) (B₂₂ : Matrix m₂ n₂ R) :\n    (fromCols A₁ A₂) * fromBlocks B₁₁ B₁₂ B₂₁ B₂₂ =\n      fromCols (A₁ * B₁₁ + A₂ * B₂₁) (A₁ * B₁₂ + A₂ * B₂₂) := by\n  ext _ (_ | _) <;> simp [mul_apply]\n\n"}
{"name":"Matrix.fromColumns_mul_fromBlocks","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nm₁ : Type u_3\nm₂ : Type u_4\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype m₁\ninst✝ : Fintype m₂\nA₁ : Matrix m m₁ R\nA₂ : Matrix m m₂ R\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq (HMul.hMul (A₁.fromCols A₂) (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂)) ((HAdd.hAdd (HMul.hMul A₁ B₁₁) (HMul.hMul A₂ B₂₁)).fromCols (HAdd.hAdd (HMul.hMul A₁ B₁₂) (HMul.hMul A₂ B₂₂)))","decl":"@[deprecated (since := \"2024-12-11\")] alias fromColumns_mul_fromBlocks := fromCols_mul_fromBlocks\n\n"}
{"name":"Matrix.fromBlocks_mul_fromRows","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝² : Semiring R\ninst✝¹ : Fintype n₁\ninst✝ : Fintype n₂\nA₁ : Matrix n₁ n R\nA₂ : Matrix n₂ n R\nB₁₁ : Matrix m₁ n₁ R\nB₁₂ : Matrix m₁ n₂ R\nB₂₁ : Matrix m₂ n₁ R\nB₂₂ : Matrix m₂ n₂ R\n⊢ Eq (HMul.hMul (Matrix.fromBlocks B₁₁ B₁₂ B₂₁ B₂₂) (A₁.fromRows A₂)) ((HAdd.hAdd (HMul.hMul B₁₁ A₁) (HMul.hMul B₁₂ A₂)).fromRows (HAdd.hAdd (HMul.hMul B₂₁ A₁) (HMul.hMul B₂₂ A₂)))","decl":"/-- A block matrix multiplied by a row partitioned matrix gives a row partitioned matrix. -/\nlemma fromBlocks_mul_fromRows [Fintype n₁] [Fintype n₂] (A₁ : Matrix n₁ n R) (A₂ : Matrix n₂ n R)\n    (B₁₁ : Matrix m₁ n₁ R) (B₁₂ : Matrix m₁ n₂ R) (B₂₁ : Matrix m₂ n₁ R) (B₂₂ : Matrix m₂ n₂ R) :\n    fromBlocks B₁₁ B₁₂ B₂₁ B₂₂ * (fromRows A₁ A₂) =\n      fromRows (B₁₁ * A₁ + B₁₂ * A₂) (B₂₁ * A₁ + B₂₂ * A₂) := by\n  ext (_ | _) _ <;> simp [mul_apply]\n\n"}
{"name":"Matrix.fromCols_mul_fromRows_eq_one_comm","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝⁶ : CommRing R\ninst✝⁵ : Fintype n₁\ninst✝⁴ : Fintype n₂\ninst✝³ : Fintype n\ninst✝² : DecidableEq n\ninst✝¹ : DecidableEq n₁\ninst✝ : DecidableEq n₂\ne : Equiv n (Sum n₁ n₂)\nA₁ : Matrix n n₁ R\nA₂ : Matrix n n₂ R\nB₁ : Matrix n₁ n R\nB₂ : Matrix n₂ n R\n⊢ Iff (Eq (HMul.hMul (A₁.fromCols A₂) (B₁.fromRows B₂)) 1) (Eq (HMul.hMul (B₁.fromRows B₂) (A₁.fromCols A₂)) 1)","decl":"/-- Multiplication of a matrix by its inverse is commutative.\nThis is the column and row partitioned matrix form of `Matrix.mul_eq_one_comm`.\n\nThe condition `e : n ≃ n₁ ⊕ n₂` states that `fromCols A₁ A₂` and `fromRows B₁ B₂` are \"square\".\n-/\nlemma fromCols_mul_fromRows_eq_one_comm\n    [Fintype n₁] [Fintype n₂] [Fintype n] [DecidableEq n] [DecidableEq n₁] [DecidableEq n₂]\n    (e : n ≃ n₁ ⊕ n₂)\n    (A₁ : Matrix n n₁ R) (A₂ : Matrix n n₂ R) (B₁ : Matrix n₁ n R) (B₂ : Matrix n₂ n R) :\n    fromCols A₁ A₂ * fromRows B₁ B₂ = 1 ↔ fromRows B₁ B₂ * fromCols A₁ A₂ = 1 :=\n  mul_eq_one_comm_of_equiv e\n\n"}
{"name":"Matrix.fromColumns_mul_fromRows_eq_one_comm","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nn : Type u_5\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝⁶ : CommRing R\ninst✝⁵ : Fintype n₁\ninst✝⁴ : Fintype n₂\ninst✝³ : Fintype n\ninst✝² : DecidableEq n\ninst✝¹ : DecidableEq n₁\ninst✝ : DecidableEq n₂\ne : Equiv n (Sum n₁ n₂)\nA₁ : Matrix n n₁ R\nA₂ : Matrix n n₂ R\nB₁ : Matrix n₁ n R\nB₂ : Matrix n₂ n R\n⊢ Iff (Eq (HMul.hMul (A₁.fromCols A₂) (B₁.fromRows B₂)) 1) (Eq (HMul.hMul (B₁.fromRows B₂) (A₁.fromCols A₂)) 1)","decl":"@[deprecated (since := \"2024-12-11\")]\nalias fromColumns_mul_fromRows_eq_one_comm := fromCols_mul_fromRows_eq_one_comm\n\n"}
{"name":"Matrix.equiv_compl_fromCols_mul_fromRows_eq_one_comm","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nn : Type u_5\ninst✝³ : CommRing R\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\np : n → Prop\ninst✝ : DecidablePred p\nA₁ : Matrix n (Subtype fun i => p i) R\nA₂ : Matrix n (Subtype fun i => Not (p i)) R\nB₁ : Matrix (Subtype fun i => p i) n R\nB₂ : Matrix (Subtype fun i => Not (p i)) n R\n⊢ Iff (Eq (HMul.hMul (A₁.fromCols A₂) (B₁.fromRows B₂)) 1) (Eq (HMul.hMul (B₁.fromRows B₂) (A₁.fromCols A₂)) 1)","decl":"/-- The lemma `fromCols_mul_fromRows_eq_one_comm` specialized to the case where the index sets\n`n₁` and `n₂`, are the result of subtyping by a predicate and its complement. -/\nlemma equiv_compl_fromCols_mul_fromRows_eq_one_comm\n    [Fintype n] [DecidableEq n] (p : n → Prop) [DecidablePred p]\n    (A₁ : Matrix n {i // p i} R) (A₂ : Matrix n {i // ¬p i} R)\n    (B₁ : Matrix {i // p i} n R) (B₂ : Matrix {i // ¬p i} n R) :\n    fromCols A₁ A₂ * fromRows B₁ B₂ = 1 ↔ fromRows B₁ B₂ * fromCols A₁ A₂ = 1 :=\n  fromCols_mul_fromRows_eq_one_comm (id (Equiv.sumCompl p).symm) A₁ A₂ B₁ B₂\n\n"}
{"name":"Matrix.equiv_compl_fromColumns_mul_fromRows_eq_one_comm","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nn : Type u_5\ninst✝³ : CommRing R\ninst✝² : Fintype n\ninst✝¹ : DecidableEq n\np : n → Prop\ninst✝ : DecidablePred p\nA₁ : Matrix n (Subtype fun i => p i) R\nA₂ : Matrix n (Subtype fun i => Not (p i)) R\nB₁ : Matrix (Subtype fun i => p i) n R\nB₂ : Matrix (Subtype fun i => Not (p i)) n R\n⊢ Iff (Eq (HMul.hMul (A₁.fromCols A₂) (B₁.fromRows B₂)) 1) (Eq (HMul.hMul (B₁.fromRows B₂) (A₁.fromCols A₂)) 1)","decl":"@[deprecated (since := \"2024-12-11\")]\nalias equiv_compl_fromColumns_mul_fromRows_eq_one_comm :=\n  equiv_compl_fromCols_mul_fromRows_eq_one_comm\n\n"}
{"name":"Matrix.conjTranspose_fromCols_eq_fromRows_conjTranspose","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝ : Star R\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).conjTranspose (A₁.conjTranspose.fromRows A₂.conjTranspose)","decl":"/-- A column partitioned matrix in a Star ring when conjugate transposed gives a row partitioned\nmatrix with the columns of the initial matrix conjugate transposed to become rows. -/\nlemma conjTranspose_fromCols_eq_fromRows_conjTranspose (A₁ : Matrix m n₁ R)\n    (A₂ : Matrix m n₂ R) :\n    conjTranspose (fromCols A₁ A₂) = fromRows (conjTranspose A₁) (conjTranspose A₂) := by\n  ext (_ | _) _ <;> simp\n\n"}
{"name":"Matrix.conjTranspose_fromColumns_eq_fromRows_conjTranspose","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm : Type u_2\nn₁ : Type u_6\nn₂ : Type u_7\ninst✝ : Star R\nA₁ : Matrix m n₁ R\nA₂ : Matrix m n₂ R\n⊢ Eq (A₁.fromCols A₂).conjTranspose (A₁.conjTranspose.fromRows A₂.conjTranspose)","decl":"@[deprecated (since := \"2024-12-11\")]\nalias conjTranspose_fromColumns_eq_fromRows_conjTranspose :=\n  conjTranspose_fromCols_eq_fromRows_conjTranspose\n\n"}
{"name":"Matrix.conjTranspose_fromRows_eq_fromCols_conjTranspose","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝ : Star R\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\n⊢ Eq (A₁.fromRows A₂).conjTranspose (A₁.conjTranspose.fromCols A₂.conjTranspose)","decl":"/-- A row partitioned matrix in a Star ring when conjugate transposed gives a column partitioned\nmatrix with the rows of the initial matrix conjugate transposed to become columns. -/\nlemma conjTranspose_fromRows_eq_fromCols_conjTranspose (A₁ : Matrix m₁ n R)\n    (A₂ : Matrix m₂ n R) : conjTranspose (fromRows A₁ A₂) =\n      fromCols (conjTranspose A₁) (conjTranspose A₂) := by\n  ext _ (_ | _) <;> simp\n\n"}
{"name":"Matrix.conjTranspose_fromRows_eq_fromColumns_conjTranspose","module":"Mathlib.Data.Matrix.ColumnRowPartitioned","initialProofState":"R : Type u_1\nm₁ : Type u_3\nm₂ : Type u_4\nn : Type u_5\ninst✝ : Star R\nA₁ : Matrix m₁ n R\nA₂ : Matrix m₂ n R\n⊢ Eq (A₁.fromRows A₂).conjTranspose (A₁.conjTranspose.fromCols A₂.conjTranspose)","decl":"@[deprecated (since := \"2024-12-11\")]\nalias conjTranspose_fromRows_eq_fromColumns_conjTranspose :=\n  conjTranspose_fromRows_eq_fromCols_conjTranspose\n\n"}
