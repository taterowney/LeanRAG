{"name":"Nat.dist_comm","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\n⊢ Eq (n.dist m) (m.dist n)","decl":"theorem dist_comm (n m : ℕ) : dist n m = dist m n := by simp [dist, add_comm]\n\n"}
{"name":"Nat.dist_self","module":"Mathlib.Data.Nat.Dist","initialProofState":"n : Nat\n⊢ Eq (n.dist n) 0","decl":"@[simp]\ntheorem dist_self (n : ℕ) : dist n n = 0 := by simp [dist, tsub_self]\n\n"}
{"name":"Nat.eq_of_dist_eq_zero","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\nh : Eq (n.dist m) 0\n⊢ Eq n m","decl":"theorem eq_of_dist_eq_zero {n m : ℕ} (h : dist n m = 0) : n = m :=\n  have : n - m = 0 := Nat.eq_zero_of_add_eq_zero_right h\n  have : n ≤ m := tsub_eq_zero_iff_le.mp this\n  have : m - n = 0 := Nat.eq_zero_of_add_eq_zero_left h\n  have : m ≤ n := tsub_eq_zero_iff_le.mp this\n  le_antisymm ‹n ≤ m› ‹m ≤ n›\n\n"}
{"name":"Nat.dist_eq_zero","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\nh : Eq n m\n⊢ Eq (n.dist m) 0","decl":"theorem dist_eq_zero {n m : ℕ} (h : n = m) : dist n m = 0 := by rw [h, dist_self]\n\n"}
{"name":"Nat.dist_eq_sub_of_le","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\nh : LE.le n m\n⊢ Eq (n.dist m) (HSub.hSub m n)","decl":"theorem dist_eq_sub_of_le {n m : ℕ} (h : n ≤ m) : dist n m = m - n := by\n  rw [dist, tsub_eq_zero_iff_le.mpr h, zero_add]\n\n"}
{"name":"Nat.dist_eq_sub_of_le_right","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\nh : LE.le m n\n⊢ Eq (n.dist m) (HSub.hSub n m)","decl":"theorem dist_eq_sub_of_le_right {n m : ℕ} (h : m ≤ n) : dist n m = n - m := by\n  rw [dist_comm]; apply dist_eq_sub_of_le h\n\n"}
{"name":"Nat.dist_tri_left","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\n⊢ LE.le m (HAdd.hAdd (n.dist m) n)","decl":"theorem dist_tri_left (n m : ℕ) : m ≤ dist n m + n :=\n  le_trans le_tsub_add (add_le_add_right (Nat.le_add_left _ _) _)\n\n"}
{"name":"Nat.dist_tri_right","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\n⊢ LE.le m (HAdd.hAdd n (n.dist m))","decl":"theorem dist_tri_right (n m : ℕ) : m ≤ n + dist n m := by rw [add_comm]; apply dist_tri_left\n\n"}
{"name":"Nat.dist_tri_left'","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\n⊢ LE.le n (HAdd.hAdd (n.dist m) m)","decl":"theorem dist_tri_left' (n m : ℕ) : n ≤ dist n m + m := by rw [dist_comm]; apply dist_tri_left\n\n"}
{"name":"Nat.dist_tri_right'","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m : Nat\n⊢ LE.le n (HAdd.hAdd m (n.dist m))","decl":"theorem dist_tri_right' (n m : ℕ) : n ≤ m + dist n m := by rw [dist_comm]; apply dist_tri_right\n\n"}
{"name":"Nat.dist_zero_right","module":"Mathlib.Data.Nat.Dist","initialProofState":"n : Nat\n⊢ Eq (n.dist 0) n","decl":"theorem dist_zero_right (n : ℕ) : dist n 0 = n :=\n  Eq.trans (dist_eq_sub_of_le_right (zero_le n)) (tsub_zero n)\n\n"}
{"name":"Nat.dist_zero_left","module":"Mathlib.Data.Nat.Dist","initialProofState":"n : Nat\n⊢ Eq (Nat.dist 0 n) n","decl":"theorem dist_zero_left (n : ℕ) : dist 0 n = n :=\n  Eq.trans (dist_eq_sub_of_le (zero_le n)) (tsub_zero n)\n\n"}
{"name":"Nat.dist_add_add_right","module":"Mathlib.Data.Nat.Dist","initialProofState":"n k m : Nat\n⊢ Eq ((HAdd.hAdd n k).dist (HAdd.hAdd m k)) (n.dist m)","decl":"theorem dist_add_add_right (n k m : ℕ) : dist (n + k) (m + k) = dist n m :=\n  calc\n    dist (n + k) (m + k) = n + k - (m + k) + (m + k - (n + k)) := rfl\n    _ = n - m + (m + k - (n + k)) := by rw [@add_tsub_add_eq_tsub_right]\n    _ = n - m + (m - n) := by rw [@add_tsub_add_eq_tsub_right]\n\n"}
{"name":"Nat.dist_add_add_left","module":"Mathlib.Data.Nat.Dist","initialProofState":"k n m : Nat\n⊢ Eq ((HAdd.hAdd k n).dist (HAdd.hAdd k m)) (n.dist m)","decl":"theorem dist_add_add_left (k n m : ℕ) : dist (k + n) (k + m) = dist n m := by\n  rw [add_comm k n, add_comm k m]; apply dist_add_add_right\n\n"}
{"name":"Nat.dist_eq_intro","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m k l : Nat\nh : Eq (HAdd.hAdd n m) (HAdd.hAdd k l)\n⊢ Eq (n.dist k) (l.dist m)","decl":"theorem dist_eq_intro {n m k l : ℕ} (h : n + m = k + l) : dist n k = dist l m :=\n  calc\n    dist n k = dist (n + m) (k + m) := by rw [dist_add_add_right]\n    _ = dist (k + l) (k + m) := by rw [h]\n    _ = dist l m := by rw [dist_add_add_left]\n\n"}
{"name":"Nat.dist.triangle_inequality","module":"Mathlib.Data.Nat.Dist","initialProofState":"n m k : Nat\n⊢ LE.le (n.dist k) (HAdd.hAdd (n.dist m) (m.dist k))","decl":"theorem dist.triangle_inequality (n m k : ℕ) : dist n k ≤ dist n m + dist m k := by\n  have : dist n m + dist m k = n - m + (m - k) + (k - m + (m - n)) := by\n    simp [dist, add_comm, add_left_comm, add_assoc]\n  rw [this, dist]\n  exact add_le_add tsub_le_tsub_add_tsub tsub_le_tsub_add_tsub\n\n"}
{"name":"Nat.dist_mul_right","module":"Mathlib.Data.Nat.Dist","initialProofState":"n k m : Nat\n⊢ Eq ((HMul.hMul n k).dist (HMul.hMul m k)) (HMul.hMul (n.dist m) k)","decl":"theorem dist_mul_right (n k m : ℕ) : dist (n * k) (m * k) = dist n m * k := by\n  rw [dist, dist, right_distrib, tsub_mul n, tsub_mul m]\n\n"}
{"name":"Nat.dist_mul_left","module":"Mathlib.Data.Nat.Dist","initialProofState":"k n m : Nat\n⊢ Eq ((HMul.hMul k n).dist (HMul.hMul k m)) (HMul.hMul k (n.dist m))","decl":"theorem dist_mul_left (k n m : ℕ) : dist (k * n) (k * m) = k * dist n m := by\n  rw [mul_comm k n, mul_comm k m, dist_mul_right, mul_comm]\n\n"}
{"name":"Nat.dist_eq_max_sub_min","module":"Mathlib.Data.Nat.Dist","initialProofState":"i j : Nat\n⊢ Eq (i.dist j) (HSub.hSub (Max.max i j) (Min.min i j))","decl":"theorem dist_eq_max_sub_min {i j : ℕ} : dist i j = (max i j) - min i j :=\n  Or.elim (lt_or_ge i j)\n  (by intro h; rw [max_eq_right_of_lt h, min_eq_left_of_lt h, dist_eq_sub_of_le (Nat.le_of_lt h)])\n  (by intro h; rw [max_eq_left h, min_eq_right h, dist_eq_sub_of_le_right h])\n\n"}
{"name":"Nat.dist_succ_succ","module":"Mathlib.Data.Nat.Dist","initialProofState":"i j : Nat\n⊢ Eq (i.succ.dist j.succ) (i.dist j)","decl":"theorem dist_succ_succ {i j : Nat} : dist (succ i) (succ j) = dist i j := by\n  simp [dist, succ_sub_succ]\n\n"}
{"name":"Nat.dist_pos_of_ne","module":"Mathlib.Data.Nat.Dist","initialProofState":"i j : Nat\na✝ : Ne i j\n⊢ LT.lt 0 (i.dist j)","decl":"theorem dist_pos_of_ne {i j : Nat} : i ≠ j → 0 < dist i j := fun hne =>\n  ltByCases i j\n    (fun h : i < j => by rw [dist_eq_sub_of_le (le_of_lt h)]; apply tsub_pos_of_lt h)\n    (fun h : i = j => by contradiction) fun h : i > j => by\n    rw [dist_eq_sub_of_le_right (le_of_lt h)]; apply tsub_pos_of_lt h\n\n"}
