{"name":"conformalAt_iff'","module":"Mathlib.Analysis.Calculus.Conformal.InnerProduct","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace Real E\ninst✝ : InnerProductSpace Real F\nf : E → F\nx : E\n⊢ Iff (ConformalAt f x) (Exists fun c => And (LT.lt 0 c) (∀ (u v : E), Eq (Inner.inner ((fderiv Real f x) u) ((fderiv Real f x) v)) (HMul.hMul c (Inner.inner u v))))","decl":"/-- A real differentiable map `f` is conformal at point `x` if and only if its\n    differential `fderiv ℝ f x` at that point scales every inner product by a positive scalar. -/\ntheorem conformalAt_iff' {f : E → F} {x : E} : ConformalAt f x ↔\n    ∃ c : ℝ, 0 < c ∧ ∀ u v : E, ⟪fderiv ℝ f x u, fderiv ℝ f x v⟫ = c * ⟪u, v⟫ := by\n  rw [conformalAt_iff_isConformalMap_fderiv, isConformalMap_iff]\n\n"}
{"name":"conformalAt_iff","module":"Mathlib.Analysis.Calculus.Conformal.InnerProduct","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace Real E\ninst✝ : InnerProductSpace Real F\nf : E → F\nx : E\nf' : ContinuousLinearMap (RingHom.id Real) E F\nh : HasFDerivAt f f' x\n⊢ Iff (ConformalAt f x) (Exists fun c => And (LT.lt 0 c) (∀ (u v : E), Eq (Inner.inner (f' u) (f' v)) (HMul.hMul c (Inner.inner u v))))","decl":"/-- A real differentiable map `f` is conformal at point `x` if and only if its\n    differential `f'` at that point scales every inner product by a positive scalar. -/\ntheorem conformalAt_iff {f : E → F} {x : E} {f' : E →L[ℝ] F} (h : HasFDerivAt f f' x) :\n    ConformalAt f x ↔ ∃ c : ℝ, 0 < c ∧ ∀ u v : E, ⟪f' u, f' v⟫ = c * ⟪u, v⟫ := by\n  simp only [conformalAt_iff', h.fderiv]\n\n"}
{"name":"conformalFactorAt_pos","module":"Mathlib.Analysis.Calculus.Conformal.InnerProduct","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace Real E\ninst✝ : InnerProductSpace Real F\nf : E → F\nx : E\nh : ConformalAt f x\n⊢ LT.lt 0 (conformalFactorAt h)","decl":"theorem conformalFactorAt_pos {f : E → F} {x : E} (h : ConformalAt f x) : 0 < conformalFactorAt h :=\n  (Classical.choose_spec <| conformalAt_iff'.mp h).1\n\n"}
{"name":"conformalFactorAt_inner_eq_mul_inner'","module":"Mathlib.Analysis.Calculus.Conformal.InnerProduct","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace Real E\ninst✝ : InnerProductSpace Real F\nf : E → F\nx : E\nh : ConformalAt f x\nu v : E\n⊢ Eq (Inner.inner ((fderiv Real f x) u) ((fderiv Real f x) v)) (HMul.hMul (conformalFactorAt h) (Inner.inner u v))","decl":"theorem conformalFactorAt_inner_eq_mul_inner' {f : E → F} {x : E} (h : ConformalAt f x) (u v : E) :\n    ⟪(fderiv ℝ f x) u, (fderiv ℝ f x) v⟫ = (conformalFactorAt h : ℝ) * ⟪u, v⟫ :=\n  (Classical.choose_spec <| conformalAt_iff'.mp h).2 u v\n\n"}
{"name":"conformalFactorAt_inner_eq_mul_inner","module":"Mathlib.Analysis.Calculus.Conformal.InnerProduct","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : InnerProductSpace Real E\ninst✝ : InnerProductSpace Real F\nf : E → F\nx : E\nf' : ContinuousLinearMap (RingHom.id Real) E F\nh : HasFDerivAt f f' x\nH : ConformalAt f x\nu v : E\n⊢ Eq (Inner.inner (f' u) (f' v)) (HMul.hMul (conformalFactorAt H) (Inner.inner u v))","decl":"theorem conformalFactorAt_inner_eq_mul_inner {f : E → F} {x : E} {f' : E →L[ℝ] F}\n    (h : HasFDerivAt f f' x) (H : ConformalAt f x) (u v : E) :\n    ⟪f' u, f' v⟫ = (conformalFactorAt H : ℝ) * ⟪u, v⟫ :=\n  H.differentiableAt.hasFDerivAt.unique h ▸ conformalFactorAt_inner_eq_mul_inner' H u v\n"}
