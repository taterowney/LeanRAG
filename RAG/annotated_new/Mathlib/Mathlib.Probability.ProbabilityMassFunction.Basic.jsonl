{"name":"PMF.ext_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np q : PMF α\n⊢ Iff (Eq p q) (∀ (x : α), Eq (p x) (q x))","decl":"@[ext]\nprotected theorem ext {p q : PMF α} (h : ∀ x, p x = q x) : p = q :=\n  DFunLike.ext p q h\n\n"}
{"name":"PMF.ext","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np q : PMF α\nh : ∀ (x : α), Eq (p x) (q x)\n⊢ Eq p q","decl":"@[ext]\nprotected theorem ext {p q : PMF α} (h : ∀ x, p x = q x) : p = q :=\n  DFunLike.ext p q h\n\n"}
{"name":"PMF.hasSum_coe_one","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ HasSum (⇑p) 1","decl":"theorem hasSum_coe_one (p : PMF α) : HasSum p 1 :=\n  p.2\n\n"}
{"name":"PMF.tsum_coe","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ Eq (tsum fun a => p a) 1","decl":"@[simp]\ntheorem tsum_coe (p : PMF α) : ∑' a, p a = 1 :=\n  p.hasSum_coe_one.tsum_eq\n\n"}
{"name":"PMF.tsum_coe_ne_top","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ Ne (tsum fun a => p a) Top.top","decl":"theorem tsum_coe_ne_top (p : PMF α) : ∑' a, p a ≠ ∞ :=\n  p.tsum_coe.symm ▸ ENNReal.one_ne_top\n\n"}
{"name":"PMF.tsum_coe_indicator_ne_top","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Set α\n⊢ Ne (tsum fun a => s.indicator (⇑p) a) Top.top","decl":"theorem tsum_coe_indicator_ne_top (p : PMF α) (s : Set α) : ∑' a, s.indicator p a ≠ ∞ :=\n  ne_of_lt (lt_of_le_of_lt\n    (tsum_le_tsum (fun _ => Set.indicator_apply_le fun _ => le_rfl) ENNReal.summable\n      ENNReal.summable)\n    (lt_of_le_of_ne le_top p.tsum_coe_ne_top))\n\n"}
{"name":"PMF.coe_ne_zero","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ Ne (⇑p) 0","decl":"@[simp]\ntheorem coe_ne_zero (p : PMF α) : ⇑p ≠ 0 := fun hp =>\n  zero_ne_one ((tsum_zero.symm.trans (tsum_congr fun x => symm (congr_fun hp x))).trans p.tsum_coe)\n\n"}
{"name":"PMF.mem_support_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ Iff (Membership.mem p.support a) (Ne (p a) 0)","decl":"@[simp]\ntheorem mem_support_iff (p : PMF α) (a : α) : a ∈ p.support ↔ p a ≠ 0 := Iff.rfl\n\n"}
{"name":"PMF.support_nonempty","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ p.support.Nonempty","decl":"@[simp]\ntheorem support_nonempty (p : PMF α) : p.support.Nonempty :=\n  Function.support_nonempty_iff.2 p.coe_ne_zero\n\n"}
{"name":"PMF.support_countable","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ p.support.Countable","decl":"@[simp]\ntheorem support_countable (p : PMF α) : p.support.Countable :=\n  Summable.countable_support_ennreal (tsum_coe_ne_top p)\n\n"}
{"name":"PMF.apply_eq_zero_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ Iff (Eq (p a) 0) (Not (Membership.mem p.support a))","decl":"theorem apply_eq_zero_iff (p : PMF α) (a : α) : p a = 0 ↔ a ∉ p.support := by\n  rw [mem_support_iff, Classical.not_not]\n\n"}
{"name":"PMF.apply_pos_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ Iff (LT.lt 0 (p a)) (Membership.mem p.support a)","decl":"theorem apply_pos_iff (p : PMF α) (a : α) : 0 < p a ↔ a ∈ p.support :=\n  pos_iff_ne_zero.trans (p.mem_support_iff a).symm\n\n"}
{"name":"PMF.apply_eq_one_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ Iff (Eq (p a) 1) (Eq p.support (Singleton.singleton a))","decl":"theorem apply_eq_one_iff (p : PMF α) (a : α) : p a = 1 ↔ p.support = {a} := by\n  refine ⟨fun h => Set.Subset.antisymm (fun a' ha' => by_contra fun ha => ?_)\n    fun a' ha' => ha'.symm ▸ (p.mem_support_iff a).2 fun ha => zero_ne_one <| ha.symm.trans h,\n    fun h => _root_.trans (symm <| tsum_eq_single a\n      fun a' ha' => (p.apply_eq_zero_iff a').2 (h.symm ▸ ha')) p.tsum_coe⟩\n  suffices 1 < ∑' a, p a from ne_of_lt this p.tsum_coe.symm\n  classical\n  have : 0 < ∑' b, ite (b = a) 0 (p b) := lt_of_le_of_ne' zero_le'\n    ((tsum_ne_zero_iff ENNReal.summable).2\n      ⟨a', ite_ne_left_iff.2 ⟨ha, Ne.symm <| (p.mem_support_iff a').2 ha'⟩⟩)\n  calc\n    1 = 1 + 0 := (add_zero 1).symm\n    _ < p a + ∑' b, ite (b = a) 0 (p b) :=\n      (ENNReal.add_lt_add_of_le_of_lt ENNReal.one_ne_top (le_of_eq h.symm) this)\n    _ = ite (a = a) (p a) 0 + ∑' b, ite (b = a) 0 (p b) := by rw [eq_self_iff_true, if_true]\n    _ = (∑' b, ite (b = a) (p b) 0) + ∑' b, ite (b = a) 0 (p b) := by\n      congr\n      exact symm (tsum_eq_single a fun b hb => if_neg hb)\n    _ = ∑' b, (ite (b = a) (p b) 0 + ite (b = a) 0 (p b)) := ENNReal.tsum_add.symm\n    _ = ∑' b, p b := tsum_congr fun b => by split_ifs <;> simp only [zero_add, add_zero, le_rfl]\n\n"}
{"name":"PMF.coe_le_one","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ LE.le (p a) 1","decl":"theorem coe_le_one (p : PMF α) (a : α) : p a ≤ 1 := by\n  classical\n  refine hasSum_le (fun b => ?_) (hasSum_ite_eq a (p a)) (hasSum_coe_one p)\n  split_ifs with h <;> simp only [h, zero_le', le_rfl]\n\n"}
{"name":"PMF.apply_ne_top","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ Ne (p a) Top.top","decl":"theorem apply_ne_top (p : PMF α) (a : α) : p a ≠ ∞ :=\n  ne_of_lt (lt_of_le_of_lt (p.coe_le_one a) ENNReal.one_lt_top)\n\n"}
{"name":"PMF.apply_lt_top","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ LT.lt (p a) Top.top","decl":"theorem apply_lt_top (p : PMF α) (a : α) : p a < ∞ :=\n  lt_of_le_of_ne le_top (p.apply_ne_top a)\n\n"}
{"name":"PMF.toOuterMeasure_apply","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Set α\n⊢ Eq (p.toOuterMeasure s) (tsum fun x => s.indicator (⇑p) x)","decl":"theorem toOuterMeasure_apply : p.toOuterMeasure s = ∑' x, s.indicator p x :=\n  tsum_congr fun x => smul_dirac_apply (p x) x s\n\n"}
{"name":"PMF.toOuterMeasure_caratheodory","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\n⊢ Eq p.toOuterMeasure.caratheodory Top.top","decl":"@[simp]\ntheorem toOuterMeasure_caratheodory : p.toOuterMeasure.caratheodory = ⊤ := by\n  refine eq_top_iff.2 <| le_trans (le_sInf fun x hx => ?_) (le_sum_caratheodory _)\n  have ⟨y, hy⟩ := hx\n  exact\n    ((le_of_eq (dirac_caratheodory y).symm).trans (le_smul_caratheodory _ _)).trans (le_of_eq hy)\n\n"}
{"name":"PMF.toOuterMeasure_apply_finset","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Finset α\n⊢ Eq (p.toOuterMeasure ↑s) (s.sum fun x => p x)","decl":"@[simp]\ntheorem toOuterMeasure_apply_finset (s : Finset α) : p.toOuterMeasure s = ∑ x ∈ s, p x := by\n  refine (toOuterMeasure_apply p s).trans ((tsum_eq_sum (s := s) ?_).trans ?_)\n  · exact fun x hx => Set.indicator_of_not_mem (Finset.mem_coe.not.2 hx) _\n  · exact Finset.sum_congr rfl fun x hx => Set.indicator_of_mem (Finset.mem_coe.2 hx) _\n\n"}
{"name":"PMF.toOuterMeasure_apply_singleton","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\na : α\n⊢ Eq (p.toOuterMeasure (Singleton.singleton a)) (p a)","decl":"theorem toOuterMeasure_apply_singleton (a : α) : p.toOuterMeasure {a} = p a := by\n  refine (p.toOuterMeasure_apply {a}).trans ((tsum_eq_single a fun b hb => ?_).trans ?_)\n  · classical exact ite_eq_right_iff.2 fun hb' => False.elim <| hb hb'\n  · classical exact ite_eq_left_iff.2 fun ha' => False.elim <| ha' rfl\n\n"}
{"name":"PMF.toOuterMeasure_injective","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\n⊢ Function.Injective PMF.toOuterMeasure","decl":"theorem toOuterMeasure_injective : (toOuterMeasure : PMF α → OuterMeasure α).Injective :=\n  fun p q h => PMF.ext fun x => (p.toOuterMeasure_apply_singleton x).symm.trans\n    ((congr_fun (congr_arg _ h) _).trans <| q.toOuterMeasure_apply_singleton x)\n\n"}
{"name":"PMF.toOuterMeasure_inj","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np q : PMF α\n⊢ Iff (Eq p.toOuterMeasure q.toOuterMeasure) (Eq p q)","decl":"@[simp]\ntheorem toOuterMeasure_inj {p q : PMF α} : p.toOuterMeasure = q.toOuterMeasure ↔ p = q :=\n  toOuterMeasure_injective.eq_iff\n\n"}
{"name":"PMF.toOuterMeasure_apply_eq_zero_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Set α\n⊢ Iff (Eq (p.toOuterMeasure s) 0) (Disjoint p.support s)","decl":"theorem toOuterMeasure_apply_eq_zero_iff : p.toOuterMeasure s = 0 ↔ Disjoint p.support s := by\n  rw [toOuterMeasure_apply, ENNReal.tsum_eq_zero]\n  exact funext_iff.symm.trans Set.indicator_eq_zero'\n\n"}
{"name":"PMF.toOuterMeasure_apply_eq_one_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Set α\n⊢ Iff (Eq (p.toOuterMeasure s) 1) (HasSubset.Subset p.support s)","decl":"theorem toOuterMeasure_apply_eq_one_iff : p.toOuterMeasure s = 1 ↔ p.support ⊆ s := by\n  refine (p.toOuterMeasure_apply s).symm ▸ ⟨fun h a hap => ?_, fun h => ?_⟩\n  · refine by_contra fun hs => ne_of_lt ?_ (h.trans p.tsum_coe.symm)\n    have hs' : s.indicator p a = 0 := Set.indicator_apply_eq_zero.2 fun hs' => False.elim <| hs hs'\n    have hsa : s.indicator p a < p a := hs'.symm ▸ (p.apply_pos_iff a).2 hap\n    exact ENNReal.tsum_lt_tsum (p.tsum_coe_indicator_ne_top s)\n      (fun x => Set.indicator_apply_le fun _ => le_rfl) hsa\n  · classical suffices ∀ (x) (_ : x ∉ s), p x = 0 from\n      _root_.trans (tsum_congr\n        fun a => (Set.indicator_apply s p a).trans\n          (ite_eq_left_iff.2 <| symm ∘ this a)) p.tsum_coe\n    exact fun a ha => (p.apply_eq_zero_iff a).2 <| Set.not_mem_subset h ha\n\n"}
{"name":"PMF.toOuterMeasure_apply_inter_support","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Set α\n⊢ Eq (p.toOuterMeasure (Inter.inter s p.support)) (p.toOuterMeasure s)","decl":"@[simp]\ntheorem toOuterMeasure_apply_inter_support :\n    p.toOuterMeasure (s ∩ p.support) = p.toOuterMeasure s := by\n  simp only [toOuterMeasure_apply, PMF.support, Set.indicator_inter_support]\n\n"}
{"name":"PMF.toOuterMeasure_mono","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns t : Set α\nh : HasSubset.Subset (Inter.inter s p.support) t\n⊢ LE.le (p.toOuterMeasure s) (p.toOuterMeasure t)","decl":"/-- Slightly stronger than `OuterMeasure.mono` having an intersection with `p.support`. -/\ntheorem toOuterMeasure_mono {s t : Set α} (h : s ∩ p.support ⊆ t) :\n    p.toOuterMeasure s ≤ p.toOuterMeasure t :=\n  le_trans (le_of_eq (toOuterMeasure_apply_inter_support p s).symm) (p.toOuterMeasure.mono h)\n\n"}
{"name":"PMF.toOuterMeasure_apply_eq_of_inter_support_eq","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns t : Set α\nh : Eq (Inter.inter s p.support) (Inter.inter t p.support)\n⊢ Eq (p.toOuterMeasure s) (p.toOuterMeasure t)","decl":"theorem toOuterMeasure_apply_eq_of_inter_support_eq {s t : Set α}\n    (h : s ∩ p.support = t ∩ p.support) : p.toOuterMeasure s = p.toOuterMeasure t :=\n  le_antisymm (p.toOuterMeasure_mono (h.symm ▸ Set.inter_subset_left))\n    (p.toOuterMeasure_mono (h ▸ Set.inter_subset_left))\n\n"}
{"name":"PMF.toOuterMeasure_apply_fintype","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\np : PMF α\ns : Set α\ninst✝ : Fintype α\n⊢ Eq (p.toOuterMeasure s) (Finset.univ.sum fun x => s.indicator (⇑p) x)","decl":"@[simp]\ntheorem toOuterMeasure_apply_fintype [Fintype α] : p.toOuterMeasure s = ∑ x, s.indicator p x :=\n  (p.toOuterMeasure_apply s).trans (tsum_eq_sum fun x h => absurd (Finset.mem_univ x) h)\n\n"}
{"name":"PMF.toOuterMeasure_apply_le_toMeasure_apply","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns : Set α\n⊢ LE.le (p.toOuterMeasure s) (p.toMeasure s)","decl":"theorem toOuterMeasure_apply_le_toMeasure_apply : p.toOuterMeasure s ≤ p.toMeasure s :=\n  le_toMeasure_apply p.toOuterMeasure _ s\n\n"}
{"name":"PMF.toMeasure_apply_eq_toOuterMeasure_apply","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns : Set α\nhs : MeasurableSet s\n⊢ Eq (p.toMeasure s) (p.toOuterMeasure s)","decl":"theorem toMeasure_apply_eq_toOuterMeasure_apply (hs : MeasurableSet s) :\n    p.toMeasure s = p.toOuterMeasure s :=\n  toMeasure_apply p.toOuterMeasure _ hs\n\n"}
{"name":"PMF.toMeasure_apply","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns : Set α\nhs : MeasurableSet s\n⊢ Eq (p.toMeasure s) (tsum fun x => s.indicator (⇑p) x)","decl":"theorem toMeasure_apply (hs : MeasurableSet s) : p.toMeasure s = ∑' x, s.indicator p x :=\n  (p.toMeasure_apply_eq_toOuterMeasure_apply s hs).trans (p.toOuterMeasure_apply s)\n\n"}
{"name":"PMF.toMeasure_apply_singleton","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\na : α\nh : MeasurableSet (Singleton.singleton a)\n⊢ Eq (p.toMeasure (Singleton.singleton a)) (p a)","decl":"theorem toMeasure_apply_singleton (a : α) (h : MeasurableSet ({a} : Set α)) :\n    p.toMeasure {a} = p a := by\n  simp [toMeasure_apply_eq_toOuterMeasure_apply _ _ h, toOuterMeasure_apply_singleton]\n\n"}
{"name":"PMF.toMeasure_apply_eq_zero_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns : Set α\nhs : MeasurableSet s\n⊢ Iff (Eq (p.toMeasure s) 0) (Disjoint p.support s)","decl":"theorem toMeasure_apply_eq_zero_iff (hs : MeasurableSet s) :\n    p.toMeasure s = 0 ↔ Disjoint p.support s := by\n  rw [toMeasure_apply_eq_toOuterMeasure_apply p s hs, toOuterMeasure_apply_eq_zero_iff]\n\n"}
{"name":"PMF.toMeasure_apply_eq_one_iff","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns : Set α\nhs : MeasurableSet s\n⊢ Iff (Eq (p.toMeasure s) 1) (HasSubset.Subset p.support s)","decl":"theorem toMeasure_apply_eq_one_iff (hs : MeasurableSet s) : p.toMeasure s = 1 ↔ p.support ⊆ s :=\n  (p.toMeasure_apply_eq_toOuterMeasure_apply s hs).symm ▸ p.toOuterMeasure_apply_eq_one_iff s\n\n"}
{"name":"PMF.toMeasure_apply_inter_support","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns : Set α\nhs : MeasurableSet s\nhp : MeasurableSet p.support\n⊢ Eq (p.toMeasure (Inter.inter s p.support)) (p.toMeasure s)","decl":"@[simp]\ntheorem toMeasure_apply_inter_support (hs : MeasurableSet s) (hp : MeasurableSet p.support) :\n    p.toMeasure (s ∩ p.support) = p.toMeasure s := by\n  simp [p.toMeasure_apply_eq_toOuterMeasure_apply s hs,\n    p.toMeasure_apply_eq_toOuterMeasure_apply _ (hs.inter hp)]\n\n"}
{"name":"PMF.restrict_toMeasure_support","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\np : PMF α\n⊢ Eq (p.toMeasure.restrict p.support) p.toMeasure","decl":"@[simp]\ntheorem restrict_toMeasure_support [MeasurableSingletonClass α] (p : PMF α) :\n    Measure.restrict (toMeasure p) (support p) = toMeasure p := by\n  ext s hs\n  apply (MeasureTheory.Measure.restrict_apply hs).trans\n  apply toMeasure_apply_inter_support p s hs p.support_countable.measurableSet\n\n"}
{"name":"PMF.toMeasure_mono","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns t : Set α\nhs : MeasurableSet s\nht : MeasurableSet t\nh : HasSubset.Subset (Inter.inter s p.support) t\n⊢ LE.le (p.toMeasure s) (p.toMeasure t)","decl":"theorem toMeasure_mono {s t : Set α} (hs : MeasurableSet s) (ht : MeasurableSet t)\n    (h : s ∩ p.support ⊆ t) : p.toMeasure s ≤ p.toMeasure t := by\n  simpa only [p.toMeasure_apply_eq_toOuterMeasure_apply, hs, ht] using toOuterMeasure_mono p h\n\n"}
{"name":"PMF.toMeasure_apply_eq_of_inter_support_eq","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\ns t : Set α\nhs : MeasurableSet s\nht : MeasurableSet t\nh : Eq (Inter.inter s p.support) (Inter.inter t p.support)\n⊢ Eq (p.toMeasure s) (p.toMeasure t)","decl":"theorem toMeasure_apply_eq_of_inter_support_eq {s t : Set α} (hs : MeasurableSet s)\n    (ht : MeasurableSet t) (h : s ∩ p.support = t ∩ p.support) : p.toMeasure s = p.toMeasure t := by\n  simpa only [p.toMeasure_apply_eq_toOuterMeasure_apply, hs, ht] using\n    toOuterMeasure_apply_eq_of_inter_support_eq p h\n\n"}
{"name":"PMF.toMeasure_injective","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\n⊢ Function.Injective PMF.toMeasure","decl":"theorem toMeasure_injective : (toMeasure : PMF α → Measure α).Injective := by\n  intro p q h\n  ext x\n  rw [← p.toMeasure_apply_singleton x <| measurableSet_singleton x,\n    ← q.toMeasure_apply_singleton x <| measurableSet_singleton x, h]\n\n"}
{"name":"PMF.toMeasure_inj","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\np q : PMF α\n⊢ Iff (Eq p.toMeasure q.toMeasure) (Eq p q)","decl":"@[simp]\ntheorem toMeasure_inj {p q : PMF α} : p.toMeasure = q.toMeasure ↔ p = q :=\n  toMeasure_injective.eq_iff\n\n"}
{"name":"PMF.toMeasure_apply_finset","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\np : PMF α\ninst✝ : MeasurableSingletonClass α\ns : Finset α\n⊢ Eq (p.toMeasure ↑s) (s.sum fun x => p x)","decl":"@[simp]\ntheorem toMeasure_apply_finset (s : Finset α) : p.toMeasure s = ∑ x ∈ s, p x :=\n  (p.toMeasure_apply_eq_toOuterMeasure_apply s s.measurableSet).trans\n    (p.toOuterMeasure_apply_finset s)\n\n"}
{"name":"PMF.toMeasure_apply_of_finite","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝¹ : MeasurableSpace α\np : PMF α\ns : Set α\ninst✝ : MeasurableSingletonClass α\nhs : s.Finite\n⊢ Eq (p.toMeasure s) (tsum fun x => s.indicator (⇑p) x)","decl":"theorem toMeasure_apply_of_finite (hs : s.Finite) : p.toMeasure s = ∑' x, s.indicator p x :=\n  (p.toMeasure_apply_eq_toOuterMeasure_apply s hs.measurableSet).trans (p.toOuterMeasure_apply s)\n\n"}
{"name":"PMF.toMeasure_apply_fintype","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝² : MeasurableSpace α\np : PMF α\ns : Set α\ninst✝¹ : MeasurableSingletonClass α\ninst✝ : Fintype α\n⊢ Eq (p.toMeasure s) (Finset.univ.sum fun x => s.indicator (⇑p) x)","decl":"@[simp]\ntheorem toMeasure_apply_fintype [Fintype α] : p.toMeasure s = ∑ x, s.indicator p x :=\n  (p.toMeasure_apply_eq_toOuterMeasure_apply s s.toFinite.measurableSet).trans\n    (p.toOuterMeasure_apply_fintype s)\n\n"}
{"name":"MeasureTheory.Measure.toPMF_apply","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝³ : Countable α\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSingletonClass α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\nx : α\n⊢ Eq (μ.toPMF x) (μ (Singleton.singleton x))","decl":"theorem toPMF_apply (x : α) : μ.toPMF x = μ {x} := rfl\n\n"}
{"name":"MeasureTheory.Measure.toPMF_toMeasure","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝³ : Countable α\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSingletonClass α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\n⊢ Eq μ.toPMF.toMeasure μ","decl":"@[simp]\ntheorem toPMF_toMeasure : μ.toPMF.toMeasure = μ :=\n  Measure.ext fun s hs => by\n    rw [μ.toPMF.toMeasure_apply s hs, ← μ.tsum_indicator_apply_singleton s hs]\n    rfl\n\n"}
{"name":"PMF.toMeasure.isProbabilityMeasure","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝ : MeasurableSpace α\np : PMF α\n⊢ MeasureTheory.IsProbabilityMeasure p.toMeasure","decl":"/-- The measure associated to a `PMF` by `toMeasure` is a probability measure. -/\ninstance toMeasure.isProbabilityMeasure [MeasurableSpace α] (p : PMF α) :\n    IsProbabilityMeasure p.toMeasure :=\n  ⟨by\n    simpa only [MeasurableSet.univ, toMeasure_apply_eq_toOuterMeasure_apply, Set.indicator_univ,\n      toOuterMeasure_apply, ENNReal.coe_eq_one] using tsum_coe p⟩\n\n"}
{"name":"PMF.toMeasure_toPMF","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝² : Countable α\ninst✝¹ : MeasurableSpace α\ninst✝ : MeasurableSingletonClass α\np : PMF α\n⊢ Eq p.toMeasure.toPMF p","decl":"@[simp]\ntheorem toMeasure_toPMF : p.toMeasure.toPMF = p :=\n  PMF.ext fun x => by\n    rw [← p.toMeasure_apply_singleton x (measurableSet_singleton x), p.toMeasure.toPMF_apply]\n\n"}
{"name":"PMF.toMeasure_eq_iff_eq_toPMF","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝³ : Countable α\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSingletonClass α\np : PMF α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\n⊢ Iff (Eq p.toMeasure μ) (Eq p μ.toPMF)","decl":"theorem toMeasure_eq_iff_eq_toPMF (μ : Measure α) [IsProbabilityMeasure μ] :\n    p.toMeasure = μ ↔ p = μ.toPMF := by rw [← toMeasure_inj, Measure.toPMF_toMeasure]\n\n"}
{"name":"PMF.toPMF_eq_iff_toMeasure_eq","module":"Mathlib.Probability.ProbabilityMassFunction.Basic","initialProofState":"α : Type u_1\ninst✝³ : Countable α\ninst✝² : MeasurableSpace α\ninst✝¹ : MeasurableSingletonClass α\np : PMF α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.IsProbabilityMeasure μ\n⊢ Iff (Eq μ.toPMF p) (Eq μ p.toMeasure)","decl":"theorem toPMF_eq_iff_toMeasure_eq (μ : Measure α) [IsProbabilityMeasure μ] :\n    μ.toPMF = p ↔ μ = p.toMeasure := by rw [← toMeasure_inj, Measure.toPMF_toMeasure]\n\n"}
