{"name":"measurable_of_tendsto_metrizable'","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝³ : MeasurableSpace β\ninst✝² : BorelSpace β\nι : Type u_3\nf : ι → α → β\ng : α → β\nu : Filter ι\ninst✝¹ : u.NeBot\ninst✝ : u.IsCountablyGenerated\nhf : ∀ (i : ι), Measurable (f i)\nlim : Filter.Tendsto f u (nhds g)\n⊢ Measurable g","decl":"/-- A limit (over a general filter) of measurable functions valued in a (pseudo) metrizable space is\nmeasurable. -/\ntheorem measurable_of_tendsto_metrizable' {ι} {f : ι → α → β} {g : α → β} (u : Filter ι) [NeBot u]\n    [IsCountablyGenerated u] (hf : ∀ i, Measurable (f i)) (lim : Tendsto f u (𝓝 g)) :\n    Measurable g := by\n  letI : PseudoMetricSpace β := pseudoMetrizableSpacePseudoMetric β\n  apply measurable_of_isClosed'\n  intro s h1s h2s h3s\n  have : Measurable fun x => infNndist (g x) s := by\n    suffices Tendsto (fun i x => infNndist (f i x) s) u (𝓝 fun x => infNndist (g x) s) from\n      NNReal.measurable_of_tendsto' u (fun i => (hf i).infNndist) this\n    rw [tendsto_pi_nhds] at lim ⊢\n    intro x\n    exact ((continuous_infNndist_pt s).tendsto (g x)).comp (lim x)\n  have h4s : g ⁻¹' s = (fun x => infNndist (g x) s) ⁻¹' {0} := by\n    ext x\n    simp [h1s, ← h1s.mem_iff_infDist_zero h2s, ← NNReal.coe_eq_zero]\n  rw [h4s]\n  exact this (measurableSet_singleton 0)\n\n"}
{"name":"measurable_of_tendsto_metrizable","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nf : Nat → α → β\ng : α → β\nhf : ∀ (i : Nat), Measurable (f i)\nlim : Filter.Tendsto f Filter.atTop (nhds g)\n⊢ Measurable g","decl":"/-- A sequential limit of measurable functions valued in a (pseudo) metrizable space is\nmeasurable. -/\ntheorem measurable_of_tendsto_metrizable {f : ℕ → α → β} {g : α → β} (hf : ∀ i, Measurable (f i))\n    (lim : Tendsto f atTop (𝓝 g)) : Measurable g :=\n  measurable_of_tendsto_metrizable' atTop hf lim\n\n"}
{"name":"aemeasurable_of_tendsto_metrizable_ae","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝² : MeasurableSpace β\ninst✝¹ : BorelSpace β\nι : Type u_3\nμ : MeasureTheory.Measure α\nf : ι → α → β\ng : α → β\nu : Filter ι\nhu : u.NeBot\ninst✝ : u.IsCountablyGenerated\nhf : ∀ (n : ι), AEMeasurable (f n) μ\nh_tendsto : Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) u (nhds (g x))) (MeasureTheory.ae μ)\n⊢ AEMeasurable g μ","decl":"theorem aemeasurable_of_tendsto_metrizable_ae {ι} {μ : Measure α} {f : ι → α → β} {g : α → β}\n    (u : Filter ι) [hu : NeBot u] [IsCountablyGenerated u] (hf : ∀ n, AEMeasurable (f n) μ)\n    (h_tendsto : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) u (𝓝 (g x))) : AEMeasurable g μ := by\n  classical\n  rcases u.exists_seq_tendsto with ⟨v, hv⟩\n  have h'f : ∀ n, AEMeasurable (f (v n)) μ := fun n => hf (v n)\n  set p : α → (ℕ → β) → Prop := fun x f' => Tendsto (fun n => f' n) atTop (𝓝 (g x))\n  have hp : ∀ᵐ x ∂μ, p x fun n => f (v n) x := by\n    filter_upwards [h_tendsto] with x hx using hx.comp hv\n  set aeSeqLim := fun x => ite (x ∈ aeSeqSet h'f p) (g x) (⟨f (v 0) x⟩ : Nonempty β).some\n  refine\n    ⟨aeSeqLim,\n      measurable_of_tendsto_metrizable' atTop (aeSeq.measurable h'f p)\n        (tendsto_pi_nhds.mpr fun x => ?_),\n      ?_⟩\n  · simp_rw [aeSeqLim, aeSeq]\n    split_ifs with hx\n    · simp_rw [aeSeq.mk_eq_fun_of_mem_aeSeqSet h'f hx]\n      exact @aeSeq.fun_prop_of_mem_aeSeqSet _ α β _ _ _ _ _ h'f x hx\n    · exact tendsto_const_nhds\n  · exact\n      (ite_ae_eq_of_measure_compl_zero g (fun x => (⟨f (v 0) x⟩ : Nonempty β).some) (aeSeqSet h'f p)\n          (aeSeq.measure_compl_aeSeqSet_eq_zero h'f hp)).symm\n\n"}
{"name":"aemeasurable_of_tendsto_metrizable_ae'","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : TopologicalSpace β\ninst✝² : TopologicalSpace.PseudoMetrizableSpace β\ninst✝¹ : MeasurableSpace β\ninst✝ : BorelSpace β\nμ : MeasureTheory.Measure α\nf : Nat → α → β\ng : α → β\nhf : ∀ (n : Nat), AEMeasurable (f n) μ\nh_ae_tendsto : Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)\n⊢ AEMeasurable g μ","decl":"theorem aemeasurable_of_tendsto_metrizable_ae' {μ : Measure α} {f : ℕ → α → β} {g : α → β}\n    (hf : ∀ n, AEMeasurable (f n) μ)\n    (h_ae_tendsto : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (g x))) : AEMeasurable g μ :=\n  aemeasurable_of_tendsto_metrizable_ae atTop hf h_ae_tendsto\n\n"}
{"name":"aemeasurable_of_unif_approx","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\ninst✝³ : MeasurableSpace α\nβ : Type u_3\ninst✝² : MeasurableSpace β\ninst✝¹ : PseudoMetricSpace β\ninst✝ : BorelSpace β\nμ : MeasureTheory.Measure α\ng : α → β\nhf : ∀ (ε : Real), GT.gt ε 0 → Exists fun f => And (AEMeasurable f μ) (Filter.Eventually (fun x => LE.le (Dist.dist (f x) (g x)) ε) (MeasureTheory.ae μ))\n⊢ AEMeasurable g μ","decl":"theorem aemeasurable_of_unif_approx {β} [MeasurableSpace β] [PseudoMetricSpace β] [BorelSpace β]\n    {μ : Measure α} {g : α → β}\n    (hf : ∀ ε > (0 : ℝ), ∃ f : α → β, AEMeasurable f μ ∧ ∀ᵐ x ∂μ, dist (f x) (g x) ≤ ε) :\n    AEMeasurable g μ := by\n  obtain ⟨u, -, u_pos, u_lim⟩ :\n    ∃ u : ℕ → ℝ, StrictAnti u ∧ (∀ n : ℕ, 0 < u n) ∧ Tendsto u atTop (𝓝 0) :=\n    exists_seq_strictAnti_tendsto (0 : ℝ)\n  choose f Hf using fun n : ℕ => hf (u n) (u_pos n)\n  have : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (g x)) := by\n    have : ∀ᵐ x ∂μ, ∀ n, dist (f n x) (g x) ≤ u n := ae_all_iff.2 fun n => (Hf n).2\n    filter_upwards [this]\n    intro x hx\n    rw [tendsto_iff_dist_tendsto_zero]\n    exact squeeze_zero (fun n => dist_nonneg) hx u_lim\n  exact aemeasurable_of_tendsto_metrizable_ae' (fun n => (Hf n).1) this\n\n"}
{"name":"measurable_of_tendsto_metrizable_ae","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace α\ninst✝⁴ : TopologicalSpace β\ninst✝³ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝² : MeasurableSpace β\ninst✝¹ : BorelSpace β\nμ : MeasureTheory.Measure α\ninst✝ : μ.IsComplete\nf : Nat → α → β\ng : α → β\nhf : ∀ (n : Nat), Measurable (f n)\nh_ae_tendsto : Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) Filter.atTop (nhds (g x))) (MeasureTheory.ae μ)\n⊢ Measurable g","decl":"theorem measurable_of_tendsto_metrizable_ae {μ : Measure α} [μ.IsComplete] {f : ℕ → α → β}\n    {g : α → β} (hf : ∀ n, Measurable (f n))\n    (h_ae_tendsto : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) atTop (𝓝 (g x))) : Measurable g :=\n  aemeasurable_iff_measurable.mp\n    (aemeasurable_of_tendsto_metrizable_ae' (fun i => (hf i).aemeasurable) h_ae_tendsto)\n\n"}
{"name":"measurable_limit_of_tendsto_metrizable_ae","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : TopologicalSpace β\ninst✝⁵ : TopologicalSpace.PseudoMetrizableSpace β\ninst✝⁴ : MeasurableSpace β\ninst✝³ : BorelSpace β\nι : Type u_3\ninst✝² : Countable ι\ninst✝¹ : Nonempty ι\nμ : MeasureTheory.Measure α\nf : ι → α → β\nL : Filter ι\ninst✝ : L.IsCountablyGenerated\nhf : ∀ (n : ι), AEMeasurable (f n) μ\nh_ae_tendsto : Filter.Eventually (fun x => Exists fun l => Filter.Tendsto (fun n => f n x) L (nhds l)) (MeasureTheory.ae μ)\n⊢ Exists fun f_lim => And (Measurable f_lim) (Filter.Eventually (fun x => Filter.Tendsto (fun n => f n x) L (nhds (f_lim x))) (MeasureTheory.ae μ))","decl":"theorem measurable_limit_of_tendsto_metrizable_ae {ι} [Countable ι] [Nonempty ι] {μ : Measure α}\n    {f : ι → α → β} {L : Filter ι} [L.IsCountablyGenerated] (hf : ∀ n, AEMeasurable (f n) μ)\n    (h_ae_tendsto : ∀ᵐ x ∂μ, ∃ l : β, Tendsto (fun n => f n x) L (𝓝 l)) :\n    ∃ f_lim : α → β, Measurable f_lim ∧ ∀ᵐ x ∂μ, Tendsto (fun n => f n x) L (𝓝 (f_lim x)) := by\n  classical\n  inhabit ι\n  rcases eq_or_neBot L with (rfl | hL)\n  · exact ⟨(hf default).mk _, (hf default).measurable_mk, Eventually.of_forall fun x => tendsto_bot⟩\n  let p : α → (ι → β) → Prop := fun x f' => ∃ l : β, Tendsto (fun n => f' n) L (𝓝 l)\n  have hp_mem : ∀ x ∈ aeSeqSet hf p, p x fun n => f n x := fun x hx =>\n    aeSeq.fun_prop_of_mem_aeSeqSet hf hx\n  have h_ae_eq : ∀ᵐ x ∂μ, ∀ n, aeSeq hf p n x = f n x := aeSeq.aeSeq_eq_fun_ae hf h_ae_tendsto\n  set f_lim : α → β := fun x => dite (x ∈ aeSeqSet hf p) (fun h => (hp_mem x h).choose)\n    fun _ => (⟨f default x⟩ : Nonempty β).some\n  have hf_lim : ∀ x, Tendsto (fun n => aeSeq hf p n x) L (𝓝 (f_lim x)) := by\n    intro x\n    simp only [aeSeq, f_lim]\n    split_ifs with h\n    · refine (hp_mem x h).choose_spec.congr fun n => ?_\n      exact (aeSeq.mk_eq_fun_of_mem_aeSeqSet hf h n).symm\n    · exact tendsto_const_nhds\n  have h_ae_tendsto_f_lim : ∀ᵐ x ∂μ, Tendsto (fun n => f n x) L (𝓝 (f_lim x)) :=\n    h_ae_eq.mono fun x hx => (hf_lim x).congr hx\n  have h_f_lim_meas : Measurable f_lim :=\n    measurable_of_tendsto_metrizable' L (aeSeq.measurable hf p)\n      (tendsto_pi_nhds.mpr fun x => hf_lim x)\n  exact ⟨f_lim, h_f_lim_meas, h_ae_tendsto_f_lim⟩\n\n"}
{"name":"measurableSet_of_tendsto_indicator","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_3\ninst✝² : MeasurableSpace α\nA : Set α\nι : Type u_4\nL : Filter ι\ninst✝¹ : L.IsCountablyGenerated\nAs : ι → Set α\ninst✝ : L.NeBot\nAs_mble : ∀ (i : ι), MeasurableSet (As i)\nh_lim : ∀ (x : α), Filter.Eventually (fun i => Iff (Membership.mem (As i) x) (Membership.mem A x)) L\n⊢ MeasurableSet A","decl":"/-- If the indicator functions of measurable sets `Aᵢ` converge to the indicator function of\na set `A` along a nontrivial countably generated filter, then `A` is also measurable. -/\nlemma measurableSet_of_tendsto_indicator [NeBot L] (As_mble : ∀ i, MeasurableSet (As i))\n    (h_lim : ∀ x, ∀ᶠ i in L, x ∈ As i ↔ x ∈ A) :\n    MeasurableSet A := by\n  simp_rw [← measurable_indicator_const_iff (1 : ℝ≥0∞)] at As_mble ⊢\n  exact ENNReal.measurable_of_tendsto' L As_mble\n    ((tendsto_indicator_const_iff_forall_eventually L (1 : ℝ≥0∞)).mpr h_lim)\n\n"}
{"name":"nullMeasurableSet_of_tendsto_indicator","module":"Mathlib.MeasureTheory.Constructions.BorelSpace.Metrizable","initialProofState":"α : Type u_3\ninst✝² : MeasurableSpace α\nA : Set α\nι : Type u_4\nL : Filter ι\ninst✝¹ : L.IsCountablyGenerated\nAs : ι → Set α\ninst✝ : L.NeBot\nμ : MeasureTheory.Measure α\nAs_mble : ∀ (i : ι), MeasureTheory.NullMeasurableSet (As i) μ\nh_lim : Filter.Eventually (fun x => Filter.Eventually (fun i => Iff (Membership.mem (As i) x) (Membership.mem A x)) L) (MeasureTheory.ae μ)\n⊢ MeasureTheory.NullMeasurableSet A μ","decl":"/-- If the indicator functions of a.e.-measurable sets `Aᵢ` converge a.e. to the indicator function\nof a set `A` along a nontrivial countably generated filter, then `A` is also a.e.-measurable. -/\nlemma nullMeasurableSet_of_tendsto_indicator [NeBot L] {μ : Measure α}\n    (As_mble : ∀ i, NullMeasurableSet (As i) μ)\n    (h_lim : ∀ᵐ x ∂μ, ∀ᶠ i in L, x ∈ As i ↔ x ∈ A) :\n    NullMeasurableSet A μ := by\n  simp_rw [← aemeasurable_indicator_const_iff (1 : ℝ≥0∞)] at As_mble ⊢\n  apply aemeasurable_of_tendsto_metrizable_ae L As_mble\n  simpa [tendsto_indicator_const_apply_iff_eventually] using h_lim\n\n"}
