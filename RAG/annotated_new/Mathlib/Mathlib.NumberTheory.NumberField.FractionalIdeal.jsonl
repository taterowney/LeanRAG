{"name":"NumberField.instFreeIntSubtypeMemSubmoduleRingOfIntegersCoeToSubmodule","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝ : Field K\nI : FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K\n⊢ Module.Free Int (Subtype fun x => Membership.mem (↑I) x)","decl":"instance (I : FractionalIdeal (𝓞 K)⁰ K) : Module.Free ℤ I := by\n  refine Free.of_equiv (LinearEquiv.restrictScalars ℤ (I.equivNum ?_)).symm\n  exact nonZeroDivisors.coe_ne_zero I.den\n\n"}
{"name":"NumberField.instFiniteIntSubtypeMemSubmoduleRingOfIntegersCoeToSubmodule","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝ : Field K\nI : FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K\n⊢ Module.Finite Int (Subtype fun x => Membership.mem (↑I) x)","decl":"instance (I : FractionalIdeal (𝓞 K)⁰ K) : Module.Finite ℤ I := by\n  refine Module.Finite.of_surjective\n    (LinearEquiv.restrictScalars ℤ (I.equivNum ?_)).symm.toLinearMap (LinearEquiv.surjective _)\n  exact nonZeroDivisors.coe_ne_zero I.den\n\n"}
{"name":"NumberField.instIsLocalizedModuleIntNonZeroDivisorsSubtypeMemSubmoduleRingOfIntegersCoeToSubmoduleValFractionalIdealRestrictScalarsSubtype","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nI : Units (FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K)\n⊢ IsLocalizedModule (nonZeroDivisors Int) (↑Int (↑↑I).subtype)","decl":"instance (I : (FractionalIdeal (𝓞 K)⁰ K)ˣ) :\n    IsLocalizedModule ℤ⁰ ((Submodule.subtype (I : Submodule (𝓞 K) K)).restrictScalars ℤ) where\n  map_units x := by\n    rw [← (Algebra.lmul _ _).commutes, Algebra.lmul_isUnit_iff, isUnit_iff_ne_zero, eq_intCast,\n      Int.cast_ne_zero]\n    exact nonZeroDivisors.coe_ne_zero x\n  surj' x := by\n    obtain ⟨⟨a, _, d, hd, rfl⟩, h⟩ := IsLocalization.surj (Algebra.algebraMapSubmonoid (𝓞 K) ℤ⁰) x\n    refine ⟨⟨⟨Ideal.absNorm I.1.num * (algebraMap _ K a), I.1.num_le ?_⟩, d * Ideal.absNorm I.1.num,\n      ?_⟩ , ?_⟩\n    · simp_rw [FractionalIdeal.val_eq_coe, FractionalIdeal.coe_coeIdeal]\n      refine (IsLocalization.mem_coeSubmodule _ _).mpr ⟨Ideal.absNorm I.1.num * a, ?_, ?_⟩\n      · exact Ideal.mul_mem_right _ _ I.1.num.absNorm_mem\n      · rw [map_mul, map_natCast]\n    · refine Submonoid.mul_mem _ hd (mem_nonZeroDivisors_of_ne_zero ?_)\n      rw [Nat.cast_ne_zero, ne_eq, Ideal.absNorm_eq_zero_iff]\n      exact FractionalIdeal.num_eq_zero_iff.not.mpr <| Units.ne_zero I\n    · simp_rw [LinearMap.coe_restrictScalars, Submodule.coe_subtype] at h ⊢\n      rw [← h]\n      simp only [Submonoid.mk_smul, zsmul_eq_mul, Int.cast_mul, Int.cast_natCast, algebraMap_int_eq,\n        eq_intCast, map_intCast]\n      ring\n  exists_of_eq h :=\n    ⟨1, by rwa [one_smul, one_smul, ← (Submodule.injective_subtype I.1.coeToSubmodule).eq_iff]⟩\n\n"}
{"name":"NumberField.basisOfFractionalIdeal_apply","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nI : Units (FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K)\ni : Module.Free.ChooseBasisIndex Int (Subtype fun x => Membership.mem (↑↑I) x)\n⊢ Eq ((NumberField.basisOfFractionalIdeal K I) i) ↑((NumberField.fractionalIdealBasis K ↑I) i)","decl":"theorem basisOfFractionalIdeal_apply (I : (FractionalIdeal (𝓞 K)⁰ K)ˣ)\n    (i : Free.ChooseBasisIndex ℤ I) :\n    basisOfFractionalIdeal K I i = fractionalIdealBasis K I.1 i :=\n  (fractionalIdealBasis K I.1).ofIsLocalizedModule_apply ℚ ℤ⁰ _ i\n\n"}
{"name":"NumberField.mem_span_basisOfFractionalIdeal","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nI : Units (FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K)\nx : K\n⊢ Iff (Membership.mem (Submodule.span Int (Set.range ⇑(NumberField.basisOfFractionalIdeal K I))) x) (Membership.mem (↑↑I) x)","decl":"theorem mem_span_basisOfFractionalIdeal {I : (FractionalIdeal (𝓞 K)⁰ K)ˣ} {x : K} :\n    x ∈ Submodule.span ℤ (Set.range (basisOfFractionalIdeal K I)) ↔ x ∈ (I : Set K) := by\n  rw [basisOfFractionalIdeal, (fractionalIdealBasis K I.1).ofIsLocalizedModule_span ℚ ℤ⁰ _]\n  simp\n\n"}
{"name":"NumberField.fractionalIdeal_rank","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nI : Units (FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K)\n⊢ Eq (Module.finrank Int (Subtype fun x => Membership.mem (↑↑I) x)) (Module.finrank Int (NumberField.RingOfIntegers K))","decl":"open Module in\ntheorem fractionalIdeal_rank (I : (FractionalIdeal (𝓞 K)⁰ K)ˣ) :\n    finrank ℤ I = finrank ℤ (𝓞 K) := by\n  rw [finrank_eq_card_chooseBasisIndex, RingOfIntegers.rank,\n    finrank_eq_card_basis (basisOfFractionalIdeal K I)]\n\n"}
{"name":"NumberField.det_basisOfFractionalIdeal_eq_absNorm","module":"Mathlib.NumberTheory.NumberField.FractionalIdeal","initialProofState":"K : Type u_1\ninst✝¹ : Field K\ninst✝ : NumberField K\nI : Units (FractionalIdeal (nonZeroDivisors (NumberField.RingOfIntegers K)) K)\ne : Equiv (Module.Free.ChooseBasisIndex Int (NumberField.RingOfIntegers K)) (Module.Free.ChooseBasisIndex Int (Subtype fun x => Membership.mem (↑↑I) x))\n⊢ Eq (abs ((NumberField.integralBasis K).det ⇑((NumberField.basisOfFractionalIdeal K I).reindex e.symm))) (FractionalIdeal.absNorm ↑I)","decl":"/-- The absolute value of the determinant of the base change from `integralBasis` to\n`basisOfFractionalIdeal I` is equal to the norm of `I`. -/\ntheorem det_basisOfFractionalIdeal_eq_absNorm (I : (FractionalIdeal (𝓞 K)⁰ K)ˣ)\n    (e : (Free.ChooseBasisIndex ℤ (𝓞 K)) ≃ (Free.ChooseBasisIndex ℤ I)) :\n    |(integralBasis K).det ((basisOfFractionalIdeal K I).reindex e.symm)| =\n      FractionalIdeal.absNorm I.1 := by\n  rw [← FractionalIdeal.abs_det_basis_change (RingOfIntegers.basis K) I.1\n    ((fractionalIdealBasis K I.1).reindex e.symm)]\n  congr\n  ext\n  simpa using basisOfFractionalIdeal_apply K I _\n\n"}
