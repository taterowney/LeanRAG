{"name":"WeakDual.CharacterSpace.instContinuousLinearMapClass","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\n⊢ ContinuousLinearMapClass (↑(WeakDual.characterSpace 𝕜 A)) 𝕜 A 𝕜","decl":"/-- Elements of the character space are continuous linear maps. -/\ninstance instContinuousLinearMapClass : ContinuousLinearMapClass (characterSpace 𝕜 A) 𝕜 A 𝕜 where\n  map_smulₛₗ φ := (φ : WeakDual 𝕜 A).map_smul\n  map_add φ := (φ : WeakDual 𝕜 A).map_add\n  map_continuous φ := (φ : WeakDual 𝕜 A).cont\n\n-- Porting note: moved because Lean 4 doesn't see the `DFunLike` instance on `characterSpace 𝕜 A`\n-- until the `ContinuousLinearMapClass` instance is declared\n"}
{"name":"WeakDual.CharacterSpace.coe_coe","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\nφ : ↑(WeakDual.characterSpace 𝕜 A)\n⊢ Eq ⇑↑φ ⇑φ","decl":"@[simp, norm_cast]\nprotected theorem coe_coe (φ : characterSpace 𝕜 A) : ⇑(φ : WeakDual 𝕜 A) = (φ : A → 𝕜) :=\n  rfl\n\n"}
{"name":"WeakDual.CharacterSpace.ext_iff","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\nφ ψ : ↑(WeakDual.characterSpace 𝕜 A)\n⊢ Iff (Eq φ ψ) (∀ (x : A), Eq (φ x) (ψ x))","decl":"@[ext]\ntheorem ext {φ ψ : characterSpace 𝕜 A} (h : ∀ x, φ x = ψ x) : φ = ψ :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"WeakDual.CharacterSpace.ext","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\nφ ψ : ↑(WeakDual.characterSpace 𝕜 A)\nh : ∀ (x : A), Eq (φ x) (ψ x)\n⊢ Eq φ ψ","decl":"@[ext]\ntheorem ext {φ ψ : characterSpace 𝕜 A} (h : ∀ x, φ x = ψ x) : φ = ψ :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"WeakDual.CharacterSpace.coe_toCLM","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\nφ : ↑(WeakDual.characterSpace 𝕜 A)\n⊢ Eq ⇑(WeakDual.CharacterSpace.toCLM φ) ⇑φ","decl":"@[simp]\ntheorem coe_toCLM (φ : characterSpace 𝕜 A) : ⇑(toCLM φ) = φ :=\n  rfl\n\n"}
{"name":"WeakDual.CharacterSpace.instNonUnitalAlgHomClass","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\n⊢ NonUnitalAlgHomClass (↑(WeakDual.characterSpace 𝕜 A)) 𝕜 A 𝕜","decl":"/-- Elements of the character space are non-unital algebra homomorphisms. -/\ninstance instNonUnitalAlgHomClass : NonUnitalAlgHomClass (characterSpace 𝕜 A) 𝕜 A 𝕜 :=\n  { CharacterSpace.instContinuousLinearMapClass with\n    map_smulₛₗ := fun φ => map_smul φ\n    map_zero := fun φ => map_zero φ\n    map_mul := fun φ => φ.prop.2 }\n\n"}
{"name":"WeakDual.CharacterSpace.coe_toNonUnitalAlgHom","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\nφ : ↑(WeakDual.characterSpace 𝕜 A)\n⊢ Eq ⇑(WeakDual.CharacterSpace.toNonUnitalAlgHom φ) ⇑φ","decl":"@[simp]\ntheorem coe_toNonUnitalAlgHom (φ : characterSpace 𝕜 A) : ⇑(toNonUnitalAlgHom φ) = φ :=\n  rfl\n\n"}
{"name":"WeakDual.CharacterSpace.instIsEmpty","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁷ : CommSemiring 𝕜\ninst✝⁶ : TopologicalSpace 𝕜\ninst✝⁵ : ContinuousAdd 𝕜\ninst✝⁴ : ContinuousConstSMul 𝕜 𝕜\ninst✝³ : NonUnitalNonAssocSemiring A\ninst✝² : TopologicalSpace A\ninst✝¹ : Module 𝕜 A\ninst✝ : Subsingleton A\n⊢ IsEmpty ↑(WeakDual.characterSpace 𝕜 A)","decl":"instance instIsEmpty [Subsingleton A] : IsEmpty (characterSpace 𝕜 A) :=\n  ⟨fun φ => φ.prop.1 <|\n    ContinuousLinearMap.ext fun x => by\n      rw [show x = 0 from Subsingleton.elim x 0, map_zero, map_zero] ⟩\n\n"}
{"name":"WeakDual.CharacterSpace.union_zero","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommSemiring 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : NonUnitalNonAssocSemiring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Module 𝕜 A\n⊢ Eq (Union.union (WeakDual.characterSpace 𝕜 A) (Singleton.singleton 0)) (setOf fun φ => ∀ (x y : A), Eq (φ (HMul.hMul x y)) (HMul.hMul (φ x) (φ y)))","decl":"theorem union_zero :\n    characterSpace 𝕜 A ∪ {0} = {φ : WeakDual 𝕜 A | ∀ x y : A, φ (x * y) = φ x * φ y} :=\n  le_antisymm (by\n      rintro φ (hφ | rfl)\n      · exact hφ.2\n      · exact fun _ _ => by exact (zero_mul (0 : 𝕜)).symm)\n    fun φ hφ => Or.elim (em <| φ = 0) Or.inr fun h₀ => Or.inl ⟨h₀, hφ⟩\n\n"}
{"name":"WeakDual.CharacterSpace.union_zero_isClosed","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁸ : CommSemiring 𝕜\ninst✝⁷ : TopologicalSpace 𝕜\ninst✝⁶ : ContinuousAdd 𝕜\ninst✝⁵ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁴ : NonUnitalNonAssocSemiring A\ninst✝³ : TopologicalSpace A\ninst✝² : Module 𝕜 A\ninst✝¹ : T2Space 𝕜\ninst✝ : ContinuousMul 𝕜\n⊢ IsClosed (Union.union (WeakDual.characterSpace 𝕜 A) (Singleton.singleton 0))","decl":"/-- The `characterSpace 𝕜 A` along with `0` is always a closed set in `WeakDual 𝕜 A`. -/\ntheorem union_zero_isClosed [T2Space 𝕜] [ContinuousMul 𝕜] :\n    IsClosed (characterSpace 𝕜 A ∪ {0}) := by\n  simp only [union_zero, Set.setOf_forall]\n  exact\n    isClosed_iInter fun x =>\n      isClosed_iInter fun y =>\n        isClosed_eq (eval_continuous _) <| (eval_continuous _).mul (eval_continuous _)\n\n"}
{"name":"WeakDual.CharacterSpace.instAlgHomClass","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommRing 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : TopologicalSpace A\ninst✝¹ : Semiring A\ninst✝ : Algebra 𝕜 A\n⊢ AlgHomClass (↑(WeakDual.characterSpace 𝕜 A)) 𝕜 A 𝕜","decl":"/-- In a unital algebra, elements of the character space are algebra homomorphisms. -/\ninstance instAlgHomClass : AlgHomClass (characterSpace 𝕜 A) 𝕜 A 𝕜 :=\n  haveI map_one' : ∀ φ : characterSpace 𝕜 A, φ 1 = 1 := fun φ => by\n    have h₁ : φ 1 * (1 - φ 1) = 0 := by rw [mul_sub, sub_eq_zero, mul_one, ← map_mul φ, one_mul]\n    rcases mul_eq_zero.mp h₁ with (h₂ | h₂)\n    · have : ∀ a, φ (a * 1) = 0 := fun a => by simp only [map_mul φ, h₂, mul_zero]\n      exact False.elim (φ.prop.1 <| ContinuousLinearMap.ext <| by simpa only [mul_one] using this)\n    · exact (sub_eq_zero.mp h₂).symm\n  { CharacterSpace.instNonUnitalAlgHomClass with\n    map_one := map_one'\n    commutes := fun φ r => by\n      rw [Algebra.algebraMap_eq_smul_one, Algebra.id.map_eq_id, RingHom.id_apply]\n      rw [map_smul, Algebra.id.smul_eq_mul, map_one' φ, mul_one] }\n\n"}
{"name":"WeakDual.CharacterSpace.toAlgHom_apply","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : CommRing 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : TopologicalSpace A\ninst✝¹ : Semiring A\ninst✝ : Algebra 𝕜 A\nφ : ↑(WeakDual.characterSpace 𝕜 A)\na✝ : A\n⊢ Eq ((WeakDual.CharacterSpace.toAlgHom φ) a✝) ((WeakDual.CharacterSpace.toNonUnitalAlgHom φ).toFun a✝)","decl":"/-- An element of the character space of a unital algebra, as an algebra homomorphism. -/\n@[simps]\ndef toAlgHom (φ : characterSpace 𝕜 A) : A →ₐ[𝕜] 𝕜 :=\n  { toNonUnitalAlgHom φ with\n    map_one' := map_one φ\n    commutes' := AlgHomClass.commutes φ }\n\n"}
{"name":"WeakDual.CharacterSpace.eq_set_map_one_map_mul","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁸ : CommRing 𝕜\ninst✝⁷ : NoZeroDivisors 𝕜\ninst✝⁶ : TopologicalSpace 𝕜\ninst✝⁵ : ContinuousAdd 𝕜\ninst✝⁴ : ContinuousConstSMul 𝕜 𝕜\ninst✝³ : TopologicalSpace A\ninst✝² : Semiring A\ninst✝¹ : Algebra 𝕜 A\ninst✝ : Nontrivial 𝕜\n⊢ Eq (WeakDual.characterSpace 𝕜 A) (setOf fun φ => And (Eq (φ 1) 1) (∀ (x y : A), Eq (φ (HMul.hMul x y)) (HMul.hMul (φ x) (φ y))))","decl":"theorem eq_set_map_one_map_mul [Nontrivial 𝕜] :\n    characterSpace 𝕜 A = {φ : WeakDual 𝕜 A | φ 1 = 1 ∧ ∀ x y : A, φ (x * y) = φ x * φ y} := by\n  ext φ\n  refine ⟨?_, ?_⟩\n  · rintro hφ\n    lift φ to characterSpace 𝕜 A using hφ\n    exact ⟨map_one φ, map_mul φ⟩\n  · rintro ⟨hφ₁, hφ₂⟩\n    refine ⟨?_, hφ₂⟩\n    rintro rfl\n    exact zero_ne_one hφ₁\n\n"}
{"name":"WeakDual.CharacterSpace.isClosed","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝¹⁰ : CommRing 𝕜\ninst✝⁹ : NoZeroDivisors 𝕜\ninst✝⁸ : TopologicalSpace 𝕜\ninst✝⁷ : ContinuousAdd 𝕜\ninst✝⁶ : ContinuousConstSMul 𝕜 𝕜\ninst✝⁵ : TopologicalSpace A\ninst✝⁴ : Semiring A\ninst✝³ : Algebra 𝕜 A\ninst✝² : Nontrivial 𝕜\ninst✝¹ : T2Space 𝕜\ninst✝ : ContinuousMul 𝕜\n⊢ IsClosed (WeakDual.characterSpace 𝕜 A)","decl":"/-- under suitable mild assumptions on `𝕜`, the character space is a closed set in\n`WeakDual 𝕜 A`. -/\nprotected theorem isClosed [Nontrivial 𝕜] [T2Space 𝕜] [ContinuousMul 𝕜] :\n    IsClosed (characterSpace 𝕜 A) := by\n  rw [eq_set_map_one_map_mul, Set.setOf_and]\n  refine IsClosed.inter (isClosed_eq (eval_continuous _) continuous_const) ?_\n  simpa only [(union_zero 𝕜 A).symm] using union_zero_isClosed _ _\n\n"}
{"name":"WeakDual.CharacterSpace.apply_mem_spectrum","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁸ : CommRing 𝕜\ninst✝⁷ : NoZeroDivisors 𝕜\ninst✝⁶ : TopologicalSpace 𝕜\ninst✝⁵ : ContinuousAdd 𝕜\ninst✝⁴ : ContinuousConstSMul 𝕜 𝕜\ninst✝³ : TopologicalSpace A\ninst✝² : Ring A\ninst✝¹ : Algebra 𝕜 A\ninst✝ : Nontrivial 𝕜\nφ : ↑(WeakDual.characterSpace 𝕜 A)\na : A\n⊢ Membership.mem (spectrum 𝕜 a) (φ a)","decl":"theorem apply_mem_spectrum [Nontrivial 𝕜] (φ : characterSpace 𝕜 A) (a : A) : φ a ∈ spectrum 𝕜 a :=\n  AlgHom.apply_mem_spectrum φ a\n\n"}
{"name":"WeakDual.CharacterSpace.ext_ker","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁷ : CommRing 𝕜\ninst✝⁶ : NoZeroDivisors 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : TopologicalSpace A\ninst✝¹ : Ring A\ninst✝ : Algebra 𝕜 A\nφ ψ : ↑(WeakDual.characterSpace 𝕜 A)\nh : Eq (RingHom.ker φ) (RingHom.ker ψ)\n⊢ Eq φ ψ","decl":"theorem ext_ker {φ ψ : characterSpace 𝕜 A} (h : RingHom.ker φ = RingHom.ker ψ) : φ = ψ := by\n  ext x\n  have : x - algebraMap 𝕜 A (ψ x) ∈ RingHom.ker φ := by\n    simpa only [h, RingHom.mem_ker, map_sub, AlgHomClass.commutes] using sub_self (ψ x)\n  rwa [RingHom.mem_ker, map_sub, AlgHomClass.commutes, sub_eq_zero] at this\n\n"}
{"name":"WeakDual.ker_isMaximal","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁶ : Field 𝕜\ninst✝⁵ : TopologicalSpace 𝕜\ninst✝⁴ : ContinuousAdd 𝕜\ninst✝³ : ContinuousConstSMul 𝕜 𝕜\ninst✝² : Ring A\ninst✝¹ : TopologicalSpace A\ninst✝ : Algebra 𝕜 A\nφ : ↑(WeakDual.characterSpace 𝕜 A)\n⊢ (RingHom.ker φ).IsMaximal","decl":"/-- The `RingHom.ker` of `φ : characterSpace 𝕜 A` is maximal. -/\ninstance ker_isMaximal (φ : characterSpace 𝕜 A) : (RingHom.ker φ).IsMaximal :=\n  RingHom.ker_isMaximal_of_surjective φ fun z =>\n    ⟨algebraMap 𝕜 A z, by simp only [AlgHomClass.commutes, Algebra.id.map_eq_id, RingHom.id_apply]⟩\n\n"}
{"name":"WeakDual.gelfandTransform_apply_apply","module":"Mathlib.Topology.Algebra.Module.CharacterSpace","initialProofState":"𝕜 : Type u_1\nA : Type u_2\ninst✝⁵ : CommRing 𝕜\ninst✝⁴ : TopologicalSpace 𝕜\ninst✝³ : TopologicalRing 𝕜\ninst✝² : TopologicalSpace A\ninst✝¹ : Semiring A\ninst✝ : Algebra 𝕜 A\na : A\nφ : ↑(WeakDual.characterSpace 𝕜 A)\n⊢ Eq (((WeakDual.gelfandTransform 𝕜 A) a) φ) (φ a)","decl":"/-- The **Gelfand transform** is an algebra homomorphism (over `𝕜`) from a topological `𝕜`-algebra\n`A` into the `𝕜`-algebra of continuous `𝕜`-valued functions on the `characterSpace 𝕜 A`.\nThe character space itself consists of all algebra homomorphisms from `A` to `𝕜`. -/\n@[simps]\ndef gelfandTransform : A →ₐ[𝕜] C(characterSpace 𝕜 A, 𝕜) where\n  toFun a :=\n    { toFun := fun φ => φ a\n      continuous_toFun := (eval_continuous a).comp continuous_induced_dom }\n  map_one' := by ext a; simp only [coe_mk, coe_one, Pi.one_apply, map_one a]\n  map_mul' a b := by ext; simp only [map_mul, coe_mk, coe_mul, Pi.mul_apply]\n  map_zero' := by ext; simp only [map_zero, coe_mk, coe_mul, coe_zero, Pi.zero_apply]\n  map_add' a b := by ext; simp only [map_add, coe_mk, coe_add, Pi.add_apply]\n  commutes' k := by ext; simp [AlgHomClass.commutes]\n\n"}
