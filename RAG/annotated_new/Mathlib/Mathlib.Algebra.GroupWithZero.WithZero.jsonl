{"name":"WithZero.coe_one","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : One α\n⊢ Eq (↑1) 1","decl":"@[simp, norm_cast] lemma coe_one : ((1 : α) : WithZero α) = 1 := rfl\n\n"}
{"name":"WithZero.coe_mul","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Mul α\na b : α\n⊢ Eq (↑(HMul.hMul a b)) (HMul.hMul ↑a ↑b)","decl":"@[simp, norm_cast] lemma coe_mul (a b : α) : (↑(a * b) : WithZero α) = a * b := rfl\n\n"}
{"name":"WithZero.unzero_mul","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Mul α\nx y : WithZero α\nhxy : Ne (HMul.hMul x y) 0\n⊢ Eq (WithZero.unzero hxy) (HMul.hMul (WithZero.unzero ⋯) (WithZero.unzero ⋯))","decl":"lemma unzero_mul {x y : WithZero α} (hxy : x * y ≠ 0) :\n    unzero hxy = unzero (left_ne_zero_of_mul hxy) * unzero (right_ne_zero_of_mul hxy) := by\n  simp only [← coe_inj, coe_mul, coe_unzero]\n\n"}
{"name":"WithZero.noZeroDivisors","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Mul α\n⊢ NoZeroDivisors (WithZero α)","decl":"instance noZeroDivisors : NoZeroDivisors (WithZero α) := ⟨Option.map₂_eq_none_iff.1⟩\n\n"}
{"name":"WithZero.coeMonoidHom_apply","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : MulOneClass α\na✝ : α\n⊢ Eq (WithZero.coeMonoidHom a✝) ↑a✝","decl":"/-- Coercion as a monoid hom. -/\n@[simps apply]\ndef coeMonoidHom : α →* WithZero α where\n  toFun        := (↑)\n  map_one'     := rfl\n  map_mul' _ _ := rfl\n\n"}
{"name":"WithZero.monoidWithZeroHom_ext","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulZeroOneClass β\nf g : MonoidWithZeroHom (WithZero α) β\nh : Eq ((↑f).comp WithZero.coeMonoidHom) ((↑g).comp WithZero.coeMonoidHom)\n⊢ Eq f g","decl":"@[ext high]\ntheorem monoidWithZeroHom_ext ⦃f g : WithZero α →*₀ β⦄\n    (h : f.toMonoidHom.comp coeMonoidHom = g.toMonoidHom.comp coeMonoidHom) :\n    f = g :=\n  DFunLike.ext _ _ fun\n    | 0 => (map_zero f).trans (map_zero g).symm\n    | (g : α) => DFunLike.congr_fun h g\n\n"}
{"name":"WithZero.monoidWithZeroHom_ext_iff","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulZeroOneClass β\nf g : MonoidWithZeroHom (WithZero α) β\n⊢ Iff (Eq f g) (Eq ((↑f).comp WithZero.coeMonoidHom) ((↑g).comp WithZero.coeMonoidHom))","decl":"@[ext high]\ntheorem monoidWithZeroHom_ext ⦃f g : WithZero α →*₀ β⦄\n    (h : f.toMonoidHom.comp coeMonoidHom = g.toMonoidHom.comp coeMonoidHom) :\n    f = g :=\n  DFunLike.ext _ _ fun\n    | 0 => (map_zero f).trans (map_zero g).symm\n    | (g : α) => DFunLike.congr_fun h g\n\n"}
{"name":"WithZero.lift'_symm_apply_apply","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulZeroOneClass β\nF : MonoidWithZeroHom (WithZero α) β\na✝ : α\n⊢ Eq ((WithZero.lift'.symm F) a✝) (F ↑a✝)","decl":"/-- The (multiplicative) universal property of `WithZero`. -/\n@[simps! symm_apply_apply]\nnoncomputable nonrec def lift' : (α →* β) ≃ (WithZero α →*₀ β) where\n  toFun f :=\n    { toFun := fun\n        | 0 => 0\n        | (a : α) => f a\n      map_zero' := rfl\n      map_one' := map_one f\n      map_mul' := fun\n        | 0, _ => (zero_mul _).symm\n        | (_ : α), 0 => (mul_zero _).symm\n        | (_ : α), (_ : α) => map_mul f _ _ }\n  invFun F := F.toMonoidHom.comp coeMonoidHom\n  left_inv _ := rfl\n  right_inv _ := monoidWithZeroHom_ext rfl\n\n"}
{"name":"WithZero.lift'_zero","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidHom α β\n⊢ Eq ((WithZero.lift' f) 0) 0","decl":"lemma lift'_zero (f : α →* β) : lift' f (0 : WithZero α) = 0 := rfl\n\n"}
{"name":"WithZero.lift'_coe","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidHom α β\nx : α\n⊢ Eq ((WithZero.lift' f) ↑x) (f x)","decl":"@[simp] lemma lift'_coe (f : α →* β) (x : α) : lift' f (x : WithZero α) = f x := rfl\n\n"}
{"name":"WithZero.lift'_unique","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulZeroOneClass β\nf : MonoidWithZeroHom (WithZero α) β\n⊢ Eq f (WithZero.lift' ((↑f).comp WithZero.coeMonoidHom))","decl":"lemma lift'_unique (f : WithZero α →*₀ β) : f = lift' (f.toMonoidHom.comp coeMonoidHom) :=\n  (lift'.apply_symm_apply f).symm\n\n"}
{"name":"WithZero.map'_zero","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulOneClass β\nf : MonoidHom α β\n⊢ Eq ((WithZero.map' f) 0) 0","decl":"lemma map'_zero (f : α →* β) : map' f 0 = 0 := rfl\n\n"}
{"name":"WithZero.map'_coe","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : MulOneClass α\ninst✝ : MulOneClass β\nf : MonoidHom α β\nx : α\n⊢ Eq ((WithZero.map' f) ↑x) ↑(f x)","decl":"@[simp] lemma map'_coe (f : α →* β) (x : α) : map' f (x : WithZero α) = f x := rfl\n\n"}
{"name":"WithZero.map'_id","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"β : Type u_2\ninst✝ : MulOneClass β\n⊢ Eq (↑(WithZero.map' (MonoidHom.id β))) (MonoidHom.id (WithZero β))","decl":"@[simp]\nlemma map'_id : map' (MonoidHom.id β) = MonoidHom.id (WithZero β) := by\n  ext x; induction x <;> rfl\n\n"}
{"name":"WithZero.map'_map'","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MulOneClass α\ninst✝¹ : MulOneClass β\ninst✝ : MulOneClass γ\nf : MonoidHom α β\ng : MonoidHom β γ\nx : WithZero α\n⊢ Eq ((WithZero.map' g) ((WithZero.map' f) x)) ((WithZero.map' (g.comp f)) x)","decl":"lemma map'_map'  (f : α →* β) (g : β →* γ) (x) : map' g (map' f x) = map' (g.comp f) x := by\n  induction x <;> rfl\n\n"}
{"name":"WithZero.map'_comp","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : MulOneClass α\ninst✝¹ : MulOneClass β\ninst✝ : MulOneClass γ\nf : MonoidHom α β\ng : MonoidHom β γ\n⊢ Eq (WithZero.map' (g.comp f)) ((WithZero.map' g).comp (WithZero.map' f))","decl":"@[simp]\nlemma map'_comp (f : α →* β) (g : β →* γ) : map' (g.comp f) = (map' g).comp (map' f) :=\n  MonoidWithZeroHom.ext fun x => (map'_map' f g x).symm\n\n"}
{"name":"WithZero.coe_pow","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝¹ : One α\ninst✝ : Pow α Nat\na : α\nn : Nat\n⊢ Eq (↑(HPow.hPow a n)) (HPow.hPow (↑a) n)","decl":"@[simp, norm_cast] lemma coe_pow (a : α) (n : ℕ) : (↑(a ^ n) : WithZero α) = a ^ n := rfl\n\n"}
{"name":"WithZero.coe_inv","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Inv α\na : α\n⊢ Eq (↑(Inv.inv a)) (Inv.inv ↑a)","decl":"@[simp, norm_cast] lemma coe_inv (a : α) : ((a⁻¹ : α) : WithZero α) = (↑a)⁻¹ := rfl\n\n"}
{"name":"WithZero.inv_zero","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Inv α\n⊢ Eq (Inv.inv 0) 0","decl":"@[simp] protected lemma inv_zero : (0 : WithZero α)⁻¹ = 0 := rfl\n\n"}
{"name":"WithZero.coe_div","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Div α\na b : α\n⊢ Eq (↑(HDiv.hDiv a b)) (HDiv.hDiv ↑a ↑b)","decl":"@[norm_cast] lemma coe_div (a b : α) : ↑(a / b : α) = (a / b : WithZero α) := rfl\n\n"}
{"name":"WithZero.coe_zpow","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝¹ : One α\ninst✝ : Pow α Int\na : α\nn : Int\n⊢ Eq (↑(HPow.hPow a n)) (HPow.hPow (↑a) n)","decl":"@[simp, norm_cast] lemma coe_zpow (a : α) (n : ℤ) : ↑(a ^ n) = (↑a : WithZero α) ^ n := rfl\n\n"}
{"name":"WithZero.coe_unitsWithZeroEquiv_eq_units_val","module":"Mathlib.Algebra.GroupWithZero.WithZero","initialProofState":"α : Type u_1\ninst✝ : Group α\nγ : Units (WithZero α)\n⊢ Eq ↑(WithZero.unitsWithZeroEquiv γ) ↑γ","decl":"theorem coe_unitsWithZeroEquiv_eq_units_val (γ : (WithZero α)ˣ) :\n    ↑(unitsWithZeroEquiv γ) = γ.val := by\n  simp only [WithZero.unitsWithZeroEquiv, MulEquiv.coe_mk, Equiv.coe_fn_mk, WithZero.coe_unzero]\n\n"}
