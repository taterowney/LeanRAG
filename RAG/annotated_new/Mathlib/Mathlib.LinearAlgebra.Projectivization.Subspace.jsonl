{"name":"Projectivization.Subspace.ext","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nx y : Projectivization.Subspace K V\ncarrier : Eq x.carrier y.carrier\n⊢ Eq x y","decl":"/-- A subspace of a projective space is a structure consisting of a set of points such that:\nIf two nonzero vectors determine points which are in the set, and the sum of the two vectors is\nnonzero, then the point determined by the sum is also in the set. -/\n@[ext]\nstructure Subspace where\n  /-- The set of points. -/\n  carrier : Set (ℙ K V)\n  /-- The addition rule. -/\n  mem_add' (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    mk K v hv ∈ carrier → mk K w hw ∈ carrier → mk K (v + w) hvw ∈ carrier\n\n"}
{"name":"Projectivization.Subspace.mem_add'","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nself : Projectivization.Subspace K V\nv w : V\nhv : Ne v 0\nhw : Ne w 0\nhvw : Ne (HAdd.hAdd v w) 0\na✝¹ : Membership.mem self.carrier (Projectivization.mk K v hv)\na✝ : Membership.mem self.carrier (Projectivization.mk K w hw)\n⊢ Membership.mem self.carrier (Projectivization.mk K (HAdd.hAdd v w) hvw)","decl":"/-- A subspace of a projective space is a structure consisting of a set of points such that:\nIf two nonzero vectors determine points which are in the set, and the sum of the two vectors is\nnonzero, then the point determined by the sum is also in the set. -/\n@[ext]\nstructure Subspace where\n  /-- The set of points. -/\n  carrier : Set (ℙ K V)\n  /-- The addition rule. -/\n  mem_add' (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    mk K v hv ∈ carrier → mk K w hw ∈ carrier → mk K (v + w) hvw ∈ carrier\n\n"}
{"name":"Projectivization.Subspace.mk.injEq","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\ncarrier✝ : Set (Projectivization K V)\nmem_add'✝ : ∀ (v w : V) (hv : Ne v 0) (hw : Ne w 0) (hvw : Ne (HAdd.hAdd v w) 0), Membership.mem carrier✝ (Projectivization.mk K v hv) → Membership.mem carrier✝ (Projectivization.mk K w hw) → Membership.mem carrier✝ (Projectivization.mk K (HAdd.hAdd v w) hvw)\ncarrier : Set (Projectivization K V)\nmem_add' : ∀ (v w : V) (hv : Ne v 0) (hw : Ne w 0) (hvw : Ne (HAdd.hAdd v w) 0), Membership.mem carrier (Projectivization.mk K v hv) → Membership.mem carrier (Projectivization.mk K w hw) → Membership.mem carrier (Projectivization.mk K (HAdd.hAdd v w) hvw)\n⊢ Eq (Eq { carrier := carrier✝, mem_add' := mem_add'✝ } { carrier := carrier, mem_add' := mem_add' }) (Eq carrier✝ carrier)","decl":"/-- A subspace of a projective space is a structure consisting of a set of points such that:\nIf two nonzero vectors determine points which are in the set, and the sum of the two vectors is\nnonzero, then the point determined by the sum is also in the set. -/\n@[ext]\nstructure Subspace where\n  /-- The set of points. -/\n  carrier : Set (ℙ K V)\n  /-- The addition rule. -/\n  mem_add' (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    mk K v hv ∈ carrier → mk K w hw ∈ carrier → mk K (v + w) hvw ∈ carrier\n\n"}
{"name":"Projectivization.Subspace.mk.sizeOf_spec","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝⁴ : Field K\ninst✝³ : AddCommGroup V\ninst✝² : Module K V\ninst✝¹ : SizeOf K\ninst✝ : SizeOf V\ncarrier : Set (Projectivization K V)\nmem_add' : ∀ (v w : V) (hv : Ne v 0) (hw : Ne w 0) (hvw : Ne (HAdd.hAdd v w) 0), Membership.mem carrier (Projectivization.mk K v hv) → Membership.mem carrier (Projectivization.mk K w hw) → Membership.mem carrier (Projectivization.mk K (HAdd.hAdd v w) hvw)\n⊢ Eq (SizeOf.sizeOf { carrier := carrier, mem_add' := mem_add' }) 1","decl":"/-- A subspace of a projective space is a structure consisting of a set of points such that:\nIf two nonzero vectors determine points which are in the set, and the sum of the two vectors is\nnonzero, then the point determined by the sum is also in the set. -/\n@[ext]\nstructure Subspace where\n  /-- The set of points. -/\n  carrier : Set (ℙ K V)\n  /-- The addition rule. -/\n  mem_add' (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    mk K v hv ∈ carrier → mk K w hw ∈ carrier → mk K (v + w) hvw ∈ carrier\n\n"}
{"name":"Projectivization.Subspace.mk.inj","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\ncarrier✝ : Set (Projectivization K V)\nmem_add'✝ : ∀ (v w : V) (hv : Ne v 0) (hw : Ne w 0) (hvw : Ne (HAdd.hAdd v w) 0), Membership.mem carrier✝ (Projectivization.mk K v hv) → Membership.mem carrier✝ (Projectivization.mk K w hw) → Membership.mem carrier✝ (Projectivization.mk K (HAdd.hAdd v w) hvw)\ncarrier : Set (Projectivization K V)\nmem_add' : ∀ (v w : V) (hv : Ne v 0) (hw : Ne w 0) (hvw : Ne (HAdd.hAdd v w) 0), Membership.mem carrier (Projectivization.mk K v hv) → Membership.mem carrier (Projectivization.mk K w hw) → Membership.mem carrier (Projectivization.mk K (HAdd.hAdd v w) hvw)\nx✝ : Eq { carrier := carrier✝, mem_add' := mem_add'✝ } { carrier := carrier, mem_add' := mem_add' }\n⊢ Eq carrier✝ carrier","decl":"/-- A subspace of a projective space is a structure consisting of a set of points such that:\nIf two nonzero vectors determine points which are in the set, and the sum of the two vectors is\nnonzero, then the point determined by the sum is also in the set. -/\n@[ext]\nstructure Subspace where\n  /-- The set of points. -/\n  carrier : Set (ℙ K V)\n  /-- The addition rule. -/\n  mem_add' (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    mk K v hv ∈ carrier → mk K w hw ∈ carrier → mk K (v + w) hvw ∈ carrier\n\n"}
{"name":"Projectivization.Subspace.ext_iff","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nx y : Projectivization.Subspace K V\n⊢ Iff (Eq x y) (Eq x.carrier y.carrier)","decl":"/-- A subspace of a projective space is a structure consisting of a set of points such that:\nIf two nonzero vectors determine points which are in the set, and the sum of the two vectors is\nnonzero, then the point determined by the sum is also in the set. -/\n@[ext]\nstructure Subspace where\n  /-- The set of points. -/\n  carrier : Set (ℙ K V)\n  /-- The addition rule. -/\n  mem_add' (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    mk K v hv ∈ carrier → mk K w hw ∈ carrier → mk K (v + w) hvw ∈ carrier\n\n"}
{"name":"Projectivization.Subspace.mem_carrier_iff","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nA : Projectivization.Subspace K V\nx : Projectivization K V\n⊢ Iff (Membership.mem A.carrier x) (Membership.mem A x)","decl":"@[simp]\ntheorem mem_carrier_iff (A : Subspace K V) (x : ℙ K V) : x ∈ A.carrier ↔ x ∈ A :=\n  Iff.refl _\n\n"}
{"name":"Projectivization.Subspace.mem_add","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nT : Projectivization.Subspace K V\nv w : V\nhv : Ne v 0\nhw : Ne w 0\nhvw : Ne (HAdd.hAdd v w) 0\na✝¹ : Membership.mem T (Projectivization.mk K v hv)\na✝ : Membership.mem T (Projectivization.mk K w hw)\n⊢ Membership.mem T (Projectivization.mk K (HAdd.hAdd v w) hvw)","decl":"theorem mem_add (T : Subspace K V) (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n    Projectivization.mk K v hv ∈ T →\n      Projectivization.mk K w hw ∈ T → Projectivization.mk K (v + w) hvw ∈ T :=\n  T.mem_add' v w hv hw hvw\n\n"}
{"name":"Projectivization.Subspace.spanCarrier.brecOn","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\nmotive✝ : (a : Projectivization K V) → Projectivization.Subspace.spanCarrier S a → Prop\na✝ : Projectivization K V\nx✝ : Projectivization.Subspace.spanCarrier S a✝\nih✝ : ∀ (a : Projectivization K V) (x : Projectivization.Subspace.spanCarrier S a), x.below → motive✝ a x\n⊢ motive✝ a✝ x✝","decl":"/-- The span of a set of points in a projective space is defined inductively to be the set of points\nwhich contains the original set, and contains all points determined by the (nonzero) sum of two\nnonzero vectors, each of which determine points in the span. -/\ninductive spanCarrier (S : Set (ℙ K V)) : Set (ℙ K V)\n  | of (x : ℙ K V) (hx : x ∈ S) : spanCarrier S x\n  | mem_add (v w : V) (hv : v ≠ 0) (hw : w ≠ 0) (hvw : v + w ≠ 0) :\n      spanCarrier S (Projectivization.mk K v hv) →\n      spanCarrier S (Projectivization.mk K w hw) → spanCarrier S (Projectivization.mk K (v + w) hvw)\n\n"}
{"name":"Projectivization.Subspace.subset_span","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\n⊢ HasSubset.Subset S ↑(Projectivization.Subspace.span S)","decl":"/-- The span of a set of points contains the set of points. -/\ntheorem subset_span (S : Set (ℙ K V)) : S ⊆ span S := fun _x hx => spanCarrier.of _ hx\n\n"}
{"name":"Projectivization.Subspace.span_coe","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nW : Projectivization.Subspace K V\n⊢ Eq (Projectivization.Subspace.span ↑W) W","decl":"/-- The span of a subspace is the subspace. -/\n@[simp]\ntheorem span_coe (W : Subspace K V) : span ↑W = W :=\n  GaloisInsertion.l_u_eq gi W\n\n"}
{"name":"Projectivization.Subspace.span_empty","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\n⊢ Eq (Projectivization.Subspace.span EmptyCollection.emptyCollection) Bot.bot","decl":"/-- The span of the empty set is the bottom of the lattice of subspaces. -/\n@[simp]\ntheorem span_empty : span (∅ : Set (ℙ K V)) = ⊥ := gi.gc.l_bot\n\n"}
{"name":"Projectivization.Subspace.span_univ","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\n⊢ Eq (Projectivization.Subspace.span Set.univ) Top.top","decl":"/-- The span of the entire projective space is the top of the lattice of subspaces. -/\n@[simp]\ntheorem span_univ : span (Set.univ : Set (ℙ K V)) = ⊤ := by\n  rw [eq_top_iff, SetLike.le_def]\n  intro x _hx\n  exact subset_span _ (Set.mem_univ x)\n\n"}
{"name":"Projectivization.Subspace.span_le_subspace_iff","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\nW : Projectivization.Subspace K V\n⊢ Iff (LE.le (Projectivization.Subspace.span S) W) (HasSubset.Subset S ↑W)","decl":"/-- The span of a set of points is contained in a subspace if and only if the set of points is\ncontained in the subspace. -/\ntheorem span_le_subspace_iff {S : Set (ℙ K V)} {W : Subspace K V} : span S ≤ W ↔ S ⊆ W :=\n  gi.gc S W\n\n"}
{"name":"Projectivization.Subspace.monotone_span","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\n⊢ Monotone Projectivization.Subspace.span","decl":"/-- If a set of points is a subset of another set of points, then its span will be contained in the\nspan of that set. -/\n@[mono]\ntheorem monotone_span : Monotone (span : Set (ℙ K V) → Subspace K V) :=\n  gi.gc.monotone_l\n\n"}
{"name":"Projectivization.Subspace.span_le_span","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\ns t : Set (Projectivization K V)\nhst : HasSubset.Subset s t\n⊢ LE.le (Projectivization.Subspace.span s) (Projectivization.Subspace.span t)","decl":"@[gcongr]\nlemma span_le_span {s t : Set (ℙ K V)} (hst : s ⊆ t) : span s ≤ span t := monotone_span hst\n\n"}
{"name":"Projectivization.Subspace.subset_span_trans","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS T U : Set (Projectivization K V)\nhST : HasSubset.Subset S ↑(Projectivization.Subspace.span T)\nhTU : HasSubset.Subset T ↑(Projectivization.Subspace.span U)\n⊢ HasSubset.Subset S ↑(Projectivization.Subspace.span U)","decl":"theorem subset_span_trans {S T U : Set (ℙ K V)} (hST : S ⊆ span T) (hTU : T ⊆ span U) :\n    S ⊆ span U :=\n  gi.gc.le_u_l_trans hST hTU\n\n"}
{"name":"Projectivization.Subspace.span_union","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS T : Set (Projectivization K V)\n⊢ Eq (Projectivization.Subspace.span (Union.union S T)) (Max.max (Projectivization.Subspace.span S) (Projectivization.Subspace.span T))","decl":"/-- The supremum of two subspaces is equal to the span of their union. -/\ntheorem span_union (S T : Set (ℙ K V)) : span (S ∪ T) = span S ⊔ span T :=\n  (@gi K V _ _ _).gc.l_sup\n\n"}
{"name":"Projectivization.Subspace.span_iUnion","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nι : Sort u_3\ns : ι → Set (Projectivization K V)\n⊢ Eq (Projectivization.Subspace.span (Set.iUnion fun i => s i)) (iSup fun i => Projectivization.Subspace.span (s i))","decl":"/-- The supremum of a collection of subspaces is equal to the span of the union of the\ncollection. -/\ntheorem span_iUnion {ι} (s : ι → Set (ℙ K V)) : span (⋃ i, s i) = ⨆ i, span (s i) :=\n  (@gi K V _ _ _).gc.l_iSup\n\n"}
{"name":"Projectivization.Subspace.sup_span","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\nW : Projectivization.Subspace K V\n⊢ Eq (Max.max W (Projectivization.Subspace.span S)) (Projectivization.Subspace.span (Union.union (↑W) S))","decl":"/-- The supremum of a subspace and the span of a set of points is equal to the span of the union of\nthe subspace and the set of points. -/\ntheorem sup_span {S : Set (ℙ K V)} {W : Subspace K V} : W ⊔ span S = span (W ∪ S) := by\n  rw [span_union, span_coe]\n\n"}
{"name":"Projectivization.Subspace.span_sup","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\nW : Projectivization.Subspace K V\n⊢ Eq (Max.max (Projectivization.Subspace.span S) W) (Projectivization.Subspace.span (Union.union S ↑W))","decl":"theorem span_sup {S : Set (ℙ K V)} {W : Subspace K V} : span S ⊔ W = span (S ∪ W) := by\n  rw [span_union, span_coe]\n\n"}
{"name":"Projectivization.Subspace.mem_span","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\nu : Projectivization K V\n⊢ Iff (Membership.mem (Projectivization.Subspace.span S) u) (∀ (W : Projectivization.Subspace K V), HasSubset.Subset S ↑W → Membership.mem W u)","decl":"/-- A point in a projective space is contained in the span of a set of points if and only if the\npoint is contained in all subspaces of the projective space which contain the set of points. -/\ntheorem mem_span {S : Set (ℙ K V)} (u : ℙ K V) :\n    u ∈ span S ↔ ∀ W : Subspace K V, S ⊆ W → u ∈ W := by\n  simp_rw [← span_le_subspace_iff]\n  exact ⟨fun hu W hW => hW hu, fun W => W (span S) (le_refl _)⟩\n\n"}
{"name":"Projectivization.Subspace.span_eq_sInf","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\n⊢ Eq (Projectivization.Subspace.span S) (InfSet.sInf (setOf fun W => HasSubset.Subset S ↑W))","decl":"/-- The span of a set of points in a projective space is equal to the infimum of the collection of\nsubspaces which contain the set. -/\ntheorem span_eq_sInf {S : Set (ℙ K V)} : span S = sInf { W : Subspace K V| S ⊆ W } := by\n  ext x\n  simp_rw [mem_carrier_iff, mem_span x]\n  refine ⟨fun hx => ?_, fun hx W hW => ?_⟩\n  · rintro W ⟨T, hT, rfl⟩\n    exact hx T hT\n  · exact (@sInf_le _ _ { W : Subspace K V | S ⊆ ↑W } W hW) hx\n\n"}
{"name":"Projectivization.Subspace.span_eq_of_le","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS : Set (Projectivization K V)\nW : Projectivization.Subspace K V\nhS : HasSubset.Subset S ↑W\nhW : LE.le W (Projectivization.Subspace.span S)\n⊢ Eq (Projectivization.Subspace.span S) W","decl":"/-- If a set of points in projective space is contained in a subspace, and that subspace is\ncontained in the span of the set of points, then the span of the set of points is equal to\nthe subspace. -/\ntheorem span_eq_of_le {S : Set (ℙ K V)} {W : Subspace K V} (hS : S ⊆ W) (hW : W ≤ span S) :\n    span S = W :=\n  le_antisymm (span_le_subspace_iff.mpr hS) hW\n\n"}
{"name":"Projectivization.Subspace.span_eq_span_iff","module":"Mathlib.LinearAlgebra.Projectivization.Subspace","initialProofState":"K : Type u_1\nV : Type u_2\ninst✝² : Field K\ninst✝¹ : AddCommGroup V\ninst✝ : Module K V\nS T : Set (Projectivization K V)\n⊢ Iff (Eq (Projectivization.Subspace.span S) (Projectivization.Subspace.span T)) (And (HasSubset.Subset S ↑(Projectivization.Subspace.span T)) (HasSubset.Subset T ↑(Projectivization.Subspace.span S)))","decl":"/-- The spans of two sets of points in a projective space are equal if and only if each set of\npoints is contained in the span of the other set. -/\ntheorem span_eq_span_iff {S T : Set (ℙ K V)} : span S = span T ↔ S ⊆ span T ∧ T ⊆ span S :=\n  ⟨fun h => ⟨h ▸ subset_span S, h.symm ▸ subset_span T⟩, fun h =>\n    le_antisymm (span_le_subspace_iff.2 h.1) (span_le_subspace_iff.2 h.2)⟩\n\n"}
