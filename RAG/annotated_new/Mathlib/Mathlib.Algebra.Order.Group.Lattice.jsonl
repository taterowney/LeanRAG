{"name":"mul_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulLeftMono α\na b c : α\n⊢ Eq (HMul.hMul c (Max.max a b)) (Max.max (HMul.hMul c a) (HMul.hMul c b))","decl":"@[to_additive]\nlemma mul_sup [MulLeftMono α] (a b c : α) :\n    c * (a ⊔ b) = c * a ⊔ c * b :=\n  (OrderIso.mulLeft _).map_sup _ _\n\n"}
{"name":"add_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddLeftMono α\na b c : α\n⊢ Eq (HAdd.hAdd c (Max.max a b)) (Max.max (HAdd.hAdd c a) (HAdd.hAdd c b))","decl":"@[to_additive]\nlemma mul_sup [MulLeftMono α] (a b c : α) :\n    c * (a ⊔ b) = c * a ⊔ c * b :=\n  (OrderIso.mulLeft _).map_sup _ _\n\n"}
{"name":"sup_mul","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (HMul.hMul (Max.max a b) c) (Max.max (HMul.hMul a c) (HMul.hMul b c))","decl":"@[to_additive]\nlemma sup_mul [MulRightMono α] (a b c : α) :\n    (a ⊔ b) * c = a * c ⊔ b * c :=\n  (OrderIso.mulRight _).map_sup _ _\n\n"}
{"name":"sup_add","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (HAdd.hAdd (Max.max a b) c) (Max.max (HAdd.hAdd a c) (HAdd.hAdd b c))","decl":"@[to_additive]\nlemma sup_mul [MulRightMono α] (a b c : α) :\n    (a ⊔ b) * c = a * c ⊔ b * c :=\n  (OrderIso.mulRight _).map_sup _ _\n\n"}
{"name":"add_inf","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddLeftMono α\na b c : α\n⊢ Eq (HAdd.hAdd c (Min.min a b)) (Min.min (HAdd.hAdd c a) (HAdd.hAdd c b))","decl":"@[to_additive]\nlemma mul_inf [MulLeftMono α] (a b c : α) :\n    c * (a ⊓ b) = c * a ⊓ c * b :=\n  (OrderIso.mulLeft _).map_inf _ _\n\n"}
{"name":"mul_inf","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulLeftMono α\na b c : α\n⊢ Eq (HMul.hMul c (Min.min a b)) (Min.min (HMul.hMul c a) (HMul.hMul c b))","decl":"@[to_additive]\nlemma mul_inf [MulLeftMono α] (a b c : α) :\n    c * (a ⊓ b) = c * a ⊓ c * b :=\n  (OrderIso.mulLeft _).map_inf _ _\n\n"}
{"name":"inf_add","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (HAdd.hAdd (Min.min a b) c) (Min.min (HAdd.hAdd a c) (HAdd.hAdd b c))","decl":"@[to_additive]\nlemma inf_mul [MulRightMono α] (a b c : α) :\n    (a ⊓ b) * c = a * c ⊓ b * c :=\n  (OrderIso.mulRight _).map_inf _ _\n\n"}
{"name":"inf_mul","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (HMul.hMul (Min.min a b) c) (Min.min (HMul.hMul a c) (HMul.hMul b c))","decl":"@[to_additive]\nlemma inf_mul [MulRightMono α] (a b c : α) :\n    (a ⊓ b) * c = a * c ⊓ b * c :=\n  (OrderIso.mulRight _).map_inf _ _\n\n"}
{"name":"sup_sub","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (HSub.hSub (Max.max a b) c) (Max.max (HSub.hSub a c) (HSub.hSub b c))","decl":"@[to_additive]\nlemma sup_div [MulRightMono α] (a b c : α) :\n    (a ⊔ b) / c = a / c ⊔ b / c :=\n  (OrderIso.divRight _).map_sup _ _\n\n"}
{"name":"sup_div","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (HDiv.hDiv (Max.max a b) c) (Max.max (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[to_additive]\nlemma sup_div [MulRightMono α] (a b c : α) :\n    (a ⊔ b) / c = a / c ⊔ b / c :=\n  (OrderIso.divRight _).map_sup _ _\n\n"}
{"name":"inf_div","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : Group α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (HDiv.hDiv (Min.min a b) c) (Min.min (HDiv.hDiv a c) (HDiv.hDiv b c))","decl":"@[to_additive]\nlemma inf_div [MulRightMono α] (a b c : α) :\n    (a ⊓ b) / c = a / c ⊓ b / c :=\n  (OrderIso.divRight _).map_inf _ _\n\n"}
{"name":"inf_sub","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddGroup α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (HSub.hSub (Min.min a b) c) (Min.min (HSub.hSub a c) (HSub.hSub b c))","decl":"@[to_additive]\nlemma inf_div [MulRightMono α] (a b c : α) :\n    (a ⊓ b) / c = a / c ⊓ b / c :=\n  (OrderIso.divRight _).map_inf _ _\n\n"}
{"name":"neg_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b : α\n⊢ Eq (Neg.neg (Max.max a b)) (Min.min (Neg.neg a) (Neg.neg b))","decl":"@[to_additive] lemma inv_sup (a b : α) : (a ⊔ b)⁻¹ = a⁻¹ ⊓ b⁻¹ := (OrderIso.inv α).map_sup _ _\n\n"}
{"name":"inv_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b : α\n⊢ Eq (Inv.inv (Max.max a b)) (Min.min (Inv.inv a) (Inv.inv b))","decl":"@[to_additive] lemma inv_sup (a b : α) : (a ⊔ b)⁻¹ = a⁻¹ ⊓ b⁻¹ := (OrderIso.inv α).map_sup _ _\n\n"}
{"name":"neg_inf","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b : α\n⊢ Eq (Neg.neg (Min.min a b)) (Max.max (Neg.neg a) (Neg.neg b))","decl":"@[to_additive] lemma inv_inf (a b : α) : (a ⊓ b)⁻¹ = a⁻¹ ⊔ b⁻¹ := (OrderIso.inv α).map_inf _ _\n\n"}
{"name":"inv_inf","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b : α\n⊢ Eq (Inv.inv (Min.min a b)) (Max.max (Inv.inv a) (Inv.inv b))","decl":"@[to_additive] lemma inv_inf (a b : α) : (a ⊓ b)⁻¹ = a⁻¹ ⊔ b⁻¹ := (OrderIso.inv α).map_inf _ _\n\n"}
{"name":"div_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (HDiv.hDiv c (Max.max a b)) (Min.min (HDiv.hDiv c a) (HDiv.hDiv c b))","decl":"@[to_additive]\nlemma div_sup (a b c : α) : c / (a ⊔ b) = c / a ⊓ c / b := (OrderIso.divLeft c).map_sup _ _\n\n"}
{"name":"sub_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (HSub.hSub c (Max.max a b)) (Min.min (HSub.hSub c a) (HSub.hSub c b))","decl":"@[to_additive]\nlemma div_sup (a b c : α) : c / (a ⊔ b) = c / a ⊓ c / b := (OrderIso.divLeft c).map_sup _ _\n\n"}
{"name":"div_inf","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na b c : α\n⊢ Eq (HDiv.hDiv c (Min.min a b)) (Max.max (HDiv.hDiv c a) (HDiv.hDiv c b))","decl":"@[to_additive]\nlemma div_inf (a b c : α) : c / (a ⊓ b) = c / a ⊔ c / b := (OrderIso.divLeft c).map_inf _ _\n\n-- In fact 0 ≤ n•a implies 0 ≤ a, see L. Fuchs, \"Partially ordered algebraic systems\"\n-- Chapter V, 1.E\n-- See also `one_le_pow_iff` for the existing version in linear orders\n"}
{"name":"sub_inf","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na b c : α\n⊢ Eq (HSub.hSub c (Min.min a b)) (Max.max (HSub.hSub c a) (HSub.hSub c b))","decl":"@[to_additive]\nlemma div_inf (a b c : α) : c / (a ⊓ b) = c / a ⊔ c / b := (OrderIso.divLeft c).map_inf _ _\n\n-- In fact 0 ≤ n•a implies 0 ≤ a, see L. Fuchs, \"Partially ordered algebraic systems\"\n-- Chapter V, 1.E\n-- See also `one_le_pow_iff` for the existing version in linear orders\n"}
{"name":"pow_two_semiclosed","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : Group α\ninst✝¹ : MulLeftMono α\ninst✝ : MulRightMono α\na : α\nha : LE.le 1 (HPow.hPow a 2)\n⊢ LE.le 1 a","decl":"@[to_additive]\nlemma pow_two_semiclosed\n    {a : α} (ha : 1 ≤ a ^ 2) : 1 ≤ a := by\n  suffices this : (a ⊓ 1) * (a ⊓ 1) = a ⊓ 1 by\n    rwa [← inf_eq_right, ← mul_right_eq_self]\n  rw [mul_inf, inf_mul, ← pow_two, mul_one, one_mul, inf_assoc, inf_left_idem, inf_comm,\n    inf_assoc, inf_of_le_left ha]\n\n"}
{"name":"nsmul_two_semiclosed","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝³ : Lattice α\ninst✝² : AddGroup α\ninst✝¹ : AddLeftMono α\ninst✝ : AddRightMono α\na : α\nha : LE.le 0 (HSMul.hSMul 2 a)\n⊢ LE.le 0 a","decl":"@[to_additive]\nlemma pow_two_semiclosed\n    {a : α} (ha : 1 ≤ a ^ 2) : 1 ≤ a := by\n  suffices this : (a ⊓ 1) * (a ⊓ 1) = a ⊓ 1 by\n    rwa [← inf_eq_right, ← mul_right_eq_self]\n  rw [mul_inf, inf_mul, ← pow_two, mul_one, one_mul, inf_assoc, inf_left_idem, inf_comm,\n    inf_assoc, inf_of_le_left ha]\n\n"}
{"name":"inf_add_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : AddCommGroup α\ninst✝ : AddLeftMono α\na b : α\n⊢ Eq (HAdd.hAdd (Min.min a b) (Max.max a b)) (HAdd.hAdd a b)","decl":"@[to_additive]\nlemma inf_mul_sup [MulLeftMono α] (a b : α) : (a ⊓ b) * (a ⊔ b) = a * b :=\n  calc\n    (a ⊓ b) * (a ⊔ b) = (a ⊓ b) * (a * b * (b⁻¹ ⊔ a⁻¹)) := by\n      rw [mul_sup b⁻¹ a⁻¹ (a * b), mul_inv_cancel_right, mul_inv_cancel_comm]\n    _ = (a ⊓ b) * (a * b * (a ⊓ b)⁻¹) := by rw [inv_inf, sup_comm]\n    _ = a * b := by rw [mul_comm, inv_mul_cancel_right]\n\n"}
{"name":"inf_mul_sup","module":"Mathlib.Algebra.Order.Group.Lattice","initialProofState":"α : Type u_1\ninst✝² : Lattice α\ninst✝¹ : CommGroup α\ninst✝ : MulLeftMono α\na b : α\n⊢ Eq (HMul.hMul (Min.min a b) (Max.max a b)) (HMul.hMul a b)","decl":"@[to_additive]\nlemma inf_mul_sup [MulLeftMono α] (a b : α) : (a ⊓ b) * (a ⊔ b) = a * b :=\n  calc\n    (a ⊓ b) * (a ⊔ b) = (a ⊓ b) * (a * b * (b⁻¹ ⊔ a⁻¹)) := by\n      rw [mul_sup b⁻¹ a⁻¹ (a * b), mul_inv_cancel_right, mul_inv_cancel_comm]\n    _ = (a ⊓ b) * (a * b * (a ⊓ b)⁻¹) := by rw [inv_inf, sup_comm]\n    _ = a * b := by rw [mul_comm, inv_mul_cancel_right]\n\n"}
