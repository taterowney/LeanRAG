{"name":"Nat.factorization_choose_le_log","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n k : Nat\n⊢ LE.le ((n.choose k).factorization p) (Nat.log p n)","decl":"/-- A logarithmic upper bound on the multiplicity of a prime in a binomial coefficient. -/\ntheorem factorization_choose_le_log : (choose n k).factorization p ≤ log p n := by\n  by_cases h : (choose n k).factorization p = 0\n  · simp [h]\n  have hp : p.Prime := Not.imp_symm (choose n k).factorization_eq_zero_of_non_prime h\n  have hkn : k ≤ n := by\n    refine le_of_not_lt fun hnk => h ?_\n    simp [choose_eq_zero_of_lt hnk]\n  rw [factorization_def _ hp, @padicValNat_def _ ⟨hp⟩ _ (choose_pos hkn)]\n  rw [← Nat.cast_le (α := ℕ∞), ← FiniteMultiplicity.emultiplicity_eq_multiplicity]\n  · simp only [hp.emultiplicity_choose hkn (lt_add_one _), Nat.cast_le]\n    exact (Finset.card_filter_le _ _).trans (le_of_eq (Nat.card_Ico _ _))\n  apply Nat.finiteMultiplicity_iff.2 ⟨hp.ne_one, choose_pos hkn⟩\n\n"}
{"name":"Nat.pow_factorization_choose_le","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n k : Nat\nhn : LT.lt 0 n\n⊢ LE.le (HPow.hPow p ((n.choose k).factorization p)) n","decl":"/-- A `pow` form of `Nat.factorization_choose_le` -/\ntheorem pow_factorization_choose_le (hn : 0 < n) : p ^ (choose n k).factorization p ≤ n :=\n  pow_le_of_le_log hn.ne' factorization_choose_le_log\n\n"}
{"name":"Nat.factorization_choose_le_one","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n k : Nat\np_large : LT.lt n (HPow.hPow p 2)\n⊢ LE.le ((n.choose k).factorization p) 1","decl":"/-- Primes greater than about `sqrt n` appear only to multiplicity 0 or 1\nin the binomial coefficient. -/\ntheorem factorization_choose_le_one (p_large : n < p ^ 2) : (choose n k).factorization p ≤ 1 := by\n  apply factorization_choose_le_log.trans\n  rcases eq_or_ne n 0 with (rfl | hn0); · simp\n  exact Nat.lt_succ_iff.1 (log_lt_of_lt_pow hn0 p_large)\n\n"}
{"name":"Nat.factorization_choose_of_lt_three_mul","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n k : Nat\nhp' : Ne p 2\nhk : LE.le p k\nhk' : LE.le p (HSub.hSub n k)\nhn : LT.lt n (HMul.hMul 3 p)\n⊢ Eq ((n.choose k).factorization p) 0","decl":"theorem factorization_choose_of_lt_three_mul (hp' : p ≠ 2) (hk : p ≤ k) (hk' : p ≤ n - k)\n    (hn : n < 3 * p) : (choose n k).factorization p = 0 := by\n  cases' em' p.Prime with hp hp\n  · exact factorization_eq_zero_of_non_prime (choose n k) hp\n  cases' lt_or_le n k with hnk hkn\n  · simp [choose_eq_zero_of_lt hnk]\n  rw [factorization_def _ hp, @padicValNat_def _ ⟨hp⟩ _ (choose_pos hkn),\n    ← emultiplicity_eq_zero_iff_multiplicity_eq_zero]\n  simp only [hp.emultiplicity_choose hkn (lt_add_one _), cast_eq_zero, Finset.card_eq_zero,\n    Finset.filter_eq_empty_iff, not_le]\n  intro i hi\n  rcases eq_or_lt_of_le (Finset.mem_Ico.mp hi).1 with (rfl | hi)\n  · rw [pow_one, ← add_lt_add_iff_left (2 * p), ← succ_mul, two_mul, add_add_add_comm]\n    exact\n      lt_of_le_of_lt\n        (add_le_add\n          (add_le_add_right (le_mul_of_one_le_right' ((one_le_div_iff hp.pos).mpr hk)) (k % p))\n          (add_le_add_right (le_mul_of_one_le_right' ((one_le_div_iff hp.pos).mpr hk'))\n            ((n - k) % p)))\n        (by rwa [div_add_mod, div_add_mod, add_tsub_cancel_of_le hkn])\n  · replace hn : n < p ^ i := by\n      have : 3 ≤ p := lt_of_le_of_ne hp.two_le hp'.symm\n      calc\n        n < 3 * p := hn\n        _ ≤ p * p := mul_le_mul_right' this p\n        _ = p ^ 2 := (sq p).symm\n        _ ≤ p ^ i := pow_right_mono₀ hp.one_lt.le hi\n    rwa [mod_eq_of_lt (lt_of_le_of_lt hkn hn), mod_eq_of_lt (lt_of_le_of_lt tsub_le_self hn),\n      add_tsub_cancel_of_le hkn]\n\n"}
{"name":"Nat.factorization_centralBinom_of_two_mul_self_lt_three_mul","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n : Nat\nn_big : LT.lt 2 n\np_le_n : LE.le p n\nbig : LT.lt (HMul.hMul 2 n) (HMul.hMul 3 p)\n⊢ Eq (n.centralBinom.factorization p) 0","decl":"/-- Primes greater than about `2 * n / 3` and less than `n` do not appear in the factorization of\n`centralBinom n`. -/\ntheorem factorization_centralBinom_of_two_mul_self_lt_three_mul (n_big : 2 < n) (p_le_n : p ≤ n)\n    (big : 2 * n < 3 * p) : (centralBinom n).factorization p = 0 := by\n  refine factorization_choose_of_lt_three_mul ?_ p_le_n (p_le_n.trans ?_) big\n  · omega\n  · rw [two_mul, add_tsub_cancel_left]\n\n"}
{"name":"Nat.factorization_factorial_eq_zero_of_lt","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n : Nat\nh : LT.lt n p\n⊢ Eq (n.factorial.factorization p) 0","decl":"theorem factorization_factorial_eq_zero_of_lt (h : n < p) : (factorial n).factorization p = 0 := by\n  induction' n with n hn; · simp\n  rw [factorial_succ, factorization_mul n.succ_ne_zero n.factorial_ne_zero, Finsupp.coe_add,\n    Pi.add_apply, hn (lt_of_succ_lt h), add_zero, factorization_eq_zero_of_lt h]\n\n"}
{"name":"Nat.factorization_choose_eq_zero_of_lt","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n k : Nat\nh : LT.lt n p\n⊢ Eq ((n.choose k).factorization p) 0","decl":"theorem factorization_choose_eq_zero_of_lt (h : n < p) : (choose n k).factorization p = 0 := by\n  by_cases hnk : n < k; · simp [choose_eq_zero_of_lt hnk]\n  rw [choose_eq_factorial_div_factorial (le_of_not_lt hnk),\n    factorization_div (factorial_mul_factorial_dvd_factorial (le_of_not_lt hnk)), Finsupp.coe_tsub,\n    Pi.sub_apply, factorization_factorial_eq_zero_of_lt h, zero_tsub]\n\n"}
{"name":"Nat.factorization_centralBinom_eq_zero_of_two_mul_lt","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n : Nat\nh : LT.lt (HMul.hMul 2 n) p\n⊢ Eq (n.centralBinom.factorization p) 0","decl":"/-- If a prime `p` has positive multiplicity in the `n`th central binomial coefficient,\n`p` is no more than `2 * n` -/\ntheorem factorization_centralBinom_eq_zero_of_two_mul_lt (h : 2 * n < p) :\n    (centralBinom n).factorization p = 0 :=\n  factorization_choose_eq_zero_of_lt h\n\n"}
{"name":"Nat.le_two_mul_of_factorization_centralBinom_pos","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"p n : Nat\nh_pos : LT.lt 0 (n.centralBinom.factorization p)\n⊢ LE.le p (HMul.hMul 2 n)","decl":"/-- Contrapositive form of `Nat.factorization_centralBinom_eq_zero_of_two_mul_lt` -/\ntheorem le_two_mul_of_factorization_centralBinom_pos\n    (h_pos : 0 < (centralBinom n).factorization p) : p ≤ 2 * n :=\n  le_of_not_lt (pos_iff_ne_zero.mp h_pos ∘ factorization_centralBinom_eq_zero_of_two_mul_lt)\n\n"}
{"name":"Nat.prod_pow_factorization_choose","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"n k : Nat\nhkn : LE.le k n\n⊢ Eq ((Finset.range (HAdd.hAdd n 1)).prod fun p => HPow.hPow p ((n.choose k).factorization p)) (n.choose k)","decl":"/-- A binomial coefficient is the product of its prime factors, which are at most `n`. -/\ntheorem prod_pow_factorization_choose (n k : ℕ) (hkn : k ≤ n) :\n    (∏ p ∈ Finset.range (n + 1), p ^ (Nat.choose n k).factorization p) = choose n k := by\n  conv => -- Porting note: was `nth_rw_rhs`\n    rhs\n    rw [← factorization_prod_pow_eq_self (choose_pos hkn).ne']\n  rw [eq_comm]\n  apply Finset.prod_subset\n  · intro p hp\n    rw [Finset.mem_range]\n    contrapose! hp\n    rw [Finsupp.mem_support_iff, Classical.not_not, factorization_choose_eq_zero_of_lt hp]\n  · intro p _ h2\n    simp [Classical.not_not.1 (mt Finsupp.mem_support_iff.2 h2)]\n\n"}
{"name":"Nat.prod_pow_factorization_centralBinom","module":"Mathlib.Data.Nat.Choose.Factorization","initialProofState":"n : Nat\n⊢ Eq ((Finset.range (HAdd.hAdd (HMul.hMul 2 n) 1)).prod fun p => HPow.hPow p (n.centralBinom.factorization p)) n.centralBinom","decl":"/-- The `n`th central binomial coefficient is the product of its prime factors, which are\nat most `2n`. -/\ntheorem prod_pow_factorization_centralBinom (n : ℕ) :\n    (∏ p ∈ Finset.range (2 * n + 1), p ^ (centralBinom n).factorization p) = centralBinom n := by\n  apply prod_pow_factorization_choose\n  omega\n\n"}
