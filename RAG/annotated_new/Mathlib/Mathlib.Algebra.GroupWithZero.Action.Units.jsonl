{"name":"inv_smul_smul₀","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : GroupWithZero α\ninst✝ : MulAction α β\na : α\nha : Ne a 0\nx : β\n⊢ Eq (HSMul.hSMul (Inv.inv a) (HSMul.hSMul a x)) x","decl":"@[simp] lemma inv_smul_smul₀ (ha : a ≠ 0) (x : β) : a⁻¹ • a • x = x :=\n  inv_smul_smul (Units.mk0 a ha) x\n\n"}
{"name":"smul_inv_smul₀","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : GroupWithZero α\ninst✝ : MulAction α β\na : α\nha : Ne a 0\nx : β\n⊢ Eq (HSMul.hSMul a (HSMul.hSMul (Inv.inv a) x)) x","decl":"@[simp]\nlemma smul_inv_smul₀ (ha : a ≠ 0) (x : β) : a • a⁻¹ • x = x := smul_inv_smul (Units.mk0 a ha) x\n\n"}
{"name":"inv_smul_eq_iff₀","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : GroupWithZero α\ninst✝ : MulAction α β\na : α\nha : Ne a 0\nx y : β\n⊢ Iff (Eq (HSMul.hSMul (Inv.inv a) x) y) (Eq x (HSMul.hSMul a y))","decl":"lemma inv_smul_eq_iff₀ (ha : a ≠ 0) {x y : β} : a⁻¹ • x = y ↔ x = a • y :=\n  inv_smul_eq_iff (g := Units.mk0 a ha)\n\n"}
{"name":"eq_inv_smul_iff₀","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : GroupWithZero α\ninst✝ : MulAction α β\na : α\nha : Ne a 0\nx y : β\n⊢ Iff (Eq x (HSMul.hSMul (Inv.inv a) y)) (Eq (HSMul.hSMul a x) y)","decl":"lemma eq_inv_smul_iff₀ (ha : a ≠ 0) {x y : β} : x = a⁻¹ • y ↔ a • x = y :=\n  eq_inv_smul_iff (g := Units.mk0 a ha)\n\n"}
{"name":"Commute.smul_right_iff₀","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝⁴ : GroupWithZero α\ninst✝³ : MulAction α β\na : α\ninst✝² : Mul β\ninst✝¹ : SMulCommClass α β β\ninst✝ : IsScalarTower α β β\nx y : β\nha : Ne a 0\n⊢ Iff (Commute x (HSMul.hSMul a y)) (Commute x y)","decl":"@[simp]\nlemma Commute.smul_right_iff₀ [Mul β] [SMulCommClass α β β] [IsScalarTower α β β] {x y : β}\n    (ha : a ≠ 0) : Commute x (a • y) ↔ Commute x y := Commute.smul_right_iff (g := Units.mk0 a ha)\n\n"}
{"name":"Commute.smul_left_iff₀","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝⁴ : GroupWithZero α\ninst✝³ : MulAction α β\na : α\ninst✝² : Mul β\ninst✝¹ : SMulCommClass α β β\ninst✝ : IsScalarTower α β β\nx y : β\nha : Ne a 0\n⊢ Iff (Commute (HSMul.hSMul a x) y) (Commute x y)","decl":"@[simp]\nlemma Commute.smul_left_iff₀ [Mul β] [SMulCommClass α β β] [IsScalarTower α β β] {x y : β}\n    (ha : a ≠ 0) : Commute (a • x) y ↔ Commute x y := Commute.smul_left_iff (g := Units.mk0 a ha)\n\n"}
{"name":"Equiv.smulRight_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : GroupWithZero α\ninst✝ : MulAction α β\na : α\nha : Ne a 0\nb : β\n⊢ Eq ((Equiv.smulRight ha) b) (HSMul.hSMul a b)","decl":"/-- Right scalar multiplication as an order isomorphism. -/\n@[simps] def Equiv.smulRight (ha : a ≠ 0) : β ≃ β where\n  toFun b := a • b\n  invFun b := a⁻¹ • b\n  left_inv := inv_smul_smul₀ ha\n  right_inv := smul_inv_smul₀ ha\n\n"}
{"name":"Equiv.smulRight_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"α : Type u_3\nβ : Type u_4\ninst✝¹ : GroupWithZero α\ninst✝ : MulAction α β\na : α\nha : Ne a 0\nb : β\n⊢ Eq ((Equiv.smulRight ha).symm b) (HSMul.hSMul (Inv.inv a) b)","decl":"/-- Right scalar multiplication as an order isomorphism. -/\n@[simps] def Equiv.smulRight (ha : a ≠ 0) : β ≃ β where\n  toFun b := a • b\n  invFun b := a⁻¹ • b\n  left_inv := inv_smul_smul₀ ha\n  right_inv := smul_inv_smul₀ ha\n\n"}
{"name":"IsUnit.smul_eq_zero","module":"Mathlib.Algebra.GroupWithZero.Action.Units","initialProofState":"G : Type u_1\nM : Type u_2\ninst✝² : Monoid G\ninst✝¹ : AddMonoid M\ninst✝ : DistribMulAction G M\nu : G\nx : M\nhu : IsUnit u\n⊢ Iff (Eq (HSMul.hSMul u x) 0) (Eq x 0)","decl":"@[simp] lemma IsUnit.smul_eq_zero (hu : IsUnit u) : u • x = 0 ↔ x = 0 := smul_eq_zero_iff_eq hu.unit\n\n"}
