{"name":"Polynomial.IsSplittingField.splits'","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nf : Polynomial K\nself : Polynomial.IsSplittingField K L f\n⊢ Polynomial.Splits (algebraMap K L) f","decl":"/-- Typeclass characterising splitting fields. -/\n@[stacks 09HV \"Predicate version\"]\nclass IsSplittingField (f : K[X]) : Prop where\n  splits' : Splits (algebraMap K L) f\n  adjoin_rootSet' : Algebra.adjoin K (f.rootSet L : Set L) = ⊤\n\n"}
{"name":"Polynomial.IsSplittingField.adjoin_rootSet'","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nf : Polynomial K\nself : Polynomial.IsSplittingField K L f\n⊢ Eq (Algebra.adjoin K (f.rootSet L)) Top.top","decl":"/-- Typeclass characterising splitting fields. -/\n@[stacks 09HV \"Predicate version\"]\nclass IsSplittingField (f : K[X]) : Prop where\n  splits' : Splits (algebraMap K L) f\n  adjoin_rootSet' : Algebra.adjoin K (f.rootSet L : Set L) = ⊤\n\n"}
{"name":"Polynomial.IsSplittingField.splits","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nf : Polynomial K\ninst✝ : Polynomial.IsSplittingField K L f\n⊢ Polynomial.Splits (algebraMap K L) f","decl":"theorem splits (f : K[X]) [IsSplittingField K L f] : Splits (algebraMap K L) f :=\n  splits'\n\n-- Porting note: infer kinds are unsupported\n-- so we provide a version of `adjoin_rootSet'` with `f` explicit.\n"}
{"name":"Polynomial.IsSplittingField.adjoin_rootSet","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nf : Polynomial K\ninst✝ : Polynomial.IsSplittingField K L f\n⊢ Eq (Algebra.adjoin K (f.rootSet L)) Top.top","decl":"theorem adjoin_rootSet (f : K[X]) [IsSplittingField K L f] :\n    Algebra.adjoin K (f.rootSet L : Set L) = ⊤ :=\n  adjoin_rootSet'\n\n"}
{"name":"Polynomial.IsSplittingField.map","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"F : Type u\nK : Type v\nL : Type w\ninst✝⁷ : Field K\ninst✝⁶ : Field L\ninst✝⁵ : Field F\ninst✝⁴ : Algebra K L\ninst✝³ : Algebra F K\ninst✝² : Algebra F L\ninst✝¹ : IsScalarTower F K L\nf : Polynomial F\ninst✝ : Polynomial.IsSplittingField F L f\n⊢ Polynomial.IsSplittingField K L (Polynomial.map (algebraMap F K) f)","decl":"instance map (f : F[X]) [IsSplittingField F L f] : IsSplittingField K L (f.map <| algebraMap F K) :=\n  ⟨by rw [splits_map_iff, ← IsScalarTower.algebraMap_eq]; exact splits L f,\n    Subalgebra.restrictScalars_injective F <| by\n      rw [rootSet, aroots, map_map, ← IsScalarTower.algebraMap_eq, Subalgebra.restrictScalars_top,\n        eq_top_iff, ← adjoin_rootSet L f, Algebra.adjoin_le_iff]\n      exact fun x hx => @Algebra.subset_adjoin K _ _ _ _ _ _ hx⟩\n\n"}
{"name":"Polynomial.IsSplittingField.splits_iff","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nf : Polynomial K\ninst✝ : Polynomial.IsSplittingField K L f\n⊢ Iff (Polynomial.Splits (RingHom.id K) f) (Eq Top.top Bot.bot)","decl":"theorem splits_iff (f : K[X]) [IsSplittingField K L f] :\n    Splits (RingHom.id K) f ↔ (⊤ : Subalgebra K L) = ⊥ :=\n  ⟨fun h => by -- Porting note: replaced term-mode proof\n    rw [eq_bot_iff, ← adjoin_rootSet L f, rootSet, aroots, roots_map (algebraMap K L) h,\n      Algebra.adjoin_le_iff]\n    intro y hy\n    classical\n    rw [Multiset.toFinset_map, Finset.mem_coe, Finset.mem_image] at hy\n    obtain ⟨x : K, -, hxy : algebraMap K L x = y⟩ := hy\n    rw [← hxy]\n    exact SetLike.mem_coe.2 <| Subalgebra.algebraMap_mem _ _,\n    fun h => @RingEquiv.toRingHom_refl K _ ▸ RingEquiv.self_trans_symm\n      (RingEquiv.ofBijective _ <| Algebra.bijective_algebraMap_iff.2 h) ▸ by\n        rw [RingEquiv.toRingHom_trans]\n        exact splits_comp_of_splits _ _ (splits L f)⟩\n\n"}
{"name":"Polynomial.IsSplittingField.mul","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"F : Type u\nK : Type v\nL : Type w\ninst✝⁸ : Field K\ninst✝⁷ : Field L\ninst✝⁶ : Field F\ninst✝⁵ : Algebra K L\ninst✝⁴ : Algebra F K\ninst✝³ : Algebra F L\ninst✝² : IsScalarTower F K L\nf g : Polynomial F\nhf : Ne f 0\nhg : Ne g 0\ninst✝¹ : Polynomial.IsSplittingField F K f\ninst✝ : Polynomial.IsSplittingField K L (Polynomial.map (algebraMap F K) g)\n⊢ Polynomial.IsSplittingField F L (HMul.hMul f g)","decl":"theorem mul (f g : F[X]) (hf : f ≠ 0) (hg : g ≠ 0) [IsSplittingField F K f]\n    [IsSplittingField K L (g.map <| algebraMap F K)] : IsSplittingField F L (f * g) :=\n  ⟨(IsScalarTower.algebraMap_eq F K L).symm ▸\n      splits_mul _ (splits_comp_of_splits _ _ (splits K f))\n        ((splits_map_iff _ _).1 (splits L <| g.map <| algebraMap F K)), by\n    classical\n    rw [rootSet, aroots_mul (mul_ne_zero hf hg),\n      Multiset.toFinset_add, Finset.coe_union, Algebra.adjoin_union_eq_adjoin_adjoin,\n      aroots_def, aroots_def, IsScalarTower.algebraMap_eq F K L, ← map_map,\n      roots_map (algebraMap K L) ((splits_id_iff_splits <| algebraMap F K).2 <| splits K f),\n      Multiset.toFinset_map, Finset.coe_image, Algebra.adjoin_algebraMap, ← rootSet, adjoin_rootSet,\n      Algebra.map_top, IsScalarTower.adjoin_range_toAlgHom, ← map_map, ← rootSet, adjoin_rootSet,\n      Subalgebra.restrictScalars_top]⟩\n\n"}
{"name":"Polynomial.IsSplittingField.finiteDimensional","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝³ : Field K\ninst✝² : Field L\ninst✝¹ : Algebra K L\nf : Polynomial K\ninst✝ : Polynomial.IsSplittingField K L f\n⊢ FiniteDimensional K L","decl":"theorem finiteDimensional (f : K[X]) [IsSplittingField K L f] : FiniteDimensional K L := by\n  classical\n  exact ⟨@Algebra.top_toSubmodule K L _ _ _ ▸\n    adjoin_rootSet L f ▸ fg_adjoin_of_finite (Finset.finite_toSet _) fun y hy ↦\n      if hf : f = 0 then by rw [hf, rootSet_zero] at hy; cases hy\n      else IsAlgebraic.isIntegral ⟨f, hf, (mem_rootSet'.mp hy).2⟩⟩\n\n"}
{"name":"Polynomial.IsSplittingField.of_algEquiv","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"F : Type u\nK : Type v\nL : Type w\ninst✝⁵ : Field K\ninst✝⁴ : Field L\ninst✝³ : Field F\ninst✝² : Algebra K L\ninst✝¹ : Algebra K F\np : Polynomial K\nf : AlgEquiv K F L\ninst✝ : Polynomial.IsSplittingField K F p\n⊢ Polynomial.IsSplittingField K L p","decl":"theorem of_algEquiv [Algebra K F] (p : K[X]) (f : F ≃ₐ[K] L) [IsSplittingField K F p] :\n    IsSplittingField K L p := by\n  constructor\n  · rw [← f.toAlgHom.comp_algebraMap]\n    exact splits_comp_of_splits _ _ (splits F p)\n  · rw [← (AlgHom.range_eq_top f.toAlgHom).mpr f.surjective,\n      adjoin_rootSet_eq_range (splits F p), adjoin_rootSet F p]\n\n"}
{"name":"Polynomial.IsSplittingField.adjoin_rootSet_eq_range","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"F : Type u\nK : Type v\nL : Type w\ninst✝⁵ : Field K\ninst✝⁴ : Field L\ninst✝³ : Field F\ninst✝² : Algebra K L\ninst✝¹ : Algebra K F\nf : Polynomial K\ninst✝ : Polynomial.IsSplittingField K L f\ni : AlgHom K L F\n⊢ Eq (Algebra.adjoin K (f.rootSet F)) i.range","decl":"theorem adjoin_rootSet_eq_range [Algebra K F] (f : K[X]) [IsSplittingField K L f] (i : L →ₐ[K] F) :\n    Algebra.adjoin K (rootSet f F) = i.range :=\n  (Polynomial.adjoin_rootSet_eq_range (splits L f) i).mpr (adjoin_rootSet L f)\n\n"}
{"name":"IntermediateField.splits_of_splits","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\np : Polynomial K\nF : IntermediateField K L\nh : Polynomial.Splits (algebraMap K L) p\nhF : ∀ (x : L), Membership.mem (p.rootSet L) x → Membership.mem F x\n⊢ Polynomial.Splits (algebraMap K (Subtype fun x => Membership.mem F x)) p","decl":"theorem IntermediateField.splits_of_splits (h : p.Splits (algebraMap K L))\n    (hF : ∀ x ∈ p.rootSet L, x ∈ F) : p.Splits (algebraMap K F) := by\n  classical\n  simp_rw [← F.fieldRange_val, rootSet_def, Finset.mem_coe, Multiset.mem_toFinset] at hF\n  exact splits_of_comp _ F.val.toRingHom h hF\n\n"}
{"name":"IntermediateField.splits_iff_mem","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\np : Polynomial K\nF : IntermediateField K L\nh : Polynomial.Splits (algebraMap K L) p\n⊢ Iff (Polynomial.Splits (algebraMap K (Subtype fun x => Membership.mem F x)) p) (∀ (x : L), Membership.mem (p.rootSet L) x → Membership.mem F x)","decl":"theorem IntermediateField.splits_iff_mem (h : p.Splits (algebraMap K L)) :\n    p.Splits (algebraMap K F) ↔ ∀ x ∈ p.rootSet L, x ∈ F := by\n  refine ⟨?_, IntermediateField.splits_of_splits h⟩\n  intro hF\n  rw [← Polynomial.image_rootSet hF F.val, Set.forall_mem_image]\n  exact fun x _ ↦ x.2\n\n"}
{"name":"IsIntegral.mem_intermediateField_of_minpoly_splits","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\nx : L\nint : IsIntegral K x\nF : IntermediateField K L\nh : Polynomial.Splits (algebraMap K (Subtype fun x => Membership.mem F x)) (minpoly K x)\n⊢ Membership.mem F x","decl":"theorem IsIntegral.mem_intermediateField_of_minpoly_splits {x : L} (int : IsIntegral K x)\n    {F : IntermediateField K L} (h : Splits (algebraMap K F) (minpoly K x)) : x ∈ F := by\n  rw [← F.fieldRange_val]; exact int.mem_range_algebraMap_of_minpoly_splits h\n\n"}
{"name":"isSplittingField_iff_intermediateField","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\np : Polynomial K\n⊢ Iff (Polynomial.IsSplittingField K L p) (And (Polynomial.Splits (algebraMap K L) p) (Eq (IntermediateField.adjoin K (p.rootSet L)) Top.top))","decl":"/-- Characterize `IsSplittingField` with `IntermediateField.adjoin` instead of `Algebra.adjoin`. -/\ntheorem isSplittingField_iff_intermediateField : p.IsSplittingField K L ↔\n    p.Splits (algebraMap K L) ∧ IntermediateField.adjoin K (p.rootSet L) = ⊤ := by\n  rw [← IntermediateField.toSubalgebra_injective.eq_iff,\n      IntermediateField.adjoin_algebraic_toSubalgebra fun _ ↦ isAlgebraic_of_mem_rootSet]\n  exact ⟨fun ⟨spl, adj⟩ ↦ ⟨spl, adj⟩, fun ⟨spl, adj⟩ ↦ ⟨spl, adj⟩⟩\n\n-- Note: p.Splits (algebraMap F E) also works\n"}
{"name":"IntermediateField.isSplittingField_iff","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\np : Polynomial K\nF : IntermediateField K L\n⊢ Iff (Polynomial.IsSplittingField K (Subtype fun x => Membership.mem F x) p) (And (Polynomial.Splits (algebraMap K (Subtype fun x => Membership.mem F x)) p) (Eq F (IntermediateField.adjoin K (p.rootSet L))))","decl":"theorem IntermediateField.isSplittingField_iff :\n    p.IsSplittingField K F ↔ p.Splits (algebraMap K F) ∧ F = adjoin K (p.rootSet L) := by\n  suffices _ → (Algebra.adjoin K (p.rootSet F) = ⊤ ↔ F = adjoin K (p.rootSet L)) by\n    exact ⟨fun h ↦ ⟨h.1, (this h.1).mp h.2⟩, fun h ↦ ⟨h.1, (this h.1).mpr h.2⟩⟩\n  rw [← toSubalgebra_injective.eq_iff,\n      adjoin_algebraic_toSubalgebra fun x ↦ isAlgebraic_of_mem_rootSet]\n  refine fun hp ↦ (adjoin_rootSet_eq_range hp F.val).symm.trans ?_\n  rw [← F.range_val, eq_comm]\n\n"}
{"name":"IntermediateField.adjoin_rootSet_isSplittingField","module":"Mathlib.FieldTheory.SplittingField.IsSplittingField","initialProofState":"K : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Algebra K L\np : Polynomial K\nhp : Polynomial.Splits (algebraMap K L) p\n⊢ Polynomial.IsSplittingField K (Subtype fun x => Membership.mem (IntermediateField.adjoin K (p.rootSet L)) x) p","decl":"theorem IntermediateField.adjoin_rootSet_isSplittingField (hp : p.Splits (algebraMap K L)) :\n    p.IsSplittingField K (adjoin K (p.rootSet L)) :=\n  isSplittingField_iff.mpr ⟨splits_of_splits hp fun _ hx ↦ subset_adjoin K (p.rootSet L) hx, rfl⟩\n"}
