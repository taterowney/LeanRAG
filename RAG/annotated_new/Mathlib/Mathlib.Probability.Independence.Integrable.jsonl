{"name":"MeasureTheory.Memℒp.isProbabilityMeasure_of_indepFun","module":"Mathlib.Probability.Independence.Integrable","initialProofState":"Ω : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasurableSpace E\ninst✝¹ : BorelSpace E\ninst✝ : MeasurableSpace F\nf : Ω → E\ng : Ω → F\np : ENNReal\nhp : Ne p 0\nhp' : Ne p Top.top\nhℒp : MeasureTheory.Memℒp f p μ\nh'f : Not (Filter.Eventually (fun ω => Eq (f ω) 0) (MeasureTheory.ae μ))\nhindep : ProbabilityTheory.IndepFun f g μ\n⊢ MeasureTheory.IsProbabilityMeasure μ","decl":"/-- If a nonzero function belongs to `ℒ^p` and is independent of another function, then\nthe space is a probability space. -/\nlemma Memℒp.isProbabilityMeasure_of_indepFun\n    (f : Ω → E) (g : Ω → F) {p : ℝ≥0∞} (hp : p ≠ 0) (hp' : p ≠ ∞)\n    (hℒp : Memℒp f p μ) (h'f : ¬ (∀ᵐ ω ∂μ, f ω = 0)) (hindep : IndepFun f g μ) :\n    IsProbabilityMeasure μ := by\n  obtain ⟨c, c_pos, hc⟩ : ∃ (c : ℝ≥0), 0 < c ∧ 0 < μ {ω | c ≤ ‖f ω‖₊} := by\n    contrapose! h'f\n    have A (c : ℝ≥0) (hc : 0 < c) : ∀ᵐ ω ∂μ, ‖f ω‖₊ < c := by simpa [ae_iff] using h'f c hc\n    obtain ⟨u, -, u_pos, u_lim⟩ : ∃ u, StrictAnti u ∧ (∀ (n : ℕ), 0 < u n)\n      ∧ Tendsto u atTop (𝓝 0) := exists_seq_strictAnti_tendsto (0 : ℝ≥0)\n    filter_upwards [ae_all_iff.2 (fun n ↦ A (u n) (u_pos n))] with ω hω\n    simpa using ge_of_tendsto' u_lim (fun i ↦ (hω i).le)\n  have h'c : μ {ω | c ≤ ‖f ω‖₊} < ∞ := hℒp.meas_ge_lt_top hp hp' c_pos.ne'\n  have := hindep.measure_inter_preimage_eq_mul {x | c ≤ ‖x‖₊} Set.univ\n    (isClosed_le continuous_const continuous_nnnorm).measurableSet MeasurableSet.univ\n  simp only [Set.preimage_setOf_eq, Set.preimage_univ, Set.inter_univ] at this\n  exact ⟨(ENNReal.mul_eq_left hc.ne' h'c.ne).1 this.symm⟩\n\n"}
{"name":"MeasureTheory.Integrable.isProbabilityMeasure_of_indepFun","module":"Mathlib.Probability.Independence.Integrable","initialProofState":"Ω : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : MeasurableSpace Ω\nμ : MeasureTheory.Measure Ω\ninst✝³ : NormedAddCommGroup E\ninst✝² : MeasurableSpace E\ninst✝¹ : BorelSpace E\ninst✝ : MeasurableSpace F\nf : Ω → E\ng : Ω → F\nhf : MeasureTheory.Integrable f μ\nh'f : Not (Filter.Eventually (fun ω => Eq (f ω) 0) (MeasureTheory.ae μ))\nhindep : ProbabilityTheory.IndepFun f g μ\n⊢ MeasureTheory.IsProbabilityMeasure μ","decl":"/-- If a nonzero function is integrable and is independent of another function, then\nthe space is a probability space. -/\nlemma Integrable.isProbabilityMeasure_of_indepFun (f : Ω → E) (g : Ω → F)\n    (hf : Integrable f μ) (h'f : ¬ (∀ᵐ ω ∂μ, f ω = 0)) (hindep : IndepFun f g μ) :\n    IsProbabilityMeasure μ :=\n  Memℒp.isProbabilityMeasure_of_indepFun f g one_ne_zero ENNReal.one_ne_top\n    (memℒp_one_iff_integrable.mpr hf) h'f hindep\n\n"}
