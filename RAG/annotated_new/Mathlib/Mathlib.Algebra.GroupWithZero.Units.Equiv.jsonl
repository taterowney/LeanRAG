{"name":"unitsEquivNeZero_apply_coe","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : Units G₀\n⊢ Eq ↑(unitsEquivNeZero a) ↑a","decl":"/-- In a `GroupWithZero` `G₀`, the unit group `G₀ˣ` is equivalent to the subtype of nonzero\nelements. -/\n@[simps] def _root_.unitsEquivNeZero : G₀ˣ ≃ {a : G₀ // a ≠ 0} where\n  toFun a := ⟨a, a.ne_zero⟩\n  invFun a := Units.mk0 _ a.prop\n  left_inv _ := Units.ext rfl\n  right_inv _ := rfl\n\n"}
{"name":"unitsEquivNeZero_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : Subtype fun a => Ne a 0\n⊢ Eq (unitsEquivNeZero.symm a) (Units.mk0 ↑a ⋯)","decl":"/-- In a `GroupWithZero` `G₀`, the unit group `G₀ˣ` is equivalent to the subtype of nonzero\nelements. -/\n@[simps] def _root_.unitsEquivNeZero : G₀ˣ ≃ {a : G₀ // a ≠ 0} where\n  toFun a := ⟨a, a.ne_zero⟩\n  invFun a := Units.mk0 _ a.prop\n  left_inv _ := Units.ext rfl\n  right_inv _ := rfl\n\n"}
{"name":"Equiv.mulLeft₀_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\n⊢ Eq ⇑(Equiv.symm (Equiv.mulLeft₀ a ha)) fun x => HMul.hMul (Inv.inv a) x","decl":"/-- Left multiplication by a nonzero element in a `GroupWithZero` is a permutation of the\nunderlying type. -/\n@[simps! (config := .asFn)]\nprotected def mulLeft₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ :=\n  (Units.mk0 a ha).mulLeft\n\n"}
{"name":"Equiv.mulLeft₀_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\n⊢ Eq ⇑(Equiv.mulLeft₀ a ha) fun x => HMul.hMul a x","decl":"/-- Left multiplication by a nonzero element in a `GroupWithZero` is a permutation of the\nunderlying type. -/\n@[simps! (config := .asFn)]\nprotected def mulLeft₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ :=\n  (Units.mk0 a ha).mulLeft\n\n"}
{"name":"mulLeft_bijective₀","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\n⊢ Function.Bijective fun x => HMul.hMul a x","decl":"theorem _root_.mulLeft_bijective₀ (a : G₀) (ha : a ≠ 0) : Function.Bijective (a * · : G₀ → G₀) :=\n  (Equiv.mulLeft₀ a ha).bijective\n\n"}
{"name":"Equiv.mulRight₀_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\n⊢ Eq ⇑(Equiv.mulRight₀ a ha) fun x => HMul.hMul x a","decl":"/-- Right multiplication by a nonzero element in a `GroupWithZero` is a permutation of the\nunderlying type. -/\n@[simps! (config := .asFn)]\nprotected def mulRight₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ :=\n  (Units.mk0 a ha).mulRight\n\n"}
{"name":"Equiv.mulRight₀_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\n⊢ Eq ⇑(Equiv.symm (Equiv.mulRight₀ a ha)) fun x => HMul.hMul x (Inv.inv a)","decl":"/-- Right multiplication by a nonzero element in a `GroupWithZero` is a permutation of the\nunderlying type. -/\n@[simps! (config := .asFn)]\nprotected def mulRight₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ :=\n  (Units.mk0 a ha).mulRight\n\n"}
{"name":"mulRight_bijective₀","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\n⊢ Function.Bijective fun x => HMul.hMul x a","decl":"theorem _root_.mulRight_bijective₀ (a : G₀) (ha : a ≠ 0) : Function.Bijective ((· * a) : G₀ → G₀) :=\n  (Equiv.mulRight₀ a ha).bijective\n\n"}
{"name":"Equiv.divRight₀_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\nx✝ : G₀\n⊢ Eq ((Equiv.symm (Equiv.divRight₀ a ha)) x✝) (HMul.hMul x✝ a)","decl":"/-- Right division by a nonzero element in a `GroupWithZero` is a permutation of the\nunderlying type. -/\n@[simps! (config := { simpRhs := true })]\ndef divRight₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ where\n  toFun := (· / a)\n  invFun := (· * a)\n  left_inv _ := by simp [ha]\n  right_inv _ := by simp [ha]\n\n"}
{"name":"Equiv.divRight₀_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : GroupWithZero G₀\na : G₀\nha : Ne a 0\nx✝ : G₀\n⊢ Eq ((Equiv.divRight₀ a ha) x✝) (HDiv.hDiv x✝ a)","decl":"/-- Right division by a nonzero element in a `GroupWithZero` is a permutation of the\nunderlying type. -/\n@[simps! (config := { simpRhs := true })]\ndef divRight₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ where\n  toFun := (· / a)\n  invFun := (· * a)\n  left_inv _ := by simp [ha]\n  right_inv _ := by simp [ha]\n\n"}
{"name":"Equiv.divLeft₀_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : CommGroupWithZero G₀\na : G₀\nha : Ne a 0\nx✝ : G₀\n⊢ Eq ((Equiv.divLeft₀ a ha) x✝) (HDiv.hDiv a x✝)","decl":"/-- Left division by a nonzero element in a `CommGroupWithZero` is a permutation of the underlying\ntype. -/\n@[simps! (config := { simpRhs := true })]\ndef divLeft₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ where\n  toFun := (a / ·)\n  invFun := (a / ·)\n  left_inv _ := by simp [ha]\n  right_inv _ := by simp [ha]\n\n"}
{"name":"Equiv.divLeft₀_symm_apply","module":"Mathlib.Algebra.GroupWithZero.Units.Equiv","initialProofState":"G₀ : Type u_1\ninst✝ : CommGroupWithZero G₀\na : G₀\nha : Ne a 0\nx✝ : G₀\n⊢ Eq ((Equiv.symm (Equiv.divLeft₀ a ha)) x✝) (HDiv.hDiv a x✝)","decl":"/-- Left division by a nonzero element in a `CommGroupWithZero` is a permutation of the underlying\ntype. -/\n@[simps! (config := { simpRhs := true })]\ndef divLeft₀ (a : G₀) (ha : a ≠ 0) : Perm G₀ where\n  toFun := (a / ·)\n  invFun := (a / ·)\n  left_inv _ := by simp [ha]\n  right_inv _ := by simp [ha]\n\n"}
