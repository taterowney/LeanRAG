{"name":"HomologicalComplex.hasMapBifunctor_flip_iff","module":"Mathlib.Algebra.Homology.BifunctorFlip","initialProofState":"C₁ : Type u_1\nC₂ : Type u_2\nD : Type u_3\ninst✝¹⁰ : CategoryTheory.Category.{u_8, u_1} C₁\ninst✝⁹ : CategoryTheory.Category.{u_7, u_2} C₂\ninst✝⁸ : CategoryTheory.Category.{u_9, u_3} D\nI₁ : Type u_4\nI₂ : Type u_5\nJ : Type u_6\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\ninst✝⁷ : CategoryTheory.Limits.HasZeroMorphisms C₁\ninst✝⁶ : CategoryTheory.Limits.HasZeroMorphisms C₂\ninst✝⁵ : CategoryTheory.Preadditive D\nK₁ : HomologicalComplex C₁ c₁\nK₂ : HomologicalComplex C₂ c₂\nF : CategoryTheory.Functor C₁ (CategoryTheory.Functor C₂ D)\ninst✝⁴ : F.PreservesZeroMorphisms\ninst✝³ : ∀ (X₁ : C₁), (F.obj X₁).PreservesZeroMorphisms\nc : ComplexShape J\ninst✝² : TotalComplexShape c₁ c₂ c\ninst✝¹ : TotalComplexShape c₂ c₁ c\ninst✝ : TotalComplexShapeSymmetry c₁ c₂ c\n⊢ Iff (K₂.HasMapBifunctor K₁ F.flip c) (K₁.HasMapBifunctor K₂ F c)","decl":"lemma hasMapBifunctor_flip_iff :\n    HasMapBifunctor K₂ K₁ F.flip c ↔ HasMapBifunctor K₁ K₂ F c :=\n  (((F.mapBifunctorHomologicalComplex c₁ c₂).obj K₁).obj K₂).flip_hasTotal_iff c\n\n"}
{"name":"HomologicalComplex.instHasMapBifunctorFlip","module":"Mathlib.Algebra.Homology.BifunctorFlip","initialProofState":"C₁ : Type u_1\nC₂ : Type u_2\nD : Type u_3\ninst✝⁸ : CategoryTheory.Category.{u_8, u_1} C₁\ninst✝⁷ : CategoryTheory.Category.{u_7, u_2} C₂\ninst✝⁶ : CategoryTheory.Category.{u_9, u_3} D\nI₁ : Type u_4\nI₂ : Type u_5\nJ : Type u_6\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\ninst✝⁵ : CategoryTheory.Limits.HasZeroMorphisms C₁\ninst✝⁴ : CategoryTheory.Limits.HasZeroMorphisms C₂\ninst✝³ : CategoryTheory.Preadditive D\nK₁ : HomologicalComplex C₁ c₁\nK₂ : HomologicalComplex C₂ c₂\nF : CategoryTheory.Functor C₁ (CategoryTheory.Functor C₂ D)\ninst✝² : F.PreservesZeroMorphisms\ninst✝¹ : ∀ (X₁ : C₁), (F.obj X₁).PreservesZeroMorphisms\nc : ComplexShape J\ninst✝ : TotalComplexShape c₂ c₁ c\n⊢ K₂.HasMapBifunctor K₁ F.flip c","decl":"instance : HasMapBifunctor K₂ K₁ F.flip c := by\n  rw [hasMapBifunctor_flip_iff]\n  infer_instance\n\n"}
{"name":"HomologicalComplex.mapBifunctorFlipIso_flip","module":"Mathlib.Algebra.Homology.BifunctorFlip","initialProofState":"C₁ : Type u_1\nC₂ : Type u_2\nD : Type u_3\ninst✝¹⁴ : CategoryTheory.Category.{u_8, u_1} C₁\ninst✝¹³ : CategoryTheory.Category.{u_9, u_2} C₂\ninst✝¹² : CategoryTheory.Category.{u_7, u_3} D\nI₁ : Type u_4\nI₂ : Type u_5\nJ : Type u_6\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\ninst✝¹¹ : CategoryTheory.Limits.HasZeroMorphisms C₁\ninst✝¹⁰ : CategoryTheory.Limits.HasZeroMorphisms C₂\ninst✝⁹ : CategoryTheory.Preadditive D\nK₁ : HomologicalComplex C₁ c₁\nK₂ : HomologicalComplex C₂ c₂\nF : CategoryTheory.Functor C₁ (CategoryTheory.Functor C₂ D)\ninst✝⁸ : F.PreservesZeroMorphisms\ninst✝⁷ : ∀ (X₁ : C₁), (F.obj X₁).PreservesZeroMorphisms\nc : ComplexShape J\ninst✝⁶ : TotalComplexShape c₁ c₂ c\ninst✝⁵ : TotalComplexShape c₂ c₁ c\ninst✝⁴ : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝³ : DecidableEq J\ninst✝² : K₁.HasMapBifunctor K₂ F c\ninst✝¹ : TotalComplexShapeSymmetry c₂ c₁ c\ninst✝ : TotalComplexShapeSymmetrySymmetry c₁ c₂ c\n⊢ Eq (K₂.mapBifunctorFlipIso K₁ F.flip c) (K₁.mapBifunctorFlipIso K₂ F c).symm","decl":"lemma mapBifunctorFlipIso_flip\n    [TotalComplexShapeSymmetry c₂ c₁ c] [TotalComplexShapeSymmetrySymmetry c₁ c₂ c] :\n    mapBifunctorFlipIso K₂ K₁ F.flip c = (mapBifunctorFlipIso K₁ K₂ F c).symm :=\n  (((F.mapBifunctorHomologicalComplex c₁ c₂).obj K₁).obj K₂).flip_totalFlipIso c\n\n"}
