{"name":"MeasureTheory.Measure.comp_assoc","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\nη : ProbabilityTheory.Kernel β γ\n⊢ Eq ((μ.bind ⇑κ).bind ⇑η) (μ.bind ⇑(η.comp κ))","decl":"lemma comp_assoc {η : Kernel β γ} : η ∘ₘ (κ ∘ₘ μ) = (η ∘ₖ κ) ∘ₘ μ :=\n  Measure.bind_bind κ.measurable η.measurable\n\n"}
{"name":"MeasureTheory.Measure.snd_compProd","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ninst✝¹ : MeasureTheory.SFinite μ\nκ : ProbabilityTheory.Kernel α β\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ Eq (μ.compProd κ).snd (μ.bind ⇑κ)","decl":"@[simp]\nlemma snd_compProd (μ : Measure α) [SFinite μ] (κ : Kernel α β) [IsSFiniteKernel κ] :\n    (μ ⊗ₘ κ).snd = κ ∘ₘ μ := by\n  ext s hs\n  rw [bind_apply hs κ.measurable, snd_apply hs, compProd_apply]\n  · rfl\n  · exact measurable_snd hs\n\n"}
{"name":"MeasureTheory.Measure.instSFiniteBindCoeKernelOfIsSFiniteKernel","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : MeasureTheory.SFinite μ\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ MeasureTheory.SFinite (μ.bind ⇑κ)","decl":"instance [SFinite μ] [IsSFiniteKernel κ] : SFinite (κ ∘ₘ μ) := by\n  rw [← snd_compProd]; infer_instance\n\n"}
{"name":"MeasureTheory.Measure.instIsFiniteMeasureBindCoeKernelOfIsFiniteKernel","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : MeasureTheory.IsFiniteMeasure μ\ninst✝ : ProbabilityTheory.IsFiniteKernel κ\n⊢ MeasureTheory.IsFiniteMeasure (μ.bind ⇑κ)","decl":"instance [IsFiniteMeasure μ] [IsFiniteKernel κ] : IsFiniteMeasure (κ ∘ₘ μ) := by\n  rw [← snd_compProd]; infer_instance\n\n"}
{"name":"MeasureTheory.Measure.instIsProbabilityMeasureBindCoeKernelOfIsMarkovKernel","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : MeasureTheory.IsProbabilityMeasure μ\ninst✝ : ProbabilityTheory.IsMarkovKernel κ\n⊢ MeasureTheory.IsProbabilityMeasure (μ.bind ⇑κ)","decl":"instance [IsProbabilityMeasure μ] [IsMarkovKernel κ] : IsProbabilityMeasure (κ ∘ₘ μ) := by\n  rw [← snd_compProd]; infer_instance\n\n"}
{"name":"MeasureTheory.Measure.instIsZeroOrProbabilityMeasureBindCoeKernelOfIsZeroOrMarkovKernel","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝¹ : MeasureTheory.IsZeroOrProbabilityMeasure μ\ninst✝ : ProbabilityTheory.IsZeroOrMarkovKernel κ\n⊢ MeasureTheory.IsZeroOrProbabilityMeasure (μ.bind ⇑κ)","decl":"instance [IsZeroOrProbabilityMeasure μ] [IsZeroOrMarkovKernel κ] :\n    IsZeroOrProbabilityMeasure (κ ∘ₘ μ) := by\n  rw [← snd_compProd]; infer_instance\n\n"}
{"name":"MeasureTheory.Measure.map_comp","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nmγ : MeasurableSpace γ\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\nf : β → γ\nhf : Measurable f\n⊢ Eq (MeasureTheory.Measure.map f (μ.bind ⇑κ)) (μ.bind ⇑(κ.map f))","decl":"lemma map_comp (μ : Measure α) (κ : Kernel α β) {f : β → γ} (hf : Measurable f) :\n    (κ ∘ₘ μ).map f = (κ.map f) ∘ₘ μ := by\n  ext s hs\n  rw [Measure.map_apply hf hs, Measure.bind_apply (hf hs) κ.measurable,\n    Measure.bind_apply hs (Kernel.measurable _)]\n  simp_rw [Kernel.map_apply' _ hf _ hs]\n\n"}
{"name":"MeasureTheory.Measure.compProd_eq_comp_prod","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\ninst✝¹ : MeasureTheory.SFinite μ\nκ : ProbabilityTheory.Kernel α β\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ Eq (μ.compProd κ) (μ.bind ⇑(ProbabilityTheory.Kernel.id.prod κ))","decl":"lemma compProd_eq_comp_prod (μ : Measure α) [SFinite μ] (κ : Kernel α β) [IsSFiniteKernel κ] :\n    μ ⊗ₘ κ = (Kernel.id ×ₖ κ) ∘ₘ μ := by\n  rw [compProd, Kernel.compProd_prodMkLeft_eq_comp]\n  rfl\n\n"}
{"name":"MeasureTheory.Measure.compProd_id_eq_copy_comp","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nmα : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\n⊢ Eq (μ.compProd ProbabilityTheory.Kernel.id) (μ.bind ⇑(ProbabilityTheory.Kernel.copy α))","decl":"lemma compProd_id_eq_copy_comp [SFinite μ] : μ ⊗ₘ Kernel.id = Kernel.copy α ∘ₘ μ := by\n  rw [compProd_id, Kernel.copy, deterministic_comp_eq_map]\n\n"}
{"name":"MeasureTheory.Measure.comp_add","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ ν : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ Eq ((HAdd.hAdd μ ν).bind ⇑κ) (HAdd.hAdd (μ.bind ⇑κ) (ν.bind ⇑κ))","decl":"@[simp]\nlemma comp_add [SFinite μ] [SFinite ν] [IsSFiniteKernel κ] :\n    κ ∘ₘ (μ + ν) = κ ∘ₘ μ + κ ∘ₘ ν := by\n  simp_rw [← snd_compProd, compProd_add_left]\n  simp\n\n"}
{"name":"MeasureTheory.Measure.add_comp","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ η : ProbabilityTheory.Kernel α β\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq (μ.bind ⇑(HAdd.hAdd κ η)) (HAdd.hAdd (μ.bind ⇑κ) (μ.bind ⇑η))","decl":"lemma add_comp [SFinite μ] [IsSFiniteKernel κ] [IsSFiniteKernel η] :\n    (κ + η) ∘ₘ μ = κ ∘ₘ μ + η ∘ₘ μ := by\n  simp_rw [← snd_compProd, compProd_add_right]\n  simp\n\n"}
{"name":"MeasureTheory.Measure.add_comp'","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ η : ProbabilityTheory.Kernel α β\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\n⊢ Eq (μ.bind (HAdd.hAdd ⇑κ ⇑η)) (HAdd.hAdd (μ.bind ⇑κ) (μ.bind ⇑η))","decl":"/-- Same as `add_comp` except that it uses `⇑κ + ⇑η` instead of `⇑(κ + η)` in order to have\na simp-normal form on the left of the equality. -/\n@[simp]\nlemma add_comp' [SFinite μ] [IsSFiniteKernel κ] [IsSFiniteKernel η] :\n    (⇑κ + ⇑η) ∘ₘ μ = κ ∘ₘ μ + η ∘ₘ μ := by rw [← Kernel.coe_add, add_comp]\n\n"}
{"name":"MeasureTheory.Measure.comp_smul","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ : MeasureTheory.Measure α\nκ : ProbabilityTheory.Kernel α β\na : ENNReal\n⊢ Eq ((HSMul.hSMul a μ).bind ⇑κ) (HSMul.hSMul a (μ.bind ⇑κ))","decl":"lemma comp_smul (a : ℝ≥0∞) : κ ∘ₘ (a • μ) = a • (κ ∘ₘ μ) := by\n  ext s hs\n  simp only [bind_apply hs κ.measurable, lintegral_smul_measure, smul_apply, smul_eq_mul]\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.comp","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nμ ν : MeasureTheory.Measure α\nκ η : ProbabilityTheory.Kernel α β\ninst✝³ : MeasureTheory.SFinite μ\ninst✝² : MeasureTheory.SFinite ν\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel κ\ninst✝ : ProbabilityTheory.IsSFiniteKernel η\nhμν : μ.AbsolutelyContinuous ν\nhκη : Filter.Eventually (fun a => (κ a).AbsolutelyContinuous (η a)) (MeasureTheory.ae μ)\n⊢ (μ.bind ⇑κ).AbsolutelyContinuous (ν.bind ⇑η)","decl":"lemma AbsolutelyContinuous.comp (hμν : μ ≪ ν) (hκη : ∀ᵐ a ∂μ, κ a ≪ η a) :\n    κ ∘ₘ μ ≪ η ∘ₘ ν := by\n  simp_rw [← snd_compProd, Measure.snd]\n  exact (hμν.compProd hκη).map measurable_snd\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.comp_right","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nγ : Type u_3\nmα : MeasurableSpace α\nmγ : MeasurableSpace γ\nμ ν : MeasureTheory.Measure α\ninst✝² : MeasureTheory.SFinite μ\ninst✝¹ : MeasureTheory.SFinite ν\nhμν : μ.AbsolutelyContinuous ν\nκ : ProbabilityTheory.Kernel α γ\ninst✝ : ProbabilityTheory.IsSFiniteKernel κ\n⊢ (μ.bind ⇑κ).AbsolutelyContinuous (ν.bind ⇑κ)","decl":"lemma AbsolutelyContinuous.comp_right (hμν : μ ≪ ν) (κ : Kernel α γ) [IsSFiniteKernel κ]  :\n    κ ∘ₘ μ ≪ κ ∘ₘ ν :=\n  hμν.comp (ae_of_all μ fun _ _ a ↦ a)\n\n"}
{"name":"MeasureTheory.Measure.AbsolutelyContinuous.comp_left","module":"Mathlib.Probability.Kernel.Composition.MeasureComp","initialProofState":"α : Type u_1\nβ : Type u_2\nmα : MeasurableSpace α\nmβ : MeasurableSpace β\nκ η : ProbabilityTheory.Kernel α β\ninst✝² : ProbabilityTheory.IsSFiniteKernel κ\ninst✝¹ : ProbabilityTheory.IsSFiniteKernel η\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SFinite μ\nhκη : Filter.Eventually (fun a => (κ a).AbsolutelyContinuous (η a)) (MeasureTheory.ae μ)\n⊢ (μ.bind ⇑κ).AbsolutelyContinuous (μ.bind ⇑η)","decl":"lemma AbsolutelyContinuous.comp_left (μ : Measure α) [SFinite μ] (hκη : ∀ᵐ a ∂μ, κ a ≪ η a) :\n    κ ∘ₘ μ ≪ η ∘ₘ μ :=\n  μ.absolutelyContinuous_refl.comp hκη\n\n"}
