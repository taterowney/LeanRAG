{"name":"Sigma.vadd_def","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝ : (i : ι) → VAdd M (α i)\na : M\nx : Sigma fun i => α i\n⊢ Eq (HVAdd.hVAdd a x) (Sigma.map id (fun x x_1 => HVAdd.hVAdd a x_1) x)","decl":"@[to_additive]\ntheorem smul_def : a • x = x.map id fun _ => (a • ·) :=\n  rfl\n\n"}
{"name":"Sigma.smul_def","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝ : (i : ι) → SMul M (α i)\na : M\nx : Sigma fun i => α i\n⊢ Eq (HSMul.hSMul a x) (Sigma.map id (fun x x_1 => HSMul.hSMul a x_1) x)","decl":"@[to_additive]\ntheorem smul_def : a • x = x.map id fun _ => (a • ·) :=\n  rfl\n\n"}
{"name":"Sigma.smul_mk","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝ : (i : ι) → SMul M (α i)\na : M\ni : ι\nb : α i\n⊢ Eq (HSMul.hSMul a ⟨i, b⟩) ⟨i, HSMul.hSMul a b⟩","decl":"@[to_additive (attr := simp)]\ntheorem smul_mk : a • mk i b = ⟨i, a • b⟩ :=\n  rfl\n\n"}
{"name":"Sigma.vadd_mk","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝ : (i : ι) → VAdd M (α i)\na : M\ni : ι\nb : α i\n⊢ Eq (HVAdd.hVAdd a ⟨i, b⟩) ⟨i, HVAdd.hVAdd a b⟩","decl":"@[to_additive (attr := simp)]\ntheorem smul_mk : a • mk i b = ⟨i, a • b⟩ :=\n  rfl\n\n"}
{"name":"Sigma.instIsScalarTowerOfSMul","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nN : Type u_3\nα : ι → Type u_4\ninst✝³ : (i : ι) → SMul M (α i)\ninst✝² : (i : ι) → SMul N (α i)\ninst✝¹ : SMul M N\ninst✝ : ∀ (i : ι), IsScalarTower M N (α i)\n⊢ IsScalarTower M N (Sigma fun i => α i)","decl":"@[to_additive]\ninstance instIsScalarTowerOfSMul [SMul M N] [∀ i, IsScalarTower M N (α i)] :\n    IsScalarTower M N (Σi, α i) :=\n  ⟨fun a b x => by\n    cases x\n    rw [smul_mk, smul_mk, smul_mk, smul_assoc]⟩\n\n"}
{"name":"Sigma.instIsScalarTowerOfVAdd","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nN : Type u_3\nα : ι → Type u_4\ninst✝³ : (i : ι) → VAdd M (α i)\ninst✝² : (i : ι) → VAdd N (α i)\ninst✝¹ : VAdd M N\ninst✝ : ∀ (i : ι), VAddAssocClass M N (α i)\n⊢ VAddAssocClass M N (Sigma fun i => α i)","decl":"@[to_additive]\ninstance instIsScalarTowerOfSMul [SMul M N] [∀ i, IsScalarTower M N (α i)] :\n    IsScalarTower M N (Σi, α i) :=\n  ⟨fun a b x => by\n    cases x\n    rw [smul_mk, smul_mk, smul_mk, smul_assoc]⟩\n\n"}
{"name":"Sigma.instSMulCommClass","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nN : Type u_3\nα : ι → Type u_4\ninst✝² : (i : ι) → SMul M (α i)\ninst✝¹ : (i : ι) → SMul N (α i)\ninst✝ : ∀ (i : ι), SMulCommClass M N (α i)\n⊢ SMulCommClass M N (Sigma fun i => α i)","decl":"@[to_additive]\ninstance [∀ i, SMulCommClass M N (α i)] : SMulCommClass M N (Σi, α i) :=\n  ⟨fun a b x => by\n    cases x\n    rw [smul_mk, smul_mk, smul_mk, smul_mk, smul_comm]⟩\n\n"}
{"name":"Sigma.instVAddCommClass","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nN : Type u_3\nα : ι → Type u_4\ninst✝² : (i : ι) → VAdd M (α i)\ninst✝¹ : (i : ι) → VAdd N (α i)\ninst✝ : ∀ (i : ι), VAddCommClass M N (α i)\n⊢ VAddCommClass M N (Sigma fun i => α i)","decl":"@[to_additive]\ninstance [∀ i, SMulCommClass M N (α i)] : SMulCommClass M N (Σi, α i) :=\n  ⟨fun a b x => by\n    cases x\n    rw [smul_mk, smul_mk, smul_mk, smul_mk, smul_comm]⟩\n\n"}
{"name":"Sigma.instIsCentralScalar","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝² : (i : ι) → SMul M (α i)\ninst✝¹ : (i : ι) → SMul (MulOpposite M) (α i)\ninst✝ : ∀ (i : ι), IsCentralScalar M (α i)\n⊢ IsCentralScalar M (Sigma fun i => α i)","decl":"@[to_additive]\ninstance [∀ i, SMul Mᵐᵒᵖ (α i)] [∀ i, IsCentralScalar M (α i)] : IsCentralScalar M (Σi, α i) :=\n  ⟨fun a x => by\n    cases x\n    rw [smul_mk, smul_mk, op_smul_eq_smul]⟩\n\n"}
{"name":"Sigma.instIsCentralVAdd","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝² : (i : ι) → VAdd M (α i)\ninst✝¹ : (i : ι) → VAdd (AddOpposite M) (α i)\ninst✝ : ∀ (i : ι), IsCentralVAdd M (α i)\n⊢ IsCentralVAdd M (Sigma fun i => α i)","decl":"@[to_additive]\ninstance [∀ i, SMul Mᵐᵒᵖ (α i)] [∀ i, IsCentralScalar M (α i)] : IsCentralScalar M (Σi, α i) :=\n  ⟨fun a x => by\n    cases x\n    rw [smul_mk, smul_mk, op_smul_eq_smul]⟩\n\n"}
{"name":"Sigma.FaithfulVAdd'","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝¹ : (i : ι) → VAdd M (α i)\ni : ι\ninst✝ : FaithfulVAdd M (α i)\n⊢ FaithfulVAdd M (Sigma fun i => α i)","decl":"/-- This is not an instance because `i` becomes a metavariable. -/\n@[to_additive \"This is not an instance because `i` becomes a metavariable.\"]\nprotected theorem FaithfulSMul' [FaithfulSMul M (α i)] : FaithfulSMul M (Σi, α i) :=\n  ⟨fun h => eq_of_smul_eq_smul fun a : α i => heq_iff_eq.1 (Sigma.ext_iff.1 <| h <| mk i a).2⟩\n\n"}
{"name":"Sigma.FaithfulSMul'","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝¹ : (i : ι) → SMul M (α i)\ni : ι\ninst✝ : FaithfulSMul M (α i)\n⊢ FaithfulSMul M (Sigma fun i => α i)","decl":"/-- This is not an instance because `i` becomes a metavariable. -/\n@[to_additive \"This is not an instance because `i` becomes a metavariable.\"]\nprotected theorem FaithfulSMul' [FaithfulSMul M (α i)] : FaithfulSMul M (Σi, α i) :=\n  ⟨fun h => eq_of_smul_eq_smul fun a : α i => heq_iff_eq.1 (Sigma.ext_iff.1 <| h <| mk i a).2⟩\n\n"}
{"name":"Sigma.instFaithfulVAddOfNonempty","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝² : (i : ι) → VAdd M (α i)\ninst✝¹ : Nonempty ι\ninst✝ : ∀ (i : ι), FaithfulVAdd M (α i)\n⊢ FaithfulVAdd M (Sigma fun i => α i)","decl":"@[to_additive]\ninstance [Nonempty ι] [∀ i, FaithfulSMul M (α i)] : FaithfulSMul M (Σi, α i) :=\n  (Nonempty.elim ‹_›) fun i => Sigma.FaithfulSMul' i\n\n"}
{"name":"Sigma.instFaithfulSMulOfNonempty","module":"Mathlib.Algebra.Group.Action.Sigma","initialProofState":"ι : Type u_1\nM : Type u_2\nα : ι → Type u_4\ninst✝² : (i : ι) → SMul M (α i)\ninst✝¹ : Nonempty ι\ninst✝ : ∀ (i : ι), FaithfulSMul M (α i)\n⊢ FaithfulSMul M (Sigma fun i => α i)","decl":"@[to_additive]\ninstance [Nonempty ι] [∀ i, FaithfulSMul M (α i)] : FaithfulSMul M (Σi, α i) :=\n  (Nonempty.elim ‹_›) fun i => Sigma.FaithfulSMul' i\n\n"}
