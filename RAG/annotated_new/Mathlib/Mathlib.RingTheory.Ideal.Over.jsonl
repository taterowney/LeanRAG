{"name":"Ideal.comap_map_eq_self_iff_of_isPrime","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nf : RingHom R S\np : Ideal R\ninst✝ : p.IsPrime\n⊢ Iff (Eq (Ideal.comap f (Ideal.map f p)) p) (Exists fun q => And q.IsPrime (Eq (Ideal.comap f q) p))","decl":"/-- For a prime ideal `p` of `R`, `p` extended to `S` and\nrestricted back to `R` is `p` if and only if `p` is the restriction of a prime in `S`. -/\nlemma comap_map_eq_self_iff_of_isPrime (p : Ideal R) [p.IsPrime] :\n    (p.map f).comap f = p ↔ (∃ (q : Ideal S), q.IsPrime ∧ q.comap f = p) := by\n  refine ⟨fun hp ↦ ?_, ?_⟩\n  · obtain ⟨q, hq₁, hq₂, hq₃⟩ := Ideal.exists_le_prime_disjoint _ _\n      (disjoint_map_primeCompl_iff_comap_le.mpr hp.le)\n    exact ⟨q, hq₁, le_antisymm (disjoint_map_primeCompl_iff_comap_le.mp hq₃)\n      (map_le_iff_le_comap.mp hq₂)⟩\n  · rintro ⟨q, hq, rfl⟩\n    simp\n\n"}
{"name":"Ideal.coeff_zero_mem_comap_of_root_mem_of_eval_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nS : Type u_2\ninst✝ : CommRing S\nf : RingHom R S\nI : Ideal S\nr : S\nhr : Membership.mem I r\np : Polynomial R\nhp : Membership.mem I (Polynomial.eval₂ f r p)\n⊢ Membership.mem (Ideal.comap f I) (p.coeff 0)","decl":"theorem coeff_zero_mem_comap_of_root_mem_of_eval_mem {r : S} (hr : r ∈ I) {p : R[X]}\n    (hp : p.eval₂ f r ∈ I) : p.coeff 0 ∈ I.comap f := by\n  rw [← p.divX_mul_X_add, eval₂_add, eval₂_C, eval₂_mul, eval₂_X] at hp\n  refine mem_comap.mpr ((I.add_mem_iff_right ?_).mp hp)\n  exact I.mul_mem_left _ hr\n\n"}
{"name":"Ideal.coeff_zero_mem_comap_of_root_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nS : Type u_2\ninst✝ : CommRing S\nf : RingHom R S\nI : Ideal S\nr : S\nhr : Membership.mem I r\np : Polynomial R\nhp : Eq (Polynomial.eval₂ f r p) 0\n⊢ Membership.mem (Ideal.comap f I) (p.coeff 0)","decl":"theorem coeff_zero_mem_comap_of_root_mem {r : S} (hr : r ∈ I) {p : R[X]} (hp : p.eval₂ f r = 0) :\n    p.coeff 0 ∈ I.comap f :=\n  coeff_zero_mem_comap_of_root_mem_of_eval_mem hr (hp.symm ▸ I.zero_mem)\n\n"}
{"name":"Ideal.exists_coeff_ne_zero_mem_comap_of_non_zero_divisor_root_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝¹ : CommRing R\nS : Type u_2\ninst✝ : CommRing S\nf : RingHom R S\nI : Ideal S\nr : S\nr_non_zero_divisor : ∀ {x : S}, Eq (HMul.hMul x r) 0 → Eq x 0\nhr : Membership.mem I r\np : Polynomial R\na✝¹ : Ne p 0\na✝ : Eq (Polynomial.eval₂ f r p) 0\n⊢ Exists fun i => And (Ne (p.coeff i) 0) (Membership.mem (Ideal.comap f I) (p.coeff i))","decl":"theorem exists_coeff_ne_zero_mem_comap_of_non_zero_divisor_root_mem {r : S}\n    (r_non_zero_divisor : ∀ {x}, x * r = 0 → x = 0) (hr : r ∈ I) {p : R[X]} :\n    p ≠ 0 → p.eval₂ f r = 0 → ∃ i, p.coeff i ≠ 0 ∧ p.coeff i ∈ I.comap f := by\n  refine p.recOnHorner ?_ ?_ ?_\n  · intro h\n    contradiction\n  · intro p a coeff_eq_zero a_ne_zero _ _ hp\n    refine ⟨0, ?_, coeff_zero_mem_comap_of_root_mem hr hp⟩\n    simp [coeff_eq_zero, a_ne_zero]\n  · intro p p_nonzero ih _ hp\n    rw [eval₂_mul, eval₂_X] at hp\n    obtain ⟨i, hi, mem⟩ := ih p_nonzero (r_non_zero_divisor hp)\n    refine ⟨i + 1, ?_, ?_⟩\n    · simp [hi, mem]\n    · simpa [hi] using mem\n\n"}
{"name":"Ideal.injective_quotient_le_comap_map","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nP : Ideal (Polynomial R)\n⊢ Function.Injective ⇑(Ideal.quotientMap (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P) (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) ⋯)","decl":"/-- Let `P` be an ideal in `R[x]`.  The map\n`R[x]/P → (R / (P ∩ R))[x] / (P / (P ∩ R))`\nis injective.\n-/\ntheorem injective_quotient_le_comap_map (P : Ideal R[X]) :\n    Function.Injective <|\n      Ideal.quotientMap\n        (Ideal.map (Polynomial.mapRingHom (Quotient.mk (P.comap (C : R →+* R[X])))) P)\n        (Polynomial.mapRingHom (Ideal.Quotient.mk (P.comap (C : R →+* R[X]))))\n        le_comap_map := by\n  refine quotientMap_injective' (le_of_eq ?_)\n  rw [comap_map_of_surjective (mapRingHom (Ideal.Quotient.mk (P.comap (C : R →+* R[X]))))\n      (map_surjective (Ideal.Quotient.mk (P.comap (C : R →+* R[X]))) Ideal.Quotient.mk_surjective)]\n  refine le_antisymm (sup_le le_rfl ?_) (le_sup_of_le_left le_rfl)\n  refine fun p hp =>\n    polynomial_mem_ideal_of_coeff_mem_ideal P p fun n => Ideal.Quotient.eq_zero_iff_mem.mp ?_\n  simpa only [coeff_map, coe_mapRingHom] using ext_iff.mp (Ideal.mem_bot.mp (mem_comap.mp hp)) n\n\n"}
{"name":"Ideal.quotient_mk_maps_eq","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nP : Ideal (Polynomial R)\n⊢ Eq (((Ideal.Quotient.mk (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P)).comp Polynomial.C).comp (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) ((Ideal.quotientMap (Ideal.map (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) P) (Polynomial.mapRingHom (Ideal.Quotient.mk (Ideal.comap Polynomial.C P))) ⋯).comp ((Ideal.Quotient.mk P).comp Polynomial.C))","decl":"/-- The identity in this lemma asserts that the \"obvious\" square\n```\n    R    → (R / (P ∩ R))\n    ↓          ↓\nR[x] / P → (R / (P ∩ R))[x] / (P / (P ∩ R))\n```\ncommutes.  It is used, for instance, in the proof of `quotient_mk_comp_C_is_integral_of_jacobson`,\nin the file `Mathlib.RingTheory.Jacobson.Polynomial`.\n-/\ntheorem quotient_mk_maps_eq (P : Ideal R[X]) :\n    ((Quotient.mk (map (mapRingHom (Quotient.mk (P.comap (C : R →+* R[X])))) P)).comp C).comp\n        (Quotient.mk (P.comap (C : R →+* R[X]))) =\n      (Ideal.quotientMap (map (mapRingHom (Quotient.mk (P.comap (C : R →+* R[X])))) P)\n            (mapRingHom (Quotient.mk (P.comap (C : R →+* R[X])))) le_comap_map).comp\n        ((Quotient.mk P).comp C) := by\n  refine RingHom.ext fun x => ?_\n  repeat' rw [RingHom.coe_comp, Function.comp_apply]\n  rw [quotientMap_mk, coe_mapRingHom, map_C]\n\n"}
{"name":"Ideal.exists_nonzero_mem_of_ne_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝ : CommRing R\nP : Ideal (Polynomial R)\nPb : Ne P Bot.bot\nhP : ∀ (x : R), Membership.mem P (Polynomial.C x) → Eq x 0\n⊢ Exists fun p => And (Membership.mem P p) (Ne (Polynomial.map (Ideal.Quotient.mk (Ideal.comap Polynomial.C P)) p) 0)","decl":"/-- This technical lemma asserts the existence of a polynomial `p` in an ideal `P ⊂ R[x]`\nthat is non-zero in the quotient `R / (P ∩ R) [x]`.  The assumptions are equivalent to\n`P ≠ 0` and `P ∩ R = (0)`.\n-/\ntheorem exists_nonzero_mem_of_ne_bot {P : Ideal R[X]} (Pb : P ≠ ⊥) (hP : ∀ x : R, C x ∈ P → x = 0) :\n    ∃ p : R[X], p ∈ P ∧ Polynomial.map (Quotient.mk (P.comap (C : R →+* R[X]))) p ≠ 0 := by\n  obtain ⟨m, hm⟩ := Submodule.nonzero_mem_of_bot_lt (bot_lt_iff_ne_bot.mpr Pb)\n  refine ⟨m, Submodule.coe_mem m, fun pp0 => hm (Submodule.coe_eq_zero.mp ?_)⟩\n  refine\n    (injective_iff_map_eq_zero (Polynomial.mapRingHom (Ideal.Quotient.mk\n      (P.comap (C : R →+* R[X]))))).mp\n      ?_ _ pp0\n  refine map_injective _ ((Ideal.Quotient.mk (P.comap C)).injective_iff_ker_eq_bot.mpr ?_)\n  rw [mk_ker]\n  exact (Submodule.eq_bot_iff _).mpr fun x hx => hP x (mem_comap.mp hx)\n\n"}
{"name":"Ideal.comap_eq_of_scalar_tower_quotient","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nS : Type u_2\ninst✝³ : CommRing S\np : Ideal R\nP : Ideal S\ninst✝² : Algebra R S\ninst✝¹ : Algebra (HasQuotient.Quotient R p) (HasQuotient.Quotient S P)\ninst✝ : IsScalarTower R (HasQuotient.Quotient R p) (HasQuotient.Quotient S P)\nh : Function.Injective ⇑(algebraMap (HasQuotient.Quotient R p) (HasQuotient.Quotient S P))\n⊢ Eq (Ideal.comap (algebraMap R S) P) p","decl":"/-- If there is an injective map `R/p → S/P` such that following diagram commutes:\n```\nR   → S\n↓     ↓\nR/p → S/P\n```\nthen `P` lies over `p`.\n-/\ntheorem comap_eq_of_scalar_tower_quotient [Algebra R S] [Algebra (R ⧸ p) (S ⧸ P)]\n    [IsScalarTower R (R ⧸ p) (S ⧸ P)] (h : Function.Injective (algebraMap (R ⧸ p) (S ⧸ P))) :\n    comap (algebraMap R S) P = p := by\n  ext x\n  rw [mem_comap, ← Quotient.eq_zero_iff_mem, ← Quotient.eq_zero_iff_mem, Quotient.mk_algebraMap,\n    IsScalarTower.algebraMap_apply R (R ⧸ p) (S ⧸ P), Quotient.algebraMap_eq]\n  constructor\n  · intro hx\n    exact (injective_iff_map_eq_zero (algebraMap (R ⧸ p) (S ⧸ P))).mp h _ hx\n  · intro hx\n    rw [hx, RingHom.map_zero]\n\n"}
{"name":"Ideal.Quotient.algebraMap_quotient_map_quotient","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\np : Ideal R\ninst✝ : Algebra R S\nx : R\n⊢ Eq ((algebraMap (HasQuotient.Quotient R p) (HasQuotient.Quotient S (Ideal.map (algebraMap R S) p))) ((Ideal.Quotient.mk p) x)) ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) p)) ((algebraMap R S) x))","decl":"@[simp]\ntheorem Quotient.algebraMap_quotient_map_quotient (x : R) :\n    letI f := algebraMap R S\n    algebraMap (R ⧸ p) (S ⧸ map f p) (Ideal.Quotient.mk p x) =\n    Ideal.Quotient.mk (map f p) (f x) :=\n  rfl\n\n"}
{"name":"Ideal.Quotient.mk_smul_mk_quotient_map_quotient","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\np : Ideal R\ninst✝ : Algebra R S\nx : R\ny : S\n⊢ Eq (HSMul.hSMul ((Ideal.Quotient.mk p) x) ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) p)) y)) ((Ideal.Quotient.mk (Ideal.map (algebraMap R S) p)) (HMul.hMul ((algebraMap R S) x) y))","decl":"@[simp]\ntheorem Quotient.mk_smul_mk_quotient_map_quotient (x : R) (y : S) :\n    letI f := algebraMap R S\n    Quotient.mk p x • Quotient.mk (map f p) y = Quotient.mk (map f p) (f x * y) :=\n  Algebra.smul_def _ _\n\n"}
{"name":"Ideal.Quotient.tower_quotient_map_quotient","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\np : Ideal R\ninst✝ : Algebra R S\n⊢ IsScalarTower R (HasQuotient.Quotient R p) (HasQuotient.Quotient S (Ideal.map (algebraMap R S) p))","decl":"instance Quotient.tower_quotient_map_quotient [Algebra R S] :\n    IsScalarTower R (R ⧸ p) (S ⧸ map (algebraMap R S) p) :=\n  IsScalarTower.of_algebraMap_eq fun x => by\n    rw [Quotient.algebraMap_eq, Quotient.algebraMap_quotient_map_quotient,\n      Quotient.mk_algebraMap]\n\n"}
{"name":"Ideal.QuotientMapQuotient.isNoetherian","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\ninst✝ : IsNoetherian R S\nI : Ideal R\n⊢ IsNoetherian (HasQuotient.Quotient R I) (HasQuotient.Quotient S (Ideal.map (algebraMap R S) I))","decl":"instance QuotientMapQuotient.isNoetherian [Algebra R S] [IsNoetherian R S] (I : Ideal R) :\n    IsNoetherian (R ⧸ I) (S ⧸ I.map (algebraMap R S)) :=\n  isNoetherian_of_tower R <|\n    isNoetherian_of_surjective S (Ideal.Quotient.mkₐ R _).toLinearMap <|\n      LinearMap.range_eq_top.mpr Ideal.Quotient.mk_surjective\n\n"}
{"name":"Ideal.exists_coeff_ne_zero_mem_comap_of_root_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nf : RingHom R S\nI : Ideal S\ninst✝ : IsDomain S\nr : S\nr_ne_zero : Ne r 0\nhr : Membership.mem I r\np : Polynomial R\na✝¹ : Ne p 0\na✝ : Eq (Polynomial.eval₂ f r p) 0\n⊢ Exists fun i => And (Ne (p.coeff i) 0) (Membership.mem (Ideal.comap f I) (p.coeff i))","decl":"theorem exists_coeff_ne_zero_mem_comap_of_root_mem [IsDomain S] {r : S} (r_ne_zero : r ≠ 0)\n    (hr : r ∈ I) {p : R[X]} :\n    p ≠ 0 → p.eval₂ f r = 0 → ∃ i, p.coeff i ≠ 0 ∧ p.coeff i ∈ I.comap f :=\n  exists_coeff_ne_zero_mem_comap_of_non_zero_divisor_root_mem\n    (fun {_} h => Or.resolve_right (mul_eq_zero.mp h) r_ne_zero) hr\n\n"}
{"name":"Ideal.exists_coeff_mem_comap_sdiff_comap_of_root_mem_sdiff","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nf : RingHom R S\nI J : Ideal S\ninst✝ : I.IsPrime\nhIJ : LE.le I J\nr : S\nhr : Membership.mem (SDiff.sdiff ↑J ↑I) r\np : Polynomial R\np_ne_zero : Ne (Polynomial.map (Ideal.Quotient.mk (Ideal.comap f I)) p) 0\nhpI : Membership.mem I (Polynomial.eval₂ f r p)\n⊢ Exists fun i => Membership.mem (SDiff.sdiff ↑(Ideal.comap f J) ↑(Ideal.comap f I)) (p.coeff i)","decl":"theorem exists_coeff_mem_comap_sdiff_comap_of_root_mem_sdiff [IsPrime I] (hIJ : I ≤ J) {r : S}\n    (hr : r ∈ (J : Set S) \\ I) {p : R[X]} (p_ne_zero : p.map (Quotient.mk (I.comap f)) ≠ 0)\n    (hpI : p.eval₂ f r ∈ I) : ∃ i, p.coeff i ∈ (J.comap f : Set R) \\ I.comap f := by\n  obtain ⟨hrJ, hrI⟩ := hr\n  have rbar_ne_zero : Ideal.Quotient.mk I r ≠ 0 := mt (Quotient.mk_eq_zero I).mp hrI\n  have rbar_mem_J : Ideal.Quotient.mk I r ∈ J.map (Ideal.Quotient.mk I) := mem_map_of_mem _ hrJ\n  have quotient_f : ∀ x ∈ I.comap f, (Ideal.Quotient.mk I).comp f x = 0 := by\n    simp [Quotient.eq_zero_iff_mem]\n  have rbar_root :\n    (p.map (Ideal.Quotient.mk (I.comap f))).eval₂ (Quotient.lift (I.comap f) _ quotient_f)\n        (Ideal.Quotient.mk I r) =\n      0 := by\n    convert Quotient.eq_zero_iff_mem.mpr hpI\n    exact _root_.trans (eval₂_map _ _ _) (hom_eval₂ p f (Ideal.Quotient.mk I) r).symm\n  obtain ⟨i, ne_zero, mem⟩ :=\n    exists_coeff_ne_zero_mem_comap_of_root_mem rbar_ne_zero rbar_mem_J p_ne_zero rbar_root\n  rw [coeff_map] at ne_zero mem\n  refine ⟨i, (mem_quotient_iff_mem hIJ).mp ?_, mt ?_ ne_zero⟩\n  · simpa using mem\n  simp [Quotient.eq_zero_iff_mem]\n\n"}
{"name":"Ideal.comap_lt_comap_of_root_mem_sdiff","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nf : RingHom R S\nI J : Ideal S\ninst✝ : I.IsPrime\nhIJ : LE.le I J\nr : S\nhr : Membership.mem (SDiff.sdiff ↑J ↑I) r\np : Polynomial R\np_ne_zero : Ne (Polynomial.map (Ideal.Quotient.mk (Ideal.comap f I)) p) 0\nhp : Membership.mem I (Polynomial.eval₂ f r p)\n⊢ LT.lt (Ideal.comap f I) (Ideal.comap f J)","decl":"theorem comap_lt_comap_of_root_mem_sdiff [I.IsPrime] (hIJ : I ≤ J) {r : S}\n    (hr : r ∈ (J : Set S) \\ I) {p : R[X]} (p_ne_zero : p.map (Quotient.mk (I.comap f)) ≠ 0)\n    (hp : p.eval₂ f r ∈ I) : I.comap f < J.comap f :=\n  let ⟨i, hJ, hI⟩ := exists_coeff_mem_comap_sdiff_comap_of_root_mem_sdiff hIJ hr p_ne_zero hp\n  SetLike.lt_iff_le_and_exists.mpr ⟨comap_mono hIJ, p.coeff i, hJ, hI⟩\n\n"}
{"name":"Ideal.mem_of_one_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"S : Type u_2\ninst✝ : CommRing S\nI : Ideal S\nh : Membership.mem I 1\nx : S\n⊢ Membership.mem I x","decl":"theorem mem_of_one_mem (h : (1 : S) ∈ I) (x) : x ∈ I :=\n  (I.eq_top_iff_one.mpr h).symm ▸ mem_top\n\n"}
{"name":"Ideal.comap_lt_comap_of_integral_mem_sdiff","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nI J : Ideal S\ninst✝ : Algebra R S\nhI : I.IsPrime\nhIJ : LE.le I J\nx : S\nmem : Membership.mem (SDiff.sdiff ↑J ↑I) x\nintegral : IsIntegral R x\n⊢ LT.lt (Ideal.comap (algebraMap R S) I) (Ideal.comap (algebraMap R S) J)","decl":"theorem comap_lt_comap_of_integral_mem_sdiff [Algebra R S] [hI : I.IsPrime] (hIJ : I ≤ J) {x : S}\n    (mem : x ∈ (J : Set S) \\ I) (integral : IsIntegral R x) :\n    I.comap (algebraMap R S) < J.comap (algebraMap R S) := by\n  obtain ⟨p, p_monic, hpx⟩ := integral\n  refine comap_lt_comap_of_root_mem_sdiff hIJ mem (map_monic_ne_zero p_monic) ?_\n  convert I.zero_mem\n\n"}
{"name":"Ideal.comap_ne_bot_of_root_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nf : RingHom R S\nI : Ideal S\ninst✝ : IsDomain S\nr : S\nr_ne_zero : Ne r 0\nhr : Membership.mem I r\np : Polynomial R\np_ne_zero : Ne p 0\nhp : Eq (Polynomial.eval₂ f r p) 0\n⊢ Ne (Ideal.comap f I) Bot.bot","decl":"theorem comap_ne_bot_of_root_mem [IsDomain S] {r : S} (r_ne_zero : r ≠ 0) (hr : r ∈ I) {p : R[X]}\n    (p_ne_zero : p ≠ 0) (hp : p.eval₂ f r = 0) : I.comap f ≠ ⊥ := fun h =>\n  let ⟨_, hi, mem⟩ := exists_coeff_ne_zero_mem_comap_of_root_mem r_ne_zero hr p_ne_zero hp\n  absurd (mem_bot.mp (eq_bot_iff.mp h mem)) hi\n\n"}
{"name":"Ideal.isMaximal_of_isIntegral_of_isMaximal_comap","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nS : Type u_2\ninst✝³ : CommRing S\ninst✝² : Algebra R S\ninst✝¹ : Algebra.IsIntegral R S\nI : Ideal S\ninst✝ : I.IsPrime\nhI : (Ideal.comap (algebraMap R S) I).IsMaximal\n⊢ I.IsMaximal","decl":"theorem isMaximal_of_isIntegral_of_isMaximal_comap [Algebra R S] [Algebra.IsIntegral R S]\n    (I : Ideal S) [I.IsPrime] (hI : IsMaximal (I.comap (algebraMap R S))) : IsMaximal I :=\n  ⟨⟨mt comap_eq_top_iff.mpr hI.1.1, fun _ I_lt_J =>\n      let ⟨I_le_J, x, hxJ, hxI⟩ := SetLike.lt_iff_le_and_exists.mp I_lt_J\n      comap_eq_top_iff.1 <|\n        hI.1.2 _ (comap_lt_comap_of_integral_mem_sdiff I_le_J ⟨hxJ, hxI⟩\n          (Algebra.IsIntegral.isIntegral x))⟩⟩\n\n"}
{"name":"Ideal.isMaximal_of_isIntegral_of_isMaximal_comap'","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝² : CommRing R\nS : Type u_2\ninst✝¹ : CommRing S\nf : RingHom R S\nhf : f.IsIntegral\nI : Ideal S\ninst✝ : I.IsPrime\nhI : (Ideal.comap f I).IsMaximal\n⊢ I.IsMaximal","decl":"theorem isMaximal_of_isIntegral_of_isMaximal_comap' (f : R →+* S) (hf : f.IsIntegral) (I : Ideal S)\n    [I.IsPrime] (hI : IsMaximal (I.comap f)) : IsMaximal I :=\n  let _ : Algebra R S := f.toAlgebra\n  have : Algebra.IsIntegral R S := ⟨hf⟩\n  isMaximal_of_isIntegral_of_isMaximal_comap (R := R) (S := S) I hI\n\n"}
{"name":"Ideal.comap_ne_bot_of_algebraic_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\nI : Ideal S\ninst✝¹ : Algebra R S\ninst✝ : IsDomain S\nx : S\nx_ne_zero : Ne x 0\nx_mem : Membership.mem I x\nhx : IsAlgebraic R x\n⊢ Ne (Ideal.comap (algebraMap R S) I) Bot.bot","decl":"theorem comap_ne_bot_of_algebraic_mem [IsDomain S] {x : S} (x_ne_zero : x ≠ 0) (x_mem : x ∈ I)\n    (hx : IsAlgebraic R x) : I.comap (algebraMap R S) ≠ ⊥ :=\n  let ⟨_, p_ne_zero, hp⟩ := hx\n  comap_ne_bot_of_root_mem x_ne_zero x_mem p_ne_zero hp\n\n"}
{"name":"Ideal.comap_ne_bot_of_integral_mem","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nS : Type u_2\ninst✝³ : CommRing S\nI : Ideal S\ninst✝² : Algebra R S\ninst✝¹ : Nontrivial R\ninst✝ : IsDomain S\nx : S\nx_ne_zero : Ne x 0\nx_mem : Membership.mem I x\nhx : IsIntegral R x\n⊢ Ne (Ideal.comap (algebraMap R S) I) Bot.bot","decl":"theorem comap_ne_bot_of_integral_mem [Nontrivial R] [IsDomain S] {x : S} (x_ne_zero : x ≠ 0)\n    (x_mem : x ∈ I) (hx : IsIntegral R x) : I.comap (algebraMap R S) ≠ ⊥ :=\n  comap_ne_bot_of_algebraic_mem x_ne_zero x_mem hx.isAlgebraic\n\n"}
{"name":"Ideal.eq_bot_of_comap_eq_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nS : Type u_2\ninst✝⁴ : CommRing S\nI : Ideal S\ninst✝³ : Algebra R S\ninst✝² : Nontrivial R\ninst✝¹ : IsDomain S\ninst✝ : Algebra.IsIntegral R S\nhI : Eq (Ideal.comap (algebraMap R S) I) Bot.bot\n⊢ Eq I Bot.bot","decl":"theorem eq_bot_of_comap_eq_bot [Nontrivial R] [IsDomain S] [Algebra.IsIntegral R S]\n    (hI : I.comap (algebraMap R S) = ⊥) : I = ⊥ := by\n  refine eq_bot_iff.2 fun x hx => ?_\n  by_cases hx0 : x = 0\n  · exact hx0.symm ▸ Ideal.zero_mem ⊥\n  · exact absurd hI (comap_ne_bot_of_integral_mem hx0 hx (Algebra.IsIntegral.isIntegral x))\n\n"}
{"name":"Ideal.isMaximal_comap_of_isIntegral_of_isMaximal","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\ninst✝ : Algebra.IsIntegral R S\nI : Ideal S\nhI : I.IsMaximal\n⊢ (Ideal.comap (algebraMap R S) I).IsMaximal","decl":"theorem isMaximal_comap_of_isIntegral_of_isMaximal [Algebra.IsIntegral R S] (I : Ideal S)\n    [hI : I.IsMaximal] : IsMaximal (I.comap (algebraMap R S)) := by\n  refine Ideal.Quotient.maximal_of_isField _ ?_\n  haveI : IsPrime (I.comap (algebraMap R S)) := comap_isPrime _ _\n  exact isField_of_isIntegral_of_isField\n    algebraMap_quotient_injective (by rwa [← Quotient.maximal_ideal_iff_isField_quotient])\n\n"}
{"name":"Ideal.isMaximal_comap_of_isIntegral_of_isMaximal'","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝² : CommRing R\ninst✝¹ : CommRing S\nf : RingHom R S\nhf : f.IsIntegral\nI : Ideal S\ninst✝ : I.IsMaximal\n⊢ (Ideal.comap f I).IsMaximal","decl":"theorem isMaximal_comap_of_isIntegral_of_isMaximal' {R S : Type*} [CommRing R] [CommRing S]\n    (f : R →+* S) (hf : f.IsIntegral) (I : Ideal S) [I.IsMaximal] : IsMaximal (I.comap f) :=\n  let _ : Algebra R S := f.toAlgebra\n  have : Algebra.IsIntegral R S := ⟨hf⟩\n  isMaximal_comap_of_isIntegral_of_isMaximal (R := R) (S := S) I\n\n"}
{"name":"Ideal.IsIntegralClosure.comap_lt_comap","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁸ : CommRing R\nS : Type u_2\ninst✝⁷ : CommRing S\ninst✝⁶ : Algebra R S\nA : Type u_3\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra A S\ninst✝² : IsScalarTower R A S\ninst✝¹ : IsIntegralClosure A R S\nI J : Ideal A\ninst✝ : I.IsPrime\nI_lt_J : LT.lt I J\n⊢ LT.lt (Ideal.comap (algebraMap R A) I) (Ideal.comap (algebraMap R A) J)","decl":"theorem IsIntegralClosure.comap_lt_comap {I J : Ideal A} [I.IsPrime] (I_lt_J : I < J) :\n    I.comap (algebraMap R A) < J.comap (algebraMap R A) :=\n  let ⟨I_le_J, x, hxJ, hxI⟩ := SetLike.lt_iff_le_and_exists.mp I_lt_J\n  comap_lt_comap_of_integral_mem_sdiff I_le_J ⟨hxJ, hxI⟩ (IsIntegralClosure.isIntegral R S x)\n\n"}
{"name":"Ideal.IsIntegralClosure.isMaximal_of_isMaximal_comap","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁸ : CommRing R\nS : Type u_2\ninst✝⁷ : CommRing S\ninst✝⁶ : Algebra R S\nA : Type u_3\ninst✝⁵ : CommRing A\ninst✝⁴ : Algebra R A\ninst✝³ : Algebra A S\ninst✝² : IsScalarTower R A S\ninst✝¹ : IsIntegralClosure A R S\nI : Ideal A\ninst✝ : I.IsPrime\nhI : (Ideal.comap (algebraMap R A) I).IsMaximal\n⊢ I.IsMaximal","decl":"theorem IsIntegralClosure.isMaximal_of_isMaximal_comap (I : Ideal A) [I.IsPrime]\n    (hI : IsMaximal (I.comap (algebraMap R A))) : IsMaximal I :=\n  have : Algebra.IsIntegral R A := IsIntegralClosure.isIntegral_algebra R S\n  isMaximal_of_isIntegral_of_isMaximal_comap I hI\n\n"}
{"name":"Ideal.IsIntegralClosure.comap_ne_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁹ : CommRing R\nS : Type u_2\ninst✝⁸ : CommRing S\ninst✝⁷ : Algebra R S\nA : Type u_3\ninst✝⁶ : CommRing A\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra A S\ninst✝³ : IsScalarTower R A S\ninst✝² : IsIntegralClosure A R S\ninst✝¹ : IsDomain A\ninst✝ : Nontrivial R\nI : Ideal A\nI_ne_bot : Ne I Bot.bot\n⊢ Ne (Ideal.comap (algebraMap R A) I) Bot.bot","decl":"theorem IsIntegralClosure.comap_ne_bot [Nontrivial R] {I : Ideal A} (I_ne_bot : I ≠ ⊥) :\n    I.comap (algebraMap R A) ≠ ⊥ :=\n  let ⟨x, x_mem, x_ne_zero⟩ := I.ne_bot_iff.mp I_ne_bot\n  comap_ne_bot_of_integral_mem x_ne_zero x_mem (IsIntegralClosure.isIntegral R S x)\n\n"}
{"name":"Ideal.IsIntegralClosure.eq_bot_of_comap_eq_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁹ : CommRing R\nS : Type u_2\ninst✝⁸ : CommRing S\ninst✝⁷ : Algebra R S\nA : Type u_3\ninst✝⁶ : CommRing A\ninst✝⁵ : Algebra R A\ninst✝⁴ : Algebra A S\ninst✝³ : IsScalarTower R A S\ninst✝² : IsIntegralClosure A R S\ninst✝¹ : IsDomain A\ninst✝ : Nontrivial R\nI : Ideal A\na✝ : Eq (Ideal.comap (algebraMap R A) I) Bot.bot\n⊢ Eq I Bot.bot","decl":"theorem IsIntegralClosure.eq_bot_of_comap_eq_bot [Nontrivial R] {I : Ideal A} :\n    I.comap (algebraMap R A) = ⊥ → I = ⊥ := by\n  -- Porting note: `imp_of_not_imp_not` seems not existing\n  contrapose; exact (IsIntegralClosure.comap_ne_bot S)\n\n"}
{"name":"Ideal.IntegralClosure.comap_lt_comap","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\nI J : Ideal (Subtype fun x => Membership.mem (integralClosure R S) x)\ninst✝ : I.IsPrime\nI_lt_J : LT.lt I J\n⊢ LT.lt (Ideal.comap (algebraMap R (Subtype fun x => Membership.mem (integralClosure R S) x)) I) (Ideal.comap (algebraMap R (Subtype fun x => Membership.mem (integralClosure R S) x)) J)","decl":"theorem IntegralClosure.comap_lt_comap {I J : Ideal (integralClosure R S)} [I.IsPrime]\n    (I_lt_J : I < J) :\n    I.comap (algebraMap R (integralClosure R S)) < J.comap (algebraMap R (integralClosure R S)) :=\n  IsIntegralClosure.comap_lt_comap S I_lt_J\n\n"}
{"name":"Ideal.IntegralClosure.isMaximal_of_isMaximal_comap","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\nI : Ideal (Subtype fun x => Membership.mem (integralClosure R S) x)\ninst✝ : I.IsPrime\nhI : (Ideal.comap (algebraMap R (Subtype fun x => Membership.mem (integralClosure R S) x)) I).IsMaximal\n⊢ I.IsMaximal","decl":"theorem IntegralClosure.isMaximal_of_isMaximal_comap (I : Ideal (integralClosure R S)) [I.IsPrime]\n    (hI : IsMaximal (I.comap (algebraMap R (integralClosure R S)))) : IsMaximal I :=\n  IsIntegralClosure.isMaximal_of_isMaximal_comap S I hI\n\n"}
{"name":"Ideal.IntegralClosure.comap_ne_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nS : Type u_2\ninst✝³ : CommRing S\ninst✝² : Algebra R S\ninst✝¹ : IsDomain S\ninst✝ : Nontrivial R\nI : Ideal (Subtype fun x => Membership.mem (integralClosure R S) x)\nI_ne_bot : Ne I Bot.bot\n⊢ Ne (Ideal.comap (algebraMap R (Subtype fun x => Membership.mem (integralClosure R S) x)) I) Bot.bot","decl":"theorem IntegralClosure.comap_ne_bot [Nontrivial R] {I : Ideal (integralClosure R S)}\n    (I_ne_bot : I ≠ ⊥) : I.comap (algebraMap R (integralClosure R S)) ≠ ⊥ :=\n  IsIntegralClosure.comap_ne_bot S I_ne_bot\n\n"}
{"name":"Ideal.IntegralClosure.eq_bot_of_comap_eq_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nS : Type u_2\ninst✝³ : CommRing S\ninst✝² : Algebra R S\ninst✝¹ : IsDomain S\ninst✝ : Nontrivial R\nI : Ideal (Subtype fun x => Membership.mem (integralClosure R S) x)\na✝ : Eq (Ideal.comap (algebraMap R (Subtype fun x => Membership.mem (integralClosure R S) x)) I) Bot.bot\n⊢ Eq I Bot.bot","decl":"theorem IntegralClosure.eq_bot_of_comap_eq_bot [Nontrivial R] {I : Ideal (integralClosure R S)} :\n    I.comap (algebraMap R (integralClosure R S)) = ⊥ → I = ⊥ :=\n  IsIntegralClosure.eq_bot_of_comap_eq_bot S\n\n"}
{"name":"Ideal.exists_ideal_over_prime_of_isIntegral_of_isDomain","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nS : Type u_2\ninst✝⁴ : CommRing S\ninst✝³ : Algebra R S\ninst✝² : IsDomain S\ninst✝¹ : Algebra.IsIntegral R S\nP : Ideal R\ninst✝ : P.IsPrime\nhP : LE.le (RingHom.ker (algebraMap R S)) P\n⊢ Exists fun Q => And Q.IsPrime (Eq (Ideal.comap (algebraMap R S) Q) P)","decl":"/-- `comap (algebraMap R S)` is a surjection from the prime spec of `R` to prime spec of `S`.\n`hP : (algebraMap R S).ker ≤ P` is a slight generalization of the extension being injective -/\ntheorem exists_ideal_over_prime_of_isIntegral_of_isDomain [Algebra.IsIntegral R S] (P : Ideal R)\n    [IsPrime P] (hP : RingHom.ker (algebraMap R S) ≤ P) :\n    ∃ Q : Ideal S, IsPrime Q ∧ Q.comap (algebraMap R S) = P := by\n  have hP0 : (0 : S) ∉ Algebra.algebraMapSubmonoid S P.primeCompl := by\n    rintro ⟨x, ⟨hx, x0⟩⟩\n    exact absurd (hP x0) hx\n  let Rₚ := Localization P.primeCompl\n  let Sₚ := Localization (Algebra.algebraMapSubmonoid S P.primeCompl)\n  letI : IsDomain (Localization (Algebra.algebraMapSubmonoid S P.primeCompl)) :=\n    IsLocalization.isDomain_localization (le_nonZeroDivisors_of_noZeroDivisors hP0)\n  obtain ⟨Qₚ : Ideal Sₚ, Qₚ_maximal⟩ := exists_maximal Sₚ\n  let _ : Algebra Rₚ Sₚ := localizationAlgebra P.primeCompl S\n  have : Algebra.IsIntegral Rₚ Sₚ := ⟨isIntegral_localization⟩\n  have Qₚ_max : IsMaximal (comap _ Qₚ) :=\n    isMaximal_comap_of_isIntegral_of_isMaximal (R := Rₚ) (S := Sₚ) Qₚ\n  refine ⟨comap (algebraMap S Sₚ) Qₚ, ⟨comap_isPrime _ Qₚ, ?_⟩⟩\n  convert Localization.AtPrime.comap_maximalIdeal (I := P)\n  rw [comap_comap, ← IsLocalRing.eq_maximalIdeal Qₚ_max,\n    ← IsLocalization.map_comp (P := S) (Q := Sₚ) (g := algebraMap R S)\n    (M := P.primeCompl) (T := Algebra.algebraMapSubmonoid S P.primeCompl) (S := Rₚ)\n    (fun p hp => Algebra.mem_algebraMapSubmonoid_of_mem ⟨p, hp⟩) ]\n  rfl\n\n"}
{"name":"Ideal.exists_ideal_over_prime_of_isIntegral_of_isPrime","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁵ : CommRing R\nS : Type u_2\ninst✝⁴ : CommRing S\ninst✝³ : Algebra R S\ninst✝² : Algebra.IsIntegral R S\nP : Ideal R\ninst✝¹ : P.IsPrime\nI : Ideal S\ninst✝ : I.IsPrime\nhIP : LE.le (Ideal.comap (algebraMap R S) I) P\n⊢ Exists fun Q => And (GE.ge Q I) (And Q.IsPrime (Eq (Ideal.comap (algebraMap R S) Q) P))","decl":"/-- More general going-up theorem than `exists_ideal_over_prime_of_isIntegral_of_isDomain`.\nTODO: Version of going-up theorem with arbitrary length chains (by induction on this)?\n  Not sure how best to write an ascending chain in Lean -/\ntheorem exists_ideal_over_prime_of_isIntegral_of_isPrime\n    [Algebra.IsIntegral R S] (P : Ideal R) [IsPrime P]\n    (I : Ideal S) [IsPrime I] (hIP : I.comap (algebraMap R S) ≤ P) :\n    ∃ Q ≥ I, IsPrime Q ∧ Q.comap (algebraMap R S) = P := by\n  obtain ⟨Q' : Ideal (S ⧸ I), ⟨Q'_prime, hQ'⟩⟩ :=\n    @exists_ideal_over_prime_of_isIntegral_of_isDomain (R ⧸ I.comap (algebraMap R S)) _ (S ⧸ I) _\n      Ideal.quotientAlgebra _ _\n      (map (Ideal.Quotient.mk (I.comap (algebraMap R S))) P)\n      (map_isPrime_of_surjective Quotient.mk_surjective (by simp [hIP]))\n      (le_trans (le_of_eq ((RingHom.injective_iff_ker_eq_bot _).1 algebraMap_quotient_injective))\n        bot_le)\n  refine ⟨Q'.comap _, le_trans (le_of_eq mk_ker.symm) (ker_le_comap _), ⟨comap_isPrime _ Q', ?_⟩⟩\n  rw [comap_comap]\n  refine _root_.trans ?_ (_root_.trans (congr_arg (comap (Ideal.Quotient.mk\n    (comap (algebraMap R S) I))) hQ') ?_)\n  · rw [comap_comap]\n    exact congr_arg (comap · Q') (RingHom.ext fun r => rfl)\n  · refine _root_.trans (comap_map_of_surjective _ Quotient.mk_surjective _) (sup_eq_left.2 ?_)\n    simpa [← RingHom.ker_eq_comap_bot] using hIP\n\n"}
{"name":"Ideal.exists_ideal_comap_le_prime","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\nP : Ideal R\ninst✝ : P.IsPrime\nI : Ideal S\nhI : LE.le (Ideal.comap (algebraMap R S) I) P\n⊢ Exists fun Q => And (GE.ge Q I) (And Q.IsPrime (LE.le (Ideal.comap (algebraMap R S) Q) P))","decl":"lemma exists_ideal_comap_le_prime (P : Ideal R) [P.IsPrime]\n    (I : Ideal S) (hI : I.comap (algebraMap R S) ≤ P) :\n    ∃ Q ≥ I, Q.IsPrime ∧ Q.comap (algebraMap R S) ≤ P := by\n  let Sₚ := Localization (Algebra.algebraMapSubmonoid S P.primeCompl)\n  let Iₚ := I.map (algebraMap S Sₚ)\n  have hI' : Disjoint (Algebra.algebraMapSubmonoid S P.primeCompl : Set S) I := by\n    rw [Set.disjoint_iff]\n    rintro _ ⟨⟨x, hx : x ∉ P, rfl⟩, hx'⟩\n    exact (hx (hI hx')).elim\n  have : Iₚ ≠ ⊤ := by\n    rw [Ne, Ideal.eq_top_iff_one, IsLocalization.mem_map_algebraMap_iff\n      (Algebra.algebraMapSubmonoid S P.primeCompl) Sₚ, not_exists]\n    simp only [one_mul, IsLocalization.eq_iff_exists (Algebra.algebraMapSubmonoid S P.primeCompl),\n      not_exists]\n    exact fun x c ↦ hI'.ne_of_mem (mul_mem c.2 x.2.2) (I.mul_mem_left c x.1.2)\n  obtain ⟨M, hM, hM'⟩ := Ideal.exists_le_maximal _ this\n  refine ⟨_, Ideal.map_le_iff_le_comap.mp hM', hM.isPrime.comap _, ?_⟩\n  intro x hx\n  by_contra hx'\n  exact Set.disjoint_left.mp ((IsLocalization.isPrime_iff_isPrime_disjoint\n    (Algebra.algebraMapSubmonoid S P.primeCompl) Sₚ M).mp hM.isPrime).2 ⟨_, hx', rfl⟩ hx\n\n"}
{"name":"Ideal.exists_ideal_over_prime_of_isIntegral","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝⁴ : CommRing R\nS : Type u_2\ninst✝³ : CommRing S\ninst✝² : Algebra R S\ninst✝¹ : Algebra.IsIntegral R S\nP : Ideal R\ninst✝ : P.IsPrime\nI : Ideal S\nhIP : LE.le (Ideal.comap (algebraMap R S) I) P\n⊢ Exists fun Q => And (GE.ge Q I) (And Q.IsPrime (Eq (Ideal.comap (algebraMap R S) Q) P))","decl":"theorem exists_ideal_over_prime_of_isIntegral [Algebra.IsIntegral R S] (P : Ideal R) [IsPrime P]\n    (I : Ideal S) (hIP : I.comap (algebraMap R S) ≤ P) :\n    ∃ Q ≥ I, IsPrime Q ∧ Q.comap (algebraMap R S) = P := by\n  have ⟨P', hP, hP', hP''⟩ := exists_ideal_comap_le_prime P I hIP\n  obtain ⟨Q, hQ, hQ', hQ''⟩ := exists_ideal_over_prime_of_isIntegral_of_isPrime P P' hP''\n  exact ⟨Q, hP.trans hQ, hQ', hQ''⟩\n\n"}
{"name":"Ideal.exists_ideal_over_maximal_of_isIntegral","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_1\ninst✝³ : CommRing R\nS : Type u_2\ninst✝² : CommRing S\ninst✝¹ : Algebra R S\ninst✝ : Algebra.IsIntegral R S\nP : Ideal R\nP_max : P.IsMaximal\nhP : LE.le (RingHom.ker (algebraMap R S)) P\n⊢ Exists fun Q => And Q.IsMaximal (Eq (Ideal.comap (algebraMap R S) Q) P)","decl":"/-- `comap (algebraMap R S)` is a surjection from the max spec of `S` to max spec of `R`.\n`hP : (algebraMap R S).ker ≤ P` is a slight generalization of the extension being injective -/\ntheorem exists_ideal_over_maximal_of_isIntegral [Algebra.IsIntegral R S]\n    (P : Ideal R) [P_max : IsMaximal P] (hP : RingHom.ker (algebraMap R S) ≤ P) :\n    ∃ Q : Ideal S, IsMaximal Q ∧ Q.comap (algebraMap R S) = P := by\n  obtain ⟨Q, -, Q_prime, hQ⟩ := exists_ideal_over_prime_of_isIntegral P ⊥ hP\n  exact ⟨Q, isMaximal_of_isIntegral_of_isMaximal_comap _ (hQ.symm ▸ P_max), hQ⟩\n\n"}
{"name":"Ideal.map_eq_top_iff_of_ker_le","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nf : RingHom R S\nI : Ideal R\nhf₁ : LE.le (RingHom.ker f) I\nhf₂ : f.IsIntegral\n⊢ Iff (Eq (Ideal.map f I) Top.top) (Eq I Top.top)","decl":"lemma map_eq_top_iff_of_ker_le {R S} [CommRing R] [CommRing S]\n    (f : R →+* S) {I : Ideal R} (hf₁ : RingHom.ker f ≤ I) (hf₂ : f.IsIntegral) :\n    I.map f = ⊤ ↔ I = ⊤ := by\n  constructor; swap\n  · rintro rfl; exact Ideal.map_top _\n  contrapose\n  intro h\n  obtain ⟨m, _, hm⟩ := Ideal.exists_le_maximal I h\n  let _ := f.toAlgebra\n  have : Algebra.IsIntegral _ _ := ⟨hf₂⟩\n  obtain ⟨m', _, rfl⟩ := exists_ideal_over_maximal_of_isIntegral m (hf₁.trans hm)\n  rw [← map_le_iff_le_comap] at hm\n  exact (hm.trans_lt (lt_top_iff_ne_top.mpr (IsMaximal.ne_top ‹_›))).ne\n\n"}
{"name":"Ideal.map_eq_top_iff","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_3\nS : Type u_4\ninst✝¹ : CommRing R\ninst✝ : CommRing S\nf : RingHom R S\nI : Ideal R\nhf₁ : Function.Injective ⇑f\nhf₂ : f.IsIntegral\n⊢ Iff (Eq (Ideal.map f I) Top.top) (Eq I Top.top)","decl":"lemma map_eq_top_iff {R S} [CommRing R] [CommRing S]\n    (f : R →+* S) {I : Ideal R} (hf₁ : Function.Injective f) (hf₂ : f.IsIntegral) :\n    I.map f = ⊤ ↔ I = ⊤ :=\n  map_eq_top_iff_of_ker_le f (by simp [f.injective_iff_ker_eq_bot.mp hf₁]) hf₂\n\n"}
{"name":"Ideal.under_def","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\nP : Ideal B\n⊢ Eq (Ideal.under A P) (Ideal.comap (algebraMap A B) P)","decl":"theorem under_def : P.under A = Ideal.comap (algebraMap A B) P := rfl\n\n"}
{"name":"Ideal.IsPrime.under","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\nP : Ideal B\nhP : P.IsPrime\n⊢ (Ideal.under A P).IsPrime","decl":"instance IsPrime.under [hP : P.IsPrime] : (P.under A).IsPrime :=\n  hP.comap (algebraMap A B)\n\n"}
{"name":"Ideal.under_smul","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁵ : CommSemiring A\nB : Type u_3\ninst✝⁴ : Semiring B\ninst✝³ : Algebra A B\nP : Ideal B\nG : Type u_5\ninst✝² : Group G\ninst✝¹ : MulSemiringAction G B\ninst✝ : SMulCommClass G A B\ng : G\n⊢ Eq (Ideal.under A (HSMul.hSMul g P)) (Ideal.under A P)","decl":"@[simp]\nlemma under_smul {G : Type*} [Group G] [MulSemiringAction G B] [SMulCommClass G A B] (g : G) :\n    (g • P : Ideal B).under A = P.under A := by\n  ext a\n  rw [mem_comap, mem_comap, mem_pointwise_smul_iff_inv_smul_mem, smul_algebraMap]\n\n"}
{"name":"Ideal.under_top","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\n⊢ Eq (Ideal.under A Top.top) Top.top","decl":"variable (B) in\ntheorem under_top : under A (⊤ : Ideal B) = ⊤ := comap_top\n\n"}
{"name":"Ideal.LiesOver.over","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\nP : Ideal B\np : Ideal A\nself : P.LiesOver p\n⊢ Eq p (Ideal.under A P)","decl":"/-- `P` lies over `p` if `p` is the preimage of `P` of the `algebraMap`. -/\nclass LiesOver : Prop where\n  over : p = P.under A\n\n"}
{"name":"Ideal.over_under","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\nP : Ideal B\n⊢ P.LiesOver (Ideal.under A P)","decl":"instance over_under : P.LiesOver (P.under A) where over := rfl\n\n"}
{"name":"Ideal.over_def","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝³ : CommSemiring A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\n⊢ Eq p (Ideal.under A P)","decl":"theorem over_def [P.LiesOver p] : p = P.under A := LiesOver.over\n\n"}
{"name":"Ideal.mem_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝³ : CommSemiring A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\nx : A\n⊢ Iff (Membership.mem p x) (Membership.mem P ((algebraMap A B) x))","decl":"theorem mem_of_liesOver [P.LiesOver p] (x : A) : x ∈ p ↔ algebraMap A B x ∈ P := by\n  rw [P.over_def p]\n  rfl\n\n"}
{"name":"Ideal.top_liesOver_top","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\n⊢ Top.top.LiesOver Top.top","decl":"variable (A B) in\ninstance top_liesOver_top : (⊤ : Ideal B).LiesOver (⊤ : Ideal A) where\n  over := (under_top A B).symm\n\n"}
{"name":"Ideal.eq_top_iff_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝³ : CommSemiring A\nB : Type u_3\ninst✝² : Semiring B\ninst✝¹ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\n⊢ Iff (Eq P Top.top) (Eq p Top.top)","decl":"theorem eq_top_iff_of_liesOver [P.LiesOver p] : P = ⊤ ↔ p = ⊤ := by\n  rw [P.over_def p]\n  exact comap_eq_top_iff.symm\n\n"}
{"name":"Ideal.LiesOver.of_eq_comap","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁷ : CommSemiring A\nB : Type u_3\nC : Type u_4\ninst✝⁶ : Semiring B\ninst✝⁵ : Semiring C\ninst✝⁴ : Algebra A B\ninst✝³ : Algebra A C\nP : Ideal B\nQ : Ideal C\np : Ideal A\ninst✝² : Q.LiesOver p\nF : Type u_5\ninst✝¹ : FunLike F B C\ninst✝ : AlgHomClass F A B C\nf : F\nh : Eq P (Ideal.comap f Q)\n⊢ P.LiesOver p","decl":"theorem LiesOver.of_eq_comap [Q.LiesOver p] {F : Type*} [FunLike F B C]\n    [AlgHomClass F A B C] (f : F) (h : P = Q.comap f) : P.LiesOver p where\n  over := by\n    rw [h]\n    exact (over_def Q p).trans <|\n      congrFun (congrFun (congrArg comap ((f : B →ₐ[A] C).comp_algebraMap.symm)) _) Q\n\n"}
{"name":"Ideal.LiesOver.of_eq_map_equiv","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁷ : CommSemiring A\nB : Type u_3\nC : Type u_4\ninst✝⁶ : Semiring B\ninst✝⁵ : Semiring C\ninst✝⁴ : Algebra A B\ninst✝³ : Algebra A C\nP : Ideal B\nQ : Ideal C\np : Ideal A\ninst✝² : P.LiesOver p\nE : Type u_5\ninst✝¹ : EquivLike E B C\ninst✝ : AlgEquivClass E A B C\nσ : E\nh : Eq Q (Ideal.map σ P)\n⊢ Q.LiesOver p","decl":"theorem LiesOver.of_eq_map_equiv [P.LiesOver p] {E : Type*} [EquivLike E B C]\n    [AlgEquivClass E A B C] (σ : E) (h : Q = P.map σ) : Q.LiesOver p := by\n  rw [← show _ = P.map σ from comap_symm (σ : B ≃+* C)] at h\n  exact of_eq_comap p (σ : B ≃ₐ[A] C).symm h\n\n"}
{"name":"Ideal.comap_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁷ : CommSemiring A\nB : Type u_3\nC : Type u_4\ninst✝⁶ : Semiring B\ninst✝⁵ : Semiring C\ninst✝⁴ : Algebra A B\ninst✝³ : Algebra A C\nQ : Ideal C\np : Ideal A\ninst✝² : Q.LiesOver p\nF : Type u_5\ninst✝¹ : FunLike F B C\ninst✝ : AlgHomClass F A B C\nf : F\n⊢ (Ideal.comap f Q).LiesOver p","decl":"instance comap_liesOver [Q.LiesOver p] {F : Type*} [FunLike F B C] [AlgHomClass F A B C]\n    (f : F) : (Q.comap f).LiesOver p :=\n  LiesOver.of_eq_comap p f rfl\n\n"}
{"name":"Ideal.map_equiv_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁷ : CommSemiring A\nB : Type u_3\nC : Type u_4\ninst✝⁶ : Semiring B\ninst✝⁵ : Semiring C\ninst✝⁴ : Algebra A B\ninst✝³ : Algebra A C\nP : Ideal B\np : Ideal A\ninst✝² : P.LiesOver p\nE : Type u_5\ninst✝¹ : EquivLike E B C\ninst✝ : AlgEquivClass E A B C\nσ : E\n⊢ (Ideal.map σ P).LiesOver p","decl":"instance map_equiv_liesOver [P.LiesOver p] {E : Type*} [EquivLike E B C] [AlgEquivClass E A B C]\n    (σ : E) : (P.map σ).LiesOver p :=\n  LiesOver.of_eq_map_equiv p σ rfl\n\n"}
{"name":"Ideal.under_under","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁶ : CommSemiring A\nB : Type u_3\ninst✝⁵ : CommSemiring B\nC : Type u_4\ninst✝⁴ : Semiring C\ninst✝³ : Algebra A B\ninst✝² : Algebra B C\ninst✝¹ : Algebra A C\ninst✝ : IsScalarTower A B C\n𝔓 : Ideal C\n⊢ Eq (Ideal.under A (Ideal.under B 𝔓)) (Ideal.under A 𝔓)","decl":"@[simp]\ntheorem under_under : (𝔓.under B).under A  = 𝔓.under A := by\n  simp_rw [comap_comap, ← IsScalarTower.algebraMap_eq]\n\n"}
{"name":"Ideal.LiesOver.trans","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁸ : CommSemiring A\nB : Type u_3\ninst✝⁷ : CommSemiring B\nC : Type u_4\ninst✝⁶ : Semiring C\ninst✝⁵ : Algebra A B\ninst✝⁴ : Algebra B C\ninst✝³ : Algebra A C\ninst✝² : IsScalarTower A B C\n𝔓 : Ideal C\nP : Ideal B\np : Ideal A\ninst✝¹ : 𝔓.LiesOver P\ninst✝ : P.LiesOver p\n⊢ 𝔓.LiesOver p","decl":"theorem LiesOver.trans [𝔓.LiesOver P] [P.LiesOver p] : 𝔓.LiesOver p where\n  over := by rw [P.over_def p, 𝔓.over_def P, under_under]\n\n"}
{"name":"Ideal.LiesOver.tower_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁶ : CommSemiring A\nB : Type u_3\ninst✝⁵ : CommSemiring B\nC : Type u_4\ninst✝⁴ : Semiring C\ninst✝³ : Algebra A B\ninst✝² : Algebra B C\ninst✝¹ : Algebra A C\ninst✝ : IsScalarTower A B C\n𝔓 : Ideal C\nP : Ideal B\np : Ideal A\nhp : 𝔓.LiesOver p\nhP : 𝔓.LiesOver P\n⊢ P.LiesOver p","decl":"theorem LiesOver.tower_bot [hp : 𝔓.LiesOver p] [hP : 𝔓.LiesOver P] : P.LiesOver p where\n  over := by rw [𝔓.over_def p, 𝔓.over_def P, under_under]\n\n"}
{"name":"Ideal.under_liesOver_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁷ : CommSemiring A\nB : Type u_3\ninst✝⁶ : CommSemiring B\nC : Type u_4\ninst✝⁵ : Semiring C\ninst✝⁴ : Algebra A B\ninst✝³ : Algebra B C\ninst✝² : Algebra A C\ninst✝¹ : IsScalarTower A B C\n𝔓 : Ideal C\np : Ideal A\ninst✝ : 𝔓.LiesOver p\n⊢ (Ideal.under B 𝔓).LiesOver p","decl":"instance under_liesOver_of_liesOver [𝔓.LiesOver p] : (𝔓.under B).LiesOver p :=\n  LiesOver.tower_bot 𝔓 (𝔓.under B) p\n\n"}
{"name":"Ideal.under_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁴ : CommRing A\nB : Type u_3\ninst✝³ : Ring B\ninst✝² : Nontrivial B\ninst✝¹ : Algebra A B\ninst✝ : NoZeroSMulDivisors A B\n⊢ Eq (Ideal.under A Bot.bot) Bot.bot","decl":"@[simp]\ntheorem under_bot : under A (⊥ : Ideal B) = ⊥ :=\n  comap_bot_of_injective (algebraMap A B) (NoZeroSMulDivisors.algebraMap_injective A B)\n\n"}
{"name":"Ideal.bot_liesOver_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁴ : CommRing A\nB : Type u_3\ninst✝³ : Ring B\ninst✝² : Nontrivial B\ninst✝¹ : Algebra A B\ninst✝ : NoZeroSMulDivisors A B\n⊢ Bot.bot.LiesOver Bot.bot","decl":"instance bot_liesOver_bot : (⊥ : Ideal B).LiesOver (⊥ : Ideal A) where\n  over := (under_bot A B).symm\n\n"}
{"name":"Ideal.ne_bot_of_liesOver_of_ne_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁵ : CommRing A\nB : Type u_3\ninst✝⁴ : Ring B\ninst✝³ : Nontrivial B\ninst✝² : Algebra A B\ninst✝¹ : NoZeroSMulDivisors A B\np : Ideal A\nhp : Ne p Bot.bot\nP : Ideal B\ninst✝ : P.LiesOver p\n⊢ Ne P Bot.bot","decl":"variable {A B} in\ntheorem ne_bot_of_liesOver_of_ne_bot (hp : p ≠ ⊥) (P : Ideal B) [P.LiesOver p] : P ≠ ⊥ := by\n  contrapose! hp\n  rw [over_def P p, hp, under_bot]\n\n"}
{"name":"Ideal.Quotient.isScalarTower_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"R : Type u_2\ninst✝⁷ : CommSemiring R\nA : Type u_3\nB : Type u_4\ninst✝⁶ : CommRing A\ninst✝⁵ : CommRing B\ninst✝⁴ : Algebra A B\ninst✝³ : Algebra R A\ninst✝² : Algebra R B\ninst✝¹ : IsScalarTower R A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\n⊢ IsScalarTower R (HasQuotient.Quotient A p) (HasQuotient.Quotient B P)","decl":"instance isScalarTower_of_liesOver : IsScalarTower R (A ⧸ p) (B ⧸ P) :=\n  IsScalarTower.of_algebraMap_eq' <|\n    congrArg (algebraMap B (B ⧸ P)).comp (IsScalarTower.algebraMap_eq R A B)\n\n"}
{"name":"Ideal.Quotient.module_finite_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝⁴ : CommRing A\ninst✝³ : CommRing B\ninst✝² : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝¹ : P.LiesOver p\ninst✝ : Module.Finite A B\n⊢ Module.Finite (HasQuotient.Quotient A p) (HasQuotient.Quotient B P)","decl":"/-- `B ⧸ P` is a finite `A ⧸ p`-module if `B` is a finite `A`-module. -/\ninstance module_finite_of_liesOver [Module.Finite A B] : Module.Finite (A ⧸ p) (B ⧸ P) :=\n  Module.Finite.of_restrictScalars_finite A (A ⧸ p) (B ⧸ P)\n\n"}
{"name":"Ideal.Quotient.algebra_finiteType_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝⁴ : CommRing A\ninst✝³ : CommRing B\ninst✝² : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝¹ : P.LiesOver p\ninst✝ : Algebra.FiniteType A B\n⊢ Algebra.FiniteType (HasQuotient.Quotient A p) (HasQuotient.Quotient B P)","decl":"/-- `B ⧸ P` is a finitely generated `A ⧸ p`-algebra if `B` is a finitely generated `A`-algebra. -/\ninstance algebra_finiteType_of_liesOver [Algebra.FiniteType A B] :\n    Algebra.FiniteType (A ⧸ p) (B ⧸ P) :=\n  Algebra.FiniteType.of_restrictScalars_finiteType A (A ⧸ p) (B ⧸ P)\n\n"}
{"name":"Ideal.Quotient.isNoetherian_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝⁴ : CommRing A\ninst✝³ : CommRing B\ninst✝² : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝¹ : P.LiesOver p\ninst✝ : IsNoetherian A B\n⊢ IsNoetherian (HasQuotient.Quotient A p) (HasQuotient.Quotient B P)","decl":"/-- `B ⧸ P` is a Noetherian `A ⧸ p`-module if `B` is a Noetherian `A`-module. -/\ninstance isNoetherian_of_liesOver [IsNoetherian A B] : IsNoetherian (A ⧸ p) (B ⧸ P) :=\n  isNoetherian_of_tower A inferInstance\n\n"}
{"name":"Ideal.Quotient.algebraMap_injective_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝³ : CommRing A\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\n⊢ Function.Injective ⇑(algebraMap (HasQuotient.Quotient A p) (HasQuotient.Quotient B P))","decl":"theorem algebraMap_injective_of_liesOver : Function.Injective (algebraMap (A ⧸ p) (B ⧸ P)) := by\n  rintro ⟨a⟩ ⟨b⟩ hab\n  apply Quotient.eq.mpr ((mem_of_liesOver P p (a - b)).mpr _)\n  rw [RingHom.map_sub]\n  exact Quotient.eq.mp hab\n\n"}
{"name":"Ideal.Quotient.instNoZeroSMulDivisorsQuotientOfIsPrime","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝⁴ : CommRing A\ninst✝³ : CommRing B\ninst✝² : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝¹ : P.LiesOver p\ninst✝ : P.IsPrime\n⊢ NoZeroSMulDivisors (HasQuotient.Quotient A p) (HasQuotient.Quotient B P)","decl":"instance [P.IsPrime] : NoZeroSMulDivisors (A ⧸ p) (B ⧸ P) :=\n  NoZeroSMulDivisors.of_algebraMap_injective (algebraMap_injective_of_liesOver P p)\n\n"}
{"name":"Ideal.Quotient.nontrivial_of_liesOver_of_ne_top","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝³ : CommRing A\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\nhp : Ne p Top.top\n⊢ Nontrivial (HasQuotient.Quotient B P)","decl":"variable {p} in\ntheorem nontrivial_of_liesOver_of_ne_top (hp : p ≠ ⊤) : Nontrivial (B ⧸ P) :=\n  Quotient.nontrivial ((eq_top_iff_of_liesOver P p).mp.mt hp)\n\n"}
{"name":"Ideal.Quotient.nontrivial_of_liesOver_of_isPrime","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝³ : CommRing A\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\nhp : p.IsPrime\n⊢ Nontrivial (HasQuotient.Quotient B P)","decl":"theorem nontrivial_of_liesOver_of_isPrime [hp : p.IsPrime] : Nontrivial (B ⧸ P) :=\n  nontrivial_of_liesOver_of_ne_top P hp.ne_top\n\n"}
{"name":"Ideal.Quotient.algEquivOfEqMap_apply","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\nC : Type u_5\ninst✝⁸ : CommRing A\ninst✝⁷ : CommRing B\ninst✝⁶ : CommRing C\ninst✝⁵ : Algebra A B\ninst✝⁴ : Algebra A C\nP : Ideal B\nQ : Ideal C\np : Ideal A\ninst✝³ : Q.LiesOver p\ninst✝² : P.LiesOver p\nE : Type u_7\ninst✝¹ : EquivLike E B C\ninst✝ : AlgEquivClass E A B C\nσ : E\nh : Eq Q (Ideal.map σ P)\nx : B\n⊢ Eq ((Ideal.Quotient.algEquivOfEqMap p σ h) ((Ideal.Quotient.mk P) x)) ((Ideal.Quotient.mk Q) (σ x))","decl":"@[simp]\ntheorem algEquivOfEqMap_apply (h : Q = P.map σ) (x : B) : algEquivOfEqMap p σ h x = σ x :=\n  rfl\n\n"}
{"name":"Ideal.Quotient.algEquivOfEqComap_apply","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\nC : Type u_5\ninst✝⁸ : CommRing A\ninst✝⁷ : CommRing B\ninst✝⁶ : CommRing C\ninst✝⁵ : Algebra A B\ninst✝⁴ : Algebra A C\nP : Ideal B\nQ : Ideal C\np : Ideal A\ninst✝³ : Q.LiesOver p\ninst✝² : P.LiesOver p\nE : Type u_7\ninst✝¹ : EquivLike E B C\ninst✝ : AlgEquivClass E A B C\nσ : E\nh : Eq P (Ideal.comap σ Q)\nx : B\n⊢ Eq ((Ideal.Quotient.algEquivOfEqComap p σ h) ((Ideal.Quotient.mk P) x)) ((Ideal.Quotient.mk Q) (σ x))","decl":"@[simp]\ntheorem algEquivOfEqComap_apply (h : P = Q.comap σ) (x : B) : algEquivOfEqComap p σ h x = σ x :=\n  rfl\n\n"}
{"name":"Ideal.Quotient.stabilizerHom_apply","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_3\nB : Type u_4\ninst✝⁶ : CommRing A\ninst✝⁵ : CommRing B\ninst✝⁴ : Algebra A B\nP : Ideal B\np : Ideal A\ninst✝³ : P.LiesOver p\nG : Type u_6\ninst✝² : Group G\ninst✝¹ : MulSemiringAction G B\ninst✝ : SMulCommClass G A B\ng : Subtype fun x => Membership.mem (MulAction.stabilizer G P) x\nb : B\n⊢ Eq (((Ideal.Quotient.stabilizerHom P p G) g) ((Ideal.Quotient.mk P) b)) ((Ideal.Quotient.mk P) (HSMul.hSMul g b))","decl":"@[simp] theorem stabilizerHom_apply (g : MulAction.stabilizer G P) (b : B) :\n    stabilizerHom P p G g b = ↑(g • b) :=\n  rfl\n\n"}
{"name":"Ideal.IsMaximal.under","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁴ : CommRing A\nB : Type u_3\ninst✝³ : CommRing B\ninst✝² : Algebra A B\ninst✝¹ : Algebra.IsIntegral A B\nP : Ideal B\ninst✝ : P.IsMaximal\n⊢ (Ideal.under A P).IsMaximal","decl":"variable (A) in\n/-- If `B` is an integral `A`-algebra, `P` is a maximal ideal of `B`, then the pull back of\n  `P` is also a maximal ideal of `A`. -/\ninstance IsMaximal.under [P.IsMaximal] : (P.under A).IsMaximal :=\n  isMaximal_comap_of_isIntegral_of_isMaximal P\n\n"}
{"name":"Ideal.IsMaximal.of_liesOver_isMaximal","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁵ : CommRing A\nB : Type u_3\ninst✝⁴ : CommRing B\ninst✝³ : Algebra A B\ninst✝² : Algebra.IsIntegral A B\nP : Ideal B\np : Ideal A\ninst✝¹ : P.LiesOver p\nhpm : p.IsMaximal\ninst✝ : P.IsPrime\n⊢ P.IsMaximal","decl":"theorem IsMaximal.of_liesOver_isMaximal [hpm : p.IsMaximal] [P.IsPrime] : P.IsMaximal := by\n  rw [P.over_def p] at hpm\n  exact isMaximal_of_isIntegral_of_isMaximal_comap P hpm\n\n"}
{"name":"Ideal.IsMaximal.of_isMaximal_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁵ : CommRing A\nB : Type u_3\ninst✝⁴ : CommRing B\ninst✝³ : Algebra A B\ninst✝² : Algebra.IsIntegral A B\nP : Ideal B\np : Ideal A\ninst✝¹ : P.LiesOver p\ninst✝ : P.IsMaximal\n⊢ p.IsMaximal","decl":"theorem IsMaximal.of_isMaximal_liesOver [P.IsMaximal] : p.IsMaximal := by\n  rw [P.over_def p]\n  exact isMaximal_comap_of_isIntegral_of_isMaximal P\n\n"}
{"name":"Ideal.Quotient.algebra_isIntegral_of_liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁴ : CommRing A\nB : Type u_3\ninst✝³ : CommRing B\ninst✝² : Algebra A B\ninst✝¹ : Algebra.IsIntegral A B\nP : Ideal B\np : Ideal A\ninst✝ : P.LiesOver p\n⊢ Algebra.IsIntegral (HasQuotient.Quotient A p) (HasQuotient.Quotient B P)","decl":"/-- `B ⧸ P` is an integral `A ⧸ p`-algebra if `B` is a integral `A`-algebra. -/\ninstance Quotient.algebra_isIntegral_of_liesOver : Algebra.IsIntegral (A ⧸ p) (B ⧸ P) :=\n  Algebra.IsIntegral.tower_top A\n\n"}
{"name":"Ideal.exists_ideal_liesOver_maximal_of_isIntegral","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁶ : CommRing A\np : Ideal A\ninst✝⁵ : p.IsMaximal\nB : Type u_4\ninst✝⁴ : CommRing B\ninst✝³ : Nontrivial B\ninst✝² : Algebra A B\ninst✝¹ : NoZeroSMulDivisors A B\ninst✝ : Algebra.IsIntegral A B\n⊢ Exists fun P => And P.IsMaximal (P.LiesOver p)","decl":"theorem exists_ideal_liesOver_maximal_of_isIntegral [p.IsMaximal] (B : Type*) [CommRing B]\n    [Nontrivial B] [Algebra A B] [NoZeroSMulDivisors A B] [Algebra.IsIntegral A B] :\n    ∃ P : Ideal B, P.IsMaximal ∧ P.LiesOver p := by\n  rcases exists_ideal_over_maximal_of_isIntegral p <|\n    (NoZeroSMulDivisors.ker_algebraMap_eq_bot A B).trans_le bot_le with ⟨P, hm, hP⟩\n  exact ⟨P, hm, ⟨hP.symm⟩⟩\n\n"}
{"name":"primesOver.isPrime","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\np : Ideal A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\nQ : ↑(primesOver p B)\n⊢ (↑Q).IsPrime","decl":"instance primesOver.isPrime (Q : primesOver p B) : Q.1.IsPrime :=\n  Q.2.1\n\n"}
{"name":"primesOver.liesOver","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝² : CommSemiring A\np : Ideal A\nB : Type u_3\ninst✝¹ : Semiring B\ninst✝ : Algebra A B\nQ : ↑(primesOver p B)\n⊢ (↑Q).LiesOver p","decl":"instance primesOver.liesOver (Q : primesOver p B) : Q.1.LiesOver p :=\n  Q.2.2\n\n"}
{"name":"primesOver.isMaximal","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁴ : CommRing A\np : Ideal A\ninst✝³ : p.IsMaximal\nB : Type u_3\ninst✝² : CommRing B\ninst✝¹ : Algebra A B\ninst✝ : Algebra.IsIntegral A B\nQ : ↑(primesOver p B)\n⊢ (↑Q).IsMaximal","decl":"instance primesOver.isMaximal : Q.1.IsMaximal :=\n  Ideal.IsMaximal.of_liesOver_isMaximal Q.1 p\n\n"}
{"name":"primesOver_bot","module":"Mathlib.RingTheory.Ideal.Over","initialProofState":"A : Type u_2\ninst✝⁶ : CommRing A\nB : Type u_3\ninst✝⁵ : CommRing B\ninst✝⁴ : Algebra A B\ninst✝³ : NoZeroSMulDivisors A B\ninst✝² : Algebra.IsIntegral A B\ninst✝¹ : Nontrivial A\ninst✝ : IsDomain B\n⊢ Eq (primesOver Bot.bot B) (Singleton.singleton Bot.bot)","decl":"variable (A B) in\nlemma primesOver_bot [Nontrivial A] [IsDomain B] : primesOver (⊥ : Ideal A) B = {⊥} := by\n  ext p\n  refine ⟨fun ⟨_, ⟨h⟩⟩ ↦ p.eq_bot_of_comap_eq_bot h.symm, ?_⟩\n  rintro rfl\n  exact ⟨Ideal.bot_prime, Ideal.bot_liesOver_bot A B⟩\n\n"}
