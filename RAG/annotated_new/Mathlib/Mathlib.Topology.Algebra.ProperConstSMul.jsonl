{"name":"ProperConstVAdd.isProperMap_vadd","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝¹ : VAdd M X\ninst✝ : TopologicalSpace X\nself : ProperConstVAdd M X\nc : M\n⊢ IsProperMap fun x => HVAdd.hVAdd c x","decl":"/-- A mixin typeclass saying that the `(c +ᵥ ·)` is a proper map for all `c`.\n\nNote that this is **not** the same as a proper additive action (not yet in `Mathlib`). -/\nclass ProperConstVAdd (M X : Type*) [VAdd M X] [TopologicalSpace X] : Prop where\n  /-- `(c +ᵥ ·)` is a proper map. -/\n  isProperMap_vadd (c : M) : IsProperMap ((c +ᵥ ·) : X → X)\n\n"}
{"name":"ProperConstSMul.isProperMap_smul","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝¹ : SMul M X\ninst✝ : TopologicalSpace X\nself : ProperConstSMul M X\nc : M\n⊢ IsProperMap fun x => HSMul.hSMul c x","decl":"/-- A mixin typeclass saying that `(c • ·)` is a proper map for all `c`.\n\nNote that this is **not** the same as a proper multiplicative action (not yet in `Mathlib`). -/\n@[to_additive]\nclass ProperConstSMul (M X : Type*) [SMul M X] [TopologicalSpace X] : Prop where\n  /-- `(c • ·)` is a proper map. -/\n  isProperMap_smul (c : M) : IsProperMap ((c • ·) : X → X)\n\n"}
{"name":"isProperMap_vadd","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nc : M\nX : Type u_2\ninst✝¹ : VAdd M X\ninst✝ : TopologicalSpace X\nh : ProperConstVAdd M X\n⊢ IsProperMap fun x => HVAdd.hVAdd c x","decl":"/-- `(c • ·)` is a proper map. -/\n@[to_additive \"`(c +ᵥ ·)` is a proper map.\"]\ntheorem isProperMap_smul {M : Type*} (c : M) (X : Type*) [SMul M X] [TopologicalSpace X]\n    [h : ProperConstSMul M X] : IsProperMap ((c • ·) : X → X) := h.1 c\n\n"}
{"name":"isProperMap_smul","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nc : M\nX : Type u_2\ninst✝¹ : SMul M X\ninst✝ : TopologicalSpace X\nh : ProperConstSMul M X\n⊢ IsProperMap fun x => HSMul.hSMul c x","decl":"/-- `(c • ·)` is a proper map. -/\n@[to_additive \"`(c +ᵥ ·)` is a proper map.\"]\ntheorem isProperMap_smul {M : Type*} (c : M) (X : Type*) [SMul M X] [TopologicalSpace X]\n    [h : ProperConstSMul M X] : IsProperMap ((c • ·) : X → X) := h.1 c\n\n"}
{"name":"IsCompact.preimage_smul","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝² : SMul M X\ninst✝¹ : TopologicalSpace X\ninst✝ : ProperConstSMul M X\ns : Set X\nhs : IsCompact s\nc : M\n⊢ IsCompact (Set.preimage (fun x => HSMul.hSMul c x) s)","decl":"/-- The preimage of a compact set under `(c • ·)` is a compact set. -/\n@[to_additive \"The preimage of a compact set under `(c +ᵥ ·)` is a compact set.\"]\ntheorem IsCompact.preimage_smul {M X : Type*} [SMul M X] [TopologicalSpace X]\n    [ProperConstSMul M X] {s : Set X} (hs : IsCompact s) (c : M) : IsCompact ((c • ·) ⁻¹' s) :=\n  (isProperMap_smul c X).isCompact_preimage hs\n\n"}
{"name":"IsCompact.preimage_vadd","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝² : VAdd M X\ninst✝¹ : TopologicalSpace X\ninst✝ : ProperConstVAdd M X\ns : Set X\nhs : IsCompact s\nc : M\n⊢ IsCompact (Set.preimage (fun x => HVAdd.hVAdd c x) s)","decl":"/-- The preimage of a compact set under `(c • ·)` is a compact set. -/\n@[to_additive \"The preimage of a compact set under `(c +ᵥ ·)` is a compact set.\"]\ntheorem IsCompact.preimage_smul {M X : Type*} [SMul M X] [TopologicalSpace X]\n    [ProperConstSMul M X] {s : Set X} (hs : IsCompact s) (c : M) : IsCompact ((c • ·) ⁻¹' s) :=\n  (isProperMap_smul c X).isCompact_preimage hs\n\n"}
{"name":"instProperConstVAddOfContinuousConstVAddOfT2SpaceOfCompactSpace","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝⁴ : VAdd M X\ninst✝³ : TopologicalSpace X\ninst✝² : ContinuousConstVAdd M X\ninst✝¹ : T2Space X\ninst✝ : CompactSpace X\n⊢ ProperConstVAdd M X","decl":"@[to_additive]\ninstance (priority := 100) {M X : Type*} [SMul M X] [TopologicalSpace X] [ContinuousConstSMul M X]\n    [T2Space X] [CompactSpace X] : ProperConstSMul M X :=\n  ⟨fun c ↦ (continuous_const_smul c).isProperMap⟩\n\n"}
{"name":"instProperConstSMulOfContinuousConstSMulOfT2SpaceOfCompactSpace","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\ninst✝⁴ : SMul M X\ninst✝³ : TopologicalSpace X\ninst✝² : ContinuousConstSMul M X\ninst✝¹ : T2Space X\ninst✝ : CompactSpace X\n⊢ ProperConstSMul M X","decl":"@[to_additive]\ninstance (priority := 100) {M X : Type*} [SMul M X] [TopologicalSpace X] [ContinuousConstSMul M X]\n    [T2Space X] [CompactSpace X] : ProperConstSMul M X :=\n  ⟨fun c ↦ (continuous_const_smul c).isProperMap⟩\n\n"}
{"name":"instProperConstSMulOfContinuousConstSMul","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"G : Type u_1\nX : Type u_2\ninst✝³ : Group G\ninst✝² : MulAction G X\ninst✝¹ : TopologicalSpace X\ninst✝ : ContinuousConstSMul G X\n⊢ ProperConstSMul G X","decl":"@[to_additive]\ninstance (priority := 100) {G X : Type*} [Group G] [MulAction G X] [TopologicalSpace X]\n    [ContinuousConstSMul G X] : ProperConstSMul G X :=\n  ⟨fun c ↦ (Homeomorph.smul c).isProperMap⟩\n\n"}
{"name":"instProperConstVAddOfContinuousConstVAdd","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"G : Type u_1\nX : Type u_2\ninst✝³ : AddGroup G\ninst✝² : AddAction G X\ninst✝¹ : TopologicalSpace X\ninst✝ : ContinuousConstVAdd G X\n⊢ ProperConstVAdd G X","decl":"@[to_additive]\ninstance (priority := 100) {G X : Type*} [Group G] [MulAction G X] [TopologicalSpace X]\n    [ContinuousConstSMul G X] : ProperConstSMul G X :=\n  ⟨fun c ↦ (Homeomorph.smul c).isProperMap⟩\n\n"}
{"name":"instProperConstSMulProd","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nX : Type u_2\nY : Type u_3\ninst✝⁵ : SMul M X\ninst✝⁴ : TopologicalSpace X\ninst✝³ : ProperConstSMul M X\ninst✝² : SMul M Y\ninst✝¹ : TopologicalSpace Y\ninst✝ : ProperConstSMul M Y\n⊢ ProperConstSMul M (Prod X Y)","decl":"instance {M X Y : Type*}\n    [SMul M X] [TopologicalSpace X] [ProperConstSMul M X]\n    [SMul M Y] [TopologicalSpace Y] [ProperConstSMul M Y] :\n    ProperConstSMul M (X × Y) :=\n  ⟨fun c ↦ (isProperMap_smul c X).prodMap (isProperMap_smul c Y)⟩\n\n"}
{"name":"instProperConstSMulForall","module":"Mathlib.Topology.Algebra.ProperConstSMul","initialProofState":"M : Type u_1\nι : Type u_2\nX : ι → Type u_3\ninst✝² : (i : ι) → SMul M (X i)\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : ∀ (i : ι), ProperConstSMul M (X i)\n⊢ ProperConstSMul M ((i : ι) → X i)","decl":"instance {M ι : Type*} {X : ι → Type*}\n    [∀ i, SMul M (X i)] [∀ i, TopologicalSpace (X i)] [∀ i, ProperConstSMul M (X i)] :\n    ProperConstSMul M (∀ i, X i) :=\n  ⟨fun c ↦ .pi_map fun i ↦ isProperMap_smul c (X i)⟩\n"}
