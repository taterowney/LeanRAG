{"name":"SimpleGraph.TripartiteFromTriangles.rel_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na✝¹ a✝ : Sum α (Sum β γ)\n⊢ Iff (SimpleGraph.TripartiteFromTriangles.Rel t a✝¹ a✝) (Or (Exists fun a => Exists fun b => Exists fun c => And (Membership.mem t { fst := a, snd := { fst := b, snd := c } }) (And (Eq a✝¹ (Sum3.in₀ a)) (Eq a✝ (Sum3.in₁ b)))) (Or (Exists fun a => Exists fun b => Exists fun c => And (Membership.mem t { fst := a, snd := { fst := b, snd := c } }) (And (Eq a✝¹ (Sum3.in₁ b)) (Eq a✝ (Sum3.in₀ a)))) (Or (Exists fun a => Exists fun b => Exists fun c => And (Membership.mem t { fst := a, snd := { fst := b, snd := c } }) (And (Eq a✝¹ (Sum3.in₀ a)) (Eq a✝ (Sum3.in₂ c)))) (Or (Exists fun a => Exists fun b => Exists fun c => And (Membership.mem t { fst := a, snd := { fst := b, snd := c } }) (And (Eq a✝¹ (Sum3.in₂ c)) (Eq a✝ (Sum3.in₀ a)))) (Or (Exists fun a => Exists fun b => Exists fun c => And (Membership.mem t { fst := a, snd := { fst := b, snd := c } }) (And (Eq a✝¹ (Sum3.in₁ b)) (Eq a✝ (Sum3.in₂ c)))) (Exists fun a => Exists fun b => Exists fun c => And (Membership.mem t { fst := a, snd := { fst := b, snd := c } }) (And (Eq a✝¹ (Sum3.in₂ c)) (Eq a✝ (Sum3.in₁ b)))))))))","decl":"/-- The underlying relation of the tripartite-from-triangles graph.\n\nTwo vertices are related iff there exists a triangle index containing them both. -/\n@[mk_iff] inductive Rel (t : Finset (α × β × γ)) : α ⊕ β ⊕ γ → α ⊕ β ⊕ γ → Prop\n| in₀₁ ⦃a b c⦄ : (a, b, c) ∈ t → Rel t (in₀ a) (in₁ b)\n| in₁₀ ⦃a b c⦄ : (a, b, c) ∈ t → Rel t (in₁ b) (in₀ a)\n| in₀₂ ⦃a b c⦄ : (a, b, c) ∈ t → Rel t (in₀ a) (in₂ c)\n| in₂₀ ⦃a b c⦄ : (a, b, c) ∈ t → Rel t (in₂ c) (in₀ a)\n| in₁₂ ⦃a b c⦄ : (a, b, c) ∈ t → Rel t (in₁ b) (in₂ c)\n| in₂₁ ⦃a b c⦄ : (a, b, c) ∈ t → Rel t (in₂ c) (in₁ b)\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.rel_irrefl","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nx : Sum α (Sum β γ)\n⊢ Not (SimpleGraph.TripartiteFromTriangles.Rel t x x)","decl":"lemma rel_irrefl : ∀ x, ¬ Rel t x x := fun _x hx ↦ nomatch hx\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.rel_symm","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\n⊢ Symmetric (SimpleGraph.TripartiteFromTriangles.Rel t)","decl":"lemma rel_symm : Symmetric (Rel t) := fun x y h ↦  by cases h <;> constructor <;> assumption\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.not_in₀₀","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na a' : α\n⊢ Not ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₀ a'))","decl":"@[simp] lemma not_in₀₀ : ¬ (graph t).Adj (in₀ a) (in₀ a') := fun h ↦ nomatch h\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.not_in₁₁","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nb b' : β\n⊢ Not ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₁ b) (Sum3.in₁ b'))","decl":"@[simp] lemma not_in₁₁ : ¬ (graph t).Adj (in₁ b) (in₁ b') := fun h ↦ nomatch h\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.not_in₂₂","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nc c' : γ\n⊢ Not ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₂ c) (Sum3.in₂ c'))","decl":"@[simp] lemma not_in₂₂ : ¬ (graph t).Adj (in₂ c) (in₂ c') := fun h ↦ nomatch h\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₀₁_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nb : β\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₁ b)) (Exists fun c => Membership.mem t { fst := a, snd := { fst := b, snd := c } })","decl":"@[simp] lemma in₀₁_iff : (graph t).Adj (in₀ a) (in₁ b) ↔ ∃ c, (a, b, c) ∈ t :=\n  ⟨by rintro ⟨⟩; exact ⟨_, ‹_›⟩, fun ⟨_, h⟩ ↦ in₀₁ h⟩\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₁₀_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nb : β\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₁ b) (Sum3.in₀ a)) (Exists fun c => Membership.mem t { fst := a, snd := { fst := b, snd := c } })","decl":"@[simp] lemma in₁₀_iff : (graph t).Adj (in₁ b) (in₀ a) ↔ ∃ c, (a, b, c) ∈ t :=\n  ⟨by rintro ⟨⟩; exact ⟨_, ‹_›⟩, fun ⟨_, h⟩ ↦ in₁₀ h⟩\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₀₂_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₂ c)) (Exists fun b => Membership.mem t { fst := a, snd := { fst := b, snd := c } })","decl":"@[simp] lemma in₀₂_iff : (graph t).Adj (in₀ a) (in₂ c) ↔ ∃ b, (a, b, c) ∈ t :=\n  ⟨by rintro ⟨⟩; exact ⟨_, ‹_›⟩, fun ⟨_, h⟩ ↦ in₀₂ h⟩\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₂₀_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₂ c) (Sum3.in₀ a)) (Exists fun b => Membership.mem t { fst := a, snd := { fst := b, snd := c } })","decl":"@[simp] lemma in₂₀_iff : (graph t).Adj (in₂ c) (in₀ a) ↔ ∃ b, (a, b, c) ∈ t :=\n  ⟨by rintro ⟨⟩; exact ⟨_, ‹_›⟩, fun ⟨_, h⟩ ↦ in₂₀ h⟩\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₁₂_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nb : β\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₁ b) (Sum3.in₂ c)) (Exists fun a => Membership.mem t { fst := a, snd := { fst := b, snd := c } })","decl":"@[simp] lemma in₁₂_iff : (graph t).Adj (in₁ b) (in₂ c) ↔ ∃ a, (a, b, c) ∈ t :=\n  ⟨by rintro ⟨⟩; exact ⟨_, ‹_›⟩, fun ⟨_, h⟩ ↦ in₁₂ h⟩\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₂₁_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nb : β\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₂ c) (Sum3.in₁ b)) (Exists fun a => Membership.mem t { fst := a, snd := { fst := b, snd := c } })","decl":"@[simp] lemma in₂₁_iff : (graph t).Adj (in₂ c) (in₁ b) ↔ ∃ a, (a, b, c) ∈ t :=\n  ⟨by rintro ⟨⟩; exact ⟨_, ‹_›⟩, fun ⟨_, h⟩ ↦ in₂₁ h⟩\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₀₁_iff'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nb : β\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₁ b)) (Exists fun x => And (Membership.mem t x) (And (Eq x.1 a) (Eq x.2.1 b)))","decl":"lemma in₀₁_iff' :\n    (graph t).Adj (in₀ a) (in₁ b) ↔ ∃ x : α × β × γ, x ∈ t ∧ x.1 = a ∧ x.2.1 = b where\n  mp := by rintro ⟨⟩; exact ⟨_, ‹_›, by simp⟩\n  mpr := by rintro ⟨⟨a, b, c⟩, h, rfl, rfl⟩; constructor; assumption\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₁₀_iff'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nb : β\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₁ b) (Sum3.in₀ a)) (Exists fun x => And (Membership.mem t x) (And (Eq x.2.1 b) (Eq x.1 a)))","decl":"lemma in₁₀_iff' :\n    (graph t).Adj (in₁ b) (in₀ a) ↔ ∃ x : α × β × γ, x ∈ t ∧ x.2.1 = b ∧ x.1 = a where\n  mp := by rintro ⟨⟩; exact ⟨_, ‹_›, by simp⟩\n  mpr := by rintro ⟨⟨a, b, c⟩, h, rfl, rfl⟩; constructor; assumption\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₀₂_iff'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₂ c)) (Exists fun x => And (Membership.mem t x) (And (Eq x.1 a) (Eq x.2.2 c)))","decl":"lemma in₀₂_iff' :\n    (graph t).Adj (in₀ a) (in₂ c) ↔ ∃ x : α × β × γ, x ∈ t ∧ x.1 = a ∧ x.2.2 = c where\n  mp := by rintro ⟨⟩; exact ⟨_, ‹_›, by simp⟩\n  mpr := by rintro ⟨⟨a, b, c⟩, h, rfl, rfl⟩; constructor; assumption\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₂₀_iff'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\na : α\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₂ c) (Sum3.in₀ a)) (Exists fun x => And (Membership.mem t x) (And (Eq x.2.2 c) (Eq x.1 a)))","decl":"lemma in₂₀_iff' :\n    (graph t).Adj (in₂ c) (in₀ a) ↔ ∃ x : α × β × γ, x ∈ t ∧ x.2.2 = c ∧ x.1 = a where\n  mp := by rintro ⟨⟩; exact ⟨_, ‹_›, by simp⟩\n  mpr := by rintro ⟨⟨a, b, c⟩, h, rfl, rfl⟩; constructor; assumption\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₁₂_iff'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nb : β\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₁ b) (Sum3.in₂ c)) (Exists fun x => And (Membership.mem t x) (And (Eq x.2.1 b) (Eq x.2.2 c)))","decl":"lemma in₁₂_iff' :\n    (graph t).Adj (in₁ b) (in₂ c) ↔ ∃ x : α × β × γ, x ∈ t ∧ x.2.1 = b ∧ x.2.2 = c where\n  mp := by rintro ⟨⟩; exact ⟨_, ‹_›, by simp⟩\n  mpr := by rintro ⟨⟨a, b, c⟩, h, rfl, rfl⟩; constructor; assumption\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.Graph.in₂₁_iff'","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nb : β\nc : γ\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₂ c) (Sum3.in₁ b)) (Exists fun x => And (Membership.mem t x) (And (Eq x.2.2 c) (Eq x.2.1 b)))","decl":"lemma in₂₁_iff' :\n    (graph t).Adj (in₂ c) (in₁ b) ↔ ∃ x : α × β × γ, x ∈ t ∧ x.2.2 = c ∧ x.2.1 = b where\n  mp := by rintro ⟨⟩; exact ⟨_, ‹_›, by simp⟩\n  mpr := by rintro ⟨⟨a, b, c⟩, h, rfl, rfl⟩; constructor; assumption\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj₀","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nself : SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint t\na : α\nb : β\nc : γ\na' : α\na✝¹ : Membership.mem t { fst := a, snd := { fst := b, snd := c } }\na✝ : Membership.mem t { fst := a', snd := { fst := b, snd := c } }\n⊢ Eq a a'","decl":"/-- Predicate on the triangle indices for the explicit triangles to be edge-disjoint. -/\nclass ExplicitDisjoint (t : Finset (α × β × γ)) : Prop where\n  inj₀ : ∀ ⦃a b c a'⦄, (a, b, c) ∈ t → (a', b, c) ∈ t → a = a'\n  inj₁ : ∀ ⦃a b c b'⦄, (a, b, c) ∈ t → (a, b', c) ∈ t → b = b'\n  inj₂ : ∀ ⦃a b c c'⦄, (a, b, c) ∈ t → (a, b, c') ∈ t → c = c'\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj₂","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nself : SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint t\na : α\nb : β\nc c' : γ\na✝¹ : Membership.mem t { fst := a, snd := { fst := b, snd := c } }\na✝ : Membership.mem t { fst := a, snd := { fst := b, snd := c' } }\n⊢ Eq c c'","decl":"/-- Predicate on the triangle indices for the explicit triangles to be edge-disjoint. -/\nclass ExplicitDisjoint (t : Finset (α × β × γ)) : Prop where\n  inj₀ : ∀ ⦃a b c a'⦄, (a, b, c) ∈ t → (a', b, c) ∈ t → a = a'\n  inj₁ : ∀ ⦃a b c b'⦄, (a, b, c) ∈ t → (a, b', c) ∈ t → b = b'\n  inj₂ : ∀ ⦃a b c c'⦄, (a, b, c) ∈ t → (a, b, c') ∈ t → c = c'\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint.inj₁","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nself : SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint t\na : α\nb : β\nc : γ\nb' : β\na✝¹ : Membership.mem t { fst := a, snd := { fst := b, snd := c } }\na✝ : Membership.mem t { fst := a, snd := { fst := b', snd := c } }\n⊢ Eq b b'","decl":"/-- Predicate on the triangle indices for the explicit triangles to be edge-disjoint. -/\nclass ExplicitDisjoint (t : Finset (α × β × γ)) : Prop where\n  inj₀ : ∀ ⦃a b c a'⦄, (a, b, c) ∈ t → (a', b, c) ∈ t → a = a'\n  inj₁ : ∀ ⦃a b c b'⦄, (a, b, c) ∈ t → (a, b', c) ∈ t → b = b'\n  inj₂ : ∀ ⦃a b c c'⦄, (a, b, c) ∈ t → (a, b, c') ∈ t → c = c'\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.NoAccidental.eq_or_eq_or_eq","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nself : SimpleGraph.TripartiteFromTriangles.NoAccidental t\na a' : α\nb b' : β\nc c' : γ\na✝² : Membership.mem t { fst := a', snd := { fst := b, snd := c } }\na✝¹ : Membership.mem t { fst := a, snd := { fst := b', snd := c } }\na✝ : Membership.mem t { fst := a, snd := { fst := b, snd := c' } }\n⊢ Or (Eq a a') (Or (Eq b b') (Eq c c'))","decl":"/-- Predicate on the triangle indices for there to be no accidental triangle.\n\nNote that we cheat a bit, since the exact translation of this informal description would have\n`(a', b', c') ∈ t` as a conclusion rather than `a = a' ∨ b = b' ∨ c = c'`. Those conditions are\nequivalent when the explicit triangles are edge-disjoint (which is the case we care about). -/\nclass NoAccidental (t : Finset (α × β × γ)) : Prop where\n  eq_or_eq_or_eq : ∀ ⦃a a' b b' c c'⦄, (a', b, c) ∈ t → (a, b', c) ∈ t → (a, b, c') ∈ t →\n    a = a' ∨ b = b' ∨ c = c'\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.graph_triple","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝² : DecidableEq α\ninst✝¹ : DecidableEq β\ninst✝ : DecidableEq γ\nx y z : Sum α (Sum β γ)\na✝² : (SimpleGraph.TripartiteFromTriangles.graph t).Adj x y\na✝¹ : (SimpleGraph.TripartiteFromTriangles.graph t).Adj x z\na✝ : (SimpleGraph.TripartiteFromTriangles.graph t).Adj y z\n⊢ Exists fun a => Exists fun b => Exists fun c => And (Eq (Insert.insert (Sum3.in₀ a) (Insert.insert (Sum3.in₁ b) (Singleton.singleton (Sum3.in₂ c)))) (Insert.insert x (Insert.insert y (Singleton.singleton z)))) (And ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₁ b)) (And ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₀ a) (Sum3.in₂ c)) ((SimpleGraph.TripartiteFromTriangles.graph t).Adj (Sum3.in₁ b) (Sum3.in₂ c))))","decl":"/-- This lemma reorders the elements of a triangle in the tripartite graph. It turns a triangle\n`{x, y, z}` into a triangle `{a, b, c}` where `a : α `, `b : β`, `c : γ`. -/\n lemma graph_triple ⦃x y z⦄ :\n  (graph t).Adj x y → (graph t).Adj x z → (graph t).Adj y z → ∃ a b c,\n    ({in₀ a, in₁ b, in₂ c} : Finset (α ⊕ β ⊕ γ)) = {x, y, z} ∧ (graph t).Adj (in₀ a) (in₁ b) ∧\n      (graph t).Adj (in₀ a) (in₂ c) ∧ (graph t).Adj (in₁ b) (in₂ c) := by\n  rintro (_ | _ | _) (_ | _ | _) (_ | _ | _) <;>\n    refine ⟨_, _, _, by ext; simp only [Finset.mem_insert, Finset.mem_singleton]; try tauto,\n      ?_, ?_, ?_⟩ <;> constructor <;> assumption\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.toTriangle_apply","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : DecidableEq α\ninst✝¹ : DecidableEq β\ninst✝ : DecidableEq γ\nx : Prod α (Prod β γ)\n⊢ Eq (SimpleGraph.TripartiteFromTriangles.toTriangle x) (Insert.insert (Sum3.in₀ x.1) (Insert.insert (Sum3.in₁ x.2.1) (Singleton.singleton (Sum3.in₂ x.2.2))))","decl":"/-- The map that turns a triangle index into an explicit triangle. -/\n@[simps] def toTriangle : α × β × γ ↪ Finset (α ⊕ β ⊕ γ) where\n  toFun x := {in₀ x.1, in₁ x.2.1, in₂ x.2.2}\n  inj' := fun ⟨a, b, c⟩ ⟨a', b', c'⟩ ↦ by simpa only [Finset.Subset.antisymm_iff, Finset.subset_iff,\n    mem_insert, mem_singleton, forall_eq_or_imp, forall_eq, Prod.mk.inj_iff, or_false, false_or,\n    in₀, in₁, in₂, Sum.inl.inj_iff, Sum.inr.inj_iff, reduceCtorEq] using And.left\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.toTriangle_is3Clique","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\nx : Prod α (Prod β γ)\ninst✝² : DecidableEq α\ninst✝¹ : DecidableEq β\ninst✝ : DecidableEq γ\nhx : Membership.mem t x\n⊢ (SimpleGraph.TripartiteFromTriangles.graph t).IsNClique 3 (SimpleGraph.TripartiteFromTriangles.toTriangle x)","decl":"lemma toTriangle_is3Clique (hx : x ∈ t) : (graph t).IsNClique 3 (toTriangle x) := by\n  simp only [toTriangle_apply, is3Clique_triple_iff, in₀₁_iff, in₀₂_iff, in₁₂_iff]\n  exact ⟨⟨_, hx⟩, ⟨_, hx⟩, _, hx⟩\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.exists_mem_toTriangle","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝² : DecidableEq α\ninst✝¹ : DecidableEq β\ninst✝ : DecidableEq γ\nx y : Sum α (Sum β γ)\nhxy : (SimpleGraph.TripartiteFromTriangles.graph t).Adj x y\n⊢ Exists fun z => And (Membership.mem t z) (And (Membership.mem (SimpleGraph.TripartiteFromTriangles.toTriangle z) x) (Membership.mem (SimpleGraph.TripartiteFromTriangles.toTriangle z) y))","decl":"lemma exists_mem_toTriangle {x y : α ⊕ β ⊕ γ} (hxy : (graph t).Adj x y) :\n    ∃ z ∈ t, x ∈ toTriangle z ∧ y ∈ toTriangle z := by cases hxy <;> exact ⟨_, ‹_›, by simp⟩\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.is3Clique_iff","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝³ : DecidableEq α\ninst✝² : DecidableEq β\ninst✝¹ : DecidableEq γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\ns : Finset (Sum α (Sum β γ))\n⊢ Iff ((SimpleGraph.TripartiteFromTriangles.graph t).IsNClique 3 s) (Exists fun x => And (Membership.mem t x) (Eq (SimpleGraph.TripartiteFromTriangles.toTriangle x) s))","decl":"nonrec lemma is3Clique_iff [NoAccidental t] {s : Finset (α ⊕ β ⊕ γ)} :\n    (graph t).IsNClique 3 s ↔ ∃ x, x ∈ t ∧ toTriangle x = s := by\n  refine ⟨fun h ↦ ?_, ?_⟩\n  · rw [is3Clique_iff] at h\n    obtain ⟨x, y, z, hxy, hxz, hyz, rfl⟩ := h\n    obtain ⟨a, b, c, habc, hab, hac, hbc⟩ := graph_triple hxy hxz hyz\n    refine ⟨(a, b, c), ?_, habc⟩\n    obtain ⟨c', hc'⟩ := in₀₁_iff.1 hab\n    obtain ⟨b', hb'⟩ := in₀₂_iff.1 hac\n    obtain ⟨a', ha'⟩ := in₁₂_iff.1 hbc\n    obtain rfl | rfl | rfl := NoAccidental.eq_or_eq_or_eq ha' hb' hc' <;> assumption\n  · rintro ⟨x, hx, rfl⟩\n    exact toTriangle_is3Clique hx\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.toTriangle_surjOn","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝³ : DecidableEq α\ninst✝² : DecidableEq β\ninst✝¹ : DecidableEq γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\n⊢ Set.SurjOn (⇑SimpleGraph.TripartiteFromTriangles.toTriangle) (↑t) ((SimpleGraph.TripartiteFromTriangles.graph t).cliqueSet 3)","decl":"lemma toTriangle_surjOn [NoAccidental t] :\n    (t : Set (α × β × γ)).SurjOn toTriangle ((graph t).cliqueSet 3) := fun _ ↦ is3Clique_iff.1\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.map_toTriangle_disjoint","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝³ : DecidableEq α\ninst✝² : DecidableEq β\ninst✝¹ : DecidableEq γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint t\n⊢ (↑(Finset.map SimpleGraph.TripartiteFromTriangles.toTriangle t)).Pairwise fun x y => (Inter.inter ↑x ↑y).Subsingleton","decl":"lemma map_toTriangle_disjoint [ExplicitDisjoint t] :\n    (t.map toTriangle : Set (Finset (α ⊕ β ⊕ γ))).Pairwise\n      fun x y ↦ (x ∩ y : Set (α ⊕ β ⊕ γ)).Subsingleton := by\n  intro\n  simp only [Finset.coe_map, Set.mem_image, Finset.mem_coe, Prod.exists, Ne,\n    forall_exists_index, and_imp]\n  rintro a b c habc rfl e x y z hxyz rfl h'\n  have := ne_of_apply_ne _ h'\n  simp only [Ne, Prod.mk.inj_iff, not_and] at this\n  simp only [toTriangle_apply, in₀, in₁, in₂, Set.mem_inter_iff, mem_insert, mem_singleton,\n    mem_coe, and_imp, Sum.forall, or_false, forall_eq, false_or, eq_self_iff_true, imp_true_iff,\n    true_and, and_true, Set.Subsingleton]\n  suffices ¬ (a = x ∧ b = y) ∧ ¬ (a = x ∧ c = z) ∧ ¬ (b = y ∧ c = z) by aesop\n  refine ⟨?_, ?_, ?_⟩\n  · rintro ⟨rfl, rfl⟩\n    exact this rfl rfl (ExplicitDisjoint.inj₂ habc hxyz)\n  · rintro ⟨rfl, rfl⟩\n    exact this rfl (ExplicitDisjoint.inj₁ habc hxyz) rfl\n  · rintro ⟨rfl, rfl⟩\n    exact this (ExplicitDisjoint.inj₀ habc hxyz) rfl rfl\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.cliqueSet_eq_image","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝³ : DecidableEq α\ninst✝² : DecidableEq β\ninst✝¹ : DecidableEq γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\n⊢ Eq ((SimpleGraph.TripartiteFromTriangles.graph t).cliqueSet 3) (Set.image ⇑SimpleGraph.TripartiteFromTriangles.toTriangle ↑t)","decl":"lemma cliqueSet_eq_image [NoAccidental t] : (graph t).cliqueSet 3 = toTriangle '' t := by\n  ext; exact is3Clique_iff\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_image","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝⁶ : DecidableEq α\ninst✝⁵ : DecidableEq β\ninst✝⁴ : DecidableEq γ\ninst✝³ : Fintype α\ninst✝² : Fintype β\ninst✝¹ : Fintype γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\n⊢ Eq ((SimpleGraph.TripartiteFromTriangles.graph t).cliqueFinset 3) (Finset.image (⇑SimpleGraph.TripartiteFromTriangles.toTriangle) t)","decl":"lemma cliqueFinset_eq_image [NoAccidental t] : (graph t).cliqueFinset 3 = t.image toTriangle :=\n  coe_injective <| by push_cast; exact cliqueSet_eq_image _\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.cliqueFinset_eq_map","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝⁶ : DecidableEq α\ninst✝⁵ : DecidableEq β\ninst✝⁴ : DecidableEq γ\ninst✝³ : Fintype α\ninst✝² : Fintype β\ninst✝¹ : Fintype γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\n⊢ Eq ((SimpleGraph.TripartiteFromTriangles.graph t).cliqueFinset 3) (Finset.map SimpleGraph.TripartiteFromTriangles.toTriangle t)","decl":"lemma cliqueFinset_eq_map [NoAccidental t] : (graph t).cliqueFinset 3 = t.map toTriangle := by\n  simp [cliqueFinset_eq_image, map_eq_image]\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.card_triangles","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝⁶ : DecidableEq α\ninst✝⁵ : DecidableEq β\ninst✝⁴ : DecidableEq γ\ninst✝³ : Fintype α\ninst✝² : Fintype β\ninst✝¹ : Fintype γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\n⊢ Eq ((SimpleGraph.TripartiteFromTriangles.graph t).cliqueFinset 3).card t.card","decl":"@[simp] lemma card_triangles [NoAccidental t] : #((graph t).cliqueFinset 3) = #t := by\n  rw [cliqueFinset_eq_map, card_map]\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.farFromTriangleFree","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\n𝕜 : Type u_4\ninst✝⁷ : LinearOrderedField 𝕜\nt : Finset (Prod α (Prod β γ))\ninst✝⁶ : DecidableEq α\ninst✝⁵ : DecidableEq β\ninst✝⁴ : DecidableEq γ\ninst✝³ : Fintype α\ninst✝² : Fintype β\ninst✝¹ : Fintype γ\ninst✝ : SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint t\nε : 𝕜\nht : LE.le (HMul.hMul ε ↑(HPow.hPow (HAdd.hAdd (HAdd.hAdd (Fintype.card α) (Fintype.card β)) (Fintype.card γ)) 2)) ↑t.card\n⊢ (SimpleGraph.TripartiteFromTriangles.graph t).FarFromTriangleFree ε","decl":"lemma farFromTriangleFree [ExplicitDisjoint t] {ε : 𝕜}\n    (ht : ε * ((Fintype.card α + Fintype.card β + Fintype.card γ) ^ 2 : ℕ) ≤ #t) :\n    (graph t).FarFromTriangleFree ε :=\n  farFromTriangleFree_of_disjoint_triangles (t.map toTriangle)\n    (map_subset_iff_subset_preimage.2 fun x hx ↦ by simpa using toTriangle_is3Clique hx)\n    (map_toTriangle_disjoint t) <| by simpa [add_assoc] using ht\n\n"}
{"name":"SimpleGraph.TripartiteFromTriangles.locallyLinear","module":"Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nt : Finset (Prod α (Prod β γ))\ninst✝¹ : SimpleGraph.TripartiteFromTriangles.ExplicitDisjoint t\ninst✝ : SimpleGraph.TripartiteFromTriangles.NoAccidental t\n⊢ (SimpleGraph.TripartiteFromTriangles.graph t).LocallyLinear","decl":"lemma locallyLinear [ExplicitDisjoint t] [NoAccidental t] : (graph t).LocallyLinear := by\n  classical\n  refine ⟨?_, fun x y hxy ↦ ?_⟩\n  · unfold EdgeDisjointTriangles\n    convert map_toTriangle_disjoint t\n    rw [cliqueSet_eq_image, coe_map]\n  · obtain ⟨z, hz, hxy⟩ := exists_mem_toTriangle hxy\n    exact ⟨_, toTriangle_is3Clique hz, hxy⟩\n\n"}
