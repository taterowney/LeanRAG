{"name":"Fintype.isPrimePow_card_of_field","module":"Mathlib.FieldTheory.Cardinality","initialProofState":"α : Type u_1\ninst✝¹ : Fintype α\ninst✝ : Field α\n⊢ IsPrimePow (Fintype.card α)","decl":"/-- A finite field has prime power cardinality. -/\ntheorem Fintype.isPrimePow_card_of_field {α} [Fintype α] [Field α] : IsPrimePow ‖α‖ := by\n  -- TODO: `Algebra` version of `CharP.exists`, of type `∀ p, Algebra (ZMod p) α`\n  cases' CharP.exists α with p _\n  haveI hp := Fact.mk (CharP.char_is_prime α p)\n  letI : Algebra (ZMod p) α := ZMod.algebra _ _\n  let b := IsNoetherian.finsetBasis (ZMod p) α\n  rw [Module.card_fintype b, ZMod.card, isPrimePow_pow_iff]\n  · exact hp.1.isPrimePow\n  rw [← Module.finrank_eq_card_basis b]\n  exact Module.finrank_pos.ne'\n\n"}
{"name":"Fintype.nonempty_field_iff","module":"Mathlib.FieldTheory.Cardinality","initialProofState":"α : Type u_1\ninst✝ : Fintype α\n⊢ Iff (Nonempty (Field α)) (IsPrimePow (Fintype.card α))","decl":"/-- A `Fintype` can be given a field structure iff its cardinality is a prime power. -/\ntheorem Fintype.nonempty_field_iff {α} [Fintype α] : Nonempty (Field α) ↔ IsPrimePow ‖α‖ := by\n  refine ⟨fun ⟨h⟩ => Fintype.isPrimePow_card_of_field, ?_⟩\n  rintro ⟨p, n, hp, hn, hα⟩\n  haveI := Fact.mk hp.nat_prime\n  haveI : Fintype (GaloisField p n) := Fintype.ofFinite (GaloisField p n)\n  exact ⟨(Fintype.equivOfCardEq\n    (((Fintype.card_eq_nat_card).trans (GaloisField.card p n hn.ne')).trans hα)).symm.field⟩\n\n"}
{"name":"Fintype.not_isField_of_card_not_prime_pow","module":"Mathlib.FieldTheory.Cardinality","initialProofState":"α : Type u_1\ninst✝¹ : Fintype α\ninst✝ : Ring α\na✝ : Not (IsPrimePow (Fintype.card α))\n⊢ Not (IsField α)","decl":"theorem Fintype.not_isField_of_card_not_prime_pow {α} [Fintype α] [Ring α] :\n    ¬IsPrimePow ‖α‖ → ¬IsField α :=\n  mt fun h => Fintype.nonempty_field_iff.mp ⟨h.toField⟩\n\n"}
{"name":"Infinite.nonempty_field","module":"Mathlib.FieldTheory.Cardinality","initialProofState":"α : Type u\ninst✝ : Infinite α\n⊢ Nonempty (Field α)","decl":"/-- Any infinite type can be endowed a field structure. -/\ntheorem Infinite.nonempty_field {α : Type u} [Infinite α] : Nonempty (Field α) := by\n  suffices #α = #(FractionRing (MvPolynomial α <| ULift.{u} ℚ)) from\n    (Cardinal.eq.1 this).map (·.field)\n  simp\n\n"}
{"name":"Field.nonempty_iff","module":"Mathlib.FieldTheory.Cardinality","initialProofState":"α : Type u\n⊢ Iff (Nonempty (Field α)) (IsPrimePow (Cardinal.mk α))","decl":"/-- There is a field structure on type if and only if its cardinality is a prime power. -/\ntheorem Field.nonempty_iff {α : Type u} : Nonempty (Field α) ↔ IsPrimePow #α := by\n  rw [Cardinal.isPrimePow_iff]\n  cases' fintypeOrInfinite α with h h\n  · simpa only [Cardinal.mk_fintype, Nat.cast_inj, exists_eq_left',\n      (Cardinal.nat_lt_aleph0 _).not_le, false_or] using Fintype.nonempty_field_iff\n  · simpa only [← Cardinal.infinite_iff, h, true_or, iff_true] using Infinite.nonempty_field\n"}
