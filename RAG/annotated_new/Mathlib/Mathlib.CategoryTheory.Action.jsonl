{"name":"CategoryTheory.actionAsFunctor_obj","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx✝ : CategoryTheory.SingleObj M\n⊢ Eq ((CategoryTheory.actionAsFunctor M X).obj x✝) X","decl":"/-- A multiplicative action M ↻ X viewed as a functor mapping the single object of M to X\n  and an element `m : M` to the map `X → X` given by multiplication by `m`. -/\n@[simps]\ndef actionAsFunctor : SingleObj M ⥤ Type u where\n  obj _ := X\n  map := (· • ·)\n  map_id _ := funext <| MulAction.one_smul\n  map_comp f g := funext fun x => (smul_smul g f x).symm\n\n"}
{"name":"CategoryTheory.actionAsFunctor_map","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nX✝ Y✝ : CategoryTheory.SingleObj M\nx1✝ : Quiver.Hom X✝ Y✝\nx2✝ : X\n⊢ Eq ((CategoryTheory.actionAsFunctor M X).map x1✝ x2✝) (HSMul.hSMul x1✝ x2✝)","decl":"/-- A multiplicative action M ↻ X viewed as a functor mapping the single object of M to X\n  and an element `m : M` to the map `X → X` given by multiplication by `m`. -/\n@[simps]\ndef actionAsFunctor : SingleObj M ⥤ Type u where\n  obj _ := X\n  map := (· • ·)\n  map_id _ := funext <| MulAction.one_smul\n  map_comp f g := funext fun x => (smul_smul g f x).symm\n\n"}
{"name":"CategoryTheory.ActionCategory.π_map","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\np q : CategoryTheory.ActionCategory M X\nf : Quiver.Hom p q\n⊢ Eq ((CategoryTheory.ActionCategory.π M X).map f) ↑f","decl":"@[simp]\ntheorem π_map (p q : ActionCategory M X) (f : p ⟶ q) : (π M X).map f = f.val :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.π_obj","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\np : CategoryTheory.ActionCategory M X\n⊢ Eq ((CategoryTheory.ActionCategory.π M X).obj p) (CategoryTheory.SingleObj.star M)","decl":"@[simp]\ntheorem π_obj (p : ActionCategory M X) : (π M X).obj p = SingleObj.star M :=\n  Unit.ext _ _\n\n"}
{"name":"CategoryTheory.ActionCategory.coe_back","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx : X\n⊢ Eq (CategoryTheory.ActionCategory.back ⟨Unit.unit, x⟩) x","decl":"@[simp]\ntheorem coe_back (x : X) : ActionCategory.back (x : ActionCategory M X) = x :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.back_coe","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx : CategoryTheory.ActionCategory M X\n⊢ Eq ⟨Unit.unit, x.back⟩ x","decl":"@[simp]\ntheorem back_coe (x : ActionCategory M X) : ↑x.back = x := by cases x; rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.hom_as_subtype","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\np q : CategoryTheory.ActionCategory M X\n⊢ Eq (Quiver.Hom p q) (Subtype fun m => Eq (HSMul.hSMul m p.back) q.back)","decl":"theorem hom_as_subtype (p q : ActionCategory M X) : (p ⟶ q) = { m : M // m • p.back = q.back } :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.instNonempty","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝² : Monoid M\nX : Type u\ninst✝¹ : MulAction M X\ninst✝ : Nonempty X\n⊢ Nonempty (CategoryTheory.ActionCategory M X)","decl":"instance [Nonempty X] : Nonempty (ActionCategory M X) :=\n  Nonempty.map (objEquiv M X) inferInstance\n\n"}
{"name":"CategoryTheory.ActionCategory.stabilizerIsoEnd_apply","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx : X\nf : Subtype fun x_1 => Membership.mem (MulAction.stabilizerSubmonoid M x) x_1\n⊢ Eq ((CategoryTheory.ActionCategory.stabilizerIsoEnd M x) f) f","decl":"@[simp]\ntheorem stabilizerIsoEnd_apply (f : stabilizerSubmonoid M x) :\n    (stabilizerIsoEnd M x) f = f :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.stabilizerIsoEnd_symm_apply","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx : X\nf : CategoryTheory.End ⟨Unit.unit, x⟩\n⊢ Eq ((CategoryTheory.ActionCategory.stabilizerIsoEnd M x).symm f) f","decl":"@[simp 1100]\ntheorem stabilizerIsoEnd_symm_apply (f : End _) : (stabilizerIsoEnd M x).symm f = f :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.id_val","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx : CategoryTheory.ActionCategory M X\n⊢ Eq (↑(CategoryTheory.CategoryStruct.id x)) 1","decl":"@[simp]\nprotected theorem id_val (x : ActionCategory M X) : Subtype.val (𝟙 x) = 1 :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.comp_val","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝¹ : Monoid M\nX : Type u\ninst✝ : MulAction M X\nx y z : CategoryTheory.ActionCategory M X\nf : Quiver.Hom x y\ng : Quiver.Hom y z\n⊢ Eq (↑(CategoryTheory.CategoryStruct.comp f g)) (HMul.hMul ↑g ↑f)","decl":"@[simp]\nprotected theorem comp_val {x y z : ActionCategory M X} (f : x ⟶ y) (g : y ⟶ z) :\n    (f ≫ g).val = g.val * f.val :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.instIsConnectedOfIsPretransitiveOfNonempty","module":"Mathlib.CategoryTheory.Action","initialProofState":"M : Type u_1\ninst✝³ : Monoid M\nX : Type u\ninst✝² : MulAction M X\ninst✝¹ : MulAction.IsPretransitive M X\ninst✝ : Nonempty X\n⊢ CategoryTheory.IsConnected (CategoryTheory.ActionCategory M X)","decl":"instance [IsPretransitive M X] [Nonempty X] : IsConnected (ActionCategory M X) :=\n  zigzag_isConnected fun x y =>\n    Relation.ReflTransGen.single <|\n      Or.inl <| nonempty_subtype.mpr (show _ from exists_smul_eq M x.back y.back)\n\n"}
{"name":"CategoryTheory.ActionCategory.homOfPair.val","module":"Mathlib.CategoryTheory.Action","initialProofState":"X : Type u\nG : Type u_2\ninst✝¹ : Group G\ninst✝ : MulAction G X\nt : X\ng : G\n⊢ Eq (↑(CategoryTheory.ActionCategory.homOfPair t g)) g","decl":"@[simp]\ntheorem homOfPair.val (t : X) (g : G) : (homOfPair t g).val = g :=\n  rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.cases'","module":"Mathlib.CategoryTheory.Action","initialProofState":"X : Type u\nG : Type u_2\ninst✝¹ : Group G\ninst✝ : MulAction G X\na' b' : CategoryTheory.ActionCategory G X\nf : Quiver.Hom a' b'\n⊢ Exists fun a => Exists fun b => Exists fun g => Exists fun ha => Exists fun hb => Exists fun hg => Eq f (CategoryTheory.CategoryStruct.comp (CategoryTheory.eqToHom ⋯) (CategoryTheory.CategoryStruct.comp (CategoryTheory.ActionCategory.homOfPair b g) (CategoryTheory.eqToHom ⋯)))","decl":"lemma cases' ⦃a' b' : ActionCategory G X⦄ (f : a' ⟶ b') :\n    ∃ (a b : X) (g : G) (ha : a' = a) (hb : b' = b) (hg : a = g⁻¹ • b),\n      f = eqToHom (by rw [ha, hg]) ≫ homOfPair b g ≫ eqToHom (by rw [hb]) := by\n  revert a' b' f\n  exact ActionCategory.cases (fun t g => ⟨g⁻¹ • t, t, g, rfl, rfl, rfl, by simp⟩)\n\n"}
{"name":"CategoryTheory.ActionCategory.curry_apply_right","module":"Mathlib.CategoryTheory.Action","initialProofState":"X : Type u\nG : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G X\nH : Type u_3\ninst✝ : Group H\nF : CategoryTheory.Functor (CategoryTheory.ActionCategory G X) (CategoryTheory.SingleObj H)\ng : G\n⊢ Eq ((CategoryTheory.ActionCategory.curry F) g).right g","decl":"/-- Given `G` acting on `X`, a functor from the corresponding action groupoid to a group `H`\n    can be curried to a group homomorphism `G →* (X → H) ⋊ G`. -/\n@[simps]\ndef curry (F : ActionCategory G X ⥤ SingleObj H) : G →* (X → H) ⋊[mulAutArrow] G :=\n  have F_map_eq : ∀ {a b} {f : a ⟶ b}, F.map f = (F.map (homOfPair b.back f.val) : H) := by\n    apply ActionCategory.cases\n    intros\n    rfl\n  { toFun := fun g => ⟨fun b => F.map (homOfPair b g), g⟩\n    map_one' := by\n      dsimp\n      ext1\n      · ext b\n        exact F_map_eq.symm.trans (F.map_id b)\n      rfl\n    map_mul' := by\n      intro g h\n      ext b\n      · exact F_map_eq.symm.trans (F.map_comp (homOfPair (g⁻¹ • b) h) (homOfPair b g))\n      rfl }\n\n"}
{"name":"CategoryTheory.ActionCategory.curry_apply_left","module":"Mathlib.CategoryTheory.Action","initialProofState":"X : Type u\nG : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G X\nH : Type u_3\ninst✝ : Group H\nF : CategoryTheory.Functor (CategoryTheory.ActionCategory G X) (CategoryTheory.SingleObj H)\ng : G\nb : X\n⊢ Eq (((CategoryTheory.ActionCategory.curry F) g).left b) (F.map (CategoryTheory.ActionCategory.homOfPair b g))","decl":"/-- Given `G` acting on `X`, a functor from the corresponding action groupoid to a group `H`\n    can be curried to a group homomorphism `G →* (X → H) ⋊ G`. -/\n@[simps]\ndef curry (F : ActionCategory G X ⥤ SingleObj H) : G →* (X → H) ⋊[mulAutArrow] G :=\n  have F_map_eq : ∀ {a b} {f : a ⟶ b}, F.map f = (F.map (homOfPair b.back f.val) : H) := by\n    apply ActionCategory.cases\n    intros\n    rfl\n  { toFun := fun g => ⟨fun b => F.map (homOfPair b g), g⟩\n    map_one' := by\n      dsimp\n      ext1\n      · ext b\n        exact F_map_eq.symm.trans (F.map_id b)\n      rfl\n    map_mul' := by\n      intro g h\n      ext b\n      · exact F_map_eq.symm.trans (F.map_comp (homOfPair (g⁻¹ • b) h) (homOfPair b g))\n      rfl }\n\n"}
{"name":"CategoryTheory.ActionCategory.uncurry_map","module":"Mathlib.CategoryTheory.Action","initialProofState":"X : Type u\nG : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G X\nH : Type u_3\ninst✝ : Group H\nF : MonoidHom G (SemidirectProduct (X → H) G mulAutArrow)\nsane : ∀ (g : G), Eq (F g).right g\nx✝ b : CategoryTheory.ActionCategory G X\nf : Quiver.Hom x✝ b\n⊢ Eq ((CategoryTheory.ActionCategory.uncurry F sane).map f) ((F ↑f).left b.back)","decl":"/-- Given `G` acting on `X`, a group homomorphism `φ : G →* (X → H) ⋊ G` can be uncurried to\n    a functor from the action groupoid to `H`, provided that `φ g = (_, g)` for all `g`. -/\n@[simps]\ndef uncurry (F : G →* (X → H) ⋊[mulAutArrow] G) (sane : ∀ g, (F g).right = g) :\n    ActionCategory G X ⥤ SingleObj H where\n  obj _ := ()\n  map {_ b} f := (F f.val).left b.back\n  map_id x := by\n    dsimp\n    rw [F.map_one]\n    rfl\n  map_comp f g := by\n    -- Porting note: I was not able to use `ActionCategory.cases` here,\n    -- but `ActionCategory.cases'` seems as good; the original proof was:\n    -- intro x y z f g; revert y z g\n    -- refine' action_category.cases _\n    -- simp [single_obj.comp_as_mul, sane]\n    obtain ⟨_, z, γ₁, rfl, rfl, rfl, rfl⟩ := ActionCategory.cases' g\n    obtain ⟨_, y, γ₂, rfl, hy, rfl, rfl⟩ := ActionCategory.cases' f\n    obtain rfl : y = γ₁⁻¹ • z := congr_arg Sigma.snd hy.symm\n    simp [sane]\n    rfl\n\n"}
{"name":"CategoryTheory.ActionCategory.uncurry_obj","module":"Mathlib.CategoryTheory.Action","initialProofState":"X : Type u\nG : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G X\nH : Type u_3\ninst✝ : Group H\nF : MonoidHom G (SemidirectProduct (X → H) G mulAutArrow)\nsane : ∀ (g : G), Eq (F g).right g\nx✝ : CategoryTheory.ActionCategory G X\n⊢ Eq ((CategoryTheory.ActionCategory.uncurry F sane).obj x✝) Unit.unit","decl":"/-- Given `G` acting on `X`, a group homomorphism `φ : G →* (X → H) ⋊ G` can be uncurried to\n    a functor from the action groupoid to `H`, provided that `φ g = (_, g)` for all `g`. -/\n@[simps]\ndef uncurry (F : G →* (X → H) ⋊[mulAutArrow] G) (sane : ∀ g, (F g).right = g) :\n    ActionCategory G X ⥤ SingleObj H where\n  obj _ := ()\n  map {_ b} f := (F f.val).left b.back\n  map_id x := by\n    dsimp\n    rw [F.map_one]\n    rfl\n  map_comp f g := by\n    -- Porting note: I was not able to use `ActionCategory.cases` here,\n    -- but `ActionCategory.cases'` seems as good; the original proof was:\n    -- intro x y z f g; revert y z g\n    -- refine' action_category.cases _\n    -- simp [single_obj.comp_as_mul, sane]\n    obtain ⟨_, z, γ₁, rfl, rfl, rfl, rfl⟩ := ActionCategory.cases' g\n    obtain ⟨_, y, γ₂, rfl, hy, rfl, rfl⟩ := ActionCategory.cases' f\n    obtain rfl : y = γ₁⁻¹ • z := congr_arg Sigma.snd hy.symm\n    simp [sane]\n    rfl\n\n"}
