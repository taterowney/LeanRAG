{"name":"CocompactMap.cocompact_tendsto'","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nself : CocompactMap α β\n⊢ Filter.Tendsto self.toFun (Filter.cocompact α) (Filter.cocompact β)","decl":"/-- A *cocompact continuous map* is a continuous function between topological spaces which\ntends to the cocompact filter along the cocompact filter. Functions for which preimages of compact\nsets are compact always satisfy this property, and the converse holds for cocompact continuous maps\nwhen the codomain is Hausdorff (see `CocompactMap.tendsto_of_forall_preimage` and\n`CocompactMap.isCompact_preimage`).\n\nCocompact maps thus generalise proper maps, with which they correspond when the codomain is\nHausdorff. -/\nstructure CocompactMap (α : Type u) (β : Type v) [TopologicalSpace α] [TopologicalSpace β] extends\n  ContinuousMap α β : Type max u v where\n  /-- The cocompact filter on `α` tends to the cocompact filter on `β` under the function -/\n  cocompact_tendsto' : Tendsto toFun (cocompact α) (cocompact β)\n\n"}
{"name":"CocompactMap.mk.sizeOf_spec","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u\nβ : Type v\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoContinuousMap : ContinuousMap α β\ncocompact_tendsto' : Filter.Tendsto toContinuousMap.toFun (Filter.cocompact α) (Filter.cocompact β)\n⊢ Eq (SizeOf.sizeOf { toContinuousMap := toContinuousMap, cocompact_tendsto' := cocompact_tendsto' }) (HAdd.hAdd 1 (SizeOf.sizeOf toContinuousMap))","decl":"/-- A *cocompact continuous map* is a continuous function between topological spaces which\ntends to the cocompact filter along the cocompact filter. Functions for which preimages of compact\nsets are compact always satisfy this property, and the converse holds for cocompact continuous maps\nwhen the codomain is Hausdorff (see `CocompactMap.tendsto_of_forall_preimage` and\n`CocompactMap.isCompact_preimage`).\n\nCocompact maps thus generalise proper maps, with which they correspond when the codomain is\nHausdorff. -/\nstructure CocompactMap (α : Type u) (β : Type v) [TopologicalSpace α] [TopologicalSpace β] extends\n  ContinuousMap α β : Type max u v where\n  /-- The cocompact filter on `α` tends to the cocompact filter on `β` under the function -/\n  cocompact_tendsto' : Tendsto toFun (cocompact α) (cocompact β)\n\n"}
{"name":"CocompactMap.mk.inj","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ntoContinuousMap✝ : ContinuousMap α β\ncocompact_tendsto'✝ : Filter.Tendsto toContinuousMap✝.toFun (Filter.cocompact α) (Filter.cocompact β)\ntoContinuousMap : ContinuousMap α β\ncocompact_tendsto' : Filter.Tendsto toContinuousMap.toFun (Filter.cocompact α) (Filter.cocompact β)\nx✝ : Eq { toContinuousMap := toContinuousMap✝, cocompact_tendsto' := cocompact_tendsto'✝ } { toContinuousMap := toContinuousMap, cocompact_tendsto' := cocompact_tendsto' }\n⊢ Eq toContinuousMap✝ toContinuousMap","decl":"/-- A *cocompact continuous map* is a continuous function between topological spaces which\ntends to the cocompact filter along the cocompact filter. Functions for which preimages of compact\nsets are compact always satisfy this property, and the converse holds for cocompact continuous maps\nwhen the codomain is Hausdorff (see `CocompactMap.tendsto_of_forall_preimage` and\n`CocompactMap.isCompact_preimage`).\n\nCocompact maps thus generalise proper maps, with which they correspond when the codomain is\nHausdorff. -/\nstructure CocompactMap (α : Type u) (β : Type v) [TopologicalSpace α] [TopologicalSpace β] extends\n  ContinuousMap α β : Type max u v where\n  /-- The cocompact filter on `α` tends to the cocompact filter on `β` under the function -/\n  cocompact_tendsto' : Tendsto toFun (cocompact α) (cocompact β)\n\n"}
{"name":"CocompactMap.mk.injEq","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u\nβ : Type v\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\ntoContinuousMap✝ : ContinuousMap α β\ncocompact_tendsto'✝ : Filter.Tendsto toContinuousMap✝.toFun (Filter.cocompact α) (Filter.cocompact β)\ntoContinuousMap : ContinuousMap α β\ncocompact_tendsto' : Filter.Tendsto toContinuousMap.toFun (Filter.cocompact α) (Filter.cocompact β)\n⊢ Eq (Eq { toContinuousMap := toContinuousMap✝, cocompact_tendsto' := cocompact_tendsto'✝ } { toContinuousMap := toContinuousMap, cocompact_tendsto' := cocompact_tendsto' }) (Eq toContinuousMap✝ toContinuousMap)","decl":"/-- A *cocompact continuous map* is a continuous function between topological spaces which\ntends to the cocompact filter along the cocompact filter. Functions for which preimages of compact\nsets are compact always satisfy this property, and the converse holds for cocompact continuous maps\nwhen the codomain is Hausdorff (see `CocompactMap.tendsto_of_forall_preimage` and\n`CocompactMap.isCompact_preimage`).\n\nCocompact maps thus generalise proper maps, with which they correspond when the codomain is\nHausdorff. -/\nstructure CocompactMap (α : Type u) (β : Type v) [TopologicalSpace α] [TopologicalSpace β] extends\n  ContinuousMap α β : Type max u v where\n  /-- The cocompact filter on `α` tends to the cocompact filter on `β` under the function -/\n  cocompact_tendsto' : Tendsto toFun (cocompact α) (cocompact β)\n\n"}
{"name":"CocompactMapClass.toContinuousMapClass","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"F : Type u_1\nα : outParam (Type u_2)\nβ : outParam (Type u_3)\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : CocompactMapClass F α β\n⊢ ContinuousMapClass F α β","decl":"/-- `CocompactMapClass F α β` states that `F` is a type of cocompact continuous maps.\n\nYou should also extend this typeclass when you extend `CocompactMap`. -/\nclass CocompactMapClass (F : Type*) (α β : outParam Type*) [TopologicalSpace α]\n  [TopologicalSpace β] [FunLike F α β] extends ContinuousMapClass F α β : Prop where\n  /-- The cocompact filter on `α` tends to the cocompact filter on `β` under the function -/\n  cocompact_tendsto (f : F) : Tendsto f (cocompact α) (cocompact β)\n\n"}
{"name":"CocompactMapClass.cocompact_tendsto","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"F : Type u_1\nα : outParam (Type u_2)\nβ : outParam (Type u_3)\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : FunLike F α β\nself : CocompactMapClass F α β\nf : F\n⊢ Filter.Tendsto (⇑f) (Filter.cocompact α) (Filter.cocompact β)","decl":"/-- `CocompactMapClass F α β` states that `F` is a type of cocompact continuous maps.\n\nYou should also extend this typeclass when you extend `CocompactMap`. -/\nclass CocompactMapClass (F : Type*) (α β : outParam Type*) [TopologicalSpace α]\n  [TopologicalSpace β] [FunLike F α β] extends ContinuousMapClass F α β : Prop where\n  /-- The cocompact filter on `α` tends to the cocompact filter on `β` under the function -/\n  cocompact_tendsto (f : F) : Tendsto f (cocompact α) (cocompact β)\n\n"}
{"name":"CocompactMap.instCocompactMapClass","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\n⊢ CocompactMapClass (CocompactMap α β) α β","decl":"instance : CocompactMapClass (CocompactMap α β) α β where\n  map_continuous f := f.continuous_toFun\n  cocompact_tendsto f := f.cocompact_tendsto'\n\n"}
{"name":"CocompactMap.coe_toContinuousMap","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : CocompactMap α β\n⊢ Eq ⇑f.toContinuousMap ⇑f","decl":"@[simp]\ntheorem coe_toContinuousMap {f : CocompactMap α β} : (f.toContinuousMap : α → β) = f :=\n  rfl\n\n"}
{"name":"CocompactMap.ext_iff","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf g : CocompactMap α β\n⊢ Iff (Eq f g) (∀ (x : α), Eq (f x) (g x))","decl":"@[ext]\ntheorem ext {f g : CocompactMap α β} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"CocompactMap.ext","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf g : CocompactMap α β\nh : ∀ (x : α), Eq (f x) (g x)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : CocompactMap α β} (h : ∀ x, f x = g x) : f = g :=\n  DFunLike.ext _ _ h\n\n"}
{"name":"CocompactMap.coe_copy","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : CocompactMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : CocompactMap α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"CocompactMap.copy_eq","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : CocompactMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : CocompactMap α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"CocompactMap.coe_mk","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : ContinuousMap α β\nh : Filter.Tendsto (⇑f) (Filter.cocompact α) (Filter.cocompact β)\n⊢ Eq ⇑{ toContinuousMap := f, cocompact_tendsto' := h } ⇑f","decl":"@[simp]\ntheorem coe_mk (f : C(α, β)) (h : Tendsto f (cocompact α) (cocompact β)) :\n    ⇑(⟨f, h⟩ : CocompactMap α β) = f :=\n  rfl\n\n"}
{"name":"CocompactMap.coe_id","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\n⊢ Eq (⇑(CocompactMap.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(CocompactMap.id α) = id :=\n  rfl\n\n"}
{"name":"CocompactMap.coe_comp","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : CocompactMap β γ\ng : CocompactMap α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : CocompactMap β γ) (g : CocompactMap α β) : ⇑(comp f g) = f ∘ g :=\n  rfl\n\n"}
{"name":"CocompactMap.comp_apply","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : TopologicalSpace γ\nf : CocompactMap β γ\ng : CocompactMap α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : CocompactMap β γ) (g : CocompactMap α β) (a : α) : comp f g a = f (g a) :=\n  rfl\n\n"}
{"name":"CocompactMap.comp_assoc","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\ninst✝³ : TopologicalSpace α\ninst✝² : TopologicalSpace β\ninst✝¹ : TopologicalSpace γ\ninst✝ : TopologicalSpace δ\nf : CocompactMap γ δ\ng : CocompactMap β γ\nh : CocompactMap α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : CocompactMap γ δ) (g : CocompactMap β γ) (h : CocompactMap α β) :\n    (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"CocompactMap.id_comp","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : CocompactMap α β\n⊢ Eq ((CocompactMap.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : CocompactMap α β) : (CocompactMap.id _).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CocompactMap.comp_id","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : CocompactMap α β\n⊢ Eq (f.comp (CocompactMap.id α)) f","decl":"@[simp]\ntheorem comp_id (f : CocompactMap α β) : f.comp (CocompactMap.id _) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"CocompactMap.tendsto_of_forall_preimage","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : α → β\nh : ∀ (s : Set β), IsCompact s → IsCompact (Set.preimage f s)\n⊢ Filter.Tendsto f (Filter.cocompact α) (Filter.cocompact β)","decl":"theorem tendsto_of_forall_preimage {f : α → β} (h : ∀ s, IsCompact s → IsCompact (f ⁻¹' s)) :\n    Tendsto f (cocompact α) (cocompact β) := fun s hs =>\n  match mem_cocompact.mp hs with\n  | ⟨t, ht, hts⟩ =>\n    mem_map.mpr (mem_cocompact.mpr ⟨f ⁻¹' t, h t ht, by simpa using preimage_mono hts⟩)\n\n"}
{"name":"CocompactMap.isCompact_preimage_of_isClosed","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : CocompactMap α β\ns : Set β\nhs : IsCompact s\nh's : IsClosed s\n⊢ IsCompact (Set.preimage (⇑f) s)","decl":"/-- Preimages of compact closed sets are compact under a cocompact continuous map. -/\ntheorem isCompact_preimage_of_isClosed (f : CocompactMap α β)\n    ⦃s : Set β⦄ (hs : IsCompact s) (h's : IsClosed s) :\n    IsCompact (f ⁻¹' s) := by\n  obtain ⟨t, ht, hts⟩ :=\n    mem_cocompact'.mp\n      (by\n        simpa only [preimage_image_preimage, preimage_compl] using\n          mem_map.mp\n            (cocompact_tendsto f <|\n              mem_cocompact.mpr ⟨s, hs, compl_subset_compl.mpr (image_preimage_subset f _)⟩))\n  exact\n    ht.of_isClosed_subset (h's.preimage <| map_continuous f) (by simpa using hts)\n\n"}
{"name":"CocompactMap.isCompact_preimage","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝² : TopologicalSpace α\ninst✝¹ : TopologicalSpace β\ninst✝ : T2Space β\nf : CocompactMap α β\ns : Set β\nhs : IsCompact s\n⊢ IsCompact (Set.preimage (⇑f) s)","decl":"/-- If the codomain is Hausdorff, preimages of compact sets are compact under a cocompact\ncontinuous map. -/\ntheorem isCompact_preimage [T2Space β] (f : CocompactMap α β) ⦃s : Set β⦄ (hs : IsCompact s) :\n    IsCompact (f ⁻¹' s) :=\n  isCompact_preimage_of_isClosed f hs hs.isClosed\n\n"}
{"name":"Homeomorph.toCocompactMap_toFun","module":"Mathlib.Topology.ContinuousMap.CocompactMap","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : TopologicalSpace α\ninst✝ : TopologicalSpace β\nf : Homeomorph α β\na : α\n⊢ Eq (f.toCocompactMap a) (f a)","decl":"/-- A homeomorphism is a cocompact map. -/\n@[simps]\ndef Homeomorph.toCocompactMap {α β : Type*} [TopologicalSpace α] [TopologicalSpace β]\n    (f : α ≃ₜ β) : CocompactMap α β where\n  toFun := f\n  continuous_toFun := f.continuous\n  cocompact_tendsto' := by\n    refine CocompactMap.tendsto_of_forall_preimage fun K hK => ?_\n    erw [K.preimage_equiv_eq_image_symm]\n    exact hK.image f.symm.continuous\n"}
