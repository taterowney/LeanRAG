{"name":"LinearMap.BilinForm.add_left","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nx y z : M\n⊢ Eq ((B (HAdd.hAdd x y)) z) (HAdd.hAdd ((B x) z) ((B y) z))","decl":"theorem add_left (x y z : M) : B (x + y) z = B x z + B y z := map_add₂ _ _ _ _\n\n"}
{"name":"LinearMap.BilinForm.smul_left","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\na : R\nx y : M\n⊢ Eq ((B (HSMul.hSMul a x)) y) (HMul.hMul a ((B x) y))","decl":"theorem smul_left (a : R) (x y : M) : B (a • x) y = a * B x y := map_smul₂ _ _ _ _\n\n"}
{"name":"LinearMap.BilinForm.add_right","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nx y z : M\n⊢ Eq ((B x) (HAdd.hAdd y z)) (HAdd.hAdd ((B x) y) ((B x) z))","decl":"theorem add_right (x y z : M) : B x (y + z) = B x y + B x z := map_add _ _ _\n\n"}
{"name":"LinearMap.BilinForm.smul_right","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\na : R\nx y : M\n⊢ Eq ((B x) (HSMul.hSMul a y)) (HMul.hMul a ((B x) y))","decl":"theorem smul_right (a : R) (x y : M) : B x (a • y) = a * B x y := map_smul _ _ _\n\n"}
{"name":"LinearMap.BilinForm.zero_left","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nx : M\n⊢ Eq ((B 0) x) 0","decl":"theorem zero_left (x : M) : B 0 x = 0 := map_zero₂ _ _\n\n"}
{"name":"LinearMap.BilinForm.zero_right","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nx : M\n⊢ Eq ((B x) 0) 0","decl":"theorem zero_right (x : M) : B x 0 = 0 := map_zero _\n\n"}
{"name":"LinearMap.BilinForm.neg_left","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R₁ : Type u_4\nM₁ : Type u_5\ninst✝² : CommRing R₁\ninst✝¹ : AddCommGroup M₁\ninst✝ : Module R₁ M₁\nB₁ : LinearMap.BilinForm R₁ M₁\nx y : M₁\n⊢ Eq ((B₁ (Neg.neg x)) y) (Neg.neg ((B₁ x) y))","decl":"theorem neg_left (x y : M₁) : B₁ (-x) y = -B₁ x y := map_neg₂ _ _ _\n\n"}
{"name":"LinearMap.BilinForm.neg_right","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R₁ : Type u_4\nM₁ : Type u_5\ninst✝² : CommRing R₁\ninst✝¹ : AddCommGroup M₁\ninst✝ : Module R₁ M₁\nB₁ : LinearMap.BilinForm R₁ M₁\nx y : M₁\n⊢ Eq ((B₁ x) (Neg.neg y)) (Neg.neg ((B₁ x) y))","decl":"theorem neg_right (x y : M₁) : B₁ x (-y) = -B₁ x y := map_neg _ _\n\n"}
{"name":"LinearMap.BilinForm.sub_left","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R₁ : Type u_4\nM₁ : Type u_5\ninst✝² : CommRing R₁\ninst✝¹ : AddCommGroup M₁\ninst✝ : Module R₁ M₁\nB₁ : LinearMap.BilinForm R₁ M₁\nx y z : M₁\n⊢ Eq ((B₁ (HSub.hSub x y)) z) (HSub.hSub ((B₁ x) z) ((B₁ y) z))","decl":"theorem sub_left (x y z : M₁) : B₁ (x - y) z = B₁ x z - B₁ y z := map_sub₂ _ _ _ _\n\n"}
{"name":"LinearMap.BilinForm.sub_right","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R₁ : Type u_4\nM₁ : Type u_5\ninst✝² : CommRing R₁\ninst✝¹ : AddCommGroup M₁\ninst✝ : Module R₁ M₁\nB₁ : LinearMap.BilinForm R₁ M₁\nx y z : M₁\n⊢ Eq ((B₁ x) (HSub.hSub y z)) (HSub.hSub ((B₁ x) y) ((B₁ x) z))","decl":"theorem sub_right (x y z : M₁) : B₁ x (y - z) = B₁ x y - B₁ x z := map_sub _ _ _\n\n"}
{"name":"LinearMap.BilinForm.smul_left_of_tower","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nS : Type u_3\ninst✝³ : CommSemiring S\ninst✝² : Algebra S R\ninst✝¹ : Module S M\ninst✝ : IsScalarTower S R M\nB : LinearMap.BilinForm R M\nr : S\nx y : M\n⊢ Eq ((B (HSMul.hSMul r x)) y) (HSMul.hSMul r ((B x) y))","decl":"lemma smul_left_of_tower (r : S) (x y : M) : B (r • x) y = r • B x y := by\n  rw [← IsScalarTower.algebraMap_smul R r, smul_left, Algebra.smul_def]\n\n"}
{"name":"LinearMap.BilinForm.smul_right_of_tower","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝⁶ : CommSemiring R\ninst✝⁵ : AddCommMonoid M\ninst✝⁴ : Module R M\nS : Type u_3\ninst✝³ : CommSemiring S\ninst✝² : Algebra S R\ninst✝¹ : Module S M\ninst✝ : IsScalarTower S R M\nB : LinearMap.BilinForm R M\nr : S\nx y : M\n⊢ Eq ((B x) (HSMul.hSMul r y)) (HSMul.hSMul r ((B x) y))","decl":"lemma smul_right_of_tower (r : S) (x y : M) : B x (r • y) = r • B x y := by\n  rw [← IsScalarTower.algebraMap_smul R r, smul_right, Algebra.smul_def]\n\n"}
{"name":"LinearMap.BilinForm.coe_injective","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Function.Injective fun B x y => (B x) y","decl":"theorem coe_injective : Function.Injective ((fun B x y => B x y) : BilinForm R M → M → M → R) :=\n  fun B D h => by\n    ext x y\n    apply congrFun₂ h\n\n"}
{"name":"LinearMap.BilinForm.ext","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB D : LinearMap.BilinForm R M\nH : ∀ (x y : M), Eq ((B x) y) ((D x) y)\n⊢ Eq B D","decl":"@[ext]\ntheorem ext (H : ∀ x y : M, B x y = D x y) : B = D := ext₂ H\n\n"}
{"name":"LinearMap.BilinForm.ext_iff","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB D : LinearMap.BilinForm R M\n⊢ Iff (Eq B D) (∀ (x y : M), Eq ((B x) y) ((D x) y))","decl":"@[ext]\ntheorem ext (H : ∀ x y : M, B x y = D x y) : B = D := ext₂ H\n\n"}
{"name":"LinearMap.BilinForm.congr_fun","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB D : LinearMap.BilinForm R M\nh : Eq B D\nx y : M\n⊢ Eq ((B x) y) ((D x) y)","decl":"theorem congr_fun (h : B = D) (x y : M) : B x y = D x y := congr_fun₂ h _ _\n\n"}
{"name":"LinearMap.BilinForm.zero_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nx y : M\n⊢ Eq ((0 x) y) 0","decl":"@[simp]\ntheorem zero_apply (x y : M) : (0 : BilinForm R M) x y = 0 :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.add_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB D : LinearMap.BilinForm R M\nx y : M\n⊢ Eq (((HAdd.hAdd B D) x) y) (HAdd.hAdd ((B x) y) ((D x) y))","decl":"@[simp]\ntheorem add_apply (x y : M) : (B + D) x y = B x y + D x y :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.neg_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R₁ : Type u_4\nM₁ : Type u_5\ninst✝² : CommRing R₁\ninst✝¹ : AddCommGroup M₁\ninst✝ : Module R₁ M₁\nB₁ : LinearMap.BilinForm R₁ M₁\nx y : M₁\n⊢ Eq (((Neg.neg B₁) x) y) (Neg.neg ((B₁ x) y))","decl":"@[simp]\ntheorem neg_apply (x y : M₁) : (-B₁) x y = -B₁ x y :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.sub_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R₁ : Type u_4\nM₁ : Type u_5\ninst✝² : CommRing R₁\ninst✝¹ : AddCommGroup M₁\ninst✝ : Module R₁ M₁\nB₁ D₁ : LinearMap.BilinForm R₁ M₁\nx y : M₁\n⊢ Eq (((HSub.hSub B₁ D₁) x) y) (HSub.hSub ((B₁ x) y) ((D₁ x) y))","decl":"@[simp]\ntheorem sub_apply (x y : M₁) : (B₁ - D₁) x y = B₁ x y - D₁ x y :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.flip_flip_aux","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nA : LinearMap.BilinForm R M\n⊢ Eq (LinearMap.BilinForm.flipHomAux (LinearMap.BilinForm.flipHomAux A)) A","decl":"theorem flip_flip_aux (A : BilinForm R M) :\n    flipHomAux (M := M) (flipHomAux (M := M) A) = A := by\n  ext A\n  simp [flipHomAux]\n\n"}
{"name":"LinearMap.BilinForm.flip_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nA : LinearMap.BilinForm R M\nx y : M\n⊢ Eq (((LinearMap.BilinForm.flipHom A) x) y) ((A y) x)","decl":"@[simp]\ntheorem flip_apply (A : BilinForm R M) (x y : M) : flipHom A x y = A y x :=\n  rfl\n\n"}
{"name":"LinearMap.BilinForm.flip_flip","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (LinearMap.BilinForm.flipHom.trans LinearMap.BilinForm.flipHom) (LinearEquiv.refl R (LinearMap.BilinForm R M))","decl":"theorem flip_flip :\n    flipHom.trans flipHom = LinearEquiv.refl R (BilinForm R M) := by\n  ext A\n  simp\n\n"}
{"name":"LinearMap.BilinForm.restrict_apply","module":"Mathlib.LinearAlgebra.BilinearForm.Basic","initialProofState":"R : Type u_1\nM : Type u_2\ninst✝² : CommSemiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\nB : LinearMap.BilinForm R M\nW : Submodule R M\nm : Subtype fun x => Membership.mem W x\n⊢ Eq ((B.restrict W) m) ((B ↑m).domRestrict W)","decl":"/-- The restriction of a bilinear form on a submodule. -/\n@[simps! apply]\ndef restrict (B : BilinForm R M) (W : Submodule R M) : BilinForm R W :=\n  LinearMap.domRestrict₁₂ B W W\n\n"}
