{"name":"QuotSMulTop.map_apply_mk","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\nx : M\n⊢ Eq (((QuotSMulTop.map r) f) (Submodule.Quotient.mk x)) (Submodule.Quotient.mk (f x))","decl":"@[simp]\nlemma map_apply_mk (f : M →ₗ[R] M') (x : M) :\n    map r f (Submodule.Quotient.mk x) =\n      (Submodule.Quotient.mk (f x) : QuotSMulTop r M') := rfl\n\n-- weirdly expensive to typecheck the type here?\n"}
{"name":"QuotSMulTop.map_comp_mkQ","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\n⊢ Eq (((QuotSMulTop.map r) f).comp (HSMul.hSMul r Top.top).mkQ) ((HSMul.hSMul r Top.top).mkQ.comp f)","decl":"lemma map_comp_mkQ (f : M →ₗ[R] M') :\n    map r f ∘ₗ mkQ (r • ⊤) = mkQ (r • ⊤) ∘ₗ f := by\n  ext; rfl\n\n"}
{"name":"QuotSMulTop.map_id","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝² : CommRing R\nr : R\nM : Type u_1\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\n⊢ Eq ((QuotSMulTop.map r) LinearMap.id) LinearMap.id","decl":"@[simp]\nlemma map_id : map r (LinearMap.id : M →ₗ[R] M) = .id :=\n  DFunLike.ext _ _ <| (mkQ_surjective _).forall.mpr fun _ => rfl\n\n"}
{"name":"QuotSMulTop.map_comp","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁶ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\nM'' : Type u_4\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : Module R M\ninst✝³ : AddCommGroup M'\ninst✝² : Module R M'\ninst✝¹ : AddCommGroup M''\ninst✝ : Module R M''\ng : LinearMap (RingHom.id R) M' M''\nf : LinearMap (RingHom.id R) M M'\n⊢ Eq ((QuotSMulTop.map r) (g.comp f)) (((QuotSMulTop.map r) g).comp ((QuotSMulTop.map r) f))","decl":"@[simp]\nlemma map_comp (g : M' →ₗ[R] M'') (f : M →ₗ[R] M') :\n    map r (g ∘ₗ f) = map r g ∘ₗ map r f :=\n  DFunLike.ext _ _ <| (mkQ_surjective _).forall.mpr fun _ => rfl\n\n"}
{"name":"QuotSMulTop.equivQuotTensor_naturality_mk","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\nx : M\n⊢ Eq ((QuotSMulTop.equivQuotTensor r M') (((QuotSMulTop.map r) f) (Submodule.Quotient.mk x))) ((LinearMap.lTensor (HasQuotient.Quotient R (Ideal.span (Singleton.singleton r))) f) ((QuotSMulTop.equivQuotTensor r M) (Submodule.Quotient.mk x)))","decl":"lemma equivQuotTensor_naturality_mk (f : M →ₗ[R] M') (x : M) :\n    equivQuotTensor r M' (map r f (Submodule.Quotient.mk x)) =\n      f.lTensor (R ⧸ Ideal.span {r})\n        (equivQuotTensor r M (Submodule.Quotient.mk x)) :=\n  (LinearMap.lTensor_tmul (R ⧸ Ideal.span {r}) f 1 x).symm\n\n"}
{"name":"QuotSMulTop.equivQuotTensor_naturality","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\n⊢ Eq ((↑(QuotSMulTop.equivQuotTensor r M')).comp ((QuotSMulTop.map r) f)) ((LinearMap.lTensor (HasQuotient.Quotient R (Ideal.span (Singleton.singleton r))) f).comp ↑(QuotSMulTop.equivQuotTensor r M))","decl":"lemma equivQuotTensor_naturality (f : M →ₗ[R] M') :\n    equivQuotTensor r M' ∘ₗ map r f =\n      f.lTensor (R ⧸ Ideal.span {r}) ∘ₗ equivQuotTensor r M :=\n  quot_hom_ext _ _ _ (equivQuotTensor_naturality_mk r f)\n\n"}
{"name":"QuotSMulTop.equivTensorQuot_naturality_mk","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\nx : M\n⊢ Eq ((QuotSMulTop.equivTensorQuot r M') (((QuotSMulTop.map r) f) (Submodule.Quotient.mk x))) ((LinearMap.rTensor (HasQuotient.Quotient R (Ideal.span (Singleton.singleton r))) f) ((QuotSMulTop.equivTensorQuot r M) (Submodule.Quotient.mk x)))","decl":"lemma equivTensorQuot_naturality_mk (f : M →ₗ[R] M') (x : M) :\n    equivTensorQuot r M' (map r f (Submodule.Quotient.mk x)) =\n      f.rTensor (R ⧸ Ideal.span {r})\n        (equivTensorQuot r M (Submodule.Quotient.mk x)) :=\n  (LinearMap.rTensor_tmul (R ⧸ Ideal.span {r}) f 1 x).symm\n\n"}
{"name":"QuotSMulTop.equivTensorQuot_naturality","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\n⊢ Eq ((↑(QuotSMulTop.equivTensorQuot r M')).comp ((QuotSMulTop.map r) f)) ((LinearMap.rTensor (HasQuotient.Quotient R (Ideal.span (Singleton.singleton r))) f).comp ↑(QuotSMulTop.equivTensorQuot r M))","decl":"lemma equivTensorQuot_naturality (f : M →ₗ[R] M') :\n    equivTensorQuot r M' ∘ₗ map r f =\n      f.rTensor (R ⧸ Ideal.span {r}) ∘ₗ equivTensorQuot r M :=\n  quot_hom_ext _ _ _ (equivTensorQuot_naturality_mk r f)\n\n"}
{"name":"QuotSMulTop.map_surjective","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁴ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\ninst✝³ : AddCommGroup M\ninst✝² : Module R M\ninst✝¹ : AddCommGroup M'\ninst✝ : Module R M'\nf : LinearMap (RingHom.id R) M M'\nhf : Function.Surjective ⇑f\n⊢ Function.Surjective ⇑((QuotSMulTop.map r) f)","decl":"lemma map_surjective {f : M →ₗ[R] M'} (hf : Surjective f) : Surjective (map r f) :=\n  have H₁ := (mkQ_surjective (r • ⊤ : Submodule R M')).comp hf\n  @Surjective.of_comp _ _ _ _ (mkQ (r • ⊤ : Submodule R M)) <| by\n    rwa [← LinearMap.coe_comp, map_comp_mkQ, LinearMap.coe_comp]\n\n"}
{"name":"QuotSMulTop.map_exact","module":"Mathlib.RingTheory.QuotSMulTop","initialProofState":"R : Type u_2\ninst✝⁶ : CommRing R\nr : R\nM : Type u_1\nM' : Type u_3\nM'' : Type u_4\ninst✝⁵ : AddCommGroup M\ninst✝⁴ : Module R M\ninst✝³ : AddCommGroup M'\ninst✝² : Module R M'\ninst✝¹ : AddCommGroup M''\ninst✝ : Module R M''\nf : LinearMap (RingHom.id R) M M'\ng : LinearMap (RingHom.id R) M' M''\nhfg : Function.Exact ⇑f ⇑g\nhg : Function.Surjective ⇑g\n⊢ Function.Exact ⇑((QuotSMulTop.map r) f) ⇑((QuotSMulTop.map r) g)","decl":"lemma map_exact {f : M →ₗ[R] M'} {g : M' →ₗ[R] M''}\n    (hfg : Exact f g) (hg : Surjective g) : Exact (map r f) (map r g) :=\n  (Exact.iff_of_ladder_linearEquiv (equivQuotTensor_naturality r f).symm\n                             (equivQuotTensor_naturality r g).symm).mp\n    (lTensor_exact (R ⧸ Ideal.span {r}) hfg hg)\n\n"}
