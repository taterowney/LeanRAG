{"name":"Function.fromTypes_zero","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"p : Fin 0 → Type u\nτ : Type u\n⊢ Eq (Function.FromTypes p τ) τ","decl":"theorem fromTypes_zero (p : Fin 0 → Type u) (τ : Type u) : FromTypes p τ = τ := rfl\n\n"}
{"name":"Function.fromTypes_nil","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"τ : Type u\n⊢ Eq (Function.FromTypes Matrix.vecEmpty τ) τ","decl":"theorem fromTypes_nil (τ : Type u) : FromTypes ![] τ = τ := fromTypes_zero ![] τ\n\n-- prefer `fromTypes_cons` when it (syntactically) applies\n"}
{"name":"Function.fromTypes_succ","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\n⊢ Eq (Function.FromTypes p τ) (Matrix.vecHead p → Function.FromTypes (Matrix.vecTail p) τ)","decl":"theorem fromTypes_succ {n} (p : Fin (n + 1) → Type u) (τ : Type u) :\n    FromTypes p τ = (vecHead p → FromTypes (vecTail p) τ) := rfl\n\n"}
{"name":"Function.fromTypes_cons","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\nα : Type u\np : Fin n → Type u\nτ : Type u\n⊢ Eq (Function.FromTypes (Matrix.vecCons α p) τ) (α → Function.FromTypes p τ)","decl":"theorem fromTypes_cons {n} (α : Type u) (p : Fin n → Type u) (τ : Type u) :\n    FromTypes (vecCons α p) τ = (α → FromTypes p τ) := fromTypes_succ _ τ\n\n"}
{"name":"Function.fromTypes_zero_equiv_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"p : Fin 0 → Type u\nτ : Type u\na : Function.FromTypes p τ\n⊢ Eq ((Function.fromTypes_zero_equiv p τ) a) a","decl":"/-- The definitional equality between `0`-ary heterogeneous functions into `τ` and `τ`. -/\n@[simps!]\ndef fromTypes_zero_equiv (p : Fin 0 → Type u) (τ : Type u) :\n    FromTypes p τ ≃ τ := Equiv.refl _\n\n"}
{"name":"Function.fromTypes_zero_equiv_symm_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"p : Fin 0 → Type u\nτ : Type u\na : Function.FromTypes p τ\n⊢ Eq ((Function.fromTypes_zero_equiv p τ).symm a) a","decl":"/-- The definitional equality between `0`-ary heterogeneous functions into `τ` and `τ`. -/\n@[simps!]\ndef fromTypes_zero_equiv (p : Fin 0 → Type u) (τ : Type u) :\n    FromTypes p τ ≃ τ := Equiv.refl _\n\n"}
{"name":"Function.fromTypes_nil_equiv_symm_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"τ : Type u\na : Function.FromTypes Matrix.vecEmpty τ\n⊢ Eq ((Function.fromTypes_nil_equiv τ).symm a) a","decl":"/-- The definitional equality between `![]`-ary heterogeneous functions into `τ` and `τ`. -/\n@[simps!]\ndef fromTypes_nil_equiv (τ : Type u) : FromTypes ![] τ ≃ τ :=\n  fromTypes_zero_equiv ![] τ\n\n"}
{"name":"Function.fromTypes_nil_equiv_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"τ : Type u\na : Function.FromTypes Matrix.vecEmpty τ\n⊢ Eq ((Function.fromTypes_nil_equiv τ) a) a","decl":"/-- The definitional equality between `![]`-ary heterogeneous functions into `τ` and `τ`. -/\n@[simps!]\ndef fromTypes_nil_equiv (τ : Type u) : FromTypes ![] τ ≃ τ :=\n  fromTypes_zero_equiv ![] τ\n\n"}
{"name":"Function.fromTypes_succ_equiv_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\na : Function.FromTypes p τ\n⊢ Eq ((Function.fromTypes_succ_equiv p τ) a) a","decl":"/-- The definitional equality between `p`-ary heterogeneous functions into `τ`\n  and function from `vecHead p` to `(vecTail p)`-ary heterogeneous functions into `τ`. -/\n@[simps!]\ndef fromTypes_succ_equiv {n} (p : Fin (n + 1) → Type u) (τ : Type u) :\n    FromTypes p τ ≃ (vecHead p → FromTypes (vecTail p) τ) := Equiv.refl _\n\n"}
{"name":"Function.fromTypes_succ_equiv_symm_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\na : Function.FromTypes p τ\n⊢ Eq ((Function.fromTypes_succ_equiv p τ).symm a) a","decl":"/-- The definitional equality between `p`-ary heterogeneous functions into `τ`\n  and function from `vecHead p` to `(vecTail p)`-ary heterogeneous functions into `τ`. -/\n@[simps!]\ndef fromTypes_succ_equiv {n} (p : Fin (n + 1) → Type u) (τ : Type u) :\n    FromTypes p τ ≃ (vecHead p → FromTypes (vecTail p) τ) := Equiv.refl _\n\n"}
{"name":"Function.fromTypes_cons_equiv_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\nα : Type u\np : Fin n → Type u\nτ : Type u\na : Function.FromTypes (Matrix.vecCons α p) τ\n⊢ Eq ((Function.fromTypes_cons_equiv α p τ) a) a","decl":"/-- The definitional equality between `(vecCons α p)`-ary heterogeneous functions into `τ`\n  and function from `α` to `p`-ary heterogeneous functions into `τ`. -/\n@[simps!]\ndef fromTypes_cons_equiv {n} (α : Type u) (p : Fin n → Type u) (τ : Type u) :\n    FromTypes (vecCons α p) τ ≃ (α → FromTypes p τ) := fromTypes_succ_equiv _ _\n\n"}
{"name":"Function.fromTypes_cons_equiv_symm_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\nα : Type u\np : Fin n → Type u\nτ : Type u\na : Function.FromTypes (Matrix.vecCons α p) τ\n⊢ Eq ((Function.fromTypes_cons_equiv α p τ).symm a) a","decl":"/-- The definitional equality between `(vecCons α p)`-ary heterogeneous functions into `τ`\n  and function from `α` to `p`-ary heterogeneous functions into `τ`. -/\n@[simps!]\ndef fromTypes_cons_equiv {n} (α : Type u) (p : Fin n → Type u) (τ : Type u) :\n    FromTypes (vecCons α p) τ ≃ (α → FromTypes p τ) := fromTypes_succ_equiv _ _\n\n"}
{"name":"Function.FromTypes.const_zero","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"p : Fin 0 → Type u\nτ : Type u\nt : τ\n⊢ Eq (Function.FromTypes.const p t) t","decl":"@[simp]\ntheorem const_zero (p : Fin 0 → Type u) {τ : Type u} (t : τ) : const p t = t :=\n  rfl\n\n"}
{"name":"Function.FromTypes.const_succ","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\nt : τ\n⊢ Eq (Function.FromTypes.const p t) fun x => Function.FromTypes.const (Matrix.vecTail p) t","decl":"@[simp]\ntheorem const_succ {n} (p : Fin (n + 1) → Type u) {τ : Type u} (t : τ) :\n    const p t = fun _ => const (vecTail p) t := rfl\n\n"}
{"name":"Function.FromTypes.const_succ_apply","module":"Mathlib.Logic.Function.FromTypes","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\nt : τ\nx : p 0\n⊢ Eq (Function.FromTypes.const p t x) (Function.FromTypes.const (Matrix.vecTail p) t)","decl":"theorem const_succ_apply {n} (p : Fin (n + 1) → Type u) {τ : Type u} (t : τ)\n    (x : p 0) : const p t x = const (vecTail p) t := rfl\n\n"}
