{"name":"NonUnitalSubringClass.toNegMemClass","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"S : Type u_1\nR : Type u\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : SetLike S R\nself : NonUnitalSubringClass S R\n⊢ NegMemClass S R","decl":"/-- `NonUnitalSubringClass S R` states that `S` is a type of subsets `s ⊆ R` that\nare both a multiplicative submonoid and an additive subgroup. -/\nclass NonUnitalSubringClass (S : Type*) (R : Type u) [NonUnitalNonAssocRing R]\n    [SetLike S R] extends NonUnitalSubsemiringClass S R, NegMemClass S R : Prop where\n\n-- See note [lower instance priority]\n"}
{"name":"NonUnitalSubringClass.toNonUnitalSubsemiringClass","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"S : Type u_1\nR : Type u\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : SetLike S R\nself : NonUnitalSubringClass S R\n⊢ NonUnitalSubsemiringClass S R","decl":"/-- `NonUnitalSubringClass S R` states that `S` is a type of subsets `s ⊆ R` that\nare both a multiplicative submonoid and an additive subgroup. -/\nclass NonUnitalSubringClass (S : Type*) (R : Type u) [NonUnitalNonAssocRing R]\n    [SetLike S R] extends NonUnitalSubsemiringClass S R, NegMemClass S R : Prop where\n\n-- See note [lower instance priority]\n"}
{"name":"NonUnitalSubringClass.addSubgroupClass","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"S : Type u_1\nR : Type u\ninst✝¹ : SetLike S R\ninst✝ : NonUnitalNonAssocRing R\nh : NonUnitalSubringClass S R\n⊢ AddSubgroupClass S R","decl":"instance (priority := 100) NonUnitalSubringClass.addSubgroupClass (S : Type*) (R : Type u)\n    [SetLike S R] [NonUnitalNonAssocRing R] [h : NonUnitalSubringClass S R] :\n    AddSubgroupClass S R :=\n  { h with }\n\n"}
{"name":"NonUnitalSubringClass.coe_subtype","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : SetLike S R\nhSR : NonUnitalSubringClass S R\ns : S\n⊢ Eq (⇑(NonUnitalSubringClass.subtype s)) Subtype.val","decl":"@[simp]\ntheorem coe_subtype : (subtype s : s → R) = Subtype.val :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mk.injEq","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ntoNonUnitalSubsemiring✝ : NonUnitalSubsemiring R\nneg_mem'✝ : ∀ {x : R}, Membership.mem toNonUnitalSubsemiring✝.carrier x → Membership.mem toNonUnitalSubsemiring✝.carrier (Neg.neg x)\ntoNonUnitalSubsemiring : NonUnitalSubsemiring R\nneg_mem' : ∀ {x : R}, Membership.mem toNonUnitalSubsemiring.carrier x → Membership.mem toNonUnitalSubsemiring.carrier (Neg.neg x)\n⊢ Eq (Eq { toNonUnitalSubsemiring := toNonUnitalSubsemiring✝, neg_mem' := neg_mem'✝ } { toNonUnitalSubsemiring := toNonUnitalSubsemiring, neg_mem' := neg_mem' }) (Eq toNonUnitalSubsemiring✝ toNonUnitalSubsemiring)","decl":"/-- `NonUnitalSubring R` is the type of non-unital subrings of `R`. A non-unital subring of `R`\nis a subset `s` that is a multiplicative subsemigroup and an additive subgroup. Note in particular\nthat it shares the same 0 as R. -/\nstructure NonUnitalSubring (R : Type u) [NonUnitalNonAssocRing R] extends\n  NonUnitalSubsemiring R, AddSubgroup R\n\n"}
{"name":"NonUnitalSubring.mk.sizeOf_spec","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝¹ : NonUnitalNonAssocRing R\ninst✝ : SizeOf R\ntoNonUnitalSubsemiring : NonUnitalSubsemiring R\nneg_mem' : ∀ {x : R}, Membership.mem toNonUnitalSubsemiring.carrier x → Membership.mem toNonUnitalSubsemiring.carrier (Neg.neg x)\n⊢ Eq (SizeOf.sizeOf { toNonUnitalSubsemiring := toNonUnitalSubsemiring, neg_mem' := neg_mem' }) (HAdd.hAdd 1 (SizeOf.sizeOf toNonUnitalSubsemiring))","decl":"/-- `NonUnitalSubring R` is the type of non-unital subrings of `R`. A non-unital subring of `R`\nis a subset `s` that is a multiplicative subsemigroup and an additive subgroup. Note in particular\nthat it shares the same 0 as R. -/\nstructure NonUnitalSubring (R : Type u) [NonUnitalNonAssocRing R] extends\n  NonUnitalSubsemiring R, AddSubgroup R\n\n"}
{"name":"NonUnitalSubring.neg_mem'","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nself : NonUnitalSubring R\nx : R\na✝ : Membership.mem self.carrier x\n⊢ Membership.mem self.carrier (Neg.neg x)","decl":"/-- `NonUnitalSubring R` is the type of non-unital subrings of `R`. A non-unital subring of `R`\nis a subset `s` that is a multiplicative subsemigroup and an additive subgroup. Note in particular\nthat it shares the same 0 as R. -/\nstructure NonUnitalSubring (R : Type u) [NonUnitalNonAssocRing R] extends\n  NonUnitalSubsemiring R, AddSubgroup R\n\n"}
{"name":"NonUnitalSubring.mk.inj","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ntoNonUnitalSubsemiring✝ : NonUnitalSubsemiring R\nneg_mem'✝ : ∀ {x : R}, Membership.mem toNonUnitalSubsemiring✝.carrier x → Membership.mem toNonUnitalSubsemiring✝.carrier (Neg.neg x)\ntoNonUnitalSubsemiring : NonUnitalSubsemiring R\nneg_mem' : ∀ {x : R}, Membership.mem toNonUnitalSubsemiring.carrier x → Membership.mem toNonUnitalSubsemiring.carrier (Neg.neg x)\nx✝ : Eq { toNonUnitalSubsemiring := toNonUnitalSubsemiring✝, neg_mem' := neg_mem'✝ } { toNonUnitalSubsemiring := toNonUnitalSubsemiring, neg_mem' := neg_mem' }\n⊢ Eq toNonUnitalSubsemiring✝ toNonUnitalSubsemiring","decl":"/-- `NonUnitalSubring R` is the type of non-unital subrings of `R`. A non-unital subring of `R`\nis a subset `s` that is a multiplicative subsemigroup and an additive subgroup. Note in particular\nthat it shares the same 0 as R. -/\nstructure NonUnitalSubring (R : Type u) [NonUnitalNonAssocRing R] extends\n  NonUnitalSubsemiring R, AddSubgroup R\n\n"}
{"name":"NonUnitalSubring.instNonUnitalSubringClass","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ NonUnitalSubringClass (NonUnitalSubring R) R","decl":"instance : NonUnitalSubringClass (NonUnitalSubring R) R where\n  zero_mem s := s.zero_mem'\n  add_mem {s} := s.add_mem'\n  mul_mem {s} := s.mul_mem'\n  neg_mem {s} := s.neg_mem'\n\n"}
{"name":"NonUnitalSubring.mem_carrier","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : R\n⊢ Iff (Membership.mem s.toNonUnitalSubsemiring x) (Membership.mem s x)","decl":"theorem mem_carrier {s : NonUnitalSubring R} {x : R} : x ∈ s.toNonUnitalSubsemiring ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.mem_mk","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : NonUnitalSubsemiring R\nx : R\nh : ∀ {x : R}, Membership.mem S.carrier x → Membership.mem S.carrier (Neg.neg x)\n⊢ Iff (Membership.mem { toNonUnitalSubsemiring := S, neg_mem' := h } x) (Membership.mem S x)","decl":"@[simp]\ntheorem mem_mk {S : NonUnitalSubsemiring R} {x : R} (h) :\n    x ∈ (⟨S, h⟩ : NonUnitalSubring R) ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.coe_set_mk","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : NonUnitalSubsemiring R\nh : ∀ {x : R}, Membership.mem S.carrier x → Membership.mem S.carrier (Neg.neg x)\n⊢ Eq ↑{ toNonUnitalSubsemiring := S, neg_mem' := h } ↑S","decl":"@[simp]\ntheorem coe_set_mk (S : NonUnitalSubsemiring R) (h) :\n    ((⟨S, h⟩ : NonUnitalSubring R) : Set R) = S :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mk_le_mk","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS S' : NonUnitalSubsemiring R\nh : ∀ {x : R}, Membership.mem S.carrier x → Membership.mem S.carrier (Neg.neg x)\nh' : ∀ {x : R}, Membership.mem S'.carrier x → Membership.mem S'.carrier (Neg.neg x)\n⊢ Iff (LE.le { toNonUnitalSubsemiring := S, neg_mem' := h } { toNonUnitalSubsemiring := S', neg_mem' := h' }) (LE.le S S')","decl":"@[simp]\ntheorem mk_le_mk {S S' : NonUnitalSubsemiring R} (h h') :\n    (⟨S, h⟩ : NonUnitalSubring R) ≤ (⟨S', h'⟩ : NonUnitalSubring R) ↔ S ≤ S' :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.ext_iff","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS T : NonUnitalSubring R\n⊢ Iff (Eq S T) (∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x))","decl":"/-- Two non-unital subrings are equal if they have the same elements. -/\n@[ext]\ntheorem ext {S T : NonUnitalSubring R} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"NonUnitalSubring.ext","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS T : NonUnitalSubring R\nh : ∀ (x : R), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"/-- Two non-unital subrings are equal if they have the same elements. -/\n@[ext]\ntheorem ext {S T : NonUnitalSubring R} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"NonUnitalSubring.coe_copy","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : NonUnitalSubring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (↑(S.copy s hs)) s","decl":"@[simp]\ntheorem coe_copy (S : NonUnitalSubring R) (s : Set R) (hs : s = ↑S) : (S.copy s hs : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.copy_eq","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\nS : NonUnitalSubring R\ns : Set R\nhs : Eq s ↑S\n⊢ Eq (S.copy s hs) S","decl":"theorem copy_eq (S : NonUnitalSubring R) (s : Set R) (hs : s = ↑S) : S.copy s hs = S :=\n  SetLike.coe_injective hs\n\n"}
{"name":"NonUnitalSubring.toNonUnitalSubsemiring_injective","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Function.Injective NonUnitalSubring.toNonUnitalSubsemiring","decl":"theorem toNonUnitalSubsemiring_injective :\n    Function.Injective (toNonUnitalSubsemiring : NonUnitalSubring R → NonUnitalSubsemiring R)\n  | _r, _s, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"NonUnitalSubring.toNonUnitalSubsemiring_strictMono","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ StrictMono NonUnitalSubring.toNonUnitalSubsemiring","decl":"@[mono]\ntheorem toNonUnitalSubsemiring_strictMono :\n    StrictMono (toNonUnitalSubsemiring : NonUnitalSubring R → NonUnitalSubsemiring R) := fun _ _ =>\n  id\n\n"}
{"name":"NonUnitalSubring.toNonUnitalSubsemiring_mono","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Monotone NonUnitalSubring.toNonUnitalSubsemiring","decl":"@[mono]\ntheorem toNonUnitalSubsemiring_mono :\n    Monotone (toNonUnitalSubsemiring : NonUnitalSubring R → NonUnitalSubsemiring R) :=\n  toNonUnitalSubsemiring_strictMono.monotone\n\n"}
{"name":"NonUnitalSubring.toAddSubgroup_injective","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Function.Injective NonUnitalSubring.toAddSubgroup","decl":"theorem toAddSubgroup_injective :\n    Function.Injective (toAddSubgroup : NonUnitalSubring R → AddSubgroup R)\n  | _r, _s, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"NonUnitalSubring.toAddSubgroup_strictMono","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ StrictMono NonUnitalSubring.toAddSubgroup","decl":"@[mono]\ntheorem toAddSubgroup_strictMono :\n    StrictMono (toAddSubgroup : NonUnitalSubring R → AddSubgroup R) := fun _ _ => id\n\n"}
{"name":"NonUnitalSubring.toAddSubgroup_mono","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Monotone NonUnitalSubring.toAddSubgroup","decl":"@[mono]\ntheorem toAddSubgroup_mono : Monotone (toAddSubgroup : NonUnitalSubring R → AddSubgroup R) :=\n  toAddSubgroup_strictMono.monotone\n\n"}
{"name":"NonUnitalSubring.toSubsemigroup_injective","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Function.Injective NonUnitalSubring.toSubsemigroup","decl":"theorem toSubsemigroup_injective :\n    Function.Injective (toSubsemigroup : NonUnitalSubring R → Subsemigroup R)\n  | _r, _s, h => ext (SetLike.ext_iff.mp h :)\n\n"}
{"name":"NonUnitalSubring.toSubsemigroup_strictMono","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ StrictMono NonUnitalSubring.toSubsemigroup","decl":"@[mono]\ntheorem toSubsemigroup_strictMono :\n    StrictMono (toSubsemigroup : NonUnitalSubring R → Subsemigroup R) := fun _ _ => id\n\n"}
{"name":"NonUnitalSubring.toSubsemigroup_mono","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\n⊢ Monotone NonUnitalSubring.toSubsemigroup","decl":"@[mono]\ntheorem toSubsemigroup_mono : Monotone (toSubsemigroup : NonUnitalSubring R → Subsemigroup R) :=\n  toSubsemigroup_strictMono.monotone\n\n"}
{"name":"NonUnitalSubring.coe_mk'","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nsm : Subsemigroup R\nhm : Eq (↑sm) s\nsa : AddSubgroup R\nha : Eq (↑sa) s\n⊢ Eq (↑(NonUnitalSubring.mk' s sm sa hm ha)) s","decl":"@[simp]\ntheorem coe_mk' {s : Set R} {sm : Subsemigroup R} (hm : ↑sm = s) {sa : AddSubgroup R}\n    (ha : ↑sa = s) : (NonUnitalSubring.mk' s sm sa hm ha : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_mk'","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nsm : Subsemigroup R\nhm : Eq (↑sm) s\nsa : AddSubgroup R\nha : Eq (↑sa) s\nx : R\n⊢ Iff (Membership.mem (NonUnitalSubring.mk' s sm sa hm ha) x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_mk' {s : Set R} {sm : Subsemigroup R} (hm : ↑sm = s) {sa : AddSubgroup R} (ha : ↑sa = s)\n    {x : R} : x ∈ NonUnitalSubring.mk' s sm sa hm ha ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.mk'_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nsm : Subsemigroup R\nhm : Eq (↑sm) s\nsa : AddSubgroup R\nha : Eq (↑sa) s\n⊢ Eq (NonUnitalSubring.mk' s sm sa hm ha).toSubsemigroup sm","decl":"@[simp]\ntheorem mk'_toSubsemigroup {s : Set R} {sm : Subsemigroup R} (hm : ↑sm = s) {sa : AddSubgroup R}\n    (ha : ↑sa = s) : (NonUnitalSubring.mk' s sm sa hm ha).toSubsemigroup = sm :=\n  SetLike.coe_injective hm.symm\n\n"}
{"name":"NonUnitalSubring.mk'_toAddSubgroup","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : Set R\nsm : Subsemigroup R\nhm : Eq (↑sm) s\nsa : AddSubgroup R\nha : Eq (↑sa) s\n⊢ Eq (NonUnitalSubring.mk' s sm sa hm ha).toAddSubgroup sa","decl":"@[simp]\ntheorem mk'_toAddSubgroup {s : Set R} {sm : Subsemigroup R} (hm : ↑sm = s) {sa : AddSubgroup R}\n    (ha : ↑sa = s) : (NonUnitalSubring.mk' s sm sa hm ha).toAddSubgroup = sa :=\n  SetLike.coe_injective ha.symm\n\n"}
{"name":"NonUnitalSubring.zero_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Membership.mem s 0","decl":"/-- A non-unital subring contains the ring's 0. -/\nprotected theorem zero_mem : (0 : R) ∈ s :=\n  zero_mem _\n\n"}
{"name":"NonUnitalSubring.mul_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx y : R\na✝¹ : Membership.mem s x\na✝ : Membership.mem s y\n⊢ Membership.mem s (HMul.hMul x y)","decl":"/-- A non-unital subring is closed under multiplication. -/\nprotected theorem mul_mem {x y : R} : x ∈ s → y ∈ s → x * y ∈ s :=\n  mul_mem\n\n"}
{"name":"NonUnitalSubring.add_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx y : R\na✝¹ : Membership.mem s x\na✝ : Membership.mem s y\n⊢ Membership.mem s (HAdd.hAdd x y)","decl":"/-- A non-unital subring is closed under addition. -/\nprotected theorem add_mem {x y : R} : x ∈ s → y ∈ s → x + y ∈ s :=\n  add_mem\n\n"}
{"name":"NonUnitalSubring.neg_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : R\na✝ : Membership.mem s x\n⊢ Membership.mem s (Neg.neg x)","decl":"/-- A non-unital subring is closed under negation. -/\nprotected theorem neg_mem {x : R} : x ∈ s → -x ∈ s :=\n  neg_mem\n\n"}
{"name":"NonUnitalSubring.sub_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx y : R\nhx : Membership.mem s x\nhy : Membership.mem s y\n⊢ Membership.mem s (HSub.hSub x y)","decl":"/-- A non-unital subring is closed under subtraction -/\nprotected theorem sub_mem {x y : R} (hx : x ∈ s) (hy : y ∈ s) : x - y ∈ s :=\n  sub_mem hx hy\n\n"}
{"name":"NonUnitalSubring.zsmul_mem","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : R\nhx : Membership.mem s x\nn : Int\n⊢ Membership.mem s (HSMul.hSMul n x)","decl":"protected theorem zsmul_mem {x : R} (hx : x ∈ s) (n : ℤ) : n • x ∈ s :=\n  zsmul_mem hx n\n\n"}
{"name":"NonUnitalSubring.val_add","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx y : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(HAdd.hAdd x y)) (HAdd.hAdd ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem val_add (x y : s) : (↑(x + y) : R) = ↑x + ↑y :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.val_neg","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(Neg.neg x)) (Neg.neg ↑x)","decl":"@[simp, norm_cast]\ntheorem val_neg (x : s) : (↑(-x) : R) = -↑x :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.val_mul","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx y : Subtype fun x => Membership.mem s x\n⊢ Eq (↑(HMul.hMul x y)) (HMul.hMul ↑x ↑y)","decl":"@[simp, norm_cast]\ntheorem val_mul (x y : s) : (↑(x * y) : R) = ↑x * ↑y :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.val_zero","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq (↑0) 0","decl":"@[simp, norm_cast]\ntheorem val_zero : ((0 : s) : R) = 0 :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.coe_eq_zero_iff","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : Subtype fun x => Membership.mem s x\n⊢ Iff (Eq (↑x) 0) (Eq x 0)","decl":"theorem coe_eq_zero_iff {x : s} : (x : R) = 0 ↔ x = 0 := by\n  simp\n\n"}
{"name":"NonUnitalSubring.mem_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : R\n⊢ Iff (Membership.mem s.toSubsemigroup x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_toSubsemigroup {s : NonUnitalSubring R} {x : R} : x ∈ s.toSubsemigroup ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.coe_toSubsemigroup","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq ↑s.toSubsemigroup ↑s","decl":"@[simp]\ntheorem coe_toSubsemigroup (s : NonUnitalSubring R) : (s.toSubsemigroup : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_toAddSubgroup","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : R\n⊢ Iff (Membership.mem s.toAddSubgroup x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_toAddSubgroup {s : NonUnitalSubring R} {x : R} : x ∈ s.toAddSubgroup ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.coe_toAddSubgroup","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq ↑s.toAddSubgroup ↑s","decl":"@[simp]\ntheorem coe_toAddSubgroup (s : NonUnitalSubring R) : (s.toAddSubgroup : Set R) = s :=\n  rfl\n\n"}
{"name":"NonUnitalSubring.mem_toNonUnitalSubsemiring","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\nx : R\n⊢ Iff (Membership.mem s.toNonUnitalSubsemiring x) (Membership.mem s x)","decl":"@[simp]\ntheorem mem_toNonUnitalSubsemiring {s : NonUnitalSubring R} {x : R} :\n    x ∈ s.toNonUnitalSubsemiring ↔ x ∈ s :=\n  Iff.rfl\n\n"}
{"name":"NonUnitalSubring.coe_toNonUnitalSubsemiring","module":"Mathlib.RingTheory.NonUnitalSubring.Defs","initialProofState":"R : Type u\ninst✝ : NonUnitalNonAssocRing R\ns : NonUnitalSubring R\n⊢ Eq ↑s.toNonUnitalSubsemiring ↑s","decl":"@[simp]\ntheorem coe_toNonUnitalSubsemiring (s : NonUnitalSubring R) :\n    (s.toNonUnitalSubsemiring : Set R) = s :=\n  rfl\n\n"}
