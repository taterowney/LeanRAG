{"name":"Profinite.isIso_asLimitCone_lift","module":"Mathlib.Topology.Category.Profinite.AsLimit","initialProofState":"X : Profinite\n⊢ CategoryTheory.IsIso ((Profinite.limitConeIsLimit X.diagram).lift X.asLimitCone)","decl":"instance isIso_asLimitCone_lift : IsIso ((limitConeIsLimit.{u, u} X.diagram).lift X.asLimitCone) :=\n  CompHausLike.isIso_of_bijective _\n    (by\n      refine ⟨fun a b h => ?_, fun a => ?_⟩\n      · refine DiscreteQuotient.eq_of_forall_proj_eq fun S => ?_\n        apply_fun fun f : (limitCone.{u, u} X.diagram).pt => f.val S at h\n        exact h\n      · obtain ⟨b, hb⟩ :=\n          DiscreteQuotient.exists_of_compat (fun S => a.val S) fun _ _ h => a.prop (homOfLE h)\n        use b\n        -- ext S : 3 -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): `ext` does not work, replaced with following\n        -- three lines.\n        apply Subtype.ext\n        apply funext\n        rintro S\n        -- Porting note: end replacement block\n        apply hb\n    )\n\n"}
