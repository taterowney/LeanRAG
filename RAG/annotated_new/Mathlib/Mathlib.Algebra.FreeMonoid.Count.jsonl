{"name":"FreeMonoid.countP'_one","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\n⊢ Eq (FreeMonoid.countP' p 1) 0","decl":"@[to_additive]\nlemma countP'_one : (1 : FreeMonoid α).countP' p = 0 := rfl\n\n"}
{"name":"FreeAddMonoid.countP'_zero","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\n⊢ Eq (FreeAddMonoid.countP' p 0) 0","decl":"@[to_additive]\nlemma countP'_one : (1 : FreeMonoid α).countP' p = 0 := rfl\n\n"}
{"name":"FreeAddMonoid.countP'_add","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\nl₁ l₂ : FreeAddMonoid α\n⊢ Eq (FreeAddMonoid.countP' p (HAdd.hAdd l₁ l₂)) (HAdd.hAdd (FreeAddMonoid.countP' p l₁) (FreeAddMonoid.countP' p l₂))","decl":"@[to_additive]\nlemma countP'_mul (l₁ l₂ : FreeMonoid α) : (l₁ * l₂).countP' p = l₁.countP' p + l₂.countP' p := by\n  dsimp [countP']\n  simp only [List.countP_append]\n\n"}
{"name":"FreeMonoid.countP'_mul","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\nl₁ l₂ : FreeMonoid α\n⊢ Eq (FreeMonoid.countP' p (HMul.hMul l₁ l₂)) (HAdd.hAdd (FreeMonoid.countP' p l₁) (FreeMonoid.countP' p l₂))","decl":"@[to_additive]\nlemma countP'_mul (l₁ l₂ : FreeMonoid α) : (l₁ * l₂).countP' p = l₁.countP' p + l₂.countP' p := by\n  dsimp [countP']\n  simp only [List.countP_append]\n\n"}
{"name":"FreeMonoid.countP_apply","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\nl : FreeMonoid α\n⊢ Eq ((FreeMonoid.countP p) l) (Multiplicative.ofAdd (List.countP (fun b => Decidable.decide (p b)) (FreeMonoid.toList l)))","decl":"theorem countP_apply (l : FreeMonoid α) : l.countP p = .ofAdd (l.toList.countP p) := rfl\n\n"}
{"name":"FreeMonoid.countP_of","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\nx : α\n⊢ Eq ((FreeMonoid.countP p) (FreeMonoid.of x)) (ite (p x) (Multiplicative.ofAdd 1) (Multiplicative.ofAdd 0))","decl":"lemma countP_of (x : α) : (of x).countP p =\n    if p x then Multiplicative.ofAdd 1 else Multiplicative.ofAdd 0 := by\n  rw [countP_apply, toList_of, List.countP_singleton, apply_ite (Multiplicative.ofAdd)]\n  simp only [decide_eq_true_eq]\n\n\n"}
{"name":"FreeMonoid.count_apply","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nx : α\nl : FreeAddMonoid α\n⊢ Eq ((FreeMonoid.count x) l) (Multiplicative.ofAdd (List.count x (FreeAddMonoid.toList l)))","decl":"theorem count_apply [DecidableEq α] (x : α) (l : FreeAddMonoid α) :\n    count x l = Multiplicative.ofAdd (l.toList.count x) := rfl\n\n"}
{"name":"FreeMonoid.count_of","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nx y : α\n⊢ Eq ((FreeMonoid.count x) (FreeMonoid.of y)) (Pi.mulSingle x (Multiplicative.ofAdd 1) y)","decl":"theorem count_of [DecidableEq α] (x y : α) :\n    count x (of y) = Pi.mulSingle (f := fun _ => Multiplicative ℕ) x (Multiplicative.ofAdd 1) y :=\n  by simp only [count, eq_comm, countP_of, ofAdd_zero, Pi.mulSingle_apply]\n\n"}
{"name":"FreeAddMonoid.countP_apply","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\nl : FreeAddMonoid α\n⊢ Eq ((FreeAddMonoid.countP p) l) (List.countP (fun b => Decidable.decide (p b)) (FreeAddMonoid.toList l))","decl":"theorem countP_apply (l : FreeAddMonoid α) : l.countP p = l.toList.countP p := rfl\n\n"}
{"name":"FreeAddMonoid.countP_of","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\np : α → Prop\ninst✝ : DecidablePred p\nx : α\n⊢ Eq ((FreeAddMonoid.countP p) (FreeAddMonoid.of x)) (ite (p x) 1 0)","decl":"theorem countP_of (x : α) : countP p (of x) = if p x then 1 else 0 := by\n  rw [countP_apply, toList_of, List.countP_singleton]\n  simp only [decide_eq_true_eq]\n\n"}
{"name":"FreeAddMonoid.count_of","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nx y : α\n⊢ Eq ((FreeAddMonoid.count x) (FreeAddMonoid.of y)) (Pi.single x 1 y)","decl":"lemma count_of [DecidableEq α] (x y : α) : count x (of y) = (Pi.single x 1 : α → ℕ) y := by\n  dsimp [count]\n  rw [countP_of]\n  simp [Pi.single, Function.update]\n\n"}
{"name":"FreeAddMonoid.count_apply","module":"Mathlib.Algebra.FreeMonoid.Count","initialProofState":"α : Type u_1\ninst✝ : DecidableEq α\nx : α\nl : FreeAddMonoid α\n⊢ Eq ((FreeAddMonoid.count x) l) (List.count x (FreeAddMonoid.toList l))","decl":"theorem count_apply [DecidableEq α] (x : α) (l : FreeAddMonoid α) : l.count x = l.toList.count x :=\n  rfl\n\n"}
