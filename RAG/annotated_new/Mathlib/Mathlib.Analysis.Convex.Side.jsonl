{"name":"AffineSubspace.WSameSide.map","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nh : s.WSameSide x y\nf : AffineMap R P P'\n⊢ (AffineSubspace.map f s).WSameSide (f x) (f y)","decl":"theorem WSameSide.map {s : AffineSubspace R P} {x y : P} (h : s.WSameSide x y) (f : P →ᵃ[R] P') :\n    (s.map f).WSameSide (f x) (f y) := by\n  rcases h with ⟨p₁, hp₁, p₂, hp₂, h⟩\n  refine ⟨f p₁, mem_map_of_mem f hp₁, f p₂, mem_map_of_mem f hp₂, ?_⟩\n  simp_rw [← linearMap_vsub]\n  exact h.map f.linear\n\n"}
{"name":"Function.Injective.wSameSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineMap R P P'\nhf : Function.Injective ⇑f\n⊢ Iff ((AffineSubspace.map f s).WSameSide (f x) (f y)) (s.WSameSide x y)","decl":"theorem _root_.Function.Injective.wSameSide_map_iff {s : AffineSubspace R P} {x y : P}\n    {f : P →ᵃ[R] P'} (hf : Function.Injective f) :\n    (s.map f).WSameSide (f x) (f y) ↔ s.WSameSide x y := by\n  refine ⟨fun h => ?_, fun h => h.map _⟩\n  rcases h with ⟨fp₁, hfp₁, fp₂, hfp₂, h⟩\n  rw [mem_map] at hfp₁ hfp₂\n  rcases hfp₁ with ⟨p₁, hp₁, rfl⟩\n  rcases hfp₂ with ⟨p₂, hp₂, rfl⟩\n  refine ⟨p₁, hp₁, p₂, hp₂, ?_⟩\n  simp_rw [← linearMap_vsub, (f.linear_injective_iff.2 hf).sameRay_map_iff] at h\n  exact h\n\n"}
{"name":"Function.Injective.sSameSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineMap R P P'\nhf : Function.Injective ⇑f\n⊢ Iff ((AffineSubspace.map f s).SSameSide (f x) (f y)) (s.SSameSide x y)","decl":"theorem _root_.Function.Injective.sSameSide_map_iff {s : AffineSubspace R P} {x y : P}\n    {f : P →ᵃ[R] P'} (hf : Function.Injective f) :\n    (s.map f).SSameSide (f x) (f y) ↔ s.SSameSide x y := by\n  simp_rw [SSameSide, hf.wSameSide_map_iff, mem_map_iff_mem_of_injective hf]\n\n"}
{"name":"AffineEquiv.wSameSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineEquiv R P P'\n⊢ Iff ((AffineSubspace.map (↑f) s).WSameSide (f x) (f y)) (s.WSameSide x y)","decl":"@[simp]\ntheorem _root_.AffineEquiv.wSameSide_map_iff {s : AffineSubspace R P} {x y : P} (f : P ≃ᵃ[R] P') :\n    (s.map ↑f).WSameSide (f x) (f y) ↔ s.WSameSide x y :=\n  (show Function.Injective f.toAffineMap from f.injective).wSameSide_map_iff\n\n"}
{"name":"AffineEquiv.sSameSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineEquiv R P P'\n⊢ Iff ((AffineSubspace.map (↑f) s).SSameSide (f x) (f y)) (s.SSameSide x y)","decl":"@[simp]\ntheorem _root_.AffineEquiv.sSameSide_map_iff {s : AffineSubspace R P} {x y : P} (f : P ≃ᵃ[R] P') :\n    (s.map ↑f).SSameSide (f x) (f y) ↔ s.SSameSide x y :=\n  (show Function.Injective f.toAffineMap from f.injective).sSameSide_map_iff\n\n"}
{"name":"AffineSubspace.WOppSide.map","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nh : s.WOppSide x y\nf : AffineMap R P P'\n⊢ (AffineSubspace.map f s).WOppSide (f x) (f y)","decl":"theorem WOppSide.map {s : AffineSubspace R P} {x y : P} (h : s.WOppSide x y) (f : P →ᵃ[R] P') :\n    (s.map f).WOppSide (f x) (f y) := by\n  rcases h with ⟨p₁, hp₁, p₂, hp₂, h⟩\n  refine ⟨f p₁, mem_map_of_mem f hp₁, f p₂, mem_map_of_mem f hp₂, ?_⟩\n  simp_rw [← linearMap_vsub]\n  exact h.map f.linear\n\n"}
{"name":"Function.Injective.wOppSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineMap R P P'\nhf : Function.Injective ⇑f\n⊢ Iff ((AffineSubspace.map f s).WOppSide (f x) (f y)) (s.WOppSide x y)","decl":"theorem _root_.Function.Injective.wOppSide_map_iff {s : AffineSubspace R P} {x y : P}\n    {f : P →ᵃ[R] P'} (hf : Function.Injective f) :\n    (s.map f).WOppSide (f x) (f y) ↔ s.WOppSide x y := by\n  refine ⟨fun h => ?_, fun h => h.map _⟩\n  rcases h with ⟨fp₁, hfp₁, fp₂, hfp₂, h⟩\n  rw [mem_map] at hfp₁ hfp₂\n  rcases hfp₁ with ⟨p₁, hp₁, rfl⟩\n  rcases hfp₂ with ⟨p₂, hp₂, rfl⟩\n  refine ⟨p₁, hp₁, p₂, hp₂, ?_⟩\n  simp_rw [← linearMap_vsub, (f.linear_injective_iff.2 hf).sameRay_map_iff] at h\n  exact h\n\n"}
{"name":"Function.Injective.sOppSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineMap R P P'\nhf : Function.Injective ⇑f\n⊢ Iff ((AffineSubspace.map f s).SOppSide (f x) (f y)) (s.SOppSide x y)","decl":"theorem _root_.Function.Injective.sOppSide_map_iff {s : AffineSubspace R P} {x y : P}\n    {f : P →ᵃ[R] P'} (hf : Function.Injective f) :\n    (s.map f).SOppSide (f x) (f y) ↔ s.SOppSide x y := by\n  simp_rw [SOppSide, hf.wOppSide_map_iff, mem_map_iff_mem_of_injective hf]\n\n"}
{"name":"AffineEquiv.wOppSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineEquiv R P P'\n⊢ Iff ((AffineSubspace.map (↑f) s).WOppSide (f x) (f y)) (s.WOppSide x y)","decl":"@[simp]\ntheorem _root_.AffineEquiv.wOppSide_map_iff {s : AffineSubspace R P} {x y : P} (f : P ≃ᵃ[R] P') :\n    (s.map ↑f).WOppSide (f x) (f y) ↔ s.WOppSide x y :=\n  (show Function.Injective f.toAffineMap from f.injective).wOppSide_map_iff\n\n"}
{"name":"AffineEquiv.sOppSide_map_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁶ : StrictOrderedCommRing R\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\ns : AffineSubspace R P\nx y : P\nf : AffineEquiv R P P'\n⊢ Iff ((AffineSubspace.map (↑f) s).SOppSide (f x) (f y)) (s.SOppSide x y)","decl":"@[simp]\ntheorem _root_.AffineEquiv.sOppSide_map_iff {s : AffineSubspace R P} {x y : P} (f : P ≃ᵃ[R] P') :\n    (s.map ↑f).SOppSide (f x) (f y) ↔ s.SOppSide x y :=\n  (show Function.Injective f.toAffineMap from f.injective).sOppSide_map_iff\n\n"}
{"name":"AffineSubspace.WSameSide.nonempty","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.WSameSide x y\n⊢ (↑s).Nonempty","decl":"theorem WSameSide.nonempty {s : AffineSubspace R P} {x y : P} (h : s.WSameSide x y) :\n    (s : Set P).Nonempty :=\n  ⟨h.choose, h.choose_spec.left⟩\n\n"}
{"name":"AffineSubspace.SSameSide.nonempty","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SSameSide x y\n⊢ (↑s).Nonempty","decl":"theorem SSameSide.nonempty {s : AffineSubspace R P} {x y : P} (h : s.SSameSide x y) :\n    (s : Set P).Nonempty :=\n  ⟨h.1.choose, h.1.choose_spec.left⟩\n\n"}
{"name":"AffineSubspace.WOppSide.nonempty","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.WOppSide x y\n⊢ (↑s).Nonempty","decl":"theorem WOppSide.nonempty {s : AffineSubspace R P} {x y : P} (h : s.WOppSide x y) :\n    (s : Set P).Nonempty :=\n  ⟨h.choose, h.choose_spec.left⟩\n\n"}
{"name":"AffineSubspace.SOppSide.nonempty","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ (↑s).Nonempty","decl":"theorem SOppSide.nonempty {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) :\n    (s : Set P).Nonempty :=\n  ⟨h.1.choose, h.1.choose_spec.left⟩\n\n"}
{"name":"AffineSubspace.SSameSide.wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SSameSide x y\n⊢ s.WSameSide x y","decl":"theorem SSameSide.wSameSide {s : AffineSubspace R P} {x y : P} (h : s.SSameSide x y) :\n    s.WSameSide x y :=\n  h.1\n\n"}
{"name":"AffineSubspace.SSameSide.left_not_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SSameSide x y\n⊢ Not (Membership.mem s x)","decl":"theorem SSameSide.left_not_mem {s : AffineSubspace R P} {x y : P} (h : s.SSameSide x y) : x ∉ s :=\n  h.2.1\n\n"}
{"name":"AffineSubspace.SSameSide.right_not_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SSameSide x y\n⊢ Not (Membership.mem s y)","decl":"theorem SSameSide.right_not_mem {s : AffineSubspace R P} {x y : P} (h : s.SSameSide x y) : y ∉ s :=\n  h.2.2\n\n"}
{"name":"AffineSubspace.SOppSide.wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ s.WOppSide x y","decl":"theorem SOppSide.wOppSide {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) :\n    s.WOppSide x y :=\n  h.1\n\n"}
{"name":"AffineSubspace.SOppSide.left_not_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ Not (Membership.mem s x)","decl":"theorem SOppSide.left_not_mem {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) : x ∉ s :=\n  h.2.1\n\n"}
{"name":"AffineSubspace.SOppSide.right_not_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ Not (Membership.mem s y)","decl":"theorem SOppSide.right_not_mem {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) : y ∉ s :=\n  h.2.2\n\n"}
{"name":"AffineSubspace.wSameSide_comm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\n⊢ Iff (s.WSameSide x y) (s.WSameSide y x)","decl":"theorem wSameSide_comm {s : AffineSubspace R P} {x y : P} : s.WSameSide x y ↔ s.WSameSide y x :=\n  ⟨fun ⟨p₁, hp₁, p₂, hp₂, h⟩ => ⟨p₂, hp₂, p₁, hp₁, h.symm⟩,\n    fun ⟨p₁, hp₁, p₂, hp₂, h⟩ => ⟨p₂, hp₂, p₁, hp₁, h.symm⟩⟩\n\n"}
{"name":"AffineSubspace.WSameSide.symm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\na✝ : s.WSameSide x y\n⊢ s.WSameSide y x","decl":"alias ⟨WSameSide.symm, _⟩ := wSameSide_comm\n\n"}
{"name":"AffineSubspace.sSameSide_comm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\n⊢ Iff (s.SSameSide x y) (s.SSameSide y x)","decl":"theorem sSameSide_comm {s : AffineSubspace R P} {x y : P} : s.SSameSide x y ↔ s.SSameSide y x := by\n  rw [SSameSide, SSameSide, wSameSide_comm, and_comm (b := x ∉ s)]\n\n"}
{"name":"AffineSubspace.SSameSide.symm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\na✝ : s.SSameSide x y\n⊢ s.SSameSide y x","decl":"alias ⟨SSameSide.symm, _⟩ := sSameSide_comm\n\n"}
{"name":"AffineSubspace.wOppSide_comm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\n⊢ Iff (s.WOppSide x y) (s.WOppSide y x)","decl":"theorem wOppSide_comm {s : AffineSubspace R P} {x y : P} : s.WOppSide x y ↔ s.WOppSide y x := by\n  constructor\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    refine ⟨p₂, hp₂, p₁, hp₁, ?_⟩\n    rwa [SameRay.sameRay_comm, ← sameRay_neg_iff, neg_vsub_eq_vsub_rev, neg_vsub_eq_vsub_rev]\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    refine ⟨p₂, hp₂, p₁, hp₁, ?_⟩\n    rwa [SameRay.sameRay_comm, ← sameRay_neg_iff, neg_vsub_eq_vsub_rev, neg_vsub_eq_vsub_rev]\n\n"}
{"name":"AffineSubspace.WOppSide.symm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\na✝ : s.WOppSide x y\n⊢ s.WOppSide y x","decl":"alias ⟨WOppSide.symm, _⟩ := wOppSide_comm\n\n"}
{"name":"AffineSubspace.sOppSide_comm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\n⊢ Iff (s.SOppSide x y) (s.SOppSide y x)","decl":"theorem sOppSide_comm {s : AffineSubspace R P} {x y : P} : s.SOppSide x y ↔ s.SOppSide y x := by\n  rw [SOppSide, SOppSide, wOppSide_comm, and_comm (b := x ∉ s)]\n\n"}
{"name":"AffineSubspace.SOppSide.symm","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\na✝ : s.SOppSide x y\n⊢ s.SOppSide y x","decl":"alias ⟨SOppSide.symm, _⟩ := sOppSide_comm\n\n"}
{"name":"AffineSubspace.not_wSameSide_bot","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Not (Bot.bot.WSameSide x y)","decl":"theorem not_wSameSide_bot (x y : P) : ¬(⊥ : AffineSubspace R P).WSameSide x y :=\n  fun ⟨_, h, _⟩ => h.elim\n\n"}
{"name":"AffineSubspace.not_sSameSide_bot","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Not (Bot.bot.SSameSide x y)","decl":"theorem not_sSameSide_bot (x y : P) : ¬(⊥ : AffineSubspace R P).SSameSide x y :=\n  fun h => not_wSameSide_bot x y h.wSameSide\n\n"}
{"name":"AffineSubspace.not_wOppSide_bot","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Not (Bot.bot.WOppSide x y)","decl":"theorem not_wOppSide_bot (x y : P) : ¬(⊥ : AffineSubspace R P).WOppSide x y :=\n  fun ⟨_, h, _⟩ => h.elim\n\n"}
{"name":"AffineSubspace.not_sOppSide_bot","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Not (Bot.bot.SOppSide x y)","decl":"theorem not_sOppSide_bot (x y : P) : ¬(⊥ : AffineSubspace R P).SOppSide x y :=\n  fun h => not_wOppSide_bot x y h.wOppSide\n\n"}
{"name":"AffineSubspace.wSameSide_self_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx : P\n⊢ Iff (s.WSameSide x x) (↑s).Nonempty","decl":"@[simp]\ntheorem wSameSide_self_iff {s : AffineSubspace R P} {x : P} :\n    s.WSameSide x x ↔ (s : Set P).Nonempty :=\n  ⟨fun h => h.nonempty, fun ⟨p, hp⟩ => ⟨p, hp, p, hp, SameRay.rfl⟩⟩\n\n"}
{"name":"AffineSubspace.sSameSide_self_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx : P\n⊢ Iff (s.SSameSide x x) (And (↑s).Nonempty (Not (Membership.mem s x)))","decl":"theorem sSameSide_self_iff {s : AffineSubspace R P} {x : P} :\n    s.SSameSide x x ↔ (s : Set P).Nonempty ∧ x ∉ s :=\n  ⟨fun ⟨h, hx, _⟩ => ⟨wSameSide_self_iff.1 h, hx⟩, fun ⟨h, hx⟩ => ⟨wSameSide_self_iff.2 h, hx, hx⟩⟩\n\n"}
{"name":"AffineSubspace.wSameSide_of_left_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\n⊢ s.WSameSide x y","decl":"theorem wSameSide_of_left_mem {s : AffineSubspace R P} {x : P} (y : P) (hx : x ∈ s) :\n    s.WSameSide x y := by\n  refine ⟨x, hx, x, hx, ?_⟩\n  rw [vsub_self]\n  apply SameRay.zero_left\n\n"}
{"name":"AffineSubspace.wSameSide_of_right_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhy : Membership.mem s y\n⊢ s.WSameSide x y","decl":"theorem wSameSide_of_right_mem {s : AffineSubspace R P} (x : P) {y : P} (hy : y ∈ s) :\n    s.WSameSide x y :=\n  (wSameSide_of_left_mem x hy).symm\n\n"}
{"name":"AffineSubspace.wOppSide_of_left_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\n⊢ s.WOppSide x y","decl":"theorem wOppSide_of_left_mem {s : AffineSubspace R P} {x : P} (y : P) (hx : x ∈ s) :\n    s.WOppSide x y := by\n  refine ⟨x, hx, x, hx, ?_⟩\n  rw [vsub_self]\n  apply SameRay.zero_left\n\n"}
{"name":"AffineSubspace.wOppSide_of_right_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhy : Membership.mem s y\n⊢ s.WOppSide x y","decl":"theorem wOppSide_of_right_mem {s : AffineSubspace R P} (x : P) {y : P} (hy : y ∈ s) :\n    s.WOppSide x y :=\n  (wOppSide_of_left_mem x hy).symm\n\n"}
{"name":"AffineSubspace.wSameSide_vadd_left_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.WSameSide (HVAdd.hVAdd v x) y) (s.WSameSide x y)","decl":"theorem wSameSide_vadd_left_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.WSameSide (v +ᵥ x) y ↔ s.WSameSide x y := by\n  constructor\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    refine\n      ⟨-v +ᵥ p₁, AffineSubspace.vadd_mem_of_mem_direction (Submodule.neg_mem _ hv) hp₁, p₂, hp₂, ?_⟩\n    rwa [vsub_vadd_eq_vsub_sub, sub_neg_eq_add, add_comm, ← vadd_vsub_assoc]\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    refine ⟨v +ᵥ p₁, AffineSubspace.vadd_mem_of_mem_direction hv hp₁, p₂, hp₂, ?_⟩\n    rwa [vadd_vsub_vadd_cancel_left]\n\n"}
{"name":"AffineSubspace.wSameSide_vadd_right_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.WSameSide x (HVAdd.hVAdd v y)) (s.WSameSide x y)","decl":"theorem wSameSide_vadd_right_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.WSameSide x (v +ᵥ y) ↔ s.WSameSide x y := by\n  rw [wSameSide_comm, wSameSide_vadd_left_iff hv, wSameSide_comm]\n\n"}
{"name":"AffineSubspace.sSameSide_vadd_left_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.SSameSide (HVAdd.hVAdd v x) y) (s.SSameSide x y)","decl":"theorem sSameSide_vadd_left_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.SSameSide (v +ᵥ x) y ↔ s.SSameSide x y := by\n  rw [SSameSide, SSameSide, wSameSide_vadd_left_iff hv, vadd_mem_iff_mem_of_mem_direction hv]\n\n"}
{"name":"AffineSubspace.sSameSide_vadd_right_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.SSameSide x (HVAdd.hVAdd v y)) (s.SSameSide x y)","decl":"theorem sSameSide_vadd_right_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.SSameSide x (v +ᵥ y) ↔ s.SSameSide x y := by\n  rw [sSameSide_comm, sSameSide_vadd_left_iff hv, sSameSide_comm]\n\n"}
{"name":"AffineSubspace.wOppSide_vadd_left_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.WOppSide (HVAdd.hVAdd v x) y) (s.WOppSide x y)","decl":"theorem wOppSide_vadd_left_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.WOppSide (v +ᵥ x) y ↔ s.WOppSide x y := by\n  constructor\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    refine\n      ⟨-v +ᵥ p₁, AffineSubspace.vadd_mem_of_mem_direction (Submodule.neg_mem _ hv) hp₁, p₂, hp₂, ?_⟩\n    rwa [vsub_vadd_eq_vsub_sub, sub_neg_eq_add, add_comm, ← vadd_vsub_assoc]\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    refine ⟨v +ᵥ p₁, AffineSubspace.vadd_mem_of_mem_direction hv hp₁, p₂, hp₂, ?_⟩\n    rwa [vadd_vsub_vadd_cancel_left]\n\n"}
{"name":"AffineSubspace.wOppSide_vadd_right_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.WOppSide x (HVAdd.hVAdd v y)) (s.WOppSide x y)","decl":"theorem wOppSide_vadd_right_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.WOppSide x (v +ᵥ y) ↔ s.WOppSide x y := by\n  rw [wOppSide_comm, wOppSide_vadd_left_iff hv, wOppSide_comm]\n\n"}
{"name":"AffineSubspace.sOppSide_vadd_left_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.SOppSide (HVAdd.hVAdd v x) y) (s.SOppSide x y)","decl":"theorem sOppSide_vadd_left_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.SOppSide (v +ᵥ x) y ↔ s.SOppSide x y := by\n  rw [SOppSide, SOppSide, wOppSide_vadd_left_iff hv, vadd_mem_iff_mem_of_mem_direction hv]\n\n"}
{"name":"AffineSubspace.sOppSide_vadd_right_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nv : V\nhv : Membership.mem s.direction v\n⊢ Iff (s.SOppSide x (HVAdd.hVAdd v y)) (s.SOppSide x y)","decl":"theorem sOppSide_vadd_right_iff {s : AffineSubspace R P} {x y : P} {v : V} (hv : v ∈ s.direction) :\n    s.SOppSide x (v +ᵥ y) ↔ s.SOppSide x y := by\n  rw [sOppSide_comm, sOppSide_vadd_left_iff hv, sOppSide_comm]\n\n"}
{"name":"AffineSubspace.wSameSide_smul_vsub_vadd_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\np₁ p₂ x : P\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LE.le 0 t\n⊢ s.WSameSide (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂) x","decl":"theorem wSameSide_smul_vsub_vadd_left {s : AffineSubspace R P} {p₁ p₂ : P} (x : P) (hp₁ : p₁ ∈ s)\n    (hp₂ : p₂ ∈ s) {t : R} (ht : 0 ≤ t) : s.WSameSide (t • (x -ᵥ p₁) +ᵥ p₂) x := by\n  refine ⟨p₂, hp₂, p₁, hp₁, ?_⟩\n  rw [vadd_vsub]\n  exact SameRay.sameRay_nonneg_smul_left _ ht\n\n"}
{"name":"AffineSubspace.wSameSide_smul_vsub_vadd_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\np₁ p₂ x : P\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LE.le 0 t\n⊢ s.WSameSide x (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂)","decl":"theorem wSameSide_smul_vsub_vadd_right {s : AffineSubspace R P} {p₁ p₂ : P} (x : P) (hp₁ : p₁ ∈ s)\n    (hp₂ : p₂ ∈ s) {t : R} (ht : 0 ≤ t) : s.WSameSide x (t • (x -ᵥ p₁) +ᵥ p₂) :=\n  (wSameSide_smul_vsub_vadd_left x hp₁ hp₂ ht).symm\n\n"}
{"name":"AffineSubspace.wSameSide_lineMap_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : Membership.mem s x\nt : R\nht : LE.le 0 t\n⊢ s.WSameSide ((AffineMap.lineMap x y) t) y","decl":"theorem wSameSide_lineMap_left {s : AffineSubspace R P} {x : P} (y : P) (h : x ∈ s) {t : R}\n    (ht : 0 ≤ t) : s.WSameSide (lineMap x y t) y :=\n  wSameSide_smul_vsub_vadd_left y h h ht\n\n"}
{"name":"AffineSubspace.wSameSide_lineMap_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : Membership.mem s x\nt : R\nht : LE.le 0 t\n⊢ s.WSameSide y ((AffineMap.lineMap x y) t)","decl":"theorem wSameSide_lineMap_right {s : AffineSubspace R P} {x : P} (y : P) (h : x ∈ s) {t : R}\n    (ht : 0 ≤ t) : s.WSameSide y (lineMap x y t) :=\n  (wSameSide_lineMap_left y h ht).symm\n\n"}
{"name":"AffineSubspace.wOppSide_smul_vsub_vadd_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\np₁ p₂ x : P\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LE.le t 0\n⊢ s.WOppSide (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂) x","decl":"theorem wOppSide_smul_vsub_vadd_left {s : AffineSubspace R P} {p₁ p₂ : P} (x : P) (hp₁ : p₁ ∈ s)\n    (hp₂ : p₂ ∈ s) {t : R} (ht : t ≤ 0) : s.WOppSide (t • (x -ᵥ p₁) +ᵥ p₂) x := by\n  refine ⟨p₂, hp₂, p₁, hp₁, ?_⟩\n  rw [vadd_vsub, ← neg_neg t, neg_smul, ← smul_neg, neg_vsub_eq_vsub_rev]\n  exact SameRay.sameRay_nonneg_smul_left _ (neg_nonneg.2 ht)\n\n"}
{"name":"AffineSubspace.wOppSide_smul_vsub_vadd_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\np₁ p₂ x : P\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LE.le t 0\n⊢ s.WOppSide x (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂)","decl":"theorem wOppSide_smul_vsub_vadd_right {s : AffineSubspace R P} {p₁ p₂ : P} (x : P) (hp₁ : p₁ ∈ s)\n    (hp₂ : p₂ ∈ s) {t : R} (ht : t ≤ 0) : s.WOppSide x (t • (x -ᵥ p₁) +ᵥ p₂) :=\n  (wOppSide_smul_vsub_vadd_left x hp₁ hp₂ ht).symm\n\n"}
{"name":"AffineSubspace.wOppSide_lineMap_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : Membership.mem s x\nt : R\nht : LE.le t 0\n⊢ s.WOppSide ((AffineMap.lineMap x y) t) y","decl":"theorem wOppSide_lineMap_left {s : AffineSubspace R P} {x : P} (y : P) (h : x ∈ s) {t : R}\n    (ht : t ≤ 0) : s.WOppSide (lineMap x y t) y :=\n  wOppSide_smul_vsub_vadd_left y h h ht\n\n"}
{"name":"AffineSubspace.wOppSide_lineMap_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : Membership.mem s x\nt : R\nht : LE.le t 0\n⊢ s.WOppSide y ((AffineMap.lineMap x y) t)","decl":"theorem wOppSide_lineMap_right {s : AffineSubspace R P} {x : P} (y : P) (h : x ∈ s) {t : R}\n    (ht : t ≤ 0) : s.WOppSide y (lineMap x y t) :=\n  (wOppSide_lineMap_left y h ht).symm\n\n"}
{"name":"Wbtw.wSameSide₂₃","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Wbtw R x y z\nhx : Membership.mem s x\n⊢ s.WSameSide y z","decl":"theorem _root_.Wbtw.wSameSide₂₃ {s : AffineSubspace R P} {x y z : P} (h : Wbtw R x y z)\n    (hx : x ∈ s) : s.WSameSide y z := by\n  rcases h with ⟨t, ⟨ht0, -⟩, rfl⟩\n  exact wSameSide_lineMap_left z hx ht0\n\n"}
{"name":"Wbtw.wSameSide₃₂","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Wbtw R x y z\nhx : Membership.mem s x\n⊢ s.WSameSide z y","decl":"theorem _root_.Wbtw.wSameSide₃₂ {s : AffineSubspace R P} {x y z : P} (h : Wbtw R x y z)\n    (hx : x ∈ s) : s.WSameSide z y :=\n  (h.wSameSide₂₃ hx).symm\n\n"}
{"name":"Wbtw.wSameSide₁₂","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Wbtw R x y z\nhz : Membership.mem s z\n⊢ s.WSameSide x y","decl":"theorem _root_.Wbtw.wSameSide₁₂ {s : AffineSubspace R P} {x y z : P} (h : Wbtw R x y z)\n    (hz : z ∈ s) : s.WSameSide x y :=\n  h.symm.wSameSide₃₂ hz\n\n"}
{"name":"Wbtw.wSameSide₂₁","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Wbtw R x y z\nhz : Membership.mem s z\n⊢ s.WSameSide y x","decl":"theorem _root_.Wbtw.wSameSide₂₁ {s : AffineSubspace R P} {x y z : P} (h : Wbtw R x y z)\n    (hz : z ∈ s) : s.WSameSide y x :=\n  h.symm.wSameSide₂₃ hz\n\n"}
{"name":"Wbtw.wOppSide₁₃","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Wbtw R x y z\nhy : Membership.mem s y\n⊢ s.WOppSide x z","decl":"theorem _root_.Wbtw.wOppSide₁₃ {s : AffineSubspace R P} {x y z : P} (h : Wbtw R x y z)\n    (hy : y ∈ s) : s.WOppSide x z := by\n  rcases h with ⟨t, ⟨ht0, ht1⟩, rfl⟩\n  refine ⟨_, hy, _, hy, ?_⟩\n  rcases ht1.lt_or_eq with (ht1' | rfl); swap\n  · rw [lineMap_apply_one]; simp\n  rcases ht0.lt_or_eq with (ht0' | rfl); swap\n  · rw [lineMap_apply_zero]; simp\n  refine Or.inr (Or.inr ⟨1 - t, t, sub_pos.2 ht1', ht0', ?_⟩)\n  rw [lineMap_apply, vadd_vsub_assoc, vsub_vadd_eq_vsub_sub, ← neg_vsub_eq_vsub_rev z, vsub_self]\n  module\n\n"}
{"name":"Wbtw.wOppSide₃₁","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : StrictOrderedCommRing R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Wbtw R x y z\nhy : Membership.mem s y\n⊢ s.WOppSide z x","decl":"theorem _root_.Wbtw.wOppSide₃₁ {s : AffineSubspace R P} {x y z : P} (h : Wbtw R x y z)\n    (hy : y ∈ s) : s.WOppSide z x :=\n  h.symm.wOppSide₁₃ hy\n\n"}
{"name":"AffineSubspace.wOppSide_self_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx : P\n⊢ Iff (s.WOppSide x x) (Membership.mem s x)","decl":"@[simp]\ntheorem wOppSide_self_iff {s : AffineSubspace R P} {x : P} : s.WOppSide x x ↔ x ∈ s := by\n  constructor\n  · rintro ⟨p₁, hp₁, p₂, hp₂, h⟩\n    obtain ⟨a, -, -, -, -, h₁, -⟩ := h.exists_eq_smul_add\n    rw [add_comm, vsub_add_vsub_cancel, ← eq_vadd_iff_vsub_eq] at h₁\n    rw [h₁]\n    exact s.smul_vsub_vadd_mem a hp₂ hp₁ hp₁\n  · exact fun h => ⟨x, h, x, h, SameRay.rfl⟩\n\n"}
{"name":"AffineSubspace.not_sOppSide_self","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx : P\n⊢ Not (s.SOppSide x x)","decl":"theorem not_sOppSide_self (s : AffineSubspace R P) (x : P) : ¬s.SOppSide x x := by\n  rw [SOppSide]\n  simp\n\n"}
{"name":"AffineSubspace.wSameSide_iff_exists_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₁ : P\nh : Membership.mem s p₁\n⊢ Iff (s.WSameSide x y) (Or (Membership.mem s x) (Exists fun p₂ => And (Membership.mem s p₂) (SameRay R (VSub.vsub x p₁) (VSub.vsub y p₂))))","decl":"theorem wSameSide_iff_exists_left {s : AffineSubspace R P} {x y p₁ : P} (h : p₁ ∈ s) :\n    s.WSameSide x y ↔ x ∈ s ∨ ∃ p₂ ∈ s, SameRay R (x -ᵥ p₁) (y -ᵥ p₂) := by\n  constructor\n  · rintro ⟨p₁', hp₁', p₂', hp₂', h0 | h0 | ⟨r₁, r₂, hr₁, hr₂, hr⟩⟩\n    · rw [vsub_eq_zero_iff_eq] at h0\n      rw [h0]\n      exact Or.inl hp₁'\n    · refine Or.inr ⟨p₂', hp₂', ?_⟩\n      rw [h0]\n      exact SameRay.zero_right _\n    · refine Or.inr ⟨(r₁ / r₂) • (p₁ -ᵥ p₁') +ᵥ p₂', s.smul_vsub_vadd_mem _ h hp₁' hp₂',\n        Or.inr (Or.inr ⟨r₁, r₂, hr₁, hr₂, ?_⟩)⟩\n      rw [vsub_vadd_eq_vsub_sub, smul_sub, ← hr, smul_smul, mul_div_cancel₀ _ hr₂.ne.symm,\n        ← smul_sub, vsub_sub_vsub_cancel_right]\n  · rintro (h' | ⟨h₁, h₂, h₃⟩)\n    · exact wSameSide_of_left_mem y h'\n    · exact ⟨p₁, h, h₁, h₂, h₃⟩\n\n"}
{"name":"AffineSubspace.wSameSide_iff_exists_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₂ : P\nh : Membership.mem s p₂\n⊢ Iff (s.WSameSide x y) (Or (Membership.mem s y) (Exists fun p₁ => And (Membership.mem s p₁) (SameRay R (VSub.vsub x p₁) (VSub.vsub y p₂))))","decl":"theorem wSameSide_iff_exists_right {s : AffineSubspace R P} {x y p₂ : P} (h : p₂ ∈ s) :\n    s.WSameSide x y ↔ y ∈ s ∨ ∃ p₁ ∈ s, SameRay R (x -ᵥ p₁) (y -ᵥ p₂) := by\n  rw [wSameSide_comm, wSameSide_iff_exists_left h]\n  simp_rw [SameRay.sameRay_comm]\n\n"}
{"name":"AffineSubspace.sSameSide_iff_exists_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₁ : P\nh : Membership.mem s p₁\n⊢ Iff (s.SSameSide x y) (And (Not (Membership.mem s x)) (And (Not (Membership.mem s y)) (Exists fun p₂ => And (Membership.mem s p₂) (SameRay R (VSub.vsub x p₁) (VSub.vsub y p₂)))))","decl":"theorem sSameSide_iff_exists_left {s : AffineSubspace R P} {x y p₁ : P} (h : p₁ ∈ s) :\n    s.SSameSide x y ↔ x ∉ s ∧ y ∉ s ∧ ∃ p₂ ∈ s, SameRay R (x -ᵥ p₁) (y -ᵥ p₂) := by\n  rw [SSameSide, and_comm, wSameSide_iff_exists_left h, and_assoc, and_congr_right_iff]\n  intro hx\n  rw [or_iff_right hx]\n\n"}
{"name":"AffineSubspace.sSameSide_iff_exists_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₂ : P\nh : Membership.mem s p₂\n⊢ Iff (s.SSameSide x y) (And (Not (Membership.mem s x)) (And (Not (Membership.mem s y)) (Exists fun p₁ => And (Membership.mem s p₁) (SameRay R (VSub.vsub x p₁) (VSub.vsub y p₂)))))","decl":"theorem sSameSide_iff_exists_right {s : AffineSubspace R P} {x y p₂ : P} (h : p₂ ∈ s) :\n    s.SSameSide x y ↔ x ∉ s ∧ y ∉ s ∧ ∃ p₁ ∈ s, SameRay R (x -ᵥ p₁) (y -ᵥ p₂) := by\n  rw [sSameSide_comm, sSameSide_iff_exists_left h, ← and_assoc, and_comm (a := y ∉ s), and_assoc]\n  simp_rw [SameRay.sameRay_comm]\n\n"}
{"name":"AffineSubspace.wOppSide_iff_exists_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₁ : P\nh : Membership.mem s p₁\n⊢ Iff (s.WOppSide x y) (Or (Membership.mem s x) (Exists fun p₂ => And (Membership.mem s p₂) (SameRay R (VSub.vsub x p₁) (VSub.vsub p₂ y))))","decl":"theorem wOppSide_iff_exists_left {s : AffineSubspace R P} {x y p₁ : P} (h : p₁ ∈ s) :\n    s.WOppSide x y ↔ x ∈ s ∨ ∃ p₂ ∈ s, SameRay R (x -ᵥ p₁) (p₂ -ᵥ y) := by\n  constructor\n  · rintro ⟨p₁', hp₁', p₂', hp₂', h0 | h0 | ⟨r₁, r₂, hr₁, hr₂, hr⟩⟩\n    · rw [vsub_eq_zero_iff_eq] at h0\n      rw [h0]\n      exact Or.inl hp₁'\n    · refine Or.inr ⟨p₂', hp₂', ?_⟩\n      rw [h0]\n      exact SameRay.zero_right _\n    · refine Or.inr ⟨(-r₁ / r₂) • (p₁ -ᵥ p₁') +ᵥ p₂', s.smul_vsub_vadd_mem _ h hp₁' hp₂',\n        Or.inr (Or.inr ⟨r₁, r₂, hr₁, hr₂, ?_⟩)⟩\n      rw [vadd_vsub_assoc, ← vsub_sub_vsub_cancel_right x p₁ p₁']\n      linear_combination (norm := match_scalars <;> field_simp) hr\n      ring\n  · rintro (h' | ⟨h₁, h₂, h₃⟩)\n    · exact wOppSide_of_left_mem y h'\n    · exact ⟨p₁, h, h₁, h₂, h₃⟩\n\n"}
{"name":"AffineSubspace.wOppSide_iff_exists_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₂ : P\nh : Membership.mem s p₂\n⊢ Iff (s.WOppSide x y) (Or (Membership.mem s y) (Exists fun p₁ => And (Membership.mem s p₁) (SameRay R (VSub.vsub x p₁) (VSub.vsub p₂ y))))","decl":"theorem wOppSide_iff_exists_right {s : AffineSubspace R P} {x y p₂ : P} (h : p₂ ∈ s) :\n    s.WOppSide x y ↔ y ∈ s ∨ ∃ p₁ ∈ s, SameRay R (x -ᵥ p₁) (p₂ -ᵥ y) := by\n  rw [wOppSide_comm, wOppSide_iff_exists_left h]\n  constructor\n  · rintro (hy | ⟨p, hp, hr⟩)\n    · exact Or.inl hy\n    refine Or.inr ⟨p, hp, ?_⟩\n    rwa [SameRay.sameRay_comm, ← sameRay_neg_iff, neg_vsub_eq_vsub_rev, neg_vsub_eq_vsub_rev]\n  · rintro (hy | ⟨p, hp, hr⟩)\n    · exact Or.inl hy\n    refine Or.inr ⟨p, hp, ?_⟩\n    rwa [SameRay.sameRay_comm, ← sameRay_neg_iff, neg_vsub_eq_vsub_rev, neg_vsub_eq_vsub_rev]\n\n"}
{"name":"AffineSubspace.sOppSide_iff_exists_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₁ : P\nh : Membership.mem s p₁\n⊢ Iff (s.SOppSide x y) (And (Not (Membership.mem s x)) (And (Not (Membership.mem s y)) (Exists fun p₂ => And (Membership.mem s p₂) (SameRay R (VSub.vsub x p₁) (VSub.vsub p₂ y)))))","decl":"theorem sOppSide_iff_exists_left {s : AffineSubspace R P} {x y p₁ : P} (h : p₁ ∈ s) :\n    s.SOppSide x y ↔ x ∉ s ∧ y ∉ s ∧ ∃ p₂ ∈ s, SameRay R (x -ᵥ p₁) (p₂ -ᵥ y) := by\n  rw [SOppSide, and_comm, wOppSide_iff_exists_left h, and_assoc, and_congr_right_iff]\n  intro hx\n  rw [or_iff_right hx]\n\n"}
{"name":"AffineSubspace.sOppSide_iff_exists_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y p₂ : P\nh : Membership.mem s p₂\n⊢ Iff (s.SOppSide x y) (And (Not (Membership.mem s x)) (And (Not (Membership.mem s y)) (Exists fun p₁ => And (Membership.mem s p₁) (SameRay R (VSub.vsub x p₁) (VSub.vsub p₂ y)))))","decl":"theorem sOppSide_iff_exists_right {s : AffineSubspace R P} {x y p₂ : P} (h : p₂ ∈ s) :\n    s.SOppSide x y ↔ x ∉ s ∧ y ∉ s ∧ ∃ p₁ ∈ s, SameRay R (x -ᵥ p₁) (p₂ -ᵥ y) := by\n  rw [SOppSide, and_comm, wOppSide_iff_exists_right h, and_assoc, and_congr_right_iff,\n    and_congr_right_iff]\n  rintro _ hy\n  rw [or_iff_right hy]\n\n"}
{"name":"AffineSubspace.WSameSide.trans","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WSameSide x y\nhyz : s.WSameSide y z\nhy : Not (Membership.mem s y)\n⊢ s.WSameSide x z","decl":"theorem WSameSide.trans {s : AffineSubspace R P} {x y z : P} (hxy : s.WSameSide x y)\n    (hyz : s.WSameSide y z) (hy : y ∉ s) : s.WSameSide x z := by\n  rcases hxy with ⟨p₁, hp₁, p₂, hp₂, hxy⟩\n  rw [wSameSide_iff_exists_left hp₂, or_iff_right hy] at hyz\n  rcases hyz with ⟨p₃, hp₃, hyz⟩\n  refine ⟨p₁, hp₁, p₃, hp₃, hxy.trans hyz ?_⟩\n  refine fun h => False.elim ?_\n  rw [vsub_eq_zero_iff_eq] at h\n  exact hy (h.symm ▸ hp₂)\n\n"}
{"name":"AffineSubspace.WSameSide.trans_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WSameSide x y\nhyz : s.SSameSide y z\n⊢ s.WSameSide x z","decl":"theorem WSameSide.trans_sSameSide {s : AffineSubspace R P} {x y z : P} (hxy : s.WSameSide x y)\n    (hyz : s.SSameSide y z) : s.WSameSide x z :=\n  hxy.trans hyz.1 hyz.2.1\n\n"}
{"name":"AffineSubspace.WSameSide.trans_wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WSameSide x y\nhyz : s.WOppSide y z\nhy : Not (Membership.mem s y)\n⊢ s.WOppSide x z","decl":"theorem WSameSide.trans_wOppSide {s : AffineSubspace R P} {x y z : P} (hxy : s.WSameSide x y)\n    (hyz : s.WOppSide y z) (hy : y ∉ s) : s.WOppSide x z := by\n  rcases hxy with ⟨p₁, hp₁, p₂, hp₂, hxy⟩\n  rw [wOppSide_iff_exists_left hp₂, or_iff_right hy] at hyz\n  rcases hyz with ⟨p₃, hp₃, hyz⟩\n  refine ⟨p₁, hp₁, p₃, hp₃, hxy.trans hyz ?_⟩\n  refine fun h => False.elim ?_\n  rw [vsub_eq_zero_iff_eq] at h\n  exact hy (h.symm ▸ hp₂)\n\n"}
{"name":"AffineSubspace.WSameSide.trans_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WSameSide x y\nhyz : s.SOppSide y z\n⊢ s.WOppSide x z","decl":"theorem WSameSide.trans_sOppSide {s : AffineSubspace R P} {x y z : P} (hxy : s.WSameSide x y)\n    (hyz : s.SOppSide y z) : s.WOppSide x z :=\n  hxy.trans_wOppSide hyz.1 hyz.2.1\n\n"}
{"name":"AffineSubspace.SSameSide.trans_wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SSameSide x y\nhyz : s.WSameSide y z\n⊢ s.WSameSide x z","decl":"theorem SSameSide.trans_wSameSide {s : AffineSubspace R P} {x y z : P} (hxy : s.SSameSide x y)\n    (hyz : s.WSameSide y z) : s.WSameSide x z :=\n  (hyz.symm.trans_sSameSide hxy.symm).symm\n\n"}
{"name":"AffineSubspace.SSameSide.trans","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SSameSide x y\nhyz : s.SSameSide y z\n⊢ s.SSameSide x z","decl":"theorem SSameSide.trans {s : AffineSubspace R P} {x y z : P} (hxy : s.SSameSide x y)\n    (hyz : s.SSameSide y z) : s.SSameSide x z :=\n  ⟨hxy.wSameSide.trans_sSameSide hyz, hxy.2.1, hyz.2.2⟩\n\n"}
{"name":"AffineSubspace.SSameSide.trans_wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SSameSide x y\nhyz : s.WOppSide y z\n⊢ s.WOppSide x z","decl":"theorem SSameSide.trans_wOppSide {s : AffineSubspace R P} {x y z : P} (hxy : s.SSameSide x y)\n    (hyz : s.WOppSide y z) : s.WOppSide x z :=\n  hxy.wSameSide.trans_wOppSide hyz hxy.2.2\n\n"}
{"name":"AffineSubspace.SSameSide.trans_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SSameSide x y\nhyz : s.SOppSide y z\n⊢ s.SOppSide x z","decl":"theorem SSameSide.trans_sOppSide {s : AffineSubspace R P} {x y z : P} (hxy : s.SSameSide x y)\n    (hyz : s.SOppSide y z) : s.SOppSide x z :=\n  ⟨hxy.trans_wOppSide hyz.1, hxy.2.1, hyz.2.2⟩\n\n"}
{"name":"AffineSubspace.WOppSide.trans_wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WOppSide x y\nhyz : s.WSameSide y z\nhy : Not (Membership.mem s y)\n⊢ s.WOppSide x z","decl":"theorem WOppSide.trans_wSameSide {s : AffineSubspace R P} {x y z : P} (hxy : s.WOppSide x y)\n    (hyz : s.WSameSide y z) (hy : y ∉ s) : s.WOppSide x z :=\n  (hyz.symm.trans_wOppSide hxy.symm hy).symm\n\n"}
{"name":"AffineSubspace.WOppSide.trans_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WOppSide x y\nhyz : s.SSameSide y z\n⊢ s.WOppSide x z","decl":"theorem WOppSide.trans_sSameSide {s : AffineSubspace R P} {x y z : P} (hxy : s.WOppSide x y)\n    (hyz : s.SSameSide y z) : s.WOppSide x z :=\n  hxy.trans_wSameSide hyz.1 hyz.2.1\n\n"}
{"name":"AffineSubspace.WOppSide.trans","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WOppSide x y\nhyz : s.WOppSide y z\nhy : Not (Membership.mem s y)\n⊢ s.WSameSide x z","decl":"theorem WOppSide.trans {s : AffineSubspace R P} {x y z : P} (hxy : s.WOppSide x y)\n    (hyz : s.WOppSide y z) (hy : y ∉ s) : s.WSameSide x z := by\n  rcases hxy with ⟨p₁, hp₁, p₂, hp₂, hxy⟩\n  rw [wOppSide_iff_exists_left hp₂, or_iff_right hy] at hyz\n  rcases hyz with ⟨p₃, hp₃, hyz⟩\n  rw [← sameRay_neg_iff, neg_vsub_eq_vsub_rev, neg_vsub_eq_vsub_rev] at hyz\n  refine ⟨p₁, hp₁, p₃, hp₃, hxy.trans hyz ?_⟩\n  refine fun h => False.elim ?_\n  rw [vsub_eq_zero_iff_eq] at h\n  exact hy (h ▸ hp₂)\n\n"}
{"name":"AffineSubspace.WOppSide.trans_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.WOppSide x y\nhyz : s.SOppSide y z\n⊢ s.WSameSide x z","decl":"theorem WOppSide.trans_sOppSide {s : AffineSubspace R P} {x y z : P} (hxy : s.WOppSide x y)\n    (hyz : s.SOppSide y z) : s.WSameSide x z :=\n  hxy.trans hyz.1 hyz.2.1\n\n"}
{"name":"AffineSubspace.SOppSide.trans_wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SOppSide x y\nhyz : s.WSameSide y z\n⊢ s.WOppSide x z","decl":"theorem SOppSide.trans_wSameSide {s : AffineSubspace R P} {x y z : P} (hxy : s.SOppSide x y)\n    (hyz : s.WSameSide y z) : s.WOppSide x z :=\n  (hyz.symm.trans_sOppSide hxy.symm).symm\n\n"}
{"name":"AffineSubspace.SOppSide.trans_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SOppSide x y\nhyz : s.SSameSide y z\n⊢ s.SOppSide x z","decl":"theorem SOppSide.trans_sSameSide {s : AffineSubspace R P} {x y z : P} (hxy : s.SOppSide x y)\n    (hyz : s.SSameSide y z) : s.SOppSide x z :=\n  (hyz.symm.trans_sOppSide hxy.symm).symm\n\n"}
{"name":"AffineSubspace.SOppSide.trans_wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SOppSide x y\nhyz : s.WOppSide y z\n⊢ s.WSameSide x z","decl":"theorem SOppSide.trans_wOppSide {s : AffineSubspace R P} {x y z : P} (hxy : s.SOppSide x y)\n    (hyz : s.WOppSide y z) : s.WSameSide x z :=\n  (hyz.symm.trans_sOppSide hxy.symm).symm\n\n"}
{"name":"AffineSubspace.SOppSide.trans","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nhxy : s.SOppSide x y\nhyz : s.SOppSide y z\n⊢ s.SSameSide x z","decl":"theorem SOppSide.trans {s : AffineSubspace R P} {x y z : P} (hxy : s.SOppSide x y)\n    (hyz : s.SOppSide y z) : s.SSameSide x z :=\n  ⟨hxy.trans_wOppSide hyz.1, hxy.2.1, hyz.2.2⟩\n\n"}
{"name":"AffineSubspace.wSameSide_and_wOppSide_iff","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\n⊢ Iff (And (s.WSameSide x y) (s.WOppSide x y)) (Or (Membership.mem s x) (Membership.mem s y))","decl":"theorem wSameSide_and_wOppSide_iff {s : AffineSubspace R P} {x y : P} :\n    s.WSameSide x y ∧ s.WOppSide x y ↔ x ∈ s ∨ y ∈ s := by\n  constructor\n  · rintro ⟨hs, ho⟩\n    rw [wOppSide_comm] at ho\n    by_contra h\n    rw [not_or] at h\n    exact h.1 (wOppSide_self_iff.1 (hs.trans_wOppSide ho h.2))\n  · rintro (h | h)\n    · exact ⟨wSameSide_of_left_mem y h, wOppSide_of_left_mem y h⟩\n    · exact ⟨wSameSide_of_right_mem x h, wOppSide_of_right_mem x h⟩\n\n"}
{"name":"AffineSubspace.WSameSide.not_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.WSameSide x y\n⊢ Not (s.SOppSide x y)","decl":"theorem WSameSide.not_sOppSide {s : AffineSubspace R P} {x y : P} (h : s.WSameSide x y) :\n    ¬s.SOppSide x y := by\n  intro ho\n  have hxy := wSameSide_and_wOppSide_iff.1 ⟨h, ho.1⟩\n  rcases hxy with (hx | hy)\n  · exact ho.2.1 hx\n  · exact ho.2.2 hy\n\n"}
{"name":"AffineSubspace.SSameSide.not_wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SSameSide x y\n⊢ Not (s.WOppSide x y)","decl":"theorem SSameSide.not_wOppSide {s : AffineSubspace R P} {x y : P} (h : s.SSameSide x y) :\n    ¬s.WOppSide x y := by\n  intro ho\n  have hxy := wSameSide_and_wOppSide_iff.1 ⟨h.1, ho⟩\n  rcases hxy with (hx | hy)\n  · exact h.2.1 hx\n  · exact h.2.2 hy\n\n"}
{"name":"AffineSubspace.SSameSide.not_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SSameSide x y\n⊢ Not (s.SOppSide x y)","decl":"theorem SSameSide.not_sOppSide {s : AffineSubspace R P} {x y : P} (h : s.SSameSide x y) :\n    ¬s.SOppSide x y :=\n  fun ho => h.not_wOppSide ho.1\n\n"}
{"name":"AffineSubspace.WOppSide.not_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.WOppSide x y\n⊢ Not (s.SSameSide x y)","decl":"theorem WOppSide.not_sSameSide {s : AffineSubspace R P} {x y : P} (h : s.WOppSide x y) :\n    ¬s.SSameSide x y :=\n  fun hs => hs.not_wOppSide h\n\n"}
{"name":"AffineSubspace.SOppSide.not_wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ Not (s.WSameSide x y)","decl":"theorem SOppSide.not_wSameSide {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) :\n    ¬s.WSameSide x y :=\n  fun hs => hs.not_sOppSide h\n\n"}
{"name":"AffineSubspace.SOppSide.not_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ Not (s.SSameSide x y)","decl":"theorem SOppSide.not_sSameSide {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) :\n    ¬s.SSameSide x y :=\n  fun hs => h.not_wSameSide hs.1\n\n"}
{"name":"AffineSubspace.wOppSide_iff_exists_wbtw","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\n⊢ Iff (s.WOppSide x y) (Exists fun p => And (Membership.mem s p) (Wbtw R x p y))","decl":"theorem wOppSide_iff_exists_wbtw {s : AffineSubspace R P} {x y : P} :\n    s.WOppSide x y ↔ ∃ p ∈ s, Wbtw R x p y := by\n  refine ⟨fun h => ?_, fun ⟨p, hp, h⟩ => h.wOppSide₁₃ hp⟩\n  rcases h with ⟨p₁, hp₁, p₂, hp₂, h | h | ⟨r₁, r₂, hr₁, hr₂, h⟩⟩\n  · rw [vsub_eq_zero_iff_eq] at h\n    rw [h]\n    exact ⟨p₁, hp₁, wbtw_self_left _ _ _⟩\n  · rw [vsub_eq_zero_iff_eq] at h\n    rw [← h]\n    exact ⟨p₂, hp₂, wbtw_self_right _ _ _⟩\n  · refine ⟨lineMap x y (r₂ / (r₁ + r₂)), ?_, ?_⟩\n    · have : (r₂ / (r₁ + r₂)) • (y -ᵥ p₂ + (p₂ -ᵥ p₁) - (x -ᵥ p₁)) + (x -ᵥ p₁) =\n          (r₂ / (r₁ + r₂)) • (p₂ -ᵥ p₁) := by\n        rw [← neg_vsub_eq_vsub_rev p₂ y]\n        linear_combination (norm := match_scalars <;> field_simp) (r₁ + r₂)⁻¹ • h\n      rw [lineMap_apply, ← vsub_vadd x p₁, ← vsub_vadd y p₂, vsub_vadd_eq_vsub_sub, vadd_vsub_assoc,\n        ← vadd_assoc, vadd_eq_add, this]\n      exact s.smul_vsub_vadd_mem (r₂ / (r₁ + r₂)) hp₂ hp₁ hp₁\n    · exact Set.mem_image_of_mem _\n        ⟨by positivity,\n          div_le_one_of_le₀ (le_add_of_nonneg_left hr₁.le) (Left.add_pos hr₁ hr₂).le⟩\n\n"}
{"name":"AffineSubspace.SOppSide.exists_sbtw","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nh : s.SOppSide x y\n⊢ Exists fun p => And (Membership.mem s p) (Sbtw R x p y)","decl":"theorem SOppSide.exists_sbtw {s : AffineSubspace R P} {x y : P} (h : s.SOppSide x y) :\n    ∃ p ∈ s, Sbtw R x p y := by\n  obtain ⟨p, hp, hw⟩ := wOppSide_iff_exists_wbtw.1 h.wOppSide\n  refine ⟨p, hp, hw, ?_, ?_⟩\n  · rintro rfl\n    exact h.2.1 hp\n  · rintro rfl\n    exact h.2.2 hp\n\n"}
{"name":"Sbtw.sOppSide_of_not_mem_of_mem","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y z : P\nh : Sbtw R x y z\nhx : Not (Membership.mem s x)\nhy : Membership.mem s y\n⊢ s.SOppSide x z","decl":"theorem _root_.Sbtw.sOppSide_of_not_mem_of_mem {s : AffineSubspace R P} {x y z : P}\n    (h : Sbtw R x y z) (hx : x ∉ s) (hy : y ∈ s) : s.SOppSide x z := by\n  refine ⟨h.wbtw.wOppSide₁₃ hy, hx, fun hz => hx ?_⟩\n  rcases h with ⟨⟨t, ⟨ht0, ht1⟩, rfl⟩, hyx, hyz⟩\n  rw [lineMap_apply] at hy\n  have ht : t ≠ 1 := by\n    rintro rfl\n    simp [lineMap_apply] at hyz\n  have hy' := vsub_mem_direction hy hz\n  rw [vadd_vsub_assoc, ← neg_vsub_eq_vsub_rev z, ← neg_one_smul R (z -ᵥ x), ← add_smul,\n    ← sub_eq_add_neg, s.direction.smul_mem_iff (sub_ne_zero_of_ne ht)] at hy'\n  rwa [vadd_mem_iff_mem_of_mem_direction (Submodule.smul_mem _ _ hy')] at hy\n\n"}
{"name":"AffineSubspace.sSameSide_smul_vsub_vadd_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p₁ p₂ : P\nhx : Not (Membership.mem s x)\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LT.lt 0 t\n⊢ s.SSameSide (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂) x","decl":"theorem sSameSide_smul_vsub_vadd_left {s : AffineSubspace R P} {x p₁ p₂ : P} (hx : x ∉ s)\n    (hp₁ : p₁ ∈ s) (hp₂ : p₂ ∈ s) {t : R} (ht : 0 < t) : s.SSameSide (t • (x -ᵥ p₁) +ᵥ p₂) x := by\n  refine ⟨wSameSide_smul_vsub_vadd_left x hp₁ hp₂ ht.le, fun h => hx ?_, hx⟩\n  rwa [vadd_mem_iff_mem_direction _ hp₂, s.direction.smul_mem_iff ht.ne.symm,\n    vsub_right_mem_direction_iff_mem hp₁] at h\n\n"}
{"name":"AffineSubspace.sSameSide_smul_vsub_vadd_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p₁ p₂ : P\nhx : Not (Membership.mem s x)\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LT.lt 0 t\n⊢ s.SSameSide x (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂)","decl":"theorem sSameSide_smul_vsub_vadd_right {s : AffineSubspace R P} {x p₁ p₂ : P} (hx : x ∉ s)\n    (hp₁ : p₁ ∈ s) (hp₂ : p₂ ∈ s) {t : R} (ht : 0 < t) : s.SSameSide x (t • (x -ᵥ p₁) +ᵥ p₂) :=\n  (sSameSide_smul_vsub_vadd_left hx hp₁ hp₂ ht).symm\n\n"}
{"name":"AffineSubspace.sSameSide_lineMap_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\nhy : Not (Membership.mem s y)\nt : R\nht : LT.lt 0 t\n⊢ s.SSameSide ((AffineMap.lineMap x y) t) y","decl":"theorem sSameSide_lineMap_left {s : AffineSubspace R P} {x y : P} (hx : x ∈ s) (hy : y ∉ s) {t : R}\n    (ht : 0 < t) : s.SSameSide (lineMap x y t) y :=\n  sSameSide_smul_vsub_vadd_left hy hx hx ht\n\n"}
{"name":"AffineSubspace.sSameSide_lineMap_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\nhy : Not (Membership.mem s y)\nt : R\nht : LT.lt 0 t\n⊢ s.SSameSide y ((AffineMap.lineMap x y) t)","decl":"theorem sSameSide_lineMap_right {s : AffineSubspace R P} {x y : P} (hx : x ∈ s) (hy : y ∉ s) {t : R}\n    (ht : 0 < t) : s.SSameSide y (lineMap x y t) :=\n  (sSameSide_lineMap_left hx hy ht).symm\n\n"}
{"name":"AffineSubspace.sOppSide_smul_vsub_vadd_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p₁ p₂ : P\nhx : Not (Membership.mem s x)\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LT.lt t 0\n⊢ s.SOppSide (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂) x","decl":"theorem sOppSide_smul_vsub_vadd_left {s : AffineSubspace R P} {x p₁ p₂ : P} (hx : x ∉ s)\n    (hp₁ : p₁ ∈ s) (hp₂ : p₂ ∈ s) {t : R} (ht : t < 0) : s.SOppSide (t • (x -ᵥ p₁) +ᵥ p₂) x := by\n  refine ⟨wOppSide_smul_vsub_vadd_left x hp₁ hp₂ ht.le, fun h => hx ?_, hx⟩\n  rwa [vadd_mem_iff_mem_direction _ hp₂, s.direction.smul_mem_iff ht.ne,\n    vsub_right_mem_direction_iff_mem hp₁] at h\n\n"}
{"name":"AffineSubspace.sOppSide_smul_vsub_vadd_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p₁ p₂ : P\nhx : Not (Membership.mem s x)\nhp₁ : Membership.mem s p₁\nhp₂ : Membership.mem s p₂\nt : R\nht : LT.lt t 0\n⊢ s.SOppSide x (HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p₁)) p₂)","decl":"theorem sOppSide_smul_vsub_vadd_right {s : AffineSubspace R P} {x p₁ p₂ : P} (hx : x ∉ s)\n    (hp₁ : p₁ ∈ s) (hp₂ : p₂ ∈ s) {t : R} (ht : t < 0) : s.SOppSide x (t • (x -ᵥ p₁) +ᵥ p₂) :=\n  (sOppSide_smul_vsub_vadd_left hx hp₁ hp₂ ht).symm\n\n"}
{"name":"AffineSubspace.sOppSide_lineMap_left","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\nhy : Not (Membership.mem s y)\nt : R\nht : LT.lt t 0\n⊢ s.SOppSide ((AffineMap.lineMap x y) t) y","decl":"theorem sOppSide_lineMap_left {s : AffineSubspace R P} {x y : P} (hx : x ∈ s) (hy : y ∉ s) {t : R}\n    (ht : t < 0) : s.SOppSide (lineMap x y t) y :=\n  sOppSide_smul_vsub_vadd_left hy hx hx ht\n\n"}
{"name":"AffineSubspace.sOppSide_lineMap_right","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\nhy : Not (Membership.mem s y)\nt : R\nht : LT.lt t 0\n⊢ s.SOppSide y ((AffineMap.lineMap x y) t)","decl":"theorem sOppSide_lineMap_right {s : AffineSubspace R P} {x y : P} (hx : x ∈ s) (hy : y ∉ s) {t : R}\n    (ht : t < 0) : s.SOppSide y (lineMap x y t) :=\n  (sOppSide_lineMap_left hx hy ht).symm\n\n"}
{"name":"AffineSubspace.setOf_wSameSide_eq_image2","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p : P\nhx : Not (Membership.mem s x)\nhp : Membership.mem s p\n⊢ Eq (setOf fun y => s.WSameSide x y) (Set.image2 (fun t q => HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p)) q) (Set.Ici 0) ↑s)","decl":"theorem setOf_wSameSide_eq_image2 {s : AffineSubspace R P} {x p : P} (hx : x ∉ s) (hp : p ∈ s) :\n    { y | s.WSameSide x y } = Set.image2 (fun (t : R) q => t • (x -ᵥ p) +ᵥ q) (Set.Ici 0) s := by\n  ext y\n  simp_rw [Set.mem_setOf, Set.mem_image2, Set.mem_Ici]\n  constructor\n  · rw [wSameSide_iff_exists_left hp, or_iff_right hx]\n    rintro ⟨p₂, hp₂, h | h | ⟨r₁, r₂, hr₁, hr₂, h⟩⟩\n    · rw [vsub_eq_zero_iff_eq] at h\n      exact False.elim (hx (h.symm ▸ hp))\n    · rw [vsub_eq_zero_iff_eq] at h\n      refine ⟨0, le_rfl, p₂, hp₂, ?_⟩\n      simp [h]\n    · refine ⟨r₁ / r₂, (div_pos hr₁ hr₂).le, p₂, hp₂, ?_⟩\n      rw [div_eq_inv_mul, ← smul_smul, h, smul_smul, inv_mul_cancel₀ hr₂.ne.symm, one_smul,\n        vsub_vadd]\n  · rintro ⟨t, ht, p', hp', rfl⟩\n    exact wSameSide_smul_vsub_vadd_right x hp hp' ht\n\n"}
{"name":"AffineSubspace.setOf_sSameSide_eq_image2","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p : P\nhx : Not (Membership.mem s x)\nhp : Membership.mem s p\n⊢ Eq (setOf fun y => s.SSameSide x y) (Set.image2 (fun t q => HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p)) q) (Set.Ioi 0) ↑s)","decl":"theorem setOf_sSameSide_eq_image2 {s : AffineSubspace R P} {x p : P} (hx : x ∉ s) (hp : p ∈ s) :\n    { y | s.SSameSide x y } = Set.image2 (fun (t : R) q => t • (x -ᵥ p) +ᵥ q) (Set.Ioi 0) s := by\n  ext y\n  simp_rw [Set.mem_setOf, Set.mem_image2, Set.mem_Ioi]\n  constructor\n  · rw [sSameSide_iff_exists_left hp]\n    rintro ⟨-, hy, p₂, hp₂, h | h | ⟨r₁, r₂, hr₁, hr₂, h⟩⟩\n    · rw [vsub_eq_zero_iff_eq] at h\n      exact False.elim (hx (h.symm ▸ hp))\n    · rw [vsub_eq_zero_iff_eq] at h\n      exact False.elim (hy (h.symm ▸ hp₂))\n    · refine ⟨r₁ / r₂, div_pos hr₁ hr₂, p₂, hp₂, ?_⟩\n      rw [div_eq_inv_mul, ← smul_smul, h, smul_smul, inv_mul_cancel₀ hr₂.ne.symm, one_smul,\n        vsub_vadd]\n  · rintro ⟨t, ht, p', hp', rfl⟩\n    exact sSameSide_smul_vsub_vadd_right hx hp hp' ht\n\n"}
{"name":"AffineSubspace.setOf_wOppSide_eq_image2","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p : P\nhx : Not (Membership.mem s x)\nhp : Membership.mem s p\n⊢ Eq (setOf fun y => s.WOppSide x y) (Set.image2 (fun t q => HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p)) q) (Set.Iic 0) ↑s)","decl":"theorem setOf_wOppSide_eq_image2 {s : AffineSubspace R P} {x p : P} (hx : x ∉ s) (hp : p ∈ s) :\n    { y | s.WOppSide x y } = Set.image2 (fun (t : R) q => t • (x -ᵥ p) +ᵥ q) (Set.Iic 0) s := by\n  ext y\n  simp_rw [Set.mem_setOf, Set.mem_image2, Set.mem_Iic]\n  constructor\n  · rw [wOppSide_iff_exists_left hp, or_iff_right hx]\n    rintro ⟨p₂, hp₂, h | h | ⟨r₁, r₂, hr₁, hr₂, h⟩⟩\n    · rw [vsub_eq_zero_iff_eq] at h\n      exact False.elim (hx (h.symm ▸ hp))\n    · rw [vsub_eq_zero_iff_eq] at h\n      refine ⟨0, le_rfl, p₂, hp₂, ?_⟩\n      simp [h]\n    · refine ⟨-r₁ / r₂, (div_neg_of_neg_of_pos (Left.neg_neg_iff.2 hr₁) hr₂).le, p₂, hp₂, ?_⟩\n      rw [div_eq_inv_mul, ← smul_smul, neg_smul, h, smul_neg, smul_smul,\n        inv_mul_cancel₀ hr₂.ne.symm, one_smul, neg_vsub_eq_vsub_rev, vsub_vadd]\n  · rintro ⟨t, ht, p', hp', rfl⟩\n    exact wOppSide_smul_vsub_vadd_right x hp hp' ht\n\n"}
{"name":"AffineSubspace.setOf_sOppSide_eq_image2","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx p : P\nhx : Not (Membership.mem s x)\nhp : Membership.mem s p\n⊢ Eq (setOf fun y => s.SOppSide x y) (Set.image2 (fun t q => HVAdd.hVAdd (HSMul.hSMul t (VSub.vsub x p)) q) (Set.Iio 0) ↑s)","decl":"theorem setOf_sOppSide_eq_image2 {s : AffineSubspace R P} {x p : P} (hx : x ∉ s) (hp : p ∈ s) :\n    { y | s.SOppSide x y } = Set.image2 (fun (t : R) q => t • (x -ᵥ p) +ᵥ q) (Set.Iio 0) s := by\n  ext y\n  simp_rw [Set.mem_setOf, Set.mem_image2, Set.mem_Iio]\n  constructor\n  · rw [sOppSide_iff_exists_left hp]\n    rintro ⟨-, hy, p₂, hp₂, h | h | ⟨r₁, r₂, hr₁, hr₂, h⟩⟩\n    · rw [vsub_eq_zero_iff_eq] at h\n      exact False.elim (hx (h.symm ▸ hp))\n    · rw [vsub_eq_zero_iff_eq] at h\n      exact False.elim (hy (h ▸ hp₂))\n    · refine ⟨-r₁ / r₂, div_neg_of_neg_of_pos (Left.neg_neg_iff.2 hr₁) hr₂, p₂, hp₂, ?_⟩\n      rw [div_eq_inv_mul, ← smul_smul, neg_smul, h, smul_neg, smul_smul,\n        inv_mul_cancel₀ hr₂.ne.symm, one_smul, neg_vsub_eq_vsub_rev, vsub_vadd]\n  · rintro ⟨t, ht, p', hp', rfl⟩\n    exact sOppSide_smul_vsub_vadd_right hx hp hp' ht\n\n"}
{"name":"AffineSubspace.wOppSide_pointReflection","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\n⊢ s.WOppSide y ((AffineEquiv.pointReflection R x) y)","decl":"theorem wOppSide_pointReflection {s : AffineSubspace R P} {x : P} (y : P) (hx : x ∈ s) :\n    s.WOppSide y (pointReflection R x y) :=\n  (wbtw_pointReflection R _ _).wOppSide₁₃ hx\n\n"}
{"name":"AffineSubspace.sOppSide_pointReflection","module":"Mathlib.Analysis.Convex.Side","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝³ : LinearOrderedField R\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\ns : AffineSubspace R P\nx y : P\nhx : Membership.mem s x\nhy : Not (Membership.mem s y)\n⊢ s.SOppSide y ((AffineEquiv.pointReflection R x) y)","decl":"theorem sOppSide_pointReflection {s : AffineSubspace R P} {x y : P} (hx : x ∈ s) (hy : y ∉ s) :\n    s.SOppSide y (pointReflection R x y) := by\n  refine (sbtw_pointReflection_of_ne R fun h => hy ?_).sOppSide_of_not_mem_of_mem hy hx\n  rwa [← h]\n\n"}
{"name":"AffineSubspace.isConnected_setOf_wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\nh : (↑s).Nonempty\n⊢ IsConnected (setOf fun y => s.WSameSide x y)","decl":"theorem isConnected_setOf_wSameSide {s : AffineSubspace ℝ P} (x : P) (h : (s : Set P).Nonempty) :\n    IsConnected { y | s.WSameSide x y } := by\n  obtain ⟨p, hp⟩ := h\n  haveI : Nonempty s := ⟨⟨p, hp⟩⟩\n  by_cases hx : x ∈ s\n  · simp only [wSameSide_of_left_mem, hx]\n    have := AddTorsor.connectedSpace V P\n    exact isConnected_univ\n  · rw [setOf_wSameSide_eq_image2 hx hp, ← Set.image_prod]\n    refine (isConnected_Ici.prod (isConnected_iff_connectedSpace.2 ?_)).image _\n      ((continuous_fst.smul continuous_const).vadd continuous_snd).continuousOn\n    convert AddTorsor.connectedSpace s.direction s\n\n"}
{"name":"AffineSubspace.isPreconnected_setOf_wSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\n⊢ IsPreconnected (setOf fun y => s.WSameSide x y)","decl":"theorem isPreconnected_setOf_wSameSide (s : AffineSubspace ℝ P) (x : P) :\n    IsPreconnected { y | s.WSameSide x y } := by\n  rcases Set.eq_empty_or_nonempty (s : Set P) with (h | h)\n  · rw [coe_eq_bot_iff] at h\n    simp only [h, not_wSameSide_bot]\n    exact isPreconnected_empty\n  · exact (isConnected_setOf_wSameSide x h).isPreconnected\n\n"}
{"name":"AffineSubspace.isConnected_setOf_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\nhx : Not (Membership.mem s x)\nh : (↑s).Nonempty\n⊢ IsConnected (setOf fun y => s.SSameSide x y)","decl":"theorem isConnected_setOf_sSameSide {s : AffineSubspace ℝ P} {x : P} (hx : x ∉ s)\n    (h : (s : Set P).Nonempty) : IsConnected { y | s.SSameSide x y } := by\n  obtain ⟨p, hp⟩ := h\n  haveI : Nonempty s := ⟨⟨p, hp⟩⟩\n  rw [setOf_sSameSide_eq_image2 hx hp, ← Set.image_prod]\n  refine (isConnected_Ioi.prod (isConnected_iff_connectedSpace.2 ?_)).image _\n    ((continuous_fst.smul continuous_const).vadd continuous_snd).continuousOn\n  convert AddTorsor.connectedSpace s.direction s\n\n"}
{"name":"AffineSubspace.isPreconnected_setOf_sSameSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\n⊢ IsPreconnected (setOf fun y => s.SSameSide x y)","decl":"theorem isPreconnected_setOf_sSameSide (s : AffineSubspace ℝ P) (x : P) :\n    IsPreconnected { y | s.SSameSide x y } := by\n  rcases Set.eq_empty_or_nonempty (s : Set P) with (h | h)\n  · rw [coe_eq_bot_iff] at h\n    simp only [h, not_sSameSide_bot]\n    exact isPreconnected_empty\n  · by_cases hx : x ∈ s\n    · simp only [hx, SSameSide, not_true, false_and, and_false]\n      exact isPreconnected_empty\n    · exact (isConnected_setOf_sSameSide hx h).isPreconnected\n\n"}
{"name":"AffineSubspace.isConnected_setOf_wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\nh : (↑s).Nonempty\n⊢ IsConnected (setOf fun y => s.WOppSide x y)","decl":"theorem isConnected_setOf_wOppSide {s : AffineSubspace ℝ P} (x : P) (h : (s : Set P).Nonempty) :\n    IsConnected { y | s.WOppSide x y } := by\n  obtain ⟨p, hp⟩ := h\n  haveI : Nonempty s := ⟨⟨p, hp⟩⟩\n  by_cases hx : x ∈ s\n  · simp only [wOppSide_of_left_mem, hx]\n    have := AddTorsor.connectedSpace V P\n    exact isConnected_univ\n  · rw [setOf_wOppSide_eq_image2 hx hp, ← Set.image_prod]\n    refine (isConnected_Iic.prod (isConnected_iff_connectedSpace.2 ?_)).image _\n      ((continuous_fst.smul continuous_const).vadd continuous_snd).continuousOn\n    convert AddTorsor.connectedSpace s.direction s\n\n"}
{"name":"AffineSubspace.isPreconnected_setOf_wOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\n⊢ IsPreconnected (setOf fun y => s.WOppSide x y)","decl":"theorem isPreconnected_setOf_wOppSide (s : AffineSubspace ℝ P) (x : P) :\n    IsPreconnected { y | s.WOppSide x y } := by\n  rcases Set.eq_empty_or_nonempty (s : Set P) with (h | h)\n  · rw [coe_eq_bot_iff] at h\n    simp only [h, not_wOppSide_bot]\n    exact isPreconnected_empty\n  · exact (isConnected_setOf_wOppSide x h).isPreconnected\n\n"}
{"name":"AffineSubspace.isConnected_setOf_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\nhx : Not (Membership.mem s x)\nh : (↑s).Nonempty\n⊢ IsConnected (setOf fun y => s.SOppSide x y)","decl":"theorem isConnected_setOf_sOppSide {s : AffineSubspace ℝ P} {x : P} (hx : x ∉ s)\n    (h : (s : Set P).Nonempty) : IsConnected { y | s.SOppSide x y } := by\n  obtain ⟨p, hp⟩ := h\n  haveI : Nonempty s := ⟨⟨p, hp⟩⟩\n  rw [setOf_sOppSide_eq_image2 hx hp, ← Set.image_prod]\n  refine (isConnected_Iio.prod (isConnected_iff_connectedSpace.2 ?_)).image _\n    ((continuous_fst.smul continuous_const).vadd continuous_snd).continuousOn\n  convert AddTorsor.connectedSpace s.direction s\n\n"}
{"name":"AffineSubspace.isPreconnected_setOf_sOppSide","module":"Mathlib.Analysis.Convex.Side","initialProofState":"V : Type u_2\nP : Type u_4\ninst✝³ : SeminormedAddCommGroup V\ninst✝² : NormedSpace Real V\ninst✝¹ : PseudoMetricSpace P\ninst✝ : NormedAddTorsor V P\ns : AffineSubspace Real P\nx : P\n⊢ IsPreconnected (setOf fun y => s.SOppSide x y)","decl":"theorem isPreconnected_setOf_sOppSide (s : AffineSubspace ℝ P) (x : P) :\n    IsPreconnected { y | s.SOppSide x y } := by\n  rcases Set.eq_empty_or_nonempty (s : Set P) with (h | h)\n  · rw [coe_eq_bot_iff] at h\n    simp only [h, not_sOppSide_bot]\n    exact isPreconnected_empty\n  · by_cases hx : x ∈ s\n    · simp only [hx, SOppSide, not_true, false_and, and_false]\n      exact isPreconnected_empty\n    · exact (isConnected_setOf_sOppSide hx h).isPreconnected\n\n"}
