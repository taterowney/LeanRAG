{"name":"Polynomial.IsUnitTrinomial.irreducible_of_coprime'","module":"Mathlib.Analysis.Complex.Polynomial.UnitTrinomial","initialProofState":"p : Polynomial Int\nhp : p.IsUnitTrinomial\nh : ∀ (z : Complex), Not (And (Eq ((Polynomial.aeval z) p) 0) (Eq ((Polynomial.aeval z) p.mirror) 0))\n⊢ Irreducible p","decl":"/-- A unit trinomial is irreducible if it has no complex roots in common with its mirror. -/\ntheorem irreducible_of_coprime' (hp : IsUnitTrinomial p)\n    (h : ∀ z : ℂ, ¬(aeval z p = 0 ∧ aeval z (mirror p) = 0)) : Irreducible p := by\n  refine hp.irreducible_of_coprime fun q hq hq' => ?_\n  suffices ¬0 < q.natDegree by\n    rcases hq with ⟨p, rfl⟩\n    replace hp := hp.leadingCoeff_isUnit\n    rw [leadingCoeff_mul] at hp\n    replace hp := isUnit_of_mul_isUnit_left hp\n    rw [not_lt, Nat.le_zero] at this\n    rwa [eq_C_of_natDegree_eq_zero this, isUnit_C, ← this]\n  intro hq''\n  rw [natDegree_pos_iff_degree_pos] at hq''\n  rw [← degree_map_eq_of_injective (algebraMap ℤ ℂ).injective_int] at hq''\n  cases' Complex.exists_root hq'' with z hz\n  rw [IsRoot, eval_map, ← aeval_def] at hz\n  refine h z ⟨?_, ?_⟩\n  · cases' hq with g' hg'\n    rw [hg', aeval_mul, hz, zero_mul]\n  · cases' hq' with g' hg'\n    rw [hg', aeval_mul, hz, zero_mul]\n\n"}
