{"name":"SimpleGraph.two_le_chromaticNumber_of_adj","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"α : Type u_1\nG : SimpleGraph α\nu v : α\nhAdj : G.Adj u v\n⊢ LE.le 2 G.chromaticNumber","decl":"theorem two_le_chromaticNumber_of_adj {α} {G : SimpleGraph α} {u v : α} (hAdj : G.Adj u v) :\n    2 ≤ G.chromaticNumber := by\n  refine le_of_not_lt ?_\n  intro h\n  have hc : G.Colorable 1 := chromaticNumber_le_iff_colorable.mp (Order.le_of_lt_add_one h)\n  let c : G.Coloring (Fin 1) := hc.some\n  exact c.valid hAdj (Subsingleton.elim (c u) (c v))\n\n"}
{"name":"SimpleGraph.chromaticNumber_pathGraph","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"n : Nat\nh : LE.le 2 n\n⊢ Eq (SimpleGraph.pathGraph n).chromaticNumber 2","decl":"theorem chromaticNumber_pathGraph (n : ℕ) (h : 2 ≤ n) :\n    (pathGraph n).chromaticNumber = 2 := by\n  have hc := (pathGraph.bicoloring n).colorable\n  apply le_antisymm\n  · exact hc.chromaticNumber_le\n  · have hAdj : (pathGraph n).Adj ⟨0, Nat.zero_lt_of_lt h⟩ ⟨1, h⟩ := by simp [pathGraph_adj]\n    exact two_le_chromaticNumber_of_adj hAdj\n\n"}
{"name":"SimpleGraph.Coloring.even_length_iff_congr","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"α : Type u_1\nG : SimpleGraph α\nc : G.Coloring Bool\nu v : α\np : G.Walk u v\n⊢ Iff (Even p.length) (Iff (Eq (c u) Bool.true) (Eq (c v) Bool.true))","decl":"theorem Coloring.even_length_iff_congr {α} {G : SimpleGraph α}\n    (c : G.Coloring Bool) {u v : α} (p : G.Walk u v) :\n    Even p.length ↔ (c u ↔ c v) := by\n  induction p with\n  | nil => simp\n  | @cons u v w h p ih =>\n    simp only [Walk.length_cons, Nat.even_add_one]\n    have : ¬ c u = true ↔ c v = true := by\n      rw [← not_iff, ← Bool.eq_iff_iff]\n      exact c.valid h\n    tauto\n\n"}
{"name":"SimpleGraph.Coloring.odd_length_iff_not_congr","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"α : Type u_1\nG : SimpleGraph α\nc : G.Coloring Bool\nu v : α\np : G.Walk u v\n⊢ Iff (Odd p.length) (Iff (Not (Eq (c u) Bool.true)) (Eq (c v) Bool.true))","decl":"theorem Coloring.odd_length_iff_not_congr {α} {G : SimpleGraph α}\n    (c : G.Coloring Bool) {u v : α} (p : G.Walk u v) :\n    Odd p.length ↔ (¬c u ↔ c v) := by\n  rw [← Nat.not_even_iff_odd, c.even_length_iff_congr p]\n  tauto\n\n"}
{"name":"SimpleGraph.Walk.three_le_chromaticNumber_of_odd_loop","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"α : Type u_1\nG : SimpleGraph α\nu : α\np : G.Walk u u\nhOdd : Odd p.length\n⊢ LE.le 3 G.chromaticNumber","decl":"theorem Walk.three_le_chromaticNumber_of_odd_loop {α} {G : SimpleGraph α} {u : α} (p : G.Walk u u)\n    (hOdd : Odd p.length) : 3 ≤ G.chromaticNumber := Classical.by_contradiction <| by\n  intro h\n  have h' : G.chromaticNumber ≤ 2 := Order.le_of_lt_add_one <| not_le.mp h\n  let c : G.Coloring (Fin 2) := (chromaticNumber_le_iff_colorable.mp h').some\n  let c' : G.Coloring Bool := recolorOfEquiv G finTwoEquiv c\n  have : ¬c' u ↔ c' u := (c'.odd_length_iff_not_congr p).mp hOdd\n  simp_all\n\n"}
{"name":"SimpleGraph.chromaticNumber_cycleGraph_of_even","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"n : Nat\nh : LE.le 2 n\nhEven : Even n\n⊢ Eq (SimpleGraph.cycleGraph n).chromaticNumber 2","decl":"theorem chromaticNumber_cycleGraph_of_even (n : ℕ) (h : 2 ≤ n) (hEven : Even n) :\n    (cycleGraph n).chromaticNumber = 2 := by\n  have hc := (cycleGraph.bicoloring_of_even n hEven).colorable\n  apply le_antisymm\n  · apply hc.chromaticNumber_le\n  · have hAdj : (cycleGraph n).Adj ⟨0, Nat.zero_lt_of_lt h⟩ ⟨1, h⟩ := by\n      simp [cycleGraph_adj', Fin.sub_val_of_le]\n    exact two_le_chromaticNumber_of_adj hAdj\n\n"}
{"name":"SimpleGraph.chromaticNumber_cycleGraph_of_odd","module":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","initialProofState":"n : Nat\nh : LE.le 2 n\nhOdd : Odd n\n⊢ Eq (SimpleGraph.cycleGraph n).chromaticNumber 3","decl":"theorem chromaticNumber_cycleGraph_of_odd (n : ℕ) (h : 2 ≤ n) (hOdd : Odd n) :\n    (cycleGraph n).chromaticNumber = 3 := by\n  have hc := (cycleGraph.tricoloring n h).colorable\n  apply le_antisymm\n  · apply hc.chromaticNumber_le\n  · have hn3 : n - 3 + 3 = n := by\n      refine Nat.sub_add_cancel (Nat.succ_le_of_lt (Nat.lt_of_le_of_ne h ?_))\n      intro h2\n      rw [← h2] at hOdd\n      exact (Nat.not_odd_iff.mpr rfl) hOdd\n    let w : (cycleGraph (n - 3 + 3)).Walk 0 0 := cycleGraph_EulerianCircuit (n - 3)\n    have hOdd' : Odd w.length := by\n      rw [cycleGraph_EulerianCircuit_length, hn3]\n      exact hOdd\n    rw [← hn3]\n    exact Walk.three_le_chromaticNumber_of_odd_loop w hOdd'\n\n"}
