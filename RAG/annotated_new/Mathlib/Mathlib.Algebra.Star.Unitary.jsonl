{"name":"unitary.mem_iff","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : R\n⊢ Iff (Membership.mem (unitary R) U) (And (Eq (HMul.hMul (Star.star U) U) 1) (Eq (HMul.hMul U (Star.star U)) 1))","decl":"theorem mem_iff {U : R} : U ∈ unitary R ↔ star U * U = 1 ∧ U * star U = 1 :=\n  Iff.rfl\n\n"}
{"name":"unitary.star_mul_self_of_mem","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : R\nhU : Membership.mem (unitary R) U\n⊢ Eq (HMul.hMul (Star.star U) U) 1","decl":"@[simp]\ntheorem star_mul_self_of_mem {U : R} (hU : U ∈ unitary R) : star U * U = 1 :=\n  hU.1\n\n"}
{"name":"unitary.mul_star_self_of_mem","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : R\nhU : Membership.mem (unitary R) U\n⊢ Eq (HMul.hMul U (Star.star U)) 1","decl":"@[simp]\ntheorem mul_star_self_of_mem {U : R} (hU : U ∈ unitary R) : U * star U = 1 :=\n  hU.2\n\n"}
{"name":"unitary.star_mem","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : R\nhU : Membership.mem (unitary R) U\n⊢ Membership.mem (unitary R) (Star.star U)","decl":"theorem star_mem {U : R} (hU : U ∈ unitary R) : star U ∈ unitary R :=\n  ⟨by rw [star_star, mul_star_self_of_mem hU], by rw [star_star, star_mul_self_of_mem hU]⟩\n\n"}
{"name":"unitary.star_mem_iff","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : R\n⊢ Iff (Membership.mem (unitary R) (Star.star U)) (Membership.mem (unitary R) U)","decl":"@[simp]\ntheorem star_mem_iff {U : R} : star U ∈ unitary R ↔ U ∈ unitary R :=\n  ⟨fun h => star_star U ▸ star_mem h, star_mem⟩\n\n"}
{"name":"unitary.coe_star","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (↑(Star.star U)) (Star.star ↑U)","decl":"@[simp, norm_cast]\ntheorem coe_star {U : unitary R} : ↑(star U) = (star U : R) :=\n  rfl\n\n"}
{"name":"unitary.coe_star_mul_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (HMul.hMul (Star.star ↑U) ↑U) 1","decl":"theorem coe_star_mul_self (U : unitary R) : (star U : R) * U = 1 :=\n  star_mul_self_of_mem U.prop\n\n"}
{"name":"unitary.coe_mul_star_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (HMul.hMul ↑U ↑(Star.star U)) 1","decl":"theorem coe_mul_star_self (U : unitary R) : (U : R) * star U = 1 :=\n  mul_star_self_of_mem U.prop\n\n"}
{"name":"unitary.star_mul_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (HMul.hMul (Star.star U) U) 1","decl":"@[simp]\ntheorem star_mul_self (U : unitary R) : star U * U = 1 :=\n  Subtype.ext <| coe_star_mul_self U\n\n"}
{"name":"unitary.mul_star_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (HMul.hMul U (Star.star U)) 1","decl":"@[simp]\ntheorem mul_star_self (U : unitary R) : U * star U = 1 :=\n  Subtype.ext <| coe_mul_star_self U\n\n"}
{"name":"unitary.star_eq_inv","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (Star.star U) (Inv.inv U)","decl":"theorem star_eq_inv (U : unitary R) : star U = U⁻¹ :=\n  rfl\n\n"}
{"name":"unitary.star_eq_inv'","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\n⊢ Eq Star.star Inv.inv","decl":"theorem star_eq_inv' : (star : unitary R → unitary R) = Inv.inv :=\n  rfl\n\n"}
{"name":"unitary.val_inv_toUnits_apply","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nx : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq ↑(Inv.inv (unitary.toUnits x)) ↑(Inv.inv x)","decl":"/-- The unitary elements embed into the units. -/\n@[simps]\ndef toUnits : unitary R →* Rˣ where\n  toFun x := ⟨x, ↑x⁻¹, coe_mul_star_self x, coe_star_mul_self x⟩\n  map_one' := Units.ext rfl\n  map_mul' _ _ := Units.ext rfl\n\n"}
{"name":"unitary.val_toUnits_apply","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nx : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq ↑(unitary.toUnits x) ↑x","decl":"/-- The unitary elements embed into the units. -/\n@[simps]\ndef toUnits : unitary R →* Rˣ where\n  toFun x := ⟨x, ↑x⁻¹, coe_mul_star_self x, coe_star_mul_self x⟩\n  map_one' := Units.ext rfl\n  map_mul' _ _ := Units.ext rfl\n\n"}
{"name":"unitary.toUnits_injective","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\n⊢ Function.Injective ⇑unitary.toUnits","decl":"theorem toUnits_injective : Function.Injective (toUnits : unitary R → Rˣ) := fun _ _ h =>\n  Subtype.ext <| Units.ext_iff.mp h\n\n"}
{"name":"IsUnit.mem_unitary_of_star_mul_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nu : R\nhu : IsUnit u\nh_mul : Eq (HMul.hMul (Star.star u) u) 1\n⊢ Membership.mem (unitary R) u","decl":"theorem _root_.IsUnit.mem_unitary_of_star_mul_self  {u : R} (hu : IsUnit u)\n    (h_mul : star u * u = 1) : u ∈ unitary R := by\n  refine unitary.mem_iff.mpr ⟨h_mul, ?_⟩\n  lift u to Rˣ using hu\n  exact left_inv_eq_right_inv h_mul u.mul_inv ▸ u.mul_inv\n\n"}
{"name":"IsUnit.mem_unitary_of_mul_star_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nu : R\nhu : IsUnit u\nh_mul : Eq (HMul.hMul u (Star.star u)) 1\n⊢ Membership.mem (unitary R) u","decl":"theorem _root_.IsUnit.mem_unitary_of_mul_star_self {u : R} (hu : IsUnit u)\n    (h_mul : u * star u = 1) : u ∈ unitary R :=\n  star_star u ▸\n    (hu.star.mem_unitary_of_star_mul_self ((star_star u).symm ▸ h_mul) |> unitary.star_mem)\n\n"}
{"name":"unitary.instIsStarNormal","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nu : Subtype fun x => Membership.mem (unitary R) x\n⊢ IsStarNormal u","decl":"instance instIsStarNormal (u : unitary R) : IsStarNormal u where\n  star_comm_self := star_mul_self u |>.trans <| (mul_star_self u).symm\n\n"}
{"name":"unitary.coe_isStarNormal","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nu : Subtype fun x => Membership.mem (unitary R) x\n⊢ IsStarNormal ↑u","decl":"instance coe_isStarNormal (u : unitary R) : IsStarNormal (u : R) where\n  star_comm_self := congr(Subtype.val $(star_comm_self' u))\n\n"}
{"name":"isStarNormal_of_mem_unitary","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Monoid R\ninst✝ : StarMul R\nu : R\nhu : Membership.mem (unitary R) u\n⊢ IsStarNormal u","decl":"lemma _root_.isStarNormal_of_mem_unitary {u : R} (hu : u ∈ unitary R) : IsStarNormal u :=\n  coe_isStarNormal ⟨u, hu⟩\n\n"}
{"name":"unitary.map_mem","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"F : Type u_2\nR : Type u_3\nS : Type u_4\ninst✝⁶ : Monoid R\ninst✝⁵ : StarMul R\ninst✝⁴ : Monoid S\ninst✝³ : StarMul S\ninst✝² : FunLike F R S\ninst✝¹ : StarHomClass F R S\ninst✝ : MonoidHomClass F R S\nf : F\nr : R\nhr : Membership.mem (unitary R) r\n⊢ Membership.mem (unitary S) (f r)","decl":"lemma map_mem {r : R} (hr : r ∈ unitary R) : f r ∈ unitary S := by\n  rw [unitary.mem_iff] at hr\n  simpa [map_star, map_mul] using And.intro congr(f $(hr.1)) congr(f $(hr.2))\n\n"}
{"name":"unitary.map_apply","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"F : Type u_2\nR : Type u_3\nS : Type u_4\ninst✝⁶ : Monoid R\ninst✝⁵ : StarMul R\ninst✝⁴ : Monoid S\ninst✝³ : StarMul S\ninst✝² : FunLike F R S\ninst✝¹ : StarHomClass F R S\ninst✝ : MonoidHomClass F R S\nf : F\na✝ : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq ((unitary.map f) a✝) (Subtype.map ⇑f ⋯ a✝)","decl":"/-- The group homomorphism between unitary subgroups of star monoids induced by a star\nhomomorphism -/\n@[simps]\ndef map : unitary R →* unitary S where\n  toFun := Subtype.map f (fun _ ↦ map_mem f)\n  map_one' := Subtype.ext <| map_one f\n  map_mul' _ _ := Subtype.ext <| map_mul f _ _\n\n"}
{"name":"unitary.toUnits_comp_map","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"F : Type u_2\nR : Type u_3\nS : Type u_4\ninst✝⁶ : Monoid R\ninst✝⁵ : StarMul R\ninst✝⁴ : Monoid S\ninst✝³ : StarMul S\ninst✝² : FunLike F R S\ninst✝¹ : StarHomClass F R S\ninst✝ : MonoidHomClass F R S\nf : F\n⊢ Eq (unitary.toUnits.comp (unitary.map f)) ((Units.map ↑f).comp unitary.toUnits)","decl":"lemma toUnits_comp_map : toUnits.comp (map f) = (Units.map f).comp toUnits := by ext; rfl\n\n"}
{"name":"unitary.mem_iff_star_mul_self","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : CommMonoid R\ninst✝ : StarMul R\nU : R\n⊢ Iff (Membership.mem (unitary R) U) (Eq (HMul.hMul (Star.star U) U) 1)","decl":"theorem mem_iff_star_mul_self {U : R} : U ∈ unitary R ↔ star U * U = 1 :=\n  mem_iff.trans <| and_iff_left_of_imp fun h => mul_comm (star U) U ▸ h\n\n"}
{"name":"unitary.mem_iff_self_mul_star","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : CommMonoid R\ninst✝ : StarMul R\nU : R\n⊢ Iff (Membership.mem (unitary R) U) (Eq (HMul.hMul U (Star.star U)) 1)","decl":"theorem mem_iff_self_mul_star {U : R} : U ∈ unitary R ↔ U * star U = 1 :=\n  mem_iff.trans <| and_iff_right_of_imp fun h => mul_comm U (star U) ▸ h\n\n"}
{"name":"unitary.coe_inv","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : GroupWithZero R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (↑(Inv.inv U)) (Inv.inv ↑U)","decl":"@[norm_cast]\ntheorem coe_inv (U : unitary R) : ↑U⁻¹ = (U⁻¹ : R) :=\n  eq_inv_of_mul_eq_one_right <| coe_mul_star_self _\n\n"}
{"name":"unitary.coe_div","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : GroupWithZero R\ninst✝ : StarMul R\nU₁ U₂ : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (↑(HDiv.hDiv U₁ U₂)) (HDiv.hDiv ↑U₁ ↑U₂)","decl":"@[norm_cast]\ntheorem coe_div (U₁ U₂ : unitary R) : ↑(U₁ / U₂) = (U₁ / U₂ : R) := by\n  simp only [div_eq_mul_inv, coe_inv, Submonoid.coe_mul]\n\n"}
{"name":"unitary.coe_zpow","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : GroupWithZero R\ninst✝ : StarMul R\nU : Subtype fun x => Membership.mem (unitary R) x\nz : Int\n⊢ Eq (↑(HPow.hPow U z)) (HPow.hPow (↑U) z)","decl":"@[norm_cast]\ntheorem coe_zpow (U : unitary R) (z : ℤ) : ↑(U ^ z) = (U : R) ^ z := by\n  induction z\n  · simp [SubmonoidClass.coe_pow]\n  · simp [coe_inv]\n\n"}
{"name":"unitary.coe_neg","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_1\ninst✝¹ : Ring R\ninst✝ : StarRing R\nU : Subtype fun x => Membership.mem (unitary R) x\n⊢ Eq (↑(Neg.neg U)) (Neg.neg ↑U)","decl":"@[norm_cast]\ntheorem coe_neg (U : unitary R) : ↑(-U) = (-U : R) :=\n  rfl\n\n"}
{"name":"unitary.spectrum.unitary_conjugate","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : Ring A\ninst✝¹ : Algebra R A\ninst✝ : StarMul A\na : A\nu : Subtype fun x => Membership.mem (unitary A) x\n⊢ Eq (spectrum R (HMul.hMul (HMul.hMul (↑u) a) (Star.star ↑u))) (spectrum R a)","decl":"/-- Unitary conjugation preserves the spectrum, star on left. -/\n@[simp]\nlemma spectrum.unitary_conjugate {a : A} {u : unitary A} :\n    spectrum R (u * a * (star u : A)) = spectrum R a :=\n  spectrum.units_conjugate (u := unitary.toUnits u)\n\n"}
{"name":"unitary.spectrum.unitary_conjugate'","module":"Mathlib.Algebra.Star.Unitary","initialProofState":"R : Type u_2\nA : Type u_3\ninst✝³ : CommSemiring R\ninst✝² : Ring A\ninst✝¹ : Algebra R A\ninst✝ : StarMul A\na : A\nu : Subtype fun x => Membership.mem (unitary A) x\n⊢ Eq (spectrum R (HMul.hMul (HMul.hMul (Star.star ↑u) a) ↑u)) (spectrum R a)","decl":"/-- Unitary conjugation preserves the spectrum, star on right. -/\n@[simp]\nlemma spectrum.unitary_conjugate' {a : A} {u : unitary A} :\n    spectrum R ((star u : A) * a * u) = spectrum R a := by\n  simpa using spectrum.unitary_conjugate (u := star u)\n\n"}
