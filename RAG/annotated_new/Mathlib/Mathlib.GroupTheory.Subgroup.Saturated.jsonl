{"name":"Subgroup.saturated_iff_npow","module":"Mathlib.GroupTheory.Subgroup.Saturated","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\n⊢ Iff H.Saturated (∀ (n : Nat) (g : G), Membership.mem H (HPow.hPow g n) → Or (Eq n 0) (Membership.mem H g))","decl":"@[to_additive]\ntheorem saturated_iff_npow {H : Subgroup G} :\n    Saturated H ↔ ∀ (n : ℕ) (g : G), g ^ n ∈ H → n = 0 ∨ g ∈ H :=\n  Iff.rfl\n\n"}
{"name":"AddSubgroup.saturated_iff_nsmul","module":"Mathlib.GroupTheory.Subgroup.Saturated","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Iff H.Saturated (∀ (n : Nat) (g : G), Membership.mem H (HSMul.hSMul n g) → Or (Eq n 0) (Membership.mem H g))","decl":"@[to_additive]\ntheorem saturated_iff_npow {H : Subgroup G} :\n    Saturated H ↔ ∀ (n : ℕ) (g : G), g ^ n ∈ H → n = 0 ∨ g ∈ H :=\n  Iff.rfl\n\n"}
{"name":"AddSubgroup.saturated_iff_zsmul","module":"Mathlib.GroupTheory.Subgroup.Saturated","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\nH : AddSubgroup G\n⊢ Iff H.Saturated (∀ (n : Int) (g : G), Membership.mem H (HSMul.hSMul n g) → Or (Eq n 0) (Membership.mem H g))","decl":"@[to_additive]\ntheorem saturated_iff_zpow {H : Subgroup G} :\n    Saturated H ↔ ∀ (n : ℤ) (g : G), g ^ n ∈ H → n = 0 ∨ g ∈ H := by\n  constructor\n  · intros hH n g hgn\n    induction' n with n n\n    · simp only [Int.natCast_eq_zero, Int.ofNat_eq_coe, zpow_natCast] at hgn ⊢\n      exact hH hgn\n    · suffices g ^ (n + 1) ∈ H by\n        refine (hH this).imp ?_ id\n        simp only [IsEmpty.forall_iff, Nat.succ_ne_zero]\n      simpa only [inv_mem_iff, zpow_negSucc] using hgn\n  · intro h n g hgn\n    specialize h n g\n    simp only [Int.natCast_eq_zero, zpow_natCast] at h\n    apply h hgn\n\n"}
{"name":"Subgroup.saturated_iff_zpow","module":"Mathlib.GroupTheory.Subgroup.Saturated","initialProofState":"G : Type u_1\ninst✝ : Group G\nH : Subgroup G\n⊢ Iff H.Saturated (∀ (n : Int) (g : G), Membership.mem H (HPow.hPow g n) → Or (Eq n 0) (Membership.mem H g))","decl":"@[to_additive]\ntheorem saturated_iff_zpow {H : Subgroup G} :\n    Saturated H ↔ ∀ (n : ℤ) (g : G), g ^ n ∈ H → n = 0 ∨ g ∈ H := by\n  constructor\n  · intros hH n g hgn\n    induction' n with n n\n    · simp only [Int.natCast_eq_zero, Int.ofNat_eq_coe, zpow_natCast] at hgn ⊢\n      exact hH hgn\n    · suffices g ^ (n + 1) ∈ H by\n        refine (hH this).imp ?_ id\n        simp only [IsEmpty.forall_iff, Nat.succ_ne_zero]\n      simpa only [inv_mem_iff, zpow_negSucc] using hgn\n  · intro h n g hgn\n    specialize h n g\n    simp only [Int.natCast_eq_zero, zpow_natCast] at h\n    apply h hgn\n\n"}
{"name":"AddSubgroup.ker_saturated","module":"Mathlib.GroupTheory.Subgroup.Saturated","initialProofState":"A₁ : Type u_1\nA₂ : Type u_2\ninst✝² : AddCommGroup A₁\ninst✝¹ : AddCommGroup A₂\ninst✝ : NoZeroSMulDivisors Nat A₂\nf : AddMonoidHom A₁ A₂\n⊢ f.ker.Saturated","decl":"theorem ker_saturated {A₁ A₂ : Type*} [AddCommGroup A₁] [AddCommGroup A₂] [NoZeroSMulDivisors ℕ A₂]\n    (f : A₁ →+ A₂) : f.ker.Saturated := by\n  intro n g hg\n  simpa only [f.mem_ker, nsmul_eq_smul, f.map_nsmul, smul_eq_zero] using hg\n\n"}
