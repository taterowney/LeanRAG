{"name":"Module.Finite.exists_fin'","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : Module.Finite R M\n⊢ Exists fun n => Exists fun f => Function.Surjective ⇑f","decl":"/-- A finite module admits a surjective linear map from a finite free module. -/\nlemma exists_fin' [Module.Finite R M] : ∃ (n : ℕ) (f : (Fin n → R) →ₗ[R] M), Surjective f := by\n  have ⟨n, s, hs⟩ := exists_fin (R := R) (M := M)\n  refine ⟨n, Basis.constr (Pi.basisFun R _) ℕ s, ?_⟩\n  rw [← LinearMap.range_eq_top, Basis.constr_range, hs]\n\n"}
{"name":"Module.Finite.small","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Module.Finite R M\ninst✝ : Small.{v, u} R\n⊢ Small.{v, u_3} M","decl":"lemma small [Module.Finite R M] [Small.{v} R] : Small.{v} M :=\n  have ⟨_, _, h⟩ := exists_fin' R M\n  small_of_surjective h\n\n"}
{"name":"Module.finite_of_finite","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Finite R\ninst✝ : Module.Finite R M\n⊢ Finite M","decl":"lemma _root_.Module.finite_of_finite [Finite R] [Module.Finite R M] : Finite M := by\n  obtain ⟨n, f, hf⟩ := exists_fin' R M; exact .of_surjective f hf\n\n"}
{"name":"FiniteDimensional.finite_of_finite","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Finite R\ninst✝ : Module.Finite R M\n⊢ Finite M","decl":"@[deprecated (since := \"2024-10-13\")]\nalias _root_.FiniteDimensional.finite_of_finite := finite_of_finite\n\n"}
{"name":"FiniteDimensional.fintypeOfFintype","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Finite R\ninst✝ : Module.Finite R M\n⊢ Finite M","decl":"/-- A finite dimensional vector space over a finite field is finite -/\n@[deprecated (since := \"2024-10-22\")]\nalias _root_.FiniteDimensional.fintypeOfFintype := finite_of_finite\n\n"}
{"name":"Module.finite_iff_finite","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : Finite R\n⊢ Iff (Module.Finite R M) (Finite M)","decl":"/-- A module over a finite ring has finite dimension iff it is finite. -/\nlemma _root_.Module.finite_iff_finite [Finite R] : Module.Finite R M ↔ Finite M :=\n  ⟨fun _ ↦ finite_of_finite R, fun _ ↦ .of_finite⟩\n\n"}
{"name":"Set.Finite.submoduleSpan","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝³ : Semiring R\ninst✝² : AddCommMonoid M\ninst✝¹ : Module R M\ninst✝ : Finite R\ns : Set M\nhs : s.Finite\n⊢ (↑(Submodule.span R s)).Finite","decl":"variable (R) in\nlemma _root_.Set.Finite.submoduleSpan [Finite R] {s : Set M} (hs : s.Finite) :\n    (Submodule.span R s : Set M).Finite := by\n  lift s to Finset M using hs\n  rw [Set.Finite, ← Module.finite_iff_finite (R := R)]\n  dsimp\n  infer_instance\n\n"}
{"name":"Module.Finite.finite_basis","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Nontrivial R\nι : Type u_5\ninst✝ : Module.Finite R M\nb : Basis ι R M\n⊢ Finite ι","decl":"/-- If a free module is finite, then any arbitrary basis is finite. -/\nlemma finite_basis [Nontrivial R] {ι} [Module.Finite R M]\n    (b : Basis ι R M) :\n    _root_.Finite ι :=\n  let ⟨s, hs⟩ := ‹Module.Finite R M›\n  basis_finite_of_finite_spans (↑s) s.finite_toSet hs b\n\n"}
{"name":"Module.not_finite_of_infinite_basis","module":"Mathlib.RingTheory.Finiteness.Cardinality","initialProofState":"R : Type u\nM : Type u_3\ninst✝⁴ : Semiring R\ninst✝³ : AddCommMonoid M\ninst✝² : Module R M\ninst✝¹ : Nontrivial R\nι : Type u_5\ninst✝ : Infinite ι\nb : Basis ι R M\n⊢ Not (Module.Finite R M)","decl":"lemma not_finite_of_infinite_basis [Nontrivial R] {ι} [Infinite ι] (b : Basis ι R M) :\n    ¬ Module.Finite R M :=\n  fun _ ↦ (Finite.finite_basis b).not_infinite ‹_›\n\n"}
