{"name":"Set.neg_mem_Icc_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Icc c d) (Neg.neg a)) (Membership.mem (Set.Icc (Neg.neg d) (Neg.neg c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Icc_iff : a⁻¹ ∈ Set.Icc c d ↔ a ∈ Set.Icc d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_le' le_inv'\n\n"}
{"name":"Set.inv_mem_Icc_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Icc c d) (Inv.inv a)) (Membership.mem (Set.Icc (Inv.inv d) (Inv.inv c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Icc_iff : a⁻¹ ∈ Set.Icc c d ↔ a ∈ Set.Icc d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_le' le_inv'\n\n"}
{"name":"Set.inv_mem_Ico_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Ico c d) (Inv.inv a)) (Membership.mem (Set.Ioc (Inv.inv d) (Inv.inv c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Ico_iff : a⁻¹ ∈ Set.Ico c d ↔ a ∈ Set.Ioc d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_lt' le_inv'\n\n"}
{"name":"Set.neg_mem_Ico_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Ico c d) (Neg.neg a)) (Membership.mem (Set.Ioc (Neg.neg d) (Neg.neg c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Ico_iff : a⁻¹ ∈ Set.Ico c d ↔ a ∈ Set.Ioc d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_lt' le_inv'\n\n"}
{"name":"Set.neg_mem_Ioc_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Ioc c d) (Neg.neg a)) (Membership.mem (Set.Ico (Neg.neg d) (Neg.neg c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Ioc_iff : a⁻¹ ∈ Set.Ioc c d ↔ a ∈ Set.Ico d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_le' lt_inv'\n\n"}
{"name":"Set.inv_mem_Ioc_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Ioc c d) (Inv.inv a)) (Membership.mem (Set.Ico (Inv.inv d) (Inv.inv c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Ioc_iff : a⁻¹ ∈ Set.Ioc c d ↔ a ∈ Set.Ico d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_le' lt_inv'\n\n"}
{"name":"Set.neg_mem_Ioo_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Ioo c d) (Neg.neg a)) (Membership.mem (Set.Ioo (Neg.neg d) (Neg.neg c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Ioo_iff : a⁻¹ ∈ Set.Ioo c d ↔ a ∈ Set.Ioo d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_lt' lt_inv'\n\n"}
{"name":"Set.inv_mem_Ioo_iff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na c d : α\n⊢ Iff (Membership.mem (Set.Ioo c d) (Inv.inv a)) (Membership.mem (Set.Ioo (Inv.inv d) (Inv.inv c)) a)","decl":"@[to_additive]\ntheorem inv_mem_Ioo_iff : a⁻¹ ∈ Set.Ioo c d ↔ a ∈ Set.Ioo d⁻¹ c⁻¹ :=\n  and_comm.trans <| and_congr inv_lt' lt_inv'\n\n"}
{"name":"Set.add_mem_Icc_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Icc c d) (HAdd.hAdd a b)) (Membership.mem (Set.Icc (HSub.hSub c b) (HSub.hSub d b)) a)","decl":"theorem add_mem_Icc_iff_left : a + b ∈ Set.Icc c d ↔ a ∈ Set.Icc (c - b) (d - b) :=\n  (and_congr (sub_le_iff_le_add (α := α)) (le_sub_iff_add_le (α := α))).symm\n\n"}
{"name":"Set.add_mem_Ico_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ico c d) (HAdd.hAdd a b)) (Membership.mem (Set.Ico (HSub.hSub c b) (HSub.hSub d b)) a)","decl":"theorem add_mem_Ico_iff_left : a + b ∈ Set.Ico c d ↔ a ∈ Set.Ico (c - b) (d - b) :=\n  (and_congr (sub_le_iff_le_add (α := α)) (lt_sub_iff_add_lt (α := α))).symm\n\n"}
{"name":"Set.add_mem_Ioc_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioc c d) (HAdd.hAdd a b)) (Membership.mem (Set.Ioc (HSub.hSub c b) (HSub.hSub d b)) a)","decl":"theorem add_mem_Ioc_iff_left : a + b ∈ Set.Ioc c d ↔ a ∈ Set.Ioc (c - b) (d - b) :=\n  (and_congr (sub_lt_iff_lt_add (α := α)) (le_sub_iff_add_le (α := α))).symm\n\n"}
{"name":"Set.add_mem_Ioo_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioo c d) (HAdd.hAdd a b)) (Membership.mem (Set.Ioo (HSub.hSub c b) (HSub.hSub d b)) a)","decl":"theorem add_mem_Ioo_iff_left : a + b ∈ Set.Ioo c d ↔ a ∈ Set.Ioo (c - b) (d - b) :=\n  (and_congr (sub_lt_iff_lt_add (α := α)) (lt_sub_iff_add_lt (α := α))).symm\n\n"}
{"name":"Set.add_mem_Icc_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Icc c d) (HAdd.hAdd a b)) (Membership.mem (Set.Icc (HSub.hSub c a) (HSub.hSub d a)) b)","decl":"theorem add_mem_Icc_iff_right : a + b ∈ Set.Icc c d ↔ b ∈ Set.Icc (c - a) (d - a) :=\n  (and_congr sub_le_iff_le_add' le_sub_iff_add_le').symm\n\n"}
{"name":"Set.add_mem_Ico_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ico c d) (HAdd.hAdd a b)) (Membership.mem (Set.Ico (HSub.hSub c a) (HSub.hSub d a)) b)","decl":"theorem add_mem_Ico_iff_right : a + b ∈ Set.Ico c d ↔ b ∈ Set.Ico (c - a) (d - a) :=\n  (and_congr sub_le_iff_le_add' lt_sub_iff_add_lt').symm\n\n"}
{"name":"Set.add_mem_Ioc_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioc c d) (HAdd.hAdd a b)) (Membership.mem (Set.Ioc (HSub.hSub c a) (HSub.hSub d a)) b)","decl":"theorem add_mem_Ioc_iff_right : a + b ∈ Set.Ioc c d ↔ b ∈ Set.Ioc (c - a) (d - a) :=\n  (and_congr sub_lt_iff_lt_add' le_sub_iff_add_le').symm\n\n"}
{"name":"Set.add_mem_Ioo_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioo c d) (HAdd.hAdd a b)) (Membership.mem (Set.Ioo (HSub.hSub c a) (HSub.hSub d a)) b)","decl":"theorem add_mem_Ioo_iff_right : a + b ∈ Set.Ioo c d ↔ b ∈ Set.Ioo (c - a) (d - a) :=\n  (and_congr sub_lt_iff_lt_add' lt_sub_iff_add_lt').symm\n\n"}
{"name":"Set.sub_mem_Icc_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Icc c d) (HSub.hSub a b)) (Membership.mem (Set.Icc (HAdd.hAdd c b) (HAdd.hAdd d b)) a)","decl":"theorem sub_mem_Icc_iff_left : a - b ∈ Set.Icc c d ↔ a ∈ Set.Icc (c + b) (d + b) :=\n  and_congr le_sub_iff_add_le sub_le_iff_le_add\n\n"}
{"name":"Set.sub_mem_Ico_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ico c d) (HSub.hSub a b)) (Membership.mem (Set.Ico (HAdd.hAdd c b) (HAdd.hAdd d b)) a)","decl":"theorem sub_mem_Ico_iff_left : a - b ∈ Set.Ico c d ↔ a ∈ Set.Ico (c + b) (d + b) :=\n  and_congr le_sub_iff_add_le sub_lt_iff_lt_add\n\n"}
{"name":"Set.sub_mem_Ioc_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioc c d) (HSub.hSub a b)) (Membership.mem (Set.Ioc (HAdd.hAdd c b) (HAdd.hAdd d b)) a)","decl":"theorem sub_mem_Ioc_iff_left : a - b ∈ Set.Ioc c d ↔ a ∈ Set.Ioc (c + b) (d + b) :=\n  and_congr lt_sub_iff_add_lt sub_le_iff_le_add\n\n"}
{"name":"Set.sub_mem_Ioo_iff_left","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioo c d) (HSub.hSub a b)) (Membership.mem (Set.Ioo (HAdd.hAdd c b) (HAdd.hAdd d b)) a)","decl":"theorem sub_mem_Ioo_iff_left : a - b ∈ Set.Ioo c d ↔ a ∈ Set.Ioo (c + b) (d + b) :=\n  and_congr lt_sub_iff_add_lt sub_lt_iff_lt_add\n\n"}
{"name":"Set.sub_mem_Icc_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Icc c d) (HSub.hSub a b)) (Membership.mem (Set.Icc (HSub.hSub a d) (HSub.hSub a c)) b)","decl":"theorem sub_mem_Icc_iff_right : a - b ∈ Set.Icc c d ↔ b ∈ Set.Icc (a - d) (a - c) :=\n  and_comm.trans <| and_congr sub_le_comm le_sub_comm\n\n"}
{"name":"Set.sub_mem_Ico_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ico c d) (HSub.hSub a b)) (Membership.mem (Set.Ioc (HSub.hSub a d) (HSub.hSub a c)) b)","decl":"theorem sub_mem_Ico_iff_right : a - b ∈ Set.Ico c d ↔ b ∈ Set.Ioc (a - d) (a - c) :=\n  and_comm.trans <| and_congr sub_lt_comm le_sub_comm\n\n"}
{"name":"Set.sub_mem_Ioc_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioc c d) (HSub.hSub a b)) (Membership.mem (Set.Ico (HSub.hSub a d) (HSub.hSub a c)) b)","decl":"theorem sub_mem_Ioc_iff_right : a - b ∈ Set.Ioc c d ↔ b ∈ Set.Ico (a - d) (a - c) :=\n  and_comm.trans <| and_congr sub_le_comm lt_sub_comm\n\n"}
{"name":"Set.sub_mem_Ioo_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b c d : α\n⊢ Iff (Membership.mem (Set.Ioo c d) (HSub.hSub a b)) (Membership.mem (Set.Ioo (HSub.hSub a d) (HSub.hSub a c)) b)","decl":"theorem sub_mem_Ioo_iff_right : a - b ∈ Set.Ioo c d ↔ b ∈ Set.Ioo (a - d) (a - c) :=\n  and_comm.trans <| and_congr sub_lt_comm lt_sub_comm\n\n-- I think that symmetric intervals deserve attention and API: they arise all the time,\n-- for instance when considering metric balls in `ℝ`.\n"}
{"name":"Set.mem_Icc_iff_abs_le","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"R : Type u_2\ninst✝ : LinearOrderedAddCommGroup R\nx y z : R\n⊢ Iff (LE.le (abs (HSub.hSub x y)) z) (Membership.mem (Set.Icc (HSub.hSub x z) (HAdd.hAdd x z)) y)","decl":"theorem mem_Icc_iff_abs_le {R : Type*} [LinearOrderedAddCommGroup R] {x y z : R} :\n    |x - y| ≤ z ↔ y ∈ Icc (x - z) (x + z) :=\n  abs_le.trans <| and_comm.trans <| and_congr sub_le_comm neg_le_sub_iff_le_add\n\n"}
{"name":"Set.sub_mem_Icc_zero_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Iff (Membership.mem (Set.Icc 0 b) (HSub.hSub b a)) (Membership.mem (Set.Icc 0 b) a)","decl":"theorem sub_mem_Icc_zero_iff_right : b - a ∈ Icc 0 b ↔ a ∈ Icc 0 b := by\n  simp only [sub_mem_Icc_iff_right, sub_self, sub_zero]\n\n"}
{"name":"Set.sub_mem_Ico_zero_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Iff (Membership.mem (Set.Ico 0 b) (HSub.hSub b a)) (Membership.mem (Set.Ioc 0 b) a)","decl":"theorem sub_mem_Ico_zero_iff_right : b - a ∈ Ico 0 b ↔ a ∈ Ioc 0 b := by\n  simp only [sub_mem_Ico_iff_right, sub_self, sub_zero]\n\n"}
{"name":"Set.sub_mem_Ioc_zero_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Iff (Membership.mem (Set.Ioc 0 b) (HSub.hSub b a)) (Membership.mem (Set.Ico 0 b) a)","decl":"theorem sub_mem_Ioc_zero_iff_right : b - a ∈ Ioc 0 b ↔ a ∈ Ico 0 b := by\n  simp only [sub_mem_Ioc_iff_right, sub_self, sub_zero]\n\n"}
{"name":"Set.sub_mem_Ioo_zero_iff_right","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Iff (Membership.mem (Set.Ioo 0 b) (HSub.hSub b a)) (Membership.mem (Set.Ioo 0 b) a)","decl":"theorem sub_mem_Ioo_zero_iff_right : b - a ∈ Ioo 0 b ↔ a ∈ Ioo 0 b := by\n  simp only [sub_mem_Ioo_iff_right, sub_self, sub_zero]\n\n"}
{"name":"Set.nonempty_Ico_sdiff","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nx dx y dy : α\nh : LT.lt dy dx\nhx : LT.lt 0 dx\n⊢ Nonempty ↑(SDiff.sdiff (Set.Ico x (HAdd.hAdd x dx)) (Set.Ico y (HAdd.hAdd y dy)))","decl":"/-- If we remove a smaller interval from a larger, the result is nonempty -/\ntheorem nonempty_Ico_sdiff {x dx y dy : α} (h : dy < dx) (hx : 0 < dx) :\n    Nonempty ↑(Ico x (x + dx) \\ Ico y (y + dy)) := by\n  cases' lt_or_le x y with h' h'\n  · use x\n    simp [*, not_le.2 h']\n  · use max x (x + dy)\n    simp [*, le_refl]\n\n"}
{"name":"Set.pairwise_disjoint_Ioc_add_zsmul","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioc (HAdd.hAdd a (HSMul.hSMul n b)) (HAdd.hAdd a (HSMul.hSMul (HAdd.hAdd n 1) b)))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioc_mul_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioc (a * b ^ n) (a * b ^ (n + 1))) := by\n  simp (config := { unfoldPartialApp := true }) only [Function.onFun]\n  simp_rw [Set.disjoint_iff]\n  intro m n hmn x hx\n  apply hmn\n  have hb : 1 < b := by\n    have : a * b ^ m < a * b ^ (m + 1) := hx.1.1.trans_le hx.1.2\n    rwa [mul_lt_mul_iff_left, ← mul_one (b ^ m), zpow_add_one, mul_lt_mul_iff_left] at this\n  have i1 := hx.1.1.trans_le hx.2.2\n  have i2 := hx.2.1.trans_le hx.1.2\n  rw [mul_lt_mul_iff_left, zpow_lt_zpow_iff_right hb, Int.lt_add_one_iff] at i1 i2\n  exact le_antisymm i1 i2\n\n"}
{"name":"Set.pairwise_disjoint_Ioc_mul_zpow","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioc (HMul.hMul a (HPow.hPow b n)) (HMul.hMul a (HPow.hPow b (HAdd.hAdd n 1))))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioc_mul_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioc (a * b ^ n) (a * b ^ (n + 1))) := by\n  simp (config := { unfoldPartialApp := true }) only [Function.onFun]\n  simp_rw [Set.disjoint_iff]\n  intro m n hmn x hx\n  apply hmn\n  have hb : 1 < b := by\n    have : a * b ^ m < a * b ^ (m + 1) := hx.1.1.trans_le hx.1.2\n    rwa [mul_lt_mul_iff_left, ← mul_one (b ^ m), zpow_add_one, mul_lt_mul_iff_left] at this\n  have i1 := hx.1.1.trans_le hx.2.2\n  have i2 := hx.2.1.trans_le hx.1.2\n  rw [mul_lt_mul_iff_left, zpow_lt_zpow_iff_right hb, Int.lt_add_one_iff] at i1 i2\n  exact le_antisymm i1 i2\n\n"}
{"name":"Set.pairwise_disjoint_Ico_mul_zpow","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ico (HMul.hMul a (HPow.hPow b n)) (HMul.hMul a (HPow.hPow b (HAdd.hAdd n 1))))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ico_mul_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ico (a * b ^ n) (a * b ^ (n + 1))) := by\n  simp (config := { unfoldPartialApp := true }) only [Function.onFun]\n  simp_rw [Set.disjoint_iff]\n  intro m n hmn x hx\n  apply hmn\n  have hb : 1 < b := by\n    have : a * b ^ m < a * b ^ (m + 1) := hx.1.1.trans_lt hx.1.2\n    rwa [mul_lt_mul_iff_left, ← mul_one (b ^ m), zpow_add_one, mul_lt_mul_iff_left] at this\n  have i1 := hx.1.1.trans_lt hx.2.2\n  have i2 := hx.2.1.trans_lt hx.1.2\n  rw [mul_lt_mul_iff_left, zpow_lt_zpow_iff_right hb, Int.lt_add_one_iff] at i1 i2\n  exact le_antisymm i1 i2\n\n"}
{"name":"Set.pairwise_disjoint_Ico_add_zsmul","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ico (HAdd.hAdd a (HSMul.hSMul n b)) (HAdd.hAdd a (HSMul.hSMul (HAdd.hAdd n 1) b)))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ico_mul_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ico (a * b ^ n) (a * b ^ (n + 1))) := by\n  simp (config := { unfoldPartialApp := true }) only [Function.onFun]\n  simp_rw [Set.disjoint_iff]\n  intro m n hmn x hx\n  apply hmn\n  have hb : 1 < b := by\n    have : a * b ^ m < a * b ^ (m + 1) := hx.1.1.trans_lt hx.1.2\n    rwa [mul_lt_mul_iff_left, ← mul_one (b ^ m), zpow_add_one, mul_lt_mul_iff_left] at this\n  have i1 := hx.1.1.trans_lt hx.2.2\n  have i2 := hx.2.1.trans_lt hx.1.2\n  rw [mul_lt_mul_iff_left, zpow_lt_zpow_iff_right hb, Int.lt_add_one_iff] at i1 i2\n  exact le_antisymm i1 i2\n\n"}
{"name":"Set.pairwise_disjoint_Ioo_add_zsmul","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\na b : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioo (HAdd.hAdd a (HSMul.hSMul n b)) (HAdd.hAdd a (HSMul.hSMul (HAdd.hAdd n 1) b)))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioo_mul_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioo (a * b ^ n) (a * b ^ (n + 1))) := fun _ _ hmn =>\n  (pairwise_disjoint_Ioc_mul_zpow a b hmn).mono Ioo_subset_Ioc_self Ioo_subset_Ioc_self\n\n"}
{"name":"Set.pairwise_disjoint_Ioo_mul_zpow","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\na b : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioo (HMul.hMul a (HPow.hPow b n)) (HMul.hMul a (HPow.hPow b (HAdd.hAdd n 1))))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioo_mul_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioo (a * b ^ n) (a * b ^ (n + 1))) := fun _ _ hmn =>\n  (pairwise_disjoint_Ioc_mul_zpow a b hmn).mono Ioo_subset_Ioc_self Ioo_subset_Ioc_self\n\n"}
{"name":"Set.pairwise_disjoint_Ioc_zpow","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\nb : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioc (HPow.hPow b n) (HPow.hPow b (HAdd.hAdd n 1)))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioc_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioc (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ioc_mul_zpow 1 b\n\n"}
{"name":"Set.pairwise_disjoint_Ioc_zsmul","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\nb : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioc (HSMul.hSMul n b) (HSMul.hSMul (HAdd.hAdd n 1) b))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioc_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioc (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ioc_mul_zpow 1 b\n\n"}
{"name":"Set.pairwise_disjoint_Ico_zsmul","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\nb : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ico (HSMul.hSMul n b) (HSMul.hSMul (HAdd.hAdd n 1) b))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ico_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ico (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ico_mul_zpow 1 b\n\n"}
{"name":"Set.pairwise_disjoint_Ico_zpow","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\nb : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ico (HPow.hPow b n) (HPow.hPow b (HAdd.hAdd n 1)))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ico_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ico (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ico_mul_zpow 1 b\n\n"}
{"name":"Set.pairwise_disjoint_Ioo_zpow","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedCommGroup α\nb : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioo (HPow.hPow b n) (HPow.hPow b (HAdd.hAdd n 1)))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioo_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioo (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ioo_mul_zpow 1 b\n\n"}
{"name":"Set.pairwise_disjoint_Ioo_zsmul","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedAddCommGroup α\nb : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioo (HSMul.hSMul n b) (HSMul.hSMul (HAdd.hAdd n 1) b))","decl":"@[to_additive]\ntheorem pairwise_disjoint_Ioo_zpow :\n    Pairwise (Disjoint on fun n : ℤ => Ioo (b ^ n) (b ^ (n + 1))) := by\n  simpa only [one_mul] using pairwise_disjoint_Ioo_mul_zpow 1 b\n\n"}
{"name":"Set.pairwise_disjoint_Ioc_add_intCast","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\na : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioc (HAdd.hAdd a ↑n) (HAdd.hAdd (HAdd.hAdd a ↑n) 1))","decl":"theorem pairwise_disjoint_Ioc_add_intCast :\n    Pairwise (Disjoint on fun n : ℤ => Ioc (a + n) (a + n + 1)) := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using\n    pairwise_disjoint_Ioc_add_zsmul a (1 : α)\n\n"}
{"name":"Set.pairwise_disjoint_Ico_add_intCast","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\na : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ico (HAdd.hAdd a ↑n) (HAdd.hAdd (HAdd.hAdd a ↑n) 1))","decl":"theorem pairwise_disjoint_Ico_add_intCast :\n    Pairwise (Disjoint on fun n : ℤ => Ico (a + n) (a + n + 1)) := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using\n    pairwise_disjoint_Ico_add_zsmul a (1 : α)\n\n"}
{"name":"Set.pairwise_disjoint_Ioo_add_intCast","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\na : α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioo (HAdd.hAdd a ↑n) (HAdd.hAdd (HAdd.hAdd a ↑n) 1))","decl":"theorem pairwise_disjoint_Ioo_add_intCast :\n    Pairwise (Disjoint on fun n : ℤ => Ioo (a + n) (a + n + 1)) := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using\n    pairwise_disjoint_Ioo_add_zsmul a (1 : α)\n\n"}
{"name":"Set.pairwise_disjoint_Ico_intCast","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ico (↑n) (HAdd.hAdd (↑n) 1))","decl":"theorem pairwise_disjoint_Ico_intCast :\n    Pairwise (Disjoint on fun n : ℤ => Ico (n : α) (n + 1)) := by\n  simpa only [zero_add] using pairwise_disjoint_Ico_add_intCast (0 : α)\n\n"}
{"name":"Set.pairwise_disjoint_Ioo_intCast","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioo (↑n) (HAdd.hAdd (↑n) 1))","decl":"theorem pairwise_disjoint_Ioo_intCast : Pairwise (Disjoint on fun n : ℤ => Ioo (n : α) (n + 1)) :=\n  by simpa only [zero_add] using pairwise_disjoint_Ioo_add_intCast (0 : α)\n\n"}
{"name":"Set.pairwise_disjoint_Ioc_intCast","module":"Mathlib.Algebra.Order.Interval.Set.Group","initialProofState":"α : Type u_1\ninst✝ : OrderedRing α\n⊢ Pairwise (Function.onFun Disjoint fun n => Set.Ioc (↑n) (HAdd.hAdd (↑n) 1))","decl":"theorem pairwise_disjoint_Ioc_intCast : Pairwise (Disjoint on fun n : ℤ => Ioc (n : α) (n + 1)) :=\n  by simpa only [zero_add] using pairwise_disjoint_Ioc_add_intCast (0 : α)\n\n"}
