{"name":"IsometricVAdd.isometry_vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : VAdd M X\nself : IsometricVAdd M X\nc : M\n⊢ Isometry fun x => HVAdd.hVAdd c x","decl":"/-- An additive action is isometric if each map `x ↦ c +ᵥ x` is an isometry. -/\nclass IsometricVAdd [PseudoEMetricSpace X] [VAdd M X] : Prop where\n  protected isometry_vadd : ∀ c : M, Isometry ((c +ᵥ ·) : X → X)\n\n"}
{"name":"IsometricSMul.isometry_smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : SMul M X\nself : IsometricSMul M X\nc : M\n⊢ Isometry fun x => HSMul.hSMul c x","decl":"/-- A multiplicative action is isometric if each map `x ↦ c • x` is an isometry. -/\n@[to_additive]\nclass IsometricSMul [PseudoEMetricSpace X] [SMul M X] : Prop where\n  protected isometry_smul : ∀ c : M, Isometry ((c • ·) : X → X)\n\n-- Porting note: Lean 4 doesn't support `[]` in classes, so make a lemma instead of `export`ing\n"}
{"name":"isometry_smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\nc : M\n⊢ Isometry fun x => HSMul.hSMul c x","decl":"@[to_additive]\ntheorem isometry_smul {M : Type u} (X : Type w) [PseudoEMetricSpace X] [SMul M X]\n    [IsometricSMul M X] (c : M) : Isometry (c • · : X → X) :=\n  IsometricSMul.isometry_smul c\n\n"}
{"name":"isometry_vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\nc : M\n⊢ Isometry fun x => HVAdd.hVAdd c x","decl":"@[to_additive]\ntheorem isometry_smul {M : Type u} (X : Type w) [PseudoEMetricSpace X] [SMul M X]\n    [IsometricSMul M X] (c : M) : Isometry (c • · : X → X) :=\n  IsometricSMul.isometry_smul c\n\n"}
{"name":"IsometricSMul.to_continuousConstSMul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\n⊢ ContinuousConstSMul M X","decl":"@[to_additive]\ninstance (priority := 100) IsometricSMul.to_continuousConstSMul [PseudoEMetricSpace X] [SMul M X]\n    [IsometricSMul M X] : ContinuousConstSMul M X :=\n  ⟨fun c => (isometry_smul X c).continuous⟩\n\n"}
{"name":"IsometricVAdd.to_continuousConstVAdd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\n⊢ ContinuousConstVAdd M X","decl":"@[to_additive]\ninstance (priority := 100) IsometricSMul.to_continuousConstSMul [PseudoEMetricSpace X] [SMul M X]\n    [IsometricSMul M X] : ContinuousConstSMul M X :=\n  ⟨fun c => (isometry_smul X c).continuous⟩\n\n"}
{"name":"IsometricVAdd.opposite_of_comm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝⁴ : PseudoEMetricSpace X\ninst✝³ : VAdd M X\ninst✝² : VAdd (AddOpposite M) X\ninst✝¹ : IsCentralVAdd M X\ninst✝ : IsometricVAdd M X\n⊢ IsometricVAdd (AddOpposite M) X","decl":"@[to_additive]\ninstance (priority := 100) IsometricSMul.opposite_of_comm [PseudoEMetricSpace X] [SMul M X]\n    [SMul Mᵐᵒᵖ X] [IsCentralScalar M X] [IsometricSMul M X] : IsometricSMul Mᵐᵒᵖ X :=\n  ⟨fun c x y => by simpa only [← op_smul_eq_smul] using isometry_smul X c.unop x y⟩\n\n"}
{"name":"IsometricSMul.opposite_of_comm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝⁴ : PseudoEMetricSpace X\ninst✝³ : SMul M X\ninst✝² : SMul (MulOpposite M) X\ninst✝¹ : IsCentralScalar M X\ninst✝ : IsometricSMul M X\n⊢ IsometricSMul (MulOpposite M) X","decl":"@[to_additive]\ninstance (priority := 100) IsometricSMul.opposite_of_comm [PseudoEMetricSpace X] [SMul M X]\n    [SMul Mᵐᵒᵖ X] [IsCentralScalar M X] [IsometricSMul M X] : IsometricSMul Mᵐᵒᵖ X :=\n  ⟨fun c x y => by simpa only [← op_smul_eq_smul] using isometry_smul X c.unop x y⟩\n\n"}
{"name":"edist_vadd_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\nc : M\nx y : X\n⊢ Eq (EDist.edist (HVAdd.hVAdd c x) (HVAdd.hVAdd c y)) (EDist.edist x y)","decl":"@[to_additive (attr := simp)]\ntheorem edist_smul_left [SMul M X] [IsometricSMul M X] (c : M) (x y : X) :\n    edist (c • x) (c • y) = edist x y :=\n  isometry_smul X c x y\n\n"}
{"name":"edist_smul_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\nc : M\nx y : X\n⊢ Eq (EDist.edist (HSMul.hSMul c x) (HSMul.hSMul c y)) (EDist.edist x y)","decl":"@[to_additive (attr := simp)]\ntheorem edist_smul_left [SMul M X] [IsometricSMul M X] (c : M) (x y : X) :\n    edist (c • x) (c • y) = edist x y :=\n  isometry_smul X c x y\n\n"}
{"name":"ediam_smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\nc : M\ns : Set X\n⊢ Eq (EMetric.diam (HSMul.hSMul c s)) (EMetric.diam s)","decl":"@[to_additive (attr := simp)]\ntheorem ediam_smul [SMul M X] [IsometricSMul M X] (c : M) (s : Set X) :\n    EMetric.diam (c • s) = EMetric.diam s :=\n  (isometry_smul _ _).ediam_image s\n\n"}
{"name":"ediam_vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\nc : M\ns : Set X\n⊢ Eq (EMetric.diam (HVAdd.hVAdd c s)) (EMetric.diam s)","decl":"@[to_additive (attr := simp)]\ntheorem ediam_smul [SMul M X] [IsometricSMul M X] (c : M) (s : Set X) :\n    EMetric.diam (c • s) = EMetric.diam s :=\n  (isometry_smul _ _).ediam_image s\n\n"}
{"name":"isometry_add_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd M M\na : M\n⊢ Isometry fun x => HAdd.hAdd a x","decl":"@[to_additive]\ntheorem isometry_mul_left [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] (a : M) :\n    Isometry (a * ·) :=\n  isometry_smul M a\n\n"}
{"name":"isometry_mul_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul M M\na : M\n⊢ Isometry fun x => HMul.hMul a x","decl":"@[to_additive]\ntheorem isometry_mul_left [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] (a : M) :\n    Isometry (a * ·) :=\n  isometry_smul M a\n\n"}
{"name":"edist_mul_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul M M\na b c : M\n⊢ Eq (EDist.edist (HMul.hMul a b) (HMul.hMul a c)) (EDist.edist b c)","decl":"@[to_additive (attr := simp)]\ntheorem edist_mul_left [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] (a b c : M) :\n    edist (a * b) (a * c) = edist b c :=\n  isometry_mul_left a b c\n\n"}
{"name":"edist_add_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd M M\na b c : M\n⊢ Eq (EDist.edist (HAdd.hAdd a b) (HAdd.hAdd a c)) (EDist.edist b c)","decl":"@[to_additive (attr := simp)]\ntheorem edist_mul_left [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] (a b c : M) :\n    edist (a * b) (a * c) = edist b c :=\n  isometry_mul_left a b c\n\n"}
{"name":"isometry_add_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\na : M\n⊢ Isometry fun x => HAdd.hAdd x a","decl":"@[to_additive]\ntheorem isometry_mul_right [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] (a : M) :\n    Isometry fun x => x * a :=\n  isometry_smul M (MulOpposite.op a)\n\n"}
{"name":"isometry_mul_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\na : M\n⊢ Isometry fun x => HMul.hMul x a","decl":"@[to_additive]\ntheorem isometry_mul_right [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] (a : M) :\n    Isometry fun x => x * a :=\n  isometry_smul M (MulOpposite.op a)\n\n"}
{"name":"edist_mul_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\na b c : M\n⊢ Eq (EDist.edist (HMul.hMul a c) (HMul.hMul b c)) (EDist.edist a b)","decl":"@[to_additive (attr := simp)]\ntheorem edist_mul_right [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] (a b c : M) :\n    edist (a * c) (b * c) = edist a b :=\n  isometry_mul_right c a b\n\n"}
{"name":"edist_add_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\na b c : M\n⊢ Eq (EDist.edist (HAdd.hAdd a c) (HAdd.hAdd b c)) (EDist.edist a b)","decl":"@[to_additive (attr := simp)]\ntheorem edist_mul_right [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] (a b c : M) :\n    edist (a * c) (b * c) = edist a b :=\n  isometry_mul_right c a b\n\n"}
{"name":"edist_sub_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : SubNegMonoid M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\na b c : M\n⊢ Eq (EDist.edist (HSub.hSub a c) (HSub.hSub b c)) (EDist.edist a b)","decl":"@[to_additive (attr := simp)]\ntheorem edist_div_right [DivInvMonoid M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    (a b c : M) : edist (a / c) (b / c) = edist a b := by\n  simp only [div_eq_mul_inv, edist_mul_right]\n\n"}
{"name":"edist_div_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : DivInvMonoid M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\na b c : M\n⊢ Eq (EDist.edist (HDiv.hDiv a c) (HDiv.hDiv b c)) (EDist.edist a b)","decl":"@[to_additive (attr := simp)]\ntheorem edist_div_right [DivInvMonoid M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    (a b c : M) : edist (a / c) (b / c) = edist a b := by\n  simp only [div_eq_mul_inv, edist_mul_right]\n\n"}
{"name":"edist_inv_inv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\n⊢ Eq (EDist.edist (Inv.inv a) (Inv.inv b)) (EDist.edist a b)","decl":"@[to_additive (attr := simp)]\ntheorem edist_inv_inv [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G]\n    (a b : G) : edist a⁻¹ b⁻¹ = edist a b := by\n  rw [← edist_mul_left a, ← edist_mul_right _ _ b, mul_inv_cancel, one_mul, inv_mul_cancel_right,\n    edist_comm]\n\n"}
{"name":"edist_neg_neg","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\n⊢ Eq (EDist.edist (Neg.neg a) (Neg.neg b)) (EDist.edist a b)","decl":"@[to_additive (attr := simp)]\ntheorem edist_inv_inv [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G]\n    (a b : G) : edist a⁻¹ b⁻¹ = edist a b := by\n  rw [← edist_mul_left a, ← edist_mul_right _ _ b, mul_inv_cancel, one_mul, inv_mul_cancel_right,\n    edist_comm]\n\n"}
{"name":"isometry_neg","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\n⊢ Isometry Neg.neg","decl":"@[to_additive]\ntheorem isometry_inv [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G] :\n    Isometry (Inv.inv : G → G) :=\n  edist_inv_inv\n\n"}
{"name":"isometry_inv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\n⊢ Isometry Inv.inv","decl":"@[to_additive]\ntheorem isometry_inv [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G] :\n    Isometry (Inv.inv : G → G) :=\n  edist_inv_inv\n\n"}
{"name":"edist_inv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\nx y : G\n⊢ Eq (EDist.edist (Inv.inv x) y) (EDist.edist x (Inv.inv y))","decl":"@[to_additive]\ntheorem edist_inv [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G]\n    (x y : G) : edist x⁻¹ y = edist x y⁻¹ := by rw [← edist_inv_inv, inv_inv]\n\n"}
{"name":"edist_neg","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\nx y : G\n⊢ Eq (EDist.edist (Neg.neg x) y) (EDist.edist x (Neg.neg y))","decl":"@[to_additive]\ntheorem edist_inv [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G]\n    (x y : G) : edist x⁻¹ y = edist x y⁻¹ := by rw [← edist_inv_inv, inv_inv]\n\n"}
{"name":"edist_sub_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b c : G\n⊢ Eq (EDist.edist (HSub.hSub a b) (HSub.hSub a c)) (EDist.edist b c)","decl":"@[to_additive (attr := simp)]\ntheorem edist_div_left [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G]\n    (a b c : G) : edist (a / b) (a / c) = edist b c := by\n  rw [div_eq_mul_inv, div_eq_mul_inv, edist_mul_left, edist_inv_inv]\n\n"}
{"name":"edist_div_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na b c : G\n⊢ Eq (EDist.edist (HDiv.hDiv a b) (HDiv.hDiv a c)) (EDist.edist b c)","decl":"@[to_additive (attr := simp)]\ntheorem edist_div_left [PseudoEMetricSpace G] [IsometricSMul G G] [IsometricSMul Gᵐᵒᵖ G]\n    (a b c : G) : edist (a / b) (a / c) = edist b c := by\n  rw [div_eq_mul_inv, div_eq_mul_inv, edist_mul_left, edist_inv_inv]\n\n"}
{"name":"IsometryEquiv.constSMul_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\n⊢ Eq ((IsometryEquiv.constSMul c) x) (HSMul.hSMul c x)","decl":"/-- If a group `G` acts on `X` by isometries, then `IsometryEquiv.constSMul` is the isometry of\n`X` given by multiplication of a constant element of the group. -/\n@[to_additive (attr := simps! toEquiv apply) \"If an additive group `G` acts on `X` by isometries,\nthen `IsometryEquiv.constVAdd` is the isometry of `X` given by addition of a constant element of the\ngroup.\"]\ndef constSMul (c : G) : X ≃ᵢ X where\n  toEquiv := MulAction.toPerm c\n  isometry_toFun := isometry_smul X c\n\n"}
{"name":"IsometryEquiv.constVAdd_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\n⊢ Eq (IsometryEquiv.constVAdd c).toEquiv (AddAction.toPerm c)","decl":"/-- If a group `G` acts on `X` by isometries, then `IsometryEquiv.constSMul` is the isometry of\n`X` given by multiplication of a constant element of the group. -/\n@[to_additive (attr := simps! toEquiv apply) \"If an additive group `G` acts on `X` by isometries,\nthen `IsometryEquiv.constVAdd` is the isometry of `X` given by addition of a constant element of the\ngroup.\"]\ndef constSMul (c : G) : X ≃ᵢ X where\n  toEquiv := MulAction.toPerm c\n  isometry_toFun := isometry_smul X c\n\n"}
{"name":"IsometryEquiv.constSMul_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\n⊢ Eq (IsometryEquiv.constSMul c).toEquiv (MulAction.toPerm c)","decl":"/-- If a group `G` acts on `X` by isometries, then `IsometryEquiv.constSMul` is the isometry of\n`X` given by multiplication of a constant element of the group. -/\n@[to_additive (attr := simps! toEquiv apply) \"If an additive group `G` acts on `X` by isometries,\nthen `IsometryEquiv.constVAdd` is the isometry of `X` given by addition of a constant element of the\ngroup.\"]\ndef constSMul (c : G) : X ≃ᵢ X where\n  toEquiv := MulAction.toPerm c\n  isometry_toFun := isometry_smul X c\n\n"}
{"name":"IsometryEquiv.constVAdd_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\n⊢ Eq ((IsometryEquiv.constVAdd c) x) (HVAdd.hVAdd c x)","decl":"/-- If a group `G` acts on `X` by isometries, then `IsometryEquiv.constSMul` is the isometry of\n`X` given by multiplication of a constant element of the group. -/\n@[to_additive (attr := simps! toEquiv apply) \"If an additive group `G` acts on `X` by isometries,\nthen `IsometryEquiv.constVAdd` is the isometry of `X` given by addition of a constant element of the\ngroup.\"]\ndef constSMul (c : G) : X ≃ᵢ X where\n  toEquiv := MulAction.toPerm c\n  isometry_toFun := isometry_smul X c\n\n"}
{"name":"IsometryEquiv.constSMul_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\n⊢ Eq (IsometryEquiv.constSMul c).symm (IsometryEquiv.constSMul (Inv.inv c))","decl":"@[to_additive (attr := simp)]\ntheorem constSMul_symm (c : G) : (constSMul c : X ≃ᵢ X).symm = constSMul c⁻¹ :=\n  ext fun _ => rfl\n\n"}
{"name":"IsometryEquiv.constVAdd_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\n⊢ Eq (IsometryEquiv.constVAdd c).symm (IsometryEquiv.constVAdd (Neg.neg c))","decl":"@[to_additive (attr := simp)]\ntheorem constSMul_symm (c : G) : (constSMul c : X ≃ᵢ X).symm = constSMul c⁻¹ :=\n  ext fun _ => rfl\n\n"}
{"name":"IsometryEquiv.addLeft_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd G G\nc x : G\n⊢ Eq ((IsometryEquiv.addLeft c) x) (HAdd.hAdd c x)","decl":"/-- Multiplication `y ↦ x * y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ x + y` as an `IsometryEquiv`.\"]\ndef mulLeft [IsometricSMul G G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulLeft c\n  isometry_toFun := edist_mul_left c\n\n"}
{"name":"IsometryEquiv.mulLeft_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul G G\nc : G\n⊢ Eq (IsometryEquiv.mulLeft c).toEquiv (Equiv.mulLeft c)","decl":"/-- Multiplication `y ↦ x * y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ x + y` as an `IsometryEquiv`.\"]\ndef mulLeft [IsometricSMul G G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulLeft c\n  isometry_toFun := edist_mul_left c\n\n"}
{"name":"IsometryEquiv.addLeft_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd G G\nc : G\n⊢ Eq (IsometryEquiv.addLeft c).toEquiv (Equiv.addLeft c)","decl":"/-- Multiplication `y ↦ x * y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ x + y` as an `IsometryEquiv`.\"]\ndef mulLeft [IsometricSMul G G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulLeft c\n  isometry_toFun := edist_mul_left c\n\n"}
{"name":"IsometryEquiv.mulLeft_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul G G\nc x : G\n⊢ Eq ((IsometryEquiv.mulLeft c) x) (HMul.hMul c x)","decl":"/-- Multiplication `y ↦ x * y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ x + y` as an `IsometryEquiv`.\"]\ndef mulLeft [IsometricSMul G G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulLeft c\n  isometry_toFun := edist_mul_left c\n\n"}
{"name":"IsometryEquiv.addLeft_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd G G\nx : G\n⊢ Eq (IsometryEquiv.addLeft x).symm (IsometryEquiv.addLeft (Neg.neg x))","decl":"@[to_additive (attr := simp)]\ntheorem mulLeft_symm [IsometricSMul G G] (x : G) :\n    (mulLeft x).symm = IsometryEquiv.mulLeft x⁻¹ :=\n  constSMul_symm x\n\n"}
{"name":"IsometryEquiv.mulLeft_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul G G\nx : G\n⊢ Eq (IsometryEquiv.mulLeft x).symm (IsometryEquiv.mulLeft (Inv.inv x))","decl":"@[to_additive (attr := simp)]\ntheorem mulLeft_symm [IsometricSMul G G] (x : G) :\n    (mulLeft x).symm = IsometryEquiv.mulLeft x⁻¹ :=\n  constSMul_symm x\n\n"}
{"name":"IsometryEquiv.addRight_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.addRight c).toEquiv (Equiv.addRight c)","decl":"/-- Multiplication `y ↦ y * x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ y + x` as an `IsometryEquiv`.\"]\ndef mulRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulRight c\n  isometry_toFun a b := edist_mul_right a b c\n\n"}
{"name":"IsometryEquiv.mulRight_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\nc x : G\n⊢ Eq ((IsometryEquiv.mulRight c) x) (HMul.hMul x c)","decl":"/-- Multiplication `y ↦ y * x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ y + x` as an `IsometryEquiv`.\"]\ndef mulRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulRight c\n  isometry_toFun a b := edist_mul_right a b c\n\n"}
{"name":"IsometryEquiv.addRight_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc x : G\n⊢ Eq ((IsometryEquiv.addRight c) x) (HAdd.hAdd x c)","decl":"/-- Multiplication `y ↦ y * x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ y + x` as an `IsometryEquiv`.\"]\ndef mulRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulRight c\n  isometry_toFun a b := edist_mul_right a b c\n\n"}
{"name":"IsometryEquiv.mulRight_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.mulRight c).toEquiv (Equiv.mulRight c)","decl":"/-- Multiplication `y ↦ y * x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Addition `y ↦ y + x` as an `IsometryEquiv`.\"]\ndef mulRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.mulRight c\n  isometry_toFun a b := edist_mul_right a b c\n\n"}
{"name":"IsometryEquiv.mulRight_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\nx : G\n⊢ Eq (IsometryEquiv.mulRight x).symm (IsometryEquiv.mulRight (Inv.inv x))","decl":"@[to_additive (attr := simp)]\ntheorem mulRight_symm [IsometricSMul Gᵐᵒᵖ G] (x : G) : (mulRight x).symm = mulRight x⁻¹ :=\n  ext fun _ => rfl\n\n"}
{"name":"IsometryEquiv.addRight_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\nx : G\n⊢ Eq (IsometryEquiv.addRight x).symm (IsometryEquiv.addRight (Neg.neg x))","decl":"@[to_additive (attr := simp)]\ntheorem mulRight_symm [IsometricSMul Gᵐᵒᵖ G] (x : G) : (mulRight x).symm = mulRight x⁻¹ :=\n  ext fun _ => rfl\n\n"}
{"name":"IsometryEquiv.subRight_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc b : G\n⊢ Eq ((IsometryEquiv.subRight c) b) (HSub.hSub b c)","decl":"/-- Division `y ↦ y / x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Subtraction `y ↦ y - x` as an `IsometryEquiv`.\"]\ndef divRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divRight c\n  isometry_toFun a b := edist_div_right a b c\n\n"}
{"name":"IsometryEquiv.subRight_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.subRight c).toEquiv (Equiv.subRight c)","decl":"/-- Division `y ↦ y / x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Subtraction `y ↦ y - x` as an `IsometryEquiv`.\"]\ndef divRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divRight c\n  isometry_toFun a b := edist_div_right a b c\n\n"}
{"name":"IsometryEquiv.divRight_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\nc b : G\n⊢ Eq ((IsometryEquiv.divRight c) b) (HDiv.hDiv b c)","decl":"/-- Division `y ↦ y / x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Subtraction `y ↦ y - x` as an `IsometryEquiv`.\"]\ndef divRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divRight c\n  isometry_toFun a b := edist_div_right a b c\n\n"}
{"name":"IsometryEquiv.divRight_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.divRight c).toEquiv (Equiv.divRight c)","decl":"/-- Division `y ↦ y / x` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Subtraction `y ↦ y - x` as an `IsometryEquiv`.\"]\ndef divRight [IsometricSMul Gᵐᵒᵖ G] (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divRight c\n  isometry_toFun a b := edist_div_right a b c\n\n"}
{"name":"IsometryEquiv.divRight_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.divRight c).symm (IsometryEquiv.mulRight c)","decl":"@[to_additive (attr := simp)]\ntheorem divRight_symm [IsometricSMul Gᵐᵒᵖ G] (c : G) : (divRight c).symm = mulRight c :=\n  ext fun _ => rfl\n\n"}
{"name":"IsometryEquiv.subRight_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.subRight c).symm (IsometryEquiv.addRight c)","decl":"@[to_additive (attr := simp)]\ntheorem divRight_symm [IsometricSMul Gᵐᵒᵖ G] (c : G) : (divRight c).symm = mulRight c :=\n  ext fun _ => rfl\n\n"}
{"name":"IsometryEquiv.subLeft_symm_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc b : G\n⊢ Eq ((IsometryEquiv.subLeft c).symm b) (HAdd.hAdd (Neg.neg b) c)","decl":"/-- Division `y ↦ x / y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply symm_apply toEquiv)\n  \"Subtraction `y ↦ x - y` as an `IsometryEquiv`.\"]\ndef divLeft (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divLeft c\n  isometry_toFun := edist_div_left c\n\n"}
{"name":"IsometryEquiv.subLeft_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc b : G\n⊢ Eq ((IsometryEquiv.subLeft c) b) (HSub.hSub c b)","decl":"/-- Division `y ↦ x / y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply symm_apply toEquiv)\n  \"Subtraction `y ↦ x - y` as an `IsometryEquiv`.\"]\ndef divLeft (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divLeft c\n  isometry_toFun := edist_div_left c\n\n"}
{"name":"IsometryEquiv.subLeft_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.subLeft c).toEquiv (Equiv.subLeft c)","decl":"/-- Division `y ↦ x / y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply symm_apply toEquiv)\n  \"Subtraction `y ↦ x - y` as an `IsometryEquiv`.\"]\ndef divLeft (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divLeft c\n  isometry_toFun := edist_div_left c\n\n"}
{"name":"IsometryEquiv.divLeft_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\nc b : G\n⊢ Eq ((IsometryEquiv.divLeft c) b) (HDiv.hDiv c b)","decl":"/-- Division `y ↦ x / y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply symm_apply toEquiv)\n  \"Subtraction `y ↦ x - y` as an `IsometryEquiv`.\"]\ndef divLeft (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divLeft c\n  isometry_toFun := edist_div_left c\n\n"}
{"name":"IsometryEquiv.divLeft_symm_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\nc b : G\n⊢ Eq ((IsometryEquiv.divLeft c).symm b) (HMul.hMul (Inv.inv b) c)","decl":"/-- Division `y ↦ x / y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply symm_apply toEquiv)\n  \"Subtraction `y ↦ x - y` as an `IsometryEquiv`.\"]\ndef divLeft (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divLeft c\n  isometry_toFun := edist_div_left c\n\n"}
{"name":"IsometryEquiv.divLeft_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\nc : G\n⊢ Eq (IsometryEquiv.divLeft c).toEquiv (Equiv.divLeft c)","decl":"/-- Division `y ↦ x / y` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply symm_apply toEquiv)\n  \"Subtraction `y ↦ x - y` as an `IsometryEquiv`.\"]\ndef divLeft (c : G) : G ≃ᵢ G where\n  toEquiv := Equiv.divLeft c\n  isometry_toFun := edist_div_left c\n\n"}
{"name":"IsometryEquiv.neg_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\n⊢ Eq (IsometryEquiv.neg G).toEquiv (Equiv.neg G)","decl":"/-- Inversion `x ↦ x⁻¹` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Negation `x ↦ -x` as an `IsometryEquiv`.\"]\ndef inv : G ≃ᵢ G where\n  toEquiv := Equiv.inv G\n  isometry_toFun := edist_inv_inv\n\n"}
{"name":"IsometryEquiv.inv_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na✝ : G\n⊢ Eq ((IsometryEquiv.inv G) a✝) (Inv.inv a✝)","decl":"/-- Inversion `x ↦ x⁻¹` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Negation `x ↦ -x` as an `IsometryEquiv`.\"]\ndef inv : G ≃ᵢ G where\n  toEquiv := Equiv.inv G\n  isometry_toFun := edist_inv_inv\n\n"}
{"name":"IsometryEquiv.inv_toEquiv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\n⊢ Eq (IsometryEquiv.inv G).toEquiv (Equiv.inv G)","decl":"/-- Inversion `x ↦ x⁻¹` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Negation `x ↦ -x` as an `IsometryEquiv`.\"]\ndef inv : G ≃ᵢ G where\n  toEquiv := Equiv.inv G\n  isometry_toFun := edist_inv_inv\n\n"}
{"name":"IsometryEquiv.neg_apply","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na✝ : G\n⊢ Eq ((IsometryEquiv.neg G) a✝) (Neg.neg a✝)","decl":"/-- Inversion `x ↦ x⁻¹` as an `IsometryEquiv`. -/\n@[to_additive (attr := simps! apply toEquiv) \"Negation `x ↦ -x` as an `IsometryEquiv`.\"]\ndef inv : G ≃ᵢ G where\n  toEquiv := Equiv.inv G\n  isometry_toFun := edist_inv_inv\n\n"}
{"name":"IsometryEquiv.inv_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\n⊢ Eq (IsometryEquiv.inv G).symm (IsometryEquiv.inv G)","decl":"@[to_additive (attr := simp)] theorem inv_symm : (inv G).symm = inv G := rfl\n\n"}
{"name":"IsometryEquiv.neg_symm","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoEMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\n⊢ Eq (IsometryEquiv.neg G).symm (IsometryEquiv.neg G)","decl":"@[to_additive (attr := simp)] theorem inv_symm : (inv G).symm = inv G := rfl\n\n"}
{"name":"EMetric.smul_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (HSMul.hSMul c (EMetric.ball x r)) (EMetric.ball (HSMul.hSMul c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_ball (c : G) (x : X) (r : ℝ≥0∞) : c • ball x r = ball (c • x) r :=\n  (IsometryEquiv.constSMul c).image_emetric_ball _ _\n\n"}
{"name":"EMetric.vadd_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (HVAdd.hVAdd c (EMetric.ball x r)) (EMetric.ball (HVAdd.hVAdd c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_ball (c : G) (x : X) (r : ℝ≥0∞) : c • ball x r = ball (c • x) r :=\n  (IsometryEquiv.constSMul c).image_emetric_ball _ _\n\n"}
{"name":"EMetric.preimage_smul_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HSMul.hSMul c x) (EMetric.ball x r)) (EMetric.ball (HSMul.hSMul (Inv.inv c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_ball (c : G) (x : X) (r : ℝ≥0∞) :\n    (c • ·) ⁻¹' ball x r = ball (c⁻¹ • x) r := by\n  rw [preimage_smul, smul_ball]\n\n"}
{"name":"EMetric.preimage_vadd_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HVAdd.hVAdd c x) (EMetric.ball x r)) (EMetric.ball (HVAdd.hVAdd (Neg.neg c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_ball (c : G) (x : X) (r : ℝ≥0∞) :\n    (c • ·) ⁻¹' ball x r = ball (c⁻¹ • x) r := by\n  rw [preimage_smul, smul_ball]\n\n"}
{"name":"EMetric.vadd_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (HVAdd.hVAdd c (EMetric.closedBall x r)) (EMetric.closedBall (HVAdd.hVAdd c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_closedBall (c : G) (x : X) (r : ℝ≥0∞) : c • closedBall x r = closedBall (c • x) r :=\n  (IsometryEquiv.constSMul c).image_emetric_closedBall _ _\n\n"}
{"name":"EMetric.smul_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (HSMul.hSMul c (EMetric.closedBall x r)) (EMetric.closedBall (HSMul.hSMul c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_closedBall (c : G) (x : X) (r : ℝ≥0∞) : c • closedBall x r = closedBall (c • x) r :=\n  (IsometryEquiv.constSMul c).image_emetric_closedBall _ _\n\n"}
{"name":"EMetric.preimage_smul_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HSMul.hSMul c x) (EMetric.closedBall x r)) (EMetric.closedBall (HSMul.hSMul (Inv.inv c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_closedBall (c : G) (x : X) (r : ℝ≥0∞) :\n    (c • ·) ⁻¹' closedBall x r = closedBall (c⁻¹ • x) r := by\n  rw [preimage_smul, smul_closedBall]\n\n"}
{"name":"EMetric.preimage_vadd_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HVAdd.hVAdd c x) (EMetric.closedBall x r)) (EMetric.closedBall (HVAdd.hVAdd (Neg.neg c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_closedBall (c : G) (x : X) (r : ℝ≥0∞) :\n    (c • ·) ⁻¹' closedBall x r = closedBall (c⁻¹ • x) r := by\n  rw [preimage_smul, smul_closedBall]\n\n"}
{"name":"EMetric.preimage_add_left_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd G G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (EMetric.ball b r)) (EMetric.ball (HAdd.hAdd (Neg.neg a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_ball [IsometricSMul G G] (a b : G) (r : ℝ≥0∞) :\n    (a * ·) ⁻¹' ball b r = ball (a⁻¹ * b) r :=\n  preimage_smul_ball a b r\n\n"}
{"name":"EMetric.preimage_mul_left_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul G G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HMul.hMul a x) (EMetric.ball b r)) (EMetric.ball (HMul.hMul (Inv.inv a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_ball [IsometricSMul G G] (a b : G) (r : ℝ≥0∞) :\n    (a * ·) ⁻¹' ball b r = ball (a⁻¹ * b) r :=\n  preimage_smul_ball a b r\n\n"}
{"name":"EMetric.preimage_mul_right_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HMul.hMul x a) (EMetric.ball b r)) (EMetric.ball (HDiv.hDiv b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_ball [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ≥0∞) :\n    (fun x => x * a) ⁻¹' ball b r = ball (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_ball (MulOpposite.op a) b r\n\n"}
{"name":"EMetric.preimage_add_right_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (EMetric.ball b r)) (EMetric.ball (HSub.hSub b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_ball [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ≥0∞) :\n    (fun x => x * a) ⁻¹' ball b r = ball (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_ball (MulOpposite.op a) b r\n\n"}
{"name":"EMetric.preimage_add_left_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd G G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (EMetric.closedBall b r)) (EMetric.closedBall (HAdd.hAdd (Neg.neg a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_closedBall [IsometricSMul G G] (a b : G) (r : ℝ≥0∞) :\n    (a * ·) ⁻¹' closedBall b r = closedBall (a⁻¹ * b) r :=\n  preimage_smul_closedBall a b r\n\n"}
{"name":"EMetric.preimage_mul_left_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul G G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HMul.hMul a x) (EMetric.closedBall b r)) (EMetric.closedBall (HMul.hMul (Inv.inv a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_closedBall [IsometricSMul G G] (a b : G) (r : ℝ≥0∞) :\n    (a * ·) ⁻¹' closedBall b r = closedBall (a⁻¹ * b) r :=\n  preimage_smul_closedBall a b r\n\n"}
{"name":"EMetric.preimage_mul_right_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HMul.hMul x a) (EMetric.closedBall b r)) (EMetric.closedBall (HDiv.hDiv b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_closedBall [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ≥0∞) :\n    (fun x => x * a) ⁻¹' closedBall b r = closedBall (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_closedBall (MulOpposite.op a) b r\n\n"}
{"name":"EMetric.preimage_add_right_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoEMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\nr : ENNReal\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (EMetric.closedBall b r)) (EMetric.closedBall (HSub.hSub b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_closedBall [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ≥0∞) :\n    (fun x => x * a) ⁻¹' closedBall b r = closedBall (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_closedBall (MulOpposite.op a) b r\n\n"}
{"name":"dist_smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\nc : M\nx y : X\n⊢ Eq (Dist.dist (HSMul.hSMul c x) (HSMul.hSMul c y)) (Dist.dist x y)","decl":"@[to_additive (attr := simp)]\ntheorem dist_smul [PseudoMetricSpace X] [SMul M X] [IsometricSMul M X] (c : M) (x y : X) :\n    dist (c • x) (c • y) = dist x y :=\n  (isometry_smul X c).dist_eq x y\n\n"}
{"name":"dist_vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\nc : M\nx y : X\n⊢ Eq (Dist.dist (HVAdd.hVAdd c x) (HVAdd.hVAdd c y)) (Dist.dist x y)","decl":"@[to_additive (attr := simp)]\ntheorem dist_smul [PseudoMetricSpace X] [SMul M X] [IsometricSMul M X] (c : M) (x y : X) :\n    dist (c • x) (c • y) = dist x y :=\n  (isometry_smul X c).dist_eq x y\n\n"}
{"name":"nndist_vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\nc : M\nx y : X\n⊢ Eq (NNDist.nndist (HVAdd.hVAdd c x) (HVAdd.hVAdd c y)) (NNDist.nndist x y)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_smul [PseudoMetricSpace X] [SMul M X] [IsometricSMul M X] (c : M) (x y : X) :\n    nndist (c • x) (c • y) = nndist x y :=\n  (isometry_smul X c).nndist_eq x y\n\n"}
{"name":"nndist_smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\nc : M\nx y : X\n⊢ Eq (NNDist.nndist (HSMul.hSMul c x) (HSMul.hSMul c y)) (NNDist.nndist x y)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_smul [PseudoMetricSpace X] [SMul M X] [IsometricSMul M X] (c : M) (x y : X) :\n    nndist (c • x) (c • y) = nndist x y :=\n  (isometry_smul X c).nndist_eq x y\n\n"}
{"name":"diam_vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : VAdd M X\ninst✝ : IsometricVAdd M X\nc : M\ns : Set X\n⊢ Eq (Metric.diam (HVAdd.hVAdd c s)) (Metric.diam s)","decl":"@[to_additive (attr := simp)]\ntheorem diam_smul [PseudoMetricSpace X] [SMul M X] [IsometricSMul M X] (c : M) (s : Set X) :\n    Metric.diam (c • s) = Metric.diam s :=\n  (isometry_smul _ _).diam_image s\n\n"}
{"name":"diam_smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\nc : M\ns : Set X\n⊢ Eq (Metric.diam (HSMul.hSMul c s)) (Metric.diam s)","decl":"@[to_additive (attr := simp)]\ntheorem diam_smul [PseudoMetricSpace X] [SMul M X] [IsometricSMul M X] (c : M) (s : Set X) :\n    Metric.diam (c • s) = Metric.diam s :=\n  (isometry_smul _ _).diam_image s\n\n"}
{"name":"dist_mul_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : PseudoMetricSpace M\ninst✝¹ : Mul M\ninst✝ : IsometricSMul M M\na b c : M\n⊢ Eq (Dist.dist (HMul.hMul a b) (HMul.hMul a c)) (Dist.dist b c)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_left [PseudoMetricSpace M] [Mul M] [IsometricSMul M M] (a b c : M) :\n    dist (a * b) (a * c) = dist b c :=\n  dist_smul a b c\n\n"}
{"name":"dist_add_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : PseudoMetricSpace M\ninst✝¹ : Add M\ninst✝ : IsometricVAdd M M\na b c : M\n⊢ Eq (Dist.dist (HAdd.hAdd a b) (HAdd.hAdd a c)) (Dist.dist b c)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_left [PseudoMetricSpace M] [Mul M] [IsometricSMul M M] (a b c : M) :\n    dist (a * b) (a * c) = dist b c :=\n  dist_smul a b c\n\n"}
{"name":"nndist_mul_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : PseudoMetricSpace M\ninst✝¹ : Mul M\ninst✝ : IsometricSMul M M\na b c : M\n⊢ Eq (NNDist.nndist (HMul.hMul a b) (HMul.hMul a c)) (NNDist.nndist b c)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_mul_left [PseudoMetricSpace M] [Mul M] [IsometricSMul M M] (a b c : M) :\n    nndist (a * b) (a * c) = nndist b c :=\n  nndist_smul a b c\n\n"}
{"name":"nndist_add_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : PseudoMetricSpace M\ninst✝¹ : Add M\ninst✝ : IsometricVAdd M M\na b c : M\n⊢ Eq (NNDist.nndist (HAdd.hAdd a b) (HAdd.hAdd a c)) (NNDist.nndist b c)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_mul_left [PseudoMetricSpace M] [Mul M] [IsometricSMul M M] (a b c : M) :\n    nndist (a * b) (a * c) = nndist b c :=\n  nndist_smul a b c\n\n"}
{"name":"dist_add_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\na b c : M\n⊢ Eq (Dist.dist (HAdd.hAdd a c) (HAdd.hAdd b c)) (Dist.dist a b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_right [Mul M] [PseudoMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] (a b c : M) :\n    dist (a * c) (b * c) = dist a b :=\n  dist_smul (MulOpposite.op c) a b\n\n"}
{"name":"dist_mul_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\na b c : M\n⊢ Eq (Dist.dist (HMul.hMul a c) (HMul.hMul b c)) (Dist.dist a b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_mul_right [Mul M] [PseudoMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] (a b c : M) :\n    dist (a * c) (b * c) = dist a b :=\n  dist_smul (MulOpposite.op c) a b\n\n"}
{"name":"nndist_mul_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : PseudoMetricSpace M\ninst✝¹ : Mul M\ninst✝ : IsometricSMul (MulOpposite M) M\na b c : M\n⊢ Eq (NNDist.nndist (HMul.hMul a c) (HMul.hMul b c)) (NNDist.nndist a b)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_mul_right [PseudoMetricSpace M] [Mul M] [IsometricSMul Mᵐᵒᵖ M] (a b c : M) :\n    nndist (a * c) (b * c) = nndist a b :=\n  nndist_smul (MulOpposite.op c) a b\n\n"}
{"name":"nndist_add_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : PseudoMetricSpace M\ninst✝¹ : Add M\ninst✝ : IsometricVAdd (AddOpposite M) M\na b c : M\n⊢ Eq (NNDist.nndist (HAdd.hAdd a c) (HAdd.hAdd b c)) (NNDist.nndist a b)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_mul_right [PseudoMetricSpace M] [Mul M] [IsometricSMul Mᵐᵒᵖ M] (a b c : M) :\n    nndist (a * c) (b * c) = nndist a b :=\n  nndist_smul (MulOpposite.op c) a b\n\n"}
{"name":"dist_sub_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : SubNegMonoid M\ninst✝¹ : PseudoMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\na b c : M\n⊢ Eq (Dist.dist (HSub.hSub a c) (HSub.hSub b c)) (Dist.dist a b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_right [DivInvMonoid M] [PseudoMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    (a b c : M) : dist (a / c) (b / c) = dist a b := by simp only [div_eq_mul_inv, dist_mul_right]\n\n"}
{"name":"dist_div_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : DivInvMonoid M\ninst✝¹ : PseudoMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\na b c : M\n⊢ Eq (Dist.dist (HDiv.hDiv a c) (HDiv.hDiv b c)) (Dist.dist a b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_right [DivInvMonoid M] [PseudoMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    (a b c : M) : dist (a / c) (b / c) = dist a b := by simp only [div_eq_mul_inv, dist_mul_right]\n\n"}
{"name":"nndist_div_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : DivInvMonoid M\ninst✝¹ : PseudoMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\na b c : M\n⊢ Eq (NNDist.nndist (HDiv.hDiv a c) (HDiv.hDiv b c)) (NNDist.nndist a b)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_div_right [DivInvMonoid M] [PseudoMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    (a b c : M) : nndist (a / c) (b / c) = nndist a b := by\n  simp only [div_eq_mul_inv, nndist_mul_right]\n\n"}
{"name":"nndist_sub_right","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : SubNegMonoid M\ninst✝¹ : PseudoMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\na b c : M\n⊢ Eq (NNDist.nndist (HSub.hSub a c) (HSub.hSub b c)) (NNDist.nndist a b)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_div_right [DivInvMonoid M] [PseudoMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    (a b c : M) : nndist (a / c) (b / c) = nndist a b := by\n  simp only [div_eq_mul_inv, nndist_mul_right]\n\n"}
{"name":"dist_inv_inv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\n⊢ Eq (Dist.dist (Inv.inv a) (Inv.inv b)) (Dist.dist a b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_inv_inv [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b : G) : dist a⁻¹ b⁻¹ = dist a b :=\n  (IsometryEquiv.inv G).dist_eq a b\n\n"}
{"name":"dist_neg_neg","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\n⊢ Eq (Dist.dist (Neg.neg a) (Neg.neg b)) (Dist.dist a b)","decl":"@[to_additive (attr := simp)]\ntheorem dist_inv_inv [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b : G) : dist a⁻¹ b⁻¹ = dist a b :=\n  (IsometryEquiv.inv G).dist_eq a b\n\n"}
{"name":"nndist_neg_neg","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\n⊢ Eq (NNDist.nndist (Neg.neg a) (Neg.neg b)) (NNDist.nndist a b)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_inv_inv [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b : G) : nndist a⁻¹ b⁻¹ = nndist a b :=\n  (IsometryEquiv.inv G).nndist_eq a b\n\n"}
{"name":"nndist_inv_inv","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\n⊢ Eq (NNDist.nndist (Inv.inv a) (Inv.inv b)) (NNDist.nndist a b)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_inv_inv [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b : G) : nndist a⁻¹ b⁻¹ = nndist a b :=\n  (IsometryEquiv.inv G).nndist_eq a b\n\n"}
{"name":"dist_div_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na b c : G\n⊢ Eq (Dist.dist (HDiv.hDiv a b) (HDiv.hDiv a c)) (Dist.dist b c)","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_left [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b c : G) : dist (a / b) (a / c) = dist b c := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"dist_sub_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b c : G\n⊢ Eq (Dist.dist (HSub.hSub a b) (HSub.hSub a c)) (Dist.dist b c)","decl":"@[to_additive (attr := simp)]\ntheorem dist_div_left [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b c : G) : dist (a / b) (a / c) = dist b c := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"nndist_div_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : Group G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricSMul G G\ninst✝ : IsometricSMul (MulOpposite G) G\na b c : G\n⊢ Eq (NNDist.nndist (HDiv.hDiv a b) (HDiv.hDiv a c)) (NNDist.nndist b c)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_div_left [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b c : G) : nndist (a / b) (a / c) = nndist b c := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"nndist_sub_left","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝³ : AddGroup G\ninst✝² : PseudoMetricSpace G\ninst✝¹ : IsometricVAdd G G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b c : G\n⊢ Eq (NNDist.nndist (HSub.hSub a b) (HSub.hSub a c)) (NNDist.nndist b c)","decl":"@[to_additive (attr := simp)]\ntheorem nndist_div_left [Group G] [PseudoMetricSpace G] [IsometricSMul G G]\n    [IsometricSMul Gᵐᵒᵖ G] (a b c : G) : nndist (a / b) (a / c) = nndist b c := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"Bornology.IsBounded.vadd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : VAdd G X\ninst✝ : IsometricVAdd G X\ns : Set X\nhs : Bornology.IsBounded s\nc : G\n⊢ Bornology.IsBounded (HVAdd.hVAdd c s)","decl":"/-- If `G` acts isometrically on `X`, then the image of a bounded set in `X` under scalar\nmultiplication by `c : G` is bounded. See also `Bornology.IsBounded.smul₀` for a similar lemma about\nnormed spaces. -/\n@[to_additive \"Given an additive isometric action of `G` on `X`, the image of a bounded set in `X`\nunder translation by `c : G` is bounded\"]\ntheorem Bornology.IsBounded.smul [PseudoMetricSpace X] [SMul G X] [IsometricSMul G X] {s : Set X}\n    (hs : IsBounded s) (c : G) : IsBounded (c • s) :=\n  (isometry_smul X c).lipschitz.isBounded_image hs\n\n"}
{"name":"Bornology.IsBounded.smul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝² : PseudoMetricSpace X\ninst✝¹ : SMul G X\ninst✝ : IsometricSMul G X\ns : Set X\nhs : Bornology.IsBounded s\nc : G\n⊢ Bornology.IsBounded (HSMul.hSMul c s)","decl":"/-- If `G` acts isometrically on `X`, then the image of a bounded set in `X` under scalar\nmultiplication by `c : G` is bounded. See also `Bornology.IsBounded.smul₀` for a similar lemma about\nnormed spaces. -/\n@[to_additive \"Given an additive isometric action of `G` on `X`, the image of a bounded set in `X`\nunder translation by `c : G` is bounded\"]\ntheorem Bornology.IsBounded.smul [PseudoMetricSpace X] [SMul G X] [IsometricSMul G X] {s : Set X}\n    (hs : IsBounded s) (c : G) : IsBounded (c • s) :=\n  (isometry_smul X c).lipschitz.isBounded_image hs\n\n"}
{"name":"Metric.vadd_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : Real\n⊢ Eq (HVAdd.hVAdd c (Metric.ball x r)) (Metric.ball (HVAdd.hVAdd c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_ball (c : G) (x : X) (r : ℝ) : c • ball x r = ball (c • x) r :=\n  (IsometryEquiv.constSMul c).image_ball _ _\n\n"}
{"name":"Metric.smul_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : Real\n⊢ Eq (HSMul.hSMul c (Metric.ball x r)) (Metric.ball (HSMul.hSMul c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_ball (c : G) (x : X) (r : ℝ) : c • ball x r = ball (c • x) r :=\n  (IsometryEquiv.constSMul c).image_ball _ _\n\n"}
{"name":"Metric.preimage_vadd_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : Real\n⊢ Eq (Set.preimage (fun x => HVAdd.hVAdd c x) (Metric.ball x r)) (Metric.ball (HVAdd.hVAdd (Neg.neg c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_ball (c : G) (x : X) (r : ℝ) : (c • ·) ⁻¹' ball x r = ball (c⁻¹ • x) r := by\n  rw [preimage_smul, smul_ball]\n\n"}
{"name":"Metric.preimage_smul_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : Real\n⊢ Eq (Set.preimage (fun x => HSMul.hSMul c x) (Metric.ball x r)) (Metric.ball (HSMul.hSMul (Inv.inv c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_ball (c : G) (x : X) (r : ℝ) : (c • ·) ⁻¹' ball x r = ball (c⁻¹ • x) r := by\n  rw [preimage_smul, smul_ball]\n\n"}
{"name":"Metric.vadd_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : Real\n⊢ Eq (HVAdd.hVAdd c (Metric.closedBall x r)) (Metric.closedBall (HVAdd.hVAdd c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_closedBall (c : G) (x : X) (r : ℝ) : c • closedBall x r = closedBall (c • x) r :=\n  (IsometryEquiv.constSMul c).image_closedBall _ _\n\n"}
{"name":"Metric.smul_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : Real\n⊢ Eq (HSMul.hSMul c (Metric.closedBall x r)) (Metric.closedBall (HSMul.hSMul c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_closedBall (c : G) (x : X) (r : ℝ) : c • closedBall x r = closedBall (c • x) r :=\n  (IsometryEquiv.constSMul c).image_closedBall _ _\n\n"}
{"name":"Metric.preimage_vadd_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : Real\n⊢ Eq (Set.preimage (fun x => HVAdd.hVAdd c x) (Metric.closedBall x r)) (Metric.closedBall (HVAdd.hVAdd (Neg.neg c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_closedBall (c : G) (x : X) (r : ℝ) :\n    (c • ·) ⁻¹' closedBall x r = closedBall (c⁻¹ • x) r := by rw [preimage_smul, smul_closedBall]\n\n"}
{"name":"Metric.preimage_smul_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : Real\n⊢ Eq (Set.preimage (fun x => HSMul.hSMul c x) (Metric.closedBall x r)) (Metric.closedBall (HSMul.hSMul (Inv.inv c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_closedBall (c : G) (x : X) (r : ℝ) :\n    (c • ·) ⁻¹' closedBall x r = closedBall (c⁻¹ • x) r := by rw [preimage_smul, smul_closedBall]\n\n"}
{"name":"Metric.vadd_sphere","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : Real\n⊢ Eq (HVAdd.hVAdd c (Metric.sphere x r)) (Metric.sphere (HVAdd.hVAdd c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_sphere (c : G) (x : X) (r : ℝ) : c • sphere x r = sphere (c • x) r :=\n  (IsometryEquiv.constSMul c).image_sphere _ _\n\n"}
{"name":"Metric.smul_sphere","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : Real\n⊢ Eq (HSMul.hSMul c (Metric.sphere x r)) (Metric.sphere (HSMul.hSMul c x) r)","decl":"@[to_additive (attr := simp)]\ntheorem smul_sphere (c : G) (x : X) (r : ℝ) : c • sphere x r = sphere (c • x) r :=\n  (IsometryEquiv.constSMul c).image_sphere _ _\n\n"}
{"name":"Metric.preimage_smul_sphere","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : Group G\ninst✝¹ : MulAction G X\ninst✝ : IsometricSMul G X\nc : G\nx : X\nr : Real\n⊢ Eq (Set.preimage (fun x => HSMul.hSMul c x) (Metric.sphere x r)) (Metric.sphere (HSMul.hSMul (Inv.inv c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_sphere (c : G) (x : X) (r : ℝ) :\n    (c • ·) ⁻¹' sphere x r = sphere (c⁻¹ • x) r := by rw [preimage_smul, smul_sphere]\n\n"}
{"name":"Metric.preimage_vadd_sphere","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\nX : Type w\ninst✝³ : PseudoMetricSpace X\ninst✝² : AddGroup G\ninst✝¹ : AddAction G X\ninst✝ : IsometricVAdd G X\nc : G\nx : X\nr : Real\n⊢ Eq (Set.preimage (fun x => HVAdd.hVAdd c x) (Metric.sphere x r)) (Metric.sphere (HVAdd.hVAdd (Neg.neg c) x) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_smul_sphere (c : G) (x : X) (r : ℝ) :\n    (c • ·) ⁻¹' sphere x r = sphere (c⁻¹ • x) r := by rw [preimage_smul, smul_sphere]\n\n"}
{"name":"Metric.preimage_mul_left_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricSMul G G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HMul.hMul a x) (Metric.ball b r)) (Metric.ball (HMul.hMul (Inv.inv a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_ball [IsometricSMul G G] (a b : G) (r : ℝ) :\n    (a * ·) ⁻¹' ball b r = ball (a⁻¹ * b) r :=\n  preimage_smul_ball a b r\n\n"}
{"name":"Metric.preimage_add_left_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricVAdd G G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Metric.ball b r)) (Metric.ball (HAdd.hAdd (Neg.neg a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_ball [IsometricSMul G G] (a b : G) (r : ℝ) :\n    (a * ·) ⁻¹' ball b r = ball (a⁻¹ * b) r :=\n  preimage_smul_ball a b r\n\n"}
{"name":"Metric.preimage_mul_right_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HMul.hMul x a) (Metric.ball b r)) (Metric.ball (HDiv.hDiv b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_ball [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ) :\n    (fun x => x * a) ⁻¹' ball b r = ball (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_ball (MulOpposite.op a) b r\n\n"}
{"name":"Metric.preimage_add_right_ball","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Metric.ball b r)) (Metric.ball (HSub.hSub b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_ball [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ) :\n    (fun x => x * a) ⁻¹' ball b r = ball (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_ball (MulOpposite.op a) b r\n\n"}
{"name":"Metric.preimage_mul_left_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricSMul G G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HMul.hMul a x) (Metric.closedBall b r)) (Metric.closedBall (HMul.hMul (Inv.inv a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_closedBall [IsometricSMul G G] (a b : G) (r : ℝ) :\n    (a * ·) ⁻¹' closedBall b r = closedBall (a⁻¹ * b) r :=\n  preimage_smul_closedBall a b r\n\n"}
{"name":"Metric.preimage_add_left_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricVAdd G G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd a x) (Metric.closedBall b r)) (Metric.closedBall (HAdd.hAdd (Neg.neg a) b) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_left_closedBall [IsometricSMul G G] (a b : G) (r : ℝ) :\n    (a * ·) ⁻¹' closedBall b r = closedBall (a⁻¹ * b) r :=\n  preimage_smul_closedBall a b r\n\n"}
{"name":"Metric.preimage_mul_right_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : Group G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricSMul (MulOpposite G) G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HMul.hMul x a) (Metric.closedBall b r)) (Metric.closedBall (HDiv.hDiv b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_closedBall [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ) :\n    (fun x => x * a) ⁻¹' closedBall b r = closedBall (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_closedBall (MulOpposite.op a) b r\n\n"}
{"name":"Metric.preimage_add_right_closedBall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"G : Type v\ninst✝² : AddGroup G\ninst✝¹ : PseudoMetricSpace G\ninst✝ : IsometricVAdd (AddOpposite G) G\na b : G\nr : Real\n⊢ Eq (Set.preimage (fun x => HAdd.hAdd x a) (Metric.closedBall b r)) (Metric.closedBall (HSub.hSub b a) r)","decl":"@[to_additive (attr := simp)]\ntheorem preimage_mul_right_closedBall [IsometricSMul Gᵐᵒᵖ G] (a b : G) (r : ℝ) :\n    (fun x => x * a) ⁻¹' closedBall b r = closedBall (b / a) r := by\n  rw [div_eq_mul_inv]\n  exact preimage_smul_closedBall (MulOpposite.op a) b r\n\n"}
{"name":"instIsometricVAddSum","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\nY : Type u_1\ninst✝⁵ : PseudoEMetricSpace X\ninst✝⁴ : PseudoEMetricSpace Y\ninst✝³ : VAdd M X\ninst✝² : IsometricVAdd M X\ninst✝¹ : VAdd M Y\ninst✝ : IsometricVAdd M Y\n⊢ IsometricVAdd M (Prod X Y)","decl":"@[to_additive]\ninstance [SMul M Y] [IsometricSMul M Y] : IsometricSMul M (X × Y) :=\n  ⟨fun c => (isometry_smul X c).prod_map (isometry_smul Y c)⟩\n\n"}
{"name":"instIsometricSMulProd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\nY : Type u_1\ninst✝⁵ : PseudoEMetricSpace X\ninst✝⁴ : PseudoEMetricSpace Y\ninst✝³ : SMul M X\ninst✝² : IsometricSMul M X\ninst✝¹ : SMul M Y\ninst✝ : IsometricSMul M Y\n⊢ IsometricSMul M (Prod X Y)","decl":"@[to_additive]\ninstance [SMul M Y] [IsometricSMul M Y] : IsometricSMul M (X × Y) :=\n  ⟨fun c => (isometry_smul X c).prod_map (isometry_smul Y c)⟩\n\n"}
{"name":"Prod.isometricSMul'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nN : Type u_2\ninst✝⁵ : Mul M\ninst✝⁴ : PseudoEMetricSpace M\ninst✝³ : IsometricSMul M M\ninst✝² : Mul N\ninst✝¹ : PseudoEMetricSpace N\ninst✝ : IsometricSMul N N\n⊢ IsometricSMul (Prod M N) (Prod M N)","decl":"@[to_additive]\ninstance Prod.isometricSMul' {N} [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] [Mul N]\n    [PseudoEMetricSpace N] [IsometricSMul N N] : IsometricSMul (M × N) (M × N) :=\n  ⟨fun c => (isometry_smul M c.1).prod_map (isometry_smul N c.2)⟩\n\n"}
{"name":"Prod.isometricVAdd'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nN : Type u_2\ninst✝⁵ : Add M\ninst✝⁴ : PseudoEMetricSpace M\ninst✝³ : IsometricVAdd M M\ninst✝² : Add N\ninst✝¹ : PseudoEMetricSpace N\ninst✝ : IsometricVAdd N N\n⊢ IsometricVAdd (Prod M N) (Prod M N)","decl":"@[to_additive]\ninstance Prod.isometricSMul' {N} [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] [Mul N]\n    [PseudoEMetricSpace N] [IsometricSMul N N] : IsometricSMul (M × N) (M × N) :=\n  ⟨fun c => (isometry_smul M c.1).prod_map (isometry_smul N c.2)⟩\n\n"}
{"name":"Prod.isometricSMul''","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nN : Type u_2\ninst✝⁵ : Mul M\ninst✝⁴ : PseudoEMetricSpace M\ninst✝³ : IsometricSMul (MulOpposite M) M\ninst✝² : Mul N\ninst✝¹ : PseudoEMetricSpace N\ninst✝ : IsometricSMul (MulOpposite N) N\n⊢ IsometricSMul (MulOpposite (Prod M N)) (Prod M N)","decl":"@[to_additive]\ninstance Prod.isometricSMul'' {N} [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    [Mul N] [PseudoEMetricSpace N] [IsometricSMul Nᵐᵒᵖ N] :\n    IsometricSMul (M × N)ᵐᵒᵖ (M × N) :=\n  ⟨fun c => (isometry_mul_right c.unop.1).prod_map (isometry_mul_right c.unop.2)⟩\n\n"}
{"name":"Prod.isometricVAdd''","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nN : Type u_2\ninst✝⁵ : Add M\ninst✝⁴ : PseudoEMetricSpace M\ninst✝³ : IsometricVAdd (AddOpposite M) M\ninst✝² : Add N\ninst✝¹ : PseudoEMetricSpace N\ninst✝ : IsometricVAdd (AddOpposite N) N\n⊢ IsometricVAdd (AddOpposite (Prod M N)) (Prod M N)","decl":"@[to_additive]\ninstance Prod.isometricSMul'' {N} [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M]\n    [Mul N] [PseudoEMetricSpace N] [IsometricSMul Nᵐᵒᵖ N] :\n    IsometricSMul (M × N)ᵐᵒᵖ (M × N) :=\n  ⟨fun c => (isometry_mul_right c.unop.1).prod_map (isometry_mul_right c.unop.2)⟩\n\n"}
{"name":"AddUnits.isometricVAdd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : VAdd M X\ninst✝¹ : IsometricVAdd M X\ninst✝ : AddMonoid M\n⊢ IsometricVAdd (AddUnits M) X","decl":"@[to_additive]\ninstance Units.isometricSMul [Monoid M] : IsometricSMul Mˣ X :=\n  ⟨fun c => isometry_smul X (c : M)⟩\n\n"}
{"name":"Units.isometricSMul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝³ : PseudoEMetricSpace X\ninst✝² : SMul M X\ninst✝¹ : IsometricSMul M X\ninst✝ : Monoid M\n⊢ IsometricSMul (Units M) X","decl":"@[to_additive]\ninstance Units.isometricSMul [Monoid M] : IsometricSMul Mˣ X :=\n  ⟨fun c => isometry_smul X (c : M)⟩\n\n"}
{"name":"instIsometricVAddAddOpposite","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : VAdd M X\n⊢ IsometricVAdd M (AddOpposite X)","decl":"@[to_additive]\ninstance : IsometricSMul M Xᵐᵒᵖ :=\n  ⟨fun c x y => by simpa only using edist_smul_left c x.unop y.unop⟩\n\n"}
{"name":"instIsometricSMulMulOpposite","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : SMul M X\n⊢ IsometricSMul M (MulOpposite X)","decl":"@[to_additive]\ninstance : IsometricSMul M Xᵐᵒᵖ :=\n  ⟨fun c x y => by simpa only using edist_smul_left c x.unop y.unop⟩\n\n"}
{"name":"ULift.isometricSMul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : SMul M X\n⊢ IsometricSMul (ULift.{u_2, u} M) X","decl":"@[to_additive]\ninstance ULift.isometricSMul : IsometricSMul (ULift M) X :=\n  ⟨fun c => by simpa only using isometry_smul X c.down⟩\n\n"}
{"name":"ULift.isometricVAdd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : VAdd M X\n⊢ IsometricVAdd (ULift.{u_2, u} M) X","decl":"@[to_additive]\ninstance ULift.isometricSMul : IsometricSMul (ULift M) X :=\n  ⟨fun c => by simpa only using isometry_smul X c.down⟩\n\n"}
{"name":"ULift.isometricVAdd'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : VAdd M X\n⊢ IsometricVAdd M (ULift.{u_2, w} X)","decl":"@[to_additive]\ninstance ULift.isometricSMul' : IsometricSMul M (ULift X) :=\n  ⟨fun c x y => by simpa only using edist_smul_left c x.1 y.1⟩\n\n"}
{"name":"ULift.isometricSMul'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : SMul M X\n⊢ IsometricSMul M (ULift.{u_2, w} X)","decl":"@[to_additive]\ninstance ULift.isometricSMul' : IsometricSMul M (ULift X) :=\n  ⟨fun c x y => by simpa only using edist_smul_left c x.1 y.1⟩\n\n"}
{"name":"instIsometricSMulForall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nι : Type u_3\nX : ι → Type u_2\ninst✝³ : Fintype ι\ninst✝² : (i : ι) → SMul M (X i)\ninst✝¹ : (i : ι) → PseudoEMetricSpace (X i)\ninst✝ : ∀ (i : ι), IsometricSMul M (X i)\n⊢ IsometricSMul M ((i : ι) → X i)","decl":"@[to_additive]\ninstance {ι} {X : ι → Type*} [Fintype ι] [∀ i, SMul M (X i)] [∀ i, PseudoEMetricSpace (X i)]\n    [∀ i, IsometricSMul M (X i)] : IsometricSMul M (∀ i, X i) :=\n  ⟨fun c => .piMap (fun _ => (c • ·)) fun i => isometry_smul (X i) c⟩\n\n"}
{"name":"instIsometricVAddForall","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nι : Type u_3\nX : ι → Type u_2\ninst✝³ : Fintype ι\ninst✝² : (i : ι) → VAdd M (X i)\ninst✝¹ : (i : ι) → PseudoEMetricSpace (X i)\ninst✝ : ∀ (i : ι), IsometricVAdd M (X i)\n⊢ IsometricVAdd M ((i : ι) → X i)","decl":"@[to_additive]\ninstance {ι} {X : ι → Type*} [Fintype ι] [∀ i, SMul M (X i)] [∀ i, PseudoEMetricSpace (X i)]\n    [∀ i, IsometricSMul M (X i)] : IsometricSMul M (∀ i, X i) :=\n  ⟨fun c => .piMap (fun _ => (c • ·)) fun i => isometry_smul (X i) c⟩\n\n"}
{"name":"Pi.isometricSMul'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"ι : Type u_4\nM : ι → Type u_2\nX : ι → Type u_3\ninst✝³ : Fintype ι\ninst✝² : (i : ι) → SMul (M i) (X i)\ninst✝¹ : (i : ι) → PseudoEMetricSpace (X i)\ninst✝ : ∀ (i : ι), IsometricSMul (M i) (X i)\n⊢ IsometricSMul ((i : ι) → M i) ((i : ι) → X i)","decl":"@[to_additive]\ninstance Pi.isometricSMul' {ι} {M X : ι → Type*} [Fintype ι] [∀ i, SMul (M i) (X i)]\n    [∀ i, PseudoEMetricSpace (X i)] [∀ i, IsometricSMul (M i) (X i)] :\n    IsometricSMul (∀ i, M i) (∀ i, X i) :=\n  ⟨fun c => .piMap (fun i => (c i • ·)) fun _ => isometry_smul _ _⟩\n\n"}
{"name":"Pi.isometricVAdd'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"ι : Type u_4\nM : ι → Type u_2\nX : ι → Type u_3\ninst✝³ : Fintype ι\ninst✝² : (i : ι) → VAdd (M i) (X i)\ninst✝¹ : (i : ι) → PseudoEMetricSpace (X i)\ninst✝ : ∀ (i : ι), IsometricVAdd (M i) (X i)\n⊢ IsometricVAdd ((i : ι) → M i) ((i : ι) → X i)","decl":"@[to_additive]\ninstance Pi.isometricSMul' {ι} {M X : ι → Type*} [Fintype ι] [∀ i, SMul (M i) (X i)]\n    [∀ i, PseudoEMetricSpace (X i)] [∀ i, IsometricSMul (M i) (X i)] :\n    IsometricSMul (∀ i, M i) (∀ i, X i) :=\n  ⟨fun c => .piMap (fun i => (c i • ·)) fun _ => isometry_smul _ _⟩\n\n"}
{"name":"Pi.isometricVAdd''","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"ι : Type u_3\nM : ι → Type u_2\ninst✝³ : Fintype ι\ninst✝² : (i : ι) → Add (M i)\ninst✝¹ : (i : ι) → PseudoEMetricSpace (M i)\ninst✝ : ∀ (i : ι), IsometricVAdd (AddOpposite (M i)) (M i)\n⊢ IsometricVAdd (AddOpposite ((i : ι) → M i)) ((i : ι) → M i)","decl":"@[to_additive]\ninstance Pi.isometricSMul'' {ι} {M : ι → Type*} [Fintype ι] [∀ i, Mul (M i)]\n    [∀ i, PseudoEMetricSpace (M i)] [∀ i, IsometricSMul (M i)ᵐᵒᵖ (M i)] :\n    IsometricSMul (∀ i, M i)ᵐᵒᵖ (∀ i, M i) :=\n  ⟨fun c => .piMap (fun i (x : M i) => x * c.unop i) fun _ => isometry_mul_right _⟩\n\n"}
{"name":"Pi.isometricSMul''","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"ι : Type u_3\nM : ι → Type u_2\ninst✝³ : Fintype ι\ninst✝² : (i : ι) → Mul (M i)\ninst✝¹ : (i : ι) → PseudoEMetricSpace (M i)\ninst✝ : ∀ (i : ι), IsometricSMul (MulOpposite (M i)) (M i)\n⊢ IsometricSMul (MulOpposite ((i : ι) → M i)) ((i : ι) → M i)","decl":"@[to_additive]\ninstance Pi.isometricSMul'' {ι} {M : ι → Type*} [Fintype ι] [∀ i, Mul (M i)]\n    [∀ i, PseudoEMetricSpace (M i)] [∀ i, IsometricSMul (M i)ᵐᵒᵖ (M i)] :\n    IsometricSMul (∀ i, M i)ᵐᵒᵖ (∀ i, M i) :=\n  ⟨fun c => .piMap (fun i (x : M i) => x * c.unop i) fun _ => isometry_mul_right _⟩\n\n"}
{"name":"Additive.isometricVAdd","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\nX : Type w\ninst✝² : PseudoEMetricSpace X\ninst✝¹ : SMul M X\ninst✝ : IsometricSMul M X\n⊢ IsometricVAdd (Additive M) X","decl":"instance Additive.isometricVAdd : IsometricVAdd (Additive M) X :=\n  ⟨fun c => isometry_smul X c.toMul⟩\n\n"}
{"name":"Additive.isometricVAdd'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul M M\n⊢ IsometricVAdd (Additive M) (Additive M)","decl":"instance Additive.isometricVAdd' [Mul M] [PseudoEMetricSpace M] [IsometricSMul M M] :\n    IsometricVAdd (Additive M) (Additive M) :=\n  ⟨fun c x y => edist_smul_left c.toMul x.toMul y.toMul⟩\n\n"}
{"name":"Additive.isometricVAdd''","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Mul M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricSMul (MulOpposite M) M\n⊢ IsometricVAdd (AddOpposite (Additive M)) (Additive M)","decl":"instance Additive.isometricVAdd'' [Mul M] [PseudoEMetricSpace M] [IsometricSMul Mᵐᵒᵖ M] :\n    IsometricVAdd (Additive M)ᵃᵒᵖ (Additive M) :=\n  ⟨fun c x y => edist_smul_left (MulOpposite.op c.unop.toMul) x.toMul y.toMul⟩\n\n"}
{"name":"Multiplicative.isometricSMul","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u_2\nX : Type u_3\ninst✝² : VAdd M X\ninst✝¹ : PseudoEMetricSpace X\ninst✝ : IsometricVAdd M X\n⊢ IsometricSMul (Multiplicative M) X","decl":"instance Multiplicative.isometricSMul {M X} [VAdd M X] [PseudoEMetricSpace X]\n    [IsometricVAdd M X] : IsometricSMul (Multiplicative M) X :=\n  ⟨fun c => isometry_vadd X c.toAdd⟩\n\n"}
{"name":"Multiplicative.isometricSMul'","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd M M\n⊢ IsometricSMul (Multiplicative M) (Multiplicative M)","decl":"instance Multiplicative.isometricSMul' [Add M] [PseudoEMetricSpace M] [IsometricVAdd M M] :\n    IsometricSMul (Multiplicative M) (Multiplicative M) :=\n  ⟨fun c x y => edist_vadd_left c.toAdd x.toAdd y.toAdd⟩\n\n"}
{"name":"Multiplicative.isometricVAdd''","module":"Mathlib.Topology.MetricSpace.IsometricSMul","initialProofState":"M : Type u\ninst✝² : Add M\ninst✝¹ : PseudoEMetricSpace M\ninst✝ : IsometricVAdd (AddOpposite M) M\n⊢ IsometricSMul (MulOpposite (Multiplicative M)) (Multiplicative M)","decl":"instance Multiplicative.isometricVAdd'' [Add M] [PseudoEMetricSpace M]\n    [IsometricVAdd Mᵃᵒᵖ M] : IsometricSMul (Multiplicative M)ᵐᵒᵖ (Multiplicative M) :=\n  ⟨fun c x y => edist_vadd_left (AddOpposite.op c.unop.toAdd) x.toAdd y.toAdd⟩\n\n"}
