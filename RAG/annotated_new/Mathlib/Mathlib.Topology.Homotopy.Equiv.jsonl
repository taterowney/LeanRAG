{"name":"ContinuousMap.HomotopyEquiv.ext","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nx y : ContinuousMap.HomotopyEquiv X Y\ntoFun : Eq x.toFun y.toFun\ninvFun : Eq x.invFun y.invFun\n⊢ Eq x y","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.mk.injEq","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ntoFun✝ : ContinuousMap X Y\ninvFun✝ : ContinuousMap Y X\nleft_inv✝ : (invFun✝.comp toFun✝).Homotopic (ContinuousMap.id X)\nright_inv✝ : (toFun✝.comp invFun✝).Homotopic (ContinuousMap.id Y)\ntoFun : ContinuousMap X Y\ninvFun : ContinuousMap Y X\nleft_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\nright_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n⊢ Eq (Eq { toFun := toFun✝, invFun := invFun✝, left_inv := left_inv✝, right_inv := right_inv✝ } { toFun := toFun, invFun := invFun, left_inv := left_inv, right_inv := right_inv }) (And (Eq toFun✝ toFun) (Eq invFun✝ invFun))","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.mk.sizeOf_spec","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝³ : TopologicalSpace X\ninst✝² : TopologicalSpace Y\ninst✝¹ : SizeOf X\ninst✝ : SizeOf Y\ntoFun : ContinuousMap X Y\ninvFun : ContinuousMap Y X\nleft_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\nright_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, invFun := invFun, left_inv := left_inv, right_inv := right_inv }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toFun)) (SizeOf.sizeOf invFun)) (SizeOf.sizeOf left_inv)) (SizeOf.sizeOf right_inv))","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.right_inv","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : ContinuousMap.HomotopyEquiv X Y\n⊢ (self.toFun.comp self.invFun).Homotopic (ContinuousMap.id Y)","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.mk.inj","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\ntoFun✝ : ContinuousMap X Y\ninvFun✝ : ContinuousMap Y X\nleft_inv✝ : (invFun✝.comp toFun✝).Homotopic (ContinuousMap.id X)\nright_inv✝ : (toFun✝.comp invFun✝).Homotopic (ContinuousMap.id Y)\ntoFun : ContinuousMap X Y\ninvFun : ContinuousMap Y X\nleft_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\nright_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\nx✝ : Eq { toFun := toFun✝, invFun := invFun✝, left_inv := left_inv✝, right_inv := right_inv✝ } { toFun := toFun, invFun := invFun, left_inv := left_inv, right_inv := right_inv }\n⊢ And (Eq toFun✝ toFun) (Eq invFun✝ invFun)","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.left_inv","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nself : ContinuousMap.HomotopyEquiv X Y\n⊢ (self.invFun.comp self.toFun).Homotopic (ContinuousMap.id X)","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.ext_iff","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nx y : ContinuousMap.HomotopyEquiv X Y\n⊢ Iff (Eq x y) (And (Eq x.toFun y.toFun) (Eq x.invFun y.invFun))","decl":"/-- A homotopy equivalence between topological spaces `X` and `Y` are a pair of functions\n`toFun : C(X, Y)` and `invFun : C(Y, X)` such that `toFun.comp invFun` and `invFun.comp toFun`\nare both homotopic to corresponding identity maps.\n-/\n@[ext]\nstructure HomotopyEquiv (X : Type u) (Y : Type v) [TopologicalSpace X] [TopologicalSpace Y] where\n  toFun : C(X, Y)\n  invFun : C(Y, X)\n  left_inv : (invFun.comp toFun).Homotopic (ContinuousMap.id X)\n  right_inv : (toFun.comp invFun).Homotopic (ContinuousMap.id Y)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.toFun_eq_coe","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : ContinuousMap.HomotopyEquiv X Y\n⊢ Eq ⇑h.toFun ↑h","decl":"@[simp]\ntheorem toFun_eq_coe (h : HomotopyEquiv X Y) : (h.toFun : X → Y) = h :=\n  rfl\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.continuous","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : ContinuousMap.HomotopyEquiv X Y\n⊢ Continuous ↑h","decl":"@[continuity]\ntheorem continuous (h : HomotopyEquiv X Y) : Continuous h :=\n  h.toFun.continuous\n\n"}
{"name":"Homeomorph.coe_toHomotopyEquiv","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq ↑h.toHomotopyEquiv ⇑h","decl":"@[simp]\ntheorem coe_toHomotopyEquiv (h : X ≃ₜ Y) : (h.toHomotopyEquiv : X → Y) = h :=\n  rfl\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.coe_invFun","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : ContinuousMap.HomotopyEquiv X Y\n⊢ Eq ⇑h.invFun ↑h.symm","decl":"@[simp]\ntheorem coe_invFun (h : HomotopyEquiv X Y) : (⇑h.invFun : Y → X) = ⇑h.symm :=\n  rfl\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.refl_apply","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\na : X\n⊢ Eq (↑(ContinuousMap.HomotopyEquiv.refl X) a) a","decl":"/-- Any topological space is homotopy equivalent to itself.\n-/\n@[simps!]\ndef refl (X : Type u) [TopologicalSpace X] : X ≃ₕ X :=\n  (Homeomorph.refl X).toHomotopyEquiv\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.refl_symm_apply","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\na : X\n⊢ Eq (↑(ContinuousMap.HomotopyEquiv.refl X).symm a) a","decl":"/-- Any topological space is homotopy equivalent to itself.\n-/\n@[simps!]\ndef refl (X : Type u) [TopologicalSpace X] : X ≃ₕ X :=\n  (Homeomorph.refl X).toHomotopyEquiv\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.trans_apply","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\nZ : Type w\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh₁ : ContinuousMap.HomotopyEquiv X Y\nh₂ : ContinuousMap.HomotopyEquiv Y Z\na✝ : X\n⊢ Eq (↑(h₁.trans h₂) a✝) (↑h₂ (↑h₁ a✝))","decl":"/--\nIf `X` is homotopy equivalent to `Y`, and `Y` is homotopy equivalent to `Z`, then `X` is homotopy\nequivalent to `Z`.\n-/\n@[simps!]\ndef trans (h₁ : X ≃ₕ Y) (h₂ : Y ≃ₕ Z) : X ≃ₕ Z where\n  toFun := h₂.toFun.comp h₁.toFun\n  invFun := h₁.invFun.comp h₂.invFun\n  left_inv := by\n    refine Homotopic.trans ?_ h₁.left_inv\n    exact ((Homotopic.refl _).hcomp h₂.left_inv).hcomp (Homotopic.refl _)\n  right_inv := by\n    refine Homotopic.trans ?_ h₂.right_inv\n    exact ((Homotopic.refl _).hcomp h₁.right_inv).hcomp (Homotopic.refl _)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.trans_symm_apply","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\nZ : Type w\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh₁ : ContinuousMap.HomotopyEquiv X Y\nh₂ : ContinuousMap.HomotopyEquiv Y Z\na✝ : Z\n⊢ Eq (↑(h₁.trans h₂).symm a✝) (↑h₁.symm (↑h₂.symm a✝))","decl":"/--\nIf `X` is homotopy equivalent to `Y`, and `Y` is homotopy equivalent to `Z`, then `X` is homotopy\nequivalent to `Z`.\n-/\n@[simps!]\ndef trans (h₁ : X ≃ₕ Y) (h₂ : Y ≃ₕ Z) : X ≃ₕ Z where\n  toFun := h₂.toFun.comp h₁.toFun\n  invFun := h₁.invFun.comp h₂.invFun\n  left_inv := by\n    refine Homotopic.trans ?_ h₁.left_inv\n    exact ((Homotopic.refl _).hcomp h₂.left_inv).hcomp (Homotopic.refl _)\n  right_inv := by\n    refine Homotopic.trans ?_ h₂.right_inv\n    exact ((Homotopic.refl _).hcomp h₁.right_inv).hcomp (Homotopic.refl _)\n\n"}
{"name":"ContinuousMap.HomotopyEquiv.symm_trans","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\nZ : Type w\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh₁ : ContinuousMap.HomotopyEquiv X Y\nh₂ : ContinuousMap.HomotopyEquiv Y Z\n⊢ Eq (h₁.trans h₂).symm (h₂.symm.trans h₁.symm)","decl":"theorem symm_trans (h₁ : X ≃ₕ Y) (h₂ : Y ≃ₕ Z) : (h₁.trans h₂).symm = h₂.symm.trans h₁.symm := rfl\n\n"}
{"name":"Homeomorph.refl_toHomotopyEquiv","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\n⊢ Eq (Homeomorph.refl X).toHomotopyEquiv (ContinuousMap.HomotopyEquiv.refl X)","decl":"@[simp]\ntheorem refl_toHomotopyEquiv (X : Type u) [TopologicalSpace X] :\n    (Homeomorph.refl X).toHomotopyEquiv = HomotopyEquiv.refl X :=\n  rfl\n\n"}
{"name":"Homeomorph.symm_toHomotopyEquiv","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\ninst✝¹ : TopologicalSpace X\ninst✝ : TopologicalSpace Y\nh : Homeomorph X Y\n⊢ Eq h.symm.toHomotopyEquiv h.toHomotopyEquiv.symm","decl":"@[simp]\ntheorem symm_toHomotopyEquiv (h : X ≃ₜ Y) : h.symm.toHomotopyEquiv = h.toHomotopyEquiv.symm :=\n  rfl\n\n"}
{"name":"Homeomorph.trans_toHomotopyEquiv","module":"Mathlib.Topology.Homotopy.Equiv","initialProofState":"X : Type u\nY : Type v\nZ : Type w\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : TopologicalSpace Z\nh₀ : Homeomorph X Y\nh₁ : Homeomorph Y Z\n⊢ Eq (h₀.trans h₁).toHomotopyEquiv (h₀.toHomotopyEquiv.trans h₁.toHomotopyEquiv)","decl":"@[simp]\ntheorem trans_toHomotopyEquiv (h₀ : X ≃ₜ Y) (h₁ : Y ≃ₜ Z) :\n    (h₀.trans h₁).toHomotopyEquiv = h₀.toHomotopyEquiv.trans h₁.toHomotopyEquiv :=\n  rfl\n\n"}
