{"name":"CondensedSet.continuous_coinducingCoprod","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : CondensedSet\nS : CompHaus\nx : X.val.obj { unop := S }\n⊢ Continuous fun a => CondensedSet.coinducingCoprod X ⟨⟨S, x⟩, a⟩","decl":"lemma continuous_coinducingCoprod {S : CompHaus.{u}} (x : X.val.obj ⟨S⟩) :\n    Continuous fun a ↦ (X.coinducingCoprod ⟨⟨S, x⟩, a⟩) := by\n  suffices ∀ (i : (T : CompHaus.{u}) × X.val.obj ⟨T⟩),\n      Continuous (fun (a : i.fst) ↦ X.coinducingCoprod ⟨i, a⟩) from this ⟨_, _⟩\n  rw [← continuous_sigma_iff]\n  apply continuous_coinduced_rng\n\n"}
{"name":"CondensedSet.toTopCatMap_apply","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X Y : CondensedSet\nf : Quiver.Hom X Y\na✝ : X.val.obj { unop := CompHaus.of PUnit.{u + 1} }\n⊢ Eq ((CondensedSet.toTopCatMap f) a✝) (f.val.app { unop := CompHaus.of PUnit.{u + 1} } a✝)","decl":"/-- The map part of the functor `CondensedSet ⥤ TopCat`  -/\n@[simps]\ndef toTopCatMap : X.toTopCat ⟶ Y.toTopCat where\n  toFun := f.val.app ⟨of PUnit⟩\n  continuous_toFun := by\n    rw [continuous_coinduced_dom]\n    apply continuous_sigma\n    intro ⟨S, x⟩\n    simp only [Function.comp_apply, coinducingCoprod]\n    rw [show (fun (a : S) ↦ f.val.app ⟨of PUnit⟩ (X.val.map ((of PUnit.{u+1}).const a).op x)) = _\n      from funext fun a ↦ NatTrans.naturality_apply f.val ((of PUnit.{u+1}).const a).op x]\n    exact continuous_coinducingCoprod Y _\n\n"}
{"name":"condensedSetToTopCat_obj","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : CondensedSet\n⊢ Eq (condensedSetToTopCat.obj X) X.toTopCat","decl":"/-- The functor `CondensedSet ⥤ TopCat`  -/\n@[simps]\ndef condensedSetToTopCat : CondensedSet.{u} ⥤ TopCat.{u+1} where\n  obj X := X.toTopCat\n  map f := toTopCatMap f\n\n"}
{"name":"condensedSetToTopCat_map","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X✝ Y✝ : CondensedSet\nf : Quiver.Hom X✝ Y✝\n⊢ Eq (condensedSetToTopCat.map f) (CondensedSet.toTopCatMap f)","decl":"/-- The functor `CondensedSet ⥤ TopCat`  -/\n@[simps]\ndef condensedSetToTopCat : CondensedSet.{u} ⥤ TopCat.{u+1} where\n  obj X := X.toTopCat\n  map f := toTopCatMap f\n\n"}
{"name":"CondensedSet.topCatAdjunctionCounit_apply","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : TopCat\nx : ↑X.toCondensedSet.toTopCat\n⊢ Eq ((CondensedSet.topCatAdjunctionCounit X) x) (x.toFun PUnit.unit)","decl":"/-- The counit of the adjunction `condensedSetToTopCat ⊣ topCatToCondensedSet` -/\n@[simps]\ndef topCatAdjunctionCounit (X : TopCat.{u+1}) : X.toCondensedSet.toTopCat ⟶ X where\n  toFun x := x.1 PUnit.unit\n  continuous_toFun := by\n    rw [continuous_coinduced_dom]\n    continuity\n\n"}
{"name":"CondensedSet.topCatAdjunctionCounit_bijective","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : TopCat\n⊢ Function.Bijective ⇑(CondensedSet.topCatAdjunctionCounit X)","decl":"lemma topCatAdjunctionCounit_bijective (X : TopCat.{u+1}) :\n    Function.Bijective (topCatAdjunctionCounit X) :=\n  (topCatAdjunctionCounitEquiv X).bijective\n\n"}
{"name":"CondensedSet.topCatAdjunctionUnit_val_app","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : CondensedSet\nS : Opposite CompHaus\nx : X.val.obj S\n⊢ Eq (X.topCatAdjunctionUnit.val.app S x) { toFun := fun s => X.val.map (CompHausLike.const (CompHaus.of PUnit.{u + 1}) s).op x, continuous_toFun := ⋯ }","decl":"/-- The unit of the adjunction `condensedSetToTopCat ⊣ topCatToCondensedSet` -/\n@[simps val_app val_app_apply]\ndef topCatAdjunctionUnit (X : CondensedSet.{u}) : X ⟶ X.toTopCat.toCondensedSet where\n  val := {\n    app := fun S x ↦ {\n      toFun := fun s ↦ X.val.map ((of PUnit.{u+1}).const s).op x\n      continuous_toFun := by\n        suffices ∀ (i : (T : CompHaus.{u}) × X.val.obj ⟨T⟩),\n          Continuous (fun (a : i.fst) ↦ X.coinducingCoprod ⟨i, a⟩) from this ⟨_, _⟩\n        rw [← continuous_sigma_iff]\n        apply continuous_coinduced_rng }\n    naturality := fun _ _ _ ↦ by\n      ext\n      simp only [TopCat.toSheafCompHausLike_val_obj, CompHausLike.compHausLikeToTop_obj,\n        Opposite.op_unop, types_comp_apply, TopCat.toSheafCompHausLike_val_map,\n        ← FunctorToTypes.map_comp_apply]\n      rfl }\n\n"}
{"name":"CondensedSet.topCatAdjunctionUnit_val_app_apply","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : CondensedSet\nS : Opposite CompHaus\nx : X.val.obj S\ns : ↑((CompHausLike.compHausLikeToTop fun x => True).obj (Opposite.unop S))\n⊢ Eq ((X.topCatAdjunctionUnit.val.app S x) s) (X.val.map (CompHausLike.const (CompHaus.of PUnit.{u + 1}) s).op x)","decl":"/-- The unit of the adjunction `condensedSetToTopCat ⊣ topCatToCondensedSet` -/\n@[simps val_app val_app_apply]\ndef topCatAdjunctionUnit (X : CondensedSet.{u}) : X ⟶ X.toTopCat.toCondensedSet where\n  val := {\n    app := fun S x ↦ {\n      toFun := fun s ↦ X.val.map ((of PUnit.{u+1}).const s).op x\n      continuous_toFun := by\n        suffices ∀ (i : (T : CompHaus.{u}) × X.val.obj ⟨T⟩),\n          Continuous (fun (a : i.fst) ↦ X.coinducingCoprod ⟨i, a⟩) from this ⟨_, _⟩\n        rw [← continuous_sigma_iff]\n        apply continuous_coinduced_rng }\n    naturality := fun _ _ _ ↦ by\n      ext\n      simp only [TopCat.toSheafCompHausLike_val_obj, CompHausLike.compHausLikeToTop_obj,\n        Opposite.op_unop, types_comp_apply, TopCat.toSheafCompHausLike_val_map,\n        ← FunctorToTypes.map_comp_apply]\n      rfl }\n\n"}
{"name":"CondensedSet.instEpiTopCatAppCounitTopCatAdjunction","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : TopCat\n⊢ CategoryTheory.Epi (CondensedSet.topCatAdjunction.counit.app X)","decl":"instance (X : TopCat) : Epi (topCatAdjunction.counit.app X) := by\n  rw [TopCat.epi_iff_surjective]\n  exact (topCatAdjunctionCounit_bijective _).2\n\n"}
{"name":"CondensedSet.instFaithfulTopCatTopCatToCondensedSet","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"⊢ topCatToCondensedSet.Faithful","decl":"instance : topCatToCondensedSet.Faithful := topCatAdjunction.faithful_R_of_epi_counit_app\n\n"}
{"name":"CondensedSet.instUCompactlyGeneratedSpaceαTopologicalSpaceToTopCat","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : CondensedSet\n⊢ UCompactlyGeneratedSpace ↑X.toTopCat","decl":"instance (X : CondensedSet.{u}) : UCompactlyGeneratedSpace.{u, u+1} X.toTopCat := by\n  apply uCompactlyGeneratedSpace_of_continuous_maps\n  intro Y _ f h\n  rw [continuous_coinduced_dom, continuous_sigma_iff]\n  exact fun ⟨S, s⟩ ↦ h S ⟨_, continuous_coinducingCoprod X _⟩\n\n"}
{"name":"CondensedSet.instUCompactlyGeneratedSpaceαTopologicalSpaceObjTopCatCondensedSetToTopCat","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"X : CondensedSet\n⊢ UCompactlyGeneratedSpace ↑(condensedSetToTopCat.obj X)","decl":"instance (X : CondensedSet.{u}) : UCompactlyGeneratedSpace.{u, u+1} (condensedSetToTopCat.obj X) :=\n  inferInstanceAs (UCompactlyGeneratedSpace.{u, u+1} X.toTopCat)\n\n"}
{"name":"CondensedSet.instIsIsoFunctorCompactlyGeneratedCounitCompactlyGeneratedAdjunction","module":"Mathlib.Condensed.TopCatAdjunction","initialProofState":"⊢ CategoryTheory.IsIso CondensedSet.compactlyGeneratedAdjunction.counit","decl":"instance : IsIso compactlyGeneratedAdjunction.counit := by\n  rw [NatTrans.isIso_iff_isIso_app]\n  intro X\n  exact inferInstanceAs (IsIso (compactlyGeneratedAdjunctionCounitIso X).hom)\n\n"}
