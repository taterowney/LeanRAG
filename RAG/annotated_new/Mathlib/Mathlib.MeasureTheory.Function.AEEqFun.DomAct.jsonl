{"name":"DomMulAct.smul_aeeqFun_aeeq","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : SMul M α\ninst✝¹ : MeasurableSMul M α\ninst✝ : MeasureTheory.SMulInvariantMeasure M α μ\nc : DomMulAct M\nf : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(HSMul.hSMul c f) fun x => ↑f (HSMul.hSMul (DomMulAct.mk.symm c) x)","decl":"@[to_additive]\ntheorem smul_aeeqFun_aeeq (c : Mᵈᵐᵃ) (f : α →ₘ[μ] β) :\n    c • f =ᵐ[μ] (f <| mk.symm c • ·) :=\n  f.coeFn_compMeasurePreserving _\n\n"}
{"name":"DomAddAct.vadd_aeeqFun_aeeq","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : VAdd M α\ninst✝¹ : MeasurableVAdd M α\ninst✝ : MeasureTheory.VAddInvariantMeasure M α μ\nc : DomAddAct M\nf : MeasureTheory.AEEqFun α β μ\n⊢ (MeasureTheory.ae μ).EventuallyEq ↑(HVAdd.hVAdd c f) fun x => ↑f (HVAdd.hVAdd (DomAddAct.mk.symm c) x)","decl":"@[to_additive]\ntheorem smul_aeeqFun_aeeq (c : Mᵈᵐᵃ) (f : α →ₘ[μ] β) :\n    c • f =ᵐ[μ] (f <| mk.symm c • ·) :=\n  f.coeFn_compMeasurePreserving _\n\n"}
{"name":"DomMulAct.mk_smul_mk_aeeqFun","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_3\nα : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : SMul M α\ninst✝¹ : MeasurableSMul M α\ninst✝ : MeasureTheory.SMulInvariantMeasure M α μ\nc : M\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (HSMul.hSMul (DomMulAct.mk c) (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (fun x => f (HSMul.hSMul c x)) ⋯)","decl":"@[to_additive (attr := simp)]\ntheorem mk_smul_mk_aeeqFun (c : M) (f : α → β) (hf : AEStronglyMeasurable f μ) :\n    mk c • AEEqFun.mk f hf = AEEqFun.mk (f <| c • ·)\n      (hf.comp_measurePreserving (measurePreserving_smul _ _)) :=\n  rfl\n\n"}
{"name":"DomAddAct.mk_vadd_mk_aeeqFun","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_3\nα : Type u_1\nβ : Type u_2\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : VAdd M α\ninst✝¹ : MeasurableVAdd M α\ninst✝ : MeasureTheory.VAddInvariantMeasure M α μ\nc : M\nf : α → β\nhf : MeasureTheory.AEStronglyMeasurable f μ\n⊢ Eq (HVAdd.hVAdd (DomAddAct.mk c) (MeasureTheory.AEEqFun.mk f hf)) (MeasureTheory.AEEqFun.mk (fun x => f (HVAdd.hVAdd c x)) ⋯)","decl":"@[to_additive (attr := simp)]\ntheorem mk_smul_mk_aeeqFun (c : M) (f : α → β) (hf : AEStronglyMeasurable f μ) :\n    mk c • AEEqFun.mk f hf = AEEqFun.mk (f <| c • ·)\n      (hf.comp_measurePreserving (measurePreserving_smul _ _)) :=\n  rfl\n\n"}
{"name":"DomMulAct.smul_aeeqFun_const","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : SMul M α\ninst✝¹ : MeasurableSMul M α\ninst✝ : MeasureTheory.SMulInvariantMeasure M α μ\nc : DomMulAct M\nb : β\n⊢ Eq (HSMul.hSMul c (MeasureTheory.AEEqFun.const α b)) (MeasureTheory.AEEqFun.const α b)","decl":"@[to_additive (attr := simp)]\ntheorem smul_aeeqFun_const (c : Mᵈᵐᵃ) (b : β) :\n    c • (AEEqFun.const α b : α →ₘ[μ] β) = AEEqFun.const α b :=\n  rfl\n\n"}
{"name":"DomAddAct.vadd_aeeqFun_const","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝⁵ : MeasurableSpace M\ninst✝⁴ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝³ : TopologicalSpace β\ninst✝² : VAdd M α\ninst✝¹ : MeasurableVAdd M α\ninst✝ : MeasureTheory.VAddInvariantMeasure M α μ\nc : DomAddAct M\nb : β\n⊢ Eq (HVAdd.hVAdd c (MeasureTheory.AEEqFun.const α b)) (MeasureTheory.AEEqFun.const α b)","decl":"@[to_additive (attr := simp)]\ntheorem smul_aeeqFun_const (c : Mᵈᵐᵃ) (b : β) :\n    c • (AEEqFun.const α b : α →ₘ[μ] β) = AEEqFun.const α b :=\n  rfl\n\n"}
{"name":"DomMulAct.instSMulCommClassAEEqFun","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_3\nN : Type u_1\nα : Type u_4\nβ : Type u_2\ninst✝⁷ : MeasurableSpace M\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : SMul M α\ninst✝³ : MeasurableSMul M α\ninst✝² : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝¹ : SMul N β\ninst✝ : ContinuousConstSMul N β\n⊢ SMulCommClass (DomMulAct M) N (MeasureTheory.AEEqFun α β μ)","decl":"instance [SMul N β] [ContinuousConstSMul N β] : SMulCommClass Mᵈᵐᵃ N (α →ₘ[μ] β) where\n  smul_comm := by rintro _ _ ⟨_⟩; rfl\n\n"}
{"name":"DomMulAct.instSMulCommClassAEEqFun_1","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_3\nN : Type u_1\nα : Type u_4\nβ : Type u_2\ninst✝⁷ : MeasurableSpace M\ninst✝⁶ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : SMul M α\ninst✝³ : MeasurableSMul M α\ninst✝² : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝¹ : SMul N β\ninst✝ : ContinuousConstSMul N β\n⊢ SMulCommClass N (DomMulAct M) (MeasureTheory.AEEqFun α β μ)","decl":"instance [SMul N β] [ContinuousConstSMul N β] : SMulCommClass N Mᵈᵐᵃ (α →ₘ[μ] β) :=\n  .symm _ _ _\n\n"}
{"name":"DomMulAct.instSMulCommClassAEEqFun_2","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_3\nN : Type u_1\nα : Type u_2\nβ : Type u_4\ninst✝¹⁰ : MeasurableSpace M\ninst✝⁹ : MeasurableSpace N\ninst✝⁸ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁷ : TopologicalSpace β\ninst✝⁶ : SMul M α\ninst✝⁵ : MeasurableSMul M α\ninst✝⁴ : MeasureTheory.SMulInvariantMeasure M α μ\ninst✝³ : SMul N α\ninst✝² : MeasurableSMul N α\ninst✝¹ : MeasureTheory.SMulInvariantMeasure N α μ\ninst✝ : SMulCommClass M N α\n⊢ SMulCommClass (DomMulAct M) (DomMulAct N) (MeasureTheory.AEEqFun α β μ)","decl":"@[to_additive]\ninstance [SMul N α] [MeasurableSMul N α] [SMulInvariantMeasure N α μ] [SMulCommClass M N α] :\n    SMulCommClass Mᵈᵐᵃ Nᵈᵐᵃ (α →ₘ[μ] β) where\n  smul_comm := mk.surjective.forall.2 fun c₁ ↦ mk.surjective.forall.2 fun c₂ ↦\n    (AEEqFun.induction_on · fun f hf ↦ by simp only [mk_smul_mk_aeeqFun, smul_comm])\n\n"}
{"name":"DomAddAct.instVAddCommClassAEEqFun_2","module":"Mathlib.MeasureTheory.Function.AEEqFun.DomAct","initialProofState":"M : Type u_3\nN : Type u_1\nα : Type u_2\nβ : Type u_4\ninst✝¹⁰ : MeasurableSpace M\ninst✝⁹ : MeasurableSpace N\ninst✝⁸ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝⁷ : TopologicalSpace β\ninst✝⁶ : VAdd M α\ninst✝⁵ : MeasurableVAdd M α\ninst✝⁴ : MeasureTheory.VAddInvariantMeasure M α μ\ninst✝³ : VAdd N α\ninst✝² : MeasurableVAdd N α\ninst✝¹ : MeasureTheory.VAddInvariantMeasure N α μ\ninst✝ : VAddCommClass M N α\n⊢ VAddCommClass (DomAddAct M) (DomAddAct N) (MeasureTheory.AEEqFun α β μ)","decl":"@[to_additive]\ninstance [SMul N α] [MeasurableSMul N α] [SMulInvariantMeasure N α μ] [SMulCommClass M N α] :\n    SMulCommClass Mᵈᵐᵃ Nᵈᵐᵃ (α →ₘ[μ] β) where\n  smul_comm := mk.surjective.forall.2 fun c₁ ↦ mk.surjective.forall.2 fun c₂ ↦\n    (AEEqFun.induction_on · fun f hf ↦ by simp only [mk_smul_mk_aeeqFun, smul_comm])\n\n"}
