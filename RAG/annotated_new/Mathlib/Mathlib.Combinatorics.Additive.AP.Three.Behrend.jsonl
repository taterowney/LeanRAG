{"name":"threeAPFree_frontier","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : LinearOrderedField 𝕜\ninst✝² : TopologicalSpace E\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\ns : Set E\nhs₀ : IsClosed s\nhs₁ : StrictConvex 𝕜 s\n⊢ ThreeAPFree (frontier s)","decl":"/-- The frontier of a closed strictly convex set only contains trivial arithmetic progressions.\nThe idea is that an arithmetic progression is contained on a line and the frontier of a strictly\nconvex set does not contain lines. -/\nlemma threeAPFree_frontier {𝕜 E : Type*} [LinearOrderedField 𝕜] [TopologicalSpace E]\n    [AddCommMonoid E] [Module 𝕜 E] {s : Set E} (hs₀ : IsClosed s) (hs₁ : StrictConvex 𝕜 s) :\n    ThreeAPFree (frontier s) := by\n  intro a ha b hb c hc habc\n  obtain rfl : (1 / 2 : 𝕜) • a + (1 / 2 : 𝕜) • c = b := by\n    rwa [← smul_add, one_div, inv_smul_eq_iff₀ (show (2 : 𝕜) ≠ 0 by norm_num), two_smul]\n  have :=\n    hs₁.eq (hs₀.frontier_subset ha) (hs₀.frontier_subset hc) one_half_pos one_half_pos\n      (add_halves _) hb.2\n  simp [this, ← add_smul]\n  ring_nf\n  simp\n\n"}
{"name":"threeAPFree_sphere","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : StrictConvexSpace Real E\nx : E\nr : Real\n⊢ ThreeAPFree (Metric.sphere x r)","decl":"lemma threeAPFree_sphere {E : Type*} [NormedAddCommGroup E] [NormedSpace ℝ E]\n    [StrictConvexSpace ℝ E] (x : E) (r : ℝ) : ThreeAPFree (sphere x r) := by\n  obtain rfl | hr := eq_or_ne r 0\n  · rw [sphere_zero]\n    exact threeAPFree_singleton _\n  · convert threeAPFree_frontier isClosed_ball (strictConvex_closedBall ℝ x r)\n    exact (frontier_closedBall _ hr).symm\n\n"}
{"name":"Behrend.mem_box","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\nx : Fin n → Nat\n⊢ Iff (Membership.mem (Behrend.box n d) x) (∀ (i : Fin n), LT.lt (x i) d)","decl":"theorem mem_box : x ∈ box n d ↔ ∀ i, x i < d := by simp only [box, Fintype.mem_piFinset, mem_range]\n\n"}
{"name":"Behrend.card_box","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ Eq (Behrend.box n d).card (HPow.hPow d n)","decl":"@[simp]\ntheorem card_box : #(box n d) = d ^ n := by simp [box]\n\n"}
{"name":"Behrend.box_zero","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n : Nat\n⊢ Eq (Behrend.box (HAdd.hAdd n 1) 0) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem box_zero : box (n + 1) 0 = ∅ := by simp [box]\n\n"}
{"name":"Behrend.sphere_zero_subset","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ HasSubset.Subset (Behrend.sphere n d 0) 0","decl":"theorem sphere_zero_subset : sphere n d 0 ⊆ 0 := fun x => by simp [sphere, funext_iff]\n\n"}
{"name":"Behrend.sphere_zero_right","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n k : Nat\n⊢ Eq (Behrend.sphere (HAdd.hAdd n 1) 0 k) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem sphere_zero_right (n k : ℕ) : sphere (n + 1) 0 k = ∅ := by simp [sphere]\n\n"}
{"name":"Behrend.sphere_subset_box","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d k : Nat\n⊢ HasSubset.Subset (Behrend.sphere n d k) (Behrend.box n d)","decl":"theorem sphere_subset_box : sphere n d k ⊆ box n d :=\n  filter_subset _ _\n\n"}
{"name":"Behrend.norm_of_mem_sphere","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d k : Nat\nx : Fin n → Nat\nhx : Membership.mem (Behrend.sphere n d k) x\n⊢ Eq (Norm.norm ((WithLp.equiv 2 (Fin n → Real)).symm (Function.comp Nat.cast x))) (↑k).sqrt","decl":"theorem norm_of_mem_sphere {x : Fin n → ℕ} (hx : x ∈ sphere n d k) :\n    ‖(WithLp.equiv 2 _).symm ((↑) ∘ x : Fin n → ℝ)‖ = √↑k := by\n  rw [EuclideanSpace.norm_eq]\n  dsimp\n  simp_rw [abs_cast, ← cast_pow, ← cast_sum, (mem_filter.1 hx).2]\n\n"}
{"name":"Behrend.sphere_subset_preimage_metric_sphere","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d k : Nat\n⊢ HasSubset.Subset (↑(Behrend.sphere n d k)) (Set.preimage (fun x => (WithLp.equiv 2 (Fin n → Real)).symm (Function.comp Nat.cast x)) (Metric.sphere 0 (↑k).sqrt))","decl":"theorem sphere_subset_preimage_metric_sphere : (sphere n d k : Set (Fin n → ℕ)) ⊆\n    (fun x : Fin n → ℕ => (WithLp.equiv 2 _).symm ((↑) ∘ x : Fin n → ℝ)) ⁻¹'\n      Metric.sphere (0 : PiLp 2 fun _ : Fin n => ℝ) (√↑k) :=\n  fun x hx => by rw [Set.mem_preimage, mem_sphere_zero_iff_norm, norm_of_mem_sphere hx]\n\n"}
{"name":"Behrend.map_apply","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\na : Fin n → Nat\n⊢ Eq ((Behrend.map d) a) (Finset.univ.sum fun i => HMul.hMul (a i) (HPow.hPow d ↑i))","decl":"/-- The map that appears in Behrend's bound on Roth numbers. -/\n@[simps]\ndef map (d : ℕ) : (Fin n → ℕ) →+ ℕ where\n  toFun a := ∑ i, a i * d ^ (i : ℕ)\n  map_zero' := by simp_rw [Pi.zero_apply, zero_mul, sum_const_zero]\n  map_add' a b := by simp_rw [Pi.add_apply, add_mul, sum_add_distrib]\n\n"}
{"name":"Behrend.map_zero","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"d : Nat\na : Fin 0 → Nat\n⊢ Eq ((Behrend.map d) a) 0","decl":"theorem map_zero (d : ℕ) (a : Fin 0 → ℕ) : map d a = 0 := by simp [map]\n\n"}
{"name":"Behrend.map_succ","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\na : Fin (HAdd.hAdd n 1) → Nat\n⊢ Eq ((Behrend.map d) a) (HAdd.hAdd (a 0) (HMul.hMul (Finset.univ.sum fun x => HMul.hMul (a x.succ) (HPow.hPow d ↑x)) d))","decl":"theorem map_succ (a : Fin (n + 1) → ℕ) :\n    map d a = a 0 + (∑ x : Fin n, a x.succ * d ^ (x : ℕ)) * d := by\n  simp [map, Fin.sum_univ_succ, _root_.pow_succ, ← mul_assoc, ← sum_mul]\n\n"}
{"name":"Behrend.map_succ'","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\na : Fin (HAdd.hAdd n 1) → Nat\n⊢ Eq ((Behrend.map d) a) (HAdd.hAdd (a 0) (HMul.hMul ((Behrend.map d) (Function.comp a Fin.succ)) d))","decl":"theorem map_succ' (a : Fin (n + 1) → ℕ) : map d a = a 0 + map d (a ∘ Fin.succ) * d :=\n  map_succ _\n\n"}
{"name":"Behrend.map_monotone","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ Monotone ⇑(Behrend.map d)","decl":"theorem map_monotone (d : ℕ) : Monotone (map d : (Fin n → ℕ) → ℕ) := fun x y h => by\n  dsimp; exact sum_le_sum fun i _ => Nat.mul_le_mul_right _ <| h i\n\n"}
{"name":"Behrend.map_mod","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\na : Fin n.succ → Nat\n⊢ Eq (HMod.hMod ((Behrend.map d) a) d) (HMod.hMod (a 0) d)","decl":"theorem map_mod (a : Fin n.succ → ℕ) : map d a % d = a 0 % d := by\n  rw [map_succ, Nat.add_mul_mod_self_right]\n\n"}
{"name":"Behrend.map_eq_iff","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\nx₁ x₂ : Fin n.succ → Nat\nhx₁ : ∀ (i : Fin n.succ), LT.lt (x₁ i) d\nhx₂ : ∀ (i : Fin n.succ), LT.lt (x₂ i) d\n⊢ Iff (Eq ((Behrend.map d) x₁) ((Behrend.map d) x₂)) (And (Eq (x₁ 0) (x₂ 0)) (Eq ((Behrend.map d) (Function.comp x₁ Fin.succ)) ((Behrend.map d) (Function.comp x₂ Fin.succ))))","decl":"theorem map_eq_iff {x₁ x₂ : Fin n.succ → ℕ} (hx₁ : ∀ i, x₁ i < d) (hx₂ : ∀ i, x₂ i < d) :\n    map d x₁ = map d x₂ ↔ x₁ 0 = x₂ 0 ∧ map d (x₁ ∘ Fin.succ) = map d (x₂ ∘ Fin.succ) := by\n  refine ⟨fun h => ?_, fun h => by rw [map_succ', map_succ', h.1, h.2]⟩\n  have : x₁ 0 = x₂ 0 := by\n    rw [← mod_eq_of_lt (hx₁ _), ← map_mod, ← mod_eq_of_lt (hx₂ _), ← map_mod, h]\n  rw [map_succ, map_succ, this, add_right_inj, mul_eq_mul_right_iff] at h\n  exact ⟨this, h.resolve_right (pos_of_gt (hx₁ 0)).ne'⟩\n\n"}
{"name":"Behrend.map_injOn","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ Set.InjOn (⇑(Behrend.map d)) (setOf fun x => ∀ (i : Fin n), LT.lt (x i) d)","decl":"theorem map_injOn : {x : Fin n → ℕ | ∀ i, x i < d}.InjOn (map d) := by\n  intro x₁ hx₁ x₂ hx₂ h\n  induction' n with n ih\n  · simp [eq_iff_true_of_subsingleton]\n  ext i\n  have x := (map_eq_iff hx₁ hx₂).1 h\n  refine Fin.cases x.1 (congr_fun <| ih (fun _ => ?_) (fun _ => ?_) x.2) i\n  · exact hx₁ _\n  · exact hx₂ _\n\n"}
{"name":"Behrend.map_le_of_mem_box","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\nx : Fin n → Nat\nhx : Membership.mem (Behrend.box n d) x\n⊢ LE.le ((Behrend.map (HSub.hSub (HMul.hMul 2 d) 1)) x) (Finset.univ.sum fun i => HMul.hMul (HSub.hSub d 1) (HPow.hPow (HSub.hSub (HMul.hMul 2 d) 1) ↑i))","decl":"theorem map_le_of_mem_box (hx : x ∈ box n d) :\n    map (2 * d - 1) x ≤ ∑ i : Fin n, (d - 1) * (2 * d - 1) ^ (i : ℕ) :=\n  map_monotone (2 * d - 1) fun _ => Nat.le_sub_one_of_lt <| mem_box.1 hx _\n\n"}
{"name":"Behrend.threeAPFree_sphere","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d k : Nat\n⊢ ThreeAPFree ↑(Behrend.sphere n d k)","decl":"nonrec theorem threeAPFree_sphere : ThreeAPFree (sphere n d k : Set (Fin n → ℕ)) := by\n  set f : (Fin n → ℕ) →+ EuclideanSpace ℝ (Fin n) :=\n    { toFun := fun f => ((↑) : ℕ → ℝ) ∘ f\n      map_zero' := funext fun _ => cast_zero\n      map_add' := fun _ _ => funext fun _ => cast_add _ _ }\n  refine ThreeAPFree.of_image (AddMonoidHomClass.isAddFreimanHom f (Set.mapsTo_image _ _))\n    cast_injective.comp_left.injOn (Set.subset_univ _) ?_\n  refine (threeAPFree_sphere 0 (√↑k)).mono (Set.image_subset_iff.2 fun x => ?_)\n  rw [Set.mem_preimage, mem_sphere_zero_iff_norm]\n  exact norm_of_mem_sphere\n\n"}
{"name":"Behrend.threeAPFree_image_sphere","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d k : Nat\n⊢ ThreeAPFree ↑(Finset.image (⇑(Behrend.map (HSub.hSub (HMul.hMul 2 d) 1))) (Behrend.sphere n d k))","decl":"theorem threeAPFree_image_sphere :\n    ThreeAPFree ((sphere n d k).image (map (2 * d - 1)) : Set ℕ) := by\n  rw [coe_image]\n  apply ThreeAPFree.image' (α := Fin n → ℕ) (β := ℕ) (s := sphere n d k) (map (2 * d - 1))\n    (map_injOn.mono _) threeAPFree_sphere\n  rw [Set.add_subset_iff]\n  rintro a ha b hb i\n  have hai := mem_box.1 (sphere_subset_box ha) i\n  have hbi := mem_box.1 (sphere_subset_box hb) i\n  rw [lt_tsub_iff_right, ← succ_le_iff, two_mul]\n  exact (add_add_add_comm _ _ 1 1).trans_le (_root_.add_le_add hai hbi)\n\n"}
{"name":"Behrend.sum_sq_le_of_mem_box","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\nx : Fin n → Nat\nhx : Membership.mem (Behrend.box n d) x\n⊢ LE.le (Finset.univ.sum fun i => HPow.hPow (x i) 2) (HMul.hMul n (HPow.hPow (HSub.hSub d 1) 2))","decl":"theorem sum_sq_le_of_mem_box (hx : x ∈ box n d) : ∑ i : Fin n, x i ^ 2 ≤ n * (d - 1) ^ 2 := by\n  rw [mem_box] at hx\n  have : ∀ i, x i ^ 2 ≤ (d - 1) ^ 2 := fun i =>\n    Nat.pow_le_pow_left (Nat.le_sub_one_of_lt (hx i)) _\n  exact (sum_le_card_nsmul univ _ _ fun i _ => this i).trans (by rw [card_fin, smul_eq_mul])\n\n"}
{"name":"Behrend.sum_eq","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ Eq (Finset.univ.sum fun i => HMul.hMul d (HPow.hPow (HAdd.hAdd (HMul.hMul 2 d) 1) ↑i)) (HDiv.hDiv (HSub.hSub (HPow.hPow (HAdd.hAdd (HMul.hMul 2 d) 1) n) 1) 2)","decl":"theorem sum_eq : (∑ i : Fin n, d * (2 * d + 1) ^ (i : ℕ)) = ((2 * d + 1) ^ n - 1) / 2 := by\n  refine (Nat.div_eq_of_eq_mul_left zero_lt_two ?_).symm\n  rw [← sum_range fun i => d * (2 * d + 1) ^ (i : ℕ), ← mul_sum, mul_right_comm, mul_comm d, ←\n    geom_sum_mul_add, add_tsub_cancel_right, mul_comm]\n\n"}
{"name":"Behrend.sum_lt","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ LT.lt (Finset.univ.sum fun i => HMul.hMul d (HPow.hPow (HAdd.hAdd (HMul.hMul 2 d) 1) ↑i)) (HPow.hPow (HAdd.hAdd (HMul.hMul 2 d) 1) n)","decl":"theorem sum_lt : (∑ i : Fin n, d * (2 * d + 1) ^ (i : ℕ)) < (2 * d + 1) ^ n :=\n  sum_eq.trans_lt <| (Nat.div_le_self _ 2).trans_lt <| pred_lt (pow_pos (succ_pos _) _).ne'\n\n"}
{"name":"Behrend.card_sphere_le_rothNumberNat","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d k : Nat\n⊢ LE.le (Behrend.sphere n d k).card (rothNumberNat (HPow.hPow (HSub.hSub (HMul.hMul 2 d) 1) n))","decl":"theorem card_sphere_le_rothNumberNat (n d k : ℕ) :\n    #(sphere n d k) ≤ rothNumberNat ((2 * d - 1) ^ n) := by\n  cases n\n  · dsimp; refine (card_le_univ _).trans_eq ?_; rfl\n  cases d\n  · simp\n  apply threeAPFree_image_sphere.le_rothNumberNat _ _ (card_image_of_injOn _)\n  · simp only [subset_iff, mem_image, and_imp, forall_exists_index, mem_range,\n      forall_apply_eq_imp_iff₂, sphere, mem_filter]\n    rintro _ x hx _ rfl\n    exact (map_le_of_mem_box hx).trans_lt sum_lt\n  apply map_injOn.mono fun x => ?_\n  simp only [mem_coe, sphere, mem_filter, mem_box, and_imp, two_mul]\n  exact fun h _ i => (h i).trans_le le_self_add\n\n"}
{"name":"Behrend.exists_large_sphere_aux","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ Exists fun k => And (Membership.mem (Finset.range (HAdd.hAdd (HMul.hMul n (HPow.hPow (HSub.hSub d 1) 2)) 1)) k) (LE.le (HDiv.hDiv (↑(HPow.hPow d n)) (HAdd.hAdd (↑(HMul.hMul n (HPow.hPow (HSub.hSub d 1) 2))) 1)) ↑(Behrend.sphere n d k).card)","decl":"theorem exists_large_sphere_aux (n d : ℕ) : ∃ k ∈ range (n * (d - 1) ^ 2 + 1),\n    (↑(d ^ n) / ((n * (d - 1) ^ 2 :) + 1) : ℝ) ≤ #(sphere n d k) := by\n  refine exists_le_card_fiber_of_nsmul_le_card_of_maps_to (fun x hx => ?_) nonempty_range_succ ?_\n  · rw [mem_range, Nat.lt_succ_iff]\n    exact sum_sq_le_of_mem_box hx\n  · rw [card_range, _root_.nsmul_eq_mul, mul_div_assoc', cast_add_one, mul_div_cancel_left₀,\n      card_box]\n    exact (cast_add_one_pos _).ne'\n\n"}
{"name":"Behrend.exists_large_sphere","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ Exists fun k => LE.le (HDiv.hDiv ↑(HPow.hPow d n) ↑(HMul.hMul n (HPow.hPow d 2))) ↑(Behrend.sphere n d k).card","decl":"theorem exists_large_sphere (n d : ℕ) :\n    ∃ k, ((d ^ n :) / (n * d ^ 2 :) : ℝ) ≤ #(sphere n d k) := by\n  obtain ⟨k, -, hk⟩ := exists_large_sphere_aux n d\n  refine ⟨k, ?_⟩\n  obtain rfl | hn := n.eq_zero_or_pos\n  · simp\n  obtain rfl | hd := d.eq_zero_or_pos\n  · simp\n  refine (div_le_div_of_nonneg_left ?_ ?_ ?_).trans hk\n  · exact cast_nonneg _\n  · exact cast_add_one_pos _\n  simp only [← le_sub_iff_add_le', cast_mul, ← mul_sub, cast_pow, cast_sub hd, sub_sq, one_pow,\n    cast_one, mul_one, sub_add, sub_sub_self]\n  apply one_le_mul_of_one_le_of_one_le\n  · rwa [one_le_cast]\n  rw [_root_.le_sub_iff_add_le]\n  norm_num\n  exact one_le_cast.2 hd\n\n"}
{"name":"Behrend.bound_aux'","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\n⊢ LE.le (HDiv.hDiv ↑(HPow.hPow d n) ↑(HMul.hMul n (HPow.hPow d 2))) ↑(rothNumberNat (HPow.hPow (HSub.hSub (HMul.hMul 2 d) 1) n))","decl":"theorem bound_aux' (n d : ℕ) : ((d ^ n :) / (n * d ^ 2 :) : ℝ) ≤ rothNumberNat ((2 * d - 1) ^ n) :=\n  let ⟨_, h⟩ := exists_large_sphere n d\n  h.trans <| cast_le.2 <| card_sphere_le_rothNumberNat _ _ _\n\n"}
{"name":"Behrend.bound_aux","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"n d : Nat\nhd : Ne d 0\nhn : LE.le 2 n\n⊢ LE.le (HDiv.hDiv (HPow.hPow (↑d) (HSub.hSub n 2)) ↑n) ↑(rothNumberNat (HPow.hPow (HSub.hSub (HMul.hMul 2 d) 1) n))","decl":"theorem bound_aux (hd : d ≠ 0) (hn : 2 ≤ n) :\n    (d ^ (n - 2 :) / n : ℝ) ≤ rothNumberNat ((2 * d - 1) ^ n) := by\n  convert bound_aux' n d using 1\n  rw [cast_mul, cast_pow, mul_comm, ← div_div, pow_sub₀ _ _ hn, ← div_eq_mul_inv, cast_pow]\n  rwa [cast_ne_zero]\n\n"}
{"name":"Behrend.log_two_mul_two_le_sqrt_log_eight","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"⊢ LE.le (HMul.hMul (Real.log 2) 2) (Real.log 8).sqrt","decl":"theorem log_two_mul_two_le_sqrt_log_eight : log 2 * 2 ≤ √(log 8) := by\n  have : (8 : ℝ) = 2 ^ ((3 : ℕ) : ℝ) := by rw [rpow_natCast]; norm_num\n  rw [this, log_rpow zero_lt_two (3 : ℕ)]\n  apply le_sqrt_of_sq_le\n  rw [mul_pow, sq (log 2), mul_assoc, mul_comm]\n  refine mul_le_mul_of_nonneg_right ?_ (log_nonneg one_le_two)\n  rw [← le_div_iff₀]\n  on_goal 1 => apply log_two_lt_d9.le.trans\n  all_goals norm_num1\n\n"}
{"name":"Behrend.two_div_one_sub_two_div_e_le_eight","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"⊢ LE.le (HDiv.hDiv 2 (HSub.hSub 1 (HDiv.hDiv 2 (Real.exp 1)))) 8","decl":"theorem two_div_one_sub_two_div_e_le_eight : 2 / (1 - 2 / exp 1) ≤ 8 := by\n  rw [div_le_iff₀, mul_sub, mul_one, mul_div_assoc', le_sub_comm, div_le_iff₀ (exp_pos _)]\n  · linarith [exp_one_gt_d9]\n  rw [sub_pos, div_lt_one] <;> exact exp_one_gt_d9.trans' (by norm_num)\n\n"}
{"name":"Behrend.le_sqrt_log","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 4096 N\n⊢ LE.le (HMul.hMul (Real.log (HDiv.hDiv 2 (HSub.hSub 1 (HDiv.hDiv 2 (Real.exp 1))))) (69 / 50)) (Real.log ↑N).sqrt","decl":"theorem le_sqrt_log (hN : 4096 ≤ N) : log (2 / (1 - 2 / exp 1)) * (69 / 50) ≤ √(log ↑N) := by\n  have : (12 : ℕ) * log 2 ≤ log N := by\n    rw [← log_rpow zero_lt_two, rpow_natCast]\n    exact log_le_log (by positivity) (mod_cast hN)\n  refine (mul_le_mul_of_nonneg_right (log_le_log ?_ two_div_one_sub_two_div_e_le_eight) <| by\n    norm_num1).trans ?_\n  · refine div_pos zero_lt_two ?_\n    rw [sub_pos, div_lt_one (exp_pos _)]\n    exact exp_one_gt_d9.trans_le' (by norm_num1)\n  have l8 : log 8 = (3 : ℕ) * log 2 := by\n    rw [← log_rpow zero_lt_two, rpow_natCast]\n    norm_num\n  rw [l8]\n  apply le_sqrt_of_sq_le (le_trans _ this)\n  rw [mul_right_comm, mul_pow, sq (log 2), ← mul_assoc]\n  apply mul_le_mul_of_nonneg_right _ (log_nonneg one_le_two)\n  rw [← le_div_iff₀']\n  · exact log_two_lt_d9.le.trans (by norm_num1)\n  exact sq_pos_of_ne_zero (by norm_num1)\n\n"}
{"name":"Behrend.exp_neg_two_mul_le","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"x : Real\nhx : LT.lt 0 x\n⊢ LT.lt (Real.exp (HMul.hMul (-2) x)) (HDiv.hDiv (Real.exp (HSub.hSub 2 ↑(Nat.ceil x))) ↑(Nat.ceil x))","decl":"theorem exp_neg_two_mul_le {x : ℝ} (hx : 0 < x) : exp (-2 * x) < exp (2 - ⌈x⌉₊) / ⌈x⌉₊ := by\n  have h₁ := ceil_lt_add_one hx.le\n  have h₂ : 1 - x ≤ 2 - ⌈x⌉₊ := by linarith\n  calc\n    _ ≤ exp (1 - x) / (x + 1) := ?_\n    _ ≤ exp (2 - ⌈x⌉₊) / (x + 1) := by gcongr\n    _ < _ := by gcongr\n  rw [le_div_iff₀  (add_pos hx zero_lt_one), ← le_div_iff₀' (exp_pos _), ← exp_sub, neg_mul,\n    sub_neg_eq_add, two_mul, sub_add_add_cancel, add_comm _ x]\n  exact le_trans (le_add_of_nonneg_right zero_le_one) (add_one_le_exp _)\n\n"}
{"name":"Behrend.div_lt_floor","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"x : Real\nhx : LE.le (HDiv.hDiv 2 (HSub.hSub 1 (HDiv.hDiv 2 (Real.exp 1)))) x\n⊢ LT.lt (HDiv.hDiv x (Real.exp 1)) ↑(Nat.floor (HDiv.hDiv x 2))","decl":"theorem div_lt_floor {x : ℝ} (hx : 2 / (1 - 2 / exp 1) ≤ x) : x / exp 1 < (⌊x / 2⌋₊ : ℝ) := by\n  apply lt_of_le_of_lt _ (sub_one_lt_floor _)\n  have : 0 < 1 - 2 / exp 1 := by\n    rw [sub_pos, div_lt_one (exp_pos _)]\n    exact lt_of_le_of_lt (by norm_num) exp_one_gt_d9\n  rwa [le_sub_comm, div_eq_mul_one_div x, div_eq_mul_one_div x, ← mul_sub, div_sub', ←\n    div_eq_mul_one_div, mul_div_assoc', one_le_div, ← div_le_iff₀ this]\n  · exact zero_lt_two\n  · exact two_ne_zero\n\n"}
{"name":"Behrend.ceil_lt_mul","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"x : Real\nhx : LE.le (50 / 19) x\n⊢ LT.lt (↑(Nat.ceil x)) (HMul.hMul 1.38 x)","decl":"theorem ceil_lt_mul {x : ℝ} (hx : 50 / 19 ≤ x) : (⌈x⌉₊ : ℝ) < 1.38 * x := by\n  refine (ceil_lt_add_one <| hx.trans' <| by norm_num).trans_le ?_\n  rw [← le_sub_iff_add_le', ← sub_one_mul]\n  have : (1.38 : ℝ) = 69 / 50 := by norm_num\n  rwa [this, show (69 / 50 - 1 : ℝ) = (50 / 19)⁻¹ by norm_num1, ←\n    div_eq_inv_mul, one_le_div]\n  norm_num1\n\n"}
{"name":"Behrend.nValue_pos","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 2 N\n⊢ LT.lt 0 (Behrend.nValue N)","decl":"theorem nValue_pos (hN : 2 ≤ N) : 0 < nValue N :=\n  ceil_pos.2 <| Real.sqrt_pos.2 <| log_pos <| one_lt_cast.2 <| hN\n\n"}
{"name":"Behrend.three_le_nValue","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 64 N\n⊢ LE.le 3 (Behrend.nValue N)","decl":"theorem three_le_nValue (hN : 64 ≤ N) : 3 ≤ nValue N := by\n  rw [nValue, ← lt_iff_add_one_le, lt_ceil, cast_two]\n  apply lt_sqrt_of_sq_lt\n  have : (2 : ℝ) ^ ((6 : ℕ) : ℝ) ≤ N := by\n    rw [rpow_natCast]\n    exact (cast_le.2 hN).trans' (by norm_num1)\n  apply lt_of_lt_of_le _ (log_le_log (rpow_pos_of_pos zero_lt_two _) this)\n  rw [log_rpow zero_lt_two, ← div_lt_iff₀']\n  · exact log_two_gt_d9.trans_le' (by norm_num1)\n  · norm_num1\n\n"}
{"name":"Behrend.dValue_pos","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN₃ : LE.le 8 N\n⊢ LT.lt 0 (Behrend.dValue N)","decl":"theorem dValue_pos (hN₃ : 8 ≤ N) : 0 < dValue N := by\n  have hN₀ : 0 < (N : ℝ) := cast_pos.2 (succ_pos'.trans_le hN₃)\n  rw [dValue, floor_pos, ← log_le_log_iff zero_lt_one, log_one, log_div _ two_ne_zero, log_rpow hN₀,\n    inv_mul_eq_div, sub_nonneg, le_div_iff₀]\n  · have : (nValue N : ℝ) ≤ 2 * √(log N) := by\n      apply (ceil_lt_add_one <| sqrt_nonneg _).le.trans\n      rw [two_mul, add_le_add_iff_left]\n      apply le_sqrt_of_sq_le\n      rw [one_pow, le_log_iff_exp_le hN₀]\n      exact (exp_one_lt_d9.le.trans <| by norm_num).trans (cast_le.2 hN₃)\n    apply (mul_le_mul_of_nonneg_left this <| log_nonneg one_le_two).trans _\n    rw [← mul_assoc, ← le_div_iff₀ (Real.sqrt_pos.2 <| log_pos <| one_lt_cast.2 _), div_sqrt]\n    · apply log_two_mul_two_le_sqrt_log_eight.trans\n      apply Real.sqrt_le_sqrt\n      exact log_le_log (by norm_num) (mod_cast hN₃)\n    exact hN₃.trans_lt' (by norm_num)\n  · exact cast_pos.2 (nValue_pos <| hN₃.trans' <| by norm_num)\n  · exact (rpow_pos_of_pos hN₀ _).ne'\n  · exact div_pos (rpow_pos_of_pos hN₀ _) zero_lt_two\n\n"}
{"name":"Behrend.le_N","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 2 N\n⊢ LE.le (HPow.hPow (HSub.hSub (HMul.hMul 2 (Behrend.dValue N)) 1) (Behrend.nValue N)) N","decl":"theorem le_N (hN : 2 ≤ N) : (2 * dValue N - 1) ^ nValue N ≤ N := by\n  have : (2 * dValue N - 1) ^ nValue N ≤ (2 * dValue N) ^ nValue N :=\n    Nat.pow_le_pow_left (Nat.sub_le _ _) _\n  apply this.trans\n  suffices ((2 * dValue N) ^ nValue N : ℝ) ≤ N from mod_cast this\n  suffices i : (2 * dValue N : ℝ) ≤ (N : ℝ) ^ (nValue N : ℝ)⁻¹ by\n    rw [← rpow_natCast]\n    apply (rpow_le_rpow (mul_nonneg zero_le_two (cast_nonneg _)) i (cast_nonneg _)).trans\n    rw [← rpow_mul (cast_nonneg _), inv_mul_cancel₀, rpow_one]\n    rw [cast_ne_zero]\n    apply (nValue_pos hN).ne'\n  rw [← le_div_iff₀']\n  · exact floor_le (div_nonneg (rpow_nonneg (cast_nonneg _) _) zero_le_two)\n  apply zero_lt_two\n\n"}
{"name":"Behrend.bound","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 4096 N\n⊢ LT.lt (HDiv.hDiv (HPow.hPow (↑N) (Inv.inv ↑(Behrend.nValue N))) (Real.exp 1)) ↑(Behrend.dValue N)","decl":"theorem bound (hN : 4096 ≤ N) : (N : ℝ) ^ (nValue N : ℝ)⁻¹ / exp 1 < dValue N := by\n  apply div_lt_floor _\n  rw [← log_le_log_iff, log_rpow, mul_comm, ← div_eq_mul_inv]\n  · apply le_trans _ (div_le_div_of_nonneg_left _ _ (ceil_lt_mul _).le)\n    · rw [mul_comm, ← div_div, div_sqrt, le_div_iff₀]\n      · norm_num; exact le_sqrt_log hN\n      · norm_num1\n    · apply log_nonneg\n      rw [one_le_cast]\n      exact hN.trans' (by norm_num1)\n    · rw [cast_pos, lt_ceil, cast_zero, Real.sqrt_pos]\n      refine log_pos ?_\n      rw [one_lt_cast]\n      exact hN.trans_lt' (by norm_num1)\n    apply le_sqrt_of_sq_le\n    have : (12 : ℕ) * log 2 ≤ log N := by\n      rw [← log_rpow zero_lt_two, rpow_natCast]\n      exact log_le_log (by positivity) (mod_cast hN)\n    refine le_trans ?_ this\n    rw [← div_le_iff₀']\n    · exact log_two_gt_d9.le.trans' (by norm_num1)\n    · norm_num1\n  · rw [cast_pos]\n    exact hN.trans_lt' (by norm_num1)\n  · refine div_pos zero_lt_two ?_\n    rw [sub_pos, div_lt_one (exp_pos _)]\n    exact lt_of_le_of_lt (by norm_num1) exp_one_gt_d9\n  positivity\n\n"}
{"name":"Behrend.roth_lower_bound_explicit","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 4096 N\n⊢ LT.lt (HMul.hMul (↑N) (Real.exp (HMul.hMul (-4) (Real.log ↑N).sqrt))) ↑(rothNumberNat N)","decl":"theorem roth_lower_bound_explicit (hN : 4096 ≤ N) :\n    (N : ℝ) * exp (-4 * √(log N)) < rothNumberNat N := by\n  let n := nValue N\n  have hn : 0 < (n : ℝ) := cast_pos.2 (nValue_pos <| hN.trans' <| by norm_num1)\n  have hd : 0 < dValue N := dValue_pos (hN.trans' <| by norm_num1)\n  have hN₀ : 0 < (N : ℝ) := cast_pos.2 (hN.trans' <| by norm_num1)\n  have hn₂ : 2 < n := three_le_nValue <| hN.trans' <| by norm_num1\n  have : (2 * dValue N - 1) ^ n ≤ N := le_N (hN.trans' <| by norm_num1)\n  calc\n    _ ≤ (N ^ (nValue N : ℝ)⁻¹ / rexp 1 : ℝ) ^ (n - 2) / n := ?_\n    _ < _ := by gcongr; exacts [(tsub_pos_of_lt hn₂).ne', bound hN]\n    _ ≤ rothNumberNat ((2 * dValue N - 1) ^ n) := bound_aux hd.ne' hn₂.le\n    _ ≤ rothNumberNat N := mod_cast rothNumberNat.mono this\n  rw [← rpow_natCast, div_rpow (rpow_nonneg hN₀.le _) (exp_pos _).le, ← rpow_mul hN₀.le,\n    inv_mul_eq_div, cast_sub hn₂.le, cast_two, same_sub_div hn.ne', exp_one_rpow,\n    div_div, rpow_sub hN₀, rpow_one, div_div, div_eq_mul_inv]\n  refine mul_le_mul_of_nonneg_left ?_ (cast_nonneg _)\n  rw [mul_inv, mul_inv, ← exp_neg, ← rpow_neg (cast_nonneg _), neg_sub, ← div_eq_mul_inv]\n  have : exp (-4 * √(log N)) = exp (-2 * √(log N)) * exp (-2 * √(log N)) := by\n    rw [← exp_add, ← add_mul]\n    norm_num\n  rw [this]\n  refine mul_le_mul ?_ (exp_neg_two_mul_le <| Real.sqrt_pos.2 <| log_pos ?_).le (exp_pos _).le <|\n      rpow_nonneg (cast_nonneg _) _\n  · rw [← le_log_iff_exp_le (rpow_pos_of_pos hN₀ _), log_rpow hN₀, ← le_div_iff₀, mul_div_assoc,\n      div_sqrt, neg_mul, neg_le_neg_iff, div_mul_eq_mul_div, div_le_iff₀ hn]\n    · exact mul_le_mul_of_nonneg_left (le_ceil _) zero_le_two\n    refine Real.sqrt_pos.2 (log_pos ?_)\n    rw [one_lt_cast]\n    exact hN.trans_lt' (by norm_num1)\n  · rw [one_lt_cast]\n    exact hN.trans_lt' (by norm_num1)\n\n"}
{"name":"Behrend.exp_four_lt","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"⊢ LT.lt (Real.exp 4) 64","decl":"theorem exp_four_lt : exp 4 < 64 := by\n  rw [show (64 : ℝ) = 2 ^ ((6 : ℕ) : ℝ) by rw [rpow_natCast]; norm_num1,\n    ← lt_log_iff_exp_lt (rpow_pos_of_pos zero_lt_two _), log_rpow zero_lt_two, ← div_lt_iff₀']\n  · exact log_two_gt_d9.trans_le' (by norm_num1)\n  · norm_num\n\n"}
{"name":"Behrend.four_zero_nine_six_lt_exp_sixteen","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"⊢ LT.lt 4096 (Real.exp 16)","decl":"theorem four_zero_nine_six_lt_exp_sixteen : 4096 < exp 16 := by\n  rw [← log_lt_iff_lt_exp (show (0 : ℝ) < 4096 by norm_num), show (4096 : ℝ) = 2 ^ 12 by norm_cast,\n    ← rpow_natCast, log_rpow zero_lt_two, cast_ofNat]\n  linarith [log_two_lt_d9]\n\n"}
{"name":"Behrend.lower_bound_le_one'","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 2 N\nhN' : LE.le N 4096\n⊢ LE.le (HMul.hMul (↑N) (Real.exp (HMul.hMul (-4) (Real.log ↑N).sqrt))) 1","decl":"theorem lower_bound_le_one' (hN : 2 ≤ N) (hN' : N ≤ 4096) :\n    (N : ℝ) * exp (-4 * √(log N)) ≤ 1 := by\n  rw [← log_le_log_iff (mul_pos (cast_pos.2 (zero_lt_two.trans_le hN)) (exp_pos _)) zero_lt_one,\n    log_one, log_mul (cast_pos.2 (zero_lt_two.trans_le hN)).ne' (exp_pos _).ne', log_exp, neg_mul, ←\n    sub_eq_add_neg, sub_nonpos, ←\n    div_le_iff₀ (Real.sqrt_pos.2 <| log_pos <| one_lt_cast.2 <| one_lt_two.trans_le hN), div_sqrt,\n    sqrt_le_left zero_le_four, log_le_iff_le_exp (cast_pos.2 (zero_lt_two.trans_le hN))]\n  norm_num1\n  apply le_trans _ four_zero_nine_six_lt_exp_sixteen.le\n  exact mod_cast hN'\n\n"}
{"name":"Behrend.lower_bound_le_one","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\nhN : LE.le 1 N\nhN' : LE.le N 4096\n⊢ LE.le (HMul.hMul (↑N) (Real.exp (HMul.hMul (-4) (Real.log ↑N).sqrt))) 1","decl":"theorem lower_bound_le_one (hN : 1 ≤ N) (hN' : N ≤ 4096) :\n    (N : ℝ) * exp (-4 * √(log N)) ≤ 1 := by\n  obtain rfl | hN := hN.eq_or_lt\n  · norm_num\n  · exact lower_bound_le_one' hN hN'\n\n"}
{"name":"Behrend.roth_lower_bound","module":"Mathlib.Combinatorics.Additive.AP.Three.Behrend","initialProofState":"N : Nat\n⊢ LE.le (HMul.hMul (↑N) (Real.exp (HMul.hMul (-4) (Real.log ↑N).sqrt))) ↑(rothNumberNat N)","decl":"theorem roth_lower_bound : (N : ℝ) * exp (-4 * √(log N)) ≤ rothNumberNat N := by\n  obtain rfl | hN := Nat.eq_zero_or_pos N\n  · norm_num\n  obtain h₁ | h₁ := le_or_lt 4096 N\n  · exact (roth_lower_bound_explicit h₁).le\n  · apply (lower_bound_le_one hN h₁.le).trans\n    simpa using rothNumberNat.monotone hN\n\n"}
