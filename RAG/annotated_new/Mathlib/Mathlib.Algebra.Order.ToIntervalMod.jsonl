{"name":"sub_toIcoDiv_zsmul_mem_Ico","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Membership.mem (Set.Ico a (HAdd.hAdd a p)) (HSub.hSub b (HSMul.hSMul (toIcoDiv hp a b) p))","decl":"theorem sub_toIcoDiv_zsmul_mem_Ico (a b : α) : b - toIcoDiv hp a b • p ∈ Set.Ico a (a + p) :=\n  (existsUnique_sub_zsmul_mem_Ico hp b a).choose_spec.1\n\n"}
{"name":"toIcoDiv_eq_of_sub_zsmul_mem_Ico","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nn : Int\nh : Membership.mem (Set.Ico a (HAdd.hAdd a p)) (HSub.hSub b (HSMul.hSMul n p))\n⊢ Eq (toIcoDiv hp a b) n","decl":"theorem toIcoDiv_eq_of_sub_zsmul_mem_Ico (h : b - n • p ∈ Set.Ico a (a + p)) :\n    toIcoDiv hp a b = n :=\n  ((existsUnique_sub_zsmul_mem_Ico hp b a).choose_spec.2 _ h).symm\n\n"}
{"name":"sub_toIocDiv_zsmul_mem_Ioc","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Membership.mem (Set.Ioc a (HAdd.hAdd a p)) (HSub.hSub b (HSMul.hSMul (toIocDiv hp a b) p))","decl":"theorem sub_toIocDiv_zsmul_mem_Ioc (a b : α) : b - toIocDiv hp a b • p ∈ Set.Ioc a (a + p) :=\n  (existsUnique_sub_zsmul_mem_Ioc hp b a).choose_spec.1\n\n"}
{"name":"toIocDiv_eq_of_sub_zsmul_mem_Ioc","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nn : Int\nh : Membership.mem (Set.Ioc a (HAdd.hAdd a p)) (HSub.hSub b (HSMul.hSMul n p))\n⊢ Eq (toIocDiv hp a b) n","decl":"theorem toIocDiv_eq_of_sub_zsmul_mem_Ioc (h : b - n • p ∈ Set.Ioc a (a + p)) :\n    toIocDiv hp a b = n :=\n  ((existsUnique_sub_zsmul_mem_Ioc hp b a).choose_spec.2 _ h).symm\n\n"}
{"name":"toIcoMod_mem_Ico","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Membership.mem (Set.Ico a (HAdd.hAdd a p)) (toIcoMod hp a b)","decl":"theorem toIcoMod_mem_Ico (a b : α) : toIcoMod hp a b ∈ Set.Ico a (a + p) :=\n  sub_toIcoDiv_zsmul_mem_Ico hp a b\n\n"}
{"name":"toIcoMod_mem_Ico'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\nb : α\n⊢ Membership.mem (Set.Ico 0 p) (toIcoMod hp 0 b)","decl":"theorem toIcoMod_mem_Ico' (b : α) : toIcoMod hp 0 b ∈ Set.Ico 0 p := by\n  convert toIcoMod_mem_Ico hp 0 b\n  exact (zero_add p).symm\n\n"}
{"name":"toIocMod_mem_Ioc","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Membership.mem (Set.Ioc a (HAdd.hAdd a p)) (toIocMod hp a b)","decl":"theorem toIocMod_mem_Ioc (a b : α) : toIocMod hp a b ∈ Set.Ioc a (a + p) :=\n  sub_toIocDiv_zsmul_mem_Ioc hp a b\n\n"}
{"name":"left_le_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ LE.le a (toIcoMod hp a b)","decl":"theorem left_le_toIcoMod (a b : α) : a ≤ toIcoMod hp a b :=\n  (Set.mem_Ico.1 (toIcoMod_mem_Ico hp a b)).1\n\n"}
{"name":"left_lt_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ LT.lt a (toIocMod hp a b)","decl":"theorem left_lt_toIocMod (a b : α) : a < toIocMod hp a b :=\n  (Set.mem_Ioc.1 (toIocMod_mem_Ioc hp a b)).1\n\n"}
{"name":"toIcoMod_lt_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ LT.lt (toIcoMod hp a b) (HAdd.hAdd a p)","decl":"theorem toIcoMod_lt_right (a b : α) : toIcoMod hp a b < a + p :=\n  (Set.mem_Ico.1 (toIcoMod_mem_Ico hp a b)).2\n\n"}
{"name":"toIocMod_le_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ LE.le (toIocMod hp a b) (HAdd.hAdd a p)","decl":"theorem toIocMod_le_right (a b : α) : toIocMod hp a b ≤ a + p :=\n  (Set.mem_Ioc.1 (toIocMod_mem_Ioc hp a b)).2\n\n"}
{"name":"self_sub_toIcoDiv_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub b (HSMul.hSMul (toIcoDiv hp a b) p)) (toIcoMod hp a b)","decl":"@[simp]\ntheorem self_sub_toIcoDiv_zsmul (a b : α) : b - toIcoDiv hp a b • p = toIcoMod hp a b :=\n  rfl\n\n"}
{"name":"self_sub_toIocDiv_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub b (HSMul.hSMul (toIocDiv hp a b) p)) (toIocMod hp a b)","decl":"@[simp]\ntheorem self_sub_toIocDiv_zsmul (a b : α) : b - toIocDiv hp a b • p = toIocMod hp a b :=\n  rfl\n\n"}
{"name":"toIcoDiv_zsmul_sub_self","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub (HSMul.hSMul (toIcoDiv hp a b) p) b) (Neg.neg (toIcoMod hp a b))","decl":"@[simp]\ntheorem toIcoDiv_zsmul_sub_self (a b : α) : toIcoDiv hp a b • p - b = -toIcoMod hp a b := by\n  rw [toIcoMod, neg_sub]\n\n"}
{"name":"toIocDiv_zsmul_sub_self","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub (HSMul.hSMul (toIocDiv hp a b) p) b) (Neg.neg (toIocMod hp a b))","decl":"@[simp]\ntheorem toIocDiv_zsmul_sub_self (a b : α) : toIocDiv hp a b • p - b = -toIocMod hp a b := by\n  rw [toIocMod, neg_sub]\n\n"}
{"name":"toIcoMod_sub_self","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub (toIcoMod hp a b) b) (HSMul.hSMul (Neg.neg (toIcoDiv hp a b)) p)","decl":"@[simp]\ntheorem toIcoMod_sub_self (a b : α) : toIcoMod hp a b - b = -toIcoDiv hp a b • p := by\n  rw [toIcoMod, sub_sub_cancel_left, neg_smul]\n\n"}
{"name":"toIocMod_sub_self","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub (toIocMod hp a b) b) (HSMul.hSMul (Neg.neg (toIocDiv hp a b)) p)","decl":"@[simp]\ntheorem toIocMod_sub_self (a b : α) : toIocMod hp a b - b = -toIocDiv hp a b • p := by\n  rw [toIocMod, sub_sub_cancel_left, neg_smul]\n\n"}
{"name":"self_sub_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub b (toIcoMod hp a b)) (HSMul.hSMul (toIcoDiv hp a b) p)","decl":"@[simp]\ntheorem self_sub_toIcoMod (a b : α) : b - toIcoMod hp a b = toIcoDiv hp a b • p := by\n  rw [toIcoMod, sub_sub_cancel]\n\n"}
{"name":"self_sub_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HSub.hSub b (toIocMod hp a b)) (HSMul.hSMul (toIocDiv hp a b) p)","decl":"@[simp]\ntheorem self_sub_toIocMod (a b : α) : b - toIocMod hp a b = toIocDiv hp a b • p := by\n  rw [toIocMod, sub_sub_cancel]\n\n"}
{"name":"toIcoMod_add_toIcoDiv_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HAdd.hAdd (toIcoMod hp a b) (HSMul.hSMul (toIcoDiv hp a b) p)) b","decl":"@[simp]\ntheorem toIcoMod_add_toIcoDiv_zsmul (a b : α) : toIcoMod hp a b + toIcoDiv hp a b • p = b := by\n  rw [toIcoMod, sub_add_cancel]\n\n"}
{"name":"toIocMod_add_toIocDiv_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HAdd.hAdd (toIocMod hp a b) (HSMul.hSMul (toIocDiv hp a b) p)) b","decl":"@[simp]\ntheorem toIocMod_add_toIocDiv_zsmul (a b : α) : toIocMod hp a b + toIocDiv hp a b • p = b := by\n  rw [toIocMod, sub_add_cancel]\n\n"}
{"name":"toIcoDiv_zsmul_sub_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HAdd.hAdd (HSMul.hSMul (toIcoDiv hp a b) p) (toIcoMod hp a b)) b","decl":"@[simp]\ntheorem toIcoDiv_zsmul_sub_toIcoMod (a b : α) : toIcoDiv hp a b • p + toIcoMod hp a b = b := by\n  rw [add_comm, toIcoMod_add_toIcoDiv_zsmul]\n\n"}
{"name":"toIocDiv_zsmul_sub_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HAdd.hAdd (HSMul.hSMul (toIocDiv hp a b) p) (toIocMod hp a b)) b","decl":"@[simp]\ntheorem toIocDiv_zsmul_sub_toIocMod (a b : α) : toIocDiv hp a b • p + toIocMod hp a b = b := by\n  rw [add_comm, toIocMod_add_toIocDiv_zsmul]\n\n"}
{"name":"toIcoMod_eq_iff","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Iff (Eq (toIcoMod hp a b) c) (And (Membership.mem (Set.Ico a (HAdd.hAdd a p)) c) (Exists fun z => Eq b (HAdd.hAdd c (HSMul.hSMul z p))))","decl":"theorem toIcoMod_eq_iff : toIcoMod hp a b = c ↔ c ∈ Set.Ico a (a + p) ∧ ∃ z : ℤ, b = c + z • p := by\n  refine\n    ⟨fun h =>\n      ⟨h ▸ toIcoMod_mem_Ico hp a b, toIcoDiv hp a b, h ▸ (toIcoMod_add_toIcoDiv_zsmul _ _ _).symm⟩,\n      ?_⟩\n  simp_rw [← @sub_eq_iff_eq_add]\n  rintro ⟨hc, n, rfl⟩\n  rw [← toIcoDiv_eq_of_sub_zsmul_mem_Ico hp hc, toIcoMod]\n\n"}
{"name":"toIocMod_eq_iff","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Iff (Eq (toIocMod hp a b) c) (And (Membership.mem (Set.Ioc a (HAdd.hAdd a p)) c) (Exists fun z => Eq b (HAdd.hAdd c (HSMul.hSMul z p))))","decl":"theorem toIocMod_eq_iff : toIocMod hp a b = c ↔ c ∈ Set.Ioc a (a + p) ∧ ∃ z : ℤ, b = c + z • p := by\n  refine\n    ⟨fun h =>\n      ⟨h ▸ toIocMod_mem_Ioc hp a b, toIocDiv hp a b, h ▸ (toIocMod_add_toIocDiv_zsmul hp _ _).symm⟩,\n      ?_⟩\n  simp_rw [← @sub_eq_iff_eq_add]\n  rintro ⟨hc, n, rfl⟩\n  rw [← toIocDiv_eq_of_sub_zsmul_mem_Ioc hp hc, toIocMod]\n\n"}
{"name":"toIcoDiv_apply_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIcoDiv hp a a) 0","decl":"@[simp]\ntheorem toIcoDiv_apply_left (a : α) : toIcoDiv hp a a = 0 :=\n  toIcoDiv_eq_of_sub_zsmul_mem_Ico hp <| by simp [hp]\n\n"}
{"name":"toIocDiv_apply_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIocDiv hp a a) (-1)","decl":"@[simp]\ntheorem toIocDiv_apply_left (a : α) : toIocDiv hp a a = -1 :=\n  toIocDiv_eq_of_sub_zsmul_mem_Ioc hp <| by simp [hp]\n\n"}
{"name":"toIcoMod_apply_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIcoMod hp a a) a","decl":"@[simp]\ntheorem toIcoMod_apply_left (a : α) : toIcoMod hp a a = a := by\n  rw [toIcoMod_eq_iff hp, Set.left_mem_Ico]\n  exact ⟨lt_add_of_pos_right _ hp, 0, by simp⟩\n\n"}
{"name":"toIocMod_apply_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIocMod hp a a) (HAdd.hAdd a p)","decl":"@[simp]\ntheorem toIocMod_apply_left (a : α) : toIocMod hp a a = a + p := by\n  rw [toIocMod_eq_iff hp, Set.right_mem_Ioc]\n  exact ⟨lt_add_of_pos_right _ hp, -1, by simp⟩\n\n"}
{"name":"toIcoDiv_apply_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIcoDiv hp a (HAdd.hAdd a p)) 1","decl":"theorem toIcoDiv_apply_right (a : α) : toIcoDiv hp a (a + p) = 1 :=\n  toIcoDiv_eq_of_sub_zsmul_mem_Ico hp <| by simp [hp]\n\n"}
{"name":"toIocDiv_apply_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIocDiv hp a (HAdd.hAdd a p)) 0","decl":"theorem toIocDiv_apply_right (a : α) : toIocDiv hp a (a + p) = 0 :=\n  toIocDiv_eq_of_sub_zsmul_mem_Ioc hp <| by simp [hp]\n\n"}
{"name":"toIcoMod_apply_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIcoMod hp a (HAdd.hAdd a p)) a","decl":"theorem toIcoMod_apply_right (a : α) : toIcoMod hp a (a + p) = a := by\n  rw [toIcoMod_eq_iff hp, Set.left_mem_Ico]\n  exact ⟨lt_add_of_pos_right _ hp, 1, by simp⟩\n\n"}
{"name":"toIocMod_apply_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (toIocMod hp a (HAdd.hAdd a p)) (HAdd.hAdd a p)","decl":"theorem toIocMod_apply_right (a : α) : toIocMod hp a (a + p) = a + p := by\n  rw [toIocMod_eq_iff hp, Set.right_mem_Ioc]\n  exact ⟨lt_add_of_pos_right _ hp, 0, by simp⟩\n\n"}
{"name":"toIcoDiv_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoDiv hp a (HAdd.hAdd b (HSMul.hSMul m p))) (HAdd.hAdd (toIcoDiv hp a b) m)","decl":"@[simp]\ntheorem toIcoDiv_add_zsmul (a b : α) (m : ℤ) : toIcoDiv hp a (b + m • p) = toIcoDiv hp a b + m :=\n  toIcoDiv_eq_of_sub_zsmul_mem_Ico hp <| by\n    simpa only [add_smul, add_sub_add_right_eq_sub] using sub_toIcoDiv_zsmul_mem_Ico hp a b\n\n"}
{"name":"toIcoDiv_add_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoDiv hp (HAdd.hAdd a (HSMul.hSMul m p)) b) (HSub.hSub (toIcoDiv hp a b) m)","decl":"@[simp]\ntheorem toIcoDiv_add_zsmul' (a b : α) (m : ℤ) :\n    toIcoDiv hp (a + m • p) b = toIcoDiv hp a b - m := by\n  refine toIcoDiv_eq_of_sub_zsmul_mem_Ico _ ?_\n  rw [sub_smul, ← sub_add, add_right_comm]\n  simpa using sub_toIcoDiv_zsmul_mem_Ico hp a b\n\n"}
{"name":"toIocDiv_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocDiv hp a (HAdd.hAdd b (HSMul.hSMul m p))) (HAdd.hAdd (toIocDiv hp a b) m)","decl":"@[simp]\ntheorem toIocDiv_add_zsmul (a b : α) (m : ℤ) : toIocDiv hp a (b + m • p) = toIocDiv hp a b + m :=\n  toIocDiv_eq_of_sub_zsmul_mem_Ioc hp <| by\n    simpa only [add_smul, add_sub_add_right_eq_sub] using sub_toIocDiv_zsmul_mem_Ioc hp a b\n\n"}
{"name":"toIocDiv_add_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocDiv hp (HAdd.hAdd a (HSMul.hSMul m p)) b) (HSub.hSub (toIocDiv hp a b) m)","decl":"@[simp]\ntheorem toIocDiv_add_zsmul' (a b : α) (m : ℤ) :\n    toIocDiv hp (a + m • p) b = toIocDiv hp a b - m := by\n  refine toIocDiv_eq_of_sub_zsmul_mem_Ioc _ ?_\n  rw [sub_smul, ← sub_add, add_right_comm]\n  simpa using sub_toIocDiv_zsmul_mem_Ioc hp a b\n\n"}
{"name":"toIcoDiv_zsmul_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoDiv hp a (HAdd.hAdd (HSMul.hSMul m p) b)) (HAdd.hAdd m (toIcoDiv hp a b))","decl":"@[simp]\ntheorem toIcoDiv_zsmul_add (a b : α) (m : ℤ) : toIcoDiv hp a (m • p + b) = m + toIcoDiv hp a b := by\n  rw [add_comm, toIcoDiv_add_zsmul, add_comm]\n\n"}
{"name":"toIocDiv_zsmul_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocDiv hp a (HAdd.hAdd (HSMul.hSMul m p) b)) (HAdd.hAdd m (toIocDiv hp a b))","decl":"@[simp]\ntheorem toIocDiv_zsmul_add (a b : α) (m : ℤ) : toIocDiv hp a (m • p + b) = m + toIocDiv hp a b := by\n  rw [add_comm, toIocDiv_add_zsmul, add_comm]\n\n"}
{"name":"toIcoDiv_sub_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoDiv hp a (HSub.hSub b (HSMul.hSMul m p))) (HSub.hSub (toIcoDiv hp a b) m)","decl":"@[simp]\ntheorem toIcoDiv_sub_zsmul (a b : α) (m : ℤ) : toIcoDiv hp a (b - m • p) = toIcoDiv hp a b - m := by\n  rw [sub_eq_add_neg, ← neg_smul, toIcoDiv_add_zsmul, sub_eq_add_neg]\n\n"}
{"name":"toIcoDiv_sub_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoDiv hp (HSub.hSub a (HSMul.hSMul m p)) b) (HAdd.hAdd (toIcoDiv hp a b) m)","decl":"@[simp]\ntheorem toIcoDiv_sub_zsmul' (a b : α) (m : ℤ) :\n    toIcoDiv hp (a - m • p) b = toIcoDiv hp a b + m := by\n  rw [sub_eq_add_neg, ← neg_smul, toIcoDiv_add_zsmul', sub_neg_eq_add]\n\n"}
{"name":"toIocDiv_sub_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocDiv hp a (HSub.hSub b (HSMul.hSMul m p))) (HSub.hSub (toIocDiv hp a b) m)","decl":"@[simp]\ntheorem toIocDiv_sub_zsmul (a b : α) (m : ℤ) : toIocDiv hp a (b - m • p) = toIocDiv hp a b - m := by\n  rw [sub_eq_add_neg, ← neg_smul, toIocDiv_add_zsmul, sub_eq_add_neg]\n\n"}
{"name":"toIocDiv_sub_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocDiv hp (HSub.hSub a (HSMul.hSMul m p)) b) (HAdd.hAdd (toIocDiv hp a b) m)","decl":"@[simp]\ntheorem toIocDiv_sub_zsmul' (a b : α) (m : ℤ) :\n    toIocDiv hp (a - m • p) b = toIocDiv hp a b + m := by\n  rw [sub_eq_add_neg, ← neg_smul, toIocDiv_add_zsmul', sub_neg_eq_add]\n\n"}
{"name":"toIcoDiv_add_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp a (HAdd.hAdd b p)) (HAdd.hAdd (toIcoDiv hp a b) 1)","decl":"@[simp]\ntheorem toIcoDiv_add_right (a b : α) : toIcoDiv hp a (b + p) = toIcoDiv hp a b + 1 := by\n  simpa only [one_zsmul] using toIcoDiv_add_zsmul hp a b 1\n\n"}
{"name":"toIcoDiv_add_right'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp (HAdd.hAdd a p) b) (HSub.hSub (toIcoDiv hp a b) 1)","decl":"@[simp]\ntheorem toIcoDiv_add_right' (a b : α) : toIcoDiv hp (a + p) b = toIcoDiv hp a b - 1 := by\n  simpa only [one_zsmul] using toIcoDiv_add_zsmul' hp a b 1\n\n"}
{"name":"toIocDiv_add_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp a (HAdd.hAdd b p)) (HAdd.hAdd (toIocDiv hp a b) 1)","decl":"@[simp]\ntheorem toIocDiv_add_right (a b : α) : toIocDiv hp a (b + p) = toIocDiv hp a b + 1 := by\n  simpa only [one_zsmul] using toIocDiv_add_zsmul hp a b 1\n\n"}
{"name":"toIocDiv_add_right'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp (HAdd.hAdd a p) b) (HSub.hSub (toIocDiv hp a b) 1)","decl":"@[simp]\ntheorem toIocDiv_add_right' (a b : α) : toIocDiv hp (a + p) b = toIocDiv hp a b - 1 := by\n  simpa only [one_zsmul] using toIocDiv_add_zsmul' hp a b 1\n\n"}
{"name":"toIcoDiv_add_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp a (HAdd.hAdd p b)) (HAdd.hAdd (toIcoDiv hp a b) 1)","decl":"@[simp]\ntheorem toIcoDiv_add_left (a b : α) : toIcoDiv hp a (p + b) = toIcoDiv hp a b + 1 := by\n  rw [add_comm, toIcoDiv_add_right]\n\n"}
{"name":"toIcoDiv_add_left'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp (HAdd.hAdd p a) b) (HSub.hSub (toIcoDiv hp a b) 1)","decl":"@[simp]\ntheorem toIcoDiv_add_left' (a b : α) : toIcoDiv hp (p + a) b = toIcoDiv hp a b - 1 := by\n  rw [add_comm, toIcoDiv_add_right']\n\n"}
{"name":"toIocDiv_add_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp a (HAdd.hAdd p b)) (HAdd.hAdd (toIocDiv hp a b) 1)","decl":"@[simp]\ntheorem toIocDiv_add_left (a b : α) : toIocDiv hp a (p + b) = toIocDiv hp a b + 1 := by\n  rw [add_comm, toIocDiv_add_right]\n\n"}
{"name":"toIocDiv_add_left'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp (HAdd.hAdd p a) b) (HSub.hSub (toIocDiv hp a b) 1)","decl":"@[simp]\ntheorem toIocDiv_add_left' (a b : α) : toIocDiv hp (p + a) b = toIocDiv hp a b - 1 := by\n  rw [add_comm, toIocDiv_add_right']\n\n"}
{"name":"toIcoDiv_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp a (HSub.hSub b p)) (HSub.hSub (toIcoDiv hp a b) 1)","decl":"@[simp]\ntheorem toIcoDiv_sub (a b : α) : toIcoDiv hp a (b - p) = toIcoDiv hp a b - 1 := by\n  simpa only [one_zsmul] using toIcoDiv_sub_zsmul hp a b 1\n\n"}
{"name":"toIcoDiv_sub'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp (HSub.hSub a p) b) (HAdd.hAdd (toIcoDiv hp a b) 1)","decl":"@[simp]\ntheorem toIcoDiv_sub' (a b : α) : toIcoDiv hp (a - p) b = toIcoDiv hp a b + 1 := by\n  simpa only [one_zsmul] using toIcoDiv_sub_zsmul' hp a b 1\n\n"}
{"name":"toIocDiv_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp a (HSub.hSub b p)) (HSub.hSub (toIocDiv hp a b) 1)","decl":"@[simp]\ntheorem toIocDiv_sub (a b : α) : toIocDiv hp a (b - p) = toIocDiv hp a b - 1 := by\n  simpa only [one_zsmul] using toIocDiv_sub_zsmul hp a b 1\n\n"}
{"name":"toIocDiv_sub'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp (HSub.hSub a p) b) (HAdd.hAdd (toIocDiv hp a b) 1)","decl":"@[simp]\ntheorem toIocDiv_sub' (a b : α) : toIocDiv hp (a - p) b = toIocDiv hp a b + 1 := by\n  simpa only [one_zsmul] using toIocDiv_sub_zsmul' hp a b 1\n\n"}
{"name":"toIcoDiv_sub_eq_toIcoDiv_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIcoDiv hp a (HSub.hSub b c)) (toIcoDiv hp (HAdd.hAdd a c) b)","decl":"theorem toIcoDiv_sub_eq_toIcoDiv_add (a b c : α) :\n    toIcoDiv hp a (b - c) = toIcoDiv hp (a + c) b := by\n  apply toIcoDiv_eq_of_sub_zsmul_mem_Ico\n  rw [← sub_right_comm, Set.sub_mem_Ico_iff_left, add_right_comm]\n  exact sub_toIcoDiv_zsmul_mem_Ico hp (a + c) b\n\n"}
{"name":"toIocDiv_sub_eq_toIocDiv_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIocDiv hp a (HSub.hSub b c)) (toIocDiv hp (HAdd.hAdd a c) b)","decl":"theorem toIocDiv_sub_eq_toIocDiv_add (a b c : α) :\n    toIocDiv hp a (b - c) = toIocDiv hp (a + c) b := by\n  apply toIocDiv_eq_of_sub_zsmul_mem_Ioc\n  rw [← sub_right_comm, Set.sub_mem_Ioc_iff_left, add_right_comm]\n  exact sub_toIocDiv_zsmul_mem_Ioc hp (a + c) b\n\n"}
{"name":"toIcoDiv_sub_eq_toIcoDiv_add'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIcoDiv hp (HSub.hSub a c) b) (toIcoDiv hp a (HAdd.hAdd b c))","decl":"theorem toIcoDiv_sub_eq_toIcoDiv_add' (a b c : α) :\n    toIcoDiv hp (a - c) b = toIcoDiv hp a (b + c) := by\n  rw [← sub_neg_eq_add, toIcoDiv_sub_eq_toIcoDiv_add, sub_eq_add_neg]\n\n"}
{"name":"toIocDiv_sub_eq_toIocDiv_add'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIocDiv hp (HSub.hSub a c) b) (toIocDiv hp a (HAdd.hAdd b c))","decl":"theorem toIocDiv_sub_eq_toIocDiv_add' (a b c : α) :\n    toIocDiv hp (a - c) b = toIocDiv hp a (b + c) := by\n  rw [← sub_neg_eq_add, toIocDiv_sub_eq_toIocDiv_add, sub_eq_add_neg]\n\n"}
{"name":"toIcoDiv_neg","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp a (Neg.neg b)) (Neg.neg (HAdd.hAdd (toIocDiv hp (Neg.neg a) b) 1))","decl":"theorem toIcoDiv_neg (a b : α) : toIcoDiv hp a (-b) = -(toIocDiv hp (-a) b + 1) := by\n  suffices toIcoDiv hp a (-b) = -toIocDiv hp (-(a + p)) b by\n    rwa [neg_add, ← sub_eq_add_neg, toIocDiv_sub_eq_toIocDiv_add', toIocDiv_add_right] at this\n  rw [← neg_eq_iff_eq_neg, eq_comm]\n  apply toIocDiv_eq_of_sub_zsmul_mem_Ioc\n  obtain ⟨hc, ho⟩ := sub_toIcoDiv_zsmul_mem_Ico hp a (-b)\n  rw [← neg_lt_neg_iff, neg_sub' (-b), neg_neg, ← neg_smul] at ho\n  rw [← neg_le_neg_iff, neg_sub' (-b), neg_neg, ← neg_smul] at hc\n  refine ⟨ho, hc.trans_eq ?_⟩\n  rw [neg_add, neg_add_cancel_right]\n\n"}
{"name":"toIcoDiv_neg'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp (Neg.neg a) b) (Neg.neg (HAdd.hAdd (toIocDiv hp a (Neg.neg b)) 1))","decl":"theorem toIcoDiv_neg' (a b : α) : toIcoDiv hp (-a) b = -(toIocDiv hp a (-b) + 1) := by\n  simpa only [neg_neg] using toIcoDiv_neg hp (-a) (-b)\n\n"}
{"name":"toIocDiv_neg","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp a (Neg.neg b)) (Neg.neg (HAdd.hAdd (toIcoDiv hp (Neg.neg a) b) 1))","decl":"theorem toIocDiv_neg (a b : α) : toIocDiv hp a (-b) = -(toIcoDiv hp (-a) b + 1) := by\n  rw [← neg_neg b, toIcoDiv_neg, neg_neg, neg_neg, neg_add', neg_neg, add_sub_cancel_right]\n\n"}
{"name":"toIocDiv_neg'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp (Neg.neg a) b) (Neg.neg (HAdd.hAdd (toIcoDiv hp a (Neg.neg b)) 1))","decl":"theorem toIocDiv_neg' (a b : α) : toIocDiv hp (-a) b = -(toIcoDiv hp a (-b) + 1) := by\n  simpa only [neg_neg] using toIocDiv_neg hp (-a) (-b)\n\n"}
{"name":"toIcoMod_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoMod hp a (HAdd.hAdd b (HSMul.hSMul m p))) (toIcoMod hp a b)","decl":"@[simp]\ntheorem toIcoMod_add_zsmul (a b : α) (m : ℤ) : toIcoMod hp a (b + m • p) = toIcoMod hp a b := by\n  rw [toIcoMod, toIcoDiv_add_zsmul, toIcoMod, add_smul]\n  abel\n\n"}
{"name":"toIcoMod_add_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoMod hp (HAdd.hAdd a (HSMul.hSMul m p)) b) (HAdd.hAdd (toIcoMod hp a b) (HSMul.hSMul m p))","decl":"@[simp]\ntheorem toIcoMod_add_zsmul' (a b : α) (m : ℤ) :\n    toIcoMod hp (a + m • p) b = toIcoMod hp a b + m • p := by\n  simp only [toIcoMod, toIcoDiv_add_zsmul', sub_smul, sub_add]\n\n"}
{"name":"toIocMod_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocMod hp a (HAdd.hAdd b (HSMul.hSMul m p))) (toIocMod hp a b)","decl":"@[simp]\ntheorem toIocMod_add_zsmul (a b : α) (m : ℤ) : toIocMod hp a (b + m • p) = toIocMod hp a b := by\n  rw [toIocMod, toIocDiv_add_zsmul, toIocMod, add_smul]\n  abel\n\n"}
{"name":"toIocMod_add_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocMod hp (HAdd.hAdd a (HSMul.hSMul m p)) b) (HAdd.hAdd (toIocMod hp a b) (HSMul.hSMul m p))","decl":"@[simp]\ntheorem toIocMod_add_zsmul' (a b : α) (m : ℤ) :\n    toIocMod hp (a + m • p) b = toIocMod hp a b + m • p := by\n  simp only [toIocMod, toIocDiv_add_zsmul', sub_smul, sub_add]\n\n"}
{"name":"toIcoMod_zsmul_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoMod hp a (HAdd.hAdd (HSMul.hSMul m p) b)) (toIcoMod hp a b)","decl":"@[simp]\ntheorem toIcoMod_zsmul_add (a b : α) (m : ℤ) : toIcoMod hp a (m • p + b) = toIcoMod hp a b := by\n  rw [add_comm, toIcoMod_add_zsmul]\n\n"}
{"name":"toIcoMod_zsmul_add'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoMod hp (HAdd.hAdd (HSMul.hSMul m p) a) b) (HAdd.hAdd (HSMul.hSMul m p) (toIcoMod hp a b))","decl":"@[simp]\ntheorem toIcoMod_zsmul_add' (a b : α) (m : ℤ) :\n    toIcoMod hp (m • p + a) b = m • p + toIcoMod hp a b := by\n  rw [add_comm, toIcoMod_add_zsmul', add_comm]\n\n"}
{"name":"toIocMod_zsmul_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocMod hp a (HAdd.hAdd (HSMul.hSMul m p) b)) (toIocMod hp a b)","decl":"@[simp]\ntheorem toIocMod_zsmul_add (a b : α) (m : ℤ) : toIocMod hp a (m • p + b) = toIocMod hp a b := by\n  rw [add_comm, toIocMod_add_zsmul]\n\n"}
{"name":"toIocMod_zsmul_add'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocMod hp (HAdd.hAdd (HSMul.hSMul m p) a) b) (HAdd.hAdd (HSMul.hSMul m p) (toIocMod hp a b))","decl":"@[simp]\ntheorem toIocMod_zsmul_add' (a b : α) (m : ℤ) :\n    toIocMod hp (m • p + a) b = m • p + toIocMod hp a b := by\n  rw [add_comm, toIocMod_add_zsmul', add_comm]\n\n"}
{"name":"toIcoMod_sub_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoMod hp a (HSub.hSub b (HSMul.hSMul m p))) (toIcoMod hp a b)","decl":"@[simp]\ntheorem toIcoMod_sub_zsmul (a b : α) (m : ℤ) : toIcoMod hp a (b - m • p) = toIcoMod hp a b := by\n  rw [sub_eq_add_neg, ← neg_smul, toIcoMod_add_zsmul]\n\n"}
{"name":"toIcoMod_sub_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIcoMod hp (HSub.hSub a (HSMul.hSMul m p)) b) (HSub.hSub (toIcoMod hp a b) (HSMul.hSMul m p))","decl":"@[simp]\ntheorem toIcoMod_sub_zsmul' (a b : α) (m : ℤ) :\n    toIcoMod hp (a - m • p) b = toIcoMod hp a b - m • p := by\n  simp_rw [sub_eq_add_neg, ← neg_smul, toIcoMod_add_zsmul']\n\n"}
{"name":"toIocMod_sub_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocMod hp a (HSub.hSub b (HSMul.hSMul m p))) (toIocMod hp a b)","decl":"@[simp]\ntheorem toIocMod_sub_zsmul (a b : α) (m : ℤ) : toIocMod hp a (b - m • p) = toIocMod hp a b := by\n  rw [sub_eq_add_neg, ← neg_smul, toIocMod_add_zsmul]\n\n"}
{"name":"toIocMod_sub_zsmul'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\nm : Int\n⊢ Eq (toIocMod hp (HSub.hSub a (HSMul.hSMul m p)) b) (HSub.hSub (toIocMod hp a b) (HSMul.hSMul m p))","decl":"@[simp]\ntheorem toIocMod_sub_zsmul' (a b : α) (m : ℤ) :\n    toIocMod hp (a - m • p) b = toIocMod hp a b - m • p := by\n  simp_rw [sub_eq_add_neg, ← neg_smul, toIocMod_add_zsmul']\n\n"}
{"name":"toIcoMod_add_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp a (HAdd.hAdd b p)) (toIcoMod hp a b)","decl":"@[simp]\ntheorem toIcoMod_add_right (a b : α) : toIcoMod hp a (b + p) = toIcoMod hp a b := by\n  simpa only [one_zsmul] using toIcoMod_add_zsmul hp a b 1\n\n"}
{"name":"toIcoMod_add_right'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp (HAdd.hAdd a p) b) (HAdd.hAdd (toIcoMod hp a b) p)","decl":"@[simp]\ntheorem toIcoMod_add_right' (a b : α) : toIcoMod hp (a + p) b = toIcoMod hp a b + p := by\n  simpa only [one_zsmul] using toIcoMod_add_zsmul' hp a b 1\n\n"}
{"name":"toIocMod_add_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp a (HAdd.hAdd b p)) (toIocMod hp a b)","decl":"@[simp]\ntheorem toIocMod_add_right (a b : α) : toIocMod hp a (b + p) = toIocMod hp a b := by\n  simpa only [one_zsmul] using toIocMod_add_zsmul hp a b 1\n\n"}
{"name":"toIocMod_add_right'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp (HAdd.hAdd a p) b) (HAdd.hAdd (toIocMod hp a b) p)","decl":"@[simp]\ntheorem toIocMod_add_right' (a b : α) : toIocMod hp (a + p) b = toIocMod hp a b + p := by\n  simpa only [one_zsmul] using toIocMod_add_zsmul' hp a b 1\n\n"}
{"name":"toIcoMod_add_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp a (HAdd.hAdd p b)) (toIcoMod hp a b)","decl":"@[simp]\ntheorem toIcoMod_add_left (a b : α) : toIcoMod hp a (p + b) = toIcoMod hp a b := by\n  rw [add_comm, toIcoMod_add_right]\n\n"}
{"name":"toIcoMod_add_left'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp (HAdd.hAdd p a) b) (HAdd.hAdd p (toIcoMod hp a b))","decl":"@[simp]\ntheorem toIcoMod_add_left' (a b : α) : toIcoMod hp (p + a) b = p + toIcoMod hp a b := by\n  rw [add_comm, toIcoMod_add_right', add_comm]\n\n"}
{"name":"toIocMod_add_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp a (HAdd.hAdd p b)) (toIocMod hp a b)","decl":"@[simp]\ntheorem toIocMod_add_left (a b : α) : toIocMod hp a (p + b) = toIocMod hp a b := by\n  rw [add_comm, toIocMod_add_right]\n\n"}
{"name":"toIocMod_add_left'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp (HAdd.hAdd p a) b) (HAdd.hAdd p (toIocMod hp a b))","decl":"@[simp]\ntheorem toIocMod_add_left' (a b : α) : toIocMod hp (p + a) b = p + toIocMod hp a b := by\n  rw [add_comm, toIocMod_add_right', add_comm]\n\n"}
{"name":"toIcoMod_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp a (HSub.hSub b p)) (toIcoMod hp a b)","decl":"@[simp]\ntheorem toIcoMod_sub (a b : α) : toIcoMod hp a (b - p) = toIcoMod hp a b := by\n  simpa only [one_zsmul] using toIcoMod_sub_zsmul hp a b 1\n\n"}
{"name":"toIcoMod_sub'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp (HSub.hSub a p) b) (HSub.hSub (toIcoMod hp a b) p)","decl":"@[simp]\ntheorem toIcoMod_sub' (a b : α) : toIcoMod hp (a - p) b = toIcoMod hp a b - p := by\n  simpa only [one_zsmul] using toIcoMod_sub_zsmul' hp a b 1\n\n"}
{"name":"toIocMod_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp a (HSub.hSub b p)) (toIocMod hp a b)","decl":"@[simp]\ntheorem toIocMod_sub (a b : α) : toIocMod hp a (b - p) = toIocMod hp a b := by\n  simpa only [one_zsmul] using toIocMod_sub_zsmul hp a b 1\n\n"}
{"name":"toIocMod_sub'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp (HSub.hSub a p) b) (HSub.hSub (toIocMod hp a b) p)","decl":"@[simp]\ntheorem toIocMod_sub' (a b : α) : toIocMod hp (a - p) b = toIocMod hp a b - p := by\n  simpa only [one_zsmul] using toIocMod_sub_zsmul' hp a b 1\n\n"}
{"name":"toIcoMod_sub_eq_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIcoMod hp a (HSub.hSub b c)) (HSub.hSub (toIcoMod hp (HAdd.hAdd a c) b) c)","decl":"theorem toIcoMod_sub_eq_sub (a b c : α) : toIcoMod hp a (b - c) = toIcoMod hp (a + c) b - c := by\n  simp_rw [toIcoMod, toIcoDiv_sub_eq_toIcoDiv_add, sub_right_comm]\n\n"}
{"name":"toIocMod_sub_eq_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIocMod hp a (HSub.hSub b c)) (HSub.hSub (toIocMod hp (HAdd.hAdd a c) b) c)","decl":"theorem toIocMod_sub_eq_sub (a b c : α) : toIocMod hp a (b - c) = toIocMod hp (a + c) b - c := by\n  simp_rw [toIocMod, toIocDiv_sub_eq_toIocDiv_add, sub_right_comm]\n\n"}
{"name":"toIcoMod_add_right_eq_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIcoMod hp a (HAdd.hAdd b c)) (HAdd.hAdd (toIcoMod hp (HSub.hSub a c) b) c)","decl":"theorem toIcoMod_add_right_eq_add (a b c : α) :\n    toIcoMod hp a (b + c) = toIcoMod hp (a - c) b + c := by\n  simp_rw [toIcoMod, toIcoDiv_sub_eq_toIcoDiv_add', sub_add_eq_add_sub]\n\n"}
{"name":"toIocMod_add_right_eq_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Eq (toIocMod hp a (HAdd.hAdd b c)) (HAdd.hAdd (toIocMod hp (HSub.hSub a c) b) c)","decl":"theorem toIocMod_add_right_eq_add (a b c : α) :\n    toIocMod hp a (b + c) = toIocMod hp (a - c) b + c := by\n  simp_rw [toIocMod, toIocDiv_sub_eq_toIocDiv_add', sub_add_eq_add_sub]\n\n"}
{"name":"toIcoMod_neg","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp a (Neg.neg b)) (HSub.hSub p (toIocMod hp (Neg.neg a) b))","decl":"theorem toIcoMod_neg (a b : α) : toIcoMod hp a (-b) = p - toIocMod hp (-a) b := by\n  simp_rw [toIcoMod, toIocMod, toIcoDiv_neg, neg_smul, add_smul]\n  abel\n\n"}
{"name":"toIcoMod_neg'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp (Neg.neg a) b) (HSub.hSub p (toIocMod hp a (Neg.neg b)))","decl":"theorem toIcoMod_neg' (a b : α) : toIcoMod hp (-a) b = p - toIocMod hp a (-b) := by\n  simpa only [neg_neg] using toIcoMod_neg hp (-a) (-b)\n\n"}
{"name":"toIocMod_neg","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp a (Neg.neg b)) (HSub.hSub p (toIcoMod hp (Neg.neg a) b))","decl":"theorem toIocMod_neg (a b : α) : toIocMod hp a (-b) = p - toIcoMod hp (-a) b := by\n  simp_rw [toIocMod, toIcoMod, toIocDiv_neg, neg_smul, add_smul]\n  abel\n\n"}
{"name":"toIocMod_neg'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp (Neg.neg a) b) (HSub.hSub p (toIcoMod hp a (Neg.neg b)))","decl":"theorem toIocMod_neg' (a b : α) : toIocMod hp (-a) b = p - toIcoMod hp a (-b) := by\n  simpa only [neg_neg] using toIocMod_neg hp (-a) (-b)\n\n"}
{"name":"toIcoMod_eq_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Iff (Eq (toIcoMod hp a b) (toIcoMod hp a c)) (Exists fun n => Eq (HSub.hSub c b) (HSMul.hSMul n p))","decl":"theorem toIcoMod_eq_toIcoMod : toIcoMod hp a b = toIcoMod hp a c ↔ ∃ n : ℤ, c - b = n • p := by\n  refine ⟨fun h => ⟨toIcoDiv hp a c - toIcoDiv hp a b, ?_⟩, fun h => ?_⟩\n  · conv_lhs => rw [← toIcoMod_add_toIcoDiv_zsmul hp a b, ← toIcoMod_add_toIcoDiv_zsmul hp a c]\n    rw [h, sub_smul]\n    abel\n  · rcases h with ⟨z, hz⟩\n    rw [sub_eq_iff_eq_add] at hz\n    rw [hz, toIcoMod_zsmul_add]\n\n"}
{"name":"toIocMod_eq_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Iff (Eq (toIocMod hp a b) (toIocMod hp a c)) (Exists fun n => Eq (HSub.hSub c b) (HSMul.hSMul n p))","decl":"theorem toIocMod_eq_toIocMod : toIocMod hp a b = toIocMod hp a c ↔ ∃ n : ℤ, c - b = n • p := by\n  refine ⟨fun h => ⟨toIocDiv hp a c - toIocDiv hp a b, ?_⟩, fun h => ?_⟩\n  · conv_lhs => rw [← toIocMod_add_toIocDiv_zsmul hp a b, ← toIocMod_add_toIocDiv_zsmul hp a c]\n    rw [h, sub_smul]\n    abel\n  · rcases h with ⟨z, hz⟩\n    rw [sub_eq_iff_eq_add] at hz\n    rw [hz, toIocMod_zsmul_add]\n\n"}
{"name":"AddCommGroup.modEq_iff_toIcoMod_eq_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (AddCommGroup.ModEq p a b) (Eq (toIcoMod hp a b) a)","decl":"theorem modEq_iff_toIcoMod_eq_left : a ≡ b [PMOD p] ↔ toIcoMod hp a b = a :=\n  modEq_iff_eq_add_zsmul.trans\n    ⟨by\n      rintro ⟨n, rfl⟩\n      rw [toIcoMod_add_zsmul, toIcoMod_apply_left], fun h => ⟨toIcoDiv hp a b, eq_add_of_sub_eq h⟩⟩\n\n"}
{"name":"AddCommGroup.modEq_iff_toIocMod_eq_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (AddCommGroup.ModEq p a b) (Eq (toIocMod hp a b) (HAdd.hAdd a p))","decl":"theorem modEq_iff_toIocMod_eq_right : a ≡ b [PMOD p] ↔ toIocMod hp a b = a + p := by\n  refine modEq_iff_eq_add_zsmul.trans ⟨?_, fun h => ⟨toIocDiv hp a b + 1, ?_⟩⟩\n  · rintro ⟨z, rfl⟩\n    rw [toIocMod_add_zsmul, toIocMod_apply_left]\n  · rwa [add_one_zsmul, add_left_comm, ← sub_eq_iff_eq_add']\n\n"}
{"name":"AddCommGroup.ModEq.toIcoMod_eq_left","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\na✝ : AddCommGroup.ModEq p a b\n⊢ Eq (toIcoMod hp a b) a","decl":"alias ⟨ModEq.toIcoMod_eq_left, _⟩ := modEq_iff_toIcoMod_eq_left\n\n"}
{"name":"AddCommGroup.ModEq.toIcoMod_eq_right","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\na✝ : AddCommGroup.ModEq p a b\n⊢ Eq (toIocMod hp a b) (HAdd.hAdd a p)","decl":"alias ⟨ModEq.toIcoMod_eq_right, _⟩ := modEq_iff_toIocMod_eq_right\n\n"}
{"name":"AddCommGroup.tfae_modEq","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ (List.cons (AddCommGroup.ModEq p a b) (List.cons (∀ (z : Int), Not (Membership.mem (Set.Ioo a (HAdd.hAdd a p)) (HSub.hSub b (HSMul.hSMul z p)))) (List.cons (Ne (toIcoMod hp a b) (toIocMod hp a b)) (List.cons (Eq (HAdd.hAdd (toIcoMod hp a b) p) (toIocMod hp a b)) List.nil)))).TFAE","decl":"open List in\ntheorem tfae_modEq :\n    TFAE\n      [a ≡ b [PMOD p], ∀ z : ℤ, b - z • p ∉ Set.Ioo a (a + p), toIcoMod hp a b ≠ toIocMod hp a b,\n        toIcoMod hp a b + p = toIocMod hp a b] := by\n  rw [modEq_iff_toIcoMod_eq_left hp]\n  tfae_have 3 → 2 := by\n    rw [← not_exists, not_imp_not]\n    exact fun ⟨i, hi⟩ =>\n      ((toIcoMod_eq_iff hp).2 ⟨Set.Ioo_subset_Ico_self hi, i, (sub_add_cancel b _).symm⟩).trans\n        ((toIocMod_eq_iff hp).2 ⟨Set.Ioo_subset_Ioc_self hi, i, (sub_add_cancel b _).symm⟩).symm\n  tfae_have 4 → 3\n  | h => by\n    rw [← h, Ne, eq_comm, add_right_eq_self]\n    exact hp.ne'\n  tfae_have 1 → 4\n  | h => by\n    rw [h, eq_comm, toIocMod_eq_iff, Set.right_mem_Ioc]\n    refine ⟨lt_add_of_pos_right a hp, toIcoDiv hp a b - 1, ?_⟩\n    rw [sub_one_zsmul, add_add_add_comm, add_neg_cancel, add_zero]\n    conv_lhs => rw [← toIcoMod_add_toIcoDiv_zsmul hp a b, h]\n  tfae_have 2 → 1 := by\n    rw [← not_exists, not_imp_comm]\n    have h' := toIcoMod_mem_Ico hp a b\n    exact fun h => ⟨_, h'.1.lt_of_ne' h, h'.2⟩\n  tfae_finish\n\n"}
{"name":"AddCommGroup.modEq_iff_not_forall_mem_Ioo_mod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (AddCommGroup.ModEq p a b) (∀ (z : Int), Not (Membership.mem (Set.Ioo a (HAdd.hAdd a p)) (HSub.hSub b (HSMul.hSMul z p))))","decl":"theorem modEq_iff_not_forall_mem_Ioo_mod :\n    a ≡ b [PMOD p] ↔ ∀ z : ℤ, b - z • p ∉ Set.Ioo a (a + p) :=\n  (tfae_modEq hp a b).out 0 1\n\n"}
{"name":"AddCommGroup.modEq_iff_toIcoMod_ne_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (AddCommGroup.ModEq p a b) (Ne (toIcoMod hp a b) (toIocMod hp a b))","decl":"theorem modEq_iff_toIcoMod_ne_toIocMod : a ≡ b [PMOD p] ↔ toIcoMod hp a b ≠ toIocMod hp a b :=\n  (tfae_modEq hp a b).out 0 2\n\n"}
{"name":"AddCommGroup.modEq_iff_toIcoMod_add_period_eq_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (AddCommGroup.ModEq p a b) (Eq (HAdd.hAdd (toIcoMod hp a b) p) (toIocMod hp a b))","decl":"theorem modEq_iff_toIcoMod_add_period_eq_toIocMod :\n    a ≡ b [PMOD p] ↔ toIcoMod hp a b + p = toIocMod hp a b :=\n  (tfae_modEq hp a b).out 0 3\n\n"}
{"name":"AddCommGroup.not_modEq_iff_toIcoMod_eq_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (Not (AddCommGroup.ModEq p a b)) (Eq (toIcoMod hp a b) (toIocMod hp a b))","decl":"theorem not_modEq_iff_toIcoMod_eq_toIocMod : ¬a ≡ b [PMOD p] ↔ toIcoMod hp a b = toIocMod hp a b :=\n  (modEq_iff_toIcoMod_ne_toIocMod _).not_left\n\n"}
{"name":"AddCommGroup.not_modEq_iff_toIcoDiv_eq_toIocDiv","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (Not (AddCommGroup.ModEq p a b)) (Eq (toIcoDiv hp a b) (toIocDiv hp a b))","decl":"theorem not_modEq_iff_toIcoDiv_eq_toIocDiv :\n    ¬a ≡ b [PMOD p] ↔ toIcoDiv hp a b = toIocDiv hp a b := by\n  rw [not_modEq_iff_toIcoMod_eq_toIocMod hp, toIcoMod, toIocMod, sub_right_inj,\n    zsmul_left_inj hp]\n\n"}
{"name":"AddCommGroup.modEq_iff_toIcoDiv_eq_toIocDiv_add_one","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (AddCommGroup.ModEq p a b) (Eq (toIcoDiv hp a b) (HAdd.hAdd (toIocDiv hp a b) 1))","decl":"theorem modEq_iff_toIcoDiv_eq_toIocDiv_add_one :\n    a ≡ b [PMOD p] ↔ toIcoDiv hp a b = toIocDiv hp a b + 1 := by\n  rw [modEq_iff_toIcoMod_add_period_eq_toIocMod hp, toIcoMod, toIocMod, ← eq_sub_iff_add_eq,\n    sub_sub, sub_right_inj, ← add_one_zsmul, zsmul_left_inj hp]\n\n"}
{"name":"toIcoMod_inj","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\n⊢ Iff (Eq (toIcoMod hp c a) (toIcoMod hp c b)) (AddCommGroup.ModEq p a b)","decl":"/-- If `a` and `b` fall within the same cycle WRT `c`, then they are congruent modulo `p`. -/\n@[simp]\ntheorem toIcoMod_inj {c : α} : toIcoMod hp c a = toIcoMod hp c b ↔ a ≡ b [PMOD p] := by\n  simp_rw [toIcoMod_eq_toIcoMod, modEq_iff_eq_add_zsmul, sub_eq_iff_eq_add']\n\n"}
{"name":"AddCommGroup.ModEq.toIcoMod_eq_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b c : α\na✝ : AddCommGroup.ModEq p a b\n⊢ Eq (toIcoMod hp c a) (toIcoMod hp c b)","decl":"alias ⟨_, AddCommGroup.ModEq.toIcoMod_eq_toIcoMod⟩ := toIcoMod_inj\n\n"}
{"name":"Ico_eq_locus_Ioc_eq_iUnion_Ioo","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (setOf fun b => Eq (toIcoMod hp a b) (toIocMod hp a b)) (Set.iUnion fun z => Set.Ioo (HAdd.hAdd a (HSMul.hSMul z p)) (HAdd.hAdd (HAdd.hAdd a p) (HSMul.hSMul z p)))","decl":"theorem Ico_eq_locus_Ioc_eq_iUnion_Ioo :\n    { b | toIcoMod hp a b = toIocMod hp a b } = ⋃ z : ℤ, Set.Ioo (a + z • p) (a + p + z • p) := by\n  ext1\n  simp_rw [Set.mem_setOf, Set.mem_iUnion, ← Set.sub_mem_Ioo_iff_left, ←\n    not_modEq_iff_toIcoMod_eq_toIocMod, modEq_iff_not_forall_mem_Ioo_mod hp, not_forall,\n    Classical.not_not]\n\n"}
{"name":"toIocDiv_wcovBy_toIcoDiv","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ WCovBy (toIocDiv hp a b) (toIcoDiv hp a b)","decl":"theorem toIocDiv_wcovBy_toIcoDiv (a b : α) : toIocDiv hp a b ⩿ toIcoDiv hp a b := by\n  suffices toIocDiv hp a b = toIcoDiv hp a b ∨ toIocDiv hp a b + 1 = toIcoDiv hp a b by\n    rwa [wcovBy_iff_eq_or_covBy, ← Order.succ_eq_iff_covBy]\n  rw [eq_comm, ← not_modEq_iff_toIcoDiv_eq_toIocDiv, eq_comm, ←\n    modEq_iff_toIcoDiv_eq_toIocDiv_add_one]\n  exact em' _\n\n"}
{"name":"toIcoMod_le_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ LE.le (toIcoMod hp a b) (toIocMod hp a b)","decl":"theorem toIcoMod_le_toIocMod (a b : α) : toIcoMod hp a b ≤ toIocMod hp a b := by\n  rw [toIcoMod, toIocMod, sub_le_sub_iff_left]\n  exact zsmul_left_mono hp.le (toIocDiv_wcovBy_toIcoDiv _ _ _).le\n\n"}
{"name":"toIocMod_le_toIcoMod_add","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ LE.le (toIocMod hp a b) (HAdd.hAdd (toIcoMod hp a b) p)","decl":"theorem toIocMod_le_toIcoMod_add (a b : α) : toIocMod hp a b ≤ toIcoMod hp a b + p := by\n  rw [toIcoMod, toIocMod, sub_add, sub_le_sub_iff_left, sub_le_iff_le_add, ← add_one_zsmul,\n    (zsmul_left_strictMono hp).le_iff_le]\n  apply (toIocDiv_wcovBy_toIcoDiv _ _ _).le_succ\n\n"}
{"name":"toIcoMod_eq_self","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (Eq (toIcoMod hp a b) b) (Membership.mem (Set.Ico a (HAdd.hAdd a p)) b)","decl":"theorem toIcoMod_eq_self : toIcoMod hp a b = b ↔ b ∈ Set.Ico a (a + p) := by\n  rw [toIcoMod_eq_iff, and_iff_left]\n  exact ⟨0, by simp⟩\n\n"}
{"name":"toIocMod_eq_self","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Iff (Eq (toIocMod hp a b) b) (Membership.mem (Set.Ioc a (HAdd.hAdd a p)) b)","decl":"theorem toIocMod_eq_self : toIocMod hp a b = b ↔ b ∈ Set.Ioc a (a + p) := by\n  rw [toIocMod_eq_iff, and_iff_left]\n  exact ⟨0, by simp⟩\n\n"}
{"name":"toIcoMod_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na₁ a₂ b : α\n⊢ Eq (toIcoMod hp a₁ (toIcoMod hp a₂ b)) (toIcoMod hp a₁ b)","decl":"@[simp]\ntheorem toIcoMod_toIcoMod (a₁ a₂ b : α) : toIcoMod hp a₁ (toIcoMod hp a₂ b) = toIcoMod hp a₁ b :=\n  (toIcoMod_eq_toIcoMod _).2 ⟨toIcoDiv hp a₂ b, self_sub_toIcoMod hp a₂ b⟩\n\n"}
{"name":"toIcoMod_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na₁ a₂ b : α\n⊢ Eq (toIcoMod hp a₁ (toIocMod hp a₂ b)) (toIcoMod hp a₁ b)","decl":"@[simp]\ntheorem toIcoMod_toIocMod (a₁ a₂ b : α) : toIcoMod hp a₁ (toIocMod hp a₂ b) = toIcoMod hp a₁ b :=\n  (toIcoMod_eq_toIcoMod _).2 ⟨toIocDiv hp a₂ b, self_sub_toIocMod hp a₂ b⟩\n\n"}
{"name":"toIocMod_toIocMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na₁ a₂ b : α\n⊢ Eq (toIocMod hp a₁ (toIocMod hp a₂ b)) (toIocMod hp a₁ b)","decl":"@[simp]\ntheorem toIocMod_toIocMod (a₁ a₂ b : α) : toIocMod hp a₁ (toIocMod hp a₂ b) = toIocMod hp a₁ b :=\n  (toIocMod_eq_toIocMod _).2 ⟨toIocDiv hp a₂ b, self_sub_toIocMod hp a₂ b⟩\n\n"}
{"name":"toIocMod_toIcoMod","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na₁ a₂ b : α\n⊢ Eq (toIocMod hp a₁ (toIcoMod hp a₂ b)) (toIocMod hp a₁ b)","decl":"@[simp]\ntheorem toIocMod_toIcoMod (a₁ a₂ b : α) : toIocMod hp a₁ (toIcoMod hp a₂ b) = toIocMod hp a₁ b :=\n  (toIocMod_eq_toIocMod _).2 ⟨toIcoDiv hp a₂ b, self_sub_toIcoMod hp a₂ b⟩\n\n"}
{"name":"toIcoMod_periodic","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Function.Periodic (toIcoMod hp a) p","decl":"theorem toIcoMod_periodic (a : α) : Function.Periodic (toIcoMod hp a) p :=\n  toIcoMod_add_right hp a\n\n"}
{"name":"toIocMod_periodic","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Function.Periodic (toIocMod hp a) p","decl":"theorem toIocMod_periodic (a : α) : Function.Periodic (toIocMod hp a) p :=\n  toIocMod_add_right hp a\n\n-- helper lemmas for when `a = 0`\n"}
{"name":"toIcoMod_zero_sub_comm","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp 0 (HSub.hSub a b)) (HSub.hSub p (toIocMod hp 0 (HSub.hSub b a)))","decl":"theorem toIcoMod_zero_sub_comm (a b : α) : toIcoMod hp 0 (a - b) = p - toIocMod hp 0 (b - a) := by\n  rw [← neg_sub, toIcoMod_neg, neg_zero]\n\n"}
{"name":"toIocMod_zero_sub_comm","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp 0 (HSub.hSub a b)) (HSub.hSub p (toIcoMod hp 0 (HSub.hSub b a)))","decl":"theorem toIocMod_zero_sub_comm (a b : α) : toIocMod hp 0 (a - b) = p - toIcoMod hp 0 (b - a) := by\n  rw [← neg_sub, toIocMod_neg, neg_zero]\n\n"}
{"name":"toIcoDiv_eq_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp a b) (toIcoDiv hp 0 (HSub.hSub b a))","decl":"theorem toIcoDiv_eq_sub (a b : α) : toIcoDiv hp a b = toIcoDiv hp 0 (b - a) := by\n  rw [toIcoDiv_sub_eq_toIcoDiv_add, zero_add]\n\n"}
{"name":"toIocDiv_eq_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp a b) (toIocDiv hp 0 (HSub.hSub b a))","decl":"theorem toIocDiv_eq_sub (a b : α) : toIocDiv hp a b = toIocDiv hp 0 (b - a) := by\n  rw [toIocDiv_sub_eq_toIocDiv_add, zero_add]\n\n"}
{"name":"toIcoMod_eq_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp a b) (HAdd.hAdd (toIcoMod hp 0 (HSub.hSub b a)) a)","decl":"theorem toIcoMod_eq_sub (a b : α) : toIcoMod hp a b = toIcoMod hp 0 (b - a) + a := by\n  rw [toIcoMod_sub_eq_sub, zero_add, sub_add_cancel]\n\n"}
{"name":"toIocMod_eq_sub","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp a b) (HAdd.hAdd (toIocMod hp 0 (HSub.hSub b a)) a)","decl":"theorem toIocMod_eq_sub (a b : α) : toIocMod hp a b = toIocMod hp 0 (b - a) + a := by\n  rw [toIocMod_sub_eq_sub, zero_add, sub_add_cancel]\n\n"}
{"name":"toIcoMod_add_toIocMod_zero","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HAdd.hAdd (toIcoMod hp 0 (HSub.hSub a b)) (toIocMod hp 0 (HSub.hSub b a))) p","decl":"theorem toIcoMod_add_toIocMod_zero (a b : α) :\n    toIcoMod hp 0 (a - b) + toIocMod hp 0 (b - a) = p := by\n  rw [toIcoMod_zero_sub_comm, sub_add_cancel]\n\n"}
{"name":"toIocMod_add_toIcoMod_zero","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (HAdd.hAdd (toIocMod hp 0 (HSub.hSub a b)) (toIcoMod hp 0 (HSub.hSub b a))) p","decl":"theorem toIocMod_add_toIcoMod_zero (a b : α) :\n    toIocMod hp 0 (a - b) + toIcoMod hp 0 (b - a) = p := by\n  rw [_root_.add_comm, toIcoMod_add_toIocMod_zero]\n\n"}
{"name":"QuotientAddGroup.equivIcoMod_symm_apply","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\nx : ↑(Set.Ico a (HAdd.hAdd a p))\n⊢ Eq ((QuotientAddGroup.equivIcoMod hp a).symm x) ↑↑x","decl":"/-- `toIcoMod` as an equiv from the quotient. -/\n@[simps symm_apply]\ndef QuotientAddGroup.equivIcoMod (a : α) : α ⧸ AddSubgroup.zmultiples p ≃ Set.Ico a (a + p) where\n  toFun b :=\n    ⟨(toIcoMod_periodic hp a).lift b, QuotientAddGroup.induction_on b <| toIcoMod_mem_Ico hp a⟩\n  invFun := (↑)\n  right_inv b := Subtype.ext <| (toIcoMod_eq_self hp).mpr b.prop\n  left_inv b := by\n    induction b using QuotientAddGroup.induction_on\n    dsimp\n    rw [QuotientAddGroup.eq_iff_sub_mem, toIcoMod_sub_self]\n    apply AddSubgroup.zsmul_mem_zmultiples\n\n"}
{"name":"QuotientAddGroup.equivIcoMod_coe","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq ((QuotientAddGroup.equivIcoMod hp a) ↑b) ⟨toIcoMod hp a b, ⋯⟩","decl":"@[simp]\ntheorem QuotientAddGroup.equivIcoMod_coe (a b : α) :\n    QuotientAddGroup.equivIcoMod hp a ↑b = ⟨toIcoMod hp a b, toIcoMod_mem_Ico hp a _⟩ :=\n  rfl\n\n"}
{"name":"QuotientAddGroup.equivIcoMod_zero","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq ((QuotientAddGroup.equivIcoMod hp a) 0) ⟨toIcoMod hp a 0, ⋯⟩","decl":"@[simp]\ntheorem QuotientAddGroup.equivIcoMod_zero (a : α) :\n    QuotientAddGroup.equivIcoMod hp a 0 = ⟨toIcoMod hp a 0, toIcoMod_mem_Ico hp a _⟩ :=\n  rfl\n\n"}
{"name":"QuotientAddGroup.equivIocMod_symm_apply","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\nx : ↑(Set.Ioc a (HAdd.hAdd a p))\n⊢ Eq ((QuotientAddGroup.equivIocMod hp a).symm x) ↑↑x","decl":"/-- `toIocMod` as an equiv from the quotient. -/\n@[simps symm_apply]\ndef QuotientAddGroup.equivIocMod (a : α) : α ⧸ AddSubgroup.zmultiples p ≃ Set.Ioc a (a + p) where\n  toFun b :=\n    ⟨(toIocMod_periodic hp a).lift b, QuotientAddGroup.induction_on b <| toIocMod_mem_Ioc hp a⟩\n  invFun := (↑)\n  right_inv b := Subtype.ext <| (toIocMod_eq_self hp).mpr b.prop\n  left_inv b := by\n    induction b using QuotientAddGroup.induction_on\n    dsimp\n    rw [QuotientAddGroup.eq_iff_sub_mem, toIocMod_sub_self]\n    apply AddSubgroup.zsmul_mem_zmultiples\n\n"}
{"name":"QuotientAddGroup.equivIocMod_coe","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq ((QuotientAddGroup.equivIocMod hp a) ↑b) ⟨toIocMod hp a b, ⋯⟩","decl":"@[simp]\ntheorem QuotientAddGroup.equivIocMod_coe (a b : α) :\n    QuotientAddGroup.equivIocMod hp a ↑b = ⟨toIocMod hp a b, toIocMod_mem_Ioc hp a _⟩ :=\n  rfl\n\n"}
{"name":"QuotientAddGroup.equivIocMod_zero","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq ((QuotientAddGroup.equivIocMod hp a) 0) ⟨toIocMod hp a 0, ⋯⟩","decl":"@[simp]\ntheorem QuotientAddGroup.equivIocMod_zero (a : α) :\n    QuotientAddGroup.equivIocMod hp a 0 = ⟨toIocMod hp a 0, toIocMod_mem_Ioc hp a _⟩ :=\n  rfl\n"}
{"name":"QuotientAddGroup.btw_coe_iff'","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp' : Fact (LT.lt 0 p)\nx₁ x₂ x₃ : α\n⊢ Iff (Btw.btw ↑x₁ ↑x₂ ↑x₃) (LE.le (toIcoMod ⋯ 0 (HSub.hSub x₂ x₁)) (toIocMod ⋯ 0 (HSub.hSub x₃ x₁)))","decl":"theorem btw_coe_iff' {x₁ x₂ x₃ : α} :\n    Btw.btw (x₁ : α ⧸ AddSubgroup.zmultiples p) x₂ x₃ ↔\n      toIcoMod hp'.out 0 (x₂ - x₁) ≤ toIocMod hp'.out 0 (x₃ - x₁) :=\n  Iff.rfl\n\n-- maybe harder to use than the primed one?\n"}
{"name":"QuotientAddGroup.btw_coe_iff","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝ : LinearOrderedAddCommGroup α\nhα : Archimedean α\np : α\nhp' : Fact (LT.lt 0 p)\nx₁ x₂ x₃ : α\n⊢ Iff (Btw.btw ↑x₁ ↑x₂ ↑x₃) (LE.le (toIcoMod ⋯ x₁ x₂) (toIocMod ⋯ x₁ x₃))","decl":"theorem btw_coe_iff {x₁ x₂ x₃ : α} :\n    Btw.btw (x₁ : α ⧸ AddSubgroup.zmultiples p) x₂ x₃ ↔\n      toIcoMod hp'.out x₁ x₂ ≤ toIocMod hp'.out x₁ x₃ := by\n  rw [btw_coe_iff', toIocMod_sub_eq_sub, toIcoMod_sub_eq_sub, zero_add, sub_le_sub_iff_right]\n\n"}
{"name":"toIcoDiv_eq_floor","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoDiv hp a b) (Int.floor (HDiv.hDiv (HSub.hSub b a) p))","decl":"theorem toIcoDiv_eq_floor (a b : α) : toIcoDiv hp a b = ⌊(b - a) / p⌋ := by\n  refine toIcoDiv_eq_of_sub_zsmul_mem_Ico hp ?_\n  rw [Set.mem_Ico, zsmul_eq_mul, ← sub_nonneg, add_comm, sub_right_comm, ← sub_lt_iff_lt_add,\n    sub_right_comm _ _ a]\n  exact ⟨Int.sub_floor_div_mul_nonneg _ hp, Int.sub_floor_div_mul_lt _ hp⟩\n\n"}
{"name":"toIocDiv_eq_neg_floor","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocDiv hp a b) (Neg.neg (Int.floor (HDiv.hDiv (HSub.hSub (HAdd.hAdd a p) b) p)))","decl":"theorem toIocDiv_eq_neg_floor (a b : α) : toIocDiv hp a b = -⌊(a + p - b) / p⌋ := by\n  refine toIocDiv_eq_of_sub_zsmul_mem_Ioc hp ?_\n  rw [Set.mem_Ioc, zsmul_eq_mul, Int.cast_neg, neg_mul, sub_neg_eq_add, ← sub_nonneg,\n    sub_add_eq_sub_sub]\n  refine ⟨?_, Int.sub_floor_div_mul_nonneg _ hp⟩\n  rw [← add_lt_add_iff_right p, add_assoc, add_comm b, ← sub_lt_iff_lt_add, add_comm (_ * _), ←\n    sub_lt_iff_lt_add]\n  exact Int.sub_floor_div_mul_lt _ hp\n\n"}
{"name":"toIcoDiv_zero_one","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\nb : α\n⊢ Eq (toIcoDiv ⋯ 0 b) (Int.floor b)","decl":"theorem toIcoDiv_zero_one (b : α) : toIcoDiv (zero_lt_one' α) 0 b = ⌊b⌋ := by\n  simp [toIcoDiv_eq_floor]\n\n"}
{"name":"toIcoMod_eq_add_fract_mul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIcoMod hp a b) (HAdd.hAdd a (HMul.hMul (Int.fract (HDiv.hDiv (HSub.hSub b a) p)) p))","decl":"theorem toIcoMod_eq_add_fract_mul (a b : α) :\n    toIcoMod hp a b = a + Int.fract ((b - a) / p) * p := by\n  rw [toIcoMod, toIcoDiv_eq_floor, Int.fract]\n  field_simp\n  ring\n\n"}
{"name":"toIcoMod_eq_fract_mul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\np : α\nhp : LT.lt 0 p\nb : α\n⊢ Eq (toIcoMod hp 0 b) (HMul.hMul (Int.fract (HDiv.hDiv b p)) p)","decl":"theorem toIcoMod_eq_fract_mul (b : α) : toIcoMod hp 0 b = Int.fract (b / p) * p := by\n  simp [toIcoMod_eq_add_fract_mul]\n\n"}
{"name":"toIocMod_eq_sub_fract_mul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\np : α\nhp : LT.lt 0 p\na b : α\n⊢ Eq (toIocMod hp a b) (HSub.hSub (HAdd.hAdd a p) (HMul.hMul (Int.fract (HDiv.hDiv (HSub.hSub (HAdd.hAdd a p) b) p)) p))","decl":"theorem toIocMod_eq_sub_fract_mul (a b : α) :\n    toIocMod hp a b = a + p - Int.fract ((a + p - b) / p) * p := by\n  rw [toIocMod, toIocDiv_eq_neg_floor, Int.fract]\n  field_simp\n  ring\n\n"}
{"name":"toIcoMod_zero_one","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedField α\ninst✝ : FloorRing α\nb : α\n⊢ Eq (toIcoMod ⋯ 0 b) (Int.fract b)","decl":"theorem toIcoMod_zero_one (b : α) : toIcoMod (zero_lt_one' α) 0 b = Int.fract b := by\n  simp [toIcoMod_eq_add_fract_mul]\n\n"}
{"name":"iUnion_Ioc_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedAddCommGroup α\ninst✝ : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (Set.iUnion fun n => Set.Ioc (HAdd.hAdd a (HSMul.hSMul n p)) (HAdd.hAdd a (HSMul.hSMul (HAdd.hAdd n 1) p))) Set.univ","decl":"theorem iUnion_Ioc_add_zsmul : ⋃ n : ℤ, Ioc (a + n • p) (a + (n + 1) • p) = univ := by\n  refine eq_univ_iff_forall.mpr fun b => mem_iUnion.mpr ?_\n  rcases sub_toIocDiv_zsmul_mem_Ioc hp a b with ⟨hl, hr⟩\n  refine ⟨toIocDiv hp a b, ⟨lt_sub_iff_add_lt.mp hl, ?_⟩⟩\n  rw [add_smul, one_smul, ← add_assoc]\n  convert sub_le_iff_le_add.mp hr using 1; abel\n\n"}
{"name":"iUnion_Ico_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedAddCommGroup α\ninst✝ : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (Set.iUnion fun n => Set.Ico (HAdd.hAdd a (HSMul.hSMul n p)) (HAdd.hAdd a (HSMul.hSMul (HAdd.hAdd n 1) p))) Set.univ","decl":"theorem iUnion_Ico_add_zsmul : ⋃ n : ℤ, Ico (a + n • p) (a + (n + 1) • p) = univ := by\n  refine eq_univ_iff_forall.mpr fun b => mem_iUnion.mpr ?_\n  rcases sub_toIcoDiv_zsmul_mem_Ico hp a b with ⟨hl, hr⟩\n  refine ⟨toIcoDiv hp a b, ⟨le_sub_iff_add_le.mp hl, ?_⟩⟩\n  rw [add_smul, one_smul, ← add_assoc]\n  convert sub_lt_iff_lt_add.mp hr using 1; abel\n\n"}
{"name":"iUnion_Icc_add_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedAddCommGroup α\ninst✝ : Archimedean α\np : α\nhp : LT.lt 0 p\na : α\n⊢ Eq (Set.iUnion fun n => Set.Icc (HAdd.hAdd a (HSMul.hSMul n p)) (HAdd.hAdd a (HSMul.hSMul (HAdd.hAdd n 1) p))) Set.univ","decl":"theorem iUnion_Icc_add_zsmul : ⋃ n : ℤ, Icc (a + n • p) (a + (n + 1) • p) = univ := by\n  simpa only [iUnion_Ioc_add_zsmul hp a, univ_subset_iff] using\n    iUnion_mono fun n : ℤ => (Ioc_subset_Icc_self : Ioc (a + n • p) (a + (n + 1) • p) ⊆ Icc _ _)\n\n"}
{"name":"iUnion_Ioc_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedAddCommGroup α\ninst✝ : Archimedean α\np : α\nhp : LT.lt 0 p\n⊢ Eq (Set.iUnion fun n => Set.Ioc (HSMul.hSMul n p) (HSMul.hSMul (HAdd.hAdd n 1) p)) Set.univ","decl":"theorem iUnion_Ioc_zsmul : ⋃ n : ℤ, Ioc (n • p) ((n + 1) • p) = univ := by\n  simpa only [zero_add] using iUnion_Ioc_add_zsmul hp 0\n\n"}
{"name":"iUnion_Ico_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedAddCommGroup α\ninst✝ : Archimedean α\np : α\nhp : LT.lt 0 p\n⊢ Eq (Set.iUnion fun n => Set.Ico (HSMul.hSMul n p) (HSMul.hSMul (HAdd.hAdd n 1) p)) Set.univ","decl":"theorem iUnion_Ico_zsmul : ⋃ n : ℤ, Ico (n • p) ((n + 1) • p) = univ := by\n  simpa only [zero_add] using iUnion_Ico_add_zsmul hp 0\n\n"}
{"name":"iUnion_Icc_zsmul","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedAddCommGroup α\ninst✝ : Archimedean α\np : α\nhp : LT.lt 0 p\n⊢ Eq (Set.iUnion fun n => Set.Icc (HSMul.hSMul n p) (HSMul.hSMul (HAdd.hAdd n 1) p)) Set.univ","decl":"theorem iUnion_Icc_zsmul : ⋃ n : ℤ, Icc (n • p) ((n + 1) • p) = univ := by\n  simpa only [zero_add] using iUnion_Icc_add_zsmul hp 0\n\n"}
{"name":"iUnion_Ioc_add_intCast","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedRing α\ninst✝ : Archimedean α\na : α\n⊢ Eq (Set.iUnion fun n => Set.Ioc (HAdd.hAdd a ↑n) (HAdd.hAdd (HAdd.hAdd a ↑n) 1)) Set.univ","decl":"theorem iUnion_Ioc_add_intCast : ⋃ n : ℤ, Ioc (a + n) (a + n + 1) = Set.univ := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using\n    iUnion_Ioc_add_zsmul zero_lt_one a\n\n"}
{"name":"iUnion_Ico_add_intCast","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedRing α\ninst✝ : Archimedean α\na : α\n⊢ Eq (Set.iUnion fun n => Set.Ico (HAdd.hAdd a ↑n) (HAdd.hAdd (HAdd.hAdd a ↑n) 1)) Set.univ","decl":"theorem iUnion_Ico_add_intCast : ⋃ n : ℤ, Ico (a + n) (a + n + 1) = Set.univ := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using\n    iUnion_Ico_add_zsmul zero_lt_one a\n\n"}
{"name":"iUnion_Icc_add_intCast","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedRing α\ninst✝ : Archimedean α\na : α\n⊢ Eq (Set.iUnion fun n => Set.Icc (HAdd.hAdd a ↑n) (HAdd.hAdd (HAdd.hAdd a ↑n) 1)) Set.univ","decl":"theorem iUnion_Icc_add_intCast : ⋃ n : ℤ, Icc (a + n) (a + n + 1) = Set.univ := by\n  simpa only [zsmul_one, Int.cast_add, Int.cast_one, ← add_assoc] using\n    iUnion_Icc_add_zsmul zero_lt_one a\n\n"}
{"name":"iUnion_Ioc_intCast","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedRing α\ninst✝ : Archimedean α\n⊢ Eq (Set.iUnion fun n => Set.Ioc (↑n) (HAdd.hAdd (↑n) 1)) Set.univ","decl":"theorem iUnion_Ioc_intCast : ⋃ n : ℤ, Ioc (n : α) (n + 1) = Set.univ := by\n  simpa only [zero_add] using iUnion_Ioc_add_intCast (0 : α)\n\n"}
{"name":"iUnion_Ico_intCast","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedRing α\ninst✝ : Archimedean α\n⊢ Eq (Set.iUnion fun n => Set.Ico (↑n) (HAdd.hAdd (↑n) 1)) Set.univ","decl":"theorem iUnion_Ico_intCast : ⋃ n : ℤ, Ico (n : α) (n + 1) = Set.univ := by\n  simpa only [zero_add] using iUnion_Ico_add_intCast (0 : α)\n\n"}
{"name":"iUnion_Icc_intCast","module":"Mathlib.Algebra.Order.ToIntervalMod","initialProofState":"α : Type u_1\ninst✝¹ : LinearOrderedRing α\ninst✝ : Archimedean α\n⊢ Eq (Set.iUnion fun n => Set.Icc (↑n) (HAdd.hAdd (↑n) 1)) Set.univ","decl":"theorem iUnion_Icc_intCast : ⋃ n : ℤ, Icc (n : α) (n + 1) = Set.univ := by\n  simpa only [zero_add] using iUnion_Icc_add_intCast (0 : α)\n\n"}
