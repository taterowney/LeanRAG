{"name":"Complex.sin_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (Real.sin x.arg) (HDiv.hDiv x.im (Complex.abs x))","decl":"theorem sin_arg (x : ℂ) : Real.sin (arg x) = x.im / abs x := by\n  unfold arg; split_ifs <;>\n    simp [sub_eq_add_neg, arg,\n      Real.sin_arcsin (abs_le.1 (abs_im_div_abs_le_one x)).1 (abs_le.1 (abs_im_div_abs_le_one x)).2,\n      Real.sin_add, neg_div, Real.arcsin_neg, Real.sin_neg]\n\n"}
{"name":"Complex.cos_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx : Ne x 0\n⊢ Eq (Real.cos x.arg) (HDiv.hDiv x.re (Complex.abs x))","decl":"theorem cos_arg {x : ℂ} (hx : x ≠ 0) : Real.cos (arg x) = x.re / abs x := by\n  rw [arg]\n  split_ifs with h₁ h₂\n  · rw [Real.cos_arcsin]\n    field_simp [Real.sqrt_sq, (abs.pos hx).le, *]\n  · rw [Real.cos_add_pi, Real.cos_arcsin]\n    field_simp [Real.sqrt_div (sq_nonneg _), Real.sqrt_sq_eq_abs,\n      _root_.abs_of_neg (not_le.1 h₁), *]\n  · rw [Real.cos_sub_pi, Real.cos_arcsin]\n    field_simp [Real.sqrt_div (sq_nonneg _), Real.sqrt_sq_eq_abs,\n      _root_.abs_of_neg (not_le.1 h₁), *]\n\n"}
{"name":"Complex.abs_mul_exp_arg_mul_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul (↑(Complex.abs x)) (Complex.exp (HMul.hMul (↑x.arg) Complex.I))) x","decl":"@[simp]\ntheorem abs_mul_exp_arg_mul_I (x : ℂ) : ↑(abs x) * exp (arg x * I) = x := by\n  rcases eq_or_ne x 0 with (rfl | hx)\n  · simp\n  · have : abs x ≠ 0 := abs.ne_zero hx\n    apply Complex.ext <;> field_simp [sin_arg, cos_arg hx, this, mul_comm (abs x)]\n\n"}
{"name":"Complex.abs_mul_cos_add_sin_mul_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul (↑(Complex.abs x)) (HAdd.hAdd (Complex.cos ↑x.arg) (HMul.hMul (Complex.sin ↑x.arg) Complex.I))) x","decl":"@[simp]\ntheorem abs_mul_cos_add_sin_mul_I (x : ℂ) : (abs x * (cos (arg x) + sin (arg x) * I) : ℂ) = x := by\n  rw [← exp_mul_I, abs_mul_exp_arg_mul_I]\n\n"}
{"name":"Complex.abs_mul_cos_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul (Complex.abs x) (Real.cos x.arg)) x.re","decl":"@[simp]\nlemma abs_mul_cos_arg (x : ℂ) : abs x * Real.cos (arg x) = x.re := by\n  simpa [-abs_mul_cos_add_sin_mul_I] using congr_arg re (abs_mul_cos_add_sin_mul_I x)\n\n"}
{"name":"Complex.abs_mul_sin_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (HMul.hMul (Complex.abs x) (Real.sin x.arg)) x.im","decl":"@[simp]\nlemma abs_mul_sin_arg (x : ℂ) : abs x * Real.sin (arg x) = x.im := by\n  simpa [-abs_mul_cos_add_sin_mul_I] using congr_arg im (abs_mul_cos_add_sin_mul_I x)\n\n"}
{"name":"Complex.abs_eq_one_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq (Complex.abs z) 1) (Exists fun θ => Eq (Complex.exp (HMul.hMul (↑θ) Complex.I)) z)","decl":"theorem abs_eq_one_iff (z : ℂ) : abs z = 1 ↔ ∃ θ : ℝ, exp (θ * I) = z := by\n  refine ⟨fun hz => ⟨arg z, ?_⟩, ?_⟩\n  · calc\n      exp (arg z * I) = abs z * exp (arg z * I) := by rw [hz, ofReal_one, one_mul]\n      _ = z := abs_mul_exp_arg_mul_I z\n\n  · rintro ⟨θ, rfl⟩\n    exact Complex.abs_exp_ofReal_mul_I θ\n\n"}
{"name":"Complex.range_exp_mul_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (Set.range fun x => Complex.exp (HMul.hMul (↑x) Complex.I)) (Metric.sphere 0 1)","decl":"@[simp]\ntheorem range_exp_mul_I : (Set.range fun x : ℝ => exp (x * I)) = Metric.sphere 0 1 := by\n  ext x\n  simp only [mem_sphere_zero_iff_norm, norm_eq_abs, abs_eq_one_iff, Set.mem_range]\n\n"}
{"name":"Complex.arg_mul_cos_add_sin_mul_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"r : Real\nhr : LT.lt 0 r\nθ : Real\nhθ : Membership.mem (Set.Ioc (Neg.neg Real.pi) Real.pi) θ\n⊢ Eq (HMul.hMul (↑r) (HAdd.hAdd (Complex.cos ↑θ) (HMul.hMul (Complex.sin ↑θ) Complex.I))).arg θ","decl":"theorem arg_mul_cos_add_sin_mul_I {r : ℝ} (hr : 0 < r) {θ : ℝ} (hθ : θ ∈ Set.Ioc (-π) π) :\n    arg (r * (cos θ + sin θ * I)) = θ := by\n  simp only [arg, map_mul, abs_cos_add_sin_mul_I, abs_of_nonneg hr.le, mul_one]\n  simp only [re_ofReal_mul, im_ofReal_mul, neg_im, ← ofReal_cos, ← ofReal_sin, ←\n    mk_eq_add_mul_I, neg_div, mul_div_cancel_left₀ _ hr.ne', mul_nonneg_iff_right_nonneg_of_pos hr]\n  by_cases h₁ : θ ∈ Set.Icc (-(π / 2)) (π / 2)\n  · rw [if_pos]\n    exacts [Real.arcsin_sin' h₁, Real.cos_nonneg_of_mem_Icc h₁]\n  · rw [Set.mem_Icc, not_and_or, not_le, not_le] at h₁\n    cases' h₁ with h₁ h₁\n    · replace hθ := hθ.1\n      have hcos : Real.cos θ < 0 := by\n        rw [← neg_pos, ← Real.cos_add_pi]\n        refine Real.cos_pos_of_mem_Ioo ⟨?_, ?_⟩ <;> linarith\n      have hsin : Real.sin θ < 0 := Real.sin_neg_of_neg_of_neg_pi_lt (by linarith) hθ\n      rw [if_neg, if_neg, ← Real.sin_add_pi, Real.arcsin_sin, add_sub_cancel_right] <;> [linarith;\n        linarith; exact hsin.not_le; exact hcos.not_le]\n    · replace hθ := hθ.2\n      have hcos : Real.cos θ < 0 := Real.cos_neg_of_pi_div_two_lt_of_lt h₁ (by linarith)\n      have hsin : 0 ≤ Real.sin θ := Real.sin_nonneg_of_mem_Icc ⟨by linarith, hθ⟩\n      rw [if_neg, if_pos, ← Real.sin_sub_pi, Real.arcsin_sin, sub_add_cancel] <;> [linarith;\n        linarith; exact hsin; exact hcos.not_le]\n\n"}
{"name":"Complex.arg_cos_add_sin_mul_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"θ : Real\nhθ : Membership.mem (Set.Ioc (Neg.neg Real.pi) Real.pi) θ\n⊢ Eq (HAdd.hAdd (Complex.cos ↑θ) (HMul.hMul (Complex.sin ↑θ) Complex.I)).arg θ","decl":"theorem arg_cos_add_sin_mul_I {θ : ℝ} (hθ : θ ∈ Set.Ioc (-π) π) : arg (cos θ + sin θ * I) = θ := by\n  rw [← one_mul (_ + _), ← ofReal_one, arg_mul_cos_add_sin_mul_I zero_lt_one hθ]\n\n"}
{"name":"Complex.arg_exp_mul_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"θ : Real\n⊢ Eq (Complex.exp (HMul.hMul (↑θ) Complex.I)).arg (toIocMod ⋯ (Neg.neg Real.pi) θ)","decl":"lemma arg_exp_mul_I (θ : ℝ) :\n    arg (exp (θ * I)) = toIocMod (mul_pos two_pos Real.pi_pos) (-π) θ := by\n  convert arg_cos_add_sin_mul_I (θ := toIocMod (mul_pos two_pos Real.pi_pos) (-π) θ) _ using 2\n  · rw [← exp_mul_I, eq_sub_of_add_eq <| toIocMod_add_toIocDiv_zsmul _ _ θ, ofReal_sub,\n      ofReal_zsmul, ofReal_mul, ofReal_ofNat, exp_mul_I_periodic.sub_zsmul_eq]\n  · convert toIocMod_mem_Ioc _ _ _\n    ring\n\n"}
{"name":"Complex.arg_zero","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (Complex.arg 0) 0","decl":"@[simp]\ntheorem arg_zero : arg 0 = 0 := by simp [arg, le_refl]\n\n"}
{"name":"Complex.ext_abs_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\nh₁ : Eq (Complex.abs x) (Complex.abs y)\nh₂ : Eq x.arg y.arg\n⊢ Eq x y","decl":"theorem ext_abs_arg {x y : ℂ} (h₁ : abs x = abs y) (h₂ : x.arg = y.arg) : x = y := by\n  rw [← abs_mul_exp_arg_mul_I x, ← abs_mul_exp_arg_mul_I y, h₁, h₂]\n\n"}
{"name":"Complex.ext_abs_arg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\n⊢ Iff (Eq x y) (And (Eq (Complex.abs x) (Complex.abs y)) (Eq x.arg y.arg))","decl":"theorem ext_abs_arg_iff {x y : ℂ} : x = y ↔ abs x = abs y ∧ arg x = arg y :=\n  ⟨fun h => h ▸ ⟨rfl, rfl⟩, and_imp.2 ext_abs_arg⟩\n\n"}
{"name":"Complex.arg_mem_Ioc","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Membership.mem (Set.Ioc (Neg.neg Real.pi) Real.pi) z.arg","decl":"theorem arg_mem_Ioc (z : ℂ) : arg z ∈ Set.Ioc (-π) π := by\n  have hπ : 0 < π := Real.pi_pos\n  rcases eq_or_ne z 0 with (rfl | hz)\n  · simp [hπ, hπ.le]\n  rcases existsUnique_add_zsmul_mem_Ioc Real.two_pi_pos (arg z) (-π) with ⟨N, hN, -⟩\n  rw [two_mul, neg_add_cancel_left, ← two_mul, zsmul_eq_mul] at hN\n  rw [← abs_mul_cos_add_sin_mul_I z, ← cos_add_int_mul_two_pi _ N, ← sin_add_int_mul_two_pi _ N]\n  have := arg_mul_cos_add_sin_mul_I (abs.pos hz) hN\n  push_cast at this\n  rwa [this]\n\n"}
{"name":"Complex.range_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (Set.range Complex.arg) (Set.Ioc (Neg.neg Real.pi) Real.pi)","decl":"@[simp]\ntheorem range_arg : Set.range arg = Set.Ioc (-π) π :=\n  (Set.range_subset_iff.2 arg_mem_Ioc).antisymm fun _ hx => ⟨_, arg_cos_add_sin_mul_I hx⟩\n\n"}
{"name":"Complex.arg_le_pi","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ LE.le x.arg Real.pi","decl":"theorem arg_le_pi (x : ℂ) : arg x ≤ π :=\n  (arg_mem_Ioc x).2\n\n"}
{"name":"Complex.neg_pi_lt_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ LT.lt (Neg.neg Real.pi) x.arg","decl":"theorem neg_pi_lt_arg (x : ℂ) : -π < arg x :=\n  (arg_mem_Ioc x).1\n\n"}
{"name":"Complex.abs_arg_le_pi","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ LE.le (abs z.arg) Real.pi","decl":"theorem abs_arg_le_pi (z : ℂ) : |arg z| ≤ π :=\n  abs_le.2 ⟨(neg_pi_lt_arg z).le, arg_le_pi z⟩\n\n"}
{"name":"Complex.arg_nonneg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LE.le 0 z.arg) (LE.le 0 z.im)","decl":"@[simp]\ntheorem arg_nonneg_iff {z : ℂ} : 0 ≤ arg z ↔ 0 ≤ z.im := by\n  rcases eq_or_ne z 0 with (rfl | h₀); · simp\n  calc\n    0 ≤ arg z ↔ 0 ≤ Real.sin (arg z) :=\n      ⟨fun h => Real.sin_nonneg_of_mem_Icc ⟨h, arg_le_pi z⟩, by\n        contrapose!\n        intro h\n        exact Real.sin_neg_of_neg_of_neg_pi_lt h (neg_pi_lt_arg _)⟩\n    _ ↔ _ := by rw [sin_arg, le_div_iff₀ (abs.pos h₀), zero_mul]\n\n"}
{"name":"Complex.arg_neg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LT.lt z.arg 0) (LT.lt z.im 0)","decl":"@[simp]\ntheorem arg_neg_iff {z : ℂ} : arg z < 0 ↔ z.im < 0 :=\n  lt_iff_lt_of_le_iff_le arg_nonneg_iff\n\n"}
{"name":"Complex.arg_real_mul","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nr : Real\nhr : LT.lt 0 r\n⊢ Eq (HMul.hMul (↑r) x).arg x.arg","decl":"theorem arg_real_mul (x : ℂ) {r : ℝ} (hr : 0 < r) : arg (r * x) = arg x := by\n  rcases eq_or_ne x 0 with (rfl | hx); · rw [mul_zero]\n  conv_lhs =>\n    rw [← abs_mul_cos_add_sin_mul_I x, ← mul_assoc, ← ofReal_mul,\n      arg_mul_cos_add_sin_mul_I (mul_pos hr (abs.pos hx)) x.arg_mem_Ioc]\n\n"}
{"name":"Complex.arg_mul_real","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"r : Real\nhr : LT.lt 0 r\nx : Complex\n⊢ Eq (HMul.hMul x ↑r).arg x.arg","decl":"theorem arg_mul_real {r : ℝ} (hr : 0 < r) (x : ℂ) : arg (x * r) = arg x :=\n  mul_comm x r ▸ arg_real_mul x hr\n\n"}
{"name":"Complex.arg_eq_arg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\nhx : Ne x 0\nhy : Ne y 0\n⊢ Iff (Eq x.arg y.arg) (Eq (HMul.hMul (HDiv.hDiv ↑(Complex.abs y) ↑(Complex.abs x)) x) y)","decl":"theorem arg_eq_arg_iff {x y : ℂ} (hx : x ≠ 0) (hy : y ≠ 0) :\n    arg x = arg y ↔ (abs y / abs x : ℂ) * x = y := by\n  simp only [ext_abs_arg_iff, map_mul, map_div₀, abs_ofReal, abs_abs,\n    div_mul_cancel₀ _ (abs.ne_zero hx), eq_self_iff_true, true_and]\n  rw [← ofReal_div, arg_real_mul]\n  exact div_pos (abs.pos hy) (abs.pos hx)\n\n"}
{"name":"Complex.arg_one","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (Complex.arg 1) 0","decl":"@[simp] lemma arg_one : arg 1 = 0 := by simp [arg, zero_le_one]\n\n"}
{"name":"Complex.arg_div_self","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (HDiv.hDiv x x).arg 0","decl":"/-- This holds true for all `x : ℂ` because of the junk values `0 / 0 = 0` and `arg 0 = 0`. -/\n@[simp] lemma arg_div_self (x : ℂ) : arg (x / x) = 0 := by\n  obtain rfl | hx := eq_or_ne x 0 <;> simp [*]\n\n"}
{"name":"Complex.arg_neg_one","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (-1).arg Real.pi","decl":"@[simp]\ntheorem arg_neg_one : arg (-1) = π := by simp [arg, le_refl, not_le.2 (zero_lt_one' ℝ)]\n\n"}
{"name":"Complex.arg_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq Complex.I.arg (HDiv.hDiv Real.pi 2)","decl":"@[simp]\ntheorem arg_I : arg I = π / 2 := by simp [arg, le_refl]\n\n"}
{"name":"Complex.arg_neg_I","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (Neg.neg Complex.I).arg (Neg.neg (HDiv.hDiv Real.pi 2))","decl":"@[simp]\ntheorem arg_neg_I : arg (-I) = -(π / 2) := by simp [arg, le_refl]\n\n"}
{"name":"Complex.tan_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (Real.tan x.arg) (HDiv.hDiv x.im x.re)","decl":"@[simp]\ntheorem tan_arg (x : ℂ) : Real.tan (arg x) = x.im / x.re := by\n  by_cases h : x = 0\n  · simp only [h, zero_div, Complex.zero_im, Complex.arg_zero, Real.tan_zero, Complex.zero_re]\n  rw [Real.tan_eq_sin_div_cos, sin_arg, cos_arg h, div_div_div_cancel_right₀ (abs.ne_zero h)]\n\n"}
{"name":"Complex.arg_ofReal_of_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Real\nhx : LE.le 0 x\n⊢ Eq (↑x).arg 0","decl":"theorem arg_ofReal_of_nonneg {x : ℝ} (hx : 0 ≤ x) : arg x = 0 := by simp [arg, hx]\n\n"}
{"name":"Complex.natCast_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"n : Nat\n⊢ Eq (↑n).arg 0","decl":"@[simp, norm_cast]\nlemma natCast_arg {n : ℕ} : arg n = 0 :=\n  ofReal_natCast n ▸ arg_ofReal_of_nonneg n.cast_nonneg\n\n"}
{"name":"Complex.ofNat_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"n : Nat\ninst✝ : n.AtLeastTwo\n⊢ Eq (OfNat.ofNat n).arg 0","decl":"@[simp]\nlemma ofNat_arg {n : ℕ} [n.AtLeastTwo] : arg ofNat(n) = 0 :=\n  natCast_arg\n\n"}
{"name":"Complex.arg_eq_zero_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq z.arg 0) (And (LE.le 0 z.re) (Eq z.im 0))","decl":"theorem arg_eq_zero_iff {z : ℂ} : arg z = 0 ↔ 0 ≤ z.re ∧ z.im = 0 := by\n  refine ⟨fun h => ?_, ?_⟩\n  · rw [← abs_mul_cos_add_sin_mul_I z, h]\n    simp [abs.nonneg]\n  · cases' z with x y\n    rintro ⟨h, rfl : y = 0⟩\n    exact arg_ofReal_of_nonneg h\n\n"}
{"name":"Complex.arg_eq_zero_iff_zero_le","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq z.arg 0) (LE.le 0 z)","decl":"open ComplexOrder in\nlemma arg_eq_zero_iff_zero_le {z : ℂ} : arg z = 0 ↔ 0 ≤ z := by\n  rw [arg_eq_zero_iff, eq_comm, nonneg_iff]\n\n"}
{"name":"Complex.arg_eq_pi_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq z.arg Real.pi) (And (LT.lt z.re 0) (Eq z.im 0))","decl":"theorem arg_eq_pi_iff {z : ℂ} : arg z = π ↔ z.re < 0 ∧ z.im = 0 := by\n  by_cases h₀ : z = 0\n  · simp [h₀, lt_irrefl, Real.pi_ne_zero.symm]\n  constructor\n  · intro h\n    rw [← abs_mul_cos_add_sin_mul_I z, h]\n    simp [h₀]\n  · cases' z with x y\n    rintro ⟨h : x < 0, rfl : y = 0⟩\n    rw [← arg_neg_one, ← arg_real_mul (-1) (neg_pos.2 h)]\n    simp [← ofReal_def]\n\n"}
{"name":"Complex.arg_eq_pi_iff_lt_zero","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq z.arg Real.pi) (LT.lt z 0)","decl":"open ComplexOrder in\nlemma arg_eq_pi_iff_lt_zero {z : ℂ} : arg z = π ↔ z < 0 := arg_eq_pi_iff\n\n"}
{"name":"Complex.arg_lt_pi_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LT.lt z.arg Real.pi) (Or (LE.le 0 z.re) (Ne z.im 0))","decl":"theorem arg_lt_pi_iff {z : ℂ} : arg z < π ↔ 0 ≤ z.re ∨ z.im ≠ 0 := by\n  rw [(arg_le_pi z).lt_iff_ne, not_iff_comm, not_or, not_le, Classical.not_not, arg_eq_pi_iff]\n\n"}
{"name":"Complex.arg_ofReal_of_neg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Real\nhx : LT.lt x 0\n⊢ Eq (↑x).arg Real.pi","decl":"theorem arg_ofReal_of_neg {x : ℝ} (hx : x < 0) : arg x = π :=\n  arg_eq_pi_iff.2 ⟨hx, rfl⟩\n\n"}
{"name":"Complex.arg_eq_pi_div_two_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq z.arg (HDiv.hDiv Real.pi 2)) (And (Eq z.re 0) (LT.lt 0 z.im))","decl":"theorem arg_eq_pi_div_two_iff {z : ℂ} : arg z = π / 2 ↔ z.re = 0 ∧ 0 < z.im := by\n  by_cases h₀ : z = 0; · simp [h₀, lt_irrefl, Real.pi_div_two_pos.ne]\n  constructor\n  · intro h\n    rw [← abs_mul_cos_add_sin_mul_I z, h]\n    simp [h₀]\n  · cases' z with x y\n    rintro ⟨rfl : x = 0, hy : 0 < y⟩\n    rw [← arg_I, ← arg_real_mul I hy, ofReal_mul', I_re, I_im, mul_zero, mul_one]\n\n"}
{"name":"Complex.arg_eq_neg_pi_div_two_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Eq z.arg (Neg.neg (HDiv.hDiv Real.pi 2))) (And (Eq z.re 0) (LT.lt z.im 0))","decl":"theorem arg_eq_neg_pi_div_two_iff {z : ℂ} : arg z = -(π / 2) ↔ z.re = 0 ∧ z.im < 0 := by\n  by_cases h₀ : z = 0; · simp [h₀, lt_irrefl, Real.pi_ne_zero]\n  constructor\n  · intro h\n    rw [← abs_mul_cos_add_sin_mul_I z, h]\n    simp [h₀]\n  · cases' z with x y\n    rintro ⟨rfl : x = 0, hy : y < 0⟩\n    rw [← arg_neg_I, ← arg_real_mul (-I) (neg_pos.2 hy), mk_eq_add_mul_I]\n    simp\n\n"}
{"name":"Complex.arg_of_re_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx : LE.le 0 x.re\n⊢ Eq x.arg (Real.arcsin (HDiv.hDiv x.im (Complex.abs x)))","decl":"theorem arg_of_re_nonneg {x : ℂ} (hx : 0 ≤ x.re) : arg x = Real.arcsin (x.im / abs x) :=\n  if_pos hx\n\n"}
{"name":"Complex.arg_of_re_neg_of_im_nonneg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx_re : LT.lt x.re 0\nhx_im : LE.le 0 x.im\n⊢ Eq x.arg (HAdd.hAdd (Real.arcsin (HDiv.hDiv (Neg.neg x).im (Complex.abs x))) Real.pi)","decl":"theorem arg_of_re_neg_of_im_nonneg {x : ℂ} (hx_re : x.re < 0) (hx_im : 0 ≤ x.im) :\n    arg x = Real.arcsin ((-x).im / abs x) + π := by\n  simp only [arg, hx_re.not_le, hx_im, if_true, if_false]\n\n"}
{"name":"Complex.arg_of_re_neg_of_im_neg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx_re : LT.lt x.re 0\nhx_im : LT.lt x.im 0\n⊢ Eq x.arg (HSub.hSub (Real.arcsin (HDiv.hDiv (Neg.neg x).im (Complex.abs x))) Real.pi)","decl":"theorem arg_of_re_neg_of_im_neg {x : ℂ} (hx_re : x.re < 0) (hx_im : x.im < 0) :\n    arg x = Real.arcsin ((-x).im / abs x) - π := by\n  simp only [arg, hx_re.not_le, hx_im.not_le, if_false]\n\n"}
{"name":"Complex.arg_of_im_nonneg_of_ne_zero","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nh₁ : LE.le 0 z.im\nh₂ : Ne z 0\n⊢ Eq z.arg (Real.arccos (HDiv.hDiv z.re (Complex.abs z)))","decl":"theorem arg_of_im_nonneg_of_ne_zero {z : ℂ} (h₁ : 0 ≤ z.im) (h₂ : z ≠ 0) :\n    arg z = Real.arccos (z.re / abs z) := by\n  rw [← cos_arg h₂, Real.arccos_cos (arg_nonneg_iff.2 h₁) (arg_le_pi _)]\n\n"}
{"name":"Complex.arg_of_im_pos","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhz : LT.lt 0 z.im\n⊢ Eq z.arg (Real.arccos (HDiv.hDiv z.re (Complex.abs z)))","decl":"theorem arg_of_im_pos {z : ℂ} (hz : 0 < z.im) : arg z = Real.arccos (z.re / abs z) :=\n  arg_of_im_nonneg_of_ne_zero hz.le fun h => hz.ne' <| h.symm ▸ rfl\n\n"}
{"name":"Complex.arg_of_im_neg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhz : LT.lt z.im 0\n⊢ Eq z.arg (Neg.neg (Real.arccos (HDiv.hDiv z.re (Complex.abs z))))","decl":"theorem arg_of_im_neg {z : ℂ} (hz : z.im < 0) : arg z = -Real.arccos (z.re / abs z) := by\n  have h₀ : z ≠ 0 := mt (congr_arg im) hz.ne\n  rw [← cos_arg h₀, ← Real.cos_neg, Real.arccos_cos, neg_neg]\n  exacts [neg_nonneg.2 (arg_neg_iff.2 hz).le, neg_le.2 (neg_pi_lt_arg z).le]\n\n"}
{"name":"Complex.arg_conj","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq ((starRingEnd Complex) x).arg (ite (Eq x.arg Real.pi) Real.pi (Neg.neg x.arg))","decl":"theorem arg_conj (x : ℂ) : arg (conj x) = if arg x = π then π else -arg x := by\n  simp_rw [arg_eq_pi_iff, arg, neg_im, conj_im, conj_re, abs_conj, neg_div, neg_neg,\n    Real.arcsin_neg]\n  rcases lt_trichotomy x.re 0 with (hr | hr | hr) <;>\n    rcases lt_trichotomy x.im 0 with (hi | hi | hi)\n  · simp [hr, hr.not_le, hi.le, hi.ne, not_le.2 hi, add_comm]\n  · simp [hr, hr.not_le, hi]\n  · simp [hr, hr.not_le, hi.ne.symm, hi.le, not_le.2 hi, sub_eq_neg_add]\n  · simp [hr]\n  · simp [hr]\n  · simp [hr]\n  · simp [hr, hr.le, hi.ne]\n  · simp [hr, hr.le, hr.le.not_lt]\n  · simp [hr, hr.le, hr.le.not_lt]\n\n"}
{"name":"Complex.arg_inv","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (Inv.inv x).arg (ite (Eq x.arg Real.pi) Real.pi (Neg.neg x.arg))","decl":"theorem arg_inv (x : ℂ) : arg x⁻¹ = if arg x = π then π else -arg x := by\n  rw [← arg_conj, inv_def, mul_comm]\n  by_cases hx : x = 0\n  · simp [hx]\n  · exact arg_real_mul (conj x) (by simp [hx])\n\n"}
{"name":"Complex.abs_arg_inv","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (abs (Inv.inv x).arg) (abs x.arg)","decl":"@[simp] lemma abs_arg_inv (x : ℂ) : |x⁻¹.arg| = |x.arg| := by rw [arg_inv]; split_ifs <;> simp [*]\n\n-- TODO: Replace the next two lemmas by general facts about periodic functions\n"}
{"name":"Complex.abs_eq_one_iff'","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Iff (Eq (Complex.abs x) 1) (Exists fun θ => And (Membership.mem (Set.Ioc (Neg.neg Real.pi) Real.pi) θ) (Eq (Complex.exp (HMul.hMul (↑θ) Complex.I)) x))","decl":"lemma abs_eq_one_iff' : abs x = 1 ↔ ∃ θ ∈ Set.Ioc (-π) π, exp (θ * I) = x := by\n  rw [abs_eq_one_iff]\n  constructor\n  · rintro ⟨θ, rfl⟩\n    refine ⟨toIocMod (mul_pos two_pos Real.pi_pos) (-π) θ, ?_, ?_⟩\n    · convert toIocMod_mem_Ioc _ _ _\n      ring\n    · rw [eq_sub_of_add_eq <| toIocMod_add_toIocDiv_zsmul _ _ θ, ofReal_sub,\n      ofReal_zsmul, ofReal_mul, ofReal_ofNat, exp_mul_I_periodic.sub_zsmul_eq]\n  · rintro ⟨θ, _, rfl⟩\n    exact ⟨θ, rfl⟩\n\n"}
{"name":"Complex.image_exp_Ioc_eq_sphere","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"⊢ Eq (Set.image (fun θ => Complex.exp (HMul.hMul (↑θ) Complex.I)) (Set.Ioc (Neg.neg Real.pi) Real.pi)) (Metric.sphere 0 1)","decl":"lemma image_exp_Ioc_eq_sphere : (fun θ : ℝ ↦ exp (θ * I)) '' Set.Ioc (-π) π = sphere 0 1 := by\n  ext; simpa using abs_eq_one_iff'.symm\n\n"}
{"name":"Complex.arg_le_pi_div_two_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LE.le z.arg (HDiv.hDiv Real.pi 2)) (Or (LE.le 0 z.re) (LT.lt z.im 0))","decl":"theorem arg_le_pi_div_two_iff {z : ℂ} : arg z ≤ π / 2 ↔ 0 ≤ re z ∨ im z < 0 := by\n  rcases le_or_lt 0 (re z) with hre | hre\n  · simp only [hre, arg_of_re_nonneg hre, Real.arcsin_le_pi_div_two, true_or]\n  simp only [hre.not_le, false_or]\n  rcases le_or_lt 0 (im z) with him | him\n  · simp only [him.not_lt]\n    rw [iff_false, not_le, arg_of_re_neg_of_im_nonneg hre him, ← sub_lt_iff_lt_add, half_sub,\n      Real.neg_pi_div_two_lt_arcsin, neg_im, neg_div, neg_lt_neg_iff, div_lt_one, ←\n      _root_.abs_of_nonneg him, abs_im_lt_abs]\n    exacts [hre.ne, abs.pos <| ne_of_apply_ne re hre.ne]\n  · simp only [him]\n    rw [iff_true, arg_of_re_neg_of_im_neg hre him]\n    exact (sub_le_self _ Real.pi_pos.le).trans (Real.arcsin_le_pi_div_two _)\n\n"}
{"name":"Complex.neg_pi_div_two_le_arg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LE.le (Neg.neg (HDiv.hDiv Real.pi 2)) z.arg) (Or (LE.le 0 z.re) (LE.le 0 z.im))","decl":"theorem neg_pi_div_two_le_arg_iff {z : ℂ} : -(π / 2) ≤ arg z ↔ 0 ≤ re z ∨ 0 ≤ im z := by\n  rcases le_or_lt 0 (re z) with hre | hre\n  · simp only [hre, arg_of_re_nonneg hre, Real.neg_pi_div_two_le_arcsin, true_or]\n  simp only [hre.not_le, false_or]\n  rcases le_or_lt 0 (im z) with him | him\n  · simp only [him]\n    rw [iff_true, arg_of_re_neg_of_im_nonneg hre him]\n    exact (Real.neg_pi_div_two_le_arcsin _).trans (le_add_of_nonneg_right Real.pi_pos.le)\n  · simp only [him.not_le]\n    rw [iff_false, not_le, arg_of_re_neg_of_im_neg hre him, sub_lt_iff_lt_add', ←\n      sub_eq_add_neg, sub_half, Real.arcsin_lt_pi_div_two, div_lt_one, neg_im, ← abs_of_neg him,\n      abs_im_lt_abs]\n    exacts [hre.ne, abs.pos <| ne_of_apply_ne re hre.ne]\n\n"}
{"name":"Complex.neg_pi_div_two_lt_arg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LT.lt (Neg.neg (HDiv.hDiv Real.pi 2)) z.arg) (Or (LT.lt 0 z.re) (LE.le 0 z.im))","decl":"lemma neg_pi_div_two_lt_arg_iff {z : ℂ} : -(π / 2) < arg z ↔ 0 < re z ∨ 0 ≤ im z := by\n  rw [lt_iff_le_and_ne, neg_pi_div_two_le_arg_iff, ne_comm, Ne, arg_eq_neg_pi_div_two_iff]\n  rcases lt_trichotomy z.re 0 with hre | hre | hre\n  · simp [hre.ne, hre.not_le, hre.not_lt]\n  · simp [hre]\n  · simp [hre, hre.le, hre.ne']\n\n"}
{"name":"Complex.arg_lt_pi_div_two_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LT.lt z.arg (HDiv.hDiv Real.pi 2)) (Or (LT.lt 0 z.re) (Or (LT.lt z.im 0) (Eq z 0)))","decl":"lemma arg_lt_pi_div_two_iff {z : ℂ} : arg z < π / 2 ↔ 0 < re z ∨ im z < 0 ∨ z = 0 := by\n  rw [lt_iff_le_and_ne, arg_le_pi_div_two_iff, Ne, arg_eq_pi_div_two_iff]\n  rcases lt_trichotomy z.re 0 with hre | hre | hre\n  · have : z ≠ 0 := by simp [Complex.ext_iff, hre.ne]\n    simp [hre.ne, hre.not_le, hre.not_lt, this]\n  · have : z = 0 ↔ z.im = 0 := by simp [Complex.ext_iff, hre]\n    simp [hre, this, or_comm, le_iff_eq_or_lt]\n  · simp [hre, hre.le, hre.ne']\n\n"}
{"name":"Complex.abs_arg_le_pi_div_two_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LE.le (abs z.arg) (HDiv.hDiv Real.pi 2)) (LE.le 0 z.re)","decl":"@[simp]\ntheorem abs_arg_le_pi_div_two_iff {z : ℂ} : |arg z| ≤ π / 2 ↔ 0 ≤ re z := by\n  rw [abs_le, arg_le_pi_div_two_iff, neg_pi_div_two_le_arg_iff, ← or_and_left, ← not_le,\n    and_not_self_iff, or_false]\n\n"}
{"name":"Complex.abs_arg_lt_pi_div_two_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (LT.lt (abs z.arg) (HDiv.hDiv Real.pi 2)) (Or (LT.lt 0 z.re) (Eq z 0))","decl":"@[simp]\ntheorem abs_arg_lt_pi_div_two_iff {z : ℂ} : |arg z| < π / 2 ↔ 0 < re z ∨ z = 0 := by\n  rw [abs_lt, arg_lt_pi_div_two_iff, neg_pi_div_two_lt_arg_iff, ← or_and_left]\n  rcases eq_or_ne z 0 with hz | hz\n  · simp [hz]\n  · simp_rw [hz, or_false, ← not_lt, not_and_self_iff, or_false]\n\n"}
{"name":"Complex.arg_conj_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (↑((starRingEnd Complex) x).arg) (Neg.neg ↑x.arg)","decl":"@[simp]\ntheorem arg_conj_coe_angle (x : ℂ) : (arg (conj x) : Real.Angle) = -arg x := by\n  by_cases h : arg x = π <;> simp [arg_conj, h]\n\n"}
{"name":"Complex.arg_inv_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Eq (↑(Inv.inv x).arg) (Neg.neg ↑x.arg)","decl":"@[simp]\ntheorem arg_inv_coe_angle (x : ℂ) : (arg x⁻¹ : Real.Angle) = -arg x := by\n  by_cases h : arg x = π <;> simp [arg_inv, h]\n\n"}
{"name":"Complex.arg_neg_eq_arg_sub_pi_of_im_pos","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhi : LT.lt 0 x.im\n⊢ Eq (Neg.neg x).arg (HSub.hSub x.arg Real.pi)","decl":"theorem arg_neg_eq_arg_sub_pi_of_im_pos {x : ℂ} (hi : 0 < x.im) : arg (-x) = arg x - π := by\n  rw [arg_of_im_pos hi, arg_of_im_neg (show (-x).im < 0 from Left.neg_neg_iff.2 hi)]\n  simp [neg_div, Real.arccos_neg]\n\n"}
{"name":"Complex.arg_neg_eq_arg_add_pi_of_im_neg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhi : LT.lt x.im 0\n⊢ Eq (Neg.neg x).arg (HAdd.hAdd x.arg Real.pi)","decl":"theorem arg_neg_eq_arg_add_pi_of_im_neg {x : ℂ} (hi : x.im < 0) : arg (-x) = arg x + π := by\n  rw [arg_of_im_neg hi, arg_of_im_pos (show 0 < (-x).im from Left.neg_pos_iff.2 hi)]\n  simp [neg_div, Real.arccos_neg, add_comm, ← sub_eq_add_neg]\n\n"}
{"name":"Complex.arg_neg_eq_arg_sub_pi_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Iff (Eq (Neg.neg x).arg (HSub.hSub x.arg Real.pi)) (Or (LT.lt 0 x.im) (And (Eq x.im 0) (LT.lt x.re 0)))","decl":"theorem arg_neg_eq_arg_sub_pi_iff {x : ℂ} :\n    arg (-x) = arg x - π ↔ 0 < x.im ∨ x.im = 0 ∧ x.re < 0 := by\n  rcases lt_trichotomy x.im 0 with (hi | hi | hi)\n  · simp [hi, hi.ne, hi.not_lt, arg_neg_eq_arg_add_pi_of_im_neg, sub_eq_add_neg, ←\n      add_eq_zero_iff_eq_neg, Real.pi_ne_zero]\n  · rw [(ext rfl hi : x = x.re)]\n    rcases lt_trichotomy x.re 0 with (hr | hr | hr)\n    · rw [arg_ofReal_of_neg hr, ← ofReal_neg, arg_ofReal_of_nonneg (Left.neg_pos_iff.2 hr).le]\n      simp [hr]\n    · simp [hr, hi, Real.pi_ne_zero]\n    · rw [arg_ofReal_of_nonneg hr.le, ← ofReal_neg, arg_ofReal_of_neg (Left.neg_neg_iff.2 hr)]\n      simp [hr.not_lt, ← add_eq_zero_iff_eq_neg, Real.pi_ne_zero]\n  · simp [hi, arg_neg_eq_arg_sub_pi_of_im_pos]\n\n"}
{"name":"Complex.arg_neg_eq_arg_add_pi_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\n⊢ Iff (Eq (Neg.neg x).arg (HAdd.hAdd x.arg Real.pi)) (Or (LT.lt x.im 0) (And (Eq x.im 0) (LT.lt 0 x.re)))","decl":"theorem arg_neg_eq_arg_add_pi_iff {x : ℂ} :\n    arg (-x) = arg x + π ↔ x.im < 0 ∨ x.im = 0 ∧ 0 < x.re := by\n  rcases lt_trichotomy x.im 0 with (hi | hi | hi)\n  · simp [hi, arg_neg_eq_arg_add_pi_of_im_neg]\n  · rw [(ext rfl hi : x = x.re)]\n    rcases lt_trichotomy x.re 0 with (hr | hr | hr)\n    · rw [arg_ofReal_of_neg hr, ← ofReal_neg, arg_ofReal_of_nonneg (Left.neg_pos_iff.2 hr).le]\n      simp [hr.not_lt, ← two_mul, Real.pi_ne_zero]\n    · simp [hr, hi, Real.pi_ne_zero.symm]\n    · rw [arg_ofReal_of_nonneg hr.le, ← ofReal_neg, arg_ofReal_of_neg (Left.neg_neg_iff.2 hr)]\n      simp [hr]\n  · simp [hi, hi.ne.symm, hi.not_lt, arg_neg_eq_arg_sub_pi_of_im_pos, sub_eq_add_neg, ←\n      add_eq_zero_iff_neg_eq, Real.pi_ne_zero]\n\n"}
{"name":"Complex.arg_neg_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx : Ne x 0\n⊢ Eq (↑(Neg.neg x).arg) (HAdd.hAdd ↑x.arg ↑Real.pi)","decl":"theorem arg_neg_coe_angle {x : ℂ} (hx : x ≠ 0) : (arg (-x) : Real.Angle) = arg x + π := by\n  rcases lt_trichotomy x.im 0 with (hi | hi | hi)\n  · rw [arg_neg_eq_arg_add_pi_of_im_neg hi, Real.Angle.coe_add]\n  · rw [(ext rfl hi : x = x.re)]\n    rcases lt_trichotomy x.re 0 with (hr | hr | hr)\n    · rw [arg_ofReal_of_neg hr, ← ofReal_neg, arg_ofReal_of_nonneg (Left.neg_pos_iff.2 hr).le, ←\n        Real.Angle.coe_add, ← two_mul, Real.Angle.coe_two_pi, Real.Angle.coe_zero]\n    · exact False.elim (hx (ext hr hi))\n    · rw [arg_ofReal_of_nonneg hr.le, ← ofReal_neg, arg_ofReal_of_neg (Left.neg_neg_iff.2 hr),\n        Real.Angle.coe_zero, zero_add]\n  · rw [arg_neg_eq_arg_sub_pi_of_im_pos hi, Real.Angle.coe_sub, Real.Angle.sub_coe_pi_eq_add_coe_pi]\n\n"}
{"name":"Complex.arg_mul_cos_add_sin_mul_I_eq_toIocMod","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"r : Real\nhr : LT.lt 0 r\nθ : Real\n⊢ Eq (HMul.hMul (↑r) (HAdd.hAdd (Complex.cos ↑θ) (HMul.hMul (Complex.sin ↑θ) Complex.I))).arg (toIocMod Real.two_pi_pos (Neg.neg Real.pi) θ)","decl":"theorem arg_mul_cos_add_sin_mul_I_eq_toIocMod {r : ℝ} (hr : 0 < r) (θ : ℝ) :\n    arg (r * (cos θ + sin θ * I)) = toIocMod Real.two_pi_pos (-π) θ := by\n  have hi : toIocMod Real.two_pi_pos (-π) θ ∈ Set.Ioc (-π) π := by\n    convert toIocMod_mem_Ioc _ _ θ\n    ring\n  convert arg_mul_cos_add_sin_mul_I hr hi using 3\n  simp [toIocMod, cos_sub_int_mul_two_pi, sin_sub_int_mul_two_pi]\n\n"}
{"name":"Complex.arg_cos_add_sin_mul_I_eq_toIocMod","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"θ : Real\n⊢ Eq (HAdd.hAdd (Complex.cos ↑θ) (HMul.hMul (Complex.sin ↑θ) Complex.I)).arg (toIocMod Real.two_pi_pos (Neg.neg Real.pi) θ)","decl":"theorem arg_cos_add_sin_mul_I_eq_toIocMod (θ : ℝ) :\n    arg (cos θ + sin θ * I) = toIocMod Real.two_pi_pos (-π) θ := by\n  rw [← one_mul (_ + _), ← ofReal_one, arg_mul_cos_add_sin_mul_I_eq_toIocMod zero_lt_one]\n\n"}
{"name":"Complex.arg_mul_cos_add_sin_mul_I_sub","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"r : Real\nhr : LT.lt 0 r\nθ : Real\n⊢ Eq (HSub.hSub (HMul.hMul (↑r) (HAdd.hAdd (Complex.cos ↑θ) (HMul.hMul (Complex.sin ↑θ) Complex.I))).arg θ) (HMul.hMul (HMul.hMul 2 Real.pi) ↑(Int.floor (HDiv.hDiv (HSub.hSub Real.pi θ) (HMul.hMul 2 Real.pi))))","decl":"theorem arg_mul_cos_add_sin_mul_I_sub {r : ℝ} (hr : 0 < r) (θ : ℝ) :\n    arg (r * (cos θ + sin θ * I)) - θ = 2 * π * ⌊(π - θ) / (2 * π)⌋ := by\n  rw [arg_mul_cos_add_sin_mul_I_eq_toIocMod hr, toIocMod_sub_self, toIocDiv_eq_neg_floor,\n    zsmul_eq_mul]\n  ring_nf\n\n"}
{"name":"Complex.arg_cos_add_sin_mul_I_sub","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"θ : Real\n⊢ Eq (HSub.hSub (HAdd.hAdd (Complex.cos ↑θ) (HMul.hMul (Complex.sin ↑θ) Complex.I)).arg θ) (HMul.hMul (HMul.hMul 2 Real.pi) ↑(Int.floor (HDiv.hDiv (HSub.hSub Real.pi θ) (HMul.hMul 2 Real.pi))))","decl":"theorem arg_cos_add_sin_mul_I_sub (θ : ℝ) :\n    arg (cos θ + sin θ * I) - θ = 2 * π * ⌊(π - θ) / (2 * π)⌋ := by\n  rw [← one_mul (_ + _), ← ofReal_one, arg_mul_cos_add_sin_mul_I_sub zero_lt_one]\n\n"}
{"name":"Complex.arg_mul_cos_add_sin_mul_I_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"r : Real\nhr : LT.lt 0 r\nθ : Real.Angle\n⊢ Eq (↑(HMul.hMul (↑r) (HAdd.hAdd (↑θ.cos) (HMul.hMul (↑θ.sin) Complex.I))).arg) θ","decl":"theorem arg_mul_cos_add_sin_mul_I_coe_angle {r : ℝ} (hr : 0 < r) (θ : Real.Angle) :\n    (arg (r * (Real.Angle.cos θ + Real.Angle.sin θ * I)) : Real.Angle) = θ := by\n  induction' θ using Real.Angle.induction_on with θ\n  rw [Real.Angle.cos_coe, Real.Angle.sin_coe, Real.Angle.angle_eq_iff_two_pi_dvd_sub]\n  use ⌊(π - θ) / (2 * π)⌋\n  exact mod_cast arg_mul_cos_add_sin_mul_I_sub hr θ\n\n"}
{"name":"Complex.arg_cos_add_sin_mul_I_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"θ : Real.Angle\n⊢ Eq (↑(HAdd.hAdd (↑θ.cos) (HMul.hMul (↑θ.sin) Complex.I)).arg) θ","decl":"theorem arg_cos_add_sin_mul_I_coe_angle (θ : Real.Angle) :\n    (arg (Real.Angle.cos θ + Real.Angle.sin θ * I) : Real.Angle) = θ := by\n  rw [← one_mul (_ + _), ← ofReal_one, arg_mul_cos_add_sin_mul_I_coe_angle zero_lt_one]\n\n"}
{"name":"Complex.arg_mul_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\nhx : Ne x 0\nhy : Ne y 0\n⊢ Eq (↑(HMul.hMul x y).arg) (HAdd.hAdd ↑x.arg ↑y.arg)","decl":"theorem arg_mul_coe_angle {x y : ℂ} (hx : x ≠ 0) (hy : y ≠ 0) :\n    (arg (x * y) : Real.Angle) = arg x + arg y := by\n  convert arg_mul_cos_add_sin_mul_I_coe_angle (mul_pos (abs.pos hx) (abs.pos hy))\n      (arg x + arg y : Real.Angle) using\n    3\n  simp_rw [← Real.Angle.coe_add, Real.Angle.sin_coe, Real.Angle.cos_coe, ofReal_cos, ofReal_sin,\n    cos_add_sin_I, ofReal_add, add_mul, exp_add, ofReal_mul]\n  rw [mul_assoc, mul_comm (exp _), ← mul_assoc (abs y : ℂ), abs_mul_exp_arg_mul_I, mul_comm y, ←\n    mul_assoc, abs_mul_exp_arg_mul_I]\n\n"}
{"name":"Complex.arg_div_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\nhx : Ne x 0\nhy : Ne y 0\n⊢ Eq (↑(HDiv.hDiv x y).arg) (HSub.hSub ↑x.arg ↑y.arg)","decl":"theorem arg_div_coe_angle {x y : ℂ} (hx : x ≠ 0) (hy : y ≠ 0) :\n    (arg (x / y) : Real.Angle) = arg x - arg y := by\n  rw [div_eq_mul_inv, arg_mul_coe_angle hx (inv_ne_zero hy), arg_inv_coe_angle, sub_eq_add_neg]\n\n"}
{"name":"Complex.arg_coe_angle_toReal_eq_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Eq (↑z.arg).toReal z.arg","decl":"@[simp]\ntheorem arg_coe_angle_toReal_eq_arg (z : ℂ) : (arg z : Real.Angle).toReal = arg z := by\n  rw [Real.Angle.toReal_coe_eq_self_iff_mem_Ioc]\n  exact arg_mem_Ioc _\n\n"}
{"name":"Complex.arg_coe_angle_eq_iff_eq_toReal","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nθ : Real.Angle\n⊢ Iff (Eq (↑z.arg) θ) (Eq z.arg θ.toReal)","decl":"theorem arg_coe_angle_eq_iff_eq_toReal {z : ℂ} {θ : Real.Angle} :\n    (arg z : Real.Angle) = θ ↔ arg z = θ.toReal := by\n  rw [← Real.Angle.toReal_inj, arg_coe_angle_toReal_eq_arg]\n\n"}
{"name":"Complex.arg_coe_angle_eq_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\n⊢ Iff (Eq ↑x.arg ↑y.arg) (Eq x.arg y.arg)","decl":"@[simp]\ntheorem arg_coe_angle_eq_iff {x y : ℂ} : (arg x : Real.Angle) = arg y ↔ arg x = arg y := by\n  simp_rw [← Real.Angle.toReal_inj, arg_coe_angle_toReal_eq_arg]\n\n"}
{"name":"Complex.arg_mul_eq_add_arg_iff","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\nhx₀ : Ne x 0\nhy₀ : Ne y 0\n⊢ Iff (Eq (HMul.hMul x y).arg (HAdd.hAdd x.arg y.arg)) (Membership.mem (Set.Ioc (Neg.neg Real.pi) Real.pi) (HAdd.hAdd x.arg y.arg))","decl":"lemma arg_mul_eq_add_arg_iff {x y : ℂ} (hx₀ : x ≠ 0) (hy₀ : y ≠ 0) :\n    (x * y).arg = x.arg + y.arg ↔ arg x + arg y ∈ Set.Ioc (-π) π := by\n  rw [← arg_coe_angle_toReal_eq_arg, arg_mul_coe_angle hx₀ hy₀, ← Real.Angle.coe_add,\n      Real.Angle.toReal_coe_eq_self_iff_mem_Ioc]\n\n"}
{"name":"Complex.arg_mul","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x y : Complex\nhx₀ : Ne x 0\nhy₀ : Ne y 0\na✝ : Membership.mem (Set.Ioc (Neg.neg Real.pi) Real.pi) (HAdd.hAdd x.arg y.arg)\n⊢ Eq (HMul.hMul x y).arg (HAdd.hAdd x.arg y.arg)","decl":"alias ⟨_, arg_mul⟩ := arg_mul_eq_add_arg_iff\n\n"}
{"name":"Complex.mem_slitPlane_iff_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\n⊢ Iff (Membership.mem Complex.slitPlane z) (And (Ne z.arg Real.pi) (Ne z 0))","decl":"open ComplexOrder in\n/-- An alternative description of the slit plane as consisting of nonzero complex numbers\nwhose argument is not π. -/\nlemma mem_slitPlane_iff_arg {z : ℂ} : z ∈ slitPlane ↔ z.arg ≠ π ∧ z ≠ 0 := by\n  simp only [mem_slitPlane_iff_not_le_zero, le_iff_lt_or_eq, ne_eq, arg_eq_pi_iff_lt_zero, not_or]\n\n"}
{"name":"Complex.slitPlane_arg_ne_pi","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhz : Membership.mem Complex.slitPlane z\n⊢ Ne z.arg Real.pi","decl":"lemma slitPlane_arg_ne_pi {z : ℂ} (hz : z ∈ slitPlane) : z.arg ≠ Real.pi :=\n  (mem_slitPlane_iff_arg.mp hz).1\n\n"}
{"name":"Complex.arg_eq_nhds_of_re_pos","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx : LT.lt 0 x.re\n⊢ (nhds x).EventuallyEq Complex.arg fun x => Real.arcsin (HDiv.hDiv x.im (Complex.abs x))","decl":"theorem arg_eq_nhds_of_re_pos (hx : 0 < x.re) : arg =ᶠ[𝓝 x] fun x => Real.arcsin (x.im / abs x) :=\n  ((continuous_re.tendsto _).eventually (lt_mem_nhds hx)).mono fun _ hy => arg_of_re_nonneg hy.le\n\n"}
{"name":"Complex.arg_eq_nhds_of_re_neg_of_im_pos","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx_re : LT.lt x.re 0\nhx_im : LT.lt 0 x.im\n⊢ (nhds x).EventuallyEq Complex.arg fun x => HAdd.hAdd (Real.arcsin (HDiv.hDiv (Neg.neg x).im (Complex.abs x))) Real.pi","decl":"theorem arg_eq_nhds_of_re_neg_of_im_pos (hx_re : x.re < 0) (hx_im : 0 < x.im) :\n    arg =ᶠ[𝓝 x] fun x => Real.arcsin ((-x).im / abs x) + π := by\n  suffices h_forall_nhds : ∀ᶠ y : ℂ in 𝓝 x, y.re < 0 ∧ 0 < y.im from\n    h_forall_nhds.mono fun y hy => arg_of_re_neg_of_im_nonneg hy.1 hy.2.le\n  refine IsOpen.eventually_mem ?_ (⟨hx_re, hx_im⟩ : x.re < 0 ∧ 0 < x.im)\n  exact\n    IsOpen.and (isOpen_lt continuous_re continuous_zero) (isOpen_lt continuous_zero continuous_im)\n\n"}
{"name":"Complex.arg_eq_nhds_of_re_neg_of_im_neg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nhx_re : LT.lt x.re 0\nhx_im : LT.lt x.im 0\n⊢ (nhds x).EventuallyEq Complex.arg fun x => HSub.hSub (Real.arcsin (HDiv.hDiv (Neg.neg x).im (Complex.abs x))) Real.pi","decl":"theorem arg_eq_nhds_of_re_neg_of_im_neg (hx_re : x.re < 0) (hx_im : x.im < 0) :\n    arg =ᶠ[𝓝 x] fun x => Real.arcsin ((-x).im / abs x) - π := by\n  suffices h_forall_nhds : ∀ᶠ y : ℂ in 𝓝 x, y.re < 0 ∧ y.im < 0 from\n    h_forall_nhds.mono fun y hy => arg_of_re_neg_of_im_neg hy.1 hy.2\n  refine IsOpen.eventually_mem ?_ (⟨hx_re, hx_im⟩ : x.re < 0 ∧ x.im < 0)\n  exact\n    IsOpen.and (isOpen_lt continuous_re continuous_zero) (isOpen_lt continuous_im continuous_zero)\n\n"}
{"name":"Complex.arg_eq_nhds_of_im_pos","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhz : LT.lt 0 z.im\n⊢ (nhds z).EventuallyEq Complex.arg fun x => Real.arccos (HDiv.hDiv x.re (Complex.abs x))","decl":"theorem arg_eq_nhds_of_im_pos (hz : 0 < im z) : arg =ᶠ[𝓝 z] fun x => Real.arccos (x.re / abs x) :=\n  ((continuous_im.tendsto _).eventually (lt_mem_nhds hz)).mono fun _ => arg_of_im_pos\n\n"}
{"name":"Complex.arg_eq_nhds_of_im_neg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhz : LT.lt z.im 0\n⊢ (nhds z).EventuallyEq Complex.arg fun x => Neg.neg (Real.arccos (HDiv.hDiv x.re (Complex.abs x)))","decl":"theorem arg_eq_nhds_of_im_neg (hz : im z < 0) : arg =ᶠ[𝓝 z] fun x => -Real.arccos (x.re / abs x) :=\n  ((continuous_im.tendsto _).eventually (gt_mem_nhds hz)).mono fun _ => arg_of_im_neg\n\n"}
{"name":"Complex.continuousAt_arg","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nh : Membership.mem Complex.slitPlane x\n⊢ ContinuousAt Complex.arg x","decl":"theorem continuousAt_arg (h : x ∈ slitPlane) : ContinuousAt arg x := by\n  have h₀ : abs x ≠ 0 := by\n    rw [abs.ne_zero_iff]\n    exact slitPlane_ne_zero h\n  rw [mem_slitPlane_iff, ← lt_or_lt_iff_ne] at h\n  rcases h with (hx_re | hx_im | hx_im)\n  exacts [(Real.continuousAt_arcsin.comp\n          (continuous_im.continuousAt.div continuous_abs.continuousAt h₀)).congr\n      (arg_eq_nhds_of_re_pos hx_re).symm,\n    (Real.continuous_arccos.continuousAt.comp\n            (continuous_re.continuousAt.div continuous_abs.continuousAt h₀)).neg.congr\n      (arg_eq_nhds_of_im_neg hx_im).symm,\n    (Real.continuous_arccos.continuousAt.comp\n          (continuous_re.continuousAt.div continuous_abs.continuousAt h₀)).congr\n      (arg_eq_nhds_of_im_pos hx_im).symm]\n\n"}
{"name":"Complex.tendsto_arg_nhdsWithin_im_neg_of_re_neg_of_im_zero","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhre : LT.lt z.re 0\nhim : Eq z.im 0\n⊢ Filter.Tendsto Complex.arg (nhdsWithin z (setOf fun z => LT.lt z.im 0)) (nhds (Neg.neg Real.pi))","decl":"theorem tendsto_arg_nhdsWithin_im_neg_of_re_neg_of_im_zero {z : ℂ} (hre : z.re < 0)\n    (him : z.im = 0) : Tendsto arg (𝓝[{ z : ℂ | z.im < 0 }] z) (𝓝 (-π)) := by\n  suffices H : Tendsto (fun x : ℂ => Real.arcsin ((-x).im / abs x) - π)\n      (𝓝[{ z : ℂ | z.im < 0 }] z) (𝓝 (-π)) by\n    refine H.congr' ?_\n    have : ∀ᶠ x : ℂ in 𝓝 z, x.re < 0 := continuous_re.tendsto z (gt_mem_nhds hre)\n    filter_upwards [self_mem_nhdsWithin, mem_nhdsWithin_of_mem_nhds this] with _ him hre\n    rw [arg, if_neg hre.not_le, if_neg him.not_le]\n  convert (Real.continuousAt_arcsin.comp_continuousWithinAt\n    ((continuous_im.continuousAt.comp_continuousWithinAt continuousWithinAt_neg).div\n      continuous_abs.continuousWithinAt _)\n    ).sub_const π using 1\n  · simp [him]\n  · lift z to ℝ using him\n    simpa using hre.ne\n\n"}
{"name":"Complex.continuousWithinAt_arg_of_re_neg_of_im_zero","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhre : LT.lt z.re 0\nhim : Eq z.im 0\n⊢ ContinuousWithinAt Complex.arg (setOf fun z => LE.le 0 z.im) z","decl":"theorem continuousWithinAt_arg_of_re_neg_of_im_zero {z : ℂ} (hre : z.re < 0) (him : z.im = 0) :\n    ContinuousWithinAt arg { z : ℂ | 0 ≤ z.im } z := by\n  have : arg =ᶠ[𝓝[{ z : ℂ | 0 ≤ z.im }] z] fun x => Real.arcsin ((-x).im / abs x) + π := by\n    have : ∀ᶠ x : ℂ in 𝓝 z, x.re < 0 := continuous_re.tendsto z (gt_mem_nhds hre)\n    filter_upwards [self_mem_nhdsWithin (s := { z : ℂ | 0 ≤ z.im }),\n      mem_nhdsWithin_of_mem_nhds this] with _ him hre\n    rw [arg, if_neg hre.not_le, if_pos him]\n  refine ContinuousWithinAt.congr_of_eventuallyEq ?_ this ?_\n  · refine\n      (Real.continuousAt_arcsin.comp_continuousWithinAt\n            ((continuous_im.continuousAt.comp_continuousWithinAt continuousWithinAt_neg).div\n              continuous_abs.continuousWithinAt ?_)).add\n        tendsto_const_nhds\n    lift z to ℝ using him\n    simpa using hre.ne\n  · rw [arg, if_neg hre.not_le, if_pos him.ge]\n\n"}
{"name":"Complex.tendsto_arg_nhdsWithin_im_nonneg_of_re_neg_of_im_zero","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"z : Complex\nhre : LT.lt z.re 0\nhim : Eq z.im 0\n⊢ Filter.Tendsto Complex.arg (nhdsWithin z (setOf fun z => LE.le 0 z.im)) (nhds Real.pi)","decl":"theorem tendsto_arg_nhdsWithin_im_nonneg_of_re_neg_of_im_zero {z : ℂ} (hre : z.re < 0)\n    (him : z.im = 0) : Tendsto arg (𝓝[{ z : ℂ | 0 ≤ z.im }] z) (𝓝 π) := by\n  simpa only [arg_eq_pi_iff.2 ⟨hre, him⟩] using\n    (continuousWithinAt_arg_of_re_neg_of_im_zero hre him).tendsto\n\n"}
{"name":"Complex.continuousAt_arg_coe_angle","module":"Mathlib.Analysis.SpecialFunctions.Complex.Arg","initialProofState":"x : Complex\nh : Ne x 0\n⊢ ContinuousAt (Function.comp Real.Angle.coe Complex.arg) x","decl":"theorem continuousAt_arg_coe_angle (h : x ≠ 0) : ContinuousAt ((↑) ∘ arg : ℂ → Real.Angle) x := by\n  by_cases hs : x ∈ slitPlane\n  · exact Real.Angle.continuous_coe.continuousAt.comp (continuousAt_arg hs)\n  · rw [← Function.comp_id (((↑) : ℝ → Real.Angle) ∘ arg),\n      (funext_iff.2 fun _ => (neg_neg _).symm : (id : ℂ → ℂ) = Neg.neg ∘ Neg.neg), ←\n      Function.comp_assoc]\n    refine ContinuousAt.comp ?_ continuous_neg.continuousAt\n    suffices ContinuousAt (Function.update (((↑) ∘ arg) ∘ Neg.neg : ℂ → Real.Angle) 0 π) (-x) by\n      rwa [continuousAt_update_of_ne (neg_ne_zero.2 h)] at this\n    have ha :\n      Function.update (((↑) ∘ arg) ∘ Neg.neg : ℂ → Real.Angle) 0 π = fun z =>\n        (arg z : Real.Angle) + π := by\n      rw [Function.update_eq_iff]\n      exact ⟨by simp, fun z hz => arg_neg_coe_angle hz⟩\n    rw [ha]\n    replace hs := mem_slitPlane_iff.mpr.mt hs\n    push_neg at hs\n    refine\n      (Real.Angle.continuous_coe.continuousAt.comp (continuousAt_arg (Or.inl ?_))).add\n        continuousAt_const\n    rw [neg_re, neg_pos]\n    exact hs.1.lt_of_ne fun h0 => h (Complex.ext_iff.2 ⟨h0, hs.2⟩)\n\n"}
