{"name":"Bornology.IsBounded.add","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddGroup E\ns t : Set E\nhs : Bornology.IsBounded s\nht : Bornology.IsBounded t\n⊢ Bornology.IsBounded (HAdd.hAdd s t)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.mul (hs : IsBounded s) (ht : IsBounded t) : IsBounded (s * t) := by\n  obtain ⟨Rs, hRs⟩ : ∃ R, ∀ x ∈ s, ‖x‖ ≤ R := hs.exists_norm_le'\n  obtain ⟨Rt, hRt⟩ : ∃ R, ∀ x ∈ t, ‖x‖ ≤ R := ht.exists_norm_le'\n  refine isBounded_iff_forall_norm_le'.2 ⟨Rs + Rt, ?_⟩\n  rintro z ⟨x, hx, y, hy, rfl⟩\n  exact norm_mul_le_of_le' (hRs x hx) (hRt y hy)\n\n"}
{"name":"Bornology.IsBounded.mul","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedGroup E\ns t : Set E\nhs : Bornology.IsBounded s\nht : Bornology.IsBounded t\n⊢ Bornology.IsBounded (HMul.hMul s t)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.mul (hs : IsBounded s) (ht : IsBounded t) : IsBounded (s * t) := by\n  obtain ⟨Rs, hRs⟩ : ∃ R, ∀ x ∈ s, ‖x‖ ≤ R := hs.exists_norm_le'\n  obtain ⟨Rt, hRt⟩ : ∃ R, ∀ x ∈ t, ‖x‖ ≤ R := ht.exists_norm_le'\n  refine isBounded_iff_forall_norm_le'.2 ⟨Rs + Rt, ?_⟩\n  rintro z ⟨x, hx, y, hy, rfl⟩\n  exact norm_mul_le_of_le' (hRs x hx) (hRt y hy)\n\n"}
{"name":"Bornology.IsBounded.of_add","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddGroup E\ns t : Set E\nhst : Bornology.IsBounded (HAdd.hAdd s t)\n⊢ Or (Bornology.IsBounded s) (Bornology.IsBounded t)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.of_mul (hst : IsBounded (s * t)) : IsBounded s ∨ IsBounded t :=\n  AntilipschitzWith.isBounded_of_image2_left _ (fun x => (isometry_mul_right x).antilipschitz) hst\n\n"}
{"name":"Bornology.IsBounded.of_mul","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedGroup E\ns t : Set E\nhst : Bornology.IsBounded (HMul.hMul s t)\n⊢ Or (Bornology.IsBounded s) (Bornology.IsBounded t)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.of_mul (hst : IsBounded (s * t)) : IsBounded s ∨ IsBounded t :=\n  AntilipschitzWith.isBounded_of_image2_left _ (fun x => (isometry_mul_right x).antilipschitz) hst\n\n"}
{"name":"Bornology.IsBounded.inv","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedGroup E\ns : Set E\na✝ : Bornology.IsBounded s\n⊢ Bornology.IsBounded (Inv.inv s)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.inv : IsBounded s → IsBounded s⁻¹ := by\n  simp_rw [isBounded_iff_forall_norm_le', ← image_inv_eq_inv, forall_mem_image, norm_inv']\n  exact id\n\n"}
{"name":"Bornology.IsBounded.neg","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddGroup E\ns : Set E\na✝ : Bornology.IsBounded s\n⊢ Bornology.IsBounded (Neg.neg s)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.inv : IsBounded s → IsBounded s⁻¹ := by\n  simp_rw [isBounded_iff_forall_norm_le', ← image_inv_eq_inv, forall_mem_image, norm_inv']\n  exact id\n\n"}
{"name":"Bornology.IsBounded.div","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedGroup E\ns t : Set E\nhs : Bornology.IsBounded s\nht : Bornology.IsBounded t\n⊢ Bornology.IsBounded (HDiv.hDiv s t)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.div (hs : IsBounded s) (ht : IsBounded t) : IsBounded (s / t) :=\n  div_eq_mul_inv s t ▸ hs.mul ht.inv\n\n"}
{"name":"Bornology.IsBounded.sub","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddGroup E\ns t : Set E\nhs : Bornology.IsBounded s\nht : Bornology.IsBounded t\n⊢ Bornology.IsBounded (HSub.hSub s t)","decl":"@[to_additive]\ntheorem Bornology.IsBounded.div (hs : IsBounded s) (ht : IsBounded t) : IsBounded (s / t) :=\n  div_eq_mul_inv s t ▸ hs.mul ht.inv\n\n"}
{"name":"infEdist_neg_neg","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nx : E\ns : Set E\n⊢ Eq (EMetric.infEdist (Neg.neg x) (Neg.neg s)) (EMetric.infEdist x s)","decl":"@[to_additive (attr := simp)]\ntheorem infEdist_inv_inv (x : E) (s : Set E) : infEdist x⁻¹ s⁻¹ = infEdist x s := by\n  rw [← image_inv_eq_inv, infEdist_image isometry_inv]\n\n"}
{"name":"infEdist_inv_inv","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nx : E\ns : Set E\n⊢ Eq (EMetric.infEdist (Inv.inv x) (Inv.inv s)) (EMetric.infEdist x s)","decl":"@[to_additive (attr := simp)]\ntheorem infEdist_inv_inv (x : E) (s : Set E) : infEdist x⁻¹ s⁻¹ = infEdist x s := by\n  rw [← image_inv_eq_inv, infEdist_image isometry_inv]\n\n"}
{"name":"infEdist_neg","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nx : E\ns : Set E\n⊢ Eq (EMetric.infEdist (Neg.neg x) s) (EMetric.infEdist x (Neg.neg s))","decl":"@[to_additive]\ntheorem infEdist_inv (x : E) (s : Set E) : infEdist x⁻¹ s = infEdist x s⁻¹ := by\n  rw [← infEdist_inv_inv, inv_inv]\n\n"}
{"name":"infEdist_inv","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nx : E\ns : Set E\n⊢ Eq (EMetric.infEdist (Inv.inv x) s) (EMetric.infEdist x (Inv.inv s))","decl":"@[to_additive]\ntheorem infEdist_inv (x : E) (s : Set E) : infEdist x⁻¹ s = infEdist x s⁻¹ := by\n  rw [← infEdist_inv_inv, inv_inv]\n\n"}
{"name":"ediam_mul_le","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nx y : Set E\n⊢ LE.le (EMetric.diam (HMul.hMul x y)) (HAdd.hAdd (EMetric.diam x) (EMetric.diam y))","decl":"@[to_additive]\ntheorem ediam_mul_le (x y : Set E) : EMetric.diam (x * y) ≤ EMetric.diam x + EMetric.diam y :=\n  (LipschitzOnWith.ediam_image2_le (· * ·) _ _\n        (fun _ _ => (isometry_mul_right _).lipschitz.lipschitzOnWith) fun _ _ =>\n        (isometry_mul_left _).lipschitz.lipschitzOnWith).trans_eq <|\n    by simp only [ENNReal.coe_one, one_mul]\n\n"}
{"name":"ediam_add_le","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nx y : Set E\n⊢ LE.le (EMetric.diam (HAdd.hAdd x y)) (HAdd.hAdd (EMetric.diam x) (EMetric.diam y))","decl":"@[to_additive]\ntheorem ediam_mul_le (x y : Set E) : EMetric.diam (x * y) ≤ EMetric.diam x + EMetric.diam y :=\n  (LipschitzOnWith.ediam_image2_le (· * ·) _ _\n        (fun _ _ => (isometry_mul_right _).lipschitz.lipschitzOnWith) fun _ _ =>\n        (isometry_mul_left _).lipschitz.lipschitzOnWith).trans_eq <|\n    by simp only [ENNReal.coe_one, one_mul]\n\n"}
{"name":"inv_thickening","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (Inv.inv (Metric.thickening δ s)) (Metric.thickening δ (Inv.inv s))","decl":"@[to_additive (attr := simp)]\ntheorem inv_thickening : (thickening δ s)⁻¹ = thickening δ s⁻¹ := by\n  simp_rw [thickening, ← infEdist_inv]\n  rfl\n\n"}
{"name":"neg_thickening","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (Neg.neg (Metric.thickening δ s)) (Metric.thickening δ (Neg.neg s))","decl":"@[to_additive (attr := simp)]\ntheorem inv_thickening : (thickening δ s)⁻¹ = thickening δ s⁻¹ := by\n  simp_rw [thickening, ← infEdist_inv]\n  rfl\n\n"}
{"name":"neg_cthickening","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (Neg.neg (Metric.cthickening δ s)) (Metric.cthickening δ (Neg.neg s))","decl":"@[to_additive (attr := simp)]\ntheorem inv_cthickening : (cthickening δ s)⁻¹ = cthickening δ s⁻¹ := by\n  simp_rw [cthickening, ← infEdist_inv]\n  rfl\n\n"}
{"name":"inv_cthickening","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (Inv.inv (Metric.cthickening δ s)) (Metric.cthickening δ (Inv.inv s))","decl":"@[to_additive (attr := simp)]\ntheorem inv_cthickening : (cthickening δ s)⁻¹ = cthickening δ s⁻¹ := by\n  simp_rw [cthickening, ← infEdist_inv]\n  rfl\n\n"}
{"name":"inv_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (Inv.inv (Metric.ball x δ)) (Metric.ball (Inv.inv x) δ)","decl":"@[to_additive (attr := simp)]\ntheorem inv_ball : (ball x δ)⁻¹ = ball x⁻¹ δ := (IsometryEquiv.inv E).preimage_ball x δ\n\n"}
{"name":"neg_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (Neg.neg (Metric.ball x δ)) (Metric.ball (Neg.neg x) δ)","decl":"@[to_additive (attr := simp)]\ntheorem inv_ball : (ball x δ)⁻¹ = ball x⁻¹ δ := (IsometryEquiv.inv E).preimage_ball x δ\n\n"}
{"name":"neg_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (Neg.neg (Metric.closedBall x δ)) (Metric.closedBall (Neg.neg x) δ)","decl":"@[to_additive (attr := simp)]\ntheorem inv_closedBall : (closedBall x δ)⁻¹ = closedBall x⁻¹ δ :=\n  (IsometryEquiv.inv E).preimage_closedBall x δ\n\n"}
{"name":"inv_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (Inv.inv (Metric.closedBall x δ)) (Metric.closedBall (Inv.inv x) δ)","decl":"@[to_additive (attr := simp)]\ntheorem inv_closedBall : (closedBall x δ)⁻¹ = closedBall x⁻¹ δ :=\n  (IsometryEquiv.inv E).preimage_closedBall x δ\n\n"}
{"name":"singleton_add_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HAdd.hAdd (Singleton.singleton x) (Metric.ball y δ)) (Metric.ball (HAdd.hAdd x y) δ)","decl":"@[to_additive]\ntheorem singleton_mul_ball : {x} * ball y δ = ball (x * y) δ := by\n  simp only [preimage_mul_ball, image_mul_left, singleton_mul, div_inv_eq_mul, mul_comm y x]\n\n"}
{"name":"singleton_mul_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HMul.hMul (Singleton.singleton x) (Metric.ball y δ)) (Metric.ball (HMul.hMul x y) δ)","decl":"@[to_additive]\ntheorem singleton_mul_ball : {x} * ball y δ = ball (x * y) δ := by\n  simp only [preimage_mul_ball, image_mul_left, singleton_mul, div_inv_eq_mul, mul_comm y x]\n\n"}
{"name":"singleton_div_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HDiv.hDiv (Singleton.singleton x) (Metric.ball y δ)) (Metric.ball (HDiv.hDiv x y) δ)","decl":"@[to_additive]\ntheorem singleton_div_ball : {x} / ball y δ = ball (x / y) δ := by\n  simp_rw [div_eq_mul_inv, inv_ball, singleton_mul_ball]\n\n"}
{"name":"singleton_sub_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HSub.hSub (Singleton.singleton x) (Metric.ball y δ)) (Metric.ball (HSub.hSub x y) δ)","decl":"@[to_additive]\ntheorem singleton_div_ball : {x} / ball y δ = ball (x / y) δ := by\n  simp_rw [div_eq_mul_inv, inv_ball, singleton_mul_ball]\n\n"}
{"name":"ball_add_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HAdd.hAdd (Metric.ball x δ) (Singleton.singleton y)) (Metric.ball (HAdd.hAdd x y) δ)","decl":"@[to_additive]\ntheorem ball_mul_singleton : ball x δ * {y} = ball (x * y) δ := by\n  rw [mul_comm, singleton_mul_ball, mul_comm y]\n\n"}
{"name":"ball_mul_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HMul.hMul (Metric.ball x δ) (Singleton.singleton y)) (Metric.ball (HMul.hMul x y) δ)","decl":"@[to_additive]\ntheorem ball_mul_singleton : ball x δ * {y} = ball (x * y) δ := by\n  rw [mul_comm, singleton_mul_ball, mul_comm y]\n\n"}
{"name":"ball_div_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HDiv.hDiv (Metric.ball x δ) (Singleton.singleton y)) (Metric.ball (HDiv.hDiv x y) δ)","decl":"@[to_additive]\ntheorem ball_div_singleton : ball x δ / {y} = ball (x / y) δ := by\n  simp_rw [div_eq_mul_inv, inv_singleton, ball_mul_singleton]\n\n"}
{"name":"ball_sub_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HSub.hSub (Metric.ball x δ) (Singleton.singleton y)) (Metric.ball (HSub.hSub x y) δ)","decl":"@[to_additive]\ntheorem ball_div_singleton : ball x δ / {y} = ball (x / y) δ := by\n  simp_rw [div_eq_mul_inv, inv_singleton, ball_mul_singleton]\n\n"}
{"name":"singleton_add_ball_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HAdd.hAdd (Singleton.singleton x) (Metric.ball 0 δ)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem singleton_mul_ball_one : {x} * ball 1 δ = ball x δ := by simp\n\n"}
{"name":"singleton_mul_ball_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HMul.hMul (Singleton.singleton x) (Metric.ball 1 δ)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem singleton_mul_ball_one : {x} * ball 1 δ = ball x δ := by simp\n\n"}
{"name":"singleton_sub_ball_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HSub.hSub (Singleton.singleton x) (Metric.ball 0 δ)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem singleton_div_ball_one : {x} / ball 1 δ = ball x δ := by\n  rw [singleton_div_ball, div_one]\n\n"}
{"name":"singleton_div_ball_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HDiv.hDiv (Singleton.singleton x) (Metric.ball 1 δ)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem singleton_div_ball_one : {x} / ball 1 δ = ball x δ := by\n  rw [singleton_div_ball, div_one]\n\n"}
{"name":"ball_one_mul_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HMul.hMul (Metric.ball 1 δ) (Singleton.singleton x)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem ball_one_mul_singleton : ball 1 δ * {x} = ball x δ := by simp [ball_mul_singleton]\n\n"}
{"name":"ball_zero_add_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HAdd.hAdd (Metric.ball 0 δ) (Singleton.singleton x)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem ball_one_mul_singleton : ball 1 δ * {x} = ball x δ := by simp [ball_mul_singleton]\n\n"}
{"name":"ball_zero_sub_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HSub.hSub (Metric.ball 0 δ) (Singleton.singleton x)) (Metric.ball (Neg.neg x) δ)","decl":"@[to_additive]\ntheorem ball_one_div_singleton : ball 1 δ / {x} = ball x⁻¹ δ := by\n  rw [ball_div_singleton, one_div]\n\n"}
{"name":"ball_one_div_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HDiv.hDiv (Metric.ball 1 δ) (Singleton.singleton x)) (Metric.ball (Inv.inv x) δ)","decl":"@[to_additive]\ntheorem ball_one_div_singleton : ball 1 δ / {x} = ball x⁻¹ δ := by\n  rw [ball_div_singleton, one_div]\n\n"}
{"name":"smul_ball_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HSMul.hSMul x (Metric.ball 1 δ)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem smul_ball_one : x • ball (1 : E) δ = ball x δ := by\n  rw [smul_ball, smul_eq_mul, mul_one]\n\n"}
{"name":"vadd_ball_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HVAdd.hVAdd x (Metric.ball 0 δ)) (Metric.ball x δ)","decl":"@[to_additive]\ntheorem smul_ball_one : x • ball (1 : E) δ = ball x δ := by\n  rw [smul_ball, smul_eq_mul, mul_one]\n\n"}
{"name":"singleton_mul_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HMul.hMul (Singleton.singleton x) (Metric.closedBall y δ)) (Metric.closedBall (HMul.hMul x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem singleton_mul_closedBall : {x} * closedBall y δ = closedBall (x * y) δ := by\n  simp_rw [singleton_mul, ← smul_eq_mul, image_smul, smul_closedBall]\n\n"}
{"name":"singleton_add_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HAdd.hAdd (Singleton.singleton x) (Metric.closedBall y δ)) (Metric.closedBall (HAdd.hAdd x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem singleton_mul_closedBall : {x} * closedBall y δ = closedBall (x * y) δ := by\n  simp_rw [singleton_mul, ← smul_eq_mul, image_smul, smul_closedBall]\n\n"}
{"name":"singleton_div_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HDiv.hDiv (Singleton.singleton x) (Metric.closedBall y δ)) (Metric.closedBall (HDiv.hDiv x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem singleton_div_closedBall : {x} / closedBall y δ = closedBall (x / y) δ := by\n  simp_rw [div_eq_mul_inv, inv_closedBall, singleton_mul_closedBall]\n\n"}
{"name":"singleton_sub_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HSub.hSub (Singleton.singleton x) (Metric.closedBall y δ)) (Metric.closedBall (HSub.hSub x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem singleton_div_closedBall : {x} / closedBall y δ = closedBall (x / y) δ := by\n  simp_rw [div_eq_mul_inv, inv_closedBall, singleton_mul_closedBall]\n\n"}
{"name":"closedBall_mul_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HMul.hMul (Metric.closedBall x δ) (Singleton.singleton y)) (Metric.closedBall (HMul.hMul x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem closedBall_mul_singleton : closedBall x δ * {y} = closedBall (x * y) δ := by\n  simp [mul_comm _ {y}, mul_comm y]\n\n"}
{"name":"closedBall_add_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HAdd.hAdd (Metric.closedBall x δ) (Singleton.singleton y)) (Metric.closedBall (HAdd.hAdd x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem closedBall_mul_singleton : closedBall x δ * {y} = closedBall (x * y) δ := by\n  simp [mul_comm _ {y}, mul_comm y]\n\n"}
{"name":"closedBall_div_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HDiv.hDiv (Metric.closedBall x δ) (Singleton.singleton y)) (Metric.closedBall (HDiv.hDiv x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem closedBall_div_singleton : closedBall x δ / {y} = closedBall (x / y) δ := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"closedBall_sub_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx y : E\n⊢ Eq (HSub.hSub (Metric.closedBall x δ) (Singleton.singleton y)) (Metric.closedBall (HSub.hSub x y) δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem closedBall_div_singleton : closedBall x δ / {y} = closedBall (x / y) δ := by\n  simp [div_eq_mul_inv]\n\n"}
{"name":"singleton_mul_closedBall_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HMul.hMul (Singleton.singleton x) (Metric.closedBall 1 δ)) (Metric.closedBall x δ)","decl":"@[to_additive]\ntheorem singleton_mul_closedBall_one : {x} * closedBall 1 δ = closedBall x δ := by simp\n\n"}
{"name":"singleton_add_closedBall_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HAdd.hAdd (Singleton.singleton x) (Metric.closedBall 0 δ)) (Metric.closedBall x δ)","decl":"@[to_additive]\ntheorem singleton_mul_closedBall_one : {x} * closedBall 1 δ = closedBall x δ := by simp\n\n"}
{"name":"singleton_sub_closedBall_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HSub.hSub (Singleton.singleton x) (Metric.closedBall 0 δ)) (Metric.closedBall x δ)","decl":"@[to_additive]\ntheorem singleton_div_closedBall_one : {x} / closedBall 1 δ = closedBall x δ := by\n  rw [singleton_div_closedBall, div_one]\n\n"}
{"name":"singleton_div_closedBall_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HDiv.hDiv (Singleton.singleton x) (Metric.closedBall 1 δ)) (Metric.closedBall x δ)","decl":"@[to_additive]\ntheorem singleton_div_closedBall_one : {x} / closedBall 1 δ = closedBall x δ := by\n  rw [singleton_div_closedBall, div_one]\n\n"}
{"name":"closedBall_zero_add_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HAdd.hAdd (Metric.closedBall 0 δ) (Singleton.singleton x)) (Metric.closedBall x δ)","decl":"@[to_additive]\ntheorem closedBall_one_mul_singleton : closedBall 1 δ * {x} = closedBall x δ := by simp\n\n"}
{"name":"closedBall_one_mul_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HMul.hMul (Metric.closedBall 1 δ) (Singleton.singleton x)) (Metric.closedBall x δ)","decl":"@[to_additive]\ntheorem closedBall_one_mul_singleton : closedBall 1 δ * {x} = closedBall x δ := by simp\n\n"}
{"name":"closedBall_one_div_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HDiv.hDiv (Metric.closedBall 1 δ) (Singleton.singleton x)) (Metric.closedBall (Inv.inv x) δ)","decl":"@[to_additive]\ntheorem closedBall_one_div_singleton : closedBall 1 δ / {x} = closedBall x⁻¹ δ := by simp\n\n"}
{"name":"closedBall_zero_sub_singleton","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HSub.hSub (Metric.closedBall 0 δ) (Singleton.singleton x)) (Metric.closedBall (Neg.neg x) δ)","decl":"@[to_additive]\ntheorem closedBall_one_div_singleton : closedBall 1 δ / {x} = closedBall x⁻¹ δ := by simp\n\n"}
{"name":"smul_closedBall_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\nx : E\n⊢ Eq (HSMul.hSMul x (Metric.closedBall 1 δ)) (Metric.closedBall x δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem smul_closedBall_one : x • closedBall (1 : E) δ = closedBall x δ := by simp\n\n"}
{"name":"vadd_closedBall_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\nx : E\n⊢ Eq (HVAdd.hVAdd x (Metric.closedBall 0 δ)) (Metric.closedBall x δ)","decl":"@[to_additive (attr := simp 1100)]\ntheorem smul_closedBall_one : x • closedBall (1 : E) δ = closedBall x δ := by simp\n\n"}
{"name":"mul_ball_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HMul.hMul s (Metric.ball 1 δ)) (Metric.thickening δ s)","decl":"@[to_additive]\ntheorem mul_ball_one : s * ball 1 δ = thickening δ s := by\n  rw [thickening_eq_biUnion_ball]\n  convert iUnion₂_mul (fun x (_ : x ∈ s) => {x}) (ball (1 : E) δ)\n  · exact s.biUnion_of_singleton.symm\n  ext x\n  simp_rw [singleton_mul_ball, mul_one]\n\n"}
{"name":"add_ball_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HAdd.hAdd s (Metric.ball 0 δ)) (Metric.thickening δ s)","decl":"@[to_additive]\ntheorem mul_ball_one : s * ball 1 δ = thickening δ s := by\n  rw [thickening_eq_biUnion_ball]\n  convert iUnion₂_mul (fun x (_ : x ∈ s) => {x}) (ball (1 : E) δ)\n  · exact s.biUnion_of_singleton.symm\n  ext x\n  simp_rw [singleton_mul_ball, mul_one]\n\n"}
{"name":"div_ball_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HDiv.hDiv s (Metric.ball 1 δ)) (Metric.thickening δ s)","decl":"@[to_additive]\ntheorem div_ball_one : s / ball 1 δ = thickening δ s := by simp [div_eq_mul_inv, mul_ball_one]\n\n"}
{"name":"sub_ball_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HSub.hSub s (Metric.ball 0 δ)) (Metric.thickening δ s)","decl":"@[to_additive]\ntheorem div_ball_one : s / ball 1 δ = thickening δ s := by simp [div_eq_mul_inv, mul_ball_one]\n\n"}
{"name":"ball_mul_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HMul.hMul (Metric.ball 1 δ) s) (Metric.thickening δ s)","decl":"@[to_additive]\ntheorem ball_mul_one : ball 1 δ * s = thickening δ s := by rw [mul_comm, mul_ball_one]\n\n"}
{"name":"ball_add_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HAdd.hAdd (Metric.ball 0 δ) s) (Metric.thickening δ s)","decl":"@[to_additive]\ntheorem ball_mul_one : ball 1 δ * s = thickening δ s := by rw [mul_comm, mul_ball_one]\n\n"}
{"name":"ball_sub_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HSub.hSub (Metric.ball 0 δ) s) (Metric.thickening δ (Neg.neg s))","decl":"@[to_additive]\ntheorem ball_div_one : ball 1 δ / s = thickening δ s⁻¹ := by simp [div_eq_mul_inv, ball_mul_one]\n\n"}
{"name":"ball_div_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\n⊢ Eq (HDiv.hDiv (Metric.ball 1 δ) s) (Metric.thickening δ (Inv.inv s))","decl":"@[to_additive]\ntheorem ball_div_one : ball 1 δ / s = thickening δ s⁻¹ := by simp [div_eq_mul_inv, ball_mul_one]\n\n"}
{"name":"mul_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HMul.hMul s (Metric.ball x δ)) (HSMul.hSMul x (Metric.thickening δ s))","decl":"@[to_additive (attr := simp)]\ntheorem mul_ball : s * ball x δ = x • thickening δ s := by\n  rw [← smul_ball_one, mul_smul_comm, mul_ball_one]\n\n"}
{"name":"add_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HAdd.hAdd s (Metric.ball x δ)) (HVAdd.hVAdd x (Metric.thickening δ s))","decl":"@[to_additive (attr := simp)]\ntheorem mul_ball : s * ball x δ = x • thickening δ s := by\n  rw [← smul_ball_one, mul_smul_comm, mul_ball_one]\n\n"}
{"name":"sub_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HSub.hSub s (Metric.ball x δ)) (HVAdd.hVAdd (Neg.neg x) (Metric.thickening δ s))","decl":"@[to_additive (attr := simp)]\ntheorem div_ball : s / ball x δ = x⁻¹ • thickening δ s := by simp [div_eq_mul_inv]\n\n"}
{"name":"div_ball","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HDiv.hDiv s (Metric.ball x δ)) (HSMul.hSMul (Inv.inv x) (Metric.thickening δ s))","decl":"@[to_additive (attr := simp)]\ntheorem div_ball : s / ball x δ = x⁻¹ • thickening δ s := by simp [div_eq_mul_inv]\n\n"}
{"name":"ball_add","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HAdd.hAdd (Metric.ball x δ) s) (HVAdd.hVAdd x (Metric.thickening δ s))","decl":"@[to_additive (attr := simp)]\ntheorem ball_mul : ball x δ * s = x • thickening δ s := by rw [mul_comm, mul_ball]\n\n"}
{"name":"ball_mul","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HMul.hMul (Metric.ball x δ) s) (HSMul.hSMul x (Metric.thickening δ s))","decl":"@[to_additive (attr := simp)]\ntheorem ball_mul : ball x δ * s = x • thickening δ s := by rw [mul_comm, mul_ball]\n\n"}
{"name":"ball_div","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HDiv.hDiv (Metric.ball x δ) s) (HSMul.hSMul x (Metric.thickening δ (Inv.inv s)))","decl":"@[to_additive (attr := simp)]\ntheorem ball_div : ball x δ / s = x • thickening δ s⁻¹ := by simp [div_eq_mul_inv]\n\n"}
{"name":"ball_sub","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nx : E\n⊢ Eq (HSub.hSub (Metric.ball x δ) s) (HVAdd.hVAdd x (Metric.thickening δ (Neg.neg s)))","decl":"@[to_additive (attr := simp)]\ntheorem ball_div : ball x δ / s = x • thickening δ s⁻¹ := by simp [div_eq_mul_inv]\n\n"}
{"name":"IsCompact.add_closedBall_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HAdd.hAdd s (Metric.closedBall 0 δ)) (Metric.cthickening δ s)","decl":"@[to_additive]\ntheorem IsCompact.mul_closedBall_one (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    s * closedBall (1 : E) δ = cthickening δ s := by\n  rw [hs.cthickening_eq_biUnion_closedBall hδ]\n  ext x\n  simp only [mem_mul, dist_eq_norm_div, exists_prop, mem_iUnion, mem_closedBall, exists_and_left,\n    mem_closedBall_one_iff, ← eq_div_iff_mul_eq'', div_one, exists_eq_right]\n\n"}
{"name":"IsCompact.mul_closedBall_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HMul.hMul s (Metric.closedBall 1 δ)) (Metric.cthickening δ s)","decl":"@[to_additive]\ntheorem IsCompact.mul_closedBall_one (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    s * closedBall (1 : E) δ = cthickening δ s := by\n  rw [hs.cthickening_eq_biUnion_closedBall hδ]\n  ext x\n  simp only [mem_mul, dist_eq_norm_div, exists_prop, mem_iUnion, mem_closedBall, exists_and_left,\n    mem_closedBall_one_iff, ← eq_div_iff_mul_eq'', div_one, exists_eq_right]\n\n"}
{"name":"IsCompact.sub_closedBall_zero","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HSub.hSub s (Metric.closedBall 0 δ)) (Metric.cthickening δ s)","decl":"@[to_additive]\ntheorem IsCompact.div_closedBall_one (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    s / closedBall 1 δ = cthickening δ s := by simp [div_eq_mul_inv, hs.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.div_closedBall_one","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HDiv.hDiv s (Metric.closedBall 1 δ)) (Metric.cthickening δ s)","decl":"@[to_additive]\ntheorem IsCompact.div_closedBall_one (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    s / closedBall 1 δ = cthickening δ s := by simp [div_eq_mul_inv, hs.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.closedBall_zero_add","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HAdd.hAdd (Metric.closedBall 0 δ) s) (Metric.cthickening δ s)","decl":"@[to_additive]\ntheorem IsCompact.closedBall_one_mul (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    closedBall 1 δ * s = cthickening δ s := by rw [mul_comm, hs.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.closedBall_one_mul","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HMul.hMul (Metric.closedBall 1 δ) s) (Metric.cthickening δ s)","decl":"@[to_additive]\ntheorem IsCompact.closedBall_one_mul (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    closedBall 1 δ * s = cthickening δ s := by rw [mul_comm, hs.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.closedBall_zero_sub","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HSub.hSub (Metric.closedBall 0 δ) s) (Metric.cthickening δ (Neg.neg s))","decl":"@[to_additive]\ntheorem IsCompact.closedBall_one_div (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    closedBall 1 δ / s = cthickening δ s⁻¹ := by\n  simp [div_eq_mul_inv, mul_comm, hs.inv.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.closedBall_one_div","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\n⊢ Eq (HDiv.hDiv (Metric.closedBall 1 δ) s) (Metric.cthickening δ (Inv.inv s))","decl":"@[to_additive]\ntheorem IsCompact.closedBall_one_div (hs : IsCompact s) (hδ : 0 ≤ δ) :\n    closedBall 1 δ / s = cthickening δ s⁻¹ := by\n  simp [div_eq_mul_inv, mul_comm, hs.inv.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.add_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HAdd.hAdd s (Metric.closedBall x δ)) (HVAdd.hVAdd x (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.mul_closedBall (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    s * closedBall x δ = x • cthickening δ s := by\n  rw [← smul_closedBall_one, mul_smul_comm, hs.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.mul_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HMul.hMul s (Metric.closedBall x δ)) (HSMul.hSMul x (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.mul_closedBall (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    s * closedBall x δ = x • cthickening δ s := by\n  rw [← smul_closedBall_one, mul_smul_comm, hs.mul_closedBall_one hδ]\n\n"}
{"name":"IsCompact.div_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HDiv.hDiv s (Metric.closedBall x δ)) (HSMul.hSMul (Inv.inv x) (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.div_closedBall (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    s / closedBall x δ = x⁻¹ • cthickening δ s := by\n  simp [div_eq_mul_inv, mul_comm, hs.mul_closedBall hδ]\n\n"}
{"name":"IsCompact.sub_closedBall","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HSub.hSub s (Metric.closedBall x δ)) (HVAdd.hVAdd (Neg.neg x) (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.div_closedBall (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    s / closedBall x δ = x⁻¹ • cthickening δ s := by\n  simp [div_eq_mul_inv, mul_comm, hs.mul_closedBall hδ]\n\n"}
{"name":"IsCompact.closedBall_mul","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HMul.hMul (Metric.closedBall x δ) s) (HSMul.hSMul x (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.closedBall_mul (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    closedBall x δ * s = x • cthickening δ s := by rw [mul_comm, hs.mul_closedBall hδ]\n\n"}
{"name":"IsCompact.closedBall_add","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HAdd.hAdd (Metric.closedBall x δ) s) (HVAdd.hVAdd x (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.closedBall_mul (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    closedBall x δ * s = x • cthickening δ s := by rw [mul_comm, hs.mul_closedBall hδ]\n\n"}
{"name":"IsCompact.closedBall_sub","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedAddCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HAdd.hAdd (Metric.closedBall x δ) s) (HVAdd.hVAdd x (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.closedBall_div (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    closedBall x δ * s = x • cthickening δ s := by\n  simp [div_eq_mul_inv, hs.closedBall_mul hδ]\n\n"}
{"name":"IsCompact.closedBall_div","module":"Mathlib.Analysis.Normed.Group.Pointwise","initialProofState":"E : Type u_1\ninst✝ : SeminormedCommGroup E\nδ : Real\ns : Set E\nhs : IsCompact s\nhδ : LE.le 0 δ\nx : E\n⊢ Eq (HMul.hMul (Metric.closedBall x δ) s) (HSMul.hSMul x (Metric.cthickening δ s))","decl":"@[to_additive]\ntheorem IsCompact.closedBall_div (hs : IsCompact s) (hδ : 0 ≤ δ) (x : E) :\n    closedBall x δ * s = x • cthickening δ s := by\n  simp [div_eq_mul_inv, hs.closedBall_mul hδ]\n\n"}
