{"name":"Nat.monotone_factorial","module":"Mathlib.Data.Nat.Factorial.BigOperators","initialProofState":"⊢ Monotone Nat.factorial","decl":"lemma monotone_factorial : Monotone factorial := fun _ _ => factorial_le\n\n"}
{"name":"Nat.prod_factorial_pos","module":"Mathlib.Data.Nat.Factorial.BigOperators","initialProofState":"α : Type u_1\ns : Finset α\nf : α → Nat\n⊢ LT.lt 0 (s.prod fun i => (f i).factorial)","decl":"theorem prod_factorial_pos : 0 < ∏ i ∈ s, (f i)! := by positivity\n\n"}
{"name":"Nat.prod_factorial_dvd_factorial_sum","module":"Mathlib.Data.Nat.Factorial.BigOperators","initialProofState":"α : Type u_1\ns : Finset α\nf : α → Nat\n⊢ Dvd.dvd (s.prod fun i => (f i).factorial) (s.sum fun i => f i).factorial","decl":"theorem prod_factorial_dvd_factorial_sum : (∏ i ∈ s, (f i)!) ∣ (∑ i ∈ s, f i)! := by\n  induction' s using Finset.cons_induction_on with a s has ih\n  · simp\n  · rw [prod_cons, Finset.sum_cons]\n    exact (mul_dvd_mul_left _ ih).trans (Nat.factorial_mul_factorial_dvd_factorial_add _ _)\n\n"}
{"name":"Nat.ascFactorial_eq_prod_range","module":"Mathlib.Data.Nat.Factorial.BigOperators","initialProofState":"n k : Nat\n⊢ Eq (n.ascFactorial k) ((Finset.range k).prod fun i => HAdd.hAdd n i)","decl":"theorem ascFactorial_eq_prod_range (n : ℕ) : ∀ k, n.ascFactorial k = ∏ i ∈ range k, (n + i)\n  | 0 => rfl\n  | k + 1 => by rw [ascFactorial, prod_range_succ, mul_comm, ascFactorial_eq_prod_range n k]\n\n"}
{"name":"Nat.descFactorial_eq_prod_range","module":"Mathlib.Data.Nat.Factorial.BigOperators","initialProofState":"n k : Nat\n⊢ Eq (n.descFactorial k) ((Finset.range k).prod fun i => HSub.hSub n i)","decl":"theorem descFactorial_eq_prod_range (n : ℕ) : ∀ k, n.descFactorial k = ∏ i ∈ range k, (n - i)\n  | 0 => rfl\n  | k + 1 => by rw [descFactorial, prod_range_succ, mul_comm, descFactorial_eq_prod_range n k]\n\n"}
