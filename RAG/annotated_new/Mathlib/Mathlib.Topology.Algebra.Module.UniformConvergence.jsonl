{"name":"UniformFun.continuousSMul_induced_of_range_bounded","module":"Mathlib.Topology.Algebra.Module.UniformConvergence","initialProofState":"𝕜 : Type u_1\nα : Type u_2\nE : Type u_3\nH : Type u_4\nhom : Type u_5\ninst✝¹⁰ : NormedField 𝕜\ninst✝⁹ : AddCommGroup H\ninst✝⁸ : Module 𝕜 H\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace H\ninst✝⁴ : UniformSpace E\ninst✝³ : UniformAddGroup E\ninst✝² : ContinuousSMul 𝕜 E\ninst✝¹ : FunLike hom H (α → E)\ninst✝ : LinearMapClass hom 𝕜 H (α → E)\nφ : hom\nhφ : Topology.IsInducing (Function.comp ⇑UniformFun.ofFun ⇑φ)\nh : ∀ (u : H), Bornology.IsVonNBounded 𝕜 (Set.range (φ u))\n⊢ ContinuousSMul 𝕜 H","decl":"/-- Let `E` be a topological vector space over a normed field `𝕜`, let `α` be any type.\nLet `H` be a submodule of `α →ᵤ E` such that the range of each `f ∈ H` is von Neumann bounded.\nThen `H` is a topological vector space over `𝕜`,\ni.e., the pointwise scalar multiplication is continuous in both variables.\n\nFor convenience we require that `H` is a vector space over `𝕜`\nwith a topology induced by `UniformFun.ofFun ∘ φ`, where `φ : H →ₗ[𝕜] (α → E)`. -/\nlemma UniformFun.continuousSMul_induced_of_range_bounded (φ : hom)\n    (hφ : IsInducing (ofFun ∘ φ)) (h : ∀ u : H, Bornology.IsVonNBounded 𝕜 (Set.range (φ u))) :\n    ContinuousSMul 𝕜 H := by\n  have : TopologicalAddGroup H :=\n    let ofFun' : (α → E) →+ (α →ᵤ E) := AddMonoidHom.id _\n    IsInducing.topologicalAddGroup (ofFun'.comp (φ : H →+ (α → E))) hφ\n  have hb : (𝓝 (0 : H)).HasBasis (· ∈ 𝓝 (0 : E)) fun V ↦ {u | ∀ x, φ u x ∈ V} := by\n    simp only [hφ.nhds_eq_comap, Function.comp_apply, map_zero]\n    exact UniformFun.hasBasis_nhds_zero.comap _\n  apply ContinuousSMul.of_basis_zero hb\n  · intro U hU\n    have : Tendsto (fun x : 𝕜 × E ↦ x.1 • x.2) (𝓝 0) (𝓝 0) :=\n      continuous_smul.tendsto' _ _ (zero_smul _ _)\n    rcases ((Filter.basis_sets _).prod_nhds (Filter.basis_sets _)).tendsto_left_iff.1 this U hU\n      with ⟨⟨V, W⟩, ⟨hV, hW⟩, hVW⟩\n    refine ⟨V, hV, W, hW, Set.smul_subset_iff.2 fun a ha u hu x ↦ ?_⟩\n    rw [map_smul]\n    exact hVW (Set.mk_mem_prod ha (hu x))\n  · intro c U hU\n    have : Tendsto (c • · : E → E) (𝓝 0) (𝓝 0) :=\n      (continuous_const_smul c).tendsto' _ _ (smul_zero _)\n    refine ⟨_, this hU, fun u hu x ↦ ?_⟩\n    simpa only [map_smul] using hu x\n  · intro u U hU\n    simp only [Set.mem_setOf_eq, map_smul, Pi.smul_apply]\n    simpa only [Set.mapsTo_range_iff] using (h u hU).eventually_nhds_zero (mem_of_mem_nhds hU)\n\n"}
{"name":"UniformOnFun.continuousSMul_induced_of_image_bounded","module":"Mathlib.Topology.Algebra.Module.UniformConvergence","initialProofState":"𝕜 : Type u_1\nα : Type u_2\nE : Type u_3\nH : Type u_4\nhom : Type u_5\ninst✝¹⁰ : NormedField 𝕜\ninst✝⁹ : AddCommGroup H\ninst✝⁸ : Module 𝕜 H\ninst✝⁷ : AddCommGroup E\ninst✝⁶ : Module 𝕜 E\ninst✝⁵ : TopologicalSpace H\ninst✝⁴ : UniformSpace E\ninst✝³ : UniformAddGroup E\ninst✝² : ContinuousSMul 𝕜 E\n𝔖 : Set (Set α)\ninst✝¹ : FunLike hom H (α → E)\ninst✝ : LinearMapClass hom 𝕜 H (α → E)\nφ : hom\nhφ : Topology.IsInducing (Function.comp ⇑(UniformOnFun.ofFun 𝔖) ⇑φ)\nh : ∀ (u : H) (s : Set α), Membership.mem 𝔖 s → Bornology.IsVonNBounded 𝕜 (Set.image (φ u) s)\n⊢ ContinuousSMul 𝕜 H","decl":"/-- Let `E` be a TVS, `𝔖 : Set (Set α)` and `H` a submodule of `α →ᵤ[𝔖] E`. If the image of any\n`S ∈ 𝔖` by any `u ∈ H` is bounded (in the sense of `Bornology.IsVonNBounded`), then `H`,\nequipped with the topology of `𝔖`-convergence, is a TVS.\n\nFor convenience, we don't literally ask for `H : Submodule (α →ᵤ[𝔖] E)`. Instead, we prove the\nresult for any vector space `H` equipped with a linear inducing to `α →ᵤ[𝔖] E`, which is often\neasier to use. We also state the `Submodule` version as\n`UniformOnFun.continuousSMul_submodule_of_image_bounded`. -/\nlemma UniformOnFun.continuousSMul_induced_of_image_bounded (φ : hom) (hφ : IsInducing (ofFun 𝔖 ∘ φ))\n    (h : ∀ u : H, ∀ s ∈ 𝔖, Bornology.IsVonNBounded 𝕜 ((φ u : α → E) '' s)) :\n    ContinuousSMul 𝕜 H := by\n  obtain rfl := hφ.eq_induced; clear hφ\n  simp only [induced_iInf, UniformOnFun.topologicalSpace_eq, induced_compose]\n  refine continuousSMul_iInf fun s ↦ continuousSMul_iInf fun hs ↦ ?_\n  letI : TopologicalSpace H :=\n    .induced (UniformFun.ofFun ∘ s.restrict ∘ φ) (UniformFun.topologicalSpace s E)\n  set φ' : H →ₗ[𝕜] (s → E) :=\n    { toFun := s.restrict ∘ φ,\n      map_smul' := fun c x ↦ by exact congr_arg s.restrict (map_smul φ c x),\n      map_add' := fun x y ↦ by exact congr_arg s.restrict (map_add φ x y) }\n  refine UniformFun.continuousSMul_induced_of_range_bounded 𝕜 s E H φ' ⟨rfl⟩ fun u ↦ ?_\n  simpa only [Set.image_eq_range] using h u s hs\n\n"}
{"name":"UniformOnFun.continuousSMul_submodule_of_image_bounded","module":"Mathlib.Topology.Algebra.Module.UniformConvergence","initialProofState":"𝕜 : Type u_1\nα : Type u_2\nE : Type u_3\ninst✝⁵ : NormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : UniformSpace E\ninst✝¹ : UniformAddGroup E\ninst✝ : ContinuousSMul 𝕜 E\n𝔖 : Set (Set α)\nH : Submodule 𝕜 (UniformOnFun α E 𝔖)\nh : ∀ (u : UniformOnFun α E 𝔖), Membership.mem H u → ∀ (s : Set α), Membership.mem 𝔖 s → Bornology.IsVonNBounded 𝕜 (Set.image u s)\n⊢ ContinuousSMul 𝕜 (Subtype fun x => Membership.mem H x)","decl":"/-- Let `E` be a TVS, `𝔖 : Set (Set α)` and `H` a submodule of `α →ᵤ[𝔖] E`. If the image of any\n`S ∈ 𝔖` by any `u ∈ H` is bounded (in the sense of `Bornology.IsVonNBounded`), then `H`,\nequipped with the topology of `𝔖`-convergence, is a TVS.\n\nIf you have a hard time using this lemma, try the one above instead. -/\ntheorem UniformOnFun.continuousSMul_submodule_of_image_bounded (H : Submodule 𝕜 (α →ᵤ[𝔖] E))\n    (h : ∀ u ∈ H, ∀ s ∈ 𝔖, Bornology.IsVonNBounded 𝕜 (u '' s)) :\n    @ContinuousSMul 𝕜 H _ _ ((UniformOnFun.topologicalSpace α E 𝔖).induced ((↑) : H → α →ᵤ[𝔖] E)) :=\n  UniformOnFun.continuousSMul_induced_of_image_bounded 𝕜 α E H\n    (LinearMap.id.domRestrict H : H →ₗ[𝕜] α → E) IsInducing.subtypeVal fun ⟨u, hu⟩ => h u hu\n\n"}
