{"name":"NNReal.sq_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Eq (HPow.hPow (NNReal.sqrt x) 2) x","decl":"@[simp] lemma sq_sqrt (x : ℝ≥0) : sqrt x ^ 2 = x := sqrt.symm_apply_apply _\n\n"}
{"name":"NNReal.sqrt_sq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Eq (NNReal.sqrt (HPow.hPow x 2)) x","decl":"@[simp] lemma sqrt_sq (x : ℝ≥0) : sqrt (x ^ 2) = x := sqrt.apply_symm_apply _\n\n"}
{"name":"NNReal.mul_self_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Eq (HMul.hMul (NNReal.sqrt x) (NNReal.sqrt x)) x","decl":"@[simp] lemma mul_self_sqrt (x : ℝ≥0) : sqrt x * sqrt x = x := by rw [← sq, sq_sqrt]\n\n"}
{"name":"NNReal.sqrt_mul_self","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Eq (NNReal.sqrt (HMul.hMul x x)) x","decl":"@[simp] lemma sqrt_mul_self (x : ℝ≥0) : sqrt (x * x) = x := by rw [← sq, sqrt_sq]\n\n"}
{"name":"NNReal.sqrt_le_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Iff (LE.le (NNReal.sqrt x) (NNReal.sqrt y)) (LE.le x y)","decl":"lemma sqrt_le_sqrt : sqrt x ≤ sqrt y ↔ x ≤ y := sqrt.le_iff_le\n\n"}
{"name":"NNReal.sqrt_lt_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Iff (LT.lt (NNReal.sqrt x) (NNReal.sqrt y)) (LT.lt x y)","decl":"lemma sqrt_lt_sqrt : sqrt x < sqrt y ↔ x < y := sqrt.lt_iff_lt\n\n"}
{"name":"NNReal.sqrt_eq_iff_eq_sq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Iff (Eq (NNReal.sqrt x) y) (Eq x (HPow.hPow y 2))","decl":"lemma sqrt_eq_iff_eq_sq : sqrt x = y ↔ x = y ^ 2 := sqrt.toEquiv.apply_eq_iff_eq_symm_apply\n\n"}
{"name":"NNReal.sqrt_le_iff_le_sq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Iff (LE.le (NNReal.sqrt x) y) (LE.le x (HPow.hPow y 2))","decl":"lemma sqrt_le_iff_le_sq : sqrt x ≤ y ↔ x ≤ y ^ 2 := sqrt.to_galoisConnection _ _\n\n"}
{"name":"NNReal.le_sqrt_iff_sq_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Iff (LE.le x (NNReal.sqrt y)) (LE.le (HPow.hPow x 2) y)","decl":"lemma le_sqrt_iff_sq_le : x ≤ sqrt y ↔ x ^ 2 ≤ y := (sqrt.symm.to_galoisConnection _ _).symm\n\n\n"}
{"name":"NNReal.sqrt_eq_zero","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Iff (Eq (NNReal.sqrt x) 0) (Eq x 0)","decl":"@[simp] lemma sqrt_eq_zero : sqrt x = 0 ↔ x = 0 := by simp [sqrt_eq_iff_eq_sq]\n\n"}
{"name":"NNReal.sqrt_eq_one","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Iff (Eq (NNReal.sqrt x) 1) (Eq x 1)","decl":"@[simp] lemma sqrt_eq_one : sqrt x = 1 ↔ x = 1 := by simp [sqrt_eq_iff_eq_sq]\n\n"}
{"name":"NNReal.sqrt_zero","module":"Mathlib.Data.Real.Sqrt","initialProofState":"⊢ Eq (NNReal.sqrt 0) 0","decl":"@[simp] lemma sqrt_zero : sqrt 0 = 0 := by simp\n\n"}
{"name":"NNReal.sqrt_one","module":"Mathlib.Data.Real.Sqrt","initialProofState":"⊢ Eq (NNReal.sqrt 1) 1","decl":"@[simp] lemma sqrt_one : sqrt 1 = 1 := by simp\n\n"}
{"name":"NNReal.sqrt_le_one","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Iff (LE.le (NNReal.sqrt x) 1) (LE.le x 1)","decl":"@[simp] lemma sqrt_le_one : sqrt x ≤ 1 ↔ x ≤ 1 := by rw [← sqrt_one, sqrt_le_sqrt, sqrt_one]\n"}
{"name":"NNReal.one_le_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Iff (LE.le 1 (NNReal.sqrt x)) (LE.le 1 x)","decl":"@[simp] lemma one_le_sqrt : 1 ≤ sqrt x ↔ 1 ≤ x := by rw [← sqrt_one, sqrt_le_sqrt, sqrt_one]\n\n"}
{"name":"NNReal.sqrt_mul","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Eq (NNReal.sqrt (HMul.hMul x y)) (HMul.hMul (NNReal.sqrt x) (NNReal.sqrt y))","decl":"theorem sqrt_mul (x y : ℝ≥0) : sqrt (x * y) = sqrt x * sqrt y := by\n  rw [sqrt_eq_iff_eq_sq, mul_pow, sq_sqrt, sq_sqrt]\n\n"}
{"name":"NNReal.sqrt_inv","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Eq (NNReal.sqrt (Inv.inv x)) (Inv.inv (NNReal.sqrt x))","decl":"theorem sqrt_inv (x : ℝ≥0) : sqrt x⁻¹ = (sqrt x)⁻¹ :=\n  map_inv₀ sqrtHom x\n\n"}
{"name":"NNReal.sqrt_div","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : NNReal\n⊢ Eq (NNReal.sqrt (HDiv.hDiv x y)) (HDiv.hDiv (NNReal.sqrt x) (NNReal.sqrt y))","decl":"theorem sqrt_div (x y : ℝ≥0) : sqrt (x / y) = sqrt x / sqrt y :=\n  map_div₀ sqrtHom x y\n\n"}
{"name":"NNReal.continuous_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"⊢ Continuous ⇑NNReal.sqrt","decl":"@[continuity, fun_prop]\ntheorem continuous_sqrt : Continuous sqrt := sqrt.continuous\n\n"}
{"name":"NNReal.sqrt_pos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Iff (LT.lt 0 (NNReal.sqrt x)) (LT.lt 0 x)","decl":"@[simp] theorem sqrt_pos : 0 < sqrt x ↔ 0 < x := by simp [pos_iff_ne_zero]\n\n"}
{"name":"NNReal.sqrt_pos_of_pos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\na✝ : LT.lt 0 x\n⊢ LT.lt 0 (NNReal.sqrt x)","decl":"alias ⟨_, sqrt_pos_of_pos⟩ := sqrt_pos\n\n"}
{"name":"Real.coe_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : NNReal\n⊢ Eq (↑(NNReal.sqrt x)) (↑x).sqrt","decl":"@[simp, norm_cast]\ntheorem coe_sqrt {x : ℝ≥0} : (NNReal.sqrt x : ℝ) = √(x : ℝ) := by\n  rw [Real.sqrt, Real.toNNReal_coe]\n\n"}
{"name":"Real.continuous_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"⊢ Continuous fun x => x.sqrt","decl":"@[continuity]\ntheorem continuous_sqrt : Continuous (√· : ℝ → ℝ) :=\n  NNReal.continuous_coe.comp <| NNReal.continuous_sqrt.comp continuous_real_toNNReal\n\n"}
{"name":"Real.sqrt_eq_zero_of_nonpos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le x 0\n⊢ Eq x.sqrt 0","decl":"theorem sqrt_eq_zero_of_nonpos (h : x ≤ 0) : sqrt x = 0 := by simp [sqrt, Real.toNNReal_eq_zero.2 h]\n\n"}
{"name":"Real.sqrt_nonneg","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ LE.le 0 x.sqrt","decl":"@[simp] theorem sqrt_nonneg (x : ℝ) : 0 ≤ √x := NNReal.coe_nonneg _\n\n"}
{"name":"Real.mul_self_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (HMul.hMul x.sqrt x.sqrt) x","decl":"@[simp]\ntheorem mul_self_sqrt (h : 0 ≤ x) : √x * √x = x := by\n  rw [Real.sqrt, ← NNReal.coe_mul, NNReal.mul_self_sqrt, Real.coe_toNNReal _ h]\n\n"}
{"name":"Real.sqrt_mul_self","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (HMul.hMul x x).sqrt x","decl":"@[simp]\ntheorem sqrt_mul_self (h : 0 ≤ x) : √(x * x) = x :=\n  (mul_self_inj_of_nonneg (sqrt_nonneg _) h).1 (mul_self_sqrt (mul_self_nonneg _))\n\n"}
{"name":"Real.sqrt_eq_cases","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\n⊢ Iff (Eq x.sqrt y) (Or (And (Eq (HMul.hMul y y) x) (LE.le 0 y)) (And (LT.lt x 0) (Eq y 0)))","decl":"theorem sqrt_eq_cases : √x = y ↔ y * y = x ∧ 0 ≤ y ∨ x < 0 ∧ y = 0 := by\n  constructor\n  · rintro rfl\n    rcases le_or_lt 0 x with hle | hlt\n    · exact Or.inl ⟨mul_self_sqrt hle, sqrt_nonneg x⟩\n    · exact Or.inr ⟨hlt, sqrt_eq_zero_of_nonpos hlt.le⟩\n  · rintro (⟨rfl, hy⟩ | ⟨hx, rfl⟩)\n    exacts [sqrt_mul_self hy, sqrt_eq_zero_of_nonpos hx.le]\n\n"}
{"name":"Real.sqrt_eq_iff_mul_self_eq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (Eq x.sqrt y) (Eq x (HMul.hMul y y))","decl":"theorem sqrt_eq_iff_mul_self_eq (hx : 0 ≤ x) (hy : 0 ≤ y) : √x = y ↔ x = y * y :=\n  ⟨fun h => by rw [← h, mul_self_sqrt hx], fun h => by rw [h, sqrt_mul_self hy]⟩\n\n"}
{"name":"Real.sqrt_eq_iff_eq_mul_self","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (Eq x.sqrt y) (Eq (HMul.hMul y y) x)","decl":"@[deprecated sqrt_eq_iff_mul_self_eq (since := \"2024-08-25\")]\ntheorem sqrt_eq_iff_eq_mul_self (hx : 0 ≤ x) (hy : 0 ≤ y) : √x = y ↔ y * y = x := by\n  rw [sqrt_eq_iff_mul_self_eq hx hy, eq_comm]\n\n"}
{"name":"Real.sqrt_eq_iff_mul_self_eq_of_pos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LT.lt 0 y\n⊢ Iff (Eq x.sqrt y) (Eq (HMul.hMul y y) x)","decl":"theorem sqrt_eq_iff_mul_self_eq_of_pos (h : 0 < y) : √x = y ↔ y * y = x := by\n  simp [sqrt_eq_cases, h.ne', h.le]\n\n"}
{"name":"Real.sqrt_eq_one","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Iff (Eq x.sqrt 1) (Eq x 1)","decl":"@[simp]\ntheorem sqrt_eq_one : √x = 1 ↔ x = 1 :=\n  calc\n    √x = 1 ↔ 1 * 1 = x := sqrt_eq_iff_mul_self_eq_of_pos zero_lt_one\n    _ ↔ x = 1 := by rw [eq_comm, mul_one]\n\n"}
{"name":"Real.sq_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (HPow.hPow x.sqrt 2) x","decl":"@[simp]\ntheorem sq_sqrt (h : 0 ≤ x) : √x ^ 2 = x := by rw [sq, mul_self_sqrt h]\n\n"}
{"name":"Real.sqrt_sq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Eq (HPow.hPow x 2).sqrt x","decl":"@[simp]\ntheorem sqrt_sq (h : 0 ≤ x) : √(x ^ 2) = x := by rw [sq, sqrt_mul_self h]\n\n"}
{"name":"Real.sqrt_eq_iff_eq_sq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (Eq x.sqrt y) (Eq x (HPow.hPow y 2))","decl":"theorem sqrt_eq_iff_eq_sq (hx : 0 ≤ x) (hy : 0 ≤ y) : √x = y ↔ x = y ^ 2 := by\n  rw [sq, sqrt_eq_iff_mul_self_eq hx hy]\n\n"}
{"name":"Real.sqrt_eq_iff_sq_eq","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (Eq x.sqrt y) (Eq (HPow.hPow y 2) x)","decl":"@[deprecated sqrt_eq_iff_eq_sq (since := \"2024-08-25\")]\ntheorem sqrt_eq_iff_sq_eq (hx : 0 ≤ x) (hy : 0 ≤ y) : √x = y ↔ y ^ 2 = x := by\n  rw [sqrt_eq_iff_eq_sq hx hy, eq_comm]\n\n"}
{"name":"Real.sqrt_mul_self_eq_abs","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Eq (HMul.hMul x x).sqrt (abs x)","decl":"theorem sqrt_mul_self_eq_abs (x : ℝ) : √(x * x) = |x| := by\n  rw [← abs_mul_abs_self x, sqrt_mul_self (abs_nonneg _)]\n\n"}
{"name":"Real.sqrt_sq_eq_abs","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Eq (HPow.hPow x 2).sqrt (abs x)","decl":"theorem sqrt_sq_eq_abs (x : ℝ) : √(x ^ 2) = |x| := by rw [sq, sqrt_mul_self_eq_abs]\n\n"}
{"name":"Real.sqrt_zero","module":"Mathlib.Data.Real.Sqrt","initialProofState":"⊢ Eq (Real.sqrt 0) 0","decl":"@[simp]\ntheorem sqrt_zero : √0 = 0 := by simp [Real.sqrt]\n\n"}
{"name":"Real.sqrt_one","module":"Mathlib.Data.Real.Sqrt","initialProofState":"⊢ Eq (Real.sqrt 1) 1","decl":"@[simp]\ntheorem sqrt_one : √1 = 1 := by simp [Real.sqrt]\n\n"}
{"name":"Real.sqrt_le_sqrt_iff","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhy : LE.le 0 y\n⊢ Iff (LE.le x.sqrt y.sqrt) (LE.le x y)","decl":"@[simp]\ntheorem sqrt_le_sqrt_iff (hy : 0 ≤ y) : √x ≤ √y ↔ x ≤ y := by\n  rw [Real.sqrt, Real.sqrt, NNReal.coe_le_coe, NNReal.sqrt_le_sqrt, toNNReal_le_toNNReal_iff hy]\n\n"}
{"name":"Real.sqrt_lt_sqrt_iff","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\n⊢ Iff (LT.lt x.sqrt y.sqrt) (LT.lt x y)","decl":"@[simp]\ntheorem sqrt_lt_sqrt_iff (hx : 0 ≤ x) : √x < √y ↔ x < y :=\n  lt_iff_lt_of_le_iff_le (sqrt_le_sqrt_iff hx)\n\n"}
{"name":"Real.sqrt_lt_sqrt_iff_of_pos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhy : LT.lt 0 y\n⊢ Iff (LT.lt x.sqrt y.sqrt) (LT.lt x y)","decl":"theorem sqrt_lt_sqrt_iff_of_pos (hy : 0 < y) : √x < √y ↔ x < y := by\n  rw [Real.sqrt, Real.sqrt, NNReal.coe_lt_coe, NNReal.sqrt_lt_sqrt, toNNReal_lt_toNNReal_iff hy]\n\n"}
{"name":"Real.sqrt_le_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LE.le x y\n⊢ LE.le x.sqrt y.sqrt","decl":"@[gcongr, bound]\ntheorem sqrt_le_sqrt (h : x ≤ y) : √x ≤ √y := by\n  rw [Real.sqrt, Real.sqrt, NNReal.coe_le_coe, NNReal.sqrt_le_sqrt]\n  exact toNNReal_le_toNNReal h\n\n"}
{"name":"Real.sqrt_lt_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nh : LT.lt x y\n⊢ LT.lt x.sqrt y.sqrt","decl":"@[gcongr, bound]\ntheorem sqrt_lt_sqrt (hx : 0 ≤ x) (h : x < y) : √x < √y :=\n  (sqrt_lt_sqrt_iff hx).2 h\n\n"}
{"name":"Real.sqrt_le_left","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhy : LE.le 0 y\n⊢ Iff (LE.le x.sqrt y) (LE.le x (HPow.hPow y 2))","decl":"theorem sqrt_le_left (hy : 0 ≤ y) : √x ≤ y ↔ x ≤ y ^ 2 := by\n  rw [sqrt, ← Real.le_toNNReal_iff_coe_le hy, NNReal.sqrt_le_iff_le_sq, sq, ← Real.toNNReal_mul hy,\n    Real.toNNReal_le_toNNReal_iff (mul_self_nonneg y), sq]\n\n"}
{"name":"Real.sqrt_le_iff","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\n⊢ Iff (LE.le x.sqrt y) (And (LE.le 0 y) (LE.le x (HPow.hPow y 2)))","decl":"theorem sqrt_le_iff : √x ≤ y ↔ 0 ≤ y ∧ x ≤ y ^ 2 := by\n  rw [← and_iff_right_of_imp fun h => (sqrt_nonneg x).trans h, and_congr_right_iff]\n  exact sqrt_le_left\n\n"}
{"name":"Real.sqrt_lt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (LT.lt x.sqrt y) (LT.lt x (HPow.hPow y 2))","decl":"theorem sqrt_lt (hx : 0 ≤ x) (hy : 0 ≤ y) : √x < y ↔ x < y ^ 2 := by\n  rw [← sqrt_lt_sqrt_iff hx, sqrt_sq hy]\n\n"}
{"name":"Real.sqrt_lt'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhy : LT.lt 0 y\n⊢ Iff (LT.lt x.sqrt y) (LT.lt x (HPow.hPow y 2))","decl":"theorem sqrt_lt' (hy : 0 < y) : √x < y ↔ x < y ^ 2 := by\n  rw [← sqrt_lt_sqrt_iff_of_pos (pow_pos hy _), sqrt_sq hy.le]\n\n"}
{"name":"Real.le_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (LE.le x y.sqrt) (LE.le (HPow.hPow x 2) y)","decl":"/-- Note: if you want to conclude `x ≤ √y`, then use `Real.le_sqrt_of_sq_le`.\nIf you have `x > 0`, consider using `Real.le_sqrt'` -/\ntheorem le_sqrt (hx : 0 ≤ x) (hy : 0 ≤ y) : x ≤ √y ↔ x ^ 2 ≤ y :=\n  le_iff_le_iff_lt_iff_lt.2 <| sqrt_lt hy hx\n\n"}
{"name":"Real.le_sqrt'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LT.lt 0 x\n⊢ Iff (LE.le x y.sqrt) (LE.le (HPow.hPow x 2) y)","decl":"theorem le_sqrt' (hx : 0 < x) : x ≤ √y ↔ x ^ 2 ≤ y :=\n  le_iff_le_iff_lt_iff_lt.2 <| sqrt_lt' hx\n\n"}
{"name":"Real.abs_le_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LE.le (HPow.hPow x 2) y\n⊢ LE.le (abs x) y.sqrt","decl":"theorem abs_le_sqrt (h : x ^ 2 ≤ y) : |x| ≤ √y := by\n  rw [← sqrt_sq_eq_abs]; exact sqrt_le_sqrt h\n\n"}
{"name":"Real.sq_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LE.le 0 y\n⊢ Iff (LE.le (HPow.hPow x 2) y) (And (LE.le (Neg.neg y.sqrt) x) (LE.le x y.sqrt))","decl":"theorem sq_le (h : 0 ≤ y) : x ^ 2 ≤ y ↔ -√y ≤ x ∧ x ≤ √y := by\n  constructor\n  · simpa only [abs_le] using abs_le_sqrt\n  · rw [← abs_le, ← sq_abs]\n    exact (le_sqrt (abs_nonneg x) h).mp\n\n"}
{"name":"Real.neg_sqrt_le_of_sq_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LE.le (HPow.hPow x 2) y\n⊢ LE.le (Neg.neg y.sqrt) x","decl":"theorem neg_sqrt_le_of_sq_le (h : x ^ 2 ≤ y) : -√y ≤ x :=\n  ((sq_le ((sq_nonneg x).trans h)).mp h).1\n\n"}
{"name":"Real.le_sqrt_of_sq_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LE.le (HPow.hPow x 2) y\n⊢ LE.le x y.sqrt","decl":"theorem le_sqrt_of_sq_le (h : x ^ 2 ≤ y) : x ≤ √y :=\n  ((sq_le ((sq_nonneg x).trans h)).mp h).2\n\n"}
{"name":"Real.sqrt_inj","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\nhy : LE.le 0 y\n⊢ Iff (Eq x.sqrt y.sqrt) (Eq x y)","decl":"@[simp]\ntheorem sqrt_inj (hx : 0 ≤ x) (hy : 0 ≤ y) : √x = √y ↔ x = y := by\n  simp [le_antisymm_iff, hx, hy]\n\n"}
{"name":"Real.sqrt_eq_zero","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Iff (Eq x.sqrt 0) (Eq x 0)","decl":"@[simp]\ntheorem sqrt_eq_zero (h : 0 ≤ x) : √x = 0 ↔ x = 0 := by simpa using sqrt_inj h le_rfl\n\n"}
{"name":"Real.sqrt_eq_zero'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Iff (Eq x.sqrt 0) (LE.le x 0)","decl":"theorem sqrt_eq_zero' : √x = 0 ↔ x ≤ 0 := by\n  rw [sqrt, NNReal.coe_eq_zero, NNReal.sqrt_eq_zero, Real.toNNReal_eq_zero]\n\n"}
{"name":"Real.sqrt_ne_zero","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le 0 x\n⊢ Iff (Ne x.sqrt 0) (Ne x 0)","decl":"theorem sqrt_ne_zero (h : 0 ≤ x) : √x ≠ 0 ↔ x ≠ 0 := by rw [not_iff_not, sqrt_eq_zero h]\n\n"}
{"name":"Real.sqrt_ne_zero'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Iff (Ne x.sqrt 0) (LT.lt 0 x)","decl":"theorem sqrt_ne_zero' : √x ≠ 0 ↔ 0 < x := by rw [← not_le, not_iff_not, sqrt_eq_zero']\n\n"}
{"name":"Real.sqrt_pos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Iff (LT.lt 0 x.sqrt) (LT.lt 0 x)","decl":"@[simp]\ntheorem sqrt_pos : 0 < √x ↔ 0 < x :=\n  lt_iff_lt_of_le_iff_le (Iff.trans (by simp [le_antisymm_iff, sqrt_nonneg]) sqrt_eq_zero')\n\n"}
{"name":"Real.sqrt_pos_of_pos","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\na✝ : LT.lt 0 x\n⊢ LT.lt 0 x.sqrt","decl":"alias ⟨_, sqrt_pos_of_pos⟩ := sqrt_pos\n\n"}
{"name":"Real.sqrt_le_sqrt_iff'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LT.lt 0 x\n⊢ Iff (LE.le x.sqrt y.sqrt) (LE.le x y)","decl":"lemma sqrt_le_sqrt_iff' (hx : 0 < x) : √x ≤ √y ↔ x ≤ y := by\n  obtain hy | hy := le_total y 0\n  · exact iff_of_false ((sqrt_eq_zero_of_nonpos hy).trans_lt <| sqrt_pos.2 hx).not_le\n      (hy.trans_lt hx).not_le\n  · exact sqrt_le_sqrt_iff hy\n\n"}
{"name":"Real.one_le_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Iff (LE.le 1 x.sqrt) (LE.le 1 x)","decl":"@[simp] lemma one_le_sqrt : 1 ≤ √x ↔ 1 ≤ x := by\n  rw [← sqrt_one, sqrt_le_sqrt_iff' zero_lt_one, sqrt_one]\n\n"}
{"name":"Real.sqrt_le_one","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Iff (LE.le x.sqrt 1) (LE.le x 1)","decl":"@[simp] lemma sqrt_le_one : √x ≤ 1 ↔ x ≤ 1 := by\n  rw [← sqrt_one, sqrt_le_sqrt_iff zero_le_one, sqrt_one]\n\n"}
{"name":"Real.sqrt_mul","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nhx : LE.le 0 x\ny : Real\n⊢ Eq (HMul.hMul x y).sqrt (HMul.hMul x.sqrt y.sqrt)","decl":"@[simp]\ntheorem sqrt_mul {x : ℝ} (hx : 0 ≤ x) (y : ℝ) : √(x * y) = √x * √y := by\n  simp_rw [Real.sqrt, ← NNReal.coe_mul, NNReal.coe_inj, Real.toNNReal_mul hx, NNReal.sqrt_mul]\n\n"}
{"name":"Real.sqrt_mul'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhy : LE.le 0 y\n⊢ Eq (HMul.hMul x y).sqrt (HMul.hMul x.sqrt y.sqrt)","decl":"@[simp]\ntheorem sqrt_mul' (x) {y : ℝ} (hy : 0 ≤ y) : √(x * y) = √x * √y := by\n  rw [mul_comm, sqrt_mul hy, mul_comm]\n\n"}
{"name":"Real.sqrt_inv","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Eq (Inv.inv x).sqrt (Inv.inv x.sqrt)","decl":"@[simp]\ntheorem sqrt_inv (x : ℝ) : √x⁻¹ = (√x)⁻¹ := by\n  rw [Real.sqrt, Real.toNNReal_inv, NNReal.sqrt_inv, NNReal.coe_inv, Real.sqrt]\n\n"}
{"name":"Real.sqrt_div","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nhx : LE.le 0 x\ny : Real\n⊢ Eq (HDiv.hDiv x y).sqrt (HDiv.hDiv x.sqrt y.sqrt)","decl":"@[simp]\ntheorem sqrt_div {x : ℝ} (hx : 0 ≤ x) (y : ℝ) : √(x / y) = √x / √y := by\n  rw [division_def, sqrt_mul hx, sqrt_inv, division_def]\n\n"}
{"name":"Real.sqrt_div'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhy : LE.le 0 y\n⊢ Eq (HDiv.hDiv x y).sqrt (HDiv.hDiv x.sqrt y.sqrt)","decl":"@[simp]\ntheorem sqrt_div' (x) {y : ℝ} (hy : 0 ≤ y) : √(x / y) = √x / √y := by\n  rw [division_def, sqrt_mul' x (inv_nonneg.2 hy), sqrt_inv, division_def]\n\n"}
{"name":"Real.div_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Eq (HDiv.hDiv x x.sqrt) x.sqrt","decl":"@[simp]\ntheorem div_sqrt : x / √x = √x := by\n  rcases le_or_lt x 0 with h | h\n  · rw [sqrt_eq_zero'.mpr h, div_zero]\n  · rw [div_eq_iff (sqrt_ne_zero'.mpr h), mul_self_sqrt h.le]\n\n"}
{"name":"Real.sqrt_div_self'","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Eq (HDiv.hDiv x.sqrt x) (HDiv.hDiv 1 x.sqrt)","decl":"theorem sqrt_div_self' : √x / x = 1 / √x := by rw [← div_sqrt, one_div_div, div_sqrt]\n\n"}
{"name":"Real.sqrt_div_self","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\n⊢ Eq (HDiv.hDiv x.sqrt x) (Inv.inv x.sqrt)","decl":"theorem sqrt_div_self : √x / x = (√x)⁻¹ := by rw [sqrt_div_self', one_div]\n\n"}
{"name":"Real.lt_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nhx : LE.le 0 x\n⊢ Iff (LT.lt x y.sqrt) (LT.lt (HPow.hPow x 2) y)","decl":"theorem lt_sqrt (hx : 0 ≤ x) : x < √y ↔ x ^ 2 < y := by\n  rw [← sqrt_lt_sqrt_iff (sq_nonneg _), sqrt_sq hx]\n\n"}
{"name":"Real.sq_lt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\n⊢ Iff (LT.lt (HPow.hPow x 2) y) (And (LT.lt (Neg.neg y.sqrt) x) (LT.lt x y.sqrt))","decl":"theorem sq_lt : x ^ 2 < y ↔ -√y < x ∧ x < √y := by\n  rw [← abs_lt, ← sq_abs, lt_sqrt (abs_nonneg _)]\n\n"}
{"name":"Real.neg_sqrt_lt_of_sq_lt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LT.lt (HPow.hPow x 2) y\n⊢ LT.lt (Neg.neg y.sqrt) x","decl":"theorem neg_sqrt_lt_of_sq_lt (h : x ^ 2 < y) : -√y < x :=\n  (sq_lt.mp h).1\n\n"}
{"name":"Real.lt_sqrt_of_sq_lt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LT.lt (HPow.hPow x 2) y\n⊢ LT.lt x y.sqrt","decl":"theorem lt_sqrt_of_sq_lt (h : x ^ 2 < y) : x < √y :=\n  (sq_lt.mp h).2\n\n"}
{"name":"Real.lt_sq_of_sqrt_lt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x y : Real\nh : LT.lt x.sqrt y\n⊢ LT.lt x (HPow.hPow y 2)","decl":"theorem lt_sq_of_sqrt_lt (h : √x < y) : x < y ^ 2 := by\n  have hy := x.sqrt_nonneg.trans_lt h\n  rwa [← sqrt_lt_sqrt_iff_of_pos (sq_pos_of_pos hy), sqrt_sq hy.le]\n\n"}
{"name":"Real.nat_sqrt_le_real_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"a : Nat\n⊢ LE.le (↑a.sqrt) (↑a).sqrt","decl":"/-- The natural square root is at most the real square root -/\ntheorem nat_sqrt_le_real_sqrt {a : ℕ} : ↑(Nat.sqrt a) ≤ √(a : ℝ) := by\n  rw [Real.le_sqrt (Nat.cast_nonneg _) (Nat.cast_nonneg _)]\n  norm_cast\n  exact Nat.sqrt_le' a\n\n"}
{"name":"Real.real_sqrt_lt_nat_sqrt_succ","module":"Mathlib.Data.Real.Sqrt","initialProofState":"a : Nat\n⊢ LT.lt (↑a).sqrt (HAdd.hAdd (↑a.sqrt) 1)","decl":"/-- The real square root is less than the natural square root plus one -/\ntheorem real_sqrt_lt_nat_sqrt_succ {a : ℕ} : √(a : ℝ) < Nat.sqrt a + 1 := by\n  rw [sqrt_lt (by simp)] <;> norm_cast\n  · exact Nat.lt_succ_sqrt' a\n  · exact Nat.le_add_left 0 (Nat.sqrt a + 1)\n\n"}
{"name":"Real.real_sqrt_le_nat_sqrt_succ","module":"Mathlib.Data.Real.Sqrt","initialProofState":"a : Nat\n⊢ LE.le (↑a).sqrt (HAdd.hAdd (↑a.sqrt) 1)","decl":"/-- The real square root is at most the natural square root plus one -/\ntheorem real_sqrt_le_nat_sqrt_succ {a : ℕ} : √(a : ℝ) ≤ Nat.sqrt a + 1 :=\n  real_sqrt_lt_nat_sqrt_succ.le\n\n"}
{"name":"Real.floor_real_sqrt_eq_nat_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"a : Nat\n⊢ Eq (Int.floor (↑a).sqrt) ↑a.sqrt","decl":"/-- The floor of the real square root is the same as the natural square root. -/\n@[simp]\ntheorem floor_real_sqrt_eq_nat_sqrt {a : ℕ} : ⌊√(a : ℝ)⌋ = Nat.sqrt a := by\n  rw [Int.floor_eq_iff]\n  exact ⟨nat_sqrt_le_real_sqrt, real_sqrt_lt_nat_sqrt_succ⟩\n\n"}
{"name":"Real.nat_floor_real_sqrt_eq_nat_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"a : Nat\n⊢ Eq (Nat.floor (↑a).sqrt) a.sqrt","decl":"/-- The natural floor of the real square root is the same as the natural square root. -/\n@[simp]\ntheorem nat_floor_real_sqrt_eq_nat_sqrt {a : ℕ} : ⌊√(a : ℝ)⌋₊ = Nat.sqrt a := by\n  rw [Nat.floor_eq_iff (sqrt_nonneg a)]\n  exact ⟨nat_sqrt_le_real_sqrt, real_sqrt_lt_nat_sqrt_succ⟩\n\n"}
{"name":"Real.sqrt_one_add_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"x : Real\nh : LE.le (-1) x\n⊢ LE.le (HAdd.hAdd 1 x).sqrt (HAdd.hAdd 1 (HDiv.hDiv x 2))","decl":"/-- Bernoulli's inequality for exponent `1 / 2`, stated using `sqrt`. -/\ntheorem sqrt_one_add_le (h : -1 ≤ x) : √(1 + x) ≤ 1 + x / 2 := by\n  refine sqrt_le_iff.mpr ⟨by linarith, ?_⟩\n  calc 1 + x\n    _ ≤ 1 + x + (x / 2) ^ 2 := le_add_of_nonneg_right <| sq_nonneg _\n    _ = _ := by ring\n\n"}
{"name":"Filter.Tendsto.sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"α : Type u_1\nf : α → Real\nl : Filter α\nx : Real\nh : Filter.Tendsto f l (nhds x)\n⊢ Filter.Tendsto (fun x => (f x).sqrt) l (nhds x.sqrt)","decl":"theorem Filter.Tendsto.sqrt {f : α → ℝ} {l : Filter α} {x : ℝ} (h : Tendsto f l (𝓝 x)) :\n    Tendsto (fun x => √(f x)) l (𝓝 (√x)) :=\n  (continuous_sqrt.tendsto _).comp h\n\n"}
{"name":"ContinuousWithinAt.sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nf : α → Real\ns : Set α\nx : α\nh : ContinuousWithinAt f s x\n⊢ ContinuousWithinAt (fun x => (f x).sqrt) s x","decl":"nonrec theorem ContinuousWithinAt.sqrt (h : ContinuousWithinAt f s x) :\n    ContinuousWithinAt (fun x => √(f x)) s x :=\n  h.sqrt\n\n"}
{"name":"ContinuousAt.sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nf : α → Real\nx : α\nh : ContinuousAt f x\n⊢ ContinuousAt (fun x => (f x).sqrt) x","decl":"@[fun_prop]\nnonrec theorem ContinuousAt.sqrt (h : ContinuousAt f x) : ContinuousAt (fun x => √(f x)) x :=\n  h.sqrt\n\n"}
{"name":"ContinuousOn.sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nf : α → Real\ns : Set α\nh : ContinuousOn f s\n⊢ ContinuousOn (fun x => (f x).sqrt) s","decl":"@[fun_prop]\ntheorem ContinuousOn.sqrt (h : ContinuousOn f s) : ContinuousOn (fun x => √(f x)) s :=\n  fun x hx => (h x hx).sqrt\n\n"}
{"name":"Continuous.sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"α : Type u_1\ninst✝ : TopologicalSpace α\nf : α → Real\nh : Continuous f\n⊢ Continuous fun x => (f x).sqrt","decl":"@[continuity, fun_prop]\ntheorem Continuous.sqrt (h : Continuous f) : Continuous fun x => √(f x) :=\n  continuous_sqrt.comp h\n\n"}
{"name":"NNReal.sum_mul_le_sqrt_mul_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"ι : Type u_2\ns : Finset ι\nf g : ι → NNReal\n⊢ LE.le (s.sum fun i => HMul.hMul (f i) (g i)) (HMul.hMul (NNReal.sqrt (s.sum fun i => HPow.hPow (f i) 2)) (NNReal.sqrt (s.sum fun i => HPow.hPow (g i) 2)))","decl":"/-- **Cauchy-Schwarz inequality** for finsets using square roots in `ℝ≥0`. -/\nlemma sum_mul_le_sqrt_mul_sqrt (s : Finset ι) (f g : ι → ℝ≥0) :\n    ∑ i ∈ s, f i * g i ≤ sqrt (∑ i ∈ s, f i ^ 2) * sqrt (∑ i ∈ s, g i ^ 2) :=\n  (le_sqrt_iff_sq_le.2 <| sum_mul_sq_le_sq_mul_sq _ _ _).trans_eq <| sqrt_mul _ _\n\n"}
{"name":"NNReal.sum_sqrt_mul_sqrt_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"ι : Type u_2\ns : Finset ι\nf g : ι → NNReal\n⊢ LE.le (s.sum fun i => HMul.hMul (NNReal.sqrt (f i)) (NNReal.sqrt (g i))) (HMul.hMul (NNReal.sqrt (s.sum fun i => f i)) (NNReal.sqrt (s.sum fun i => g i)))","decl":"/-- **Cauchy-Schwarz inequality** for finsets using square roots in `ℝ≥0`. -/\nlemma sum_sqrt_mul_sqrt_le (s : Finset ι) (f g : ι → ℝ≥0) :\n    ∑ i ∈ s, sqrt (f i) * sqrt (g i) ≤ sqrt (∑ i ∈ s, f i) * sqrt (∑ i ∈ s, g i) := by\n  simpa [*] using sum_mul_le_sqrt_mul_sqrt _ (fun x ↦ sqrt (f x)) (fun x ↦ sqrt (g x))\n\n"}
{"name":"Real.sum_mul_le_sqrt_mul_sqrt","module":"Mathlib.Data.Real.Sqrt","initialProofState":"ι : Type u_2\ns : Finset ι\nf g : ι → Real\n⊢ LE.le (s.sum fun i => HMul.hMul (f i) (g i)) (HMul.hMul (s.sum fun i => HPow.hPow (f i) 2).sqrt (s.sum fun i => HPow.hPow (g i) 2).sqrt)","decl":"/-- **Cauchy-Schwarz inequality** for finsets using square roots in `ℝ`. -/\nlemma sum_mul_le_sqrt_mul_sqrt (s : Finset ι) (f g : ι → ℝ) :\n    ∑ i ∈ s, f i * g i ≤ √(∑ i ∈ s, f i ^ 2) * √(∑ i ∈ s, g i ^ 2) :=\n  (le_sqrt_of_sq_le <| sum_mul_sq_le_sq_mul_sq _ _ _).trans_eq <| sqrt_mul\n    (sum_nonneg fun _ _ ↦ by positivity) _\n\n"}
{"name":"Real.sum_sqrt_mul_sqrt_le","module":"Mathlib.Data.Real.Sqrt","initialProofState":"ι : Type u_2\nf g : ι → Real\ns : Finset ι\nhf : ∀ (i : ι), LE.le 0 (f i)\nhg : ∀ (i : ι), LE.le 0 (g i)\n⊢ LE.le (s.sum fun i => HMul.hMul (f i).sqrt (g i).sqrt) (HMul.hMul (s.sum fun i => f i).sqrt (s.sum fun i => g i).sqrt)","decl":"/-- **Cauchy-Schwarz inequality** for finsets using square roots in `ℝ`. -/\nlemma sum_sqrt_mul_sqrt_le (s : Finset ι) (hf : ∀ i, 0 ≤ f i) (hg : ∀ i, 0 ≤ g i) :\n    ∑ i ∈ s, √(f i) * √(g i) ≤ √(∑ i ∈ s, f i) * √(∑ i ∈ s, g i) := by\n  simpa [*] using sum_mul_le_sqrt_mul_sqrt _ (fun x ↦ √(f x)) (fun x ↦ √(g x))\n\n"}
