{"name":"AlgebraicGeometry.LocallyRingedSpace.not_mem_prime_iff_unit_in_stalk","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\nx : ↑X.toTopCat\n⊢ Iff (Not (Membership.mem (X.toΓSpecFun x).asIdeal r)) (IsUnit ((CategoryTheory.ConcreteCategory.hom (X.presheaf.Γgerm x)) r))","decl":"theorem not_mem_prime_iff_unit_in_stalk (r : Γ.obj (op X)) (x : X) :\n    r ∉ (X.toΓSpecFun x).asIdeal ↔ IsUnit (X.presheaf.Γgerm x r) := by\n  erw [IsLocalRing.mem_maximalIdeal, Classical.not_not]\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpec_preimage_basicOpen_eq","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ Eq (Set.preimage X.toΓSpecFun (PrimeSpectrum.basicOpen r).carrier) (X.toRingedSpace.basicOpen r).carrier","decl":"/-- The preimage of a basic open in `Spec Γ(X)` under the unit is the basic\nopen in `X` defined by the same element (they are equal as sets). -/\ntheorem toΓSpec_preimage_basicOpen_eq (r : Γ.obj (op X)) :\n    X.toΓSpecFun ⁻¹' (basicOpen r).1 = (X.toRingedSpace.basicOpen r).1 := by\n      ext\n      dsimp\n      simp only [Set.mem_preimage, SetLike.mem_coe]\n      rw [X.toRingedSpace.mem_top_basicOpen]\n      exact not_mem_prime_iff_unit_in_stalk ..\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpec_continuous","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\n⊢ Continuous X.toΓSpecFun","decl":"/-- `toΓSpecFun` is continuous. -/\ntheorem toΓSpec_continuous : Continuous X.toΓSpecFun := by\n  rw [isTopologicalBasis_basic_opens.continuous_iff]\n  rintro _ ⟨r, rfl⟩\n  erw [X.toΓSpec_preimage_basicOpen_eq r]\n  exact (X.toRingedSpace.basicOpen r).2\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecMapBasicOpen_eq","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ Eq (X.toΓSpecMapBasicOpen r) (X.toRingedSpace.basicOpen r)","decl":"/-- The preimage is the basic open in `X` defined by the same element `r`. -/\ntheorem toΓSpecMapBasicOpen_eq : X.toΓSpecMapBasicOpen r = X.toRingedSpace.basicOpen r :=\n  Opens.ext (X.toΓSpec_preimage_basicOpen_eq r)\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.isUnit_res_toΓSpecMapBasicOpen","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ IsUnit ((CategoryTheory.ConcreteCategory.hom (X.toToΓSpecMapBasicOpen r)) r)","decl":"/-- `r` is a unit as a section on the basic open defined by `r`. -/\ntheorem isUnit_res_toΓSpecMapBasicOpen : IsUnit (X.toToΓSpecMapBasicOpen r r) := by\n  convert\n    (X.presheaf.map <| (eqToHom <| X.toΓSpecMapBasicOpen_eq r).op).hom.isUnit_map\n      (X.toRingedSpace.isUnit_res_basicOpen r)\n  -- Porting note: `rw [comp_apply]` to `erw [comp_apply]`\n  erw [← CommRingCat.comp_apply, ← Functor.map_comp]\n  congr\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecCApp_iff","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\nf : Quiver.Hom ((AlgebraicGeometry.Spec.structureSheaf ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })).val.obj { unop := PrimeSpectrum.basicOpen r }) (X.presheaf.obj { unop := X.toΓSpecMapBasicOpen r })\n⊢ Iff (Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })) (PrimeSpectrum.basicOpen r)) f) (X.toToΓSpecMapBasicOpen r)) (Eq f (X.toΓSpecCApp r))","decl":"/-- Characterization of the sheaf hom on basic opens,\n    direction ← (next lemma) is used at various places, but → is not used in this file. -/\ntheorem toΓSpecCApp_iff\n    (f :\n      (structureSheaf <| Γ.obj <| op X).val.obj (op <| basicOpen r) ⟶\n        X.presheaf.obj (op <| X.toΓSpecMapBasicOpen r)) :\n    toOpen _ (basicOpen r) ≫ f = X.toToΓSpecMapBasicOpen r ↔ f = X.toΓSpecCApp r := by\n  -- Porting Note: Type class problem got stuck in `IsLocalization.Away.AwayMap.lift_comp`\n  -- created instance manually. This replaces the `pick_goal` tactics\n  have loc_inst := IsLocalization.to_basicOpen (Γ.obj (op X)) r\n  refine ConcreteCategory.ext_iff.trans ?_\n  rw [← @IsLocalization.Away.lift_comp _ _ _ _ _ _ _ r loc_inst _\n      (X.isUnit_res_toΓSpecMapBasicOpen r)]\n  --pick_goal 5; exact is_localization.to_basic_open _ r\n  constructor\n  · intro h\n    ext : 1\n    exact IsLocalization.ringHom_ext (Submonoid.powers r) h\n  apply congr_arg\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecCApp_spec","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })) (PrimeSpectrum.basicOpen r)) (X.toΓSpecCApp r)) (X.toToΓSpecMapBasicOpen r)","decl":"theorem toΓSpecCApp_spec : toOpen _ (basicOpen r) ≫ X.toΓSpecCApp r = X.toToΓSpecMapBasicOpen r :=\n  (X.toΓSpecCApp_iff r _).2 rfl\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecCBasicOpens_app","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : Opposite (CategoryTheory.InducedCategory (TopologicalSpace.Opens (PrimeSpectrum ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X }))) PrimeSpectrum.basicOpen)\n⊢ Eq (X.toΓSpecCBasicOpens.app r) (X.toΓSpecCApp (Opposite.unop r))","decl":"/-- The sheaf hom on all basic opens, commuting with restrictions. -/\n@[simps app]\ndef toΓSpecCBasicOpens :\n    (inducedFunctor basicOpen).op ⋙ (structureSheaf (Γ.obj (op X))).1 ⟶\n      (inducedFunctor basicOpen).op ⋙ ((TopCat.Sheaf.pushforward _ X.toΓSpecBase).obj X.𝒪).1 where\n  app r := X.toΓSpecCApp r.unop\n  naturality r s f := by\n    apply (StructureSheaf.to_basicOpen_epi (Γ.obj (op X)) r.unop).1\n    simp only [← Category.assoc]\n    rw [X.toΓSpecCApp_spec r.unop]\n    convert X.toΓSpecCApp_spec s.unop\n    symm\n    apply X.presheaf.map_comp\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecSheafedSpace_base","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\n⊢ Eq X.toΓSpecSheafedSpace.base X.toΓSpecBase","decl":"/-- The canonical morphism of sheafed spaces from `X` to the spectrum of its global sections. -/\n@[simps]\ndef toΓSpecSheafedSpace : X.toSheafedSpace ⟶ Spec.toSheafedSpace.obj (op (Γ.obj (op X))) where\n  base := X.toΓSpecBase\n  c :=\n    TopCat.Sheaf.restrictHomEquivHom (structureSheaf (Γ.obj (op X))).1 _ isBasis_basic_opens\n      X.toΓSpecCBasicOpens\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecSheafedSpace_c","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\n⊢ Eq X.toΓSpecSheafedSpace.c ((TopCat.Sheaf.restrictHomEquivHom (AlgebraicGeometry.Spec.structureSheaf ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })).val ((TopCat.Sheaf.pushforward CommRingCat X.toΓSpecBase).obj X.𝒪) ⋯) X.toΓSpecCBasicOpens)","decl":"/-- The canonical morphism of sheafed spaces from `X` to the spectrum of its global sections. -/\n@[simps]\ndef toΓSpecSheafedSpace : X.toSheafedSpace ⟶ Spec.toSheafedSpace.obj (op (Γ.obj (op X))) where\n  base := X.toΓSpecBase\n  c :=\n    TopCat.Sheaf.restrictHomEquivHom (structureSheaf (Γ.obj (op X))).1 _ isBasis_basic_opens\n      X.toΓSpecCBasicOpens\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecSheafedSpace_app_eq","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ Eq (X.toΓSpecSheafedSpace.c.app { unop := PrimeSpectrum.basicOpen r }) (X.toΓSpecCApp r)","decl":"theorem toΓSpecSheafedSpace_app_eq :\n    X.toΓSpecSheafedSpace.c.app (op (basicOpen r)) = X.toΓSpecCApp r := by\n  apply TopCat.Sheaf.extend_hom_app _ _ _\n\n-- Porting note: need a helper lemma `toΓSpecSheafedSpace_app_spec_assoc` to help compile\n-- `toStalk_stalkMap_to_Γ_Spec`\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecSheafedSpace_app_spec_assoc","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\nZ : CommRingCat\nh : Quiver.Hom (((TopCat.Presheaf.pushforward CommRingCat X.toΓSpecSheafedSpace.base).obj X.presheaf).obj { unop := PrimeSpectrum.basicOpen r }) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })) (PrimeSpectrum.basicOpen r)) (CategoryTheory.CategoryStruct.comp (X.toΓSpecSheafedSpace.c.app { unop := PrimeSpectrum.basicOpen r }) h)) (CategoryTheory.CategoryStruct.comp (X.toToΓSpecMapBasicOpen r) h)","decl":"@[reassoc] theorem toΓSpecSheafedSpace_app_spec (r : Γ.obj (op X)) :\n    toOpen (Γ.obj (op X)) (basicOpen r) ≫ X.toΓSpecSheafedSpace.c.app (op (basicOpen r)) =\n      X.toToΓSpecMapBasicOpen r :=\n  (X.toΓSpecSheafedSpace_app_eq r).symm ▸ X.toΓSpecCApp_spec r\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpecSheafedSpace_app_spec","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nr : ↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑(AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })) (PrimeSpectrum.basicOpen r)) (X.toΓSpecSheafedSpace.c.app { unop := PrimeSpectrum.basicOpen r })) (X.toToΓSpecMapBasicOpen r)","decl":"@[reassoc] theorem toΓSpecSheafedSpace_app_spec (r : Γ.obj (op X)) :\n    toOpen (Γ.obj (op X)) (basicOpen r) ≫ X.toΓSpecSheafedSpace.c.app (op (basicOpen r)) =\n      X.toToΓSpecMapBasicOpen r :=\n  (X.toΓSpecSheafedSpace_app_eq r).symm ▸ X.toΓSpecCApp_spec r\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toStalk_stalkMap_toΓSpec","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nx : ↑X.toTopCat\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toStalk (↑(Opposite.unop { unop := AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X } })) (X.toΓSpecSheafedSpace.base x)) (AlgebraicGeometry.PresheafedSpace.Hom.stalkMap X.toΓSpecSheafedSpace x)) (X.presheaf.Γgerm x)","decl":"/-- The map on stalks induced by the unit commutes with maps from `Γ(X)` to\n    stalks (in `Spec Γ(X)` and in `X`). -/\ntheorem toStalk_stalkMap_toΓSpec (x : X) :\n    toStalk _ _ ≫ X.toΓSpecSheafedSpace.stalkMap x = X.presheaf.Γgerm x := by\n  rw [PresheafedSpace.Hom.stalkMap,\n    ← toOpen_germ _ (basicOpen (1 : Γ.obj (op X))) _ (by rw [basicOpen_one]; trivial),\n    ← Category.assoc, Category.assoc (toOpen _ _), stalkFunctor_map_germ, ← Category.assoc,\n    toΓSpecSheafedSpace_app_spec, Γgerm]\n  erw [← stalkPushforward_germ _ _ X.presheaf ⊤]\n  congr 1\n  exact (X.toΓSpecBase _* X.presheaf).germ_res le_top.hom _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpec_base","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\n⊢ Eq X.toΓSpec.base X.toΓSpecBase","decl":"/-- The canonical morphism from `X` to the spectrum of its global sections. -/\n@[simps! base]\ndef toΓSpec : X ⟶ Spec.locallyRingedSpaceObj (Γ.obj (op X)) where\n  __ := X.toΓSpecSheafedSpace\n  prop := by\n    intro x\n    let p : PrimeSpectrum (Γ.obj (op X)) := X.toΓSpecFun x\n    constructor\n    -- show stalk map is local hom ↓\n    let S := (structureSheaf _).presheaf.stalk p\n    rintro (t : S) ht\n    obtain ⟨⟨r, s⟩, he⟩ := IsLocalization.surj p.asIdeal.primeCompl t\n    dsimp at he\n    set t' := _\n    change t * t' = _ at he\n    apply isUnit_of_mul_isUnit_left (y := t')\n    rw [he]\n    refine IsLocalization.map_units S (⟨r, ?_⟩ : p.asIdeal.primeCompl)\n    apply (not_mem_prime_iff_unit_in_stalk _ _ _).mpr\n    rw [← toStalk_stalkMap_toΓSpec]\n    erw [CommRingCat.comp_apply, ← he]\n    rw [RingHom.map_mul]\n    exact ht.mul <| (IsLocalization.map_units (R := Γ.obj (op X)) S s).map _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.toΓSpec_preimage_zeroLocus_eq","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\ns : Set ↑(X.presheaf.obj { unop := Top.top })\n⊢ Eq (Set.preimage (⇑X.toΓSpec.base) (PrimeSpectrum.zeroLocus s)) (X.toRingedSpace.zeroLocus s)","decl":"/-- On a locally ringed space `X`, the preimage of the zero locus of the prime spectrum\nof `Γ(X, ⊤)` under `toΓSpec` agrees with the associated zero locus on `X`. -/\nlemma toΓSpec_preimage_zeroLocus_eq {X : LocallyRingedSpace.{u}}\n    (s : Set (X.presheaf.obj (op ⊤))) :\n    X.toΓSpec.base ⁻¹' PrimeSpectrum.zeroLocus s = X.toRingedSpace.zeroLocus s := by\n  simp only [RingedSpace.zeroLocus]\n  have (i : LocallyRingedSpace.Γ.obj (op X)) (_ : i ∈ s) :\n      ((X.toRingedSpace.basicOpen i).carrier)ᶜ =\n        X.toΓSpec.base ⁻¹' (PrimeSpectrum.basicOpen i).carrierᶜ := by\n    symm\n    erw [Set.preimage_compl, X.toΓSpec_preimage_basicOpen_eq i]\n  erw [Set.iInter₂_congr this]\n  simp_rw [← Set.preimage_iInter₂, Opens.carrier_eq_coe, PrimeSpectrum.basicOpen_eq_zeroLocus_compl,\n    compl_compl]\n  rw [← PrimeSpectrum.zeroLocus_iUnion₂]\n  simp\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.comp_ring_hom_ext","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nR : CommRingCat\nf : Quiver.Hom R (AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\nβ : Quiver.Hom X (AlgebraicGeometry.Spec.locallyRingedSpaceObj R)\nw : Eq (CategoryTheory.CategoryStruct.comp X.toΓSpec.base (AlgebraicGeometry.Spec.locallyRingedSpaceMap f).base) β.base\nh : ∀ (r : ↑R), Eq (CategoryTheory.CategoryStruct.comp f (X.presheaf.map (CategoryTheory.homOfLE ⋯).op)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑R) (PrimeSpectrum.basicOpen r)) (β.c.app { unop := PrimeSpectrum.basicOpen r }))\n⊢ Eq (CategoryTheory.CategoryStruct.comp X.toΓSpec (AlgebraicGeometry.Spec.locallyRingedSpaceMap f)) β","decl":"theorem comp_ring_hom_ext {X : LocallyRingedSpace.{u}} {R : CommRingCat.{u}} {f : R ⟶ Γ.obj (op X)}\n    {β : X ⟶ Spec.locallyRingedSpaceObj R}\n    (w : X.toΓSpec.base ≫ (Spec.locallyRingedSpaceMap f).base = β.base)\n    (h :\n      ∀ r : R,\n        f ≫ X.presheaf.map (homOfLE le_top : (Opens.map β.base).obj (basicOpen r) ⟶ _).op =\n          toOpen R (basicOpen r) ≫ β.c.app (op (basicOpen r))) :\n    X.toΓSpec ≫ Spec.locallyRingedSpaceMap f = β := by\n  ext1\n  -- Porting note: was `apply Spec.basicOpen_hom_ext`\n  refine Spec.basicOpen_hom_ext w ?_\n  intro r U\n  rw [LocallyRingedSpace.comp_c_app]\n  erw [toOpen_comp_comap_assoc]\n  rw [Category.assoc]\n  erw [toΓSpecSheafedSpace_app_spec, ← X.presheaf.map_comp]\n  exact h r\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.Γ_Spec_left_triangle","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.toSpecΓ (AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })) (X.toΓSpec.c.app { unop := Top.top })) (CategoryTheory.CategoryStruct.id (AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X }))","decl":"/-- `toSpecΓ _` is an isomorphism so these are mutually two-sided inverses. -/\ntheorem Γ_Spec_left_triangle : toSpecΓ (Γ.obj (op X)) ≫ X.toΓSpec.c.app (op ⊤) = 𝟙 _ := by\n  unfold toSpecΓ\n  rw [← toOpen_res _ (basicOpen (1 : Γ.obj (op X))) ⊤ (eqToHom basicOpen_one.symm),\n    Category.assoc, NatTrans.naturality, ← Category.assoc]\n  erw [X.toΓSpecSheafedSpace_app_spec 1, ← Functor.map_comp]\n  convert eqToHom_map X.presheaf _; rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.left_triangle","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.SpecΓIdentity.inv.app (AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })) ((AlgebraicGeometry.identityToΓSpec.app X).c.app { unop := Top.top })) (CategoryTheory.CategoryStruct.id ((CategoryTheory.Functor.id CommRingCat).obj (AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })))","decl":"theorem left_triangle (X : LocallyRingedSpace) :\n    SpecΓIdentity.inv.app (Γ.obj (op X)) ≫ (identityToΓSpec.app X).c.app (op ⊤) = 𝟙 _ :=\n  X.Γ_Spec_left_triangle\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.right_triangle","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : CommRingCat\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.identityToΓSpec.app (AlgebraicGeometry.Spec.toLocallyRingedSpace.obj { unop := R })) (AlgebraicGeometry.Spec.toLocallyRingedSpace.map (AlgebraicGeometry.LocallyRingedSpace.SpecΓIdentity.inv.app R).op)) (CategoryTheory.CategoryStruct.id ((CategoryTheory.Functor.id AlgebraicGeometry.LocallyRingedSpace).obj (AlgebraicGeometry.Spec.toLocallyRingedSpace.obj { unop := R })))","decl":"/-- `SpecΓIdentity` is iso so these are mutually two-sided inverses. -/\ntheorem right_triangle (R : CommRingCat) :\n    identityToΓSpec.app (Spec.toLocallyRingedSpace.obj <| op R) ≫\n        Spec.toLocallyRingedSpace.map (SpecΓIdentity.inv.app R).op =\n      𝟙 _ := by\n  apply LocallyRingedSpace.comp_ring_hom_ext\n  · ext (p : PrimeSpectrum R)\n    dsimp\n    ext x\n    erw [← IsLocalization.AtPrime.to_map_mem_maximal_iff ((structureSheaf R).presheaf.stalk p)\n        p.asIdeal x]\n    rfl\n  · intro r; apply toOpen_res\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction_unit","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ Eq AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.unit AlgebraicGeometry.identityToΓSpec","decl":"lemma locallyRingedSpaceAdjunction_unit :\n    locallyRingedSpaceAdjunction.unit = identityToΓSpec := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction_counit","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ Eq AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.counit (CategoryTheory.NatIso.op AlgebraicGeometry.LocallyRingedSpace.SpecΓIdentity).inv","decl":"lemma locallyRingedSpaceAdjunction_counit :\n    locallyRingedSpaceAdjunction.counit = (NatIso.op SpecΓIdentity.{u}).inv := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction_counit_app","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : Opposite CommRingCat\n⊢ Eq (AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.counit.app R) (AlgebraicGeometry.StructureSheaf.toOpen (↑(Opposite.unop R)) Top.top).op","decl":"@[simp]\nlemma locallyRingedSpaceAdjunction_counit_app (R : CommRingCatᵒᵖ) :\n    locallyRingedSpaceAdjunction.counit.app R =\n      (toOpen R.unop ⊤).op := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction_counit_app'","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : Type u\ninst✝ : CommRing R\n⊢ Eq (AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.counit.app { unop := CommRingCat.of R }) (AlgebraicGeometry.StructureSheaf.toOpen R Top.top).op","decl":"@[simp]\nlemma locallyRingedSpaceAdjunction_counit_app' (R : Type u) [CommRing R] :\n    locallyRingedSpaceAdjunction.counit.app (op <| CommRingCat.of R) =\n      (toOpen R ⊤).op := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction_homEquiv_apply","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nR : Opposite CommRingCat\nf : Quiver.Hom (AlgebraicGeometry.LocallyRingedSpace.Γ.rightOp.obj X) R\n⊢ Eq ((AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.homEquiv X R) f) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.identityToΓSpec.app X) (AlgebraicGeometry.Spec.locallyRingedSpaceMap f.unop))","decl":"lemma locallyRingedSpaceAdjunction_homEquiv_apply\n    {X : LocallyRingedSpace} {R : CommRingCatᵒᵖ}\n    (f : Γ.rightOp.obj X ⟶ R) :\n    locallyRingedSpaceAdjunction.homEquiv X R f =\n      identityToΓSpec.app X ≫ Spec.locallyRingedSpaceMap f.unop := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction_homEquiv_apply'","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nR : Type u\ninst✝ : CommRing R\nf : Quiver.Hom (CommRingCat.of R) (AlgebraicGeometry.LocallyRingedSpace.Γ.obj { unop := X })\n⊢ Eq ((AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.homEquiv X { unop := CommRingCat.of R }) { unop := f }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.identityToΓSpec.app X) (AlgebraicGeometry.Spec.locallyRingedSpaceMap f))","decl":"lemma locallyRingedSpaceAdjunction_homEquiv_apply'\n    {X : LocallyRingedSpace} {R : Type u} [CommRing R]\n    (f : CommRingCat.of R ⟶ Γ.obj <| op X) :\n    locallyRingedSpaceAdjunction.homEquiv X (op <| CommRingCat.of R) (op f) =\n      identityToΓSpec.app X ≫ Spec.locallyRingedSpaceMap f := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.toOpen_comp_locallyRingedSpaceAdjunction_homEquiv_app","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nR : Type u\ninst✝ : CommRing R\nf : Quiver.Hom (AlgebraicGeometry.LocallyRingedSpace.Γ.rightOp.obj X) { unop := CommRingCat.of R }\nU : Opposite (TopologicalSpace.Opens ↑↑(AlgebraicGeometry.Spec.toLocallyRingedSpace.obj { unop := CommRingCat.of R }).toPresheafedSpace)\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen R (Opposite.unop U)) (((AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.homEquiv X { unop := CommRingCat.of R }) f).c.app U)) (CategoryTheory.CategoryStruct.comp f.unop (X.presheaf.map (CategoryTheory.homOfLE ⋯).op))","decl":"lemma toOpen_comp_locallyRingedSpaceAdjunction_homEquiv_app\n    {X : LocallyRingedSpace} {R : Type u} [CommRing R]\n    (f : Γ.rightOp.obj X ⟶ op (CommRingCat.of R)) (U) :\n    StructureSheaf.toOpen R U.unop ≫\n      (locallyRingedSpaceAdjunction.homEquiv X (op <| CommRingCat.of R) f).c.app U =\n    f.unop ≫ X.presheaf.map (homOfLE le_top).op := by\n  rw [← StructureSheaf.toOpen_res _ _ _ (homOfLE le_top), Category.assoc,\n    NatTrans.naturality _ (homOfLE (le_top (a := U.unop))).op,\n    show (toOpen R ⊤) = (toOpen R ⊤).op.unop from rfl,\n    ← locallyRingedSpaceAdjunction_counit_app']\n  simp_rw [← Γ_map_op]\n  rw [← Γ.rightOp_map_unop, ← Category.assoc, ← unop_comp, ← Adjunction.homEquiv_counit,\n    Equiv.symm_apply_apply]\n  rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.adjunction_homEquiv_apply","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nR : Opposite CommRingCat\nf : Quiver.Hom { unop := AlgebraicGeometry.Scheme.Γ.obj { unop := X } } R\n⊢ Eq ((AlgebraicGeometry.ΓSpec.adjunction.homEquiv X R) f) { toHom_1 := (AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.homEquiv X.toLocallyRingedSpace R) f }","decl":"theorem adjunction_homEquiv_apply {X : Scheme} {R : CommRingCatᵒᵖ}\n    (f : (op <| Scheme.Γ.obj <| op X) ⟶ R) :\n    ΓSpec.adjunction.homEquiv X R f = ⟨locallyRingedSpaceAdjunction.homEquiv X.1 R f⟩ := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.adjunction_homEquiv_symm_apply","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nR : Opposite CommRingCat\nf : Quiver.Hom X (AlgebraicGeometry.Scheme.Spec.obj R)\n⊢ Eq ((AlgebraicGeometry.ΓSpec.adjunction.homEquiv X R).symm f) ((AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.homEquiv X.toLocallyRingedSpace R).symm (AlgebraicGeometry.Scheme.Hom.toLRSHom f))","decl":"theorem adjunction_homEquiv_symm_apply {X : Scheme} {R : CommRingCatᵒᵖ}\n    (f : X ⟶ Scheme.Spec.obj R) :\n    (ΓSpec.adjunction.homEquiv X R).symm f =\n      (locallyRingedSpaceAdjunction.homEquiv X.1 R).symm f.toLRSHom := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.adjunction_counit_app'","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : Opposite CommRingCat\n⊢ Eq (AlgebraicGeometry.ΓSpec.adjunction.counit.app R) (AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.counit.app R)","decl":"theorem adjunction_counit_app' {R : CommRingCatᵒᵖ} :\n    ΓSpec.adjunction.counit.app R = locallyRingedSpaceAdjunction.counit.app R := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.adjunction_counit_app","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : Opposite CommRingCat\n⊢ Eq (AlgebraicGeometry.ΓSpec.adjunction.counit.app R) (AlgebraicGeometry.Scheme.ΓSpecIso (Opposite.unop R)).inv.op","decl":"@[simp]\ntheorem adjunction_counit_app {R : CommRingCatᵒᵖ} :\n    ΓSpec.adjunction.counit.app R = (Scheme.ΓSpecIso (unop R)).inv.op := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.adjunction_unit_app","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\n⊢ Eq (AlgebraicGeometry.ΓSpec.adjunction.unit.app X) X.toSpecΓ","decl":"@[simp]\ntheorem adjunction_unit_app {X : Scheme} :\n    ΓSpec.adjunction.unit.app X = X.toSpecΓ := rfl\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.isIso_locallyRingedSpaceAdjunction_counit","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ CategoryTheory.IsIso AlgebraicGeometry.ΓSpec.locallyRingedSpaceAdjunction.counit","decl":"instance isIso_locallyRingedSpaceAdjunction_counit :\n    IsIso.{u + 1, u + 1} locallyRingedSpaceAdjunction.counit :=\n  (NatIso.op SpecΓIdentity).isIso_inv\n\n"}
{"name":"AlgebraicGeometry.ΓSpec.isIso_adjunction_counit","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ CategoryTheory.IsIso AlgebraicGeometry.ΓSpec.adjunction.counit","decl":"instance isIso_adjunction_counit : IsIso ΓSpec.adjunction.counit := by\n  apply (config := { allowSynthFailures := true }) NatIso.isIso_of_isIso_app\n  intro R\n  rw [adjunction_counit_app]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.Scheme.toSpecΓ_base","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nx : ↑↑X.toPresheafedSpace\n⊢ Eq (X.toSpecΓ.base x) ((AlgebraicGeometry.Spec.map (X.presheaf.germ Top.top x trivial)).base (IsLocalRing.closedPoint ↑(X.presheaf.stalk x)))","decl":"theorem Scheme.toSpecΓ_base (X : Scheme.{u}) (x) :\n    (Scheme.toSpecΓ X).base x =\n      (Spec.map (X.presheaf.germ ⊤ x trivial)).base (IsLocalRing.closedPoint _) := rfl\n\n"}
{"name":"AlgebraicGeometry.Scheme.toSpecΓ_naturality_assoc","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\nZ : AlgebraicGeometry.Scheme\nh : Quiver.Hom (AlgebraicGeometry.Spec (Y.presheaf.obj { unop := Top.top })) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp f (CategoryTheory.CategoryStruct.comp Y.toSpecΓ h)) (CategoryTheory.CategoryStruct.comp X.toSpecΓ (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.map (AlgebraicGeometry.Scheme.Hom.appTop f)) h))","decl":"@[reassoc]\ntheorem Scheme.toSpecΓ_naturality {X Y : Scheme.{u}} (f : X ⟶ Y) :\n    f ≫ Y.toSpecΓ = X.toSpecΓ ≫ Spec.map (f.appTop) :=\n  ΓSpec.adjunction.unit.naturality f\n\n"}
{"name":"AlgebraicGeometry.Scheme.toSpecΓ_naturality","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X Y : AlgebraicGeometry.Scheme\nf : Quiver.Hom X Y\n⊢ Eq (CategoryTheory.CategoryStruct.comp f Y.toSpecΓ) (CategoryTheory.CategoryStruct.comp X.toSpecΓ (AlgebraicGeometry.Spec.map (AlgebraicGeometry.Scheme.Hom.appTop f)))","decl":"@[reassoc]\ntheorem Scheme.toSpecΓ_naturality {X Y : Scheme.{u}} (f : X ⟶ Y) :\n    f ≫ Y.toSpecΓ = X.toSpecΓ ≫ Spec.map (f.appTop) :=\n  ΓSpec.adjunction.unit.naturality f\n\n"}
{"name":"AlgebraicGeometry.Scheme.toSpecΓ_appTop","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\n⊢ Eq (AlgebraicGeometry.Scheme.Hom.appTop X.toSpecΓ) (AlgebraicGeometry.Scheme.ΓSpecIso (X.presheaf.obj { unop := Top.top })).hom","decl":"@[simp]\ntheorem Scheme.toSpecΓ_appTop (X : Scheme.{u}) :\n    X.toSpecΓ.appTop = (Scheme.ΓSpecIso Γ(X, ⊤)).hom := by\n  have := ΓSpec.adjunction.left_triangle_components X\n  dsimp at this\n  rw [← IsIso.eq_comp_inv] at this\n  simp only [ΓSpec.adjunction_counit_app, Functor.id_obj, Functor.comp_obj, Functor.rightOp_obj,\n    Scheme.Γ_obj, Category.id_comp] at this\n  rw [← Quiver.Hom.op_inj.eq_iff, this, ← op_inv, IsIso.Iso.inv_inv]\n\n"}
{"name":"AlgebraicGeometry.Scheme.toSpecΓ_app_top","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\n⊢ Eq (AlgebraicGeometry.Scheme.Hom.appTop X.toSpecΓ) (AlgebraicGeometry.Scheme.ΓSpecIso (X.presheaf.obj { unop := Top.top })).hom","decl":"@[deprecated (since := \"2024-11-23\")] alias Scheme.toSpecΓ_app_top := Scheme.toSpecΓ_appTop\n\n"}
{"name":"AlgebraicGeometry.SpecMap_ΓSpecIso_hom","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : CommRingCat\n⊢ Eq (AlgebraicGeometry.Spec.map (AlgebraicGeometry.Scheme.ΓSpecIso R).hom) (AlgebraicGeometry.Spec R).toSpecΓ","decl":"@[simp]\ntheorem SpecMap_ΓSpecIso_hom (R : CommRingCat.{u}) :\n    Spec.map ((Scheme.ΓSpecIso R).hom) = (Spec R).toSpecΓ := by\n  have := ΓSpec.adjunction.right_triangle_components (op R)\n  dsimp at this\n  rwa [← IsIso.eq_comp_inv, Category.id_comp, ← Spec.map_inv, IsIso.Iso.inv_inv, eq_comm] at this\n\n"}
{"name":"AlgebraicGeometry.Scheme.toSpecΓ_preimage_basicOpen","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nr : ↑(X.presheaf.obj { unop := Top.top })\n⊢ Eq ((TopologicalSpace.Opens.map X.toSpecΓ.base).obj (PrimeSpectrum.basicOpen r)) (X.basicOpen r)","decl":"lemma Scheme.toSpecΓ_preimage_basicOpen (X : Scheme.{u}) (r : Γ(X, ⊤)) :\n    X.toSpecΓ ⁻¹ᵁ (PrimeSpectrum.basicOpen r) = X.basicOpen r := by\n  rw [← basicOpen_eq_of_affine, Scheme.preimage_basicOpen, ← Scheme.Hom.appTop]\n  congr\n  rw [Scheme.toSpecΓ_appTop]\n  exact Iso.inv_hom_id_apply (C := CommRingCat) _ _\n\n-- Warning: this LHS of this lemma breaks the structure-sheaf abstraction.\n"}
{"name":"AlgebraicGeometry.toOpen_toSpecΓ_app","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nU : (AlgebraicGeometry.Spec (X.presheaf.obj { unop := Top.top })).Opens\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑(X.presheaf.obj { unop := Top.top })) U) (AlgebraicGeometry.Scheme.Hom.app X.toSpecΓ U)) (X.presheaf.map (CategoryTheory.homOfLE ⋯).op)","decl":"@[reassoc (attr := simp)]\ntheorem toOpen_toSpecΓ_app {X : Scheme.{u}} (U) :\n    StructureSheaf.toOpen _ _ ≫ X.toSpecΓ.app U =\n      X.presheaf.map (homOfLE (by exact le_top)).op := by\n  rw [← StructureSheaf.toOpen_res _ _ _ (homOfLE le_top), Category.assoc,\n    NatTrans.naturality _ (homOfLE (le_top (a := U))).op]\n  show (ΓSpec.adjunction.counit.app (Scheme.Γ.rightOp.obj X)).unop ≫\n    (Scheme.Γ.rightOp.map (ΓSpec.adjunction.unit.app X)).unop ≫ _ = _\n  rw [← Category.assoc, ← unop_comp, ΓSpec.adjunction.left_triangle_components]\n  dsimp\n  exact Category.id_comp _\n\n"}
{"name":"AlgebraicGeometry.toOpen_toSpecΓ_app_assoc","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nU : (AlgebraicGeometry.Spec (X.presheaf.obj { unop := Top.top })).Opens\nZ : CommRingCat\nh : Quiver.Hom (X.presheaf.obj { unop := (TopologicalSpace.Opens.map X.toSpecΓ.base).obj U }) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.StructureSheaf.toOpen (↑(X.presheaf.obj { unop := Top.top })) U) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Scheme.Hom.app X.toSpecΓ U) h)) (CategoryTheory.CategoryStruct.comp (X.presheaf.map (CategoryTheory.homOfLE ⋯).op) h)","decl":"@[reassoc (attr := simp)]\ntheorem toOpen_toSpecΓ_app {X : Scheme.{u}} (U) :\n    StructureSheaf.toOpen _ _ ≫ X.toSpecΓ.app U =\n      X.presheaf.map (homOfLE (by exact le_top)).op := by\n  rw [← StructureSheaf.toOpen_res _ _ _ (homOfLE le_top), Category.assoc,\n    NatTrans.naturality _ (homOfLE (le_top (a := U))).op]\n  show (ΓSpec.adjunction.counit.app (Scheme.Γ.rightOp.obj X)).unop ≫\n    (Scheme.Γ.rightOp.map (ΓSpec.adjunction.unit.app X)).unop ≫ _ = _\n  rw [← Category.assoc, ← unop_comp, ΓSpec.adjunction.left_triangle_components]\n  dsimp\n  exact Category.id_comp _\n\n"}
{"name":"AlgebraicGeometry.ΓSpecIso_inv_ΓSpec_adjunction_homEquiv","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nB : CommRingCat\nφ : Quiver.Hom B (X.presheaf.obj { unop := Top.top })\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Scheme.ΓSpecIso B).inv (AlgebraicGeometry.Scheme.Hom.appTop ((AlgebraicGeometry.ΓSpec.adjunction.homEquiv X { unop := B }) φ.op))) φ","decl":"lemma ΓSpecIso_inv_ΓSpec_adjunction_homEquiv {X : Scheme.{u}} {B : CommRingCat} (φ : B ⟶ Γ(X, ⊤)) :\n    (Scheme.ΓSpecIso B).inv ≫ ((ΓSpec.adjunction.homEquiv X (op B)) φ.op).appTop = φ := by\n  simp only [Adjunction.homEquiv_apply, Scheme.Spec_map, Opens.map_top, Scheme.comp_app]\n  simp\n\n"}
{"name":"AlgebraicGeometry.ΓSpec_adjunction_homEquiv_eq","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nB : CommRingCat\nφ : Quiver.Hom B (X.presheaf.obj { unop := Top.top })\n⊢ Eq (AlgebraicGeometry.Scheme.Hom.appTop ((AlgebraicGeometry.ΓSpec.adjunction.homEquiv X { unop := B }) φ.op)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Scheme.ΓSpecIso B).hom φ)","decl":"lemma ΓSpec_adjunction_homEquiv_eq {X : Scheme.{u}} {B : CommRingCat} (φ : B ⟶ Γ(X, ⊤)) :\n    ((ΓSpec.adjunction.homEquiv X (op B)) φ.op).appTop = (Scheme.ΓSpecIso B).hom ≫ φ := by\n  rw [← Iso.inv_comp_eq, ΓSpecIso_inv_ΓSpec_adjunction_homEquiv]\n\n"}
{"name":"AlgebraicGeometry.ΓSpecIso_obj_hom","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"X : AlgebraicGeometry.Scheme\nU : X.Opens\n⊢ Eq (AlgebraicGeometry.Scheme.ΓSpecIso (X.presheaf.obj { unop := U })).hom (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Scheme.Hom.appTop (AlgebraicGeometry.Spec.map U.topIso.inv)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Scheme.Hom.appTop (↑U).toSpecΓ) U.topIso.hom))","decl":"theorem ΓSpecIso_obj_hom {X : Scheme.{u}} (U : X.Opens) :\n    (Scheme.ΓSpecIso Γ(X, U)).hom = (Spec.map U.topIso.inv).appTop ≫\n      U.toScheme.toSpecΓ.appTop ≫ U.topIso.hom := by simp\n\n"}
{"name":"AlgebraicGeometry.instPreservesLimitsOppositeCommRingCatLocallyRingedSpaceToLocallyRingedSpace","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ CategoryTheory.Limits.PreservesLimits AlgebraicGeometry.Spec.toLocallyRingedSpace","decl":"/-- Spec preserves limits. -/\ninstance : Limits.PreservesLimits Spec.toLocallyRingedSpace :=\n  ΓSpec.locallyRingedSpaceAdjunction.rightAdjoint_preservesLimits\n\n"}
{"name":"AlgebraicGeometry.Spec.preservesLimits","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ CategoryTheory.Limits.PreservesLimits AlgebraicGeometry.Scheme.Spec","decl":"instance Spec.preservesLimits : Limits.PreservesLimits Scheme.Spec :=\n  ΓSpec.adjunction.rightAdjoint_preservesLimits\n\n"}
{"name":"AlgebraicGeometry.instFullOppositeCommRingCatLocallyRingedSpaceToLocallyRingedSpace","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ AlgebraicGeometry.Spec.toLocallyRingedSpace.Full","decl":"/-- Spec is a full functor. -/\ninstance : Spec.toLocallyRingedSpace.Full :=\n  Spec.fullyFaithfulToLocallyRingedSpace.full\n\n"}
{"name":"AlgebraicGeometry.instFaithfulOppositeCommRingCatLocallyRingedSpaceToLocallyRingedSpace","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ AlgebraicGeometry.Spec.toLocallyRingedSpace.Faithful","decl":"/-- Spec is a faithful functor. -/\ninstance : Spec.toLocallyRingedSpace.Faithful :=\n  Spec.fullyFaithfulToLocallyRingedSpace.faithful\n\n"}
{"name":"AlgebraicGeometry.Spec.full","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ AlgebraicGeometry.Scheme.Spec.Full","decl":"/-- Spec is a full functor. -/\ninstance Spec.full : Scheme.Spec.Full :=\n  Spec.fullyFaithful.full\n\n"}
{"name":"AlgebraicGeometry.Spec.faithful","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ AlgebraicGeometry.Scheme.Spec.Faithful","decl":"/-- Spec is a faithful functor. -/\ninstance Spec.faithful : Scheme.Spec.Faithful :=\n  Spec.fullyFaithful.faithful\n\n"}
{"name":"AlgebraicGeometry.Spec.map_inj","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\nφ ψ : Quiver.Hom R S\n⊢ Iff (Eq (AlgebraicGeometry.Spec.map φ) (AlgebraicGeometry.Spec.map ψ)) (Eq φ ψ)","decl":"lemma Spec.map_inj : Spec.map φ = Spec.map ψ ↔ φ = ψ := by\n  rw [iff_comm, ← Quiver.Hom.op_inj.eq_iff, ← Scheme.Spec.map_injective.eq_iff]\n  rfl\n\n"}
{"name":"AlgebraicGeometry.Spec.map_injective","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\n⊢ Function.Injective AlgebraicGeometry.Spec.map","decl":"lemma Spec.map_injective {R S : CommRingCat} : Function.Injective (Spec.map : (R ⟶ S) → _) :=\n  fun _ _ ↦ Spec.map_inj.mp\n\n"}
{"name":"AlgebraicGeometry.Spec.map_preimage","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\nf : Quiver.Hom (AlgebraicGeometry.Spec S) (AlgebraicGeometry.Spec R)\n⊢ Eq (AlgebraicGeometry.Spec.map (AlgebraicGeometry.Spec.preimage f)) f","decl":"@[simp] lemma Spec.map_preimage : Spec.map (Spec.preimage f) = f := Scheme.Spec.map_preimage f\n\n"}
{"name":"AlgebraicGeometry.Spec.preimage_map","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\nφ : Quiver.Hom R S\n⊢ Eq (AlgebraicGeometry.Spec.preimage (AlgebraicGeometry.Spec.map φ)) φ","decl":"variable (φ) in\n@[simp] lemma Spec.preimage_map : Spec.preimage (Spec.map φ) = φ :=\n  Spec.map_injective (Spec.map_preimage (Spec.map φ))\n\n"}
{"name":"AlgebraicGeometry.Spec.map_surjective","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\n⊢ Function.Surjective AlgebraicGeometry.Spec.map","decl":"/-- Useful for replacing `f` by `Spec.map φ` everywhere in proofs. -/\nlemma Spec.map_surjective {R S : CommRingCat} :\n    Function.Surjective (Spec.map : (R ⟶ S) → _) := by\n  intro f\n  use Spec.preimage f\n  simp\n\n"}
{"name":"AlgebraicGeometry.Spec.homEquiv_apply","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\nf : Quiver.Hom (AlgebraicGeometry.Spec S) (AlgebraicGeometry.Spec R)\n⊢ Eq (AlgebraicGeometry.Spec.homEquiv f) (AlgebraicGeometry.Spec.preimage f)","decl":"/-- Spec is fully faithful -/\n@[simps]\ndef Spec.homEquiv {R S : CommRingCat} : (Spec S ⟶ Spec R) ≃ (R ⟶ S) where\n  toFun := Spec.preimage\n  invFun := Spec.map\n  left_inv := Spec.map_preimage\n  right_inv := Spec.preimage_map\n\n"}
{"name":"AlgebraicGeometry.Spec.homEquiv_symm_apply","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S : CommRingCat\nf : Quiver.Hom R S\n⊢ Eq (AlgebraicGeometry.Spec.homEquiv.symm f) (AlgebraicGeometry.Spec.map f)","decl":"/-- Spec is fully faithful -/\n@[simps]\ndef Spec.homEquiv {R S : CommRingCat} : (Spec S ⟶ Spec R) ≃ (R ⟶ S) where\n  toFun := Spec.preimage\n  invFun := Spec.map\n  left_inv := Spec.map_preimage\n  right_inv := Spec.preimage_map\n\n"}
{"name":"AlgebraicGeometry.Spec.preimage_id","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R : CommRingCat\n⊢ Eq (AlgebraicGeometry.Spec.preimage (CategoryTheory.CategoryStruct.id (AlgebraicGeometry.Spec R))) (CategoryTheory.CategoryStruct.id R)","decl":"@[simp]\nlemma Spec.preimage_id {R : CommRingCat} : Spec.preimage (𝟙 (Spec R)) = 𝟙 R :=\n  Spec.map_injective (by simp)\n\n"}
{"name":"AlgebraicGeometry.Spec.preimage_comp_assoc","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S T : CommRingCat\nf : Quiver.Hom (AlgebraicGeometry.Spec R) (AlgebraicGeometry.Spec S)\ng : Quiver.Hom (AlgebraicGeometry.Spec S) (AlgebraicGeometry.Spec T)\nZ : CommRingCat\nh : Quiver.Hom R Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.preimage (CategoryTheory.CategoryStruct.comp f g)) h) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.preimage g) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.preimage f) h))","decl":"@[simp, reassoc]\nlemma Spec.preimage_comp {R S T : CommRingCat} (f : Spec R ⟶ Spec S) (g : Spec S ⟶ Spec T) :\n    Spec.preimage (f ≫ g) = Spec.preimage g ≫ Spec.preimage f :=\n  Spec.map_injective (by simp)\n\n"}
{"name":"AlgebraicGeometry.Spec.preimage_comp","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"R S T : CommRingCat\nf : Quiver.Hom (AlgebraicGeometry.Spec R) (AlgebraicGeometry.Spec S)\ng : Quiver.Hom (AlgebraicGeometry.Spec S) (AlgebraicGeometry.Spec T)\n⊢ Eq (AlgebraicGeometry.Spec.preimage (CategoryTheory.CategoryStruct.comp f g)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.Spec.preimage g) (AlgebraicGeometry.Spec.preimage f))","decl":"@[simp, reassoc]\nlemma Spec.preimage_comp {R S T : CommRingCat} (f : Spec R ⟶ Spec S) (g : Spec S ⟶ Spec T) :\n    Spec.preimage (f ≫ g) = Spec.preimage g ≫ Spec.preimage f :=\n  Spec.map_injective (by simp)\n\n"}
{"name":"AlgebraicGeometry.instIsRightAdjointLocallyRingedSpaceOppositeCommRingCatToLocallyRingedSpace","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ AlgebraicGeometry.Spec.toLocallyRingedSpace.IsRightAdjoint","decl":"instance : Spec.toLocallyRingedSpace.IsRightAdjoint :=\n  (ΓSpec.locallyRingedSpaceAdjunction).isRightAdjoint\n\n"}
{"name":"AlgebraicGeometry.instIsRightAdjointSchemeOppositeCommRingCatSpec","module":"Mathlib.AlgebraicGeometry.GammaSpecAdjunction","initialProofState":"⊢ AlgebraicGeometry.Scheme.Spec.IsRightAdjoint","decl":"instance : Scheme.Spec.IsRightAdjoint :=\n  (ΓSpec.adjunction).isRightAdjoint\n\n"}
