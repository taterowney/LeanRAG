{"name":"isClosed_nullSubgroup","module":"Mathlib.Analysis.Normed.Group.NullSubmodule","initialProofState":"M : Type u_1\ninst✝ : SeminormedCommGroup M\n⊢ IsClosed ↑(nullSubgroup M)","decl":"@[to_additive]\nlemma isClosed_nullSubgroup : IsClosed (nullSubgroup M : Set M) := by\n  apply isClosed_singleton.preimage continuous_norm'\n\n"}
{"name":"isClosed_nullAddSubgroup","module":"Mathlib.Analysis.Normed.Group.NullSubmodule","initialProofState":"M : Type u_1\ninst✝ : SeminormedAddCommGroup M\n⊢ IsClosed ↑(nullAddSubgroup M)","decl":"@[to_additive]\nlemma isClosed_nullSubgroup : IsClosed (nullSubgroup M : Set M) := by\n  apply isClosed_singleton.preimage continuous_norm'\n\n"}
{"name":"mem_nullSubgroup_iff","module":"Mathlib.Analysis.Normed.Group.NullSubmodule","initialProofState":"M : Type u_1\ninst✝ : SeminormedCommGroup M\nx : M\n⊢ Iff (Membership.mem (nullSubgroup M) x) (Eq (Norm.norm x) 0)","decl":"@[to_additive (attr := simp)]\nlemma mem_nullSubgroup_iff {x : M} : x ∈ nullSubgroup M ↔ ‖x‖ = 0 := Iff.rfl\n\n"}
{"name":"mem_nullAddSubgroup_iff","module":"Mathlib.Analysis.Normed.Group.NullSubmodule","initialProofState":"M : Type u_1\ninst✝ : SeminormedAddCommGroup M\nx : M\n⊢ Iff (Membership.mem (nullAddSubgroup M) x) (Eq (Norm.norm x) 0)","decl":"@[to_additive (attr := simp)]\nlemma mem_nullSubgroup_iff {x : M} : x ∈ nullSubgroup M ↔ ‖x‖ = 0 := Iff.rfl\n\n"}
{"name":"isClosed_nullSubmodule","module":"Mathlib.Analysis.Normed.Group.NullSubmodule","initialProofState":"𝕜 : Type u_2\nE : Type u_3\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedRing 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\n⊢ IsClosed ↑(nullSubmodule 𝕜 E)","decl":"lemma isClosed_nullSubmodule : IsClosed (nullSubmodule 𝕜 E : Set E) := isClosed_nullAddSubgroup\n\n"}
{"name":"mem_nullSubmodule_iff","module":"Mathlib.Analysis.Normed.Group.NullSubmodule","initialProofState":"𝕜 : Type u_2\nE : Type u_3\ninst✝³ : SeminormedAddCommGroup E\ninst✝² : SeminormedRing 𝕜\ninst✝¹ : Module 𝕜 E\ninst✝ : BoundedSMul 𝕜 E\nx : E\n⊢ Iff (Membership.mem (nullSubmodule 𝕜 E) x) (Eq (Norm.norm x) 0)","decl":"@[simp]\nlemma mem_nullSubmodule_iff {x : E} : x ∈ nullSubmodule 𝕜 E ↔ ‖x‖ = 0 := Iff.rfl\n"}
