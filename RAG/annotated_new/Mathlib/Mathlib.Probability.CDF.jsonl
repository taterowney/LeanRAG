{"name":"ProbabilityTheory.cdf_nonneg","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\nx : Real\n‚ä¢ LE.le 0 (‚Üë(ProbabilityTheory.cdf Œº) x)","decl":"/-- The cdf is non-negative. -/\nlemma cdf_nonneg (x : ‚Ñù) : 0 ‚â§ cdf Œº x := condCDF_nonneg _ _ _\n\n"}
{"name":"ProbabilityTheory.cdf_le_one","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\nx : Real\n‚ä¢ LE.le (‚Üë(ProbabilityTheory.cdf Œº) x) 1","decl":"/-- The cdf is lower or equal to 1. -/\nlemma cdf_le_one (x : ‚Ñù) : cdf Œº x ‚â§ 1 := condCDF_le_one _ _ _\n\n"}
{"name":"ProbabilityTheory.monotone_cdf","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\n‚ä¢ Monotone ‚Üë(ProbabilityTheory.cdf Œº)","decl":"/-- The cdf is monotone. -/\nlemma monotone_cdf : Monotone (cdf Œº) := (condCDF _ _).mono\n\n"}
{"name":"ProbabilityTheory.tendsto_cdf_atBot","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\n‚ä¢ Filter.Tendsto (‚Üë(ProbabilityTheory.cdf Œº)) Filter.atBot (nhds 0)","decl":"/-- The cdf tends to 0 at -‚àû. -/\nlemma tendsto_cdf_atBot : Tendsto (cdf Œº) atBot (ùìù 0) := tendsto_condCDF_atBot _ _\n\n"}
{"name":"ProbabilityTheory.tendsto_cdf_atTop","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\n‚ä¢ Filter.Tendsto (‚Üë(ProbabilityTheory.cdf Œº)) Filter.atTop (nhds 1)","decl":"/-- The cdf tends to 1 at +‚àû. -/\nlemma tendsto_cdf_atTop : Tendsto (cdf Œº) atTop (ùìù 1) := tendsto_condCDF_atTop _ _\n\n"}
{"name":"ProbabilityTheory.ofReal_cdf","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\ninst‚úù : MeasureTheory.IsProbabilityMeasure Œº\nx : Real\n‚ä¢ Eq (ENNReal.ofReal (‚Üë(ProbabilityTheory.cdf Œº) x)) (Œº (Set.Iic x))","decl":"lemma ofReal_cdf [IsProbabilityMeasure Œº] (x : ‚Ñù) : ENNReal.ofReal (cdf Œº x) = Œº (Iic x) := by\n  have h := lintegral_condCDF ((Measure.dirac Unit.unit).prod Œº) x\n  simpa only [MeasureTheory.Measure.fst_prod, Measure.prod_prod, measure_univ, one_mul,\n    lintegral_dirac] using h\n\n"}
{"name":"ProbabilityTheory.cdf_eq_toReal","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\ninst‚úù : MeasureTheory.IsProbabilityMeasure Œº\nx : Real\n‚ä¢ Eq (‚Üë(ProbabilityTheory.cdf Œº) x) (Œº (Set.Iic x)).toReal","decl":"lemma cdf_eq_toReal [IsProbabilityMeasure Œº] (x : ‚Ñù) : cdf Œº x = (Œº (Iic x)).toReal := by\n  rw [‚Üê ofReal_cdf Œº x, ENNReal.toReal_ofReal (cdf_nonneg Œº x)]\n\n"}
{"name":"ProbabilityTheory.instIsProbabilityMeasurecdf","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\n‚ä¢ MeasureTheory.IsProbabilityMeasure (ProbabilityTheory.cdf Œº).measure","decl":"instance instIsProbabilityMeasurecdf : IsProbabilityMeasure (cdf Œº).measure := by\n  constructor\n  simp only [StieltjesFunction.measure_univ _ (tendsto_cdf_atBot Œº) (tendsto_cdf_atTop Œº), sub_zero,\n    ENNReal.ofReal_one]\n\n"}
{"name":"ProbabilityTheory.measure_cdf","module":"Mathlib.Probability.CDF","initialProofState":"Œº : MeasureTheory.Measure Real\ninst‚úù : MeasureTheory.IsProbabilityMeasure Œº\n‚ä¢ Eq (ProbabilityTheory.cdf Œº).measure Œº","decl":"/-- The measure associated to the cdf of a probability measure is the same probability measure. -/\nlemma measure_cdf [IsProbabilityMeasure Œº] : (cdf Œº).measure = Œº := by\n  refine Measure.ext_of_Iic (cdf Œº).measure Œº (fun a ‚Ü¶ ?_)\n  rw [StieltjesFunction.measure_Iic _ (tendsto_cdf_atBot Œº), sub_zero, ofReal_cdf]\n\n"}
{"name":"ProbabilityTheory.cdf_measure_stieltjesFunction","module":"Mathlib.Probability.CDF","initialProofState":"f : StieltjesFunction\nhf0 : Filter.Tendsto (‚Üëf) Filter.atBot (nhds 0)\nhf1 : Filter.Tendsto (‚Üëf) Filter.atTop (nhds 1)\n‚ä¢ Eq (ProbabilityTheory.cdf f.measure) f","decl":"lemma cdf_measure_stieltjesFunction (f : StieltjesFunction) (hf0 : Tendsto f atBot (ùìù 0))\n    (hf1 : Tendsto f atTop (ùìù 1)) :\n    cdf f.measure = f := by\n  refine (cdf f.measure).eq_of_measure_of_tendsto_atBot f ?_ (tendsto_cdf_atBot _) hf0\n  have h_prob : IsProbabilityMeasure f.measure :=\n    ‚ü®by rw [f.measure_univ hf0 hf1, sub_zero, ENNReal.ofReal_one]‚ü©\n  exact measure_cdf f.measure\n\n"}
{"name":"MeasureTheory.Measure.eq_of_cdf","module":"Mathlib.Probability.CDF","initialProofState":"Œº ŒΩ : MeasureTheory.Measure Real\ninst‚úù¬π : MeasureTheory.IsProbabilityMeasure Œº\ninst‚úù : MeasureTheory.IsProbabilityMeasure ŒΩ\nh : Eq (ProbabilityTheory.cdf Œº) (ProbabilityTheory.cdf ŒΩ)\n‚ä¢ Eq Œº ŒΩ","decl":"/-- If two real probability distributions have the same cdf, they are equal. -/\nlemma MeasureTheory.Measure.eq_of_cdf (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº]\n    [IsProbabilityMeasure ŒΩ] (h : cdf Œº = cdf ŒΩ) : Œº = ŒΩ := by\n  rw [‚Üê measure_cdf Œº, ‚Üê measure_cdf ŒΩ, h]\n\n"}
{"name":"MeasureTheory.Measure.cdf_eq_iff","module":"Mathlib.Probability.CDF","initialProofState":"Œº ŒΩ : MeasureTheory.Measure Real\ninst‚úù¬π : MeasureTheory.IsProbabilityMeasure Œº\ninst‚úù : MeasureTheory.IsProbabilityMeasure ŒΩ\n‚ä¢ Iff (Eq (ProbabilityTheory.cdf Œº) (ProbabilityTheory.cdf ŒΩ)) (Eq Œº ŒΩ)","decl":"@[simp] lemma MeasureTheory.Measure.cdf_eq_iff (Œº ŒΩ : Measure ‚Ñù) [IsProbabilityMeasure Œº]\n    [IsProbabilityMeasure ŒΩ] :\n    cdf Œº = cdf ŒΩ ‚Üî Œº = ŒΩ :=\n‚ü®MeasureTheory.Measure.eq_of_cdf Œº ŒΩ, fun h ‚Ü¶ by rw [h]‚ü©\n"}
