{"name":"IsLocalExtrOn.range_ne_top_of_hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.LagrangeMultipliers","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : CompleteSpace E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace Real F\ninst✝ : CompleteSpace F\nf : E → F\nφ : E → Real\nx₀ : E\nf' : ContinuousLinearMap (RingHom.id Real) E F\nφ' : ContinuousLinearMap (RingHom.id Real) E Real\nhextr : IsLocalExtrOn φ (setOf fun x => Eq (f x) (f x₀)) x₀\nhf' : HasStrictFDerivAt f f' x₀\nhφ' : HasStrictFDerivAt φ φ' x₀\n⊢ Ne (LinearMap.range (f'.prod φ')) Top.top","decl":"/-- Lagrange multipliers theorem: if `φ : E → ℝ` has a local extremum on the set `{x | f x = f x₀}`\nat `x₀`, both `f : E → F` and `φ` are strictly differentiable at `x₀`, and the codomain of `f` is\na complete space, then the linear map `x ↦ (f' x, φ' x)` is not surjective. -/\ntheorem IsLocalExtrOn.range_ne_top_of_hasStrictFDerivAt\n    (hextr : IsLocalExtrOn φ {x | f x = f x₀} x₀) (hf' : HasStrictFDerivAt f f' x₀)\n    (hφ' : HasStrictFDerivAt φ φ' x₀) : LinearMap.range (f'.prod φ') ≠ ⊤ := by\n  intro htop\n  set fφ := fun x => (f x, φ x)\n  have A : map φ (𝓝[f ⁻¹' {f x₀}] x₀) = 𝓝 (φ x₀) := by\n    change map (Prod.snd ∘ fφ) (𝓝[fφ ⁻¹' {p | p.1 = f x₀}] x₀) = 𝓝 (φ x₀)\n    rw [← map_map, nhdsWithin, map_inf_principal_preimage, (hf'.prod hφ').map_nhds_eq_of_surj htop]\n    exact map_snd_nhdsWithin _\n  exact hextr.not_nhds_le_map A.ge\n\n"}
{"name":"IsLocalExtrOn.exists_linear_map_of_hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.LagrangeMultipliers","initialProofState":"E : Type u_1\nF : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace Real E\ninst✝³ : CompleteSpace E\ninst✝² : NormedAddCommGroup F\ninst✝¹ : NormedSpace Real F\ninst✝ : CompleteSpace F\nf : E → F\nφ : E → Real\nx₀ : E\nf' : ContinuousLinearMap (RingHom.id Real) E F\nφ' : ContinuousLinearMap (RingHom.id Real) E Real\nhextr : IsLocalExtrOn φ (setOf fun x => Eq (f x) (f x₀)) x₀\nhf' : HasStrictFDerivAt f f' x₀\nhφ' : HasStrictFDerivAt φ φ' x₀\n⊢ Exists fun Λ => Exists fun Λ₀ => And (Ne { fst := Λ, snd := Λ₀ } 0) (∀ (x : E), Eq (HAdd.hAdd (Λ (f' x)) (HSMul.hSMul Λ₀ (φ' x))) 0)","decl":"/-- Lagrange multipliers theorem: if `φ : E → ℝ` has a local extremum on the set `{x | f x = f x₀}`\nat `x₀`, both `f : E → F` and `φ` are strictly differentiable at `x₀`, and the codomain of `f` is\na complete space, then there exist `Λ : dual ℝ F` and `Λ₀ : ℝ` such that `(Λ, Λ₀) ≠ 0` and\n`Λ (f' x) + Λ₀ • φ' x = 0` for all `x`. -/\ntheorem IsLocalExtrOn.exists_linear_map_of_hasStrictFDerivAt\n    (hextr : IsLocalExtrOn φ {x | f x = f x₀} x₀) (hf' : HasStrictFDerivAt f f' x₀)\n    (hφ' : HasStrictFDerivAt φ φ' x₀) :\n    ∃ (Λ : Module.Dual ℝ F) (Λ₀ : ℝ), (Λ, Λ₀) ≠ 0 ∧ ∀ x, Λ (f' x) + Λ₀ • φ' x = 0 := by\n  rcases Submodule.exists_le_ker_of_lt_top _\n      (lt_top_iff_ne_top.2 <| hextr.range_ne_top_of_hasStrictFDerivAt hf' hφ') with\n    ⟨Λ', h0, hΛ'⟩\n  set e : ((F →ₗ[ℝ] ℝ) × ℝ) ≃ₗ[ℝ] F × ℝ →ₗ[ℝ] ℝ :=\n    ((LinearEquiv.refl ℝ (F →ₗ[ℝ] ℝ)).prod (LinearMap.ringLmapEquivSelf ℝ ℝ ℝ).symm).trans\n      (LinearMap.coprodEquiv ℝ)\n  rcases e.surjective Λ' with ⟨⟨Λ, Λ₀⟩, rfl⟩\n  refine ⟨Λ, Λ₀, e.map_ne_zero_iff.1 h0, fun x => ?_⟩\n  convert LinearMap.congr_fun (LinearMap.range_le_ker_iff.1 hΛ') x using 1\n  -- squeezed `simp [mul_comm]` to speed up elaboration\n  simp only [e, smul_eq_mul, LinearEquiv.trans_apply, LinearEquiv.prod_apply,\n    LinearEquiv.refl_apply, LinearMap.ringLmapEquivSelf_symm_apply, LinearMap.coprodEquiv_apply,\n    ContinuousLinearMap.coe_prod, LinearMap.coprod_comp_prod, LinearMap.add_apply,\n    LinearMap.coe_comp, ContinuousLinearMap.coe_coe, Function.comp_apply, LinearMap.coe_smulRight,\n    LinearMap.one_apply, mul_comm]\n\n"}
{"name":"IsLocalExtrOn.exists_multipliers_of_hasStrictFDerivAt_1d","module":"Mathlib.Analysis.Calculus.LagrangeMultipliers","initialProofState":"E : Type u_1\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace Real E\ninst✝ : CompleteSpace E\nφ : E → Real\nx₀ : E\nφ' : ContinuousLinearMap (RingHom.id Real) E Real\nf : E → Real\nf' : ContinuousLinearMap (RingHom.id Real) E Real\nhextr : IsLocalExtrOn φ (setOf fun x => Eq (f x) (f x₀)) x₀\nhf' : HasStrictFDerivAt f f' x₀\nhφ' : HasStrictFDerivAt φ φ' x₀\n⊢ Exists fun a => Exists fun b => And (Ne { fst := a, snd := b } 0) (Eq (HAdd.hAdd (HSMul.hSMul a f') (HSMul.hSMul b φ')) 0)","decl":"/-- Lagrange multipliers theorem: if `φ : E → ℝ` has a local extremum on the set `{x | f x = f x₀}`\nat `x₀`, and both `f : E → ℝ` and `φ` are strictly differentiable at `x₀`, then there exist\n`a b : ℝ` such that `(a, b) ≠ 0` and `a • f' + b • φ' = 0`. -/\ntheorem IsLocalExtrOn.exists_multipliers_of_hasStrictFDerivAt_1d {f : E → ℝ} {f' : E →L[ℝ] ℝ}\n    (hextr : IsLocalExtrOn φ {x | f x = f x₀} x₀) (hf' : HasStrictFDerivAt f f' x₀)\n    (hφ' : HasStrictFDerivAt φ φ' x₀) : ∃ a b : ℝ, (a, b) ≠ 0 ∧ a • f' + b • φ' = 0 := by\n  obtain ⟨Λ, Λ₀, hΛ, hfΛ⟩ := hextr.exists_linear_map_of_hasStrictFDerivAt hf' hφ'\n  refine ⟨Λ 1, Λ₀, ?_, ?_⟩\n  · contrapose! hΛ\n    simp only [Prod.mk_eq_zero] at hΛ ⊢\n    refine ⟨LinearMap.ext fun x => ?_, hΛ.2⟩\n    simpa [hΛ.1] using Λ.map_smul x 1\n  · ext x\n    have H₁ : Λ (f' x) = f' x * Λ 1 := by\n      simpa only [mul_one, Algebra.id.smul_eq_mul] using Λ.map_smul (f' x) 1\n    have H₂ : f' x * Λ 1 + Λ₀ * φ' x = 0 := by simpa only [Algebra.id.smul_eq_mul, H₁] using hfΛ x\n    simpa [mul_comm] using H₂\n\n"}
{"name":"IsLocalExtrOn.exists_multipliers_of_hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.LagrangeMultipliers","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nφ : E → Real\nx₀ : E\nφ' : ContinuousLinearMap (RingHom.id Real) E Real\nι : Type u_3\ninst✝ : Fintype ι\nf : ι → E → Real\nf' : ι → ContinuousLinearMap (RingHom.id Real) E Real\nhextr : IsLocalExtrOn φ (setOf fun x => ∀ (i : ι), Eq (f i x) (f i x₀)) x₀\nhf' : ∀ (i : ι), HasStrictFDerivAt (f i) (f' i) x₀\nhφ' : HasStrictFDerivAt φ φ' x₀\n⊢ Exists fun Λ => Exists fun Λ₀ => And (Ne { fst := Λ, snd := Λ₀ } 0) (Eq (HAdd.hAdd (Finset.univ.sum fun i => HSMul.hSMul (Λ i) (f' i)) (HSMul.hSMul Λ₀ φ')) 0)","decl":"/-- Lagrange multipliers theorem, 1d version. Let `f : ι → E → ℝ` be a finite family of functions.\nSuppose that `φ : E → ℝ` has a local extremum on the set `{x | ∀ i, f i x = f i x₀}` at `x₀`.\nSuppose that all functions `f i` as well as `φ` are strictly differentiable at `x₀`.\nThen the derivatives `f' i : E → L[ℝ] ℝ` and `φ' : E →L[ℝ] ℝ` are linearly dependent:\nthere exist `Λ : ι → ℝ` and `Λ₀ : ℝ`, `(Λ, Λ₀) ≠ 0`, such that `∑ i, Λ i • f' i + Λ₀ • φ' = 0`.\n\nSee also `IsLocalExtrOn.linear_dependent_of_hasStrictFDerivAt` for a version that\nstates `¬LinearIndependent ℝ _` instead of existence of `Λ` and `Λ₀`. -/\ntheorem IsLocalExtrOn.exists_multipliers_of_hasStrictFDerivAt {ι : Type*} [Fintype ι]\n    {f : ι → E → ℝ} {f' : ι → E →L[ℝ] ℝ} (hextr : IsLocalExtrOn φ {x | ∀ i, f i x = f i x₀} x₀)\n    (hf' : ∀ i, HasStrictFDerivAt (f i) (f' i) x₀) (hφ' : HasStrictFDerivAt φ φ' x₀) :\n    ∃ (Λ : ι → ℝ) (Λ₀ : ℝ), (Λ, Λ₀) ≠ 0 ∧ (∑ i, Λ i • f' i) + Λ₀ • φ' = 0 := by\n  letI := Classical.decEq ι\n  replace hextr : IsLocalExtrOn φ {x | (fun i => f i x) = fun i => f i x₀} x₀ := by\n    simpa only [funext_iff] using hextr\n  rcases hextr.exists_linear_map_of_hasStrictFDerivAt (hasStrictFDerivAt_pi.2 fun i => hf' i)\n      hφ' with\n    ⟨Λ, Λ₀, h0, hsum⟩\n  rcases (LinearEquiv.piRing ℝ ℝ ι ℝ).symm.surjective Λ with ⟨Λ, rfl⟩\n  refine ⟨Λ, Λ₀, ?_, ?_⟩\n  · simpa only [Ne, Prod.ext_iff, LinearEquiv.map_eq_zero_iff, Prod.fst_zero] using h0\n  · ext x; simpa [mul_comm] using hsum x\n\n"}
{"name":"IsLocalExtrOn.linear_dependent_of_hasStrictFDerivAt","module":"Mathlib.Analysis.Calculus.LagrangeMultipliers","initialProofState":"E : Type u_1\ninst✝³ : NormedAddCommGroup E\ninst✝² : NormedSpace Real E\ninst✝¹ : CompleteSpace E\nφ : E → Real\nx₀ : E\nφ' : ContinuousLinearMap (RingHom.id Real) E Real\nι : Type u_3\ninst✝ : Finite ι\nf : ι → E → Real\nf' : ι → ContinuousLinearMap (RingHom.id Real) E Real\nhextr : IsLocalExtrOn φ (setOf fun x => ∀ (i : ι), Eq (f i x) (f i x₀)) x₀\nhf' : ∀ (i : ι), HasStrictFDerivAt (f i) (f' i) x₀\nhφ' : HasStrictFDerivAt φ φ' x₀\n⊢ Not (LinearIndependent Real (Option.elim' φ' f'))","decl":"/-- Lagrange multipliers theorem. Let `f : ι → E → ℝ` be a finite family of functions.\nSuppose that `φ : E → ℝ` has a local extremum on the set `{x | ∀ i, f i x = f i x₀}` at `x₀`.\nSuppose that all functions `f i` as well as `φ` are strictly differentiable at `x₀`.\nThen the derivatives `f' i : E → L[ℝ] ℝ` and `φ' : E →L[ℝ] ℝ` are linearly dependent.\n\nSee also `IsLocalExtrOn.exists_multipliers_of_hasStrictFDerivAt` for a version that\nthat states existence of Lagrange multipliers `Λ` and `Λ₀` instead of using\n`¬LinearIndependent ℝ _` -/\ntheorem IsLocalExtrOn.linear_dependent_of_hasStrictFDerivAt {ι : Type*} [Finite ι] {f : ι → E → ℝ}\n    {f' : ι → E →L[ℝ] ℝ} (hextr : IsLocalExtrOn φ {x | ∀ i, f i x = f i x₀} x₀)\n    (hf' : ∀ i, HasStrictFDerivAt (f i) (f' i) x₀) (hφ' : HasStrictFDerivAt φ φ' x₀) :\n    ¬LinearIndependent ℝ (Option.elim' φ' f' : Option ι → E →L[ℝ] ℝ) := by\n  cases nonempty_fintype ι\n  rw [Fintype.linearIndependent_iff]; push_neg\n  rcases hextr.exists_multipliers_of_hasStrictFDerivAt hf' hφ' with ⟨Λ, Λ₀, hΛ, hΛf⟩\n  refine ⟨Option.elim' Λ₀ Λ, ?_, ?_⟩\n  · simpa [add_comm] using hΛf\n  · simpa only [funext_iff, not_and_or, or_comm, Option.exists, Prod.mk_eq_zero, Ne,\n      not_forall] using hΛ\n"}
