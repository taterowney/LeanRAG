{"name":"ProbabilityTheory.exponentialPDF_eq","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r x : Real\n⊢ Eq (ProbabilityTheory.exponentialPDF r x) (ENNReal.ofReal (ite (LE.le 0 x) (HMul.hMul r (Real.exp (Neg.neg (HMul.hMul r x)))) 0))","decl":"lemma exponentialPDF_eq (r x : ℝ) :\n    exponentialPDF r x = ENNReal.ofReal (if 0 ≤ x then r * exp (-(r * x)) else 0) := by\n  rw [exponentialPDF, exponentialPDFReal, gammaPDFReal]\n  simp only [rpow_one, Gamma_one, div_one, sub_self, rpow_zero, mul_one]\n\n"}
{"name":"ProbabilityTheory.exponentialPDF_of_neg","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r x : Real\nhx : LT.lt x 0\n⊢ Eq (ProbabilityTheory.exponentialPDF r x) 0","decl":"lemma exponentialPDF_of_neg {r x : ℝ} (hx : x < 0) : exponentialPDF r x = 0 := gammaPDF_of_neg hx\n\n"}
{"name":"ProbabilityTheory.exponentialPDF_of_nonneg","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r x : Real\nhx : LE.le 0 x\n⊢ Eq (ProbabilityTheory.exponentialPDF r x) (ENNReal.ofReal (HMul.hMul r (Real.exp (Neg.neg (HMul.hMul r x)))))","decl":"lemma exponentialPDF_of_nonneg {r x : ℝ} (hx : 0 ≤ x) :\n    exponentialPDF r x = ENNReal.ofReal (r * rexp (-(r * x))) := by\n  simp only [exponentialPDF_eq, if_pos hx]\n\n"}
{"name":"ProbabilityTheory.lintegral_exponentialPDF_of_nonpos","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"x r : Real\nhx : LE.le x 0\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iio x)) fun y => ProbabilityTheory.exponentialPDF r y) 0","decl":"/-- The Lebesgue integral of the exponential pdf over nonpositive reals equals 0-/\nlemma lintegral_exponentialPDF_of_nonpos {x r : ℝ} (hx : x ≤ 0) :\n    ∫⁻ y in Iio x, exponentialPDF r y = 0 := lintegral_gammaPDF_of_nonpos hx\n\n"}
{"name":"ProbabilityTheory.measurable_exponentialPDFReal","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\n⊢ Measurable (ProbabilityTheory.exponentialPDFReal r)","decl":"/-- The exponential pdf is measurable. -/\n@[measurability]\nlemma measurable_exponentialPDFReal (r : ℝ) : Measurable (exponentialPDFReal r) :=\n  measurable_gammaPDFReal 1 r\n\n-- The exponential pdf is strongly measurable -/\n"}
{"name":"ProbabilityTheory.stronglyMeasurable_exponentialPDFReal","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\n⊢ MeasureTheory.StronglyMeasurable (ProbabilityTheory.exponentialPDFReal r)","decl":"@[measurability]\n lemma stronglyMeasurable_exponentialPDFReal (r : ℝ) :\n     StronglyMeasurable (exponentialPDFReal r) := stronglyMeasurable_gammaPDFReal 1 r\n\n"}
{"name":"ProbabilityTheory.exponentialPDFReal_pos","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"x r : Real\nhr : LT.lt 0 r\nhx : LT.lt 0 x\n⊢ LT.lt 0 (ProbabilityTheory.exponentialPDFReal r x)","decl":"/-- The exponential pdf is positive for all positive reals -/\nlemma exponentialPDFReal_pos {x r : ℝ} (hr : 0 < r) (hx : 0 < x) :\n    0 < exponentialPDFReal r x := gammaPDFReal_pos zero_lt_one hr hx\n\n"}
{"name":"ProbabilityTheory.exponentialPDFReal_nonneg","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\nx : Real\n⊢ LE.le 0 (ProbabilityTheory.exponentialPDFReal r x)","decl":"/-- The exponential pdf is nonnegative -/\nlemma exponentialPDFReal_nonneg {r : ℝ} (hr : 0 < r) (x : ℝ) :\n    0 ≤ exponentialPDFReal r x := gammaPDFReal_nonneg zero_lt_one hr x\n\n"}
{"name":"ProbabilityTheory.lintegral_exponentialPDF_eq_one","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\n⊢ Eq (MeasureTheory.lintegral MeasureTheory.MeasureSpace.volume fun x => ProbabilityTheory.exponentialPDF r x) 1","decl":"/-- The pdf of the exponential distribution integrates to 1 -/\n@[simp]\nlemma lintegral_exponentialPDF_eq_one {r : ℝ} (hr : 0 < r) : ∫⁻ x, exponentialPDF r x = 1 :=\n  lintegral_gammaPDF_eq_one zero_lt_one hr\n\n"}
{"name":"ProbabilityTheory.isProbabilityMeasureExponential","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\n⊢ MeasureTheory.IsProbabilityMeasure (ProbabilityTheory.expMeasure r)","decl":"lemma isProbabilityMeasureExponential {r : ℝ} (hr : 0 < r) :\n    IsProbabilityMeasure (expMeasure r) := isProbabilityMeasureGamma zero_lt_one hr\n\n"}
{"name":"ProbabilityTheory.exponentialCDFReal_eq_integral","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.exponentialCDFReal r) x) (MeasureTheory.integral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun x => ProbabilityTheory.exponentialPDFReal r x)","decl":"lemma exponentialCDFReal_eq_integral {r : ℝ} (hr : 0 < r) (x : ℝ) :\n    exponentialCDFReal r x = ∫ x in Iic x, exponentialPDFReal r x :=\n  gammaCDFReal_eq_integral zero_lt_one hr x\n\n"}
{"name":"ProbabilityTheory.exponentialCDFReal_eq_lintegral","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.exponentialCDFReal r) x) (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun x => ProbabilityTheory.exponentialPDF r x).toReal","decl":"lemma exponentialCDFReal_eq_lintegral {r : ℝ} (hr : 0 < r) (x : ℝ) :\n    exponentialCDFReal r x = ENNReal.toReal (∫⁻ x in Iic x, exponentialPDF r x) :=\n  gammaCDFReal_eq_lintegral zero_lt_one hr x\n\n"}
{"name":"ProbabilityTheory.hasDerivAt_neg_exp_mul_exp","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r x : Real\n⊢ HasDerivAt (fun a => Neg.neg (Real.exp (Neg.neg (HMul.hMul r a)))) (HMul.hMul r (Real.exp (Neg.neg (HMul.hMul r x)))) x","decl":"lemma hasDerivAt_neg_exp_mul_exp {r x : ℝ} :\n    HasDerivAt (fun a ↦ -exp (-(r * a))) (r * exp (-(r * x))) x := by\n  convert (((hasDerivAt_id x).const_mul (-r)).exp.const_mul (-1)) using 1\n  · simp only [one_mul, id_eq, neg_mul]\n  simp only [id_eq, neg_mul, mul_one, mul_neg, one_mul, neg_neg, mul_comm]\n\n"}
{"name":"ProbabilityTheory.exp_neg_integrableOn_Ioc","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"b x : Real\nhb : LT.lt 0 b\n⊢ MeasureTheory.IntegrableOn (fun x => Real.exp (Neg.neg (HMul.hMul b x))) (Set.Ioc 0 x) MeasureTheory.MeasureSpace.volume","decl":"/-- A negative exponential function is integrable on intervals in `R≥0` -/\nlemma exp_neg_integrableOn_Ioc {b x : ℝ} (hb : 0 < b) :\n    IntegrableOn (fun x ↦ rexp (-(b * x))) (Ioc 0 x) := by\n  simp only [neg_mul_eq_neg_mul]\n  exact (exp_neg_integrableOn_Ioi _ hb).mono_set Ioc_subset_Ioi_self\n\n"}
{"name":"ProbabilityTheory.lintegral_exponentialPDF_eq_antiDeriv","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (MeasureTheory.lintegral (MeasureTheory.MeasureSpace.volume.restrict (Set.Iic x)) fun y => ProbabilityTheory.exponentialPDF r y) (ENNReal.ofReal (ite (LE.le 0 x) (HSub.hSub 1 (Real.exp (Neg.neg (HMul.hMul r x)))) 0))","decl":"lemma lintegral_exponentialPDF_eq_antiDeriv {r : ℝ} (hr : 0 < r) (x : ℝ) :\n    ∫⁻ y in Iic x, exponentialPDF r y\n    = ENNReal.ofReal (if 0 ≤ x then 1 - exp (-(r * x)) else 0) := by\n  split_ifs with h\n  case neg =>\n    simp only [exponentialPDF_eq]\n    rw [setLIntegral_congr_fun measurableSet_Iic, lintegral_zero, ENNReal.ofReal_zero]\n    exact ae_of_all _ fun a (_ : a ≤ _) ↦ by rw [if_neg (by linarith), ENNReal.ofReal_eq_zero]\n  case pos =>\n    rw [lintegral_Iic_eq_lintegral_Iio_add_Icc _ h, lintegral_exponentialPDF_of_nonpos (le_refl 0),\n      zero_add]\n    simp only [exponentialPDF_eq]\n    rw [setLIntegral_congr_fun measurableSet_Icc (ae_of_all _\n        (by intro a ⟨(hle : _ ≤ a), _⟩; rw [if_pos hle]))]\n    rw [← ENNReal.toReal_eq_toReal _ ENNReal.ofReal_ne_top, ← integral_eq_lintegral_of_nonneg_ae\n        (Eventually.of_forall fun _ ↦ le_of_lt (mul_pos hr (exp_pos _)))]\n    · have : ∫ a in uIoc 0 x, r * rexp (-(r * a)) = ∫ a in (0)..x, r * rexp (-(r * a)) := by\n        rw [intervalIntegral.intervalIntegral_eq_integral_uIoc, smul_eq_mul, if_pos h, one_mul]\n      rw [integral_Icc_eq_integral_Ioc, ← uIoc_of_le h, this]\n      rw [intervalIntegral.integral_eq_sub_of_hasDeriv_right_of_le h\n        (f := fun a ↦ -1 * rexp (-(r * a))) _ _]\n      · rw [ENNReal.toReal_ofReal_eq_iff.2 (by norm_num; positivity)]\n        norm_num; ring\n      · simp only [intervalIntegrable_iff, uIoc_of_le h]\n        exact Integrable.const_mul (exp_neg_integrableOn_Ioc hr) _\n      · have : Continuous (fun a ↦ rexp (-(r * a))) := by\n          simp only [← neg_mul]; exact (continuous_mul_left (-r)).rexp\n        exact Continuous.continuousOn (Continuous.comp' (continuous_mul_left (-1)) this)\n      · simp only [neg_mul, one_mul]\n        exact fun _ _ ↦ HasDerivAt.hasDerivWithinAt hasDerivAt_neg_exp_mul_exp\n    · refine Integrable.aestronglyMeasurable (Integrable.const_mul ?_ _)\n      rw [← IntegrableOn, integrableOn_Icc_iff_integrableOn_Ioc]\n      exact exp_neg_integrableOn_Ioc hr\n    · refine ne_of_lt (IntegrableOn.setLIntegral_lt_top ?_)\n      rw [integrableOn_Icc_iff_integrableOn_Ioc]\n      exact Integrable.const_mul (exp_neg_integrableOn_Ioc hr) _\n\n"}
{"name":"ProbabilityTheory.exponentialCDFReal_eq","module":"Mathlib.Probability.Distributions.Exponential","initialProofState":"r : Real\nhr : LT.lt 0 r\nx : Real\n⊢ Eq (↑(ProbabilityTheory.exponentialCDFReal r) x) (ite (LE.le 0 x) (HSub.hSub 1 (Real.exp (Neg.neg (HMul.hMul r x)))) 0)","decl":"/-- The CDF of the exponential distribution equals ``1 - exp (-(r * x))``-/\nlemma exponentialCDFReal_eq {r : ℝ} (hr : 0 < r) (x : ℝ) :\n    exponentialCDFReal r x = if 0 ≤ x then 1 - exp (-(r * x)) else 0 := by\n  rw [exponentialCDFReal_eq_lintegral hr, lintegral_exponentialPDF_eq_antiDeriv hr x,\n    ENNReal.toReal_ofReal_eq_iff]\n  split_ifs with h\n  · simp only [sub_nonneg, exp_le_one_iff, Left.neg_nonpos_iff]\n    exact mul_nonneg hr.le h\n  · exact le_rfl\n\n"}
