{"name":"ordinaryHypergeometricSeries_apply_eq","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\nx : 𝔸\nn : Nat\n⊢ Eq ((ordinaryHypergeometricSeries 𝔸 a b c n) fun x_1 => x) (HSMul.hSMul (HMul.hMul (HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (Polynomial.eval a (ascPochhammer 𝕂 n))) (Polynomial.eval b (ascPochhammer 𝕂 n))) (Inv.inv (Polynomial.eval c (ascPochhammer 𝕂 n)))) (HPow.hPow x n))","decl":"theorem ordinaryHypergeometricSeries_apply_eq (x : 𝔸) (n : ℕ) :\n    (ordinaryHypergeometricSeries 𝔸 a b c n fun _ => x) =\n      ((n !⁻¹ : 𝕂) * (ascPochhammer 𝕂 n).eval a * (ascPochhammer 𝕂 n).eval b *\n        ((ascPochhammer 𝕂 n).eval c)⁻¹ ) • x ^ n := by\n  rw [ordinaryHypergeometricSeries, ofScalars_apply_eq]\n\n"}
{"name":"ordinaryHypergeometricSeries_apply_eq'","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\nx : 𝔸\n⊢ Eq (fun n => (ordinaryHypergeometricSeries 𝔸 a b c n) fun x_1 => x) fun n => HSMul.hSMul (HMul.hMul (HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (Polynomial.eval a (ascPochhammer 𝕂 n))) (Polynomial.eval b (ascPochhammer 𝕂 n))) (Inv.inv (Polynomial.eval c (ascPochhammer 𝕂 n)))) (HPow.hPow x n)","decl":"/-- This naming follows the convention of `NormedSpace.expSeries_apply_eq'`. -/\ntheorem ordinaryHypergeometricSeries_apply_eq' (x : 𝔸) :\n    (fun n => ordinaryHypergeometricSeries 𝔸 a b c n fun _ => x) =\n      fun n => ((n !⁻¹ : 𝕂) * (ascPochhammer 𝕂 n).eval a * (ascPochhammer 𝕂 n).eval b *\n        ((ascPochhammer 𝕂 n).eval c)⁻¹ ) • x ^ n := by\n  rw [ordinaryHypergeometricSeries, ofScalars_apply_eq']\n\n"}
{"name":"ordinaryHypergeometric_sum_eq","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\nx : 𝔸\n⊢ Eq ((ordinaryHypergeometricSeries 𝔸 a b c).sum x) (tsum fun n => HSMul.hSMul (HMul.hMul (HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (Polynomial.eval a (ascPochhammer 𝕂 n))) (Polynomial.eval b (ascPochhammer 𝕂 n))) (Inv.inv (Polynomial.eval c (ascPochhammer 𝕂 n)))) (HPow.hPow x n))","decl":"theorem ordinaryHypergeometric_sum_eq (x : 𝔸) : (ordinaryHypergeometricSeries 𝔸 a b c).sum x =\n    ∑' n : ℕ, ((n !⁻¹ : 𝕂) * (ascPochhammer 𝕂 n).eval a * (ascPochhammer 𝕂 n).eval b *\n      ((ascPochhammer 𝕂 n).eval c)⁻¹ ) • x ^ n :=\n  tsum_congr fun n => ordinaryHypergeometricSeries_apply_eq a b c x n\n\n"}
{"name":"ordinaryHypergeometric_eq_tsum","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\n⊢ Eq (ordinaryHypergeometric a b c) fun x => tsum fun n => HSMul.hSMul (HMul.hMul (HMul.hMul (HMul.hMul (Inv.inv ↑n.factorial) (Polynomial.eval a (ascPochhammer 𝕂 n))) (Polynomial.eval b (ascPochhammer 𝕂 n))) (Inv.inv (Polynomial.eval c (ascPochhammer 𝕂 n)))) (HPow.hPow x n)","decl":"theorem ordinaryHypergeometric_eq_tsum : ₂F₁ a b c =\n    fun (x : 𝔸) => ∑' n : ℕ, ((n !⁻¹ : 𝕂) * (ascPochhammer 𝕂 n).eval a *\n      (ascPochhammer 𝕂 n).eval b * ((ascPochhammer 𝕂 n).eval c)⁻¹ ) • x ^ n :=\n  funext (ordinaryHypergeometric_sum_eq a b c)\n\n"}
{"name":"ordinaryHypergeometricSeries_apply_zero","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\nn : Nat\n⊢ Eq ((ordinaryHypergeometricSeries 𝔸 a b c n) fun x => 0) (Pi.single 0 1 n)","decl":"theorem ordinaryHypergeometricSeries_apply_zero (n : ℕ) :\n    (ordinaryHypergeometricSeries 𝔸 a b c n fun _ => 0) = Pi.single (f := fun _ => 𝔸) 0 1 n := by\n  rw [ordinaryHypergeometricSeries, ofScalars_apply_eq, ordinaryHypergeometricCoefficient]\n  cases n <;> simp\n\n"}
{"name":"ordinaryHypergeometric_zero","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\n⊢ Eq (ordinaryHypergeometric a b c 0) 1","decl":"@[simp]\ntheorem ordinaryHypergeometric_zero : ₂F₁ a b c (0 : 𝔸) = 1 := by\n  simp [ordinaryHypergeometric_eq_tsum, ← ordinaryHypergeometricSeries_apply_eq,\n    ordinaryHypergeometricSeries_apply_zero]\n\n"}
{"name":"ordinaryHypergeometricSeries_symm","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\n⊢ Eq (ordinaryHypergeometricSeries 𝔸 a b c) (ordinaryHypergeometricSeries 𝔸 b a c)","decl":"theorem ordinaryHypergeometricSeries_symm :\n    ordinaryHypergeometricSeries 𝔸 a b c = ordinaryHypergeometricSeries 𝔸 b a c := by\n  unfold ordinaryHypergeometricSeries ordinaryHypergeometricCoefficient\n  simp [mul_assoc, mul_left_comm]\n\n"}
{"name":"ordinaryHypergeometricSeries_eq_zero_of_neg_nat","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝⁴ : Field 𝕂\ninst✝³ : Ring 𝔸\ninst✝² : Algebra 𝕂 𝔸\ninst✝¹ : TopologicalSpace 𝔸\ninst✝ : TopologicalRing 𝔸\na b c : 𝕂\nn k : Nat\nhabc : Or (Eq (↑k) (Neg.neg a)) (Or (Eq (↑k) (Neg.neg b)) (Eq (↑k) (Neg.neg c)))\nhk : LT.lt k n\n⊢ Eq (ordinaryHypergeometricSeries 𝔸 a b c n) 0","decl":"/-- If any parameter to the series is a sufficiently large nonpositive integer, then the series\nterm is zero. -/\nlemma ordinaryHypergeometricSeries_eq_zero_of_neg_nat {n k : ℕ} (habc : k = -a ∨ k = -b ∨ k = -c)\n    (hk : k < n) : ordinaryHypergeometricSeries 𝔸 a b c n = 0 := by\n  rw [ordinaryHypergeometricSeries, ofScalars]\n  rcases habc with h | h | h\n  all_goals\n    ext\n    simp [(ascPochhammer_eval_eq_zero_iff n _).2 ⟨k, hk, h⟩]\n\n"}
{"name":"ordinaryHypergeometric_radius_top_of_neg_nat₁","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\nb c : 𝕂\nk : Nat\n⊢ Eq (ordinaryHypergeometricSeries 𝔸 (Neg.neg ↑k) b c).radius Top.top","decl":"theorem ordinaryHypergeometric_radius_top_of_neg_nat₁ {k : ℕ} :\n    (ordinaryHypergeometricSeries 𝔸 (-(k : 𝕂)) b c).radius = ⊤ := by\n  refine FormalMultilinearSeries.radius_eq_top_of_forall_image_add_eq_zero _ (1 + k) fun n ↦ ?_\n  exact ordinaryHypergeometricSeries_eq_zero_of_neg_nat (-(k : 𝕂)) b c (by aesop) (by omega)\n\n"}
{"name":"ordinaryHypergeometric_radius_top_of_neg_nat₂","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\na c : 𝕂\nk : Nat\n⊢ Eq (ordinaryHypergeometricSeries 𝔸 a (Neg.neg ↑k) c).radius Top.top","decl":"theorem ordinaryHypergeometric_radius_top_of_neg_nat₂ {k : ℕ} :\n    (ordinaryHypergeometricSeries 𝔸 a (-(k : 𝕂)) c).radius = ⊤ := by\n  rw [ordinaryHypergeometricSeries_symm]\n  exact ordinaryHypergeometric_radius_top_of_neg_nat₁ 𝔸 a c\n\n"}
{"name":"ordinaryHypergeometric_radius_top_of_neg_nat₃","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\na b : 𝕂\nk : Nat\n⊢ Eq (ordinaryHypergeometricSeries 𝔸 a b (Neg.neg ↑k)).radius Top.top","decl":"theorem ordinaryHypergeometric_radius_top_of_neg_nat₃ {k : ℕ} :\n    (ordinaryHypergeometricSeries 𝔸 a b (-(k : 𝕂))).radius = ⊤ := by\n  refine FormalMultilinearSeries.radius_eq_top_of_forall_image_add_eq_zero _ (1 + k) fun n ↦ ?_\n  exact ordinaryHypergeometricSeries_eq_zero_of_neg_nat a b (-(k : 𝕂)) (by aesop) (by omega)\n\n"}
{"name":"ordinaryHypergeometricSeries_eq_zero_iff","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\na b c : 𝕂\nn : Nat\n⊢ Iff (Eq (ordinaryHypergeometricSeries 𝔸 a b c n) 0) (Exists fun k => And (LT.lt k n) (Or (Eq (↑k) (Neg.neg a)) (Or (Eq (↑k) (Neg.neg b)) (Eq (↑k) (Neg.neg c)))))","decl":"/-- An iff variation on `ordinaryHypergeometricSeries_eq_zero_of_nonpos_int` for `[RCLike 𝕂]`. -/\nlemma ordinaryHypergeometricSeries_eq_zero_iff (n : ℕ) :\n    ordinaryHypergeometricSeries 𝔸 a b c n = 0 ↔ ∃ k < n, k = -a ∨ k = -b ∨ k = -c := by\n  refine ⟨fun h ↦ ?_, fun zero ↦ ?_⟩\n  · rw [ordinaryHypergeometricSeries, ofScalars_eq_zero] at h\n    simp only [_root_.mul_eq_zero, inv_eq_zero] at h\n    rcases h with ((hn | h) | h) | h\n    · simp [Nat.factorial_ne_zero] at hn\n    all_goals\n      obtain ⟨kn, hkn, hn⟩ := (ascPochhammer_eval_eq_zero_iff _ _).1 h\n      exact ⟨kn, hkn, by tauto⟩\n  · obtain ⟨_, h, hn⟩ := zero\n    exact ordinaryHypergeometricSeries_eq_zero_of_neg_nat a b c hn h\n\n"}
{"name":"ordinaryHypergeometricSeries_norm_div_succ_norm","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\ninst✝ : RCLike 𝕂\na b c : 𝕂\nn : Nat\nhabc : ∀ (kn : Nat), LT.lt kn n → And (Ne (↑kn) (Neg.neg a)) (And (Ne (↑kn) (Neg.neg b)) (Ne (↑kn) (Neg.neg c)))\n⊢ Eq (HDiv.hDiv (Norm.norm (ordinaryHypergeometricCoefficient a b c n)) (Norm.norm (ordinaryHypergeometricCoefficient a b c n.succ))) (HMul.hMul (HMul.hMul (HMul.hMul (Inv.inv (Norm.norm (HAdd.hAdd a ↑n))) (Inv.inv (Norm.norm (HAdd.hAdd b ↑n)))) (Norm.norm (HAdd.hAdd c ↑n))) (Norm.norm (HAdd.hAdd 1 ↑n)))","decl":"theorem ordinaryHypergeometricSeries_norm_div_succ_norm (n : ℕ)\n    (habc : ∀ kn < n, (↑kn ≠ -a ∧ ↑kn ≠ -b ∧ ↑kn ≠ -c)) :\n      ‖ordinaryHypergeometricCoefficient a b c n‖ / ‖ordinaryHypergeometricCoefficient a b c n.succ‖\n      = ‖a + n‖⁻¹ * ‖b + n‖⁻¹ * ‖c + n‖ * ‖1 + (n : 𝕂)‖ := by\n  simp only [mul_inv_rev, factorial_succ, cast_mul, cast_add,\n    cast_one, ascPochhammer_succ_eval, norm_mul, norm_inv]\n  calc\n    _ = ‖Polynomial.eval a (ascPochhammer 𝕂 n)‖ * ‖Polynomial.eval a (ascPochhammer 𝕂 n)‖⁻¹ *\n        ‖Polynomial.eval b (ascPochhammer 𝕂 n)‖ * ‖Polynomial.eval b (ascPochhammer 𝕂 n)‖⁻¹ *\n        ‖Polynomial.eval c (ascPochhammer 𝕂 n)‖⁻¹⁻¹ * ‖Polynomial.eval c (ascPochhammer 𝕂 n)‖⁻¹ *\n        ‖(n ! : 𝕂)‖⁻¹⁻¹ * ‖(n ! : 𝕂)‖⁻¹ * ‖a + n‖⁻¹ * ‖b + n‖⁻¹ * ‖c + n‖⁻¹⁻¹ *\n        ‖1 + (n : 𝕂)‖⁻¹⁻¹ := by ring_nf\n    _ = _ := by\n      simp only [inv_inv]\n      repeat rw [DivisionRing.mul_inv_cancel, one_mul]\n      all_goals\n        rw [norm_ne_zero_iff]\n      any_goals\n        apply (ascPochhammer_eval_eq_zero_iff n _).not.2\n        push_neg\n        exact fun kn hkn ↦ by simp [habc kn hkn]\n      exact cast_ne_zero.2 (factorial_ne_zero n)\n\n"}
{"name":"ordinaryHypergeometricSeries_radius_eq_one","module":"Mathlib.Analysis.SpecialFunctions.OrdinaryHypergeometric","initialProofState":"𝕂 : Type u_1\n𝔸 : Type u_2\ninst✝² : RCLike 𝕂\ninst✝¹ : NormedDivisionRing 𝔸\ninst✝ : NormedAlgebra 𝕂 𝔸\na b c : 𝕂\nhabc : ∀ (kn : Nat), And (Ne (↑kn) (Neg.neg a)) (And (Ne (↑kn) (Neg.neg b)) (Ne (↑kn) (Neg.neg c)))\n⊢ Eq (ordinaryHypergeometricSeries 𝔸 a b c).radius 1","decl":"/-- The radius of convergence of `ordinaryHypergeometricSeries` is unity if none of the parameters\nare non-positive integers. -/\ntheorem ordinaryHypergeometricSeries_radius_eq_one\n    (habc : ∀ kn : ℕ, ↑kn ≠ -a ∧ ↑kn ≠ -b ∧ ↑kn ≠ -c) :\n      (ordinaryHypergeometricSeries 𝔸 a b c).radius = 1 := by\n  convert ofScalars_radius_eq_of_tendsto 𝔸 _ one_ne_zero ?_\n  suffices Tendsto (fun k : ℕ ↦ (a + k)⁻¹ * (b + k)⁻¹ * (c + k) * ((1 : 𝕂) + k)) atTop (𝓝 1) by\n    simp_rw [ordinaryHypergeometricSeries_norm_div_succ_norm a b c _ (fun n _ ↦ habc n)]\n    simp [← norm_mul, ← norm_inv]\n    convert Filter.Tendsto.norm this\n    exact norm_one.symm\n  have (k : ℕ) : (a + k)⁻¹ * (b + k)⁻¹ * (c + k) * ((1 : 𝕂) + k) =\n        (c + k) / (a + k) * ((1 + k) / (b + k)) := by field_simp\n  simp_rw [this]\n  apply (mul_one (1 : 𝕂)) ▸ Filter.Tendsto.mul <;>\n  convert RCLike.tendsto_add_mul_div_add_mul_atTop_nhds _ _ (1 : 𝕂) one_ne_zero <;> simp\n\n"}
