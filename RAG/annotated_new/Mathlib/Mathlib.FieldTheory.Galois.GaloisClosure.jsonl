{"name":"FiniteGaloisIntermediateField.isGalois","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\nself : FiniteGaloisIntermediateField k K\n⊢ IsGalois k (Subtype fun x => Membership.mem self.toIntermediateField x)","decl":"/-- The type of intermediate fields of `K/k` that are finite and Galois over `k` -/\nstructure FiniteGaloisIntermediateField extends IntermediateField k K where\n  [finiteDimensional : FiniteDimensional k toIntermediateField]\n  [isGalois : IsGalois k toIntermediateField]\n\n"}
{"name":"FiniteGaloisIntermediateField.mk.sizeOf_spec","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝⁴ : Field k\ninst✝³ : Field K\ninst✝² : Algebra k K\ninst✝¹ : SizeOf k\ninst✝ : SizeOf K\ntoIntermediateField : IntermediateField k K\nfiniteDimensional : FiniteDimensional k (Subtype fun x => Membership.mem toIntermediateField x)\nisGalois : IsGalois k (Subtype fun x => Membership.mem toIntermediateField x)\n⊢ Eq (SizeOf.sizeOf (FiniteGaloisIntermediateField.mk toIntermediateField)) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toIntermediateField)) (SizeOf.sizeOf finiteDimensional)) (SizeOf.sizeOf isGalois))","decl":"/-- The type of intermediate fields of `K/k` that are finite and Galois over `k` -/\nstructure FiniteGaloisIntermediateField extends IntermediateField k K where\n  [finiteDimensional : FiniteDimensional k toIntermediateField]\n  [isGalois : IsGalois k toIntermediateField]\n\n"}
{"name":"FiniteGaloisIntermediateField.mk.injEq","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\ntoIntermediateField✝ : IntermediateField k K\nfiniteDimensional✝ : FiniteDimensional k (Subtype fun x => Membership.mem toIntermediateField✝ x)\nisGalois✝ : IsGalois k (Subtype fun x => Membership.mem toIntermediateField✝ x)\ntoIntermediateField : IntermediateField k K\nfiniteDimensional : FiniteDimensional k (Subtype fun x => Membership.mem toIntermediateField x)\nisGalois : IsGalois k (Subtype fun x => Membership.mem toIntermediateField x)\n⊢ Eq (Eq (FiniteGaloisIntermediateField.mk toIntermediateField✝) (FiniteGaloisIntermediateField.mk toIntermediateField)) (Eq toIntermediateField✝ toIntermediateField)","decl":"/-- The type of intermediate fields of `K/k` that are finite and Galois over `k` -/\nstructure FiniteGaloisIntermediateField extends IntermediateField k K where\n  [finiteDimensional : FiniteDimensional k toIntermediateField]\n  [isGalois : IsGalois k toIntermediateField]\n\n"}
{"name":"FiniteGaloisIntermediateField.finiteDimensional","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\nself : FiniteGaloisIntermediateField k K\n⊢ FiniteDimensional k (Subtype fun x => Membership.mem self.toIntermediateField x)","decl":"/-- The type of intermediate fields of `K/k` that are finite and Galois over `k` -/\nstructure FiniteGaloisIntermediateField extends IntermediateField k K where\n  [finiteDimensional : FiniteDimensional k toIntermediateField]\n  [isGalois : IsGalois k toIntermediateField]\n\n"}
{"name":"FiniteGaloisIntermediateField.mk.inj","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\ntoIntermediateField✝ : IntermediateField k K\nfiniteDimensional✝ : FiniteDimensional k (Subtype fun x => Membership.mem toIntermediateField✝ x)\nisGalois✝ : IsGalois k (Subtype fun x => Membership.mem toIntermediateField✝ x)\ntoIntermediateField : IntermediateField k K\nfiniteDimensional : FiniteDimensional k (Subtype fun x => Membership.mem toIntermediateField x)\nisGalois : IsGalois k (Subtype fun x => Membership.mem toIntermediateField x)\nx✝ : Eq (FiniteGaloisIntermediateField.mk toIntermediateField✝) (FiniteGaloisIntermediateField.mk toIntermediateField)\n⊢ Eq toIntermediateField✝ toIntermediateField","decl":"/-- The type of intermediate fields of `K/k` that are finite and Galois over `k` -/\nstructure FiniteGaloisIntermediateField extends IntermediateField k K where\n  [finiteDimensional : FiniteDimensional k toIntermediateField]\n  [isGalois : IsGalois k toIntermediateField]\n\n"}
{"name":"FiniteGaloisIntermediateField.instFiniteDimensionalSubtypeMemIntermediateField","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\nL : FiniteGaloisIntermediateField k K\n⊢ FiniteDimensional k (Subtype fun x => Membership.mem L.toIntermediateField x)","decl":"instance (L : FiniteGaloisIntermediateField k K) : FiniteDimensional k L :=\n  L.finiteDimensional\n\n"}
{"name":"FiniteGaloisIntermediateField.instIsGaloisSubtypeMemIntermediateField","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\nL : FiniteGaloisIntermediateField k K\n⊢ IsGalois k (Subtype fun x => Membership.mem L.toIntermediateField x)","decl":"instance (L : FiniteGaloisIntermediateField k K) : IsGalois k L := L.isGalois\n\n"}
{"name":"FiniteGaloisIntermediateField.val_injective","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\n⊢ Function.Injective FiniteGaloisIntermediateField.toIntermediateField","decl":"lemma val_injective : Function.Injective (toIntermediateField (k := k) (K := K)) := by\n  rintro ⟨⟩ ⟨⟩ eq\n  simpa only [mk.injEq] using eq\n\n"}
{"name":"FiniteGaloisIntermediateField.instIsGaloisSubtypeMemIntermediateFieldMax","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝⁴ : Field k\ninst✝³ : Field K\ninst✝² : Algebra k K\nL₁ L₂ : IntermediateField k K\ninst✝¹ : IsGalois k (Subtype fun x => Membership.mem L₁ x)\ninst✝ : IsGalois k (Subtype fun x => Membership.mem L₂ x)\n⊢ IsGalois k (Subtype fun x => Membership.mem (Max.max L₁ L₂) x)","decl":"/-- Turns the collection of finite Galois IntermediateFields of `K/k` into a lattice. -/\n\ninstance (L₁ L₂ : IntermediateField k K) [IsGalois k L₁] [IsGalois k L₂] :\n    IsGalois k ↑(L₁ ⊔ L₂) where\n\n"}
{"name":"FiniteGaloisIntermediateField.instFiniteDimensionalSubtypeMemIntermediateFieldMin","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\nL₁ L₂ : IntermediateField k K\ninst✝ : FiniteDimensional k (Subtype fun x => Membership.mem L₁ x)\n⊢ FiniteDimensional k (Subtype fun x => Membership.mem (Min.min L₁ L₂) x)","decl":"instance (L₁ L₂ : IntermediateField k K) [FiniteDimensional k L₁] :\n    FiniteDimensional k ↑(L₁ ⊓ L₂) :=\n  .of_injective (IntermediateField.inclusion (E := L₁ ⊓ L₂) (F := L₁) inf_le_left).toLinearMap\n    (IntermediateField.inclusion (E := L₁ ⊓ L₂) (F := L₁) inf_le_left).toRingHom.injective\n\n"}
{"name":"FiniteGaloisIntermediateField.instFiniteDimensionalSubtypeMemIntermediateFieldMin_1","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\nL₁ L₂ : IntermediateField k K\ninst✝ : FiniteDimensional k (Subtype fun x => Membership.mem L₂ x)\n⊢ FiniteDimensional k (Subtype fun x => Membership.mem (Min.min L₁ L₂) x)","decl":"instance (L₁ L₂ : IntermediateField k K) [FiniteDimensional k L₂] :\n    FiniteDimensional k ↑(L₁ ⊓ L₂) :=\n  .of_injective (IntermediateField.inclusion (E := L₁ ⊓ L₂) (F := L₂) inf_le_right).toLinearMap\n    (IntermediateField.inclusion (E := L₁ ⊓ L₂) (F := L₂) inf_le_right).injective\n\n"}
{"name":"FiniteGaloisIntermediateField.instIsSeparableSubtypeMemIntermediateFieldMin","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\nL₁ L₂ : IntermediateField k K\ninst✝ : Algebra.IsSeparable k (Subtype fun x => Membership.mem L₁ x)\n⊢ Algebra.IsSeparable k (Subtype fun x => Membership.mem (Min.min L₁ L₂) x)","decl":"instance (L₁ L₂ : IntermediateField k K) [Algebra.IsSeparable k L₁] :\n    Algebra.IsSeparable k ↑(L₁ ⊓ L₂) :=\n  .of_algHom _ _ (IntermediateField.inclusion inf_le_left)\n\n"}
{"name":"FiniteGaloisIntermediateField.instIsSeparableSubtypeMemIntermediateFieldMin_1","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\nL₁ L₂ : IntermediateField k K\ninst✝ : Algebra.IsSeparable k (Subtype fun x => Membership.mem L₂ x)\n⊢ Algebra.IsSeparable k (Subtype fun x => Membership.mem (Min.min L₁ L₂) x)","decl":"instance (L₁ L₂ : IntermediateField k K) [Algebra.IsSeparable k L₂] :\n    Algebra.IsSeparable k ↑(L₁ ⊓ L₂) :=\n  .of_algHom _ _ (IntermediateField.inclusion inf_le_right)\n\n"}
{"name":"FiniteGaloisIntermediateField.instIsGaloisSubtypeMemIntermediateFieldMin","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝⁴ : Field k\ninst✝³ : Field K\ninst✝² : Algebra k K\nL₁ L₂ : IntermediateField k K\ninst✝¹ : IsGalois k (Subtype fun x => Membership.mem L₁ x)\ninst✝ : IsGalois k (Subtype fun x => Membership.mem L₂ x)\n⊢ IsGalois k (Subtype fun x => Membership.mem (Min.min L₁ L₂) x)","decl":"instance (L₁ L₂ : IntermediateField k K) [IsGalois k L₁] [IsGalois k L₂] :\n    IsGalois k ↑(L₁ ⊓ L₂) where\n\n"}
{"name":"FiniteGaloisIntermediateField.le_iff","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝² : Field k\ninst✝¹ : Field K\ninst✝ : Algebra k K\nL₁ L₂ : FiniteGaloisIntermediateField k K\n⊢ Iff (LE.le L₁ L₂) (LE.le L₁.toIntermediateField L₂.toIntermediateField)","decl":"@[simp]\nlemma le_iff (L₁ L₂ : FiniteGaloisIntermediateField k K) :\n    L₁ ≤ L₂ ↔ L₁.toIntermediateField ≤ L₂.toIntermediateField :=\n  Iff.rfl\n\n"}
{"name":"FiniteGaloisIntermediateField.adjoin_val","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝⁴ : Field k\ninst✝³ : Field K\ninst✝² : Algebra k K\ninst✝¹ : IsGalois k K\ns : Set K\ninst✝ : Finite ↑s\n⊢ Eq (FiniteGaloisIntermediateField.adjoin k s).toIntermediateField (normalClosure k (Subtype fun x => Membership.mem (IntermediateField.adjoin k s) x) K)","decl":"@[simp]\nlemma adjoin_val [IsGalois k K] (s : Set K) [Finite s] :\n    (FiniteGaloisIntermediateField.adjoin k s) =\n    normalClosure k (IntermediateField.adjoin k s) K :=\n  rfl\n\n"}
{"name":"FiniteGaloisIntermediateField.subset_adjoin","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝⁴ : Field k\ninst✝³ : Field K\ninst✝² : Algebra k K\ninst✝¹ : IsGalois k K\ns : Set K\ninst✝ : Finite ↑s\n⊢ HasSubset.Subset s ↑(FiniteGaloisIntermediateField.adjoin k s).toIntermediateField","decl":"variable (k) in\nlemma subset_adjoin [IsGalois k K] (s : Set K) [Finite s] :\n    s ⊆ (adjoin k s).toIntermediateField :=\n  (IntermediateField.subset_adjoin k s).trans (IntermediateField.le_normalClosure _)\n\n"}
{"name":"FiniteGaloisIntermediateField.adjoin_simple_le_iff","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\ninst✝ : IsGalois k K\nx : K\nL : FiniteGaloisIntermediateField k K\n⊢ Iff (LE.le (FiniteGaloisIntermediateField.adjoin k (Singleton.singleton x)) L) (Membership.mem L.toIntermediateField x)","decl":"theorem adjoin_simple_le_iff [IsGalois k K] {x : K} {L : FiniteGaloisIntermediateField k K} :\n    adjoin k {x} ≤ L ↔ x ∈ L.toIntermediateField := by\n  simp only [le_iff, adjoin_val, IntermediateField.normalClosure_le_iff_of_normal,\n    IntermediateField.adjoin_le_iff, Set.le_eq_subset, Set.singleton_subset_iff, SetLike.mem_coe]\n\n"}
{"name":"FiniteGaloisIntermediateField.adjoin_map","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝⁴ : Field k\ninst✝³ : Field K\ninst✝² : Algebra k K\ninst✝¹ : IsGalois k K\nf : AlgHom k K K\ns : Set K\ninst✝ : Finite ↑s\n⊢ Eq (FiniteGaloisIntermediateField.adjoin k (Set.image (⇑f) s)) (FiniteGaloisIntermediateField.adjoin k s)","decl":"@[simp]\ntheorem adjoin_map [IsGalois k K] (f : K →ₐ[k] K) (s : Set K) [Finite s] :\n    adjoin k (f '' s) = adjoin k s := by\n  apply val_injective; dsimp [adjoin_val]\n  rw [← IntermediateField.adjoin_map, IntermediateField.normalClosure_map_eq]\n\n"}
{"name":"FiniteGaloisIntermediateField.adjoin_simple_map_algHom","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\ninst✝ : IsGalois k K\nf : AlgHom k K K\nx : K\n⊢ Eq (FiniteGaloisIntermediateField.adjoin k (Singleton.singleton (f x))) (FiniteGaloisIntermediateField.adjoin k (Singleton.singleton x))","decl":"@[simp]\ntheorem adjoin_simple_map_algHom [IsGalois k K] (f : K →ₐ[k] K) (x : K) :\n    adjoin k {f x} = adjoin k {x} := by\n  simpa only [Set.image_singleton] using adjoin_map f { x }\n\n"}
{"name":"FiniteGaloisIntermediateField.adjoin_simple_map_algEquiv","module":"Mathlib.FieldTheory.Galois.GaloisClosure","initialProofState":"k : Type u_1\nK : Type u_2\ninst✝³ : Field k\ninst✝² : Field K\ninst✝¹ : Algebra k K\ninst✝ : IsGalois k K\nf : AlgEquiv k K K\nx : K\n⊢ Eq (FiniteGaloisIntermediateField.adjoin k (Singleton.singleton (f x))) (FiniteGaloisIntermediateField.adjoin k (Singleton.singleton x))","decl":"@[simp]\ntheorem adjoin_simple_map_algEquiv [IsGalois k K] (f : K ≃ₐ[k] K) (x : K) :\n    adjoin k {f x} = adjoin k {x} :=\n  adjoin_simple_map_algHom (f : K →ₐ[k] K) x\n\n"}
