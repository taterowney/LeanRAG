{"name":"BoxIntegral.Box.mem_splitCenterBox","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\ns : Set ι\ny : ι → Real\n⊢ Iff (Membership.mem (I.splitCenterBox s) y) (And (Membership.mem I y) (∀ (i : ι), Iff (LT.lt (HDiv.hDiv (HAdd.hAdd (I.lower i) (I.upper i)) 2) (y i)) (Membership.mem s i)))","decl":"theorem mem_splitCenterBox {s : Set ι} {y : ι → ℝ} :\n    y ∈ I.splitCenterBox s ↔ y ∈ I ∧ ∀ i, (I.lower i + I.upper i) / 2 < y i ↔ i ∈ s := by\n  simp only [splitCenterBox, mem_def, ← forall_and]\n  refine forall_congr' fun i ↦ ?_\n  dsimp only [Set.piecewise]\n  split_ifs with hs <;> simp only [hs, iff_true, iff_false, not_lt]\n  exacts [⟨fun H ↦ ⟨⟨(left_lt_add_div_two.2 (I.lower_lt_upper i)).trans H.1, H.2⟩, H.1⟩,\n      fun H ↦ ⟨H.2, H.1.2⟩⟩,\n    ⟨fun H ↦ ⟨⟨H.1, H.2.trans (add_div_two_lt_right.2 (I.lower_lt_upper i)).le⟩, H.2⟩,\n      fun H ↦ ⟨H.1.1, H.2⟩⟩]\n\n"}
{"name":"BoxIntegral.Box.splitCenterBox_le","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\ns : Set ι\n⊢ LE.le (I.splitCenterBox s) I","decl":"theorem splitCenterBox_le (I : Box ι) (s : Set ι) : I.splitCenterBox s ≤ I :=\n  fun _ hx ↦ (mem_splitCenterBox.1 hx).1\n\n"}
{"name":"BoxIntegral.Box.disjoint_splitCenterBox","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\ns t : Set ι\nh : Ne s t\n⊢ Disjoint ↑(I.splitCenterBox s) ↑(I.splitCenterBox t)","decl":"theorem disjoint_splitCenterBox (I : Box ι) {s t : Set ι} (h : s ≠ t) :\n    Disjoint (I.splitCenterBox s : Set (ι → ℝ)) (I.splitCenterBox t) := by\n  rw [disjoint_iff_inf_le]\n  rintro y ⟨hs, ht⟩; apply h\n  ext i\n  rw [mem_coe, mem_splitCenterBox] at hs ht\n  rw [← hs.2, ← ht.2]\n\n"}
{"name":"BoxIntegral.Box.injective_splitCenterBox","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\n⊢ Function.Injective I.splitCenterBox","decl":"theorem injective_splitCenterBox (I : Box ι) : Injective I.splitCenterBox := fun _ _ H ↦\n  by_contra fun Hne ↦ (I.disjoint_splitCenterBox Hne).ne (nonempty_coe _).ne_empty (H ▸ rfl)\n\n"}
{"name":"BoxIntegral.Box.exists_mem_splitCenterBox","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\nx : ι → Real\n⊢ Iff (Exists fun s => Membership.mem (I.splitCenterBox s) x) (Membership.mem I x)","decl":"@[simp]\ntheorem exists_mem_splitCenterBox {I : Box ι} {x : ι → ℝ} : (∃ s, x ∈ I.splitCenterBox s) ↔ x ∈ I :=\n  ⟨fun ⟨s, hs⟩ ↦ I.splitCenterBox_le s hs, fun hx ↦\n    ⟨{ i | (I.lower i + I.upper i) / 2 < x i }, mem_splitCenterBox.2 ⟨hx, fun _ ↦ Iff.rfl⟩⟩⟩\n\n"}
{"name":"BoxIntegral.Box.splitCenterBoxEmb_apply","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\ns : Set ι\n⊢ Eq (I.splitCenterBoxEmb s) (I.splitCenterBox s)","decl":"/-- `BoxIntegral.Box.splitCenterBox` bundled as a `Function.Embedding`. -/\n@[simps]\ndef splitCenterBoxEmb (I : Box ι) : Set ι ↪ Box ι :=\n  ⟨splitCenterBox I, injective_splitCenterBox I⟩\n\n"}
{"name":"BoxIntegral.Box.iUnion_coe_splitCenterBox","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\n⊢ Eq (Set.iUnion fun s => ↑(I.splitCenterBox s)) ↑I","decl":"@[simp]\ntheorem iUnion_coe_splitCenterBox (I : Box ι) : ⋃ s, (I.splitCenterBox s : Set (ι → ℝ)) = I := by\n  ext x\n  simp\n\n"}
{"name":"BoxIntegral.Box.upper_sub_lower_splitCenterBox","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\nI : BoxIntegral.Box ι\ns : Set ι\ni : ι\n⊢ Eq (HSub.hSub ((I.splitCenterBox s).upper i) ((I.splitCenterBox s).lower i)) (HDiv.hDiv (HSub.hSub (I.upper i) (I.lower i)) 2)","decl":"@[simp]\ntheorem upper_sub_lower_splitCenterBox (I : Box ι) (s : Set ι) (i : ι) :\n    (I.splitCenterBox s).upper i - (I.splitCenterBox s).lower i = (I.upper i - I.lower i) / 2 := by\n  by_cases i ∈ s <;> field_simp [splitCenterBox] <;> field_simp [mul_two, two_mul]\n\n"}
{"name":"BoxIntegral.Box.subbox_induction_on'","module":"Mathlib.Analysis.BoxIntegral.Box.SubboxInduction","initialProofState":"ι : Type u_1\np : BoxIntegral.Box ι → Prop\nI : BoxIntegral.Box ι\nH_ind : ∀ (J : BoxIntegral.Box ι), LE.le J I → (∀ (s : Set ι), p (J.splitCenterBox s)) → p J\nH_nhds : ∀ (z : ι → Real), Membership.mem (BoxIntegral.Box.Icc I) z → Exists fun U => And (Membership.mem (nhdsWithin z (BoxIntegral.Box.Icc I)) U) (∀ (J : BoxIntegral.Box ι), LE.le J I → ∀ (m : Nat), Membership.mem (BoxIntegral.Box.Icc J) z → HasSubset.Subset (BoxIntegral.Box.Icc J) U → (∀ (i : ι), Eq (HSub.hSub (J.upper i) (J.lower i)) (HDiv.hDiv (HSub.hSub (I.upper i) (I.lower i)) (HPow.hPow 2 m))) → p J)\n⊢ p I","decl":"/-- Let `p` be a predicate on `Box ι`, let `I` be a box. Suppose that the following two properties\nhold true.\n\n* `H_ind` : Consider a smaller box `J ≤ I`. The hyperplanes passing through the center of `J` split\n  it into `2 ^ n` boxes. If `p` holds true on each of these boxes, then it true on `J`.\n\n* `H_nhds` : For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within\n  `I.Icc` such that for every box `J ≤ I` such that `z ∈ J.Icc ⊆ U`, if `J` is homothetic to `I`\n  with a coefficient of the form `1 / 2 ^ m`, then `p` is true on `J`.\n\nThen `p I` is true. See also `BoxIntegral.Box.subbox_induction_on` for a version using\n`BoxIntegral.Prepartition.splitCenter` instead of `BoxIntegral.Box.splitCenterBox`.\n\nThe proof still works if we assume `H_ind` only for subboxes `J ≤ I` that are homothetic to `I` with\na coefficient of the form `2⁻ᵐ` but we do not need this generalization yet. -/\n@[elab_as_elim]\ntheorem subbox_induction_on' {p : Box ι → Prop} (I : Box ι)\n    (H_ind : ∀ J ≤ I, (∀ s, p (splitCenterBox J s)) → p J)\n    (H_nhds : ∀ z ∈ Box.Icc I, ∃ U ∈ 𝓝[Box.Icc I] z, ∀ J ≤ I, ∀ (m : ℕ), z ∈ Box.Icc J →\n      Box.Icc J ⊆ U → (∀ i, J.upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ m) → p J) :\n    p I := by\n  by_contra hpI\n  -- First we use `H_ind` to construct a decreasing sequence of boxes such that `∀ m, ¬p (J m)`.\n  replace H_ind := fun J hJ ↦ not_imp_not.2 (H_ind J hJ)\n  simp only [exists_imp, not_forall] at H_ind\n  choose! s hs using H_ind\n  set J : ℕ → Box ι := fun m ↦ (fun J ↦ splitCenterBox J (s J))^[m] I\n  have J_succ : ∀ m, J (m + 1) = splitCenterBox (J m) (s <| J m) :=\n    fun m ↦ iterate_succ_apply' _ _ _\n  -- Now we prove some properties of `J`\n  have hJmono : Antitone J :=\n    antitone_nat_of_succ_le fun n ↦ by simpa [J_succ] using splitCenterBox_le _ _\n  have hJle : ∀ m, J m ≤ I := fun m ↦ hJmono (zero_le m)\n  have hJp : ∀ m, ¬p (J m) :=\n    fun m ↦ Nat.recOn m hpI fun m ↦ by simpa only [J_succ] using hs (J m) (hJle m)\n  have hJsub : ∀ m i, (J m).upper i - (J m).lower i = (I.upper i - I.lower i) / 2 ^ m := by\n    intro m i\n    induction' m with m ihm\n    · simp [J]\n    simp only [pow_succ, J_succ, upper_sub_lower_splitCenterBox, ihm, div_div]\n  have h0 : J 0 = I := rfl\n  clear_value J\n  clear hpI hs J_succ s\n  -- Let `z` be the unique common point of all `(J m).Icc`. Then `H_nhds` proves `p (J m)` for\n  -- sufficiently large `m`. This contradicts `hJp`.\n  set z : ι → ℝ := ⨆ m, (J m).lower\n  have hzJ : ∀ m, z ∈ Box.Icc (J m) :=\n    mem_iInter.1 (ciSup_mem_iInter_Icc_of_antitone_Icc\n      ((@Box.Icc ι).monotone.comp_antitone hJmono) fun m ↦ (J m).lower_le_upper)\n  have hJl_mem : ∀ m, (J m).lower ∈ Box.Icc I := fun m ↦ le_iff_Icc.1 (hJle m) (J m).lower_mem_Icc\n  have hJu_mem : ∀ m, (J m).upper ∈ Box.Icc I := fun m ↦ le_iff_Icc.1 (hJle m) (J m).upper_mem_Icc\n  have hJlz : Tendsto (fun m ↦ (J m).lower) atTop (𝓝 z) :=\n    tendsto_atTop_ciSup (antitone_lower.comp hJmono) ⟨I.upper, fun x ⟨m, hm⟩ ↦ hm ▸ (hJl_mem m).2⟩\n  have hJuz : Tendsto (fun m ↦ (J m).upper) atTop (𝓝 z) := by\n    suffices Tendsto (fun m ↦ (J m).upper - (J m).lower) atTop (𝓝 0) by simpa using hJlz.add this\n    refine tendsto_pi_nhds.2 fun i ↦ ?_\n    simpa [hJsub] using\n      tendsto_const_nhds.div_atTop (tendsto_pow_atTop_atTop_of_one_lt _root_.one_lt_two)\n  replace hJlz : Tendsto (fun m ↦ (J m).lower) atTop (𝓝[Icc I.lower I.upper] z) :=\n    tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ hJlz (Eventually.of_forall hJl_mem)\n  replace hJuz : Tendsto (fun m ↦ (J m).upper) atTop (𝓝[Icc I.lower I.upper] z) :=\n    tendsto_nhdsWithin_of_tendsto_nhds_of_eventually_within _ hJuz (Eventually.of_forall hJu_mem)\n  rcases H_nhds z (h0 ▸ hzJ 0) with ⟨U, hUz, hU⟩\n  rcases (tendsto_lift'.1 (hJlz.Icc hJuz) U hUz).exists with ⟨m, hUm⟩\n  exact hJp m (hU (J m) (hJle m) m (hzJ m) hUm (hJsub m))\n\n"}
