{"name":"MvPowerSeries.WithPiTopology.instT0Space","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : T0Space R\n⊢ T0Space (MvPowerSeries σ R)","decl":"/-- `MvPowerSeries` on a `T0Space` form a `T0Space` -/\n@[scoped instance]\ntheorem instT0Space [T0Space R] : T0Space (MvPowerSeries σ R) := Pi.instT0Space\n\n"}
{"name":"MvPowerSeries.WithPiTopology.instT2Space","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : T2Space R\n⊢ T2Space (MvPowerSeries σ R)","decl":"/-- `MvPowerSeries` on a `T2Space` form a `T2Space` -/\n@[scoped instance]\ntheorem instT2Space [T2Space R] : T2Space (MvPowerSeries σ R) := Pi.t2Space\n\n"}
{"name":"MvPowerSeries.WithPiTopology.continuous_coeff","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\nd : Finsupp σ Nat\n⊢ Continuous ⇑(MvPowerSeries.coeff R d)","decl":"variable (R) in\n/-- `MvPowerSeries.coeff` is continuous. -/\n@[fun_prop]\ntheorem continuous_coeff [Semiring R] (d : σ →₀ ℕ) :\n    Continuous (MvPowerSeries.coeff R d) :=\n  continuous_pi_iff.mp continuous_id d\n\n"}
{"name":"MvPowerSeries.WithPiTopology.continuous_constantCoeff","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\n⊢ Continuous ⇑(MvPowerSeries.constantCoeff σ R)","decl":"variable (R) in\n/-- `MvPolynomial.constantCoeff` is continuous -/\ntheorem continuous_constantCoeff [Semiring R] : Continuous (constantCoeff σ R) :=\n  continuous_coeff R 0\n\n"}
{"name":"MvPowerSeries.WithPiTopology.tendsto_iff_coeff_tendsto","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\nι : Type u_3\nf : ι → MvPowerSeries σ R\nu : Filter ι\ng : MvPowerSeries σ R\n⊢ Iff (Filter.Tendsto f u (nhds g)) (∀ (d : Finsupp σ Nat), Filter.Tendsto (fun i => (MvPowerSeries.coeff R d) (f i)) u (nhds ((MvPowerSeries.coeff R d) g)))","decl":"/-- A family of power series converges iff it converges coefficientwise -/\ntheorem tendsto_iff_coeff_tendsto [Semiring R] {ι : Type*}\n    (f : ι → MvPowerSeries σ R) (u : Filter ι) (g : MvPowerSeries σ R) :\n    Tendsto f u (nhds g) ↔\n    ∀ d : σ →₀ ℕ, Tendsto (fun i => coeff R d (f i)) u (nhds (coeff R d g)) := by\n  rw [nhds_pi, tendsto_pi]\n  exact forall_congr' (fun d => Iff.rfl)\n\n"}
{"name":"MvPowerSeries.WithPiTopology.instTopologicalSemiring","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝² : TopologicalSpace R\ninst✝¹ : Semiring R\ninst✝ : TopologicalSemiring R\n⊢ TopologicalSemiring (MvPowerSeries σ R)","decl":"/-- The semiring topology on `MvPowerSeries` of a topological semiring -/\n@[scoped instance]\ntheorem instTopologicalSemiring [Semiring R] [TopologicalSemiring R] :\n    TopologicalSemiring (MvPowerSeries σ R) where\n    continuous_add := continuous_pi fun d => continuous_add.comp\n      (((continuous_coeff R d).fst').prod_mk (continuous_coeff R d).snd')\n    continuous_mul := continuous_pi fun _ =>\n      continuous_finset_sum _ fun i _ => continuous_mul.comp\n        ((continuous_coeff R i.fst).fst'.prod_mk (continuous_coeff R i.snd).snd')\n\n"}
{"name":"MvPowerSeries.WithPiTopology.instTopologicalRing","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝² : TopologicalSpace R\ninst✝¹ : Ring R\ninst✝ : TopologicalRing R\n⊢ TopologicalRing (MvPowerSeries σ R)","decl":"/-- The ring topology on `MvPowerSeries` of a topological ring -/\n@[scoped instance]\ntheorem instTopologicalRing [Ring R] [TopologicalRing R] :\n    TopologicalRing (MvPowerSeries σ R) :=\n  { instTopologicalSemiring σ R with\n    continuous_neg := continuous_pi fun d ↦ Continuous.comp continuous_neg\n      (continuous_coeff R d) }\n\n"}
{"name":"MvPowerSeries.WithPiTopology.continuous_C","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\n⊢ Continuous ⇑(MvPowerSeries.C σ R)","decl":"@[fun_prop]\ntheorem continuous_C [Semiring R] :\n    Continuous (C σ R) := by\n  classical\n  simp only [continuous_iff_continuousAt]\n  refine fun r ↦ (tendsto_iff_coeff_tendsto _ _ _).mpr fun d ↦ ?_\n  simp only [coeff_C]\n  split_ifs\n  · exact tendsto_id\n  · exact tendsto_const_nhds\n\n"}
{"name":"MvPowerSeries.WithPiTopology.variables_tendsto_zero","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\n⊢ Filter.Tendsto (fun x => MvPowerSeries.X x) Filter.cofinite (nhds 0)","decl":"theorem variables_tendsto_zero [Semiring R] :\n    Tendsto (X · : σ → MvPowerSeries σ R) cofinite (nhds 0) := by\n  classical\n  simp only [tendsto_iff_coeff_tendsto, ← coeff_apply, coeff_X, coeff_zero]\n  refine fun d ↦ tendsto_nhds_of_eventually_eq ?_\n  by_cases h : ∃ i, d = Finsupp.single i 1\n  · obtain ⟨i, hi⟩ := h\n    filter_upwards [eventually_cofinite_ne i] with j hj\n    simp [hi, Finsupp.single_eq_single_iff, hj.symm]\n  · simpa only [ite_eq_right_iff] using\n      Eventually.of_forall fun x h' ↦ (not_exists.mp h x h').elim\n\n"}
{"name":"MvPowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_nilpotent","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : CommSemiring R\nf : MvPowerSeries σ R\nhf : IsNilpotent ((MvPowerSeries.constantCoeff σ R) f)\n⊢ Filter.Tendsto (fun n => HPow.hPow f n) Filter.atTop (nhds 0)","decl":"theorem tendsto_pow_zero_of_constantCoeff_nilpotent [CommSemiring R]\n    {f} (hf : IsNilpotent (constantCoeff σ R f)) :\n    Tendsto (fun n : ℕ => f ^ n) atTop (nhds 0) := by\n  classical\n  obtain ⟨m, hm⟩ := hf\n  simp_rw [tendsto_iff_coeff_tendsto, coeff_zero]\n  exact fun d ↦ tendsto_atTop_of_eventually_const fun n hn ↦\n    coeff_eq_zero_of_constantCoeff_nilpotent hm hn\n\n"}
{"name":"MvPowerSeries.WithPiTopology.tendsto_pow_zero_of_constantCoeff_zero","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : CommSemiring R\nf : MvPowerSeries σ R\nhf : Eq ((MvPowerSeries.constantCoeff σ R) f) 0\n⊢ Filter.Tendsto (fun n => HPow.hPow f n) Filter.atTop (nhds 0)","decl":"theorem tendsto_pow_zero_of_constantCoeff_zero [CommSemiring R]\n    {f} (hf : constantCoeff σ R f = 0) :\n    Tendsto (fun n : ℕ => f ^ n) atTop (nhds 0) := by\n  apply tendsto_pow_zero_of_constantCoeff_nilpotent\n  rw [hf]\n  exact IsNilpotent.zero\n\n"}
{"name":"MvPowerSeries.WithPiTopology.tendsto_pow_of_constantCoeff_nilpotent_iff","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝² : TopologicalSpace R\ninst✝¹ : CommRing R\ninst✝ : DiscreteTopology R\nf : MvPowerSeries σ R\n⊢ Iff (Filter.Tendsto (fun n => HPow.hPow f n) Filter.atTop (nhds 0)) (IsNilpotent ((MvPowerSeries.constantCoeff σ R) f))","decl":"/-- The powers of a `MvPowerSeries` converge to 0 iff its constant coefficient is nilpotent.\nN. Bourbaki, *Algebra II*, [bourbaki1981] (chap. 4, §4, n°2, corollaire de la prop. 3) -/\ntheorem tendsto_pow_of_constantCoeff_nilpotent_iff [CommRing R] [DiscreteTopology R] (f) :\n    Tendsto (fun n : ℕ => f ^ n) atTop (nhds 0) ↔\n      IsNilpotent (constantCoeff σ R f) := by\n  refine ⟨?_, tendsto_pow_zero_of_constantCoeff_nilpotent⟩\n  intro h\n  suffices Tendsto (fun n : ℕ => constantCoeff σ R (f ^ n)) atTop (nhds 0) by\n    simp only [tendsto_def] at this\n    specialize this {0} _\n    suffices ∀ x : R, {x} ∈ nhds x by exact this 0\n    rw [← discreteTopology_iff_singleton_mem_nhds]; infer_instance\n    simp only [map_pow, mem_atTop_sets, ge_iff_le, Set.mem_preimage,\n      Set.mem_singleton_iff] at this\n    obtain ⟨m, hm⟩ := this\n    use m\n    apply hm m (le_refl m)\n  simp only [← @comp_apply _ R ℕ, ← tendsto_map'_iff]\n  simp only [Tendsto, map_le_iff_le_comap] at h ⊢\n  refine le_trans h (comap_mono ?_)\n  rw [← map_le_iff_le_comap]\n  exact Continuous.continuousAt (continuous_constantCoeff R)\n\n"}
{"name":"MvPowerSeries.WithPiTopology.hasSum_of_monomials_self","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : TopologicalSpace R\ninst✝ : Semiring R\nf : MvPowerSeries σ R\n⊢ HasSum (fun d => (MvPowerSeries.monomial R d) ((MvPowerSeries.coeff R d) f)) f","decl":"/-- A multivariate power series is the sum (in the sense of summable families) of its monomials -/\ntheorem hasSum_of_monomials_self (f : MvPowerSeries σ R) :\n    HasSum (fun d : σ →₀ ℕ => monomial R d (coeff R d f)) f := by\n  rw [Pi.hasSum]\n  intro d\n  convert hasSum_single d ?_ using 1\n  · exact (coeff_monomial_same d _).symm\n  · exact fun d' h ↦ coeff_monomial_ne (Ne.symm h) _\n\n"}
{"name":"MvPowerSeries.WithPiTopology.as_tsum","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝² : TopologicalSpace R\ninst✝¹ : Semiring R\ninst✝ : T2Space R\nf : MvPowerSeries σ R\n⊢ Eq f (tsum fun d => (MvPowerSeries.monomial R d) ((MvPowerSeries.coeff R d) f))","decl":"/-- If the coefficient space is T2, then the multivariate power series is `tsum` of its monomials -/\ntheorem as_tsum [T2Space R] (f : MvPowerSeries σ R) :\n    f = tsum fun d : σ →₀ ℕ => monomial R d (coeff R d f) :=\n  (HasSum.tsum_eq (hasSum_of_monomials_self _)).symm\n\n"}
{"name":"MvPowerSeries.WithPiTopology.uniformContinuous_coeff","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : UniformSpace R\ninst✝ : Semiring R\nd : Finsupp σ Nat\n⊢ UniformContinuous fun f => (MvPowerSeries.coeff R d) f","decl":"variable (R) in\n/-- Coefficients of a multivariate power series are uniformly continuous -/\ntheorem uniformContinuous_coeff [Semiring R] (d : σ →₀ ℕ) :\n    UniformContinuous fun f : MvPowerSeries σ R => coeff R d f :=\n  uniformContinuous_pi.mp uniformContinuous_id d\n\n"}
{"name":"MvPowerSeries.WithPiTopology.instCompleteSpace","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝¹ : UniformSpace R\ninst✝ : CompleteSpace R\n⊢ CompleteSpace (MvPowerSeries σ R)","decl":"/-- Completeness of the uniform structure on `MvPowerSeries` -/\n@[scoped instance]\ntheorem instCompleteSpace [CompleteSpace R] :\n    CompleteSpace (MvPowerSeries σ R) := Pi.complete _\n\n"}
{"name":"MvPowerSeries.WithPiTopology.instUniformAddGroup","module":"Mathlib.RingTheory.MvPowerSeries.PiTopology","initialProofState":"σ : Type u_1\nR : Type u_2\ninst✝² : UniformSpace R\ninst✝¹ : AddGroup R\ninst✝ : UniformAddGroup R\n⊢ UniformAddGroup (MvPowerSeries σ R)","decl":"/-- The `UniformAddGroup` structure on `MvPowerSeries` of a `UniformAddGroup` -/\n@[scoped instance]\ntheorem instUniformAddGroup [AddGroup R] [UniformAddGroup R] :\n    UniformAddGroup (MvPowerSeries σ R) := Pi.instUniformAddGroup\n\n"}
