{"name":"catalan_zero","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"⊢ Eq (catalan 0) 1","decl":"@[simp]\ntheorem catalan_zero : catalan 0 = 1 := by rw [catalan]\n\n"}
{"name":"catalan_succ","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (catalan (HAdd.hAdd n 1)) (Finset.univ.sum fun i => HMul.hMul (catalan ↑i) (catalan (HSub.hSub n ↑i)))","decl":"theorem catalan_succ (n : ℕ) : catalan (n + 1) = ∑ i : Fin n.succ, catalan i * catalan (n - i) := by\n  rw [catalan]\n\n"}
{"name":"catalan_succ'","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (catalan (HAdd.hAdd n 1)) ((Finset.HasAntidiagonal.antidiagonal n).sum fun ij => HMul.hMul (catalan ij.1) (catalan ij.2))","decl":"theorem catalan_succ' (n : ℕ) :\n    catalan (n + 1) = ∑ ij ∈ antidiagonal n, catalan ij.1 * catalan ij.2 := by\n  rw [catalan_succ, Nat.sum_antidiagonal_eq_sum_range_succ (fun x y => catalan x * catalan y) n,\n    sum_range]\n\n"}
{"name":"catalan_one","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"⊢ Eq (catalan 1) 1","decl":"@[simp]\ntheorem catalan_one : catalan 1 = 1 := by simp [catalan_succ]\n\n"}
{"name":"catalan_eq_centralBinom_div","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (catalan n) (HDiv.hDiv n.centralBinom (HAdd.hAdd n 1))","decl":"theorem catalan_eq_centralBinom_div (n : ℕ) : catalan n = n.centralBinom / (n + 1) := by\n  suffices (catalan n : ℚ) = Nat.centralBinom n / (n + 1) by\n    have h := Nat.succ_dvd_centralBinom n\n    exact mod_cast this\n  induction' n using Nat.case_strong_induction_on with d hd\n  · simp\n  · simp_rw [catalan_succ, Nat.cast_sum, Nat.cast_mul]\n    trans (∑ i : Fin d.succ, Nat.centralBinom i / (i + 1) *\n                             (Nat.centralBinom (d - i) / (d - i + 1)) : ℚ)\n    · congr\n      ext1 x\n      have m_le_d : x.val ≤ d := by omega\n      have d_minus_x_le_d : (d - x.val) ≤ d := tsub_le_self\n      rw [hd _ m_le_d, hd _ d_minus_x_le_d]\n      norm_cast\n    · trans (∑ i : Fin d.succ, (gosperCatalan (d + 1) (i + 1) - gosperCatalan (d + 1) i))\n      · refine sum_congr rfl fun i _ => ?_\n        rw [gosper_trick i.is_le, mul_div]\n      · rw [← sum_range fun i => gosperCatalan (d + 1) (i + 1) - gosperCatalan (d + 1) i,\n            sum_range_sub, Nat.succ_eq_add_one]\n        rw [gosper_catalan_sub_eq_central_binom_div d]\n        norm_cast\n\n"}
{"name":"succ_mul_catalan_eq_centralBinom","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (HMul.hMul (HAdd.hAdd n 1) (catalan n)) n.centralBinom","decl":"theorem succ_mul_catalan_eq_centralBinom (n : ℕ) : (n + 1) * catalan n = n.centralBinom :=\n  (Nat.eq_mul_of_div_eq_right n.succ_dvd_centralBinom (catalan_eq_centralBinom_div n).symm).symm\n\n"}
{"name":"catalan_two","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"⊢ Eq (catalan 2) 2","decl":"theorem catalan_two : catalan 2 = 2 := by\n  norm_num [catalan_eq_centralBinom_div, Nat.centralBinom, Nat.choose]\n\n"}
{"name":"catalan_three","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"⊢ Eq (catalan 3) 5","decl":"theorem catalan_three : catalan 3 = 5 := by\n  norm_num [catalan_eq_centralBinom_div, Nat.centralBinom, Nat.choose]\n\n"}
{"name":"Tree.treesOfNumNodesEq_zero","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"⊢ Eq (Tree.treesOfNumNodesEq 0) (Singleton.singleton Tree.nil)","decl":"@[simp]\ntheorem treesOfNumNodesEq_zero : treesOfNumNodesEq 0 = {nil} := by rw [treesOfNumNodesEq]\n\n"}
{"name":"Tree.treesOfNumNodesEq_succ","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (Tree.treesOfNumNodesEq (HAdd.hAdd n 1)) ((Finset.HasAntidiagonal.antidiagonal n).biUnion fun ij => Tree.pairwiseNode (Tree.treesOfNumNodesEq ij.1) (Tree.treesOfNumNodesEq ij.2))","decl":"theorem treesOfNumNodesEq_succ (n : ℕ) :\n    treesOfNumNodesEq (n + 1) =\n      (antidiagonal n).biUnion fun ij =>\n        pairwiseNode (treesOfNumNodesEq ij.1) (treesOfNumNodesEq ij.2) := by\n  rw [treesOfNumNodesEq]\n  ext\n  simp\n\n"}
{"name":"Tree.mem_treesOfNumNodesEq","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"x : Tree Unit\nn : Nat\n⊢ Iff (Membership.mem (Tree.treesOfNumNodesEq n) x) (Eq x.numNodes n)","decl":"@[simp]\ntheorem mem_treesOfNumNodesEq {x : Tree Unit} {n : ℕ} :\n    x ∈ treesOfNumNodesEq n ↔ x.numNodes = n := by\n  induction x using Tree.unitRecOn generalizing n <;> cases n <;>\n    simp [treesOfNumNodesEq_succ, *]\n\n"}
{"name":"Tree.mem_treesOfNumNodesEq_numNodes","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"x : Tree Unit\n⊢ Membership.mem (Tree.treesOfNumNodesEq x.numNodes) x","decl":"theorem mem_treesOfNumNodesEq_numNodes (x : Tree Unit) : x ∈ treesOfNumNodesEq x.numNodes :=\n  mem_treesOfNumNodesEq.mpr rfl\n\n"}
{"name":"Tree.coe_treesOfNumNodesEq","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (↑(Tree.treesOfNumNodesEq n)) (setOf fun x => Eq x.numNodes n)","decl":"@[simp, norm_cast]\ntheorem coe_treesOfNumNodesEq (n : ℕ) :\n    ↑(treesOfNumNodesEq n) = { x : Tree Unit | x.numNodes = n } :=\n  Set.ext (by simp)\n\n"}
{"name":"Tree.treesOfNumNodesEq_card_eq_catalan","module":"Mathlib.Combinatorics.Enumerative.Catalan","initialProofState":"n : Nat\n⊢ Eq (Tree.treesOfNumNodesEq n).card (catalan n)","decl":"theorem treesOfNumNodesEq_card_eq_catalan (n : ℕ) : #(treesOfNumNodesEq n) = catalan n := by\n  induction' n using Nat.case_strong_induction_on with n ih\n  · simp\n  rw [treesOfNumNodesEq_succ, card_biUnion, catalan_succ']\n  · apply sum_congr rfl\n    rintro ⟨i, j⟩ H\n    rw [card_map, card_product, ih _ (fst_le H), ih _ (snd_le H)]\n  · simp_rw [disjoint_left]\n    aesop\n\n"}
