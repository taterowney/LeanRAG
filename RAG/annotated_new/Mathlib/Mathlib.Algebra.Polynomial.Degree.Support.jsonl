{"name":"Polynomial.supDegree_eq_natDegree","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq (AddMonoidAlgebra.supDegree id p.toFinsupp) p.natDegree","decl":"theorem supDegree_eq_natDegree (p : R[X]) : p.toFinsupp.supDegree id = p.natDegree := by\n  obtain rfl|h := eq_or_ne p 0\n  · simp\n  apply WithBot.coe_injective\n  rw [← AddMonoidAlgebra.supDegree_withBot_some_comp, Function.comp_id, supDegree_eq_degree,\n    degree_eq_natDegree h, Nat.cast_withBot]\n  rwa [support_toFinsupp, nonempty_iff_ne_empty, Ne, support_eq_empty]\n\n"}
{"name":"Polynomial.le_natDegree_of_mem_supp","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na : Nat\na✝ : Membership.mem p.support a\n⊢ LE.le a p.natDegree","decl":"theorem le_natDegree_of_mem_supp (a : ℕ) : a ∈ p.support → a ≤ natDegree p :=\n  le_natDegree_of_ne_zero ∘ mem_support_iff.mp\n\n"}
{"name":"Polynomial.supp_subset_range","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\nm : Nat\ninst✝ : Semiring R\np : Polynomial R\nh : LT.lt p.natDegree m\n⊢ HasSubset.Subset p.support (Finset.range m)","decl":"theorem supp_subset_range (h : natDegree p < m) : p.support ⊆ Finset.range m := fun _n hn =>\n  mem_range.2 <| (le_natDegree_of_mem_supp _ hn).trans_lt h\n\n"}
{"name":"Polynomial.supp_subset_range_natDegree_succ","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ HasSubset.Subset p.support (Finset.range (HAdd.hAdd p.natDegree 1))","decl":"theorem supp_subset_range_natDegree_succ : p.support ⊆ Finset.range (natDegree p + 1) :=\n  supp_subset_range (Nat.lt_succ_self _)\n\n"}
{"name":"Polynomial.as_sum_support","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p (p.support.sum fun i => (Polynomial.monomial i) (p.coeff i))","decl":"theorem as_sum_support (p : R[X]) : p = ∑ i ∈ p.support, monomial i (p.coeff i) :=\n  (sum_monomial_eq p).symm\n\n"}
{"name":"Polynomial.as_sum_support_C_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p (p.support.sum fun i => HMul.hMul (Polynomial.C (p.coeff i)) (HPow.hPow Polynomial.X i))","decl":"theorem as_sum_support_C_mul_X_pow (p : R[X]) : p = ∑ i ∈ p.support, C (p.coeff i) * X ^ i :=\n  _root_.trans p.as_sum_support <| by simp only [C_mul_X_pow_eq_monomial]\n\n"}
{"name":"Polynomial.sum_over_range'","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : AddCommMonoid S\np : Polynomial R\nf : Nat → R → S\nh : ∀ (n : Nat), Eq (f n 0) 0\nn : Nat\nw : LT.lt p.natDegree n\n⊢ Eq (p.sum f) ((Finset.range n).sum fun a => f a (p.coeff a))","decl":"/-- We can reexpress a sum over `p.support` as a sum over `range n`,\nfor any `n` satisfying `p.natDegree < n`.\n-/\ntheorem sum_over_range' [AddCommMonoid S] (p : R[X]) {f : ℕ → R → S} (h : ∀ n, f n 0 = 0) (n : ℕ)\n    (w : p.natDegree < n) : p.sum f = ∑ a ∈ range n, f a (coeff p a) := by\n  rcases p with ⟨⟩\n  have := supp_subset_range w\n  simp only [Polynomial.sum, support, coeff, natDegree, degree] at this ⊢\n  exact Finsupp.sum_of_support_subset _ this _ fun n _hn => h n\n\n"}
{"name":"Polynomial.sum_over_range","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : AddCommMonoid S\np : Polynomial R\nf : Nat → R → S\nh : ∀ (n : Nat), Eq (f n 0) 0\n⊢ Eq (p.sum f) ((Finset.range (HAdd.hAdd p.natDegree 1)).sum fun a => f a (p.coeff a))","decl":"/-- We can reexpress a sum over `p.support` as a sum over `range (p.natDegree + 1)`.\n-/\ntheorem sum_over_range [AddCommMonoid S] (p : R[X]) {f : ℕ → R → S} (h : ∀ n, f n 0 = 0) :\n    p.sum f = ∑ a ∈ range (p.natDegree + 1), f a (coeff p a) :=\n  sum_over_range' p h (p.natDegree + 1) (lt_add_one _)\n\n-- TODO this is essentially a duplicate of `sum_over_range`, and should be removed.\n"}
{"name":"Polynomial.sum_fin","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\nS : Type v\ninst✝¹ : Semiring R\ninst✝ : AddCommMonoid S\nf : Nat → R → S\nhf : ∀ (i : Nat), Eq (f i 0) 0\nn : Nat\np : Polynomial R\nhn : LT.lt p.degree ↑n\n⊢ Eq (Finset.univ.sum fun i => f (↑i) (p.coeff ↑i)) (p.sum f)","decl":"theorem sum_fin [AddCommMonoid S] (f : ℕ → R → S) (hf : ∀ i, f i 0 = 0) {n : ℕ} {p : R[X]}\n    (hn : p.degree < n) : (∑ i : Fin n, f i (p.coeff i)) = p.sum f := by\n  by_cases hp : p = 0\n  · rw [hp, sum_zero_index, Finset.sum_eq_zero]\n    intro i _\n    exact hf i\n  rw [sum_over_range' _ hf n ((natDegree_lt_iff_degree_lt hp).mpr hn),\n    Fin.sum_univ_eq_sum_range fun i => f i (p.coeff i)]\n\n"}
{"name":"Polynomial.as_sum_range'","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nn : Nat\nw : LT.lt p.natDegree n\n⊢ Eq p ((Finset.range n).sum fun i => (Polynomial.monomial i) (p.coeff i))","decl":"theorem as_sum_range' (p : R[X]) (n : ℕ) (w : p.natDegree < n) :\n    p = ∑ i ∈ range n, monomial i (coeff p i) :=\n  p.sum_monomial_eq.symm.trans <| p.sum_over_range' monomial_zero_right _ w\n\n"}
{"name":"Polynomial.as_sum_range","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p ((Finset.range (HAdd.hAdd p.natDegree 1)).sum fun i => (Polynomial.monomial i) (p.coeff i))","decl":"theorem as_sum_range (p : R[X]) : p = ∑ i ∈ range (p.natDegree + 1), monomial i (coeff p i) :=\n  p.sum_monomial_eq.symm.trans <| p.sum_over_range <| monomial_zero_right\n\n"}
{"name":"Polynomial.as_sum_range_C_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Eq p ((Finset.range (HAdd.hAdd p.natDegree 1)).sum fun i => HMul.hMul (Polynomial.C (p.coeff i)) (HPow.hPow Polynomial.X i))","decl":"theorem as_sum_range_C_mul_X_pow (p : R[X]) :\n    p = ∑ i ∈ range (p.natDegree + 1), C (coeff p i) * X ^ i :=\n  p.as_sum_range.trans <| by simp only [C_mul_X_pow_eq_monomial]\n\n"}
{"name":"Polynomial.mem_support_C_mul_X_pow","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\nn a : Nat\nc : R\nh : Membership.mem (HMul.hMul (Polynomial.C c) (HPow.hPow Polynomial.X n)).support a\n⊢ Eq a n","decl":"theorem mem_support_C_mul_X_pow {n a : ℕ} {c : R} (h : a ∈ support (C c * X ^ n)) : a = n :=\n  mem_singleton.1 <| support_C_mul_X_pow' n c h\n\n"}
{"name":"Polynomial.card_support_C_mul_X_pow_le_one","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\nc : R\nn : Nat\n⊢ LE.le (HMul.hMul (Polynomial.C c) (HPow.hPow Polynomial.X n)).support.card 1","decl":"theorem card_support_C_mul_X_pow_le_one {c : R} {n : ℕ} : #(support (C c * X ^ n)) ≤ 1 := by\n  rw [← card_singleton n]\n  apply card_le_card (support_C_mul_X_pow' n c)\n\n"}
{"name":"Polynomial.card_supp_le_succ_natDegree","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ LE.le p.support.card (HAdd.hAdd p.natDegree 1)","decl":"theorem card_supp_le_succ_natDegree (p : R[X]) : #p.support ≤ p.natDegree + 1 := by\n  rw [← Finset.card_range (p.natDegree + 1)]\n  exact Finset.card_le_card supp_subset_range_natDegree_succ\n\n"}
{"name":"Polynomial.le_degree_of_mem_supp","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\na : Nat\na✝ : Membership.mem p.support a\n⊢ LE.le (↑a) p.degree","decl":"theorem le_degree_of_mem_supp (a : ℕ) : a ∈ p.support → ↑a ≤ degree p :=\n  le_degree_of_ne_zero ∘ mem_support_iff.mp\n\n"}
{"name":"Polynomial.nonempty_support_iff","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\n⊢ Iff p.support.Nonempty (Ne p 0)","decl":"theorem nonempty_support_iff : p.support.Nonempty ↔ p ≠ 0 := by\n  rw [Ne, nonempty_iff_ne_empty, Ne, ← support_eq_empty]\n\n"}
{"name":"Polynomial.natDegree_mem_support_of_nonzero","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nH : Ne p 0\n⊢ Membership.mem p.support p.natDegree","decl":"theorem natDegree_mem_support_of_nonzero (H : p ≠ 0) : p.natDegree ∈ p.support := by\n  rw [mem_support_iff]\n  exact (not_congr leadingCoeff_eq_zero).mpr H\n\n"}
{"name":"Polynomial.natDegree_eq_support_max'","module":"Mathlib.Algebra.Polynomial.Degree.Support","initialProofState":"R : Type u\ninst✝ : Semiring R\np : Polynomial R\nh : Ne p 0\n⊢ Eq p.natDegree (p.support.max' ⋯)","decl":"theorem natDegree_eq_support_max' (h : p ≠ 0) :\n    p.natDegree = p.support.max' (nonempty_support_iff.mpr h) :=\n  (le_max' _ _ <| natDegree_mem_support_of_nonzero h).antisymm <|\n    max'_le _ _ _ le_natDegree_of_mem_supp\n\n"}
