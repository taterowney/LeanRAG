{"name":"contMDiff_model","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nn : WithTop ENat\n⊢ ContMDiff I (modelWithCornersSelf 𝕜 E) n ↑I","decl":"theorem contMDiff_model : ContMDiff I 𝓘(𝕜, E) n I := by\n  intro x\n  refine contMDiffAt_iff.mpr ⟨I.continuousAt, ?_⟩\n  simp only [mfld_simps]\n  refine contDiffWithinAt_id.congr_of_eventuallyEq ?_ ?_\n  · exact Filter.eventuallyEq_of_mem self_mem_nhdsWithin fun x₂ => I.right_inv\n  simp_rw [Function.comp_apply, I.left_inv, Function.id_def]\n\n"}
{"name":"contMDiffOn_model_symm","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nn : WithTop ENat\n⊢ ContMDiffOn (modelWithCornersSelf 𝕜 E) I n (↑I.symm) (Set.range ↑I)","decl":"theorem contMDiffOn_model_symm : ContMDiffOn 𝓘(𝕜, E) I n I.symm (range I) := by\n  rw [contMDiffOn_iff]\n  refine ⟨I.continuousOn_symm, fun x y => ?_⟩\n  simp only [mfld_simps]\n  exact contDiffOn_id.congr fun x' => I.right_inv\n\n"}
{"name":"contMDiffOn_of_mem_maximalAtlas","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\ne : PartialHomeomorph M H\nh : Membership.mem (IsManifold.maximalAtlas I n M) e\n⊢ ContMDiffOn I I n (↑e) e.source","decl":"/-- An atlas member is `C^n` for any `n`. -/\ntheorem contMDiffOn_of_mem_maximalAtlas (h : e ∈ maximalAtlas I n M) :\n    ContMDiffOn I I n e e.source :=\n  (contDiffWithinAt_localInvariantProp n).liftPropOn_of_mem_maximalAtlas\n    contDiffWithinAtProp_id h\n\n"}
{"name":"contMDiffOn_symm_of_mem_maximalAtlas","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\ne : PartialHomeomorph M H\nh : Membership.mem (IsManifold.maximalAtlas I n M) e\n⊢ ContMDiffOn I I n (↑e.symm) e.target","decl":"/-- The inverse of an atlas member is `C^n` for any `n`. -/\ntheorem contMDiffOn_symm_of_mem_maximalAtlas (h : e ∈ maximalAtlas I n M) :\n    ContMDiffOn I I n e.symm e.target :=\n  (contDiffWithinAt_localInvariantProp n).liftPropOn_symm_of_mem_maximalAtlas\n      contDiffWithinAtProp_id h\n\n"}
{"name":"contMDiffAt_of_mem_maximalAtlas","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\ne : PartialHomeomorph M H\nx : M\nh : Membership.mem (IsManifold.maximalAtlas I n M) e\nhx : Membership.mem e.source x\n⊢ ContMDiffAt I I n (↑e) x","decl":"theorem contMDiffAt_of_mem_maximalAtlas (h : e ∈ maximalAtlas I n M) (hx : x ∈ e.source) :\n    ContMDiffAt I I n e x :=\n  (contMDiffOn_of_mem_maximalAtlas h).contMDiffAt <| e.open_source.mem_nhds hx\n\n"}
{"name":"contMDiffAt_symm_of_mem_maximalAtlas","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\ne : PartialHomeomorph M H\nx : H\nh : Membership.mem (IsManifold.maximalAtlas I n M) e\nhx : Membership.mem e.target x\n⊢ ContMDiffAt I I n (↑e.symm) x","decl":"theorem contMDiffAt_symm_of_mem_maximalAtlas {x : H} (h : e ∈ maximalAtlas I n M)\n    (hx : x ∈ e.target) : ContMDiffAt I I n e.symm x :=\n  (contMDiffOn_symm_of_mem_maximalAtlas h).contMDiffAt <| e.open_target.mem_nhds hx\n\n"}
{"name":"contMDiffOn_chart","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\n⊢ ContMDiffOn I I n (↑(chartAt H x)) (chartAt H x).source","decl":"theorem contMDiffOn_chart : ContMDiffOn I I n (chartAt H x) (chartAt H x).source :=\n  contMDiffOn_of_mem_maximalAtlas <| chart_mem_maximalAtlas x\n\n"}
{"name":"contMDiffOn_chart_symm","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\n⊢ ContMDiffOn I I n (↑(chartAt H x).symm) (chartAt H x).target","decl":"theorem contMDiffOn_chart_symm : ContMDiffOn I I n (chartAt H x).symm (chartAt H x).target :=\n  contMDiffOn_symm_of_mem_maximalAtlas <| chart_mem_maximalAtlas x\n\n"}
{"name":"contMDiffAt_extend","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\ne : PartialHomeomorph M H\nx : M\nhe : Membership.mem (IsManifold.maximalAtlas I n M) e\nhx : Membership.mem e.source x\n⊢ ContMDiffAt I (modelWithCornersSelf 𝕜 E) n (↑(e.extend I)) x","decl":"theorem contMDiffAt_extend {x : M} (he : e ∈ maximalAtlas I n M) (hx : x ∈ e.source) :\n    ContMDiffAt I 𝓘(𝕜, E) n (e.extend I) x :=\n  (contMDiff_model _).comp x <| contMDiffAt_of_mem_maximalAtlas he hx\n\n"}
{"name":"contMDiffAt_extChartAt'","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx x' : M\nh : Membership.mem (chartAt H x).source x'\n⊢ ContMDiffAt I (modelWithCornersSelf 𝕜 E) n (↑(extChartAt I x)) x'","decl":"theorem contMDiffAt_extChartAt' {x' : M} (h : x' ∈ (chartAt H x).source) :\n    ContMDiffAt I 𝓘(𝕜, E) n (extChartAt I x) x' :=\n  contMDiffAt_extend (chart_mem_maximalAtlas x) h\n\n"}
{"name":"contMDiffAt_extChartAt","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\n⊢ ContMDiffAt I (modelWithCornersSelf 𝕜 E) n (↑(extChartAt I x)) x","decl":"theorem contMDiffAt_extChartAt : ContMDiffAt I 𝓘(𝕜, E) n (extChartAt I x) x :=\n  contMDiffAt_extChartAt' <| mem_chart_source H x\n\n"}
{"name":"contMDiffOn_extChartAt","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\n⊢ ContMDiffOn I (modelWithCornersSelf 𝕜 E) n (↑(extChartAt I x)) (chartAt H x).source","decl":"theorem contMDiffOn_extChartAt : ContMDiffOn I 𝓘(𝕜, E) n (extChartAt I x) (chartAt H x).source :=\n  fun _x' hx' => (contMDiffAt_extChartAt' hx').contMDiffWithinAt\n\n"}
{"name":"contMDiffOn_extend_symm","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\ne : PartialHomeomorph M H\nhe : Membership.mem (IsManifold.maximalAtlas I n M) e\n⊢ ContMDiffOn (modelWithCornersSelf 𝕜 E) I n (↑(e.extend I).symm) (Set.image (↑I) e.target)","decl":"theorem contMDiffOn_extend_symm (he : e ∈ maximalAtlas I n M) :\n    ContMDiffOn 𝓘(𝕜, E) I n (e.extend I).symm (I '' e.target) := by\n  refine (contMDiffOn_symm_of_mem_maximalAtlas he).comp\n    (contMDiffOn_model_symm.mono <| image_subset_range _ _) ?_\n  simp_rw [image_subset_iff, PartialEquiv.restr_coe_symm, I.toPartialEquiv_coe_symm,\n    preimage_preimage, I.left_inv, preimage_id']; rfl\n\n"}
{"name":"contMDiffOn_extChartAt_symm","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\n⊢ ContMDiffOn (modelWithCornersSelf 𝕜 E) I n (↑(extChartAt I x).symm) (extChartAt I x).target","decl":"theorem contMDiffOn_extChartAt_symm (x : M) :\n    ContMDiffOn 𝓘(𝕜, E) I n (extChartAt I x).symm (extChartAt I x).target := by\n  convert contMDiffOn_extend_symm (chart_mem_maximalAtlas (I := I) x)\n  · rw [extChartAt_target, I.image_eq]\n  · infer_instance\n  · infer_instance\n\n"}
{"name":"contMDiffWithinAt_extChartAt_symm_target","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\ny : E\nhy : Membership.mem (extChartAt I x).target y\n⊢ ContMDiffWithinAt (modelWithCornersSelf 𝕜 E) I n (↑(extChartAt I x).symm) (extChartAt I x).target y","decl":"theorem contMDiffWithinAt_extChartAt_symm_target\n    (x : M) {y : E} (hy : y ∈ (extChartAt I x).target) :\n    ContMDiffWithinAt 𝓘(𝕜, E) I n (extChartAt I x).symm (extChartAt I x).target y :=\n  contMDiffOn_extChartAt_symm x y hy\n\n"}
{"name":"contMDiffWithinAt_extChartAt_symm_range","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁵ : NormedAddCommGroup E\ninst✝⁴ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝³ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝² : TopologicalSpace M\ninst✝¹ : ChartedSpace H M\nn : WithTop ENat\ninst✝ : IsManifold I n M\nx : M\ny : E\nhy : Membership.mem (extChartAt I x).target y\n⊢ ContMDiffWithinAt (modelWithCornersSelf 𝕜 E) I n (↑(extChartAt I x).symm) (Set.range ↑I) y","decl":"theorem contMDiffWithinAt_extChartAt_symm_range\n    (x : M) {y : E} (hy : y ∈ (extChartAt I x).target) :\n    ContMDiffWithinAt 𝓘(𝕜, E) I n (extChartAt I x).symm (range I) y :=\n  (contMDiffWithinAt_extChartAt_symm_target x hy).mono_of_mem_nhdsWithin\n    (extChartAt_target_mem_nhdsWithin_of_mem hy)\n\n"}
{"name":"contMDiffOn_of_mem_contDiffGroupoid","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝³ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝² : NormedAddCommGroup E\ninst✝¹ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nn : WithTop ENat\ne' : PartialHomeomorph H H\nh : Membership.mem (contDiffGroupoid n I) e'\n⊢ ContMDiffOn I I n (↑e') e'.source","decl":"/-- An element of `contDiffGroupoid n I` is `C^n`. -/\ntheorem contMDiffOn_of_mem_contDiffGroupoid {e' : PartialHomeomorph H H}\n    (h : e' ∈ contDiffGroupoid n I) : ContMDiffOn I I n e' e'.source :=\n  (contDiffWithinAt_localInvariantProp n).liftPropOn_of_mem_groupoid contDiffWithinAtProp_id h\n\n"}
{"name":"isLocalStructomorphOn_contDiffGroupoid_iff_aux","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\nn : WithTop ENat\ninst✝² : IsManifold I n M\nM' : Type u_5\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H M'\nIsM' : IsManifold I n M'\nf : PartialHomeomorph M M'\nhf : ChartedSpace.LiftPropOn (contDiffGroupoid n I).IsLocalStructomorphWithinAt (↑f) f.source\n⊢ ContMDiffOn I I n (↑f) f.source","decl":"theorem isLocalStructomorphOn_contDiffGroupoid_iff_aux {f : PartialHomeomorph M M'}\n    (hf : LiftPropOn (contDiffGroupoid n I).IsLocalStructomorphWithinAt f f.source) :\n    ContMDiffOn I I n f f.source := by\n  -- It suffices to show regularity near each `x`\n  apply contMDiffOn_of_locally_contMDiffOn\n  intro x hx\n  let c := chartAt H x\n  let c' := chartAt H (f x)\n  obtain ⟨-, hxf⟩ := hf x hx\n  -- Since `f` is a local structomorph, it is locally equal to some transferred element `e` of\n  -- the `contDiffGroupoid`.\n  obtain\n    ⟨e, he, he' : EqOn (c' ∘ f ∘ c.symm) e (c.symm ⁻¹' f.source ∩ e.source), hex :\n      c x ∈ e.source⟩ :=\n    hxf (by simp only [hx, mfld_simps])\n  -- We choose a convenient set `s` in `M`.\n  let s : Set M := (f.trans c').source ∩ ((c.trans e).trans c'.symm).source\n  refine ⟨s, (f.trans c').open_source.inter ((c.trans e).trans c'.symm).open_source, ?_, ?_⟩\n  · simp only [s, mfld_simps]\n    rw [← he'] <;> simp only [c, c', hx, hex, mfld_simps]\n  -- We need to show `f` is `ContMDiffOn` the domain `s ∩ f.source`.  We show this in two\n  -- steps: `f` is equal to `c'.symm ∘ e ∘ c` on that domain and that function is\n  -- `ContMDiffOn` it.\n  have H₁ : ContMDiffOn I I n (c'.symm ∘ e ∘ c) s := by\n    have hc' : ContMDiffOn I I n c'.symm _ := contMDiffOn_chart_symm\n    have he'' : ContMDiffOn I I n e _ := contMDiffOn_of_mem_contDiffGroupoid he\n    have hc : ContMDiffOn I I n c _ := contMDiffOn_chart\n    refine (hc'.comp' (he''.comp' hc)).mono ?_\n    dsimp [s, c, c']\n    mfld_set_tac\n  have H₂ : EqOn f (c'.symm ∘ e ∘ c) s := by\n    intro y hy\n    simp only [s, mfld_simps] at hy\n    have hy₁ : f y ∈ c'.source := by simp only [hy, mfld_simps]\n    have hy₂ : y ∈ c.source := by simp only [hy, mfld_simps]\n    have hy₃ : c y ∈ c.symm ⁻¹' f.source ∩ e.source := by simp only [hy, mfld_simps]\n    calc\n      f y = c'.symm (c' (f y)) := by rw [c'.left_inv hy₁]\n      _ = c'.symm (c' (f (c.symm (c y)))) := by rw [c.left_inv hy₂]\n      _ = c'.symm (e (c y)) := by rw [← he' hy₃]; rfl\n  refine (H₁.congr H₂).mono ?_\n  mfld_set_tac\n\n"}
{"name":"isLocalStructomorphOn_contDiffGroupoid_iff","module":"Mathlib.Geometry.Manifold.ContMDiff.Atlas","initialProofState":"𝕜 : Type u_1\ninst✝⁸ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁷ : NormedAddCommGroup E\ninst✝⁶ : NormedSpace 𝕜 E\nH : Type u_3\ninst✝⁵ : TopologicalSpace H\nI : ModelWithCorners 𝕜 E H\nM : Type u_4\ninst✝⁴ : TopologicalSpace M\ninst✝³ : ChartedSpace H M\nn : WithTop ENat\ninst✝² : IsManifold I n M\nM' : Type u_5\ninst✝¹ : TopologicalSpace M'\ninst✝ : ChartedSpace H M'\nIsM' : IsManifold I n M'\nf : PartialHomeomorph M M'\n⊢ Iff (ChartedSpace.LiftPropOn (contDiffGroupoid n I).IsLocalStructomorphWithinAt (↑f) f.source) (And (ContMDiffOn I I n (↑f) f.source) (ContMDiffOn I I n (↑f.symm) f.target))","decl":"/-- Let `M` and `M'` be manifolds with the same model-with-corners, `I`.  Then `f : M → M'`\nis a local structomorphism for `I`, if and only if it is manifold-`C^n` on the domain of definition\nin both directions. -/\ntheorem isLocalStructomorphOn_contDiffGroupoid_iff (f : PartialHomeomorph M M') :\n    LiftPropOn (contDiffGroupoid n I).IsLocalStructomorphWithinAt f f.source ↔\n      ContMDiffOn I I n f f.source ∧ ContMDiffOn I I n f.symm f.target := by\n  constructor\n  · intro h\n    refine ⟨isLocalStructomorphOn_contDiffGroupoid_iff_aux h,\n      isLocalStructomorphOn_contDiffGroupoid_iff_aux ?_⟩\n    -- todo: we can generalize this part of the proof to a lemma\n    intro X hX\n    let x := f.symm X\n    have hx : x ∈ f.source := f.symm.mapsTo hX\n    let c := chartAt H x\n    let c' := chartAt H X\n    obtain ⟨-, hxf⟩ := h x hx\n    refine ⟨(f.symm.continuousAt hX).continuousWithinAt, fun h2x => ?_⟩\n    obtain ⟨e, he, h2e, hef, hex⟩ :\n      ∃ e : PartialHomeomorph H H,\n        e ∈ contDiffGroupoid n I ∧\n          e.source ⊆ (c.symm ≫ₕ f ≫ₕ c').source ∧\n            EqOn (c' ∘ f ∘ c.symm) e e.source ∧ c x ∈ e.source := by\n      have h1 : c' = chartAt H (f x) := by simp only [x, c', f.right_inv hX]\n      have h2 : c' ∘ f ∘ c.symm = ⇑(c.symm ≫ₕ f ≫ₕ c') := rfl\n      have hcx : c x ∈ c.symm ⁻¹' f.source := by simp only [c, hx, mfld_simps]\n      rw [h2]\n      rw [← h1, h2, PartialHomeomorph.isLocalStructomorphWithinAt_iff'] at hxf\n      · exact hxf hcx\n      · dsimp [x, c]; mfld_set_tac\n      · apply Or.inl\n        simp only [c, hx, h1, mfld_simps]\n    have h2X : c' X = e (c (f.symm X)) := by\n      rw [← hef hex]\n      dsimp only [Function.comp_def]\n      have hfX : f.symm X ∈ c.source := by simp only [c, x, hX, mfld_simps]\n      rw [c.left_inv hfX, f.right_inv hX]\n    have h3e : EqOn (c ∘ f.symm ∘ c'.symm) e.symm (c'.symm ⁻¹' f.target ∩ e.target) := by\n      have h1 : EqOn (c.symm ≫ₕ f ≫ₕ c').symm e.symm (e.target ∩ e.target) := by\n        apply EqOn.symm\n        refine e.isImage_source_target.symm_eqOn_of_inter_eq_of_eqOn ?_ ?_\n        · rw [inter_self, inter_eq_right.mpr h2e]\n        · rw [inter_self]; exact hef.symm\n      have h2 : e.target ⊆ (c.symm ≫ₕ f ≫ₕ c').target := by\n        intro x hx; rw [← e.right_inv hx, ← hef (e.symm.mapsTo hx)]\n        exact PartialHomeomorph.mapsTo _ (h2e <| e.symm.mapsTo hx)\n      rw [inter_self] at h1\n      rwa [inter_eq_right.mpr]\n      refine h2.trans ?_\n      mfld_set_tac\n    refine ⟨e.symm, StructureGroupoid.symm _ he, h3e, ?_⟩\n    rw [h2X]; exact e.mapsTo hex\n  · -- We now show the converse: a partial homeomorphism `f : M → M'` which is `C^n` in both\n    -- directions is a local structomorphism.  We do this by proposing\n    -- `((chart_at H x).symm.trans f).trans (chart_at H (f x))` as a candidate for a structomorphism\n    -- of `H`.\n    rintro ⟨h₁, h₂⟩ x hx\n    refine ⟨(h₁ x hx).continuousWithinAt, ?_⟩\n    let c := chartAt H x\n    let c' := chartAt H (f x)\n    rintro (hx' : c x ∈ c.symm ⁻¹' f.source)\n    -- propose `(c.symm.trans f).trans c'` as a candidate for a local structomorphism of `H`\n    refine ⟨(c.symm.trans f).trans c', ⟨?_, ?_⟩, (?_ : EqOn (c' ∘ f ∘ c.symm) _ _), ?_⟩\n    · -- regularity of the candidate local structomorphism in the forward direction\n      intro y hy\n      simp only [mfld_simps] at hy\n      have H : ContMDiffWithinAt I I n f (f ≫ₕ c').source ((extChartAt I x).symm y) := by\n        refine (h₁ ((extChartAt I x).symm y) ?_).mono ?_\n        · simp only [c, hy, mfld_simps]\n        · mfld_set_tac\n      have hy' : (extChartAt I x).symm y ∈ c.source := by simp only [c, hy, mfld_simps]\n      have hy'' : f ((extChartAt I x).symm y) ∈ c'.source := by\n        simp only [c, hy, mfld_simps]\n      rw [contMDiffWithinAt_iff_of_mem_source hy' hy''] at H\n      convert H.2.mono _\n      · simp only [c, hy, mfld_simps]\n      · dsimp [c, c']; mfld_set_tac\n    · -- regularity of the candidate local structomorphism in the reverse direction\n      intro y hy\n      simp only [mfld_simps] at hy\n      have H : ContMDiffWithinAt I I n f.symm (f.symm ≫ₕ c).source\n          ((extChartAt I (f x)).symm y) := by\n        refine (h₂ ((extChartAt I (f x)).symm y) ?_).mono ?_\n        · simp only [c', hy, mfld_simps]\n        · mfld_set_tac\n      have hy' : (extChartAt I (f x)).symm y ∈ c'.source := by simp only [c', hy, mfld_simps]\n      have hy'' : f.symm ((extChartAt I (f x)).symm y) ∈ c.source := by\n        simp only [c', hy, mfld_simps]\n      rw [contMDiffWithinAt_iff_of_mem_source hy' hy''] at H\n      convert H.2.mono _\n      · simp only [c', hy, mfld_simps]\n      · dsimp [c, c']; mfld_set_tac\n    -- now check the candidate local structomorphism agrees with `f` where it is supposed to\n    · simp only [mfld_simps]; apply eqOn_refl\n    · simp only [c, c', hx', mfld_simps]\n\n"}
