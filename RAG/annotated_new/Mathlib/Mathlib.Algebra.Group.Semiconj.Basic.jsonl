{"name":"AddSemiconjBy.neg_neg_symm_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : SubtractionMonoid G\na x y : G\n⊢ Iff (AddSemiconjBy (Neg.neg a) (Neg.neg x) (Neg.neg y)) (AddSemiconjBy a y x)","decl":"@[to_additive (attr := simp)]\ntheorem inv_inv_symm_iff : SemiconjBy a⁻¹ x⁻¹ y⁻¹ ↔ SemiconjBy a y x := by\n  simp_rw [SemiconjBy, ← mul_inv_rev, inv_inj, eq_comm]\n\n"}
{"name":"SemiconjBy.inv_inv_symm_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : DivisionMonoid G\na x y : G\n⊢ Iff (SemiconjBy (Inv.inv a) (Inv.inv x) (Inv.inv y)) (SemiconjBy a y x)","decl":"@[to_additive (attr := simp)]\ntheorem inv_inv_symm_iff : SemiconjBy a⁻¹ x⁻¹ y⁻¹ ↔ SemiconjBy a y x := by\n  simp_rw [SemiconjBy, ← mul_inv_rev, inv_inj, eq_comm]\n\n"}
{"name":"SemiconjBy.inv_inv_symm","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : DivisionMonoid G\na x y : G\na✝ : SemiconjBy a y x\n⊢ SemiconjBy (Inv.inv a) (Inv.inv x) (Inv.inv y)","decl":"@[to_additive] alias ⟨_, inv_inv_symm⟩ := inv_inv_symm_iff\n\n"}
{"name":"AddSemiconjBy.neg_neg_symm","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : SubtractionMonoid G\na x y : G\na✝ : AddSemiconjBy a y x\n⊢ AddSemiconjBy (Neg.neg a) (Neg.neg x) (Neg.neg y)","decl":"@[to_additive] alias ⟨_, inv_inv_symm⟩ := inv_inv_symm_iff\n\n"}
{"name":"AddSemiconjBy.neg_symm_left_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na x y : G\n⊢ Iff (AddSemiconjBy (Neg.neg a) y x) (AddSemiconjBy a x y)","decl":"@[to_additive (attr := simp)] lemma inv_symm_left_iff : SemiconjBy a⁻¹ y x ↔ SemiconjBy a x y := by\n  simp_rw [SemiconjBy, eq_mul_inv_iff_mul_eq, mul_assoc, inv_mul_eq_iff_eq_mul, eq_comm]\n\n"}
{"name":"SemiconjBy.inv_symm_left_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\na x y : G\n⊢ Iff (SemiconjBy (Inv.inv a) y x) (SemiconjBy a x y)","decl":"@[to_additive (attr := simp)] lemma inv_symm_left_iff : SemiconjBy a⁻¹ y x ↔ SemiconjBy a x y := by\n  simp_rw [SemiconjBy, eq_mul_inv_iff_mul_eq, mul_assoc, inv_mul_eq_iff_eq_mul, eq_comm]\n\n"}
{"name":"SemiconjBy.inv_symm_left","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\na x y : G\na✝ : SemiconjBy a x y\n⊢ SemiconjBy (Inv.inv a) y x","decl":"@[to_additive] alias ⟨_, inv_symm_left⟩ := inv_symm_left_iff\n\n"}
{"name":"AddSemiconjBy.neg_symm_left","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na x y : G\na✝ : AddSemiconjBy a x y\n⊢ AddSemiconjBy (Neg.neg a) y x","decl":"@[to_additive] alias ⟨_, inv_symm_left⟩ := inv_symm_left_iff\n\n"}
{"name":"SemiconjBy.inv_right_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\na x y : G\n⊢ Iff (SemiconjBy a (Inv.inv x) (Inv.inv y)) (SemiconjBy a x y)","decl":"@[to_additive (attr := simp)] lemma inv_right_iff : SemiconjBy a x⁻¹ y⁻¹ ↔ SemiconjBy a x y := by\n  rw [← inv_symm_left_iff, inv_inv_symm_iff]\n\n"}
{"name":"AddSemiconjBy.neg_right_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na x y : G\n⊢ Iff (AddSemiconjBy a (Neg.neg x) (Neg.neg y)) (AddSemiconjBy a x y)","decl":"@[to_additive (attr := simp)] lemma inv_right_iff : SemiconjBy a x⁻¹ y⁻¹ ↔ SemiconjBy a x y := by\n  rw [← inv_symm_left_iff, inv_inv_symm_iff]\n\n"}
{"name":"SemiconjBy.inv_right","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\na x y : G\na✝ : SemiconjBy a x y\n⊢ SemiconjBy a (Inv.inv x) (Inv.inv y)","decl":"@[to_additive] alias ⟨_, inv_right⟩ := inv_right_iff\n\n"}
{"name":"AddSemiconjBy.neg_right","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na x y : G\na✝ : AddSemiconjBy a x y\n⊢ AddSemiconjBy a (Neg.neg x) (Neg.neg y)","decl":"@[to_additive] alias ⟨_, inv_right⟩ := inv_right_iff\n\n"}
{"name":"SemiconjBy.zpow_right","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\na x y : G\nh : SemiconjBy a x y\nm : Int\n⊢ SemiconjBy a (HPow.hPow x m) (HPow.hPow y m)","decl":"@[to_additive (attr := simp)] lemma zpow_right (h : SemiconjBy a x y) :\n    ∀ m : ℤ, SemiconjBy a (x ^ m) (y ^ m)\n  | (n : ℕ)    => by simp [zpow_natCast, h.pow_right n]\n  | .negSucc n => by\n    simp only [zpow_negSucc, inv_right_iff]\n    apply pow_right h\n\n"}
{"name":"AddSemiconjBy.zsmul_right","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na x y : G\nh : AddSemiconjBy a x y\nm : Int\n⊢ AddSemiconjBy a (HSMul.hSMul m x) (HSMul.hSMul m y)","decl":"@[to_additive (attr := simp)] lemma zpow_right (h : SemiconjBy a x y) :\n    ∀ m : ℤ, SemiconjBy a (x ^ m) (y ^ m)\n  | (n : ℕ)    => by simp [zpow_natCast, h.pow_right n]\n  | .negSucc n => by\n    simp only [zpow_negSucc, inv_right_iff]\n    apply pow_right h\n\n"}
{"name":"SemiconjBy.eq_one_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : Group G\na x y : G\nh : SemiconjBy a x y\n⊢ Iff (Eq x 1) (Eq y 1)","decl":"variable (a) in\n@[to_additive] lemma eq_one_iff (h : SemiconjBy a x y): x = 1 ↔ y = 1 := by\n  rw [← conj_eq_one_iff (a := a) (b := x), h.eq, mul_inv_cancel_right]\n\n"}
{"name":"AddSemiconjBy.eq_zero_iff","module":"Mathlib.Algebra.Group.Semiconj.Basic","initialProofState":"G : Type u_1\ninst✝ : AddGroup G\na x y : G\nh : AddSemiconjBy a x y\n⊢ Iff (Eq x 0) (Eq y 0)","decl":"variable (a) in\n@[to_additive] lemma eq_one_iff (h : SemiconjBy a x y): x = 1 ↔ y = 1 := by\n  rw [← conj_eq_one_iff (a := a) (b := x), h.eq, mul_inv_cancel_right]\n\n"}
