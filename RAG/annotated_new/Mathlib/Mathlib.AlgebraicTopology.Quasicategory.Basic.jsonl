{"name":"SSet.Quasicategory.hornFilling'","module":"Mathlib.AlgebraicTopology.Quasicategory.Basic","initialProofState":"S : SSet\nself : S.Quasicategory\nn : Nat\ni : Fin (HAdd.hAdd n 3)\nσ₀ : Quiver.Hom (SSet.horn (HAdd.hAdd n 2) i) S\n_h0 : LT.lt 0 i\n_hn : LT.lt i (Fin.last (HAdd.hAdd n 2))\n⊢ Exists fun σ => Eq σ₀ (CategoryTheory.CategoryStruct.comp (SSet.hornInclusion (HAdd.hAdd n 2) i) σ)","decl":"/-- A simplicial set `S` is a *quasicategory* if it satisfies the following horn-filling condition:\nfor every `n : ℕ` and `0 < i < n`,\nevery map of simplicial sets `σ₀ : Λ[n, i] → S` can be extended to a map `σ : Δ[n] → S`.\n-/\n@[kerodon 003A]\nclass Quasicategory (S : SSet) : Prop where\n  hornFilling' : ∀ ⦃n : ℕ⦄ ⦃i : Fin (n+3)⦄ (σ₀ : Λ[n+2, i] ⟶ S)\n    (_h0 : 0 < i) (_hn : i < Fin.last (n+2)),\n      ∃ σ : Δ[n+2] ⟶ S, σ₀ = hornInclusion (n+2) i ≫ σ\n\n"}
{"name":"SSet.Quasicategory.hornFilling","module":"Mathlib.AlgebraicTopology.Quasicategory.Basic","initialProofState":"S : SSet\ninst✝ : S.Quasicategory\nn : Nat\ni : Fin (HAdd.hAdd n 1)\nh0 : LT.lt 0 i\nhn : LT.lt i (Fin.last n)\nσ₀ : Quiver.Hom (SSet.horn n i) S\n⊢ Exists fun σ => Eq σ₀ (CategoryTheory.CategoryStruct.comp (SSet.hornInclusion n i) σ)","decl":"lemma Quasicategory.hornFilling {S : SSet} [Quasicategory S] ⦃n : ℕ⦄ ⦃i : Fin (n+1)⦄\n    (h0 : 0 < i) (hn : i < Fin.last n)\n    (σ₀ : Λ[n, i] ⟶ S) : ∃ σ : Δ[n] ⟶ S, σ₀ = hornInclusion n i ≫ σ := by\n  cases n using Nat.casesAuxOn with\n  | zero => simp [Fin.lt_iff_val_lt_val] at hn\n  | succ n =>\n  cases n using Nat.casesAuxOn with\n  | zero =>\n    simp only [Fin.lt_iff_val_lt_val, Fin.val_zero, Fin.val_last, zero_add, Nat.lt_one_iff] at h0 hn\n    simp [hn] at h0\n  | succ n => exact Quasicategory.hornFilling' σ₀ h0 hn\n\n"}
{"name":"SSet.instQuasicategoryOfKanComplex","module":"Mathlib.AlgebraicTopology.Quasicategory.Basic","initialProofState":"S : SSet\ninst✝ : S.KanComplex\n⊢ S.Quasicategory","decl":"/-- Every Kan complex is a quasicategory. -/\n@[kerodon 003C]\ninstance (S : SSet) [KanComplex S] : Quasicategory S where\n  hornFilling' _ _ σ₀ _ _ := KanComplex.hornFilling σ₀\n\n"}
{"name":"SSet.quasicategory_of_filler","module":"Mathlib.AlgebraicTopology.Quasicategory.Basic","initialProofState":"S : SSet\nfiller : ∀ ⦃n : Nat⦄ ⦃i : Fin (HAdd.hAdd n 3)⦄ (σ₀ : Quiver.Hom (SSet.horn (HAdd.hAdd n 2) i) S), LT.lt 0 i → LT.lt i (Fin.last (HAdd.hAdd n 2)) → Exists fun σ => ∀ (j : Fin (HAdd.hAdd n 3)) (h : Ne j i), Eq (CategoryTheory.SimplicialObject.δ S j σ) (σ₀.app { unop := SimplexCategory.mk (HAdd.hAdd n 1) } (SSet.horn.face i j h))\n⊢ S.Quasicategory","decl":"lemma quasicategory_of_filler (S : SSet)\n    (filler : ∀ ⦃n : ℕ⦄ ⦃i : Fin (n+3)⦄ (σ₀ : Λ[n+2, i] ⟶ S)\n      (_h0 : 0 < i) (_hn : i < Fin.last (n+2)),\n      ∃ σ : S _[n+2], ∀ (j) (h : j ≠ i), S.δ j σ = σ₀.app _ (horn.face i j h)) :\n    Quasicategory S where\n  hornFilling' n i σ₀ h₀ hₙ := by\n    obtain ⟨σ, h⟩ := filler σ₀ h₀ hₙ\n    refine ⟨(S.yonedaEquiv _).symm σ, ?_⟩\n    apply horn.hom_ext\n    intro j hj\n    rw [← h j hj, NatTrans.comp_app]\n    rfl\n\n"}
