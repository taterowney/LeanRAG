{"name":"PresheafOfModules.freeObj_obj","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\nX : Opposite C\n⊢ Eq ((PresheafOfModules.freeObj F).obj X) ((ModuleCat.free ↑(R.obj X)).obj (F.obj X))","decl":"variable {R} in\n/-- Given a presheaf of types `F : Cᵒᵖ ⥤ Type u`, this is the presheaf\nof modules over `R` which sends `X : Cᵒᵖ` to the free `R.obj X`-module on `F.obj X`. -/\n@[simps]\nnoncomputable def freeObj (F : Cᵒᵖ ⥤ Type u) : PresheafOfModules.{u} R where\n  obj X := (ModuleCat.free (R.obj X)).obj (F.obj X)\n  map {X Y} f := ModuleCat.freeDesc (fun x ↦ ModuleCat.freeMk (F.map f x))\n  map_id := by aesop\n\n"}
{"name":"PresheafOfModules.freeObj_map","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\nX Y : Opposite C\nf : Quiver.Hom X Y\n⊢ Eq ((PresheafOfModules.freeObj F).map f) (ModuleCat.freeDesc fun x => ModuleCat.freeMk (F.map f x))","decl":"variable {R} in\n/-- Given a presheaf of types `F : Cᵒᵖ ⥤ Type u`, this is the presheaf\nof modules over `R` which sends `X : Cᵒᵖ` to the free `R.obj X`-module on `F.obj X`. -/\n@[simps]\nnoncomputable def freeObj (F : Cᵒᵖ ⥤ Type u) : PresheafOfModules.{u} R where\n  obj X := (ModuleCat.free (R.obj X)).obj (F.obj X)\n  map {X Y} f := ModuleCat.freeDesc (fun x ↦ ModuleCat.freeMk (F.map f x))\n  map_id := by aesop\n\n"}
{"name":"PresheafOfModules.free_map_app","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF G : CategoryTheory.Functor (Opposite C) (Type u)\nφ : Quiver.Hom F G\nX : Opposite C\n⊢ Eq (((PresheafOfModules.free R).map φ).app X) ((ModuleCat.free ↑(R.obj X)).map (φ.app X))","decl":"/-- The free presheaf of modules functor `(Cᵒᵖ ⥤ Type u) ⥤ PresheafOfModules.{u} R`. -/\n@[simps]\nnoncomputable def free : (Cᵒᵖ ⥤ Type u) ⥤ PresheafOfModules.{u} R where\n  obj := freeObj\n  map {F G} φ :=\n    { app := fun X ↦ (ModuleCat.free (R.obj X)).map (φ.app X)\n      naturality := fun {X Y} f ↦ by\n        dsimp\n        ext x\n        simp [FunctorToTypes.naturality] }\n\n"}
{"name":"PresheafOfModules.free_obj","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\n⊢ Eq ((PresheafOfModules.free R).obj F) (PresheafOfModules.freeObj F)","decl":"/-- The free presheaf of modules functor `(Cᵒᵖ ⥤ Type u) ⥤ PresheafOfModules.{u} R`. -/\n@[simps]\nnoncomputable def free : (Cᵒᵖ ⥤ Type u) ⥤ PresheafOfModules.{u} R where\n  obj := freeObj\n  map {F G} φ :=\n    { app := fun X ↦ (ModuleCat.free (R.obj X)).map (φ.app X)\n      naturality := fun {X Y} f ↦ by\n        dsimp\n        ext x\n        simp [FunctorToTypes.naturality] }\n\n"}
{"name":"PresheafOfModules.freeObjDesc_app","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\nG : PresheafOfModules R\nφ : Quiver.Hom F (G.presheaf.comp (CategoryTheory.forget Ab))\nX : Opposite C\n⊢ Eq ((PresheafOfModules.freeObjDesc φ).app X) (ModuleCat.freeDesc (φ.app X))","decl":"/-- The morphism of presheaves of modules `freeObj F ⟶ G` corresponding to\na morphism `F ⟶ G.presheaf ⋙ forget _` of presheaves of types. -/\n@[simps]\nnoncomputable def freeObjDesc (φ : F ⟶ G.presheaf ⋙ forget _) : freeObj F ⟶ G where\n  app X := ModuleCat.freeDesc (φ.app X)\n  naturality {X Y} f := by\n    dsimp\n    ext x\n    simpa using NatTrans.naturality_apply φ f x\n\n"}
{"name":"PresheafOfModules.freeAdjunctionUnit_app","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\nX : Opposite C\nx : F.obj X\n⊢ Eq ((PresheafOfModules.freeAdjunctionUnit R F).app X x) (ModuleCat.freeMk x)","decl":"variable (F R) in\n/-- The unit of `PresheafOfModules.freeAdjunction`. -/\n@[simps]\nnoncomputable def freeAdjunctionUnit : F ⟶ (freeObj (R := R) F).presheaf ⋙ forget _ where\n  app X x := ModuleCat.freeMk x\n  naturality X Y f := by ext; simp [presheaf]\n\n"}
{"name":"PresheafOfModules.free_hom_ext","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\nG : PresheafOfModules R\nψ ψ' : Quiver.Hom (PresheafOfModules.freeObj F) G\nh : Eq (CategoryTheory.CategoryStruct.comp (PresheafOfModules.freeAdjunctionUnit R F) (CategoryTheory.whiskerRight ((PresheafOfModules.toPresheaf R).map ψ) (CategoryTheory.forget Ab))) (CategoryTheory.CategoryStruct.comp (PresheafOfModules.freeAdjunctionUnit R F) (CategoryTheory.whiskerRight ((PresheafOfModules.toPresheaf R).map ψ') (CategoryTheory.forget Ab)))\n⊢ Eq ψ ψ'","decl":"lemma free_hom_ext {ψ ψ' : freeObj F ⟶ G}\n    (h : freeAdjunctionUnit R F ≫ whiskerRight ((toPresheaf _).map ψ) _ =\n      freeAdjunctionUnit R F ≫ whiskerRight ((toPresheaf _).map ψ') _ ) : ψ = ψ' :=\n  freeHomEquiv.injective h\n\n"}
{"name":"PresheafOfModules.freeAdjunction_homEquiv","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\nG : PresheafOfModules R\n⊢ Eq ((PresheafOfModules.freeAdjunction R).homEquiv F G) PresheafOfModules.freeHomEquiv","decl":"variable (F G) in\n@[simp]\nlemma freeAdjunction_homEquiv : (freeAdjunction R).homEquiv F G = freeHomEquiv := by\n  simp [freeAdjunction, Adjunction.mkOfHomEquiv_homEquiv]\n\n"}
{"name":"PresheafOfModules.freeAdjunction_unit_app","module":"Mathlib.Algebra.Category.ModuleCat.Presheaf.Free","initialProofState":"C : Type u₁\ninst✝ : CategoryTheory.Category.{v₁, u₁} C\nR : CategoryTheory.Functor (Opposite C) RingCat\nF : CategoryTheory.Functor (Opposite C) (Type u)\n⊢ Eq ((PresheafOfModules.freeAdjunction R).unit.app F) (PresheafOfModules.freeAdjunctionUnit R F)","decl":"variable (R F) in\n@[simp]\nlemma freeAdjunction_unit_app :\n    (freeAdjunction R).unit.app F = freeAdjunctionUnit R F := rfl\n\n"}
