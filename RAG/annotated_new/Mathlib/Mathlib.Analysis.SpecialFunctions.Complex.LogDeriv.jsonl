{"name":"Complex.isOpenMap_exp","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"⊢ IsOpenMap Complex.exp","decl":"theorem isOpenMap_exp : IsOpenMap exp :=\n  isOpenMap_of_hasStrictDerivAt hasStrictDerivAt_exp exp_ne_zero\n\n"}
{"name":"Complex.hasStrictDerivAt_log","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"x : Complex\nh : Membership.mem Complex.slitPlane x\n⊢ HasStrictDerivAt Complex.log (Inv.inv x) x","decl":"theorem hasStrictDerivAt_log {x : ℂ} (h : x ∈ slitPlane) : HasStrictDerivAt log x⁻¹ x :=\n  have h0 : x ≠ 0 := slitPlane_ne_zero h\n  expPartialHomeomorph.hasStrictDerivAt_symm h h0 <| by\n    simpa [exp_log h0] using hasStrictDerivAt_exp (log x)\n\n"}
{"name":"Complex.hasDerivAt_log","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"z : Complex\nhz : Membership.mem Complex.slitPlane z\n⊢ HasDerivAt Complex.log (Inv.inv z) z","decl":"lemma hasDerivAt_log {z : ℂ} (hz : z ∈ slitPlane) : HasDerivAt log z⁻¹ z :=\n  HasStrictDerivAt.hasDerivAt <| hasStrictDerivAt_log hz\n\n"}
{"name":"Complex.differentiableAt_log","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"z : Complex\nhz : Membership.mem Complex.slitPlane z\n⊢ DifferentiableAt Complex Complex.log z","decl":"@[fun_prop]\nlemma differentiableAt_log {z : ℂ} (hz : z ∈ slitPlane) : DifferentiableAt ℂ log z :=\n  (hasDerivAt_log hz).differentiableAt\n\n"}
{"name":"Complex.hasStrictFDerivAt_log_real","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"x : Complex\nh : Membership.mem Complex.slitPlane x\n⊢ HasStrictFDerivAt Complex.log (HSMul.hSMul (Inv.inv x) 1) x","decl":"@[fun_prop]\ntheorem hasStrictFDerivAt_log_real {x : ℂ} (h : x ∈ slitPlane) :\n    HasStrictFDerivAt log (x⁻¹ • (1 : ℂ →L[ℝ] ℂ)) x :=\n  (hasStrictDerivAt_log h).complexToReal_fderiv\n\n"}
{"name":"Complex.contDiffAt_log","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"x : Complex\nh : Membership.mem Complex.slitPlane x\nn : WithTop ENat\n⊢ ContDiffAt Complex n Complex.log x","decl":"theorem contDiffAt_log {x : ℂ} (h : x ∈ slitPlane) {n : WithTop ℕ∞} : ContDiffAt ℂ n log x :=\n  expPartialHomeomorph.contDiffAt_symm_deriv (exp_ne_zero <| log x) h (hasDerivAt_exp _)\n    contDiff_exp.contDiffAt\n\n"}
{"name":"HasStrictFDerivAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\nf' : ContinuousLinearMap (RingHom.id Complex) E Complex\nx : E\nh₁ : HasStrictFDerivAt f f' x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasStrictFDerivAt (fun t => Complex.log (f t)) (HSMul.hSMul (Inv.inv (f x)) f') x","decl":"theorem HasStrictFDerivAt.clog {f : E → ℂ} {f' : E →L[ℂ] ℂ} {x : E} (h₁ : HasStrictFDerivAt f f' x)\n    (h₂ : f x ∈ slitPlane) : HasStrictFDerivAt (fun t => log (f t)) ((f x)⁻¹ • f') x :=\n  (hasStrictDerivAt_log h₂).comp_hasStrictFDerivAt x h₁\n\n"}
{"name":"HasStrictDerivAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Complex → Complex\nf' x : Complex\nh₁ : HasStrictDerivAt f f' x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasStrictDerivAt (fun t => Complex.log (f t)) (HDiv.hDiv f' (f x)) x","decl":"theorem HasStrictDerivAt.clog {f : ℂ → ℂ} {f' x : ℂ} (h₁ : HasStrictDerivAt f f' x)\n    (h₂ : f x ∈ slitPlane) : HasStrictDerivAt (fun t => log (f t)) (f' / f x) x := by\n  rw [div_eq_inv_mul]; exact (hasStrictDerivAt_log h₂).comp x h₁\n\n"}
{"name":"HasStrictDerivAt.clog_real","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Real → Complex\nx : Real\nf' : Complex\nh₁ : HasStrictDerivAt f f' x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasStrictDerivAt (fun t => Complex.log (f t)) (HDiv.hDiv f' (f x)) x","decl":"theorem HasStrictDerivAt.clog_real {f : ℝ → ℂ} {x : ℝ} {f' : ℂ} (h₁ : HasStrictDerivAt f f' x)\n    (h₂ : f x ∈ slitPlane) : HasStrictDerivAt (fun t => log (f t)) (f' / f x) x := by\n  simpa only [div_eq_inv_mul] using (hasStrictFDerivAt_log_real h₂).comp_hasStrictDerivAt x h₁\n\n"}
{"name":"HasFDerivAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\nf' : ContinuousLinearMap (RingHom.id Complex) E Complex\nx : E\nh₁ : HasFDerivAt f f' x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasFDerivAt (fun t => Complex.log (f t)) (HSMul.hSMul (Inv.inv (f x)) f') x","decl":"theorem HasFDerivAt.clog {f : E → ℂ} {f' : E →L[ℂ] ℂ} {x : E} (h₁ : HasFDerivAt f f' x)\n    (h₂ : f x ∈ slitPlane) : HasFDerivAt (fun t => log (f t)) ((f x)⁻¹ • f') x :=\n  (hasStrictDerivAt_log h₂).hasDerivAt.comp_hasFDerivAt x h₁\n\n"}
{"name":"HasDerivAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Complex → Complex\nf' x : Complex\nh₁ : HasDerivAt f f' x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasDerivAt (fun t => Complex.log (f t)) (HDiv.hDiv f' (f x)) x","decl":"theorem HasDerivAt.clog {f : ℂ → ℂ} {f' x : ℂ} (h₁ : HasDerivAt f f' x)\n    (h₂ : f x ∈ slitPlane) : HasDerivAt (fun t => log (f t)) (f' / f x) x := by\n  rw [div_eq_inv_mul]; exact (hasStrictDerivAt_log h₂).hasDerivAt.comp x h₁\n\n"}
{"name":"HasDerivAt.clog_real","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Real → Complex\nx : Real\nf' : Complex\nh₁ : HasDerivAt f f' x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasDerivAt (fun t => Complex.log (f t)) (HDiv.hDiv f' (f x)) x","decl":"theorem HasDerivAt.clog_real {f : ℝ → ℂ} {x : ℝ} {f' : ℂ} (h₁ : HasDerivAt f f' x)\n    (h₂ : f x ∈ slitPlane) : HasDerivAt (fun t => log (f t)) (f' / f x) x := by\n  simpa only [div_eq_inv_mul] using\n    (hasStrictFDerivAt_log_real h₂).hasFDerivAt.comp_hasDerivAt x h₁\n\n"}
{"name":"DifferentiableAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\nx : E\nh₁ : DifferentiableAt Complex f x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ DifferentiableAt Complex (fun t => Complex.log (f t)) x","decl":"theorem DifferentiableAt.clog {f : E → ℂ} {x : E} (h₁ : DifferentiableAt ℂ f x)\n    (h₂ : f x ∈ slitPlane) : DifferentiableAt ℂ (fun t => log (f t)) x :=\n  (h₁.hasFDerivAt.clog h₂).differentiableAt\n\n"}
{"name":"HasFDerivWithinAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\nf' : ContinuousLinearMap (RingHom.id Complex) E Complex\ns : Set E\nx : E\nh₁ : HasFDerivWithinAt f f' s x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasFDerivWithinAt (fun t => Complex.log (f t)) (HSMul.hSMul (Inv.inv (f x)) f') s x","decl":"theorem HasFDerivWithinAt.clog {f : E → ℂ} {f' : E →L[ℂ] ℂ} {s : Set E} {x : E}\n    (h₁ : HasFDerivWithinAt f f' s x) (h₂ : f x ∈ slitPlane) :\n    HasFDerivWithinAt (fun t => log (f t)) ((f x)⁻¹ • f') s x :=\n  (hasStrictDerivAt_log h₂).hasDerivAt.comp_hasFDerivWithinAt x h₁\n\n"}
{"name":"HasDerivWithinAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Complex → Complex\nf' x : Complex\ns : Set Complex\nh₁ : HasDerivWithinAt f f' s x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasDerivWithinAt (fun t => Complex.log (f t)) (HDiv.hDiv f' (f x)) s x","decl":"theorem HasDerivWithinAt.clog {f : ℂ → ℂ} {f' x : ℂ} {s : Set ℂ} (h₁ : HasDerivWithinAt f f' s x)\n    (h₂ : f x ∈ slitPlane) : HasDerivWithinAt (fun t => log (f t)) (f' / f x) s x := by\n  rw [div_eq_inv_mul]\n  exact (hasStrictDerivAt_log h₂).hasDerivAt.comp_hasDerivWithinAt x h₁\n\n"}
{"name":"HasDerivWithinAt.clog_real","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Real → Complex\ns : Set Real\nx : Real\nf' : Complex\nh₁ : HasDerivWithinAt f f' s x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ HasDerivWithinAt (fun t => Complex.log (f t)) (HDiv.hDiv f' (f x)) s x","decl":"theorem HasDerivWithinAt.clog_real {f : ℝ → ℂ} {s : Set ℝ} {x : ℝ} {f' : ℂ}\n    (h₁ : HasDerivWithinAt f f' s x) (h₂ : f x ∈ slitPlane) :\n    HasDerivWithinAt (fun t => log (f t)) (f' / f x) s x := by\n  simpa only [div_eq_inv_mul] using\n    (hasStrictFDerivAt_log_real h₂).hasFDerivAt.comp_hasDerivWithinAt x h₁\n\n"}
{"name":"DifferentiableWithinAt.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\ns : Set E\nx : E\nh₁ : DifferentiableWithinAt Complex f s x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ DifferentiableWithinAt Complex (fun t => Complex.log (f t)) s x","decl":"theorem DifferentiableWithinAt.clog {f : E → ℂ} {s : Set E} {x : E}\n    (h₁ : DifferentiableWithinAt ℂ f s x) (h₂ : f x ∈ slitPlane) :\n    DifferentiableWithinAt ℂ (fun t => log (f t)) s x :=\n  (h₁.hasFDerivWithinAt.clog h₂).differentiableWithinAt\n\n"}
{"name":"DifferentiableOn.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\ns : Set E\nh₁ : DifferentiableOn Complex f s\nh₂ : ∀ (x : E), Membership.mem s x → Membership.mem Complex.slitPlane (f x)\n⊢ DifferentiableOn Complex (fun t => Complex.log (f t)) s","decl":"theorem DifferentiableOn.clog {f : E → ℂ} {s : Set E} (h₁ : DifferentiableOn ℂ f s)\n    (h₂ : ∀ x ∈ s, f x ∈ slitPlane) : DifferentiableOn ℂ (fun t => log (f t)) s :=\n  fun x hx => (h₁ x hx).clog (h₂ x hx)\n\n"}
{"name":"Differentiable.clog","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"E : Type u_2\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace Complex E\nf : E → Complex\nh₁ : Differentiable Complex f\nh₂ : ∀ (x : E), Membership.mem Complex.slitPlane (f x)\n⊢ Differentiable Complex fun t => Complex.log (f t)","decl":"theorem Differentiable.clog {f : E → ℂ} (h₁ : Differentiable ℂ f)\n    (h₂ : ∀ x, f x ∈ slitPlane) : Differentiable ℂ fun t => log (f t) := fun x =>\n  (h₁ x).clog (h₂ x)\n\n"}
{"name":"Complex.deriv_log_comp_eq_logDeriv","module":"Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv","initialProofState":"f : Complex → Complex\nx : Complex\nh₁ : DifferentiableAt Complex f x\nh₂ : Membership.mem Complex.slitPlane (f x)\n⊢ Eq (deriv (Function.comp Complex.log f) x) (logDeriv f x)","decl":"/-- The derivative of `log ∘ f` is the logarithmic derivative provided `f` is differentiable and\nwe are on the slitPlane. -/\nlemma Complex.deriv_log_comp_eq_logDeriv {f : ℂ → ℂ} {x : ℂ} (h₁ : DifferentiableAt ℂ f x)\n    (h₂ : f x ∈ Complex.slitPlane) : deriv (Complex.log ∘ f) x = logDeriv f x := by\n  have A := (HasDerivAt.clog h₁.hasDerivAt h₂).deriv\n  rw [← h₁.hasDerivAt.deriv] at A\n  simp only [logDeriv, Pi.div_apply, ← A, Function.comp_def]\n\n"}
