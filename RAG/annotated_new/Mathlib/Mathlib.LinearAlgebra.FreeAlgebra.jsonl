{"name":"FreeAlgebra.instFree","module":"Mathlib.LinearAlgebra.FreeAlgebra","initialProofState":"R : Type u\nX : Type v\ninst✝ : CommSemiring R\n⊢ Module.Free R (FreeAlgebra R X)","decl":"instance : Module.Free R (FreeAlgebra R X) :=\n  have : Module.Free R (MonoidAlgebra R (FreeMonoid X)) := Module.Free.finsupp _ _ _\n  Module.Free.of_equiv (equivMonoidAlgebraFreeMonoid (R := R) (X := X)).symm.toLinearEquiv\n\n"}
{"name":"FreeAlgebra.rank_eq","module":"Mathlib.LinearAlgebra.FreeAlgebra","initialProofState":"R : Type u\nX : Type v\ninst✝¹ : CommRing R\ninst✝ : Nontrivial R\n⊢ Eq (Module.rank R (FreeAlgebra R X)) (Cardinal.lift.{u, v} (Cardinal.mk (List X)))","decl":"theorem rank_eq [CommRing R] [Nontrivial R] :\n    Module.rank R (FreeAlgebra R X) = Cardinal.lift.{u} (Cardinal.mk (List X)) := by\n  rw [← (Basis.mk_eq_rank'.{_,_,_,u} (basisFreeMonoid R X)).trans (Cardinal.lift_id _),\n    Cardinal.lift_umax.{v, u}, FreeMonoid]\n\n"}
{"name":"Algebra.rank_adjoin_le","module":"Mathlib.LinearAlgebra.FreeAlgebra","initialProofState":"R : Type u\nS : Type v\ninst✝² : CommRing R\ninst✝¹ : Ring S\ninst✝ : Algebra R S\ns : Set S\n⊢ LE.le (Module.rank R (Subtype fun x => Membership.mem (Algebra.adjoin R s) x)) (Max.max (Cardinal.mk ↑s) Cardinal.aleph0)","decl":"theorem Algebra.rank_adjoin_le {R : Type u} {S : Type v} [CommRing R] [Ring S] [Algebra R S]\n    (s : Set S) : Module.rank R (adjoin R s) ≤ max #s ℵ₀ := by\n  rw [adjoin_eq_range_freeAlgebra_lift]\n  cases subsingleton_or_nontrivial R\n  · rw [rank_subsingleton]; exact one_le_aleph0.trans (le_max_right _ _)\n  rw [← lift_le.{max u v}]\n  refine (lift_rank_range_le (FreeAlgebra.lift R ((↑) : s → S)).toLinearMap).trans ?_\n  rw [FreeAlgebra.rank_eq, lift_id'.{v,u}, lift_umax.{v,u}, lift_le, max_comm]\n  exact mk_list_le_max _\n"}
