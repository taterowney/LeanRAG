{"name":"Nat.Up.next","module":"Mathlib.Deprecated.ByteArray","initialProofState":"ub i : Nat\nh : LT.lt i ub\n⊢ ub.Up (HAdd.hAdd i 1) i","decl":"theorem Up.next {ub i} (h : i < ub) : Up ub (i+1) i := ⟨Nat.lt_succ_self _, h⟩\n\n"}
{"name":"Nat.Up.WF","module":"Mathlib.Deprecated.ByteArray","initialProofState":"ub : Nat\n⊢ WellFounded ub.Up","decl":"theorem Up.WF (ub) : WellFounded (Up ub) :=\n  Subrelation.wf (h₂ := (measure (ub - ·)).wf) fun ⟨ia, iu⟩ ↦ Nat.sub_lt_sub_left iu ia\n\n"}
{"name":"ByteSliceT.mk.injEq","module":"Mathlib.Deprecated.ByteArray","initialProofState":"arr✝ : ByteArray\noff✝ : Nat\narr : ByteArray\noff : Nat\n⊢ Eq (Eq { arr := arr✝, off := off✝ } { arr := arr, off := off }) (And (Eq arr✝ arr) (Eq off✝ off))","decl":"/-- A terminal byte slice, a suffix of a byte array. -/\n@[deprecated \"No deprecation message was provided.\" (since := \"2024-08-19\")]\nstructure ByteSliceT := (arr : ByteArray) (off : Nat)\n\n"}
{"name":"ByteSliceT.mk.inj","module":"Mathlib.Deprecated.ByteArray","initialProofState":"arr✝ : ByteArray\noff✝ : Nat\narr : ByteArray\noff : Nat\nx✝ : Eq { arr := arr✝, off := off✝ } { arr := arr, off := off }\n⊢ And (Eq arr✝ arr) (Eq off✝ off)","decl":"/-- A terminal byte slice, a suffix of a byte array. -/\n@[deprecated \"No deprecation message was provided.\" (since := \"2024-08-19\")]\nstructure ByteSliceT := (arr : ByteArray) (off : Nat)\n\n"}
{"name":"ByteSliceT.mk.sizeOf_spec","module":"Mathlib.Deprecated.ByteArray","initialProofState":"arr : ByteArray\noff : Nat\n⊢ Eq (SizeOf.sizeOf { arr := arr, off := off }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf arr)) (SizeOf.sizeOf off))","decl":"/-- A terminal byte slice, a suffix of a byte array. -/\n@[deprecated \"No deprecation message was provided.\" (since := \"2024-08-19\")]\nstructure ByteSliceT := (arr : ByteArray) (off : Nat)\n\n"}
{"name":"ByteSlice.mk.sizeOf_spec","module":"Mathlib.Deprecated.ByteArray","initialProofState":"arr : ByteArray\noff len : Nat\n⊢ Eq (SizeOf.sizeOf { arr := arr, off := off, len := len }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf arr)) (SizeOf.sizeOf off)) (SizeOf.sizeOf len))","decl":"/-- A byte slice, given by a backing byte array, and an offset and length. -/\n@[deprecated Batteries.ByteSubarray (since := \"2024-08-19\")]\nstructure ByteSlice := (arr : ByteArray) (off len : Nat)\n\n"}
{"name":"ByteSlice.mk.inj","module":"Mathlib.Deprecated.ByteArray","initialProofState":"arr✝ : ByteArray\noff✝ len✝ : Nat\narr : ByteArray\noff len : Nat\nx✝ : Eq { arr := arr✝, off := off✝, len := len✝ } { arr := arr, off := off, len := len }\n⊢ And (Eq arr✝ arr) (And (Eq off✝ off) (Eq len✝ len))","decl":"/-- A byte slice, given by a backing byte array, and an offset and length. -/\n@[deprecated Batteries.ByteSubarray (since := \"2024-08-19\")]\nstructure ByteSlice := (arr : ByteArray) (off len : Nat)\n\n"}
{"name":"ByteSlice.mk.injEq","module":"Mathlib.Deprecated.ByteArray","initialProofState":"arr✝ : ByteArray\noff✝ len✝ : Nat\narr : ByteArray\noff len : Nat\n⊢ Eq (Eq { arr := arr✝, off := off✝, len := len✝ } { arr := arr, off := off, len := len }) (And (Eq arr✝ arr) (And (Eq off✝ off) (Eq len✝ len)))","decl":"/-- A byte slice, given by a backing byte array, and an offset and length. -/\n@[deprecated Batteries.ByteSubarray (since := \"2024-08-19\")]\nstructure ByteSlice := (arr : ByteArray) (off len : Nat)\n\n"}
