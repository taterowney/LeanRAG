{"name":"OrderIso.upperBounds_image","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set α\n⊢ Eq (upperBounds (Set.image (⇑f) s)) (Set.image (⇑f) (upperBounds s))","decl":"theorem upperBounds_image {s : Set α} : upperBounds (f '' s) = f '' upperBounds s :=\n  Subset.antisymm\n    (fun x hx =>\n      ⟨f.symm x, fun _ hy => f.le_symm_apply.2 (hx <| mem_image_of_mem _ hy), f.apply_symm_apply x⟩)\n    f.monotone.image_upperBounds_subset_upperBounds_image\n\n"}
{"name":"OrderIso.lowerBounds_image","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set α\n⊢ Eq (lowerBounds (Set.image (⇑f) s)) (Set.image (⇑f) (lowerBounds s))","decl":"theorem lowerBounds_image {s : Set α} : lowerBounds (f '' s) = f '' lowerBounds s :=\n  @upperBounds_image αᵒᵈ βᵒᵈ _ _ f.dual _\n\n-- Porting note: by simps were `fun _ _ => f.le_iff_le` and `fun _ _ => f.symm.le_iff_le`\n"}
{"name":"OrderIso.isLUB_image","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set α\nx : β\n⊢ Iff (IsLUB (Set.image (⇑f) s) x) (IsLUB s (f.symm x))","decl":"@[simp]\ntheorem isLUB_image {s : Set α} {x : β} : IsLUB (f '' s) x ↔ IsLUB s (f.symm x) :=\n  ⟨fun h => IsLUB.of_image (by simp) ((f.apply_symm_apply x).symm ▸ h), fun h =>\n    (IsLUB.of_image (by simp)) <| (f.symm_image_image s).symm ▸ h⟩\n\n"}
{"name":"OrderIso.isLUB_image'","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set α\nx : α\n⊢ Iff (IsLUB (Set.image (⇑f) s) (f x)) (IsLUB s x)","decl":"theorem isLUB_image' {s : Set α} {x : α} : IsLUB (f '' s) (f x) ↔ IsLUB s x := by\n  rw [isLUB_image, f.symm_apply_apply]\n\n"}
{"name":"OrderIso.isGLB_image","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set α\nx : β\n⊢ Iff (IsGLB (Set.image (⇑f) s) x) (IsGLB s (f.symm x))","decl":"@[simp]\ntheorem isGLB_image {s : Set α} {x : β} : IsGLB (f '' s) x ↔ IsGLB s (f.symm x) :=\n  f.dual.isLUB_image\n\n"}
{"name":"OrderIso.isGLB_image'","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set α\nx : α\n⊢ Iff (IsGLB (Set.image (⇑f) s) (f x)) (IsGLB s x)","decl":"theorem isGLB_image' {s : Set α} {x : α} : IsGLB (f '' s) (f x) ↔ IsGLB s x :=\n  f.dual.isLUB_image'\n\n"}
{"name":"OrderIso.isLUB_preimage","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set β\nx : α\n⊢ Iff (IsLUB (Set.preimage (⇑f) s) x) (IsLUB s (f x))","decl":"@[simp]\ntheorem isLUB_preimage {s : Set β} {x : α} : IsLUB (f ⁻¹' s) x ↔ IsLUB s (f x) := by\n  rw [← f.symm_symm, ← image_eq_preimage, isLUB_image]\n\n"}
{"name":"OrderIso.isLUB_preimage'","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set β\nx : β\n⊢ Iff (IsLUB (Set.preimage (⇑f) s) (f.symm x)) (IsLUB s x)","decl":"theorem isLUB_preimage' {s : Set β} {x : β} : IsLUB (f ⁻¹' s) (f.symm x) ↔ IsLUB s x := by\n  rw [isLUB_preimage, f.apply_symm_apply]\n\n"}
{"name":"OrderIso.isGLB_preimage","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set β\nx : α\n⊢ Iff (IsGLB (Set.preimage (⇑f) s) x) (IsGLB s (f x))","decl":"@[simp]\ntheorem isGLB_preimage {s : Set β} {x : α} : IsGLB (f ⁻¹' s) x ↔ IsGLB s (f x) :=\n  f.dual.isLUB_preimage\n\n"}
{"name":"OrderIso.isGLB_preimage'","module":"Mathlib.Order.Bounds.OrderIso","initialProofState":"α : Type u_1\nβ : Type u_2\ninst✝¹ : Preorder α\ninst✝ : Preorder β\nf : OrderIso α β\ns : Set β\nx : β\n⊢ Iff (IsGLB (Set.preimage (⇑f) s) (f.symm x)) (IsGLB s x)","decl":"theorem isGLB_preimage' {s : Set β} {x : β} : IsGLB (f ⁻¹' s) (f.symm x) ↔ IsGLB s x :=\n  f.dual.isLUB_preimage'\n\n"}
