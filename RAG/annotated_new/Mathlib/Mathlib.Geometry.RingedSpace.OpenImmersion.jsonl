{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.c_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\n‚ä¢ CategoryTheory.IsIso (f.c.app { unop := ‚ãØ.functor.obj U })","decl":"/-- An open immersion of PresheafedSpaces is an open embedding `f : X ‚ü∂ U ‚äÜ Y` of the underlying\nspaces, such that the sheaf map `Y(V) ‚ü∂ f _* X(V)` is an iso for each `V ‚äÜ U`.\n-/\nclass PresheafedSpace.IsOpenImmersion {X Y : PresheafedSpace C} (f : X ‚ü∂ Y) : Prop where\n  /-- the underlying continuous map of underlying spaces from the source to an open subset of the\n    target. -/\n  base_open : IsOpenEmbedding f.base\n  /-- the underlying sheaf morphism is an isomorphism on each open subset -/\n  c_iso : ‚àÄ U : Opens X, IsIso (f.c.app (op (base_open.isOpenMap.functor.obj U)))\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.base_open","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nself : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Topology.IsOpenEmbedding ‚áëf.base","decl":"/-- An open immersion of PresheafedSpaces is an open embedding `f : X ‚ü∂ U ‚äÜ Y` of the underlying\nspaces, such that the sheaf map `Y(V) ‚ü∂ f _* X(V)` is an iso for each `V ‚äÜ U`.\n-/\nclass PresheafedSpace.IsOpenImmersion {X Y : PresheafedSpace C} (f : X ‚ü∂ Y) : Prop where\n  /-- the underlying continuous map of underlying spaces from the source to an open subset of the\n    target. -/\n  base_open : IsOpenEmbedding f.base\n  /-- the underlying sheaf morphism is an isomorphism on each open subset -/\n  c_iso : ‚àÄ U : Opens X, IsIso (f.c.app (op (base_open.isOpenMap.functor.obj U)))\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict_hom_c_app","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX‚úù Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X‚úù Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nX : Opposite (TopologicalSpace.Opens ‚Üë‚Üë(Y.restrict ‚ãØ))\n‚ä¢ Eq ((AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict f).hom.c.app X) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj (Opposite.unop X) }) (X‚úù.presheaf.map (CategoryTheory.eqToHom ‚ãØ)))","decl":"/-- An open immersion `f : X ‚ü∂ Y` induces an isomorphism `X ‚âÖ Y|_{f(X)}`. -/\n@[simps! hom_c_app]\nnoncomputable def isoRestrict : X ‚âÖ Y.restrict H.base_open :=\n  PresheafedSpace.isoOfComponents (Iso.refl _) <| by\n    symm\n    fapply NatIso.ofComponents\n    ¬∑ intro U\n      refine asIso (f.c.app (op (opensFunctor f |>.obj (unop U)))) ‚â™‚â´ X.presheaf.mapIso (eqToIso ?_)\n      induction U using Opposite.rec' with | h U => ?_\n      cases U\n      dsimp only [IsOpenMap.functor, Functor.op, Opens.map]\n      congr 2\n      erw [Set.preimage_image_eq _ H.base_open.injective]\n      rfl\n    ¬∑ intro U V i\n      dsimp\n      simp only [NatTrans.naturality_assoc, TopCat.Presheaf.pushforward_obj_obj,\n        TopCat.Presheaf.pushforward_obj_map, Quiver.Hom.unop_op, Category.assoc]\n      rw [‚Üê X.presheaf.map_comp, ‚Üê X.presheaf.map_comp]\n      congr 1\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict f).hom (Y.ofRestrict ‚ãØ)) f","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_hom_ofRestrict : (isoRestrict f).hom ‚â´ Y.ofRestrict _ = f := by\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): `ext` did not pick up `NatTrans.ext`\n  refine PresheafedSpace.Hom.ext _ _ rfl <| NatTrans.ext <| funext fun x => ?_\n  simp only [isoRestrict_hom_c_app, NatTrans.comp_app, eqToHom_refl,\n    ofRestrict_c_app, Category.assoc, whiskerRight_id']\n  erw [Category.comp_id, comp_c_app, f.c.naturality_assoc, ‚Üê X.presheaf.map_comp]\n  trans f.c.app x ‚â´ X.presheaf.map (ùüô _)\n  ¬∑ congr 1\n  ¬∑ simp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.PresheafedSpace C\nh : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict f).hom (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) h)) (CategoryTheory.CategoryStruct.comp f h)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_hom_ofRestrict : (isoRestrict f).hom ‚â´ Y.ofRestrict _ = f := by\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): `ext` did not pick up `NatTrans.ext`\n  refine PresheafedSpace.Hom.ext _ _ rfl <| NatTrans.ext <| funext fun x => ?_\n  simp only [isoRestrict_hom_c_app, NatTrans.comp_app, eqToHom_refl,\n    ofRestrict_c_app, Category.assoc, whiskerRight_id']\n  erw [Category.comp_id, comp_c_app, f.c.naturality_assoc, ‚Üê X.presheaf.map_comp]\n  trans f.c.app x ‚â´ X.presheaf.map (ùüô _)\n  ¬∑ congr 1\n  ¬∑ simp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.PresheafedSpace C\nh : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict f).inv (CategoryTheory.CategoryStruct.comp f h)) (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) h)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_inv_ofRestrict : (isoRestrict f).inv ‚â´ f = Y.ofRestrict _ := by\n  rw [Iso.inv_comp_eq, isoRestrict_hom_ofRestrict]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoRestrict f).inv f) (Y.ofRestrict ‚ãØ)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_inv_ofRestrict : (isoRestrict f).inv ‚â´ f = Y.ofRestrict _ := by\n  rw [Iso.inv_comp_eq, isoRestrict_hom_ofRestrict]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.mono","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\n‚ä¢ CategoryTheory.Mono f","decl":"instance mono : Mono f := by\n  rw [‚Üê H.isoRestrict_hom_ofRestrict]; apply mono_comp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.c_iso'","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nV : TopologicalSpace.Opens ‚Üë‚ÜëY\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\nh : Eq V ((AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj U)\n‚ä¢ CategoryTheory.IsIso (f.c.app { unop := V })","decl":"lemma c_iso' {V : Opens Y} (U : Opens X) (h : V = (opensFunctor f).obj U) :\n    IsIso (f.c.app (Opposite.op V)) := by\n  subst h\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.comp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.PresheafedSpace C\ng : Quiver.Hom Y Z\nhg : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion g\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (CategoryTheory.CategoryStruct.comp f g)","decl":"/-- The composition of two open immersions is an open immersion. -/\ninstance comp {Z : PresheafedSpace C} (g : Y ‚ü∂ Z) [hg : IsOpenImmersion g] :\n    IsOpenImmersion (f ‚â´ g) where\n  base_open := hg.base_open.comp H.base_open\n  c_iso U := by\n    generalize_proofs h\n    dsimp only [AlgebraicGeometry.PresheafedSpace.comp_c_app, unop_op, Functor.op, comp_base,\n      Opens.map_comp_obj]\n    apply IsIso.comp_isIso'\n    ¬∑ exact c_iso' g ((opensFunctor f).obj U) (by ext; simp)\n    ¬∑ apply c_iso' f U\n      ext1\n      dsimp only [Opens.map_coe, IsOpenMap.coe_functor_obj, comp_base, TopCat.coe_comp]\n      rw [Set.image_comp, Set.preimage_image_eq _ hg.base_open.injective]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.inv_naturality","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU V : Opposite (TopologicalSpace.Opens ‚Üë‚ÜëX)\ni : Quiver.Hom U V\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (X.presheaf.map i) (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f (Opposite.unop V))) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f (Opposite.unop U)) (Y.presheaf.map ((AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).op.map i)))","decl":"@[simp, reassoc]\ntheorem inv_naturality {U V : (Opens X)·µí·µñ} (i : U ‚ü∂ V) :\n    X.presheaf.map i ‚â´ H.invApp _ (unop V) =\n      invApp f (unop U) ‚â´ Y.presheaf.map (opensFunctor f |>.op.map i) := by\n  simp only [invApp, ‚Üê Category.assoc]\n  rw [IsIso.comp_inv_eq]\n  simp only [Functor.op_obj, op_unop, ‚Üê X.presheaf.map_comp, Functor.op_map, Category.assoc,\n    NatTrans.naturality, Quiver.Hom.unop_op, IsIso.inv_hom_id_assoc,\n    TopCat.Presheaf.pushforward_obj_map]\n  congr 1\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.inv_naturality_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU V : Opposite (TopologicalSpace.Opens ‚Üë‚ÜëX)\ni : Quiver.Hom U V\nZ : C\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj (Opposite.unop V) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (X.presheaf.map i) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f (Opposite.unop V)) h)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f (Opposite.unop U)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map ((AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).op.map i)) h))","decl":"@[simp, reassoc]\ntheorem inv_naturality {U V : (Opens X)·µí·µñ} (i : U ‚ü∂ V) :\n    X.presheaf.map i ‚â´ H.invApp _ (unop V) =\n      invApp f (unop U) ‚â´ Y.presheaf.map (opensFunctor f |>.op.map i) := by\n  simp only [invApp, ‚Üê Category.assoc]\n  rw [IsIso.comp_inv_eq]\n  simp only [Functor.op_obj, op_unop, ‚Üê X.presheaf.map_comp, Functor.op_map, Category.assoc,\n    NatTrans.naturality, Quiver.Hom.unop_op, IsIso.inv_hom_id_assoc,\n    TopCat.Presheaf.pushforward_obj_map]\n  congr 1\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.instIsIsoInvApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\n‚ä¢ CategoryTheory.IsIso (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f U)","decl":"instance (U : Opens X) : IsIso (invApp f U) := by delta invApp; infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.inv_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\n‚ä¢ Eq (CategoryTheory.inv (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f U)) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)))","decl":"theorem inv_invApp (U : Opens X) :\n    inv (H.invApp _ U) =\n      f.c.app (op (opensFunctor f |>.obj U)) ‚â´\n        X.presheaf.map\n          (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) := by\n  rw [‚Üê cancel_epi (H.invApp _ U), IsIso.hom_inv_id]\n  delta invApp\n  simp [‚Üê Functor.map_comp]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp_app","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f U) (f.c.app { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj U })) (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ))","decl":"@[simp, reassoc, elementwise]\ntheorem invApp_app (U : Opens X) :\n    invApp f U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) := by\n  rw [invApp, Category.assoc, IsIso.inv_hom_id, Category.comp_id]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp_app_apply","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (X.presheaf.obj { unop := U })\n‚ä¢ Eq ((f.c.app { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) ((AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f U) x)) ((X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)) x)","decl":"@[simp, reassoc, elementwise]\ntheorem invApp_app (U : Opens X) :\n    invApp f U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) := by\n  rw [invApp, Category.assoc, IsIso.inv_hom_id, Category.comp_id]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp_app_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX\nZ : C\nh : Quiver.Hom (((TopCat.Presheaf.pushforward C f.base).obj X.presheaf).obj { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f U) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) h)) (CategoryTheory.CategoryStruct.comp (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)) h)","decl":"@[simp, reassoc, elementwise]\ntheorem invApp_app (U : Opens X) :\n    invApp f U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) := by\n  rw [invApp, Category.assoc, IsIso.inv_hom_id, Category.comp_id]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.app_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U))) (Y.presheaf.map (CategoryTheory.homOfLE ‚ãØ).op)","decl":"@[simp, reassoc]\ntheorem app_invApp (U : Opens Y) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        ((homOfLE (Set.image_preimage_subset f.base U.1)).op :\n          op U ‚ü∂ op (opensFunctor f |>.obj ((Opens.map f.base).obj U))) := by\n  erw [‚Üê Category.assoc]; rw [IsIso.comp_inv_eq, f.c.naturality]; congr\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.app_invApp_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY\nZ : C\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj ((TopologicalSpace.Opens.map f.base).obj U) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U)) h)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map (CategoryTheory.homOfLE ‚ãØ).op) h)","decl":"@[simp, reassoc]\ntheorem app_invApp (U : Opens Y) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        ((homOfLE (Set.image_preimage_subset f.base U.1)).op :\n          op U ‚ü∂ op (opensFunctor f |>.obj ((Opens.map f.base).obj U))) := by\n  erw [‚Üê Category.assoc]; rw [IsIso.comp_inv_eq, f.c.naturality]; congr\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.app_inv_app'","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U))) (Y.presheaf.map (CategoryTheory.eqToHom ‚ãØ).op)","decl":"/-- A variant of `app_inv_app` that gives an `eqToHom` instead of `homOfLe`. -/\n@[reassoc]\ntheorem app_inv_app' (U : Opens Y) (hU : (U : Set Y) ‚äÜ Set.range f.base) :\n    f.c.app (op U) ‚â´ invApp f ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        (eqToHom\n            (le_antisymm (Set.image_preimage_subset f.base U.1) <|\n              (Set.image_preimage_eq_inter_range (f := f.base) (t := U.1)).symm ‚ñ∏\n                Set.subset_inter_iff.mpr ‚ü®fun _ h => h, hU‚ü©)).op := by\n  erw [‚Üê Category.assoc]; rw [IsIso.comp_inv_eq, f.c.naturality]; congr\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.app_inv_app'_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\nZ : C\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj ((TopologicalSpace.Opens.map f.base).obj U) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U)) h)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map (CategoryTheory.eqToHom ‚ãØ).op) h)","decl":"/-- A variant of `app_inv_app` that gives an `eqToHom` instead of `homOfLe`. -/\n@[reassoc]\ntheorem app_inv_app' (U : Opens Y) (hU : (U : Set Y) ‚äÜ Set.range f.base) :\n    f.c.app (op U) ‚â´ invApp f ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        (eqToHom\n            (le_antisymm (Set.image_preimage_subset f.base U.1) <|\n              (Set.image_preimage_eq_inter_range (f := f.base) (t := U.1)).symm ‚ñ∏\n                Set.subset_inter_iff.mpr ‚ü®fun _ h => h, hU‚ü©)).op := by\n  erw [‚Üê Category.assoc]; rw [IsIso.comp_inv_eq, f.c.naturality]; congr\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.ofIso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nH : CategoryTheory.Iso X Y\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion H.hom","decl":"/-- An isomorphism is an open immersion. -/\ninstance ofIso {X Y : PresheafedSpace C} (H : X ‚âÖ Y) : IsOpenImmersion H.hom where\n  base_open := (TopCat.homeoOfIso ((forget C).mapIso H)).isOpenEmbedding\n  -- Porting note: `inferInstance` will fail if Lean is not told that `H.hom.c` is iso\n  c_iso _ := letI : IsIso H.hom.c := c_isIso_of_iso H.hom; inferInstance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.ofIsIso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\ninst‚úù : CategoryTheory.IsIso f\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f","decl":"instance (priority := 100) ofIsIso {X Y : PresheafedSpace C} (f : X ‚ü∂ Y) [IsIso f] :\n    IsOpenImmersion f :=\n  AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.ofIso (asIso f)\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : TopCat\nY : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X ‚ÜëY\nhf : Topology.IsOpenEmbedding ‚áëf\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (Y.ofRestrict hf)","decl":"instance ofRestrict {X : TopCat} (Y : PresheafedSpace C) {f : X ‚ü∂ Y.carrier}\n    (hf : IsOpenEmbedding f) : IsOpenImmersion (Y.ofRestrict hf) where\n  base_open := hf\n  c_iso U := by\n    dsimp\n    have : (Opens.map f).obj (hf.isOpenMap.functor.obj U) = U := by\n      ext1\n      exact Set.preimage_image_eq _ hf.injective\n    convert_to IsIso (Y.presheaf.map (ùüô _))\n    ¬∑ congr\n    ¬∑ -- Porting note: was `apply Subsingleton.helim; rw [this]`\n      -- See https://github.com/leanprover/lean4/issues/2273\n      congr\n      ¬∑ simp only [unop_op]\n        congr\n      apply Subsingleton.helim\n      rw [this]\n    ¬∑ infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.ofRestrict_invApp_apply","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX : AlgebraicGeometry.PresheafedSpace C\nY : TopCat\nf : Quiver.Hom Y (TopCat.of ‚Üë‚ÜëX)\nh : Topology.IsOpenEmbedding ‚áëf\nU : TopologicalSpace.Opens ‚Üë‚Üë(X.restrict h)\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj ((X.restrict h).presheaf.obj { unop := U })\n‚ä¢ Eq ((AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp (X.ofRestrict h) U) x) x","decl":"@[elementwise, simp]\ntheorem ofRestrict_invApp {C : Type*} [Category C] (X : PresheafedSpace C) {Y : TopCat}\n    {f : Y ‚ü∂ TopCat.of X.carrier} (h : IsOpenEmbedding f) (U : Opens (X.restrict h).carrier) :\n    (PresheafedSpace.IsOpenImmersion.ofRestrict X h).invApp _ U = ùüô _ := by\n  delta invApp\n  rw [IsIso.comp_inv_eq, Category.id_comp]\n  change X.presheaf.map _ = X.presheaf.map _\n  congr 1\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.ofRestrict_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX : AlgebraicGeometry.PresheafedSpace C\nY : TopCat\nf : Quiver.Hom Y (TopCat.of ‚Üë‚ÜëX)\nh : Topology.IsOpenEmbedding ‚áëf\nU : TopologicalSpace.Opens ‚Üë‚Üë(X.restrict h)\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.invApp (X.ofRestrict h) U) (CategoryTheory.CategoryStruct.id ((X.restrict h).presheaf.obj { unop := U }))","decl":"@[elementwise, simp]\ntheorem ofRestrict_invApp {C : Type*} [Category C] (X : PresheafedSpace C) {Y : TopCat}\n    {f : Y ‚ü∂ TopCat.of X.carrier} (h : IsOpenEmbedding f) (U : Opens (X.restrict h).carrier) :\n    (PresheafedSpace.IsOpenImmersion.ofRestrict X h).invApp _ U = ùüô _ := by\n  delta invApp\n  rw [IsIso.comp_inv_eq, Category.id_comp]\n  change X.presheaf.map _ = X.presheaf.map _\n  congr 1\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.to_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nh' : CategoryTheory.Epi f.base\n‚ä¢ CategoryTheory.IsIso f","decl":"/-- An open immersion is an iso if the underlying continuous map is epi. -/\ntheorem to_iso [h' : Epi f.base] : IsIso f := by\n  have : ‚àÄ (U : (Opens Y)·µí·µñ), IsIso (f.c.app U) := by\n    intro U\n    have : U = op (opensFunctor f |>.obj ((Opens.map f.base).obj (unop U))) := by\n      induction U using Opposite.rec' with | h U => ?_\n      cases U\n      dsimp only [Functor.op, Opens.map]\n      congr\n      exact (Set.image_preimage_eq _ ((TopCat.epi_iff_surjective _).mp h')).symm\n    convert H.c_iso (Opens.map f.base |>.obj <| unop U)\n\n  have : IsIso f.c := NatIso.isIso_of_isIso_app _\n\n  apply (config := { allowSynthFailures := true }) isIso_of_components\n  let t : X ‚âÉ‚Çú Y := (Homeomorph.ofIsEmbedding _ H.base_open.isEmbedding).trans\n    { toFun := Subtype.val\n      invFun := fun x =>\n        ‚ü®x, by rw [Set.range_eq_univ.mpr ((TopCat.epi_iff_surjective _).mp h')]; trivial‚ü©\n      left_inv := fun ‚ü®_, _‚ü© => rfl\n      right_inv := fun _ => rfl }\n  exact (TopCat.isoOfHomeo t).isIso_hom\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.stalk_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\ninst‚úù : CategoryTheory.Limits.HasColimits C\nx : ‚Üë‚ÜëX\n‚ä¢ CategoryTheory.IsIso (AlgebraicGeometry.PresheafedSpace.Hom.stalkMap f x)","decl":"instance stalk_iso [HasColimits C] (x : X) : IsIso (f.stalkMap x) := by\n  rw [‚Üê H.isoRestrict_hom_ofRestrict, PresheafedSpace.stalkMap.comp]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullback_cone_of_left_condition","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftFst f g) f) (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) g)","decl":"theorem pullback_cone_of_left_condition : pullbackConeOfLeftFst f g ‚â´ f = Y.ofRestrict _ ‚â´ g := by\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): `ext` did not pick up `NatTrans.ext`\n  refine PresheafedSpace.Hom.ext _ _ ?_ <| NatTrans.ext <| funext fun U => ?_\n  ¬∑ simpa using pullback.condition\n  ¬∑ induction U using Opposite.rec'\n    -- Porting note: `NatTrans.comp_app` is not picked up by `dsimp`\n    -- Perhaps see : https://github.com/leanprover-community/mathlib4/issues/5026\n    rw [NatTrans.comp_app]\n    dsimp only [comp_c_app, unop_op, whiskerRight_app, pullbackConeOfLeftFst]\n    -- simp only [ofRestrict_c_app, NatTrans.comp_app]\n    simp only [app_invApp_assoc,\n      eqToHom_app, Category.assoc, NatTrans.naturality_assoc]\n    erw [‚Üê Y.presheaf.map_comp, ‚Üê Y.presheaf.map_comp]\n    congr 1\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftLift_fst","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\ns : CategoryTheory.Limits.PullbackCone f g\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftLift f g s) (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeft f g).fst) s.fst","decl":"theorem pullbackConeOfLeftLift_fst :\n    pullbackConeOfLeftLift f g s ‚â´ (pullbackConeOfLeft f g).fst = s.fst := by\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): `ext` did not pick up `NatTrans.ext`\n  refine PresheafedSpace.Hom.ext _ _ ?_ <| NatTrans.ext <| funext fun x => ?_\n  ¬∑ change pullback.lift _ _ _ ‚â´ pullback.fst _ _ = _\n    simp\n  ¬∑ induction x using Opposite.rec' with | h x => ?_\n    change ((_ ‚â´ _) ‚â´ _ ‚â´ _) ‚â´ _ = _\n    simp_rw [Category.assoc]\n    erw [‚Üê s.pt.presheaf.map_comp]\n    erw [s.snd.c.naturality_assoc]\n    have := congr_app s.condition (op (opensFunctor f |>.obj x))\n    dsimp only [comp_c_app, unop_op] at this\n    rw [‚Üê IsIso.comp_inv_eq] at this\n    replace this := reassoc_of% this\n    erw [‚Üê this, hf.invApp_app_assoc, s.fst.c.naturality_assoc]\n    simp [eqToHom_map]\n\n-- this lemma is not a `simp` lemma, because it is an implementation detail\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftLift_snd","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\ns : CategoryTheory.Limits.PullbackCone f g\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftLift f g s) (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeft f g).snd) s.snd","decl":"theorem pullbackConeOfLeftLift_snd :\n    pullbackConeOfLeftLift f g s ‚â´ (pullbackConeOfLeft f g).snd = s.snd := by\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11041): `ext` did not pick up `NatTrans.ext`\n  refine PresheafedSpace.Hom.ext _ _ ?_ <| NatTrans.ext <| funext fun x => ?_\n  ¬∑ change pullback.lift _ _ _ ‚â´ pullback.snd _ _ = _\n    simp\n  ¬∑ change (_ ‚â´ _ ‚â´ _) ‚â´ _ = _\n    simp_rw [Category.assoc]\n    erw [s.snd.c.naturality_assoc]\n    erw [‚Üê s.pt.presheaf.map_comp, ‚Üê s.pt.presheaf.map_comp]\n    trans s.snd.c.app x ‚â´ s.pt.presheaf.map (ùüô _)\n    ¬∑ congr 1\n    ¬∑ simp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeSndIsOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackConeOfLeft f g).snd","decl":"instance pullbackConeSndIsOpenImmersion : IsOpenImmersion (pullbackConeOfLeft f g).snd := by\n  erw [CategoryTheory.Limits.PullbackCone.mk_snd]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.hasPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.HasPullback f g","decl":"instance hasPullback_of_left : HasPullback f g :=\n  ‚ü®‚ü®‚ü®_, pullbackConeOfLeftIsLimit f g‚ü©‚ü©‚ü©\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.hasPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.HasPullback g f","decl":"instance hasPullback_of_right : HasPullback g f :=\n  hasPullback_symmetry f g\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackSndOfLeft","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (CategoryTheory.Limits.pullback.snd f g)","decl":"/-- Open immersions are stable under base-change. -/\ninstance pullbackSndOfLeft : IsOpenImmersion (pullback.snd f g) := by\n  delta pullback.snd\n  rw [‚Üê limit.isoLimitCone_hom_œÄ ‚ü®_, pullbackConeOfLeftIsLimit f g‚ü© WalkingCospan.right]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackFstOfRight","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (CategoryTheory.Limits.pullback.fst g f)","decl":"/-- Open immersions are stable under base-change. -/\ninstance pullbackFstOfRight : IsOpenImmersion (pullback.fst g f) := by\n  rw [‚Üê pullbackSymmetry_hom_comp_snd]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullbackToBaseIsOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\ninst‚úù : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion g\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (CategoryTheory.Limits.limit.œÄ (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one)","decl":"instance pullbackToBaseIsOpenImmersion [IsOpenImmersion g] :\n    IsOpenImmersion (limit.œÄ (cospan f g) WalkingCospan.one) := by\n  rw [‚Üê limit.w (cospan f g) WalkingCospan.Hom.inl, cospan_map_inl]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.forget_preservesLimitsOfLeft","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan f g) (AlgebraicGeometry.PresheafedSpace.forget C)","decl":"instance forget_preservesLimitsOfLeft : PreservesLimit (cospan f g) (forget C) :=\n  preservesLimit_of_preserves_limit_cone (pullbackConeOfLeftIsLimit f g)\n    (by\n      apply (IsLimit.postcomposeHomEquiv (diagramIsoCospan _) _).toFun\n      refine (IsLimit.equivIsoLimit ?_).toFun (limit.isLimit (cospan f.base g.base))\n      fapply Cones.ext\n      ¬∑ exact Iso.refl _\n      change ‚àÄ j, _ = ùüô _ ‚â´ _ ‚â´ _\n      simp_rw [Category.id_comp]\n      rintro (_ | _ | _) <;> symm\n      ¬∑ erw [Category.comp_id]\n        exact limit.w (cospan f.base g.base) WalkingCospan.Hom.inl\n      ¬∑ exact Category.comp_id _\n      ¬∑ exact Category.comp_id _)\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.forget_preservesLimitsOfRight","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan g f) (AlgebraicGeometry.PresheafedSpace.forget C)","decl":"instance forget_preservesLimitsOfRight : PreservesLimit (cospan g f) (forget C) :=\n  preservesPullback_symmetry (forget C) f g\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.pullback_snd_isIso_of_range_subset","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\nH : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\n‚ä¢ CategoryTheory.IsIso (CategoryTheory.Limits.pullback.snd f g)","decl":"theorem pullback_snd_isIso_of_range_subset (H : Set.range g.base ‚äÜ Set.range f.base) :\n    IsIso (pullback.snd f g) := by\n  haveI := TopCat.snd_iso_of_left_embedding_range_subset hf.base_open.isEmbedding g.base H\n  have : IsIso (pullback.snd f g).base := by\n    delta pullback.snd\n    rw [‚Üê limit.isoLimitCone_hom_œÄ ‚ü®_, pullbackConeOfLeftIsLimit f g‚ü© WalkingCospan.right]\n    change IsIso (_ ‚â´ pullback.snd _ _)\n    infer_instance\n  apply to_iso\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift_fac_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z‚úù : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z‚úù\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z‚úù\nH : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\nZ : AlgebraicGeometry.PresheafedSpace C\nh : Quiver.Hom Z‚úù Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift f g H) (CategoryTheory.CategoryStruct.comp f h)) (CategoryTheory.CategoryStruct.comp g h)","decl":"@[simp, reassoc]\ntheorem lift_fac (H : Set.range g.base ‚äÜ Set.range f.base) : lift f g H ‚â´ f = g := by\n  erw [Category.assoc]; rw [IsIso.inv_comp_eq]; exact pullback.condition\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift_fac","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\nH : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift f g H) f) g","decl":"@[simp, reassoc]\ntheorem lift_fac (H : Set.range g.base ‚äÜ Set.range f.base) : lift f g H ‚â´ f = g := by\n  erw [Category.assoc]; rw [IsIso.inv_comp_eq]; exact pullback.condition\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift_uniq","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\nH : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\nl : Quiver.Hom Y X\nhl : Eq (CategoryTheory.CategoryStruct.comp l f) g\n‚ä¢ Eq l (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift f g H)","decl":"theorem lift_uniq (H : Set.range g.base ‚äÜ Set.range f.base) (l : Y ‚ü∂ X) (hl : l ‚â´ f = g) :\n    l = lift f g H := by rw [‚Üê cancel_mono f, hl, lift_fac]\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoOfRangeEq_inv","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\ninst‚úù : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion g\ne : Eq (Set.range ‚áëf.base) (Set.range ‚áëg.base)\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoOfRangeEq f g e).inv (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift f g ‚ãØ)","decl":"/-- Two open immersions with equal range is isomorphic. -/\n@[simps]\ndef isoOfRangeEq [IsOpenImmersion g] (e : Set.range f.base = Set.range g.base) : X ‚âÖ Y where\n  hom := lift g f (le_of_eq e)\n  inv := lift f g (le_of_eq e.symm)\n  hom_inv_id := by rw [‚Üê cancel_mono f]; simp\n  inv_hom_id := by rw [‚Üê cancel_mono g]; simp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoOfRangeEq_hom","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Z\nhf : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\ng : Quiver.Hom Y Z\ninst‚úù : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion g\ne : Eq (Set.range ‚áëf.base) (Set.range ‚áëg.base)\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isoOfRangeEq f g e).hom (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.lift g f ‚ãØ)","decl":"/-- Two open immersions with equal range is isomorphic. -/\n@[simps]\ndef isoOfRangeEq [IsOpenImmersion g] (e : Set.range f.base = Set.range g.base) : X ‚âÖ Y where\n  hom := lift g f (le_of_eq e)\n  inv := lift f g (le_of_eq e.symm)\n  hom_inv_id := by rw [‚Üê cancel_mono f]; simp\n  inv_hom_id := by rw [‚Üê cancel_mono g]; simp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpace_toPresheafedSpace","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : AlgebraicGeometry.PresheafedSpace C\nY : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpace Y f).toPresheafedSpace X","decl":"@[simp]\ntheorem toSheafedSpace_toPresheafedSpace : (toSheafedSpace Y f).toPresheafedSpace = X :=\n  rfl\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpaceHom_base","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : AlgebraicGeometry.PresheafedSpace C\nY : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpaceHom Y f).base f.base","decl":"@[simp]\ntheorem toSheafedSpaceHom_base : (toSheafedSpaceHom Y f).base = f.base :=\n  rfl\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpaceHom_c","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : AlgebraicGeometry.PresheafedSpace C\nY : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpaceHom Y f).c f.c","decl":"@[simp]\ntheorem toSheafedSpaceHom_c : (toSheafedSpaceHom Y f).c = f.c :=\n  rfl\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpace_isOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : AlgebraicGeometry.PresheafedSpace C\nY : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpaceHom Y f)","decl":"instance toSheafedSpace_isOpenImmersion : SheafedSpace.IsOpenImmersion (toSheafedSpaceHom Y f) :=\n  H\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.sheafedSpace_toSheafedSpace","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\ninst‚úù : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpace Y f) X","decl":"@[simp]\ntheorem sheafedSpace_toSheafedSpace {X Y : SheafedSpace C} (f : X ‚ü∂ Y) [IsOpenImmersion f] :\n    toSheafedSpace Y f = X := by cases X; rfl\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpace_toSheafedSpace","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : AlgebraicGeometry.PresheafedSpace CommRingCat\nY : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpace Y f).toSheafedSpace (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toSheafedSpace Y.toSheafedSpace f)","decl":"@[simp]\ntheorem toLocallyRingedSpace_toSheafedSpace :\n    (toLocallyRingedSpace Y f).toSheafedSpace = toSheafedSpace Y.1 f :=\n  rfl\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpaceHom_val","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : AlgebraicGeometry.PresheafedSpace CommRingCat\nY : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.LocallyRingedSpace.Hom.toShHom (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpaceHom Y f)) f","decl":"@[simp]\ntheorem toLocallyRingedSpaceHom_val : (toLocallyRingedSpaceHom Y f).toShHom = f :=\n  rfl\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpace_isOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : AlgebraicGeometry.PresheafedSpace CommRingCat\nY : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y.toPresheafedSpace\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpaceHom Y f)","decl":"instance toLocallyRingedSpace_isOpenImmersion :\n    LocallyRingedSpace.IsOpenImmersion (toLocallyRingedSpaceHom Y f) :=\n  H\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.locallyRingedSpace_toLocallyRingedSpace","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\ninst‚úù : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ Eq (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.toLocallyRingedSpace Y f.toHom) X","decl":"@[simp]\ntheorem locallyRingedSpace_toLocallyRingedSpace {X Y : LocallyRingedSpace} (f : X ‚ü∂ Y)\n    [LocallyRingedSpace.IsOpenImmersion f] : toLocallyRingedSpace Y f.1 = X := by\n    cases X; delta toLocallyRingedSpace; simp\n\n"}
{"name":"AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.isIso_of_subset","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.PresheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.PresheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\n‚ä¢ CategoryTheory.IsIso (f.c.app { unop := U })","decl":"theorem isIso_of_subset {X Y : PresheafedSpace C} (f : X ‚ü∂ Y)\n    [H : PresheafedSpace.IsOpenImmersion f] (U : Opens Y.carrier)\n    (hU : (U : Set Y.carrier) ‚äÜ Set.range f.base) : IsIso (f.c.app <| op U) := by\n  have : U = H.base_open.isOpenMap.functor.obj ((Opens.map f.base).obj U) := by\n    ext1\n    exact (Set.inter_eq_left.mpr hU).symm.trans Set.image_preimage_eq_inter_range.symm\n  convert H.c_iso ((Opens.map f.base).obj U)\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.of_isIso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\ninst‚úù : CategoryTheory.IsIso f\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion f","decl":"instance (priority := 100) of_isIso {X Y : SheafedSpace C} (f : X ‚ü∂ Y) [IsIso f] :\n    SheafedSpace.IsOpenImmersion f :=\n  @PresheafedSpace.IsOpenImmersion.ofIsIso _ _ _ _ f\n    (SheafedSpace.forgetToPresheafedSpace.map_isIso _)\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.comp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\ng : Quiver.Hom Y Z\ninst‚úù¬π : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\ninst‚úù : AlgebraicGeometry.SheafedSpace.IsOpenImmersion g\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (CategoryTheory.CategoryStruct.comp f g)","decl":"instance comp {X Y Z : SheafedSpace C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [SheafedSpace.IsOpenImmersion f]\n    [SheafedSpace.IsOpenImmersion g] : SheafedSpace.IsOpenImmersion (f ‚â´ g) :=\n  PresheafedSpace.IsOpenImmersion.comp f g\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.instMono","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\n‚ä¢ CategoryTheory.Mono f","decl":"instance : Mono f :=\n  (forget).mono_of_mono_map (show @Mono (PresheafedSpace C) _ _ _ f by infer_instance)\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.forgetMapIsOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion (AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace.map f)","decl":"instance forgetMapIsOpenImmersion : PresheafedSpace.IsOpenImmersion ((forget).map f) :=\n  ‚ü®H.base_open, H.c_iso‚ü©\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.hasLimit_cospan_forget_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.HasLimit ((CategoryTheory.Limits.cospan f g).comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace)","decl":"instance hasLimit_cospan_forget_of_left : HasLimit (cospan f g ‚ãô forget) := by\n  have : HasLimit (cospan ((cospan f g ‚ãô forget).map Hom.inl)\n      ((cospan f g ‚ãô forget).map Hom.inr)) := by\n    change HasLimit (cospan ((forget).map f) ((forget).map g))\n    infer_instance\n  apply hasLimitOfIso (diagramIsoCospan _).symm\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.hasLimit_cospan_forget_of_left'","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.HasLimit (CategoryTheory.Limits.cospan (((CategoryTheory.Limits.cospan f g).comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace).map CategoryTheory.Limits.WalkingCospan.Hom.inl) (((CategoryTheory.Limits.cospan f g).comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace).map CategoryTheory.Limits.WalkingCospan.Hom.inr))","decl":"instance hasLimit_cospan_forget_of_left' :\n    HasLimit (cospan ((cospan f g ‚ãô forget).map Hom.inl) ((cospan f g ‚ãô forget).map Hom.inr)) :=\n  show HasLimit (cospan ((forget).map f) ((forget).map g)) from inferInstance\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.hasLimit_cospan_forget_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.HasLimit ((CategoryTheory.Limits.cospan g f).comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace)","decl":"instance hasLimit_cospan_forget_of_right : HasLimit (cospan g f ‚ãô forget) := by\n  have : HasLimit (cospan ((cospan g f ‚ãô forget).map Hom.inl)\n      ((cospan g f ‚ãô forget).map Hom.inr)) := by\n    change HasLimit (cospan ((forget).map g) ((forget).map f))\n    infer_instance\n  apply hasLimitOfIso (diagramIsoCospan _).symm\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.hasLimit_cospan_forget_of_right'","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.HasLimit (CategoryTheory.Limits.cospan (((CategoryTheory.Limits.cospan g f).comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace).map CategoryTheory.Limits.WalkingCospan.Hom.inl) (((CategoryTheory.Limits.cospan g f).comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace).map CategoryTheory.Limits.WalkingCospan.Hom.inr))","decl":"instance hasLimit_cospan_forget_of_right' :\n    HasLimit (cospan ((cospan g f ‚ãô forget).map Hom.inl) ((cospan g f ‚ãô forget).map Hom.inr)) :=\n  show HasLimit (cospan ((forget).map g) ((forget).map f)) from inferInstance\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_forgetPreserves_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan f g) (AlgebraicGeometry.SheafedSpace.forget C)","decl":"instance sheafedSpace_forgetPreserves_of_left :\n    PreservesLimit (cospan f g) (SheafedSpace.forget C) :=\n  @Limits.comp_preservesLimit _ _ _ _ _ _ (cospan f g) _ _ forget (PresheafedSpace.forget C)\n    inferInstance <| by\n      have : PreservesLimit\n        (cospan ((cospan f g ‚ãô forget).map Hom.inl)\n          ((cospan f g ‚ãô forget).map Hom.inr)) (PresheafedSpace.forget C) := by\n        dsimp\n        infer_instance\n      apply preservesLimit_of_iso_diagram _ (diagramIsoCospan _).symm\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_forgetPreserves_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan g f) (AlgebraicGeometry.SheafedSpace.forget C)","decl":"instance sheafedSpace_forgetPreserves_of_right :\n    PreservesLimit (cospan g f) (SheafedSpace.forget C) :=\n  preservesPullback_symmetry _ _ _\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_hasPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.HasPullback f g","decl":"instance sheafedSpace_hasPullback_of_left : HasPullback f g :=\n  hasLimit_of_created (cospan f g) forget\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_hasPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.HasPullback g f","decl":"instance sheafedSpace_hasPullback_of_right : HasPullback g f :=\n  hasLimit_of_created (cospan g f) forget\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_pullback_snd_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (CategoryTheory.Limits.pullback.snd f g)","decl":"/-- Open immersions are stable under base-change. -/\ninstance sheafedSpace_pullback_snd_of_left :\n    SheafedSpace.IsOpenImmersion (pullback.snd f g) := by\n  delta pullback.snd\n  have : _ = limit.œÄ (cospan f g) right := preservesLimitIso_hom_œÄ forget (cospan f g) right\n  rw [‚Üê this]\n  have := HasLimit.isoOfNatIso_hom_œÄ (diagramIsoCospan (cospan f g ‚ãô forget)) right\n  erw [Category.comp_id] at this\n  rw [‚Üê this]\n  dsimp\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_pullback_fst_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (CategoryTheory.Limits.pullback.fst g f)","decl":"instance sheafedSpace_pullback_fst_of_right :\n    SheafedSpace.IsOpenImmersion (pullback.fst g f) := by\n  delta pullback.fst\n  have : _ = limit.œÄ (cospan g f) left := preservesLimitIso_hom_œÄ forget (cospan g f) left\n  rw [‚Üê this]\n  have := HasLimit.isoOfNatIso_hom_œÄ (diagramIsoCospan (cospan g f ‚ãô forget)) left\n  erw [Category.comp_id] at this\n  rw [‚Üê this]\n  dsimp\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sheafedSpace_pullback_to_base_isOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y Z : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\ninst‚úù : AlgebraicGeometry.SheafedSpace.IsOpenImmersion g\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (CategoryTheory.Limits.limit.œÄ (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one)","decl":"instance sheafedSpace_pullback_to_base_isOpenImmersion [SheafedSpace.IsOpenImmersion g] :\n    SheafedSpace.IsOpenImmersion (limit.œÄ (cospan f g) one : pullback f g ‚ü∂ Z) := by\n  rw [‚Üê limit.w (cospan f g) Hom.inl, cospan_map_inl]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.of_stalk_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù‚Å∂ : CategoryTheory.Category.{v, u} C\ninst‚úù‚Åµ : CategoryTheory.Limits.HasLimits C\ninst‚úù‚Å¥ : CategoryTheory.Limits.HasColimits C\ninst‚úù¬≥ : CategoryTheory.HasForget C\ninst‚úù¬≤ : (CategoryTheory.forget C).ReflectsIsomorphisms\ninst‚úù¬π : CategoryTheory.Limits.PreservesLimits (CategoryTheory.forget C)\ninst‚úù : CategoryTheory.Limits.PreservesFilteredColimits (CategoryTheory.forget C)\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nhf : Topology.IsOpenEmbedding ‚áëf.base\nH : ‚àÄ (x : ‚Üë‚ÜëX.toPresheafedSpace), CategoryTheory.IsIso (AlgebraicGeometry.PresheafedSpace.Hom.stalkMap f x)\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion f","decl":"/-- Suppose `X Y : SheafedSpace C`, where `C` is a concrete category,\nwhose forgetful functor reflects isomorphisms, preserves limits and filtered colimits.\nThen a morphism `X ‚ü∂ Y` that is a topological open embedding\nis an open immersion iff every stalk map is an iso.\n-/\ntheorem of_stalk_iso {X Y : SheafedSpace C} (f : X ‚ü∂ Y) (hf : IsOpenEmbedding f.base)\n    [H : ‚àÄ x : X.1, IsIso (f.stalkMap x)] : SheafedSpace.IsOpenImmersion f :=\n  { base_open := hf\n    c_iso := fun U => by\n      apply (config := {allowSynthFailures := true})\n        TopCat.Presheaf.app_isIso_of_stalkFunctor_map_iso\n          (show Y.sheaf ‚ü∂ (TopCat.Sheaf.pushforward _ f.base).obj X.sheaf from ‚ü®f.c‚ü©)\n      rintro ‚ü®_, y, hy, rfl‚ü©\n      specialize H y\n      delta PresheafedSpace.Hom.stalkMap at H\n      haveI H' := TopCat.Presheaf.stalkPushforward.stalkPushforward_iso_of_isInducing C\n        hf.toIsInducing X.presheaf y\n      have := IsIso.comp_isIso' H (@IsIso.inv_isIso _ _ _ _ _ H')\n      rwa [Category.assoc, IsIso.hom_inv_id, Category.comp_id] at this }\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict_hom_c_app","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX‚úù Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X‚úù Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nX : Opposite (TopologicalSpace.Opens ‚Üë‚Üë(Y.restrict ‚ãØ))\n‚ä¢ Eq ((AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict f).hom.c.app X) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.PresheafedSpace.IsOpenImmersion.opensFunctor f).obj (Opposite.unop X) }) (X‚úù.presheaf.map (CategoryTheory.eqToHom ‚ãØ)))","decl":"/-- An open immersion `f : X ‚ü∂ Y` induces an isomorphism `X ‚âÖ Y|_{f(X)}`. -/\n@[simps! hom_c_app]\nnoncomputable def isoRestrict : X ‚âÖ Y.restrict H.base_open :=\n  SheafedSpace.isoMk <| PresheafedSpace.IsOpenImmersion.isoRestrict f\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict f).hom (Y.ofRestrict ‚ãØ)) f","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_hom_ofRestrict : (isoRestrict f).hom ‚â´ Y.ofRestrict _ = f :=\n  PresheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict f\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.SheafedSpace C\nh : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict f).hom (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) h)) (CategoryTheory.CategoryStruct.comp f h)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_hom_ofRestrict : (isoRestrict f).hom ‚â´ Y.ofRestrict _ = f :=\n  PresheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict f\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict f).inv f) (Y.ofRestrict ‚ãØ)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_inv_ofRestrict : (isoRestrict f).inv ‚â´ f = Y.ofRestrict _ :=\n  PresheafedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict f\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.SheafedSpace C\nh : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.isoRestrict f).inv (CategoryTheory.CategoryStruct.comp f h)) (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) h)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_inv_ofRestrict : (isoRestrict f).inv ‚â´ f = Y.ofRestrict _ :=\n  PresheafedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict f\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.inv_naturality_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU V : Opposite (TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace)\ni : Quiver.Hom U V\nZ : C\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj (Opposite.unop V) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (X.presheaf.map i) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f (Opposite.unop V)) h)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f (Opposite.unop U)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map ((AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).op.map i)) h))","decl":"@[reassoc (attr := simp)]\ntheorem inv_naturality {U V : (Opens X)·µí·µñ} (i : U ‚ü∂ V) :\n    X.presheaf.map i ‚â´ H.invApp _ (unop V) =\n      H.invApp _ (unop U) ‚â´ Y.presheaf.map (opensFunctor f |>.op.map i) :=\n  PresheafedSpace.IsOpenImmersion.inv_naturality f i\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.inv_naturality","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU V : Opposite (TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace)\ni : Quiver.Hom U V\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (X.presheaf.map i) (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f (Opposite.unop V))) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f (Opposite.unop U)) (Y.presheaf.map ((AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).op.map i)))","decl":"@[reassoc (attr := simp)]\ntheorem inv_naturality {U V : (Opens X)·µí·µñ} (i : U ‚ü∂ V) :\n    X.presheaf.map i ‚â´ H.invApp _ (unop V) =\n      H.invApp _ (unop U) ‚â´ Y.presheaf.map (opensFunctor f |>.op.map i) :=\n  PresheafedSpace.IsOpenImmersion.inv_naturality f i\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.instIsIsoInvApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace\n‚ä¢ CategoryTheory.IsIso (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f U)","decl":"instance (U : Opens X) : IsIso (H.invApp _ U) := by delta invApp; infer_instance\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.inv_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace\n‚ä¢ Eq (CategoryTheory.inv (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f U)) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)))","decl":"theorem inv_invApp (U : Opens X) :\n    inv (H.invApp _ U) =\n      f.c.app (op (opensFunctor f |>.obj U)) ‚â´ X.presheaf.map\n        (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) :=\n  PresheafedSpace.IsOpenImmersion.inv_invApp f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp_app","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f U) (f.c.app { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj U })) (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ))","decl":"@[reassoc (attr := simp)]\ntheorem invApp_app (U : Opens X) :\n    H.invApp _ U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) :=\n  PresheafedSpace.IsOpenImmersion.invApp_app f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp_app_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace\nZ : C\nh : Quiver.Hom (((TopCat.Presheaf.pushforward C f.base).obj X.presheaf).obj { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f U) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) h)) (CategoryTheory.CategoryStruct.comp (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)) h)","decl":"@[reassoc (attr := simp)]\ntheorem invApp_app (U : Opens X) :\n    H.invApp _ U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) :=\n  PresheafedSpace.IsOpenImmersion.invApp_app f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp_app_apply","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëX.toPresheafedSpace\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj (X.presheaf.obj { unop := U })\n‚ä¢ Eq ((f.c.app { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj U }) ((AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f U) x)) ((X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)) x)","decl":"attribute [elementwise] invApp_app\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.app_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY.toPresheafedSpace\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U))) (Y.presheaf.map (CategoryTheory.homOfLE ‚ãØ).op)","decl":"@[reassoc (attr := simp)]\ntheorem app_invApp (U : Opens Y) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        ((homOfLE (Set.image_preimage_subset f.base U.1)).op :\n          op U ‚ü∂ op (opensFunctor f |>.obj ((Opens.map f.base).obj U))) :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.app_invApp_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY.toPresheafedSpace\nZ : C\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj ((TopologicalSpace.Opens.map f.base).obj U) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U)) h)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map (CategoryTheory.homOfLE ‚ãØ).op) h)","decl":"@[reassoc (attr := simp)]\ntheorem app_invApp (U : Opens Y) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        ((homOfLE (Set.image_preimage_subset f.base U.1)).op :\n          op U ‚ü∂ op (opensFunctor f |>.obj ((Opens.map f.base).obj U))) :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.app_inv_app'_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY.toPresheafedSpace\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\nZ : C\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.opensFunctor f).obj ((TopologicalSpace.Opens.map f.base).obj U) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U)) h)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map (CategoryTheory.eqToHom ‚ãØ).op) h)","decl":"/-- A variant of `app_inv_app` that gives an `eqToHom` instead of `homOfLe`. -/\n@[reassoc]\ntheorem app_inv_app' (U : Opens Y) (hU : (U : Set Y) ‚äÜ Set.range f.base) :\n    f.c.app (op U) ‚â´ invApp f ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        (eqToHom <|\n            le_antisymm (Set.image_preimage_subset f.base U.1) <|\n              (Set.image_preimage_eq_inter_range (f := f.base) (t := U.1)).symm ‚ñ∏\n                Set.subset_inter_iff.mpr ‚ü®fun _ h => h, hU‚ü©).op :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.app_inv_app'","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚Üë‚ÜëY.toPresheafedSpace\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U))) (Y.presheaf.map (CategoryTheory.eqToHom ‚ãØ).op)","decl":"/-- A variant of `app_inv_app` that gives an `eqToHom` instead of `homOfLe`. -/\n@[reassoc]\ntheorem app_inv_app' (U : Opens Y) (hU : (U : Set Y) ‚äÜ Set.range f.base) :\n    f.c.app (op U) ‚â´ invApp f ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        (eqToHom <|\n            le_antisymm (Set.image_preimage_subset f.base U.1) <|\n              (Set.image_preimage_eq_inter_range (f := f.base) (t := U.1)).symm ‚ñ∏\n                Set.subset_inter_iff.mpr ‚ü®fun _ h => h, hU‚ü©).op :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX : TopCat\nY : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X ‚ÜëY.toPresheafedSpace\nhf : Topology.IsOpenEmbedding ‚áëf\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (Y.ofRestrict hf)","decl":"instance ofRestrict {X : TopCat} (Y : SheafedSpace C) {f : X ‚ü∂ Y.carrier}\n    (hf : IsOpenEmbedding f) : IsOpenImmersion (Y.ofRestrict hf) :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict _ hf\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.ofRestrict_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX : AlgebraicGeometry.SheafedSpace C\nY : TopCat\nf : Quiver.Hom Y (TopCat.of ‚Üë‚ÜëX.toPresheafedSpace)\nh : Topology.IsOpenEmbedding ‚áëf\nU : TopologicalSpace.Opens ‚Üë‚Üë(X.restrict h).toPresheafedSpace\n‚ä¢ Eq (AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp (X.ofRestrict h) U) (CategoryTheory.CategoryStruct.id ((X.restrict h).presheaf.obj { unop := U }))","decl":"@[elementwise, simp]\ntheorem ofRestrict_invApp {C : Type*} [Category C] (X : SheafedSpace C) {Y : TopCat}\n    {f : Y ‚ü∂ TopCat.of X.carrier} (h : IsOpenEmbedding f) (U : Opens (X.restrict h).carrier) :\n    (SheafedSpace.IsOpenImmersion.ofRestrict X h).invApp _ U = ùüô _ :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict_invApp _ h U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.ofRestrict_invApp_apply","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u_1\ninst‚úù : CategoryTheory.Category.{u_2, u_1} C\nX : AlgebraicGeometry.SheafedSpace C\nY : TopCat\nf : Quiver.Hom Y (TopCat.of ‚Üë‚ÜëX.toPresheafedSpace)\nh : Topology.IsOpenEmbedding ‚áëf\nU : TopologicalSpace.Opens ‚Üë‚Üë(X.restrict h).toPresheafedSpace\ninst : CategoryTheory.HasForget C\nx : (CategoryTheory.forget C).obj ((X.restrict h).presheaf.obj { unop := U })\n‚ä¢ Eq ((AlgebraicGeometry.SheafedSpace.IsOpenImmersion.invApp (X.ofRestrict h) U) x) ((CategoryTheory.CategoryStruct.id ((X.restrict h).presheaf.obj { unop := U })) x)","decl":"@[elementwise, simp]\ntheorem ofRestrict_invApp {C : Type*} [Category C] (X : SheafedSpace C) {Y : TopCat}\n    {f : Y ‚ü∂ TopCat.of X.carrier} (h : IsOpenEmbedding f) (U : Opens (X.restrict h).carrier) :\n    (SheafedSpace.IsOpenImmersion.ofRestrict X h).invApp _ U = ùüô _ :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict_invApp _ h U\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.to_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.SheafedSpace.IsOpenImmersion f\nh' : CategoryTheory.Epi f.base\n‚ä¢ CategoryTheory.IsIso f","decl":"/-- An open immersion is an iso if the underlying continuous map is epi. -/\ntheorem to_iso [h' : Epi f.base] : IsIso f := by\n  haveI : IsIso (forgetToPresheafedSpace.map f) := PresheafedSpace.IsOpenImmersion.to_iso f\n  apply isIso_of_reflects_iso _ (SheafedSpace.forgetToPresheafedSpace)\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.stalk_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬π : CategoryTheory.Category.{v, u} C\nX Y : AlgebraicGeometry.SheafedSpace C\nf : Quiver.Hom X Y\ninst‚úù : CategoryTheory.Limits.HasColimits C\nx : ‚Üë‚ÜëX.toPresheafedSpace\n‚ä¢ CategoryTheory.IsIso (AlgebraicGeometry.PresheafedSpace.Hom.stalkMap f x)","decl":"instance stalk_iso [HasColimits C] (x : X) :\n    IsIso (f.stalkMap x) :=\n  PresheafedSpace.IsOpenImmersion.stalk_iso f x\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sigma_Œπ_isOpenEmbedding","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Limits.HasLimits C\nŒπ : Type v\nF : CategoryTheory.Functor (CategoryTheory.Discrete Œπ) (AlgebraicGeometry.SheafedSpace C)\ninst‚úù : CategoryTheory.Limits.HasColimit F\ni : CategoryTheory.Discrete Œπ\n‚ä¢ Topology.IsOpenEmbedding ‚áë(CategoryTheory.Limits.colimit.Œπ F i).base","decl":"theorem sigma_Œπ_isOpenEmbedding : IsOpenEmbedding (colimit.Œπ F i).base := by\n  rw [‚Üê show _ = (colimit.Œπ F i).base from Œπ_preservesColimitIso_inv (SheafedSpace.forget C) F i]\n  have : _ = _ ‚â´ colimit.Œπ (Discrete.functor ((F ‚ãô SheafedSpace.forget C).obj ‚àò Discrete.mk)) i :=\n    HasColimit.isoOfNatIso_Œπ_hom Discrete.natIsoFunctor i\n  rw [‚Üê Iso.eq_comp_inv] at this\n  rw [this]\n  have : colimit.Œπ _ _ ‚â´ _ = _ :=\n    TopCat.sigmaIsoSigma_hom_Œπ.{v, v} ((F ‚ãô SheafedSpace.forget C).obj ‚àò Discrete.mk) i.as\n  rw [‚Üê Iso.eq_comp_inv] at this\n  cases i\n  rw [this, ‚Üê Category.assoc]\n  -- Porting note: `simp_rw` can't use `TopCat.isOpenEmbedding_iff_comp_isIso` and\n  -- `TopCat.isOpenEmbedding_iff_isIso_comp`.\n  -- See https://github.com/leanprover-community/mathlib4/issues/5026\n  erw [TopCat.isOpenEmbedding_iff_comp_isIso, TopCat.isOpenEmbedding_iff_comp_isIso,\n    TopCat.isOpenEmbedding_iff_comp_isIso, TopCat.isOpenEmbedding_iff_isIso_comp]\n  exact .sigmaMk\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sigma_Œπ_openEmbedding","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Limits.HasLimits C\nŒπ : Type v\nF : CategoryTheory.Functor (CategoryTheory.Discrete Œπ) (AlgebraicGeometry.SheafedSpace C)\ninst‚úù : CategoryTheory.Limits.HasColimit F\ni : CategoryTheory.Discrete Œπ\n‚ä¢ Topology.IsOpenEmbedding ‚áë(CategoryTheory.Limits.colimit.Œπ F i).base","decl":"@[deprecated (since := \"2024-10-18\")]\nalias sigma_Œπ_openEmbedding := sigma_Œπ_isOpenEmbedding\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.image_preimage_is_empty","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬≤ : CategoryTheory.Category.{v, u} C\ninst‚úù¬π : CategoryTheory.Limits.HasLimits C\nŒπ : Type v\nF : CategoryTheory.Functor (CategoryTheory.Discrete Œπ) (AlgebraicGeometry.SheafedSpace C)\ninst‚úù : CategoryTheory.Limits.HasColimit F\ni j : CategoryTheory.Discrete Œπ\nh : Ne i j\nU : TopologicalSpace.Opens ‚Üë‚Üë(F.obj i).toPresheafedSpace\n‚ä¢ Eq ((TopologicalSpace.Opens.map (CategoryTheory.Limits.colimit.Œπ (F.comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace) j).base).obj ((TopologicalSpace.Opens.map (CategoryTheory.preservesColimitIso AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace F).inv.base).obj (‚ãØ.functor.obj U))) Bot.bot","decl":"theorem image_preimage_is_empty (j : Discrete Œπ) (h : i ‚â† j) (U : Opens (F.obj i)) :\n    (Opens.map (colimit.Œπ (F ‚ãô SheafedSpace.forgetToPresheafedSpace) j).base).obj\n        ((Opens.map (preservesColimitIso SheafedSpace.forgetToPresheafedSpace F).inv.base).obj\n          ((sigma_Œπ_isOpenEmbedding F i).isOpenMap.functor.obj U)) =\n      ‚ä• := by\n  ext x\n  apply iff_false_intro\n  rintro ‚ü®y, hy, eq‚ü©\n  replace eq := ConcreteCategory.congr_arg (preservesColimitIso (SheafedSpace.forget C) F ‚â™‚â´\n    HasColimit.isoOfNatIso Discrete.natIsoFunctor ‚â™‚â´ TopCat.sigmaIsoSigma.{v, v} _).hom eq\n  simp_rw [CategoryTheory.Iso.trans_hom, ‚Üê TopCat.comp_app, ‚Üê PresheafedSpace.comp_base] at eq\n  rw [Œπ_preservesColimitIso_inv] at eq\n  change\n    ((SheafedSpace.forget C).map (colimit.Œπ F i) ‚â´ _) y =\n      ((SheafedSpace.forget C).map (colimit.Œπ F j) ‚â´ _) x at eq\n  cases i; cases j\n  rw [Œπ_preservesColimitIso_hom_assoc, Œπ_preservesColimitIso_hom_assoc,\n    HasColimit.isoOfNatIso_Œπ_hom_assoc, HasColimit.isoOfNatIso_Œπ_hom_assoc,\n    TopCat.sigmaIsoSigma_hom_Œπ, TopCat.sigmaIsoSigma_hom_Œπ] at eq\n  exact h (congr_arg Discrete.mk (congr_arg Sigma.fst eq))\n\n"}
{"name":"AlgebraicGeometry.SheafedSpace.IsOpenImmersion.sigma_Œπ_isOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"C : Type u\ninst‚úù¬≥ : CategoryTheory.Category.{v, u} C\ninst‚úù¬≤ : CategoryTheory.Limits.HasLimits C\nŒπ : Type v\nF : CategoryTheory.Functor (CategoryTheory.Discrete Œπ) (AlgebraicGeometry.SheafedSpace C)\ninst‚úù¬π : CategoryTheory.Limits.HasColimit F\ni : CategoryTheory.Discrete Œπ\ninst‚úù : CategoryTheory.Limits.HasStrictTerminalObjects C\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (CategoryTheory.Limits.colimit.Œπ F i)","decl":"instance sigma_Œπ_isOpenImmersion [HasStrictTerminalObjects C] :\n    SheafedSpace.IsOpenImmersion (colimit.Œπ F i) where\n  base_open := sigma_Œπ_isOpenEmbedding F i\n  c_iso U := by\n    have e : colimit.Œπ F i = _ :=\n      (Œπ_preservesColimitIso_inv SheafedSpace.forgetToPresheafedSpace F i).symm\n    have H :\n      IsOpenEmbedding\n        (colimit.Œπ (F ‚ãô SheafedSpace.forgetToPresheafedSpace) i ‚â´\n            (preservesColimitIso SheafedSpace.forgetToPresheafedSpace F).inv).base :=\n      e ‚ñ∏ sigma_Œπ_isOpenEmbedding F i\n    suffices IsIso <| (colimit.Œπ (F ‚ãô SheafedSpace.forgetToPresheafedSpace) i ‚â´\n        (preservesColimitIso SheafedSpace.forgetToPresheafedSpace F).inv).c.app <|\n      op (H.isOpenMap.functor.obj U) by\n      -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11083): just `convert` is very slow, so helps it a bit\n      convert this using 2 <;> congr\n    rw [PresheafedSpace.comp_c_app,\n      ‚Üê PresheafedSpace.colimitPresheafObjIsoComponentwiseLimit_hom_œÄ]\n    -- Porting note: this instance created manually to make the `inferInstance` below work\n    have inst1 : IsIso (preservesColimitIso forgetToPresheafedSpace F).inv.c :=\n      PresheafedSpace.c_isIso_of_iso _\n    rsuffices : IsIso\n        (limit.œÄ\n          (PresheafedSpace.componentwiseDiagram (F ‚ãô SheafedSpace.forgetToPresheafedSpace)\n            ((Opens.map\n                  (preservesColimitIso SheafedSpace.forgetToPresheafedSpace F).inv.base).obj\n              (unop <| op <| H.isOpenMap.functor.obj U)))\n          (op i))\n    ¬∑ infer_instance\n    apply limit_œÄ_isIso_of_is_strict_terminal\n    intro j hj\n    induction j using Opposite.rec' with | h j => ?_\n    dsimp\n    convert (F.obj j).sheaf.isTerminalOfEmpty using 3\n    convert image_preimage_is_empty F i j (fun h => hj (congr_arg op h.symm)) U using 6\n    exact (congr_arg PresheafedSpace.Hom.base e).symm\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.instOfRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nU : TopCat\nf : Quiver.Hom U X.toTopCat\nhf : Topology.IsOpenEmbedding ‚áëf\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (X.ofRestrict hf)","decl":"instance (X : LocallyRingedSpace) {U : TopCat} (f : U ‚ü∂ X.toTopCat) (hf : IsOpenEmbedding f) :\n    LocallyRingedSpace.IsOpenImmersion (X.ofRestrict hf) :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict X.toPresheafedSpace hf\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.of_isIso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"Y Z : AlgebraicGeometry.LocallyRingedSpace\ng : Quiver.Hom Y Z\ninst‚úù : CategoryTheory.IsIso g\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion g","decl":"instance (priority := 100) of_isIso [IsIso g] : LocallyRingedSpace.IsOpenImmersion g :=\n  @PresheafedSpace.IsOpenImmersion.ofIsIso _ _ _ _ g.1\n    ‚ü®‚ü®(inv g).1, by\n        erw [‚Üê LocallyRingedSpace.comp_toShHom]; rw [IsIso.hom_inv_id]\n        erw [‚Üê LocallyRingedSpace.comp_toShHom]; rw [IsIso.inv_hom_id]; constructor <;> rfl‚ü©‚ü©\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.comp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\ng : Quiver.Hom Z Y\ninst‚úù : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion g\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (CategoryTheory.CategoryStruct.comp f g)","decl":"instance comp (g : Z ‚ü∂ Y) [LocallyRingedSpace.IsOpenImmersion g] :\n    LocallyRingedSpace.IsOpenImmersion (f ‚â´ g) :=\n  PresheafedSpace.IsOpenImmersion.comp f.1 g.1\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.mono","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\n‚ä¢ CategoryTheory.Mono f","decl":"instance mono : Mono f :=\n  LocallyRingedSpace.forgetToSheafedSpace.mono_of_mono_map (show Mono f.toShHom by infer_instance)\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.instIsOpenImmersionCommRingCatMapSheafedSpaceForgetToSheafedSpace","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.SheafedSpace.IsOpenImmersion (AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.map f)","decl":"instance : SheafedSpace.IsOpenImmersion (LocallyRingedSpace.forgetToSheafedSpace.map f) :=\n  H\n\n-- note to reviewers: is there a `count_heartbeats` for this?\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.instSndPullbackConeOfLeft","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.pullbackConeOfLeft f g).snd","decl":"instance : LocallyRingedSpace.IsOpenImmersion (pullbackConeOfLeft f g).snd :=\n  show PresheafedSpace.IsOpenImmersion (Y.toPresheafedSpace.ofRestrict _) by infer_instance\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.hasPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.HasPullback f g","decl":"instance hasPullback_of_left : HasPullback f g :=\n  ‚ü®‚ü®‚ü®_, pullbackConeOfLeftIsLimit f g‚ü©‚ü©‚ü©\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.hasPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.HasPullback g f","decl":"instance hasPullback_of_right : HasPullback g f :=\n  hasPullback_symmetry f g\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.pullback_snd_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (CategoryTheory.Limits.pullback.snd f g)","decl":"/-- Open immersions are stable under base-change. -/\ninstance pullback_snd_of_left :\n    LocallyRingedSpace.IsOpenImmersion (pullback.snd f g) := by\n  delta pullback.snd\n  rw [‚Üê limit.isoLimitCone_hom_œÄ ‚ü®_, pullbackConeOfLeftIsLimit f g‚ü© WalkingCospan.right]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.pullback_fst_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (CategoryTheory.Limits.pullback.fst g f)","decl":"/-- Open immersions are stable under base-change. -/\ninstance pullback_fst_of_right :\n    LocallyRingedSpace.IsOpenImmersion (pullback.fst g f) := by\n  rw [‚Üê pullbackSymmetry_hom_comp_snd]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.pullback_to_base_isOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\ninst‚úù : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion g\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (CategoryTheory.Limits.limit.œÄ (CategoryTheory.Limits.cospan f g) CategoryTheory.Limits.WalkingCospan.one)","decl":"instance pullback_to_base_isOpenImmersion [LocallyRingedSpace.IsOpenImmersion g] :\n    LocallyRingedSpace.IsOpenImmersion (limit.œÄ (cospan f g) WalkingCospan.one) := by\n  rw [‚Üê limit.w (cospan f g) WalkingCospan.Hom.inl, cospan_map_inl]\n  infer_instance\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forget_preservesPullbackOfLeft","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan f g) AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace","decl":"instance forget_preservesPullbackOfLeft :\n    PreservesLimit (cospan f g) LocallyRingedSpace.forgetToSheafedSpace :=\n  preservesLimit_of_preserves_limit_cone (pullbackConeOfLeftIsLimit f g) <| by\n    apply (isLimitMapConePullbackConeEquiv _ _).symm.toFun\n    apply isLimitOfIsLimitPullbackConeMap SheafedSpace.forgetToPresheafedSpace\n    exact PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftIsLimit f.1 g.1\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forgetToPresheafedSpace_preservesPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan f g) (AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace)","decl":"instance forgetToPresheafedSpace_preservesPullback_of_left :\n    PreservesLimit (cospan f g)\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace) :=\n  preservesLimit_of_preserves_limit_cone (pullbackConeOfLeftIsLimit f g) <| by\n    apply (isLimitMapConePullbackConeEquiv _ _).symm.toFun\n    exact PresheafedSpace.IsOpenImmersion.pullbackConeOfLeftIsLimit f.1 g.1\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forgetToPresheafedSpacePreservesOpenImmersion","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ AlgebraicGeometry.PresheafedSpace.IsOpenImmersion ((AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace).map f)","decl":"instance forgetToPresheafedSpacePreservesOpenImmersion :\n    PresheafedSpace.IsOpenImmersion\n      ((LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace).map f) :=\n  H\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forgetToTop_preservesPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan f g) (AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.comp (AlgebraicGeometry.SheafedSpace.forget CommRingCat))","decl":"instance forgetToTop_preservesPullback_of_left :\n    PreservesLimit (cospan f g)\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forget _) := by\n  change PreservesLimit _ <|\n    (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace) ‚ãô\n    PresheafedSpace.forget _\n  -- Porting note: was `apply (config := { instances := False }) ...`\n  -- See https://github.com/leanprover/lean4/issues/2273\n  have : PreservesLimit\n      (cospan ((cospan f g ‚ãô forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace).map\n        WalkingCospan.Hom.inl)\n      ((cospan f g ‚ãô forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace).map\n        WalkingCospan.Hom.inr)) (PresheafedSpace.forget CommRingCat) := by\n    dsimp; infer_instance\n  have : PreservesLimit (cospan f g ‚ãô forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace)\n      (PresheafedSpace.forget CommRingCat) := by\n    apply preservesLimit_of_iso_diagram _ (diagramIsoCospan _).symm\n  apply Limits.comp_preservesLimit\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forget_reflectsPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.ReflectsLimit (CategoryTheory.Limits.cospan f g) AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace","decl":"instance forget_reflectsPullback_of_left :\n    ReflectsLimit (cospan f g) LocallyRingedSpace.forgetToSheafedSpace :=\n  reflectsLimit_of_reflectsIsomorphisms _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forget_preservesPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan g f) AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace","decl":"instance forget_preservesPullback_of_right :\n    PreservesLimit (cospan g f) LocallyRingedSpace.forgetToSheafedSpace :=\n  preservesPullback_symmetry _ _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forgetToPresheafedSpace_preservesPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.PreservesLimit (CategoryTheory.Limits.cospan g f) (AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace)","decl":"instance forgetToPresheafedSpace_preservesPullback_of_right :\n    PreservesLimit (cospan g f)\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace) :=\n  preservesPullback_symmetry _ _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forget_reflectsPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.ReflectsLimit (CategoryTheory.Limits.cospan g f) AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace","decl":"instance forget_reflectsPullback_of_right :\n    ReflectsLimit (cospan g f) LocallyRingedSpace.forgetToSheafedSpace :=\n  reflectsLimit_of_reflectsIsomorphisms _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forgetToPresheafedSpace_reflectsPullback_of_left","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.ReflectsLimit (CategoryTheory.Limits.cospan f g) (AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace)","decl":"instance forgetToPresheafedSpace_reflectsPullback_of_left :\n    ReflectsLimit (cospan f g)\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace) :=\n  reflectsLimit_of_reflectsIsomorphisms _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.forgetToPresheafedSpace_reflectsPullback_of_right","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ CategoryTheory.Limits.ReflectsLimit (CategoryTheory.Limits.cospan g f) (AlgebraicGeometry.LocallyRingedSpace.forgetToSheafedSpace.comp AlgebraicGeometry.SheafedSpace.forgetToPresheafedSpace)","decl":"instance forgetToPresheafedSpace_reflectsPullback_of_right :\n    ReflectsLimit (cospan g f)\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace) :=\n  reflectsLimit_of_reflectsIsomorphisms _ _\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.pullback_snd_isIso_of_range_subset","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nH' : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\n‚ä¢ CategoryTheory.IsIso (CategoryTheory.Limits.pullback.snd f g)","decl":"theorem pullback_snd_isIso_of_range_subset (H' : Set.range g.base ‚äÜ Set.range f.base) :\n    IsIso (pullback.snd f g) := by\n  apply (config := {allowSynthFailures := true}) Functor.ReflectsIsomorphisms.reflects\n    (F := LocallyRingedSpace.forgetToSheafedSpace)\n  apply (config := {allowSynthFailures := true}) Functor.ReflectsIsomorphisms.reflects\n    (F := SheafedSpace.forgetToPresheafedSpace)\n  erw [‚Üê PreservesPullback.iso_hom_snd\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forgetToPresheafedSpace) f g]\n  -- Porting note: was `inferInstance`\n  exact IsIso.comp_isIso' inferInstance <|\n    PresheafedSpace.IsOpenImmersion.pullback_snd_isIso_of_range_subset _ _ H'\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift_fac_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z‚úù : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z‚úù\ng : Quiver.Hom Y Z‚úù\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nH' : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\nZ : AlgebraicGeometry.LocallyRingedSpace\nh : Quiver.Hom Z‚úù Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift f g H') (CategoryTheory.CategoryStruct.comp f h)) (CategoryTheory.CategoryStruct.comp g h)","decl":"@[simp, reassoc]\ntheorem lift_fac (H' : Set.range g.base ‚äÜ Set.range f.base) : lift f g H' ‚â´ f = g := by\n  erw [Category.assoc]; rw [IsIso.inv_comp_eq]; exact pullback.condition\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift_fac","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nH' : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift f g H') f) g","decl":"@[simp, reassoc]\ntheorem lift_fac (H' : Set.range g.base ‚äÜ Set.range f.base) : lift f g H' ‚â´ f = g := by\n  erw [Category.assoc]; rw [IsIso.inv_comp_eq]; exact pullback.condition\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift_uniq","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nH' : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\nl : Quiver.Hom Y X\nhl : Eq (CategoryTheory.CategoryStruct.comp l f) g\n‚ä¢ Eq l (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift f g H')","decl":"theorem lift_uniq (H' : Set.range g.base ‚äÜ Set.range f.base) (l : Y ‚ü∂ X) (hl : l ‚â´ f = g) :\n    l = lift f g H' := by rw [‚Üê cancel_mono f, hl, lift_fac]\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift_range","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y Z : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Z\ng : Quiver.Hom Y Z\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nH' : HasSubset.Subset (Set.range ‚áëg.base) (Set.range ‚áëf.base)\n‚ä¢ Eq (Set.range ‚áë(AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.lift f g H').base) (Set.preimage (‚áëf.base) (Set.range ‚áëg.base))","decl":"theorem lift_range (H' : Set.range g.base ‚äÜ Set.range f.base) :\n    Set.range (lift f g H').base = f.base ‚Åª¬π' Set.range g.base := by\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/10754): added instance manually\n  have := pullback_snd_isIso_of_range_subset f g H'\n  dsimp only [lift]\n  have : _ = (pullback.fst f g).base :=\n    PreservesPullback.iso_hom_fst\n      (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forget _) f g\n  rw [LocallyRingedSpace.comp_base, ‚Üê this, ‚Üê Category.assoc, coe_comp, Set.range_comp,\n      Set.range_eq_univ.mpr, Set.image_univ]\n  -- Porting note (https://github.com/leanprover-community/mathlib4/issues/11224): change `rw` to `erw` on this lemma\n  ¬∑ erw [TopCat.pullback_fst_range]\n    ext\n    constructor\n    ¬∑ rintro ‚ü®y, eq‚ü©; exact ‚ü®y, eq.symm‚ü©\n    ¬∑ rintro ‚ü®y, eq‚ü©; exact ‚ü®y, eq.symm‚ü©\n  ¬∑ rw [‚Üê TopCat.epi_iff_surjective, show (inv (pullback.snd f g)).base = _ from\n        (LocallyRingedSpace.forgetToSheafedSpace ‚ãô SheafedSpace.forget _).map_inv _]\n    infer_instance\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.of_stalk_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nhf : Topology.IsOpenEmbedding ‚áëf.base\nstalk_iso : ‚àÄ (x : ‚Üë‚ÜëX.toPresheafedSpace), CategoryTheory.IsIso (AlgebraicGeometry.LocallyRingedSpace.Hom.stalkMap f x)\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f","decl":"/-- Suppose `X Y : SheafedSpace C`, where `C` is a concrete category,\nwhose forgetful functor reflects isomorphisms, preserves limits and filtered colimits.\nThen a morphism `X ‚ü∂ Y` that is a topological open embedding\nis an open immersion iff every stalk map is an iso.\n-/\ntheorem of_stalk_iso {X Y : LocallyRingedSpace} (f : X ‚ü∂ Y) (hf : IsOpenEmbedding f.base)\n    [stalk_iso : ‚àÄ x : X.1, IsIso (f.stalkMap x)] :\n    LocallyRingedSpace.IsOpenImmersion f :=\n  SheafedSpace.IsOpenImmersion.of_stalk_iso _ hf (H := stalk_iso)\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict f).hom (Y.ofRestrict ‚ãØ)) f","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_hom_ofRestrict : (isoRestrict f).hom ‚â´ Y.ofRestrict _ = f := by\n  ext1\n  dsimp [isoRestrict, isoOfSheafedSpaceIso]\n  apply SheafedSpace.forgetToPresheafedSpace.map_injective\n  rw [Functor.map_comp, SheafedSpace.forgetToPresheafedSpace.map_preimage]\n  exact SheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict f.1\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.LocallyRingedSpace\nh : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict f).hom (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) h)) (CategoryTheory.CategoryStruct.comp f h)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_hom_ofRestrict : (isoRestrict f).hom ‚â´ Y.ofRestrict _ = f := by\n  ext1\n  dsimp [isoRestrict, isoOfSheafedSpaceIso]\n  apply SheafedSpace.forgetToPresheafedSpace.map_injective\n  rw [Functor.map_comp, SheafedSpace.forgetToPresheafedSpace.map_preimage]\n  exact SheafedSpace.IsOpenImmersion.isoRestrict_hom_ofRestrict f.1\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nZ : AlgebraicGeometry.LocallyRingedSpace\nh : Quiver.Hom Y Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict f).inv (CategoryTheory.CategoryStruct.comp f h)) (CategoryTheory.CategoryStruct.comp (Y.ofRestrict ‚ãØ) h)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_inv_ofRestrict : (isoRestrict f).inv ‚â´ f = Y.ofRestrict _ := by\n  simp only [‚Üê isoRestrict_hom_ofRestrict f, Iso.inv_hom_id_assoc]\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict_inv_ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.isoRestrict f).inv f) (Y.ofRestrict ‚ãØ)","decl":"@[reassoc (attr := simp)]\ntheorem isoRestrict_inv_ofRestrict : (isoRestrict f).inv ‚â´ f = Y.ofRestrict _ := by\n  simp only [‚Üê isoRestrict_hom_ofRestrict f, Iso.inv_hom_id_assoc]\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.inv_naturality","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU V : Opposite (TopologicalSpace.Opens ‚ÜëX.toTopCat)\ni : Quiver.Hom U V\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (X.presheaf.map i) (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f (Opposite.unop V))) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f (Opposite.unop U)) (Y.presheaf.map ((AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).op.map i)))","decl":"@[reassoc (attr := simp)]\ntheorem inv_naturality {U V : (Opens X)·µí·µñ} (i : U ‚ü∂ V) :\n    X.presheaf.map i ‚â´ H.invApp _ (unop V) =\n      H.invApp _ (unop U) ‚â´ Y.presheaf.map (opensFunctor f |>.op.map i) :=\n  PresheafedSpace.IsOpenImmersion.inv_naturality f.1 i\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.inv_naturality_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU V : Opposite (TopologicalSpace.Opens ‚ÜëX.toTopCat)\ni : Quiver.Hom U V\nZ : CommRingCat\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj (Opposite.unop V) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (X.presheaf.map i) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f (Opposite.unop V)) h)) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f (Opposite.unop U)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map ((AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).op.map i)) h))","decl":"@[reassoc (attr := simp)]\ntheorem inv_naturality {U V : (Opens X)·µí·µñ} (i : U ‚ü∂ V) :\n    X.presheaf.map i ‚â´ H.invApp _ (unop V) =\n      H.invApp _ (unop U) ‚â´ Y.presheaf.map (opensFunctor f |>.op.map i) :=\n  PresheafedSpace.IsOpenImmersion.inv_naturality f.1 i\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.instIsIsoCommRingCatInvApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëX.toTopCat\n‚ä¢ CategoryTheory.IsIso (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f U)","decl":"instance (U : Opens X) : IsIso (H.invApp _ U) := by delta invApp; infer_instance\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.inv_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëX.toTopCat\n‚ä¢ Eq (CategoryTheory.inv (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f U)) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj U }) (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)))","decl":"theorem inv_invApp (U : Opens X) :\n    inv (H.invApp _ U) =\n      f.c.app (op (opensFunctor f |>.obj U)) ‚â´ X.presheaf.map\n        (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) :=\n  PresheafedSpace.IsOpenImmersion.inv_invApp f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp_app","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëX.toTopCat\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f U) (f.c.app { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj U })) (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ))","decl":"@[reassoc (attr := simp)]\ntheorem invApp_app (U : Opens X) :\n    H.invApp _ U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) :=\n  PresheafedSpace.IsOpenImmersion.invApp_app f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp_app_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëX.toTopCat\nZ : CommRingCat\nh : Quiver.Hom (((TopCat.Presheaf.pushforward CommRingCat f.base).obj X.presheaf).obj { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj U }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f U) (CategoryTheory.CategoryStruct.comp (f.c.app { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj U }) h)) (CategoryTheory.CategoryStruct.comp (X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)) h)","decl":"@[reassoc (attr := simp)]\ntheorem invApp_app (U : Opens X) :\n    H.invApp _ U ‚â´ f.c.app (op (opensFunctor f |>.obj U)) = X.presheaf.map\n      (eqToHom (by simp [Opens.map, Set.preimage_image_eq _ H.base_open.injective])) :=\n  PresheafedSpace.IsOpenImmersion.invApp_app f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp_app_apply","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëX.toTopCat\nx : CategoryTheory.ToType (X.presheaf.obj { unop := U })\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (f.c.app { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj U })) ((CategoryTheory.ConcreteCategory.hom (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f U)) x)) ((X.presheaf.map (CategoryTheory.eqToHom ‚ãØ)) x)","decl":"attribute [elementwise nosimp] invApp_app\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.app_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëY.toTopCat\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U))) (Y.presheaf.map (CategoryTheory.homOfLE ‚ãØ).op)","decl":"@[reassoc (attr := simp)]\ntheorem app_invApp (U : Opens Y) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        ((homOfLE (Set.image_preimage_subset f.base U.1)).op :\n          op U ‚ü∂ op (opensFunctor f |>.obj ((Opens.map f.base).obj U))) :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.app_invApp_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëY.toTopCat\nZ : CommRingCat\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj ((TopologicalSpace.Opens.map f.base).obj U) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U)) h)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map (CategoryTheory.homOfLE ‚ãØ).op) h)","decl":"@[reassoc (attr := simp)]\ntheorem app_invApp (U : Opens Y) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        ((homOfLE (Set.image_preimage_subset f.base U.1)).op :\n          op U ‚ü∂ op (opensFunctor f |>.obj ((Opens.map f.base).obj U))) :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.app_inv_app'","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëY.toTopCat\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U))) (Y.presheaf.map (CategoryTheory.eqToHom ‚ãØ).op)","decl":"/-- A variant of `app_inv_app` that gives an `eqToHom` instead of `homOfLe`. -/\n@[reassoc]\ntheorem app_inv_app' (U : Opens Y) (hU : (U : Set Y) ‚äÜ Set.range f.base) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        (eqToHom <|\n            le_antisymm (Set.image_preimage_subset f.base U.1) <|\n              (Set.image_preimage_eq_inter_range (f := f.base) (t := U.1)).symm ‚ñ∏\n                Set.subset_inter_iff.mpr ‚ü®fun _ h => h, hU‚ü©).op :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.app_inv_app'_assoc","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nU : TopologicalSpace.Opens ‚ÜëY.toTopCat\nhU : HasSubset.Subset (‚ÜëU) (Set.range ‚áëf.base)\nZ : CommRingCat\nh : Quiver.Hom (Y.presheaf.obj { unop := (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.opensFunctor f).obj ((TopologicalSpace.Opens.map f.base).obj U) }) Z\n‚ä¢ Eq (CategoryTheory.CategoryStruct.comp (f.c.app { unop := U }) (CategoryTheory.CategoryStruct.comp (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp f ((TopologicalSpace.Opens.map f.base).obj U)) h)) (CategoryTheory.CategoryStruct.comp (Y.presheaf.map (CategoryTheory.eqToHom ‚ãØ).op) h)","decl":"/-- A variant of `app_inv_app` that gives an `eqToHom` instead of `homOfLe`. -/\n@[reassoc]\ntheorem app_inv_app' (U : Opens Y) (hU : (U : Set Y) ‚äÜ Set.range f.base) :\n    f.c.app (op U) ‚â´ H.invApp _ ((Opens.map f.base).obj U) =\n      Y.presheaf.map\n        (eqToHom <|\n            le_antisymm (Set.image_preimage_subset f.base U.1) <|\n              (Set.image_preimage_eq_inter_range (f := f.base) (t := U.1)).symm ‚ñ∏\n                Set.subset_inter_iff.mpr ‚ü®fun _ h => h, hU‚ü©).op :=\n  PresheafedSpace.IsOpenImmersion.app_invApp f.1 U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.ofRestrict","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : TopCat\nY : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X ‚ÜëY.toPresheafedSpace\nhf : Topology.IsOpenEmbedding ‚áëf\n‚ä¢ AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion (Y.ofRestrict hf)","decl":"instance ofRestrict {X : TopCat} (Y : LocallyRingedSpace) {f : X ‚ü∂ Y.carrier}\n    (hf : IsOpenEmbedding f) : IsOpenImmersion (Y.ofRestrict hf) :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict _ hf\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.ofRestrict_invApp","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nY : TopCat\nf : Quiver.Hom Y (TopCat.of ‚Üë‚ÜëX.toPresheafedSpace)\nh : Topology.IsOpenEmbedding ‚áëf\nU : TopologicalSpace.Opens ‚Üë‚Üë(X.restrict h).toPresheafedSpace\n‚ä¢ Eq (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp (X.ofRestrict h) U) (CategoryTheory.CategoryStruct.id ((X.restrict h).presheaf.obj { unop := U }))","decl":"@[elementwise, simp]\ntheorem ofRestrict_invApp (X : LocallyRingedSpace) {Y : TopCat}\n    {f : Y ‚ü∂ TopCat.of X.carrier} (h : IsOpenEmbedding f) (U : Opens (X.restrict h).carrier) :\n    (LocallyRingedSpace.IsOpenImmersion.ofRestrict X h).invApp _ U = ùüô _ :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict_invApp _ h U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.ofRestrict_invApp_apply","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X : AlgebraicGeometry.LocallyRingedSpace\nY : TopCat\nf : Quiver.Hom Y (TopCat.of ‚Üë‚ÜëX.toPresheafedSpace)\nh : Topology.IsOpenEmbedding ‚áëf\nU : TopologicalSpace.Opens ‚Üë‚Üë(X.restrict h).toPresheafedSpace\nx : CategoryTheory.ToType ((X.restrict h).presheaf.obj { unop := U })\n‚ä¢ Eq ((CategoryTheory.ConcreteCategory.hom (AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.invApp (X.ofRestrict h) U)) x) ((CategoryTheory.CategoryStruct.id (X.presheaf.obj { unop := ‚ãØ.functor.obj U })) x)","decl":"@[elementwise, simp]\ntheorem ofRestrict_invApp (X : LocallyRingedSpace) {Y : TopCat}\n    {f : Y ‚ü∂ TopCat.of X.carrier} (h : IsOpenEmbedding f) (U : Opens (X.restrict h).carrier) :\n    (LocallyRingedSpace.IsOpenImmersion.ofRestrict X h).invApp _ U = ùüô _ :=\n  PresheafedSpace.IsOpenImmersion.ofRestrict_invApp _ h U\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.stalk_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nx : ‚ÜëX.toTopCat\n‚ä¢ CategoryTheory.IsIso (AlgebraicGeometry.LocallyRingedSpace.Hom.stalkMap f x)","decl":"instance stalk_iso (x : X) : IsIso (f.stalkMap x) :=\n  PresheafedSpace.IsOpenImmersion.stalk_iso f.1 x\n\n"}
{"name":"AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion.to_iso","module":"Mathlib.Geometry.RingedSpace.OpenImmersion","initialProofState":"X Y : AlgebraicGeometry.LocallyRingedSpace\nf : Quiver.Hom X Y\nH : AlgebraicGeometry.LocallyRingedSpace.IsOpenImmersion f\nh' : CategoryTheory.Epi f.base\n‚ä¢ CategoryTheory.IsIso f","decl":"theorem to_iso [h' : Epi f.base] : IsIso f := by\n  suffices IsIso (LocallyRingedSpace.forgetToSheafedSpace.map f) from\n    isIso_of_reflects_iso _ LocallyRingedSpace.forgetToSheafedSpace\n  exact SheafedSpace.IsOpenImmersion.to_iso f.1\n\n"}
