{"name":"GaussianInt.mod_four_eq_three_of_nat_prime_of_prime","module":"Mathlib.NumberTheory.Zsqrtd.QuadraticReciprocity","initialProofState":"p : Nat\nhp : Fact (Nat.Prime p)\nhpi : Prime ↑p\n⊢ Eq (HMod.hMod p 4) 3","decl":"theorem mod_four_eq_three_of_nat_prime_of_prime (p : ℕ) [hp : Fact p.Prime]\n    (hpi : Prime (p : ℤ[i])) : p % 4 = 3 :=\n  hp.1.eq_two_or_odd.elim\n    (fun hp2 =>\n      absurd hpi\n        (mt irreducible_iff_prime.2 fun ⟨_, h⟩ => by\n          have := h ⟨1, 1⟩ ⟨1, -1⟩ (hp2.symm ▸ rfl)\n          rw [← norm_eq_one_iff, ← norm_eq_one_iff] at this\n          exact absurd this (by decide)))\n    fun hp1 =>\n    by_contradiction fun hp3 : p % 4 ≠ 3 => by\n      have hp41 : p % 4 = 1 := by omega\n      let ⟨k, hk⟩ := (ZMod.exists_sq_eq_neg_one_iff (p := p)).2 <| by rw [hp41]; decide\n      obtain ⟨k, k_lt_p, rfl⟩ : ∃ (k' : ℕ) (_ : k' < p), (k' : ZMod p) = k := by\n        exact ⟨k.val, k.val_lt, ZMod.natCast_zmod_val k⟩\n      have hpk : p ∣ k ^ 2 + 1 := by\n        rw [pow_two, ← CharP.cast_eq_zero_iff (ZMod p) p, Nat.cast_add, Nat.cast_mul, Nat.cast_one,\n          ← hk, neg_add_cancel]\n      have hkmul : (k ^ 2 + 1 : ℤ[i]) = ⟨k, 1⟩ * ⟨k, -1⟩ := by ext <;> simp [sq]\n      have hkltp : 1 + k * k < p * p :=\n        calc\n          1 + k * k ≤ k + k * k := by\n            apply add_le_add_right\n            exact (Nat.pos_of_ne_zero fun (hk0 : k = 0) => by clear_aux_decl; simp_all [pow_succ'])\n          _ = k * (k + 1) := by simp [add_comm, mul_add]\n          _ < p * p := mul_lt_mul k_lt_p k_lt_p (Nat.succ_pos _) (Nat.zero_le _)\n      have hpk₁ : ¬(p : ℤ[i]) ∣ ⟨k, -1⟩ := fun ⟨x, hx⟩ =>\n        lt_irrefl (p * x : ℤ[i]).norm.natAbs <|\n          calc\n            (norm (p * x : ℤ[i])).natAbs = (Zsqrtd.norm ⟨k, -1⟩).natAbs := by rw [hx]\n            _ < (norm (p : ℤ[i])).natAbs := by simpa [add_comm, Zsqrtd.norm] using hkltp\n            _ ≤ (norm (p * x : ℤ[i])).natAbs :=\n              norm_le_norm_mul_left _ fun hx0 =>\n                show (-1 : ℤ) ≠ 0 by decide <| by simpa [hx0] using congr_arg Zsqrtd.im hx\n      have hpk₂ : ¬(p : ℤ[i]) ∣ ⟨k, 1⟩ := fun ⟨x, hx⟩ =>\n        lt_irrefl (p * x : ℤ[i]).norm.natAbs <|\n          calc\n            (norm (p * x : ℤ[i])).natAbs = (Zsqrtd.norm ⟨k, 1⟩).natAbs := by rw [hx]\n            _ < (norm (p : ℤ[i])).natAbs := by simpa [add_comm, Zsqrtd.norm] using hkltp\n            _ ≤ (norm (p * x : ℤ[i])).natAbs :=\n              norm_le_norm_mul_left _ fun hx0 =>\n                show (1 : ℤ) ≠ 0 by decide <| by simpa [hx0] using congr_arg Zsqrtd.im hx\n      obtain ⟨y, hy⟩ := hpk\n      have := hpi.2.2 ⟨k, 1⟩ ⟨k, -1⟩ ⟨y, by rw [← hkmul, ← Nat.cast_mul p, ← hy]; simp⟩\n      clear_aux_decl\n      tauto\n\n"}
{"name":"GaussianInt.prime_of_nat_prime_of_mod_four_eq_three","module":"Mathlib.NumberTheory.Zsqrtd.QuadraticReciprocity","initialProofState":"p : Nat\ninst✝ : Fact (Nat.Prime p)\nhp3 : Eq (HMod.hMod p 4) 3\n⊢ Prime ↑p","decl":"theorem prime_of_nat_prime_of_mod_four_eq_three (p : ℕ) [Fact p.Prime] (hp3 : p % 4 = 3) :\n    Prime (p : ℤ[i]) :=\n  irreducible_iff_prime.1 <|\n    by_contradiction fun hpi =>\n      let ⟨a, b, hab⟩ := sq_add_sq_of_nat_prime_of_not_irreducible p hpi\n      have : ∀ a b : ZMod 4, a ^ 2 + b ^ 2 ≠ (p : ZMod 4) := by\n        rw [← ZMod.natCast_mod p 4, hp3]; decide\n      this a b (hab ▸ by simp)\n\n"}
{"name":"GaussianInt.prime_iff_mod_four_eq_three_of_nat_prime","module":"Mathlib.NumberTheory.Zsqrtd.QuadraticReciprocity","initialProofState":"p : Nat\ninst✝ : Fact (Nat.Prime p)\n⊢ Iff (Prime ↑p) (Eq (HMod.hMod p 4) 3)","decl":"/-- A prime natural number is prime in `ℤ[i]` if and only if it is `3` mod `4` -/\ntheorem prime_iff_mod_four_eq_three_of_nat_prime (p : ℕ) [Fact p.Prime] :\n    Prime (p : ℤ[i]) ↔ p % 4 = 3 :=\n  ⟨mod_four_eq_three_of_nat_prime_of_prime p, prime_of_nat_prime_of_mod_four_eq_three p⟩\n\n"}
