{"name":"AddMonoidHom.coe_smul","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nA : Type u_4\nB : Type u_5\ninst✝³ : Monoid R\ninst✝² : AddMonoid A\ninst✝¹ : AddCommMonoid B\ninst✝ : DistribMulAction R B\nr : R\nf : AddMonoidHom A B\n⊢ Eq (⇑(HSMul.hSMul r f)) (HSMul.hSMul r ⇑f)","decl":"@[simp] theorem coe_smul (r : R) (f : A →+ B) : ⇑(r • f) = r • ⇑f := rfl\n\n"}
{"name":"AddMonoidHom.smul_apply","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nA : Type u_4\nB : Type u_5\ninst✝³ : Monoid R\ninst✝² : AddMonoid A\ninst✝¹ : AddCommMonoid B\ninst✝ : DistribMulAction R B\nr : R\nf : AddMonoidHom A B\nx : A\n⊢ Eq ((HSMul.hSMul r f) x) (HSMul.hSMul r (f x))","decl":"theorem smul_apply (r : R) (f : A →+ B) (x : A) : (r • f) x = r • f x :=\n  rfl\n\n"}
{"name":"AddMonoidHom.smulCommClass","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nS : Type u_2\nA : Type u_4\nB : Type u_5\ninst✝⁶ : Monoid R\ninst✝⁵ : Monoid S\ninst✝⁴ : AddMonoid A\ninst✝³ : AddCommMonoid B\ninst✝² : DistribMulAction R B\ninst✝¹ : DistribMulAction S B\ninst✝ : SMulCommClass R S B\n⊢ SMulCommClass R S (AddMonoidHom A B)","decl":"instance smulCommClass [SMulCommClass R S B] : SMulCommClass R S (A →+ B) :=\n  ⟨fun _ _ _ => ext fun _ => smul_comm _ _ _⟩\n\n"}
{"name":"AddMonoidHom.isScalarTower","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nS : Type u_2\nA : Type u_4\nB : Type u_5\ninst✝⁷ : Monoid R\ninst✝⁶ : Monoid S\ninst✝⁵ : AddMonoid A\ninst✝⁴ : AddCommMonoid B\ninst✝³ : DistribMulAction R B\ninst✝² : DistribMulAction S B\ninst✝¹ : SMul R S\ninst✝ : IsScalarTower R S B\n⊢ IsScalarTower R S (AddMonoidHom A B)","decl":"instance isScalarTower [SMul R S] [IsScalarTower R S B] : IsScalarTower R S (A →+ B) :=\n  ⟨fun _ _ _ => ext fun _ => smul_assoc _ _ _⟩\n\n"}
{"name":"AddMonoidHom.isCentralScalar","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nA : Type u_4\nB : Type u_5\ninst✝⁵ : Monoid R\ninst✝⁴ : AddMonoid A\ninst✝³ : AddCommMonoid B\ninst✝² : DistribMulAction R B\ninst✝¹ : DistribMulAction (MulOpposite R) B\ninst✝ : IsCentralScalar R B\n⊢ IsCentralScalar R (AddMonoidHom A B)","decl":"instance isCentralScalar [DistribMulAction Rᵐᵒᵖ B] [IsCentralScalar R B] :\n    IsCentralScalar R (A →+ B) :=\n  ⟨fun _ _ => ext fun _ => op_smul_eq_smul _ _⟩\n\n"}
{"name":"AddMonoid.End.coe_smul","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nA : Type u_4\ninst✝² : Monoid R\ninst✝¹ : AddCommMonoid A\ninst✝ : DistribMulAction R A\nr : R\nf : AddMonoid.End A\n⊢ Eq (⇑(HSMul.hSMul r f)) (HSMul.hSMul r ⇑f)","decl":"@[simp] theorem coe_smul (r : R) (f : AddMonoid.End A) : ⇑(r • f) = r • ⇑f := rfl\n\n"}
{"name":"AddMonoid.End.smul_apply","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nA : Type u_4\ninst✝² : Monoid R\ninst✝¹ : AddCommMonoid A\ninst✝ : DistribMulAction R A\nr : R\nf : AddMonoid.End A\nx : A\n⊢ Eq ((HSMul.hSMul r f) x) (HSMul.hSMul r (f x))","decl":"theorem smul_apply (r : R) (f : AddMonoid.End A) (x : A) : (r • f) x = r • f x :=\n  rfl\n\n"}
{"name":"AddMonoid.End.smulCommClass","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nS : Type u_2\nA : Type u_4\ninst✝⁵ : Monoid R\ninst✝⁴ : Monoid S\ninst✝³ : AddCommMonoid A\ninst✝² : DistribMulAction R A\ninst✝¹ : DistribMulAction S A\ninst✝ : SMulCommClass R S A\n⊢ SMulCommClass R S (AddMonoid.End A)","decl":"instance smulCommClass [SMulCommClass R S A] : SMulCommClass R S (AddMonoid.End A) :=\n  AddMonoidHom.smulCommClass\n\n"}
{"name":"AddMonoid.End.isScalarTower","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nS : Type u_2\nA : Type u_4\ninst✝⁶ : Monoid R\ninst✝⁵ : Monoid S\ninst✝⁴ : AddCommMonoid A\ninst✝³ : DistribMulAction R A\ninst✝² : DistribMulAction S A\ninst✝¹ : SMul R S\ninst✝ : IsScalarTower R S A\n⊢ IsScalarTower R S (AddMonoid.End A)","decl":"instance isScalarTower [SMul R S] [IsScalarTower R S A] : IsScalarTower R S (AddMonoid.End A) :=\n  AddMonoidHom.isScalarTower\n\n"}
{"name":"AddMonoid.End.isCentralScalar","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nA : Type u_4\ninst✝⁴ : Monoid R\ninst✝³ : AddCommMonoid A\ninst✝² : DistribMulAction R A\ninst✝¹ : DistribMulAction (MulOpposite R) A\ninst✝ : IsCentralScalar R A\n⊢ IsCentralScalar R (AddMonoid.End A)","decl":"instance isCentralScalar [DistribMulAction Rᵐᵒᵖ A] [IsCentralScalar R A] :\n    IsCentralScalar R (AddMonoid.End A) :=\n  AddMonoidHom.isCentralScalar\n\n"}
{"name":"AddMonoidHom.smulLeft_apply","module":"Mathlib.Algebra.Module.Hom","initialProofState":"M : Type u_3\nA : Type u_4\ninst✝² : Monoid M\ninst✝¹ : AddMonoid A\ninst✝ : DistribMulAction M A\nc : M\n⊢ Eq ⇑(AddMonoidHom.smulLeft c) fun x => HSMul.hSMul c x","decl":"/-- Scalar multiplication on the left as an additive monoid homomorphism. -/\n@[simps! (config := .asFn)]\nprotected def smulLeft [Monoid M] [AddMonoid A] [DistribMulAction M A] (c : M) : A →+ A :=\n  DistribMulAction.toAddMonoidHom _ c\n\n"}
{"name":"AddMonoidHom.coe_smul'","module":"Mathlib.Algebra.Module.Hom","initialProofState":"R : Type u_1\nM : Type u_3\ninst✝² : Semiring R\ninst✝¹ : AddCommMonoid M\ninst✝ : Module R M\n⊢ Eq (⇑AddMonoidHom.smul) AddMonoidHom.smulLeft","decl":"@[simp] theorem coe_smul' [Semiring R] [AddCommMonoid M] [Module R M] :\n    ⇑(.smul : R →+ M →+ M) = AddMonoidHom.smulLeft := rfl\n\n"}
