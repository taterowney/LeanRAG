{"name":"PartialDiffeomorph.contMDiffOn_invFun","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nself : PartialDiffeomorph I J M N n\n⊢ ContMDiffOn J I n self.invFun self.target","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.mk.injEq","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\ntoPartialEquiv✝ : PartialEquiv M N\nopen_source✝ : IsOpen toPartialEquiv✝.source\nopen_target✝ : IsOpen toPartialEquiv✝.target\ncontMDiffOn_toFun✝ : ContMDiffOn I J n (↑toPartialEquiv✝) toPartialEquiv✝.source\ncontMDiffOn_invFun✝ : ContMDiffOn J I n toPartialEquiv✝.invFun toPartialEquiv✝.target\ntoPartialEquiv : PartialEquiv M N\nopen_source : IsOpen toPartialEquiv.source\nopen_target : IsOpen toPartialEquiv.target\ncontMDiffOn_toFun : ContMDiffOn I J n (↑toPartialEquiv) toPartialEquiv.source\ncontMDiffOn_invFun : ContMDiffOn J I n toPartialEquiv.invFun toPartialEquiv.target\n⊢ Eq (Eq { toPartialEquiv := toPartialEquiv✝, open_source := open_source✝, open_target := open_target✝, contMDiffOn_toFun := contMDiffOn_toFun✝, contMDiffOn_invFun := contMDiffOn_invFun✝ } { toPartialEquiv := toPartialEquiv, open_source := open_source, open_target := open_target, contMDiffOn_toFun := contMDiffOn_toFun, contMDiffOn_invFun := contMDiffOn_invFun }) (Eq toPartialEquiv✝ toPartialEquiv)","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.mk.inj","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\ntoPartialEquiv✝ : PartialEquiv M N\nopen_source✝ : IsOpen toPartialEquiv✝.source\nopen_target✝ : IsOpen toPartialEquiv✝.target\ncontMDiffOn_toFun✝ : ContMDiffOn I J n (↑toPartialEquiv✝) toPartialEquiv✝.source\ncontMDiffOn_invFun✝ : ContMDiffOn J I n toPartialEquiv✝.invFun toPartialEquiv✝.target\ntoPartialEquiv : PartialEquiv M N\nopen_source : IsOpen toPartialEquiv.source\nopen_target : IsOpen toPartialEquiv.target\ncontMDiffOn_toFun : ContMDiffOn I J n (↑toPartialEquiv) toPartialEquiv.source\ncontMDiffOn_invFun : ContMDiffOn J I n toPartialEquiv.invFun toPartialEquiv.target\nx✝ : Eq { toPartialEquiv := toPartialEquiv✝, open_source := open_source✝, open_target := open_target✝, contMDiffOn_toFun := contMDiffOn_toFun✝, contMDiffOn_invFun := contMDiffOn_invFun✝ } { toPartialEquiv := toPartialEquiv, open_source := open_source, open_target := open_target, contMDiffOn_toFun := contMDiffOn_toFun, contMDiffOn_invFun := contMDiffOn_invFun }\n⊢ Eq toPartialEquiv✝ toPartialEquiv","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.mk.sizeOf_spec","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁷ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝¹⁶ : NormedAddCommGroup E\ninst✝¹⁵ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝¹⁴ : NormedAddCommGroup F\ninst✝¹³ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝¹² : TopologicalSpace H\nG : Type u_5\ninst✝¹¹ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝¹⁰ : TopologicalSpace M\ninst✝⁹ : ChartedSpace H M\nN : Type u_7\ninst✝⁸ : TopologicalSpace N\ninst✝⁷ : ChartedSpace G N\nn : WithTop ENat\ninst✝⁶ : SizeOf 𝕜\ninst✝⁵ : SizeOf E\ninst✝⁴ : SizeOf F\ninst✝³ : SizeOf H\ninst✝² : SizeOf G\ninst✝¹ : SizeOf M\ninst✝ : SizeOf N\ntoPartialEquiv : PartialEquiv M N\nopen_source : IsOpen toPartialEquiv.source\nopen_target : IsOpen toPartialEquiv.target\ncontMDiffOn_toFun : ContMDiffOn I J n (↑toPartialEquiv) toPartialEquiv.source\ncontMDiffOn_invFun : ContMDiffOn J I n toPartialEquiv.invFun toPartialEquiv.target\n⊢ Eq (SizeOf.sizeOf { toPartialEquiv := toPartialEquiv, open_source := open_source, open_target := open_target, contMDiffOn_toFun := contMDiffOn_toFun, contMDiffOn_invFun := contMDiffOn_invFun }) (HAdd.hAdd (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toPartialEquiv)) (SizeOf.sizeOf open_source)) (SizeOf.sizeOf open_target))","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.contMDiffOn_toFun","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nself : PartialDiffeomorph I J M N n\n⊢ ContMDiffOn I J n (↑self.toPartialEquiv) self.source","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.open_target","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nself : PartialDiffeomorph I J M N n\n⊢ IsOpen self.target","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.open_source","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nself : PartialDiffeomorph I J M N n\n⊢ IsOpen self.source","decl":"/-- A partial diffeomorphism on `s` is a function `f : M → N` such that `f` restricts to a\ndiffeomorphism `s → t` between open subsets of `M` and `N`, respectively.\nThis is an auxiliary definition and should not be used outside of this file. -/\nstructure PartialDiffeomorph extends PartialEquiv M N where\n  open_source : IsOpen source\n  open_target : IsOpen target\n  contMDiffOn_toFun : ContMDiffOn I J n toFun source\n  contMDiffOn_invFun : ContMDiffOn J I n invFun target\n\n"}
{"name":"PartialDiffeomorph.contMDiffOn","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nΦ : PartialDiffeomorph I J M N n\n⊢ ContMDiffOn I J n (↑Φ.toPartialEquiv) Φ.source","decl":"protected theorem contMDiffOn : ContMDiffOn I J n Φ Φ.source :=\n  Φ.contMDiffOn_toFun\n\n"}
{"name":"PartialDiffeomorph.mdifferentiableOn","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nΦ : PartialDiffeomorph I J M N n\nhn : LE.le 1 n\n⊢ MDifferentiableOn I J (↑Φ.toPartialEquiv) Φ.source","decl":"protected theorem mdifferentiableOn (hn : 1 ≤ n) : MDifferentiableOn I J Φ Φ.source :=\n  (Φ.contMDiffOn).mdifferentiableOn hn\n\n"}
{"name":"PartialDiffeomorph.mdifferentiableAt","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nΦ : PartialDiffeomorph I J M N n\nhn : LE.le 1 n\nx : M\nhx : Membership.mem Φ.source x\n⊢ MDifferentiableAt I J (↑Φ.toPartialEquiv) x","decl":"protected theorem mdifferentiableAt (hn : 1 ≤ n) {x : M} (hx : x ∈ Φ.source) :\n    MDifferentiableAt I J Φ x :=\n  (Φ.mdifferentiableOn hn x hx).mdifferentiableAt (Φ.open_source.mem_nhds hx)\n\n/- We could add lots of additional API (following `Diffeomorph` and `PartialHomeomorph`), such as\n* further continuity and differentiability lemmas\n* refl and trans instances; lemmas between them.\nAs this declaration is meant for internal use only, we keep it simple. -/\n"}
{"name":"isLocalDiffeomorphOn_iff","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\ns : Set M\n⊢ Iff (IsLocalDiffeomorphOn I J n f s) (∀ (x : ↑s), IsLocalDiffeomorphAt I J n f ↑x)","decl":"variable {I J n} in\nlemma isLocalDiffeomorphOn_iff {f : M → N} (s : Set M) :\n    IsLocalDiffeomorphOn I J n f s ↔ ∀ x : s, IsLocalDiffeomorphAt I J n f x := by rfl\n\n"}
{"name":"isLocalDiffeomorph_iff","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\n⊢ Iff (IsLocalDiffeomorph I J n f) (∀ (x : M), IsLocalDiffeomorphAt I J n f x)","decl":"variable {I J n} in\nlemma isLocalDiffeomorph_iff {f : M → N} :\n    IsLocalDiffeomorph I J n f ↔ ∀ x : M, IsLocalDiffeomorphAt I J n f x := by rfl\n\n"}
{"name":"isLocalDiffeomorph_iff_isLocalDiffeomorphOn_univ","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\n⊢ Iff (IsLocalDiffeomorph I J n f) (IsLocalDiffeomorphOn I J n f Set.univ)","decl":"variable {I J n} in\ntheorem isLocalDiffeomorph_iff_isLocalDiffeomorphOn_univ {f : M → N} :\n    IsLocalDiffeomorph I J n f ↔ IsLocalDiffeomorphOn I J n f Set.univ :=\n  ⟨fun hf x ↦ hf x, fun hf x ↦ hf ⟨x, trivial⟩⟩\n\n"}
{"name":"IsLocalDiffeomorph.isLocalDiffeomorphOn","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\ns : Set M\n⊢ IsLocalDiffeomorphOn I J n f s","decl":"variable {I J n} in\nlemma IsLocalDiffeomorph.isLocalDiffeomorphOn\n    {f : M → N} (hf : IsLocalDiffeomorph I J n f) (s : Set M) : IsLocalDiffeomorphOn I J n f s :=\n  fun x ↦ hf x\n\n"}
{"name":"IsLocalDiffeomorphAt.contMDiffAt","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nx : M\nhf : IsLocalDiffeomorphAt I J n f x\n⊢ ContMDiffAt I J n f x","decl":"/-- A `C^n` local diffeomorphism at `x` is `C^n` differentiable at `x`. -/\nlemma IsLocalDiffeomorphAt.contMDiffAt (hf : IsLocalDiffeomorphAt I J n f x) :\n    ContMDiffAt I J n f x := by\n  choose Φ hx heq using hf\n  -- In fact, even `ContMDiffOn I J n f Φ.source`.\n  exact ((Φ.contMDiffOn_toFun).congr heq).contMDiffAt (Φ.open_source.mem_nhds hx)\n\n"}
{"name":"IsLocalDiffeomorphAt.mdifferentiableAt","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nx : M\nhf : IsLocalDiffeomorphAt I J n f x\nhn : LE.le 1 n\n⊢ MDifferentiableAt I J f x","decl":"/-- A local diffeomorphism at `x` is differentiable at `x`. -/\nlemma IsLocalDiffeomorphAt.mdifferentiableAt (hf : IsLocalDiffeomorphAt I J n f x) (hn : 1 ≤ n) :\n    MDifferentiableAt I J f x :=\n  hf.contMDiffAt.mdifferentiableAt hn\n\n"}
{"name":"IsLocalDiffeomorphOn.contMDiffOn","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\ns : Set M\nhf : IsLocalDiffeomorphOn I J n f s\n⊢ ContMDiffOn I J n f s","decl":"/-- A `C^n` local diffeomorphism on `s` is `C^n` on `s`. -/\nlemma IsLocalDiffeomorphOn.contMDiffOn (hf : IsLocalDiffeomorphOn I J n f s) :\n    ContMDiffOn I J n f s :=\n  fun x hx ↦ (hf ⟨x, hx⟩).contMDiffAt.contMDiffWithinAt\n\n"}
{"name":"IsLocalDiffeomorphOn.mdifferentiableOn","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\ns : Set M\nhf : IsLocalDiffeomorphOn I J n f s\nhn : LE.le 1 n\n⊢ MDifferentiableOn I J f s","decl":"/-- A local diffeomorphism on `s` is differentiable on `s`. -/\nlemma IsLocalDiffeomorphOn.mdifferentiableOn (hf : IsLocalDiffeomorphOn I J n f s) (hn : 1 ≤ n) :\n    MDifferentiableOn I J f s :=\n  hf.contMDiffOn.mdifferentiableOn hn\n\n"}
{"name":"IsLocalDiffeomorph.contMDiff","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\n⊢ ContMDiff I J n f","decl":"/-- A `C^n` local diffeomorphism is `C^n`. -/\nlemma IsLocalDiffeomorph.contMDiff (hf : IsLocalDiffeomorph I J n f) : ContMDiff I J n f :=\n  fun x ↦ (hf x).contMDiffAt\n\n"}
{"name":"IsLocalDiffeomorph.mdifferentiable","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\nhn : LE.le 1 n\n⊢ MDifferentiable I J f","decl":"/-- A `C^n` local diffeomorphism is differentiable. -/\nlemma IsLocalDiffeomorph.mdifferentiable (hf : IsLocalDiffeomorph I J n f) (hn : 1 ≤ n) :\n    MDifferentiable I J f :=\n  fun x ↦ (hf x).mdifferentiableAt hn\n\n"}
{"name":"Diffeomorph.isLocalDiffeomorph","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nΦ : Diffeomorph I J M N n\n⊢ IsLocalDiffeomorph I J n ⇑Φ","decl":"/-- A `C^n` diffeomorphism is a local diffeomorphism. -/\nlemma Diffeomorph.isLocalDiffeomorph (Φ : M ≃ₘ^n⟮I, J⟯ N) : IsLocalDiffeomorph I J n Φ :=\n  fun _x ↦ ⟨Φ.toPartialDiffeomorph, by trivial, eqOn_refl Φ _⟩\n\n-- FUTURE: if useful, also add \"a `PartialDiffeomorph` is a local diffeomorphism on its source\"\n\n"}
{"name":"IsLocalDiffeomorphOn.isLocalHomeomorphOn","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\ns : Set M\nhf : IsLocalDiffeomorphOn I J n f s\n⊢ IsLocalHomeomorphOn f s","decl":"/-- A local diffeomorphism on `s` is a local homeomorphism on `s`. -/\ntheorem IsLocalDiffeomorphOn.isLocalHomeomorphOn {s : Set M} (hf : IsLocalDiffeomorphOn I J n f s) :\n    IsLocalHomeomorphOn f s := by\n  apply IsLocalHomeomorphOn.mk\n  intro x hx\n  choose U hyp using hf ⟨x, hx⟩\n  exact ⟨U.toPartialHomeomorph, hyp⟩\n\n"}
{"name":"IsLocalDiffeomorph.isLocalHomeomorph","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\n⊢ IsLocalHomeomorph f","decl":"/-- A local diffeomorphism is a local homeomorphism. -/\ntheorem IsLocalDiffeomorph.isLocalHomeomorph (hf : IsLocalDiffeomorph I J n f) :\n    IsLocalHomeomorph f := by\n  rw [isLocalHomeomorph_iff_isLocalHomeomorphOn_univ]\n  rw [isLocalDiffeomorph_iff_isLocalDiffeomorphOn_univ] at hf\n  exact hf.isLocalHomeomorphOn\n\n"}
{"name":"IsLocalDiffeomorph.isOpenMap","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\n⊢ IsOpenMap f","decl":"/-- A local diffeomorphism is an open map. -/\nlemma IsLocalDiffeomorph.isOpenMap (hf : IsLocalDiffeomorph I J n f) : IsOpenMap f :=\n  (hf.isLocalHomeomorph).isOpenMap\n\n"}
{"name":"IsLocalDiffeomorph.isOpen_range","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\n⊢ IsOpen (Set.range f)","decl":"/-- A local diffeomorphism has open range. -/\nlemma IsLocalDiffeomorph.isOpen_range (hf : IsLocalDiffeomorph I J n f) : IsOpen (range f) :=\n  (hf.isOpenMap).isOpen_range\n\n"}
{"name":"IsLocalDiffeomorph.image_coe","module":"Mathlib.Geometry.Manifold.LocalDiffeomorph","initialProofState":"𝕜 : Type u_1\ninst✝¹⁰ : NontriviallyNormedField 𝕜\nE : Type u_2\ninst✝⁹ : NormedAddCommGroup E\ninst✝⁸ : NormedSpace 𝕜 E\nF : Type u_3\ninst✝⁷ : NormedAddCommGroup F\ninst✝⁶ : NormedSpace 𝕜 F\nH : Type u_4\ninst✝⁵ : TopologicalSpace H\nG : Type u_5\ninst✝⁴ : TopologicalSpace G\nI : ModelWithCorners 𝕜 E H\nJ : ModelWithCorners 𝕜 F G\nM : Type u_6\ninst✝³ : TopologicalSpace M\ninst✝² : ChartedSpace H M\nN : Type u_7\ninst✝¹ : TopologicalSpace N\ninst✝ : ChartedSpace G N\nn : WithTop ENat\nf : M → N\nhf : IsLocalDiffeomorph I J n f\n⊢ Eq hf.image.carrier (Set.range f)","decl":"lemma IsLocalDiffeomorph.image_coe (hf : IsLocalDiffeomorph I J n f) : hf.image.1 = range f :=\n  rfl\n\n-- TODO: this result holds more generally for (local) structomorphisms\n-- This argument implies a `LocalDiffeomorphOn f s` for `s` open is a `PartialDiffeomorph`\n\n"}
