{"name":"legendreSym.at_two","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p : Nat\ninst✝ : Fact (Nat.Prime p)\nhp : Ne p 2\n⊢ Eq (legendreSym p 2) (ZMod.χ₈ ↑p)","decl":"/-- `legendreSym p 2` is given by `χ₈ p`. -/\ntheorem at_two (hp : p ≠ 2) : legendreSym p 2 = χ₈ p := by\n  have : (2 : ZMod p) = (2 : ℤ) := by norm_cast\n  rw [legendreSym, ← this, quadraticChar_two ((ringChar_zmod_n p).substr hp), card p]\n\n"}
{"name":"legendreSym.at_neg_two","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p : Nat\ninst✝ : Fact (Nat.Prime p)\nhp : Ne p 2\n⊢ Eq (legendreSym p (-2)) (ZMod.χ₈' ↑p)","decl":"/-- `legendreSym p (-2)` is given by `χ₈' p`. -/\ntheorem at_neg_two (hp : p ≠ 2) : legendreSym p (-2) = χ₈' p := by\n  have : (-2 : ZMod p) = (-2 : ℤ) := by norm_cast\n  rw [legendreSym, ← this, quadraticChar_neg_two ((ringChar_zmod_n p).substr hp), card p]\n\n"}
{"name":"ZMod.exists_sq_eq_two_iff","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p : Nat\ninst✝ : Fact (Nat.Prime p)\nhp : Ne p 2\n⊢ Iff (IsSquare 2) (Or (Eq (HMod.hMod p 8) 1) (Eq (HMod.hMod p 8) 7))","decl":"/-- `2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `7` mod `8`. -/\ntheorem exists_sq_eq_two_iff (hp : p ≠ 2) : IsSquare (2 : ZMod p) ↔ p % 8 = 1 ∨ p % 8 = 7 := by\n  rw [FiniteField.isSquare_two_iff, card p]\n  have h₁ := Prime.mod_two_eq_one_iff_ne_two.mpr hp\n  omega\n\n"}
{"name":"ZMod.exists_sq_eq_neg_two_iff","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p : Nat\ninst✝ : Fact (Nat.Prime p)\nhp : Ne p 2\n⊢ Iff (IsSquare (-2)) (Or (Eq (HMod.hMod p 8) 1) (Eq (HMod.hMod p 8) 3))","decl":"/-- `-2` is a square modulo an odd prime `p` iff `p` is congruent to `1` or `3` mod `8`. -/\ntheorem exists_sq_eq_neg_two_iff (hp : p ≠ 2) : IsSquare (-2 : ZMod p) ↔ p % 8 = 1 ∨ p % 8 = 3 := by\n  rw [FiniteField.isSquare_neg_two_iff, card p]\n  have h₁ := Prime.mod_two_eq_one_iff_ne_two.mpr hp\n  omega\n\n"}
{"name":"legendreSym.quadratic_reciprocity","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p q : Nat\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (Nat.Prime q)\nhp : Ne p 2\nhq : Ne q 2\nhpq : Ne p q\n⊢ Eq (HMul.hMul (legendreSym q ↑p) (legendreSym p ↑q)) (HPow.hPow (-1) (HMul.hMul (HDiv.hDiv p 2) (HDiv.hDiv q 2)))","decl":"/-- **The Law of Quadratic Reciprocity**: if `p` and `q` are distinct odd primes, then\n`(q / p) * (p / q) = (-1)^((p-1)(q-1)/4)`. -/\ntheorem quadratic_reciprocity (hp : p ≠ 2) (hq : q ≠ 2) (hpq : p ≠ q) :\n    legendreSym q p * legendreSym p q = (-1) ^ (p / 2 * (q / 2)) := by\n  have hp₁ := (Prime.eq_two_or_odd <| @Fact.out p.Prime _).resolve_left hp\n  have hq₁ := (Prime.eq_two_or_odd <| @Fact.out q.Prime _).resolve_left hq\n  have hq₂ : ringChar (ZMod q) ≠ 2 := (ringChar_zmod_n q).substr hq\n  have h :=\n    quadraticChar_odd_prime ((ringChar_zmod_n p).substr hp) hq ((ringChar_zmod_n p).substr hpq)\n  rw [card p] at h\n  have nc : ∀ n r : ℕ, ((n : ℤ) : ZMod r) = n := fun n r => by norm_cast\n  have nc' : (((-1) ^ (p / 2) : ℤ) : ZMod q) = (-1) ^ (p / 2) := by norm_cast\n  rw [legendreSym, legendreSym, nc, nc, h, map_mul, mul_rotate', mul_comm (p / 2), ← pow_two,\n    quadraticChar_sq_one (prime_ne_zero q p hpq.symm), mul_one, pow_mul, χ₄_eq_neg_one_pow hp₁, nc',\n    map_pow, quadraticChar_neg_one hq₂, card q, χ₄_eq_neg_one_pow hq₁]\n\n"}
{"name":"legendreSym.quadratic_reciprocity'","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p q : Nat\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (Nat.Prime q)\nhp : Ne p 2\nhq : Ne q 2\n⊢ Eq (legendreSym q ↑p) (HMul.hMul (HPow.hPow (-1) (HMul.hMul (HDiv.hDiv p 2) (HDiv.hDiv q 2))) (legendreSym p ↑q))","decl":"/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes, then\n`(q / p) = (-1)^((p-1)(q-1)/4) * (p / q)`. -/\ntheorem quadratic_reciprocity' (hp : p ≠ 2) (hq : q ≠ 2) :\n    legendreSym q p = (-1) ^ (p / 2 * (q / 2)) * legendreSym p q := by\n  rcases eq_or_ne p q with h | h\n  · subst p\n    rw [(eq_zero_iff q q).mpr (mod_cast natCast_self q), mul_zero]\n  · have qr := congr_arg (· * legendreSym p q) (quadratic_reciprocity hp hq h)\n    have : ((q : ℤ) : ZMod p) ≠ 0 := mod_cast prime_ne_zero p q h\n    simpa only [mul_assoc, ← pow_two, sq_one p this, mul_one] using qr\n\n"}
{"name":"legendreSym.quadratic_reciprocity_one_mod_four","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p q : Nat\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (Nat.Prime q)\nhp : Eq (HMod.hMod p 4) 1\nhq : Ne q 2\n⊢ Eq (legendreSym q ↑p) (legendreSym p ↑q)","decl":"/-- The Law of Quadratic Reciprocity: if `p` and `q` are odd primes and `p % 4 = 1`,\nthen `(q / p) = (p / q)`. -/\ntheorem quadratic_reciprocity_one_mod_four (hp : p % 4 = 1) (hq : q ≠ 2) :\n    legendreSym q p = legendreSym p q := by\n  rw [quadratic_reciprocity' (Prime.mod_two_eq_one_iff_ne_two.mp (odd_of_mod_four_eq_one hp)) hq,\n    pow_mul, neg_one_pow_div_two_of_one_mod_four hp, one_pow, one_mul]\n\n"}
{"name":"legendreSym.quadratic_reciprocity_three_mod_four","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p q : Nat\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (Nat.Prime q)\nhp : Eq (HMod.hMod p 4) 3\nhq : Eq (HMod.hMod q 4) 3\n⊢ Eq (legendreSym q ↑p) (Neg.neg (legendreSym p ↑q))","decl":"/-- The Law of Quadratic Reciprocity: if `p` and `q` are primes that are both congruent\nto `3` mod `4`, then `(q / p) = -(p / q)`. -/\ntheorem quadratic_reciprocity_three_mod_four (hp : p % 4 = 3) (hq : q % 4 = 3) :\n    legendreSym q p = -legendreSym p q := by\n  let nop := @neg_one_pow_div_two_of_three_mod_four\n  rw [quadratic_reciprocity', pow_mul, nop hp, nop hq, neg_one_mul] <;>\n  rwa [← Prime.mod_two_eq_one_iff_ne_two, odd_of_mod_four_eq_three]\n\n"}
{"name":"ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_one","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p q : Nat\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (Nat.Prime q)\nhp1 : Eq (HMod.hMod p 4) 1\nhq1 : Ne q 2\n⊢ Iff (IsSquare ↑q) (IsSquare ↑p)","decl":"/-- If `p` and `q` are odd primes and `p % 4 = 1`, then `q` is a square mod `p` iff\n`p` is a square mod `q`. -/\ntheorem exists_sq_eq_prime_iff_of_mod_four_eq_one (hp1 : p % 4 = 1) (hq1 : q ≠ 2) :\n    IsSquare (q : ZMod p) ↔ IsSquare (p : ZMod q) := by\n  rcases eq_or_ne p q with h | h\n  · subst p; rfl\n  · rw [← eq_one_iff' p (prime_ne_zero p q h), ← eq_one_iff' q (prime_ne_zero q p h.symm),\n      quadratic_reciprocity_one_mod_four hp1 hq1]\n\n"}
{"name":"ZMod.exists_sq_eq_prime_iff_of_mod_four_eq_three","module":"Mathlib.NumberTheory.LegendreSymbol.QuadraticReciprocity","initialProofState":"p q : Nat\ninst✝¹ : Fact (Nat.Prime p)\ninst✝ : Fact (Nat.Prime q)\nhp3 : Eq (HMod.hMod p 4) 3\nhq3 : Eq (HMod.hMod q 4) 3\nhpq : Ne p q\n⊢ Iff (IsSquare ↑q) (Not (IsSquare ↑p))","decl":"/-- If `p` and `q` are distinct primes that are both congruent to `3` mod `4`, then `q` is\na square mod `p` iff `p` is a nonsquare mod `q`. -/\ntheorem exists_sq_eq_prime_iff_of_mod_four_eq_three (hp3 : p % 4 = 3) (hq3 : q % 4 = 3)\n    (hpq : p ≠ q) : IsSquare (q : ZMod p) ↔ ¬IsSquare (p : ZMod q) := by\n  rw [← eq_one_iff' p (prime_ne_zero p q hpq), ← eq_neg_one_iff' q,\n    quadratic_reciprocity_three_mod_four hp3 hq3, neg_inj]\n\n"}
