{"name":"MeasurableSet.eventuallyMeasurableSet","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nl : Filter α\ninst✝ : CountableInterFilter l\nhs : MeasurableSet s\n⊢ EventuallyMeasurableSet m l s","decl":"theorem MeasurableSet.eventuallyMeasurableSet (hs : MeasurableSet s) :\n    EventuallyMeasurableSet m l s :=\n  ⟨s, hs, EventuallyEq.refl _ _⟩\n\n"}
{"name":"EventuallyMeasurableSpace.measurable_le","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nl : Filter α\ninst✝ : CountableInterFilter l\n⊢ LE.le m (EventuallyMeasurableSpace m l)","decl":"theorem EventuallyMeasurableSpace.measurable_le : m ≤ EventuallyMeasurableSpace m l :=\n  fun _ hs => hs.eventuallyMeasurableSet\n\n"}
{"name":"eventuallyMeasurableSet_of_mem_filter","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns : Set α\nl : Filter α\ninst✝ : CountableInterFilter l\nhs : Membership.mem l s\n⊢ EventuallyMeasurableSet m l s","decl":"theorem eventuallyMeasurableSet_of_mem_filter (hs : s ∈ l) : EventuallyMeasurableSet m l s :=\n  ⟨univ, MeasurableSet.univ, eventuallyEq_univ.mpr hs⟩\n\n"}
{"name":"EventuallyMeasurableSet.congr","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\ns t : Set α\nl : Filter α\ninst✝ : CountableInterFilter l\nht : EventuallyMeasurableSet m l t\nhst : l.EventuallyEq s t\n⊢ EventuallyMeasurableSet m l s","decl":"/-- A set which is `EventuallyEq` to an `EventuallyMeasurableSet`\nis an `EventuallyMeasurableSet`. -/\ntheorem EventuallyMeasurableSet.congr\n    (ht : EventuallyMeasurableSet m l t) (hst : s =ᶠ[l] t) : EventuallyMeasurableSet m l s := by\n  rcases ht with ⟨t', ht', htt'⟩\n  exact ⟨t', ht', hst.trans htt'⟩\n\n"}
{"name":"EventuallyMeasurableSpace.measurableSingleton","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nl : Filter α\ninst✝¹ : CountableInterFilter l\ninst✝ : MeasurableSingletonClass α\n⊢ MeasurableSingletonClass α","decl":"instance measurableSingleton [MeasurableSingletonClass α] :\n    @MeasurableSingletonClass α (EventuallyMeasurableSpace m l) :=\n  @MeasurableSingletonClass.mk _ (_) <| fun x => (MeasurableSet.singleton x).eventuallyMeasurableSet\n\n"}
{"name":"Measurable.eventuallyMeasurable","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nl : Filter α\ninst✝¹ : CountableInterFilter l\nβ : Type u_2\ninst✝ : MeasurableSpace β\nf : α → β\nhf : Measurable f\n⊢ EventuallyMeasurable m l f","decl":"theorem Measurable.eventuallyMeasurable (hf : Measurable f) : EventuallyMeasurable m l f :=\n  hf.le EventuallyMeasurableSpace.measurable_le\n\n"}
{"name":"Measurable.comp_eventuallyMeasurable","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nl : Filter α\ninst✝² : CountableInterFilter l\nβ : Type u_2\nγ : Type u_3\ninst✝¹ : MeasurableSpace β\ninst✝ : MeasurableSpace γ\nf : α → β\nh : β → γ\nhh : Measurable h\nhf : EventuallyMeasurable m l f\n⊢ EventuallyMeasurable m l (Function.comp h f)","decl":"theorem Measurable.comp_eventuallyMeasurable (hh : Measurable h) (hf : EventuallyMeasurable m l f) :\n    EventuallyMeasurable m l (h ∘ f) :=\n  hh.comp hf\n\n"}
{"name":"EventuallyMeasurable.congr","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nl : Filter α\ninst✝¹ : CountableInterFilter l\nβ : Type u_2\ninst✝ : MeasurableSpace β\nf g : α → β\nhf : EventuallyMeasurable m l f\nhgf : l.EventuallyEq g f\n⊢ EventuallyMeasurable m l g","decl":"/-- A function which is `EventuallyEq` to some `EventuallyMeasurable` function\nis `EventuallyMeasurable`.-/\ntheorem EventuallyMeasurable.congr\n    (hf : EventuallyMeasurable m l f) (hgf : g =ᶠ[l] f) : EventuallyMeasurable m l g :=\n  fun _ hs => EventuallyMeasurableSet.congr (hf hs)\n    (hgf.preimage _)\n\n"}
{"name":"Measurable.eventuallyMeasurable_of_eventuallyEq","module":"Mathlib.MeasureTheory.MeasurableSpace.EventuallyMeasurable","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nl : Filter α\ninst✝¹ : CountableInterFilter l\nβ : Type u_2\ninst✝ : MeasurableSpace β\nf g : α → β\nhf : Measurable f\nhgf : l.EventuallyEq g f\n⊢ EventuallyMeasurable m l g","decl":"/-- A function which is `EventuallyEq` to some `Measurable` function is `EventuallyMeasurable`.-/\ntheorem Measurable.eventuallyMeasurable_of_eventuallyEq\n    (hf : Measurable f) (hgf : g =ᶠ[l] f) : EventuallyMeasurable m l g :=\n  hf.eventuallyMeasurable.congr hgf\n\n"}
