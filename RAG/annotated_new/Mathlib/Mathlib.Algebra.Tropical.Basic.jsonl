{"name":"Tropical.trop_injective","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.Injective Tropical.trop","decl":"theorem trop_injective : Function.Injective (trop : R → Tropical R) := fun _ _ => id\n\n"}
{"name":"Tropical.untrop_injective","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.Injective Tropical.untrop","decl":"theorem untrop_injective : Function.Injective (untrop : Tropical R → R) := fun _ _ => id\n\n"}
{"name":"Tropical.trop_inj_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx y : R\n⊢ Iff (Eq (Tropical.trop x) (Tropical.trop y)) (Eq x y)","decl":"@[simp]\ntheorem trop_inj_iff (x y : R) : trop x = trop y ↔ x = y :=\n  Iff.rfl\n\n"}
{"name":"Tropical.untrop_inj_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx y : Tropical R\n⊢ Iff (Eq (Tropical.untrop x) (Tropical.untrop y)) (Eq x y)","decl":"@[simp]\ntheorem untrop_inj_iff (x y : Tropical R) : untrop x = untrop y ↔ x = y :=\n  Iff.rfl\n\n"}
{"name":"Tropical.trop_untrop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx : Tropical R\n⊢ Eq (Tropical.trop (Tropical.untrop x)) x","decl":"@[simp]\ntheorem trop_untrop (x : Tropical R) : trop (untrop x) = x :=\n  rfl\n\n"}
{"name":"Tropical.untrop_trop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx : R\n⊢ Eq (Tropical.untrop (Tropical.trop x)) x","decl":"@[simp]\ntheorem untrop_trop (x : R) : untrop (trop x) = x :=\n  rfl\n\n-- Porting note: New attribute seems to fix things\n"}
{"name":"Tropical.leftInverse_trop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.LeftInverse Tropical.trop Tropical.untrop","decl":"theorem leftInverse_trop : Function.LeftInverse (trop : R → Tropical R) untrop :=\n  trop_untrop\n\n"}
{"name":"Tropical.rightInverse_trop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.RightInverse Tropical.trop Tropical.untrop","decl":"theorem rightInverse_trop : Function.RightInverse (trop : R → Tropical R) untrop :=\n  untrop_trop\n\n"}
{"name":"Tropical.tropEquiv_coe_fn","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Eq (⇑Tropical.tropEquiv) Tropical.trop","decl":"@[simp]\ntheorem tropEquiv_coe_fn : (tropEquiv : R → Tropical R) = trop :=\n  rfl\n\n"}
{"name":"Tropical.tropEquiv_symm_coe_fn","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Eq (⇑Tropical.tropEquiv.symm) Tropical.untrop","decl":"@[simp]\ntheorem tropEquiv_symm_coe_fn : (tropEquiv.symm : Tropical R → R) = untrop :=\n  rfl\n\n"}
{"name":"Tropical.trop_eq_iff_eq_untrop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx : R\ny : Tropical R\n⊢ Iff (Eq (Tropical.trop x) y) (Eq x (Tropical.untrop y))","decl":"theorem trop_eq_iff_eq_untrop {x : R} {y} : trop x = y ↔ x = untrop y :=\n  tropEquiv.apply_eq_iff_eq_symm_apply\n\n"}
{"name":"Tropical.untrop_eq_iff_eq_trop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx : Tropical R\ny : R\n⊢ Iff (Eq (Tropical.untrop x) y) (Eq x (Tropical.trop y))","decl":"theorem untrop_eq_iff_eq_trop {x} {y : R} : untrop x = y ↔ x = trop y :=\n  tropEquiv.symm.apply_eq_iff_eq_symm_apply\n\n"}
{"name":"Tropical.injective_trop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.Injective Tropical.trop","decl":"theorem injective_trop : Function.Injective (trop : R → Tropical R) :=\n  tropEquiv.injective\n\n"}
{"name":"Tropical.injective_untrop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.Injective Tropical.untrop","decl":"theorem injective_untrop : Function.Injective (untrop : Tropical R → R) :=\n  tropEquiv.symm.injective\n\n"}
{"name":"Tropical.surjective_trop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.Surjective Tropical.trop","decl":"theorem surjective_trop : Function.Surjective (trop : R → Tropical R) :=\n  tropEquiv.surjective\n\n"}
{"name":"Tropical.surjective_untrop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\n⊢ Function.Surjective Tropical.untrop","decl":"theorem surjective_untrop : Function.Surjective (untrop : Tropical R → R) :=\n  tropEquiv.symm.surjective\n\n"}
{"name":"Tropical.untrop_le_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LE R\nx y : Tropical R\n⊢ Iff (LE.le (Tropical.untrop x) (Tropical.untrop y)) (LE.le x y)","decl":"@[simp]\ntheorem untrop_le_iff [LE R] {x y : Tropical R} : untrop x ≤ untrop y ↔ x ≤ y :=\n  Iff.rfl\n\n"}
{"name":"Tropical.untrop_lt_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LT R\nx y : Tropical R\n⊢ Iff (LT.lt (Tropical.untrop x) (Tropical.untrop y)) (LT.lt x y)","decl":"@[simp]\ntheorem untrop_lt_iff [LT R] {x y : Tropical R} : untrop x < untrop y ↔ x < y :=\n  Iff.rfl\n\n"}
{"name":"Tropical.tropOrderIso_coe_fn","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Preorder R\n⊢ Eq (⇑Tropical.tropOrderIso) Tropical.trop","decl":"@[simp]\ntheorem tropOrderIso_coe_fn [Preorder R] : (tropOrderIso : R → Tropical R) = trop :=\n  rfl\n\n"}
{"name":"Tropical.tropOrderIso_symm_coe_fn","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Preorder R\n⊢ Eq (⇑Tropical.tropOrderIso.symm) Tropical.untrop","decl":"@[simp]\ntheorem tropOrderIso_symm_coe_fn [Preorder R] : (tropOrderIso.symm : Tropical R → R) = untrop :=\n  rfl\n\n"}
{"name":"Tropical.trop_monotone","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Preorder R\n⊢ Monotone Tropical.trop","decl":"theorem trop_monotone [Preorder R] : Monotone (trop : R → Tropical R) := fun _ _ => id\n\n"}
{"name":"Tropical.untrop_monotone","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Preorder R\n⊢ Monotone Tropical.untrop","decl":"theorem untrop_monotone [Preorder R] : Monotone (untrop : Tropical R → R) := fun _ _ => id\n\n"}
{"name":"Tropical.untrop_zero","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Top R\n⊢ Eq (Tropical.untrop 0) Top.top","decl":"@[simp]\ntheorem untrop_zero [Top R] : untrop (0 : Tropical R) = ⊤ :=\n  rfl\n\n"}
{"name":"Tropical.trop_top","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Top R\n⊢ Eq (Tropical.trop Top.top) 0","decl":"@[simp]\ntheorem trop_top [Top R] : trop (⊤ : R) = 0 :=\n  rfl\n\n"}
{"name":"Tropical.trop_coe_ne_zero","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx : R\n⊢ Ne (Tropical.trop ↑x) 0","decl":"@[simp]\ntheorem trop_coe_ne_zero (x : R) : trop (x : WithTop R) ≠ 0 :=\n  nofun\n\n"}
{"name":"Tropical.zero_ne_trop_coe","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nx : R\n⊢ Ne 0 (Tropical.trop ↑x)","decl":"@[simp]\ntheorem zero_ne_trop_coe (x : R) : (0 : Tropical (WithTop R)) ≠ trop x :=\n  nofun\n\n"}
{"name":"Tropical.le_zero","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝¹ : LE R\ninst✝ : OrderTop R\nx : Tropical R\n⊢ LE.le x 0","decl":"@[simp]\ntheorem le_zero [LE R] [OrderTop R] (x : Tropical R) : x ≤ 0 :=\n  le_top (α := R)\n\n"}
{"name":"Tropical.untrop_add","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Eq (Tropical.untrop (HAdd.hAdd x y)) (Min.min (Tropical.untrop x) (Tropical.untrop y))","decl":"@[simp]\ntheorem untrop_add (x y : Tropical R) : untrop (x + y) = min (untrop x) (untrop y) :=\n  rfl\n\n"}
{"name":"Tropical.trop_min","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : R\n⊢ Eq (Tropical.trop (Min.min x y)) (HAdd.hAdd (Tropical.trop x) (Tropical.trop y))","decl":"@[simp]\ntheorem trop_min (x y : R) : trop (min x y) = trop x + trop y :=\n  rfl\n\n"}
{"name":"Tropical.trop_inf","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : R\n⊢ Eq (Tropical.trop (Min.min x y)) (HAdd.hAdd (Tropical.trop x) (Tropical.trop y))","decl":"@[simp]\ntheorem trop_inf (x y : R) : trop (x ⊓ y) = trop x + trop y :=\n  rfl\n\n"}
{"name":"Tropical.trop_add_def","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Eq (HAdd.hAdd x y) (Tropical.trop (Min.min (Tropical.untrop x) (Tropical.untrop y)))","decl":"theorem trop_add_def (x y : Tropical R) : x + y = trop (min (untrop x) (untrop y)) :=\n  rfl\n\n"}
{"name":"Tropical.untrop_sup","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Eq (Tropical.untrop (Max.max x y)) (Max.max (Tropical.untrop x) (Tropical.untrop y))","decl":"@[simp]\ntheorem untrop_sup (x y : Tropical R) : untrop (x ⊔ y) = untrop x ⊔ untrop y :=\n  rfl\n\n"}
{"name":"Tropical.untrop_max","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Eq (Tropical.untrop (Max.max x y)) (Max.max (Tropical.untrop x) (Tropical.untrop y))","decl":"@[simp]\ntheorem untrop_max (x y : Tropical R) : untrop (max x y) = max (untrop x) (untrop y) :=\n  rfl\n\n"}
{"name":"Tropical.min_eq_add","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\n⊢ Eq Min.min fun x1 x2 => HAdd.hAdd x1 x2","decl":"@[simp]\ntheorem min_eq_add : (min : Tropical R → Tropical R → Tropical R) = (· + ·) :=\n  rfl\n\n"}
{"name":"Tropical.inf_eq_add","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\n⊢ Eq (fun x1 x2 => Min.min x1 x2) fun x1 x2 => HAdd.hAdd x1 x2","decl":"@[simp]\ntheorem inf_eq_add : ((· ⊓ ·) : Tropical R → Tropical R → Tropical R) = (· + ·) :=\n  rfl\n\n"}
{"name":"Tropical.trop_max_def","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Eq (Max.max x y) (Tropical.trop (Max.max (Tropical.untrop x) (Tropical.untrop y)))","decl":"theorem trop_max_def (x y : Tropical R) : max x y = trop (max (untrop x) (untrop y)) :=\n  rfl\n\n"}
{"name":"Tropical.trop_sup_def","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Eq (Max.max x y) (Tropical.trop (Max.max (Tropical.untrop x) (Tropical.untrop y)))","decl":"theorem trop_sup_def (x y : Tropical R) : x ⊔ y = trop (untrop x ⊔ untrop y) :=\n  rfl\n\n"}
{"name":"Tropical.add_eq_left","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\nh : LE.le x y\n⊢ Eq (HAdd.hAdd x y) x","decl":"@[simp]\ntheorem add_eq_left ⦃x y : Tropical R⦄ (h : x ≤ y) : x + y = x :=\n  untrop_injective (by simpa using h)\n\n"}
{"name":"Tropical.add_eq_right","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\nh : LE.le y x\n⊢ Eq (HAdd.hAdd x y) y","decl":"@[simp]\ntheorem add_eq_right ⦃x y : Tropical R⦄ (h : y ≤ x) : x + y = y :=\n  untrop_injective (by simpa using h)\n\n"}
{"name":"Tropical.add_eq_left_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Iff (Eq (HAdd.hAdd x y) x) (LE.le x y)","decl":"theorem add_eq_left_iff {x y : Tropical R} : x + y = x ↔ x ≤ y := by\n  rw [trop_add_def, trop_eq_iff_eq_untrop, ← untrop_le_iff, min_eq_left_iff]\n\n"}
{"name":"Tropical.add_eq_right_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y : Tropical R\n⊢ Iff (Eq (HAdd.hAdd x y) y) (LE.le y x)","decl":"theorem add_eq_right_iff {x y : Tropical R} : x + y = y ↔ y ≤ x := by\n  rw [trop_add_def, trop_eq_iff_eq_untrop, ← untrop_le_iff, min_eq_right_iff]\n\n"}
{"name":"Tropical.add_self","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx : Tropical R\n⊢ Eq (HAdd.hAdd x x) x","decl":"theorem add_self (x : Tropical R) : x + x = x :=\n  untrop_injective (min_eq_right le_rfl)\n\n"}
{"name":"Tropical.add_eq_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\nx y z : Tropical R\n⊢ Iff (Eq (HAdd.hAdd x y) z) (Or (And (Eq x z) (LE.le x y)) (And (Eq y z) (LE.le y x)))","decl":"theorem add_eq_iff {x y z : Tropical R} : x + y = z ↔ x = z ∧ x ≤ y ∨ y = z ∧ y ≤ x := by\n  rw [trop_add_def, trop_eq_iff_eq_untrop]\n  simp [min_eq_iff]\n\n"}
{"name":"Tropical.add_eq_zero_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\na b : Tropical (WithTop R)\n⊢ Iff (Eq (HAdd.hAdd a b) 0) (And (Eq a 0) (Eq b 0))","decl":"@[simp]\ntheorem add_eq_zero_iff {a b : Tropical (WithTop R)} : a + b = 0 ↔ a = 0 ∧ b = 0 := by\n  rw [add_eq_iff]\n  constructor\n  · rintro (⟨rfl, h⟩ | ⟨rfl, h⟩)\n    · exact ⟨rfl, le_antisymm (le_zero _) h⟩\n    · exact ⟨le_antisymm (le_zero _) h, rfl⟩\n  · rintro ⟨rfl, rfl⟩\n    simp\n\n"}
{"name":"Tropical.trop_add","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Add R\nx y : R\n⊢ Eq (Tropical.trop (HAdd.hAdd x y)) (HMul.hMul (Tropical.trop x) (Tropical.trop y))","decl":"@[simp]\ntheorem trop_add [Add R] (x y : R) : trop (x + y) = trop x * trop y :=\n  rfl\n\n"}
{"name":"Tropical.untrop_mul","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Add R\nx y : Tropical R\n⊢ Eq (Tropical.untrop (HMul.hMul x y)) (HAdd.hAdd (Tropical.untrop x) (Tropical.untrop y))","decl":"@[simp]\ntheorem untrop_mul [Add R] (x y : Tropical R) : untrop (x * y) = untrop x + untrop y :=\n  rfl\n\n"}
{"name":"Tropical.trop_mul_def","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Add R\nx y : Tropical R\n⊢ Eq (HMul.hMul x y) (Tropical.trop (HAdd.hAdd (Tropical.untrop x) (Tropical.untrop y)))","decl":"theorem trop_mul_def [Add R] (x y : Tropical R) : x * y = trop (untrop x + untrop y) :=\n  rfl\n\n"}
{"name":"Tropical.trop_zero","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Zero R\n⊢ Eq (Tropical.trop 0) 1","decl":"@[simp]\ntheorem trop_zero [Zero R] : trop (0 : R) = 1 :=\n  rfl\n\n"}
{"name":"Tropical.untrop_one","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Zero R\n⊢ Eq (Tropical.untrop 1) 0","decl":"@[simp]\ntheorem untrop_one [Zero R] : untrop (1 : Tropical R) = 0 :=\n  rfl\n\n"}
{"name":"Tropical.instNontrivialWithTopOfZero","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Zero R\n⊢ Nontrivial (Tropical (WithTop R))","decl":"instance [Zero R] : Nontrivial (Tropical (WithTop R)) :=\n  ⟨⟨0, 1, trop_injective.ne WithTop.top_ne_coe⟩⟩\n\n"}
{"name":"Tropical.untrop_inv","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Neg R\nx : Tropical R\n⊢ Eq (Tropical.untrop (Inv.inv x)) (Neg.neg (Tropical.untrop x))","decl":"@[simp]\ntheorem untrop_inv [Neg R] (x : Tropical R) : untrop x⁻¹ = -untrop x :=\n  rfl\n\n"}
{"name":"Tropical.untrop_div","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : Sub R\nx y : Tropical R\n⊢ Eq (Tropical.untrop (HDiv.hDiv x y)) (HSub.hSub (Tropical.untrop x) (Tropical.untrop y))","decl":"@[simp]\ntheorem untrop_div [Sub R] (x y : Tropical R) : untrop (x / y) = untrop x - untrop y :=\n  rfl\n\n"}
{"name":"Tropical.untrop_pow","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nα : Type u_1\ninst✝ : SMul α R\nx : Tropical R\nn : α\n⊢ Eq (Tropical.untrop (HPow.hPow x n)) (HSMul.hSMul n (Tropical.untrop x))","decl":"@[simp]\ntheorem untrop_pow {α : Type*} [SMul α R] (x : Tropical R) (n : α) :\n    untrop (x ^ n) = n • untrop x :=\n  rfl\n\n"}
{"name":"Tropical.trop_smul","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\nα : Type u_1\ninst✝ : SMul α R\nx : R\nn : α\n⊢ Eq (Tropical.trop (HSMul.hSMul n x)) (HPow.hPow (Tropical.trop x) n)","decl":"@[simp]\ntheorem trop_smul {α : Type*} [SMul α R] (x : R) (n : α) : trop (n • x) = trop x ^ n :=\n  rfl\n\n"}
{"name":"Tropical.trop_nsmul","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : AddMonoid R\nx : R\nn : Nat\n⊢ Eq (Tropical.trop (HSMul.hSMul n x)) (HPow.hPow (Tropical.trop x) n)","decl":"@[simp]\ntheorem trop_nsmul [AddMonoid R] (x : R) (n : ℕ) : trop (n • x) = trop x ^ n :=\n  rfl\n\n"}
{"name":"Tropical.untrop_zpow","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : AddGroup R\nx : Tropical R\nn : Int\n⊢ Eq (Tropical.untrop (HPow.hPow x n)) (HSMul.hSMul n (Tropical.untrop x))","decl":"@[simp]\ntheorem untrop_zpow [AddGroup R] (x : Tropical R) (n : ℤ) : untrop (x ^ n) = n • untrop x :=\n  rfl\n\n"}
{"name":"Tropical.trop_zsmul","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : AddGroup R\nx : R\nn : Int\n⊢ Eq (Tropical.trop (HSMul.hSMul n x)) (HPow.hPow (Tropical.trop x) n)","decl":"@[simp]\ntheorem trop_zsmul [AddGroup R] (x : R) (n : ℤ) : trop (n • x) = trop x ^ n :=\n  rfl\n\n"}
{"name":"Tropical.mulLeftMono","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝² : LE R\ninst✝¹ : Add R\ninst✝ : AddLeftMono R\n⊢ MulLeftMono (Tropical R)","decl":"instance mulLeftMono [LE R] [Add R] [AddLeftMono R] :\n    MulLeftMono (Tropical R) :=\n  ⟨fun _ y z h => add_le_add_left (show untrop y ≤ untrop z from h) _⟩\n\n"}
{"name":"Tropical.mulRightMono","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝² : LE R\ninst✝¹ : Add R\ninst✝ : AddRightMono R\n⊢ MulRightMono (Tropical R)","decl":"instance mulRightMono [LE R] [Add R] [AddRightMono R] :\n    MulRightMono (Tropical R) :=\n  ⟨fun _ y z h => add_le_add_right (show untrop y ≤ untrop z from h) _⟩\n\n"}
{"name":"Tropical.addLeftMono","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝ : LinearOrder R\n⊢ AddLeftMono (Tropical R)","decl":"instance addLeftMono [LinearOrder R] : AddLeftMono (Tropical R) :=\n  ⟨fun x y z h => by\n    rcases le_total x y with hx | hy\n    · rw [add_eq_left hx, add_eq_left (hx.trans h)]\n    · rw [add_eq_right hy]\n      rcases le_total x z with hx | hx\n      · rwa [add_eq_left hx]\n      · rwa [add_eq_right hx]⟩\n\n"}
{"name":"Tropical.mulLeftStrictMono","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝² : LT R\ninst✝¹ : Add R\ninst✝ : AddLeftStrictMono R\n⊢ MulLeftStrictMono (Tropical R)","decl":"instance mulLeftStrictMono [LT R] [Add R] [AddLeftStrictMono R] :\n    MulLeftStrictMono (Tropical R) :=\n  ⟨fun _ _ _ h => add_lt_add_left (untrop_lt_iff.2 h) _⟩\n\n"}
{"name":"Tropical.mulRightStrictMono","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝² : Preorder R\ninst✝¹ : Add R\ninst✝ : AddRightStrictMono R\n⊢ MulRightStrictMono (Tropical R)","decl":"instance mulRightStrictMono [Preorder R] [Add R] [AddRightStrictMono R] :\n    MulRightStrictMono (Tropical R) :=\n  ⟨fun _ y z h => add_lt_add_right (show untrop y < untrop z from h) _⟩\n\n"}
{"name":"Tropical.add_pow","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u\ninst✝³ : LinearOrder R\ninst✝² : AddMonoid R\ninst✝¹ : AddLeftMono R\ninst✝ : AddRightMono R\nx y : Tropical R\nn : Nat\n⊢ Eq (HPow.hPow (HAdd.hAdd x y) n) (HAdd.hAdd (HPow.hPow x n) (HPow.hPow y n))","decl":"@[simp]\ntheorem add_pow [LinearOrder R] [AddMonoid R] [AddLeftMono R] [AddRightMono R]\n    (x y : Tropical R) (n : ℕ) :\n    (x + y) ^ n = x ^ n + y ^ n := by\n  rcases le_total x y with h | h\n  · rw [add_eq_left h, add_eq_left (pow_le_pow_left' h _)]\n  · rw [add_eq_right h, add_eq_right (pow_le_pow_left' h _)]\n\n"}
{"name":"Tropical.succ_nsmul","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u_1\ninst✝¹ : LinearOrder R\ninst✝ : OrderTop R\nx : Tropical R\nn : Nat\n⊢ Eq (HSMul.hSMul (HAdd.hAdd n 1) x) x","decl":"@[simp]\ntheorem succ_nsmul {R} [LinearOrder R] [OrderTop R] (x : Tropical R) (n : ℕ) : (n + 1) • x = x := by\n  induction n with\n  | zero => simp\n  | succ n IH => rw [add_nsmul, IH, one_nsmul, add_self]\n\n-- TODO: find/create the right classes to make this hold (for enat, ennreal, etc)\n-- Requires `zero_eq_bot` to be true\n-- lemma add_eq_zero_iff {a b : tropical R} :\n--   a + b = 1 ↔ a = 1 ∨ b = 1 := sorry\n"}
{"name":"Tropical.mul_eq_zero_iff","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u_1\ninst✝ : LinearOrderedAddCommMonoid R\na b : Tropical (WithTop R)\n⊢ Iff (Eq (HMul.hMul a b) 0) (Or (Eq a 0) (Eq b 0))","decl":"theorem mul_eq_zero_iff {R : Type*} [LinearOrderedAddCommMonoid R] {a b : Tropical (WithTop R)} :\n    a * b = 0 ↔ a = 0 ∨ b = 0 := by simp [← untrop_inj_iff, WithTop.add_eq_top]\n\n"}
{"name":"Tropical.instNoZeroDivisorsWithTop","module":"Mathlib.Algebra.Tropical.Basic","initialProofState":"R : Type u_1\ninst✝ : LinearOrderedAddCommMonoid R\n⊢ NoZeroDivisors (Tropical (WithTop R))","decl":"instance {R : Type*} [LinearOrderedAddCommMonoid R] : NoZeroDivisors (Tropical (WithTop R)) :=\n  ⟨mul_eq_zero_iff.mp⟩\n\n"}
