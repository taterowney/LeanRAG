{"name":"MulAction.coe_aestabilizer","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝¹ : Group G\ninst✝ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\n⊢ Eq (↑(MulAction.aestabilizer G μ s)) (setOf fun g => (MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul g s) s)","decl":"/-- A.e. stabilizer of a set under a group action. -/\n@[to_additive (attr := simps) \"A.e. stabilizer of a set under an additive group action.\"]\ndef aestabilizer (s : Set α) : Subgroup G where\n  carrier := {g | g • s =ᵐ[μ] s}\n  one_mem' := by simp\n  -- TODO: `calc` would be more readable but fails because of defeq abuse\n  mul_mem' {g₁ g₂} h₁ h₂ := by simpa only [smul_smul] using ((smul_set_ae_eq g₁).2 h₂).trans h₁\n  inv_mem' {g} h := by simpa using (smul_set_ae_eq g⁻¹).2 h.out.symm\n\n"}
{"name":"AddAction.coe_aestabilizer","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝¹ : AddGroup G\ninst✝ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ns : Set α\n⊢ Eq (↑(AddAction.aestabilizer G μ s)) (setOf fun g => (MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd g s) s)","decl":"/-- A.e. stabilizer of a set under a group action. -/\n@[to_additive (attr := simps) \"A.e. stabilizer of a set under an additive group action.\"]\ndef aestabilizer (s : Set α) : Subgroup G where\n  carrier := {g | g • s =ᵐ[μ] s}\n  one_mem' := by simp\n  -- TODO: `calc` would be more readable but fails because of defeq abuse\n  mul_mem' {g₁ g₂} h₁ h₂ := by simpa only [smul_smul] using ((smul_set_ae_eq g₁).2 h₂).trans h₁\n  inv_mem' {g} h := by simpa using (smul_set_ae_eq g⁻¹).2 h.out.symm\n\n"}
{"name":"MulAction.mem_aestabilizer","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\ng : G\ns : Set α\n⊢ Iff (Membership.mem (MulAction.aestabilizer G μ s) g) ((MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul g s) s)","decl":"@[to_additive (attr := simp)]\nlemma mem_aestabilizer : g ∈ aestabilizer G μ s ↔ g • s =ᵐ[μ] s := .rfl\n\n"}
{"name":"AddAction.mem_aestabilizer","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\ng : G\ns : Set α\n⊢ Iff (Membership.mem (AddAction.aestabilizer G μ s) g) ((MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd g s) s)","decl":"@[to_additive (attr := simp)]\nlemma mem_aestabilizer : g ∈ aestabilizer G μ s ↔ g • s =ᵐ[μ] s := .rfl\n\n"}
{"name":"AddAction.stabilizer_le_aestabilizer","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\ns : Set α\n⊢ LE.le (AddAction.stabilizer G s) (AddAction.aestabilizer G μ s)","decl":"@[to_additive]\nlemma stabilizer_le_aestabilizer (s : Set α) : stabilizer G s ≤ aestabilizer G μ s := by\n  intro g hg\n  simp_all\n\n"}
{"name":"MulAction.stabilizer_le_aestabilizer","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\ns : Set α\n⊢ LE.le (MulAction.stabilizer G s) (MulAction.aestabilizer G μ s)","decl":"@[to_additive]\nlemma stabilizer_le_aestabilizer (s : Set α) : stabilizer G s ≤ aestabilizer G μ s := by\n  intro g hg\n  simp_all\n\n"}
{"name":"AddAction.aestabilizer_empty","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\n⊢ Eq (AddAction.aestabilizer G μ EmptyCollection.emptyCollection) Top.top","decl":"@[to_additive (attr := simp)]\nlemma aestabilizer_empty : aestabilizer G μ ∅ = ⊤ := top_unique fun _ _ ↦ by simp\n\n"}
{"name":"MulAction.aestabilizer_empty","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\n⊢ Eq (MulAction.aestabilizer G μ EmptyCollection.emptyCollection) Top.top","decl":"@[to_additive (attr := simp)]\nlemma aestabilizer_empty : aestabilizer G μ ∅ = ⊤ := top_unique fun _ _ ↦ by simp\n\n"}
{"name":"AddAction.aestabilizer_univ","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\n⊢ Eq (AddAction.aestabilizer G μ Set.univ) Top.top","decl":"@[to_additive (attr := simp)]\nlemma aestabilizer_univ : aestabilizer G μ univ = ⊤ := top_unique fun _ _ ↦ by simp\n\n"}
{"name":"MulAction.aestabilizer_univ","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\n⊢ Eq (MulAction.aestabilizer G μ Set.univ) Top.top","decl":"@[to_additive (attr := simp)]\nlemma aestabilizer_univ : aestabilizer G μ univ = ⊤ := top_unique fun _ _ ↦ by simp\n\n"}
{"name":"MulAction.aestabilizer_congr","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ Eq (MulAction.aestabilizer G μ s) (MulAction.aestabilizer G μ t)","decl":"@[to_additive]\nlemma aestabilizer_congr (h : s =ᵐ[μ] t) : aestabilizer G μ s = aestabilizer G μ t := by\n  ext g\n  rw [mem_aestabilizer, mem_aestabilizer, h.congr_right, ((smul_set_ae_eq g).2 h).congr_left]\n\n"}
{"name":"AddAction.aestabilizer_congr","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\ns t : Set α\nh : (MeasureTheory.ae μ).EventuallyEq s t\n⊢ Eq (AddAction.aestabilizer G μ s) (AddAction.aestabilizer G μ t)","decl":"@[to_additive]\nlemma aestabilizer_congr (h : s =ᵐ[μ] t) : aestabilizer G μ s = aestabilizer G μ t := by\n  ext g\n  rw [mem_aestabilizer, mem_aestabilizer, h.congr_right, ((smul_set_ae_eq g).2 h).congr_left]\n\n"}
{"name":"MulAction.aestabilizer_of_aeconst","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\ns : Set α\nhs : Filter.EventuallyConst s (MeasureTheory.ae μ)\n⊢ Eq (MulAction.aestabilizer G μ s) Top.top","decl":"lemma aestabilizer_of_aeconst (hs : EventuallyConst s (ae μ)) : aestabilizer G μ s = ⊤ := by\n  refine top_unique fun g _ ↦ ?_\n  cases eventuallyConst_set'.mp hs with\n  | inl h => simp [aestabilizer_congr h]\n  | inr h => simp [aestabilizer_congr h]\n\n"}
{"name":"MeasureTheory.vadd_ae_eq_self_of_mem_zmultiples","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\nx y : G\ns : Set α\nhs : (MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd x s) s\nhy : Membership.mem (AddSubgroup.zmultiples x) y\n⊢ (MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd y s) s","decl":"@[to_additive]\ntheorem smul_ae_eq_self_of_mem_zpowers (hs : (x • s : Set α) =ᵐ[μ] s)\n    (hy : y ∈ Subgroup.zpowers x) : (y • s : Set α) =ᵐ[μ] s := by\n  rw [← MulAction.mem_aestabilizer, ← Subgroup.zpowers_le] at hs\n  exact hs hy\n\n"}
{"name":"MeasureTheory.smul_ae_eq_self_of_mem_zpowers","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\nx y : G\ns : Set α\nhs : (MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul x s) s\nhy : Membership.mem (Subgroup.zpowers x) y\n⊢ (MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul y s) s","decl":"@[to_additive]\ntheorem smul_ae_eq_self_of_mem_zpowers (hs : (x • s : Set α) =ᵐ[μ] s)\n    (hy : y ∈ Subgroup.zpowers x) : (y • s : Set α) =ᵐ[μ] s := by\n  rw [← MulAction.mem_aestabilizer, ← Subgroup.zpowers_le] at hs\n  exact hs hy\n\n"}
{"name":"MeasureTheory.neg_vadd_ae_eq_self","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : AddGroup G\ninst✝¹ : AddAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.VAddInvariantMeasure G α μ\nx : G\ns : Set α\nhs : (MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd x s) s\n⊢ (MeasureTheory.ae μ).EventuallyEq (HVAdd.hVAdd (Neg.neg x) s) s","decl":"@[to_additive]\ntheorem inv_smul_ae_eq_self (hs : (x • s : Set α) =ᵐ[μ] s) : (x⁻¹ • s : Set α) =ᵐ[μ] s :=\n  inv_mem (s := MulAction.aestabilizer G μ s) hs\n\n"}
{"name":"MeasureTheory.inv_smul_ae_eq_self","module":"Mathlib.MeasureTheory.Group.AEStabilizer","initialProofState":"G : Type u_1\nα : Type u_2\ninst✝² : Group G\ninst✝¹ : MulAction G α\nx✝ : MeasurableSpace α\nμ : MeasureTheory.Measure α\ninst✝ : MeasureTheory.SMulInvariantMeasure G α μ\nx : G\ns : Set α\nhs : (MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul x s) s\n⊢ (MeasureTheory.ae μ).EventuallyEq (HSMul.hSMul (Inv.inv x) s) s","decl":"@[to_additive]\ntheorem inv_smul_ae_eq_self (hs : (x • s : Set α) =ᵐ[μ] s) : (x⁻¹ • s : Set α) =ᵐ[μ] s :=\n  inv_mem (s := MulAction.aestabilizer G μ s) hs\n\n"}
