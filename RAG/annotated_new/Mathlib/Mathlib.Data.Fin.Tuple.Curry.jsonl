{"name":"Function.FromTypes.uncurry_apply_cons","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\nα : Type u\np : Fin n → Type u\nτ : Type u\nf : Function.FromTypes (Matrix.vecCons α p) τ\na : α\nargs : (i : Fin n) → p i\n⊢ Eq (f.uncurry (Fin.cons a args)) ((f a).uncurry args)","decl":"@[simp]\ntheorem uncurry_apply_cons {n : ℕ} {α} {p : Fin n → Type u} {τ : Type u}\n    (f : Function.FromTypes (vecCons α p) τ) (a : α) (args : (i : Fin n) → p i) :\n    uncurry f (Fin.cons a args) = @uncurry _ p _ (f a) args := rfl\n\n"}
{"name":"Function.FromTypes.uncurry_apply_succ","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\nf : Function.FromTypes p τ\nargs : (i : Fin (HAdd.hAdd n 1)) → p i\n⊢ Eq (f.uncurry args) ((f (args 0)).uncurry (Fin.tail args))","decl":"@[simp low]\ntheorem uncurry_apply_succ {n : ℕ} {p : Fin (n + 1) → Type u} {τ : Type u}\n    (f : Function.FromTypes p τ) (args : (i : Fin (n + 1)) → p i) :\n    uncurry f args = uncurry (f (args 0)) (Fin.tail args) :=\n  @uncurry_apply_cons n (p 0) (vecTail p) τ f (args 0) (Fin.tail args)\n\n"}
{"name":"Function.FromTypes.curry_apply_cons","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\nα : Type u\np : Fin n → Type u\nτ : Type u\nf : ((i : Fin (HAdd.hAdd n 1)) → Matrix.vecCons α p i) → τ\na : α\n⊢ Eq (Function.FromTypes.curry f a) (Function.FromTypes.curry (Function.dcomp (fun {x} => f) (Fin.cons a)))","decl":"@[simp]\ntheorem curry_apply_cons {n : ℕ} {α} {p : Fin n → Type u} {τ : Type u}\n    (f : ((i : Fin (n + 1)) → (vecCons α p) i) → τ) (a : α) :\n    curry f a = @curry _ p _ (f ∘' Fin.cons a) := rfl\n\n"}
{"name":"Function.FromTypes.curry_apply_succ","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\np : Fin (HAdd.hAdd n 1) → Type u\nτ : Type u\nf : ((i : Fin (HAdd.hAdd n 1)) → p i) → τ\na : p 0\n⊢ Eq (Function.FromTypes.curry f a) (Function.FromTypes.curry (Function.comp f (Fin.cons a)))","decl":"@[simp low]\ntheorem curry_apply_succ {n : ℕ} {p : Fin (n + 1) → Type u} {τ : Type u}\n    (f : ((i : Fin (n + 1)) → p i) → τ) (a : p 0) :\n    curry f a = curry (f ∘ Fin.cons a) := rfl\n\n"}
{"name":"Function.FromTypes.curry_uncurry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\np : Fin n → Type u\nτ : Type u\nf : Function.FromTypes p τ\n⊢ Eq (Function.FromTypes.curry f.uncurry) f","decl":"@[simp]\ntheorem curry_uncurry (f : Function.FromTypes p τ) : curry (uncurry f) = f := by\n  induction n with\n  | zero => rfl\n  | succ n ih => exact funext (ih <| f ·)\n\n"}
{"name":"Function.FromTypes.uncurry_curry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\np : Fin n → Type u\nτ : Type u\nf : ((i : Fin n) → p i) → τ\n⊢ Eq (Function.FromTypes.curry f).uncurry f","decl":"@[simp]\ntheorem uncurry_curry (f : ((i : Fin n) → p i) → τ) :\n    uncurry (curry f) = f := by\n  ext args\n  induction n with\n  | zero => exact congrArg f (Subsingleton.allEq _ _)\n  | succ n ih => exact Eq.trans (ih _ _) (congrArg f (Fin.cons_self_tail args))\n\n"}
{"name":"Function.FromTypes.curryEquiv_symm_apply","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\nτ : Type u\np : Fin n → Type u\nf : Function.FromTypes p τ\na✝ : (i : Fin n) → p i\n⊢ Eq ((Function.FromTypes.curryEquiv p).symm f a✝) (f.uncurry a✝)","decl":"/-- `Equiv.curry` for `p`-ary heterogeneous functions. -/\n@[simps]\ndef curryEquiv (p : Fin n → Type u) : (((i : Fin n) → p i) → τ) ≃ FromTypes p τ where\n  toFun := curry\n  invFun := uncurry\n  left_inv := uncurry_curry\n  right_inv := curry_uncurry\n\n"}
{"name":"Function.FromTypes.curryEquiv_apply","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"n : Nat\nτ : Type u\np : Fin n → Type u\na✝ : ((i : Fin n) → p i) → τ\n⊢ Eq ((Function.FromTypes.curryEquiv p) a✝) (Function.FromTypes.curry a✝)","decl":"/-- `Equiv.curry` for `p`-ary heterogeneous functions. -/\n@[simps]\ndef curryEquiv (p : Fin n → Type u) : (((i : Fin n) → p i) → τ) ≃ FromTypes p τ where\n  toFun := curry\n  invFun := uncurry\n  left_inv := uncurry_curry\n  right_inv := curry_uncurry\n\n"}
{"name":"Function.FromTypes.curry_two_eq_curry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"p : Fin 2 → Type u\nτ : Type u\nf : ((i : Fin 2) → p i) → τ\n⊢ Eq (Function.FromTypes.curry f) (Function.curry (Function.comp f ⇑(piFinTwoEquiv p).symm))","decl":"lemma curry_two_eq_curry {p : Fin 2 → Type u} {τ : Type u}\n    (f : ((i : Fin 2) → p i) → τ) :\n    curry f = Function.curry (f ∘ (piFinTwoEquiv p).symm) := rfl\n\n"}
{"name":"Function.FromTypes.uncurry_two_eq_uncurry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"p : Fin 2 → Type u\nτ : Type u\nf : Function.FromTypes p τ\n⊢ Eq f.uncurry (Function.comp (Function.uncurry f) ⇑(piFinTwoEquiv p))","decl":"lemma uncurry_two_eq_uncurry (p : Fin 2 → Type u) (τ : Type u)\n    (f : Function.FromTypes p τ) :\n    uncurry f = Function.uncurry f ∘ piFinTwoEquiv p := rfl\n\n"}
{"name":"Function.OfArity.curry_uncurry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"α β : Type u\nn : Nat\nf : Function.OfArity α β n\n⊢ Eq (Function.OfArity.curry f.uncurry) f","decl":"@[simp]\ntheorem curry_uncurry {n} (f : Function.OfArity α β n) :\n    curry (uncurry f) = f := FromTypes.curry_uncurry f\n\n"}
{"name":"Function.OfArity.uncurry_curry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"α β : Type u\nn : Nat\nf : (Fin n → α) → β\n⊢ Eq (Function.OfArity.curry f).uncurry f","decl":"@[simp]\ntheorem uncurry_curry {n} (f : (Fin n → α) → β) :\n    uncurry (curry f) = f := FromTypes.uncurry_curry f\n\n"}
{"name":"Function.OfArity.curryEquiv_apply","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"α β : Type u\nn : Nat\na✝ : (Fin n → α) → β\n⊢ Eq ((Function.OfArity.curryEquiv n) a✝) (Function.FromTypes.curry a✝)","decl":"/-- `Equiv.curry` for n-ary functions. -/\n@[simps!]\ndef curryEquiv (n : ℕ) : ((Fin n → α) → β) ≃ OfArity α β n :=\n  FromTypes.curryEquiv _\n\n"}
{"name":"Function.OfArity.curryEquiv_symm_apply","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"α β : Type u\nn : Nat\nf : Function.FromTypes (fun a => α) β\na✝ : Fin n → α\n⊢ Eq ((Function.OfArity.curryEquiv n).symm f a✝) (f.uncurry a✝)","decl":"/-- `Equiv.curry` for n-ary functions. -/\n@[simps!]\ndef curryEquiv (n : ℕ) : ((Fin n → α) → β) ≃ OfArity α β n :=\n  FromTypes.curryEquiv _\n\n"}
{"name":"Function.OfArity.curry_two_eq_curry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"α β : Type u\nf : (Fin 2 → α) → β\n⊢ Eq (Function.OfArity.curry f) (Function.curry (Function.comp f ⇑(finTwoArrowEquiv α).symm))","decl":"lemma curry_two_eq_curry {α β : Type u} (f : ((i : Fin 2) → α) → β) :\n    curry f = Function.curry (f ∘ (finTwoArrowEquiv α).symm) :=\n  FromTypes.curry_two_eq_curry f\n\n"}
{"name":"Function.OfArity.uncurry_two_eq_uncurry","module":"Mathlib.Data.Fin.Tuple.Curry","initialProofState":"α β : Type u\nf : Function.OfArity α β 2\n⊢ Eq f.uncurry (Function.comp (Function.uncurry f) ⇑(finTwoArrowEquiv α))","decl":"lemma uncurry_two_eq_uncurry {α β : Type u} (f : OfArity α β 2) :\n    uncurry f = Function.uncurry f ∘ (finTwoArrowEquiv α) :=\n  FromTypes.uncurry_two_eq_uncurry _ _ f\n\n"}
