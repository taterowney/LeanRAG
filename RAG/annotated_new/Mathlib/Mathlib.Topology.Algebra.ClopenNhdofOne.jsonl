{"name":"TopologicalGroup.exist_openNormalSubgroup_sub_clopen_nhd_of_one","module":"Mathlib.Topology.Algebra.ClopenNhdofOne","initialProofState":"G : Type u_1\ninst✝³ : Group G\ninst✝² : TopologicalSpace G\ninst✝¹ : TopologicalGroup G\ninst✝ : CompactSpace G\nW : Set G\nWClopen : IsClopen W\neinW : Membership.mem W 1\n⊢ Exists fun H => HasSubset.Subset (↑H) W","decl":"theorem exist_openNormalSubgroup_sub_clopen_nhd_of_one {G : Type*} [Group G] [TopologicalSpace G]\n    [TopologicalGroup G] [CompactSpace G] {W : Set G} (WClopen : IsClopen W) (einW : 1 ∈ W) :\n    ∃ H : OpenNormalSubgroup G, (H : Set G) ⊆ W := by\n  rcases exist_openSubgroup_sub_clopen_nhd_of_one WClopen einW with ⟨H, hH⟩\n  have : Subgroup.FiniteIndex H.toSubgroup := H.finiteIndex_of_finite_quotient\n  use { toSubgroup := Subgroup.normalCore H\n        isOpen' := Subgroup.isOpen_of_isClosed_of_finiteIndex _ (H.normalCore_isClosed H.isClosed) }\n  exact fun _ b ↦ hH (H.normalCore_le b)\n\n"}
{"name":"ProfiniteGrp.exist_openNormalSubgroup_sub_open_nhd_of_one","module":"Mathlib.Topology.Algebra.ClopenNhdofOne","initialProofState":"G : Type u_1\ninst✝⁴ : Group G\ninst✝³ : TopologicalSpace G\ninst✝² : TopologicalGroup G\ninst✝¹ : CompactSpace G\ninst✝ : TotallyDisconnectedSpace G\nU : Set G\nUOpen : IsOpen U\neinU : Membership.mem U 1\n⊢ Exists fun H => HasSubset.Subset (↑H) U","decl":"theorem exist_openNormalSubgroup_sub_open_nhd_of_one {G : Type*} [Group G] [TopologicalSpace G]\n    [TopologicalGroup G] [CompactSpace G] [TotallyDisconnectedSpace G] {U : Set G}\n    (UOpen : IsOpen U) (einU : 1 ∈ U) : ∃ H : OpenNormalSubgroup G, (H : Set G) ⊆ U := by\n  rcases ((Filter.HasBasis.mem_iff' ((nhds_basis_clopen (1 : G))) U ).mp <|\n    mem_nhds_iff.mpr (by use U)) with ⟨W, hW, h⟩\n  rcases TopologicalGroup.exist_openNormalSubgroup_sub_clopen_nhd_of_one hW.2 hW.1 with ⟨H, hH⟩\n  exact ⟨H, fun _ a ↦ h (hH a)⟩\n\n"}
