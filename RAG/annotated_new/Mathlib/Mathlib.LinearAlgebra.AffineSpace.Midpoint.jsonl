{"name":"AffineMap.map_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁷ : Ring R\ninst✝⁶ : Invertible 2\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\nf : AffineMap R P P'\na b : P\n⊢ Eq (f (midpoint R a b)) (midpoint R (f a) (f b))","decl":"@[simp]\ntheorem AffineMap.map_midpoint (f : P →ᵃ[R] P') (a b : P) :\n    f (midpoint R a b) = midpoint R (f a) (f b) :=\n  f.apply_lineMap a b _\n\n"}
{"name":"AffineEquiv.map_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nV' : Type u_3\nP : Type u_4\nP' : Type u_5\ninst✝⁷ : Ring R\ninst✝⁶ : Invertible 2\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\ninst✝² : AddCommGroup V'\ninst✝¹ : Module R V'\ninst✝ : AddTorsor V' P'\nf : AffineEquiv R P P'\na b : P\n⊢ Eq (f (midpoint R a b)) (midpoint R (f a) (f b))","decl":"@[simp]\ntheorem AffineEquiv.map_midpoint (f : P ≃ᵃ[R] P') (a b : P) :\n    f (midpoint R a b) = midpoint R (f a) (f b) :=\n  f.apply_lineMap a b _\n\n"}
{"name":"AffineEquiv.pointReflection_midpoint_left","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq ((AffineEquiv.pointReflection R (midpoint R x y)) x) y","decl":"theorem AffineEquiv.pointReflection_midpoint_left (x y : P) :\n    pointReflection R (midpoint R x y) x = y := by\n  rw [midpoint, pointReflection_apply, lineMap_apply, vadd_vsub, vadd_vadd, ← add_smul, ← two_mul,\n    mul_invOf_self, one_smul, vsub_vadd]\n\n"}
{"name":"Equiv.pointReflection_midpoint_left","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq ((Equiv.pointReflection (midpoint R x y)) x) y","decl":"@[simp] -- Porting note: added variant with `Equiv.pointReflection` for `simp`\ntheorem Equiv.pointReflection_midpoint_left (x y : P) :\n    (Equiv.pointReflection (midpoint R x y)) x = y := by\n  rw [midpoint, pointReflection_apply, lineMap_apply, vadd_vsub, vadd_vadd, ← add_smul, ← two_mul,\n    mul_invOf_self, one_smul, vsub_vadd]\n\n"}
{"name":"midpoint_comm","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq (midpoint R x y) (midpoint R y x)","decl":"theorem midpoint_comm (x y : P) : midpoint R x y = midpoint R y x := by\n  rw [midpoint, ← lineMap_apply_one_sub, one_sub_invOf_two, midpoint]\n\n"}
{"name":"AffineEquiv.pointReflection_midpoint_right","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq ((AffineEquiv.pointReflection R (midpoint R x y)) y) x","decl":"theorem AffineEquiv.pointReflection_midpoint_right (x y : P) :\n    pointReflection R (midpoint R x y) y = x := by\n  rw [midpoint_comm, AffineEquiv.pointReflection_midpoint_left]\n\n"}
{"name":"Equiv.pointReflection_midpoint_right","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq ((Equiv.pointReflection (midpoint R x y)) y) x","decl":"@[simp] -- Porting note: added variant with `Equiv.pointReflection` for `simp`\ntheorem Equiv.pointReflection_midpoint_right (x y : P) :\n    (Equiv.pointReflection (midpoint R x y)) y = x := by\n  rw [midpoint_comm, Equiv.pointReflection_midpoint_left]\n\n"}
{"name":"midpoint_vsub_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ p₃ p₄ : P\n⊢ Eq (VSub.vsub (midpoint R p₁ p₂) (midpoint R p₃ p₄)) (midpoint R (VSub.vsub p₁ p₃) (VSub.vsub p₂ p₄))","decl":"theorem midpoint_vsub_midpoint (p₁ p₂ p₃ p₄ : P) :\n    midpoint R p₁ p₂ -ᵥ midpoint R p₃ p₄ = midpoint R (p₁ -ᵥ p₃) (p₂ -ᵥ p₄) :=\n  lineMap_vsub_lineMap _ _ _ _ _\n\n"}
{"name":"midpoint_vadd_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nv v' : V\np p' : P\n⊢ Eq (HVAdd.hVAdd (midpoint R v v') (midpoint R p p')) (midpoint R (HVAdd.hVAdd v p) (HVAdd.hVAdd v' p'))","decl":"theorem midpoint_vadd_midpoint (v v' : V) (p p' : P) :\n    midpoint R v v' +ᵥ midpoint R p p' = midpoint R (v +ᵥ p) (v' +ᵥ p') :=\n  lineMap_vadd_lineMap _ _ _ _ _\n\n"}
{"name":"midpoint_eq_iff","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y z : P\n⊢ Iff (Eq (midpoint R x y) z) (Eq ((AffineEquiv.pointReflection R z) x) y)","decl":"theorem midpoint_eq_iff {x y z : P} : midpoint R x y = z ↔ pointReflection R z x = y :=\n  eq_comm.trans\n    ((injective_pointReflection_left_of_module R x).eq_iff'\n        (AffineEquiv.pointReflection_midpoint_left x y)).symm\n\n"}
{"name":"midpoint_pointReflection_left","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq (midpoint R ((Equiv.pointReflection x) y) y) x","decl":"@[simp]\ntheorem midpoint_pointReflection_left (x y : P) :\n    midpoint R (Equiv.pointReflection x y) y = x :=\n  midpoint_eq_iff.2 <| Equiv.pointReflection_involutive _ _\n\n"}
{"name":"midpoint_pointReflection_right","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Eq (midpoint R y ((Equiv.pointReflection x) y)) x","decl":"@[simp]\ntheorem midpoint_pointReflection_right (x y : P) :\n    midpoint R y (Equiv.pointReflection x y) = x :=\n  midpoint_eq_iff.2 rfl\n\n"}
{"name":"midpoint_vsub_left","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ : P\n⊢ Eq (VSub.vsub (midpoint R p₁ p₂) p₁) (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p₂ p₁))","decl":"@[simp]\ntheorem midpoint_vsub_left (p₁ p₂ : P) : midpoint R p₁ p₂ -ᵥ p₁ = (⅟ 2 : R) • (p₂ -ᵥ p₁) :=\n  lineMap_vsub_left _ _ _\n\n"}
{"name":"midpoint_vsub_right","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ : P\n⊢ Eq (VSub.vsub (midpoint R p₁ p₂) p₂) (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p₁ p₂))","decl":"@[simp]\ntheorem midpoint_vsub_right (p₁ p₂ : P) : midpoint R p₁ p₂ -ᵥ p₂ = (⅟ 2 : R) • (p₁ -ᵥ p₂) := by\n  rw [midpoint_comm, midpoint_vsub_left]\n\n"}
{"name":"left_vsub_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ : P\n⊢ Eq (VSub.vsub p₁ (midpoint R p₁ p₂)) (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p₁ p₂))","decl":"@[simp]\ntheorem left_vsub_midpoint (p₁ p₂ : P) : p₁ -ᵥ midpoint R p₁ p₂ = (⅟ 2 : R) • (p₁ -ᵥ p₂) :=\n  left_vsub_lineMap _ _ _\n\n"}
{"name":"right_vsub_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ : P\n⊢ Eq (VSub.vsub p₂ (midpoint R p₁ p₂)) (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p₂ p₁))","decl":"@[simp]\ntheorem right_vsub_midpoint (p₁ p₂ : P) : p₂ -ᵥ midpoint R p₁ p₂ = (⅟ 2 : R) • (p₂ -ᵥ p₁) := by\n  rw [midpoint_comm, left_vsub_midpoint]\n\n"}
{"name":"midpoint_vsub","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ p : P\n⊢ Eq (VSub.vsub (midpoint R p₁ p₂) p) (HAdd.hAdd (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p₁ p)) (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p₂ p)))","decl":"theorem midpoint_vsub (p₁ p₂ p : P) :\n    midpoint R p₁ p₂ -ᵥ p = (⅟ 2 : R) • (p₁ -ᵥ p) + (⅟ 2 : R) • (p₂ -ᵥ p) := by\n  rw [← vsub_sub_vsub_cancel_right p₁ p p₂, smul_sub, sub_eq_add_neg, ← smul_neg,\n    neg_vsub_eq_vsub_rev, add_assoc, invOf_two_smul_add_invOf_two_smul, ← vadd_vsub_assoc,\n    midpoint_comm, midpoint, lineMap_apply]\n\n"}
{"name":"vsub_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\np₁ p₂ p : P\n⊢ Eq (VSub.vsub p (midpoint R p₁ p₂)) (HAdd.hAdd (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p p₁)) (HSMul.hSMul (Invertible.invOf 2) (VSub.vsub p p₂)))","decl":"theorem vsub_midpoint (p₁ p₂ p : P) :\n    p -ᵥ midpoint R p₁ p₂ = (⅟ 2 : R) • (p -ᵥ p₁) + (⅟ 2 : R) • (p -ᵥ p₂) := by\n  rw [← neg_vsub_eq_vsub_rev, midpoint_vsub, neg_add, ← smul_neg, ← smul_neg, neg_vsub_eq_vsub_rev,\n    neg_vsub_eq_vsub_rev]\n\n"}
{"name":"midpoint_sub_left","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nv₁ v₂ : V\n⊢ Eq (HSub.hSub (midpoint R v₁ v₂) v₁) (HSMul.hSMul (Invertible.invOf 2) (HSub.hSub v₂ v₁))","decl":"@[simp]\ntheorem midpoint_sub_left (v₁ v₂ : V) : midpoint R v₁ v₂ - v₁ = (⅟ 2 : R) • (v₂ - v₁) :=\n  midpoint_vsub_left v₁ v₂\n\n"}
{"name":"midpoint_sub_right","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nv₁ v₂ : V\n⊢ Eq (HSub.hSub (midpoint R v₁ v₂) v₂) (HSMul.hSMul (Invertible.invOf 2) (HSub.hSub v₁ v₂))","decl":"@[simp]\ntheorem midpoint_sub_right (v₁ v₂ : V) : midpoint R v₁ v₂ - v₂ = (⅟ 2 : R) • (v₁ - v₂) :=\n  midpoint_vsub_right v₁ v₂\n\n"}
{"name":"left_sub_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nv₁ v₂ : V\n⊢ Eq (HSub.hSub v₁ (midpoint R v₁ v₂)) (HSMul.hSMul (Invertible.invOf 2) (HSub.hSub v₁ v₂))","decl":"@[simp]\ntheorem left_sub_midpoint (v₁ v₂ : V) : v₁ - midpoint R v₁ v₂ = (⅟ 2 : R) • (v₁ - v₂) :=\n  left_vsub_midpoint v₁ v₂\n\n"}
{"name":"right_sub_midpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nv₁ v₂ : V\n⊢ Eq (HSub.hSub v₂ (midpoint R v₁ v₂)) (HSMul.hSMul (Invertible.invOf 2) (HSub.hSub v₂ v₁))","decl":"@[simp]\ntheorem right_sub_midpoint (v₁ v₂ : V) : v₂ - midpoint R v₁ v₂ = (⅟ 2 : R) • (v₂ - v₁) :=\n  right_vsub_midpoint v₁ v₂\n\n"}
{"name":"midpoint_eq_left_iff","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Iff (Eq (midpoint R x y) x) (Eq x y)","decl":"@[simp]\ntheorem midpoint_eq_left_iff {x y : P} : midpoint R x y = x ↔ x = y := by\n  rw [midpoint_eq_iff, pointReflection_self]\n\n"}
{"name":"left_eq_midpoint_iff","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Iff (Eq x (midpoint R x y)) (Eq x y)","decl":"@[simp]\ntheorem left_eq_midpoint_iff {x y : P} : x = midpoint R x y ↔ x = y := by\n  rw [eq_comm, midpoint_eq_left_iff]\n\n"}
{"name":"midpoint_eq_right_iff","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Iff (Eq (midpoint R x y) y) (Eq x y)","decl":"@[simp]\ntheorem midpoint_eq_right_iff {x y : P} : midpoint R x y = y ↔ x = y := by\n  rw [midpoint_comm, midpoint_eq_left_iff, eq_comm]\n\n"}
{"name":"right_eq_midpoint_iff","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y : P\n⊢ Iff (Eq y (midpoint R x y)) (Eq x y)","decl":"@[simp]\ntheorem right_eq_midpoint_iff {x y : P} : y = midpoint R x y ↔ x = y := by\n  rw [eq_comm, midpoint_eq_right_iff]\n\n"}
{"name":"midpoint_eq_midpoint_iff_vsub_eq_vsub","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx x' y y' : P\n⊢ Iff (Eq (midpoint R x y) (midpoint R x' y')) (Eq (VSub.vsub x x') (VSub.vsub y' y))","decl":"theorem midpoint_eq_midpoint_iff_vsub_eq_vsub {x x' y y' : P} :\n    midpoint R x y = midpoint R x' y' ↔ x -ᵥ x' = y' -ᵥ y := by\n  rw [← @vsub_eq_zero_iff_eq V, midpoint_vsub_midpoint, midpoint_eq_iff, pointReflection_apply,\n    vsub_eq_sub, zero_sub, vadd_eq_add, add_zero, neg_eq_iff_eq_neg, neg_vsub_eq_vsub_rev]\n\n"}
{"name":"midpoint_eq_iff'","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx y z : P\n⊢ Iff (Eq (midpoint R x y) z) (Eq ((Equiv.pointReflection z) x) y)","decl":"theorem midpoint_eq_iff' {x y z : P} : midpoint R x y = z ↔ Equiv.pointReflection z x = y :=\n  midpoint_eq_iff\n\n"}
{"name":"midpoint_unique","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁷ : Ring R\ninst✝⁶ : Invertible 2\ninst✝⁵ : AddCommGroup V\ninst✝⁴ : Module R V\ninst✝³ : AddTorsor V P\nR' : Type u_6\ninst✝² : Ring R'\ninst✝¹ : Invertible 2\ninst✝ : Module R' V\nx y : P\n⊢ Eq (midpoint R x y) (midpoint R' x y)","decl":"/-- `midpoint` does not depend on the ring `R`. -/\ntheorem midpoint_unique (R' : Type*) [Ring R'] [Invertible (2 : R')] [Module R' V] (x y : P) :\n    midpoint R x y = midpoint R' x y :=\n  (midpoint_eq_iff' R).2 <| (midpoint_eq_iff' R').1 rfl\n\n"}
{"name":"midpoint_self","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\nP : Type u_4\ninst✝⁴ : Ring R\ninst✝³ : Invertible 2\ninst✝² : AddCommGroup V\ninst✝¹ : Module R V\ninst✝ : AddTorsor V P\nx : P\n⊢ Eq (midpoint R x x) x","decl":"@[simp]\ntheorem midpoint_self (x : P) : midpoint R x x = x :=\n  lineMap_same_apply _ _\n\n"}
{"name":"midpoint_add_self","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx y : V\n⊢ Eq (HAdd.hAdd (midpoint R x y) (midpoint R x y)) (HAdd.hAdd x y)","decl":"@[simp]\ntheorem midpoint_add_self (x y : V) : midpoint R x y + midpoint R x y = x + y :=\n  calc\n    midpoint R x y +ᵥ midpoint R x y = midpoint R x y +ᵥ midpoint R y x := by rw [midpoint_comm]\n    _ = x + y := by rw [midpoint_vadd_midpoint, vadd_eq_add, vadd_eq_add, add_comm, midpoint_self]\n\n"}
{"name":"midpoint_zero_add","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx y : V\n⊢ Eq (midpoint R 0 (HAdd.hAdd x y)) (midpoint R x y)","decl":"theorem midpoint_zero_add (x y : V) : midpoint R 0 (x + y) = midpoint R x y :=\n  (midpoint_eq_midpoint_iff_vsub_eq_vsub R).2 <| by simp [sub_add_eq_sub_sub_swap]\n\n"}
{"name":"midpoint_eq_smul_add","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx y : V\n⊢ Eq (midpoint R x y) (HSMul.hSMul (Invertible.invOf 2) (HAdd.hAdd x y))","decl":"theorem midpoint_eq_smul_add (x y : V) : midpoint R x y = (⅟ 2 : R) • (x + y) := by\n  rw [midpoint_eq_iff, pointReflection_apply, vsub_eq_sub, vadd_eq_add, sub_add_eq_add_sub, ←\n    two_smul R, smul_smul, mul_invOf_self, one_smul, add_sub_cancel_left]\n\n"}
{"name":"midpoint_self_neg","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx : V\n⊢ Eq (midpoint R x (Neg.neg x)) 0","decl":"@[simp]\ntheorem midpoint_self_neg (x : V) : midpoint R x (-x) = 0 := by\n  rw [midpoint_eq_smul_add, add_neg_cancel, smul_zero]\n\n"}
{"name":"midpoint_neg_self","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx : V\n⊢ Eq (midpoint R (Neg.neg x) x) 0","decl":"@[simp]\ntheorem midpoint_neg_self (x : V) : midpoint R (-x) x = 0 := by simpa using midpoint_self_neg R (-x)\n\n"}
{"name":"midpoint_sub_add","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx y : V\n⊢ Eq (midpoint R (HSub.hSub x y) (HAdd.hAdd x y)) x","decl":"@[simp]\ntheorem midpoint_sub_add (x y : V) : midpoint R (x - y) (x + y) = x := by\n  rw [sub_eq_add_neg, ← vadd_eq_add, ← vadd_eq_add, ← midpoint_vadd_midpoint]; simp\n\n"}
{"name":"midpoint_add_sub","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nV : Type u_2\ninst✝³ : Ring R\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup V\ninst✝ : Module R V\nx y : V\n⊢ Eq (midpoint R (HAdd.hAdd x y) (HSub.hSub x y)) x","decl":"@[simp]\ntheorem midpoint_add_sub (x y : V) : midpoint R (x + y) (x - y) = x := by\n  rw [midpoint_comm]; simp\n\n"}
{"name":"AddMonoidHom.coe_ofMapMidpoint","module":"Mathlib.LinearAlgebra.AffineSpace.Midpoint","initialProofState":"R : Type u_1\nR' : Type u_2\nE : Type u_3\nF : Type u_4\ninst✝⁷ : Ring R\ninst✝⁶ : Invertible 2\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module R E\ninst✝³ : Ring R'\ninst✝² : Invertible 2\ninst✝¹ : AddCommGroup F\ninst✝ : Module R' F\nf : E → F\nh0 : Eq (f 0) 0\nhm : ∀ (x y : E), Eq (f (midpoint R x y)) (midpoint R' (f x) (f y))\n⊢ Eq (⇑(AddMonoidHom.ofMapMidpoint R R' f h0 hm)) f","decl":"@[simp]\ntheorem coe_ofMapMidpoint (f : E → F) (h0 : f 0 = 0)\n    (hm : ∀ x y, f (midpoint R x y) = midpoint R' (f x) (f y)) :\n    ⇑(ofMapMidpoint R R' f h0 hm) = f :=\n  rfl\n\n"}
