{"name":"PointedCone.toConvexCone_injective","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\n⊢ Function.Injective PointedCone.toConvexCone","decl":"theorem toConvexCone_injective : Injective ((↑) : PointedCone 𝕜 E → ConvexCone 𝕜 E) :=\n  fun _ _ => by simp [toConvexCone]\n\n"}
{"name":"PointedCone.toConvexCone_pointed","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS : PointedCone 𝕜 E\n⊢ (↑S).Pointed","decl":"@[simp]\ntheorem toConvexCone_pointed (S : PointedCone 𝕜 E) : (S : ConvexCone 𝕜 E).Pointed := by\n  simp [toConvexCone, ConvexCone.Pointed]\n\n"}
{"name":"PointedCone.ext_iff","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS T : PointedCone 𝕜 E\n⊢ Iff (Eq S T) (∀ (x : E), Iff (Membership.mem S x) (Membership.mem T x))","decl":"@[ext]\ntheorem ext {S T : PointedCone 𝕜 E} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"PointedCone.ext","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS T : PointedCone 𝕜 E\nh : ∀ (x : E), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"@[ext]\ntheorem ext {S T : PointedCone 𝕜 E} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"ConvexCone.mem_toPointedCone","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS : ConvexCone 𝕜 E\nhS : S.Pointed\nx : E\n⊢ Iff (Membership.mem (ConvexCone.toPointedCone hS) x) (Membership.mem S x)","decl":"@[simp]\nlemma _root_.ConvexCone.mem_toPointedCone {S : ConvexCone 𝕜 E} (hS : S.Pointed) (x : E) :\n    x ∈ S.toPointedCone hS ↔ x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"ConvexCone.coe_toPointedCone","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS : ConvexCone 𝕜 E\nhS : S.Pointed\n⊢ Eq (↑(ConvexCone.toPointedCone hS)) S","decl":"@[simp, norm_cast]\nlemma _root_.ConvexCone.coe_toPointedCone {S : ConvexCone 𝕜 E} (hS : S.Pointed) :\n    S.toPointedCone hS = S :=\n  rfl\n\n"}
{"name":"PointedCone.canLift","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\n⊢ CanLift (ConvexCone 𝕜 E) (PointedCone 𝕜 E) PointedCone.toConvexCone ConvexCone.Pointed","decl":"instance canLift : CanLift (ConvexCone 𝕜 E) (PointedCone 𝕜 E) (↑) ConvexCone.Pointed where\n  prf S hS := ⟨S.toPointedCone hS, rfl⟩\n\n"}
{"name":"PointedCone.toConvexCone_map","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : AddCommMonoid F\ninst✝ : Module 𝕜 F\nS : PointedCone 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F\n⊢ Eq (↑(PointedCone.map f S)) (ConvexCone.map f ↑S)","decl":"@[simp, norm_cast]\ntheorem toConvexCone_map (S : PointedCone 𝕜 E) (f : E →ₗ[𝕜] F) :\n    (S.map f : ConvexCone 𝕜 F) = (S : ConvexCone 𝕜 E).map f :=\n  rfl\n\n"}
{"name":"PointedCone.coe_map","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : AddCommMonoid F\ninst✝ : Module 𝕜 F\nS : PointedCone 𝕜 E\nf : LinearMap (RingHom.id 𝕜) E F\n⊢ Eq (↑(PointedCone.map f S)) (Set.image ⇑f ↑S)","decl":"@[simp, norm_cast]\ntheorem coe_map (S : PointedCone 𝕜 E) (f : E →ₗ[𝕜] F) : (S.map f : Set F) = f '' S :=\n  rfl\n\n"}
{"name":"PointedCone.mem_map","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : AddCommMonoid F\ninst✝ : Module 𝕜 F\nf : LinearMap (RingHom.id 𝕜) E F\nS : PointedCone 𝕜 E\ny : F\n⊢ Iff (Membership.mem (PointedCone.map f S) y) (Exists fun x => And (Membership.mem S x) (Eq (f x) y))","decl":"@[simp]\ntheorem mem_map {f : E →ₗ[𝕜] F} {S : PointedCone 𝕜 E} {y : F} : y ∈ S.map f ↔ ∃ x ∈ S, f x = y :=\n  Iff.rfl\n\n"}
{"name":"PointedCone.map_map","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nG : Type u_4\ninst✝⁶ : OrderedSemiring 𝕜\ninst✝⁵ : AddCommMonoid E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : AddCommMonoid F\ninst✝² : Module 𝕜 F\ninst✝¹ : AddCommMonoid G\ninst✝ : Module 𝕜 G\ng : LinearMap (RingHom.id 𝕜) F G\nf : LinearMap (RingHom.id 𝕜) E F\nS : PointedCone 𝕜 E\n⊢ Eq (PointedCone.map g (PointedCone.map f S)) (PointedCone.map (g.comp f) S)","decl":"theorem map_map (g : F →ₗ[𝕜] G) (f : E →ₗ[𝕜] F) (S : PointedCone 𝕜 E) :\n    (S.map f).map g = S.map (g.comp f) :=\n  SetLike.coe_injective <| Set.image_image g f S\n\n"}
{"name":"PointedCone.map_id","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS : PointedCone 𝕜 E\n⊢ Eq (PointedCone.map LinearMap.id S) S","decl":"@[simp]\ntheorem map_id (S : PointedCone 𝕜 E) : S.map LinearMap.id = S :=\n  SetLike.coe_injective <| Set.image_id _\n\n"}
{"name":"PointedCone.coe_comap","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : AddCommMonoid F\ninst✝ : Module 𝕜 F\nf : LinearMap (RingHom.id 𝕜) E F\nS : PointedCone 𝕜 F\n⊢ Eq (↑(PointedCone.comap f S)) (Set.preimage ⇑f ↑S)","decl":"@[simp, norm_cast]\ntheorem coe_comap (f : E →ₗ[𝕜] F) (S : PointedCone 𝕜 F) : (S.comap f : Set E) = f ⁻¹' S :=\n  rfl\n\n"}
{"name":"PointedCone.comap_id","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nS : PointedCone 𝕜 E\n⊢ Eq (PointedCone.comap LinearMap.id S) S","decl":"@[simp]\ntheorem comap_id (S : PointedCone 𝕜 E) : S.comap LinearMap.id = S :=\n  rfl\n\n"}
{"name":"PointedCone.comap_comap","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\nG : Type u_4\ninst✝⁶ : OrderedSemiring 𝕜\ninst✝⁵ : AddCommMonoid E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : AddCommMonoid F\ninst✝² : Module 𝕜 F\ninst✝¹ : AddCommMonoid G\ninst✝ : Module 𝕜 G\ng : LinearMap (RingHom.id 𝕜) F G\nf : LinearMap (RingHom.id 𝕜) E F\nS : PointedCone 𝕜 G\n⊢ Eq (PointedCone.comap f (PointedCone.comap g S)) (PointedCone.comap (g.comp f) S)","decl":"theorem comap_comap (g : F →ₗ[𝕜] G) (f : E →ₗ[𝕜] F) (S : PointedCone 𝕜 G) :\n    (S.comap g).comap f = S.comap (g.comp f) :=\n  rfl\n\n"}
{"name":"PointedCone.mem_comap","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : Module 𝕜 E\ninst✝¹ : AddCommMonoid F\ninst✝ : Module 𝕜 F\nf : LinearMap (RingHom.id 𝕜) E F\nS : PointedCone 𝕜 F\nx : E\n⊢ Iff (Membership.mem (PointedCone.comap f S) x) (Membership.mem S (f x))","decl":"@[simp]\ntheorem mem_comap {f : E →ₗ[𝕜] F} {S : PointedCone 𝕜 F} {x : E} : x ∈ S.comap f ↔ f x ∈ S :=\n  Iff.rfl\n\n"}
{"name":"PointedCone.mem_positive","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : OrderedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx : E\n⊢ Iff (Membership.mem (PointedCone.positive 𝕜 E) x) (LE.le 0 x)","decl":"@[simp]\ntheorem mem_positive {x : E} : x ∈ positive 𝕜 E ↔ 0 ≤ x :=\n  Iff.rfl\n\n"}
{"name":"PointedCone.toConvexCone_positive","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : OrderedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\n⊢ Eq (↑(PointedCone.positive 𝕜 E)) (ConvexCone.positive 𝕜 E)","decl":"@[simp, norm_cast]\ntheorem toConvexCone_positive : ↑(positive 𝕜 E) = ConvexCone.positive 𝕜 E :=\n  rfl\n\n"}
{"name":"PointedCone.toConvexCone_dual","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"E : Type u_5\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace Real E\nS : PointedCone Real E\n⊢ Eq (↑S.dual) (↑S).innerDualCone","decl":"@[simp, norm_cast]\ntheorem toConvexCone_dual (S : PointedCone ℝ E) : ↑(dual S) = (S : Set E).innerDualCone :=\n  rfl\n\n"}
{"name":"PointedCone.mem_dual","module":"Mathlib.Analysis.Convex.Cone.Pointed","initialProofState":"E : Type u_5\ninst✝¹ : NormedAddCommGroup E\ninst✝ : InnerProductSpace Real E\nS : PointedCone Real E\ny : E\n⊢ Iff (Membership.mem S.dual y) (∀ ⦃x : E⦄, Membership.mem S x → LE.le 0 (Inner.inner x y))","decl":"open scoped InnerProductSpace in\n@[simp]\ntheorem mem_dual {S : PointedCone ℝ E} {y : E} : y ∈ dual S ↔ ∀ ⦃x⦄, x ∈ S → 0 ≤ ⟪x, y⟫_ℝ := by\n  rfl\n\n"}
