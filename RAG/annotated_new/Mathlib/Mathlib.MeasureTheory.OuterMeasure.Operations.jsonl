{"name":"MeasureTheory.OuterMeasure.coe_zero","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\n⊢ Eq (⇑0) 0","decl":"@[simp]\ntheorem coe_zero : ⇑(0 : OuterMeasure α) = 0 :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.coe_add","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm₁ m₂ : MeasureTheory.OuterMeasure α\n⊢ Eq (⇑(HAdd.hAdd m₁ m₂)) (HAdd.hAdd ⇑m₁ ⇑m₂)","decl":"@[simp]\ntheorem coe_add (m₁ m₂ : OuterMeasure α) : ⇑(m₁ + m₂) = m₁ + m₂ :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.add_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm₁ m₂ : MeasureTheory.OuterMeasure α\ns : Set α\n⊢ Eq ((HAdd.hAdd m₁ m₂) s) (HAdd.hAdd (m₁ s) (m₂ s))","decl":"theorem add_apply (m₁ m₂ : OuterMeasure α) (s : Set α) : (m₁ + m₂) s = m₁ s + m₂ s :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.coe_smul","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nc : R\nm : MeasureTheory.OuterMeasure α\n⊢ Eq (⇑(HSMul.hSMul c m)) (HSMul.hSMul c ⇑m)","decl":"@[simp]\ntheorem coe_smul (c : R) (m : OuterMeasure α) : ⇑(c • m) = c • ⇑m :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.smul_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nc : R\nm : MeasureTheory.OuterMeasure α\ns : Set α\n⊢ Eq ((HSMul.hSMul c m) s) (HSMul.hSMul c (m s))","decl":"theorem smul_apply (c : R) (m : OuterMeasure α) (s : Set α) : (c • m) s = c • m s :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.instSMulCommClass","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝² : SMul R ENNReal\nR' : Type u_4\ninst✝¹ : SMul R' ENNReal\ninst✝ : SMulCommClass R R' ENNReal\n⊢ SMulCommClass R R' (MeasureTheory.OuterMeasure α)","decl":"instance instSMulCommClass [SMulCommClass R R' ℝ≥0∞] : SMulCommClass R R' (OuterMeasure α) :=\n  ⟨fun _ _ _ => ext fun _ => smul_comm _ _ _⟩\n\n"}
{"name":"MeasureTheory.OuterMeasure.instIsScalarTower","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝³ : SMul R ENNReal\nR' : Type u_4\ninst✝² : SMul R' ENNReal\ninst✝¹ : SMul R R'\ninst✝ : IsScalarTower R R' ENNReal\n⊢ IsScalarTower R R' (MeasureTheory.OuterMeasure α)","decl":"instance instIsScalarTower [SMul R R'] [IsScalarTower R R' ℝ≥0∞] :\n    IsScalarTower R R' (OuterMeasure α) :=\n  ⟨fun _ _ _ => ext fun _ => smul_assoc _ _ _⟩\n\n"}
{"name":"MeasureTheory.OuterMeasure.instIsCentralScalar","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝² : SMul R ENNReal\ninst✝¹ : SMul (MulOpposite R) ENNReal\ninst✝ : IsCentralScalar R ENNReal\n⊢ IsCentralScalar R (MeasureTheory.OuterMeasure α)","decl":"instance instIsCentralScalar [SMul Rᵐᵒᵖ ℝ≥0∞] [IsCentralScalar R ℝ≥0∞] :\n    IsCentralScalar R (OuterMeasure α) :=\n  ⟨fun _ _ => ext fun _ => op_smul_eq_smul _ _⟩\n\n"}
{"name":"MeasureTheory.OuterMeasure.coeFnAddMonoidHom_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\na✝ : MeasureTheory.OuterMeasure α\na : Set α\n⊢ Eq (MeasureTheory.OuterMeasure.coeFnAddMonoidHom a✝ a) (a✝ a)","decl":"/-- `(⇑)` as an `AddMonoidHom`. -/\n@[simps]\ndef coeFnAddMonoidHom : OuterMeasure α →+ Set α → ℝ≥0∞ where\n  toFun := (⇑)\n  map_zero' := coe_zero\n  map_add' := coe_add\n\n"}
{"name":"MeasureTheory.OuterMeasure.coe_bot","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\n⊢ Eq Bot.bot 0","decl":"@[simp]\ntheorem coe_bot : (⊥ : OuterMeasure α) = 0 :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.univ_eq_zero_iff","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\n⊢ Iff (Eq (m Set.univ) 0) (Eq m 0)","decl":"theorem univ_eq_zero_iff (m : OuterMeasure α) : m univ = 0 ↔ m = 0 :=\n  ⟨fun h => bot_unique fun s => (measure_mono <| subset_univ s).trans_eq h, fun h => h.symm ▸ rfl⟩\n\n"}
{"name":"MeasureTheory.OuterMeasure.sSup_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nms : Set (MeasureTheory.OuterMeasure α)\ns : Set α\n⊢ Eq ((SupSet.sSup ms) s) (iSup fun m => iSup fun h => m s)","decl":"@[simp]\ntheorem sSup_apply (ms : Set (OuterMeasure α)) (s : Set α) :\n    (sSup ms) s = ⨆ m ∈ ms, (m : OuterMeasure α) s :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.iSup_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nι : Sort u_3\nf : ι → MeasureTheory.OuterMeasure α\ns : Set α\n⊢ Eq ((iSup fun i => f i) s) (iSup fun i => (f i) s)","decl":"@[simp]\ntheorem iSup_apply {ι} (f : ι → OuterMeasure α) (s : Set α) : (⨆ i : ι, f i) s = ⨆ i, f i s := by\n  rw [iSup, sSup_apply, iSup_range]\n\n"}
{"name":"MeasureTheory.OuterMeasure.coe_iSup","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nι : Sort u_3\nf : ι → MeasureTheory.OuterMeasure α\n⊢ Eq (⇑(iSup fun i => f i)) (iSup fun i => ⇑(f i))","decl":"@[norm_cast]\ntheorem coe_iSup {ι} (f : ι → OuterMeasure α) : ⇑(⨆ i, f i) = ⨆ i, ⇑(f i) :=\n  funext fun s => by simp\n\n"}
{"name":"MeasureTheory.OuterMeasure.sup_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm₁ m₂ : MeasureTheory.OuterMeasure α\ns : Set α\n⊢ Eq ((Max.max m₁ m₂) s) (Max.max (m₁ s) (m₂ s))","decl":"@[simp]\ntheorem sup_apply (m₁ m₂ : OuterMeasure α) (s : Set α) : (m₁ ⊔ m₂) s = m₁ s ⊔ m₂ s := by\n  have := iSup_apply (fun b => cond b m₁ m₂) s; rwa [iSup_bool_eq, iSup_bool_eq] at this\n\n"}
{"name":"MeasureTheory.OuterMeasure.smul_iSup","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nR : Type u_3\ninst✝¹ : SMul R ENNReal\ninst✝ : IsScalarTower R ENNReal ENNReal\nι : Sort u_4\nf : ι → MeasureTheory.OuterMeasure α\nc : R\n⊢ Eq (HSMul.hSMul c (iSup fun i => f i)) (iSup fun i => HSMul.hSMul c (f i))","decl":"theorem smul_iSup {R : Type*} [SMul R ℝ≥0∞] [IsScalarTower R ℝ≥0∞ ℝ≥0∞]\n    {ι : Sort*} (f : ι → OuterMeasure α) (c : R) :\n    (c • ⨆ i, f i) = ⨆ i, c • f i :=\n  ext fun s => by simp only [smul_apply, iSup_apply, ENNReal.smul_iSup]\n\n"}
{"name":"MeasureTheory.OuterMeasure.mono''","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm₁ m₂ : MeasureTheory.OuterMeasure α\ns₁ s₂ : Set α\nhm : LE.le m₁ m₂\nhs : HasSubset.Subset s₁ s₂\n⊢ LE.le (m₁ s₁) (m₂ s₂)","decl":"@[mono, gcongr]\ntheorem mono'' {m₁ m₂ : OuterMeasure α} {s₁ s₂ : Set α} (hm : m₁ ≤ m₂) (hs : s₁ ⊆ s₂) :\n    m₁ s₁ ≤ m₂ s₂ :=\n  (hm s₁).trans (m₂.mono hs)\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nm : MeasureTheory.OuterMeasure α\ns : Set β\n⊢ Eq (((MeasureTheory.OuterMeasure.map f) m) s) (m (Set.preimage f s))","decl":"@[simp]\ntheorem map_apply {β} (f : α → β) (m : OuterMeasure α) (s : Set β) : map f m s = m (f ⁻¹' s) :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_id","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.map id) m) m","decl":"@[simp]\ntheorem map_id (m : OuterMeasure α) : map id m = m :=\n  ext fun _ => rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_map","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nγ : Type u_4\nf : α → β\ng : β → γ\nm : MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.map g) ((MeasureTheory.OuterMeasure.map f) m)) ((MeasureTheory.OuterMeasure.map (Function.comp g f)) m)","decl":"@[simp]\ntheorem map_map {β γ} (f : α → β) (g : β → γ) (m : OuterMeasure α) :\n    map g (map f m) = map (g ∘ f) m :=\n  ext fun _ => rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_mono","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\n⊢ Monotone ⇑(MeasureTheory.OuterMeasure.map f)","decl":"@[mono]\ntheorem map_mono {β} (f : α → β) : Monotone (map f) := fun _ _ h _ => h _\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_sup","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nm m' : MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.map f) (Max.max m m')) (Max.max ((MeasureTheory.OuterMeasure.map f) m) ((MeasureTheory.OuterMeasure.map f) m'))","decl":"@[simp]\ntheorem map_sup {β} (f : α → β) (m m' : OuterMeasure α) : map f (m ⊔ m') = map f m ⊔ map f m' :=\n  ext fun s => by simp only [map_apply, sup_apply]\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_iSup","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nι : Sort u_4\nf : α → β\nm : ι → MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.map f) (iSup fun i => m i)) (iSup fun i => (MeasureTheory.OuterMeasure.map f) (m i))","decl":"@[simp]\ntheorem map_iSup {β ι} (f : α → β) (m : ι → OuterMeasure α) : map f (⨆ i, m i) = ⨆ i, map f (m i) :=\n  ext fun s => by simp only [map_apply, iSup_apply]\n\n"}
{"name":"MeasureTheory.OuterMeasure.instLawfulFunctor","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"⊢ LawfulFunctor MeasureTheory.OuterMeasure","decl":"instance instLawfulFunctor : LawfulFunctor OuterMeasure := by constructor <;> intros <;> rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.dirac_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\na : α\ns : Set α\n⊢ Eq ((MeasureTheory.OuterMeasure.dirac a) s) (s.indicator (fun x => 1) a)","decl":"@[simp]\ntheorem dirac_apply (a : α) (s : Set α) : dirac a s = indicator s (fun _ => 1) a :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.sum_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nι : Type u_3\nf : ι → MeasureTheory.OuterMeasure α\ns : Set α\n⊢ Eq ((MeasureTheory.OuterMeasure.sum f) s) (tsum fun i => (f i) s)","decl":"@[simp]\ntheorem sum_apply {ι} (f : ι → OuterMeasure α) (s : Set α) : sum f s = ∑' i, f i s :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.smul_dirac_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\na : ENNReal\nb : α\ns : Set α\n⊢ Eq ((HSMul.hSMul a (MeasureTheory.OuterMeasure.dirac b)) s) (s.indicator (fun x => a) b)","decl":"theorem smul_dirac_apply (a : ℝ≥0∞) (b : α) (s : Set α) :\n    (a • dirac b) s = indicator s (fun _ => a) b := by\n  simp only [smul_apply, smul_eq_mul, dirac_apply, ← indicator_mul_right _ fun _ => a, mul_one]\n\n"}
{"name":"MeasureTheory.OuterMeasure.comap_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nm : MeasureTheory.OuterMeasure β\ns : Set α\n⊢ Eq (((MeasureTheory.OuterMeasure.comap f) m) s) (m (Set.image f s))","decl":"@[simp]\ntheorem comap_apply {β} (f : α → β) (m : OuterMeasure β) (s : Set α) : comap f m s = m (f '' s) :=\n  rfl\n\n"}
{"name":"MeasureTheory.OuterMeasure.comap_mono","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\n⊢ Monotone ⇑(MeasureTheory.OuterMeasure.comap f)","decl":"@[mono]\ntheorem comap_mono {β} (f : α → β) : Monotone (comap f) := fun _ _ h _ => h _\n\n"}
{"name":"MeasureTheory.OuterMeasure.comap_iSup","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nι : Sort u_4\nf : α → β\nm : ι → MeasureTheory.OuterMeasure β\n⊢ Eq ((MeasureTheory.OuterMeasure.comap f) (iSup fun i => m i)) (iSup fun i => (MeasureTheory.OuterMeasure.comap f) (m i))","decl":"@[simp]\ntheorem comap_iSup {β ι} (f : α → β) (m : ι → OuterMeasure β) :\n    comap f (⨆ i, m i) = ⨆ i, comap f (m i) :=\n  ext fun s => by simp only [comap_apply, iSup_apply]\n\n"}
{"name":"MeasureTheory.OuterMeasure.restrict_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\ns t : Set α\nm : MeasureTheory.OuterMeasure α\n⊢ Eq (((MeasureTheory.OuterMeasure.restrict s) m) t) (m (Inter.inter t s))","decl":"@[simp]\ntheorem restrict_apply (s t : Set α) (m : OuterMeasure α) : restrict s m t = m (t ∩ s) := by\n  simp [restrict, inter_comm t]\n\n"}
{"name":"MeasureTheory.OuterMeasure.restrict_mono","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\ns t : Set α\nh : HasSubset.Subset s t\nm m' : MeasureTheory.OuterMeasure α\nhm : LE.le m m'\n⊢ LE.le ((MeasureTheory.OuterMeasure.restrict s) m) ((MeasureTheory.OuterMeasure.restrict t) m')","decl":"@[mono]\ntheorem restrict_mono {s t : Set α} (h : s ⊆ t) {m m' : OuterMeasure α} (hm : m ≤ m') :\n    restrict s m ≤ restrict t m' := fun u => by\n  simp only [restrict_apply]\n  exact (hm _).trans (m'.mono <| inter_subset_inter_right _ h)\n\n"}
{"name":"MeasureTheory.OuterMeasure.restrict_univ","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.restrict Set.univ) m) m","decl":"@[simp]\ntheorem restrict_univ (m : OuterMeasure α) : restrict univ m = m :=\n  ext fun s => by simp\n\n"}
{"name":"MeasureTheory.OuterMeasure.restrict_empty","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.restrict EmptyCollection.emptyCollection) m) 0","decl":"@[simp]\ntheorem restrict_empty (m : OuterMeasure α) : restrict ∅ m = 0 :=\n  ext fun s => by simp\n\n"}
{"name":"MeasureTheory.OuterMeasure.restrict_iSup","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nι : Sort u_3\ns : Set α\nm : ι → MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.restrict s) (iSup fun i => m i)) (iSup fun i => (MeasureTheory.OuterMeasure.restrict s) (m i))","decl":"@[simp]\ntheorem restrict_iSup {ι} (s : Set α) (m : ι → OuterMeasure α) :\n    restrict s (⨆ i, m i) = ⨆ i, restrict s (m i) := by simp [restrict]\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_comap","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nm : MeasureTheory.OuterMeasure β\n⊢ Eq ((MeasureTheory.OuterMeasure.map f) ((MeasureTheory.OuterMeasure.comap f) m)) ((MeasureTheory.OuterMeasure.restrict (Set.range f)) m)","decl":"theorem map_comap {β} (f : α → β) (m : OuterMeasure β) : map f (comap f m) = restrict (range f) m :=\n  ext fun s => congr_arg m <| by simp only [image_preimage_eq_inter_range, Subtype.range_coe]\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_comap_le","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nm : MeasureTheory.OuterMeasure β\n⊢ LE.le ((MeasureTheory.OuterMeasure.map f) ((MeasureTheory.OuterMeasure.comap f) m)) m","decl":"theorem map_comap_le {β} (f : α → β) (m : OuterMeasure β) : map f (comap f m) ≤ m := fun _ =>\n  m.mono <| image_preimage_subset _ _\n\n"}
{"name":"MeasureTheory.OuterMeasure.restrict_le_self","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nm : MeasureTheory.OuterMeasure α\ns : Set α\n⊢ LE.le ((MeasureTheory.OuterMeasure.restrict s) m) m","decl":"theorem restrict_le_self (m : OuterMeasure α) (s : Set α) : restrict s m ≤ m :=\n  map_comap_le _ _\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_le_restrict_range","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nma : MeasureTheory.OuterMeasure α\nmb : MeasureTheory.OuterMeasure β\nf : α → β\n⊢ Iff (LE.le ((MeasureTheory.OuterMeasure.map f) ma) ((MeasureTheory.OuterMeasure.restrict (Set.range f)) mb)) (LE.le ((MeasureTheory.OuterMeasure.map f) ma) mb)","decl":"@[simp]\ntheorem map_le_restrict_range {β} {ma : OuterMeasure α} {mb : OuterMeasure β} {f : α → β} :\n    map f ma ≤ restrict (range f) mb ↔ map f ma ≤ mb :=\n  ⟨fun h => h.trans (restrict_le_self _ _), fun h s => by simpa using h (s ∩ range f)⟩\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_comap_of_surjective","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nhf : Function.Surjective f\nm : MeasureTheory.OuterMeasure β\n⊢ Eq ((MeasureTheory.OuterMeasure.map f) ((MeasureTheory.OuterMeasure.comap f) m)) m","decl":"theorem map_comap_of_surjective {β} {f : α → β} (hf : Surjective f) (m : OuterMeasure β) :\n    map f (comap f m) = m :=\n  ext fun s => by rw [map_apply, comap_apply, hf.image_preimage]\n\n"}
{"name":"MeasureTheory.OuterMeasure.le_comap_map","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nm : MeasureTheory.OuterMeasure α\n⊢ LE.le m ((MeasureTheory.OuterMeasure.comap f) ((MeasureTheory.OuterMeasure.map f) m))","decl":"theorem le_comap_map {β} (f : α → β) (m : OuterMeasure α) : m ≤ comap f (map f m) := fun _ =>\n  m.mono <| subset_preimage_image _ _\n\n"}
{"name":"MeasureTheory.OuterMeasure.comap_map","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_3\nf : α → β\nhf : Function.Injective f\nm : MeasureTheory.OuterMeasure α\n⊢ Eq ((MeasureTheory.OuterMeasure.comap f) ((MeasureTheory.OuterMeasure.map f) m)) m","decl":"theorem comap_map {β} {f : α → β} (hf : Injective f) (m : OuterMeasure α) : comap f (map f m) = m :=\n  ext fun s => by rw [comap_apply, map_apply, hf.preimage_image]\n\n"}
{"name":"MeasureTheory.OuterMeasure.top_apply","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\ns : Set α\nh : s.Nonempty\n⊢ Eq (Top.top s) Top.top","decl":"@[simp]\ntheorem top_apply {s : Set α} (h : s.Nonempty) : (⊤ : OuterMeasure α) s = ∞ :=\n  let ⟨a, as⟩ := h\n  top_unique <| le_trans (by simp [smul_dirac_apply, as]) (le_iSup₂ (∞ • dirac a) trivial)\n\n"}
{"name":"MeasureTheory.OuterMeasure.top_apply'","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\ns : Set α\n⊢ Eq (Top.top s) (iInf fun x => 0)","decl":"theorem top_apply' (s : Set α) : (⊤ : OuterMeasure α) s = ⨅ _ : s = ∅, 0 :=\n  s.eq_empty_or_nonempty.elim (fun h => by simp [h]) fun h => by simp [h, h.ne_empty]\n\n"}
{"name":"MeasureTheory.OuterMeasure.comap_top","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_2\nf : α → β\n⊢ Eq ((MeasureTheory.OuterMeasure.comap f) Top.top) Top.top","decl":"@[simp]\ntheorem comap_top (f : α → β) : comap f ⊤ = ⊤ :=\n  ext_nonempty fun s hs => by rw [comap_apply, top_apply hs, top_apply (hs.image _)]\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_top","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_2\nf : α → β\n⊢ Eq ((MeasureTheory.OuterMeasure.map f) Top.top) ((MeasureTheory.OuterMeasure.restrict (Set.range f)) Top.top)","decl":"theorem map_top (f : α → β) : map f ⊤ = restrict (range f) ⊤ :=\n  ext fun s => by\n    rw [map_apply, restrict_apply, ← image_preimage_eq_inter_range, top_apply', top_apply',\n      Set.image_eq_empty]\n\n"}
{"name":"MeasureTheory.OuterMeasure.map_top_of_surjective","module":"Mathlib.MeasureTheory.OuterMeasure.Operations","initialProofState":"α : Type u_1\nβ : Type u_2\nf : α → β\nhf : Function.Surjective f\n⊢ Eq ((MeasureTheory.OuterMeasure.map f) Top.top) Top.top","decl":"@[simp]\ntheorem map_top_of_surjective (f : α → β) (hf : Surjective f) : map f ⊤ = ⊤ := by\n  rw [map_top, hf.range_eq, restrict_univ]\n\n"}
