{"name":"SimpleGraph.ediam_def","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\n⊢ Eq G.ediam (iSup fun p => G.edist p.1 p.2)","decl":"lemma ediam_def : G.ediam = ⨆ p : α × α, G.edist p.1 p.2 := by\n  rw [ediam, iSup_prod]\n\n"}
{"name":"SimpleGraph.edist_le_ediam","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nu v : α\n⊢ LE.le (G.edist u v) G.ediam","decl":"lemma edist_le_ediam {u v : α} : G.edist u v ≤ G.ediam :=\n  le_iSup₂ (f := G.edist) u v\n\n"}
{"name":"SimpleGraph.ediam_le_of_edist_le","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nk : ENat\nh : ∀ (u v : α), LE.le (G.edist u v) k\n⊢ LE.le G.ediam k","decl":"lemma ediam_le_of_edist_le {k : ℕ∞} (h : ∀ u v, G.edist u v ≤ k ) : G.ediam ≤ k :=\n  iSup₂_le h\n\n"}
{"name":"SimpleGraph.ediam_le_iff","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nk : ENat\n⊢ Iff (LE.le G.ediam k) (∀ (u v : α), LE.le (G.edist u v) k)","decl":"lemma ediam_le_iff {k : ℕ∞} : G.ediam ≤ k ↔ ∀ u v, G.edist u v ≤ k :=\n  iSup₂_le_iff\n\n"}
{"name":"SimpleGraph.ediam_eq_top","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\n⊢ Iff (Eq G.ediam Top.top) (∀ (b : ENat), LT.lt b Top.top → Exists fun u => Exists fun v => LT.lt b (G.edist u v))","decl":"lemma ediam_eq_top : G.ediam = ⊤ ↔ ∀ b < ⊤, ∃ u v, b < G.edist u v := by\n  simp only [ediam, iSup_eq_top, lt_iSup_iff]\n\n"}
{"name":"SimpleGraph.ediam_eq_zero_of_subsingleton","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Subsingleton α\n⊢ Eq G.ediam 0","decl":"lemma ediam_eq_zero_of_subsingleton [Subsingleton α] : G.ediam = 0 := by\n  rw [ediam_def, ENat.iSup_eq_zero]\n  simpa [edist_eq_zero_iff, Prod.forall] using subsingleton_iff.mp ‹_›\n\n"}
{"name":"SimpleGraph.nontrivial_of_ediam_ne_zero","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Ne G.ediam 0\n⊢ Nontrivial α","decl":"lemma nontrivial_of_ediam_ne_zero (h : G.ediam ≠ 0) : Nontrivial α := by\n  contrapose! h\n  rw [not_nontrivial_iff_subsingleton] at h\n  exact ediam_eq_zero_of_subsingleton\n\n"}
{"name":"SimpleGraph.ediam_ne_zero","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Nontrivial α\n⊢ Ne G.ediam 0","decl":"lemma ediam_ne_zero [Nontrivial α] : G.ediam ≠ 0 := by\n  obtain ⟨u, v, huv⟩ := exists_pair_ne ‹_›\n  contrapose! huv\n  simp only [ediam, nonpos_iff_eq_zero, ENat.iSup_eq_zero, edist_eq_zero_iff] at huv\n  exact huv u v\n\n"}
{"name":"SimpleGraph.subsingleton_of_ediam_eq_zero","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Eq G.ediam 0\n⊢ Subsingleton α","decl":"lemma subsingleton_of_ediam_eq_zero (h : G.ediam = 0) : Subsingleton α := by\n  contrapose! h\n  apply not_subsingleton_iff_nontrivial.mp at h\n  exact ediam_ne_zero\n\n"}
{"name":"SimpleGraph.ediam_ne_zero_iff_nontrivial","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\n⊢ Iff (Ne G.ediam 0) (Nontrivial α)","decl":"lemma ediam_ne_zero_iff_nontrivial :\n    G.ediam ≠ 0 ↔ Nontrivial α :=\n  ⟨nontrivial_of_ediam_ne_zero, fun _ ↦ ediam_ne_zero⟩\n\n"}
{"name":"SimpleGraph.ediam_eq_zero_iff_subsingleton","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\n⊢ Iff (Eq G.ediam 0) (Subsingleton α)","decl":"@[simp]\nlemma ediam_eq_zero_iff_subsingleton :\n    G.ediam = 0 ↔ Subsingleton α :=\n  ⟨subsingleton_of_ediam_eq_zero, fun _ ↦ ediam_eq_zero_of_subsingleton⟩\n\n"}
{"name":"SimpleGraph.ediam_eq_top_of_not_connected","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Nonempty α\nh : Not G.Connected\n⊢ Eq G.ediam Top.top","decl":"lemma ediam_eq_top_of_not_connected [Nonempty α] (h : ¬G.Connected) : G.ediam = ⊤ := by\n  rw [connected_iff_exists_forall_reachable] at h\n  push_neg at h\n  obtain ⟨_, hw⟩ := h Classical.ofNonempty\n  rw [eq_top_iff, ← edist_eq_top_of_not_reachable hw]\n  exact edist_le_ediam\n\n"}
{"name":"SimpleGraph.ediam_eq_top_of_not_preconnected","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Not G.Preconnected\n⊢ Eq G.ediam Top.top","decl":"lemma ediam_eq_top_of_not_preconnected (h : ¬G.Preconnected) : G.ediam = ⊤ := by\n  cases isEmpty_or_nonempty α\n  · exfalso\n    exact h <| IsEmpty.forall_iff.mpr trivial\n  · apply ediam_eq_top_of_not_connected\n    rw [connected_iff]\n    tauto\n\n"}
{"name":"SimpleGraph.exists_edist_eq_ediam_of_ne_top","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Nonempty α\nh : Ne G.ediam Top.top\n⊢ Exists fun u => Exists fun v => Eq (G.edist u v) G.ediam","decl":"lemma exists_edist_eq_ediam_of_ne_top [Nonempty α] (h : G.ediam ≠ ⊤) :\n    ∃ u v, G.edist u v = G.ediam :=\n  ENat.exists_eq_iSup₂_of_lt_top h.lt_top\n\n-- Note: Neither `Finite α` nor `G.ediam ≠ ⊤` implies the other.\n"}
{"name":"SimpleGraph.exists_edist_eq_ediam_of_finite","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝¹ : Nonempty α\ninst✝ : Finite α\n⊢ Exists fun u => Exists fun v => Eq (G.edist u v) G.ediam","decl":"lemma exists_edist_eq_ediam_of_finite [Nonempty α] [Finite α] :\n    ∃ u v, G.edist u v = G.ediam :=\n  Prod.exists'.mp <| ediam_def ▸ exists_eq_ciSup_of_finite\n\n"}
{"name":"SimpleGraph.ediam_anti","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG G' : SimpleGraph α\nh : LE.le G G'\n⊢ LE.le G'.ediam G.ediam","decl":"@[gcongr]\nlemma ediam_anti (h : G ≤ G') : G'.ediam ≤ G.ediam :=\n  iSup₂_mono fun _ _ ↦ edist_anti h\n\n"}
{"name":"SimpleGraph.ediam_bot","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\ninst✝ : Nontrivial α\n⊢ Eq Bot.bot.ediam Top.top","decl":"@[simp]\nlemma ediam_bot [Nontrivial α] : (⊥ : SimpleGraph α).ediam = ⊤ :=\n  ediam_eq_top_of_not_connected bot_not_connected\n\n"}
{"name":"SimpleGraph.ediam_top","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\ninst✝ : Nontrivial α\n⊢ Eq Top.top.ediam 1","decl":"@[simp]\nlemma ediam_top [Nontrivial α] : (⊤ : SimpleGraph α).ediam = 1 := by\n  apply le_antisymm ?_ <| Order.one_le_iff_pos.mpr <| pos_iff_ne_zero.mpr ediam_ne_zero\n  apply ediam_def ▸ iSup_le_iff.mpr\n  intro p\n  by_cases h : (⊤ : SimpleGraph α).Adj p.1 p.2\n  · apply le_of_eq <| edist_eq_one_iff_adj.mpr h\n  · simp_all\n\n"}
{"name":"SimpleGraph.ediam_eq_one","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Nontrivial α\n⊢ Iff (Eq G.ediam 1) (Eq G Top.top)","decl":"@[simp]\nlemma ediam_eq_one [Nontrivial α] : G.ediam = 1 ↔ G = ⊤ := by\n  refine ⟨fun h₁ ↦ ?_, fun h ↦ h ▸ ediam_top⟩\n  ext u v\n  refine ⟨fun h ↦ h.ne, fun h₂ ↦ ?_⟩\n  apply G.edist_pos_of_ne at h₂\n  apply le_of_eq at h₁\n  rw [ediam_def, iSup_le_iff] at h₁\n  exact edist_eq_one_iff_adj.mp <| le_antisymm (h₁ (u, v)) <| Order.one_le_iff_pos.mpr h₂\n\n"}
{"name":"SimpleGraph.diam_def","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\n⊢ Eq G.diam (iSup fun p => G.edist p.1 p.2).toNat","decl":"lemma diam_def : G.diam = (⨆ p : α × α, G.edist p.1 p.2).toNat := by\n  rw [diam, ediam_def]\n\n"}
{"name":"SimpleGraph.dist_le_diam","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Ne G.ediam Top.top\nu v : α\n⊢ LE.le (G.dist u v) G.diam","decl":"lemma dist_le_diam (h : G.ediam ≠ ⊤) {u v : α} : G.dist u v ≤ G.diam :=\n  ENat.toNat_le_toNat edist_le_ediam h\n\n"}
{"name":"SimpleGraph.nontrivial_of_diam_ne_zero","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Ne G.diam 0\n⊢ Nontrivial α","decl":"lemma nontrivial_of_diam_ne_zero (h : G.diam ≠ 0) : Nontrivial α := by\n  apply G.nontrivial_of_ediam_ne_zero\n  contrapose! h\n  simp [diam, h]\n\n"}
{"name":"SimpleGraph.diam_eq_zero_of_not_connected","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Not G.Connected\n⊢ Eq G.diam 0","decl":"lemma diam_eq_zero_of_not_connected (h : ¬G.Connected) : G.diam = 0 := by\n  cases isEmpty_or_nonempty α\n  · rw [diam, ediam, ciSup_of_empty, bot_eq_zero']; rfl\n  · rw [diam, ediam_eq_top_of_not_connected h, ENat.toNat_top]\n\n"}
{"name":"SimpleGraph.diam_eq_zero_of_ediam_eq_top","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Eq G.ediam Top.top\n⊢ Eq G.diam 0","decl":"lemma diam_eq_zero_of_ediam_eq_top (h : G.ediam = ⊤) : G.diam = 0 := by\n  rw [diam, h, ENat.toNat_top]\n\n"}
{"name":"SimpleGraph.ediam_ne_top_of_diam_ne_zero","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\nh : Ne G.diam 0\n⊢ Ne G.ediam Top.top","decl":"lemma ediam_ne_top_of_diam_ne_zero (h : G.diam ≠ 0) : G.ediam ≠ ⊤ :=\n  mt diam_eq_zero_of_ediam_eq_top  h\n\n"}
{"name":"SimpleGraph.exists_dist_eq_diam","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Nonempty α\n⊢ Exists fun u => Exists fun v => Eq (G.dist u v) G.diam","decl":"lemma exists_dist_eq_diam [Nonempty α] :\n    ∃ u v, G.dist u v = G.diam := by\n  by_cases h : G.diam = 0\n  · simp [h]\n  · obtain ⟨u, v, huv⟩ := exists_edist_eq_ediam_of_ne_top <| ediam_ne_top_of_diam_ne_zero h\n    use u, v\n    rw [diam, dist, congrArg ENat.toNat huv]\n\n"}
{"name":"SimpleGraph.diam_anti_of_ediam_ne_top","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG G' : SimpleGraph α\nh : LE.le G G'\nhn : Ne G.ediam Top.top\n⊢ LE.le G'.diam G.diam","decl":"@[gcongr]\nlemma diam_anti_of_ediam_ne_top (h : G ≤ G') (hn : G.ediam ≠ ⊤) : G'.diam ≤ G.diam :=\n  ENat.toNat_le_toNat (ediam_anti h) hn\n\n"}
{"name":"SimpleGraph.diam_bot","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\n⊢ Eq Bot.bot.diam 0","decl":"@[simp]\nlemma diam_bot : (⊥ : SimpleGraph α).diam = 0 := by\n  rw [diam, ENat.toNat_eq_zero]\n  cases subsingleton_or_nontrivial α\n  · exact Or.inl ediam_eq_zero_of_subsingleton\n  · exact Or.inr ediam_bot\n\n"}
{"name":"SimpleGraph.diam_top","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\ninst✝ : Nontrivial α\n⊢ Eq Top.top.diam 1","decl":"@[simp]\nlemma diam_top [Nontrivial α] : (⊤ : SimpleGraph α).diam = 1 := by\n  rw [diam, ediam_top, ENat.toNat_one]\n\n"}
{"name":"SimpleGraph.diam_eq_zero","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\n⊢ Iff (Eq G.diam 0) (Or (Eq G.ediam Top.top) (Subsingleton α))","decl":"@[simp]\nlemma diam_eq_zero : G.diam = 0 ↔ G.ediam = ⊤ ∨ Subsingleton α := by\n  rw [diam, ENat.toNat_eq_zero, or_comm, ediam_eq_zero_iff_subsingleton]\n\n"}
{"name":"SimpleGraph.diam_eq_one","module":"Mathlib.Combinatorics.SimpleGraph.Diam","initialProofState":"α : Type u_1\nG : SimpleGraph α\ninst✝ : Nontrivial α\n⊢ Iff (Eq G.diam 1) (Eq G Top.top)","decl":"@[simp]\nlemma diam_eq_one [Nontrivial α] : G.diam = 1 ↔ G = ⊤ := by\n  rw [diam, ENat.toNat_eq_iff one_ne_zero, Nat.cast_one, ediam_eq_one]\n\n"}
