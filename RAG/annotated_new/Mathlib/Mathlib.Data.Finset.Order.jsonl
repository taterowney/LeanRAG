{"name":"Directed.finset_le","module":"Mathlib.Data.Finset.Order","initialProofState":"α : Type u\nr : α → α → Prop\ninst✝ : IsTrans α r\nι : Type u_1\nhι : Nonempty ι\nf : ι → α\nD : Directed r f\ns : Finset ι\n⊢ Exists fun z => ∀ (i : ι), Membership.mem s i → r (f i) (f z)","decl":"theorem Directed.finset_le {r : α → α → Prop} [IsTrans α r] {ι} [hι : Nonempty ι] {f : ι → α}\n    (D : Directed r f) (s : Finset ι) : ∃ z, ∀ i ∈ s, r (f i) (f z) :=\n  show ∃ z, ∀ i ∈ s.1, r (f i) (f z) from\n    Multiset.induction_on s.1 (let ⟨z⟩ := hι; ⟨z, fun _ ↦ by simp⟩)\n      fun i _ ⟨j, H⟩ ↦\n      let ⟨k, h₁, h₂⟩ := D i j\n      ⟨k, fun _ h ↦ (Multiset.mem_cons.1 h).casesOn (fun h ↦ h.symm ▸ h₁)\n        fun h ↦ _root_.trans (H _ h) h₂⟩\n\n"}
{"name":"Finset.exists_le","module":"Mathlib.Data.Finset.Order","initialProofState":"α : Type u\ninst✝² : Nonempty α\ninst✝¹ : Preorder α\ninst✝ : IsDirected α fun x1 x2 => LE.le x1 x2\ns : Finset α\n⊢ Exists fun M => ∀ (i : α), Membership.mem s i → LE.le i M","decl":"theorem Finset.exists_le [Nonempty α] [Preorder α] [IsDirected α (· ≤ ·)] (s : Finset α) :\n    ∃ M, ∀ i ∈ s, i ≤ M :=\n  directed_id.finset_le _\n"}
