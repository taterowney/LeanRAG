{"name":"Complex.deriv_eq_smul_circleIntegral","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"F : Type v\ninst‚úù¬≤ : NormedAddCommGroup F\ninst‚úù¬π : NormedSpace Complex F\ninst‚úù : CompleteSpace F\nR : Real\nc : Complex\nf : Complex ‚Üí F\nhR : LT.lt 0 R\nhf : DiffContOnCl Complex f (Metric.ball c R)\n‚ä¢ Eq (deriv f c) (HSMul.hSMul (Inv.inv (HMul.hMul (HMul.hMul 2 ‚ÜëReal.pi) Complex.I)) (circleIntegral (fun z => HSMul.hSMul (HPow.hPow (HSub.hSub z c) (-2)) (f z)) c R))","decl":"/-- If `f` is complex differentiable on an open disc with center `c` and radius `R > 0` and is\ncontinuous on its closure, then `f' c` can be represented as an integral over the corresponding\ncircle.\n\nTODO: add a version for `w ‚àà Metric.ball c R`.\n\nTODO: add a version for higher derivatives. -/\ntheorem deriv_eq_smul_circleIntegral [CompleteSpace F] {R : ‚Ñù} {c : ‚ÑÇ} {f : ‚ÑÇ ‚Üí F} (hR : 0 < R)\n    (hf : DiffContOnCl ‚ÑÇ f (ball c R)) :\n    deriv f c = (2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ z in C(c, R), (z - c) ^ (-2 : ‚Ñ§) ‚Ä¢ f z := by\n  lift R to ‚Ñù‚â•0 using hR.le\n  refine (hf.hasFPowerSeriesOnBall hR).hasFPowerSeriesAt.deriv.trans ?_\n  simp only [cauchyPowerSeries_apply, one_div, zpow_neg, pow_one, smul_smul, zpow_two, mul_inv]\n\n"}
{"name":"Complex.norm_deriv_le_aux","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"F : Type v\ninst‚úù¬≤ : NormedAddCommGroup F\ninst‚úù¬π : NormedSpace Complex F\ninst‚úù : CompleteSpace F\nc : Complex\nR C : Real\nf : Complex ‚Üí F\nhR : LT.lt 0 R\nhf : DiffContOnCl Complex f (Metric.ball c R)\nhC : ‚àÄ (z : Complex), Membership.mem (Metric.sphere c R) z ‚Üí LE.le (Norm.norm (f z)) C\n‚ä¢ LE.le (Norm.norm (deriv f c)) (HDiv.hDiv C R)","decl":"theorem norm_deriv_le_aux [CompleteSpace F] {c : ‚ÑÇ} {R C : ‚Ñù} {f : ‚ÑÇ ‚Üí F} (hR : 0 < R)\n    (hf : DiffContOnCl ‚ÑÇ f (ball c R)) (hC : ‚àÄ z ‚àà sphere c R, ‚Äñf z‚Äñ ‚â§ C) :\n    ‚Äñderiv f c‚Äñ ‚â§ C / R := by\n  have : ‚àÄ z ‚àà sphere c R, ‚Äñ(z - c) ^ (-2 : ‚Ñ§) ‚Ä¢ f z‚Äñ ‚â§ C / (R * R) :=\n    fun z (hz : abs (z - c) = R) => by\n    simpa [-mul_inv_rev, norm_smul, hz, zpow_two, ‚Üê div_eq_inv_mul] using\n      (div_le_div_iff_of_pos_right (mul_pos hR hR)).2 (hC z hz)\n  calc\n    ‚Äñderiv f c‚Äñ = ‚Äñ(2 * œÄ * I : ‚ÑÇ)‚Åª¬π ‚Ä¢ ‚àÆ z in C(c, R), (z - c) ^ (-2 : ‚Ñ§) ‚Ä¢ f z‚Äñ :=\n      congr_arg norm (deriv_eq_smul_circleIntegral hR hf)\n    _ ‚â§ R * (C / (R * R)) :=\n      (circleIntegral.norm_two_pi_i_inv_smul_integral_le_of_norm_le_const hR.le this)\n    _ = C / R := by rw [mul_div_left_comm, div_self_mul_self', div_eq_mul_inv]\n\n"}
{"name":"Complex.norm_deriv_le_of_forall_mem_sphere_norm_le","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"F : Type v\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Complex F\nc : Complex\nR C : Real\nf : Complex ‚Üí F\nhR : LT.lt 0 R\nhd : DiffContOnCl Complex f (Metric.ball c R)\nhC : ‚àÄ (z : Complex), Membership.mem (Metric.sphere c R) z ‚Üí LE.le (Norm.norm (f z)) C\n‚ä¢ LE.le (Norm.norm (deriv f c)) (HDiv.hDiv C R)","decl":"/-- If `f` is complex differentiable on an open disc of radius `R > 0`, is continuous on its\nclosure, and its values on the boundary circle of this disc are bounded from above by `C`, then the\nnorm of its derivative at the center is at most `C / R`. -/\ntheorem norm_deriv_le_of_forall_mem_sphere_norm_le {c : ‚ÑÇ} {R C : ‚Ñù} {f : ‚ÑÇ ‚Üí F} (hR : 0 < R)\n    (hd : DiffContOnCl ‚ÑÇ f (ball c R)) (hC : ‚àÄ z ‚àà sphere c R, ‚Äñf z‚Äñ ‚â§ C) :\n    ‚Äñderiv f c‚Äñ ‚â§ C / R := by\n  set e : F ‚ÜíL[‚ÑÇ] FÃÇ := UniformSpace.Completion.toComplL\n  have : HasDerivAt (e ‚àò f) (e (deriv f c)) c :=\n    e.hasFDerivAt.comp_hasDerivAt c\n      (hd.differentiableAt isOpen_ball <| mem_ball_self hR).hasDerivAt\n  calc\n    ‚Äñderiv f c‚Äñ = ‚Äñderiv (e ‚àò f) c‚Äñ := by\n      rw [this.deriv]\n      exact (UniformSpace.Completion.norm_coe _).symm\n    _ ‚â§ C / R :=\n      norm_deriv_le_aux hR (e.differentiable.comp_diffContOnCl hd) fun z hz =>\n        (UniformSpace.Completion.norm_coe _).trans_le (hC z hz)\n\n"}
{"name":"Complex.liouville_theorem_aux","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"F : Type v\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Complex F\nf : Complex ‚Üí F\nhf : Differentiable Complex f\nhb : Bornology.IsBounded (Set.range f)\nz w : Complex\n‚ä¢ Eq (f z) (f w)","decl":"/-- An auxiliary lemma for Liouville's theorem `Differentiable.apply_eq_apply_of_bounded`. -/\ntheorem liouville_theorem_aux {f : ‚ÑÇ ‚Üí F} (hf : Differentiable ‚ÑÇ f) (hb : IsBounded (range f))\n    (z w : ‚ÑÇ) : f z = f w := by\n  suffices ‚àÄ c, deriv f c = 0 from is_const_of_deriv_eq_zero hf this z w\n  clear z w; intro c\n  obtain ‚ü®C, C‚ÇÄ, hC‚ü© : ‚àÉ C > (0 : ‚Ñù), ‚àÄ z, ‚Äñf z‚Äñ ‚â§ C := by\n    rcases isBounded_iff_forall_norm_le.1 hb with ‚ü®C, hC‚ü©\n    exact\n      ‚ü®max C 1, lt_max_iff.2 (Or.inr zero_lt_one), fun z =>\n        (hC (f z) (mem_range_self _)).trans (le_max_left _ _)‚ü©\n  refine norm_le_zero_iff.1 (le_of_forall_gt_imp_ge_of_dense fun Œµ Œµ‚ÇÄ => ?_)\n  calc\n    ‚Äñderiv f c‚Äñ ‚â§ C / (C / Œµ) :=\n      norm_deriv_le_of_forall_mem_sphere_norm_le (div_pos C‚ÇÄ Œµ‚ÇÄ) hf.diffContOnCl fun z _ => hC z\n    _ = Œµ := div_div_cancel‚ÇÄ C‚ÇÄ.lt.ne'\n\n"}
{"name":"Differentiable.apply_eq_apply_of_bounded","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"E : Type u\ninst‚úù¬≥ : NormedAddCommGroup E\ninst‚úù¬≤ : NormedSpace Complex E\nF : Type v\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Complex F\nf : E ‚Üí F\nhf : Differentiable Complex f\nhb : Bornology.IsBounded (Set.range f)\nz w : E\n‚ä¢ Eq (f z) (f w)","decl":"/-- **Liouville's theorem**: a complex differentiable bounded function `f : E ‚Üí F` is a constant. -/\ntheorem apply_eq_apply_of_bounded {f : E ‚Üí F} (hf : Differentiable ‚ÑÇ f) (hb : IsBounded (range f))\n    (z w : E) : f z = f w := by\n  set g : ‚ÑÇ ‚Üí F := f ‚àò fun t : ‚ÑÇ => t ‚Ä¢ (w - z) + z\n  suffices g 0 = g 1 by simpa [g]\n  apply liouville_theorem_aux\n  exacts [hf.comp ((differentiable_id.smul_const (w - z)).add_const z),\n    hb.subset (range_comp_subset_range _ _)]\n\n"}
{"name":"Differentiable.exists_const_forall_eq_of_bounded","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"E : Type u\ninst‚úù¬≥ : NormedAddCommGroup E\ninst‚úù¬≤ : NormedSpace Complex E\nF : Type v\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Complex F\nf : E ‚Üí F\nhf : Differentiable Complex f\nhb : Bornology.IsBounded (Set.range f)\n‚ä¢ Exists fun c => ‚àÄ (z : E), Eq (f z) c","decl":"/-- **Liouville's theorem**: a complex differentiable bounded function is a constant. -/\ntheorem exists_const_forall_eq_of_bounded {f : E ‚Üí F} (hf : Differentiable ‚ÑÇ f)\n    (hb : IsBounded (range f)) : ‚àÉ c, ‚àÄ z, f z = c :=\n  ‚ü®f 0, fun _ => hf.apply_eq_apply_of_bounded hb _ _‚ü©\n\n"}
{"name":"Differentiable.exists_eq_const_of_bounded","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"E : Type u\ninst‚úù¬≥ : NormedAddCommGroup E\ninst‚úù¬≤ : NormedSpace Complex E\nF : Type v\ninst‚úù¬π : NormedAddCommGroup F\ninst‚úù : NormedSpace Complex F\nf : E ‚Üí F\nhf : Differentiable Complex f\nhb : Bornology.IsBounded (Set.range f)\n‚ä¢ Exists fun c => Eq f (Function.const E c)","decl":"/-- **Liouville's theorem**: a complex differentiable bounded function is a constant. -/\ntheorem exists_eq_const_of_bounded {f : E ‚Üí F} (hf : Differentiable ‚ÑÇ f)\n    (hb : IsBounded (range f)) : ‚àÉ c, f = const E c :=\n  (hf.exists_const_forall_eq_of_bounded hb).imp fun _ => funext\n\n"}
{"name":"Differentiable.eq_const_of_tendsto_cocompact","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"E : Type u\ninst‚úù‚Å¥ : NormedAddCommGroup E\ninst‚úù¬≥ : NormedSpace Complex E\nF : Type v\ninst‚úù¬≤ : NormedAddCommGroup F\ninst‚úù¬π : NormedSpace Complex F\ninst‚úù : Nontrivial E\nf : E ‚Üí F\nhf : Differentiable Complex f\nc : F\nhb : Filter.Tendsto f (Filter.cocompact E) (nhds c)\n‚ä¢ Eq f (Function.const E c)","decl":"/-- A corollary of Liouville's theorem where the function tends to a finite value at infinity\n(i.e., along `Filter.cocompact`, which in proper spaces coincides with `Bornology.cobounded`). -/\ntheorem eq_const_of_tendsto_cocompact [Nontrivial E] {f : E ‚Üí F} (hf : Differentiable ‚ÑÇ f) {c : F}\n    (hb : Tendsto f (cocompact E) (ùìù c)) : f = Function.const E c := by\n  have h_bdd : Bornology.IsBounded (Set.range f) := by\n    obtain ‚ü®s, hs, hs_bdd‚ü© := Metric.exists_isBounded_image_of_tendsto hb\n    obtain ‚ü®t, ht, hts‚ü© := mem_cocompact.mp hs\n    apply ht.image hf.continuous |>.isBounded.union hs_bdd |>.subset\n    simpa [Set.image_union, Set.image_univ] using Set.image_subset _ <| calc\n      Set.univ = t ‚à™ t·∂ú := t.union_compl_self.symm\n      _        ‚äÜ t ‚à™ s  := by gcongr\n  obtain ‚ü®c', hc'‚ü© := hf.exists_eq_const_of_bounded h_bdd\n  convert hc'\n  exact tendsto_nhds_unique hb (by simpa [hc'] using tendsto_const_nhds)\n\n"}
{"name":"Differentiable.apply_eq_of_tendsto_cocompact","module":"Mathlib.Analysis.Complex.Liouville","initialProofState":"E : Type u\ninst‚úù‚Å¥ : NormedAddCommGroup E\ninst‚úù¬≥ : NormedSpace Complex E\nF : Type v\ninst‚úù¬≤ : NormedAddCommGroup F\ninst‚úù¬π : NormedSpace Complex F\ninst‚úù : Nontrivial E\nf : E ‚Üí F\nhf : Differentiable Complex f\nc : F\nx : E\nhb : Filter.Tendsto f (Filter.cocompact E) (nhds c)\n‚ä¢ Eq (f x) c","decl":"/-- A corollary of Liouville's theorem where the function tends to a finite value at infinity\n(i.e., along `Filter.cocompact`, which in proper spaces coincides with `Bornology.cobounded`). -/\ntheorem apply_eq_of_tendsto_cocompact [Nontrivial E] {f : E ‚Üí F} (hf : Differentiable ‚ÑÇ f) {c : F}\n    (x : E) (hb : Tendsto f (cocompact E) (ùìù c)) : f x = c :=\n  congr($(hf.eq_const_of_tendsto_cocompact hb) x)\n\n"}
