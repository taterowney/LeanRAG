{"name":"BddDistLat.mk.injEq","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"toDistLat✝ : DistLat\nisBoundedOrder✝ : BoundedOrder ↑toDistLat✝\ntoDistLat : DistLat\nisBoundedOrder : BoundedOrder ↑toDistLat\n⊢ Eq (Eq (BddDistLat.mk toDistLat✝) (BddDistLat.mk toDistLat)) (And (Eq toDistLat✝ toDistLat) (HEq isBoundedOrder✝ isBoundedOrder))","decl":"/-- The category of bounded distributive lattices with bounded lattice morphisms. -/\nstructure BddDistLat where\n  /-- The underlying distrib lattice of a bounded distributive lattice. -/\n  toDistLat : DistLat\n  [isBoundedOrder : BoundedOrder toDistLat]\n\n"}
{"name":"BddDistLat.mk.sizeOf_spec","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"toDistLat : DistLat\nisBoundedOrder : BoundedOrder ↑toDistLat\n⊢ Eq (SizeOf.sizeOf (BddDistLat.mk toDistLat)) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toDistLat)) (SizeOf.sizeOf isBoundedOrder))","decl":"/-- The category of bounded distributive lattices with bounded lattice morphisms. -/\nstructure BddDistLat where\n  /-- The underlying distrib lattice of a bounded distributive lattice. -/\n  toDistLat : DistLat\n  [isBoundedOrder : BoundedOrder toDistLat]\n\n"}
{"name":"BddDistLat.mk.inj","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"toDistLat✝ : DistLat\nisBoundedOrder✝ : BoundedOrder ↑toDistLat✝\ntoDistLat : DistLat\nisBoundedOrder : BoundedOrder ↑toDistLat\nx✝ : Eq (BddDistLat.mk toDistLat✝) (BddDistLat.mk toDistLat)\n⊢ And (Eq toDistLat✝ toDistLat) (HEq isBoundedOrder✝ isBoundedOrder)","decl":"/-- The category of bounded distributive lattices with bounded lattice morphisms. -/\nstructure BddDistLat where\n  /-- The underlying distrib lattice of a bounded distributive lattice. -/\n  toDistLat : DistLat\n  [isBoundedOrder : BoundedOrder toDistLat]\n\n"}
{"name":"BddDistLat.coe_of","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"α : Type u_1\ninst✝¹ : DistribLattice α\ninst✝ : BoundedOrder α\n⊢ Eq (↑(BddDistLat.of α).toDistLat) α","decl":"@[simp]\ntheorem coe_of (α : Type*) [DistribLattice α] [BoundedOrder α] : ↥(of α) = α :=\n  rfl\n\n"}
{"name":"BddDistLat.coe_toBddLat","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"X : BddDistLat\n⊢ Eq ↑X.toBddLat.toLat ↑X.toDistLat","decl":"@[simp]\ntheorem coe_toBddLat (X : BddDistLat) : ↥X.toBddLat = ↥X :=\n  rfl\n\n"}
{"name":"BddDistLat.forget_bddLat_lat_eq_forget_distLat_lat","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"⊢ Eq ((CategoryTheory.forget₂ BddDistLat BddLat).comp (CategoryTheory.forget₂ BddLat Lat)) ((CategoryTheory.forget₂ BddDistLat DistLat).comp (CategoryTheory.forget₂ DistLat Lat))","decl":"theorem forget_bddLat_lat_eq_forget_distLat_lat :\n    forget₂ BddDistLat BddLat ⋙ forget₂ BddLat Lat =\n      forget₂ BddDistLat DistLat ⋙ forget₂ DistLat Lat :=\n  rfl\n\n"}
{"name":"BddDistLat.Iso.mk_hom_toLatticeHom_toSupHom_toFun","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"α β : BddDistLat\ne : OrderIso ↑α.toDistLat ↑β.toDistLat\na : ↑α.toDistLat\n⊢ Eq ((BddDistLat.Iso.mk e).hom.toSupHom a) (e a)","decl":"/-- Constructs an equivalence between bounded distributive lattices from an order isomorphism\nbetween them. -/\n@[simps]\ndef Iso.mk {α β : BddDistLat.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : BoundedLatticeHom α β)\n  inv := (e.symm : BoundedLatticeHom β α)\n  hom_inv_id := by ext; exact e.symm_apply_apply _\n  inv_hom_id := by ext; exact e.apply_symm_apply _\n\n"}
{"name":"BddDistLat.Iso.mk_inv_toLatticeHom_toSupHom_toFun","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"α β : BddDistLat\ne : OrderIso ↑α.toDistLat ↑β.toDistLat\na : ↑β.toDistLat\n⊢ Eq ((BddDistLat.Iso.mk e).inv.toSupHom a) (e.symm a)","decl":"/-- Constructs an equivalence between bounded distributive lattices from an order isomorphism\nbetween them. -/\n@[simps]\ndef Iso.mk {α β : BddDistLat.{u}} (e : α ≃o β) : α ≅ β where\n  hom := (e : BoundedLatticeHom α β)\n  inv := (e.symm : BoundedLatticeHom β α)\n  hom_inv_id := by ext; exact e.symm_apply_apply _\n  inv_hom_id := by ext; exact e.apply_symm_apply _\n\n"}
{"name":"BddDistLat.dual_obj","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"X : BddDistLat\n⊢ Eq (BddDistLat.dual.obj X) (BddDistLat.of (OrderDual ↑X.toDistLat))","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : BddDistLat ⥤ BddDistLat where\n  obj X := of Xᵒᵈ\n  map {_ _} := BoundedLatticeHom.dual\n\n"}
{"name":"BddDistLat.dual_map","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"x✝¹ x✝ : BddDistLat\na : BoundedLatticeHom ↑x✝¹.toBddLat.toLat ↑x✝.toBddLat.toLat\n⊢ Eq (BddDistLat.dual.map a) (BoundedLatticeHom.dual a)","decl":"/-- `OrderDual` as a functor. -/\n@[simps]\ndef dual : BddDistLat ⥤ BddDistLat where\n  obj X := of Xᵒᵈ\n  map {_ _} := BoundedLatticeHom.dual\n\n"}
{"name":"BddDistLat.dualEquiv_inverse","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"⊢ Eq BddDistLat.dualEquiv.inverse BddDistLat.dual","decl":"/-- The equivalence between `BddDistLat` and itself induced by `OrderDual` both ways. -/\n@[simps functor inverse]\ndef dualEquiv : BddDistLat ≌ BddDistLat where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"BddDistLat.dualEquiv_functor","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"⊢ Eq BddDistLat.dualEquiv.functor BddDistLat.dual","decl":"/-- The equivalence between `BddDistLat` and itself induced by `OrderDual` both ways. -/\n@[simps functor inverse]\ndef dualEquiv : BddDistLat ≌ BddDistLat where\n  functor := dual\n  inverse := dual\n  unitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n  counitIso := NatIso.ofComponents fun X => Iso.mk <| OrderIso.dualDual X\n\n"}
{"name":"bddDistLat_dual_comp_forget_to_distLat","module":"Mathlib.Order.Category.BddDistLat","initialProofState":"⊢ Eq (BddDistLat.dual.comp (CategoryTheory.forget₂ BddDistLat DistLat)) ((CategoryTheory.forget₂ BddDistLat DistLat).comp DistLat.dual)","decl":"theorem bddDistLat_dual_comp_forget_to_distLat :\n    BddDistLat.dual ⋙ forget₂ BddDistLat DistLat =\n      forget₂ BddDistLat DistLat ⋙ DistLat.dual :=\n  rfl\n"}
