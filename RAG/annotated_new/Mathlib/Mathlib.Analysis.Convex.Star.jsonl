{"name":"starConvex_iff_segment_subset","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\ns : Set E\n⊢ Iff (StarConvex 𝕜 x s) (∀ ⦃y : E⦄, Membership.mem s y → HasSubset.Subset (segment 𝕜 x y) s)","decl":"theorem starConvex_iff_segment_subset : StarConvex 𝕜 x s ↔ ∀ ⦃y⦄, y ∈ s → [x -[𝕜] y] ⊆ s := by\n  constructor\n  · rintro h y hy z ⟨a, b, ha, hb, hab, rfl⟩\n    exact h hy ha hb hab\n  · rintro h y hy a b ha hb hab\n    exact h hy ⟨a, b, ha, hb, hab, rfl⟩\n\n"}
{"name":"StarConvex.segment_subset","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\ns : Set E\nh : StarConvex 𝕜 x s\ny : E\nhy : Membership.mem s y\n⊢ HasSubset.Subset (segment 𝕜 x y) s","decl":"theorem StarConvex.segment_subset (h : StarConvex 𝕜 x s) {y : E} (hy : y ∈ s) : [x -[𝕜] y] ⊆ s :=\n  starConvex_iff_segment_subset.1 h hy\n\n"}
{"name":"StarConvex.openSegment_subset","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\ns : Set E\nh : StarConvex 𝕜 x s\ny : E\nhy : Membership.mem s y\n⊢ HasSubset.Subset (openSegment 𝕜 x y) s","decl":"theorem StarConvex.openSegment_subset (h : StarConvex 𝕜 x s) {y : E} (hy : y ∈ s) :\n    openSegment 𝕜 x y ⊆ s :=\n  (openSegment_subset_segment 𝕜 x y).trans (h.segment_subset hy)\n\n"}
{"name":"starConvex_iff_pointwise_add_subset","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\ns : Set E\n⊢ Iff (StarConvex 𝕜 x s) (∀ ⦃a b : 𝕜⦄, LE.le 0 a → LE.le 0 b → Eq (HAdd.hAdd a b) 1 → HasSubset.Subset (HAdd.hAdd (HSMul.hSMul a (Singleton.singleton x)) (HSMul.hSMul b s)) s)","decl":"/-- Alternative definition of star-convexity, in terms of pointwise set operations. -/\ntheorem starConvex_iff_pointwise_add_subset :\n    StarConvex 𝕜 x s ↔ ∀ ⦃a b : 𝕜⦄, 0 ≤ a → 0 ≤ b → a + b = 1 → a • {x} + b • s ⊆ s := by\n  refine\n    ⟨?_, fun h y hy a b ha hb hab =>\n      h ha hb hab (add_mem_add (smul_mem_smul_set <| mem_singleton _) ⟨_, hy, rfl⟩)⟩\n  rintro hA a b ha hb hab w ⟨au, ⟨u, rfl : u = x, rfl⟩, bv, ⟨v, hv, rfl⟩, rfl⟩\n  exact hA hv ha hb hab\n\n"}
{"name":"starConvex_empty","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\n⊢ StarConvex 𝕜 x EmptyCollection.emptyCollection","decl":"theorem starConvex_empty (x : E) : StarConvex 𝕜 x ∅ := fun _ hy => hy.elim\n\n"}
{"name":"starConvex_univ","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\n⊢ StarConvex 𝕜 x Set.univ","decl":"theorem starConvex_univ (x : E) : StarConvex 𝕜 x univ := fun _ _ _ _ _ _ _ => trivial\n\n"}
{"name":"StarConvex.inter","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\ns t : Set E\nhs : StarConvex 𝕜 x s\nht : StarConvex 𝕜 x t\n⊢ StarConvex 𝕜 x (Inter.inter s t)","decl":"theorem StarConvex.inter (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 x t) : StarConvex 𝕜 x (s ∩ t) :=\n  fun _ hy _ _ ha hb hab => ⟨hs hy.left ha hb hab, ht hy.right ha hb hab⟩\n\n"}
{"name":"starConvex_sInter","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\nS : Set (Set E)\nh : ∀ (s : Set E), Membership.mem S s → StarConvex 𝕜 x s\n⊢ StarConvex 𝕜 x S.sInter","decl":"theorem starConvex_sInter {S : Set (Set E)} (h : ∀ s ∈ S, StarConvex 𝕜 x s) :\n    StarConvex 𝕜 x (⋂₀ S) := fun _ hy _ _ ha hb hab s hs => h s hs (hy s hs) ha hb hab\n\n"}
{"name":"starConvex_iInter","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\nι : Sort u_4\ns : ι → Set E\nh : ∀ (i : ι), StarConvex 𝕜 x (s i)\n⊢ StarConvex 𝕜 x (Set.iInter fun i => s i)","decl":"theorem starConvex_iInter {ι : Sort*} {s : ι → Set E} (h : ∀ i, StarConvex 𝕜 x (s i)) :\n    StarConvex 𝕜 x (⋂ i, s i) :=\n  sInter_range s ▸ starConvex_sInter <| forall_mem_range.2 h\n\n"}
{"name":"StarConvex.union","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\ns t : Set E\nhs : StarConvex 𝕜 x s\nht : StarConvex 𝕜 x t\n⊢ StarConvex 𝕜 x (Union.union s t)","decl":"theorem StarConvex.union (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 x t) :\n    StarConvex 𝕜 x (s ∪ t) := by\n  rintro y (hy | hy) a b ha hb hab\n  · exact Or.inl (hs hy ha hb hab)\n  · exact Or.inr (ht hy ha hb hab)\n\n"}
{"name":"starConvex_iUnion","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\nι : Sort u_4\ns : ι → Set E\nhs : ∀ (i : ι), StarConvex 𝕜 x (s i)\n⊢ StarConvex 𝕜 x (Set.iUnion fun i => s i)","decl":"theorem starConvex_iUnion {ι : Sort*} {s : ι → Set E} (hs : ∀ i, StarConvex 𝕜 x (s i)) :\n    StarConvex 𝕜 x (⋃ i, s i) := by\n  rintro y hy a b ha hb hab\n  rw [mem_iUnion] at hy ⊢\n  obtain ⟨i, hy⟩ := hy\n  exact ⟨i, hs i hy ha hb hab⟩\n\n"}
{"name":"starConvex_sUnion","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMul 𝕜 E\nx : E\nS : Set (Set E)\nhS : ∀ (s : Set E), Membership.mem S s → StarConvex 𝕜 x s\n⊢ StarConvex 𝕜 x S.sUnion","decl":"theorem starConvex_sUnion {S : Set (Set E)} (hS : ∀ s ∈ S, StarConvex 𝕜 x s) :\n    StarConvex 𝕜 x (⋃₀ S) := by\n  rw [sUnion_eq_iUnion]\n  exact starConvex_iUnion fun s => hS _ s.2\n\n"}
{"name":"StarConvex.prod","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : SMul 𝕜 E\ninst✝ : SMul 𝕜 F\nx : E\ny : F\ns : Set E\nt : Set F\nhs : StarConvex 𝕜 x s\nht : StarConvex 𝕜 y t\n⊢ StarConvex 𝕜 { fst := x, snd := y } (SProd.sprod s t)","decl":"theorem StarConvex.prod {y : F} {s : Set E} {t : Set F} (hs : StarConvex 𝕜 x s)\n    (ht : StarConvex 𝕜 y t) : StarConvex 𝕜 (x, y) (s ×ˢ t) := fun _ hy _ _ ha hb hab =>\n  ⟨hs hy.1 ha hb hab, ht hy.2 ha hb hab⟩\n\n"}
{"name":"starConvex_pi","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\ninst✝² : OrderedSemiring 𝕜\nι : Type u_4\nE : ι → Type u_5\ninst✝¹ : (i : ι) → AddCommMonoid (E i)\ninst✝ : (i : ι) → SMul 𝕜 (E i)\nx : (i : ι) → E i\ns : Set ι\nt : (i : ι) → Set (E i)\nht : ∀ ⦃i : ι⦄, Membership.mem s i → StarConvex 𝕜 (x i) (t i)\n⊢ StarConvex 𝕜 x (s.pi t)","decl":"theorem starConvex_pi {ι : Type*} {E : ι → Type*} [∀ i, AddCommMonoid (E i)] [∀ i, SMul 𝕜 (E i)]\n    {x : ∀ i, E i} {s : Set ι} {t : ∀ i, Set (E i)} (ht : ∀ ⦃i⦄, i ∈ s → StarConvex 𝕜 (x i) (t i)) :\n    StarConvex 𝕜 x (s.pi t) := fun _ hy _ _ ha hb hab i hi => ht hi (hy i hi) ha hb hab\n\n"}
{"name":"StarConvex.mem","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nh : s.Nonempty\n⊢ Membership.mem s x","decl":"theorem StarConvex.mem (hs : StarConvex 𝕜 x s) (h : s.Nonempty) : x ∈ s := by\n  obtain ⟨y, hy⟩ := h\n  convert hs hy zero_le_one le_rfl (add_zero 1)\n  rw [one_smul, zero_smul, add_zero]\n\n"}
{"name":"starConvex_iff_forall_pos","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhx : Membership.mem s x\n⊢ Iff (StarConvex 𝕜 x s) (∀ ⦃y : E⦄, Membership.mem s y → ∀ ⦃a b : 𝕜⦄, LT.lt 0 a → LT.lt 0 b → Eq (HAdd.hAdd a b) 1 → Membership.mem s (HAdd.hAdd (HSMul.hSMul a x) (HSMul.hSMul b y)))","decl":"theorem starConvex_iff_forall_pos (hx : x ∈ s) : StarConvex 𝕜 x s ↔\n    ∀ ⦃y⦄, y ∈ s → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → a • x + b • y ∈ s := by\n  refine ⟨fun h y hy a b ha hb hab => h hy ha.le hb.le hab, ?_⟩\n  intro h y hy a b ha hb hab\n  obtain rfl | ha := ha.eq_or_lt\n  · rw [zero_add] at hab\n    rwa [hab, one_smul, zero_smul, zero_add]\n  obtain rfl | hb := hb.eq_or_lt\n  · rw [add_zero] at hab\n    rwa [hab, one_smul, zero_smul, add_zero]\n  exact h hy ha hb hab\n\n"}
{"name":"starConvex_iff_forall_ne_pos","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhx : Membership.mem s x\n⊢ Iff (StarConvex 𝕜 x s) (∀ ⦃y : E⦄, Membership.mem s y → Ne x y → ∀ ⦃a b : 𝕜⦄, LT.lt 0 a → LT.lt 0 b → Eq (HAdd.hAdd a b) 1 → Membership.mem s (HAdd.hAdd (HSMul.hSMul a x) (HSMul.hSMul b y)))","decl":"theorem starConvex_iff_forall_ne_pos (hx : x ∈ s) :\n    StarConvex 𝕜 x s ↔\n      ∀ ⦃y⦄, y ∈ s → x ≠ y → ∀ ⦃a b : 𝕜⦄, 0 < a → 0 < b → a + b = 1 → a • x + b • y ∈ s := by\n  refine ⟨fun h y hy _ a b ha hb hab => h hy ha.le hb.le hab, ?_⟩\n  intro h y hy a b ha hb hab\n  obtain rfl | ha' := ha.eq_or_lt\n  · rw [zero_add] at hab\n    rwa [hab, zero_smul, one_smul, zero_add]\n  obtain rfl | hb' := hb.eq_or_lt\n  · rw [add_zero] at hab\n    rwa [hab, zero_smul, one_smul, add_zero]\n  obtain rfl | hxy := eq_or_ne x y\n  · rwa [Convex.combo_self hab]\n  exact h hy hxy ha' hb' hab\n\n"}
{"name":"starConvex_iff_openSegment_subset","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhx : Membership.mem s x\n⊢ Iff (StarConvex 𝕜 x s) (∀ ⦃y : E⦄, Membership.mem s y → HasSubset.Subset (openSegment 𝕜 x y) s)","decl":"theorem starConvex_iff_openSegment_subset (hx : x ∈ s) :\n    StarConvex 𝕜 x s ↔ ∀ ⦃y⦄, y ∈ s → openSegment 𝕜 x y ⊆ s :=\n  starConvex_iff_segment_subset.trans <|\n    forall₂_congr fun _ hy => (openSegment_subset_iff_segment_subset hx hy).symm\n\n"}
{"name":"starConvex_singleton","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\n⊢ StarConvex 𝕜 x (Singleton.singleton x)","decl":"theorem starConvex_singleton (x : E) : StarConvex 𝕜 x {x} := by\n  rintro y (rfl : y = x) a b _ _ hab\n  exact Convex.combo_self hab _\n\n"}
{"name":"StarConvex.linear_image","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nf : LinearMap (RingHom.id 𝕜) E F\n⊢ StarConvex 𝕜 (f x) (Set.image (⇑f) s)","decl":"theorem StarConvex.linear_image (hs : StarConvex 𝕜 x s) (f : E →ₗ[𝕜] F) :\n    StarConvex 𝕜 (f x) (f '' s) := by\n  rintro _ ⟨y, hy, rfl⟩ a b ha hb hab\n  exact ⟨a • x + b • y, hs hy ha hb hab, by rw [f.map_add, f.map_smul, f.map_smul]⟩\n\n"}
{"name":"StarConvex.is_linear_image","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nf : E → F\nhf : IsLinearMap 𝕜 f\n⊢ StarConvex 𝕜 (f x) (Set.image f s)","decl":"theorem StarConvex.is_linear_image (hs : StarConvex 𝕜 x s) {f : E → F} (hf : IsLinearMap 𝕜 f) :\n    StarConvex 𝕜 (f x) (f '' s) :=\n  hs.linear_image <| hf.mk' f\n\n"}
{"name":"StarConvex.linear_preimage","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\ns : Set F\nf : LinearMap (RingHom.id 𝕜) E F\nhs : StarConvex 𝕜 (f x) s\n⊢ StarConvex 𝕜 x (Set.preimage (⇑f) s)","decl":"theorem StarConvex.linear_preimage {s : Set F} (f : E →ₗ[𝕜] F) (hs : StarConvex 𝕜 (f x) s) :\n    StarConvex 𝕜 x (f ⁻¹' s) := by\n  intro y hy a b ha hb hab\n  rw [mem_preimage, f.map_add, f.map_smul, f.map_smul]\n  exact hs hy ha hb hab\n\n"}
{"name":"StarConvex.is_linear_preimage","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedSemiring 𝕜\ninst✝³ : AddCommMonoid E\ninst✝² : AddCommMonoid F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\ns : Set F\nf : E → F\nhs : StarConvex 𝕜 (f x) s\nhf : IsLinearMap 𝕜 f\n⊢ StarConvex 𝕜 x (Set.preimage f s)","decl":"theorem StarConvex.is_linear_preimage {s : Set F} {f : E → F} (hs : StarConvex 𝕜 (f x) s)\n    (hf : IsLinearMap 𝕜 f) : StarConvex 𝕜 x (preimage f s) :=\n  hs.linear_preimage <| hf.mk' f\n\n"}
{"name":"StarConvex.add","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx y : E\ns t : Set E\nhs : StarConvex 𝕜 x s\nht : StarConvex 𝕜 y t\n⊢ StarConvex 𝕜 (HAdd.hAdd x y) (HAdd.hAdd s t)","decl":"theorem StarConvex.add {t : Set E} (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 y t) :\n    StarConvex 𝕜 (x + y) (s + t) := by\n  rw [← add_image_prod]\n  exact (hs.prod ht).is_linear_image IsLinearMap.isLinearMap_add\n\n"}
{"name":"StarConvex.add_left","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nz : E\n⊢ StarConvex 𝕜 (HAdd.hAdd z x) (Set.image (fun x => HAdd.hAdd z x) s)","decl":"theorem StarConvex.add_left (hs : StarConvex 𝕜 x s) (z : E) :\n    StarConvex 𝕜 (z + x) ((fun x => z + x) '' s) := by\n  intro y hy a b ha hb hab\n  obtain ⟨y', hy', rfl⟩ := hy\n  refine ⟨a • x + b • y', hs hy' ha hb hab, ?_⟩\n  match_scalars <;> simp [hab]\n\n"}
{"name":"StarConvex.add_right","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nz : E\n⊢ StarConvex 𝕜 (HAdd.hAdd x z) (Set.image (fun x => HAdd.hAdd x z) s)","decl":"theorem StarConvex.add_right (hs : StarConvex 𝕜 x s) (z : E) :\n    StarConvex 𝕜 (x + z) ((fun x => x + z) '' s) := by\n  intro y hy a b ha hb hab\n  obtain ⟨y', hy', rfl⟩ := hy\n  refine ⟨a • x + b • y', hs hy' ha hb hab, ?_⟩\n  match_scalars <;> simp [hab]\n\n"}
{"name":"StarConvex.preimage_add_right","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx z : E\ns : Set E\nhs : StarConvex 𝕜 (HAdd.hAdd z x) s\n⊢ StarConvex 𝕜 x (Set.preimage (fun x => HAdd.hAdd z x) s)","decl":"/-- The translation of a star-convex set is also star-convex. -/\ntheorem StarConvex.preimage_add_right (hs : StarConvex 𝕜 (z + x) s) :\n    StarConvex 𝕜 x ((fun x => z + x) ⁻¹' s) := by\n  intro y hy a b ha hb hab\n  have h := hs hy ha hb hab\n  rwa [smul_add, smul_add, add_add_add_comm, ← add_smul, hab, one_smul] at h\n\n"}
{"name":"StarConvex.preimage_add_left","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx z : E\ns : Set E\nhs : StarConvex 𝕜 (HAdd.hAdd x z) s\n⊢ StarConvex 𝕜 x (Set.preimage (fun x => HAdd.hAdd x z) s)","decl":"/-- The translation of a star-convex set is also star-convex. -/\ntheorem StarConvex.preimage_add_left (hs : StarConvex 𝕜 (x + z) s) :\n    StarConvex 𝕜 x ((fun x => x + z) ⁻¹' s) := by\n  rw [add_comm] at hs\n  simpa only [add_comm] using hs.preimage_add_right\n\n"}
{"name":"StarConvex.sub'","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedSemiring 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\ns : Set (Prod E E)\nhs : StarConvex 𝕜 { fst := x, snd := y } s\n⊢ StarConvex 𝕜 (HSub.hSub x y) (Set.image (fun x => HSub.hSub x.1 x.2) s)","decl":"theorem StarConvex.sub' {s : Set (E × E)} (hs : StarConvex 𝕜 (x, y) s) :\n    StarConvex 𝕜 (x - y) ((fun x : E × E => x.1 - x.2) '' s) :=\n  hs.is_linear_image IsLinearMap.isLinearMap_sub\n\n"}
{"name":"StarConvex.smul","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedCommSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nc : 𝕜\n⊢ StarConvex 𝕜 (HSMul.hSMul c x) (HSMul.hSMul c s)","decl":"theorem StarConvex.smul (hs : StarConvex 𝕜 x s) (c : 𝕜) : StarConvex 𝕜 (c • x) (c • s) :=\n  hs.linear_image <| LinearMap.lsmul _ _ c\n\n"}
{"name":"StarConvex.preimage_smul","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedCommSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nc : 𝕜\nhs : StarConvex 𝕜 (HSMul.hSMul c x) s\n⊢ StarConvex 𝕜 x (Set.preimage (fun z => HSMul.hSMul c z) s)","decl":"theorem StarConvex.preimage_smul {c : 𝕜} (hs : StarConvex 𝕜 (c • x) s) :\n    StarConvex 𝕜 x ((fun z => c • z) ⁻¹' s) :=\n  hs.linear_preimage (LinearMap.lsmul _ _ c)\n\n"}
{"name":"StarConvex.affinity","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedCommSemiring 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\nz : E\nc : 𝕜\n⊢ StarConvex 𝕜 (HAdd.hAdd z (HSMul.hSMul c x)) (Set.image (fun x => HAdd.hAdd z (HSMul.hSMul c x)) s)","decl":"theorem StarConvex.affinity (hs : StarConvex 𝕜 x s) (z : E) (c : 𝕜) :\n    StarConvex 𝕜 (z + c • x) ((fun x => z + c • x) '' s) := by\n  have h := (hs.smul c).add_left z\n  rwa [← image_smul, image_image] at h\n\n"}
{"name":"starConvex_zero_iff","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommMonoid E\ninst✝ : SMulWithZero 𝕜 E\ns : Set E\n⊢ Iff (StarConvex 𝕜 0 s) (∀ ⦃x : E⦄, Membership.mem s x → ∀ ⦃a : 𝕜⦄, LE.le 0 a → LE.le a 1 → Membership.mem s (HSMul.hSMul a x))","decl":"theorem starConvex_zero_iff :\n    StarConvex 𝕜 0 s ↔ ∀ ⦃x : E⦄, x ∈ s → ∀ ⦃a : 𝕜⦄, 0 ≤ a → a ≤ 1 → a • x ∈ s := by\n  refine\n    forall_congr' fun x => forall_congr' fun _ => ⟨fun h a ha₀ ha₁ => ?_, fun h a b ha hb hab => ?_⟩\n  · simpa only [sub_add_cancel, eq_self_iff_true, forall_true_left, zero_add, smul_zero] using\n      h (sub_nonneg_of_le ha₁) ha₀\n  · rw [smul_zero, zero_add]\n    exact h hb (by rw [← hab]; exact le_add_of_nonneg_left ha)\n\n"}
{"name":"StarConvex.add_smul_mem","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\ns : Set E\nhs : StarConvex 𝕜 x s\nhy : Membership.mem s (HAdd.hAdd x y)\nt : 𝕜\nht₀ : LE.le 0 t\nht₁ : LE.le t 1\n⊢ Membership.mem s (HAdd.hAdd x (HSMul.hSMul t y))","decl":"theorem StarConvex.add_smul_mem (hs : StarConvex 𝕜 x s) (hy : x + y ∈ s) {t : 𝕜} (ht₀ : 0 ≤ t)\n    (ht₁ : t ≤ 1) : x + t • y ∈ s := by\n  have h : x + t • y = (1 - t) • x + t • (x + y) := by\n    rw [smul_add, ← add_assoc, ← add_smul, sub_add_cancel, one_smul]\n  rw [h]\n  exact hs hy (sub_nonneg_of_le ht₁) ht₀ (sub_add_cancel _ _)\n\n"}
{"name":"StarConvex.smul_mem","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 0 s\nhx : Membership.mem s x\nt : 𝕜\nht₀ : LE.le 0 t\nht₁ : LE.le t 1\n⊢ Membership.mem s (HSMul.hSMul t x)","decl":"theorem StarConvex.smul_mem (hs : StarConvex 𝕜 0 s) (hx : x ∈ s) {t : 𝕜} (ht₀ : 0 ≤ t)\n    (ht₁ : t ≤ 1) : t • x ∈ s := by simpa using hs.add_smul_mem (by simpa using hx) ht₀ ht₁\n\n"}
{"name":"StarConvex.add_smul_sub_mem","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\ns : Set E\nhs : StarConvex 𝕜 x s\nhy : Membership.mem s y\nt : 𝕜\nht₀ : LE.le 0 t\nht₁ : LE.le t 1\n⊢ Membership.mem s (HAdd.hAdd x (HSMul.hSMul t (HSub.hSub y x)))","decl":"theorem StarConvex.add_smul_sub_mem (hs : StarConvex 𝕜 x s) (hy : y ∈ s) {t : 𝕜} (ht₀ : 0 ≤ t)\n    (ht₁ : t ≤ 1) : x + t • (y - x) ∈ s := by\n  apply hs.segment_subset hy\n  rw [segment_eq_image']\n  exact mem_image_of_mem _ ⟨ht₀, ht₁⟩\n\n"}
{"name":"StarConvex.affine_preimage","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\nf : AffineMap 𝕜 E F\ns : Set F\nhs : StarConvex 𝕜 (f x) s\n⊢ StarConvex 𝕜 x (Set.preimage (⇑f) s)","decl":"/-- The preimage of a star-convex set under an affine map is star-convex. -/\ntheorem StarConvex.affine_preimage (f : E →ᵃ[𝕜] F) {s : Set F} (hs : StarConvex 𝕜 (f x) s) :\n    StarConvex 𝕜 x (f ⁻¹' s) := by\n  intro y hy a b ha hb hab\n  rw [mem_preimage, Convex.combo_affine_apply hab]\n  exact hs hy ha hb hab\n\n"}
{"name":"StarConvex.affine_image","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\nF : Type u_3\ninst✝⁴ : OrderedRing 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : AddCommGroup F\ninst✝¹ : Module 𝕜 E\ninst✝ : Module 𝕜 F\nx : E\nf : AffineMap 𝕜 E F\ns : Set E\nhs : StarConvex 𝕜 x s\n⊢ StarConvex 𝕜 (f x) (Set.image (⇑f) s)","decl":"/-- The image of a star-convex set under an affine map is star-convex. -/\ntheorem StarConvex.affine_image (f : E →ᵃ[𝕜] F) {s : Set E} (hs : StarConvex 𝕜 x s) :\n    StarConvex 𝕜 (f x) (f '' s) := by\n  rintro y ⟨y', ⟨hy', hy'f⟩⟩ a b ha hb hab\n  refine ⟨a • x + b • y', ⟨hs hy' ha hb hab, ?_⟩⟩\n  rw [Convex.combo_affine_apply hab, hy'f]\n\n"}
{"name":"StarConvex.neg","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 x s\n⊢ StarConvex 𝕜 (Neg.neg x) (Neg.neg s)","decl":"theorem StarConvex.neg (hs : StarConvex 𝕜 x s) : StarConvex 𝕜 (-x) (-s) := by\n  rw [← image_neg_eq_neg]\n  exact hs.is_linear_image IsLinearMap.isLinearMap_neg\n\n"}
{"name":"StarConvex.sub","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : OrderedRing 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx y : E\ns t : Set E\nhs : StarConvex 𝕜 x s\nht : StarConvex 𝕜 y t\n⊢ StarConvex 𝕜 (HSub.hSub x y) (HSub.hSub s t)","decl":"theorem StarConvex.sub (hs : StarConvex 𝕜 x s) (ht : StarConvex 𝕜 y t) :\n    StarConvex 𝕜 (x - y) (s - t) := by\n  simp_rw [sub_eq_add_neg]\n  exact hs.add ht.neg\n\n"}
{"name":"starConvex_compl_Iic","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedRing 𝕜\ninst✝² : OrderedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx y : E\nh : LT.lt x y\n⊢ StarConvex 𝕜 y (HasCompl.compl (Set.Iic x))","decl":"/-- If `x < y`, then `(Set.Iic x)ᶜ` is star convex at `y`. -/\nlemma starConvex_compl_Iic (h : x < y) : StarConvex 𝕜 y (Iic x)ᶜ := by\n  refine (starConvex_iff_forall_pos <| by simp [h.not_le]).mpr fun z hz a b ha hb hab ↦ ?_\n  rw [mem_compl_iff, mem_Iic] at hz ⊢\n  contrapose! hz\n  refine (lt_of_smul_lt_smul_of_nonneg_left ?_ hb.le).le\n  calc\n    b • z ≤ (a + b) • x - a • y := by rwa [le_sub_iff_add_le', hab, one_smul]\n    _ < b • x := by\n      rw [add_smul, sub_lt_iff_lt_add']\n      gcongr\n\n"}
{"name":"starConvex_compl_Ici","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedRing 𝕜\ninst✝² : OrderedAddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx y : E\nh : LT.lt x y\n⊢ StarConvex 𝕜 x (HasCompl.compl (Set.Ici y))","decl":"/-- If `x < y`, then `(Set.Ici y)ᶜ` is star convex at `x`. -/\nlemma starConvex_compl_Ici (h : x < y) : StarConvex 𝕜 x (Ici y)ᶜ :=\n  starConvex_compl_Iic (E := Eᵒᵈ) h\n\n"}
{"name":"starConvex_iff_div","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\n⊢ Iff (StarConvex 𝕜 x s) (∀ ⦃y : E⦄, Membership.mem s y → ∀ ⦃a b : 𝕜⦄, LE.le 0 a → LE.le 0 b → LT.lt 0 (HAdd.hAdd a b) → Membership.mem s (HAdd.hAdd (HSMul.hSMul (HDiv.hDiv a (HAdd.hAdd a b)) x) (HSMul.hSMul (HDiv.hDiv b (HAdd.hAdd a b)) y)))","decl":"/-- Alternative definition of star-convexity, using division. -/\ntheorem starConvex_iff_div : StarConvex 𝕜 x s ↔ ∀ ⦃y⦄, y ∈ s →\n    ∀ ⦃a b : 𝕜⦄, 0 ≤ a → 0 ≤ b → 0 < a + b → (a / (a + b)) • x + (b / (a + b)) • y ∈ s :=\n  ⟨fun h y hy a b ha hb hab => by\n    apply h hy\n    · positivity\n    · positivity\n    · rw [← add_div]\n      exact div_self hab.ne',\n  fun h y hy a b ha hb hab => by\n    have h' := h hy ha hb\n    rw [hab, div_one, div_one] at h'\n    exact h' zero_lt_one⟩\n\n"}
{"name":"StarConvex.mem_smul","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝² : LinearOrderedField 𝕜\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nx : E\ns : Set E\nhs : StarConvex 𝕜 0 s\nhx : Membership.mem s x\nt : 𝕜\nht : LE.le 1 t\n⊢ Membership.mem (HSMul.hSMul t s) x","decl":"theorem StarConvex.mem_smul (hs : StarConvex 𝕜 0 s) (hx : x ∈ s) {t : 𝕜} (ht : 1 ≤ t) :\n    x ∈ t • s := by\n  rw [mem_smul_set_iff_inv_smul_mem₀ (zero_lt_one.trans_le ht).ne']\n  exact hs.smul_mem hx (by positivity) (inv_le_one_of_one_le₀ ht)\n\n"}
{"name":"Set.OrdConnected.starConvex","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\nE : Type u_2\ninst✝³ : OrderedSemiring 𝕜\ninst✝² : OrderedAddCommMonoid E\ninst✝¹ : Module 𝕜 E\ninst✝ : OrderedSMul 𝕜 E\nx : E\ns : Set E\nhs : s.OrdConnected\nhx : Membership.mem s x\nh : ∀ (y : E), Membership.mem s y → Or (LE.le x y) (LE.le y x)\n⊢ StarConvex 𝕜 x s","decl":"/-- If `s` is an order-connected set in an ordered module over an ordered semiring\nand all elements of `s` are comparable with `x ∈ s`, then `s` is `StarConvex` at `x`. -/\ntheorem Set.OrdConnected.starConvex [OrderedSemiring 𝕜] [OrderedAddCommMonoid E] [Module 𝕜 E]\n    [OrderedSMul 𝕜 E] {x : E} {s : Set E} (hs : s.OrdConnected) (hx : x ∈ s)\n    (h : ∀ y ∈ s, x ≤ y ∨ y ≤ x) : StarConvex 𝕜 x s := by\n  intro y hy a b ha hb hab\n  obtain hxy | hyx := h _ hy\n  · refine hs.out hx hy (mem_Icc.2 ⟨?_, ?_⟩)\n    · calc\n        x = a • x + b • x := (Convex.combo_self hab _).symm\n        _ ≤ a • x + b • y := by gcongr\n    calc\n      a • x + b • y ≤ a • y + b • y := by gcongr\n      _ = y := Convex.combo_self hab _\n  · refine hs.out hy hx (mem_Icc.2 ⟨?_, ?_⟩)\n    · calc\n        y = a • y + b • y := (Convex.combo_self hab _).symm\n        _ ≤ a • x + b • y := by gcongr\n    calc\n      a • x + b • y ≤ a • x + b • x := by gcongr\n      _ = x := Convex.combo_self hab _\n\n"}
{"name":"starConvex_iff_ordConnected","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx : 𝕜\ns : Set 𝕜\nhx : Membership.mem s x\n⊢ Iff (StarConvex 𝕜 x s) s.OrdConnected","decl":"theorem starConvex_iff_ordConnected [LinearOrderedField 𝕜] {x : 𝕜} {s : Set 𝕜} (hx : x ∈ s) :\n    StarConvex 𝕜 x s ↔ s.OrdConnected := by\n  simp_rw [ordConnected_iff_uIcc_subset_left hx, starConvex_iff_segment_subset, segment_eq_uIcc]\n\n"}
{"name":"StarConvex.ordConnected","module":"Mathlib.Analysis.Convex.Star","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\nx : 𝕜\ns : Set 𝕜\nhx : Membership.mem s x\na✝ : StarConvex 𝕜 x s\n⊢ s.OrdConnected","decl":"alias ⟨StarConvex.ordConnected, _⟩ := starConvex_iff_ordConnected\n\n"}
