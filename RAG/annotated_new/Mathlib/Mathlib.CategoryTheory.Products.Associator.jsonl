{"name":"CategoryTheory.prod.associator_obj","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\nX : Prod (Prod C D) E\n⊢ Eq ((CategoryTheory.prod.associator C D E).obj X) { fst := X.1.1, snd := { fst := X.1.2, snd := X.2 } }","decl":"/-- The associator functor `(C × D) × E ⥤ C × (D × E)`.\n-/\n@[simps]\ndef associator : (C × D) × E ⥤ C × D × E where\n  obj X := (X.1.1, (X.1.2, X.2))\n  map := @fun _ _ f => (f.1.1, (f.1.2, f.2))\n\n"}
{"name":"CategoryTheory.prod.associator_map","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\nx✝¹ x✝ : Prod (Prod C D) E\nf : Quiver.Hom x✝¹ x✝\n⊢ Eq ((CategoryTheory.prod.associator C D E).map f) { fst := f.1.1, snd := { fst := f.1.2, snd := f.2 } }","decl":"/-- The associator functor `(C × D) × E ⥤ C × (D × E)`.\n-/\n@[simps]\ndef associator : (C × D) × E ⥤ C × D × E where\n  obj X := (X.1.1, (X.1.2, X.2))\n  map := @fun _ _ f => (f.1.1, (f.1.2, f.2))\n\n"}
{"name":"CategoryTheory.prod.inverseAssociator_map","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\nx✝¹ x✝ : Prod C (Prod D E)\nf : Quiver.Hom x✝¹ x✝\n⊢ Eq ((CategoryTheory.prod.inverseAssociator C D E).map f) { fst := { fst := f.1, snd := f.2.1 }, snd := f.2.2 }","decl":"/-- The inverse associator functor `C × (D × E) ⥤ (C × D) × E `.\n-/\n@[simps]\ndef inverseAssociator : C × D × E ⥤ (C × D) × E where\n  obj X := ((X.1, X.2.1), X.2.2)\n  map := @fun _ _ f => ((f.1, f.2.1), f.2.2)\n\n"}
{"name":"CategoryTheory.prod.inverseAssociator_obj","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\nX : Prod C (Prod D E)\n⊢ Eq ((CategoryTheory.prod.inverseAssociator C D E).obj X) { fst := { fst := X.1, snd := X.2.1 }, snd := X.2.2 }","decl":"/-- The inverse associator functor `C × (D × E) ⥤ (C × D) × E `.\n-/\n@[simps]\ndef inverseAssociator : C × D × E ⥤ (C × D) × E where\n  obj X := ((X.1, X.2.1), X.2.2)\n  map := @fun _ _ f => ((f.1, f.2.1), f.2.2)\n\n"}
{"name":"CategoryTheory.prod.associativity_inverse","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\n⊢ Eq (CategoryTheory.prod.associativity C D E).inverse (CategoryTheory.prod.inverseAssociator C D E)","decl":"/-- The equivalence of categories expressing associativity of products of categories.\n-/\n@[simps]\ndef associativity : (C × D) × E ≌ C × D × E where\n  functor := associator C D E\n  inverse := inverseAssociator C D E\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.associativity_unitIso","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\n⊢ Eq (CategoryTheory.prod.associativity C D E).unitIso (CategoryTheory.Iso.refl (CategoryTheory.Functor.id (Prod (Prod C D) E)))","decl":"/-- The equivalence of categories expressing associativity of products of categories.\n-/\n@[simps]\ndef associativity : (C × D) × E ≌ C × D × E where\n  functor := associator C D E\n  inverse := inverseAssociator C D E\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.associativity_functor","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\n⊢ Eq (CategoryTheory.prod.associativity C D E).functor (CategoryTheory.prod.associator C D E)","decl":"/-- The equivalence of categories expressing associativity of products of categories.\n-/\n@[simps]\ndef associativity : (C × D) × E ≌ C × D × E where\n  functor := associator C D E\n  inverse := inverseAssociator C D E\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.associativity_counitIso","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\n⊢ Eq (CategoryTheory.prod.associativity C D E).counitIso (CategoryTheory.Iso.refl ((CategoryTheory.prod.inverseAssociator C D E).comp (CategoryTheory.prod.associator C D E)))","decl":"/-- The equivalence of categories expressing associativity of products of categories.\n-/\n@[simps]\ndef associativity : (C × D) × E ≌ C × D × E where\n  functor := associator C D E\n  inverse := inverseAssociator C D E\n  unitIso := Iso.refl _\n  counitIso := Iso.refl _\n\n"}
{"name":"CategoryTheory.prod.associatorIsEquivalence","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\n⊢ (CategoryTheory.prod.associator C D E).IsEquivalence","decl":"instance associatorIsEquivalence : (associator C D E).IsEquivalence :=\n  (by infer_instance : (associativity C D E).functor.IsEquivalence)\n\n"}
{"name":"CategoryTheory.prod.inverseAssociatorIsEquivalence","module":"Mathlib.CategoryTheory.Products.Associator","initialProofState":"C : Type u₁\ninst✝² : CategoryTheory.Category.{v₁, u₁} C\nD : Type u₂\ninst✝¹ : CategoryTheory.Category.{v₂, u₂} D\nE : Type u₃\ninst✝ : CategoryTheory.Category.{v₃, u₃} E\n⊢ (CategoryTheory.prod.inverseAssociator C D E).IsEquivalence","decl":"instance inverseAssociatorIsEquivalence : (inverseAssociator C D E).IsEquivalence :=\n  (by infer_instance : (associativity C D E).inverse.IsEquivalence)\n\n-- TODO pentagon natural transformation? ...satisfying?\n"}
