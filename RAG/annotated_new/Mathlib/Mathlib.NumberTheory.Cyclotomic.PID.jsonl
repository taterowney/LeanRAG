{"name":"IsCyclotomicExtension.Rat.three_pid","module":"Mathlib.NumberTheory.Cyclotomic.PID","initialProofState":"K : Type u\ninst‚úù¬≤ : Field K\ninst‚úù¬π : NumberField K\ninst‚úù : IsCyclotomicExtension (Singleton.singleton 3) Rat K\n‚ä¢ IsPrincipalIdealRing (NumberField.RingOfIntegers K)","decl":"/-- If `IsCyclotomicExtension {3} ‚Ñö K` then `ùìû K` is a principal ideal domain. -/\ntheorem three_pid [IsCyclotomicExtension {3} ‚Ñö K] : IsPrincipalIdealRing (ùìû K) := by\n  apply RingOfIntegers.isPrincipalIdealRing_of_abs_discr_lt\n  rw [absdiscr_prime 3 K, IsCyclotomicExtension.finrank (n := 3) K\n    (irreducible_rat (by norm_num)), nrComplexPlaces_eq_totient_div_two 3, totient_prime\n      PNat.prime_three]\n  simp only [Int.reduceNeg, PNat.val_ofNat, succ_sub_succ_eq_sub, tsub_zero, zero_lt_two,\n    Nat.div_self, pow_one, cast_ofNat, neg_mul, one_mul, abs_neg, Int.cast_abs, Int.cast_ofNat,\n    factorial_two, gt_iff_lt, abs_of_pos (show (0 : ‚Ñù) < 3 by norm_num)]\n  suffices (2 * (3 / 4) * (2 ^ 2 / 2)) ^ 2 < (2 * (œÄ / 4) * (2 ^ 2 / 2)) ^ 2 from\n    lt_trans (by norm_num) this\n  gcongr\n  exact pi_gt_three\n\n"}
{"name":"IsCyclotomicExtension.Rat.five_pid","module":"Mathlib.NumberTheory.Cyclotomic.PID","initialProofState":"K : Type u\ninst‚úù¬≤ : Field K\ninst‚úù¬π : NumberField K\ninst‚úù : IsCyclotomicExtension (Singleton.singleton 5) Rat K\n‚ä¢ IsPrincipalIdealRing (NumberField.RingOfIntegers K)","decl":"/-- If `IsCyclotomicExtension {5} ‚Ñö K` then `ùìû K` is a principal ideal domain. -/\ntheorem five_pid [IsCyclotomicExtension {5} ‚Ñö K] : IsPrincipalIdealRing (ùìû K) := by\n  apply RingOfIntegers.isPrincipalIdealRing_of_abs_discr_lt\n  rw [absdiscr_prime 5 K, IsCyclotomicExtension.finrank (n := 5) K\n    (irreducible_rat (by norm_num)), nrComplexPlaces_eq_totient_div_two 5, totient_prime\n      PNat.prime_five]\n  simp only [Int.reduceNeg, PNat.val_ofNat, succ_sub_succ_eq_sub, tsub_zero, reduceDiv, even_two,\n    Even.neg_pow, one_pow, cast_ofNat, Int.reducePow, one_mul, Int.cast_abs, Int.cast_ofNat,\n    div_pow, gt_iff_lt, show 4! = 24 by rfl, abs_of_pos (show (0 : ‚Ñù) < 125 by norm_num)]\n  suffices (2 * (3 ^ 2 / 4 ^ 2) * (4 ^ 4 / 24)) ^ 2 < (2 * (œÄ ^ 2 / 4 ^ 2) * (4 ^ 4 / 24)) ^ 2 from\n    lt_trans (by norm_num) this\n  gcongr\n  exact pi_gt_three\n\n"}
