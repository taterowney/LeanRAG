{"name":"Equicontinuous.comap_uniformFun_eq","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : CompactSpace X\nF_eqcont : Equicontinuous F\n⊢ Eq (UniformSpace.comap F (UniformFun.uniformSpace X α)) (UniformSpace.comap F (Pi.uniformSpace fun i => α))","decl":"/-- Let `X` be a compact topological space, `α` a uniform space, and `F : ι → (X → α)` an\nequicontinuous family. Then, the uniform structures of uniform convergence and pointwise\nconvergence induce the same uniform structure on `ι`.\n\nIn other words, pointwise convergence and uniform convergence coincide on an equicontinuous\nsubset of `X → α`.\n\nConsider using `Equicontinuous.isUniformInducing_uniformFun_iff_pi` and\n`Equicontinuous.inducing_uniformFun_iff_pi` instead, to avoid rewriting instances. -/\ntheorem Equicontinuous.comap_uniformFun_eq [CompactSpace X] (F_eqcont : Equicontinuous F) :\n    (UniformFun.uniformSpace X α).comap F =\n    (Pi.uniformSpace _).comap F := by\n  -- The `≤` inequality is trivial\n  refine le_antisymm (UniformSpace.comap_mono UniformFun.uniformContinuous_toFun) ?_\n  -- A bit of rewriting to get a nice intermediate statement.\n  change comap _ _ ≤ comap _ _\n  simp_rw [Pi.uniformity, Filter.comap_iInf, comap_comap, Function.comp_def]\n  refine ((UniformFun.hasBasis_uniformity X α).comap (Prod.map F F)).ge_iff.mpr ?_\n  -- Core of the proof: we need to show that, for any entourage `U` in `α`,\n  -- the set `𝐓(U) := {(i,j) : ι × ι | ∀ x : X, (F i x, F j x) ∈ U}` belongs to the filter\n  -- `⨅ x, comap ((i,j) ↦ (F i x, F j x)) (𝓤 α)`.\n  -- In other words, we have to show that it contains a finite intersection of\n  -- sets of the form `𝐒(V, x) := {(i,j) : ι × ι | (F i x, F j x) ∈ V}` for some\n  -- `x : X` and `V ∈ 𝓤 α`.\n  intro U hU\n  -- We will do an `ε/3` argument, so we start by choosing a symmetric entourage `V ∈ 𝓤 α`\n  -- such that `V ○ V ○ V ⊆ U`.\n  rcases comp_comp_symm_mem_uniformity_sets hU with ⟨V, hV, Vsymm, hVU⟩\n  -- Set `Ω x := {y | ∀ i, (F i x, F i y) ∈ V}`. The equicontinuity of `F` guarantees that\n  -- each `Ω x` is a neighborhood of `x`.\n  let Ω x : Set X := {y | ∀ i, (F i x, F i y) ∈ V}\n  -- Hence, by compactness of `X`, we can find some `A ⊆ X` finite such that the `Ω a`s for `a ∈ A`\n  -- still cover `X`.\n  rcases CompactSpace.elim_nhds_subcover Ω (fun x ↦ F_eqcont x V hV) with ⟨A, Acover⟩\n  -- We now claim that `⋂ a ∈ A, 𝐒(V, a) ⊆ 𝐓(U)`.\n  have : (⋂ a ∈ A, {ij : ι × ι | (F ij.1 a, F ij.2 a) ∈ V}) ⊆\n      (Prod.map F F) ⁻¹' UniformFun.gen X α U := by\n    -- Given `(i, j) ∈ ⋂ a ∈ A, 𝐒(V, a)` and `x : X`, we have to prove that `(F i x, F j x) ∈ U`.\n    rintro ⟨i, j⟩ hij x\n    rw [mem_iInter₂] at hij\n    -- We know that `x ∈ Ω a` for some `a ∈ A`, so that both `(F i x, F i a)` and `(F j a, F j x)`\n    -- are in `V`.\n    rcases mem_iUnion₂.mp (Acover.symm.subset <| mem_univ x) with ⟨a, ha, hax⟩\n    -- Since `(i, j) ∈ 𝐒(V, a)` we also have `(F i a, F j a) ∈ V`, and finally we get\n    -- `(F i x, F j x) ∈ V ○ V ○ V ⊆ U`.\n    exact hVU (prod_mk_mem_compRel (prod_mk_mem_compRel\n      (Vsymm.mk_mem_comm.mp (hax i)) (hij a ha)) (hax j))\n  -- This completes the proof.\n  exact mem_of_superset\n    (A.iInter_mem_sets.mpr fun x _ ↦ mem_iInf_of_mem x <| preimage_mem_comap hV) this\n\n"}
{"name":"Equicontinuous.isUniformInducing_uniformFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : UniformSpace α\nF : ι → X → α\ninst✝¹ : UniformSpace ι\ninst✝ : CompactSpace X\nF_eqcont : Equicontinuous F\n⊢ Iff (IsUniformInducing (Function.comp (⇑UniformFun.ofFun) F)) (IsUniformInducing F)","decl":"/-- Let `X` be a compact topological space, `α` a uniform space, and `F : ι → (X → α)` an\nequicontinuous family. Then, the uniform structures of uniform convergence and pointwise\nconvergence induce the same uniform structure on `ι`.\n\nIn other words, pointwise convergence and uniform convergence coincide on an equicontinuous\nsubset of `X → α`.\n\nThis is a version of `Equicontinuous.comap_uniformFun_eq` stated in terms of `IsUniformInducing`\nfor convenuence. -/\nlemma Equicontinuous.isUniformInducing_uniformFun_iff_pi [UniformSpace ι] [CompactSpace X]\n    (F_eqcont : Equicontinuous F) :\n    IsUniformInducing (UniformFun.ofFun ∘ F) ↔ IsUniformInducing F := by\n  rw [isUniformInducing_iff_uniformSpace, isUniformInducing_iff_uniformSpace,\n      ← F_eqcont.comap_uniformFun_eq]\n  rfl\n\n"}
{"name":"Equicontinuous.uniformInducing_uniformFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : UniformSpace α\nF : ι → X → α\ninst✝¹ : UniformSpace ι\ninst✝ : CompactSpace X\nF_eqcont : Equicontinuous F\n⊢ Iff (IsUniformInducing (Function.comp (⇑UniformFun.ofFun) F)) (IsUniformInducing F)","decl":"@[deprecated (since := \"2024-10-05\")]\nalias Equicontinuous.uniformInducing_uniformFun_iff_pi :=\n  Equicontinuous.isUniformInducing_uniformFun_iff_pi\n\n"}
{"name":"Equicontinuous.inducing_uniformFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : UniformSpace α\nF : ι → X → α\ninst✝¹ : TopologicalSpace ι\ninst✝ : CompactSpace X\nF_eqcont : Equicontinuous F\n⊢ Iff (Topology.IsInducing (Function.comp (⇑UniformFun.ofFun) F)) (Topology.IsInducing F)","decl":"/-- Let `X` be a compact topological space, `α` a uniform space, and `F : ι → (X → α)` an\nequicontinuous family. Then, the topologies of uniform convergence and pointwise convergence induce\nthe same topology on `ι`.\n\nIn other words, pointwise convergence and uniform convergence coincide on an equicontinuous\nsubset of `X → α`.\n\nThis is a consequence of `Equicontinuous.comap_uniformFun_eq`, stated in terms of `IsInducing`\nfor convenuence. -/\nlemma Equicontinuous.inducing_uniformFun_iff_pi [TopologicalSpace ι] [CompactSpace X]\n    (F_eqcont : Equicontinuous F) :\n    IsInducing (UniformFun.ofFun ∘ F) ↔ IsInducing F := by\n  rw [isInducing_iff, isInducing_iff]\n  change (_ = (UniformFun.uniformSpace X α |>.comap F |>.toTopologicalSpace)) ↔\n         (_ = (Pi.uniformSpace _ |>.comap F |>.toTopologicalSpace))\n  rw [F_eqcont.comap_uniformFun_eq]\n\n"}
{"name":"Equicontinuous.tendsto_uniformFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : CompactSpace X\nF_eqcont : Equicontinuous F\nℱ : Filter ι\nf : X → α\n⊢ Iff (Filter.Tendsto (Function.comp (⇑UniformFun.ofFun) F) ℱ (nhds (UniformFun.ofFun f))) (Filter.Tendsto F ℱ (nhds f))","decl":"/-- Let `X` be a compact topological space, `α` a uniform space, `F : ι → (X → α)` an\nequicontinuous family, and `ℱ` a filter on `ι`. Then, `F` tends *uniformly* to `f : X → α` along\n`ℱ` iff it tends to `f` *pointwise* along `ℱ`. -/\ntheorem Equicontinuous.tendsto_uniformFun_iff_pi [CompactSpace X]\n    (F_eqcont : Equicontinuous F) (ℱ : Filter ι) (f : X → α) :\n    Tendsto (UniformFun.ofFun ∘ F) ℱ (𝓝 <| UniformFun.ofFun f) ↔\n    Tendsto F ℱ (𝓝 f) := by\n  -- Assume `ℱ` is non trivial.\n  rcases ℱ.eq_or_neBot with rfl | ℱ_ne\n  · simp\n  constructor <;> intro H\n  -- The forward direction is always true, the interesting part is the converse.\n  · exact UniformFun.uniformContinuous_toFun.continuous.tendsto _|>.comp H\n  -- To prove it, assume that `F` tends to `f` *pointwise* along `ℱ`.\n  · set S : Set (X → α) := closure (range F)\n    set 𝒢 : Filter S := comap (↑) (map F ℱ)\n    -- We would like to use `Equicontinuous.comap_uniformFun_eq`, but applying it to `F` is not\n    -- enough since `f` has no reason to be in the range of `F`.\n    -- Instead, we will apply it to the inclusion `(↑) : S → (X → α)` where `S` is the closure of\n    -- the range of `F` *for the product topology*.\n    -- We know that `S` is still equicontinuous...\n    have hS : S.Equicontinuous := closure' (by rwa [equicontinuous_iff_range] at F_eqcont)\n      continuous_id\n    -- ... hence, as announced, the product topology and uniform convergence topology\n    -- coincide on `S`.\n    have ind : IsInducing (UniformFun.ofFun ∘ (↑) : S → X →ᵤ α) :=\n      hS.inducing_uniformFun_iff_pi.mpr ⟨rfl⟩\n    -- By construction, `f` is in `S`.\n    have f_mem : f ∈ S := mem_closure_of_tendsto H range_mem_map\n    -- To conclude, we just have to translate our hypothesis and goal as statements about\n    -- `S`, on which we know the two topologies at play coincide.\n    -- For this, we define a filter on `S` by `𝒢 := comap (↑) (map F ℱ)`, and note that\n    -- it satisfies `map (↑) 𝒢 = map F ℱ`. Thus, both our hypothesis and our goal\n    -- can be rewritten as `𝒢 ≤ 𝓝 f`, where the neighborhood filter in the RHS corresponds\n    -- to one of the two topologies at play on `S`. Since they coincide, we are done.\n    have h𝒢ℱ : map (↑) 𝒢 = map F ℱ := Filter.map_comap_of_mem\n      (Subtype.range_coe ▸ mem_of_superset range_mem_map subset_closure)\n    have H' : Tendsto id 𝒢 (𝓝 ⟨f, f_mem⟩) := by\n      rwa [tendsto_id', nhds_induced, ← map_le_iff_le_comap, h𝒢ℱ]\n    rwa [ind.tendsto_nhds_iff, comp_id, ← tendsto_map'_iff, h𝒢ℱ] at H'\n\n"}
{"name":"EquicontinuousOn.comap_uniformOnFun_eq","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nF : ι → X → α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Eq (UniformSpace.comap F (UniformOnFun.uniformSpace X α 𝔖)) (UniformSpace.comap (Function.comp 𝔖.sUnion.restrict F) (Pi.uniformSpace fun i => α))","decl":"/-- Let `X` be a topological space, `𝔖` a family of compact subsets of `X`, `α` a uniform space,\nand `F : ι → (X → α)` a family which is equicontinuous on each `K ∈ 𝔖`. Then, the uniform\nstructures of uniform convergence on `𝔖` and pointwise convergence on `⋃₀ 𝔖` induce the same\nuniform structure on `ι`.\n\nIn particular, pointwise convergence and compact convergence coincide on an equicontinuous\nsubset of `X → α`.\n\nConsider using `EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi'` and\n`EquicontinuousOn.inducing_uniformOnFun_iff_pi'` instead to avoid rewriting instances,\nas well as their unprimed versions in case `𝔖` covers `X`. -/\ntheorem EquicontinuousOn.comap_uniformOnFun_eq {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) :\n    (UniformOnFun.uniformSpace X α 𝔖).comap F =\n    (Pi.uniformSpace _).comap ((⋃₀ 𝔖).restrict ∘ F) := by\n  -- Recall that the uniform structure on `X →ᵤ[𝔖] α` is the one induced by all the maps\n  -- `K.restrict : (X →ᵤ[𝔖] α) → (K →ᵤ α)` for `K ∈ 𝔖`. Its pullback along `F`, which is\n  -- the LHS of our goal, is thus the uniform structure induced by the maps\n  -- `K.restrict ∘ F : ι → (K →ᵤ α)` for `K ∈ 𝔖`.\n  have H1 : (UniformOnFun.uniformSpace X α 𝔖).comap F =\n      ⨅ (K ∈ 𝔖), (UniformFun.uniformSpace _ _).comap (K.restrict ∘ F) := by\n    simp_rw [UniformOnFun.uniformSpace, UniformSpace.comap_iInf, ← UniformSpace.comap_comap,\n      UniformFun.ofFun, Equiv.coe_fn_mk, UniformOnFun.toFun, UniformOnFun.ofFun, Function.comp_def,\n      UniformFun, Equiv.coe_fn_symm_mk]\n  -- Now, note that a similar fact is true for the uniform structure on `X → α` induced by\n  -- the map `(⋃₀ 𝔖).restrict : (X → α) → ((⋃₀ 𝔖) → α)`: it is equal to the one induced by\n  -- all maps `K.restrict : (X → α) → (K → α)` for `K ∈ 𝔖`, which means that the RHS of our\n  -- goal is the uniform structure induced by the maps `K.restrict ∘ F : ι → (K → α)` for `K ∈ 𝔖`.\n  have H2 : (Pi.uniformSpace _).comap ((⋃₀ 𝔖).restrict ∘ F) =\n      ⨅ (K ∈ 𝔖), (Pi.uniformSpace _).comap (K.restrict ∘ F) := by\n    simp_rw [UniformSpace.comap_comap, Pi.uniformSpace_comap_restrict_sUnion (fun _ ↦ α) 𝔖,\n      UniformSpace.comap_iInf]\n  -- But, for `K ∈ 𝔖` fixed, we know that the uniform structures of `K →ᵤ α` and `K → α`\n  -- induce, via the equicontinuous family `K.restrict ∘ F`, the same uniform structure on `ι`.\n  have H3 : ∀ K ∈ 𝔖, (UniformFun.uniformSpace K α).comap (K.restrict ∘ F) =\n      (Pi.uniformSpace _).comap (K.restrict ∘ F) := fun K hK ↦ by\n    have : CompactSpace K := isCompact_iff_compactSpace.mp (𝔖_compact K hK)\n    exact (equicontinuous_restrict_iff _ |>.mpr <| F_eqcont K hK).comap_uniformFun_eq\n  -- Combining these three facts completes the proof.\n  simp_rw [H1, H2, iInf_congr fun K ↦ iInf_congr fun hK ↦ H3 K hK]\n\n"}
{"name":"EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi'","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : UniformSpace ι\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (IsUniformInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (IsUniformInducing (Function.comp 𝔖.sUnion.restrict F))","decl":"/-- Let `X` be a topological space, `𝔖` a family of compact subsets of `X`, `α` a uniform space,\nand `F : ι → (X → α)` a family which is equicontinuous on each `K ∈ 𝔖`. Then, the uniform\nstructures of uniform convergence on `𝔖` and pointwise convergence on `⋃₀ 𝔖` induce the same\nuniform structure on `ι`.\n\nIn particular, pointwise convergence and compact convergence coincide on an equicontinuous\nsubset of `X → α`.\n\nThis is a version of `EquicontinuousOn.comap_uniformOnFun_eq` stated in terms of `IsUniformInducing`\nfor convenuence. -/\nlemma EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi' [UniformSpace ι]\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) :\n    IsUniformInducing (UniformOnFun.ofFun 𝔖 ∘ F) ↔\n    IsUniformInducing ((⋃₀ 𝔖).restrict ∘ F) := by\n  rw [isUniformInducing_iff_uniformSpace, isUniformInducing_iff_uniformSpace,\n      ← EquicontinuousOn.comap_uniformOnFun_eq 𝔖_compact F_eqcont]\n  rfl\n\n"}
{"name":"EquicontinuousOn.uniformInducing_uniformOnFun_iff_pi'","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : UniformSpace ι\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (IsUniformInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (IsUniformInducing (Function.comp 𝔖.sUnion.restrict F))","decl":"@[deprecated (since := \"2024-10-05\")]\nalias EquicontinuousOn.uniformInducing_uniformOnFun_iff_pi' :=\n  EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi'\n\n"}
{"name":"EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : UniformSpace ι\n𝔖 : Set (Set X)\n𝔖_covers : Eq 𝔖.sUnion Set.univ\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (IsUniformInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (IsUniformInducing F)","decl":"/-- Let `X` be a topological space, `𝔖` a covering of `X` by compact subsets, `α` a uniform space,\nand `F : ι → (X → α)` a family which is equicontinuous on each `K ∈ 𝔖`. Then, the uniform\nstructures of uniform convergence on `𝔖` and pointwise convergence induce the same\nuniform structure on `ι`.\n\nThis is a specialization of `EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi'` to\nthe case where `𝔖` covers `X`. -/\nlemma EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi [UniformSpace ι]\n    {𝔖 : Set (Set X)} (𝔖_covers : ⋃₀ 𝔖 = univ) (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) :\n    IsUniformInducing (UniformOnFun.ofFun 𝔖 ∘ F) ↔\n    IsUniformInducing F := by\n  rw [eq_univ_iff_forall] at 𝔖_covers\n  -- This obviously follows from the previous lemma, we formalize it by going through the\n  -- isomorphism of uniform spaces between `(⋃₀ 𝔖) → α` and `X → α`.\n  let φ : ((⋃₀ 𝔖) → α) ≃ᵤ (X → α) := UniformEquiv.piCongrLeft (β := fun _ ↦ α)\n    (Equiv.subtypeUnivEquiv 𝔖_covers)\n  rw [EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi' 𝔖_compact F_eqcont,\n      show restrict (⋃₀ 𝔖) ∘ F = φ.symm ∘ F by rfl]\n  exact ⟨fun H ↦ φ.isUniformInducing.comp H, fun H ↦ φ.symm.isUniformInducing.comp H⟩\n\n"}
{"name":"EquicontinuousOn.uniformInducing_uniformOnFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : UniformSpace ι\n𝔖 : Set (Set X)\n𝔖_covers : Eq 𝔖.sUnion Set.univ\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (IsUniformInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (IsUniformInducing F)","decl":"@[deprecated (since := \"2024-10-05\")]\nalias EquicontinuousOn.uniformInducing_uniformOnFun_iff_pi :=\n  EquicontinuousOn.isUniformInducing_uniformOnFun_iff_pi\n\n"}
{"name":"EquicontinuousOn.inducing_uniformOnFun_iff_pi'","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : TopologicalSpace ι\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (Topology.IsInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (Topology.IsInducing (Function.comp 𝔖.sUnion.restrict F))","decl":"/-- Let `X` be a topological space, `𝔖` a family of compact subsets of `X`, `α` a uniform space,\nand `F : ι → (X → α)` a family which is equicontinuous on each `K ∈ 𝔖`. Then, the topologies\nof uniform convergence on `𝔖` and pointwise convergence on `⋃₀ 𝔖` induce the same topology on  `ι`.\n\nIn particular, pointwise convergence and compact convergence coincide on an equicontinuous\nsubset of `X → α`.\n\nThis is a consequence of `EquicontinuousOn.comap_uniformOnFun_eq` stated in terms of `IsInducing`\nfor convenience. -/\nlemma EquicontinuousOn.inducing_uniformOnFun_iff_pi' [TopologicalSpace ι]\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) :\n    IsInducing (UniformOnFun.ofFun 𝔖 ∘ F) ↔\n    IsInducing ((⋃₀ 𝔖).restrict ∘ F) := by\n  rw [isInducing_iff, isInducing_iff]\n  change (_ = ((UniformOnFun.uniformSpace X α 𝔖).comap F).toTopologicalSpace) ↔\n    (_ = ((Pi.uniformSpace _).comap ((⋃₀ 𝔖).restrict ∘ F)).toTopologicalSpace)\n  rw [← EquicontinuousOn.comap_uniformOnFun_eq 𝔖_compact F_eqcont]\n\n"}
{"name":"EquicontinuousOn.isInducing_uniformOnFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : TopologicalSpace ι\n𝔖 : Set (Set X)\n𝔖_covers : Eq 𝔖.sUnion Set.univ\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (Topology.IsInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (Topology.IsInducing F)","decl":"/-- Let `X` be a topological space, `𝔖` a covering of `X` by compact subsets, `α` a uniform space,\nand `F : ι → (X → α)` a family which is equicontinuous on each `K ∈ 𝔖`. Then, the topologies\nof uniform convergence on `𝔖` and pointwise convergence induce the same topology on `ι`.\n\nThis is a specialization of `EquicontinuousOn.inducing_uniformOnFun_iff_pi'` to\nthe case where `𝔖` covers `X`. -/\nlemma EquicontinuousOn.isInducing_uniformOnFun_iff_pi [TopologicalSpace ι]\n    {𝔖 : Set (Set X)} (𝔖_covers : ⋃₀ 𝔖 = univ) (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) :\n    IsInducing (UniformOnFun.ofFun 𝔖 ∘ F) ↔\n    IsInducing F := by\n  rw [eq_univ_iff_forall] at 𝔖_covers\n  -- This obviously follows from the previous lemma, we formalize it by going through the\n  -- homeomorphism between `(⋃₀ 𝔖) → α` and `X → α`.\n  let φ : ((⋃₀ 𝔖) → α) ≃ₜ (X → α) := Homeomorph.piCongrLeft (Y := fun _ ↦ α)\n    (Equiv.subtypeUnivEquiv 𝔖_covers)\n  rw [EquicontinuousOn.inducing_uniformOnFun_iff_pi' 𝔖_compact F_eqcont,\n      show restrict (⋃₀ 𝔖) ∘ F = φ.symm ∘ F by rfl]\n  exact ⟨fun H ↦ φ.isInducing.comp H, fun H ↦ φ.symm.isInducing.comp H⟩\n\n"}
{"name":"EquicontinuousOn.inducing_uniformOnFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : TopologicalSpace ι\n𝔖 : Set (Set X)\n𝔖_covers : Eq 𝔖.sUnion Set.univ\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (Topology.IsInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)) (Topology.IsInducing F)","decl":"@[deprecated (since := \"2024-10-28\")]\nalias EquicontinuousOn.inducing_uniformOnFun_iff_pi :=\n  EquicontinuousOn.isInducing_uniformOnFun_iff_pi\n\n-- TODO: find a way to factor common elements of this proof and the proof of\n-- `EquicontinuousOn.comap_uniformOnFun_eq`\n"}
{"name":"EquicontinuousOn.tendsto_uniformOnFun_iff_pi'","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nF : ι → X → α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\nℱ : Filter ι\nf : X → α\n⊢ Iff (Filter.Tendsto (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F) ℱ (nhds ((UniformOnFun.ofFun 𝔖) f))) (Filter.Tendsto (Function.comp 𝔖.sUnion.restrict F) ℱ (nhds (𝔖.sUnion.restrict f)))","decl":"/-- Let `X` be a topological space, `𝔖` a family of compact subsets of `X`,\n`α` a uniform space, `F : ι → (X → α)` a family equicontinuous on each `K ∈ 𝔖`, and `ℱ` a filter\non `ι`. Then, `F` tends to `f : X → α` along `ℱ` *uniformly on each `K ∈ 𝔖`* iff it tends to `f`\n*pointwise on `⋃₀ 𝔖`* along `ℱ`. -/\ntheorem EquicontinuousOn.tendsto_uniformOnFun_iff_pi'\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) (ℱ : Filter ι) (f : X → α) :\n    Tendsto (UniformOnFun.ofFun 𝔖 ∘ F) ℱ (𝓝 <| UniformOnFun.ofFun 𝔖 f) ↔\n    Tendsto ((⋃₀ 𝔖).restrict ∘ F) ℱ (𝓝 <| (⋃₀ 𝔖).restrict f) := by\n  -- Recall that the uniform structure on `X →ᵤ[𝔖] α` is the one induced by all the maps\n  -- `K.restrict : (X →ᵤ[𝔖] α) → (K →ᵤ α)` for `K ∈ 𝔖`.\n  -- Similarly, the uniform structure on `X → α` induced by the map\n  -- `(⋃₀ 𝔖).restrict : (X → α) → ((⋃₀ 𝔖) → α)` is equal to the one induced by\n  -- all maps `K.restrict : (X → α) → (K → α)` for `K ∈ 𝔖`\n  -- Thus, we just have to compare the two sides of our goal when restricted to some\n  -- `K ∈ 𝔖`, where we can apply `Equicontinuous.tendsto_uniformFun_iff_pi`.\n  rw [← Filter.tendsto_comap_iff (g := (⋃₀ 𝔖).restrict), ← nhds_induced]\n  simp_rw [UniformOnFun.topologicalSpace_eq, Pi.induced_restrict_sUnion 𝔖 (π := fun _ ↦ α),\n    _root_.nhds_iInf, nhds_induced, tendsto_iInf, tendsto_comap_iff]\n  congrm ∀ K (hK : K ∈ 𝔖), ?_\n  have : CompactSpace K := isCompact_iff_compactSpace.mp (𝔖_compact K hK)\n  rw [← (equicontinuous_restrict_iff _ |>.mpr <| F_eqcont K hK).tendsto_uniformFun_iff_pi]\n  rfl\n\n"}
{"name":"EquicontinuousOn.tendsto_uniformOnFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nF : ι → X → α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\n𝔖_covers : Eq 𝔖.sUnion Set.univ\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\nℱ : Filter ι\nf : X → α\n⊢ Iff (Filter.Tendsto (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F) ℱ (nhds ((UniformOnFun.ofFun 𝔖) f))) (Filter.Tendsto F ℱ (nhds f))","decl":"/-- Let `X` be a topological space, `𝔖` a covering of `X` by compact subsets,\n`α` a uniform space, `F : ι → (X → α)` a family equicontinuous on each `K ∈ 𝔖`, and `ℱ` a filter\non `ι`. Then, `F` tends to `f : X → α` along `ℱ` *uniformly on each `K ∈ 𝔖`* iff it tends to `f`\n*pointwise* along `ℱ`.\n\nThis is a specialization of `EquicontinuousOn.tendsto_uniformOnFun_iff_pi'` to the case\nwhere `𝔖` covers `X`. -/\ntheorem EquicontinuousOn.tendsto_uniformOnFun_iff_pi\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K) (𝔖_covers : ⋃₀ 𝔖 = univ)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) (ℱ : Filter ι) (f : X → α) :\n    Tendsto (UniformOnFun.ofFun 𝔖 ∘ F) ℱ (𝓝 <| UniformOnFun.ofFun 𝔖 f) ↔\n    Tendsto F ℱ (𝓝 f) := by\n  rw [eq_univ_iff_forall] at 𝔖_covers\n  let φ : ((⋃₀ 𝔖) → α) ≃ₜ (X → α) := Homeomorph.piCongrLeft (Y := fun _ ↦ α)\n    (Equiv.subtypeUnivEquiv 𝔖_covers)\n  rw [EquicontinuousOn.tendsto_uniformOnFun_iff_pi' 𝔖_compact F_eqcont,\n      show restrict (⋃₀ 𝔖) ∘ F = φ.symm ∘ F by rfl, show restrict (⋃₀ 𝔖) f = φ.symm f by rfl,\n      φ.symm.isInducing.tendsto_nhds_iff]\n\n"}
{"name":"EquicontinuousOn.isClosed_range_pi_of_uniformOnFun'","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nF : ι → X → α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\nH : IsClosed (Set.range (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F))\n⊢ IsClosed (Set.range (Function.comp 𝔖.sUnion.restrict F))","decl":"/-- Let `X` be a topological space, `𝔖` a family of compact subsets of `X` and\n`α` a uniform space. An equicontinuous subset of `X → α` is closed in the topology of uniform\nconvergence on all `K ∈ 𝔖` iff it is closed in the topology of pointwise convergence on `⋃₀ 𝔖`. -/\ntheorem EquicontinuousOn.isClosed_range_pi_of_uniformOnFun'\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K)\n    (H : IsClosed (range <| UniformOnFun.ofFun 𝔖 ∘ F)) :\n    IsClosed (range <| (⋃₀ 𝔖).restrict ∘ F) := by\n  -- Do we have no equivalent of `nontriviality`?\n  rcases isEmpty_or_nonempty α with _ | _\n  · simp [isClosed_discrete]\n  -- This follows from the previous lemmas and the characterization of the closure using filters.\n  simp_rw [isClosed_iff_clusterPt, ← Filter.map_top, ← mapClusterPt_def,\n    mapClusterPt_iff_ultrafilter, range_comp, Subtype.coe_injective.surjective_comp_right.forall,\n    ← restrict_eq, ← EquicontinuousOn.tendsto_uniformOnFun_iff_pi' 𝔖_compact F_eqcont]\n  exact fun f ⟨u, _, hu⟩ ↦ mem_image_of_mem _ <| H.mem_of_tendsto hu <|\n    Eventually.of_forall mem_range_self\n\n"}
{"name":"EquicontinuousOn.isClosed_range_uniformOnFun_iff_pi","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nF : ι → X → α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\n𝔖_covers : Eq 𝔖.sUnion Set.univ\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\n⊢ Iff (IsClosed (Set.range (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F))) (IsClosed (Set.range F))","decl":"/-- Let `X` be a topological space, `𝔖` a covering of `X` by compact subsets, and\n`α` a uniform space. An equicontinuous subset of `X → α` is closed in the topology of uniform\nconvergence on all `K ∈ 𝔖` iff it is closed in the topology of pointwise convergence.\n\nThis is a specialization of `EquicontinuousOn.isClosed_range_pi_of_uniformOnFun'` to the case where\n`𝔖` covers `X`. -/\ntheorem EquicontinuousOn.isClosed_range_uniformOnFun_iff_pi\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K) (𝔖_covers : ⋃₀ 𝔖 = univ)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K) :\n    IsClosed (range <| UniformOnFun.ofFun 𝔖 ∘ F) ↔\n    IsClosed (range F) := by\n  -- This follows from the previous lemmas and the characterization of the closure using filters.\n  simp_rw [isClosed_iff_clusterPt, ← Filter.map_top, ← mapClusterPt_def,\n    mapClusterPt_iff_ultrafilter, range_comp, (UniformOnFun.ofFun 𝔖).surjective.forall,\n    ← EquicontinuousOn.tendsto_uniformOnFun_iff_pi 𝔖_compact 𝔖_covers F_eqcont,\n    (UniformOnFun.ofFun 𝔖).injective.mem_set_image]\n\n"}
{"name":"EquicontinuousOn.isClosed_range_pi_of_uniformOnFun","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nF : ι → X → α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\n𝔖_covers : Eq 𝔖.sUnion Set.univ\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\na✝ : IsClosed (Set.range (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F))\n⊢ IsClosed (Set.range F)","decl":"alias ⟨EquicontinuousOn.isClosed_range_pi_of_uniformOnFun, _⟩ :=\n  EquicontinuousOn.isClosed_range_uniformOnFun_iff_pi\n\n"}
{"name":"ArzelaAscoli.compactSpace_of_closed_inducing'","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : TopologicalSpace ι\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_ind : Topology.IsInducing (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)\nF_cl : IsClosed (Set.range (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F))\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\nF_pointwiseCompact : ∀ (K : Set X), Membership.mem 𝔖 K → ∀ (x : X), Membership.mem K x → Exists fun Q => And (IsCompact Q) (∀ (i : ι), Membership.mem Q (F i x))\n⊢ CompactSpace ι","decl":"/-- A version of the **Arzela-Ascoli theorem**.\n\nLet `X` be a topological space, `𝔖` a family of compact subsets of `X`, `α` a uniform space,\nand `F : ι → (X → α)`. Assume that:\n* `F`, viewed as a function `ι → (X →ᵤ[𝔖] α)`, is closed and inducing\n* `F` is equicontinuous on each `K ∈ 𝔖`\n* For all `x ∈ ⋃₀ 𝔖`, the range of `i ↦ F i x` is contained in some fixed compact subset.\n\nThen `ι` is compact. -/\ntheorem ArzelaAscoli.compactSpace_of_closed_inducing' [TopologicalSpace ι] {𝔖 : Set (Set X)}\n    (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K) (F_ind : IsInducing (UniformOnFun.ofFun 𝔖 ∘ F))\n    (F_cl : IsClosed <| range <| UniformOnFun.ofFun 𝔖 ∘ F)\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K)\n    (F_pointwiseCompact : ∀ K ∈ 𝔖, ∀ x ∈ K, ∃ Q, IsCompact Q ∧ ∀ i, F i x ∈ Q) :\n    CompactSpace ι := by\n  -- By equicontinuity, we know that the topology on `ι` is also the one induced by\n  -- `restrict (⋃₀ 𝔖) ∘ F`.\n  have : IsInducing (restrict (⋃₀ 𝔖) ∘ F) := by\n    rwa [EquicontinuousOn.inducing_uniformOnFun_iff_pi' 𝔖_compact F_eqcont] at F_ind\n  -- Thus, we just have to check that the range of this map is compact.\n  rw [← isCompact_univ_iff, this.isCompact_iff, image_univ]\n  -- But then we are working in a product space, where compactness can easily be proven using\n  -- Tykhonov's theorem! More precisely, for each `x ∈ ⋃₀ 𝔖`, choose a compact set `Q x`\n  -- containing all `F i x`s.\n  rw [← forall_sUnion] at F_pointwiseCompact\n  choose! Q Q_compact F_in_Q using F_pointwiseCompact\n  -- Notice that, since the range of `F` is closed in `X →ᵤ[𝔖] α`, equicontinuity ensures that\n  -- the range of `(⋃₀ 𝔖).restrict ∘ F` is still closed in the product topology.\n  -- But it's contained in the product of the `Q x`s, which is compact by Tykhonov, hence\n  -- it is compact as well.\n  refine IsCompact.of_isClosed_subset (isCompact_univ_pi fun x ↦ Q_compact x x.2)\n    (EquicontinuousOn.isClosed_range_pi_of_uniformOnFun' 𝔖_compact F_eqcont F_cl)\n    (range_subset_iff.mpr fun i x _ ↦ F_in_Q x x.2 i)\n\n"}
{"name":"ArzelaAscoli.compactSpace_of_isClosedEmbedding","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : TopologicalSpace ι\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_clemb : Topology.IsClosedEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\nF_pointwiseCompact : ∀ (K : Set X), Membership.mem 𝔖 K → ∀ (x : X), Membership.mem K x → Exists fun Q => And (IsCompact Q) (∀ (i : ι), Membership.mem Q (F i x))\n⊢ CompactSpace ι","decl":"/-- A version of the **Arzela-Ascoli theorem**.\n\nLet `X, ι` be topological spaces, `𝔖` a covering of `X` by compact subsets, `α` a uniform space,\nand `F : ι → (X → α)`. Assume that:\n* `F`, viewed as a function `ι → (X →ᵤ[𝔖] α)`, is a closed embedding (in other words, `ι`\n  identifies to a closed subset of `X →ᵤ[𝔖] α` through `F`)\n* `F` is equicontinuous on each `K ∈ 𝔖`\n* For all `x`, the range of `i ↦ F i x` is contained in some fixed compact subset.\n\nThen `ι` is compact. -/\ntheorem ArzelaAscoli.compactSpace_of_isClosedEmbedding [TopologicalSpace ι] {𝔖 : Set (Set X)}\n    (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K) (F_clemb : IsClosedEmbedding (UniformOnFun.ofFun 𝔖 ∘ F))\n    (F_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn F K)\n    (F_pointwiseCompact : ∀ K ∈ 𝔖, ∀ x ∈ K, ∃ Q, IsCompact Q ∧ ∀ i, F i x ∈ Q) :\n    CompactSpace ι :=\n  compactSpace_of_closed_inducing' 𝔖_compact F_clemb.isInducing F_clemb.isClosed_range\n    F_eqcont F_pointwiseCompact\n\n"}
{"name":"ArzelaAscoli.compactSpace_of_closedEmbedding","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝² : TopologicalSpace X\ninst✝¹ : UniformSpace α\nF : ι → X → α\ninst✝ : TopologicalSpace ι\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_clemb : Topology.IsClosedEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)\nF_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn F K\nF_pointwiseCompact : ∀ (K : Set X), Membership.mem 𝔖 K → ∀ (x : X), Membership.mem K x → Exists fun Q => And (IsCompact Q) (∀ (i : ι), Membership.mem Q (F i x))\n⊢ CompactSpace ι","decl":"@[deprecated (since := \"2024-10-20\")]\nalias ArzelaAscoli.compactSpace_of_closedEmbedding := ArzelaAscoli.compactSpace_of_isClosedEmbedding\n\n"}
{"name":"ArzelaAscoli.isCompact_closure_of_isClosedEmbedding","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : UniformSpace α\nF : ι → X → α\ninst✝¹ : TopologicalSpace ι\ninst✝ : T2Space α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_clemb : Topology.IsClosedEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)\ns : Set ι\ns_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn (Function.comp F Subtype.val) K\ns_pointwiseCompact : ∀ (K : Set X), Membership.mem 𝔖 K → ∀ (x : X), Membership.mem K x → Exists fun Q => And (IsCompact Q) (∀ (i : ι), Membership.mem s i → Membership.mem Q (F i x))\n⊢ IsCompact (closure s)","decl":"/-- A version of the **Arzela-Ascoli theorem**.\n\nLet `X, ι` be topological spaces, `𝔖` a covering of `X` by compact subsets, `α` a T2 uniform space,\n`F : ι → (X → α)`, and `s` a subset of `ι`. Assume that:\n* `F`, viewed as a function `ι → (X →ᵤ[𝔖] α)`, is a closed embedding (in other words, `ι`\n  identifies to a closed subset of `X →ᵤ[𝔖] α` through `F`)\n* `F '' s` is equicontinuous on each `K ∈ 𝔖`\n* For all `x ∈ ⋃₀ 𝔖`, the image of `s` under `i ↦ F i x` is contained in some fixed compact subset.\n\nThen `s` has compact closure in `ι`. -/\ntheorem ArzelaAscoli.isCompact_closure_of_isClosedEmbedding [TopologicalSpace ι] [T2Space α]\n    {𝔖 : Set (Set X)} (𝔖_compact : ∀ K ∈ 𝔖, IsCompact K)\n    (F_clemb : IsClosedEmbedding (UniformOnFun.ofFun 𝔖 ∘ F))\n    {s : Set ι} (s_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn (F ∘ ((↑) : s → ι)) K)\n    (s_pointwiseCompact : ∀ K ∈ 𝔖, ∀ x ∈ K, ∃ Q, IsCompact Q ∧ ∀ i ∈ s, F i x ∈ Q) :\n    IsCompact (closure s) := by\n  -- We apply `ArzelaAscoli.compactSpace_of_isClosedEmbedding` to the map\n  -- `F ∘ (↑) : closure s → (X → α)`, for which all the hypotheses are easily verified.\n  rw [isCompact_iff_compactSpace]\n  have : ∀ K ∈ 𝔖, ∀ x ∈ K, Continuous (eval x ∘ F) := fun K hK x hx ↦\n    UniformOnFun.uniformContinuous_eval_of_mem _ _ hx hK |>.continuous.comp F_clemb.continuous\n  have cls_eqcont : ∀ K ∈ 𝔖, EquicontinuousOn (F ∘ ((↑) : closure s → ι)) K :=\n    fun K hK ↦ (s_eqcont K hK).closure' <| show Continuous (K.restrict ∘ F) from\n      continuous_pi fun ⟨x, hx⟩ ↦ this K hK x hx\n  have cls_pointwiseCompact : ∀ K ∈ 𝔖, ∀ x ∈ K, ∃ Q, IsCompact Q ∧ ∀ i ∈ closure s, F i x ∈ Q :=\n    fun K hK x hx ↦ (s_pointwiseCompact K hK x hx).imp fun Q hQ ↦ ⟨hQ.1, closure_minimal hQ.2 <|\n      hQ.1.isClosed.preimage (this K hK x hx)⟩\n  exact ArzelaAscoli.compactSpace_of_isClosedEmbedding 𝔖_compact\n    (F_clemb.comp isClosed_closure.isClosedEmbedding_subtypeVal) cls_eqcont\n    fun K hK x hx ↦ (cls_pointwiseCompact K hK x hx).imp fun Q hQ ↦ ⟨hQ.1, by simpa using hQ.2⟩\n\n"}
{"name":"ArzelaAscoli.isCompact_closure_of_closedEmbedding","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"ι : Type u_1\nX : Type u_2\nα : Type u_3\ninst✝³ : TopologicalSpace X\ninst✝² : UniformSpace α\nF : ι → X → α\ninst✝¹ : TopologicalSpace ι\ninst✝ : T2Space α\n𝔖 : Set (Set X)\n𝔖_compact : ∀ (K : Set X), Membership.mem 𝔖 K → IsCompact K\nF_clemb : Topology.IsClosedEmbedding (Function.comp (⇑(UniformOnFun.ofFun 𝔖)) F)\ns : Set ι\ns_eqcont : ∀ (K : Set X), Membership.mem 𝔖 K → EquicontinuousOn (Function.comp F Subtype.val) K\ns_pointwiseCompact : ∀ (K : Set X), Membership.mem 𝔖 K → ∀ (x : X), Membership.mem K x → Exists fun Q => And (IsCompact Q) (∀ (i : ι), Membership.mem s i → Membership.mem Q (F i x))\n⊢ IsCompact (closure s)","decl":"@[deprecated (since := \"2024-10-20\")]\nalias ArzelaAscoli.isCompact_closure_of_closedEmbedding :=\n  ArzelaAscoli.isCompact_closure_of_isClosedEmbedding\n\n"}
{"name":"ArzelaAscoli.isCompact_of_equicontinuous","module":"Mathlib.Topology.UniformSpace.Ascoli","initialProofState":"X : Type u_2\nα : Type u_3\ninst✝¹ : TopologicalSpace X\ninst✝ : UniformSpace α\nS : Set (ContinuousMap X α)\nhS1 : IsCompact (Set.image ContinuousMap.toFun S)\nhS2 : Equicontinuous fun x => ⇑↑x\n⊢ IsCompact S","decl":"/-- A version of the **Arzela-Ascoli theorem**.\n\nIf an equicontinuous family of continuous functions is compact in the pointwise topology, then it\nis compact in the compact open topology. -/\ntheorem ArzelaAscoli.isCompact_of_equicontinuous\n    (S : Set C(X, α)) (hS1 : IsCompact (ContinuousMap.toFun '' S))\n    (hS2 : Equicontinuous ((↑) : S → X → α)) : IsCompact S := by\n  suffices h : IsInducing (Equiv.Set.image _ S DFunLike.coe_injective) by\n    rw [isCompact_iff_compactSpace] at hS1 ⊢\n    exact (Equiv.toHomeomorphOfIsInducing _ h).symm.compactSpace\n  rw [← IsInducing.subtypeVal.of_comp_iff, ← EquicontinuousOn.isInducing_uniformOnFun_iff_pi _ _ _]\n  · exact ContinuousMap.isUniformEmbedding_toUniformOnFunIsCompact.isInducing.comp .subtypeVal\n  · exact eq_univ_iff_forall.mpr (fun x ↦ mem_sUnion_of_mem (mem_singleton x) isCompact_singleton)\n  · exact fun _ ↦ id\n  · exact fun K _ ↦ hS2.equicontinuousOn K\n"}
