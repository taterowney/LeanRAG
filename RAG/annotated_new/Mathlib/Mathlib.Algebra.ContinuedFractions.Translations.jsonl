{"name":"GenContFract.terminatedAt_iff_s_terminatedAt","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\n⊢ Iff (g.TerminatedAt n) (g.s.TerminatedAt n)","decl":"theorem terminatedAt_iff_s_terminatedAt : g.TerminatedAt n ↔ g.s.TerminatedAt n := by rfl\n\n"}
{"name":"GenContFract.terminatedAt_iff_s_none","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\n⊢ Iff (g.TerminatedAt n) (Eq (g.s.get? n) Option.none)","decl":"theorem terminatedAt_iff_s_none : g.TerminatedAt n ↔ g.s.get? n = none := by rfl\n\n"}
{"name":"GenContFract.partNum_none_iff_s_none","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\n⊢ Iff (Eq (g.partNums.get? n) Option.none) (Eq (g.s.get? n) Option.none)","decl":"theorem partNum_none_iff_s_none : g.partNums.get? n = none ↔ g.s.get? n = none := by\n  cases s_nth_eq : g.s.get? n <;> simp [partNums, s_nth_eq]\n\n"}
{"name":"GenContFract.terminatedAt_iff_partNum_none","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\n⊢ Iff (g.TerminatedAt n) (Eq (g.partNums.get? n) Option.none)","decl":"theorem terminatedAt_iff_partNum_none : g.TerminatedAt n ↔ g.partNums.get? n = none := by\n  rw [terminatedAt_iff_s_none, partNum_none_iff_s_none]\n\n"}
{"name":"GenContFract.partDen_none_iff_s_none","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\n⊢ Iff (Eq (g.partDens.get? n) Option.none) (Eq (g.s.get? n) Option.none)","decl":"theorem partDen_none_iff_s_none : g.partDens.get? n = none ↔ g.s.get? n = none := by\n  cases s_nth_eq : g.s.get? n <;> simp [partDens, s_nth_eq]\n\n"}
{"name":"GenContFract.terminatedAt_iff_partDen_none","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\n⊢ Iff (g.TerminatedAt n) (Eq (g.partDens.get? n) Option.none)","decl":"theorem terminatedAt_iff_partDen_none : g.TerminatedAt n ↔ g.partDens.get? n = none := by\n  rw [terminatedAt_iff_s_none, partDen_none_iff_s_none]\n\n"}
{"name":"GenContFract.partNum_eq_s_a","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\ngp : GenContFract.Pair α\ns_nth_eq : Eq (g.s.get? n) (Option.some gp)\n⊢ Eq (g.partNums.get? n) (Option.some gp.a)","decl":"theorem partNum_eq_s_a {gp : Pair α} (s_nth_eq : g.s.get? n = some gp) :\n    g.partNums.get? n = some gp.a := by simp [partNums, s_nth_eq]\n\n"}
{"name":"GenContFract.partDen_eq_s_b","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\ngp : GenContFract.Pair α\ns_nth_eq : Eq (g.s.get? n) (Option.some gp)\n⊢ Eq (g.partDens.get? n) (Option.some gp.b)","decl":"theorem partDen_eq_s_b {gp : Pair α} (s_nth_eq : g.s.get? n = some gp) :\n    g.partDens.get? n = some gp.b := by simp [partDens, s_nth_eq]\n\n"}
{"name":"GenContFract.exists_s_a_of_partNum","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\na : α\nnth_partNum_eq : Eq (g.partNums.get? n) (Option.some a)\n⊢ Exists fun gp => And (Eq (g.s.get? n) (Option.some gp)) (Eq gp.a a)","decl":"theorem exists_s_a_of_partNum {a : α} (nth_partNum_eq : g.partNums.get? n = some a) :\n    ∃ gp, g.s.get? n = some gp ∧ gp.a = a := by\n  simpa [partNums, Stream'.Seq.map_get?] using nth_partNum_eq\n\n"}
{"name":"GenContFract.exists_s_b_of_partDen","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"α : Type u_1\ng : GenContFract α\nn : Nat\nb : α\nnth_partDen_eq : Eq (g.partDens.get? n) (Option.some b)\n⊢ Exists fun gp => And (Eq (g.s.get? n) (Option.some gp)) (Eq gp.b b)","decl":"theorem exists_s_b_of_partDen {b : α}\n    (nth_partDen_eq : g.partDens.get? n = some b) :\n    ∃ gp, g.s.get? n = some gp ∧ gp.b = b := by\n  simpa [partDens, Stream'.Seq.map_get?] using nth_partDen_eq\n\n"}
{"name":"GenContFract.nth_cont_eq_succ_nth_contAux","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\n⊢ Eq (g.conts n) (g.contsAux (HAdd.hAdd n 1))","decl":"theorem nth_cont_eq_succ_nth_contAux : g.conts n = g.contsAux (n + 1) :=\n  rfl\n\n"}
{"name":"GenContFract.num_eq_conts_a","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\n⊢ Eq (g.nums n) (g.conts n).a","decl":"theorem num_eq_conts_a : g.nums n = (g.conts n).a :=\n  rfl\n\n"}
{"name":"GenContFract.den_eq_conts_b","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\n⊢ Eq (g.dens n) (g.conts n).b","decl":"theorem den_eq_conts_b : g.dens n = (g.conts n).b :=\n  rfl\n\n"}
{"name":"GenContFract.conv_eq_num_div_den","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\n⊢ Eq (g.convs n) (HDiv.hDiv (g.nums n) (g.dens n))","decl":"theorem conv_eq_num_div_den : g.convs n = g.nums n / g.dens n :=\n  rfl\n\n"}
{"name":"GenContFract.conv_eq_conts_a_div_conts_b","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\n⊢ Eq (g.convs n) (HDiv.hDiv (g.conts n).a (g.conts n).b)","decl":"theorem conv_eq_conts_a_div_conts_b :\n    g.convs n = (g.conts n).a / (g.conts n).b :=\n  rfl\n\n"}
{"name":"GenContFract.exists_conts_a_of_num","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\nA : K\nnth_num_eq : Eq (g.nums n) A\n⊢ Exists fun conts => And (Eq (g.conts n) conts) (Eq conts.a A)","decl":"theorem exists_conts_a_of_num {A : K} (nth_num_eq : g.nums n = A) :\n    ∃ conts, g.conts n = conts ∧ conts.a = A := by simpa\n\n"}
{"name":"GenContFract.exists_conts_b_of_den","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\nn : Nat\ninst✝ : DivisionRing K\nB : K\nnth_denom_eq : Eq (g.dens n) B\n⊢ Exists fun conts => And (Eq (g.conts n) conts) (Eq conts.b B)","decl":"theorem exists_conts_b_of_den {B : K} (nth_denom_eq : g.dens n = B) :\n    ∃ conts, g.conts n = conts ∧ conts.b = B := by simpa\n\n"}
{"name":"GenContFract.zeroth_contAux_eq_one_zero","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.contsAux 0) { a := 1, b := 0 }","decl":"@[simp]\ntheorem zeroth_contAux_eq_one_zero : g.contsAux 0 = ⟨1, 0⟩ :=\n  rfl\n\n"}
{"name":"GenContFract.first_contAux_eq_h_one","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.contsAux 1) { a := g.h, b := 1 }","decl":"@[simp]\ntheorem first_contAux_eq_h_one : g.contsAux 1 = ⟨g.h, 1⟩ :=\n  rfl\n\n"}
{"name":"GenContFract.zeroth_cont_eq_h_one","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.conts 0) { a := g.h, b := 1 }","decl":"@[simp]\ntheorem zeroth_cont_eq_h_one : g.conts 0 = ⟨g.h, 1⟩ :=\n  rfl\n\n"}
{"name":"GenContFract.zeroth_num_eq_h","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.nums 0) g.h","decl":"@[simp]\ntheorem zeroth_num_eq_h : g.nums 0 = g.h :=\n  rfl\n\n"}
{"name":"GenContFract.zeroth_den_eq_one","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.dens 0) 1","decl":"@[simp]\ntheorem zeroth_den_eq_one : g.dens 0 = 1 :=\n  rfl\n\n"}
{"name":"GenContFract.zeroth_conv_eq_h","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.convs 0) g.h","decl":"@[simp]\ntheorem zeroth_conv_eq_h : g.convs 0 = g.h := by\n  simp [conv_eq_num_div_den, num_eq_conts_a, den_eq_conts_b, div_one]\n\n"}
{"name":"GenContFract.second_contAux_eq","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\ngp : GenContFract.Pair K\nzeroth_s_eq : Eq (g.s.get? 0) (Option.some gp)\n⊢ Eq (g.contsAux 2) { a := HAdd.hAdd (HMul.hMul gp.b g.h) gp.a, b := gp.b }","decl":"theorem second_contAux_eq {gp : Pair K} (zeroth_s_eq : g.s.get? 0 = some gp) :\n    g.contsAux 2 = ⟨gp.b * g.h + gp.a, gp.b⟩ := by\n  simp [zeroth_s_eq, contsAux, nextConts, nextDen, nextNum]\n\n"}
{"name":"GenContFract.first_cont_eq","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\ngp : GenContFract.Pair K\nzeroth_s_eq : Eq (g.s.get? 0) (Option.some gp)\n⊢ Eq (g.conts 1) { a := HAdd.hAdd (HMul.hMul gp.b g.h) gp.a, b := gp.b }","decl":"theorem first_cont_eq {gp : Pair K} (zeroth_s_eq : g.s.get? 0 = some gp) :\n    g.conts 1 = ⟨gp.b * g.h + gp.a, gp.b⟩ := by\n  simp [nth_cont_eq_succ_nth_contAux]\n  -- Porting note https://github.com/leanprover-community/mathlib4/issues/10959\n  -- simp used to work here, but now it can't figure out that 1 + 1 = 2\n  convert second_contAux_eq zeroth_s_eq\n\n"}
{"name":"GenContFract.first_num_eq","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\ngp : GenContFract.Pair K\nzeroth_s_eq : Eq (g.s.get? 0) (Option.some gp)\n⊢ Eq (g.nums 1) (HAdd.hAdd (HMul.hMul gp.b g.h) gp.a)","decl":"theorem first_num_eq {gp : Pair K} (zeroth_s_eq : g.s.get? 0 = some gp) :\n    g.nums 1 = gp.b * g.h + gp.a := by simp [num_eq_conts_a, first_cont_eq zeroth_s_eq]\n\n"}
{"name":"GenContFract.first_den_eq","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\ngp : GenContFract.Pair K\nzeroth_s_eq : Eq (g.s.get? 0) (Option.some gp)\n⊢ Eq (g.dens 1) gp.b","decl":"theorem first_den_eq {gp : Pair K} (zeroth_s_eq : g.s.get? 0 = some gp) :\n    g.dens 1 = gp.b := by simp [den_eq_conts_b, first_cont_eq zeroth_s_eq]\n\n"}
{"name":"GenContFract.zeroth_conv'Aux_eq_zero","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ninst✝ : DivisionRing K\ns : Stream'.Seq (GenContFract.Pair K)\n⊢ Eq (GenContFract.convs'Aux s 0) 0","decl":"@[simp]\ntheorem zeroth_conv'Aux_eq_zero {s : Stream'.Seq <| Pair K} :\n    convs'Aux s 0 = (0 : K) :=\n  rfl\n\n"}
{"name":"GenContFract.zeroth_conv'_eq_h","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ng : GenContFract K\ninst✝ : DivisionRing K\n⊢ Eq (g.convs' 0) g.h","decl":"@[simp]\ntheorem zeroth_conv'_eq_h : g.convs' 0 = g.h := by simp [convs']\n\n"}
{"name":"GenContFract.convs'Aux_succ_none","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ninst✝ : DivisionRing K\ns : Stream'.Seq (GenContFract.Pair K)\nh : Eq s.head Option.none\nn : Nat\n⊢ Eq (GenContFract.convs'Aux s (HAdd.hAdd n 1)) 0","decl":"theorem convs'Aux_succ_none {s : Stream'.Seq (Pair K)} (h : s.head = none) (n : ℕ) :\n    convs'Aux s (n + 1) = 0 := by simp [convs'Aux, h]\n\n"}
{"name":"GenContFract.convs'Aux_succ_some","module":"Mathlib.Algebra.ContinuedFractions.Translations","initialProofState":"K : Type u_1\ninst✝ : DivisionRing K\ns : Stream'.Seq (GenContFract.Pair K)\np : GenContFract.Pair K\nh : Eq s.head (Option.some p)\nn : Nat\n⊢ Eq (GenContFract.convs'Aux s (HAdd.hAdd n 1)) (HDiv.hDiv p.a (HAdd.hAdd p.b (GenContFract.convs'Aux s.tail n)))","decl":"theorem convs'Aux_succ_some {s : Stream'.Seq (Pair K)} {p : Pair K} (h : s.head = some p)\n    (n : ℕ) : convs'Aux s (n + 1) = p.a / (p.b + convs'Aux s.tail n) := by\n  simp [convs'Aux, h]\n\n"}
