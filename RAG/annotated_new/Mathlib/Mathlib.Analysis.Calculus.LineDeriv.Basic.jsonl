{"name":"HasLineDerivWithinAt.mono","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\ns t : Set E\nx v : E\nhf : HasLineDerivWithinAt 𝕜 f f' s x v\nhst : HasSubset.Subset t s\n⊢ HasLineDerivWithinAt 𝕜 f f' t x v","decl":"lemma HasLineDerivWithinAt.mono (hf : HasLineDerivWithinAt 𝕜 f f' s x v) (hst : t ⊆ s) :\n    HasLineDerivWithinAt 𝕜 f f' t x v :=\n  HasDerivWithinAt.mono hf (preimage_mono hst)\n\n"}
{"name":"HasLineDerivAt.hasLineDerivWithinAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\nhf : HasLineDerivAt 𝕜 f f' x v\ns : Set E\n⊢ HasLineDerivWithinAt 𝕜 f f' s x v","decl":"lemma HasLineDerivAt.hasLineDerivWithinAt (hf : HasLineDerivAt 𝕜 f f' x v) (s : Set E) :\n    HasLineDerivWithinAt 𝕜 f f' s x v :=\n  HasDerivAt.hasDerivWithinAt hf\n\n"}
{"name":"HasLineDerivWithinAt.lineDifferentiableWithinAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\ns : Set E\nx v : E\nhf : HasLineDerivWithinAt 𝕜 f f' s x v\n⊢ LineDifferentiableWithinAt 𝕜 f s x v","decl":"lemma HasLineDerivWithinAt.lineDifferentiableWithinAt (hf : HasLineDerivWithinAt 𝕜 f f' s x v) :\n    LineDifferentiableWithinAt 𝕜 f s x v :=\n  HasDerivWithinAt.differentiableWithinAt hf\n\n"}
{"name":"HasLineDerivAt.lineDifferentiableAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\nhf : HasLineDerivAt 𝕜 f f' x v\n⊢ LineDifferentiableAt 𝕜 f x v","decl":"theorem HasLineDerivAt.lineDifferentiableAt (hf : HasLineDerivAt 𝕜 f f' x v) :\n    LineDifferentiableAt 𝕜 f x v :=\n  HasDerivAt.differentiableAt hf\n\n"}
{"name":"LineDifferentiableWithinAt.hasLineDerivWithinAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\n⊢ HasLineDerivWithinAt 𝕜 f (lineDerivWithin 𝕜 f s x v) s x v","decl":"theorem LineDifferentiableWithinAt.hasLineDerivWithinAt (h : LineDifferentiableWithinAt 𝕜 f s x v) :\n    HasLineDerivWithinAt 𝕜 f (lineDerivWithin 𝕜 f s x v) s x v :=\n  DifferentiableWithinAt.hasDerivWithinAt h\n\n"}
{"name":"LineDifferentiableAt.hasLineDerivAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nh : LineDifferentiableAt 𝕜 f x v\n⊢ HasLineDerivAt 𝕜 f (lineDeriv 𝕜 f x v) x v","decl":"theorem LineDifferentiableAt.hasLineDerivAt (h : LineDifferentiableAt 𝕜 f x v) :\n    HasLineDerivAt 𝕜 f (lineDeriv 𝕜 f x v) x v :=\n  DifferentiableAt.hasDerivAt h\n\n"}
{"name":"hasLineDerivWithinAt_univ","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\n⊢ Iff (HasLineDerivWithinAt 𝕜 f f' Set.univ x v) (HasLineDerivAt 𝕜 f f' x v)","decl":"@[simp] lemma hasLineDerivWithinAt_univ :\n    HasLineDerivWithinAt 𝕜 f f' univ x v ↔ HasLineDerivAt 𝕜 f f' x v := by\n  simp only [HasLineDerivWithinAt, HasLineDerivAt, preimage_univ, hasDerivWithinAt_univ]\n\n"}
{"name":"lineDerivWithin_zero_of_not_lineDifferentiableWithinAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nh : Not (LineDifferentiableWithinAt 𝕜 f s x v)\n⊢ Eq (lineDerivWithin 𝕜 f s x v) 0","decl":"theorem lineDerivWithin_zero_of_not_lineDifferentiableWithinAt\n    (h : ¬LineDifferentiableWithinAt 𝕜 f s x v) :\n    lineDerivWithin 𝕜 f s x v = 0 :=\n  derivWithin_zero_of_not_differentiableWithinAt h\n\n"}
{"name":"lineDeriv_zero_of_not_lineDifferentiableAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nh : Not (LineDifferentiableAt 𝕜 f x v)\n⊢ Eq (lineDeriv 𝕜 f x v) 0","decl":"theorem lineDeriv_zero_of_not_lineDifferentiableAt (h : ¬LineDifferentiableAt 𝕜 f x v) :\n    lineDeriv 𝕜 f x v = 0 :=\n  deriv_zero_of_not_differentiableAt h\n\n"}
{"name":"hasLineDerivAt_iff_isLittleO_nhds_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\n⊢ Iff (HasLineDerivAt 𝕜 f f' x v) (Asymptotics.IsLittleO (nhds 0) (fun t => HSub.hSub (HSub.hSub (f (HAdd.hAdd x (HSMul.hSMul t v))) (f x)) (HSMul.hSMul t f')) fun t => t)","decl":"theorem hasLineDerivAt_iff_isLittleO_nhds_zero :\n    HasLineDerivAt 𝕜 f f' x v ↔\n      (fun t : 𝕜 => f (x + t • v) - f x - t • f') =o[𝓝 0] fun t => t := by\n  simp only [HasLineDerivAt, hasDerivAt_iff_isLittleO_nhds_zero, zero_add, zero_smul, add_zero]\n\n"}
{"name":"HasLineDerivAt.unique","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf₀' f₁' : F\nx v : E\nh₀ : HasLineDerivAt 𝕜 f f₀' x v\nh₁ : HasLineDerivAt 𝕜 f f₁' x v\n⊢ Eq f₀' f₁'","decl":"theorem HasLineDerivAt.unique (h₀ : HasLineDerivAt 𝕜 f f₀' x v) (h₁ : HasLineDerivAt 𝕜 f f₁' x v) :\n    f₀' = f₁' :=\n  HasDerivAt.unique h₀ h₁\n\n"}
{"name":"HasLineDerivAt.lineDeriv","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\nh : HasLineDerivAt 𝕜 f f' x v\n⊢ Eq (lineDeriv 𝕜 f x v) f'","decl":"protected theorem HasLineDerivAt.lineDeriv (h : HasLineDerivAt 𝕜 f f' x v) :\n    lineDeriv 𝕜 f x v = f' := by\n  rw [h.unique h.lineDifferentiableAt.hasLineDerivAt]\n\n"}
{"name":"lineDifferentiableWithinAt_univ","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\n⊢ Iff (LineDifferentiableWithinAt 𝕜 f Set.univ x v) (LineDifferentiableAt 𝕜 f x v)","decl":"theorem lineDifferentiableWithinAt_univ :\n    LineDifferentiableWithinAt 𝕜 f univ x v ↔ LineDifferentiableAt 𝕜 f x v := by\n  simp only [LineDifferentiableWithinAt, LineDifferentiableAt, preimage_univ,\n    differentiableWithinAt_univ]\n\n"}
{"name":"LineDifferentiableAt.lineDifferentiableWithinAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nh : LineDifferentiableAt 𝕜 f x v\n⊢ LineDifferentiableWithinAt 𝕜 f s x v","decl":"theorem LineDifferentiableAt.lineDifferentiableWithinAt (h : LineDifferentiableAt 𝕜 f x v) :\n    LineDifferentiableWithinAt 𝕜 f s x v :=\n  (differentiableWithinAt_univ.2 h).mono (subset_univ _)\n\n"}
{"name":"lineDerivWithin_univ","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\n⊢ Eq (lineDerivWithin 𝕜 f Set.univ x v) (lineDeriv 𝕜 f x v)","decl":"@[simp]\ntheorem lineDerivWithin_univ : lineDerivWithin 𝕜 f univ x v = lineDeriv 𝕜 f x v := by\n  simp [lineDerivWithin, lineDeriv]\n\n"}
{"name":"LineDifferentiableWithinAt.mono","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns t : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f t x v\nst : HasSubset.Subset s t\n⊢ LineDifferentiableWithinAt 𝕜 f s x v","decl":"theorem LineDifferentiableWithinAt.mono (h : LineDifferentiableWithinAt 𝕜 f t x v) (st : s ⊆ t) :\n    LineDifferentiableWithinAt 𝕜 f s x v :=\n  (h.hasLineDerivWithinAt.mono st).lineDifferentiableWithinAt\n\n"}
{"name":"HasLineDerivWithinAt.congr_mono","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\nf' : F\ns t : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' s x v\nht : Set.EqOn f₁ f t\nhx : Eq (f₁ x) (f x)\nh₁ : HasSubset.Subset t s\n⊢ HasLineDerivWithinAt 𝕜 f₁ f' t x v","decl":"theorem HasLineDerivWithinAt.congr_mono (h : HasLineDerivWithinAt 𝕜 f f' s x v) (ht : EqOn f₁ f t)\n    (hx : f₁ x = f x) (h₁ : t ⊆ s) : HasLineDerivWithinAt 𝕜 f₁ f' t x v :=\n  HasDerivWithinAt.congr_mono h (fun _ hy ↦ ht hy) (by simpa using hx) (preimage_mono h₁)\n\n"}
{"name":"HasLineDerivWithinAt.congr","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\nf' : F\ns : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' s x v\nhs : Set.EqOn f₁ f s\nhx : Eq (f₁ x) (f x)\n⊢ HasLineDerivWithinAt 𝕜 f₁ f' s x v","decl":"theorem HasLineDerivWithinAt.congr (h : HasLineDerivWithinAt 𝕜 f f' s x v) (hs : EqOn f₁ f s)\n    (hx : f₁ x = f x) : HasLineDerivWithinAt 𝕜 f₁ f' s x v :=\n  h.congr_mono hs hx (Subset.refl _)\n\n"}
{"name":"HasLineDerivWithinAt.congr'","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\nf' : F\ns : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' s x v\nhs : Set.EqOn f₁ f s\nhx : Membership.mem s x\n⊢ HasLineDerivWithinAt 𝕜 f₁ f' s x v","decl":"theorem HasLineDerivWithinAt.congr' (h : HasLineDerivWithinAt 𝕜 f f' s x v)\n    (hs : EqOn f₁ f s) (hx : x ∈ s) :\n    HasLineDerivWithinAt 𝕜 f₁ f' s x v :=\n  h.congr hs (hs hx)\n\n"}
{"name":"LineDifferentiableWithinAt.congr_mono","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\ns t : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nht : Set.EqOn f₁ f t\nhx : Eq (f₁ x) (f x)\nh₁ : HasSubset.Subset t s\n⊢ LineDifferentiableWithinAt 𝕜 f₁ t x v","decl":"theorem LineDifferentiableWithinAt.congr_mono (h : LineDifferentiableWithinAt 𝕜 f s x v)\n    (ht : EqOn f₁ f t) (hx : f₁ x = f x) (h₁ : t ⊆ s) :\n    LineDifferentiableWithinAt 𝕜 f₁ t x v :=\n  (HasLineDerivWithinAt.congr_mono h.hasLineDerivWithinAt ht hx h₁).differentiableWithinAt\n\n"}
{"name":"LineDifferentiableWithinAt.congr","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\ns : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nht : ∀ (x : E), Membership.mem s x → Eq (f₁ x) (f x)\nhx : Eq (f₁ x) (f x)\n⊢ LineDifferentiableWithinAt 𝕜 f₁ s x v","decl":"theorem LineDifferentiableWithinAt.congr (h : LineDifferentiableWithinAt 𝕜 f s x v)\n    (ht : ∀ x ∈ s, f₁ x = f x) (hx : f₁ x = f x) :\n    LineDifferentiableWithinAt 𝕜 f₁ s x v :=\n  LineDifferentiableWithinAt.congr_mono h ht hx (Subset.refl _)\n\n"}
{"name":"lineDerivWithin_congr","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\ns : Set E\nx v : E\nhs : Set.EqOn f₁ f s\nhx : Eq (f₁ x) (f x)\n⊢ Eq (lineDerivWithin 𝕜 f₁ s x v) (lineDerivWithin 𝕜 f s x v)","decl":"theorem lineDerivWithin_congr (hs : EqOn f₁ f s) (hx : f₁ x = f x) :\n    lineDerivWithin 𝕜 f₁ s x v = lineDerivWithin 𝕜 f s x v :=\n  derivWithin_congr (fun _ hy ↦ hs hy) (by simpa using hx)\n\n"}
{"name":"lineDerivWithin_congr'","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf f₁ : E → F\ns : Set E\nx v : E\nhs : Set.EqOn f₁ f s\nhx : Membership.mem s x\n⊢ Eq (lineDerivWithin 𝕜 f₁ s x v) (lineDerivWithin 𝕜 f s x v)","decl":"theorem lineDerivWithin_congr' (hs : EqOn f₁ f s) (hx : x ∈ s) :\n    lineDerivWithin 𝕜 f₁ s x v = lineDerivWithin 𝕜 f s x v :=\n  lineDerivWithin_congr hs (hs hx)\n\n"}
{"name":"hasLineDerivAt_iff_tendsto_slope_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\n⊢ Iff (HasLineDerivAt 𝕜 f f' x v) (Filter.Tendsto (fun t => HSMul.hSMul (Inv.inv t) (HSub.hSub (f (HAdd.hAdd x (HSMul.hSMul t v))) (f x))) (nhdsWithin 0 (HasCompl.compl (Singleton.singleton 0))) (nhds f'))","decl":"theorem hasLineDerivAt_iff_tendsto_slope_zero :\n    HasLineDerivAt 𝕜 f f' x v ↔\n      Tendsto (fun (t : 𝕜) ↦ t⁻¹ • (f (x + t • v) - f x)) (𝓝[≠] 0) (𝓝 f') := by\n  simp only [HasLineDerivAt, hasDerivAt_iff_tendsto_slope_zero, zero_add,\n    zero_smul, add_zero]\n\n"}
{"name":"HasLineDerivAt.tendsto_slope_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\na✝ : HasLineDerivAt 𝕜 f f' x v\n⊢ Filter.Tendsto (fun t => HSMul.hSMul (Inv.inv t) (HSub.hSub (f (HAdd.hAdd x (HSMul.hSMul t v))) (f x))) (nhdsWithin 0 (HasCompl.compl (Singleton.singleton 0))) (nhds f')","decl":"alias ⟨HasLineDerivAt.tendsto_slope_zero, _⟩ := hasLineDerivAt_iff_tendsto_slope_zero\n\n"}
{"name":"HasLineDerivAt.tendsto_slope_zero_right","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nE : Type u_3\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\ninst✝ : PartialOrder 𝕜\nh : HasLineDerivAt 𝕜 f f' x v\n⊢ Filter.Tendsto (fun t => HSMul.hSMul (Inv.inv t) (HSub.hSub (f (HAdd.hAdd x (HSMul.hSMul t v))) (f x))) (nhdsWithin 0 (Set.Ioi 0)) (nhds f')","decl":"theorem HasLineDerivAt.tendsto_slope_zero_right [PartialOrder 𝕜] (h : HasLineDerivAt 𝕜 f f' x v) :\n    Tendsto (fun (t : 𝕜) ↦ t⁻¹ • (f (x + t • v) - f x)) (𝓝[>] 0) (𝓝 f') :=\n  h.tendsto_slope_zero.mono_left (nhdsGT_le_nhdsNE 0)\n\n"}
{"name":"HasLineDerivAt.tendsto_slope_zero_left","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁵ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝⁴ : NormedAddCommGroup F\ninst✝³ : NormedSpace 𝕜 F\nE : Type u_3\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\nf : E → F\nf' : F\nx v : E\ninst✝ : PartialOrder 𝕜\nh : HasLineDerivAt 𝕜 f f' x v\n⊢ Filter.Tendsto (fun t => HSMul.hSMul (Inv.inv t) (HSub.hSub (f (HAdd.hAdd x (HSMul.hSMul t v))) (f x))) (nhdsWithin 0 (Set.Iio 0)) (nhds f')","decl":"theorem HasLineDerivAt.tendsto_slope_zero_left [PartialOrder 𝕜] (h : HasLineDerivAt 𝕜 f f' x v) :\n    Tendsto (fun (t : 𝕜) ↦ t⁻¹ • (f (x + t • v) - f x)) (𝓝[<] 0) (𝓝 f') :=\n  h.tendsto_slope_zero.mono_left (nhdsLT_le_nhdsNE 0)\n\n"}
{"name":"HasLineDerivWithinAt.hasLineDerivAt'","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nf' : F\ns : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' s x v\nhs : Filter.Eventually (fun t => Membership.mem s (HAdd.hAdd x (HSMul.hSMul t v))) (nhds 0)\n⊢ HasLineDerivAt 𝕜 f f' x v","decl":"theorem HasLineDerivWithinAt.hasLineDerivAt'\n    (h : HasLineDerivWithinAt 𝕜 f f' s x v) (hs : ∀ᶠ t : 𝕜 in 𝓝 0, x + t • v ∈ s) :\n    HasLineDerivAt 𝕜 f f' x v :=\n  h.hasDerivAt hs\n\n"}
{"name":"HasLineDerivWithinAt.mono_of_mem_nhdsWithin","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\nf' : F\ns t : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' t x v\nhst : Membership.mem (nhdsWithin x s) t\n⊢ HasLineDerivWithinAt 𝕜 f f' s x v","decl":"theorem HasLineDerivWithinAt.mono_of_mem_nhdsWithin\n    (h : HasLineDerivWithinAt 𝕜 f f' t x v) (hst : t ∈ 𝓝[s] x) :\n    HasLineDerivWithinAt 𝕜 f f' s x v := by\n  apply HasDerivWithinAt.mono_of_mem_nhdsWithin h\n  apply ContinuousWithinAt.preimage_mem_nhdsWithin'' _ hst (by simp)\n  apply Continuous.continuousWithinAt; fun_prop\n\n"}
{"name":"HasLineDerivWithinAt.mono_of_mem","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\nf' : F\ns t : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' t x v\nhst : Membership.mem (nhdsWithin x s) t\n⊢ HasLineDerivWithinAt 𝕜 f f' s x v","decl":"@[deprecated (since := \"2024-10-31\")]\nalias HasLineDerivWithinAt.mono_of_mem := HasLineDerivWithinAt.mono_of_mem_nhdsWithin\n\n"}
{"name":"HasLineDerivWithinAt.hasLineDerivAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\nf' : F\ns : Set E\nx v : E\nh : HasLineDerivWithinAt 𝕜 f f' s x v\nhs : Membership.mem (nhds x) s\n⊢ HasLineDerivAt 𝕜 f f' x v","decl":"theorem HasLineDerivWithinAt.hasLineDerivAt\n    (h : HasLineDerivWithinAt 𝕜 f f' s x v) (hs : s ∈ 𝓝 x) :\n    HasLineDerivAt 𝕜 f f' x v :=\n  h.hasLineDerivAt' <| (Continuous.tendsto' (by fun_prop) 0 _ (by simp)).eventually hs\n\n"}
{"name":"LineDifferentiableWithinAt.lineDifferentiableAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nhs : Membership.mem (nhds x) s\n⊢ LineDifferentiableAt 𝕜 f x v","decl":"theorem LineDifferentiableWithinAt.lineDifferentiableAt (h : LineDifferentiableWithinAt 𝕜 f s x v)\n    (hs : s ∈ 𝓝 x) : LineDifferentiableAt 𝕜 f x v :=\n  (h.hasLineDerivWithinAt.hasLineDerivAt hs).lineDifferentiableAt\n\n"}
{"name":"HasFDerivWithinAt.hasLineDerivWithinAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns : Set E\nx : E\nL : ContinuousLinearMap (RingHom.id 𝕜) E F\nhf : HasFDerivWithinAt f L s x\nv : E\n⊢ HasLineDerivWithinAt 𝕜 f (L v) s x v","decl":"lemma HasFDerivWithinAt.hasLineDerivWithinAt (hf : HasFDerivWithinAt f L s x) (v : E) :\n    HasLineDerivWithinAt 𝕜 f (L v) s x v := by\n  let F := fun (t : 𝕜) ↦ x + t • v\n  rw [show x = F (0 : 𝕜) by simp [F]] at hf\n  have A : HasDerivWithinAt F (0 + (1 : 𝕜) • v) (F ⁻¹' s) 0 :=\n    ((hasDerivAt_const (0 : 𝕜) x).add ((hasDerivAt_id' (0 : 𝕜)).smul_const v)).hasDerivWithinAt\n  simp only [one_smul, zero_add] at A\n  exact hf.comp_hasDerivWithinAt (x := (0 : 𝕜)) A (mapsTo_preimage F s)\n\n"}
{"name":"HasFDerivAt.hasLineDerivAt","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\nx : E\nL : ContinuousLinearMap (RingHom.id 𝕜) E F\nhf : HasFDerivAt f L x\nv : E\n⊢ HasLineDerivAt 𝕜 f (L v) x v","decl":"lemma HasFDerivAt.hasLineDerivAt (hf : HasFDerivAt f L x) (v : E) :\n    HasLineDerivAt 𝕜 f (L v) x v := by\n  rw [← hasLineDerivWithinAt_univ]\n  exact hf.hasFDerivWithinAt.hasLineDerivWithinAt v\n\n"}
{"name":"DifferentiableAt.lineDeriv_eq_fderiv","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\nx v : E\nhf : DifferentiableAt 𝕜 f x\n⊢ Eq (lineDeriv 𝕜 f x v) ((fderiv 𝕜 f x) v)","decl":"lemma DifferentiableAt.lineDeriv_eq_fderiv (hf : DifferentiableAt 𝕜 f x) :\n    lineDeriv 𝕜 f x v = fderiv 𝕜 f x v :=\n  (hf.hasFDerivAt.hasLineDerivAt v).lineDeriv\n\n"}
{"name":"LineDifferentiableWithinAt.mono_of_mem_nhdsWithin","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns t : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nhst : Membership.mem (nhdsWithin x t) s\n⊢ LineDifferentiableWithinAt 𝕜 f t x v","decl":"theorem LineDifferentiableWithinAt.mono_of_mem_nhdsWithin (h : LineDifferentiableWithinAt 𝕜 f s x v)\n    (hst : s ∈ 𝓝[t] x) : LineDifferentiableWithinAt 𝕜 f t x v :=\n  (h.hasLineDerivWithinAt.mono_of_mem_nhdsWithin hst).lineDifferentiableWithinAt\n\n"}
{"name":"LineDifferentiableWithinAt.mono_of_mem","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns t : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nhst : Membership.mem (nhdsWithin x t) s\n⊢ LineDifferentiableWithinAt 𝕜 f t x v","decl":"@[deprecated (since := \"2024-10-31\")]\nalias LineDifferentiableWithinAt.mono_of_mem := LineDifferentiableWithinAt.mono_of_mem_nhdsWithin\n\n"}
{"name":"lineDerivWithin_of_mem_nhds","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns : Set E\nx v : E\nh : Membership.mem (nhds x) s\n⊢ Eq (lineDerivWithin 𝕜 f s x v) (lineDeriv 𝕜 f x v)","decl":"theorem lineDerivWithin_of_mem_nhds (h : s ∈ 𝓝 x) :\n    lineDerivWithin 𝕜 f s x v = lineDeriv 𝕜 f x v := by\n  apply derivWithin_of_mem_nhds\n  apply (Continuous.continuousAt _).preimage_mem_nhds (by simpa using h)\n  fun_prop\n\n"}
{"name":"lineDerivWithin_of_isOpen","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns : Set E\nx v : E\nhs : IsOpen s\nhx : Membership.mem s x\n⊢ Eq (lineDerivWithin 𝕜 f s x v) (lineDeriv 𝕜 f x v)","decl":"theorem lineDerivWithin_of_isOpen (hs : IsOpen s) (hx : x ∈ s) :\n    lineDerivWithin 𝕜 f s x v = lineDeriv 𝕜 f x v :=\n  lineDerivWithin_of_mem_nhds (hs.mem_nhds hx)\n\n"}
{"name":"hasLineDerivWithinAt_congr_set","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\nf' : F\ns t : Set E\nx v : E\nh : (nhds x).EventuallyEq s t\n⊢ Iff (HasLineDerivWithinAt 𝕜 f f' s x v) (HasLineDerivWithinAt 𝕜 f f' t x v)","decl":"theorem hasLineDerivWithinAt_congr_set (h : s =ᶠ[𝓝 x] t) :\n    HasLineDerivWithinAt 𝕜 f f' s x v ↔ HasLineDerivWithinAt 𝕜 f f' t x v := by\n  apply hasDerivWithinAt_congr_set\n  let F := fun (t : 𝕜) ↦ x + t • v\n  have B : ContinuousAt F 0 := by apply Continuous.continuousAt; fun_prop\n  have : s =ᶠ[𝓝 (F 0)] t := by convert h; simp [F]\n  exact B.preimage_mem_nhds this\n\n"}
{"name":"lineDifferentiableWithinAt_congr_set","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns t : Set E\nx v : E\nh : (nhds x).EventuallyEq s t\n⊢ Iff (LineDifferentiableWithinAt 𝕜 f s x v) (LineDifferentiableWithinAt 𝕜 f t x v)","decl":"theorem lineDifferentiableWithinAt_congr_set (h : s =ᶠ[𝓝 x] t) :\n    LineDifferentiableWithinAt 𝕜 f s x v ↔ LineDifferentiableWithinAt 𝕜 f t x v :=\n  ⟨fun h' ↦ ((hasLineDerivWithinAt_congr_set h).1\n    h'.hasLineDerivWithinAt).lineDifferentiableWithinAt,\n  fun h' ↦ ((hasLineDerivWithinAt_congr_set h.symm).1\n    h'.hasLineDerivWithinAt).lineDifferentiableWithinAt⟩\n\n"}
{"name":"lineDerivWithin_congr_set","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf : E → F\ns t : Set E\nx v : E\nh : (nhds x).EventuallyEq s t\n⊢ Eq (lineDerivWithin 𝕜 f s x v) (lineDerivWithin 𝕜 f t x v)","decl":"theorem lineDerivWithin_congr_set (h : s =ᶠ[𝓝 x] t) :\n    lineDerivWithin 𝕜 f s x v = lineDerivWithin 𝕜 f t x v := by\n  apply derivWithin_congr_set\n  let F := fun (t : 𝕜) ↦ x + t • v\n  have B : ContinuousAt F 0 := by apply Continuous.continuousAt; fun_prop\n  have : s =ᶠ[𝓝 (F 0)] t := by convert h; simp [F]\n  exact B.preimage_mem_nhds this\n\n"}
{"name":"Filter.EventuallyEq.hasLineDerivAt_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf₀ f₁ : E → F\nf' : F\nx v : E\nh : (nhds x).EventuallyEq f₀ f₁\n⊢ Iff (HasLineDerivAt 𝕜 f₀ f' x v) (HasLineDerivAt 𝕜 f₁ f' x v)","decl":"theorem Filter.EventuallyEq.hasLineDerivAt_iff (h : f₀ =ᶠ[𝓝 x] f₁) :\n    HasLineDerivAt 𝕜 f₀ f' x v ↔ HasLineDerivAt 𝕜 f₁ f' x v := by\n  apply hasDerivAt_iff\n  let F := fun (t : 𝕜) ↦ x + t • v\n  have B : ContinuousAt F 0 := by apply Continuous.continuousAt; fun_prop\n  have : f₀ =ᶠ[𝓝 (F 0)] f₁ := by convert h; simp [F]\n  exact B.preimage_mem_nhds this\n\n"}
{"name":"Filter.EventuallyEq.lineDifferentiableAt_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf₀ f₁ : E → F\nx v : E\nh : (nhds x).EventuallyEq f₀ f₁\n⊢ Iff (LineDifferentiableAt 𝕜 f₀ x v) (LineDifferentiableAt 𝕜 f₁ x v)","decl":"theorem Filter.EventuallyEq.lineDifferentiableAt_iff (h : f₀ =ᶠ[𝓝 x] f₁) :\n    LineDifferentiableAt 𝕜 f₀ x v ↔ LineDifferentiableAt 𝕜 f₁ x v :=\n  ⟨fun h' ↦ (h.hasLineDerivAt_iff.1 h'.hasLineDerivAt).lineDifferentiableAt,\n  fun h' ↦ (h.hasLineDerivAt_iff.2 h'.hasLineDerivAt).lineDifferentiableAt⟩\n\n"}
{"name":"Filter.EventuallyEq.hasLineDerivWithinAt_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf₀ f₁ : E → F\nf' : F\ns : Set E\nx v : E\nh : (nhdsWithin x s).EventuallyEq f₀ f₁\nhx : Eq (f₀ x) (f₁ x)\n⊢ Iff (HasLineDerivWithinAt 𝕜 f₀ f' s x v) (HasLineDerivWithinAt 𝕜 f₁ f' s x v)","decl":"theorem Filter.EventuallyEq.hasLineDerivWithinAt_iff (h : f₀ =ᶠ[𝓝[s] x] f₁) (hx : f₀ x = f₁ x) :\n    HasLineDerivWithinAt 𝕜 f₀ f' s x v ↔ HasLineDerivWithinAt 𝕜 f₁ f' s x v := by\n  apply hasDerivWithinAt_iff\n  · have A : Continuous (fun (t : 𝕜) ↦ x + t • v) := by fun_prop\n    exact A.continuousWithinAt.preimage_mem_nhdsWithin'' h (by simp)\n  · simpa using hx\n\n"}
{"name":"Filter.EventuallyEq.hasLineDerivWithinAt_iff_of_mem","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf₀ f₁ : E → F\nf' : F\ns : Set E\nx v : E\nh : (nhdsWithin x s).EventuallyEq f₀ f₁\nhx : Membership.mem s x\n⊢ Iff (HasLineDerivWithinAt 𝕜 f₀ f' s x v) (HasLineDerivWithinAt 𝕜 f₁ f' s x v)","decl":"theorem Filter.EventuallyEq.hasLineDerivWithinAt_iff_of_mem (h : f₀ =ᶠ[𝓝[s] x] f₁) (hx : x ∈ s) :\n    HasLineDerivWithinAt 𝕜 f₀ f' s x v ↔ HasLineDerivWithinAt 𝕜 f₁ f' s x v :=\n  h.hasLineDerivWithinAt_iff (h.eq_of_nhdsWithin hx)\n\n"}
{"name":"Filter.EventuallyEq.lineDifferentiableWithinAt_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf₀ f₁ : E → F\ns : Set E\nx v : E\nh : (nhdsWithin x s).EventuallyEq f₀ f₁\nhx : Eq (f₀ x) (f₁ x)\n⊢ Iff (LineDifferentiableWithinAt 𝕜 f₀ s x v) (LineDifferentiableWithinAt 𝕜 f₁ s x v)","decl":"theorem Filter.EventuallyEq.lineDifferentiableWithinAt_iff\n    (h : f₀ =ᶠ[𝓝[s] x] f₁) (hx : f₀ x = f₁ x) :\n    LineDifferentiableWithinAt 𝕜 f₀ s x v ↔ LineDifferentiableWithinAt 𝕜 f₁ s x v :=\n  ⟨fun h' ↦ ((h.hasLineDerivWithinAt_iff hx).1 h'.hasLineDerivWithinAt).lineDifferentiableWithinAt,\n  fun h' ↦ ((h.hasLineDerivWithinAt_iff hx).2 h'.hasLineDerivWithinAt).lineDifferentiableWithinAt⟩\n\n"}
{"name":"Filter.EventuallyEq.lineDifferentiableWithinAt_iff_of_mem","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf₀ f₁ : E → F\ns : Set E\nx v : E\nh : (nhdsWithin x s).EventuallyEq f₀ f₁\nhx : Membership.mem s x\n⊢ Iff (LineDifferentiableWithinAt 𝕜 f₀ s x v) (LineDifferentiableWithinAt 𝕜 f₁ s x v)","decl":"theorem Filter.EventuallyEq.lineDifferentiableWithinAt_iff_of_mem\n    (h : f₀ =ᶠ[𝓝[s] x] f₁) (hx : x ∈ s) :\n    LineDifferentiableWithinAt 𝕜 f₀ s x v ↔ LineDifferentiableWithinAt 𝕜 f₁ s x v :=\n  h.lineDifferentiableWithinAt_iff (h.eq_of_nhdsWithin hx)\n\n"}
{"name":"HasLineDerivWithinAt.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\nf' : F\ns : Set E\nx v : E\nhf : HasLineDerivWithinAt 𝕜 f f' s x v\nh'f : (nhdsWithin x s).EventuallyEq f₁ f\nhx : Eq (f₁ x) (f x)\n⊢ HasLineDerivWithinAt 𝕜 f₁ f' s x v","decl":"lemma HasLineDerivWithinAt.congr_of_eventuallyEq (hf : HasLineDerivWithinAt 𝕜 f f' s x v)\n    (h'f : f₁ =ᶠ[𝓝[s] x] f) (hx : f₁ x = f x) : HasLineDerivWithinAt 𝕜 f₁ f' s x v := by\n  apply HasDerivWithinAt.congr_of_eventuallyEq hf _ (by simp [hx])\n  have A : Continuous (fun (t : 𝕜) ↦ x + t • v) := by fun_prop\n  exact A.continuousWithinAt.preimage_mem_nhdsWithin'' h'f (by simp)\n\n"}
{"name":"HasLineDerivAt.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\nf' : F\nx v : E\nh : HasLineDerivAt 𝕜 f f' x v\nh₁ : (nhds x).EventuallyEq f₁ f\n⊢ HasLineDerivAt 𝕜 f₁ f' x v","decl":"theorem HasLineDerivAt.congr_of_eventuallyEq (h : HasLineDerivAt 𝕜 f f' x v) (h₁ : f₁ =ᶠ[𝓝 x] f) :\n    HasLineDerivAt 𝕜 f₁ f' x v := by\n  apply HasDerivAt.congr_of_eventuallyEq h\n  let F := fun (t : 𝕜) ↦ x + t • v\n  rw [show x = F 0 by simp [F]] at h₁\n  exact (Continuous.continuousAt (by fun_prop)).preimage_mem_nhds h₁\n\n"}
{"name":"LineDifferentiableWithinAt.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\ns : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nh₁ : (nhdsWithin x s).EventuallyEq f₁ f\nhx : Eq (f₁ x) (f x)\n⊢ LineDifferentiableWithinAt 𝕜 f₁ s x v","decl":"theorem LineDifferentiableWithinAt.congr_of_eventuallyEq (h : LineDifferentiableWithinAt 𝕜 f s x v)\n    (h₁ : f₁ =ᶠ[𝓝[s] x] f) (hx : f₁ x = f x) : LineDifferentiableWithinAt 𝕜 f₁ s x v :=\n  (h.hasLineDerivWithinAt.congr_of_eventuallyEq h₁ hx).differentiableWithinAt\n\n"}
{"name":"LineDifferentiableAt.congr_of_eventuallyEq","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\nx v : E\nh : LineDifferentiableAt 𝕜 f x v\nhL : (nhds x).EventuallyEq f₁ f\n⊢ LineDifferentiableAt 𝕜 f₁ x v","decl":"theorem LineDifferentiableAt.congr_of_eventuallyEq\n    (h : LineDifferentiableAt 𝕜 f x v) (hL : f₁ =ᶠ[𝓝 x] f) :\n    LineDifferentiableAt 𝕜 f₁ x v := by\n  apply DifferentiableAt.congr_of_eventuallyEq h\n  let F := fun (t : 𝕜) ↦ x + t • v\n  rw [show x = F 0 by simp [F]] at hL\n  exact (Continuous.continuousAt (by fun_prop)).preimage_mem_nhds hL\n\n"}
{"name":"Filter.EventuallyEq.lineDerivWithin_eq","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\ns : Set E\nx v : E\nhs : (nhdsWithin x s).EventuallyEq f₁ f\nhx : Eq (f₁ x) (f x)\n⊢ Eq (lineDerivWithin 𝕜 f₁ s x v) (lineDerivWithin 𝕜 f s x v)","decl":"theorem Filter.EventuallyEq.lineDerivWithin_eq (hs : f₁ =ᶠ[𝓝[s] x] f) (hx : f₁ x = f x) :\n    lineDerivWithin 𝕜 f₁ s x v = lineDerivWithin 𝕜 f s x v := by\n  apply derivWithin_eq ?_ (by simpa using hx)\n  have A : Continuous (fun (t : 𝕜) ↦ x + t • v) := by fun_prop\n  exact A.continuousWithinAt.preimage_mem_nhdsWithin'' hs (by simp)\n\n"}
{"name":"Filter.EventuallyEq.lineDerivWithin_eq_nhds","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\ns : Set E\nx v : E\nh : (nhds x).EventuallyEq f₁ f\n⊢ Eq (lineDerivWithin 𝕜 f₁ s x v) (lineDerivWithin 𝕜 f s x v)","decl":"theorem Filter.EventuallyEq.lineDerivWithin_eq_nhds (h : f₁ =ᶠ[𝓝 x] f) :\n    lineDerivWithin 𝕜 f₁ s x v = lineDerivWithin 𝕜 f s x v :=\n  (h.filter_mono nhdsWithin_le_nhds).lineDerivWithin_eq h.self_of_nhds\n\n"}
{"name":"Filter.EventuallyEq.lineDeriv_eq","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nf f₁ : E → F\nx v : E\nh : (nhds x).EventuallyEq f₁ f\n⊢ Eq (lineDeriv 𝕜 f₁ x v) (lineDeriv 𝕜 f x v)","decl":"theorem Filter.EventuallyEq.lineDeriv_eq (h : f₁ =ᶠ[𝓝 x] f) :\n    lineDeriv 𝕜 f₁ x v = lineDeriv 𝕜 f x v := by\n  rw [← lineDerivWithin_univ, ← lineDerivWithin_univ, h.lineDerivWithin_eq_nhds]\n\n"}
{"name":"HasLineDerivAt.le_of_lip'","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nv : E\nf : E → F\nf' : F\nx₀ : E\nhf : HasLineDerivAt 𝕜 f f' x₀ v\nC : Real\nhC₀ : LE.le 0 C\nhlip : Filter.Eventually (fun x => LE.le (Norm.norm (HSub.hSub (f x) (f x₀))) (HMul.hMul C (Norm.norm (HSub.hSub x x₀)))) (nhds x₀)\n⊢ LE.le (Norm.norm f') (HMul.hMul C (Norm.norm v))","decl":"/-- Converse to the mean value inequality: if `f` is line differentiable at `x₀` and `C`-lipschitz\non a neighborhood of `x₀` then its line derivative at `x₀` in the direction `v` has norm\nbounded by `C * ‖v‖`. This version only assumes that `‖f x - f x₀‖ ≤ C * ‖x - x₀‖` in a\nneighborhood of `x`. -/\ntheorem HasLineDerivAt.le_of_lip' {f : E → F} {f' : F} {x₀ : E} (hf : HasLineDerivAt 𝕜 f f' x₀ v)\n    {C : ℝ} (hC₀ : 0 ≤ C) (hlip : ∀ᶠ x in 𝓝 x₀, ‖f x - f x₀‖ ≤ C * ‖x - x₀‖) :\n    ‖f'‖ ≤ C * ‖v‖ := by\n  apply HasDerivAt.le_of_lip' hf (by positivity)\n  have A : Continuous (fun (t : 𝕜) ↦ x₀ + t • v) := by fun_prop\n  have : ∀ᶠ x in 𝓝 (x₀ + (0 : 𝕜) • v), ‖f x - f x₀‖ ≤ C * ‖x - x₀‖ := by simpa using hlip\n  filter_upwards [(A.continuousAt (x := 0)).preimage_mem_nhds this] with t ht\n  simp only [preimage_setOf_eq, add_sub_cancel_left, norm_smul, mem_setOf_eq, mul_comm (‖t‖)] at ht\n  simpa [mul_assoc] using ht\n\n"}
{"name":"HasLineDerivAt.le_of_lipschitzOn","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nv : E\nf : E → F\nf' : F\nx₀ : E\nhf : HasLineDerivAt 𝕜 f f' x₀ v\ns : Set E\nhs : Membership.mem (nhds x₀) s\nC : NNReal\nhlip : LipschitzOnWith C f s\n⊢ LE.le (Norm.norm f') (HMul.hMul (↑C) (Norm.norm v))","decl":"/-- Converse to the mean value inequality: if `f` is line differentiable at `x₀` and `C`-lipschitz\non a neighborhood of `x₀` then its line derivative at `x₀` in the direction `v` has norm\nbounded by `C * ‖v‖`. This version only assumes that `‖f x - f x₀‖ ≤ C * ‖x - x₀‖` in a\nneighborhood of `x`. -/\ntheorem HasLineDerivAt.le_of_lipschitzOn\n    {f : E → F} {f' : F} {x₀ : E} (hf : HasLineDerivAt 𝕜 f f' x₀ v)\n    {s : Set E} (hs : s ∈ 𝓝 x₀) {C : ℝ≥0} (hlip : LipschitzOnWith C f s) :\n    ‖f'‖ ≤ C * ‖v‖ := by\n  refine hf.le_of_lip' C.coe_nonneg ?_\n  filter_upwards [hs] with x hx using hlip.norm_sub_le hx (mem_of_mem_nhds hs)\n\n"}
{"name":"HasLineDerivAt.le_of_lipschitz","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nv : E\nf : E → F\nf' : F\nx₀ : E\nhf : HasLineDerivAt 𝕜 f f' x₀ v\nC : NNReal\nhlip : LipschitzWith C f\n⊢ LE.le (Norm.norm f') (HMul.hMul (↑C) (Norm.norm v))","decl":"/-- Converse to the mean value inequality: if `f` is line differentiable at `x₀` and `C`-lipschitz\nthen its line derivative at `x₀` in the direction `v` has norm bounded by `C * ‖v‖`. -/\ntheorem HasLineDerivAt.le_of_lipschitz\n    {f : E → F} {f' : F} {x₀ : E} (hf : HasLineDerivAt 𝕜 f f' x₀ v)\n    {C : ℝ≥0} (hlip : LipschitzWith C f) : ‖f'‖ ≤ C * ‖v‖ :=\n  hf.le_of_lipschitzOn univ_mem (lipschitzOnWith_univ.2 hlip)\n\n"}
{"name":"norm_lineDeriv_le_of_lip'","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nv : E\nf : E → F\nx₀ : E\nC : Real\nhC₀ : LE.le 0 C\nhlip : Filter.Eventually (fun x => LE.le (Norm.norm (HSub.hSub (f x) (f x₀))) (HMul.hMul C (Norm.norm (HSub.hSub x x₀)))) (nhds x₀)\n⊢ LE.le (Norm.norm (lineDeriv 𝕜 f x₀ v)) (HMul.hMul C (Norm.norm v))","decl":"/-- Converse to the mean value inequality: if `f` is `C`-lipschitz\non a neighborhood of `x₀` then its line derivative at `x₀` in the direction `v` has norm\nbounded by `C * ‖v‖`. This version only assumes that `‖f x - f x₀‖ ≤ C * ‖x - x₀‖` in a\nneighborhood of `x`.\nVersion using `lineDeriv`. -/\ntheorem norm_lineDeriv_le_of_lip' {f : E → F} {x₀ : E}\n    {C : ℝ} (hC₀ : 0 ≤ C) (hlip : ∀ᶠ x in 𝓝 x₀, ‖f x - f x₀‖ ≤ C * ‖x - x₀‖) :\n    ‖lineDeriv 𝕜 f x₀ v‖ ≤ C * ‖v‖ := by\n  apply norm_deriv_le_of_lip' (by positivity)\n  have A : Continuous (fun (t : 𝕜) ↦ x₀ + t • v) := by fun_prop\n  have : ∀ᶠ x in 𝓝 (x₀ + (0 : 𝕜) • v), ‖f x - f x₀‖ ≤ C * ‖x - x₀‖ := by simpa using hlip\n  filter_upwards [(A.continuousAt (x := 0)).preimage_mem_nhds this] with t ht\n  simp only [preimage_setOf_eq, add_sub_cancel_left, norm_smul, mem_setOf_eq, mul_comm (‖t‖)] at ht\n  simpa [mul_assoc] using ht\n\n"}
{"name":"norm_lineDeriv_le_of_lipschitzOn","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nv : E\nf : E → F\nx₀ : E\ns : Set E\nhs : Membership.mem (nhds x₀) s\nC : NNReal\nhlip : LipschitzOnWith C f s\n⊢ LE.le (Norm.norm (lineDeriv 𝕜 f x₀ v)) (HMul.hMul (↑C) (Norm.norm v))","decl":"/-- Converse to the mean value inequality: if `f` is `C`-lipschitz on a neighborhood of `x₀`\nthen its line derivative at `x₀` in the direction `v` has norm bounded by `C * ‖v‖`.\nVersion using `lineDeriv`. -/\ntheorem norm_lineDeriv_le_of_lipschitzOn {f : E → F} {x₀ : E} {s : Set E} (hs : s ∈ 𝓝 x₀)\n    {C : ℝ≥0} (hlip : LipschitzOnWith C f s) : ‖lineDeriv 𝕜 f x₀ v‖ ≤ C * ‖v‖ := by\n  refine norm_lineDeriv_le_of_lip' 𝕜 C.coe_nonneg ?_\n  filter_upwards [hs] with x hx using hlip.norm_sub_le hx (mem_of_mem_nhds hs)\n\n"}
{"name":"norm_lineDeriv_le_of_lipschitz","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : NormedAddCommGroup E\ninst✝ : NormedSpace 𝕜 E\nv : E\nf : E → F\nx₀ : E\nC : NNReal\nhlip : LipschitzWith C f\n⊢ LE.le (Norm.norm (lineDeriv 𝕜 f x₀ v)) (HMul.hMul (↑C) (Norm.norm v))","decl":"/-- Converse to the mean value inequality: if `f` is `C`-lipschitz then\nits line derivative at `x₀` in the direction `v` has norm bounded by `C * ‖v‖`.\nVersion using `lineDeriv`. -/\ntheorem norm_lineDeriv_le_of_lipschitz {f : E → F} {x₀ : E}\n    {C : ℝ≥0} (hlip : LipschitzWith C f) : ‖lineDeriv 𝕜 f x₀ v‖ ≤ C * ‖v‖ :=\n  norm_lineDeriv_le_of_lipschitzOn 𝕜 univ_mem (lipschitzOnWith_univ.2 hlip)\n\n"}
{"name":"hasLineDerivWithinAt_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx : E\n⊢ HasLineDerivWithinAt 𝕜 f 0 s x 0","decl":"theorem hasLineDerivWithinAt_zero : HasLineDerivWithinAt 𝕜 f 0 s x 0 := by\n  simp [HasLineDerivWithinAt, hasDerivWithinAt_const]\n\n"}
{"name":"hasLineDerivAt_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx : E\n⊢ HasLineDerivAt 𝕜 f 0 x 0","decl":"theorem hasLineDerivAt_zero : HasLineDerivAt 𝕜 f 0 x 0 := by\n  simp [HasLineDerivAt, hasDerivAt_const]\n\n"}
{"name":"lineDifferentiableWithinAt_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx : E\n⊢ LineDifferentiableWithinAt 𝕜 f s x 0","decl":"theorem lineDifferentiableWithinAt_zero : LineDifferentiableWithinAt 𝕜 f s x 0 :=\n  hasLineDerivWithinAt_zero.lineDifferentiableWithinAt\n\n"}
{"name":"lineDifferentiableAt_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx : E\n⊢ LineDifferentiableAt 𝕜 f x 0","decl":"theorem lineDifferentiableAt_zero : LineDifferentiableAt 𝕜 f x 0 :=\n  hasLineDerivAt_zero.lineDifferentiableAt\n\n"}
{"name":"lineDeriv_zero","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx : E\n⊢ Eq (lineDeriv 𝕜 f x 0) 0","decl":"theorem lineDeriv_zero : lineDeriv 𝕜 f x 0 = 0 :=\n  hasLineDerivAt_zero.lineDeriv\n\n"}
{"name":"HasLineDerivAt.of_comp","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nE : Type u_3\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\nE' : Type u_4\ninst✝¹ : AddCommGroup E'\ninst✝ : Module 𝕜 E'\nf : E → F\nf' : F\nx : E'\nL : LinearMap (RingHom.id 𝕜) E' E\nv : E'\nhf : HasLineDerivAt 𝕜 (Function.comp f ⇑L) f' x v\n⊢ HasLineDerivAt 𝕜 f f' (L x) (L v)","decl":"theorem HasLineDerivAt.of_comp {v : E'} (hf : HasLineDerivAt 𝕜 (f ∘ L) f' x v) :\n    HasLineDerivAt 𝕜 f f' (L x) (L v) := by\n  simpa [HasLineDerivAt] using hf\n\n"}
{"name":"LineDifferentiableAt.of_comp","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁶ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝⁵ : NormedAddCommGroup F\ninst✝⁴ : NormedSpace 𝕜 F\nE : Type u_3\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\nE' : Type u_4\ninst✝¹ : AddCommGroup E'\ninst✝ : Module 𝕜 E'\nf : E → F\nx : E'\nL : LinearMap (RingHom.id 𝕜) E' E\nv : E'\nhf : LineDifferentiableAt 𝕜 (Function.comp f ⇑L) x v\n⊢ LineDifferentiableAt 𝕜 f (L x) (L v)","decl":"theorem LineDifferentiableAt.of_comp {v : E'} (hf : LineDifferentiableAt 𝕜 (f ∘ L) x v) :\n    LineDifferentiableAt 𝕜 f (L x) (L v) :=\n  hf.hasLineDerivAt.of_comp.lineDifferentiableAt\n\n"}
{"name":"HasLineDerivWithinAt.smul","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nf' : F\nh : HasLineDerivWithinAt 𝕜 f f' s x v\nc : 𝕜\n⊢ HasLineDerivWithinAt 𝕜 f (HSMul.hSMul c f') s x (HSMul.hSMul c v)","decl":"theorem HasLineDerivWithinAt.smul (h : HasLineDerivWithinAt 𝕜 f f' s x v) (c : 𝕜) :\n    HasLineDerivWithinAt 𝕜 f (c • f') s x (c • v) := by\n  simp only [HasLineDerivWithinAt] at h ⊢\n  let g := fun (t : 𝕜) ↦ c • t\n  let s' := (fun (t : 𝕜) ↦ x + t • v) ⁻¹' s\n  have A : HasDerivAt g c 0 := by simpa using (hasDerivAt_id (0 : 𝕜)).const_smul c\n  have B : HasDerivWithinAt (fun t ↦ f (x + t • v)) f' s' (g 0) := by simpa [g] using h\n  have Z := B.scomp (0 : 𝕜) A.hasDerivWithinAt (mapsTo_preimage g s')\n  simp only [g, s', Function.comp_def, smul_eq_mul, mul_comm c, ← smul_smul] at Z\n  convert Z\n  ext t\n  simp [← smul_smul]\n\n"}
{"name":"hasLineDerivWithinAt_smul_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nf' : F\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (HasLineDerivWithinAt 𝕜 f (HSMul.hSMul c f') s x (HSMul.hSMul c v)) (HasLineDerivWithinAt 𝕜 f f' s x v)","decl":"theorem hasLineDerivWithinAt_smul_iff {c : 𝕜} (hc : c ≠ 0) :\n    HasLineDerivWithinAt 𝕜 f (c • f') s x (c • v) ↔ HasLineDerivWithinAt 𝕜 f f' s x v :=\n  ⟨fun h ↦ by simpa [smul_smul, inv_mul_cancel₀ hc] using h.smul (c ⁻¹), fun h ↦ h.smul c⟩\n\n"}
{"name":"HasLineDerivAt.smul","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nf' : F\nh : HasLineDerivAt 𝕜 f f' x v\nc : 𝕜\n⊢ HasLineDerivAt 𝕜 f (HSMul.hSMul c f') x (HSMul.hSMul c v)","decl":"theorem HasLineDerivAt.smul (h : HasLineDerivAt 𝕜 f f' x v) (c : 𝕜) :\n    HasLineDerivAt 𝕜 f (c • f') x (c • v) := by\n  simp only [← hasLineDerivWithinAt_univ] at h ⊢\n  exact HasLineDerivWithinAt.smul h c\n\n"}
{"name":"hasLineDerivAt_smul_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nf' : F\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (HasLineDerivAt 𝕜 f (HSMul.hSMul c f') x (HSMul.hSMul c v)) (HasLineDerivAt 𝕜 f f' x v)","decl":"theorem hasLineDerivAt_smul_iff {c : 𝕜} (hc : c ≠ 0) :\n    HasLineDerivAt 𝕜 f (c • f') x (c • v) ↔ HasLineDerivAt 𝕜 f f' x v :=\n  ⟨fun h ↦ by simpa [smul_smul, inv_mul_cancel₀ hc] using h.smul (c ⁻¹), fun h ↦ h.smul c⟩\n\n"}
{"name":"LineDifferentiableWithinAt.smul","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nh : LineDifferentiableWithinAt 𝕜 f s x v\nc : 𝕜\n⊢ LineDifferentiableWithinAt 𝕜 f s x (HSMul.hSMul c v)","decl":"theorem LineDifferentiableWithinAt.smul (h : LineDifferentiableWithinAt 𝕜 f s x v) (c : 𝕜) :\n    LineDifferentiableWithinAt 𝕜 f s x (c • v) :=\n  (h.hasLineDerivWithinAt.smul c).lineDifferentiableWithinAt\n\n"}
{"name":"lineDifferentiableWithinAt_smul_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\ns : Set E\nx v : E\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (LineDifferentiableWithinAt 𝕜 f s x (HSMul.hSMul c v)) (LineDifferentiableWithinAt 𝕜 f s x v)","decl":"theorem lineDifferentiableWithinAt_smul_iff {c : 𝕜} (hc : c ≠ 0) :\n    LineDifferentiableWithinAt 𝕜 f s x (c • v) ↔ LineDifferentiableWithinAt 𝕜 f s x v :=\n  ⟨fun h ↦ by simpa [smul_smul, inv_mul_cancel₀ hc] using h.smul (c ⁻¹), fun h ↦ h.smul c⟩\n\n"}
{"name":"LineDifferentiableAt.smul","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nh : LineDifferentiableAt 𝕜 f x v\nc : 𝕜\n⊢ LineDifferentiableAt 𝕜 f x (HSMul.hSMul c v)","decl":"theorem LineDifferentiableAt.smul (h : LineDifferentiableAt 𝕜 f x v) (c : 𝕜) :\n    LineDifferentiableAt 𝕜 f x (c • v) :=\n  (h.hasLineDerivAt.smul c).lineDifferentiableAt\n\n"}
{"name":"lineDifferentiableAt_smul_iff","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nc : 𝕜\nhc : Ne c 0\n⊢ Iff (LineDifferentiableAt 𝕜 f x (HSMul.hSMul c v)) (LineDifferentiableAt 𝕜 f x v)","decl":"theorem lineDifferentiableAt_smul_iff {c : 𝕜} (hc : c ≠ 0) :\n    LineDifferentiableAt 𝕜 f x (c • v) ↔ LineDifferentiableAt 𝕜 f x v :=\n  ⟨fun h ↦ by simpa [smul_smul, inv_mul_cancel₀ hc] using h.smul (c ⁻¹), fun h ↦ h.smul c⟩\n\n"}
{"name":"lineDeriv_smul","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\nc : 𝕜\n⊢ Eq (lineDeriv 𝕜 f x (HSMul.hSMul c v)) (HSMul.hSMul c (lineDeriv 𝕜 f x v))","decl":"theorem lineDeriv_smul {c : 𝕜} : lineDeriv 𝕜 f x (c • v) = c • lineDeriv 𝕜 f x v := by\n  rcases eq_or_ne c 0 with rfl|hc\n  · simp [lineDeriv_zero]\n  by_cases H : LineDifferentiableAt 𝕜 f x v\n  · exact (H.hasLineDerivAt.smul c).lineDeriv\n  · have H' : ¬ (LineDifferentiableAt 𝕜 f x (c • v)) := by\n      simpa [lineDifferentiableAt_smul_iff hc] using H\n    simp [lineDeriv_zero_of_not_lineDifferentiableAt, H, H']\n\n"}
{"name":"lineDeriv_neg","module":"Mathlib.Analysis.Calculus.LineDeriv.Basic","initialProofState":"𝕜 : Type u_1\ninst✝⁴ : NontriviallyNormedField 𝕜\nF : Type u_2\ninst✝³ : NormedAddCommGroup F\ninst✝² : NormedSpace 𝕜 F\nE : Type u_3\ninst✝¹ : AddCommGroup E\ninst✝ : Module 𝕜 E\nf : E → F\nx v : E\n⊢ Eq (lineDeriv 𝕜 f x (Neg.neg v)) (Neg.neg (lineDeriv 𝕜 f x v))","decl":"theorem lineDeriv_neg : lineDeriv 𝕜 f x (-v) = - lineDeriv 𝕜 f x v := by\n  rw [← neg_one_smul (R := 𝕜) v, lineDeriv_smul, neg_one_smul]\n\n"}
