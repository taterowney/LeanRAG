{"name":"Rel.mem_interedges_iff","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\nx : Prod α β\n⊢ Iff (Membership.mem (Rel.interedges r s t) x) (And (Membership.mem s x.1) (And (Membership.mem t x.2) (r x.1 x.2)))","decl":"theorem mem_interedges_iff {x : α × β} : x ∈ interedges r s t ↔ x.1 ∈ s ∧ x.2 ∈ t ∧ r x.1 x.2 := by\n  rw [interedges, mem_filter, Finset.mem_product, and_assoc]\n\n"}
{"name":"Rel.mk_mem_interedges_iff","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\na : α\nb : β\n⊢ Iff (Membership.mem (Rel.interedges r s t) { fst := a, snd := b }) (And (Membership.mem s a) (And (Membership.mem t b) (r a b)))","decl":"theorem mk_mem_interedges_iff : (a, b) ∈ interedges r s t ↔ a ∈ s ∧ b ∈ t ∧ r a b :=\n  mem_interedges_iff\n\n"}
{"name":"Rel.interedges_empty_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\nt : Finset β\n⊢ Eq (Rel.interedges r EmptyCollection.emptyCollection t) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem interedges_empty_left (t : Finset β) : interedges r ∅ t = ∅ := by\n  rw [interedges, Finset.empty_product, filter_empty]\n\n"}
{"name":"Rel.interedges_mono","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns₁ s₂ : Finset α\nt₁ t₂ : Finset β\nhs : HasSubset.Subset s₂ s₁\nht : HasSubset.Subset t₂ t₁\n⊢ HasSubset.Subset (Rel.interedges r s₂ t₂) (Rel.interedges r s₁ t₁)","decl":"theorem interedges_mono (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) : interedges r s₂ t₂ ⊆ interedges r s₁ t₁ :=\n  fun x ↦ by\n    simp_rw [mem_interedges_iff]\n    exact fun h ↦ ⟨hs h.1, ht h.2.1, h.2.2⟩\n\n"}
{"name":"Rel.card_interedges_add_card_interedges_compl","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\n⊢ Eq (HAdd.hAdd (Rel.interedges r s t).card (Rel.interedges (fun x y => Not (r x y)) s t).card) (HMul.hMul s.card t.card)","decl":"theorem card_interedges_add_card_interedges_compl (s : Finset α) (t : Finset β) :\n    #(interedges r s t) + #(interedges (fun x y ↦ ¬r x y) s t) = #s * #t := by\n  classical\n  rw [← card_product, interedges, interedges, ← card_union_of_disjoint, filter_union_filter_neg_eq]\n  exact disjoint_filter.2 fun _ _ ↦ Classical.not_not.2\n\n"}
{"name":"Rel.interedges_disjoint_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns s' : Finset α\nhs : Disjoint s s'\nt : Finset β\n⊢ Disjoint (Rel.interedges r s t) (Rel.interedges r s' t)","decl":"theorem interedges_disjoint_left {s s' : Finset α} (hs : Disjoint s s') (t : Finset β) :\n    Disjoint (interedges r s t) (interedges r s' t) := by\n  rw [Finset.disjoint_left] at hs ⊢\n  intro _ hx hy\n  rw [mem_interedges_iff] at hx hy\n  exact hs hx.1 hy.1\n\n"}
{"name":"Rel.interedges_disjoint_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt t' : Finset β\nht : Disjoint t t'\n⊢ Disjoint (Rel.interedges r s t) (Rel.interedges r s t')","decl":"theorem interedges_disjoint_right (s : Finset α) {t t' : Finset β} (ht : Disjoint t t') :\n    Disjoint (interedges r s t) (interedges r s t') := by\n  rw [Finset.disjoint_left] at ht ⊢\n  intro _ hx hy\n  rw [mem_interedges_iff] at hx hy\n  exact ht hx.2.1 hy.2.1\n\n"}
{"name":"Rel.interedges_eq_biUnion","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝² : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\ninst✝¹ : DecidableEq α\ninst✝ : DecidableEq β\n⊢ Eq (Rel.interedges r s t) (s.biUnion fun x => Finset.map { toFun := fun x_1 => { fst := x, snd := x_1 }, inj' := ⋯ } (Finset.filter (fun y => r x y) t))","decl":"lemma interedges_eq_biUnion :\n    interedges r s t = s.biUnion fun x ↦ {y ∈ t | r x y}.map ⟨(x, ·), Prod.mk.inj_left x⟩ := by\n  ext ⟨x, y⟩; simp [mem_interedges_iff]\n\n"}
{"name":"Rel.interedges_biUnion_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"ι : Type u_2\nα : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝² : (a : α) → DecidablePred (r a)\ninst✝¹ : DecidableEq α\ninst✝ : DecidableEq β\ns : Finset ι\nt : Finset β\nf : ι → Finset α\n⊢ Eq (Rel.interedges r (s.biUnion f) t) (s.biUnion fun a => Rel.interedges r (f a) t)","decl":"theorem interedges_biUnion_left (s : Finset ι) (t : Finset β) (f : ι → Finset α) :\n    interedges r (s.biUnion f) t = s.biUnion fun a ↦ interedges r (f a) t := by\n  ext\n  simp only [mem_biUnion, mem_interedges_iff, exists_and_right, ← and_assoc]\n\n"}
{"name":"Rel.interedges_biUnion_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"ι : Type u_2\nα : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝² : (a : α) → DecidablePred (r a)\ninst✝¹ : DecidableEq α\ninst✝ : DecidableEq β\ns : Finset α\nt : Finset ι\nf : ι → Finset β\n⊢ Eq (Rel.interedges r s (t.biUnion f)) (t.biUnion fun b => Rel.interedges r s (f b))","decl":"theorem interedges_biUnion_right (s : Finset α) (t : Finset ι) (f : ι → Finset β) :\n    interedges r s (t.biUnion f) = t.biUnion fun b ↦ interedges r s (f b) := by\n  ext a\n  simp only [mem_interedges_iff, mem_biUnion]\n  exact ⟨fun ⟨x₁, ⟨x₂, x₃, x₄⟩, x₅⟩ ↦ ⟨x₂, x₃, x₁, x₄, x₅⟩,\n    fun ⟨x₂, x₃, x₁, x₄, x₅⟩ ↦ ⟨x₁, ⟨x₂, x₃, x₄⟩, x₅⟩⟩\n\n"}
{"name":"Rel.interedges_biUnion","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"ι : Type u_2\nκ : Type u_3\nα : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝² : (a : α) → DecidablePred (r a)\ninst✝¹ : DecidableEq α\ninst✝ : DecidableEq β\ns : Finset ι\nt : Finset κ\nf : ι → Finset α\ng : κ → Finset β\n⊢ Eq (Rel.interedges r (s.biUnion f) (t.biUnion g)) ((SProd.sprod s t).biUnion fun ab => Rel.interedges r (f ab.1) (g ab.2))","decl":"theorem interedges_biUnion (s : Finset ι) (t : Finset κ) (f : ι → Finset α) (g : κ → Finset β) :\n    interedges r (s.biUnion f) (t.biUnion g) =\n      (s ×ˢ t).biUnion fun ab ↦ interedges r (f ab.1) (g ab.2) := by\n  simp_rw [product_biUnion, interedges_biUnion_left, interedges_biUnion_right]\n\n"}
{"name":"Rel.card_interedges_le_mul","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\n⊢ LE.le (Rel.interedges r s t).card (HMul.hMul s.card t.card)","decl":"theorem card_interedges_le_mul (s : Finset α) (t : Finset β) :\n    #(interedges r s t) ≤ #s * #t :=\n  (card_filter_le _ _).trans (card_product _ _).le\n\n"}
{"name":"Rel.edgeDensity_nonneg","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\n⊢ LE.le 0 (Rel.edgeDensity r s t)","decl":"theorem edgeDensity_nonneg (s : Finset α) (t : Finset β) : 0 ≤ edgeDensity r s t := by\n  apply div_nonneg <;> exact mod_cast Nat.zero_le _\n\n"}
{"name":"Rel.edgeDensity_le_one","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\n⊢ LE.le (Rel.edgeDensity r s t) 1","decl":"theorem edgeDensity_le_one (s : Finset α) (t : Finset β) : edgeDensity r s t ≤ 1 := by\n  apply div_le_one_of_le₀\n  · exact mod_cast card_interedges_le_mul r s t\n  · exact mod_cast Nat.zero_le _\n\n"}
{"name":"Rel.edgeDensity_add_edgeDensity_compl","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\nhs : s.Nonempty\nht : t.Nonempty\n⊢ Eq (HAdd.hAdd (Rel.edgeDensity r s t) (Rel.edgeDensity (fun x y => Not (r x y)) s t)) 1","decl":"theorem edgeDensity_add_edgeDensity_compl (hs : s.Nonempty) (ht : t.Nonempty) :\n    edgeDensity r s t + edgeDensity (fun x y ↦ ¬r x y) s t = 1 := by\n  rw [edgeDensity, edgeDensity, div_add_div_same, div_eq_one_iff_eq]\n  · exact mod_cast card_interedges_add_card_interedges_compl r s t\n  · exact mod_cast (mul_pos hs.card_pos ht.card_pos).ne'\n\n"}
{"name":"Rel.edgeDensity_empty_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\nt : Finset β\n⊢ Eq (Rel.edgeDensity r EmptyCollection.emptyCollection t) 0","decl":"@[simp]\ntheorem edgeDensity_empty_left (t : Finset β) : edgeDensity r ∅ t = 0 := by\n  rw [edgeDensity, Finset.card_empty, Nat.cast_zero, zero_mul, div_zero]\n\n"}
{"name":"Rel.edgeDensity_empty_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns : Finset α\n⊢ Eq (Rel.edgeDensity r s EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem edgeDensity_empty_right (s : Finset α) : edgeDensity r s ∅ = 0 := by\n  rw [edgeDensity, Finset.card_empty, Nat.cast_zero, mul_zero, div_zero]\n\n"}
{"name":"Rel.card_interedges_finpartition_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝¹ : (a : α) → DecidablePred (r a)\ns : Finset α\ninst✝ : DecidableEq α\nP : Finpartition s\nt : Finset β\n⊢ Eq (Rel.interedges r s t).card (P.parts.sum fun a => (Rel.interedges r a t).card)","decl":"theorem card_interedges_finpartition_left [DecidableEq α] (P : Finpartition s) (t : Finset β) :\n    #(interedges r s t) = ∑ a ∈ P.parts, #(interedges r a t) := by\n  classical\n  simp_rw [← P.biUnion_parts, interedges_biUnion_left, id]\n  rw [card_biUnion]\n  exact fun x hx y hy h ↦ interedges_disjoint_left r (P.disjoint hx hy h) _\n\n"}
{"name":"Rel.card_interedges_finpartition_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝¹ : (a : α) → DecidablePred (r a)\nt : Finset β\ninst✝ : DecidableEq β\ns : Finset α\nP : Finpartition t\n⊢ Eq (Rel.interedges r s t).card (P.parts.sum fun b => (Rel.interedges r s b).card)","decl":"theorem card_interedges_finpartition_right [DecidableEq β] (s : Finset α) (P : Finpartition t) :\n    #(interedges r s t) = ∑ b ∈ P.parts, #(interedges r s b) := by\n  classical\n  simp_rw [← P.biUnion_parts, interedges_biUnion_right, id]\n  rw [card_biUnion]\n  exact fun x hx y hy h ↦ interedges_disjoint_right r _ (P.disjoint hx hy h)\n\n"}
{"name":"Rel.card_interedges_finpartition","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝² : (a : α) → DecidablePred (r a)\ns : Finset α\nt : Finset β\ninst✝¹ : DecidableEq α\ninst✝ : DecidableEq β\nP : Finpartition s\nQ : Finpartition t\n⊢ Eq (Rel.interedges r s t).card ((SProd.sprod P.parts Q.parts).sum fun ab => (Rel.interedges r ab.1 ab.2).card)","decl":"theorem card_interedges_finpartition [DecidableEq α] [DecidableEq β] (P : Finpartition s)\n    (Q : Finpartition t) :\n    #(interedges r s t) = ∑ ab ∈ P.parts ×ˢ Q.parts, #(interedges r ab.1 ab.2) := by\n  rw [card_interedges_finpartition_left _ P, sum_product]\n  congr; ext\n  rw [card_interedges_finpartition_right]\n\n"}
{"name":"Rel.mul_edgeDensity_le_edgeDensity","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns₁ s₂ : Finset α\nt₁ t₂ : Finset β\nhs : HasSubset.Subset s₂ s₁\nht : HasSubset.Subset t₂ t₁\nhs₂ : s₂.Nonempty\nht₂ : t₂.Nonempty\n⊢ LE.le (HMul.hMul (HMul.hMul (HDiv.hDiv ↑s₂.card ↑s₁.card) (HDiv.hDiv ↑t₂.card ↑t₁.card)) (Rel.edgeDensity r s₂ t₂)) (Rel.edgeDensity r s₁ t₁)","decl":"theorem mul_edgeDensity_le_edgeDensity (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hs₂ : s₂.Nonempty)\n    (ht₂ : t₂.Nonempty) :\n    (#s₂ : ℚ) / #s₁ * (#t₂ / #t₁) * edgeDensity r s₂ t₂ ≤ edgeDensity r s₁ t₁ := by\n  have hst : (#s₂ : ℚ) * #t₂ ≠ 0 := by simp [hs₂.ne_empty, ht₂.ne_empty]\n  rw [edgeDensity, edgeDensity, div_mul_div_comm, mul_comm, div_mul_div_cancel₀ hst]\n  gcongr\n  exact interedges_mono hs ht\n\n"}
{"name":"Rel.edgeDensity_sub_edgeDensity_le_one_sub_mul","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns₁ s₂ : Finset α\nt₁ t₂ : Finset β\nhs : HasSubset.Subset s₂ s₁\nht : HasSubset.Subset t₂ t₁\nhs₂ : s₂.Nonempty\nht₂ : t₂.Nonempty\n⊢ LE.le (HSub.hSub (Rel.edgeDensity r s₂ t₂) (Rel.edgeDensity r s₁ t₁)) (HSub.hSub 1 (HMul.hMul (HDiv.hDiv ↑s₂.card ↑s₁.card) (HDiv.hDiv ↑t₂.card ↑t₁.card)))","decl":"theorem edgeDensity_sub_edgeDensity_le_one_sub_mul (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hs₂ : s₂.Nonempty)\n    (ht₂ : t₂.Nonempty) :\n    edgeDensity r s₂ t₂ - edgeDensity r s₁ t₁ ≤ 1 - #s₂ / #s₁ * (#t₂ / #t₁) := by\n  refine (sub_le_sub_left (mul_edgeDensity_le_edgeDensity r hs ht hs₂ ht₂) _).trans ?_\n  refine le_trans ?_ (mul_le_of_le_one_right ?_ (edgeDensity_le_one r s₂ t₂))\n  · rw [sub_mul, one_mul]\n  refine sub_nonneg_of_le (mul_le_one₀ ?_ ?_ ?_)\n  · exact div_le_one_of_le₀ ((@Nat.cast_le ℚ).2 (card_le_card hs)) (Nat.cast_nonneg _)\n  · apply div_nonneg <;> exact mod_cast Nat.zero_le _\n  · exact div_le_one_of_le₀ ((@Nat.cast_le ℚ).2 (card_le_card ht)) (Nat.cast_nonneg _)\n\n"}
{"name":"Rel.abs_edgeDensity_sub_edgeDensity_le_one_sub_mul","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nβ : Type u_5\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns₁ s₂ : Finset α\nt₁ t₂ : Finset β\nhs : HasSubset.Subset s₂ s₁\nht : HasSubset.Subset t₂ t₁\nhs₂ : s₂.Nonempty\nht₂ : t₂.Nonempty\n⊢ LE.le (abs (HSub.hSub (Rel.edgeDensity r s₂ t₂) (Rel.edgeDensity r s₁ t₁))) (HSub.hSub 1 (HMul.hMul (HDiv.hDiv ↑s₂.card ↑s₁.card) (HDiv.hDiv ↑t₂.card ↑t₁.card)))","decl":"theorem abs_edgeDensity_sub_edgeDensity_le_one_sub_mul (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁)\n    (hs₂ : s₂.Nonempty) (ht₂ : t₂.Nonempty) :\n    |edgeDensity r s₂ t₂ - edgeDensity r s₁ t₁| ≤ 1 - #s₂ / #s₁ * (#t₂ / #t₁) := by\n  refine abs_sub_le_iff.2 ⟨edgeDensity_sub_edgeDensity_le_one_sub_mul r hs ht hs₂ ht₂, ?_⟩\n  rw [← add_sub_cancel_right (edgeDensity r s₁ t₁) (edgeDensity (fun x y ↦ ¬r x y) s₁ t₁),\n    ← add_sub_cancel_right (edgeDensity r s₂ t₂) (edgeDensity (fun x y ↦ ¬r x y) s₂ t₂),\n    edgeDensity_add_edgeDensity_compl _ (hs₂.mono hs) (ht₂.mono ht),\n    edgeDensity_add_edgeDensity_compl _ hs₂ ht₂, sub_sub_sub_cancel_left]\n  exact edgeDensity_sub_edgeDensity_le_one_sub_mul _ hs ht hs₂ ht₂\n\n"}
{"name":"Rel.abs_edgeDensity_sub_edgeDensity_le_two_mul_sub_sq","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"𝕜 : Type u_1\nα : Type u_4\nβ : Type u_5\ninst✝¹ : LinearOrderedField 𝕜\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns₁ s₂ : Finset α\nt₁ t₂ : Finset β\nδ : 𝕜\nhs : HasSubset.Subset s₂ s₁\nht : HasSubset.Subset t₂ t₁\nhδ₀ : LE.le 0 δ\nhδ₁ : LT.lt δ 1\nhs₂ : LE.le (HMul.hMul (HSub.hSub 1 δ) ↑s₁.card) ↑s₂.card\nht₂ : LE.le (HMul.hMul (HSub.hSub 1 δ) ↑t₁.card) ↑t₂.card\n⊢ LE.le (abs (HSub.hSub ↑(Rel.edgeDensity r s₂ t₂) ↑(Rel.edgeDensity r s₁ t₁))) (HSub.hSub (HMul.hMul 2 δ) (HPow.hPow δ 2))","decl":"theorem abs_edgeDensity_sub_edgeDensity_le_two_mul_sub_sq (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁)\n    (hδ₀ : 0 ≤ δ) (hδ₁ : δ < 1) (hs₂ : (1 - δ) * #s₁ ≤ #s₂)\n    (ht₂ : (1 - δ) * #t₁ ≤ #t₂) :\n    |(edgeDensity r s₂ t₂ : 𝕜) - edgeDensity r s₁ t₁| ≤ 2 * δ - δ ^ 2 := by\n  have hδ' : 0 ≤ 2 * δ - δ ^ 2 := by\n    rw [sub_nonneg, sq]\n    gcongr\n    exact hδ₁.le.trans (by norm_num)\n  rw [← sub_pos] at hδ₁\n  obtain rfl | hs₂' := s₂.eq_empty_or_nonempty\n  · rw [Finset.card_empty, Nat.cast_zero] at hs₂\n    simpa [edgeDensity, (nonpos_of_mul_nonpos_right hs₂ hδ₁).antisymm (Nat.cast_nonneg _)] using hδ'\n  obtain rfl | ht₂' := t₂.eq_empty_or_nonempty\n  · rw [Finset.card_empty, Nat.cast_zero] at ht₂\n    simpa [edgeDensity, (nonpos_of_mul_nonpos_right ht₂ hδ₁).antisymm (Nat.cast_nonneg _)] using hδ'\n  have hr : 2 * δ - δ ^ 2 = 1 - (1 - δ) * (1 - δ) := by ring\n  rw [hr]\n  norm_cast\n  refine\n    (Rat.cast_le.2 <| abs_edgeDensity_sub_edgeDensity_le_one_sub_mul r hs ht hs₂' ht₂').trans ?_\n  push_cast\n  have h₁ := hs₂'.mono hs\n  have h₂ := ht₂'.mono ht\n  gcongr\n  · refine (le_div_iff₀ ?_).2 hs₂\n    exact mod_cast h₁.card_pos\n  · refine (le_div_iff₀ ?_).2 ht₂\n    exact mod_cast h₂.card_pos\n\n"}
{"name":"Rel.abs_edgeDensity_sub_edgeDensity_le_two_mul","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"𝕜 : Type u_1\nα : Type u_4\nβ : Type u_5\ninst✝¹ : LinearOrderedField 𝕜\nr : α → β → Prop\ninst✝ : (a : α) → DecidablePred (r a)\ns₁ s₂ : Finset α\nt₁ t₂ : Finset β\nδ : 𝕜\nhs : HasSubset.Subset s₂ s₁\nht : HasSubset.Subset t₂ t₁\nhδ : LE.le 0 δ\nhscard : LE.le (HMul.hMul (HSub.hSub 1 δ) ↑s₁.card) ↑s₂.card\nhtcard : LE.le (HMul.hMul (HSub.hSub 1 δ) ↑t₁.card) ↑t₂.card\n⊢ LE.le (abs (HSub.hSub ↑(Rel.edgeDensity r s₂ t₂) ↑(Rel.edgeDensity r s₁ t₁))) (HMul.hMul 2 δ)","decl":"/-- If `s₂ ⊆ s₁`, `t₂ ⊆ t₁` and they take up all but a `δ`-proportion, then the difference in edge\ndensities is at most `2 * δ`. -/\ntheorem abs_edgeDensity_sub_edgeDensity_le_two_mul (hs : s₂ ⊆ s₁) (ht : t₂ ⊆ t₁) (hδ : 0 ≤ δ)\n    (hscard : (1 - δ) * #s₁ ≤ #s₂) (htcard : (1 - δ) * #t₁ ≤ #t₂) :\n    |(edgeDensity r s₂ t₂ : 𝕜) - edgeDensity r s₁ t₁| ≤ 2 * δ := by\n  cases' lt_or_le δ 1 with h h\n  · exact (abs_edgeDensity_sub_edgeDensity_le_two_mul_sub_sq r hs ht hδ h hscard htcard).trans\n      ((sub_le_self_iff _).2 <| sq_nonneg δ)\n  rw [two_mul]\n  refine (abs_sub _ _).trans (add_le_add (le_trans ?_ h) (le_trans ?_ h)) <;>\n    · rw [abs_of_nonneg]\n      · exact mod_cast edgeDensity_le_one r _ _\n      · exact mod_cast edgeDensity_nonneg r _ _\n\n"}
{"name":"Rel.swap_mem_interedges_iff","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nr : α → α → Prop\ninst✝ : DecidableRel r\ns t : Finset α\nhr : Symmetric r\nx : Prod α α\n⊢ Iff (Membership.mem (Rel.interedges r s t) x.swap) (Membership.mem (Rel.interedges r t s) x)","decl":"@[simp]\ntheorem swap_mem_interedges_iff (hr : Symmetric r) {x : α × α} :\n    x.swap ∈ interedges r s t ↔ x ∈ interedges r t s := by\n  rw [mem_interedges_iff, mem_interedges_iff, hr.iff]\n  exact and_left_comm\n\n"}
{"name":"Rel.mk_mem_interedges_comm","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nr : α → α → Prop\ninst✝ : DecidableRel r\ns t : Finset α\na b : α\nhr : Symmetric r\n⊢ Iff (Membership.mem (Rel.interedges r s t) { fst := a, snd := b }) (Membership.mem (Rel.interedges r t s) { fst := b, snd := a })","decl":"theorem mk_mem_interedges_comm (hr : Symmetric r) :\n    (a, b) ∈ interedges r s t ↔ (b, a) ∈ interedges r t s :=\n  @swap_mem_interedges_iff _ _ _ _ _ hr (b, a)\n\n"}
{"name":"Rel.card_interedges_comm","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nr : α → α → Prop\ninst✝ : DecidableRel r\nhr : Symmetric r\ns t : Finset α\n⊢ Eq (Rel.interedges r s t).card (Rel.interedges r t s).card","decl":"theorem card_interedges_comm (hr : Symmetric r) (s t : Finset α) :\n    #(interedges r s t) = #(interedges r t s) :=\n  Finset.card_bij (fun (x : α × α) _ ↦ x.swap) (fun _ ↦ (swap_mem_interedges_iff hr).2)\n    (fun _ _ _ _ h ↦ Prod.swap_injective h) fun x h ↦\n    ⟨x.swap, (swap_mem_interedges_iff hr).2 h, x.swap_swap⟩\n\n"}
{"name":"Rel.edgeDensity_comm","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nr : α → α → Prop\ninst✝ : DecidableRel r\nhr : Symmetric r\ns t : Finset α\n⊢ Eq (Rel.edgeDensity r s t) (Rel.edgeDensity r t s)","decl":"theorem edgeDensity_comm (hr : Symmetric r) (s t : Finset α) :\n    edgeDensity r s t = edgeDensity r t s := by\n  rw [edgeDensity, mul_comm, card_interedges_comm hr, edgeDensity]\n\n"}
{"name":"SimpleGraph.interedges_def","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ Eq (G.interedges s t) (Finset.filter (fun e => G.Adj e.1 e.2) (SProd.sprod s t))","decl":"lemma interedges_def (s t : Finset α) : G.interedges s t = {e ∈ s ×ˢ t | G.Adj e.1 e.2} := rfl\n\n"}
{"name":"SimpleGraph.edgeDensity_def","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ Eq (G.edgeDensity s t) (HDiv.hDiv (↑(G.interedges s t).card) (HMul.hMul ↑s.card ↑t.card))","decl":"lemma edgeDensity_def (s t : Finset α) : G.edgeDensity s t = #(G.interedges s t) / (#s * #t) := rfl\n\n"}
{"name":"SimpleGraph.card_interedges_div_card","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ Eq (HDiv.hDiv (↑(G.interedges s t).card) (HMul.hMul ↑s.card ↑t.card)) (G.edgeDensity s t)","decl":"theorem card_interedges_div_card (s t : Finset α) :\n    (#(G.interedges s t) : ℚ) / (#s * #t) = G.edgeDensity s t :=\n  rfl\n\n"}
{"name":"SimpleGraph.mem_interedges_iff","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\nx : Prod α α\n⊢ Iff (Membership.mem (G.interedges s t) x) (And (Membership.mem s x.1) (And (Membership.mem t x.2) (G.Adj x.1 x.2)))","decl":"theorem mem_interedges_iff {x : α × α} : x ∈ G.interedges s t ↔ x.1 ∈ s ∧ x.2 ∈ t ∧ G.Adj x.1 x.2 :=\n  Rel.mem_interedges_iff\n\n"}
{"name":"SimpleGraph.mk_mem_interedges_iff","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\na b : α\n⊢ Iff (Membership.mem (G.interedges s t) { fst := a, snd := b }) (And (Membership.mem s a) (And (Membership.mem t b) (G.Adj a b)))","decl":"theorem mk_mem_interedges_iff : (a, b) ∈ G.interedges s t ↔ a ∈ s ∧ b ∈ t ∧ G.Adj a b :=\n  Rel.mk_mem_interedges_iff\n\n"}
{"name":"SimpleGraph.interedges_empty_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nt : Finset α\n⊢ Eq (G.interedges EmptyCollection.emptyCollection t) EmptyCollection.emptyCollection","decl":"@[simp]\ntheorem interedges_empty_left (t : Finset α) : G.interedges ∅ t = ∅ :=\n  Rel.interedges_empty_left _\n\n"}
{"name":"SimpleGraph.interedges_mono","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns₁ s₂ t₁ t₂ : Finset α\na✝¹ : HasSubset.Subset s₂ s₁\na✝ : HasSubset.Subset t₂ t₁\n⊢ HasSubset.Subset (G.interedges s₂ t₂) (G.interedges s₁ t₁)","decl":"theorem interedges_mono : s₂ ⊆ s₁ → t₂ ⊆ t₁ → G.interedges s₂ t₂ ⊆ G.interedges s₁ t₁ :=\n  Rel.interedges_mono\n\n"}
{"name":"SimpleGraph.interedges_disjoint_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns₁ s₂ : Finset α\nhs : Disjoint s₁ s₂\nt : Finset α\n⊢ Disjoint (G.interedges s₁ t) (G.interedges s₂ t)","decl":"theorem interedges_disjoint_left (hs : Disjoint s₁ s₂) (t : Finset α) :\n    Disjoint (G.interedges s₁ t) (G.interedges s₂ t) :=\n  Rel.interedges_disjoint_left _ hs _\n\n"}
{"name":"SimpleGraph.interedges_disjoint_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nt₁ t₂ s : Finset α\nht : Disjoint t₁ t₂\n⊢ Disjoint (G.interedges s t₁) (G.interedges s t₂)","decl":"theorem interedges_disjoint_right (s : Finset α) (ht : Disjoint t₁ t₂) :\n    Disjoint (G.interedges s t₁) (G.interedges s t₂) :=\n  Rel.interedges_disjoint_right _ _ ht\n\n"}
{"name":"SimpleGraph.interedges_biUnion_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"ι : Type u_2\nα : Type u_4\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\ninst✝ : DecidableEq α\ns : Finset ι\nt : Finset α\nf : ι → Finset α\n⊢ Eq (G.interedges (s.biUnion f) t) (s.biUnion fun a => G.interedges (f a) t)","decl":"theorem interedges_biUnion_left (s : Finset ι) (t : Finset α) (f : ι → Finset α) :\n    G.interedges (s.biUnion f) t = s.biUnion fun a ↦ G.interedges (f a) t :=\n  Rel.interedges_biUnion_left _ _ _ _\n\n"}
{"name":"SimpleGraph.interedges_biUnion_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"ι : Type u_2\nα : Type u_4\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\ninst✝ : DecidableEq α\ns : Finset α\nt : Finset ι\nf : ι → Finset α\n⊢ Eq (G.interedges s (t.biUnion f)) (t.biUnion fun b => G.interedges s (f b))","decl":"theorem interedges_biUnion_right (s : Finset α) (t : Finset ι) (f : ι → Finset α) :\n    G.interedges s (t.biUnion f) = t.biUnion fun b ↦ G.interedges s (f b) :=\n  Rel.interedges_biUnion_right _ _ _ _\n\n"}
{"name":"SimpleGraph.interedges_biUnion","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"ι : Type u_2\nκ : Type u_3\nα : Type u_4\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\ninst✝ : DecidableEq α\ns : Finset ι\nt : Finset κ\nf : ι → Finset α\ng : κ → Finset α\n⊢ Eq (G.interedges (s.biUnion f) (t.biUnion g)) ((SProd.sprod s t).biUnion fun ab => G.interedges (f ab.1) (g ab.2))","decl":"theorem interedges_biUnion (s : Finset ι) (t : Finset κ) (f : ι → Finset α) (g : κ → Finset α) :\n    G.interedges (s.biUnion f) (t.biUnion g) =\n      (s ×ˢ t).biUnion fun ab ↦ G.interedges (f ab.1) (g ab.2) :=\n  Rel.interedges_biUnion _ _ _ _ _\n\n"}
{"name":"SimpleGraph.card_interedges_add_card_interedges_compl","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\ns t : Finset α\ninst✝ : DecidableEq α\nh : Disjoint s t\n⊢ Eq (HAdd.hAdd (G.interedges s t).card ((HasCompl.compl G).interedges s t).card) (HMul.hMul s.card t.card)","decl":"theorem card_interedges_add_card_interedges_compl (h : Disjoint s t) :\n    #(G.interedges s t) + #(Gᶜ.interedges s t) = #s * #t := by\n  rw [← card_product, interedges_def, interedges_def]\n  have : {e ∈ s ×ˢ t | Gᶜ.Adj e.1 e.2} = {e ∈ s ×ˢ t | ¬G.Adj e.1 e.2} := by\n    refine filter_congr fun x hx ↦ ?_\n    rw [mem_product] at hx\n    rw [compl_adj, and_iff_right (h.forall_ne_finset hx.1 hx.2)]\n  rw [this, ← card_union_of_disjoint, filter_union_filter_neg_eq]\n  exact disjoint_filter.2 fun _ _ ↦ Classical.not_not.2\n\n"}
{"name":"SimpleGraph.edgeDensity_add_edgeDensity_compl","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝¹ : DecidableRel G.Adj\ns t : Finset α\ninst✝ : DecidableEq α\nhs : s.Nonempty\nht : t.Nonempty\nh : Disjoint s t\n⊢ Eq (HAdd.hAdd (G.edgeDensity s t) ((HasCompl.compl G).edgeDensity s t)) 1","decl":"theorem edgeDensity_add_edgeDensity_compl (hs : s.Nonempty) (ht : t.Nonempty) (h : Disjoint s t) :\n    G.edgeDensity s t + Gᶜ.edgeDensity s t = 1 := by\n  rw [edgeDensity_def, edgeDensity_def, div_add_div_same, div_eq_one_iff_eq]\n  · exact mod_cast card_interedges_add_card_interedges_compl _ h\n  · positivity\n\n"}
{"name":"SimpleGraph.card_interedges_le_mul","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ LE.le (G.interedges s t).card (HMul.hMul s.card t.card)","decl":"theorem card_interedges_le_mul (s t : Finset α) : #(G.interedges s t) ≤ #s * #t :=\n  Rel.card_interedges_le_mul _ _ _\n\n"}
{"name":"SimpleGraph.edgeDensity_nonneg","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ LE.le 0 (G.edgeDensity s t)","decl":"theorem edgeDensity_nonneg (s t : Finset α) : 0 ≤ G.edgeDensity s t :=\n  Rel.edgeDensity_nonneg _ _ _\n\n"}
{"name":"SimpleGraph.edgeDensity_le_one","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ LE.le (G.edgeDensity s t) 1","decl":"theorem edgeDensity_le_one (s t : Finset α) : G.edgeDensity s t ≤ 1 :=\n  Rel.edgeDensity_le_one _ _ _\n\n"}
{"name":"SimpleGraph.edgeDensity_empty_left","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\nt : Finset α\n⊢ Eq (G.edgeDensity EmptyCollection.emptyCollection t) 0","decl":"@[simp]\ntheorem edgeDensity_empty_left (t : Finset α) : G.edgeDensity ∅ t = 0 :=\n  Rel.edgeDensity_empty_left _ _\n\n"}
{"name":"SimpleGraph.edgeDensity_empty_right","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns : Finset α\n⊢ Eq (G.edgeDensity s EmptyCollection.emptyCollection) 0","decl":"@[simp]\ntheorem edgeDensity_empty_right (s : Finset α) : G.edgeDensity s ∅ = 0 :=\n  Rel.edgeDensity_empty_right _ _\n\n"}
{"name":"SimpleGraph.swap_mem_interedges_iff","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\nx : Prod α α\n⊢ Iff (Membership.mem (G.interedges s t) x.swap) (Membership.mem (G.interedges t s) x)","decl":"@[simp]\ntheorem swap_mem_interedges_iff {x : α × α} : x.swap ∈ G.interedges s t ↔ x ∈ G.interedges t s :=\n  Rel.swap_mem_interedges_iff G.symm\n\n"}
{"name":"SimpleGraph.mk_mem_interedges_comm","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\na b : α\n⊢ Iff (Membership.mem (G.interedges s t) { fst := a, snd := b }) (Membership.mem (G.interedges t s) { fst := b, snd := a })","decl":"theorem mk_mem_interedges_comm : (a, b) ∈ G.interedges s t ↔ (b, a) ∈ G.interedges t s :=\n  Rel.mk_mem_interedges_comm G.symm\n\n"}
{"name":"SimpleGraph.edgeDensity_comm","module":"Mathlib.Combinatorics.SimpleGraph.Density","initialProofState":"α : Type u_4\nG : SimpleGraph α\ninst✝ : DecidableRel G.Adj\ns t : Finset α\n⊢ Eq (G.edgeDensity s t) (G.edgeDensity t s)","decl":"theorem edgeDensity_comm (s t : Finset α) : G.edgeDensity s t = G.edgeDensity t s :=\n  Rel.edgeDensity_comm G.symm s t\n\n"}
