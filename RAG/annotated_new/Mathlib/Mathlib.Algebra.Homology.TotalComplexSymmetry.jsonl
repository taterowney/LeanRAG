{"name":"HomologicalComplex₂.instHasTotalFlip","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁵ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁴ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝³ : TotalComplexShape c₁ c₂ c\ninst✝² : TotalComplexShape c₂ c₁ c\ninst✝¹ : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝ : K.HasTotal c\n⊢ K.flip.HasTotal c","decl":"instance [K.HasTotal c] : K.flip.HasTotal c := fun j =>\n  hasCoproduct_of_equiv_of_iso (K.toGradedObject.mapObjFun (ComplexShape.π c₁ c₂ c) j) _\n    (ComplexShape.symmetryEquiv c₁ c₂ c j) (fun _ => Iso.refl _)\n\n"}
{"name":"HomologicalComplex₂.flip_hasTotal_iff","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁴ : CategoryTheory.Category.{u_5, u_1} C\ninst✝³ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝² : TotalComplexShape c₁ c₂ c\ninst✝¹ : TotalComplexShape c₂ c₁ c\ninst✝ : TotalComplexShapeSymmetry c₁ c₂ c\n⊢ Iff (K.flip.HasTotal c) (K.HasTotal c)","decl":"lemma flip_hasTotal_iff : K.flip.HasTotal c ↔ K.HasTotal c := by\n  constructor\n  · intro\n    change K.flip.flip.HasTotal c\n    have := TotalComplexShapeSymmetry.symmetry c₁ c₂ c\n    infer_instance\n  · intro\n    infer_instance\n\n"}
{"name":"HomologicalComplex₂.totalFlipIsoX_hom_D₁","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.totalFlipIsoX c j).hom (K.D₁ c j j')) (CategoryTheory.CategoryStruct.comp (K.flip.D₂ c j j') (K.totalFlipIsoX c j').hom)","decl":"@[reassoc]\nlemma totalFlipIsoX_hom_D₁ (j j' : J) :\n    (K.totalFlipIsoX c j).hom ≫ K.D₁ c j j' =\n      K.flip.D₂ c j j' ≫ (K.totalFlipIsoX c j').hom := by\n  by_cases h₀ : c.Rel j j'\n  · ext i₂ i₁ h₁\n    dsimp [totalFlipIsoX]\n    rw [ι_totalDesc_assoc, Linear.units_smul_comp, ι_D₁, ι_D₂_assoc]\n    dsimp\n    by_cases h₂ : c₁.Rel i₁ (c₁.next i₁)\n    · have h₃ : ComplexShape.π c₂ c₁ c ⟨i₂, c₁.next i₁⟩ = j' := by\n        rw [← ComplexShape.next_π₂ c₂ c i₂ h₂, h₁, c.next_eq' h₀]\n      have h₄ : ComplexShape.π c₁ c₂ c ⟨c₁.next i₁, i₂⟩ = j' := by\n        rw [← h₃, ComplexShape.π_symm c₁ c₂ c]\n      rw [K.d₁_eq _ h₂ _ _ h₄, K.flip.d₂_eq _ _ h₂ _ h₃, Linear.units_smul_comp,\n        assoc, ι_totalDesc, Linear.comp_units_smul, smul_smul, smul_smul,\n        ComplexShape.σ_ε₁ c₂ c h₂ i₂]\n      dsimp only [flip_X_X, flip_X_d]\n    · rw [K.d₁_eq_zero _ _ _ _ h₂, K.flip.d₂_eq_zero _ _ _ _ h₂, smul_zero, zero_comp]\n  · rw [K.D₁_shape _ _ _ h₀, K.flip.D₂_shape c _ _ h₀, zero_comp, comp_zero]\n\n"}
{"name":"HomologicalComplex₂.totalFlipIsoX_hom_D₁_assoc","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\nZ : C\nh : Quiver.Hom (K.toGradedObject.mapObj (c₁.π c₂ c) j') Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.totalFlipIsoX c j).hom (CategoryTheory.CategoryStruct.comp (K.D₁ c j j') h)) (CategoryTheory.CategoryStruct.comp (K.flip.D₂ c j j') (CategoryTheory.CategoryStruct.comp (K.totalFlipIsoX c j').hom h))","decl":"@[reassoc]\nlemma totalFlipIsoX_hom_D₁ (j j' : J) :\n    (K.totalFlipIsoX c j).hom ≫ K.D₁ c j j' =\n      K.flip.D₂ c j j' ≫ (K.totalFlipIsoX c j').hom := by\n  by_cases h₀ : c.Rel j j'\n  · ext i₂ i₁ h₁\n    dsimp [totalFlipIsoX]\n    rw [ι_totalDesc_assoc, Linear.units_smul_comp, ι_D₁, ι_D₂_assoc]\n    dsimp\n    by_cases h₂ : c₁.Rel i₁ (c₁.next i₁)\n    · have h₃ : ComplexShape.π c₂ c₁ c ⟨i₂, c₁.next i₁⟩ = j' := by\n        rw [← ComplexShape.next_π₂ c₂ c i₂ h₂, h₁, c.next_eq' h₀]\n      have h₄ : ComplexShape.π c₁ c₂ c ⟨c₁.next i₁, i₂⟩ = j' := by\n        rw [← h₃, ComplexShape.π_symm c₁ c₂ c]\n      rw [K.d₁_eq _ h₂ _ _ h₄, K.flip.d₂_eq _ _ h₂ _ h₃, Linear.units_smul_comp,\n        assoc, ι_totalDesc, Linear.comp_units_smul, smul_smul, smul_smul,\n        ComplexShape.σ_ε₁ c₂ c h₂ i₂]\n      dsimp only [flip_X_X, flip_X_d]\n    · rw [K.d₁_eq_zero _ _ _ _ h₂, K.flip.d₂_eq_zero _ _ _ _ h₂, smul_zero, zero_comp]\n  · rw [K.D₁_shape _ _ _ h₀, K.flip.D₂_shape c _ _ h₀, zero_comp, comp_zero]\n\n"}
{"name":"HomologicalComplex₂.totalFlipIsoX_hom_D₂_assoc","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\nZ : C\nh : Quiver.Hom (K.toGradedObject.mapObj (c₁.π c₂ c) j') Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.totalFlipIsoX c j).hom (CategoryTheory.CategoryStruct.comp (K.D₂ c j j') h)) (CategoryTheory.CategoryStruct.comp (K.flip.D₁ c j j') (CategoryTheory.CategoryStruct.comp (K.totalFlipIsoX c j').hom h))","decl":"@[reassoc]\nlemma totalFlipIsoX_hom_D₂ (j j' : J) :\n    (K.totalFlipIsoX c j).hom ≫ K.D₂ c j j' =\n      K.flip.D₁ c j j' ≫ (K.totalFlipIsoX c j').hom := by\n  by_cases h₀ : c.Rel j j'\n  · ext i₂ i₁ h₁\n    dsimp [totalFlipIsoX]\n    rw [ι_totalDesc_assoc, Linear.units_smul_comp, ι_D₂, ι_D₁_assoc]\n    dsimp\n    by_cases h₂ : c₂.Rel i₂ (c₂.next i₂)\n    · have h₃ : ComplexShape.π c₂ c₁ c (ComplexShape.next c₂ i₂, i₁) = j' := by\n        rw [← ComplexShape.next_π₁ c₁ c h₂ i₁, h₁, c.next_eq' h₀]\n      have h₄ : ComplexShape.π c₁ c₂ c (i₁, ComplexShape.next c₂ i₂) = j' := by\n        rw [← h₃, ComplexShape.π_symm c₁ c₂ c]\n      rw [K.d₂_eq _ _ h₂ _ h₄, K.flip.d₁_eq _ h₂ _ _ h₃, Linear.units_smul_comp,\n        assoc, ι_totalDesc, Linear.comp_units_smul, smul_smul, smul_smul,\n        ComplexShape.σ_ε₂ c₁ c i₁ h₂]\n      rfl\n    · rw [K.d₂_eq_zero _ _ _ _ h₂, K.flip.d₁_eq_zero _ _ _ _ h₂, smul_zero, zero_comp]\n  · rw [K.D₂_shape _ _ _ h₀, K.flip.D₁_shape c _ _ h₀, zero_comp, comp_zero]\n\n"}
{"name":"HomologicalComplex₂.totalFlipIsoX_hom_D₂","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.totalFlipIsoX c j).hom (K.D₂ c j j')) (CategoryTheory.CategoryStruct.comp (K.flip.D₁ c j j') (K.totalFlipIsoX c j').hom)","decl":"@[reassoc]\nlemma totalFlipIsoX_hom_D₂ (j j' : J) :\n    (K.totalFlipIsoX c j).hom ≫ K.D₂ c j j' =\n      K.flip.D₁ c j j' ≫ (K.totalFlipIsoX c j').hom := by\n  by_cases h₀ : c.Rel j j'\n  · ext i₂ i₁ h₁\n    dsimp [totalFlipIsoX]\n    rw [ι_totalDesc_assoc, Linear.units_smul_comp, ι_D₂, ι_D₁_assoc]\n    dsimp\n    by_cases h₂ : c₂.Rel i₂ (c₂.next i₂)\n    · have h₃ : ComplexShape.π c₂ c₁ c (ComplexShape.next c₂ i₂, i₁) = j' := by\n        rw [← ComplexShape.next_π₁ c₁ c h₂ i₁, h₁, c.next_eq' h₀]\n      have h₄ : ComplexShape.π c₁ c₂ c (i₁, ComplexShape.next c₂ i₂) = j' := by\n        rw [← h₃, ComplexShape.π_symm c₁ c₂ c]\n      rw [K.d₂_eq _ _ h₂ _ h₄, K.flip.d₁_eq _ h₂ _ _ h₃, Linear.units_smul_comp,\n        assoc, ι_totalDesc, Linear.comp_units_smul, smul_smul, smul_smul,\n        ComplexShape.σ_ε₂ c₁ c i₁ h₂]\n      rfl\n    · rw [K.d₂_eq_zero _ _ _ _ h₂, K.flip.d₁_eq_zero _ _ _ _ h₂, smul_zero, zero_comp]\n  · rw [K.D₂_shape _ _ _ h₀, K.flip.D₁_shape c _ _ h₀, zero_comp, comp_zero]\n\n"}
{"name":"HomologicalComplex₂.totalFlipIso_hom_f_D₁_assoc","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\nZ : C\nh : Quiver.Hom (K.toGradedObject.mapObj (c₁.π c₂ c) j') Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j) (CategoryTheory.CategoryStruct.comp (K.D₁ c j j') h)) (CategoryTheory.CategoryStruct.comp (K.flip.D₂ c j j') (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j') h))","decl":"@[reassoc]\nlemma totalFlipIso_hom_f_D₁ (j j' : J) :\n    (K.totalFlipIso c).hom.f j ≫ K.D₁ c j j' =\n      K.flip.D₂ c j j' ≫ (K.totalFlipIso c).hom.f j' := by\n  apply totalFlipIsoX_hom_D₁\n\n"}
{"name":"HomologicalComplex₂.totalFlipIso_hom_f_D₁","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j) (K.D₁ c j j')) (CategoryTheory.CategoryStruct.comp (K.flip.D₂ c j j') ((K.totalFlipIso c).hom.f j'))","decl":"@[reassoc]\nlemma totalFlipIso_hom_f_D₁ (j j' : J) :\n    (K.totalFlipIso c).hom.f j ≫ K.D₁ c j j' =\n      K.flip.D₂ c j j' ≫ (K.totalFlipIso c).hom.f j' := by\n  apply totalFlipIsoX_hom_D₁\n\n"}
{"name":"HomologicalComplex₂.totalFlipIso_hom_f_D₂","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j) (K.D₂ c j j')) (CategoryTheory.CategoryStruct.comp (K.flip.D₁ c j j') ((K.totalFlipIso c).hom.f j'))","decl":"@[reassoc]\nlemma totalFlipIso_hom_f_D₂ (j j' : J) :\n    (K.totalFlipIso c).hom.f j ≫ K.D₂ c j j' =\n      K.flip.D₁ c j j' ≫ (K.totalFlipIso c).hom.f j' := by\n  apply totalFlipIsoX_hom_D₂\n\n"}
{"name":"HomologicalComplex₂.totalFlipIso_hom_f_D₂_assoc","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\nj j' : J\nZ : C\nh : Quiver.Hom (K.toGradedObject.mapObj (c₁.π c₂ c) j') Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j) (CategoryTheory.CategoryStruct.comp (K.D₂ c j j') h)) (CategoryTheory.CategoryStruct.comp (K.flip.D₁ c j j') (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j') h))","decl":"@[reassoc]\nlemma totalFlipIso_hom_f_D₂ (j j' : J) :\n    (K.totalFlipIso c).hom.f j ≫ K.D₂ c j j' =\n      K.flip.D₁ c j j' ≫ (K.totalFlipIso c).hom.f j' := by\n  apply totalFlipIsoX_hom_D₂\n\n"}
{"name":"HomologicalComplex₂.ιTotal_totalFlipIso_f_hom","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\ni₁ : I₁\ni₂ : I₂\nj : J\nh : Eq (c₂.π c₁ c { fst := i₂, snd := i₁ }) j\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.flip.ιTotal c i₂ i₁ j h) ((K.totalFlipIso c).hom.f j)) (HSMul.hSMul (c₁.σ c₂ c i₁ i₂) (K.ιTotal c i₁ i₂ j ⋯))","decl":"@[reassoc (attr := simp)]\nlemma ιTotal_totalFlipIso_f_hom\n    (i₁ : I₁) (i₂ : I₂) (j : J) (h : ComplexShape.π c₂ c₁ c (i₂, i₁) = j) :\n    K.flip.ιTotal c i₂ i₁ j h ≫ (K.totalFlipIso c).hom.f j =\n      ComplexShape.σ c₁ c₂ c i₁ i₂ • K.ιTotal c i₁ i₂ j\n        (by rw [← ComplexShape.π_symm c₁ c₂ c i₁ i₂, h]) := by\n  simp [totalFlipIso, totalFlipIsoX]\n\n"}
{"name":"HomologicalComplex₂.ιTotal_totalFlipIso_f_hom_assoc","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\ni₁ : I₁\ni₂ : I₂\nj : J\nh✝ : Eq (c₂.π c₁ c { fst := i₂, snd := i₁ }) j\nZ : C\nh : Quiver.Hom ((K.total c).X j) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.flip.ιTotal c i₂ i₁ j h✝) (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).hom.f j) h)) (CategoryTheory.CategoryStruct.comp (HSMul.hSMul (c₁.σ c₂ c i₁ i₂) (K.ιTotal c i₁ i₂ j ⋯)) h)","decl":"@[reassoc (attr := simp)]\nlemma ιTotal_totalFlipIso_f_hom\n    (i₁ : I₁) (i₂ : I₂) (j : J) (h : ComplexShape.π c₂ c₁ c (i₂, i₁) = j) :\n    K.flip.ιTotal c i₂ i₁ j h ≫ (K.totalFlipIso c).hom.f j =\n      ComplexShape.σ c₁ c₂ c i₁ i₂ • K.ιTotal c i₁ i₂ j\n        (by rw [← ComplexShape.π_symm c₁ c₂ c i₁ i₂, h]) := by\n  simp [totalFlipIso, totalFlipIsoX]\n\n"}
{"name":"HomologicalComplex₂.ιTotal_totalFlipIso_f_inv_assoc","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\ni₁ : I₁\ni₂ : I₂\nj : J\nh✝ : Eq (c₁.π c₂ c { fst := i₁, snd := i₂ }) j\nZ : C\nh : Quiver.Hom ((K.flip.total c).X j) Z\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.ιTotal c i₁ i₂ j h✝) (CategoryTheory.CategoryStruct.comp ((K.totalFlipIso c).inv.f j) h)) (CategoryTheory.CategoryStruct.comp (HSMul.hSMul (c₁.σ c₂ c i₁ i₂) (K.flip.ιTotal c i₂ i₁ j ⋯)) h)","decl":"@[reassoc (attr := simp)]\nlemma ιTotal_totalFlipIso_f_inv\n    (i₁ : I₁) (i₂ : I₂) (j : J) (h : ComplexShape.π c₁ c₂ c (i₁, i₂) = j) :\n    K.ιTotal c i₁ i₂ j h ≫ (K.totalFlipIso c).inv.f j =\n      ComplexShape.σ c₁ c₂ c i₁ i₂ • K.flip.ιTotal c i₂ i₁ j\n        (by rw [ComplexShape.π_symm c₁ c₂ c i₁ i₂, h]) := by\n  simp [totalFlipIso, totalFlipIsoX]\n\n"}
{"name":"HomologicalComplex₂.ιTotal_totalFlipIso_f_inv","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁶ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁵ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁴ : TotalComplexShape c₁ c₂ c\ninst✝³ : TotalComplexShape c₂ c₁ c\ninst✝² : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝¹ : K.HasTotal c\ninst✝ : DecidableEq J\ni₁ : I₁\ni₂ : I₂\nj : J\nh : Eq (c₁.π c₂ c { fst := i₁, snd := i₂ }) j\n⊢ Eq (CategoryTheory.CategoryStruct.comp (K.ιTotal c i₁ i₂ j h) ((K.totalFlipIso c).inv.f j)) (HSMul.hSMul (c₁.σ c₂ c i₁ i₂) (K.flip.ιTotal c i₂ i₁ j ⋯))","decl":"@[reassoc (attr := simp)]\nlemma ιTotal_totalFlipIso_f_inv\n    (i₁ : I₁) (i₂ : I₂) (j : J) (h : ComplexShape.π c₁ c₂ c (i₁, i₂) = j) :\n    K.ιTotal c i₁ i₂ j h ≫ (K.totalFlipIso c).inv.f j =\n      ComplexShape.σ c₁ c₂ c i₁ i₂ • K.flip.ιTotal c i₂ i₁ j\n        (by rw [ComplexShape.π_symm c₁ c₂ c i₁ i₂, h]) := by\n  simp [totalFlipIso, totalFlipIsoX]\n\n"}
{"name":"HomologicalComplex₂.instHasTotalFlip_1","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝³ : CategoryTheory.Category.{u_5, u_1} C\ninst✝² : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝¹ : TotalComplexShape c₁ c₂ c\ninst✝ : K.HasTotal c\n⊢ K.flip.flip.HasTotal c","decl":"instance : K.flip.flip.HasTotal c := (inferInstance : K.HasTotal c)\n\n"}
{"name":"HomologicalComplex₂.flip_totalFlipIso","module":"Mathlib.Algebra.Homology.TotalComplexSymmetry","initialProofState":"C : Type u_1\nI₁ : Type u_2\nI₂ : Type u_3\nJ : Type u_4\ninst✝⁸ : CategoryTheory.Category.{u_5, u_1} C\ninst✝⁷ : CategoryTheory.Preadditive C\nc₁ : ComplexShape I₁\nc₂ : ComplexShape I₂\nK : HomologicalComplex₂ C c₁ c₂\nc : ComplexShape J\ninst✝⁶ : TotalComplexShape c₁ c₂ c\ninst✝⁵ : TotalComplexShape c₂ c₁ c\ninst✝⁴ : TotalComplexShapeSymmetry c₁ c₂ c\ninst✝³ : K.HasTotal c\ninst✝² : DecidableEq J\ninst✝¹ : TotalComplexShapeSymmetry c₂ c₁ c\ninst✝ : TotalComplexShapeSymmetrySymmetry c₁ c₂ c\n⊢ Eq (K.flip.totalFlipIso c) (K.totalFlipIso c).symm","decl":"lemma flip_totalFlipIso : K.flip.totalFlipIso c = (K.totalFlipIso c).symm := by\n  ext j i₁ i₂ h\n  rw [Iso.symm_hom, ιTotal_totalFlipIso_f_hom]\n  dsimp only [flip_flip]\n  rw [ιTotal_totalFlipIso_f_inv, ComplexShape.σ_symm]\n\n"}
