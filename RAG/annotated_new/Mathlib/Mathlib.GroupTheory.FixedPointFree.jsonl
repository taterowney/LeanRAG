{"name":"MonoidHom.commutatorMap_apply","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\nφ : G → G\ninst✝ : Div G\ng : G\n⊢ Eq (MonoidHom.commutatorMap φ g) (HDiv.hDiv g (φ g))","decl":"@[simp] theorem commutatorMap_apply [Div G] (g : G) : commutatorMap φ g = g / φ g := rfl\n\n"}
{"name":"MonoidHom.FixedPointFree.commutatorMap_injective","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝ : Group G\nφ : MonoidHom G G\nhφ : MonoidHom.FixedPointFree ⇑φ\n⊢ Function.Injective (MonoidHom.commutatorMap ⇑φ)","decl":"theorem commutatorMap_injective (hφ : FixedPointFree φ) : Function.Injective (commutatorMap φ) := by\n  refine fun x y h ↦ inv_mul_eq_one.mp <| hφ _ ?_\n  rwa [map_mul, map_inv, eq_inv_mul_iff_mul_eq, ← mul_assoc, ← eq_div_iff_mul_eq', ← division_def]\n\n"}
{"name":"MonoidHom.FixedPointFree.commutatorMap_surjective","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\n⊢ Function.Surjective (MonoidHom.commutatorMap ⇑φ)","decl":"theorem commutatorMap_surjective (hφ : FixedPointFree φ) : Function.Surjective (commutatorMap φ) :=\n  Finite.surjective_of_injective hφ.commutatorMap_injective\n\n"}
{"name":"MonoidHom.FixedPointFree.prod_pow_eq_one","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nn : Nat\nhn : Eq (Nat.iterate (⇑φ) n) id\ng : G\n⊢ Eq (List.map (fun k => Nat.iterate (⇑φ) k g) (List.range n)).prod 1","decl":"theorem prod_pow_eq_one (hφ : FixedPointFree φ) {n : ℕ} (hn : φ^[n] = _root_.id) (g : G) :\n    ((List.range n).map (fun k ↦ φ^[k] g)).prod = 1 := by\n  obtain ⟨g, rfl⟩ := commutatorMap_surjective hφ g\n  simp only [commutatorMap_apply, iterate_map_div, ← Function.iterate_succ_apply]\n  rw [List.prod_range_div', Function.iterate_zero_apply, hn, Function.id_def, div_self']\n\n"}
{"name":"MonoidHom.FixedPointFree.coe_eq_inv_of_sq_eq_one","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nh2 : Eq (Nat.iterate (⇑φ) 2) id\n⊢ Eq ⇑φ fun x => Inv.inv x","decl":"theorem coe_eq_inv_of_sq_eq_one (hφ : FixedPointFree φ) (h2 : φ^[2] = _root_.id) : ⇑φ = (·⁻¹) := by\n  ext g\n  have key : g * φ g = 1 := by simpa [List.range_succ] using hφ.prod_pow_eq_one h2 g\n  rwa [← inv_eq_iff_mul_eq_one, eq_comm] at key\n\n"}
{"name":"MonoidHom.FixedPointFree.coe_eq_inv_of_involutive","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nh2 : Function.Involutive ⇑φ\n⊢ Eq ⇑φ fun x => Inv.inv x","decl":"theorem coe_eq_inv_of_involutive (hφ : FixedPointFree φ) (h2 : Function.Involutive φ) :\n    ⇑φ = (·⁻¹) :=\n  coe_eq_inv_of_sq_eq_one hφ  (funext h2)\n\n"}
{"name":"MonoidHom.FixedPointFree.commute_all_of_involutive","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nh2 : Function.Involutive ⇑φ\ng h : G\n⊢ Commute g h","decl":"theorem commute_all_of_involutive (hφ : FixedPointFree φ) (h2 : Function.Involutive φ) (g h : G) :\n    Commute g h := by\n  have key := map_mul φ g h\n  rwa [hφ.coe_eq_inv_of_involutive h2, inv_eq_iff_eq_inv, mul_inv_rev, inv_inv, inv_inv] at key\n\n"}
{"name":"MonoidHom.FixedPointFree.orderOf_ne_two_of_involutive","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nh2 : Function.Involutive ⇑φ\ng : G\n⊢ Ne (orderOf g) 2","decl":"theorem orderOf_ne_two_of_involutive (hφ : FixedPointFree φ) (h2 : Function.Involutive φ) (g : G) :\n    orderOf g ≠ 2 := by\n  intro hg\n  have key : φ g = g := by\n    rw [hφ.coe_eq_inv_of_involutive h2, inv_eq_iff_mul_eq_one, ← sq, ← hg, pow_orderOf_eq_one]\n  rw [hφ g key, orderOf_one] at hg\n  contradiction\n\n"}
{"name":"MonoidHom.FixedPointFree.odd_card_of_involutive","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nh2 : Function.Involutive ⇑φ\n⊢ Odd (Nat.card G)","decl":"theorem odd_card_of_involutive (hφ : FixedPointFree φ) (h2 : Function.Involutive φ) :\n    Odd (Nat.card G) := by\n  have := Fintype.ofFinite G\n  by_contra h\n  rw [Nat.not_odd_iff_even, even_iff_two_dvd, Nat.card_eq_fintype_card] at h\n  obtain ⟨g, hg⟩ := exists_prime_orderOf_dvd_card 2 h\n  exact hφ.orderOf_ne_two_of_involutive h2 g hg\n\n"}
{"name":"MonoidHom.FixedPointFree.odd_orderOf_of_involutive","module":"Mathlib.GroupTheory.FixedPointFree","initialProofState":"G : Type u_1\ninst✝¹ : Group G\nφ : MonoidHom G G\ninst✝ : Finite G\nhφ : MonoidHom.FixedPointFree ⇑φ\nh2 : Function.Involutive ⇑φ\ng : G\n⊢ Odd (orderOf g)","decl":"theorem odd_orderOf_of_involutive (hφ : FixedPointFree φ) (h2 : Function.Involutive φ) (g : G) :\n    Odd (orderOf g) :=\n  Odd.of_dvd_nat (hφ.odd_card_of_involutive h2) (orderOf_dvd_natCard g)\n\n"}
