{"name":"Finset.piecewise_insert_self","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝¹ : DecidableEq ι\nj : ι\ninst✝ : (i : ι) → Decidable (Membership.mem (Insert.insert j s) i)\n⊢ Eq ((Insert.insert j s).piecewise f g j) (f j)","decl":"lemma piecewise_insert_self [DecidableEq ι] {j : ι} [∀ i, Decidable (i ∈ insert j s)] :\n    (insert j s).piecewise f g j = f j := by simp [piecewise]\n\n"}
{"name":"Finset.piecewise_empty","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\nf g : (i : ι) → π i\ninst✝ : (i : ι) → Decidable (Membership.mem EmptyCollection.emptyCollection i)\n⊢ Eq (EmptyCollection.emptyCollection.piecewise f g) g","decl":"@[simp]\nlemma piecewise_empty [∀ i : ι, Decidable (i ∈ (∅ : Finset ι))] : piecewise ∅ f g = g := by\n  ext i\n  simp [piecewise]\n\n"}
{"name":"Finset.piecewise_coe","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\ninst✝ : (j : ι) → Decidable (Membership.mem (↑s) j)\n⊢ Eq ((↑s).piecewise f g) (s.piecewise f g)","decl":"@[norm_cast move]\nlemma piecewise_coe [∀ j, Decidable (j ∈ (s : Set ι))] :\n    (s : Set ι).piecewise f g = s.piecewise f g := by\n  ext\n  congr\n\n"}
{"name":"Finset.piecewise_eq_of_mem","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\ni : ι\nhi : Membership.mem s i\n⊢ Eq (s.piecewise f g i) (f i)","decl":"@[simp]\nlemma piecewise_eq_of_mem {i : ι} (hi : i ∈ s) : s.piecewise f g i = f i := by\n  simp [piecewise, hi]\n\n"}
{"name":"Finset.piecewise_eq_of_not_mem","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\ni : ι\nhi : Not (Membership.mem s i)\n⊢ Eq (s.piecewise f g i) (g i)","decl":"@[simp]\nlemma piecewise_eq_of_not_mem {i : ι} (hi : i ∉ s) : s.piecewise f g i = g i := by\n  simp [piecewise, hi]\n\n"}
{"name":"Finset.piecewise_congr","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\nf f' g g' : (i : ι) → π i\nhf : ∀ (i : ι), Membership.mem s i → Eq (f i) (f' i)\nhg : ∀ (i : ι), Not (Membership.mem s i) → Eq (g i) (g' i)\n⊢ Eq (s.piecewise f g) (s.piecewise f' g')","decl":"lemma piecewise_congr {f f' g g' : ∀ i, π i} (hf : ∀ i ∈ s, f i = f' i)\n    (hg : ∀ i ∉ s, g i = g' i) : s.piecewise f g = s.piecewise f' g' :=\n  funext fun i => if_ctx_congr Iff.rfl (hf i) (hg i)\n\n"}
{"name":"Finset.piecewise_insert_of_ne","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝² : (j : ι) → Decidable (Membership.mem s j)\ninst✝¹ : DecidableEq ι\ni j : ι\ninst✝ : (i : ι) → Decidable (Membership.mem (Insert.insert j s) i)\nh : Ne i j\n⊢ Eq ((Insert.insert j s).piecewise f g i) (s.piecewise f g i)","decl":"@[simp]\nlemma piecewise_insert_of_ne [DecidableEq ι] {i j : ι} [∀ i, Decidable (i ∈ insert j s)]\n    (h : i ≠ j) : (insert j s).piecewise f g i = s.piecewise f g i := by simp [piecewise, h]\n\n"}
{"name":"Finset.piecewise_insert","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝² : (j : ι) → Decidable (Membership.mem s j)\ninst✝¹ : DecidableEq ι\nj : ι\ninst✝ : (i : ι) → Decidable (Membership.mem (Insert.insert j s) i)\n⊢ Eq ((Insert.insert j s).piecewise f g) (Function.update (s.piecewise f g) j (f j))","decl":"lemma piecewise_insert [DecidableEq ι] (j : ι) [∀ i, Decidable (i ∈ insert j s)] :\n    (insert j s).piecewise f g = update (s.piecewise f g) j (f j) := by\n  classical simp only [← piecewise_coe, coe_insert, ← Set.piecewise_insert]\n  ext\n  congr\n  simp\n\n"}
{"name":"Finset.piecewise_cases","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\ni : ι\np : π i → Prop\nhf : p (f i)\nhg : p (g i)\n⊢ p (s.piecewise f g i)","decl":"lemma piecewise_cases {i} (p : π i → Prop) (hf : p (f i)) (hg : p (g i)) :\n    p (s.piecewise f g i) := by\n  by_cases hi : i ∈ s <;> simpa [hi]\n\n"}
{"name":"Finset.piecewise_singleton","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\nf g : (i : ι) → π i\ninst✝ : DecidableEq ι\ni : ι\n⊢ Eq ((Singleton.singleton i).piecewise f g) (Function.update g i (f i))","decl":"lemma piecewise_singleton [DecidableEq ι] (i : ι) : piecewise {i} f g = update g i (f i) := by\n  rw [← insert_emptyc_eq, piecewise_insert, piecewise_empty]\n\n"}
{"name":"Finset.piecewise_piecewise_of_subset_left","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns t : Finset ι\ninst✝¹ : (i : ι) → Decidable (Membership.mem s i)\ninst✝ : (i : ι) → Decidable (Membership.mem t i)\nh : HasSubset.Subset s t\nf₁ f₂ g : (a : ι) → π a\n⊢ Eq (s.piecewise (t.piecewise f₁ f₂) g) (s.piecewise f₁ g)","decl":"lemma piecewise_piecewise_of_subset_left {s t : Finset ι} [∀ i, Decidable (i ∈ s)]\n    [∀ i, Decidable (i ∈ t)] (h : s ⊆ t) (f₁ f₂ g : ∀ a, π a) :\n    s.piecewise (t.piecewise f₁ f₂) g = s.piecewise f₁ g :=\n  s.piecewise_congr (fun _i hi => piecewise_eq_of_mem _ _ _ (h hi)) fun _ _ => rfl\n\n"}
{"name":"Finset.piecewise_idem_left","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\nf₁ f₂ g : (a : ι) → π a\n⊢ Eq (s.piecewise (s.piecewise f₁ f₂) g) (s.piecewise f₁ g)","decl":"@[simp]\nlemma piecewise_idem_left (f₁ f₂ g : ∀ a, π a) :\n    s.piecewise (s.piecewise f₁ f₂) g = s.piecewise f₁ g :=\n  piecewise_piecewise_of_subset_left (Subset.refl _) _ _ _\n\n"}
{"name":"Finset.piecewise_piecewise_of_subset_right","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns t : Finset ι\ninst✝¹ : (i : ι) → Decidable (Membership.mem s i)\ninst✝ : (i : ι) → Decidable (Membership.mem t i)\nh : HasSubset.Subset t s\nf g₁ g₂ : (a : ι) → π a\n⊢ Eq (s.piecewise f (t.piecewise g₁ g₂)) (s.piecewise f g₂)","decl":"lemma piecewise_piecewise_of_subset_right {s t : Finset ι} [∀ i, Decidable (i ∈ s)]\n    [∀ i, Decidable (i ∈ t)] (h : t ⊆ s) (f g₁ g₂ : ∀ a, π a) :\n    s.piecewise f (t.piecewise g₁ g₂) = s.piecewise f g₂ :=\n  s.piecewise_congr (fun _ _ => rfl) fun _i hi => t.piecewise_eq_of_not_mem _ _ (mt (@h _) hi)\n\n"}
{"name":"Finset.piecewise_idem_right","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\nf g₁ g₂ : (a : ι) → π a\n⊢ Eq (s.piecewise f (s.piecewise g₁ g₂)) (s.piecewise f g₂)","decl":"@[simp]\nlemma piecewise_idem_right (f g₁ g₂ : ∀ a, π a) :\n    s.piecewise f (s.piecewise g₁ g₂) = s.piecewise f g₂ :=\n  piecewise_piecewise_of_subset_right (Subset.refl _) f g₁ g₂\n\n"}
{"name":"Finset.update_eq_piecewise","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nβ : Type u_3\ninst✝ : DecidableEq ι\nf : ι → β\ni : ι\nv : β\n⊢ Eq (Function.update f i v) ((Singleton.singleton i).piecewise (fun x => v) f)","decl":"lemma update_eq_piecewise {β : Type*} [DecidableEq ι] (f : ι → β) (i : ι) (v : β) :\n    update f i v = piecewise (singleton i) (fun _ => v) f :=\n  (piecewise_singleton (fun _ => v) _ _).symm\n\n"}
{"name":"Finset.update_piecewise","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\ninst✝ : DecidableEq ι\ni : ι\nv : π i\n⊢ Eq (Function.update (s.piecewise f g) i v) (s.piecewise (Function.update f i v) (Function.update g i v))","decl":"lemma update_piecewise [DecidableEq ι] (i : ι) (v : π i) :\n    update (s.piecewise f g) i v = s.piecewise (update f i v) (update g i v) := by\n  ext j\n  rcases em (j = i) with (rfl | hj) <;> by_cases hs : j ∈ s <;> simp [*]\n\n"}
{"name":"Finset.update_piecewise_of_mem","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\ninst✝ : DecidableEq ι\ni : ι\nhi : Membership.mem s i\nv : π i\n⊢ Eq (Function.update (s.piecewise f g) i v) (s.piecewise (Function.update f i v) g)","decl":"lemma update_piecewise_of_mem [DecidableEq ι] {i : ι} (hi : i ∈ s) (v : π i) :\n    update (s.piecewise f g) i v = s.piecewise (update f i v) g := by\n  rw [update_piecewise]\n  refine s.piecewise_congr (fun _ _ => rfl) fun j hj => update_of_ne ?_ ..\n  exact fun h => hj (h.symm ▸ hi)\n\n"}
{"name":"Finset.update_piecewise_of_not_mem","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf g : (i : ι) → π i\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\ninst✝ : DecidableEq ι\ni : ι\nhi : Not (Membership.mem s i)\nv : π i\n⊢ Eq (Function.update (s.piecewise f g) i v) (s.piecewise f (Function.update g i v))","decl":"lemma update_piecewise_of_not_mem [DecidableEq ι] {i : ι} (hi : i ∉ s) (v : π i) :\n    update (s.piecewise f g) i v = s.piecewise f (update g i v) := by\n  rw [update_piecewise]\n  refine s.piecewise_congr (fun j hj => update_of_ne ?_ ..) fun _ _ => rfl\n  exact fun h => hi (h ▸ hj)\n\n"}
{"name":"Finset.piecewise_same","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ns : Finset ι\nf : (i : ι) → π i\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\n⊢ Eq (s.piecewise f f) f","decl":"lemma piecewise_same : s.piecewise f f = f := by\n  ext i\n  by_cases h : i ∈ s <;> simp [h]\n\n"}
{"name":"Finset.piecewise_univ","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ninst✝¹ : Fintype ι\ninst✝ : (i : ι) → Decidable (Membership.mem Finset.univ i)\nf g : (i : ι) → π i\n⊢ Eq (Finset.univ.piecewise f g) f","decl":"@[simp]\nlemma piecewise_univ [∀ i, Decidable (i ∈ (univ : Finset ι))] (f g : ∀ i, π i) :\n    univ.piecewise f g = f := by\n  ext i\n  simp [piecewise]\n\n"}
{"name":"Finset.piecewise_compl","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ninst✝³ : Fintype ι\ninst✝² : DecidableEq ι\ns : Finset ι\ninst✝¹ : (i : ι) → Decidable (Membership.mem s i)\ninst✝ : (i : ι) → Decidable (Membership.mem (HasCompl.compl s) i)\nf g : (i : ι) → π i\n⊢ Eq ((HasCompl.compl s).piecewise f g) (s.piecewise g f)","decl":"lemma piecewise_compl [DecidableEq ι] (s : Finset ι) [∀ i, Decidable (i ∈ s)]\n    [∀ i, Decidable (i ∈ sᶜ)] (f g : ∀ i, π i) :\n    sᶜ.piecewise f g = s.piecewise g f := by\n  ext i\n  simp [piecewise]\n\n"}
{"name":"Finset.piecewise_erase_univ","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\nπ : ι → Sort u_2\ninst✝¹ : Fintype ι\ninst✝ : DecidableEq ι\ni : ι\nf g : (i : ι) → π i\n⊢ Eq ((Finset.univ.erase i).piecewise f g) (Function.update f i (g i))","decl":"@[simp]\nlemma piecewise_erase_univ [DecidableEq ι] (i : ι) (f g : ∀ i, π i) :\n    (Finset.univ.erase i).piecewise f g = Function.update f i (g i) := by\n  rw [← compl_singleton, piecewise_compl, piecewise_singleton]\n\n"}
{"name":"Finset.piecewise_mem_set_pi","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nt : Set ι\nt' : (i : ι) → Set (π i)\nf g : (i : ι) → π i\nhf : Membership.mem (t.pi t') f\nhg : Membership.mem (t.pi t') g\n⊢ Membership.mem (t.pi t') (s.piecewise f g)","decl":"lemma piecewise_mem_set_pi (hf : f ∈ Set.pi t t') (hg : g ∈ Set.pi t t') :\n    s.piecewise f g ∈ Set.pi t t' := by\n  classical rw [← piecewise_coe]; exact Set.piecewise_mem_pi (↑s) hf hg\n\n"}
{"name":"Finset.piecewise_le_of_le_of_le","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g h : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nhf : LE.le f h\nhg : LE.le g h\n⊢ LE.le (s.piecewise f g) h","decl":"lemma piecewise_le_of_le_of_le (hf : f ≤ h) (hg : g ≤ h) : s.piecewise f g ≤ h := fun x =>\n  piecewise_cases s f g (· ≤ h x) (hf x) (hg x)\n\n"}
{"name":"Finset.le_piecewise_of_le_of_le","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g h : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nhf : LE.le h f\nhg : LE.le h g\n⊢ LE.le h (s.piecewise f g)","decl":"lemma le_piecewise_of_le_of_le (hf : h ≤ f) (hg : h ≤ g) : h ≤ s.piecewise f g := fun x =>\n  piecewise_cases s f g (fun y => h x ≤ y) (hf x) (hg x)\n\n"}
{"name":"Finset.piecewise_le_piecewise'","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g f' g' : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nhf : ∀ (x : ι), Membership.mem s x → LE.le (f x) (f' x)\nhg : ∀ (x : ι), Not (Membership.mem s x) → LE.le (g x) (g' x)\n⊢ LE.le (s.piecewise f g) (s.piecewise f' g')","decl":"lemma piecewise_le_piecewise' (hf : ∀ x ∈ s, f x ≤ f' x) (hg : ∀ x ∉ s, g x ≤ g' x) :\n    s.piecewise f g ≤ s.piecewise f' g' := fun x => by by_cases hx : x ∈ s <;> simp [hx, *]\n\n"}
{"name":"Finset.piecewise_le_piecewise","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g f' g' : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nhf : LE.le f f'\nhg : LE.le g g'\n⊢ LE.le (s.piecewise f g) (s.piecewise f' g')","decl":"lemma piecewise_le_piecewise (hf : f ≤ f') (hg : g ≤ g') : s.piecewise f g ≤ s.piecewise f' g' :=\n  s.piecewise_le_piecewise' (fun x _ => hf x) fun x _ => hg x\n\n"}
{"name":"Finset.piecewise_mem_Icc_of_mem_of_mem","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g f' g' : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nhf : Membership.mem (Set.Icc f' g') f\nhg : Membership.mem (Set.Icc f' g') g\n⊢ Membership.mem (Set.Icc f' g') (s.piecewise f g)","decl":"lemma piecewise_mem_Icc_of_mem_of_mem (hf : f ∈ Set.Icc f' g') (hg : g ∈ Set.Icc f' g') :\n    s.piecewise f g ∈ Set.Icc f' g' :=\n  ⟨le_piecewise_of_le_of_le _ hf.1 hg.1, piecewise_le_of_le_of_le _ hf.2 hg.2⟩\n\n"}
{"name":"Finset.piecewise_mem_Icc","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nh : LE.le f g\n⊢ Membership.mem (Set.Icc f g) (s.piecewise f g)","decl":"lemma piecewise_mem_Icc (h : f ≤ g) : s.piecewise f g ∈ Set.Icc f g :=\n  piecewise_mem_Icc_of_mem_of_mem _ (Set.left_mem_Icc.2 h) (Set.right_mem_Icc.2 h)\n\n"}
{"name":"Finset.piecewise_mem_Icc'","module":"Mathlib.Data.Finset.Piecewise","initialProofState":"ι : Type u_1\ns : Finset ι\ninst✝¹ : (j : ι) → Decidable (Membership.mem s j)\nπ : ι → Type u_3\nf g : (i : ι) → π i\ninst✝ : (i : ι) → Preorder (π i)\nh : LE.le g f\n⊢ Membership.mem (Set.Icc g f) (s.piecewise f g)","decl":"lemma piecewise_mem_Icc' (h : g ≤ f) : s.piecewise f g ∈ Set.Icc g f :=\n  piecewise_mem_Icc_of_mem_of_mem _ (Set.right_mem_Icc.2 h) (Set.left_mem_Icc.2 h)\n\n"}
