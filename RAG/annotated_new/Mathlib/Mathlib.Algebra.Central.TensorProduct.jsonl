{"name":"Algebra.TensorProduct.includeLeft_map_center_le","module":"Mathlib.Algebra.Central.TensorProduct","initialProofState":"K : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝⁴ : CommSemiring K\ninst✝³ : Semiring B\ninst✝² : Semiring C\ninst✝¹ : Algebra K B\ninst✝ : Algebra K C\n⊢ LE.le (Subalgebra.map Algebra.TensorProduct.includeLeft (Subalgebra.center K B)) (Subalgebra.center K (TensorProduct K B C))","decl":"lemma Algebra.TensorProduct.includeLeft_map_center_le :\n    (Subalgebra.center K B).map includeLeft ≤ Subalgebra.center K (B ⊗[K] C) := by\n  intro x hx\n  simp only [Subalgebra.mem_map, Subalgebra.mem_center_iff] at hx ⊢\n  obtain ⟨b, hb0, rfl⟩ := hx\n  intro bc\n  induction bc using TensorProduct.induction_on with\n  | zero => simp\n  | tmul b' c => simp [hb0]\n  | add _ _ _ _ => simp_all [add_mul, mul_add]\n\n"}
{"name":"Algebra.TensorProduct.includeRight_map_center_le","module":"Mathlib.Algebra.Central.TensorProduct","initialProofState":"K : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝⁴ : CommSemiring K\ninst✝³ : Semiring B\ninst✝² : Semiring C\ninst✝¹ : Algebra K B\ninst✝ : Algebra K C\n⊢ LE.le (Subalgebra.map Algebra.TensorProduct.includeRight (Subalgebra.center K C)) (Subalgebra.center K (TensorProduct K B C))","decl":"lemma Algebra.TensorProduct.includeRight_map_center_le :\n    (Subalgebra.center K C).map includeRight ≤ Subalgebra.center K (B ⊗[K] C) := fun x hx ↦ by\n  simp only [Subalgebra.mem_map, Subalgebra.mem_center_iff] at hx ⊢\n  obtain ⟨c, hc0, rfl⟩ := hx\n  intro bc\n  induction bc using TensorProduct.induction_on with\n  | zero => simp\n  | tmul b c' => simp [hc0]\n  | add _ _ _ _ => simp_all [add_mul, mul_add]\n\n"}
{"name":"Algebra.IsCentral.left_of_tensor","module":"Mathlib.Algebra.Central.TensorProduct","initialProofState":"K : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝⁵ : CommSemiring K\ninst✝⁴ : Semiring B\ninst✝³ : Semiring C\ninst✝² : Algebra K B\ninst✝¹ : Algebra K C\ninj : Function.Injective ⇑(algebraMap K C)\ninst✝ : Module.Flat K B\nhbc : Algebra.IsCentral K (TensorProduct K B C)\n⊢ Algebra.IsCentral K B","decl":"open Algebra.TensorProduct in\nlemma left_of_tensor (inj : Function.Injective (algebraMap K C)) [Module.Flat K B]\n    [hbc : Algebra.IsCentral K (B ⊗[K] C)] : IsCentral K B where\n  out := (Subalgebra.map_le.mp ((includeLeft_map_center_le K B C).trans hbc.1)).trans\n    fun _ ⟨k, hk⟩ ↦ ⟨k, includeLeft_injective (S := K) inj hk⟩\n\n"}
{"name":"Algebra.IsCentral.right_of_tensor","module":"Mathlib.Algebra.Central.TensorProduct","initialProofState":"K : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝⁶ : CommSemiring K\ninst✝⁵ : Semiring B\ninst✝⁴ : Semiring C\ninst✝³ : Algebra K B\ninst✝² : Algebra K C\ninj : Function.Injective ⇑(algebraMap K B)\ninst✝¹ : Module.Flat K C\ninst✝ : Algebra.IsCentral K (TensorProduct K B C)\n⊢ Algebra.IsCentral K C","decl":"lemma right_of_tensor (inj : Function.Injective (algebraMap K B)) [Module.Flat K C]\n    [Algebra.IsCentral K (B ⊗[K] C)] : IsCentral K C :=\n  have : IsCentral K (C ⊗[K] B) := IsCentral.of_algEquiv K _ _ <| Algebra.TensorProduct.comm _ _ _\n  left_of_tensor K C B inj\n\n"}
{"name":"Algebra.IsCentral.left_of_tensor_of_field","module":"Mathlib.Algebra.Central.TensorProduct","initialProofState":"K : Type u_4\nB : Type u_5\nC : Type u_6\ninst✝⁶ : Field K\ninst✝⁵ : Ring B\ninst✝⁴ : Ring C\ninst✝³ : Nontrivial C\ninst✝² : Algebra K B\ninst✝¹ : Algebra K C\ninst✝ : Algebra.IsCentral K (TensorProduct K B C)\n⊢ Algebra.IsCentral K B","decl":"/-- Let `B` and `C` be two algebras over a field `K`, if `B ⊗[K] C` is central and `C` is\n  non-trivial, then `B` is central. -/\nlemma left_of_tensor_of_field (K B C : Type*) [Field K] [Ring B] [Ring C] [Nontrivial C]\n    [Algebra K B] [Algebra K C] [IsCentral K (B ⊗[K] C)] : IsCentral K B :=\n  left_of_tensor K B C <| NoZeroSMulDivisors.algebraMap_injective K C\n\n"}
{"name":"Algebra.IsCentral.right_of_tensor_of_field","module":"Mathlib.Algebra.Central.TensorProduct","initialProofState":"K : Type u_4\nB : Type u_5\nC : Type u_6\ninst✝⁶ : Field K\ninst✝⁵ : Ring B\ninst✝⁴ : Ring C\ninst✝³ : Nontrivial B\ninst✝² : Algebra K B\ninst✝¹ : Algebra K C\ninst✝ : Algebra.IsCentral K (TensorProduct K B C)\n⊢ Algebra.IsCentral K C","decl":"/-- Let `B` and `C` be two algebras over a field `K`, if `B ⊗[K] C` is central and `A` is\n  non-trivial, then `B` is central. -/\nlemma right_of_tensor_of_field (K B C : Type*) [Field K] [Ring B] [Ring C] [Nontrivial B]\n    [Algebra K B] [Algebra K C] [IsCentral K (B ⊗[K] C)] : IsCentral K C :=\n  right_of_tensor K B C <| NoZeroSMulDivisors.algebraMap_injective K B\n\n\n"}
