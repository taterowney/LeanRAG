{"name":"continuous_from_compactlyGenerated","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\nY : Type x\ninst✝ : TopologicalSpace X\nt : TopologicalSpace Y\nf : X → Y\nh : ∀ (S : CompHaus) (g : ContinuousMap (↑S.toTop) X), Continuous (Function.comp f ⇑g)\n⊢ Continuous f","decl":"lemma continuous_from_compactlyGenerated [TopologicalSpace X] [t : TopologicalSpace Y] (f : X → Y)\n    (h : ∀ (S : CompHaus.{u}) (g : C(S, X)), Continuous (f ∘ g)) :\n        Continuous[compactlyGenerated.{u} X, t] f := by\n  rw [continuous_coinduced_dom]\n  continuity\n\n"}
{"name":"UCompactlyGeneratedSpace.le_compactlyGenerated","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type v\nt : TopologicalSpace X\nself : UCompactlyGeneratedSpace X\n⊢ LE.le t (TopologicalSpace.compactlyGenerated X)","decl":"/--\nA topological space `X` is compactly generated if its topology is finer than (and thus equal to)\nthe compactly generated topology, i.e. it is coinduced by the continuous maps from compact\nHausdorff spaces to `X`.\n\nThis version includes an explicit universe parameter `u` which should always be specified. It is\nintended for categorical purposes. See `CompactlyGeneratedSpace` for the version without this\nparameter, intended for topological purposes.\n-/\nclass UCompactlyGeneratedSpace (X : Type v) [t : TopologicalSpace X] : Prop where\n  /-- The topology of `X` is finer than the compactly generated topology. -/\n  le_compactlyGenerated : t ≤ compactlyGenerated.{u} X\n\n"}
{"name":"eq_compactlyGenerated","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\nt : TopologicalSpace X\ninst✝ : UCompactlyGeneratedSpace X\n⊢ Eq t (TopologicalSpace.compactlyGenerated X)","decl":"lemma eq_compactlyGenerated [t : TopologicalSpace X] [UCompactlyGeneratedSpace.{u} X] :\n    t = compactlyGenerated.{u} X := by\n  apply le_antisymm\n  · exact UCompactlyGeneratedSpace.le_compactlyGenerated\n  · simp only [compactlyGenerated, ← continuous_iff_coinduced_le, continuous_sigma_iff,\n      Sigma.forall]\n    exact fun S f ↦ f.2\n\n"}
{"name":"instUCompactlyGeneratedSpaceOfDiscreteTopology","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type v\nt : TopologicalSpace X\ninst✝ : DiscreteTopology X\n⊢ UCompactlyGeneratedSpace X","decl":"instance (X : Type v) [t : TopologicalSpace X] [DiscreteTopology X] :\n    UCompactlyGeneratedSpace.{u} X where\n  le_compactlyGenerated := by\n    rw [DiscreteTopology.eq_bot (t := t)]\n    exact bot_le\n\n"}
{"name":"uCompactlyGeneratedSpace_of_continuous_maps","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\nt : TopologicalSpace X\nh : ∀ {Y : Type w} [tY : TopologicalSpace Y] (f : X → Y), (∀ (S : CompHaus) (g : ContinuousMap (↑S.toTop) X), Continuous (Function.comp f ⇑g)) → Continuous f\n⊢ UCompactlyGeneratedSpace X","decl":"set_option linter.unusedVariables false in\n/-- Let `f : X → Y`. Suppose that to prove that `f` is continuous, it suffices to show that\nfor every compact Hausdorff space `K` and every continuous map `g : K → X`, `f ∘ g` is continuous.\nThen `X` is compactly generated. -/\nlemma uCompactlyGeneratedSpace_of_continuous_maps [t : TopologicalSpace X]\n    (h : ∀ {Y : Type w} [tY : TopologicalSpace Y] (f : X → Y),\n      (∀ (S : CompHaus.{u}) (g : C(S, X)), Continuous (f ∘ g)) → Continuous f) :\n        UCompactlyGeneratedSpace.{u} X where\n  le_compactlyGenerated := by\n    suffices Continuous[t, compactlyGenerated.{u} X] (id : X → X) by\n      rwa [← continuous_id_iff_le]\n    apply h (tY := compactlyGenerated.{u} X)\n    intro S g\n    let f : (Σ (i : (T : CompHaus.{u}) × C(T, X)), i.fst) → X := fun ⟨⟨_, i⟩, s⟩ ↦ i s\n    suffices ∀ (i : (T : CompHaus.{u}) × C(T, X)),\n      Continuous[inferInstance, compactlyGenerated X] (fun (a : i.fst) ↦ f ⟨i, a⟩) from this ⟨S, g⟩\n    rw [← @continuous_sigma_iff]\n    apply continuous_coinduced_rng\n\n"}
{"name":"continuous_from_uCompactlyGeneratedSpace","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\nY : Type x\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝ : UCompactlyGeneratedSpace X\nf : X → Y\nh : ∀ (S : CompHaus) (g : ContinuousMap (↑S.toTop) X), Continuous (Function.comp f ⇑g)\n⊢ Continuous f","decl":"/-- If `X` is compactly generated, to prove that `f : X → Y` is continuous it is enough to show\nthat for every compact Hausdorff space `K` and every continuous map `g : K → X`,\n`f ∘ g` is continuous. -/\nlemma continuous_from_uCompactlyGeneratedSpace [UCompactlyGeneratedSpace.{u} X] (f : X → Y)\n    (h : ∀ (S : CompHaus.{u}) (g : C(S, X)), Continuous (f ∘ g)) : Continuous f := by\n  apply continuous_le_dom UCompactlyGeneratedSpace.le_compactlyGenerated\n  exact continuous_from_compactlyGenerated f h\n\n"}
{"name":"uCompactlyGeneratedSpace_of_isClosed","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\ntX : TopologicalSpace X\nh : ∀ (s : Set X), (∀ (S : CompHaus) (f : ContinuousMap (↑S.toTop) X), IsClosed (Set.preimage (⇑f) s)) → IsClosed s\n⊢ UCompactlyGeneratedSpace X","decl":"/-- A topological space `X` is compactly generated if a set `s` is closed when `f ⁻¹' s` is\nclosed for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem uCompactlyGeneratedSpace_of_isClosed\n    (h : ∀ (s : Set X), (∀ (S : CompHaus.{u}) (f : C(S, X)), IsClosed (f ⁻¹' s)) → IsClosed s) :\n    UCompactlyGeneratedSpace.{u} X :=\n  uCompactlyGeneratedSpace_of_continuous_maps fun _ h' ↦\n    continuous_iff_isClosed.2 fun _ hs ↦ h _ fun S g ↦ hs.preimage (h' S g)\n\n"}
{"name":"uCompactlyGeneratedSpace_of_isOpen","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\ntX : TopologicalSpace X\nh : ∀ (s : Set X), (∀ (S : CompHaus) (f : ContinuousMap (↑S.toTop) X), IsOpen (Set.preimage (⇑f) s)) → IsOpen s\n⊢ UCompactlyGeneratedSpace X","decl":"/-- A topological space `X` is compactly generated if a set `s` is open when `f ⁻¹' s` is\nopen for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem uCompactlyGeneratedSpace_of_isOpen\n    (h : ∀ (s : Set X), (∀ (S : CompHaus.{u}) (f : C(S, X)), IsOpen (f ⁻¹' s)) → IsOpen s) :\n    UCompactlyGeneratedSpace.{u} X :=\n  uCompactlyGeneratedSpace_of_continuous_maps fun _ h' ↦\n    continuous_def.2 fun _ hs ↦ h _ fun S g ↦ hs.preimage (h' S g)\n\n"}
{"name":"UCompactlyGeneratedSpace.isClosed","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\ntX : TopologicalSpace X\ninst✝ : UCompactlyGeneratedSpace X\ns : Set X\nhs : ∀ (S : CompHaus) (f : ContinuousMap (↑S.toTop) X), IsClosed (Set.preimage (⇑f) s)\n⊢ IsClosed s","decl":"/-- In a compactly generated space `X`, a set `s` is closed when `f ⁻¹' s` is\nclosed for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem UCompactlyGeneratedSpace.isClosed [UCompactlyGeneratedSpace.{u} X] {s : Set X}\n    (hs : ∀ (S : CompHaus.{u}) (f : C(S, X)), IsClosed (f ⁻¹' s)) : IsClosed s := by\n  rw [eq_compactlyGenerated (X := X), TopologicalSpace.compactlyGenerated, isClosed_coinduced,\n    isClosed_sigma_iff]\n  exact fun ⟨S, f⟩ ↦ hs S f\n\n"}
{"name":"UCompactlyGeneratedSpace.isOpen","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\ntX : TopologicalSpace X\ninst✝ : UCompactlyGeneratedSpace X\ns : Set X\nhs : ∀ (S : CompHaus) (f : ContinuousMap (↑S.toTop) X), IsOpen (Set.preimage (⇑f) s)\n⊢ IsOpen s","decl":"/-- In a compactly generated space `X`, a set `s` is open when `f ⁻¹' s` is\nopen for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem UCompactlyGeneratedSpace.isOpen [UCompactlyGeneratedSpace.{u} X] {s : Set X}\n    (hs : ∀ (S : CompHaus.{u}) (f : C(S, X)), IsOpen (f ⁻¹' s)) : IsOpen s := by\n  rw [eq_compactlyGenerated (X := X), TopologicalSpace.compactlyGenerated, isOpen_coinduced,\n    isOpen_sigma_iff]\n  exact fun ⟨S, f⟩ ↦ hs S f\n\n"}
{"name":"uCompactlyGeneratedSpace_of_coinduced","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\nY : Type x\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝ : UCompactlyGeneratedSpace X\nf : X → Y\nhf : Continuous f\nht : Eq tY (TopologicalSpace.coinduced f tX)\n⊢ UCompactlyGeneratedSpace Y","decl":"/-- If the topology of `X` is coinduced by a continuous function whose domain is\ncompactly generated, then so is `X`. -/\ntheorem uCompactlyGeneratedSpace_of_coinduced\n    [UCompactlyGeneratedSpace.{u} X] {f : X → Y} (hf : Continuous f) (ht : tY = coinduced f tX) :\n    UCompactlyGeneratedSpace.{u} Y := by\n  refine uCompactlyGeneratedSpace_of_isClosed fun s h ↦ ?_\n  rw [ht, isClosed_coinduced]\n  exact UCompactlyGeneratedSpace.isClosed fun _ ⟨g, hg⟩ ↦ h _ ⟨_, hf.comp hg⟩\n\n"}
{"name":"instUCompactlyGeneratedSpaceQuotient","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\ntX : TopologicalSpace X\nS : Setoid X\ninst✝ : UCompactlyGeneratedSpace X\n⊢ UCompactlyGeneratedSpace (Quotient S)","decl":"/-- The quotient of a compactly generated space is compactly generated. -/\ninstance {S : Setoid X} [UCompactlyGeneratedSpace.{u} X] :\n    UCompactlyGeneratedSpace.{u} (Quotient S) :=\n  uCompactlyGeneratedSpace_of_coinduced continuous_quotient_mk' rfl\n\n"}
{"name":"instUCompactlyGeneratedSpaceSum","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\nY : Type x\ntX : TopologicalSpace X\ntY : TopologicalSpace Y\ninst✝¹ : UCompactlyGeneratedSpace X\ninst✝ : UCompactlyGeneratedSpace Y\n⊢ UCompactlyGeneratedSpace (Sum X Y)","decl":"/-- The sum of two compactly generated spaces is compactly generated. -/\ninstance [UCompactlyGeneratedSpace.{u} X] [UCompactlyGeneratedSpace.{v} Y] :\n    UCompactlyGeneratedSpace.{max u v} (X ⊕ Y) := by\n  refine uCompactlyGeneratedSpace_of_isClosed fun s h ↦ isClosed_sum_iff.2 ⟨?_, ?_⟩\n  all_goals\n    refine UCompactlyGeneratedSpace.isClosed fun S ⟨f, hf⟩ ↦ ?_\n  · let g : ULift.{v} S → X ⊕ Y := Sum.inl ∘ f ∘ ULift.down\n    have hg : Continuous g := continuous_inl.comp <| hf.comp continuous_uLift_down\n    exact (h (CompHaus.of (ULift.{v} S)) ⟨g, hg⟩).preimage continuous_uLift_up\n  · let g : ULift.{u} S → X ⊕ Y := Sum.inr ∘ f ∘ ULift.down\n    have hg : Continuous g := continuous_inr.comp <| hf.comp continuous_uLift_down\n    exact (h (CompHaus.of (ULift.{u} S)) ⟨g, hg⟩).preimage continuous_uLift_up\n\n"}
{"name":"instUCompactlyGeneratedSpaceSigma","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"ι : Type v\nX : ι → Type w\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : ∀ (i : ι), UCompactlyGeneratedSpace (X i)\n⊢ UCompactlyGeneratedSpace (Sigma fun i => X i)","decl":"/-- The sigma type associated to a family of compactly generated spaces is compactly generated. -/\ninstance {ι : Type v} {X : ι → Type w} [∀ i, TopologicalSpace (X i)]\n    [∀ i, UCompactlyGeneratedSpace.{u} (X i)] : UCompactlyGeneratedSpace.{u} (Σ i, X i) :=\n  uCompactlyGeneratedSpace_of_isClosed fun _ h ↦ isClosed_sigma_iff.2 fun i ↦\n    UCompactlyGeneratedSpace.isClosed fun S ⟨f, hf⟩ ↦\n      h S ⟨Sigma.mk i ∘ f, continuous_sigmaMk.comp hf⟩\n\n"}
{"name":"instUCompactlyGeneratedSpaceOfSequentialSpace","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type w\ntX : TopologicalSpace X\ninst✝ : SequentialSpace X\n⊢ UCompactlyGeneratedSpace X","decl":"open OnePoint in\n/-- A sequential space is compactly generated.\n\nThe proof is taken from <https://ncatlab.org/nlab/files/StricklandCGHWSpaces.pdf>,\nProposition 1.6. -/\ninstance (priority := 100) [SequentialSpace X] : UCompactlyGeneratedSpace.{u} X := by\n  refine uCompactlyGeneratedSpace_of_isClosed fun s h ↦\n    SequentialSpace.isClosed_of_seq _ fun u p hu hup ↦ ?_\n  let g : ULift.{u} (OnePoint ℕ) → X := (continuousMapMkNat u p hup) ∘ ULift.down\n  change ULift.up ∞ ∈ g ⁻¹' s\n  have : Filter.Tendsto (@OnePoint.some ℕ) Filter.atTop (𝓝 ∞) := by\n    rw [← Nat.cofinite_eq_atTop, ← cocompact_eq_cofinite, ← coclosedCompact_eq_cocompact]\n    exact tendsto_coe_infty\n  apply IsClosed.mem_of_tendsto _ ((continuous_uLift_up.tendsto ∞).comp this)\n  · simp only [Function.comp_apply, mem_preimage, eventually_atTop, ge_iff_le]\n    exact ⟨0, fun b _ ↦ hu b⟩\n  · exact h (CompHaus.of (ULift.{u} (OnePoint ℕ)))\n      ⟨g, (continuousMapMkNat u p hup).continuous.comp continuous_uLift_down⟩\n\n"}
{"name":"continuous_from_compactlyGeneratedSpace","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\nY : Type v\ninst✝² : TopologicalSpace X\ninst✝¹ : TopologicalSpace Y\ninst✝ : CompactlyGeneratedSpace X\nf : X → Y\nh : ∀ (K : Type u) [inst : TopologicalSpace K] [inst_1 : CompactSpace K] [inst_2 : T2Space K] (g : K → X), Continuous g → Continuous (Function.comp f g)\n⊢ Continuous f","decl":"/-- If `X` is compactly generated, to prove that `f : X → Y` is continuous it is enough to show\nthat for every compact Hausdorff space `K` and every continuous map `g : K → X`,\n`f ∘ g` is continuous. -/\nlemma continuous_from_compactlyGeneratedSpace [CompactlyGeneratedSpace X] (f : X → Y)\n    (h : ∀ (K : Type u) [TopologicalSpace K], [CompactSpace K] → [T2Space K] →\n      (∀ g : K → X, Continuous g → Continuous (f ∘ g))) : Continuous f :=\n  continuous_from_uCompactlyGeneratedSpace f fun K ⟨g, hg⟩ ↦ h K g hg\n\n"}
{"name":"compactlyGeneratedSpace_of_continuous_maps","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\nh : ∀ {Y : Type u} [inst : TopologicalSpace Y] (f : X → Y), (∀ (K : Type u) [inst_1 : TopologicalSpace K] [inst_2 : CompactSpace K] [inst_3 : T2Space K] (g : K → X), Continuous g → Continuous (Function.comp f g)) → Continuous f\n⊢ CompactlyGeneratedSpace X","decl":"/-- Let `f : X → Y`. Suppose that to prove that `f` is continuous, it suffices to show that\nfor every compact Hausdorff space `K` and every continuous map `g : K → X`, `f ∘ g` is continuous.\nThen `X` is compactly generated. -/\nlemma compactlyGeneratedSpace_of_continuous_maps\n    (h : ∀ {Y : Type u} [TopologicalSpace Y] (f : X → Y),\n      (∀ (K : Type u) [TopologicalSpace K], [CompactSpace K] → [T2Space K] →\n        (∀ g : K → X, Continuous g → Continuous (f ∘ g))) → Continuous f) :\n    CompactlyGeneratedSpace X :=\n  uCompactlyGeneratedSpace_of_continuous_maps fun f h' ↦ h f fun K _ _ _ g hg ↦\n    h' (CompHaus.of K) ⟨g, hg⟩\n\n"}
{"name":"compactlyGeneratedSpace_of_isClosed","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\nh : ∀ (s : Set X), (∀ (K : Type u) [inst : TopologicalSpace K] [inst_1 : CompactSpace K] [inst_2 : T2Space K] (f : K → X), Continuous f → IsClosed (Set.preimage f s)) → IsClosed s\n⊢ CompactlyGeneratedSpace X","decl":"/-- A topological space `X` is compactly generated if a set `s` is closed when `f ⁻¹' s` is\nclosed for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem compactlyGeneratedSpace_of_isClosed\n    (h : ∀ (s : Set X), (∀ (K : Type u) [TopologicalSpace K], [CompactSpace K] → [T2Space K] →\n      ∀ (f : K → X), Continuous f → IsClosed (f ⁻¹' s)) → IsClosed s) :\n    CompactlyGeneratedSpace X :=\n  uCompactlyGeneratedSpace_of_isClosed fun s h' ↦ h s fun K _ _ _ f hf ↦ h' (CompHaus.of K) ⟨f, hf⟩\n\n"}
{"name":"CompactlyGeneratedSpace.isClosed'","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : CompactlyGeneratedSpace X\ns : Set X\nhs : ∀ (K : Type u) [inst : TopologicalSpace K] [inst_1 : CompactSpace K] [inst_2 : T2Space K] (f : K → X), Continuous f → IsClosed (Set.preimage f s)\n⊢ IsClosed s","decl":"/-- In a compactly generated space `X`, a set `s` is closed when `f ⁻¹' s` is\nclosed for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem CompactlyGeneratedSpace.isClosed' [CompactlyGeneratedSpace X] {s : Set X}\n    (hs : ∀ (K : Type u) [TopologicalSpace K], [CompactSpace K] → [T2Space K] →\n      ∀ (f : K → X), Continuous f → IsClosed (f ⁻¹' s)) : IsClosed s :=\n  UCompactlyGeneratedSpace.isClosed fun S ⟨f, hf⟩ ↦ hs S f hf\n\n"}
{"name":"CompactlyGeneratedSpace.isClosed","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : CompactlyGeneratedSpace X\ns : Set X\nhs : ∀ ⦃K : Set X⦄, IsCompact K → IsClosed (Inter.inter s K)\n⊢ IsClosed s","decl":"/-- In a compactly generated space `X`, a set `s` is closed when `s ∩ K` is\nclosed for every compact set `K`. -/\ntheorem CompactlyGeneratedSpace.isClosed [CompactlyGeneratedSpace X] {s : Set X}\n    (hs : ∀ ⦃K⦄, IsCompact K → IsClosed (s ∩ K)) : IsClosed s := by\n   refine isClosed' fun K _ _ _ f hf ↦ ?_\n   rw [← Set.preimage_inter_range]\n   exact (hs (isCompact_range hf)).preimage hf\n\n"}
{"name":"compactlyGeneratedSpace_of_isOpen","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝ : TopologicalSpace X\nh : ∀ (s : Set X), (∀ (K : Type u) [inst : TopologicalSpace K] [inst_1 : CompactSpace K] [inst_2 : T2Space K] (f : K → X), Continuous f → IsOpen (Set.preimage f s)) → IsOpen s\n⊢ CompactlyGeneratedSpace X","decl":"/-- A topological space `X` is compactly generated if a set `s` is open when `f ⁻¹' s` is\nopen for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem compactlyGeneratedSpace_of_isOpen\n    (h : ∀ (s : Set X), (∀ (K : Type u) [TopologicalSpace K], [CompactSpace K] → [T2Space K] →\n      ∀ (f : K → X), Continuous f → IsOpen (f ⁻¹' s)) → IsOpen s) :\n    CompactlyGeneratedSpace X :=\n  uCompactlyGeneratedSpace_of_isOpen fun s h' ↦ h s fun K _ _ _ f hf ↦ h' (CompHaus.of K) ⟨f, hf⟩\n\n"}
{"name":"CompactlyGeneratedSpace.isOpen'","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : CompactlyGeneratedSpace X\ns : Set X\nhs : ∀ (K : Type u) [inst : TopologicalSpace K] [inst_1 : CompactSpace K] [inst_2 : T2Space K] (f : K → X), Continuous f → IsOpen (Set.preimage f s)\n⊢ IsOpen s","decl":"/-- In a compactly generated space `X`, a set `s` is open when `f ⁻¹' s` is\nopen for every continuous map `f : K → X`, where `K` is compact Hausdorff. -/\ntheorem CompactlyGeneratedSpace.isOpen' [CompactlyGeneratedSpace X] {s : Set X}\n    (hs : ∀ (K : Type u) [TopologicalSpace K], [CompactSpace K] → [T2Space K] →\n      ∀ (f : K → X), Continuous f → IsOpen (f ⁻¹' s)) : IsOpen s :=\n  UCompactlyGeneratedSpace.isOpen fun S ⟨f, hf⟩ ↦ hs S f hf\n\n"}
{"name":"CompactlyGeneratedSpace.isOpen","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : CompactlyGeneratedSpace X\ns : Set X\nhs : ∀ ⦃K : Set X⦄, IsCompact K → IsOpen (Inter.inter s K)\n⊢ IsOpen s","decl":"/-- In a compactly generated space `X`, a set `s` is open when `s ∩ K` is\nclosed for every open set `K`. -/\ntheorem CompactlyGeneratedSpace.isOpen [CompactlyGeneratedSpace X] {s : Set X}\n    (hs : ∀ ⦃K⦄, IsCompact K → IsOpen (s ∩ K)) : IsOpen s := by\n   refine isOpen' fun K _ _ _ f hf ↦ ?_\n   rw [← Set.preimage_inter_range]\n   exact (hs (isCompact_range hf)).preimage hf\n\n"}
{"name":"compactlyGeneratedSpace_of_coinduced","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ntX : TopologicalSpace X\nY : Type u\ntY : TopologicalSpace Y\ninst✝ : CompactlyGeneratedSpace X\nf : X → Y\nhf : Continuous f\nht : Eq tY (TopologicalSpace.coinduced f tX)\n⊢ CompactlyGeneratedSpace Y","decl":"/-- If the topology of `X` is coinduced by a continuous function whose domain is\ncompactly generated, then so is `X`. -/\ntheorem compactlyGeneratedSpace_of_coinduced\n    {X : Type u} [tX : TopologicalSpace X] {Y : Type u} [tY : TopologicalSpace Y]\n    [CompactlyGeneratedSpace X] {f : X → Y} (hf : Continuous f) (ht : tY = coinduced f tX) :\n    CompactlyGeneratedSpace Y := uCompactlyGeneratedSpace_of_coinduced hf ht\n\n"}
{"name":"instCompactlyGeneratedSpaceSigma","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"ι : Type u\nX : ι → Type v\ninst✝¹ : (i : ι) → TopologicalSpace (X i)\ninst✝ : ∀ (i : ι), CompactlyGeneratedSpace (X i)\n⊢ CompactlyGeneratedSpace (Sigma fun i => X i)","decl":"/-- The sigma type associated to a family of compactly generated spaces is compactly generated. -/\ninstance {ι : Type u} {X : ι → Type v}\n    [∀ i, TopologicalSpace (X i)] [∀ i, CompactlyGeneratedSpace (X i)] :\n    CompactlyGeneratedSpace (Σ i, X i) := by\n  refine compactlyGeneratedSpace_of_isClosed fun s h ↦ isClosed_sigma_iff.2 fun i ↦\n    CompactlyGeneratedSpace.isClosed' fun K _ _ _ f hf ↦ ?_\n  let g : ULift.{u} K → (Σ i, X i) := Sigma.mk i ∘ f ∘ ULift.down\n  have hg : Continuous g := continuous_sigmaMk.comp <| hf.comp continuous_uLift_down\n  exact (h _ g hg).preimage continuous_uLift_up\n\n"}
{"name":"CompactlyGeneratedSpace.isClosed_iff_of_t2","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝² : TopologicalSpace X\ninst✝¹ : T2Space X\ninst✝ : CompactlyGeneratedSpace X\ns : Set X\n⊢ Iff (IsClosed s) (∀ ⦃K : Set X⦄, IsCompact K → IsClosed (Inter.inter s K))","decl":"theorem CompactlyGeneratedSpace.isClosed_iff_of_t2 [CompactlyGeneratedSpace X] (s : Set X) :\n    IsClosed s ↔ ∀ ⦃K⦄, IsCompact K → IsClosed (s ∩ K) where\n  mp hs _ hK := hs.inter hK.isClosed\n  mpr := CompactlyGeneratedSpace.isClosed\n\n"}
{"name":"compactlyGeneratedSpace_of_isClosed_of_t2","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : T2Space X\nh : ∀ (s : Set X), (∀ (K : Set X), IsCompact K → IsClosed (Inter.inter s K)) → IsClosed s\n⊢ CompactlyGeneratedSpace X","decl":"/-- Let `s ⊆ X`. Suppose that `X` is Hausdorff, and that to prove that `s` is closed,\nit suffices to show that for every compact set `K ⊆ X`, `s ∩ K` is closed.\nThen `X` is compactly generated. -/\ntheorem compactlyGeneratedSpace_of_isClosed_of_t2\n    (h : ∀ s, (∀ (K : Set X), IsCompact K → IsClosed (s ∩ K)) → IsClosed s) :\n    CompactlyGeneratedSpace X := by\n  refine compactlyGeneratedSpace_of_isClosed fun s hs ↦ h s fun K hK ↦ ?_\n  rw [Set.inter_comm, ← Subtype.image_preimage_coe]\n  apply hK.isClosed.isClosedMap_subtype_val\n  have : CompactSpace ↑K := isCompact_iff_compactSpace.1 hK\n  exact hs _ Subtype.val continuous_subtype_val\n\n"}
{"name":"compactlyGeneratedSpace_of_isOpen_of_t2","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : T2Space X\nh : ∀ (s : Set X), (∀ (K : Set X), IsCompact K → IsOpen (Set.preimage Subtype.val s)) → IsOpen s\n⊢ CompactlyGeneratedSpace X","decl":"open scoped Set.Notation in\n/-- Let `s ⊆ X`. Suppose that `X` is Hausdorff, and that to prove that `s` is open,\nit suffices to show that for every compact set `K ⊆ X`, `s ∩ K` is open in `K`.\nThen `X` is compactly generated. -/\ntheorem compactlyGeneratedSpace_of_isOpen_of_t2\n    (h : ∀ s, (∀ (K : Set X), IsCompact K → IsOpen (K ↓∩ s)) → IsOpen s) :\n    CompactlyGeneratedSpace X := by\n  refine compactlyGeneratedSpace_of_isOpen fun s hs ↦ h s fun K hK ↦ ?_\n  have : CompactSpace ↑K := isCompact_iff_compactSpace.1 hK\n  exact hs _ Subtype.val continuous_subtype_val\n\n"}
{"name":"instCompactlyGeneratedSpaceOfWeaklyLocallyCompactSpace","module":"Mathlib.Topology.Compactness.CompactlyGeneratedSpace","initialProofState":"X : Type u\ninst✝¹ : TopologicalSpace X\ninst✝ : WeaklyLocallyCompactSpace X\n⊢ CompactlyGeneratedSpace X","decl":"/-- A Hausdorff and weakly locally compact space is compactly generated. -/\ninstance (priority := 100) [WeaklyLocallyCompactSpace X] :\n    CompactlyGeneratedSpace X := by\n  refine compactlyGeneratedSpace_of_isClosed_of_t2 fun s h ↦ ?_\n  rw [isClosed_iff_forall_filter]\n  intro x ℱ hℱ₁ hℱ₂ hℱ₃\n  rcases exists_compact_mem_nhds x with ⟨K, hK, K_mem⟩\n  exact Set.mem_of_mem_inter_left <| isClosed_iff_forall_filter.1 (h _ hK) x ℱ hℱ₁\n    (Filter.inf_principal ▸ le_inf hℱ₂ (le_trans hℱ₃ <| Filter.le_principal_iff.2 K_mem)) hℱ₃\n\n"}
