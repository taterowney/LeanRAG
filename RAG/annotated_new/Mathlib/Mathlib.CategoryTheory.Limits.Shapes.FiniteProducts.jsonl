{"name":"CategoryTheory.Limits.HasFiniteProducts.out","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝ : CategoryTheory.Category.{v, u} C\nself : CategoryTheory.Limits.HasFiniteProducts C\nn : Nat\n⊢ CategoryTheory.Limits.HasLimitsOfShape (CategoryTheory.Discrete (Fin n)) C","decl":"/-- A category has finite products if there exists a limit for every diagram\nwith shape `Discrete J`, where we have `[Finite J]`.\n\nWe require this condition only for `J = Fin n` in the definition, then deduce a version for any\n`J : Type*` as a corollary of this definition.\n-/\nclass HasFiniteProducts : Prop where\n  /-- `C` has finite products -/\n  out (n : ℕ) : HasLimitsOfShape (Discrete (Fin n)) C\n\n"}
{"name":"CategoryTheory.Limits.hasFiniteProducts_of_hasFiniteLimits","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasFiniteLimits C\n⊢ CategoryTheory.Limits.HasFiniteProducts C","decl":"/-- If `C` has finite limits then it has finite products. -/\ninstance (priority := 10) hasFiniteProducts_of_hasFiniteLimits [HasFiniteLimits C] :\n    HasFiniteProducts C :=\n  ⟨fun _ => inferInstance⟩\n\n"}
{"name":"CategoryTheory.Limits.hasLimitsOfShape_discrete","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasFiniteProducts C\nι : Type w\ninst✝ : Finite ι\n⊢ CategoryTheory.Limits.HasLimitsOfShape (CategoryTheory.Discrete ι) C","decl":"instance hasLimitsOfShape_discrete [HasFiniteProducts C] (ι : Type w) [Finite ι] :\n    HasLimitsOfShape (Discrete ι) C := by\n  rcases Finite.exists_equiv_fin ι with ⟨n, ⟨e⟩⟩\n  haveI : HasLimitsOfShape (Discrete (Fin n)) C := HasFiniteProducts.out n\n  exact hasLimitsOfShape_of_equivalence (Discrete.equivalence e.symm)\n\n"}
{"name":"CategoryTheory.Limits.hasFiniteProducts_of_hasProducts","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasProducts C\n⊢ CategoryTheory.Limits.HasFiniteProducts C","decl":"/-- If a category has all products then in particular it has finite products.\n-/\ntheorem hasFiniteProducts_of_hasProducts [HasProducts.{w} C] : HasFiniteProducts C :=\n  ⟨fun _ => hasLimitsOfShape_of_equivalence (Discrete.equivalence Equiv.ulift.{w})⟩\n\n"}
{"name":"CategoryTheory.Limits.HasFiniteCoproducts.out","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝ : CategoryTheory.Category.{v, u} C\nself : CategoryTheory.Limits.HasFiniteCoproducts C\nn : Nat\n⊢ CategoryTheory.Limits.HasColimitsOfShape (CategoryTheory.Discrete (Fin n)) C","decl":"/-- A category has finite coproducts if there exists a colimit for every diagram\nwith shape `Discrete J`, where we have `[Fintype J]`.\n\nWe require this condition only for `J = Fin n` in the definition, then deduce a version for any\n`J : Type*` as a corollary of this definition.\n-/\nclass HasFiniteCoproducts : Prop where\n  /-- `C` has all finite coproducts -/\n  out (n : ℕ) : HasColimitsOfShape (Discrete (Fin n)) C\n\n-- attribute [class] HasFiniteCoproducts Porting note: this doesn't seem necessary in Lean 4\n\n"}
{"name":"CategoryTheory.Limits.hasColimitsOfShape_discrete","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝² : CategoryTheory.Category.{v, u} C\ninst✝¹ : CategoryTheory.Limits.HasFiniteCoproducts C\nι : Type w\ninst✝ : Finite ι\n⊢ CategoryTheory.Limits.HasColimitsOfShape (CategoryTheory.Discrete ι) C","decl":"instance hasColimitsOfShape_discrete [HasFiniteCoproducts C] (ι : Type w) [Finite ι] :\n    HasColimitsOfShape (Discrete ι) C := by\n  rcases Finite.exists_equiv_fin ι with ⟨n, ⟨e⟩⟩\n  haveI : HasColimitsOfShape (Discrete (Fin n)) C := HasFiniteCoproducts.out n\n  exact hasColimitsOfShape_of_equivalence (Discrete.equivalence e.symm)\n\n"}
{"name":"CategoryTheory.Limits.hasFiniteCoproducts_of_hasFiniteColimits","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasFiniteColimits C\n⊢ CategoryTheory.Limits.HasFiniteCoproducts C","decl":"/-- If `C` has finite colimits then it has finite coproducts. -/\ninstance (priority := 10) hasFiniteCoproducts_of_hasFiniteColimits [HasFiniteColimits C] :\n    HasFiniteCoproducts C :=\n  ⟨fun J => by infer_instance⟩\n\n"}
{"name":"CategoryTheory.Limits.hasFiniteCoproducts_of_hasCoproducts","module":"Mathlib.CategoryTheory.Limits.Shapes.FiniteProducts","initialProofState":"C : Type u\ninst✝¹ : CategoryTheory.Category.{v, u} C\ninst✝ : CategoryTheory.Limits.HasCoproducts C\n⊢ CategoryTheory.Limits.HasFiniteCoproducts C","decl":"/-- If a category has all coproducts then in particular it has finite coproducts.\n-/\ntheorem hasFiniteCoproducts_of_hasCoproducts [HasCoproducts.{w} C] : HasFiniteCoproducts C :=\n  ⟨fun _ => hasColimitsOfShape_of_equivalence (Discrete.equivalence Equiv.ulift.{w})⟩\n\n"}
