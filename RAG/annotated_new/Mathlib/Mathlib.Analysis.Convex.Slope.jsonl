{"name":"ConvexOn.slope_mono_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LE.le (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))","decl":"/-- If `f : 𝕜 → 𝕜` is convex, then for any three points `x < y < z` the slope of the secant line of\n`f` on `[x, y]` is less than the slope of the secant line of `f` on `[y, z]`. -/\ntheorem ConvexOn.slope_mono_adjacent (hf : ConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s) (hz : z ∈ s)\n    (hxy : x < y) (hyz : y < z) : (f y - f x) / (y - x) ≤ (f z - f y) / (z - y) := by\n  have hxz := hxy.trans hyz\n  rw [← sub_pos] at hxy hxz hyz\n  suffices f y / (y - x) + f y / (z - y) ≤ f x / (y - x) + f z / (z - y) by\n    ring_nf at this ⊢\n    linarith\n  set a := (z - y) / (z - x)\n  set b := (y - x) / (z - x)\n  have hy : a • x + b • z = y := by field_simp [a, b]; ring\n  have key :=\n    hf.2 hx hz (show 0 ≤ a by apply div_nonneg <;> linarith)\n      (show 0 ≤ b by apply div_nonneg <;> linarith)\n      (show a + b = 1 by field_simp [a, b])\n  rw [hy] at key\n  replace key := mul_le_mul_of_nonneg_left key hxz.le\n  field_simp [a, b, mul_comm (z - x) _] at key ⊢\n  rw [div_le_div_iff_of_pos_right]\n  · linarith\n  · positivity\n\n"}
{"name":"ConcaveOn.slope_anti_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConcaveOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LE.le (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y)) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x))","decl":"/-- If `f : 𝕜 → 𝕜` is concave, then for any three points `x < y < z` the slope of the secant line of\n`f` on `[x, y]` is greater than the slope of the secant line of `f` on `[y, z]`. -/\ntheorem ConcaveOn.slope_anti_adjacent (hf : ConcaveOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s) (hz : z ∈ s)\n    (hxy : x < y) (hyz : y < z) : (f z - f y) / (z - y) ≤ (f y - f x) / (y - x) := by\n  have := neg_le_neg (ConvexOn.slope_mono_adjacent hf.neg hx hz hxy hyz)\n  simp only [Pi.neg_apply, ← neg_div, neg_sub', neg_neg] at this\n  exact this\n\n"}
{"name":"StrictConvexOn.slope_strict_mono_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LT.lt (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))","decl":"/-- If `f : 𝕜 → 𝕜` is strictly convex, then for any three points `x < y < z` the slope of the\nsecant line of `f` on `[x, y]` is strictly less than the slope of the secant line of `f` on\n`[y, z]`. -/\ntheorem StrictConvexOn.slope_strict_mono_adjacent (hf : StrictConvexOn 𝕜 s f) {x y z : 𝕜}\n    (hx : x ∈ s) (hz : z ∈ s) (hxy : x < y) (hyz : y < z) :\n    (f y - f x) / (y - x) < (f z - f y) / (z - y) := by\n  have hxz := hxy.trans hyz\n  have hxz' := hxz.ne\n  rw [← sub_pos] at hxy hxz hyz\n  suffices f y / (y - x) + f y / (z - y) < f x / (y - x) + f z / (z - y) by\n    ring_nf at this ⊢\n    linarith\n  set a := (z - y) / (z - x)\n  set b := (y - x) / (z - x)\n  have hy : a • x + b • z = y := by field_simp [a, b]; ring\n  have key :=\n    hf.2 hx hz hxz' (div_pos hyz hxz) (div_pos hxy hxz)\n      (show a + b = 1 by field_simp [a, b])\n  rw [hy] at key\n  replace key := mul_lt_mul_of_pos_left key hxz\n  field_simp [mul_comm (z - x) _] at key ⊢\n  rw [div_lt_div_iff_of_pos_right]\n  · linarith\n  · positivity\n\n"}
{"name":"StrictConcaveOn.slope_anti_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConcaveOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LT.lt (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y)) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x))","decl":"/-- If `f : 𝕜 → 𝕜` is strictly concave, then for any three points `x < y < z` the slope of the\nsecant line of `f` on `[x, y]` is strictly greater than the slope of the secant line of `f` on\n`[y, z]`. -/\ntheorem StrictConcaveOn.slope_anti_adjacent (hf : StrictConcaveOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s)\n    (hz : z ∈ s) (hxy : x < y) (hyz : y < z) : (f z - f y) / (z - y) < (f y - f x) / (y - x) := by\n  have := neg_lt_neg (StrictConvexOn.slope_strict_mono_adjacent hf.neg hx hz hxy hyz)\n  simp only [Pi.neg_apply, ← neg_div, neg_sub', neg_neg] at this\n  exact this\n\n"}
{"name":"convexOn_of_slope_mono_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhs : Convex 𝕜 s\nhf : ∀ {x y z : 𝕜}, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LE.le (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))\n⊢ ConvexOn 𝕜 s f","decl":"/-- If for any three points `x < y < z`, the slope of the secant line of `f : 𝕜 → 𝕜` on `[x, y]` is\nless than the slope of the secant line of `f` on `[y, z]`, then `f` is convex. -/\ntheorem convexOn_of_slope_mono_adjacent (hs : Convex 𝕜 s)\n    (hf :\n      ∀ {x y z : 𝕜},\n        x ∈ s → z ∈ s → x < y → y < z → (f y - f x) / (y - x) ≤ (f z - f y) / (z - y)) :\n    ConvexOn 𝕜 s f :=\n  LinearOrder.convexOn_of_lt hs fun x hx z hz hxz a b ha hb hab => by\n    let y := a * x + b * z\n    have hxy : x < y := by\n      rw [← one_mul x, ← hab, add_mul]\n      exact add_lt_add_left ((mul_lt_mul_left hb).2 hxz) _\n    have hyz : y < z := by\n      rw [← one_mul z, ← hab, add_mul]\n      exact add_lt_add_right ((mul_lt_mul_left ha).2 hxz) _\n    have : (f y - f x) * (z - y) ≤ (f z - f y) * (y - x) :=\n      (div_le_div_iff₀ (sub_pos.2 hxy) (sub_pos.2 hyz)).1 (hf hx hz hxy hyz)\n    have hxz : 0 < z - x := sub_pos.2 (hxy.trans hyz)\n    have ha : (z - y) / (z - x) = a := by\n      rw [eq_comm, ← sub_eq_iff_eq_add'] at hab\n      dsimp [y]\n      simp_rw [div_eq_iff hxz.ne', ← hab]\n      ring\n    have hb : (y - x) / (z - x) = b := by\n      rw [eq_comm, ← sub_eq_iff_eq_add] at hab\n      dsimp [y]\n      simp_rw [div_eq_iff hxz.ne', ← hab]\n      ring\n    rwa [sub_mul, sub_mul, sub_le_iff_le_add', ← add_sub_assoc, le_sub_iff_add_le, ← mul_add,\n      sub_add_sub_cancel, ← le_div_iff₀ hxz, add_div, mul_div_assoc, mul_div_assoc, mul_comm (f x),\n      mul_comm (f z), ha, hb] at this\n\n"}
{"name":"concaveOn_of_slope_anti_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhs : Convex 𝕜 s\nhf : ∀ {x y z : 𝕜}, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LE.le (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y)) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x))\n⊢ ConcaveOn 𝕜 s f","decl":"/-- If for any three points `x < y < z`, the slope of the secant line of `f : 𝕜 → 𝕜` on `[x, y]` is\ngreater than the slope of the secant line of `f` on `[y, z]`, then `f` is concave. -/\ntheorem concaveOn_of_slope_anti_adjacent (hs : Convex 𝕜 s)\n    (hf :\n      ∀ {x y z : 𝕜},\n        x ∈ s → z ∈ s → x < y → y < z → (f z - f y) / (z - y) ≤ (f y - f x) / (y - x)) :\n    ConcaveOn 𝕜 s f := by\n  rw [← neg_convexOn_iff]\n  refine convexOn_of_slope_mono_adjacent hs fun hx hz hxy hyz => ?_\n  rw [← neg_le_neg_iff]\n  simp_rw [← neg_div, neg_sub, Pi.neg_apply, neg_sub_neg]\n  exact hf hx hz hxy hyz\n\n"}
{"name":"strictConvexOn_of_slope_strict_mono_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhs : Convex 𝕜 s\nhf : ∀ {x y z : 𝕜}, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LT.lt (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))\n⊢ StrictConvexOn 𝕜 s f","decl":"/-- If for any three points `x < y < z`, the slope of the secant line of `f : 𝕜 → 𝕜` on `[x, y]` is\nstrictly less than the slope of the secant line of `f` on `[y, z]`, then `f` is strictly convex. -/\ntheorem strictConvexOn_of_slope_strict_mono_adjacent (hs : Convex 𝕜 s)\n    (hf :\n      ∀ {x y z : 𝕜},\n        x ∈ s → z ∈ s → x < y → y < z → (f y - f x) / (y - x) < (f z - f y) / (z - y)) :\n    StrictConvexOn 𝕜 s f :=\n  LinearOrder.strictConvexOn_of_lt hs fun x hx z hz hxz a b ha hb hab => by\n    let y := a * x + b * z\n    have hxy : x < y := by\n      rw [← one_mul x, ← hab, add_mul]\n      exact add_lt_add_left ((mul_lt_mul_left hb).2 hxz) _\n    have hyz : y < z := by\n      rw [← one_mul z, ← hab, add_mul]\n      exact add_lt_add_right ((mul_lt_mul_left ha).2 hxz) _\n    have : (f y - f x) * (z - y) < (f z - f y) * (y - x) :=\n      (div_lt_div_iff₀ (sub_pos.2 hxy) (sub_pos.2 hyz)).1 (hf hx hz hxy hyz)\n    have hxz : 0 < z - x := sub_pos.2 (hxy.trans hyz)\n    have ha : (z - y) / (z - x) = a := by\n      rw [eq_comm, ← sub_eq_iff_eq_add'] at hab\n      dsimp [y]\n      simp_rw [div_eq_iff hxz.ne', ← hab]\n      ring\n    have hb : (y - x) / (z - x) = b := by\n      rw [eq_comm, ← sub_eq_iff_eq_add] at hab\n      dsimp [y]\n      simp_rw [div_eq_iff hxz.ne', ← hab]\n      ring\n    rwa [sub_mul, sub_mul, sub_lt_iff_lt_add', ← add_sub_assoc, lt_sub_iff_add_lt, ← mul_add,\n      sub_add_sub_cancel, ← lt_div_iff₀ hxz, add_div, mul_div_assoc, mul_div_assoc, mul_comm (f x),\n      mul_comm (f z), ha, hb] at this\n\n"}
{"name":"strictConcaveOn_of_slope_strict_anti_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhs : Convex 𝕜 s\nhf : ∀ {x y z : 𝕜}, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LT.lt (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y)) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x))\n⊢ StrictConcaveOn 𝕜 s f","decl":"/-- If for any three points `x < y < z`, the slope of the secant line of `f : 𝕜 → 𝕜` on `[x, y]` is\nstrictly greater than the slope of the secant line of `f` on `[y, z]`, then `f` is strictly concave.\n-/\ntheorem strictConcaveOn_of_slope_strict_anti_adjacent (hs : Convex 𝕜 s)\n    (hf :\n      ∀ {x y z : 𝕜},\n        x ∈ s → z ∈ s → x < y → y < z → (f z - f y) / (z - y) < (f y - f x) / (y - x)) :\n    StrictConcaveOn 𝕜 s f := by\n  rw [← neg_strictConvexOn_iff]\n  refine strictConvexOn_of_slope_strict_mono_adjacent hs fun hx hz hxy hyz => ?_\n  rw [← neg_lt_neg_iff]\n  simp_rw [← neg_div, neg_sub, Pi.neg_apply, neg_sub_neg]\n  exact hf hx hz hxy hyz\n\n"}
{"name":"convexOn_iff_slope_mono_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\n⊢ Iff (ConvexOn 𝕜 s f) (And (Convex 𝕜 s) (∀ ⦃x y z : 𝕜⦄, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LE.le (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))))","decl":"/-- A function `f : 𝕜 → 𝕜` is convex iff for any three points `x < y < z` the slope of the secant\nline of `f` on `[x, y]` is less than the slope of the secant line of `f` on `[y, z]`. -/\ntheorem convexOn_iff_slope_mono_adjacent :\n    ConvexOn 𝕜 s f ↔\n      Convex 𝕜 s ∧ ∀ ⦃x y z : 𝕜⦄,\n          x ∈ s → z ∈ s → x < y → y < z → (f y - f x) / (y - x) ≤ (f z - f y) / (z - y) :=\n  ⟨fun h => ⟨h.1, fun _ _ _ => h.slope_mono_adjacent⟩, fun h =>\n    convexOn_of_slope_mono_adjacent h.1 (@fun _ _ _ hx hy => h.2 hx hy)⟩\n\n"}
{"name":"concaveOn_iff_slope_anti_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\n⊢ Iff (ConcaveOn 𝕜 s f) (And (Convex 𝕜 s) (∀ ⦃x y z : 𝕜⦄, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LE.le (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y)) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x))))","decl":"/-- A function `f : 𝕜 → 𝕜` is concave iff for any three points `x < y < z` the slope of the secant\nline of `f` on `[x, y]` is greater than the slope of the secant line of `f` on `[y, z]`. -/\ntheorem concaveOn_iff_slope_anti_adjacent :\n    ConcaveOn 𝕜 s f ↔\n      Convex 𝕜 s ∧\n        ∀ ⦃x y z : 𝕜⦄,\n          x ∈ s → z ∈ s → x < y → y < z → (f z - f y) / (z - y) ≤ (f y - f x) / (y - x) :=\n  ⟨fun h => ⟨h.1, fun _ _ _ => h.slope_anti_adjacent⟩, fun h =>\n    concaveOn_of_slope_anti_adjacent h.1 (@fun _ _ _ hx hy => h.2 hx hy)⟩\n\n"}
{"name":"strictConvexOn_iff_slope_strict_mono_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\n⊢ Iff (StrictConvexOn 𝕜 s f) (And (Convex 𝕜 s) (∀ ⦃x y z : 𝕜⦄, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LT.lt (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))))","decl":"/-- A function `f : 𝕜 → 𝕜` is strictly convex iff for any three points `x < y < z` the slope of\nthe secant line of `f` on `[x, y]` is strictly less than the slope of the secant line of `f` on\n`[y, z]`. -/\ntheorem strictConvexOn_iff_slope_strict_mono_adjacent :\n    StrictConvexOn 𝕜 s f ↔\n      Convex 𝕜 s ∧\n        ∀ ⦃x y z : 𝕜⦄,\n          x ∈ s → z ∈ s → x < y → y < z → (f y - f x) / (y - x) < (f z - f y) / (z - y) :=\n  ⟨fun h => ⟨h.1, fun _ _ _ => h.slope_strict_mono_adjacent⟩, fun h =>\n    strictConvexOn_of_slope_strict_mono_adjacent h.1 (@fun _ _ _ hx hy => h.2 hx hy)⟩\n\n"}
{"name":"strictConcaveOn_iff_slope_strict_anti_adjacent","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\n⊢ Iff (StrictConcaveOn 𝕜 s f) (And (Convex 𝕜 s) (∀ ⦃x y z : 𝕜⦄, Membership.mem s x → Membership.mem s z → LT.lt x y → LT.lt y z → LT.lt (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y)) (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x))))","decl":"/-- A function `f : 𝕜 → 𝕜` is strictly concave iff for any three points `x < y < z` the slope of\nthe secant line of `f` on `[x, y]` is strictly greater than the slope of the secant line of `f` on\n`[y, z]`. -/\ntheorem strictConcaveOn_iff_slope_strict_anti_adjacent :\n    StrictConcaveOn 𝕜 s f ↔\n      Convex 𝕜 s ∧\n        ∀ ⦃x y z : 𝕜⦄,\n          x ∈ s → z ∈ s → x < y → y < z → (f z - f y) / (z - y) < (f y - f x) / (y - x) :=\n  ⟨fun h => ⟨h.1, fun _ _ _ => h.slope_anti_adjacent⟩, fun h =>\n    strictConcaveOn_of_slope_strict_anti_adjacent h.1 (@fun _ _ _ hx hy => h.2 hx hy)⟩\n\n"}
{"name":"ConvexOn.secant_mono_aux1","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LE.le (HMul.hMul (HSub.hSub z x) (f y)) (HAdd.hAdd (HMul.hMul (HSub.hSub z y) (f x)) (HMul.hMul (HSub.hSub y x) (f z)))","decl":"theorem ConvexOn.secant_mono_aux1 (hf : ConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s) (hz : z ∈ s)\n    (hxy : x < y) (hyz : y < z) : (z - x) * f y ≤ (z - y) * f x + (y - x) * f z := by\n  have hxy' : 0 < y - x := by linarith\n  have hyz' : 0 < z - y := by linarith\n  have hxz' : 0 < z - x := by linarith\n  rw [← le_div_iff₀' hxz']\n  have ha : 0 ≤ (z - y) / (z - x) := by positivity\n  have hb : 0 ≤ (y - x) / (z - x) := by positivity\n  calc\n    f y = f ((z - y) / (z - x) * x + (y - x) / (z - x) * z) := ?_\n    _ ≤ (z - y) / (z - x) * f x + (y - x) / (z - x) * f z := hf.2 hx hz ha hb ?_\n    _ = ((z - y) * f x + (y - x) * f z) / (z - x) := ?_\n  · congr 1\n    field_simp\n    ring\n  · field_simp\n  · field_simp\n\n"}
{"name":"ConvexOn.secant_mono_aux2","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LE.le (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f x)) (HSub.hSub z x))","decl":"theorem ConvexOn.secant_mono_aux2 (hf : ConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s) (hz : z ∈ s)\n    (hxy : x < y) (hyz : y < z) : (f y - f x) / (y - x) ≤ (f z - f x) / (z - x) := by\n  have hxy' : 0 < y - x := by linarith\n  have hxz' : 0 < z - x := by linarith\n  rw [div_le_div_iff₀ hxy' hxz']\n  linarith only [hf.secant_mono_aux1 hx hz hxy hyz]\n\n"}
{"name":"ConvexOn.secant_mono_aux3","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LE.le (HDiv.hDiv (HSub.hSub (f z) (f x)) (HSub.hSub z x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))","decl":"theorem ConvexOn.secant_mono_aux3 (hf : ConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s) (hz : z ∈ s)\n    (hxy : x < y) (hyz : y < z) : (f z - f x) / (z - x) ≤ (f z - f y) / (z - y) := by\n  have hyz' : 0 < z - y := by linarith\n  have hxz' : 0 < z - x := by linarith\n  rw [div_le_div_iff₀ hxz' hyz']\n  linarith only [hf.secant_mono_aux1 hx hz hxy hyz]\n\n"}
{"name":"ConvexOn.secant_mono","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConvexOn 𝕜 s f\na x y : 𝕜\nha : Membership.mem s a\nhx : Membership.mem s x\nhy : Membership.mem s y\nhxa : Ne x a\nhya : Ne y a\nhxy : LE.le x y\n⊢ LE.le (HDiv.hDiv (HSub.hSub (f x) (f a)) (HSub.hSub x a)) (HDiv.hDiv (HSub.hSub (f y) (f a)) (HSub.hSub y a))","decl":"/-- If `f : 𝕜 → 𝕜` is convex, then for any point `a` the slope of the secant line of `f` through `a`\nand `b ≠ a` is monotone with respect to `b`. -/\ntheorem ConvexOn.secant_mono (hf : ConvexOn 𝕜 s f) {a x y : 𝕜} (ha : a ∈ s) (hx : x ∈ s)\n    (hy : y ∈ s) (hxa : x ≠ a) (hya : y ≠ a) (hxy : x ≤ y) :\n    (f x - f a) / (x - a) ≤ (f y - f a) / (y - a) := by\n  rcases eq_or_lt_of_le hxy with (rfl | hxy)\n  · simp\n  cases' lt_or_gt_of_ne hxa with hxa hxa\n  · cases' lt_or_gt_of_ne hya with hya hya\n    · convert hf.secant_mono_aux3 hx ha hxy hya using 1 <;> rw [← neg_div_neg_eq] <;> field_simp\n    · convert hf.slope_mono_adjacent hx hy hxa hya using 1\n      rw [← neg_div_neg_eq]; field_simp\n  · exact hf.secant_mono_aux2 ha hy hxa hxy\n\n"}
{"name":"StrictConvexOn.secant_strict_mono_aux1","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LT.lt (HMul.hMul (HSub.hSub z x) (f y)) (HAdd.hAdd (HMul.hMul (HSub.hSub z y) (f x)) (HMul.hMul (HSub.hSub y x) (f z)))","decl":"theorem StrictConvexOn.secant_strict_mono_aux1 (hf : StrictConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s)\n    (hz : z ∈ s) (hxy : x < y) (hyz : y < z) : (z - x) * f y < (z - y) * f x + (y - x) * f z := by\n  have hxy' : 0 < y - x := by linarith\n  have hyz' : 0 < z - y := by linarith\n  have hxz' : 0 < z - x := by linarith\n  rw [← lt_div_iff₀' hxz']\n  have ha : 0 < (z - y) / (z - x) := by positivity\n  have hb : 0 < (y - x) / (z - x) := by positivity\n  calc\n    f y = f ((z - y) / (z - x) * x + (y - x) / (z - x) * z) := ?_\n    _ < (z - y) / (z - x) * f x + (y - x) / (z - x) * f z := hf.2 hx hz (by linarith) ha hb ?_\n    _ = ((z - y) * f x + (y - x) * f z) / (z - x) := ?_\n  · congr 1\n    field_simp\n    ring\n  · field_simp\n  · field_simp\n\n"}
{"name":"StrictConvexOn.secant_strict_mono_aux2","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LT.lt (HDiv.hDiv (HSub.hSub (f y) (f x)) (HSub.hSub y x)) (HDiv.hDiv (HSub.hSub (f z) (f x)) (HSub.hSub z x))","decl":"theorem StrictConvexOn.secant_strict_mono_aux2 (hf : StrictConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s)\n    (hz : z ∈ s) (hxy : x < y) (hyz : y < z) : (f y - f x) / (y - x) < (f z - f x) / (z - x) := by\n  have hxy' : 0 < y - x := by linarith\n  have hxz' : 0 < z - x := by linarith\n  rw [div_lt_div_iff₀ hxy' hxz']\n  linarith only [hf.secant_strict_mono_aux1 hx hz hxy hyz]\n\n"}
{"name":"StrictConvexOn.secant_strict_mono_aux3","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConvexOn 𝕜 s f\nx y z : 𝕜\nhx : Membership.mem s x\nhz : Membership.mem s z\nhxy : LT.lt x y\nhyz : LT.lt y z\n⊢ LT.lt (HDiv.hDiv (HSub.hSub (f z) (f x)) (HSub.hSub z x)) (HDiv.hDiv (HSub.hSub (f z) (f y)) (HSub.hSub z y))","decl":"theorem StrictConvexOn.secant_strict_mono_aux3 (hf : StrictConvexOn 𝕜 s f) {x y z : 𝕜} (hx : x ∈ s)\n    (hz : z ∈ s) (hxy : x < y) (hyz : y < z) : (f z - f x) / (z - x) < (f z - f y) / (z - y) := by\n  have hyz' : 0 < z - y := by linarith\n  have hxz' : 0 < z - x := by linarith\n  rw [div_lt_div_iff₀ hxz' hyz']\n  linarith only [hf.secant_strict_mono_aux1 hx hz hxy hyz]\n\n"}
{"name":"StrictConvexOn.secant_strict_mono","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConvexOn 𝕜 s f\na x y : 𝕜\nha : Membership.mem s a\nhx : Membership.mem s x\nhy : Membership.mem s y\nhxa : Ne x a\nhya : Ne y a\nhxy : LT.lt x y\n⊢ LT.lt (HDiv.hDiv (HSub.hSub (f x) (f a)) (HSub.hSub x a)) (HDiv.hDiv (HSub.hSub (f y) (f a)) (HSub.hSub y a))","decl":"/-- If `f : 𝕜 → 𝕜` is strictly convex, then for any point `a` the slope of the secant line of `f`\nthrough `a` and `b` is strictly monotone with respect to `b`. -/\ntheorem StrictConvexOn.secant_strict_mono (hf : StrictConvexOn 𝕜 s f) {a x y : 𝕜} (ha : a ∈ s)\n    (hx : x ∈ s) (hy : y ∈ s) (hxa : x ≠ a) (hya : y ≠ a) (hxy : x < y) :\n    (f x - f a) / (x - a) < (f y - f a) / (y - a) := by\n  cases' lt_or_gt_of_ne hxa with hxa hxa\n  · cases' lt_or_gt_of_ne hya with hya hya\n    · convert hf.secant_strict_mono_aux3 hx ha hxy hya using 1 <;> rw [← neg_div_neg_eq] <;>\n        field_simp\n    · convert hf.slope_strict_mono_adjacent hx hy hxa hya using 1\n      rw [← neg_div_neg_eq]; field_simp\n  · exact hf.secant_strict_mono_aux2 ha hy hxa hxy\n\n"}
{"name":"StrictConcaveOn.secant_strict_mono","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : StrictConcaveOn 𝕜 s f\na x y : 𝕜\nha : Membership.mem s a\nhx : Membership.mem s x\nhy : Membership.mem s y\nhxa : Ne x a\nhya : Ne y a\nhxy : LT.lt x y\n⊢ LT.lt (HDiv.hDiv (HSub.hSub (f y) (f a)) (HSub.hSub y a)) (HDiv.hDiv (HSub.hSub (f x) (f a)) (HSub.hSub x a))","decl":"/-- If `f : 𝕜 → 𝕜` is strictly concave, then for any point `a` the slope of the secant line of `f`\nthrough `a` and `b` is strictly antitone with respect to `b`. -/\ntheorem StrictConcaveOn.secant_strict_mono (hf : StrictConcaveOn 𝕜 s f) {a x y : 𝕜} (ha : a ∈ s)\n    (hx : x ∈ s) (hy : y ∈ s) (hxa : x ≠ a) (hya : y ≠ a) (hxy : x < y) :\n    (f y - f a) / (y - a) < (f x - f a) / (x - a) := by\n  have key := hf.neg.secant_strict_mono ha hx hy hxa hya hxy\n  simp only [Pi.neg_apply] at key\n  rw [← neg_lt_neg_iff]\n  convert key using 1 <;> field_simp <;> ring\n\n"}
{"name":"ConvexOn.strict_mono_of_lt","module":"Mathlib.Analysis.Convex.Slope","initialProofState":"𝕜 : Type u_1\ninst✝ : LinearOrderedField 𝕜\ns : Set 𝕜\nf : 𝕜 → 𝕜\nhf : ConvexOn 𝕜 s f\nx y : 𝕜\nhx : Membership.mem s x\nhxy : LT.lt x y\nhxy' : LT.lt (f x) (f y)\n⊢ StrictMonoOn f (Inter.inter s (Set.Ici y))","decl":"/-- If `f` is convex on a set `s` in a linearly ordered field, and `f x < f y` for two points\n`x < y` in `s`, then `f` is strictly monotone on `s ∩ [y, ∞)`. -/\ntheorem ConvexOn.strict_mono_of_lt (hf : ConvexOn 𝕜 s f) {x y : 𝕜} (hx : x ∈ s) (hxy : x < y)\n    (hxy' : f x < f y) : StrictMonoOn f (s ∩ Set.Ici y) := by\n  intro u hu v hv huv\n  have step1 : ∀ {z : 𝕜}, z ∈ s ∩ Set.Ioi y → f y < f z := by\n    intros z hz\n    refine hf.lt_right_of_left_lt hx hz.1 ?_ hxy'\n    rw [openSegment_eq_Ioo (hxy.trans hz.2)]\n    exact ⟨hxy, hz.2⟩\n  rcases eq_or_lt_of_le hu.2 with (rfl | hu2)\n  · exact step1 ⟨hv.1, huv⟩\n  · refine hf.lt_right_of_left_lt ?_ hv.1 ?_ (step1 ⟨hu.1, hu2⟩)\n    · apply hf.1.segment_subset hx hu.1\n      rw [segment_eq_Icc (hxy.le.trans hu.2)]\n      exact ⟨hxy.le, hu.2⟩\n    · rw [openSegment_eq_Ioo (hu2.trans huv)]\n      exact ⟨hu2, huv⟩\n"}
