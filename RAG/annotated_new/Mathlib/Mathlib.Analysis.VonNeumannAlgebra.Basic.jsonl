{"name":"WStarAlgebra.exists_predual","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"M : Type u\ninst✝ : CStarAlgebra M\nself : WStarAlgebra M\n⊢ Exists fun X => Exists fun x => Exists fun x_1 => Exists fun x_2 => Nonempty (LinearIsometryEquiv (starRingEnd Complex) (NormedSpace.Dual Complex X) M)","decl":"/-- Sakai's definition of a von Neumann algebra as a C^* algebra with a Banach space predual.\n\nSo that we can unambiguously talk about these \"abstract\" von Neumann algebras\nin parallel with the \"concrete\" ones (weakly closed *-subalgebras of B(H)),\nwe name this definition `WStarAlgebra`.\n\nNote that for now we only assert the mere existence of predual, rather than picking one.\nThis may later prove problematic, and need to be revisited.\nPicking one may cause problems with definitional unification of different instances.\nOne the other hand, not picking one means that the weak-* topology\n(which depends on a choice of predual) must be defined using the choice,\nand we may be unhappy with the resulting opaqueness of the definition.\n-/\nclass WStarAlgebra (M : Type u) [CStarAlgebra M] : Prop where\n  /-- There is a Banach space `X` whose dual is isometrically (conjugate-linearly) isomorphic\n  to the `WStarAlgebra`. -/\n  exists_predual :\n    ∃ (X : Type u) (_ : NormedAddCommGroup X) (_ : NormedSpace ℂ X) (_ : CompleteSpace X),\n      Nonempty (NormedSpace.Dual ℂ X ≃ₗᵢ⋆[ℂ] M)\n\n-- TODO: Without this, `VonNeumannAlgebra` times out. Why?\n"}
{"name":"VonNeumannAlgebra.mk.inj","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\ntoStarSubalgebra✝ : StarSubalgebra Complex (ContinuousLinearMap (RingHom.id Complex) H H)\ncentralizer_centralizer'✝ : Eq toStarSubalgebra✝.carrier.centralizer.centralizer toStarSubalgebra✝.carrier\ntoStarSubalgebra : StarSubalgebra Complex (ContinuousLinearMap (RingHom.id Complex) H H)\ncentralizer_centralizer' : Eq toStarSubalgebra.carrier.centralizer.centralizer toStarSubalgebra.carrier\nx✝ : Eq { toStarSubalgebra := toStarSubalgebra✝, centralizer_centralizer' := centralizer_centralizer'✝ } { toStarSubalgebra := toStarSubalgebra, centralizer_centralizer' := centralizer_centralizer' }\n⊢ Eq toStarSubalgebra✝ toStarSubalgebra","decl":"/-- The double commutant definition of a von Neumann algebra,\nas a *-closed subalgebra of bounded operators on a Hilbert space,\nwhich is equal to its double commutant.\n\nNote that this definition is parameterised by the Hilbert space\non which the algebra faithfully acts, as is standard in the literature.\nSee `WStarAlgebra` for the abstract notion (a C^*-algebra with Banach space predual).\n\nNote this is a bundled structure, parameterised by the Hilbert space `H`,\nrather than a typeclass on the type of elements.\nThus we can't say that the bounded operators `H →L[ℂ] H` form a `VonNeumannAlgebra`\n(although we will later construct the instance `WStarAlgebra (H →L[ℂ] H)`),\nand instead will use `⊤ : VonNeumannAlgebra H`.\n-/\n-- Porting note: I don't think the nonempty instance linter exists yet\nstructure VonNeumannAlgebra (H : Type u) [NormedAddCommGroup H] [InnerProductSpace ℂ H]\n    [CompleteSpace H] extends StarSubalgebra ℂ (H →L[ℂ] H) where\n  /-- The double commutant (a.k.a. centralizer) of a `VonNeumannAlgebra` is itself. -/\n  centralizer_centralizer' : Set.centralizer (Set.centralizer carrier) = carrier\n\n"}
{"name":"VonNeumannAlgebra.mk.injEq","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\ntoStarSubalgebra✝ : StarSubalgebra Complex (ContinuousLinearMap (RingHom.id Complex) H H)\ncentralizer_centralizer'✝ : Eq toStarSubalgebra✝.carrier.centralizer.centralizer toStarSubalgebra✝.carrier\ntoStarSubalgebra : StarSubalgebra Complex (ContinuousLinearMap (RingHom.id Complex) H H)\ncentralizer_centralizer' : Eq toStarSubalgebra.carrier.centralizer.centralizer toStarSubalgebra.carrier\n⊢ Eq (Eq { toStarSubalgebra := toStarSubalgebra✝, centralizer_centralizer' := centralizer_centralizer'✝ } { toStarSubalgebra := toStarSubalgebra, centralizer_centralizer' := centralizer_centralizer' }) (Eq toStarSubalgebra✝ toStarSubalgebra)","decl":"/-- The double commutant definition of a von Neumann algebra,\nas a *-closed subalgebra of bounded operators on a Hilbert space,\nwhich is equal to its double commutant.\n\nNote that this definition is parameterised by the Hilbert space\non which the algebra faithfully acts, as is standard in the literature.\nSee `WStarAlgebra` for the abstract notion (a C^*-algebra with Banach space predual).\n\nNote this is a bundled structure, parameterised by the Hilbert space `H`,\nrather than a typeclass on the type of elements.\nThus we can't say that the bounded operators `H →L[ℂ] H` form a `VonNeumannAlgebra`\n(although we will later construct the instance `WStarAlgebra (H →L[ℂ] H)`),\nand instead will use `⊤ : VonNeumannAlgebra H`.\n-/\n-- Porting note: I don't think the nonempty instance linter exists yet\nstructure VonNeumannAlgebra (H : Type u) [NormedAddCommGroup H] [InnerProductSpace ℂ H]\n    [CompleteSpace H] extends StarSubalgebra ℂ (H →L[ℂ] H) where\n  /-- The double commutant (a.k.a. centralizer) of a `VonNeumannAlgebra` is itself. -/\n  centralizer_centralizer' : Set.centralizer (Set.centralizer carrier) = carrier\n\n"}
{"name":"VonNeumannAlgebra.centralizer_centralizer'","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nself : VonNeumannAlgebra H\n⊢ Eq self.carrier.centralizer.centralizer self.carrier","decl":"/-- The double commutant definition of a von Neumann algebra,\nas a *-closed subalgebra of bounded operators on a Hilbert space,\nwhich is equal to its double commutant.\n\nNote that this definition is parameterised by the Hilbert space\non which the algebra faithfully acts, as is standard in the literature.\nSee `WStarAlgebra` for the abstract notion (a C^*-algebra with Banach space predual).\n\nNote this is a bundled structure, parameterised by the Hilbert space `H`,\nrather than a typeclass on the type of elements.\nThus we can't say that the bounded operators `H →L[ℂ] H` form a `VonNeumannAlgebra`\n(although we will later construct the instance `WStarAlgebra (H →L[ℂ] H)`),\nand instead will use `⊤ : VonNeumannAlgebra H`.\n-/\n-- Porting note: I don't think the nonempty instance linter exists yet\nstructure VonNeumannAlgebra (H : Type u) [NormedAddCommGroup H] [InnerProductSpace ℂ H]\n    [CompleteSpace H] extends StarSubalgebra ℂ (H →L[ℂ] H) where\n  /-- The double commutant (a.k.a. centralizer) of a `VonNeumannAlgebra` is itself. -/\n  centralizer_centralizer' : Set.centralizer (Set.centralizer carrier) = carrier\n\n"}
{"name":"VonNeumannAlgebra.mk.sizeOf_spec","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝³ : NormedAddCommGroup H\ninst✝² : InnerProductSpace Complex H\ninst✝¹ : CompleteSpace H\ninst✝ : SizeOf H\ntoStarSubalgebra : StarSubalgebra Complex (ContinuousLinearMap (RingHom.id Complex) H H)\ncentralizer_centralizer' : Eq toStarSubalgebra.carrier.centralizer.centralizer toStarSubalgebra.carrier\n⊢ Eq (SizeOf.sizeOf { toStarSubalgebra := toStarSubalgebra, centralizer_centralizer' := centralizer_centralizer' }) (HAdd.hAdd (HAdd.hAdd 1 (SizeOf.sizeOf toStarSubalgebra)) (SizeOf.sizeOf centralizer_centralizer'))","decl":"/-- The double commutant definition of a von Neumann algebra,\nas a *-closed subalgebra of bounded operators on a Hilbert space,\nwhich is equal to its double commutant.\n\nNote that this definition is parameterised by the Hilbert space\non which the algebra faithfully acts, as is standard in the literature.\nSee `WStarAlgebra` for the abstract notion (a C^*-algebra with Banach space predual).\n\nNote this is a bundled structure, parameterised by the Hilbert space `H`,\nrather than a typeclass on the type of elements.\nThus we can't say that the bounded operators `H →L[ℂ] H` form a `VonNeumannAlgebra`\n(although we will later construct the instance `WStarAlgebra (H →L[ℂ] H)`),\nand instead will use `⊤ : VonNeumannAlgebra H`.\n-/\n-- Porting note: I don't think the nonempty instance linter exists yet\nstructure VonNeumannAlgebra (H : Type u) [NormedAddCommGroup H] [InnerProductSpace ℂ H]\n    [CompleteSpace H] extends StarSubalgebra ℂ (H →L[ℂ] H) where\n  /-- The double commutant (a.k.a. centralizer) of a `VonNeumannAlgebra` is itself. -/\n  centralizer_centralizer' : Set.centralizer (Set.centralizer carrier) = carrier\n\n"}
{"name":"VonNeumannAlgebra.instStarMemClass","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\n⊢ StarMemClass (VonNeumannAlgebra H) (ContinuousLinearMap (RingHom.id Complex) H H)","decl":"noncomputable instance instStarMemClass : StarMemClass (VonNeumannAlgebra H) (H →L[ℂ] H) where\n  star_mem {s} := s.star_mem'\n\n"}
{"name":"VonNeumannAlgebra.instSubringClass","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\n⊢ SubringClass (VonNeumannAlgebra H) (ContinuousLinearMap (RingHom.id Complex) H H)","decl":"instance instSubringClass : SubringClass (VonNeumannAlgebra H) (H →L[ℂ] H) where\n  add_mem {s} := s.add_mem'\n  mul_mem {s} := s.mul_mem'\n  one_mem {s} := s.one_mem'\n  zero_mem {s} := s.zero_mem'\n  neg_mem {s} a ha := show -a ∈ s.toStarSubalgebra from neg_mem ha\n\n"}
{"name":"VonNeumannAlgebra.mem_carrier","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : VonNeumannAlgebra H\nx : ContinuousLinearMap (RingHom.id Complex) H H\n⊢ Iff (Membership.mem S.toStarSubalgebra x) (Membership.mem (↑S) x)","decl":"@[simp]\ntheorem mem_carrier {S : VonNeumannAlgebra H} {x : H →L[ℂ] H} :\n    x ∈ S.toStarSubalgebra ↔ x ∈ (S : Set (H →L[ℂ] H)) :=\n  Iff.rfl\n\n"}
{"name":"VonNeumannAlgebra.coe_toStarSubalgebra","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : VonNeumannAlgebra H\n⊢ Eq ↑S.toStarSubalgebra ↑S","decl":"@[simp]\ntheorem coe_toStarSubalgebra (S : VonNeumannAlgebra H) :\n    (S.toStarSubalgebra : Set (H →L[ℂ] H)) = S :=\n  rfl\n\n"}
{"name":"VonNeumannAlgebra.coe_mk","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : StarSubalgebra Complex (ContinuousLinearMap (RingHom.id Complex) H H)\nh : Eq S.carrier.centralizer.centralizer S.carrier\n⊢ Eq ↑{ toStarSubalgebra := S, centralizer_centralizer' := h } ↑S","decl":"@[simp]\ntheorem coe_mk (S : StarSubalgebra ℂ (H →L[ℂ] H)) (h) :\n    ((⟨S, h⟩ : VonNeumannAlgebra H) : Set (H →L[ℂ] H)) = S :=\n  rfl\n\n"}
{"name":"VonNeumannAlgebra.ext_iff","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS T : VonNeumannAlgebra H\n⊢ Iff (Eq S T) (∀ (x : ContinuousLinearMap (RingHom.id Complex) H H), Iff (Membership.mem S x) (Membership.mem T x))","decl":"@[ext]\ntheorem ext {S T : VonNeumannAlgebra H} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"VonNeumannAlgebra.ext","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS T : VonNeumannAlgebra H\nh : ∀ (x : ContinuousLinearMap (RingHom.id Complex) H H), Iff (Membership.mem S x) (Membership.mem T x)\n⊢ Eq S T","decl":"@[ext]\ntheorem ext {S T : VonNeumannAlgebra H} (h : ∀ x, x ∈ S ↔ x ∈ T) : S = T :=\n  SetLike.ext h\n\n"}
{"name":"VonNeumannAlgebra.centralizer_centralizer","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : VonNeumannAlgebra H\n⊢ Eq (↑S).centralizer.centralizer ↑S","decl":"@[simp]\ntheorem centralizer_centralizer (S : VonNeumannAlgebra H) :\n    Set.centralizer (Set.centralizer (S : Set (H →L[ℂ] H))) = S :=\n  S.centralizer_centralizer'\n\n"}
{"name":"VonNeumannAlgebra.coe_commutant","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : VonNeumannAlgebra H\n⊢ Eq (↑S.commutant) (↑S).centralizer","decl":"@[simp]\ntheorem coe_commutant (S : VonNeumannAlgebra H) :\n    ↑S.commutant = Set.centralizer (S : Set (H →L[ℂ] H)) := by\n  simp [commutant]\n\n"}
{"name":"VonNeumannAlgebra.mem_commutant_iff","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : VonNeumannAlgebra H\nz : ContinuousLinearMap (RingHom.id Complex) H H\n⊢ Iff (Membership.mem S.commutant z) (∀ (g : ContinuousLinearMap (RingHom.id Complex) H H), Membership.mem S g → Eq (HMul.hMul g z) (HMul.hMul z g))","decl":"@[simp]\ntheorem mem_commutant_iff {S : VonNeumannAlgebra H} {z : H →L[ℂ] H} :\n    z ∈ S.commutant ↔ ∀ g ∈ S, g * z = z * g := by\n  rw [← SetLike.mem_coe, coe_commutant]\n  rfl\n\n"}
{"name":"VonNeumannAlgebra.commutant_commutant","module":"Mathlib.Analysis.VonNeumannAlgebra.Basic","initialProofState":"H : Type u\ninst✝² : NormedAddCommGroup H\ninst✝¹ : InnerProductSpace Complex H\ninst✝ : CompleteSpace H\nS : VonNeumannAlgebra H\n⊢ Eq S.commutant.commutant S","decl":"@[simp]\ntheorem commutant_commutant (S : VonNeumannAlgebra H) : S.commutant.commutant = S :=\n  SetLike.coe_injective <| by simp\n\n"}
