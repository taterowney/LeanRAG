{"name":"inv_gold","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (Inv.inv goldenRatio) (Neg.neg goldenConj)","decl":"/-- The inverse of the golden ratio is the opposite of its conjugate. -/\ntheorem inv_gold : φ⁻¹ = -ψ := by\n  have : 1 + √5 ≠ 0 := ne_of_gt (add_pos (by norm_num) <| Real.sqrt_pos.mpr (by norm_num))\n  field_simp [sub_mul, mul_add]\n  norm_num\n\n"}
{"name":"inv_goldConj","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (Inv.inv goldenConj) (Neg.neg goldenRatio)","decl":"/-- The opposite of the golden ratio is the inverse of its conjugate. -/\ntheorem inv_goldConj : ψ⁻¹ = -φ := by\n  rw [inv_eq_iff_eq_inv, ← neg_inv, ← neg_eq_iff_eq_neg]\n  exact inv_gold.symm\n\n"}
{"name":"gold_mul_goldConj","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HMul.hMul goldenRatio goldenConj) (-1)","decl":"@[simp]\ntheorem gold_mul_goldConj : φ * ψ = -1 := by\n  field_simp\n  rw [← sq_sub_sq]\n  norm_num\n\n"}
{"name":"goldConj_mul_gold","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HMul.hMul goldenConj goldenRatio) (-1)","decl":"@[simp]\ntheorem goldConj_mul_gold : ψ * φ = -1 := by\n  rw [mul_comm]\n  exact gold_mul_goldConj\n\n"}
{"name":"gold_add_goldConj","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HAdd.hAdd goldenRatio goldenConj) 1","decl":"@[simp]\ntheorem gold_add_goldConj : φ + ψ = 1 := by\n  rw [goldenRatio, goldenConj]\n  ring\n\n"}
{"name":"one_sub_goldConj","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HSub.hSub 1 goldenRatio) goldenConj","decl":"theorem one_sub_goldConj : 1 - φ = ψ := by\n  linarith [gold_add_goldConj]\n\n"}
{"name":"one_sub_gold","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HSub.hSub 1 goldenConj) goldenRatio","decl":"theorem one_sub_gold : 1 - ψ = φ := by\n  linarith [gold_add_goldConj]\n\n"}
{"name":"gold_sub_goldConj","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HSub.hSub goldenRatio goldenConj) (Real.sqrt 5)","decl":"@[simp]\ntheorem gold_sub_goldConj : φ - ψ = √5 := by ring\n\n"}
{"name":"gold_pow_sub_gold_pow","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"n : Nat\n⊢ Eq (HSub.hSub (HPow.hPow goldenRatio (HAdd.hAdd n 2)) (HPow.hPow goldenRatio (HAdd.hAdd n 1))) (HPow.hPow goldenRatio n)","decl":"theorem gold_pow_sub_gold_pow (n : ℕ) : φ ^ (n + 2) - φ ^ (n + 1) = φ ^ n := by\n  rw [goldenRatio]; ring_nf; norm_num; ring\n\n"}
{"name":"gold_sq","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HPow.hPow goldenRatio 2) (HAdd.hAdd goldenRatio 1)","decl":"@[simp 1200]\ntheorem gold_sq : φ ^ 2 = φ + 1 := by\n  rw [goldenRatio, ← sub_eq_zero]\n  ring_nf\n  rw [Real.sq_sqrt] <;> norm_num\n\n"}
{"name":"goldConj_sq","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (HPow.hPow goldenConj 2) (HAdd.hAdd goldenConj 1)","decl":"@[simp 1200]\ntheorem goldConj_sq : ψ ^ 2 = ψ + 1 := by\n  rw [goldenConj, ← sub_eq_zero]\n  ring_nf\n  rw [Real.sq_sqrt] <;> norm_num\n\n"}
{"name":"gold_pos","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ LT.lt 0 goldenRatio","decl":"theorem gold_pos : 0 < φ :=\n  mul_pos (by apply add_pos <;> norm_num) <| inv_pos.2 zero_lt_two\n\n"}
{"name":"gold_ne_zero","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Ne goldenRatio 0","decl":"theorem gold_ne_zero : φ ≠ 0 :=\n  ne_of_gt gold_pos\n\n"}
{"name":"one_lt_gold","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ LT.lt 1 goldenRatio","decl":"theorem one_lt_gold : 1 < φ := by\n  refine lt_of_mul_lt_mul_left ?_ (le_of_lt gold_pos)\n  simp [← sq, gold_pos, zero_lt_one]\n\n"}
{"name":"gold_lt_two","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ LT.lt goldenRatio 2","decl":"theorem gold_lt_two : φ < 2 := by calc\n  (1 + sqrt 5) / 2 < (1 + 3) / 2 := by gcongr; rw [sqrt_lt'] <;> norm_num\n  _ = 2 := by norm_num\n\n"}
{"name":"goldConj_neg","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ LT.lt goldenConj 0","decl":"theorem goldConj_neg : ψ < 0 := by\n  linarith [one_sub_goldConj, one_lt_gold]\n\n"}
{"name":"goldConj_ne_zero","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Ne goldenConj 0","decl":"theorem goldConj_ne_zero : ψ ≠ 0 :=\n  ne_of_lt goldConj_neg\n\n"}
{"name":"neg_one_lt_goldConj","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ LT.lt (-1) goldenConj","decl":"theorem neg_one_lt_goldConj : -1 < ψ := by\n  rw [neg_lt, ← inv_gold]\n  exact inv_lt_one_of_one_lt₀ one_lt_gold\n\n"}
{"name":"gold_irrational","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Irrational goldenRatio","decl":"/-- The golden ratio is irrational. -/\ntheorem gold_irrational : Irrational φ := by\n  have := Nat.Prime.irrational_sqrt (show Nat.Prime 5 by norm_num)\n  have := this.rat_add 1\n  convert this.rat_mul (show (0.5 : ℚ) ≠ 0 by norm_num)\n  norm_num\n  field_simp\n\n"}
{"name":"goldConj_irrational","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Irrational goldenConj","decl":"/-- The conjugate of the golden ratio is irrational. -/\ntheorem goldConj_irrational : Irrational ψ := by\n  have := Nat.Prime.irrational_sqrt (show Nat.Prime 5 by norm_num)\n  have := this.rat_sub 1\n  convert this.rat_mul (show (0.5 : ℚ) ≠ 0 by norm_num)\n  norm_num\n  field_simp\n\n"}
{"name":"fibRec_charPoly_eq","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"β : Type u_2\ninst✝ : CommRing β\n⊢ Eq fibRec.charPoly (HSub.hSub (HPow.hPow Polynomial.X 2) (HAdd.hAdd Polynomial.X 1))","decl":"/-- The characteristic polynomial of `fibRec` is `X² - (X + 1)`. -/\ntheorem fibRec_charPoly_eq {β : Type*} [CommRing β] :\n    fibRec.charPoly = X ^ 2 - (X + (1 : β[X])) := by\n  rw [fibRec, LinearRecurrence.charPoly]\n  simp [Finset.sum_fin_eq_sum_range, Finset.sum_range_succ', ← smul_X_eq_monomial]\n\n"}
{"name":"fib_isSol_fibRec","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"α : Type u_1\ninst✝ : CommSemiring α\n⊢ fibRec.IsSolution fun x => ↑(Nat.fib x)","decl":"/-- As expected, the Fibonacci sequence is a solution of `fibRec`. -/\ntheorem fib_isSol_fibRec : fibRec.IsSolution (fun x => x.fib : ℕ → α) := by\n  rw [fibRec]\n  intro n\n  simp only\n  rw [Nat.fib_add_two, add_comm]\n  simp [Finset.sum_fin_eq_sum_range, Finset.sum_range_succ']\n\n"}
{"name":"geom_gold_isSol_fibRec","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ fibRec.IsSolution fun x => HPow.hPow goldenRatio x","decl":"/-- The geometric sequence `fun n ↦ φ^n` is a solution of `fibRec`. -/\ntheorem geom_gold_isSol_fibRec : fibRec.IsSolution (φ ^ ·) := by\n  rw [fibRec.geom_sol_iff_root_charPoly, fibRec_charPoly_eq]\n  simp [sub_eq_zero]\n\n"}
{"name":"geom_goldConj_isSol_fibRec","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ fibRec.IsSolution fun x => HPow.hPow goldenConj x","decl":"/-- The geometric sequence `fun n ↦ ψ^n` is a solution of `fibRec`. -/\ntheorem geom_goldConj_isSol_fibRec : fibRec.IsSolution (ψ ^ ·) := by\n  rw [fibRec.geom_sol_iff_root_charPoly, fibRec_charPoly_eq]\n  simp [sub_eq_zero]\n\n"}
{"name":"Real.coe_fib_eq'","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"⊢ Eq (fun n => ↑(Nat.fib n)) fun n => HDiv.hDiv (HSub.hSub (HPow.hPow goldenRatio n) (HPow.hPow goldenConj n)) (Real.sqrt 5)","decl":"/-- Binet's formula as a function equality. -/\ntheorem Real.coe_fib_eq' :\n    (fun n => Nat.fib n : ℕ → ℝ) = fun n => (φ ^ n - ψ ^ n) / √5 := by\n  rw [fibRec.sol_eq_of_eq_init]\n  · intro i hi\n    norm_cast at hi\n    fin_cases hi\n    · simp\n    · simp only [goldenRatio, goldenConj]\n      ring_nf\n      rw [mul_inv_cancel₀]; norm_num\n  · exact fib_isSol_fibRec\n  · -- Porting note: Rewrote this proof\n    suffices LinearRecurrence.IsSolution fibRec\n        ((fun n ↦ (√5)⁻¹ * φ ^ n) - (fun n ↦ (√5)⁻¹ * ψ ^ n)) by\n      convert this\n      rw [Pi.sub_apply]\n      ring\n    apply (@fibRec ℝ _).solSpace.sub_mem\n    · exact Submodule.smul_mem fibRec.solSpace (√5)⁻¹ geom_gold_isSol_fibRec\n    · exact Submodule.smul_mem fibRec.solSpace (√5)⁻¹ geom_goldConj_isSol_fibRec\n\n"}
{"name":"Real.coe_fib_eq","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"n : Nat\n⊢ Eq (↑(Nat.fib n)) (HDiv.hDiv (HSub.hSub (HPow.hPow goldenRatio n) (HPow.hPow goldenConj n)) (Real.sqrt 5))","decl":"/-- Binet's formula as a dependent equality. -/\ntheorem Real.coe_fib_eq : ∀ n, (Nat.fib n : ℝ) = (φ ^ n - ψ ^ n) / √5 := by\n  rw [← funext_iff, Real.coe_fib_eq']\n\n"}
{"name":"fib_golden_conj_exp","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"n : Nat\n⊢ Eq (HSub.hSub (↑(Nat.fib (HAdd.hAdd n 1))) (HMul.hMul goldenRatio ↑(Nat.fib n))) (HPow.hPow goldenConj n)","decl":"/-- Relationship between the Fibonacci Sequence, Golden Ratio and its conjugate's exponents --/\ntheorem fib_golden_conj_exp (n : ℕ) : Nat.fib (n + 1) - φ * Nat.fib n = ψ ^ n := by\n  repeat rw [coe_fib_eq]\n  rw [mul_div, div_sub_div_same, mul_sub, ← pow_succ']\n  ring_nf\n  have nz : sqrt 5 ≠ 0 := by norm_num\n  rw [← (mul_inv_cancel₀ nz).symm, one_mul]\n\n"}
{"name":"fib_golden_exp'","module":"Mathlib.Data.Real.GoldenRatio","initialProofState":"n : Nat\n⊢ Eq (HAdd.hAdd (HMul.hMul goldenRatio ↑(Nat.fib (HAdd.hAdd n 1))) ↑(Nat.fib n)) (HPow.hPow goldenRatio (HAdd.hAdd n 1))","decl":"/-- Relationship between the Fibonacci Sequence, Golden Ratio and its exponents --/\ntheorem fib_golden_exp' (n : ℕ) : φ * Nat.fib (n + 1) + Nat.fib n = φ ^ (n + 1) := by\n  induction n with\n  | zero => norm_num\n  | succ n ih =>\n    calc\n      _ = φ * (Nat.fib n) + φ ^ 2 * (Nat.fib (n + 1)) := by\n        simp only [Nat.fib_add_one (Nat.succ_ne_zero n), Nat.succ_sub_succ_eq_sub, tsub_zero,\n          Nat.cast_add, gold_sq]; ring\n      _ = φ * ((Nat.fib n) + φ * (Nat.fib (n + 1))) := by ring\n      _ = φ ^ (n + 2) := by rw [add_comm, ih]; ring\n"}
