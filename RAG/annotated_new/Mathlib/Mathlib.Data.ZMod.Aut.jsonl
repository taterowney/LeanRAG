{"name":"ZMod.AddAutEquivUnits_symm_apply","module":"Mathlib.Data.ZMod.Aut","initialProofState":"n : Nat\na : Units (ZMod n)\n⊢ Eq ((ZMod.AddAutEquivUnits n).symm a) (AddAut.mulLeft a)","decl":"/-- The automorphism group of `ZMod n` is isomorphic to the group of units of `ZMod n`. -/\n@[simps]\ndef AddAutEquivUnits : AddAut (ZMod n) ≃* (ZMod n)ˣ :=\n  have h (f : AddAut (ZMod n)) (x : ZMod n) : f 1 * x = f x := by\n    rw [mul_comm, ← x.intCast_zmod_cast, ← zsmul_eq_mul, ← map_zsmul, zsmul_one]\n  { toFun := fun f ↦ Units.mkOfMulEqOne (f 1) (f⁻¹ 1) ((h f _).trans (f.inv_apply_self _ _))\n    invFun := AddAut.mulLeft\n    left_inv := fun f ↦ by simp [DFunLike.ext_iff, Units.smul_def, h]\n    right_inv := fun x ↦ by simp [Units.ext_iff, Units.smul_def]\n    map_mul' := fun f g ↦ by simp [Units.ext_iff, h] }\n\n"}
{"name":"ZMod.AddAutEquivUnits_apply","module":"Mathlib.Data.ZMod.Aut","initialProofState":"n : Nat\nf : AddAut (ZMod n)\n⊢ Eq ((ZMod.AddAutEquivUnits n) f) (Units.mkOfMulEqOne (f 1) ((Inv.inv f) 1) ⋯)","decl":"/-- The automorphism group of `ZMod n` is isomorphic to the group of units of `ZMod n`. -/\n@[simps]\ndef AddAutEquivUnits : AddAut (ZMod n) ≃* (ZMod n)ˣ :=\n  have h (f : AddAut (ZMod n)) (x : ZMod n) : f 1 * x = f x := by\n    rw [mul_comm, ← x.intCast_zmod_cast, ← zsmul_eq_mul, ← map_zsmul, zsmul_one]\n  { toFun := fun f ↦ Units.mkOfMulEqOne (f 1) (f⁻¹ 1) ((h f _).trans (f.inv_apply_self _ _))\n    invFun := AddAut.mulLeft\n    left_inv := fun f ↦ by simp [DFunLike.ext_iff, Units.smul_def, h]\n    right_inv := fun x ↦ by simp [Units.ext_iff, Units.smul_def]\n    map_mul' := fun f g ↦ by simp [Units.ext_iff, h] }\n\n"}
