{"name":"SameRay.norm_add","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nh : SameRay Real x y\n⊢ Eq (Norm.norm (HAdd.hAdd x y)) (HAdd.hAdd (Norm.norm x) (Norm.norm y))","decl":"/-- If `x` and `y` are on the same ray, then the triangle inequality becomes the equality: the norm\nof `x + y` is the sum of the norms of `x` and `y`. The converse is true for a strictly convex\nspace. -/\ntheorem norm_add (h : SameRay ℝ x y) : ‖x + y‖ = ‖x‖ + ‖y‖ := by\n  rcases h.exists_eq_smul with ⟨u, a, b, ha, hb, -, rfl, rfl⟩\n  rw [← add_smul, norm_smul_of_nonneg (add_nonneg ha hb), norm_smul_of_nonneg ha,\n    norm_smul_of_nonneg hb, add_mul]\n\n"}
{"name":"SameRay.norm_sub","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nh : SameRay Real x y\n⊢ Eq (Norm.norm (HSub.hSub x y)) (abs (HSub.hSub (Norm.norm x) (Norm.norm y)))","decl":"theorem norm_sub (h : SameRay ℝ x y) : ‖x - y‖ = |‖x‖ - ‖y‖| := by\n  rcases h.exists_eq_smul with ⟨u, a, b, ha, hb, -, rfl, rfl⟩\n  wlog hab : b ≤ a generalizing a b with H\n  · rw [SameRay.sameRay_comm] at h\n    rw [norm_sub_rev, abs_sub_comm]\n    exact H b a hb ha h (le_of_not_le hab)\n  rw [← sub_nonneg] at hab\n  rw [← sub_smul, norm_smul_of_nonneg hab, norm_smul_of_nonneg ha, norm_smul_of_nonneg hb, ←\n    sub_mul, abs_of_nonneg (mul_nonneg hab (norm_nonneg _))]\n\n"}
{"name":"SameRay.norm_smul_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"E : Type u_1\ninst✝¹ : SeminormedAddCommGroup E\ninst✝ : NormedSpace Real E\nx y : E\nh : SameRay Real x y\n⊢ Eq (HSMul.hSMul (Norm.norm x) y) (HSMul.hSMul (Norm.norm y) x)","decl":"theorem norm_smul_eq (h : SameRay ℝ x y) : ‖x‖ • y = ‖y‖ • x := by\n  rcases h.exists_eq_smul with ⟨u, a, b, ha, hb, -, rfl, rfl⟩\n  simp only [norm_smul_of_nonneg, *, mul_smul]\n  rw [smul_comm, smul_comm b, smul_comm a b u]\n\n"}
{"name":"norm_injOn_ray_left","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx : F\nhx : Ne x 0\n⊢ Set.InjOn Norm.norm (setOf fun y => SameRay Real x y)","decl":"theorem norm_injOn_ray_left (hx : x ≠ 0) : { y | SameRay ℝ x y }.InjOn norm := by\n  rintro y hy z hz h\n  rcases hy.exists_nonneg_left hx with ⟨r, hr, rfl⟩\n  rcases hz.exists_nonneg_left hx with ⟨s, hs, rfl⟩\n  rw [norm_smul, norm_smul, mul_left_inj' (norm_ne_zero_iff.2 hx), norm_of_nonneg hr,\n    norm_of_nonneg hs] at h\n  rw [h]\n\n"}
{"name":"norm_injOn_ray_right","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\ny : F\nhy : Ne y 0\n⊢ Set.InjOn Norm.norm (setOf fun x => SameRay Real x y)","decl":"theorem norm_injOn_ray_right (hy : y ≠ 0) : { x | SameRay ℝ x y }.InjOn norm := by\n  simpa only [SameRay.sameRay_comm] using norm_injOn_ray_left hy\n\n"}
{"name":"sameRay_iff_norm_smul_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\n⊢ Iff (SameRay Real x y) (Eq (HSMul.hSMul (Norm.norm x) y) (HSMul.hSMul (Norm.norm y) x))","decl":"theorem sameRay_iff_norm_smul_eq : SameRay ℝ x y ↔ ‖x‖ • y = ‖y‖ • x :=\n  ⟨SameRay.norm_smul_eq, fun h =>\n    or_iff_not_imp_left.2 fun hx =>\n      or_iff_not_imp_left.2 fun hy => ⟨‖y‖, ‖x‖, norm_pos_iff.2 hy, norm_pos_iff.2 hx, h.symm⟩⟩\n\n"}
{"name":"sameRay_iff_inv_norm_smul_eq_of_ne","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\nhx : Ne x 0\nhy : Ne y 0\n⊢ Iff (SameRay Real x y) (Eq (HSMul.hSMul (Inv.inv (Norm.norm x)) x) (HSMul.hSMul (Inv.inv (Norm.norm y)) y))","decl":"/-- Two nonzero vectors `x y` in a real normed space are on the same ray if and only if the unit\nvectors `‖x‖⁻¹ • x` and `‖y‖⁻¹ • y` are equal. -/\ntheorem sameRay_iff_inv_norm_smul_eq_of_ne (hx : x ≠ 0) (hy : y ≠ 0) :\n    SameRay ℝ x y ↔ ‖x‖⁻¹ • x = ‖y‖⁻¹ • y := by\n  rw [inv_smul_eq_iff₀, smul_comm, eq_comm, inv_smul_eq_iff₀, sameRay_iff_norm_smul_eq] <;>\n    rwa [norm_ne_zero_iff]\n\n"}
{"name":"SameRay.inv_norm_smul_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\nhx : Ne x 0\nhy : Ne y 0\na✝ : SameRay Real x y\n⊢ Eq (HSMul.hSMul (Inv.inv (Norm.norm x)) x) (HSMul.hSMul (Inv.inv (Norm.norm y)) y)","decl":"alias ⟨SameRay.inv_norm_smul_eq, _⟩ := sameRay_iff_inv_norm_smul_eq_of_ne\n\n"}
{"name":"sameRay_iff_inv_norm_smul_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\n⊢ Iff (SameRay Real x y) (Or (Eq x 0) (Or (Eq y 0) (Eq (HSMul.hSMul (Inv.inv (Norm.norm x)) x) (HSMul.hSMul (Inv.inv (Norm.norm y)) y))))","decl":"/-- Two vectors `x y` in a real normed space are on the ray if and only if one of them is zero or\nthe unit vectors `‖x‖⁻¹ • x` and `‖y‖⁻¹ • y` are equal. -/\ntheorem sameRay_iff_inv_norm_smul_eq : SameRay ℝ x y ↔ x = 0 ∨ y = 0 ∨ ‖x‖⁻¹ • x = ‖y‖⁻¹ • y := by\n  rcases eq_or_ne x 0 with (rfl | hx); · simp [SameRay.zero_left]\n  rcases eq_or_ne y 0 with (rfl | hy); · simp [SameRay.zero_right]\n  simp only [sameRay_iff_inv_norm_smul_eq_of_ne hx hy, *, false_or]\n\n"}
{"name":"sameRay_iff_of_norm_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\nh : Eq (Norm.norm x) (Norm.norm y)\n⊢ Iff (SameRay Real x y) (Eq x y)","decl":"/-- Two vectors of the same norm are on the same ray if and only if they are equal. -/\ntheorem sameRay_iff_of_norm_eq (h : ‖x‖ = ‖y‖) : SameRay ℝ x y ↔ x = y := by\n  obtain rfl | hy := eq_or_ne y 0\n  · rw [norm_zero, norm_eq_zero] at h\n    exact iff_of_true (SameRay.zero_right _) h\n  · exact ⟨fun hxy => norm_injOn_ray_right hy hxy SameRay.rfl h, fun hxy => hxy ▸ SameRay.rfl⟩\n\n"}
{"name":"not_sameRay_iff_of_norm_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\nh : Eq (Norm.norm x) (Norm.norm y)\n⊢ Iff (Not (SameRay Real x y)) (Ne x y)","decl":"theorem not_sameRay_iff_of_norm_eq (h : ‖x‖ = ‖y‖) : ¬SameRay ℝ x y ↔ x ≠ y :=\n  (sameRay_iff_of_norm_eq h).not\n\n"}
{"name":"SameRay.eq_of_norm_eq","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\nh : SameRay Real x y\nhn : Eq (Norm.norm x) (Norm.norm y)\n⊢ Eq x y","decl":"/-- If two points on the same ray have the same norm, then they are equal. -/\ntheorem SameRay.eq_of_norm_eq (h : SameRay ℝ x y) (hn : ‖x‖ = ‖y‖) : x = y :=\n  (sameRay_iff_of_norm_eq hn).mp h\n\n"}
{"name":"SameRay.norm_eq_iff","module":"Mathlib.Analysis.Normed.Module.Ray","initialProofState":"F : Type u_2\ninst✝¹ : NormedAddCommGroup F\ninst✝ : NormedSpace Real F\nx y : F\nh : SameRay Real x y\n⊢ Iff (Eq (Norm.norm x) (Norm.norm y)) (Eq x y)","decl":"/-- The norms of two vectors on the same ray are equal if and only if they are equal. -/\ntheorem SameRay.norm_eq_iff (h : SameRay ℝ x y) : ‖x‖ = ‖y‖ ↔ x = y :=\n  ⟨h.eq_of_norm_eq, fun h => h ▸ rfl⟩\n"}
