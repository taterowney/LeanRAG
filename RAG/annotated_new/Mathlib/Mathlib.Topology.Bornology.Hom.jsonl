{"name":"LocallyBoundedMap.mk.injEq","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : Bornology α\ninst✝ : Bornology β\ntoFun✝ : α → β\ncomap_cobounded_le'✝ : LE.le (Filter.comap toFun✝ (Bornology.cobounded β)) (Bornology.cobounded α)\ntoFun : α → β\ncomap_cobounded_le' : LE.le (Filter.comap toFun (Bornology.cobounded β)) (Bornology.cobounded α)\n⊢ Eq (Eq { toFun := toFun✝, comap_cobounded_le' := comap_cobounded_le'✝ } { toFun := toFun, comap_cobounded_le' := comap_cobounded_le' }) (Eq toFun✝ toFun)","decl":"/-- The type of bounded maps from `α` to `β`, the maps which send a bounded set to a bounded set. -/\nstructure LocallyBoundedMap (α β : Type*) [Bornology α] [Bornology β] where\n  /-- The function underlying a locally bounded map -/\n  toFun : α → β\n  /-- The pullback of the `Bornology.cobounded` filter under the function is contained in the\n  cobounded filter. Equivalently, the function maps bounded sets to bounded sets. -/\n  comap_cobounded_le' : (cobounded β).comap toFun ≤ cobounded α\n\n"}
{"name":"LocallyBoundedMap.comap_cobounded_le'","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nself : LocallyBoundedMap α β\n⊢ LE.le (Filter.comap self.toFun (Bornology.cobounded β)) (Bornology.cobounded α)","decl":"/-- The type of bounded maps from `α` to `β`, the maps which send a bounded set to a bounded set. -/\nstructure LocallyBoundedMap (α β : Type*) [Bornology α] [Bornology β] where\n  /-- The function underlying a locally bounded map -/\n  toFun : α → β\n  /-- The pullback of the `Bornology.cobounded` filter under the function is contained in the\n  cobounded filter. Equivalently, the function maps bounded sets to bounded sets. -/\n  comap_cobounded_le' : (cobounded β).comap toFun ≤ cobounded α\n\n"}
{"name":"LocallyBoundedMap.mk.sizeOf_spec","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝³ : Bornology α\ninst✝² : Bornology β\ninst✝¹ : SizeOf α\ninst✝ : SizeOf β\ntoFun : α → β\ncomap_cobounded_le' : LE.le (Filter.comap toFun (Bornology.cobounded β)) (Bornology.cobounded α)\n⊢ Eq (SizeOf.sizeOf { toFun := toFun, comap_cobounded_le' := comap_cobounded_le' }) 1","decl":"/-- The type of bounded maps from `α` to `β`, the maps which send a bounded set to a bounded set. -/\nstructure LocallyBoundedMap (α β : Type*) [Bornology α] [Bornology β] where\n  /-- The function underlying a locally bounded map -/\n  toFun : α → β\n  /-- The pullback of the `Bornology.cobounded` filter under the function is contained in the\n  cobounded filter. Equivalently, the function maps bounded sets to bounded sets. -/\n  comap_cobounded_le' : (cobounded β).comap toFun ≤ cobounded α\n\n"}
{"name":"LocallyBoundedMap.mk.inj","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_6\nβ : Type u_7\ninst✝¹ : Bornology α\ninst✝ : Bornology β\ntoFun✝ : α → β\ncomap_cobounded_le'✝ : LE.le (Filter.comap toFun✝ (Bornology.cobounded β)) (Bornology.cobounded α)\ntoFun : α → β\ncomap_cobounded_le' : LE.le (Filter.comap toFun (Bornology.cobounded β)) (Bornology.cobounded α)\nx✝ : Eq { toFun := toFun✝, comap_cobounded_le' := comap_cobounded_le'✝ } { toFun := toFun, comap_cobounded_le' := comap_cobounded_le' }\n⊢ Eq toFun✝ toFun","decl":"/-- The type of bounded maps from `α` to `β`, the maps which send a bounded set to a bounded set. -/\nstructure LocallyBoundedMap (α β : Type*) [Bornology α] [Bornology β] where\n  /-- The function underlying a locally bounded map -/\n  toFun : α → β\n  /-- The pullback of the `Bornology.cobounded` filter under the function is contained in the\n  cobounded filter. Equivalently, the function maps bounded sets to bounded sets. -/\n  comap_cobounded_le' : (cobounded β).comap toFun ≤ cobounded α\n\n"}
{"name":"LocallyBoundedMapClass.comap_cobounded_le","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"F : Type u_6\nα : outParam (Type u_7)\nβ : outParam (Type u_8)\ninst✝² : Bornology α\ninst✝¹ : Bornology β\ninst✝ : FunLike F α β\nself : LocallyBoundedMapClass F α β\nf : F\n⊢ LE.le (Filter.comap (⇑f) (Bornology.cobounded β)) (Bornology.cobounded α)","decl":"/-- `LocallyBoundedMapClass F α β` states that `F` is a type of bounded maps.\n\nYou should extend this class when you extend `LocallyBoundedMap`. -/\nclass LocallyBoundedMapClass (F : Type*) (α β : outParam Type*) [Bornology α]\n    [Bornology β] [FunLike F α β] : Prop where\n  /-- The pullback of the `Bornology.cobounded` filter under the function is contained in the\n  cobounded filter. Equivalently, the function maps bounded sets to bounded sets. -/\n  comap_cobounded_le (f : F) : (cobounded β).comap f ≤ cobounded α\n\n"}
{"name":"Bornology.IsBounded.image","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"F : Type u_1\nα : Type u_2\nβ : Type u_3\ninst✝³ : FunLike F α β\ninst✝² : Bornology α\ninst✝¹ : Bornology β\ninst✝ : LocallyBoundedMapClass F α β\nf : F\ns : Set α\nhs : Bornology.IsBounded s\n⊢ Bornology.IsBounded (Set.image (⇑f) s)","decl":"theorem Bornology.IsBounded.image [Bornology α] [Bornology β] [LocallyBoundedMapClass F α β] (f : F)\n    {s : Set α} (hs : IsBounded s) : IsBounded (f '' s) :=\n  comap_cobounded_le_iff.1 (comap_cobounded_le f) hs\n\n"}
{"name":"LocallyBoundedMap.instLocallyBoundedMapClass","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\n⊢ LocallyBoundedMapClass (LocallyBoundedMap α β) α β","decl":"instance : LocallyBoundedMapClass (LocallyBoundedMap α β) α β where\n  comap_cobounded_le f := f.comap_cobounded_le'\n\n"}
{"name":"LocallyBoundedMap.ext_iff","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf g : LocallyBoundedMap α β\n⊢ Iff (Eq f g) (∀ (a : α), Eq (f a) (g a))","decl":"@[ext]\ntheorem ext {f g : LocallyBoundedMap α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"LocallyBoundedMap.ext","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf g : LocallyBoundedMap α β\nh : ∀ (a : α), Eq (f a) (g a)\n⊢ Eq f g","decl":"@[ext]\ntheorem ext {f g : LocallyBoundedMap α β} (h : ∀ a, f a = g a) : f = g :=\n  DFunLike.ext f g h\n\n"}
{"name":"LocallyBoundedMap.coe_copy","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf : LocallyBoundedMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (⇑(f.copy f' h)) f'","decl":"@[simp]\ntheorem coe_copy (f : LocallyBoundedMap α β) (f' : α → β) (h : f' = f) : ⇑(f.copy f' h) = f' :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.copy_eq","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf : LocallyBoundedMap α β\nf' : α → β\nh : Eq f' ⇑f\n⊢ Eq (f.copy f' h) f","decl":"theorem copy_eq (f : LocallyBoundedMap α β) (f' : α → β) (h : f' = f) : f.copy f' h = f :=\n  DFunLike.ext' h\n\n"}
{"name":"LocallyBoundedMap.coe_ofMapBounded","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf : α → β\nh : ∀ ⦃s : Set α⦄, Bornology.IsBounded s → Bornology.IsBounded (Set.image f s)\n⊢ Eq (⇑(LocallyBoundedMap.ofMapBounded f h)) f","decl":"@[simp]\ntheorem coe_ofMapBounded (f : α → β) {h} : ⇑(ofMapBounded f h) = f :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.ofMapBounded_apply","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf : α → β\nh : ∀ ⦃s : Set α⦄, Bornology.IsBounded s → Bornology.IsBounded (Set.image f s)\na : α\n⊢ Eq ((LocallyBoundedMap.ofMapBounded f h) a) (f a)","decl":"@[simp]\ntheorem ofMapBounded_apply (f : α → β) {h} (a : α) : ofMapBounded f h a = f a :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.coe_id","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\ninst✝ : Bornology α\n⊢ Eq (⇑(LocallyBoundedMap.id α)) id","decl":"@[simp, norm_cast]\ntheorem coe_id : ⇑(LocallyBoundedMap.id α) = id :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.id_apply","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\ninst✝ : Bornology α\na : α\n⊢ Eq ((LocallyBoundedMap.id α) a) a","decl":"@[simp]\ntheorem id_apply (a : α) : LocallyBoundedMap.id α a = a :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.coe_comp","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : Bornology α\ninst✝¹ : Bornology β\ninst✝ : Bornology γ\nf : LocallyBoundedMap β γ\ng : LocallyBoundedMap α β\n⊢ Eq (⇑(f.comp g)) (Function.comp ⇑f ⇑g)","decl":"@[simp]\ntheorem coe_comp (f : LocallyBoundedMap β γ) (g : LocallyBoundedMap α β) : ⇑(f.comp g) = f ∘ g :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.comp_apply","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : Bornology α\ninst✝¹ : Bornology β\ninst✝ : Bornology γ\nf : LocallyBoundedMap β γ\ng : LocallyBoundedMap α β\na : α\n⊢ Eq ((f.comp g) a) (f (g a))","decl":"@[simp]\ntheorem comp_apply (f : LocallyBoundedMap β γ) (g : LocallyBoundedMap α β) (a : α) :\n    f.comp g a = f (g a) :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.comp_assoc","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\ninst✝³ : Bornology α\ninst✝² : Bornology β\ninst✝¹ : Bornology γ\ninst✝ : Bornology δ\nf : LocallyBoundedMap γ δ\ng : LocallyBoundedMap β γ\nh : LocallyBoundedMap α β\n⊢ Eq ((f.comp g).comp h) (f.comp (g.comp h))","decl":"@[simp]\ntheorem comp_assoc (f : LocallyBoundedMap γ δ) (g : LocallyBoundedMap β γ)\n    (h : LocallyBoundedMap α β) : (f.comp g).comp h = f.comp (g.comp h) :=\n  rfl\n\n"}
{"name":"LocallyBoundedMap.comp_id","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf : LocallyBoundedMap α β\n⊢ Eq (f.comp (LocallyBoundedMap.id α)) f","decl":"@[simp]\ntheorem comp_id (f : LocallyBoundedMap α β) : f.comp (LocallyBoundedMap.id α) = f :=\n  ext fun _ => rfl\n\n"}
{"name":"LocallyBoundedMap.id_comp","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\ninst✝¹ : Bornology α\ninst✝ : Bornology β\nf : LocallyBoundedMap α β\n⊢ Eq ((LocallyBoundedMap.id β).comp f) f","decl":"@[simp]\ntheorem id_comp (f : LocallyBoundedMap α β) : (LocallyBoundedMap.id β).comp f = f :=\n  ext fun _ => rfl\n\n"}
{"name":"LocallyBoundedMap.cancel_right","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : Bornology α\ninst✝¹ : Bornology β\ninst✝ : Bornology γ\ng₁ g₂ : LocallyBoundedMap β γ\nf : LocallyBoundedMap α β\nhf : Function.Surjective ⇑f\n⊢ Iff (Eq (g₁.comp f) (g₂.comp f)) (Eq g₁ g₂)","decl":"@[simp]\ntheorem cancel_right {g₁ g₂ : LocallyBoundedMap β γ} {f : LocallyBoundedMap α β}\n    (hf : Surjective f) : g₁.comp f = g₂.comp f ↔ g₁ = g₂ :=\n  ⟨fun h => ext <| hf.forall.2 <| DFunLike.ext_iff.1 h, congrArg (comp · _)⟩\n\n"}
{"name":"LocallyBoundedMap.cancel_left","module":"Mathlib.Topology.Bornology.Hom","initialProofState":"α : Type u_2\nβ : Type u_3\nγ : Type u_4\ninst✝² : Bornology α\ninst✝¹ : Bornology β\ninst✝ : Bornology γ\ng : LocallyBoundedMap β γ\nf₁ f₂ : LocallyBoundedMap α β\nhg : Function.Injective ⇑g\n⊢ Iff (Eq (g.comp f₁) (g.comp f₂)) (Eq f₁ f₂)","decl":"@[simp]\ntheorem cancel_left {g : LocallyBoundedMap β γ} {f₁ f₂ : LocallyBoundedMap α β} (hg : Injective g) :\n    g.comp f₁ = g.comp f₂ ↔ f₁ = f₂ :=\n  ⟨fun h => ext fun a => hg <| by rw [← comp_apply, h, comp_apply], congr_arg _⟩\n\n"}
