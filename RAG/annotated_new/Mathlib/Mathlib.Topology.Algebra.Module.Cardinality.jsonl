{"name":"continuum_le_cardinal_of_nontriviallyNormedField","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"𝕜 : Type u_1\ninst✝¹ : NontriviallyNormedField 𝕜\ninst✝ : CompleteSpace 𝕜\n⊢ LE.le Cardinal.continuum (Cardinal.mk 𝕜)","decl":"/-- A complete nontrivially normed field has cardinality at least continuum. -/\ntheorem continuum_le_cardinal_of_nontriviallyNormedField\n    (𝕜 : Type*) [NontriviallyNormedField 𝕜] [CompleteSpace 𝕜] : 𝔠 ≤ #𝕜 := by\n  suffices ∃ f : (ℕ → Bool) → 𝕜, range f ⊆ univ ∧ Continuous f ∧ Injective f by\n    rcases this with ⟨f, -, -, f_inj⟩\n    simpa using lift_mk_le_lift_mk_of_injective f_inj\n  apply Perfect.exists_nat_bool_injection _ univ_nonempty\n  refine ⟨isClosed_univ, preperfect_iff_nhds.2 (fun x _ U hU ↦ ?_)⟩\n  rcases NormedField.exists_norm_lt_one 𝕜 with ⟨c, c_pos, hc⟩\n  have A : Tendsto (fun n ↦ x + c^n) atTop (𝓝 (x + 0)) :=\n    tendsto_const_nhds.add (tendsto_pow_atTop_nhds_zero_of_norm_lt_one hc)\n  rw [add_zero] at A\n  have B : ∀ᶠ n in atTop, x + c^n ∈ U := tendsto_def.1 A U hU\n  rcases B.exists with ⟨n, hn⟩\n  refine ⟨x + c^n, by simpa using hn, ?_⟩\n  simp only [ne_eq, add_right_eq_self]\n  apply pow_ne_zero\n  simpa using c_pos\n\n"}
{"name":"continuum_le_cardinal_of_module","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"𝕜 : Type u\nE : Type v\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : CompleteSpace 𝕜\ninst✝² : AddCommGroup E\ninst✝¹ : Module 𝕜 E\ninst✝ : Nontrivial E\n⊢ LE.le Cardinal.continuum (Cardinal.mk E)","decl":"/-- A nontrivial module over a complete nontrivially normed field has cardinality at least\ncontinuum. -/\ntheorem continuum_le_cardinal_of_module\n    (𝕜 : Type u) (E : Type v) [NontriviallyNormedField 𝕜] [CompleteSpace 𝕜]\n    [AddCommGroup E] [Module 𝕜 E] [Nontrivial E] : 𝔠 ≤ #E := by\n  have A : lift.{v} (𝔠 : Cardinal.{u}) ≤ lift.{v} (#𝕜) := by\n    simpa using continuum_le_cardinal_of_nontriviallyNormedField 𝕜\n  simpa using A.trans (Cardinal.mk_le_of_module 𝕜 E)\n\n"}
{"name":"cardinal_eq_of_mem_nhds_zero","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"E : Type u_1\n𝕜 : Type u_2\ninst✝⁴ : NontriviallyNormedField 𝕜\ninst✝³ : AddCommGroup E\ninst✝² : Module 𝕜 E\ninst✝¹ : TopologicalSpace E\ninst✝ : ContinuousSMul 𝕜 E\ns : Set E\nhs : Membership.mem (nhds 0) s\n⊢ Eq (Cardinal.mk ↑s) (Cardinal.mk E)","decl":"/-- In a topological vector space over a nontrivially normed field, any neighborhood of zero has\nthe same cardinality as the whole space.\n\nSee also `cardinal_eq_of_mem_nhds`. -/\nlemma cardinal_eq_of_mem_nhds_zero\n    {E : Type*} (𝕜 : Type*) [NontriviallyNormedField 𝕜] [AddCommGroup E] [Module 𝕜 E]\n    [TopologicalSpace E] [ContinuousSMul 𝕜 E] {s : Set E} (hs : s ∈ 𝓝 (0 : E)) : #s = #E := by\n  /- As `s` is a neighborhood of `0`, the space is covered by the rescaled sets `c^n • s`,\n  where `c` is any element of `𝕜` with norm `> 1`. All these sets are in bijection and have\n  therefore the same cardinality. The conclusion follows. -/\n  obtain ⟨c, hc⟩ : ∃ x : 𝕜 , 1 < ‖x‖ := NormedField.exists_lt_norm 𝕜 1\n  have cn_ne : ∀ n, c^n ≠ 0 := by\n    intro n\n    apply pow_ne_zero\n    rintro rfl\n    simp only [norm_zero] at hc\n    exact lt_irrefl _ (hc.trans zero_lt_one)\n  have A : ∀ (x : E), ∀ᶠ n in (atTop : Filter ℕ), x ∈ c^n • s := by\n    intro x\n    have : Tendsto (fun n ↦ (c^n) ⁻¹ • x) atTop (𝓝 ((0 : 𝕜) • x)) := by\n      have : Tendsto (fun n ↦ (c^n)⁻¹) atTop (𝓝 0) := by\n        simp_rw [← inv_pow]\n        apply tendsto_pow_atTop_nhds_zero_of_norm_lt_one\n        rw [norm_inv]\n        exact inv_lt_one_of_one_lt₀ hc\n      exact Tendsto.smul_const this x\n    rw [zero_smul] at this\n    filter_upwards [this hs] with n (hn : (c ^ n)⁻¹ • x ∈ s)\n    exact (mem_smul_set_iff_inv_smul_mem₀ (cn_ne n) _ _).2 hn\n  have B : ∀ n, #(c^n • s :) = #s := by\n    intro n\n    have : (c^n • s :) ≃ s :=\n    { toFun := fun x ↦ ⟨(c^n)⁻¹ • x.1, (mem_smul_set_iff_inv_smul_mem₀ (cn_ne n) _ _).1 x.2⟩\n      invFun := fun x ↦ ⟨(c^n) • x.1, smul_mem_smul_set x.2⟩\n      left_inv := fun x ↦ by simp [smul_smul, mul_inv_cancel₀ (cn_ne n)]\n      right_inv := fun x ↦ by simp [smul_smul, inv_mul_cancel₀ (cn_ne n)] }\n    exact Cardinal.mk_congr this\n  apply (Cardinal.mk_of_countable_eventually_mem A B).symm\n\n"}
{"name":"cardinal_eq_of_mem_nhds","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"E : Type u_1\n𝕜 : Type u_2\ninst✝⁵ : NontriviallyNormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul 𝕜 E\ns : Set E\nx : E\nhs : Membership.mem (nhds x) s\n⊢ Eq (Cardinal.mk ↑s) (Cardinal.mk E)","decl":"/-- In a topological vector space over a nontrivially normed field, any neighborhood of a point has\nthe same cardinality as the whole space. -/\ntheorem cardinal_eq_of_mem_nhds\n    {E : Type*} (𝕜 : Type*) [NontriviallyNormedField 𝕜] [AddCommGroup E] [Module 𝕜 E]\n    [TopologicalSpace E] [ContinuousAdd E] [ContinuousSMul 𝕜 E]\n    {s : Set E} {x : E} (hs : s ∈ 𝓝 x) : #s = #E := by\n  let g := Homeomorph.addLeft x\n  let t := g ⁻¹' s\n  have : t ∈ 𝓝 0 := g.continuous.continuousAt.preimage_mem_nhds (by simpa [g] using hs)\n  have A : #t = #E := cardinal_eq_of_mem_nhds_zero 𝕜 this\n  have B : #t = #s := Cardinal.mk_subtype_of_equiv s g.toEquiv\n  rwa [B] at A\n\n"}
{"name":"cardinal_eq_of_isOpen","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"E : Type u_1\n𝕜 : Type u_2\ninst✝⁵ : NontriviallyNormedField 𝕜\ninst✝⁴ : AddCommGroup E\ninst✝³ : Module 𝕜 E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul 𝕜 E\ns : Set E\nhs : IsOpen s\nh's : s.Nonempty\n⊢ Eq (Cardinal.mk ↑s) (Cardinal.mk E)","decl":"/-- In a topological vector space over a nontrivially normed field, any nonempty open set has\nthe same cardinality as the whole space. -/\ntheorem cardinal_eq_of_isOpen\n    {E : Type*} (𝕜 : Type*) [NontriviallyNormedField 𝕜] [AddCommGroup E] [Module 𝕜 E]\n    [TopologicalSpace E] [ContinuousAdd E] [ContinuousSMul 𝕜 E] {s : Set E}\n    (hs : IsOpen s) (h's : s.Nonempty) : #s = #E := by\n  rcases h's with ⟨x, hx⟩\n  exact cardinal_eq_of_mem_nhds 𝕜 (hs.mem_nhds hx)\n\n"}
{"name":"continuum_le_cardinal_of_isOpen","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"E : Type u_1\n𝕜 : Type u_2\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : CompleteSpace 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : Nontrivial E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul 𝕜 E\ns : Set E\nhs : IsOpen s\nh's : s.Nonempty\n⊢ LE.le Cardinal.continuum (Cardinal.mk ↑s)","decl":"/-- In a nontrivial topological vector space over a complete nontrivially normed field, any nonempty\nopen set has cardinality at least continuum. -/\ntheorem continuum_le_cardinal_of_isOpen\n    {E : Type*} (𝕜 : Type*) [NontriviallyNormedField 𝕜] [CompleteSpace 𝕜] [AddCommGroup E]\n    [Module 𝕜 E] [Nontrivial E] [TopologicalSpace E] [ContinuousAdd E] [ContinuousSMul 𝕜 E]\n    {s : Set E} (hs : IsOpen s) (h's : s.Nonempty) : 𝔠 ≤ #s := by\n  simpa [cardinal_eq_of_isOpen 𝕜 hs h's] using continuum_le_cardinal_of_module 𝕜 E\n\n"}
{"name":"Set.Countable.dense_compl","module":"Mathlib.Topology.Algebra.Module.Cardinality","initialProofState":"E : Type u\n𝕜 : Type u_1\ninst✝⁷ : NontriviallyNormedField 𝕜\ninst✝⁶ : CompleteSpace 𝕜\ninst✝⁵ : AddCommGroup E\ninst✝⁴ : Module 𝕜 E\ninst✝³ : Nontrivial E\ninst✝² : TopologicalSpace E\ninst✝¹ : ContinuousAdd E\ninst✝ : ContinuousSMul 𝕜 E\ns : Set E\nhs : s.Countable\n⊢ Dense (HasCompl.compl s)","decl":"/-- In a nontrivial topological vector space over a complete nontrivially normed field, any\ncountable set has dense complement. -/\ntheorem Set.Countable.dense_compl\n    {E : Type u} (𝕜 : Type*) [NontriviallyNormedField 𝕜] [CompleteSpace 𝕜] [AddCommGroup E]\n    [Module 𝕜 E] [Nontrivial E] [TopologicalSpace E] [ContinuousAdd E] [ContinuousSMul 𝕜 E]\n    {s : Set E} (hs : s.Countable) : Dense sᶜ := by\n  rw [← interior_eq_empty_iff_dense_compl]\n  by_contra H\n  apply lt_irrefl (ℵ₀ : Cardinal.{u})\n  calc\n    (ℵ₀ : Cardinal.{u}) < 𝔠 := aleph0_lt_continuum\n    _ ≤ #(interior s) :=\n      continuum_le_cardinal_of_isOpen 𝕜 isOpen_interior (nmem_singleton_empty.1 H)\n    _ ≤ #s := mk_le_mk_of_subset interior_subset\n    _ ≤ ℵ₀ := le_aleph0 hs\n"}
