{"name":"Int.mem_range_iff","module":"Mathlib.Data.Int.Range","initialProofState":"m n r : Int\n⊢ Iff (Membership.mem (m.range n) r) (And (LE.le m r) (LT.lt r n))","decl":"theorem mem_range_iff {m n r : ℤ} : r ∈ range m n ↔ m ≤ r ∧ r < n := by\n  simp only [range, List.mem_map, List.mem_range, lt_toNat, lt_sub_iff_add_lt, add_comm]\n  exact ⟨fun ⟨a, ha⟩ => ha.2 ▸ ⟨le_add_of_nonneg_right (Int.natCast_nonneg _), ha.1⟩,\n    fun h => ⟨toNat (r - m), by simp [toNat_of_nonneg (sub_nonneg.2 h.1), h.2] ⟩⟩\n\n"}
