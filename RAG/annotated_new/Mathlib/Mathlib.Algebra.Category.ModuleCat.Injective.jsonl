{"name":"Module.injective_object_of_injective_module","module":"Mathlib.Algebra.Category.ModuleCat.Injective","initialProofState":"R : Type u\nM : Type v\ninst✝² : Ring R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\ninj : Module.Injective R M\n⊢ CategoryTheory.Injective (ModuleCat.of R M)","decl":"theorem injective_object_of_injective_module [inj : Injective R M] :\n    CategoryTheory.Injective (ModuleCat.of R M) where\n  factors g f m :=\n    have ⟨l, h⟩ := inj.out f.hom ((ModuleCat.mono_iff_injective f).mp m) g.hom\n    ⟨ModuleCat.ofHom l, by ext x; simpa using h x⟩\n\n"}
{"name":"Module.injective_module_of_injective_object","module":"Mathlib.Algebra.Category.ModuleCat.Injective","initialProofState":"R : Type u\nM : Type v\ninst✝² : Ring R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\ninj : CategoryTheory.Injective (ModuleCat.of R M)\n⊢ Module.Injective R M","decl":"theorem injective_module_of_injective_object\n    [inj : CategoryTheory.Injective <| ModuleCat.of R M] :\n    Module.Injective R M where\n  out X Y _ _ _ _ f hf g := by\n    have : CategoryTheory.Mono (ModuleCat.ofHom f) := (ModuleCat.mono_iff_injective _).mpr hf\n    obtain ⟨l, h⟩ := inj.factors (ModuleCat.ofHom g) (ModuleCat.ofHom f)\n    obtain rfl := ModuleCat.hom_ext_iff.mp h\n    exact ⟨l.hom, fun _ => rfl⟩\n\n"}
{"name":"Module.injective_iff_injective_object","module":"Mathlib.Algebra.Category.ModuleCat.Injective","initialProofState":"R : Type u\nM : Type v\ninst✝² : Ring R\ninst✝¹ : AddCommGroup M\ninst✝ : Module R M\n⊢ Iff (Module.Injective R M) (CategoryTheory.Injective (ModuleCat.of R M))","decl":"theorem injective_iff_injective_object :\n    Module.Injective R M ↔\n    CategoryTheory.Injective (ModuleCat.of R M) :=\n  ⟨fun _ => injective_object_of_injective_module R M,\n   fun _ => injective_module_of_injective_object R M⟩\n\n"}
{"name":"ModuleCat.ulift_injective_of_injective","module":"Mathlib.Algebra.Category.ModuleCat.Injective","initialProofState":"R : Type u\nM : Type v\ninst✝⁴ : Ring R\ninst✝³ : Small.{v, u} R\ninst✝² : AddCommGroup M\ninst✝¹ : Module R M\ninst✝ : CategoryTheory.Injective (ModuleCat.of R M)\n⊢ CategoryTheory.Injective (ModuleCat.of R (ULift.{v', v} M))","decl":"instance ModuleCat.ulift_injective_of_injective.{v'}\n    [Small.{v} R] [AddCommGroup M] [Module R M]\n    [CategoryTheory.Injective <| ModuleCat.of R M] :\n    CategoryTheory.Injective <| ModuleCat.of R (ULift.{v'} M) :=\n  Module.injective_object_of_injective_module\n    (inj := Module.ulift_injective_of_injective\n      (inj := Module.injective_module_of_injective_object _ _))\n"}
