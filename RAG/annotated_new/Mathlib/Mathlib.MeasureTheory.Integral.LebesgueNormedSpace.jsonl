{"name":"aemeasurable_withDensity_iff","module":"Mathlib.MeasureTheory.Integral.LebesgueNormedSpace","initialProofState":"α : Type u_1\nm : MeasurableSpace α\nμ : MeasureTheory.Measure α\nE : Type u_2\ninst✝⁴ : NormedAddCommGroup E\ninst✝³ : NormedSpace Real E\ninst✝² : SecondCountableTopology E\ninst✝¹ : MeasurableSpace E\ninst✝ : BorelSpace E\nf : α → NNReal\nhf : Measurable f\ng : α → E\n⊢ Iff (AEMeasurable g (μ.withDensity fun x => ↑(f x))) (AEMeasurable (fun x => HSMul.hSMul (↑(f x)) (g x)) μ)","decl":"theorem aemeasurable_withDensity_iff {E : Type*} [NormedAddCommGroup E] [NormedSpace ℝ E]\n    [SecondCountableTopology E] [MeasurableSpace E] [BorelSpace E] {f : α → ℝ≥0}\n    (hf : Measurable f) {g : α → E} :\n    AEMeasurable g (μ.withDensity fun x => (f x : ℝ≥0∞)) ↔\n      AEMeasurable (fun x => (f x : ℝ) • g x) μ := by\n  constructor\n  · rintro ⟨g', g'meas, hg'⟩\n    have A : MeasurableSet { x : α | f x ≠ 0 } := (hf (measurableSet_singleton 0)).compl\n    refine ⟨fun x => (f x : ℝ) • g' x, hf.coe_nnreal_real.smul g'meas, ?_⟩\n    apply @ae_of_ae_restrict_of_ae_restrict_compl _ _ _ { x | f x ≠ 0 }\n    · rw [EventuallyEq, ae_withDensity_iff hf.coe_nnreal_ennreal] at hg'\n      rw [ae_restrict_iff' A]\n      filter_upwards [hg']\n      intro a ha h'a\n      have : (f a : ℝ≥0∞) ≠ 0 := by simpa only [Ne, ENNReal.coe_eq_zero] using h'a\n      rw [ha this]\n    · filter_upwards [ae_restrict_mem A.compl]\n      intro x hx\n      simp only [Classical.not_not, mem_setOf_eq, mem_compl_iff] at hx\n      simp [hx]\n  · rintro ⟨g', g'meas, hg'⟩\n    refine ⟨fun x => (f x : ℝ)⁻¹ • g' x, hf.coe_nnreal_real.inv.smul g'meas, ?_⟩\n    rw [EventuallyEq, ae_withDensity_iff hf.coe_nnreal_ennreal]\n    filter_upwards [hg']\n    intro x hx h'x\n    rw [← hx, smul_smul, inv_mul_cancel₀, one_smul]\n    simp only [Ne, ENNReal.coe_eq_zero] at h'x\n    simpa only [NNReal.coe_eq_zero, Ne] using h'x\n"}
